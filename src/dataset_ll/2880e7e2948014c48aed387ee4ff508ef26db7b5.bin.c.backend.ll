source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_e9c0.14 = constant i32 -382906384
@global_var_13f98.16 = constant i32 -382909968
@global_var_2038c.20 = global i32 0
@global_var_d208.26 = constant i32 -382906384
@global_var_d674.28 = constant i32 -382906384
@global_var_c97c.30 = constant i32 -382906384
@global_var_c2a4.32 = constant i32 -382906384
@global_var_bb80.34 = constant i32 -382906384
@global_var_b354.36 = constant i32 -382906384
@global_var_acf4.38 = constant i32 -382906384
@global_var_889c.41 = constant i32 -382906384
@global_var_176ac.43 = constant [4 x i8] c"GET\00"
@global_var_176b0.45 = constant i32 47
@global_var_124d0.48 = constant i32 -382910336
@global_var_176a4.50 = constant i32 32
@global_var_1767c.52 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_17694.54 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_176a0.56 = constant [3 x i8] c"\0D\0A\00"
@global_var_176b4.58 = constant [9 x i8] c"Cookie: \00"
@global_var_176c0.60 = constant [3 x i8] c"; \00"
@global_var_176cc.62 = constant i32 59
@global_var_176c4.64 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_176d0.66 = constant [5 x i8] c"http\00"
@global_var_176d8.68 = constant [5 x i8] c"url=\00"
@global_var_176e0.70 = constant [5 x i8] c"POST\00"
@global_var_176e8.72 = constant i32 39
@global_var_11894.73 = constant i32 -439279616
@global_var_179e4.75 = constant i32 61
@global_var_22418.77 = global i32 0
@global_var_20390.88 = global i32 0
@global_var_2241c.92 = local_unnamed_addr global i32 0
@global_var_20394.94 = global i32 0
@global_var_22424.100 = local_unnamed_addr global i32 0
@global_var_22422.101 = local_unnamed_addr global i32 0
@global_var_20398.106 = global i32 0
@global_var_176ec.114 = constant i32 10
@global_var_176f0.123 = constant i32 16777216
@global_var_203a0.125 = global i32 0
@global_var_203ac.127 = global i32 0
@global_var_203a4.129 = global i32 0
@global_var_203a8.131 = global i32 0
@global_var_22438.141 = global i32 0
@global_var_203e4.143 = global i32 0
@global_var_203b0.145 = global i32 0
@global_var_203dc.147 = global i32 0
@global_var_22430.154 = global i32 0
@global_var_22434.156 = global i32 0
@global_var_203b6.159 = local_unnamed_addr global i32 0
@global_var_203c8.161 = global i32 0
@global_var_203bc.163 = local_unnamed_addr global i32 0
@global_var_203b8.164 = local_unnamed_addr global i32 0
@global_var_203bd.165 = local_unnamed_addr global i32 0
@global_var_203d6.168 = local_unnamed_addr global i32 0
@global_var_17700.170 = constant [8 x i8] c"1!%1\229?\00"
@global_var_176f8.172 = constant [6 x i8] c"14=9>\00"
@global_var_17708.174 = constant [5 x i8] c" 1##\00"
@global_var_17710.176 = constant [9 x i8] c"381>75=5\00"
@global_var_1771c.178 = constant i32 490349927
@global_var_176c8.180 = constant i32 0
@global_var_177fc.182 = constant [5 x i8] c"abcd\00"
@global_var_1772c.184 = constant [4 x i8] c"14=\00"
@global_var_17730.186 = constant [5 x i8] c"\22??$\00"
@global_var_17738.188 = constant [5 x i8] c"1>;?\00"
@global_var_17740.190 = constant [7 x i8] c"(3ceaa\00"
@global_var_17748.192 = constant [6 x i8] c"$$>5$\00"
@global_var_17750.194 = constant [9 x i8] c"8%>$egei\00"
@global_var_1775c.196 = constant [6 x i8] c"&9*(&\00"
@global_var_17764.198 = constant [6 x i8] c"abcde\00"
@global_var_1776c.200 = constant [9 x i8] c"a``a389>\00"
@global_var_17778.202 = constant [8 x i8] c"4561%<$\00"
@global_var_17780.204 = constant [4 x i8] c"abc\00"
@global_var_17784.206 = constant [7 x i8] c"1>$#<!\00"
@global_var_1778c.208 = constant [4 x i8] c"e% \00"
@global_var_17790.210 = constant [9 x i8] c":%1>$538\00"
@global_var_1779c.212 = constant [6 x i8] c"*<((~\00"
@global_var_177a4.214 = constant [7 x i8] c"abcdef\00"
@global_var_177ac.216 = constant [11 x i8] c"?5<9>%(abc\00"
@global_var_177b8.218 = constant [7 x i8] c"\0A$5eba\00"
@global_var_177c0.220 = constant i32 490349927
@global_var_177d0.222 = constant [5 x i8] c"%#5\22\00"
@global_var_177d8.224 = constant [7 x i8] c"415=?>\00"
@global_var_177e0.226 = constant [4 x i8] c"29>\00"
@global_var_177e4.228 = constant [8 x i8] c"#%  ?\22$\00"
@global_var_177ec.230 = constant [11 x i8] c"#% 5\22&9#?\22\00"
@global_var_177f8.232 = constant [9 x i8] c"*)14abcd\00"
@global_var_203c0.233 = local_unnamed_addr global i32 0
@global_var_203be.234 = local_unnamed_addr global i32 0
@global_var_203c4.235 = local_unnamed_addr global i32 0
@global_var_203cc.237 = local_unnamed_addr global i32 0
@global_var_203d8.238 = local_unnamed_addr global i32 0
@global_var_f348.240 = constant i32 -382910352
@global_var_1780a.243 = constant i32 2096127
@global_var_17801.245 = constant i32 2095871
@global_var_22440.251 = global i32 0
@global_var_17810.258 = constant i32 39228
@global_var_22450.259 = local_unnamed_addr global i32 0
@global_var_22454.260 = local_unnamed_addr global i32 0
@global_var_17814.262 = constant i32 55430
@global_var_22460.263 = local_unnamed_addr global i32 0
@global_var_22464.264 = local_unnamed_addr global i32 0
@global_var_17818.266 = constant i32 1499028601
@global_var_22468.267 = local_unnamed_addr global i32 0
@global_var_2246c.268 = local_unnamed_addr global i32 0
@global_var_17838.270 = constant i32 1380928786
@global_var_22470.271 = local_unnamed_addr global i32 0
@global_var_22474.272 = local_unnamed_addr global i32 0
@global_var_17840.274 = constant i32 1480939538
@global_var_2247c.275 = local_unnamed_addr global i32 0
@global_var_22478.276 = local_unnamed_addr global i32 0
@global_var_17848.278 = constant i32 1029266194
@global_var_22480.279 = local_unnamed_addr global i32 0
@global_var_22484.280 = local_unnamed_addr global i32 0
@global_var_17850.282 = constant i32 1380928786
@global_var_2248c.283 = local_unnamed_addr global i32 0
@global_var_22488.284 = local_unnamed_addr global i32 0
@global_var_17860.286 = constant i32 1297895442
@global_var_22490.287 = local_unnamed_addr global i32 0
@global_var_22494.288 = local_unnamed_addr global i32 0
@global_var_17868.290 = constant i32 1548307986
@global_var_22498.291 = local_unnamed_addr global i32 0
@global_var_2249c.292 = local_unnamed_addr global i32 0
@global_var_17874.294 = constant i32 1414749203
@global_var_224a0.295 = local_unnamed_addr global i32 0
@global_var_224a4.296 = local_unnamed_addr global i32 0
@global_var_1787c.298 = constant i32 1380928786
@global_var_224a8.299 = local_unnamed_addr global i32 0
@global_var_224ac.300 = local_unnamed_addr global i32 0
@global_var_17890.302 = constant i32 1380928786
@global_var_224b4.303 = local_unnamed_addr global i32 0
@global_var_224b0.304 = local_unnamed_addr global i32 0
@global_var_178a0.306 = constant i32 1920627327
@global_var_224b8.307 = local_unnamed_addr global i32 0
@global_var_224bc.308 = local_unnamed_addr global i32 0
@global_var_178ac.310 = constant i32 1581864978
@global_var_224c0.311 = local_unnamed_addr global i32 0
@global_var_224c4.312 = local_unnamed_addr global i32 0
@global_var_178c0.314 = constant i32 1599867994
@global_var_224c8.315 = local_unnamed_addr global i32 0
@global_var_224cc.316 = local_unnamed_addr global i32 0
@global_var_178d8.318 = constant [9 x i8] c"\5CNNJROY=\00"
@global_var_224d0.319 = local_unnamed_addr global i32 0
@global_var_224d4.320 = local_unnamed_addr global i32 0
@global_var_178e4.322 = constant i32 1264081170
@global_var_224d8.323 = local_unnamed_addr global i32 0
@global_var_224dc.324 = local_unnamed_addr global i32 0
@global_var_178f4.326 = constant i32 1264081170
@global_var_224e0.327 = local_unnamed_addr global i32 0
@global_var_224e4.328 = local_unnamed_addr global i32 0
@global_var_17908.330 = constant i32 1264081170
@global_var_224e8.331 = local_unnamed_addr global i32 0
@global_var_224ec.332 = local_unnamed_addr global i32 0
@global_var_17920.334 = constant i32 1264081170
@global_var_224f4.335 = local_unnamed_addr global i32 0
@global_var_224f0.336 = local_unnamed_addr global i32 0
@global_var_1793c.338 = constant i32 1264081170
@global_var_224f8.339 = local_unnamed_addr global i32 0
@global_var_224fc.340 = local_unnamed_addr global i32 0
@global_var_1794c.342 = constant [7 x i8] c"NUXQQ=\00"
@global_var_22500.343 = local_unnamed_addr global i32 0
@global_var_22504.344 = local_unnamed_addr global i32 0
@global_var_17954.346 = constant [8 x i8] c"XS\5C_QX=\00"
@global_var_22508.347 = local_unnamed_addr global i32 0
@global_var_2250c.348 = local_unnamed_addr global i32 0
@global_var_1795c.350 = constant [8 x i8] c"NDNIXP=\00"
@global_var_22510.351 = local_unnamed_addr global i32 0
@global_var_22514.352 = local_unnamed_addr global i32 0
@global_var_17964.354 = constant [4 x i8] c"NU=\00"
@global_var_2251c.355 = local_unnamed_addr global i32 0
@global_var_22518.356 = local_unnamed_addr global i32 0
@global_var_17968.358 = constant i32 1398038290
@global_var_22520.359 = local_unnamed_addr global i32 0
@global_var_22524.360 = local_unnamed_addr global i32 0
@global_var_17980.362 = constant i32 1499028569
@global_var_22528.363 = local_unnamed_addr global i32 0
@global_var_2252c.364 = local_unnamed_addr global i32 0
@global_var_179a0.366 = constant [10 x i8] c"S^ROOX^I=\00"
@global_var_22530.367 = local_unnamed_addr global i32 0
@global_var_22534.368 = local_unnamed_addr global i32 0
@global_var_22538.369 = local_unnamed_addr global i32 0
@global_var_2253c.370 = local_unnamed_addr global i32 0
@global_var_179ac.372 = constant [6 x i8] c"RZTS=\00"
@global_var_22540.373 = local_unnamed_addr global i32 0
@global_var_179b4.375 = constant [7 x i8] c"XSIXO=\00"
@global_var_22548.376 = local_unnamed_addr global i32 0
@global_var_179bc.378 = constant i32 1398038290
@global_var_22550.379 = local_unnamed_addr global i32 0
@global_var_179d0.381 = constant i32 1398038290
@global_var_22558.382 = local_unnamed_addr global i32 0
@global_var_179e8.384 = constant i32 1213361769
@global_var_22560.385 = local_unnamed_addr global i32 0
@global_var_17a00.387 = constant i32 1581864978
@global_var_22568.388 = local_unnamed_addr global i32 0
@global_var_17a14.390 = constant [12 x i8] c"S\5CPXNXOKXO=\00"
@global_var_22570.391 = local_unnamed_addr global i32 0
@global_var_17a20.393 = constant i32 1397969534
@global_var_22578.394 = local_unnamed_addr global i32 0
@global_var_17d44.396 = constant i32 1482579580
@global_var_22580.397 = local_unnamed_addr global i32 0
@global_var_17d98.399 = constant i32 1482579580
@global_var_22588.400 = local_unnamed_addr global i32 0
@global_var_17a38.402 = constant i32 1230197374
@global_var_22590.403 = local_unnamed_addr global i32 0
@global_var_17a6c.405 = constant i32 2118735950
@global_var_22598.406 = local_unnamed_addr global i32 0
@global_var_17a7c.408 = constant i32 1331386447
@global_var_225a0.409 = local_unnamed_addr global i32 0
@global_var_17a88.411 = constant i32 1549685329
@global_var_225a8.412 = local_unnamed_addr global i32 0
@global_var_17a94.414 = constant i32 273242190
@global_var_225b0.415 = local_unnamed_addr global i32 0
@global_var_17aa4.417 = constant i32 1230197342
@global_var_225b8.418 = local_unnamed_addr global i32 0
@global_var_17ab8.420 = constant i32 1398558537
@global_var_225c0.421 = local_unnamed_addr global i32 0
@global_var_17acc.423 = constant [9 x i8] c"^UHSVXY=\00"
@global_var_225c8.424 = local_unnamed_addr global i32 0
@global_var_17a2c.426 = constant i32 1297635414
@global_var_225d0.427 = local_unnamed_addr global i32 0
@global_var_17ad8.429 = constant i32 1397969502
@global_var_225d8.430 = local_unnamed_addr global i32 0
@global_var_17ae8.432 = constant i32 1263491150
@global_var_225e0.433 = local_unnamed_addr global i32 0
@global_var_17afc.435 = constant i32 1263491150
@global_var_225e8.436 = local_unnamed_addr global i32 0
@global_var_17b18.438 = constant i32 1413960304
@global_var_225f0.439 = local_unnamed_addr global i32 0
@global_var_17b8c.441 = constant i32 1413960304
@global_var_225f8.442 = local_unnamed_addr global i32 0
@global_var_17c00.444 = constant i32 1413960304
@global_var_22600.445 = local_unnamed_addr global i32 0
@global_var_17c50.447 = constant i32 1413960304
@global_var_22608.448 = local_unnamed_addr global i32 0
@global_var_17cc4.450 = constant i32 1413960304
@global_var_22610.451 = local_unnamed_addr global i32 0
@global_var_22618.452 = local_unnamed_addr global i32 0
@global_var_22620.453 = local_unnamed_addr global i32 0
@global_var_22628.454 = local_unnamed_addr global i32 0
@global_var_17d38.456 = constant [11 x i8] c"YKOuXQMXO=\00"
@global_var_22630.457 = local_unnamed_addr global i32 0
@global_var_12594.463 = constant i32 -443088884
@global_var_20404.480 = global i32 0
@global_var_129cc.482 = constant i32 -456978431
@global_var_22638.495 = global i32 0
@global_var_12f88.501 = constant i32 -478871519
@global_var_c7b4.511 = constant i32 167772253
@global_var_13a08.516 = constant i32 -478805983
@global_var_13de4.525 = constant i32 -382906384
@global_var_203e8.533 = local_unnamed_addr global i32 0
@global_var_15670.535 = constant i32 -509591552
@global_var_203ec.542 = local_unnamed_addr global i32 0
@global_var_160a4.545 = constant i32 -382909968
@global_var_14448.546 = constant i32 -494075872
@global_var_12498.547 = constant i32 -382910336
@global_var_17dd4.551 = constant [11 x i8] c"/proc/stat\00"
@global_var_17de0.556 = constant [14 x i8] c"/proc/cpuinfo\00"
@global_var_17df0.558 = constant [10 x i8] c"processor\00"
@global_var_17e14.560 = constant i32 604672
@global_var_14608.563 = constant i32 -369098421
@global_var_203fc.576 = local_unnamed_addr global i32 0
@global_var_20400.578 = local_unnamed_addr global i32 0
@global_var_17e18.581 = constant [10 x i8] c"/dev/null\00"
@global_var_14214.582 = constant i32 -442543860
@global_var_16008.587 = constant i32 -382910352
@global_var_12a00.592 = constant i32 -369094746
@global_var_14fd4.605 = constant i32 -335545128
@global_var_1549c.611 = constant i32 -382909456
@global_var_22414.614 = local_unnamed_addr global i32 0
@global_var_aa9c.616 = constant i32 -443744160
@global_var_a658.622 = constant [3 x i8] c"{$\00"
@global_var_17df8.624 = constant i32 114
@global_var_164c8.629 = constant i32 -382906384
@global_var_15fa8.647 = constant i32 -509607926
@global_var_18124.652 = constant i32 0
@global_var_17458.653 = constant i32 -382909968
@global_var_162ec.663 = constant i32 -509607928
@global_var_2036c.2 = external global i8*
@global_var_20388.18 = external global i8*
@global_var_20389.24 = global i8 0
@global_var_22420.99 = global i16* null
@1 = internal constant [4 x i8] c"\CC\01\02\00"
@global_var_2039c.118 = external global i8*
@global_var_203e0.149 = global i16* null
@global_var_203b4.158 = external global i8*
@global_var_203d4.162 = local_unnamed_addr global i8 0
@global_var_203ca.166 = local_unnamed_addr global i16 0
@global_var_203d5.167 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_8098)
  %v31_80a0 = load i32, i32* @r0, align 4
  ret i32 %v31_80a0
}

define i32 @function_80b0(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r2, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_2036c.2 to i32), i32* %r4.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_2036c.2 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %dec_label_pc_80c4, label %dec_label_pc_80e0

dec_label_pc_80c4:                                ; preds = %entry
  store i1 true, i1* @cpsr_z, align 1
  %v3_80d4 = call i32 @function_80ec()
  %v2_80dc = load i32, i32* %r4.global-to-local, align 4
  %v3_80dc = inttoptr i32 %v2_80dc to i8*
  store i8 1, i8* %v3_80dc, align 1
  %v2_80e0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_80e0

dec_label_pc_80e0:                                ; preds = %entry, %dec_label_pc_80c4
  %v2_80e0 = phi i32 [ %v2_80e0.pre, %dec_label_pc_80c4 ], [ %v3_80b0, %entry ]
  %.0 = phi i32 [ %v3_80d4, %dec_label_pc_80c4 ], [ undef, %entry ]
  store i32 %v2_80e0, i32* %r4.global-to-local, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i8** @global_var_2036c.2, { 1, 0 }
  uselistorder label %dec_label_pc_80e0, { 1, 0 }
}

define i32 @function_80ec() local_unnamed_addr {
dec_label_pc_80ec:
  %v0_80f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_80f0, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_80ec
  br label %bb3

bb3:                                              ; preds = %bb, %dec_label_pc_80ec
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8118 = load i32, i32* inttoptr (i32 131400 to i32*), align 8
  %v2_811c = icmp eq i32 %v2_8118, 0
  br i1 %v2_811c, label %dec_label_pc_8134, label %dec_label_pc_8124

dec_label_pc_8124:                                ; preds = %bb3
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8134

dec_label_pc_8134:                                ; preds = %bb3, %dec_label_pc_8124
  ret i32 131400

; uselistorder directives
  uselistorder label %dec_label_pc_8134, { 1, 0 }
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_815c = ptrtoint i32* %stack_var_4 to i32
  %v8_817c = call i32 @function_14d44(i32 ptrtoint (i32* @global_var_e9c0.14 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 95836, i32 %arg1, i32 %v4_815c)
  %v0_8180 = call i32 @function_14214()
  ret i32 %v0_8180
}

define i32 @function_8190(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8190:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_8190 = icmp eq i32 %arg1, 0
  br i1 %v2_8190, label %dec_label_pc_81d8, label %dec_label_pc_81a0

dec_label_pc_81a0:                                ; preds = %dec_label_pc_8190
  %v0_81a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_81a0 = add i32 %v0_81a0, 4
  %v2_81a0 = inttoptr i32 %v1_81a0 to i8*
  %v3_81a0 = load i8, i8* %v2_81a0, align 1
  %v4_81a0 = zext i8 %v3_81a0 to i32
  %v9_81a4 = icmp eq i32 %v4_81a0, %arg3
  br i1 %v9_81a4, label %dec_label_pc_81e4, label %dec_label_pc_81c8.preheader

dec_label_pc_81c8.preheader:                      ; preds = %dec_label_pc_81a0
  br label %dec_label_pc_81c8

dec_label_pc_81b8:                                ; preds = %dec_label_pc_81c8
  %v1_81b8 = add i32 %v0_81c0.in, 12
  %v2_81b8 = inttoptr i32 %v1_81b8 to i8*
  %v3_81b8 = load i8, i8* %v2_81b8, align 1
  %v4_81b8 = zext i8 %v3_81b8 to i32
  %v9_81bc = icmp eq i32 %v4_81b8, %arg3
  br i1 %v9_81bc, label %dec_label_pc_81e4, label %dec_label_pc_81c8

dec_label_pc_81c8:                                ; preds = %dec_label_pc_81c8.preheader, %dec_label_pc_81b8
  %v0_81c0.in = phi i32 [ %v0_81a0, %dec_label_pc_81c8.preheader ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v0_81c8 = phi i32 [ 0, %dec_label_pc_81c8.preheader ], [ %v1_81c8, %dec_label_pc_81b8 ]
  %v0_81c0 = add i32 %v0_81c0.in, 8
  %v1_81c8 = add i32 %v0_81c8, 1
  %v9_81cc = icmp eq i32 %v1_81c8, %arg1
  store i32 %v0_81c0, i32* %r1.global-to-local, align 4
  br i1 %v9_81cc, label %dec_label_pc_81d8, label %dec_label_pc_81b8

dec_label_pc_81d8:                                ; preds = %dec_label_pc_81c8, %dec_label_pc_8190, %dec_label_pc_81e4
  %v0_81d8 = phi i32 [ %arg4, %dec_label_pc_8190 ], [ %v2_81e4, %dec_label_pc_81e4 ], [ %arg4, %dec_label_pc_81c8 ]
  ret i32 %v0_81d8

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81b8, %dec_label_pc_81a0
  %v0_81e4 = phi i32 [ %v0_81a0, %dec_label_pc_81a0 ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v1_81e4 = inttoptr i32 %v0_81e4 to i32*
  %v2_81e4 = load i32, i32* %v1_81e4, align 4
  br label %dec_label_pc_81d8

; uselistorder directives
  uselistorder i32 %v1_81c8, { 1, 0 }
  uselistorder i32 %v0_81c0, { 1, 0, 2 }
  uselistorder i32 %v0_81c0.in, { 1, 0 }
  uselistorder i32 %v0_81a0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_81d8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_81c8, { 1, 0 }
}

define i32 @function_81ec(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_81ec:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_81ec = icmp eq i32 %arg1, 0
  %v6_81f0 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_81ec, label %dec_label_pc_8234, label %dec_label_pc_81fc

dec_label_pc_81fc:                                ; preds = %dec_label_pc_81ec
  %v0_81fc = load i32, i32* %r1.global-to-local, align 4
  %v1_81fc = add i32 %v0_81fc, 4
  %v2_81fc = inttoptr i32 %v1_81fc to i8*
  %v3_81fc = load i8, i8* %v2_81fc, align 1
  %v4_81fc = zext i8 %v3_81fc to i32
  %v9_8200 = icmp eq i32 %v4_81fc, %arg3
  br i1 %v9_8200, label %dec_label_pc_8240, label %dec_label_pc_8224.preheader

dec_label_pc_8224.preheader:                      ; preds = %dec_label_pc_81fc
  br label %dec_label_pc_8224

dec_label_pc_8214:                                ; preds = %dec_label_pc_8224
  %v1_8214 = add i32 %v0_821c.in, 12
  %v2_8214 = inttoptr i32 %v1_8214 to i8*
  %v3_8214 = load i8, i8* %v2_8214, align 1
  %v4_8214 = zext i8 %v3_8214 to i32
  %v9_8218 = icmp eq i32 %v4_8214, %arg3
  br i1 %v9_8218, label %dec_label_pc_8240, label %dec_label_pc_8224

dec_label_pc_8224:                                ; preds = %dec_label_pc_8224.preheader, %dec_label_pc_8214
  %v0_821c.in = phi i32 [ %v0_81fc, %dec_label_pc_8224.preheader ], [ %v0_821c, %dec_label_pc_8214 ]
  %v0_8224 = phi i32 [ 0, %dec_label_pc_8224.preheader ], [ %v1_8224, %dec_label_pc_8214 ]
  %v0_821c = add i32 %v0_821c.in, 8
  %v1_8224 = add i32 %v0_8224, 1
  %v9_8228 = icmp eq i32 %v1_8224, %arg1
  store i32 %v0_821c, i32* %r1.global-to-local, align 4
  br i1 %v9_8228, label %dec_label_pc_8234, label %dec_label_pc_8214

dec_label_pc_8234:                                ; preds = %dec_label_pc_8224, %dec_label_pc_8240, %dec_label_pc_81ec, %dec_label_pc_824c
  %v0_8234 = phi i32 [ %arg4, %dec_label_pc_8240 ], [ %arg4, %dec_label_pc_81ec ], [ %v1_824c, %dec_label_pc_824c ], [ %arg4, %dec_label_pc_8224 ]
  store i32 %v6_81f0, i32* @lr, align 4
  ret i32 %v0_8234

dec_label_pc_8240:                                ; preds = %dec_label_pc_8214, %dec_label_pc_81fc
  %v0_8240 = phi i32 [ %v0_81fc, %dec_label_pc_81fc ], [ %v0_821c, %dec_label_pc_8214 ]
  %v1_8240 = inttoptr i32 %v0_8240 to i32*
  %v2_8240 = load i32, i32* %v1_8240, align 4
  store i32 %v2_8240, i32* @r0, align 4
  %v2_8244 = icmp eq i32 %v2_8240, 0
  br i1 %v2_8244, label %dec_label_pc_8234, label %dec_label_pc_824c

dec_label_pc_824c:                                ; preds = %dec_label_pc_8240
  %v1_824c = call i32 @function_12a34(i32 %v2_8240)
  br label %dec_label_pc_8234

; uselistorder directives
  uselistorder i32 %v1_8224, { 1, 0 }
  uselistorder i32 %v0_821c, { 1, 0, 2 }
  uselistorder i32 %v0_821c.in, { 1, 0 }
  uselistorder i32 %v0_81fc, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8234, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_8224, { 1, 0 }
}

define i32 @function_8258(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8258:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8258 = icmp eq i32 %arg1, 0
  %v3_825c = load i32, i32* @r4, align 4
  store i32 %v3_825c, i32* %stack_var_-8, align 4
  %v6_825c = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8258, label %dec_label_pc_82a0, label %dec_label_pc_8268

dec_label_pc_8268:                                ; preds = %dec_label_pc_8258
  %v0_8268 = load i32, i32* %r1.global-to-local, align 4
  %v1_8268 = add i32 %v0_8268, 4
  %v2_8268 = inttoptr i32 %v1_8268 to i8*
  %v3_8268 = load i8, i8* %v2_8268, align 1
  %v4_8268 = zext i8 %v3_8268 to i32
  %v9_826c = icmp eq i32 %v4_8268, %arg3
  br i1 %v9_826c, label %dec_label_pc_82ac, label %dec_label_pc_8290.preheader

dec_label_pc_8290.preheader:                      ; preds = %dec_label_pc_8268
  br label %dec_label_pc_8290

dec_label_pc_8280:                                ; preds = %dec_label_pc_8290
  %v1_8280 = add i32 %v0_8288.in, 12
  %v2_8280 = inttoptr i32 %v1_8280 to i8*
  %v3_8280 = load i8, i8* %v2_8280, align 1
  %v4_8280 = zext i8 %v3_8280 to i32
  %v9_8284 = icmp eq i32 %v4_8280, %arg3
  br i1 %v9_8284, label %dec_label_pc_82ac, label %dec_label_pc_8290

dec_label_pc_8290:                                ; preds = %dec_label_pc_8290.preheader, %dec_label_pc_8280
  %v0_8288.in = phi i32 [ %v0_8268, %dec_label_pc_8290.preheader ], [ %v0_8288, %dec_label_pc_8280 ]
  %v0_8290 = phi i32 [ 0, %dec_label_pc_8290.preheader ], [ %v1_8290, %dec_label_pc_8280 ]
  %v0_8288 = add i32 %v0_8288.in, 8
  %v1_8290 = add i32 %v0_8290, 1
  store i32 %v1_8290, i32* @lr, align 4
  %v9_8294 = icmp eq i32 %v1_8290, %arg1
  store i32 %v0_8288, i32* %r1.global-to-local, align 4
  br i1 %v9_8294, label %dec_label_pc_82a0, label %dec_label_pc_8280

dec_label_pc_82a0:                                ; preds = %dec_label_pc_8290, %dec_label_pc_82ac, %dec_label_pc_8258, %dec_label_pc_82b8
  %v2_82a4 = phi i32 [ %v3_825c, %dec_label_pc_82ac ], [ %v3_825c, %dec_label_pc_8258 ], [ %v2_82a4.pre, %dec_label_pc_82b8 ], [ %v3_825c, %dec_label_pc_8290 ]
  %v0_82a0 = phi i32 [ %arg4, %dec_label_pc_82ac ], [ %arg4, %dec_label_pc_8258 ], [ %v3_82bc, %dec_label_pc_82b8 ], [ %arg4, %dec_label_pc_8290 ]
  store i32 %v2_82a4, i32* @r4, align 4
  store i32 %v6_825c, i32* @lr, align 4
  ret i32 %v0_82a0

dec_label_pc_82ac:                                ; preds = %dec_label_pc_8280, %dec_label_pc_8268
  %v0_82ac = phi i32 [ %v0_8268, %dec_label_pc_8268 ], [ %v0_8288, %dec_label_pc_8280 ]
  %v1_82ac = inttoptr i32 %v0_82ac to i32*
  %v2_82ac = load i32, i32* %v1_82ac, align 4
  %v2_82b0 = icmp eq i32 %v2_82ac, 0
  br i1 %v2_82b0, label %dec_label_pc_82a0, label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %dec_label_pc_82ac
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_82bc = inttoptr i32 %v2_82ac to i8*
  %v3_82bc = call i32 @function_11990(i8* %v2_82bc, i32 10)
  %v2_82a4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_82a0

; uselistorder directives
  uselistorder i32 %v1_8290, { 1, 2, 0 }
  uselistorder i32 %v0_8288, { 1, 0, 2 }
  uselistorder i32 %v0_8288.in, { 1, 0 }
  uselistorder i32 %v0_8268, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_82a0, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_8290, { 1, 0 }
}

define i32 @function_82c8(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_82c8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_82c8 = load i32, i32* @r5, align 4
  %v9_82c8 = load i32, i32* @r6, align 4
  %v12_82c8 = load i32, i32* @r7, align 4
  %v18_82c8 = load i32, i32* @sb, align 4
  %v24_82c8 = load i32, i32* @fp, align 4
  %v2_82cc = icmp ugt i32 %arg2, 2
  %v7_82cc = icmp eq i32 %arg2, 3
  store i1 %v7_82cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_82d8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_82d8, i32* @r5, align 4
  %v2_82dc = xor i1 %v7_82cc, true
  %v3_82dc = and i1 %v2_82cc, %v2_82dc
  br i1 %v3_82dc, label %dec_label_pc_82ec, label %dec_label_pc_82e0

dec_label_pc_82e0:                                ; preds = %dec_label_pc_8330, %.dec_label_pc_82e0_crit_edge, %dec_label_pc_8324, %dec_label_pc_8314, %dec_label_pc_82ec, %dec_label_pc_82c8, %dec_label_pc_84d8
  %v1_82e8 = phi i32 [ %v1_82e8.pre, %.dec_label_pc_82e0_crit_edge ], [ %v1_82f0, %dec_label_pc_8330 ], [ %v1_82f0, %dec_label_pc_8324 ], [ %v1_82f0, %dec_label_pc_8314 ], [ %v1_82f0, %dec_label_pc_82ec ], [ %v0_82d8, %dec_label_pc_82c8 ], [ %v0_84dc, %dec_label_pc_84d8 ]
  store i32 %v6_82c8, i32* @r5, align 4
  store i32 %v9_82c8, i32* @r6, align 4
  store i32 %v12_82c8, i32* @r7, align 4
  store i32 %v18_82c8, i32* @sb, align 4
  store i32 %v24_82c8, i32* @fp, align 4
  ret i32 %v1_82e8

dec_label_pc_82ec:                                ; preds = %dec_label_pc_82c8
  %v1_82ec = inttoptr i32 %v0_82d8 to i32*
  %v2_82ec = load i32, i32* %v1_82ec, align 4
  %v1_82f0 = and i32 %v2_82ec, 16711680
  store i32 %v1_82f0, i32* %r0.global-to-local, align 4
  %v3_82f4 = udiv i32 %v2_82ec, 16777216
  %v1_82f8 = and i32 %v2_82ec, 65280
  store i32 %v1_82f8, i32* %r2.global-to-local, align 4
  %v4_82fc = udiv i32 %v1_82f0, 256
  %v5_82fc = or i32 %v4_82fc, %v3_82f4
  %v4_8300 = mul nuw nsw i32 %v1_82f8, 256
  %v5_8300 = or i32 %v5_82fc, %v4_8300
  store i32 %v5_8300, i32* %r3.global-to-local, align 4
  %v5_8304 = call i32 @llvm.bswap.i32(i32 %v2_82ec)
  store i32 %v5_8304, i32* %r1.global-to-local, align 4
  %v7_8308 = icmp eq i32 %arg2, 4
  store i1 %v7_8308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8308, label %dec_label_pc_82e0, label %dec_label_pc_8314

dec_label_pc_8314:                                ; preds = %dec_label_pc_82ec
  %v1_8314 = add i32 %v0_82d8, 4
  %v2_8314 = inttoptr i32 %v1_8314 to i8*
  %v3_8314 = load i8, i8* %v2_8314, align 1
  %v4_8314 = zext i8 %v3_8314 to i32
  store i32 %v4_8314, i32* %r3.global-to-local, align 4
  %v7_8318 = icmp eq i32 %arg2, 5
  store i1 %v7_8318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8318, label %dec_label_pc_82e0, label %dec_label_pc_8324

dec_label_pc_8324:                                ; preds = %dec_label_pc_8314
  %v1_8324 = add i32 %v0_82d8, 5
  %v2_8324 = inttoptr i32 %v1_8324 to i8*
  %v3_8324 = load i8, i8* %v2_8324, align 1
  %v4_8324 = zext i8 %v3_8324 to i32
  store i32 %v4_8324, i32* @sb, align 4
  %v2_8328 = icmp eq i8 %v3_8324, 0
  store i1 %v2_8328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8328, label %dec_label_pc_82e0, label %dec_label_pc_8330

dec_label_pc_8330:                                ; preds = %dec_label_pc_8324
  %v2_8334 = mul nuw nsw i32 %v4_8324, 5
  store i32 %v2_8334, i32* @r7, align 4
  %v1_8338 = add i32 %arg2, -6
  store i32 %v1_8338, i32* %r3.global-to-local, align 4
  %v3_833c = icmp ult i32 %v1_8338, %v2_8334
  %v9_833c = icmp eq i32 %v1_8338, %v2_8334
  store i1 %v9_833c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_833c, label %dec_label_pc_82e0, label %dec_label_pc_8344

dec_label_pc_8344:                                ; preds = %dec_label_pc_8330
  store i32 %v4_8324, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_8338, i32* @r6, align 4
  %v2_8350 = call i32 @function_1384c(i32 %v4_8324, i32 24)
  store i32 %v2_8350, i32* @ip, align 4
  %v0_835c = load i32, i32* @r7, align 4
  %v1_835c = load i32, i32* @r4, align 4
  %v2_835c = sub i32 %v1_835c, %v0_835c
  store i32 %v2_835c, i32* @r7, align 4
  %v0_8360 = load i32, i32* @r5, align 4
  %v1_8360 = add i32 %v0_8360, 11
  store i32 %v1_8360, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8364

dec_label_pc_8364:                                ; preds = %dec_label_pc_8364, %dec_label_pc_8344
  %v1_8368 = phi i32 [ %v1_8394, %dec_label_pc_8364 ], [ %v2_8350, %dec_label_pc_8344 ]
  %v0_8364 = phi i32 [ %v1_8390, %dec_label_pc_8364 ], [ %v1_8360, %dec_label_pc_8344 ]
  %v1_8364 = add i32 %v0_8364, -5
  %v2_8364 = inttoptr i32 %v1_8364 to i32*
  %v3_8364 = load i32, i32* %v2_8364, align 4
  store i32 %v3_8364, i32* %r1.global-to-local, align 4
  %v2_8368 = add i32 %v1_8368, 16
  %v3_8368 = inttoptr i32 %v2_8368 to i32*
  store i32 %v3_8364, i32* %v3_8368, align 4
  %v0_836c = load i32, i32* @r6, align 4
  %v1_836c = add i32 %v0_836c, -5
  store i32 %v1_836c, i32* @r6, align 4
  %v0_8370 = load i32, i32* %r0.global-to-local, align 4
  %v1_8370 = add i32 %v0_8370, -1
  %v2_8370 = inttoptr i32 %v1_8370 to i8*
  %v3_8370 = load i8, i8* %v2_8370, align 1
  %v4_8370 = zext i8 %v3_8370 to i32
  store i32 %v4_8370, i32* %r2.global-to-local, align 4
  %v0_8374 = load i32, i32* @r7, align 4
  %v1_8374 = add i32 %v0_8374, -6
  store i32 %v1_8374, i32* %r3.global-to-local, align 4
  store i32 2, i32* @lr, align 4
  %v9_837c = icmp eq i32 %v1_836c, %v1_8374
  store i1 %v9_837c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_8370, i32* @r4, align 4
  %v2_8384 = load i32, i32* @ip, align 4
  %v3_8384 = add i32 %v2_8384, 20
  %v4_8384 = inttoptr i32 %v3_8384 to i8*
  store i8 %v3_8370, i8* %v4_8384, align 1
  %v0_8388 = load i32, i32* %r1.global-to-local, align 4
  %v1_8388 = load i32, i32* @ip, align 4
  %v2_8388 = add i32 %v1_8388, 4
  %v3_8388 = inttoptr i32 %v2_8388 to i32*
  store i32 %v0_8388, i32* %v3_8388, align 4
  %v0_838c = load i32, i32* @lr, align 4
  %v1_838c = trunc i32 %v0_838c to i16
  %v2_838c = load i32, i32* @ip, align 4
  %v3_838c = inttoptr i32 %v2_838c to i16*
  store i16 %v1_838c, i16* %v3_838c, align 2
  %v0_8390 = load i32, i32* %r0.global-to-local, align 4
  %v1_8390 = add i32 %v0_8390, 5
  store i32 %v1_8390, i32* %r0.global-to-local, align 4
  %v0_8394 = load i32, i32* @ip, align 4
  %v1_8394 = add i32 %v0_8394, 24
  store i32 %v1_8394, i32* @ip, align 4
  %v0_8398 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8398, label %dec_label_pc_839c, label %dec_label_pc_8364

dec_label_pc_839c:                                ; preds = %dec_label_pc_8364
  %v0_839c = load i32, i32* @r6, align 4
  %v2_839c = icmp eq i32 %v0_839c, 0
  store i1 %v2_839c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_839c, label %dec_label_pc_849c, label %dec_label_pc_83a4

dec_label_pc_83a4:                                ; preds = %dec_label_pc_839c
  %v0_83a4 = load i32, i32* @r4, align 4
  %v1_83a4 = inttoptr i32 %v0_83a4 to i8*
  %v2_83a4 = load i8, i8* %v1_83a4, align 1
  %v3_83a4 = zext i8 %v2_83a4 to i32
  store i32 %v3_83a4, i32* @r5, align 4
  %v2_83a8 = icmp eq i8 %v2_83a4, 0
  store i1 %v2_83a8, i1* %cpsr_z.global-to-local, align 1
  %v0_83ac = load i32, i32* @r7, align 4
  %v1_83ac = add i32 %v0_83ac, -7
  store i32 %v1_83ac, i32* @r8, align 4
  br i1 %v2_83a8, label %bb, label %dec_label_pc_83b8

bb:                                               ; preds = %dec_label_pc_83a4
  store i32 %v3_83a4, i32* @r6, align 4
  br label %dec_label_pc_846c

dec_label_pc_83b8:                                ; preds = %dec_label_pc_83a4
  store i32 %v3_83a4, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_83c0 = call i32 @function_1384c(i32 %v3_83a4, i32 8)
  store i32 %v2_83c0, i32* %r0.global-to-local, align 4
  %v0_83c4 = load i32, i32* @r8, align 4
  %v2_83c4 = icmp eq i32 %v0_83c4, 0
  store i1 %v2_83c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83c0, i32* @r6, align 4
  br i1 %v2_83c4, label %dec_label_pc_849c, label %dec_label_pc_83d0

dec_label_pc_83d0:                                ; preds = %dec_label_pc_83b8
  %v0_83d0 = load i32, i32* @r4, align 4
  %v1_83d0 = add i32 %v0_83d0, 1
  %v2_83d0 = inttoptr i32 %v1_83d0 to i8*
  %v3_83d0 = load i8, i8* %v2_83d0, align 1
  %v0_83d4 = load i32, i32* @r7, align 4
  %v7_83d4 = icmp eq i32 %v0_83d4, 8
  store i1 %v7_83d4, i1* %cpsr_z.global-to-local, align 1
  %v3_83d8 = add i32 %v2_83c0, 4
  %v4_83d8 = inttoptr i32 %v3_83d8 to i8*
  store i8 %v3_83d0, i8* %v4_83d8, align 1
  %v0_83dc = load i32, i32* @r4, align 4
  %v1_83dc = add i32 %v0_83dc, 1
  store i32 %v1_83dc, i32* %r3.global-to-local, align 4
  %v0_83e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83e0, label %dec_label_pc_849c, label %dec_label_pc_83e4

dec_label_pc_83e4:                                ; preds = %dec_label_pc_83d0
  %v1_83e4 = add i32 %v0_83dc, 2
  %v2_83e4 = inttoptr i32 %v1_83e4 to i8*
  %v3_83e4 = load i8, i8* %v2_83e4, align 1
  %v4_83e4 = zext i8 %v3_83e4 to i32
  store i32 %v4_83e4, i32* @r4, align 4
  %v0_83e8 = load i32, i32* @r7, align 4
  %v1_83e8 = add i32 %v0_83e8, -9
  store i32 %v1_83e8, i32* @r7, align 4
  %v9_83ec = icmp eq i32 %v1_83e8, %v4_83e4
  store i1 %v9_83ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_83e4, i32* %r1.global-to-local, align 4
  %v5_83f4 = icmp slt i32 %v1_83e8, %v4_83e4
  br i1 %v5_83f4, label %dec_label_pc_849c, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_83e4
  %v7_83f44711 = add i32 %v0_83dc, 3
  store i32 %v7_83f44711, i32* @r8, align 4
  %v6_83f8812 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_83f8812, i32* @sl, align 4
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_8444

dec_label_pc_8408:                                ; preds = %dec_label_pc_8444
  %v0_8408 = load i32, i32* @r7, align 4
  %v1_8408 = load i32, i32* @r4, align 4
  %v2_8408 = sub i32 %v0_8408, %v1_8408
  store i32 %v2_8408, i32* %r1.global-to-local, align 4
  %v9_8408 = icmp eq i32 %v0_8408, %v1_8408
  store i1 %v9_8408, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8408, label %dec_label_pc_849c, label %dec_label_pc_8410

dec_label_pc_8410:                                ; preds = %dec_label_pc_8408
  %v3_8410 = mul i32 %v0_8464, 8
  store i32 %v3_8410, i32* %r3.global-to-local, align 4
  %v1_8414 = load i32, i32* @r8, align 4
  %v2_8414 = add i32 %v1_8414, %v1_8408
  %v3_8414 = inttoptr i32 %v2_8414 to i8*
  %v4_8414 = load i8, i8* %v3_8414, align 1
  %v6_8414 = zext i8 %v4_8414 to i32
  store i32 %v6_8414, i32* %r2.global-to-local, align 4
  %v0_8418 = load i32, i32* @r6, align 4
  %v2_8418 = add i32 %v0_8418, %v3_8410
  store i32 %v2_8418, i32* @sl, align 4
  %v1_841c = add i32 %v2_8408, -1
  store i32 %v1_841c, i32* %r3.global-to-local, align 4
  %v7_841c = icmp eq i32 %v2_8408, 1
  store i1 %v7_841c, i1* %cpsr_z.global-to-local, align 1
  %v3_8420 = add i32 %v2_8418, 4
  %v4_8420 = inttoptr i32 %v3_8420 to i8*
  store i8 %v4_8414, i8* %v4_8420, align 1
  %v0_8424 = load i32, i32* @r4, align 4
  %v1_8424 = load i32, i32* @r8, align 4
  %v2_8424 = add i32 %v1_8424, %v0_8424
  store i32 %v2_8424, i32* %r1.global-to-local, align 4
  %v0_8428 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8428, label %dec_label_pc_849c, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8410
  %v1_842c = add i32 %v2_8424, 1
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v4_842c = zext i8 %v3_842c to i32
  store i32 %v4_842c, i32* @r4, align 4
  %v0_8430 = load i32, i32* %r3.global-to-local, align 4
  %v1_8430 = add i32 %v0_8430, -1
  store i32 %v1_8430, i32* @r7, align 4
  %v2_8434 = sub i32 %v1_8430, %v4_842c
  %tmp47 = sub i32 0, %v2_8434
  %v6_8434 = and i32 %v1_8430, %tmp47
  %v7_8434 = icmp slt i32 %v6_8434, 0
  %v8_8434 = icmp slt i32 %v2_8434, 0
  %v9_8434 = icmp eq i32 %v1_8430, %v4_842c
  store i1 %v9_8434, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_842c, i32* %r1.global-to-local, align 4
  %v2_843c = xor i1 %v8_8434, %v7_8434
  br i1 %v2_843c, label %dec_label_pc_849c, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  %v1_8440 = add i32 %v2_8424, 2
  store i32 %v1_8440, i32* @r8, align 4
  br label %dec_label_pc_8444

dec_label_pc_8444:                                ; preds = %.thread10, %dec_label_pc_8440
  %v0_8448 = phi i32 [ %v4_83e4, %.thread10 ], [ %v4_842c, %dec_label_pc_8440 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_8448 = add nuw nsw i32 %v0_8448, 1
  store i32 %v2_8448, i32* %r0.global-to-local, align 4
  %v2_844c = call i32 @function_1384c(i32 %v2_8448, i32 1)
  store i32 %v2_844c, i32* %r0.global-to-local, align 4
  %v0_8450 = load i32, i32* @fp, align 4
  %v1_8450 = add i32 %v0_8450, 1
  store i32 %v1_8450, i32* @fp, align 4
  %v1_8454 = load i32, i32* @sl, align 4
  %v2_8454 = inttoptr i32 %v1_8454 to i32*
  store i32 %v2_844c, i32* %v2_8454, align 4
  %v0_8458 = load i32, i32* @r8, align 4
  store i32 %v0_8458, i32* %r1.global-to-local, align 4
  %v0_845c = load i32, i32* @r4, align 4
  store i32 %v0_845c, i32* %r2.global-to-local, align 4
  %v3_8460 = call i32 @function_118dc(i32 %v2_844c, i32 %v0_8458, i32 %v0_845c)
  store i32 %v3_8460, i32* %r0.global-to-local, align 4
  %v0_8464 = load i32, i32* @fp, align 4
  %v1_8464 = load i32, i32* @r5, align 4
  %v9_8464 = icmp eq i32 %v0_8464, %v1_8464
  store i1 %v9_8464, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8464, label %dec_label_pc_846c, label %dec_label_pc_8408

dec_label_pc_846c:                                ; preds = %dec_label_pc_8444, %bb
  %v0_846c = call i32 @function_128f8()
  store i32 %v0_846c, i32* @r0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_8474 = inttoptr i32 %v0_846c to i32*
  store i32 0, i32* %v2_8474, align 4
  %v0_8478 = call i32 @function_121c0()
  store i32 %v0_8478, i32* %r0.global-to-local, align 4
  %v7_847c = icmp eq i32 %v0_8478, -1
  %. = zext i1 %v7_847c to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %v2_8488 = icmp eq i32 %v0_8478, 0
  store i1 %v2_8488, i1* %cpsr_z.global-to-local, align 1
  %tmp50 = icmp slt i32 %v0_8478, 1
  br i1 %tmp50, label %bb51, label %.thread14

.thread14:                                        ; preds = %dec_label_pc_846c
  store i32 1, i32* %r2.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_849c

bb51:                                             ; preds = %dec_label_pc_846c
  store i32 %., i32* %r2.global-to-local, align 4
  %v2_8494 = icmp eq i1 %v7_847c, false
  store i1 %v2_8494, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8494, label %dec_label_pc_84e4, label %dec_label_pc_849c

dec_label_pc_849c:                                ; preds = %dec_label_pc_842c, %dec_label_pc_8410, %dec_label_pc_8408, %dec_label_pc_83e4, %.thread14, %bb51, %dec_label_pc_83d0, %dec_label_pc_83b8, %dec_label_pc_839c
  store i32 %v2_8350, i32* %r3.global-to-local, align 4
  %v2_84a0 = icmp eq i32 %v2_8350, 0
  store i1 %v2_84a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84a0, label %bb53, label %bb52

bb52:                                             ; preds = %dec_label_pc_849c
  store i32 %v2_8350, i32* %r0.global-to-local, align 4
  br label %bb53

bb53:                                             ; preds = %dec_label_pc_849c, %bb52
  store i32 33964, i32* @lr, align 4
  %v1_84a8 = xor i1 %v2_84a0, true
  call void @__pseudo_cond_branch(i1 %v1_84a8, i32 ptrtoint (i32* @global_var_13f98.16 to i32))
  %v0_84ac = load i32, i32* @r6, align 4
  %v2_84ac = icmp eq i32 %v0_84ac, 0
  store i1 %v2_84ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84ac, label %.dec_label_pc_82e0_crit_edge, label %dec_label_pc_84b4

.dec_label_pc_82e0_crit_edge:                     ; preds = %bb53
  %v1_82e8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_82e0

dec_label_pc_84b4:                                ; preds = %bb53
  %v0_84b4 = load i32, i32* @r5, align 4
  %v2_84b4 = icmp eq i32 %v0_84b4, 0
  store i1 %v2_84b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84b4, label %dec_label_pc_84d8, label %dec_label_pc_84bc

dec_label_pc_84bc:                                ; preds = %dec_label_pc_84b4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_84c0

dec_label_pc_84c0:                                ; preds = %dec_label_pc_84c0, %dec_label_pc_84bc
  %v1_84c0 = phi i32 [ 0, %dec_label_pc_84bc ], [ %v1_84cc, %dec_label_pc_84c0 ]
  %v0_84c0 = phi i32 [ %v0_84ac, %dec_label_pc_84bc ], [ %v0_84d8.pre, %dec_label_pc_84c0 ]
  %v4_84c0 = mul i32 %v1_84c0, 8
  %v5_84c0 = add i32 %v4_84c0, %v0_84c0
  %v6_84c0 = inttoptr i32 %v5_84c0 to i32*
  %v7_84c0 = load i32, i32* %v6_84c0, align 4
  store i32 %v7_84c0, i32* %r0.global-to-local, align 4
  %v2_84c4 = icmp eq i32 %v7_84c0, 0
  store i1 %v2_84c4, i1* %cpsr_z.global-to-local, align 1
  store i32 33996, i32* @lr, align 4
  %v1_84c8 = xor i1 %v2_84c4, true
  call void @__pseudo_cond_branch(i1 %v1_84c8, i32 ptrtoint (i32* @global_var_13f98.16 to i32))
  %v0_84cc = load i32, i32* @r4, align 4
  %v1_84cc = add i32 %v0_84cc, 1
  store i32 %v1_84cc, i32* @r4, align 4
  %v0_84d0 = load i32, i32* @r5, align 4
  %v9_84d0 = icmp eq i32 %v0_84d0, %v1_84cc
  store i1 %v9_84d0, i1* %cpsr_z.global-to-local, align 1
  %v0_84d8.pre = load i32, i32* @r6, align 4
  br i1 %v9_84d0, label %dec_label_pc_84d8, label %dec_label_pc_84c0

dec_label_pc_84d8:                                ; preds = %dec_label_pc_84c0, %dec_label_pc_84b4
  %v0_84d8 = phi i32 [ %v0_84ac, %dec_label_pc_84b4 ], [ %v0_84d8.pre, %dec_label_pc_84c0 ]
  store i32 %v0_84d8, i32* @r0, align 4
  %v0_84dc = call i32 @function_13f98()
  store i32 %v0_84dc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_82e0

dec_label_pc_84e4:                                ; preds = %bb51
  store i32 ptrtoint (i8** @global_var_20388.18 to i32), i32* %r3.global-to-local, align 4
  %v2_84e8 = load i8, i8* bitcast (i8** @global_var_20388.18 to i8*), align 4
  %v3_84e8 = zext i8 %v2_84e8 to i32
  store i32 %v3_84e8, i32* %r0.global-to-local, align 4
  %v2_84ec = icmp eq i8 %v2_84e8, 0
  store i1 %v2_84ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84ec, label %dec_label_pc_8550, label %dec_label_pc_84f4

dec_label_pc_84f4:                                ; preds = %dec_label_pc_84e4
  store i32 ptrtoint (i32* @global_var_2038c.20 to i32), i32* %r3.global-to-local, align 4
  %v2_84f8 = load i32, i32* @global_var_2038c.20, align 4
  store i32 %v2_84f8, i32* %r1.global-to-local, align 4
  %v1_84fc = inttoptr i32 %v2_84f8 to i32*
  %v2_84fc = load i32, i32* %v1_84fc, align 4
  store i32 %v2_84fc, i32* @ip, align 4
  %v1_8504 = add i32 %v2_84fc, 4
  %v2_8504 = inttoptr i32 %v1_8504 to i8*
  %v3_8504 = load i8, i8* %v2_8504, align 1
  %v4_8504 = zext i8 %v3_8504 to i32
  store i32 %v4_8504, i32* %r3.global-to-local, align 4
  %v9_8508 = icmp eq i8 %v3_8504, %v3_8314
  store i1 %v9_8508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8508, label %dec_label_pc_8530, label %dec_label_pc_8510

dec_label_pc_8510:                                ; preds = %dec_label_pc_84f4, %dec_label_pc_851c
  %v0_8510 = phi i32 [ %v1_8510, %dec_label_pc_851c ], [ 0, %dec_label_pc_84f4 ]
  %v1_8510 = add i32 %v0_8510, 1
  store i32 %v1_8510, i32* %r2.global-to-local, align 4
  %v9_8514 = icmp eq i32 %v1_8510, %v3_84e8
  store i1 %v9_8514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8514, label %dec_label_pc_8550, label %dec_label_pc_851c

dec_label_pc_851c:                                ; preds = %dec_label_pc_8510
  %v4_851c = mul i32 %v1_8510, 4
  %v5_851c = add i32 %v4_851c, %v2_84f8
  %v6_851c = inttoptr i32 %v5_851c to i32*
  %v7_851c = load i32, i32* %v6_851c, align 4
  store i32 %v7_851c, i32* @ip, align 4
  %v1_8524 = add i32 %v7_851c, 4
  %v2_8524 = inttoptr i32 %v1_8524 to i8*
  %v3_8524 = load i8, i8* %v2_8524, align 1
  %v4_8524 = zext i8 %v3_8524 to i32
  store i32 %v4_8524, i32* %r3.global-to-local, align 4
  %v9_8528 = icmp eq i8 %v3_8524, %v3_8314
  store i1 %v9_8528, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8528, label %dec_label_pc_8530, label %dec_label_pc_8510

dec_label_pc_8530:                                ; preds = %dec_label_pc_851c, %dec_label_pc_84f4
  %v0_8544 = phi i32 [ %v2_84fc, %dec_label_pc_84f4 ], [ %v7_851c, %dec_label_pc_851c ]
  store i32 %v5_8304, i32* %r0.global-to-local, align 4
  %v0_8538 = load i32, i32* @sb, align 4
  store i32 %v0_8538, i32* %r1.global-to-local, align 4
  store i32 %v2_8350, i32* %r2.global-to-local, align 4
  %v0_8540 = load i32, i32* @r5, align 4
  store i32 %v0_8540, i32* %r3.global-to-local, align 4
  %v1_8544 = inttoptr i32 %v0_8544 to i32*
  %v2_8544 = load i32, i32* %v1_8544, align 4
  store i32 %v2_8544, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v2_8544)
  br label %dec_label_pc_8550

dec_label_pc_8550:                                ; preds = %dec_label_pc_8510, %dec_label_pc_84e4, %dec_label_pc_8530
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_8554 = call i32 @function_1433c(i32 0)
  store i32 %v1_8554, i32* %r0.global-to-local, align 4
  %v0_8558 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8558, label %bb55, label %.thread17

bb55:                                             ; preds = %dec_label_pc_8550
  %v1_8558 = load i32, i32* %r2.global-to-local, align 4
  %v2_855c = load i32, i32* @ip, align 4
  %v5_855c = mul i32 %v2_855c, 128
  %v6_855c = and i32 %v5_855c, %v1_8558
  store i32 %v6_855c, i32* %r0.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %dec_label_pc_8550, %bb55
  %v7_855c = phi i32 [ %v1_8554, %dec_label_pc_8550 ], [ %v6_855c, %bb55 ]
  ret i32 %v7_855c

; uselistorder directives
  uselistorder i1 %v9_8528, { 1, 0 }
  uselistorder i32 %v1_8510, { 1, 2, 3, 0 }
  uselistorder i1 %v9_8508, { 1, 0 }
  uselistorder i32 %v0_84dc, { 1, 0 }
  uselistorder i32 %v1_84cc, { 1, 2, 0 }
  uselistorder i1 %v2_84a0, { 0, 2, 1 }
  uselistorder i1 %v2_8494, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_847c, { 1, 0 }
  uselistorder i32 %v0_8478, { 2, 1, 0, 3 }
  uselistorder i32 %v0_8464, { 1, 0 }
  uselistorder i32 %v2_8434, { 1, 0 }
  uselistorder i32 %v1_8430, { 2, 0, 1, 3 }
  uselistorder i32 %v4_842c, { 0, 2, 1, 3 }
  uselistorder i32 %v3_8410, { 1, 0 }
  uselistorder i32 %v3_83a4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8394, { 1, 0 }
  uselistorder i32 %v1_8390, { 1, 0 }
  uselistorder i32 %v2_8350, { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 %v4_8324, { 1, 0, 2, 3 }
  uselistorder i32 %v5_8304, { 1, 0 }
  uselistorder i32 %v1_82f0, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_82ec, { 1, 2, 0, 3 }
  uselistorder i32 %v0_82d8, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %r2.global-to-local, { 3, 0, 1, 4, 2, 6, 5, 7, 8 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 6, 7, 3, 4, 5, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 7, 5, 4, 6, 10, 8, 22, 9, 23, 2, 12, 11, 18, 19, 13, 14, 15, 16, 17, 20, 21, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 0, 12, 17, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %.thread17, { 1, 0 }
  uselistorder label %dec_label_pc_8550, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8510, { 1, 0 }
  uselistorder label %bb53, { 1, 0 }
  uselistorder label %dec_label_pc_849c, { 5, 4, 0, 1, 2, 3, 6, 7, 8 }
  uselistorder label %dec_label_pc_8444, { 1, 0 }
  uselistorder label %dec_label_pc_82e0, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @function_8560(i32 %arg1) local_unnamed_addr {
dec_label_pc_8560:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8560 = load i32, i32* @r4, align 4
  store i32 %v3_8560, i32* %stack_var_-24, align 4
  %v6_8560 = load i32, i32* @r5, align 4
  %v9_8560 = load i32, i32* @r6, align 4
  %v12_8560 = load i32, i32* @r7, align 4
  %v15_8560 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_856c = call i32 @function_1384c(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_20388.18 to i32), i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_2038c.20 to i32), i32* @r6, align 4
  store i32 52284, i32* %r2.global-to-local, align 4
  store i32 %v2_856c, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_20389.24 to i32), i32* %r1.global-to-local, align 4
  %v2_858c = load i32, i32* @global_var_2038c.20, align 4
  %v2_8590 = inttoptr i32 %v2_856c to i32*
  store i32 52284, i32* %v2_8590, align 4
  %v3_8594 = load i32, i32* @r4, align 4
  %v4_8594 = add i32 %v3_8594, 4
  %v5_8594 = inttoptr i32 %v4_8594 to i8*
  store i8 0, i8* %v5_8594, align 1
  %v0_8598 = load i32, i32* %r1.global-to-local, align 4
  %v3_8598 = mul i32 %v0_8598, 4
  store i32 %v3_8598, i32* %r1.global-to-local, align 4
  %v5_859c = inttoptr i32 %v2_858c to i32*
  %v6_859c = call i32 @function_13980(i32* %v5_859c, i32 %v3_8598, i32 52284, i32 0)
  %v2_85a0 = load i8, i8* bitcast (i8** @global_var_20388.18 to i8*), align 4
  %v3_85a0 = zext i8 %v2_85a0 to i32
  store i32 %v6_859c, i32* %r2.global-to-local, align 4
  %v0_85a8 = load i32, i32* @r4, align 4
  %v5_85a8 = mul nuw nsw i32 %v3_85a0, 4
  %v6_85a8 = add i32 %v5_85a8, %v6_859c
  %v7_85a8 = inttoptr i32 %v6_85a8 to i32*
  store i32 %v0_85a8, i32* %v7_85a8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_20389.24 to i32), i32* %r3.global-to-local, align 4
  %v1_85b8 = load i32, i32* @r6, align 4
  %v2_85b8 = inttoptr i32 %v1_85b8 to i32*
  store i32 %v6_859c, i32* %v2_85b8, align 4
  %v0_85bc = load i32, i32* %r3.global-to-local, align 4
  %v1_85bc = trunc i32 %v0_85bc to i8
  %v2_85bc = load i32, i32* @r5, align 4
  %v3_85bc = inttoptr i32 %v2_85bc to i8*
  store i8 %v1_85bc, i8* %v3_85bc, align 1
  %v2_85c0 = call i32 @function_1384c(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_d208.26 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_85c0, i32* @r4, align 4
  store i32 ptrtoint (i8* @global_var_20389.24 to i32), i32* %r1.global-to-local, align 4
  %v2_85d8 = load i32, i32* @global_var_2038c.20, align 4
  %v2_85dc = inttoptr i32 %v2_85c0 to i32*
  store i32 ptrtoint (i32* @global_var_d208.26 to i32), i32* %v2_85dc, align 4
  %v0_85e0 = load i32, i32* @r8, align 4
  %v1_85e0 = trunc i32 %v0_85e0 to i8
  %v2_85e0 = load i32, i32* @r4, align 4
  %v3_85e0 = add i32 %v2_85e0, 4
  %v4_85e0 = inttoptr i32 %v3_85e0 to i8*
  store i8 %v1_85e0, i8* %v4_85e0, align 1
  %v0_85e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_85e4 = mul i32 %v0_85e4, 4
  store i32 %v3_85e4, i32* %r1.global-to-local, align 4
  %v4_85e8 = inttoptr i32 %v2_85d8 to i32*
  %v5_85e8 = call i32 @function_13980(i32* %v4_85e8, i32 %v3_85e4, i32 %v6_859c, i32 ptrtoint (i32* @global_var_d208.26 to i32))
  %v2_85ec = load i8, i8* bitcast (i8** @global_var_20388.18 to i8*), align 4
  %v3_85ec = zext i8 %v2_85ec to i32
  store i32 %v3_85ec, i32* %r3.global-to-local, align 4
  store i32 %v5_85e8, i32* %r2.global-to-local, align 4
  %v0_85f4 = load i32, i32* @r4, align 4
  %v5_85f4 = mul nuw nsw i32 %v3_85ec, 4
  %v6_85f4 = add i32 %v5_85f4, %v5_85e8
  %v7_85f4 = inttoptr i32 %v6_85f4 to i32*
  store i32 %v0_85f4, i32* %v7_85f4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_85fc = load i32, i32* %r3.global-to-local, align 4
  %v1_85fc = load i32, i32* @r8, align 4
  %v2_85fc = add i32 %v1_85fc, %v0_85fc
  store i32 %v2_85fc, i32* %r3.global-to-local, align 4
  %v1_8604 = trunc i32 %v2_85fc to i8
  %v2_8604 = load i32, i32* @r5, align 4
  %v3_8604 = inttoptr i32 %v2_8604 to i8*
  store i8 %v1_8604, i8* %v3_8604, align 1
  %v0_8608 = load i32, i32* %r2.global-to-local, align 4
  %v1_8608 = load i32, i32* @r6, align 4
  %v2_8608 = inttoptr i32 %v1_8608 to i32*
  store i32 %v0_8608, i32* %v2_8608, align 4
  %v2_860c = call i32 @function_1384c(i32 %v1_85fc, i32 8)
  %v2_8610 = load i8, i8* bitcast (i8** @global_var_20388.18 to i8*), align 4
  %v3_8610 = zext i8 %v2_8610 to i32
  store i32 ptrtoint (i32* @global_var_d674.28 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_860c, i32* @r4, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_8620 = load i32, i32* @r8, align 4
  %v2_8620 = add i32 %v1_8620, %v3_8610
  store i32 %v2_8620, i32* %r1.global-to-local, align 4
  %v2_8624 = load i32, i32* @global_var_2038c.20, align 4
  %v2_8628 = inttoptr i32 %v2_860c to i32*
  store i32 ptrtoint (i32* @global_var_d674.28 to i32), i32* %v2_8628, align 4
  %v3_862c = load i32, i32* @r4, align 4
  %v4_862c = add i32 %v3_862c, 4
  %v5_862c = inttoptr i32 %v4_862c to i8*
  store i8 2, i8* %v5_862c, align 1
  %v0_8630 = load i32, i32* %r1.global-to-local, align 4
  %v3_8630 = mul i32 %v0_8630, 4
  store i32 %v3_8630, i32* %r1.global-to-local, align 4
  %v5_8634 = inttoptr i32 %v2_8624 to i32*
  %v6_8634 = call i32 @function_13980(i32* %v5_8634, i32 %v3_8630, i32 ptrtoint (i32* @global_var_d674.28 to i32), i32 2)
  %v2_8638 = load i8, i8* bitcast (i8** @global_var_20388.18 to i8*), align 4
  %v3_8638 = zext i8 %v2_8638 to i32
  store i32 %v3_8638, i32* %r3.global-to-local, align 4
  store i32 %v6_8634, i32* %r2.global-to-local, align 4
  %v0_8640 = load i32, i32* @r4, align 4
  %v5_8640 = mul nuw nsw i32 %v3_8638, 4
  %v6_8640 = add i32 %v5_8640, %v6_8634
  %v7_8640 = inttoptr i32 %v6_8640 to i32*
  store i32 %v0_8640, i32* %v7_8640, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_8648 = load i32, i32* %r3.global-to-local, align 4
  %v1_8648 = load i32, i32* @r8, align 4
  %v2_8648 = add i32 %v1_8648, %v0_8648
  store i32 %v2_8648, i32* %r3.global-to-local, align 4
  %v1_8650 = load i32, i32* @r6, align 4
  %v2_8650 = inttoptr i32 %v1_8650 to i32*
  store i32 %v6_8634, i32* %v2_8650, align 4
  %v0_8654 = load i32, i32* %r3.global-to-local, align 4
  %v1_8654 = trunc i32 %v0_8654 to i8
  %v2_8654 = load i32, i32* @r5, align 4
  %v3_8654 = inttoptr i32 %v2_8654 to i8*
  store i8 %v1_8654, i8* %v3_8654, align 1
  %v2_8658 = call i32 @function_1384c(i32 %v1_8648, i32 8)
  %v2_865c = load i8, i8* bitcast (i8** @global_var_20388.18 to i8*), align 4
  %v3_865c = zext i8 %v2_865c to i32
  store i32 ptrtoint (i32* @global_var_c97c.30 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_8658, i32* @r4, align 4
  %v1_866c = load i32, i32* @r8, align 4
  %v2_866c = add i32 %v1_866c, %v3_865c
  store i32 %v2_866c, i32* %r1.global-to-local, align 4
  %v2_8670 = load i32, i32* @global_var_2038c.20, align 4
  %v2_8674 = inttoptr i32 %v2_8658 to i32*
  store i32 ptrtoint (i32* @global_var_c97c.30 to i32), i32* %v2_8674, align 4
  %v0_8678 = load i32, i32* @r7, align 4
  %v1_8678 = trunc i32 %v0_8678 to i8
  %v2_8678 = load i32, i32* @r4, align 4
  %v3_8678 = add i32 %v2_8678, 4
  %v4_8678 = inttoptr i32 %v3_8678 to i8*
  store i8 %v1_8678, i8* %v4_8678, align 1
  %v0_867c = load i32, i32* %r1.global-to-local, align 4
  %v3_867c = mul i32 %v0_867c, 4
  store i32 %v3_867c, i32* %r1.global-to-local, align 4
  %v4_8680 = inttoptr i32 %v2_8670 to i32*
  %v5_8680 = call i32 @function_13980(i32* %v4_8680, i32 %v3_867c, i32 %v6_8634, i32 ptrtoint (i32* @global_var_c97c.30 to i32))
  %v2_8684 = load i8, i8* bitcast (i8** @global_var_20388.18 to i8*), align 4
  %v3_8684 = zext i8 %v2_8684 to i32
  store i32 %v3_8684, i32* %r3.global-to-local, align 4
  store i32 %v5_8680, i32* %r2.global-to-local, align 4
  %v0_868c = load i32, i32* @r4, align 4
  %v5_868c = mul nuw nsw i32 %v3_8684, 4
  %v6_868c = add i32 %v5_868c, %v5_8680
  %v7_868c = inttoptr i32 %v6_868c to i32*
  store i32 %v0_868c, i32* %v7_868c, align 4
  %v0_8690 = load i32, i32* @r7, align 4
  store i32 %v0_8690, i32* %r1.global-to-local, align 4
  %v0_8694 = load i32, i32* %r3.global-to-local, align 4
  %v1_8694 = load i32, i32* @r8, align 4
  %v2_8694 = add i32 %v1_8694, %v0_8694
  store i32 %v2_8694, i32* %r3.global-to-local, align 4
  %v1_869c = trunc i32 %v2_8694 to i8
  %v2_869c = load i32, i32* @r5, align 4
  %v3_869c = inttoptr i32 %v2_869c to i8*
  store i8 %v1_869c, i8* %v3_869c, align 1
  %v0_86a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_86a0 = load i32, i32* @r6, align 4
  %v2_86a0 = inttoptr i32 %v1_86a0 to i32*
  store i32 %v0_86a0, i32* %v2_86a0, align 4
  %v2_86a4 = call i32 @function_1384c(i32 %v1_8694, i32 %v0_8690)
  %v2_86a8 = load i8, i8* bitcast (i8** @global_var_20388.18 to i8*), align 4
  %v3_86a8 = zext i8 %v2_86a8 to i32
  store i32 ptrtoint (i32* @global_var_c2a4.32 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86a4, i32* @r4, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_86b8 = load i32, i32* @r8, align 4
  %v2_86b8 = add i32 %v1_86b8, %v3_86a8
  store i32 %v2_86b8, i32* %r1.global-to-local, align 4
  %v2_86bc = load i32, i32* @global_var_2038c.20, align 4
  %v2_86c0 = inttoptr i32 %v2_86a4 to i32*
  store i32 ptrtoint (i32* @global_var_c2a4.32 to i32), i32* %v2_86c0, align 4
  %v3_86c4 = load i32, i32* @r4, align 4
  %v4_86c4 = add i32 %v3_86c4, 4
  %v5_86c4 = inttoptr i32 %v4_86c4 to i8*
  store i8 3, i8* %v5_86c4, align 1
  %v0_86c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_86c8 = mul i32 %v0_86c8, 4
  store i32 %v3_86c8, i32* %r1.global-to-local, align 4
  %v5_86cc = inttoptr i32 %v2_86bc to i32*
  %v6_86cc = call i32 @function_13980(i32* %v5_86cc, i32 %v3_86c8, i32 ptrtoint (i32* @global_var_c2a4.32 to i32), i32 3)
  %v2_86d0 = load i8, i8* bitcast (i8** @global_var_20388.18 to i8*), align 4
  %v3_86d0 = zext i8 %v2_86d0 to i32
  store i32 %v3_86d0, i32* %r3.global-to-local, align 4
  store i32 %v6_86cc, i32* %r2.global-to-local, align 4
  %v0_86d8 = load i32, i32* @r4, align 4
  %v5_86d8 = mul nuw nsw i32 %v3_86d0, 4
  %v6_86d8 = add i32 %v5_86d8, %v6_86cc
  %v7_86d8 = inttoptr i32 %v6_86d8 to i32*
  store i32 %v0_86d8, i32* %v7_86d8, align 4
  %v0_86dc = load i32, i32* @r7, align 4
  store i32 %v0_86dc, i32* %r1.global-to-local, align 4
  %v0_86e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_86e0 = load i32, i32* @r8, align 4
  %v2_86e0 = add i32 %v1_86e0, %v0_86e0
  store i32 %v2_86e0, i32* %r3.global-to-local, align 4
  %v1_86e8 = trunc i32 %v2_86e0 to i8
  %v2_86e8 = load i32, i32* @r5, align 4
  %v3_86e8 = inttoptr i32 %v2_86e8 to i8*
  store i8 %v1_86e8, i8* %v3_86e8, align 1
  %v0_86ec = load i32, i32* %r2.global-to-local, align 4
  %v1_86ec = load i32, i32* @r6, align 4
  %v2_86ec = inttoptr i32 %v1_86ec to i32*
  store i32 %v0_86ec, i32* %v2_86ec, align 4
  %v2_86f0 = call i32 @function_1384c(i32 %v1_86e0, i32 %v0_86dc)
  %v2_86f4 = load i8, i8* bitcast (i8** @global_var_20388.18 to i8*), align 4
  %v3_86f4 = zext i8 %v2_86f4 to i32
  store i32 ptrtoint (i32* @global_var_bb80.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86f0, i32* @r4, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_8704 = load i32, i32* @r8, align 4
  %v2_8704 = add i32 %v1_8704, %v3_86f4
  store i32 %v2_8704, i32* %r1.global-to-local, align 4
  %v2_8708 = load i32, i32* @global_var_2038c.20, align 4
  %v2_870c = inttoptr i32 %v2_86f0 to i32*
  store i32 ptrtoint (i32* @global_var_bb80.34 to i32), i32* %v2_870c, align 4
  %v3_8710 = load i32, i32* @r4, align 4
  %v4_8710 = add i32 %v3_8710, 4
  %v5_8710 = inttoptr i32 %v4_8710 to i8*
  store i8 4, i8* %v5_8710, align 1
  %v0_8714 = load i32, i32* %r1.global-to-local, align 4
  %v3_8714 = mul i32 %v0_8714, 4
  store i32 %v3_8714, i32* %r1.global-to-local, align 4
  %v5_8718 = inttoptr i32 %v2_8708 to i32*
  %v6_8718 = call i32 @function_13980(i32* %v5_8718, i32 %v3_8714, i32 ptrtoint (i32* @global_var_bb80.34 to i32), i32 4)
  %v2_871c = load i8, i8* bitcast (i8** @global_var_20388.18 to i8*), align 4
  %v3_871c = zext i8 %v2_871c to i32
  store i32 %v3_871c, i32* %r3.global-to-local, align 4
  store i32 %v6_8718, i32* %r2.global-to-local, align 4
  %v0_8724 = load i32, i32* @r4, align 4
  %v5_8724 = mul nuw nsw i32 %v3_871c, 4
  %v6_8724 = add i32 %v5_8724, %v6_8718
  %v7_8724 = inttoptr i32 %v6_8724 to i32*
  store i32 %v0_8724, i32* %v7_8724, align 4
  %v0_8728 = load i32, i32* @r7, align 4
  store i32 %v0_8728, i32* %r1.global-to-local, align 4
  %v0_872c = load i32, i32* %r3.global-to-local, align 4
  %v1_872c = load i32, i32* @r8, align 4
  %v2_872c = add i32 %v1_872c, %v0_872c
  store i32 %v2_872c, i32* %r3.global-to-local, align 4
  %v1_8734 = trunc i32 %v2_872c to i8
  %v2_8734 = load i32, i32* @r5, align 4
  %v3_8734 = inttoptr i32 %v2_8734 to i8*
  store i8 %v1_8734, i8* %v3_8734, align 1
  %v0_8738 = load i32, i32* %r2.global-to-local, align 4
  %v1_8738 = load i32, i32* @r6, align 4
  %v2_8738 = inttoptr i32 %v1_8738 to i32*
  store i32 %v0_8738, i32* %v2_8738, align 4
  %v2_873c = call i32 @function_1384c(i32 %v1_872c, i32 %v0_8728)
  %v2_8740 = load i8, i8* bitcast (i8** @global_var_20388.18 to i8*), align 4
  %v3_8740 = zext i8 %v2_8740 to i32
  store i32 ptrtoint (i32* @global_var_b354.36 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_873c, i32* @r4, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_8750 = load i32, i32* @r8, align 4
  %v2_8750 = add i32 %v1_8750, %v3_8740
  store i32 %v2_8750, i32* %r1.global-to-local, align 4
  %v2_8754 = load i32, i32* @global_var_2038c.20, align 4
  %v2_8758 = inttoptr i32 %v2_873c to i32*
  store i32 ptrtoint (i32* @global_var_b354.36 to i32), i32* %v2_8758, align 4
  %v3_875c = load i32, i32* @r4, align 4
  %v4_875c = add i32 %v3_875c, 4
  %v5_875c = inttoptr i32 %v4_875c to i8*
  store i8 5, i8* %v5_875c, align 1
  %v0_8760 = load i32, i32* %r1.global-to-local, align 4
  %v3_8760 = mul i32 %v0_8760, 4
  store i32 %v3_8760, i32* %r1.global-to-local, align 4
  %v5_8764 = inttoptr i32 %v2_8754 to i32*
  %v6_8764 = call i32 @function_13980(i32* %v5_8764, i32 %v3_8760, i32 ptrtoint (i32* @global_var_b354.36 to i32), i32 5)
  %v2_8768 = load i8, i8* bitcast (i8** @global_var_20388.18 to i8*), align 4
  %v3_8768 = zext i8 %v2_8768 to i32
  store i32 %v3_8768, i32* %r3.global-to-local, align 4
  store i32 %v6_8764, i32* %r2.global-to-local, align 4
  %v0_8770 = load i32, i32* @r4, align 4
  %v5_8770 = mul nuw nsw i32 %v3_8768, 4
  %v6_8770 = add i32 %v5_8770, %v6_8764
  %v7_8770 = inttoptr i32 %v6_8770 to i32*
  store i32 %v0_8770, i32* %v7_8770, align 4
  %v0_8774 = load i32, i32* @r7, align 4
  store i32 %v0_8774, i32* %r1.global-to-local, align 4
  %v0_8778 = load i32, i32* %r3.global-to-local, align 4
  %v1_8778 = load i32, i32* @r8, align 4
  %v2_8778 = add i32 %v1_8778, %v0_8778
  store i32 %v2_8778, i32* %r3.global-to-local, align 4
  %v1_8780 = trunc i32 %v2_8778 to i8
  %v2_8780 = load i32, i32* @r5, align 4
  %v3_8780 = inttoptr i32 %v2_8780 to i8*
  store i8 %v1_8780, i8* %v3_8780, align 1
  %v0_8784 = load i32, i32* %r2.global-to-local, align 4
  %v1_8784 = load i32, i32* @r6, align 4
  %v2_8784 = inttoptr i32 %v1_8784 to i32*
  store i32 %v0_8784, i32* %v2_8784, align 4
  %v2_8788 = call i32 @function_1384c(i32 %v1_8778, i32 %v0_8774)
  %v2_878c = load i8, i8* bitcast (i8** @global_var_20388.18 to i8*), align 4
  %v3_878c = zext i8 %v2_878c to i32
  store i32 ptrtoint (i32* @global_var_acf4.38 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8788, i32* @r4, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_879c = load i32, i32* @r8, align 4
  %v2_879c = add i32 %v1_879c, %v3_878c
  store i32 %v2_879c, i32* %r1.global-to-local, align 4
  %v2_87a0 = load i32, i32* @global_var_2038c.20, align 4
  %v2_87a4 = inttoptr i32 %v2_8788 to i32*
  store i32 ptrtoint (i32* @global_var_acf4.38 to i32), i32* %v2_87a4, align 4
  %v3_87a8 = load i32, i32* @r4, align 4
  %v4_87a8 = add i32 %v3_87a8, 4
  %v5_87a8 = inttoptr i32 %v4_87a8 to i8*
  store i8 6, i8* %v5_87a8, align 1
  %v0_87ac = load i32, i32* %r1.global-to-local, align 4
  %v3_87ac = mul i32 %v0_87ac, 4
  store i32 %v3_87ac, i32* %r1.global-to-local, align 4
  %v5_87b0 = inttoptr i32 %v2_87a0 to i32*
  %v6_87b0 = call i32 @function_13980(i32* %v5_87b0, i32 %v3_87ac, i32 ptrtoint (i32* @global_var_acf4.38 to i32), i32 6)
  %v2_87b4 = load i8, i8* bitcast (i8** @global_var_20388.18 to i8*), align 4
  %v3_87b4 = zext i8 %v2_87b4 to i32
  store i32 %v3_87b4, i32* %r3.global-to-local, align 4
  store i32 %v6_87b0, i32* %r2.global-to-local, align 4
  %v0_87bc = load i32, i32* @r4, align 4
  %v5_87bc = mul nuw nsw i32 %v3_87b4, 4
  %v6_87bc = add i32 %v5_87bc, %v6_87b0
  %v7_87bc = inttoptr i32 %v6_87bc to i32*
  store i32 %v0_87bc, i32* %v7_87bc, align 4
  %v0_87c0 = load i32, i32* @r7, align 4
  store i32 %v0_87c0, i32* %r1.global-to-local, align 4
  %v0_87c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_87c4 = load i32, i32* @r8, align 4
  %v2_87c4 = add i32 %v1_87c4, %v0_87c4
  store i32 %v2_87c4, i32* %r3.global-to-local, align 4
  %v1_87cc = trunc i32 %v2_87c4 to i8
  %v2_87cc = load i32, i32* @r5, align 4
  %v3_87cc = inttoptr i32 %v2_87cc to i8*
  store i8 %v1_87cc, i8* %v3_87cc, align 1
  %v0_87d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_87d0 = load i32, i32* @r6, align 4
  %v2_87d0 = inttoptr i32 %v1_87d0 to i32*
  store i32 %v0_87d0, i32* %v2_87d0, align 4
  %v2_87d4 = call i32 @function_1384c(i32 %v1_87c4, i32 %v0_87c0)
  %v2_87d8 = load i8, i8* bitcast (i8** @global_var_20388.18 to i8*), align 4
  %v3_87d8 = zext i8 %v2_87d8 to i32
  store i32 42540, i32* %r2.global-to-local, align 4
  store i32 %v2_87d4, i32* @r4, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_87e8 = load i32, i32* @r8, align 4
  %v2_87e8 = add i32 %v1_87e8, %v3_87d8
  store i32 %v2_87e8, i32* %r1.global-to-local, align 4
  %v2_87ec = load i32, i32* @global_var_2038c.20, align 4
  %v2_87f0 = inttoptr i32 %v2_87d4 to i32*
  store i32 42540, i32* %v2_87f0, align 4
  %v3_87f4 = load i32, i32* @r4, align 4
  %v4_87f4 = add i32 %v3_87f4, 4
  %v5_87f4 = inttoptr i32 %v4_87f4 to i8*
  store i8 7, i8* %v5_87f4, align 1
  %v0_87f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_87f8 = mul i32 %v0_87f8, 4
  store i32 %v3_87f8, i32* %r1.global-to-local, align 4
  %v5_87fc = inttoptr i32 %v2_87ec to i32*
  %v6_87fc = call i32 @function_13980(i32* %v5_87fc, i32 %v3_87f8, i32 42540, i32 7)
  %v2_8800 = load i8, i8* bitcast (i8** @global_var_20388.18 to i8*), align 4
  %v3_8800 = zext i8 %v2_8800 to i32
  store i32 %v3_8800, i32* %r3.global-to-local, align 4
  store i32 %v6_87fc, i32* %r2.global-to-local, align 4
  %v0_8808 = load i32, i32* @r4, align 4
  %v5_8808 = mul nuw nsw i32 %v3_8800, 4
  %v6_8808 = add i32 %v5_8808, %v6_87fc
  %v7_8808 = inttoptr i32 %v6_8808 to i32*
  store i32 %v0_8808, i32* %v7_8808, align 4
  %v0_880c = load i32, i32* @r7, align 4
  store i32 %v0_880c, i32* %r1.global-to-local, align 4
  %v0_8810 = load i32, i32* %r3.global-to-local, align 4
  %v1_8810 = load i32, i32* @r8, align 4
  %v2_8810 = add i32 %v1_8810, %v0_8810
  store i32 %v2_8810, i32* %r3.global-to-local, align 4
  %v1_8818 = trunc i32 %v2_8810 to i8
  %v2_8818 = load i32, i32* @r5, align 4
  %v3_8818 = inttoptr i32 %v2_8818 to i8*
  store i8 %v1_8818, i8* %v3_8818, align 1
  %v0_881c = load i32, i32* %r2.global-to-local, align 4
  %v1_881c = load i32, i32* @r6, align 4
  %v2_881c = inttoptr i32 %v1_881c to i32*
  store i32 %v0_881c, i32* %v2_881c, align 4
  %v2_8820 = call i32 @function_1384c(i32 %v1_8810, i32 %v0_880c)
  %v2_8824 = load i8, i8* bitcast (i8** @global_var_20388.18 to i8*), align 4
  %v3_8824 = zext i8 %v2_8824 to i32
  store i32 ptrtoint (i32* @global_var_889c.41 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8820, i32* @r4, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v1_8834 = load i32, i32* @r8, align 4
  %v2_8834 = add i32 %v1_8834, %v3_8824
  store i32 %v2_8834, i32* %r1.global-to-local, align 4
  %v2_8838 = load i32, i32* @global_var_2038c.20, align 4
  %v2_883c = inttoptr i32 %v2_8820 to i32*
  store i32 ptrtoint (i32* @global_var_889c.41 to i32), i32* %v2_883c, align 4
  %v3_8840 = load i32, i32* @r4, align 4
  %v4_8840 = add i32 %v3_8840, 4
  %v5_8840 = inttoptr i32 %v4_8840 to i8*
  store i8 9, i8* %v5_8840, align 1
  %v0_8844 = load i32, i32* %r1.global-to-local, align 4
  %v3_8844 = mul i32 %v0_8844, 4
  store i32 %v3_8844, i32* %r1.global-to-local, align 4
  %v5_8848 = inttoptr i32 %v2_8838 to i32*
  %v6_8848 = call i32 @function_13980(i32* %v5_8848, i32 %v3_8844, i32 ptrtoint (i32* @global_var_889c.41 to i32), i32 9)
  %v2_884c = load i8, i8* bitcast (i8** @global_var_20388.18 to i8*), align 4
  %v3_884c = zext i8 %v2_884c to i32
  store i32 %v3_884c, i32* %r3.global-to-local, align 4
  %v1_8850 = load i32, i32* @r6, align 4
  %v2_8850 = inttoptr i32 %v1_8850 to i32*
  store i32 %v6_8848, i32* %v2_8850, align 4
  %v0_8854 = load i32, i32* @r4, align 4
  %v2_8854 = load i32, i32* %r3.global-to-local, align 4
  %v5_8854 = mul i32 %v2_8854, 4
  %v6_8854 = add i32 %v5_8854, %v6_8848
  %v7_8854 = inttoptr i32 %v6_8854 to i32*
  store i32 %v0_8854, i32* %v7_8854, align 4
  %v0_8858 = load i32, i32* %r3.global-to-local, align 4
  %v1_8858 = load i32, i32* @r8, align 4
  %v2_8858 = add i32 %v1_8858, %v0_8858
  store i32 %v2_8858, i32* %r2.global-to-local, align 4
  %v1_8860 = trunc i32 %v2_8858 to i8
  %v2_8860 = load i32, i32* @r5, align 4
  %v3_8860 = inttoptr i32 %v2_8860 to i8*
  store i8 %v1_8860, i8* %v3_8860, align 1
  %v2_8864 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_8864, i32* @r4, align 4
  store i32 %v6_8560, i32* @r5, align 4
  store i32 %v9_8560, i32* @r6, align 4
  store i32 %v12_8560, i32* @r7, align 4
  store i32 %v15_8560, i32* @r8, align 4
  ret i32 %v1_8858

; uselistorder directives
  uselistorder i32 %v1_8858, { 1, 0 }
  uselistorder i32 %v3_8844, { 1, 0 }
  uselistorder i32 %v1_8810, { 1, 0 }
  uselistorder i32 %v3_87f8, { 1, 0 }
  uselistorder i32 %v1_87c4, { 1, 0 }
  uselistorder i32 %v3_87ac, { 1, 0 }
  uselistorder i32 %v1_8778, { 1, 0 }
  uselistorder i32 %v3_8760, { 1, 0 }
  uselistorder i32 %v1_872c, { 1, 0 }
  uselistorder i32 %v3_8714, { 1, 0 }
  uselistorder i32 %v1_86e0, { 1, 0 }
  uselistorder i32 %v3_86c8, { 1, 0 }
  uselistorder i32 %v1_8694, { 1, 0 }
  uselistorder i32 %v3_867c, { 1, 0 }
  uselistorder i32 %v1_8648, { 1, 0 }
  uselistorder i32 %v6_8634, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8630, { 1, 0 }
  uselistorder i32 %v1_85fc, { 1, 0 }
  uselistorder i32 %v3_85e4, { 1, 0 }
  uselistorder i32 %v2_85c0, { 1, 0 }
  uselistorder i32 %v6_859c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8598, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0 }
  uselistorder i8* bitcast (i8** @global_var_20388.18 to i8*), { 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_20389.24 to i32), { 2, 1, 0 }
  uselistorder i8** @global_var_20388.18, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_20388.18 to i32), { 1, 0 }
}

define i32 @function_889c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_889c:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-204 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-10572 = alloca i32, align 4
  %stack_var_-408 = alloca i32, align 4
  %stack_var_-20813 = alloca i32, align 4
  %v3_889c = load i32, i32* @r4, align 4
  %v6_889c = load i32, i32* @r5, align 4
  %v18_889c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v5_88c8 = inttoptr i32 %arg4 to i32*
  %v6_88c8 = call i32 @function_8190(i32 %arg3, i32* %v5_88c8, i32 20, i32 0, i32 %arg2)
  %v0_88cc = load i32, i32* @r5, align 4
  store i32 %v0_88cc, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v0_88d8 = load i32, i32* @r4, align 4
  store i32 %v0_88d8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_176ac.43 to i32), i32* %r3.global-to-local, align 4
  %v6_88e0 = inttoptr i32 %v0_88cc to i32*
  %v7_88e0 = call i32 @function_8190(i32 %v0_88d8, i32* %v6_88e0, i32 19, i32 ptrtoint ([4 x i8]* @global_var_176ac.43 to i32), i32 %v6_88c8)
  %v0_88e4 = load i32, i32* @r5, align 4
  store i32 %v0_88e4, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v7_88e0, i32* @sb, align 4
  %v0_88f4 = load i32, i32* @r4, align 4
  store i32 %v0_88f4, i32* %r0.global-to-local, align 4
  %v5_88f8 = inttoptr i32 %v0_88e4 to i32*
  %v6_88f8 = call i32 @function_8190(i32 %v0_88f4, i32* %v5_88f8, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v0_88fc = load i32, i32* @r5, align 4
  store i32 %v0_88fc, i32* %r1.global-to-local, align 4
  store i32 %v6_88f8, i32* @sl, align 4
  store i32 21, i32* %r2.global-to-local, align 4
  %v0_8908 = load i32, i32* @r4, align 4
  store i32 %v0_8908, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176b0.45 to i32), i32* %r3.global-to-local, align 4
  %v5_8910 = inttoptr i32 %v0_88fc to i32*
  %v6_8910 = call i32 @function_8190(i32 %v0_8908, i32* %v5_8910, i32 21, i32 ptrtoint (i32* @global_var_176b0.45 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8914 = load i32, i32* @r5, align 4
  store i32 %v0_8914, i32* %r1.global-to-local, align 4
  store i32 %v6_8910, i32* @r8, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  %v0_8920 = load i32, i32* @r4, align 4
  store i32 %v0_8920, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_8928 = inttoptr i32 %v0_8914 to i32*
  %v5_8928 = call i32 @function_8258(i32 %v0_8920, i32* %v4_8928, i32 23, i32 1)
  %v0_892c = load i32, i32* @r5, align 4
  store i32 %v0_892c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  store i32 %v5_8928, i32* @r6, align 4
  %v0_893c = load i32, i32* @r4, align 4
  store i32 %v0_893c, i32* %r0.global-to-local, align 4
  %v4_8940 = inttoptr i32 %v0_892c to i32*
  %v5_8940 = call i32 @function_8258(i32 %v0_893c, i32* %v4_8940, i32 7, i32 80)
  %v2_8948 = ptrtoint i32* %stack_var_-20813 to i32
  %v3_8950 = mul i32 %v5_8940, 65536
  store i32 %v3_8950, i32* %r3.global-to-local, align 4
  %tmp168 = bitcast i32* %stack_var_-20813 to i8*
  store i32 %v2_8948, i32* %r0.global-to-local, align 4
  store i32 10241, i32* @r2, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8964 = urem i32 %v5_8940, 65536
  store i32 %v3_8964, i32* @r7, align 4
  %v3_8968 = call i32 @function_12950(i8* %tmp168, i32 0)
  store i32 %v3_8968, i32* %r0.global-to-local, align 4
  %v0_896c = load i32, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_896c = icmp eq i32 %v0_896c, 0
  store i1 %v2_896c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_896c, label %.thread14, label %bb

bb:                                               ; preds = %dec_label_pc_889c
  %v1_8970 = load i32, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_8970 = icmp eq i32 %v1_8970, 0
  store i1 %v3_8970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8970, label %bb169, label %dec_label_pc_8990

.thread14:                                        ; preds = %dec_label_pc_889c
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8980

bb169:                                            ; preds = %bb
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_8980

dec_label_pc_8980:                                ; preds = %bb169, %dec_label_pc_89b0, %.thread14, %dec_label_pc_89a0, %dec_label_pc_8990
  %v1_898c = phi i32 [ %v2_89b4, %dec_label_pc_89b0 ], [ %v3_8968, %.thread14 ], [ %v3_8968, %bb169 ], [ %v2_89a4, %dec_label_pc_89a0 ], [ %v2_8994, %dec_label_pc_8990 ]
  store i32 %v3_889c, i32* %r4.global-to-local, align 4
  store i32 %v6_889c, i32* %r5.global-to-local, align 4
  store i32 %v18_889c, i32* %sb.global-to-local, align 4
  ret i32 %v1_898c

dec_label_pc_8990:                                ; preds = %bb
  store i32 0, i32* @r4, align 4
  store i32 %v0_896c, i32* %r0.global-to-local, align 4
  %v1_8994 = inttoptr i32 %v0_896c to i8*
  %v2_8994 = call i32 @function_1186c(i8* %v1_8994)
  store i32 %v2_8994, i32* %r0.global-to-local, align 4
  %v2_8998 = icmp ugt i32 %v2_8994, 254
  store i1 %v2_8998, i1* %cpsr_c.global-to-local, align 1
  %v7_8998 = icmp eq i32 %v2_8994, 255
  store i1 %v7_8998, i1* %cpsr_z.global-to-local, align 1
  %v8_899c = icmp sgt i32 %v2_8994, 255
  br i1 %v8_899c, label %dec_label_pc_8980, label %dec_label_pc_89a0

dec_label_pc_89a0:                                ; preds = %dec_label_pc_8990
  %v0_89a0 = load i32, i32* @sl, align 4
  store i32 %v0_89a0, i32* %r0.global-to-local, align 4
  %v1_89a4 = inttoptr i32 %v0_89a0 to i8*
  %v2_89a4 = call i32 @function_1186c(i8* %v1_89a4)
  store i32 %v2_89a4, i32* %r0.global-to-local, align 4
  %v2_89a8 = icmp ugt i32 %v2_89a4, 126
  store i1 %v2_89a8, i1* %cpsr_c.global-to-local, align 1
  %v7_89a8 = icmp eq i32 %v2_89a4, 127
  store i1 %v7_89a8, i1* %cpsr_z.global-to-local, align 1
  %v8_89ac = icmp sgt i32 %v2_89a4, 127
  br i1 %v8_89ac, label %dec_label_pc_8980, label %dec_label_pc_89b0

dec_label_pc_89b0:                                ; preds = %dec_label_pc_89a0
  %v0_89b0 = load i32, i32* @sb, align 4
  store i32 %v0_89b0, i32* %r0.global-to-local, align 4
  %v1_89b4 = inttoptr i32 %v0_89b0 to i8*
  %v2_89b4 = call i32 @function_1186c(i8* %v1_89b4)
  store i32 %v2_89b4, i32* %r0.global-to-local, align 4
  %v2_89b8 = icmp ugt i32 %v2_89b4, 8
  store i1 %v2_89b8, i1* %cpsr_c.global-to-local, align 1
  %v7_89b8 = icmp eq i32 %v2_89b4, 9
  store i1 %v7_89b8, i1* %cpsr_z.global-to-local, align 1
  %v7_89bc = icmp sgt i32 %v2_89b4, 9
  br i1 %v7_89bc, label %dec_label_pc_8980, label %bb170

bb170:                                            ; preds = %dec_label_pc_89b0
  %v10_89bc = ptrtoint i32* %stack_var_-408 to i32
  store i32 %v10_89bc, i32* %r2.global-to-local, align 4
  %v8_89c0 = load i32, i32* @r4, align 4
  %v10_89c0 = add i32 %v10_89bc, 364
  %v11_89c0 = inttoptr i32 %v10_89c0 to i32*
  store i32 %v8_89c0, i32* %v11_89c0, align 4
  br label %dec_label_pc_89c8

dec_label_pc_89c8:                                ; preds = %bb170, %bb174
  %v0_89c8 = load i32, i32* @sb, align 4
  store i32 %v0_89c8, i32* %r0.global-to-local, align 4
  %v1_89cc = inttoptr i32 %v0_89c8 to i8*
  %v2_89cc = call i32 @function_1186c(i8* %v1_89cc)
  store i32 %v2_89cc, i32* %r0.global-to-local, align 4
  store i32 %v10_89bc, i32* %r1.global-to-local, align 4
  %v3_89d4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_89d4, i32* %ip.global-to-local, align 4
  %v3_89d8 = icmp uge i32 %v2_89cc, %v3_89d4
  store i1 %v3_89d8, i1* %cpsr_c.global-to-local, align 1
  %v9_89d8 = icmp eq i32 %v2_89cc, %v3_89d4
  store i1 %v9_89d8, i1* %cpsr_z.global-to-local, align 1
  %v7_89dc = icmp sgt i32 %v2_89cc, %v3_89d4
  br i1 %v7_89dc, label %dec_label_pc_89e0, label %dec_label_pc_8a0c

dec_label_pc_89e0:                                ; preds = %dec_label_pc_89c8
  %v0_89e0 = load i32, i32* @sb, align 4
  %v2_89e0 = add i32 %v0_89e0, %v3_89d4
  %v3_89e0 = inttoptr i32 %v2_89e0 to i8*
  %v4_89e0 = load i8, i8* %v3_89e0, align 1
  %v6_89e0 = zext i8 %v4_89e0 to i32
  %v1_89e4 = add nsw i32 %v6_89e0, -32
  store i32 %v1_89e4, i32* %r2.global-to-local, align 4
  %v1_89e8 = add nsw i32 %v6_89e0, -97
  store i32 %v1_89e8, i32* %r3.global-to-local, align 4
  %v2_89ec = icmp ugt i32 %v1_89e8, 24
  store i1 %v2_89ec, i1* %cpsr_c.global-to-local, align 1
  %v7_89ec = icmp eq i32 %v1_89e8, 25
  store i1 %v7_89ec, i1* %cpsr_z.global-to-local, align 1
  %v2_89f0 = xor i1 %v2_89ec, true
  %v3_89f0 = or i1 %v7_89ec, %v2_89f0
  br i1 %v3_89f0, label %bb171, label %bb172

bb171:                                            ; preds = %dec_label_pc_89e0
  %v5_89f0 = trunc i32 %v1_89e4 to i8
  store i8 %v5_89f0, i8* %v3_89e0, align 1
  %v0_89f4.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_89f4.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb172

bb172:                                            ; preds = %dec_label_pc_89e0, %bb171
  %v1_89f8 = phi i1 [ %v2_89ec, %dec_label_pc_89e0 ], [ %v1_89f4.pre, %bb171 ]
  %v0_89f8 = phi i1 [ false, %dec_label_pc_89e0 ], [ %v0_89f4.pre, %bb171 ]
  %v2_89f4 = xor i1 %v1_89f8, true
  %v3_89f4 = or i1 %v0_89f8, %v2_89f4
  br i1 %v3_89f4, label %bb173, label %._crit_edge

._crit_edge:                                      ; preds = %bb172
  %v0_8a00.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb174

bb173:                                            ; preds = %bb172
  store i32 %v10_89bc, i32* %r3.global-to-local, align 4
  %v7_89f8 = load i32, i32* %v11_89c0, align 4
  store i32 %v7_89f8, i32* %ip.global-to-local, align 4
  br label %bb174

bb174:                                            ; preds = %._crit_edge, %bb173
  %v0_8a00 = phi i32 [ %v0_8a00.pre, %._crit_edge ], [ %v7_89f8, %bb173 ]
  store i32 %v10_89bc, i32* @lr, align 4
  %v1_8a00 = add i32 %v0_8a00, 1
  store i32 %v1_8a00, i32* %ip.global-to-local, align 4
  store i32 %v1_8a00, i32* %stack_var_-44, align 4
  br label %dec_label_pc_89c8

dec_label_pc_8a0c:                                ; preds = %dec_label_pc_89c8
  store i32 43, i32* %r0.global-to-local, align 4
  %v1_8a10 = call i32 @function_10e48(i32 43)
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8a18 = call i32 @function_10e48(i32 44)
  store i32 45, i32* %r0.global-to-local, align 4
  %v1_8a20 = call i32 @function_10e48(i32 45)
  store i32 46, i32* %r0.global-to-local, align 4
  %v1_8a28 = call i32 @function_10e48(i32 46)
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_8a30 = call i32 @function_10e48(i32 47)
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_8a38 = call i32 @function_10e48(i32 48)
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_8a40 = call i32 @function_10e48(i32 49)
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_8a48 = call i32 @function_10e48(i32 50)
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_8a50 = call i32 @function_10e48(i32 51)
  store i32 52, i32* %r0.global-to-local, align 4
  %v1_8a58 = call i32 @function_10e48(i32 52)
  store i32 %v1_8a58, i32* %r0.global-to-local, align 4
  %v0_8a5c = load i32, i32* @r6, align 4
  %v3_8a5c = icmp ugt i32 %v0_8a5c, 511
  store i1 %v3_8a5c, i1* %cpsr_c.global-to-local, align 1
  %v8_8a5c = icmp eq i32 %v0_8a5c, 512
  store i1 %v8_8a5c, i1* %cpsr_z.global-to-local, align 1
  %v5_8a60 = icmp slt i32 %v0_8a5c, 512
  br i1 %v5_8a60, label %thread-pre-split, label %bb175

bb175:                                            ; preds = %dec_label_pc_8a0c
  store i32 512, i32* @r6, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_8a0c, %bb175
  %v0_8a68 = phi i32 [ 512, %bb175 ], [ %v0_8a5c, %dec_label_pc_8a0c ]
  store i32 53, i32* %r0.global-to-local, align 4
  %v1_8a6c = call i32 @function_10e48(i32 53)
  store i32 %v0_8a68, i32* %r0.global-to-local, align 4
  store i32 3140, i32* %r1.global-to-local, align 4
  %v2_8a7c = call i32 @function_1384c(i32 %v0_8a68, i32 3140)
  store i32 %v2_8a7c, i32* %r0.global-to-local, align 4
  store i32 %v0_8a68, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8a84 = icmp eq i32 %v0_8a68, 0
  store i1 %v2_8a84, i1* %cpsr_z.global-to-local, align 1
  %tmp176 = icmp slt i32 %v0_8a68, 1
  br i1 %tmp176, label %dec_label_pc_8bc8, label %dec_label_pc_8a90

dec_label_pc_8a90:                                ; preds = %thread-pre-split
  store i32 %v2_8a7c, i32* @r5, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v2_8abc = and i32 %arg1, 536870912
  %v3_8abc = icmp ne i32 %v2_8abc, 0
  %v5_8abc = mul i32 %arg1, 24
  %v2_8ac0 = add i32 %v5_8abc, %arg2
  %v1_8ac4 = add i32 %v2_8ac0, 16
  %v2_8ac4 = inttoptr i32 %v1_8ac4 to i32*
  br label %dec_label_pc_8a98

dec_label_pc_8a98:                                ; preds = %dec_label_pc_a510, %dec_label_pc_8a90
  %v1_8aa4 = phi i32 [ %v1_a52c, %dec_label_pc_a510 ], [ %v2_8a7c, %dec_label_pc_8a90 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %v2_8aa4 = inttoptr i32 %v1_8aa4 to i32*
  store i32 -1, i32* %v2_8aa4, align 4
  %v3_8aa8 = load i32, i32* @r5, align 4
  %v4_8aa8 = add i32 %v3_8aa8, 4
  %v5_8aa8 = inttoptr i32 %v4_8aa8 to i8*
  store i8 0, i8* %v5_8aa8, align 1
  %v0_8aac = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8aac, i32* %r0.global-to-local, align 4
  %v5_8ab0 = call i32 @function_1209c(i32 %v0_8aac, i32 %arg1, i32 -1, i32 0)
  store i32 %v5_8ab0, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i1 %v3_8abc, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_8abc, i32* %r3.global-to-local, align 4
  store i32 %v2_8ac0, i32* @r6, align 4
  %v3_8ac4 = load i32, i32* %v2_8ac4, align 4
  store i32 %v3_8ac4, i32* %r2.global-to-local, align 4
  %v0_8ac8 = load i32, i32* @r5, align 4
  %v1_8ac8 = add i32 %v0_8ac8, 532
  store i32 %v1_8ac8, i32* @lr, align 4
  store i32 %v1_8ac8, i32* @r0, align 4
  %v0_8ad0 = load i32, i32* @r8, align 4
  store i32 %v0_8ad0, i32* %r1.global-to-local, align 4
  %v2_8ad4 = add i32 %v0_8ac8, 16
  %v3_8ad4 = inttoptr i32 %v2_8ad4 to i32*
  store i32 %v3_8ac4, i32* %v3_8ad4, align 4
  %v0_8ad8 = load i32, i32* @lr, align 4
  %v2_8adc = inttoptr i32 %v1_8ac8 to i8*
  %v3_8adc = call i32 @function_11894(i8* %v2_8adc, i32 %v0_8ad0)
  store i32 %v3_8adc, i32* %r0.global-to-local, align 4
  %v0_8ae0 = load i32, i32* @r5, align 4
  %v1_8ae0 = add i32 %v0_8ae0, 532
  %v2_8ae0 = inttoptr i32 %v1_8ae0 to i8*
  %v3_8ae0 = load i8, i8* %v2_8ae0, align 1
  %v4_8ae0 = zext i8 %v3_8ae0 to i32
  store i32 %v4_8ae0, i32* %r3.global-to-local, align 4
  %v2_8ae4 = icmp ugt i8 %v3_8ae0, 46
  store i1 %v2_8ae4, i1* %cpsr_c.global-to-local, align 1
  %v7_8ae4 = icmp eq i8 %v3_8ae0, 47
  store i1 %v7_8ae4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8ae4, label %dec_label_pc_8b10, label %dec_label_pc_8aec

dec_label_pc_8aec:                                ; preds = %dec_label_pc_8a98
  store i32 %v0_8ad8, i32* %r0.global-to-local, align 4
  %v1_8af0 = inttoptr i32 %v0_8ad8 to i8*
  %v2_8af0 = call i32 @function_1186c(i8* %v1_8af0)
  store i32 %v2_8af0, i32* @r2, align 4
  %v0_8af8 = load i32, i32* @r5, align 4
  %v1_8afc = add i32 %v0_8af8, 533
  store i32 %v1_8afc, i32* @r0, align 4
  store i32 %v0_8ad8, i32* @r1, align 4
  %v3_8b04 = call i32 @function_129f0(i32 %v1_8afc, i32 %v0_8ad8, i32 %v2_8af0)
  store i32 %v3_8b04, i32* %r0.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_8b0c = load i32, i32* @r5, align 4
  %v3_8b0c = add i32 %v2_8b0c, 532
  %v4_8b0c = inttoptr i32 %v3_8b0c to i8*
  store i8 47, i8* %v4_8b0c, align 1
  %v0_8b14.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8b10

dec_label_pc_8b10:                                ; preds = %dec_label_pc_8a98, %dec_label_pc_8aec
  %v0_8b14 = phi i32 [ %v0_8ae0, %dec_label_pc_8a98 ], [ %v0_8b14.pre, %dec_label_pc_8aec ]
  %v0_8b10 = load i32, i32* @sb, align 4
  store i32 %v0_8b10, i32* %r1.global-to-local, align 4
  %v1_8b14 = add i32 %v0_8b14, 1440
  store i32 %v1_8b14, i32* @r0, align 4
  %v2_8b18 = inttoptr i32 %v1_8b14 to i8*
  %v3_8b18 = call i32 @function_11894(i8* %v2_8b18, i32 %v0_8b10)
  %v0_8b1c = load i32, i32* @r5, align 4
  %v0_8b20 = load i32, i32* @sb, align 4
  store i32 %v0_8b20, i32* %r1.global-to-local, align 4
  %v1_8b24 = add i32 %v0_8b1c, 1431
  store i32 %v1_8b24, i32* @r0, align 4
  %v2_8b28 = inttoptr i32 %v1_8b24 to i8*
  %v3_8b28 = call i32 @function_11894(i8* %v2_8b28, i32 %v0_8b20)
  %v0_8b2c = load i32, i32* @r5, align 4
  %v1_8b30 = add i32 %v0_8b2c, 789
  store i32 %v1_8b30, i32* @r0, align 4
  %v0_8b34 = load i32, i32* @sl, align 4
  store i32 %v0_8b34, i32* %r1.global-to-local, align 4
  %v2_8b38 = inttoptr i32 %v1_8b30 to i8*
  %v3_8b38 = call i32 @function_11894(i8* %v2_8b38, i32 %v0_8b34)
  store i32 %v3_8b38, i32* %r0.global-to-local, align 4
  %v0_8b3c = load i32, i32* @r6, align 4
  %v1_8b3c = add i32 %v0_8b3c, 20
  %v2_8b3c = inttoptr i32 %v1_8b3c to i8*
  %v3_8b3c = load i8, i8* %v2_8b3c, align 1
  %v4_8b3c = zext i8 %v3_8b3c to i32
  store i32 %v4_8b3c, i32* %r3.global-to-local, align 4
  %v2_8b40 = icmp ugt i8 %v3_8b3c, 30
  store i1 %v2_8b40, i1* %cpsr_c.global-to-local, align 1
  %v7_8b40 = icmp eq i8 %v3_8b3c, 31
  store i1 %v7_8b40, i1* %cpsr_z.global-to-local, align 1
  %v2_8b44 = xor i1 %v7_8b40, true
  %v3_8b44 = and i1 %v2_8b40, %v2_8b44
  br i1 %v3_8b44, label %dec_label_pc_8b8c, label %dec_label_pc_8b48

dec_label_pc_8b48:                                ; preds = %dec_label_pc_8b10
  %v1_8b48 = add i32 %v0_8b3c, 16
  %v2_8b48 = inttoptr i32 %v1_8b48 to i32*
  %v3_8b48 = load i32, i32* %v2_8b48, align 4
  store i32 %v3_8b48, i32* @r4, align 4
  %v0_8b4c = call i32 @function_f18c()
  store i32 %v0_8b4c, i32* %r0.global-to-local, align 4
  %v0_8b50 = load i32, i32* @r4, align 4
  %v1_8b50 = and i32 %v0_8b50, 16711680
  store i32 %v1_8b50, i32* %r1.global-to-local, align 4
  %v3_8b54 = udiv i32 %v0_8b50, 16777216
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_8b58 = udiv i32 %v1_8b50, 256
  %v5_8b58 = or i32 %v4_8b58, %v3_8b54
  store i32 %v5_8b58, i32* %r2.global-to-local, align 4
  %v1_8b5c = and i32 %v0_8b50, 65280
  store i32 %v1_8b5c, i32* %r3.global-to-local, align 4
  %v0_8b60 = load i32, i32* @r6, align 4
  %v1_8b60 = add i32 %v0_8b60, 20
  %v2_8b60 = inttoptr i32 %v1_8b60 to i8*
  %v3_8b60 = load i8, i8* %v2_8b60, align 1
  %v4_8b60 = zext i8 %v3_8b60 to i32
  %v5_8b68 = call i32 @llvm.bswap.i32(i32 %v0_8b50)
  %v7_8b6c = lshr i32 %v0_8b4c, %v4_8b60
  %v8_8b6c = add i32 %v7_8b6c, %v5_8b68
  store i32 %v8_8b6c, i32* %r2.global-to-local, align 4
  %v1_8b70 = and i32 %v8_8b6c, 16711680
  store i32 %v1_8b70, i32* %r0.global-to-local, align 4
  %v1_8b7c = and i32 %v8_8b6c, 65280
  store i32 %v1_8b7c, i32* %r1.global-to-local, align 4
  %v2_8b84 = and i32 %v8_8b6c, 256
  %v3_8b84 = icmp ne i32 %v2_8b84, 0
  store i1 %v3_8b84, i1* %cpsr_c.global-to-local, align 1
  %v5_8b84 = call i32 @llvm.bswap.i32(i32 %v8_8b6c)
  store i32 %v5_8b84, i32* %r3.global-to-local, align 4
  %v1_8b88 = load i32, i32* @r5, align 4
  %v2_8b88 = add i32 %v1_8b88, 16
  %v3_8b88 = inttoptr i32 %v2_8b88 to i32*
  store i32 %v5_8b84, i32* %v3_8b88, align 4
  br label %dec_label_pc_8b8c

dec_label_pc_8b8c:                                ; preds = %dec_label_pc_8b10, %dec_label_pc_8b48
  %v0_8b8c = call i32 @function_f18c()
  %v3_8b98 = udiv i32 %v0_8b8c, 5
  store i32 %v3_8b98, i32* %r2.global-to-local, align 4
  store i32 %v3_8b98, i32* %r3.global-to-local, align 4
  %v2_8ba4 = sub i32 %v0_8b8c, %v3_8b98
  store i32 %v2_8ba4, i32* %r0.global-to-local, align 4
  %v7_8ba8 = icmp eq i32 %v2_8ba4, 4
  store i1 %v7_8ba8, i1* %cpsr_z.global-to-local, align 1
  %v5_8bac = and i32 %v2_8ba4, 1073741824
  %v6_8bac = icmp ne i32 %v5_8bac, 0
  store i1 %v6_8bac, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v2_8ba4, label %dec_label_pc_a510 [
    i32 0, label %dec_label_pc_a5d4
    i32 1, label %dec_label_pc_a5a8
    i32 2, label %dec_label_pc_a600
    i32 3, label %dec_label_pc_a4e8
    i32 4, label %dec_label_pc_a568
  ]

dec_label_pc_8bc8:                                ; preds = %thread-pre-split
  %v0_8bd8 = load i32, i32* @r7, align 4
  %v1_8bd8 = and i32 %v0_8bd8, 128
  %v2_8bd8 = icmp ne i32 %v1_8bd8, 0
  store i1 %v2_8bd8, i1* %cpsr_c.global-to-local, align 1
  %v3_8bd8 = udiv i32 %v0_8bd8, 256
  store i32 %v3_8bd8, i32* %r3.global-to-local, align 4
  %v1_8bdc = add i32 %v2_8a7c, 1452
  store i32 %v1_8bdc, i32* %r1.global-to-local, align 4
  %v2_8be0 = ptrtoint i32* %stack_var_-10572 to i32
  store i32 %v2_8be0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_8bf8.preheader

dec_label_pc_8bf8.preheader:                      ; preds = %dec_label_pc_8bc8, %dec_label_pc_a534
  %v0_a544.sink = phi i32 [ %v0_a544, %dec_label_pc_a534 ], [ %v0_8bd8, %dec_label_pc_8bc8 ]
  %stack_var_-20864.0.ph = phi i32 [ %v3_a544, %dec_label_pc_a534 ], [ %v3_8bd8, %dec_label_pc_8bc8 ]
  %stack_var_-20860.0.ph = phi i32 [ %v2_a54c, %dec_label_pc_a534 ], [ %v2_8be0, %dec_label_pc_8bc8 ]
  %stack_var_-20872.0.ph = phi i32 [ %v1_a548, %dec_label_pc_a534 ], [ %v1_8bdc, %dec_label_pc_8bc8 ]
  %v1_a550 = urem i32 %v0_a544.sink, 256
  store i32 %v1_a550, i32* @r7, align 4
  %v2_8d60 = ptrtoint i32* %stack_var_-152 to i32
  %v2_8d78 = ptrtoint i32* %stack_var_-44 to i32
  %v2_8dc0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_8ddc = ptrtoint i32* %stack_var_-40 to i32
  %v1_8fbc = inttoptr i32 %stack_var_-20860.0.ph to i8*
  %v2_9318 = icmp eq i32 %v6_88c8, 0
  %v1_9214 = inttoptr i32 %v6_88c8 to i8*
  %v2_8e44 = ptrtoint i32* %stack_var_-60 to i32
  %v2_8e48 = ptrtoint i32* %stack_var_-204 to i32
  %v2_8e4c = ptrtoint i32* %stack_var_-332 to i32
  %v2_8f2c = ptrtoint i32* %stack_var_-48 to i32
  %v2_8f38 = ptrtoint i32* %stack_var_-52 to i32
  %v4_8d98 = mul nuw nsw i32 %v1_a550, 256
  %v5_8d98 = or i32 %v4_8d98, %stack_var_-20864.0.ph
  br label %dec_label_pc_8bf8

dec_label_pc_8bf8:                                ; preds = %dec_label_pc_8e24, %dec_label_pc_8c58, %dec_label_pc_8e1c, %dec_label_pc_8eb8, %dec_label_pc_8bf8.preheader
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_8bfc = call i32 @function_12150(i32* null)
  store i32 %v2_8bfc, i32* %r0.global-to-local, align 4
  store i32 %v10_89bc, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-204, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_8c28225 = load i32, i32* @sp, align 4
  %v3_8c28226 = add i32 %v2_8c28225, 20688
  %v4_8c28227 = inttoptr i32 %v3_8c28226 to i32*
  store i32 0, i32* %v4_8c28227, align 4
  br label %dec_label_pc_8c14.dec_label_pc_8c14_crit_edge

dec_label_pc_8c14.dec_label_pc_8c14_crit_edge:    ; preds = %dec_label_pc_8bf8, %dec_label_pc_8c14.dec_label_pc_8c14_crit_edge
  %v0_8c14.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_8c18 = add i32 %v0_8c14.pre, 4
  store i32 %v1_8c18, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_8c20 = add i32 %v0_8c14.pre, 20684
  store i32 %v1_8c20, i32* @lr, align 4
  %v7_8c24 = icmp eq i32 %v1_8c18, 128
  %v2_8c28 = load i32, i32* @sp, align 4
  %v3_8c28 = add i32 %v2_8c28, %v1_8c20
  %v4_8c28 = inttoptr i32 %v3_8c28 to i32*
  store i32 0, i32* %v4_8c28, align 4
  br i1 %v7_8c24, label %dec_label_pc_8c30, label %dec_label_pc_8c14.dec_label_pc_8c14_crit_edge

dec_label_pc_8c30:                                ; preds = %dec_label_pc_8c14.dec_label_pc_8c14_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_89bc, i32* %r1.global-to-local, align 4
  %v0_8c34 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_8c34, i32* %stack_var_-332, align 4
  %v0_8c38 = load i32, i32* %r3.global-to-local, align 4
  %v1_8c40228 = add i32 %v0_8c38, -120
  store i32 %v1_8c40228, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_8c48229 = add i32 %v0_8c38, 20432
  store i32 %v1_8c48229, i32* %r2.global-to-local, align 4
  %v7_8c4c230 = icmp eq i32 %v1_8c40228, 128
  %v2_8c50231 = load i32, i32* @sp, align 4
  %v3_8c50232 = add i32 %v2_8c50231, %v1_8c48229
  %v4_8c50233 = inttoptr i32 %v3_8c50232 to i32*
  store i32 0, i32* %v4_8c50233, align 4
  br i1 %v7_8c4c230, label %dec_label_pc_8c58, label %dec_label_pc_8c3c.dec_label_pc_8c3c_crit_edge

dec_label_pc_8c3c.dec_label_pc_8c3c_crit_edge:    ; preds = %dec_label_pc_8c30, %dec_label_pc_8c3c.dec_label_pc_8c3c_crit_edge
  %v0_8c3c.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_8c40 = add i32 %v0_8c3c.pre, 4
  store i32 %v1_8c40, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_8c48 = add i32 %v0_8c3c.pre, 20556
  store i32 %v1_8c48, i32* %r2.global-to-local, align 4
  %v7_8c4c = icmp eq i32 %v1_8c40, 128
  %v2_8c50 = load i32, i32* @sp, align 4
  %v3_8c50 = add i32 %v2_8c50, %v1_8c48
  %v4_8c50 = inttoptr i32 %v3_8c50 to i32*
  store i32 0, i32* %v4_8c50, align 4
  br i1 %v7_8c4c, label %dec_label_pc_8c58, label %dec_label_pc_8c3c.dec_label_pc_8c3c_crit_edge

dec_label_pc_8c58:                                ; preds = %dec_label_pc_8c3c.dec_label_pc_8c3c_crit_edge, %dec_label_pc_8c30
  store i32 %v0_8a68, i32* %r3.global-to-local, align 4
  %v1_8c5c = load i32, i32* %r0.global-to-local, align 4
  %v3_8c5c = icmp uge i32 %v0_8a68, %v1_8c5c
  store i1 %v3_8c5c, i1* %cpsr_c.global-to-local, align 1
  %v9_8c5c = icmp eq i32 %v0_8a68, %v1_8c5c
  store i1 %v9_8c5c, i1* %cpsr_z.global-to-local, align 1
  %v7_8c60 = icmp sgt i32 %v0_8a68, %v1_8c5c
  br i1 %v7_8c60, label %dec_label_pc_8c64, label %dec_label_pc_8bf8

dec_label_pc_8c64:                                ; preds = %dec_label_pc_8c58
  store i32 %stack_var_-20872.0.ph, i32* @sl, align 4
  store i32 %v1_8c5c, i32* @r8, align 4
  store i32 %stack_var_-20872.0.ph, i32* @r6, align 4
  store i32 %v1_8c5c, i32* @r7, align 4
  br label %dec_label_pc_8cd8

dec_label_pc_8c78:                                ; preds = %dec_label_pc_8cec
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_8c78 = icmp eq i8 %v3_8cd8, 2
  store i1 %v7_8c78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8c78, label %dec_label_pc_93b8, label %dec_label_pc_8c80

dec_label_pc_8c80:                                ; preds = %dec_label_pc_8c78
  %v2_8c80 = icmp ugt i8 %v3_8cd8, 3
  store i1 %v2_8c80, i1* %cpsr_c.global-to-local, align 1
  %v7_8c80 = icmp eq i8 %v3_8cd8, 4
  store i1 %v7_8c80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8c80, label %dec_label_pc_8f88, label %dec_label_pc_8c88

dec_label_pc_8c88:                                ; preds = %dec_label_pc_8c80
  %v1_8c88 = add nsw i32 %v4_8cd8, -6
  %v2_8c88 = icmp ugt i8 %v3_8cd8, 5
  store i1 %v2_8c88, i1* %cpsr_c.global-to-local, align 1
  %v7_8c88 = icmp eq i8 %v3_8cd8, 6
  store i1 %v7_8c88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8c88, label %dec_label_pc_93e8, label %dec_label_pc_8c90

dec_label_pc_8c90:                                ; preds = %dec_label_pc_8c88
  %v2_8c90 = icmp ugt i8 %v3_8cd8, 6
  store i1 %v2_8c90, i1* %cpsr_c.global-to-local, align 1
  %v7_8c90 = icmp eq i8 %v3_8cd8, 7
  store i1 %v7_8c90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8c90, label %dec_label_pc_9624, label %dec_label_pc_8c98

dec_label_pc_8c98:                                ; preds = %dec_label_pc_8c90
  %v2_8c98 = icmp ugt i8 %v3_8cd8, 9
  store i1 %v2_8c98, i1* %cpsr_c.global-to-local, align 1
  %v7_8c98 = icmp eq i8 %v3_8cd8, 10
  store i1 %v7_8c98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8c98, label %dec_label_pc_9678, label %dec_label_pc_8ca0

dec_label_pc_8ca0:                                ; preds = %dec_label_pc_8c98
  %v1_8ca0 = add nsw i32 %v4_8cd8, -11
  %v2_8ca0 = icmp ugt i8 %v3_8cd8, 10
  store i1 %v2_8ca0, i1* %cpsr_c.global-to-local, align 1
  %v7_8ca0 = icmp eq i8 %v3_8cd8, 11
  store i1 %v7_8ca0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8ca0, label %dec_label_pc_9c38, label %dec_label_pc_8ca8

dec_label_pc_8ca8:                                ; preds = %dec_label_pc_93b8, %dec_label_pc_8ca0
  store i32 0, i32* %r3.global-to-local, align 4
  store i8 0, i8* %v2_8cd8, align 1
  %v0_8cb0 = load i32, i32* @r6, align 4
  %v1_8cb0 = add i32 %v0_8cb0, -1452
  %v2_8cb0 = inttoptr i32 %v1_8cb0 to i32*
  %v3_8cb0 = load i32, i32* %v2_8cb0, align 4
  store i32 %v3_8cb0, i32* %r0.global-to-local, align 4
  %v1_8cb4 = call i32 @function_124d0(i32 %v3_8cb0)
  store i32 %v1_8cb4, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_8cbc = load i32, i32* @r6, align 4
  %v2_8cbc = add i32 %v1_8cbc, -1452
  %v3_8cbc = inttoptr i32 %v2_8cbc to i32*
  store i32 -1, i32* %v3_8cbc, align 4
  br label %dec_label_pc_8cc0

dec_label_pc_8cc0:                                ; preds = %dec_label_pc_9678, %dec_label_pc_9624, %dec_label_pc_93e8, %dec_label_pc_8de4, %dec_label_pc_8cf4, %dec_label_pc_9c38, %bb180, %dec_label_pc_8ca8
  store i32 %v0_8a68, i32* %r2.global-to-local, align 4
  %v0_8cc4 = load i32, i32* @r7, align 4
  %v1_8cc4 = add i32 %v0_8cc4, 1
  store i32 %v1_8cc4, i32* @r7, align 4
  %v0_8cc8 = load i32, i32* @r6, align 4
  %v3_8ccc = icmp uge i32 %v1_8cc4, %v0_8a68
  store i1 %v3_8ccc, i1* %cpsr_c.global-to-local, align 1
  %v9_8ccc = icmp eq i32 %v1_8cc4, %v0_8a68
  store i1 %v9_8ccc, i1* %cpsr_z.global-to-local, align 1
  %v1_8cd0 = add i32 %v0_8cc8, 3140
  store i32 %v1_8cd0, i32* @r6, align 4
  br i1 %v9_8ccc, label %dec_label_pc_8cc0.dec_label_pc_8e1c_crit_edge, label %dec_label_pc_8cd8

dec_label_pc_8cc0.dec_label_pc_8e1c_crit_edge:    ; preds = %dec_label_pc_8cc0
  %v0_8e1c.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_8e1c

dec_label_pc_8cd8:                                ; preds = %dec_label_pc_8e04, %dec_label_pc_8cc0, %dec_label_pc_8c64
  %v3_8f7c = phi i32 [ %stack_var_-20872.0.ph, %dec_label_pc_8c64 ], [ %v1_8cd0, %dec_label_pc_8cc0 ], [ %v1_8e14, %dec_label_pc_8e04 ]
  %v1_8cd8 = add i32 %v3_8f7c, -1448
  %v2_8cd8 = inttoptr i32 %v1_8cd8 to i8*
  %v3_8cd8 = load i8, i8* %v2_8cd8, align 1
  %v4_8cd8 = zext i8 %v3_8cd8 to i32
  store i32 %v4_8cd8, i32* @r3, align 4
  %v2_8ce0 = icmp ne i8 %v3_8cd8, 0
  store i1 %v2_8ce0, i1* %cpsr_c.global-to-local, align 1
  %v6_8ce0 = icmp eq i8 %v3_8cd8, 0
  %v7_8ce0 = icmp eq i8 %v3_8cd8, 1
  store i1 %v7_8ce0, i1* %cpsr_z.global-to-local, align 1
  %v1_8ce4 = add i32 %v3_8f7c, -1452
  store i32 %v1_8ce4, i32* @r5, align 4
  br i1 %v7_8ce0, label %dec_label_pc_8f70, label %dec_label_pc_8cec

dec_label_pc_8cec:                                ; preds = %dec_label_pc_8cd8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v6_8ce0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v6_8ce0, label %dec_label_pc_8cf4, label %dec_label_pc_8c78

dec_label_pc_8cf4:                                ; preds = %.thread19.dec_label_pc_8cf4_crit_edge, %dec_label_pc_8cec
  %v0_8cf4 = phi i32 [ %v0_8cf4.pre, %.thread19.dec_label_pc_8cf4_crit_edge ], [ %v3_8f7c, %dec_label_pc_8cec ]
  %v1_8cf4 = add i32 %v0_8cf4, -1452
  %v2_8cf4 = inttoptr i32 %v1_8cf4 to i32*
  %v3_8cf4 = load i32, i32* %v2_8cf4, align 4
  store i32 %v3_8cf4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 %v10_89bc, i32* %ip.global-to-local, align 4
  %v2_8d00 = icmp eq i32 %v3_8cf4, -1
  store i1 %v2_8d00, i1* %cpsr_c.global-to-local, align 1
  %v7_8d00 = icmp eq i32 %v3_8cf4, -1
  store i1 %v7_8d00, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-76, align 4
  store i32 36120, i32* @lr, align 4
  %v1_8d14 = xor i1 %v7_8d00, true
  call void @__pseudo_cond_branch(i1 %v1_8d14, i32 ptrtoint (i32* @global_var_124d0.48 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_8d20 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8d20, i32* %r2.global-to-local, align 4
  %v3_8d24 = call i32 @function_12ce4(i32 2, i32 1, i32 %v0_8d20)
  store i32 %v3_8d24, i32* %r0.global-to-local, align 4
  %v2_8d28 = icmp eq i32 %v3_8d24, -1
  store i1 %v2_8d28, i1* %cpsr_c.global-to-local, align 1
  %v7_8d28 = icmp eq i32 %v3_8d24, -1
  store i1 %v7_8d28, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8d24, i32* @r4, align 4
  %v1_8d30 = load i32, i32* @r6, align 4
  %v2_8d30 = add i32 %v1_8d30, -1452
  %v3_8d30 = inttoptr i32 %v2_8d30 to i32*
  store i32 %v3_8d24, i32* %v3_8d30, align 4
  br i1 %v7_8d28, label %dec_label_pc_8cc0, label %dec_label_pc_8d38

dec_label_pc_8d38:                                ; preds = %dec_label_pc_8cf4
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_8d3c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8d3c, i32* %r2.global-to-local, align 4
  %v2_8d40 = call i32 @function_12304(i32 %v3_8d24, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_8d48 = or i32 %v2_8d40, 2048
  store i32 %v1_8d48, i32* %r2.global-to-local, align 4
  %v0_8d4c = load i32, i32* @r4, align 4
  store i32 %v0_8d4c, i32* %r0.global-to-local, align 4
  %v2_8d50 = call i32 @function_12304(i32 %v0_8d4c, i32 4)
  store i32 %v2_8d50, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %ip.global-to-local, align 4
  store i32 %v2_8d60, i32* %r3.global-to-local, align 4
  %v0_8d64 = load i32, i32* @r6, align 4
  %v1_8d64 = add i32 %v0_8d64, -1452
  %v2_8d64 = inttoptr i32 %v1_8d64 to i32*
  %v3_8d64 = load i32, i32* %v2_8d64, align 4
  store i32 %v3_8d64, i32* %r0.global-to-local, align 4
  %v0_8d68 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8d68, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %stack_var_-44, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_8d78, i32* %r3.global-to-local, align 4
  %v5_8d80 = call i32 @function_12ca0(i32 %v3_8d64, i32 %v0_8d68, i32 8, i32 %v2_8d78, i32 4)
  store i32 %v5_8d80, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-20864.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v1_a550, i32* %r2.global-to-local, align 4
  %v0_8d8c = load i32, i32* @r6, align 4
  %v1_8d8c = add i32 %v0_8d8c, -1436
  %v2_8d8c = inttoptr i32 %v1_8d8c to i32*
  %v3_8d8c = load i32, i32* %v2_8d8c, align 4
  store i32 %v3_8d8c, i32* @r4, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_8d98, i32* %r3.global-to-local, align 4
  %v1_8d9c = add i32 %v0_8d8c, -1452
  %v2_8d9c = inttoptr i32 %v1_8d9c to i32*
  %v3_8d9c = load i32, i32* %v2_8d9c, align 4
  store i32 %v3_8d9c, i32* %r0.global-to-local, align 4
  %v3_8dac = add i32 %v0_8d8c, -1448
  %v4_8dac = inttoptr i32 %v3_8dac to i8*
  store i8 2, i8* %v4_8dac, align 1
  store i32 %v2_8bfc, i32* %r3.global-to-local, align 4
  %v0_8db8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_8db8, i32* %stack_var_-76, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 %v2_8dc0, i32* %r1.global-to-local, align 4
  %v1_8dc4 = load i32, i32* @r6, align 4
  %v2_8dc4 = add i32 %v1_8dc4, -1444
  %v3_8dc4 = inttoptr i32 %v2_8dc4 to i32*
  store i32 %v2_8bfc, i32* %v3_8dc4, align 4
  %v3_8dc8 = call i32 @function_12acc(i32 %v3_8d9c, i32 %v2_8dc0, i32 16)
  store i32 %v3_8dc8, i32* %r0.global-to-local, align 4
  %v0_8dcc = load i32, i32* @r6, align 4
  %v1_8dcc = add i32 %v0_8dcc, -1452
  %v2_8dcc = inttoptr i32 %v1_8dcc to i32*
  %v3_8dcc = load i32, i32* %v2_8dcc, align 4
  store i32 %v3_8dcc, i32* %ip.global-to-local, align 4
  %v3_8dd4 = udiv i32 %v3_8dcc, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8dd8 = mul nuw nsw i32 %v3_8dd4, 4
  store i32 %v3_8dd8, i32* %r2.global-to-local, align 4
  store i32 %v2_8ddc, i32* @lr, align 4
  br label %dec_label_pc_8de4

dec_label_pc_8de4:                                ; preds = %dec_label_pc_93cc, %dec_label_pc_8d38
  %v0_8df4 = phi i32 [ %v3_8dcc, %dec_label_pc_8d38 ], [ %v3_93cc, %dec_label_pc_93cc ]
  %v3_8dd8.pn = phi i32 [ %v3_8dd8, %dec_label_pc_8d38 ], [ %v3_93d8, %dec_label_pc_93cc ]
  %storemerge = add i32 %v3_8dd8.pn, %v2_8ddc
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_8de4 = add i32 %storemerge, -292
  %v2_8de4 = inttoptr i32 %v1_8de4 to i32*
  %v3_8de4 = load i32, i32* %v2_8de4, align 4
  %v1_8de8 = urem i32 %v0_8df4, 32
  store i32 %v1_8de8, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v7_8df0 = shl i32 1, %v1_8de8
  %v8_8df0 = or i32 %v3_8de4, %v7_8df0
  store i32 %v8_8df0, i32* %r1.global-to-local, align 4
  %v1_8df4 = load i32, i32* @r8, align 4
  %v2_8df4 = sub i32 %v0_8df4, %v1_8df4
  %v3_8df4 = icmp uge i32 %v0_8df4, %v1_8df4
  store i1 %v3_8df4, i1* %cpsr_c.global-to-local, align 1
  %v4_8df4 = xor i32 %v1_8df4, %v0_8df4
  %v5_8df4 = xor i32 %v2_8df4, %v0_8df4
  %v6_8df4 = and i32 %v5_8df4, %v4_8df4
  %v7_8df4 = icmp slt i32 %v6_8df4, 0
  %v8_8df4 = icmp slt i32 %v2_8df4, 0
  %v9_8df4 = icmp eq i32 %v0_8df4, %v1_8df4
  store i1 %v9_8df4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8df0, i32* %v2_8de4, align 4
  %v3_8dfc = xor i1 %v8_8df4, %v7_8df4
  %v4_8dfc = or i1 %v9_8df4, %v3_8dfc
  br i1 %v4_8dfc, label %dec_label_pc_8cc0, label %dec_label_pc_8e00

dec_label_pc_8e00:                                ; preds = %dec_label_pc_8de4
  %v0_8e00 = load i32, i32* %ip.global-to-local, align 4
  %v1_8e00 = load i32, i32* %r3.global-to-local, align 4
  %v2_8e00 = add i32 %v1_8e00, %v0_8e00
  store i32 %v2_8e00, i32* @r8, align 4
  br label %dec_label_pc_8e04

dec_label_pc_8e04:                                ; preds = %dec_label_pc_96ac, %dec_label_pc_9658, %dec_label_pc_941c, %dec_label_pc_8e00
  %v0_8e1c65 = phi i32 [ %v2_96ac, %dec_label_pc_96ac ], [ %v2_9658, %dec_label_pc_9658 ], [ %v2_941c, %dec_label_pc_941c ], [ %v2_8e00, %dec_label_pc_8e00 ]
  store i32 %v0_8a68, i32* %r2.global-to-local, align 4
  %v0_8e08 = load i32, i32* @r7, align 4
  %v1_8e08 = add i32 %v0_8e08, 1
  store i32 %v1_8e08, i32* @r7, align 4
  %v0_8e0c = load i32, i32* @r6, align 4
  %v3_8e10 = icmp uge i32 %v1_8e08, %v0_8a68
  store i1 %v3_8e10, i1* %cpsr_c.global-to-local, align 1
  %v9_8e10 = icmp eq i32 %v1_8e08, %v0_8a68
  store i1 %v9_8e10, i1* %cpsr_z.global-to-local, align 1
  %v1_8e14 = add i32 %v0_8e0c, 3140
  store i32 %v1_8e14, i32* @r6, align 4
  br i1 %v9_8e10, label %dec_label_pc_8e1c, label %dec_label_pc_8cd8

dec_label_pc_8e1c:                                ; preds = %dec_label_pc_8e04, %dec_label_pc_8cc0.dec_label_pc_8e1c_crit_edge
  %v0_8e54 = phi i32 [ %v0_8e1c.pre, %dec_label_pc_8cc0.dec_label_pc_8e1c_crit_edge ], [ %v0_8e1c65, %dec_label_pc_8e04 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8e1c = icmp eq i32 %v0_8e54, 0
  store i1 %v2_8e1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8e1c, label %dec_label_pc_8bf8, label %dec_label_pc_8e24

dec_label_pc_8e24:                                ; preds = %dec_label_pc_8e1c
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %stack_var_-60, align 4
  store i32 %v2_8e44, i32* %ip.global-to-local, align 4
  store i32 %v2_8e48, i32* %r1.global-to-local, align 4
  store i32 %v2_8e4c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v0_8e54, i32* %r0.global-to-local, align 4
  %v5_8e5c = call i32 @function_121f4(i32 %v0_8e54, i32 %v2_8e48, i32 %v2_8e4c, i32 0, i32 %v2_8e44)
  store i32 %v5_8e5c, i32* @r4, align 4
  %v0_8e64 = load i32, i32* @r5, align 4
  store i32 %v0_8e64, i32* %r0.global-to-local, align 4
  %v1_8e68 = inttoptr i32 %v0_8e64 to i32*
  %v2_8e68 = call i32 @function_12150(i32* %v1_8e68)
  store i32 %v2_8e68, i32* %r0.global-to-local, align 4
  %v0_8e6c = load i32, i32* @r4, align 4
  %v1_8e6c = load i32, i32* @r5, align 4
  %v3_8e6c = icmp uge i32 %v0_8e6c, %v1_8e6c
  store i1 %v3_8e6c, i1* %cpsr_c.global-to-local, align 1
  %v9_8e6c = icmp eq i32 %v0_8e6c, %v1_8e6c
  store i1 %v9_8e6c, i1* %cpsr_z.global-to-local, align 1
  %v7_8e74 = icmp sgt i32 %v0_8e6c, %v1_8e6c
  br i1 %v7_8e74, label %dec_label_pc_8e78, label %dec_label_pc_8bf8

dec_label_pc_8e78:                                ; preds = %dec_label_pc_8e24
  %v0_8ed8.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_8ed8

dec_label_pc_8e80:                                ; preds = %dec_label_pc_8eec, %dec_label_pc_8f58
  %v1_8e90 = phi i32 [ %v1_8f04, %dec_label_pc_8eec ], [ %v1_8e90.pre, %dec_label_pc_8f58 ]
  %v0_8e88 = phi i32 [ %v3_8ef4, %dec_label_pc_8eec ], [ %v0_8e88.pre, %dec_label_pc_8f58 ]
  store i32 %v2_8ddc, i32* %r3.global-to-local, align 4
  %v2_8e88 = add i32 %v0_8e88, %v2_8ddc
  store i32 %v2_8e88, i32* %r2.global-to-local, align 4
  %v1_8e8c = add i32 %v2_8e88, -164
  %v2_8e8c = inttoptr i32 %v1_8e8c to i32*
  %v3_8e8c = load i32, i32* %v2_8e8c, align 4
  %v2_8e90 = add i32 %v1_8e90, -1
  %v3_8e90 = shl i32 1, %v2_8e90
  %v4_8e90 = and i32 %v3_8e8c, %v3_8e90
  %v5_8e90 = icmp ne i32 %v4_8e90, 0
  store i1 %v5_8e90, i1* %cpsr_c.global-to-local, align 1
  %v6_8e90 = lshr i32 %v3_8e8c, %v1_8e90
  store i32 %v6_8e90, i32* %r3.global-to-local, align 4
  %v1_8e94 = urem i32 %v6_8e90, 2
  %v2_8e94 = icmp eq i32 %v1_8e94, 0
  store i1 %v2_8e94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8e94, label %dec_label_pc_8eb8, label %dec_label_pc_8e9c

dec_label_pc_8e9c:                                ; preds = %dec_label_pc_8e80
  %v0_8e9c = load i32, i32* @sl, align 4
  %v1_8e9c = add i32 %v0_8e9c, -1448
  %v2_8e9c = inttoptr i32 %v1_8e9c to i8*
  %v3_8e9c = load i8, i8* %v2_8e9c, align 1
  %v4_8e9c = zext i8 %v3_8e9c to i32
  store i32 %v4_8e9c, i32* %r3.global-to-local, align 4
  %v2_8ea0 = icmp ugt i8 %v3_8e9c, 5
  store i1 %v2_8ea0, i1* %cpsr_c.global-to-local, align 1
  %v7_8ea0 = icmp eq i8 %v3_8e9c, 6
  store i1 %v7_8ea0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8ea0, label %dec_label_pc_96f4, label %dec_label_pc_8ea8

dec_label_pc_8ea8:                                ; preds = %dec_label_pc_8e9c
  %v2_8ea8 = icmp ugt i8 %v3_8e9c, 6
  store i1 %v2_8ea8, i1* %cpsr_c.global-to-local, align 1
  %v7_8ea8 = icmp eq i8 %v3_8e9c, 7
  store i1 %v7_8ea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8ea8, label %dec_label_pc_9424, label %dec_label_pc_8eb0

dec_label_pc_8eb0:                                ; preds = %dec_label_pc_8ea8
  %v2_8eb0 = icmp ugt i8 %v3_8e9c, 9
  store i1 %v2_8eb0, i1* %cpsr_c.global-to-local, align 1
  %v7_8eb0 = icmp eq i8 %v3_8e9c, 10
  store i1 %v7_8eb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8eb0, label %dec_label_pc_9d2c, label %dec_label_pc_8eb8

dec_label_pc_8eb8:                                ; preds = %dec_label_pc_9524, %dec_label_pc_9dbc, %dec_label_pc_9d6c, %dec_label_pc_9744, %dec_label_pc_8eb0, %dec_label_pc_8e80, %dec_label_pc_8ed8, %dec_label_pc_a20c, %dec_label_pc_a0b8, %dec_label_pc_a040, %dec_label_pc_9fe4, %dec_label_pc_9dc8, %dec_label_pc_9d98, %dec_label_pc_9d7c, %dec_label_pc_9d20, %dec_label_pc_9c1c, %dec_label_pc_9660
  store i32 %v0_8a68, i32* %r3.global-to-local, align 4
  %v1_8ec0 = add i32 %stack_var_-20820.0, 1
  store i32 %v1_8ec0, i32* %r2.global-to-local, align 4
  %v0_8ec4 = load i32, i32* @sl, align 4
  %v3_8ec8 = icmp uge i32 %v1_8ec0, %v0_8a68
  store i1 %v3_8ec8, i1* %cpsr_c.global-to-local, align 1
  %v9_8ec8 = icmp eq i32 %v1_8ec0, %v0_8a68
  store i1 %v9_8ec8, i1* %cpsr_z.global-to-local, align 1
  %v1_8ed0 = add i32 %v0_8ec4, 3140
  store i32 %v1_8ed0, i32* @sl, align 4
  br i1 %v9_8ec8, label %dec_label_pc_8bf8, label %dec_label_pc_8ed8

dec_label_pc_8ed8:                                ; preds = %dec_label_pc_8eb8, %dec_label_pc_8e78
  %v0_8ed8 = phi i32 [ %v0_8ed8.pre, %dec_label_pc_8e78 ], [ %v1_8ed0, %dec_label_pc_8eb8 ]
  %stack_var_-20820.0 = phi i32 [ %v1_8e6c, %dec_label_pc_8e78 ], [ %v1_8ec0, %dec_label_pc_8eb8 ]
  %v1_8ed8 = add i32 %v0_8ed8, -1452
  %v2_8ed8 = inttoptr i32 %v1_8ed8 to i32*
  %v3_8ed8 = load i32, i32* %v2_8ed8, align 4
  store i32 %v3_8ed8, i32* %r0.global-to-local, align 4
  %v2_8ee0 = icmp eq i32 %v3_8ed8, -1
  store i1 %v2_8ee0, i1* %cpsr_c.global-to-local, align 1
  %v7_8ee0 = icmp eq i32 %v3_8ed8, -1
  store i1 %v7_8ee0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8ed8, i32* %sb.global-to-local, align 4
  br i1 %v7_8ee0, label %dec_label_pc_8eb8, label %dec_label_pc_8eec

dec_label_pc_8eec:                                ; preds = %dec_label_pc_8ed8
  %v3_8eec = udiv i32 %v3_8ed8, 32
  %v3_8ef4 = mul nuw nsw i32 %v3_8eec, 4
  store i32 %v3_8ef4, i32* @ip, align 4
  store i32 %v2_8ddc, i32* @lr, align 4
  %v2_8efc = add i32 %v3_8ef4, %v2_8ddc
  store i32 %v2_8efc, i32* %r2.global-to-local, align 4
  %v1_8f00 = add i32 %v2_8efc, -292
  %v2_8f00 = inttoptr i32 %v1_8f00 to i32*
  %v3_8f00 = load i32, i32* %v2_8f00, align 4
  %v1_8f04 = urem i32 %v3_8ed8, 32
  store i32 %v1_8f04, i32* %r1.global-to-local, align 4
  %v2_8f08 = add nsw i32 %v1_8f04, -1
  %v3_8f08 = shl i32 1, %v2_8f08
  %v4_8f08 = and i32 %v3_8f00, %v3_8f08
  %v5_8f08 = icmp ne i32 %v4_8f08, 0
  store i1 %v5_8f08, i1* %cpsr_c.global-to-local, align 1
  %v6_8f08 = lshr i32 %v3_8f00, %v1_8f04
  store i32 %v6_8f08, i32* %r3.global-to-local, align 4
  %v1_8f0c = urem i32 %v6_8f08, 2
  %v2_8f0c = icmp eq i32 %v1_8f0c, 0
  store i1 %v2_8f0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f0c, label %dec_label_pc_8e80, label %dec_label_pc_8f14

dec_label_pc_8f14:                                ; preds = %dec_label_pc_8eec
  store i32 %v10_89bc, i32* %ip.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_8f2c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 4, i32* %stack_var_-52, align 4
  store i32 %v2_8f38, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_8f44 = call i32 @function_12b3c(i32 %v3_8ed8, i32 1, i32 4, i32 %v2_8f2c, i32 %v2_8f38)
  store i32 %v10_89bc, i32* %r1.global-to-local, align 4
  %v3_8f4c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_8f4c, i32* %r3.global-to-local, align 4
  %v2_8f50 = or i32 %v3_8f4c, %v5_8f44
  store i32 %v2_8f50, i32* %r0.global-to-local, align 4
  %v4_8f50 = icmp eq i32 %v2_8f50, 0
  store i1 %v4_8f50, i1* %cpsr_z.global-to-local, align 1
  %v0_8f58 = load i32, i32* @sl, align 4
  %v1_8f58 = add i32 %v0_8f58, -1452
  %v2_8f58 = inttoptr i32 %v1_8f58 to i32*
  %v3_8f58 = load i32, i32* %v2_8f58, align 4
  br i1 %v4_8f50, label %dec_label_pc_8f58, label %dec_label_pc_9660

dec_label_pc_8f58:                                ; preds = %dec_label_pc_8f14
  store i32 %v3_8f58, i32* %r3.global-to-local, align 4
  %v3_8f5c = udiv i32 %v3_8f58, 32
  store i32 %v3_8f5c, i32* %r2.global-to-local, align 4
  %v1_8f60 = urem i32 %v3_8f58, 32
  store i32 %v1_8f60, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8f64 = mul nuw nsw i32 %v3_8f5c, 4
  store i32 %v3_8f64, i32* @ip, align 4
  %v0_8f68 = load i32, i32* @r4, align 4
  %v1_8f68 = trunc i32 %v0_8f68 to i8
  %v3_8f68 = add i32 %v0_8f58, -1448
  %v4_8f68 = inttoptr i32 %v3_8f68 to i8*
  store i8 %v1_8f68, i8* %v4_8f68, align 1
  %v0_8e88.pre = load i32, i32* @ip, align 4
  %v1_8e90.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_8e80

dec_label_pc_8f70:                                ; preds = %dec_label_pc_8cd8
  %v1_8f70 = add i32 %v3_8f7c, 4
  %v2_8f70 = inttoptr i32 %v1_8f70 to i32*
  %v3_8f70 = load i32, i32* %v2_8f70, align 4
  store i32 %v3_8f70, i32* @r3, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_8f74 = icmp eq i32 %v3_8f70, 0
  store i1 %v2_8f74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f74, label %.thread19, label %.thread17

.thread17:                                        ; preds = %dec_label_pc_8f70
  store i32 4, i32* @r3, align 4
  store i8 4, i8* %v2_8cd8, align 1
  %v0_8f80.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8f80.pr.pr, label %.thread17..thread19_crit_edge, label %dec_label_pc_8f88

.thread17..thread19_crit_edge:                    ; preds = %.thread17
  %v1_8f80.pre = load i32, i32* @r3, align 4
  %v3_8f80.pre = load i32, i32* @r6, align 4
  %extract.t = trunc i32 %v1_8f80.pre to i8
  br label %.thread19

.thread19:                                        ; preds = %.thread17..thread19_crit_edge, %dec_label_pc_8f70
  %v3_8f80 = phi i32 [ %v3_8f80.pre, %.thread17..thread19_crit_edge ], [ %v3_8f7c, %dec_label_pc_8f70 ]
  %v1_8f80.off0 = phi i8 [ %extract.t, %.thread17..thread19_crit_edge ], [ 0, %dec_label_pc_8f70 ]
  %v4_8f80 = add i32 %v3_8f80, -1448
  %v5_8f80 = inttoptr i32 %v4_8f80 to i8*
  store i8 %v1_8f80.off0, i8* %v5_8f80, align 1
  %v0_8f84.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8f84.pr, label %.thread19.dec_label_pc_8cf4_crit_edge, label %dec_label_pc_8f88

.thread19.dec_label_pc_8cf4_crit_edge:            ; preds = %.thread19
  %v0_8cf4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8cf4

dec_label_pc_8f88:                                ; preds = %.thread17, %.thread19, %dec_label_pc_8c80
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  %v0_8f90 = load i32, i32* @r5, align 4
  %v1_8f90 = add i32 %v0_8f90, 2112
  store i32 %v1_8f90, i32* %r0.global-to-local, align 4
  %v1_8f94 = load i32, i32* @r6, align 4
  %v2_8f94 = add i32 %v1_8f94, 12
  %v3_8f94 = inttoptr i32 %v2_8f94 to i32*
  store i32 -1, i32* %v3_8f94, align 4
  %v0_8f98 = load i32, i32* %r0.global-to-local, align 4
  %v1_8f98 = add i32 %v0_8f98, 4
  store i32 %v1_8f98, i32* %r0.global-to-local, align 4
  store i32 1024, i32* %r1.global-to-local, align 4
  %v0_8fa0 = load i32, i32* %sb.global-to-local, align 4
  %v1_8fa0 = load i32, i32* @r6, align 4
  %v2_8fa0 = inttoptr i32 %v1_8fa0 to i32*
  store i32 %v0_8fa0, i32* %v2_8fa0, align 4
  %v2_8fa4 = call i32 @function_11900(i32 %v1_8f98, i32 1024)
  store i32 10240, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v0_8fb0 = load i32, i32* %sb.global-to-local, align 4
  %v1_8fb0 = load i32, i32* @r6, align 4
  %v2_8fb0 = add i32 %v1_8fb0, 660
  %v3_8fb0 = inttoptr i32 %v2_8fb0 to i32*
  store i32 %v0_8fb0, i32* %v3_8fb0, align 4
  %v2_8fb4 = call i32 @function_11900(i32 %stack_var_-20860.0.ph, i32 10240)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8fbc = call i32 @function_1186c(i8* %v1_8fbc)
  %v0_8fc0 = load i32, i32* @r5, align 4
  store i32 %stack_var_-20860.0.ph, i32* %ip.global-to-local, align 4
  %v1_8fc8 = add i32 %v0_8fc0, 1431
  store i32 %v1_8fc8, i32* %fp.global-to-local, align 4
  %v2_8fcc = add i32 %v2_8fbc, %stack_var_-20860.0.ph
  store i32 %v2_8fcc, i32* @r0, align 4
  store i32 %v1_8fc8, i32* %r1.global-to-local, align 4
  %v2_8fd4 = inttoptr i32 %v2_8fcc to i8*
  %v3_8fd4 = call i32 @function_11894(i8* %v2_8fd4, i32 %v1_8fc8)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8fdc = call i32 @function_1186c(i8* %v1_8fbc)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_176a4.50 to i32), i32* %r1.global-to-local, align 4
  %v2_8fe8 = add i32 %v2_8fdc, %stack_var_-20860.0.ph
  store i32 %v2_8fe8, i32* @r0, align 4
  %v2_8fec = inttoptr i32 %v2_8fe8 to i8*
  %v3_8fec = call i32 @function_11894(i8* %v2_8fec, i32 ptrtoint (i32* @global_var_176a4.50 to i32))
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_8ff4 = call i32 @function_1186c(i8* %v1_8fbc)
  %v2_8ffc = add i32 %v2_8ff4, %stack_var_-20860.0.ph
  store i32 %v2_8ffc, i32* @r0, align 4
  %v0_9000 = load i32, i32* @r5, align 4
  %v1_9000 = add i32 %v0_9000, 532
  store i32 %v1_9000, i32* %r1.global-to-local, align 4
  %v2_9004 = inttoptr i32 %v2_8ffc to i8*
  %v3_9004 = call i32 @function_11894(i8* %v2_9004, i32 %v1_9000)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_900c = call i32 @function_1186c(i8* %v1_8fbc)
  store i32 %stack_var_-20860.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_1767c.52 to i32), i32* %r1.global-to-local, align 4
  %v2_9018 = add i32 %v2_900c, %stack_var_-20860.0.ph
  store i32 %v2_9018, i32* @r0, align 4
  %v3_901c = inttoptr i32 %v2_9018 to i8*
  %v4_901c = call i32 @function_11894(i8* %v3_901c, i32 ptrtoint ([24 x i8]* @global_var_1767c.52 to i32))
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_9024 = call i32 @function_1186c(i8* %v1_8fbc)
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  %v0_902c = load i32, i32* @r5, align 4
  %v1_902c = add i32 %v0_902c, 20
  store i32 %v1_902c, i32* %r1.global-to-local, align 4
  %v2_9030 = add i32 %v2_9024, %stack_var_-20860.0.ph
  store i32 %v2_9030, i32* @r0, align 4
  %v2_9034 = inttoptr i32 %v2_9030 to i8*
  %v3_9034 = call i32 @function_11894(i8* %v2_9034, i32 %v1_902c)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_903c = call i32 @function_1186c(i8* %v1_8fbc)
  store i32 %stack_var_-20860.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_17694.54 to i32), i32* %r1.global-to-local, align 4
  %v2_9048 = add i32 %v2_903c, %stack_var_-20860.0.ph
  store i32 %v2_9048, i32* @r0, align 4
  %v3_904c = inttoptr i32 %v2_9048 to i8*
  %v4_904c = call i32 @function_11894(i8* %v3_904c, i32 ptrtoint ([9 x i8]* @global_var_17694.54 to i32))
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_9054 = call i32 @function_1186c(i8* %v1_8fbc)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  %v0_905c = load i32, i32* @r5, align 4
  %v2_9060 = add i32 %v2_9054, %stack_var_-20860.0.ph
  store i32 %v2_9060, i32* @r0, align 4
  %v1_9064 = add i32 %v0_905c, 789
  store i32 %v1_9064, i32* %r1.global-to-local, align 4
  %v2_9068 = inttoptr i32 %v2_9060 to i8*
  %v3_9068 = call i32 @function_11894(i8* %v2_9068, i32 %v1_9064)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_9070 = call i32 @function_1186c(i8* %v1_8fbc)
  %v2_9078 = add i32 %v2_9070, %stack_var_-20860.0.ph
  store i32 %v2_9078, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r1.global-to-local, align 4
  %v3_9080 = inttoptr i32 %v2_9078 to i8*
  %v4_9080 = call i32 @function_11894(i8* %v3_9080, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32))
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_9088 = call i32 @function_10e48(i32 39)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_9090 = call i32 @function_1186c(i8* %v1_8fbc)
  %v0_9094 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_9094, i32* %r1.global-to-local, align 4
  store i32 %v2_9090, i32* @r4, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v2_90a0 = inttoptr i32 %v0_9094 to i32*
  %v3_90a0 = call i32 @function_10d84(i32 39, i32* %v2_90a0)
  store i32 %stack_var_-20860.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_90a0, i32* %r1.global-to-local, align 4
  %v1_90ac = load i32, i32* @r4, align 4
  %v2_90ac = add i32 %v1_90ac, %stack_var_-20860.0.ph
  store i32 %v2_90ac, i32* @r0, align 4
  %v2_90b0 = inttoptr i32 %v2_90ac to i8*
  %v3_90b0 = call i32 @function_11894(i8* %v2_90b0, i32 %v3_90a0)
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_90b8 = call i32 @function_10da8(i32 39)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_90c0 = call i32 @function_1186c(i8* %v1_8fbc)
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r1.global-to-local, align 4
  %v2_90cc = add i32 %v2_90c0, %stack_var_-20860.0.ph
  store i32 %v2_90cc, i32* @r0, align 4
  %v3_90d0 = inttoptr i32 %v2_90cc to i8*
  %v4_90d0 = call i32 @function_11894(i8* %v3_90d0, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32))
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_90d8 = call i32 @function_10e48(i32 40)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_90e0 = call i32 @function_1186c(i8* %v1_8fbc)
  %v0_90e4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_90e4, i32* %r1.global-to-local, align 4
  store i32 %v2_90e0, i32* @r4, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v2_90f0 = inttoptr i32 %v0_90e4 to i32*
  %v3_90f0 = call i32 @function_10d84(i32 40, i32* %v2_90f0)
  store i32 %stack_var_-20860.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_90f0, i32* %r1.global-to-local, align 4
  %v1_90fc = load i32, i32* @r4, align 4
  %v2_90fc = add i32 %v1_90fc, %stack_var_-20860.0.ph
  store i32 %v2_90fc, i32* @r0, align 4
  %v2_9100 = inttoptr i32 %v2_90fc to i8*
  %v3_9100 = call i32 @function_11894(i8* %v2_9100, i32 %v3_90f0)
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_9108 = call i32 @function_10da8(i32 40)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_9110 = call i32 @function_1186c(i8* %v1_8fbc)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r1.global-to-local, align 4
  %v2_911c = add i32 %v2_9110, %stack_var_-20860.0.ph
  store i32 %v2_911c, i32* @r0, align 4
  %v3_9120 = inttoptr i32 %v2_911c to i8*
  %v4_9120 = call i32 @function_11894(i8* %v3_9120, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32))
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_9128 = call i32 @function_10e48(i32 41)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_9130 = call i32 @function_1186c(i8* %v1_8fbc)
  %v0_9134 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_9134, i32* %r1.global-to-local, align 4
  store i32 %v2_9130, i32* @r4, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v2_9140 = inttoptr i32 %v0_9134 to i32*
  %v3_9140 = call i32 @function_10d84(i32 41, i32* %v2_9140)
  store i32 %stack_var_-20860.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_9140, i32* %r1.global-to-local, align 4
  %v1_914c = load i32, i32* @r4, align 4
  %v2_914c = add i32 %v1_914c, %stack_var_-20860.0.ph
  store i32 %v2_914c, i32* @r0, align 4
  %v2_9150 = inttoptr i32 %v2_914c to i8*
  %v3_9150 = call i32 @function_11894(i8* %v2_9150, i32 %v3_9140)
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_9158 = call i32 @function_10da8(i32 41)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_9160 = call i32 @function_1186c(i8* %v1_8fbc)
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r1.global-to-local, align 4
  %v2_916c = add i32 %v2_9160, %stack_var_-20860.0.ph
  store i32 %v2_916c, i32* @r0, align 4
  %v3_9170 = inttoptr i32 %v2_916c to i8*
  %v4_9170 = call i32 @function_11894(i8* %v3_9170, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32))
  store i32 %v4_9170, i32* %r0.global-to-local, align 4
  store i32 %v6_88c8, i32* %ip.global-to-local, align 4
  %v1_9178 = load i32, i32* %sb.global-to-local, align 4
  %v3_9178 = icmp uge i32 %v6_88c8, %v1_9178
  store i1 %v3_9178, i1* %cpsr_c.global-to-local, align 1
  %v9_9178 = icmp eq i32 %v6_88c8, %v1_9178
  store i1 %v9_9178, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9178, label %dec_label_pc_9250, label %dec_label_pc_9180

dec_label_pc_9180:                                ; preds = %dec_label_pc_8f88
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_9184 = call i32 @function_10e48(i32 42)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_918c = call i32 @function_1186c(i8* %v1_8fbc)
  %v0_9190 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_9190, i32* %r1.global-to-local, align 4
  store i32 %v2_918c, i32* @r4, align 4
  store i32 42, i32* %r0.global-to-local, align 4
  %v2_919c = inttoptr i32 %v0_9190 to i32*
  %v3_919c = call i32 @function_10d84(i32 42, i32* %v2_919c)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  store i32 %v3_919c, i32* %r1.global-to-local, align 4
  %v1_91a8 = load i32, i32* @r4, align 4
  %v2_91a8 = add i32 %v1_91a8, %stack_var_-20860.0.ph
  store i32 %v2_91a8, i32* @r0, align 4
  %v2_91ac = inttoptr i32 %v2_91a8 to i8*
  %v3_91ac = call i32 @function_11894(i8* %v2_91ac, i32 %v3_919c)
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_91b4 = call i32 @function_10da8(i32 42)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_91bc = call i32 @function_1186c(i8* %v1_8fbc)
  %v2_91c4 = add i32 %v2_91bc, %stack_var_-20860.0.ph
  store i32 %v2_91c4, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r1.global-to-local, align 4
  %v3_91cc = inttoptr i32 %v2_91c4 to i8*
  %v4_91cc = call i32 @function_11894(i8* %v3_91cc, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32))
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_91d4 = call i32 @function_1186c(i8* %v1_8fbc)
  %v0_91d8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_91d8, i32* %r1.global-to-local, align 4
  store i32 %v2_91d4, i32* %r4.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v2_91e4 = inttoptr i32 %v0_91d8 to i32*
  %v3_91e4 = call i32 @function_10d84(i32 47, i32* %v2_91e4)
  store i32 %stack_var_-20860.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_91e4, i32* %r1.global-to-local, align 4
  %v2_91f0 = add i32 %v2_91d4, %stack_var_-20860.0.ph
  store i32 %v2_91f0, i32* @r0, align 4
  %v2_91f4 = inttoptr i32 %v2_91f0 to i8*
  %v3_91f4 = call i32 @function_11894(i8* %v2_91f4, i32 %v3_91e4)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_91fc = call i32 @function_1186c(i8* %v1_8fbc)
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176a4.50 to i32), i32* %r1.global-to-local, align 4
  %v2_9208 = add i32 %v2_91fc, %stack_var_-20860.0.ph
  store i32 %v2_9208, i32* @r0, align 4
  %v2_920c = inttoptr i32 %v2_9208 to i8*
  %v3_920c = call i32 @function_11894(i8* %v2_920c, i32 ptrtoint (i32* @global_var_176a4.50 to i32))
  store i32 %v6_88c8, i32* %r0.global-to-local, align 4
  %v2_9214 = call i32 @function_1186c(i8* %v1_9214)
  store i32 %v2_9214, i32* @r4, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_9220 = call i32 @function_1186c(i8* %v1_8fbc)
  store i32 %stack_var_-20860.0.ph, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_922c = add i32 %v2_9220, %stack_var_-20860.0.ph
  store i32 %v2_922c, i32* %r2.global-to-local, align 4
  %v0_9230 = load i32, i32* @r4, align 4
  store i32 %v0_9230, i32* %r0.global-to-local, align 4
  %v3_9234 = trunc i32 %v0_9230 to i8
  %v4_9234 = call i32 @function_11d60(i8 %v3_9234, i32 10, i32 %v2_922c)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_923c = call i32 @function_1186c(i8* %v1_8fbc)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r1.global-to-local, align 4
  %v2_9248 = add i32 %v2_923c, %stack_var_-20860.0.ph
  store i32 %v2_9248, i32* @r0, align 4
  %v3_924c = inttoptr i32 %v2_9248 to i8*
  %v4_924c = call i32 @function_11894(i8* %v3_924c, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32))
  store i32 %v4_924c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9250

dec_label_pc_9250:                                ; preds = %dec_label_pc_8f88, %dec_label_pc_9180
  %v0_9250 = load i32, i32* @r6, align 4
  %v1_9250 = add i32 %v0_9250, 16
  %v2_9250 = inttoptr i32 %v1_9250 to i32*
  %v3_9250 = load i32, i32* %v2_9250, align 4
  store i32 %v3_9250, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9254 = icmp eq i32 %v3_9250, 0
  store i1 %v2_9254, i1* %cpsr_z.global-to-local, align 1
  %tmp177 = icmp slt i32 %v3_9250, 1
  br i1 %tmp177, label %dec_label_pc_92fc, label %dec_label_pc_925c

dec_label_pc_925c:                                ; preds = %dec_label_pc_9250
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_9260 = call i32 @function_1186c(i8* %v1_8fbc)
  %v2_9268 = add i32 %v2_9260, %stack_var_-20860.0.ph
  store i32 %v2_9268, i32* @r0, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_176b4.58 to i32), i32* %r1.global-to-local, align 4
  %v3_9270 = inttoptr i32 %v2_9268 to i8*
  %v4_9270 = call i32 @function_11894(i8* %v3_9270, i32 ptrtoint ([9 x i8]* @global_var_176b4.58 to i32))
  store i32 %v4_9270, i32* %r0.global-to-local, align 4
  %v0_9274 = load i32, i32* @r6, align 4
  %v1_9274 = add i32 %v0_9274, 16
  %v2_9274 = inttoptr i32 %v1_9274 to i32*
  %v3_9274 = load i32, i32* %v2_9274, align 4
  store i32 %v3_9274, i32* %r3.global-to-local, align 4
  store i32 %v10_89bc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_927c = icmp eq i32 %v3_9274, 0
  store i1 %v2_927c, i1* %cpsr_z.global-to-local, align 1
  %v0_9280 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_9280, i32* %stack_var_-44, align 4
  %tmp178 = icmp slt i32 %v3_9274, 1
  br i1 %tmp178, label %dec_label_pc_92e4, label %dec_label_pc_9288

dec_label_pc_9288:                                ; preds = %dec_label_pc_925c, %dec_label_pc_9288
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_928c = call i32 @function_1186c(i8* %v1_8fbc)
  store i32 %v10_89bc, i32* %r3.global-to-local, align 4
  %v3_9294 = load i32, i32* %stack_var_-44, align 4
  store i32 %stack_var_-20860.0.ph, i32* %ip.global-to-local, align 4
  %v1_929c = and i32 %v3_9294, 33554432
  %v2_929c = icmp ne i32 %v1_929c, 0
  store i1 %v2_929c, i1* %cpsr_c.global-to-local, align 1
  %v3_929c = mul i32 %v3_9294, 128
  %v1_92a0 = add i32 %v3_929c, 1472
  %v2_92a4 = add i32 %v2_928c, %stack_var_-20860.0.ph
  store i32 %v2_92a4, i32* @r0, align 4
  %v0_92a8 = load i32, i32* @r5, align 4
  %v2_92a8 = add i32 %v1_92a0, %v0_92a8
  store i32 %v2_92a8, i32* %r1.global-to-local, align 4
  %v2_92ac = inttoptr i32 %v2_92a4 to i8*
  %v3_92ac = call i32 @function_11894(i8* %v2_92ac, i32 %v2_92a8)
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_92b4 = call i32 @function_1186c(i8* %v1_8fbc)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176c0.60 to i32), i32* %r1.global-to-local, align 4
  %v2_92c0 = add i32 %v2_92b4, %stack_var_-20860.0.ph
  store i32 %v2_92c0, i32* @r0, align 4
  %v3_92c4 = inttoptr i32 %v2_92c0 to i8*
  %v4_92c4 = call i32 @function_11894(i8* %v3_92c4, i32 ptrtoint ([3 x i8]* @global_var_176c0.60 to i32))
  store i32 %v4_92c4, i32* %r0.global-to-local, align 4
  store i32 %v10_89bc, i32* %r1.global-to-local, align 4
  %v3_92cc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_92cc, i32* %r3.global-to-local, align 4
  %v0_92d0 = load i32, i32* @r6, align 4
  %v1_92d0 = add i32 %v0_92d0, 16
  %v2_92d0 = inttoptr i32 %v1_92d0 to i32*
  %v3_92d0 = load i32, i32* %v2_92d0, align 4
  store i32 %v3_92d0, i32* %r2.global-to-local, align 4
  %v1_92d4 = add i32 %v3_92cc, 1
  store i32 %v1_92d4, i32* %ip.global-to-local, align 4
  %v3_92d8 = icmp uge i32 %v3_92d0, %v1_92d4
  store i1 %v3_92d8, i1* %cpsr_c.global-to-local, align 1
  %v9_92d8 = icmp eq i32 %v3_92d0, %v1_92d4
  store i1 %v9_92d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_92d4, i32* %stack_var_-44, align 4
  %v8_92e0 = icmp sgt i32 %v3_92d0, %v1_92d4
  br i1 %v8_92e0, label %dec_label_pc_9288, label %dec_label_pc_92e4

dec_label_pc_92e4:                                ; preds = %dec_label_pc_9288, %dec_label_pc_925c
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_92e8 = call i32 @function_1186c(i8* %v1_8fbc)
  store i32 %stack_var_-20860.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r1.global-to-local, align 4
  %v2_92f4 = add i32 %v2_92e8, %stack_var_-20860.0.ph
  store i32 %v2_92f4, i32* @r0, align 4
  %v3_92f8 = inttoptr i32 %v2_92f4 to i8*
  %v4_92f8 = call i32 @function_11894(i8* %v3_92f8, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32))
  store i32 %v4_92f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_92fc

dec_label_pc_92fc:                                ; preds = %dec_label_pc_9250, %dec_label_pc_92e4
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_9300 = call i32 @function_1186c(i8* %v1_8fbc)
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r1.global-to-local, align 4
  %v2_930c = add i32 %v2_9300, %stack_var_-20860.0.ph
  store i32 %v2_930c, i32* @r0, align 4
  %v3_9310 = inttoptr i32 %v2_930c to i8*
  %v4_9310 = call i32 @function_11894(i8* %v3_9310, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32))
  store i32 %v4_9310, i32* %r0.global-to-local, align 4
  store i32 %v6_88c8, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_9318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9318, label %dec_label_pc_9338, label %dec_label_pc_9320

dec_label_pc_9320:                                ; preds = %dec_label_pc_92fc
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v2_9324 = call i32 @function_1186c(i8* %v1_8fbc)
  store i32 %stack_var_-20860.0.ph, i32* @lr, align 4
  store i32 %v6_88c8, i32* %r1.global-to-local, align 4
  %v2_9330 = add i32 %v2_9324, %stack_var_-20860.0.ph
  store i32 %v2_9330, i32* @r0, align 4
  %v2_9334 = inttoptr i32 %v2_9330 to i8*
  %v3_9334 = call i32 @function_11894(i8* %v2_9334, i32 %v6_88c8)
  store i32 %v3_9334, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9338

dec_label_pc_9338:                                ; preds = %dec_label_pc_92fc, %dec_label_pc_9320
  %v0_9338 = load i32, i32* @r5, align 4
  %v1_9338 = add i32 %v0_9338, 1440
  store i32 %v1_9338, i32* %r4.global-to-local, align 4
  %v0_933c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_933c, i32* %r0.global-to-local, align 4
  store i32 %v1_9338, i32* %r1.global-to-local, align 4
  %v2_9344 = inttoptr i32 %v0_933c to i8*
  %v3_9344 = call i32 @function_11c4c(i8* %v2_9344, i32 %v1_9338)
  store i32 %v3_9344, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9348 = icmp eq i32 %v3_9344, 0
  store i1 %v2_9348, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9348, label %dec_label_pc_9d88, label %dec_label_pc_9350

dec_label_pc_9350:                                ; preds = %dec_label_pc_9338, %dec_label_pc_9d88
  store i32 %stack_var_-20860.0.ph, i32* %r0.global-to-local, align 4
  %v0_9354 = load i32, i32* @r6, align 4
  %v1_9354 = add i32 %v0_9354, -1452
  %v2_9354 = inttoptr i32 %v1_9354 to i32*
  %v3_9354 = load i32, i32* %v2_9354, align 4
  store i32 %v3_9354, i32* @r4, align 4
  %v2_9358 = call i32 @function_1186c(i8* %v1_8fbc)
  store i32 %stack_var_-20860.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v2_9358, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9368 = load i32, i32* @r4, align 4
  store i32 %v0_9368, i32* %r0.global-to-local, align 4
  %v4_936c = call i32 @function_12c28(i32 %v0_9368, i32 %stack_var_-20860.0.ph, i32 %v2_9358, i32 16384)
  store i32 %v4_936c, i32* %r0.global-to-local, align 4
  %v0_9370 = load i32, i32* @r6, align 4
  %v1_9370 = add i32 %v0_9370, -1452
  %v2_9370 = inttoptr i32 %v1_9370 to i32*
  %v3_9370 = load i32, i32* %v2_9370, align 4
  store i32 %v3_9370, i32* %ip.global-to-local, align 4
  %v3_9378 = udiv i32 %v3_9370, 32
  store i32 %v2_8ddc, i32* %r1.global-to-local, align 4
  %v3_9380 = mul nuw nsw i32 %v3_9378, 4
  %v2_9384 = add i32 %v3_9380, %v2_8ddc
  store i32 %v2_9384, i32* %r2.global-to-local, align 4
  %v1_9388 = add i32 %v2_9384, -164
  %v2_9388 = inttoptr i32 %v1_9388 to i32*
  %v3_9388 = load i32, i32* %v2_9388, align 4
  %v1_9390 = urem i32 %v3_9370, 32
  store i32 %v1_9390, i32* %r0.global-to-local, align 4
  %v7_9394 = shl i32 1, %v1_9390
  %v8_9394 = or i32 %v3_9388, %v7_9394
  store i32 %v8_9394, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v8_9394, i32* %v2_9388, align 4
  %v0_93a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_93a0 = trunc i32 %v0_93a0 to i8
  %v2_93a0 = load i32, i32* @r6, align 4
  %v3_93a0 = add i32 %v2_93a0, -1448
  %v4_93a0 = inttoptr i32 %v3_93a0 to i8*
  store i8 %v1_93a0, i8* %v4_93a0, align 1
  %v0_93a4 = load i32, i32* %ip.global-to-local, align 4
  %v1_93a4 = load i32, i32* @r8, align 4
  %v2_93a4 = sub i32 %v0_93a4, %v1_93a4
  %v3_93a4 = icmp uge i32 %v0_93a4, %v1_93a4
  store i1 %v3_93a4, i1* %cpsr_c.global-to-local, align 1
  %v4_93a4 = xor i32 %v1_93a4, %v0_93a4
  %v5_93a4 = xor i32 %v2_93a4, %v0_93a4
  %v6_93a4 = and i32 %v5_93a4, %v4_93a4
  %v7_93a4 = icmp slt i32 %v6_93a4, 0
  %v8_93a4 = icmp slt i32 %v2_93a4, 0
  %v9_93a4 = icmp eq i32 %v0_93a4, %v1_93a4
  store i1 %v9_93a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_8bfc, i32* %r2.global-to-local, align 4
  %v3_93ac = xor i1 %v8_93a4, %v7_93a4
  %v4_93ac = or i1 %v9_93a4, %v3_93ac
  br i1 %v4_93ac, label %bb180, label %bb179

bb179:                                            ; preds = %dec_label_pc_9350
  %v6_93ac = add i32 %v0_93a4, 1
  store i32 %v6_93ac, i32* @r8, align 4
  br label %bb180

bb180:                                            ; preds = %dec_label_pc_9350, %bb179
  %v1_93b0 = load i32, i32* @r6, align 4
  %v2_93b0 = add i32 %v1_93b0, -1440
  %v3_93b0 = inttoptr i32 %v2_93b0 to i32*
  store i32 %v2_8bfc, i32* %v3_93b0, align 4
  br label %dec_label_pc_8cc0

dec_label_pc_93b8:                                ; preds = %dec_label_pc_8c78
  %v1_93b8 = add i32 %v3_8f7c, -1444
  %v2_93b8 = inttoptr i32 %v1_93b8 to i32*
  %v3_93b8 = load i32, i32* %v2_93b8, align 4
  store i32 %v2_8bfc, i32* %r1.global-to-local, align 4
  %v2_93c0 = sub i32 %v2_8bfc, %v3_93b8
  store i32 %v2_93c0, i32* %r3.global-to-local, align 4
  %v2_93c4 = icmp ugt i32 %v2_93c0, 29
  store i1 %v2_93c4, i1* %cpsr_c.global-to-local, align 1
  %v7_93c4 = icmp eq i32 %v2_93c0, 30
  store i1 %v7_93c4, i1* %cpsr_z.global-to-local, align 1
  %v2_93c8 = xor i1 %v7_93c4, true
  %v3_93c8 = and i1 %v2_93c4, %v2_93c8
  br i1 %v3_93c8, label %dec_label_pc_8ca8, label %dec_label_pc_93cc

dec_label_pc_93cc:                                ; preds = %dec_label_pc_93b8
  %v2_93cc = inttoptr i32 %v1_8ce4 to i32*
  %v3_93cc = load i32, i32* %v2_93cc, align 4
  store i32 %v3_93cc, i32* %ip.global-to-local, align 4
  %v3_93d4 = udiv i32 %v3_93cc, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_93d8 = mul nuw nsw i32 %v3_93d4, 4
  store i32 %v3_93d8, i32* %r2.global-to-local, align 4
  store i32 %v2_8ddc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8de4

dec_label_pc_93e8:                                ; preds = %dec_label_pc_8c88
  %v2_93e8 = inttoptr i32 %v1_8ce4 to i32*
  %v3_93e8 = load i32, i32* %v2_93e8, align 4
  store i32 %v3_93e8, i32* %ip.global-to-local, align 4
  %v3_93f0 = udiv i32 %v3_93e8, 32
  store i32 %v2_8ddc, i32* %r3.global-to-local, align 4
  %v3_93f8 = mul nuw nsw i32 %v3_93f0, 4
  %v2_93fc = add i32 %v3_93f8, %v2_8ddc
  store i32 %v2_93fc, i32* %r2.global-to-local, align 4
  %v1_9400 = add i32 %v2_93fc, -164
  %v2_9400 = inttoptr i32 %v1_9400 to i32*
  %v3_9400 = load i32, i32* %v2_9400, align 4
  %v1_9404 = urem i32 %v3_93e8, 32
  store i32 %v1_9404, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v7_940c = shl i32 1, %v1_9404
  %v8_940c = or i32 %v3_9400, %v7_940c
  store i32 %v8_940c, i32* %r1.global-to-local, align 4
  %v1_9410 = load i32, i32* @r8, align 4
  %v2_9410 = sub i32 %v3_93e8, %v1_9410
  %v3_9410 = icmp uge i32 %v3_93e8, %v1_9410
  store i1 %v3_9410, i1* %cpsr_c.global-to-local, align 1
  %v4_9410 = xor i32 %v1_9410, %v3_93e8
  %v5_9410 = xor i32 %v2_9410, %v3_93e8
  %v6_9410 = and i32 %v5_9410, %v4_9410
  %v7_9410 = icmp slt i32 %v6_9410, 0
  %v8_9410 = icmp slt i32 %v2_9410, 0
  %v9_9410 = icmp eq i32 %v3_93e8, %v1_9410
  store i1 %v9_9410, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_940c, i32* %v2_9400, align 4
  %v3_9418 = xor i1 %v8_9410, %v7_9410
  %v4_9418 = or i1 %v9_9410, %v3_9418
  br i1 %v4_9418, label %dec_label_pc_8cc0, label %dec_label_pc_941c

dec_label_pc_941c:                                ; preds = %dec_label_pc_93e8
  %v0_941c = load i32, i32* %ip.global-to-local, align 4
  %v1_941c = load i32, i32* %r3.global-to-local, align 4
  %v2_941c = add i32 %v1_941c, %v0_941c
  store i32 %v2_941c, i32* @r8, align 4
  br label %dec_label_pc_8e04

dec_label_pc_9424:                                ; preds = %dec_label_pc_8ea8
  %v0_9424 = call i32 @function_128f8()
  store i32 %v0_9424, i32* %r0.global-to-local, align 4
  %v0_9428 = load i32, i32* @sl, align 4
  %v1_9428 = add i32 %v0_9428, 660
  %v2_9428 = inttoptr i32 %v1_9428 to i32*
  %v3_9428 = load i32, i32* %v2_9428, align 4
  store i32 %v3_9428, i32* @r3, align 4
  %v0_942c = load i32, i32* %sb.global-to-local, align 4
  %v2_9430 = icmp ugt i32 %v3_9428, 1023
  store i1 %v2_9430, i1* %cpsr_c.global-to-local, align 1
  %v7_9430 = icmp eq i32 %v3_9428, 1024
  store i1 %v7_9430, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_9424, i32* %fp.global-to-local, align 4
  %v1_9438 = add i32 %v0_942c, 2116
  store i32 %v1_9438, i32* @r7, align 4
  br i1 %v7_9430, label %dec_label_pc_953c, label %dec_label_pc_9440

dec_label_pc_9440:                                ; preds = %dec_label_pc_9424, %dec_label_pc_953c, %dec_label_pc_9530
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9444 = load i32, i32* %fp.global-to-local, align 4
  %v2_9444 = inttoptr i32 %v1_9444 to i32*
  store i32 0, i32* %v2_9444, align 4
  %v0_9448 = load i32, i32* @sl, align 4
  %v1_9448 = add i32 %v0_9448, 660
  %v2_9448 = inttoptr i32 %v1_9448 to i32*
  %v3_9448 = load i32, i32* %v2_9448, align 4
  store i32 %v3_9448, i32* %r1.global-to-local, align 4
  %v1_944c = add i32 %v0_9448, -1452
  %v2_944c = inttoptr i32 %v1_944c to i32*
  %v3_944c = load i32, i32* %v2_944c, align 4
  store i32 %v3_944c, i32* %r0.global-to-local, align 4
  %v1_9450 = sub i32 1024, %v3_9448
  store i32 %v1_9450, i32* %r2.global-to-local, align 4
  %v0_9454 = load i32, i32* %r3.global-to-local, align 4
  %v1_9454 = add i32 %v0_9454, 16384
  store i32 %v1_9454, i32* %r3.global-to-local, align 4
  %v0_9458 = load i32, i32* @r7, align 4
  %v2_9458 = add i32 %v0_9458, %v3_9448
  store i32 %v2_9458, i32* %r1.global-to-local, align 4
  %v4_945c = call i32 @function_12bb4(i32 %v3_944c, i32 %v2_9458, i32 %v1_9450, i32 %v1_9454)
  store i32 %v4_945c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9460 = icmp eq i32 %v4_945c, 0
  store i1 %v2_9460, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9460, label %dec_label_pc_9d98, label %dec_label_pc_9468

dec_label_pc_9468:                                ; preds = %dec_label_pc_9440
  %v2_9468 = icmp eq i32 %v4_945c, -1
  store i1 %v2_9468, i1* %cpsr_c.global-to-local, align 1
  %v7_9468 = icmp eq i32 %v4_945c, -1
  store i1 %v7_9468, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9468, label %dec_label_pc_9dbc, label %dec_label_pc_9470

dec_label_pc_9470:                                ; preds = %dec_label_pc_9468
  %v0_9470 = load i32, i32* @sl, align 4
  %v1_9470 = add i32 %v0_9470, 660
  %v2_9470 = inttoptr i32 %v1_9470 to i32*
  %v3_9470 = load i32, i32* %v2_9470, align 4
  store i32 %v2_8e68, i32* %r1.global-to-local, align 4
  %v2_9478 = add i32 %v3_9470, %v4_945c
  store i32 %v2_9478, i32* @r4, align 4
  store i32 %v2_9478, i32* %v2_9470, align 4
  %v0_9480 = load i32, i32* %r1.global-to-local, align 4
  %v1_9480 = load i32, i32* @sl, align 4
  %v2_9480 = add i32 %v1_9480, -1444
  %v3_9480 = inttoptr i32 %v2_9480 to i32*
  store i32 %v0_9480, i32* %v3_9480, align 4
  br label %dec_label_pc_9510

dec_label_pc_9488:                                ; preds = %dec_label_pc_9510
  %v1_9488 = inttoptr i32 %v0_9510 to i32*
  %v2_9488 = load i32, i32* %v1_9488, align 4
  store i32 %v2_9488, i32* @r8, align 4
  %v1_948c = load i32, i32* @r4, align 4
  %v5_9490 = icmp slt i32 %v3_9510, %v1_948c
  %storemerge49 = select i1 %v5_9490, i32 %v3_9510, i32 %v1_948c
  store i32 %storemerge49, i32* @r6, align 4
  %v2_9498 = sub i32 %v3_9510, %storemerge49
  store i32 %v2_9498, i32* %r3.global-to-local, align 4
  %v2_949c = icmp ne i32 %v2_9488, 0
  store i1 %v2_949c, i1* %cpsr_c.global-to-local, align 1
  %v7_949c = icmp eq i32 %v2_9488, 1
  store i1 %v7_949c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9498, i32* %v2_9510, align 4
  br i1 %v7_949c, label %dec_label_pc_9560, label %.dec_label_pc_94acthread-pre-split_crit_edge

.dec_label_pc_94acthread-pre-split_crit_edge:     ; preds = %dec_label_pc_9488
  %v1_94a4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_94a4, i32* @r5, align 4
  br label %dec_label_pc_94ac

dec_label_pc_94ac:                                ; preds = %dec_label_pc_951c, %.dec_label_pc_94acthread-pre-split_crit_edge, %dec_label_pc_9588
  %v0_94ac = phi i32 [ %v3_9588, %dec_label_pc_9588 ], [ %v1_94a4, %.dec_label_pc_94acthread-pre-split_crit_edge ], [ %v3_9510, %dec_label_pc_951c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_94ac = icmp eq i32 %v0_94ac, 0
  store i1 %v2_94ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94ac, label %dec_label_pc_94b4, label %dec_label_pc_94d4

dec_label_pc_94b4:                                ; preds = %dec_label_pc_94ac
  %v0_94b4 = load i32, i32* @sl, align 4
  %v1_94b4 = add i32 %v0_94b4, 8
  %v2_94b4 = inttoptr i32 %v1_94b4 to i32*
  %v3_94b4 = load i32, i32* %v2_94b4, align 4
  store i32 %v3_94b4, i32* @r4, align 4
  %v2_94b8 = icmp ne i32 %v3_94b4, 0
  store i1 %v2_94b8, i1* %cpsr_c.global-to-local, align 1
  %v7_94b8 = icmp eq i32 %v3_94b4, 1
  store i1 %v7_94b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_94b8, label %dec_label_pc_9590, label %dec_label_pc_94c0

dec_label_pc_94c0:                                ; preds = %dec_label_pc_94b4
  %v1_94c0 = add i32 %v0_94b4, 660
  %v2_94c0 = inttoptr i32 %v1_94c0 to i32*
  %v3_94c0 = load i32, i32* %v2_94c0, align 4
  %v0_94c4 = load i32, i32* @r6, align 4
  %v2_94c4 = sub i32 %v3_94c0, %v0_94c4
  store i32 %v2_94c4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_94c8 = icmp eq i32 %v2_94c4, 0
  store i1 %v2_94c8, i1* %cpsr_z.global-to-local, align 1
  %v2_94cc = add i32 %v0_94b4, 12
  %v3_94cc = inttoptr i32 %v2_94cc to i32*
  store i32 %v2_94c4, i32* %v3_94cc, align 4
  br i1 %v2_94c8, label %dec_label_pc_9d7c, label %dec_label_pc_94d4

dec_label_pc_94d4:                                ; preds = %dec_label_pc_94ac, %dec_label_pc_9590, %dec_label_pc_94c0, %dec_label_pc_9618
  %v0_94d4 = load i32, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_94d4 = icmp eq i32 %v0_94d4, 0
  store i1 %v2_94d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94d4, label %dec_label_pc_9524, label %dec_label_pc_94dc

dec_label_pc_94dc:                                ; preds = %dec_label_pc_94d4
  %v0_94dc = load i32, i32* @sl, align 4
  %v1_94dc = add i32 %v0_94dc, 660
  %v2_94dc = inttoptr i32 %v1_94dc to i32*
  %v3_94dc = load i32, i32* %v2_94dc, align 4
  store i32 %v3_94dc, i32* @r3, align 4
  %v2_94e0 = sub i32 %v3_94dc, %v0_94d4
  store i32 %v2_94e0, i32* @r4, align 4
  store i32 %v2_94e0, i32* @r2, align 4
  store i32 %v2_94e0, i32* %v2_94dc, align 4
  %v0_94ec = load i32, i32* @r7, align 4
  %v1_94ec = load i32, i32* @r6, align 4
  %v2_94ec = add i32 %v1_94ec, %v0_94ec
  store i32 %v2_94ec, i32* @r1, align 4
  store i32 %v0_94ec, i32* @r0, align 4
  %v3_94f4 = call i32 @function_129f0(i32 %v0_94ec, i32 %v2_94ec, i32 %v2_94e0)
  store i32 %v3_94f4, i32* %r0.global-to-local, align 4
  %v0_94f8 = load i32, i32* @sl, align 4
  %v1_94f8 = add i32 %v0_94f8, 660
  %v2_94f8 = inttoptr i32 %v1_94f8 to i32*
  %v3_94f8 = load i32, i32* %v2_94f8, align 4
  store i32 %v3_94f8, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9500 = load i32, i32* %sb.global-to-local, align 4
  %v2_9500 = add i32 %v0_9500, %v3_94f8
  store i32 %v2_9500, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9504 = icmp eq i32 %v3_94f8, 0
  store i1 %v2_9504, i1* %cpsr_z.global-to-local, align 1
  %v3_9508 = add i32 %v2_9500, 2116
  %v4_9508 = inttoptr i32 %v3_9508 to i8*
  store i8 0, i8* %v4_9508, align 1
  %v0_950c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_950c, label %dec_label_pc_9524, label %dec_label_pc_9510

dec_label_pc_9510:                                ; preds = %dec_label_pc_94dc, %dec_label_pc_9470
  %v0_9510 = load i32, i32* @sl, align 4
  %v1_9510 = add i32 %v0_9510, 12
  %v2_9510 = inttoptr i32 %v1_9510 to i32*
  %v3_9510 = load i32, i32* %v2_9510, align 4
  store i32 %v3_9510, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9514 = icmp eq i32 %v3_9510, 0
  store i1 %v2_9514, i1* %cpsr_z.global-to-local, align 1
  %v5_9518 = icmp sgt i32 %v3_9510, 0
  br i1 %v5_9518, label %dec_label_pc_9488, label %dec_label_pc_951c

dec_label_pc_951c:                                ; preds = %dec_label_pc_9510
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_94ac

dec_label_pc_9524:                                ; preds = %dec_label_pc_94dc, %dec_label_pc_94d4
  %v0_9524 = load i32, i32* @sl, align 4
  %v1_9524 = add i32 %v0_9524, -1448
  %v2_9524 = inttoptr i32 %v1_9524 to i8*
  %v3_9524 = load i8, i8* %v2_9524, align 1
  %v4_9524 = zext i8 %v3_9524 to i32
  store i32 %v4_9524, i32* %r3.global-to-local, align 4
  %v2_9528 = icmp ugt i8 %v3_9524, 6
  store i1 %v2_9528, i1* %cpsr_c.global-to-local, align 1
  %v7_9528 = icmp eq i8 %v3_9524, 7
  store i1 %v7_9528, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9528, label %dec_label_pc_9530, label %dec_label_pc_8eb8

dec_label_pc_9530:                                ; preds = %dec_label_pc_9524
  %v1_9530 = add i32 %v0_9524, 660
  %v2_9530 = inttoptr i32 %v1_9530 to i32*
  %v3_9530 = load i32, i32* %v2_9530, align 4
  store i32 %v3_9530, i32* @r3, align 4
  %v2_9534 = icmp ugt i32 %v3_9530, 1023
  store i1 %v2_9534, i1* %cpsr_c.global-to-local, align 1
  %v7_9534 = icmp eq i32 %v3_9530, 1024
  store i1 %v7_9534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9534, label %dec_label_pc_953c.loopexit, label %dec_label_pc_9440

dec_label_pc_953c.loopexit:                       ; preds = %dec_label_pc_9530
  %v0_953c.pre = load i32, i32* %sb.global-to-local, align 4
  %v0_9544.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_953c

dec_label_pc_953c:                                ; preds = %dec_label_pc_953c.loopexit, %dec_label_pc_9424
  %v0_9544 = phi i32 [ %v0_9544.pre, %dec_label_pc_953c.loopexit ], [ %v1_9438, %dec_label_pc_9424 ]
  %v0_953c = phi i32 [ %v0_953c.pre, %dec_label_pc_953c.loopexit ], [ %v0_942c, %dec_label_pc_9424 ]
  %v1_9540 = add i32 %v0_953c, 2180
  store i32 %v1_9540, i32* @r1, align 4
  store i32 %v0_9544, i32* @r0, align 4
  store i32 960, i32* @r2, align 4
  %v3_954c = call i32 @function_129f0(i32 %v0_9544, i32 %v1_9540, i32 960)
  store i32 %v3_954c, i32* %r0.global-to-local, align 4
  %v0_9550 = load i32, i32* @sl, align 4
  %v1_9550 = add i32 %v0_9550, 660
  %v2_9550 = inttoptr i32 %v1_9550 to i32*
  %v3_9550 = load i32, i32* %v2_9550, align 4
  store i32 %v3_9550, i32* %r3.global-to-local, align 4
  %v1_9554 = add i32 %v3_9550, -64
  store i32 %v1_9554, i32* @r4, align 4
  store i32 %v1_9554, i32* %v2_9550, align 4
  br label %dec_label_pc_9440

dec_label_pc_9560:                                ; preds = %dec_label_pc_9488
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v3_9568 = call i32 @function_10d84(i32 43, i32* null)
  %v0_956c = load i32, i32* @r4, align 4
  store i32 %v0_956c, i32* %r1.global-to-local, align 4
  store i32 %v3_9568, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9578 = load i32, i32* @r7, align 4
  store i32 %v0_9578, i32* %r0.global-to-local, align 4
  %v4_957c = call i32 @function_11924(i32 %v0_9578, i32 %v0_956c, i32 %v3_9568, i32 11)
  store i32 %v4_957c, i32* %r0.global-to-local, align 4
  %v3_9580 = icmp eq i32 %v4_957c, -1
  store i1 %v3_9580, i1* %cpsr_c.global-to-local, align 1
  %v8_9580 = icmp eq i32 %v4_957c, -1
  store i1 %v8_9580, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9580, label %dec_label_pc_9588, label %dec_label_pc_a058

dec_label_pc_9588:                                ; preds = %dec_label_pc_9560
  %v0_9588 = load i32, i32* @sl, align 4
  %v1_9588 = add i32 %v0_9588, 12
  %v2_9588 = inttoptr i32 %v1_9588 to i32*
  %v3_9588 = load i32, i32* %v2_9588, align 4
  store i32 %v3_9588, i32* @r5, align 4
  br label %dec_label_pc_94ac

dec_label_pc_9590:                                ; preds = %dec_label_pc_94b4
  %v0_9590 = load i32, i32* @r7, align 4
  store i32 %v0_9590, i32* %r0.global-to-local, align 4
  %v1_9594 = add i32 %v0_94b4, 660
  %v2_9594 = inttoptr i32 %v1_9594 to i32*
  %v3_9594 = load i32, i32* %v2_9594, align 4
  store i32 %v3_9594, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_95a0 = call i32 @function_11924(i32 %v0_9590, i32 %v3_9594, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32 2)
  store i32 %v5_95a0, i32* %r0.global-to-local, align 4
  %v2_95a4 = icmp eq i32 %v5_95a0, -1
  store i1 %v2_95a4, i1* %cpsr_c.global-to-local, align 1
  %v7_95a4 = icmp eq i32 %v5_95a0, -1
  store i1 %v7_95a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_95a4, label %dec_label_pc_94d4, label %dec_label_pc_95ac

dec_label_pc_95ac:                                ; preds = %dec_label_pc_9590
  %v0_95ac = load i32, i32* @sl, align 4
  %v1_95ac = add i32 %v0_95ac, 660
  %v2_95ac = inttoptr i32 %v1_95ac to i32*
  %v3_95ac = load i32, i32* %v2_95ac, align 4
  store i32 %v3_95ac, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v0_95b8 = load i32, i32* @r7, align 4
  store i32 %v0_95b8, i32* %r0.global-to-local, align 4
  %v5_95bc = call i32 @function_11924(i32 %v0_95b8, i32 %v3_95ac, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32 2)
  %v0_95c0 = load i32, i32* %sb.global-to-local, align 4
  %v2_95c0 = add i32 %v0_95c0, %v5_95bc
  store i32 %v2_95c0, i32* %ip.global-to-local, align 4
  store i32 %v5_95bc, i32* @r6, align 4
  store i32 %v5_95bc, i32* %r1.global-to-local, align 4
  %v0_95cc = load i32, i32* @r7, align 4
  store i32 %v0_95cc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176cc.62 to i32), i32* %r2.global-to-local, align 4
  %v0_95d4 = load i32, i32* @r4, align 4
  store i32 %v0_95d4, i32* %r3.global-to-local, align 4
  %v0_95d8 = load i32, i32* @r5, align 4
  %v1_95d8 = trunc i32 %v0_95d8 to i8
  %v3_95d8 = add i32 %v2_95c0, 2114
  %v4_95d8 = inttoptr i32 %v3_95d8 to i8*
  store i8 %v1_95d8, i8* %v4_95d8, align 1
  %v4_95dc = call i32 @function_11924(i32 %v0_95cc, i32 %v5_95bc, i32 ptrtoint (i32* @global_var_176cc.62 to i32), i32 %v0_95d4)
  store i32 %v4_95dc, i32* %r0.global-to-local, align 4
  %v2_95e0 = icmp eq i32 %v4_95dc, -1
  store i1 %v2_95e0, i1* %cpsr_c.global-to-local, align 1
  %v7_95e0 = icmp eq i32 %v4_95dc, -1
  store i1 %v7_95e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_95e0, label %dec_label_pc_9604, label %dec_label_pc_95e8

dec_label_pc_95e8:                                ; preds = %dec_label_pc_95ac
  %v0_95e8 = load i32, i32* @r7, align 4
  store i32 %v0_95e8, i32* %r0.global-to-local, align 4
  %v0_95ec = load i32, i32* @r6, align 4
  store i32 %v0_95ec, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176cc.62 to i32), i32* %r2.global-to-local, align 4
  %v0_95f4 = load i32, i32* @r4, align 4
  store i32 %v0_95f4, i32* %r3.global-to-local, align 4
  %v4_95f8 = call i32 @function_11924(i32 %v0_95e8, i32 %v0_95ec, i32 ptrtoint (i32* @global_var_176cc.62 to i32), i32 %v0_95f4)
  %v0_95fc = load i32, i32* %sb.global-to-local, align 4
  %v2_95fc = add i32 %v0_95fc, %v4_95f8
  store i32 %v2_95fc, i32* %r0.global-to-local, align 4
  %v0_9600 = load i32, i32* @r5, align 4
  %v1_9600 = trunc i32 %v0_9600 to i8
  %v3_9600 = add i32 %v2_95fc, 2116
  %v4_9600 = inttoptr i32 %v3_9600 to i8*
  store i8 %v1_9600, i8* %v4_9600, align 1
  br label %dec_label_pc_9604

dec_label_pc_9604:                                ; preds = %dec_label_pc_95ac, %dec_label_pc_95e8
  %v0_9604 = load i32, i32* @r7, align 4
  store i32 %v0_9604, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  %v2_960c = inttoptr i32 %v0_9604 to i8*
  %v3_960c = call i32 @function_11990(i8* %v2_960c, i32 16)
  store i32 %v3_960c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9610 = icmp eq i32 %v3_960c, 0
  store i1 %v2_9610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9610, label %dec_label_pc_a20c, label %dec_label_pc_9618

dec_label_pc_9618:                                ; preds = %dec_label_pc_9604
  %v1_9618 = add i32 %v3_960c, 2
  store i32 %v1_9618, i32* %r3.global-to-local, align 4
  %v1_961c = load i32, i32* @sl, align 4
  %v2_961c = add i32 %v1_961c, 12
  %v3_961c = inttoptr i32 %v2_961c to i32*
  store i32 %v1_9618, i32* %v3_961c, align 4
  br label %dec_label_pc_94d4

dec_label_pc_9624:                                ; preds = %dec_label_pc_8c90
  %v2_9624 = inttoptr i32 %v1_8ce4 to i32*
  %v3_9624 = load i32, i32* %v2_9624, align 4
  store i32 %v3_9624, i32* %ip.global-to-local, align 4
  %v3_962c = udiv i32 %v3_9624, 32
  %v3_9630 = mul nuw nsw i32 %v3_962c, 4
  store i32 %v2_8ddc, i32* @lr, align 4
  %v2_9638 = add i32 %v3_9630, %v2_8ddc
  store i32 %v2_9638, i32* %r2.global-to-local, align 4
  %v1_963c = add i32 %v2_9638, -164
  %v2_963c = inttoptr i32 %v1_963c to i32*
  %v3_963c = load i32, i32* %v2_963c, align 4
  %v1_9640 = urem i32 %v3_9624, 32
  store i32 %v1_9640, i32* %r0.global-to-local, align 4
  store i32 %v1_8c88, i32* %r3.global-to-local, align 4
  %v7_9648 = shl i32 %v1_8c88, %v1_9640
  %v8_9648 = or i32 %v3_963c, %v7_9648
  store i32 %v8_9648, i32* %r1.global-to-local, align 4
  %v1_964c = load i32, i32* @r8, align 4
  %v2_964c = sub i32 %v3_9624, %v1_964c
  %v3_964c = icmp uge i32 %v3_9624, %v1_964c
  store i1 %v3_964c, i1* %cpsr_c.global-to-local, align 1
  %v4_964c = xor i32 %v1_964c, %v3_9624
  %v5_964c = xor i32 %v2_964c, %v3_9624
  %v6_964c = and i32 %v5_964c, %v4_964c
  %v7_964c = icmp slt i32 %v6_964c, 0
  %v8_964c = icmp slt i32 %v2_964c, 0
  %v9_964c = icmp eq i32 %v3_9624, %v1_964c
  store i1 %v9_964c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_9648, i32* %v2_963c, align 4
  %v3_9654 = xor i1 %v8_964c, %v7_964c
  %v4_9654 = or i1 %v9_964c, %v3_9654
  br i1 %v4_9654, label %dec_label_pc_8cc0, label %dec_label_pc_9658

dec_label_pc_9658:                                ; preds = %dec_label_pc_9624
  %v0_9658 = load i32, i32* %ip.global-to-local, align 4
  %v1_9658 = load i32, i32* %r3.global-to-local, align 4
  %v2_9658 = add i32 %v1_9658, %v0_9658
  store i32 %v2_9658, i32* @r8, align 4
  br label %dec_label_pc_8e04

dec_label_pc_9660:                                ; preds = %dec_label_pc_8f14
  store i32 %v3_8f58, i32* %r0.global-to-local, align 4
  %v1_9664 = call i32 @function_124d0(i32 %v3_8f58)
  store i32 %v1_9664, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_966c = load i32, i32* @sl, align 4
  %v2_966c = add i32 %v1_966c, -1452
  %v3_966c = inttoptr i32 %v2_966c to i32*
  store i32 -1, i32* %v3_966c, align 4
  %v0_9670 = load i32, i32* @r5, align 4
  %v1_9670 = trunc i32 %v0_9670 to i8
  %v2_9670 = load i32, i32* @sl, align 4
  %v3_9670 = add i32 %v2_9670, -1448
  %v4_9670 = inttoptr i32 %v3_9670 to i8*
  store i8 %v1_9670, i8* %v4_9670, align 1
  br label %dec_label_pc_8eb8

dec_label_pc_9678:                                ; preds = %dec_label_pc_8c98
  %v2_9678 = inttoptr i32 %v1_8ce4 to i32*
  %v3_9678 = load i32, i32* %v2_9678, align 4
  store i32 %v3_9678, i32* %ip.global-to-local, align 4
  %v3_9680 = udiv i32 %v3_9678, 32
  store i32 %v2_8ddc, i32* %r1.global-to-local, align 4
  %v3_9688 = mul nuw nsw i32 %v3_9680, 4
  %v2_968c = add i32 %v3_9688, %v2_8ddc
  store i32 %v2_968c, i32* %r2.global-to-local, align 4
  %v1_9690 = add i32 %v2_968c, -164
  %v2_9690 = inttoptr i32 %v1_9690 to i32*
  %v3_9690 = load i32, i32* %v2_9690, align 4
  %v1_9694 = urem i32 %v3_9678, 32
  store i32 %v1_9694, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v7_969c = shl i32 1, %v1_9694
  %v8_969c = or i32 %v3_9690, %v7_969c
  store i32 %v8_969c, i32* %r1.global-to-local, align 4
  %v1_96a0 = load i32, i32* @r8, align 4
  %v2_96a0 = sub i32 %v3_9678, %v1_96a0
  %v3_96a0 = icmp uge i32 %v3_9678, %v1_96a0
  store i1 %v3_96a0, i1* %cpsr_c.global-to-local, align 1
  %v4_96a0 = xor i32 %v1_96a0, %v3_9678
  %v5_96a0 = xor i32 %v2_96a0, %v3_9678
  %v6_96a0 = and i32 %v5_96a0, %v4_96a0
  %v7_96a0 = icmp slt i32 %v6_96a0, 0
  %v8_96a0 = icmp slt i32 %v2_96a0, 0
  %v9_96a0 = icmp eq i32 %v3_9678, %v1_96a0
  store i1 %v9_96a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_969c, i32* %v2_9690, align 4
  %v3_96a8 = xor i1 %v8_96a0, %v7_96a0
  %v4_96a8 = or i1 %v9_96a0, %v3_96a8
  br i1 %v4_96a8, label %dec_label_pc_8cc0, label %dec_label_pc_96ac

dec_label_pc_96ac:                                ; preds = %dec_label_pc_9678
  %v0_96ac = load i32, i32* %ip.global-to-local, align 4
  %v1_96ac = load i32, i32* %r3.global-to-local, align 4
  %v2_96ac = add i32 %v1_96ac, %v0_96ac
  store i32 %v2_96ac, i32* @r8, align 4
  br label %dec_label_pc_8e04

dec_label_pc_96f4:                                ; preds = %dec_label_pc_8e9c
  store i32 %v2_8948, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  %v2_96fc = call i32 @function_11900(i32 %v2_8948, i32 10240)
  store i32 %v2_96fc, i32* %r0.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_9708 = load i32, i32* @sl, align 4
  %v1_9708 = add i32 %v0_9708, -1452
  %v2_9708 = inttoptr i32 %v1_9708 to i32*
  %v3_9708 = load i32, i32* %v2_9708, align 4
  store i32 %v3_9708, i32* %r0.global-to-local, align 4
  store i32 %v2_8948, i32* %r1.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v4_9714 = call i32 @function_12bb4(i32 %v3_9708, i32 %v2_8948, i32 10240, i32 16386)
  store i32 %v4_9714, i32* %r0.global-to-local, align 4
  store i32 %v4_9714, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_971c = icmp eq i32 %v4_9714, 0
  store i1 %v2_971c, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r7, align 4
  %tmp181 = icmp slt i32 %v4_9714, 1
  br i1 %tmp181, label %dec_label_pc_9c1c, label %dec_label_pc_9728

dec_label_pc_9728:                                ; preds = %dec_label_pc_96f4
  store i32 %v2_8948, i32* %r0.global-to-local, align 4
  store i32 %v4_9714, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_176c4.64 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_9738 = call i32 @function_11924(i32 %v2_8948, i32 %v4_9714, i32 ptrtoint ([5 x i8]* @global_var_176c4.64 to i32), i32 4)
  store i32 %v5_9738, i32* %r0.global-to-local, align 4
  %v3_973c = icmp eq i32 %v5_9738, -1
  store i1 %v3_973c, i1* %cpsr_c.global-to-local, align 1
  %v8_973c = icmp eq i32 %v5_9738, -1
  store i1 %v8_973c, i1* %cpsr_z.global-to-local, align 1
  %v0_9744 = load i32, i32* %fp.global-to-local, align 4
  br i1 %v3_973c, label %dec_label_pc_9744, label %dec_label_pc_974c

dec_label_pc_9744:                                ; preds = %dec_label_pc_9728
  %v3_9744 = icmp ugt i32 %v0_9744, 10239
  store i1 %v3_9744, i1* %cpsr_c.global-to-local, align 1
  %v8_9744 = icmp eq i32 %v0_9744, 10240
  store i1 %v8_9744, i1* %cpsr_z.global-to-local, align 1
  %v5_9748 = icmp slt i32 %v0_9744, 10240
  br i1 %v5_9748, label %dec_label_pc_8eb8, label %dec_label_pc_974c

dec_label_pc_974c:                                ; preds = %dec_label_pc_9728, %dec_label_pc_9744
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_176c4.64 to i32), i32* %r2.global-to-local, align 4
  store i32 %v0_9744, i32* %r1.global-to-local, align 4
  store i32 %v2_8948, i32* %r0.global-to-local, align 4
  %v5_975c = call i32 @function_11924(i32 %v2_8948, i32 %v0_9744, i32 ptrtoint ([5 x i8]* @global_var_176c4.64 to i32), i32 4)
  store i32 %v2_8948, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v4_9768 = add i32 %v5_975c, %v2_8948
  %v5_9768 = inttoptr i32 %v4_9768 to i8*
  store i8 0, i8* %v5_9768, align 1
  %v0_976c = load i32, i32* @r5, align 4
  store i32 %v0_976c, i32* %r1.global-to-local, align 4
  store i32 53, i32* %r0.global-to-local, align 4
  %v2_9774 = inttoptr i32 %v0_976c to i32*
  %v3_9774 = call i32 @function_10d84(i32 53, i32* %v2_9774)
  %v0_9778 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9778, i32* @r1, align 4
  store i32 %v3_9774, i32* %r2.global-to-local, align 4
  store i32 %v2_8948, i32* %r0.global-to-local, align 4
  %v4_9784 = call i32 @function_11bbc(i8* %tmp168, i32 %v0_9778, i32 %v3_9774)
  store i32 %v4_9784, i32* %r0.global-to-local, align 4
  %v2_9788 = icmp eq i32 %v4_9784, -1
  store i1 %v2_9788, i1* %cpsr_c.global-to-local, align 1
  %v7_9788 = icmp eq i32 %v4_9784, -1
  store i1 %v7_9788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9788, label %.thread23, label %bb182

bb182:                                            ; preds = %dec_label_pc_974c
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_9790 = load i32, i32* @sl, align 4
  %v3_9790 = inttoptr i32 %v2_9790 to i32*
  store i32 2, i32* %v3_9790, align 4
  br label %.thread23

.thread23:                                        ; preds = %dec_label_pc_974c, %bb182
  %v0_9794 = load i32, i32* @r5, align 4
  store i32 %v0_9794, i32* %r1.global-to-local, align 4
  store i32 52, i32* %r0.global-to-local, align 4
  %v2_979c = inttoptr i32 %v0_9794 to i32*
  %v3_979c = call i32 @function_10d84(i32 52, i32* %v2_979c)
  %v0_97a0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_97a0, i32* @r1, align 4
  store i32 %v3_979c, i32* %r2.global-to-local, align 4
  store i32 %v2_8948, i32* %r0.global-to-local, align 4
  %v4_97ac = call i32 @function_11bbc(i8* %tmp168, i32 %v0_97a0, i32 %v3_979c)
  store i32 %v4_97ac, i32* %r0.global-to-local, align 4
  %v2_97b0 = icmp eq i32 %v4_97ac, -1
  store i1 %v2_97b0, i1* %cpsr_c.global-to-local, align 1
  %v7_97b0 = icmp eq i32 %v4_97ac, -1
  store i1 %v7_97b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97b0, label %.thread24, label %bb183

bb183:                                            ; preds = %.thread23
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_97b8 = load i32, i32* @sl, align 4
  %v3_97b8 = inttoptr i32 %v2_97b8 to i32*
  store i32 1, i32* %v3_97b8, align 4
  br label %.thread24

.thread24:                                        ; preds = %.thread23, %bb183
  %v0_97bc = load i32, i32* @r5, align 4
  store i32 %v0_97bc, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_97c4 = load i32, i32* @sl, align 4
  %v2_97c4 = add i32 %v1_97c4, 4
  %v3_97c4 = inttoptr i32 %v2_97c4 to i32*
  store i32 %v0_97bc, i32* %v3_97c4, align 4
  %v2_97c8 = inttoptr i32 %v0_97bc to i32*
  %v3_97c8 = call i32 @function_10d84(i32 51, i32* %v2_97c8)
  %v0_97cc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_97cc, i32* @r1, align 4
  store i32 %v3_97c8, i32* %r2.global-to-local, align 4
  store i32 %v2_8948, i32* %r0.global-to-local, align 4
  %v4_97d8 = call i32 @function_11bbc(i8* %tmp168, i32 %v0_97cc, i32 %v3_97c8)
  store i32 %v4_97d8, i32* %r0.global-to-local, align 4
  %v2_97dc = icmp eq i32 %v4_97d8, -1
  store i1 %v2_97dc, i1* %cpsr_c.global-to-local, align 1
  %v7_97dc = icmp eq i32 %v4_97d8, -1
  store i1 %v7_97dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97dc, label %.thread25, label %dec_label_pc_97e4

dec_label_pc_97e4:                                ; preds = %.thread24
  %v0_97e4 = load i32, i32* @r5, align 4
  store i32 %v0_97e4, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v2_97ec = inttoptr i32 %v0_97e4 to i32*
  %v3_97ec = call i32 @function_10d84(i32 51, i32* %v2_97ec)
  %v0_97f0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_97f0, i32* @r1, align 4
  store i32 %v3_97ec, i32* %r2.global-to-local, align 4
  store i32 %v2_8948, i32* %r0.global-to-local, align 4
  %v4_97fc = call i32 @function_11bbc(i8* %tmp168, i32 %v0_97f0, i32 %v3_97ec)
  store i32 %v4_97fc, i32* %r0.global-to-local, align 4
  store i32 %v2_8948, i32* @lr, align 4
  %v2_9804 = add i32 %v4_97fc, %v2_8948
  %v3_9804 = inttoptr i32 %v2_9804 to i8*
  %v4_9804 = load i8, i8* %v3_9804, align 1
  %v2_980c = icmp ugt i8 %v4_9804, 31
  store i1 %v2_980c, i1* %cpsr_c.global-to-local, align 1
  %v7_980c = icmp eq i8 %v4_9804, 32
  store i1 %v7_980c, i1* %cpsr_z.global-to-local, align 1
  %v2_9814 = zext i1 %v7_980c to i32
  %v2_9814.v4_97fc = add i32 %v2_9814, %v4_97fc
  store i32 %v2_9814.v4_97fc, i32* @r4, align 4
  %v2_9818 = add i32 %v2_9814.v4_97fc, %v2_8948
  store i32 %v2_9818, i32* @r6, align 4
  store i32 %v2_9818, i32* %r0.global-to-local, align 4
  %v1_9820 = load i32, i32* %fp.global-to-local, align 4
  %v2_9820 = sub i32 %v1_9820, %v2_9814.v4_97fc
  store i32 %v2_9820, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_982c = call i32 @function_11924(i32 %v2_9818, i32 %v2_9820, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32 2)
  store i32 %v5_982c, i32* %r0.global-to-local, align 4
  %v2_9830 = icmp eq i32 %v5_982c, -1
  store i1 %v2_9830, i1* %cpsr_c.global-to-local, align 1
  %v7_9830 = icmp eq i32 %v5_982c, -1
  store i1 %v7_9830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9830, label %.thread25, label %dec_label_pc_9838

dec_label_pc_9838:                                ; preds = %dec_label_pc_97e4
  %v2_9838 = icmp ne i32 %v5_982c, 0
  store i1 %v2_9838, i1* %cpsr_c.global-to-local, align 1
  %v7_9838 = icmp eq i32 %v5_982c, 1
  store i1 %v7_9838, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_8d60, i32* %r2.global-to-local, align 4
  %v7_9840 = icmp slt i32 %v5_982c, 2
  br i1 %v7_9840, label %bb185, label %bb184

bb184:                                            ; preds = %dec_label_pc_9838
  %v9_9840 = add i32 %v5_982c, -2
  store i32 %v9_9840, i32* %r0.global-to-local, align 4
  br label %bb185

bb185:                                            ; preds = %dec_label_pc_9838, %bb184
  %v1_9848 = phi i32 [ %v5_982c, %dec_label_pc_9838 ], [ %v9_9840, %bb184 ]
  store i32 %v2_8ddc, i32* %r2.global-to-local, align 4
  %v2_9848 = add i32 %v1_9848, %v2_8ddc
  %v1_984c = load i32, i32* @r4, align 4
  %v2_984c = add i32 %v2_9848, %v1_984c
  store i32 %v2_984c, i32* %r3.global-to-local, align 4
  %v0_9850 = load i32, i32* @r5, align 4
  %v1_9850 = trunc i32 %v0_9850 to i8
  %v3_9850 = load i32, i32* @r7, align 4
  %v4_9850 = add i32 %v3_9850, %v2_984c
  %v5_9850 = inttoptr i32 %v4_9850 to i8*
  store i8 %v1_9850, i8* %v5_9850, align 1
  %v0_9854 = load i32, i32* @r6, align 4
  store i32 %v0_9854, i32* %r0.global-to-local, align 4
  %v1_9858 = inttoptr i32 %v0_9854 to i8*
  %v2_9858 = call i32 @function_1186c(i8* %v1_9858)
  %v0_985c = load i32, i32* @r5, align 4
  store i32 %v0_985c, i32* %r1.global-to-local, align 4
  store i32 %v2_9858, i32* @r4, align 4
  store i32 50, i32* %r0.global-to-local, align 4
  %v2_9868 = inttoptr i32 %v0_985c to i32*
  %v3_9868 = call i32 @function_10d84(i32 50, i32* %v2_9868)
  %v0_986c = load i32, i32* @r4, align 4
  store i32 %v0_986c, i32* @r1, align 4
  store i32 %v3_9868, i32* %r2.global-to-local, align 4
  %v0_9874 = load i32, i32* @r6, align 4
  store i32 %v0_9874, i32* %r0.global-to-local, align 4
  %v3_9878 = inttoptr i32 %v0_9874 to i8*
  %v4_9878 = call i32 @function_11bbc(i8* %v3_9878, i32 %v0_986c, i32 %v3_9868)
  store i32 %v4_9878, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_987c = icmp eq i32 %v4_9878, 0
  store i1 %v2_987c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_987c, label %.thread25, label %bb186

bb186:                                            ; preds = %bb185
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9884 = load i32, i32* @sl, align 4
  %v3_9884 = add i32 %v2_9884, 4
  %v4_9884 = inttoptr i32 %v3_9884 to i32*
  store i32 1, i32* %v4_9884, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb185, %dec_label_pc_97e4, %.thread24, %bb186
  store i32 0, i32* @r7, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9894 = load i32, i32* @sl, align 4
  %v2_9894 = add i32 %v1_9894, 8
  %v3_9894 = inttoptr i32 %v2_9894 to i32*
  store i32 0, i32* %v3_9894, align 4
  %v3_9898 = call i32 @function_10d84(i32 48, i32* null)
  %v0_989c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_989c, i32* @r1, align 4
  store i32 %v3_9898, i32* %r2.global-to-local, align 4
  store i32 %v2_8948, i32* %r0.global-to-local, align 4
  %v4_98a8 = call i32 @function_11bbc(i8* %tmp168, i32 %v0_989c, i32 %v3_9898)
  store i32 %v4_98a8, i32* %r0.global-to-local, align 4
  %v2_98b0 = icmp eq i32 %v4_98a8, -1
  store i1 %v2_98b0, i1* %cpsr_c.global-to-local, align 1
  %v7_98b0 = icmp eq i32 %v4_98a8, -1
  store i1 %v7_98b0, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_98b0, label %.thread26, label %dec_label_pc_98bc

dec_label_pc_98bc:                                ; preds = %.thread25
  %v0_98bc = load i32, i32* @r7, align 4
  store i32 %v0_98bc, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v2_98c4 = inttoptr i32 %v0_98bc to i32*
  %v3_98c4 = call i32 @function_10d84(i32 48, i32* %v2_98c4)
  %v0_98c8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_98c8, i32* @r1, align 4
  store i32 %v3_98c4, i32* %r2.global-to-local, align 4
  store i32 %v2_8948, i32* %r0.global-to-local, align 4
  %v4_98d4 = call i32 @function_11bbc(i8* %tmp168, i32 %v0_98c8, i32 %v3_98c4)
  store i32 %v4_98d4, i32* %r0.global-to-local, align 4
  store i32 %v2_8948, i32* %ip.global-to-local, align 4
  %v2_98dc = add i32 %v4_98d4, %v2_8948
  %v3_98dc = inttoptr i32 %v2_98dc to i8*
  %v4_98dc = load i8, i8* %v3_98dc, align 1
  store i32 %v2_8948, i32* @lr, align 4
  %v2_98e4 = icmp ugt i8 %v4_98dc, 31
  store i1 %v2_98e4, i1* %cpsr_c.global-to-local, align 1
  %v7_98e4 = icmp eq i8 %v4_98dc, 32
  store i1 %v7_98e4, i1* %cpsr_z.global-to-local, align 1
  %v2_98ec = zext i1 %v7_98e4 to i32
  %v2_98ec.v4_98d4 = add i32 %v2_98ec, %v4_98d4
  store i32 %v2_98ec.v4_98d4, i32* @r4, align 4
  %v2_98f0 = add i32 %v2_98ec.v4_98d4, %v2_8948
  store i32 %v2_98f0, i32* @r5, align 4
  store i32 %v2_98f0, i32* %r0.global-to-local, align 4
  %v1_98f8 = load i32, i32* %fp.global-to-local, align 4
  %v2_98f8 = sub i32 %v1_98f8, %v2_98ec.v4_98d4
  store i32 %v2_98f8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9904 = call i32 @function_11924(i32 %v2_98f0, i32 %v2_98f8, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32 2)
  store i32 %v5_9904, i32* %r0.global-to-local, align 4
  %v2_9908 = icmp eq i32 %v5_9904, -1
  store i1 %v2_9908, i1* %cpsr_c.global-to-local, align 1
  %v7_9908 = icmp eq i32 %v5_9904, -1
  store i1 %v7_9908, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9908, label %.thread26, label %dec_label_pc_9910

dec_label_pc_9910:                                ; preds = %dec_label_pc_98bc
  %v2_9910 = icmp ne i32 %v5_9904, 0
  store i1 %v2_9910, i1* %cpsr_c.global-to-local, align 1
  %v7_9910 = icmp eq i32 %v5_9904, 1
  store i1 %v7_9910, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_8d60, i32* %r1.global-to-local, align 4
  %v7_9918 = icmp slt i32 %v5_9904, 2
  br i1 %v7_9918, label %bb188, label %bb187

bb187:                                            ; preds = %dec_label_pc_9910
  %v9_9918 = add i32 %v5_9904, -2
  store i32 %v9_9918, i32* %r0.global-to-local, align 4
  br label %bb188

bb188:                                            ; preds = %dec_label_pc_9910, %bb187
  %v1_9920 = phi i32 [ %v5_9904, %dec_label_pc_9910 ], [ %v9_9918, %bb187 ]
  store i32 %v2_8ddc, i32* %r1.global-to-local, align 4
  %v2_9920 = add i32 %v1_9920, %v2_8ddc
  %v1_9924 = load i32, i32* @r4, align 4
  %v2_9924 = add i32 %v2_9920, %v1_9924
  store i32 %v2_9924, i32* %r3.global-to-local, align 4
  %v0_9928 = load i32, i32* @r7, align 4
  %v1_9928 = trunc i32 %v0_9928 to i8
  %v3_9928 = load i32, i32* @r6, align 4
  %v4_9928 = add i32 %v3_9928, %v2_9924
  %v5_9928 = inttoptr i32 %v4_9928 to i8*
  store i8 %v1_9928, i8* %v5_9928, align 1
  %v0_992c = load i32, i32* @r5, align 4
  store i32 %v0_992c, i32* %r0.global-to-local, align 4
  %v1_9930 = inttoptr i32 %v0_992c to i8*
  %v2_9930 = call i32 @function_1186c(i8* %v1_9930)
  %v0_9934 = load i32, i32* @r7, align 4
  store i32 %v0_9934, i32* %r1.global-to-local, align 4
  store i32 %v2_9930, i32* @r4, align 4
  store i32 49, i32* %r0.global-to-local, align 4
  %v2_9940 = inttoptr i32 %v0_9934 to i32*
  %v3_9940 = call i32 @function_10d84(i32 49, i32* %v2_9940)
  %v0_9944 = load i32, i32* @r4, align 4
  store i32 %v0_9944, i32* @r1, align 4
  store i32 %v3_9940, i32* %r2.global-to-local, align 4
  %v0_994c = load i32, i32* @r5, align 4
  store i32 %v0_994c, i32* %r0.global-to-local, align 4
  %v3_9950 = inttoptr i32 %v0_994c to i8*
  %v4_9950 = call i32 @function_11bbc(i8* %v3_9950, i32 %v0_9944, i32 %v3_9940)
  store i32 %v4_9950, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9954 = icmp eq i32 %v4_9950, 0
  store i1 %v2_9954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9954, label %.thread26, label %bb189

bb189:                                            ; preds = %bb188
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_995c = load i32, i32* @sl, align 4
  %v3_995c = add i32 %v2_995c, 8
  %v4_995c = inttoptr i32 %v3_995c to i32*
  store i32 1, i32* %v4_995c, align 4
  br label %.thread26

.thread26:                                        ; preds = %bb188, %dec_label_pc_98bc, %.thread25, %bb189
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_9968 = call i32 @function_10d84(i32 47, i32* null)
  %v0_996c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_996c, i32* @r1, align 4
  store i32 %v3_9968, i32* %r2.global-to-local, align 4
  store i32 %v2_8948, i32* %r0.global-to-local, align 4
  %v4_9978 = call i32 @function_11bbc(i8* %tmp168, i32 %v0_996c, i32 %v3_9968)
  store i32 %v4_9978, i32* %r0.global-to-local, align 4
  %v2_997c = icmp eq i32 %v4_9978, -1
  store i1 %v2_997c, i1* %cpsr_c.global-to-local, align 1
  %v7_997c = icmp eq i32 %v4_9978, -1
  store i1 %v7_997c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_997c, label %.thread, label %dec_label_pc_9994

.thread:                                          ; preds = %.thread26
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_998c = load i32, i32* @sl, align 4
  %v3_998c = add i32 %v2_998c, 12
  %v4_998c = inttoptr i32 %v3_998c to i32*
  store i32 0, i32* %v4_998c, align 4
  br label %dec_label_pc_9a18

dec_label_pc_9994:                                ; preds = %.thread26
  store i32 -20773, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_999c = call i32 @function_10d84(i32 47, i32* null)
  %v0_99a0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_99a0, i32* @r1, align 4
  store i32 %v3_999c, i32* %r2.global-to-local, align 4
  store i32 %v2_8948, i32* %r0.global-to-local, align 4
  %v4_99ac = call i32 @function_11bbc(i8* %tmp168, i32 %v0_99a0, i32 %v3_999c)
  store i32 %v4_99ac, i32* %r0.global-to-local, align 4
  store i32 %v2_8948, i32* %r2.global-to-local, align 4
  %v2_99b4 = add i32 %v4_99ac, %v2_8948
  %v3_99b4 = inttoptr i32 %v2_99b4 to i8*
  %v4_99b4 = load i8, i8* %v3_99b4, align 1
  %v2_99b8 = icmp ugt i8 %v4_99b4, 31
  store i1 %v2_99b8, i1* %cpsr_c.global-to-local, align 1
  %v7_99b8 = icmp eq i8 %v4_99b4, 32
  store i1 %v7_99b8, i1* %cpsr_z.global-to-local, align 1
  %v2_99c4 = zext i1 %v7_99b8 to i32
  %v2_99c4.v4_99ac = add i32 %v2_99c4, %v4_99ac
  store i32 %v2_99c4.v4_99ac, i32* @r4, align 4
  %v2_99c8 = add i32 %v2_99c4.v4_99ac, %v2_8948
  store i32 %v2_99c8, i32* @r5, align 4
  store i32 %v2_99c8, i32* %r0.global-to-local, align 4
  %v1_99d0 = load i32, i32* %fp.global-to-local, align 4
  %v2_99d0 = sub i32 %v1_99d0, %v2_99c4.v4_99ac
  store i32 %v2_99d0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_99dc = call i32 @function_11924(i32 %v2_99c8, i32 %v2_99d0, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32 2)
  store i32 %v5_99dc, i32* %r0.global-to-local, align 4
  %v2_99e0 = icmp eq i32 %v5_99dc, -1
  store i1 %v2_99e0, i1* %cpsr_c.global-to-local, align 1
  %v7_99e0 = icmp eq i32 %v5_99dc, -1
  store i1 %v7_99e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99e0, label %dec_label_pc_9a18, label %dec_label_pc_99e8

dec_label_pc_99e8:                                ; preds = %dec_label_pc_9994
  %v2_99e8 = icmp ne i32 %v5_99dc, 0
  store i1 %v2_99e8, i1* %cpsr_c.global-to-local, align 1
  %v7_99e8 = icmp eq i32 %v5_99dc, 1
  store i1 %v7_99e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_8d60, i32* %ip.global-to-local, align 4
  %v7_99f0 = icmp slt i32 %v5_99dc, 2
  br i1 %v7_99f0, label %bb191, label %bb190

bb190:                                            ; preds = %dec_label_pc_99e8
  %v9_99f0 = add i32 %v5_99dc, -2
  store i32 %v9_99f0, i32* %r0.global-to-local, align 4
  br label %bb191

bb191:                                            ; preds = %dec_label_pc_99e8, %bb190
  %v1_99f8 = phi i32 [ %v5_99dc, %dec_label_pc_99e8 ], [ %v9_99f0, %bb190 ]
  store i32 %v2_8ddc, i32* %ip.global-to-local, align 4
  %v2_99f8 = add i32 %v1_99f8, %v2_8ddc
  %v1_99fc = load i32, i32* @r4, align 4
  %v2_99fc = add i32 %v2_99f8, %v1_99fc
  store i32 %v2_99fc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9a04 = load i32, i32* @r5, align 4
  store i32 %v0_9a04, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_9a0c = load i32, i32* @r6, align 4
  %v4_9a0c = add i32 %v3_9a0c, %v2_99fc
  %v5_9a0c = inttoptr i32 %v4_9a0c to i8*
  store i8 0, i8* %v5_9a0c, align 1
  %v2_9a10 = inttoptr i32 %v0_9a04 to i8*
  %v3_9a10 = call i32 @function_11990(i8* %v2_9a10, i32 10)
  store i32 %v3_9a10, i32* %r0.global-to-local, align 4
  %v1_9a14 = load i32, i32* @sl, align 4
  %v2_9a14 = add i32 %v1_9a14, 12
  %v3_9a14 = inttoptr i32 %v2_9a14 to i32*
  store i32 %v3_9a10, i32* %v3_9a14, align 4
  br label %dec_label_pc_9a18

dec_label_pc_9a18:                                ; preds = %.thread, %dec_label_pc_9994, %bb191
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9a1c

dec_label_pc_9a1c:                                ; preds = %dec_label_pc_9be8, %dec_label_pc_9b68, %dec_label_pc_9a18
  %v1_9a28 = phi i32 [ 0, %dec_label_pc_9a18 ], [ %v0_9b68, %dec_label_pc_9b68 ], [ %v1_9a28.pre.pre, %dec_label_pc_9be8 ]
  store i32 %v2_8948, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v2_9a28 = add i32 %v1_9a28, %v2_8948
  store i32 %v2_9a28, i32* @r4, align 4
  %v3_9a2c = call i32 @function_10d84(i32 46, i32* null)
  %v0_9a30 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9a30, i32* @r1, align 4
  store i32 %v3_9a2c, i32* %r2.global-to-local, align 4
  %v0_9a38 = load i32, i32* @r4, align 4
  store i32 %v0_9a38, i32* %r0.global-to-local, align 4
  %v3_9a3c = inttoptr i32 %v0_9a38 to i8*
  %v4_9a3c = call i32 @function_11bbc(i8* %v3_9a3c, i32 %v0_9a30, i32 %v3_9a2c)
  store i32 %v4_9a3c, i32* %r0.global-to-local, align 4
  store i32 -20773, i32* %ip.global-to-local, align 4
  %v2_9a48 = icmp eq i32 %v4_9a3c, -1
  store i1 %v2_9a48, i1* %cpsr_c.global-to-local, align 1
  %v7_9a48 = icmp eq i32 %v4_9a3c, -1
  store i1 %v7_9a48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9a48, label %dec_label_pc_9c54, label %dec_label_pc_9a54

dec_label_pc_9a54:                                ; preds = %dec_label_pc_9a1c
  %v0_9a54 = load i32, i32* @sl, align 4
  %v1_9a54 = add i32 %v0_9a54, 16
  %v2_9a54 = inttoptr i32 %v1_9a54 to i32*
  %v3_9a54 = load i32, i32* %v2_9a54, align 4
  store i32 %v3_9a54, i32* %r3.global-to-local, align 4
  %v2_9a58 = icmp ugt i32 %v3_9a54, 3
  store i1 %v2_9a58, i1* %cpsr_c.global-to-local, align 1
  %v7_9a58 = icmp eq i32 %v3_9a54, 4
  store i1 %v7_9a58, i1* %cpsr_z.global-to-local, align 1
  %v8_9a5c = icmp sgt i32 %v3_9a54, 4
  br i1 %v8_9a5c, label %dec_label_pc_9c54, label %dec_label_pc_9a60

dec_label_pc_9a60:                                ; preds = %dec_label_pc_9a54
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v3_9a68 = call i32 @function_10d84(i32 46, i32* null)
  %v0_9a6c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9a6c, i32* @r1, align 4
  store i32 %v3_9a68, i32* %r2.global-to-local, align 4
  %v0_9a74 = load i32, i32* @r4, align 4
  store i32 %v0_9a74, i32* %r0.global-to-local, align 4
  %v3_9a78 = inttoptr i32 %v0_9a74 to i8*
  %v4_9a78 = call i32 @function_11bbc(i8* %v3_9a78, i32 %v0_9a6c, i32 %v3_9a68)
  store i32 %v4_9a78, i32* %r0.global-to-local, align 4
  %v1_9a80 = load i32, i32* @r5, align 4
  %v2_9a80 = add i32 %v1_9a80, %v4_9a78
  store i32 %v2_9a80, i32* @r8, align 4
  %v2_9a84 = add i32 %v2_9a80, %v2_8948
  %v3_9a84 = inttoptr i32 %v2_9a84 to i8*
  %v4_9a84 = load i8, i8* %v3_9a84, align 1
  %v6_9a84 = zext i8 %v4_9a84 to i32
  store i32 %v6_9a84, i32* %r3.global-to-local, align 4
  %v2_9a88 = icmp ugt i8 %v4_9a84, 31
  store i1 %v2_9a88, i1* %cpsr_c.global-to-local, align 1
  %v7_9a88 = icmp eq i8 %v4_9a84, 32
  store i1 %v7_9a88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9a88, label %bb192, label %bb193

bb192:                                            ; preds = %dec_label_pc_9a60
  %v2_9a8c = add i32 %v4_9a78, 1
  store i32 %v2_9a8c, i32* %r0.global-to-local, align 4
  br label %bb193

bb193:                                            ; preds = %dec_label_pc_9a60, %bb192
  %v1_9a9c = phi i32 [ %v4_9a78, %dec_label_pc_9a60 ], [ %v2_9a8c, %bb192 ]
  %v1_9a90 = load i32, i32* %fp.global-to-local, align 4
  %v2_9a90 = sub i32 %v1_9a90, %v1_9a80
  store i32 %v2_9a90, i32* %r3.global-to-local, align 4
  %v2_9a94 = sub i32 %v2_9a90, %v1_9a9c
  store i32 %v2_9a94, i32* @r7, align 4
  %v0_9a98 = load i32, i32* @r4, align 4
  %v2_9a98 = add i32 %v0_9a98, %v1_9a9c
  store i32 %v2_9a98, i32* @r6, align 4
  br i1 %v7_9a88, label %bb194, label %bb195

bb194:                                            ; preds = %bb193
  %v3_9a9c = add i32 %v1_9a9c, %v1_9a80
  store i32 %v3_9a9c, i32* @r8, align 4
  br label %bb195

bb195:                                            ; preds = %bb193, %bb194
  store i32 %v2_9a94, i32* %r1.global-to-local, align 4
  store i32 %v2_9a98, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9ab0 = call i32 @function_11924(i32 %v2_9a98, i32 %v2_9a94, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32 2)
  store i32 %v5_9ab0, i32* %r0.global-to-local, align 4
  %v2_9ab4 = icmp eq i32 %v5_9ab0, -1
  store i1 %v2_9ab4, i1* %cpsr_c.global-to-local, align 1
  %v7_9ab4 = icmp eq i32 %v5_9ab0, -1
  store i1 %v7_9ab4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_9ab0, i32* @r4, align 4
  br i1 %v7_9ab4, label %dec_label_pc_9b68, label %dec_label_pc_9ac0

dec_label_pc_9ac0:                                ; preds = %bb195
  store i32 %v2_8948, i32* %r1.global-to-local, align 4
  %v2_9ac4 = icmp ne i32 %v5_9ab0, 0
  store i1 %v2_9ac4, i1* %cpsr_c.global-to-local, align 1
  %v7_9ac4 = icmp eq i32 %v5_9ab0, 1
  store i1 %v7_9ac4, i1* %cpsr_z.global-to-local, align 1
  %v7_9ac8 = icmp slt i32 %v5_9ab0, 2
  br i1 %v7_9ac8, label %bb197, label %bb196

bb196:                                            ; preds = %dec_label_pc_9ac0
  %v9_9ac8 = add i32 %v5_9ab0, -2
  store i32 %v9_9ac8, i32* @r4, align 4
  br label %bb197

bb197:                                            ; preds = %dec_label_pc_9ac0, %bb196
  %v1_9acc = load i32, i32* @r8, align 4
  %v2_9acc = add i32 %v1_9acc, %v2_8948
  store i32 %v2_9acc, i32* @r5, align 4
  %v0_9ad0 = load i32, i32* @r6, align 4
  store i32 %v0_9ad0, i32* %r0.global-to-local, align 4
  %v0_9ad4 = load i32, i32* @r7, align 4
  store i32 %v0_9ad4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176cc.62 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_9ae0 = call i32 @function_11924(i32 %v0_9ad0, i32 %v0_9ad4, i32 ptrtoint (i32* @global_var_176cc.62 to i32), i32 1)
  store i32 %v4_9ae0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9ae4 = icmp eq i32 %v4_9ae0, 0
  store i1 %v2_9ae4, i1* %cpsr_z.global-to-local, align 1
  %tmp198 = icmp slt i32 %v4_9ae0, 1
  br i1 %tmp198, label %.dec_label_pc_9b04_crit_edge, label %dec_label_pc_9aec

.dec_label_pc_9b04_crit_edge:                     ; preds = %bb197
  %v1_9b0c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9b04

dec_label_pc_9aec:                                ; preds = %bb197
  %v0_9aec = load i32, i32* @r6, align 4
  store i32 %v0_9aec, i32* %r0.global-to-local, align 4
  %v0_9af0 = load i32, i32* @r7, align 4
  store i32 %v0_9af0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176cc.62 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_9afc = call i32 @function_11924(i32 %v0_9aec, i32 %v0_9af0, i32 ptrtoint (i32* @global_var_176cc.62 to i32), i32 1)
  store i32 %v4_9afc, i32* %r0.global-to-local, align 4
  %v1_9b00 = add i32 %v4_9afc, -1
  store i32 %v1_9b00, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9b04

dec_label_pc_9b04:                                ; preds = %.dec_label_pc_9b04_crit_edge, %dec_label_pc_9aec
  %v1_9b0c = phi i32 [ %v1_9b0c.pre, %.dec_label_pc_9b04_crit_edge ], [ %v1_9b00, %dec_label_pc_9aec ]
  %v2_9b0c = add i32 %v1_9b0c, %v2_8ddc
  store i32 -20773, i32* @lr, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_9b18 = load i32, i32* @r8, align 4
  %v2_9b18 = add i32 %v2_9b0c, %v1_9b18
  store i32 %v2_9b18, i32* %r3.global-to-local, align 4
  store i32 %v10_89bc, i32* %r1.global-to-local, align 4
  %v4_9b20 = add i32 %v2_9b18, -20773
  %v5_9b20 = inttoptr i32 %v4_9b20 to i8*
  store i8 0, i8* %v5_9b20, align 1
  %storemerge6.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_9b40.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9b40

dec_label_pc_9b2c:                                ; preds = %dec_label_pc_9b40
  br i1 %v7_9b30, label %dec_label_pc_9b70, label %dec_label_pc_9b38

dec_label_pc_9b38:                                ; preds = %dec_label_pc_9b2c
  store i32 %v10_89bc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9b40

dec_label_pc_9b40:                                ; preds = %dec_label_pc_9b04, %dec_label_pc_9b38
  %v0_9b40 = phi i32 [ %v0_9b2c, %dec_label_pc_9b38 ], [ %v0_9b40.pre, %dec_label_pc_9b04 ]
  %storemerge6 = phi i32 [ %v1_9b54, %dec_label_pc_9b38 ], [ %storemerge6.pre, %dec_label_pc_9b04 ]
  store i32 %storemerge6, i32* %stack_var_-44, align 4
  store i32 %v0_9b40, i32* %r0.global-to-local, align 4
  %v1_9b44 = inttoptr i32 %v0_9b40 to i8*
  %v2_9b44 = call i32 @function_1186c(i8* %v1_9b44)
  store i32 %v2_9b44, i32* %r0.global-to-local, align 4
  store i32 %v10_89bc, i32* %r3.global-to-local, align 4
  %v3_9b4c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9b4c, i32* %r4.global-to-local, align 4
  %v3_9b50 = icmp uge i32 %v2_9b44, %v3_9b4c
  store i1 %v3_9b50, i1* %cpsr_c.global-to-local, align 1
  %v9_9b50 = icmp eq i32 %v2_9b44, %v3_9b4c
  store i1 %v9_9b50, i1* %cpsr_z.global-to-local, align 1
  %v1_9b54 = add i32 %v3_9b4c, 1
  store i32 %v1_9b54, i32* %ip.global-to-local, align 4
  %v8_9b58 = icmp sgt i32 %v2_9b44, %v3_9b4c
  %v0_9b2c = load i32, i32* @r5, align 4
  %v2_9b2c = add i32 %v0_9b2c, %v3_9b4c
  %v3_9b2c = inttoptr i32 %v2_9b2c to i8*
  %v4_9b2c = load i8, i8* %v3_9b2c, align 1
  %v6_9b2c = zext i8 %v4_9b2c to i32
  store i32 %v6_9b2c, i32* %r3.global-to-local, align 4
  %v2_9b30 = icmp ugt i8 %v4_9b2c, 60
  store i1 %v2_9b30, i1* %cpsr_c.global-to-local, align 1
  %v7_9b30 = icmp eq i8 %v4_9b2c, 61
  store i1 %v7_9b30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_9b58, label %dec_label_pc_9b2c, label %dec_label_pc_9b5c

dec_label_pc_9b5c:                                ; preds = %dec_label_pc_9b40
  br i1 %v7_9b30, label %dec_label_pc_9b70, label %dec_label_pc_9b68

dec_label_pc_9b68:                                ; preds = %dec_label_pc_9bb4, %dec_label_pc_9bd8, %dec_label_pc_9b5c, %bb195
  %v0_9b68 = load i32, i32* @r8, align 4
  store i32 %v0_9b68, i32* @r5, align 4
  br label %dec_label_pc_9a1c

dec_label_pc_9b70:                                ; preds = %dec_label_pc_9b2c, %dec_label_pc_9b5c
  %v0_9b70 = load i32, i32* @sl, align 4
  %v1_9b70 = add i32 %v0_9b70, 16
  %v2_9b70 = inttoptr i32 %v1_9b70 to i32*
  %v3_9b70 = load i32, i32* %v2_9b70, align 4
  store i32 %v3_9b70, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_89bc, i32* @lr, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9b7c = icmp eq i32 %v3_9b70, 0
  store i1 %v2_9b7c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %tmp199 = icmp slt i32 %v3_9b70, 1
  br i1 %tmp199, label %dec_label_pc_9bd8, label %dec_label_pc_9b88

dec_label_pc_9b88:                                ; preds = %dec_label_pc_9b70
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9bb4

dec_label_pc_9b90:                                ; preds = %dec_label_pc_9bb4
  store i32 %v10_89bc, i32* %r1.global-to-local, align 4
  %v3_9b94 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9b94, i32* %r3.global-to-local, align 4
  %v0_9b98 = load i32, i32* @sl, align 4
  %v1_9b98 = add i32 %v0_9b98, 16
  %v2_9b98 = inttoptr i32 %v1_9b98 to i32*
  %v3_9b98 = load i32, i32* %v2_9b98, align 4
  %v1_9b9c = add i32 %v3_9b94, 1
  store i32 %v1_9b9c, i32* %ip.global-to-local, align 4
  %v3_9ba0 = icmp uge i32 %v3_9b98, %v1_9b9c
  store i1 %v3_9ba0, i1* %cpsr_c.global-to-local, align 1
  %v9_9ba0 = icmp eq i32 %v3_9b98, %v1_9b9c
  store i1 %v9_9ba0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_89bc, i32* %r2.global-to-local, align 4
  store i32 %v1_9b9c, i32* %r1.global-to-local, align 4
  store i32 %v1_9b9c, i32* %stack_var_-44, align 4
  %v7_9bb0 = icmp sgt i32 %v3_9b98, %v1_9b9c
  %v0_9bc0.pre = load i32, i32* @r5, align 4
  br i1 %v7_9bb0, label %dec_label_pc_9b90.dec_label_pc_9bb4_crit_edge, label %dec_label_pc_9bd8

dec_label_pc_9b90.dec_label_pc_9bb4_crit_edge:    ; preds = %dec_label_pc_9b90
  %v0_9bc4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9bb4

dec_label_pc_9bb4:                                ; preds = %dec_label_pc_9b90.dec_label_pc_9bb4_crit_edge, %dec_label_pc_9b88
  %v0_9bc4 = phi i32 [ %v0_9bc4.pre, %dec_label_pc_9b90.dec_label_pc_9bb4_crit_edge ], [ %v3_9b4c, %dec_label_pc_9b88 ]
  %v0_9bc0 = phi i32 [ %v0_9bc0.pre, %dec_label_pc_9b90.dec_label_pc_9bb4_crit_edge ], [ %v0_9b2c, %dec_label_pc_9b88 ]
  %v0_9bb4 = phi i32 [ %v1_9b9c, %dec_label_pc_9b90.dec_label_pc_9bb4_crit_edge ], [ 0, %dec_label_pc_9b88 ]
  %v1_9bb4 = and i32 %v0_9bb4, 33554432
  %v2_9bb4 = icmp ne i32 %v1_9bb4, 0
  store i1 %v2_9bb4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bb4 = mul i32 %v0_9bb4, 128
  %v1_9bb8 = add i32 %v3_9bb4, 1472
  %v0_9bbc = load i32, i32* %sb.global-to-local, align 4
  %v2_9bbc = add i32 %v1_9bb8, %v0_9bbc
  store i32 %v2_9bbc, i32* %r1.global-to-local, align 4
  store i32 %v0_9bc0, i32* %r0.global-to-local, align 4
  store i32 %v0_9bc4, i32* %r2.global-to-local, align 4
  %v3_9bc8 = inttoptr i32 %v0_9bc0 to i8*
  %v4_9bc8 = call i32 @function_11ccc(i8* %v3_9bc8, i32 %v2_9bbc, i32 %v0_9bc4)
  store i32 %v4_9bc8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9bcc = icmp eq i32 %v4_9bc8, 0
  store i1 %v2_9bcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9bcc, label %dec_label_pc_9b90, label %dec_label_pc_9b68

dec_label_pc_9bd8:                                ; preds = %dec_label_pc_9b90, %dec_label_pc_9b70
  %v0_9bd8 = phi i32 [ %v0_9b2c, %dec_label_pc_9b70 ], [ %v0_9bc0.pre, %dec_label_pc_9b90 ]
  store i32 %v0_9bd8, i32* %r0.global-to-local, align 4
  %v1_9bdc = inttoptr i32 %v0_9bd8 to i8*
  %v2_9bdc = call i32 @function_1186c(i8* %v1_9bdc)
  store i32 %v2_9bdc, i32* %r0.global-to-local, align 4
  %v2_9be0 = icmp ugt i32 %v2_9bdc, 126
  store i1 %v2_9be0, i1* %cpsr_c.global-to-local, align 1
  %v7_9be0 = icmp eq i32 %v2_9bdc, 127
  store i1 %v7_9be0, i1* %cpsr_z.global-to-local, align 1
  %v8_9be4 = icmp sgt i32 %v2_9bdc, 127
  br i1 %v8_9be4, label %dec_label_pc_9b68, label %dec_label_pc_9be8

dec_label_pc_9be8:                                ; preds = %dec_label_pc_9bd8
  %v0_9be8 = load i32, i32* @sl, align 4
  %v1_9be8 = add i32 %v0_9be8, 16
  %v2_9be8 = inttoptr i32 %v1_9be8 to i32*
  %v3_9be8 = load i32, i32* %v2_9be8, align 4
  %v1_9bec = and i32 %v3_9be8, 33554432
  %v2_9bec = icmp ne i32 %v1_9bec, 0
  store i1 %v2_9bec, i1* %cpsr_c.global-to-local, align 1
  %v3_9bec = mul i32 %v3_9be8, 128
  %v1_9bf0 = add i32 %v3_9bec, 1472
  %v0_9bf4 = load i32, i32* @r5, align 4
  store i32 %v0_9bf4, i32* %r1.global-to-local, align 4
  %v0_9bf8 = load i32, i32* %sb.global-to-local, align 4
  %v2_9bf8 = add i32 %v1_9bf0, %v0_9bf8
  store i32 %v2_9bf8, i32* @r0, align 4
  %v2_9bfc = inttoptr i32 %v2_9bf8 to i8*
  %v3_9bfc = call i32 @function_11894(i8* %v2_9bfc, i32 %v0_9bf4)
  store i32 %v3_9bfc, i32* %r0.global-to-local, align 4
  %v0_9c00 = load i32, i32* @sl, align 4
  %v1_9c00 = add i32 %v0_9c00, 16
  %v2_9c00 = inttoptr i32 %v1_9c00 to i32*
  %v3_9c00 = load i32, i32* %v2_9c00, align 4
  %v0_9c04 = load i32, i32* @r8, align 4
  store i32 %v0_9c04, i32* @r5, align 4
  %v1_9c08 = add i32 %v3_9c00, 1
  store i32 %v1_9c08, i32* %r3.global-to-local, align 4
  store i32 %v1_9c08, i32* %v2_9c00, align 4
  %v1_9a28.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9a1c

dec_label_pc_9c14:                                ; preds = %dec_label_pc_9d34
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9c18 = load i32, i32* @r4, align 4
  %v2_9c18 = inttoptr i32 %v1_9c18 to i32*
  store i32 104, i32* %v2_9c18, align 4
  br label %dec_label_pc_9c1c

dec_label_pc_9c1c:                                ; preds = %dec_label_pc_9d60, %dec_label_pc_96f4, %dec_label_pc_9c14
  %v0_9c1c = load i32, i32* @sl, align 4
  %v1_9c1c = add i32 %v0_9c1c, -1452
  %v2_9c1c = inttoptr i32 %v1_9c1c to i32*
  %v3_9c1c = load i32, i32* %v2_9c1c, align 4
  store i32 %v3_9c1c, i32* %r0.global-to-local, align 4
  %v1_9c20 = call i32 @function_124d0(i32 %v3_9c1c)
  store i32 %v1_9c20, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_9c2c = load i32, i32* @sl, align 4
  %v2_9c2c = add i32 %v1_9c2c, -1452
  %v3_9c2c = inttoptr i32 %v2_9c2c to i32*
  store i32 -1, i32* %v3_9c2c, align 4
  %v0_9c30 = load i32, i32* %r2.global-to-local, align 4
  %v1_9c30 = trunc i32 %v0_9c30 to i8
  %v2_9c30 = load i32, i32* @sl, align 4
  %v3_9c30 = add i32 %v2_9c30, -1448
  %v4_9c30 = inttoptr i32 %v3_9c30 to i8*
  store i8 %v1_9c30, i8* %v4_9c30, align 1
  br label %dec_label_pc_8eb8

dec_label_pc_9c38:                                ; preds = %dec_label_pc_8ca0
  store i32 %v1_8ca0, i32* %r3.global-to-local, align 4
  %v1_9c3c = trunc i32 %v1_8ca0 to i8
  store i8 %v1_9c3c, i8* %v2_8cd8, align 1
  %v0_9c40 = load i32, i32* @r6, align 4
  %v1_9c40 = add i32 %v0_9c40, -1452
  %v2_9c40 = inttoptr i32 %v1_9c40 to i32*
  %v3_9c40 = load i32, i32* %v2_9c40, align 4
  store i32 %v3_9c40, i32* %r0.global-to-local, align 4
  %v1_9c44 = call i32 @function_124d0(i32 %v3_9c40)
  store i32 %v1_9c44, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_9c4c = load i32, i32* @r6, align 4
  %v2_9c4c = add i32 %v1_9c4c, -1452
  %v3_9c4c = inttoptr i32 %v2_9c4c to i32*
  store i32 -1, i32* %v3_9c4c, align 4
  br label %dec_label_pc_8cc0

dec_label_pc_9c54:                                ; preds = %dec_label_pc_9a54, %dec_label_pc_9a1c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v3_9c5c = call i32 @function_10d84(i32 45, i32* null)
  %v0_9c60 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9c60, i32* @r1, align 4
  store i32 %v3_9c5c, i32* %r2.global-to-local, align 4
  store i32 %v2_8948, i32* %r0.global-to-local, align 4
  %v4_9c6c = call i32 @function_11bbc(i8* %tmp168, i32 %v0_9c60, i32 %v3_9c5c)
  store i32 %v4_9c6c, i32* %r0.global-to-local, align 4
  %v2_9c70 = icmp eq i32 %v4_9c6c, -1
  store i1 %v2_9c70, i1* %cpsr_c.global-to-local, align 1
  %v7_9c70 = icmp eq i32 %v4_9c6c, -1
  store i1 %v7_9c70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c70, label %dec_label_pc_9de4, label %dec_label_pc_9c78

dec_label_pc_9c78:                                ; preds = %dec_label_pc_9c54
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v3_9c80 = call i32 @function_10d84(i32 45, i32* null)
  %v0_9c84 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9c84, i32* @r1, align 4
  store i32 %v3_9c80, i32* %r2.global-to-local, align 4
  store i32 %v2_8948, i32* %r0.global-to-local, align 4
  %v4_9c90 = call i32 @function_11bbc(i8* %tmp168, i32 %v0_9c84, i32 %v3_9c80)
  store i32 %v4_9c90, i32* %r0.global-to-local, align 4
  %v2_9c98 = add i32 %v4_9c90, %v2_8948
  %v3_9c98 = inttoptr i32 %v2_9c98 to i8*
  %v4_9c98 = load i8, i8* %v3_9c98, align 1
  %v2_9ca0 = icmp ugt i8 %v4_9c98, 31
  store i1 %v2_9ca0, i1* %cpsr_c.global-to-local, align 1
  %v7_9ca0 = icmp eq i8 %v4_9c98, 32
  store i1 %v7_9ca0, i1* %cpsr_z.global-to-local, align 1
  %v2_9ca8 = zext i1 %v7_9ca0 to i32
  %v2_9ca8.v4_9c90 = add i32 %v2_9ca8, %v4_9c90
  store i32 %v2_9ca8.v4_9c90, i32* @r4, align 4
  %v2_9cac = add i32 %v2_9ca8.v4_9c90, %v2_8948
  store i32 %v2_9cac, i32* @r6, align 4
  store i32 %v2_9cac, i32* %r0.global-to-local, align 4
  %v1_9cb4 = load i32, i32* %fp.global-to-local, align 4
  %v2_9cb4 = sub i32 %v1_9cb4, %v2_9ca8.v4_9c90
  store i32 %v2_9cb4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9cc0 = call i32 @function_11924(i32 %v2_9cac, i32 %v2_9cb4, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32 2)
  store i32 %v5_9cc0, i32* %r0.global-to-local, align 4
  %v2_9cc4 = icmp eq i32 %v5_9cc0, -1
  store i1 %v2_9cc4, i1* %cpsr_c.global-to-local, align 1
  %v7_9cc4 = icmp eq i32 %v5_9cc0, -1
  store i1 %v7_9cc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9cc4, label %dec_label_pc_9de4, label %dec_label_pc_9ccc

dec_label_pc_9ccc:                                ; preds = %dec_label_pc_9c78
  %v2_9ccc = icmp ne i32 %v5_9cc0, 0
  store i1 %v2_9ccc, i1* %cpsr_c.global-to-local, align 1
  %v7_9ccc = icmp eq i32 %v5_9cc0, 1
  store i1 %v7_9ccc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_8d60, i32* %r2.global-to-local, align 4
  %v7_9cd4 = icmp slt i32 %v5_9cc0, 2
  br i1 %v7_9cd4, label %bb201, label %bb200

bb200:                                            ; preds = %dec_label_pc_9ccc
  %v9_9cd4 = add i32 %v5_9cc0, -2
  store i32 %v9_9cd4, i32* %r0.global-to-local, align 4
  br label %bb201

bb201:                                            ; preds = %dec_label_pc_9ccc, %bb200
  %v1_9cdc = phi i32 [ %v5_9cc0, %dec_label_pc_9ccc ], [ %v9_9cd4, %bb200 ]
  %v2_9cdc = add i32 %v1_9cdc, %v2_8ddc
  store i32 -20773, i32* @lr, align 4
  %v1_9ce4 = add i32 %v1_9cdc, 1
  store i32 %v1_9ce4, i32* @r5, align 4
  %v1_9ce8 = load i32, i32* @r4, align 4
  %v2_9ce8 = add i32 %v2_9cdc, %v1_9ce8
  store i32 %v2_9ce8, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v0_9cf0 = load i32, i32* @r6, align 4
  store i32 %v0_9cf0, i32* %r0.global-to-local, align 4
  store i32 %v1_9ce4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_176d0.66 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v4_9d00 = add i32 %v2_9ce8, -20773
  %v5_9d00 = inttoptr i32 %v4_9d00 to i8*
  store i8 0, i8* %v5_9d00, align 1
  %v5_9d04 = call i32 @function_11924(i32 %v0_9cf0, i32 %v1_9ce4, i32 ptrtoint ([5 x i8]* @global_var_176d0.66 to i32), i32 4)
  store i32 %v5_9d04, i32* %r0.global-to-local, align 4
  %v2_9d08 = icmp ugt i32 %v5_9d04, 3
  store i1 %v2_9d08, i1* %cpsr_c.global-to-local, align 1
  %v7_9d08 = icmp eq i32 %v5_9d04, 4
  store i1 %v7_9d08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9d08, label %dec_label_pc_a0cc, label %dec_label_pc_9d10

dec_label_pc_9d10:                                ; preds = %bb201
  store i32 %v2_8948, i32* %r1.global-to-local, align 4
  %v1_9d14 = load i32, i32* @r4, align 4
  %v2_9d14 = add i32 %v1_9d14, %v2_8948
  %v3_9d14 = inttoptr i32 %v2_9d14 to i8*
  %v4_9d14 = load i8, i8* %v3_9d14, align 1
  %v6_9d14 = zext i8 %v4_9d14 to i32
  store i32 %v6_9d14, i32* %r3.global-to-local, align 4
  %v2_9d18 = icmp ugt i8 %v4_9d14, 46
  store i1 %v2_9d18, i1* %cpsr_c.global-to-local, align 1
  %v7_9d18 = icmp eq i8 %v4_9d14, 47
  store i1 %v7_9d18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9d18, label %dec_label_pc_a2cc, label %dec_label_pc_9d20

dec_label_pc_9d20:                                ; preds = %dec_label_pc_9d6c, %dec_label_pc_a2fc, %dec_label_pc_a2cc, %dec_label_pc_a19c, %dec_label_pc_a180, %dec_label_pc_9d10, %dec_label_pc_a314, %dec_label_pc_a1c8
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9d24 = load i32, i32* @sl, align 4
  %v3_9d24 = add i32 %v2_9d24, -1448
  %v4_9d24 = inttoptr i32 %v3_9d24 to i8*
  store i8 1, i8* %v4_9d24, align 1
  br label %dec_label_pc_8eb8

dec_label_pc_9d2c:                                ; preds = %dec_label_pc_8eb0
  %v0_9d2c = call i32 @function_128f8()
  store i32 %v0_9d2c, i32* %r0.global-to-local, align 4
  store i32 %v0_9d2c, i32* @r4, align 4
  br label %dec_label_pc_9d34

dec_label_pc_9d34:                                ; preds = %dec_label_pc_9d58, %dec_label_pc_9d2c
  %v1_9d38 = phi i32 [ %v0_9d2c, %dec_label_pc_9d2c ], [ %v0_9d60, %dec_label_pc_9d58 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9d38 = inttoptr i32 %v1_9d38 to i32*
  store i32 0, i32* %v2_9d38, align 4
  store i32 %v2_8948, i32* %r1.global-to-local, align 4
  %v0_9d40 = load i32, i32* @sl, align 4
  %v1_9d40 = add i32 %v0_9d40, -1452
  %v2_9d40 = inttoptr i32 %v1_9d40 to i32*
  %v3_9d40 = load i32, i32* %v2_9d40, align 4
  store i32 %v3_9d40, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_9d48 = load i32, i32* %r3.global-to-local, align 4
  %v1_9d48 = add i32 %v0_9d48, 16384
  store i32 %v1_9d48, i32* %r3.global-to-local, align 4
  %v4_9d4c = call i32 @function_12bb4(i32 %v3_9d40, i32 %v2_8948, i32 10240, i32 %v1_9d48)
  store i32 %v4_9d4c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9d50 = icmp eq i32 %v4_9d4c, 0
  store i1 %v2_9d50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9d50, label %dec_label_pc_9c14, label %dec_label_pc_9d58

dec_label_pc_9d58:                                ; preds = %dec_label_pc_9d34
  %v3_9d58 = icmp eq i32 %v4_9d4c, -1
  store i1 %v3_9d58, i1* %cpsr_c.global-to-local, align 1
  %v8_9d58 = icmp eq i32 %v4_9d4c, -1
  store i1 %v8_9d58, i1* %cpsr_z.global-to-local, align 1
  %v0_9d60 = load i32, i32* @r4, align 4
  br i1 %v3_9d58, label %dec_label_pc_9d60, label %dec_label_pc_9d34

dec_label_pc_9d60:                                ; preds = %dec_label_pc_9d58
  %v1_9d60 = inttoptr i32 %v0_9d60 to i32*
  %v2_9d60 = load i32, i32* %v1_9d60, align 4
  store i32 %v2_9d60, i32* %r3.global-to-local, align 4
  %v2_9d64 = icmp ugt i32 %v2_9d60, 10
  store i1 %v2_9d64, i1* %cpsr_c.global-to-local, align 1
  %v7_9d64 = icmp eq i32 %v2_9d60, 11
  store i1 %v7_9d64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9d64, label %dec_label_pc_9d6c, label %dec_label_pc_9c1c

dec_label_pc_9d6c:                                ; preds = %dec_label_pc_9d60
  %v0_9d6c = load i32, i32* @sl, align 4
  %v1_9d6c = add i32 %v0_9d6c, -1448
  %v2_9d6c = inttoptr i32 %v1_9d6c to i8*
  %v3_9d6c = load i8, i8* %v2_9d6c, align 1
  %v4_9d6c = zext i8 %v3_9d6c to i32
  store i32 %v4_9d6c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9d70 = icmp eq i8 %v3_9d6c, 0
  store i1 %v2_9d70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9d70, label %dec_label_pc_8eb8, label %dec_label_pc_9d20

dec_label_pc_9d7c:                                ; preds = %dec_label_pc_94c0
  %v0_9d7c = load i32, i32* %r3.global-to-local, align 4
  %v1_9d7c = add i32 %v0_9d7c, 1
  store i32 %v1_9d7c, i32* %r3.global-to-local, align 4
  %v1_9d80 = trunc i32 %v1_9d7c to i8
  %v2_9d80 = load i32, i32* @sl, align 4
  %v3_9d80 = add i32 %v2_9d80, -1448
  %v4_9d80 = inttoptr i32 %v3_9d80 to i8*
  store i8 %v1_9d80, i8* %v4_9d80, align 1
  br label %dec_label_pc_8eb8

dec_label_pc_9d88:                                ; preds = %dec_label_pc_9338
  %v0_9d88 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9d88, i32* @r0, align 4
  %v0_9d8c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_9d8c, i32* %r1.global-to-local, align 4
  %v2_9d90 = inttoptr i32 %v0_9d88 to i8*
  %v3_9d90 = call i32 @function_11894(i8* %v2_9d90, i32 %v0_9d8c)
  store i32 %v3_9d90, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9350

dec_label_pc_9d98:                                ; preds = %dec_label_pc_9440
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9d9c = load i32, i32* %fp.global-to-local, align 4
  %v2_9d9c = inttoptr i32 %v1_9d9c to i32*
  store i32 104, i32* %v2_9d9c, align 4
  %v0_9da0 = load i32, i32* @sl, align 4
  %v1_9da0 = add i32 %v0_9da0, -1452
  %v2_9da0 = inttoptr i32 %v1_9da0 to i32*
  %v3_9da0 = load i32, i32* %v2_9da0, align 4
  store i32 %v3_9da0, i32* %r0.global-to-local, align 4
  %v1_9da4 = call i32 @function_124d0(i32 %v3_9da0)
  store i32 %v1_9da4, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_9db0 = load i32, i32* @sl, align 4
  %v2_9db0 = add i32 %v1_9db0, -1452
  %v3_9db0 = inttoptr i32 %v2_9db0 to i32*
  store i32 -1, i32* %v3_9db0, align 4
  %v0_9db4 = load i32, i32* %r2.global-to-local, align 4
  %v1_9db4 = trunc i32 %v0_9db4 to i8
  %v2_9db4 = load i32, i32* @sl, align 4
  %v3_9db4 = add i32 %v2_9db4, -1448
  %v4_9db4 = inttoptr i32 %v3_9db4 to i8*
  store i8 %v1_9db4, i8* %v4_9db4, align 1
  br label %dec_label_pc_8eb8

dec_label_pc_9dbc:                                ; preds = %dec_label_pc_9468
  %v0_9dbc = load i32, i32* %fp.global-to-local, align 4
  %v1_9dbc = inttoptr i32 %v0_9dbc to i32*
  %v2_9dbc = load i32, i32* %v1_9dbc, align 4
  store i32 %v2_9dbc, i32* %r3.global-to-local, align 4
  %v2_9dc0 = icmp ugt i32 %v2_9dbc, 10
  store i1 %v2_9dc0, i1* %cpsr_c.global-to-local, align 1
  %v7_9dc0 = icmp eq i32 %v2_9dbc, 11
  store i1 %v7_9dc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9dc0, label %dec_label_pc_8eb8, label %dec_label_pc_9dc8

dec_label_pc_9dc8:                                ; preds = %dec_label_pc_9dbc
  %v0_9dc8 = load i32, i32* @sl, align 4
  %v1_9dc8 = add i32 %v0_9dc8, -1452
  %v2_9dc8 = inttoptr i32 %v1_9dc8 to i32*
  %v3_9dc8 = load i32, i32* %v2_9dc8, align 4
  store i32 %v3_9dc8, i32* %r0.global-to-local, align 4
  %v1_9dcc = call i32 @function_124d0(i32 %v3_9dc8)
  store i32 %v1_9dcc, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_9dd8 = load i32, i32* @sl, align 4
  %v2_9dd8 = add i32 %v1_9dd8, -1452
  %v3_9dd8 = inttoptr i32 %v2_9dd8 to i32*
  store i32 -1, i32* %v3_9dd8, align 4
  %v0_9ddc = load i32, i32* %r2.global-to-local, align 4
  %v1_9ddc = trunc i32 %v0_9ddc to i8
  %v2_9ddc = load i32, i32* @sl, align 4
  %v3_9ddc = add i32 %v2_9ddc, -1448
  %v4_9ddc = inttoptr i32 %v3_9ddc to i8*
  store i8 %v1_9ddc, i8* %v4_9ddc, align 1
  br label %dec_label_pc_8eb8

dec_label_pc_9de4:                                ; preds = %dec_label_pc_9c78, %dec_label_pc_9c54
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v3_9dec = call i32 @function_10d84(i32 44, i32* null)
  %v0_9df0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9df0, i32* @r1, align 4
  store i32 %v3_9dec, i32* %r2.global-to-local, align 4
  store i32 %v2_8948, i32* %r0.global-to-local, align 4
  %v4_9dfc = call i32 @function_11bbc(i8* %tmp168, i32 %v0_9df0, i32 %v3_9dec)
  store i32 %v4_9dfc, i32* %r0.global-to-local, align 4
  %v2_9e04 = icmp eq i32 %v4_9dfc, -1
  store i1 %v2_9e04, i1* %cpsr_c.global-to-local, align 1
  %v7_9e04 = icmp eq i32 %v4_9dfc, -1
  store i1 %v7_9e04, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_9e04, label %dec_label_pc_a004, label %dec_label_pc_9e10

dec_label_pc_9e10:                                ; preds = %dec_label_pc_9de4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v3_9e18 = call i32 @function_10d84(i32 44, i32* null)
  %v0_9e1c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9e1c, i32* @r1, align 4
  store i32 %v3_9e18, i32* %r2.global-to-local, align 4
  store i32 %v2_8948, i32* %r0.global-to-local, align 4
  %v4_9e28 = call i32 @function_11bbc(i8* %tmp168, i32 %v0_9e1c, i32 %v3_9e18)
  store i32 %v4_9e28, i32* %r0.global-to-local, align 4
  %v2_9e30 = add i32 %v4_9e28, %v2_8948
  %v3_9e30 = inttoptr i32 %v2_9e30 to i8*
  %v4_9e30 = load i8, i8* %v3_9e30, align 1
  %v2_9e38 = icmp ugt i8 %v4_9e30, 31
  store i1 %v2_9e38, i1* %cpsr_c.global-to-local, align 1
  %v7_9e38 = icmp eq i8 %v4_9e30, 32
  store i1 %v7_9e38, i1* %cpsr_z.global-to-local, align 1
  %v2_9e40 = zext i1 %v7_9e38 to i32
  %v2_9e40.v4_9e28 = add i32 %v2_9e40, %v4_9e28
  store i32 %v2_9e40.v4_9e28, i32* @r4, align 4
  %v2_9e44 = add i32 %v2_9e40.v4_9e28, %v2_8948
  store i32 %v2_9e44, i32* @r5, align 4
  store i32 %v2_9e44, i32* %r0.global-to-local, align 4
  %v1_9e4c = load i32, i32* %fp.global-to-local, align 4
  %v2_9e4c = sub i32 %v1_9e4c, %v2_9e40.v4_9e28
  store i32 %v2_9e4c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9e58 = call i32 @function_11924(i32 %v2_9e44, i32 %v2_9e4c, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32 2)
  store i32 %v5_9e58, i32* %r0.global-to-local, align 4
  %v2_9e5c = icmp eq i32 %v5_9e58, -1
  store i1 %v2_9e5c, i1* %cpsr_c.global-to-local, align 1
  %v7_9e5c = icmp eq i32 %v5_9e58, -1
  store i1 %v7_9e5c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_9e58, i32* @r7, align 4
  br i1 %v7_9e5c, label %dec_label_pc_a004, label %dec_label_pc_9e68

dec_label_pc_9e68:                                ; preds = %dec_label_pc_9e10
  %v2_9e68 = icmp ne i32 %v5_9e58, 0
  store i1 %v2_9e68, i1* %cpsr_c.global-to-local, align 1
  %v7_9e68 = icmp eq i32 %v5_9e58, 1
  store i1 %v7_9e68, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_8d60, i32* %ip.global-to-local, align 4
  %v7_9e70 = icmp slt i32 %v5_9e58, 2
  br i1 %v7_9e70, label %bb203, label %bb202

bb202:                                            ; preds = %dec_label_pc_9e68
  %v9_9e70 = add i32 %v5_9e58, -2
  store i32 %v9_9e70, i32* @r7, align 4
  br label %bb203

bb203:                                            ; preds = %dec_label_pc_9e68, %bb202
  %v1_9e78 = phi i32 [ %v5_9e58, %dec_label_pc_9e68 ], [ %v9_9e70, %bb202 ]
  store i32 %v2_8ddc, i32* %ip.global-to-local, align 4
  %v2_9e78 = add i32 %v1_9e78, %v2_8ddc
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9e80 = load i32, i32* @r4, align 4
  %v2_9e80 = add i32 %v2_9e78, %v1_9e80
  store i32 %v2_9e80, i32* %r2.global-to-local, align 4
  %v3_9e84 = load i32, i32* @r6, align 4
  %v4_9e84 = add i32 %v3_9e84, %v2_9e80
  %v5_9e84 = inttoptr i32 %v4_9e84 to i8*
  store i8 0, i8* %v5_9e84, align 1
  store i32 %v10_89bc, i32* @lr, align 4
  %v0_9e8c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_9e8c, i32* %stack_var_-44, align 4
  store i32 %v2_8948, i32* %r1.global-to-local, align 4
  %v1_9e94 = load i32, i32* @r4, align 4
  %v2_9e94 = add i32 %v1_9e94, %v2_8948
  %v3_9e94 = inttoptr i32 %v2_9e94 to i8*
  %v4_9e94 = load i8, i8* %v3_9e94, align 1
  %v6_9e94 = zext i8 %v4_9e94 to i32
  store i32 %v6_9e94, i32* %r0.global-to-local, align 4
  %v1_9e98 = add nsw i32 %v6_9e94, -48
  store i32 %v1_9e98, i32* %r3.global-to-local, align 4
  %v2_9e9c = icmp ugt i32 %v1_9e98, 8
  store i1 %v2_9e9c, i1* %cpsr_c.global-to-local, align 1
  %v7_9e9c = icmp eq i32 %v1_9e98, 9
  store i1 %v7_9e9c, i1* %cpsr_z.global-to-local, align 1
  %v2_9ea0 = xor i1 %v7_9e9c, true
  %v3_9ea0 = and i1 %v2_9e9c, %v2_9ea0
  br i1 %v3_9ea0, label %.thread113, label %dec_label_pc_9ea8

.thread113:                                       ; preds = %bb203
  %v4_9ea0 = load i32, i32* @r5, align 4
  store i32 %v4_9ea0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9ed0

dec_label_pc_9ea8:                                ; preds = %bb203
  %v1_9eb4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9eac

dec_label_pc_9eac:                                ; preds = %dec_label_pc_9eac, %dec_label_pc_9ea8
  %v0_9ec4 = phi i32 [ %v1_9ec4, %dec_label_pc_9eac ], [ 1, %dec_label_pc_9ea8 ]
  store i32 %v10_89bc, i32* %r2.global-to-local, align 4
  store i32 %v0_9ec4, i32* %stack_var_-44, align 4
  %v2_9eb4 = add i32 %v0_9ec4, %v1_9eb4.pre
  %v3_9eb4 = inttoptr i32 %v2_9eb4 to i8*
  %v4_9eb4 = load i8, i8* %v3_9eb4, align 1
  %v6_9eb4 = zext i8 %v4_9eb4 to i32
  store i32 %v6_9eb4, i32* %r0.global-to-local, align 4
  %v1_9eb8 = add nsw i32 %v6_9eb4, -48
  store i32 %v1_9eb8, i32* %r3.global-to-local, align 4
  store i32 %v0_9ec4, i32* %ip.global-to-local, align 4
  %v2_9ec0 = icmp ugt i32 %v1_9eb8, 8
  store i1 %v2_9ec0, i1* %cpsr_c.global-to-local, align 1
  %v7_9ec0 = icmp eq i32 %v1_9eb8, 9
  store i1 %v7_9ec0, i1* %cpsr_z.global-to-local, align 1
  %v1_9ec4 = add i32 %v0_9ec4, 1
  store i32 %v1_9ec4, i32* @lr, align 4
  store i32 %v2_9eb4, i32* %r1.global-to-local, align 4
  %v2_9ecc = xor i1 %v2_9ec0, true
  %v3_9ecc = or i1 %v7_9ec0, %v2_9ecc
  br i1 %v3_9ecc, label %dec_label_pc_9eac, label %dec_label_pc_9ed0

dec_label_pc_9ed0:                                ; preds = %dec_label_pc_9eac, %.thread113
  %v2_9edc = phi i32 [ %v4_9ea0, %.thread113 ], [ %v2_9eb4, %dec_label_pc_9eac ]
  %v0_9ed0 = phi i32 [ %v6_9e94, %.thread113 ], [ %v6_9eb4, %dec_label_pc_9eac ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_9ed0 = icmp eq i32 %v0_9ed0, 0
  store i1 %v2_9ed0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ed0, label %dec_label_pc_a004, label %dec_label_pc_9ed8

dec_label_pc_9ed8:                                ; preds = %dec_label_pc_9ed0
  store i32 0, i32* @r6, align 4
  %v3_9edc = inttoptr i32 %v2_9edc to i8*
  store i8 0, i8* %v3_9edc, align 1
  store i32 %v10_89bc, i32* %r3.global-to-local, align 4
  %v3_9ee4 = load i32, i32* %stack_var_-44, align 4
  %v1_9ee8 = add i32 %v3_9ee4, 1
  store i32 %v1_9ee8, i32* %ip.global-to-local, align 4
  store i32 %v1_9ee8, i32* %stack_var_-44, align 4
  %v0_9ef0 = load i32, i32* @r5, align 4
  %v2_9ef0 = add i32 %v0_9ef0, %v1_9ee8
  %v3_9ef0 = inttoptr i32 %v2_9ef0 to i8*
  %v4_9ef0 = load i8, i8* %v3_9ef0, align 1
  %v6_9ef0 = zext i8 %v4_9ef0 to i32
  store i32 %v6_9ef0, i32* %r3.global-to-local, align 4
  %v2_9ef4 = icmp ugt i8 %v4_9ef0, 31
  store i1 %v2_9ef4, i1* %cpsr_c.global-to-local, align 1
  %v7_9ef4 = icmp eq i8 %v4_9ef0, 32
  store i1 %v7_9ef4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ef4, label %bb205, label %bb204

bb204:                                            ; preds = %dec_label_pc_9ed8
  store i32 %v2_9ef0, i32* @r4, align 4
  br label %.thread37

bb205:                                            ; preds = %dec_label_pc_9ed8
  %v2_9ef8 = add i32 %v3_9ee4, 2
  store i32 %v2_9ef8, i32* %ip.global-to-local, align 4
  %v2_9efc = add i32 %v0_9ef0, %v2_9ef8
  store i32 %v2_9efc, i32* @r4, align 4
  store i32 %v10_89bc, i32* @lr, align 4
  store i32 %v2_9ef8, i32* %v11_89c0, align 4
  %v0_9f08.pre = load i32, i32* @r4, align 4
  br label %.thread37

.thread37:                                        ; preds = %bb204, %bb205
  %v0_9f08 = phi i32 [ %v2_9ef0, %bb204 ], [ %v0_9f08.pre, %bb205 ]
  store i32 %v0_9f08, i32* %r0.global-to-local, align 4
  %v1_9f0c = inttoptr i32 %v0_9f08 to i8*
  %v2_9f0c = call i32 @function_1186c(i8* %v1_9f0c)
  store i32 ptrtoint ([5 x i8]* @global_var_176d8.68 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9f0c, i32* @r1, align 4
  %v0_9f18 = load i32, i32* @r4, align 4
  store i32 %v0_9f18, i32* %r0.global-to-local, align 4
  %v3_9f1c = inttoptr i32 %v0_9f18 to i8*
  %v4_9f1c = call i32 @function_11bbc(i8* %v3_9f1c, i32 %v2_9f0c, i32 ptrtoint ([5 x i8]* @global_var_176d8.68 to i32))
  store i32 %v4_9f1c, i32* %r0.global-to-local, align 4
  %v2_9f20 = icmp eq i32 %v4_9f1c, -1
  store i1 %v2_9f20, i1* %cpsr_c.global-to-local, align 1
  %v7_9f20 = icmp eq i32 %v4_9f1c, -1
  store i1 %v7_9f20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9f20, label %.thread38, label %dec_label_pc_9f30

.thread38:                                        ; preds = %.thread37
  store i32 %v10_89bc, i32* %r3.global-to-local, align 4
  %v4_9f28 = load i32, i32* %v11_89c0, align 4
  store i32 %v4_9f28, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9f64

dec_label_pc_9f30:                                ; preds = %.thread37
  store i32 %v10_89bc, i32* %r1.global-to-local, align 4
  %v3_9f34 = load i32, i32* %stack_var_-44, align 4
  %v0_9f38 = load i32, i32* @r5, align 4
  %v2_9f38 = add i32 %v0_9f38, %v3_9f34
  store i32 %v2_9f38, i32* @r4, align 4
  store i32 %v2_9f38, i32* %r0.global-to-local, align 4
  %v1_9f40 = inttoptr i32 %v2_9f38 to i8*
  %v2_9f40 = call i32 @function_1186c(i8* %v1_9f40)
  store i32 ptrtoint ([5 x i8]* @global_var_176d8.68 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9f40, i32* @r1, align 4
  %v0_9f4c = load i32, i32* @r4, align 4
  store i32 %v0_9f4c, i32* %r0.global-to-local, align 4
  %v4_9f50 = inttoptr i32 %v0_9f4c to i8*
  %v5_9f50 = call i32 @function_11bbc(i8* %v4_9f50, i32 %v2_9f40, i32 ptrtoint ([5 x i8]* @global_var_176d8.68 to i32))
  store i32 %v5_9f50, i32* %r0.global-to-local, align 4
  store i32 %v10_89bc, i32* %r2.global-to-local, align 4
  %v3_9f58 = load i32, i32* %stack_var_-44, align 4
  %v2_9f5c = add i32 %v3_9f58, %v5_9f50
  store i32 %v2_9f5c, i32* %ip.global-to-local, align 4
  store i32 %v2_9f5c, i32* %stack_var_-44, align 4
  br label %dec_label_pc_9f64

dec_label_pc_9f64:                                ; preds = %.thread38, %dec_label_pc_9f30
  %v0_a440 = phi i32 [ %v4_9f28, %.thread38 ], [ %v2_9f5c, %dec_label_pc_9f30 ]
  %v0_9f64 = load i32, i32* @r5, align 4
  %v2_9f64 = add i32 %v0_9f64, %v0_a440
  %v3_9f64 = inttoptr i32 %v2_9f64 to i8*
  %v4_9f64 = load i8, i8* %v3_9f64, align 1
  %v6_9f64 = zext i8 %v4_9f64 to i32
  store i32 %v6_9f64, i32* %r3.global-to-local, align 4
  %v2_9f68 = icmp ugt i8 %v4_9f64, 33
  store i1 %v2_9f68, i1* %cpsr_c.global-to-local, align 1
  %v7_9f68 = icmp eq i8 %v4_9f64, 34
  store i1 %v7_9f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9f68, label %dec_label_pc_a440, label %dec_label_pc_9f70

dec_label_pc_9f70:                                ; preds = %dec_label_pc_a440, %dec_label_pc_9f64, %dec_label_pc_a468
  %v0_9f70 = load i32, i32* @r5, align 4
  store i32 %v0_9f70, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_9f78 = inttoptr i32 %v0_9f70 to i8*
  %v3_9f78 = call i32 @function_11990(i8* %v2_9f78, i32 10)
  store i32 %v3_9f78, i32* %r0.global-to-local, align 4
  %v1_9f7c = add i32 %v3_9f78, -1
  store i32 %v1_9f7c, i32* %r3.global-to-local, align 4
  %v2_9f80 = icmp ugt i32 %v1_9f7c, 7
  store i1 %v2_9f80, i1* %cpsr_c.global-to-local, align 1
  %v7_9f80 = icmp eq i32 %v1_9f7c, 8
  store i1 %v7_9f80, i1* %cpsr_z.global-to-local, align 1
  %v2_9f84 = xor i1 %v2_9f80, true
  %v3_9f84 = or i1 %v7_9f80, %v2_9f84
  br i1 %v3_9f84, label %dec_label_pc_9f98.preheader, label %dec_label_pc_9fac

dec_label_pc_9f98.preheader:                      ; preds = %dec_label_pc_9f70
  store i32 %v2_8e68, i32* %r2.global-to-local, align 4
  %v6_9f88 = add i32 %v3_9f78, %v2_8e68
  store i32 %v6_9f88, i32* @r4, align 4
  br label %dec_label_pc_9f98

dec_label_pc_9f94:                                ; preds = %dec_label_pc_9f98
  %v1_9f94 = call i32 @function_143f4(i32 1)
  store i32 %v1_9f94, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f98

dec_label_pc_9f98:                                ; preds = %dec_label_pc_9f98.preheader, %dec_label_pc_9f94
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9f9c = call i32 @function_12150(i32* null)
  %v0_9fa0 = load i32, i32* @r4, align 4
  %v3_9fa0 = icmp uge i32 %v0_9fa0, %v2_9f9c
  store i1 %v3_9fa0, i1* %cpsr_c.global-to-local, align 1
  %v9_9fa0 = icmp eq i32 %v0_9fa0, %v2_9f9c
  store i1 %v9_9fa0, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_9fa8 = xor i1 %v9_9fa0, true
  %v3_9fa8 = and i1 %v3_9fa0, %v2_9fa8
  br i1 %v3_9fa8, label %dec_label_pc_9f94, label %dec_label_pc_9fac

dec_label_pc_9fac:                                ; preds = %dec_label_pc_9f98, %dec_label_pc_9f70
  store i32 %v10_89bc, i32* %r3.global-to-local, align 4
  %v3_9fb0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9fb0, i32* @r4, align 4
  %v0_9fb4 = load i32, i32* @r5, align 4
  %v2_9fb4 = add i32 %v0_9fb4, %v3_9fb0
  store i32 %v2_9fb4, i32* @r6, align 4
  store i32 %v2_9fb4, i32* %r0.global-to-local, align 4
  %v1_9fbc = inttoptr i32 %v2_9fb4 to i8*
  %v2_9fbc = call i32 @function_1186c(i8* %v1_9fbc)
  store i32 ptrtoint ([5 x i8]* @global_var_176d0.66 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9fbc, i32* @r1, align 4
  %v0_9fc8 = load i32, i32* @r6, align 4
  store i32 %v0_9fc8, i32* %r0.global-to-local, align 4
  %v4_9fcc = inttoptr i32 %v0_9fc8 to i8*
  %v5_9fcc = call i32 @function_11bbc(i8* %v4_9fcc, i32 %v2_9fbc, i32 ptrtoint ([5 x i8]* @global_var_176d0.66 to i32))
  store i32 %v5_9fcc, i32* %r0.global-to-local, align 4
  %v2_9fd0 = icmp ugt i32 %v5_9fcc, 3
  store i1 %v2_9fd0, i1* %cpsr_c.global-to-local, align 1
  %v7_9fd0 = icmp eq i32 %v5_9fcc, 4
  store i1 %v7_9fd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9fd0, label %dec_label_pc_a32c, label %dec_label_pc_9fd8

dec_label_pc_9fd8:                                ; preds = %dec_label_pc_9fac
  %v0_9fd8 = load i32, i32* @r5, align 4
  %v1_9fd8 = load i32, i32* @r4, align 4
  %v2_9fd8 = add i32 %v1_9fd8, %v0_9fd8
  %v3_9fd8 = inttoptr i32 %v2_9fd8 to i8*
  %v4_9fd8 = load i8, i8* %v3_9fd8, align 1
  %v6_9fd8 = zext i8 %v4_9fd8 to i32
  store i32 %v6_9fd8, i32* @r3, align 4
  %v2_9fdc = icmp ugt i8 %v4_9fd8, 46
  store i1 %v2_9fdc, i1* %cpsr_c.global-to-local, align 1
  %v7_9fdc = icmp eq i8 %v4_9fd8, 47
  store i1 %v7_9fdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9fdc, label %dec_label_pc_a488, label %dec_label_pc_9fe4

dec_label_pc_9fe4:                                ; preds = %dec_label_pc_a4a4, %dec_label_pc_a488, %dec_label_pc_a3f0, %dec_label_pc_a3d4, %dec_label_pc_9fd8, %dec_label_pc_a4d0, %dec_label_pc_a41c
  %v0_9fe4 = load i32, i32* %sb.global-to-local, align 4
  %v1_9fe8 = add i32 %v0_9fe4, 1431
  store i32 %v1_9fe8, i32* @r0, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_176ac.43 to i32), i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  %v0_9ff4 = call i32 @function_12a00()
  store i32 %v0_9ff4, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v2_9ffc = load i32, i32* @sl, align 4
  %v3_9ffc = add i32 %v2_9ffc, -1448
  %v4_9ffc = inttoptr i32 %v3_9ffc to i8*
  store i8 10, i8* %v4_9ffc, align 1
  br label %dec_label_pc_8eb8

dec_label_pc_a004:                                ; preds = %dec_label_pc_9ed0, %dec_label_pc_9e10, %dec_label_pc_9de4
  %v0_a004 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_a004, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_176c4.64 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v2_8948, i32* %r0.global-to-local, align 4
  %v5_a014 = call i32 @function_11924(i32 %v2_8948, i32 %v0_a004, i32 ptrtoint ([5 x i8]* @global_var_176c4.64 to i32), i32 4)
  %v0_a018 = load i32, i32* %sb.global-to-local, align 4
  %v1_a01c = add i32 %v0_a018, 1431
  store i32 %v1_a01c, i32* @r4, align 4
  store i32 %v5_a014, i32* @r5, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_176e0.70 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_a01c, i32* %r0.global-to-local, align 4
  %v3_a02c = inttoptr i32 %v1_a01c to i8*
  %v4_a02c = call i32 @function_11c4c(i8* %v3_a02c, i32 ptrtoint ([5 x i8]* @global_var_176e0.70 to i32))
  store i32 %v4_a02c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_a030 = icmp eq i32 %v4_a02c, 0
  store i1 %v2_a030, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a030, label %dec_label_pc_a1e0, label %dec_label_pc_a038

dec_label_pc_a038:                                ; preds = %dec_label_pc_a1e0, %dec_label_pc_a004
  store i32 7, i32* %r3.global-to-local, align 4
  %v2_a03c = load i32, i32* @sl, align 4
  %v3_a03c = add i32 %v2_a03c, -1448
  %v4_a03c = inttoptr i32 %v3_a03c to i8*
  store i8 7, i8* %v4_a03c, align 1
  br label %dec_label_pc_a040

dec_label_pc_a040:                                ; preds = %bb211, %dec_label_pc_a038
  %v0_a040 = load i32, i32* @r5, align 4
  store i32 %v0_a040, i32* %r2.global-to-local, align 4
  %v0_a044 = load i32, i32* @sl, align 4
  %v1_a044 = add i32 %v0_a044, -1452
  %v2_a044 = inttoptr i32 %v1_a044 to i32*
  %v3_a044 = load i32, i32* %v2_a044, align 4
  store i32 %v3_a044, i32* %r0.global-to-local, align 4
  store i32 %v2_8948, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_a050 = call i32 @function_12bb4(i32 %v3_a044, i32 %v2_8948, i32 %v0_a040, i32 16384)
  store i32 %v4_a050, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8eb8

dec_label_pc_a058:                                ; preds = %dec_label_pc_9560
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v0_a060 = load i32, i32* @sl, align 4
  %v1_a060 = add i32 %v0_a060, 660
  %v2_a060 = inttoptr i32 %v1_a060 to i32*
  %v3_a060 = load i32, i32* %v2_a060, align 4
  store i32 %v3_a060, i32* @r4, align 4
  %v3_a064 = call i32 @function_10d84(i32 43, i32* null)
  %v0_a068 = load i32, i32* @r4, align 4
  store i32 %v0_a068, i32* %r1.global-to-local, align 4
  store i32 %v3_a064, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_a074 = load i32, i32* @r7, align 4
  store i32 %v0_a074, i32* %r0.global-to-local, align 4
  %v4_a078 = call i32 @function_11924(i32 %v0_a074, i32 %v0_a068, i32 %v3_a064, i32 11)
  store i32 %v4_a078, i32* %r0.global-to-local, align 4
  %v0_a07c = load i32, i32* @sl, align 4
  %v1_a07c = add i32 %v0_a07c, 660
  %v2_a07c = inttoptr i32 %v1_a07c to i32*
  %v3_a07c = load i32, i32* %v2_a07c, align 4
  %v0_a080 = load i32, i32* @r7, align 4
  %v2_a080 = add i32 %v0_a080, %v4_a078
  store i32 %v2_a080, i32* @r6, align 4
  store i32 %v4_a078, i32* @r4, align 4
  %v2_a088 = sub i32 %v3_a07c, %v4_a078
  store i32 %v2_a088, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176e8.72 to i32), i32* %r2.global-to-local, align 4
  %v0_a090 = load i32, i32* @r8, align 4
  store i32 %v0_a090, i32* %r3.global-to-local, align 4
  store i32 %v2_a080, i32* %r0.global-to-local, align 4
  %v4_a098 = call i32 @function_11924(i32 %v2_a080, i32 %v2_a088, i32 ptrtoint (i32* @global_var_176e8.72 to i32), i32 %v0_a090)
  store i32 %v4_a098, i32* %r0.global-to-local, align 4
  %v0_a09c = load i32, i32* @sl, align 4
  %v1_a09c = add i32 %v0_a09c, 16
  %v2_a09c = inttoptr i32 %v1_a09c to i32*
  %v3_a09c = load i32, i32* %v2_a09c, align 4
  store i32 %v3_a09c, i32* %r3.global-to-local, align 4
  %v1_a0a0 = load i32, i32* @r4, align 4
  %v2_a0a0 = add i32 %v1_a0a0, %v4_a098
  store i32 %v2_a0a0, i32* @r5, align 4
  %v0_a0a4 = load i32, i32* %sb.global-to-local, align 4
  %v2_a0a4 = add i32 %v0_a0a4, %v2_a0a0
  store i32 %v2_a0a4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v2_a0ac = icmp ugt i32 %v3_a09c, 3
  store i1 %v2_a0ac, i1* %cpsr_c.global-to-local, align 1
  %v7_a0ac = icmp eq i32 %v3_a09c, 4
  store i1 %v7_a0ac, i1* %cpsr_z.global-to-local, align 1
  %v3_a0b0 = add i32 %v2_a0a4, 2115
  %v4_a0b0 = inttoptr i32 %v3_a0b0 to i8*
  store i8 0, i8* %v4_a0b0, align 1
  %v7_a0b4 = icmp sgt i32 %v3_a09c, 4
  br i1 %v7_a0b4, label %dec_label_pc_a0b8, label %dec_label_pc_a220

dec_label_pc_a0b8:                                ; preds = %dec_label_pc_a058, %dec_label_pc_a220, %dec_label_pc_a230
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v1_a0c0 = load i32, i32* @sl, align 4
  %v2_a0c0 = add i32 %v1_a0c0, 12
  %v3_a0c0 = inttoptr i32 %v2_a0c0 to i32*
  store i32 -1, i32* %v3_a0c0, align 4
  %v0_a0c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a0c4 = trunc i32 %v0_a0c4 to i8
  %v2_a0c4 = load i32, i32* @sl, align 4
  %v3_a0c4 = add i32 %v2_a0c4, -1448
  %v4_a0c4 = inttoptr i32 %v3_a0c4 to i8*
  store i8 %v1_a0c4, i8* %v4_a0c4, align 1
  br label %dec_label_pc_8eb8

dec_label_pc_a0cc:                                ; preds = %bb201
  store i32 7, i32* @ip, align 4
  store i32 %v10_89bc, i32* %r1.global-to-local, align 4
  store i32 7, i32* %stack_var_-44, align 4
  %v0_a0d8 = load i32, i32* @r6, align 4
  %v1_a0d8 = add i32 %v0_a0d8, 4
  %v2_a0d8 = inttoptr i32 %v1_a0d8 to i8*
  %v3_a0d8 = load i8, i8* %v2_a0d8, align 1
  %v4_a0d8 = zext i8 %v3_a0d8 to i32
  store i32 %v4_a0d8, i32* @r3, align 4
  %v2_a0dc = icmp ugt i8 %v3_a0d8, 114
  store i1 %v2_a0dc, i1* %cpsr_c.global-to-local, align 1
  %v7_a0dc = icmp eq i8 %v3_a0d8, 115
  store i1 %v7_a0dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a0dc, label %bb206, label %.thread41

bb206:                                            ; preds = %dec_label_pc_a0cc
  store i32 8, i32* @ip, align 4
  store i32 8, i32* %stack_var_-44, align 4
  br label %.thread41

.thread41:                                        ; preds = %dec_label_pc_a0cc, %bb206
  %v3_a0ec = phi i32 [ 7, %dec_label_pc_a0cc ], [ 8, %bb206 ]
  store i32 %v0_a0d8, i32* @r0, align 4
  %v1_a0f4 = load i32, i32* @r5, align 4
  %v2_a0f4 = sub i32 %v1_a0f4, %v3_a0ec
  store i32 %v2_a0f4, i32* @r2, align 4
  %v2_a0f8 = add i32 %v3_a0ec, %v0_a0d8
  store i32 %v2_a0f8, i32* @r1, align 4
  %v3_a0fc = call i32 @function_129f0(i32 %v0_a0d8, i32 %v2_a0f8, i32 %v2_a0f4)
  store i32 %v3_a0fc, i32* %r0.global-to-local, align 4
  store i32 %v10_89bc, i32* %r3.global-to-local, align 4
  %v0_a104 = load i32, i32* @r7, align 4
  store i32 %v0_a104, i32* %stack_var_-44, align 4
  store i32 %v2_8948, i32* @lr, align 4
  %v1_a10c = load i32, i32* @r4, align 4
  %v2_a10c = add i32 %v1_a10c, %v2_8948
  %v3_a10c = inttoptr i32 %v2_a10c to i8*
  %v4_a10c = load i8, i8* %v3_a10c, align 1
  %v6_a10c = zext i8 %v4_a10c to i32
  store i32 %v6_a10c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_a110 = icmp eq i8 %v4_a10c, 0
  store i1 %v2_a110, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a110, label %dec_label_pc_a154, label %dec_label_pc_a118

dec_label_pc_a118:                                ; preds = %.thread41
  %v2_a118 = icmp ugt i8 %v4_a10c, 46
  store i1 %v2_a118, i1* %cpsr_c.global-to-local, align 1
  %v7_a118 = icmp eq i8 %v4_a10c, 47
  store i1 %v7_a118, i1* %cpsr_z.global-to-local, align 1
  %v1_a11c = load i32, i32* @r6, align 4
  br i1 %v7_a118, label %bb207, label %dec_label_pc_a124

bb207:                                            ; preds = %dec_label_pc_a118
  store i32 %v1_a11c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_a214

dec_label_pc_a124:                                ; preds = %dec_label_pc_a118
  store i32 %v0_a104, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_a134

dec_label_pc_a12c:                                ; preds = %dec_label_pc_a134
  %v2_a12c = icmp ugt i8 %v4_a140, 46
  store i1 %v2_a12c, i1* %cpsr_c.global-to-local, align 1
  %v7_a12c = icmp eq i8 %v4_a140, 47
  store i1 %v7_a12c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a12c, label %dec_label_pc_a214, label %dec_label_pc_a134

dec_label_pc_a134:                                ; preds = %dec_label_pc_a12c, %dec_label_pc_a124
  %v0_a134 = phi i32 [ %v1_a134, %dec_label_pc_a12c ], [ %v0_a104, %dec_label_pc_a124 ]
  %v1_a134 = add i32 %v0_a134, 1
  store i32 %v1_a134, i32* %ip.global-to-local, align 4
  store i32 %v10_89bc, i32* %r2.global-to-local, align 4
  store i32 %v1_a134, i32* %stack_var_-44, align 4
  %v2_a140 = add i32 %v1_a134, %v1_a11c
  %v3_a140 = inttoptr i32 %v2_a140 to i8*
  %v4_a140 = load i8, i8* %v3_a140, align 1
  %v6_a140 = zext i8 %v4_a140 to i32
  store i32 %v6_a140, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_a144 = icmp eq i8 %v4_a140, 0
  store i1 %v2_a144, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a134, i32* %r1.global-to-local, align 4
  store i32 %v2_a140, i32* %r2.global-to-local, align 4
  br i1 %v2_a144, label %dec_label_pc_a154, label %dec_label_pc_a12c

dec_label_pc_a154:                                ; preds = %dec_label_pc_a134, %.thread41, %dec_label_pc_a214
  %v0_a154 = load i32, i32* @r6, align 4
  store i32 %v0_a154, i32* %r0.global-to-local, align 4
  %v1_a158 = inttoptr i32 %v0_a154 to i8*
  %v2_a158 = call i32 @function_1186c(i8* %v1_a158)
  store i32 %v2_a158, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_a15c = icmp eq i32 %v2_a158, 0
  store i1 %v2_a15c, i1* %cpsr_z.global-to-local, align 1
  %tmp208 = icmp slt i32 %v2_a158, 1
  br i1 %tmp208, label %dec_label_pc_a180, label %dec_label_pc_a164

dec_label_pc_a164:                                ; preds = %dec_label_pc_a154
  %v0_a164 = load i32, i32* @r6, align 4
  store i32 %v0_a164, i32* %r0.global-to-local, align 4
  %v1_a168 = inttoptr i32 %v0_a164 to i8*
  %v2_a168 = call i32 @function_1186c(i8* %v1_a168)
  store i32 %v2_a168, i32* %r0.global-to-local, align 4
  %v1_a16c = add i32 %v2_a168, -127
  %v2_a16c = icmp ugt i32 %v2_a168, 126
  store i1 %v2_a16c, i1* %cpsr_c.global-to-local, align 1
  %v3_a16c = sub i32 126, %v2_a168
  %v4_a16c = and i32 %v3_a16c, %v2_a168
  %v5_a16c = icmp slt i32 %v4_a16c, 0
  %v6_a16c = icmp slt i32 %v1_a16c, 0
  %v7_a16c = icmp eq i32 %v2_a168, 127
  store i1 %v7_a16c, i1* %cpsr_z.global-to-local, align 1
  %v7_a170 = icmp sgt i32 %v2_a168, 127
  br i1 %v7_a170, label %.thread44, label %bb209

bb209:                                            ; preds = %dec_label_pc_a164
  %v8_a170 = load i32, i32* %sb.global-to-local, align 4
  %v9_a174 = add i32 %v8_a170, 789
  store i32 %v9_a174, i32* %r0.global-to-local, align 4
  %v8_a178 = load i32, i32* @r6, align 4
  store i32 %v8_a178, i32* %r1.global-to-local, align 4
  br label %.thread44

.thread44:                                        ; preds = %dec_label_pc_a164, %bb209
  store i32 41344, i32* @lr, align 4
  %v3_a17c = xor i1 %v6_a16c, %v5_a16c
  %v4_a17c = or i1 %v7_a16c, %v3_a17c
  call void @__pseudo_cond_branch(i1 %v4_a17c, i32 ptrtoint (i32* @global_var_11894.73 to i32))
  br label %dec_label_pc_a180

dec_label_pc_a180:                                ; preds = %dec_label_pc_a154, %.thread44
  store i32 %v10_89bc, i32* %r3.global-to-local, align 4
  %v3_a184 = load i32, i32* %stack_var_-44, align 4
  %v0_a188 = load i32, i32* @r6, align 4
  %v1_a188 = add i32 %v0_a188, 1
  store i32 %v1_a188, i32* @r5, align 4
  %v2_a18c = add i32 %v1_a188, %v3_a184
  store i32 %v2_a18c, i32* %r0.global-to-local, align 4
  %v1_a190 = inttoptr i32 %v2_a18c to i8*
  %v2_a190 = call i32 @function_1186c(i8* %v1_a190)
  store i32 %v2_a190, i32* %r0.global-to-local, align 4
  %v2_a194 = icmp ugt i32 %v2_a190, 254
  store i1 %v2_a194, i1* %cpsr_c.global-to-local, align 1
  %v7_a194 = icmp eq i32 %v2_a190, 255
  store i1 %v7_a194, i1* %cpsr_z.global-to-local, align 1
  %v8_a198 = icmp sgt i32 %v2_a190, 255
  br i1 %v8_a198, label %dec_label_pc_9d20, label %dec_label_pc_a19c

dec_label_pc_a19c:                                ; preds = %dec_label_pc_a180
  %v0_a19c = load i32, i32* %sb.global-to-local, align 4
  %v1_a1a0 = add i32 %v0_a19c, 533
  store i32 %v1_a1a0, i32* @r4, align 4
  store i32 %v1_a1a0, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_a1ac = call i32 @function_11900(i32 %v1_a1a0, i32 255)
  store i32 %v10_89bc, i32* %ip.global-to-local, align 4
  %v3_a1b4 = load i32, i32* %stack_var_-44, align 4
  %v0_a1b8 = load i32, i32* @r5, align 4
  %v2_a1b8 = add i32 %v0_a1b8, %v3_a1b4
  store i32 %v2_a1b8, i32* %r0.global-to-local, align 4
  %v1_a1bc = inttoptr i32 %v2_a1b8 to i8*
  %v2_a1bc = call i32 @function_1186c(i8* %v1_a1bc)
  store i32 %v2_a1bc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_a1c0 = icmp eq i32 %v2_a1bc, 0
  store i1 %v2_a1c0, i1* %cpsr_z.global-to-local, align 1
  %tmp210 = icmp slt i32 %v2_a1bc, 1
  br i1 %tmp210, label %dec_label_pc_9d20, label %dec_label_pc_a1c8

dec_label_pc_a1c8:                                ; preds = %dec_label_pc_a19c
  %v3_a1cc = load i32, i32* %stack_var_-44, align 4
  %v0_a1d0 = load i32, i32* @r4, align 4
  store i32 %v0_a1d0, i32* @r0, align 4
  %v0_a1d4 = load i32, i32* @r5, align 4
  %v2_a1d4 = add i32 %v0_a1d4, %v3_a1cc
  store i32 %v2_a1d4, i32* %r1.global-to-local, align 4
  %v2_a1d8 = inttoptr i32 %v0_a1d0 to i8*
  %v3_a1d8 = call i32 @function_11894(i8* %v2_a1d8, i32 %v2_a1d4)
  store i32 %v3_a1d8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9d20

dec_label_pc_a1e0:                                ; preds = %dec_label_pc_a004
  %v0_a1e0 = load i32, i32* @r4, align 4
  store i32 %v0_a1e0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_176ac.43 to i32), i32* %r1.global-to-local, align 4
  %v3_a1e8 = inttoptr i32 %v0_a1e0 to i8*
  %v4_a1e8 = call i32 @function_11c4c(i8* %v3_a1e8, i32 ptrtoint ([4 x i8]* @global_var_176ac.43 to i32))
  store i32 %v4_a1e8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_a1ec = icmp eq i32 %v4_a1e8, 0
  store i1 %v2_a1ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a1ec, label %bb211, label %dec_label_pc_a038

bb211:                                            ; preds = %dec_label_pc_a1e0
  %v0_a1f4 = load i32, i32* %fp.global-to-local, align 4
  %v1_a1f4 = load i32, i32* @r5, align 4
  %v3_a1f4 = icmp uge i32 %v0_a1f4, %v1_a1f4
  store i1 %v3_a1f4, i1* %cpsr_c.global-to-local, align 1
  %v9_a1f4 = icmp eq i32 %v0_a1f4, %v1_a1f4
  store i1 %v9_a1f4, i1* %cpsr_z.global-to-local, align 1
  %v7_a1f8 = icmp sgt i32 %v0_a1f4, %v1_a1f4
  %. = select i1 %v7_a1f8, i32 10, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v9_a200 = trunc i32 %. to i8
  %v10_a200 = load i32, i32* @sl, align 4
  %v11_a200 = add i32 %v10_a200, -1448
  %v12_a200 = inttoptr i32 %v11_a200 to i8*
  store i8 %v9_a200, i8* %v12_a200, align 1
  br label %dec_label_pc_a040

dec_label_pc_a20c:                                ; preds = %dec_label_pc_9604
  %v0_a20c = load i32, i32* @r4, align 4
  %v1_a20c = trunc i32 %v0_a20c to i8
  %v2_a20c = load i32, i32* @sl, align 4
  %v3_a20c = add i32 %v2_a20c, -1448
  %v4_a20c = inttoptr i32 %v3_a20c to i8*
  store i8 %v1_a20c, i8* %v4_a20c, align 1
  br label %dec_label_pc_8eb8

dec_label_pc_a214:                                ; preds = %dec_label_pc_a12c, %bb207
  %v2_a218 = phi i32 [ %v1_a11c, %bb207 ], [ %v2_a140, %dec_label_pc_a12c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a218 = inttoptr i32 %v2_a218 to i8*
  store i8 0, i8* %v3_a218, align 1
  br label %dec_label_pc_a154

dec_label_pc_a220:                                ; preds = %dec_label_pc_a058
  %v0_a220 = load i32, i32* @r6, align 4
  store i32 %v0_a220, i32* %r0.global-to-local, align 4
  %v1_a224 = inttoptr i32 %v0_a220 to i8*
  %v2_a224 = call i32 @function_1186c(i8* %v1_a224)
  store i32 %v2_a224, i32* %r0.global-to-local, align 4
  %v2_a228 = icmp ugt i32 %v2_a224, 126
  store i1 %v2_a228, i1* %cpsr_c.global-to-local, align 1
  %v7_a228 = icmp eq i32 %v2_a224, 127
  store i1 %v7_a228, i1* %cpsr_z.global-to-local, align 1
  %v8_a22c = icmp sgt i32 %v2_a224, 127
  br i1 %v8_a22c, label %dec_label_pc_a0b8, label %dec_label_pc_a230

dec_label_pc_a230:                                ; preds = %dec_label_pc_a220
  %v0_a230 = load i32, i32* @sl, align 4
  %v1_a230 = add i32 %v0_a230, 16
  %v2_a230 = inttoptr i32 %v1_a230 to i32*
  %v3_a230 = load i32, i32* %v2_a230, align 4
  %v1_a234 = and i32 %v3_a230, 33554432
  %v2_a234 = icmp ne i32 %v1_a234, 0
  store i1 %v2_a234, i1* %cpsr_c.global-to-local, align 1
  %v3_a234 = mul i32 %v3_a230, 128
  %v1_a238 = add i32 %v3_a234, 1472
  %v0_a23c = load i32, i32* @r6, align 4
  store i32 %v0_a23c, i32* %r1.global-to-local, align 4
  %v0_a240 = load i32, i32* %sb.global-to-local, align 4
  %v2_a240 = add i32 %v1_a238, %v0_a240
  store i32 %v2_a240, i32* @r0, align 4
  %v2_a244 = inttoptr i32 %v2_a240 to i8*
  %v3_a244 = call i32 @function_11894(i8* %v2_a244, i32 %v0_a23c)
  store i32 %v3_a244, i32* %r0.global-to-local, align 4
  %v0_a248 = load i32, i32* @sl, align 4
  %v1_a248 = add i32 %v0_a248, 16
  %v2_a248 = inttoptr i32 %v1_a248 to i32*
  %v3_a248 = load i32, i32* %v2_a248, align 4
  %v1_a24c = and i32 %v3_a248, 33554432
  %v2_a24c = icmp ne i32 %v1_a24c, 0
  store i1 %v2_a24c, i1* %cpsr_c.global-to-local, align 1
  %v3_a24c = mul i32 %v3_a248, 128
  %v1_a250 = add i32 %v3_a24c, 1472
  %v0_a254 = load i32, i32* %sb.global-to-local, align 4
  %v2_a254 = add i32 %v1_a250, %v0_a254
  store i32 %v2_a254, i32* @r4, align 4
  store i32 %v2_a254, i32* %r0.global-to-local, align 4
  %v1_a25c = inttoptr i32 %v2_a254 to i8*
  %v2_a25c = call i32 @function_1186c(i8* %v1_a25c)
  store i32 ptrtoint (i32* @global_var_179e4.75 to i32), i32* %r1.global-to-local, align 4
  %v0_a264 = load i32, i32* @r4, align 4
  %v2_a264 = add i32 %v0_a264, %v2_a25c
  store i32 %v2_a264, i32* @r0, align 4
  %v2_a268 = inttoptr i32 %v2_a264 to i8*
  %v3_a268 = call i32 @function_11894(i8* %v2_a268, i32 ptrtoint (i32* @global_var_179e4.75 to i32))
  store i32 %v3_a268, i32* %r0.global-to-local, align 4
  %v0_a26c = load i32, i32* @r5, align 4
  %v1_a26c = add i32 %v0_a26c, 3
  store i32 %v1_a26c, i32* @r5, align 4
  %v0_a270 = load i32, i32* @sl, align 4
  %v1_a270 = add i32 %v0_a270, 660
  %v2_a270 = inttoptr i32 %v1_a270 to i32*
  %v3_a270 = load i32, i32* %v2_a270, align 4
  %v0_a274 = load i32, i32* @r7, align 4
  %v2_a274 = add i32 %v0_a274, %v1_a26c
  store i32 %v2_a274, i32* @r6, align 4
  %v2_a278 = sub i32 %v3_a270, %v1_a26c
  store i32 %v2_a278, i32* %r1.global-to-local, align 4
  %v0_a27c = load i32, i32* @r8, align 4
  store i32 %v0_a27c, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176e8.72 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a274, i32* %r0.global-to-local, align 4
  %v4_a288 = call i32 @function_11924(i32 %v2_a274, i32 %v2_a278, i32 ptrtoint (i32* @global_var_176e8.72 to i32), i32 %v0_a27c)
  store i32 %v4_a288, i32* %r0.global-to-local, align 4
  %v0_a28c = load i32, i32* @sl, align 4
  %v1_a28c = add i32 %v0_a28c, 16
  %v2_a28c = inttoptr i32 %v1_a28c to i32*
  %v3_a28c = load i32, i32* %v2_a28c, align 4
  %v1_a290 = and i32 %v3_a28c, 33554432
  %v2_a290 = icmp ne i32 %v1_a290, 0
  store i1 %v2_a290, i1* %cpsr_c.global-to-local, align 1
  %v3_a290 = mul i32 %v3_a28c, 128
  %v1_a294 = add i32 %v3_a290, 1472
  %v0_a298 = load i32, i32* %sb.global-to-local, align 4
  %v1_a298 = load i32, i32* @r5, align 4
  %v2_a29c = add i32 %v1_a294, %v0_a298
  store i32 %v2_a29c, i32* @r4, align 4
  %v2_a298 = add i32 %v0_a298, %v4_a288
  %v2_a2a0 = add i32 %v2_a298, %v1_a298
  store i32 %v2_a2a0, i32* @r5, align 4
  %v0_a2a4 = load i32, i32* %fp.global-to-local, align 4
  %v1_a2a4 = trunc i32 %v0_a2a4 to i8
  %v3_a2a4 = add i32 %v2_a2a0, 2115
  %v4_a2a4 = inttoptr i32 %v3_a2a4 to i8*
  store i8 %v1_a2a4, i8* %v4_a2a4, align 1
  %v0_a2a8 = load i32, i32* @r4, align 4
  store i32 %v0_a2a8, i32* %r0.global-to-local, align 4
  %v1_a2ac = inttoptr i32 %v0_a2a8 to i8*
  %v2_a2ac = call i32 @function_1186c(i8* %v1_a2ac)
  %v0_a2b0 = load i32, i32* @r6, align 4
  store i32 %v0_a2b0, i32* %r1.global-to-local, align 4
  %v0_a2b4 = load i32, i32* @r4, align 4
  %v2_a2b4 = add i32 %v0_a2b4, %v2_a2ac
  store i32 %v2_a2b4, i32* @r0, align 4
  %v2_a2b8 = inttoptr i32 %v2_a2b4 to i8*
  %v3_a2b8 = call i32 @function_11894(i8* %v2_a2b8, i32 %v0_a2b0)
  store i32 %v3_a2b8, i32* %r0.global-to-local, align 4
  %v0_a2bc = load i32, i32* @sl, align 4
  %v1_a2bc = add i32 %v0_a2bc, 16
  %v2_a2bc = inttoptr i32 %v1_a2bc to i32*
  %v3_a2bc = load i32, i32* %v2_a2bc, align 4
  %v1_a2c0 = add i32 %v3_a2bc, 1
  store i32 %v1_a2c0, i32* %r3.global-to-local, align 4
  store i32 %v1_a2c0, i32* %v2_a2bc, align 4
  br label %dec_label_pc_a0b8

dec_label_pc_a2cc:                                ; preds = %dec_label_pc_9d10
  %v0_a2cc = load i32, i32* %sb.global-to-local, align 4
  %v1_a2d0 = add i32 %v0_a2cc, 533
  store i32 %v1_a2d0, i32* @r4, align 4
  store i32 %v1_a2d0, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_a2dc = call i32 @function_11900(i32 %v1_a2d0, i32 255)
  store i32 %v10_89bc, i32* %r2.global-to-local, align 4
  %v3_a2e4 = load i32, i32* %stack_var_-44, align 4
  %v0_a2e8 = load i32, i32* @r6, align 4
  %v1_a2e8 = add i32 %v0_a2e8, 1
  store i32 %v1_a2e8, i32* @r6, align 4
  %v2_a2ec = add i32 %v1_a2e8, %v3_a2e4
  store i32 %v2_a2ec, i32* %r0.global-to-local, align 4
  %v1_a2f0 = inttoptr i32 %v2_a2ec to i8*
  %v2_a2f0 = call i32 @function_1186c(i8* %v1_a2f0)
  store i32 %v2_a2f0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_a2f4 = icmp eq i32 %v2_a2f0, 0
  store i1 %v2_a2f4, i1* %cpsr_z.global-to-local, align 1
  %tmp212 = icmp slt i32 %v2_a2f0, 1
  br i1 %tmp212, label %dec_label_pc_9d20, label %dec_label_pc_a2fc

dec_label_pc_a2fc:                                ; preds = %dec_label_pc_a2cc
  store i32 %v10_89bc, i32* %r3.global-to-local, align 4
  %v3_a300 = load i32, i32* %stack_var_-44, align 4
  %v0_a304 = load i32, i32* @r6, align 4
  %v2_a304 = add i32 %v0_a304, %v3_a300
  store i32 %v2_a304, i32* %r0.global-to-local, align 4
  %v1_a308 = inttoptr i32 %v2_a304 to i8*
  %v2_a308 = call i32 @function_1186c(i8* %v1_a308)
  store i32 %v2_a308, i32* %r0.global-to-local, align 4
  %v2_a30c = icmp ugt i32 %v2_a308, 254
  store i1 %v2_a30c, i1* %cpsr_c.global-to-local, align 1
  %v7_a30c = icmp eq i32 %v2_a308, 255
  store i1 %v7_a30c, i1* %cpsr_z.global-to-local, align 1
  %v8_a310 = icmp sgt i32 %v2_a308, 255
  br i1 %v8_a310, label %dec_label_pc_9d20, label %dec_label_pc_a314

dec_label_pc_a314:                                ; preds = %dec_label_pc_a2fc
  store i32 %v10_89bc, i32* %ip.global-to-local, align 4
  %v3_a318 = load i32, i32* %stack_var_-44, align 4
  %v0_a31c = load i32, i32* @r4, align 4
  store i32 %v0_a31c, i32* @r0, align 4
  %v0_a320 = load i32, i32* @r6, align 4
  %v2_a320 = add i32 %v0_a320, %v3_a318
  store i32 %v2_a320, i32* %r1.global-to-local, align 4
  %v2_a324 = inttoptr i32 %v0_a31c to i8*
  %v3_a324 = call i32 @function_11894(i8* %v2_a324, i32 %v2_a320)
  store i32 %v3_a324, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9d20

dec_label_pc_a32c:                                ; preds = %dec_label_pc_9fac
  store i32 7, i32* @ip, align 4
  store i32 %v10_89bc, i32* @lr, align 4
  store i32 7, i32* %stack_var_-44, align 4
  %v0_a338 = load i32, i32* @r6, align 4
  %v1_a338 = add i32 %v0_a338, 4
  %v2_a338 = inttoptr i32 %v1_a338 to i8*
  %v3_a338 = load i8, i8* %v2_a338, align 1
  %v4_a338 = zext i8 %v3_a338 to i32
  store i32 %v4_a338, i32* @r3, align 4
  %v2_a33c = icmp ugt i8 %v3_a338, 114
  store i1 %v2_a33c, i1* %cpsr_c.global-to-local, align 1
  %v7_a33c = icmp eq i8 %v3_a338, 115
  store i1 %v7_a33c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a33c, label %bb213, label %.thread47

bb213:                                            ; preds = %dec_label_pc_a32c
  store i32 8, i32* @ip, align 4
  store i32 8, i32* %stack_var_-44, align 4
  br label %.thread47

.thread47:                                        ; preds = %dec_label_pc_a32c, %bb213
  %v3_a34c = phi i32 [ 7, %dec_label_pc_a32c ], [ 8, %bb213 ]
  %v1_a350 = sub nsw i32 1, %v3_a34c
  %v1_a354 = load i32, i32* @r7, align 4
  %v2_a354 = add i32 %v1_a354, %v1_a350
  store i32 %v2_a354, i32* @r2, align 4
  %v2_a358 = add i32 %v3_a34c, %v0_a338
  store i32 %v2_a358, i32* @r1, align 4
  store i32 %v0_a338, i32* @r0, align 4
  %v3_a360 = call i32 @function_129f0(i32 %v0_a338, i32 %v2_a358, i32 %v2_a354)
  store i32 %v3_a360, i32* %r0.global-to-local, align 4
  store i32 0, i32* @ip, align 4
  store i32 %v10_89bc, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v0_a370 = load i32, i32* @r5, align 4
  %v1_a370 = load i32, i32* @r4, align 4
  %v2_a370 = add i32 %v1_a370, %v0_a370
  %v3_a370 = inttoptr i32 %v2_a370 to i8*
  %v4_a370 = load i8, i8* %v3_a370, align 1
  %v6_a370 = zext i8 %v4_a370 to i32
  store i32 %v6_a370, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v9_a374 = icmp eq i8 %v4_a370, 0
  store i1 %v9_a374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a374, label %dec_label_pc_a3b4, label %dec_label_pc_a37c

dec_label_pc_a37c:                                ; preds = %.thread47
  %v2_a37c = icmp ugt i8 %v4_a370, 46
  store i1 %v2_a37c, i1* %cpsr_c.global-to-local, align 1
  %v7_a37c = icmp eq i8 %v4_a370, 47
  store i1 %v7_a37c, i1* %cpsr_z.global-to-local, align 1
  %v1_a380 = load i32, i32* @r6, align 4
  br i1 %v7_a37c, label %bb214, label %dec_label_pc_a388

bb214:                                            ; preds = %dec_label_pc_a37c
  store i32 %v1_a380, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_a434

dec_label_pc_a388:                                ; preds = %dec_label_pc_a37c
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_a398

dec_label_pc_a390:                                ; preds = %dec_label_pc_a398
  %v2_a390 = icmp ugt i8 %v4_a3a4, 46
  store i1 %v2_a390, i1* %cpsr_c.global-to-local, align 1
  %v7_a390 = icmp eq i8 %v4_a3a4, 47
  store i1 %v7_a390, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a390, label %dec_label_pc_a434, label %dec_label_pc_a398

dec_label_pc_a398:                                ; preds = %dec_label_pc_a390, %dec_label_pc_a388
  %v0_a398 = phi i32 [ %v1_a398, %dec_label_pc_a390 ], [ 0, %dec_label_pc_a388 ]
  %v1_a398 = add i32 %v0_a398, 1
  store i32 %v1_a398, i32* %r1.global-to-local, align 4
  store i32 %v10_89bc, i32* @ip, align 4
  store i32 %v1_a398, i32* %stack_var_-44, align 4
  %v2_a3a4 = add i32 %v1_a398, %v1_a380
  %v3_a3a4 = inttoptr i32 %v2_a3a4 to i8*
  %v4_a3a4 = load i8, i8* %v3_a3a4, align 1
  %v6_a3a4 = zext i8 %v4_a3a4 to i32
  store i32 %v6_a3a4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_a3a8 = icmp eq i8 %v4_a3a4, 0
  store i1 %v2_a3a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_a3a4, i32* %r2.global-to-local, align 4
  br i1 %v2_a3a8, label %dec_label_pc_a3b4, label %dec_label_pc_a390

dec_label_pc_a3b4:                                ; preds = %dec_label_pc_a398, %.thread47, %dec_label_pc_a434
  %v0_a3b4 = load i32, i32* @r6, align 4
  store i32 %v0_a3b4, i32* %r0.global-to-local, align 4
  %v1_a3b8 = inttoptr i32 %v0_a3b4 to i8*
  %v2_a3b8 = call i32 @function_1186c(i8* %v1_a3b8)
  store i32 %v2_a3b8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_a3bc = icmp eq i32 %v2_a3b8, 0
  store i1 %v2_a3bc, i1* %cpsr_z.global-to-local, align 1
  %tmp215 = icmp slt i32 %v2_a3b8, 1
  br i1 %tmp215, label %dec_label_pc_a3d4, label %dec_label_pc_a3c4

dec_label_pc_a3c4:                                ; preds = %dec_label_pc_a3b4
  %v0_a3c4 = load i32, i32* @r6, align 4
  store i32 %v0_a3c4, i32* %r0.global-to-local, align 4
  %v1_a3c8 = inttoptr i32 %v0_a3c4 to i8*
  %v2_a3c8 = call i32 @function_1186c(i8* %v1_a3c8)
  store i32 %v2_a3c8, i32* %r0.global-to-local, align 4
  %v2_a3cc = icmp ugt i32 %v2_a3c8, 126
  store i1 %v2_a3cc, i1* %cpsr_c.global-to-local, align 1
  %v7_a3cc = icmp eq i32 %v2_a3c8, 127
  store i1 %v7_a3cc, i1* %cpsr_z.global-to-local, align 1
  %v7_a3d0 = icmp slt i32 %v2_a3c8, 128
  br i1 %v7_a3d0, label %dec_label_pc_a594, label %dec_label_pc_a3d4

dec_label_pc_a3d4:                                ; preds = %dec_label_pc_a3c4, %dec_label_pc_a3b4, %dec_label_pc_a594
  store i32 %v10_89bc, i32* @lr, align 4
  %v3_a3d8 = load i32, i32* %stack_var_-44, align 4
  %v0_a3dc = load i32, i32* @r6, align 4
  %v1_a3dc = add i32 %v0_a3dc, 1
  store i32 %v1_a3dc, i32* @r5, align 4
  %v2_a3e0 = add i32 %v1_a3dc, %v3_a3d8
  store i32 %v2_a3e0, i32* %r0.global-to-local, align 4
  %v1_a3e4 = inttoptr i32 %v2_a3e0 to i8*
  %v2_a3e4 = call i32 @function_1186c(i8* %v1_a3e4)
  store i32 %v2_a3e4, i32* %r0.global-to-local, align 4
  %v2_a3e8 = icmp ugt i32 %v2_a3e4, 254
  store i1 %v2_a3e8, i1* %cpsr_c.global-to-local, align 1
  %v7_a3e8 = icmp eq i32 %v2_a3e4, 255
  store i1 %v7_a3e8, i1* %cpsr_z.global-to-local, align 1
  %v8_a3ec = icmp sgt i32 %v2_a3e4, 255
  br i1 %v8_a3ec, label %dec_label_pc_9fe4, label %dec_label_pc_a3f0

dec_label_pc_a3f0:                                ; preds = %dec_label_pc_a3d4
  %v0_a3f0 = load i32, i32* %sb.global-to-local, align 4
  %v1_a3f4 = add i32 %v0_a3f0, 533
  store i32 %v1_a3f4, i32* @r4, align 4
  store i32 %v1_a3f4, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_a400 = call i32 @function_11900(i32 %v1_a3f4, i32 255)
  store i32 %v10_89bc, i32* %r1.global-to-local, align 4
  %v3_a408 = load i32, i32* %stack_var_-44, align 4
  %v0_a40c = load i32, i32* @r5, align 4
  %v2_a40c = add i32 %v0_a40c, %v3_a408
  store i32 %v2_a40c, i32* %r0.global-to-local, align 4
  %v1_a410 = inttoptr i32 %v2_a40c to i8*
  %v2_a410 = call i32 @function_1186c(i8* %v1_a410)
  store i32 %v2_a410, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_a414 = icmp eq i32 %v2_a410, 0
  store i1 %v2_a414, i1* %cpsr_z.global-to-local, align 1
  %tmp216 = icmp slt i32 %v2_a410, 1
  br i1 %tmp216, label %dec_label_pc_9fe4, label %dec_label_pc_a41c

dec_label_pc_a41c:                                ; preds = %dec_label_pc_a3f0
  store i32 %v10_89bc, i32* %r2.global-to-local, align 4
  %v3_a420 = load i32, i32* %stack_var_-44, align 4
  %v0_a424 = load i32, i32* @r4, align 4
  store i32 %v0_a424, i32* @r0, align 4
  %v0_a428 = load i32, i32* @r5, align 4
  %v2_a428 = add i32 %v0_a428, %v3_a420
  store i32 %v2_a428, i32* %r1.global-to-local, align 4
  %v2_a42c = inttoptr i32 %v0_a424 to i8*
  %v3_a42c = call i32 @function_11894(i8* %v2_a42c, i32 %v2_a428)
  store i32 %v3_a42c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9fe4

dec_label_pc_a434:                                ; preds = %dec_label_pc_a390, %bb214
  %v2_a438 = phi i32 [ %v1_a380, %bb214 ], [ %v2_a3a4, %dec_label_pc_a390 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a438 = inttoptr i32 %v2_a438 to i8*
  store i8 0, i8* %v3_a438, align 1
  br label %dec_label_pc_a3b4

dec_label_pc_a440:                                ; preds = %dec_label_pc_9f64
  %v1_a440 = add i32 %v0_a440, 1
  store i32 %v1_a440, i32* %ip.global-to-local, align 4
  %v2_a444 = add i32 %v0_9f64, %v1_a440
  store i32 %v2_a444, i32* %r4.global-to-local, align 4
  store i32 %v10_89bc, i32* @lr, align 4
  store i32 %v2_a444, i32* %r0.global-to-local, align 4
  store i32 %v1_a440, i32* %stack_var_-44, align 4
  %v1_a454 = inttoptr i32 %v2_a444 to i8*
  %v2_a454 = call i32 @function_1186c(i8* %v1_a454)
  store i32 %v2_a454, i32* %r0.global-to-local, align 4
  %v0_a458 = load i32, i32* %r4.global-to-local, align 4
  %v2_a458 = add i32 %v0_a458, %v2_a454
  store i32 %v2_a458, i32* @r4, align 4
  %v1_a45c = add i32 %v2_a458, -1
  %v2_a45c = inttoptr i32 %v1_a45c to i8*
  %v3_a45c = load i8, i8* %v2_a45c, align 1
  %v4_a45c = zext i8 %v3_a45c to i32
  store i32 %v4_a45c, i32* %r3.global-to-local, align 4
  %v2_a460 = icmp ugt i8 %v3_a45c, 33
  store i1 %v2_a460, i1* %cpsr_c.global-to-local, align 1
  %v7_a460 = icmp eq i8 %v3_a45c, 34
  store i1 %v7_a460, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a460, label %dec_label_pc_a468, label %dec_label_pc_9f70

dec_label_pc_a468:                                ; preds = %dec_label_pc_a440
  store i32 %v10_89bc, i32* %r1.global-to-local, align 4
  %v3_a46c = load i32, i32* %stack_var_-44, align 4
  %v0_a470 = load i32, i32* @r5, align 4
  %v2_a470 = add i32 %v0_a470, %v3_a46c
  store i32 %v2_a470, i32* %r4.global-to-local, align 4
  store i32 %v2_a470, i32* %r0.global-to-local, align 4
  %v1_a478 = inttoptr i32 %v2_a470 to i8*
  %v2_a478 = call i32 @function_1186c(i8* %v1_a478)
  store i32 %v2_a478, i32* %r0.global-to-local, align 4
  %v2_a47c = add i32 %v2_a470, %v2_a478
  store i32 %v2_a47c, i32* @r4, align 4
  %v0_a480 = load i32, i32* @r6, align 4
  %v1_a480 = trunc i32 %v0_a480 to i8
  %v3_a480 = add i32 %v2_a47c, -1
  %v4_a480 = inttoptr i32 %v3_a480 to i8*
  store i8 %v1_a480, i8* %v4_a480, align 1
  br label %dec_label_pc_9f70

dec_label_pc_a488:                                ; preds = %dec_label_pc_9fd8
  store i32 %v10_89bc, i32* %r3.global-to-local, align 4
  %v3_a48c = load i32, i32* %stack_var_-44, align 4
  %v0_a490 = load i32, i32* @r6, align 4
  %v1_a490 = add i32 %v0_a490, 1
  store i32 %v1_a490, i32* @r5, align 4
  %v2_a494 = add i32 %v1_a490, %v3_a48c
  store i32 %v2_a494, i32* %r0.global-to-local, align 4
  %v1_a498 = inttoptr i32 %v2_a494 to i8*
  %v2_a498 = call i32 @function_1186c(i8* %v1_a498)
  store i32 %v2_a498, i32* %r0.global-to-local, align 4
  %v2_a49c = icmp ugt i32 %v2_a498, 254
  store i1 %v2_a49c, i1* %cpsr_c.global-to-local, align 1
  %v7_a49c = icmp eq i32 %v2_a498, 255
  store i1 %v7_a49c, i1* %cpsr_z.global-to-local, align 1
  %v8_a4a0 = icmp sgt i32 %v2_a498, 255
  br i1 %v8_a4a0, label %dec_label_pc_9fe4, label %dec_label_pc_a4a4

dec_label_pc_a4a4:                                ; preds = %dec_label_pc_a488
  %v0_a4a4 = load i32, i32* %sb.global-to-local, align 4
  %v1_a4a8 = add i32 %v0_a4a4, 533
  store i32 %v1_a4a8, i32* @r4, align 4
  store i32 %v1_a4a8, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_a4b4 = call i32 @function_11900(i32 %v1_a4a8, i32 255)
  store i32 %v10_89bc, i32* @ip, align 4
  %v3_a4bc = load i32, i32* %stack_var_-44, align 4
  %v0_a4c0 = load i32, i32* @r5, align 4
  %v2_a4c0 = add i32 %v0_a4c0, %v3_a4bc
  store i32 %v2_a4c0, i32* %r0.global-to-local, align 4
  %v1_a4c4 = inttoptr i32 %v2_a4c0 to i8*
  %v2_a4c4 = call i32 @function_1186c(i8* %v1_a4c4)
  store i32 %v2_a4c4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_a4c8 = icmp eq i32 %v2_a4c4, 0
  store i1 %v2_a4c8, i1* %cpsr_z.global-to-local, align 1
  %tmp217 = icmp slt i32 %v2_a4c4, 1
  br i1 %tmp217, label %dec_label_pc_9fe4, label %dec_label_pc_a4d0

dec_label_pc_a4d0:                                ; preds = %dec_label_pc_a4a4
  store i32 %v10_89bc, i32* @lr, align 4
  %v3_a4d4 = load i32, i32* %stack_var_-44, align 4
  %v0_a4d8 = load i32, i32* @r4, align 4
  store i32 %v0_a4d8, i32* @r0, align 4
  %v0_a4dc = load i32, i32* @r5, align 4
  %v2_a4dc = add i32 %v0_a4dc, %v3_a4d4
  store i32 %v2_a4dc, i32* %r1.global-to-local, align 4
  %v2_a4e0 = inttoptr i32 %v0_a4d8 to i8*
  %v3_a4e0 = call i32 @function_11894(i8* %v2_a4e0, i32 %v2_a4dc)
  store i32 %v3_a4e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9fe4

dec_label_pc_a4e8:                                ; preds = %dec_label_pc_8b8c
  store i32 57, i32* %r0.global-to-local, align 4
  %v1_a4ec = call i32 @function_10e48(i32 57)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 57, i32* %r0.global-to-local, align 4
  %v3_a4f8 = call i32 @function_10d84(i32 57, i32* null)
  store i32 %v3_a4f8, i32* %r1.global-to-local, align 4
  %v0_a500 = load i32, i32* @r5, align 4
  %v1_a500 = add i32 %v0_a500, 20
  store i32 %v1_a500, i32* @r0, align 4
  %v2_a504 = inttoptr i32 %v1_a500 to i8*
  %v3_a504 = call i32 @function_11894(i8* %v2_a504, i32 %v3_a4f8)
  store i32 57, i32* %r0.global-to-local, align 4
  %v1_a50c = call i32 @function_10da8(i32 57)
  store i32 %v1_a50c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a510

dec_label_pc_a510:                                ; preds = %dec_label_pc_8b8c, %dec_label_pc_a600, %dec_label_pc_a5d4, %dec_label_pc_a5a8, %dec_label_pc_a568, %dec_label_pc_a4e8
  store i32 %v0_8ad8, i32* @r0, align 4
  %v0_a514 = load i32, i32* @r8, align 4
  store i32 %v0_a514, i32* %r1.global-to-local, align 4
  %v2_a518 = inttoptr i32 %v0_8ad8 to i8*
  %v3_a518 = call i32 @function_11894(i8* %v2_a518, i32 %v0_a514)
  store i32 %v3_a518, i32* %r0.global-to-local, align 4
  store i32 %v0_8a68, i32* %r2.global-to-local, align 4
  %v0_a520 = load i32, i32* %fp.global-to-local, align 4
  %v1_a520 = add i32 %v0_a520, 1
  store i32 %v1_a520, i32* %fp.global-to-local, align 4
  %v0_a524 = load i32, i32* @r5, align 4
  %v3_a528 = icmp uge i32 %v1_a520, %v0_8a68
  store i1 %v3_a528, i1* %cpsr_c.global-to-local, align 1
  %v9_a528 = icmp eq i32 %v1_a520, %v0_8a68
  store i1 %v9_a528, i1* %cpsr_z.global-to-local, align 1
  %v1_a52c = add i32 %v0_a524, 3140
  store i32 %v1_a52c, i32* @r5, align 4
  br i1 %v9_a528, label %dec_label_pc_a534, label %dec_label_pc_8a98

dec_label_pc_a534:                                ; preds = %dec_label_pc_a510
  %v0_a544 = load i32, i32* @r7, align 4
  %v1_a544 = and i32 %v0_a544, 128
  %v2_a544 = icmp ne i32 %v1_a544, 0
  store i1 %v2_a544, i1* %cpsr_c.global-to-local, align 1
  %v3_a544 = udiv i32 %v0_a544, 256
  %v1_a548 = add i32 %v2_8a7c, 1452
  store i32 %v1_a548, i32* %r3.global-to-local, align 4
  %v2_a54c = ptrtoint i32* %stack_var_-10572 to i32
  store i32 %v2_a54c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_8bf8.preheader

dec_label_pc_a568:                                ; preds = %dec_label_pc_8b8c
  store i32 58, i32* %r0.global-to-local, align 4
  %v1_a56c = call i32 @function_10e48(i32 58)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 58, i32* %r0.global-to-local, align 4
  %v3_a578 = call i32 @function_10d84(i32 58, i32* null)
  store i32 %v3_a578, i32* %r1.global-to-local, align 4
  %v0_a580 = load i32, i32* @r5, align 4
  %v1_a580 = add i32 %v0_a580, 20
  store i32 %v1_a580, i32* @r0, align 4
  %v2_a584 = inttoptr i32 %v1_a580 to i8*
  %v3_a584 = call i32 @function_11894(i8* %v2_a584, i32 %v3_a578)
  store i32 58, i32* %r0.global-to-local, align 4
  %v1_a58c = call i32 @function_10da8(i32 58)
  store i32 %v1_a58c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a510

dec_label_pc_a594:                                ; preds = %dec_label_pc_a3c4
  %v0_a594 = load i32, i32* %sb.global-to-local, align 4
  %v0_a598 = load i32, i32* @r6, align 4
  store i32 %v0_a598, i32* %r1.global-to-local, align 4
  %v1_a59c = add i32 %v0_a594, 789
  store i32 %v1_a59c, i32* @r0, align 4
  %v2_a5a0 = inttoptr i32 %v1_a59c to i8*
  %v3_a5a0 = call i32 @function_11894(i8* %v2_a5a0, i32 %v0_a598)
  store i32 %v3_a5a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3d4

dec_label_pc_a5a8:                                ; preds = %dec_label_pc_8b8c
  store i32 55, i32* %r0.global-to-local, align 4
  %v1_a5ac = call i32 @function_10e48(i32 55)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 55, i32* %r0.global-to-local, align 4
  %v3_a5b8 = call i32 @function_10d84(i32 55, i32* null)
  store i32 %v3_a5b8, i32* %r1.global-to-local, align 4
  %v0_a5c0 = load i32, i32* @r5, align 4
  %v1_a5c0 = add i32 %v0_a5c0, 20
  store i32 %v1_a5c0, i32* @r0, align 4
  %v2_a5c4 = inttoptr i32 %v1_a5c0 to i8*
  %v3_a5c4 = call i32 @function_11894(i8* %v2_a5c4, i32 %v3_a5b8)
  store i32 55, i32* %r0.global-to-local, align 4
  %v1_a5cc = call i32 @function_10da8(i32 55)
  store i32 %v1_a5cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a510

dec_label_pc_a5d4:                                ; preds = %dec_label_pc_8b8c
  store i32 54, i32* %r0.global-to-local, align 4
  %v1_a5d8 = call i32 @function_10e48(i32 54)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 54, i32* %r0.global-to-local, align 4
  %v3_a5e4 = call i32 @function_10d84(i32 54, i32* null)
  store i32 %v3_a5e4, i32* %r1.global-to-local, align 4
  %v0_a5ec = load i32, i32* @r5, align 4
  %v1_a5ec = add i32 %v0_a5ec, 20
  store i32 %v1_a5ec, i32* @r0, align 4
  %v2_a5f0 = inttoptr i32 %v1_a5ec to i8*
  %v3_a5f0 = call i32 @function_11894(i8* %v2_a5f0, i32 %v3_a5e4)
  store i32 54, i32* %r0.global-to-local, align 4
  %v1_a5f8 = call i32 @function_10da8(i32 54)
  store i32 %v1_a5f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a510

dec_label_pc_a600:                                ; preds = %dec_label_pc_8b8c
  store i32 56, i32* %r0.global-to-local, align 4
  %v1_a604 = call i32 @function_10e48(i32 56)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 56, i32* %r0.global-to-local, align 4
  %v3_a610 = call i32 @function_10d84(i32 56, i32* null)
  store i32 %v3_a610, i32* %r1.global-to-local, align 4
  %v0_a618 = load i32, i32* @r5, align 4
  %v1_a618 = add i32 %v0_a618, 20
  store i32 %v1_a618, i32* @r0, align 4
  %v2_a61c = inttoptr i32 %v1_a618 to i8*
  %v3_a61c = call i32 @function_11894(i8* %v2_a61c, i32 %v3_a610)
  store i32 56, i32* %r0.global-to-local, align 4
  %v1_a624 = call i32 @function_10da8(i32 56)
  store i32 %v1_a624, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a510

; uselistorder directives
  uselistorder i32 %v2_a54c, { 1, 0 }
  uselistorder i32 %v1_a548, { 1, 0 }
  uselistorder i32 %v0_a544, { 0, 2, 1 }
  uselistorder i32 %v1_a52c, { 1, 0 }
  uselistorder i32 %v1_a440, { 1, 0, 2 }
  uselistorder i8 %v4_a3a4, { 2, 3, 1, 0 }
  uselistorder i32 %v1_a398, { 0, 2, 3, 1 }
  uselistorder i1 %v7_a390, { 1, 0 }
  uselistorder i32 %v1_a380, { 1, 0, 2 }
  uselistorder i1 %v7_a37c, { 1, 0 }
  uselistorder i1 %v9_a374, { 1, 0 }
  uselistorder i32 %v0_a338, { 2, 1, 0, 3 }
  uselistorder i32 %v0_a298, { 1, 0 }
  uselistorder i32 %v2_a274, { 1, 0, 2 }
  uselistorder i32 %v1_a26c, { 1, 0, 2 }
  uselistorder i32 %v1_a1f4, { 0, 2, 1 }
  uselistorder i32 %v0_a1f4, { 0, 2, 1 }
  uselistorder i32 %v2_a168, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i8 %v4_a140, { 2, 3, 1, 0 }
  uselistorder i32 %v1_a134, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_a12c, { 1, 0 }
  uselistorder i32 %v1_a11c, { 1, 0, 2 }
  uselistorder i1 %v7_a118, { 1, 0 }
  uselistorder i32 %v0_a0d8, { 2, 0, 1, 3 }
  uselistorder i32 %v3_a09c, { 2, 0, 1, 3 }
  uselistorder i32 %v2_a080, { 1, 0, 2 }
  uselistorder i32 %v4_a078, { 2, 1, 0, 3 }
  uselistorder i32 %v0_9fa0, { 1, 0 }
  uselistorder i32 %v0_9f64, { 1, 0 }
  uselistorder i32 %v0_a440, { 1, 0 }
  uselistorder i1 %v7_9f20, { 1, 0 }
  uselistorder i32 %v0_9f08, { 1, 0 }
  uselistorder i32 %v2_9ef8, { 1, 0, 2 }
  uselistorder i32 %v1_9ec4, { 1, 0 }
  uselistorder i32 %v0_9ec4, { 1, 2, 0, 3 }
  uselistorder i1 %v7_9e5c, { 1, 0 }
  uselistorder i32 %v5_9e58, { 1, 2, 6, 4, 5, 3, 0, 7, 8 }
  uselistorder i32 %v2_9e40.v4_9e28, { 1, 0, 2 }
  uselistorder i1 %v7_9e04, { 1, 0 }
  uselistorder i32 %v1_9ce4, { 1, 0, 2 }
  uselistorder i32 %v1_9cdc, { 1, 0 }
  uselistorder i1 %v7_9cc4, { 1, 0 }
  uselistorder i32 %v5_9cc0, { 1, 2, 5, 3, 4, 0, 6, 7 }
  uselistorder i32 %v2_9ca8.v4_9c90, { 1, 0, 2 }
  uselistorder i1 %v7_9c70, { 1, 0 }
  uselistorder i32 %v0_9bd8, { 1, 0 }
  uselistorder i32 %v0_9bc0, { 1, 0 }
  uselistorder i32 %v0_9bc4, { 1, 0 }
  uselistorder i32 %v1_9b9c, { 2, 3, 1, 0, 4, 5, 6 }
  uselistorder i32 %v0_9b68, { 1, 0 }
  uselistorder i1 %v7_9b30, { 0, 2, 1 }
  uselistorder i32 %v1_9b54, { 1, 0 }
  uselistorder i32 %v3_9b4c, { 0, 1, 3, 2, 4, 5, 6 }
  uselistorder i32 %v0_9b40, { 1, 0 }
  uselistorder i1 %v7_9ab4, { 1, 0 }
  uselistorder i32 %v5_9ab0, { 5, 4, 2, 3, 1, 0, 6, 7 }
  uselistorder i32 %v2_9a98, { 1, 0, 2 }
  uselistorder i32 %v2_9a94, { 1, 0, 2 }
  uselistorder i32 %v1_9a80, { 0, 2, 1 }
  uselistorder i32 %v4_9a78, { 1, 2, 0, 3 }
  uselistorder i1 %v7_9a48, { 1, 0 }
  uselistorder i1 %v7_99e0, { 1, 0 }
  uselistorder i32 %v5_99dc, { 1, 2, 5, 3, 4, 0, 6, 7 }
  uselistorder i32 %v2_99c4.v4_99ac, { 1, 0, 2 }
  uselistorder i1 %v7_997c, { 1, 0 }
  uselistorder i1 %v7_9908, { 1, 0 }
  uselistorder i32 %v5_9904, { 1, 2, 5, 3, 4, 0, 6, 7 }
  uselistorder i32 %v2_98ec.v4_98d4, { 1, 0, 2 }
  uselistorder i1 %v7_98b0, { 1, 0 }
  uselistorder i1 %v7_9830, { 1, 0 }
  uselistorder i32 %v5_982c, { 1, 2, 5, 3, 4, 0, 6, 7 }
  uselistorder i32 %v2_9814.v4_97fc, { 1, 0, 2 }
  uselistorder i1 %v7_97dc, { 1, 0 }
  uselistorder i1 %v7_97b0, { 1, 0 }
  uselistorder i1 %v7_9788, { 1, 0 }
  uselistorder i32 %v0_9744, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v4_9714, { 2, 1, 0, 3, 4, 5 }
  uselistorder i32 %v2_96ac, { 1, 0 }
  uselistorder i32 %v2_96a0, { 1, 0 }
  uselistorder i32 %v1_96a0, { 2, 0, 1, 3 }
  uselistorder i32 %v1_9694, { 1, 0 }
  uselistorder i32 %v3_9678, { 5, 2, 3, 6, 4, 1, 0, 7 }
  uselistorder i32 %v2_9658, { 1, 0 }
  uselistorder i32 %v2_964c, { 1, 0 }
  uselistorder i32 %v1_964c, { 2, 0, 1, 3 }
  uselistorder i32 %v1_9640, { 1, 0 }
  uselistorder i32 %v3_9624, { 5, 2, 3, 6, 4, 1, 0, 7 }
  uselistorder i1 %v7_95e0, { 1, 0 }
  uselistorder i32 %v5_95bc, { 1, 2, 3, 0 }
  uselistorder i1 %v7_95a4, { 1, 0 }
  uselistorder i32 %v3_9588, { 1, 0 }
  uselistorder i32 %v0_9544, { 1, 0 }
  uselistorder i32 %v3_9510, { 4, 5, 6, 3, 1, 2, 0 }
  uselistorder i32* %v2_9510, { 1, 0 }
  uselistorder i32 %v0_9510, { 1, 0 }
  uselistorder i32 %v3_94f8, { 1, 0, 2 }
  uselistorder i32 %v0_94ec, { 1, 2, 0 }
  uselistorder i32 %storemerge49, { 1, 0 }
  uselistorder i1 %v7_9468, { 1, 0 }
  uselistorder i32 %v4_945c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_942c, { 1, 0 }
  uselistorder i32 %v2_941c, { 1, 0 }
  uselistorder i32 %v2_9410, { 1, 0 }
  uselistorder i32 %v1_9410, { 2, 0, 1, 3 }
  uselistorder i32 %v1_9404, { 1, 0 }
  uselistorder i32 %v3_93e8, { 5, 2, 3, 6, 4, 1, 0, 7 }
  uselistorder i32 %v3_93cc, { 0, 2, 1 }
  uselistorder i32 %v2_93a4, { 1, 0 }
  uselistorder i32 %v1_93a4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_93a4, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v1_9390, { 1, 0 }
  uselistorder i32 %v3_9370, { 1, 0, 2 }
  uselistorder i32 %v1_92d4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_9178, { 1, 0 }
  uselistorder i32 %v3_8f58, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_8f04, { 2, 1, 0, 3 }
  uselistorder i32 %v3_8f00, { 1, 0 }
  uselistorder i32 %v3_8ef4, { 2, 0, 1 }
  uselistorder i1 %v7_8ee0, { 1, 0 }
  uselistorder i32 %v3_8ed8, { 3, 2, 1, 0, 4, 5 }
  uselistorder i1 %v7_8eb0, { 1, 0 }
  uselistorder i1 %v7_8ea8, { 1, 0 }
  uselistorder i32 %v3_8e8c, { 1, 0 }
  uselistorder i32 %v1_8e6c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_8e6c, { 0, 2, 1 }
  uselistorder i32 %v2_8e68, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8e54, { 1, 0, 2 }
  uselistorder i32 %v1_8e14, { 1, 0 }
  uselistorder i32 %v2_8df4, { 1, 0 }
  uselistorder i32 %v1_8df4, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8de8, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v0_8df4, { 4, 1, 2, 5, 3, 0 }
  uselistorder i32 %v3_8dd8, { 1, 0 }
  uselistorder i32 %v3_8dcc, { 1, 0, 2 }
  uselistorder i1 %v7_8d28, { 1, 0 }
  uselistorder i32 %v3_8d24, { 1, 3, 2, 0, 4, 5 }
  uselistorder i1 %v7_8d00, { 1, 0 }
  uselistorder i32 %v4_8cd8, { 2, 1, 0 }
  uselistorder i8 %v3_8cd8, { 11, 12, 13, 14, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_8cd8, { 2, 0, 3, 1 }
  uselistorder i32 %v3_8f7c, { 4, 2, 3, 1, 0, 5 }
  uselistorder i1 %v7_8ca0, { 1, 0 }
  uselistorder i32 %v1_8ca0, { 1, 0 }
  uselistorder i1 %v7_8c98, { 1, 0 }
  uselistorder i1 %v7_8c90, { 1, 0 }
  uselistorder i1 %v7_8c88, { 1, 0 }
  uselistorder i32 %v1_8c88, { 1, 0 }
  uselistorder i1 %v7_8c80, { 1, 0 }
  uselistorder i1 %v7_8c78, { 1, 0 }
  uselistorder i32 %v1_8c5c, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v2_8bfc, { 3, 2, 0, 4, 1, 5, 6 }
  uselistorder i8* %v1_8fbc, { 11, 10, 12, 8, 6, 7, 9, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %v2_8ddc, { 0, 15, 1, 2, 3, 16, 4, 17, 5, 18, 6, 19, 7, 20, 8, 21, 22, 9, 23, 10, 13, 11, 14, 12, 24 }
  uselistorder i32 %v1_a550, { 1, 0, 2 }
  uselistorder i32 %stack_var_-20860.0.ph, { 58, 59, 57, 0, 61, 60, 1, 56, 55, 2, 64, 63, 3, 68, 67, 4, 66, 65, 5, 62, 6, 79, 78, 7, 77, 76, 8, 75, 74, 9, 73, 72, 10, 71, 11, 70, 69, 12, 54, 53, 13, 52, 51, 14, 50, 49, 15, 48, 47, 16, 46, 45, 17, 44, 43, 18, 42, 19, 41, 40, 20, 39, 38, 21, 37, 36, 22, 35, 34, 23, 33, 24, 32, 31, 25, 30, 29, 26, 27, 28 }
  uselistorder i32 %stack_var_-20864.0.ph, { 1, 0 }
  uselistorder i32 %v3_8bd8, { 1, 0 }
  uselistorder i32 %v0_8bd8, { 1, 0, 2 }
  uselistorder i32 %v2_8ba4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_8b98, { 1, 0, 2 }
  uselistorder i32 %v0_8b8c, { 1, 0 }
  uselistorder i32 %v5_8b84, { 1, 0 }
  uselistorder i32 %v0_8b50, { 1, 2, 0, 3 }
  uselistorder i32 %v0_8ad8, { 5, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_8ac0, { 1, 0 }
  uselistorder i32 %v5_8abc, { 1, 0 }
  uselistorder i32 %v2_8a7c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_8a68, { 4, 5, 19, 15, 16, 17, 2, 3, 18, 0, 1, 14, 10, 11, 12, 13, 20, 8, 9, 7, 6 }
  uselistorder i32 %v0_8a5c, { 0, 1, 3, 2 }
  uselistorder i1 %v2_89ec, { 1, 0, 2 }
  uselistorder i32* %v11_89c0, { 2, 0, 1, 3 }
  uselistorder i32 %v10_89bc, { 21, 20, 19, 11, 10, 17, 16, 15, 18, 14, 13, 32, 31, 30, 28, 27, 29, 26, 25, 12, 23, 22, 9, 8, 7, 24, 6, 38, 37, 36, 34, 35, 33, 43, 42, 41, 40, 39, 5, 4, 3, 2, 1, 0, 44, 45 }
  uselistorder i32 %v2_89b4, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_89a4, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_8994, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_896c, { 1, 0, 2 }
  uselistorder i8* %tmp168, { 5, 6, 4, 7, 3, 8, 2, 9, 1, 10, 11, 12, 0 }
  uselistorder i32 %v2_8948, { 0, 28, 32, 33, 34, 35, 1, 30, 2, 3, 31, 36, 17, 18, 4, 27, 5, 6, 29, 37, 7, 26, 8, 9, 38, 10, 11, 24, 25, 39, 12, 21, 13, 22, 23, 40, 14, 15, 19, 20, 41, 42, 43, 16, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32 %v5_8940, { 1, 0 }
  uselistorder i32 %v6_88c8, { 3, 2, 4, 0, 8, 7, 6, 1, 5, 9 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 0, 35, 36, 37, 38, 39, 42, 40, 41 }
  uselistorder i32* %sb.global-to-local, { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 10, 27, 28, 0, 5, 6, 7, 8, 1, 2, 3, 4, 9, 29, 30 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 7, 4, 5, 6, 8, 11, 9, 10, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 83, 37, 38, 40, 41, 42, 44, 43, 45, 46, 47, 48, 49, 39, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 147, 148, 149, 150, 151, 152, 157, 158, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 146, 104, 105, 106, 107, 108, 109, 113, 114, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 155, 156, 126, 127, 153, 154, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 112, 76, 77, 78, 79, 81, 82, 80, 83, 84, 86, 85, 87, 88, 89, 90, 91, 92, 93, 94, 122, 95, 96, 121, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 9, 7, 8, 10, 49, 25, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 58, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 159, 162, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 150, 151, 152, 153, 154, 155, 156, 157, 158, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 0 }
  uselistorder i32* %r0.global-to-local, { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 28, 27, 29, 205, 33, 200, 30, 73, 43, 34, 36, 35, 37, 39, 38, 41, 40, 44, 42, 45, 47, 46, 48, 50, 49, 52, 51, 56, 53, 54, 55, 57, 58, 61, 59, 63, 62, 64, 65, 66, 68, 67, 69, 70, 71, 74, 72, 76, 75, 77, 79, 78, 80, 83, 81, 82, 85, 84, 89, 86, 87, 88, 90, 92, 91, 94, 93, 95, 97, 96, 99, 98, 100, 101, 103, 102, 104, 105, 106, 5, 108, 107, 110, 109, 111, 113, 112, 114, 115, 116, 118, 117, 120, 119, 121, 123, 122, 124, 126, 125, 128, 127, 129, 131, 130, 132, 135, 133, 134, 137, 136, 139, 138, 140, 142, 141, 143, 145, 144, 147, 146, 148, 150, 149, 14, 151, 153, 152, 155, 154, 157, 156, 160, 158, 159, 162, 161, 163, 165, 164, 166, 169, 167, 168, 171, 170, 173, 172, 174, 176, 175, 313, 315, 314, 316, 317, 318, 320, 319, 322, 321, 323, 325, 324, 326, 328, 327, 329, 330, 331, 13, 332, 336, 335, 337, 339, 338, 340, 342, 341, 343, 60, 344, 345, 177, 179, 178, 181, 180, 184, 182, 183, 187, 185, 186, 190, 188, 189, 191, 193, 192, 194, 196, 195, 198, 197, 199, 201, 202, 4, 203, 207, 204, 206, 3, 208, 209, 2, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 251, 253, 254, 1, 255, 31, 256, 258, 257, 8, 260, 259, 6, 261, 333, 262, 334, 7, 263, 264, 265, 12, 266, 11, 267, 268, 10, 269, 9, 270, 271, 272, 274, 273, 275, 276, 277, 279, 278, 280, 281, 282, 284, 283, 286, 285, 288, 287, 290, 289, 292, 291, 293, 294, 295, 296, 297, 298, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 53, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 51, 52, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32* %fp.global-to-local, { 0, 34, 1, 3, 2, 4, 5, 6, 7, 28, 27, 31, 8, 9, 10, 11, 12, 13, 14, 15, 19, 18, 20, 21, 22, 23, 24, 25, 16, 17, 26, 29, 30, 32, 33, 35, 36 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 89, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 141, 101, 102, 103, 104, 109, 111, 110, 105, 106, 107, 108, 112, 113, 114, 115, 116, 117, 125, 126, 118, 119, 120, 121, 122, 123, 124, 127, 0, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 94, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 153, 108, 109, 114, 116, 115, 110, 111, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 132, 133, 125, 126, 127, 128, 129, 130, 131, 134, 0, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152 }
  uselistorder i32 ptrtoint (i32* @global_var_176e8.72 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_176d8.68 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_176d0.66 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_176c4.64 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 -20773, { 1, 0, 2, 4, 3, 8, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_176cc.62 to i32), { 2, 4, 3, 5, 1, 6, 0, 7 }
  uselistorder i32 2116, { 1, 2, 0 }
  uselistorder i32 -1452, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24 }
  uselistorder i8 7, { 3, 4, 0, 1, 2 }
  uselistorder i8 4, { 1, 0, 2 }
  uselistorder i32 1452, { 1, 0 }
  uselistorder i32 789, { 2, 0, 1, 3 }
  uselistorder i32 1431, { 1, 2, 0, 3 }
  uselistorder i32 533, { 1, 0, 3, 2, 4 }
  uselistorder i32 3140, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 51, { 1, 3, 0, 4, 2, 5 }
  uselistorder i32 50, { 0, 2, 1, 3 }
  uselistorder i32 49, { 0, 2, 1, 3 }
  uselistorder i32 43, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_176ac.43 to i32), { 0, 2, 3, 1, 4 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
  uselistorder i32 %arg1, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_a510, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_a3d4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a3b4, { 2, 0, 1 }
  uselistorder label %.thread47, { 1, 0 }
  uselistorder label %dec_label_pc_a180, { 1, 0 }
  uselistorder label %.thread44, { 1, 0 }
  uselistorder label %dec_label_pc_a154, { 2, 0, 1 }
  uselistorder label %.thread41, { 1, 0 }
  uselistorder label %dec_label_pc_a0b8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9fe4, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder label %dec_label_pc_9f98, { 1, 0 }
  uselistorder label %dec_label_pc_9f70, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9f64, { 1, 0 }
  uselistorder label %.thread37, { 1, 0 }
  uselistorder label %bb203, { 1, 0 }
  uselistorder label %dec_label_pc_9d20, { 6, 1, 2, 7, 3, 4, 0, 5 }
  uselistorder label %bb201, { 1, 0 }
  uselistorder label %dec_label_pc_9c1c, { 0, 2, 1 }
  uselistorder label %dec_label_pc_9b70, { 1, 0 }
  uselistorder label %dec_label_pc_9b68, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9b40, { 1, 0 }
  uselistorder label %dec_label_pc_9b04, { 1, 0 }
  uselistorder label %bb197, { 1, 0 }
  uselistorder label %bb195, { 1, 0 }
  uselistorder label %bb193, { 1, 0 }
  uselistorder label %dec_label_pc_9a18, { 2, 1, 0 }
  uselistorder label %bb191, { 1, 0 }
  uselistorder label %.thread26, { 3, 0, 1, 2 }
  uselistorder label %bb188, { 1, 0 }
  uselistorder label %.thread25, { 3, 0, 1, 2 }
  uselistorder label %bb185, { 1, 0 }
  uselistorder label %.thread24, { 1, 0 }
  uselistorder label %.thread23, { 1, 0 }
  uselistorder label %dec_label_pc_974c, { 1, 0 }
  uselistorder label %dec_label_pc_9604, { 1, 0 }
  uselistorder label %dec_label_pc_94d4, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_94ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9440, { 1, 2, 0 }
  uselistorder label %bb180, { 1, 0 }
  uselistorder label %dec_label_pc_9350, { 1, 0 }
  uselistorder label %dec_label_pc_9338, { 1, 0 }
  uselistorder label %dec_label_pc_92fc, { 1, 0 }
  uselistorder label %dec_label_pc_9288, { 1, 0 }
  uselistorder label %dec_label_pc_9250, { 1, 0 }
  uselistorder label %dec_label_pc_8f88, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8eb8, { 7, 8, 9, 10, 11, 1, 12, 13, 2, 14, 15, 3, 16, 0, 6, 4, 5 }
  uselistorder label %dec_label_pc_8e80, { 1, 0 }
  uselistorder label %dec_label_pc_8cc0, { 5, 0, 1, 2, 6, 3, 4, 7 }
  uselistorder label %dec_label_pc_8c3c.dec_label_pc_8c3c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8c14.dec_label_pc_8c14_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8bf8, { 3, 0, 2, 1, 4 }
  uselistorder label %dec_label_pc_8bf8.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_8b8c, { 1, 0 }
  uselistorder label %dec_label_pc_8b10, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb174, { 1, 0 }
  uselistorder label %bb172, { 1, 0 }
  uselistorder label %dec_label_pc_89c8, { 1, 0 }
  uselistorder label %dec_label_pc_8980, { 1, 3, 4, 0, 2 }
}

define i32 @function_a62c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a62c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_a62c = load i32, i32* @r4, align 4
  %v24_a62c = load i32, i32* @fp, align 4
  %v27_a62c = load i32, i32* @lr, align 4
  store i32 0, i32* @sb, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_a658 = call i32 @function_1384c(i32 %arg2, i32 4)
  %v0_a65c = load i32, i32* @r4, align 4
  store i32 %v0_a65c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a668 = load i32, i32* @sb, align 4
  store i32 %v0_a668, i32* %r3.global-to-local, align 4
  %v0_a66c = load i32, i32* @r5, align 4
  store i32 %v0_a66c, i32* %r0.global-to-local, align 4
  %v5_a670 = inttoptr i32 %v0_a65c to i32*
  %v6_a670 = call i32 @function_8258(i32 %v0_a66c, i32* %v5_a670, i32 2, i32 %v0_a668)
  %v1_a67c = urem i32 %v6_a670, 256
  store i32 %v1_a67c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a688 = load i32, i32* @r4, align 4
  store i32 %v0_a688, i32* %r1.global-to-local, align 4
  %v0_a68c = load i32, i32* @r5, align 4
  store i32 %v0_a68c, i32* %r0.global-to-local, align 4
  %v5_a690 = trunc i32 %v6_a670 to i8
  %v6_a694 = inttoptr i32 %v0_a688 to i32*
  %v7_a694 = call i32 @function_8258(i32 %v0_a68c, i32* %v6_a694, i32 3, i32 65535)
  %v0_a698 = load i32, i32* @r4, align 4
  store i32 %v0_a698, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a694, i32* %fp.global-to-local, align 4
  %v0_a6a8 = load i32, i32* @r5, align 4
  store i32 %v0_a6a8, i32* %r0.global-to-local, align 4
  %v4_a6ac = inttoptr i32 %v0_a698 to i32*
  %v5_a6ac = call i32 @function_8258(i32 %v0_a6a8, i32* %v4_a6ac, i32 4, i32 64)
  %v1_a6b4 = urem i32 %v5_a6ac, 256
  store i32 %v1_a6b4, i32* %ip.global-to-local, align 4
  %v0_a6b8 = load i32, i32* @r4, align 4
  store i32 %v0_a6b8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a6c4 = load i32, i32* @r5, align 4
  store i32 %v0_a6c4, i32* %r0.global-to-local, align 4
  %v6_a6cc = inttoptr i32 %v0_a6b8 to i32*
  %v7_a6cc = call i32 @function_8258(i32 %v0_a6c4, i32* %v6_a6cc, i32 5, i32 1)
  %v1_a6d8 = urem i32 %v7_a6cc, 256
  store i32 %v1_a6d8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a6e4 = load i32, i32* @r4, align 4
  store i32 %v0_a6e4, i32* %r1.global-to-local, align 4
  %v0_a6e8 = load i32, i32* @r5, align 4
  store i32 %v0_a6e8, i32* %r0.global-to-local, align 4
  %v5_a6f0 = inttoptr i32 %v0_a6e4 to i32*
  %v6_a6f0 = call i32 @function_8258(i32 %v0_a6e8, i32* %v5_a6f0, i32 6, i32 65535)
  %v0_a6fc = load i32, i32* @r4, align 4
  store i32 %v0_a6fc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a708 = load i32, i32* @r5, align 4
  store i32 %v0_a708, i32* %r0.global-to-local, align 4
  %v5_a70c = inttoptr i32 %v0_a6fc to i32*
  %v6_a70c = call i32 @function_8258(i32 %v0_a708, i32* %v5_a70c, i32 7, i32 65535)
  %v0_a710 = load i32, i32* @r4, align 4
  store i32 %v0_a710, i32* %r1.global-to-local, align 4
  %v0_a714 = load i32, i32* @sb, align 4
  store i32 %v0_a714, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_a70c, i32* @r8, align 4
  %v0_a720 = load i32, i32* @r5, align 4
  store i32 %v0_a720, i32* %r0.global-to-local, align 4
  %v4_a724 = inttoptr i32 %v0_a710 to i32*
  %v5_a724 = call i32 @function_8258(i32 %v0_a720, i32* %v4_a724, i32 %v0_a714, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a734 = load i32, i32* @r4, align 4
  store i32 %v0_a734, i32* %r1.global-to-local, align 4
  %v0_a738 = load i32, i32* @r5, align 4
  store i32 %v0_a738, i32* %r0.global-to-local, align 4
  %v4_a73c = inttoptr i32 %v0_a734 to i32*
  %v5_a73c = call i32 @function_8258(i32 %v0_a738, i32* %v4_a73c, i32 1, i32 1)
  %v1_a744 = urem i32 %v5_a73c, 256
  store i32 %v1_a744, i32* %ip.global-to-local, align 4
  %v0_a748 = load i32, i32* @r4, align 4
  store i32 %v0_a748, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_a750 = load i32, i32* @sb, align 4
  store i32 %v0_a750, i32* %r3.global-to-local, align 4
  %v0_a754 = load i32, i32* @r5, align 4
  store i32 %v0_a754, i32* %r0.global-to-local, align 4
  %v5_a75c = inttoptr i32 %v0_a748 to i32*
  %v6_a75c = call i32 @function_8258(i32 %v0_a754, i32* %v5_a75c, i32 18, i32 %v0_a750)
  %v0_a764 = load i32, i32* @r4, align 4
  store i32 %v0_a764, i32* %r1.global-to-local, align 4
  %v2_a768 = load i32, i32* @global_var_22418.77, align 4
  store i32 %v2_a768, i32* %r3.global-to-local, align 4
  store i32 %v6_a75c, i32* @r7, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_a774 = load i32, i32* @r5, align 4
  store i32 %v0_a774, i32* %r0.global-to-local, align 4
  %v4_a778 = inttoptr i32 %v0_a764 to i32*
  %v5_a778 = call i32 @function_8258(i32 %v0_a774, i32* %v4_a778, i32 24, i32 %v2_a768)
  %v0_a780 = load i32, i32* @sb, align 4
  store i32 %v0_a780, i32* %r0.global-to-local, align 4
  %v1_a784 = inttoptr i32 %v0_a780 to i32*
  %v2_a784 = call i32 @function_12150(i32* %v1_a784)
  %v1_a788 = load i32, i32* @r6, align 4
  %v2_a788 = add i32 %v1_a788, %v2_a784
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a79c = call i32 @function_12ce4(i32 2, i32 3, i32 6)
  store i32 %v3_a79c, i32* %r0.global-to-local, align 4
  %v7_a7a0 = icmp eq i32 %v3_a79c, -1
  store i1 %v7_a7a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a7a0, label %dec_label_pc_acd8, label %dec_label_pc_a7ac

dec_label_pc_a7ac:                                ; preds = %dec_label_pc_a62c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a7b4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a7b4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_a7bc = load i32, i32* @sb, align 4
  store i32 %v0_a7bc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a7c8 = call i32 @function_12ca0(i32 %v3_a79c, i32 %v0_a7bc, i32 3, i32 %v6_a7b4, i32 4)
  store i32 %v5_a7c8, i32* %r0.global-to-local, align 4
  %v7_a7cc = icmp eq i32 %v5_a7c8, -1
  store i1 %v7_a7cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a7cc, label %dec_label_pc_ace4, label %dec_label_pc_a7d4

dec_label_pc_a7d4:                                ; preds = %dec_label_pc_a7ac
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v3_a7dc = mul i32 %v6_a6f0, 65536
  store i32 %v3_a7dc, i32* %r1.global-to-local, align 4
  %v0_a7e0 = load i32, i32* @r8, align 4
  %v0_a7e4 = load i32, i32* %fp.global-to-local, align 4
  %v3_a7e4 = mul i32 %v0_a7e4, 65536
  store i32 %v3_a7e4, i32* %fp.global-to-local, align 4
  %v0_a7e8 = load i32, i32* @r7, align 4
  %v1_a7e8 = urem i32 %v0_a7e8, 256
  store i32 %v1_a7e8, i32* @r7, align 4
  %v3_a7ec = urem i32 %v0_a7e4, 65536
  store i32 %v3_a7ec, i32* %r3.global-to-local, align 4
  %v3_a7f0 = urem i32 %v6_a6f0, 65536
  store i32 %v3_a7f0, i32* %ip.global-to-local, align 4
  %v3_a7f4 = urem i32 %v0_a7e0, 65536
  %v2_a7f8 = icmp eq i32 %arg2, 0
  store i1 %v2_a7f8, i1* %cpsr_z.global-to-local, align 1
  %v0_a808 = load i32, i32* @sb, align 4
  store i32 %v0_a808, i32* %stack_var_-44, align 4
  br i1 %v2_a7f8, label %dec_label_pc_aa10.preheader, label %dec_label_pc_a81c

dec_label_pc_a81c:                                ; preds = %dec_label_pc_a7d4
  %v3_a7e0 = mul i32 %v0_a7e0, 65536
  %v3_a820 = mul i32 %v5_a724, 65536
  %v1_a824 = add i32 %v3_a820, 4325376
  %v0_a7e4.not = or i32 %v0_a7e4, -65536
  %v1_a828 = xor i32 %v0_a7e4.not, 65535
  %v3_a834 = mul i32 %v1_a828, 65536
  store i32 %v3_a834, i32* @r6, align 4
  %tmp68 = udiv i32 %v1_a824, 256
  %v3_a84c = and i32 %tmp68, 65280
  store i32 %v3_a84c, i32* %r3.global-to-local, align 4
  %v1_a850 = add i32 %v3_a820, 524288
  %tmp69 = mul i32 %v0_a7e4, 256
  %v3_a854 = and i32 %tmp69, 65280
  %v1_a858 = add i32 %v3_a820, 1835008
  %tmp70 = mul nsw i32 %v1_a828, 256
  %v3_a85c = and i32 %tmp70, 65280
  %v4_a860 = udiv i32 %v1_a824, 16777216
  %v5_a860 = or i32 %v4_a860, %tmp68
  %v3_a868 = udiv i32 %v1_a858, 256
  %v5_a86c = trunc i32 %v5_a860 to i16
  %tmp71 = udiv i32 %v0_a7e4, 256
  %v4_a870 = urem i32 %tmp71, 256
  %v5_a870 = or i32 %v4_a870, %v3_a854
  store i32 %v5_a870, i32* @r7, align 4
  %tmp72 = udiv i32 %v1_a828, 256
  %v4_a874 = urem i32 %tmp72, 256
  %v5_a874 = or i32 %v4_a874, %v3_a85c
  store i32 %v5_a874, i32* @fp, align 4
  store i32 %v3_a7e0, i32* %r2.global-to-local, align 4
  store i32 %v3_a7dc, i32* %r1.global-to-local, align 4
  %v1_a880 = and i32 %v3_a868, 65280
  %tmp73 = mul i32 %v6_a6f0, 256
  %v3_a884 = and i32 %tmp73, 65280
  %tmp74 = mul i32 %v0_a7e0, 256
  %v3_a888 = and i32 %tmp74, 65280
  %v4_a890 = udiv i32 %v1_a858, 16777216
  %v5_a890 = or i32 %v1_a880, %v4_a890
  store i32 %v5_a890, i32* @r5, align 4
  %tmp75 = udiv i32 %v6_a6f0, 256
  %v4_a894 = urem i32 %tmp75, 256
  %v5_a894 = or i32 %v4_a894, %v3_a884
  store i32 %v5_a894, i32* %r0.global-to-local, align 4
  %tmp76 = udiv i32 %v0_a7e0, 256
  %v4_a898 = urem i32 %tmp76, 256
  %v5_a898 = or i32 %v4_a898, %v3_a888
  store i32 %v5_a898, i32* %ip.global-to-local, align 4
  %tmp77 = udiv i32 %v1_a850, 256
  %v3_a89c = and i32 %tmp77, 65280
  store i32 %v3_a89c, i32* @lr, align 4
  %v5_a8a8 = trunc i32 %v5_a890 to i16
  %v4_a8ac = udiv i32 %v1_a850, 16777216
  %v5_a8ac = or i32 %v3_a89c, %v4_a8ac
  store i32 %v5_a8ac, i32* @r8, align 4
  store i32 %v0_a808, i32* @r4, align 4
  %v4_a908 = sext i8 %v5_a690 to i32
  %v1_a914 = trunc i32 %v5_a6ac to i8
  %v2_a9c8 = icmp eq i32 %v1_a7e8, 0
  %sext = mul nuw i32 %v5_a894, 65536
  %v4_a9ec = sdiv i32 %sext, 65536
  %sext7 = mul nuw i32 %v5_a898, 65536
  %v4_a9f4 = sdiv i32 %sext7, 65536
  br label %dec_label_pc_a8b4

dec_label_pc_a8b4:                                ; preds = %bb80, %dec_label_pc_a81c
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a8c0 = call i32 @function_1384c(i32 1510, i32 4)
  store i32 %v2_a8c0, i32* %r0.global-to-local, align 4
  %v3_a8c8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a8c8, i32* %r2.global-to-local, align 4
  %v2_a8cc = load i32, i32* @r4, align 4
  %v5_a8cc = mul i32 %v2_a8cc, 4
  %v6_a8cc = add i32 %v5_a8cc, %v2_a658
  %v7_a8cc = inttoptr i32 %v6_a8cc to i32*
  store i32 %v2_a8c0, i32* %v7_a8cc, align 4
  store i32 %v2_a658, i32* %r1.global-to-local, align 4
  %v0_a8d4 = load i32, i32* %r2.global-to-local, align 4
  %v3_a8d4 = mul i32 %v0_a8d4, 32
  store i32 %v3_a8d4, i32* %r3.global-to-local, align 4
  %v4_a8d8 = mul i32 %v0_a8d4, 4
  %v5_a8d8 = add i32 %v4_a8d8, %v2_a658
  %v6_a8d8 = inttoptr i32 %v5_a8d8 to i32*
  %v7_a8d8 = load i32, i32* %v6_a8d8, align 4
  store i32 %v7_a8d8, i32* %r4.global-to-local, align 4
  %v5_a8dc = mul i32 %v0_a8d4, 24
  store i32 %v5_a8dc, i32* %r3.global-to-local, align 4
  %v1_a8e0 = load i32, i32* @sl, align 4
  %v2_a8e0 = add i32 %v1_a8e0, %v5_a8dc
  store i32 %v2_a8e0, i32* %lr.global-to-local, align 4
  %v1_a8e4 = inttoptr i32 %v7_a8d8 to i8*
  %v2_a8e4 = load i8, i8* %v1_a8e4, align 1
  %tmp = urem i8 %v2_a8e4, 16
  %v1_a8e8 = zext i8 %tmp to i32
  %v1_a8ec = or i32 %v1_a8e8, 64
  store i32 %v1_a8ec, i32* %r3.global-to-local, align 4
  %v1_a8f0 = trunc i32 %v1_a8ec to i8
  store i8 %v1_a8f0, i8* %v1_a8e4, align 1
  %v0_a8f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_a8f4 = inttoptr i32 %v0_a8f4 to i8*
  %v2_a8f4 = load i8, i8* %v1_a8f4, align 1
  %v1_a8f8 = and i8 %v2_a8f4, -16
  %v1_a8fc = or i8 %v1_a8f8, 5
  store i32 %v1_a6d8, i32* %r3.global-to-local, align 4
  store i8 %v1_a8fc, i8* %v1_a8f4, align 1
  store i32 %v4_a908, i32* %r1.global-to-local, align 4
  %v2_a90c = load i32, i32* %r4.global-to-local, align 4
  %v3_a90c = add i32 %v2_a90c, 1
  %v4_a90c = inttoptr i32 %v3_a90c to i8*
  store i8 %v5_a690, i8* %v4_a90c, align 1
  store i32 %v1_a6b4, i32* %r2.global-to-local, align 4
  %v2_a914 = load i32, i32* %r4.global-to-local, align 4
  %v3_a914 = add i32 %v2_a914, 8
  %v4_a914 = inttoptr i32 %v3_a914 to i8*
  store i8 %v1_a914, i8* %v4_a914, align 1
  %v0_a918 = load i32, i32* %r3.global-to-local, align 4
  %v2_a918 = icmp eq i32 %v0_a918, 0
  store i1 %v2_a918, i1* %cpsr_z.global-to-local, align 1
  %v2_a920 = load i32, i32* %r4.global-to-local, align 4
  %v3_a920 = add i32 %v2_a920, 2
  %v4_a920 = inttoptr i32 %v3_a920 to i16*
  store i16 %v5_a86c, i16* %v4_a920, align 2
  %v2_a928 = load i32, i32* %r4.global-to-local, align 4
  %v3_a928 = add i32 %v2_a928, 9
  %v4_a928 = inttoptr i32 %v3_a928 to i8*
  store i8 47, i8* %v4_a928, align 1
  store i32 %v5_a778, i32* %r3.global-to-local, align 4
  %v1_a930 = load i32, i32* %r4.global-to-local, align 4
  %v2_a930 = add i32 %v1_a930, 12
  %v3_a930 = inttoptr i32 %v2_a930 to i32*
  store i32 %v5_a778, i32* %v3_a930, align 4
  %v0_a934 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a934, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a8b4
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_a938 = load i32, i32* %r4.global-to-local, align 4
  %v4_a938 = add i32 %v3_a938, 6
  %v5_a938 = inttoptr i32 %v4_a938 to i16*
  store i16 64, i16* %v5_a938, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a8b4, %bb
  %v0_a93c = load i32, i32* %lr.global-to-local, align 4
  %v1_a93c = add i32 %v0_a93c, 16
  %v2_a93c = inttoptr i32 %v1_a93c to i32*
  %v3_a93c = load i32, i32* %v2_a93c, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_a944 = load i32, i32* %r4.global-to-local, align 4
  %v2_a944 = add i32 %v1_a944, 16
  %v3_a944 = inttoptr i32 %v2_a944 to i32*
  store i32 %v3_a93c, i32* %v3_a944, align 4
  %v0_a948 = load i32, i32* %r4.global-to-local, align 4
  %v1_a948 = add i32 %v0_a948, 24
  store i32 %v1_a948, i32* %r0.global-to-local, align 4
  %v1_a94c = add i32 %v0_a948, 20
  store i32 %v1_a94c, i32* %r1.global-to-local, align 4
  %v0_a950 = load i32, i32* %ip.global-to-local, align 4
  %v1_a950 = add i32 %v0_a950, 101
  store i32 %v1_a950, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_a95c = load i32, i32* @r7, align 4
  %v1_a95c = trunc i32 %v0_a95c to i16
  %v3_a95c = add i32 %v0_a948, 4
  %v4_a95c = inttoptr i32 %v3_a95c to i16*
  store i16 %v1_a95c, i16* %v4_a95c, align 2
  %v0_a960 = load i32, i32* %ip.global-to-local, align 4
  %v1_a960 = trunc i32 %v0_a960 to i16
  %v2_a960 = load i32, i32* %r1.global-to-local, align 4
  %v3_a960 = add i32 %v2_a960, 2
  %v4_a960 = inttoptr i32 %v3_a960 to i16*
  store i16 %v1_a960, i16* %v4_a960, align 2
  %v0_a964 = load i32, i32* %r3.global-to-local, align 4
  %v1_a964 = trunc i32 %v0_a964 to i8
  %v2_a964 = load i32, i32* %r0.global-to-local, align 4
  %v3_a964 = add i32 %v2_a964, 13
  %v4_a964 = inttoptr i32 %v3_a964 to i8*
  store i8 %v1_a964, i8* %v4_a964, align 1
  %v0_a968 = load i32, i32* %r2.global-to-local, align 4
  %v1_a968 = trunc i32 %v0_a968 to i8
  %v2_a968 = load i32, i32* %r0.global-to-local, align 4
  %v3_a968 = add i32 %v2_a968, 12
  %v4_a968 = inttoptr i32 %v3_a968 to i8*
  store i8 %v1_a968, i8* %v4_a968, align 1
  %v0_a96c = load i32, i32* %r4.global-to-local, align 4
  %v1_a96c = add i32 %v0_a96c, 38
  %v2_a96c = inttoptr i32 %v1_a96c to i8*
  %v3_a96c = load i8, i8* %v2_a96c, align 1
  %tmp86 = urem i8 %v3_a96c, 16
  %v1_a970 = zext i8 %tmp86 to i32
  %v1_a974 = or i32 %v1_a970, 64
  store i32 %v1_a974, i32* %r3.global-to-local, align 4
  %v1_a978 = trunc i32 %v1_a974 to i8
  store i8 %v1_a978, i8* %v2_a96c, align 1
  %v0_a97c = load i32, i32* %r4.global-to-local, align 4
  %v1_a97c = add i32 %v0_a97c, 38
  %v2_a97c = inttoptr i32 %v1_a97c to i8*
  %v3_a97c = load i8, i8* %v2_a97c, align 1
  %v4_a97c = zext i8 %v3_a97c to i32
  %v1_a980 = and i32 %v4_a97c, 240
  %v1_a984 = or i32 %v1_a980, 5
  store i32 %v1_a984, i32* %r2.global-to-local, align 4
  %v1_a988 = trunc i32 %v1_a984 to i8
  store i8 %v1_a988, i8* %v2_a97c, align 1
  store i32 %v4_a908, i32* %ip.global-to-local, align 4
  %v0_a990 = load i32, i32* %r4.global-to-local, align 4
  %v1_a990 = add i32 %v0_a990, 38
  store i32 %v1_a990, i32* @r5, align 4
  %v3_a994 = add i32 %v0_a990, 39
  %v4_a994 = inttoptr i32 %v3_a994 to i8*
  store i8 %v5_a690, i8* %v4_a994, align 1
  store i32 %v5_a890, i32* %lr.global-to-local, align 4
  %v2_a99c = load i32, i32* @r5, align 4
  %v3_a99c = add i32 %v2_a99c, 2
  %v4_a99c = inttoptr i32 %v3_a99c to i16*
  store i16 %v5_a8a8, i16* %v4_a99c, align 2
  store i32 %v1_a6b4, i32* %r1.global-to-local, align 4
  %v0_a9a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a9a4, label %.thread8, label %bb78

.thread8:                                         ; preds = %.thread
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb79

bb78:                                             ; preds = %.thread
  store i32 64, i32* %r2.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v3_a9ac = load i32, i32* @r5, align 4
  %v4_a9ac = add i32 %v3_a9ac, 6
  %v5_a9ac = inttoptr i32 %v4_a9ac to i16*
  store i16 64, i16* %v5_a9ac, align 2
  %v0_a9b0.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t85 = trunc i32 %v0_a9b0.pre to i8
  br label %bb79

bb79:                                             ; preds = %.thread8, %bb78
  %v5_a6ac.sink.off0 = phi i8 [ %v1_a914, %.thread8 ], [ %extract.t85, %bb78 ]
  %v2_a9b0 = load i32, i32* @r5, align 4
  %v3_a9b0 = add i32 %v2_a9b0, 8
  %v4_a9b0 = inttoptr i32 %v3_a9b0 to i8*
  store i8 %v5_a6ac.sink.off0, i8* %v4_a9b0, align 1
  %v0_a9b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a9b4 = trunc i32 %v0_a9b4 to i8
  %v2_a9b4 = load i32, i32* @r5, align 4
  %v3_a9b4 = add i32 %v2_a9b4, 9
  %v4_a9b4 = inttoptr i32 %v3_a9b4 to i8*
  store i8 %v1_a9b4, i8* %v4_a9b4, align 1
  %v0_a9b8 = load i32, i32* @fp, align 4
  %v1_a9b8 = trunc i32 %v0_a9b8 to i16
  %v2_a9b8 = load i32, i32* @r5, align 4
  %v3_a9b8 = add i32 %v2_a9b8, 4
  %v4_a9b8 = inttoptr i32 %v3_a9b8 to i16*
  store i16 %v1_a9b8, i16* %v4_a9b8, align 2
  %v0_a9bc = call i32 @function_f18c()
  store i32 %v0_a9bc, i32* %r0.global-to-local, align 4
  store i32 %v1_a7e8, i32* %ip.global-to-local, align 4
  store i1 %v2_a9c8, i1* %cpsr_z.global-to-local, align 1
  %v1_a9cc = sub i32 1023, %v0_a9bc
  store i32 %v1_a9cc, i32* %r3.global-to-local, align 4
  br i1 %v2_a9c8, label %.thread9, label %.thread10

.thread9:                                         ; preds = %bb79
  %v2_a9d4 = load i32, i32* @r5, align 4
  %v3_a9d4 = add i32 %v2_a9d4, 16
  %v4_a9d4 = inttoptr i32 %v3_a9d4 to i32*
  store i32 %v1_a9cc, i32* %v4_a9d4, align 4
  br label %bb80

.thread10:                                        ; preds = %bb79
  %v1_a9d0 = load i32, i32* %r4.global-to-local, align 4
  %v2_a9d0 = add i32 %v1_a9d0, 16
  %v3_a9d0 = inttoptr i32 %v2_a9d0 to i32*
  %v4_a9d0 = load i32, i32* %v3_a9d0, align 4
  store i32 %v4_a9d0, i32* %r3.global-to-local, align 4
  %v2_a9d8 = load i32, i32* @r5, align 4
  %v3_a9d8 = add i32 %v2_a9d8, 16
  %v4_a9d8 = inttoptr i32 %v3_a9d8 to i32*
  store i32 %v4_a9d0, i32* %v4_a9d8, align 4
  br label %bb80

bb80:                                             ; preds = %.thread9, %.thread10
  %v1_a9dc = load i32, i32* @r5, align 4
  %v2_a9dc = add i32 %v1_a9dc, 12
  %v3_a9dc = inttoptr i32 %v2_a9dc to i32*
  store i32 %v0_a9bc, i32* %v3_a9dc, align 4
  %v3_a9e0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a9e0, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @lr, align 4
  %v0_a9e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_a9e8 = add i32 %v0_a9e8, 58
  store i32 %v1_a9e8, i32* @r6, align 4
  store i32 %v4_a9ec, i32* %r1.global-to-local, align 4
  %v1_a9f0 = add i32 %v3_a9e0, 1
  store i32 %v1_a9f0, i32* @r4, align 4
  store i32 %v4_a9f4, i32* %r2.global-to-local, align 4
  %v9_a9f8 = icmp eq i32 %v1_a9f0, %arg2
  store i1 %v9_a9f8, i1* %cpsr_z.global-to-local, align 1
  %v0_a9fc = load i32, i32* @r8, align 4
  %v1_a9fc = trunc i32 %v0_a9fc to i16
  %v3_a9fc = add i32 %v0_a9e8, 62
  %v4_a9fc = inttoptr i32 %v3_a9fc to i16*
  store i16 %v1_a9fc, i16* %v4_a9fc, align 2
  %v0_aa00 = load i32, i32* %r1.global-to-local, align 4
  %v1_aa00 = trunc i32 %v0_aa00 to i16
  %v2_aa00 = load i32, i32* @r6, align 4
  %v3_aa00 = inttoptr i32 %v2_aa00 to i16*
  store i16 %v1_aa00, i16* %v3_aa00, align 2
  %v0_aa04 = load i32, i32* %r2.global-to-local, align 4
  %v1_aa04 = trunc i32 %v0_aa04 to i16
  %v2_aa04 = load i32, i32* @r6, align 4
  %v3_aa04 = add i32 %v2_aa04, 2
  %v4_aa04 = inttoptr i32 %v3_aa04 to i16*
  store i16 %v1_aa04, i16* %v4_aa04, align 2
  %v0_aa08 = load i32, i32* @r4, align 4
  store i32 %v0_aa08, i32* %stack_var_-44, align 4
  %v5_aa0c = icmp slt i32 %v1_a9f0, %arg2
  br i1 %v5_aa0c, label %dec_label_pc_a8b4, label %dec_label_pc_aa10.preheader

dec_label_pc_aa10.preheader:                      ; preds = %bb80, %dec_label_pc_a7d4
  %v1_aa2c = add i32 %v5_a724, 8
  %v1_aa30 = add i32 %v5_a724, 66
  %v2_aa3c = icmp eq i32 %v5_a778, -1
  %v7_aa3c = icmp eq i32 %v5_a778, -1
  %v3_ac34 = icmp eq i32 %v3_a7ec, 65535
  %v2_ac84 = icmp eq i32 %v1_a7e8, 0
  %v2_aa98 = ptrtoint i32* %stack_var_-48 to i32
  %v2_aab0 = ptrtoint i32* %stack_var_-52 to i32
  %v2_aac0 = ptrtoint i32* %stack_var_-56 to i32
  %v2_aacc = ptrtoint i32* %stack_var_-54 to i32
  %v2_aae0 = icmp eq i32 %v1_a744, 0
  br label %dec_label_pc_aa10

dec_label_pc_aa10:                                ; preds = %dec_label_pc_aa10.preheader, %dec_label_pc_acc4
  store i1 %v2_a7f8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a7f8, label %dec_label_pc_acc4, label %dec_label_pc_aa24

dec_label_pc_aa24:                                ; preds = %dec_label_pc_aa10
  store i32 %v5_a724, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_aa2c, i32* @fp, align 4
  store i32 %v1_aa30, i32* @sb, align 4
  br label %dec_label_pc_ab98

dec_label_pc_aa38:                                ; preds = %dec_label_pc_ab98
  store i32 %v5_a778, i32* %r1.global-to-local, align 4
  store i1 %v7_aa3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa3c, label %dec_label_pc_ac24, label %dec_label_pc_aa44

dec_label_pc_aa44:                                ; preds = %dec_label_pc_abc4, %dec_label_pc_aa38
  store i32 %v3_a7ec, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ac34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ac34, label %dec_label_pc_ac40, label %dec_label_pc_aa58

dec_label_pc_aa58:                                ; preds = %dec_label_pc_ac24.dec_label_pc_aa58_crit_edge, %dec_label_pc_aa44
  %v1_aa5c = phi i32 [ %v1_aa5c.pre, %dec_label_pc_ac24.dec_label_pc_aa58_crit_edge ], [ 65535, %dec_label_pc_aa44 ]
  store i32 %v3_a7f0, i32* %r3.global-to-local, align 4
  %v9_aa5c = icmp eq i32 %v3_a7f0, %v1_aa5c
  store i1 %v9_aa5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aa5c, label %dec_label_pc_ac68, label %dec_label_pc_aa64

dec_label_pc_aa64:                                ; preds = %dec_label_pc_ac40, %dec_label_pc_aa58
  %v1_aa68 = phi i32 [ %v1_ac60, %dec_label_pc_ac40 ], [ %v1_aa5c, %dec_label_pc_aa58 ]
  store i32 %v3_a7f4, i32* %ip.global-to-local, align 4
  %v9_aa68 = icmp eq i32 %v3_a7f4, %v1_aa68
  store i1 %v9_aa68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aa68, label %dec_label_pc_ac7c, label %dec_label_pc_aa70

dec_label_pc_aa70:                                ; preds = %dec_label_pc_ac68, %dec_label_pc_aa64
  store i32 %v1_a7e8, i32* @lr, align 4
  store i1 %v2_ac84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ac84, label %dec_label_pc_ac98, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_aa70
  %v1_aa78 = load i32, i32* @r5, align 4
  %v2_aa78 = add i32 %v1_aa78, 16
  %v3_aa78 = inttoptr i32 %v2_aa78 to i32*
  %v4_aa78 = load i32, i32* %v3_aa78, align 4
  store i32 %v4_aa78, i32* %r3.global-to-local, align 4
  %v2_aa7c = load i32, i32* @r6, align 4
  %v3_aa7c = add i32 %v2_aa7c, 16
  %v4_aa7c = inttoptr i32 %v3_aa7c to i32*
  store i32 %v4_aa78, i32* %v4_aa7c, align 4
  br label %dec_label_pc_aa84

dec_label_pc_aa84:                                ; preds = %bb81, %.thread11, %dec_label_pc_ac98
  %v0_aa84 = call i32 @function_f18c()
  store i32 %v0_aa84, i32* %r0.global-to-local, align 4
  store i32 %v0_aa84, i32* %stack_var_-48, align 4
  %v0_aa8c = call i32 @function_f18c()
  store i32 %v0_aa8c, i32* %r0.global-to-local, align 4
  store i32 %v0_aa8c, i32* %stack_var_-52, align 4
  %v0_aa94 = call i32 @function_f18c()
  store i32 %v2_aa98, i32* %r1.global-to-local, align 4
  store i32 %v0_aa94, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_aaa4 = load i32, i32* @r7, align 4
  store i32 %v0_aaa4, i32* %r0.global-to-local, align 4
  %v3_aaa8 = call i32 @function_118dc(i32 %v0_aaa4, i32 %v2_aa98, i32 4)
  %v0_aaac = load i32, i32* @r7, align 4
  %v1_aaac = add i32 %v0_aaac, 6
  store i32 %v1_aaac, i32* %r0.global-to-local, align 4
  store i32 %v2_aab0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_aab8 = call i32 @function_118dc(i32 %v1_aaac, i32 %v2_aab0, i32 4)
  %v0_aabc = load i32, i32* @r7, align 4
  %v1_aabc = add i32 %v0_aabc, 4
  store i32 %v1_aabc, i32* %r0.global-to-local, align 4
  store i32 %v2_aac0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_aac8 = call i32 @function_118dc(i32 %v1_aabc, i32 %v2_aac0, i32 2)
  store i32 %v2_aacc, i32* %r1.global-to-local, align 4
  %v0_aad0 = load i32, i32* @r7, align 4
  %v1_aad0 = add i32 %v0_aad0, 10
  store i32 %v1_aad0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_aad8 = call i32 @function_118dc(i32 %v1_aad0, i32 %v2_aacc, i32 2)
  store i32 %v3_aad8, i32* %r0.global-to-local, align 4
  store i32 %v1_a744, i32* %r1.global-to-local, align 4
  store i1 %v2_aae0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aae0, label %dec_label_pc_aae8, label %dec_label_pc_aca4

dec_label_pc_aae8:                                ; preds = %dec_label_pc_aa84, %dec_label_pc_aca4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_aaec = load i32, i32* @r5, align 4
  %v3_aaec = add i32 %v2_aaec, 10
  %v4_aaec = inttoptr i32 %v3_aaec to i16*
  store i16 0, i16* %v4_aaec, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_aaf4 = load i32, i32* @r5, align 4
  store i32 %v0_aaf4, i32* @r0, align 4
  %v2_aaf8 = call i32 @function_dd58(i32 %v0_aaf4, i32 20)
  %v3_aaf8 = trunc i32 %v2_aaf8 to i16
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_ab00 = load i32, i32* @r5, align 4
  %v4_ab00 = add i32 %v3_ab00, 10
  %v5_ab00 = inttoptr i32 %v4_ab00 to i16*
  store i16 %v3_aaf8, i16* %v5_ab00, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ab08 = load i32, i32* %ip.global-to-local, align 4
  %v1_ab08 = trunc i32 %v0_ab08 to i16
  %v2_ab08 = load i32, i32* @r6, align 4
  %v3_ab08 = add i32 %v2_ab08, 10
  %v4_ab08 = inttoptr i32 %v3_ab08 to i16*
  store i16 %v1_ab08, i16* %v4_ab08, align 2
  %v0_ab0c = load i32, i32* @r6, align 4
  store i32 %v0_ab0c, i32* @r0, align 4
  %v2_ab10 = call i32 @function_dd58(i32 %v0_ab0c, i32 20)
  %v3_ab10 = trunc i32 %v2_ab10 to i16
  store i32 %v2_ab10, i32* %r0.global-to-local, align 4
  %v3_ab14 = load i32, i32* @r6, align 4
  %v4_ab14 = add i32 %v3_ab14, 10
  %v5_ab14 = inttoptr i32 %v4_ab14 to i16*
  store i16 %v3_ab10, i16* %v5_ab14, align 2
  %v2_ab1c = load i32, i32* @r8, align 4
  %v3_ab1c = add i32 %v2_ab1c, 6
  %v4_ab1c = inttoptr i32 %v3_ab1c to i16*
  store i16 0, i16* %v4_ab1c, align 2
  %v0_ab20 = load i32, i32* @r8, align 4
  store i32 %v0_ab20, i32* @r1, align 4
  %v1_ab24 = add i32 %v0_ab20, 4
  %v2_ab24 = inttoptr i32 %v1_ab24 to i16*
  %v3_ab24 = load i16, i16* %v2_ab24, align 2
  %v4_ab24 = zext i16 %v3_ab24 to i32
  store i32 %v4_ab24, i32* %r2.global-to-local, align 4
  %v0_ab28 = load i32, i32* @fp, align 4
  store i32 %v0_ab28, i32* %r3.global-to-local, align 4
  %v0_ab2c = load i32, i32* @r6, align 4
  store i32 %v0_ab2c, i32* %r0.global-to-local, align 4
  %v4_ab30 = call i32 @function_dda8(i32 %v0_ab2c, i32 %v0_ab20, i32 %v4_ab24, i32 %v0_ab28)
  %v5_ab30 = trunc i32 %v4_ab30 to i16
  store i32 %v4_ab30, i32* %r0.global-to-local, align 4
  %v3_ab34 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ab34, i32* %r2.global-to-local, align 4
  %v3_ab38 = mul i32 %v3_ab34, 32
  store i32 %v3_ab38, i32* %r3.global-to-local, align 4
  %v0_ab3c = load i32, i32* @r5, align 4
  %v1_ab3c = add i32 %v0_ab3c, 16
  %v2_ab3c = inttoptr i32 %v1_ab3c to i32*
  %v3_ab3c = load i32, i32* %v2_ab3c, align 4
  %v5_ab40 = mul i32 %v3_ab34, 24
  store i32 %v5_ab40, i32* %r3.global-to-local, align 4
  %v1_ab44 = load i32, i32* @sl, align 4
  %v2_ab44 = add i32 %v1_ab44, %v5_ab40
  store i32 %v2_ab44, i32* @lr, align 4
  %v2_ab48 = add i32 %v2_ab44, 4
  %v3_ab48 = inttoptr i32 %v2_ab48 to i32*
  store i32 %v3_ab3c, i32* %v3_ab48, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_ab54 = load i32, i32* @r8, align 4
  %v4_ab54 = add i32 %v3_ab54, 6
  %v5_ab54 = inttoptr i32 %v4_ab54 to i16*
  store i16 %v5_ab30, i16* %v5_ab54, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_ab5c = load i32, i32* %r1.global-to-local, align 4
  %v1_ab5c = trunc i32 %v0_ab5c to i16
  %v2_ab5c = load i32, i32* %r3.global-to-local, align 4
  %v3_ab5c = load i32, i32* @sl, align 4
  %v4_ab5c = add i32 %v3_ab5c, %v2_ab5c
  %v5_ab5c = inttoptr i32 %v4_ab5c to i16*
  store i16 %v1_ab5c, i16* %v5_ab5c, align 2
  %v0_ab60 = load i32, i32* %r2.global-to-local, align 4
  %v1_ab60 = trunc i32 %v0_ab60 to i16
  %v2_ab60 = load i32, i32* @lr, align 4
  %v3_ab60 = add i32 %v2_ab60, 2
  %v4_ab60 = inttoptr i32 %v3_ab60 to i16*
  store i16 %v1_ab60, i16* %v4_ab60, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ab68 = load i32, i32* @r5, align 4
  store i32 %v0_ab68, i32* %r1.global-to-local, align 4
  store i32 %v3_a79c, i32* %r0.global-to-local, align 4
  %v0_ab70 = load i32, i32* @sb, align 4
  store i32 %v0_ab70, i32* %r2.global-to-local, align 4
  %v0_ab74 = load i32, i32* @lr, align 4
  %v0_ab78 = load i32, i32* %ip.global-to-local, align 4
  %v6_ab7c = call i32 @function_12c60(i32 %v3_a79c, i32 %v0_ab68, i32 %v0_ab70, i32 16384, i32 %v0_ab74, i32 %v0_ab78)
  %v3_ab80 = load i32, i32* %stack_var_-44, align 4
  %v1_ab84 = add i32 %v3_ab80, 1
  store i32 %v1_ab84, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v9_ab8c = icmp eq i32 %v1_ab84, %arg2
  store i1 %v9_ab8c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ab84, i32* %stack_var_-44, align 4
  %v6_ab94 = icmp slt i32 %v1_ab84, %arg2
  br i1 %v6_ab94, label %dec_label_pc_ab98, label %dec_label_pc_acc4

dec_label_pc_ab98:                                ; preds = %dec_label_pc_aae8, %dec_label_pc_aa24
  %v1_abac = phi i32 [ %v1_ab84, %dec_label_pc_aae8 ], [ 0, %dec_label_pc_aa24 ]
  %v5_ab9c = mul i32 %v1_abac, 24
  %v1_aba0 = load i32, i32* @sl, align 4
  %v2_aba0 = add i32 %v1_aba0, %v5_ab9c
  store i32 %v2_aba0, i32* %r3.global-to-local, align 4
  store i32 %v2_a658, i32* %lr.global-to-local, align 4
  %v1_aba8 = add i32 %v2_aba0, 20
  %v2_aba8 = inttoptr i32 %v1_aba8 to i8*
  %v3_aba8 = load i8, i8* %v2_aba8, align 1
  %v4_aba8 = zext i8 %v3_aba8 to i32
  store i32 %v4_aba8, i32* %r2.global-to-local, align 4
  %v4_abac = mul i32 %v1_abac, 4
  %v5_abac = add i32 %v4_abac, %v2_a658
  %v6_abac = inttoptr i32 %v5_abac to i32*
  %v7_abac = load i32, i32* %v6_abac, align 4
  store i32 %v7_abac, i32* @r5, align 4
  %v2_abb0 = icmp ugt i8 %v3_aba8, 30
  %v7_abb0 = icmp eq i8 %v3_aba8, 31
  store i1 %v7_abb0, i1* %cpsr_z.global-to-local, align 1
  %v1_abb4 = add i32 %v7_abac, 24
  store i32 %v1_abb4, i32* @r7, align 4
  %v1_abb8 = add i32 %v7_abac, 38
  store i32 %v1_abb8, i32* @r6, align 4
  %v1_abbc = add i32 %v7_abac, 58
  store i32 %v1_abbc, i32* @r8, align 4
  %v2_abc0 = xor i1 %v7_abb0, true
  %v3_abc0 = and i1 %v2_abb0, %v2_abc0
  br i1 %v3_abc0, label %dec_label_pc_aa38, label %dec_label_pc_abc4

dec_label_pc_abc4:                                ; preds = %dec_label_pc_ab98
  %v1_abc4 = add i32 %v2_aba0, 16
  %v2_abc4 = inttoptr i32 %v1_abc4 to i32*
  %v3_abc4 = load i32, i32* %v2_abc4, align 4
  store i32 %v3_abc4, i32* %r4.global-to-local, align 4
  %v0_abc8 = call i32 @function_f18c()
  store i32 %v0_abc8, i32* %r0.global-to-local, align 4
  %v3_abcc = load i32, i32* %stack_var_-44, align 4
  %v5_abd4 = mul i32 %v3_abcc, 24
  %v1_abd8 = and i32 %v3_abc4, 16711680
  store i32 %v1_abd8, i32* %ip.global-to-local, align 4
  %v3_abdc = udiv i32 %v3_abc4, 16777216
  %v4_abe0 = udiv i32 %v1_abd8, 256
  %v5_abe0 = or i32 %v4_abe0, %v3_abdc
  store i32 %v5_abe0, i32* %r2.global-to-local, align 4
  %v1_abe4 = load i32, i32* @sl, align 4
  %v2_abe4 = add i32 %v1_abe4, %v5_abd4
  store i32 %v2_abe4, i32* %r1.global-to-local, align 4
  %v1_abe8 = and i32 %v3_abc4, 65280
  store i32 %v1_abe8, i32* %r3.global-to-local, align 4
  %v1_abec = add i32 %v2_abe4, 20
  %v2_abec = inttoptr i32 %v1_abec to i8*
  %v3_abec = load i8, i8* %v2_abec, align 1
  %v4_abec = zext i8 %v3_abec to i32
  store i32 %v4_abec, i32* %ip.global-to-local, align 4
  %v5_abf4 = call i32 @llvm.bswap.i32(i32 %v3_abc4)
  %v7_abf8 = lshr i32 %v0_abc8, %v4_abec
  %v8_abf8 = add i32 %v7_abf8, %v5_abf4
  store i32 %v8_abf8, i32* %r2.global-to-local, align 4
  %v1_abfc = and i32 %v8_abf8, 16711680
  store i32 %v1_abfc, i32* %r0.global-to-local, align 4
  store i32 %v5_a778, i32* %r1.global-to-local, align 4
  %v5_ac14 = call i32 @llvm.bswap.i32(i32 %v8_abf8)
  store i32 %v5_ac14, i32* %r3.global-to-local, align 4
  store i1 %v7_aa3c, i1* %cpsr_z.global-to-local, align 1
  %v1_ac1c = load i32, i32* @r5, align 4
  %v2_ac1c = add i32 %v1_ac1c, 16
  %v3_ac1c = inttoptr i32 %v2_ac1c to i32*
  store i32 %v5_ac14, i32* %v3_ac1c, align 4
  br i1 %v2_aa3c, label %dec_label_pc_ac24, label %dec_label_pc_aa44

dec_label_pc_ac24:                                ; preds = %dec_label_pc_abc4, %dec_label_pc_aa38
  %v0_ac24 = call i32 @function_f18c()
  store i32 %v0_ac24, i32* %r0.global-to-local, align 4
  store i32 %v3_a7ec, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ac34, i1* %cpsr_z.global-to-local, align 1
  %v1_ac38 = load i32, i32* @r5, align 4
  %v2_ac38 = add i32 %v1_ac38, 12
  %v3_ac38 = inttoptr i32 %v2_ac38 to i32*
  store i32 %v0_ac24, i32* %v3_ac38, align 4
  br i1 %v3_ac34, label %dec_label_pc_ac40, label %dec_label_pc_ac24.dec_label_pc_aa58_crit_edge

dec_label_pc_ac24.dec_label_pc_aa58_crit_edge:    ; preds = %dec_label_pc_ac24
  %v1_aa5c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_aa58

dec_label_pc_ac40:                                ; preds = %dec_label_pc_ac24, %dec_label_pc_aa44
  %v0_ac40 = call i32 @function_f18c()
  %v3_ac48 = urem i32 %v0_ac40, 65536
  store i32 %v3_ac48, i32* %r0.global-to-local, align 4
  %v1_ac50 = sub nsw i32 999, %v3_ac48
  store i32 %v1_ac50, i32* %r3.global-to-local, align 4
  %v1_ac54 = trunc i32 %v0_ac40 to i16
  %v2_ac54 = load i32, i32* @r5, align 4
  %v3_ac54 = add i32 %v2_ac54, 4
  %v4_ac54 = inttoptr i32 %v3_ac54 to i16*
  store i16 %v1_ac54, i16* %v4_ac54, align 2
  %v0_ac58 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac58 = trunc i32 %v0_ac58 to i16
  %v2_ac58 = load i32, i32* @r6, align 4
  %v3_ac58 = add i32 %v2_ac58, 4
  %v4_ac58 = inttoptr i32 %v3_ac58 to i16*
  store i16 %v1_ac58, i16* %v4_ac58, align 2
  store i32 %v3_a7f0, i32* %r3.global-to-local, align 4
  %v1_ac60 = load i32, i32* @r4, align 4
  %v9_ac60 = icmp eq i32 %v3_a7f0, %v1_ac60
  store i1 %v9_ac60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ac60, label %dec_label_pc_ac68, label %dec_label_pc_aa64

dec_label_pc_ac68:                                ; preds = %dec_label_pc_ac40, %dec_label_pc_aa58
  %v0_ac68 = call i32 @function_f18c()
  %v1_ac68 = trunc i32 %v0_ac68 to i16
  store i32 %v0_ac68, i32* %r0.global-to-local, align 4
  store i32 %v3_a7f4, i32* %ip.global-to-local, align 4
  %v1_ac70 = load i32, i32* @r4, align 4
  %v9_ac70 = icmp eq i32 %v3_a7f4, %v1_ac70
  store i1 %v9_ac70, i1* %cpsr_z.global-to-local, align 1
  %v3_ac74 = load i32, i32* @r5, align 4
  %v4_ac74 = add i32 %v3_ac74, 58
  %v5_ac74 = inttoptr i32 %v4_ac74 to i16*
  store i16 %v1_ac68, i16* %v5_ac74, align 2
  br i1 %v9_ac70, label %dec_label_pc_ac7c, label %dec_label_pc_aa70

dec_label_pc_ac7c:                                ; preds = %dec_label_pc_ac68, %dec_label_pc_aa64
  %v0_ac7c = call i32 @function_f18c()
  %v1_ac7c = trunc i32 %v0_ac7c to i16
  store i32 %v0_ac7c, i32* %r0.global-to-local, align 4
  store i32 %v1_a7e8, i32* @lr, align 4
  store i1 %v2_ac84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ac84, label %.thread24, label %bb81

.thread24:                                        ; preds = %dec_label_pc_ac7c
  %v3_ac8c25 = load i32, i32* @r8, align 4
  %v4_ac8c26 = add i32 %v3_ac8c25, 2
  %v5_ac8c27 = inttoptr i32 %v4_ac8c26 to i16*
  store i16 %v1_ac7c, i16* %v5_ac8c27, align 2
  br label %dec_label_pc_ac98

bb81:                                             ; preds = %dec_label_pc_ac7c
  %v1_ac88 = load i32, i32* @r5, align 4
  %v2_ac88 = add i32 %v1_ac88, 16
  %v3_ac88 = inttoptr i32 %v2_ac88 to i32*
  %v4_ac88 = load i32, i32* %v3_ac88, align 4
  store i32 %v4_ac88, i32* %r3.global-to-local, align 4
  %v3_ac8c = load i32, i32* @r8, align 4
  %v4_ac8c = add i32 %v3_ac8c, 2
  %v5_ac8c = inttoptr i32 %v4_ac8c to i16*
  store i16 %v1_ac7c, i16* %v5_ac8c, align 2
  %v1_ac90 = load i32, i32* %r3.global-to-local, align 4
  %v2_ac90 = load i32, i32* @r6, align 4
  %v3_ac90 = add i32 %v2_ac90, 16
  %v4_ac90 = inttoptr i32 %v3_ac90 to i32*
  store i32 %v1_ac90, i32* %v4_ac90, align 4
  br label %dec_label_pc_aa84

dec_label_pc_ac98:                                ; preds = %.thread24, %dec_label_pc_aa70
  %v0_ac98 = call i32 @function_f18c()
  store i32 %v0_ac98, i32* %r0.global-to-local, align 4
  %v1_ac9c = load i32, i32* @r6, align 4
  %v2_ac9c = add i32 %v1_ac9c, 16
  %v3_ac9c = inttoptr i32 %v2_ac9c to i32*
  store i32 %v0_ac98, i32* %v3_ac9c, align 4
  br label %dec_label_pc_aa84

dec_label_pc_aca4:                                ; preds = %dec_label_pc_aa84
  %v0_aca4 = load i32, i32* @r8, align 4
  %v1_aca4 = add i32 %v0_aca4, 8
  store i32 %v1_aca4, i32* @r4, align 4
  store i32 %v1_aca4, i32* %r0.global-to-local, align 4
  store i32 %v5_a724, i32* %r1.global-to-local, align 4
  %v2_acb0 = call i32 @function_f250(i32 %v1_aca4, i32 %v5_a724)
  store i32 %v2_acb0, i32* %r0.global-to-local, align 4
  store i32 %v5_a724, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_acbc = load i32, i32* @r4, align 4
  %v4_acbc = add i32 %v2_acbc, %v5_a724
  %v5_acbc = inttoptr i32 %v4_acbc to i8*
  store i8 0, i8* %v5_acbc, align 1
  br label %dec_label_pc_aae8

dec_label_pc_acc4:                                ; preds = %dec_label_pc_aae8, %dec_label_pc_aa10
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_acc8 = call i32 @function_12150(i32* null)
  store i32 %v2_acc8, i32* %r0.global-to-local, align 4
  store i32 %v2_a788, i32* %ip.global-to-local, align 4
  %v9_acd0 = icmp eq i32 %v2_a788, %v2_acc8
  store i1 %v9_acd0, i1* %cpsr_z.global-to-local, align 1
  %v6_acd4 = icmp slt i32 %v2_a788, %v2_acc8
  br i1 %v6_acd4, label %dec_label_pc_acd8, label %dec_label_pc_aa10

dec_label_pc_acd8:                                ; preds = %dec_label_pc_acc4, %dec_label_pc_a62c, %dec_label_pc_ace4
  %v1_ace0 = phi i32 [ %v3_a79c, %dec_label_pc_a62c ], [ %v1_ace8, %dec_label_pc_ace4 ], [ %v2_acc8, %dec_label_pc_acc4 ]
  store i32 %v3_a62c, i32* %r4.global-to-local, align 4
  store i32 %v24_a62c, i32* %fp.global-to-local, align 4
  store i32 %v27_a62c, i32* %lr.global-to-local, align 4
  ret i32 %v1_ace0

dec_label_pc_ace4:                                ; preds = %dec_label_pc_a7ac
  store i32 %v3_a79c, i32* %r0.global-to-local, align 4
  %v1_ace8 = call i32 @function_124d0(i32 %v3_a79c)
  store i32 %v1_ace8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_acd8

; uselistorder directives
  uselistorder i32 %v1_ace8, { 1, 0 }
  uselistorder i16 %v1_ac7c, { 1, 0 }
  uselistorder i32 %v0_ac7c, { 1, 0 }
  uselistorder i32 %v0_ac68, { 1, 0 }
  uselistorder i32 %v1_ac60, { 1, 0 }
  uselistorder i32 %v3_ac48, { 1, 0 }
  uselistorder i32 %v0_ac40, { 1, 0 }
  uselistorder i32 %v5_ac14, { 1, 0 }
  uselistorder i32 %v3_abc4, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v7_abac, { 2, 1, 0, 3 }
  uselistorder i32 %v1_ab84, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_ab34, { 1, 0, 2 }
  uselistorder i32 %v4_ab30, { 1, 0 }
  uselistorder i32 %v2_ab10, { 1, 0 }
  uselistorder i1 %v2_ac84, { 2, 3, 1, 0 }
  uselistorder i1 %v3_ac34, { 1, 0, 2, 3 }
  uselistorder i1 %v7_aa3c, { 2, 1, 0 }
  uselistorder i32 %v0_a9bc, { 1, 0, 2 }
  uselistorder i32 %v0_a8d4, { 1, 2, 0 }
  uselistorder i32 %tmp68, { 1, 0 }
  uselistorder i32 %v1_a828, { 2, 0, 1 }
  uselistorder i32 %v3_a820, { 2, 1, 0 }
  uselistorder i1 %v2_a7f8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a7ec, { 2, 1, 3, 0 }
  uselistorder i32 %v1_a7e8, { 4, 3, 5, 1, 2, 0 }
  uselistorder i32 %v0_a7e4, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v0_a7e0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a7dc, { 1, 0 }
  uselistorder i1 %v7_a7cc, { 1, 0 }
  uselistorder i1 %v7_a7a0, { 1, 0 }
  uselistorder i32 %v3_a79c, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_a788, { 2, 1, 0 }
  uselistorder i32 %v5_a778, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_a744, { 1, 2, 0 }
  uselistorder i32 %v5_a724, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v6_a6f0, { 1, 0, 3, 2 }
  uselistorder i32 %v1_a6d8, { 1, 0 }
  uselistorder i32 %v1_a6b4, { 2, 1, 0 }
  uselistorder i32 %v5_a6ac, { 1, 0 }
  uselistorder i8 %v5_a690, { 0, 2, 1 }
  uselistorder i32 %v6_a670, { 1, 0 }
  uselistorder i32 %v2_a658, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 19, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 15, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 38, 37, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 5, 4, 1, 6, 7, 9, 10, 8, 12, 11, 14, 13, 15, 17, 16, 18, 20, 19, 21, 22, 23, 24, 26, 25, 30, 27, 28, 29, 33, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 13, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 %arg2, { 6, 5, 4, 1, 0, 3, 2, 7, 8, 9, 10 }
  uselistorder label %dec_label_pc_acd8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_aae8, { 1, 0 }
  uselistorder label %dec_label_pc_aa84, { 2, 0, 1 }
  uselistorder label %dec_label_pc_aa10, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_acf4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_acf4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_acf4 = load i32, i32* @r4, align 4
  %v24_acf4 = load i32, i32* @fp, align 4
  %v27_acf4 = load i32, i32* @lr, align 4
  store i32 0, i32* @sb, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_ad20 = call i32 @function_1384c(i32 %arg2, i32 4)
  %v0_ad24 = load i32, i32* @r4, align 4
  store i32 %v0_ad24, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ad30 = load i32, i32* @sb, align 4
  store i32 %v0_ad30, i32* %r3.global-to-local, align 4
  %v0_ad34 = load i32, i32* @r5, align 4
  %v5_ad38 = inttoptr i32 %v0_ad24 to i32*
  %v6_ad38 = call i32 @function_8258(i32 %v0_ad34, i32* %v5_ad38, i32 2, i32 %v0_ad30)
  %v1_ad44 = urem i32 %v6_ad38, 256
  store i32 %v1_ad44, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ad50 = load i32, i32* @r4, align 4
  store i32 %v0_ad50, i32* %r1.global-to-local, align 4
  %v0_ad54 = load i32, i32* @r5, align 4
  %v5_ad58 = trunc i32 %v6_ad38 to i8
  %v6_ad5c = inttoptr i32 %v0_ad50 to i32*
  %v7_ad5c = call i32 @function_8258(i32 %v0_ad54, i32* %v6_ad5c, i32 3, i32 65535)
  %v0_ad60 = load i32, i32* @r4, align 4
  store i32 %v0_ad60, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_ad70 = load i32, i32* @r5, align 4
  %v5_ad74 = inttoptr i32 %v0_ad60 to i32*
  %v6_ad74 = call i32 @function_8258(i32 %v0_ad70, i32* %v5_ad74, i32 4, i32 64)
  %v1_ad7c = urem i32 %v6_ad74, 256
  store i32 %v1_ad7c, i32* %ip.global-to-local, align 4
  %v0_ad80 = load i32, i32* @r4, align 4
  store i32 %v0_ad80, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ad8c = load i32, i32* @r5, align 4
  %v6_ad94 = inttoptr i32 %v0_ad80 to i32*
  %v7_ad94 = call i32 @function_8258(i32 %v0_ad8c, i32* %v6_ad94, i32 5, i32 1)
  %v1_ada0 = urem i32 %v7_ad94, 256
  store i32 %v1_ada0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_adac = load i32, i32* @r4, align 4
  store i32 %v0_adac, i32* %r1.global-to-local, align 4
  %v0_adb0 = load i32, i32* @r5, align 4
  %v5_adb8 = inttoptr i32 %v0_adac to i32*
  %v6_adb8 = call i32 @function_8258(i32 %v0_adb0, i32* %v5_adb8, i32 6, i32 65535)
  %v0_adc0 = load i32, i32* @r4, align 4
  store i32 %v0_adc0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_adb8, i32* %fp.global-to-local, align 4
  %v0_add0 = load i32, i32* @r5, align 4
  %v4_add4 = inttoptr i32 %v0_adc0 to i32*
  %v5_add4 = call i32 @function_8258(i32 %v0_add0, i32* %v4_add4, i32 7, i32 65535)
  %v0_add8 = load i32, i32* @r4, align 4
  store i32 %v0_add8, i32* %r1.global-to-local, align 4
  %v0_addc = load i32, i32* @sb, align 4
  store i32 %v0_addc, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_add4, i32* @r8, align 4
  %v0_ade8 = load i32, i32* @r5, align 4
  %v4_adec = inttoptr i32 %v0_add8 to i32*
  %v5_adec = call i32 @function_8258(i32 %v0_ade8, i32* %v4_adec, i32 %v0_addc, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_adfc = load i32, i32* @r4, align 4
  store i32 %v0_adfc, i32* %r1.global-to-local, align 4
  %v0_ae00 = load i32, i32* @r5, align 4
  %v4_ae04 = inttoptr i32 %v0_adfc to i32*
  %v5_ae04 = call i32 @function_8258(i32 %v0_ae00, i32* %v4_ae04, i32 1, i32 1)
  %v1_ae0c = urem i32 %v5_ae04, 256
  store i32 %v1_ae0c, i32* %ip.global-to-local, align 4
  %v0_ae10 = load i32, i32* @r4, align 4
  store i32 %v0_ae10, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_ae18 = load i32, i32* @sb, align 4
  store i32 %v0_ae18, i32* %r3.global-to-local, align 4
  %v0_ae1c = load i32, i32* @r5, align 4
  %v5_ae24 = inttoptr i32 %v0_ae10 to i32*
  %v6_ae24 = call i32 @function_8258(i32 %v0_ae1c, i32* %v5_ae24, i32 18, i32 %v0_ae18)
  %v0_ae2c = load i32, i32* @r4, align 4
  store i32 %v0_ae2c, i32* %r1.global-to-local, align 4
  %v2_ae30 = load i32, i32* @global_var_22418.77, align 4
  store i32 %v2_ae30, i32* %r3.global-to-local, align 4
  store i32 %v6_ae24, i32* @r7, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_ae3c = load i32, i32* @r5, align 4
  %v4_ae40 = inttoptr i32 %v0_ae2c to i32*
  %v5_ae40 = call i32 @function_8258(i32 %v0_ae3c, i32* %v4_ae40, i32 24, i32 %v2_ae30)
  %v0_ae48 = load i32, i32* @sb, align 4
  %v1_ae4c = inttoptr i32 %v0_ae48 to i32*
  %v2_ae4c = call i32 @function_12150(i32* %v1_ae4c)
  %v1_ae50 = load i32, i32* @r6, align 4
  %v2_ae50 = add i32 %v1_ae50, %v2_ae4c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_ae64 = call i32 @function_12ce4(i32 2, i32 3, i32 6)
  %v7_ae68 = icmp eq i32 %v3_ae64, -1
  store i1 %v7_ae68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ae68, label %dec_label_pc_b338, label %dec_label_pc_ae74

dec_label_pc_ae74:                                ; preds = %dec_label_pc_acf4
  store i32 1, i32* %stack_var_-44, align 4
  %v6_ae7c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_ae7c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_ae84 = load i32, i32* @sb, align 4
  store i32 %v0_ae84, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_ae90 = call i32 @function_12ca0(i32 %v3_ae64, i32 %v0_ae84, i32 3, i32 %v6_ae7c, i32 4)
  %v7_ae94 = icmp eq i32 %v5_ae90, -1
  store i1 %v7_ae94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ae94, label %dec_label_pc_b344, label %dec_label_pc_ae9c

dec_label_pc_ae9c:                                ; preds = %dec_label_pc_ae74
  %v0_ae9c = load i32, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v0_aeb0 = load i32, i32* @r8, align 4
  %v3_aeb4 = mul i32 %v7_ad5c, 65536
  store i32 %v3_aeb4, i32* %r1.global-to-local, align 4
  %v0_aeb8 = load i32, i32* @r7, align 4
  %v1_aeb8 = urem i32 %v0_aeb8, 256
  store i32 %v1_aeb8, i32* @r7, align 4
  %v3_aebc = urem i32 %v0_ae9c, 65536
  store i32 %v3_aebc, i32* %r3.global-to-local, align 4
  %v3_aec0 = urem i32 %v0_aeb0, 65536
  store i32 %v3_aec0, i32* %ip.global-to-local, align 4
  %v2_aec4 = icmp eq i32 %arg2, 0
  store i1 %v2_aec4, i1* %cpsr_z.global-to-local, align 1
  %v0_aed4 = load i32, i32* @sb, align 4
  store i32 %v0_aed4, i32* %stack_var_-44, align 4
  %v3_aed8 = urem i32 %v7_ad5c, 65536
  store i32 %v3_aed8, i32* @fp, align 4
  br i1 %v2_aec4, label %dec_label_pc_b0cc.preheader, label %dec_label_pc_aee8

dec_label_pc_aee8:                                ; preds = %dec_label_pc_ae9c
  %v3_aeb0 = mul i32 %v0_aeb0, 65536
  %v3_ae9c = mul i32 %v0_ae9c, 65536
  %v3_aeec = mul i32 %v5_adec, 65536
  %v1_aef0 = add i32 %v3_aeec, 3407872
  %tmp68 = udiv i32 %v1_aef0, 256
  %v3_aefc = and i32 %tmp68, 65280
  %v7_ad5c.not = or i32 %v7_ad5c, -65536
  %v1_af00 = xor i32 %v7_ad5c.not, 65535
  %v4_af04 = udiv i32 %v1_aef0, 16777216
  %v5_af04 = or i32 %v3_aefc, %v4_af04
  store i32 %v3_aeb4, i32* %r3.global-to-local, align 4
  %tmp69 = mul i32 %v7_ad5c, 256
  %v3_af1c = and i32 %tmp69, 65280
  %tmp70 = mul nsw i32 %v1_af00, 256
  %v3_af20 = and i32 %tmp70, 65280
  %tmp71 = udiv i32 %v7_ad5c, 256
  %v4_af24 = urem i32 %tmp71, 256
  %v5_af24 = or i32 %v4_af24, %v3_af1c
  %tmp72 = udiv i32 %v1_af00, 256
  %v4_af2c = urem i32 %tmp72, 256
  %v5_af2c = or i32 %v4_af2c, %v3_af20
  store i32 %v5_af2c, i32* @r6, align 4
  store i32 %v3_ae9c, i32* %r1.global-to-local, align 4
  store i32 %v3_aeb0, i32* %r2.global-to-local, align 4
  %v1_af40 = add i32 %v3_aeec, 524288
  %tmp73 = mul i32 %v0_ae9c, 256
  %v3_af44 = and i32 %tmp73, 65280
  %v1_af48 = add i32 %v3_aeec, 1835008
  store i32 %v1_af48, i32* @r5, align 4
  %tmp74 = mul i32 %v0_aeb0, 256
  %v3_af4c = and i32 %tmp74, 65280
  %v3_af54 = udiv i32 %v1_af48, 256
  %tmp75 = udiv i32 %v0_ae9c, 256
  %v4_af58 = urem i32 %tmp75, 256
  %v5_af58 = or i32 %v4_af58, %v3_af44
  %tmp76 = udiv i32 %v0_aeb0, 256
  %v4_af5c = urem i32 %tmp76, 256
  %v5_af5c = or i32 %v4_af5c, %v3_af4c
  store i32 %v5_af5c, i32* %ip.global-to-local, align 4
  %v1_af60 = and i32 %v3_af54, 65280
  %tmp77 = udiv i32 %v1_af40, 256
  %v3_af64 = and i32 %tmp77, 65280
  store i32 %v3_af64, i32* @lr, align 4
  %v4_af78 = udiv i32 %v1_af40, 16777216
  %v5_af78 = or i32 %v3_af64, %v4_af78
  store i32 %v5_af78, i32* @r7, align 4
  %v4_af7c = udiv i32 %v1_af48, 16777216
  %v5_af7c = or i32 %v1_af60, %v4_af7c
  store i32 %v5_af7c, i32* @r8, align 4
  store i32 %v0_aed4, i32* @r4, align 4
  %v4_afd4 = sext i8 %v5_ad58 to i32
  %v1_afe0 = trunc i32 %v6_ad74 to i8
  %sext = mul nuw i32 %v5_af04, 65536
  %v4_afe8 = sdiv i32 %sext, 65536
  %sext8 = mul nuw i32 %v5_af24, 65536
  %v4_afec = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_af2c, 65536
  %v4_b054 = sdiv i32 %sext9, 65536
  %v2_b084 = icmp eq i32 %v1_aeb8, 0
  %sext10 = mul nuw i32 %v5_af58, 65536
  %v4_b0a8 = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_af5c, 65536
  %v4_b0b0 = sdiv i32 %sext11, 65536
  %extract.t = trunc i32 %v4_afe8 to i16
  br label %dec_label_pc_af84

dec_label_pc_af84:                                ; preds = %bb82, %dec_label_pc_aee8
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_af90 = call i32 @function_1384c(i32 1510, i32 4)
  store i32 %v2_ad20, i32* %ip.global-to-local, align 4
  %v2_af9c = load i32, i32* @r4, align 4
  %v5_af9c = mul i32 %v2_af9c, 4
  %v6_af9c = add i32 %v5_af9c, %v2_ad20
  %v7_af9c = inttoptr i32 %v6_af9c to i32*
  store i32 %v2_af90, i32* %v7_af9c, align 4
  %v3_afa0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_afa0, i32* %r3.global-to-local, align 4
  %v0_afa4 = load i32, i32* %ip.global-to-local, align 4
  %v4_afa4 = mul i32 %v3_afa0, 4
  %v5_afa4 = add i32 %v0_afa4, %v4_afa4
  %v6_afa4 = inttoptr i32 %v5_afa4 to i32*
  %v7_afa4 = load i32, i32* %v6_afa4, align 4
  store i32 %v7_afa4, i32* %r4.global-to-local, align 4
  %v1_afa8 = inttoptr i32 %v7_afa4 to i8*
  %v2_afa8 = load i8, i8* %v1_afa8, align 1
  %tmp = urem i8 %v2_afa8, 16
  %v1_afac = zext i8 %tmp to i32
  %v1_afb0 = or i32 %v1_afac, 64
  store i32 %v1_afb0, i32* %r2.global-to-local, align 4
  %v1_afb4 = trunc i32 %v1_afb0 to i8
  store i8 %v1_afb4, i8* %v1_afa8, align 1
  %v0_afb8 = load i32, i32* %r3.global-to-local, align 4
  %v5_afbc = mul i32 %v0_afb8, 24
  store i32 %v5_afbc, i32* %r1.global-to-local, align 4
  %v0_afc0 = load i32, i32* %r4.global-to-local, align 4
  %v1_afc0 = inttoptr i32 %v0_afc0 to i8*
  %v2_afc0 = load i8, i8* %v1_afc0, align 1
  %v1_afc4 = and i8 %v2_afc0, -16
  %v1_afc8 = or i8 %v1_afc4, 5
  store i32 %v1_ada0, i32* %lr.global-to-local, align 4
  store i8 %v1_afc8, i8* %v1_afc0, align 1
  store i32 %v4_afd4, i32* %r2.global-to-local, align 4
  %v2_afd8 = load i32, i32* %r4.global-to-local, align 4
  %v3_afd8 = add i32 %v2_afd8, 1
  %v4_afd8 = inttoptr i32 %v3_afd8 to i8*
  store i8 %v5_ad58, i8* %v4_afd8, align 1
  store i32 %v1_ad7c, i32* %r3.global-to-local, align 4
  %v2_afe0 = load i32, i32* %r4.global-to-local, align 4
  %v3_afe0 = add i32 %v2_afe0, 8
  %v4_afe0 = inttoptr i32 %v3_afe0 to i8*
  store i8 %v1_afe0, i8* %v4_afe0, align 1
  %v0_afe4 = load i32, i32* %lr.global-to-local, align 4
  %v2_afe4 = icmp eq i32 %v0_afe4, 0
  store i1 %v2_afe4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_afe8, i32* %ip.global-to-local, align 4
  store i32 %v4_afec, i32* %lr.global-to-local, align 4
  br i1 %v2_afe4, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_af84
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_aff4 = load i32, i32* %r4.global-to-local, align 4
  %v4_aff4 = add i32 %v3_aff4, 6
  %v5_aff4 = inttoptr i32 %v4_aff4 to i16*
  store i16 64, i16* %v5_aff4, align 2
  %v0_aff8.pre = load i32, i32* %ip.global-to-local, align 4
  %extract.t27 = trunc i32 %v0_aff8.pre to i16
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_af84, %bb
  %v0_aff8.off0 = phi i16 [ %extract.t, %dec_label_pc_af84 ], [ %extract.t27, %bb ]
  %v2_aff8 = load i32, i32* %r4.global-to-local, align 4
  %v3_aff8 = add i32 %v2_aff8, 2
  %v4_aff8 = inttoptr i32 %v3_aff8 to i16*
  store i16 %v0_aff8.off0, i16* %v4_aff8, align 2
  %v0_affc = load i32, i32* %r4.global-to-local, align 4
  %v1_affc = add i32 %v0_affc, 20
  store i32 %v1_affc, i32* %r2.global-to-local, align 4
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v3_b008 = add i32 %v0_affc, 9
  %v4_b008 = inttoptr i32 %v3_b008 to i8*
  store i8 47, i8* %v4_b008, align 1
  %v0_b00c = load i32, i32* %lr.global-to-local, align 4
  %v1_b00c = trunc i32 %v0_b00c to i16
  %v2_b00c = load i32, i32* %r4.global-to-local, align 4
  %v3_b00c = add i32 %v2_b00c, 4
  %v4_b00c = inttoptr i32 %v3_b00c to i16*
  store i16 %v1_b00c, i16* %v4_b00c, align 2
  %v0_b010 = load i32, i32* %ip.global-to-local, align 4
  %v1_b010 = trunc i32 %v0_b010 to i16
  %v2_b010 = load i32, i32* %r2.global-to-local, align 4
  %v3_b010 = add i32 %v2_b010, 2
  %v4_b010 = inttoptr i32 %v3_b010 to i16*
  store i16 %v1_b010, i16* %v4_b010, align 2
  store i32 %v5_ae40, i32* %lr.global-to-local, align 4
  %v0_b018 = load i32, i32* %r4.global-to-local, align 4
  %v1_b018 = add i32 %v0_b018, 24
  %v2_b018 = inttoptr i32 %v1_b018 to i8*
  %v3_b018 = load i8, i8* %v2_b018, align 1
  %v4_b018 = zext i8 %v3_b018 to i32
  store i32 %v4_b018, i32* %r2.global-to-local, align 4
  %v2_b01c = add i32 %v0_b018, 12
  %v3_b01c = inttoptr i32 %v2_b01c to i32*
  store i32 %v5_ae40, i32* %v3_b01c, align 4
  %v0_b020 = load i32, i32* %r2.global-to-local, align 4
  %v1_b020 = and i32 %v0_b020, -241
  %v1_b024 = or i32 %v1_b020, 64
  store i32 %v1_b024, i32* %r2.global-to-local, align 4
  %v0_b028 = load i32, i32* %r1.global-to-local, align 4
  %v1_b028 = load i32, i32* @sl, align 4
  %v2_b028 = add i32 %v1_b028, %v0_b028
  store i32 %v2_b028, i32* %r1.global-to-local, align 4
  %v1_b02c = add i32 %v2_b028, 16
  %v2_b02c = inttoptr i32 %v1_b02c to i32*
  %v3_b02c = load i32, i32* %v2_b02c, align 4
  store i32 %v3_b02c, i32* %r1.global-to-local, align 4
  %v1_b030 = trunc i32 %v1_b024 to i8
  %v2_b030 = load i32, i32* %r4.global-to-local, align 4
  %v3_b030 = add i32 %v2_b030, 24
  %v4_b030 = inttoptr i32 %v3_b030 to i8*
  store i8 %v1_b030, i8* %v4_b030, align 1
  %v0_b034 = load i32, i32* %r4.global-to-local, align 4
  %v1_b034 = add i32 %v0_b034, 24
  %v2_b034 = inttoptr i32 %v1_b034 to i8*
  %v3_b034 = load i8, i8* %v2_b034, align 1
  %v1_b038 = and i8 %v3_b034, -16
  %v1_b03c = or i8 %v1_b038, 5
  store i8 %v1_b03c, i8* %v2_b034, align 1
  %v0_b044 = load i32, i32* %r1.global-to-local, align 4
  %v1_b044 = load i32, i32* %r4.global-to-local, align 4
  %v2_b044 = add i32 %v1_b044, 16
  %v3_b044 = inttoptr i32 %v2_b044 to i32*
  store i32 %v0_b044, i32* %v3_b044, align 4
  store i32 %v4_afd4, i32* %r1.global-to-local, align 4
  %v0_b04c = load i32, i32* %r4.global-to-local, align 4
  %v1_b04c = add i32 %v0_b04c, 24
  store i32 %v1_b04c, i32* @r5, align 4
  %v3_b050 = add i32 %v0_b04c, 25
  %v4_b050 = inttoptr i32 %v3_b050 to i8*
  store i8 %v5_ad58, i8* %v4_b050, align 1
  store i32 %v4_b054, i32* %r2.global-to-local, align 4
  %v0_b058 = load i32, i32* @r8, align 4
  %v1_b058 = trunc i32 %v0_b058 to i16
  %v2_b058 = load i32, i32* @r5, align 4
  %v3_b058 = add i32 %v2_b058, 2
  %v4_b058 = inttoptr i32 %v3_b058 to i16*
  store i16 %v1_b058, i16* %v4_b058, align 2
  %v0_b05c = load i32, i32* %r2.global-to-local, align 4
  %v1_b05c = trunc i32 %v0_b05c to i16
  %v2_b05c = load i32, i32* @r5, align 4
  %v3_b05c = add i32 %v2_b05c, 4
  %v4_b05c = inttoptr i32 %v3_b05c to i16*
  store i16 %v1_b05c, i16* %v4_b05c, align 2
  store i32 %v1_ad7c, i32* %r3.global-to-local, align 4
  %v0_b064 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b064, label %bb79, label %bb78

bb78:                                             ; preds = %.thread
  store i32 64, i32* %ip.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %.thread, %bb78
  %v2_b068 = load i32, i32* @r5, align 4
  %v3_b068 = add i32 %v2_b068, 8
  %v4_b068 = inttoptr i32 %v3_b068 to i8*
  store i8 %v1_afe0, i8* %v4_b068, align 1
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_b070 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b070, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_b070 = load i32, i32* %ip.global-to-local, align 4
  %v2_b070 = trunc i32 %v1_b070 to i16
  %v3_b070 = load i32, i32* @r5, align 4
  %v4_b070 = add i32 %v3_b070, 6
  %v5_b070 = inttoptr i32 %v4_b070 to i16*
  store i16 %v2_b070, i16* %v5_b070, align 2
  %v0_b074.pre = load i32, i32* %r3.global-to-local, align 4
  %extract.t28 = trunc i32 %v0_b074.pre to i8
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_b074.off0 = phi i8 [ 17, %bb79 ], [ %extract.t28, %bb80 ]
  %v2_b074 = load i32, i32* @r5, align 4
  %v3_b074 = add i32 %v2_b074, 9
  %v4_b074 = inttoptr i32 %v3_b074 to i8*
  store i8 %v0_b074.off0, i8* %v4_b074, align 1
  %v0_b078 = call i32 @function_f18c()
  store i32 %v1_aeb8, i32* @lr, align 4
  store i1 %v2_b084, i1* %cpsr_z.global-to-local, align 1
  %v1_b088 = sub i32 1023, %v0_b078
  store i32 %v1_b088, i32* %r3.global-to-local, align 4
  br i1 %v2_b084, label %.thread12, label %.thread13

.thread12:                                        ; preds = %bb81
  %v2_b090 = load i32, i32* @r5, align 4
  %v3_b090 = add i32 %v2_b090, 16
  %v4_b090 = inttoptr i32 %v3_b090 to i32*
  store i32 %v1_b088, i32* %v4_b090, align 4
  br label %bb82

.thread13:                                        ; preds = %bb81
  %v1_b08c = load i32, i32* %r4.global-to-local, align 4
  %v2_b08c = add i32 %v1_b08c, 16
  %v3_b08c = inttoptr i32 %v2_b08c to i32*
  %v4_b08c = load i32, i32* %v3_b08c, align 4
  store i32 %v4_b08c, i32* %r3.global-to-local, align 4
  %v2_b094 = load i32, i32* @r5, align 4
  %v3_b094 = add i32 %v2_b094, 16
  %v4_b094 = inttoptr i32 %v3_b094 to i32*
  store i32 %v4_b08c, i32* %v4_b094, align 4
  br label %bb82

bb82:                                             ; preds = %.thread12, %.thread13
  %v1_b098 = load i32, i32* @r5, align 4
  %v2_b098 = add i32 %v1_b098, 12
  %v3_b098 = inttoptr i32 %v2_b098 to i32*
  store i32 %v0_b078, i32* %v3_b098, align 4
  %v3_b09c = load i32, i32* %stack_var_-44, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_b0a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_b0a4 = add i32 %v0_b0a4, 44
  store i32 %v1_b0a4, i32* @r6, align 4
  store i32 %v4_b0a8, i32* %r2.global-to-local, align 4
  %v1_b0ac = add i32 %v3_b09c, 1
  store i32 %v1_b0ac, i32* @r4, align 4
  store i32 %v4_b0b0, i32* %r3.global-to-local, align 4
  %v9_b0b4 = icmp eq i32 %v1_b0ac, %arg2
  store i1 %v9_b0b4, i1* %cpsr_z.global-to-local, align 1
  %v0_b0b8 = load i32, i32* @r7, align 4
  %v1_b0b8 = trunc i32 %v0_b0b8 to i16
  %v3_b0b8 = add i32 %v0_b0a4, 48
  %v4_b0b8 = inttoptr i32 %v3_b0b8 to i16*
  store i16 %v1_b0b8, i16* %v4_b0b8, align 2
  %v0_b0bc = load i32, i32* %r2.global-to-local, align 4
  %v1_b0bc = trunc i32 %v0_b0bc to i16
  %v2_b0bc = load i32, i32* @r6, align 4
  %v3_b0bc = inttoptr i32 %v2_b0bc to i16*
  store i16 %v1_b0bc, i16* %v3_b0bc, align 2
  %v0_b0c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0c0 = trunc i32 %v0_b0c0 to i16
  %v2_b0c0 = load i32, i32* @r6, align 4
  %v3_b0c0 = add i32 %v2_b0c0, 2
  %v4_b0c0 = inttoptr i32 %v3_b0c0 to i16*
  store i16 %v1_b0c0, i16* %v4_b0c0, align 2
  %v0_b0c4 = load i32, i32* @r4, align 4
  store i32 %v0_b0c4, i32* %stack_var_-44, align 4
  %v5_b0c8 = icmp slt i32 %v1_b0ac, %arg2
  br i1 %v5_b0c8, label %dec_label_pc_af84, label %dec_label_pc_b0cc.preheader

dec_label_pc_b0cc.preheader:                      ; preds = %bb82, %dec_label_pc_ae9c
  %v1_b0e8 = add i32 %v5_adec, 8
  %v1_b0ec = add i32 %v5_adec, 52
  %v2_b0f8 = icmp eq i32 %v5_ae40, -1
  %v7_b0f8 = icmp eq i32 %v5_ae40, -1
  %v2_b2dc = icmp eq i32 %v1_aeb8, 0
  %v2_b2f8 = icmp eq i32 %v1_ae0c, 0
  br label %dec_label_pc_b0cc

dec_label_pc_b0cc:                                ; preds = %dec_label_pc_b0cc.preheader, %dec_label_pc_b324
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_aec4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_aec4, label %dec_label_pc_b324, label %dec_label_pc_b0e0

dec_label_pc_b0e0:                                ; preds = %dec_label_pc_b0cc
  store i32 %v5_adec, i32* %lr.global-to-local, align 4
  store i32 %v1_b0e8, i32* @sb, align 4
  store i32 %v1_b0ec, i32* @r8, align 4
  br label %dec_label_pc_b1f8

dec_label_pc_b0f4:                                ; preds = %dec_label_pc_b1f8
  store i32 %v5_ae40, i32* %r2.global-to-local, align 4
  store i1 %v7_b0f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b0f8, label %dec_label_pc_b280, label %dec_label_pc_b100

dec_label_pc_b100:                                ; preds = %dec_label_pc_b220, %dec_label_pc_b0f4
  store i32 65535, i32* @r4, align 4
  %v0_b108 = load i32, i32* @fp, align 4
  %v9_b108 = icmp eq i32 %v0_b108, 65535
  store i1 %v9_b108, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b108, label %dec_label_pc_b298, label %dec_label_pc_b110

dec_label_pc_b110:                                ; preds = %dec_label_pc_b280.dec_label_pc_b110_crit_edge, %dec_label_pc_b100
  %v1_b114 = phi i32 [ %v1_b114.pre, %dec_label_pc_b280.dec_label_pc_b110_crit_edge ], [ 65535, %dec_label_pc_b100 ]
  store i32 %v3_aebc, i32* %r3.global-to-local, align 4
  %v9_b114 = icmp eq i32 %v3_aebc, %v1_b114
  store i1 %v9_b114, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b114, label %dec_label_pc_b2c0, label %dec_label_pc_b11c

dec_label_pc_b11c:                                ; preds = %dec_label_pc_b298, %dec_label_pc_b110
  %v1_b120 = phi i32 [ %v1_b2b8, %dec_label_pc_b298 ], [ %v1_b114, %dec_label_pc_b110 ]
  store i32 %v3_aec0, i32* %ip.global-to-local, align 4
  %v9_b120 = icmp eq i32 %v3_aec0, %v1_b120
  store i1 %v9_b120, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b120, label %dec_label_pc_b2d4, label %dec_label_pc_b128

dec_label_pc_b128:                                ; preds = %dec_label_pc_b2c0, %dec_label_pc_b11c
  store i32 %v1_aeb8, i32* @lr, align 4
  store i1 %v2_b2dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b2dc, label %dec_label_pc_b2f0, label %.thread14

.thread14:                                        ; preds = %dec_label_pc_b128
  %v1_b130 = load i32, i32* @r5, align 4
  %v2_b130 = add i32 %v1_b130, 16
  %v3_b130 = inttoptr i32 %v2_b130 to i32*
  %v4_b130 = load i32, i32* %v3_b130, align 4
  store i32 %v4_b130, i32* %r3.global-to-local, align 4
  %v2_b134 = load i32, i32* @r6, align 4
  %v3_b134 = add i32 %v2_b134, 16
  %v4_b134 = inttoptr i32 %v3_b134 to i32*
  store i32 %v4_b130, i32* %v4_b134, align 4
  br label %dec_label_pc_b13c

dec_label_pc_b13c:                                ; preds = %bb85, %.thread14
  store i32 %v1_ae0c, i32* %r1.global-to-local, align 4
  store i1 %v2_b2f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b2f8, label %dec_label_pc_b148, label %dec_label_pc_b304

dec_label_pc_b148:                                ; preds = %dec_label_pc_b13c, %dec_label_pc_b2f0, %dec_label_pc_b304
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b14c = load i32, i32* @r5, align 4
  %v3_b14c = add i32 %v2_b14c, 10
  %v4_b14c = inttoptr i32 %v3_b14c to i16*
  store i16 0, i16* %v4_b14c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b154 = load i32, i32* @r5, align 4
  store i32 %v0_b154, i32* @r0, align 4
  %v2_b158 = call i32 @function_dd58(i32 %v0_b154, i32 20)
  %v3_b158 = trunc i32 %v2_b158 to i16
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_b160 = load i32, i32* @r5, align 4
  %v4_b160 = add i32 %v3_b160, 10
  %v5_b160 = inttoptr i32 %v4_b160 to i16*
  store i16 %v3_b158, i16* %v5_b160, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b168 = load i32, i32* %ip.global-to-local, align 4
  %v1_b168 = trunc i32 %v0_b168 to i16
  %v2_b168 = load i32, i32* @r6, align 4
  %v3_b168 = add i32 %v2_b168, 10
  %v4_b168 = inttoptr i32 %v3_b168 to i16*
  store i16 %v1_b168, i16* %v4_b168, align 2
  %v0_b16c = load i32, i32* @r6, align 4
  store i32 %v0_b16c, i32* @r0, align 4
  %v2_b170 = call i32 @function_dd58(i32 %v0_b16c, i32 20)
  %v3_b170 = trunc i32 %v2_b170 to i16
  %v3_b174 = load i32, i32* @r6, align 4
  %v4_b174 = add i32 %v3_b174, 10
  %v5_b174 = inttoptr i32 %v4_b174 to i16*
  store i16 %v3_b170, i16* %v5_b174, align 2
  %v2_b17c = load i32, i32* @r7, align 4
  %v3_b17c = add i32 %v2_b17c, 6
  %v4_b17c = inttoptr i32 %v3_b17c to i16*
  store i16 0, i16* %v4_b17c, align 2
  %v0_b180 = load i32, i32* @r7, align 4
  store i32 %v0_b180, i32* @r1, align 4
  %v1_b184 = add i32 %v0_b180, 4
  %v2_b184 = inttoptr i32 %v1_b184 to i16*
  %v3_b184 = load i16, i16* %v2_b184, align 2
  %v4_b184 = zext i16 %v3_b184 to i32
  store i32 %v4_b184, i32* %r2.global-to-local, align 4
  %v0_b188 = load i32, i32* @sb, align 4
  store i32 %v0_b188, i32* %r3.global-to-local, align 4
  %v0_b18c = load i32, i32* @r6, align 4
  %v4_b190 = call i32 @function_dda8(i32 %v0_b18c, i32 %v0_b180, i32 %v4_b184, i32 %v0_b188)
  %v5_b190 = trunc i32 %v4_b190 to i16
  %v3_b194 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b194, i32* %r2.global-to-local, align 4
  %v3_b198 = mul i32 %v3_b194, 32
  store i32 %v3_b198, i32* %r3.global-to-local, align 4
  %v0_b19c = load i32, i32* @r5, align 4
  %v1_b19c = add i32 %v0_b19c, 16
  %v2_b19c = inttoptr i32 %v1_b19c to i32*
  %v3_b19c = load i32, i32* %v2_b19c, align 4
  %v5_b1a0 = mul i32 %v3_b194, 24
  store i32 %v5_b1a0, i32* %r3.global-to-local, align 4
  %v1_b1a4 = load i32, i32* @sl, align 4
  %v2_b1a4 = add i32 %v1_b1a4, %v5_b1a0
  store i32 %v2_b1a4, i32* @lr, align 4
  %v2_b1a8 = add i32 %v2_b1a4, 4
  %v3_b1a8 = inttoptr i32 %v2_b1a8 to i32*
  store i32 %v3_b19c, i32* %v3_b1a8, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_b1b4 = load i32, i32* @r7, align 4
  %v4_b1b4 = add i32 %v3_b1b4, 6
  %v5_b1b4 = inttoptr i32 %v4_b1b4 to i16*
  store i16 %v5_b190, i16* %v5_b1b4, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b1bc = load i32, i32* %r1.global-to-local, align 4
  %v1_b1bc = trunc i32 %v0_b1bc to i16
  %v2_b1bc = load i32, i32* %r3.global-to-local, align 4
  %v3_b1bc = load i32, i32* @sl, align 4
  %v4_b1bc = add i32 %v3_b1bc, %v2_b1bc
  %v5_b1bc = inttoptr i32 %v4_b1bc to i16*
  store i16 %v1_b1bc, i16* %v5_b1bc, align 2
  %v0_b1c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b1c0 = trunc i32 %v0_b1c0 to i16
  %v2_b1c0 = load i32, i32* @lr, align 4
  %v3_b1c0 = add i32 %v2_b1c0, 2
  %v4_b1c0 = inttoptr i32 %v3_b1c0 to i16*
  store i16 %v1_b1c0, i16* %v4_b1c0, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b1c8 = load i32, i32* @r5, align 4
  store i32 %v0_b1c8, i32* %r1.global-to-local, align 4
  %v0_b1d0 = load i32, i32* @r8, align 4
  store i32 %v0_b1d0, i32* %r2.global-to-local, align 4
  %v0_b1d4 = load i32, i32* @lr, align 4
  %v0_b1d8 = load i32, i32* %ip.global-to-local, align 4
  %v6_b1dc = call i32 @function_12c60(i32 %v3_ae64, i32 %v0_b1c8, i32 %v0_b1d0, i32 16384, i32 %v0_b1d4, i32 %v0_b1d8)
  %v3_b1e0 = load i32, i32* %stack_var_-44, align 4
  %v1_b1e4 = add i32 %v3_b1e0, 1
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v9_b1ec = icmp eq i32 %v1_b1e4, %arg2
  store i1 %v9_b1ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b1e4, i32* %stack_var_-44, align 4
  %v6_b1f4 = icmp slt i32 %v1_b1e4, %arg2
  br i1 %v6_b1f4, label %dec_label_pc_b1f8, label %dec_label_pc_b324

dec_label_pc_b1f8:                                ; preds = %dec_label_pc_b148, %dec_label_pc_b0e0
  %v1_b20c = phi i32 [ %v1_b1e4, %dec_label_pc_b148 ], [ 0, %dec_label_pc_b0e0 ]
  %v5_b1fc = mul i32 %v1_b20c, 24
  %v1_b200 = load i32, i32* @sl, align 4
  %v2_b200 = add i32 %v1_b200, %v5_b1fc
  store i32 %v2_b200, i32* %r3.global-to-local, align 4
  store i32 %v2_ad20, i32* %r1.global-to-local, align 4
  %v1_b208 = add i32 %v2_b200, 20
  %v2_b208 = inttoptr i32 %v1_b208 to i8*
  %v3_b208 = load i8, i8* %v2_b208, align 1
  %v4_b208 = zext i8 %v3_b208 to i32
  store i32 %v4_b208, i32* %r2.global-to-local, align 4
  %v4_b20c = mul i32 %v1_b20c, 4
  %v5_b20c = add i32 %v4_b20c, %v2_ad20
  %v6_b20c = inttoptr i32 %v5_b20c to i32*
  %v7_b20c = load i32, i32* %v6_b20c, align 4
  store i32 %v7_b20c, i32* @r5, align 4
  %v2_b210 = icmp ugt i8 %v3_b208, 30
  %v7_b210 = icmp eq i8 %v3_b208, 31
  store i1 %v7_b210, i1* %cpsr_z.global-to-local, align 1
  %v1_b214 = add i32 %v7_b20c, 24
  store i32 %v1_b214, i32* @r6, align 4
  %v1_b218 = add i32 %v7_b20c, 44
  store i32 %v1_b218, i32* @r7, align 4
  %v2_b21c = xor i1 %v7_b210, true
  %v3_b21c = and i1 %v2_b210, %v2_b21c
  br i1 %v3_b21c, label %dec_label_pc_b0f4, label %dec_label_pc_b220

dec_label_pc_b220:                                ; preds = %dec_label_pc_b1f8
  %v1_b220 = add i32 %v2_b200, 16
  %v2_b220 = inttoptr i32 %v1_b220 to i32*
  %v3_b220 = load i32, i32* %v2_b220, align 4
  store i32 %v3_b220, i32* %r4.global-to-local, align 4
  %v0_b224 = call i32 @function_f18c()
  %v3_b228 = load i32, i32* %stack_var_-44, align 4
  %v5_b230 = mul i32 %v3_b228, 24
  %v1_b234 = and i32 %v3_b220, 16711680
  store i32 %v1_b234, i32* %ip.global-to-local, align 4
  %v3_b238 = udiv i32 %v3_b220, 16777216
  %v4_b23c = udiv i32 %v1_b234, 256
  %v5_b23c = or i32 %v4_b23c, %v3_b238
  store i32 %v5_b23c, i32* %r2.global-to-local, align 4
  %v1_b240 = load i32, i32* @sl, align 4
  %v2_b240 = add i32 %v1_b240, %v5_b230
  store i32 %v2_b240, i32* %r1.global-to-local, align 4
  %v1_b244 = and i32 %v3_b220, 65280
  store i32 %v1_b244, i32* %r3.global-to-local, align 4
  %v1_b248 = add i32 %v2_b240, 20
  %v2_b248 = inttoptr i32 %v1_b248 to i8*
  %v3_b248 = load i8, i8* %v2_b248, align 1
  %v4_b248 = zext i8 %v3_b248 to i32
  store i32 %v4_b248, i32* %ip.global-to-local, align 4
  %v5_b250 = call i32 @llvm.bswap.i32(i32 %v3_b220)
  %v7_b254 = lshr i32 %v0_b224, %v4_b248
  %v8_b254 = add i32 %v7_b254, %v5_b250
  %v1_b260 = and i32 %v8_b254, 65280
  store i32 %v1_b260, i32* %r1.global-to-local, align 4
  %v5_b26c = call i32 @llvm.bswap.i32(i32 %v8_b254)
  store i32 %v5_b26c, i32* %r3.global-to-local, align 4
  store i32 %v5_ae40, i32* %r2.global-to-local, align 4
  store i1 %v7_b0f8, i1* %cpsr_z.global-to-local, align 1
  %v1_b278 = load i32, i32* @r5, align 4
  %v2_b278 = add i32 %v1_b278, 16
  %v3_b278 = inttoptr i32 %v2_b278 to i32*
  store i32 %v5_b26c, i32* %v3_b278, align 4
  br i1 %v2_b0f8, label %dec_label_pc_b280, label %dec_label_pc_b100

dec_label_pc_b280:                                ; preds = %dec_label_pc_b220, %dec_label_pc_b0f4
  %v0_b280 = call i32 @function_f18c()
  store i32 65535, i32* @r4, align 4
  %v0_b28c = load i32, i32* @fp, align 4
  %v9_b28c = icmp eq i32 %v0_b28c, 65535
  store i1 %v9_b28c, i1* %cpsr_z.global-to-local, align 1
  %v1_b290 = load i32, i32* @r5, align 4
  %v2_b290 = add i32 %v1_b290, 12
  %v3_b290 = inttoptr i32 %v2_b290 to i32*
  store i32 %v0_b280, i32* %v3_b290, align 4
  br i1 %v9_b28c, label %dec_label_pc_b298, label %dec_label_pc_b280.dec_label_pc_b110_crit_edge

dec_label_pc_b280.dec_label_pc_b110_crit_edge:    ; preds = %dec_label_pc_b280
  %v1_b114.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b110

dec_label_pc_b298:                                ; preds = %dec_label_pc_b280, %dec_label_pc_b100
  %v0_b298 = call i32 @function_f18c()
  %v3_b2a0 = urem i32 %v0_b298, 65536
  %v1_b2a8 = sub nsw i32 999, %v3_b2a0
  store i32 %v1_b2a8, i32* %r3.global-to-local, align 4
  %v1_b2ac = trunc i32 %v0_b298 to i16
  %v2_b2ac = load i32, i32* @r5, align 4
  %v3_b2ac = add i32 %v2_b2ac, 4
  %v4_b2ac = inttoptr i32 %v3_b2ac to i16*
  store i16 %v1_b2ac, i16* %v4_b2ac, align 2
  %v0_b2b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b2b0 = trunc i32 %v0_b2b0 to i16
  %v2_b2b0 = load i32, i32* @r6, align 4
  %v3_b2b0 = add i32 %v2_b2b0, 4
  %v4_b2b0 = inttoptr i32 %v3_b2b0 to i16*
  store i16 %v1_b2b0, i16* %v4_b2b0, align 2
  store i32 %v3_aebc, i32* %r3.global-to-local, align 4
  %v1_b2b8 = load i32, i32* @r4, align 4
  %v9_b2b8 = icmp eq i32 %v3_aebc, %v1_b2b8
  store i1 %v9_b2b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b2b8, label %dec_label_pc_b2c0, label %dec_label_pc_b11c

dec_label_pc_b2c0:                                ; preds = %dec_label_pc_b298, %dec_label_pc_b110
  %v0_b2c0 = call i32 @function_f18c()
  %v1_b2c0 = trunc i32 %v0_b2c0 to i16
  store i32 %v3_aec0, i32* %ip.global-to-local, align 4
  %v1_b2c8 = load i32, i32* @r4, align 4
  %v9_b2c8 = icmp eq i32 %v3_aec0, %v1_b2c8
  store i1 %v9_b2c8, i1* %cpsr_z.global-to-local, align 1
  %v3_b2cc = load i32, i32* @r5, align 4
  %v4_b2cc = add i32 %v3_b2cc, 44
  %v5_b2cc = inttoptr i32 %v4_b2cc to i16*
  store i16 %v1_b2c0, i16* %v5_b2cc, align 2
  br i1 %v9_b2c8, label %dec_label_pc_b2d4, label %dec_label_pc_b128

dec_label_pc_b2d4:                                ; preds = %dec_label_pc_b2c0, %dec_label_pc_b11c
  %v0_b2d4 = call i32 @function_f18c()
  %v1_b2d4 = trunc i32 %v0_b2d4 to i16
  store i32 %v1_aeb8, i32* @lr, align 4
  store i1 %v2_b2dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b2dc, label %.thread29, label %bb85

.thread29:                                        ; preds = %dec_label_pc_b2d4
  %v3_b2e430 = load i32, i32* @r7, align 4
  %v4_b2e431 = add i32 %v3_b2e430, 2
  %v5_b2e432 = inttoptr i32 %v4_b2e431 to i16*
  store i16 %v1_b2d4, i16* %v5_b2e432, align 2
  br label %dec_label_pc_b2f0

bb85:                                             ; preds = %dec_label_pc_b2d4
  %v1_b2e0 = load i32, i32* @r5, align 4
  %v2_b2e0 = add i32 %v1_b2e0, 16
  %v3_b2e0 = inttoptr i32 %v2_b2e0 to i32*
  %v4_b2e0 = load i32, i32* %v3_b2e0, align 4
  store i32 %v4_b2e0, i32* %r3.global-to-local, align 4
  %v3_b2e4 = load i32, i32* @r7, align 4
  %v4_b2e4 = add i32 %v3_b2e4, 2
  %v5_b2e4 = inttoptr i32 %v4_b2e4 to i16*
  store i16 %v1_b2d4, i16* %v5_b2e4, align 2
  %v1_b2e8 = load i32, i32* %r3.global-to-local, align 4
  %v2_b2e8 = load i32, i32* @r6, align 4
  %v3_b2e8 = add i32 %v2_b2e8, 16
  %v4_b2e8 = inttoptr i32 %v3_b2e8 to i32*
  store i32 %v1_b2e8, i32* %v4_b2e8, align 4
  br label %dec_label_pc_b13c

dec_label_pc_b2f0:                                ; preds = %.thread29, %dec_label_pc_b128
  %v0_b2f0 = call i32 @function_f18c()
  store i32 %v1_ae0c, i32* %r1.global-to-local, align 4
  store i1 %v2_b2f8, i1* %cpsr_z.global-to-local, align 1
  %v1_b2fc = load i32, i32* @r6, align 4
  %v2_b2fc = add i32 %v1_b2fc, 16
  %v3_b2fc = inttoptr i32 %v2_b2fc to i32*
  store i32 %v0_b2f0, i32* %v3_b2fc, align 4
  br i1 %v2_b2f8, label %dec_label_pc_b148, label %dec_label_pc_b304

dec_label_pc_b304:                                ; preds = %dec_label_pc_b13c, %dec_label_pc_b2f0
  %v0_b304 = load i32, i32* @r7, align 4
  %v1_b304 = add i32 %v0_b304, 8
  store i32 %v1_b304, i32* @r4, align 4
  store i32 %v5_adec, i32* %r1.global-to-local, align 4
  %v2_b310 = call i32 @function_f250(i32 %v1_b304, i32 %v5_adec)
  store i32 %v5_adec, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b31c = load i32, i32* @r4, align 4
  %v4_b31c = add i32 %v2_b31c, %v5_adec
  %v5_b31c = inttoptr i32 %v4_b31c to i8*
  store i8 0, i8* %v5_b31c, align 1
  br label %dec_label_pc_b148

dec_label_pc_b324:                                ; preds = %dec_label_pc_b148, %dec_label_pc_b0cc
  %v2_b328 = call i32 @function_12150(i32* null)
  store i32 %v2_ae50, i32* %ip.global-to-local, align 4
  %v9_b330 = icmp eq i32 %v2_ae50, %v2_b328
  store i1 %v9_b330, i1* %cpsr_z.global-to-local, align 1
  %v6_b334 = icmp slt i32 %v2_ae50, %v2_b328
  br i1 %v6_b334, label %dec_label_pc_b338, label %dec_label_pc_b0cc

dec_label_pc_b338:                                ; preds = %dec_label_pc_b324, %dec_label_pc_acf4, %dec_label_pc_b344
  %v1_b340 = phi i32 [ %v3_ae64, %dec_label_pc_acf4 ], [ %v1_b348, %dec_label_pc_b344 ], [ %v2_b328, %dec_label_pc_b324 ]
  store i32 %v3_acf4, i32* %r4.global-to-local, align 4
  store i32 %v24_acf4, i32* %fp.global-to-local, align 4
  store i32 %v27_acf4, i32* %lr.global-to-local, align 4
  ret i32 %v1_b340

dec_label_pc_b344:                                ; preds = %dec_label_pc_ae74
  %v1_b348 = call i32 @function_124d0(i32 %v3_ae64)
  br label %dec_label_pc_b338

; uselistorder directives
  uselistorder i16 %v1_b2d4, { 1, 0 }
  uselistorder i32 %v1_b2b8, { 1, 0 }
  uselistorder i32 %v0_b298, { 1, 0 }
  uselistorder i32 %v5_b26c, { 1, 0 }
  uselistorder i32 %v3_b220, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v7_b20c, { 1, 0, 2 }
  uselistorder i32 %v1_b1e4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_b194, { 1, 0, 2 }
  uselistorder i1 %v2_b2f8, { 2, 3, 1, 0 }
  uselistorder i1 %v2_b2dc, { 2, 3, 1, 0 }
  uselistorder i1 %v7_b0f8, { 2, 1, 0 }
  uselistorder i32 %v0_b078, { 1, 0 }
  uselistorder i32 %v1_af00, { 1, 0 }
  uselistorder i32 %v3_aeec, { 2, 1, 0 }
  uselistorder i1 %v2_aec4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_aeb8, { 4, 3, 5, 1, 2, 0 }
  uselistorder i32 %v3_aeb4, { 1, 0 }
  uselistorder i32 %v0_aeb0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ae9c, { 2, 0, 1, 3 }
  uselistorder i1 %v7_ae94, { 1, 0 }
  uselistorder i1 %v7_ae68, { 1, 0 }
  uselistorder i32 %v3_ae64, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v2_ae50, { 2, 1, 0 }
  uselistorder i32 %v5_ae40, { 3, 4, 0, 5, 1, 2 }
  uselistorder i32 %v1_ae0c, { 2, 1, 3, 0 }
  uselistorder i32 %v5_adec, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v1_ada0, { 1, 0 }
  uselistorder i32 %v1_ad7c, { 2, 1, 0 }
  uselistorder i32 %v6_ad74, { 1, 0 }
  uselistorder i32 %v7_ad5c, { 1, 0, 4, 3, 2 }
  uselistorder i8 %v5_ad58, { 0, 2, 1 }
  uselistorder i32 %v6_ad38, { 1, 0 }
  uselistorder i32 %v2_ad20, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 17, 18, 19, 20, 21, 31, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 15, 16, 23, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 2, 3, 4, 5, 6, 8, 7, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 17, 18, 25, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 33, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 14, 13, 16, 15, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 2, 3, 4, 5, 6, 7 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 8, 9, 17, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 5, 6, 7 }
  uselistorder i8 47, { 4, 5, 0, 1, 2, 3, 6, 7, 8, 9 }
  uselistorder i32 %arg2, { 6, 5, 4, 7, 1, 0, 3, 2, 8, 9, 10 }
  uselistorder label %dec_label_pc_b338, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b304, { 1, 0 }
  uselistorder label %dec_label_pc_b148, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b0cc, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b354(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b354:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp32 = call i8 @__decompiler_undefined_function_4()
  %tmp33 = call i16 @__decompiler_undefined_function_2()
  %tmp34 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp62 = call i16 @__decompiler_undefined_function_2()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_b354 = load i32, i32* @r4, align 4
  %v27_b354 = load i32, i32* @lr, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @fp, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_b380 = call i32 @function_1384c(i32 %arg2, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_b390 = call i32 @function_1384c(i32 %arg2, i32 4)
  %v0_b394 = load i32, i32* @r4, align 4
  store i32 %v0_b394, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b3a0 = load i32, i32* @r7, align 4
  store i32 %v0_b3a0, i32* %r3.global-to-local, align 4
  %v0_b3a4 = load i32, i32* @r5, align 4
  store i32 %v0_b3a4, i32* %r0.global-to-local, align 4
  %v5_b3a8 = inttoptr i32 %v0_b394 to i32*
  %v6_b3a8 = call i32 @function_8258(i32 %v0_b3a4, i32* %v5_b3a8, i32 2, i32 %v0_b3a0)
  %v1_b3b4 = urem i32 %v6_b3a8, 256
  store i32 %v1_b3b4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b3c0 = load i32, i32* @r4, align 4
  store i32 %v0_b3c0, i32* %r1.global-to-local, align 4
  %v0_b3c4 = load i32, i32* @r5, align 4
  store i32 %v0_b3c4, i32* %r0.global-to-local, align 4
  %v5_b3c8 = trunc i32 %v6_b3a8 to i8
  %v6_b3cc = inttoptr i32 %v0_b3c0 to i32*
  %v7_b3cc = call i32 @function_8258(i32 %v0_b3c4, i32* %v6_b3cc, i32 3, i32 65535)
  %v0_b3d0 = load i32, i32* @r4, align 4
  store i32 %v0_b3d0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b3cc, i32* @r8, align 4
  %v0_b3e0 = load i32, i32* @r5, align 4
  store i32 %v0_b3e0, i32* %r0.global-to-local, align 4
  %v4_b3e4 = inttoptr i32 %v0_b3d0 to i32*
  %v5_b3e4 = call i32 @function_8258(i32 %v0_b3e0, i32* %v4_b3e4, i32 4, i32 64)
  %v1_b3ec = urem i32 %v5_b3e4, 256
  store i32 %v1_b3ec, i32* %ip.global-to-local, align 4
  %v0_b3f0 = load i32, i32* @r4, align 4
  store i32 %v0_b3f0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b3fc = load i32, i32* @r5, align 4
  store i32 %v0_b3fc, i32* %r0.global-to-local, align 4
  %v5_b400 = trunc i32 %v5_b3e4 to i8
  %v6_b404 = inttoptr i32 %v0_b3f0 to i32*
  %v7_b404 = call i32 @function_8258(i32 %v0_b3fc, i32* %v6_b404, i32 5, i32 1)
  %v1_b410 = urem i32 %v7_b404, 256
  store i32 %v1_b410, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b418 = load i32, i32* @r4, align 4
  store i32 %v0_b418, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b420 = load i32, i32* @r5, align 4
  store i32 %v0_b420, i32* %r0.global-to-local, align 4
  %v5_b428 = inttoptr i32 %v0_b418 to i32*
  %v6_b428 = call i32 @function_8258(i32 %v0_b420, i32* %v5_b428, i32 7, i32 65535)
  %v0_b42c = load i32, i32* @r4, align 4
  store i32 %v0_b42c, i32* %r1.global-to-local, align 4
  %v3_b430 = mul i32 %v6_b428, 65536
  store i32 %v3_b430, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_b438 = load i32, i32* @r7, align 4
  store i32 %v0_b438, i32* %r3.global-to-local, align 4
  %v0_b43c = load i32, i32* @r5, align 4
  store i32 %v0_b43c, i32* %r0.global-to-local, align 4
  %v3_b440 = urem i32 %v6_b428, 65536
  store i32 %v3_b440, i32* @sb, align 4
  %v4_b444 = inttoptr i32 %v0_b42c to i32*
  %v5_b444 = call i32 @function_8258(i32 %v0_b43c, i32* %v4_b444, i32 10, i32 %v0_b438)
  %v1_b44c = urem i32 %v5_b444, 256
  store i32 %v1_b44c, i32* %ip.global-to-local, align 4
  %v0_b450 = load i32, i32* @r4, align 4
  store i32 %v0_b450, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b45c = load i32, i32* @r5, align 4
  store i32 %v0_b45c, i32* %r0.global-to-local, align 4
  %v5_b464 = inttoptr i32 %v0_b450 to i32*
  %v6_b464 = call i32 @function_8258(i32 %v0_b45c, i32* %v5_b464, i32 11, i32 1)
  %v1_b46c = urem i32 %v6_b464, 256
  store i32 %v1_b46c, i32* %ip.global-to-local, align 4
  %v0_b470 = load i32, i32* @r4, align 4
  store i32 %v0_b470, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b47c = load i32, i32* @r5, align 4
  store i32 %v0_b47c, i32* %r0.global-to-local, align 4
  %v5_b484 = inttoptr i32 %v0_b470 to i32*
  %v6_b484 = call i32 @function_8258(i32 %v0_b47c, i32* %v5_b484, i32 12, i32 1)
  %v1_b48c = urem i32 %v6_b484, 256
  store i32 %v1_b48c, i32* %ip.global-to-local, align 4
  %v0_b490 = load i32, i32* @r4, align 4
  store i32 %v0_b490, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_b498 = load i32, i32* @r7, align 4
  store i32 %v0_b498, i32* %r3.global-to-local, align 4
  %v0_b49c = load i32, i32* @r5, align 4
  store i32 %v0_b49c, i32* %r0.global-to-local, align 4
  %v5_b4a4 = inttoptr i32 %v0_b490 to i32*
  %v6_b4a4 = call i32 @function_8258(i32 %v0_b49c, i32* %v5_b4a4, i32 13, i32 %v0_b498)
  %v1_b4ac = urem i32 %v6_b4a4, 256
  store i32 %v1_b4ac, i32* %ip.global-to-local, align 4
  %v0_b4b0 = load i32, i32* @r4, align 4
  store i32 %v0_b4b0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_b4b8 = load i32, i32* @r7, align 4
  store i32 %v0_b4b8, i32* %r3.global-to-local, align 4
  %v0_b4bc = load i32, i32* @r5, align 4
  store i32 %v0_b4bc, i32* %r0.global-to-local, align 4
  %v5_b4c4 = inttoptr i32 %v0_b4b0 to i32*
  %v6_b4c4 = call i32 @function_8258(i32 %v0_b4bc, i32* %v5_b4c4, i32 14, i32 %v0_b4b8)
  %v1_b4cc = urem i32 %v6_b4c4, 256
  store i32 %v1_b4cc, i32* %ip.global-to-local, align 4
  %v0_b4d0 = load i32, i32* @r4, align 4
  store i32 %v0_b4d0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_b4d8 = load i32, i32* @r7, align 4
  store i32 %v0_b4d8, i32* %r3.global-to-local, align 4
  %v0_b4dc = load i32, i32* @r5, align 4
  store i32 %v0_b4dc, i32* %r0.global-to-local, align 4
  %v5_b4e4 = inttoptr i32 %v0_b4d0 to i32*
  %v6_b4e4 = call i32 @function_8258(i32 %v0_b4dc, i32* %v5_b4e4, i32 15, i32 %v0_b4d8)
  %v1_b4ec = urem i32 %v6_b4e4, 256
  store i32 %v1_b4ec, i32* %ip.global-to-local, align 4
  %v0_b4f0 = load i32, i32* @r7, align 4
  store i32 %v0_b4f0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b4f8 = load i32, i32* @r4, align 4
  store i32 %v0_b4f8, i32* %r1.global-to-local, align 4
  %v0_b4fc = load i32, i32* @r5, align 4
  store i32 %v0_b4fc, i32* %r0.global-to-local, align 4
  %v5_b504 = inttoptr i32 %v0_b4f8 to i32*
  %v6_b504 = call i32 @function_8258(i32 %v0_b4fc, i32* %v5_b504, i32 %v0_b4f0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b510 = load i32, i32* @r4, align 4
  store i32 %v0_b510, i32* %r1.global-to-local, align 4
  %v0_b518 = load i32, i32* @r5, align 4
  store i32 %v0_b518, i32* %r0.global-to-local, align 4
  %v4_b51c = inttoptr i32 %v0_b510 to i32*
  %v5_b51c = call i32 @function_8258(i32 %v0_b518, i32* %v4_b51c, i32 1, i32 1)
  %v1_b524 = urem i32 %v5_b51c, 256
  store i32 %v1_b524, i32* %r3.global-to-local, align 4
  %v0_b528 = load i32, i32* @r7, align 4
  store i32 %v0_b528, i32* %r0.global-to-local, align 4
  %v1_b530 = inttoptr i32 %v0_b528 to i32*
  %v2_b530 = call i32 @function_12150(i32* %v1_b530)
  %v1_b534 = load i32, i32* @r6, align 4
  %v2_b534 = add i32 %v1_b534, %v2_b530
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b548 = call i32 @function_12ce4(i32 2, i32 3, i32 6)
  store i32 %v3_b548, i32* %r0.global-to-local, align 4
  %v7_b54c = icmp eq i32 %v3_b548, -1
  store i32 %v3_b548, i32* @sl, align 4
  br i1 %v7_b54c, label %dec_label_pc_b88c, label %dec_label_pc_b558

dec_label_pc_b558:                                ; preds = %dec_label_pc_b354
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b560 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b560, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_b568 = load i32, i32* @r7, align 4
  store i32 %v0_b568, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b574 = call i32 @function_12ca0(i32 %v3_b548, i32 %v0_b568, i32 3, i32 %v6_b560, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b574, i32* %r0.global-to-local, align 4
  %v7_b578 = icmp eq i32 %v5_b574, -1
  br i1 %v7_b578, label %dec_label_pc_b884, label %dec_label_pc_b580

dec_label_pc_b580:                                ; preds = %dec_label_pc_b558
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v0_b584 = load i32, i32* @r8, align 4
  %v3_b588 = urem i32 %v0_b584, 65536
  store i32 %v3_b588, i32* @r3, align 4
  %v2_b58c = icmp eq i32 %arg2, 0
  %v0_b590 = load i32, i32* @r7, align 4
  store i32 %v0_b590, i32* %stack_var_-44, align 4
  %v5_b594 = trunc i32 %v0_b584 to i16
  br i1 %v2_b58c, label %dec_label_pc_b580.dec_label_pc_b728.preheader_crit_edge, label %dec_label_pc_b59c.preheader

dec_label_pc_b580.dec_label_pc_b728.preheader_crit_edge: ; preds = %dec_label_pc_b580
  %.pre = sext i16 %v5_b594 to i32
  %.pre94 = add i32 %v6_b504, 40
  br label %dec_label_pc_b728.preheader

dec_label_pc_b59c.preheader:                      ; preds = %dec_label_pc_b580
  %v2_b5e0 = ptrtoint i32* %stack_var_-160 to i32
  %v2_b628 = ptrtoint i32* %stack_var_-64 to i32
  %v2_b640 = ptrtoint i32* %stack_var_-80 to i32
  %v2_b648 = ptrtoint i32* %stack_var_-336 to i32
  %v2_b64c = ptrtoint i32* %stack_var_-48 to i32
  %v4_b6d4 = zext i8 %tmp32 to i32
  %v1_b6d8 = and i32 %v4_b6d4, 18
  %v2_b6dc = icmp eq i32 %v1_b6d8, 18
  %v1_b98c = add i32 %v6_b504, 40
  %v4_b9cc = sext i16 %v5_b594 to i32
  %v3_b9d8 = udiv i32 %v4_b9cc, 256
  %v1_bab4 = urem i32 %v5_b444, 2
  %tmp95 = sub nsw i32 0, %v1_bab4
  %v4_babc = and i32 %tmp95, 32
  %v1_bae8 = urem i32 %v6_b484, 2
  %tmp96 = sub nsw i32 0, %v1_bae8
  %v4_baf0 = and i32 %tmp96, 8
  %v1_bb34 = urem i32 %v6_b4e4, 2
  %v3_b6c0 = sext i16 %tmp62 to i32
  %v1_b6e4 = and i32 %v4_b6d4, 5
  %v2_b6e4 = icmp eq i32 %v1_b6e4, 0
  %v4_b620 = add i32 %v2_b5e0, 98
  %v5_b620 = inttoptr i32 %v4_b620 to i16*
  %v1_b9d4 = mul nsw i32 %v4_b9cc, 256
  %v4_b9e4 = and i32 %v1_b9d4, 65280
  %v5_b9e4 = or i32 %v4_b9e4, %v3_b9d8
  %v1_bacc = urem i32 %v6_b464, 2
  %tmp97 = sub nsw i32 0, %v1_bacc
  %v4_bad4 = and i32 %tmp97, 16
  %v1_bb00 = urem i32 %v6_b4a4, 2
  %tmp98 = sub nsw i32 0, %v1_bb00
  %v4_bb08 = and i32 %tmp98, 4
  %v1_bb18 = urem i32 %v6_b4c4, 2
  %tmp99 = sub nsw i32 0, %v1_bb18
  %v3_bb20 = and i32 %tmp99, 2
  br label %dec_label_pc_b59c.outer

dec_label_pc_b59c.outer:                          ; preds = %dec_label_pc_b59c.preheader, %.thread10
  %stack_var_-340.0.ph = phi i32 [ %tmp, %dec_label_pc_b59c.preheader ], [ %v0_ba18, %.thread10 ]
  %stack_var_-62.0.ph = phi i16 [ %tmp33, %dec_label_pc_b59c.preheader ], [ %stack_var_-62.2, %.thread10 ]
  %stack_var_-60.0.ph = phi i32 [ %tmp36, %dec_label_pc_b59c.preheader ], [ %v0_b930, %.thread10 ]
  br label %dec_label_pc_b59c

dec_label_pc_b59c:                                ; preds = %dec_label_pc_b59c.outer, %dec_label_pc_b710
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_b710 ], [ %stack_var_-62.0.ph, %dec_label_pc_b59c.outer ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_b710 ], [ %stack_var_-60.0.ph, %dec_label_pc_b59c.outer ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b5a8 = call i32 @function_12ce4(i32 2, i32 1, i32 0)
  store i32 %v3_b5a8, i32* %r0.global-to-local, align 4
  %v7_b5ac = icmp eq i32 %v3_b5a8, -1
  store i32 %v3_b5a8, i32* @r8, align 4
  br i1 %v7_b5ac, label %dec_label_pc_b710, label %dec_label_pc_b5b8

dec_label_pc_b5b8:                                ; preds = %dec_label_pc_b59c, %dec_label_pc_b6ec
  %v0_b5c0 = phi i32 [ %v3_b700, %dec_label_pc_b6ec ], [ %v3_b5a8, %dec_label_pc_b59c ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_b6ec ], [ %stack_var_-62.0, %dec_label_pc_b59c ]
  %stack_var_-60.1 = phi i32 [ %v0_b930, %dec_label_pc_b6ec ], [ %stack_var_-60.0, %dec_label_pc_b59c ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_b5c0 = call i32 @function_12304(i32 %v0_b5c0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b5c8 = or i32 %v2_b5c0, 2048
  store i32 %v1_b5c8, i32* %r2.global-to-local, align 4
  %v0_b5cc = load i32, i32* @r8, align 4
  store i32 %v0_b5cc, i32* %r0.global-to-local, align 4
  %v2_b5d0 = call i32 @function_12304(i32 %v0_b5cc, i32 4)
  store i32 %v2_b5d0, i32* %r0.global-to-local, align 4
  %v3_b5d4 = load i32, i32* %stack_var_-44, align 4
  %v5_b5dc = mul i32 %v3_b5d4, 24
  store i32 %v2_b5e0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v1_b5ec = load i32, i32* @fp, align 4
  %v2_b5ec = add i32 %v1_b5ec, %v5_b5dc
  store i32 %v2_b5ec, i32* %r3.global-to-local, align 4
  %v1_b5f0 = add i32 %v2_b5ec, 20
  %v2_b5f0 = inttoptr i32 %v1_b5f0 to i8*
  %v3_b5f0 = load i8, i8* %v2_b5f0, align 1
  %v4_b5f0 = zext i8 %v3_b5f0 to i32
  store i32 %v4_b5f0, i32* %r2.global-to-local, align 4
  %v2_b5f4 = icmp ugt i8 %v3_b5f0, 30
  %v7_b5f4 = icmp eq i8 %v3_b5f0, 31
  %v2_b5f8 = xor i1 %v7_b5f4, true
  %v3_b5f8 = and i1 %v2_b5f4, %v2_b5f8
  br i1 %v3_b5f8, label %bb, label %bb72

bb:                                               ; preds = %dec_label_pc_b5b8
  %v5_b5f8 = add i32 %v2_b5ec, 16
  %v6_b5f8 = inttoptr i32 %v5_b5f8 to i32*
  %v7_b5f8 = load i32, i32* %v6_b5f8, align 4
  store i32 %v7_b5f8, i32* %r3.global-to-local, align 4
  br label %bb72

bb72:                                             ; preds = %dec_label_pc_b5b8, %bb
  %v4_b5fc = phi i32 [ %v2_b5ec, %dec_label_pc_b5b8 ], [ %v7_b5f8, %bb ]
  %v4_b5fc.stack_var_-60.1 = select i1 %v3_b5f8, i32 %v4_b5fc, i32 %stack_var_-60.1
  %v2_b600 = xor i1 %v2_b5f4, true
  %v3_b600 = or i1 %v7_b5f4, %v2_b600
  br i1 %v3_b600, label %dec_label_pc_b898, label %dec_label_pc_b604

dec_label_pc_b604:                                ; preds = %bb72, %dec_label_pc_b898
  %v0_b930 = phi i32 [ %v5_b8e4, %dec_label_pc_b898 ], [ %v4_b5fc.stack_var_-60.1, %bb72 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b60c = load i32, i32* @sb, align 4
  %v9_b60c = icmp eq i32 %v0_b60c, 65535
  br i1 %v9_b60c, label %dec_label_pc_b8f0, label %.thread7

.thread7:                                         ; preds = %dec_label_pc_b604
  %v4_b610 = udiv i32 %v0_b60c, 256
  %v2_b614 = urem i32 %v0_b60c, 256
  store i32 %v2_b614, i32* %r2.global-to-local, align 4
  %v5_b618 = mul nuw nsw i32 %v2_b614, 256
  %v6_b618 = or i32 %v5_b618, %v4_b610
  store i32 %v6_b618, i32* %r3.global-to-local, align 4
  store i32 %v2_b5e0, i32* %ip.global-to-local, align 4
  %v2_b620 = trunc i32 %v6_b618 to i16
  store i16 %v2_b620, i16* %v5_b620, align 2
  br label %dec_label_pc_b628

dec_label_pc_b628:                                ; preds = %.thread7, %dec_label_pc_b8f0
  %stack_var_-62.2 = phi i16 [ %v1_b8f0, %dec_label_pc_b8f0 ], [ %stack_var_-62.1, %.thread7 ]
  store i32 %v2_b628, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_b630 = load i32, i32* @r8, align 4
  store i32 %v0_b630, i32* %r0.global-to-local, align 4
  %v3_b634 = call i32 @function_12acc(i32 %v0_b630, i32 %v2_b628, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b63c = call i32 @function_12150(i32* null)
  store i32 %v2_b63c, i32* %r0.global-to-local, align 4
  store i32 %v2_b640, i32* @r7, align 4
  store i32 %v2_b63c, i32* @r4, align 4
  store i32 %v2_b648, i32* @r6, align 4
  %v9_b6a0 = icmp eq i32 %tmp34, %v0_b930
  %v4_b6c8 = zext i16 %stack_var_-62.2 to i32
  %v9_b6b4 = icmp eq i1 %v9_b6a0, false
  %v9_b6cc = icmp eq i32 %v3_b6c0, %v4_b6c8
  br label %dec_label_pc_b664

dec_label_pc_b654:                                ; preds = %.thread, %dec_label_pc_b6bc, %dec_label_pc_b6e4, %bb76
  %v2_b654 = call i32 @function_12150(i32* null)
  %v0_b658 = load i32, i32* @r4, align 4
  %v2_b658 = sub i32 %v2_b654, %v0_b658
  store i32 %v2_b658, i32* %r0.global-to-local, align 4
  %v8_b660 = icmp sgt i32 %v2_b658, 10
  br i1 %v8_b660, label %dec_label_pc_b6ec, label %dec_label_pc_b664

dec_label_pc_b664:                                ; preds = %dec_label_pc_b654, %dec_label_pc_b628
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 %v2_b648, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b674 = load i32, i32* @sl, align 4
  store i32 %v0_b674, i32* %r0.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_b684 = call i32 @function_12bec(i32 %v0_b674, i32 %v2_b648, i32 256, i32 16384, i32 %v2_b640, i32 %v2_b64c)
  store i32 %v6_b684, i32* %r2.global-to-local, align 4
  %v7_b68c = icmp eq i32 %v6_b684, -1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_b68c, label %dec_label_pc_b88c, label %dec_label_pc_b698

dec_label_pc_b698:                                ; preds = %dec_label_pc_b664
  store i32 %v0_b930, i32* %r1.global-to-local, align 4
  store i32 %tmp34, i32* @r3, align 4
  %tmp100 = icmp ult i32 %v6_b684, 41
  br i1 %tmp100, label %.thread, label %bb76

.thread:                                          ; preds = %dec_label_pc_b698
  br label %dec_label_pc_b654

bb76:                                             ; preds = %dec_label_pc_b698
  br i1 %v9_b6b4, label %dec_label_pc_b654, label %dec_label_pc_b6bc

dec_label_pc_b6bc:                                ; preds = %bb76
  store i32 %v3_b6c0, i32* @lr, align 4
  store i32 %v2_b5e0, i32* @r3, align 4
  store i32 %v4_b6c8, i32* %r2.global-to-local, align 4
  br i1 %v9_b6cc, label %dec_label_pc_b6d4, label %dec_label_pc_b654

dec_label_pc_b6d4:                                ; preds = %dec_label_pc_b6bc
  store i32 %v4_b6d4, i32* %r2.global-to-local, align 4
  store i32 %v1_b6d8, i32* @r3, align 4
  br i1 %v2_b6dc, label %dec_label_pc_b924, label %dec_label_pc_b6e4

dec_label_pc_b6e4:                                ; preds = %dec_label_pc_b6d4
  br i1 %v2_b6e4, label %dec_label_pc_b654, label %dec_label_pc_b6ec

dec_label_pc_b6ec:                                ; preds = %dec_label_pc_b6e4, %dec_label_pc_b654
  %v0_b6ec = load i32, i32* @r8, align 4
  store i32 %v0_b6ec, i32* %r0.global-to-local, align 4
  %v1_b6f0 = call i32 @function_124d0(i32 %v0_b6ec)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b700 = call i32 @function_12ce4(i32 2, i32 1, i32 0)
  store i32 %v3_b700, i32* %r0.global-to-local, align 4
  %v3_b704 = icmp eq i32 %v3_b700, -1
  store i32 %v3_b700, i32* @r8, align 4
  br i1 %v3_b704, label %dec_label_pc_b710, label %dec_label_pc_b5b8

dec_label_pc_b710:                                ; preds = %dec_label_pc_b6ec, %dec_label_pc_b59c
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_b59c ], [ %stack_var_-62.2, %dec_label_pc_b6ec ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_b59c ], [ %v0_b930, %dec_label_pc_b6ec ]
  %v3_b710 = load i32, i32* %stack_var_-44, align 4
  %v1_b718 = add i32 %v3_b710, 1
  store i32 %v1_b718, i32* @r3, align 4
  store i32 %v1_b718, i32* %stack_var_-44, align 4
  %v5_b724 = icmp slt i32 %v1_b718, %arg2
  br i1 %v5_b724, label %dec_label_pc_b59c, label %dec_label_pc_b728.preheader

dec_label_pc_b728.preheader:                      ; preds = %.thread10, %dec_label_pc_b710, %dec_label_pc_b580.dec_label_pc_b728.preheader_crit_edge
  %v1_b760.pre-phi = phi i32 [ %.pre94, %dec_label_pc_b580.dec_label_pc_b728.preheader_crit_edge ], [ %v1_b98c, %dec_label_pc_b710 ], [ %v1_b98c, %.thread10 ]
  %v4_b844.pre-phi = phi i32 [ %.pre, %dec_label_pc_b580.dec_label_pc_b728.preheader_crit_edge ], [ %v4_b9cc, %dec_label_pc_b710 ], [ %v4_b9cc, %.thread10 ]
  %v3_b740 = mul i32 %v6_b504, 65536
  %v1_b744 = add i32 %v3_b740, 1310720
  %tmp78 = udiv i32 %v1_b744, 256
  %v3_b750 = and i32 %tmp78, 65280
  %v2_b85c = icmp eq i32 %v1_b524, 0
  %v4_b754 = udiv i32 %v1_b744, 16777216
  %v5_b754 = or i32 %v3_b750, %v4_b754
  %v1_b75c = add i32 %v6_b504, 20
  br label %dec_label_pc_b728

dec_label_pc_b728:                                ; preds = %dec_label_pc_b728.preheader, %dec_label_pc_b90c
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b58c, label %dec_label_pc_b90c, label %dec_label_pc_b73c

dec_label_pc_b73c:                                ; preds = %dec_label_pc_b728
  store i32 %v1_b744, i32* %r2.global-to-local, align 4
  store i32 %v6_b504, i32* %ip.global-to-local, align 4
  store i32 %v3_b750, i32* %r3.global-to-local, align 4
  store i32 %v5_b754, i32* @sb, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_b75c, i32* @r8, align 4
  store i32 %v1_b760.pre-phi, i32* @r7, align 4
  br label %dec_label_pc_b858

dec_label_pc_b768:                                ; preds = %dec_label_pc_b858, %dec_label_pc_b864
  %v2_b76c = phi i32 [ %v7_b840, %dec_label_pc_b858 ], [ %v2_b76c.pre, %dec_label_pc_b864 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b76c = add i32 %v2_b76c, 10
  %v4_b76c = inttoptr i32 %v3_b76c to i16*
  store i16 0, i16* %v4_b76c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b774 = load i32, i32* @r5, align 4
  store i32 %v0_b774, i32* @r0, align 4
  %v2_b778 = call i32 @function_dd58(i32 %v0_b774, i32 20)
  %v3_b778 = trunc i32 %v2_b778 to i16
  store i32 %v2_b778, i32* %r0.global-to-local, align 4
  %v3_b77c = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_b380, i32* %ip.global-to-local, align 4
  %v3_b784 = mul i32 %v3_b77c, 16
  %v2_b788 = add i32 %v3_b784, %v2_b380
  store i32 %v2_b788, i32* %r1.global-to-local, align 4
  %v1_b78c = add i32 %v2_b788, 4
  %v2_b78c = inttoptr i32 %v1_b78c to i32*
  %v3_b78c = load i32, i32* %v2_b78c, align 4
  %v3_b790 = mul i32 %v3_b78c, 65536
  store i32 %v3_b790, i32* %ip.global-to-local, align 4
  %tmp79 = mul i32 %v3_b78c, 256
  %v1_b798 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v3_b78c, 256
  %v4_b79c = urem i32 %tmp80, 256
  %v5_b79c = or i32 %v4_b79c, %v1_b798
  store i32 %v5_b79c, i32* %r3.global-to-local, align 4
  %v1_b7a0 = add i32 %v3_b78c, 1
  store i32 %v1_b7a0, i32* %r2.global-to-local, align 4
  store i32 %v1_b7a0, i32* %v2_b78c, align 4
  %v0_b7a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7a8 = load i32, i32* @r6, align 4
  %v2_b7a8 = add i32 %v1_b7a8, 4
  %v3_b7a8 = inttoptr i32 %v2_b7a8 to i32*
  store i32 %v0_b7a8, i32* %v3_b7a8, align 4
  %v0_b7ac = load i32, i32* %r1.global-to-local, align 4
  %v1_b7ac = add i32 %v0_b7ac, 8
  %v2_b7ac = inttoptr i32 %v1_b7ac to i32*
  %v3_b7ac = load i32, i32* %v2_b7ac, align 4
  %tmp81 = mul i32 %v3_b7ac, 256
  %v1_b7b8 = and i32 %tmp81, 65280
  %tmp82 = udiv i32 %v3_b7ac, 256
  %v4_b7bc = urem i32 %tmp82, 256
  %v5_b7bc = or i32 %v4_b7bc, %v1_b7b8
  store i32 %v5_b7bc, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v3_b7c4 = load i32, i32* @r5, align 4
  %v4_b7c4 = add i32 %v3_b7c4, 10
  %v5_b7c4 = inttoptr i32 %v4_b7c4 to i16*
  store i16 %v3_b778, i16* %v5_b7c4, align 2
  %v0_b7c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7c8 = load i32, i32* @r6, align 4
  %v2_b7c8 = add i32 %v1_b7c8, 8
  %v3_b7c8 = inttoptr i32 %v2_b7c8 to i32*
  store i32 %v0_b7c8, i32* %v3_b7c8, align 4
  %v0_b7cc = load i32, i32* @lr, align 4
  %v1_b7cc = trunc i32 %v0_b7cc to i16
  %v2_b7cc = load i32, i32* @r6, align 4
  %v3_b7cc = add i32 %v2_b7cc, 16
  %v4_b7cc = inttoptr i32 %v3_b7cc to i16*
  store i16 %v1_b7cc, i16* %v4_b7cc, align 2
  %v0_b7d0 = load i32, i32* @r6, align 4
  store i32 %v0_b7d0, i32* @r1, align 4
  %v0_b7d4 = load i32, i32* @sb, align 4
  store i32 %v0_b7d4, i32* %r2.global-to-local, align 4
  %v0_b7d8 = load i32, i32* @r8, align 4
  store i32 %v0_b7d8, i32* %r3.global-to-local, align 4
  %v0_b7dc = load i32, i32* @r5, align 4
  store i32 %v0_b7dc, i32* %r0.global-to-local, align 4
  %v4_b7e0 = call i32 @function_dda8(i32 %v0_b7dc, i32 %v0_b7d0, i32 %v0_b7d4, i32 %v0_b7d8)
  %v5_b7e0 = trunc i32 %v4_b7e0 to i16
  store i32 %v4_b7e0, i32* %r0.global-to-local, align 4
  %v3_b7e4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b7e4, i32* %r3.global-to-local, align 4
  %v3_b7e8 = mul i32 %v3_b7e4, 32
  store i32 %v3_b7e8, i32* %lr.global-to-local, align 4
  %v3_b7ec = load i32, i32* @r6, align 4
  %v4_b7ec = add i32 %v3_b7ec, 16
  %v5_b7ec = inttoptr i32 %v4_b7ec to i16*
  store i16 %v5_b7e0, i16* %v5_b7ec, align 2
  %v0_b7f0 = load i32, i32* %lr.global-to-local, align 4
  %v1_b7f0 = load i32, i32* %r3.global-to-local, align 4
  %tmp101 = mul i32 %v1_b7f0, -8
  %v5_b7f0 = add i32 %v0_b7f0, %tmp101
  store i32 %v5_b7f0, i32* %lr.global-to-local, align 4
  %v0_b7f4 = load i32, i32* @r6, align 4
  %v1_b7f4 = add i32 %v0_b7f4, 2
  %v2_b7f4 = inttoptr i32 %v1_b7f4 to i16*
  %v3_b7f4 = load i16, i16* %v2_b7f4, align 2
  %v1_b7f8 = load i32, i32* @fp, align 4
  %v2_b7f8 = add i32 %v1_b7f8, %v5_b7f0
  store i32 %v2_b7f8, i32* @lr, align 4
  %v3_b7fc = add i32 %v2_b7f8, 2
  %v4_b7fc = inttoptr i32 %v3_b7fc to i16*
  store i16 %v3_b7f4, i16* %v4_b7fc, align 2
  %v0_b800 = load i32, i32* @r5, align 4
  store i32 %v0_b800, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b80c = load i32, i32* @sl, align 4
  store i32 %v0_b80c, i32* %r0.global-to-local, align 4
  %v0_b810 = load i32, i32* @r7, align 4
  store i32 %v0_b810, i32* %r2.global-to-local, align 4
  %v0_b814 = load i32, i32* @lr, align 4
  %v6_b81c = call i32 @function_12c60(i32 %v0_b80c, i32 %v0_b800, i32 %v0_b810, i32 16384, i32 %v0_b814, i32 16)
  %v3_b820 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b820, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v1_b828 = add i32 %v3_b820, 1
  store i32 %v1_b828, i32* %r0.global-to-local, align 4
  store i32 %v1_b828, i32* %stack_var_-44, align 4
  %v7_b834 = icmp slt i32 %v1_b828, %arg2
  br i1 %v7_b834, label %dec_label_pc_b858, label %dec_label_pc_b90c

dec_label_pc_b858:                                ; preds = %dec_label_pc_b73c, %dec_label_pc_b768
  %v1_b840 = phi i32 [ %v1_b828, %dec_label_pc_b768 ], [ 0, %dec_label_pc_b73c ]
  store i32 %v2_b390, i32* @lr, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_b840 = mul i32 %v1_b840, 4
  %v5_b840 = add i32 %v4_b840, %v2_b390
  %v6_b840 = inttoptr i32 %v5_b840 to i32*
  %v7_b840 = load i32, i32* %v6_b840, align 4
  store i32 %v7_b840, i32* @r5, align 4
  store i32 %v4_b844.pre-phi, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v1_b850 = add i32 %v7_b840, 20
  store i32 %v1_b850, i32* @r6, align 4
  store i32 %v1_b524, i32* %r1.global-to-local, align 4
  br i1 %v2_b85c, label %dec_label_pc_b768, label %dec_label_pc_b864

dec_label_pc_b864:                                ; preds = %dec_label_pc_b858
  %v1_b864 = add i32 %v7_b840, 40
  store i32 %v1_b864, i32* @r4, align 4
  store i32 %v1_b864, i32* %r0.global-to-local, align 4
  store i32 %v6_b504, i32* %r1.global-to-local, align 4
  %v2_b870 = call i32 @function_f250(i32 %v1_b864, i32 %v6_b504)
  store i32 %v2_b870, i32* %r0.global-to-local, align 4
  store i32 %v6_b504, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b87c = load i32, i32* @r4, align 4
  %v4_b87c = add i32 %v2_b87c, %v6_b504
  %v5_b87c = inttoptr i32 %v4_b87c to i8*
  store i8 0, i8* %v5_b87c, align 1
  %v2_b76c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_b768

dec_label_pc_b884:                                ; preds = %dec_label_pc_b558
  %v0_b884 = load i32, i32* @sl, align 4
  store i32 %v0_b884, i32* %r0.global-to-local, align 4
  %v1_b888 = call i32 @function_124d0(i32 %v0_b884)
  store i32 %v1_b888, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b88c

dec_label_pc_b88c:                                ; preds = %dec_label_pc_b664, %dec_label_pc_b90c, %dec_label_pc_b354, %dec_label_pc_b884
  %v1_b894 = phi i32 [ %v3_b548, %dec_label_pc_b354 ], [ %v1_b888, %dec_label_pc_b884 ], [ %v2_b910, %dec_label_pc_b90c ], [ 0, %dec_label_pc_b664 ]
  store i32 %v3_b354, i32* %r4.global-to-local, align 4
  store i32 %v27_b354, i32* %lr.global-to-local, align 4
  ret i32 %v1_b894

dec_label_pc_b898:                                ; preds = %bb72
  %v1_b898 = add i32 %v4_b5fc, 16
  %v2_b898 = inttoptr i32 %v1_b898 to i32*
  %v3_b898 = load i32, i32* %v2_b898, align 4
  store i32 %v3_b898, i32* @r4, align 4
  %v0_b89c = call i32 @function_f18c()
  store i32 %v0_b89c, i32* %r0.global-to-local, align 4
  %v3_b8a0 = load i32, i32* %stack_var_-44, align 4
  %v5_b8a8 = mul i32 %v3_b8a0, 24
  %v0_b8ac = load i32, i32* @r4, align 4
  %v1_b8ac = and i32 %v0_b8ac, 16711680
  store i32 %v1_b8ac, i32* %ip.global-to-local, align 4
  %v3_b8b0 = udiv i32 %v0_b8ac, 16777216
  %v4_b8b4 = udiv i32 %v1_b8ac, 256
  %v5_b8b4 = or i32 %v4_b8b4, %v3_b8b0
  store i32 %v5_b8b4, i32* %r2.global-to-local, align 4
  %v1_b8b8 = load i32, i32* @fp, align 4
  %v2_b8b8 = add i32 %v1_b8b8, %v5_b8a8
  store i32 %v2_b8b8, i32* %r1.global-to-local, align 4
  %v1_b8bc = and i32 %v0_b8ac, 65280
  store i32 %v1_b8bc, i32* %r3.global-to-local, align 4
  %v1_b8c0 = add i32 %v2_b8b8, 20
  %v2_b8c0 = inttoptr i32 %v1_b8c0 to i8*
  %v3_b8c0 = load i8, i8* %v2_b8c0, align 1
  %v4_b8c0 = zext i8 %v3_b8c0 to i32
  store i32 %v4_b8c0, i32* %ip.global-to-local, align 4
  %v5_b8c8 = call i32 @llvm.bswap.i32(i32 %v0_b8ac)
  %v7_b8cc = lshr i32 %v0_b89c, %v4_b8c0
  %v8_b8cc = add i32 %v7_b8cc, %v5_b8c8
  store i32 %v8_b8cc, i32* %r2.global-to-local, align 4
  %v1_b8d0 = and i32 %v8_b8cc, 16711680
  store i32 %v1_b8d0, i32* %r0.global-to-local, align 4
  %v1_b8dc = and i32 %v8_b8cc, 65280
  store i32 %v1_b8dc, i32* %r1.global-to-local, align 4
  %v5_b8e4 = call i32 @llvm.bswap.i32(i32 %v8_b8cc)
  store i32 %v5_b8e4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b604

dec_label_pc_b8f0:                                ; preds = %dec_label_pc_b604
  %v0_b8f0 = call i32 @function_f18c()
  %v1_b8f0 = trunc i32 %v0_b8f0 to i16
  store i32 %v0_b8f0, i32* %r0.global-to-local, align 4
  store i32 %v2_b5e0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b628

dec_label_pc_b90c:                                ; preds = %dec_label_pc_b768, %dec_label_pc_b728
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b910 = call i32 @function_12150(i32* null)
  store i32 %v2_b910, i32* %r0.global-to-local, align 4
  store i32 %v2_b534, i32* %r2.global-to-local, align 4
  %v6_b91c = icmp slt i32 %v2_b534, %v2_b910
  br i1 %v6_b91c, label %dec_label_pc_b88c, label %dec_label_pc_b728

dec_label_pc_b924:                                ; preds = %dec_label_pc_b6d4
  %v3_b924 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b924, i32* @r5, align 4
  store i32 %v2_b380, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-340.0.ph, i32* %r0.global-to-local, align 4
  %v5_b930 = mul i32 %v3_b924, 16
  %v6_b930 = add i32 %v5_b930, %v2_b380
  %v7_b930 = inttoptr i32 %v6_b930 to i32*
  store i32 %v0_b930, i32* %v7_b930, align 4
  %v0_b934 = load i32, i32* %r0.global-to-local, align 4
  %v1_b934 = add i32 %v0_b934, 4
  %v2_b934 = inttoptr i32 %v1_b934 to i32*
  %v3_b934 = load i32, i32* %v2_b934, align 4
  %v1_b938 = and i32 %v3_b934, 16711680
  store i32 %v1_b938, i32* %r0.global-to-local, align 4
  %v5_b94c = call i32 @llvm.bswap.i32(i32 %v3_b934)
  store i32 %v5_b94c, i32* %r3.global-to-local, align 4
  store i32 %v2_b380, i32* %r1.global-to-local, align 4
  %v0_b954 = load i32, i32* @r5, align 4
  %v3_b954 = mul i32 %v0_b954, 16
  %v2_b958 = add i32 %v3_b954, %v2_b380
  store i32 %v2_b958, i32* %ip.global-to-local, align 4
  %v2_b95c = add i32 %v2_b958, 4
  %v3_b95c = inttoptr i32 %v2_b95c to i32*
  store i32 %v5_b94c, i32* %v3_b95c, align 4
  store i32 %stack_var_-340.0.ph, i32* %r2.global-to-local, align 4
  %v1_b964 = add i32 %stack_var_-340.0.ph, 8
  %v2_b964 = inttoptr i32 %v1_b964 to i32*
  %v3_b964 = load i32, i32* %v2_b964, align 4
  %v1_b970 = and i32 %v3_b964, 65280
  store i32 %v1_b970, i32* %r2.global-to-local, align 4
  %v5_b97c = call i32 @llvm.bswap.i32(i32 %v3_b964)
  store i32 %v5_b97c, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-340.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v6_b504, i32* %r0.global-to-local, align 4
  %v1_b988 = add i32 %stack_var_-340.0.ph, 2
  %v2_b988 = inttoptr i32 %v1_b988 to i16*
  %v3_b988 = load i16, i16* %v2_b988, align 2
  %v4_b988 = zext i16 %v3_b988 to i32
  store i32 %v4_b988, i32* %r1.global-to-local, align 4
  store i32 %v1_b98c, i32* @r4, align 4
  %v2_b990 = load i32, i32* %ip.global-to-local, align 4
  %v3_b990 = add i32 %v2_b990, 12
  %v4_b990 = inttoptr i32 %v3_b990 to i16*
  store i16 %v3_b988, i16* %v4_b990, align 2
  %v0_b994 = load i32, i32* @lr, align 4
  %v1_b994 = trunc i32 %v0_b994 to i16
  %v2_b994 = load i32, i32* %ip.global-to-local, align 4
  %v3_b994 = add i32 %v2_b994, 14
  %v4_b994 = inttoptr i32 %v3_b994 to i16*
  store i16 %v1_b994, i16* %v4_b994, align 2
  %v0_b998 = load i32, i32* %r3.global-to-local, align 4
  %v1_b998 = load i32, i32* %ip.global-to-local, align 4
  %v2_b998 = add i32 %v1_b998, 8
  %v3_b998 = inttoptr i32 %v2_b998 to i32*
  store i32 %v0_b998, i32* %v3_b998, align 4
  %v0_b99c = load i32, i32* @r4, align 4
  store i32 %v0_b99c, i32* @r0, align 4
  %v0_b9a0 = call i32 @function_12f2c()
  store i32 %v0_b9a0, i32* %r0.global-to-local, align 4
  store i32 %v2_b390, i32* %r3.global-to-local, align 4
  %v2_b9ac = load i32, i32* @r5, align 4
  %v5_b9ac = mul i32 %v2_b9ac, 4
  %v6_b9ac = add i32 %v5_b9ac, %v2_b390
  %v7_b9ac = inttoptr i32 %v6_b9ac to i32*
  store i32 %v0_b9a0, i32* %v7_b9ac, align 4
  %v3_b9b0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b9b0, i32* %r2.global-to-local, align 4
  %v0_b9b4 = load i32, i32* %r3.global-to-local, align 4
  %v4_b9b4 = mul i32 %v3_b9b0, 4
  %v5_b9b4 = add i32 %v0_b9b4, %v4_b9b4
  %v6_b9b4 = inttoptr i32 %v5_b9b4 to i32*
  %v7_b9b4 = load i32, i32* %v6_b9b4, align 4
  store i32 %v7_b9b4, i32* %ip.global-to-local, align 4
  %v1_b9b8 = inttoptr i32 %v7_b9b4 to i8*
  %v2_b9b8 = load i8, i8* %v1_b9b8, align 1
  %tmp102 = urem i8 %v2_b9b8, 16
  %v1_b9bc = zext i8 %tmp102 to i32
  %v1_b9c0 = or i32 %v1_b9bc, 64
  store i32 %v1_b9c0, i32* %r3.global-to-local, align 4
  %v1_b9c4 = trunc i32 %v1_b9c0 to i8
  store i8 %v1_b9c4, i8* %v1_b9b8, align 1
  %v0_b9c8 = load i32, i32* %ip.global-to-local, align 4
  %v1_b9c8 = inttoptr i32 %v0_b9c8 to i8*
  %v2_b9c8 = load i8, i8* %v1_b9c8, align 1
  store i32 %v4_b9cc, i32* %lr.global-to-local, align 4
  %v1_b9d0 = and i8 %v2_b9c8, -16
  %v1_b9dc = or i8 %v1_b9d0, 5
  %v0_b9e0 = load i32, i32* @r4, align 4
  %v3_b9e0 = mul i32 %v0_b9e0, 65536
  store i32 %v3_b9e0, i32* %r4.global-to-local, align 4
  store i32 %v5_b9e4, i32* %r1.global-to-local, align 4
  store i32 %v1_b410, i32* %r0.global-to-local, align 4
  store i8 %v1_b9dc, i8* %v1_b9c8, align 1
  %v0_b9f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_b9f0 = trunc i32 %v0_b9f0 to i16
  %v2_b9f0 = load i32, i32* %ip.global-to-local, align 4
  %v3_b9f0 = add i32 %v2_b9f0, 4
  %v4_b9f0 = inttoptr i32 %v3_b9f0 to i16*
  store i16 %v1_b9f0, i16* %v4_b9f0, align 2
  %v0_b9f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b9f4 = udiv i32 %v0_b9f4, 256
  %v1_b9fc = and i32 %v3_b9f4, 65280
  store i32 %v1_b9fc, i32* %r2.global-to-local, align 4
  %v2_ba00 = load i32, i32* %ip.global-to-local, align 4
  %v3_ba00 = add i32 %v2_ba00, 1
  %v4_ba00 = inttoptr i32 %v3_ba00 to i8*
  store i8 %v5_b3c8, i8* %v4_ba00, align 1
  %v0_ba04 = load i32, i32* %r2.global-to-local, align 4
  %v1_ba04 = load i32, i32* %r4.global-to-local, align 4
  %v4_ba04 = udiv i32 %v1_ba04, 16777216
  %v5_ba04 = or i32 %v4_ba04, %v0_ba04
  %v1_ba08 = trunc i32 %v5_ba04 to i16
  %v2_ba08 = load i32, i32* %ip.global-to-local, align 4
  %v3_ba08 = add i32 %v2_ba08, 2
  %v4_ba08 = inttoptr i32 %v3_ba08 to i16*
  store i16 %v1_ba08, i16* %v4_ba08, align 2
  %v0_ba10 = load i32, i32* %ip.global-to-local, align 4
  %v1_ba10 = add i32 %v0_ba10, 20
  store i32 %v1_ba10, i32* %r3.global-to-local, align 4
  %v3_ba14 = add i32 %v0_ba10, 8
  %v4_ba14 = inttoptr i32 %v3_ba14 to i8*
  store i8 %v5_b400, i8* %v4_ba14, align 1
  %v0_ba18 = load i32, i32* %r3.global-to-local, align 4
  %v2_ba20 = load i32, i32* %ip.global-to-local, align 4
  %v3_ba20 = add i32 %v2_ba20, 9
  %v4_ba20 = inttoptr i32 %v3_ba20 to i8*
  store i8 6, i8* %v4_ba20, align 1
  store i32 ptrtoint (i32* @global_var_22418.77 to i32), i32* %r2.global-to-local, align 4
  %v2_ba28 = load i32, i32* @global_var_22418.77, align 4
  store i32 %v2_ba28, i32* %r1.global-to-local, align 4
  %v1_ba2c = load i32, i32* %ip.global-to-local, align 4
  %v2_ba2c = add i32 %v1_ba2c, 12
  %v3_ba2c = inttoptr i32 %v2_ba2c to i32*
  store i32 %v2_ba28, i32* %v3_ba2c, align 4
  %v0_ba30 = load i32, i32* %r0.global-to-local, align 4
  %v2_ba30 = icmp eq i32 %v0_ba30, 0
  %v3_ba34 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ba34, i32* %r3.global-to-local, align 4
  store i32 %v2_b380, i32* %r0.global-to-local, align 4
  br i1 %v2_ba30, label %.thread10, label %bb83

bb83:                                             ; preds = %dec_label_pc_b924
  store i32 64, i32* %lr.global-to-local, align 4
  %v3_ba40 = load i32, i32* %ip.global-to-local, align 4
  %v4_ba40 = add i32 %v3_ba40, 6
  %v5_ba40 = inttoptr i32 %v4_ba40 to i16*
  store i16 64, i16* %v5_ba40, align 2
  %v0_ba44.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_ba44.pre = load i32, i32* %r3.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_b924, %bb83
  %v0_ba48 = phi i32 [ %v3_ba34, %dec_label_pc_b924 ], [ %v1_ba44.pre, %bb83 ]
  %v1_ba4c = phi i32 [ %v2_b380, %dec_label_pc_b924 ], [ %v0_ba44.pre, %bb83 ]
  %v4_ba44 = mul i32 %v0_ba48, 16
  %v5_ba44 = add i32 %v4_ba44, %v1_ba4c
  %v6_ba44 = inttoptr i32 %v5_ba44 to i32*
  %v7_ba44 = load i32, i32* %v6_ba44, align 4
  store i32 %v7_ba44, i32* %r2.global-to-local, align 4
  store i32 %v5_ba44, i32* %r3.global-to-local, align 4
  %v1_ba50 = load i32, i32* %ip.global-to-local, align 4
  %v2_ba50 = add i32 %v1_ba50, 16
  %v3_ba50 = inttoptr i32 %v2_ba50 to i32*
  store i32 %v7_ba44, i32* %v3_ba50, align 4
  %v0_ba54 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba54 = add i32 %v0_ba54, 12
  %v2_ba54 = inttoptr i32 %v1_ba54 to i16*
  %v3_ba54 = load i16, i16* %v2_ba54, align 2
  %v4_ba54 = zext i16 %v3_ba54 to i32
  store i32 %v4_ba54, i32* %r1.global-to-local, align 4
  %v0_ba58 = load i32, i32* %ip.global-to-local, align 4
  %v1_ba58 = add i32 %v0_ba58, 40
  store i32 %v1_ba58, i32* @r4, align 4
  %v3_ba5c = add i32 %v0_ba58, 20
  %v4_ba5c = inttoptr i32 %v3_ba5c to i16*
  store i16 %v3_ba54, i16* %v4_ba5c, align 2
  store i32 %v0_ba18, i32* %ip.global-to-local, align 4
  %v0_ba64 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba64 = add i32 %v0_ba64, 8
  %v2_ba64 = inttoptr i32 %v1_ba64 to i32*
  %v3_ba64 = load i32, i32* %v2_ba64, align 4
  store i32 %v3_ba64, i32* %r1.global-to-local, align 4
  %v2_ba68 = add i32 %v0_ba18, 4
  %v3_ba68 = inttoptr i32 %v2_ba68 to i32*
  store i32 %v3_ba64, i32* %v3_ba68, align 4
  %v0_ba6c = load i32, i32* %ip.global-to-local, align 4
  %v1_ba6c = add i32 %v0_ba6c, 13
  %v2_ba6c = inttoptr i32 %v1_ba6c to i8*
  %v3_ba6c = load i8, i8* %v2_ba6c, align 1
  %v4_ba6c = zext i8 %v3_ba6c to i32
  store i32 %v4_ba6c, i32* %r2.global-to-local, align 4
  %v0_ba70 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba70 = add i32 %v0_ba70, 4
  %v2_ba70 = inttoptr i32 %v1_ba70 to i32*
  %v3_ba70 = load i32, i32* %v2_ba70, align 4
  store i32 %v3_ba70, i32* %r1.global-to-local, align 4
  %v1_ba74 = add i32 %v0_ba70, 14
  %v2_ba74 = inttoptr i32 %v1_ba74 to i16*
  %v3_ba74 = load i16, i16* %v2_ba74, align 2
  %v4_ba74 = zext i16 %v3_ba74 to i32
  store i32 %v4_ba74, i32* %r3.global-to-local, align 4
  %v1_ba78 = or i32 %v4_ba6c, 1
  store i32 %v1_ba78, i32* %r2.global-to-local, align 4
  %v3_ba7c = add i32 %v0_ba6c, 2
  %v4_ba7c = inttoptr i32 %v3_ba7c to i16*
  store i16 %v3_ba74, i16* %v4_ba7c, align 2
  %v0_ba80 = load i32, i32* %r2.global-to-local, align 4
  %v1_ba80 = trunc i32 %v0_ba80 to i8
  %v2_ba80 = load i32, i32* %ip.global-to-local, align 4
  %v3_ba80 = add i32 %v2_ba80, 13
  %v4_ba80 = inttoptr i32 %v3_ba80 to i8*
  store i8 %v1_ba80, i8* %v4_ba80, align 1
  %v0_ba84 = load i32, i32* %ip.global-to-local, align 4
  %v1_ba84 = add i32 %v0_ba84, 12
  %v2_ba84 = inttoptr i32 %v1_ba84 to i8*
  %v3_ba84 = load i8, i8* %v2_ba84, align 1
  %v4_ba84 = zext i8 %v3_ba84 to i32
  store i32 %v4_ba84, i32* %r3.global-to-local, align 4
  %v1_ba88 = add i32 %v0_ba84, 13
  %v2_ba88 = inttoptr i32 %v1_ba88 to i8*
  %v3_ba88 = load i8, i8* %v2_ba88, align 1
  %v4_ba88 = zext i8 %v3_ba88 to i32
  %tmp103 = urem i8 %v3_ba84, 16
  %v1_ba8c = zext i8 %tmp103 to i32
  %v1_ba90 = or i32 %v1_ba8c, 128
  store i32 %v1_ba90, i32* %r3.global-to-local, align 4
  %v1_ba94 = or i32 %v4_ba88, 16
  store i32 %v1_ba94, i32* %r2.global-to-local, align 4
  %v0_ba98 = load i32, i32* %r1.global-to-local, align 4
  %v2_ba98 = add i32 %v0_ba84, 8
  %v3_ba98 = inttoptr i32 %v2_ba98 to i32*
  store i32 %v0_ba98, i32* %v3_ba98, align 4
  %v0_ba9c = load i32, i32* %r3.global-to-local, align 4
  %v1_ba9c = trunc i32 %v0_ba9c to i8
  %v2_ba9c = load i32, i32* %ip.global-to-local, align 4
  %v3_ba9c = add i32 %v2_ba9c, 12
  %v4_ba9c = inttoptr i32 %v3_ba9c to i8*
  store i8 %v1_ba9c, i8* %v4_ba9c, align 1
  %v0_baa0 = load i32, i32* %r2.global-to-local, align 4
  %v1_baa0 = trunc i32 %v0_baa0 to i8
  %v2_baa0 = load i32, i32* %ip.global-to-local, align 4
  %v3_baa0 = add i32 %v2_baa0, 13
  %v4_baa0 = inttoptr i32 %v3_baa0 to i8*
  store i8 %v1_baa0, i8* %v4_baa0, align 1
  %v0_baa4 = call i32 @function_f18c()
  %v1_baa4 = trunc i32 %v0_baa4 to i16
  store i32 %v0_baa4, i32* %r0.global-to-local, align 4
  store i32 %v0_ba18, i32* %lr.global-to-local, align 4
  store i32 %v1_b44c, i32* %r1.global-to-local, align 4
  %v1_bab0 = add i32 %v0_ba18, 13
  %v2_bab0 = inttoptr i32 %v1_bab0 to i8*
  %v3_bab0 = load i8, i8* %v2_bab0, align 1
  %v4_bab0 = zext i8 %v3_bab0 to i32
  store i32 %v1_bab4, i32* %r2.global-to-local, align 4
  %v1_bab8 = and i32 %v4_bab0, 223
  %v5_babc = or i32 %v1_bab8, %v4_babc
  store i32 %v5_babc, i32* %r3.global-to-local, align 4
  %v1_bac0 = trunc i32 %v5_babc to i8
  store i8 %v1_bac0, i8* %v2_bab0, align 1
  store i32 %v1_b46c, i32* %ip.global-to-local, align 4
  %v0_bac8 = load i32, i32* %lr.global-to-local, align 4
  %v1_bac8 = add i32 %v0_bac8, 13
  %v2_bac8 = inttoptr i32 %v1_bac8 to i8*
  %v3_bac8 = load i8, i8* %v2_bac8, align 1
  %v4_bac8 = zext i8 %v3_bac8 to i32
  store i32 %v1_bacc, i32* %r3.global-to-local, align 4
  %v1_bad0 = and i32 %v4_bac8, 239
  %v5_bad4 = or i32 %v1_bad0, %v4_bad4
  store i32 %v5_bad4, i32* %r2.global-to-local, align 4
  %v1_bad8 = trunc i32 %v5_bad4 to i8
  store i8 %v1_bad8, i8* %v2_bac8, align 1
  %v0_badc = load i32, i32* %lr.global-to-local, align 4
  %v1_badc = add i32 %v0_badc, 13
  %v2_badc = inttoptr i32 %v1_badc to i8*
  %v3_badc = load i8, i8* %v2_badc, align 1
  %v4_badc = zext i8 %v3_badc to i32
  store i32 %v1_b48c, i32* %lr.global-to-local, align 4
  store i32 %v0_ba18, i32* %r1.global-to-local, align 4
  store i32 %v1_bae8, i32* %r2.global-to-local, align 4
  %v1_baec = and i32 %v4_badc, 247
  %v5_baf0 = or i32 %v1_baec, %v4_baf0
  store i32 %v5_baf0, i32* %r3.global-to-local, align 4
  %v1_baf4 = trunc i32 %v5_baf0 to i8
  store i8 %v1_baf4, i8* %v2_bab0, align 1
  store i32 %v1_b4ac, i32* %ip.global-to-local, align 4
  %v0_bafc = load i32, i32* %r1.global-to-local, align 4
  %v1_bafc = add i32 %v0_bafc, 13
  %v2_bafc = inttoptr i32 %v1_bafc to i8*
  %v3_bafc = load i8, i8* %v2_bafc, align 1
  %v4_bafc = zext i8 %v3_bafc to i32
  store i32 %v1_bb00, i32* %r3.global-to-local, align 4
  %v1_bb04 = and i32 %v4_bafc, 251
  %v5_bb08 = or i32 %v1_bb04, %v4_bb08
  store i32 %v5_bb08, i32* %r2.global-to-local, align 4
  %v1_bb0c = trunc i32 %v5_bb08 to i8
  store i8 %v1_bb0c, i8* %v2_bafc, align 1
  store i32 %v1_b4cc, i32* @lr, align 4
  %v0_bb14 = load i32, i32* %r1.global-to-local, align 4
  %v1_bb14 = add i32 %v0_bb14, 13
  %v2_bb14 = inttoptr i32 %v1_bb14 to i8*
  %v3_bb14 = load i8, i8* %v2_bb14, align 1
  %v4_bb14 = zext i8 %v3_bb14 to i32
  store i32 %v1_bb18, i32* %r2.global-to-local, align 4
  %v1_bb1c = and i32 %v4_bb14, 253
  %v4_bb20 = or i32 %v1_bb1c, %v3_bb20
  store i32 %v4_bb20, i32* %r3.global-to-local, align 4
  %v1_bb24 = trunc i32 %v4_bb20 to i8
  store i8 %v1_bb24, i8* %v2_bb14, align 1
  %v0_bb28 = load i32, i32* %r1.global-to-local, align 4
  %v1_bb28 = add i32 %v0_bb28, 13
  %v2_bb28 = inttoptr i32 %v1_bb28 to i8*
  %v3_bb28 = load i8, i8* %v2_bb28, align 1
  %v4_bb28 = zext i8 %v3_bb28 to i32
  %v1_bb30 = and i32 %v4_bb28, 254
  %v2_bb38 = or i32 %v1_bb30, %v1_bb34
  store i32 %v2_bb38, i32* %r3.global-to-local, align 4
  store i32 %v0_ba18, i32* %r2.global-to-local, align 4
  %v1_bb40 = trunc i32 %v2_bb38 to i8
  store i8 %v1_bb40, i8* %v2_bab0, align 1
  %v3_bb44 = load i32, i32* %r2.global-to-local, align 4
  %v4_bb44 = add i32 %v3_bb44, 14
  %v5_bb44 = inttoptr i32 %v4_bb44 to i16*
  store i16 %v1_baa4, i16* %v5_bb44, align 2
  store i32 %v6_b504, i32* %r1.global-to-local, align 4
  %v0_bb4c = load i32, i32* @r4, align 4
  store i32 %v0_bb4c, i32* %r0.global-to-local, align 4
  %v2_bb50 = call i32 @function_f250(i32 %v0_bb4c, i32 %v6_b504)
  store i32 %v2_bb50, i32* %r0.global-to-local, align 4
  store i32 %v6_b504, i32* %ip.global-to-local, align 4
  %v2_bb5c = load i32, i32* @r4, align 4
  %v4_bb5c = add i32 %v2_bb5c, %v6_b504
  %v5_bb5c = inttoptr i32 %v4_bb5c to i8*
  store i8 0, i8* %v5_bb5c, align 1
  %v3_bb60 = load i32, i32* %stack_var_-44, align 4
  %v1_bb68 = add i32 %v3_bb60, 1
  store i32 %v1_bb68, i32* @r3, align 4
  store i32 %v1_bb68, i32* %stack_var_-44, align 4
  %v5_bb74 = icmp slt i32 %v1_bb68, %arg2
  br i1 %v5_bb74, label %dec_label_pc_b59c.outer, label %dec_label_pc_b728.preheader

; uselistorder directives
  uselistorder i32 %v1_bb68, { 1, 0, 2 }
  uselistorder i8* %v2_bab0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_baa4, { 1, 0 }
  uselistorder i32 %v0_ba18, { 1, 2, 4, 3, 6, 5, 0 }
  uselistorder i32 %v5_b94c, { 1, 0 }
  uselistorder i32 %v2_b910, { 1, 2, 0 }
  uselistorder i32 %v0_b8f0, { 1, 0 }
  uselistorder i32 %v0_b8ac, { 1, 2, 0, 3 }
  uselistorder i32 %v7_b840, { 0, 2, 3, 1 }
  uselistorder i32 %v1_b828, { 1, 2, 0, 3 }
  uselistorder i32 %v5_b7f0, { 1, 0 }
  uselistorder i32 %v4_b7e0, { 1, 0 }
  uselistorder i32 %v3_b7ac, { 1, 0 }
  uselistorder i32 %v3_b78c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b778, { 1, 0 }
  uselistorder i32 %v3_b750, { 1, 0 }
  uselistorder i32 %v1_b744, { 2, 0, 1 }
  uselistorder i32 %v1_b718, { 1, 0, 2 }
  uselistorder i32 %v3_b700, { 0, 2, 3, 1 }
  uselistorder i32 %v4_b6c8, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 3, 1, 2 }
  uselistorder i32 %v0_b60c, { 1, 0, 2 }
  uselistorder i32 %v0_b930, { 1, 0, 4, 5, 2, 3 }
  uselistorder i32 %v4_b5fc, { 1, 0 }
  uselistorder i1 %v7_b5f4, { 1, 0 }
  uselistorder i32 %v3_b5a8, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %stack_var_-340.0.ph, { 3, 4, 1, 2, 0 }
  uselistorder i32 %v1_bb18, { 1, 0 }
  uselistorder i32 %v1_bb00, { 1, 0 }
  uselistorder i32 %v1_bacc, { 1, 0 }
  uselistorder i32 %v3_b6c0, { 1, 0 }
  uselistorder i32 %v1_bae8, { 1, 0 }
  uselistorder i32 %v1_bab4, { 1, 0 }
  uselistorder i32 %v4_b9cc, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v1_b98c, { 2, 0, 1 }
  uselistorder i32 %v1_b6d8, { 1, 0 }
  uselistorder i32 %v4_b6d4, { 2, 0, 1 }
  uselistorder i32 %v2_b5e0, { 3, 2, 1, 4, 0 }
  uselistorder i16 %v5_b594, { 1, 0 }
  uselistorder i32 %v0_b584, { 1, 0 }
  uselistorder i32 %v3_b548, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_b534, { 1, 0 }
  uselistorder i32 %v1_b524, { 2, 1, 0 }
  uselistorder i32 %v6_b504, { 2, 7, 6, 5, 8, 3, 12, 11, 10, 13, 4, 0, 9, 1 }
  uselistorder i32 %v1_b4cc, { 1, 0 }
  uselistorder i32 %v1_b4ac, { 1, 0 }
  uselistorder i32 %v1_b48c, { 1, 0 }
  uselistorder i32 %v1_b46c, { 1, 0 }
  uselistorder i32 %v1_b44c, { 1, 0 }
  uselistorder i32 %v6_b428, { 1, 0 }
  uselistorder i32 %v1_b410, { 1, 0 }
  uselistorder i32 %v5_b3e4, { 1, 0 }
  uselistorder i32 %v6_b3a8, { 1, 0 }
  uselistorder i32 %v2_b390, { 0, 2, 1, 3 }
  uselistorder i32 %v2_b380, { 3, 4, 0, 5, 1, 6, 2, 7 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 39, 40, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 48, 47, 49, 51, 50, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 7, 3, 4, 5, 6, 12, 8, 9, 10, 11, 14, 13, 16, 15, 17, 19, 18, 22, 20, 26, 21, 23, 25, 24, 29, 27, 28, 30, 31, 32, 34, 35, 33, 36, 38, 37, 40, 39, 43, 42, 41, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32 %arg2, { 2, 1, 4, 5, 3, 0, 6, 8, 7, 9, 10, 11 }
  uselistorder label %.thread10, { 1, 0 }
  uselistorder label %dec_label_pc_b88c, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_b858, { 1, 0 }
  uselistorder label %dec_label_pc_b768, { 1, 0 }
  uselistorder label %dec_label_pc_b728, { 1, 0 }
  uselistorder label %dec_label_pc_b654, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_b628, { 1, 0 }
  uselistorder label %dec_label_pc_b604, { 1, 0 }
  uselistorder label %bb72, { 1, 0 }
  uselistorder label %dec_label_pc_b5b8, { 1, 0 }
  uselistorder label %dec_label_pc_b59c, { 1, 0 }
  uselistorder label %dec_label_pc_b59c.outer, { 1, 0 }
}

define i32 @function_bb80(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_bb80:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_bb80 = load i32, i32* @sb, align 4
  %v24_bb80 = load i32, i32* @fp, align 4
  %v27_bb80 = load i32, i32* @lr, align 4
  store i32 0, i32* @sl, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_bbac = call i32 @function_1384c(i32 %arg2, i32 4)
  %v0_bbb0 = load i32, i32* @r4, align 4
  store i32 %v0_bbb0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_bbbc = load i32, i32* @sl, align 4
  store i32 %v0_bbbc, i32* %r3.global-to-local, align 4
  %v0_bbc0 = load i32, i32* @r5, align 4
  store i32 %v0_bbc0, i32* %r0.global-to-local, align 4
  %v5_bbc4 = inttoptr i32 %v0_bbb0 to i32*
  %v6_bbc4 = call i32 @function_8258(i32 %v0_bbc0, i32* %v5_bbc4, i32 2, i32 %v0_bbbc)
  %v1_bbd0 = urem i32 %v6_bbc4, 256
  store i32 %v1_bbd0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bbdc = load i32, i32* @r4, align 4
  store i32 %v0_bbdc, i32* %r1.global-to-local, align 4
  %v0_bbe0 = load i32, i32* @r5, align 4
  store i32 %v0_bbe0, i32* %r0.global-to-local, align 4
  %v5_bbe4 = trunc i32 %v6_bbc4 to i8
  %v6_bbe8 = inttoptr i32 %v0_bbdc to i32*
  %v7_bbe8 = call i32 @function_8258(i32 %v0_bbe0, i32* %v6_bbe8, i32 3, i32 65535)
  %v0_bbec = load i32, i32* @r4, align 4
  store i32 %v0_bbec, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_bbfc = load i32, i32* @r5, align 4
  store i32 %v0_bbfc, i32* %r0.global-to-local, align 4
  %v5_bc00 = inttoptr i32 %v0_bbec to i32*
  %v6_bc00 = call i32 @function_8258(i32 %v0_bbfc, i32* %v5_bc00, i32 4, i32 64)
  %v1_bc08 = urem i32 %v6_bc00, 256
  store i32 %v1_bc08, i32* %ip.global-to-local, align 4
  %v0_bc0c = load i32, i32* @r4, align 4
  store i32 %v0_bc0c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_bc14 = load i32, i32* @sl, align 4
  store i32 %v0_bc14, i32* %r3.global-to-local, align 4
  %v0_bc18 = load i32, i32* @r5, align 4
  store i32 %v0_bc18, i32* %r0.global-to-local, align 4
  %v6_bc20 = inttoptr i32 %v0_bc0c to i32*
  %v7_bc20 = call i32 @function_8258(i32 %v0_bc18, i32* %v6_bc20, i32 5, i32 %v0_bc14)
  %v1_bc2c = urem i32 %v7_bc20, 256
  store i32 %v1_bc2c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bc38 = load i32, i32* @r4, align 4
  store i32 %v0_bc38, i32* %r1.global-to-local, align 4
  %v0_bc3c = load i32, i32* @r5, align 4
  store i32 %v0_bc3c, i32* %r0.global-to-local, align 4
  %v5_bc44 = inttoptr i32 %v0_bc38 to i32*
  %v6_bc44 = call i32 @function_8258(i32 %v0_bc3c, i32* %v5_bc44, i32 6, i32 65535)
  %v0_bc4c = load i32, i32* @r4, align 4
  store i32 %v0_bc4c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_bc44, i32* %fp.global-to-local, align 4
  %v0_bc5c = load i32, i32* @r5, align 4
  store i32 %v0_bc5c, i32* %r0.global-to-local, align 4
  %v4_bc60 = inttoptr i32 %v0_bc4c to i32*
  %v5_bc60 = call i32 @function_8258(i32 %v0_bc5c, i32* %v4_bc60, i32 7, i32 65535)
  %v0_bc68 = load i32, i32* @r4, align 4
  store i32 %v0_bc68, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 %v5_bc60, i32* %sb.global-to-local, align 4
  %v0_bc78 = load i32, i32* @r5, align 4
  store i32 %v0_bc78, i32* %r0.global-to-local, align 4
  %v4_bc7c = inttoptr i32 %v0_bc68 to i32*
  %v5_bc7c = call i32 @function_8258(i32 %v0_bc78, i32* %v4_bc7c, i32 16, i32 65535)
  %v0_bc88 = load i32, i32* @r4, align 4
  store i32 %v0_bc88, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_bc94 = load i32, i32* @r5, align 4
  store i32 %v0_bc94, i32* %r0.global-to-local, align 4
  %v5_bc98 = inttoptr i32 %v0_bc88 to i32*
  %v6_bc98 = call i32 @function_8258(i32 %v0_bc94, i32* %v5_bc98, i32 17, i32 65535)
  %v0_bc9c = load i32, i32* @r4, align 4
  store i32 %v0_bc9c, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_bca8 = load i32, i32* @sl, align 4
  store i32 %v0_bca8, i32* %r3.global-to-local, align 4
  %v0_bcac = load i32, i32* @r5, align 4
  store i32 %v0_bcac, i32* %r0.global-to-local, align 4
  %v5_bcb0 = inttoptr i32 %v0_bc9c to i32*
  %v6_bcb0 = call i32 @function_8258(i32 %v0_bcac, i32* %v5_bcb0, i32 10, i32 %v0_bca8)
  %v0_bcb4 = load i32, i32* @r4, align 4
  store i32 %v0_bcb4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bcc4 = load i32, i32* @r5, align 4
  store i32 %v0_bcc4, i32* %r0.global-to-local, align 4
  %v5_bcc8 = inttoptr i32 %v0_bcb4 to i32*
  %v6_bcc8 = call i32 @function_8258(i32 %v0_bcc4, i32* %v5_bcc8, i32 11, i32 1)
  %v0_bccc = load i32, i32* @r4, align 4
  store i32 %v0_bccc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_bcd8 = load i32, i32* @sl, align 4
  store i32 %v0_bcd8, i32* %r3.global-to-local, align 4
  %v0_bcdc = load i32, i32* @r5, align 4
  store i32 %v0_bcdc, i32* %r0.global-to-local, align 4
  %v5_bce0 = inttoptr i32 %v0_bccc to i32*
  %v6_bce0 = call i32 @function_8258(i32 %v0_bcdc, i32* %v5_bce0, i32 12, i32 %v0_bcd8)
  %v0_bce4 = load i32, i32* @r4, align 4
  store i32 %v0_bce4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_bcf0 = load i32, i32* @sl, align 4
  store i32 %v0_bcf0, i32* %r3.global-to-local, align 4
  %v0_bcf4 = load i32, i32* @r5, align 4
  store i32 %v0_bcf4, i32* %r0.global-to-local, align 4
  %v5_bcf8 = inttoptr i32 %v0_bce4 to i32*
  %v6_bcf8 = call i32 @function_8258(i32 %v0_bcf4, i32* %v5_bcf8, i32 13, i32 %v0_bcf0)
  %v0_bcfc = load i32, i32* @r4, align 4
  store i32 %v0_bcfc, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_bd08 = load i32, i32* @sl, align 4
  store i32 %v0_bd08, i32* %r3.global-to-local, align 4
  %v0_bd0c = load i32, i32* @r5, align 4
  store i32 %v0_bd0c, i32* %r0.global-to-local, align 4
  %v5_bd10 = inttoptr i32 %v0_bcfc to i32*
  %v6_bd10 = call i32 @function_8258(i32 %v0_bd0c, i32* %v5_bd10, i32 14, i32 %v0_bd08)
  %v0_bd14 = load i32, i32* @r4, align 4
  store i32 %v0_bd14, i32* %r1.global-to-local, align 4
  %v0_bd1c = load i32, i32* @sl, align 4
  store i32 %v0_bd1c, i32* %r3.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_bd24 = load i32, i32* @r5, align 4
  store i32 %v0_bd24, i32* %r0.global-to-local, align 4
  %v5_bd28 = inttoptr i32 %v0_bd14 to i32*
  %v6_bd28 = call i32 @function_8258(i32 %v0_bd24, i32* %v5_bd28, i32 15, i32 %v0_bd1c)
  %v0_bd2c = load i32, i32* @r4, align 4
  store i32 %v0_bd2c, i32* %r1.global-to-local, align 4
  %v0_bd34 = load i32, i32* @sl, align 4
  store i32 %v0_bd34, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_bd3c = load i32, i32* @r5, align 4
  store i32 %v0_bd3c, i32* %r0.global-to-local, align 4
  %v5_bd40 = inttoptr i32 %v0_bd2c to i32*
  %v6_bd40 = call i32 @function_8258(i32 %v0_bd3c, i32* %v5_bd40, i32 %v0_bd34, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bd4c = load i32, i32* @r4, align 4
  store i32 %v0_bd4c, i32* %r1.global-to-local, align 4
  store i32 %v6_bd40, i32* @r8, align 4
  %v0_bd54 = load i32, i32* @r5, align 4
  store i32 %v0_bd54, i32* %r0.global-to-local, align 4
  %v4_bd58 = inttoptr i32 %v0_bd4c to i32*
  %v5_bd58 = call i32 @function_8258(i32 %v0_bd54, i32* %v4_bd58, i32 1, i32 1)
  %v2_bd64 = load i32, i32* @global_var_22418.77, align 4
  store i32 %v2_bd64, i32* %r3.global-to-local, align 4
  %v1_bd68 = urem i32 %v5_bd58, 256
  store i32 %v1_bd68, i32* %ip.global-to-local, align 4
  %v0_bd6c = load i32, i32* @r4, align 4
  store i32 %v0_bd6c, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_bd74 = load i32, i32* @r5, align 4
  store i32 %v0_bd74, i32* %r0.global-to-local, align 4
  %v5_bd7c = inttoptr i32 %v0_bd6c to i32*
  %v6_bd7c = call i32 @function_81ec(i32 %v0_bd74, i32* %v5_bd7c, i32 24, i32 %v2_bd64, i32 %v1_bd68)
  %v0_bd84 = load i32, i32* @sl, align 4
  store i32 %v0_bd84, i32* %r0.global-to-local, align 4
  %v1_bd88 = inttoptr i32 %v0_bd84 to i32*
  %v2_bd88 = call i32 @function_12150(i32* %v1_bd88)
  %v1_bd8c = load i32, i32* @r6, align 4
  %v2_bd8c = add i32 %v1_bd8c, %v2_bd88
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_bda0 = call i32 @function_12ce4(i32 2, i32 3, i32 6)
  store i32 %v3_bda0, i32* %r0.global-to-local, align 4
  %v7_bda4 = icmp eq i32 %v3_bda0, -1
  store i1 %v7_bda4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bda4, label %dec_label_pc_c288, label %dec_label_pc_bdb0

dec_label_pc_bdb0:                                ; preds = %dec_label_pc_bb80
  store i32 1, i32* %stack_var_-44, align 4
  %v6_bdb8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_bdb8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_bdc0 = load i32, i32* @sl, align 4
  store i32 %v0_bdc0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_bdcc = call i32 @function_12ca0(i32 %v3_bda0, i32 %v0_bdc0, i32 3, i32 %v6_bdb8, i32 4)
  store i32 %v5_bdcc, i32* %r0.global-to-local, align 4
  %v7_bdd0 = icmp eq i32 %v5_bdcc, -1
  store i1 %v7_bdd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bdd0, label %dec_label_pc_c294, label %dec_label_pc_bdd8

dec_label_pc_bdd8:                                ; preds = %dec_label_pc_bdb0
  store i32 %v7_bbe8, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_bde4 = load i32, i32* %fp.global-to-local, align 4
  %v0_bde8 = load i32, i32* %sb.global-to-local, align 4
  %v3_bde8 = mul i32 %v0_bde8, 65536
  store i32 %v3_bde8, i32* %sb.global-to-local, align 4
  %v3_bdec = urem i32 %v7_bbe8, 65536
  store i32 %v3_bdec, i32* %r2.global-to-local, align 4
  %v3_bdf0 = urem i32 %v0_bde4, 65536
  store i32 %v3_bdf0, i32* %r3.global-to-local, align 4
  %v3_bdf4 = urem i32 %v0_bde8, 65536
  store i32 %v3_bdf4, i32* %ip.global-to-local, align 4
  %v2_bdf8 = icmp eq i32 %arg2, 0
  store i1 %v2_bdf8, i1* %cpsr_z.global-to-local, align 1
  %v0_bdfc = load i32, i32* @sl, align 4
  store i32 %v0_bdfc, i32* %stack_var_-44, align 4
  br i1 %v2_bdf8, label %dec_label_pc_c038.preheader, label %dec_label_pc_be10

dec_label_pc_be10:                                ; preds = %dec_label_pc_bdd8
  %v0_be20 = load i32, i32* @r8, align 4
  %v3_be20 = mul i32 %v0_be20, 65536
  %v1_be28 = add i32 %v3_be20, 2621440
  %tmp59 = mul i32 %v0_bde4, 256
  %v3_be34 = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_bde8, 256
  %v3_be38 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_bde4, 256
  %v4_be40 = urem i32 %tmp61, 256
  %v5_be40 = or i32 %v4_be40, %v3_be34
  %tmp62 = udiv i32 %v1_be28, 256
  %v3_be44 = and i32 %tmp62, 65280
  %tmp63 = mul i32 %v7_bbe8, 256
  %v3_be48 = and i32 %tmp63, 65280
  %tmp64 = udiv i32 %v0_bde8, 256
  %v4_be4c = urem i32 %tmp64, 256
  %v5_be4c = or i32 %v4_be4c, %v3_be38
  store i32 %v5_be4c, i32* @fp, align 4
  %v4_be5c = udiv i32 %v1_be28, 16777216
  %v5_be5c = or i32 %v3_be44, %v4_be5c
  store i32 %v5_be5c, i32* @lr, align 4
  %tmp65 = udiv i32 %v7_bbe8, 256
  %v4_be60 = urem i32 %tmp65, 256
  %v5_be60 = or i32 %v4_be60, %v3_be48
  store i32 %v5_be60, i32* @r5, align 4
  %tmp66 = mul i32 %v5_bc7c, 256
  %v3_be6c = and i32 %tmp66, 65280
  %v1_be70 = urem i32 %v6_bcb0, 2
  %v1_be74 = urem i32 %v6_bcc8, 2
  %tmp67 = udiv i32 %v5_bc7c, 256
  %v4_be78 = urem i32 %tmp67, 256
  %v5_be78 = or i32 %v4_be78, %v3_be6c
  %v1_be84 = urem i32 %v6_bce0, 2
  store i32 %v1_be84, i32* %r2.global-to-local, align 4
  %v1_be88 = urem i32 %v6_bcf8, 2
  store i32 %v1_be88, i32* %r3.global-to-local, align 4
  store i32 %v6_bd10, i32* %ip.global-to-local, align 4
  store i32 %v6_bd28, i32* %r0.global-to-local, align 4
  store i32 %v6_bce0, i32* %r1.global-to-local, align 4
  %v1_beb0 = urem i32 %v6_bd10, 2
  store i32 %v1_beb0, i32* @sb, align 4
  store i32 %v0_bdfc, i32* @r4, align 4
  %v1_beb8 = urem i32 %v6_bce0, 256
  store i32 %v1_beb8, i32* @r6, align 4
  %v1_bebc = urem i32 %v6_bd28, 2
  store i32 %v1_bebc, i32* @sl, align 4
  %v4_bf14 = sext i8 %v5_bbe4 to i32
  %sext6 = mul nuw i32 %v5_be5c, 65536
  %v4_bf30 = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_be60, 65536
  %v4_bf38 = sdiv i32 %sext7, 65536
  %sext8 = mul nuw i32 %v5_be40, 65536
  %v4_bf54 = sdiv i32 %sext8, 65536
  %tmp = sub nsw i32 0, %v1_be74
  %v4_bfa4 = and i32 %tmp, 16
  %tmp70 = sub nsw i32 0, %v1_be84
  %v4_bfb8 = and i32 %tmp70, 8
  %tmp71 = sub nsw i32 0, %v1_be88
  %v4_bfcc = and i32 %tmp71, 4
  %v1_bf24 = trunc i32 %v6_bc00 to i8
  br label %dec_label_pc_bec0

dec_label_pc_bec0:                                ; preds = %.thread10, %dec_label_pc_be10
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_becc = call i32 @function_1384c(i32 1510, i32 1)
  %v2_bed4 = load i32, i32* @r4, align 4
  %v5_bed4 = mul i32 %v2_bed4, 4
  %v6_bed4 = add i32 %v5_bed4, %v2_bbac
  %v7_bed4 = inttoptr i32 %v6_bed4 to i32*
  store i32 %v2_becc, i32* %v7_bed4, align 4
  %v3_bed8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bed8, i32* %r2.global-to-local, align 4
  %v5_bee0 = mul i32 %v3_bed8, 24
  %v1_bee4 = load i32, i32* @r7, align 4
  %v2_bee4 = add i32 %v1_bee4, %v5_bee0
  store i32 %v2_bee4, i32* %r0.global-to-local, align 4
  store i32 %v2_bbac, i32* %r3.global-to-local, align 4
  %v4_beec = mul i32 %v3_bed8, 4
  %v5_beec = add i32 %v4_beec, %v2_bbac
  %v6_beec = inttoptr i32 %v5_beec to i32*
  %v7_beec = load i32, i32* %v6_beec, align 4
  store i32 %v7_beec, i32* %r1.global-to-local, align 4
  %v1_bef0 = inttoptr i32 %v7_beec to i8*
  %v2_bef0 = load i8, i8* %v1_bef0, align 1
  %tmp72 = urem i8 %v2_bef0, 16
  %v1_bef4 = zext i8 %tmp72 to i32
  %v1_bef8 = or i32 %v1_bef4, 64
  store i32 %v1_bef8, i32* %r3.global-to-local, align 4
  %v1_befc = trunc i32 %v1_bef8 to i8
  store i8 %v1_befc, i8* %v1_bef0, align 1
  %v0_bf00 = load i32, i32* %r1.global-to-local, align 4
  %v1_bf00 = inttoptr i32 %v0_bf00 to i8*
  %v2_bf00 = load i8, i8* %v1_bf00, align 1
  %v1_bf04 = and i8 %v2_bf00, -16
  %v1_bf08 = or i8 %v1_bf04, 5
  store i32 %v1_bc2c, i32* %ip.global-to-local, align 4
  store i8 %v1_bf08, i8* %v1_bf00, align 1
  store i32 %v4_bf14, i32* %r2.global-to-local, align 4
  %v2_bf18 = load i32, i32* %r1.global-to-local, align 4
  %v3_bf18 = add i32 %v2_bf18, 1
  %v4_bf18 = inttoptr i32 %v3_bf18 to i8*
  store i8 %v5_bbe4, i8* %v4_bf18, align 1
  store i32 %v1_bc08, i32* %r3.global-to-local, align 4
  %v0_bf20 = load i32, i32* %ip.global-to-local, align 4
  %v2_bf20 = icmp eq i32 %v0_bf20, 0
  store i1 %v2_bf20, i1* %cpsr_z.global-to-local, align 1
  %v2_bf24 = load i32, i32* %r1.global-to-local, align 4
  %v3_bf24 = add i32 %v2_bf24, 8
  %v4_bf24 = inttoptr i32 %v3_bf24 to i8*
  store i8 %v1_bf24, i8* %v4_bf24, align 1
  %v0_bf28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bf28, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_bec0
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bf2c = load i32, i32* %r1.global-to-local, align 4
  %v4_bf2c = add i32 %v3_bf2c, 6
  %v5_bf2c = inttoptr i32 %v4_bf2c to i16*
  store i16 64, i16* %v5_bf2c, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bec0, %bb
  store i32 %v4_bf30, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_bf38, i32* %r2.global-to-local, align 4
  %v2_bf3c = load i32, i32* %r1.global-to-local, align 4
  %v3_bf3c = add i32 %v2_bf3c, 9
  %v4_bf3c = inttoptr i32 %v3_bf3c to i8*
  store i8 6, i8* %v4_bf3c, align 1
  %v0_bf40 = load i32, i32* %ip.global-to-local, align 4
  %v1_bf40 = trunc i32 %v0_bf40 to i16
  %v2_bf40 = load i32, i32* %r1.global-to-local, align 4
  %v3_bf40 = add i32 %v2_bf40, 2
  %v4_bf40 = inttoptr i32 %v3_bf40 to i16*
  store i16 %v1_bf40, i16* %v4_bf40, align 2
  store i32 %v6_bd7c, i32* %ip.global-to-local, align 4
  %v1_bf48 = load i32, i32* %r1.global-to-local, align 4
  %v2_bf48 = add i32 %v1_bf48, 12
  %v3_bf48 = inttoptr i32 %v2_bf48 to i32*
  store i32 %v6_bd7c, i32* %v3_bf48, align 4
  %v0_bf4c = load i32, i32* %r2.global-to-local, align 4
  %v1_bf4c = trunc i32 %v0_bf4c to i16
  %v2_bf4c = load i32, i32* %r1.global-to-local, align 4
  %v3_bf4c = add i32 %v2_bf4c, 4
  %v4_bf4c = inttoptr i32 %v3_bf4c to i16*
  store i16 %v1_bf4c, i16* %v4_bf4c, align 2
  %v0_bf50 = load i32, i32* %r0.global-to-local, align 4
  %v1_bf50 = add i32 %v0_bf50, 16
  %v2_bf50 = inttoptr i32 %v1_bf50 to i32*
  %v3_bf50 = load i32, i32* %v2_bf50, align 4
  store i32 %v3_bf50, i32* %r2.global-to-local, align 4
  store i32 %v4_bf54, i32* %r0.global-to-local, align 4
  %v1_bf58 = load i32, i32* %r1.global-to-local, align 4
  %v2_bf58 = add i32 %v1_bf58, 16
  %v3_bf58 = inttoptr i32 %v2_bf58 to i32*
  store i32 %v3_bf50, i32* %v3_bf58, align 4
  %v0_bf5c = load i32, i32* %r0.global-to-local, align 4
  %v1_bf5c = trunc i32 %v0_bf5c to i16
  %v2_bf5c = load i32, i32* %r1.global-to-local, align 4
  %v3_bf5c = add i32 %v2_bf5c, 20
  %v4_bf5c = inttoptr i32 %v3_bf5c to i16*
  store i16 %v1_bf5c, i16* %v4_bf5c, align 2
  %v0_bf60 = load i32, i32* %r1.global-to-local, align 4
  %v1_bf60 = add i32 %v0_bf60, 20
  store i32 %v1_bf60, i32* @r4, align 4
  %v1_bf64 = add i32 %v0_bf60, 32
  %v2_bf64 = inttoptr i32 %v1_bf64 to i8*
  %v3_bf64 = load i8, i8* %v2_bf64, align 1
  %v4_bf64 = zext i8 %v3_bf64 to i32
  %v1_bf68 = and i32 %v4_bf64, 95
  store i32 %v1_bf68, i32* %r3.global-to-local, align 4
  %v1_bf6c = add i32 %v0_bf60, 33
  %v2_bf6c = inttoptr i32 %v1_bf6c to i8*
  %v3_bf6c = load i8, i8* %v2_bf6c, align 1
  %v4_bf6c = zext i8 %v3_bf6c to i32
  store i32 %v4_bf6c, i32* %r2.global-to-local, align 4
  %v1_bf70 = or i32 %v1_bf68, 80
  %v1_bf74 = add i32 %v0_bf60, 40
  store i32 %v1_bf74, i32* @r5, align 4
  store i32 %v1_be70, i32* %r1.global-to-local, align 4
  %v1_bf7c = trunc i32 %v1_bf70 to i8
  store i8 %v1_bf7c, i8* %v2_bf64, align 1
  store i32 %v5_be78, i32* %r3.global-to-local, align 4
  %v0_bf84 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf84 = and i32 %v0_bf84, -33
  %v1_bf88 = load i32, i32* %r1.global-to-local, align 4
  %v4_bf88 = mul i32 %v1_bf88, 32
  %v5_bf88 = or i32 %v4_bf88, %v1_bf84
  store i32 %v5_bf88, i32* %r2.global-to-local, align 4
  %v1_bf8c = load i32, i32* @r4, align 4
  %v2_bf8c = add i32 %v1_bf8c, 4
  %v3_bf8c = inttoptr i32 %v2_bf8c to i32*
  store i32 %v5_be78, i32* %v3_bf8c, align 4
  %v0_bf90 = load i32, i32* @fp, align 4
  %v1_bf90 = trunc i32 %v0_bf90 to i16
  %v2_bf90 = load i32, i32* @r4, align 4
  %v3_bf90 = add i32 %v2_bf90, 2
  %v4_bf90 = inttoptr i32 %v3_bf90 to i16*
  store i16 %v1_bf90, i16* %v4_bf90, align 2
  %v0_bf94 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf94 = trunc i32 %v0_bf94 to i8
  %v2_bf94 = load i32, i32* @r4, align 4
  %v3_bf94 = add i32 %v2_bf94, 13
  %v4_bf94 = inttoptr i32 %v3_bf94 to i8*
  store i8 %v1_bf94, i8* %v4_bf94, align 1
  %v0_bf98 = load i32, i32* @r4, align 4
  %v1_bf98 = add i32 %v0_bf98, 13
  %v2_bf98 = inttoptr i32 %v1_bf98 to i8*
  %v3_bf98 = load i8, i8* %v2_bf98, align 1
  %v4_bf98 = zext i8 %v3_bf98 to i32
  store i32 %v1_be74, i32* %ip.global-to-local, align 4
  %v1_bfa0 = and i32 %v4_bf98, 239
  %v5_bfa4 = or i32 %v1_bfa0, %v4_bfa4
  store i32 %v5_bfa4, i32* %r3.global-to-local, align 4
  %v1_bfa8 = trunc i32 %v5_bfa4 to i8
  store i8 %v1_bfa8, i8* %v2_bf98, align 1
  %v0_bfac = load i32, i32* @r4, align 4
  %v1_bfac = add i32 %v0_bfac, 13
  %v2_bfac = inttoptr i32 %v1_bfac to i8*
  %v3_bfac = load i8, i8* %v2_bfac, align 1
  %v4_bfac = zext i8 %v3_bfac to i32
  store i32 %v1_be84, i32* %r0.global-to-local, align 4
  %v1_bfb4 = and i32 %v4_bfac, 247
  %v5_bfb8 = or i32 %v1_bfb4, %v4_bfb8
  store i32 %v5_bfb8, i32* %r2.global-to-local, align 4
  %v1_bfbc = trunc i32 %v5_bfb8 to i8
  store i8 %v1_bfbc, i8* %v2_bfac, align 1
  %v0_bfc0 = load i32, i32* @r4, align 4
  %v1_bfc0 = add i32 %v0_bfc0, 13
  %v2_bfc0 = inttoptr i32 %v1_bfc0 to i8*
  %v3_bfc0 = load i8, i8* %v2_bfc0, align 1
  %v4_bfc0 = zext i8 %v3_bfc0 to i32
  store i32 %v1_be88, i32* %r1.global-to-local, align 4
  %v1_bfc8 = and i32 %v4_bfc0, 251
  %v5_bfcc = or i32 %v1_bfc8, %v4_bfcc
  store i32 %v5_bfcc, i32* %r3.global-to-local, align 4
  %v1_bfd0 = trunc i32 %v5_bfcc to i8
  store i8 %v1_bfd0, i8* %v2_bfc0, align 1
  %v0_bfd4 = load i32, i32* @r4, align 4
  %v1_bfd4 = add i32 %v0_bfd4, 13
  %v2_bfd4 = inttoptr i32 %v1_bfd4 to i8*
  %v3_bfd4 = load i8, i8* %v2_bfd4, align 1
  %v4_bfd4 = zext i8 %v3_bfd4 to i32
  %v1_bfd8 = and i32 %v4_bfd4, 253
  %v1_bfdc = load i32, i32* @sb, align 4
  %v3_bfdc = mul i32 %v1_bfdc, 2
  %v4_bfdc = or i32 %v3_bfdc, %v1_bfd8
  store i32 %v4_bfdc, i32* %r2.global-to-local, align 4
  %v1_bfe0 = trunc i32 %v4_bfdc to i8
  store i8 %v1_bfe0, i8* %v2_bfd4, align 1
  %v0_bfe4 = load i32, i32* @r4, align 4
  %v1_bfe4 = add i32 %v0_bfe4, 13
  %v2_bfe4 = inttoptr i32 %v1_bfe4 to i8*
  %v3_bfe4 = load i8, i8* %v2_bfe4, align 1
  %v4_bfe4 = zext i8 %v3_bfe4 to i32
  %v1_bfe8 = and i32 %v4_bfe4, 254
  %v0_bfec = load i32, i32* @sl, align 4
  %v2_bfec = or i32 %v1_bfe8, %v0_bfec
  store i32 %v2_bfec, i32* %r3.global-to-local, align 4
  %v1_bff0 = trunc i32 %v2_bfec to i8
  store i8 %v1_bff0, i8* %v2_bfe4, align 1
  %v0_bff4 = call i32 @function_f18c()
  %v1_bff4 = trunc i32 %v0_bff4 to i16
  store i32 %v0_bff4, i32* %r0.global-to-local, align 4
  %v0_bff8 = load i32, i32* @r6, align 4
  %v2_bff8 = icmp eq i32 %v0_bff8, 0
  store i1 %v2_bff8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bff8, label %.thread10, label %bb68

bb68:                                             ; preds = %.thread
  %v1_bffc = load i32, i32* @r4, align 4
  %v2_bffc = add i32 %v1_bffc, 13
  %v3_bffc = inttoptr i32 %v2_bffc to i8*
  %v4_bffc = load i8, i8* %v3_bffc, align 1
  %v5_bffc = zext i8 %v4_bffc to i32
  %v2_c000 = or i32 %v5_bffc, 8
  store i32 %v2_c000, i32* %r3.global-to-local, align 4
  %v2_c004 = trunc i32 %v2_c000 to i8
  store i8 %v2_c004, i8* %v3_bffc, align 1
  br label %.thread10

.thread10:                                        ; preds = %.thread, %bb68
  %v3_c008 = load i32, i32* @r4, align 4
  %v4_c008 = add i32 %v3_c008, 14
  %v5_c008 = inttoptr i32 %v4_c008 to i16*
  store i16 %v1_bff4, i16* %v5_c008, align 2
  %v0_c00c = load i32, i32* @r8, align 4
  store i32 %v0_c00c, i32* %r1.global-to-local, align 4
  %v0_c010 = load i32, i32* @r5, align 4
  store i32 %v0_c010, i32* %r0.global-to-local, align 4
  %v2_c014 = call i32 @function_f250(i32 %v0_c010, i32 %v0_c00c)
  store i32 %v2_c014, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c01c = load i32, i32* @r5, align 4
  %v3_c01c = load i32, i32* @r8, align 4
  %v4_c01c = add i32 %v3_c01c, %v2_c01c
  %v5_c01c = inttoptr i32 %v4_c01c to i8*
  store i8 0, i8* %v5_c01c, align 1
  %v3_c020 = load i32, i32* %stack_var_-44, align 4
  %v1_c024 = add i32 %v3_c020, 1
  store i32 %v1_c024, i32* @r4, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v9_c02c = icmp eq i32 %v1_c024, %arg2
  store i1 %v9_c02c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c024, i32* %stack_var_-44, align 4
  %v5_c034 = icmp slt i32 %v1_c024, %arg2
  br i1 %v5_c034, label %dec_label_pc_bec0, label %dec_label_pc_c038.preheader

dec_label_pc_c038.preheader:                      ; preds = %.thread10, %dec_label_pc_bdd8
  %v2_c074 = icmp eq i32 %v6_bd7c, -1
  %v7_c074 = icmp eq i32 %v6_bd7c, -1
  %v3_c1e8 = icmp eq i32 %v3_bdec, 65535
  %v2_c24c = icmp eq i32 %v1_bd68, 0
  br label %dec_label_pc_c038

dec_label_pc_c038:                                ; preds = %dec_label_pc_c038.preheader, %dec_label_pc_c274
  store i32 %arg2, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_bdf8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bdf8, label %dec_label_pc_c274, label %dec_label_pc_c04c

dec_label_pc_c04c:                                ; preds = %dec_label_pc_c038
  %v0_c04c = load i32, i32* @r8, align 4
  %v3_c04c = mul i32 %v0_c04c, 65536
  %v1_c050 = add i32 %v3_c04c, 1310720
  store i32 %v1_c050, i32* %r2.global-to-local, align 4
  %tmp69 = udiv i32 %v1_c050, 256
  %v3_c058 = and i32 %tmp69, 65280
  store i32 %v3_c058, i32* %r3.global-to-local, align 4
  %v4_c05c = udiv i32 %v1_c050, 16777216
  %v5_c05c = or i32 %v3_c058, %v4_c05c
  store i32 %v5_c05c, i32* @fp, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_c064 = add i32 %v0_c04c, 20
  store i32 %v1_c064, i32* @sb, align 4
  %v1_c068 = add i32 %v0_c04c, 40
  store i32 %v1_c068, i32* @sl, align 4
  br label %dec_label_pc_c154

dec_label_pc_c070:                                ; preds = %dec_label_pc_c154
  store i32 %v6_bd7c, i32* %r0.global-to-local, align 4
  store i1 %v7_c074, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c074, label %dec_label_pc_c1d8, label %dec_label_pc_c07c

dec_label_pc_c07c:                                ; preds = %dec_label_pc_c178, %dec_label_pc_c070
  store i32 %v3_bdec, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c1e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c1e8, label %dec_label_pc_c1f4, label %dec_label_pc_c090

dec_label_pc_c090:                                ; preds = %dec_label_pc_c1d8.dec_label_pc_c090_crit_edge, %dec_label_pc_c07c
  %v1_c094 = phi i32 [ %v1_c094.pre, %dec_label_pc_c1d8.dec_label_pc_c090_crit_edge ], [ 65535, %dec_label_pc_c07c ]
  store i32 %v3_bdf0, i32* %r2.global-to-local, align 4
  %v9_c094 = icmp eq i32 %v3_bdf0, %v1_c094
  store i1 %v9_c094, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c094, label %dec_label_pc_c208, label %dec_label_pc_c09c

dec_label_pc_c09c:                                ; preds = %dec_label_pc_c1f4.dec_label_pc_c09c_crit_edge, %dec_label_pc_c090
  %v1_c0a0 = phi i32 [ %v1_c0a0.pre, %dec_label_pc_c1f4.dec_label_pc_c09c_crit_edge ], [ %v1_c094, %dec_label_pc_c090 ]
  store i32 %v3_bdf4, i32* %r3.global-to-local, align 4
  %v9_c0a0 = icmp eq i32 %v3_bdf4, %v1_c0a0
  store i1 %v9_c0a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c0a0, label %dec_label_pc_c21c, label %dec_label_pc_c0a8

dec_label_pc_c0a8:                                ; preds = %dec_label_pc_c208.dec_label_pc_c0a8_crit_edge, %dec_label_pc_c09c
  %v1_c0ac = phi i32 [ %v1_c0ac.pre, %dec_label_pc_c208.dec_label_pc_c0a8_crit_edge ], [ %v1_c0a0, %dec_label_pc_c09c ]
  store i32 %v5_bc7c, i32* %ip.global-to-local, align 4
  %v9_c0ac = icmp eq i32 %v5_bc7c, %v1_c0ac
  store i1 %v9_c0ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c0ac, label %dec_label_pc_c230, label %dec_label_pc_c0b4

dec_label_pc_c0b4:                                ; preds = %dec_label_pc_c21c.dec_label_pc_c0b4_crit_edge, %dec_label_pc_c0a8
  %v1_c0b8 = phi i32 [ %v1_c0b8.pre, %dec_label_pc_c21c.dec_label_pc_c0b4_crit_edge ], [ %v1_c0ac, %dec_label_pc_c0a8 ]
  store i32 %v6_bc98, i32* %r0.global-to-local, align 4
  %v9_c0b8 = icmp eq i32 %v6_bc98, %v1_c0b8
  store i1 %v9_c0b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c0b8, label %dec_label_pc_c244, label %dec_label_pc_c0c0

dec_label_pc_c0c0:                                ; preds = %dec_label_pc_c230, %dec_label_pc_c0b4
  store i32 %v1_bd68, i32* %r1.global-to-local, align 4
  store i1 %v2_c24c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c24c, label %dec_label_pc_c0cc, label %dec_label_pc_c258

dec_label_pc_c0cc:                                ; preds = %dec_label_pc_c0c0, %dec_label_pc_c244, %dec_label_pc_c258
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c0d0 = load i32, i32* @r5, align 4
  %v3_c0d0 = add i32 %v2_c0d0, 10
  %v4_c0d0 = inttoptr i32 %v3_c0d0 to i16*
  store i16 0, i16* %v4_c0d0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c0d8 = load i32, i32* @r5, align 4
  store i32 %v0_c0d8, i32* @r0, align 4
  %v2_c0dc = call i32 @function_dd58(i32 %v0_c0d8, i32 20)
  %v3_c0dc = trunc i32 %v2_c0dc to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c0e4 = load i32, i32* @r5, align 4
  %v4_c0e4 = add i32 %v3_c0e4, 10
  %v5_c0e4 = inttoptr i32 %v4_c0e4 to i16*
  store i16 %v3_c0dc, i16* %v5_c0e4, align 2
  %v0_c0e8 = load i32, i32* @r6, align 4
  store i32 %v0_c0e8, i32* @r1, align 4
  %v0_c0ec = load i32, i32* %r3.global-to-local, align 4
  %v1_c0ec = trunc i32 %v0_c0ec to i16
  %v3_c0ec = add i32 %v0_c0e8, 16
  %v4_c0ec = inttoptr i32 %v3_c0ec to i16*
  store i16 %v1_c0ec, i16* %v4_c0ec, align 2
  %v0_c0f0 = load i32, i32* @fp, align 4
  store i32 %v0_c0f0, i32* %r2.global-to-local, align 4
  %v0_c0f4 = load i32, i32* @sb, align 4
  store i32 %v0_c0f4, i32* %r3.global-to-local, align 4
  %v0_c0f8 = load i32, i32* @r5, align 4
  store i32 %v0_c0f8, i32* %r0.global-to-local, align 4
  %v4_c0fc = call i32 @function_dda8(i32 %v0_c0f8, i32 %v0_c0e8, i32 %v0_c0f0, i32 %v0_c0f4)
  %v5_c0fc = trunc i32 %v4_c0fc to i16
  store i32 %v4_c0fc, i32* %r0.global-to-local, align 4
  %v3_c100 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c100, i32* %r3.global-to-local, align 4
  %v3_c104 = mul i32 %v3_c100, 32
  store i32 %v3_c104, i32* %lr.global-to-local, align 4
  %v3_c108 = load i32, i32* @r6, align 4
  %v4_c108 = add i32 %v3_c108, 16
  %v5_c108 = inttoptr i32 %v4_c108 to i16*
  store i16 %v5_c0fc, i16* %v5_c108, align 2
  %v0_c10c = load i32, i32* %lr.global-to-local, align 4
  %v1_c10c = load i32, i32* %r3.global-to-local, align 4
  %tmp73 = mul i32 %v1_c10c, -8
  %v5_c10c = add i32 %v0_c10c, %tmp73
  store i32 %v5_c10c, i32* %lr.global-to-local, align 4
  %v0_c110 = load i32, i32* @r6, align 4
  %v1_c110 = add i32 %v0_c110, 2
  %v2_c110 = inttoptr i32 %v1_c110 to i16*
  %v3_c110 = load i16, i16* %v2_c110, align 2
  %v1_c114 = load i32, i32* @r7, align 4
  %v2_c114 = add i32 %v1_c114, %v5_c10c
  store i32 %v2_c114, i32* @lr, align 4
  %v3_c118 = add i32 %v2_c114, 2
  %v4_c118 = inttoptr i32 %v3_c118 to i16*
  store i16 %v3_c110, i16* %v4_c118, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c124 = load i32, i32* @r5, align 4
  store i32 %v0_c124, i32* %r1.global-to-local, align 4
  store i32 %v3_bda0, i32* %r0.global-to-local, align 4
  %v0_c12c = load i32, i32* @sl, align 4
  store i32 %v0_c12c, i32* %r2.global-to-local, align 4
  %v0_c134 = load i32, i32* @lr, align 4
  %v6_c138 = call i32 @function_12c60(i32 %v3_bda0, i32 %v0_c124, i32 %v0_c12c, i32 16384, i32 %v0_c134, i32 16)
  %v3_c13c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c13c, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v1_c144 = add i32 %v3_c13c, 1
  store i32 %v1_c144, i32* %r0.global-to-local, align 4
  %v9_c148 = icmp eq i32 %v1_c144, %arg2
  store i1 %v9_c148, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c144, i32* %stack_var_-44, align 4
  %v6_c150 = icmp slt i32 %v1_c144, %arg2
  br i1 %v6_c150, label %dec_label_pc_c154, label %dec_label_pc_c274

dec_label_pc_c154:                                ; preds = %dec_label_pc_c0cc, %dec_label_pc_c04c
  %v1_c168 = phi i32 [ %v1_c144, %dec_label_pc_c0cc ], [ 0, %dec_label_pc_c04c ]
  %v5_c158 = mul i32 %v1_c168, 24
  %v1_c15c = load i32, i32* @r7, align 4
  %v2_c15c = add i32 %v1_c15c, %v5_c158
  store i32 %v2_c15c, i32* %r3.global-to-local, align 4
  store i32 %v2_bbac, i32* %ip.global-to-local, align 4
  %v1_c164 = add i32 %v2_c15c, 20
  %v2_c164 = inttoptr i32 %v1_c164 to i8*
  %v3_c164 = load i8, i8* %v2_c164, align 1
  %v4_c164 = zext i8 %v3_c164 to i32
  store i32 %v4_c164, i32* %r2.global-to-local, align 4
  %v4_c168 = mul i32 %v1_c168, 4
  %v5_c168 = add i32 %v4_c168, %v2_bbac
  %v6_c168 = inttoptr i32 %v5_c168 to i32*
  %v7_c168 = load i32, i32* %v6_c168, align 4
  store i32 %v7_c168, i32* @r5, align 4
  %v2_c16c = icmp ugt i8 %v3_c164, 30
  %v7_c16c = icmp eq i8 %v3_c164, 31
  store i1 %v7_c16c, i1* %cpsr_z.global-to-local, align 1
  %v1_c170 = add i32 %v7_c168, 20
  store i32 %v1_c170, i32* @r6, align 4
  %v2_c174 = xor i1 %v7_c16c, true
  %v3_c174 = and i1 %v2_c16c, %v2_c174
  br i1 %v3_c174, label %dec_label_pc_c070, label %dec_label_pc_c178

dec_label_pc_c178:                                ; preds = %dec_label_pc_c154
  %v1_c178 = add i32 %v2_c15c, 16
  %v2_c178 = inttoptr i32 %v1_c178 to i32*
  %v3_c178 = load i32, i32* %v2_c178, align 4
  %v0_c17c = call i32 @function_f18c()
  store i32 %v0_c17c, i32* %r0.global-to-local, align 4
  %v3_c180 = load i32, i32* %stack_var_-44, align 4
  %v5_c188 = mul i32 %v3_c180, 24
  %v1_c18c = and i32 %v3_c178, 16711680
  store i32 %v1_c18c, i32* %ip.global-to-local, align 4
  %v3_c190 = udiv i32 %v3_c178, 16777216
  %v4_c194 = udiv i32 %v1_c18c, 256
  %v5_c194 = or i32 %v4_c194, %v3_c190
  store i32 %v5_c194, i32* %r2.global-to-local, align 4
  %v1_c198 = load i32, i32* @r7, align 4
  %v2_c198 = add i32 %v1_c198, %v5_c188
  store i32 %v2_c198, i32* %r1.global-to-local, align 4
  %v1_c19c = and i32 %v3_c178, 65280
  store i32 %v1_c19c, i32* %r3.global-to-local, align 4
  %v1_c1a0 = add i32 %v2_c198, 20
  %v2_c1a0 = inttoptr i32 %v1_c1a0 to i8*
  %v3_c1a0 = load i8, i8* %v2_c1a0, align 1
  %v4_c1a0 = zext i8 %v3_c1a0 to i32
  store i32 %v4_c1a0, i32* %ip.global-to-local, align 4
  %v5_c1a8 = call i32 @llvm.bswap.i32(i32 %v3_c178)
  %v7_c1ac = lshr i32 %v0_c17c, %v4_c1a0
  %v8_c1ac = add i32 %v7_c1ac, %v5_c1a8
  store i32 %v8_c1ac, i32* %r2.global-to-local, align 4
  %v1_c1bc = and i32 %v8_c1ac, 65280
  store i32 %v1_c1bc, i32* %r1.global-to-local, align 4
  store i32 %v6_bd7c, i32* %r0.global-to-local, align 4
  %v5_c1c8 = call i32 @llvm.bswap.i32(i32 %v8_c1ac)
  store i32 %v5_c1c8, i32* %r3.global-to-local, align 4
  store i1 %v7_c074, i1* %cpsr_z.global-to-local, align 1
  %v1_c1d0 = load i32, i32* @r5, align 4
  %v2_c1d0 = add i32 %v1_c1d0, 16
  %v3_c1d0 = inttoptr i32 %v2_c1d0 to i32*
  store i32 %v5_c1c8, i32* %v3_c1d0, align 4
  br i1 %v2_c074, label %dec_label_pc_c1d8, label %dec_label_pc_c07c

dec_label_pc_c1d8:                                ; preds = %dec_label_pc_c178, %dec_label_pc_c070
  %v0_c1d8 = call i32 @function_f18c()
  store i32 %v0_c1d8, i32* %r0.global-to-local, align 4
  store i32 %v3_bdec, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c1e8, i1* %cpsr_z.global-to-local, align 1
  %v1_c1ec = load i32, i32* @r5, align 4
  %v2_c1ec = add i32 %v1_c1ec, 12
  %v3_c1ec = inttoptr i32 %v2_c1ec to i32*
  store i32 %v0_c1d8, i32* %v3_c1ec, align 4
  br i1 %v3_c1e8, label %dec_label_pc_c1f4, label %dec_label_pc_c1d8.dec_label_pc_c090_crit_edge

dec_label_pc_c1d8.dec_label_pc_c090_crit_edge:    ; preds = %dec_label_pc_c1d8
  %v1_c094.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c090

dec_label_pc_c1f4:                                ; preds = %dec_label_pc_c1d8, %dec_label_pc_c07c
  %v0_c1f4 = call i32 @function_f18c()
  %v1_c1f4 = trunc i32 %v0_c1f4 to i16
  store i32 %v0_c1f4, i32* %r0.global-to-local, align 4
  store i32 %v3_bdf0, i32* %r2.global-to-local, align 4
  %v1_c1fc = load i32, i32* @r4, align 4
  %v9_c1fc = icmp eq i32 %v3_bdf0, %v1_c1fc
  store i1 %v9_c1fc, i1* %cpsr_z.global-to-local, align 1
  %v3_c200 = load i32, i32* @r5, align 4
  %v4_c200 = add i32 %v3_c200, 4
  %v5_c200 = inttoptr i32 %v4_c200 to i16*
  store i16 %v1_c1f4, i16* %v5_c200, align 2
  br i1 %v9_c1fc, label %dec_label_pc_c208, label %dec_label_pc_c1f4.dec_label_pc_c09c_crit_edge

dec_label_pc_c1f4.dec_label_pc_c09c_crit_edge:    ; preds = %dec_label_pc_c1f4
  %v1_c0a0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c09c

dec_label_pc_c208:                                ; preds = %dec_label_pc_c1f4, %dec_label_pc_c090
  %v0_c208 = call i32 @function_f18c()
  %v1_c208 = trunc i32 %v0_c208 to i16
  store i32 %v0_c208, i32* %r0.global-to-local, align 4
  store i32 %v3_bdf4, i32* %r3.global-to-local, align 4
  %v1_c210 = load i32, i32* @r4, align 4
  %v9_c210 = icmp eq i32 %v3_bdf4, %v1_c210
  store i1 %v9_c210, i1* %cpsr_z.global-to-local, align 1
  %v3_c214 = load i32, i32* @r5, align 4
  %v4_c214 = add i32 %v3_c214, 20
  %v5_c214 = inttoptr i32 %v4_c214 to i16*
  store i16 %v1_c208, i16* %v5_c214, align 2
  br i1 %v9_c210, label %dec_label_pc_c21c, label %dec_label_pc_c208.dec_label_pc_c0a8_crit_edge

dec_label_pc_c208.dec_label_pc_c0a8_crit_edge:    ; preds = %dec_label_pc_c208
  %v1_c0ac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c0a8

dec_label_pc_c21c:                                ; preds = %dec_label_pc_c208, %dec_label_pc_c09c
  %v0_c21c = call i32 @function_f18c()
  %v1_c21c = trunc i32 %v0_c21c to i16
  store i32 %v0_c21c, i32* %r0.global-to-local, align 4
  store i32 %v5_bc7c, i32* %ip.global-to-local, align 4
  %v1_c224 = load i32, i32* @r4, align 4
  %v9_c224 = icmp eq i32 %v5_bc7c, %v1_c224
  store i1 %v9_c224, i1* %cpsr_z.global-to-local, align 1
  %v3_c228 = load i32, i32* @r6, align 4
  %v4_c228 = add i32 %v3_c228, 2
  %v5_c228 = inttoptr i32 %v4_c228 to i16*
  store i16 %v1_c21c, i16* %v5_c228, align 2
  br i1 %v9_c224, label %dec_label_pc_c230, label %dec_label_pc_c21c.dec_label_pc_c0b4_crit_edge

dec_label_pc_c21c.dec_label_pc_c0b4_crit_edge:    ; preds = %dec_label_pc_c21c
  %v1_c0b8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c0b4

dec_label_pc_c230:                                ; preds = %dec_label_pc_c21c, %dec_label_pc_c0a8
  %v0_c230 = call i32 @function_f18c()
  %v1_c234 = load i32, i32* @r6, align 4
  %v2_c234 = add i32 %v1_c234, 4
  %v3_c234 = inttoptr i32 %v2_c234 to i32*
  store i32 %v0_c230, i32* %v3_c234, align 4
  store i32 %v6_bc98, i32* %r0.global-to-local, align 4
  %v1_c23c = load i32, i32* @r4, align 4
  %v9_c23c = icmp eq i32 %v6_bc98, %v1_c23c
  store i1 %v9_c23c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c23c, label %dec_label_pc_c244, label %dec_label_pc_c0c0

dec_label_pc_c244:                                ; preds = %dec_label_pc_c230, %dec_label_pc_c0b4
  %v0_c244 = call i32 @function_f18c()
  store i32 %v0_c244, i32* %r0.global-to-local, align 4
  store i32 %v1_bd68, i32* %r1.global-to-local, align 4
  store i1 %v2_c24c, i1* %cpsr_z.global-to-local, align 1
  %v1_c250 = load i32, i32* @r6, align 4
  %v2_c250 = add i32 %v1_c250, 8
  %v3_c250 = inttoptr i32 %v2_c250 to i32*
  store i32 %v0_c244, i32* %v3_c250, align 4
  br i1 %v2_c24c, label %dec_label_pc_c0cc, label %dec_label_pc_c258

dec_label_pc_c258:                                ; preds = %dec_label_pc_c0c0, %dec_label_pc_c244
  %v0_c258 = load i32, i32* @r5, align 4
  %v1_c258 = add i32 %v0_c258, 40
  store i32 %v1_c258, i32* @r4, align 4
  store i32 %v1_c258, i32* %r0.global-to-local, align 4
  %v0_c260 = load i32, i32* @r8, align 4
  store i32 %v0_c260, i32* %r1.global-to-local, align 4
  %v2_c264 = call i32 @function_f250(i32 %v1_c258, i32 %v0_c260)
  store i32 %v2_c264, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c26c = load i32, i32* @r4, align 4
  %v3_c26c = load i32, i32* @r8, align 4
  %v4_c26c = add i32 %v3_c26c, %v2_c26c
  %v5_c26c = inttoptr i32 %v4_c26c to i8*
  store i8 0, i8* %v5_c26c, align 1
  br label %dec_label_pc_c0cc

dec_label_pc_c274:                                ; preds = %dec_label_pc_c0cc, %dec_label_pc_c038
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c278 = call i32 @function_12150(i32* null)
  store i32 %v2_c278, i32* %r0.global-to-local, align 4
  store i32 %v2_bd8c, i32* %r1.global-to-local, align 4
  %v9_c280 = icmp eq i32 %v2_bd8c, %v2_c278
  store i1 %v9_c280, i1* %cpsr_z.global-to-local, align 1
  %v6_c284 = icmp slt i32 %v2_bd8c, %v2_c278
  br i1 %v6_c284, label %dec_label_pc_c288, label %dec_label_pc_c038

dec_label_pc_c288:                                ; preds = %dec_label_pc_c274, %dec_label_pc_bb80, %dec_label_pc_c294
  %v1_c290 = phi i32 [ %v3_bda0, %dec_label_pc_bb80 ], [ %v1_c298, %dec_label_pc_c294 ], [ %v2_c278, %dec_label_pc_c274 ]
  store i32 %v18_bb80, i32* %sb.global-to-local, align 4
  store i32 %v24_bb80, i32* %fp.global-to-local, align 4
  store i32 %v27_bb80, i32* %lr.global-to-local, align 4
  ret i32 %v1_c290

dec_label_pc_c294:                                ; preds = %dec_label_pc_bdb0
  store i32 %v3_bda0, i32* %r0.global-to-local, align 4
  %v1_c298 = call i32 @function_124d0(i32 %v3_bda0)
  store i32 %v1_c298, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c288

; uselistorder directives
  uselistorder i32 %v1_c298, { 1, 0 }
  uselistorder i32 %v0_c21c, { 1, 0 }
  uselistorder i32 %v0_c208, { 1, 0 }
  uselistorder i32 %v0_c1f4, { 1, 0 }
  uselistorder i32 %v5_c1c8, { 1, 0 }
  uselistorder i32 %v3_c178, { 2, 1, 3, 0 }
  uselistorder i32 %v1_c144, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_c10c, { 1, 0 }
  uselistorder i32 %v4_c0fc, { 1, 0 }
  uselistorder i32 %v0_c04c, { 2, 1, 0 }
  uselistorder i1 %v2_c24c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c1e8, { 1, 0, 2, 3 }
  uselistorder i1 %v7_c074, { 2, 1, 0 }
  uselistorder i32 %v1_c024, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bff4, { 1, 0 }
  uselistorder i32 %v0_bf60, { 1, 0, 2, 3 }
  uselistorder i32 %v1_be88, { 2, 0, 1 }
  uselistorder i32 %v1_be84, { 2, 0, 1 }
  uselistorder i32 %v1_be74, { 1, 0 }
  uselistorder i1 %v2_bdf8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_bdec, { 0, 1, 3, 2 }
  uselistorder i32 %v0_bde8, { 1, 0, 3, 2 }
  uselistorder i32 %v0_bde4, { 1, 0, 2 }
  uselistorder i1 %v7_bdd0, { 1, 0 }
  uselistorder i1 %v7_bda4, { 1, 0 }
  uselistorder i32 %v3_bda0, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_bd8c, { 2, 1, 0 }
  uselistorder i32 %v6_bd7c, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_bd68, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_bce0, { 0, 2, 1 }
  uselistorder i32 %v6_bc98, { 3, 2, 1, 0 }
  uselistorder i32 %v5_bc7c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_bc2c, { 1, 0 }
  uselistorder i32 %v1_bc08, { 1, 0 }
  uselistorder i32 %v6_bc00, { 1, 0 }
  uselistorder i32 %v7_bbe8, { 1, 0, 2, 3 }
  uselistorder i8 %v5_bbe4, { 1, 0 }
  uselistorder i32 %v6_bbc4, { 1, 0 }
  uselistorder i32 %v2_bbac, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 13, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 8, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 43, 44, 45, 46, 48, 47, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 7, 5, 8, 6, 9, 10, 11, 13, 12, 15, 14, 16, 18, 17, 19, 20, 21, 23, 22, 29, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 16, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 6, 5, 4, 7, 3, 2, 1, 0, 8, 9, 10, 11 }
  uselistorder label %dec_label_pc_c288, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c258, { 1, 0 }
  uselistorder label %dec_label_pc_c0cc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c038, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c2a4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_c2a4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_c2a4 = load i32, i32* @r4, align 4
  %v24_c2a4 = load i32, i32* @fp, align 4
  %v27_c2a4 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_c2d0 = call i32 @function_1384c(i32 %arg2, i32 4)
  %v0_c2d4 = load i32, i32* @r4, align 4
  store i32 %v0_c2d4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c2d0, i32* @sl, align 4
  %v0_c2e4 = load i32, i32* @r5, align 4
  store i32 %v0_c2e4, i32* %r0.global-to-local, align 4
  %v4_c2e8 = inttoptr i32 %v0_c2d4 to i32*
  %v5_c2e8 = call i32 @function_8258(i32 %v0_c2e4, i32* %v4_c2e8, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c300 = load i32, i32* @r4, align 4
  store i32 %v0_c300, i32* %r1.global-to-local, align 4
  %v0_c304 = load i32, i32* @r5, align 4
  store i32 %v0_c304, i32* %r0.global-to-local, align 4
  %v5_c308 = trunc i32 %v5_c2e8 to i8
  %v6_c30c = inttoptr i32 %v0_c300 to i32*
  %v7_c30c = call i32 @function_8258(i32 %v0_c304, i32* %v6_c30c, i32 3, i32 65535)
  %v0_c310 = load i32, i32* @r4, align 4
  store i32 %v0_c310, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c320 = load i32, i32* @r5, align 4
  store i32 %v0_c320, i32* %r0.global-to-local, align 4
  %v5_c324 = inttoptr i32 %v0_c310 to i32*
  %v6_c324 = call i32 @function_8258(i32 %v0_c320, i32* %v5_c324, i32 4, i32 64)
  %v1_c32c = urem i32 %v6_c324, 256
  %v0_c330 = load i32, i32* @r4, align 4
  store i32 %v0_c330, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c33c = load i32, i32* @r5, align 4
  store i32 %v0_c33c, i32* %r0.global-to-local, align 4
  %v6_c344 = inttoptr i32 %v0_c330 to i32*
  %v7_c344 = call i32 @function_8258(i32 %v0_c33c, i32* %v6_c344, i32 5, i32 1)
  %v1_c350 = urem i32 %v7_c344, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c35c = load i32, i32* @r4, align 4
  store i32 %v0_c35c, i32* %r1.global-to-local, align 4
  %v0_c360 = load i32, i32* @r5, align 4
  store i32 %v0_c360, i32* %r0.global-to-local, align 4
  %v5_c368 = inttoptr i32 %v0_c35c to i32*
  %v6_c368 = call i32 @function_8258(i32 %v0_c360, i32* %v5_c368, i32 6, i32 65535)
  %v0_c374 = load i32, i32* @r4, align 4
  store i32 %v0_c374, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c380 = load i32, i32* @r5, align 4
  store i32 %v0_c380, i32* %r0.global-to-local, align 4
  %v5_c384 = inttoptr i32 %v0_c374 to i32*
  %v6_c384 = call i32 @function_8258(i32 %v0_c380, i32* %v5_c384, i32 7, i32 65535)
  %v0_c38c = load i32, i32* @r4, align 4
  store i32 %v0_c38c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 %v6_c384, i32* %fp.global-to-local, align 4
  %v0_c39c = load i32, i32* @r5, align 4
  store i32 %v0_c39c, i32* %r0.global-to-local, align 4
  %v4_c3a0 = inttoptr i32 %v0_c38c to i32*
  %v5_c3a0 = call i32 @function_8258(i32 %v0_c39c, i32* %v4_c3a0, i32 16, i32 65535)
  %v0_c3a4 = load i32, i32* @r4, align 4
  store i32 %v0_c3a4, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c3b4 = load i32, i32* @r5, align 4
  store i32 %v0_c3b4, i32* %r0.global-to-local, align 4
  %v5_c3b8 = inttoptr i32 %v0_c3a4 to i32*
  %v6_c3b8 = call i32 @function_8258(i32 %v0_c3b4, i32* %v5_c3b8, i32 17, i32 0)
  %v0_c3bc = load i32, i32* @r4, align 4
  store i32 %v0_c3bc, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c3cc = load i32, i32* @r5, align 4
  store i32 %v0_c3cc, i32* %r0.global-to-local, align 4
  %v5_c3d0 = inttoptr i32 %v0_c3bc to i32*
  %v6_c3d0 = call i32 @function_8258(i32 %v0_c3cc, i32* %v5_c3d0, i32 10, i32 0)
  %v0_c3d4 = load i32, i32* @r4, align 4
  store i32 %v0_c3d4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c3e4 = load i32, i32* @r5, align 4
  store i32 %v0_c3e4, i32* %r0.global-to-local, align 4
  %v5_c3e8 = inttoptr i32 %v0_c3d4 to i32*
  %v6_c3e8 = call i32 @function_8258(i32 %v0_c3e4, i32* %v5_c3e8, i32 11, i32 0)
  %v0_c3ec = load i32, i32* @r4, align 4
  store i32 %v0_c3ec, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c3fc = load i32, i32* @r5, align 4
  store i32 %v0_c3fc, i32* %r0.global-to-local, align 4
  %v5_c400 = inttoptr i32 %v0_c3ec to i32*
  %v6_c400 = call i32 @function_8258(i32 %v0_c3fc, i32* %v5_c400, i32 12, i32 0)
  %v0_c404 = load i32, i32* @r4, align 4
  store i32 %v0_c404, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c414 = load i32, i32* @r5, align 4
  store i32 %v0_c414, i32* %r0.global-to-local, align 4
  %v5_c418 = inttoptr i32 %v0_c404 to i32*
  %v6_c418 = call i32 @function_8258(i32 %v0_c414, i32* %v5_c418, i32 13, i32 0)
  %v0_c41c = load i32, i32* @r4, align 4
  store i32 %v0_c41c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c42c = load i32, i32* @r5, align 4
  store i32 %v0_c42c, i32* %r0.global-to-local, align 4
  %v5_c430 = inttoptr i32 %v0_c41c to i32*
  %v6_c430 = call i32 @function_8258(i32 %v0_c42c, i32* %v5_c430, i32 14, i32 1)
  %v0_c434 = load i32, i32* @r4, align 4
  store i32 %v0_c434, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c444 = load i32, i32* @r5, align 4
  store i32 %v0_c444, i32* %r0.global-to-local, align 4
  %v5_c448 = inttoptr i32 %v0_c434 to i32*
  %v6_c448 = call i32 @function_8258(i32 %v0_c444, i32* %v5_c448, i32 15, i32 0)
  %v0_c450 = load i32, i32* @r4, align 4
  store i32 %v0_c450, i32* %r1.global-to-local, align 4
  %v2_c454 = load i32, i32* @global_var_22418.77, align 4
  store i32 %v2_c454, i32* %r3.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_c460 = load i32, i32* @r5, align 4
  store i32 %v0_c460, i32* %r0.global-to-local, align 4
  %v5_c464 = inttoptr i32 %v0_c450 to i32*
  %v6_c464 = call i32 @function_81ec(i32 %v0_c460, i32* %v5_c464, i32 24, i32 %v2_c454, i32 %v6_c448)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c470 = call i32 @function_12150(i32* null)
  %v1_c474 = load i32, i32* @r6, align 4
  %v2_c474 = add i32 %v1_c474, %v2_c470
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c488 = call i32 @function_12ce4(i32 2, i32 3, i32 6)
  store i32 %v3_c488, i32* %r0.global-to-local, align 4
  %v7_c48c = icmp eq i32 %v3_c488, -1
  store i1 %v7_c48c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c488, i32* @r8, align 4
  br i1 %v7_c48c, label %dec_label_pc_c960, label %dec_label_pc_c498

dec_label_pc_c498:                                ; preds = %dec_label_pc_c2a4
  store i32 1, i32* %stack_var_-44, align 4
  %v6_c4a0 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_c4a0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_c4b4 = call i32 @function_12ca0(i32 %v3_c488, i32 0, i32 3, i32 %v6_c4a0, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_c4b4, i32* %r0.global-to-local, align 4
  %v7_c4b8 = icmp eq i32 %v5_c4b4, -1
  store i1 %v7_c4b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c4b8, label %dec_label_pc_c96c, label %dec_label_pc_c4c0

dec_label_pc_c4c0:                                ; preds = %dec_label_pc_c498
  %v3_c4cc = mul i32 %v7_c30c, 65536
  store i32 %v3_c4cc, i32* %r0.global-to-local, align 4
  %v0_c4d4 = load i32, i32* %fp.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_c3d0, i32* %r1.global-to-local, align 4
  %v3_c4e0 = urem i32 %v7_c30c, 65536
  store i32 %v3_c4e0, i32* %r2.global-to-local, align 4
  %v3_c4e4 = urem i32 %v6_c368, 65536
  store i32 %v3_c4e4, i32* %r3.global-to-local, align 4
  %v3_c4e8 = urem i32 %v0_c4d4, 65536
  %v0_c4ec = load i32, i32* @sb, align 4
  %v2_c4ec = icmp eq i32 %v0_c4ec, 0
  store i1 %v2_c4ec, i1* %cpsr_z.global-to-local, align 1
  %v1_c4fc = urem i32 %v6_c3d0, 256
  store i32 %v1_c4fc, i32* @fp, align 4
  br i1 %v2_c4ec, label %dec_label_pc_c750.preheader, label %dec_label_pc_c504

dec_label_pc_c504:                                ; preds = %dec_label_pc_c4c0
  %trunc = trunc i32 %v7_c30c to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp60 = mul nuw nsw i32 %v3_c4e4, 256
  %v3_c530 = and i32 %tmp60, 65280
  %tmp61 = mul i32 %v0_c4d4, 256
  %v3_c534 = and i32 %tmp61, 65280
  %tmp62 = mul i32 %v5_c3a0, 256
  %v3_c538 = and i32 %tmp62, 65280
  %v1_c53c = urem i32 %v6_c3d0, 2
  %tmp63 = udiv i32 %v6_c368, 256
  %v4_c540 = urem i32 %tmp63, 256
  %v5_c540 = or i32 %v3_c530, %v4_c540
  %tmp64 = udiv i32 %v0_c4d4, 256
  %v4_c544 = urem i32 %tmp64, 256
  %v5_c544 = or i32 %v4_c544, %v3_c534
  store i32 %v5_c544, i32* @r5, align 4
  %tmp65 = udiv i32 %v5_c3a0, 256
  %v4_c548 = urem i32 %tmp65, 256
  %v5_c548 = or i32 %v4_c548, %v3_c538
  store i32 %v5_c548, i32* @lr, align 4
  %v1_c55c = urem i32 %v6_c3e8, 2
  store i32 %v1_c55c, i32* %r1.global-to-local, align 4
  %v1_c560 = urem i32 %v6_c400, 2
  store i32 %v1_c560, i32* %r2.global-to-local, align 4
  %v1_c564 = urem i32 %v6_c418, 2
  store i32 %v1_c564, i32* %r3.global-to-local, align 4
  %v1_c568 = urem i32 %v6_c430, 2
  store i32 %v1_c568, i32* @r6, align 4
  %v1_c56c = urem i32 %v6_c448, 2
  store i32 %v1_c56c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_c5e8 = trunc i32 %v6_c324 to i8
  %sext6 = mul nuw i32 %v5_c540, 65536
  %v4_c614 = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_c544, 65536
  %v6_c650 = sdiv i32 %sext7, 65536
  %tmp = sub nsw i32 0, %v1_c55c
  %v4_c668 = and i32 %tmp, 16
  %tmp66 = sub nsw i32 0, %v1_c560
  %v4_c680 = and i32 %tmp66, 8
  %tmp67 = sub nsw i32 0, %v1_c564
  %v4_c694 = and i32 %tmp67, 4
  %tmp68 = sub nsw i32 0, %v1_c568
  %v3_c6a8 = and i32 %tmp68, 2
  br label %dec_label_pc_c594

dec_label_pc_c594:                                ; preds = %.thread, %dec_label_pc_c504
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c59c = call i32 @function_1384c(i32 128, i32 1)
  store i32 %v2_c59c, i32* %r0.global-to-local, align 4
  %v3_c5a0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c5a0, i32* %r2.global-to-local, align 4
  %v1_c5a4 = load i32, i32* @sl, align 4
  %v2_c5a4 = load i32, i32* @r4, align 4
  %v5_c5a4 = mul i32 %v2_c5a4, 4
  %v6_c5a4 = add i32 %v5_c5a4, %v1_c5a4
  %v7_c5a4 = inttoptr i32 %v6_c5a4 to i32*
  store i32 %v2_c59c, i32* %v7_c5a4, align 4
  %v0_c5a8 = load i32, i32* %r2.global-to-local, align 4
  %v3_c5a8 = mul i32 %v0_c5a8, 32
  store i32 %v3_c5a8, i32* %r3.global-to-local, align 4
  %v0_c5ac = load i32, i32* @sl, align 4
  %v4_c5ac = mul i32 %v0_c5a8, 4
  %v5_c5ac = add i32 %v0_c5ac, %v4_c5ac
  %v6_c5ac = inttoptr i32 %v5_c5ac to i32*
  %v7_c5ac = load i32, i32* %v6_c5ac, align 4
  store i32 %v7_c5ac, i32* %r4.global-to-local, align 4
  %v5_c5b0 = mul i32 %v0_c5a8, 24
  store i32 %v5_c5b0, i32* %r3.global-to-local, align 4
  %v1_c5b4 = load i32, i32* @r7, align 4
  %v2_c5b4 = add i32 %v1_c5b4, %v5_c5b0
  store i32 %v2_c5b4, i32* %r0.global-to-local, align 4
  %v1_c5b8 = inttoptr i32 %v7_c5ac to i8*
  %v2_c5b8 = load i8, i8* %v1_c5b8, align 1
  %tmp69 = urem i8 %v2_c5b8, 16
  %v1_c5bc = zext i8 %tmp69 to i32
  %v1_c5c0 = or i32 %v1_c5bc, 64
  store i32 %v1_c5c0, i32* %r3.global-to-local, align 4
  %v1_c5c4 = trunc i32 %v1_c5c0 to i8
  store i8 %v1_c5c4, i8* %v1_c5b8, align 1
  %v0_c5c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_c5c8 = inttoptr i32 %v0_c5c8 to i8*
  %v2_c5c8 = load i8, i8* %v1_c5c8, align 1
  %v1_c5cc = and i8 %v2_c5c8, -16
  %v1_c5d0 = or i8 %v1_c5cc, 5
  store i32 %v1_c350, i32* %r1.global-to-local, align 4
  store i8 %v1_c5d0, i8* %v1_c5c8, align 1
  %v2_c5e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5e0 = add i32 %v2_c5e0, 1
  %v4_c5e0 = inttoptr i32 %v3_c5e0 to i8*
  store i8 %v5_c308, i8* %v4_c5e0, align 1
  store i32 %v1_c32c, i32* %r3.global-to-local, align 4
  %v2_c5e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5e8 = add i32 %v2_c5e8, 8
  %v4_c5e8 = inttoptr i32 %v3_c5e8 to i8*
  store i8 %v1_c5e8, i8* %v4_c5e8, align 1
  %v0_c5f0 = load i32, i32* %r1.global-to-local, align 4
  %v2_c5f0 = icmp eq i32 %v0_c5f0, 0
  store i1 %v2_c5f0, i1* %cpsr_z.global-to-local, align 1
  %v2_c5f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5f4 = add i32 %v2_c5f4, 4
  %v4_c5f4 = inttoptr i32 %v3_c5f4 to i16*
  store i16 %rev, i16* %v4_c5f4, align 2
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_c5fc = load i32, i32* %r4.global-to-local, align 4
  %v3_c5fc = add i32 %v2_c5fc, 9
  %v4_c5fc = inttoptr i32 %v3_c5fc to i8*
  store i8 6, i8* %v4_c5fc, align 1
  %v0_c600 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c600, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c594
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c604 = load i32, i32* %r4.global-to-local, align 4
  %v4_c604 = add i32 %v3_c604, 6
  %v5_c604 = inttoptr i32 %v4_c604 to i16*
  store i16 64, i16* %v5_c604, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c594, %bb
  store i32 %v6_c464, i32* %r3.global-to-local, align 4
  %v1_c60c = load i32, i32* %r4.global-to-local, align 4
  %v2_c60c = add i32 %v1_c60c, 12
  %v3_c60c = inttoptr i32 %v2_c60c to i32*
  store i32 %v6_c464, i32* %v3_c60c, align 4
  %v0_c610 = load i32, i32* %r0.global-to-local, align 4
  %v1_c610 = add i32 %v0_c610, 16
  %v2_c610 = inttoptr i32 %v1_c610 to i32*
  %v3_c610 = load i32, i32* %v2_c610, align 4
  store i32 %v3_c610, i32* %r3.global-to-local, align 4
  store i32 %v4_c614, i32* %r0.global-to-local, align 4
  %v2_c61c = load i32, i32* %r4.global-to-local, align 4
  %v3_c61c = add i32 %v2_c61c, 2
  %v4_c61c = inttoptr i32 %v3_c61c to i16*
  store i16 15360, i16* %v4_c61c, align 2
  %v0_c620 = load i32, i32* %r3.global-to-local, align 4
  %v1_c620 = load i32, i32* %r4.global-to-local, align 4
  %v2_c620 = add i32 %v1_c620, 16
  %v3_c620 = inttoptr i32 %v2_c620 to i32*
  store i32 %v0_c620, i32* %v3_c620, align 4
  %v0_c624 = load i32, i32* %r0.global-to-local, align 4
  %v1_c624 = trunc i32 %v0_c624 to i16
  %v2_c624 = load i32, i32* %r4.global-to-local, align 4
  %v3_c624 = add i32 %v2_c624, 20
  %v4_c624 = inttoptr i32 %v3_c624 to i16*
  store i16 %v1_c624, i16* %v4_c624, align 2
  %v0_c628 = load i32, i32* %r4.global-to-local, align 4
  %v1_c628 = add i32 %v0_c628, 20
  store i32 %v1_c628, i32* %r1.global-to-local, align 4
  %v1_c62c = add i32 %v0_c628, 32
  %v2_c62c = inttoptr i32 %v1_c62c to i8*
  %v3_c62c = load i8, i8* %v2_c62c, align 1
  %v4_c62c = zext i8 %v3_c62c to i32
  store i32 %v4_c62c, i32* %r3.global-to-local, align 4
  %v1_c630 = add i32 %v0_c628, 33
  %v2_c630 = inttoptr i32 %v1_c630 to i8*
  %v3_c630 = load i8, i8* %v2_c630, align 1
  %v4_c630 = zext i8 %v3_c630 to i32
  store i32 %v1_c53c, i32* %r0.global-to-local, align 4
  %v1_c638 = urem i8 %v3_c62c, 16
  %v1_c63c = or i8 %v1_c638, -96
  %v1_c640 = and i32 %v4_c630, 223
  store i32 %v1_c640, i32* %r2.global-to-local, align 4
  store i8 %v1_c63c, i8* %v2_c62c, align 1
  %v0_c648 = load i32, i32* %r2.global-to-local, align 4
  %v1_c648 = load i32, i32* %r0.global-to-local, align 4
  %v4_c648 = mul i32 %v1_c648, 32
  %v5_c648 = or i32 %v4_c648, %v0_c648
  store i32 %v5_c648, i32* %r2.global-to-local, align 4
  store i32 %v5_c548, i32* %r0.global-to-local, align 4
  store i32 %v6_c650, i32* %r3.global-to-local, align 4
  %v1_c654 = trunc i32 %v5_c648 to i8
  %v2_c654 = load i32, i32* %r1.global-to-local, align 4
  %v3_c654 = add i32 %v2_c654, 13
  %v4_c654 = inttoptr i32 %v3_c654 to i8*
  store i8 %v1_c654, i8* %v4_c654, align 1
  %v0_c658 = load i32, i32* %r3.global-to-local, align 4
  %v1_c658 = trunc i32 %v0_c658 to i16
  %v2_c658 = load i32, i32* %r1.global-to-local, align 4
  %v3_c658 = add i32 %v2_c658, 2
  %v4_c658 = inttoptr i32 %v3_c658 to i16*
  store i16 %v1_c658, i16* %v4_c658, align 2
  %v0_c65c = load i32, i32* %r1.global-to-local, align 4
  %v1_c65c = add i32 %v0_c65c, 13
  %v2_c65c = inttoptr i32 %v1_c65c to i8*
  %v3_c65c = load i8, i8* %v2_c65c, align 1
  %v4_c65c = zext i8 %v3_c65c to i32
  store i32 %v1_c55c, i32* %r2.global-to-local, align 4
  %v1_c664 = and i32 %v4_c65c, 239
  %v5_c668 = or i32 %v1_c664, %v4_c668
  store i32 %v5_c668, i32* %r3.global-to-local, align 4
  %v0_c66c = load i32, i32* %r0.global-to-local, align 4
  %v2_c66c = add i32 %v0_c65c, 4
  %v3_c66c = inttoptr i32 %v2_c66c to i32*
  store i32 %v0_c66c, i32* %v3_c66c, align 4
  %v0_c670 = load i32, i32* %r3.global-to-local, align 4
  %v1_c670 = trunc i32 %v0_c670 to i8
  %v2_c670 = load i32, i32* %r1.global-to-local, align 4
  %v3_c670 = add i32 %v2_c670, 13
  %v4_c670 = inttoptr i32 %v3_c670 to i8*
  store i8 %v1_c670, i8* %v4_c670, align 1
  %v0_c674 = load i32, i32* %r1.global-to-local, align 4
  %v1_c674 = add i32 %v0_c674, 13
  %v2_c674 = inttoptr i32 %v1_c674 to i8*
  %v3_c674 = load i8, i8* %v2_c674, align 1
  %v4_c674 = zext i8 %v3_c674 to i32
  store i32 %v1_c560, i32* %r3.global-to-local, align 4
  %v1_c67c = and i32 %v4_c674, 247
  %v5_c680 = or i32 %v1_c67c, %v4_c680
  store i32 %v5_c680, i32* %r2.global-to-local, align 4
  %v1_c684 = trunc i32 %v5_c680 to i8
  store i8 %v1_c684, i8* %v2_c674, align 1
  %v0_c688 = load i32, i32* %r1.global-to-local, align 4
  %v1_c688 = add i32 %v0_c688, 13
  %v2_c688 = inttoptr i32 %v1_c688 to i8*
  %v3_c688 = load i8, i8* %v2_c688, align 1
  %v4_c688 = zext i8 %v3_c688 to i32
  store i32 %v1_c564, i32* %r0.global-to-local, align 4
  %v1_c690 = and i32 %v4_c688, 251
  %v5_c694 = or i32 %v1_c690, %v4_c694
  store i32 %v5_c694, i32* %r3.global-to-local, align 4
  %v1_c698 = trunc i32 %v5_c694 to i8
  store i8 %v1_c698, i8* %v2_c688, align 1
  %v0_c69c = load i32, i32* %r1.global-to-local, align 4
  %v1_c69c = add i32 %v0_c69c, 13
  %v2_c69c = inttoptr i32 %v1_c69c to i8*
  %v3_c69c = load i8, i8* %v2_c69c, align 1
  %v4_c69c = zext i8 %v3_c69c to i32
  store i32 %v1_c568, i32* %r3.global-to-local, align 4
  %v1_c6a4 = and i32 %v4_c69c, 253
  %v4_c6a8 = or i32 %v1_c6a4, %v3_c6a8
  store i32 %v4_c6a8, i32* %r2.global-to-local, align 4
  %v1_c6ac = trunc i32 %v4_c6a8 to i8
  store i8 %v1_c6ac, i8* %v2_c69c, align 1
  %v0_c6b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c6b0 = add i32 %v0_c6b0, 13
  %v2_c6b0 = inttoptr i32 %v1_c6b0 to i8*
  %v3_c6b0 = load i8, i8* %v2_c6b0, align 1
  %v4_c6b0 = zext i8 %v3_c6b0 to i32
  store i32 %v1_c56c, i32* %r0.global-to-local, align 4
  %v1_c6b8 = and i32 %v4_c6b0, 254
  %v2_c6bc = or i32 %v1_c6b8, %v1_c56c
  store i32 %v2_c6bc, i32* %r3.global-to-local, align 4
  store i32 2, i32* @r5, align 4
  store i32 4, i32* @r6, align 4
  %v1_c6c8 = trunc i32 %v2_c6bc to i8
  store i8 %v1_c6c8, i8* %v2_c6b0, align 1
  %v0_c6cc = load i32, i32* @r5, align 4
  %v1_c6cc = trunc i32 %v0_c6cc to i8
  %v2_c6cc = load i32, i32* %r4.global-to-local, align 4
  %v3_c6cc = add i32 %v2_c6cc, 40
  %v4_c6cc = inttoptr i32 %v3_c6cc to i8*
  store i8 %v1_c6cc, i8* %v4_c6cc, align 1
  %v0_c6d0 = load i32, i32* @r6, align 4
  %v1_c6d0 = trunc i32 %v0_c6d0 to i8
  %v2_c6d0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6d0 = add i32 %v2_c6d0, 41
  %v4_c6d0 = inttoptr i32 %v3_c6d0 to i8*
  store i8 %v1_c6d0, i8* %v4_c6d0, align 1
  %v0_c6d4 = call i32 @function_f18c()
  %v1_c6d8 = urem i32 %v0_c6d4, 16
  %v1_c6dc = or i32 %v1_c6d8, 1392
  %v1_c6e0 = add nuw nsw i32 %v1_c6dc, 8
  %v3_c6e4 = mul nuw nsw i32 %v1_c6e0, 65536
  store i32 %v3_c6e4, i32* %r0.global-to-local, align 4
  %v3_c6e8 = mul nuw nsw i32 %v1_c6e0, 256
  %v5_c6f0 = or i32 %v3_c6e8, 5
  %v1_c6f4 = trunc i32 %v5_c6f0 to i16
  %v2_c6f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6f4 = add i32 %v2_c6f4, 42
  %v4_c6f4 = inttoptr i32 %v3_c6f4 to i16*
  store i16 %v1_c6f4, i16* %v4_c6f4, align 2
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_c700 = load i32, i32* %r4.global-to-local, align 4
  %v3_c700 = add i32 %v2_c700, 46
  %v4_c700 = inttoptr i32 %v3_c700 to i8*
  store i8 8, i8* %v4_c700, align 1
  %v0_c704 = load i32, i32* %r2.global-to-local, align 4
  %v1_c704 = trunc i32 %v0_c704 to i8
  %v2_c704 = load i32, i32* %r4.global-to-local, align 4
  %v3_c704 = add i32 %v2_c704, 47
  %v4_c704 = inttoptr i32 %v3_c704 to i8*
  store i8 %v1_c704, i8* %v4_c704, align 1
  %v0_c708 = load i32, i32* @r6, align 4
  %v1_c708 = trunc i32 %v0_c708 to i8
  %v2_c708 = load i32, i32* %r4.global-to-local, align 4
  %v3_c708 = add i32 %v2_c708, 44
  %v4_c708 = inttoptr i32 %v3_c708 to i8*
  store i8 %v1_c708, i8* %v4_c708, align 1
  %v0_c70c = load i32, i32* @r5, align 4
  %v1_c70c = trunc i32 %v0_c70c to i8
  %v2_c70c = load i32, i32* %r4.global-to-local, align 4
  %v3_c70c = add i32 %v2_c70c, 45
  %v4_c70c = inttoptr i32 %v3_c70c to i8*
  store i8 %v1_c70c, i8* %v4_c70c, align 1
  %v0_c710 = call i32 @function_f18c()
  store i32 %v0_c710, i32* %r0.global-to-local, align 4
  %v2_c718 = load i32, i32* %r4.global-to-local, align 4
  %v3_c718 = add i32 %v2_c718, 59
  %v4_c718 = inttoptr i32 %v3_c718 to i8*
  store i8 6, i8* %v4_c718, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_c728 = load i32, i32* %r4.global-to-local, align 4
  %v2_c728 = add i32 %v1_c728, 48
  %v3_c728 = inttoptr i32 %v2_c728 to i32*
  store i32 %v0_c710, i32* %v3_c728, align 4
  %v0_c72c = load i32, i32* %r3.global-to-local, align 4
  %v1_c72c = load i32, i32* %r4.global-to-local, align 4
  %v2_c72c = add i32 %v1_c72c, 52
  %v3_c72c = inttoptr i32 %v2_c72c to i32*
  store i32 %v0_c72c, i32* %v3_c72c, align 4
  %v0_c730 = load i32, i32* %r2.global-to-local, align 4
  %v1_c730 = trunc i32 %v0_c730 to i8
  %v2_c730 = load i32, i32* %r4.global-to-local, align 4
  %v3_c730 = add i32 %v2_c730, 56
  %v4_c730 = inttoptr i32 %v3_c730 to i8*
  store i8 %v1_c730, i8* %v4_c730, align 1
  %v0_c734 = load i32, i32* %r1.global-to-local, align 4
  %v1_c734 = trunc i32 %v0_c734 to i8
  %v2_c734 = load i32, i32* %r4.global-to-local, align 4
  %v3_c734 = add i32 %v2_c734, 58
  %v4_c734 = inttoptr i32 %v3_c734 to i8*
  store i8 %v1_c734, i8* %v4_c734, align 1
  %v0_c738 = load i32, i32* %r1.global-to-local, align 4
  %v1_c738 = trunc i32 %v0_c738 to i8
  %v2_c738 = load i32, i32* %r4.global-to-local, align 4
  %v3_c738 = add i32 %v2_c738, 57
  %v4_c738 = inttoptr i32 %v3_c738 to i8*
  store i8 %v1_c738, i8* %v4_c738, align 1
  %v3_c73c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c73c, i32* %r3.global-to-local, align 4
  %v1_c740 = load i32, i32* %r2.global-to-local, align 4
  %v2_c740 = add i32 %v1_c740, %v3_c73c
  store i32 %v2_c740, i32* @r4, align 4
  %v1_c744 = load i32, i32* @sb, align 4
  %v9_c744 = icmp eq i32 %v2_c740, %v1_c744
  store i1 %v9_c744, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_c740, i32* %stack_var_-44, align 4
  %v5_c74c = icmp slt i32 %v2_c740, %v1_c744
  br i1 %v5_c74c, label %dec_label_pc_c594, label %dec_label_pc_c750.preheader

dec_label_pc_c750.preheader:                      ; preds = %.thread, %dec_label_pc_c4c0
  %v0_c75410 = phi i32 [ 0, %dec_label_pc_c4c0 ], [ %v1_c744, %.thread ]
  %v2_c76c = icmp eq i32 %v6_c464, -1
  %v7_c76c = icmp eq i32 %v6_c464, -1
  %v3_c780 = icmp eq i32 %v3_c4e0, 65535
  br label %dec_label_pc_c750

dec_label_pc_c750:                                ; preds = %dec_label_pc_c94c.dec_label_pc_c750_crit_edge, %dec_label_pc_c750.preheader
  %v0_c754 = phi i32 [ %v0_c754.pre, %dec_label_pc_c94c.dec_label_pc_c750_crit_edge ], [ %v0_c75410, %dec_label_pc_c750.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c754 = icmp eq i32 %v0_c754, 0
  store i1 %v2_c754, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c754, label %dec_label_pc_c94c, label %dec_label_pc_c760

dec_label_pc_c760:                                ; preds = %dec_label_pc_c750
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c844

dec_label_pc_c768:                                ; preds = %dec_label_pc_c844
  store i32 %v6_c464, i32* %r3.global-to-local, align 4
  store i1 %v7_c76c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c76c, label %dec_label_pc_c8c4, label %dec_label_pc_c774

dec_label_pc_c774:                                ; preds = %dec_label_pc_c864, %dec_label_pc_c768
  store i32 %v3_c4e0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c780, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c780, label %dec_label_pc_c8e0, label %dec_label_pc_c788

dec_label_pc_c788:                                ; preds = %dec_label_pc_c8c4, %dec_label_pc_c774
  %v1_c78c = phi i32 [ %v1_c8d4, %dec_label_pc_c8c4 ], [ 65535, %dec_label_pc_c774 ]
  store i32 %v3_c4e4, i32* %r1.global-to-local, align 4
  %v9_c78c = icmp eq i32 %v3_c4e4, %v1_c78c
  store i1 %v9_c78c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c78c, label %dec_label_pc_c8f4, label %dec_label_pc_c794

dec_label_pc_c794:                                ; preds = %dec_label_pc_c8e0.dec_label_pc_c794_crit_edge, %dec_label_pc_c788
  %v1_c798 = phi i32 [ %v1_c798.pre, %dec_label_pc_c8e0.dec_label_pc_c794_crit_edge ], [ %v1_c78c, %dec_label_pc_c788 ]
  store i32 %v3_c4e8, i32* %r2.global-to-local, align 4
  %v9_c798 = icmp eq i32 %v3_c4e8, %v1_c798
  store i1 %v9_c798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c798, label %dec_label_pc_c908, label %dec_label_pc_c7a0

dec_label_pc_c7a0:                                ; preds = %dec_label_pc_c8f4.dec_label_pc_c7a0_crit_edge, %dec_label_pc_c794
  %v1_c7a4 = phi i32 [ %v1_c7a4.pre, %dec_label_pc_c8f4.dec_label_pc_c7a0_crit_edge ], [ %v1_c798, %dec_label_pc_c794 ]
  store i32 %v5_c3a0, i32* %r3.global-to-local, align 4
  %v9_c7a4 = icmp eq i32 %v5_c3a0, %v1_c7a4
  store i1 %v9_c7a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c7a4, label %dec_label_pc_c91c, label %dec_label_pc_c7ac

dec_label_pc_c7ac:                                ; preds = %dec_label_pc_c908.dec_label_pc_c7ac_crit_edge, %dec_label_pc_c7a0
  %v1_c7b0 = phi i32 [ %v1_c7b0.pre, %dec_label_pc_c908.dec_label_pc_c7ac_crit_edge ], [ %v1_c7a4, %dec_label_pc_c7a0 ]
  store i32 %v6_c3b8, i32* %r0.global-to-local, align 4
  %v9_c7b0 = icmp eq i32 %v6_c3b8, %v1_c7b0
  store i1 %v9_c7b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c7b0, label %dec_label_pc_c930, label %dec_label_pc_c7b8

dec_label_pc_c7b8:                                ; preds = %dec_label_pc_c91c, %dec_label_pc_c7ac
  %v0_c7b8 = load i32, i32* @fp, align 4
  %v2_c7b8 = icmp eq i32 %v0_c7b8, 0
  store i1 %v2_c7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c7b8, label %dec_label_pc_c7c0, label %dec_label_pc_c940

dec_label_pc_c7c0:                                ; preds = %dec_label_pc_c7b8, %dec_label_pc_c930, %dec_label_pc_c940
  %v2_c7c4 = load i32, i32* @r5, align 4
  %v3_c7c4 = add i32 %v2_c7c4, 10
  %v4_c7c4 = inttoptr i32 %v3_c7c4 to i16*
  store i16 0, i16* %v4_c7c4, align 2
  %v0_c7c8 = load i32, i32* @r5, align 4
  store i32 %v0_c7c8, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_c7d0 = call i32 @function_dd58(i32 %v0_c7c8, i32 20)
  %v3_c7d0 = trunc i32 %v2_c7d0 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c7d8 = load i32, i32* @r5, align 4
  %v4_c7d8 = add i32 %v3_c7d8, 10
  %v5_c7d8 = inttoptr i32 %v4_c7d8 to i16*
  store i16 %v3_c7d0, i16* %v5_c7d8, align 2
  %v0_c7dc = load i32, i32* @r6, align 4
  store i32 %v0_c7dc, i32* @r1, align 4
  %v0_c7e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c7e0 = trunc i32 %v0_c7e0 to i16
  %v3_c7e0 = add i32 %v0_c7dc, 16
  %v4_c7e0 = inttoptr i32 %v3_c7e0 to i16*
  store i16 %v1_c7e0, i16* %v4_c7e0, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_c7ec = load i32, i32* @r5, align 4
  store i32 %v0_c7ec, i32* %r0.global-to-local, align 4
  %v4_c7f0 = call i32 @function_dda8(i32 %v0_c7ec, i32 %v0_c7dc, i32 10240, i32 40)
  %v5_c7f0 = trunc i32 %v4_c7f0 to i16
  store i32 %v4_c7f0, i32* %r0.global-to-local, align 4
  %v3_c7f4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c7f4, i32* %r3.global-to-local, align 4
  %v3_c7f8 = mul i32 %v3_c7f4, 32
  store i32 %v3_c7f8, i32* %lr.global-to-local, align 4
  %v3_c7fc = load i32, i32* @r6, align 4
  %v4_c7fc = add i32 %v3_c7fc, 16
  %v5_c7fc = inttoptr i32 %v4_c7fc to i16*
  store i16 %v5_c7f0, i16* %v5_c7fc, align 2
  %v0_c800 = load i32, i32* %lr.global-to-local, align 4
  %v1_c800 = load i32, i32* %r3.global-to-local, align 4
  %tmp70 = mul i32 %v1_c800, -8
  %v5_c800 = add i32 %v0_c800, %tmp70
  store i32 %v5_c800, i32* %lr.global-to-local, align 4
  %v0_c804 = load i32, i32* @r6, align 4
  %v1_c804 = add i32 %v0_c804, 2
  %v2_c804 = inttoptr i32 %v1_c804 to i16*
  %v3_c804 = load i16, i16* %v2_c804, align 2
  %v1_c808 = load i32, i32* @r7, align 4
  %v2_c808 = add i32 %v1_c808, %v5_c800
  store i32 %v2_c808, i32* @lr, align 4
  %v3_c80c = add i32 %v2_c808, 2
  %v4_c80c = inttoptr i32 %v3_c80c to i16*
  store i16 %v3_c804, i16* %v4_c80c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c818 = load i32, i32* @r5, align 4
  store i32 %v0_c818, i32* %r1.global-to-local, align 4
  %v0_c81c = load i32, i32* @r8, align 4
  store i32 %v0_c81c, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_c824 = load i32, i32* @lr, align 4
  %v6_c82c = call i32 @function_12c60(i32 %v0_c81c, i32 %v0_c818, i32 60, i32 16384, i32 %v0_c824, i32 16)
  %v3_c830 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c830, i32* %r3.global-to-local, align 4
  %v1_c834 = add i32 %v3_c830, 1
  store i32 %v1_c834, i32* %r0.global-to-local, align 4
  %v1_c838 = load i32, i32* @sb, align 4
  %v9_c838 = icmp eq i32 %v1_c834, %v1_c838
  store i1 %v9_c838, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c834, i32* %stack_var_-44, align 4
  %v6_c840 = icmp slt i32 %v1_c834, %v1_c838
  br i1 %v6_c840, label %dec_label_pc_c844, label %dec_label_pc_c94c

dec_label_pc_c844:                                ; preds = %dec_label_pc_c7c0, %dec_label_pc_c760
  %v1_c854 = phi i32 [ %v1_c834, %dec_label_pc_c7c0 ], [ 0, %dec_label_pc_c760 ]
  %v5_c848 = mul i32 %v1_c854, 24
  %v1_c84c = load i32, i32* @r7, align 4
  %v2_c84c = add i32 %v1_c84c, %v5_c848
  store i32 %v2_c84c, i32* %r3.global-to-local, align 4
  %v1_c850 = add i32 %v2_c84c, 20
  %v2_c850 = inttoptr i32 %v1_c850 to i8*
  %v3_c850 = load i8, i8* %v2_c850, align 1
  %v4_c850 = zext i8 %v3_c850 to i32
  store i32 %v4_c850, i32* %r2.global-to-local, align 4
  %v0_c854 = load i32, i32* @sl, align 4
  %v4_c854 = mul i32 %v1_c854, 4
  %v5_c854 = add i32 %v0_c854, %v4_c854
  %v6_c854 = inttoptr i32 %v5_c854 to i32*
  %v7_c854 = load i32, i32* %v6_c854, align 4
  store i32 %v7_c854, i32* @r5, align 4
  %v2_c858 = icmp ugt i8 %v3_c850, 30
  %v7_c858 = icmp eq i8 %v3_c850, 31
  store i1 %v7_c858, i1* %cpsr_z.global-to-local, align 1
  %v1_c85c = add i32 %v7_c854, 20
  store i32 %v1_c85c, i32* @r6, align 4
  %v2_c860 = xor i1 %v7_c858, true
  %v3_c860 = and i1 %v2_c858, %v2_c860
  br i1 %v3_c860, label %dec_label_pc_c768, label %dec_label_pc_c864

dec_label_pc_c864:                                ; preds = %dec_label_pc_c844
  %v1_c864 = add i32 %v2_c84c, 16
  %v2_c864 = inttoptr i32 %v1_c864 to i32*
  %v3_c864 = load i32, i32* %v2_c864, align 4
  store i32 %v3_c864, i32* %r4.global-to-local, align 4
  %v0_c868 = call i32 @function_f18c()
  store i32 %v0_c868, i32* %r0.global-to-local, align 4
  %v3_c86c = load i32, i32* %stack_var_-44, align 4
  %v5_c874 = mul i32 %v3_c86c, 24
  %v0_c878 = load i32, i32* %r4.global-to-local, align 4
  %v1_c878 = and i32 %v0_c878, 16711680
  %v3_c87c = udiv i32 %v0_c878, 16777216
  %v4_c880 = udiv i32 %v1_c878, 256
  %v5_c880 = or i32 %v4_c880, %v3_c87c
  store i32 %v5_c880, i32* %r2.global-to-local, align 4
  %v1_c884 = load i32, i32* @r7, align 4
  %v2_c884 = add i32 %v1_c884, %v5_c874
  store i32 %v2_c884, i32* %r1.global-to-local, align 4
  %v1_c888 = and i32 %v0_c878, 65280
  store i32 %v1_c888, i32* %r3.global-to-local, align 4
  %v1_c88c = add i32 %v2_c884, 20
  %v2_c88c = inttoptr i32 %v1_c88c to i8*
  %v3_c88c = load i8, i8* %v2_c88c, align 1
  %v4_c88c = zext i8 %v3_c88c to i32
  %v5_c894 = call i32 @llvm.bswap.i32(i32 %v0_c878)
  %v7_c898 = lshr i32 %v0_c868, %v4_c88c
  %v8_c898 = add i32 %v7_c898, %v5_c894
  store i32 %v8_c898, i32* %r2.global-to-local, align 4
  %v1_c89c = and i32 %v8_c898, 16711680
  store i32 %v1_c89c, i32* %r0.global-to-local, align 4
  %v1_c8a8 = and i32 %v8_c898, 65280
  store i32 %v1_c8a8, i32* %r1.global-to-local, align 4
  %v5_c8b0 = call i32 @llvm.bswap.i32(i32 %v8_c898)
  %v1_c8b4 = load i32, i32* @r5, align 4
  %v2_c8b4 = add i32 %v1_c8b4, 16
  %v3_c8b4 = inttoptr i32 %v2_c8b4 to i32*
  store i32 %v5_c8b0, i32* %v3_c8b4, align 4
  store i32 %v6_c464, i32* %r3.global-to-local, align 4
  store i1 %v7_c76c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c76c, label %dec_label_pc_c8c4, label %dec_label_pc_c774

dec_label_pc_c8c4:                                ; preds = %dec_label_pc_c864, %dec_label_pc_c768
  %v0_c8c4 = call i32 @function_f18c()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_c8cc = load i32, i32* @r5, align 4
  %v2_c8cc = add i32 %v1_c8cc, 12
  %v3_c8cc = inttoptr i32 %v2_c8cc to i32*
  store i32 %v0_c8c4, i32* %v3_c8cc, align 4
  store i32 %v3_c4e0, i32* %r0.global-to-local, align 4
  %v0_c8d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_c8d4 = add i32 %v0_c8d4, -1
  store i32 %v1_c8d4, i32* @r4, align 4
  %v9_c8d8 = icmp eq i32 %v3_c4e0, %v1_c8d4
  store i1 %v9_c8d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c8d8, label %dec_label_pc_c8e0, label %dec_label_pc_c788

dec_label_pc_c8e0:                                ; preds = %dec_label_pc_c8c4, %dec_label_pc_c774
  %v0_c8e0 = call i32 @function_f18c()
  %v1_c8e0 = trunc i32 %v0_c8e0 to i16
  store i32 %v0_c8e0, i32* %r0.global-to-local, align 4
  store i32 %v3_c4e4, i32* %r1.global-to-local, align 4
  %v1_c8e8 = load i32, i32* @r4, align 4
  %v9_c8e8 = icmp eq i32 %v3_c4e4, %v1_c8e8
  store i1 %v9_c8e8, i1* %cpsr_z.global-to-local, align 1
  %v3_c8ec = load i32, i32* @r5, align 4
  %v4_c8ec = add i32 %v3_c8ec, 4
  %v5_c8ec = inttoptr i32 %v4_c8ec to i16*
  store i16 %v1_c8e0, i16* %v5_c8ec, align 2
  br i1 %v9_c8e8, label %dec_label_pc_c8f4, label %dec_label_pc_c8e0.dec_label_pc_c794_crit_edge

dec_label_pc_c8e0.dec_label_pc_c794_crit_edge:    ; preds = %dec_label_pc_c8e0
  %v1_c798.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c794

dec_label_pc_c8f4:                                ; preds = %dec_label_pc_c8e0, %dec_label_pc_c788
  %v0_c8f4 = call i32 @function_f18c()
  %v1_c8f4 = trunc i32 %v0_c8f4 to i16
  store i32 %v0_c8f4, i32* %r0.global-to-local, align 4
  store i32 %v3_c4e8, i32* %r2.global-to-local, align 4
  %v1_c8fc = load i32, i32* @r4, align 4
  %v9_c8fc = icmp eq i32 %v3_c4e8, %v1_c8fc
  store i1 %v9_c8fc, i1* %cpsr_z.global-to-local, align 1
  %v3_c900 = load i32, i32* @r5, align 4
  %v4_c900 = add i32 %v3_c900, 20
  %v5_c900 = inttoptr i32 %v4_c900 to i16*
  store i16 %v1_c8f4, i16* %v5_c900, align 2
  br i1 %v9_c8fc, label %dec_label_pc_c908, label %dec_label_pc_c8f4.dec_label_pc_c7a0_crit_edge

dec_label_pc_c8f4.dec_label_pc_c7a0_crit_edge:    ; preds = %dec_label_pc_c8f4
  %v1_c7a4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c7a0

dec_label_pc_c908:                                ; preds = %dec_label_pc_c8f4, %dec_label_pc_c794
  %v0_c908 = call i32 @function_f18c()
  %v1_c908 = trunc i32 %v0_c908 to i16
  store i32 %v0_c908, i32* %r0.global-to-local, align 4
  store i32 %v5_c3a0, i32* %r3.global-to-local, align 4
  %v1_c910 = load i32, i32* @r4, align 4
  %v9_c910 = icmp eq i32 %v5_c3a0, %v1_c910
  store i1 %v9_c910, i1* %cpsr_z.global-to-local, align 1
  %v3_c914 = load i32, i32* @r6, align 4
  %v4_c914 = add i32 %v3_c914, 2
  %v5_c914 = inttoptr i32 %v4_c914 to i16*
  store i16 %v1_c908, i16* %v5_c914, align 2
  br i1 %v9_c910, label %dec_label_pc_c91c, label %dec_label_pc_c908.dec_label_pc_c7ac_crit_edge

dec_label_pc_c908.dec_label_pc_c7ac_crit_edge:    ; preds = %dec_label_pc_c908
  %v1_c7b0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c7ac

dec_label_pc_c91c:                                ; preds = %dec_label_pc_c908, %dec_label_pc_c7a0
  %v0_c91c = call i32 @function_f18c()
  %v1_c920 = load i32, i32* @r6, align 4
  %v2_c920 = add i32 %v1_c920, 4
  %v3_c920 = inttoptr i32 %v2_c920 to i32*
  store i32 %v0_c91c, i32* %v3_c920, align 4
  store i32 %v6_c3b8, i32* %r0.global-to-local, align 4
  %v1_c928 = load i32, i32* @r4, align 4
  %v9_c928 = icmp eq i32 %v6_c3b8, %v1_c928
  store i1 %v9_c928, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c928, label %dec_label_pc_c930, label %dec_label_pc_c7b8

dec_label_pc_c930:                                ; preds = %dec_label_pc_c91c, %dec_label_pc_c7ac
  %v0_c930 = call i32 @function_f18c()
  store i32 %v0_c930, i32* %r0.global-to-local, align 4
  %v0_c934 = load i32, i32* @fp, align 4
  %v2_c934 = icmp eq i32 %v0_c934, 0
  store i1 %v2_c934, i1* %cpsr_z.global-to-local, align 1
  %v1_c938 = load i32, i32* @r6, align 4
  %v2_c938 = add i32 %v1_c938, 8
  %v3_c938 = inttoptr i32 %v2_c938 to i32*
  store i32 %v0_c930, i32* %v3_c938, align 4
  br i1 %v2_c934, label %dec_label_pc_c7c0, label %dec_label_pc_c940

dec_label_pc_c940:                                ; preds = %dec_label_pc_c7b8, %dec_label_pc_c930
  %v0_c940 = call i32 @function_f18c()
  %v1_c940 = trunc i32 %v0_c940 to i16
  store i32 %v0_c940, i32* %r0.global-to-local, align 4
  %v3_c944 = load i32, i32* @r6, align 4
  %v4_c944 = add i32 %v3_c944, 18
  %v5_c944 = inttoptr i32 %v4_c944 to i16*
  store i16 %v1_c940, i16* %v5_c944, align 2
  br label %dec_label_pc_c7c0

dec_label_pc_c94c:                                ; preds = %dec_label_pc_c7c0, %dec_label_pc_c750
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_c950 = call i32 @function_12150(i32* null)
  store i32 %v2_c950, i32* %r0.global-to-local, align 4
  store i32 %v2_c474, i32* %r3.global-to-local, align 4
  %v9_c958 = icmp eq i32 %v2_c474, %v2_c950
  store i1 %v9_c958, i1* %cpsr_z.global-to-local, align 1
  %v6_c95c = icmp slt i32 %v2_c474, %v2_c950
  br i1 %v6_c95c, label %dec_label_pc_c960, label %dec_label_pc_c94c.dec_label_pc_c750_crit_edge

dec_label_pc_c94c.dec_label_pc_c750_crit_edge:    ; preds = %dec_label_pc_c94c
  %v0_c754.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_c750

dec_label_pc_c960:                                ; preds = %dec_label_pc_c94c, %dec_label_pc_c2a4, %dec_label_pc_c96c
  %v1_c968 = phi i32 [ %v3_c488, %dec_label_pc_c2a4 ], [ %v1_c970, %dec_label_pc_c96c ], [ %v2_c950, %dec_label_pc_c94c ]
  store i32 %v3_c2a4, i32* %r4.global-to-local, align 4
  store i32 %v24_c2a4, i32* %fp.global-to-local, align 4
  store i32 %v27_c2a4, i32* %lr.global-to-local, align 4
  ret i32 %v1_c968

dec_label_pc_c96c:                                ; preds = %dec_label_pc_c498
  %v0_c96c = load i32, i32* @r8, align 4
  store i32 %v0_c96c, i32* %r0.global-to-local, align 4
  %v1_c970 = call i32 @function_124d0(i32 %v0_c96c)
  store i32 %v1_c970, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c960

; uselistorder directives
  uselistorder i32 %v1_c970, { 1, 0 }
  uselistorder i32 %v0_c940, { 1, 0 }
  uselistorder i32 %v0_c908, { 1, 0 }
  uselistorder i32 %v0_c8f4, { 1, 0 }
  uselistorder i32 %v0_c8e0, { 1, 0 }
  uselistorder i32 %v1_c8d4, { 1, 2, 0 }
  uselistorder i32 %v0_c878, { 1, 2, 0, 3 }
  uselistorder i32 %v1_c834, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_c800, { 1, 0 }
  uselistorder i32 %v4_c7f0, { 1, 0 }
  uselistorder i1 %v3_c780, { 1, 0 }
  uselistorder i1 %v7_c76c, { 2, 1, 0 }
  uselistorder i32 %v2_c740, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c5a8, { 1, 2, 0 }
  uselistorder i32 %v1_c56c, { 2, 1, 0 }
  uselistorder i32 %v1_c568, { 2, 0, 1 }
  uselistorder i32 %v1_c564, { 2, 0, 1 }
  uselistorder i32 %v1_c560, { 2, 0, 1 }
  uselistorder i32 %v1_c55c, { 2, 0, 1 }
  uselistorder i32 %v3_c4e4, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v3_c4e0, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_c4d4, { 1, 0, 2 }
  uselistorder i1 %v7_c4b8, { 1, 0 }
  uselistorder i1 %v7_c48c, { 1, 0 }
  uselistorder i32 %v3_c488, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_c474, { 2, 1, 0 }
  uselistorder i32 %v6_c464, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v6_c3b8, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c3a0, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_c324, { 1, 0 }
  uselistorder i32 %v7_c30c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 27, 20, 21, 22, 23, 24, 25, 26, 31, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 26, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 18, 17, 20, 19, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 5, 4, 7, 8, 6, 9, 11, 12, 10, 13, 34, 33, 35, 1, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 52, 53, 54, 56, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 17, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 8 }
  uselistorder i32 57, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 58, { 3, 4, 5, 6, 0, 7, 1, 8, 2, 9 }
  uselistorder i32 45, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 46, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 42, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 247, { 1, 2, 0 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_c960, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c940, { 1, 0 }
  uselistorder label %dec_label_pc_c7c0, { 2, 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c97c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_c97c:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  store i32 %arg2, i32* @fp, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* %stack_var_-80, align 4
  %v2_c9a0 = call i32 @function_1384c(i32 %arg2, i32 4)
  %v0_c9ac = load i32, i32* @fp, align 4
  store i32 %v0_c9ac, i32* %r0.global-to-local, align 4
  %v2_c9b0 = call i32 @function_1384c(i32 %v0_c9ac, i32 4)
  store i32 65535, i32* @r6, align 4
  %v0_c9bc = load i32, i32* @r5, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_c9b0, i32* @sb, align 4
  %v0_c9cc = load i32, i32* @r4, align 4
  store i32 %v0_c9cc, i32* %r0.global-to-local, align 4
  %v4_c9d0 = inttoptr i32 %v0_c9bc to i32*
  %v5_c9d0 = call i32 @function_8258(i32 %v0_c9cc, i32* %v4_c9d0, i32 7, i32 65535)
  %v0_c9d4 = load i32, i32* @r5, align 4
  %v0_c9e0 = load i32, i32* @r6, align 4
  store i32 %v0_c9e0, i32* %r3.global-to-local, align 4
  %v0_c9e4 = load i32, i32* @r4, align 4
  store i32 %v0_c9e4, i32* %r0.global-to-local, align 4
  %v3_c9e8 = urem i32 %v5_c9d0, 65536
  store i32 %v3_c9e8, i32* @r8, align 4
  %v4_c9ec = inttoptr i32 %v0_c9d4 to i32*
  %v5_c9ec = call i32 @function_8258(i32 %v0_c9e4, i32* %v4_c9ec, i32 6, i32 %v0_c9e0)
  %v0_c9f0 = load i32, i32* @r5, align 4
  %v3_c9f4 = mul i32 %v5_c9ec, 65536
  store i32 %v3_c9f4, i32* @sl, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_ca00 = load i32, i32* @r4, align 4
  store i32 %v0_ca00, i32* %r0.global-to-local, align 4
  %v4_ca04 = inttoptr i32 %v0_c9f0 to i32*
  %v5_ca04 = call i32 @function_8258(i32 %v0_ca00, i32* %v4_ca04, i32 0, i32 512)
  store i32 1, i32* %r3.global-to-local, align 4
  %v3_ca14 = urem i32 %v5_ca04, 65536
  %v0_ca18 = load i32, i32* @r5, align 4
  %v0_ca1c = load i32, i32* @r4, align 4
  store i32 %v0_ca1c, i32* %r0.global-to-local, align 4
  %v4_ca24 = inttoptr i32 %v0_ca18 to i32*
  %v5_ca24 = call i32 @function_8258(i32 %v0_ca1c, i32* %v4_ca24, i32 1, i32 1)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ca30 = urem i32 %v5_ca24, 256
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v2_ca4c = call i32 @function_12150(i32* null)
  store i32 %v2_ca4c, i32* %r0.global-to-local, align 4
  %v0_ca50 = load i32, i32* @sl, align 4
  %v3_ca50 = udiv i32 %v0_ca50, 65536
  %v1_ca54 = load i32, i32* @r6, align 4
  %v9_ca54 = icmp eq i32 %v3_ca50, %v1_ca54
  br i1 %v9_ca54, label %dec_label_pc_cc28, label %bb

bb:                                               ; preds = %dec_label_pc_c97c
  %v4_ca5c = udiv i32 %v0_ca50, 16777216
  store i32 %v4_ca5c, i32* %r3.global-to-local, align 4
  %v1_ca60 = load i32, i32* @r7, align 4
  %v2_ca60 = add i32 %v1_ca60, %v2_ca4c
  store i32 %v2_ca60, i32* %r0.global-to-local, align 4
  %v2_ca58 = mul nuw nsw i32 %v3_ca50, 256
  %v6_ca64 = or i32 %v2_ca58, %v4_ca5c
  %extract.t58 = trunc i32 %v6_ca64 to i16
  br label %dec_label_pc_ca74

dec_label_pc_ca74:                                ; preds = %bb, %dec_label_pc_cc28
  %v6_ca64.sink.off0 = phi i16 [ %extract.t58, %bb ], [ %extract.t59, %dec_label_pc_cc28 ]
  %v0_ca6810 = phi i32 [ %v2_ca60, %bb ], [ %v2_ca6013, %dec_label_pc_cc28 ]
  %v0_ca74 = load i32, i32* @fp, align 4
  %v2_ca74 = icmp eq i32 %v0_ca74, 0
  br i1 %v2_ca74, label %dec_label_pc_cbac, label %dec_label_pc_ca7c

dec_label_pc_ca7c:                                ; preds = %dec_label_pc_ca74
  store i32 0, i32* @sl, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  %v2_caa8 = ptrtoint i32* %stack_var_-56 to i32
  %v4_cac8 = sext i16 %v6_ca64.sink.off0 to i32
  br label %dec_label_pc_cafc

dec_label_pc_ca8c:                                ; preds = %.thread26, %dec_label_pc_cb38
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_ca98 = call i32 @function_12ce4(i32 2, i32 2, i32 17)
  store i32 %v3_ca98, i32* %r0.global-to-local, align 4
  %v7_ca9c = icmp eq i32 %v3_ca98, -1
  %v0_caa0 = load i32, i32* @sl, align 4
  %v1_caa0 = add i32 %v0_caa0, 1
  store i32 %v1_caa0, i32* @sl, align 4
  %v0_caa4 = load i32, i32* @r7, align 4
  %v1_caa4 = add i32 %v0_caa4, 24
  store i32 %v1_caa4, i32* @r7, align 4
  %v1_cab0 = load i32, i32* @r6, align 4
  %v2_cab0 = load i32, i32* @sb, align 4
  %v3_cab0 = add i32 %v2_cab0, %v1_cab0
  %v4_cab0 = inttoptr i32 %v3_cab0 to i32*
  store i32 %v3_ca98, i32* %v4_cab0, align 4
  br i1 %v7_ca9c, label %dec_label_pc_cbd0.loopexit14, label %dec_label_pc_cab8

dec_label_pc_cab8:                                ; preds = %dec_label_pc_ca8c
  store i32 2, i32* %stack_var_-56, align 4
  store i32 %v4_cac8, i32* %r3.global-to-local, align 4
  %v0_cad0 = load i32, i32* %r0.global-to-local, align 4
  %v3_cad0 = call i32 @function_12a94(i32 %v0_cad0, i32 %v2_caa8, i32 16)
  store i32 %v3_cad0, i32* %r0.global-to-local, align 4
  %v0_cad4 = load i32, i32* @r5, align 4
  %v1_cad4 = add i32 %v0_cad4, 20
  %v2_cad4 = inttoptr i32 %v1_cad4 to i8*
  %v3_cad4 = load i8, i8* %v2_cad4, align 1
  %v4_cad4 = zext i8 %v3_cad4 to i32
  store i32 %v4_cad4, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_cad4, 32
  br i1 %tmp, label %dec_label_pc_cb4c, label %dec_label_pc_cae0

dec_label_pc_cae0:                                ; preds = %dec_label_pc_cab8
  %v0_cae0 = load i32, i32* @r6, align 4
  %v1_cae0 = load i32, i32* @sb, align 4
  %v2_cae0 = add i32 %v1_cae0, %v0_cae0
  %v3_cae0 = inttoptr i32 %v2_cae0 to i32*
  %v4_cae0 = load i32, i32* %v3_cae0, align 4
  store i32 %v4_cae0, i32* %r0.global-to-local, align 4
  %v3_caec = call i32 @function_12acc(i32 %v4_cae0, i32 %v0_cad4, i32 16)
  store i32 %v3_caec, i32* %r0.global-to-local, align 4
  %v0_caf0 = load i32, i32* @sl, align 4
  %v1_caf0 = load i32, i32* @fp, align 4
  %v9_caf0 = icmp eq i32 %v0_caf0, %v1_caf0
  %v0_caf4 = load i32, i32* @r6, align 4
  %v1_caf4 = add i32 %v0_caf4, 4
  store i32 %v1_caf4, i32* @r6, align 4
  br i1 %v9_caf0, label %dec_label_pc_cbac, label %dec_label_pc_cafc

dec_label_pc_cafc:                                ; preds = %dec_label_pc_cb4c, %dec_label_pc_cae0, %dec_label_pc_ca7c
  store i32 65535, i32* @r4, align 4
  store i32 65535, i32* %r0.global-to-local, align 4
  %v2_cb0c = call i32 @function_1384c(i32 65535, i32 1)
  store i32 %v2_cb0c, i32* %r0.global-to-local, align 4
  %v0_cb10 = load i32, i32* @r8, align 4
  %v3_cb14 = udiv i32 %v0_cb10, 256
  %v1_cb10 = mul i32 %v0_cb10, 256
  %v4_cb18 = and i32 %v1_cb10, 65280
  %v5_cb18 = or i32 %v4_cb18, %v3_cb14
  store i32 %v5_cb18, i32* %r3.global-to-local, align 4
  %v2_cb1c = load i32, i32* %stack_var_-80, align 4
  %v1_cb20 = load i32, i32* @r7, align 4
  %v2_cb20 = add i32 %v1_cb20, %v2_cb1c
  store i32 %v2_cb20, i32* @r5, align 4
  %v1_cb28 = load i32, i32* @r4, align 4
  %v9_cb28 = icmp eq i32 %v0_cb10, %v1_cb28
  %v1_cb2c = load i32, i32* @r6, align 4
  %v3_cb2c = add i32 %v1_cb2c, %v2_c9a0
  %v4_cb2c = inttoptr i32 %v3_cb2c to i32*
  store i32 %v2_cb0c, i32* %v4_cb2c, align 4
  br i1 %v9_cb28, label %dec_label_pc_cb38, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_cafc
  %v1_cb3027 = load i32, i32* %r3.global-to-local, align 4
  %v2_cb3028 = trunc i32 %v1_cb3027 to i16
  %v3_cb3029 = load i32, i32* @r5, align 4
  %v4_cb3030 = add i32 %v3_cb3029, 2
  %v5_cb3031 = inttoptr i32 %v4_cb3030 to i16*
  store i16 %v2_cb3028, i16* %v5_cb3031, align 2
  br label %dec_label_pc_ca8c

dec_label_pc_cb38:                                ; preds = %dec_label_pc_cafc
  %v0_cb38 = call i32 @function_f18c()
  %v1_cb38 = trunc i32 %v0_cb38 to i16
  store i32 %v0_cb38, i32* %r0.global-to-local, align 4
  %v2_cb3c = load i32, i32* %stack_var_-80, align 4
  store i32 %v2_cb3c, i32* %r3.global-to-local, align 4
  %v1_cb40 = load i32, i32* @r7, align 4
  %v2_cb40 = add i32 %v1_cb40, %v2_cb3c
  store i32 %v2_cb40, i32* @r5, align 4
  %v4_cb44 = add i32 %v2_cb40, 2
  %v5_cb44 = inttoptr i32 %v4_cb44 to i16*
  store i16 %v1_cb38, i16* %v5_cb44, align 2
  br label %dec_label_pc_ca8c

dec_label_pc_cb4c:                                ; preds = %dec_label_pc_cab8
  %v1_cb4c = add i32 %v0_cad4, 16
  %v2_cb4c = inttoptr i32 %v1_cb4c to i32*
  %v3_cb4c = load i32, i32* %v2_cb4c, align 4
  store i32 %v3_cb4c, i32* @r4, align 4
  %v0_cb50 = call i32 @function_f18c()
  store i32 %v0_cb50, i32* %r0.global-to-local, align 4
  %v0_cb54 = load i32, i32* @r4, align 4
  %v1_cb60 = and i32 %v0_cb54, 65280
  store i32 %v1_cb60, i32* %r3.global-to-local, align 4
  %v0_cb64 = load i32, i32* @r5, align 4
  %v1_cb64 = add i32 %v0_cb64, 20
  %v2_cb64 = inttoptr i32 %v1_cb64 to i8*
  %v3_cb64 = load i8, i8* %v2_cb64, align 1
  %v4_cb64 = zext i8 %v3_cb64 to i32
  %v5_cb6c = call i32 @llvm.bswap.i32(i32 %v0_cb54)
  %v7_cb70 = lshr i32 %v0_cb50, %v4_cb64
  %v8_cb70 = add i32 %v7_cb70, %v5_cb6c
  %v1_cb74 = and i32 %v8_cb70, 16711680
  store i32 %v1_cb74, i32* %r0.global-to-local, align 4
  %v5_cb88 = call i32 @llvm.bswap.i32(i32 %v8_cb70)
  store i32 %v5_cb88, i32* %r3.global-to-local, align 4
  %v2_cb8c = add i32 %v0_cb64, 4
  %v3_cb8c = inttoptr i32 %v2_cb8c to i32*
  store i32 %v5_cb88, i32* %v3_cb8c, align 4
  %v0_cb90 = load i32, i32* @r5, align 4
  %v0_cb94 = load i32, i32* @r6, align 4
  %v1_cb94 = load i32, i32* @sb, align 4
  %v2_cb94 = add i32 %v1_cb94, %v0_cb94
  %v3_cb94 = inttoptr i32 %v2_cb94 to i32*
  %v4_cb94 = load i32, i32* %v3_cb94, align 4
  store i32 %v4_cb94, i32* %r0.global-to-local, align 4
  %v3_cb9c = call i32 @function_12acc(i32 %v4_cb94, i32 %v0_cb90, i32 16)
  store i32 %v3_cb9c, i32* %r0.global-to-local, align 4
  %v0_cba0 = load i32, i32* @sl, align 4
  %v1_cba0 = load i32, i32* @fp, align 4
  %v9_cba0 = icmp eq i32 %v0_cba0, %v1_cba0
  %v0_cba4 = load i32, i32* @r6, align 4
  %v1_cba4 = add i32 %v0_cba4, 4
  store i32 %v1_cba4, i32* @r6, align 4
  br i1 %v9_cba0, label %dec_label_pc_cbac, label %dec_label_pc_cafc

dec_label_pc_cbac:                                ; preds = %dec_label_pc_cb4c, %dec_label_pc_cae0, %dec_label_pc_ca74
  %v1_cbb021 = phi i32 [ 0, %dec_label_pc_ca74 ], [ %v0_cba0, %dec_label_pc_cb4c ], [ %v0_caf0, %dec_label_pc_cae0 ]
  store i32 0, i32* @r5, align 4
  %v2_cbe4 = icmp eq i32 %v1_ca30, 0
  br label %dec_label_pc_cbb0

dec_label_pc_cbb0:                                ; preds = %dec_label_pc_cbb0.backedge, %dec_label_pc_cbac
  %v1_cbb0 = phi i32 [ %v1_cbb0.pre, %dec_label_pc_cbb0.backedge ], [ %v1_cbb021, %dec_label_pc_cbac ]
  %v1_cbe8 = phi i32 [ %v0_cbb019, %dec_label_pc_cbb0.backedge ], [ 0, %dec_label_pc_cbac ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v5_cbb8 = icmp slt i32 %v1_cbe8, %v1_cbb0
  br i1 %v5_cbb8, label %dec_label_pc_cbdc, label %dec_label_pc_cbbc

dec_label_pc_cbbc:                                ; preds = %dec_label_pc_cbb0
  %v2_cbbc = call i32 @function_12150(i32* null)
  store i32 %v2_cbbc, i32* %r0.global-to-local, align 4
  store i32 %v0_ca6810, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v6_cbcc = icmp slt i32 %v0_ca6810, %v2_cbbc
  br i1 %v6_cbcc, label %dec_label_pc_cbd0, label %dec_label_pc_cbb0.backedge

dec_label_pc_cbd0.loopexit14:                     ; preds = %dec_label_pc_ca8c
  %v1_cbd8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cbd0

dec_label_pc_cbd0:                                ; preds = %dec_label_pc_cbbc, %dec_label_pc_cbd0.loopexit14
  %v1_cbd8 = phi i32 [ %v1_cbd8.pre, %dec_label_pc_cbd0.loopexit14 ], [ %v2_cbbc, %dec_label_pc_cbbc ]
  ret i32 %v1_cbd8

dec_label_pc_cbdc:                                ; preds = %dec_label_pc_cbb0
  store i32 %v2_c9a0, i32* %r3.global-to-local, align 4
  %v4_cbe8 = mul i32 %v1_cbe8, 4
  %v5_cbe8 = add i32 %v4_cbe8, %v2_c9a0
  %v6_cbe8 = inttoptr i32 %v5_cbe8 to i32*
  %v7_cbe8 = load i32, i32* %v6_cbe8, align 4
  store i32 %v7_cbe8, i32* @r4, align 4
  br i1 %v2_cbe4, label %dec_label_pc_cbf0, label %dec_label_pc_cc0c

dec_label_pc_cbf0:                                ; preds = %dec_label_pc_cbdc, %dec_label_pc_cc0c
  %v0_cbf4 = phi i32 [ %v7_cbe8, %dec_label_pc_cbdc ], [ %v0_cbf4.pre, %dec_label_pc_cc0c ]
  %v1_cbf0 = phi i32 [ %v1_cbe8, %dec_label_pc_cbdc ], [ %v1_cbf0.pre, %dec_label_pc_cc0c ]
  %v0_cbf0 = load i32, i32* @sb, align 4
  %v4_cbf0 = mul i32 %v1_cbf0, 4
  %v5_cbf0 = add i32 %v4_cbf0, %v0_cbf0
  %v6_cbf0 = inttoptr i32 %v5_cbf0 to i32*
  %v7_cbf0 = load i32, i32* %v6_cbf0, align 4
  store i32 %v7_cbf0, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_cc00 = call i32 @function_12c28(i32 %v7_cbf0, i32 %v0_cbf4, i32 %v3_ca14, i32 16384)
  store i32 %v4_cc00, i32* %r0.global-to-local, align 4
  %v0_cc04 = load i32, i32* @r5, align 4
  %v1_cc04 = add i32 %v0_cc04, 1
  store i32 %v1_cc04, i32* @r5, align 4
  br label %dec_label_pc_cbb0.backedge

dec_label_pc_cbb0.backedge:                       ; preds = %dec_label_pc_cbf0, %dec_label_pc_cbbc
  %v0_cbb019 = phi i32 [ %v1_cc04, %dec_label_pc_cbf0 ], [ 0, %dec_label_pc_cbbc ]
  %v1_cbb0.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_cbb0

dec_label_pc_cc0c:                                ; preds = %dec_label_pc_cbdc
  store i32 %v7_cbe8, i32* %r0.global-to-local, align 4
  %v2_cc14 = call i32 @function_f250(i32 %v7_cbe8, i32 %v3_ca14)
  store i32 %v2_cc14, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_cc20 = load i32, i32* @r4, align 4
  %v4_cc20 = add i32 %v3_cc20, %v3_ca14
  %v5_cc20 = inttoptr i32 %v4_cc20 to i8*
  store i8 0, i8* %v5_cc20, align 1
  %v1_cbf0.pre = load i32, i32* @r5, align 4
  %v0_cbf4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cbf0

dec_label_pc_cc28:                                ; preds = %dec_label_pc_c97c
  %v1_ca6012 = load i32, i32* @r7, align 4
  %v2_ca6013 = add i32 %v1_ca6012, %v2_ca4c
  store i32 %v2_ca6013, i32* %r0.global-to-local, align 4
  %v0_cc28 = call i32 @function_f18c()
  %v3_cc30 = urem i32 %v0_cc28, 65536
  store i32 %v3_cc30, i32* %r0.global-to-local, align 4
  %extract.t59 = trunc i32 %v0_cc28 to i16
  br label %dec_label_pc_ca74

; uselistorder directives
  uselistorder i32 %v0_cc28, { 1, 0 }
  uselistorder i32 %v2_ca6013, { 1, 0 }
  uselistorder i32 %v7_cbe8, { 2, 1, 0, 3 }
  uselistorder i32 %v5_cb88, { 1, 0 }
  uselistorder i32 %v0_cb38, { 1, 0 }
  uselistorder i32 %v0_cb10, { 2, 0, 1 }
  uselistorder i32 %v3_ca98, { 1, 0, 2 }
  uselistorder i32 %v0_ca6810, { 1, 0 }
  uselistorder i32 %v4_ca5c, { 1, 0 }
  uselistorder i32 %v3_ca14, { 2, 1, 0 }
  uselistorder i32 %v2_c9a0, { 0, 2, 1 }
  uselistorder i32* %stack_var_-56, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 10, 11, 8, 9, 12, 14, 13, 15, 16, 17, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 5, 18, 8, 7, 11, 9, 10, 12, 13, 22, 20, 15, 14, 31, 17, 19, 16, 21, 24, 23, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_cbf0, { 1, 0 }
  uselistorder label %dec_label_pc_cbd0, { 1, 0 }
  uselistorder label %dec_label_pc_ca8c, { 1, 0 }
  uselistorder label %dec_label_pc_ca74, { 1, 0 }
}

define i32 @function_cc3c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_cc3c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_cc3c = load i32, i32* @lr, align 4
  store i32 0, i32* @r8, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_cc68 = call i32 @function_1384c(i32 %arg2, i32 4)
  %v0_cc6c = load i32, i32* @r4, align 4
  store i32 %v0_cc6c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_cc78 = load i32, i32* @r8, align 4
  store i32 %v0_cc78, i32* %r3.global-to-local, align 4
  %v0_cc7c = load i32, i32* @r5, align 4
  store i32 %v0_cc7c, i32* %r0.global-to-local, align 4
  %v5_cc80 = inttoptr i32 %v0_cc6c to i32*
  %v6_cc80 = call i32 @function_8258(i32 %v0_cc7c, i32* %v5_cc80, i32 2, i32 %v0_cc78)
  %v1_cc8c = urem i32 %v6_cc80, 256
  store i32 %v1_cc8c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_cc98 = load i32, i32* @r4, align 4
  store i32 %v0_cc98, i32* %r1.global-to-local, align 4
  %v0_cc9c = load i32, i32* @r5, align 4
  store i32 %v0_cc9c, i32* %r0.global-to-local, align 4
  %v5_cca0 = trunc i32 %v6_cc80 to i8
  %v6_cca4 = inttoptr i32 %v0_cc98 to i32*
  %v7_cca4 = call i32 @function_8258(i32 %v0_cc9c, i32* %v6_cca4, i32 3, i32 65535)
  %v0_cca8 = load i32, i32* @r4, align 4
  store i32 %v0_cca8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_ccb8 = load i32, i32* @r5, align 4
  store i32 %v0_ccb8, i32* %r0.global-to-local, align 4
  %v5_ccbc = inttoptr i32 %v0_cca8 to i32*
  %v6_ccbc = call i32 @function_8258(i32 %v0_ccb8, i32* %v5_ccbc, i32 4, i32 64)
  %v1_ccc4 = urem i32 %v6_ccbc, 256
  store i32 %v1_ccc4, i32* %ip.global-to-local, align 4
  %v0_ccc8 = load i32, i32* @r4, align 4
  store i32 %v0_ccc8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_ccd0 = load i32, i32* @r8, align 4
  store i32 %v0_ccd0, i32* %r3.global-to-local, align 4
  %v0_ccd4 = load i32, i32* @r5, align 4
  store i32 %v0_ccd4, i32* %r0.global-to-local, align 4
  %v5_ccd8 = trunc i32 %v6_ccbc to i8
  %v6_ccdc = inttoptr i32 %v0_ccc8 to i32*
  %v7_ccdc = call i32 @function_8258(i32 %v0_ccd4, i32* %v6_ccdc, i32 5, i32 %v0_ccd0)
  %v1_cce8 = urem i32 %v7_ccdc, 256
  store i32 %v1_cce8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ccf4 = load i32, i32* @r4, align 4
  store i32 %v0_ccf4, i32* %r1.global-to-local, align 4
  %v0_ccf8 = load i32, i32* @r5, align 4
  store i32 %v0_ccf8, i32* %r0.global-to-local, align 4
  %v5_cd00 = inttoptr i32 %v0_ccf4 to i32*
  %v6_cd00 = call i32 @function_8258(i32 %v0_ccf8, i32* %v5_cd00, i32 6, i32 65535)
  %v0_cd0c = load i32, i32* @r4, align 4
  store i32 %v0_cd0c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_cd18 = load i32, i32* @r5, align 4
  store i32 %v0_cd18, i32* %r0.global-to-local, align 4
  %v5_cd1c = inttoptr i32 %v0_cd0c to i32*
  %v6_cd1c = call i32 @function_8258(i32 %v0_cd18, i32* %v5_cd1c, i32 7, i32 65535)
  %v0_cd20 = load i32, i32* @r4, align 4
  store i32 %v0_cd20, i32* %r1.global-to-local, align 4
  %v0_cd28 = load i32, i32* @r8, align 4
  store i32 %v0_cd28, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_cd30 = load i32, i32* @r5, align 4
  store i32 %v0_cd30, i32* %r0.global-to-local, align 4
  %v5_cd34 = inttoptr i32 %v0_cd20 to i32*
  %v6_cd34 = call i32 @function_8258(i32 %v0_cd30, i32* %v5_cd34, i32 %v0_cd28, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_cd40 = load i32, i32* @r4, align 4
  store i32 %v0_cd40, i32* %r1.global-to-local, align 4
  store i32 %v6_cd34, i32* @sl, align 4
  %v0_cd48 = load i32, i32* @r5, align 4
  store i32 %v0_cd48, i32* %r0.global-to-local, align 4
  %v4_cd4c = inttoptr i32 %v0_cd40 to i32*
  %v5_cd4c = call i32 @function_8258(i32 %v0_cd48, i32* %v4_cd4c, i32 1, i32 1)
  %v2_cd58 = load i32, i32* @global_var_22418.77, align 4
  store i32 %v2_cd58, i32* %r3.global-to-local, align 4
  %v1_cd5c = urem i32 %v5_cd4c, 256
  store i32 %v1_cd5c, i32* %ip.global-to-local, align 4
  %v0_cd60 = load i32, i32* @r4, align 4
  store i32 %v0_cd60, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_cd68 = load i32, i32* @r5, align 4
  store i32 %v0_cd68, i32* %r0.global-to-local, align 4
  %v5_cd70 = inttoptr i32 %v0_cd60 to i32*
  %v6_cd70 = call i32 @function_8258(i32 %v0_cd68, i32* %v5_cd70, i32 24, i32 %v2_cd58)
  store i32 %v6_cd70, i32* @sb, align 4
  %v0_cd78 = load i32, i32* @r8, align 4
  store i32 %v0_cd78, i32* %r0.global-to-local, align 4
  %v1_cd7c = inttoptr i32 %v0_cd78 to i32*
  %v2_cd7c = call i32 @function_12150(i32* %v1_cd7c)
  %v1_cd80 = load i32, i32* @r6, align 4
  %v2_cd80 = add i32 %v1_cd80, %v2_cd7c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_cd94 = call i32 @function_12ce4(i32 2, i32 3, i32 17)
  store i32 %v3_cd94, i32* %r0.global-to-local, align 4
  %v7_cd98 = icmp eq i32 %v3_cd94, -1
  store i32 %v3_cd94, i32* @fp, align 4
  br i1 %v7_cd98, label %dec_label_pc_d1ec, label %dec_label_pc_cda4

dec_label_pc_cda4:                                ; preds = %dec_label_pc_cc3c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_cdac = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_cdac, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_cdb4 = load i32, i32* @r8, align 4
  store i32 %v0_cdb4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_cdc0 = call i32 @function_12ca0(i32 %v3_cd94, i32 %v0_cdb4, i32 3, i32 %v6_cdac, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_cdc0, i32* %r0.global-to-local, align 4
  %v7_cdc4 = icmp eq i32 %v5_cdc0, -1
  br i1 %v7_cdc4, label %dec_label_pc_d1f8, label %dec_label_pc_cdcc

dec_label_pc_cdcc:                                ; preds = %dec_label_pc_cda4
  %v0_cdcc = load i32, i32* @sl, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_cdd8 = urem i32 %v0_cdcc, 65536
  %v3_cddc = icmp ugt i32 %v3_cdd8, 1459
  br i1 %v3_cddc, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_cdcc
  br label %bb40

bb40:                                             ; preds = %dec_label_pc_cdcc, %bb
  %storemerge = phi i32 [ 1460, %bb ], [ %v3_cdd8, %dec_label_pc_cdcc ]
  %v0_cde8 = phi i32 [ 1460, %bb ], [ %v3_cdd8, %dec_label_pc_cdcc ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 %v6_cd00, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v3_cdfc = mul i32 %v6_cd1c, 65536
  store i32 %v3_cdfc, i32* %r2.global-to-local, align 4
  %v3_ce04 = urem i32 %v7_cca4, 65536
  %v3_ce08 = urem i32 %v6_cd00, 65536
  store i32 %v3_ce08, i32* %ip.global-to-local, align 4
  %v3_ce0c = urem i32 %v6_cd1c, 65536
  store i32 %v3_ce0c, i32* %r0.global-to-local, align 4
  %v2_ce10 = icmp eq i32 %arg2, 0
  %v0_ce18 = load i32, i32* @r8, align 4
  store i32 %v0_ce18, i32* %stack_var_-44, align 4
  br i1 %v2_ce10, label %.dec_label_pc_cf44.preheader_crit_edge, label %dec_label_pc_ce2c

.dec_label_pc_cf44.preheader_crit_edge:           ; preds = %bb40
  %.pre = add nuw nsw i32 %v0_cde8, 8
  %.pre10 = add nuw nsw i32 %v0_cde8, 28
  br label %dec_label_pc_cf44.preheader

dec_label_pc_ce2c:                                ; preds = %bb40
  %v1_ce34 = add nuw nsw i32 %v0_cde8, 28
  %v1_ce38 = add nuw nsw i32 %v0_cde8, 8
  %tmp41 = mul nuw nsw i32 %v3_ce08, 256
  %v3_ce48 = and i32 %tmp41, 65280
  %v3_ce50 = mul i32 %v1_ce34, 65536
  store i32 %v3_ce50, i32* @lr, align 4
  %tmp42 = udiv i32 %v6_cd00, 256
  %v4_ce58 = urem i32 %tmp42, 256
  %v5_ce58 = or i32 %v3_ce48, %v4_ce58
  store i32 %v5_ce58, i32* @sl, align 4
  store i32 %v3_cdfc, i32* %r1.global-to-local, align 4
  %tmp43 = mul i32 %v6_cd1c, 256
  %v3_ce70 = and i32 %tmp43, 65280
  %v2_ce74 = icmp eq i32 %v1_cce8, 0
  %tmp44 = mul nuw nsw i32 %v1_ce34, 256
  %v3_ce78 = and i32 %tmp44, 65280
  store i32 %v3_ce78, i32* %r3.global-to-local, align 4
  %tmp45 = mul i32 %v7_cca4, 256
  %v3_ce7c = and i32 %tmp45, 65280
  store i32 %v3_ce7c, i32* %r2.global-to-local, align 4
  %tmp46 = mul nuw nsw i32 %v1_ce38, 256
  %v3_ce80 = and i32 %tmp46, 65280
  store i32 %v3_ce80, i32* %ip.global-to-local, align 4
  %tmp47 = udiv i32 %v6_cd1c, 256
  %v4_ce84 = urem i32 %tmp47, 256
  %v5_ce84 = or i32 %v4_ce84, %v3_ce70
  store i32 %v5_ce84, i32* %r0.global-to-local, align 4
  %tmp48 = udiv i32 %v7_cca4, 256
  %v4_ce88 = urem i32 %tmp48, 256
  %v5_ce88 = or i32 %v4_ce88, %v3_ce7c
  store i32 %v5_ce88, i32* @r8, align 4
  %tmp49 = udiv i32 %v1_ce34, 256
  %v4_ce8c = urem i32 %tmp49, 256
  %v5_ce8c = or i32 %v4_ce8c, %v3_ce78
  store i32 %v5_ce8c, i32* @r6, align 4
  %tmp50 = udiv i32 %v1_ce38, 256
  %v4_ce90 = urem i32 %tmp50, 256
  %v5_ce90 = or i32 %v4_ce90, %v3_ce80
  store i32 %v5_ce90, i32* @r5, align 4
  %v5_ce94 = trunc i32 %v5_ce84 to i16
  store i32 0, i32* @r4, align 4
  br i1 %v2_ce74, label %dec_label_pc_cea0.preheader, label %dec_label_pc_d12c.preheader

dec_label_pc_d12c.preheader:                      ; preds = %dec_label_pc_ce2c
  %v4_d17c = sext i8 %v5_ccd8 to i32
  %v4_d1bc = sext i16 %v5_ce94 to i32
  br label %dec_label_pc_d12c

dec_label_pc_cea0.preheader:                      ; preds = %dec_label_pc_ce2c
  %v4_cf18 = sext i16 %v5_ce94 to i32
  br label %dec_label_pc_cea0

dec_label_pc_cea0:                                ; preds = %dec_label_pc_cea0.preheader, %dec_label_pc_cea0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_ceac = call i32 @function_1384c(i32 1510, i32 1)
  store i32 %v2_ceac, i32* %r0.global-to-local, align 4
  store i32 %v2_cc68, i32* %r2.global-to-local, align 4
  %v2_ceb8 = load i32, i32* @r4, align 4
  %v5_ceb8 = mul i32 %v2_ceb8, 4
  %v6_ceb8 = add i32 %v5_ceb8, %v2_cc68
  %v7_ceb8 = inttoptr i32 %v6_ceb8 to i32*
  store i32 %v2_ceac, i32* %v7_ceb8, align 4
  %v3_cebc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_cebc, i32* %r1.global-to-local, align 4
  %v0_cec0 = load i32, i32* %r2.global-to-local, align 4
  %v4_cec0 = mul i32 %v3_cebc, 4
  %v5_cec0 = add i32 %v0_cec0, %v4_cec0
  %v6_cec0 = inttoptr i32 %v5_cec0 to i32*
  %v7_cec0 = load i32, i32* %v6_cec0, align 4
  store i32 %v7_cec0, i32* %r3.global-to-local, align 4
  %v1_cec4 = inttoptr i32 %v7_cec0 to i8*
  %v2_cec4 = load i8, i8* %v1_cec4, align 1
  %tmp = urem i8 %v2_cec4, 16
  %v1_cec8 = zext i8 %tmp to i32
  %v1_cecc = or i32 %v1_cec8, 64
  store i32 %v1_cecc, i32* %r2.global-to-local, align 4
  %v1_ced0 = trunc i32 %v1_cecc to i8
  store i8 %v1_ced0, i8* %v1_cec4, align 1
  %v0_ced4 = load i32, i32* %r3.global-to-local, align 4
  %v1_ced4 = inttoptr i32 %v0_ced4 to i8*
  %v2_ced4 = load i8, i8* %v1_ced4, align 1
  %v1_ced8 = and i8 %v2_ced4, -16
  %v1_cedc = or i8 %v1_ced8, 5
  store i32 17, i32* %ip.global-to-local, align 4
  store i8 %v1_cedc, i8* %v1_ced4, align 1
  %v0_cee8 = load i32, i32* %ip.global-to-local, align 4
  %v1_cee8 = trunc i32 %v0_cee8 to i8
  %v2_cee8 = load i32, i32* %r3.global-to-local, align 4
  %v3_cee8 = add i32 %v2_cee8, 9
  %v4_cee8 = inttoptr i32 %v3_cee8 to i8*
  store i8 %v1_cee8, i8* %v4_cee8, align 1
  %v2_cef0 = load i32, i32* %r3.global-to-local, align 4
  %v3_cef0 = add i32 %v2_cef0, 1
  %v4_cef0 = inttoptr i32 %v3_cef0 to i8*
  store i8 %v5_cca0, i8* %v4_cef0, align 1
  %v0_cef8 = load i32, i32* %r1.global-to-local, align 4
  %v3_cef8 = mul i32 %v0_cef8, 32
  store i32 %v3_cef8, i32* %r0.global-to-local, align 4
  %v2_cefc = load i32, i32* %r3.global-to-local, align 4
  %v3_cefc = add i32 %v2_cefc, 8
  %v4_cefc = inttoptr i32 %v3_cefc to i8*
  store i8 %v5_ccd8, i8* %v4_cefc, align 1
  %v0_cf00 = load i32, i32* @sb, align 4
  %v1_cf00 = load i32, i32* %r3.global-to-local, align 4
  %v2_cf00 = add i32 %v1_cf00, 12
  %v3_cf00 = inttoptr i32 %v2_cf00 to i32*
  store i32 %v0_cf00, i32* %v3_cf00, align 4
  %v0_cf04 = load i32, i32* %r0.global-to-local, align 4
  %v1_cf04 = load i32, i32* %r1.global-to-local, align 4
  %tmp52 = mul i32 %v1_cf04, -8
  %v5_cf04 = add i32 %v0_cf04, %tmp52
  %v1_cf08 = load i32, i32* @r7, align 4
  %v2_cf08 = add i32 %v5_cf04, %v1_cf08
  store i32 %v2_cf08, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v1_cf10 = add i32 %v1_cf04, 1
  store i32 %v1_cf10, i32* @r4, align 4
  %v1_cf14 = add i32 %v2_cf08, 16
  %v2_cf14 = inttoptr i32 %v1_cf14 to i32*
  %v3_cf14 = load i32, i32* %v2_cf14, align 4
  store i32 %v3_cf14, i32* %r2.global-to-local, align 4
  store i32 %v4_cf18, i32* %r0.global-to-local, align 4
  %v0_cf1c = load i32, i32* %r3.global-to-local, align 4
  %v1_cf1c = add i32 %v0_cf1c, 20
  store i32 %v1_cf1c, i32* %r1.global-to-local, align 4
  %v0_cf24 = load i32, i32* @r6, align 4
  %v1_cf24 = trunc i32 %v0_cf24 to i16
  %v3_cf24 = add i32 %v0_cf1c, 2
  %v4_cf24 = inttoptr i32 %v3_cf24 to i16*
  store i16 %v1_cf24, i16* %v4_cf24, align 2
  %v0_cf28 = load i32, i32* @r8, align 4
  %v1_cf28 = trunc i32 %v0_cf28 to i16
  %v2_cf28 = load i32, i32* %r3.global-to-local, align 4
  %v3_cf28 = add i32 %v2_cf28, 4
  %v4_cf28 = inttoptr i32 %v3_cf28 to i16*
  store i16 %v1_cf28, i16* %v4_cf28, align 2
  %v0_cf2c = load i32, i32* %r2.global-to-local, align 4
  %v1_cf2c = load i32, i32* %r3.global-to-local, align 4
  %v2_cf2c = add i32 %v1_cf2c, 16
  %v3_cf2c = inttoptr i32 %v2_cf2c to i32*
  store i32 %v0_cf2c, i32* %v3_cf2c, align 4
  %v0_cf30 = load i32, i32* @sl, align 4
  %v1_cf30 = trunc i32 %v0_cf30 to i16
  %v2_cf30 = load i32, i32* %r3.global-to-local, align 4
  %v3_cf30 = add i32 %v2_cf30, 20
  %v4_cf30 = inttoptr i32 %v3_cf30 to i16*
  store i16 %v1_cf30, i16* %v4_cf30, align 2
  %v0_cf34 = load i32, i32* @r5, align 4
  %v1_cf34 = trunc i32 %v0_cf34 to i16
  %v2_cf34 = load i32, i32* %r1.global-to-local, align 4
  %v3_cf34 = add i32 %v2_cf34, 4
  %v4_cf34 = inttoptr i32 %v3_cf34 to i16*
  store i16 %v1_cf34, i16* %v4_cf34, align 2
  %v0_cf38 = load i32, i32* %r0.global-to-local, align 4
  %v1_cf38 = trunc i32 %v0_cf38 to i16
  %v2_cf38 = load i32, i32* %r1.global-to-local, align 4
  %v3_cf38 = add i32 %v2_cf38, 2
  %v4_cf38 = inttoptr i32 %v3_cf38 to i16*
  store i16 %v1_cf38, i16* %v4_cf38, align 2
  %v0_cf3c = load i32, i32* @r4, align 4
  store i32 %v0_cf3c, i32* %stack_var_-44, align 4
  %v5_cf40 = icmp slt i32 %v1_cf10, %arg2
  br i1 %v5_cf40, label %dec_label_pc_cea0, label %dec_label_pc_cf44.preheader

dec_label_pc_cf44.preheader:                      ; preds = %dec_label_pc_d12c, %dec_label_pc_cea0, %.dec_label_pc_cf44.preheader_crit_edge
  %v1_cf64.pre-phi = phi i32 [ %.pre10, %.dec_label_pc_cf44.preheader_crit_edge ], [ %v1_ce34, %dec_label_pc_cea0 ], [ %v1_ce34, %dec_label_pc_d12c ]
  %v1_cf60.pre-phi = phi i32 [ %.pre, %.dec_label_pc_cf44.preheader_crit_edge ], [ %v1_ce38, %dec_label_pc_cea0 ], [ %v1_ce38, %dec_label_pc_d12c ]
  %v3_d0c4 = icmp eq i32 %v3_ce04, 65535
  %v2_d100 = icmp eq i32 %v1_cd5c, 0
  br label %dec_label_pc_cf44

dec_label_pc_cf44:                                ; preds = %dec_label_pc_cf44.preheader, %dec_label_pc_d1d8
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ce10, label %dec_label_pc_d1d8, label %dec_label_pc_cf58

dec_label_pc_cf58:                                ; preds = %dec_label_pc_cf44
  store i32 %v0_cde8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_cf60.pre-phi, i32* @sl, align 4
  store i32 %v1_cf64.pre-phi, i32* @r8, align 4
  br label %dec_label_pc_d034

dec_label_pc_cf6c:                                ; preds = %dec_label_pc_d034
  %v0_cf6c = load i32, i32* @sb, align 4
  %v7_cf6c = icmp eq i32 %v0_cf6c, -1
  br i1 %v7_cf6c, label %dec_label_pc_d0b4, label %dec_label_pc_cf74

dec_label_pc_cf74:                                ; preds = %dec_label_pc_d058, %dec_label_pc_cf6c
  store i32 %v3_ce04, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  br i1 %v3_d0c4, label %dec_label_pc_d0d0, label %dec_label_pc_cf88

dec_label_pc_cf88:                                ; preds = %dec_label_pc_d0b4.dec_label_pc_cf88_crit_edge, %dec_label_pc_cf74
  %v1_cf8c = phi i32 [ %v1_cf8c.pre, %dec_label_pc_d0b4.dec_label_pc_cf88_crit_edge ], [ 65535, %dec_label_pc_cf74 ]
  store i32 %v3_ce08, i32* %r0.global-to-local, align 4
  %v9_cf8c = icmp eq i32 %v3_ce08, %v1_cf8c
  br i1 %v9_cf8c, label %dec_label_pc_d0e4, label %dec_label_pc_cf94

dec_label_pc_cf94:                                ; preds = %dec_label_pc_d0d0, %dec_label_pc_cf88
  %v1_cf98 = phi i32 [ %v1_d0dc, %dec_label_pc_d0d0 ], [ %v1_cf8c, %dec_label_pc_cf88 ]
  store i32 %v3_ce0c, i32* %r1.global-to-local, align 4
  %v9_cf98 = icmp eq i32 %v3_ce0c, %v1_cf98
  br i1 %v9_cf98, label %dec_label_pc_d0f8, label %dec_label_pc_cfa0

dec_label_pc_cfa0:                                ; preds = %dec_label_pc_d0e4, %dec_label_pc_cf94
  store i32 %v1_cd5c, i32* %r2.global-to-local, align 4
  br i1 %v2_d100, label %dec_label_pc_cfac, label %dec_label_pc_d10c

dec_label_pc_cfac:                                ; preds = %dec_label_pc_cfa0, %dec_label_pc_d0f8, %dec_label_pc_d10c
  %v2_cfb0 = load i32, i32* @r5, align 4
  %v3_cfb0 = add i32 %v2_cfb0, 10
  %v4_cfb0 = inttoptr i32 %v3_cfb0 to i16*
  store i16 0, i16* %v4_cfb0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cfb8 = load i32, i32* @r5, align 4
  store i32 %v0_cfb8, i32* @r0, align 4
  %v2_cfbc = call i32 @function_dd58(i32 %v0_cfb8, i32 20)
  %v3_cfbc = trunc i32 %v2_cfbc to i16
  store i32 %v2_cfbc, i32* %r0.global-to-local, align 4
  %v3_cfc0 = load i32, i32* @r5, align 4
  %v4_cfc0 = add i32 %v3_cfc0, 10
  %v5_cfc0 = inttoptr i32 %v4_cfc0 to i16*
  store i16 %v3_cfbc, i16* %v5_cfc0, align 2
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_cfc8 = load i32, i32* @r6, align 4
  %v3_cfc8 = add i32 %v2_cfc8, 6
  %v4_cfc8 = inttoptr i32 %v3_cfc8 to i16*
  store i16 0, i16* %v4_cfc8, align 2
  %v0_cfcc = load i32, i32* @r6, align 4
  %v1_cfcc = add i32 %v0_cfcc, 4
  %v2_cfcc = inttoptr i32 %v1_cfcc to i16*
  %v3_cfcc = load i16, i16* %v2_cfcc, align 2
  %v4_cfcc = zext i16 %v3_cfcc to i32
  store i32 %v4_cfcc, i32* %r2.global-to-local, align 4
  store i32 %v0_cfcc, i32* @r1, align 4
  %v0_cfd4 = load i32, i32* @sl, align 4
  store i32 %v0_cfd4, i32* %r3.global-to-local, align 4
  %v0_cfd8 = load i32, i32* @r5, align 4
  store i32 %v0_cfd8, i32* %r0.global-to-local, align 4
  %v4_cfdc = call i32 @function_dda8(i32 %v0_cfd8, i32 %v0_cfcc, i32 %v4_cfcc, i32 %v0_cfd4)
  %v5_cfdc = trunc i32 %v4_cfdc to i16
  store i32 %v4_cfdc, i32* %r0.global-to-local, align 4
  %v3_cfe0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_cfe0, i32* %r3.global-to-local, align 4
  %v3_cfe4 = mul i32 %v3_cfe0, 32
  store i32 %v3_cfe4, i32* %lr.global-to-local, align 4
  %v3_cfe8 = load i32, i32* @r6, align 4
  %v4_cfe8 = add i32 %v3_cfe8, 6
  %v5_cfe8 = inttoptr i32 %v4_cfe8 to i16*
  store i16 %v5_cfdc, i16* %v5_cfe8, align 2
  %v0_cfec = load i32, i32* %lr.global-to-local, align 4
  %v1_cfec = load i32, i32* %r3.global-to-local, align 4
  %tmp53 = mul i32 %v1_cfec, -8
  %v5_cfec = add i32 %v0_cfec, %tmp53
  store i32 %v5_cfec, i32* %lr.global-to-local, align 4
  %v0_cff0 = load i32, i32* @r6, align 4
  %v1_cff0 = add i32 %v0_cff0, 2
  %v2_cff0 = inttoptr i32 %v1_cff0 to i16*
  %v3_cff0 = load i16, i16* %v2_cff0, align 2
  %v1_cff4 = load i32, i32* @r7, align 4
  %v2_cff4 = add i32 %v1_cff4, %v5_cfec
  store i32 %v2_cff4, i32* @lr, align 4
  %v3_cff8 = add i32 %v2_cff4, 2
  %v4_cff8 = inttoptr i32 %v3_cff8 to i16*
  store i16 %v3_cff0, i16* %v4_cff8, align 2
  %v0_cffc = load i32, i32* @r8, align 4
  store i32 %v0_cffc, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_d008 = load i32, i32* @r5, align 4
  store i32 %v0_d008, i32* %r1.global-to-local, align 4
  %v0_d00c = load i32, i32* @fp, align 4
  store i32 %v0_d00c, i32* %r0.global-to-local, align 4
  %v0_d010 = load i32, i32* @lr, align 4
  %v6_d018 = call i32 @function_12c60(i32 %v0_d00c, i32 %v0_d008, i32 %v0_cffc, i32 16384, i32 %v0_d010, i32 16)
  %v3_d01c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d01c, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v1_d024 = add i32 %v3_d01c, 1
  store i32 %v1_d024, i32* %r0.global-to-local, align 4
  store i32 %v1_d024, i32* %stack_var_-44, align 4
  %v6_d030 = icmp slt i32 %v1_d024, %arg2
  br i1 %v6_d030, label %dec_label_pc_d034, label %dec_label_pc_d1d8

dec_label_pc_d034:                                ; preds = %dec_label_pc_cfac, %dec_label_pc_cf58
  %v1_d048 = phi i32 [ %v1_d024, %dec_label_pc_cfac ], [ 0, %dec_label_pc_cf58 ]
  %v5_d038 = mul i32 %v1_d048, 24
  %v1_d040 = load i32, i32* @r7, align 4
  %v2_d040 = add i32 %v1_d040, %v5_d038
  store i32 %v2_d040, i32* %r3.global-to-local, align 4
  %v1_d044 = add i32 %v2_d040, 20
  %v2_d044 = inttoptr i32 %v1_d044 to i8*
  %v3_d044 = load i8, i8* %v2_d044, align 1
  %v4_d044 = zext i8 %v3_d044 to i32
  store i32 %v4_d044, i32* %r2.global-to-local, align 4
  %v4_d048 = mul i32 %v1_d048, 4
  %v5_d048 = add i32 %v4_d048, %v2_cc68
  %v6_d048 = inttoptr i32 %v5_d048 to i32*
  %v7_d048 = load i32, i32* %v6_d048, align 4
  store i32 %v7_d048, i32* @r5, align 4
  %v1_d050 = add i32 %v7_d048, 20
  store i32 %v1_d050, i32* @r6, align 4
  %tmp54 = icmp ugt i8 %v3_d044, 31
  br i1 %tmp54, label %dec_label_pc_cf6c, label %dec_label_pc_d058

dec_label_pc_d058:                                ; preds = %dec_label_pc_d034
  %v1_d058 = add i32 %v2_d040, 16
  %v2_d058 = inttoptr i32 %v1_d058 to i32*
  %v3_d058 = load i32, i32* %v2_d058, align 4
  %v0_d05c = call i32 @function_f18c()
  store i32 %v0_d05c, i32* %r0.global-to-local, align 4
  %v3_d060 = load i32, i32* %stack_var_-44, align 4
  %v5_d068 = mul i32 %v3_d060, 24
  %v1_d06c = and i32 %v3_d058, 16711680
  store i32 %v1_d06c, i32* %ip.global-to-local, align 4
  %v3_d070 = udiv i32 %v3_d058, 16777216
  %v4_d074 = udiv i32 %v1_d06c, 256
  %v5_d074 = or i32 %v4_d074, %v3_d070
  store i32 %v5_d074, i32* %r2.global-to-local, align 4
  %v1_d078 = load i32, i32* @r7, align 4
  %v2_d078 = add i32 %v1_d078, %v5_d068
  store i32 %v2_d078, i32* %r1.global-to-local, align 4
  %v1_d07c = and i32 %v3_d058, 65280
  store i32 %v1_d07c, i32* %r3.global-to-local, align 4
  %v1_d080 = add i32 %v2_d078, 20
  %v2_d080 = inttoptr i32 %v1_d080 to i8*
  %v3_d080 = load i8, i8* %v2_d080, align 1
  %v4_d080 = zext i8 %v3_d080 to i32
  store i32 %v4_d080, i32* %ip.global-to-local, align 4
  %v5_d088 = call i32 @llvm.bswap.i32(i32 %v3_d058)
  %v7_d08c = lshr i32 %v0_d05c, %v4_d080
  %v8_d08c = add i32 %v7_d08c, %v5_d088
  store i32 %v8_d08c, i32* %r2.global-to-local, align 4
  %v1_d090 = and i32 %v8_d08c, 16711680
  store i32 %v1_d090, i32* %r0.global-to-local, align 4
  %v1_d09c = and i32 %v8_d08c, 65280
  store i32 %v1_d09c, i32* %r1.global-to-local, align 4
  %v5_d0a4 = call i32 @llvm.bswap.i32(i32 %v8_d08c)
  store i32 %v5_d0a4, i32* %r3.global-to-local, align 4
  %v0_d0a8 = load i32, i32* @sb, align 4
  %v3_d0a8 = icmp eq i32 %v0_d0a8, -1
  %v1_d0ac = load i32, i32* @r5, align 4
  %v2_d0ac = add i32 %v1_d0ac, 16
  %v3_d0ac = inttoptr i32 %v2_d0ac to i32*
  store i32 %v5_d0a4, i32* %v3_d0ac, align 4
  br i1 %v3_d0a8, label %dec_label_pc_d0b4, label %dec_label_pc_cf74

dec_label_pc_d0b4:                                ; preds = %dec_label_pc_d058, %dec_label_pc_cf6c
  %v0_d0b4 = call i32 @function_f18c()
  store i32 %v0_d0b4, i32* %r0.global-to-local, align 4
  store i32 %v3_ce04, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v1_d0c8 = load i32, i32* @r5, align 4
  %v2_d0c8 = add i32 %v1_d0c8, 12
  %v3_d0c8 = inttoptr i32 %v2_d0c8 to i32*
  store i32 %v0_d0b4, i32* %v3_d0c8, align 4
  br i1 %v3_d0c4, label %dec_label_pc_d0d0, label %dec_label_pc_d0b4.dec_label_pc_cf88_crit_edge

dec_label_pc_d0b4.dec_label_pc_cf88_crit_edge:    ; preds = %dec_label_pc_d0b4
  %v1_cf8c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cf88

dec_label_pc_d0d0:                                ; preds = %dec_label_pc_d0b4, %dec_label_pc_cf74
  %v0_d0d0 = call i32 @function_f18c()
  %v1_d0d0 = trunc i32 %v0_d0d0 to i16
  %v3_d0d4 = load i32, i32* @r5, align 4
  %v4_d0d4 = add i32 %v3_d0d4, 4
  %v5_d0d4 = inttoptr i32 %v4_d0d4 to i16*
  store i16 %v1_d0d0, i16* %v5_d0d4, align 2
  store i32 %v3_ce08, i32* %r0.global-to-local, align 4
  %v1_d0dc = load i32, i32* @r4, align 4
  %v9_d0dc = icmp eq i32 %v3_ce08, %v1_d0dc
  br i1 %v9_d0dc, label %dec_label_pc_d0e4, label %dec_label_pc_cf94

dec_label_pc_d0e4:                                ; preds = %dec_label_pc_d0d0, %dec_label_pc_cf88
  %v0_d0e4 = call i32 @function_f18c()
  %v1_d0e4 = trunc i32 %v0_d0e4 to i16
  store i32 %v0_d0e4, i32* %r0.global-to-local, align 4
  store i32 %v3_ce0c, i32* %r1.global-to-local, align 4
  %v1_d0ec = load i32, i32* @r4, align 4
  %v9_d0ec = icmp eq i32 %v3_ce0c, %v1_d0ec
  %v3_d0f0 = load i32, i32* @r5, align 4
  %v4_d0f0 = add i32 %v3_d0f0, 20
  %v5_d0f0 = inttoptr i32 %v4_d0f0 to i16*
  store i16 %v1_d0e4, i16* %v5_d0f0, align 2
  br i1 %v9_d0ec, label %dec_label_pc_d0f8, label %dec_label_pc_cfa0

dec_label_pc_d0f8:                                ; preds = %dec_label_pc_d0e4, %dec_label_pc_cf94
  %v0_d0f8 = call i32 @function_f18c()
  %v1_d0f8 = trunc i32 %v0_d0f8 to i16
  store i32 %v0_d0f8, i32* %r0.global-to-local, align 4
  store i32 %v1_cd5c, i32* %r2.global-to-local, align 4
  %v3_d104 = load i32, i32* @r6, align 4
  %v4_d104 = add i32 %v3_d104, 2
  %v5_d104 = inttoptr i32 %v4_d104 to i16*
  store i16 %v1_d0f8, i16* %v5_d104, align 2
  br i1 %v2_d100, label %dec_label_pc_cfac, label %dec_label_pc_d10c

dec_label_pc_d10c:                                ; preds = %dec_label_pc_cfa0, %dec_label_pc_d0f8
  %v0_d10c = load i32, i32* @r5, align 4
  %v1_d10c = add i32 %v0_d10c, 28
  store i32 %v1_d10c, i32* @r4, align 4
  store i32 %v1_d10c, i32* %r0.global-to-local, align 4
  store i32 %v0_cde8, i32* %r1.global-to-local, align 4
  %v2_d118 = call i32 @function_f250(i32 %v1_d10c, i32 %v0_cde8)
  store i32 %v2_d118, i32* %r0.global-to-local, align 4
  store i32 %v0_cde8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_d124 = load i32, i32* @r4, align 4
  %v4_d124 = add i32 %v3_d124, %v0_cde8
  %v5_d124 = inttoptr i32 %v4_d124 to i8*
  store i8 0, i8* %v5_d124, align 1
  br label %dec_label_pc_cfac

dec_label_pc_d12c:                                ; preds = %dec_label_pc_d12c.preheader, %dec_label_pc_d12c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d138 = call i32 @function_1384c(i32 1510, i32 1)
  store i32 %v2_d138, i32* %r0.global-to-local, align 4
  store i32 %v2_cc68, i32* %ip.global-to-local, align 4
  %v3_d140 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d140, i32* %r1.global-to-local, align 4
  %v2_d144 = load i32, i32* @r4, align 4
  %v5_d144 = mul i32 %v2_d144, 4
  %v6_d144 = add i32 %v5_d144, %v2_cc68
  %v7_d144 = inttoptr i32 %v6_d144 to i32*
  store i32 %v2_d138, i32* %v7_d144, align 4
  %v0_d148 = load i32, i32* %ip.global-to-local, align 4
  %v1_d148 = load i32, i32* %r1.global-to-local, align 4
  %v4_d148 = mul i32 %v1_d148, 4
  %v5_d148 = add i32 %v4_d148, %v0_d148
  %v6_d148 = inttoptr i32 %v5_d148 to i32*
  %v7_d148 = load i32, i32* %v6_d148, align 4
  store i32 %v7_d148, i32* %r3.global-to-local, align 4
  %v1_d14c = inttoptr i32 %v7_d148 to i8*
  %v2_d14c = load i8, i8* %v1_d14c, align 1
  %tmp55 = urem i8 %v2_d14c, 16
  %v1_d150 = zext i8 %tmp55 to i32
  %v1_d154 = or i32 %v1_d150, 64
  store i32 %v1_d154, i32* %r2.global-to-local, align 4
  %v1_d158 = trunc i32 %v1_d154 to i8
  store i8 %v1_d158, i8* %v1_d14c, align 1
  %v0_d15c = load i32, i32* %r3.global-to-local, align 4
  %v1_d15c = inttoptr i32 %v0_d15c to i8*
  %v2_d15c = load i8, i8* %v1_d15c, align 1
  %v1_d160 = and i8 %v2_d15c, -16
  %v1_d164 = or i8 %v1_d160, 5
  store i32 17, i32* %ip.global-to-local, align 4
  store i8 %v1_d164, i8* %v1_d15c, align 1
  %v0_d170 = load i32, i32* %ip.global-to-local, align 4
  %v1_d170 = trunc i32 %v0_d170 to i8
  %v2_d170 = load i32, i32* %r3.global-to-local, align 4
  %v3_d170 = add i32 %v2_d170, 9
  %v4_d170 = inttoptr i32 %v3_d170 to i8*
  store i8 %v1_d170, i8* %v4_d170, align 1
  %v2_d178 = load i32, i32* %r3.global-to-local, align 4
  %v3_d178 = add i32 %v2_d178, 1
  %v4_d178 = inttoptr i32 %v3_d178 to i8*
  store i8 %v5_cca0, i8* %v4_d178, align 1
  store i32 %v4_d17c, i32* %ip.global-to-local, align 4
  %v0_d180 = load i32, i32* %r1.global-to-local, align 4
  %v3_d180 = mul i32 %v0_d180, 32
  store i32 %v3_d180, i32* %r0.global-to-local, align 4
  %v2_d184 = load i32, i32* %r3.global-to-local, align 4
  %v3_d184 = add i32 %v2_d184, 8
  %v4_d184 = inttoptr i32 %v3_d184 to i8*
  store i8 %v5_ccd8, i8* %v4_d184, align 1
  %v0_d188 = load i32, i32* @sb, align 4
  %v1_d188 = load i32, i32* %r3.global-to-local, align 4
  %v2_d188 = add i32 %v1_d188, 12
  %v3_d188 = inttoptr i32 %v2_d188 to i32*
  store i32 %v0_d188, i32* %v3_d188, align 4
  %v0_d18c = load i32, i32* %r0.global-to-local, align 4
  %v1_d18c = load i32, i32* %r1.global-to-local, align 4
  %tmp56 = mul i32 %v1_d18c, -8
  %v5_d18c = add i32 %v0_d18c, %tmp56
  %v1_d190 = load i32, i32* @r7, align 4
  %v2_d190 = add i32 %v5_d18c, %v1_d190
  store i32 %v2_d190, i32* %r2.global-to-local, align 4
  %v1_d194 = add i32 %v2_d190, 16
  %v2_d194 = inttoptr i32 %v1_d194 to i32*
  %v3_d194 = load i32, i32* %v2_d194, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v1_d19c = load i32, i32* %r3.global-to-local, align 4
  %v2_d19c = add i32 %v1_d19c, 16
  %v3_d19c = inttoptr i32 %v2_d19c to i32*
  store i32 %v3_d194, i32* %v3_d19c, align 4
  store i32 64, i32* %r2.global-to-local, align 4
  %v0_d1a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_d1a4 = add i32 %v0_d1a4, 1
  store i32 %v1_d1a4, i32* @r4, align 4
  %v0_d1a8 = load i32, i32* @r6, align 4
  %v1_d1a8 = trunc i32 %v0_d1a8 to i16
  %v2_d1a8 = load i32, i32* %r3.global-to-local, align 4
  %v3_d1a8 = add i32 %v2_d1a8, 2
  %v4_d1a8 = inttoptr i32 %v3_d1a8 to i16*
  store i16 %v1_d1a8, i16* %v4_d1a8, align 2
  %v0_d1ac = load i32, i32* %r3.global-to-local, align 4
  %v1_d1ac = add i32 %v0_d1ac, 20
  store i32 %v1_d1ac, i32* %r1.global-to-local, align 4
  %v0_d1b0 = load i32, i32* @r8, align 4
  %v1_d1b0 = trunc i32 %v0_d1b0 to i16
  %v3_d1b0 = add i32 %v0_d1ac, 4
  %v4_d1b0 = inttoptr i32 %v3_d1b0 to i16*
  store i16 %v1_d1b0, i16* %v4_d1b0, align 2
  %v0_d1b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d1b4 = trunc i32 %v0_d1b4 to i16
  %v2_d1b4 = load i32, i32* %r3.global-to-local, align 4
  %v3_d1b4 = add i32 %v2_d1b4, 6
  %v4_d1b4 = inttoptr i32 %v3_d1b4 to i16*
  store i16 %v1_d1b4, i16* %v4_d1b4, align 2
  %v0_d1b8 = load i32, i32* @sl, align 4
  %v1_d1b8 = trunc i32 %v0_d1b8 to i16
  %v2_d1b8 = load i32, i32* %r3.global-to-local, align 4
  %v3_d1b8 = add i32 %v2_d1b8, 20
  %v4_d1b8 = inttoptr i32 %v3_d1b8 to i16*
  store i16 %v1_d1b8, i16* %v4_d1b8, align 2
  store i32 %v4_d1bc, i32* %r3.global-to-local, align 4
  %v0_d1c0 = load i32, i32* @r4, align 4
  %v1_d1c0 = load i32, i32* %r0.global-to-local, align 4
  %v0_d1c4 = load i32, i32* @r5, align 4
  %v1_d1c4 = trunc i32 %v0_d1c4 to i16
  %v2_d1c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_d1c4 = add i32 %v2_d1c4, 4
  %v4_d1c4 = inttoptr i32 %v3_d1c4 to i16*
  store i16 %v1_d1c4, i16* %v4_d1c4, align 2
  %v0_d1c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_d1c8 = trunc i32 %v0_d1c8 to i16
  %v2_d1c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_d1c8 = add i32 %v2_d1c8, 2
  %v4_d1c8 = inttoptr i32 %v3_d1c8 to i16*
  store i16 %v1_d1c8, i16* %v4_d1c8, align 2
  %v0_d1cc = load i32, i32* @r4, align 4
  store i32 %v0_d1cc, i32* %stack_var_-44, align 4
  %v5_d1d0 = icmp slt i32 %v0_d1c0, %v1_d1c0
  br i1 %v5_d1d0, label %dec_label_pc_d12c, label %dec_label_pc_cf44.preheader

dec_label_pc_d1d8:                                ; preds = %dec_label_pc_cfac, %dec_label_pc_cf44
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_d1dc = call i32 @function_12150(i32* null)
  store i32 %v2_d1dc, i32* %r0.global-to-local, align 4
  store i32 %v2_cd80, i32* %r3.global-to-local, align 4
  %v6_d1e8 = icmp slt i32 %v2_cd80, %v2_d1dc
  br i1 %v6_d1e8, label %dec_label_pc_d1ec, label %dec_label_pc_cf44

dec_label_pc_d1ec:                                ; preds = %dec_label_pc_d1d8, %dec_label_pc_cc3c, %dec_label_pc_d1f8
  %v1_d1f4 = phi i32 [ %v3_cd94, %dec_label_pc_cc3c ], [ %v1_d1fc, %dec_label_pc_d1f8 ], [ %v2_d1dc, %dec_label_pc_d1d8 ]
  store i32 %v27_cc3c, i32* %lr.global-to-local, align 4
  ret i32 %v1_d1f4

dec_label_pc_d1f8:                                ; preds = %dec_label_pc_cda4
  %v0_d1f8 = load i32, i32* @fp, align 4
  store i32 %v0_d1f8, i32* %r0.global-to-local, align 4
  %v1_d1fc = call i32 @function_124d0(i32 %v0_d1f8)
  store i32 %v1_d1fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d1ec

; uselistorder directives
  uselistorder i32 %v1_d1fc, { 1, 0 }
  uselistorder i32 %v0_d0f8, { 1, 0 }
  uselistorder i32 %v0_d0e4, { 1, 0 }
  uselistorder i32 %v1_d0dc, { 1, 0 }
  uselistorder i32 %v5_d0a4, { 1, 0 }
  uselistorder i32 %v3_d058, { 2, 1, 3, 0 }
  uselistorder i32 %v1_d024, { 1, 2, 0, 3 }
  uselistorder i32 %v5_cfec, { 1, 0 }
  uselistorder i32 %v4_cfdc, { 1, 0 }
  uselistorder i32 %v0_cfcc, { 1, 0, 2 }
  uselistorder i32 %v2_cfbc, { 1, 0 }
  uselistorder i1 %v2_d100, { 1, 0 }
  uselistorder i32 %v1_cf04, { 1, 0 }
  uselistorder i16 %v5_ce94, { 1, 0 }
  uselistorder i32 %v3_ce80, { 1, 0 }
  uselistorder i32 %v3_ce7c, { 1, 0 }
  uselistorder i32 %v3_ce78, { 1, 0 }
  uselistorder i32 %v1_ce38, { 2, 3, 1, 0 }
  uselistorder i32 %v1_ce34, { 3, 4, 2, 0, 1 }
  uselistorder i32 %v3_ce08, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v3_cdfc, { 1, 0 }
  uselistorder i32 %v0_cde8, { 0, 4, 5, 6, 3, 7, 8, 1, 2 }
  uselistorder i32 %v3_cd94, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_cd80, { 1, 0 }
  uselistorder i32 %v1_cd5c, { 2, 1, 3, 0 }
  uselistorder i32 %v6_cd1c, { 1, 0, 3, 2 }
  uselistorder i32 %v1_cce8, { 1, 0 }
  uselistorder i8 %v5_ccd8, { 1, 0, 2 }
  uselistorder i32 %v6_ccbc, { 1, 0 }
  uselistorder i32 %v7_cca4, { 1, 0, 2 }
  uselistorder i32 %v6_cc80, { 1, 0 }
  uselistorder i32 %v2_cc68, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 33, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 13, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 8, 3, 4, 5, 6, 7, 10, 9, 12, 11, 14, 15, 13, 17, 16, 19, 18, 20, 22, 21, 29, 23, 24, 25, 26, 27, 28, 33, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32 %arg2, { 2, 5, 4, 6, 0, 3, 1, 7, 8, 9, 10 }
  uselistorder label %dec_label_pc_d1ec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d12c, { 1, 0 }
  uselistorder label %dec_label_pc_d10c, { 1, 0 }
  uselistorder label %dec_label_pc_cfac, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cf44, { 1, 0 }
  uselistorder label %dec_label_pc_cea0, { 1, 0 }
  uselistorder label %bb40, { 1, 0 }
}

define i32 @function_d208(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_d208:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_d208 = load i32, i32* @r4, align 4
  %v27_d208 = load i32, i32* @lr, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @fp, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_d234 = call i32 @function_1384c(i32 %arg2, i32 4)
  %v0_d238 = load i32, i32* @r4, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d240 = load i32, i32* @r7, align 4
  store i32 %v0_d240, i32* %r3.global-to-local, align 4
  store i32 %v2_d234, i32* @sb, align 4
  %v0_d248 = load i32, i32* @r5, align 4
  %v4_d24c = inttoptr i32 %v0_d238 to i32*
  %v5_d24c = call i32 @function_8258(i32 %v0_d248, i32* %v4_d24c, i32 2, i32 %v0_d240)
  %v1_d258 = urem i32 %v5_d24c, 256
  store i32 %v1_d258, i32* %ip.global-to-local, align 4
  %v0_d25c = load i32, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d268 = load i32, i32* @r5, align 4
  %v5_d26c = trunc i32 %v5_d24c to i8
  %v6_d270 = inttoptr i32 %v0_d25c to i32*
  %v7_d270 = call i32 @function_8258(i32 %v0_d268, i32* %v6_d270, i32 3, i32 65535)
  %v0_d274 = load i32, i32* @r4, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_d284 = load i32, i32* @r5, align 4
  %v5_d288 = inttoptr i32 %v0_d274 to i32*
  %v6_d288 = call i32 @function_8258(i32 %v0_d284, i32* %v5_d288, i32 4, i32 64)
  %v0_d290 = load i32, i32* @r4, align 4
  %v1_d294 = urem i32 %v6_d288, 256
  store i32 %v1_d294, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_d29c = load i32, i32* @r7, align 4
  store i32 %v0_d29c, i32* %r3.global-to-local, align 4
  %v0_d2a0 = load i32, i32* @r5, align 4
  %v6_d2a8 = inttoptr i32 %v0_d290 to i32*
  %v7_d2a8 = call i32 @function_8258(i32 %v0_d2a0, i32* %v6_d2a8, i32 5, i32 %v0_d29c)
  %v1_d2b4 = urem i32 %v7_d2a8, 256
  store i32 %v1_d2b4, i32* %ip.global-to-local, align 4
  %v0_d2b8 = load i32, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d2c4 = load i32, i32* @r5, align 4
  %v5_d2cc = inttoptr i32 %v0_d2b8 to i32*
  %v6_d2cc = call i32 @function_8258(i32 %v0_d2c4, i32* %v5_d2cc, i32 6, i32 65535)
  %v0_d2d4 = load i32, i32* @r4, align 4
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_d2e4 = load i32, i32* @r5, align 4
  %v5_d2e8 = inttoptr i32 %v0_d2d4 to i32*
  %v6_d2e8 = call i32 @function_8258(i32 %v0_d2e4, i32* %v5_d2e8, i32 7, i32 27015)
  store i32 %v6_d2e8, i32* @r4, align 4
  %v0_d2f0 = load i32, i32* @r7, align 4
  store i32 %v0_d2f0, i32* %stack_var_-48, align 4
  %v1_d2f8 = inttoptr i32 %v0_d2f0 to i32*
  %v2_d2f8 = call i32 @function_12150(i32* %v1_d2f8)
  %v1_d2fc = load i32, i32* @r6, align 4
  %v2_d2fc = add i32 %v1_d2fc, %v2_d2f8
  %v1_d308 = call i32 @function_10e48(i32 36)
  %v3_d314 = call i32 @function_10d84(i32 36, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_d328 = call i32 @function_12ce4(i32 2, i32 3, i32 17)
  %v7_d32c = icmp eq i32 %v3_d328, -1
  store i32 %v3_d328, i32* @sl, align 4
  br i1 %v7_d32c, label %dec_label_pc_d658, label %dec_label_pc_d338

dec_label_pc_d338:                                ; preds = %dec_label_pc_d208
  store i32 1, i32* %stack_var_-44, align 4
  %v6_d340 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_d340, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_d348 = load i32, i32* @r7, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_d354 = call i32 @function_12ca0(i32 %v3_d328, i32 %v0_d348, i32 3, i32 %v6_d340, i32 ptrtoint (i32* @0 to i32))
  %v7_d358 = icmp eq i32 %v5_d354, -1
  br i1 %v7_d358, label %dec_label_pc_d664, label %dec_label_pc_d360

dec_label_pc_d360:                                ; preds = %dec_label_pc_d338
  store i32 %v6_d2cc, i32* %r2.global-to-local, align 4
  %v0_d36c = load i32, i32* @r4, align 4
  %v3_d370 = mul i32 %v6_d2cc, 65536
  store i32 %v3_d370, i32* %ip.global-to-local, align 4
  %v3_d374 = urem i32 %v7_d270, 65536
  store i32 %v3_d374, i32* %r3.global-to-local, align 4
  %v3_d378 = urem i32 %v6_d2cc, 65536
  %v3_d37c = urem i32 %v0_d36c, 65536
  %v0_d380 = load i32, i32* @fp, align 4
  %v2_d380 = icmp eq i32 %v0_d380, 0
  %v0_d384 = load i32, i32* @r7, align 4
  store i32 %v0_d384, i32* %stack_var_-44, align 4
  br i1 %v2_d380, label %dec_label_pc_d4c4.preheader, label %dec_label_pc_d398

dec_label_pc_d398:                                ; preds = %dec_label_pc_d360
  %tmp39 = mul i32 %v7_d270, 256
  %v3_d3a0 = and i32 %tmp39, 65280
  store i32 %v3_d3a0, i32* %r3.global-to-local, align 4
  %tmp40 = mul i32 %v0_d36c, 256
  %v3_d3a4 = and i32 %tmp40, 65280
  %tmp41 = udiv i32 %v7_d270, 256
  %v4_d3ac = urem i32 %tmp41, 256
  %v5_d3ac = or i32 %v4_d3ac, %tmp39
  %tmp42 = udiv i32 %v0_d36c, 256
  %v4_d3b0 = urem i32 %tmp42, 256
  %v5_d3b0 = or i32 %v4_d3b0, %v3_d3a4
  store i32 %v5_d3b0, i32* @lr, align 4
  %tmp43 = mul i32 %v6_d2cc, 256
  %v3_d3b4 = and i32 %tmp43, 65280
  store i32 %v3_d3b4, i32* %r2.global-to-local, align 4
  %v5_d3b8 = trunc i32 %v5_d3ac to i16
  %tmp44 = udiv i32 %v6_d2cc, 256
  %v4_d3c0 = urem i32 %tmp44, 256
  %v5_d3c0 = or i32 %v4_d3c0, %v3_d3b4
  store i32 %v5_d3c0, i32* @r6, align 4
  store i32 %v0_d384, i32* @r4, align 4
  %sext5 = mul nuw i32 %v5_d3b0, 65536
  %v4_d490 = sdiv i32 %sext5, 65536
  %v1_d43c = trunc i32 %v6_d288 to i8
  br label %dec_label_pc_d3c8

dec_label_pc_d3c8:                                ; preds = %.thread, %dec_label_pc_d398
  %v2_d3d0 = call i32 @function_1384c(i32 128, i32 1)
  %v3_d3d4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d3d4, i32* %r2.global-to-local, align 4
  %v1_d3d8 = load i32, i32* @sb, align 4
  %v2_d3d8 = load i32, i32* @r4, align 4
  %v5_d3d8 = mul i32 %v2_d3d8, 4
  %v6_d3d8 = add i32 %v5_d3d8, %v1_d3d8
  %v7_d3d8 = inttoptr i32 %v6_d3d8 to i32*
  store i32 %v2_d3d0, i32* %v7_d3d8, align 4
  %v0_d3dc = load i32, i32* %r2.global-to-local, align 4
  %v3_d3dc = mul i32 %v0_d3dc, 32
  store i32 %v3_d3dc, i32* %r3.global-to-local, align 4
  %v0_d3e0 = load i32, i32* @sb, align 4
  %v4_d3e0 = mul i32 %v0_d3dc, 4
  %v5_d3e0 = add i32 %v0_d3e0, %v4_d3e0
  %v6_d3e0 = inttoptr i32 %v5_d3e0 to i32*
  %v7_d3e0 = load i32, i32* %v6_d3e0, align 4
  store i32 %v7_d3e0, i32* @lr, align 4
  %v5_d3e4 = mul i32 %v0_d3dc, 24
  store i32 %v5_d3e4, i32* %r3.global-to-local, align 4
  %v1_d3e8 = load i32, i32* @r8, align 4
  %v2_d3e8 = add i32 %v1_d3e8, %v5_d3e4
  store i32 %v2_d3e8, i32* @r5, align 4
  %v1_d3ec = inttoptr i32 %v7_d3e0 to i8*
  %v2_d3ec = load i8, i8* %v1_d3ec, align 1
  %tmp = urem i8 %v2_d3ec, 16
  %v1_d3f0 = zext i8 %tmp to i32
  %v1_d3f4 = or i32 %v1_d3f0, 64
  store i32 %v1_d3f4, i32* %r3.global-to-local, align 4
  %v1_d3fc = trunc i32 %v1_d3f4 to i8
  store i8 %v1_d3fc, i8* %v1_d3ec, align 1
  %v0_d400 = load i32, i32* @lr, align 4
  %v1_d400 = inttoptr i32 %v0_d400 to i8*
  %v2_d400 = load i8, i8* %v1_d400, align 1
  %v1_d404 = and i8 %v2_d400, -16
  %v1_d408 = or i8 %v1_d404, 5
  store i8 %v1_d408, i8* %v1_d400, align 1
  %v2_d414 = load i32, i32* @lr, align 4
  %v3_d414 = add i32 %v2_d414, 1
  %v4_d414 = inttoptr i32 %v3_d414 to i8*
  store i8 %v5_d26c, i8* %v4_d414, align 1
  %v3_d418 = load i32, i32* %stack_var_-48, align 4
  %v3_d41c = mul i32 %v3_d418, 65536
  %v1_d420 = add i32 %v3_d41c, 2097152
  %v3_d424 = udiv i32 %v1_d420, 256
  %v1_d428 = and i32 %v3_d424, 65280
  %v4_d42c = udiv i32 %v1_d420, 16777216
  %v5_d42c = or i32 %v1_d428, %v4_d42c
  store i32 %v5_d42c, i32* %r3.global-to-local, align 4
  store i32 %v1_d2b4, i32* %r4.global-to-local, align 4
  %v3_d438 = urem i32 %v3_d418, 65536
  store i32 %v3_d438, i32* %r2.global-to-local, align 4
  %v2_d43c = load i32, i32* @lr, align 4
  %v3_d43c = add i32 %v2_d43c, 8
  %v4_d43c = inttoptr i32 %v3_d43c to i8*
  store i8 %v1_d43c, i8* %v4_d43c, align 1
  %v0_d440 = load i32, i32* %r3.global-to-local, align 4
  %v1_d440 = trunc i32 %v0_d440 to i16
  %v2_d440 = load i32, i32* @lr, align 4
  %v3_d440 = add i32 %v2_d440, 2
  %v4_d440 = inttoptr i32 %v3_d440 to i16*
  store i16 %v1_d440, i16* %v4_d440, align 2
  %v0_d444 = load i32, i32* %r2.global-to-local, align 4
  %v1_d444 = mul i32 %v0_d444, 65536
  %v3_d44c = add i32 %v1_d444, 786432
  store i32 %v3_d44c, i32* %r2.global-to-local, align 4
  %v2_d450 = load i32, i32* @lr, align 4
  %v3_d450 = add i32 %v2_d450, 4
  %v4_d450 = inttoptr i32 %v3_d450 to i16*
  store i16 %v5_d3b8, i16* %v4_d450, align 2
  %v0_d454 = load i32, i32* %r2.global-to-local, align 4
  %v3_d454 = udiv i32 %v0_d454, 256
  %v1_d458 = and i32 %v3_d454, 65280
  %v4_d45c = udiv i32 %v0_d454, 16777216
  %v5_d45c = or i32 %v1_d458, %v4_d45c
  store i32 %v5_d45c, i32* %ip.global-to-local, align 4
  %v2_d464 = load i32, i32* @lr, align 4
  %v3_d464 = add i32 %v2_d464, 9
  %v4_d464 = inttoptr i32 %v3_d464 to i8*
  store i8 17, i8* %v4_d464, align 1
  %v0_d468 = load i32, i32* %r4.global-to-local, align 4
  %v2_d468 = icmp eq i32 %v0_d468, 0
  store i32 ptrtoint (i32* @global_var_22418.77 to i32), i32* %r3.global-to-local, align 4
  br i1 %v2_d468, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d3c8
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_d474 = load i32, i32* @lr, align 4
  %v4_d474 = add i32 %v3_d474, 6
  %v5_d474 = inttoptr i32 %v4_d474 to i16*
  store i16 64, i16* %v5_d474, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d3c8, %bb
  %v2_d478 = load i32, i32* @global_var_22418.77, align 4
  store i32 %v2_d478, i32* %r2.global-to-local, align 4
  %v1_d47c = load i32, i32* @lr, align 4
  %v2_d47c = add i32 %v1_d47c, 12
  %v3_d47c = inttoptr i32 %v2_d47c to i32*
  store i32 %v2_d478, i32* %v3_d47c, align 4
  %v0_d480 = load i32, i32* @r5, align 4
  %v1_d480 = add i32 %v0_d480, 16
  %v2_d480 = inttoptr i32 %v1_d480 to i32*
  %v3_d480 = load i32, i32* %v2_d480, align 4
  store i32 %v3_d480, i32* %r3.global-to-local, align 4
  %v0_d484 = load i32, i32* @lr, align 4
  %v1_d484 = add i32 %v0_d484, 20
  store i32 %v1_d484, i32* %r4.global-to-local, align 4
  %v0_d488 = load i32, i32* %ip.global-to-local, align 4
  %v1_d488 = trunc i32 %v0_d488 to i16
  %v3_d488 = add i32 %v0_d484, 24
  %v4_d488 = inttoptr i32 %v3_d488 to i16*
  store i16 %v1_d488, i16* %v4_d488, align 2
  %v0_d48c = load i32, i32* %r3.global-to-local, align 4
  %v1_d48c = load i32, i32* @lr, align 4
  %v2_d48c = add i32 %v1_d48c, 16
  %v3_d48c = inttoptr i32 %v2_d48c to i32*
  store i32 %v0_d48c, i32* %v3_d48c, align 4
  store i32 %v4_d490, i32* %ip.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_d498 = load i32, i32* @lr, align 4
  %v2_d498 = add i32 %v1_d498, 28
  %v3_d498 = inttoptr i32 %v2_d498 to i32*
  store i32 -1, i32* %v3_d498, align 4
  %v0_d49c = load i32, i32* %ip.global-to-local, align 4
  %v1_d49c = trunc i32 %v0_d49c to i16
  %v2_d49c = load i32, i32* %r4.global-to-local, align 4
  %v3_d49c = add i32 %v2_d49c, 2
  %v4_d49c = inttoptr i32 %v3_d49c to i16*
  store i16 %v1_d49c, i16* %v4_d49c, align 2
  %v0_d4a0 = load i32, i32* @lr, align 4
  %v1_d4a0 = add i32 %v0_d4a0, 32
  %v0_d4a4 = load i32, i32* @r6, align 4
  %v1_d4a4 = trunc i32 %v0_d4a4 to i16
  %v3_d4a4 = add i32 %v0_d4a0, 20
  %v4_d4a4 = inttoptr i32 %v3_d4a4 to i16*
  store i16 %v1_d4a4, i16* %v4_d4a4, align 2
  %v3_d4a8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d4a8, i32* %r2.global-to-local, align 4
  %v3_d4ac = call i32 @function_118dc(i32 %v1_d4a0, i32 %v3_d314, i32 %v3_d4a8)
  %v3_d4b0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d4b0, i32* %r3.global-to-local, align 4
  %v1_d4b4 = add i32 %v3_d4b0, 1
  store i32 %v1_d4b4, i32* @r4, align 4
  %v1_d4b8 = load i32, i32* @fp, align 4
  store i32 %v1_d4b4, i32* %stack_var_-44, align 4
  %v5_d4c0 = icmp slt i32 %v1_d4b4, %v1_d4b8
  br i1 %v5_d4c0, label %dec_label_pc_d3c8, label %dec_label_pc_d4c4.preheader

dec_label_pc_d4c4.preheader:                      ; preds = %.thread, %dec_label_pc_d360
  %v0_d4c8.ph = phi i32 [ 0, %dec_label_pc_d360 ], [ %v1_d4b8, %.thread ]
  %v3_d4e0 = icmp eq i32 %v3_d374, 65535
  br label %dec_label_pc_d4c4

dec_label_pc_d4c4:                                ; preds = %dec_label_pc_d4c4.preheader, %dec_label_pc_d644.dec_label_pc_d4c4_crit_edge
  %v0_d4c8 = phi i32 [ %v0_d4c8.pre, %dec_label_pc_d644.dec_label_pc_d4c4_crit_edge ], [ %v0_d4c8.ph, %dec_label_pc_d4c4.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_d4c8 = icmp eq i32 %v0_d4c8, 0
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_d4c8, label %dec_label_pc_d644, label %dec_label_pc_d4d4

dec_label_pc_d4d4:                                ; preds = %dec_label_pc_d4c4
  br label %dec_label_pc_d588

dec_label_pc_d4dc:                                ; preds = %dec_label_pc_d588
  br i1 %v3_d4e0, label %dec_label_pc_d610, label %dec_label_pc_d4e8

dec_label_pc_d4e8:                                ; preds = %dec_label_pc_d5b0.dec_label_pc_d4e8_crit_edge, %dec_label_pc_d4dc
  %v1_d4ec = phi i32 [ %v1_d4ec.pre, %dec_label_pc_d5b0.dec_label_pc_d4e8_crit_edge ], [ 65535, %dec_label_pc_d4dc ]
  store i32 %v3_d378, i32* %r2.global-to-local, align 4
  %v9_d4ec = icmp eq i32 %v3_d378, %v1_d4ec
  br i1 %v9_d4ec, label %dec_label_pc_d624, label %dec_label_pc_d4f4

dec_label_pc_d4f4:                                ; preds = %dec_label_pc_d610.dec_label_pc_d4f4_crit_edge, %dec_label_pc_d4e8
  %v1_d4f8 = phi i32 [ %v1_d4f8.pre, %dec_label_pc_d610.dec_label_pc_d4f4_crit_edge ], [ %v1_d4ec, %dec_label_pc_d4e8 ]
  store i32 %v3_d37c, i32* %r3.global-to-local, align 4
  %v9_d4f8 = icmp eq i32 %v3_d37c, %v1_d4f8
  br i1 %v9_d4f8, label %dec_label_pc_d638, label %dec_label_pc_d500

dec_label_pc_d500:                                ; preds = %dec_label_pc_d624, %dec_label_pc_d4f4, %dec_label_pc_d638
  store i32 0, i32* @r4, align 4
  %v2_d508 = load i32, i32* @r5, align 4
  %v3_d508 = add i32 %v2_d508, 10
  %v4_d508 = inttoptr i32 %v3_d508 to i16*
  store i16 0, i16* %v4_d508, align 2
  %v0_d50c = load i32, i32* @r5, align 4
  store i32 %v0_d50c, i32* @r0, align 4
  %v2_d510 = call i32 @function_dd58(i32 %v0_d50c, i32 20)
  %v3_d510 = trunc i32 %v2_d510 to i16
  %v3_d514 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d514, i32* %r3.global-to-local, align 4
  %v3_d518 = load i32, i32* @r5, align 4
  %v4_d518 = add i32 %v3_d518, 10
  %v5_d518 = inttoptr i32 %v4_d518 to i16*
  store i16 %v3_d510, i16* %v5_d518, align 2
  %v0_d51c = load i32, i32* @r6, align 4
  store i32 %v0_d51c, i32* @r1, align 4
  %v1_d520 = add i32 %v0_d51c, 4
  %v2_d520 = inttoptr i32 %v1_d520 to i16*
  %v3_d520 = load i16, i16* %v2_d520, align 2
  %v4_d520 = zext i16 %v3_d520 to i32
  store i32 %v4_d520, i32* %r2.global-to-local, align 4
  %v0_d524 = load i32, i32* @r4, align 4
  %v1_d524 = trunc i32 %v0_d524 to i16
  %v3_d524 = add i32 %v0_d51c, 6
  %v4_d524 = inttoptr i32 %v3_d524 to i16*
  store i16 %v1_d524, i16* %v4_d524, align 2
  %v0_d528 = load i32, i32* %r3.global-to-local, align 4
  %v1_d528 = add i32 %v0_d528, 12
  store i32 %v1_d528, i32* %r3.global-to-local, align 4
  %v0_d52c = load i32, i32* @r5, align 4
  %v4_d530 = call i32 @function_dda8(i32 %v0_d52c, i32 %v0_d51c, i32 %v4_d520, i32 %v1_d528)
  %v5_d530 = trunc i32 %v4_d530 to i16
  %v3_d534 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d534, i32* %r3.global-to-local, align 4
  %v3_d538 = mul i32 %v3_d534, 32
  store i32 %v3_d538, i32* %lr.global-to-local, align 4
  %v3_d53c = load i32, i32* @r6, align 4
  %v4_d53c = add i32 %v3_d53c, 6
  %v5_d53c = inttoptr i32 %v4_d53c to i16*
  store i16 %v5_d530, i16* %v5_d53c, align 2
  %v0_d540 = load i32, i32* %lr.global-to-local, align 4
  %v1_d540 = load i32, i32* %r3.global-to-local, align 4
  %tmp45 = mul i32 %v1_d540, -8
  %v5_d540 = add i32 %v0_d540, %tmp45
  store i32 %v5_d540, i32* %lr.global-to-local, align 4
  %v0_d544 = load i32, i32* @r6, align 4
  %v1_d544 = add i32 %v0_d544, 2
  %v2_d544 = inttoptr i32 %v1_d544 to i16*
  %v3_d544 = load i16, i16* %v2_d544, align 2
  %v3_d548 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d548, i32* %r2.global-to-local, align 4
  %v1_d54c = load i32, i32* @r8, align 4
  %v2_d54c = add i32 %v1_d54c, %v5_d540
  store i32 %v2_d54c, i32* @lr, align 4
  %v3_d550 = add i32 %v2_d54c, 2
  %v4_d550 = inttoptr i32 %v3_d550 to i16*
  store i16 %v3_d544, i16* %v4_d550, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_d55c = load i32, i32* @r5, align 4
  %v0_d560 = load i32, i32* %r2.global-to-local, align 4
  %v1_d560 = add i32 %v0_d560, 32
  store i32 %v1_d560, i32* %r2.global-to-local, align 4
  %v0_d564 = load i32, i32* @sl, align 4
  %v0_d568 = load i32, i32* @lr, align 4
  %v6_d570 = call i32 @function_12c60(i32 %v0_d564, i32 %v0_d55c, i32 %v1_d560, i32 16384, i32 %v0_d568, i32 16)
  %v3_d574 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d574, i32* %r3.global-to-local, align 4
  %v1_d578 = add i32 %v3_d574, 1
  %v1_d57c = load i32, i32* @fp, align 4
  store i32 %v1_d578, i32* %stack_var_-44, align 4
  %v6_d584 = icmp slt i32 %v1_d578, %v1_d57c
  br i1 %v6_d584, label %dec_label_pc_d588, label %dec_label_pc_d644

dec_label_pc_d588:                                ; preds = %dec_label_pc_d500, %dec_label_pc_d4d4
  %v1_d598 = phi i32 [ %v1_d578, %dec_label_pc_d500 ], [ 0, %dec_label_pc_d4d4 ]
  %v5_d58c = mul i32 %v1_d598, 24
  %v1_d590 = load i32, i32* @r8, align 4
  %v2_d590 = add i32 %v1_d590, %v5_d58c
  store i32 %v2_d590, i32* %r3.global-to-local, align 4
  %v1_d594 = add i32 %v2_d590, 20
  %v2_d594 = inttoptr i32 %v1_d594 to i8*
  %v3_d594 = load i8, i8* %v2_d594, align 1
  %v4_d594 = zext i8 %v3_d594 to i32
  store i32 %v4_d594, i32* %r2.global-to-local, align 4
  %v0_d598 = load i32, i32* @sb, align 4
  %v4_d598 = mul i32 %v1_d598, 4
  %v5_d598 = add i32 %v0_d598, %v4_d598
  %v6_d598 = inttoptr i32 %v5_d598 to i32*
  %v7_d598 = load i32, i32* %v6_d598, align 4
  store i32 %v7_d598, i32* @r5, align 4
  store i32 65535, i32* @r7, align 4
  %v1_d5a8 = add i32 %v7_d598, 20
  store i32 %v1_d5a8, i32* @r6, align 4
  %tmp46 = icmp ugt i8 %v3_d594, 31
  br i1 %tmp46, label %dec_label_pc_d4dc, label %dec_label_pc_d5b0

dec_label_pc_d5b0:                                ; preds = %dec_label_pc_d588
  %v1_d5b0 = add i32 %v2_d590, 16
  %v2_d5b0 = inttoptr i32 %v1_d5b0 to i32*
  %v3_d5b0 = load i32, i32* %v2_d5b0, align 4
  store i32 %v3_d5b0, i32* %r4.global-to-local, align 4
  %v0_d5b4 = call i32 @function_f18c()
  %v3_d5b8 = load i32, i32* %stack_var_-44, align 4
  %v5_d5c0 = mul i32 %v3_d5b8, 24
  %v1_d5c4 = and i32 %v3_d5b0, 16711680
  store i32 %v1_d5c4, i32* %ip.global-to-local, align 4
  %v3_d5c8 = udiv i32 %v3_d5b0, 16777216
  %v4_d5cc = udiv i32 %v1_d5c4, 256
  %v5_d5cc = or i32 %v4_d5cc, %v3_d5c8
  store i32 %v5_d5cc, i32* %r2.global-to-local, align 4
  %v1_d5d0 = load i32, i32* @r8, align 4
  %v2_d5d0 = add i32 %v1_d5d0, %v5_d5c0
  %v1_d5d4 = and i32 %v3_d5b0, 65280
  store i32 %v1_d5d4, i32* %r3.global-to-local, align 4
  %v1_d5d8 = add i32 %v2_d5d0, 20
  %v2_d5d8 = inttoptr i32 %v1_d5d8 to i8*
  %v3_d5d8 = load i8, i8* %v2_d5d8, align 1
  %v4_d5d8 = zext i8 %v3_d5d8 to i32
  store i32 %v4_d5d8, i32* %ip.global-to-local, align 4
  %v5_d5e0 = call i32 @llvm.bswap.i32(i32 %v3_d5b0)
  %v7_d5e4 = lshr i32 %v0_d5b4, %v4_d5d8
  %v8_d5e4 = add i32 %v7_d5e4, %v5_d5e0
  store i32 %v8_d5e4, i32* %r2.global-to-local, align 4
  %v5_d600 = call i32 @llvm.bswap.i32(i32 %v8_d5e4)
  store i32 %v5_d600, i32* %r3.global-to-local, align 4
  %v1_d604 = load i32, i32* @r7, align 4
  %v9_d604 = icmp eq i32 %v3_d374, %v1_d604
  %v1_d608 = load i32, i32* @r5, align 4
  %v2_d608 = add i32 %v1_d608, 16
  %v3_d608 = inttoptr i32 %v2_d608 to i32*
  store i32 %v5_d600, i32* %v3_d608, align 4
  br i1 %v9_d604, label %dec_label_pc_d610, label %dec_label_pc_d5b0.dec_label_pc_d4e8_crit_edge

dec_label_pc_d5b0.dec_label_pc_d4e8_crit_edge:    ; preds = %dec_label_pc_d5b0
  %v1_d4ec.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d4e8

dec_label_pc_d610:                                ; preds = %dec_label_pc_d5b0, %dec_label_pc_d4dc
  %v0_d610 = call i32 @function_f18c()
  %v1_d610 = trunc i32 %v0_d610 to i16
  store i32 %v3_d378, i32* %r2.global-to-local, align 4
  %v1_d618 = load i32, i32* @r7, align 4
  %v9_d618 = icmp eq i32 %v3_d378, %v1_d618
  %v3_d61c = load i32, i32* @r5, align 4
  %v4_d61c = add i32 %v3_d61c, 4
  %v5_d61c = inttoptr i32 %v4_d61c to i16*
  store i16 %v1_d610, i16* %v5_d61c, align 2
  br i1 %v9_d618, label %dec_label_pc_d624, label %dec_label_pc_d610.dec_label_pc_d4f4_crit_edge

dec_label_pc_d610.dec_label_pc_d4f4_crit_edge:    ; preds = %dec_label_pc_d610
  %v1_d4f8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_d4f4

dec_label_pc_d624:                                ; preds = %dec_label_pc_d610, %dec_label_pc_d4e8
  %v0_d624 = call i32 @function_f18c()
  %v1_d624 = trunc i32 %v0_d624 to i16
  store i32 %v3_d37c, i32* %r3.global-to-local, align 4
  %v1_d62c = load i32, i32* @r7, align 4
  %v9_d62c = icmp eq i32 %v3_d37c, %v1_d62c
  %v3_d630 = load i32, i32* @r5, align 4
  %v4_d630 = add i32 %v3_d630, 20
  %v5_d630 = inttoptr i32 %v4_d630 to i16*
  store i16 %v1_d624, i16* %v5_d630, align 2
  br i1 %v9_d62c, label %dec_label_pc_d638, label %dec_label_pc_d500

dec_label_pc_d638:                                ; preds = %dec_label_pc_d624, %dec_label_pc_d4f4
  %v0_d638 = call i32 @function_f18c()
  %v1_d638 = trunc i32 %v0_d638 to i16
  %v3_d63c = load i32, i32* @r6, align 4
  %v4_d63c = add i32 %v3_d63c, 2
  %v5_d63c = inttoptr i32 %v4_d63c to i16*
  store i16 %v1_d638, i16* %v5_d63c, align 2
  br label %dec_label_pc_d500

dec_label_pc_d644:                                ; preds = %dec_label_pc_d500, %dec_label_pc_d4c4
  %v2_d648 = call i32 @function_12150(i32* null)
  store i32 %v2_d2fc, i32* %ip.global-to-local, align 4
  %v6_d654 = icmp slt i32 %v2_d2fc, %v2_d648
  br i1 %v6_d654, label %dec_label_pc_d658, label %dec_label_pc_d644.dec_label_pc_d4c4_crit_edge

dec_label_pc_d644.dec_label_pc_d4c4_crit_edge:    ; preds = %dec_label_pc_d644
  %v0_d4c8.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_d4c4

dec_label_pc_d658:                                ; preds = %dec_label_pc_d644, %dec_label_pc_d208, %dec_label_pc_d664
  %v1_d660 = phi i32 [ %v3_d328, %dec_label_pc_d208 ], [ %v1_d668, %dec_label_pc_d664 ], [ %v2_d648, %dec_label_pc_d644 ]
  store i32 %v3_d208, i32* %r4.global-to-local, align 4
  store i32 %v27_d208, i32* %lr.global-to-local, align 4
  ret i32 %v1_d660

dec_label_pc_d664:                                ; preds = %dec_label_pc_d338
  %v0_d664 = load i32, i32* @sl, align 4
  %v1_d668 = call i32 @function_124d0(i32 %v0_d664)
  br label %dec_label_pc_d658

; uselistorder directives
  uselistorder i32 %v5_d600, { 1, 0 }
  uselistorder i32 %v3_d5b0, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_d578, { 1, 2, 0 }
  uselistorder i32 %v5_d540, { 1, 0 }
  uselistorder i32 %v0_d51c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_d4b4, { 1, 0, 2 }
  uselistorder i32 %v3_d418, { 1, 0 }
  uselistorder i32 %v0_d3dc, { 1, 2, 0 }
  uselistorder i32 %v3_d3b4, { 1, 0 }
  uselistorder i32 %v3_d374, { 0, 2, 1 }
  uselistorder i32 %v0_d36c, { 1, 0, 2 }
  uselistorder i32 %v3_d328, { 1, 2, 3, 0 }
  uselistorder i32 %v2_d2fc, { 1, 0 }
  uselistorder i32 %v6_d2cc, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_d2b4, { 1, 0 }
  uselistorder i32 %v6_d288, { 1, 0 }
  uselistorder i32 %v7_d270, { 1, 0, 2 }
  uselistorder i32 %v5_d24c, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 12, 4, 5, 6, 7, 8, 9, 10, 11, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 9, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0 }
  uselistorder label %dec_label_pc_d658, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d500, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d4c4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d674(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_d674:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v9_d674 = load i32, i32* @r6, align 4
  %v18_d674 = load i32, i32* @sb, align 4
  %v27_d674 = load i32, i32* @lr, align 4
  store i32 0, i32* @sl, align 4
  store i32 %arg1, i32* @fp, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_d6a4 = call i32 @function_1384c(i32 %arg2, i32 4)
  %v0_d6a8 = load i32, i32* @r4, align 4
  store i32 %v0_d6a8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d6b4 = load i32, i32* @sl, align 4
  store i32 %v0_d6b4, i32* %r3.global-to-local, align 4
  %v0_d6b8 = load i32, i32* @r5, align 4
  store i32 %v0_d6b8, i32* %r0.global-to-local, align 4
  %v5_d6bc = inttoptr i32 %v0_d6a8 to i32*
  %v6_d6bc = call i32 @function_8258(i32 %v0_d6b8, i32* %v5_d6bc, i32 2, i32 %v0_d6b4)
  %v1_d6c8 = urem i32 %v6_d6bc, 256
  store i32 %v1_d6c8, i32* %ip.global-to-local, align 4
  %v0_d6cc = load i32, i32* @r4, align 4
  store i32 %v0_d6cc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d6d8 = load i32, i32* @r5, align 4
  store i32 %v0_d6d8, i32* %r0.global-to-local, align 4
  %v6_d6e0 = inttoptr i32 %v0_d6cc to i32*
  %v7_d6e0 = call i32 @function_8258(i32 %v0_d6d8, i32* %v6_d6e0, i32 3, i32 65535)
  %v0_d6e4 = load i32, i32* @r4, align 4
  store i32 %v0_d6e4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_d6f4 = load i32, i32* @r5, align 4
  store i32 %v0_d6f4, i32* %r0.global-to-local, align 4
  %v5_d6f8 = inttoptr i32 %v0_d6e4 to i32*
  %v6_d6f8 = call i32 @function_8258(i32 %v0_d6f4, i32* %v5_d6f8, i32 4, i32 64)
  %v0_d700 = load i32, i32* @r4, align 4
  store i32 %v0_d700, i32* %r1.global-to-local, align 4
  %v1_d704 = urem i32 %v6_d6f8, 256
  store i32 %v1_d704, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_d70c = load i32, i32* @sl, align 4
  store i32 %v0_d70c, i32* %r3.global-to-local, align 4
  %v0_d710 = load i32, i32* @r5, align 4
  store i32 %v0_d710, i32* %r0.global-to-local, align 4
  %v6_d718 = inttoptr i32 %v0_d700 to i32*
  %v7_d718 = call i32 @function_8258(i32 %v0_d710, i32* %v6_d718, i32 5, i32 %v0_d70c)
  %v1_d724 = urem i32 %v7_d718, 256
  store i32 %v1_d724, i32* %ip.global-to-local, align 4
  %v0_d728 = load i32, i32* @r4, align 4
  store i32 %v0_d728, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d734 = load i32, i32* @r5, align 4
  store i32 %v0_d734, i32* %r0.global-to-local, align 4
  %v5_d73c = inttoptr i32 %v0_d728 to i32*
  %v6_d73c = call i32 @function_8258(i32 %v0_d734, i32* %v5_d73c, i32 6, i32 65535)
  %v0_d740 = load i32, i32* @r4, align 4
  store i32 %v0_d740, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v0_d750 = load i32, i32* @r5, align 4
  store i32 %v0_d750, i32* %r0.global-to-local, align 4
  %v5_d754 = inttoptr i32 %v0_d740 to i32*
  %v6_d754 = call i32 @function_8258(i32 %v0_d750, i32* %v5_d754, i32 7, i32 53)
  %v0_d75c = load i32, i32* @r4, align 4
  store i32 %v0_d75c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v0_d76c = load i32, i32* @r5, align 4
  store i32 %v0_d76c, i32* %r0.global-to-local, align 4
  %v5_d770 = inttoptr i32 %v0_d75c to i32*
  %v6_d770 = call i32 @function_8258(i32 %v0_d76c, i32* %v5_d770, i32 9, i32 65535)
  %v0_d774 = load i32, i32* @r4, align 4
  store i32 %v0_d774, i32* %r1.global-to-local, align 4
  %v0_d77c = load i32, i32* @sl, align 4
  store i32 %v0_d77c, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_d784 = load i32, i32* @r5, align 4
  store i32 %v0_d784, i32* %r0.global-to-local, align 4
  %v5_d788 = inttoptr i32 %v0_d774 to i32*
  %v6_d788 = call i32 @function_8258(i32 %v0_d784, i32* %v5_d788, i32 %v0_d77c, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_d790 = load i32, i32* @sl, align 4
  store i32 %v0_d790, i32* %r3.global-to-local, align 4
  %v0_d794 = load i32, i32* @r4, align 4
  store i32 %v0_d794, i32* %r1.global-to-local, align 4
  %v0_d79c = load i32, i32* @r5, align 4
  store i32 %v0_d79c, i32* %r0.global-to-local, align 4
  %v5_d7a0 = inttoptr i32 %v0_d794 to i32*
  %v6_d7a0 = call i32 @function_8190(i32 %v0_d79c, i32* %v5_d7a0, i32 8, i32 %v0_d790, i32 %v6_d788)
  store i32 %v6_d7a0, i32* @r7, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_d7ac = call i32 @function_10e48(i32 37)
  %v0_d7b0 = load i32, i32* @sl, align 4
  store i32 %v0_d7b0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v2_d7b8 = inttoptr i32 %v0_d7b0 to i32*
  %v3_d7b8 = call i32 @function_10d84(i32 37, i32* %v2_d7b8)
  store i32 %v3_d7b8, i32* %r0.global-to-local, align 4
  %v0_d7bc = load i32, i32* @sl, align 4
  store i32 %v0_d7bc, i32* %r1.global-to-local, align 4
  %v2_d7c0 = call i32 @function_120dc(i32 %v3_d7b8, i32 %v0_d7bc)
  store i32 %v2_d7c0, i32* @r4, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_d7cc = call i32 @function_10da8(i32 37)
  store i32 %v1_d7cc, i32* %r0.global-to-local, align 4
  %v0_d7d0 = load i32, i32* @r4, align 4
  %v1_d7d0 = load i32, i32* @sl, align 4
  %v9_d7d0 = icmp eq i32 %v0_d7d0, %v1_d7d0
  store i1 %v9_d7d0, i1* %cpsr_z.global-to-local, align 1
  %v5_d7d4 = icmp slt i32 %v0_d7d0, %v1_d7d0
  br i1 %v5_d7d4, label %dec_label_pc_d890, label %dec_label_pc_d7d8

dec_label_pc_d7d8:                                ; preds = %dec_label_pc_d674
  %v2_d7dc = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_d7dc, i32* %sb.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_d7dc, i32* %r1.global-to-local, align 4
  store i32 %v0_d7d0, i32* %r0.global-to-local, align 4
  %v1_d7ec = call i32 @function_12268(i32 %v0_d7d0)
  store i32 %v1_d7ec, i32* @r6, align 4
  %v0_d7f4 = load i32, i32* @r4, align 4
  store i32 %v0_d7f4, i32* %r0.global-to-local, align 4
  %v1_d7f8 = call i32 @function_124d0(i32 %v0_d7f4)
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_d800 = call i32 @function_10e48(i32 38)
  %v0_d804 = load i32, i32* @sl, align 4
  store i32 %v0_d804, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v2_d80c = inttoptr i32 %v0_d804 to i32*
  %v3_d80c = call i32 @function_10d84(i32 38, i32* %v2_d80c)
  %v0_d810 = load i32, i32* @r6, align 4
  store i32 %v0_d810, i32* @r1, align 4
  store i32 %v3_d80c, i32* %r2.global-to-local, align 4
  store i32 %v2_d7dc, i32* %r0.global-to-local, align 4
  %v3_d81c = bitcast i32* %stack_var_-2124 to i8*
  %v4_d81c = call i32 @function_11bbc(i8* %v3_d81c, i32 %v0_d810, i32 %v3_d80c)
  store i32 %v4_d81c, i32* @r8, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_d828 = call i32 @function_10da8(i32 38)
  store i32 %v1_d828, i32* %r0.global-to-local, align 4
  %v0_d82c = load i32, i32* @r8, align 4
  %v7_d82c = icmp eq i32 %v0_d82c, -1
  store i1 %v7_d82c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d82c, label %dec_label_pc_d890, label %dec_label_pc_d834

dec_label_pc_d834:                                ; preds = %dec_label_pc_d7d8
  %v0_d834 = load i32, i32* @r6, align 4
  %v9_d834 = icmp eq i32 %v0_d834, %v0_d82c
  store i1 %v9_d834, i1* %cpsr_z.global-to-local, align 1
  %v7_d838 = icmp sgt i32 %v0_d834, %v0_d82c
  br i1 %v7_d838, label %dec_label_pc_d83c, label %dec_label_pc_d890

dec_label_pc_d83c:                                ; preds = %dec_label_pc_d834
  %v0_d83c = load i32, i32* @sl, align 4
  store i32 %v0_d83c, i32* %r1.global-to-local, align 4
  %v0_d840 = load i32, i32* %sb.global-to-local, align 4
  %v2_d840 = add i32 %v0_d840, %v0_d82c
  store i32 %v2_d840, i32* %ip.global-to-local, align 4
  %v1_d850 = add i32 %v0_d834, -1
  br label %dec_label_pc_d848

dec_label_pc_d848:                                ; preds = %dec_label_pc_d884, %dec_label_pc_d83c
  %v0_d884 = phi i32 [ %v1_d884, %dec_label_pc_d884 ], [ %v0_d82c, %dec_label_pc_d83c ]
  %v0_d86c = phi i32 [ %v0_d86c27, %dec_label_pc_d884 ], [ %v0_d83c, %dec_label_pc_d83c ]
  %v0_d84c = phi i32 [ %v0_d84c23, %dec_label_pc_d884 ], [ %v0_d83c, %dec_label_pc_d83c ]
  %v0_d854 = phi i32 [ %v1_d854, %dec_label_pc_d884 ], [ %v2_d840, %dec_label_pc_d83c ]
  %v1_d848 = inttoptr i32 %v0_d854 to i8*
  %v2_d848 = load i8, i8* %v1_d848, align 1
  %v3_d848 = zext i8 %v2_d848 to i32
  store i32 %v3_d848, i32* %r0.global-to-local, align 4
  %v2_d84c = icmp eq i32 %v0_d84c, 0
  store i1 %v2_d84c, i1* %cpsr_z.global-to-local, align 1
  %v1_d854 = add i32 %v0_d854, 1
  store i32 %v1_d854, i32* %ip.global-to-local, align 4
  %v1_d858 = add nsw i32 %v3_d848, -48
  store i32 %v1_d858, i32* @lr, align 4
  br i1 %v2_d84c, label %dec_label_pc_d860, label %dec_label_pc_d870

dec_label_pc_d860:                                ; preds = %dec_label_pc_d848
  %v7_d860 = icmp eq i8 %v2_d848, 9
  store i1 %v7_d860, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d860, label %dec_label_pc_d884, label %bb

bb:                                               ; preds = %dec_label_pc_d860
  %v8_d864 = icmp eq i8 %v2_d848, 32
  store i1 %v8_d864, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_d864, label %dec_label_pc_d884, label %dec_label_pc_d86c

dec_label_pc_d86c:                                ; preds = %bb
  %v1_d86c = add i32 %v0_d86c, 1
  store i32 %v1_d86c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d870

dec_label_pc_d870:                                ; preds = %dec_label_pc_d848, %dec_label_pc_d86c
  %v0_d86c28 = phi i32 [ %v0_d86c, %dec_label_pc_d848 ], [ %v1_d86c, %dec_label_pc_d86c ]
  %v0_d84c24 = phi i32 [ %v0_d84c, %dec_label_pc_d848 ], [ %v1_d86c, %dec_label_pc_d86c ]
  %v7_d870 = icmp eq i8 %v2_d848, 46
  store i1 %v7_d870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d870, label %dec_label_pc_d87c, label %bb113

bb113:                                            ; preds = %dec_label_pc_d870
  %v3_d874 = icmp ugt i32 %v1_d858, 8
  %v8_d874 = icmp eq i32 %v1_d858, 9
  store i1 %v8_d874, i1* %cpsr_z.global-to-local, align 1
  %v2_d878 = xor i1 %v8_d874, true
  %v3_d878 = and i1 %v3_d874, %v2_d878
  br i1 %v3_d878, label %dec_label_pc_dce4, label %dec_label_pc_d87c

dec_label_pc_d87c:                                ; preds = %dec_label_pc_d870, %bb113
  %v9_d87c = icmp eq i32 %v1_d850, %v0_d884
  store i1 %v9_d87c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d87c, label %dec_label_pc_dce4, label %dec_label_pc_d884

dec_label_pc_d884:                                ; preds = %dec_label_pc_d860, %dec_label_pc_d87c, %bb
  %v0_d86c27 = phi i32 [ %v0_d86c, %dec_label_pc_d860 ], [ %v0_d86c28, %dec_label_pc_d87c ], [ %v0_d86c, %bb ]
  %v0_d84c23 = phi i32 [ 0, %dec_label_pc_d860 ], [ %v0_d84c24, %dec_label_pc_d87c ], [ 0, %bb ]
  %v1_d884 = add i32 %v0_d884, 1
  %v9_d888 = icmp eq i32 %v1_d884, %v0_d834
  store i1 %v9_d888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d888, label %dec_label_pc_d890, label %dec_label_pc_d848

dec_label_pc_d890:                                ; preds = %dec_label_pc_d884, %dec_label_pc_d834, %dec_label_pc_d7d8, %dec_label_pc_d674
  %v0_d890 = call i32 @function_f18c()
  %v1_d894 = urem i32 %v0_d890, 4
  store i32 %v1_d894, i32* %r0.global-to-local, align 4
  %v2_d898 = icmp eq i32 %v1_d894, 3
  store i1 %v2_d898, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_d890 to i2
  switch i2 %trunc, label %dec_label_pc_d8c410 [
    i2 0, label %dec_label_pc_dd30
    i2 1, label %dec_label_pc_dd44
    i2 -2, label %dec_label_pc_dd20
    i2 -1, label %dec_label_pc_d8b4
  ]

dec_label_pc_d8b4:                                ; preds = %dec_label_pc_d890
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d8c4

dec_label_pc_d8c410:                              ; preds = %dec_label_pc_d890
  unreachable

dec_label_pc_d8c4:                                ; preds = %dec_label_pc_dd44, %dec_label_pc_dd30, %dec_label_pc_dd20, %dec_label_pc_dce4, %dec_label_pc_d8b4
  %stack_var_-2184.0 = phi i32 [ 33686020, %dec_label_pc_d8b4 ], [ 104859200, %dec_label_pc_dd20 ], [ 707416650, %dec_label_pc_dd44 ], [ 134744072, %dec_label_pc_dd30 ], [ %v1_dd14, %dec_label_pc_dce4 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_d8c8 = call i32 @function_12150(i32* null)
  %v0_d8cc = load i32, i32* @r7, align 4
  %v2_d8cc = icmp eq i32 %v0_d8cc, 0
  store i1 %v2_d8cc, i1* %cpsr_z.global-to-local, align 1
  %v1_d8d0 = load i32, i32* @fp, align 4
  %v2_d8d0 = add i32 %v1_d8d0, %v2_d8c8
  store i32 %v2_d8d0, i32* %r0.global-to-local, align 4
  br i1 %v2_d8cc, label %dec_label_pc_dcbc, label %dec_label_pc_d8dc

dec_label_pc_d8dc:                                ; preds = %dec_label_pc_d8c4
  store i32 %v0_d8cc, i32* %r0.global-to-local, align 4
  %v1_d8e0 = inttoptr i32 %v0_d8cc to i8*
  %v2_d8e0 = call i32 @function_1186c(i8* %v1_d8e0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_d8f4 = call i32 @function_12ce4(i32 2, i32 3, i32 17)
  store i32 %v3_d8f4, i32* %r0.global-to-local, align 4
  %v7_d8f8 = icmp eq i32 %v3_d8f4, -1
  store i1 %v7_d8f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d8f8, label %dec_label_pc_dcbc, label %dec_label_pc_d904

dec_label_pc_d904:                                ; preds = %dec_label_pc_d8dc
  store i32 1, i32* %stack_var_-44, align 4
  %v6_d90c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_d90c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_d920 = call i32 @function_12ca0(i32 %v3_d8f4, i32 0, i32 3, i32 %v6_d90c, i32 4)
  store i32 %v5_d920, i32* %r0.global-to-local, align 4
  %v7_d924 = icmp eq i32 %v5_d920, -1
  store i1 %v7_d924, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d924, label %dec_label_pc_dcb4, label %dec_label_pc_d92c

dec_label_pc_d92c:                                ; preds = %dec_label_pc_d904
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v3_d940 = mul i32 %v7_d6e0, 65536
  store i32 %v3_d940, i32* %r6.global-to-local, align 4
  %v3_d948 = mul i32 %v6_d754, 65536
  store i32 %v3_d948, i32* %sb.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_d958 = urem i32 %v7_d6e0, 65536
  %v3_d95c = urem i32 %v6_d73c, 65536
  store i32 %v3_d95c, i32* %r0.global-to-local, align 4
  %v3_d960 = urem i32 %v6_d754, 65536
  store i32 %v3_d960, i32* %r1.global-to-local, align 4
  %v3_d964 = urem i32 %v6_d770, 65536
  store i32 %v3_d964, i32* %r2.global-to-local, align 4
  %v2_d968 = icmp eq i32 %arg2, 0
  store i1 %v2_d968, i1* %cpsr_z.global-to-local, align 1
  %v1_d96c = urem i32 %v6_d788, 256
  store i32 %v1_d96c, i32* @sl, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_d968, label %dec_label_pc_dccc.critedge, label %dec_label_pc_d988

dec_label_pc_d988:                                ; preds = %dec_label_pc_d92c
  %v3_d93c = mul i32 %v6_d770, 65536
  %v2_d994 = add i32 %v2_d8e0, %v1_d96c
  %v3_d998 = mul i32 %v2_d994, 65536
  %v1_d9a4 = add i32 %v3_d998, 1769472
  %tmp114 = mul nuw nsw i32 %v3_d960, 256
  %v3_d9a8 = and i32 %tmp114, 65280
  %v1_d9ac = add i32 %v3_d998, 3080192
  %tmp115 = udiv i32 %v6_d754, 256
  %v4_d9bc = urem i32 %tmp115, 256
  %v5_d9bc = or i32 %v3_d9a8, %v4_d9bc
  store i32 %v5_d9bc, i32* @sb, align 4
  store i32 %v3_d93c, i32* %ip.global-to-local, align 4
  %tmp116 = udiv i32 %v1_d9a4, 256
  %v3_d9c4 = and i32 %tmp116, 65280
  %tmp117 = udiv i32 %v1_d9ac, 256
  %v3_d9c8 = and i32 %tmp117, 65280
  store i32 %v3_d9c8, i32* %r2.global-to-local, align 4
  %tmp118 = mul i32 %v6_d770, 256
  %v3_d9cc = and i32 %tmp118, 65280
  %v4_d9d0 = udiv i32 %v1_d9a4, 16777216
  %v5_d9d0 = or i32 %v3_d9c4, %v4_d9d0
  store i32 %v5_d9d0, i32* @fp, align 4
  %tmp119 = mul i32 %v7_d6e0, 256
  %v3_d9d8 = and i32 %tmp119, 65280
  store i32 %v3_d9d8, i32* %r1.global-to-local, align 4
  %v4_d9dc = udiv i32 %v1_d9ac, 16777216
  %v5_d9dc = or i32 %v3_d9c8, %v4_d9dc
  store i32 %v5_d9dc, i32* %r3.global-to-local, align 4
  %tmp120 = udiv i32 %v6_d770, 256
  %v4_d9e0 = urem i32 %tmp120, 256
  %v5_d9e0 = or i32 %v4_d9e0, %v3_d9cc
  store i32 %v5_d9e0, i32* @r4, align 4
  store i32 %v2_d8e0, i32* @lr, align 4
  %tmp121 = udiv i32 %v7_d6e0, 256
  %v4_d9e8 = urem i32 %tmp121, 256
  %v5_d9e8 = or i32 %v4_d9e8, %v3_d9d8
  %tmp122 = mul i32 %v6_d73c, 256
  %v3_d9ec = and i32 %tmp122, 65280
  store i32 %v3_d9ec, i32* %r0.global-to-local, align 4
  %tmp123 = udiv i32 %v6_d73c, 256
  %v4_d9fc = urem i32 %tmp123, 256
  %v5_d9fc = or i32 %v4_d9fc, %v3_d9ec
  store i32 %v5_d9fc, i32* @r8, align 4
  store i32 0, i32* @r5, align 4
  %v1_da04 = add i32 %v2_d8e0, 1
  store i32 %v1_da04, i32* @r6, align 4
  %v1_da4c = trunc i32 %v6_d6bc to i8
  %sext = mul i32 %v6_d6f8, 16777216
  %v4_da50 = sdiv i32 %sext, 16777216
  %sext6 = mul nuw i32 %v5_d9dc, 65536
  %v4_da58 = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_d9e8, 65536
  %v4_da5c = sdiv i32 %sext7, 65536
  %sext8 = mul nuw i32 %v5_d9e0, 65536
  %v4_dab8 = sdiv i32 %sext8, 65536
  %v2_dadc = icmp eq i32 %v2_d8e0, 0
  %tmp124 = icmp slt i32 %v2_d8e0, 1
  %v1_da64 = trunc i32 %v4_da50 to i8
  br label %dec_label_pc_da08

dec_label_pc_da08:                                ; preds = %dec_label_pc_db28, %dec_label_pc_d988
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_da10 = call i32 @function_1384c(i32 600, i32 1)
  store i32 %v2_da10, i32* %r0.global-to-local, align 4
  store i32 %v2_d6a4, i32* %r1.global-to-local, align 4
  %v3_da18 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_da18, i32* %r3.global-to-local, align 4
  %v2_da1c = load i32, i32* @r5, align 4
  %v5_da1c = mul i32 %v2_da1c, 4
  %v6_da1c = add i32 %v5_da1c, %v2_d6a4
  %v7_da1c = inttoptr i32 %v6_da1c to i32*
  store i32 %v2_da10, i32* %v7_da1c, align 4
  %v0_da20 = load i32, i32* %r1.global-to-local, align 4
  %v1_da20 = load i32, i32* %r3.global-to-local, align 4
  %v4_da20 = mul i32 %v1_da20, 4
  %v5_da20 = add i32 %v4_da20, %v0_da20
  %v6_da20 = inttoptr i32 %v5_da20 to i32*
  %v7_da20 = load i32, i32* %v6_da20, align 4
  store i32 %v7_da20, i32* %r1.global-to-local, align 4
  %v1_da24 = inttoptr i32 %v7_da20 to i8*
  %v2_da24 = load i8, i8* %v1_da24, align 1
  %tmp = urem i8 %v2_da24, 16
  %v1_da28 = zext i8 %tmp to i32
  %v1_da2c = or i32 %v1_da28, 64
  store i32 %v1_da2c, i32* %r2.global-to-local, align 4
  %v1_da30 = trunc i32 %v1_da2c to i8
  store i8 %v1_da30, i8* %v1_da24, align 1
  %v0_da34 = load i32, i32* %r1.global-to-local, align 4
  %v1_da34 = inttoptr i32 %v0_da34 to i8*
  %v2_da34 = load i8, i8* %v1_da34, align 1
  %v1_da38 = and i8 %v2_da34, -16
  %v1_da3c = or i8 %v1_da38, 5
  store i32 %v1_d724, i32* %ip.global-to-local, align 4
  store i8 %v1_da3c, i8* %v1_da34, align 1
  store i32 %v1_d6c8, i32* %lr.global-to-local, align 4
  %v2_da4c = load i32, i32* %r1.global-to-local, align 4
  %v3_da4c = add i32 %v2_da4c, 1
  %v4_da4c = inttoptr i32 %v3_da4c to i8*
  store i8 %v1_da4c, i8* %v4_da4c, align 1
  store i32 %v4_da50, i32* %r3.global-to-local, align 4
  %v0_da54 = load i32, i32* %ip.global-to-local, align 4
  %v2_da54 = icmp eq i32 %v0_da54, 0
  store i1 %v2_da54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_da58, i32* %r0.global-to-local, align 4
  store i32 %v4_da5c, i32* %r2.global-to-local, align 4
  br i1 %v2_da54, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_da08
  store i32 64, i32* %lr.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_da08, %bb125
  %v2_da64 = load i32, i32* %r1.global-to-local, align 4
  %v3_da64 = add i32 %v2_da64, 8
  %v4_da64 = inttoptr i32 %v3_da64 to i8*
  store i8 %v1_da64, i8* %v4_da64, align 1
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_da6c = load i32, i32* %r1.global-to-local, align 4
  %v3_da6c = add i32 %v2_da6c, 9
  %v4_da6c = inttoptr i32 %v3_da6c to i8*
  store i8 17, i8* %v4_da6c, align 1
  %v0_da70 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da70, label %bb128, label %bb127

bb127:                                            ; preds = %bb126
  %v1_da70 = load i32, i32* %lr.global-to-local, align 4
  %v2_da70 = trunc i32 %v1_da70 to i16
  %v3_da70 = load i32, i32* %r1.global-to-local, align 4
  %v4_da70 = add i32 %v3_da70, 6
  %v5_da70 = inttoptr i32 %v4_da70 to i16*
  store i16 %v2_da70, i16* %v5_da70, align 2
  br label %bb128

bb128:                                            ; preds = %bb126, %bb127
  store i32 ptrtoint (i32* @global_var_22418.77 to i32), i32* @lr, align 4
  %v0_da78 = load i32, i32* %r0.global-to-local, align 4
  %v1_da78 = trunc i32 %v0_da78 to i16
  %v2_da78 = load i32, i32* %r1.global-to-local, align 4
  %v3_da78 = add i32 %v2_da78, 2
  %v4_da78 = inttoptr i32 %v3_da78 to i16*
  store i16 %v1_da78, i16* %v4_da78, align 2
  %v0_da7c = load i32, i32* %r2.global-to-local, align 4
  %v1_da7c = trunc i32 %v0_da7c to i16
  %v2_da7c = load i32, i32* %r1.global-to-local, align 4
  %v3_da7c = add i32 %v2_da7c, 4
  %v4_da7c = inttoptr i32 %v3_da7c to i16*
  store i16 %v1_da7c, i16* %v4_da7c, align 2
  %v2_da80 = load i32, i32* @global_var_22418.77, align 4
  store i32 %v2_da80, i32* %r3.global-to-local, align 4
  %v0_da84 = load i32, i32* %r1.global-to-local, align 4
  %v1_da84 = add i32 %v0_da84, 20
  store i32 %v1_da84, i32* %r0.global-to-local, align 4
  %v1_da88 = add i32 %v0_da84, 41
  store i32 %v1_da88, i32* %r2.global-to-local, align 4
  %v0_da8c = load i32, i32* @fp, align 4
  %v1_da8c = trunc i32 %v0_da8c to i16
  %v3_da8c = add i32 %v0_da84, 24
  %v4_da8c = inttoptr i32 %v3_da8c to i16*
  store i16 %v1_da8c, i16* %v4_da8c, align 2
  %v0_da90 = load i32, i32* @sb, align 4
  %v1_da90 = trunc i32 %v0_da90 to i16
  %v2_da90 = load i32, i32* %r0.global-to-local, align 4
  %v3_da90 = add i32 %v2_da90, 2
  %v4_da90 = inttoptr i32 %v3_da90 to i16*
  store i16 %v1_da90, i16* %v4_da90, align 2
  %v0_da94 = load i32, i32* %r1.global-to-local, align 4
  %v1_da94 = add i32 %v0_da94, 28
  store i32 %v1_da94, i32* %ip.global-to-local, align 4
  %v0_da98 = load i32, i32* %r2.global-to-local, align 4
  %v1_da98 = load i32, i32* @sl, align 4
  %v2_da98 = add i32 %v1_da98, %v0_da98
  store i32 %v2_da98, i32* @r4, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_daa4 = load i32, i32* @r8, align 4
  %v1_daa4 = trunc i32 %v0_daa4 to i16
  %v3_daa4 = add i32 %v0_da94, 20
  %v4_daa4 = inttoptr i32 %v3_daa4 to i16*
  store i16 %v1_daa4, i16* %v4_daa4, align 2
  %v0_daa8 = load i32, i32* %r3.global-to-local, align 4
  %v1_daa8 = load i32, i32* %r1.global-to-local, align 4
  %v2_daa8 = add i32 %v1_daa8, 12
  %v3_daa8 = inttoptr i32 %v2_daa8 to i32*
  store i32 %v0_daa8, i32* %v3_daa8, align 4
  %v0_daac = load i32, i32* %r0.global-to-local, align 4
  %v1_daac = trunc i32 %v0_daac to i16
  %v2_daac = load i32, i32* %ip.global-to-local, align 4
  %v3_daac = add i32 %v2_daac, 4
  %v4_daac = inttoptr i32 %v3_daac to i16*
  store i16 %v1_daac, i16* %v4_daac, align 2
  %v0_dab0 = load i32, i32* %r2.global-to-local, align 4
  %v1_dab0 = trunc i32 %v0_dab0 to i16
  %v2_dab0 = load i32, i32* %ip.global-to-local, align 4
  %v3_dab0 = add i32 %v2_dab0, 2
  %v4_dab0 = inttoptr i32 %v3_dab0 to i16*
  store i16 %v1_dab0, i16* %v4_dab0, align 2
  store i32 %stack_var_-2184.0, i32* %r3.global-to-local, align 4
  store i32 %v4_dab8, i32* %ip.global-to-local, align 4
  %v1_dabc = load i32, i32* %r1.global-to-local, align 4
  %v2_dabc = add i32 %v1_dabc, 16
  %v3_dabc = inttoptr i32 %v2_dabc to i32*
  store i32 %stack_var_-2184.0, i32* %v3_dabc, align 4
  %v0_dac0 = load i32, i32* %ip.global-to-local, align 4
  %v1_dac0 = trunc i32 %v0_dac0 to i16
  %v2_dac0 = load i32, i32* %r1.global-to-local, align 4
  %v3_dac0 = add i32 %v2_dac0, 28
  %v4_dac0 = inttoptr i32 %v3_dac0 to i16*
  store i16 %v1_dac0, i16* %v4_dac0, align 2
  %v0_dac4 = load i32, i32* @sl, align 4
  %v1_dac4 = trunc i32 %v0_dac4 to i8
  %v2_dac4 = load i32, i32* %r1.global-to-local, align 4
  %v3_dac4 = add i32 %v2_dac4, 40
  %v4_dac4 = inttoptr i32 %v3_dac4 to i8*
  store i8 %v1_dac4, i8* %v4_dac4, align 1
  %v0_dac8 = load i32, i32* @r4, align 4
  %v1_dac8 = add i32 %v0_dac8, 1
  store i32 %v1_dac8, i32* %r0.global-to-local, align 4
  %v0_dacc = load i32, i32* @r7, align 4
  store i32 %v0_dacc, i32* %r1.global-to-local, align 4
  %v0_dad0 = load i32, i32* @r6, align 4
  store i32 %v0_dad0, i32* %r2.global-to-local, align 4
  %v3_dad4 = call i32 @function_118dc(i32 %v1_dac8, i32 %v0_dacc, i32 %v0_dad0)
  store i32 %v3_dad4, i32* %r0.global-to-local, align 4
  store i32 %v2_d8e0, i32* %lr.global-to-local, align 4
  store i1 %v2_dadc, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp124, label %.dec_label_pc_db28_crit_edge, label %dec_label_pc_daec

.dec_label_pc_db28_crit_edge:                     ; preds = %bb128
  %v5_dae0 = load i32, i32* @r4, align 4
  store i32 %v5_dae0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_db28

dec_label_pc_daec:                                ; preds = %bb128
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_daf0 = load i32, i32* @r4, align 4
  store i32 %v0_daf0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_daf8

dec_label_pc_daf8:                                ; preds = %.thread21, %dec_label_pc_daec
  %v1_db00 = phi i32 [ %v1_db0035, %.thread21 ], [ 0, %dec_label_pc_daec ]
  %v0_db1419 = phi i32 [ %v0_db20, %.thread21 ], [ 0, %dec_label_pc_daec ]
  %v1_daf8 = load i32, i32* @r7, align 4
  %v2_daf8 = add i32 %v1_daf8, %v0_db1419
  %v3_daf8 = inttoptr i32 %v2_daf8 to i8*
  %v4_daf8 = load i8, i8* %v3_daf8, align 1
  %v6_daf8 = zext i8 %v4_daf8 to i32
  store i32 %v6_daf8, i32* %r3.global-to-local, align 4
  %v7_dafc = icmp eq i8 %v4_daf8, 46
  store i1 %v7_dafc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dafc, label %bb129, label %bb131

bb129:                                            ; preds = %dec_label_pc_daf8
  %v2_db00 = trunc i32 %v1_db00 to i8
  %v3_db00 = load i32, i32* %r0.global-to-local, align 4
  %v4_db00 = inttoptr i32 %v3_db00 to i8*
  store i8 %v2_db00, i8* %v4_db00, align 1
  %v0_db08.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_db04 = load i32, i32* %ip.global-to-local, align 4
  %v1_db04 = add i32 %v0_db04, 1
  store i32 %v1_db04, i32* %r2.global-to-local, align 4
  br i1 %v0_db08.pr, label %bb132, label %bb130

bb130:                                            ; preds = %bb129
  %v2_db0817 = urem i32 %v1_db04, 256
  store i32 %v2_db0817, i32* %ip.global-to-local, align 4
  store i32 %v2_d8e0, i32* %r2.global-to-local, align 4
  %v0_db14.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_db14 = add i32 %v0_db14.pre, 1
  store i32 %v1_db14, i32* %r1.global-to-local, align 4
  br label %.thread21

bb131:                                            ; preds = %dec_label_pc_daf8
  %v1_db0413 = add nsw i32 %v1_db00, 1
  %v2_db08 = urem i32 %v1_db0413, 256
  store i32 %v2_db08, i32* %ip.global-to-local, align 4
  store i32 %v2_d8e0, i32* %r2.global-to-local, align 4
  %v1_db1420 = add i32 %v0_db1419, 1
  store i32 %v1_db1420, i32* %r1.global-to-local, align 4
  br label %.thread21

bb132:                                            ; preds = %bb129
  store i32 %v2_d8e0, i32* %r2.global-to-local, align 4
  %v1_db10.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_db10 = load i32, i32* @r4, align 4
  %v3_db10 = add i32 %v2_db10, %v1_db10.pre
  store i32 %v3_db10, i32* %r3.global-to-local, align 4
  %v1_db1465 = add i32 %v1_db10.pre, 1
  store i32 %v1_db1465, i32* %r1.global-to-local, align 4
  %v2_db18 = add i32 %v3_db10, 1
  store i32 %v2_db18, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %.thread21

.thread21:                                        ; preds = %bb131, %bb130, %bb132
  %v0_db20 = phi i32 [ %v1_db14, %bb130 ], [ %v1_db1420, %bb131 ], [ %v1_db1465, %bb132 ]
  %v1_db0035 = phi i32 [ %v2_db0817, %bb130 ], [ %v2_db08, %bb131 ], [ 0, %bb132 ]
  %v9_db20 = icmp eq i32 %v0_db20, %v2_d8e0
  store i1 %v9_db20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_db20, label %dec_label_pc_db28.loopexit, label %dec_label_pc_daf8

dec_label_pc_db28.loopexit:                       ; preds = %.thread21
  %v2_db28.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t71 = trunc i32 %v1_db0035 to i8
  br label %dec_label_pc_db28

dec_label_pc_db28:                                ; preds = %.dec_label_pc_db28_crit_edge, %dec_label_pc_db28.loopexit
  %v0_db28.pre.sink.off0 = phi i8 [ 0, %.dec_label_pc_db28_crit_edge ], [ %extract.t71, %dec_label_pc_db28.loopexit ]
  %v2_db28 = phi i32 [ %v5_dae0, %.dec_label_pc_db28_crit_edge ], [ %v2_db28.pre, %dec_label_pc_db28.loopexit ]
  %v3_db28 = inttoptr i32 %v2_db28 to i8*
  store i8 %v0_db28.pre.sink.off0, i8* %v3_db28, align 1
  %v3_db2c = load i32, i32* %stack_var_-44, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v1_db34 = add i32 %v3_db2c, 1
  store i32 %v1_db34, i32* @r5, align 4
  store i32 %v2_d8e0, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v0_db40 = load i32, i32* @r4, align 4
  %v2_db40 = add i32 %v0_db40, %v2_d8e0
  store i32 %v2_db40, i32* %r2.global-to-local, align 4
  %v9_db44 = icmp eq i32 %v1_db34, %arg2
  store i1 %v9_db44, i1* %cpsr_z.global-to-local, align 1
  %v3_db48 = add i32 %v2_db40, 4
  %v4_db48 = inttoptr i32 %v3_db48 to i16*
  store i16 256, i16* %v4_db48, align 2
  %v0_db4c = load i32, i32* @lr, align 4
  %v1_db4c = trunc i32 %v0_db4c to i16
  %v2_db4c = load i32, i32* %r2.global-to-local, align 4
  %v3_db4c = add i32 %v2_db4c, 2
  %v4_db4c = inttoptr i32 %v3_db4c to i16*
  store i16 %v1_db4c, i16* %v4_db4c, align 2
  %v0_db50 = load i32, i32* @r5, align 4
  store i32 %v0_db50, i32* %stack_var_-44, align 4
  %v8_db54 = icmp slt i32 %v1_db34, %arg2
  br i1 %v8_db54, label %dec_label_pc_da08, label %dec_label_pc_db58

dec_label_pc_db58:                                ; preds = %dec_label_pc_db28, %dec_label_pc_dccc
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 %v2_d968, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_d968, label %dec_label_pc_dccc, label %dec_label_pc_db6c

dec_label_pc_db6c:                                ; preds = %dec_label_pc_db58
  store i32 %v2_d8e0, i32* %r1.global-to-local, align 4
  %v1_db70 = load i32, i32* @sl, align 4
  %v2_db70 = add i32 %v1_db70, %v2_d8e0
  store i32 %v2_db70, i32* %r3.global-to-local, align 4
  %v1_db74 = add i32 %v2_db70, 47
  store i32 %v1_db74, i32* @fp, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_db7c = add i32 %v2_db70, 27
  store i32 %v1_db7c, i32* @sb, align 4
  %v3_dc58 = icmp eq i32 %v3_d958, 65535
  %v3_db88 = icmp eq i32 %v3_d95c, 65535
  br label %dec_label_pc_dc44

dec_label_pc_db84:                                ; preds = %dec_label_pc_dc44
  store i32 %v3_d95c, i32* %ip.global-to-local, align 4
  store i1 %v3_db88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_db88, label %dec_label_pc_dc80, label %dec_label_pc_db90

dec_label_pc_db90:                                ; preds = %dec_label_pc_dc6c.dec_label_pc_db90_crit_edge, %dec_label_pc_db84
  %v1_db94 = phi i32 [ %v1_db94.pre, %dec_label_pc_dc6c.dec_label_pc_db90_crit_edge ], [ 65535, %dec_label_pc_db84 ]
  store i32 %v3_d960, i32* @lr, align 4
  %v9_db94 = icmp eq i32 %v3_d960, %v1_db94
  store i1 %v9_db94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_db94, label %dec_label_pc_dc94, label %dec_label_pc_db9c

dec_label_pc_db9c:                                ; preds = %dec_label_pc_dc80.dec_label_pc_db9c_crit_edge, %dec_label_pc_db90
  %v1_dba0 = phi i32 [ %v1_dba0.pre, %dec_label_pc_dc80.dec_label_pc_db9c_crit_edge ], [ %v1_db94, %dec_label_pc_db90 ]
  store i32 %v3_d964, i32* %r0.global-to-local, align 4
  %v9_dba0 = icmp eq i32 %v3_d964, %v1_dba0
  store i1 %v9_dba0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dba0, label %dec_label_pc_dca8, label %dec_label_pc_dba8

dec_label_pc_dba8:                                ; preds = %dec_label_pc_dc94, %dec_label_pc_db9c, %dec_label_pc_dca8
  %v0_dba8 = load i32, i32* @r7, align 4
  store i32 %v0_dba8, i32* %r0.global-to-local, align 4
  %v0_dbac = load i32, i32* @sl, align 4
  store i32 %v0_dbac, i32* %r1.global-to-local, align 4
  %v2_dbb0 = call i32 @function_f250(i32 %v0_dba8, i32 %v0_dbac)
  %v0_dbb4 = load i32, i32* @r8, align 4
  %v1_dbb4 = trunc i32 %v0_dbb4 to i8
  %v2_dbb4 = load i32, i32* @r7, align 4
  %v3_dbb4 = load i32, i32* @sl, align 4
  %v4_dbb4 = add i32 %v3_dbb4, %v2_dbb4
  %v5_dbb4 = inttoptr i32 %v4_dbb4 to i8*
  store i8 %v1_dbb4, i8* %v5_dbb4, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_dbbc = load i32, i32* @r8, align 4
  %v1_dbbc = trunc i32 %v0_dbbc to i16
  %v2_dbbc = load i32, i32* @r4, align 4
  %v3_dbbc = add i32 %v2_dbbc, 10
  %v4_dbbc = inttoptr i32 %v3_dbbc to i16*
  store i16 %v1_dbbc, i16* %v4_dbbc, align 2
  %v0_dbc0 = load i32, i32* @r4, align 4
  store i32 %v0_dbc0, i32* @r0, align 4
  %v2_dbc4 = call i32 @function_dd58(i32 %v0_dbc0, i32 20)
  %v3_dbc4 = trunc i32 %v2_dbc4 to i16
  store i32 %v2_dbc4, i32* %r0.global-to-local, align 4
  %v3_dbc8 = load i32, i32* @r4, align 4
  %v4_dbc8 = add i32 %v3_dbc8, 10
  %v5_dbc8 = inttoptr i32 %v4_dbc8 to i16*
  store i16 %v3_dbc4, i16* %v5_dbc8, align 2
  %v0_dbcc = load i32, i32* @r6, align 4
  store i32 %v0_dbcc, i32* @r1, align 4
  %v1_dbd0 = add i32 %v0_dbcc, 4
  %v2_dbd0 = inttoptr i32 %v1_dbd0 to i16*
  %v3_dbd0 = load i16, i16* %v2_dbd0, align 2
  %v4_dbd0 = zext i16 %v3_dbd0 to i32
  store i32 %v4_dbd0, i32* %r2.global-to-local, align 4
  %v0_dbd4 = load i32, i32* @r8, align 4
  %v1_dbd4 = trunc i32 %v0_dbd4 to i16
  %v3_dbd4 = add i32 %v0_dbcc, 6
  %v4_dbd4 = inttoptr i32 %v3_dbd4 to i16*
  store i16 %v1_dbd4, i16* %v4_dbd4, align 2
  %v0_dbd8 = load i32, i32* @sb, align 4
  store i32 %v0_dbd8, i32* %r3.global-to-local, align 4
  %v0_dbdc = load i32, i32* @r4, align 4
  store i32 %v0_dbdc, i32* %r0.global-to-local, align 4
  %v4_dbe0 = call i32 @function_dda8(i32 %v0_dbdc, i32 %v0_dbcc, i32 %v4_dbd0, i32 %v0_dbd8)
  %v5_dbe0 = trunc i32 %v4_dbe0 to i16
  store i32 %v4_dbe0, i32* %r0.global-to-local, align 4
  %v3_dbe4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_dbe4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r1.global-to-local, align 4
  %v3_dbec = mul i32 %v3_dbe4, 32
  store i32 %v3_dbec, i32* %ip.global-to-local, align 4
  %v3_dbf0 = load i32, i32* @r6, align 4
  %v4_dbf0 = add i32 %v3_dbf0, 6
  %v5_dbf0 = inttoptr i32 %v4_dbf0 to i16*
  store i16 %v5_dbe0, i16* %v5_dbf0, align 2
  store i32 %stack_var_-2184.0, i32* %r2.global-to-local, align 4
  %v0_dbf8 = load i32, i32* @r6, align 4
  %v1_dbf8 = add i32 %v0_dbf8, 2
  %v2_dbf8 = inttoptr i32 %v1_dbf8 to i16*
  %v3_dbf8 = load i16, i16* %v2_dbf8, align 2
  %v4_dbf8 = zext i16 %v3_dbf8 to i32
  store i32 %v4_dbf8, i32* %r6.global-to-local, align 4
  %v0_dbfc = load i32, i32* %ip.global-to-local, align 4
  %v1_dbfc = load i32, i32* %r3.global-to-local, align 4
  %tmp135 = mul i32 %v1_dbfc, -8
  %v5_dbfc = add i32 %v0_dbfc, %tmp135
  %v1_dc00 = load i32, i32* %r1.global-to-local, align 4
  %v2_dc00 = add i32 %v1_dc00, %v5_dbfc
  store i32 %v2_dc00, i32* %ip.global-to-local, align 4
  %v2_dc04 = add i32 %v2_dc00, 4
  %v3_dc04 = inttoptr i32 %v2_dc04 to i32*
  store i32 %stack_var_-2184.0, i32* %v3_dc04, align 4
  %v0_dc08 = load i32, i32* %r6.global-to-local, align 4
  %v1_dc08 = trunc i32 %v0_dc08 to i16
  %v2_dc08 = load i32, i32* %ip.global-to-local, align 4
  %v3_dc08 = add i32 %v2_dc08, 2
  %v4_dc08 = inttoptr i32 %v3_dc08 to i16*
  store i16 %v1_dc08, i16* %v4_dc08, align 2
  %v0_dc0c = load i32, i32* @r4, align 4
  store i32 %v0_dc0c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_d8f4, i32* %r0.global-to-local, align 4
  %v0_dc18 = load i32, i32* @fp, align 4
  store i32 %v0_dc18, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_dc20 = load i32, i32* %ip.global-to-local, align 4
  %v6_dc28 = call i32 @function_12c60(i32 %v3_d8f4, i32 %v0_dc0c, i32 %v0_dc18, i32 16384, i32 %v0_dc20, i32 16)
  %v3_dc2c = load i32, i32* %stack_var_-44, align 4
  %v1_dc30 = add i32 %v3_dc2c, 1
  store i32 %v1_dc30, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v9_dc38 = icmp eq i32 %v1_dc30, %arg2
  store i1 %v9_dc38, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_dc30, i32* %stack_var_-44, align 4
  %v7_dc40 = icmp slt i32 %v1_dc30, %arg2
  br i1 %v7_dc40, label %dec_label_pc_dc44, label %dec_label_pc_dccc

dec_label_pc_dc44:                                ; preds = %dec_label_pc_dba8, %dec_label_pc_db6c
  %v1_dc50 = phi i32 [ %v1_dc30, %dec_label_pc_dba8 ], [ 0, %dec_label_pc_db6c ]
  store i32 %v2_d6a4, i32* %r2.global-to-local, align 4
  store i32 %v3_d958, i32* %r3.global-to-local, align 4
  %v4_dc50 = mul i32 %v1_dc50, 4
  %v5_dc50 = add i32 %v4_dc50, %v2_d6a4
  %v6_dc50 = inttoptr i32 %v5_dc50 to i32*
  %v7_dc50 = load i32, i32* %v6_dc50, align 4
  store i32 %v7_dc50, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_dc58, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* @r8, align 4
  %v1_dc60 = add i32 %v7_dc50, 20
  store i32 %v1_dc60, i32* @r6, align 4
  %v1_dc64 = add i32 %v7_dc50, 41
  store i32 %v1_dc64, i32* @r7, align 4
  br i1 %v3_dc58, label %dec_label_pc_dc6c, label %dec_label_pc_db84

dec_label_pc_dc6c:                                ; preds = %dec_label_pc_dc44
  %v0_dc6c = call i32 @function_f18c()
  %v1_dc6c = trunc i32 %v0_dc6c to i16
  store i32 %v0_dc6c, i32* %r0.global-to-local, align 4
  store i32 %v3_d95c, i32* %ip.global-to-local, align 4
  %v1_dc74 = load i32, i32* @r5, align 4
  %v9_dc74 = icmp eq i32 %v3_d95c, %v1_dc74
  store i1 %v9_dc74, i1* %cpsr_z.global-to-local, align 1
  %v3_dc78 = load i32, i32* @r4, align 4
  %v4_dc78 = add i32 %v3_dc78, 4
  %v5_dc78 = inttoptr i32 %v4_dc78 to i16*
  store i16 %v1_dc6c, i16* %v5_dc78, align 2
  br i1 %v9_dc74, label %dec_label_pc_dc80, label %dec_label_pc_dc6c.dec_label_pc_db90_crit_edge

dec_label_pc_dc6c.dec_label_pc_db90_crit_edge:    ; preds = %dec_label_pc_dc6c
  %v1_db94.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_db90

dec_label_pc_dc80:                                ; preds = %dec_label_pc_dc6c, %dec_label_pc_db84
  %v0_dc80 = call i32 @function_f18c()
  %v1_dc80 = trunc i32 %v0_dc80 to i16
  store i32 %v0_dc80, i32* %r0.global-to-local, align 4
  store i32 %v3_d960, i32* @lr, align 4
  %v1_dc88 = load i32, i32* @r5, align 4
  %v9_dc88 = icmp eq i32 %v3_d960, %v1_dc88
  store i1 %v9_dc88, i1* %cpsr_z.global-to-local, align 1
  %v3_dc8c = load i32, i32* @r4, align 4
  %v4_dc8c = add i32 %v3_dc8c, 20
  %v5_dc8c = inttoptr i32 %v4_dc8c to i16*
  store i16 %v1_dc80, i16* %v5_dc8c, align 2
  br i1 %v9_dc88, label %dec_label_pc_dc94, label %dec_label_pc_dc80.dec_label_pc_db9c_crit_edge

dec_label_pc_dc80.dec_label_pc_db9c_crit_edge:    ; preds = %dec_label_pc_dc80
  %v1_dba0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_db9c

dec_label_pc_dc94:                                ; preds = %dec_label_pc_dc80, %dec_label_pc_db90
  %v0_dc94 = call i32 @function_f18c()
  %v1_dc94 = trunc i32 %v0_dc94 to i16
  %v3_dc98 = load i32, i32* @r6, align 4
  %v4_dc98 = add i32 %v3_dc98, 2
  %v5_dc98 = inttoptr i32 %v4_dc98 to i16*
  store i16 %v1_dc94, i16* %v5_dc98, align 2
  store i32 %v3_d964, i32* %r0.global-to-local, align 4
  %v1_dca0 = load i32, i32* @r5, align 4
  %v9_dca0 = icmp eq i32 %v3_d964, %v1_dca0
  store i1 %v9_dca0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dca0, label %dec_label_pc_dca8, label %dec_label_pc_dba8

dec_label_pc_dca8:                                ; preds = %dec_label_pc_dc94, %dec_label_pc_db9c
  %v0_dca8 = call i32 @function_f18c()
  %v1_dca8 = trunc i32 %v0_dca8 to i16
  store i32 %v0_dca8, i32* %r0.global-to-local, align 4
  %v3_dcac = load i32, i32* @r4, align 4
  %v4_dcac = add i32 %v3_dcac, 28
  %v5_dcac = inttoptr i32 %v4_dcac to i16*
  store i16 %v1_dca8, i16* %v5_dcac, align 2
  br label %dec_label_pc_dba8

dec_label_pc_dcb4:                                ; preds = %dec_label_pc_d904
  store i32 %v3_d8f4, i32* %r0.global-to-local, align 4
  %v1_dcb8 = call i32 @function_124d0(i32 %v3_d8f4)
  store i32 %v1_dcb8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dcbc

dec_label_pc_dcbc:                                ; preds = %dec_label_pc_dccc, %dec_label_pc_d8dc, %dec_label_pc_d8c4, %dec_label_pc_dcb4
  %v1_dcc8 = phi i32 [ %v3_d8f4, %dec_label_pc_d8dc ], [ %v2_d8d0, %dec_label_pc_d8c4 ], [ %v1_dcb8, %dec_label_pc_dcb4 ], [ %v2_dcd0, %dec_label_pc_dccc ]
  store i32 %v9_d674, i32* %r6.global-to-local, align 4
  store i32 %v18_d674, i32* %sb.global-to-local, align 4
  store i32 %v27_d674, i32* %lr.global-to-local, align 4
  ret i32 %v1_dcc8

dec_label_pc_dccc.critedge:                       ; preds = %dec_label_pc_d92c
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br label %dec_label_pc_dccc

dec_label_pc_dccc:                                ; preds = %dec_label_pc_dba8, %dec_label_pc_dccc.critedge, %dec_label_pc_db58
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_dcd0 = call i32 @function_12150(i32* null)
  store i32 %v2_dcd0, i32* %r0.global-to-local, align 4
  %v9_dcd8 = icmp eq i32 %v2_d8d0, %v2_dcd0
  store i1 %v9_dcd8, i1* %cpsr_z.global-to-local, align 1
  %v6_dcdc = icmp slt i32 %v2_d8d0, %v2_dcd0
  br i1 %v6_dcdc, label %dec_label_pc_dcbc, label %dec_label_pc_db58

dec_label_pc_dce4:                                ; preds = %dec_label_pc_d87c, %bb113
  %v0_d884.lcssa = phi i32 [ %v1_d850, %dec_label_pc_d87c ], [ %v0_d884, %bb113 ]
  %v2_dce8 = sub i32 %v0_d884.lcssa, %v0_d82c
  store i32 %v2_dce8, i32* @r4, align 4
  %v2_dcec = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d840, i32* %r1.global-to-local, align 4
  store i32 %v2_dcec, i32* %r0.global-to-local, align 4
  store i32 %v2_dce8, i32* %r2.global-to-local, align 4
  %v3_dcfc = call i32 @function_118dc(i32 %v2_dcec, i32 %v2_d840, i32 %v2_dce8)
  %v2_dd00 = ptrtoint i32* %stack_var_-40 to i32
  %v1_dd04 = load i32, i32* @r4, align 4
  %v2_dd04 = add i32 %v1_dd04, %v2_dd00
  store i32 %v2_dd04, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_dcec, i32* @r0, align 4
  %v3_dd10 = add i32 %v2_dd04, -36
  %v4_dd10 = inttoptr i32 %v3_dd10 to i8*
  store i8 0, i8* %v4_dd10, align 1
  %v1_dd14 = call i32 @function_12a34(i32 %v2_dcec)
  store i32 %v1_dd14, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d8c4

dec_label_pc_dd20:                                ; preds = %dec_label_pc_d890
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d8c4

dec_label_pc_dd30:                                ; preds = %dec_label_pc_d890
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d8c4

dec_label_pc_dd44:                                ; preds = %dec_label_pc_d890
  store i32 707416650, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_d8c4

; uselistorder directives
  uselistorder i32 %v1_dd14, { 1, 0 }
  uselistorder i32 %v2_dcec, { 0, 1, 3, 2 }
  uselistorder i32 %v2_dce8, { 1, 0, 2 }
  uselistorder i32 %v2_dcd0, { 1, 2, 3, 0 }
  uselistorder i32 %v0_dca8, { 1, 0 }
  uselistorder i32 %v0_dc80, { 1, 0 }
  uselistorder i32 %v0_dc6c, { 1, 0 }
  uselistorder i32 %v7_dc50, { 1, 0, 2 }
  uselistorder i32 %v1_dc30, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_dbe0, { 1, 0 }
  uselistorder i32 %v0_dbcc, { 1, 0, 2, 3 }
  uselistorder i32 %v2_dbc4, { 1, 0 }
  uselistorder i1 %v3_db88, { 1, 0 }
  uselistorder i1 %v3_dc58, { 1, 0 }
  uselistorder i32 %v1_db10.pre, { 1, 0 }
  uselistorder i32 %v2_db08, { 1, 0 }
  uselistorder i32 %v2_db0817, { 1, 0 }
  uselistorder i32 %v0_db1419, { 1, 0 }
  uselistorder i32 %v1_db00, { 1, 0 }
  uselistorder i32 %v3_d9ec, { 1, 0 }
  uselistorder i32 %v3_d9d8, { 1, 0 }
  uselistorder i32 %v3_d998, { 1, 0 }
  uselistorder i32 %v1_d96c, { 1, 0 }
  uselistorder i32 %v3_d960, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v3_d95c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_d924, { 1, 0 }
  uselistorder i1 %v7_d8f8, { 1, 0 }
  uselistorder i32 %v3_d8f4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_d8e0, { 0, 13, 1, 8, 3, 6, 7, 5, 9, 11, 10, 4, 12, 2 }
  uselistorder i32 %v2_d8d0, { 2, 1, 0, 3 }
  uselistorder i32 %v0_d8cc, { 1, 0, 2 }
  uselistorder i32 %stack_var_-2184.0, { 0, 3, 2, 1 }
  uselistorder i32 %v1_d894, { 1, 0 }
  uselistorder i32 %v0_d890, { 1, 0 }
  uselistorder i32 %v1_d884, { 1, 0 }
  uselistorder i1 %v7_d870, { 1, 0 }
  uselistorder i32 %v1_d86c, { 1, 0, 2 }
  uselistorder i1 %v8_d864, { 1, 0 }
  uselistorder i1 %v7_d860, { 1, 0 }
  uselistorder i32 %v1_d854, { 1, 0 }
  uselistorder i8 %v2_d848, { 2, 0, 1, 3 }
  uselistorder i32 %v0_d84c, { 1, 0 }
  uselistorder i32 %v0_d86c, { 1, 2, 3, 0 }
  uselistorder i32 %v2_d840, { 1, 0, 2, 3 }
  uselistorder i32 %v0_d83c, { 1, 0, 2 }
  uselistorder i32 %v0_d834, { 1, 0, 2, 3 }
  uselistorder i1 %v7_d82c, { 1, 0 }
  uselistorder i32 %v0_d82c, { 2, 3, 1, 5, 4, 0 }
  uselistorder i32 %v0_d7d0, { 1, 0, 2, 3 }
  uselistorder i32 %v6_d770, { 2, 0, 1, 3 }
  uselistorder i32 %v6_d754, { 0, 2, 1 }
  uselistorder i32 %v6_d73c, { 1, 0, 2 }
  uselistorder i32 %v1_d724, { 1, 0 }
  uselistorder i32 %v7_d6e0, { 1, 0, 3, 2 }
  uselistorder i32 %v1_d6c8, { 1, 0 }
  uselistorder i32 %v6_d6bc, { 1, 0 }
  uselistorder i32 %v2_d6a4, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 8, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0 }
  uselistorder i32* %r2.global-to-local, { 4, 5, 38, 9, 6, 7, 8, 10, 11, 12, 2, 13, 1, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 3, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 40, 39, 1, 10, 38, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 45, 44, 47, 46, 48, 50, 49, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 67, 7, 5, 8, 6, 9, 11, 10, 12, 14, 13, 15, 17, 16, 18, 19, 22, 20, 21, 23, 24, 32, 25, 26, 27, 28, 29, 30, 31, 36, 33, 34, 35, 37, 39, 38, 41, 40, 42, 43, 44, 46, 45, 47, 48, 50, 49, 51, 53, 52, 55, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 13, 14, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 32, 1, 2, 3, 8, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 (i32)* @function_12a34, { 1, 0 }
  uselistorder i32 41, { 4, 5, 6, 0, 1, 7, 2, 8, 3, 9 }
  uselistorder i8 17, { 1, 2, 0 }
  uselistorder i8 -16, { 0, 1, 3, 2, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 37, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 53, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %arg2, { 3, 4, 6, 7, 0, 1, 5, 2, 8, 9, 10, 11 }
  uselistorder label %dec_label_pc_dccc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_dcbc, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_dba8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_db58, { 1, 0 }
  uselistorder label %dec_label_pc_db28, { 1, 0 }
  uselistorder label %.thread21, { 2, 0, 1 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %dec_label_pc_d884, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d87c, { 1, 0 }
  uselistorder label %dec_label_pc_d870, { 1, 0 }
}

define i32 @function_dd58(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_dd58:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_dd7c, label %dec_label_pc_dd64

dec_label_pc_dd64:                                ; preds = %dec_label_pc_dd58
  %v0_dd6c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_dd68

dec_label_pc_dd68:                                ; preds = %dec_label_pc_dd68, %dec_label_pc_dd64
  %v0_dd74 = phi i32 [ %v2_dd74, %dec_label_pc_dd68 ], [ 0, %dec_label_pc_dd64 ]
  %v0_dd6c = phi i32 [ %v5_dd6c, %dec_label_pc_dd68 ], [ %v0_dd6c.pre, %dec_label_pc_dd64 ]
  %v0_dd68 = phi i32 [ %v1_dd68, %dec_label_pc_dd68 ], [ %arg1, %dec_label_pc_dd64 ]
  %v1_dd68 = add i32 %v0_dd68, -2
  %v1_dd6c = inttoptr i32 %v0_dd6c to i16*
  %v2_dd6c = load i16, i16* %v1_dd6c, align 2
  %v3_dd6c = zext i16 %v2_dd6c to i32
  %v5_dd6c = add i32 %v0_dd6c, -2
  store i32 %v5_dd6c, i32* @r0, align 4
  %v2_dd74 = add i32 %v3_dd6c, %v0_dd74
  %v1_dd68.cmp = icmp ugt i32 %v1_dd68, 1
  br i1 %v1_dd68.cmp, label %dec_label_pc_dd68, label %dec_label_pc_dd7c.loopexit

dec_label_pc_dd7c.loopexit:                       ; preds = %dec_label_pc_dd68
  br label %dec_label_pc_dd7c

dec_label_pc_dd7c:                                ; preds = %dec_label_pc_dd58, %dec_label_pc_dd7c.loopexit
  %v1_dd84 = phi i32 [ %v2_dd74, %dec_label_pc_dd7c.loopexit ], [ 0, %dec_label_pc_dd58 ]
  %v0_dd7c = phi i32 [ %v1_dd68, %dec_label_pc_dd7c.loopexit ], [ %arg1, %dec_label_pc_dd58 ]
  %v7_dd7c = icmp eq i32 %v0_dd7c, 1
  br i1 %v7_dd7c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_dd7c
  %v1_dd80 = load i32, i32* @r0, align 4
  %v2_dd80 = inttoptr i32 %v1_dd80 to i8*
  %v3_dd80 = load i8, i8* %v2_dd80, align 1
  %v4_dd80 = zext i8 %v3_dd80 to i32
  %v3_dd84 = add i32 %v1_dd84, %v4_dd80
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_dd7c, %bb
  %v0_dd88 = phi i32 [ %v1_dd84, %dec_label_pc_dd7c ], [ %v3_dd84, %bb ]
  %v3_dd8c = urem i32 %v0_dd88, 65536
  %v4_dd90 = udiv i32 %v0_dd88, 65536
  %v5_dd90 = add nuw nsw i32 %v4_dd90, %v3_dd8c
  %v4_dd94 = udiv i32 %v5_dd90, 65536
  %v5_dd94 = add nuw nsw i32 %v4_dd94, %v5_dd90
  %v1_dd98 = urem i32 %v5_dd94, 65536
  %v3_dda0 = xor i32 %v1_dd98, 65535
  ret i32 %v3_dda0

; uselistorder directives
  uselistorder i32 %v5_dd90, { 1, 0 }
  uselistorder i32 %v5_dd6c, { 1, 0 }
  uselistorder i32 %v1_dd68, { 1, 0, 2 }
  uselistorder i32 %v0_dd6c, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_dd7c, { 1, 0 }
}

define i32 @function_dda8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_dda8:
  %v1_ddb8 = add i32 %arg1, 12
  %v2_ddb8 = inttoptr i32 %v1_ddb8 to i32*
  %v3_ddb8 = load i32, i32* %v2_ddb8, align 4
  %v1_ddbc = add i32 %arg1, 16
  %v2_ddbc = inttoptr i32 %v1_ddbc to i32*
  %v3_ddbc = load i32, i32* %v2_ddbc, align 4
  %v7_ddc0 = icmp sgt i32 %arg3, 1
  br i1 %v7_ddc0, label %dec_label_pc_ddcc.preheader, label %dec_label_pc_dde0

dec_label_pc_ddcc.preheader:                      ; preds = %dec_label_pc_dda8
  %v0_ddd0.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_ddcc

dec_label_pc_ddcc:                                ; preds = %dec_label_pc_ddcc.preheader, %dec_label_pc_ddcc
  %v0_ddd8 = phi i32 [ 0, %dec_label_pc_ddcc.preheader ], [ %v2_ddd8, %dec_label_pc_ddcc ]
  %v0_ddd0 = phi i32 [ %v0_ddd0.pre, %dec_label_pc_ddcc.preheader ], [ %v5_ddd0, %dec_label_pc_ddcc ]
  %v0_ddcc = phi i32 [ %arg3, %dec_label_pc_ddcc.preheader ], [ %v1_ddcc, %dec_label_pc_ddcc ]
  %v1_ddcc = add nsw i32 %v0_ddcc, -2
  %v1_ddd0 = inttoptr i32 %v0_ddd0 to i16*
  %v2_ddd0 = load i16, i16* %v1_ddd0, align 2
  %v3_ddd0 = zext i16 %v2_ddd0 to i32
  %v5_ddd0 = add i32 %v0_ddd0, -2
  store i32 %v5_ddd0, i32* @r1, align 4
  %v2_ddd8 = add i32 %v3_ddd0, %v0_ddd8
  %v8_dddc = icmp sgt i32 %v1_ddcc, 1
  br i1 %v8_dddc, label %dec_label_pc_ddcc, label %dec_label_pc_dde0.loopexit

dec_label_pc_dde0.loopexit:                       ; preds = %dec_label_pc_ddcc
  br label %dec_label_pc_dde0

dec_label_pc_dde0:                                ; preds = %dec_label_pc_dde0.loopexit, %dec_label_pc_dda8
  %v1_ddec = phi i32 [ %v2_ddd8, %dec_label_pc_dde0.loopexit ], [ 0, %dec_label_pc_dda8 ]
  %v0_dde0 = phi i32 [ %v1_ddcc, %dec_label_pc_dde0.loopexit ], [ %arg3, %dec_label_pc_dda8 ]
  %v7_dde0 = icmp eq i32 %v0_dde0, 1
  br i1 %v7_dde0, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_dde0
  br label %bb19

bb:                                               ; preds = %dec_label_pc_dde0
  %v1_dde4 = load i32, i32* @r1, align 4
  %v2_dde4 = inttoptr i32 %v1_dde4 to i8*
  %v3_dde4 = load i8, i8* %v2_dde4, align 1
  %v4_dde4 = zext i8 %v3_dde4 to i32
  %v3_ddec = add i32 %v4_dde4, %v1_ddec
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_de14 = phi i32 [ %v1_ddec, %.thread ], [ %v3_ddec, %bb ]
  %v0_ddf4 = mul i32 %v3_ddb8, 65536
  %v3_ddf4 = udiv i32 %v0_ddf4, 65536
  %v3_ddf8 = urem i32 %v3_ddbc, 65536
  %v4_de00 = udiv i32 %v3_ddb8, 65536
  %v2_ddfc = add nuw nsw i32 %v3_ddf8, %v4_de00
  %v5_de00 = add nuw nsw i32 %v2_ddfc, %v3_ddf4
  %v1_de04 = add i32 %arg1, 9
  %v2_de04 = inttoptr i32 %v1_de04 to i8*
  %v3_de04 = load i8, i8* %v2_de04, align 1
  %v4_de04 = zext i8 %v3_de04 to i32
  %v4_de08 = udiv i32 %v3_ddbc, 65536
  %v3_de10 = mul nuw nsw i32 %v4_de04, 256
  %v5_de08 = add i32 %v4_de08, %arg2
  %v2_de0c = add i32 %v5_de08, %v1_de14
  %v2_de14 = add i32 %v2_de0c, %v5_de00
  %v2_de18 = add i32 %v2_de14, %v3_de10
  %tmp = icmp ult i32 %v2_de18, 65536
  br i1 %tmp, label %dec_label_pc_de38, label %dec_label_pc_de24

dec_label_pc_de24:                                ; preds = %bb19, %dec_label_pc_de24
  %v2_de2c5 = phi i32 [ %v2_de2c, %dec_label_pc_de24 ], [ %v2_de18, %bb19 ]
  %v3_de306.in = phi i32 [ %v2_de2c, %dec_label_pc_de24 ], [ %v2_de18, %bb19 ]
  %v3_de306 = udiv i32 %v3_de306.in, 65536
  %v3_de28 = urem i32 %v2_de2c5, 65536
  %v2_de2c = add nuw nsw i32 %v3_de28, %v3_de306
  %tmp20 = icmp ult i32 %v2_de2c, 65536
  br i1 %tmp20, label %dec_label_pc_de38.loopexit, label %dec_label_pc_de24

dec_label_pc_de38.loopexit:                       ; preds = %dec_label_pc_de24
  br label %dec_label_pc_de38

dec_label_pc_de38:                                ; preds = %dec_label_pc_de38.loopexit, %bb19
  %v0_de38 = phi i32 [ %v2_de2c, %dec_label_pc_de38.loopexit ], [ %v2_de18, %bb19 ]
  %v1_de38 = urem i32 %v0_de38, 65536
  %v3_de40 = xor i32 %v1_de38, 65535
  ret i32 %v3_de40

; uselistorder directives
  uselistorder i32 %v2_de2c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_de18, { 3, 0, 2, 1 }
  uselistorder i32 %v1_ddec, { 1, 0 }
  uselistorder i32 %v5_ddd0, { 1, 0 }
  uselistorder i32 %v0_ddd0, { 1, 0 }
  uselistorder i32 %v3_ddb8, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_de24, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_ddcc, { 1, 0 }
}

define i32 @function_de4c(i32 %arg1) local_unnamed_addr {
dec_label_pc_de4c:
  %v2_de58 = load i32, i32* @global_var_20390.88, align 4
  %v2_de60 = call i32 @function_1229c(i32 %v2_de58, i32 9)
  ret i32 %v2_de60
}

define i32 @function_de74(i32 %arg1) local_unnamed_addr {
dec_label_pc_de74:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_de74 = load i32, i32* @r4, align 4
  %v6_de74 = load i32, i32* @r5, align 4
  %v9_de74 = load i32, i32* @r6, align 4
  %v12_de74 = load i32, i32* @r7, align 4
  %v15_de74 = load i32, i32* @r8, align 4
  %v18_de74 = load i32, i32* @sb, align 4
  %v21_de74 = load i32, i32* @sl, align 4
  %v24_de74 = load i32, i32* @fp, align 4
  %v27_de74 = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_de90 = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_de90, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  store i32 513, i32* @r2, align 4
  %v2_debc = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_debc, i32* @fp, align 4
  %v3_dec8 = call i32 @function_12950(i8* nonnull %stack_var_-585, i32 0)
  %v2_decc = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_decc, i32* @sl, align 4
  %v0_ded0 = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_dedc = bitcast i32* %stack_var_-8777 to i8*
  %v3_dedc = call i32 @function_12950(i8* %v2_dedc, i32 %v0_ded0)
  %v0_dee4 = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_def0 = bitcast i32* %stack_var_-4681 to i8*
  %v3_def0 = call i32 @function_12950(i8* %v2_def0, i32 %v0_dee4)
  %v2_def4 = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_def4, i32* @sb, align 4
  %v0_def8 = load i32, i32* %r4.global-to-local, align 4
  %v3_def8 = udiv i32 %v0_def8, 256
  %v1_defc = urem i32 %v0_def8, 256
  store i32 %v1_defc, i32* @r4, align 4
  %v3_df0c = trunc i32 %v3_def8 to i8
  %v4_df0c = call i32 @function_11d60(i8 %v3_df0c, i32 16, i32 %v2_def4)
  %v2_df14 = call i32 @function_1186c(i8* nonnull %stack_var_-72)
  %v7_df18 = icmp eq i32 %v2_df14, 2
  br i1 %v7_df18, label %dec_label_pc_e3c4, label %dec_label_pc_df20

dec_label_pc_df20:                                ; preds = %dec_label_pc_de74, %dec_label_pc_e3c4
  %v1_df24 = call i32 @function_10e48(i32 6)
  %v1_df2c = call i32 @function_10e48(i32 7)
  %v1_df34 = call i32 @function_10e48(i32 8)
  %v1_df3c = call i32 @function_10e48(i32 9)
  %v0_df40 = load i32, i32* @r5, align 4
  %v2_df48 = inttoptr i32 %v0_df40 to i32*
  %v3_df48 = call i32 @function_10d84(i32 9, i32* %v2_df48)
  %v0_df4c = load i32, i32* @r5, align 4
  %v2_df50 = call i32 @function_120dc(i32 %v3_df48, i32 %v0_df4c)
  %v7_df54 = icmp eq i32 %v2_df50, -1
  store i32 %v2_df50, i32* @r8, align 4
  br i1 %v7_df54, label %bb, label %dec_label_pc_df64.preheader

bb:                                               ; preds = %dec_label_pc_df20
  %v1_df5c = load i32, i32* @r5, align 4
  store i32 %v1_df5c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e384

dec_label_pc_df64.preheader:                      ; preds = %dec_label_pc_df20
  %v4_df7057 = call i32 @function_11acc(i8* nonnull %stack_var_-585, i32 512, i32 %v2_df50)
  %v2_df7459 = icmp eq i32 %v4_df7057, 0
  br i1 %v2_df7459, label %dec_label_pc_e0fc.loopexit, label %dec_label_pc_df7c.lr.ph

dec_label_pc_df7c.lr.ph:                          ; preds = %dec_label_pc_df64.preheader
  %v2_dfc4 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_df7c

dec_label_pc_df7c:                                ; preds = %dec_label_pc_df7c.lr.ph, %dec_label_pc_df64.backedge
  %v3_df80 = load i8, i8* %stack_var_-585, align 1
  %v4_df80 = sext i8 %v3_df80 to i32
  %v2_df84 = icmp eq i8 %v3_df80, 0
  br i1 %v2_df84, label %bb134, label %bb133

bb133:                                            ; preds = %dec_label_pc_df7c
  %v8_df88 = icmp eq i8 %v3_df80, 58
  br i1 %v8_df88, label %.thread8, label %dec_label_pc_df9c

.thread8:                                         ; preds = %bb133
  br label %dec_label_pc_dfb4

bb134:                                            ; preds = %dec_label_pc_df7c
  br label %dec_label_pc_dfb4

dec_label_pc_df9c:                                ; preds = %bb133
  %v1_dfa4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_dfa0

dec_label_pc_dfa0:                                ; preds = %bb135, %dec_label_pc_df9c
  %v0_dfa0 = phi i32 [ %v1_dfa0, %bb135 ], [ 0, %dec_label_pc_df9c ]
  %v1_dfa0 = add i32 %v0_dfa0, 1
  %v2_dfa4 = add i32 %v1_dfa0, %v1_dfa4.pre
  %v3_dfa4 = inttoptr i32 %v2_dfa4 to i8*
  %v4_dfa4 = load i8, i8* %v3_dfa4, align 1
  %v6_dfa4 = zext i8 %v4_dfa4 to i32
  %v2_dfa8 = icmp eq i8 %v4_dfa4, 0
  br i1 %v2_dfa8, label %dec_label_pc_dfb4, label %bb135

bb135:                                            ; preds = %dec_label_pc_dfa0
  %v8_dfac = icmp eq i8 %v4_dfa4, 58
  br i1 %v8_dfac, label %dec_label_pc_dfb4, label %dec_label_pc_dfa0

dec_label_pc_dfb4:                                ; preds = %dec_label_pc_dfa0, %bb135, %bb134, %.thread8
  %v1_dfe0 = phi i32 [ 0, %.thread8 ], [ 0, %bb134 ], [ %v1_dfa0, %bb135 ], [ %v1_dfa0, %dec_label_pc_dfa0 ]
  %v0_dfb4 = phi i32 [ %v4_df80, %.thread8 ], [ %v4_df80, %bb134 ], [ %v6_dfa4, %bb135 ], [ %v6_dfa4, %dec_label_pc_dfa0 ]
  %v2_dfb4 = icmp eq i32 %v0_dfb4, 0
  br i1 %v2_dfb4, label %dec_label_pc_df64.backedge, label %dec_label_pc_dfbc

dec_label_pc_df64.backedge:                       ; preds = %dec_label_pc_dfb4, %dec_label_pc_e084, %dec_label_pc_e0d0, %dec_label_pc_e000
  %v0_df6c = load i32, i32* @r8, align 4
  %v4_df70 = call i32 @function_11acc(i8* nonnull %stack_var_-585, i32 512, i32 %v0_df6c)
  %v2_df74 = icmp eq i32 %v4_df70, 0
  br i1 %v2_df74, label %dec_label_pc_e0fc.loopexit, label %dec_label_pc_df7c

dec_label_pc_dfbc:                                ; preds = %dec_label_pc_dfb4
  %v1_dfc0 = add i32 %v1_dfe0, 2
  %v2_dfc8 = add i32 %v1_dfc0, %v2_dfc4
  %v1_dfcc = add i32 %v2_dfc8, -545
  %v2_dfcc = inttoptr i32 %v1_dfcc to i8*
  %v3_dfcc = load i8, i8* %v2_dfcc, align 1
  %v2_dfd0 = icmp eq i8 %v3_dfcc, 0
  br i1 %v2_dfd0, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_dfbc
  %v8_dfd4 = icmp eq i8 %v3_dfcc, 32
  br i1 %v8_dfd4, label %.thread13, label %dec_label_pc_dfe0

.thread13:                                        ; preds = %bb136
  store i32 %v1_dfc0, i32* @r5, align 4
  br label %dec_label_pc_e000

bb137:                                            ; preds = %dec_label_pc_dfbc
  store i32 %v1_dfc0, i32* @r5, align 4
  br label %dec_label_pc_e000

dec_label_pc_dfe0:                                ; preds = %bb136
  %v0_dfe0 = load i32, i32* @r6, align 4
  %v2_dfe0 = add i32 %v0_dfe0, %v1_dfe0
  br label %dec_label_pc_dfe8

dec_label_pc_dfe8:                                ; preds = %bb138, %dec_label_pc_dfe0
  %v0_dff416 = phi i32 [ %v1_dff4, %bb138 ], [ %v1_dfc0, %dec_label_pc_dfe0 ]
  %v0_dff818 = phi i32 [ %v1_dff8, %bb138 ], [ %v2_dfe0, %dec_label_pc_dfe0 ]
  %v1_dfe8 = add i32 %v0_dff818, 3
  %v2_dfe8 = inttoptr i32 %v1_dfe8 to i8*
  %v3_dfe8 = load i8, i8* %v2_dfe8, align 1
  %v2_dfec = icmp eq i8 %v3_dfe8, 0
  br i1 %v2_dfec, label %.thread15, label %bb138

.thread15:                                        ; preds = %dec_label_pc_dfe8
  %v1_dff417 = add i32 %v0_dff416, 1
  store i32 %v1_dff417, i32* @r5, align 4
  br label %dec_label_pc_e000

bb138:                                            ; preds = %dec_label_pc_dfe8
  %v8_dff0 = icmp eq i8 %v3_dfe8, 32
  %v1_dff4 = add i32 %v0_dff416, 1
  store i32 %v1_dff4, i32* @r5, align 4
  %v1_dff8 = add i32 %v0_dff818, 1
  br i1 %v8_dff0, label %dec_label_pc_e000, label %dec_label_pc_dfe8

dec_label_pc_e000:                                ; preds = %bb138, %bb137, %.thread15, %.thread13
  %v1_e00c = phi i32 [ %v1_dff417, %.thread15 ], [ %v1_dfc0, %.thread13 ], [ %v1_dfc0, %bb137 ], [ %v1_dff4, %bb138 ]
  %v0_e000 = load i32, i32* @r6, align 4
  %v2_e000 = add i32 %v0_e000, %v1_dfc0
  store i32 %v2_e000, i32* @r4, align 4
  %v2_e00c = add i32 %v1_e00c, %v2_dfc4
  store i32 0, i32* @r7, align 4
  %v3_e014 = add i32 %v2_e00c, -545
  %v4_e014 = inttoptr i32 %v3_e014 to i8*
  store i8 0, i8* %v4_e014, align 1
  %v0_e018 = load i32, i32* @r4, align 4
  %v1_e01c = inttoptr i32 %v0_e018 to i8*
  %v2_e01c = call i32 @function_1186c(i8* %v1_e01c)
  store i32 %v2_e01c, i32* @r1, align 4
  %v0_e028 = load i32, i32* @r4, align 4
  %v3_e02c = inttoptr i32 %v0_e028 to i8*
  %v4_e02c = call i32 @function_11bbc(i8* %v3_e02c, i32 %v2_e01c, i32 %v2_def4)
  %v7_e030 = icmp eq i32 %v4_e02c, -1
  br i1 %v7_e030, label %dec_label_pc_df64.backedge, label %dec_label_pc_e04c.preheader

dec_label_pc_e04c.preheader:                      ; preds = %dec_label_pc_e000
  %v1_e034 = load i32, i32* @r7, align 4
  %v1_e038 = load i32, i32* @r6, align 4
  %v2_e038 = load i32, i32* @r5, align 4
  %v3_e038 = add i32 %v2_e038, %v1_e038
  store i32 %v1_e034, i32* @lr, align 4
  %v1_e04c49 = add i32 %v3_e038, 2
  %v2_e04c50 = inttoptr i32 %v1_e04c49 to i8*
  %v3_e04c51 = load i8, i8* %v2_e04c50, align 1
  %v2_e05053 = icmp eq i8 %v3_e04c51, 0
  %v1_e05455 = add i32 %v2_e038, 2
  br i1 %v2_e05053, label %dec_label_pc_e084, label %dec_label_pc_e05c

dec_label_pc_e05c:                                ; preds = %dec_label_pc_e04c.preheader, %dec_label_pc_e04c.backedge
  %v0_e08484 = phi i32 [ %v0_e08482, %dec_label_pc_e04c.backedge ], [ %v1_e034, %dec_label_pc_e04c.preheader ]
  %v0_e06c.pr = phi i32 [ %v0_e06c.pr71, %dec_label_pc_e04c.backedge ], [ %v1_e034, %dec_label_pc_e04c.preheader ]
  %v0_e398 = phi i32 [ %v0_e39874, %dec_label_pc_e04c.backedge ], [ %v1_e034, %dec_label_pc_e04c.preheader ]
  %v0_e05479 = phi i32 [ %v1_e054, %dec_label_pc_e04c.backedge ], [ %v1_e05455, %dec_label_pc_e04c.preheader ]
  %v0_e07c = phi i32 [ %v0_e04c, %dec_label_pc_e04c.backedge ], [ %v3_e038, %dec_label_pc_e04c.preheader ]
  %v1_e060.in = phi i8 [ %v3_e04c, %dec_label_pc_e04c.backedge ], [ %v3_e04c51, %dec_label_pc_e04c.preheader ]
  %v7_e05c = icmp eq i8 %v1_e060.in, 9
  br i1 %v7_e05c, label %bb140, label %bb139

bb139:                                            ; preds = %dec_label_pc_e05c
  %v8_e060 = icmp eq i8 %v1_e060.in, 32
  br i1 %v8_e060, label %.thread27, label %dec_label_pc_e06c

.thread27:                                        ; preds = %bb139
  br label %dec_label_pc_e078

bb140:                                            ; preds = %dec_label_pc_e05c
  br label %dec_label_pc_e078

dec_label_pc_e06c:                                ; preds = %bb139
  %v7_e06c = icmp eq i32 %v0_e06c.pr, 1
  br i1 %v7_e06c, label %dec_label_pc_e398, label %dec_label_pc_e074

dec_label_pc_e074:                                ; preds = %dec_label_pc_e398, %dec_label_pc_e06c
  %v0_e07876 = phi i32 [ %v1_e398, %dec_label_pc_e398 ], [ %v0_e398, %dec_label_pc_e06c ]
  br label %dec_label_pc_e078

dec_label_pc_e078:                                ; preds = %bb140, %.thread27, %dec_label_pc_e074
  %v0_e078 = phi i32 [ %v0_e398, %.thread27 ], [ %v0_e398, %bb140 ], [ %v0_e07876, %dec_label_pc_e074 ]
  %v0_e06c.pr72 = phi i32 [ 1, %.thread27 ], [ 1, %bb140 ], [ 0, %dec_label_pc_e074 ]
  %v7_e080 = icmp sgt i32 %v0_e078, 6
  br i1 %v7_e080, label %dec_label_pc_e084, label %dec_label_pc_e04c.backedge

dec_label_pc_e084:                                ; preds = %dec_label_pc_e04c.backedge, %dec_label_pc_e078, %dec_label_pc_e04c.preheader
  %v1_e0d4 = phi i32 [ %v1_e05455, %dec_label_pc_e04c.preheader ], [ %v1_e054, %dec_label_pc_e04c.backedge ], [ %v0_e05479, %dec_label_pc_e078 ]
  %v0_e084 = phi i32 [ %v1_e034, %dec_label_pc_e04c.preheader ], [ %v0_e08482, %dec_label_pc_e04c.backedge ], [ %v0_e08484, %dec_label_pc_e078 ]
  %v2_e084 = icmp eq i32 %v0_e084, 0
  br i1 %v2_e084, label %dec_label_pc_df64.backedge, label %dec_label_pc_e090

dec_label_pc_e090:                                ; preds = %dec_label_pc_e084
  %v2_e098 = add i32 %v1_e0d4, %v2_dfc4
  %v1_e09c = add i32 %v2_e098, -545
  %v2_e09c = inttoptr i32 %v1_e09c to i8*
  %v3_e09c = load i8, i8* %v2_e09c, align 1
  %v2_e0a0 = icmp eq i8 %v3_e09c, 0
  br i1 %v2_e0a0, label %dec_label_pc_e0d0, label %bb141

bb141:                                            ; preds = %dec_label_pc_e090
  %v8_e0a4 = icmp eq i8 %v3_e09c, 32
  br i1 %v8_e0a4, label %dec_label_pc_e0d0, label %dec_label_pc_e0ac

dec_label_pc_e0ac:                                ; preds = %bb141
  %v2_e0ac = add i32 %v1_e0d4, %v1_e038
  br label %dec_label_pc_e0b0

dec_label_pc_e0b0:                                ; preds = %bb142, %dec_label_pc_e0ac
  %v0_e0bc30 = phi i32 [ %v1_e0bc, %bb142 ], [ %v1_e0d4, %dec_label_pc_e0ac ]
  %v0_e0b0 = phi i32 [ %v1_e0b0, %bb142 ], [ %v2_e0ac, %dec_label_pc_e0ac ]
  %v1_e0b0 = add i32 %v0_e0b0, 1
  %v2_e0b0 = inttoptr i32 %v1_e0b0 to i8*
  %v3_e0b0 = load i8, i8* %v2_e0b0, align 1
  %v2_e0b4 = icmp eq i8 %v3_e0b0, 0
  br i1 %v2_e0b4, label %.thread29, label %bb142

.thread29:                                        ; preds = %dec_label_pc_e0b0
  %v1_e0bc31 = add i32 %v0_e0bc30, 1
  br label %dec_label_pc_e0c4

bb142:                                            ; preds = %dec_label_pc_e0b0
  %v8_e0b8 = icmp eq i8 %v3_e0b0, 32
  %v1_e0bc = add i32 %v0_e0bc30, 1
  br i1 %v8_e0b8, label %dec_label_pc_e0c4, label %dec_label_pc_e0b0

dec_label_pc_e0c4:                                ; preds = %bb142, %.thread29
  %v1_e0cc = phi i32 [ %v1_e0bc31, %.thread29 ], [ %v1_e0bc, %bb142 ]
  %v2_e0cc = add i32 %v1_e0cc, %v2_dfc4
  br label %dec_label_pc_e0d0

dec_label_pc_e0d0:                                ; preds = %dec_label_pc_e090, %bb141, %dec_label_pc_e0c4
  %v2_e0dc = phi i32 [ %v2_e098, %dec_label_pc_e090 ], [ %v2_e098, %bb141 ], [ %v2_e0cc, %dec_label_pc_e0c4 ]
  %v2_e0d4 = add i32 %v1_e0d4, %v1_e038
  store i32 %v2_e0d4, i32* @r4, align 4
  %v3_e0dc = add i32 %v2_e0dc, -545
  %v4_e0dc = inttoptr i32 %v3_e0dc to i8*
  store i8 0, i8* %v4_e0dc, align 1
  %v1_e0e0 = inttoptr i32 %v2_e0d4 to i8*
  %v2_e0e0 = call i32 @function_1186c(i8* %v1_e0e0)
  %v8_e0e8 = icmp sgt i32 %v2_e0e0, 15
  br i1 %v8_e0e8, label %dec_label_pc_df64.backedge, label %dec_label_pc_e0ec

dec_label_pc_e0ec:                                ; preds = %dec_label_pc_e0d0
  %v0_e0f0 = load i32, i32* @r4, align 4
  %v2_e0f4 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_e0f4, i32* @r0, align 4
  %v2_e0f8 = bitcast i32* %stack_var_-56 to i8*
  %v3_e0f8 = call i32 @function_11894(i8* %v2_e0f8, i32 %v0_e0f0)
  br label %dec_label_pc_e0fc

dec_label_pc_e0fc.loopexit:                       ; preds = %dec_label_pc_df64.backedge, %dec_label_pc_df64.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre100 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_e0fc

dec_label_pc_e0fc:                                ; preds = %dec_label_pc_e0fc.loopexit, %dec_label_pc_e0ec
  %v1_e10c.pre-phi = phi i8* [ %.pre100, %dec_label_pc_e0fc.loopexit ], [ %v2_e0f8, %dec_label_pc_e0ec ]
  %v2_e108.pre-phi = phi i32 [ %.pre, %dec_label_pc_e0fc.loopexit ], [ %v2_e0f4, %dec_label_pc_e0ec ]
  %v0_e0fc = load i32, i32* @r8, align 4
  %v1_e100 = call i32 @function_124d0(i32 %v0_e0fc)
  %v2_e10c = call i32 @function_1186c(i8* %v1_e10c.pre-phi)
  store i32 %v2_e10c, i32* @r4, align 4
  %v2_e110 = icmp eq i32 %v2_e10c, 0
  br i1 %v2_e110, label %dec_label_pc_e368, label %dec_label_pc_e11c

dec_label_pc_e11c:                                ; preds = %dec_label_pc_e0fc
  %v3_e124 = call i32 @function_10d84(i32 6, i32* null)
  %v1_e128 = call i32 @function_126cc(i32 %v3_e124)
  store i32 %v1_e128, i32* @sb, align 4
  %v2_e12c = icmp eq i32 %v1_e128, 0
  br i1 %v2_e12c, label %dec_label_pc_e35c, label %dec_label_pc_e13c.preheader

dec_label_pc_e13c.preheader:                      ; preds = %dec_label_pc_e11c
  store i32 0, i32* @r5, align 4
  %v1_e14044 = inttoptr i32 %v1_e128 to i32*
  %v2_e14045 = call i32 @function_12810(i32* %v1_e14044)
  %v2_e14447 = icmp eq i32 %v2_e14045, 0
  br i1 %v2_e14447, label %dec_label_pc_e350, label %dec_label_pc_e14c.preheader

dec_label_pc_e13c.loopexit:                       ; preds = %dec_label_pc_e154, %dec_label_pc_e164, %dec_label_pc_e1d0
  %v0_e13c = load i32, i32* @sb, align 4
  %v1_e140 = inttoptr i32 %v0_e13c to i32*
  %v2_e140 = call i32 @function_12810(i32* %v1_e140)
  %v2_e144 = icmp eq i32 %v2_e140, 0
  br i1 %v2_e144, label %dec_label_pc_e350, label %dec_label_pc_e14c.preheader

dec_label_pc_e14c.preheader:                      ; preds = %dec_label_pc_e13c.preheader, %dec_label_pc_e13c.loopexit
  %v0_e15492 = phi i32 [ %v2_e140, %dec_label_pc_e13c.loopexit ], [ %v2_e14045, %dec_label_pc_e13c.preheader ]
  br label %dec_label_pc_e14c

dec_label_pc_e14c:                                ; preds = %dec_label_pc_e14c.preheader, %dec_label_pc_e338
  %v0_e16c = phi i32 [ %v0_e15492, %dec_label_pc_e14c.preheader ], [ %v2_e344, %dec_label_pc_e338 ]
  %v0_e14c = load i32, i32* @r5, align 4
  %v2_e14c = icmp eq i32 %v0_e14c, 0
  br i1 %v2_e14c, label %dec_label_pc_e154, label %dec_label_pc_e350

dec_label_pc_e154:                                ; preds = %dec_label_pc_e14c
  %v1_e154 = add i32 %v0_e16c, 11
  %v2_e154 = inttoptr i32 %v1_e154 to i8*
  %v3_e154 = load i8, i8* %v2_e154, align 1
  %v4_e154 = zext i8 %v3_e154 to i32
  %v1_e158 = add nsw i32 %v4_e154, -48
  %tmp = icmp ugt i32 %v1_e158, 9
  br i1 %tmp, label %dec_label_pc_e13c.loopexit, label %dec_label_pc_e164

dec_label_pc_e164:                                ; preds = %dec_label_pc_e154
  store i32 %v1_e154, i32* @r7, align 4
  %v3_e170 = call i32 @function_10d84(i32 6, i32* null)
  store i32 %v2_decc, i32* @r0, align 4
  %v3_e17c = call i32 @function_11894(i8* %v2_def0, i32 %v3_e170)
  %v2_e184 = call i32 @function_1186c(i8* %v2_def0)
  %v0_e188 = load i32, i32* @r7, align 4
  %v1_e18c = load i32, i32* @sl, align 4
  %v2_e18c = add i32 %v1_e18c, %v2_e184
  store i32 %v2_e18c, i32* @r0, align 4
  %v2_e190 = inttoptr i32 %v2_e18c to i8*
  %v3_e190 = call i32 @function_11894(i8* %v2_e190, i32 %v0_e188)
  %v2_e198 = call i32 @function_1186c(i8* %v2_def0)
  %v0_e19c = load i32, i32* @r5, align 4
  store i32 %v2_e198, i32* @r4, align 4
  %v2_e1a8 = inttoptr i32 %v0_e19c to i32*
  %v3_e1a8 = call i32 @function_10d84(i32 7, i32* %v2_e1a8)
  %v0_e1b0 = load i32, i32* @r4, align 4
  %v1_e1b0 = load i32, i32* @sl, align 4
  %v2_e1b0 = add i32 %v1_e1b0, %v0_e1b0
  store i32 %v2_e1b0, i32* @r0, align 4
  %v2_e1b4 = inttoptr i32 %v2_e1b0 to i8*
  %v3_e1b4 = call i32 @function_11894(i8* %v2_e1b4, i32 %v3_e1a8)
  %v3_e1c4 = call i32 @function_12234(i32 %v2_decc, i32 %v2_debc, i32 4096)
  %v7_e1c8 = icmp eq i32 %v3_e1c4, -1
  br i1 %v7_e1c8, label %dec_label_pc_e13c.loopexit, label %dec_label_pc_e1d0

dec_label_pc_e1d0:                                ; preds = %dec_label_pc_e164
  %v0_e1d0 = load i32, i32* @r5, align 4
  %v2_e1d8 = inttoptr i32 %v0_e1d0 to i32*
  %v3_e1d8 = call i32 @function_10d84(i32 6, i32* %v2_e1d8)
  store i32 %v2_decc, i32* @r0, align 4
  %v3_e1e4 = call i32 @function_11894(i8* %v2_def0, i32 %v3_e1d8)
  %v2_e1ec = call i32 @function_1186c(i8* %v2_def0)
  %v0_e1f0 = load i32, i32* @r7, align 4
  %v1_e1f4 = load i32, i32* @sl, align 4
  %v2_e1f4 = add i32 %v1_e1f4, %v2_e1ec
  store i32 %v2_e1f4, i32* @r0, align 4
  %v2_e1f8 = inttoptr i32 %v2_e1f4 to i8*
  %v3_e1f8 = call i32 @function_11894(i8* %v2_e1f8, i32 %v0_e1f0)
  %v2_e200 = call i32 @function_1186c(i8* %v2_def0)
  %v0_e204 = load i32, i32* @r5, align 4
  store i32 %v2_e200, i32* @r4, align 4
  %v2_e210 = inttoptr i32 %v0_e204 to i32*
  %v3_e210 = call i32 @function_10d84(i32 8, i32* %v2_e210)
  %v0_e218 = load i32, i32* @r4, align 4
  %v1_e218 = load i32, i32* @sl, align 4
  %v2_e218 = add i32 %v1_e218, %v0_e218
  store i32 %v2_e218, i32* @r0, align 4
  %v2_e21c = inttoptr i32 %v2_e218 to i8*
  %v3_e21c = call i32 @function_11894(i8* %v2_e21c, i32 %v3_e210)
  %v1_e224 = call i32 @function_126cc(i32 %v2_decc)
  store i32 %v1_e224, i32* @r8, align 4
  %v2_e228 = icmp eq i32 %v1_e224, 0
  br i1 %v2_e228, label %dec_label_pc_e13c.loopexit, label %dec_label_pc_e230.preheader

dec_label_pc_e230.preheader:                      ; preds = %dec_label_pc_e1d0
  %v1_e23439 = inttoptr i32 %v1_e224 to i32*
  %v2_e23440 = call i32 @function_12810(i32* %v1_e23439)
  store i32 %v2_e23440, i32* @r6, align 4
  %v2_e23842 = icmp eq i32 %v2_e23440, 0
  br i1 %v2_e23842, label %dec_label_pc_e338, label %dec_label_pc_e248thread-pre-split

dec_label_pc_e230.loopexit:                       ; preds = %dec_label_pc_e250, %dec_label_pc_e2e8
  %v0_e230 = load i32, i32* @r8, align 4
  %v1_e234 = inttoptr i32 %v0_e230 to i32*
  %v2_e234 = call i32 @function_12810(i32* %v1_e234)
  store i32 %v2_e234, i32* @r6, align 4
  %v2_e238 = icmp eq i32 %v2_e234, 0
  br i1 %v2_e238, label %dec_label_pc_e338, label %dec_label_pc_e248thread-pre-split

dec_label_pc_e248thread-pre-split:                ; preds = %dec_label_pc_e230.preheader, %dec_label_pc_e230.loopexit
  %v0_e248.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_e248

dec_label_pc_e248:                                ; preds = %dec_label_pc_e248thread-pre-split, %dec_label_pc_e310
  %v0_e248 = phi i32 [ %v0_e248.pr, %dec_label_pc_e248thread-pre-split ], [ 1, %dec_label_pc_e310 ]
  %v2_e248 = icmp eq i32 %v0_e248, 0
  br i1 %v2_e248, label %dec_label_pc_e250, label %dec_label_pc_e338

dec_label_pc_e250:                                ; preds = %dec_label_pc_e248
  %v2_e250 = call i32 @function_11900(i32 %v2_debc, i32 4096)
  %v0_e254 = load i32, i32* @r5, align 4
  %v2_e25c = inttoptr i32 %v0_e254 to i32*
  %v3_e25c = call i32 @function_10d84(i32 6, i32* %v2_e25c)
  store i32 %v2_decc, i32* @r0, align 4
  %v3_e268 = call i32 @function_11894(i8* %v2_def0, i32 %v3_e25c)
  %v2_e270 = call i32 @function_1186c(i8* %v2_def0)
  %v0_e274 = load i32, i32* @r7, align 4
  %v1_e278 = load i32, i32* @sl, align 4
  %v2_e278 = add i32 %v1_e278, %v2_e270
  store i32 %v2_e278, i32* @r0, align 4
  %v2_e27c = inttoptr i32 %v2_e278 to i8*
  %v3_e27c = call i32 @function_11894(i8* %v2_e27c, i32 %v0_e274)
  %v2_e284 = call i32 @function_1186c(i8* %v2_def0)
  %v0_e288 = load i32, i32* @r5, align 4
  store i32 %v2_e284, i32* @r4, align 4
  %v2_e294 = inttoptr i32 %v0_e288 to i32*
  %v3_e294 = call i32 @function_10d84(i32 8, i32* %v2_e294)
  %v0_e29c = load i32, i32* @r4, align 4
  %v1_e29c = load i32, i32* @sl, align 4
  %v2_e29c = add i32 %v1_e29c, %v0_e29c
  store i32 %v2_e29c, i32* @r0, align 4
  %v2_e2a0 = inttoptr i32 %v2_e29c to i8*
  %v3_e2a0 = call i32 @function_11894(i8* %v2_e2a0, i32 %v3_e294)
  %v2_e2a8 = call i32 @function_1186c(i8* %v2_def0)
  %v1_e2b0 = load i32, i32* @sl, align 4
  %v2_e2b0 = add i32 %v1_e2b0, %v2_e2a8
  store i32 %v2_e2b0, i32* @r0, align 4
  %v2_e2b4 = inttoptr i32 %v2_e2b0 to i8*
  %v3_e2b4 = call i32 @function_11894(i8* %v2_e2b4, i32 ptrtoint (i32* @global_var_176b0.45 to i32))
  %v2_e2bc = call i32 @function_1186c(i8* %v2_def0)
  %v0_e2c0 = load i32, i32* @r6, align 4
  %v1_e2c0 = add i32 %v0_e2c0, 11
  %v1_e2c4 = load i32, i32* @sl, align 4
  %v2_e2c4 = add i32 %v1_e2c4, %v2_e2bc
  store i32 %v2_e2c4, i32* @r0, align 4
  %v2_e2c8 = inttoptr i32 %v2_e2c4 to i8*
  %v3_e2c8 = call i32 @function_11894(i8* %v2_e2c8, i32 %v1_e2c0)
  %v3_e2d8 = call i32 @function_12234(i32 %v2_decc, i32 %v2_debc, i32 4096)
  %v7_e2dc = icmp eq i32 %v3_e2d8, -1
  br i1 %v7_e2dc, label %dec_label_pc_e230.loopexit, label %dec_label_pc_e2e8

dec_label_pc_e2e8:                                ; preds = %dec_label_pc_e250
  %v2_e2e8 = call i32 @function_1186c(i8* %v2_dedc)
  store i32 %v2_e2e8, i32* @r1, align 4
  %v4_e2fc = call i32 @function_11bbc(i8* %v2_dedc, i32 %v2_e2e8, i32 %v2_e108.pre-phi)
  %v7_e300 = icmp eq i32 %v4_e2fc, -1
  br i1 %v7_e300, label %dec_label_pc_e230.loopexit, label %dec_label_pc_e310

dec_label_pc_e310:                                ; preds = %dec_label_pc_e2e8
  %v0_e308 = load i32, i32* @r7, align 4
  %v2_e310 = inttoptr i32 %v0_e308 to i8*
  %v3_e310 = call i32 @function_11990(i8* %v2_e310, i32 10)
  %v2_e318 = call i32 @function_1229c(i32 %v3_e310, i32 9)
  %v0_e31c = load i32, i32* @r8, align 4
  %v1_e320 = inttoptr i32 %v0_e31c to i32*
  %v2_e320 = call i32 @function_12810(i32* %v1_e320)
  store i32 %v2_e320, i32* @r6, align 4
  %v2_e324 = icmp eq i32 %v2_e320, 0
  store i32 1, i32* @r5, align 4
  br i1 %v2_e324, label %dec_label_pc_e338, label %dec_label_pc_e248

dec_label_pc_e338:                                ; preds = %dec_label_pc_e230.loopexit, %dec_label_pc_e310, %dec_label_pc_e248, %dec_label_pc_e230.preheader
  %v0_e338 = load i32, i32* @r8, align 4
  %v1_e33c = inttoptr i32 %v0_e338 to i32*
  %v2_e33c = call i32 @function_12504(i32* %v1_e33c)
  %v0_e340 = load i32, i32* @sb, align 4
  %v1_e344 = inttoptr i32 %v0_e340 to i32*
  %v2_e344 = call i32 @function_12810(i32* %v1_e344)
  %v2_e348 = icmp eq i32 %v2_e344, 0
  br i1 %v2_e348, label %dec_label_pc_e350, label %dec_label_pc_e14c

dec_label_pc_e350:                                ; preds = %dec_label_pc_e13c.loopexit, %dec_label_pc_e338, %dec_label_pc_e14c, %dec_label_pc_e13c.preheader
  %v0_e350 = load i32, i32* @sb, align 4
  %v1_e354 = inttoptr i32 %v0_e350 to i32*
  %v2_e354 = call i32 @function_12504(i32* %v1_e354)
  %v0_e358 = load i32, i32* @r5, align 4
  %v1_e358 = urem i32 %v0_e358, 256
  br label %dec_label_pc_e35c

dec_label_pc_e35c:                                ; preds = %dec_label_pc_e11c, %dec_label_pc_e350
  %storemerge = phi i32 [ %v1_e358, %dec_label_pc_e350 ], [ 0, %dec_label_pc_e11c ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_e360 = call i32 @function_143f4(i32 1)
  br label %dec_label_pc_e368

dec_label_pc_e368:                                ; preds = %dec_label_pc_e0fc, %dec_label_pc_e35c
  %v1_e368 = call i32 @function_10da8(i32 6)
  %v1_e370 = call i32 @function_10da8(i32 7)
  %v1_e378 = call i32 @function_10da8(i32 8)
  %v1_e380 = call i32 @function_10da8(i32 9)
  %v0_e384.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e384

dec_label_pc_e384:                                ; preds = %bb, %dec_label_pc_e368
  %v0_e384 = phi i32 [ %v1_df5c, %bb ], [ %v0_e384.pre, %dec_label_pc_e368 ]
  store i32 %v3_de74, i32* @r4, align 4
  store i32 %v6_de74, i32* @r5, align 4
  store i32 %v9_de74, i32* @r6, align 4
  store i32 %v12_de74, i32* @r7, align 4
  store i32 %v15_de74, i32* @r8, align 4
  store i32 %v18_de74, i32* @sb, align 4
  store i32 %v21_de74, i32* @sl, align 4
  store i32 %v24_de74, i32* @fp, align 4
  store i32 %v27_de74, i32* @lr, align 4
  ret i32 %v0_e384

dec_label_pc_e398:                                ; preds = %dec_label_pc_e06c
  %v1_e398 = add i32 %v0_e398, 1
  %v7_e39c = icmp eq i32 %v0_e398, 0
  br i1 %v7_e39c, label %dec_label_pc_e3a4, label %dec_label_pc_e074

dec_label_pc_e3a4:                                ; preds = %dec_label_pc_e398
  %v1_e3a4 = add i32 %v0_e07c, 3
  %v2_e3a4 = inttoptr i32 %v1_e3a4 to i8*
  %v3_e3a4 = load i8, i8* %v2_e3a4, align 1
  %v7_e3a8 = icmp eq i8 %v3_e3a4, 65
  br i1 %v7_e3a8, label %dec_label_pc_e3bc, label %dec_label_pc_e3b0

dec_label_pc_e3b0:                                ; preds = %dec_label_pc_e3a4, %dec_label_pc_e3bc
  %v0_e08483 = phi i32 [ %v0_e08484, %dec_label_pc_e3a4 ], [ 1, %dec_label_pc_e3bc ]
  br label %dec_label_pc_e04c.backedge

dec_label_pc_e04c.backedge:                       ; preds = %dec_label_pc_e3b0, %dec_label_pc_e078
  %v0_e08482 = phi i32 [ %v0_e08483, %dec_label_pc_e3b0 ], [ %v0_e08484, %dec_label_pc_e078 ]
  %v0_e39874 = phi i32 [ %v1_e398, %dec_label_pc_e3b0 ], [ %v0_e078, %dec_label_pc_e078 ]
  %v0_e06c.pr71 = phi i32 [ 0, %dec_label_pc_e3b0 ], [ %v0_e06c.pr72, %dec_label_pc_e078 ]
  %v0_e04c = add i32 %v0_e07c, 1
  %v1_e04c = add i32 %v0_e07c, 3
  %v2_e04c = inttoptr i32 %v1_e04c to i8*
  %v3_e04c = load i8, i8* %v2_e04c, align 1
  %v2_e050 = icmp eq i8 %v3_e04c, 0
  %v1_e054 = add i32 %v0_e05479, 1
  br i1 %v2_e050, label %dec_label_pc_e084, label %dec_label_pc_e05c

dec_label_pc_e3bc:                                ; preds = %dec_label_pc_e3a4
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_e3b0

dec_label_pc_e3c4:                                ; preds = %dec_label_pc_de74
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_df20

; uselistorder directives
  uselistorder i32 %v1_e054, { 1, 0 }
  uselistorder i8 %v3_e04c, { 1, 0 }
  uselistorder i32 %v0_e08482, { 1, 0 }
  uselistorder i32 %v1_e398, { 1, 0 }
  uselistorder i32 %v2_e344, { 1, 0 }
  uselistorder i32 %v1_e0b0, { 1, 0 }
  uselistorder i32 %v0_e0bc30, { 1, 0 }
  uselistorder i32 %v1_e0d4, { 0, 3, 1, 2 }
  uselistorder i32 %v0_e078, { 1, 0 }
  uselistorder i32 %v0_e05479, { 1, 0 }
  uselistorder i32 %v0_e398, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_e08484, { 1, 2, 0 }
  uselistorder i32 %v1_e05455, { 1, 0 }
  uselistorder i32 %v2_e038, { 1, 0 }
  uselistorder i32 %v1_e034, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_dff4, { 0, 2, 1 }
  uselistorder i32 %v0_dff416, { 1, 0 }
  uselistorder i32 %v1_dfc0, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v2_df50, { 1, 2, 0 }
  uselistorder i32 %v0_def8, { 1, 0 }
  uselistorder i32 %v2_def4, { 1, 0, 2 }
  uselistorder i8* %v2_dedc, { 1, 0, 2 }
  uselistorder i32 %v2_debc, { 1, 0, 2, 3 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i32, i32, i32)* @function_12234, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_11acc, { 1, 0 }
  uselistorder label %dec_label_pc_e3b0, { 1, 0 }
  uselistorder label %dec_label_pc_e384, { 1, 0 }
  uselistorder label %dec_label_pc_e368, { 1, 0 }
  uselistorder label %dec_label_pc_e35c, { 1, 0 }
  uselistorder label %dec_label_pc_e350, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e338, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e248, { 1, 0 }
  uselistorder label %dec_label_pc_e248thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_e230.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_e14c, { 1, 0 }
  uselistorder label %dec_label_pc_e14c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e13c.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e0d0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e078, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e05c, { 1, 0 }
  uselistorder label %dec_label_pc_e000, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_df64.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_dfb4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_df7c, { 1, 0 }
  uselistorder label %dec_label_pc_df20, { 1, 0 }
}

define i32 @function_e3f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_e3f0:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-632 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %v3_e3f0 = load i32, i32* @r4, align 4
  %v6_e3f0 = load i32, i32* @r5, align 4
  %v9_e3f0 = load i32, i32* @r6, align 4
  %v12_e3f0 = load i32, i32* @r7, align 4
  %v15_e3f0 = load i32, i32* @r8, align 4
  %v18_e3f0 = load i32, i32* @sb, align 4
  %v21_e3f0 = load i32, i32* @sl, align 4
  %v24_e3f0 = load i32, i32* @fp, align 4
  %v2_e3fc = call i32 @function_12150(i32* null)
  store i32 %v2_e3fc, i32* @r0, align 4
  store i32 %v2_e3fc, i32* @r5, align 4
  %v0_e404 = call i32 @function_121c0()
  %v7_e408 = icmp eq i32 %v0_e404, -1
  %. = zext i1 %v7_e408 to i32
  %tmp69 = icmp slt i32 %v0_e404, 1
  %storemerge50 = select i1 %tmp69, i32 %., i32 1
  store i32 %storemerge50, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_20390.88 to i32), i32* %r3.global-to-local, align 4
  %v2_e424 = icmp eq i32 %storemerge50, 0
  store i32 %v0_e404, i32* @global_var_20390.88, align 4
  br i1 %v2_e424, label %dec_label_pc_e43c, label %dec_label_pc_e430

dec_label_pc_e430:                                ; preds = %dec_label_pc_e48c, %dec_label_pc_e3f0
  %v1_e438 = phi i32 [ %v0_e404, %dec_label_pc_e3f0 ], [ 0, %dec_label_pc_e48c ]
  store i32 %v3_e3f0, i32* @r4, align 4
  store i32 %v6_e3f0, i32* @r5, align 4
  store i32 %v9_e3f0, i32* @r6, align 4
  store i32 %v12_e3f0, i32* @r7, align 4
  store i32 %v15_e3f0, i32* @r8, align 4
  store i32 %v18_e3f0, i32* @sb, align 4
  store i32 %v21_e3f0, i32* @sl, align 4
  store i32 %v24_e3f0, i32* @fp, align 4
  ret i32 %v1_e438

dec_label_pc_e43c:                                ; preds = %dec_label_pc_e3f0
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v1_e450 = call i32 @function_de74(i32 20736)
  %v2_e454 = icmp eq i32 %v1_e450, 0
  br i1 %v2_e454, label %dec_label_pc_e45c, label %dec_label_pc_e6b8

dec_label_pc_e45c:                                ; preds = %dec_label_pc_e43c, %dec_label_pc_e6b8, %dec_label_pc_e6e0
  %v1_e460 = call i32 @function_143f4(i32 5)
  store i32 4096, i32* @r0, align 4
  %v0_e468 = call i32 @function_12f2c()
  %v1_e468 = inttoptr i32 %v0_e468 to i8*
  store i32 %v0_e468, i32* @global_var_2241c.92, align 4
  store i32 ptrtoint (i32* @global_var_20394.94 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i8 0, i8* %v1_e468, align 1
  %v0_e480 = load i32, i32* %r2.global-to-local, align 4
  %v1_e480 = load i32, i32* %r3.global-to-local, align 4
  %v2_e480 = inttoptr i32 %v1_e480 to i32*
  store i32 %v0_e480, i32* %v2_e480, align 4
  %v0_e484 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_e484, i32* @fp, align 4
  store i32 400, i32* @r6, align 4
  %v2_e580 = ptrtoint i32* %stack_var_-120 to i32
  %v2_e58c = bitcast i32* %stack_var_-120 to i8*
  %v2_e5ec = ptrtoint i32* %stack_var_-632 to i32
  br label %dec_label_pc_e48c

dec_label_pc_e48c:                                ; preds = %dec_label_pc_e54c, %dec_label_pc_e45c
  %v1_e490 = call i32 @function_10e48(i32 6)
  %v3_e49c = call i32 @function_10d84(i32 6, i32* null)
  %v1_e4a0 = call i32 @function_126cc(i32 %v3_e49c)
  store i32 %v1_e4a0, i32* @sl, align 4
  %v2_e4a4 = icmp eq i32 %v1_e4a0, 0
  br i1 %v2_e4a4, label %dec_label_pc_e430, label %dec_label_pc_e4ac

dec_label_pc_e4ac:                                ; preds = %dec_label_pc_e48c
  %v1_e4b0 = call i32 @function_10da8(i32 6)
  %v0_e4b431 = load i32, i32* @sl, align 4
  %v1_e4b832 = inttoptr i32 %v0_e4b431 to i32*
  %v2_e4b833 = call i32 @function_12810(i32* %v1_e4b832)
  %v2_e4bc35 = icmp eq i32 %v2_e4b833, 0
  br i1 %v2_e4bc35, label %dec_label_pc_e54c, label %dec_label_pc_e4c4.preheader

dec_label_pc_e4c4.preheader:                      ; preds = %dec_label_pc_e4ac, %dec_label_pc_e4b4.backedge
  %v0_e4c440 = phi i32 [ %v2_e4b8, %dec_label_pc_e4b4.backedge ], [ %v2_e4b833, %dec_label_pc_e4ac ]
  br label %dec_label_pc_e4c4

dec_label_pc_e4c4:                                ; preds = %dec_label_pc_e4c4.preheader, %dec_label_pc_e534
  %v0_e4d4 = phi i32 [ %v0_e4c440, %dec_label_pc_e4c4.preheader ], [ %v2_e540, %dec_label_pc_e534 ]
  %v1_e4c4 = add i32 %v0_e4d4, 11
  %v2_e4c4 = inttoptr i32 %v1_e4c4 to i8*
  %v3_e4c4 = load i8, i8* %v2_e4c4, align 1
  %v4_e4c4 = zext i8 %v3_e4c4 to i32
  %v1_e4c8 = add nsw i32 %v4_e4c4, -48
  store i32 %v1_e4c8, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_e4c8, 9
  br i1 %tmp, label %dec_label_pc_e4b4.backedge, label %dec_label_pc_e4d4

dec_label_pc_e4d4:                                ; preds = %dec_label_pc_e4c4
  store i32 %v1_e4c4, i32* @r4, align 4
  %v3_e4e0 = call i32 @function_11990(i8* %v2_e4c4, i32 10)
  %v0_e4e4 = load i32, i32* @r6, align 4
  store i32 %v3_e4e0, i32* @r8, align 4
  %v0_e4ec = load i32, i32* @fp, align 4
  %v1_e4ec = add i32 %v0_e4ec, 1
  store i32 %v1_e4ec, i32* @fp, align 4
  %v5_e4f0 = icmp slt i32 %v0_e4e4, %v3_e4e0
  %v2_e55c = call i32 @function_12150(i32* null)
  br i1 %v5_e4f0, label %dec_label_pc_e558, label %dec_label_pc_e4f4

dec_label_pc_e4f4:                                ; preds = %dec_label_pc_e4d4
  %v0_e4fc = load i32, i32* @r5, align 4
  %v2_e4fc = sub i32 %v2_e55c, %v0_e4fc
  %v7_e504 = icmp slt i32 %v2_e4fc, 601
  br i1 %v7_e504, label %dec_label_pc_e50c, label %.thread7

.thread7:                                         ; preds = %dec_label_pc_e4f4
  store i32 400, i32* @r6, align 4
  br label %dec_label_pc_e4b4.backedge

dec_label_pc_e50c:                                ; preds = %dec_label_pc_e4f4
  %v0_e50c = load i32, i32* @r8, align 4
  %v7_e510 = icmp slt i32 %v0_e50c, 401
  br i1 %v7_e510, label %dec_label_pc_e4b4.backedge, label %dec_label_pc_e514

dec_label_pc_e514:                                ; preds = %dec_label_pc_e50c
  %v2_e518 = load i32, i32* @fp, align 4
  %v3_e518 = zext i32 %v2_e518 to i64
  %v4_e518 = mul nuw i64 %v3_e518, 3435973837
  %v3_e51c1 = udiv i64 %v4_e518, 34359738368
  %v3_e5203 = mul nuw nsw i64 %v3_e51c1, 8
  %v3_e520 = trunc i64 %v3_e5203 to i32
  store i32 %v3_e520, i32* %r3.global-to-local, align 4
  %v2_e5245 = mul nuw nsw i64 %v3_e51c1, 2
  %v2_e524 = trunc i64 %v2_e5245 to i32
  %v2_e528 = add i32 %v3_e520, %v2_e524
  store i32 %v2_e528, i32* %r2.global-to-local, align 4
  %v9_e52c = icmp eq i32 %v2_e518, %v2_e528
  br i1 %v9_e52c, label %dec_label_pc_e534, label %dec_label_pc_e4b4.backedge

dec_label_pc_e534:                                ; preds = %dec_label_pc_e514
  %v1_e538 = call i32 @function_143f4(i32 1)
  %v0_e53c = load i32, i32* @sl, align 4
  %v1_e540 = inttoptr i32 %v0_e53c to i32*
  %v2_e540 = call i32 @function_12810(i32* %v1_e540)
  %v2_e544 = icmp eq i32 %v2_e540, 0
  br i1 %v2_e544, label %dec_label_pc_e54c, label %dec_label_pc_e4c4

dec_label_pc_e54c:                                ; preds = %dec_label_pc_e4b4.backedge, %dec_label_pc_e534, %dec_label_pc_e4ac
  %v0_e54c = load i32, i32* @sl, align 4
  %v1_e550 = inttoptr i32 %v0_e54c to i32*
  %v2_e550 = call i32 @function_12504(i32* %v1_e550)
  br label %dec_label_pc_e48c

dec_label_pc_e558:                                ; preds = %dec_label_pc_e4d4
  %v1_e568 = call i32 @function_10e48(i32 6)
  %v1_e570 = call i32 @function_10e48(i32 10)
  %v3_e57c = call i32 @function_10d84(i32 6, i32* null)
  store i32 %v2_e580, i32* @sb, align 4
  store i32 %v2_e580, i32* @r0, align 4
  %v3_e58c = call i32 @function_11894(i8* %v2_e58c, i32 %v3_e57c)
  %v1_e590 = load i32, i32* @sb, align 4
  %v2_e590 = add i32 %v1_e590, %v3_e58c
  store i32 %v2_e590, i32* @r5, align 4
  %v0_e594 = load i32, i32* @r4, align 4
  store i32 %v2_e590, i32* @r0, align 4
  %v2_e59c = inttoptr i32 %v2_e590 to i8*
  %v3_e59c = call i32 @function_11894(i8* %v2_e59c, i32 %v0_e594)
  store i32 %v3_e59c, i32* @r4, align 4
  %v3_e5ac = call i32 @function_10d84(i32 10, i32* null)
  %v0_e5b4 = load i32, i32* @r4, align 4
  %v1_e5b4 = load i32, i32* @r5, align 4
  %v2_e5b4 = add i32 %v1_e5b4, %v0_e5b4
  store i32 %v2_e5b4, i32* @r0, align 4
  %v2_e5b8 = inttoptr i32 %v2_e5b4 to i8*
  %v3_e5b8 = call i32 @function_11894(i8* %v2_e5b8, i32 %v3_e5ac)
  %v1_e5c0 = call i32 @function_10da8(i32 6)
  %v1_e5c8 = call i32 @function_10da8(i32 10)
  %v2_e5d4 = call i32 @function_120dc(i32 %v2_e580, i32 0)
  %v7_e5d8 = icmp eq i32 %v2_e5d4, -1
  store i32 %v2_e5d4, i32* @r7, align 4
  br i1 %v7_e5d8, label %dec_label_pc_e684, label %dec_label_pc_e5e4

dec_label_pc_e5e4:                                ; preds = %dec_label_pc_e558
  %v1_e5e8 = call i32 @function_10e48(i32 62)
  store i32 %v2_e5ec, i32* @r6, align 4
  %v0_e5f027 = load i32, i32* @r7, align 4
  store i32 512, i32* %r2.global-to-local, align 4
  %v1_e5fc28 = call i32 @function_12268(i32 %v0_e5f027)
  store i32 %v1_e5fc28, i32* @r4, align 4
  %tmp72 = icmp slt i32 %v1_e5fc28, 1
  br i1 %tmp72, label %dec_label_pc_e6a4, label %dec_label_pc_e608

dec_label_pc_e608:                                ; preds = %dec_label_pc_e5e4, %dec_label_pc_e5f0.backedge
  %v3_e610 = call i32 @function_10d84(i32 62, i32* null)
  store i32 %v3_e610, i32* @r5, align 4
  %v3_e620 = call i32 @function_10d84(i32 62, i32* null)
  %v1_e624 = inttoptr i32 %v3_e620 to i8*
  %v2_e624 = call i32 @function_1186c(i8* %v1_e624)
  %v0_e628 = load i32, i32* @r4, align 4
  %v5_e62c = icmp slt i32 %v0_e628, %v2_e624
  br i1 %v5_e62c, label %dec_label_pc_e5f0.backedge, label %.thread12

dec_label_pc_e5f0.backedge:                       ; preds = %dec_label_pc_e654, %.thread12, %dec_label_pc_e608
  %v0_e5f0 = load i32, i32* @r7, align 4
  store i32 512, i32* %r2.global-to-local, align 4
  %v1_e5fc = call i32 @function_12268(i32 %v0_e5f0)
  store i32 %v1_e5fc, i32* @r4, align 4
  %tmp73 = icmp slt i32 %v1_e5fc, 1
  br i1 %tmp73, label %dec_label_pc_e6a4, label %dec_label_pc_e608

.thread12:                                        ; preds = %dec_label_pc_e608
  %v1_e63819 = add i32 %v0_e628, -1
  store i32 %v1_e63819, i32* @r4, align 4
  %v2_e63820 = icmp eq i32 %v0_e628, 0
  br i1 %v2_e63820, label %dec_label_pc_e5f0.backedge, label %dec_label_pc_e640.lr.ph

dec_label_pc_e640.lr.ph:                          ; preds = %.thread12
  %v0_e640.pre = load i32, i32* @r5, align 4
  %v1_e644.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e640

dec_label_pc_e640:                                ; preds = %dec_label_pc_e654, %dec_label_pc_e640.lr.ph
  %v0_e638 = phi i32 [ %v1_e63819, %dec_label_pc_e640.lr.ph ], [ %v1_e638, %dec_label_pc_e654 ]
  %v0_e654 = phi i32 [ 0, %dec_label_pc_e640.lr.ph ], [ %v1_e654, %dec_label_pc_e654 ]
  %v1_e640 = phi i32 [ 0, %dec_label_pc_e640.lr.ph ], [ %v1_e64043, %dec_label_pc_e654 ]
  %v2_e640 = add i32 %v1_e640, %v0_e640.pre
  %v3_e640 = inttoptr i32 %v2_e640 to i8*
  %v4_e640 = load i8, i8* %v3_e640, align 1
  %v6_e640 = zext i8 %v4_e640 to i32
  store i32 %v6_e640, i32* %r2.global-to-local, align 4
  %v2_e644 = add i32 %v0_e654, %v1_e644.pre
  %v3_e644 = inttoptr i32 %v2_e644 to i8*
  %v4_e644 = load i8, i8* %v3_e644, align 1
  %v6_e644 = zext i8 %v4_e644 to i32
  store i32 %v6_e644, i32* %r3.global-to-local, align 4
  %v9_e648 = icmp eq i8 %v4_e644, %v4_e640
  br i1 %v9_e648, label %dec_label_pc_e65c, label %bb74

bb74:                                             ; preds = %dec_label_pc_e640
  br label %dec_label_pc_e654

dec_label_pc_e654:                                ; preds = %bb74, %dec_label_pc_e65c
  %v1_e64043 = phi i32 [ %v1_e65c, %dec_label_pc_e65c ], [ 0, %bb74 ]
  %v1_e654 = add i32 %v0_e654, 1
  %v1_e638 = add i32 %v0_e638, -1
  store i32 %v1_e638, i32* @r4, align 4
  %v2_e638 = icmp eq i32 %v0_e638, 0
  br i1 %v2_e638, label %dec_label_pc_e5f0.backedge, label %dec_label_pc_e640

dec_label_pc_e65c:                                ; preds = %dec_label_pc_e640
  %v1_e65c = add i32 %v1_e640, 1
  %v9_e660 = icmp eq i32 %v2_e624, %v1_e65c
  br i1 %v9_e660, label %dec_label_pc_e668, label %dec_label_pc_e654

dec_label_pc_e668:                                ; preds = %dec_label_pc_e65c
  %v1_e66c = call i32 @function_10da8(i32 62)
  %v0_e670 = load i32, i32* @r7, align 4
  %v1_e674 = call i32 @function_124d0(i32 %v0_e670)
  %v0_e678 = load i32, i32* @r8, align 4
  %v2_e680 = call i32 @function_1229c(i32 %v0_e678, i32 9)
  br label %dec_label_pc_e684

dec_label_pc_e684:                                ; preds = %dec_label_pc_e558, %dec_label_pc_e6a4, %dec_label_pc_e668
  %v2_e68c = call i32 @function_11900(i32 %v2_e580, i32 64)
  %v1_e694 = call i32 @function_143f4(i32 1)
  store i32 %v2_e55c, i32* @r5, align 4
  %v0_e69c = load i32, i32* @r8, align 4
  store i32 %v0_e69c, i32* @r6, align 4
  br label %dec_label_pc_e4b4.backedge

dec_label_pc_e4b4.backedge:                       ; preds = %dec_label_pc_e514, %dec_label_pc_e50c, %dec_label_pc_e4c4, %dec_label_pc_e684, %.thread7
  %v0_e4b4 = load i32, i32* @sl, align 4
  %v1_e4b8 = inttoptr i32 %v0_e4b4 to i32*
  %v2_e4b8 = call i32 @function_12810(i32* %v1_e4b8)
  %v2_e4bc = icmp eq i32 %v2_e4b8, 0
  br i1 %v2_e4bc, label %dec_label_pc_e54c, label %dec_label_pc_e4c4.preheader

dec_label_pc_e6a4:                                ; preds = %dec_label_pc_e5f0.backedge, %dec_label_pc_e5e4
  %v1_e6a8 = call i32 @function_10da8(i32 62)
  %v0_e6ac = load i32, i32* @r7, align 4
  %v1_e6b0 = call i32 @function_124d0(i32 %v0_e6ac)
  br label %dec_label_pc_e684

dec_label_pc_e6b8:                                ; preds = %dec_label_pc_e43c
  %v2_e440 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_e440, i32* %r3.global-to-local, align 4
  %v0_e6c0 = load i32, i32* @r4, align 4
  store i32 %v0_e6c0, i32* %r2.global-to-local, align 4
  %v3_e6d0 = call i32 @function_12ce4(i32 2, i32 1, i32 %v0_e6c0)
  %v7_e6d4 = icmp eq i32 %v3_e6d0, -1
  store i32 %v3_e6d0, i32* @r4, align 4
  br i1 %v7_e6d4, label %dec_label_pc_e45c, label %dec_label_pc_e6e0

dec_label_pc_e6e0:                                ; preds = %dec_label_pc_e6b8
  %v2_e6e0 = ptrtoint i32* %stack_var_-56 to i32
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_e6e8 = call i32 @function_12a94(i32 %v3_e6d0, i32 %v2_e6e0, i32 16)
  %v0_e6ec = load i32, i32* @r4, align 4
  %v2_e6f4 = call i32 @function_12b80(i32 %v0_e6ec, i32 1)
  br label %dec_label_pc_e45c

; uselistorder directives
  uselistorder i32 %v3_e6d0, { 2, 1, 0 }
  uselistorder i32 %v2_e4b8, { 1, 0 }
  uselistorder i32 %v1_e65c, { 1, 0 }
  uselistorder i32 %v1_e638, { 1, 0 }
  uselistorder i32 %v1_e640, { 1, 0 }
  uselistorder i32 %v0_e654, { 1, 0 }
  uselistorder i32 %v0_e638, { 1, 0 }
  uselistorder i32 %v0_e628, { 1, 0, 2 }
  uselistorder i32 %v2_e624, { 1, 0 }
  uselistorder i32 %v2_e5d4, { 1, 0 }
  uselistorder i32 %v2_e540, { 1, 0 }
  uselistorder i32 %storemerge50, { 1, 0 }
  uselistorder i32 %v0_e404, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-56, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9 }
  uselistorder i32 (i32*)* @function_12810, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_126cc, { 2, 1, 0 }
  uselistorder i32* @global_var_20390.88, { 0, 2, 1 }
  uselistorder label %dec_label_pc_e4b4.backedge, { 3, 0, 1, 4, 2 }
  uselistorder label %dec_label_pc_e684, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e654, { 1, 0 }
  uselistorder label %dec_label_pc_e608, { 1, 0 }
  uselistorder label %dec_label_pc_e4c4, { 1, 0 }
  uselistorder label %dec_label_pc_e4c4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e45c, { 2, 1, 0 }
}

define i32 @function_e70c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e70c:
  store i32 59172, i32* inttoptr (i32 131528 to i32*), align 8
  ret i32 %arg1
}

define i32 @function_e724(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e724:
  %v1_e72c = call i32 @function_10e48(i32 2)
  store i32 ptrtoint (i16** @global_var_22420.99 to i32), i32* @r4, align 4
  store i32 385990760, i32* @global_var_22424.100, align 4
  %v3_e74c = call i32 @function_10d84(i32 2, i32* null)
  %v4_e74c = inttoptr i32 %v3_e74c to i16*
  %v3_e750 = load i16, i16* %v4_e74c, align 2
  store i16 %v3_e750, i16* bitcast (i32* @global_var_22422.101 to i16*), align 4
  %v1_e75c = call i32 @function_10da8(i32 2)
  ret i32 %v1_e75c
}

define i32 @function_e76c(i32 %arg1) local_unnamed_addr {
dec_label_pc_e76c:
  %r0.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v9_e76c = load i32, i32* @r6, align 4
  %v12_e76c = load i32, i32* @r7, align 4
  %v15_e76c = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_e788 = call i32 @function_12ce4(i32 2, i32 1, i32 0)
  store i32 %v3_e788, i32* %r0.global-to-local, align 4
  store i32 131520, i32* @r6, align 4
  %v7_e790 = icmp eq i32 %v3_e788, -1
  store i32 %v3_e788, i32* inttoptr (i32 131520 to i32*), align 64
  br i1 %v7_e790, label %dec_label_pc_e76c.dec_label_pc_e848_crit_edge, label %dec_label_pc_e79c

dec_label_pc_e76c.dec_label_pc_e848_crit_edge:    ; preds = %dec_label_pc_e76c
  %v1_e850.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e848

dec_label_pc_e79c:                                ; preds = %dec_label_pc_e76c
  %v2_e79c = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_e79c, i32* @r3, align 4
  %v0_e7a0 = load i32, i32* @r4, align 4
  store i32 4, i32* %r5.global-to-local, align 4
  %v0_e7b0 = load i32, i32* %r0.global-to-local, align 4
  %v5_e7b0 = call i32 @function_12ca0(i32 %v0_e7b0, i32 %v0_e7a0, i32 2, i32 %v2_e79c, i32 4)
  store i32 %v5_e7b0, i32* %r0.global-to-local, align 4
  %v0_e7b4 = load i32, i32* @r6, align 4
  %v1_e7b4 = inttoptr i32 %v0_e7b4 to i32*
  %v2_e7b4 = load i32, i32* %v1_e7b4, align 4
  store i32 %v2_e7b4, i32* %r0.global-to-local, align 4
  %v2_e7c4 = call i32 @function_12304(i32 %v2_e7b4, i32 3)
  %v0_e7c8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v2_e7b4, i32* %r0.global-to-local, align 4
  %v2_e7d4 = call i32 @function_12304(i32 %v2_e7b4, i32 %v0_e7c8)
  store i32 %v2_e7d4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @1 to i32), i32* @r8, align 4
  %v0_e804 = call i32 @function_128f8()
  store i32 %v0_e804, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v2_e80c = inttoptr i32 %v0_e804 to i32*
  store i32 0, i32* %v2_e80c, align 4
  %v2_e810 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_e810, i32* @r5, align 4
  store i32 %v0_e804, i32* @r4, align 4
  %v0_e820 = load i32, i32* @r6, align 4
  %v1_e820 = inttoptr i32 %v0_e820 to i32*
  %v2_e820 = load i32, i32* %v1_e820, align 4
  store i32 %v2_e820, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_e82c = call i32 @function_12a94(i32 %v2_e820, i32 %v2_e810, i32 16)
  store i32 %v3_e82c, i32* %r0.global-to-local, align 4
  %v7_e830 = icmp eq i32 %v3_e82c, -1
  br i1 %v7_e830, label %dec_label_pc_e854, label %dec_label_pc_e838

dec_label_pc_e838:                                ; preds = %dec_label_pc_e79c
  %v2_e840 = load i32, i32* inttoptr (i32 131520 to i32*), align 64
  store i32 %v2_e840, i32* %r0.global-to-local, align 4
  %v2_e844 = call i32 @function_12b80(i32 %v2_e840, i32 1)
  store i32 %v2_e844, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e848

dec_label_pc_e848:                                ; preds = %dec_label_pc_e76c.dec_label_pc_e848_crit_edge, %dec_label_pc_e860, %dec_label_pc_e838
  %v1_e850 = phi i32 [ %v1_e850.pre, %dec_label_pc_e76c.dec_label_pc_e848_crit_edge ], [ %v1_e8a8, %dec_label_pc_e860 ], [ %v2_e844, %dec_label_pc_e838 ]
  store i32 %v9_e76c, i32* @r6, align 4
  store i32 %v12_e76c, i32* @r7, align 4
  store i32 %v15_e76c, i32* @r8, align 4
  ret i32 %v1_e850

dec_label_pc_e854:                                ; preds = %dec_label_pc_e79c
  %v0_e854 = load i32, i32* @r4, align 4
  %v1_e854 = inttoptr i32 %v0_e854 to i32*
  %v2_e854 = load i32, i32* %v1_e854, align 4
  %v7_e858 = icmp eq i32 %v2_e854, 99
  br i1 %v7_e858, label %dec_label_pc_e8b0, label %dec_label_pc_e860

dec_label_pc_e860:                                ; preds = %dec_label_pc_e8b0, %bb, %dec_label_pc_e854
  %v0_e878 = load i32, i32* @r6, align 4
  %v1_e878 = inttoptr i32 %v0_e878 to i32*
  %v2_e878 = load i32, i32* %v1_e878, align 4
  store i32 %v2_e878, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_e888 = call i32 @function_12acc(i32 %v2_e878, i32 %v2_e810, i32 16)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_e890 = call i32 @function_143f4(i32 5)
  store i32 %v1_e890, i32* %r0.global-to-local, align 4
  %v0_e894 = load i32, i32* @r6, align 4
  %v1_e894 = inttoptr i32 %v0_e894 to i32*
  %v2_e894 = load i32, i32* %v1_e894, align 4
  store i32 %v2_e894, i32* %r0.global-to-local, align 4
  %v1_e898 = call i32 @function_124d0(i32 %v2_e894)
  store i32 50951, i32* %r0.global-to-local, align 4
  %v1_e8a4 = call i32 @function_de74(i32 50951)
  store i32 %v1_e8a4, i32* %r0.global-to-local, align 4
  %v1_e8a8 = call i32 @function_e76c(i32 %v1_e8a4)
  store i32 %v1_e8a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e848

dec_label_pc_e8b0:                                ; preds = %dec_label_pc_e854
  %v0_e8b0 = load i32, i32* @r8, align 4
  %v1_e8b0 = inttoptr i32 %v0_e8b0 to i8*
  %v2_e8b0 = load i8, i8* %v1_e8b0, align 1
  %v3_e8b0 = zext i8 %v2_e8b0 to i32
  %v1_e8b4 = load i32, i32* @r7, align 4
  %v9_e8b4 = icmp eq i32 %v3_e8b0, %v1_e8b4
  br i1 %v9_e8b4, label %dec_label_pc_e860, label %bb

bb:                                               ; preds = %dec_label_pc_e8b0
  %v2_e8bc = trunc i32 %v1_e8b4 to i8
  store i8 %v2_e8bc, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), align 1
  br label %dec_label_pc_e860

; uselistorder directives
  uselistorder i32 %v1_e8a8, { 1, 0 }
  uselistorder i32 %v2_e810, { 1, 0, 2 }
  uselistorder i32 %v2_e7b4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_e788, { 1, 0, 2 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 19, 1, 0, 2, 3, 5, 4, 7, 6, 9, 8, 10, 12, 11, 13, 14, 16, 17, 18, 15 }
  uselistorder i32 (i32)* @function_de74, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_12b80, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_12a94, { 2, 1, 0 }
  uselistorder [4 x i8]* @1, { 1, 0 }
  uselistorder label %dec_label_pc_e860, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e848, { 1, 2, 0 }
}

define i32 @function_e8c4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e8c4:
  %v0_e8c4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e8c4, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_e8c4
  %v2_e8c8 = load i32, i32* @ip, align 4
  %v5_e8c8 = sdiv i32 %v2_e8c8, 8
  %v6_e8c8 = and i32 %v5_e8c8, %arg2
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_e8c4, %bb
  %v10_e8cc = phi i32 [ %arg1, %dec_label_pc_e8c4 ], [ %v6_e8c8, %bb ]
  ret i32 %v10_e8cc

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_e8d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_e8d0:
  %stack_var_-20 = alloca i32, align 4
  %v3_e8d0 = load i32, i32* @r4, align 4
  %v6_e8d0 = load i32, i32* @r5, align 4
  %v0_e8d8 = call i32 @function_121c0()
  %v7_e8dc = icmp eq i32 %v0_e8d8, -1
  %. = zext i1 %v7_e8dc to i32
  %tmp11 = icmp slt i32 %v0_e8d8, 1
  %storemerge4 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_e8f8 = icmp eq i32 %storemerge4, 0
  store i32 %v0_e8d8, i32* @global_var_20398.106, align 4
  br i1 %v2_e8f8, label %dec_label_pc_e910, label %dec_label_pc_e904

dec_label_pc_e904:                                ; preds = %dec_label_pc_e8d0
  store i32 %v3_e8d0, i32* @r4, align 4
  store i32 %v6_e8d0, i32* @r5, align 4
  ret i32 %v0_e8d8

dec_label_pc_e910:                                ; preds = %dec_label_pc_e8d0
  store i32 1, i32* %stack_var_-20, align 4
  %v1_e91c = call i32 @function_10e48(i32 59)
  %v1_e924 = call i32 @function_10e48(i32 60)
  %v0_e928 = load i32, i32* @r5, align 4
  %v2_e930 = inttoptr i32 %v0_e928 to i32*
  %v3_e930 = call i32 @function_10d84(i32 59, i32* %v2_e930)
  %v2_e938 = call i32 @function_120dc(i32 %v3_e930, i32 2)
  %v7_e93c = icmp eq i32 %v2_e938, -1
  store i32 %v2_e938, i32* @r4, align 4
  br i1 %v7_e93c, label %dec_label_pc_e984, label %dec_label_pc_e948

dec_label_pc_e948:                                ; preds = %dec_label_pc_e984, %dec_label_pc_e910
  %v0_e954 = phi i32 [ %v2_e994, %dec_label_pc_e984 ], [ %v2_e938, %dec_label_pc_e910 ]
  %v2_e958 = ptrtoint i32* %stack_var_-20 to i32
  %v3_e95c = call i32 @function_12444(i32 %v0_e954, i32 -2147199228, i32 %v2_e958)
  br label %dec_label_pc_e960

dec_label_pc_e960:                                ; preds = %dec_label_pc_e960, %dec_label_pc_e948
  %v0_e96c = load i32, i32* @r4, align 4
  %v3_e974 = call i32 @function_12444(i32 %v0_e96c, i32 -2147199227, i32 0)
  %v1_e97c = call i32 @function_143f4(i32 10)
  br label %dec_label_pc_e960

dec_label_pc_e984:                                ; preds = %dec_label_pc_e910
  %v0_e984 = load i32, i32* @r5, align 4
  %v2_e98c = inttoptr i32 %v0_e984 to i32*
  %v3_e98c = call i32 @function_10d84(i32 60, i32* %v2_e98c)
  %v2_e994 = call i32 @function_120dc(i32 %v3_e98c, i32 2)
  %v3_e998 = icmp eq i32 %v2_e994, -1
  store i32 %v2_e994, i32* @r4, align 4
  br i1 %v3_e998, label %dec_label_pc_e9a4, label %dec_label_pc_e948

dec_label_pc_e9a4:                                ; preds = %dec_label_pc_e984
  %v1_e9a8 = call i32 @function_10da8(i32 59)
  %v1_e9b0 = call i32 @function_10da8(i32 60)
  %v0_e9b4 = load i32, i32* @r5, align 4
  %v1_e9b8 = call i32 @function_1433c(i32 %v0_e9b4)
  %v0_e9bc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e9bc, label %bb14, label %bb15

bb14:                                             ; preds = %dec_label_pc_e9a4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_e9a4, %bb14
  ret i32 %v1_e9b8

; uselistorder directives
  uselistorder i32 %v2_e994, { 1, 2, 0 }
  uselistorder i32 %v2_e938, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_e8d8, { 2, 1, 3, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 59, { 0, 1, 2, 4, 3 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_e9c0(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_e9c0:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1432 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-408 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v15_e9c0 = load i32, i32* @r8, align 4
  %v2_e9d0 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_e9d0, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_e9e8 = call i32 @function_12d7c(i32* nonnull %stack_var_-64)
  store i32 %v2_e9d0, i32* @r0, align 4
  %v2_e9f4 = call i32 @function_12d38(i32 %v2_e9d0, i32 2)
  %v0_e9f8 = load i32, i32* @r5, align 4
  store i32 %v0_e9f8, i32* %r2.global-to-local, align 4
  %v3_ea04 = call i32 @function_12498(i32 %v0_e9f8, i32 %v2_e9d0, i32 %v0_e9f8)
  %v2_ea10 = call i32 @function_12d90(i32 17, i32 1)
  %v2_ea1c = call i32 @function_12d90(i32 5, i32 59148)
  %v0_ea20 = call i32 @function_11b28()
  store i32 ptrtoint (i16** @global_var_22420.99 to i32), i32* %r2.global-to-local, align 4
  store i32 1494907824, i32* @global_var_22424.100, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i32 5888, i32* %r3.global-to-local, align 4
  store i32 %v0_ea20, i32* @global_var_22418.77, align 4
  store i16 5888, i16* bitcast (i32* @global_var_22422.101 to i16*), align 4
  store i16 2, i16* bitcast (i16** @global_var_22420.99 to i16*), align 4
  %v6_ea48 = call i32 @function_10ee8(i32 %v0_ea20, i32 ptrtoint (i32* @global_var_22418.77 to i32), i32 ptrtoint (i16** @global_var_22420.99 to i32), i32 5888)
  store i32 59172, i32* %r3.global-to-local, align 4
  store i32 131528, i32* @lr, align 4
  %v2_ea54 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_ea54, i32* @sb, align 4
  store i32 59172, i32* inttoptr (i32 131528 to i32*), align 8
  %v1_ea5c = call i32 @function_e76c(i32 %v6_ea48)
  %v1_ea60 = call i32 @function_f1e8(i32 %v1_ea5c)
  %v2_ea6c = call i32 @function_11900(i32 %v2_ea54, i32 32)
  %v0_ea70 = load i32, i32* @r6, align 4
  %v7_ea70 = icmp eq i32 %v0_ea70, 2
  br i1 %v7_ea70, label %dec_label_pc_eba0, label %dec_label_pc_ea78

dec_label_pc_ea78:                                ; preds = %dec_label_pc_eba0, %dec_label_pc_e9c0, %dec_label_pc_ebb0
  %v0_ea78 = call i32 @function_f18c()
  store i32 %v0_ea78, i32* @r6, align 4
  %v0_ea80 = load i32, i32* @r8, align 4
  %v1_ea80 = inttoptr i32 %v0_ea80 to i32*
  %v2_ea80 = load i32, i32* %v1_ea80, align 4
  %v1_ea84 = inttoptr i32 %v2_ea80 to i8*
  %v2_ea84 = call i32 @function_1186c(i8* %v1_ea84)
  %v0_ea8c = load i32, i32* @r8, align 4
  %v1_ea8c = inttoptr i32 %v0_ea8c to i32*
  %v2_ea8c = load i32, i32* %v1_ea8c, align 4
  %v1_ea90 = inttoptr i32 %v2_ea8c to i8*
  %v2_ea90 = call i32 @function_1186c(i8* %v1_ea90)
  %v1_ea94 = sub i32 20, %v2_ea84
  store i32 %v2_ea90, i32* @r4, align 4
  %v0_ea9c = load i32, i32* @r6, align 4
  %v2_eaa0 = call i32 @function_11f58(i32 %v0_ea9c, i32 %v1_ea94)
  %v2_eaa4 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_eaa4, i32* @r5, align 4
  %v0_eaa8 = load i32, i32* @r4, align 4
  %v2_eaa8 = add i32 %v0_eaa8, %v1_ea94
  store i32 %v2_eaa8, i32* @r4, align 4
  %v2_eab4 = call i32 @function_f250(i32 %v2_eaa4, i32 %v2_eaa8)
  %v2_eab8 = ptrtoint i32* %stack_var_-40 to i32
  %v1_eabc = load i32, i32* @r4, align 4
  %v2_eabc = add i32 %v1_eabc, %v2_eab8
  store i32 %v2_eabc, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_eac8 = load i32, i32* @r8, align 4
  %v1_eac8 = inttoptr i32 %v0_eac8 to i32*
  %v2_eac8 = load i32, i32* %v1_eac8, align 4
  store i32 %v2_eac8, i32* @r0, align 4
  %v3_eacc = add i32 %v2_eabc, -80
  %v4_eacc = inttoptr i32 %v3_eacc to i8*
  store i8 0, i8* %v4_eacc, align 1
  %v2_ead0 = inttoptr i32 %v2_eac8 to i8*
  %v3_ead0 = call i32 @function_11894(i8* %v2_ead0, i32 %v2_eaa4)
  %v2_eadc = call i32 @function_11900(i32 %v2_eaa4, i32 32)
  %v0_eae0 = call i32 @function_f18c()
  store i32 %v0_eae0, i32* @r7, align 4
  %v0_eae8 = load i32, i32* @r8, align 4
  %v1_eae8 = inttoptr i32 %v0_eae8 to i32*
  %v2_eae8 = load i32, i32* %v1_eae8, align 4
  %v1_eaec = inttoptr i32 %v2_eae8 to i8*
  %v2_eaec = call i32 @function_1186c(i8* %v1_eaec)
  store i32 %v2_eaec, i32* @r6, align 4
  %v0_eaf4 = load i32, i32* @r8, align 4
  %v1_eaf4 = inttoptr i32 %v0_eaf4 to i32*
  %v2_eaf4 = load i32, i32* %v1_eaf4, align 4
  %v1_eaf8 = inttoptr i32 %v2_eaf4 to i8*
  %v2_eaf8 = call i32 @function_1186c(i8* %v1_eaf8)
  %v0_eafc = load i32, i32* @r6, align 4
  %v1_eafc = sub i32 20, %v0_eafc
  store i32 %v2_eaf8, i32* @r4, align 4
  %v0_eb04 = load i32, i32* @r7, align 4
  %v2_eb08 = call i32 @function_11f58(i32 %v0_eb04, i32 %v1_eafc)
  %v0_eb0c = load i32, i32* @r4, align 4
  %v2_eb0c = add i32 %v0_eb0c, %v1_eafc
  store i32 %v2_eb0c, i32* @r4, align 4
  %v2_eb18 = call i32 @function_f250(i32 %v2_eaa4, i32 %v2_eb0c)
  store i32 %v2_eab8, i32* %r2.global-to-local, align 4
  %v1_eb20 = load i32, i32* @r4, align 4
  %v2_eb20 = add i32 %v1_eb20, %v2_eab8
  store i32 %v2_eb20, i32* %r3.global-to-local, align 4
  %v0_eb24 = load i32, i32* @sl, align 4
  %v1_eb24 = trunc i32 %v0_eb24 to i8
  %v3_eb24 = add i32 %v2_eb20, -80
  %v4_eb24 = inttoptr i32 %v3_eb24 to i8*
  store i8 %v1_eb24, i8* %v4_eb24, align 1
  %v4_eb30 = call i32 @function_12180(i32 15, i32 %v2_eaa4, i32 %v2_eab8, i32 %v2_eb20)
  %v1_eb38 = call i32 @function_10e48(i32 5)
  %v3_eb48 = call i32 @function_10d84(i32 5, i32* nonnull %stack_var_-48)
  %v3_eb4c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_eb4c, i32* %r2.global-to-local, align 4
  %v2_eb58 = call i32 @function_123dc(i32 1, i32 %v3_eb48)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_eb68 = call i32 @function_123dc(i32 1, i32 ptrtoint (i32* @global_var_176ec.114 to i32))
  %v1_eb70 = call i32 @function_10da8(i32 5)
  %v1_eb74 = call i32 @function_8560(i32 %v1_eb70)
  %v1_eb78 = call i32 @function_e3f0(i32 %v1_eb74)
  store i32 %v1_eb78, i32* @r0, align 4
  %v1_eb7c = call i32 @function_e8d0(i32 %v1_eb78)
  store i32 %v1_eb7c, i32* @r0, align 4
  %v0_eb80 = call i32 @function_121c0()
  %v1_eb84 = load i32, i32* @sl, align 4
  %v7_eb88 = icmp sgt i32 %v0_eb80, %v1_eb84
  br i1 %v7_eb88, label %dec_label_pc_eb8c, label %dec_label_pc_ebd8

dec_label_pc_eb8c:                                ; preds = %dec_label_pc_ea78
  store i32 %v15_e9c0, i32* %r8.global-to-local, align 4
  ret i32 %v1_eb84

dec_label_pc_eba0:                                ; preds = %dec_label_pc_e9c0
  %v0_eba0 = load i32, i32* @r8, align 4
  %v1_eba0 = add i32 %v0_eba0, 4
  %v2_eba0 = inttoptr i32 %v1_eba0 to i32*
  %v3_eba0 = load i32, i32* %v2_eba0, align 4
  %v1_eba4 = inttoptr i32 %v3_eba0 to i8*
  %v2_eba4 = call i32 @function_1186c(i8* %v1_eba4)
  %v8_ebac = icmp sgt i32 %v2_eba4, 31
  br i1 %v8_ebac, label %dec_label_pc_ea78, label %dec_label_pc_ebb0

dec_label_pc_ebb0:                                ; preds = %dec_label_pc_eba0
  %v0_ebb0 = load i32, i32* @r8, align 4
  %v1_ebb0 = add i32 %v0_ebb0, 4
  %v2_ebb0 = inttoptr i32 %v1_ebb0 to i32*
  %v3_ebb0 = load i32, i32* %v2_ebb0, align 4
  store i32 %v2_ea54, i32* @r0, align 4
  %v2_ebb8 = bitcast i32* %stack_var_-152 to i8*
  %v3_ebb8 = call i32 @function_11894(i8* %v2_ebb8, i32 %v3_ebb0)
  %v0_ebbc = load i32, i32* @r8, align 4
  %v1_ebbc = add i32 %v0_ebbc, 4
  %v2_ebbc = inttoptr i32 %v1_ebbc to i32*
  %v3_ebbc = load i32, i32* %v2_ebbc, align 4
  %v1_ebc4 = inttoptr i32 %v3_ebbc to i8*
  %v2_ebc4 = call i32 @function_1186c(i8* %v1_ebc4)
  %v2_ebd0 = call i32 @function_11900(i32 %v3_ebbc, i32 %v2_ebc4)
  br label %dec_label_pc_ea78

dec_label_pc_ebd8:                                ; preds = %dec_label_pc_ea78
  %v1_ebd8 = call i32 @function_12410(i32 %v0_eb80)
  %v0_ebe0 = load i32, i32* @sl, align 4
  %v1_ebe4 = call i32 @function_124d0(i32 %v0_ebe0)
  %v1_ebec = call i32 @function_124d0(i32 1)
  %v1_ebf4 = call i32 @function_124d0(i32 2)
  store i32 131524, i32* @fp, align 4
  %v1_ebfc = call i32 @function_8560(i32 %v1_ebf4)
  %v1_ec00 = call i32 @function_e3f0(i32 %v1_ebfc)
  store i32 %v1_ec00, i32* @r0, align 4
  %v1_ec04 = call i32 @function_e8d0(i32 %v1_ec00)
  store i32 %v1_ec04, i32* @r0, align 4
  %v1_ec08 = call i32 @function_f570(i32 %v1_ec04)
  %v0_ec0c = load i32, i32* @sl, align 4
  %v2_ec10 = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_ec10, i32* @r7, align 4
  %v2_ec14 = ptrtoint i32* %stack_var_-408 to i32
  store i32 %v2_ec14, i32* @r6, align 4
  %v2_ecf4 = ptrtoint i32* %stack_var_-72 to i32
  %v2_ed44 = ptrtoint i32* %stack_var_-168 to i32
  %v2_ef20 = ptrtoint i32* %stack_var_-56 to i32
  %v2_ef28 = ptrtoint i8** %stack_var_-42 to i32
  %v2_f0d0 = ptrtoint i32* %stack_var_-1432 to i32
  %v2_ef44 = ptrtoint i32* %stack_var_-52 to i32
  %v1_eff8 = bitcast i32* %stack_var_-152 to i8*
  %v2_efb8 = ptrtoint i32* %stack_var_-88 to i32
  %v1_efd4 = sub i32 0, %v1_ebd8
  br label %dec_label_pc_ec18

dec_label_pc_ec18:                                ; preds = %dec_label_pc_f058, %dec_label_pc_f0f4, %bb43, %dec_label_pc_eff4, %dec_label_pc_ee28, %dec_label_pc_ee18, %bb40, %dec_label_pc_f148, %dec_label_pc_f0b4, %dec_label_pc_f068, %dec_label_pc_f044, %dec_label_pc_ef70, %dec_label_pc_ee98, %dec_label_pc_edd0, %dec_label_pc_ebd8
  %stack_var_-1436.0 = phi i32 [ %v0_ec0c, %dec_label_pc_ebd8 ], [ %stack_var_-1436.0, %bb40 ], [ %stack_var_-1436.1, %dec_label_pc_ee18 ], [ %stack_var_-1436.1, %dec_label_pc_ee28 ], [ %stack_var_-1436.1, %bb43 ], [ %stack_var_-1436.1, %dec_label_pc_f068 ], [ %stack_var_-1436.1, %dec_label_pc_ee98 ], [ %stack_var_-1436.1, %dec_label_pc_f0f4 ], [ %stack_var_-1436.1, %dec_label_pc_f148 ], [ %stack_var_-1436.1, %dec_label_pc_f0b4 ], [ %stack_var_-1436.1, %dec_label_pc_edd0 ], [ %stack_var_-1436.1, %dec_label_pc_eff4 ], [ %stack_var_-1436.1, %dec_label_pc_f044 ], [ %stack_var_-1436.1, %dec_label_pc_ef70 ], [ %stack_var_-1436.1, %dec_label_pc_f058 ]
  store i32 0, i32* %stack_var_-280, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ec24

dec_label_pc_ec24:                                ; preds = %dec_label_pc_ec24, %dec_label_pc_ec18
  %v1_ec28 = phi i32 [ %v1_ec2c, %dec_label_pc_ec24 ], [ 4, %dec_label_pc_ec18 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_ec28 = load i32, i32* @r7, align 4
  %v3_ec28 = add i32 %v2_ec28, %v1_ec28
  %v4_ec28 = inttoptr i32 %v3_ec28 to i32*
  store i32 0, i32* %v4_ec28, align 4
  %v0_ec2c = load i32, i32* %r3.global-to-local, align 4
  %v1_ec2c = add i32 %v0_ec2c, 4
  store i32 %v1_ec2c, i32* %r3.global-to-local, align 4
  %v7_ec30 = icmp eq i32 %v1_ec2c, 128
  br i1 %v7_ec30, label %dec_label_pc_ec38, label %dec_label_pc_ec24

dec_label_pc_ec38:                                ; preds = %dec_label_pc_ec24
  %v0_ec38 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_ec38, i32* %stack_var_-408, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ec40

dec_label_pc_ec40:                                ; preds = %dec_label_pc_ec40, %dec_label_pc_ec38
  %v1_ec44 = phi i32 [ %v1_ec48, %dec_label_pc_ec40 ], [ 4, %dec_label_pc_ec38 ]
  store i32 0, i32* @r4, align 4
  %v2_ec44 = load i32, i32* @r6, align 4
  %v3_ec44 = add i32 %v2_ec44, %v1_ec44
  %v4_ec44 = inttoptr i32 %v3_ec44 to i32*
  store i32 0, i32* %v4_ec44, align 4
  %v0_ec48 = load i32, i32* %r3.global-to-local, align 4
  %v1_ec48 = add i32 %v0_ec48, 4
  store i32 %v1_ec48, i32* %r3.global-to-local, align 4
  %v7_ec4c = icmp eq i32 %v1_ec48, 128
  br i1 %v7_ec4c, label %dec_label_pc_ec54, label %dec_label_pc_ec40

dec_label_pc_ec54:                                ; preds = %dec_label_pc_ec40
  store i32 131520, i32* %r3.global-to-local, align 4
  %v2_ec58 = load i32, i32* inttoptr (i32 131520 to i32*), align 64
  %v7_ec5c = icmp eq i32 %v2_ec58, -1
  br i1 %v7_ec5c, label %dec_label_pc_ec88, label %dec_label_pc_ec64

dec_label_pc_ec64:                                ; preds = %dec_label_pc_ec54
  %v3_ec64 = udiv i32 %v2_ec58, 32
  %v3_ec68 = mul nuw nsw i32 %v3_ec64, 4
  store i32 %v2_eab8, i32* %ip.global-to-local, align 4
  %v2_ec70 = add i32 %v3_ec68, %v2_eab8
  store i32 %v2_ec70, i32* %r3.global-to-local, align 4
  %v1_ec74 = add i32 %v2_ec70, -240
  %v2_ec74 = inttoptr i32 %v1_ec74 to i32*
  %v3_ec74 = load i32, i32* %v2_ec74, align 4
  %v1_ec78 = urem i32 %v2_ec58, 32
  %v7_ec80 = shl i32 1, %v1_ec78
  %v8_ec80 = or i32 %v3_ec74, %v7_ec80
  store i32 %v8_ec80, i32* %r2.global-to-local, align 4
  store i32 %v8_ec80, i32* %v2_ec74, align 4
  br label %dec_label_pc_ec88

dec_label_pc_ec88:                                ; preds = %dec_label_pc_ec54, %dec_label_pc_ec64
  %v0_ec88 = load i32, i32* @fp, align 4
  %v1_ec88 = inttoptr i32 %v0_ec88 to i32*
  %v2_ec88 = load i32, i32* %v1_ec88, align 4
  store i32 %v2_ec88, i32* @r3, align 4
  %v7_ec8c = icmp eq i32 %v2_ec88, -1
  store i32 131524, i32* %r8.global-to-local, align 4
  br i1 %v7_ec8c, label %dec_label_pc_eeb0, label %dec_label_pc_ec98

dec_label_pc_ec98:                                ; preds = %dec_label_pc_eeb0, %dec_label_pc_ec88, %bb42
  %v2_ec9c = load i8, i8* bitcast (i8** @global_var_2039c.118 to i8*), align 4
  %v3_ec9c = zext i8 %v2_ec9c to i32
  store i32 %v3_ec9c, i32* %r3.global-to-local, align 4
  %v2_eca0 = icmp eq i8 %v2_ec9c, 0
  %v0_edec = load i32, i32* @fp, align 4
  %v1_edec = inttoptr i32 %v0_edec to i32*
  %v2_edec = load i32, i32* %v1_edec, align 4
  store i32 %v2_edec, i32* %ip.global-to-local, align 4
  %v3_edf0 = udiv i32 %v2_edec, 32
  store i32 %v3_edf0, i32* %r3.global-to-local, align 4
  br i1 %v2_eca0, label %dec_label_pc_edec, label %dec_label_pc_eca8

dec_label_pc_eca8:                                ; preds = %dec_label_pc_ec98
  %v3_ecb4 = mul nuw nsw i32 %v3_edf0, 4
  %v2_ecb8 = add i32 %v3_ecb4, %v2_eab8
  store i32 %v2_ecb8, i32* %r3.global-to-local, align 4
  %v1_ecbc = add i32 %v2_ecb8, -368
  %v2_ecbc = inttoptr i32 %v1_ecbc to i32*
  %v3_ecbc = load i32, i32* %v2_ecbc, align 4
  %v1_ecc0 = urem i32 %v2_edec, 32
  %v7_ecc8 = shl i32 1, %v1_ecc0
  %v8_ecc8 = or i32 %v3_ecbc, %v7_ecc8
  store i32 %v8_ecc8, i32* %r2.global-to-local, align 4
  store i32 %v8_ecc8, i32* %v2_ecbc, align 4
  br label %dec_label_pc_ecd0

dec_label_pc_ecd0:                                ; preds = %dec_label_pc_edec, %dec_label_pc_eca8
  store i32 131520, i32* %r3.global-to-local, align 4
  %v2_ecd4 = load i32, i32* inttoptr (i32 131520 to i32*), align 64
  store i32 0, i32* @lr, align 4
  %v0_ecdc = load i32, i32* %ip.global-to-local, align 4
  %v5_ece0 = icmp slt i32 %v0_ecdc, %v2_ecd4
  br i1 %v5_ece0, label %bb40, label %bb

bb:                                               ; preds = %dec_label_pc_ecd0
  br label %bb40

bb40:                                             ; preds = %dec_label_pc_ecd0, %bb
  %v0_ecf0 = phi i32 [ %v2_ecd4, %dec_label_pc_ecd0 ], [ %v0_ecdc, %bb ]
  store i32 10, i32* %stack_var_-72, align 4
  %v1_ecf0 = add i32 %v0_ecf0, 1
  store i32 %v2_ecf4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_ec14, i32* %r2.global-to-local, align 4
  %v5_ed0c = call i32 @function_121f4(i32 %v1_ecf0, i32 %v2_ec10, i32 %v2_ec14, i32 0, i32 %v2_ecf4)
  %v8_ed10 = icmp eq i32 %v5_ed0c, -1
  br i1 %v8_ed10, label %dec_label_pc_ec18, label %dec_label_pc_ed18

dec_label_pc_ed18:                                ; preds = %bb40
  %v6_ed0c = trunc i32 %v5_ed0c to i16
  %v3_ed18 = icmp eq i16 %v6_ed0c, 0
  br i1 %v3_ed18, label %dec_label_pc_ed20, label %dec_label_pc_ed54

dec_label_pc_ed20:                                ; preds = %dec_label_pc_ed18
  %v5_ed2c = srem i32 %stack_var_-1436.0, 6
  %v4_ed34 = sub i32 %stack_var_-1436.0, %v5_ed2c
  store i32 %v4_ed34, i32* %r3.global-to-local, align 4
  %v2_ed3c = icmp eq i32 %v5_ed2c, 0
  %v1_ed40 = add i32 %stack_var_-1436.0, 1
  store i32 %v1_ed40, i32* @lr, align 4
  store i32 %v2_ed44, i32* %r2.global-to-local, align 4
  %v7_ed48 = inttoptr i32 %v5_ed0c to i8*
  store i8* %v7_ed48, i8** %stack_var_-42, align 4
  br i1 %v2_ed3c, label %dec_label_pc_ef20, label %dec_label_pc_ed54

dec_label_pc_ed54:                                ; preds = %dec_label_pc_ed18, %dec_label_pc_ed20, %dec_label_pc_ef20
  %stack_var_-1436.1 = phi i32 [ %v1_ed40, %dec_label_pc_ef20 ], [ %v1_ed40, %dec_label_pc_ed20 ], [ %stack_var_-1436.0, %dec_label_pc_ed18 ]
  store i32 131520, i32* %r3.global-to-local, align 4
  %v2_ed58 = load i32, i32* inttoptr (i32 131520 to i32*), align 64
  %v7_ed5c = icmp eq i32 %v2_ed58, -1
  br i1 %v7_ed5c, label %dec_label_pc_ed88, label %dec_label_pc_ed64

dec_label_pc_ed64:                                ; preds = %dec_label_pc_ed54
  %v3_ed64 = udiv i32 %v2_ed58, 32
  %v3_ed68 = mul nuw nsw i32 %v3_ed64, 4
  store i32 %v2_eab8, i32* %ip.global-to-local, align 4
  %v2_ed70 = add i32 %v3_ed68, %v2_eab8
  store i32 %v2_ed70, i32* %r3.global-to-local, align 4
  %v1_ed74 = add i32 %v2_ed70, -240
  %v2_ed74 = inttoptr i32 %v1_ed74 to i32*
  %v3_ed74 = load i32, i32* %v2_ed74, align 4
  %v1_ed78 = urem i32 %v2_ed58, 32
  %v6_ed7c = lshr i32 %v3_ed74, %v1_ed78
  store i32 %v6_ed7c, i32* %r2.global-to-local, align 4
  %v1_ed80 = urem i32 %v6_ed7c, 2
  %v2_ed80 = icmp eq i32 %v1_ed80, 0
  br i1 %v2_ed80, label %dec_label_pc_ed88, label %dec_label_pc_efac

dec_label_pc_ed88:                                ; preds = %dec_label_pc_ed64, %dec_label_pc_ed54
  %v2_ed8c = load i8, i8* bitcast (i8** @global_var_2039c.118 to i8*), align 4
  %v3_ed8c = zext i8 %v2_ed8c to i32
  store i32 %v3_ed8c, i32* @r4, align 4
  %v2_ed90 = icmp eq i8 %v2_ed8c, 0
  %v0_ee18 = load i32, i32* @fp, align 4
  %v1_ee18 = inttoptr i32 %v0_ee18 to i32*
  %v2_ee18 = load i32, i32* %v1_ee18, align 4
  br i1 %v2_ed90, label %dec_label_pc_ee18, label %dec_label_pc_ed98

dec_label_pc_ed98:                                ; preds = %dec_label_pc_ed88
  %v3_ed9c = udiv i32 %v2_ee18, 32
  store i32 %v2_eab8, i32* %r2.global-to-local, align 4
  %v3_eda4 = mul nuw nsw i32 %v3_ed9c, 4
  %v2_eda8 = add i32 %v3_eda4, %v2_eab8
  store i32 %v2_eda8, i32* %r3.global-to-local, align 4
  %v1_edac = add i32 %v2_eda8, -368
  %v2_edac = inttoptr i32 %v1_edac to i32*
  %v3_edac = load i32, i32* %v2_edac, align 4
  %v1_edb0 = urem i32 %v2_ee18, 32
  %v6_edb4 = lshr i32 %v3_edac, %v1_edb0
  store i32 %v6_edb4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_2039c.118 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_edc0 = urem i32 %v6_edb4, 2
  %v2_edc0 = icmp eq i32 %v1_edc0, 0
  store i8 0, i8* bitcast (i8** @global_var_2039c.118 to i8*), align 4
  store i32 131524, i32* @r5, align 4
  br i1 %v2_edc0, label %dec_label_pc_edd0, label %dec_label_pc_ef3c

dec_label_pc_edd0:                                ; preds = %dec_label_pc_ed98
  store i32 60888, i32* @lr, align 4
  %v1_edd4 = icmp ne i32 %v2_ee18, -1
  call void @__pseudo_cond_branch(i1 %v1_edd4, i32 ptrtoint (i32* @global_var_124d0.48 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_eddc = load i32, i32* @r5, align 4
  %v2_eddc = inttoptr i32 %v1_eddc to i32*
  store i32 -1, i32* %v2_eddc, align 4
  %v1_ede4 = call i32 @function_143f4(i32 1)
  br label %dec_label_pc_ec18

dec_label_pc_edec:                                ; preds = %dec_label_pc_ec98
  store i32 %v2_eab8, i32* %r2.global-to-local, align 4
  %v3_edf8 = mul nuw nsw i32 %v3_edf0, 4
  %v2_edfc = add i32 %v3_edf8, %v2_eab8
  store i32 %v2_edfc, i32* %r3.global-to-local, align 4
  %v1_ee00 = add i32 %v2_edfc, -240
  %v2_ee00 = inttoptr i32 %v1_ee00 to i32*
  %v3_ee00 = load i32, i32* %v2_ee00, align 4
  %v1_ee04 = urem i32 %v2_edec, 32
  %v7_ee0c = shl i32 1, %v1_ee04
  %v8_ee0c = or i32 %v3_ee00, %v7_ee0c
  store i32 %v8_ee0c, i32* %r2.global-to-local, align 4
  store i32 %v8_ee0c, i32* %v2_ee00, align 4
  br label %dec_label_pc_ecd0

dec_label_pc_ee18:                                ; preds = %dec_label_pc_ed88
  %v7_ee1c = icmp eq i32 %v2_ee18, -1
  store i32 131524, i32* @r8, align 4
  br i1 %v7_ee1c, label %dec_label_pc_ec18, label %dec_label_pc_ee28

dec_label_pc_ee28:                                ; preds = %dec_label_pc_ee18
  %v3_ee28 = udiv i32 %v2_ee18, 32
  store i32 %v2_eab8, i32* %r2.global-to-local, align 4
  %v3_ee30 = mul nuw nsw i32 %v3_ee28, 4
  %v2_ee34 = add i32 %v3_ee30, %v2_eab8
  store i32 %v2_ee34, i32* %r3.global-to-local, align 4
  %v1_ee38 = add i32 %v2_ee34, -240
  %v2_ee38 = inttoptr i32 %v1_ee38 to i32*
  %v3_ee38 = load i32, i32* %v2_ee38, align 4
  %v1_ee3c = urem i32 %v2_ee18, 32
  %v6_ee40 = lshr i32 %v3_ee38, %v1_ee3c
  store i32 %v6_ee40, i32* %r2.global-to-local, align 4
  %v1_ee44 = urem i32 %v6_ee40, 2
  %v2_ee44 = icmp eq i32 %v1_ee44, 0
  br i1 %v2_ee44, label %dec_label_pc_ec18, label %dec_label_pc_ee4c

dec_label_pc_ee4c:                                ; preds = %dec_label_pc_ee28
  %v6_ee50 = inttoptr i32 %v3_ed8c to i8*
  store i8* %v6_ee50, i8** %stack_var_-42, align 4
  store i32 %v2_ef28, i32* @sl, align 4
  %v0_ee54 = call i32 @function_128f8()
  %v0_ee58 = load i32, i32* @r4, align 4
  %v2_ee58 = inttoptr i32 %v0_ee54 to i32*
  store i32 %v0_ee58, i32* %v2_ee58, align 4
  store i32 %v0_ee54, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_ee68 = load i32, i32* @r8, align 4
  %v1_ee68 = inttoptr i32 %v0_ee68 to i32*
  %v2_ee68 = load i32, i32* %v1_ee68, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_ee74 = call i32 @function_12bb4(i32 %v2_ee68, i32 %v2_ef28, i32 2, i32 16386)
  %v7_ee78 = icmp eq i32 %v4_ee74, -1
  br i1 %v7_ee78, label %dec_label_pc_f058, label %dec_label_pc_ee80

dec_label_pc_ee80:                                ; preds = %dec_label_pc_ee4c
  %v2_ee80 = icmp eq i32 %v4_ee74, 0
  br i1 %v2_ee80, label %dec_label_pc_f068, label %dec_label_pc_ee88

dec_label_pc_ee88:                                ; preds = %dec_label_pc_ee80
  store i32 %v2_ed44, i32* %ip.global-to-local, align 4
  %v3_ee8c = load i8*, i8** %stack_var_-42, align 4
  %v4_ee8c = ptrtoint i8* %v3_ee8c to i32
  store i32 %v4_ee8c, i32* %r3.global-to-local, align 4
  %v2_ee90 = icmp eq i8* %v3_ee8c, null
  br i1 %v2_ee90, label %dec_label_pc_ee98, label %dec_label_pc_f098

dec_label_pc_ee98:                                ; preds = %dec_label_pc_ee88
  %v0_ee98 = load i32, i32* @r8, align 4
  %v1_ee98 = inttoptr i32 %v0_ee98 to i32*
  %v2_ee98 = load i32, i32* %v1_ee98, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_eea4 = add i32 %v4_ee8c, 16384
  store i32 %v1_eea4, i32* %r3.global-to-local, align 4
  %v4_eea8 = call i32 @function_12bb4(i32 %v2_ee98, i32 %v2_ef28, i32 2, i32 %v1_eea4)
  br label %dec_label_pc_ec18

dec_label_pc_eeb0:                                ; preds = %dec_label_pc_ec88
  %v0_eeb8 = load i32, i32* @r4, align 4
  store i32 %v0_eeb8, i32* %r2.global-to-local, align 4
  %v3_eebc = call i32 @function_12ce4(i32 2, i32 1, i32 %v0_eeb8)
  %v7_eec0 = icmp eq i32 %v3_eebc, -1
  store i32 %v3_eebc, i32* @r5, align 4
  %v1_eec8 = load i32, i32* %r8.global-to-local, align 4
  %v2_eec8 = inttoptr i32 %v1_eec8 to i32*
  store i32 %v3_eebc, i32* %v2_eec8, align 4
  br i1 %v7_eec0, label %dec_label_pc_ec98, label %dec_label_pc_eed0

dec_label_pc_eed0:                                ; preds = %dec_label_pc_eeb0
  %v0_eed0 = load i32, i32* @r4, align 4
  store i32 %v0_eed0, i32* %r2.global-to-local, align 4
  %v2_eed8 = call i32 @function_12304(i32 %v3_eebc, i32 3)
  %v1_eee0 = or i32 %v2_eed8, 2048
  store i32 %v1_eee0, i32* %r2.global-to-local, align 4
  %v0_eee4 = load i32, i32* @r5, align 4
  %v2_eee8 = call i32 @function_12304(i32 %v0_eee4, i32 4)
  %v2_eef0 = load i32, i32* inttoptr (i32 131528 to i32*), align 8
  store i32 %v2_eef0, i32* %r3.global-to-local, align 4
  %v2_eef4 = icmp eq i32 %v2_eef0, 0
  br i1 %v2_eef4, label %bb42, label %bb41

bb41:                                             ; preds = %dec_label_pc_eed0
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_eed0, %bb41
  %v2_eefc = xor i1 %v2_eef4, true
  call void @__pseudo_cond_branch(i1 %v2_eefc, i32 %v2_eef0)
  store i32 ptrtoint (i8** @global_var_2039c.118 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ef08 = load i32, i32* %r8.global-to-local, align 4
  %v1_ef08 = inttoptr i32 %v0_ef08 to i32*
  %v2_ef08 = load i32, i32* %v1_ef08, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_2039c.118 to i8*), align 4
  %v4_ef18 = call i32 @function_12acc(i32 %v2_ef08, i32 ptrtoint (i16** @global_var_22420.99 to i32), i32 16)
  br label %dec_label_pc_ec98

dec_label_pc_ef20:                                ; preds = %dec_label_pc_ed20
  %v0_ef24 = load i32, i32* @fp, align 4
  %v1_ef24 = inttoptr i32 %v0_ef24 to i32*
  %v2_ef24 = load i32, i32* %v1_ef24, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_ef34 = call i32 @function_12c28(i32 %v2_ef24, i32 %v2_ef28, i32 2, i32 16384)
  br label %dec_label_pc_ed54

dec_label_pc_ef3c:                                ; preds = %dec_label_pc_ed98
  store i32 4, i32* @r4, align 4
  store i32 %v2_ef44, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %v2_ef20, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_ef60 = call i32 @function_12b3c(i32 %v2_ee18, i32 1, i32 4, i32 %v2_ef44, i32 %v2_ef20)
  %v3_ef64 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ef64, i32* %r3.global-to-local, align 4
  %v2_ef68 = icmp eq i32 %v3_ef64, 0
  br i1 %v2_ef68, label %dec_label_pc_eff4, label %dec_label_pc_ef70

dec_label_pc_ef70:                                ; preds = %dec_label_pc_ef3c
  %v0_ef70 = load i32, i32* @r5, align 4
  %v1_ef70 = inttoptr i32 %v0_ef70 to i32*
  %v2_ef70 = load i32, i32* %v1_ef70, align 4
  %v1_ef74 = call i32 @function_124d0(i32 %v2_ef70)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_ef7c = load i32, i32* @r5, align 4
  %v2_ef7c = inttoptr i32 %v1_ef7c to i32*
  store i32 -1, i32* %v2_ef7c, align 4
  %v0_ef80 = call i32 @function_f18c()
  %v3_ef88 = zext i32 %v0_ef80 to i64
  %v4_ef88 = mul nuw i64 %v3_ef88, 3435973837
  %v7_ef88 = trunc i64 %v4_ef88 to i32
  store i32 %v7_ef88, i32* %ip.global-to-local, align 4
  %v3_ef8c1 = udiv i64 %v4_ef88, 34359738368
  %v3_ef903 = mul nuw nsw i64 %v3_ef8c1, 8
  %v3_ef90 = trunc i64 %v3_ef903 to i32
  store i32 %v3_ef90, i32* %r2.global-to-local, align 4
  %v2_ef945 = mul nuw nsw i64 %v3_ef8c1, 2
  %v2_ef94 = trunc i64 %v2_ef945 to i32
  %v2_ef98 = add i32 %v3_ef90, %v2_ef94
  store i32 %v2_ef98, i32* %r3.global-to-local, align 4
  %v2_ef9c = sub i32 %v0_ef80, %v2_ef98
  %v1_efa0 = add i32 %v2_ef9c, 1
  %v1_efa4 = call i32 @function_143f4(i32 %v1_efa0)
  br label %dec_label_pc_ec18

dec_label_pc_efac:                                ; preds = %dec_label_pc_ed64
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_ef44, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-52, align 4
  %v5_efc0 = call i32 @function_12a5c(i32 %v2_ed58, i32 %v2_efb8, i32 %v2_ef44, i32 16, i32 16)
  %v1_efc4 = call i32 @function_f320(i32 %v5_efc0)
  %v1_efc8 = call i32 @function_de4c(i32 %v1_efc4)
  store i32 %v1_ebd8, i32* @lr, align 4
  %v2_efd8 = call i32 @function_1229c(i32 %v1_efd4, i32 9)
  store i32 ptrtoint (i32* @global_var_20398.106 to i32), i32* %r3.global-to-local, align 4
  %v2_efe0 = load i32, i32* @global_var_20398.106, align 4
  %v2_efe4 = icmp eq i32 %v2_efe0, 0
  br i1 %v2_efe4, label %dec_label_pc_efec, label %dec_label_pc_f08c

dec_label_pc_efec:                                ; preds = %dec_label_pc_efac, %dec_label_pc_f08c
  %v1_eff0 = call i32 @function_1433c(i32 0)
  br label %dec_label_pc_eff4

dec_label_pc_eff4:                                ; preds = %dec_label_pc_ef3c, %dec_label_pc_efec
  %v2_eff8 = call i32 @function_1186c(i8* %v1_eff8)
  %sext = mul i32 %v2_eff8, 16777216
  %v1_effc = sdiv i32 %sext, 16777216
  %v7_effc = inttoptr i32 %v1_effc to i8*
  store i8* %v7_effc, i8** %stack_var_-42, align 4
  %v0_f000 = call i32 @function_11b28()
  %v0_f008 = load i32, i32* @r4, align 4
  store i32 %v0_f008, i32* %r2.global-to-local, align 4
  store i32 %v0_f000, i32* @global_var_22418.77, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f018 = load i32, i32* @r5, align 4
  %v1_f018 = inttoptr i32 %v0_f018 to i32*
  %v2_f018 = load i32, i32* %v1_f018, align 4
  %v4_f01c = call i32 @function_12c28(i32 %v2_f018, i32 ptrtoint (i32* @global_var_176f0.123 to i32), i32 %v0_f008, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_f028 = load i32, i32* @r5, align 4
  %v1_f028 = inttoptr i32 %v0_f028 to i32*
  %v2_f028 = load i32, i32* %v1_f028, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f034 = call i32 @function_12c28(i32 %v2_f028, i32 %v2_ef28, i32 1, i32 16384)
  %v3_f038 = load i8*, i8** %stack_var_-42, align 4
  %v4_f038 = ptrtoint i8* %v3_f038 to i32
  store i32 %v4_f038, i32* %r2.global-to-local, align 4
  %v3_f03c = icmp eq i8* %v3_f038, null
  br i1 %v3_f03c, label %dec_label_pc_ec18, label %dec_label_pc_f044

dec_label_pc_f044:                                ; preds = %dec_label_pc_eff4
  %v0_f044 = load i32, i32* @r5, align 4
  %v1_f044 = inttoptr i32 %v0_f044 to i32*
  %v2_f044 = load i32, i32* %v1_f044, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f050 = call i32 @function_12c28(i32 %v2_f044, i32 %v2_ea54, i32 %v4_f038, i32 16384)
  br label %dec_label_pc_ec18

dec_label_pc_f058:                                ; preds = %dec_label_pc_f0c8, %dec_label_pc_ee4c
  %v0_f058 = load i32, i32* @r5, align 4
  %v1_f058 = inttoptr i32 %v0_f058 to i32*
  %v2_f058 = load i32, i32* %v1_f058, align 4
  store i32 %v2_f058, i32* %r3.global-to-local, align 4
  %v7_f05c = icmp eq i32 %v2_f058, 4
  br i1 %v7_f05c, label %dec_label_pc_ec18, label %bb43

bb43:                                             ; preds = %dec_label_pc_f058
  %v8_f060 = icmp eq i32 %v2_f058, 11
  br i1 %v8_f060, label %dec_label_pc_ec18, label %dec_label_pc_f068

dec_label_pc_f068:                                ; preds = %dec_label_pc_f0ec, %bb43, %dec_label_pc_ee80
  %v0_f068 = load i32, i32* @fp, align 4
  %v1_f068 = inttoptr i32 %v0_f068 to i32*
  %v2_f068 = load i32, i32* %v1_f068, align 4
  store i32 61556, i32* @lr, align 4
  %v1_f070 = icmp ne i32 %v2_f068, -1
  call void @__pseudo_cond_branch(i1 %v1_f070, i32 ptrtoint (i32* @global_var_124d0.48 to i32))
  store i32 131524, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* inttoptr (i32 131524 to i32*), align 4
  %v1_f084 = call i32 @function_143f4(i32 1)
  br label %dec_label_pc_ec18

dec_label_pc_f08c:                                ; preds = %dec_label_pc_efac
  %v2_f090 = call i32 @function_1229c(i32 %v2_efe0, i32 9)
  br label %dec_label_pc_efec

dec_label_pc_f098:                                ; preds = %dec_label_pc_ee88
  %v3_f098 = udiv i32 %v4_ee8c, 256
  %v1_f09c = urem i32 %v4_ee8c, 256
  store i32 %v1_f09c, i32* %r3.global-to-local, align 4
  %v4_f0a0 = mul nuw nsw i32 %v1_f09c, 256
  %v5_f0a0 = or i32 %v4_f0a0, %v3_f098
  %v6_f0a0 = trunc i32 %v5_f0a0 to i16
  store i32 %v5_f0a0, i32* %r2.global-to-local, align 4
  %v7_f0ac = inttoptr i32 %v5_f0a0 to i8*
  store i8* %v7_f0ac, i8** %stack_var_-42, align 4
  %tmp44 = icmp ult i16 %v6_f0a0, 1025
  br i1 %tmp44, label %dec_label_pc_f0c8, label %dec_label_pc_f0b4

dec_label_pc_f0b4:                                ; preds = %dec_label_pc_f098
  %v0_f0b4 = load i32, i32* @r8, align 4
  %v1_f0b4 = inttoptr i32 %v0_f0b4 to i32*
  %v2_f0b4 = load i32, i32* %v1_f0b4, align 4
  %v1_f0b8 = call i32 @function_124d0(i32 %v2_f0b4)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f0c0 = load i32, i32* @r8, align 4
  %v2_f0c0 = inttoptr i32 %v1_f0c0 to i32*
  store i32 -1, i32* %v2_f0c0, align 4
  br label %dec_label_pc_ec18

dec_label_pc_f0c8:                                ; preds = %dec_label_pc_f098
  %v0_f0c8 = load i32, i32* @r4, align 4
  %v1_f0c8 = load i32, i32* @r5, align 4
  %v2_f0c8 = inttoptr i32 %v1_f0c8 to i32*
  store i32 %v0_f0c8, i32* %v2_f0c8, align 4
  store i32 %v2_f0d0, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_f0d8 = load i32, i32* @r8, align 4
  %v1_f0d8 = inttoptr i32 %v0_f0d8 to i32*
  %v2_f0d8 = load i32, i32* %v1_f0d8, align 4
  %v7_f0e0 = call i32 @function_12bb4(i32 %v2_f0d8, i32 %v2_f0d0, i32 %v5_f0a0, i32 16386)
  %v7_f0e4 = icmp eq i32 %v7_f0e0, -1
  br i1 %v7_f0e4, label %dec_label_pc_f058, label %dec_label_pc_f0ec

dec_label_pc_f0ec:                                ; preds = %dec_label_pc_f0c8
  %v2_f0ec = icmp eq i32 %v7_f0e0, 0
  br i1 %v2_f0ec, label %dec_label_pc_f068, label %dec_label_pc_f0f4

dec_label_pc_f0f4:                                ; preds = %dec_label_pc_f0ec
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f100 = load i32, i32* @r8, align 4
  %v1_f100 = inttoptr i32 %v0_f100 to i32*
  %v2_f100 = load i32, i32* %v1_f100, align 4
  %v4_f104 = call i32 @function_12bb4(i32 %v2_f100, i32 %v2_ef28, i32 2, i32 16384)
  %v3_f10c = load i8*, i8** %stack_var_-42, align 4
  %v4_f10c = ptrtoint i8* %v3_f10c to i32
  %v3_f110 = udiv i32 %v4_f10c, 256
  %v1_f114 = urem i32 %v4_f10c, 256
  store i32 %v1_f114, i32* %r3.global-to-local, align 4
  %v4_f118 = mul nuw nsw i32 %v1_f114, 256
  %v5_f118 = or i32 %v4_f118, %v3_f110
  store i32 %v5_f118, i32* %ip.global-to-local, align 4
  store i32 %v2_ed44, i32* @lr, align 4
  store i32 %v5_f118, i32* %r2.global-to-local, align 4
  %v0_f128 = load i32, i32* @r8, align 4
  %v1_f128 = inttoptr i32 %v0_f128 to i32*
  %v2_f128 = load i32, i32* %v1_f128, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_f130 = inttoptr i32 %v5_f118 to i8*
  store i8* %v6_f130, i8** %stack_var_-42, align 4
  %v6_f134 = call i32 @function_12bb4(i32 %v2_f128, i32 %v2_f0d0, i32 %v5_f118, i32 16384)
  store i32 %v2_ed44, i32* %r2.global-to-local, align 4
  %v3_f13c = load i8*, i8** %stack_var_-42, align 4
  %v3_f140 = icmp eq i8* %v3_f13c, null
  br i1 %v3_f140, label %dec_label_pc_ec18, label %dec_label_pc_f148

dec_label_pc_f148:                                ; preds = %dec_label_pc_f0f4
  %v4_f13c = ptrtoint i8* %v3_f13c to i32
  %v5_f14c = call i32 @function_82c8(i32* nonnull %stack_var_-1432, i32 %v4_f13c, i32 %v2_ed44)
  br label %dec_label_pc_ec18

; uselistorder directives
  uselistorder i8* %v3_f13c, { 1, 0 }
  uselistorder i32 %v5_f118, { 1, 0, 2, 3 }
  uselistorder i32 %v4_f10c, { 1, 0 }
  uselistorder i32 %v7_f0e0, { 1, 0 }
  uselistorder i32 %v5_f0a0, { 1, 0, 3, 2 }
  uselistorder i32 %v3_eebc, { 3, 2, 1, 0 }
  uselistorder i32 %v4_ee8c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_ee74, { 1, 0 }
  uselistorder i32 %v2_ee18, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_ed58, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-1436.1, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_ed40, { 1, 0, 2 }
  uselistorder i32 %v5_ed0c, { 1, 2, 0 }
  uselistorder i32 %v2_ec58, { 2, 1, 0 }
  uselistorder i32 %v1_ec48, { 1, 2, 0 }
  uselistorder i32 %v1_ec2c, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1436.0, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v2_ef44, { 1, 0, 2, 3 }
  uselistorder i32 %v2_ef28, { 3, 0, 5, 4, 2, 1 }
  uselistorder i32 %v2_ef20, { 1, 0 }
  uselistorder i32 %v2_ed44, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_ec14, { 1, 0, 2 }
  uselistorder i32 %v2_eab8, { 0, 12, 1, 13, 2, 11, 3, 10, 4, 5, 9, 8, 6, 14, 7 }
  uselistorder i32 %v2_eaa4, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_e9d0, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-152, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 30, 34, 32, 33, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 9, 5, 6, 10, 11 }
  uselistorder i32* @global_var_20398.106, { 1, 2, 0 }
  uselistorder i8* null, { 0, 2, 1 }
  uselistorder i32 16386, { 1, 3, 0, 4, 2, 5 }
  uselistorder i32 (i32)* @function_143f4, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_2039c.118 to i32), { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_2039c.118 to i8*), { 0, 1, 3, 2 }
  uselistorder i32* inttoptr (i32 131520 to i32*), { 1, 2, 3, 4, 0 }
  uselistorder i32 (i32)* @function_e8d0, { 1, 0 }
  uselistorder i32 (i32)* @function_e3f0, { 1, 0 }
  uselistorder i32 (i32)* @function_8560, { 1, 0 }
  uselistorder i32 (i8*, i32)* @function_11894, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 20, 23, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 56, 57, 58, 59, 60, 61, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55 }
  uselistorder i32 (i32, i32)* @function_f250, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_e76c, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_12d90, { 1, 0 }
  uselistorder label %dec_label_pc_eff4, { 1, 0 }
  uselistorder label %dec_label_pc_efec, { 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_ed54, { 2, 1, 0 }
  uselistorder label %bb40, { 1, 0 }
  uselistorder label %dec_label_pc_ec98, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ec88, { 1, 0 }
  uselistorder label %dec_label_pc_ec18, { 7, 1, 8, 9, 2, 0, 10, 3, 11, 12, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_ea78, { 2, 0, 1 }
}

define i32 @function_f170(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f170:
  %cpsr_c.global-to-local = alloca i1, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v0_f170 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f170, label %bb, label %dec_label_pc_f170..thread1_crit_edge

dec_label_pc_f170..thread1_crit_edge:             ; preds = %dec_label_pc_f170
  %v0_f17c.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %.thread1

bb:                                               ; preds = %dec_label_pc_f170
  %v2_f170 = load i32, i32* @r4, align 4
  %v5_f170 = sdiv i32 %v2_f170, 8
  %v6_f170 = and i32 %v5_f170, %arg2
  %v3_f174 = and i32 %v6_f170, 4
  %v4_f174 = icmp ne i32 %v3_f174, 0
  store i1 %v4_f174, i1* %cpsr_c.global-to-local, align 1
  %v5_f174 = sdiv i32 %v6_f170, 8
  %v6_f174 = and i32 %v5_f174, %arg2
  store i32 %v6_f174, i32* @r0, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_f170..thread1_crit_edge, %bb
  %v0_f17c = phi i1 [ %v0_f17c.pre, %dec_label_pc_f170..thread1_crit_edge ], [ %v4_f174, %bb ]
  call void @__pseudo_cond_branch(i1 %v0_f17c, i32 -22307792)
  %v0_f184 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f184, label %bb4, label %.thread1..thread2_crit_edge

.thread1..thread2_crit_edge:                      ; preds = %.thread1
  br label %.thread2

bb4:                                              ; preds = %.thread1
  %v1_f188 = load i32, i32* @r7, align 4
  store i32 %v1_f188, i32* %arg1, align 4
  br label %.thread2

.thread2:                                         ; preds = %.thread1..thread2_crit_edge, %bb4
  %v8_f188 = load i32, i32* @r0, align 4
  ret i32 %v8_f188

; uselistorder directives
  uselistorder i1* %cpsr_c.global-to-local, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_f18c() local_unnamed_addr {
dec_label_pc_f18c:
  %v2_f198 = load i32, i32* @global_var_203a0.125, align 4
  %v2_f19c = load i32, i32* @global_var_203ac.127, align 4
  %v4_f1a8 = mul i32 %v2_f198, 2048
  %v5_f1a8 = xor i32 %v4_f1a8, %v2_f198
  %v4_f1ac = udiv i32 %v2_f19c, 524288
  %v5_f1ac = xor i32 %v4_f1ac, %v2_f19c
  %v2_f1b0 = load i32, i32* @global_var_203a4.129, align 4
  %v2_f1b4 = load i32, i32* @global_var_203a8.131, align 4
  %v2_f1b8 = xor i32 %v5_f1ac, %v5_f1a8
  %v4_f1bc = udiv i32 %v5_f1a8, 256
  %v5_f1bc = xor i32 %v2_f1b8, %v4_f1bc
  store i32 %v2_f1b0, i32* @global_var_203a0.125, align 4
  store i32 %v2_f1b4, i32* @global_var_203a4.129, align 4
  store i32 %v2_f19c, i32* @global_var_203a8.131, align 4
  store i32 %v5_f1bc, i32* @global_var_203ac.127, align 4
  ret i32 %v5_f1bc

; uselistorder directives
  uselistorder i32 %v2_f19c, { 2, 1, 0 }
  uselistorder i32 %v2_f198, { 1, 0 }
}

define i32 @function_f1e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_f1e8:
  %v2_f1f4 = call i32 @function_12150(i32* null)
  store i32 %v2_f1f4, i32* @r0, align 4
  store i32 %v2_f1f4, i32* @global_var_203a0.125, align 4
  %v0_f200 = call i32 @function_1213c()
  store i32 %v0_f200, i32* @r0, align 4
  %v0_f208 = call i32 @function_120c8()
  %v2_f210 = xor i32 %v0_f200, %v0_f208
  store i32 %v2_f210, i32* @global_var_203a4.129, align 4
  %v1_f218 = call i32 @function_12914(i32 %v2_f210)
  %v2_f21c = load i32, i32* @global_var_203a4.129, align 4
  %v2_f228 = xor i32 %v2_f21c, %v1_f218
  store i32 %v2_f228, i32* @global_var_203ac.127, align 4
  store i32 %v1_f218, i32* @global_var_203a8.131, align 4
  ret i32 %v1_f218

; uselistorder directives
  uselistorder i32 %v1_f218, { 1, 2, 0 }
}

define i32 @function_f250(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f250:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_f250 = load i32, i32* @r4, align 4
  %v6_f250 = load i32, i32* @r5, align 4
  %v9_f250 = load i32, i32* @r6, align 4
  %v12_f250 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_f264 = call i32 @function_10e48(i32 61)
  %v3_f270 = call i32 @function_10d84(i32 61, i32* null)
  store i32 %v3_f270, i32* @r1, align 4
  %v2_f27c = bitcast i32* %stack_var_-72 to i8*
  %v3_f27c = call i32 @function_12a10(i8* %v2_f27c, i32 %v3_f270)
  %v2_f280 = icmp eq i32 %arg2, 0
  br i1 %v2_f280, label %dec_label_pc_f2fc, label %dec_label_pc_f288

dec_label_pc_f288:                                ; preds = %dec_label_pc_f250
  store i32 ptrtoint (i32* @global_var_203a0.125 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_203a4.129 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_203a8.131 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_203ac.127 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v2_f2e0 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_f29c

dec_label_pc_f29c:                                ; preds = %dec_label_pc_f29c.dec_label_pc_f29c_crit_edge, %dec_label_pc_f288
  %v1_f2c0 = phi i32 [ %v1_f2c0.pre, %dec_label_pc_f29c.dec_label_pc_f29c_crit_edge ], [ ptrtoint (i32* @global_var_203a0.125 to i32), %dec_label_pc_f288 ]
  %v2_f29c = load i32, i32* @global_var_203ac.127, align 4
  store i32 %v2_f29c, i32* %r2.global-to-local, align 4
  %v2_f2a0 = load i32, i32* @global_var_203a0.125, align 4
  %v4_f2a4 = udiv i32 %v2_f29c, 524288
  %v5_f2a4 = xor i32 %v4_f2a4, %v2_f29c
  %v4_f2a8 = mul i32 %v2_f2a0, 2048
  %v5_f2a8 = xor i32 %v4_f2a8, %v2_f2a0
  %v2_f2ac = xor i32 %v5_f2a4, %v5_f2a8
  %v2_f2b0 = load i32, i32* @global_var_203a4.129, align 4
  %v2_f2b4 = load i32, i32* @global_var_203a8.131, align 4
  store i32 %v2_f2b4, i32* %ip.global-to-local, align 4
  %v4_f2b8 = udiv i32 %v5_f2a8, 256
  %v5_f2b8 = xor i32 %v2_f2ac, %v4_f2b8
  store i32 %v5_f2b8, i32* @r4, align 4
  %v2_f2c0 = inttoptr i32 %v1_f2c0 to i32*
  store i32 %v2_f2b0, i32* %v2_f2c0, align 4
  %v0_f2c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_f2c4 = load i32, i32* %r8.global-to-local, align 4
  %v2_f2c4 = inttoptr i32 %v1_f2c4 to i32*
  store i32 %v0_f2c4, i32* %v2_f2c4, align 4
  %v0_f2c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_f2c8 = load i32, i32* @r7, align 4
  %v2_f2c8 = inttoptr i32 %v1_f2c8 to i32*
  store i32 %v0_f2c8, i32* %v2_f2c8, align 4
  %v0_f2cc = load i32, i32* @r4, align 4
  %v1_f2cc = load i32, i32* @r6, align 4
  %v2_f2cc = inttoptr i32 %v1_f2cc to i32*
  store i32 %v0_f2cc, i32* %v2_f2cc, align 4
  %v2_f2d0 = call i32 @function_1186c(i8* %v2_f27c)
  %v0_f2d8 = load i32, i32* @r4, align 4
  %v2_f2dc = call i32 @function_11f58(i32 %v0_f2d8, i32 %v2_f2d0)
  %v2_f2e4 = add i32 %v2_f2d0, %v2_f2e0
  %v1_f2e8 = add i32 %v2_f2e4, -32
  %v2_f2e8 = inttoptr i32 %v1_f2e8 to i8*
  %v3_f2e8 = load i8, i8* %v2_f2e8, align 1
  %v2_f2ec = load i32, i32* @r5, align 4
  %v3_f2ec = load i32, i32* %fp.global-to-local, align 4
  %v4_f2ec = add i32 %v3_f2ec, %v2_f2ec
  %v5_f2ec = inttoptr i32 %v4_f2ec to i8*
  store i8 %v3_f2e8, i8* %v5_f2ec, align 1
  %v0_f2f0 = load i32, i32* @r5, align 4
  %v1_f2f0 = add i32 %v0_f2f0, 1
  store i32 %v1_f2f0, i32* @r5, align 4
  %v1_f2f4 = load i32, i32* %sb.global-to-local, align 4
  %v9_f2f4 = icmp eq i32 %v1_f2f0, %v1_f2f4
  br i1 %v9_f2f4, label %dec_label_pc_f2fc, label %dec_label_pc_f29c.dec_label_pc_f29c_crit_edge

dec_label_pc_f29c.dec_label_pc_f29c_crit_edge:    ; preds = %dec_label_pc_f29c
  %v1_f2c0.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_f29c

dec_label_pc_f2fc:                                ; preds = %dec_label_pc_f29c, %dec_label_pc_f250
  %v1_f300 = call i32 @function_10da8(i32 61)
  store i32 %v3_f250, i32* @r4, align 4
  store i32 %v6_f250, i32* @r5, align 4
  store i32 %v9_f250, i32* @r6, align 4
  store i32 %v12_f250, i32* @r7, align 4
  ret i32 %v1_f300

; uselistorder directives
  uselistorder i32 %v2_f2a0, { 1, 0 }
  uselistorder i32 %v2_f29c, { 1, 0, 2 }
  uselistorder i32* @global_var_203ac.127, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_203a8.131, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_203a4.129, { 2, 5, 3, 1, 0, 4 }
  uselistorder i32* @global_var_203a0.125, { 2, 4, 1, 0, 3 }
}

define i32 @function_f320(i32 %arg1) local_unnamed_addr {
dec_label_pc_f320:
  %v2_f32c = load i32, i32* @global_var_22438.141, align 4
  %v2_f334 = call i32 @function_1229c(i32 %v2_f32c, i32 9)
  ret i32 %v2_f334
}

define i32 @function_f348() local_unnamed_addr {
dec_label_pc_f348:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f348 = load i32, i32* @r4, align 4
  store i32 %v3_f348, i32* %stack_var_-16, align 4
  %v12_f348 = load i32, i32* @lr, align 4
  %v0_f34c = load i32, i32* @r0, align 4
  store i32 %v0_f34c, i32* %r5.global-to-local, align 4
  %v1_f350 = add i32 %v0_f34c, 4
  %v2_f350 = inttoptr i32 %v1_f350 to i32*
  %v3_f350 = load i32, i32* %v2_f350, align 4
  store i32 %v3_f350, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 62324, i32* @lr, align 4
  %v1_f370 = icmp ne i32 %v3_f350, -1
  call void @__pseudo_cond_branch(i1 %v1_f370, i32 ptrtoint (i32* @global_var_124d0.48 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f380 = call i32 @function_12ce4(i32 2, i32 1, i32 0)
  store i32 %v3_f380, i32* %r0.global-to-local, align 4
  %v7_f384 = icmp eq i32 %v3_f380, -1
  %v1_f388 = load i32, i32* %r5.global-to-local, align 4
  %v2_f388 = add i32 %v1_f388, 4
  %v3_f388 = inttoptr i32 %v2_f388 to i32*
  store i32 %v3_f380, i32* %v3_f388, align 4
  br i1 %v7_f384, label %dec_label_pc_f348.dec_label_pc_f400_crit_edge, label %dec_label_pc_f390

dec_label_pc_f348.dec_label_pc_f400_crit_edge:    ; preds = %dec_label_pc_f348
  %v1_f408.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f400

dec_label_pc_f390:                                ; preds = %dec_label_pc_f348
  %v2_f354 = ptrtoint i32* %stack_var_-32 to i32
  %v0_f390 = load i32, i32* %r5.global-to-local, align 4
  %v1_f390 = add i32 %v0_f390, 28
  store i32 %v1_f390, i32* %r0.global-to-local, align 4
  %v0_f394 = load i32, i32* %r6.global-to-local, align 4
  %v2_f394 = add i32 %v0_f390, 24
  %v3_f394 = inttoptr i32 %v2_f394 to i32*
  store i32 %v0_f394, i32* %v3_f394, align 4
  %v2_f39c = call i32 @function_11900(i32 %v1_f390, i32 256)
  store i32 %v2_f39c, i32* %r0.global-to-local, align 4
  %v0_f3a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_f3a0 = add i32 %v0_f3a0, 4
  %v2_f3a0 = inttoptr i32 %v1_f3a0 to i32*
  %v3_f3a0 = load i32, i32* %v2_f3a0, align 4
  store i32 %v3_f3a0, i32* %r4.global-to-local, align 4
  %v0_f3a4 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_f3a4, i32* %r2.global-to-local, align 4
  store i32 %v3_f3a0, i32* %r0.global-to-local, align 4
  %v2_f3b0 = call i32 @function_12304(i32 %v3_f3a0, i32 3)
  %v1_f3b8 = or i32 %v2_f3b0, 2048
  store i32 %v1_f3b8, i32* %r2.global-to-local, align 4
  %v0_f3bc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f3bc, i32* %r0.global-to-local, align 4
  %v2_f3c0 = call i32 @function_12304(i32 %v0_f3bc, i32 4)
  store i32 %v2_f3c0, i32* %r0.global-to-local, align 4
  %v2_f3c8 = load i32, i32* @global_var_203e4.143, align 4
  store i32 %v2_f3c8, i32* %r2.global-to-local, align 4
  %v1_f3d0 = load i32, i32* %r5.global-to-local, align 4
  %v2_f3d0 = add i32 %v1_f3d0, 12
  %v3_f3d0 = inttoptr i32 %v2_f3d0 to i32*
  store i32 1, i32* %v3_f3d0, align 4
  store i32 2, i32* @r3, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_f3dc = load i32, i32* %r2.global-to-local, align 4
  %v1_f3dc = load i32, i32* %r5.global-to-local, align 4
  %v2_f3dc = add i32 %v1_f3dc, 8
  %v3_f3dc = inttoptr i32 %v2_f3dc to i32*
  store i32 %v0_f3dc, i32* %v3_f3dc, align 4
  %v0_f3e0 = load i32, i32* %r5.global-to-local, align 4
  %v1_f3e0 = add i32 %v0_f3e0, 16
  %v2_f3e0 = inttoptr i32 %v1_f3e0 to i32*
  %v3_f3e0 = load i32, i32* %v2_f3e0, align 4
  store i32 %v3_f3e0, i32* @ip, align 4
  %v1_f3e4 = add i32 %v0_f3e0, 4
  %v2_f3e4 = inttoptr i32 %v1_f3e4 to i32*
  %v3_f3e4 = load i32, i32* %v2_f3e4, align 4
  store i32 %v3_f3e4, i32* %r0.global-to-local, align 4
  %v1_f3e8 = add i32 %v0_f3e0, 20
  %v2_f3e8 = inttoptr i32 %v1_f3e8 to i16*
  %v3_f3e8 = load i16, i16* %v2_f3e8, align 2
  %v4_f3e8 = zext i16 %v3_f3e8 to i32
  store i32 %v4_f3e8, i32* %r5.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_f3fc = call i32 @function_12acc(i32 %v3_f3e4, i32 %v2_f354, i32 16)
  store i32 %v3_f3fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f400

dec_label_pc_f400:                                ; preds = %dec_label_pc_f348.dec_label_pc_f400_crit_edge, %dec_label_pc_f390
  %v1_f408 = phi i32 [ %v1_f408.pre, %dec_label_pc_f348.dec_label_pc_f400_crit_edge ], [ %v3_f3fc, %dec_label_pc_f390 ]
  %v2_f404 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f404, i32* @r4, align 4
  store i32 %v12_f348, i32* @lr, align 4
  ret i32 %v1_f408

; uselistorder directives
  uselistorder i32 %v3_f380, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 5, 6, 4, 7 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 6, 5, 9, 10, 8, 7 }
  uselistorder i32 (i32, i32)* @function_11900, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f400, { 1, 0 }
}

define i32 @function_f410(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f410:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_f410 = load i32, i32* @r4, align 4
  %v6_f410 = load i32, i32* @r5, align 4
  %v9_f410 = load i32, i32* @r6, align 4
  %v12_f410 = load i32, i32* @r7, align 4
  %v15_f410 = load i32, i32* @r8, align 4
  %v18_f410 = load i32, i32* @sb, align 4
  %v21_f410 = load i32, i32* @sl, align 4
  %v24_f410 = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_203b0.145 to i32), i32* @fp, align 4
  %v2_f418 = load i32, i32* @global_var_203b0.145, align 4
  store i32 ptrtoint (i32* @global_var_203dc.147 to i32), i32* @sl, align 4
  %v1_f424 = add i32 %v2_f418, 1
  store i32 %v1_f424, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_f430 = load i32, i32* @global_var_203dc.147, align 4
  store i32 %v2_f430, i32* %r0.global-to-local, align 4
  %v3_f434 = mul i32 %v1_f424, 16
  store i32 %v3_f434, i32* %r1.global-to-local, align 4
  %v4_f43c = inttoptr i32 %v2_f430 to i32*
  %v5_f43c = call i32 @function_13980(i32* %v4_f43c, i32 %v3_f434, i32 %arg3, i32 %v1_f424)
  %v2_f440 = load i32, i32* @global_var_203b0.145, align 4
  store i32 %v2_f440, i32* %r2.global-to-local, align 4
  store i32 %v5_f43c, i32* @r8, align 4
  %v0_f448 = load i32, i32* @r5, align 4
  store i32 %v0_f448, i32* %r0.global-to-local, align 4
  %v1_f450 = load i32, i32* @sl, align 4
  %v2_f450 = inttoptr i32 %v1_f450 to i32*
  store i32 %v5_f43c, i32* %v2_f450, align 4
  %v1_f454 = inttoptr i32 %v0_f448 to i8*
  %v2_f454 = call i32 @function_1186c(i8* %v1_f454)
  %sext = mul i32 %v2_f454, 16777216
  %v1_f458 = sdiv i32 %sext, 16777216
  %v2_f458 = add nsw i32 %v1_f458, 1
  store i32 %v2_f458, i32* @r4, align 4
  store i32 %v1_f458, i32* @r7, align 4
  store i32 %v2_f458, i32* @r0, align 4
  %v0_f464 = call i32 @function_12f2c()
  store i32 %v0_f464, i32* %r0.global-to-local, align 4
  %v0_f468 = load i32, i32* @r5, align 4
  store i32 %v0_f468, i32* %r1.global-to-local, align 4
  %v0_f46c = load i32, i32* @r4, align 4
  store i32 %v0_f46c, i32* %r2.global-to-local, align 4
  store i32 %v0_f464, i32* %r6.global-to-local, align 4
  %v3_f474 = call i32 @function_118dc(i32 %v0_f464, i32 %v0_f468, i32 %v0_f46c)
  store i32 %v3_f474, i32* %r0.global-to-local, align 4
  %v0_f478 = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_f478, 1
  %extract.t6 = trunc i32 %v0_f478 to i8
  br i1 %tmp22, label %dec_label_pc_f49c, label %dec_label_pc_f480

dec_label_pc_f480:                                ; preds = %dec_label_pc_f410
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f484

dec_label_pc_f484:                                ; preds = %dec_label_pc_f484, %dec_label_pc_f480
  %v2_f48c = phi i32 [ %v1_f490, %dec_label_pc_f484 ], [ 0, %dec_label_pc_f480 ]
  %v1_f484 = load i32, i32* %r6.global-to-local, align 4
  %v2_f484 = add i32 %v1_f484, %v2_f48c
  %v3_f484 = inttoptr i32 %v2_f484 to i8*
  %v4_f484 = load i8, i8* %v3_f484, align 1
  %v6_f484 = zext i8 %v4_f484 to i32
  %v1_f488 = xor i32 %v6_f484, 80
  store i32 %v1_f488, i32* %r3.global-to-local, align 4
  %v1_f48c = trunc i32 %v1_f488 to i8
  store i8 %v1_f48c, i8* %v3_f484, align 1
  %v0_f490 = load i32, i32* %r2.global-to-local, align 4
  %v1_f490 = add i32 %v0_f490, 1
  store i32 %v1_f490, i32* %r2.global-to-local, align 4
  %v1_f494 = load i32, i32* @r7, align 4
  %v9_f494 = icmp eq i32 %v1_f490, %v1_f494
  br i1 %v9_f494, label %dec_label_pc_f49c.loopexit, label %dec_label_pc_f484

dec_label_pc_f49c.loopexit:                       ; preds = %dec_label_pc_f484
  %extract.t = trunc i32 %v1_f490 to i8
  br label %dec_label_pc_f49c

dec_label_pc_f49c:                                ; preds = %dec_label_pc_f49c.loopexit, %dec_label_pc_f410
  %v0_f4ac.off0 = phi i8 [ %extract.t, %dec_label_pc_f49c.loopexit ], [ %extract.t6, %dec_label_pc_f410 ]
  %v2_f49c = load i32, i32* @global_var_203b0.145, align 4
  %v2_f4a0 = load i32, i32* @global_var_203dc.147, align 4
  %v3_f4a4 = mul i32 %v2_f49c, 16
  store i32 %v3_f4a4, i32* @sb, align 4
  %v2_f4a8 = add i32 %v2_f4a0, %v3_f4a4
  store i32 %v2_f4a8, i32* %r2.global-to-local, align 4
  %v3_f4ac = add i32 %v2_f4a8, 12
  %v4_f4ac = inttoptr i32 %v3_f4ac to i8*
  store i8 %v0_f4ac.off0, i8* %v4_f4ac, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_f440, i32* %r3.global-to-local, align 4
  %v0_f4b8 = load i32, i32* %r6.global-to-local, align 4
  %v1_f4b8 = load i32, i32* @r8, align 4
  %v5_f4b8 = mul i32 %v2_f440, 16
  %v6_f4b8 = add i32 %v1_f4b8, %v5_f4b8
  %v7_f4b8 = inttoptr i32 %v6_f4b8 to i32*
  store i32 %v0_f4b8, i32* %v7_f4b8, align 4
  %v2_f4bc = load i32, i32* @global_var_203dc.147, align 4
  store i32 %v2_f4bc, i32* @r7, align 4
  %v1_f4c0 = inttoptr i32 %arg2 to i8*
  %v2_f4c0 = call i32 @function_1186c(i8* %v1_f4c0)
  %sext1 = mul i32 %v2_f4c0, 16777216
  %v1_f4c4 = sdiv i32 %sext1, 16777216
  %v2_f4c4 = add nsw i32 %v1_f4c4, 1
  store i32 %v2_f4c4, i32* @r4, align 4
  store i32 %v1_f4c4, i32* @r6, align 4
  store i32 %v2_f4c4, i32* @r0, align 4
  %v0_f4d0 = call i32 @function_12f2c()
  store i32 %v0_f4d0, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_f4d8 = load i32, i32* @r4, align 4
  store i32 %v0_f4d8, i32* %r2.global-to-local, align 4
  store i32 %v0_f4d0, i32* %r5.global-to-local, align 4
  %v3_f4e0 = call i32 @function_118dc(i32 %v0_f4d0, i32 %arg2, i32 %v0_f4d8)
  store i32 %v3_f4e0, i32* %r0.global-to-local, align 4
  %v0_f4e4 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_f4e4, 1
  %extract.t8 = trunc i32 %v0_f4e4 to i8
  br i1 %tmp23, label %dec_label_pc_f508, label %dec_label_pc_f4ec

dec_label_pc_f4ec:                                ; preds = %dec_label_pc_f49c
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f4f0

dec_label_pc_f4f0:                                ; preds = %dec_label_pc_f4f0, %dec_label_pc_f4ec
  %v2_f4f8 = phi i32 [ %v1_f4fc, %dec_label_pc_f4f0 ], [ 0, %dec_label_pc_f4ec ]
  %v1_f4f0 = load i32, i32* %r5.global-to-local, align 4
  %v2_f4f0 = add i32 %v1_f4f0, %v2_f4f8
  %v3_f4f0 = inttoptr i32 %v2_f4f0 to i8*
  %v4_f4f0 = load i8, i8* %v3_f4f0, align 1
  %v6_f4f0 = zext i8 %v4_f4f0 to i32
  %v1_f4f4 = xor i32 %v6_f4f0, 80
  store i32 %v1_f4f4, i32* %r3.global-to-local, align 4
  %v1_f4f8 = trunc i32 %v1_f4f4 to i8
  store i8 %v1_f4f8, i8* %v3_f4f0, align 1
  %v0_f4fc = load i32, i32* %r2.global-to-local, align 4
  %v1_f4fc = add i32 %v0_f4fc, 1
  store i32 %v1_f4fc, i32* %r2.global-to-local, align 4
  %v1_f500 = load i32, i32* @r6, align 4
  %v9_f500 = icmp eq i32 %v1_f4fc, %v1_f500
  br i1 %v9_f500, label %dec_label_pc_f508.loopexit, label %dec_label_pc_f4f0

dec_label_pc_f508.loopexit:                       ; preds = %dec_label_pc_f4f0
  %extract.t7 = trunc i32 %v1_f4fc to i8
  br label %dec_label_pc_f508

dec_label_pc_f508:                                ; preds = %dec_label_pc_f508.loopexit, %dec_label_pc_f49c
  %v0_f518.off0 = phi i8 [ %extract.t7, %dec_label_pc_f508.loopexit ], [ %extract.t8, %dec_label_pc_f49c ]
  %v2_f508 = load i32, i32* @global_var_203b0.145, align 4
  store i32 %v2_f508, i32* %r0.global-to-local, align 4
  %v2_f50c = load i32, i32* @global_var_203dc.147, align 4
  %v3_f510 = mul i32 %v2_f508, 16
  store i32 %v3_f510, i32* %r1.global-to-local, align 4
  %v2_f514 = or i32 %v3_f510, 13
  %v3_f518 = add i32 %v2_f514, %v2_f50c
  %v4_f518 = inttoptr i32 %v3_f518 to i8*
  store i8 %v0_f518.off0, i8* %v4_f518, align 1
  store i32 ptrtoint (i16** @global_var_203e0.149 to i32), i32* %r4.global-to-local, align 4
  %v2_f524 = load i16, i16* bitcast (i16** @global_var_203e0.149 to i16*), align 4
  %v3_f524 = zext i16 %v2_f524 to i32
  store i32 %v3_f524, i32* %lr.global-to-local, align 4
  %v2_f52c = load i32, i32* @global_var_203dc.147, align 4
  store i32 %v2_f52c, i32* %r2.global-to-local, align 4
  %v0_f534 = load i32, i32* %r1.global-to-local, align 4
  %v2_f534 = add i32 %v0_f534, %v2_f52c
  store i32 %v2_f534, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_203e0.149 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_f53c = load i32, i32* @sb, align 4
  %v1_f53c = load i32, i32* @r7, align 4
  %v2_f53c = add i32 %v1_f53c, %v0_f53c
  store i32 %v2_f53c, i32* %ip.global-to-local, align 4
  %v0_f540 = load i32, i32* %r0.global-to-local, align 4
  %v1_f540 = add i32 %v0_f540, 1
  store i32 %v1_f540, i32* %r0.global-to-local, align 4
  %v3_f544 = add i32 %v2_f534, 10
  %v4_f544 = inttoptr i32 %v3_f544 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_203e0.149 to i32), i32 16), i32 16) to i16), i16* %v4_f544, align 2
  %v0_f548 = load i32, i32* %lr.global-to-local, align 4
  %v1_f548 = trunc i32 %v0_f548 to i16
  %v2_f548 = load i32, i32* %r1.global-to-local, align 4
  %v3_f548 = add i32 %v2_f548, 8
  %v4_f548 = inttoptr i32 %v3_f548 to i16*
  store i16 %v1_f548, i16* %v4_f548, align 2
  %v0_f54c = load i32, i32* %r5.global-to-local, align 4
  %v1_f54c = load i32, i32* %ip.global-to-local, align 4
  %v2_f54c = add i32 %v1_f54c, 4
  %v3_f54c = inttoptr i32 %v2_f54c to i32*
  store i32 %v0_f54c, i32* %v3_f54c, align 4
  %v1_f550 = load i32, i32* @fp, align 4
  %v2_f550 = inttoptr i32 %v1_f550 to i32*
  store i32 %v1_f540, i32* %v2_f550, align 4
  %v0_f554 = load i32, i32* %r3.global-to-local, align 4
  %v1_f554 = trunc i32 %v0_f554 to i16
  %v2_f554 = load i32, i32* %r4.global-to-local, align 4
  %v3_f554 = inttoptr i32 %v2_f554 to i16*
  store i16 %v1_f554, i16* %v3_f554, align 2
  store i32 %v3_f410, i32* @r4, align 4
  store i32 %v6_f410, i32* @r5, align 4
  store i32 %v9_f410, i32* @r6, align 4
  store i32 %v12_f410, i32* @r7, align 4
  store i32 %v15_f410, i32* @r8, align 4
  store i32 %v18_f410, i32* @sb, align 4
  store i32 %v21_f410, i32* @sl, align 4
  store i32 %v24_f410, i32* @fp, align 4
  ret i32 %v1_f540

; uselistorder directives
  uselistorder i32 %v3_f510, { 1, 0 }
  uselistorder i32 %v1_f4fc, { 0, 2, 3, 1 }
  uselistorder i32 %v0_f4d0, { 1, 0, 2 }
  uselistorder i32 %v3_f4a4, { 1, 0 }
  uselistorder i32 %v1_f490, { 0, 2, 3, 1 }
  uselistorder i32 %v0_f464, { 1, 0, 2 }
  uselistorder i32 %v2_f440, { 1, 0, 2 }
  uselistorder i32 %v3_f434, { 1, 0 }
  uselistorder i32 %v1_f424, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 (i8*)* @function_1186c, { 0, 1, 24, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 80, 81, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 74, 75, 76, 77, 78, 79, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @function_f570(i32 %arg1) local_unnamed_addr {
dec_label_pc_f570:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp314 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-56 = alloca i8, align 1
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i16, align 2
  %tmp342 = call i16 @__decompiler_undefined_function_2()
  %v3_f570 = load i32, i32* @r4, align 4
  %v6_f570 = load i32, i32* @r5, align 4
  %v18_f570 = load i32, i32* @sb, align 4
  %v24_f570 = load i32, i32* @fp, align 4
  %v0_f57c = call i32 @function_121c0()
  store i32 %v0_f57c, i32* %r0.global-to-local, align 4
  %v7_f580 = icmp eq i32 %v0_f57c, -1
  %. = zext i1 %v7_f580 to i32
  %tmp345 = icmp slt i32 %v0_f57c, 1
  %storemerge308 = select i1 %tmp345, i32 %., i32 1
  store i32 %storemerge308, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_22438.141 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f59c = icmp eq i32 %storemerge308, 0
  store i1 %v2_f59c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_f57c, i32* @global_var_22438.141, align 4
  br i1 %v2_f59c, label %dec_label_pc_f5b8, label %dec_label_pc_f5a8

dec_label_pc_f5a8:                                ; preds = %dec_label_pc_f570
  store i32 %v3_f570, i32* %r4.global-to-local, align 4
  store i32 %v6_f570, i32* @r5, align 4
  store i32 %v18_f570, i32* @sb, align 4
  store i32 %v24_f570, i32* @fp, align 4
  ret i32 %v0_f57c

dec_label_pc_f5b8:                                ; preds = %dec_label_pc_f570
  %v0_f5b8 = call i32 @function_11b28()
  store i32 %v0_f5b8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22418.77 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_f5b8, i32* @global_var_22418.77, align 4
  %v1_f5c4 = call i32 @function_f1e8(i32 %v0_f5b8)
  %v0_f5c8 = load i32, i32* @r4, align 4
  store i32 %v0_f5c8, i32* %r0.global-to-local, align 4
  %v1_f5cc = inttoptr i32 %v0_f5c8 to i32*
  %v2_f5cc = call i32 @function_12150(i32* %v1_f5cc)
  store i32 ptrtoint (i32* @global_var_203e4.143 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_f5cc, i32* @global_var_203e4.143, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_f5e0 = call i32 @function_1384c(i32 256, i32 288)
  store i32 ptrtoint (i32* @global_var_22430.154 to i32), i32* %r3.global-to-local, align 4
  %v0_f5e8 = load i32, i32* @r4, align 4
  %v5_f5e8 = trunc i32 %v0_f5e8 to i16
  store i16 %v5_f5e8, i16* %stack_var_-52, align 2
  store i32 %v2_f5e0, i32* @global_var_22430.154, align 4
  store i32 %v0_f5e8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f5f4

dec_label_pc_f5f4:                                ; preds = %dec_label_pc_f5f4.dec_label_pc_f5f4_crit_edge, %dec_label_pc_f5b8
  %v2_f600 = phi i32 [ %v2_f600.pre, %dec_label_pc_f5f4.dec_label_pc_f5f4_crit_edge ], [ %v2_f5e0, %dec_label_pc_f5b8 ]
  %v0_f608 = phi i32 [ %v0_f638, %dec_label_pc_f5f4.dec_label_pc_f5f4_crit_edge ], [ %v0_f5e8, %dec_label_pc_f5b8 ]
  %v3_f5f4162 = phi i16 [ %v5_f638, %dec_label_pc_f5f4.dec_label_pc_f5f4_crit_edge ], [ %v5_f5e8, %dec_label_pc_f5b8 ]
  %v4_f5f4 = sext i16 %v3_f5f4162 to i32
  %v3_f5fc = mul i32 %v0_f608, 256
  store i32 %v3_f5fc, i32* %ip.global-to-local, align 4
  %v2_f610 = mul nsw i32 %v4_f5f4, 288
  %v2_f614 = mul i32 %v0_f608, 288
  %v1_f618 = add nsw i32 %v4_f5f4, 1
  store i32 %v1_f618, i32* %r0.global-to-local, align 4
  %v2_f61c = add i32 %v2_f610, %v2_f600
  store i32 %v2_f61c, i32* %r2.global-to-local, align 4
  %v2_f620 = add i32 %v2_f614, %v2_f600
  store i32 %v2_f620, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* @r3, align 4
  %v2_f630 = add i32 %v2_f61c, 4
  %v3_f630 = inttoptr i32 %v2_f630 to i32*
  store i32 -1, i32* %v3_f630, align 4
  %v0_f634 = load i32, i32* @r5, align 4
  %v1_f634 = load i32, i32* %r1.global-to-local, align 4
  %v2_f634 = add i32 %v1_f634, 12
  %v3_f634 = inttoptr i32 %v2_f634 to i32*
  store i32 %v0_f634, i32* %v3_f634, align 4
  %v0_f638 = load i32, i32* %r0.global-to-local, align 4
  %v5_f638 = trunc i32 %v0_f638 to i16
  %v7_f63c = icmp sgt i16 %v3_f5f4162, 254
  br i1 %v7_f63c, label %dec_label_pc_f640, label %dec_label_pc_f5f4.dec_label_pc_f5f4_crit_edge

dec_label_pc_f5f4.dec_label_pc_f5f4_crit_edge:    ; preds = %dec_label_pc_f5f4
  %v2_f600.pre = load i32, i32* @global_var_22430.154, align 4
  br label %dec_label_pc_f5f4

dec_label_pc_f640:                                ; preds = %dec_label_pc_f5f4
  store i16 %v5_f638, i16* %stack_var_-52, align 2
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v3_f64c = call i32 @function_12ce4(i32 2, i32 3, i32 6)
  store i32 %v3_f64c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22434.156 to i32), i32* %r2.global-to-local, align 4
  %v2_f654 = icmp eq i32 %v3_f64c, -1
  store i1 %v2_f654, i1* %cpsr_c.global-to-local, align 1
  %v7_f654 = icmp eq i32 %v3_f64c, -1
  store i1 %v7_f654, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f64c, i32* %r4.global-to-local, align 4
  store i32 %v3_f64c, i32* @global_var_22434.156, align 4
  br i1 %v7_f654, label %dec_label_pc_fdc0, label %dec_label_pc_f664

dec_label_pc_f664:                                ; preds = %dec_label_pc_f640
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_f668 = load i32, i32* @r5, align 4
  store i32 %v0_f668, i32* %r2.global-to-local, align 4
  %v2_f66c = call i32 @function_12304(i32 %v3_f64c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_f674 = or i32 %v2_f66c, 2048
  store i32 %v1_f674, i32* %r2.global-to-local, align 4
  %v0_f678 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f678, i32* %r0.global-to-local, align 4
  %v2_f67c = call i32 @function_12304(i32 %v0_f678, i32 4)
  %v2_f684 = load i32, i32* @global_var_22434.156, align 4
  store i32 %v2_f684, i32* %r0.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_f690 = load i32, i32* @r5, align 4
  store i32 %v0_f690, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_f698 = ptrtoint i16* %stack_var_-52 to i32
  store i32 %v2_f698, i32* %r3.global-to-local, align 4
  store i16 1, i16* %stack_var_-52, align 2
  %v5_f6a8 = call i32 @function_12ca0(i32 %v2_f684, i32 %v0_f690, i32 3, i32 %v2_f698, i32 4)
  store i32 %v5_f6a8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6ac = icmp eq i32 %v5_f6a8, 0
  store i1 %v2_f6ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f6ac, label %dec_label_pc_f6b4, label %dec_label_pc_fdb4

dec_label_pc_f6b4:                                ; preds = %dec_label_pc_f664, %dec_label_pc_f6b4
  %v0_f6b4 = call i32 @function_f18c()
  %v3_f6b8 = mul i32 %v0_f6b4, 65536
  store i32 %v3_f6b8, i32* %r0.global-to-local, align 4
  %v1_f6c0 = mul i32 %v0_f6b4, 256
  %v3_f6c4 = and i32 %v1_f6c0, 65280
  %tmp348 = udiv i32 %v0_f6b4, 256
  %v4_f6c8 = urem i32 %tmp348, 256
  %v5_f6c8 = or i32 %v4_f6c8, %v3_f6c4
  store i32 %v5_f6c8, i32* %r3.global-to-local, align 4
  %v2_f6cc = icmp ugt i32 %v5_f6c8, 1023
  store i1 %v2_f6cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f6cc = icmp eq i32 %v5_f6c8, 1024
  store i1 %v7_f6cc, i1* %cpsr_z.global-to-local, align 1
  %v3_f6d4 = icmp ult i32 %v5_f6c8, 1022
  br i1 %v3_f6d4, label %dec_label_pc_f6b4, label %dec_label_pc_f6d8

dec_label_pc_f6d8:                                ; preds = %dec_label_pc_f6b4
  %v5_f6d0.le = trunc i32 %v0_f6b4 to i16
  store i32 ptrtoint (i8** @global_var_203b4.158 to i32), i32* %r0.global-to-local, align 4
  %v2_f6dc = load i8, i8* bitcast (i8** @global_var_203b4.158 to i8*), align 4
  %v3_f6dc = zext i8 %v2_f6dc to i32
  %v1_f6e0 = and i32 %v3_f6dc, 240
  %v1_f6e4 = or i32 %v1_f6e0, 5
  store i32 %v1_f6e4, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_203b4.158 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_203b6.159 to i16*), align 4
  %v0_f704 = call i32 @function_f18c()
  %v1_f704 = trunc i32 %v0_f704 to i16
  %v3_f70c = load i8, i8* @global_var_203d4.162, align 1
  store i32 ptrtoint (i32* @global_var_203c8.161 to i32), i32* @lr, align 4
  store i32 ptrtoint (i8** @global_var_203b4.158 to i32), i32* %ip.global-to-local, align 4
  %tmp = urem i8 %v3_f70c, 16
  %v1_f718 = zext i8 %tmp to i32
  %v1_f71c = or i32 %v1_f718, 80
  store i32 %v1_f71c, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 6, i32* @r4, align 4
  store i8 64, i8* bitcast (i32* @global_var_203bc.163 to i8*), align 4
  store i16 %v1_f704, i16* bitcast (i32* @global_var_203b8.164 to i16*), align 4
  %v1_f730 = trunc i32 %v1_f71c to i8
  store i8 %v1_f730, i8* @global_var_203d4.162, align 1
  store i8 6, i8* bitcast (i32* @global_var_203bd.165 to i8*), align 4
  %v4_f738 = sext i16 %v5_f6d0.le to i32
  store i32 %v4_f738, i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r0.global-to-local, align 4
  store i16 5888, i16* @global_var_203ca.166, align 2
  store i16 %v5_f6d0.le, i16* bitcast (i32* @global_var_203c8.161 to i16*), align 4
  %v0_f748 = call i32 @function_f18c()
  %v1_f748 = trunc i32 %v0_f748 to i16
  %v3_f750 = load i8, i8* @global_var_203d5.167, align 1
  %v4_f750 = zext i8 %v3_f750 to i32
  store i32 ptrtoint (i32* @global_var_203c8.161 to i32), i32* %ip.global-to-local, align 4
  %v1_f758 = or i32 %v4_f750, 2
  store i32 %v1_f758, i32* %r3.global-to-local, align 4
  store i16 %v1_f748, i16* bitcast (i32* @global_var_203d6.168 to i16*), align 4
  store i32 ptrtoint ([8 x i8]* @global_var_17700.170 to i32), i32* %r1.global-to-local, align 4
  %v1_f764 = trunc i32 %v1_f758 to i8
  store i8 %v1_f764, i8* @global_var_203d5.167, align 1
  store i32 ptrtoint ([6 x i8]* @global_var_176f8.172 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f770 = call i32 @function_f410(i32 ptrtoint ([6 x i8]* @global_var_176f8.172 to i32), i32 ptrtoint ([8 x i8]* @global_var_17700.170 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_176f8.172 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_17708.174 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f780 = call i32 @function_f410(i32 ptrtoint ([6 x i8]* @global_var_176f8.172 to i32), i32 ptrtoint ([5 x i8]* @global_var_17708.174 to i32), i32 9)
  store i32 ptrtoint ([6 x i8]* @global_var_176f8.172 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_17710.176 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_f790 = call i32 @function_f410(i32 ptrtoint ([6 x i8]* @global_var_176f8.172 to i32), i32 ptrtoint ([9 x i8]* @global_var_17710.176 to i32), i32 13)
  store i32 ptrtoint ([6 x i8]* @global_var_176f8.172 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_176f8.172 to i32), i32* %r1.global-to-local, align 4
  %v5_f7a0 = call i32 @function_f410(i32 ptrtoint ([6 x i8]* @global_var_176f8.172 to i32), i32 ptrtoint ([6 x i8]* @global_var_176f8.172 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_176f8.172 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1771c.178 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_f7b0 = call i32 @function_f410(i32 ptrtoint ([6 x i8]* @global_var_176f8.172 to i32), i32 ptrtoint (i32* @global_var_1771c.178 to i32), i32 17)
  store i32 ptrtoint ([6 x i8]* @global_var_176f8.172 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176c8.180 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_f7c0 = call i32 @function_f410(i32 ptrtoint ([6 x i8]* @global_var_176f8.172 to i32), i32 ptrtoint (i32* @global_var_176c8.180 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_176f8.172 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_177fc.182 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f7d0 = call i32 @function_f410(i32 ptrtoint ([6 x i8]* @global_var_176f8.172 to i32), i32 ptrtoint ([5 x i8]* @global_var_177fc.182 to i32), i32 9)
  store i32 ptrtoint ([4 x i8]* @global_var_1772c.184 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176c8.180 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_f7e0 = call i32 @function_f410(i32 ptrtoint ([4 x i8]* @global_var_1772c.184 to i32), i32 ptrtoint (i32* @global_var_176c8.180 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_17738.188 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_f7f0 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32 ptrtoint ([5 x i8]* @global_var_17738.188 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_17740.190 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_f800 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32 ptrtoint ([7 x i8]* @global_var_17740.190 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176c8.180 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_f810 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32 ptrtoint (i32* @global_var_176c8.180 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_17748.192 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f820 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32 ptrtoint ([6 x i8]* @global_var_17748.192 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_17750.194 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f830 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32 ptrtoint ([9 x i8]* @global_var_17750.194 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1775c.196 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f840 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32 ptrtoint ([6 x i8]* @global_var_1775c.196 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_17764.198 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f850 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32 ptrtoint ([6 x i8]* @global_var_17764.198 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1776c.200 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f860 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32 ptrtoint ([9 x i8]* @global_var_1776c.200 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_17778.202 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_f870 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32 ptrtoint ([8 x i8]* @global_var_17778.202 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_17780.204 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_f880 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32 ptrtoint ([4 x i8]* @global_var_17780.204 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_17784.206 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_f890 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32 ptrtoint ([7 x i8]* @global_var_17784.206 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_1778c.208 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_f8a0 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32 ptrtoint ([4 x i8]* @global_var_1778c.208 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_17790.210 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f8b0 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32 ptrtoint ([9 x i8]* @global_var_17790.210 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_17710.176 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f8c0 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32 ptrtoint ([9 x i8]* @global_var_17710.176 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1771c.178 to i32), i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_f8d0 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32 ptrtoint (i32* @global_var_1771c.178 to i32), i32 16)
  store i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1779c.212 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f8e0 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32 ptrtoint ([6 x i8]* @global_var_1779c.212 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_177a4.214 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_f8f0 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32 ptrtoint ([7 x i8]* @global_var_177a4.214 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_177ac.216 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v5_f900 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32 ptrtoint ([11 x i8]* @global_var_177ac.216 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_177b8.218 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_f910 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32 ptrtoint ([7 x i8]* @global_var_177b8.218 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_177c0.220 to i32), i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_f920 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), i32 ptrtoint (i32* @global_var_177c0.220 to i32), i32 16)
  store i32 ptrtoint ([8 x i8]* @global_var_17778.202 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176c8.180 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_f930 = call i32 @function_f410(i32 ptrtoint ([8 x i8]* @global_var_17778.202 to i32), i32 ptrtoint (i32* @global_var_176c8.180 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_177d0.222 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_177d0.222 to i32), i32* %r1.global-to-local, align 4
  %v5_f940 = call i32 @function_f410(i32 ptrtoint ([5 x i8]* @global_var_177d0.222 to i32), i32 ptrtoint ([5 x i8]* @global_var_177d0.222 to i32), i32 8)
  %v0_f944 = load i32, i32* @r4, align 4
  store i32 %v0_f944, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_177d8.224 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176c8.180 to i32), i32* %r1.global-to-local, align 4
  %v4_f950 = call i32 @function_f410(i32 ptrtoint ([7 x i8]* @global_var_177d8.224 to i32), i32 ptrtoint (i32* @global_var_176c8.180 to i32), i32 %v0_f944)
  store i32 ptrtoint ([4 x i8]* @global_var_177e0.226 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_176c8.180 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_f960 = call i32 @function_f410(i32 ptrtoint ([4 x i8]* @global_var_177e0.226 to i32), i32 ptrtoint (i32* @global_var_176c8.180 to i32), i32 3)
  store i32 ptrtoint ([8 x i8]* @global_var_177e4.228 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_177e4.228 to i32), i32* %r1.global-to-local, align 4
  %v5_f970 = call i32 @function_f410(i32 ptrtoint ([8 x i8]* @global_var_177e4.228 to i32), i32 ptrtoint ([8 x i8]* @global_var_177e4.228 to i32), i32 14)
  store i32 ptrtoint ([11 x i8]* @global_var_177ec.230 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_177f8.232 to i32), i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v5_f980 = call i32 @function_f410(i32 ptrtoint ([11 x i8]* @global_var_177ec.230 to i32), i32 ptrtoint ([9 x i8]* @global_var_177f8.232 to i32), i32 18)
  store i32 %v5_f980, i32* %r0.global-to-local, align 4
  %v2_f988 = ptrtoint i32* %stack_var_-1866 to i32
  br label %dec_label_pc_f990

dec_label_pc_f990:                                ; preds = %dec_label_pc_100d0, %dec_label_pc_f6d8
  %stack_var_-1880.0 = phi i32 [ %v2_f988, %dec_label_pc_f6d8 ], [ %stack_var_-1880.1, %dec_label_pc_100d0 ]
  %stack_var_-1876.0 = phi i16 [ %v5_f6d0.le, %dec_label_pc_f6d8 ], [ %stack_var_-1876.1, %dec_label_pc_100d0 ]
  store i32 ptrtoint (i32* @global_var_203e4.143 to i32), i32* %r0.global-to-local, align 4
  %v2_f994 = load i32, i32* @global_var_203e4.143, align 4
  store i32 %v2_f994, i32* @r4, align 4
  %v0_f998 = load i32, i32* @fp, align 4
  %v3_f998 = icmp uge i32 %v0_f998, %v2_f994
  store i1 %v3_f998, i1* %cpsr_c.global-to-local, align 1
  %v9_f998 = icmp eq i32 %v0_f998, %v2_f994
  store i1 %v9_f998, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f998, label %dec_label_pc_fc18, label %dec_label_pc_f9a0

dec_label_pc_f9a0:                                ; preds = %dec_label_pc_f990
  store i32 0, i32* %r3.global-to-local, align 4
  store i16 0, i16* %stack_var_-52, align 2
  %v2_f9a8 = ptrtoint i32* %stack_var_-96 to i32
  br label %dec_label_pc_f9ac

dec_label_pc_f9ac:                                ; preds = %.thread39, %dec_label_pc_f9a0
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_f9c0 = call i32 @function_f18c()
  %v1_f9c0 = trunc i32 %v0_f9c0 to i16
  store i32 %v0_f9c0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22418.77 to i32), i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_203b4.158 to i32), i32* %r2.global-to-local, align 4
  %v2_f9cc = load i32, i32* @global_var_22418.77, align 4
  store i32 %v2_f9cc, i32* %r3.global-to-local, align 4
  store i16 %v1_f9c0, i16* bitcast (i32* @global_var_203b8.164 to i16*), align 4
  store i32 %v2_f9cc, i32* @global_var_203c0.233, align 4
  br label %dec_label_pc_f9d8

dec_label_pc_f9d8:                                ; preds = %dec_label_pc_faac, %dec_label_pc_fa08, %dec_label_pc_fae0, %dec_label_pc_fad4, %dec_label_pc_fac8, %dec_label_pc_fabc, %.thread30, %bb367, %bb366, %bb365, %bb364, %bb363, %dec_label_pc_faa4, %dec_label_pc_fa9c, %bb359, %dec_label_pc_fa6c, %dec_label_pc_fa48, %bb352, %dec_label_pc_fa18, %bb351, %dec_label_pc_fa00, %bb350, %bb369, %dec_label_pc_f9ac
  %v0_f9d8 = call i32 @function_f18c()
  store i32 %v0_f9d8, i32* %r0.global-to-local, align 4
  %v1_f9dc = urem i32 %v0_f9d8, 256
  store i32 %v1_f9dc, i32* %r1.global-to-local, align 4
  %v3_f9e0 = udiv i32 %v0_f9d8, 256
  store i32 %v3_f9e0, i32* %r3.global-to-local, align 4
  %v3_f9e4 = udiv i32 %v0_f9d8, 65536
  store i32 %v3_f9e4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9e8 = icmp eq i32 %v1_f9dc, 0
  store i1 %v2_f9e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9e8, label %bb350, label %bb349

bb349:                                            ; preds = %dec_label_pc_f9d8
  %v3_f9ec = icmp ugt i32 %v1_f9dc, 126
  store i1 %v3_f9ec, i1* %cpsr_c.global-to-local, align 1
  %v8_f9ec = icmp eq i32 %v1_f9dc, 127
  store i1 %v8_f9ec, i1* %cpsr_z.global-to-local, align 1
  br label %bb350

bb350:                                            ; preds = %dec_label_pc_f9d8, %bb349
  %v0_f9fc = phi i1 [ true, %dec_label_pc_f9d8 ], [ %v8_f9ec, %bb349 ]
  %v1_f9f0 = urem i32 %v3_f9e0, 256
  store i32 %v1_f9f0, i32* %ip.global-to-local, align 4
  %v1_f9f4 = urem i32 %v3_f9e4, 256
  store i32 %v1_f9f4, i32* %r2.global-to-local, align 4
  %v1_f9f8 = and i32 %v0_f9d8, 8388608
  %v2_f9f8 = icmp ne i32 %v1_f9f8, 0
  store i1 %v2_f9f8, i1* %cpsr_c.global-to-local, align 1
  %v3_f9f8 = udiv i32 %v0_f9d8, 16777216
  store i32 %v3_f9f8, i32* %r0.global-to-local, align 4
  br i1 %v0_f9fc, label %dec_label_pc_f9d8, label %dec_label_pc_fa00

dec_label_pc_fa00:                                ; preds = %bb350
  %v2_fa00 = icmp ugt i32 %v1_f9dc, 2
  store i1 %v2_fa00, i1* %cpsr_c.global-to-local, align 1
  %v7_fa00 = icmp eq i32 %v1_f9dc, 3
  store i1 %v7_fa00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa00, label %dec_label_pc_f9d8, label %dec_label_pc_fa08

dec_label_pc_fa08:                                ; preds = %dec_label_pc_fa00
  %v1_fa08 = add nsw i32 %v1_f9dc, -15
  store i32 %v1_fa08, i32* %r3.global-to-local, align 4
  %v2_fa0c = icmp ugt i32 %v1_f9dc, 55
  store i1 %v2_fa0c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa0c = icmp eq i32 %v1_f9dc, 56
  store i1 %v7_fa0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa0c, label %dec_label_pc_f9d8, label %bb351

bb351:                                            ; preds = %dec_label_pc_fa08
  %v3_fa10 = icmp ne i32 %v1_fa08, 0
  store i1 %v3_fa10, i1* %cpsr_c.global-to-local, align 1
  %v8_fa10 = icmp eq i32 %v1_fa08, 1
  store i1 %v8_fa10, i1* %cpsr_z.global-to-local, align 1
  %v2_fa14 = xor i1 %v3_fa10, true
  %v3_fa14 = or i1 %v8_fa10, %v2_fa14
  br i1 %v3_fa14, label %dec_label_pc_f9d8, label %dec_label_pc_fa18

dec_label_pc_fa18:                                ; preds = %bb351
  %v2_fa18 = icmp ugt i32 %v1_f9dc, 9
  store i1 %v2_fa18, i1* %cpsr_c.global-to-local, align 1
  %v7_fa18 = icmp eq i32 %v1_f9dc, 10
  store i1 %v7_fa18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa18, label %dec_label_pc_f9d8, label %dec_label_pc_fa20

dec_label_pc_fa20:                                ; preds = %dec_label_pc_fa18
  %v2_fa20 = icmp ugt i32 %v1_f9dc, 191
  store i1 %v2_fa20, i1* %cpsr_c.global-to-local, align 1
  %v7_fa20 = icmp eq i32 %v1_f9dc, 192
  store i1 %v7_fa20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa20, label %bb352, label %dec_label_pc_fa2c

bb352:                                            ; preds = %dec_label_pc_fa20
  %v3_fa24 = icmp ugt i32 %v1_f9f0, 167
  store i1 %v3_fa24, i1* %cpsr_c.global-to-local, align 1
  %v8_fa24 = icmp eq i32 %v1_f9f0, 168
  store i1 %v8_fa24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fa24, label %dec_label_pc_f9d8, label %dec_label_pc_fa2c

dec_label_pc_fa2c:                                ; preds = %dec_label_pc_fa20, %bb352
  %v7_fa2c = icmp eq i32 %v1_f9dc, 172
  %.429 = zext i1 %v7_fa2c to i32
  store i32 %.429, i32* %r3.global-to-local, align 4
  %v2_fa38 = icmp ugt i32 %v1_f9f0, 14
  store i1 %v2_fa38, i1* %cpsr_c.global-to-local, align 1
  %v7_fa38 = icmp eq i32 %v1_f9f0, 15
  store i1 %v7_fa38, i1* %cpsr_z.global-to-local, align 1
  %v2_fa3c = xor i1 %v2_fa38, true
  %v3_fa3c = or i1 %v7_fa38, %v2_fa3c
  br i1 %v3_fa3c, label %.thread8, label %bb355

.thread8:                                         ; preds = %dec_label_pc_fa2c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fa50

bb355:                                            ; preds = %dec_label_pc_fa2c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa40 = icmp eq i1 %v7_fa2c, false
  store i1 %v2_fa40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa40, label %dec_label_pc_fa50, label %dec_label_pc_fa48

dec_label_pc_fa48:                                ; preds = %bb355
  %v2_fa48 = icmp ugt i32 %v1_f9f0, 30
  store i1 %v2_fa48, i1* %cpsr_c.global-to-local, align 1
  %v7_fa48 = icmp eq i32 %v1_f9f0, 31
  store i1 %v7_fa48, i1* %cpsr_z.global-to-local, align 1
  %v2_fa4c = xor i1 %v2_fa48, true
  %v3_fa4c = or i1 %v7_fa48, %v2_fa4c
  br i1 %v3_fa4c, label %dec_label_pc_f9d8, label %dec_label_pc_fa50

dec_label_pc_fa50:                                ; preds = %.thread8, %dec_label_pc_fa48, %bb355
  %v7_fa50 = icmp eq i32 %v1_f9dc, 100
  %.430 = zext i1 %v7_fa50 to i32
  store i32 %.430, i32* %r3.global-to-local, align 4
  %v2_fa5c = icmp ugt i32 %v1_f9f0, 62
  store i1 %v2_fa5c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa5c = icmp eq i32 %v1_f9f0, 63
  store i1 %v7_fa5c, i1* %cpsr_z.global-to-local, align 1
  %v2_fa60 = xor i1 %v2_fa5c, true
  %v3_fa60 = or i1 %v7_fa5c, %v2_fa60
  br i1 %v3_fa60, label %.thread13, label %bb358

.thread13:                                        ; preds = %dec_label_pc_fa50
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fa74

bb358:                                            ; preds = %dec_label_pc_fa50
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa64 = icmp eq i1 %v7_fa50, false
  store i1 %v2_fa64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa64, label %dec_label_pc_fa74, label %dec_label_pc_fa6c

dec_label_pc_fa6c:                                ; preds = %bb358
  %v2_fa6c = icmp ugt i32 %v1_f9f0, 125
  store i1 %v2_fa6c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa6c = icmp eq i32 %v1_f9f0, 126
  store i1 %v7_fa6c, i1* %cpsr_z.global-to-local, align 1
  %v2_fa70 = xor i1 %v2_fa6c, true
  %v3_fa70 = or i1 %v7_fa6c, %v2_fa70
  br i1 %v3_fa70, label %dec_label_pc_f9d8, label %dec_label_pc_fa74

dec_label_pc_fa74:                                ; preds = %.thread13, %dec_label_pc_fa6c, %bb358
  %v2_fa74 = icmp ugt i32 %v1_f9dc, 168
  store i1 %v2_fa74, i1* %cpsr_c.global-to-local, align 1
  %v7_fa74 = icmp eq i32 %v1_f9dc, 169
  store i1 %v7_fa74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa74, label %bb359, label %dec_label_pc_fa80

bb359:                                            ; preds = %dec_label_pc_fa74
  %v3_fa78 = icmp eq i32 %v1_f9f0, 255
  store i1 %v3_fa78, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_fa78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fa78, label %dec_label_pc_f9d8, label %dec_label_pc_fa80

dec_label_pc_fa80:                                ; preds = %dec_label_pc_fa74, %bb359
  %v7_fa80 = icmp eq i32 %v1_f9dc, 198
  %.431 = zext i1 %v7_fa80 to i32
  store i32 %.431, i32* %r3.global-to-local, align 4
  %v2_fa8c = icmp ugt i32 %v1_f9f0, 16
  store i1 %v2_fa8c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa8c = icmp eq i32 %v1_f9f0, 17
  store i1 %v7_fa8c, i1* %cpsr_z.global-to-local, align 1
  %v2_fa90 = xor i1 %v2_fa8c, true
  %v3_fa90 = or i1 %v7_fa8c, %v2_fa90
  br i1 %v3_fa90, label %.thread19, label %bb362

.thread19:                                        ; preds = %dec_label_pc_fa80
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_faa4

bb362:                                            ; preds = %dec_label_pc_fa80
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa94 = icmp eq i1 %v7_fa80, false
  store i1 %v2_fa94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa94, label %dec_label_pc_faa4, label %dec_label_pc_fa9c

dec_label_pc_fa9c:                                ; preds = %bb362
  %v2_fa9c = icmp ugt i32 %v1_f9f0, 18
  store i1 %v2_fa9c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa9c = icmp eq i32 %v1_f9f0, 19
  store i1 %v7_fa9c, i1* %cpsr_z.global-to-local, align 1
  %v2_faa0 = xor i1 %v2_fa9c, true
  %v3_faa0 = or i1 %v7_fa9c, %v2_faa0
  br i1 %v3_faa0, label %dec_label_pc_f9d8, label %dec_label_pc_faa4

dec_label_pc_faa4:                                ; preds = %.thread19, %dec_label_pc_fa9c, %bb362
  %v2_faa4 = icmp ugt i32 %v1_f9dc, 222
  store i1 %v2_faa4, i1* %cpsr_c.global-to-local, align 1
  %v7_faa4 = icmp eq i32 %v1_f9dc, 223
  store i1 %v7_faa4, i1* %cpsr_z.global-to-local, align 1
  %v2_faa8 = xor i1 %v7_faa4, true
  %v3_faa8 = and i1 %v2_faa4, %v2_faa8
  br i1 %v3_faa8, label %dec_label_pc_f9d8, label %dec_label_pc_faac

dec_label_pc_faac:                                ; preds = %dec_label_pc_faa4
  %v1_faac = add nsw i32 %v1_f9dc, -6
  store i32 %v1_faac, i32* %r3.global-to-local, align 4
  %v2_fab0 = icmp ugt i32 %v1_f9dc, 10
  store i1 %v2_fab0, i1* %cpsr_c.global-to-local, align 1
  %v7_fab0 = icmp eq i32 %v1_f9dc, 11
  store i1 %v7_fab0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fab0, label %dec_label_pc_f9d8, label %bb363

bb363:                                            ; preds = %dec_label_pc_faac
  %v3_fab4 = icmp ne i32 %v1_faac, 0
  store i1 %v3_fab4, i1* %cpsr_c.global-to-local, align 1
  %v8_fab4 = icmp eq i32 %v1_faac, 1
  store i1 %v8_fab4, i1* %cpsr_z.global-to-local, align 1
  %v2_fab8 = xor i1 %v3_fab4, true
  %v3_fab8 = or i1 %v8_fab4, %v2_fab8
  br i1 %v3_fab8, label %dec_label_pc_f9d8, label %dec_label_pc_fabc

dec_label_pc_fabc:                                ; preds = %bb363
  %v2_fabc = icmp ugt i32 %v1_f9dc, 21
  store i1 %v2_fabc, i1* %cpsr_c.global-to-local, align 1
  %v7_fabc = icmp eq i32 %v1_f9dc, 22
  store i1 %v7_fabc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fabc, label %dec_label_pc_f9d8, label %bb364

bb364:                                            ; preds = %dec_label_pc_fabc
  %v3_fac0 = icmp ugt i32 %v1_f9dc, 20
  store i1 %v3_fac0, i1* %cpsr_c.global-to-local, align 1
  %v8_fac0 = icmp eq i32 %v1_f9dc, 21
  store i1 %v8_fac0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fac0, label %dec_label_pc_f9d8, label %dec_label_pc_fac8

dec_label_pc_fac8:                                ; preds = %bb364
  %v2_fac8 = icmp ugt i32 %v1_f9dc, 27
  store i1 %v2_fac8, i1* %cpsr_c.global-to-local, align 1
  %v7_fac8 = icmp eq i32 %v1_f9dc, 28
  store i1 %v7_fac8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fac8, label %dec_label_pc_f9d8, label %bb365

bb365:                                            ; preds = %dec_label_pc_fac8
  %v3_facc = icmp ugt i32 %v1_f9dc, 25
  store i1 %v3_facc, i1* %cpsr_c.global-to-local, align 1
  %v8_facc = icmp eq i32 %v1_f9dc, 26
  store i1 %v8_facc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_facc, label %dec_label_pc_f9d8, label %dec_label_pc_fad4

dec_label_pc_fad4:                                ; preds = %bb365
  %v2_fad4 = icmp ugt i32 %v1_f9dc, 29
  store i1 %v2_fad4, i1* %cpsr_c.global-to-local, align 1
  %v7_fad4 = icmp eq i32 %v1_f9dc, 30
  store i1 %v7_fad4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fad4, label %dec_label_pc_f9d8, label %bb366

bb366:                                            ; preds = %dec_label_pc_fad4
  %v3_fad8 = icmp ugt i32 %v1_f9dc, 28
  store i1 %v3_fad8, i1* %cpsr_c.global-to-local, align 1
  %v8_fad8 = icmp eq i32 %v1_f9dc, 29
  store i1 %v8_fad8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fad8, label %dec_label_pc_f9d8, label %dec_label_pc_fae0

dec_label_pc_fae0:                                ; preds = %bb366
  %v2_fae0 = icmp ugt i32 %v1_f9dc, 54
  store i1 %v2_fae0, i1* %cpsr_c.global-to-local, align 1
  %v7_fae0 = icmp eq i32 %v1_f9dc, 55
  store i1 %v7_fae0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fae0, label %dec_label_pc_f9d8, label %bb367

bb367:                                            ; preds = %dec_label_pc_fae0
  %v3_fae4 = icmp ugt i32 %v1_f9dc, 32
  store i1 %v3_fae4, i1* %cpsr_c.global-to-local, align 1
  %v8_fae4 = icmp eq i32 %v1_f9dc, 33
  store i1 %v8_fae4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fae4, label %dec_label_pc_f9d8, label %dec_label_pc_faec

dec_label_pc_faec:                                ; preds = %bb367
  %v2_faec = icmp ugt i32 %v1_f9dc, 214
  store i1 %v2_faec, i1* %cpsr_c.global-to-local, align 1
  %v7_faec = icmp eq i32 %v1_f9dc, 215
  store i1 %v7_faec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_faec, label %.thread30, label %bb368

bb368:                                            ; preds = %dec_label_pc_faec
  %v3_faf0 = icmp ugt i32 %v1_f9dc, 213
  store i1 %v3_faf0, i1* %cpsr_c.global-to-local, align 1
  %v8_faf0 = icmp eq i32 %v1_f9dc, 214
  store i1 %v8_faf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_faf0, label %bb369, label %dec_label_pc_fb00

.thread30:                                        ; preds = %dec_label_pc_faec
  br label %dec_label_pc_f9d8

bb369:                                            ; preds = %bb368
  br label %dec_label_pc_f9d8

dec_label_pc_fb00:                                ; preds = %bb368
  %v5_fb0c = call i32 @llvm.bswap.i32(i32 %v0_f9d8)
  store i32 %v5_fb0c, i32* %r3.global-to-local, align 4
  %tmp370 = and i32 %v0_f9d8, 65280
  %tmp371 = call i32 @llvm.bswap.i32(i32 %tmp370)
  %v3_fb14 = udiv i32 %v5_fb0c, 16777216
  %tmp372 = and i32 %v0_f9d8, 16711680
  %tmp373 = call i32 @llvm.bswap.i32(i32 %tmp372)
  %v4_fb1c = udiv i32 %tmp371, 256
  %v4_fb20 = mul nuw nsw i32 %tmp373, 256
  store i32 ptrtoint (i8** @global_var_203b4.158 to i32), i32* @r0, align 4
  %tmp374 = and i32 %v0_f9d8, 65536
  %v3_fb28 = icmp ne i32 %tmp374, 0
  store i1 %v3_fb28, i1* %cpsr_c.global-to-local, align 1
  %v4_fb28 = mul i32 %v5_fb0c, 16777216
  %v5_fb1c = or i32 %v4_fb28, %v3_fb14
  %v5_fb20 = or i32 %v5_fb1c, %v4_fb1c
  %v5_fb28 = or i32 %v5_fb20, %v4_fb20
  store i32 %v5_fb28, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_203be.234 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_fb28, i32* @global_var_203c4.235, align 4
  %v3_fb38 = call i32 @function_dd58(i32 ptrtoint (i8** @global_var_203b4.158 to i32), i32 20)
  store i32 %v3_fb38, i32* %r0.global-to-local, align 4
  %v3_fb3c = load i16, i16* %stack_var_-52, align 2
  %v4_fb3c = sext i16 %v3_fb3c to i32
  store i32 %v4_fb3c, i32* %r1.global-to-local, align 4
  %tmp531 = sdiv i16 %v3_fb3c, 10
  %v5_fb4c = zext i16 %tmp531 to i32
  %v3_fb50 = mul nuw nsw i32 %v5_fb4c, 8
  store i32 %v3_fb50, i32* %r2.global-to-local, align 4
  %v2_fb58 = mul nuw nsw i32 %v5_fb4c, 10
  store i32 %v2_fb58, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_203b4.158 to i32), i32* %ip.global-to-local, align 4
  %v3_fb60 = icmp uge i32 %v4_fb3c, %v2_fb58
  store i1 %v3_fb60, i1* %cpsr_c.global-to-local, align 1
  %v9_fb60 = icmp eq i32 %v4_fb3c, %v2_fb58
  store i1 %v9_fb60, i1* %cpsr_z.global-to-local, align 1
  %v1_fb64 = trunc i32 %v3_fb38 to i16
  store i16 %v1_fb64, i16* bitcast (i32* @global_var_203be.234 to i16*), align 4
  br i1 %v9_fb60, label %bb375, label %.thread37.thread

.thread37.thread:                                 ; preds = %dec_label_pc_fb00
  store i32 5888, i32* %r1.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_203c8.161 to i32), i32 2) to i16*), align 2
  store i32 ptrtoint (i8** @global_var_203b4.158 to i32), i32* %r0.global-to-local, align 4
  br label %.thread39

bb375:                                            ; preds = %dec_label_pc_fb00
  store i32 ptrtoint (i8** @global_var_203b4.158 to i32), i32* %r0.global-to-local, align 4
  store i32 4873, i32* %r3.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_203c8.161 to i32), i32 2) to i16*), align 2
  br label %.thread39

.thread39:                                        ; preds = %.thread37.thread, %bb375
  %v4_fb88 = load i32, i32* @global_var_203c4.235, align 4
  store i32 %v4_fb88, i32* @global_var_203cc.237, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_203d8.238 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_203c8.161 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v5_fba8 = call i32 @function_dda8(i32 ptrtoint (i8** @global_var_203b4.158 to i32), i32 ptrtoint (i32* @global_var_203c8.161 to i32), i32 5120, i32 20)
  %v6_fba8 = trunc i32 %v5_fba8 to i16
  store i32 ptrtoint (i8** @global_var_203b4.158 to i32), i32* %r1.global-to-local, align 4
  %v2_fbb4 = load i32, i32* @global_var_22434.156, align 4
  store i16 %v6_fba8, i16* bitcast (i32* @global_var_203d8.238 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 %v2_f9a8, i32* %ip.global-to-local, align 4
  store i32 %v2_fbb4, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v7_fbfc = call i32 @function_12c60(i32 %v2_fbb4, i32 ptrtoint (i8** @global_var_203b4.158 to i32), i32 40, i32 16384, i32 %v2_f9a8, i32 16)
  store i32 %v7_fbfc, i32* %r0.global-to-local, align 4
  %v3_fc00 = load i16, i16* %stack_var_-52, align 2
  %v4_fc00 = sext i16 %v3_fc00 to i32
  %v1_fc04 = add nsw i32 %v4_fc00, 1
  store i32 %v1_fc04, i32* %r3.global-to-local, align 4
  %v3_fc08 = icmp ugt i32 %v1_fc04, 383
  store i1 %v3_fc08, i1* %cpsr_c.global-to-local, align 1
  %v8_fc08 = icmp eq i32 %v1_fc04, 384
  store i1 %v8_fc08, i1* %cpsr_z.global-to-local, align 1
  %v5_fc0c = trunc i32 %v1_fc04 to i16
  store i16 %v5_fc0c, i16* %stack_var_-52, align 2
  %v5_fc10 = icmp slt i32 %v1_fc04, 384
  br i1 %v5_fc10, label %dec_label_pc_f9ac, label %dec_label_pc_fc14

dec_label_pc_fc14:                                ; preds = %.thread39
  %v0_fc14 = load i32, i32* @r4, align 4
  store i32 %v0_fc14, i32* @fp, align 4
  br label %dec_label_pc_fc18

dec_label_pc_fc18:                                ; preds = %dec_label_pc_f990, %dec_label_pc_fc14
  %v0_fc18 = call i32 @function_128f8()
  store i32 %v0_fc18, i32* @sb, align 4
  store i32 %stack_var_-1880.0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v1_fc28 = add i32 %stack_var_-1880.0, 20
  store i32 %v1_fc28, i32* @r4, align 4
  %v1_fc7c = add i32 %stack_var_-1880.0, 16
  %v2_fc7c = inttoptr i32 %v1_fc7c to i32*
  %v1_fc90 = add i32 %stack_var_-1880.0, 9
  %v2_fc90 = inttoptr i32 %v1_fc90 to i8*
  %v4_fcbc = sext i16 %stack_var_-1876.0 to i32
  %v1_fd24 = add i32 %stack_var_-1880.0, 12
  %v2_fd24 = inttoptr i32 %v1_fd24 to i32*
  br label %dec_label_pc_fc2c

dec_label_pc_fc2c:                                ; preds = %dec_label_pc_fcec, %dec_label_pc_fce4, %dec_label_pc_fcdc, %dec_label_pc_fcb8, %dec_label_pc_fca8, %dec_label_pc_fc8c, %dec_label_pc_fc74, %dec_label_pc_fcd4, %dec_label_pc_fcc8, %dec_label_pc_fc6c, %dec_label_pc_fda4, %dec_label_pc_fc18
  %v1_fc30 = phi i32 [ %v0_fc18, %dec_label_pc_fc18 ], [ %v1_fc30.pre.pre, %dec_label_pc_fda4 ], [ %v0_fc60, %dec_label_pc_fc6c ], [ %v0_fc60, %dec_label_pc_fcc8 ], [ %v0_fc60, %dec_label_pc_fcd4 ], [ %v0_fc60, %dec_label_pc_fc74 ], [ %v0_fc60, %dec_label_pc_fc8c ], [ %v0_fc60, %dec_label_pc_fca8 ], [ %v0_fc60, %dec_label_pc_fcb8 ], [ %v0_fc60, %dec_label_pc_fcdc ], [ %v0_fc60, %dec_label_pc_fce4 ], [ %v0_fc60, %dec_label_pc_fcec ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_fc30 = inttoptr i32 %v1_fc30 to i32*
  store i32 0, i32* %v2_fc30, align 4
  %v2_fc3c = load i32, i32* @global_var_22434.156, align 4
  store i32 %v2_fc3c, i32* %r0.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-1880.0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fc4c = load i32, i32* %ip.global-to-local, align 4
  %v6_fc54 = call i32 @function_12bec(i32 %v2_fc3c, i32 %stack_var_-1880.0, i32 1514, i32 16384, i32 %v0_fc4c, i32 %v0_fc4c)
  store i32 %v6_fc54, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fc58 = icmp eq i32 %v6_fc54, 0
  store i1 %v2_fc58, i1* %cpsr_z.global-to-local, align 1
  %tmp376 = icmp slt i32 %v6_fc54, 1
  br i1 %tmp376, label %dec_label_pc_fdc8, label %dec_label_pc_fc60

dec_label_pc_fc60:                                ; preds = %dec_label_pc_fc2c
  %v0_fc60 = load i32, i32* @sb, align 4
  %v1_fc60 = inttoptr i32 %v0_fc60 to i32*
  %v2_fc60 = load i32, i32* %v1_fc60, align 4
  store i32 %v2_fc60, i32* %r3.global-to-local, align 4
  %v2_fc64 = icmp ugt i32 %v2_fc60, 10
  store i1 %v2_fc64, i1* %cpsr_c.global-to-local, align 1
  %v7_fc64 = icmp eq i32 %v2_fc60, 11
  store i1 %v7_fc64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc64, label %dec_label_pc_fdc8, label %dec_label_pc_fc6c

dec_label_pc_fc6c:                                ; preds = %dec_label_pc_fc60
  %v2_fc6c = icmp ugt i32 %v6_fc54, 38
  store i1 %v2_fc6c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc6c = icmp eq i32 %v6_fc54, 39
  store i1 %v7_fc6c, i1* %cpsr_z.global-to-local, align 1
  %v2_fc70 = xor i1 %v2_fc6c, true
  %v3_fc70 = or i1 %v7_fc6c, %v2_fc70
  br i1 %v3_fc70, label %dec_label_pc_fc2c, label %dec_label_pc_fc74

dec_label_pc_fc74:                                ; preds = %dec_label_pc_fc6c
  store i32 %stack_var_-1880.0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_22418.77 to i32), i32* %ip.global-to-local, align 4
  %v3_fc7c = load i32, i32* %v2_fc7c, align 4
  store i32 %v3_fc7c, i32* %r2.global-to-local, align 4
  %v2_fc80 = load i32, i32* @global_var_22418.77, align 4
  store i32 %v2_fc80, i32* %r3.global-to-local, align 4
  %v3_fc84 = icmp uge i32 %v3_fc7c, %v2_fc80
  store i1 %v3_fc84, i1* %cpsr_c.global-to-local, align 1
  %v9_fc84 = icmp eq i32 %v3_fc7c, %v2_fc80
  store i1 %v9_fc84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fc84, label %dec_label_pc_fc8c, label %dec_label_pc_fc2c

dec_label_pc_fc8c:                                ; preds = %dec_label_pc_fc74
  %v3_fc90 = load i8, i8* %v2_fc90, align 1
  %v4_fc90 = zext i8 %v3_fc90 to i32
  store i32 %v4_fc90, i32* %r3.global-to-local, align 4
  %v2_fc94 = icmp ugt i8 %v3_fc90, 5
  store i1 %v2_fc94, i1* %cpsr_c.global-to-local, align 1
  %v7_fc94 = icmp eq i8 %v3_fc90, 6
  store i1 %v7_fc94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc94, label %dec_label_pc_fc9c, label %dec_label_pc_fc2c

dec_label_pc_fc9c:                                ; preds = %dec_label_pc_fc8c
  %v0_fc9c = load i32, i32* @r4, align 4
  %v1_fc9c = inttoptr i32 %v0_fc9c to i16*
  %v2_fc9c = load i16, i16* %v1_fc9c, align 2
  %v3_fc9c = zext i16 %v2_fc9c to i32
  store i32 %v3_fc9c, i32* %ip.global-to-local, align 4
  %v2_fca0 = icmp ugt i16 %v2_fc9c, 5887
  store i1 %v2_fca0, i1* %cpsr_c.global-to-local, align 1
  %v7_fca0 = icmp eq i16 %v2_fc9c, 5888
  store i1 %v7_fca0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fca0, label %dec_label_pc_fcb8, label %dec_label_pc_fca8

dec_label_pc_fca8:                                ; preds = %dec_label_pc_fc9c
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_fcb0 = icmp ugt i16 %v2_fc9c, 4872
  store i1 %v3_fcb0, i1* %cpsr_c.global-to-local, align 1
  %v9_fcb0 = icmp eq i16 %v2_fc9c, 4873
  store i1 %v9_fcb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fcb0, label %dec_label_pc_fcb8, label %dec_label_pc_fc2c

dec_label_pc_fcb8:                                ; preds = %dec_label_pc_fca8, %dec_label_pc_fc9c
  %v1_fcb8 = add i32 %v0_fc9c, 2
  %v2_fcb8 = inttoptr i32 %v1_fcb8 to i16*
  %v3_fcb8 = load i16, i16* %v2_fcb8, align 2
  %v4_fcb8 = zext i16 %v3_fcb8 to i32
  store i32 %v4_fcb8, i32* %r3.global-to-local, align 4
  store i32 %v4_fcbc, i32* %r0.global-to-local, align 4
  %v3_fcc0 = icmp uge i32 %v4_fcb8, %v4_fcbc
  store i1 %v3_fcc0, i1* %cpsr_c.global-to-local, align 1
  %v9_fcc0 = icmp eq i32 %v4_fcb8, %v4_fcbc
  store i1 %v9_fcc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fcc0, label %dec_label_pc_fcc8, label %dec_label_pc_fc2c

dec_label_pc_fcc8:                                ; preds = %dec_label_pc_fcb8
  %v1_fcc8 = add i32 %v0_fc9c, 13
  %v2_fcc8 = inttoptr i32 %v1_fcc8 to i8*
  %v3_fcc8 = load i8, i8* %v2_fcc8, align 1
  %v4_fcc8 = zext i8 %v3_fcc8 to i32
  store i32 %v4_fcc8, i32* %r3.global-to-local, align 4
  %v1_fccc = and i32 %v4_fcc8, 2
  %v2_fccc = icmp eq i32 %v1_fccc, 0
  store i1 %v2_fccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fccc, label %dec_label_pc_fc2c, label %dec_label_pc_fcd4

dec_label_pc_fcd4:                                ; preds = %dec_label_pc_fcc8
  %v1_fcd4 = and i32 %v4_fcc8, 16
  %v2_fcd4 = icmp eq i32 %v1_fcd4, 0
  store i1 %v2_fcd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fcd4, label %dec_label_pc_fc2c, label %dec_label_pc_fcdc

dec_label_pc_fcdc:                                ; preds = %dec_label_pc_fcd4
  %v1_fcdc = and i32 %v4_fcc8, 4
  %v2_fcdc = icmp eq i32 %v1_fcdc, 0
  store i1 %v2_fcdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fcdc, label %dec_label_pc_fce4, label %dec_label_pc_fc2c

dec_label_pc_fce4:                                ; preds = %dec_label_pc_fcdc
  %tmp532 = urem i8 %v3_fcc8, 2
  %v2_fce4 = icmp eq i8 %tmp532, 0
  store i1 %v2_fce4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fce4, label %dec_label_pc_fcec, label %dec_label_pc_fc2c

dec_label_pc_fcec:                                ; preds = %dec_label_pc_fce4
  %v1_fcec = add i32 %v0_fc9c, 8
  %v2_fcec = inttoptr i32 %v1_fcec to i32*
  %v3_fcec = load i32, i32* %v2_fcec, align 4
  %v5_fd04 = call i32 @llvm.bswap.i32(i32 %v3_fcec)
  %v1_fd08 = add i32 %v5_fd04, -1
  store i32 %v1_fd08, i32* %r2.global-to-local, align 4
  %v1_fd0c = and i32 %v1_fd08, 16711680
  store i32 %v1_fd0c, i32* %r0.global-to-local, align 4
  %v3_fd10 = udiv i32 %v1_fd08, 16777216
  %v4_fd18 = udiv i32 %v1_fd0c, 256
  %v5_fd18 = or i32 %v4_fd18, %v3_fd10
  %v1_fd14 = mul i32 %v1_fd08, 256
  %v4_fd1c = and i32 %v1_fd14, 16711680
  %v5_fd1c = or i32 %v5_fd18, %v4_fd1c
  store i32 %v5_fd1c, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-1880.0, i32* %r1.global-to-local, align 4
  %v3_fd24 = load i32, i32* %v2_fd24, align 4
  store i32 %v3_fd24, i32* @lr, align 4
  %v5_fd28 = call i32 @llvm.bswap.i32(i32 %v1_fd08)
  store i32 %v5_fd28, i32* %r3.global-to-local, align 4
  %v3_fd2c = icmp uge i32 %v5_fd28, %v3_fd24
  store i1 %v3_fd2c, i1* %cpsr_c.global-to-local, align 1
  %v9_fd2c = icmp eq i32 %v5_fd28, %v3_fd24
  store i1 %v9_fd2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fd2c, label %dec_label_pc_fd34, label %dec_label_pc_fc2c

dec_label_pc_fd34:                                ; preds = %dec_label_pc_fcec
  %v0_fd34 = load i32, i32* @r5, align 4
  %v2_fd34 = icmp ugt i32 %v0_fd34, 254
  store i1 %v2_fd34, i1* %cpsr_c.global-to-local, align 1
  %v7_fd34 = icmp eq i32 %v0_fd34, 255
  store i1 %v7_fd34, i1* %cpsr_z.global-to-local, align 1
  %v8_fd38 = icmp sgt i32 %v0_fd34, 255
  br i1 %v8_fd38, label %dec_label_pc_fdc8, label %dec_label_pc_fd3c

dec_label_pc_fd3c:                                ; preds = %dec_label_pc_fd34
  %v2_fd44 = load i32, i32* @global_var_22430.154, align 4
  store i32 %v2_fd44, i32* %r1.global-to-local, align 4
  %v3_fd48 = mul i32 %v0_fd34, 256
  store i32 %v3_fd48, i32* %r2.global-to-local, align 4
  %v2_fd4c = mul i32 %v0_fd34, 288
  store i32 %v2_fd4c, i32* %r3.global-to-local, align 4
  %v2_fd50 = add i32 %v2_fd44, %v2_fd4c
  store i32 %v2_fd50, i32* @r0, align 4
  %v1_fd54 = add i32 %v2_fd50, 12
  %v2_fd54 = inttoptr i32 %v1_fd54 to i32*
  %v3_fd54 = load i32, i32* %v2_fd54, align 4
  store i32 %v3_fd54, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd58 = icmp eq i32 %v3_fd54, 0
  store i1 %v2_fd58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fd58, label %dec_label_pc_fd9c, label %dec_label_pc_fd78.preheader

dec_label_pc_fd78.preheader:                      ; preds = %dec_label_pc_fd3c
  %v2_fd5c = add i32 %v0_fd34, 1
  %v2_fd64 = and i32 %v2_fd5c, 134217728
  %v3_fd64 = icmp ne i32 %v2_fd64, 0
  store i1 %v3_fd64, i1* %cpsr_c.global-to-local, align 1
  %v3_fd68 = mul i32 %v2_fd5c, 288
  %v3_fd6c = add i32 %v2_fd44, %v3_fd68
  store i32 %v3_fd6c, i32* %r3.global-to-local, align 4
  store i32 %v0_fd34, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_fd78

dec_label_pc_fd78:                                ; preds = %dec_label_pc_fd78.preheader, %dec_label_pc_fd84
  %v0_fd84 = phi i32 [ %v3_fd6c, %dec_label_pc_fd78.preheader ], [ %v1_fd90, %dec_label_pc_fd84 ]
  %v0_fd78 = phi i32 [ %v0_fd34, %dec_label_pc_fd78.preheader ], [ %v1_fd78, %dec_label_pc_fd84 ]
  %v1_fd78 = add i32 %v0_fd78, 1
  store i32 %v1_fd78, i32* %r2.global-to-local, align 4
  %v7_fd7c = icmp eq i32 %v1_fd78, 256
  br i1 %v7_fd7c, label %dec_label_pc_fdc8.loopexit, label %dec_label_pc_fd84

dec_label_pc_fd84:                                ; preds = %dec_label_pc_fd78
  store i32 %v0_fd84, i32* @r0, align 4
  %v1_fd88 = add i32 %v0_fd84, 12
  %v2_fd88 = inttoptr i32 %v1_fd88 to i32*
  %v3_fd88 = load i32, i32* %v2_fd88, align 4
  %v2_fd8c = icmp eq i32 %v3_fd88, 0
  %v1_fd90 = add i32 %v0_fd84, 288
  store i32 %v1_fd90, i32* %r3.global-to-local, align 4
  br i1 %v2_fd8c, label %dec_label_pc_fd98, label %dec_label_pc_fd78

dec_label_pc_fd98:                                ; preds = %dec_label_pc_fd84
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_fd78, i32* @r5, align 4
  br label %dec_label_pc_fd9c

dec_label_pc_fd9c:                                ; preds = %dec_label_pc_fd3c, %dec_label_pc_fd98
  %v1_fda4 = phi i32 [ %v2_fd50, %dec_label_pc_fd3c ], [ %v0_fd84, %dec_label_pc_fd98 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd9c = icmp eq i32 %v1_fda4, 0
  store i1 %v2_fd9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fd9c, label %dec_label_pc_fdc8, label %dec_label_pc_fda4

dec_label_pc_fda4:                                ; preds = %dec_label_pc_fd9c
  %v2_fda4 = add i32 %v1_fda4, 16
  %v3_fda4 = inttoptr i32 %v2_fda4 to i32*
  store i32 %v3_fd24, i32* %v3_fda4, align 4
  %v0_fda8 = load i32, i32* %ip.global-to-local, align 4
  %v1_fda8 = trunc i32 %v0_fda8 to i16
  %v2_fda8 = load i32, i32* @r0, align 4
  %v3_fda8 = add i32 %v2_fda8, 20
  %v4_fda8 = inttoptr i32 %v3_fda8 to i16*
  store i16 %v1_fda8, i16* %v4_fda8, align 2
  %v0_fdac = call i32 @function_f348()
  store i32 %v0_fdac, i32* %r0.global-to-local, align 4
  %v1_fc30.pre.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_fc2c

dec_label_pc_fdb4:                                ; preds = %dec_label_pc_f664
  store i32 ptrtoint (i32* @global_var_22434.156 to i32), i32* %ip.global-to-local, align 4
  %v2_fdb8 = load i32, i32* @global_var_22434.156, align 4
  store i32 %v2_fdb8, i32* %r0.global-to-local, align 4
  %v1_fdbc = call i32 @function_124d0(i32 %v2_fdb8)
  store i32 %v1_fdbc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fdc0

dec_label_pc_fdc0:                                ; preds = %dec_label_pc_f640, %dec_label_pc_fdb4
  %v0_fdc0 = load i32, i32* @r5, align 4
  store i32 %v0_fdc0, i32* %r0.global-to-local, align 4
  %v1_fdc4 = call i32 @function_1433c(i32 %v0_fdc0)
  store i32 %v1_fdc4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fdc8

dec_label_pc_fdc8.loopexit:                       ; preds = %dec_label_pc_fd78
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fdc8

dec_label_pc_fdc8:                                ; preds = %dec_label_pc_fd9c, %dec_label_pc_fd34, %dec_label_pc_fc60, %dec_label_pc_fc2c, %dec_label_pc_fdc8.loopexit, %dec_label_pc_fdc0
  %stack_var_-1880.1 = phi i32 [ %tmp314, %dec_label_pc_fdc0 ], [ %stack_var_-1880.0, %dec_label_pc_fdc8.loopexit ], [ %stack_var_-1880.0, %dec_label_pc_fc2c ], [ %stack_var_-1880.0, %dec_label_pc_fc60 ], [ %stack_var_-1880.0, %dec_label_pc_fd34 ], [ %stack_var_-1880.0, %dec_label_pc_fd9c ]
  %stack_var_-1876.1 = phi i16 [ %tmp342, %dec_label_pc_fdc0 ], [ %stack_var_-1876.0, %dec_label_pc_fdc8.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_fc2c ], [ %stack_var_-1876.0, %dec_label_pc_fc60 ], [ %stack_var_-1876.0, %dec_label_pc_fd34 ], [ %stack_var_-1876.0, %dec_label_pc_fd9c ]
  store i32 0, i32* %stack_var_-224, align 4
  store i32 1668, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_fde4486 = load i32, i32* @sp, align 4
  %v3_fde4487 = add i32 %v2_fde4486, 1668
  %v4_fde4488 = inttoptr i32 %v3_fde4487 to i32*
  store i32 0, i32* %v4_fde4488, align 4
  br label %dec_label_pc_fdd4.dec_label_pc_fdd4_crit_edge

dec_label_pc_fdd4.dec_label_pc_fdd4_crit_edge:    ; preds = %dec_label_pc_fdc8, %dec_label_pc_fdd4.dec_label_pc_fdd4_crit_edge
  %v0_fdd4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_fdd4 = add i32 %v0_fdd4.pre, 1664
  store i32 %v1_fdd4, i32* %ip.global-to-local, align 4
  %v1_fdd8 = add i32 %v0_fdd4.pre, 4
  store i32 %v1_fdd8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_fde0 = icmp eq i32 %v1_fdd8, 128
  %v2_fde4 = load i32, i32* @sp, align 4
  %v3_fde4 = add i32 %v2_fde4, %v1_fdd4
  %v4_fde4 = inttoptr i32 %v3_fde4 to i32*
  store i32 0, i32* %v4_fde4, align 4
  br i1 %v7_fde0, label %dec_label_pc_fdec, label %dec_label_pc_fdd4.dec_label_pc_fdd4_crit_edge

dec_label_pc_fdec:                                ; preds = %dec_label_pc_fdd4.dec_label_pc_fdd4_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_fdec = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_fdec, i32* %stack_var_-352, align 4
  %v1_fdf4480 = add i32 %v0_fdec, 1540
  store i32 %v1_fdf4480, i32* @lr, align 4
  %v1_fdf8481 = add i32 %v0_fdec, 8
  store i32 %v1_fdf8481, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_fe00482 = icmp eq i32 %v1_fdf8481, 128
  %v2_fe04483 = load i32, i32* @sp, align 4
  %v3_fe04484 = add i32 %v2_fe04483, %v1_fdf4480
  %v4_fe04485 = inttoptr i32 %v3_fe04484 to i32*
  store i32 0, i32* %v4_fe04485, align 4
  br i1 %v7_fe00482, label %dec_label_pc_fe0c, label %dec_label_pc_fdf4.dec_label_pc_fdf4_crit_edge

dec_label_pc_fdf4.dec_label_pc_fdf4_crit_edge:    ; preds = %dec_label_pc_fdec, %dec_label_pc_fdf4.dec_label_pc_fdf4_crit_edge
  %v0_fdf4.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_fdf4 = add i32 %v0_fdf4.pre, 1536
  store i32 %v1_fdf4, i32* @lr, align 4
  %v1_fdf8 = add i32 %v0_fdf4.pre, 4
  store i32 %v1_fdf8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_fe00 = icmp eq i32 %v1_fdf8, 128
  %v2_fe04 = load i32, i32* @sp, align 4
  %v3_fe04 = add i32 %v2_fe04, %v1_fdf4
  %v4_fe04 = inttoptr i32 %v3_fe04 to i32*
  store i32 0, i32* %v4_fe04, align 4
  br i1 %v7_fe00, label %dec_label_pc_fe0c, label %dec_label_pc_fdf4.dec_label_pc_fdf4_crit_edge

dec_label_pc_fe0c:                                ; preds = %dec_label_pc_fdf4.dec_label_pc_fdf4_crit_edge, %dec_label_pc_fdec
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_fe0c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_fe0c, i32* @r6, align 4
  store i32 %v0_fe0c, i32* @r5, align 4
  %v5_fe14 = trunc i32 %v0_fe0c to i16
  store i16 %v5_fe14, i16* %stack_var_-52, align 2
  %v2_10cb4 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_fe6c

dec_label_pc_fe1c:                                ; preds = %dec_label_pc_fe9c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_fe88, i1* %cpsr_z.global-to-local, align 1
  %v1_10ca4 = add i32 %v2_fe80, 4
  %v2_10ca4 = inttoptr i32 %v1_10ca4 to i32*
  %v3_10ca4 = load i32, i32* %v2_10ca4, align 4
  br i1 %v7_fe88, label %dec_label_pc_10ca4, label %dec_label_pc_fe24

dec_label_pc_fe24:                                ; preds = %dec_label_pc_fe1c
  store i32 %v3_10ca4, i32* %ip.global-to-local, align 4
  %v3_fe2c = udiv i32 %v3_10ca4, 32
  store i32 %v2_10cb4, i32* %r0.global-to-local, align 4
  %v3_fe34 = mul nuw nsw i32 %v3_fe2c, 4
  %v2_fe38 = add i32 %v3_fe34, %v2_10cb4
  store i32 %v2_fe38, i32* %r3.global-to-local, align 4
  %v1_fe3c = add i32 %v2_fe38, -184
  %v2_fe3c = inttoptr i32 %v1_fe3c to i32*
  %v3_fe3c = load i32, i32* %v2_fe3c, align 4
  %v1_fe40 = urem i32 %v3_10ca4, 32
  store i32 %v1_fe40, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_fe48 = shl i32 1, %v1_fe40
  %v8_fe48 = or i32 %v3_fe3c, %v7_fe48
  store i32 %v8_fe48, i32* %r2.global-to-local, align 4
  store i32 %v8_fe48, i32* %v2_fe3c, align 4
  %v0_fe50 = load i32, i32* @r6, align 4
  %v1_fe50 = load i32, i32* %ip.global-to-local, align 4
  %v3_fe50 = icmp uge i32 %v0_fe50, %v1_fe50
  store i1 %v3_fe50, i1* %cpsr_c.global-to-local, align 1
  %v9_fe50 = icmp eq i32 %v0_fe50, %v1_fe50
  store i1 %v9_fe50, i1* %cpsr_z.global-to-local, align 1
  %v5_fe54 = icmp slt i32 %v0_fe50, %v1_fe50
  br i1 %v5_fe54, label %bb377, label %bb378

bb377:                                            ; preds = %dec_label_pc_fe24
  store i32 %v1_fe50, i32* @r6, align 4
  br label %bb378

bb378:                                            ; preds = %.thread56, %bb384, %bb382, %bb428, %dec_label_pc_ff00, %dec_label_pc_fe24, %bb377
  %v3_fe58 = load i16, i16* %stack_var_-52, align 2
  %v4_fe58 = sext i16 %v3_fe58 to i32
  store i32 %v4_fe58, i32* %r3.global-to-local, align 4
  %v1_fe5c = add nsw i32 %v4_fe58, 1
  store i32 %v1_fe5c, i32* %r2.global-to-local, align 4
  %v2_fe60 = icmp ugt i32 %v1_fe5c, 254
  store i1 %v2_fe60, i1* %cpsr_c.global-to-local, align 1
  %v7_fe60 = icmp eq i32 %v1_fe5c, 255
  store i1 %v7_fe60, i1* %cpsr_z.global-to-local, align 1
  %v5_fe64 = trunc i32 %v1_fe5c to i16
  store i16 %v5_fe64, i16* %stack_var_-52, align 2
  %v8_fe68 = icmp sgt i16 %v3_fe58, 254
  br i1 %v8_fe68, label %dec_label_pc_ff0c, label %dec_label_pc_fe6c

dec_label_pc_fe6c:                                ; preds = %bb378, %dec_label_pc_fe0c
  %v0_fe78 = phi i32 [ %v1_fe5c, %bb378 ], [ %v0_fe0c, %dec_label_pc_fe0c ]
  store i32 ptrtoint (i32* @global_var_22430.154 to i32), i32* %r0.global-to-local, align 4
  %v3_fe70 = mul i32 %v0_fe78, 256
  store i32 %v3_fe70, i32* %r3.global-to-local, align 4
  %v2_fe74 = load i32, i32* @global_var_22430.154, align 4
  store i32 %v2_fe74, i32* %r1.global-to-local, align 4
  %v2_fe7c = mul i32 %v0_fe78, 288
  store i32 %v2_fe7c, i32* %r2.global-to-local, align 4
  %v2_fe80 = add i32 %v2_fe74, %v2_fe7c
  store i32 %v2_fe80, i32* @r4, align 4
  %v1_fe84 = add i32 %v2_fe80, 12
  %v2_fe84 = inttoptr i32 %v1_fe84 to i32*
  %v3_fe84 = load i32, i32* %v2_fe84, align 4
  store i32 %v3_fe84, i32* %ip.global-to-local, align 4
  %v2_fe88 = icmp ne i32 %v3_fe84, 0
  store i1 %v2_fe88, i1* %cpsr_c.global-to-local, align 1
  %v7_fe88 = icmp eq i32 %v3_fe84, 1
  store i1 %v7_fe88, i1* %cpsr_z.global-to-local, align 1
  %v2_fe8c = xor i1 %v2_fe88, true
  %v3_fe8c = or i1 %v7_fe88, %v2_fe8c
  br i1 %v3_fe8c, label %bb379, label %bb380

bb379:                                            ; preds = %dec_label_pc_fe6c
  store i32 5, i32* %r1.global-to-local, align 4
  br label %bb380

bb380:                                            ; preds = %dec_label_pc_fe6c, %bb379
  %v1_feac173 = phi i32 [ %v2_fe74, %dec_label_pc_fe6c ], [ 5, %bb379 ]
  %v2_fe90 = xor i1 %v7_fe88, true
  %v3_fe90 = and i1 %v2_fe88, %v2_fe90
  br i1 %v3_fe90, label %bb381, label %bb382

bb381:                                            ; preds = %bb380
  store i32 30, i32* %r1.global-to-local, align 4
  br label %bb382

bb382:                                            ; preds = %bb380, %bb381
  %v1_feac = phi i32 [ %v1_feac173, %bb380 ], [ 30, %bb381 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fe94 = icmp eq i32 %v3_fe84, 0
  store i1 %v2_fe94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fe94, label %bb378, label %dec_label_pc_fe9c

dec_label_pc_fe9c:                                ; preds = %bb382
  store i32 ptrtoint (i32* @global_var_203e4.143 to i32), i32* %r2.global-to-local, align 4
  %v2_fea0 = load i32, i32* @global_var_203e4.143, align 4
  store i32 %v2_fea0, i32* %r3.global-to-local, align 4
  %v1_fea4 = add i32 %v2_fe80, 8
  %v2_fea4 = inttoptr i32 %v1_fea4 to i32*
  %v3_fea4 = load i32, i32* %v2_fea4, align 4
  store i32 %v3_fea4, i32* %r2.global-to-local, align 4
  %v2_fea8 = sub i32 %v2_fea0, %v3_fea4
  store i32 %v2_fea8, i32* %r3.global-to-local, align 4
  %v3_feac = icmp uge i32 %v2_fea8, %v1_feac
  store i1 %v3_feac, i1* %cpsr_c.global-to-local, align 1
  %v9_feac = icmp eq i32 %v2_fea8, %v1_feac
  store i1 %v9_feac, i1* %cpsr_z.global-to-local, align 1
  %v2_feb0 = xor i1 %v3_feac, true
  %v3_feb0 = or i1 %v9_feac, %v2_feb0
  br i1 %v3_feb0, label %dec_label_pc_fe1c, label %dec_label_pc_feb4

dec_label_pc_feb4:                                ; preds = %dec_label_pc_fe9c
  %v1_feb4 = add i32 %v2_fe80, 4
  %v2_feb4 = inttoptr i32 %v1_feb4 to i32*
  %v3_feb4 = load i32, i32* %v2_feb4, align 4
  store i32 %v3_feb4, i32* %r0.global-to-local, align 4
  %v1_feb8 = call i32 @function_124d0(i32 %v3_feb4)
  store i32 %v1_feb8, i32* %r0.global-to-local, align 4
  %v0_febc = load i32, i32* @r4, align 4
  %v1_febc = add i32 %v0_febc, 12
  %v2_febc = inttoptr i32 %v1_febc to i32*
  %v3_febc = load i32, i32* %v2_febc, align 4
  store i32 %v3_febc, i32* %r3.global-to-local, align 4
  %v2_fec0 = icmp ugt i32 %v3_febc, 1
  store i1 %v2_fec0, i1* %cpsr_c.global-to-local, align 1
  %v7_fec0 = icmp eq i32 %v3_febc, 2
  store i1 %v7_fec0, i1* %cpsr_z.global-to-local, align 1
  %v2_fec4 = xor i1 %v2_fec0, true
  %v3_fec4 = or i1 %v7_fec0, %v2_fec4
  br i1 %v3_fec4, label %bb383, label %.thread279

.thread279:                                       ; preds = %dec_label_pc_feb4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_fecc276280 = add i32 %v0_febc, 4
  %v3_fecc277281 = inttoptr i32 %v2_fecc276280 to i32*
  store i32 -1, i32* %v3_fecc277281, align 4
  br label %bb384

bb383:                                            ; preds = %dec_label_pc_feb4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_fecc273 = add i32 %v0_febc, 4
  %v3_fecc274 = inttoptr i32 %v2_fecc273 to i32*
  store i32 -1, i32* %v3_fecc274, align 4
  %v4_fed0 = load i32, i32* %r3.global-to-local, align 4
  %v5_fed0 = load i32, i32* @r4, align 4
  %v6_fed0 = add i32 %v5_fed0, 12
  %v7_fed0 = inttoptr i32 %v6_fed0 to i32*
  store i32 %v4_fed0, i32* %v7_fed0, align 4
  %v4_fed4 = load i32, i32* %r3.global-to-local, align 4
  %v5_fed4 = trunc i32 %v4_fed4 to i8
  %v6_fed4 = load i32, i32* @r4, align 4
  %v7_fed4 = add i32 %v6_fed4, 284
  %v8_fed4 = inttoptr i32 %v7_fed4 to i8*
  store i8 %v5_fed4, i8* %v8_fed4, align 1
  %v0_fed8.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_fed8.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb384

bb384:                                            ; preds = %.thread279, %bb383
  %v1_fed8 = phi i1 [ %v1_fed8.pre, %bb383 ], [ %v2_fec0, %.thread279 ]
  %v0_fed8 = phi i1 [ %v0_fed8.pre, %bb383 ], [ false, %.thread279 ]
  %v2_fed8 = xor i1 %v1_fed8, true
  %v3_fed8 = or i1 %v0_fed8, %v2_fed8
  br i1 %v3_fed8, label %bb378, label %dec_label_pc_fedc

dec_label_pc_fedc:                                ; preds = %bb384
  %v0_fedc = load i32, i32* @r4, align 4
  %v1_fedc = add i32 %v0_fedc, 284
  %v2_fedc = inttoptr i32 %v1_fedc to i8*
  %v3_fedc = load i8, i8* %v2_fedc, align 1
  %v4_fedc = zext i8 %v3_fedc to i32
  %v1_fee0 = add nuw nsw i32 %v4_fedc, 1
  %v1_fee4 = urem i32 %v1_fee0, 256
  store i32 %v1_fee4, i32* %r3.global-to-local, align 4
  %v2_fee8 = icmp ugt i32 %v1_fee4, 9
  store i1 %v2_fee8, i1* %cpsr_c.global-to-local, align 1
  %v7_fee8 = icmp eq i32 %v1_fee4, 10
  store i1 %v7_fee8, i1* %cpsr_z.global-to-local, align 1
  %v1_feec = trunc i32 %v1_fee0 to i8
  store i8 %v1_feec, i8* %v2_fedc, align 1
  %v0_fef0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fef0, label %.thread56, label %dec_label_pc_ff00

.thread56:                                        ; preds = %dec_label_pc_fedc
  %v1_fef0 = load i32, i32* %r3.global-to-local, align 4
  %v2_fef0 = add i32 %v1_fef0, -10
  store i32 %v2_fef0, i32* %r3.global-to-local, align 4
  %v2_fef4 = load i32, i32* @r4, align 4
  %v3_fef4 = add i32 %v2_fef4, 12
  %v4_fef4 = inttoptr i32 %v3_fef4 to i32*
  store i32 %v2_fef0, i32* %v4_fef4, align 4
  %v1_fef8 = load i32, i32* %r3.global-to-local, align 4
  %v2_fef8 = trunc i32 %v1_fef8 to i8
  %v3_fef8 = load i32, i32* @r4, align 4
  %v4_fef8 = add i32 %v3_fef8, 284
  %v5_fef8 = inttoptr i32 %v4_fef8 to i8*
  store i8 %v2_fef8, i8* %v5_fef8, align 1
  %v0_fefc.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fefc.pr.pr, label %bb378, label %dec_label_pc_ff00

dec_label_pc_ff00:                                ; preds = %dec_label_pc_fedc, %.thread56
  %v0_ff00 = load i32, i32* @r4, align 4
  store i32 %v0_ff00, i32* @r0, align 4
  %v0_ff04 = call i32 @function_f348()
  store i32 %v0_ff04, i32* %r0.global-to-local, align 4
  br label %bb378

dec_label_pc_ff0c:                                ; preds = %bb378
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_ff18 = load i32, i32* @r5, align 4
  %v1_ff18 = load i32, i32* @r6, align 4
  %v3_ff18 = icmp uge i32 %v0_ff18, %v1_ff18
  store i1 %v3_ff18, i1* %cpsr_c.global-to-local, align 1
  %v9_ff18 = icmp eq i32 %v0_ff18, %v1_ff18
  store i1 %v9_ff18, i1* %cpsr_z.global-to-local, align 1
  %v5_ff1c = icmp slt i32 %v0_ff18, %v1_ff18
  %storemerge134 = select i1 %v5_ff1c, i32 %v1_ff18, i32 %v0_ff18
  %v2_ff28 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_ff28, i32* %ip.global-to-local, align 4
  %v2_ff2c = ptrtoint i32* %stack_var_-224 to i32
  store i32 %v2_ff2c, i32* %r1.global-to-local, align 4
  %v2_ff30 = ptrtoint i32* %stack_var_-352 to i32
  store i32 %v2_ff30, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ff38 = add i32 %storemerge134, 1
  store i32 %v1_ff38, i32* %r0.global-to-local, align 4
  %v5_ff44 = call i32 @function_121f4(i32 %v1_ff38, i32 %v2_ff2c, i32 %v2_ff30, i32 0, i32 %v2_ff28)
  %v0_ff48 = load i32, i32* @r4, align 4
  store i32 %v0_ff48, i32* %r0.global-to-local, align 4
  %v1_ff4c = inttoptr i32 %v0_ff48 to i32*
  %v2_ff4c = call i32 @function_12150(i32* %v1_ff4c)
  store i32 %v2_ff4c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_203e4.143 to i32), i32* @lr, align 4
  %v0_ff54 = load i32, i32* @r4, align 4
  %v5_ff54 = trunc i32 %v0_ff54 to i16
  store i16 %v5_ff54, i16* %stack_var_-52, align 2
  store i32 %v2_ff4c, i32* @global_var_203e4.143, align 4
  %v2_1092c = ptrtoint i32* %stack_var_-45 to i32
  %v2_10940 = ptrtoint i32* %stack_var_-80 to i32
  %v2_10948 = ptrtoint i32* %stack_var_-77 to i32
  %v2_106fc = ptrtoint i32* %stack_var_-60 to i32
  %v2_10710 = ptrtoint i8* %stack_var_-56 to i32
  %v2_10718 = bitcast i8* %stack_var_-56 to i32*
  %v2_10a38 = ptrtoint i32* %stack_var_-96 to i32
  br label %dec_label_pc_ff5c

dec_label_pc_ff5c:                                ; preds = %dec_label_pc_100d0, %dec_label_pc_ff0c
  %v0_ff68 = phi i32 [ %v1_100d4, %dec_label_pc_100d0 ], [ %v0_ff54, %dec_label_pc_ff0c ]
  store i32 ptrtoint (i32* @global_var_22430.154 to i32), i32* %r0.global-to-local, align 4
  %v3_ff60 = mul i32 %v0_ff68, 256
  store i32 %v3_ff60, i32* %r3.global-to-local, align 4
  %v2_ff64 = load i32, i32* @global_var_22430.154, align 4
  store i32 %v2_ff64, i32* %r1.global-to-local, align 4
  %v2_ff6c = mul i32 %v0_ff68, 288
  store i32 %v2_ff6c, i32* %r2.global-to-local, align 4
  %v2_ff70 = add i32 %v2_ff64, %v2_ff6c
  store i32 %v2_ff70, i32* @r5, align 4
  %v1_ff74 = add i32 %v2_ff70, 4
  %v2_ff74 = inttoptr i32 %v1_ff74 to i32*
  %v3_ff74 = load i32, i32* %v2_ff74, align 4
  store i32 %v3_ff74, i32* %r0.global-to-local, align 4
  %v2_ff78 = icmp eq i32 %v3_ff74, -1
  store i1 %v2_ff78, i1* %cpsr_c.global-to-local, align 1
  %v7_ff78 = icmp eq i32 %v3_ff74, -1
  store i1 %v7_ff78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff78, label %dec_label_pc_100d0, label %dec_label_pc_ff80

dec_label_pc_ff80:                                ; preds = %dec_label_pc_ff5c
  %v3_ff80 = udiv i32 %v3_ff74, 32
  store i32 %v2_10cb4, i32* %r1.global-to-local, align 4
  %v3_ff8c = mul nuw nsw i32 %v3_ff80, 4
  store i32 %v3_ff8c, i32* @ip, align 4
  %v2_ff90 = add i32 %v3_ff8c, %v2_10cb4
  store i32 %v2_ff90, i32* %r2.global-to-local, align 4
  %v1_ff94 = add i32 %v2_ff90, -312
  %v2_ff94 = inttoptr i32 %v1_ff94 to i32*
  %v3_ff94 = load i32, i32* %v2_ff94, align 4
  %v1_ff98 = urem i32 %v3_ff74, 32
  store i32 %v1_ff98, i32* %r1.global-to-local, align 4
  %v2_ff9c = add nsw i32 %v1_ff98, -1
  %v3_ff9c = shl i32 1, %v2_ff9c
  %v4_ff9c = and i32 %v3_ff94, %v3_ff9c
  %v5_ff9c = icmp ne i32 %v4_ff9c, 0
  store i1 %v5_ff9c, i1* %cpsr_c.global-to-local, align 1
  %v6_ff9c = lshr i32 %v3_ff94, %v1_ff98
  store i32 %v6_ff9c, i32* %r3.global-to-local, align 4
  %v1_ffa0 = urem i32 %v6_ff9c, 2
  %v2_ffa0 = icmp eq i32 %v1_ffa0, 0
  store i1 %v2_ffa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ffa0, label %dec_label_pc_ffa8, label %dec_label_pc_10b1c

dec_label_pc_ffa8:                                ; preds = %dec_label_pc_ff80, %dec_label_pc_10bcc
  %v1_ffb8 = phi i32 [ %v1_ff98, %dec_label_pc_ff80 ], [ %v1_ffb8.pre, %dec_label_pc_10bcc ]
  %v0_ffb0 = phi i32 [ %v3_ff8c, %dec_label_pc_ff80 ], [ %v0_ffb0.pre, %dec_label_pc_10bcc ]
  store i32 %v2_10cb4, i32* %r3.global-to-local, align 4
  %v2_ffb0 = add i32 %v0_ffb0, %v2_10cb4
  store i32 %v2_ffb0, i32* %r2.global-to-local, align 4
  %v1_ffb4 = add i32 %v2_ffb0, -184
  %v2_ffb4 = inttoptr i32 %v1_ffb4 to i32*
  %v3_ffb4 = load i32, i32* %v2_ffb4, align 4
  %v2_ffb8 = add i32 %v1_ffb8, -1
  %v3_ffb8 = shl i32 1, %v2_ffb8
  %v4_ffb8 = and i32 %v3_ffb4, %v3_ffb8
  %v5_ffb8 = icmp ne i32 %v4_ffb8, 0
  store i1 %v5_ffb8, i1* %cpsr_c.global-to-local, align 1
  %v6_ffb8 = lshr i32 %v3_ffb4, %v1_ffb8
  store i32 %v6_ffb8, i32* %r3.global-to-local, align 4
  %v1_ffbc = urem i32 %v6_ffb8, 2
  %v2_ffbc = icmp eq i32 %v1_ffbc, 0
  store i1 %v2_ffbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ffbc, label %dec_label_pc_100d0, label %dec_label_pc_ffc4.preheader

dec_label_pc_ffc4.preheader:                      ; preds = %dec_label_pc_ffa8
  %v0_ffc4156 = load i32, i32* @r5, align 4
  %v1_ffc4157 = add i32 %v0_ffc4156, 12
  %v2_ffc4158 = inttoptr i32 %v1_ffc4157 to i32*
  %v3_ffc4159 = load i32, i32* %v2_ffc4158, align 4
  store i32 %v3_ffc4159, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ffc8155161 = icmp eq i32 %v3_ffc4159, 0
  store i1 %v2_ffc8155161, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ffc8155161, label %dec_label_pc_100d0, label %dec_label_pc_ffd0.lr.ph

dec_label_pc_ffc4.loopexit:                       ; preds = %dec_label_pc_109dc, %dec_label_pc_1084c
  %v0_ffc4 = load i32, i32* @r5, align 4
  %v1_ffc4 = add i32 %v0_ffc4, 12
  %v2_ffc4 = inttoptr i32 %v1_ffc4 to i32*
  %v3_ffc4 = load i32, i32* %v2_ffc4, align 4
  store i32 %v3_ffc4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ffc8155 = icmp eq i32 %v3_ffc4, 0
  store i1 %v2_ffc8155, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ffc8155, label %dec_label_pc_100d0, label %dec_label_pc_ffd0.lr.ph

dec_label_pc_ffd0.lr.ph:                          ; preds = %dec_label_pc_ffc4.preheader, %dec_label_pc_ffc4.loopexit
  %v0_ffd0189 = phi i32 [ %v0_ffc4, %dec_label_pc_ffc4.loopexit ], [ %v0_ffc4156, %dec_label_pc_ffc4.preheader ]
  br label %dec_label_pc_ffd0

dec_label_pc_ffd0:                                ; preds = %dec_label_pc_ffc8.backedge.thread, %dec_label_pc_ffc8.backedge, %dec_label_pc_ffc8.backedge.thread528, %dec_label_pc_ffd0.lr.ph
  %v0_10aac = phi i32 [ %v0_ffd0189, %dec_label_pc_ffd0.lr.ph ], [ %v0_ffd0186, %dec_label_pc_ffc8.backedge ], [ %v0_10044, %dec_label_pc_ffc8.backedge.thread ], [ %v0_10044, %dec_label_pc_ffc8.backedge.thread528 ]
  %v1_ffd0 = add i32 %v0_10aac, 24
  %v2_ffd0 = inttoptr i32 %v1_ffd0 to i32*
  %v3_ffd0 = load i32, i32* %v2_ffd0, align 4
  store i32 %v3_ffd0, i32* @r3, align 4
  %v2_ffd4 = icmp ugt i32 %v3_ffd0, 255
  store i1 %v2_ffd4, i1* %cpsr_c.global-to-local, align 1
  %v7_ffd4 = icmp eq i32 %v3_ffd0, 256
  store i1 %v7_ffd4, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_10aac, 28
  store i32 %.pre, i32* %sl.global-to-local, align 4
  br i1 %v7_ffd4, label %dec_label_pc_10aac, label %dec_label_pc_ffe0

dec_label_pc_ffe0:                                ; preds = %dec_label_pc_ffd0, %dec_label_pc_10aac
  store i32 0, i32* @r6, align 4
  %v1_ffe4 = load i32, i32* @sb, align 4
  %v2_ffe4 = inttoptr i32 %v1_ffe4 to i32*
  store i32 0, i32* %v2_ffe4, align 4
  %v0_ffe8 = load i32, i32* @r5, align 4
  %v1_ffe8 = add i32 %v0_ffe8, 24
  %v2_ffe8 = inttoptr i32 %v1_ffe8 to i32*
  %v3_ffe8 = load i32, i32* %v2_ffe8, align 4
  store i32 %v3_ffe8, i32* %r2.global-to-local, align 4
  %v0_ffec = load i32, i32* %sl.global-to-local, align 4
  %v2_ffec = add i32 %v0_ffec, %v3_ffe8
  store i32 %v2_ffec, i32* @r4, align 4
  %v1_fff0 = add i32 %v0_ffe8, 4
  %v2_fff0 = inttoptr i32 %v1_fff0 to i32*
  %v3_fff0 = load i32, i32* %v2_fff0, align 4
  store i32 %v3_fff0, i32* %r0.global-to-local, align 4
  %v1_fff4 = sub i32 256, %v3_ffe8
  store i32 %v1_fff4, i32* %r2.global-to-local, align 4
  store i32 %v2_ffec, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10000 = call i32 @function_12bb4(i32 %v3_fff0, i32 %v2_ffec, i32 %v1_fff4, i32 16384)
  store i32 %v4_10000, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10004 = icmp eq i32 %v4_10000, 0
  store i1 %v2_10004, i1* %cpsr_z.global-to-local, align 1
  %tmp385 = icmp slt i32 %v4_10000, 1
  br i1 %tmp385, label %dec_label_pc_1007c, label %dec_label_pc_1000c

dec_label_pc_1000c:                               ; preds = %dec_label_pc_ffe0
  %v0_1000c = load i32, i32* @r6, align 4
  store i32 %v0_1000c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10010

dec_label_pc_10010:                               ; preds = %.thread63, %dec_label_pc_1000c
  %v3_1001c = phi i32 [ %v1_10020, %.thread63 ], [ %v0_1000c, %dec_label_pc_1000c ]
  %v1_10010 = load i32, i32* @r4, align 4
  %v2_10010 = add i32 %v1_10010, %v3_1001c
  %v3_10010 = inttoptr i32 %v2_10010 to i8*
  %v4_10010 = load i8, i8* %v3_10010, align 1
  %v6_10010 = zext i8 %v4_10010 to i32
  store i32 %v6_10010, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10014 = icmp eq i8 %v4_10010, 0
  store i1 %v2_10014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10014, label %bb386, label %.thread63

bb386:                                            ; preds = %dec_label_pc_10010
  %v2_10018 = add nuw nsw i32 %v6_10010, 65
  store i32 %v2_10018, i32* %r3.global-to-local, align 4
  %v2_1001c = trunc i32 %v2_10018 to i8
  store i8 %v2_1001c, i8* %v3_10010, align 1
  %v0_10020.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread63

.thread63:                                        ; preds = %dec_label_pc_10010, %bb386
  %v0_10020 = phi i32 [ %v3_1001c, %dec_label_pc_10010 ], [ %v0_10020.pre, %bb386 ]
  %v1_10020 = add i32 %v0_10020, 1
  store i32 %v1_10020, i32* %r2.global-to-local, align 4
  %v3_10024 = icmp uge i32 %v1_10020, %v4_10000
  store i1 %v3_10024, i1* %cpsr_c.global-to-local, align 1
  %v9_10024 = icmp eq i32 %v1_10020, %v4_10000
  store i1 %v9_10024, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10024, label %dec_label_pc_1002c, label %dec_label_pc_10010

dec_label_pc_1002c:                               ; preds = %.thread63, %dec_label_pc_10080
  store i32 ptrtoint (i32* @global_var_203e4.143 to i32), i32* @ip, align 4
  %v0_10030 = load i32, i32* @r5, align 4
  %v1_10030 = add i32 %v0_10030, 24
  %v2_10030 = inttoptr i32 %v1_10030 to i32*
  %v3_10030 = load i32, i32* %v2_10030, align 4
  %v2_10034 = load i32, i32* @global_var_203e4.143, align 4
  store i32 %v2_10034, i32* %r2.global-to-local, align 4
  %v2_10038 = add i32 %v3_10030, %v4_10000
  store i32 %v2_10038, i32* %r3.global-to-local, align 4
  store i32 %v2_10038, i32* %v2_10030, align 4
  %v0_10040 = load i32, i32* %r2.global-to-local, align 4
  %v1_10040 = load i32, i32* @r5, align 4
  %v2_10040 = add i32 %v1_10040, 8
  %v3_10040 = inttoptr i32 %v2_10040 to i32*
  store i32 %v0_10040, i32* %v3_10040, align 4
  br label %dec_label_pc_10044

dec_label_pc_10044:                               ; preds = %dec_label_pc_10164, %dec_label_pc_1002c
  %v0_10044 = load i32, i32* @r5, align 4
  %v1_10044 = add i32 %v0_10044, 12
  %v2_10044 = inttoptr i32 %v1_10044 to i32*
  %v3_10044 = load i32, i32* %v2_10044, align 4
  store i32 %v3_10044, i32* %r0.global-to-local, align 4
  %v1_10048 = add i32 %v3_10044, -2
  store i32 %v1_10048, i32* @r3, align 4
  %v7_1004c = icmp eq i32 %v1_10048, 8
  store i1 %v7_1004c, i1* %cpsr_z.global-to-local, align 1
  %v5_10050 = and i32 %v1_10048, 1073741824
  %v6_10050 = icmp ne i32 %v5_10050, 0
  store i1 %v6_10050, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_10044, label %dec_label_pc_ffc8.backedge [
    i32 2, label %dec_label_pc_10858
    i32 3, label %dec_label_pc_1066c
    i32 4, label %dec_label_pc_10764
    i32 5, label %dec_label_pc_104dc
    i32 6, label %dec_label_pc_10334
    i32 7, label %dec_label_pc_10260
    i32 8, label %dec_label_pc_10408
    i32 9, label %dec_label_pc_1018c
    i32 10, label %dec_label_pc_100e8
  ]

dec_label_pc_1007c:                               ; preds = %dec_label_pc_ffe0
  br i1 %v2_10004, label %dec_label_pc_10c98, label %dec_label_pc_10080

dec_label_pc_10080:                               ; preds = %dec_label_pc_1007c
  %v3_10080 = icmp eq i32 %v4_10000, -1
  store i1 %v3_10080, i1* %cpsr_c.global-to-local, align 1
  %v8_10080 = icmp eq i32 %v4_10000, -1
  store i1 %v8_10080, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10080, label %dec_label_pc_10088, label %dec_label_pc_1002c

dec_label_pc_10088:                               ; preds = %dec_label_pc_10080
  %v0_10088 = load i32, i32* @sb, align 4
  %v1_10088 = inttoptr i32 %v0_10088 to i32*
  %v2_10088 = load i32, i32* %v1_10088, align 4
  store i32 %v2_10088, i32* %r3.global-to-local, align 4
  %v2_1008c = icmp ugt i32 %v2_10088, 10
  store i1 %v2_1008c, i1* %cpsr_c.global-to-local, align 1
  %v7_1008c = icmp eq i32 %v2_10088, 11
  store i1 %v7_1008c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1008c, label %dec_label_pc_100d0, label %dec_label_pc_10094

dec_label_pc_10094:                               ; preds = %dec_label_pc_10088, %dec_label_pc_10c98
  %v0_10094 = load i32, i32* @r5, align 4
  %v1_10094 = add i32 %v0_10094, 4
  %v2_10094 = inttoptr i32 %v1_10094 to i32*
  %v3_10094 = load i32, i32* %v2_10094, align 4
  store i32 %v3_10094, i32* %r0.global-to-local, align 4
  %v1_10098 = call i32 @function_124d0(i32 %v3_10094)
  store i32 %v1_10098, i32* %r0.global-to-local, align 4
  %v0_1009c = load i32, i32* @r5, align 4
  %v1_1009c = add i32 %v0_1009c, 284
  %v2_1009c = inttoptr i32 %v1_1009c to i8*
  %v3_1009c = load i8, i8* %v2_1009c, align 1
  %v4_1009c = zext i8 %v3_1009c to i32
  %v1_100a0 = add nuw nsw i32 %v4_1009c, 1
  %v1_100a4 = urem i32 %v1_100a0, 256
  store i32 %v1_100a4, i32* %r3.global-to-local, align 4
  %v2_100a8 = icmp ugt i32 %v1_100a4, 8
  store i1 %v2_100a8, i1* %cpsr_c.global-to-local, align 1
  %v7_100a8 = icmp eq i32 %v1_100a4, 9
  store i1 %v7_100a8, i1* %cpsr_z.global-to-local, align 1
  %v1_100ac = trunc i32 %v1_100a0 to i8
  store i8 %v1_100ac, i8* %v2_1009c, align 1
  %v0_100b0 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_100b0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_100b0 = xor i1 %v1_100b0, true
  %v3_100b0 = and i1 %v0_100b0, %v2_100b0
  br i1 %v3_100b0, label %bb387, label %.thread293

.thread293:                                       ; preds = %dec_label_pc_10094
  store i32 -1, i32* %r2.global-to-local, align 4
  %v1_100bc289294 = load i32, i32* @r5, align 4
  %v2_100bc290295 = add i32 %v1_100bc289294, 4
  %v3_100bc291296 = inttoptr i32 %v2_100bc290295 to i32*
  store i32 -1, i32* %v3_100bc291296, align 4
  br label %bb388

bb387:                                            ; preds = %dec_label_pc_10094
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_100bc285 = load i32, i32* @r5, align 4
  %v2_100bc286 = add i32 %v1_100bc285, 4
  %v3_100bc287 = inttoptr i32 %v2_100bc286 to i32*
  store i32 -1, i32* %v3_100bc287, align 4
  %v4_100c0 = load i32, i32* %r0.global-to-local, align 4
  %v5_100c0 = load i32, i32* @r5, align 4
  %v6_100c0 = add i32 %v5_100c0, 12
  %v7_100c0 = inttoptr i32 %v6_100c0 to i32*
  store i32 %v4_100c0, i32* %v7_100c0, align 4
  %v4_100c4 = load i32, i32* %r3.global-to-local, align 4
  %v5_100c4 = trunc i32 %v4_100c4 to i8
  %v6_100c4 = load i32, i32* @r5, align 4
  %v7_100c4 = add i32 %v6_100c4, 284
  %v8_100c4 = inttoptr i32 %v7_100c4 to i8*
  store i8 %v5_100c4, i8* %v8_100c4, align 1
  %v0_100c8.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_100c8.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb388

bb388:                                            ; preds = %.thread293, %bb387
  %v1_100cc = phi i1 [ %v1_100c8.pre, %bb387 ], [ %v0_100b0, %.thread293 ]
  %v0_100cc = phi i1 [ %v0_100c8.pre, %bb387 ], [ %v1_100b0, %.thread293 ]
  %v2_100c8 = xor i1 %v1_100cc, true
  %v3_100c8 = or i1 %v0_100cc, %v2_100c8
  br i1 %v3_100c8, label %bb389, label %bb390

bb389:                                            ; preds = %bb388
  %v4_100c8 = load i32, i32* @r5, align 4
  store i32 %v4_100c8, i32* %r0.global-to-local, align 4
  br label %bb390

bb390:                                            ; preds = %bb388, %bb389
  store i32 65744, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_100c8, i32 ptrtoint (i32* @global_var_f348.240 to i32))
  br label %dec_label_pc_100d0

dec_label_pc_100d0:                               ; preds = %dec_label_pc_ffc4.loopexit, %dec_label_pc_ffc8.backedge, %dec_label_pc_ffc4.preheader, %dec_label_pc_10088, %dec_label_pc_ffa8, %dec_label_pc_ff5c, %dec_label_pc_10bec, %bb390
  %v3_100d0 = load i16, i16* %stack_var_-52, align 2
  %v4_100d0 = sext i16 %v3_100d0 to i32
  store i32 %v4_100d0, i32* %r3.global-to-local, align 4
  %v1_100d4 = add nsw i32 %v4_100d0, 1
  store i32 %v1_100d4, i32* @r4, align 4
  %v2_100d8 = icmp ugt i32 %v1_100d4, 254
  store i1 %v2_100d8, i1* %cpsr_c.global-to-local, align 1
  %v7_100d8 = icmp eq i32 %v1_100d4, 255
  store i1 %v7_100d8, i1* %cpsr_z.global-to-local, align 1
  %v5_100dc = trunc i32 %v1_100d4 to i16
  store i16 %v5_100dc, i16* %stack_var_-52, align 2
  %v7_100e0 = icmp sgt i16 %v3_100d0, 254
  br i1 %v7_100e0, label %dec_label_pc_f990, label %dec_label_pc_ff5c

dec_label_pc_100e8:                               ; preds = %dec_label_pc_10044
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_100ec = call i32 @function_10e48(i32 30)
  store i32 %v2_10710, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_100fc = call i32 @function_10d84(i32 30, i32* %v2_10718)
  %v3_10100 = load i8, i8* %stack_var_-56, align 1
  %v4_10100 = sext i8 %v3_10100 to i32
  store i32 %v3_100fc, i32* %r2.global-to-local, align 4
  %v1_10108 = add nsw i32 %v4_10100, -1
  store i32 %v1_10108, i32* %r3.global-to-local, align 4
  %v0_1010c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_1010c, i32* %r0.global-to-local, align 4
  %v0_10110 = load i32, i32* @r5, align 4
  %v1_10110 = add i32 %v0_10110, 24
  %v2_10110 = inttoptr i32 %v1_10110 to i32*
  %v3_10110 = load i32, i32* %v2_10110, align 4
  store i32 %v3_10110, i32* %r1.global-to-local, align 4
  %v4_10114 = call i32 @function_11924(i32 %v0_1010c, i32 %v3_10110, i32 %v3_100fc, i32 %v1_10108)
  %v2_10118 = icmp eq i32 %v4_10114, -1
  store i1 %v2_10118, i1* %cpsr_c.global-to-local, align 1
  %v7_10118 = icmp eq i32 %v4_10114, -1
  store i1 %v7_10118, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_10114, i32* @r4, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_109e0 = call i32 @function_10da8(i32 30)
  br i1 %v7_10118, label %dec_label_pc_109dc, label %dec_label_pc_10124

dec_label_pc_10124:                               ; preds = %dec_label_pc_100e8
  store i32 %v1_109e0, i32* %r0.global-to-local, align 4
  %v0_1012c = load i32, i32* @r5, align 4
  %v1_1012c = add i32 %v0_1012c, 4
  %v2_1012c = inttoptr i32 %v1_1012c to i32*
  %v3_1012c = load i32, i32* %v2_1012c, align 4
  store i32 %v3_1012c, i32* %r0.global-to-local, align 4
  %v1_10130 = call i32 @function_124d0(i32 %v3_1012c)
  store i32 %v1_10130, i32* %r0.global-to-local, align 4
  %v0_10134 = load i32, i32* @r5, align 4
  %v1_10134 = add i32 %v0_10134, 284
  %v2_10134 = inttoptr i32 %v1_10134 to i8*
  %v3_10134 = load i8, i8* %v2_10134, align 1
  %v4_10134 = zext i8 %v3_10134 to i32
  %v1_10138 = add nuw nsw i32 %v4_10134, 1
  %v1_1013c = urem i32 %v1_10138, 256
  store i32 %v1_1013c, i32* @r3, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10144 = icmp ugt i32 %v1_1013c, 9
  store i1 %v2_10144, i1* %cpsr_c.global-to-local, align 1
  %v7_10144 = icmp eq i32 %v1_1013c, 10
  store i1 %v7_10144, i1* %cpsr_z.global-to-local, align 1
  %v2_10148 = add i32 %v0_10134, 4
  %v3_10148 = inttoptr i32 %v2_10148 to i32*
  store i32 -1, i32* %v3_10148, align 4
  %v0_1014c = load i32, i32* @r3, align 4
  %v1_1014c = trunc i32 %v0_1014c to i8
  %v2_1014c = load i32, i32* @r5, align 4
  %v3_1014c = add i32 %v2_1014c, 284
  %v4_1014c = inttoptr i32 %v3_1014c to i8*
  store i8 %v1_1014c, i8* %v4_1014c, align 1
  %v0_10150 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10150, label %dec_label_pc_10154, label %dec_label_pc_10ad0

dec_label_pc_10154:                               ; preds = %dec_label_pc_10124
  store i32 0, i32* @r3, align 4
  %v1_10158 = load i32, i32* @r5, align 4
  %v2_10158 = add i32 %v1_10158, 12
  %v3_10158 = inttoptr i32 %v2_10158 to i32*
  store i32 0, i32* %v3_10158, align 4
  %v0_1015c = load i32, i32* @r3, align 4
  %v1_1015c = trunc i32 %v0_1015c to i8
  %v2_1015c = load i32, i32* @r5, align 4
  %v3_1015c = add i32 %v2_1015c, 284
  %v4_1015c = inttoptr i32 %v3_1015c to i8*
  store i8 %v1_1015c, i8* %v4_1015c, align 1
  br label %dec_label_pc_10160

dec_label_pc_10160:                               ; preds = %dec_label_pc_10ad0, %dec_label_pc_10154
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_10164

dec_label_pc_10164:                               ; preds = %dec_label_pc_1084c, %dec_label_pc_10614, %dec_label_pc_10484, %dec_label_pc_103b0, %dec_label_pc_102dc, %dec_label_pc_10208, %dec_label_pc_10160
  %v0_10164 = load i32, i32* @r5, align 4
  %v1_10164 = add i32 %v0_10164, 24
  %v2_10164 = inttoptr i32 %v1_10164 to i32*
  %v3_10164 = load i32, i32* %v2_10164, align 4
  %v0_10168 = load i32, i32* @r7, align 4
  %v2_10168 = sub i32 %v0_10168, %v3_10164
  %v3_10168 = icmp uge i32 %v0_10168, %v3_10164
  store i1 %v3_10168, i1* %cpsr_c.global-to-local, align 1
  %v4_10168 = xor i32 %v0_10168, %v3_10164
  %v5_10168 = xor i32 %v2_10168, %v0_10168
  %v6_10168 = and i32 %v5_10168, %v4_10168
  %v7_10168 = icmp slt i32 %v6_10168, 0
  %v8_10168 = icmp slt i32 %v2_10168, 0
  %v9_10168 = icmp eq i32 %v0_10168, %v3_10164
  store i1 %v9_10168, i1* %cpsr_z.global-to-local, align 1
  %v2_1016c = xor i1 %v8_10168, %v7_10168
  %v0_10168.v3_10164 = select i1 %v2_1016c, i32 %v0_10168, i32 %v3_10164
  store i32 %v0_10168.v3_10164, i32* %r1.global-to-local, align 4
  %v2_10174 = sub i32 %v3_10164, %v0_10168.v3_10164
  store i32 %v2_10174, i32* @r2, align 4
  store i32 %v2_10174, i32* %v2_10164, align 4
  %v0_1017c = load i32, i32* %sl.global-to-local, align 4
  %v1_1017c = load i32, i32* %r1.global-to-local, align 4
  %v2_1017c = add i32 %v1_1017c, %v0_1017c
  store i32 %v2_1017c, i32* @r1, align 4
  store i32 %v0_1017c, i32* @r0, align 4
  %v3_10184 = call i32 @function_129f0(i32 %v0_1017c, i32 %v2_1017c, i32 %v2_10174)
  store i32 %v3_10184, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10044

dec_label_pc_1018c:                               ; preds = %dec_label_pc_10044
  %v1_1018c = add i32 %v0_10044, 24
  %v2_1018c = inttoptr i32 %v1_1018c to i32*
  %v3_1018c = load i32, i32* %v2_1018c, align 4
  store i32 %v3_1018c, i32* %r2.global-to-local, align 4
  %v1_10190 = add i32 %v3_1018c, -1
  store i32 %v1_10190, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10194 = icmp eq i32 %v1_10190, 0
  store i1 %v2_10194, i1* %cpsr_z.global-to-local, align 1
  %tmp393 = icmp slt i32 %v1_10190, 1
  br i1 %tmp393, label %dec_label_pc_ffc8.backedge.thread, label %dec_label_pc_1019c

dec_label_pc_1019c:                               ; preds = %dec_label_pc_1018c
  %v2_1019c = add i32 %v1_10190, %v0_10044
  store i32 %v2_1019c, i32* %r3.global-to-local, align 4
  %v1_101a0 = add i32 %v2_1019c, 28
  %v2_101a0 = inttoptr i32 %v1_101a0 to i8*
  %v3_101a0 = load i8, i8* %v2_101a0, align 1
  %v4_101a0 = zext i8 %v3_101a0 to i32
  store i32 %v4_101a0, i32* %r3.global-to-local, align 4
  %v2_101a4 = icmp ugt i8 %v3_101a0, 61
  store i1 %v2_101a4, i1* %cpsr_c.global-to-local, align 1
  %v7_101a4 = icmp eq i8 %v3_101a0, 62
  store i1 %v7_101a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101a4, label %dec_label_pc_10208, label %bb394

bb394:                                            ; preds = %dec_label_pc_1019c
  %v3_101a8 = icmp ugt i8 %v3_101a0, 57
  store i1 %v3_101a8, i1* %cpsr_c.global-to-local, align 1
  %v8_101a8 = icmp eq i8 %v3_101a0, 58
  store i1 %v8_101a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_101a8, label %dec_label_pc_10208, label %dec_label_pc_101b0

dec_label_pc_101b0:                               ; preds = %bb394
  %v2_101b0 = icmp ugt i8 %v3_101a0, 35
  store i1 %v2_101b0, i1* %cpsr_c.global-to-local, align 1
  %v7_101b0 = icmp eq i8 %v3_101a0, 36
  store i1 %v7_101b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101b0, label %dec_label_pc_10208, label %dec_label_pc_101b8

dec_label_pc_101b8:                               ; preds = %dec_label_pc_101b0
  %v2_101b8 = icmp ugt i8 %v3_101a0, 34
  store i1 %v2_101b8, i1* %cpsr_c.global-to-local, align 1
  %v7_101b8 = icmp eq i8 %v3_101a0, 35
  store i1 %v7_101b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101b8, label %dec_label_pc_10208, label %dec_label_pc_101c0

dec_label_pc_101c0:                               ; preds = %dec_label_pc_101b8
  %v2_101c0 = icmp ugt i8 %v3_101a0, 36
  store i1 %v2_101c0, i1* %cpsr_c.global-to-local, align 1
  %v7_101c0 = icmp eq i8 %v3_101a0, 37
  store i1 %v7_101c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101c0, label %dec_label_pc_10208, label %dec_label_pc_101f0.preheader

dec_label_pc_101f0.preheader:                     ; preds = %dec_label_pc_101c0
  %v3_101c4 = add i32 %v0_10044, 28
  %v2_101c8 = add i32 %v3_101c4, %v3_1018c
  store i32 %v2_101c8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_101f0

dec_label_pc_101d4:                               ; preds = %bb395
  %v2_101d4 = icmp ugt i8 %v3_101f8, 35
  store i1 %v2_101d4, i1* %cpsr_c.global-to-local, align 1
  %v7_101d4 = icmp eq i8 %v3_101f8, 36
  store i1 %v7_101d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101d4, label %dec_label_pc_10208, label %dec_label_pc_101dc

dec_label_pc_101dc:                               ; preds = %dec_label_pc_101d4
  %v2_101dc = icmp ugt i8 %v3_101f8, 34
  store i1 %v2_101dc, i1* %cpsr_c.global-to-local, align 1
  %v7_101dc = icmp eq i8 %v3_101f8, 35
  store i1 %v7_101dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101dc, label %dec_label_pc_10208, label %dec_label_pc_101e4

dec_label_pc_101e4:                               ; preds = %dec_label_pc_101dc
  %v2_101e4 = icmp ugt i8 %v3_101f8, 36
  store i1 %v2_101e4, i1* %cpsr_c.global-to-local, align 1
  %v7_101e4 = icmp eq i8 %v3_101f8, 37
  store i1 %v7_101e4, i1* %cpsr_z.global-to-local, align 1
  %v1_101e8 = add i32 %v0_101e8, -1
  store i32 %v1_101e8, i32* %r3.global-to-local, align 4
  br i1 %v7_101e4, label %dec_label_pc_10208, label %dec_label_pc_101f0

dec_label_pc_101f0:                               ; preds = %dec_label_pc_101f0.preheader, %dec_label_pc_101e4
  %v0_101e8 = phi i32 [ %v2_101c8, %dec_label_pc_101f0.preheader ], [ %v1_101e8, %dec_label_pc_101e4 ]
  %v0_101f0 = phi i32 [ %v1_10190, %dec_label_pc_101f0.preheader ], [ %v1_101f0, %dec_label_pc_101e4 ]
  %v1_101f0 = add i32 %v0_101f0, -1
  store i32 %v1_101f0, i32* %r1.global-to-local, align 4
  %v2_101f0 = icmp ne i32 %v0_101f0, 0
  store i1 %v2_101f0, i1* %cpsr_c.global-to-local, align 1
  %v7_101f0 = icmp eq i32 %v0_101f0, 1
  store i1 %v7_101f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101f0, label %dec_label_pc_ffc8.backedge.thread528, label %dec_label_pc_101f8

dec_label_pc_101f8:                               ; preds = %dec_label_pc_101f0
  %v1_101f8 = add i32 %v0_101e8, -2
  %v2_101f8 = inttoptr i32 %v1_101f8 to i8*
  %v3_101f8 = load i8, i8* %v2_101f8, align 1
  %v4_101f8 = zext i8 %v3_101f8 to i32
  store i32 %v4_101f8, i32* %r2.global-to-local, align 4
  %v2_101fc = icmp ugt i8 %v3_101f8, 61
  store i1 %v2_101fc, i1* %cpsr_c.global-to-local, align 1
  %v7_101fc = icmp eq i8 %v3_101f8, 62
  store i1 %v7_101fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101fc, label %dec_label_pc_10208, label %bb395

bb395:                                            ; preds = %dec_label_pc_101f8
  %v3_10200 = icmp ugt i8 %v3_101f8, 57
  store i1 %v3_10200, i1* %cpsr_c.global-to-local, align 1
  %v8_10200 = icmp eq i8 %v3_101f8, 58
  store i1 %v8_10200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10200, label %dec_label_pc_10208, label %dec_label_pc_101d4

dec_label_pc_10208:                               ; preds = %dec_label_pc_101f8, %bb395, %dec_label_pc_101e4, %dec_label_pc_101dc, %dec_label_pc_101d4, %dec_label_pc_101c0, %dec_label_pc_1019c, %dec_label_pc_101b8, %dec_label_pc_101b0, %bb394
  %v0_1020c = phi i32 [ %v1_10190, %dec_label_pc_101c0 ], [ %v1_10190, %dec_label_pc_1019c ], [ %v1_10190, %dec_label_pc_101b8 ], [ %v1_10190, %dec_label_pc_101b0 ], [ %v1_10190, %bb394 ], [ %v1_101f0, %dec_label_pc_101d4 ], [ %v1_101f0, %dec_label_pc_101dc ], [ %v1_101f0, %dec_label_pc_101e4 ], [ %v1_101f0, %bb395 ], [ %v1_101f0, %dec_label_pc_101f8 ]
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_1020c = add i32 %v0_1020c, 1
  store i32 %v1_1020c, i32* @r7, align 4
  %v1_10210 = call i32 @function_10e48(i32 28)
  store i32 %v2_106fc, i32* %r1.global-to-local, align 4
  store i32 28, i32* %r0.global-to-local, align 4
  %v3_10220 = call i32 @function_10d84(i32 28, i32* nonnull %stack_var_-60)
  store i32 %v3_10220, i32* %r0.global-to-local, align 4
  %v3_10224 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_10224, i32* %r2.global-to-local, align 4
  store i32 %v3_10220, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10230 = load i32, i32* @r5, align 4
  %v1_10230 = add i32 %v0_10230, 4
  %v2_10230 = inttoptr i32 %v1_10230 to i32*
  %v3_10230 = load i32, i32* %v2_10230, align 4
  store i32 %v3_10230, i32* %r0.global-to-local, align 4
  %v4_10234 = call i32 @function_12c28(i32 %v3_10230, i32 %v3_10220, i32 %v3_10224, i32 16384)
  store i32 %v4_10234, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10244 = load i32, i32* @r5, align 4
  %v1_10244 = add i32 %v0_10244, 4
  %v2_10244 = inttoptr i32 %v1_10244 to i32*
  %v3_10244 = load i32, i32* %v2_10244, align 4
  store i32 %v3_10244, i32* %r0.global-to-local, align 4
  %v4_10248 = call i32 @function_12c28(i32 %v3_10244, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32 2, i32 16384)
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_10250 = call i32 @function_10da8(i32 28)
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_10258 = load i32, i32* @r5, align 4
  %v2_10258 = add i32 %v1_10258, 12
  %v3_10258 = inttoptr i32 %v2_10258 to i32*
  store i32 10, i32* %v3_10258, align 4
  br label %dec_label_pc_10164

dec_label_pc_10260:                               ; preds = %dec_label_pc_10044
  %v1_10260 = add i32 %v0_10044, 24
  %v2_10260 = inttoptr i32 %v1_10260 to i32*
  %v3_10260 = load i32, i32* %v2_10260, align 4
  store i32 %v3_10260, i32* %r2.global-to-local, align 4
  %v1_10264 = add i32 %v3_10260, -1
  store i32 %v1_10264, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10268 = icmp eq i32 %v1_10264, 0
  store i1 %v2_10268, i1* %cpsr_z.global-to-local, align 1
  %tmp396 = icmp slt i32 %v1_10264, 1
  br i1 %tmp396, label %dec_label_pc_ffc8.backedge.thread, label %dec_label_pc_10270

dec_label_pc_10270:                               ; preds = %dec_label_pc_10260
  %v2_10270 = add i32 %v1_10264, %v0_10044
  store i32 %v2_10270, i32* %r3.global-to-local, align 4
  %v1_10274 = add i32 %v2_10270, 28
  %v2_10274 = inttoptr i32 %v1_10274 to i8*
  %v3_10274 = load i8, i8* %v2_10274, align 1
  %v4_10274 = zext i8 %v3_10274 to i32
  store i32 %v4_10274, i32* %r3.global-to-local, align 4
  %v2_10278 = icmp ugt i8 %v3_10274, 61
  store i1 %v2_10278, i1* %cpsr_c.global-to-local, align 1
  %v7_10278 = icmp eq i8 %v3_10274, 62
  store i1 %v7_10278, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10278, label %dec_label_pc_102dc, label %bb397

bb397:                                            ; preds = %dec_label_pc_10270
  %v3_1027c = icmp ugt i8 %v3_10274, 57
  store i1 %v3_1027c, i1* %cpsr_c.global-to-local, align 1
  %v8_1027c = icmp eq i8 %v3_10274, 58
  store i1 %v8_1027c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1027c, label %dec_label_pc_102dc, label %dec_label_pc_10284

dec_label_pc_10284:                               ; preds = %bb397
  %v2_10284 = icmp ugt i8 %v3_10274, 35
  store i1 %v2_10284, i1* %cpsr_c.global-to-local, align 1
  %v7_10284 = icmp eq i8 %v3_10274, 36
  store i1 %v7_10284, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10284, label %dec_label_pc_102dc, label %dec_label_pc_1028c

dec_label_pc_1028c:                               ; preds = %dec_label_pc_10284
  %v2_1028c = icmp ugt i8 %v3_10274, 34
  store i1 %v2_1028c, i1* %cpsr_c.global-to-local, align 1
  %v7_1028c = icmp eq i8 %v3_10274, 35
  store i1 %v7_1028c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1028c, label %dec_label_pc_102dc, label %dec_label_pc_10294

dec_label_pc_10294:                               ; preds = %dec_label_pc_1028c
  %v2_10294 = icmp ugt i8 %v3_10274, 36
  store i1 %v2_10294, i1* %cpsr_c.global-to-local, align 1
  %v7_10294 = icmp eq i8 %v3_10274, 37
  store i1 %v7_10294, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10294, label %dec_label_pc_102dc, label %dec_label_pc_102c4.preheader

dec_label_pc_102c4.preheader:                     ; preds = %dec_label_pc_10294
  %v3_10298 = add i32 %v0_10044, 28
  %v2_1029c = add i32 %v3_10298, %v3_10260
  store i32 %v2_1029c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_102c4

dec_label_pc_102a8:                               ; preds = %bb398
  %v2_102a8 = icmp ugt i8 %v3_102cc, 35
  store i1 %v2_102a8, i1* %cpsr_c.global-to-local, align 1
  %v7_102a8 = icmp eq i8 %v3_102cc, 36
  store i1 %v7_102a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102a8, label %dec_label_pc_102dc, label %dec_label_pc_102b0

dec_label_pc_102b0:                               ; preds = %dec_label_pc_102a8
  %v2_102b0 = icmp ugt i8 %v3_102cc, 34
  store i1 %v2_102b0, i1* %cpsr_c.global-to-local, align 1
  %v7_102b0 = icmp eq i8 %v3_102cc, 35
  store i1 %v7_102b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102b0, label %dec_label_pc_102dc, label %dec_label_pc_102b8

dec_label_pc_102b8:                               ; preds = %dec_label_pc_102b0
  %v2_102b8 = icmp ugt i8 %v3_102cc, 36
  store i1 %v2_102b8, i1* %cpsr_c.global-to-local, align 1
  %v7_102b8 = icmp eq i8 %v3_102cc, 37
  store i1 %v7_102b8, i1* %cpsr_z.global-to-local, align 1
  %v1_102bc = add i32 %v0_102bc, -1
  store i32 %v1_102bc, i32* %r3.global-to-local, align 4
  br i1 %v7_102b8, label %dec_label_pc_102dc, label %dec_label_pc_102c4

dec_label_pc_102c4:                               ; preds = %dec_label_pc_102c4.preheader, %dec_label_pc_102b8
  %v0_102bc = phi i32 [ %v2_1029c, %dec_label_pc_102c4.preheader ], [ %v1_102bc, %dec_label_pc_102b8 ]
  %v0_102c4 = phi i32 [ %v1_10264, %dec_label_pc_102c4.preheader ], [ %v1_102c4, %dec_label_pc_102b8 ]
  %v1_102c4 = add i32 %v0_102c4, -1
  store i32 %v1_102c4, i32* %r1.global-to-local, align 4
  %v2_102c4 = icmp ne i32 %v0_102c4, 0
  store i1 %v2_102c4, i1* %cpsr_c.global-to-local, align 1
  %v7_102c4 = icmp eq i32 %v0_102c4, 1
  store i1 %v7_102c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102c4, label %dec_label_pc_ffc8.backedge.thread528, label %dec_label_pc_102cc

dec_label_pc_102cc:                               ; preds = %dec_label_pc_102c4
  %v1_102cc = add i32 %v0_102bc, -2
  %v2_102cc = inttoptr i32 %v1_102cc to i8*
  %v3_102cc = load i8, i8* %v2_102cc, align 1
  %v4_102cc = zext i8 %v3_102cc to i32
  store i32 %v4_102cc, i32* %r2.global-to-local, align 4
  %v2_102d0 = icmp ugt i8 %v3_102cc, 61
  store i1 %v2_102d0, i1* %cpsr_c.global-to-local, align 1
  %v7_102d0 = icmp eq i8 %v3_102cc, 62
  store i1 %v7_102d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102d0, label %dec_label_pc_102dc, label %bb398

bb398:                                            ; preds = %dec_label_pc_102cc
  %v3_102d4 = icmp ugt i8 %v3_102cc, 57
  store i1 %v3_102d4, i1* %cpsr_c.global-to-local, align 1
  %v8_102d4 = icmp eq i8 %v3_102cc, 58
  store i1 %v8_102d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_102d4, label %dec_label_pc_102dc, label %dec_label_pc_102a8

dec_label_pc_102dc:                               ; preds = %dec_label_pc_102cc, %bb398, %dec_label_pc_102b8, %dec_label_pc_102b0, %dec_label_pc_102a8, %dec_label_pc_10294, %dec_label_pc_10270, %dec_label_pc_1028c, %dec_label_pc_10284, %bb397
  %v0_102e0 = phi i32 [ %v1_10264, %dec_label_pc_10294 ], [ %v1_10264, %dec_label_pc_10270 ], [ %v1_10264, %dec_label_pc_1028c ], [ %v1_10264, %dec_label_pc_10284 ], [ %v1_10264, %bb397 ], [ %v1_102c4, %dec_label_pc_102a8 ], [ %v1_102c4, %dec_label_pc_102b0 ], [ %v1_102c4, %dec_label_pc_102b8 ], [ %v1_102c4, %bb398 ], [ %v1_102c4, %dec_label_pc_102cc ]
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_102e0 = add i32 %v0_102e0, 1
  store i32 %v1_102e0, i32* @r7, align 4
  %v1_102e4 = call i32 @function_10e48(i32 24)
  store i32 %v2_106fc, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_102f4 = call i32 @function_10d84(i32 24, i32* nonnull %stack_var_-60)
  store i32 %v3_102f4, i32* %r0.global-to-local, align 4
  %v3_102f8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_102f8, i32* %r2.global-to-local, align 4
  store i32 %v3_102f4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10304 = load i32, i32* @r5, align 4
  %v1_10304 = add i32 %v0_10304, 4
  %v2_10304 = inttoptr i32 %v1_10304 to i32*
  %v3_10304 = load i32, i32* %v2_10304, align 4
  store i32 %v3_10304, i32* %r0.global-to-local, align 4
  %v4_10308 = call i32 @function_12c28(i32 %v3_10304, i32 %v3_102f4, i32 %v3_102f8, i32 16384)
  store i32 %v4_10308, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10318 = load i32, i32* @r5, align 4
  %v1_10318 = add i32 %v0_10318, 4
  %v2_10318 = inttoptr i32 %v1_10318 to i32*
  %v3_10318 = load i32, i32* %v2_10318, align 4
  store i32 %v3_10318, i32* %r0.global-to-local, align 4
  %v4_1031c = call i32 @function_12c28(i32 %v3_10318, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32 2, i32 16384)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_10324 = call i32 @function_10da8(i32 24)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_1032c = load i32, i32* @r5, align 4
  %v2_1032c = add i32 %v1_1032c, 12
  %v3_1032c = inttoptr i32 %v2_1032c to i32*
  store i32 8, i32* %v3_1032c, align 4
  br label %dec_label_pc_10164

dec_label_pc_10334:                               ; preds = %dec_label_pc_10044
  %v1_10334 = add i32 %v0_10044, 24
  %v2_10334 = inttoptr i32 %v1_10334 to i32*
  %v3_10334 = load i32, i32* %v2_10334, align 4
  store i32 %v3_10334, i32* %r2.global-to-local, align 4
  %v1_10338 = add i32 %v3_10334, -1
  store i32 %v1_10338, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1033c = icmp eq i32 %v1_10338, 0
  store i1 %v2_1033c, i1* %cpsr_z.global-to-local, align 1
  %tmp399 = icmp slt i32 %v1_10338, 1
  br i1 %tmp399, label %dec_label_pc_ffc8.backedge.thread, label %dec_label_pc_10344

dec_label_pc_10344:                               ; preds = %dec_label_pc_10334
  %v2_10344 = add i32 %v1_10338, %v0_10044
  store i32 %v2_10344, i32* %r3.global-to-local, align 4
  %v1_10348 = add i32 %v2_10344, 28
  %v2_10348 = inttoptr i32 %v1_10348 to i8*
  %v3_10348 = load i8, i8* %v2_10348, align 1
  %v4_10348 = zext i8 %v3_10348 to i32
  store i32 %v4_10348, i32* %r3.global-to-local, align 4
  %v2_1034c = icmp ugt i8 %v3_10348, 61
  store i1 %v2_1034c, i1* %cpsr_c.global-to-local, align 1
  %v7_1034c = icmp eq i8 %v3_10348, 62
  store i1 %v7_1034c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1034c, label %dec_label_pc_103b0, label %bb400

bb400:                                            ; preds = %dec_label_pc_10344
  %v3_10350 = icmp ugt i8 %v3_10348, 57
  store i1 %v3_10350, i1* %cpsr_c.global-to-local, align 1
  %v8_10350 = icmp eq i8 %v3_10348, 58
  store i1 %v8_10350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10350, label %dec_label_pc_103b0, label %dec_label_pc_10358

dec_label_pc_10358:                               ; preds = %bb400
  %v2_10358 = icmp ugt i8 %v3_10348, 35
  store i1 %v2_10358, i1* %cpsr_c.global-to-local, align 1
  %v7_10358 = icmp eq i8 %v3_10348, 36
  store i1 %v7_10358, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10358, label %dec_label_pc_103b0, label %dec_label_pc_10360

dec_label_pc_10360:                               ; preds = %dec_label_pc_10358
  %v2_10360 = icmp ugt i8 %v3_10348, 34
  store i1 %v2_10360, i1* %cpsr_c.global-to-local, align 1
  %v7_10360 = icmp eq i8 %v3_10348, 35
  store i1 %v7_10360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10360, label %dec_label_pc_103b0, label %dec_label_pc_10368

dec_label_pc_10368:                               ; preds = %dec_label_pc_10360
  %v2_10368 = icmp ugt i8 %v3_10348, 36
  store i1 %v2_10368, i1* %cpsr_c.global-to-local, align 1
  %v7_10368 = icmp eq i8 %v3_10348, 37
  store i1 %v7_10368, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10368, label %dec_label_pc_103b0, label %dec_label_pc_10398.preheader

dec_label_pc_10398.preheader:                     ; preds = %dec_label_pc_10368
  %v3_1036c = add i32 %v0_10044, 28
  %v2_10370 = add i32 %v3_1036c, %v3_10334
  store i32 %v2_10370, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10398

dec_label_pc_1037c:                               ; preds = %bb401
  %v2_1037c = icmp ugt i8 %v3_103a0, 35
  store i1 %v2_1037c, i1* %cpsr_c.global-to-local, align 1
  %v7_1037c = icmp eq i8 %v3_103a0, 36
  store i1 %v7_1037c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1037c, label %dec_label_pc_103b0, label %dec_label_pc_10384

dec_label_pc_10384:                               ; preds = %dec_label_pc_1037c
  %v2_10384 = icmp ugt i8 %v3_103a0, 34
  store i1 %v2_10384, i1* %cpsr_c.global-to-local, align 1
  %v7_10384 = icmp eq i8 %v3_103a0, 35
  store i1 %v7_10384, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10384, label %dec_label_pc_103b0, label %dec_label_pc_1038c

dec_label_pc_1038c:                               ; preds = %dec_label_pc_10384
  %v2_1038c = icmp ugt i8 %v3_103a0, 36
  store i1 %v2_1038c, i1* %cpsr_c.global-to-local, align 1
  %v7_1038c = icmp eq i8 %v3_103a0, 37
  store i1 %v7_1038c, i1* %cpsr_z.global-to-local, align 1
  %v1_10390 = add i32 %v0_10390, -1
  store i32 %v1_10390, i32* %r3.global-to-local, align 4
  br i1 %v7_1038c, label %dec_label_pc_103b0, label %dec_label_pc_10398

dec_label_pc_10398:                               ; preds = %dec_label_pc_10398.preheader, %dec_label_pc_1038c
  %v0_10390 = phi i32 [ %v2_10370, %dec_label_pc_10398.preheader ], [ %v1_10390, %dec_label_pc_1038c ]
  %v0_10398 = phi i32 [ %v1_10338, %dec_label_pc_10398.preheader ], [ %v1_10398, %dec_label_pc_1038c ]
  %v1_10398 = add i32 %v0_10398, -1
  store i32 %v1_10398, i32* %r1.global-to-local, align 4
  %v2_10398 = icmp ne i32 %v0_10398, 0
  store i1 %v2_10398, i1* %cpsr_c.global-to-local, align 1
  %v7_10398 = icmp eq i32 %v0_10398, 1
  store i1 %v7_10398, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10398, label %dec_label_pc_ffc8.backedge.thread528, label %dec_label_pc_103a0

dec_label_pc_103a0:                               ; preds = %dec_label_pc_10398
  %v1_103a0 = add i32 %v0_10390, -2
  %v2_103a0 = inttoptr i32 %v1_103a0 to i8*
  %v3_103a0 = load i8, i8* %v2_103a0, align 1
  %v4_103a0 = zext i8 %v3_103a0 to i32
  store i32 %v4_103a0, i32* %r2.global-to-local, align 4
  %v2_103a4 = icmp ugt i8 %v3_103a0, 61
  store i1 %v2_103a4, i1* %cpsr_c.global-to-local, align 1
  %v7_103a4 = icmp eq i8 %v3_103a0, 62
  store i1 %v7_103a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103a4, label %dec_label_pc_103b0, label %bb401

bb401:                                            ; preds = %dec_label_pc_103a0
  %v3_103a8 = icmp ugt i8 %v3_103a0, 57
  store i1 %v3_103a8, i1* %cpsr_c.global-to-local, align 1
  %v8_103a8 = icmp eq i8 %v3_103a0, 58
  store i1 %v8_103a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_103a8, label %dec_label_pc_103b0, label %dec_label_pc_1037c

dec_label_pc_103b0:                               ; preds = %dec_label_pc_103a0, %bb401, %dec_label_pc_1038c, %dec_label_pc_10384, %dec_label_pc_1037c, %dec_label_pc_10368, %dec_label_pc_10344, %dec_label_pc_10360, %dec_label_pc_10358, %bb400
  %v0_103b4 = phi i32 [ %v1_10338, %dec_label_pc_10368 ], [ %v1_10338, %dec_label_pc_10344 ], [ %v1_10338, %dec_label_pc_10360 ], [ %v1_10338, %dec_label_pc_10358 ], [ %v1_10338, %bb400 ], [ %v1_10398, %dec_label_pc_1037c ], [ %v1_10398, %dec_label_pc_10384 ], [ %v1_10398, %dec_label_pc_1038c ], [ %v1_10398, %bb401 ], [ %v1_10398, %dec_label_pc_103a0 ]
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_103b4 = add i32 %v0_103b4, 1
  store i32 %v1_103b4, i32* @r7, align 4
  %v1_103b8 = call i32 @function_10e48(i32 26)
  store i32 %v2_106fc, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_103c8 = call i32 @function_10d84(i32 26, i32* nonnull %stack_var_-60)
  store i32 %v3_103c8, i32* %r0.global-to-local, align 4
  %v3_103cc = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_103cc, i32* %r2.global-to-local, align 4
  store i32 %v3_103c8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_103d8 = load i32, i32* @r5, align 4
  %v1_103d8 = add i32 %v0_103d8, 4
  %v2_103d8 = inttoptr i32 %v1_103d8 to i32*
  %v3_103d8 = load i32, i32* %v2_103d8, align 4
  store i32 %v3_103d8, i32* %r0.global-to-local, align 4
  %v4_103dc = call i32 @function_12c28(i32 %v3_103d8, i32 %v3_103c8, i32 %v3_103cc, i32 16384)
  store i32 %v4_103dc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_103ec = load i32, i32* @r5, align 4
  %v1_103ec = add i32 %v0_103ec, 4
  %v2_103ec = inttoptr i32 %v1_103ec to i32*
  %v3_103ec = load i32, i32* %v2_103ec, align 4
  store i32 %v3_103ec, i32* %r0.global-to-local, align 4
  %v4_103f0 = call i32 @function_12c28(i32 %v3_103ec, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32 2, i32 16384)
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_103f8 = call i32 @function_10da8(i32 26)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_10400 = load i32, i32* @r5, align 4
  %v2_10400 = add i32 %v1_10400, 12
  %v3_10400 = inttoptr i32 %v2_10400 to i32*
  store i32 7, i32* %v3_10400, align 4
  br label %dec_label_pc_10164

dec_label_pc_10408:                               ; preds = %dec_label_pc_10044
  %v1_10408 = add i32 %v0_10044, 24
  %v2_10408 = inttoptr i32 %v1_10408 to i32*
  %v3_10408 = load i32, i32* %v2_10408, align 4
  store i32 %v3_10408, i32* %r2.global-to-local, align 4
  %v1_1040c = add i32 %v3_10408, -1
  store i32 %v1_1040c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10410 = icmp eq i32 %v1_1040c, 0
  store i1 %v2_10410, i1* %cpsr_z.global-to-local, align 1
  %tmp402 = icmp slt i32 %v1_1040c, 1
  br i1 %tmp402, label %dec_label_pc_ffc8.backedge.thread, label %dec_label_pc_10418

dec_label_pc_10418:                               ; preds = %dec_label_pc_10408
  %v2_10418 = add i32 %v1_1040c, %v0_10044
  store i32 %v2_10418, i32* %r3.global-to-local, align 4
  %v1_1041c = add i32 %v2_10418, 28
  %v2_1041c = inttoptr i32 %v1_1041c to i8*
  %v3_1041c = load i8, i8* %v2_1041c, align 1
  %v4_1041c = zext i8 %v3_1041c to i32
  store i32 %v4_1041c, i32* %r3.global-to-local, align 4
  %v2_10420 = icmp ugt i8 %v3_1041c, 61
  store i1 %v2_10420, i1* %cpsr_c.global-to-local, align 1
  %v7_10420 = icmp eq i8 %v3_1041c, 62
  store i1 %v7_10420, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10420, label %dec_label_pc_10484, label %bb403

bb403:                                            ; preds = %dec_label_pc_10418
  %v3_10424 = icmp ugt i8 %v3_1041c, 57
  store i1 %v3_10424, i1* %cpsr_c.global-to-local, align 1
  %v8_10424 = icmp eq i8 %v3_1041c, 58
  store i1 %v8_10424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10424, label %dec_label_pc_10484, label %dec_label_pc_1042c

dec_label_pc_1042c:                               ; preds = %bb403
  %v2_1042c = icmp ugt i8 %v3_1041c, 35
  store i1 %v2_1042c, i1* %cpsr_c.global-to-local, align 1
  %v7_1042c = icmp eq i8 %v3_1041c, 36
  store i1 %v7_1042c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1042c, label %dec_label_pc_10484, label %dec_label_pc_10434

dec_label_pc_10434:                               ; preds = %dec_label_pc_1042c
  %v2_10434 = icmp ugt i8 %v3_1041c, 34
  store i1 %v2_10434, i1* %cpsr_c.global-to-local, align 1
  %v7_10434 = icmp eq i8 %v3_1041c, 35
  store i1 %v7_10434, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10434, label %dec_label_pc_10484, label %dec_label_pc_1043c

dec_label_pc_1043c:                               ; preds = %dec_label_pc_10434
  %v2_1043c = icmp ugt i8 %v3_1041c, 36
  store i1 %v2_1043c, i1* %cpsr_c.global-to-local, align 1
  %v7_1043c = icmp eq i8 %v3_1041c, 37
  store i1 %v7_1043c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1043c, label %dec_label_pc_10484, label %dec_label_pc_1046c.preheader

dec_label_pc_1046c.preheader:                     ; preds = %dec_label_pc_1043c
  %v3_10440 = add i32 %v0_10044, 28
  %v2_10444 = add i32 %v3_10440, %v3_10408
  store i32 %v2_10444, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1046c

dec_label_pc_10450:                               ; preds = %bb404
  %v2_10450 = icmp ugt i8 %v3_10474, 35
  store i1 %v2_10450, i1* %cpsr_c.global-to-local, align 1
  %v7_10450 = icmp eq i8 %v3_10474, 36
  store i1 %v7_10450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10450, label %dec_label_pc_10484, label %dec_label_pc_10458

dec_label_pc_10458:                               ; preds = %dec_label_pc_10450
  %v2_10458 = icmp ugt i8 %v3_10474, 34
  store i1 %v2_10458, i1* %cpsr_c.global-to-local, align 1
  %v7_10458 = icmp eq i8 %v3_10474, 35
  store i1 %v7_10458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10458, label %dec_label_pc_10484, label %dec_label_pc_10460

dec_label_pc_10460:                               ; preds = %dec_label_pc_10458
  %v2_10460 = icmp ugt i8 %v3_10474, 36
  store i1 %v2_10460, i1* %cpsr_c.global-to-local, align 1
  %v7_10460 = icmp eq i8 %v3_10474, 37
  store i1 %v7_10460, i1* %cpsr_z.global-to-local, align 1
  %v1_10464 = add i32 %v0_10464, -1
  store i32 %v1_10464, i32* %r3.global-to-local, align 4
  br i1 %v7_10460, label %dec_label_pc_10484, label %dec_label_pc_1046c

dec_label_pc_1046c:                               ; preds = %dec_label_pc_1046c.preheader, %dec_label_pc_10460
  %v0_10464 = phi i32 [ %v2_10444, %dec_label_pc_1046c.preheader ], [ %v1_10464, %dec_label_pc_10460 ]
  %v0_1046c = phi i32 [ %v1_1040c, %dec_label_pc_1046c.preheader ], [ %v1_1046c, %dec_label_pc_10460 ]
  %v1_1046c = add i32 %v0_1046c, -1
  store i32 %v1_1046c, i32* %r1.global-to-local, align 4
  %v2_1046c = icmp ne i32 %v0_1046c, 0
  store i1 %v2_1046c, i1* %cpsr_c.global-to-local, align 1
  %v7_1046c = icmp eq i32 %v0_1046c, 1
  store i1 %v7_1046c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1046c, label %dec_label_pc_ffc8.backedge.thread528, label %dec_label_pc_10474

dec_label_pc_10474:                               ; preds = %dec_label_pc_1046c
  %v1_10474 = add i32 %v0_10464, -2
  %v2_10474 = inttoptr i32 %v1_10474 to i8*
  %v3_10474 = load i8, i8* %v2_10474, align 1
  %v4_10474 = zext i8 %v3_10474 to i32
  store i32 %v4_10474, i32* %r2.global-to-local, align 4
  %v2_10478 = icmp ugt i8 %v3_10474, 61
  store i1 %v2_10478, i1* %cpsr_c.global-to-local, align 1
  %v7_10478 = icmp eq i8 %v3_10474, 62
  store i1 %v7_10478, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10478, label %dec_label_pc_10484, label %bb404

bb404:                                            ; preds = %dec_label_pc_10474
  %v3_1047c = icmp ugt i8 %v3_10474, 57
  store i1 %v3_1047c, i1* %cpsr_c.global-to-local, align 1
  %v8_1047c = icmp eq i8 %v3_10474, 58
  store i1 %v8_1047c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1047c, label %dec_label_pc_10484, label %dec_label_pc_10450

dec_label_pc_10484:                               ; preds = %dec_label_pc_10474, %bb404, %dec_label_pc_10460, %dec_label_pc_10458, %dec_label_pc_10450, %dec_label_pc_1043c, %dec_label_pc_10418, %dec_label_pc_10434, %dec_label_pc_1042c, %bb403
  %v0_10488 = phi i32 [ %v1_1040c, %dec_label_pc_1043c ], [ %v1_1040c, %dec_label_pc_10418 ], [ %v1_1040c, %dec_label_pc_10434 ], [ %v1_1040c, %dec_label_pc_1042c ], [ %v1_1040c, %bb403 ], [ %v1_1046c, %dec_label_pc_10450 ], [ %v1_1046c, %dec_label_pc_10458 ], [ %v1_1046c, %dec_label_pc_10460 ], [ %v1_1046c, %bb404 ], [ %v1_1046c, %dec_label_pc_10474 ]
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_10488 = add i32 %v0_10488, 1
  store i32 %v1_10488, i32* @r7, align 4
  %v1_1048c = call i32 @function_10e48(i32 27)
  store i32 %v2_106fc, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_1049c = call i32 @function_10d84(i32 27, i32* nonnull %stack_var_-60)
  store i32 %v3_1049c, i32* %r0.global-to-local, align 4
  %v3_104a0 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_104a0, i32* %r2.global-to-local, align 4
  store i32 %v3_1049c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_104ac = load i32, i32* @r5, align 4
  %v1_104ac = add i32 %v0_104ac, 4
  %v2_104ac = inttoptr i32 %v1_104ac to i32*
  %v3_104ac = load i32, i32* %v2_104ac, align 4
  store i32 %v3_104ac, i32* %r0.global-to-local, align 4
  %v4_104b0 = call i32 @function_12c28(i32 %v3_104ac, i32 %v3_1049c, i32 %v3_104a0, i32 16384)
  store i32 %v4_104b0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_104c0 = load i32, i32* @r5, align 4
  %v1_104c0 = add i32 %v0_104c0, 4
  %v2_104c0 = inttoptr i32 %v1_104c0 to i32*
  %v3_104c0 = load i32, i32* %v2_104c0, align 4
  store i32 %v3_104c0, i32* %r0.global-to-local, align 4
  %v4_104c4 = call i32 @function_12c28(i32 %v3_104c0, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32 2, i32 16384)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_104cc = call i32 @function_10da8(i32 27)
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_104d4 = load i32, i32* @r5, align 4
  %v2_104d4 = add i32 %v1_104d4, 12
  %v3_104d4 = inttoptr i32 %v2_104d4 to i32*
  store i32 9, i32* %v3_104d4, align 4
  br label %dec_label_pc_10164

dec_label_pc_104dc:                               ; preds = %dec_label_pc_10044
  %v1_104dc = add i32 %v0_10044, 24
  %v2_104dc = inttoptr i32 %v1_104dc to i32*
  %v3_104dc = load i32, i32* %v2_104dc, align 4
  store i32 %v3_104dc, i32* %r2.global-to-local, align 4
  %v1_104e0 = add i32 %v3_104dc, -1
  store i32 %v1_104e0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_104e4 = icmp eq i32 %v1_104e0, 0
  store i1 %v2_104e4, i1* %cpsr_z.global-to-local, align 1
  %tmp405 = icmp slt i32 %v1_104e0, 1
  br i1 %tmp405, label %dec_label_pc_ffc8.backedge.thread, label %dec_label_pc_104ec

dec_label_pc_104ec:                               ; preds = %dec_label_pc_104dc
  %v2_104ec = add i32 %v1_104e0, %v0_10044
  store i32 %v2_104ec, i32* %r3.global-to-local, align 4
  %v1_104f0 = add i32 %v2_104ec, 28
  %v2_104f0 = inttoptr i32 %v1_104f0 to i8*
  %v3_104f0 = load i8, i8* %v2_104f0, align 1
  %v4_104f0 = zext i8 %v3_104f0 to i32
  store i32 %v4_104f0, i32* %r3.global-to-local, align 4
  %v2_104f4 = icmp ugt i8 %v3_104f0, 61
  store i1 %v2_104f4, i1* %cpsr_c.global-to-local, align 1
  %v7_104f4 = icmp eq i8 %v3_104f0, 62
  store i1 %v7_104f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104f4, label %dec_label_pc_10614, label %bb406

bb406:                                            ; preds = %dec_label_pc_104ec
  %v3_104f8 = icmp ugt i8 %v3_104f0, 57
  store i1 %v3_104f8, i1* %cpsr_c.global-to-local, align 1
  %v8_104f8 = icmp eq i8 %v3_104f0, 58
  store i1 %v8_104f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_104f8, label %dec_label_pc_10614, label %dec_label_pc_10500

dec_label_pc_10500:                               ; preds = %bb406
  %v2_10500 = icmp ugt i8 %v3_104f0, 35
  store i1 %v2_10500, i1* %cpsr_c.global-to-local, align 1
  %v7_10500 = icmp eq i8 %v3_104f0, 36
  store i1 %v7_10500, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10500, label %dec_label_pc_10614, label %dec_label_pc_10508

dec_label_pc_10508:                               ; preds = %dec_label_pc_10500
  %v2_10508 = icmp ugt i8 %v3_104f0, 34
  store i1 %v2_10508, i1* %cpsr_c.global-to-local, align 1
  %v7_10508 = icmp eq i8 %v3_104f0, 35
  store i1 %v7_10508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10508, label %dec_label_pc_10614, label %dec_label_pc_10510

dec_label_pc_10510:                               ; preds = %dec_label_pc_10508
  %v2_10510 = icmp ugt i8 %v3_104f0, 36
  store i1 %v2_10510, i1* %cpsr_c.global-to-local, align 1
  %v7_10510 = icmp eq i8 %v3_104f0, 37
  store i1 %v7_10510, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10510, label %dec_label_pc_10614, label %dec_label_pc_105fc.preheader

dec_label_pc_105fc.preheader:                     ; preds = %dec_label_pc_10510
  %v3_10514 = add i32 %v0_10044, 28
  %v2_10518 = add i32 %v3_10514, %v3_104dc
  store i32 %v2_10518, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_105fc

dec_label_pc_105e0:                               ; preds = %bb407
  %v2_105e0 = icmp ugt i8 %v3_10604, 35
  store i1 %v2_105e0, i1* %cpsr_c.global-to-local, align 1
  %v7_105e0 = icmp eq i8 %v3_10604, 36
  store i1 %v7_105e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105e0, label %dec_label_pc_10614, label %dec_label_pc_105e8

dec_label_pc_105e8:                               ; preds = %dec_label_pc_105e0
  %v2_105e8 = icmp ugt i8 %v3_10604, 34
  store i1 %v2_105e8, i1* %cpsr_c.global-to-local, align 1
  %v7_105e8 = icmp eq i8 %v3_10604, 35
  store i1 %v7_105e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105e8, label %dec_label_pc_10614, label %dec_label_pc_105f0

dec_label_pc_105f0:                               ; preds = %dec_label_pc_105e8
  %v2_105f0 = icmp ugt i8 %v3_10604, 36
  store i1 %v2_105f0, i1* %cpsr_c.global-to-local, align 1
  %v7_105f0 = icmp eq i8 %v3_10604, 37
  store i1 %v7_105f0, i1* %cpsr_z.global-to-local, align 1
  %v1_105f4 = add i32 %v0_105f4, -1
  store i32 %v1_105f4, i32* %r3.global-to-local, align 4
  br i1 %v7_105f0, label %dec_label_pc_10614, label %dec_label_pc_105fc

dec_label_pc_105fc:                               ; preds = %dec_label_pc_105fc.preheader, %dec_label_pc_105f0
  %v0_105f4 = phi i32 [ %v2_10518, %dec_label_pc_105fc.preheader ], [ %v1_105f4, %dec_label_pc_105f0 ]
  %v0_105fc = phi i32 [ %v1_104e0, %dec_label_pc_105fc.preheader ], [ %v1_105fc, %dec_label_pc_105f0 ]
  %v1_105fc = add i32 %v0_105fc, -1
  store i32 %v1_105fc, i32* %r1.global-to-local, align 4
  %v2_105fc = icmp ne i32 %v0_105fc, 0
  store i1 %v2_105fc, i1* %cpsr_c.global-to-local, align 1
  %v7_105fc = icmp eq i32 %v0_105fc, 1
  store i1 %v7_105fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105fc, label %dec_label_pc_ffc8.backedge.thread528, label %dec_label_pc_10604

dec_label_pc_10604:                               ; preds = %dec_label_pc_105fc
  %v1_10604 = add i32 %v0_105f4, -2
  %v2_10604 = inttoptr i32 %v1_10604 to i8*
  %v3_10604 = load i8, i8* %v2_10604, align 1
  %v4_10604 = zext i8 %v3_10604 to i32
  store i32 %v4_10604, i32* %r2.global-to-local, align 4
  %v2_10608 = icmp ugt i8 %v3_10604, 61
  store i1 %v2_10608, i1* %cpsr_c.global-to-local, align 1
  %v7_10608 = icmp eq i8 %v3_10604, 62
  store i1 %v7_10608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10608, label %dec_label_pc_10614, label %bb407

bb407:                                            ; preds = %dec_label_pc_10604
  %v3_1060c = icmp ugt i8 %v3_10604, 57
  store i1 %v3_1060c, i1* %cpsr_c.global-to-local, align 1
  %v8_1060c = icmp eq i8 %v3_10604, 58
  store i1 %v8_1060c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1060c, label %dec_label_pc_10614, label %dec_label_pc_105e0

dec_label_pc_10614:                               ; preds = %dec_label_pc_10604, %bb407, %dec_label_pc_105f0, %dec_label_pc_105e8, %dec_label_pc_105e0, %dec_label_pc_10510, %dec_label_pc_104ec, %dec_label_pc_10508, %dec_label_pc_10500, %bb406
  %v0_10618 = phi i32 [ %v1_104e0, %dec_label_pc_10510 ], [ %v1_104e0, %dec_label_pc_104ec ], [ %v1_104e0, %dec_label_pc_10508 ], [ %v1_104e0, %dec_label_pc_10500 ], [ %v1_104e0, %bb406 ], [ %v1_105fc, %dec_label_pc_105e0 ], [ %v1_105fc, %dec_label_pc_105e8 ], [ %v1_105fc, %dec_label_pc_105f0 ], [ %v1_105fc, %bb407 ], [ %v1_105fc, %dec_label_pc_10604 ]
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10618 = add i32 %v0_10618, 1
  store i32 %v1_10618, i32* @r7, align 4
  %v1_1061c = call i32 @function_10e48(i32 25)
  store i32 %v2_106fc, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_1062c = call i32 @function_10d84(i32 25, i32* nonnull %stack_var_-60)
  store i32 %v3_1062c, i32* %r0.global-to-local, align 4
  %v3_10630 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_10630, i32* %r2.global-to-local, align 4
  store i32 %v3_1062c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1063c = load i32, i32* @r5, align 4
  %v1_1063c = add i32 %v0_1063c, 4
  %v2_1063c = inttoptr i32 %v1_1063c to i32*
  %v3_1063c = load i32, i32* %v2_1063c, align 4
  store i32 %v3_1063c, i32* %r0.global-to-local, align 4
  %v4_10640 = call i32 @function_12c28(i32 %v3_1063c, i32 %v3_1062c, i32 %v3_10630, i32 16384)
  store i32 %v4_10640, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10650 = load i32, i32* @r5, align 4
  %v1_10650 = add i32 %v0_10650, 4
  %v2_10650 = inttoptr i32 %v1_10650 to i32*
  %v3_10650 = load i32, i32* %v2_10650, align 4
  store i32 %v3_10650, i32* %r0.global-to-local, align 4
  %v4_10654 = call i32 @function_12c28(i32 %v3_10650, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32 2, i32 16384)
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_1065c = call i32 @function_10da8(i32 25)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_10664 = load i32, i32* @r5, align 4
  %v2_10664 = add i32 %v1_10664, 12
  %v3_10664 = inttoptr i32 %v2_10664 to i32*
  store i32 6, i32* %v3_10664, align 4
  br label %dec_label_pc_10164

dec_label_pc_1066c:                               ; preds = %dec_label_pc_10044
  %v1_1066c = add i32 %v0_10044, 24
  %v2_1066c = inttoptr i32 %v1_1066c to i32*
  %v3_1066c = load i32, i32* %v2_1066c, align 4
  store i32 %v3_1066c, i32* %r2.global-to-local, align 4
  %v1_10670 = add i32 %v3_1066c, -1
  store i32 %v1_10670, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10674 = icmp eq i32 %v1_10670, 0
  store i1 %v2_10674, i1* %cpsr_z.global-to-local, align 1
  %tmp408 = icmp slt i32 %v1_10670, 1
  br i1 %tmp408, label %dec_label_pc_106e8, label %dec_label_pc_1067c

dec_label_pc_1067c:                               ; preds = %dec_label_pc_1066c
  %v2_1067c = add i32 %v1_10670, %v0_10044
  store i32 %v2_1067c, i32* %r3.global-to-local, align 4
  %v1_10680 = add i32 %v2_1067c, 28
  %v2_10680 = inttoptr i32 %v1_10680 to i8*
  %v3_10680 = load i8, i8* %v2_10680, align 1
  %v4_10680 = zext i8 %v3_10680 to i32
  store i32 %v4_10680, i32* %r3.global-to-local, align 4
  %v2_10684 = icmp ugt i8 %v3_10680, 61
  store i1 %v2_10684, i1* %cpsr_c.global-to-local, align 1
  %v7_10684 = icmp eq i8 %v3_10680, 62
  store i1 %v7_10684, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10684, label %dec_label_pc_109a0, label %bb409

bb409:                                            ; preds = %dec_label_pc_1067c
  %v3_10688 = icmp ugt i8 %v3_10680, 57
  store i1 %v3_10688, i1* %cpsr_c.global-to-local, align 1
  %v8_10688 = icmp eq i8 %v3_10680, 58
  store i1 %v8_10688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10688, label %dec_label_pc_109a0, label %dec_label_pc_10690

dec_label_pc_10690:                               ; preds = %bb409
  %v2_10690 = icmp ugt i8 %v3_10680, 35
  store i1 %v2_10690, i1* %cpsr_c.global-to-local, align 1
  %v7_10690 = icmp eq i8 %v3_10680, 36
  store i1 %v7_10690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10690, label %dec_label_pc_109a0, label %dec_label_pc_10698

dec_label_pc_10698:                               ; preds = %dec_label_pc_10690
  %v2_10698 = icmp ugt i8 %v3_10680, 34
  store i1 %v2_10698, i1* %cpsr_c.global-to-local, align 1
  %v7_10698 = icmp eq i8 %v3_10680, 35
  store i1 %v7_10698, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10698, label %dec_label_pc_109a0, label %dec_label_pc_106a0

dec_label_pc_106a0:                               ; preds = %dec_label_pc_10698
  %v2_106a0 = icmp ugt i8 %v3_10680, 36
  store i1 %v2_106a0, i1* %cpsr_c.global-to-local, align 1
  %v7_106a0 = icmp eq i8 %v3_10680, 37
  store i1 %v7_106a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106a0, label %dec_label_pc_109a0, label %dec_label_pc_106e0.preheader

dec_label_pc_106e0.preheader:                     ; preds = %dec_label_pc_106a0
  %v3_106a4 = add i32 %v0_10044, 28
  %v2_106a8 = add i32 %v3_106a4, %v3_1066c
  store i32 %v2_106a8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_106e0

dec_label_pc_106b4:                               ; preds = %dec_label_pc_106e0
  %v1_106b4 = add i32 %v0_106d8, -2
  %v2_106b4 = inttoptr i32 %v1_106b4 to i8*
  %v3_106b4 = load i8, i8* %v2_106b4, align 1
  %v4_106b4 = zext i8 %v3_106b4 to i32
  store i32 %v4_106b4, i32* %r2.global-to-local, align 4
  %v2_106b8 = icmp ugt i8 %v3_106b4, 61
  store i1 %v2_106b8, i1* %cpsr_c.global-to-local, align 1
  %v7_106b8 = icmp eq i8 %v3_106b4, 62
  store i1 %v7_106b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106b8, label %dec_label_pc_109a0, label %bb410

bb410:                                            ; preds = %dec_label_pc_106b4
  %v3_106bc = icmp ugt i8 %v3_106b4, 57
  store i1 %v3_106bc, i1* %cpsr_c.global-to-local, align 1
  %v8_106bc = icmp eq i8 %v3_106b4, 58
  store i1 %v8_106bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_106bc, label %dec_label_pc_109a0, label %dec_label_pc_106c4

dec_label_pc_106c4:                               ; preds = %bb410
  %v2_106c4 = icmp ugt i8 %v3_106b4, 35
  store i1 %v2_106c4, i1* %cpsr_c.global-to-local, align 1
  %v7_106c4 = icmp eq i8 %v3_106b4, 36
  store i1 %v7_106c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106c4, label %dec_label_pc_109a0, label %dec_label_pc_106cc

dec_label_pc_106cc:                               ; preds = %dec_label_pc_106c4
  %v2_106cc = icmp ugt i8 %v3_106b4, 34
  store i1 %v2_106cc, i1* %cpsr_c.global-to-local, align 1
  %v7_106cc = icmp eq i8 %v3_106b4, 35
  store i1 %v7_106cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106cc, label %dec_label_pc_109a0, label %dec_label_pc_106d4

dec_label_pc_106d4:                               ; preds = %dec_label_pc_106cc
  %v2_106d4 = icmp ugt i8 %v3_106b4, 36
  store i1 %v2_106d4, i1* %cpsr_c.global-to-local, align 1
  %v7_106d4 = icmp eq i8 %v3_106b4, 37
  store i1 %v7_106d4, i1* %cpsr_z.global-to-local, align 1
  %v1_106d8 = add i32 %v0_106d8, -1
  store i32 %v1_106d8, i32* %r3.global-to-local, align 4
  br i1 %v7_106d4, label %dec_label_pc_109a0, label %dec_label_pc_106e0

dec_label_pc_106e0:                               ; preds = %dec_label_pc_106e0.preheader, %dec_label_pc_106d4
  %v0_106d8 = phi i32 [ %v2_106a8, %dec_label_pc_106e0.preheader ], [ %v1_106d8, %dec_label_pc_106d4 ]
  %v0_106e0 = phi i32 [ %v1_10670, %dec_label_pc_106e0.preheader ], [ %v1_106e0, %dec_label_pc_106d4 ]
  %v1_106e0 = add i32 %v0_106e0, -1
  store i32 %v1_106e0, i32* %r0.global-to-local, align 4
  %v2_106e0 = icmp ne i32 %v0_106e0, 0
  store i1 %v2_106e0, i1* %cpsr_c.global-to-local, align 1
  %v7_106e0 = icmp eq i32 %v0_106e0, 1
  store i1 %v7_106e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106e0, label %dec_label_pc_106e8, label %dec_label_pc_106b4

dec_label_pc_106e8:                               ; preds = %dec_label_pc_106e0, %dec_label_pc_1066c
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_106ec = call i32 @function_10e48(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_106f4 = call i32 @function_10e48(i32 33)
  store i32 %v2_106fc, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r0.global-to-local, align 4
  %v3_10704 = call i32 @function_10d84(i32 32, i32* nonnull %stack_var_-60)
  store i32 %v3_10704, i32* @r4, align 4
  store i32 %v2_10710, i32* %r1.global-to-local, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v3_10718 = call i32 @function_10d84(i32 33, i32* %v2_10718)
  %v3_1071c = load i32, i32* %stack_var_-60, align 4
  %sext = mul i32 %v3_10718, 16777216
  %v1_10720 = sdiv i32 %sext, 16777216
  store i32 %v1_10720, i32* @r6, align 4
  %v0_10724 = load i32, i32* @r4, align 4
  store i32 %v0_10724, i32* %r2.global-to-local, align 4
  %v1_10728 = add i32 %v3_1071c, -1
  store i32 %v1_10728, i32* %r3.global-to-local, align 4
  %v0_1072c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_1072c, i32* %r0.global-to-local, align 4
  %v0_10730 = load i32, i32* @r5, align 4
  %v1_10730 = add i32 %v0_10730, 24
  %v2_10730 = inttoptr i32 %v1_10730 to i32*
  %v3_10730 = load i32, i32* %v2_10730, align 4
  store i32 %v3_10730, i32* %r1.global-to-local, align 4
  %v4_10734 = call i32 @function_11924(i32 %v0_1072c, i32 %v3_10730, i32 %v0_10724, i32 %v1_10728)
  store i32 %v4_10734, i32* %r0.global-to-local, align 4
  %v2_10738 = icmp eq i32 %v4_10734, -1
  store i1 %v2_10738, i1* %cpsr_c.global-to-local, align 1
  %v7_10738 = icmp eq i32 %v4_10734, -1
  store i1 %v7_10738, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10738, label %dec_label_pc_10adc, label %dec_label_pc_10748

dec_label_pc_10748:                               ; preds = %dec_label_pc_10adc, %dec_label_pc_106e8
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_1074c = call i32 @function_10da8(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_10754 = call i32 @function_10da8(i32 33)
  store i32 %v1_10754, i32* %r0.global-to-local, align 4
  %v0_10758 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10758 = icmp eq i32 %v0_10758, 0
  store i1 %v2_10758, i1* %cpsr_z.global-to-local, align 1
  %tmp411 = icmp slt i32 %v0_10758, 1
  br i1 %tmp411, label %dec_label_pc_1084c, label %dec_label_pc_10748.dec_label_pc_109a4_crit_edge

dec_label_pc_10748.dec_label_pc_109a4_crit_edge:  ; preds = %dec_label_pc_10748
  %v0_109a4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_109a4

dec_label_pc_10764:                               ; preds = %dec_label_pc_10044
  %v1_10764 = add i32 %v0_10044, 24
  %v2_10764 = inttoptr i32 %v1_10764 to i32*
  %v3_10764 = load i32, i32* %v2_10764, align 4
  store i32 %v3_10764, i32* %r2.global-to-local, align 4
  %v1_10768 = add i32 %v3_10764, -1
  store i32 %v1_10768, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1076c = icmp eq i32 %v1_10768, 0
  store i1 %v2_1076c, i1* %cpsr_z.global-to-local, align 1
  %tmp412 = icmp slt i32 %v1_10768, 1
  br i1 %tmp412, label %dec_label_pc_107d0, label %dec_label_pc_10774

dec_label_pc_10774:                               ; preds = %dec_label_pc_10764
  %v2_10774 = add i32 %v1_10768, %v0_10044
  store i32 %v2_10774, i32* %r3.global-to-local, align 4
  %v1_10778 = add i32 %v2_10774, 28
  %v2_10778 = inttoptr i32 %v1_10778 to i8*
  %v3_10778 = load i8, i8* %v2_10778, align 1
  %v4_10778 = zext i8 %v3_10778 to i32
  store i32 %v4_10778, i32* %r3.global-to-local, align 4
  %v2_1077c = icmp ugt i8 %v3_10778, 61
  store i1 %v2_1077c, i1* %cpsr_c.global-to-local, align 1
  %v7_1077c = icmp eq i8 %v3_10778, 62
  store i1 %v7_1077c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1077c, label %dec_label_pc_10998, label %bb413

bb413:                                            ; preds = %dec_label_pc_10774
  %v3_10780 = icmp ugt i8 %v3_10778, 57
  store i1 %v3_10780, i1* %cpsr_c.global-to-local, align 1
  %v8_10780 = icmp eq i8 %v3_10778, 58
  store i1 %v8_10780, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10780, label %dec_label_pc_10998, label %dec_label_pc_10788

dec_label_pc_10788:                               ; preds = %bb413
  %v2_10788 = icmp ugt i8 %v3_10778, 35
  store i1 %v2_10788, i1* %cpsr_c.global-to-local, align 1
  %v7_10788 = icmp eq i8 %v3_10778, 36
  store i1 %v7_10788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10788, label %dec_label_pc_10998, label %dec_label_pc_10790

dec_label_pc_10790:                               ; preds = %dec_label_pc_10788
  %v2_10790 = icmp ugt i8 %v3_10778, 34
  store i1 %v2_10790, i1* %cpsr_c.global-to-local, align 1
  %v7_10790 = icmp eq i8 %v3_10778, 35
  store i1 %v7_10790, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10790, label %dec_label_pc_10998, label %dec_label_pc_107c8.preheader

dec_label_pc_107c8.preheader:                     ; preds = %dec_label_pc_10790
  %v3_10794 = add i32 %v0_10044, 28
  %v2_10798 = add i32 %v3_10794, %v3_10764
  store i32 %v2_10798, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_107c8

dec_label_pc_107a4:                               ; preds = %dec_label_pc_107c8
  %v1_107a4 = add i32 %v0_107c0, -2
  %v2_107a4 = inttoptr i32 %v1_107a4 to i8*
  %v3_107a4 = load i8, i8* %v2_107a4, align 1
  %v4_107a4 = zext i8 %v3_107a4 to i32
  store i32 %v4_107a4, i32* %r2.global-to-local, align 4
  %v2_107a8 = icmp ugt i8 %v3_107a4, 61
  store i1 %v2_107a8, i1* %cpsr_c.global-to-local, align 1
  %v7_107a8 = icmp eq i8 %v3_107a4, 62
  store i1 %v7_107a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107a8, label %dec_label_pc_10998, label %bb414

bb414:                                            ; preds = %dec_label_pc_107a4
  %v3_107ac = icmp ugt i8 %v3_107a4, 57
  store i1 %v3_107ac, i1* %cpsr_c.global-to-local, align 1
  %v8_107ac = icmp eq i8 %v3_107a4, 58
  store i1 %v8_107ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_107ac, label %dec_label_pc_10998, label %dec_label_pc_107b4

dec_label_pc_107b4:                               ; preds = %bb414
  %v2_107b4 = icmp ugt i8 %v3_107a4, 35
  store i1 %v2_107b4, i1* %cpsr_c.global-to-local, align 1
  %v7_107b4 = icmp eq i8 %v3_107a4, 36
  store i1 %v7_107b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107b4, label %dec_label_pc_10998, label %dec_label_pc_107bc

dec_label_pc_107bc:                               ; preds = %dec_label_pc_107b4
  %v2_107bc = icmp ugt i8 %v3_107a4, 34
  store i1 %v2_107bc, i1* %cpsr_c.global-to-local, align 1
  %v7_107bc = icmp eq i8 %v3_107a4, 35
  store i1 %v7_107bc, i1* %cpsr_z.global-to-local, align 1
  %v1_107c0 = add i32 %v0_107c0, -1
  store i32 %v1_107c0, i32* %r3.global-to-local, align 4
  br i1 %v7_107bc, label %dec_label_pc_10998, label %dec_label_pc_107c8

dec_label_pc_107c8:                               ; preds = %dec_label_pc_107c8.preheader, %dec_label_pc_107bc
  %v0_107c0 = phi i32 [ %v2_10798, %dec_label_pc_107c8.preheader ], [ %v1_107c0, %dec_label_pc_107bc ]
  %v0_107c8 = phi i32 [ %v1_10768, %dec_label_pc_107c8.preheader ], [ %v1_107c8, %dec_label_pc_107bc ]
  %v1_107c8 = add i32 %v0_107c8, -1
  store i32 %v1_107c8, i32* %r0.global-to-local, align 4
  %v2_107c8 = icmp ne i32 %v0_107c8, 0
  store i1 %v2_107c8, i1* %cpsr_c.global-to-local, align 1
  %v7_107c8 = icmp eq i32 %v0_107c8, 1
  store i1 %v7_107c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107c8, label %dec_label_pc_107d0, label %dec_label_pc_107a4

dec_label_pc_107d0:                               ; preds = %dec_label_pc_107c8, %dec_label_pc_10764
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_107d4 = call i32 @function_10e48(i32 31)
  store i32 %v2_10710, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v3_107e4 = call i32 @function_10d84(i32 31, i32* %v2_10718)
  %v3_107e8 = load i8, i8* %stack_var_-56, align 1
  %v4_107e8 = sext i8 %v3_107e8 to i32
  store i32 %v3_107e4, i32* %r2.global-to-local, align 4
  %v1_107f0 = add nsw i32 %v4_107e8, -1
  store i32 %v1_107f0, i32* %r3.global-to-local, align 4
  %v0_107f4 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_107f4, i32* %r0.global-to-local, align 4
  %v0_107f8 = load i32, i32* @r5, align 4
  %v1_107f8 = add i32 %v0_107f8, 24
  %v2_107f8 = inttoptr i32 %v1_107f8 to i32*
  %v3_107f8 = load i32, i32* %v2_107f8, align 4
  store i32 %v3_107f8, i32* %r1.global-to-local, align 4
  %v4_107fc = call i32 @function_11924(i32 %v0_107f4, i32 %v3_107f8, i32 %v3_107e4, i32 %v1_107f0)
  store i32 %v4_107fc, i32* %r0.global-to-local, align 4
  %v1_10800 = add i32 %v4_107fc, 1
  store i32 %v1_10800, i32* @r7, align 4
  %v2_10800 = icmp eq i32 %v4_107fc, -1
  store i1 %v2_10800, i1* %cpsr_c.global-to-local, align 1
  %v7_10800 = icmp eq i32 %v1_10800, 0
  store i1 %v7_10800, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10800, label %thread-pre-split103, label %bb415

bb415:                                            ; preds = %dec_label_pc_107d0
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split103

thread-pre-split103:                              ; preds = %dec_label_pc_107d0, %bb415
  %v0_10808 = phi i1 [ false, %bb415 ], [ true, %dec_label_pc_107d0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_10808, i1* %cpsr_z.global-to-local, align 1
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_10c0c = call i32 @function_10da8(i32 31)
  store i32 %v1_10c0c, i32* %r0.global-to-local, align 4
  %v0_10c10 = load i32, i32* @r5, align 4
  br i1 %v0_10808, label %dec_label_pc_10c08, label %dec_label_pc_10818

dec_label_pc_10818:                               ; preds = %thread-pre-split103, %dec_label_pc_10998
  %v0_10818 = phi i32 [ %v0_10044, %dec_label_pc_10998 ], [ %v0_10c10, %thread-pre-split103 ]
  %v1_10818 = inttoptr i32 %v0_10818 to i32*
  %v2_10818 = load i32, i32* %v1_10818, align 4
  store i32 %v2_10818, i32* %r3.global-to-local, align 4
  %v1_1081c = add i32 %v0_10818, 4
  %v2_1081c = inttoptr i32 %v1_1081c to i32*
  %v3_1081c = load i32, i32* %v2_1081c, align 4
  store i32 %v3_1081c, i32* %r0.global-to-local, align 4
  %v1_10820 = add i32 %v2_10818, 13
  %v2_10820 = inttoptr i32 %v1_10820 to i8*
  %v3_10820 = load i8, i8* %v2_10820, align 1
  %v4_10820 = zext i8 %v3_10820 to i32
  store i32 %v4_10820, i32* %r2.global-to-local, align 4
  %v1_10824 = add i32 %v2_10818, 4
  %v2_10824 = inttoptr i32 %v1_10824 to i32*
  %v3_10824 = load i32, i32* %v2_10824, align 4
  store i32 %v3_10824, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_1082c = call i32 @function_12c28(i32 %v3_1081c, i32 %v3_10824, i32 %v4_10820, i32 16384)
  store i32 %v4_1082c, i32* %r0.global-to-local, align 4
  %v0_10830 = load i32, i32* @r5, align 4
  %v1_10830 = add i32 %v0_10830, 4
  %v2_10830 = inttoptr i32 %v1_10830 to i32*
  %v3_10830 = load i32, i32* %v2_10830, align 4
  store i32 %v3_10830, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_10840 = call i32 @function_12c28(i32 %v3_10830, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_10848 = load i32, i32* @r5, align 4
  %v2_10848 = add i32 %v1_10848, 12
  %v3_10848 = inttoptr i32 %v2_10848 to i32*
  store i32 5, i32* %v3_10848, align 4
  br label %dec_label_pc_1084c

dec_label_pc_1084c:                               ; preds = %dec_label_pc_10918, %bb419, %dec_label_pc_10748, %dec_label_pc_10a28, %dec_label_pc_109a4, %dec_label_pc_10a6c, %dec_label_pc_10818
  %v0_1084c = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1084c = icmp eq i32 %v0_1084c, 0
  store i1 %v2_1084c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1084c, label %dec_label_pc_ffc4.loopexit, label %dec_label_pc_10164

dec_label_pc_10858:                               ; preds = %dec_label_pc_10044
  %v1_10858 = add i32 %v0_10044, 24
  %v2_10858 = inttoptr i32 %v1_10858 to i32*
  %v3_10858 = load i32, i32* %v2_10858, align 4
  store i32 %v3_10858, i32* %r2.global-to-local, align 4
  %v0_1085c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_1085c, i32* @r4, align 4
  store i32 0, i32* @r7, align 4
  %v3_10864146 = icmp eq i32 %v3_10858, 0
  store i1 %v3_10864146, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10864146, i1* %cpsr_z.global-to-local, align 1
  %v6_10868153 = icmp sgt i32 %v3_10858, 0
  br i1 %v6_10868153, label %dec_label_pc_1086c.preheader, label %dec_label_pc_10918

dec_label_pc_10864.loopexit:                      ; preds = %dec_label_pc_10888
  %v2_10890 = add i32 %v1_10890, 2
  store i32 %v2_10890, i32* @r4, align 4
  %v2_10894 = add i32 %v1_10894, 2
  store i32 %v2_10894, i32* @r7, align 4
  %v3_10864 = icmp uge i32 %v2_10894, %v1_10864
  store i1 %v3_10864, i1* %cpsr_c.global-to-local, align 1
  %v9_10864 = icmp eq i32 %v2_10894, %v1_10864
  store i1 %v9_10864, i1* %cpsr_z.global-to-local, align 1
  %v6_10868 = icmp slt i32 %v2_10894, %v1_10864
  br i1 %v6_10868, label %dec_label_pc_1086c.preheader, label %dec_label_pc_10918

dec_label_pc_1086c.preheader:                     ; preds = %dec_label_pc_10858, %dec_label_pc_10864.loopexit
  %v6_10920239 = phi i32 [ %v6_10920240, %dec_label_pc_10864.loopexit ], [ %v0_10044, %dec_label_pc_10858 ]
  %v1_10894222 = phi i32 [ %v2_10894, %dec_label_pc_10864.loopexit ], [ 0, %dec_label_pc_10858 ]
  %v1_10878220 = phi i32 [ %v1_10864, %dec_label_pc_10864.loopexit ], [ %v3_10858, %dec_label_pc_10858 ]
  %v0_1086c218 = phi i32 [ %v2_10890, %dec_label_pc_10864.loopexit ], [ %v0_1085c, %dec_label_pc_10858 ]
  br label %dec_label_pc_1086c

dec_label_pc_1086c:                               ; preds = %dec_label_pc_1086c.preheader, %dec_label_pc_108fc
  %v6_10920240 = phi i32 [ %v6_10920239, %dec_label_pc_1086c.preheader ], [ %v0_10904, %dec_label_pc_108fc ]
  %v1_10894 = phi i32 [ %v1_10894222, %dec_label_pc_1086c.preheader ], [ %v1_10908, %dec_label_pc_108fc ]
  %v1_10864 = phi i32 [ %v1_10878220, %dec_label_pc_1086c.preheader ], [ %v3_10904, %dec_label_pc_108fc ]
  %v1_10890 = phi i32 [ %v0_1086c218, %dec_label_pc_1086c.preheader ], [ %v1_10910, %dec_label_pc_108fc ]
  %v1_1086c = inttoptr i32 %v1_10890 to i8*
  %v2_1086c = load i8, i8* %v1_1086c, align 1
  %v3_1086c = zext i8 %v2_1086c to i32
  store i32 %v3_1086c, i32* @r3, align 4
  %v2_10870 = icmp eq i8 %v2_1086c, -1
  store i1 %v2_10870, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_10870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10870, label %dec_label_pc_10878, label %dec_label_pc_10918

dec_label_pc_10878:                               ; preds = %dec_label_pc_1086c
  %v0_10878 = load i32, i32* %sl.global-to-local, align 4
  %v2_10878 = add i32 %v0_10878, %v1_10864
  store i32 %v2_10878, i32* %r1.global-to-local, align 4
  %v1_1087c = add i32 %v1_10890, 1
  store i32 %v1_1087c, i32* @r6, align 4
  %v3_10880 = icmp uge i32 %v2_10878, %v1_1087c
  store i1 %v3_10880, i1* %cpsr_c.global-to-local, align 1
  %v9_10880 = icmp eq i32 %v2_10878, %v1_1087c
  store i1 %v9_10880, i1* %cpsr_z.global-to-local, align 1
  %v2_10884 = xor i1 %v3_10880, true
  %v3_10884 = or i1 %v9_10880, %v2_10884
  br i1 %v3_10884, label %dec_label_pc_10918, label %dec_label_pc_10888

dec_label_pc_10888:                               ; preds = %dec_label_pc_10878
  %v2_10888 = inttoptr i32 %v1_1087c to i8*
  %v3_10888 = load i8, i8* %v2_10888, align 1
  %v4_10888 = zext i8 %v3_10888 to i32
  store i32 %v4_10888, i32* @r3, align 4
  %v2_1088c = icmp eq i8 %v3_10888, -1
  store i1 %v2_1088c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_1088c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1088c, label %dec_label_pc_10864.loopexit, label %dec_label_pc_1089c

dec_label_pc_1089c:                               ; preds = %dec_label_pc_10888
  %v2_1089c = icmp ugt i8 %v3_10888, -4
  store i1 %v2_1089c, i1* %cpsr_c.global-to-local, align 1
  %v7_1089c = icmp eq i8 %v3_10888, -3
  store i1 %v7_1089c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1089c, label %dec_label_pc_10928, label %dec_label_pc_108a4

dec_label_pc_108a4:                               ; preds = %dec_label_pc_1089c
  %v1_108a4 = add i32 %v1_10890, 2
  store i32 %v1_108a4, i32* @r3, align 4
  %v3_108a8 = icmp uge i32 %v2_10878, %v1_108a4
  store i1 %v3_108a8, i1* %cpsr_c.global-to-local, align 1
  %v9_108a8 = icmp eq i32 %v2_10878, %v1_108a4
  store i1 %v9_108a8, i1* %cpsr_z.global-to-local, align 1
  %v2_108ac = xor i1 %v3_108a8, true
  %v3_108ac = or i1 %v9_108a8, %v2_108ac
  br i1 %v3_108ac, label %dec_label_pc_10918, label %dec_label_pc_108b0

dec_label_pc_108b0:                               ; preds = %dec_label_pc_10988, %bb420, %.thread115, %dec_label_pc_108a4
  %v0_108b0 = load i32, i32* @r6, align 4
  %v1_108b0 = inttoptr i32 %v0_108b0 to i8*
  %v2_108b0 = load i8, i8* %v1_108b0, align 1
  %v3_108b0 = zext i8 %v2_108b0 to i32
  store i32 %v3_108b0, i32* %r3.global-to-local, align 4
  %v2_108b4 = icmp ugt i8 %v2_108b0, -4
  store i1 %v2_108b4, i1* %cpsr_c.global-to-local, align 1
  %v7_108b4 = icmp eq i8 %v2_108b0, -3
  store i1 %v7_108b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108b4, label %.thread107, label %dec_label_pc_108c4

.thread107:                                       ; preds = %dec_label_pc_108b0
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_108b0, align 1
  %v0_108c0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_108c0.pr.pr, label %.thread110, label %.thread107.dec_label_pc_108c4thread-pre-split_crit_edge

.thread107.dec_label_pc_108c4thread-pre-split_crit_edge: ; preds = %.thread107
  %v0_108c4.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_108c4

dec_label_pc_108c4:                               ; preds = %dec_label_pc_108b0, %.thread107.dec_label_pc_108c4thread-pre-split_crit_edge
  %v0_108c4.pr = phi i32 [ %v0_108c4.pr.pre, %.thread107.dec_label_pc_108c4thread-pre-split_crit_edge ], [ %v3_108b0, %dec_label_pc_108b0 ]
  %v2_108c4 = icmp ugt i32 %v0_108c4.pr, 250
  store i1 %v2_108c4, i1* %cpsr_c.global-to-local, align 1
  %v7_108c4 = icmp eq i32 %v0_108c4.pr, 251
  store i1 %v7_108c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108c4, label %bb416, label %.thread110

bb416:                                            ; preds = %dec_label_pc_108c4
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_108cc = load i32, i32* @r6, align 4
  %v4_108cc = inttoptr i32 %v3_108cc to i8*
  store i8 -3, i8* %v4_108cc, align 1
  br label %.thread110

.thread110:                                       ; preds = %dec_label_pc_108c4, %.thread107, %bb416
  %v0_108d0 = load i32, i32* @r4, align 4
  %v1_108d0 = add i32 %v0_108d0, 2
  %v2_108d0 = inttoptr i32 %v1_108d0 to i8*
  %v3_108d0 = load i8, i8* %v2_108d0, align 1
  %v4_108d0 = zext i8 %v3_108d0 to i32
  store i32 %v4_108d0, i32* %r3.global-to-local, align 4
  %v2_108d4 = icmp ugt i8 %v3_108d0, -4
  store i1 %v2_108d4, i1* %cpsr_c.global-to-local, align 1
  %v7_108d4 = icmp eq i8 %v3_108d0, -3
  store i1 %v7_108d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108d4, label %.thread111, label %dec_label_pc_108e4

.thread111:                                       ; preds = %.thread110
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_108d0, align 1
  %v0_108e0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_108e0.pr.pr, label %.thread114, label %.thread111.dec_label_pc_108e4thread-pre-split_crit_edge

.thread111.dec_label_pc_108e4thread-pre-split_crit_edge: ; preds = %.thread111
  %v0_108e4.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_108e4

dec_label_pc_108e4:                               ; preds = %.thread110, %.thread111.dec_label_pc_108e4thread-pre-split_crit_edge
  %v0_108e4.pr = phi i32 [ %v0_108e4.pr.pre, %.thread111.dec_label_pc_108e4thread-pre-split_crit_edge ], [ %v4_108d0, %.thread110 ]
  %v2_108e4 = icmp ugt i32 %v0_108e4.pr, 250
  store i1 %v2_108e4, i1* %cpsr_c.global-to-local, align 1
  %v7_108e4 = icmp eq i32 %v0_108e4.pr, 251
  store i1 %v7_108e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108e4, label %bb417, label %.thread114

bb417:                                            ; preds = %dec_label_pc_108e4
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_108ec = load i32, i32* @r4, align 4
  %v4_108ec = add i32 %v3_108ec, 2
  %v5_108ec = inttoptr i32 %v4_108ec to i8*
  store i8 -3, i8* %v5_108ec, align 1
  br label %.thread114

.thread114:                                       ; preds = %dec_label_pc_108e4, %.thread111, %bb417
  %v0_108f0 = load i32, i32* @r5, align 4
  %v1_108f0 = add i32 %v0_108f0, 4
  %v2_108f0 = inttoptr i32 %v1_108f0 to i32*
  %v3_108f0 = load i32, i32* %v2_108f0, align 4
  store i32 %v3_108f0, i32* %r0.global-to-local, align 4
  %v0_108f4 = load i32, i32* @r4, align 4
  br label %dec_label_pc_108fc

dec_label_pc_108fc:                               ; preds = %dec_label_pc_10a84, %.thread114
  %v0_10900 = phi i32 [ %v3_10a9c, %dec_label_pc_10a84 ], [ %v3_108f0, %.thread114 ]
  %storemerge4 = phi i32 [ %v2_10948, %dec_label_pc_10a84 ], [ %v0_108f4, %.thread114 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_10a84 ], [ 3, %.thread114 ]
  store i32 %storemerge4, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_10900 = call i32 @function_12c28(i32 %v0_10900, i32 %storemerge4, i32 %storemerge, i32 16384)
  store i32 %v4_10900, i32* %r0.global-to-local, align 4
  %v0_10904 = load i32, i32* @r5, align 4
  %v1_10904 = add i32 %v0_10904, 24
  %v2_10904 = inttoptr i32 %v1_10904 to i32*
  %v3_10904 = load i32, i32* %v2_10904, align 4
  store i32 %v3_10904, i32* %r2.global-to-local, align 4
  %v0_10908 = load i32, i32* @r7, align 4
  %v1_10908 = add i32 %v0_10908, 3
  store i32 %v1_10908, i32* @r7, align 4
  %v3_1090c = icmp uge i32 %v1_10908, %v3_10904
  store i1 %v3_1090c, i1* %cpsr_c.global-to-local, align 1
  %v9_1090c = icmp eq i32 %v1_10908, %v3_10904
  store i1 %v9_1090c, i1* %cpsr_z.global-to-local, align 1
  %v0_10910 = load i32, i32* @r4, align 4
  %v1_10910 = add i32 %v0_10910, 3
  store i32 %v1_10910, i32* @r4, align 4
  %v5_10914 = icmp slt i32 %v1_10908, %v3_10904
  br i1 %v5_10914, label %dec_label_pc_1086c, label %dec_label_pc_10918

dec_label_pc_10918:                               ; preds = %dec_label_pc_10864.loopexit, %dec_label_pc_1086c, %dec_label_pc_108fc, %dec_label_pc_108a4, %dec_label_pc_10878, %dec_label_pc_10858, %dec_label_pc_10928.dec_label_pc_10918.loopexit_crit_edge
  %v6_10920 = phi i32 [ %v0_10954, %dec_label_pc_10928.dec_label_pc_10918.loopexit_crit_edge ], [ %v0_10044, %dec_label_pc_10858 ], [ %v6_10920240, %dec_label_pc_1086c ], [ %v0_10904, %dec_label_pc_108fc ], [ %v6_10920240, %dec_label_pc_108a4 ], [ %v6_10920240, %dec_label_pc_10878 ], [ %v6_10920240, %dec_label_pc_10864.loopexit ]
  %v0_10918 = phi i32 [ %v0_10918.pre.pre, %dec_label_pc_10928.dec_label_pc_10918.loopexit_crit_edge ], [ 0, %dec_label_pc_10858 ], [ %v1_10894, %dec_label_pc_1086c ], [ %v1_10908, %dec_label_pc_108fc ], [ %v1_10894, %dec_label_pc_108a4 ], [ %v1_10894, %dec_label_pc_10878 ], [ %v2_10894, %dec_label_pc_10864.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10918 = icmp eq i32 %v0_10918, 0
  store i1 %v2_10918, i1* %cpsr_z.global-to-local, align 1
  %tmp418 = icmp slt i32 %v0_10918, 1
  br i1 %tmp418, label %dec_label_pc_1084c, label %bb419

bb419:                                            ; preds = %dec_label_pc_10918
  store i32 3, i32* %r0.global-to-local, align 4
  %v7_10920 = add i32 %v6_10920, 12
  %v8_10920 = inttoptr i32 %v7_10920 to i32*
  store i32 3, i32* %v8_10920, align 4
  br label %dec_label_pc_1084c

dec_label_pc_10928:                               ; preds = %dec_label_pc_1089c
  store i32 %v2_1092c, i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1780a.243 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_1092c, i32* @r0, align 4
  %v0_1093c = call i32 @function_12a00()
  store i32 9, i32* @r2, align 4
  store i32 %v2_10948, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_17801.245 to i32), i32* @r1, align 4
  %v0_10950 = call i32 @function_12a00()
  store i32 %v0_10950, i32* %r0.global-to-local, align 4
  %v0_10954 = load i32, i32* @r5, align 4
  %v1_10954 = add i32 %v0_10954, 24
  %v2_10954 = inttoptr i32 %v1_10954 to i32*
  %v3_10954 = load i32, i32* %v2_10954, align 4
  %v0_10958 = load i32, i32* @r4, align 4
  %v1_10958 = add i32 %v0_10958, 2
  store i32 %v1_10958, i32* %r2.global-to-local, align 4
  %v0_1095c = load i32, i32* %sl.global-to-local, align 4
  %v2_1095c = add i32 %v0_1095c, %v3_10954
  store i32 %v2_1095c, i32* @r3, align 4
  %v3_10960 = icmp uge i32 %v2_1095c, %v1_10958
  store i1 %v3_10960, i1* %cpsr_c.global-to-local, align 1
  %v9_10960 = icmp eq i32 %v2_1095c, %v1_10958
  store i1 %v9_10960, i1* %cpsr_z.global-to-local, align 1
  %v2_10964 = xor i1 %v3_10960, true
  %v3_10964 = or i1 %v9_10960, %v2_10964
  br i1 %v3_10964, label %dec_label_pc_10928.dec_label_pc_10918.loopexit_crit_edge, label %dec_label_pc_10968

dec_label_pc_10928.dec_label_pc_10918.loopexit_crit_edge: ; preds = %dec_label_pc_10928
  %v0_10918.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10918

dec_label_pc_10968:                               ; preds = %dec_label_pc_10928
  %v2_10968 = inttoptr i32 %v1_10958 to i8*
  %v3_10968 = load i8, i8* %v2_10968, align 1
  %v4_10968 = zext i8 %v3_10968 to i32
  store i32 %v4_10968, i32* %r3.global-to-local, align 4
  %v2_1096c = icmp ugt i8 %v3_10968, 30
  store i1 %v2_1096c, i1* %cpsr_c.global-to-local, align 1
  %v7_1096c = icmp eq i8 %v3_10968, 31
  store i1 %v7_1096c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1096c, label %dec_label_pc_10a84, label %dec_label_pc_10974

dec_label_pc_10974:                               ; preds = %dec_label_pc_10968
  %v1_10974 = inttoptr i32 %v0_10958 to i8*
  %v2_10974 = load i8, i8* %v1_10974, align 1
  %v3_10974 = zext i8 %v2_10974 to i32
  store i32 %v3_10974, i32* %r3.global-to-local, align 4
  %v2_10978 = icmp ugt i8 %v2_10974, -4
  store i1 %v2_10978, i1* %cpsr_c.global-to-local, align 1
  %v7_10978 = icmp eq i8 %v2_10974, -3
  store i1 %v7_10978, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10978, label %.thread115, label %dec_label_pc_10988

.thread115:                                       ; preds = %dec_label_pc_10974
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_10974, align 1
  %v0_10984.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10984.pr.pr, label %dec_label_pc_108b0, label %.thread115.dec_label_pc_10988thread-pre-split_crit_edge

.thread115.dec_label_pc_10988thread-pre-split_crit_edge: ; preds = %.thread115
  %v0_10988.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10988

dec_label_pc_10988:                               ; preds = %dec_label_pc_10974, %.thread115.dec_label_pc_10988thread-pre-split_crit_edge
  %v0_10988.pr = phi i32 [ %v0_10988.pr.pre, %.thread115.dec_label_pc_10988thread-pre-split_crit_edge ], [ %v3_10974, %dec_label_pc_10974 ]
  %v2_10988 = icmp ugt i32 %v0_10988.pr, 250
  store i1 %v2_10988, i1* %cpsr_c.global-to-local, align 1
  %v7_10988 = icmp eq i32 %v0_10988.pr, 251
  store i1 %v7_10988, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10988, label %bb420, label %dec_label_pc_108b0

bb420:                                            ; preds = %dec_label_pc_10988
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_10990 = load i32, i32* @r4, align 4
  %v4_10990 = inttoptr i32 %v3_10990 to i8*
  store i8 -3, i8* %v4_10990, align 1
  br label %dec_label_pc_108b0

dec_label_pc_10998:                               ; preds = %dec_label_pc_107a4, %dec_label_pc_107bc, %dec_label_pc_107b4, %bb414, %dec_label_pc_10790, %dec_label_pc_10774, %dec_label_pc_10788, %bb413
  %v0_10998 = phi i32 [ %v1_10768, %dec_label_pc_10790 ], [ %v1_10768, %dec_label_pc_10774 ], [ %v1_10768, %dec_label_pc_10788 ], [ %v1_10768, %bb413 ], [ %v1_107c8, %bb414 ], [ %v1_107c8, %dec_label_pc_107b4 ], [ %v1_107c8, %dec_label_pc_107bc ], [ %v1_107c8, %dec_label_pc_107a4 ]
  %v1_10998 = add i32 %v0_10998, 1
  store i32 %v1_10998, i32* @r7, align 4
  br label %dec_label_pc_10818

dec_label_pc_109a0:                               ; preds = %dec_label_pc_106b4, %dec_label_pc_106d4, %dec_label_pc_106cc, %dec_label_pc_106c4, %bb410, %dec_label_pc_106a0, %dec_label_pc_1067c, %dec_label_pc_10698, %dec_label_pc_10690, %bb409
  %v0_109a0 = phi i32 [ %v1_10670, %dec_label_pc_106a0 ], [ %v1_10670, %dec_label_pc_1067c ], [ %v1_10670, %dec_label_pc_10698 ], [ %v1_10670, %dec_label_pc_10690 ], [ %v1_10670, %bb409 ], [ %v1_106e0, %bb410 ], [ %v1_106e0, %dec_label_pc_106c4 ], [ %v1_106e0, %dec_label_pc_106cc ], [ %v1_106e0, %dec_label_pc_106d4 ], [ %v1_106e0, %dec_label_pc_106b4 ]
  %v1_109a0 = add i32 %v0_109a0, 1
  store i32 %v1_109a0, i32* @r7, align 4
  br label %dec_label_pc_109a4

dec_label_pc_109a4:                               ; preds = %dec_label_pc_10748.dec_label_pc_109a4_crit_edge, %dec_label_pc_109a0
  %v0_109a4 = phi i32 [ %v0_109a4.pre, %dec_label_pc_10748.dec_label_pc_109a4_crit_edge ], [ %v0_10044, %dec_label_pc_109a0 ]
  %v1_109a4 = inttoptr i32 %v0_109a4 to i32*
  %v2_109a4 = load i32, i32* %v1_109a4, align 4
  store i32 %v2_109a4, i32* %r3.global-to-local, align 4
  %v1_109a8 = add i32 %v0_109a4, 4
  %v2_109a8 = inttoptr i32 %v1_109a8 to i32*
  %v3_109a8 = load i32, i32* %v2_109a8, align 4
  store i32 %v3_109a8, i32* %r0.global-to-local, align 4
  %v1_109ac = add i32 %v2_109a4, 12
  %v2_109ac = inttoptr i32 %v1_109ac to i8*
  %v3_109ac = load i8, i8* %v2_109ac, align 1
  %v4_109ac = zext i8 %v3_109ac to i32
  store i32 %v4_109ac, i32* %r2.global-to-local, align 4
  %v1_109b0 = inttoptr i32 %v2_109a4 to i32*
  %v2_109b0 = load i32, i32* %v1_109b0, align 4
  store i32 %v2_109b0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_109b8 = call i32 @function_12c28(i32 %v3_109a8, i32 %v2_109b0, i32 %v4_109ac, i32 16384)
  store i32 %v4_109b8, i32* %r0.global-to-local, align 4
  %v0_109bc = load i32, i32* @r5, align 4
  %v1_109bc = add i32 %v0_109bc, 4
  %v2_109bc = inttoptr i32 %v1_109bc to i32*
  %v3_109bc = load i32, i32* %v2_109bc, align 4
  store i32 %v3_109bc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_109cc = call i32 @function_12c28(i32 %v3_109bc, i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_109d4 = load i32, i32* @r5, align 4
  %v2_109d4 = add i32 %v1_109d4, 12
  %v3_109d4 = inttoptr i32 %v2_109d4 to i32*
  store i32 4, i32* %v3_109d4, align 4
  br label %dec_label_pc_1084c

dec_label_pc_109dc:                               ; preds = %dec_label_pc_100e8
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_109e8 = call i32 @function_10e48(i32 29)
  store i32 %v2_10710, i32* %r1.global-to-local, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v3_109f8 = call i32 @function_10d84(i32 29, i32* nonnull %v2_10718)
  store i32 %v3_109f8, i32* %r0.global-to-local, align 4
  %v3_109fc = load i8, i8* %stack_var_-56, align 1
  %v4_109fc = sext i8 %v3_109fc to i32
  store i32 %v3_109f8, i32* %r2.global-to-local, align 4
  %v1_10a04 = add nsw i32 %v4_109fc, -1
  store i32 %v1_10a04, i32* %r3.global-to-local, align 4
  %v0_10a08 = load i32, i32* @r5, align 4
  %v1_10a08 = add i32 %v0_10a08, 24
  %v2_10a08 = inttoptr i32 %v1_10a08 to i32*
  %v3_10a08 = load i32, i32* %v2_10a08, align 4
  store i32 %v3_10a08, i32* %r1.global-to-local, align 4
  %v0_10a0c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_10a0c, i32* %r0.global-to-local, align 4
  %v4_10a10 = call i32 @function_11924(i32 %v0_10a0c, i32 %v3_10a08, i32 %v3_109f8, i32 %v1_10a04)
  store i32 %v4_10a10, i32* @r7, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_10a1c = call i32 @function_10da8(i32 29)
  store i32 %v1_10a1c, i32* @r0, align 4
  %v0_10a20 = load i32, i32* @r7, align 4
  %v2_10a20 = icmp eq i32 %v0_10a20, -1
  store i1 %v2_10a20, i1* %cpsr_c.global-to-local, align 1
  %v7_10a20 = icmp eq i32 %v0_10a20, -1
  store i1 %v7_10a20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a20, label %dec_label_pc_ffc4.loopexit, label %dec_label_pc_10a28

dec_label_pc_10a28:                               ; preds = %dec_label_pc_109dc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10a28 = icmp eq i32 %v0_10a20, 0
  store i1 %v2_10a28, i1* %cpsr_z.global-to-local, align 1
  %tmp421 = icmp slt i32 %v0_10a20, 1
  br i1 %tmp421, label %dec_label_pc_1084c, label %dec_label_pc_10a30

dec_label_pc_10a30:                               ; preds = %dec_label_pc_10a28
  %v0_10a30 = load i32, i32* @r5, align 4
  %v1_10a30 = add i32 %v0_10a30, 20
  %v2_10a30 = inttoptr i32 %v1_10a30 to i16*
  %v3_10a30 = load i16, i16* %v2_10a30, align 2
  %v4_10a30 = zext i16 %v3_10a30 to i32
  store i32 %v4_10a30, i32* %r3.global-to-local, align 4
  %v1_10a34 = add i32 %v0_10a30, 16
  %v2_10a34 = inttoptr i32 %v1_10a34 to i32*
  %v3_10a34 = load i32, i32* %v2_10a34, align 4
  store i32 %v3_10a34, i32* %r2.global-to-local, align 4
  store i32 %v2_10a38, i32* @lr, align 4
  store i32 %v4_10a30, i32* %stack_var_-42, align 4
  store i32 %v3_10a34, i32* %stack_var_-60, align 4
  %v1_10a44 = inttoptr i32 %v0_10a30 to i32*
  %v2_10a44 = load i32, i32* %v1_10a44, align 4
  store i32 %v2_10a44, i32* %r8.global-to-local, align 4
  %v0_10a48 = call i32 @function_121c0()
  store i32 %v0_10a48, i32* %r0.global-to-local, align 4
  %v7_10a4c = icmp eq i32 %v0_10a48, -1
  %.432 = zext i1 %v7_10a4c to i32
  store i32 %.432, i32* @r3, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10a58 = icmp eq i32 %v0_10a48, 0
  store i1 %v2_10a58, i1* %cpsr_z.global-to-local, align 1
  %tmp424 = icmp slt i32 %v0_10a48, 1
  br i1 %tmp424, label %bb425, label %.thread121

.thread121:                                       ; preds = %dec_label_pc_10a30
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10a6c

bb425:                                            ; preds = %dec_label_pc_10a30
  store i32 %.432, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10a64 = icmp eq i1 %v7_10a4c, false
  store i1 %v2_10a64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10a64, label %dec_label_pc_10c18, label %dec_label_pc_10a6c

dec_label_pc_10a6c:                               ; preds = %.thread121, %bb425
  %v0_10a6c = load i32, i32* @r5, align 4
  %v1_10a6c = add i32 %v0_10a6c, 4
  %v2_10a6c = inttoptr i32 %v1_10a6c to i32*
  %v3_10a6c = load i32, i32* %v2_10a6c, align 4
  store i32 %v3_10a6c, i32* %r0.global-to-local, align 4
  %v1_10a70 = call i32 @function_124d0(i32 %v3_10a6c)
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_10a78 = load i32, i32* @r4, align 4
  %v1_10a78 = load i32, i32* @r5, align 4
  %v2_10a78 = add i32 %v1_10a78, 4
  %v3_10a78 = inttoptr i32 %v2_10a78 to i32*
  store i32 %v0_10a78, i32* %v3_10a78, align 4
  %v0_10a7c = load i32, i32* %r0.global-to-local, align 4
  %v1_10a7c = load i32, i32* @r5, align 4
  %v2_10a7c = add i32 %v1_10a7c, 12
  %v3_10a7c = inttoptr i32 %v2_10a7c to i32*
  store i32 %v0_10a7c, i32* %v3_10a7c, align 4
  br label %dec_label_pc_1084c

dec_label_pc_10a84:                               ; preds = %dec_label_pc_10968
  store i32 %v2_1092c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_10a90 = add i32 %v0_10954, 4
  %v2_10a90 = inttoptr i32 %v1_10a90 to i32*
  %v3_10a90 = load i32, i32* %v2_10a90, align 4
  store i32 %v3_10a90, i32* %r0.global-to-local, align 4
  %v4_10a94 = call i32 @function_12c28(i32 %v3_10a90, i32 %v2_1092c, i32 3, i32 16384)
  store i32 %v4_10a94, i32* %r0.global-to-local, align 4
  store i32 %v2_10940, i32* %r1.global-to-local, align 4
  %v0_10a9c = load i32, i32* @r5, align 4
  %v1_10a9c = add i32 %v0_10a9c, 4
  %v2_10a9c = inttoptr i32 %v1_10a9c to i32*
  %v3_10a9c = load i32, i32* %v2_10a9c, align 4
  store i32 %v3_10a9c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_108fc

dec_label_pc_10aac:                               ; preds = %dec_label_pc_ffd0
  store i32 %.pre, i32* @r0, align 4
  %v1_10ab4 = add i32 %v0_10aac, 92
  store i32 %v1_10ab4, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_10abc = call i32 @function_129f0(i32 %.pre, i32 %v1_10ab4, i32 192)
  store i32 %v3_10abc, i32* %r0.global-to-local, align 4
  %v0_10ac0 = load i32, i32* @r5, align 4
  %v1_10ac0 = add i32 %v0_10ac0, 24
  %v2_10ac0 = inttoptr i32 %v1_10ac0 to i32*
  %v3_10ac0 = load i32, i32* %v2_10ac0, align 4
  %v1_10ac4 = add i32 %v3_10ac0, -64
  store i32 %v1_10ac4, i32* %r3.global-to-local, align 4
  store i32 %v1_10ac4, i32* %v2_10ac0, align 4
  br label %dec_label_pc_ffe0

dec_label_pc_10ad0:                               ; preds = %dec_label_pc_10124
  %v0_10ad0 = load i32, i32* @r5, align 4
  store i32 %v0_10ad0, i32* @r0, align 4
  %v0_10ad4 = call i32 @function_f348()
  store i32 %v0_10ad4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10160

dec_label_pc_10adc:                               ; preds = %dec_label_pc_106e8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_10adc = load i8, i8* %stack_var_-56, align 1
  %v4_10adc = sext i8 %v3_10adc to i32
  %v0_10ae0 = load i32, i32* @r6, align 4
  store i32 %v0_10ae0, i32* %r2.global-to-local, align 4
  %v1_10ae4 = add nsw i32 %v4_10adc, -1
  store i32 %v1_10ae4, i32* %r3.global-to-local, align 4
  %v0_10ae8 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_10ae8, i32* %r0.global-to-local, align 4
  %v0_10aec = load i32, i32* @r5, align 4
  %v1_10aec = add i32 %v0_10aec, 24
  %v2_10aec = inttoptr i32 %v1_10aec to i32*
  %v3_10aec = load i32, i32* %v2_10aec, align 4
  store i32 %v3_10aec, i32* %r1.global-to-local, align 4
  %v4_10af0 = call i32 @function_11924(i32 %v0_10ae8, i32 %v3_10aec, i32 %v0_10ae0, i32 %v1_10ae4)
  store i32 %v4_10af0, i32* %r0.global-to-local, align 4
  %v1_10af4 = add i32 %v4_10af0, 1
  store i32 %v1_10af4, i32* @r7, align 4
  %v2_10af4 = icmp eq i32 %v4_10af0, -1
  store i1 %v2_10af4, i1* %cpsr_c.global-to-local, align 1
  %v7_10af4 = icmp eq i32 %v1_10af4, 0
  store i1 %v7_10af4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10af4, label %dec_label_pc_10b04, label %dec_label_pc_10748

dec_label_pc_10b04:                               ; preds = %dec_label_pc_10adc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_10b08 = call i32 @function_10da8(i32 32)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_10b10 = call i32 @function_10da8(i32 33)
  store i32 %v1_10b10, i32* %r0.global-to-local, align 4
  %v0_10b14 = load i32, i32* @r5, align 4
  %v1_10b14 = add i32 %v0_10b14, 12
  %v2_10b14 = inttoptr i32 %v1_10b14 to i32*
  %v3_10b14 = load i32, i32* %v2_10b14, align 4
  store i32 %v3_10b14, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ffc8.backedge

dec_label_pc_ffc8.backedge.thread:                ; preds = %dec_label_pc_1018c, %dec_label_pc_10260, %dec_label_pc_10334, %dec_label_pc_10408, %dec_label_pc_104dc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ffd0

dec_label_pc_ffc8.backedge.thread528:             ; preds = %dec_label_pc_105fc, %dec_label_pc_10398, %dec_label_pc_102c4, %dec_label_pc_1046c, %dec_label_pc_101f0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ffd0

dec_label_pc_ffc8.backedge:                       ; preds = %dec_label_pc_10044, %dec_label_pc_10b04, %dec_label_pc_10c08
  %v0_ffd0186 = phi i32 [ %v0_10c10, %dec_label_pc_10c08 ], [ %v0_10b14, %dec_label_pc_10b04 ], [ %v0_10044, %dec_label_pc_10044 ]
  %v0_ffc8.be = phi i32 [ %v3_10c10, %dec_label_pc_10c08 ], [ %v3_10b14, %dec_label_pc_10b04 ], [ %v3_10044, %dec_label_pc_10044 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ffc8 = icmp eq i32 %v0_ffc8.be, 0
  store i1 %v2_ffc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ffc8, label %dec_label_pc_100d0, label %dec_label_pc_ffd0

dec_label_pc_10b1c:                               ; preds = %dec_label_pc_ff80
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_10710, i32* %r3.global-to-local, align 4
  store i32 %v2_106fc, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i8 0, i8* %stack_var_-56, align 1
  store i32 4, i32* %stack_var_-60, align 4
  %v5_10b48 = call i32 @function_12b3c(i32 %v3_ff74, i32 1, i32 4, i32 %v2_10710, i32 %v2_106fc)
  %v3_10b4c = load i8, i8* %stack_var_-56, align 1
  %v4_10b4c = sext i8 %v3_10b4c to i32
  store i32 %v4_10b4c, i32* %r3.global-to-local, align 4
  %v2_10b50 = or i32 %v4_10b4c, %v5_10b48
  store i32 %v2_10b50, i32* %r0.global-to-local, align 4
  %v4_10b50 = icmp eq i32 %v2_10b50, 0
  store i1 %v4_10b50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_10b50, label %dec_label_pc_10b58, label %dec_label_pc_10bec

dec_label_pc_10b58:                               ; preds = %dec_label_pc_10b1c
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_10b5c = load i32, i32* @r5, align 4
  %v2_10b5c = add i32 %v1_10b5c, 12
  %v3_10b5c = inttoptr i32 %v2_10b5c to i32*
  store i32 2, i32* %v3_10b5c, align 4
  %v0_10b60 = call i32 @function_f18c()
  store i32 %v0_10b60, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i16** @global_var_203e0.149 to i32), i32* %r3.global-to-local, align 4
  %v2_10b68 = load i16, i16* bitcast (i16** @global_var_203e0.149 to i16*), align 4
  %v3_10b68 = zext i16 %v2_10b68 to i32
  store i32 %v3_10b68, i32* %r1.global-to-local, align 4
  %v3_10b6c = call i32 @function_11f58(i32 %v0_10b60, i32 %v3_10b68)
  store i32 %v3_10b6c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_203b0.145 to i32), i32* %r3.global-to-local, align 4
  %v2_10b74 = load i32, i32* @global_var_203b0.145, align 4
  store i32 %v2_10b74, i32* %ip.global-to-local, align 4
  %v1_10b7c = load i32, i32* @r4, align 4
  %v9_10b7c = icmp eq i32 %v2_10b74, %v1_10b7c
  store i1 %v9_10b7c, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_10b68, i32* %r1.global-to-local, align 4
  %v7_10b84 = icmp sgt i32 %v2_10b74, %v1_10b7c
  br i1 %v7_10b84, label %dec_label_pc_10b88, label %dec_label_pc_10bc8

dec_label_pc_10b88:                               ; preds = %dec_label_pc_10b58
  %v2_10b8c = load i32, i32* @global_var_203dc.147, align 4
  store i32 %v2_10b8c, i32* %r3.global-to-local, align 4
  store i32 %v1_10b7c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10ba8

dec_label_pc_10b98:                               ; preds = %dec_label_pc_10bb8, %dec_label_pc_10ba8
  %v1_10b98 = add i32 %v0_10b98, 1
  store i32 %v1_10b98, i32* %r2.global-to-local, align 4
  %v9_10b9c = icmp eq i32 %v1_10b98, %v2_10b74
  %v1_10ba0 = add i32 %v0_10ba0, 16
  store i32 %v1_10ba0, i32* %r3.global-to-local, align 4
  br i1 %v9_10b9c, label %dec_label_pc_10bc8.loopexit, label %dec_label_pc_10ba8

dec_label_pc_10ba8:                               ; preds = %dec_label_pc_10b98, %dec_label_pc_10b88
  %v0_10b98 = phi i32 [ %v1_10b98, %dec_label_pc_10b98 ], [ %v1_10b7c, %dec_label_pc_10b88 ]
  %v0_10ba0 = phi i32 [ %v1_10ba0, %dec_label_pc_10b98 ], [ %v2_10b8c, %dec_label_pc_10b88 ]
  store i32 %v0_10ba0, i32* %r0.global-to-local, align 4
  %v1_10bac = add i32 %v0_10ba0, 8
  %v2_10bac = inttoptr i32 %v1_10bac to i16*
  %v3_10bac = load i16, i16* %v2_10bac, align 2
  %v4_10bac = zext i16 %v3_10bac to i32
  store i32 %v4_10bac, i32* %r3.global-to-local, align 4
  %tmp426 = icmp ugt i16 %v3_10bac, %v2_10b68
  br i1 %tmp426, label %dec_label_pc_10b98, label %dec_label_pc_10bb8

dec_label_pc_10bb8:                               ; preds = %dec_label_pc_10ba8
  %v1_10bb8 = add i32 %v0_10ba0, 10
  %v2_10bb8 = inttoptr i32 %v1_10bb8 to i16*
  %v3_10bb8 = load i16, i16* %v2_10bb8, align 2
  %v4_10bb8 = zext i16 %v3_10bb8 to i32
  store i32 %v4_10bb8, i32* %r3.global-to-local, align 4
  %v3_10bbc = icmp uge i16 %v3_10bb8, %v2_10b68
  %v9_10bbc = icmp eq i16 %v3_10bb8, %v2_10b68
  %v2_10bc0 = xor i1 %v3_10bbc, true
  %v3_10bc0 = or i1 %v9_10bbc, %v2_10bc0
  br i1 %v3_10bc0, label %dec_label_pc_10b98, label %dec_label_pc_10bcc.loopexit

dec_label_pc_10bc8.loopexit:                      ; preds = %dec_label_pc_10b98
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10bc8

dec_label_pc_10bc8:                               ; preds = %dec_label_pc_10bc8.loopexit, %dec_label_pc_10b58
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10bcc

dec_label_pc_10bcc.loopexit:                      ; preds = %dec_label_pc_10bb8
  store i1 %v3_10bbc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10bcc

dec_label_pc_10bcc:                               ; preds = %dec_label_pc_10bcc.loopexit, %dec_label_pc_10bc8
  %v0_10be0 = phi i32 [ %v0_10ba0, %dec_label_pc_10bcc.loopexit ], [ 0, %dec_label_pc_10bc8 ]
  %v0_10bcc = load i32, i32* @r5, align 4
  %v1_10bcc = add i32 %v0_10bcc, 4
  %v2_10bcc = inttoptr i32 %v1_10bcc to i32*
  %v3_10bcc = load i32, i32* %v2_10bcc, align 4
  %v3_10bd0 = udiv i32 %v3_10bcc, 32
  store i32 %v3_10bd0, i32* %r2.global-to-local, align 4
  %v1_10bd4 = urem i32 %v3_10bcc, 32
  store i32 %v1_10bd4, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_10bd8 = mul nuw nsw i32 %v3_10bd0, 4
  store i32 %v3_10bd8, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_10be0 = inttoptr i32 %v0_10bcc to i32*
  store i32 %v0_10be0, i32* %v2_10be0, align 4
  %v0_10be4 = load i32, i32* %r3.global-to-local, align 4
  %v1_10be4 = load i32, i32* @r5, align 4
  %v2_10be4 = add i32 %v1_10be4, 24
  %v3_10be4 = inttoptr i32 %v2_10be4 to i32*
  store i32 %v0_10be4, i32* %v3_10be4, align 4
  %v0_ffb0.pre = load i32, i32* @ip, align 4
  %v1_ffb8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ffa8

dec_label_pc_10bec:                               ; preds = %dec_label_pc_10b1c
  %v0_10bec = load i32, i32* @r5, align 4
  %v1_10bec = add i32 %v0_10bec, 4
  %v2_10bec = inttoptr i32 %v1_10bec to i32*
  %v3_10bec = load i32, i32* %v2_10bec, align 4
  store i32 %v3_10bec, i32* %r0.global-to-local, align 4
  %v1_10bf0 = call i32 @function_124d0(i32 %v3_10bec)
  store i32 %v1_10bf0, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_10bf8 = load i32, i32* @r4, align 4
  %v1_10bf8 = load i32, i32* @r5, align 4
  %v2_10bf8 = add i32 %v1_10bf8, 12
  %v3_10bf8 = inttoptr i32 %v2_10bf8 to i32*
  store i32 %v0_10bf8, i32* %v3_10bf8, align 4
  %v0_10bfc = load i32, i32* %r3.global-to-local, align 4
  %v1_10bfc = load i32, i32* @r5, align 4
  %v2_10bfc = add i32 %v1_10bfc, 4
  %v3_10bfc = inttoptr i32 %v2_10bfc to i32*
  store i32 %v0_10bfc, i32* %v3_10bfc, align 4
  %v0_10c00 = load i32, i32* @r4, align 4
  %v1_10c00 = trunc i32 %v0_10c00 to i8
  %v2_10c00 = load i32, i32* @r5, align 4
  %v3_10c00 = add i32 %v2_10c00, 284
  %v4_10c00 = inttoptr i32 %v3_10c00 to i8*
  store i8 %v1_10c00, i8* %v4_10c00, align 1
  br label %dec_label_pc_100d0

dec_label_pc_10c08:                               ; preds = %thread-pre-split103
  %v1_10c10 = add i32 %v0_10c10, 12
  %v2_10c10 = inttoptr i32 %v1_10c10 to i32*
  %v3_10c10 = load i32, i32* %v2_10c10, align 4
  store i32 %v3_10c10, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ffc8.backedge

dec_label_pc_10c18:                               ; preds = %bb425
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_10c24 = call i32 @function_12ce4(i32 2, i32 1, i32 0)
  store i32 %v3_10c24, i32* %r0.global-to-local, align 4
  %v2_10c28 = icmp eq i32 %v3_10c24, -1
  store i1 %v2_10c28, i1* %cpsr_c.global-to-local, align 1
  %v7_10c28 = icmp eq i32 %v3_10c24, -1
  store i1 %v7_10c28, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_10c24, i32* @r4, align 4
  br i1 %v7_10c28, label %dec_label_pc_10d7c, label %dec_label_pc_10c34

dec_label_pc_10c34:                               ; preds = %dec_label_pc_10c18
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_10c38 = call i32 @function_10e48(i32 4)
  store i32 ptrtoint (i16** @global_var_22420.99 to i32), i32* %r2.global-to-local, align 4
  store i32 385990760, i32* %r3.global-to-local, align 4
  store i32 385990760, i32* @global_var_22424.100, align 4
  %v0_10c50 = load i32, i32* @r6, align 4
  store i32 %v0_10c50, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_10c58 = inttoptr i32 %v0_10c50 to i32*
  %v3_10c58 = call i32 @function_10d84(i32 4, i32* %v2_10c58)
  store i32 %v2_10a38, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_10c6c = call i32 @function_10da8(i32 4)
  %v0_10c70 = load i32, i32* @r4, align 4
  store i32 %v0_10c70, i32* %r0.global-to-local, align 4
  store i32 %v2_10a38, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_10c7c = call i32 @function_12acc(i32 %v0_10c70, i32 %v2_10a38, i32 16)
  store i32 %v3_10c7c, i32* %r0.global-to-local, align 4
  %v3_10c80 = icmp eq i32 %v3_10c7c, -1
  store i1 %v3_10c80, i1* %cpsr_c.global-to-local, align 1
  %v8_10c80 = icmp eq i32 %v3_10c7c, -1
  store i1 %v8_10c80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10c80, label %dec_label_pc_10c88, label %dec_label_pc_10cd8

dec_label_pc_10c88:                               ; preds = %dec_label_pc_10c34
  %v0_10c88 = load i32, i32* @r4, align 4
  store i32 %v0_10c88, i32* %r0.global-to-local, align 4
  %v1_10c8c = call i32 @function_124d0(i32 %v0_10c88)
  %v0_10c90 = load i32, i32* @r6, align 4
  store i32 %v0_10c90, i32* %r0.global-to-local, align 4
  %v1_10c94 = call i32 @function_1433c(i32 %v0_10c90)
  store i32 %v1_10c94, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10c98

dec_label_pc_10c98:                               ; preds = %dec_label_pc_1007c, %dec_label_pc_10c88
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_10c9c = load i32, i32* @sb, align 4
  %v2_10c9c = inttoptr i32 %v1_10c9c to i32*
  store i32 104, i32* %v2_10c9c, align 4
  br label %dec_label_pc_10094

dec_label_pc_10ca4:                               ; preds = %dec_label_pc_fe1c
  store i32 %v3_10ca4, i32* %r0.global-to-local, align 4
  %v3_10cac = udiv i32 %v3_10ca4, 32
  %v3_10cb0 = mul nuw nsw i32 %v3_10cac, 4
  store i32 %v2_10cb4, i32* @lr, align 4
  %v2_10cb8 = add i32 %v3_10cb0, %v2_10cb4
  store i32 %v2_10cb8, i32* %r3.global-to-local, align 4
  %v1_10cbc = add i32 %v2_10cb8, -312
  %v2_10cbc = inttoptr i32 %v1_10cbc to i32*
  %v3_10cbc = load i32, i32* %v2_10cbc, align 4
  %v1_10cc0 = urem i32 %v3_10ca4, 32
  store i32 %v1_10cc0, i32* %r1.global-to-local, align 4
  %v7_10cc4 = shl i32 1, %v1_10cc0
  %v8_10cc4 = or i32 %v3_10cbc, %v7_10cc4
  store i32 %v8_10cc4, i32* %r2.global-to-local, align 4
  %v0_10cc8 = load i32, i32* @r5, align 4
  %v3_10cc8 = icmp uge i32 %v0_10cc8, %v3_10ca4
  store i1 %v3_10cc8, i1* %cpsr_c.global-to-local, align 1
  %v9_10cc8 = icmp eq i32 %v0_10cc8, %v3_10ca4
  store i1 %v9_10cc8, i1* %cpsr_z.global-to-local, align 1
  %v5_10ccc = icmp slt i32 %v0_10cc8, %v3_10ca4
  br i1 %v5_10ccc, label %bb427, label %bb428

bb427:                                            ; preds = %dec_label_pc_10ca4
  store i32 %v3_10ca4, i32* @r5, align 4
  br label %bb428

bb428:                                            ; preds = %dec_label_pc_10ca4, %bb427
  store i32 %v8_10cc4, i32* %v2_10cbc, align 4
  br label %bb378

dec_label_pc_10cd8:                               ; preds = %dec_label_pc_10c34
  store i32 %v2_10710, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10ce8 = load i32, i32* @r4, align 4
  store i32 %v0_10ce8, i32* %r0.global-to-local, align 4
  %v0_10cec = load i32, i32* @r6, align 4
  %v6_10cec = trunc i32 %v0_10cec to i8
  store i8 %v6_10cec, i8* %stack_var_-56, align 1
  %v6_10cf0 = call i32 @function_12c28(i32 %v0_10ce8, i32 %v2_10710, i32 1, i32 16384)
  store i32 %v2_106fc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10d04 = load i32, i32* @r4, align 4
  store i32 %v0_10d04, i32* %r0.global-to-local, align 4
  %v4_10d08 = call i32 @function_12c28(i32 %v0_10d04, i32 %v2_106fc, i32 4, i32 16384)
  %v2_10d10 = ptrtoint i32* %stack_var_-42 to i32
  store i32 %v2_10d10, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10d1c = load i32, i32* @r4, align 4
  store i32 %v0_10d1c, i32* %r0.global-to-local, align 4
  %v4_10d20 = call i32 @function_12c28(i32 %v0_10d1c, i32 %v2_10d10, i32 2, i32 16384)
  %v0_10d24 = load i32, i32* %r8.global-to-local, align 4
  %v1_10d24 = add i32 %v0_10d24, 12
  store i32 %v1_10d24, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10d30 = load i32, i32* @r4, align 4
  store i32 %v0_10d30, i32* %r0.global-to-local, align 4
  %v4_10d34 = call i32 @function_12c28(i32 %v0_10d30, i32 %v1_10d24, i32 1, i32 16384)
  store i32 %v4_10d34, i32* %r0.global-to-local, align 4
  %v0_10d38 = load i32, i32* %r8.global-to-local, align 4
  %v1_10d38 = inttoptr i32 %v0_10d38 to i32*
  %v2_10d38 = load i32, i32* %v1_10d38, align 4
  store i32 %v2_10d38, i32* %r1.global-to-local, align 4
  %v1_10d3c = add i32 %v0_10d38, 12
  %v2_10d3c = inttoptr i32 %v1_10d3c to i8*
  %v3_10d3c = load i8, i8* %v2_10d3c, align 1
  %v4_10d3c = zext i8 %v3_10d3c to i32
  store i32 %v4_10d3c, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10d44 = load i32, i32* @r4, align 4
  store i32 %v0_10d44, i32* %r0.global-to-local, align 4
  %v4_10d48 = call i32 @function_12c28(i32 %v0_10d44, i32 %v2_10d38, i32 %v4_10d3c, i32 16384)
  %v0_10d4c = load i32, i32* %r8.global-to-local, align 4
  %v1_10d4c = add i32 %v0_10d4c, 13
  store i32 %v1_10d4c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10d58 = load i32, i32* @r4, align 4
  store i32 %v0_10d58, i32* %r0.global-to-local, align 4
  %v4_10d5c = call i32 @function_12c28(i32 %v0_10d58, i32 %v1_10d4c, i32 1, i32 16384)
  %v0_10d60 = load i32, i32* @r4, align 4
  store i32 %v0_10d60, i32* %r0.global-to-local, align 4
  %v0_10d64 = load i32, i32* %r8.global-to-local, align 4
  %v1_10d64 = add i32 %v0_10d64, 13
  %v2_10d64 = inttoptr i32 %v1_10d64 to i8*
  %v3_10d64 = load i8, i8* %v2_10d64, align 1
  %v4_10d64 = zext i8 %v3_10d64 to i32
  store i32 %v4_10d64, i32* %r2.global-to-local, align 4
  %v1_10d68 = add i32 %v0_10d64, 4
  %v2_10d68 = inttoptr i32 %v1_10d68 to i32*
  %v3_10d68 = load i32, i32* %v2_10d68, align 4
  store i32 %v3_10d68, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10d70 = call i32 @function_12c28(i32 %v0_10d60, i32 %v3_10d68, i32 %v4_10d64, i32 16384)
  %v0_10d74 = load i32, i32* @r4, align 4
  store i32 %v0_10d74, i32* %r0.global-to-local, align 4
  %v1_10d78 = call i32 @function_124d0(i32 %v0_10d74)
  store i32 %v1_10d78, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10d7c

dec_label_pc_10d7c:                               ; preds = %dec_label_pc_10c18, %dec_label_pc_10cd8
  %v0_10d7c = load i32, i32* @r6, align 4
  store i32 %v0_10d7c, i32* %r0.global-to-local, align 4
  %v1_10d80 = call i32 @function_1433c(i32 %v0_10d7c)
  store i32 %v1_10d80, i32* %r0.global-to-local, align 4
  ret i32 %v1_10d80

; uselistorder directives
  uselistorder i32 %v0_10cc8, { 0, 2, 1 }
  uselistorder i32 %v1_10cc0, { 1, 0 }
  uselistorder i1 %v7_10c28, { 1, 0 }
  uselistorder i32 %v3_10c24, { 1, 0, 2, 3 }
  uselistorder i32 %v3_10c10, { 1, 0 }
  uselistorder i32 %v3_10bcc, { 1, 0 }
  uselistorder i1 %v3_10bbc, { 1, 0 }
  uselistorder i32 %v0_10ba0, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_10b74, { 0, 2, 1, 3 }
  uselistorder i32 %v4_10af0, { 1, 0, 2 }
  uselistorder i32 %v3_10a9c, { 1, 0 }
  uselistorder i1 %v2_10a64, { 1, 0 }
  uselistorder i32 %.432, { 1, 0 }
  uselistorder i1 %v7_10a4c, { 1, 0 }
  uselistorder i32 %v0_10a48, { 2, 1, 0, 3 }
  uselistorder i1 %v7_10a20, { 1, 0 }
  uselistorder i32 %v0_10a20, { 2, 1, 0, 3 }
  uselistorder i32 %v0_109a4, { 1, 0 }
  uselistorder i32 %v0_10988.pr, { 1, 0 }
  uselistorder i32 %v0_10954, { 1, 2, 0 }
  uselistorder i32 %v0_10918, { 1, 0 }
  uselistorder i32 %v1_10910, { 1, 0 }
  uselistorder i32 %v1_10908, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_10904, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_10904, { 0, 2, 1 }
  uselistorder i32 %v0_108e4.pr, { 1, 0 }
  uselistorder i32 %v0_108c4.pr, { 1, 0 }
  uselistorder i1 %v7_1089c, { 1, 0 }
  uselistorder i1 %v2_1088c, { 1, 0, 2 }
  uselistorder i1 %v2_10870, { 1, 0, 2 }
  uselistorder i32 %v1_10890, { 1, 2, 3, 0 }
  uselistorder i32 %v1_10864, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_10894, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_10818, { 1, 0 }
  uselistorder i32 %v0_10c10, { 1, 0, 2 }
  uselistorder i1 %v0_10808, { 1, 0 }
  uselistorder i32 %v4_107fc, { 1, 0, 2 }
  uselistorder i32 %v1_107c8, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_107c8, { 0, 2, 1 }
  uselistorder i32 %v0_107c0, { 1, 0 }
  uselistorder i1 %v7_107bc, { 1, 0 }
  uselistorder i1 %v7_107b4, { 1, 0 }
  uselistorder i1 %v8_107ac, { 1, 0 }
  uselistorder i1 %v7_10790, { 1, 0 }
  uselistorder i1 %v7_10788, { 1, 0 }
  uselistorder i1 %v8_10780, { 1, 0 }
  uselistorder i32 %v1_10768, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i1 %v7_10738, { 1, 0 }
  uselistorder i32 %v1_106e0, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_106e0, { 0, 2, 1 }
  uselistorder i32 %v0_106d8, { 1, 0 }
  uselistorder i1 %v7_106d4, { 1, 0 }
  uselistorder i1 %v7_106cc, { 1, 0 }
  uselistorder i1 %v7_106c4, { 1, 0 }
  uselistorder i1 %v8_106bc, { 1, 0 }
  uselistorder i1 %v7_106a0, { 1, 0 }
  uselistorder i1 %v7_10698, { 1, 0 }
  uselistorder i1 %v7_10690, { 1, 0 }
  uselistorder i1 %v8_10688, { 1, 0 }
  uselistorder i32 %v1_10670, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_1060c, { 1, 0 }
  uselistorder i8 %v3_10604, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_105fc, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_105fc, { 0, 2, 1 }
  uselistorder i32 %v0_105f4, { 1, 0 }
  uselistorder i1 %v7_105f0, { 1, 0 }
  uselistorder i1 %v7_105e8, { 1, 0 }
  uselistorder i1 %v7_105e0, { 1, 0 }
  uselistorder i1 %v7_10510, { 1, 0 }
  uselistorder i1 %v7_10508, { 1, 0 }
  uselistorder i1 %v7_10500, { 1, 0 }
  uselistorder i1 %v8_104f8, { 1, 0 }
  uselistorder i32 %v1_104e0, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_1047c, { 1, 0 }
  uselistorder i8 %v3_10474, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_1046c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_1046c, { 0, 2, 1 }
  uselistorder i32 %v0_10464, { 1, 0 }
  uselistorder i1 %v7_10460, { 1, 0 }
  uselistorder i1 %v7_10458, { 1, 0 }
  uselistorder i1 %v7_10450, { 1, 0 }
  uselistorder i1 %v7_1043c, { 1, 0 }
  uselistorder i1 %v7_10434, { 1, 0 }
  uselistorder i1 %v7_1042c, { 1, 0 }
  uselistorder i1 %v8_10424, { 1, 0 }
  uselistorder i32 %v1_1040c, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_103a8, { 1, 0 }
  uselistorder i8 %v3_103a0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_10398, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_10398, { 0, 2, 1 }
  uselistorder i32 %v0_10390, { 1, 0 }
  uselistorder i1 %v7_1038c, { 1, 0 }
  uselistorder i1 %v7_10384, { 1, 0 }
  uselistorder i1 %v7_1037c, { 1, 0 }
  uselistorder i1 %v7_10368, { 1, 0 }
  uselistorder i1 %v7_10360, { 1, 0 }
  uselistorder i1 %v7_10358, { 1, 0 }
  uselistorder i1 %v8_10350, { 1, 0 }
  uselistorder i32 %v1_10338, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_102d4, { 1, 0 }
  uselistorder i8 %v3_102cc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_102c4, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_102c4, { 0, 2, 1 }
  uselistorder i32 %v0_102bc, { 1, 0 }
  uselistorder i1 %v7_102b8, { 1, 0 }
  uselistorder i1 %v7_102b0, { 1, 0 }
  uselistorder i1 %v7_102a8, { 1, 0 }
  uselistorder i1 %v7_10294, { 1, 0 }
  uselistorder i1 %v7_1028c, { 1, 0 }
  uselistorder i1 %v7_10284, { 1, 0 }
  uselistorder i1 %v8_1027c, { 1, 0 }
  uselistorder i32 %v1_10264, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_10200, { 1, 0 }
  uselistorder i8 %v3_101f8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_101f0, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_101f0, { 0, 2, 1 }
  uselistorder i32 %v0_101e8, { 1, 0 }
  uselistorder i1 %v7_101e4, { 1, 0 }
  uselistorder i1 %v7_101dc, { 1, 0 }
  uselistorder i1 %v7_101d4, { 1, 0 }
  uselistorder i1 %v7_101c0, { 1, 0 }
  uselistorder i1 %v7_101b8, { 1, 0 }
  uselistorder i1 %v7_101b0, { 1, 0 }
  uselistorder i1 %v8_101a8, { 1, 0 }
  uselistorder i32 %v1_10190, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_1017c, { 1, 2, 0 }
  uselistorder i32 %v2_10168, { 1, 0 }
  uselistorder i32 %v0_10168, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_10164, { 2, 1, 4, 0, 5, 3 }
  uselistorder i32 %v1_1013c, { 2, 1, 0 }
  uselistorder i1 %v7_10118, { 1, 0 }
  uselistorder i32 %v4_10114, { 1, 0, 2 }
  uselistorder i32 %v1_100d4, { 0, 2, 3, 4, 1 }
  uselistorder i1 %v1_100b0, { 1, 0 }
  uselistorder i32 %v1_100a4, { 2, 1, 0 }
  uselistorder i32 %v1_100a0, { 1, 0 }
  uselistorder i32 %v0_10044, { 2, 21, 4, 3, 20, 19, 5, 6, 23, 7, 8, 22, 9, 10, 24, 11, 12, 27, 13, 14, 25, 15, 16, 26, 17, 18, 28, 29, 1, 0 }
  uselistorder i32 %v1_10020, { 1, 2, 3, 0 }
  uselistorder i32 %v3_1001c, { 1, 0 }
  uselistorder i32 %v4_10000, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_ffec, { 1, 0, 2 }
  uselistorder i32 %v3_ffe8, { 1, 0, 2 }
  uselistorder i32 %v0_10aac, { 1, 0, 2 }
  uselistorder i32 %v3_ffb4, { 1, 0 }
  uselistorder i32 %v1_ff98, { 3, 2, 1, 0 }
  uselistorder i32 %v3_ff94, { 1, 0 }
  uselistorder i32 %v3_ff8c, { 1, 2, 0 }
  uselistorder i1 %v7_ff78, { 1, 0 }
  uselistorder i32 %v3_ff74, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_ff68, { 1, 0 }
  uselistorder i32 %v2_10a38, { 1, 0, 2, 3 }
  uselistorder i32* %v2_10718, { 1, 2, 3, 0 }
  uselistorder i32 %v2_10710, { 4, 5, 1, 0, 3, 6, 7, 2 }
  uselistorder i32 %v2_106fc, { 1, 0, 3, 2, 9, 8, 5, 7, 6, 4 }
  uselistorder i32 %v2_10948, { 1, 0 }
  uselistorder i32 %v1_ff18, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ff18, { 0, 1, 3, 2 }
  uselistorder i32 %v1_fee4, { 2, 1, 0 }
  uselistorder i32 %v1_fee0, { 1, 0 }
  uselistorder i1 %v2_fec0, { 1, 0, 2 }
  uselistorder i32 %v0_febc, { 1, 0, 2 }
  uselistorder i1 %v7_fe88, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_fe88, { 1, 0, 2 }
  uselistorder i32 %v2_fe80, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_fe74, { 1, 0, 2 }
  uselistorder i32 %v0_fe78, { 1, 0 }
  uselistorder i32 %v1_fe5c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_fe50, { 0, 1, 3, 2 }
  uselistorder i32 %v0_fe50, { 0, 2, 1 }
  uselistorder i32 %v1_fe40, { 1, 0 }
  uselistorder i32 %v3_10ca4, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %v2_10cb4, { 0, 7, 1, 5, 2, 4, 3, 6 }
  uselistorder i32 %v1_fd90, { 1, 0 }
  uselistorder i32 %v1_fd78, { 0, 2, 3, 1 }
  uselistorder i32 %v0_fd84, { 0, 3, 2, 1 }
  uselistorder i32 %v0_fd34, { 2, 3, 4, 1, 0, 5, 7, 6 }
  uselistorder i32 %v5_fd28, { 2, 1, 0 }
  uselistorder i32 %v1_fd08, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v2_fce4, { 1, 0 }
  uselistorder i1 %v9_fcb0, { 1, 0 }
  uselistorder i32 %v0_fc60, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fc04, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_fbb4, { 1, 0 }
  uselistorder i32 %v5_fb4c, { 1, 0 }
  uselistorder i1 %v2_fa94, { 1, 0 }
  uselistorder i1 %v3_fa78, { 1, 0, 2 }
  uselistorder i1 %v2_fa64, { 1, 0 }
  uselistorder i1 %v2_fa40, { 1, 0 }
  uselistorder i32 %v1_f9f0, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f9dc, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f9d8, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v0_f9c0, { 1, 0 }
  uselistorder i32 %v0_f998, { 1, 0 }
  uselistorder i32 %stack_var_-1880.0, { 0, 1, 2, 3, 4, 5, 8, 11, 10, 6, 7, 9, 13, 12 }
  uselistorder i16 %v5_f6d0.le, { 0, 2, 1 }
  uselistorder i32 %v0_f6b4, { 3, 2, 0, 1 }
  uselistorder i1 %v7_f654, { 1, 0 }
  uselistorder i32 %v3_f64c, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_f638, { 1, 0 }
  uselistorder i32 %v0_f608, { 1, 0 }
  uselistorder i32 %storemerge308, { 1, 0 }
  uselistorder i32 %v0_f57c, { 2, 1, 3, 0, 4 }
  uselistorder i16* %stack_var_-52, { 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0, 2 }
  uselistorder i32* %stack_var_-96, { 2, 0, 1, 3 }
  uselistorder i32* %stack_var_-68, { 1, 0 }
  uselistorder i32* %stack_var_-224, { 1, 0 }
  uselistorder i32* %stack_var_-352, { 1, 0 }
  uselistorder i8* %stack_var_-56, { 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32* %stack_var_-60, { 6, 7, 8, 0, 9, 1, 10, 4, 11, 2, 12, 3, 13, 5, 14 }
  uselistorder i32* %stack_var_-42, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 4, 7, 0, 1, 3, 2, 5, 8, 9, 6, 10 }
  uselistorder i32* %r8.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r3.global-to-local, { 142, 143, 144, 145, 146, 147, 148, 52, 53, 149, 54, 55, 56, 57, 58, 60, 59, 61, 62, 63, 64, 65, 21, 66, 0, 150, 151, 22, 23, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 134, 135, 136, 137, 138, 139, 140, 141, 152, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 92, 89, 94, 153, 154, 95, 96, 155, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 38, 113, 114, 115, 116, 118, 117, 120, 119, 133, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132 }
  uselistorder i32* %r2.global-to-local, { 120, 121, 122, 123, 124, 125, 126, 31, 127, 128, 129, 32, 33, 34, 35, 10, 0, 130, 131, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 115, 116, 117, 118, 119, 132, 133, 113, 114, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 111, 112, 48, 49, 51, 50, 47, 134, 52, 135, 53, 136, 137, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110 }
  uselistorder i32* %r1.global-to-local, { 109, 110, 111, 112, 113, 114, 115, 33, 116, 117, 118, 119, 34, 35, 36, 37, 38, 8, 1, 2, 120, 121, 9, 10, 0, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 103, 104, 105, 106, 107, 108, 101, 102, 122, 123, 39, 40, 41, 42, 43, 45, 46, 47, 44, 48, 49, 50, 51, 100, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99 }
  uselistorder i32* %r0.global-to-local, { 183, 182, 185, 184, 186, 187, 188, 190, 189, 191, 192, 193, 75, 195, 194, 196, 198, 197, 199, 200, 201, 203, 202, 7, 79, 76, 77, 78, 80, 83, 82, 81, 21, 23, 22, 24, 27, 25, 0, 87, 1, 3, 2, 204, 205, 206, 207, 208, 209, 211, 210, 212, 26, 28, 30, 29, 4, 5, 8, 6, 10, 12, 14, 13, 11, 9, 16, 15, 17, 18, 19, 20, 31, 32, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 44, 43, 46, 45, 48, 47, 49, 50, 52, 51, 54, 53, 56, 55, 57, 59, 61, 60, 63, 62, 65, 64, 66, 67, 69, 68, 71, 70, 73, 72, 74, 174, 176, 175, 178, 177, 180, 179, 181, 214, 216, 215, 217, 213, 218, 219, 220, 84, 85, 86, 90, 88, 89, 95, 91, 92, 120, 93, 94, 96, 98, 97, 99, 104, 100, 103, 101, 102, 105, 107, 108, 106, 111, 109, 110, 114, 112, 113, 116, 115, 58, 173, 118, 117, 119, 122, 121, 124, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 161, 163, 168, 164, 165, 166, 167, 169, 170, 171, 172 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 21, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i1* %cpsr_z.global-to-local, { 99, 209, 210, 185, 186, 100, 101, 113, 0, 194, 32, 33, 35, 211, 64, 213, 215, 216, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 179, 214, 20, 21, 26, 22, 23, 24, 25, 27, 28, 29, 30, 31, 34, 212, 36, 42, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 54, 55, 56, 50, 51, 53, 58, 59, 60, 61, 62, 63, 68, 69, 70, 65, 66, 67, 71, 72, 73, 74, 75, 76, 80, 81, 82, 77, 78, 79, 83, 84, 85, 86, 87, 88, 92, 93, 94, 89, 90, 91, 95, 96, 97, 98, 195, 196, 200, 201, 202, 197, 198, 199, 203, 204, 205, 206, 207, 208, 217, 218, 219, 220, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 180, 182, 114, 115, 116, 117, 119, 118, 120, 121, 122, 125, 127, 128, 126, 123, 124, 187, 188, 183, 129, 184, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 57, 162, 163, 164, 165, 166, 52, 167, 168, 169, 49, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 190, 191, 192, 189, 193 }
  uselistorder i1* %cpsr_c.global-to-local, { 97, 204, 205, 98, 180, 181, 99, 111, 0, 189, 29, 30, 32, 206, 61, 207, 209, 210, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 172, 208, 17, 18, 23, 19, 20, 21, 22, 24, 25, 26, 27, 28, 31, 62, 33, 39, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 52, 53, 54, 47, 49, 50, 55, 56, 57, 58, 59, 60, 66, 67, 68, 63, 64, 65, 69, 70, 71, 72, 73, 74, 78, 79, 80, 75, 76, 77, 81, 82, 83, 84, 85, 86, 90, 91, 92, 87, 88, 89, 93, 94, 95, 96, 190, 191, 195, 196, 197, 192, 193, 194, 198, 199, 200, 201, 202, 203, 211, 212, 213, 100, 102, 101, 103, 104, 105, 106, 107, 108, 109, 110, 175, 177, 112, 113, 114, 115, 116, 117, 118, 121, 123, 124, 122, 119, 120, 182, 183, 178, 125, 179, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 48, 156, 157, 158, 159, 160, 51, 161, 162, 163, 46, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 185, 186, 187, 184, 188 }
  uselistorder i32 ptrtoint (i16** @global_var_22420.99 to i32), { 4, 0, 1, 3, 2 }
  uselistorder i16* bitcast (i16** @global_var_203e0.149 to i16*), { 1, 0 }
  uselistorder i16** @global_var_203e0.149, { 1, 0 }
  uselistorder i32 ptrtoint (i16** @global_var_203e0.149 to i32), { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_12b3c, { 2, 1, 0 }
  uselistorder i8 31, { 6, 0, 1, 2, 3, 7, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i8 30, { 4, 0, 1, 5, 2, 3, 6 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_176a0.56 to i32), { 6, 23, 7, 24, 0, 25, 3, 26, 1, 27, 2, 28, 4, 29, 16, 30, 17, 31, 18, 32, 19, 33, 20, 34, 21, 35, 5, 36, 22, 37, 8, 38, 9, 39, 10, 40, 11, 41, 12, 42, 13, 43, 14, 44, 15, 45 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12c28, { 7, 6, 5, 4, 3, 2, 1, 28, 24, 23, 27, 26, 25, 22, 21, 20, 19, 18, 17, 16, 15, 9, 8, 14, 13, 12, 11, 10, 0 }
  uselistorder i8 37, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11 }
  uselistorder i8 34, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13, 14, 15 }
  uselistorder i8 36, { 4, 5, 0, 1, 2, 3, 6, 7, 8, 9, 18, 19, 20, 21, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 24, 25 }
  uselistorder i8 35, { 4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 20, 21, 22, 23, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 27 }
  uselistorder i8 58, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13, 14, 15 }
  uselistorder i8 57, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i8 62, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i8 61, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13, 14 }
  uselistorder i32 (i32)* @function_10da8, { 12, 36, 35, 11, 37, 34, 33, 32, 31, 30, 29, 13, 10, 9, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 8, 7, 6, 5, 4, 2, 1, 0, 3 }
  uselistorder i32 (i32, i32, i32, i32)* @function_11924, { 23, 21, 24, 22, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 1, 0, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 (i32, i32*)* @function_10d84, { 28, 29, 0, 1, 2, 3, 4, 5, 6, 27, 30, 31, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 51, 52, 53, 54, 55, 56, 57, 58, 59, 45, 48, 49, 50, 46, 47 }
  uselistorder i32 (i32)* @function_10e48, { 23, 22, 46, 45, 44, 43, 42, 41, 40, 24, 21, 20, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 19, 18, 17, 16, 15, 1, 0, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 1073741824, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12bb4, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_121f4, { 2, 1, 0 }
  uselistorder i32 ()* @function_f348, { 0, 2, 1 }
  uselistorder i32 254, { 3, 4, 5, 0, 1, 2, 6, 7, 8, 9, 10 }
  uselistorder i8 2, { 0, 2, 1, 3 }
  uselistorder i8 5, { 12, 0, 1, 3, 2, 4, 5, 6, 7, 8, 9, 13, 10, 11 }
  uselistorder i32 39, { 5, 0, 1, 6, 2, 7, 3, 8, 4 }
  uselistorder i32 38, { 3, 0, 4, 1, 5, 2, 6, 7, 8, 9, 10 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_12bec, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_12c60, { 8, 7, 6, 5, 0, 4, 3, 1, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @function_dda8, { 8, 7, 6, 5, 0, 4, 3, 1, 2 }
  uselistorder i16 4873, { 1, 0 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_dd58, { 10, 9, 8, 7, 0, 6, 5, 2, 1, 4, 3 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 54, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 223, { 2, 0, 1 }
  uselistorder i32 62, { 6, 1, 2, 3, 4, 5, 0 }
  uselistorder i32 127, { 4, 5, 2, 6, 0, 7, 1, 8, 3, 9 }
  uselistorder i32 126, { 7, 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_17778.202 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_17730.186 to i32), { 0, 20, 1, 21, 2, 22, 3, 23, 4, 24, 5, 25, 6, 26, 7, 27, 8, 28, 9, 29, 10, 30, 11, 31, 12, 32, 13, 33, 14, 34, 15, 35, 16, 36, 17, 37, 18, 38, 19, 39 }
  uselistorder i32 ptrtoint (i32* @global_var_176c8.180 to i32), { 0, 6, 1, 7, 2, 8, 3, 9, 4, 10, 5, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_1771c.178 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_17710.176 to i32), { 0, 2, 1, 3 }
  uselistorder i32 (i32, i32, i32)* @function_f410, { 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_176f8.172 to i32), { 0, 9, 1, 10, 2, 11, 3, 4, 5, 12, 6, 13, 7, 14, 8, 15 }
  uselistorder i8* @global_var_203d5.167, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2, 3 }
  uselistorder i32 5888, { 0, 2, 1, 3 }
  uselistorder i8 6, { 4, 5, 6, 7, 8, 9, 10, 0, 11, 1, 2, 3 }
  uselistorder i8 16, { 0, 1, 2, 4, 3, 12, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_203c8.161 to i32), { 1, 2, 0, 3, 4 }
  uselistorder i8* @global_var_203d4.162, { 1, 0 }
  uselistorder i32 10240, { 6, 3, 7, 2, 8, 1, 9, 4, 10, 5, 11, 0, 12 }
  uselistorder i8** @global_var_203b4.158, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_203b4.158 to i32), { 2, 10, 3, 1, 0, 9, 4, 8, 7, 6, 5 }
  uselistorder i32 1023, { 2, 0, 1, 3, 4 }
  uselistorder i32 ()* @function_f18c, { 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 4, 3, 2, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 8, 7, 6, 5, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_12ca0, { 10, 9, 8, 7, 6, 1, 5, 4, 3, 2, 0 }
  uselistorder i32 2048, { 3, 2, 0, 1, 4, 5, 6, 7 }
  uselistorder i32* @global_var_22434.156, { 1, 2, 3, 4, 0, 5 }
  uselistorder i16 254, { 1, 2, 0 }
  uselistorder i32* @global_var_22430.154, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 288, { 2, 3, 7, 0, 1, 4, 5, 6, 8 }
  uselistorder i32* @global_var_203e4.143, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32)* @function_f1e8, { 1, 0 }
  uselistorder i32* @global_var_22418.77, { 3, 4, 1, 2, 0, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32 ptrtoint (i32* @global_var_22418.77 to i32), { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ()* @function_11b28, { 2, 1, 0 }
  uselistorder i32* @global_var_22438.141, { 0, 2, 1 }
  uselistorder i32 ()* @function_121c0, { 1, 5, 4, 3, 2, 0 }
  uselistorder label %dec_label_pc_10d7c, { 1, 0 }
  uselistorder label %bb428, { 1, 0 }
  uselistorder label %dec_label_pc_10c98, { 1, 0 }
  uselistorder label %dec_label_pc_ffc8.backedge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ffc8.backedge.thread528, { 0, 3, 1, 2, 4 }
  uselistorder label %dec_label_pc_ffc8.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10a6c, { 1, 0 }
  uselistorder label %dec_label_pc_109a4, { 1, 0 }
  uselistorder label %dec_label_pc_109a0, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_10998, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_10988, { 1, 0 }
  uselistorder label %dec_label_pc_10918, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread114, { 2, 0, 1 }
  uselistorder label %dec_label_pc_108e4, { 1, 0 }
  uselistorder label %.thread110, { 2, 0, 1 }
  uselistorder label %dec_label_pc_108c4, { 1, 0 }
  uselistorder label %dec_label_pc_108b0, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_1086c, { 1, 0 }
  uselistorder label %dec_label_pc_1086c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_1084c, { 5, 3, 4, 1, 0, 6, 2 }
  uselistorder label %dec_label_pc_10818, { 1, 0 }
  uselistorder label %thread-pre-split103, { 1, 0 }
  uselistorder label %dec_label_pc_107c8, { 1, 0 }
  uselistorder label %dec_label_pc_106e0, { 1, 0 }
  uselistorder label %dec_label_pc_10614, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_105fc, { 1, 0 }
  uselistorder label %dec_label_pc_10484, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_1046c, { 1, 0 }
  uselistorder label %dec_label_pc_103b0, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_10398, { 1, 0 }
  uselistorder label %dec_label_pc_102dc, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_102c4, { 1, 0 }
  uselistorder label %dec_label_pc_10208, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_101f0, { 1, 0 }
  uselistorder label %dec_label_pc_100d0, { 6, 1, 7, 3, 0, 2, 4, 5 }
  uselistorder label %bb390, { 1, 0 }
  uselistorder label %bb388, { 1, 0 }
  uselistorder label %dec_label_pc_10094, { 1, 0 }
  uselistorder label %dec_label_pc_1002c, { 1, 0 }
  uselistorder label %.thread63, { 1, 0 }
  uselistorder label %dec_label_pc_ffe0, { 1, 0 }
  uselistorder label %dec_label_pc_ffd0, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ffd0.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_ffa8, { 1, 0 }
  uselistorder label %dec_label_pc_ff00, { 1, 0 }
  uselistorder label %bb384, { 1, 0 }
  uselistorder label %bb382, { 1, 0 }
  uselistorder label %bb380, { 1, 0 }
  uselistorder label %bb378, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_fdf4.dec_label_pc_fdf4_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_fdd4.dec_label_pc_fdd4_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_fdc8, { 4, 5, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_fdc0, { 1, 0 }
  uselistorder label %dec_label_pc_fd9c, { 1, 0 }
  uselistorder label %dec_label_pc_fd78, { 1, 0 }
  uselistorder label %dec_label_pc_fc2c, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_fc18, { 1, 0 }
  uselistorder label %.thread39, { 1, 0 }
  uselistorder label %dec_label_pc_faa4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fa80, { 1, 0 }
  uselistorder label %dec_label_pc_fa74, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fa50, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fa2c, { 1, 0 }
  uselistorder label %bb350, { 1, 0 }
  uselistorder label %dec_label_pc_f9d8, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_f6b4, { 1, 0 }
}

define i32 @function_10d84(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10d84:
  store i32 ptrtoint (i32* @global_var_22440.251 to i32), i32* @r2, align 4
  %v3_10d88 = mul i32 %arg1, 8
  %v2_10d8c = add i32 %v3_10d88, ptrtoint (i32* @global_var_22440.251 to i32)
  store i32 %v2_10d8c, i32* @r3, align 4
  %v2_10d90 = icmp eq i32* %arg2, null
  br i1 %v2_10d90, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10d84
  %v3_10d984 = inttoptr i32 %v2_10d8c to i32*
  %v4_10d985 = load i32, i32* %v3_10d984, align 4
  br label %bb7

bb:                                               ; preds = %dec_label_pc_10d84
  %v2_10d94 = add i32 %v3_10d88, add (i32 ptrtoint (i32* @global_var_22440.251 to i32), i32 4)
  %v3_10d94 = inttoptr i32 %v2_10d94 to i16*
  %v4_10d94 = load i16, i16* %v3_10d94, align 4
  %v5_10d94 = zext i16 %v4_10d94 to i32
  store i32 %v5_10d94, i32* @r3, align 4
  %v3_10d98 = inttoptr i32 %v2_10d8c to i32*
  %v4_10d98 = load i32, i32* %v3_10d98, align 4
  store i32 %v5_10d94, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_10d986 = phi i32 [ %v4_10d985, %.thread ], [ %v4_10d98, %bb ]
  ret i32 %v4_10d986

; uselistorder directives
  uselistorder i32 %v2_10d8c, { 1, 0, 2 }
  uselistorder i32 %v3_10d88, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_10da8(i32 %arg1) local_unnamed_addr {
dec_label_pc_10da8:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10db0 = mul i32 %arg1, 8
  %v2_10db4 = add i32 %v3_10db0, ptrtoint (i32* @global_var_22440.251 to i32)
  %v2_10db8 = load i32, i32* inttoptr (i32 131536 to i32*), align 16
  %v1_10dbc = add i32 %v3_10db0, add (i32 ptrtoint (i32* @global_var_22440.251 to i32), i32 4)
  %v2_10dbc = inttoptr i32 %v1_10dbc to i16*
  %v3_10dbc = load i16, i16* %v2_10dbc, align 4
  %v3_10dc0 = udiv i32 %v2_10db8, 256
  store i32 %v3_10dc0, i32* @r2, align 4
  %v2_10dc4 = icmp eq i16 %v3_10dbc, 0
  store i1 %v2_10dc4, i1* @cpsr_z, align 1
  %v3_10dc8 = udiv i32 %v2_10db8, 65536
  store i32 %v3_10dc8, i32* @r3, align 4
  %v3_10dcc = load i32, i32* @r4, align 4
  store i32 %v3_10dcc, i32* %stack_var_-16, align 4
  %v1_10dd0 = urem i32 %v3_10dc0, 256
  store i32 %v1_10dd0, i32* %r6.global-to-local, align 4
  %v1_10dd4 = urem i32 %v3_10dc8, 256
  store i32 %v1_10dd4, i32* %r5.global-to-local, align 4
  %v3_10dd8 = udiv i32 %v2_10db8, 16777216
  store i32 %v3_10dd8, i32* %r4.global-to-local, align 4
  %v1_10ddc = urem i32 %v2_10db8, 256
  store i32 %v1_10ddc, i32* %lr.global-to-local, align 4
  br i1 %v2_10dc4, label %dec_label_pc_10e38, label %dec_label_pc_10de4

dec_label_pc_10de4:                               ; preds = %dec_label_pc_10da8
  store i32 0, i32* @ip, align 4
  %v1_10de8 = inttoptr i32 %v2_10db4 to i32*
  br label %dec_label_pc_10de8

dec_label_pc_10de8:                               ; preds = %dec_label_pc_10de8.dec_label_pc_10de8_crit_edge, %dec_label_pc_10de4
  %v0_10df0 = phi i32 [ %v0_10df0.pre, %dec_label_pc_10de8.dec_label_pc_10de8_crit_edge ], [ %v1_10ddc, %dec_label_pc_10de4 ]
  %v2_10df4 = phi i32 [ %v1_10e2c, %dec_label_pc_10de8.dec_label_pc_10de8_crit_edge ], [ 0, %dec_label_pc_10de4 ]
  %v2_10de8 = load i32, i32* %v1_10de8, align 4
  %v2_10dec = add i32 %v2_10de8, %v2_10df4
  %v3_10dec = inttoptr i32 %v2_10dec to i8*
  %v4_10dec = load i8, i8* %v3_10dec, align 1
  %v6_10dec = zext i8 %v4_10dec to i32
  %v2_10df0 = xor i32 %v6_10dec, %v0_10df0
  %v1_10df4 = trunc i32 %v2_10df0 to i8
  store i8 %v1_10df4, i8* %v3_10dec, align 1
  %v2_10df8 = load i32, i32* %v1_10de8, align 4
  %v0_10dfc = load i32, i32* @ip, align 4
  %v2_10dfc = add i32 %v0_10dfc, %v2_10df8
  %v3_10dfc = inttoptr i32 %v2_10dfc to i8*
  %v4_10dfc = load i8, i8* %v3_10dfc, align 1
  %v6_10dfc = zext i8 %v4_10dfc to i32
  %v0_10e00 = load i32, i32* %r6.global-to-local, align 4
  %v2_10e00 = xor i32 %v0_10e00, %v6_10dfc
  %v1_10e04 = trunc i32 %v2_10e00 to i8
  store i8 %v1_10e04, i8* %v3_10dfc, align 1
  %v2_10e08 = load i32, i32* %v1_10de8, align 4
  %v0_10e0c = load i32, i32* @ip, align 4
  %v2_10e0c = add i32 %v0_10e0c, %v2_10e08
  %v3_10e0c = inttoptr i32 %v2_10e0c to i8*
  %v4_10e0c = load i8, i8* %v3_10e0c, align 1
  %v6_10e0c = zext i8 %v4_10e0c to i32
  %v0_10e10 = load i32, i32* %r5.global-to-local, align 4
  %v2_10e10 = xor i32 %v0_10e10, %v6_10e0c
  %v1_10e14 = trunc i32 %v2_10e10 to i8
  store i8 %v1_10e14, i8* %v3_10e0c, align 1
  %v2_10e18 = load i32, i32* %v1_10de8, align 4
  %v0_10e1c = load i32, i32* @ip, align 4
  %v2_10e1c = add i32 %v0_10e1c, %v2_10e18
  %v3_10e1c = inttoptr i32 %v2_10e1c to i8*
  %v4_10e1c = load i8, i8* %v3_10e1c, align 1
  %v6_10e1c = zext i8 %v4_10e1c to i32
  %v0_10e20 = load i32, i32* %r4.global-to-local, align 4
  %v2_10e20 = xor i32 %v0_10e20, %v6_10e1c
  store i32 %v2_10e20, i32* @r3, align 4
  %v1_10e24 = trunc i32 %v2_10e20 to i8
  store i8 %v1_10e24, i8* %v3_10e1c, align 1
  %v3_10e28 = load i16, i16* %v2_10dbc, align 4
  %v4_10e28 = zext i16 %v3_10e28 to i32
  store i32 %v4_10e28, i32* @r2, align 4
  %v0_10e2c = load i32, i32* @ip, align 4
  %v1_10e2c = add i32 %v0_10e2c, 1
  store i32 %v1_10e2c, i32* @ip, align 4
  %v9_10e30 = icmp eq i32 %v4_10e28, %v1_10e2c
  store i1 %v9_10e30, i1* @cpsr_z, align 1
  %v8_10e34 = icmp sgt i32 %v4_10e28, %v1_10e2c
  br i1 %v8_10e34, label %dec_label_pc_10de8.dec_label_pc_10de8_crit_edge, label %dec_label_pc_10e38.loopexit

dec_label_pc_10de8.dec_label_pc_10de8_crit_edge:  ; preds = %dec_label_pc_10de8
  %v0_10df0.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_10de8

dec_label_pc_10e38.loopexit:                      ; preds = %dec_label_pc_10de8
  %v2_10e38.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_10e38

dec_label_pc_10e38:                               ; preds = %dec_label_pc_10e38.loopexit, %dec_label_pc_10da8
  %v2_10e38 = phi i32 [ %v2_10e38.pre, %dec_label_pc_10e38.loopexit ], [ %v3_10dcc, %dec_label_pc_10da8 ]
  store i32 %v2_10e38, i32* @r4, align 4
  ret i32 %v2_10db4

; uselistorder directives
  uselistorder i32 %v1_10e2c, { 1, 2, 3, 0 }
  uselistorder i32 %v1_10ddc, { 1, 0 }
  uselistorder i32 %v3_10dc8, { 1, 0 }
  uselistorder i32 %v3_10dc0, { 1, 0 }
  uselistorder i32 %v2_10db8, { 3, 0, 1, 2 }
  uselistorder i32 %v2_10db4, { 1, 0 }
  uselistorder i32 %v3_10db0, { 1, 0 }
}

define i32 @function_10e48(i32 %arg1) local_unnamed_addr {
dec_label_pc_10e48:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10e50 = mul i32 %arg1, 8
  %v2_10e54 = add i32 %v3_10e50, ptrtoint (i32* @global_var_22440.251 to i32)
  %v2_10e58 = load i32, i32* inttoptr (i32 131536 to i32*), align 16
  %v1_10e5c = add i32 %v3_10e50, add (i32 ptrtoint (i32* @global_var_22440.251 to i32), i32 4)
  %v2_10e5c = inttoptr i32 %v1_10e5c to i16*
  %v3_10e5c = load i16, i16* %v2_10e5c, align 4
  %v3_10e60 = udiv i32 %v2_10e58, 256
  %v2_10e64 = icmp eq i16 %v3_10e5c, 0
  %v3_10e68 = udiv i32 %v2_10e58, 65536
  %v3_10e6c = load i32, i32* @r4, align 4
  store i32 %v3_10e6c, i32* %stack_var_-16, align 4
  %v1_10e70 = urem i32 %v3_10e60, 256
  store i32 %v1_10e70, i32* %r6.global-to-local, align 4
  %v1_10e74 = urem i32 %v3_10e68, 256
  store i32 %v1_10e74, i32* %r5.global-to-local, align 4
  %v3_10e78 = udiv i32 %v2_10e58, 16777216
  store i32 %v3_10e78, i32* %r4.global-to-local, align 4
  %v1_10e7c = urem i32 %v2_10e58, 256
  store i32 %v1_10e7c, i32* %lr.global-to-local, align 4
  br i1 %v2_10e64, label %dec_label_pc_10ed8, label %dec_label_pc_10e84

dec_label_pc_10e84:                               ; preds = %dec_label_pc_10e48
  store i32 0, i32* @ip, align 4
  %v1_10e88 = inttoptr i32 %v2_10e54 to i32*
  br label %dec_label_pc_10e88

dec_label_pc_10e88:                               ; preds = %dec_label_pc_10e88.dec_label_pc_10e88_crit_edge, %dec_label_pc_10e84
  %v0_10e90 = phi i32 [ %v0_10e90.pre, %dec_label_pc_10e88.dec_label_pc_10e88_crit_edge ], [ %v1_10e7c, %dec_label_pc_10e84 ]
  %v2_10e94 = phi i32 [ %v1_10ecc, %dec_label_pc_10e88.dec_label_pc_10e88_crit_edge ], [ 0, %dec_label_pc_10e84 ]
  %v2_10e88 = load i32, i32* %v1_10e88, align 4
  %v2_10e8c = add i32 %v2_10e88, %v2_10e94
  %v3_10e8c = inttoptr i32 %v2_10e8c to i8*
  %v4_10e8c = load i8, i8* %v3_10e8c, align 1
  %v6_10e8c = zext i8 %v4_10e8c to i32
  %v2_10e90 = xor i32 %v6_10e8c, %v0_10e90
  %v1_10e94 = trunc i32 %v2_10e90 to i8
  store i8 %v1_10e94, i8* %v3_10e8c, align 1
  %v2_10e98 = load i32, i32* %v1_10e88, align 4
  %v0_10e9c = load i32, i32* @ip, align 4
  %v2_10e9c = add i32 %v0_10e9c, %v2_10e98
  %v3_10e9c = inttoptr i32 %v2_10e9c to i8*
  %v4_10e9c = load i8, i8* %v3_10e9c, align 1
  %v6_10e9c = zext i8 %v4_10e9c to i32
  %v0_10ea0 = load i32, i32* %r6.global-to-local, align 4
  %v2_10ea0 = xor i32 %v0_10ea0, %v6_10e9c
  %v1_10ea4 = trunc i32 %v2_10ea0 to i8
  store i8 %v1_10ea4, i8* %v3_10e9c, align 1
  %v2_10ea8 = load i32, i32* %v1_10e88, align 4
  %v0_10eac = load i32, i32* @ip, align 4
  %v2_10eac = add i32 %v0_10eac, %v2_10ea8
  %v3_10eac = inttoptr i32 %v2_10eac to i8*
  %v4_10eac = load i8, i8* %v3_10eac, align 1
  %v6_10eac = zext i8 %v4_10eac to i32
  %v0_10eb0 = load i32, i32* %r5.global-to-local, align 4
  %v2_10eb0 = xor i32 %v0_10eb0, %v6_10eac
  %v1_10eb4 = trunc i32 %v2_10eb0 to i8
  store i8 %v1_10eb4, i8* %v3_10eac, align 1
  %v2_10eb8 = load i32, i32* %v1_10e88, align 4
  %v0_10ebc = load i32, i32* @ip, align 4
  %v2_10ebc = add i32 %v0_10ebc, %v2_10eb8
  %v3_10ebc = inttoptr i32 %v2_10ebc to i8*
  %v4_10ebc = load i8, i8* %v3_10ebc, align 1
  %v6_10ebc = zext i8 %v4_10ebc to i32
  %v0_10ec0 = load i32, i32* %r4.global-to-local, align 4
  %v2_10ec0 = xor i32 %v0_10ec0, %v6_10ebc
  %v1_10ec4 = trunc i32 %v2_10ec0 to i8
  store i8 %v1_10ec4, i8* %v3_10ebc, align 1
  %v3_10ec8 = load i16, i16* %v2_10e5c, align 4
  %v4_10ec8 = zext i16 %v3_10ec8 to i32
  %v0_10ecc = load i32, i32* @ip, align 4
  %v1_10ecc = add i32 %v0_10ecc, 1
  store i32 %v1_10ecc, i32* @ip, align 4
  %v8_10ed4 = icmp sgt i32 %v4_10ec8, %v1_10ecc
  br i1 %v8_10ed4, label %dec_label_pc_10e88.dec_label_pc_10e88_crit_edge, label %dec_label_pc_10ed8.loopexit

dec_label_pc_10e88.dec_label_pc_10e88_crit_edge:  ; preds = %dec_label_pc_10e88
  %v0_10e90.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_10e88

dec_label_pc_10ed8.loopexit:                      ; preds = %dec_label_pc_10e88
  %v2_10ed8.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_10ed8

dec_label_pc_10ed8:                               ; preds = %dec_label_pc_10ed8.loopexit, %dec_label_pc_10e48
  %v2_10ed8 = phi i32 [ %v2_10ed8.pre, %dec_label_pc_10ed8.loopexit ], [ %v3_10e6c, %dec_label_pc_10e48 ]
  store i32 %v2_10ed8, i32* @r4, align 4
  ret i32 %v2_10e54

; uselistorder directives
  uselistorder i32 %v1_10ecc, { 1, 2, 0 }
  uselistorder i32 %v1_10e7c, { 1, 0 }
  uselistorder i32 %v2_10e58, { 3, 0, 1, 2 }
  uselistorder i32 %v3_10e50, { 1, 0 }
}

define i32 @function_10ee8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10ee8:
  %r5.global-to-local = alloca i32, align 4
  %v3_10ee8 = load i32, i32* @r4, align 4
  %v6_10ee8 = load i32, i32* @r5, align 4
  %v9_10ee8 = load i32, i32* @r6, align 4
  %v12_10ee8 = load i32, i32* @r7, align 4
  %v15_10ee8 = load i32, i32* @r8, align 4
  %v21_10ee8 = load i32, i32* @sl, align 4
  %v24_10ee8 = load i32, i32* @fp, align 4
  store i32 2, i32* @r0, align 4
  %v0_10ef4 = call i32 @function_12f2c()
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_22440.251 to i32), i32* @r4, align 4
  store i32 %v0_10ef4, i32* @r6, align 4
  %v3_10f0c = call i32 @function_118dc(i32 %v0_10ef4, i32 ptrtoint (i32* @global_var_17810.258 to i32), i32 2)
  %v0_10f10 = load i32, i32* @r5, align 4
  store i32 %v0_10f10, i32* @r0, align 4
  %v0_10f14 = load i32, i32* @r6, align 4
  store i32 %v0_10f14, i32* @global_var_22450.259, align 4
  %v1_10f18 = trunc i32 %v0_10f10 to i16
  store i16 %v1_10f18, i16* bitcast (i32* @global_var_22454.260 to i16*), align 4
  %v0_10f1c = call i32 @function_12f2c()
  %v0_10f20 = load i32, i32* @r5, align 4
  store i32 %v0_10f1c, i32* @r6, align 4
  %v3_10f2c = call i32 @function_118dc(i32 %v0_10f1c, i32 ptrtoint (i32* @global_var_17814.262 to i32), i32 %v0_10f20)
  store i32 29, i32* @r0, align 4
  %v0_10f34 = load i32, i32* @r6, align 4
  store i32 %v0_10f34, i32* @global_var_22460.263, align 4
  %v0_10f38 = load i32, i32* @r5, align 4
  %v1_10f38 = trunc i32 %v0_10f38 to i16
  store i16 %v1_10f38, i16* bitcast (i32* @global_var_22464.264 to i16*), align 4
  %v0_10f3c = call i32 @function_12f2c()
  store i32 %v0_10f3c, i32* @r5, align 4
  %v3_10f4c = call i32 @function_118dc(i32 %v0_10f3c, i32 ptrtoint (i32* @global_var_17818.266 to i32), i32 29)
  store i32 7, i32* @r0, align 4
  %v0_10f58 = load i32, i32* @r5, align 4
  store i32 %v0_10f58, i32* @global_var_22468.267, align 4
  store i16 29, i16* bitcast (i32* @global_var_2246c.268 to i16*), align 4
  %v0_10f60 = call i32 @function_12f2c()
  store i32 7, i32* @r6, align 4
  store i32 %v0_10f60, i32* @r5, align 4
  %v3_10f74 = call i32 @function_118dc(i32 %v0_10f60, i32 ptrtoint (i32* @global_var_17838.270 to i32), i32 7)
  store i32 5, i32* @r0, align 4
  %v0_10f7c = load i32, i32* @r5, align 4
  store i32 %v0_10f7c, i32* @global_var_22470.271, align 4
  %v0_10f80 = load i32, i32* @r6, align 4
  %v1_10f80 = trunc i32 %v0_10f80 to i16
  store i16 %v1_10f80, i16* bitcast (i32* @global_var_22474.272 to i16*), align 4
  %v0_10f84 = call i32 @function_12f2c()
  store i32 %v0_10f84, i32* @r5, align 4
  %v3_10f94 = call i32 @function_118dc(i32 %v0_10f84, i32 ptrtoint (i32* @global_var_17840.274 to i32), i32 5)
  store i32 4, i32* @r0, align 4
  store i16 5, i16* bitcast (i32* @global_var_2247c.275 to i16*), align 4
  %v0_10fa4 = load i32, i32* @r5, align 4
  store i32 %v0_10fa4, i32* @global_var_22478.276, align 4
  %v0_10fa8 = call i32 @function_12f2c()
  store i32 %v0_10fa8, i32* @r5, align 4
  %v3_10fb8 = call i32 @function_118dc(i32 %v0_10fa8, i32 ptrtoint (i32* @global_var_17848.278 to i32), i32 4)
  store i32 14, i32* @r0, align 4
  %v0_10fc4 = load i32, i32* @r5, align 4
  store i32 %v0_10fc4, i32* @global_var_22480.279, align 4
  store i16 4, i16* bitcast (i32* @global_var_22484.280 to i16*), align 4
  %v0_10fcc = call i32 @function_12f2c()
  store i32 %v0_10fcc, i32* @r5, align 4
  %v3_10fdc = call i32 @function_118dc(i32 %v0_10fcc, i32 ptrtoint (i32* @global_var_17850.282 to i32), i32 14)
  store i32 6, i32* @r0, align 4
  store i16 14, i16* bitcast (i32* @global_var_2248c.283 to i16*), align 4
  %v0_10fec = load i32, i32* @r5, align 4
  store i32 %v0_10fec, i32* @global_var_22488.284, align 4
  %v0_10ff0 = call i32 @function_12f2c()
  store i32 6, i32* @r7, align 4
  store i32 %v0_10ff0, i32* @r5, align 4
  %v3_11004 = call i32 @function_118dc(i32 %v0_10ff0, i32 ptrtoint (i32* @global_var_17860.286 to i32), i32 6)
  store i32 8, i32* @r0, align 4
  %v0_1100c = load i32, i32* @r5, align 4
  store i32 %v0_1100c, i32* @global_var_22490.287, align 4
  %v0_11010 = load i32, i32* @r7, align 4
  %v1_11010 = trunc i32 %v0_11010 to i16
  store i16 %v1_11010, i16* bitcast (i32* @global_var_22494.288 to i16*), align 4
  %v0_11014 = call i32 @function_12f2c()
  store i32 8, i32* @sl, align 4
  store i32 %v0_11014, i32* @r5, align 4
  %v3_11028 = call i32 @function_118dc(i32 %v0_11014, i32 ptrtoint (i32* @global_var_17868.290 to i32), i32 8)
  %v0_1102c = load i32, i32* @r6, align 4
  store i32 %v0_1102c, i32* @r0, align 4
  %v0_11030 = load i32, i32* @r5, align 4
  store i32 %v0_11030, i32* @global_var_22498.291, align 4
  %v0_11034 = load i32, i32* @sl, align 4
  %v1_11034 = trunc i32 %v0_11034 to i16
  store i16 %v1_11034, i16* bitcast (i32* @global_var_2249c.292 to i16*), align 4
  %v0_11038 = call i32 @function_12f2c()
  %v0_1103c = load i32, i32* @r6, align 4
  store i32 %v0_11038, i32* @r5, align 4
  %v3_11048 = call i32 @function_118dc(i32 %v0_11038, i32 ptrtoint (i32* @global_var_17874.294 to i32), i32 %v0_1103c)
  store i32 16, i32* @r0, align 4
  %v0_11050 = load i32, i32* @r5, align 4
  store i32 %v0_11050, i32* @global_var_224a0.295, align 4
  %v0_11054 = load i32, i32* @r6, align 4
  %v1_11054 = trunc i32 %v0_11054 to i16
  store i16 %v1_11054, i16* bitcast (i32* @global_var_224a4.296 to i16*), align 4
  %v0_11058 = call i32 @function_12f2c()
  store i32 %v0_11058, i32* @r5, align 4
  %v3_11068 = call i32 @function_118dc(i32 %v0_11058, i32 ptrtoint (i32* @global_var_1787c.298 to i32), i32 16)
  store i32 14, i32* @r0, align 4
  %v0_11074 = load i32, i32* @r5, align 4
  store i32 %v0_11074, i32* @global_var_224a8.299, align 4
  store i16 16, i16* bitcast (i32* @global_var_224ac.300 to i16*), align 4
  %v0_1107c = call i32 @function_12f2c()
  store i32 %v0_1107c, i32* @r5, align 4
  %v3_1108c = call i32 @function_118dc(i32 %v0_1107c, i32 ptrtoint (i32* @global_var_17890.302 to i32), i32 14)
  store i32 9, i32* @r0, align 4
  store i16 14, i16* bitcast (i32* @global_var_224b4.303 to i16*), align 4
  %v0_1109c = load i32, i32* @r5, align 4
  store i32 %v0_1109c, i32* @global_var_224b0.304, align 4
  %v0_110a0 = call i32 @function_12f2c()
  store i32 9, i32* @sb, align 4
  store i32 %v0_110a0, i32* @r5, align 4
  %v3_110b4 = call i32 @function_118dc(i32 %v0_110a0, i32 ptrtoint (i32* @global_var_178a0.306 to i32), i32 9)
  store i32 19, i32* @r0, align 4
  %v0_110bc = load i32, i32* @r5, align 4
  store i32 %v0_110bc, i32* @global_var_224b8.307, align 4
  %v0_110c0 = load i32, i32* @sb, align 4
  %v1_110c0 = trunc i32 %v0_110c0 to i16
  store i16 %v1_110c0, i16* bitcast (i32* @global_var_224bc.308 to i16*), align 4
  %v0_110c4 = call i32 @function_12f2c()
  store i32 19, i32* @fp, align 4
  store i32 %v0_110c4, i32* @r5, align 4
  %v3_110d8 = call i32 @function_118dc(i32 %v0_110c4, i32 ptrtoint (i32* @global_var_178ac.310 to i32), i32 19)
  store i32 23, i32* @r0, align 4
  %v0_110e0 = load i32, i32* @r5, align 4
  store i32 %v0_110e0, i32* @global_var_224c0.311, align 4
  %v0_110e4 = load i32, i32* @fp, align 4
  %v1_110e4 = trunc i32 %v0_110e4 to i16
  store i16 %v1_110e4, i16* bitcast (i32* @global_var_224c4.312 to i16*), align 4
  %v0_110e8 = call i32 @function_12f2c()
  store i32 23, i32* @r8, align 4
  store i32 %v0_110e8, i32* @r5, align 4
  %v3_110fc = call i32 @function_118dc(i32 %v0_110e8, i32 ptrtoint (i32* @global_var_178c0.314 to i32), i32 23)
  %v0_11100 = load i32, i32* @sl, align 4
  store i32 %v0_11100, i32* @r0, align 4
  %v0_11104 = load i32, i32* @r5, align 4
  store i32 %v0_11104, i32* @global_var_224c8.315, align 4
  %v0_11108 = load i32, i32* @r8, align 4
  %v1_11108 = trunc i32 %v0_11108 to i16
  store i16 %v1_11108, i16* bitcast (i32* @global_var_224cc.316 to i16*), align 4
  %v0_1110c = call i32 @function_12f2c()
  %v0_11114 = load i32, i32* @sl, align 4
  store i32 %v0_1110c, i32* @r5, align 4
  %v4_1111c = call i32 @function_118dc(i32 %v0_1110c, i32 ptrtoint ([9 x i8]* @global_var_178d8.318 to i32), i32 %v0_11114)
  store i32 14, i32* @r0, align 4
  %v0_11124 = load i32, i32* @r5, align 4
  store i32 %v0_11124, i32* @global_var_224d0.319, align 4
  %v0_11128 = load i32, i32* @sl, align 4
  %v1_11128 = trunc i32 %v0_11128 to i16
  store i16 %v1_11128, i16* bitcast (i32* @global_var_224d4.320 to i16*), align 4
  %v0_1112c = call i32 @function_12f2c()
  store i32 %v0_1112c, i32* @r5, align 4
  %v3_1113c = call i32 @function_118dc(i32 %v0_1112c, i32 ptrtoint (i32* @global_var_178e4.322 to i32), i32 14)
  %v0_11144 = load i32, i32* @fp, align 4
  store i32 %v0_11144, i32* @r0, align 4
  %v0_11148 = load i32, i32* @r5, align 4
  store i32 %v0_11148, i32* @global_var_224d8.323, align 4
  store i16 14, i16* bitcast (i32* @global_var_224dc.324 to i16*), align 4
  %v0_11150 = call i32 @function_12f2c()
  %v0_11158 = load i32, i32* @fp, align 4
  store i32 %v0_11150, i32* @r5, align 4
  %v3_11160 = call i32 @function_118dc(i32 %v0_11150, i32 ptrtoint (i32* @global_var_178f4.326 to i32), i32 %v0_11158)
  %v0_11164 = load i32, i32* @r8, align 4
  store i32 %v0_11164, i32* @r0, align 4
  %v0_11168 = load i32, i32* @r5, align 4
  store i32 %v0_11168, i32* @global_var_224e0.327, align 4
  %v0_1116c = load i32, i32* @fp, align 4
  %v1_1116c = trunc i32 %v0_1116c to i16
  store i16 %v1_1116c, i16* bitcast (i32* @global_var_224e4.328 to i16*), align 4
  %v0_11170 = call i32 @function_12f2c()
  %v0_11178 = load i32, i32* @r8, align 4
  store i32 %v0_11170, i32* @r5, align 4
  %v3_11180 = call i32 @function_118dc(i32 %v0_11170, i32 ptrtoint (i32* @global_var_17908.330 to i32), i32 %v0_11178)
  store i32 24, i32* @r0, align 4
  %v0_11188 = load i32, i32* @r5, align 4
  store i32 %v0_11188, i32* @global_var_224e8.331, align 4
  %v0_1118c = load i32, i32* @r8, align 4
  %v1_1118c = trunc i32 %v0_1118c to i16
  store i16 %v1_1118c, i16* bitcast (i32* @global_var_224ec.332 to i16*), align 4
  %v0_11190 = call i32 @function_12f2c()
  store i32 %v0_11190, i32* @r5, align 4
  %v3_111a0 = call i32 @function_118dc(i32 %v0_11190, i32 ptrtoint (i32* @global_var_17920.334 to i32), i32 24)
  store i32 15, i32* @r0, align 4
  store i16 24, i16* bitcast (i32* @global_var_224f4.335 to i16*), align 4
  %v0_111b0 = load i32, i32* @r5, align 4
  store i32 %v0_111b0, i32* @global_var_224f0.336, align 4
  %v0_111b4 = call i32 @function_12f2c()
  store i32 %v0_111b4, i32* @r5, align 4
  %v3_111c4 = call i32 @function_118dc(i32 %v0_111b4, i32 ptrtoint (i32* @global_var_1793c.338 to i32), i32 15)
  %v0_111cc = load i32, i32* @r7, align 4
  store i32 %v0_111cc, i32* @r0, align 4
  %v0_111d0 = load i32, i32* @r5, align 4
  store i32 %v0_111d0, i32* @global_var_224f8.339, align 4
  store i16 15, i16* bitcast (i32* @global_var_224fc.340 to i16*), align 4
  %v0_111d8 = call i32 @function_12f2c()
  %v0_111dc = load i32, i32* @r7, align 4
  store i32 %v0_111d8, i32* @r5, align 4
  %v4_111e8 = call i32 @function_118dc(i32 %v0_111d8, i32 ptrtoint ([7 x i8]* @global_var_1794c.342 to i32), i32 %v0_111dc)
  %v0_111ec = load i32, i32* @r6, align 4
  store i32 %v0_111ec, i32* @r0, align 4
  %v0_111f0 = load i32, i32* @r5, align 4
  store i32 %v0_111f0, i32* @global_var_22500.343, align 4
  %v0_111f4 = load i32, i32* @r7, align 4
  %v1_111f4 = trunc i32 %v0_111f4 to i16
  store i16 %v1_111f4, i16* bitcast (i32* @global_var_22504.344 to i16*), align 4
  %v0_111f8 = call i32 @function_12f2c()
  %v0_111fc = load i32, i32* @r6, align 4
  store i32 %v0_111f8, i32* @r5, align 4
  %v4_11208 = call i32 @function_118dc(i32 %v0_111f8, i32 ptrtoint ([8 x i8]* @global_var_17954.346 to i32), i32 %v0_111fc)
  %v0_1120c = load i32, i32* @r6, align 4
  store i32 %v0_1120c, i32* @r0, align 4
  %v0_11210 = load i32, i32* @r5, align 4
  store i32 %v0_11210, i32* @global_var_22508.347, align 4
  %v1_11214 = trunc i32 %v0_1120c to i16
  store i16 %v1_11214, i16* bitcast (i32* @global_var_2250c.348 to i16*), align 4
  %v0_11218 = call i32 @function_12f2c()
  %v0_1121c = load i32, i32* @r6, align 4
  store i32 %v0_11218, i32* @r5, align 4
  %v4_11228 = call i32 @function_118dc(i32 %v0_11218, i32 ptrtoint ([8 x i8]* @global_var_1795c.350 to i32), i32 %v0_1121c)
  store i32 3, i32* @r0, align 4
  %v0_11230 = load i32, i32* @r5, align 4
  store i32 %v0_11230, i32* @global_var_22510.351, align 4
  %v0_11234 = load i32, i32* @r6, align 4
  %v1_11234 = trunc i32 %v0_11234 to i16
  store i16 %v1_11234, i16* bitcast (i32* @global_var_22514.352 to i16*), align 4
  %v0_11238 = call i32 @function_12f2c()
  store i32 %v0_11238, i32* @r5, align 4
  %v4_11248 = call i32 @function_118dc(i32 %v0_11238, i32 ptrtoint ([4 x i8]* @global_var_17964.354 to i32), i32 3)
  %v0_11250 = load i32, i32* @r8, align 4
  store i32 %v0_11250, i32* @r0, align 4
  store i16 3, i16* bitcast (i32* @global_var_2251c.355 to i16*), align 4
  %v0_11258 = load i32, i32* @r5, align 4
  store i32 %v0_11258, i32* @global_var_22518.356, align 4
  %v0_1125c = call i32 @function_12f2c()
  %v0_11264 = load i32, i32* @r8, align 4
  store i32 %v0_1125c, i32* @r5, align 4
  %v3_1126c = call i32 @function_118dc(i32 %v0_1125c, i32 ptrtoint (i32* @global_var_17968.358 to i32), i32 %v0_11264)
  store i32 28, i32* @r0, align 4
  %v0_11274 = load i32, i32* @r5, align 4
  store i32 %v0_11274, i32* @global_var_22520.359, align 4
  %v0_11278 = load i32, i32* @r8, align 4
  %v1_11278 = trunc i32 %v0_11278 to i16
  store i16 %v1_11278, i16* bitcast (i32* @global_var_22524.360 to i16*), align 4
  %v0_1127c = call i32 @function_12f2c()
  store i32 %v0_1127c, i32* @r5, align 4
  %v3_1128c = call i32 @function_118dc(i32 %v0_1127c, i32 ptrtoint (i32* @global_var_17980.362 to i32), i32 28)
  %v0_11294 = load i32, i32* @sb, align 4
  store i32 %v0_11294, i32* @r0, align 4
  %v0_11298 = load i32, i32* @r5, align 4
  store i32 %v0_11298, i32* @global_var_22528.363, align 4
  store i16 28, i16* bitcast (i32* @global_var_2252c.364 to i16*), align 4
  %v0_112a0 = call i32 @function_12f2c()
  %v0_112a4 = load i32, i32* @sb, align 4
  store i32 %v0_112a0, i32* @r5, align 4
  %v4_112b0 = call i32 @function_118dc(i32 %v0_112a0, i32 ptrtoint ([10 x i8]* @global_var_179a0.366 to i32), i32 %v0_112a4)
  %v0_112b4 = load i32, i32* @sl, align 4
  store i32 %v0_112b4, i32* @r0, align 4
  %v0_112b8 = load i32, i32* @r5, align 4
  store i32 %v0_112b8, i32* @global_var_22530.367, align 4
  %v0_112bc = load i32, i32* @sb, align 4
  %v1_112bc = trunc i32 %v0_112bc to i16
  store i16 %v1_112bc, i16* bitcast (i32* @global_var_22534.368 to i16*), align 4
  %v0_112c0 = call i32 @function_12f2c()
  %v0_112c8 = load i32, i32* @sl, align 4
  store i32 %v0_112c0, i32* @r5, align 4
  %v4_112d0 = call i32 @function_118dc(i32 %v0_112c0, i32 ptrtoint ([9 x i8]* @global_var_178d8.318 to i32), i32 %v0_112c8)
  store i32 5, i32* @r0, align 4
  %v0_112d8 = load i32, i32* @r5, align 4
  store i32 %v0_112d8, i32* @global_var_22538.369, align 4
  %v0_112dc = load i32, i32* @sl, align 4
  %v1_112dc = trunc i32 %v0_112dc to i16
  store i16 %v1_112dc, i16* bitcast (i32* @global_var_2253c.370 to i16*), align 4
  %v0_112e0 = call i32 @function_12f2c()
  store i32 %v0_112e0, i32* @r5, align 4
  %v4_112f0 = call i32 @function_118dc(i32 %v0_112e0, i32 ptrtoint ([6 x i8]* @global_var_179ac.372 to i32), i32 5)
  %v0_112fc = load i32, i32* @r7, align 4
  store i32 %v0_112fc, i32* @r0, align 4
  %v2_11300 = load i32, i32* @r4, align 4
  %v4_11300 = add i32 %v2_11300, 260
  %v5_11300 = inttoptr i32 %v4_11300 to i16*
  store i16 5, i16* %v5_11300, align 2
  %v0_11304 = load i32, i32* @r5, align 4
  store i32 %v0_11304, i32* @global_var_22540.373, align 4
  %v0_11308 = call i32 @function_12f2c()
  %v0_1130c = load i32, i32* @r7, align 4
  store i32 %v0_11308, i32* @r5, align 4
  %v4_11318 = call i32 @function_118dc(i32 %v0_11308, i32 ptrtoint ([7 x i8]* @global_var_179b4.375 to i32), i32 %v0_1130c)
  store i32 16, i32* @r0, align 4
  %v0_11324 = load i32, i32* @r7, align 4
  %v1_11324 = trunc i32 %v0_11324 to i16
  %v2_11324 = load i32, i32* @r4, align 4
  %v4_11324 = add i32 %v2_11324, 268
  %v5_11324 = inttoptr i32 %v4_11324 to i16*
  store i16 %v1_11324, i16* %v5_11324, align 2
  %v0_11328 = load i32, i32* @r5, align 4
  store i32 %v0_11328, i32* @global_var_22548.376, align 4
  %v0_1132c = call i32 @function_12f2c()
  store i32 %v0_1132c, i32* %r5.global-to-local, align 4
  %v3_1133c = call i32 @function_118dc(i32 %v0_1132c, i32 ptrtoint (i32* @global_var_179bc.378 to i32), i32 16)
  store i32 21, i32* @r0, align 4
  %v2_1134c = load i32, i32* @r4, align 4
  %v4_1134c = add i32 %v2_1134c, 276
  %v5_1134c = inttoptr i32 %v4_1134c to i16*
  store i16 16, i16* %v5_1134c, align 2
  %v0_11350 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11350, i32* @global_var_22550.379, align 4
  %v0_11354 = load i32, i32* @r0, align 4
  store i32 %v0_11354, i32* @r5, align 4
  %v0_11358 = call i32 @function_12f2c()
  %v0_1135c = load i32, i32* @r5, align 4
  store i32 %v0_11358, i32* @r6, align 4
  %v3_11368 = call i32 @function_118dc(i32 %v0_11358, i32 ptrtoint (i32* @global_var_179d0.381 to i32), i32 %v0_1135c)
  %v0_11370 = load i32, i32* @r5, align 4
  store i32 %v0_11370, i32* @r0, align 4
  %v1_11374 = trunc i32 %v0_11370 to i16
  %v2_11374 = load i32, i32* @r4, align 4
  %v4_11374 = add i32 %v2_11374, 284
  %v5_11374 = inttoptr i32 %v4_11374 to i16*
  store i16 %v1_11374, i16* %v5_11374, align 2
  %v0_11378 = load i32, i32* @r6, align 4
  store i32 %v0_11378, i32* @global_var_22558.382, align 4
  %v0_1137c = call i32 @function_12f2c()
  %v0_11380 = load i32, i32* @r5, align 4
  store i32 %v0_1137c, i32* @r6, align 4
  %v3_1138c = call i32 @function_118dc(i32 %v0_1137c, i32 ptrtoint (i32* @global_var_179e8.384 to i32), i32 %v0_11380)
  store i32 17, i32* @r0, align 4
  %v0_11398 = load i32, i32* @r5, align 4
  %v1_11398 = trunc i32 %v0_11398 to i16
  %v2_11398 = load i32, i32* @r4, align 4
  %v4_11398 = add i32 %v2_11398, 292
  %v5_11398 = inttoptr i32 %v4_11398 to i16*
  store i16 %v1_11398, i16* %v5_11398, align 2
  %v0_1139c = load i32, i32* @r6, align 4
  store i32 %v0_1139c, i32* @global_var_22560.385, align 4
  %v0_113a0 = call i32 @function_12f2c()
  store i32 %v0_113a0, i32* @r5, align 4
  %v3_113b0 = call i32 @function_118dc(i32 %v0_113a0, i32 ptrtoint (i32* @global_var_17a00.387 to i32), i32 17)
  store i32 11, i32* @r0, align 4
  %v2_113c0 = load i32, i32* @r4, align 4
  %v4_113c0 = add i32 %v2_113c0, 300
  %v5_113c0 = inttoptr i32 %v4_113c0 to i16*
  store i16 17, i16* %v5_113c0, align 2
  %v0_113c4 = load i32, i32* @r5, align 4
  store i32 %v0_113c4, i32* @global_var_22568.388, align 4
  %v0_113c8 = call i32 @function_12f2c()
  store i32 %v0_113c8, i32* @r5, align 4
  %v0_113d8 = load i32, i32* @r7, align 4
  %v1_113d8 = add i32 %v0_113d8, 5
  store i32 %v1_113d8, i32* @r7, align 4
  %v4_113dc = call i32 @function_118dc(i32 %v0_113c8, i32 ptrtoint ([12 x i8]* @global_var_17a14.390 to i32), i32 11)
  %v0_113e4 = load i32, i32* @r8, align 4
  store i32 %v0_113e4, i32* @r0, align 4
  %v0_113e8 = load i32, i32* @r7, align 4
  %v1_113e8 = trunc i32 %v0_113e8 to i16
  %v2_113e8 = load i32, i32* @r4, align 4
  %v4_113e8 = add i32 %v2_113e8, 308
  %v5_113e8 = inttoptr i32 %v4_113e8 to i16*
  store i16 %v1_113e8, i16* %v5_113e8, align 2
  %v0_113ec = load i32, i32* @r5, align 4
  store i32 %v0_113ec, i32* @global_var_22570.391, align 4
  %v0_113f0 = call i32 @function_12f2c()
  %v0_113f8 = load i32, i32* @r8, align 4
  store i32 %v0_113f0, i32* @r5, align 4
  %v3_11400 = call i32 @function_118dc(i32 %v0_113f0, i32 ptrtoint (i32* @global_var_17a20.393 to i32), i32 %v0_113f8)
  store i32 83, i32* @r0, align 4
  %v0_1140c = load i32, i32* @r8, align 4
  %v1_1140c = trunc i32 %v0_1140c to i16
  %v2_1140c = load i32, i32* @r4, align 4
  %v4_1140c = add i32 %v2_1140c, 316
  %v5_1140c = inttoptr i32 %v4_1140c to i16*
  store i16 %v1_1140c, i16* %v5_1140c, align 2
  %v0_11410 = load i32, i32* @r5, align 4
  store i32 %v0_11410, i32* @global_var_22578.394, align 4
  %v0_11414 = call i32 @function_12f2c()
  store i32 %v0_11414, i32* @r5, align 4
  %v3_11424 = call i32 @function_118dc(i32 %v0_11414, i32 ptrtoint (i32* @global_var_17d44.396 to i32), i32 83)
  store i32 32, i32* @r0, align 4
  %v2_11434 = load i32, i32* @r4, align 4
  %v4_11434 = add i32 %v2_11434, 324
  %v5_11434 = inttoptr i32 %v4_11434 to i16*
  store i16 83, i16* %v5_11434, align 2
  %v0_11438 = load i32, i32* @r5, align 4
  store i32 %v0_11438, i32* @global_var_22580.397, align 4
  %v0_1143c = call i32 @function_12f2c()
  store i32 %v0_1143c, i32* @r5, align 4
  %v3_1144c = call i32 @function_118dc(i32 %v0_1143c, i32 ptrtoint (i32* @global_var_17d98.399 to i32), i32 32)
  store i32 48, i32* @r0, align 4
  %v2_1145c = load i32, i32* @r4, align 4
  %v4_1145c = add i32 %v2_1145c, 332
  %v5_1145c = inttoptr i32 %v4_1145c to i16*
  store i16 32, i16* %v5_1145c, align 2
  %v0_11460 = load i32, i32* @r5, align 4
  store i32 %v0_11460, i32* @global_var_22588.400, align 4
  %v0_11464 = call i32 @function_12f2c()
  store i32 %v0_11464, i32* @r5, align 4
  %v3_11474 = call i32 @function_118dc(i32 %v0_11464, i32 ptrtoint (i32* @global_var_17a38.402 to i32), i32 48)
  store i32 12, i32* @r0, align 4
  %v2_11484 = load i32, i32* @r4, align 4
  %v4_11484 = add i32 %v2_11484, 340
  %v5_11484 = inttoptr i32 %v4_11484 to i16*
  store i16 48, i16* %v5_11484, align 2
  %v0_11488 = load i32, i32* @r5, align 4
  store i32 %v0_11488, i32* @global_var_22590.403, align 4
  %v0_1148c = call i32 @function_12f2c()
  store i32 12, i32* @r6, align 4
  store i32 %v0_1148c, i32* @r5, align 4
  %v3_114a0 = call i32 @function_118dc(i32 %v0_1148c, i32 ptrtoint (i32* @global_var_17a6c.405 to i32), i32 12)
  %v0_114a8 = load i32, i32* @sb, align 4
  store i32 %v0_114a8, i32* @r0, align 4
  %v0_114ac = load i32, i32* @r6, align 4
  %v1_114ac = trunc i32 %v0_114ac to i16
  %v2_114ac = load i32, i32* @r4, align 4
  %v4_114ac = add i32 %v2_114ac, 348
  %v5_114ac = inttoptr i32 %v4_114ac to i16*
  store i16 %v1_114ac, i16* %v5_114ac, align 2
  %v0_114b0 = load i32, i32* @r5, align 4
  store i32 %v0_114b0, i32* @global_var_22598.406, align 4
  %v0_114b4 = call i32 @function_12f2c()
  %v0_114b8 = load i32, i32* @sb, align 4
  store i32 %v0_114b4, i32* @r5, align 4
  %v3_114c4 = call i32 @function_118dc(i32 %v0_114b4, i32 ptrtoint (i32* @global_var_17a7c.408 to i32), i32 %v0_114b8)
  store i32 10, i32* @r0, align 4
  %v0_114d0 = load i32, i32* @sb, align 4
  %v1_114d0 = trunc i32 %v0_114d0 to i16
  %v2_114d0 = load i32, i32* @r4, align 4
  %v4_114d0 = add i32 %v2_114d0, 356
  %v5_114d0 = inttoptr i32 %v4_114d0 to i16*
  store i16 %v1_114d0, i16* %v5_114d0, align 2
  %v0_114d4 = load i32, i32* @r5, align 4
  store i32 %v0_114d4, i32* @global_var_225a0.409, align 4
  %v0_114d8 = call i32 @function_12f2c()
  store i32 %v0_114d8, i32* @r5, align 4
  %v0_114e8 = load i32, i32* @sb, align 4
  %v1_114e8 = add i32 %v0_114e8, 1
  store i32 %v1_114e8, i32* @sb, align 4
  %v3_114ec = call i32 @function_118dc(i32 %v0_114d8, i32 ptrtoint (i32* @global_var_17a88.411 to i32), i32 10)
  %v0_114f4 = load i32, i32* @r6, align 4
  store i32 %v0_114f4, i32* @r0, align 4
  %v0_114f8 = load i32, i32* @sb, align 4
  %v1_114f8 = trunc i32 %v0_114f8 to i16
  %v2_114f8 = load i32, i32* @r4, align 4
  %v4_114f8 = add i32 %v2_114f8, 364
  %v5_114f8 = inttoptr i32 %v4_114f8 to i16*
  store i16 %v1_114f8, i16* %v5_114f8, align 2
  %v0_114fc = load i32, i32* @r5, align 4
  store i32 %v0_114fc, i32* @global_var_225a8.412, align 4
  %v0_11500 = call i32 @function_12f2c()
  %v0_11504 = load i32, i32* @r6, align 4
  store i32 %v0_11500, i32* @r5, align 4
  %v3_11510 = call i32 @function_118dc(i32 %v0_11500, i32 ptrtoint (i32* @global_var_17a94.414 to i32), i32 %v0_11504)
  store i32 16, i32* @r0, align 4
  %v0_1151c = load i32, i32* @r6, align 4
  %v1_1151c = trunc i32 %v0_1151c to i16
  %v2_1151c = load i32, i32* @r4, align 4
  %v4_1151c = add i32 %v2_1151c, 372
  %v5_1151c = inttoptr i32 %v4_1151c to i16*
  store i16 %v1_1151c, i16* %v5_1151c, align 2
  %v0_11520 = load i32, i32* @r5, align 4
  store i32 %v0_11520, i32* @global_var_225b0.415, align 4
  %v0_11524 = call i32 @function_12f2c()
  store i32 %v0_11524, i32* @r5, align 4
  %v3_11534 = call i32 @function_118dc(i32 %v0_11524, i32 ptrtoint (i32* @global_var_17aa4.417 to i32), i32 16)
  %v0_11540 = load i32, i32* @fp, align 4
  store i32 %v0_11540, i32* @r0, align 4
  %v2_11544 = load i32, i32* @r4, align 4
  %v4_11544 = add i32 %v2_11544, 380
  %v5_11544 = inttoptr i32 %v4_11544 to i16*
  store i16 16, i16* %v5_11544, align 2
  %v0_11548 = load i32, i32* @r5, align 4
  store i32 %v0_11548, i32* @global_var_225b8.418, align 4
  %v0_1154c = call i32 @function_12f2c()
  %v0_11554 = load i32, i32* @fp, align 4
  store i32 %v0_1154c, i32* @r5, align 4
  %v3_1155c = call i32 @function_118dc(i32 %v0_1154c, i32 ptrtoint (i32* @global_var_17ab8.420 to i32), i32 %v0_11554)
  %v0_11564 = load i32, i32* @sl, align 4
  store i32 %v0_11564, i32* @r0, align 4
  %v0_11568 = load i32, i32* @fp, align 4
  %v1_11568 = trunc i32 %v0_11568 to i16
  %v2_11568 = load i32, i32* @r4, align 4
  %v4_11568 = add i32 %v2_11568, 388
  %v5_11568 = inttoptr i32 %v4_11568 to i16*
  store i16 %v1_11568, i16* %v5_11568, align 2
  %v0_1156c = load i32, i32* @r5, align 4
  store i32 %v0_1156c, i32* @global_var_225c0.421, align 4
  %v0_11570 = call i32 @function_12f2c()
  %v0_11578 = load i32, i32* @sl, align 4
  store i32 %v0_11570, i32* @r5, align 4
  %v4_11580 = call i32 @function_118dc(i32 %v0_11570, i32 ptrtoint ([9 x i8]* @global_var_17acc.423 to i32), i32 %v0_11578)
  %v0_11588 = load i32, i32* @r7, align 4
  store i32 %v0_11588, i32* @r0, align 4
  %v0_1158c = load i32, i32* @sl, align 4
  %v1_1158c = trunc i32 %v0_1158c to i16
  %v2_1158c = load i32, i32* @r4, align 4
  %v4_1158c = add i32 %v2_1158c, 396
  %v5_1158c = inttoptr i32 %v4_1158c to i16*
  store i16 %v1_1158c, i16* %v5_1158c, align 2
  %v0_11590 = load i32, i32* @r5, align 4
  store i32 %v0_11590, i32* @global_var_225c8.424, align 4
  %v0_11594 = call i32 @function_12f2c()
  %v0_1159c = load i32, i32* @r7, align 4
  store i32 %v0_11594, i32* @r5, align 4
  %v3_115a4 = call i32 @function_118dc(i32 %v0_11594, i32 ptrtoint (i32* @global_var_17a2c.426 to i32), i32 %v0_1159c)
  %v0_115ac = load i32, i32* @r6, align 4
  store i32 %v0_115ac, i32* @r0, align 4
  %v0_115b0 = load i32, i32* @r7, align 4
  %v1_115b0 = trunc i32 %v0_115b0 to i16
  %v2_115b0 = load i32, i32* @r4, align 4
  %v4_115b0 = add i32 %v2_115b0, 404
  %v5_115b0 = inttoptr i32 %v4_115b0 to i16*
  store i16 %v1_115b0, i16* %v5_115b0, align 2
  %v0_115b4 = load i32, i32* @r5, align 4
  store i32 %v0_115b4, i32* @global_var_225d0.427, align 4
  %v0_115b8 = call i32 @function_12f2c()
  %v0_115bc = load i32, i32* @r6, align 4
  store i32 %v0_115b8, i32* @r5, align 4
  %v3_115c8 = call i32 @function_118dc(i32 %v0_115b8, i32 ptrtoint (i32* @global_var_17ad8.429 to i32), i32 %v0_115bc)
  store i32 18, i32* @r0, align 4
  %v0_115d4 = load i32, i32* @r6, align 4
  %v1_115d4 = trunc i32 %v0_115d4 to i16
  %v2_115d4 = load i32, i32* @r4, align 4
  %v4_115d4 = add i32 %v2_115d4, 412
  %v5_115d4 = inttoptr i32 %v4_115d4 to i16*
  store i16 %v1_115d4, i16* %v5_115d4, align 2
  %v0_115d8 = load i32, i32* @r5, align 4
  store i32 %v0_115d8, i32* @global_var_225d8.430, align 4
  %v0_115dc = call i32 @function_12f2c()
  store i32 %v0_115dc, i32* @r5, align 4
  %v3_115ec = call i32 @function_118dc(i32 %v0_115dc, i32 ptrtoint (i32* @global_var_17ae8.432 to i32), i32 18)
  store i32 25, i32* @r0, align 4
  %v2_115fc = load i32, i32* @r4, align 4
  %v4_115fc = add i32 %v2_115fc, 420
  %v5_115fc = inttoptr i32 %v4_115fc to i16*
  store i16 18, i16* %v5_115fc, align 2
  %v0_11600 = load i32, i32* @r5, align 4
  store i32 %v0_11600, i32* @global_var_225e0.433, align 4
  %v0_11604 = call i32 @function_12f2c()
  store i32 %v0_11604, i32* %r5.global-to-local, align 4
  %v3_11614 = call i32 @function_118dc(i32 %v0_11604, i32 ptrtoint (i32* @global_var_17afc.435 to i32), i32 25)
  store i32 115, i32* @r0, align 4
  %v2_11624 = load i32, i32* @r4, align 4
  %v4_11624 = add i32 %v2_11624, 428
  %v5_11624 = inttoptr i32 %v4_11624 to i16*
  store i16 25, i16* %v5_11624, align 2
  %v0_11628 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11628, i32* @global_var_225e8.436, align 4
  %v0_1162c = load i32, i32* @r0, align 4
  store i32 %v0_1162c, i32* @r5, align 4
  %v0_11630 = call i32 @function_12f2c()
  %v0_11634 = load i32, i32* @r5, align 4
  store i32 %v0_11630, i32* @r6, align 4
  %v3_11640 = call i32 @function_118dc(i32 %v0_11630, i32 ptrtoint (i32* @global_var_17b18.438 to i32), i32 %v0_11634)
  %v0_11648 = load i32, i32* @r5, align 4
  store i32 %v0_11648, i32* @r0, align 4
  %v1_1164c = trunc i32 %v0_11648 to i16
  %v2_1164c = load i32, i32* @r4, align 4
  %v4_1164c = add i32 %v2_1164c, 436
  %v5_1164c = inttoptr i32 %v4_1164c to i16*
  store i16 %v1_1164c, i16* %v5_1164c, align 2
  %v0_11650 = load i32, i32* @r6, align 4
  store i32 %v0_11650, i32* @global_var_225f0.439, align 4
  %v0_11654 = call i32 @function_12f2c()
  %v0_11658 = load i32, i32* @r5, align 4
  store i32 %v0_11654, i32* @r6, align 4
  %v3_11664 = call i32 @function_118dc(i32 %v0_11654, i32 ptrtoint (i32* @global_var_17b8c.441 to i32), i32 %v0_11658)
  store i32 79, i32* @r0, align 4
  %v0_11670 = load i32, i32* @r5, align 4
  %v1_11670 = trunc i32 %v0_11670 to i16
  %v2_11670 = load i32, i32* @r4, align 4
  %v4_11670 = add i32 %v2_11670, 444
  %v5_11670 = inttoptr i32 %v4_11670 to i16*
  store i16 %v1_11670, i16* %v5_11670, align 2
  %v0_11674 = load i32, i32* @r6, align 4
  store i32 %v0_11674, i32* @global_var_225f8.442, align 4
  %v0_11678 = call i32 @function_12f2c()
  store i32 %v0_11678, i32* %r5.global-to-local, align 4
  %v3_11688 = call i32 @function_118dc(i32 %v0_11678, i32 ptrtoint (i32* @global_var_17c00.444 to i32), i32 79)
  store i32 114, i32* @r0, align 4
  %v2_11698 = load i32, i32* @r4, align 4
  %v4_11698 = add i32 %v2_11698, 452
  %v5_11698 = inttoptr i32 %v4_11698 to i16*
  store i16 79, i16* %v5_11698, align 2
  %v0_1169c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1169c, i32* @global_var_22600.445, align 4
  %v0_116a0 = load i32, i32* @r0, align 4
  store i32 %v0_116a0, i32* @r5, align 4
  %v0_116a4 = call i32 @function_12f2c()
  %v0_116a8 = load i32, i32* @r5, align 4
  store i32 %v0_116a4, i32* @r6, align 4
  %v3_116b4 = call i32 @function_118dc(i32 %v0_116a4, i32 ptrtoint (i32* @global_var_17c50.447 to i32), i32 %v0_116a8)
  %v0_116bc = load i32, i32* @r5, align 4
  store i32 %v0_116bc, i32* @r0, align 4
  %v1_116c0 = trunc i32 %v0_116bc to i16
  %v2_116c0 = load i32, i32* @r4, align 4
  %v4_116c0 = add i32 %v2_116c0, 460
  %v5_116c0 = inttoptr i32 %v4_116c0 to i16*
  store i16 %v1_116c0, i16* %v5_116c0, align 2
  %v0_116c4 = load i32, i32* @r6, align 4
  store i32 %v0_116c4, i32* @global_var_22608.448, align 4
  %v0_116c8 = call i32 @function_12f2c()
  %v0_116cc = load i32, i32* @r5, align 4
  store i32 %v0_116c8, i32* @r6, align 4
  %v3_116d8 = call i32 @function_118dc(i32 %v0_116c8, i32 ptrtoint (i32* @global_var_17cc4.450 to i32), i32 %v0_116cc)
  store i32 14, i32* @r0, align 4
  %v0_116e4 = load i32, i32* @r5, align 4
  %v1_116e4 = trunc i32 %v0_116e4 to i16
  %v2_116e4 = load i32, i32* @r4, align 4
  %v4_116e4 = add i32 %v2_116e4, 468
  %v5_116e4 = inttoptr i32 %v4_116e4 to i16*
  store i16 %v1_116e4, i16* %v5_116e4, align 2
  %v0_116e8 = load i32, i32* @r6, align 4
  store i32 %v0_116e8, i32* @global_var_22610.451, align 4
  %v0_116ec = call i32 @function_12f2c()
  store i32 %v0_116ec, i32* @r5, align 4
  %v3_116fc = call i32 @function_118dc(i32 %v0_116ec, i32 ptrtoint (i32* @global_var_178e4.322 to i32), i32 14)
  %v0_11708 = load i32, i32* @fp, align 4
  store i32 %v0_11708, i32* @r0, align 4
  %v2_1170c = load i32, i32* @r4, align 4
  %v4_1170c = add i32 %v2_1170c, 476
  %v5_1170c = inttoptr i32 %v4_1170c to i16*
  store i16 14, i16* %v5_1170c, align 2
  %v0_11710 = load i32, i32* @r5, align 4
  store i32 %v0_11710, i32* @global_var_22618.452, align 4
  %v0_11714 = call i32 @function_12f2c()
  %v0_1171c = load i32, i32* @fp, align 4
  store i32 %v0_11714, i32* @r5, align 4
  %v3_11724 = call i32 @function_118dc(i32 %v0_11714, i32 ptrtoint (i32* @global_var_178f4.326 to i32), i32 %v0_1171c)
  %v0_1172c = load i32, i32* @r8, align 4
  store i32 %v0_1172c, i32* @r0, align 4
  %v0_11730 = load i32, i32* @fp, align 4
  %v1_11730 = trunc i32 %v0_11730 to i16
  %v2_11730 = load i32, i32* @r4, align 4
  %v4_11730 = add i32 %v2_11730, 484
  %v5_11730 = inttoptr i32 %v4_11730 to i16*
  store i16 %v1_11730, i16* %v5_11730, align 2
  %v0_11734 = load i32, i32* @r5, align 4
  store i32 %v0_11734, i32* @global_var_22620.453, align 4
  %v0_11738 = call i32 @function_12f2c()
  %v0_11740 = load i32, i32* @r8, align 4
  store i32 %v0_11738, i32* @r5, align 4
  %v3_11748 = call i32 @function_118dc(i32 %v0_11738, i32 ptrtoint (i32* @global_var_178c0.314 to i32), i32 %v0_11740)
  %v0_11750 = load i32, i32* @sb, align 4
  store i32 %v0_11750, i32* @r0, align 4
  %v0_11754 = load i32, i32* @r8, align 4
  %v1_11754 = trunc i32 %v0_11754 to i16
  %v2_11754 = load i32, i32* @r4, align 4
  %v4_11754 = add i32 %v2_11754, 492
  %v5_11754 = inttoptr i32 %v4_11754 to i16*
  store i16 %v1_11754, i16* %v5_11754, align 2
  %v0_11758 = load i32, i32* @r5, align 4
  store i32 %v0_11758, i32* @global_var_22628.454, align 4
  %v0_1175c = call i32 @function_12f2c()
  %v0_11764 = load i32, i32* @sb, align 4
  store i32 %v0_1175c, i32* %r5.global-to-local, align 4
  %v4_1176c = call i32 @function_118dc(i32 %v0_1175c, i32 ptrtoint ([11 x i8]* @global_var_17d38.456 to i32), i32 %v0_11764)
  %v0_11774 = load i32, i32* @sb, align 4
  %v1_11774 = trunc i32 %v0_11774 to i16
  %v2_11774 = load i32, i32* @r4, align 4
  %v4_11774 = add i32 %v2_11774, 500
  %v5_11774 = inttoptr i32 %v4_11774 to i16*
  store i16 %v1_11774, i16* %v5_11774, align 2
  %v0_11778 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11778, i32* @global_var_22630.457, align 4
  store i32 %v3_10ee8, i32* @r4, align 4
  store i32 %v6_10ee8, i32* @r5, align 4
  store i32 %v9_10ee8, i32* @r6, align 4
  store i32 %v12_10ee8, i32* @r7, align 4
  store i32 %v15_10ee8, i32* @r8, align 4
  store i32 %v21_10ee8, i32* @sl, align 4
  store i32 %v24_10ee8, i32* @fp, align 4
  ret i32 %v4_1176c

; uselistorder directives
  uselistorder i32 %v0_1175c, { 1, 0 }
  uselistorder i32 %v0_11738, { 1, 0 }
  uselistorder i32 %v0_11714, { 1, 0 }
  uselistorder i32 %v0_116c8, { 1, 0 }
  uselistorder i32 %v0_116a4, { 1, 0 }
  uselistorder i32 %v0_11654, { 1, 0 }
  uselistorder i32 %v0_11630, { 1, 0 }
  uselistorder i32 %v0_115b8, { 1, 0 }
  uselistorder i32 %v0_11594, { 1, 0 }
  uselistorder i32 %v0_11570, { 1, 0 }
  uselistorder i32 %v0_1154c, { 1, 0 }
  uselistorder i32 %v0_11500, { 1, 0 }
  uselistorder i32 %v0_114b4, { 1, 0 }
  uselistorder i32 %v0_1148c, { 1, 0 }
  uselistorder i32 %v0_113f0, { 1, 0 }
  uselistorder i32 %v0_1137c, { 1, 0 }
  uselistorder i32 %v0_11358, { 1, 0 }
  uselistorder i32 %v0_11308, { 1, 0 }
  uselistorder i32 %v0_112c0, { 1, 0 }
  uselistorder i32 %v0_112a0, { 1, 0 }
  uselistorder i32 %v0_1125c, { 1, 0 }
  uselistorder i32 %v0_11218, { 1, 0 }
  uselistorder i32 %v0_111f8, { 1, 0 }
  uselistorder i32 %v0_111d8, { 1, 0 }
  uselistorder i32 %v0_11170, { 1, 0 }
  uselistorder i32 %v0_11150, { 1, 0 }
  uselistorder i32 %v0_1110c, { 1, 0 }
  uselistorder i32 %v0_110e8, { 1, 0 }
  uselistorder i32 %v0_110c4, { 1, 0 }
  uselistorder i32 %v0_110a0, { 1, 0 }
  uselistorder i32 %v0_11038, { 1, 0 }
  uselistorder i32 %v0_11014, { 1, 0 }
  uselistorder i32 %v0_10ff0, { 1, 0 }
  uselistorder i32 %v0_10f60, { 1, 0 }
  uselistorder i32 %v0_10f1c, { 1, 0 }
  uselistorder i32 %v0_10ef4, { 1, 0 }
  uselistorder i32 284, { 0, 4, 1, 2, 3, 5, 6, 7, 8, 9 }
  uselistorder i32 21, { 2, 3, 1, 0, 4 }
  uselistorder i32 23, { 0, 2, 3, 1, 4 }
  uselistorder i32 29, { 0, 9, 1, 6, 2, 7, 3, 8, 10, 4, 5 }
  uselistorder i32 (i32, i32, i32)* @function_118dc, { 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_22440.251 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @function_1186c(i8* %arg1) local_unnamed_addr {
dec_label_pc_1186c:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_11870 = load i8, i8* %arg1, align 1
  %v2_11874 = icmp eq i8 %v3_11870, 0
  %v0_11878 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_11874, i32 %v0_11878)
  br label %dec_label_pc_11880

dec_label_pc_11880:                               ; preds = %dec_label_pc_11880, %dec_label_pc_1186c
  %v0_11880 = phi i32 [ %v1_11880, %dec_label_pc_11880 ], [ 0, %dec_label_pc_1186c ]
  %v1_11880 = add i32 %v0_11880, 1
  %v2_11884 = add i32 %v1_11880, %tmp
  %v3_11884 = inttoptr i32 %v2_11884 to i8*
  %v4_11884 = load i8, i8* %v3_11884, align 1
  %v6_11884 = zext i8 %v4_11884 to i32
  store i32 %v6_11884, i32* @r3, align 4
  %v2_11888 = icmp eq i8 %v4_11884, 0
  br i1 %v2_11888, label %dec_label_pc_11890, label %dec_label_pc_11880

dec_label_pc_11890:                               ; preds = %dec_label_pc_11880
  ret i32 %v1_11880
}

define i32 @function_11894(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11894:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_11894 = load i8, i8* %arg1, align 1
  %v3_11894 = zext i8 %v2_11894 to i32
  %v2_11898 = icmp eq i8 %v2_11894, 0
  br i1 %v2_11898, label %bb, label %dec_label_pc_118a4

bb:                                               ; preds = %dec_label_pc_11894
  store i32 %v3_11894, i32* @ip, align 4
  br label %dec_label_pc_118b8

dec_label_pc_118a4:                               ; preds = %dec_label_pc_11894
  br label %dec_label_pc_118a8

dec_label_pc_118a8:                               ; preds = %dec_label_pc_118a8, %dec_label_pc_118a4
  %v0_118a8 = phi i32 [ %v1_118a8, %dec_label_pc_118a8 ], [ 0, %dec_label_pc_118a4 ]
  %v1_118a8 = add i32 %v0_118a8, 1
  store i32 %v1_118a8, i32* @ip, align 4
  %v2_118ac = add i32 %v1_118a8, %tmp
  %v3_118ac = inttoptr i32 %v2_118ac to i8*
  %v4_118ac = load i8, i8* %v3_118ac, align 1
  %v2_118b0 = icmp eq i8 %v4_118ac, 0
  br i1 %v2_118b0, label %dec_label_pc_118b8, label %dec_label_pc_118a8

dec_label_pc_118b8:                               ; preds = %dec_label_pc_118a8, %bb
  %v0_118b8 = phi i32 [ %v3_11894, %bb ], [ %v1_118a8, %dec_label_pc_118a8 ]
  br label %dec_label_pc_118c4

dec_label_pc_118c0:                               ; preds = %dec_label_pc_118c4
  %v0_118c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_118c0 = add i32 %v0_118c0, 1
  %v2_118c0 = inttoptr i32 %v1_118c0 to i8*
  %v3_118c0 = load i8, i8* %v2_118c0, align 1
  store i32 %v1_118c0, i32* %r1.global-to-local, align 4
  %v0_118c4.pr = load i32, i32* @r3, align 4
  br label %dec_label_pc_118c4

dec_label_pc_118c4:                               ; preds = %dec_label_pc_118b8, %dec_label_pc_118c0
  %v0_118cc.off0 = phi i8 [ %v2_11894, %dec_label_pc_118b8 ], [ %v3_118c0, %dec_label_pc_118c0 ]
  %v0_118c4 = phi i32 [ %v0_118b8, %dec_label_pc_118b8 ], [ %v0_118c4.pr, %dec_label_pc_118c0 ]
  %v1_118c4 = add i32 %v0_118c4, -1
  store i32 %v1_118c4, i32* @r3, align 4
  %v3_118c8 = icmp eq i32 %v0_118c4, 0
  %v2_118cc = load i32, i32* @r0, align 4
  %v3_118cc = inttoptr i32 %v2_118cc to i8*
  store i8 %v0_118cc.off0, i8* %v3_118cc, align 1
  %v4_118cc = load i32, i32* @r0, align 4
  %v5_118cc = add i32 %v4_118cc, 1
  store i32 %v5_118cc, i32* @r0, align 4
  br i1 %v3_118c8, label %dec_label_pc_118d4, label %dec_label_pc_118c0

dec_label_pc_118d4:                               ; preds = %dec_label_pc_118c4
  %v0_118d4 = load i32, i32* @ip, align 4
  ret i32 %v0_118d4

; uselistorder directives
  uselistorder i32 %v0_118c4, { 1, 0 }
  uselistorder i32 %v1_118a8, { 0, 1, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 0 }
  uselistorder label %dec_label_pc_118c4, { 1, 0 }
}

define i32 @function_118dc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_118dc:
  %v2_118dc = icmp eq i32 %arg3, 0
  %v0_118e0 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_118dc, i32 %v0_118e0)
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_118e8

dec_label_pc_118e8:                               ; preds = %dec_label_pc_118e8, %dec_label_pc_118dc
  %v0_118e8 = phi i32 [ %v1_118f0, %dec_label_pc_118e8 ], [ 0, %dec_label_pc_118dc ]
  %v2_118e8 = add i32 %v0_118e8, %arg2
  %v3_118e8 = inttoptr i32 %v2_118e8 to i8*
  %v4_118e8 = load i8, i8* %v3_118e8, align 1
  %v4_118ec = add i32 %v0_118e8, %arg1
  %v5_118ec = inttoptr i32 %v4_118ec to i8*
  store i8 %v4_118e8, i8* %v5_118ec, align 1
  %v0_118f0 = load i32, i32* @ip, align 4
  %v1_118f0 = add i32 %v0_118f0, 1
  store i32 %v1_118f0, i32* @ip, align 4
  %v9_118f4 = icmp eq i32 %v1_118f0, %arg3
  br i1 %v9_118f4, label %dec_label_pc_118fc, label %dec_label_pc_118e8

dec_label_pc_118fc:                               ; preds = %dec_label_pc_118e8
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_118f0, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_11900(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11900:
  %r2.global-to-local = alloca i32, align 4
  %v2_11900 = icmp eq i32 %arg2, 0
  %v0_11904 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_11900, i32 %v0_11904)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1190c

dec_label_pc_1190c:                               ; preds = %dec_label_pc_1190c, %dec_label_pc_11900
  %v2_11910 = phi i32 [ %v1_11914, %dec_label_pc_1190c ], [ 0, %dec_label_pc_11900 ]
  store i32 0, i32* @r3, align 4
  %v4_11910 = add i32 %v2_11910, %arg1
  %v5_11910 = inttoptr i32 %v4_11910 to i8*
  store i8 0, i8* %v5_11910, align 1
  %v0_11914 = load i32, i32* %r2.global-to-local, align 4
  %v1_11914 = add i32 %v0_11914, 1
  store i32 %v1_11914, i32* %r2.global-to-local, align 4
  %v9_11918 = icmp eq i32 %v1_11914, %arg2
  br i1 %v9_11918, label %dec_label_pc_11920, label %dec_label_pc_1190c

dec_label_pc_11920:                               ; preds = %dec_label_pc_1190c
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_11914, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_11924(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11924:
  %v7_11938 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_11938, label %dec_label_pc_11940, label %dec_label_pc_11948

dec_label_pc_11940:                               ; preds = %dec_label_pc_1195c, %dec_label_pc_11948, %dec_label_pc_11924, %dec_label_pc_11988
  %storemerge = phi i32 [ %v1_11988, %dec_label_pc_11988 ], [ -1, %dec_label_pc_11924 ], [ -1, %dec_label_pc_11948 ], [ -1, %dec_label_pc_1195c ]
  ret i32 %storemerge

dec_label_pc_11948:                               ; preds = %dec_label_pc_11924
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_11940, label %dec_label_pc_11950

dec_label_pc_11950:                               ; preds = %dec_label_pc_11948
  br label %dec_label_pc_11968

dec_label_pc_1195c:                               ; preds = %bb, %dec_label_pc_1197c
  %v1_119683 = phi i32 [ %v1_1197c, %dec_label_pc_1197c ], [ 0, %bb ]
  %v1_1195c = add i32 %v0_11988, 1
  %v9_11960 = icmp eq i32 %v1_1195c, %arg2
  br i1 %v9_11960, label %dec_label_pc_11940, label %dec_label_pc_11968

dec_label_pc_11968:                               ; preds = %dec_label_pc_1195c, %dec_label_pc_11950
  %v0_11988 = phi i32 [ %v1_1195c, %dec_label_pc_1195c ], [ 0, %dec_label_pc_11950 ]
  %v1_11968 = phi i32 [ %v1_119683, %dec_label_pc_1195c ], [ 0, %dec_label_pc_11950 ]
  %v2_11968 = add i32 %v1_11968, %arg3
  %v3_11968 = inttoptr i32 %v2_11968 to i8*
  %v4_11968 = load i8, i8* %v3_11968, align 1
  %v2_1196c = add i32 %v0_11988, %arg1
  %v3_1196c = inttoptr i32 %v2_1196c to i8*
  %v4_1196c = load i8, i8* %v3_1196c, align 1
  %v9_11970 = icmp eq i8 %v4_1196c, %v4_11968
  br i1 %v9_11970, label %dec_label_pc_1197c, label %bb

bb:                                               ; preds = %dec_label_pc_11968
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_1195c

dec_label_pc_1197c:                               ; preds = %dec_label_pc_11968
  %v1_1197c = add i32 %v1_11968, 1
  store i32 %v1_1197c, i32* @ip, align 4
  %v9_11980 = icmp eq i32 %v1_1197c, %arg4
  br i1 %v9_11980, label %dec_label_pc_11988, label %dec_label_pc_1195c

dec_label_pc_11988:                               ; preds = %dec_label_pc_1197c
  %v1_11988 = add i32 %v0_11988, 1
  br label %dec_label_pc_11940

; uselistorder directives
  uselistorder i32 %v1_1197c, { 1, 2, 0 }
  uselistorder i32 %v1_11968, { 1, 0 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1195c, { 1, 0 }
  uselistorder label %dec_label_pc_11940, { 3, 0, 1, 2 }
}

define i32 @function_11990(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11990:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_11990 = load i32, i32* @r4, align 4
  %v12_11990 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_119a0

dec_label_pc_119a0:                               ; preds = %.thread, %dec_label_pc_119b4, %bb, %dec_label_pc_11990
  %v0_119a0 = phi i32 [ %tmp, %dec_label_pc_11990 ], [ %v5_119a0, %bb ], [ %v5_119a0, %dec_label_pc_119b4 ], [ %v5_119a0, %.thread ]
  %v1_119a0 = inttoptr i32 %v0_119a0 to i8*
  %v2_119a0 = load i8, i8* %v1_119a0, align 1
  %v5_119a0 = add i32 %v0_119a0, 1
  store i32 %v5_119a0, i32* %r5.global-to-local, align 4
  %v7_119a4 = icmp eq i8 %v2_119a0, 9
  br i1 %v7_119a4, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_119a0
  br label %dec_label_pc_119a0

bb:                                               ; preds = %dec_label_pc_119a0
  %v3_119a0 = zext i8 %v2_119a0 to i32
  %v8_119a8 = icmp eq i8 %v2_119a0, 32
  store i32 %v3_119a0, i32* @r4, align 4
  br i1 %v8_119a8, label %dec_label_pc_119a0, label %dec_label_pc_119b4

dec_label_pc_119b4:                               ; preds = %bb
  %v7_119b4 = icmp eq i8 %v2_119a0, 10
  br i1 %v7_119b4, label %dec_label_pc_119a0, label %dec_label_pc_119bc

dec_label_pc_119bc:                               ; preds = %dec_label_pc_119b4
  %v7_119bc = icmp eq i8 %v2_119a0, 45
  br i1 %v7_119bc, label %dec_label_pc_11aac, label %dec_label_pc_119c4

dec_label_pc_119c4:                               ; preds = %dec_label_pc_119bc
  %v7_119c4 = icmp eq i8 %v2_119a0, 43
  br i1 %v7_119c4, label %bb44, label %dec_label_pc_119d4

bb44:                                             ; preds = %dec_label_pc_119c4
  %v2_119c8 = inttoptr i32 %v5_119a0 to i8*
  %v3_119c8 = load i8, i8* %v2_119c8, align 1
  %v4_119c8 = zext i8 %v3_119c8 to i32
  store i32 %v4_119c8, i32* @r4, align 4
  %v6_119c8 = add i32 %v0_119a0, 2
  store i32 %v6_119c8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_119d4

dec_label_pc_119d4:                               ; preds = %bb44, %dec_label_pc_119c4, %dec_label_pc_11aac
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_11aac ], [ 2147483647, %dec_label_pc_119c4 ], [ 2147483647, %bb44 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_11aac ], [ 0, %dec_label_pc_119c4 ], [ 0, %bb44 ]
  store i32 %storemerge1, i32* @r7, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_119dc = call i32 @function_11f58(i32 %storemerge1, i32 %arg2)
  %v0_119e0 = load i32, i32* @r7, align 4
  store i32 %v0_119e0, i32* @r0, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  %v0_119e8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_119e8, i32* @r1, align 4
  %v0_119ec = call i32 @function_11e5c()
  store i32 0, i32* @ip, align 4
  %v0_119fc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_119fc.outer

dec_label_pc_119fc.outer:                         ; preds = %.thread5, %dec_label_pc_119d4
  %v2_11a78.ph = phi i32 [ %v5_11a78, %.thread5 ], [ 0, %dec_label_pc_119d4 ]
  %v1_11a3c.ph = phi i32 [ %v4_11a7c, %.thread5 ], [ %v0_119fc.pre, %dec_label_pc_119d4 ]
  %v1_11a54.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_119d4 ]
  %v3_11a48 = icmp uge i32 %v2_11a78.ph, %v0_119ec
  %v9_11a48 = icmp eq i32 %v2_11a78.ph, %v0_119ec
  %v2_11a4c = xor i1 %v3_11a48, true
  %v3_11a4c = or i1 %v9_11a48, %v2_11a4c
  %v2_11a50 = xor i1 %v9_11a48, true
  %v3_11a50 = and i1 %v3_11a48, %v2_11a50
  %v2_11a70 = icmp eq i1 %v9_11a48, false
  br label %dec_label_pc_119fc

dec_label_pc_119fc:                               ; preds = %dec_label_pc_119fc.outer, %dec_label_pc_11a84
  %v1_11a54 = phi i32 [ -1, %dec_label_pc_11a84 ], [ %v1_11a54.ph, %dec_label_pc_119fc.outer ]
  %v1_11a3c = phi i32 [ %v3_11a84, %dec_label_pc_11a84 ], [ %v1_11a3c.ph, %dec_label_pc_119fc.outer ]
  %v1_119fc = urem i32 %v1_11a3c, 256
  %v1_11a00 = add nsw i32 %v1_119fc, -48
  %v1_11a08 = add nsw i32 %v1_119fc, -97
  %v1_11a0c = add i32 %v1_11a3c, -48
  %v1_11a10 = add nsw i32 %v1_119fc, -65
  %tmp75 = icmp ult i32 %v1_11a00, 10
  br i1 %tmp75, label %dec_label_pc_11a40, label %dec_label_pc_11a18

dec_label_pc_11a18:                               ; preds = %dec_label_pc_119fc
  %v2_11a18 = icmp ugt i32 %v1_11a10, 24
  %v7_11a18 = icmp eq i32 %v1_11a10, 25
  %v2_11a1c = xor i1 %v7_11a18, true
  %v3_11a1c = and i1 %v2_11a18, %v2_11a1c
  br i1 %v3_11a1c, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_11a18
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_11a18, %bb45
  %v0_11a3014 = phi i32 [ %v1_11a0c, %dec_label_pc_11a18 ], [ 0, %bb45 ]
  %v2_11a20 = xor i1 %v2_11a18, true
  %v3_11a20 = or i1 %v7_11a18, %v2_11a20
  br i1 %v3_11a20, label %bb47, label %bb48

bb47:                                             ; preds = %bb46
  br label %bb48

bb48:                                             ; preds = %bb46, %bb47
  %v0_11a30 = phi i32 [ %v0_11a3014, %bb46 ], [ 1, %bb47 ]
  br i1 %v3_11a1c, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  %v6_11a28 = icmp ugt i32 %v1_11a08, 24
  %v11_11a28 = icmp eq i32 %v1_11a08, 25
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_11a2c = phi i1 [ %v7_11a18, %bb48 ], [ %v11_11a28, %bb49 ]
  %v0_11a2c = phi i1 [ %v2_11a18, %bb48 ], [ %v6_11a28, %bb49 ]
  %v2_11a2c = xor i1 %v1_11a2c, true
  %v3_11a2c = and i1 %v0_11a2c, %v2_11a2c
  br i1 %v3_11a2c, label %dec_label_pc_11a90, label %dec_label_pc_11a30

dec_label_pc_11a30:                               ; preds = %bb50
  %v2_11a30 = icmp eq i32 %v0_11a30, 0
  %. = select i1 %v2_11a30, i32 87, i32 55
  %v2_11a3c = sub i32 %v1_11a3c, %.
  br label %dec_label_pc_11a40

dec_label_pc_11a40:                               ; preds = %dec_label_pc_119fc, %dec_label_pc_11a30
  %v0_11a5429 = phi i32 [ %v1_11a10, %dec_label_pc_119fc ], [ %., %dec_label_pc_11a30 ]
  %v3_11a78 = phi i32 [ %v1_11a0c, %dec_label_pc_119fc ], [ %v2_11a3c, %dec_label_pc_11a30 ]
  %v1_11a40 = load i32, i32* %r6.global-to-local, align 4
  %v2_11a40 = sub i32 %v3_11a78, %v1_11a40
  %v4_11a40 = xor i32 %v1_11a40, %v3_11a78
  %v5_11a40 = xor i32 %v2_11a40, %v3_11a78
  %v6_11a40 = and i32 %v5_11a40, %v4_11a40
  %v7_11a40 = icmp slt i32 %v6_11a40, 0
  %v8_11a40 = icmp slt i32 %v2_11a40, 0
  %v2_11a44 = xor i1 %v8_11a40, %v7_11a40
  br i1 %v2_11a44, label %dec_label_pc_11a48, label %dec_label_pc_11a90

dec_label_pc_11a48:                               ; preds = %dec_label_pc_11a40
  br i1 %v3_11a4c, label %bb53, label %bb54

bb53:                                             ; preds = %dec_label_pc_11a48
  br label %bb54

bb54:                                             ; preds = %dec_label_pc_11a48, %bb53
  %v0_11a5428 = phi i32 [ %v0_11a5429, %dec_label_pc_11a48 ], [ 0, %bb53 ]
  br i1 %v3_11a50, label %bb55, label %bb56

bb55:                                             ; preds = %bb54
  br label %bb56

bb56:                                             ; preds = %bb54, %bb55
  %v0_11a54 = phi i32 [ %v0_11a5428, %bb54 ], [ 1, %bb55 ]
  %tmp76 = icmp slt i32 %v1_11a54, 0
  %v4_11a54 = zext i1 %tmp76 to i32
  %v5_11a54 = or i32 %v0_11a54, %v4_11a54
  %v7_11a54 = icmp eq i32 %v5_11a54, 0
  br i1 %v7_11a54, label %dec_label_pc_11a5c, label %dec_label_pc_11a84

dec_label_pc_11a5c:                               ; preds = %bb56
  %v1_11a68 = load i32, i32* %r8.global-to-local, align 4
  %v2_11a68 = sub i32 %v3_11a78, %v1_11a68
  %v4_11a68 = xor i32 %v1_11a68, %v3_11a78
  %v5_11a68 = xor i32 %v2_11a68, %v3_11a78
  %v6_11a68 = and i32 %v5_11a68, %v4_11a68
  %v7_11a68 = icmp slt i32 %v6_11a68, 0
  %v8_11a68 = icmp slt i32 %v2_11a68, 0
  %v9_11a68 = icmp eq i32 %v3_11a78, %v1_11a68
  %v3_11a6c = xor i1 %v8_11a68, %v7_11a68
  %v4_11a6c = or i1 %v9_11a68, %v3_11a6c
  br i1 %v4_11a6c, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_11a5c
  store i32 1, i32* @ip, align 4
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_11a5c
  store i32 1, i32* @ip, align 4
  br i1 %v2_11a70, label %.thread5, label %dec_label_pc_11a84

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_11a78 = mul i32 %v1_11a40, %v2_11a78.ph
  %v5_11a78 = add i32 %v4_11a78, %v3_11a78
  %v1_11a7c = load i32, i32* %r5.global-to-local, align 4
  %v2_11a7c = inttoptr i32 %v1_11a7c to i8*
  %v3_11a7c = load i8, i8* %v2_11a7c, align 1
  %v4_11a7c = zext i8 %v3_11a7c to i32
  %v6_11a7c = add i32 %v1_11a7c, 1
  store i32 %v6_11a7c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_119fc.outer

dec_label_pc_11a84:                               ; preds = %thread-pre-split, %bb56
  %v0_11a84 = load i32, i32* %r5.global-to-local, align 4
  %v1_11a84 = inttoptr i32 %v0_11a84 to i8*
  %v2_11a84 = load i8, i8* %v1_11a84, align 1
  %v3_11a84 = zext i8 %v2_11a84 to i32
  %v5_11a84 = add i32 %v0_11a84, 1
  store i32 %v5_11a84, i32* %r5.global-to-local, align 4
  store i32 -1, i32* @ip, align 4
  br label %dec_label_pc_119fc

dec_label_pc_11a90:                               ; preds = %dec_label_pc_11a40, %bb50
  %v1_11a90 = icmp slt i32 %v1_11a54, 0
  %v0_11abc = load i32, i32* %sl.global-to-local, align 4
  %v2_11abc = icmp eq i32 %v0_11abc, 0
  br i1 %v1_11a90, label %dec_label_pc_11abc, label %dec_label_pc_11a98

dec_label_pc_11a98:                               ; preds = %dec_label_pc_11a90
  br i1 %v2_11abc, label %bb60, label %bb59

bb59:                                             ; preds = %dec_label_pc_11a98
  %v2_11a9c = sub i32 0, %v2_11a78.ph
  br label %bb60

bb60:                                             ; preds = %.thread32, %bb61, %dec_label_pc_11a98, %bb59
  %v1_11aa8 = phi i32 [ -2147483648, %bb61 ], [ %v2_11a78.ph, %dec_label_pc_11a98 ], [ %v2_11a9c, %bb59 ], [ 2147483647, %.thread32 ]
  store i32 %v3_11990, i32* @r4, align 4
  store i32 %v12_11990, i32* @r7, align 4
  ret i32 %v1_11aa8

dec_label_pc_11aac:                               ; preds = %dec_label_pc_119bc
  %v1_11aac = inttoptr i32 %v5_119a0 to i8*
  %v2_11aac = load i8, i8* %v1_11aac, align 1
  %v3_11aac = zext i8 %v2_11aac to i32
  store i32 %v3_11aac, i32* @r4, align 4
  %v5_11aac = add i32 %v0_119a0, 2
  store i32 %v5_11aac, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_119d4

dec_label_pc_11abc:                               ; preds = %dec_label_pc_11a90
  br i1 %v2_11abc, label %.thread32, label %bb61

.thread32:                                        ; preds = %dec_label_pc_11abc
  br label %bb60

bb61:                                             ; preds = %dec_label_pc_11abc
  br label %bb60

; uselistorder directives
  uselistorder i1 %v2_11abc, { 1, 0 }
  uselistorder i32 %v2_11a68, { 1, 0 }
  uselistorder i32 %v1_11a68, { 1, 0, 2 }
  uselistorder i32 %v2_11a40, { 1, 0 }
  uselistorder i32 %v3_11a78, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_11a18, { 1, 2, 0 }
  uselistorder i1 %v2_11a18, { 1, 0, 2 }
  uselistorder i32 %v1_119fc, { 1, 2, 0 }
  uselistorder i32 %v1_11a3c, { 1, 2, 0 }
  uselistorder i32 %v1_11a54, { 1, 0 }
  uselistorder i1 %v9_11a48, { 1, 0, 2 }
  uselistorder i1 %v3_11a48, { 1, 0 }
  uselistorder i32 %v2_11a78.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v0_119ec, { 1, 0 }
  uselistorder i32 %v5_119a0, { 3, 4, 5, 2, 1, 0 }
  uselistorder i8 %v2_119a0, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_119a0, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 5, 2, 4, 3, 6, 7 }
  uselistorder i32 25, { 10, 11, 0, 9, 1, 6, 2, 7, 3, 8, 5, 4, 12 }
  uselistorder i8 32, { 2, 3, 4, 0, 5, 6, 7, 1, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i8 9, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %bb60, { 1, 0, 3, 2 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %dec_label_pc_11a40, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_119fc, { 1, 0 }
  uselistorder label %dec_label_pc_119d4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_119a0, { 1, 2, 0, 3 }
}

define i32 @function_11acc(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11acc:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_11acc = load i32, i32* @r4, align 4
  store i32 %v3_11acc, i32* %stack_var_-24, align 4
  %v12_11acc = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11ae4

dec_label_pc_11ae4:                               ; preds = %dec_label_pc_11b08.dec_label_pc_11ae4_crit_edge, %dec_label_pc_11acc
  %v0_11ae8 = phi i32 [ %v0_11ae8.pre, %dec_label_pc_11b08.dec_label_pc_11ae4_crit_edge ], [ %arg3, %dec_label_pc_11acc ]
  %v1_11af0 = call i32 @function_12268(i32 %v0_11ae8)
  %v7_11af4 = icmp eq i32 %v1_11af0, 1
  %v0_11afc = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_11af4, label %dec_label_pc_11afc, label %dec_label_pc_11b14

dec_label_pc_11afc:                               ; preds = %dec_label_pc_11ae4
  %v1_11afc = add i32 %v0_11afc, 1
  store i32 %v1_11afc, i32* %r5.global-to-local, align 4
  %v1_11b00 = load i32, i32* %r8.global-to-local, align 4
  %v6_11b04 = icmp slt i32 %v1_11afc, %v1_11b00
  br i1 %v6_11b04, label %dec_label_pc_11b08, label %.loopexit

dec_label_pc_11b08:                               ; preds = %dec_label_pc_11afc
  %v0_11b08 = load i32, i32* %r4.global-to-local, align 4
  %v1_11b08 = inttoptr i32 %v0_11b08 to i8*
  %v2_11b08 = load i8, i8* %v1_11b08, align 1
  %v5_11b08 = add i32 %v0_11b08, 1
  store i32 %v5_11b08, i32* %r4.global-to-local, align 4
  %v7_11b0c = icmp eq i8 %v2_11b08, 10
  br i1 %v7_11b0c, label %dec_label_pc_11b14, label %dec_label_pc_11b08.dec_label_pc_11ae4_crit_edge

dec_label_pc_11b08.dec_label_pc_11ae4_crit_edge:  ; preds = %dec_label_pc_11b08
  %v0_11ae8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11ae4

dec_label_pc_11b14:                               ; preds = %dec_label_pc_11ae4, %dec_label_pc_11b08
  %v0_11b14 = phi i32 [ %v1_11afc, %dec_label_pc_11b08 ], [ %v0_11afc, %dec_label_pc_11ae4 ]
  %v2_11b14 = icmp eq i32 %v0_11b14, 0
  br i1 %v2_11b14, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_11b14
  store i32 0, i32* @r7, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_11afc, %dec_label_pc_11b14, %bb
  %v0_11b1c = load i32, i32* @r7, align 4
  %v2_11b20 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11b20, i32* @r4, align 4
  store i32 %v12_11acc, i32* @r7, align 4
  ret i32 %v0_11b1c

; uselistorder directives
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11b14, { 1, 0 }
}

define i32 @function_11b28() local_unnamed_addr {
dec_label_pc_11b28:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  store i32 16, i32* %r6.global-to-local, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_11b38 = call i32 @function_128f8()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_11b40 = inttoptr i32 %v0_11b38 to i32*
  store i32 0, i32* %v2_11b40, align 4
  %v0_11b4c = load i32, i32* %r4.global-to-local, align 4
  %v3_11b50 = call i32 @function_12ce4(i32 2, i32 2, i32 %v0_11b4c)
  %v7_11b54 = icmp eq i32 %v3_11b50, -1
  store i32 %v3_11b50, i32* %r5.global-to-local, align 4
  br i1 %v7_11b54, label %bb, label %dec_label_pc_11b64

bb:                                               ; preds = %dec_label_pc_11b28
  %v1_11b5c = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11bb0

dec_label_pc_11b64:                               ; preds = %dec_label_pc_11b28
  %v2_11b70 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_11b70, i32* %r4.global-to-local, align 4
  %v0_11b7c = load i32, i32* %r6.global-to-local, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_11b90 = call i32 @function_12acc(i32 %v3_11b50, i32 %v2_11b70, i32 %v0_11b7c)
  %v2_11b98 = ptrtoint i32* %stack_var_-20 to i32
  %v0_11b9c = load i32, i32* %r5.global-to-local, align 4
  %v3_11ba0 = call i32 @function_12b04(i32 %v0_11b9c, i32 %v2_11b70, i32 %v2_11b98)
  %v1_11ba8 = call i32 @function_124d0(i32 %v0_11b9c)
  br label %dec_label_pc_11bb0

dec_label_pc_11bb0:                               ; preds = %bb, %dec_label_pc_11b64
  %storemerge = phi i32 [ 134744072, %dec_label_pc_11b64 ], [ %v1_11b5c, %bb ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_11b50, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32 134744072, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_12acc, { 1, 2, 8, 7, 6, 5, 4, 3, 0 }
  uselistorder i32 (i32, i32, i32)* @function_12ce4, { 3, 4, 17, 18, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 2, 1, 0 }
  uselistorder label %dec_label_pc_11bb0, { 1, 0 }
}

define i32 @function_11bbc(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11bbc:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_11bc0 = load i8, i8* %tmp, align 1
  %v2_11bc4 = icmp eq i8 %v3_11bc0, 0
  br i1 %v2_11bc4, label %bb, label %dec_label_pc_11bd8

bb:                                               ; preds = %dec_label_pc_11bbc
  %v4_11bc0 = zext i8 %v3_11bc0 to i32
  br label %dec_label_pc_11bec

dec_label_pc_11bd8:                               ; preds = %dec_label_pc_11bbc
  br label %dec_label_pc_11bdc

dec_label_pc_11bdc:                               ; preds = %dec_label_pc_11bdc, %dec_label_pc_11bd8
  %v0_11bdc = phi i32 [ %v1_11bdc, %dec_label_pc_11bdc ], [ 0, %dec_label_pc_11bd8 ]
  %v1_11bdc = add i32 %v0_11bdc, 1
  %v2_11be0 = add i32 %v1_11bdc, %arg2
  %v3_11be0 = inttoptr i32 %v2_11be0 to i8*
  %v4_11be0 = load i8, i8* %v3_11be0, align 1
  %v2_11be4 = icmp eq i8 %v4_11be0, 0
  br i1 %v2_11be4, label %dec_label_pc_11bec, label %dec_label_pc_11bdc

dec_label_pc_11bec:                               ; preds = %dec_label_pc_11bdc, %bb
  %v0_11c3021 = phi i32 [ %v4_11bc0, %bb ], [ %v1_11bdc, %dec_label_pc_11bdc ]
  %v0_11bf42 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_11bf42, 1
  br i1 %tmp29, label %dec_label_pc_11c44, label %dec_label_pc_11c00

dec_label_pc_11c00:                               ; preds = %dec_label_pc_11bec, %dec_label_pc_11bf4.backedge
  %v0_11bf8.in = phi i32 [ %v0_11bf8, %dec_label_pc_11bf4.backedge ], [ %v0_11bf42, %dec_label_pc_11bec ]
  %v1_11c0c = phi i32 [ %v1_11c0c15, %dec_label_pc_11bf4.backedge ], [ 0, %dec_label_pc_11bec ]
  %v0_11c00 = phi i32 [ %v5_11c00, %dec_label_pc_11bf4.backedge ], [ %tmp23, %dec_label_pc_11bec ]
  %v0_11bf8 = add i32 %v0_11bf8.in, -1
  %v1_11c00 = inttoptr i32 %v0_11c00 to i8*
  %v2_11c00 = load i8, i8* %v1_11c00, align 1
  %v3_11c00 = zext i8 %v2_11c00 to i32
  store i32 %v3_11c00, i32* @ip, align 4
  %v5_11c00 = add i32 %v0_11c00, 1
  %v1_11c04 = add nsw i32 %v3_11c00, -65
  %v2_11c0c = add i32 %v1_11c0c, %arg2
  %v3_11c0c = inttoptr i32 %v2_11c0c to i8*
  %v4_11c0c = load i8, i8* %v3_11c0c, align 1
  %v6_11c0c = zext i8 %v4_11c0c to i32
  %v1_11c10 = add nsw i32 %v6_11c0c, -65
  %tmp38 = icmp ult i32 %v1_11c04, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_11c00
  %v5_11c14 = or i32 %v3_11c00, 96
  store i32 %v5_11c14, i32* @ip, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_11c00, %bb30
  %v0_11c20 = phi i32 [ %v3_11c00, %dec_label_pc_11c00 ], [ %v5_11c14, %bb30 ]
  %tmp39 = icmp ult i32 %v1_11c10, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_11c1c = or i32 %v6_11c0c, 96
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_11c20 = phi i32 [ %v6_11c0c, %bb31 ], [ %v5_11c1c, %bb32 ]
  %v9_11c20 = icmp eq i32 %v0_11c20, %v1_11c20
  br i1 %v9_11c20, label %dec_label_pc_11c2c, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_11bf4.backedge

dec_label_pc_11bf4.backedge:                      ; preds = %bb34, %dec_label_pc_11c2c
  %v1_11c0c15 = phi i32 [ 0, %bb34 ], [ %v1_11c2c, %dec_label_pc_11c2c ]
  %tmp35 = icmp slt i32 %v0_11bf8, 1
  br i1 %tmp35, label %dec_label_pc_11c44, label %dec_label_pc_11c00

dec_label_pc_11c2c:                               ; preds = %bb33
  %v1_11c2c = add i32 %v1_11c0c, 1
  %v9_11c30 = icmp eq i32 %v0_11c3021, %v1_11c2c
  br i1 %v9_11c30, label %dec_label_pc_11c38, label %dec_label_pc_11bf4.backedge

dec_label_pc_11c38:                               ; preds = %dec_label_pc_11c2c
  %v2_11c38 = sub i32 %v5_11c00, %tmp23
  br label %dec_label_pc_11c44

dec_label_pc_11c44:                               ; preds = %dec_label_pc_11bf4.backedge, %dec_label_pc_11bec, %dec_label_pc_11c38
  %storemerge = phi i32 [ %v2_11c38, %dec_label_pc_11c38 ], [ -1, %dec_label_pc_11bec ], [ -1, %dec_label_pc_11bf4.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_11c2c, { 1, 0 }
  uselistorder i32 %v0_11c00, { 1, 0 }
  uselistorder i32 %v1_11c0c, { 1, 0 }
  uselistorder i8 %v3_11bc0, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder i32 26, { 0, 1, 2, 5, 3, 6, 4, 7, 8 }
  uselistorder label %dec_label_pc_11c44, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11bf4.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_11c00, { 1, 0 }
}

define i32 @function_11c4c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11c4c:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_11c4c = load i8, i8* %arg1, align 1
  %v2_11c50 = icmp eq i8 %v2_11c4c, 0
  br i1 %v2_11c50, label %bb, label %dec_label_pc_11c5c

bb:                                               ; preds = %dec_label_pc_11c4c
  %v3_11c4c = zext i8 %v2_11c4c to i32
  br label %dec_label_pc_11c70

dec_label_pc_11c5c:                               ; preds = %dec_label_pc_11c4c
  br label %dec_label_pc_11c60

dec_label_pc_11c60:                               ; preds = %dec_label_pc_11c60, %dec_label_pc_11c5c
  %v0_11c60 = phi i32 [ %v1_11c60, %dec_label_pc_11c60 ], [ 0, %dec_label_pc_11c5c ]
  %v1_11c60 = add i32 %v0_11c60, 1
  %v2_11c64 = add i32 %v1_11c60, %tmp
  %v3_11c64 = inttoptr i32 %v2_11c64 to i8*
  %v4_11c64 = load i8, i8* %v3_11c64, align 1
  %v2_11c68 = icmp eq i8 %v4_11c64, 0
  br i1 %v2_11c68, label %dec_label_pc_11c70, label %dec_label_pc_11c60

dec_label_pc_11c70:                               ; preds = %dec_label_pc_11c60, %bb
  %v0_11cbc3 = phi i32 [ %v3_11c4c, %bb ], [ %v1_11c60, %dec_label_pc_11c60 ]
  %v1_11c70 = inttoptr i32 %arg2 to i8*
  %v2_11c70 = load i8, i8* %v1_11c70, align 1
  %v2_11c74 = icmp eq i8 %v2_11c70, 0
  br i1 %v2_11c74, label %bb21, label %dec_label_pc_11c80

bb21:                                             ; preds = %dec_label_pc_11c70
  %v3_11c70 = zext i8 %v2_11c70 to i32
  br label %dec_label_pc_11c94

dec_label_pc_11c80:                               ; preds = %dec_label_pc_11c70
  br label %dec_label_pc_11c84

dec_label_pc_11c84:                               ; preds = %dec_label_pc_11c84, %dec_label_pc_11c80
  %v0_11c84 = phi i32 [ %v1_11c84, %dec_label_pc_11c84 ], [ 0, %dec_label_pc_11c80 ]
  %v1_11c84 = add i32 %v0_11c84, 1
  %v2_11c88 = add i32 %v1_11c84, %arg2
  %v3_11c88 = inttoptr i32 %v2_11c88 to i8*
  %v4_11c88 = load i8, i8* %v3_11c88, align 1
  %v2_11c8c = icmp eq i8 %v4_11c88, 0
  br i1 %v2_11c8c, label %dec_label_pc_11c94, label %dec_label_pc_11c84

dec_label_pc_11c94:                               ; preds = %dec_label_pc_11c84, %bb21
  %v0_11c94 = phi i32 [ %v3_11c70, %bb21 ], [ %v1_11c84, %dec_label_pc_11c84 ]
  %v9_11c94 = icmp eq i32 %v0_11c94, %v0_11cbc3
  br i1 %v9_11c94, label %dec_label_pc_11cbc.preheader, label %dec_label_pc_11c9c

dec_label_pc_11cbc.preheader:                     ; preds = %dec_label_pc_11c94
  %v2_11cbc5 = icmp eq i32 %v0_11cbc3, 0
  br i1 %v2_11cbc5, label %dec_label_pc_11cc4, label %dec_label_pc_11ca4

dec_label_pc_11c9c:                               ; preds = %dec_label_pc_11ca4, %dec_label_pc_11c94
  ret i32 0

dec_label_pc_11ca4:                               ; preds = %dec_label_pc_11cb4, %dec_label_pc_11cbc.preheader
  %v0_11cbc.in = phi i32 [ %v0_11cbc, %dec_label_pc_11cb4 ], [ %v0_11cbc3, %dec_label_pc_11cbc.preheader ]
  %v0_11cb8 = phi i32 [ %v1_11cb8, %dec_label_pc_11cb4 ], [ %arg2, %dec_label_pc_11cbc.preheader ]
  %v0_11cb4 = phi i32 [ %v1_11cb4, %dec_label_pc_11cb4 ], [ %tmp, %dec_label_pc_11cbc.preheader ]
  %v0_11cbc = add i32 %v0_11cbc.in, -1
  %v1_11ca4 = inttoptr i32 %v0_11cb4 to i8*
  %v2_11ca4 = load i8, i8* %v1_11ca4, align 1
  %v1_11ca8 = inttoptr i32 %v0_11cb8 to i8*
  %v2_11ca8 = load i8, i8* %v1_11ca8, align 1
  %v9_11cac = icmp eq i8 %v2_11ca4, %v2_11ca8
  br i1 %v9_11cac, label %dec_label_pc_11cb4, label %dec_label_pc_11c9c

dec_label_pc_11cb4:                               ; preds = %dec_label_pc_11ca4
  %v1_11cb4 = add i32 %v0_11cb4, 1
  %v1_11cb8 = add i32 %v0_11cb8, 1
  %v2_11cbc = icmp eq i32 %v0_11cbc, 0
  br i1 %v2_11cbc, label %dec_label_pc_11cc4, label %dec_label_pc_11ca4

dec_label_pc_11cc4:                               ; preds = %dec_label_pc_11cb4, %dec_label_pc_11cbc.preheader
  ret i32 1

; uselistorder directives
  uselistorder i8 %v2_11c70, { 1, 0 }
  uselistorder i8 %v2_11c4c, { 1, 0 }
}

define i32 @function_11ccc(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11ccc:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_11cd0 = load i8, i8* %arg1, align 1
  %v2_11cd4 = icmp eq i8 %v2_11cd0, 0
  %v0_11cd8 = load i32, i32* %r2.global-to-local, align 4
  br i1 %v2_11cd4, label %bb, label %dec_label_pc_11ce4

bb:                                               ; preds = %dec_label_pc_11ccc
  %v3_11cd0 = zext i8 %v2_11cd0 to i32
  br label %dec_label_pc_11cf8

dec_label_pc_11ce4:                               ; preds = %dec_label_pc_11ccc
  br label %dec_label_pc_11ce8

dec_label_pc_11ce8:                               ; preds = %dec_label_pc_11ce8, %dec_label_pc_11ce4
  %v0_11ce8 = phi i32 [ %v1_11ce8, %dec_label_pc_11ce8 ], [ 0, %dec_label_pc_11ce4 ]
  %v1_11ce8 = add i32 %v0_11ce8, 1
  %v2_11cec = add i32 %v1_11ce8, %tmp
  %v3_11cec = inttoptr i32 %v2_11cec to i8*
  %v4_11cec = load i8, i8* %v3_11cec, align 1
  %v2_11cf0 = icmp eq i8 %v4_11cec, 0
  br i1 %v2_11cf0, label %dec_label_pc_11cf8, label %dec_label_pc_11ce8

dec_label_pc_11cf8:                               ; preds = %dec_label_pc_11ce8, %bb
  %v6_11d20 = phi i32 [ %v3_11cd0, %bb ], [ %v1_11ce8, %dec_label_pc_11ce8 ]
  %v0_11cf8 = load i32, i32* %r1.global-to-local, align 4
  %v1_11cf8 = inttoptr i32 %v0_11cf8 to i8*
  %v2_11cf8 = load i8, i8* %v1_11cf8, align 1
  %v3_11cf8 = zext i8 %v2_11cf8 to i32
  %v2_11cfc = icmp eq i8 %v2_11cf8, 0
  br i1 %v2_11cfc, label %bb26, label %dec_label_pc_11d08

bb26:                                             ; preds = %dec_label_pc_11cf8
  store i32 %v3_11cf8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11d1c

dec_label_pc_11d08:                               ; preds = %dec_label_pc_11cf8
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11d0c

dec_label_pc_11d0c:                               ; preds = %dec_label_pc_11d0c, %dec_label_pc_11d08
  %v0_11d0c = phi i32 [ %v1_11d0c, %dec_label_pc_11d0c ], [ 0, %dec_label_pc_11d08 ]
  %v1_11d0c = add i32 %v0_11d0c, 1
  store i32 %v1_11d0c, i32* %r2.global-to-local, align 4
  %v2_11d10 = add i32 %v1_11d0c, %v0_11cf8
  %v3_11d10 = inttoptr i32 %v2_11d10 to i8*
  %v4_11d10 = load i8, i8* %v3_11d10, align 1
  %v2_11d14 = icmp eq i8 %v4_11d10, 0
  br i1 %v2_11d14, label %dec_label_pc_11d1c, label %dec_label_pc_11d0c

dec_label_pc_11d1c:                               ; preds = %dec_label_pc_11d0c, %bb26
  %v0_11d1c = phi i32 [ %v3_11cf8, %bb26 ], [ %v1_11d0c, %dec_label_pc_11d0c ]
  %v2_11d1c = sub i32 %v0_11d1c, %v0_11cd8
  %v4_11d1c = xor i32 %v0_11d1c, %v0_11cd8
  %v5_11d1c = xor i32 %v2_11d1c, %v0_11d1c
  %v6_11d1c = and i32 %v5_11d1c, %v4_11d1c
  %v5_11d20 = icmp slt i32 %v0_11d1c, %v0_11cd8
  br i1 %v5_11d20, label %bb28, label %bb27

bb27:                                             ; preds = %dec_label_pc_11d1c
  %v8_11d20 = sub i32 %v6_11d20, %v0_11cd8
  %v10_11d20 = xor i32 %v6_11d20, %v0_11cd8
  %v11_11d20 = xor i32 %v8_11d20, %v6_11d20
  %v12_11d20 = and i32 %v11_11d20, %v10_11d20
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_11d1c, %bb27
  %v1_11d24.in = phi i32 [ %v6_11d1c, %dec_label_pc_11d1c ], [ %v12_11d20, %bb27 ]
  %v0_11d24.in = phi i32 [ %v2_11d1c, %dec_label_pc_11d1c ], [ %v8_11d20, %bb27 ]
  %v0_11d24 = icmp slt i32 %v0_11d24.in, 0
  %v1_11d24 = icmp slt i32 %v1_11d24.in, 0
  %v2_11d24 = xor i1 %v1_11d24, %v0_11d24
  br i1 %v2_11d24, label %dec_label_pc_11d50, label %dec_label_pc_11d34.preheader

dec_label_pc_11d34.preheader:                     ; preds = %bb28
  %v2_11d345 = icmp eq i32 %v0_11cd8, 0
  br i1 %v2_11d345, label %dec_label_pc_11d50, label %dec_label_pc_11d3c

dec_label_pc_11d2c:                               ; preds = %dec_label_pc_11d3c
  %v1_11d2c = add i32 %v0_11d2c, 1
  %v1_11d30 = add i32 %v0_11d30, 1
  store i32 %v1_11d30, i32* %r1.global-to-local, align 4
  %v2_11d34 = icmp eq i32 %v0_11d34, 0
  br i1 %v2_11d34, label %dec_label_pc_11d50, label %dec_label_pc_11d3c

dec_label_pc_11d3c:                               ; preds = %dec_label_pc_11d2c, %dec_label_pc_11d34.preheader
  %v0_11d34.in = phi i32 [ %v0_11d34, %dec_label_pc_11d2c ], [ %v0_11cd8, %dec_label_pc_11d34.preheader ]
  %v0_11d30 = phi i32 [ %v1_11d30, %dec_label_pc_11d2c ], [ %v0_11cf8, %dec_label_pc_11d34.preheader ]
  %v0_11d2c = phi i32 [ %v1_11d2c, %dec_label_pc_11d2c ], [ %tmp, %dec_label_pc_11d34.preheader ]
  %v0_11d34 = add i32 %v0_11d34.in, -1
  %v1_11d3c = inttoptr i32 %v0_11d2c to i8*
  %v2_11d3c = load i8, i8* %v1_11d3c, align 1
  %v3_11d3c = zext i8 %v2_11d3c to i32
  store i32 %v3_11d3c, i32* %r2.global-to-local, align 4
  %v1_11d40 = inttoptr i32 %v0_11d30 to i8*
  %v2_11d40 = load i8, i8* %v1_11d40, align 1
  %v9_11d44 = icmp eq i8 %v2_11d3c, %v2_11d40
  br i1 %v9_11d44, label %dec_label_pc_11d2c, label %dec_label_pc_11d50

dec_label_pc_11d50:                               ; preds = %dec_label_pc_11d2c, %dec_label_pc_11d34.preheader, %dec_label_pc_11d3c, %bb28
  %storemerge = phi i32 [ 0, %bb28 ], [ 1, %dec_label_pc_11d34.preheader ], [ 1, %dec_label_pc_11d2c ], [ 0, %dec_label_pc_11d3c ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_11d2c, { 1, 0 }
  uselistorder i32 %v0_11d30, { 1, 0 }
  uselistorder i32 %v0_11d1c, { 3, 0, 1, 2 }
  uselistorder i32 %v1_11d0c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_11cd8, { 0, 3, 1, 4, 6, 2, 5 }
  uselistorder i8 %v2_11cd0, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 5, 4, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11d50, { 2, 0, 1, 3 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @function_11d60(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11d60:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v3_11d60 = load i32, i32* @r4, align 4
  %v12_11d60 = load i32, i32* @r7, align 4
  %v0_11d64 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_11d64, i32* %r8.global-to-local, align 4
  %v2_11d64 = icmp eq i32 %v0_11d64, 0
  store i1 %v2_11d64, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_11d64, label %dec_label_pc_11e44, label %dec_label_pc_11d74

dec_label_pc_11d74:                               ; preds = %dec_label_pc_11d60
  %v3_11d74 = icmp eq i8 %arg1, 0
  store i1 %v3_11d74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11d74, label %.thread, label %dec_label_pc_11d88

.thread:                                          ; preds = %dec_label_pc_11d74
  %v4_11d7c = inttoptr i32 %v0_11d64 to i8*
  store i8 48, i8* %v4_11d7c, align 1
  %v0_11d80.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11d80.pr.pr, label %.thread1, label %dec_label_pc_11d88

.thread1:                                         ; preds = %.thread
  %v4_11d80 = load i32, i32* %r8.global-to-local, align 4
  %v5_11d80 = add i32 %v4_11d80, 1
  %v6_11d80 = inttoptr i32 %v5_11d80 to i8*
  store i8 0, i8* %v6_11d80, align 1
  %v0_11d84.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11d84.pr.pr, label %dec_label_pc_11e44, label %dec_label_pc_11d88

dec_label_pc_11d88:                               ; preds = %dec_label_pc_11d74, %.thread, %.thread1
  %tmp47 = icmp slt i8 %arg1, 0
  %v7_11d8c = icmp eq i32 %arg2, 10
  store i1 %v7_11d8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d8c, label %bb, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_11d88
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_11d88
  %v4_11d88 = zext i1 %tmp47 to i32
  store i32 %v4_11d88, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp47, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_11dac8 = sub nsw i32 0, %tmp
  %tmp.v3_11dac8 = select i1 %phitmp, i32 %tmp, i32 %v3_11dac8
  %tmp46 = zext i1 %phitmp to i32
  %. = xor i32 %tmp46, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread28
  %storemerge30 = phi i32 [ %tmp, %.thread28 ], [ %tmp.v3_11dac8, %bb ]
  %storemerge = phi i32 [ 0, %.thread28 ], [ %., %bb ]
  store i32 %storemerge30, i32* @r4, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_11db8 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_11db8, i32* @r7, align 4
  br label %dec_label_pc_11dbc

dec_label_pc_11dbc:                               ; preds = %bb45, %.thread6
  %v0_11dbc = phi i32 [ %v0_11de0, %bb45 ], [ %storemerge30, %.thread6 ]
  store i32 %v0_11dbc, i32* %r0.global-to-local, align 4
  %v0_11dc0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_11dc0, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_11dbc, 16777216
  %v1_11dc4 = sdiv i32 %sext, 16777216
  %v3_11dc4 = call i32 @function_11f58(i32 %v1_11dc4, i32 %v0_11dc0)
  %v7_11dc8 = icmp eq i32 %v0_11dc0, 9
  store i1 %v7_11dc8, i1* %cpsr_z.global-to-local, align 1
  %v1_11dcc = add i32 %v0_11dc0, 48
  %v0_11dd0 = load i32, i32* @r4, align 4
  store i32 %v0_11dd0, i32* @r0, align 4
  %v7_11dd4 = icmp sgt i32 %v0_11dc0, 9
  %extract.t = trunc i32 %v1_11dcc to i8
  br i1 %v7_11dd4, label %bb44, label %bb45

bb44:                                             ; preds = %dec_label_pc_11dbc
  %v9_11dd4 = add i32 %v0_11dc0, 55
  %extract.t27 = trunc i32 %v9_11dd4 to i8
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_11dbc, %bb44
  %v0_11ddc.off0 = phi i8 [ %extract.t, %dec_label_pc_11dbc ], [ %extract.t27, %bb44 ]
  %v0_11dd8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_11dd8, i32* @r1, align 4
  %v2_11ddc = load i32, i32* %r5.global-to-local, align 4
  %v3_11ddc = load i32, i32* @r7, align 4
  %v4_11ddc = add i32 %v3_11ddc, %v2_11ddc
  %v5_11ddc = inttoptr i32 %v4_11ddc to i8*
  store i8 %v0_11ddc.off0, i8* %v5_11ddc, align 1
  %v0_11de0 = call i32 @function_11e5c()
  store i32 %v0_11de0, i32* %r0.global-to-local, align 4
  store i32 %v0_11de0, i32* @r4, align 4
  %v2_11de4 = icmp eq i32 %v0_11de0, 0
  store i1 %v2_11de4, i1* %cpsr_z.global-to-local, align 1
  %v0_11de8 = load i32, i32* %r5.global-to-local, align 4
  %v1_11de8 = add i32 %v0_11de8, -1
  store i32 %v1_11de8, i32* %r5.global-to-local, align 4
  br i1 %v2_11de4, label %dec_label_pc_11df0, label %dec_label_pc_11dbc

dec_label_pc_11df0:                               ; preds = %bb45
  %v0_11df0 = load i32, i32* %sl.global-to-local, align 4
  %v2_11df0 = icmp eq i32 %v0_11df0, 0
  store i1 %v2_11df0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11df0, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_11df0
  %v3_11df4 = ptrtoint i32* %stack_var_-32 to i32
  %v3_11df8 = add i32 %v1_11de8, %v3_11df4
  store i32 %v3_11df8, i32* %r2.global-to-local, align 4
  %v4_11e00 = add i32 %v3_11df8, -34
  %v5_11e00 = inttoptr i32 %v4_11e00 to i8*
  store i8 45, i8* %v5_11e00, align 1
  %v0_11e04.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_11e04.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_11e04.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_11df0
  %v1_11e04 = phi i32 [ %v1_11de8, %dec_label_pc_11df0 ], [ %v1_11e04.pre, %.thread11 ]
  %v2_11e04 = add i32 %v1_11e04, 1
  store i32 %v2_11e04, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_11e10 = phi i32 [ %v2_11e04, %.thread12 ], [ %v1_11e04.pre, %.thread11 ]
  %v0_11e08 = load i32, i32* @r7, align 4
  %v2_11e08 = add i32 %v0_11e08, %v1_11e10
  %v3_11e08 = inttoptr i32 %v2_11e08 to i8*
  %v4_11e08 = load i8, i8* %v3_11e08, align 1
  %v6_11e08 = zext i8 %v4_11e08 to i32
  %v2_11e0c = icmp eq i8 %v4_11e08, 0
  store i1 %v2_11e0c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_11e08, i32* %r2.global-to-local, align 4
  br i1 %v2_11e0c, label %dec_label_pc_11e54, label %dec_label_pc_11e1c.preheader

dec_label_pc_11e1c.preheader:                     ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11e1c

dec_label_pc_11e1c:                               ; preds = %dec_label_pc_11e1c.preheader, %dec_label_pc_11e1c
  %v0_11e1c = phi i32 [ 0, %dec_label_pc_11e1c.preheader ], [ %v1_11e1c, %dec_label_pc_11e1c ]
  %v1_11e1c = add i32 %v0_11e1c, 1
  store i32 %v1_11e1c, i32* %r1.global-to-local, align 4
  %v2_11e20 = add i32 %v1_11e1c, %v2_11e08
  %v3_11e20 = inttoptr i32 %v2_11e20 to i8*
  %v4_11e20 = load i8, i8* %v3_11e20, align 1
  %v2_11e24 = icmp eq i8 %v4_11e20, 0
  store i1 %v2_11e24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11e24, label %dec_label_pc_11e2c, label %dec_label_pc_11e1c

dec_label_pc_11e2c:                               ; preds = %dec_label_pc_11e1c, %dec_label_pc_11e54
  %v0_11e3024 = phi i32 [ %v6_11e08, %dec_label_pc_11e54 ], [ %v1_11e1c, %dec_label_pc_11e1c ]
  %v0_11e2c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11e2c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11e30

dec_label_pc_11e30:                               ; preds = %dec_label_pc_11e30.dec_label_pc_11e30_crit_edge, %dec_label_pc_11e2c
  %v2_11e3c = phi i32 [ %v5_11e3c, %dec_label_pc_11e30.dec_label_pc_11e30_crit_edge ], [ %v0_11e2c, %dec_label_pc_11e2c ]
  %v0_11e34 = phi i32 [ %v0_11e34.pre, %dec_label_pc_11e30.dec_label_pc_11e30_crit_edge ], [ %v2_11e08, %dec_label_pc_11e2c ]
  %v0_11e30 = phi i32 [ %v0_11e30.pre, %dec_label_pc_11e30.dec_label_pc_11e30_crit_edge ], [ %v0_11e3024, %dec_label_pc_11e2c ]
  %v1_11e30 = add i32 %v0_11e30, -1
  store i32 %v1_11e30, i32* %r1.global-to-local, align 4
  %v1_11e34 = inttoptr i32 %v0_11e34 to i8*
  %v2_11e34 = load i8, i8* %v1_11e34, align 1
  %v5_11e34 = add i32 %v0_11e34, 1
  store i32 %v5_11e34, i32* %r2.global-to-local, align 4
  %v3_11e38 = icmp eq i32 %v0_11e30, 0
  store i1 %v3_11e38, i1* %cpsr_z.global-to-local, align 1
  %v3_11e3c = inttoptr i32 %v2_11e3c to i8*
  store i8 %v2_11e34, i8* %v3_11e3c, align 1
  %v4_11e3c = load i32, i32* %r0.global-to-local, align 4
  %v5_11e3c = add i32 %v4_11e3c, 1
  store i32 %v5_11e3c, i32* %r0.global-to-local, align 4
  br i1 %v3_11e38, label %dec_label_pc_11e44, label %dec_label_pc_11e30.dec_label_pc_11e30_crit_edge

dec_label_pc_11e30.dec_label_pc_11e30_crit_edge:  ; preds = %dec_label_pc_11e30
  %v0_11e30.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_11e34.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11e30

dec_label_pc_11e44:                               ; preds = %dec_label_pc_11e30, %.thread1, %dec_label_pc_11d60
  %v0_11e44 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11e44, i32* %r0.global-to-local, align 4
  store i32 %v3_11d60, i32* @r4, align 4
  store i32 %v12_11d60, i32* @r7, align 4
  ret i32 %v0_11e44

dec_label_pc_11e54:                               ; preds = %.thread11._crit_edge
  store i32 %v6_11e08, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11e2c

; uselistorder directives
  uselistorder i32 %v5_11e3c, { 1, 0 }
  uselistorder i1 %v3_11e38, { 1, 0 }
  uselistorder i32 %v0_11e34, { 1, 0 }
  uselistorder i32 %v1_11e1c, { 0, 1, 3, 2 }
  uselistorder i32 %v6_11e08, { 1, 0 }
  uselistorder i32 %v2_11e08, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11e04.pre, { 1, 0 }
  uselistorder i32 %v1_11de8, { 1, 0, 2 }
  uselistorder i32 %v0_11de0, { 1, 2, 3, 0 }
  uselistorder i32 %v0_11dc0, { 1, 0, 2, 3, 4, 5 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_11d64, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 5, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11, 12, 13 }
  uselistorder i8 45, { 1, 0 }
  uselistorder i32 55, { 9, 0, 5, 4, 1, 6, 2, 7, 3, 8 }
  uselistorder i32 (i32, i32)* @function_11f58, { 1, 0, 5, 2, 4, 3 }
  uselistorder label %dec_label_pc_11e2c, { 1, 0 }
  uselistorder label %dec_label_pc_11e1c, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_11d88, { 2, 1, 0 }
}

define i32 @function_11e5c() local_unnamed_addr {
dec_label_pc_11e5c:
  %r2.global-to-local = alloca i32, align 4
  %v0_11e5c = load i32, i32* @r1, align 4
  %v1_11e5c = add i32 %v0_11e5c, -1
  store i32 %v1_11e5c, i32* %r2.global-to-local, align 4
  %v2_11e5c = icmp eq i32 %v0_11e5c, 0
  %v7_11e5c = icmp eq i32 %v0_11e5c, 1
  %v0_11e60 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_11e5c, i32 %v0_11e60)
  br i1 %v2_11e5c, label %dec_label_pc_11f44, label %dec_label_pc_11e68

dec_label_pc_11e68:                               ; preds = %dec_label_pc_11e5c
  %v0_11e68 = load i32, i32* @r0, align 4
  %v1_11e68 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_11e68, %v1_11e68
  br i1 %tmp, label %dec_label_pc_11e70, label %dec_label_pc_11efc

dec_label_pc_11e70:                               ; preds = %dec_label_pc_11e68
  %v1_11e70 = load i32, i32* %r2.global-to-local, align 4
  %v2_11e70 = and i32 %v1_11e70, %v1_11e68
  %v4_11e70 = icmp eq i32 %v2_11e70, 0
  br i1 %v4_11e70, label %dec_label_pc_11f08, label %dec_label_pc_11e78

dec_label_pc_11e78:                               ; preds = %dec_label_pc_11e70
  %v3_11e78 = icmp ult i32 %v1_11e68, 536870912
  br i1 %v3_11e78, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_11e78
  %v4_11e7c = mul i32 %v1_11e68, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_11e78, %.thread
  %v0_11e9c.pr36.ph = phi i32 [ %v4_11e7c, %.thread ], [ %v1_11e68, %dec_label_pc_11e78 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_11e78 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_11e9c.pr36 = phi i32 [ %v4_11e90, %bb81 ], [ %v0_11e9c.pr36.ph, %.preheader.preheader ]
  %v1_11e94 = phi i32 [ %v4_11e94, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_11e88 = icmp ugt i32 %v0_11e9c.pr36, 268435455
  br i1 %v2_11e88, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_11e9cthread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_11e8c = icmp ult i32 %v0_11e9c.pr36, %v0_11e68
  br i1 %v4_11e8c, label %bb80, label %dec_label_pc_11e9cthread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_11e90 = and i32 %v0_11e9c.pr36, 268435456
  %v3_11e90 = icmp eq i32 %v2_11e90, 0
  %v4_11e90 = mul i32 %v0_11e9c.pr36, 16
  br i1 %v3_11e90, label %bb81, label %dec_label_pc_11e9c.loopexit

bb81:                                             ; preds = %bb80
  %v2_11e94 = and i32 %v1_11e94, 268435456
  %v3_11e94 = icmp eq i32 %v2_11e94, 0
  %v4_11e94 = mul i32 %v1_11e94, 16
  br i1 %v3_11e94, label %.preheader, label %dec_label_pc_11e9cthread-pre-split.loopexit.loopexit

dec_label_pc_11e9cthread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_11ea848.ph = phi i32 [ %v1_11e94, %bb ], [ %v4_11e94, %bb81 ]
  %v0_11e9c.pr38.ph = phi i32 [ %v0_11e9c.pr36, %bb ], [ %v4_11e90, %bb81 ]
  br label %dec_label_pc_11e9cthread-pre-split.loopexit

dec_label_pc_11e9cthread-pre-split.loopexit:      ; preds = %dec_label_pc_11e9cthread-pre-split.loopexit.loopexit, %.thread2
  %v1_11ea848 = phi i32 [ %v1_11e94, %.thread2 ], [ %v1_11ea848.ph, %dec_label_pc_11e9cthread-pre-split.loopexit.loopexit ]
  %v0_11e9c.pr38 = phi i32 [ %v0_11e9c.pr36, %.thread2 ], [ %v0_11e9c.pr38.ph, %dec_label_pc_11e9cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11e9cthread-pre-split

dec_label_pc_11e9cthread-pre-split:               ; preds = %dec_label_pc_11e9cthread-pre-split.loopexit, %bb83
  %v1_11ea846 = phi i32 [ %v1_11ea848, %dec_label_pc_11e9cthread-pre-split.loopexit ], [ %v3_11ea8, %bb83 ]
  %v0_11e9c.pr = phi i32 [ %v0_11e9c.pr38, %dec_label_pc_11e9cthread-pre-split.loopexit ], [ %v3_11ea4, %bb83 ]
  br label %dec_label_pc_11e9c

dec_label_pc_11e9c.loopexit:                      ; preds = %bb80
  br label %dec_label_pc_11e9c

dec_label_pc_11e9c:                               ; preds = %dec_label_pc_11e9c.loopexit, %dec_label_pc_11e9cthread-pre-split
  %v1_11ea8 = phi i32 [ %v1_11ea846, %dec_label_pc_11e9cthread-pre-split ], [ %v1_11e94, %dec_label_pc_11e9c.loopexit ]
  %v1_11ea4 = phi i32 [ %v0_11e9c.pr, %dec_label_pc_11e9cthread-pre-split ], [ %v4_11e90, %dec_label_pc_11e9c.loopexit ]
  %v2_11e9c = icmp slt i32 %v1_11ea4, 0
  br i1 %v2_11e9c, label %dec_label_pc_11eb0, label %bb82

bb82:                                             ; preds = %dec_label_pc_11e9c
  %v4_11ea0 = icmp ult i32 %v1_11ea4, %v0_11e68
  br i1 %v4_11ea0, label %bb83, label %dec_label_pc_11eb0

bb83:                                             ; preds = %bb82
  %v3_11ea4 = mul i32 %v1_11ea4, 2
  %v2_11ea8 = icmp slt i32 %v1_11ea8, 0
  %v3_11ea8 = mul i32 %v1_11ea8, 2
  br i1 %v2_11ea8, label %dec_label_pc_11eb0, label %dec_label_pc_11e9cthread-pre-split

dec_label_pc_11eb0:                               ; preds = %bb82, %dec_label_pc_11e9c, %bb83
  %v2_11ebc59 = phi i32 [ %v3_11ea8, %bb83 ], [ %v1_11ea8, %bb82 ], [ %v1_11ea8, %dec_label_pc_11e9c ]
  %v1_11eb451 = phi i32 [ %v3_11ea4, %bb83 ], [ %v1_11ea4, %bb82 ], [ %v1_11ea4, %dec_label_pc_11e9c ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11eb4

dec_label_pc_11eb4:                               ; preds = %.thread11, %dec_label_pc_11eb0
  %v1_11ee8 = phi i32 [ %v4_11ee8, %.thread11 ], [ %v2_11ebc59, %dec_label_pc_11eb0 ]
  %v1_11ebc = phi i32 [ %v0_11ef4, %.thread11 ], [ 0, %dec_label_pc_11eb0 ]
  %v1_11eec = phi i32 [ %v4_11eec, %.thread11 ], [ %v1_11eb451, %dec_label_pc_11eb0 ]
  %v1_11eb8 = phi i32 [ %v0_11ee4, %.thread11 ], [ %v0_11e68, %dec_label_pc_11eb0 ]
  %v3_11eb4 = icmp ult i32 %v1_11eb8, %v1_11eec
  br i1 %v3_11eb4, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_11eb4
  %v3_11eb8 = sub i32 %v1_11eb8, %v1_11eec
  %v3_11ebc = or i32 %v1_11ebc, %v1_11ee8
  store i32 %v3_11ebc, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_11eb4, %bb84
  %v1_11ec4 = phi i32 [ %v1_11eb8, %dec_label_pc_11eb4 ], [ %v3_11eb8, %bb84 ]
  %v1_11ec8 = phi i32 [ %v1_11ebc, %dec_label_pc_11eb4 ], [ %v3_11ebc, %bb84 ]
  %v4_11ec0 = udiv i32 %v1_11eec, 2
  %v6_11ec0 = icmp ult i32 %v1_11ec4, %v4_11ec0
  br i1 %v6_11ec0, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_11ec4 = urem i32 %v1_11eec, 2
  %v4_11ec4 = icmp eq i32 %v3_11ec4, 0
  %v6_11ec4 = sub i32 %v1_11ec4, %v4_11ec0
  br i1 %v4_11ec4, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_11ec8 = udiv i32 %v1_11ee8, 2
  %v6_11ec8 = or i32 %v1_11ec8, %v5_11ec8
  store i32 %v6_11ec8, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_11ed0 = phi i32 [ %v6_11ec4, %bb85 ], [ %v1_11ec4, %.thread7 ], [ %v6_11ec4, %bb86 ]
  %v1_11ed4 = phi i32 [ %v1_11ec8, %bb85 ], [ %v1_11ec8, %.thread7 ], [ %v6_11ec8, %bb86 ]
  %v4_11ecc = udiv i32 %v1_11eec, 4
  %v6_11ecc = icmp ult i32 %v1_11ed0, %v4_11ecc
  br i1 %v6_11ecc, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_11ed0 = and i32 %v1_11eec, 2
  %v4_11ed0 = icmp eq i32 %v3_11ed0, 0
  %v6_11ed0 = sub i32 %v1_11ed0, %v4_11ecc
  br i1 %v4_11ed0, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_11ed4 = udiv i32 %v1_11ee8, 4
  %v6_11ed4 = or i32 %v1_11ed4, %v5_11ed4
  store i32 %v6_11ed4, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_11edc = phi i32 [ %v6_11ed0, %bb87 ], [ %v1_11ed0, %.thread8 ], [ %v6_11ed0, %bb88 ]
  %v1_11ee0 = phi i32 [ %v1_11ed4, %bb87 ], [ %v1_11ed4, %.thread8 ], [ %v6_11ed4, %bb88 ]
  %v4_11ed8 = udiv i32 %v1_11eec, 8
  %v6_11ed8 = icmp ult i32 %v1_11edc, %v4_11ed8
  br i1 %v6_11ed8, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_11edc = and i32 %v1_11eec, 4
  %v4_11edc = icmp eq i32 %v3_11edc, 0
  %v6_11edc = sub i32 %v1_11edc, %v4_11ed8
  br i1 %v4_11edc, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_11ee0 = udiv i32 %v1_11ee8, 8
  %v6_11ee0 = or i32 %v1_11ee0, %v5_11ee0
  store i32 %v6_11ee0, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_11ef4 = phi i32 [ %v1_11ee0, %bb89 ], [ %v1_11ee0, %.thread9 ], [ %v6_11ee0, %bb90 ]
  %v0_11ee4 = phi i32 [ %v6_11edc, %bb89 ], [ %v1_11edc, %.thread9 ], [ %v6_11edc, %bb90 ]
  %v2_11ee4 = icmp eq i32 %v0_11ee4, 0
  br i1 %v2_11ee4, label %dec_label_pc_11ef4, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_11ee8, 16
  br i1 %tmp138, label %dec_label_pc_11ef4, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_11ee8 = udiv i32 %v1_11ee8, 16
  %v4_11eec = udiv i32 %v1_11eec, 16
  br label %dec_label_pc_11eb4

dec_label_pc_11ef4:                               ; preds = %thread-pre-split, %bb91
  ret i32 %v0_11ef4

dec_label_pc_11efc:                               ; preds = %dec_label_pc_11e68
  %v9_11e68 = icmp eq i32 %v0_11e68, %v1_11e68
  %. = zext i1 %v9_11e68 to i32
  ret i32 %.

dec_label_pc_11f08:                               ; preds = %dec_label_pc_11e70
  %v2_11f08 = icmp ugt i32 %v1_11e68, 65535
  br i1 %v2_11f08, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_11f08
  %v2_11f0c = and i32 %v1_11e68, 32768
  %v3_11f0c = icmp eq i32 %v2_11f0c, 0
  %v4_11f0c = udiv i32 %v1_11e68, 65536
  br i1 %v3_11f0c, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_11f08
  %v0_11f1865 = phi i32 [ %v1_11e68, %dec_label_pc_11f08 ], [ %v4_11f0c, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_11f1c = phi i32 [ %v0_11f1865, %.thread16 ], [ %v4_11f0c, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_11f18 = icmp ugt i32 %v1_11f1c, 255
  br i1 %v2_11f18, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_11f1c = and i32 %v1_11f1c, 128
  %v3_11f1c = icmp eq i32 %v2_11f1c, 0
  %v4_11f1c = udiv i32 %v1_11f1c, 256
  br i1 %v3_11f1c, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_11f20 = or i32 %storemerge, 8
  store i32 %v2_11f20, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_11f2c = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_11f20, %bb98 ]
  %v1_11f28 = phi i32 [ %v1_11f1c, %bb96 ], [ %v4_11f1c, %bb97 ], [ %v4_11f1c, %bb98 ]
  %v2_11f24 = icmp ugt i32 %v1_11f28, 15
  br i1 %v2_11f24, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_11f28 = and i32 %v1_11f28, 8
  %v3_11f28 = icmp eq i32 %v2_11f28, 0
  %v4_11f28 = udiv i32 %v1_11f28, 16
  br i1 %v3_11f28, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_11f2c = add nsw i32 %v1_11f2c, 4
  store i32 %v2_11f2c, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_11f34 = phi i32 [ %v1_11f2c, %.thread17 ], [ %v1_11f2c, %bb99 ], [ %v2_11f2c, %bb100 ]
  %v5_11f38 = phi i32 [ %v1_11f28, %.thread17 ], [ %v4_11f28, %bb99 ], [ %v4_11f28, %bb100 ]
  %v2_11f30 = icmp ugt i32 %v5_11f38, 3
  %v7_11f30 = icmp eq i32 %v5_11f38, 4
  %v2_11f34 = xor i1 %v7_11f30, true
  %v3_11f34 = and i1 %v2_11f30, %v2_11f34
  br i1 %v3_11f34, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_11f34 = add nsw i32 %v4_11f34, 3
  store i32 %v5_11f34, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_11f38 = phi i32 [ %v4_11f34, %.thread18 ], [ %v5_11f34, %bb101 ]
  %v2_11f38 = xor i1 %v2_11f30, true
  %v3_11f38 = or i1 %v7_11f30, %v2_11f38
  br i1 %v3_11f38, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_11f38 = udiv i32 %v5_11f38, 2
  %v9_11f38 = add i32 %v4_11f38, %v8_11f38
  store i32 %v9_11f38, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_11f3c = phi i32 [ %v4_11f38, %bb102 ], [ %v9_11f38, %bb103 ]
  %v6_11f3c = lshr i32 %v0_11e68, %v1_11f3c
  ret i32 %v6_11f3c

dec_label_pc_11f44:                               ; preds = %dec_label_pc_11e5c
  %v0_11f44 = load i32, i32* @lr, align 4
  %v0_11f48 = call i32 @function_120b4()
  store i32 %v0_11f44, i32* @lr, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_11f38, { 1, 0 }
  uselistorder i1 %v7_11f30, { 1, 0 }
  uselistorder i32 %v4_11f28, { 1, 0 }
  uselistorder i32 %v1_11f28, { 1, 0, 2, 3 }
  uselistorder i32 %v2_11f20, { 1, 0 }
  uselistorder i32 %v4_11f1c, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11f1c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11f0c, { 1, 0 }
  uselistorder i32 %v0_11ee4, { 1, 0 }
  uselistorder i32 %v4_11ed8, { 1, 0 }
  uselistorder i32 %v1_11ee0, { 1, 2, 0 }
  uselistorder i32 %v4_11ecc, { 1, 0 }
  uselistorder i32 %v1_11ed4, { 1, 2, 0 }
  uselistorder i32 %v4_11ec0, { 1, 0 }
  uselistorder i32 %v1_11ec8, { 1, 2, 0 }
  uselistorder i32 %v1_11eec, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_11ebc, { 1, 0 }
  uselistorder i32 %v1_11ee8, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_11ea8, { 1, 0 }
  uselistorder i32 %v3_11ea4, { 1, 0 }
  uselistorder i32 %v1_11ea4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_11ea8, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11e94, { 1, 0 }
  uselistorder i32 %v4_11e90, { 2, 1, 0 }
  uselistorder i32 %v1_11e94, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_11e9c.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_11e68, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_11e68, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_11e5c, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_11ef4, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_11eb0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11e9cthread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_11f58(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11f58:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_11f5c = call i32 @function_11e5c()
  ret i32 %v0_11f5c
}

define i32 @function_11f70() local_unnamed_addr {
dec_label_pc_11f70:
  %v0_11f70 = load i32, i32* @r1, align 4
  %v1_11f70 = icmp slt i32 %v0_11f70, 0
  %v2_11f70 = icmp eq i32 %v0_11f70, 0
  %v0_11f74 = load i32, i32* @r0, align 4
  %v2_11f74 = xor i32 %v0_11f74, %v0_11f70
  br i1 %v2_11f70, label %dec_label_pc_12088, label %dec_label_pc_11f7c

dec_label_pc_11f7c:                               ; preds = %dec_label_pc_11f70
  br i1 %v1_11f70, label %bb, label %thread-pre-split

bb:                                               ; preds = %dec_label_pc_11f7c
  %v2_11f7c = sub i32 0, %v0_11f70
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_11f7c, %bb
  %v1_12048 = phi i32 [ %v2_11f7c, %bb ], [ %v0_11f70, %dec_label_pc_11f7c ]
  %v1_11f80 = add i32 %v1_12048, -1
  %v7_11f80 = icmp eq i32 %v1_12048, 1
  br i1 %v7_11f80, label %dec_label_pc_12028, label %dec_label_pc_11f88

dec_label_pc_11f88:                               ; preds = %thread-pre-split
  %v1_11f88 = icmp slt i32 %v0_11f74, 0
  br i1 %v1_11f88, label %bb84, label %bb85

bb84:                                             ; preds = %dec_label_pc_11f88
  %v2_11f8c = sub i32 0, %v0_11f74
  br label %bb85

bb85:                                             ; preds = %dec_label_pc_11f88, %bb84
  %v0_1207c = phi i32 [ %v0_11f74, %dec_label_pc_11f88 ], [ %v2_11f8c, %bb84 ]
  %v3_11f90 = icmp uge i32 %v0_1207c, %v1_12048
  %v9_11f90 = icmp eq i32 %v0_1207c, %v1_12048
  %v2_11f94 = xor i1 %v3_11f90, true
  %v3_11f94 = or i1 %v9_11f90, %v2_11f94
  br i1 %v3_11f94, label %dec_label_pc_12034, label %dec_label_pc_11f98

dec_label_pc_11f98:                               ; preds = %bb85
  %v2_11f98 = and i32 %v1_11f80, %v1_12048
  %v4_11f98 = icmp eq i32 %v2_11f98, 0
  br i1 %v4_11f98, label %dec_label_pc_12044, label %dec_label_pc_11fa0

dec_label_pc_11fa0:                               ; preds = %dec_label_pc_11f98
  %v3_11fa0 = icmp ult i32 %v1_12048, 536870912
  br i1 %v3_11fa0, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_11fa0
  %v4_11fa4 = mul i32 %v1_12048, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_11fa0, %.thread
  %v0_11fc4.pr40.ph = phi i32 [ %v4_11fa4, %.thread ], [ %v1_12048, %dec_label_pc_11fa0 ]
  %storemerge142 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_11fa0 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb88
  %v0_11fc4.pr40 = phi i32 [ %v4_11fb8, %bb88 ], [ %v0_11fc4.pr40.ph, %.preheader.preheader ]
  %v1_11fbc = phi i32 [ %v4_11fbc, %bb88 ], [ %storemerge142, %.preheader.preheader ]
  %v2_11fb0 = icmp ugt i32 %v0_11fc4.pr40, 268435455
  br i1 %v2_11fb0, label %.thread3, label %bb86

.thread3:                                         ; preds = %.preheader
  br label %dec_label_pc_11fc4thread-pre-split.loopexit

bb86:                                             ; preds = %.preheader
  %v4_11fb4 = icmp ult i32 %v0_11fc4.pr40, %v0_1207c
  br i1 %v4_11fb4, label %bb87, label %dec_label_pc_11fc4thread-pre-split.loopexit.loopexit

bb87:                                             ; preds = %bb86
  %v2_11fb8 = and i32 %v0_11fc4.pr40, 268435456
  %v3_11fb8 = icmp eq i32 %v2_11fb8, 0
  %v4_11fb8 = mul i32 %v0_11fc4.pr40, 16
  br i1 %v3_11fb8, label %bb88, label %dec_label_pc_11fc4.loopexit

bb88:                                             ; preds = %bb87
  %v2_11fbc = and i32 %v1_11fbc, 268435456
  %v3_11fbc = icmp eq i32 %v2_11fbc, 0
  %v4_11fbc = mul i32 %v1_11fbc, 16
  br i1 %v3_11fbc, label %.preheader, label %dec_label_pc_11fc4thread-pre-split.loopexit.loopexit

dec_label_pc_11fc4thread-pre-split.loopexit.loopexit: ; preds = %bb88, %bb86
  %v1_11fd052.ph = phi i32 [ %v1_11fbc, %bb86 ], [ %v4_11fbc, %bb88 ]
  %v0_11fc4.pr42.ph = phi i32 [ %v0_11fc4.pr40, %bb86 ], [ %v4_11fb8, %bb88 ]
  br label %dec_label_pc_11fc4thread-pre-split.loopexit

dec_label_pc_11fc4thread-pre-split.loopexit:      ; preds = %dec_label_pc_11fc4thread-pre-split.loopexit.loopexit, %.thread3
  %v1_11fd052 = phi i32 [ %v1_11fbc, %.thread3 ], [ %v1_11fd052.ph, %dec_label_pc_11fc4thread-pre-split.loopexit.loopexit ]
  %v0_11fc4.pr42 = phi i32 [ %v0_11fc4.pr40, %.thread3 ], [ %v0_11fc4.pr42.ph, %dec_label_pc_11fc4thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11fc4thread-pre-split

dec_label_pc_11fc4thread-pre-split:               ; preds = %dec_label_pc_11fc4thread-pre-split.loopexit, %bb90
  %v1_11fd050 = phi i32 [ %v1_11fd052, %dec_label_pc_11fc4thread-pre-split.loopexit ], [ %v3_11fd0, %bb90 ]
  %v2_11fc848 = phi i32 [ %v0_1207c, %dec_label_pc_11fc4thread-pre-split.loopexit ], [ %v2_11fc8, %bb90 ]
  %v0_11fc4.pr = phi i32 [ %v0_11fc4.pr42, %dec_label_pc_11fc4thread-pre-split.loopexit ], [ %v3_11fcc, %bb90 ]
  br label %dec_label_pc_11fc4

dec_label_pc_11fc4.loopexit:                      ; preds = %bb87
  br label %dec_label_pc_11fc4

dec_label_pc_11fc4:                               ; preds = %dec_label_pc_11fc4.loopexit, %dec_label_pc_11fc4thread-pre-split
  %v1_11fd0 = phi i32 [ %v1_11fd050, %dec_label_pc_11fc4thread-pre-split ], [ %v1_11fbc, %dec_label_pc_11fc4.loopexit ]
  %v2_11fc8 = phi i32 [ %v2_11fc848, %dec_label_pc_11fc4thread-pre-split ], [ %v0_1207c, %dec_label_pc_11fc4.loopexit ]
  %v1_11fcc = phi i32 [ %v0_11fc4.pr, %dec_label_pc_11fc4thread-pre-split ], [ %v4_11fb8, %dec_label_pc_11fc4.loopexit ]
  %v2_11fc4 = icmp slt i32 %v1_11fcc, 0
  br i1 %v2_11fc4, label %dec_label_pc_11fd8, label %bb89

bb89:                                             ; preds = %dec_label_pc_11fc4
  %v4_11fc8 = icmp ult i32 %v1_11fcc, %v2_11fc8
  br i1 %v4_11fc8, label %bb90, label %dec_label_pc_11fd8

bb90:                                             ; preds = %bb89
  %v3_11fcc = mul i32 %v1_11fcc, 2
  %v2_11fd0 = icmp slt i32 %v1_11fd0, 0
  %v3_11fd0 = mul i32 %v1_11fd0, 2
  br i1 %v2_11fd0, label %dec_label_pc_11fd8, label %dec_label_pc_11fc4thread-pre-split

dec_label_pc_11fd8:                               ; preds = %bb89, %dec_label_pc_11fc4, %bb90
  %v2_11fe463 = phi i32 [ %v3_11fd0, %bb90 ], [ %v1_11fd0, %bb89 ], [ %v1_11fd0, %dec_label_pc_11fc4 ]
  %v1_11fdc55 = phi i32 [ %v3_11fcc, %bb90 ], [ %v1_11fcc, %bb89 ], [ %v1_11fcc, %dec_label_pc_11fc4 ]
  br label %dec_label_pc_11fdc

dec_label_pc_11fdc:                               ; preds = %.thread13, %dec_label_pc_11fd8
  %v1_12010 = phi i32 [ %v4_12010, %.thread13 ], [ %v2_11fe463, %dec_label_pc_11fd8 ]
  %v1_11fe4 = phi i32 [ %v1_12020, %.thread13 ], [ 0, %dec_label_pc_11fd8 ]
  %v1_12014 = phi i32 [ %v4_12014, %.thread13 ], [ %v1_11fdc55, %dec_label_pc_11fd8 ]
  %v1_11fe0 = phi i32 [ %v0_1200c, %.thread13 ], [ %v0_1207c, %dec_label_pc_11fd8 ]
  %v3_11fdc = icmp ult i32 %v1_11fe0, %v1_12014
  br i1 %v3_11fdc, label %.thread8, label %bb91

bb91:                                             ; preds = %dec_label_pc_11fdc
  %v3_11fe0 = sub i32 %v1_11fe0, %v1_12014
  %v3_11fe4 = or i32 %v1_11fe4, %v1_12010
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_11fdc, %bb91
  %v1_11fec = phi i32 [ %v1_11fe0, %dec_label_pc_11fdc ], [ %v3_11fe0, %bb91 ]
  %v1_11ff0 = phi i32 [ %v1_11fe4, %dec_label_pc_11fdc ], [ %v3_11fe4, %bb91 ]
  %v4_11fe8 = udiv i32 %v1_12014, 2
  %v6_11fe8 = icmp ult i32 %v1_11fec, %v4_11fe8
  br i1 %v6_11fe8, label %.thread9, label %bb92

bb92:                                             ; preds = %.thread8
  %v3_11fec = urem i32 %v1_12014, 2
  %v4_11fec = icmp eq i32 %v3_11fec, 0
  %v6_11fec = sub i32 %v1_11fec, %v4_11fe8
  br i1 %v4_11fec, label %.thread9, label %bb93

bb93:                                             ; preds = %bb92
  %v5_11ff0 = udiv i32 %v1_12010, 2
  %v6_11ff0 = or i32 %v1_11ff0, %v5_11ff0
  br label %.thread9

.thread9:                                         ; preds = %bb92, %.thread8, %bb93
  %v1_11ff8 = phi i32 [ %v6_11fec, %bb92 ], [ %v1_11fec, %.thread8 ], [ %v6_11fec, %bb93 ]
  %v1_11ffc = phi i32 [ %v1_11ff0, %bb92 ], [ %v1_11ff0, %.thread8 ], [ %v6_11ff0, %bb93 ]
  %v4_11ff4 = udiv i32 %v1_12014, 4
  %v6_11ff4 = icmp ult i32 %v1_11ff8, %v4_11ff4
  br i1 %v6_11ff4, label %.thread10, label %bb94

bb94:                                             ; preds = %.thread9
  %v3_11ff8 = and i32 %v1_12014, 2
  %v4_11ff8 = icmp eq i32 %v3_11ff8, 0
  %v6_11ff8 = sub i32 %v1_11ff8, %v4_11ff4
  br i1 %v4_11ff8, label %.thread10, label %bb95

bb95:                                             ; preds = %bb94
  %v5_11ffc = udiv i32 %v1_12010, 4
  %v6_11ffc = or i32 %v1_11ffc, %v5_11ffc
  br label %.thread10

.thread10:                                        ; preds = %bb94, %.thread9, %bb95
  %v1_12004 = phi i32 [ %v6_11ff8, %bb94 ], [ %v1_11ff8, %.thread9 ], [ %v6_11ff8, %bb95 ]
  %v1_12008 = phi i32 [ %v1_11ffc, %bb94 ], [ %v1_11ffc, %.thread9 ], [ %v6_11ffc, %bb95 ]
  %v4_12000 = udiv i32 %v1_12014, 8
  %v6_12000 = icmp ult i32 %v1_12004, %v4_12000
  br i1 %v6_12000, label %thread-pre-split12, label %bb96

bb96:                                             ; preds = %.thread10
  %v3_12004 = and i32 %v1_12014, 4
  %v4_12004 = icmp eq i32 %v3_12004, 0
  %v6_12004 = sub i32 %v1_12004, %v4_12000
  br i1 %v4_12004, label %thread-pre-split12, label %bb97

bb97:                                             ; preds = %bb96
  %v5_12008 = udiv i32 %v1_12010, 8
  %v6_12008 = or i32 %v1_12008, %v5_12008
  br label %thread-pre-split12

thread-pre-split12:                               ; preds = %bb97, %.thread10, %bb96
  %v1_12020 = phi i32 [ %v1_12008, %bb96 ], [ %v1_12008, %.thread10 ], [ %v6_12008, %bb97 ]
  %v0_1200c = phi i32 [ %v6_12004, %bb96 ], [ %v1_12004, %.thread10 ], [ %v6_12004, %bb97 ]
  %v2_1200c = icmp eq i32 %v0_1200c, 0
  br i1 %v2_1200c, label %dec_label_pc_1201c, label %bb98

bb98:                                             ; preds = %thread-pre-split12
  %tmp = icmp ult i32 %v1_12010, 16
  br i1 %tmp, label %dec_label_pc_1201c, label %.thread13

.thread13:                                        ; preds = %bb98
  %v4_12010 = udiv i32 %v1_12010, 16
  %v4_12014 = udiv i32 %v1_12014, 16
  br label %dec_label_pc_11fdc

dec_label_pc_1201c:                               ; preds = %thread-pre-split12, %bb98
  %v1_1201c = icmp slt i32 %v2_11f74, 0
  br i1 %v1_1201c, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_1201c
  %v2_12020 = sub i32 0, %v1_12020
  br label %.thread16

.thread16:                                        ; preds = %bb103, %bb102, %bb100, %dec_label_pc_12028, %dec_label_pc_1201c, %bb99
  %v1_12024 = phi i32 [ %v1_12020, %dec_label_pc_1201c ], [ %v2_12020, %bb99 ], [ %v2_1202c, %bb100 ], [ undef, %dec_label_pc_12028 ], [ %v1_1204080, %bb102 ], [ %v2_1203c, %bb103 ]
  ret i32 %v1_12024

dec_label_pc_12028:                               ; preds = %thread-pre-split
  br i1 %v1_11f70, label %bb100, label %.thread16

bb100:                                            ; preds = %dec_label_pc_12028
  %v2_1202c = sub i32 0, %v0_11f74
  br label %.thread16

dec_label_pc_12034:                               ; preds = %bb85
  br i1 %v3_11f90, label %bb102, label %bb101

bb101:                                            ; preds = %dec_label_pc_12034
  br label %bb102

bb102:                                            ; preds = %dec_label_pc_12034, %bb101
  %v1_1204080 = phi i32 [ %v0_11f74, %dec_label_pc_12034 ], [ 0, %bb101 ]
  br i1 %v9_11f90, label %bb103, label %.thread16

bb103:                                            ; preds = %bb102
  %v4_12038 = ashr i32 %v2_11f74, 31
  %v2_1203c = or i32 %v4_12038, 1
  br label %.thread16

dec_label_pc_12044:                               ; preds = %dec_label_pc_11f98
  %v2_12044 = icmp ugt i32 %v1_12048, 65535
  br i1 %v2_12044, label %bb104, label %.thread19

bb104:                                            ; preds = %dec_label_pc_12044
  %v2_12048 = and i32 %v1_12048, 32768
  %v3_12048 = icmp eq i32 %v2_12048, 0
  %v4_12048 = udiv i32 %v1_12048, 65536
  br i1 %v3_12048, label %.thread19, label %bb105

.thread19:                                        ; preds = %bb104, %dec_label_pc_12044
  %v0_1205470 = phi i32 [ %v1_12048, %dec_label_pc_12044 ], [ %v4_12048, %bb104 ]
  br label %bb105

bb105:                                            ; preds = %bb104, %.thread19
  %v1_12058 = phi i32 [ %v0_1205470, %.thread19 ], [ %v4_12048, %bb104 ]
  %storemerge = phi i32 [ 0, %.thread19 ], [ 16, %bb104 ]
  %v2_12054 = icmp ugt i32 %v1_12058, 255
  br i1 %v2_12054, label %bb106, label %.thread20

bb106:                                            ; preds = %bb105
  %v2_12058 = and i32 %v1_12058, 128
  %v3_12058 = icmp eq i32 %v2_12058, 0
  %v4_12058 = udiv i32 %v1_12058, 256
  br i1 %v3_12058, label %.thread20, label %bb107

bb107:                                            ; preds = %bb106
  %v2_1205c = or i32 %storemerge, 8
  br label %.thread20

.thread20:                                        ; preds = %bb106, %bb105, %bb107
  %v1_12068 = phi i32 [ %storemerge, %bb105 ], [ %storemerge, %bb106 ], [ %v2_1205c, %bb107 ]
  %v1_12064 = phi i32 [ %v1_12058, %bb105 ], [ %v4_12058, %bb106 ], [ %v4_12058, %bb107 ]
  %v2_12060 = icmp ugt i32 %v1_12064, 15
  br i1 %v2_12060, label %bb108, label %.thread21

bb108:                                            ; preds = %.thread20
  %v2_12064 = and i32 %v1_12064, 8
  %v3_12064 = icmp eq i32 %v2_12064, 0
  %v4_12064 = udiv i32 %v1_12064, 16
  br i1 %v3_12064, label %.thread21, label %bb109

bb109:                                            ; preds = %bb108
  %v2_12068 = add nsw i32 %v1_12068, 4
  br label %.thread21

.thread21:                                        ; preds = %bb108, %.thread20, %bb109
  %v4_12070 = phi i32 [ %v1_12068, %.thread20 ], [ %v1_12068, %bb108 ], [ %v2_12068, %bb109 ]
  %v5_12074 = phi i32 [ %v1_12064, %.thread20 ], [ %v4_12064, %bb108 ], [ %v4_12064, %bb109 ]
  %v2_1206c = icmp ugt i32 %v5_12074, 3
  %v7_1206c = icmp eq i32 %v5_12074, 4
  %v2_12070 = xor i1 %v7_1206c, true
  %v3_12070 = and i1 %v2_1206c, %v2_12070
  br i1 %v3_12070, label %bb110, label %bb111

bb110:                                            ; preds = %.thread21
  %v5_12070 = add nsw i32 %v4_12070, 3
  br label %bb111

bb111:                                            ; preds = %.thread21, %bb110
  %v4_12074 = phi i32 [ %v4_12070, %.thread21 ], [ %v5_12070, %bb110 ]
  %v2_12074 = xor i1 %v2_1206c, true
  %v3_12074 = or i1 %v7_1206c, %v2_12074
  br i1 %v3_12074, label %bb112, label %bb113

bb112:                                            ; preds = %bb111
  %v8_12074 = udiv i32 %v5_12074, 2
  %v9_12074 = add i32 %v4_12074, %v8_12074
  br label %bb113

bb113:                                            ; preds = %bb111, %bb112
  %v1_1207c = phi i32 [ %v4_12074, %bb111 ], [ %v9_12074, %bb112 ]
  %v1_12078 = icmp slt i32 %v2_11f74, 0
  %v6_1207c = lshr i32 %v0_1207c, %v1_1207c
  %v2_12080 = sub i32 0, %v6_1207c
  %v2_12080.v6_1207c = select i1 %v1_12078, i32 %v2_12080, i32 %v6_1207c
  ret i32 %v2_12080.v6_1207c

dec_label_pc_12088:                               ; preds = %dec_label_pc_11f70
  %v0_1208c = call i32 @function_120b4()
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_12074, { 1, 0 }
  uselistorder i1 %v7_1206c, { 1, 0 }
  uselistorder i32 %v4_12064, { 1, 0 }
  uselistorder i32 %v1_12064, { 1, 0, 2, 3 }
  uselistorder i32 %v4_12058, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_12058, { 1, 0, 2, 3 }
  uselistorder i32 %v4_12048, { 1, 0 }
  uselistorder i32 %v0_1200c, { 1, 0 }
  uselistorder i32 %v4_12000, { 1, 0 }
  uselistorder i32 %v1_12008, { 1, 2, 0 }
  uselistorder i32 %v4_11ff4, { 1, 0 }
  uselistorder i32 %v1_11ffc, { 1, 2, 0 }
  uselistorder i32 %v4_11fe8, { 1, 0 }
  uselistorder i32 %v1_11ff0, { 1, 2, 0 }
  uselistorder i32 %v1_12014, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_11fe4, { 1, 0 }
  uselistorder i32 %v1_12010, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_11fd0, { 1, 0 }
  uselistorder i32 %v3_11fcc, { 1, 0 }
  uselistorder i32 %v1_11fcc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_11fc8, { 1, 0 }
  uselistorder i32 %v1_11fd0, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11fbc, { 1, 0 }
  uselistorder i32 %v4_11fb8, { 2, 1, 0 }
  uselistorder i32 %v1_11fbc, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_11fc4.pr40, { 1, 2, 0, 5, 4, 3 }
  uselistorder i1 %v3_11f90, { 1, 0 }
  uselistorder i32 %v1_12048, { 5, 1, 6, 7, 3, 2, 0, 4, 8, 9, 10, 11 }
  uselistorder i32 %v2_11f74, { 1, 0, 2 }
  uselistorder i32 %v0_11f74, { 2, 1, 3, 4, 5, 0 }
  uselistorder i32 %v0_11f70, { 2, 1, 0, 4, 3 }
  uselistorder i32 ()* @function_120b4, { 1, 0 }
  uselistorder label %bb113, { 1, 0 }
  uselistorder label %bb111, { 1, 0 }
  uselistorder label %.thread21, { 2, 0, 1 }
  uselistorder label %.thread20, { 2, 0, 1 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread16, { 0, 1, 2, 3, 5, 4 }
  uselistorder label %dec_label_pc_1201c, { 1, 0 }
  uselistorder label %thread-pre-split12, { 0, 2, 1 }
  uselistorder label %.thread10, { 2, 0, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_11fd8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11fc4thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
}

define i32 @function_1209c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1209c:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_120a0 = call i32 @function_11f70()
  ret i32 %v0_120a0
}

define i32 @function_120b4() local_unnamed_addr {
dec_label_pc_120b4:
  %v1_120bc = call i32 @function_12d1c(i32 8)
  ret i32 %v1_120bc
}

define i32 @function_120c8() local_unnamed_addr {
dec_label_pc_120c8:
  %v1_120d8 = load i32, i32* @r0, align 4
  ret i32 %v1_120d8
}

define i32 @function_120dc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_120dc:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v6_120dc = load i32, i32* @r2, align 4
  %v9_120dc = load i32, i32* @r3, align 4
  store i32 %v9_120dc, i32* %stack_var_-4, align 4
  %v1_120ec = and i32 %arg2, 64
  %v2_120ec = icmp eq i32 %v1_120ec, 0
  br i1 %v2_120ec, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_120dc
  %v3_120f4 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v3_120f4, i32* @r3, align 4
  %phitmp = urem i32 %v6_120dc, 65536
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_120dc, %bb
  %v0_120f8 = phi i32 [ 0, %dec_label_pc_120dc ], [ %phitmp, %bb ]
  store i32 %v0_120f8, i32* @r2, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12128, label %dec_label_pc_12118

dec_label_pc_12118:                               ; preds = %.thread
  %v0_12118 = call i32 @function_128f8()
  %v0_1211c = load i32, i32* %r7.global-to-local, align 4
  %v1_1211c = sub i32 0, %v0_1211c
  store i32 %v1_1211c, i32* @r3, align 4
  %v2_12120 = inttoptr i32 %v0_12118 to i32*
  store i32 %v1_1211c, i32* %v2_12120, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12128

dec_label_pc_12128:                               ; preds = %.thread, %dec_label_pc_12118
  %v0_12128 = phi i32 [ %arg1, %.thread ], [ -1, %dec_label_pc_12118 ]
  ret i32 %v0_12128

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12128, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1213c() local_unnamed_addr {
dec_label_pc_1213c:
  %v1_1214c = load i32, i32* @r0, align 4
  ret i32 %v1_1214c
}

define i32 @function_12150(i32* %arg1) local_unnamed_addr {
dec_label_pc_12150:
  %stack_var_-16 = alloca i32, align 4
  %v2_12154 = ptrtoint i32* %stack_var_-16 to i32
  %v2_12164 = call i32 @function_122d0(i32 %v2_12154, i32 0)
  %v2_12168 = load i32, i32* %stack_var_-16, align 4
  %v2_1216c = icmp eq i32* %arg1, null
  br i1 %v2_1216c, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_12150
  store i32 %v2_12168, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_12150, %bb
  ret i32 %v2_12168

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_12180(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12180:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_121b4, label %dec_label_pc_121a4

dec_label_pc_121a4:                               ; preds = %dec_label_pc_12180
  %v0_121a4 = call i32 @function_128f8()
  %v0_121a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_121a8 = sub i32 0, %v0_121a8
  %v2_121ac = inttoptr i32 %v0_121a4 to i32*
  store i32 %v1_121a8, i32* %v2_121ac, align 4
  br label %dec_label_pc_121b4

dec_label_pc_121b4:                               ; preds = %dec_label_pc_12180, %dec_label_pc_121a4
  %v1_121bc = phi i32 [ %arg1, %dec_label_pc_12180 ], [ -1, %dec_label_pc_121a4 ]
  ret i32 %v1_121bc

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_121b4, { 1, 0 }
}

define i32 @function_121c0() local_unnamed_addr {
dec_label_pc_121c0:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_121c0 = load i32, i32* @r7, align 4
  store i32 %v3_121c0, i32* %stack_var_-8, align 4
  %v0_121cc = load i32, i32* @r0, align 4
  store i32 %v0_121cc, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_121cc, -4095
  br i1 %tmp, label %dec_label_pc_121ec, label %dec_label_pc_121dc

dec_label_pc_121dc:                               ; preds = %dec_label_pc_121c0
  %v0_121dc = call i32 @function_128f8()
  %v0_121e0 = load i32, i32* %r7.global-to-local, align 4
  %v1_121e0 = sub i32 0, %v0_121e0
  %v2_121e4 = inttoptr i32 %v0_121dc to i32*
  store i32 %v1_121e0, i32* %v2_121e4, align 4
  %v2_121ec.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_121ec

dec_label_pc_121ec:                               ; preds = %dec_label_pc_121c0, %dec_label_pc_121dc
  %v1_121f0 = phi i32 [ %v0_121cc, %dec_label_pc_121c0 ], [ -1, %dec_label_pc_121dc ]
  %v2_121ec = phi i32 [ %v3_121c0, %dec_label_pc_121c0 ], [ %v2_121ec.pre, %dec_label_pc_121dc ]
  store i32 %v2_121ec, i32* @r7, align 4
  ret i32 %v1_121f0

; uselistorder directives
  uselistorder i32 %v0_121cc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_121ec, { 1, 0 }
}

define i32 @function_121f4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_121f4:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12224, label %dec_label_pc_12214

dec_label_pc_12214:                               ; preds = %dec_label_pc_121f4
  %v0_12214 = call i32 @function_128f8()
  %v0_12218 = load i32, i32* %r4.global-to-local, align 4
  %v1_12218 = sub i32 0, %v0_12218
  %v2_1221c = inttoptr i32 %v0_12214 to i32*
  store i32 %v1_12218, i32* %v2_1221c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12224

dec_label_pc_12224:                               ; preds = %dec_label_pc_121f4, %dec_label_pc_12214
  %v0_12224 = phi i32 [ %arg1, %dec_label_pc_121f4 ], [ -1, %dec_label_pc_12214 ]
  ret i32 %v0_12224

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12224, { 1, 0 }
}

define i32 @function_12234(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12234:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12234 = load i32, i32* @r7, align 4
  store i32 %v3_12234, i32* %stack_var_-8, align 4
  %v0_12240 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12240, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12240, -4095
  br i1 %tmp, label %dec_label_pc_12260, label %dec_label_pc_12250

dec_label_pc_12250:                               ; preds = %dec_label_pc_12234
  %v0_12250 = call i32 @function_128f8()
  %v0_12254 = load i32, i32* %r7.global-to-local, align 4
  %v1_12254 = sub i32 0, %v0_12254
  %v2_12258 = inttoptr i32 %v0_12250 to i32*
  store i32 %v1_12254, i32* %v2_12258, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_12260.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12260

dec_label_pc_12260:                               ; preds = %dec_label_pc_12234, %dec_label_pc_12250
  %v1_12264 = phi i32 [ %v0_12240, %dec_label_pc_12234 ], [ -1, %dec_label_pc_12250 ]
  %v2_12260 = phi i32 [ %v3_12234, %dec_label_pc_12234 ], [ %v2_12260.pre, %dec_label_pc_12250 ]
  store i32 %v2_12260, i32* @r7, align 4
  ret i32 %v1_12264

; uselistorder directives
  uselistorder i32 %v0_12240, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12260, { 1, 0 }
}

define i32 @function_12268(i32 %arg1) local_unnamed_addr {
dec_label_pc_12268:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12268 = load i32, i32* @r7, align 4
  store i32 %v3_12268, i32* %stack_var_-8, align 4
  %v0_12274 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12274, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12274, -4095
  br i1 %tmp, label %dec_label_pc_12294, label %dec_label_pc_12284

dec_label_pc_12284:                               ; preds = %dec_label_pc_12268
  %v0_12284 = call i32 @function_128f8()
  %v0_12288 = load i32, i32* %r7.global-to-local, align 4
  %v1_12288 = sub i32 0, %v0_12288
  %v2_1228c = inttoptr i32 %v0_12284 to i32*
  store i32 %v1_12288, i32* %v2_1228c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_12294.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12294

dec_label_pc_12294:                               ; preds = %dec_label_pc_12268, %dec_label_pc_12284
  %v1_12298 = phi i32 [ %v0_12274, %dec_label_pc_12268 ], [ -1, %dec_label_pc_12284 ]
  %v2_12294 = phi i32 [ %v3_12268, %dec_label_pc_12268 ], [ %v2_12294.pre, %dec_label_pc_12284 ]
  store i32 %v2_12294, i32* @r7, align 4
  ret i32 %v1_12298

; uselistorder directives
  uselistorder i32 %v0_12274, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12294, { 1, 0 }
}

define i32 @function_1229c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1229c:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1229c = load i32, i32* @r7, align 4
  store i32 %v3_1229c, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_122c4, label %dec_label_pc_122b4

dec_label_pc_122b4:                               ; preds = %dec_label_pc_1229c
  %v0_122b4 = call i32 @function_128f8()
  %v0_122b8 = load i32, i32* %r7.global-to-local, align 4
  %v1_122b8 = sub i32 0, %v0_122b8
  %v2_122bc = inttoptr i32 %v0_122b4 to i32*
  store i32 %v1_122b8, i32* %v2_122bc, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_122c8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_122c4

dec_label_pc_122c4:                               ; preds = %dec_label_pc_1229c, %dec_label_pc_122b4
  %v2_122c8 = phi i32 [ %v3_1229c, %dec_label_pc_1229c ], [ %v2_122c8.pre, %dec_label_pc_122b4 ]
  %v0_122c4 = phi i32 [ %arg1, %dec_label_pc_1229c ], [ -1, %dec_label_pc_122b4 ]
  store i32 %v2_122c8, i32* @r7, align 4
  ret i32 %v0_122c4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_122c4, { 1, 0 }
}

define i32 @function_122d0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_122d0:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_122d0 = load i32, i32* @r7, align 4
  store i32 %v3_122d0, i32* %stack_var_-8, align 4
  %v0_122dc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_122dc, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_122dc, -4095
  br i1 %tmp, label %dec_label_pc_122fc, label %dec_label_pc_122ec

dec_label_pc_122ec:                               ; preds = %dec_label_pc_122d0
  %v0_122ec = call i32 @function_128f8()
  %v0_122f0 = load i32, i32* %r7.global-to-local, align 4
  %v1_122f0 = sub i32 0, %v0_122f0
  store i32 %v1_122f0, i32* @r3, align 4
  %v2_122f4 = inttoptr i32 %v0_122ec to i32*
  store i32 %v1_122f0, i32* %v2_122f4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_122fc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_122fc

dec_label_pc_122fc:                               ; preds = %dec_label_pc_122d0, %dec_label_pc_122ec
  %v1_12300 = phi i32 [ %v0_122dc, %dec_label_pc_122d0 ], [ -1, %dec_label_pc_122ec ]
  %v2_122fc = phi i32 [ %v3_122d0, %dec_label_pc_122d0 ], [ %v2_122fc.pre, %dec_label_pc_122ec ]
  store i32 %v2_122fc, i32* @r7, align 4
  ret i32 %v1_12300

; uselistorder directives
  uselistorder i32 %v0_122dc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_122fc, { 1, 0 }
}

define i32 @function_12304(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12304:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_12304 = load i32, i32* @r3, align 4
  store i32 %v9_12304, i32* %stack_var_-4, align 4
  %v2_1231c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_1231c, i32* @r3, align 4
  %v0_12340 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12340, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12340, -4095
  br i1 %tmp, label %dec_label_pc_12360, label %dec_label_pc_12350

dec_label_pc_12350:                               ; preds = %dec_label_pc_12304
  %v0_12350 = call i32 @function_128f8()
  %v0_12354 = load i32, i32* %r7.global-to-local, align 4
  %v1_12354 = sub i32 0, %v0_12354
  store i32 %v1_12354, i32* @r3, align 4
  %v2_12358 = inttoptr i32 %v0_12350 to i32*
  store i32 %v1_12354, i32* %v2_12358, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12360

dec_label_pc_12360:                               ; preds = %dec_label_pc_12304, %dec_label_pc_12350
  %v1_1236c = phi i32 [ %v0_12340, %dec_label_pc_12304 ], [ -1, %dec_label_pc_12350 ]
  ret i32 %v1_1236c

; uselistorder directives
  uselistorder i32 %v0_12340, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12360, { 1, 0 }
}

define i32 @function_12370(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12370:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_123ac = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_123ac, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_123ac, -4095
  br i1 %tmp, label %dec_label_pc_123cc, label %dec_label_pc_123bc

dec_label_pc_123bc:                               ; preds = %dec_label_pc_12370
  %v0_123bc = call i32 @function_128f8()
  %v0_123c0 = load i32, i32* %r7.global-to-local, align 4
  %v1_123c0 = sub i32 0, %v0_123c0
  %v2_123c4 = inttoptr i32 %v0_123bc to i32*
  store i32 %v1_123c0, i32* %v2_123c4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_123cc

dec_label_pc_123cc:                               ; preds = %dec_label_pc_12370, %dec_label_pc_123bc
  %v1_123d8 = phi i32 [ %v0_123ac, %dec_label_pc_12370 ], [ -1, %dec_label_pc_123bc ]
  ret i32 %v1_123d8

; uselistorder directives
  uselistorder i32 %v0_123ac, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_123cc, { 1, 0 }
}

define i32 @function_123dc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_123dc:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_123dc = load i32, i32* @r7, align 4
  store i32 %v3_123dc, i32* %stack_var_-8, align 4
  %v0_123e8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_123e8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_123e8, -4095
  br i1 %tmp, label %dec_label_pc_12408, label %dec_label_pc_123f8

dec_label_pc_123f8:                               ; preds = %dec_label_pc_123dc
  %v0_123f8 = call i32 @function_128f8()
  %v0_123fc = load i32, i32* %r7.global-to-local, align 4
  %v1_123fc = sub i32 0, %v0_123fc
  %v2_12400 = inttoptr i32 %v0_123f8 to i32*
  store i32 %v1_123fc, i32* %v2_12400, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_12408.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12408

dec_label_pc_12408:                               ; preds = %dec_label_pc_123dc, %dec_label_pc_123f8
  %v1_1240c = phi i32 [ %v0_123e8, %dec_label_pc_123dc ], [ -1, %dec_label_pc_123f8 ]
  %v2_12408 = phi i32 [ %v3_123dc, %dec_label_pc_123dc ], [ %v2_12408.pre, %dec_label_pc_123f8 ]
  store i32 %v2_12408, i32* @r7, align 4
  ret i32 %v1_1240c

; uselistorder directives
  uselistorder i32 %v0_123e8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12408, { 1, 0 }
}

define i32 @function_12410(i32 %arg1) local_unnamed_addr {
dec_label_pc_12410:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12410 = load i32, i32* @r7, align 4
  store i32 %v3_12410, i32* %stack_var_-8, align 4
  %v0_1241c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1241c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1241c, -4095
  br i1 %tmp, label %dec_label_pc_1243c, label %dec_label_pc_1242c

dec_label_pc_1242c:                               ; preds = %dec_label_pc_12410
  %v0_1242c = call i32 @function_128f8()
  %v0_12430 = load i32, i32* %r7.global-to-local, align 4
  %v1_12430 = sub i32 0, %v0_12430
  %v2_12434 = inttoptr i32 %v0_1242c to i32*
  store i32 %v1_12430, i32* %v2_12434, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_1243c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1243c

dec_label_pc_1243c:                               ; preds = %dec_label_pc_12410, %dec_label_pc_1242c
  %v1_12440 = phi i32 [ %v0_1241c, %dec_label_pc_12410 ], [ -1, %dec_label_pc_1242c ]
  %v2_1243c = phi i32 [ %v3_12410, %dec_label_pc_12410 ], [ %v2_1243c.pre, %dec_label_pc_1242c ]
  store i32 %v2_1243c, i32* @r7, align 4
  ret i32 %v1_12440

; uselistorder directives
  uselistorder i32 %v0_1241c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1243c, { 1, 0 }
}

define i32 @function_12444(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12444:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_12444 = load i32, i32* @r3, align 4
  store i32 %v9_12444, i32* %stack_var_-4, align 4
  %v2_12450 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_12450, i32* @r3, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12484, label %dec_label_pc_12474

dec_label_pc_12474:                               ; preds = %dec_label_pc_12444
  %v0_12474 = call i32 @function_128f8()
  %v0_12478 = load i32, i32* %r7.global-to-local, align 4
  %v1_12478 = sub i32 0, %v0_12478
  store i32 %v1_12478, i32* @r3, align 4
  %v2_1247c = inttoptr i32 %v0_12474 to i32*
  store i32 %v1_12478, i32* %v2_1247c, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12484

dec_label_pc_12484:                               ; preds = %dec_label_pc_12444, %dec_label_pc_12474
  %v0_12484 = phi i32 [ %arg1, %dec_label_pc_12444 ], [ -1, %dec_label_pc_12474 ]
  ret i32 %v0_12484

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12484, { 1, 0 }
}

define i32 @function_12498(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12498:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12498 = load i32, i32* @r7, align 4
  store i32 %v3_12498, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_124c4, label %dec_label_pc_124b4

dec_label_pc_124b4:                               ; preds = %dec_label_pc_12498
  %v0_124b4 = call i32 @function_128f8()
  %v0_124b8 = load i32, i32* %r7.global-to-local, align 4
  %v1_124b8 = sub i32 0, %v0_124b8
  %v2_124bc = inttoptr i32 %v0_124b4 to i32*
  store i32 %v1_124b8, i32* %v2_124bc, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_124c8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_124c4

dec_label_pc_124c4:                               ; preds = %dec_label_pc_12498, %dec_label_pc_124b4
  %v2_124c8 = phi i32 [ %v3_12498, %dec_label_pc_12498 ], [ %v2_124c8.pre, %dec_label_pc_124b4 ]
  %v0_124c4 = phi i32 [ %arg1, %dec_label_pc_12498 ], [ -1, %dec_label_pc_124b4 ]
  store i32 %v2_124c8, i32* @r7, align 4
  ret i32 %v0_124c4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_124c4, { 1, 0 }
}

define i32 @function_124d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_124d0:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_124d0 = load i32, i32* @r7, align 4
  store i32 %v3_124d0, i32* %stack_var_-8, align 4
  %v0_124dc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_124dc, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_124dc, -4095
  br i1 %tmp, label %dec_label_pc_124fc, label %dec_label_pc_124ec

dec_label_pc_124ec:                               ; preds = %dec_label_pc_124d0
  %v0_124ec = call i32 @function_128f8()
  %v0_124f0 = load i32, i32* %r7.global-to-local, align 4
  %v1_124f0 = sub i32 0, %v0_124f0
  store i32 %v1_124f0, i32* @r3, align 4
  %v2_124f4 = inttoptr i32 %v0_124ec to i32*
  store i32 %v1_124f0, i32* %v2_124f4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_124fc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_124fc

dec_label_pc_124fc:                               ; preds = %dec_label_pc_124d0, %dec_label_pc_124ec
  %v1_12500 = phi i32 [ %v0_124dc, %dec_label_pc_124d0 ], [ -1, %dec_label_pc_124ec ]
  %v2_124fc = phi i32 [ %v3_124d0, %dec_label_pc_124d0 ], [ %v2_124fc.pre, %dec_label_pc_124ec ]
  store i32 %v2_124fc, i32* @r7, align 4
  ret i32 %v1_12500

; uselistorder directives
  uselistorder i32 %v0_124dc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_124fc, { 1, 0 }
}

define i32 @function_12504(i32* %arg1) local_unnamed_addr {
dec_label_pc_12504:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_12504 = load i32, i32* @r4, align 4
  store i32 %v3_12504, i32* %stack_var_-24, align 4
  %v9_12504 = load i32, i32* @r6, align 4
  %v12_12504 = load i32, i32* @r7, align 4
  %v15_12504 = load i32, i32* @r8, align 4
  %v18_12504 = load i32, i32* @lr, align 4
  %v2_12508 = load i32, i32* %arg1, align 4
  store i32 %v2_12508, i32* %r4.global-to-local, align 4
  %v3_12510 = icmp eq i32 %v2_12508, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 131404, i32* @r6, align 4
  br i1 %v3_12510, label %dec_label_pc_12524, label %dec_label_pc_12538

dec_label_pc_12524:                               ; preds = %dec_label_pc_12504
  %v0_12524 = call i32 @function_128f8()
  store i32 9, i32* %r3.global-to-local, align 4
  %v0_1252c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1252c, i32* %r2.global-to-local, align 4
  %v2_12530 = inttoptr i32 %v0_12524 to i32*
  store i32 9, i32* %v2_12530, align 4
  %v0_125d8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_125d8

dec_label_pc_12538:                               ; preds = %dec_label_pc_12504
  store i32 36, i32* %r3.global-to-local, align 4
  %v1_1253c = add i32 %tmp, 24
  store i32 %v1_1253c, i32* %r4.global-to-local, align 4
  store i32 %v1_1253c, i32* %r2.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_12550 = load i32, i32* inttoptr (i32 131476 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_12550)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_12568 = load i32, i32* @r6, align 4
  %v2_12568 = add i32 %v0_12568, 16
  %v3_12568 = inttoptr i32 %v2_12568 to i32*
  %v4_12568 = load i32, i32* %v3_12568, align 4
  call void @__pseudo_branch(i32 %v4_12568)
  %v0_12574 = load i32, i32* @r7, align 4
  %v1_12574 = inttoptr i32 %v0_12574 to i32*
  %v2_12574 = load i32, i32* %v1_12574, align 4
  store i32 %v2_12574, i32* @r4, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_12584 = load i32, i32* @r8, align 4
  store i32 %v0_12584, i32* %v1_12574, align 4
  %v0_12588 = load i32, i32* @r6, align 4
  %v1_12588 = load i32, i32* %r3.global-to-local, align 4
  %v2_12588 = add i32 %v1_12588, %v0_12588
  %v3_12588 = inttoptr i32 %v2_12588 to i32*
  %v4_12588 = load i32, i32* %v3_12588, align 4
  store i32 ptrtoint (i32* @global_var_12594.463 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12588)
  %v0_12594 = load i32, i32* @r7, align 4
  %v1_12594 = add i32 %v0_12594, 12
  %v2_12594 = inttoptr i32 %v1_12594 to i32*
  %v3_12594 = load i32, i32* %v2_12594, align 4
  store i32 %v3_12594, i32* @r0, align 4
  %v0_12598 = call i32 @function_13f98()
  %v0_1259c = load i32, i32* @r7, align 4
  store i32 %v0_1259c, i32* @r0, align 4
  %v0_125a0 = call i32 @function_13f98()
  %v0_125a8 = load i32, i32* @r4, align 4
  %tmp11 = icmp ult i32 %v0_125a8, -4095
  br i1 %tmp11, label %dec_label_pc_125d4, label %dec_label_pc_125c4

dec_label_pc_125c4:                               ; preds = %dec_label_pc_12538
  %v0_125c4 = call i32 @function_128f8()
  %v0_125c8 = load i32, i32* @r4, align 4
  %v1_125c8 = sub i32 0, %v0_125c8
  store i32 %v1_125c8, i32* %r3.global-to-local, align 4
  %v2_125cc = inttoptr i32 %v0_125c4 to i32*
  store i32 %v1_125c8, i32* %v2_125cc, align 4
  %v0_125d0 = load i32, i32* @r8, align 4
  br label %dec_label_pc_125d4

dec_label_pc_125d4:                               ; preds = %dec_label_pc_12538, %dec_label_pc_125c4
  %v0_125d4 = phi i32 [ %v0_125a8, %dec_label_pc_12538 ], [ %v0_125d0, %dec_label_pc_125c4 ]
  store i32 %v0_125d4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_125d8

dec_label_pc_125d8:                               ; preds = %dec_label_pc_12524, %dec_label_pc_125d4
  %v0_125d8 = phi i32 [ %v0_125d8.pre, %dec_label_pc_12524 ], [ %v0_125d4, %dec_label_pc_125d4 ]
  %v2_125e0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_125e0, i32* @r4, align 4
  store i32 %v9_12504, i32* @r6, align 4
  store i32 %v12_12504, i32* @r7, align 4
  store i32 %v15_12504, i32* @r8, align 4
  store i32 %v18_12504, i32* @lr, align 4
  ret i32 %v0_125d8

; uselistorder directives
  uselistorder i32 %v0_125a8, { 1, 0 }
  uselistorder label %dec_label_pc_125d8, { 1, 0 }
  uselistorder label %dec_label_pc_125d4, { 1, 0 }
}

define i32 @function_125ec(i32 %arg1) local_unnamed_addr {
dec_label_pc_125ec:
  %v0_125ec = load i1, i1* @cpsr_z, align 1
  br i1 %v0_125ec, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_125ec
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_125ec, %bb
  %v10_125f8 = phi i32 [ %arg1, %dec_label_pc_125ec ], [ 0, %bb ]
  ret i32 %v10_125f8

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_125fc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_125fc:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_125fc = load i32, i32* @r5, align 4
  %v9_125fc = load i32, i32* @r6, align 4
  %v12_125fc = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 48, i32* @r0, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_12610 = call i32 @function_12f2c()
  %v2_12618 = icmp eq i32 %v0_12610, 0
  store i32 131404, i32* @r6, align 4
  br i1 %v2_12618, label %bb, label %dec_label_pc_12628

bb:                                               ; preds = %dec_label_pc_125fc
  br label %dec_label_pc_126b4

dec_label_pc_12628:                               ; preds = %dec_label_pc_125fc
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_1262c = load i32, i32* @r4, align 4
  %v2_1262c = icmp ugt i32 %v0_1262c, 511
  %v2_12630 = add i32 %v0_12610, 4
  %v3_12630 = inttoptr i32 %v2_12630 to i32*
  store i32 0, i32* %v3_12630, align 4
  %v0_12634 = load i32, i32* %r3.global-to-local, align 4
  %v2_12634 = add i32 %v0_12610, 16
  %v3_12634 = inttoptr i32 %v2_12634 to i32*
  store i32 %v0_12634, i32* %v3_12634, align 4
  %v0_12638 = load i32, i32* %r3.global-to-local, align 4
  %v2_12638 = add i32 %v0_12610, 8
  %v3_12638 = inttoptr i32 %v2_12638 to i32*
  store i32 %v0_12638, i32* %v3_12638, align 4
  br i1 %v2_1262c, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_12628
  %v0_126402 = load i32, i32* @r4, align 4
  %v2_126403 = add i32 %v0_12610, 20
  %v3_126404 = inttoptr i32 %v2_126403 to i32*
  store i32 %v0_126402, i32* %v3_126404, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_12628
  %v1_1263c = load i32, i32* %r3.global-to-local, align 4
  %v2_1263c = add i32 %v1_1263c, 512
  store i32 %v2_1263c, i32* %r3.global-to-local, align 4
  %v0_12640 = load i32, i32* @r4, align 4
  %v2_12640 = add i32 %v0_12610, 20
  %v3_12640 = inttoptr i32 %v2_12640 to i32*
  store i32 %v0_12640, i32* %v3_12640, align 4
  %v1_12644 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_12644, i32* %v3_12640, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v0_12610, i32* @r5, align 4
  %v0_1264c = load i32, i32* @r7, align 4
  %v2_1264c = inttoptr i32 %v0_12610 to i32*
  store i32 %v0_1264c, i32* %v2_1264c, align 4
  %v0_12650 = load i32, i32* @r5, align 4
  %v1_12650 = add i32 %v0_12650, 20
  %v2_12650 = inttoptr i32 %v1_12650 to i32*
  %v3_12650 = load i32, i32* %v2_12650, align 4
  store i32 %v3_12650, i32* %r1.global-to-local, align 4
  %v2_12658 = call i32 @function_1384c(i32 1, i32 %v3_12650)
  %v2_1265c = icmp eq i32 %v2_12658, 0
  store i32 %v2_12658, i32* @r4, align 4
  %v1_12664 = load i32, i32* @r5, align 4
  %v2_12664 = add i32 %v1_12664, 12
  %v3_12664 = inttoptr i32 %v2_12664 to i32*
  store i32 %v2_12658, i32* %v3_12664, align 4
  br i1 %v2_1265c, label %dec_label_pc_1266c, label %dec_label_pc_1267c

dec_label_pc_1266c:                               ; preds = %bb17
  %v0_1266c = load i32, i32* @r5, align 4
  store i32 %v0_1266c, i32* @r0, align 4
  %v0_12670 = call i32 @function_13f98()
  %v0_12674 = load i32, i32* @r4, align 4
  br label %dec_label_pc_126b4

dec_label_pc_1267c:                               ; preds = %bb17
  store i32 0, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_126a4 = load i32, i32* @r5, align 4
  %v1_126a4 = add i32 %v0_126a4, 24
  %v1_126a8 = inttoptr i32 %v1_126a4 to i32*
  store i32 0, i32* %v1_126a8, align 4
  %v3_126a8 = add i32 %v0_126a4, 28
  %v4_126a8 = inttoptr i32 %v3_126a8 to i32*
  %v5_126a8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_126a8, i32* %v4_126a8, align 4
  %v6_126a8 = add i32 %v0_126a4, 32
  %v7_126a8 = inttoptr i32 %v6_126a8 to i32*
  %v8_126a8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_126a8, i32* %v7_126a8, align 4
  %v9_126a8 = add i32 %v0_126a4, 36
  %v10_126a8 = inttoptr i32 %v9_126a8 to i32*
  %v11_126a8 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_126a8, i32* %v10_126a8, align 4
  %v12_126a8 = add i32 %v0_126a4, 40
  %v2_126ac = load i32, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_126b0 = inttoptr i32 %v12_126a8 to i32*
  store i32 %v2_126ac, i32* %v1_126b0, align 4
  %v3_126b0 = add i32 %v0_126a4, 44
  %v4_126b0 = inttoptr i32 %v3_126b0 to i32*
  %v5_126b0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_126b0, i32* %v4_126b0, align 4
  %v0_126b4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_126b4

dec_label_pc_126b4:                               ; preds = %bb, %dec_label_pc_1266c, %dec_label_pc_1267c
  %v0_126b4 = phi i32 [ 0, %bb ], [ %v0_12674, %dec_label_pc_1266c ], [ %v0_126b4.pre, %dec_label_pc_1267c ]
  store i32 %v6_125fc, i32* @r5, align 4
  store i32 %v9_125fc, i32* @r6, align 4
  store i32 %v12_125fc, i32* @r7, align 4
  ret i32 %v0_126b4

; uselistorder directives
  uselistorder i32 %v2_12658, { 1, 0, 2 }
  uselistorder i32 %v0_12610, { 2, 1, 4, 0, 6, 3, 5, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 512, { 11, 10, 1, 6, 2, 7, 12, 8, 13, 9, 14, 3, 15, 4, 16, 0, 17, 5, 18 }
  uselistorder label %dec_label_pc_126b4, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @function_126cc(i32 %arg1) local_unnamed_addr {
dec_label_pc_126cc:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v6_126cc = load i32, i32* @r7, align 4
  %v2_126d4 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %arg1, i32* @r7, align 4
  %tmp7 = icmp ult i32 %arg1, -4095
  br i1 %tmp7, label %dec_label_pc_126fc, label %dec_label_pc_126ec

dec_label_pc_126ec:                               ; preds = %dec_label_pc_126cc
  %v0_126ec = call i32 @function_128f8()
  %v0_126f0 = load i32, i32* @r7, align 4
  %v1_126f0 = sub i32 0, %v0_126f0
  %v2_126f4 = inttoptr i32 %v0_126ec to i32*
  store i32 %v1_126f0, i32* %v2_126f4, align 4
  br label %dec_label_pc_12720

dec_label_pc_126fc:                               ; preds = %dec_label_pc_126cc
  %v1_126fc = icmp slt i32 %arg1, 0
  br i1 %v1_126fc, label %dec_label_pc_12720, label %dec_label_pc_12704

dec_label_pc_12704:                               ; preds = %dec_label_pc_126fc
  store i32 %v2_126d4, i32* @r1, align 4
  %v0_12708 = call i32 @function_1524c()
  %v1_1270c = icmp slt i32 %v0_12708, 0
  br i1 %v1_1270c, label %dec_label_pc_12714, label %dec_label_pc_12728

dec_label_pc_12714:                               ; preds = %dec_label_pc_12704
  br label %dec_label_pc_12720

dec_label_pc_12720:                               ; preds = %dec_label_pc_12714, %dec_label_pc_126fc, %dec_label_pc_126ec
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12764

dec_label_pc_12728:                               ; preds = %dec_label_pc_12704
  %v0_12730 = load i32, i32* @r7, align 4
  %v3_12734 = call i32 @function_12370(i32 %v0_12730, i32 2, i32 1)
  %v0_12738 = load i32, i32* @r7, align 4
  %v2_12740 = call i32 @function_125fc(i32 %v0_12738, i32 %tmp)
  store i32 %v2_12740, i32* %r4.global-to-local, align 4
  %v2_12744 = icmp eq i32 %v2_12740, 0
  br i1 %v2_12744, label %dec_label_pc_1274c, label %dec_label_pc_12764

dec_label_pc_1274c:                               ; preds = %dec_label_pc_12728
  %v0_12758 = call i32 @function_128f8()
  %v2_12760 = inttoptr i32 %v0_12758 to i32*
  store i32 12, i32* %v2_12760, align 4
  %v0_12764.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12764

dec_label_pc_12764:                               ; preds = %dec_label_pc_12728, %dec_label_pc_12720, %dec_label_pc_1274c
  %v0_12764 = phi i32 [ %v2_12740, %dec_label_pc_12728 ], [ 0, %dec_label_pc_12720 ], [ %v0_12764.pre, %dec_label_pc_1274c ]
  store i32 %v6_126cc, i32* @r7, align 4
  ret i32 %v0_12764

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_12764, { 2, 0, 1 }
}

define i32 @function_12774(i32 %arg1) local_unnamed_addr {
dec_label_pc_12774:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v0_12774 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12774, label %bb, label %dec_label_pc_12774._crit_edge

dec_label_pc_12774._crit_edge:                    ; preds = %dec_label_pc_12774
  br label %bb11

bb:                                               ; preds = %dec_label_pc_12774
  br label %bb11

bb11:                                             ; preds = %dec_label_pc_12774._crit_edge, %bb
  %v2_1277c = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_1277c, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_12788 = call i32 @function_1524c()
  store i32 %v0_12788, i32* @r5, align 4
  %v2_1278c = icmp eq i32 %v0_12788, 0
  br i1 %v2_1278c, label %dec_label_pc_12794, label %dec_label_pc_127fc

dec_label_pc_12794:                               ; preds = %bb11
  %v1_12798 = and i32 %tmp5, 61440
  store i32 %v1_12798, i32* @r3, align 4
  %v7_1279c = icmp eq i32 %v1_12798, 16384
  br i1 %v7_1279c, label %dec_label_pc_127b4, label %dec_label_pc_127a4

dec_label_pc_127a4:                               ; preds = %dec_label_pc_12794
  %v0_127a4 = call i32 @function_128f8()
  br label %dec_label_pc_127e0

dec_label_pc_127b4:                               ; preds = %dec_label_pc_12794
  %v0_127b4 = load i32, i32* @r4, align 4
  %v2_127bc = call i32 @function_12304(i32 %v0_127b4, i32 3)
  %v7_127c0 = icmp eq i32 %v2_127bc, -1
  br i1 %v7_127c0, label %dec_label_pc_127fc, label %dec_label_pc_127c8

dec_label_pc_127c8:                               ; preds = %dec_label_pc_127b4
  %v1_127c8 = urem i32 %v2_127bc, 4
  %v7_127cc = icmp eq i32 %v1_127c8, 1
  br i1 %v7_127cc, label %dec_label_pc_127d4, label %dec_label_pc_127e8

dec_label_pc_127d4:                               ; preds = %dec_label_pc_127c8
  %v0_127d4 = call i32 @function_128f8()
  br label %dec_label_pc_127e0

dec_label_pc_127e0:                               ; preds = %dec_label_pc_127a4, %dec_label_pc_127d4
  %storemerge2 = phi i32 [ %v0_127a4, %dec_label_pc_127a4 ], [ %v0_127d4, %dec_label_pc_127d4 ]
  %storemerge = phi i32 [ 20, %dec_label_pc_127a4 ], [ 22, %dec_label_pc_127d4 ]
  %storemerge1 = load i32, i32* @r5, align 4
  store i32 %storemerge1, i32* %r2.global-to-local, align 4
  %v2_127e0 = inttoptr i32 %storemerge2 to i32*
  store i32 %storemerge, i32* %v2_127e0, align 4
  %v0_12800.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12800

dec_label_pc_127e8:                               ; preds = %dec_label_pc_127c8
  %v0_127e8 = load i32, i32* @r4, align 4
  %v2_127f0 = call i32 @function_125fc(i32 %v0_127e8, i32 %tmp)
  store i32 %v2_127f0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12800

dec_label_pc_127fc:                               ; preds = %bb11, %dec_label_pc_127b4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12800

dec_label_pc_12800:                               ; preds = %dec_label_pc_127e8, %dec_label_pc_127e0, %dec_label_pc_127fc
  %v0_12800 = phi i32 [ %v2_127f0, %dec_label_pc_127e8 ], [ %v0_12800.pre, %dec_label_pc_127e0 ], [ 0, %dec_label_pc_127fc ]
  ret i32 %v0_12800

; uselistorder directives
  uselistorder i32 %v2_127bc, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_125fc, { 1, 0 }
  uselistorder i32 ()* @function_1524c, { 1, 0 }
  uselistorder label %dec_label_pc_12800, { 2, 0, 1 }
  uselistorder label %dec_label_pc_127fc, { 1, 0 }
  uselistorder label %dec_label_pc_127e0, { 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @function_12810(i32* %arg1) local_unnamed_addr {
dec_label_pc_12810:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_12810 = load i32, i32* @r4, align 4
  %v6_12810 = load i32, i32* @r5, align 4
  %v9_12810 = load i32, i32* @r6, align 4
  %v12_12810 = load i32, i32* @r7, align 4
  %v15_12810 = load i32, i32* @lr, align 4
  store i32 131404, i32* @r6, align 4
  %v1_12824 = add i32 %tmp, 24
  store i32 %v1_12824, i32* @r4, align 4
  %v4_12828 = load i32, i32* inttoptr (i32 131440 to i32*), align 16
  store i32 %v4_12828, i32* %r1.global-to-local, align 4
  store i32 %v1_12824, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_1283c = load i32, i32* inttoptr (i32 131476 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_1283c)
  %v0_12850 = load i32, i32* @r6, align 4
  %v2_12850 = add i32 %v0_12850, 16
  %v3_12850 = inttoptr i32 %v2_12850 to i32*
  %v4_12850 = load i32, i32* %v3_12850, align 4
  store i32 %v4_12850, i32* @ip, align 4
  store i32 75868, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12850)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_12860

dec_label_pc_12860:                               ; preds = %dec_label_pc_12890, %dec_label_pc_12810
  %v0_12860 = load i32, i32* @r5, align 4
  %v1_12860 = add i32 %v0_12860, 4
  %v2_12860 = inttoptr i32 %v1_12860 to i32*
  %v3_12860 = load i32, i32* %v2_12860, align 4
  store i32 %v3_12860, i32* %r2.global-to-local, align 4
  %v4_12860 = add i32 %v0_12860, 8
  %v5_12860 = inttoptr i32 %v4_12860 to i32*
  %v6_12860 = load i32, i32* %v5_12860, align 4
  %tmp10 = icmp ugt i32 %v6_12860, %v3_12860
  br i1 %tmp10, label %dec_label_pc_12890, label %dec_label_pc_1286c

dec_label_pc_1286c:                               ; preds = %dec_label_pc_12860
  %v1_1286c = inttoptr i32 %v0_12860 to i32*
  %v2_1286c = load i32, i32* %v1_1286c, align 4
  %v1_12870 = add i32 %v0_12860, 12
  %v2_12870 = inttoptr i32 %v1_12870 to i32*
  %v3_12870 = load i32, i32* %v2_12870, align 4
  store i32 %v3_12870, i32* %r1.global-to-local, align 4
  %v1_12874 = add i32 %v0_12860, 20
  %v2_12874 = inttoptr i32 %v1_12874 to i32*
  %v3_12874 = load i32, i32* %v2_12874, align 4
  store i32 %v3_12874, i32* %r2.global-to-local, align 4
  %v4_12878 = call i32 @function_151b8(i32 %v2_1286c, i32 %v3_12870, i32 %v3_12874, i32 %v6_12860)
  %tmp9 = icmp slt i32 %v4_12878, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_12888

.thread:                                          ; preds = %dec_label_pc_1286c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_128bc

dec_label_pc_12888:                               ; preds = %dec_label_pc_1286c
  %v1_12888 = load i32, i32* @r5, align 4
  %v2_12888 = add i32 %v1_12888, 8
  %v3_12888 = inttoptr i32 %v2_12888 to i32*
  store i32 %v4_12878, i32* %v3_12888, align 4
  %v0_1288c = load i32, i32* @r7, align 4
  %v1_1288c = load i32, i32* @r5, align 4
  %v2_1288c = add i32 %v1_1288c, 4
  %v3_1288c = inttoptr i32 %v2_1288c to i32*
  store i32 %v0_1288c, i32* %v3_1288c, align 4
  %v0_12890.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12890

dec_label_pc_12890:                               ; preds = %dec_label_pc_12860, %dec_label_pc_12888
  %v1_128a0 = phi i32 [ %v0_12860, %dec_label_pc_12860 ], [ %v0_12890.pre, %dec_label_pc_12888 ]
  %v1_12890 = add i32 %v1_128a0, 4
  %v2_12890 = inttoptr i32 %v1_12890 to i32*
  %v3_12890 = load i32, i32* %v2_12890, align 4
  store i32 %v3_12890, i32* %r2.global-to-local, align 4
  %v1_12894 = add i32 %v1_128a0, 12
  %v2_12894 = inttoptr i32 %v1_12894 to i32*
  %v3_12894 = load i32, i32* %v2_12894, align 4
  store i32 %v3_12894, i32* %r1.global-to-local, align 4
  %v2_12898 = add i32 %v3_12894, %v3_12890
  store i32 %v2_12898, i32* @r4, align 4
  %v1_1289c = add i32 %v2_12898, 4
  %v2_1289c = inttoptr i32 %v1_1289c to i32*
  %v3_1289c = load i32, i32* %v2_1289c, align 4
  %v2_128a0 = add i32 %v1_128a0, 16
  %v3_128a0 = inttoptr i32 %v2_128a0 to i32*
  store i32 %v3_1289c, i32* %v3_128a0, align 4
  %v0_128a4 = load i32, i32* @r4, align 4
  %v1_128a4 = add i32 %v0_128a4, 8
  %v2_128a4 = inttoptr i32 %v1_128a4 to i16*
  %v3_128a4 = load i16, i16* %v2_128a4, align 2
  %v4_128a4 = zext i16 %v3_128a4 to i32
  %v0_128a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_128a8 = load i32, i32* %r1.global-to-local, align 4
  %v2_128a8 = add i32 %v1_128a8, %v0_128a8
  %v3_128a8 = inttoptr i32 %v2_128a8 to i32*
  %v4_128a8 = load i32, i32* %v3_128a8, align 4
  store i32 %v4_128a8, i32* %r1.global-to-local, align 4
  %v2_128ac = add i32 %v0_128a8, %v4_128a4
  %v2_128b0 = icmp eq i32 %v4_128a8, 0
  %v1_128b4 = load i32, i32* @r5, align 4
  %v2_128b4 = add i32 %v1_128b4, 4
  %v3_128b4 = inttoptr i32 %v2_128b4 to i32*
  store i32 %v2_128ac, i32* %v3_128b4, align 4
  br i1 %v2_128b0, label %dec_label_pc_12860, label %dec_label_pc_128bc

dec_label_pc_128bc:                               ; preds = %dec_label_pc_12890, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_128c8 = load i32, i32* @r6, align 4
  %v2_128c8 = add i32 %v0_128c8, 24
  %v3_128c8 = inttoptr i32 %v2_128c8 to i32*
  %v4_128c8 = load i32, i32* %v3_128c8, align 4
  call void @__pseudo_branch(i32 %v4_128c8)
  %v0_128d4 = load i32, i32* @r4, align 4
  store i32 %v3_12810, i32* @r4, align 4
  store i32 %v6_12810, i32* @r5, align 4
  store i32 %v9_12810, i32* @r6, align 4
  store i32 %v12_12810, i32* @r7, align 4
  store i32 %v15_12810, i32* @lr, align 4
  ret i32 %v0_128d4

; uselistorder directives
  uselistorder i32 %v1_128a0, { 0, 2, 1 }
  uselistorder i32 %v6_12860, { 1, 0 }
  uselistorder i32 %v0_12860, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_12890, { 1, 0 }
}

define i32 @function_128e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_128e8:
  %v0_128e8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_128e8, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_128e8
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_128e8, %bb
  %v10_128f4 = phi i32 [ %arg1, %dec_label_pc_128e8 ], [ 0, %bb ]
  ret i32 %v10_128f4

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_128f8() local_unnamed_addr {
dec_label_pc_128f8:
  store i32 131404, i32* @r3, align 4
  ret i32 ptrtoint (i32* @global_var_20404.480 to i32)
}

define i32 @function_12914(i32 %arg1) local_unnamed_addr {
dec_label_pc_12914:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_12918 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_12918, i32* @r0, align 4
  %v1_12920 = call i32 @function_15628(i32 %v2_12918)
  %v2_12924 = load i32, i32* %stack_var_-24, align 4
  %v2_12928 = add i32 %v2_12924, %tmp
  %v2_12930 = mul i32 %v2_12928, 10000
  %v1_12934 = and i32 %v2_12930, 2147483632
  ret i32 %v1_12934

; uselistorder directives
  uselistorder i32 %v2_12918, { 1, 0 }
}

define i32 @function_12944(i32 %arg1) local_unnamed_addr {
dec_label_pc_12944:
  %v0_12944 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12944, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_12944
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_12944, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_12950(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12950:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v0_12954 = load i32, i32* @r2, align 4
  %v8_12954 = icmp eq i32 %v0_12954, 8
  store i1 %v8_12954, i1* %cpsr_z.global-to-local, align 1
  %v5_12958 = icmp slt i32 %v0_12954, 8
  br i1 %v5_12958, label %dec_label_pc_129b8, label %dec_label_pc_1295c

dec_label_pc_1295c:                               ; preds = %dec_label_pc_12950
  %v4_1295c = mul i32 %arg2, 256
  %v5_1295c = or i32 %v4_1295c, %arg2
  %v4_12960 = mul i32 %v5_1295c, 65536
  %v5_12960 = or i32 %v4_12960, %v5_1295c
  store i32 %v5_12960, i32* %r1.global-to-local, align 4
  %v1_1296457 = urem i32 %tmp, 4
  %v2_1296458 = icmp eq i32 %v1_1296457, 0
  store i1 %v2_1296458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_1296458, label %dec_label_pc_12974, label %bb

bb:                                               ; preds = %dec_label_pc_1295c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_1295c ]
  %v3_1296859 = phi i32 [ %v6_12968, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_1295c ]
  %v4_12968 = inttoptr i32 %v3_1296859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_12968, align 1
  %v5_12968 = load i32, i32* @r3, align 4
  %v6_12968 = add i32 %v5_12968, 1
  store i32 %v6_12968, i32* @r3, align 4
  %v0_1296c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_12978.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_1296c.pr, label %dec_label_pc_12974, label %.thread

.thread:                                          ; preds = %bb
  %v2_1296c = add i32 %v0_12978.pr.pre, -1
  store i32 %v2_1296c, i32* @r2, align 4
  %v1_12964 = urem i32 %v6_12968, 4
  %v2_12964 = icmp eq i32 %v1_12964, 0
  store i1 %v2_12964, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12964, label %dec_label_pc_12974, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_12968.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_12968.pre to i8
  br label %bb

dec_label_pc_12974:                               ; preds = %.thread, %bb, %dec_label_pc_1295c
  %v0_1298028 = phi i32 [ %tmp, %dec_label_pc_1295c ], [ %v6_12968, %bb ], [ %v6_12968, %.thread ]
  %v0_12978.pr = phi i32 [ %v0_12954, %dec_label_pc_1295c ], [ %v0_12978.pr.pre, %bb ], [ %v2_1296c, %.thread ]
  %v0_12974 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12974, i32* @ip, align 4
  %v8_1297810 = icmp eq i32 %v0_12978.pr, 8
  store i1 %v8_1297810, i1* %cpsr_z.global-to-local, align 1
  %v5_1297c11 = icmp slt i32 %v0_12978.pr, 8
  br i1 %v5_1297c11, label %dec_label_pc_129b8, label %dec_label_pc_12980.preheader

dec_label_pc_12980.preheader:                     ; preds = %dec_label_pc_12974
  %v1_1298046 = inttoptr i32 %v0_1298028 to i32*
  store i32 %v0_12974, i32* %v1_1298046, align 4
  %v3_1298047 = add i32 %v0_1298028, 4
  %v4_1298048 = inttoptr i32 %v3_1298047 to i32*
  %v5_1298049 = load i32, i32* @ip, align 4
  store i32 %v5_1298049, i32* %v4_1298048, align 4
  %v6_1298050 = add i32 %v0_1298028, 8
  store i32 %v6_1298050, i32* @r3, align 4
  %v0_1298451 = load i32, i32* @r2, align 4
  %v1_1298452 = add i32 %v0_1298451, -8
  store i32 %v1_1298452, i32* %r2.global-to-local, align 4
  %v5_1298c53 = icmp slt i32 %v1_1298452, 8
  br i1 %v5_1298c53, label %dec_label_pc_12980.dec_label_pc_129b8.loopexit_crit_edge, label %dec_label_pc_12990

dec_label_pc_12990:                               ; preds = %dec_label_pc_12980.preheader, %dec_label_pc_12978.dec_label_pc_12980_crit_edge
  %v6_1298055 = phi i32 [ %v6_12980, %dec_label_pc_12978.dec_label_pc_12980_crit_edge ], [ %v6_1298050, %dec_label_pc_12980.preheader ]
  %v0_1298054 = phi i32 [ %v12_129ac, %dec_label_pc_12978.dec_label_pc_12980_crit_edge ], [ %v0_1298028, %dec_label_pc_12980.preheader ]
  %v1_12990 = inttoptr i32 %v6_1298055 to i32*
  %v2_12990 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_12990, i32* %v1_12990, align 4
  %v3_12990 = add i32 %v0_1298054, 12
  %v4_12990 = inttoptr i32 %v3_12990 to i32*
  %v5_12990 = load i32, i32* @ip, align 4
  store i32 %v5_12990, i32* %v4_12990, align 4
  %v6_12990 = add i32 %v0_1298054, 16
  store i32 %v6_12990, i32* @r3, align 4
  %v0_12994 = load i32, i32* %r2.global-to-local, align 4
  %v1_12994 = add i32 %v0_12994, -8
  store i32 %v1_12994, i32* %r2.global-to-local, align 4
  %v5_1299c = icmp slt i32 %v1_12994, 8
  br i1 %v5_1299c, label %dec_label_pc_12990.dec_label_pc_129b8.loopexit_crit_edge, label %dec_label_pc_129a0

dec_label_pc_129a0:                               ; preds = %dec_label_pc_12990
  %v1_129a0 = inttoptr i32 %v6_12990 to i32*
  %v2_129a0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_129a0, i32* %v1_129a0, align 4
  %v3_129a0 = add i32 %v0_1298054, 20
  %v4_129a0 = inttoptr i32 %v3_129a0 to i32*
  %v5_129a0 = load i32, i32* @ip, align 4
  store i32 %v5_129a0, i32* %v4_129a0, align 4
  %v6_129a0 = add i32 %v0_1298054, 24
  store i32 %v6_129a0, i32* @r3, align 4
  %v0_129a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_129a4 = add i32 %v0_129a4, -8
  store i32 %v1_129a4, i32* %r2.global-to-local, align 4
  %v5_129ac = icmp slt i32 %v1_129a4, 8
  br i1 %v5_129ac, label %dec_label_pc_129a0.dec_label_pc_129b8.loopexit_crit_edge, label %dec_label_pc_12978

dec_label_pc_12978:                               ; preds = %dec_label_pc_129a0
  %v7_129ac = inttoptr i32 %v6_129a0 to i32*
  %v8_129ac = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_129ac, i32* %v7_129ac, align 4
  %v9_129ac = add i32 %v0_1298054, 28
  %v10_129ac = inttoptr i32 %v9_129ac to i32*
  %v11_129ac = load i32, i32* @ip, align 4
  store i32 %v11_129ac, i32* %v10_129ac, align 4
  %v12_129ac = add i32 %v0_1298054, 32
  store i32 %v12_129ac, i32* @r3, align 4
  %v6_129b0 = load i32, i32* %r2.global-to-local, align 4
  %v7_129b0 = add i32 %v6_129b0, -8
  store i32 %v7_129b0, i32* %r2.global-to-local, align 4
  %v5_1297c = icmp slt i32 %v7_129b0, 8
  br i1 %v5_1297c, label %dec_label_pc_12978.dec_label_pc_129b8.loopexit_crit_edge, label %dec_label_pc_12978.dec_label_pc_12980_crit_edge

dec_label_pc_12978.dec_label_pc_12980_crit_edge:  ; preds = %dec_label_pc_12978
  %v2_12980.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12980 = inttoptr i32 %v12_129ac to i32*
  store i32 %v2_12980.pre, i32* %v1_12980, align 4
  %v3_12980 = add i32 %v0_1298054, 36
  %v4_12980 = inttoptr i32 %v3_12980 to i32*
  %v5_12980 = load i32, i32* @ip, align 4
  store i32 %v5_12980, i32* %v4_12980, align 4
  %v6_12980 = add i32 %v0_1298054, 40
  store i32 %v6_12980, i32* @r3, align 4
  %v0_12984 = load i32, i32* %r2.global-to-local, align 4
  %v1_12984 = add i32 %v0_12984, -8
  store i32 %v1_12984, i32* %r2.global-to-local, align 4
  %v5_1298c = icmp slt i32 %v1_12984, 8
  br i1 %v5_1298c, label %dec_label_pc_12980.dec_label_pc_129b8.loopexit_crit_edge, label %dec_label_pc_12990

dec_label_pc_12978.dec_label_pc_129b8.loopexit_crit_edge: ; preds = %dec_label_pc_12978
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_129b8

dec_label_pc_12980.dec_label_pc_129b8.loopexit_crit_edge: ; preds = %dec_label_pc_12978.dec_label_pc_12980_crit_edge, %dec_label_pc_12980.preheader
  %v1_12984.lcssa = phi i32 [ %v1_1298452, %dec_label_pc_12980.preheader ], [ %v1_12984, %dec_label_pc_12978.dec_label_pc_12980_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_129b8

dec_label_pc_12990.dec_label_pc_129b8.loopexit_crit_edge: ; preds = %dec_label_pc_12990
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_129b8

dec_label_pc_129a0.dec_label_pc_129b8.loopexit_crit_edge: ; preds = %dec_label_pc_129a0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_129b8

dec_label_pc_129b8:                               ; preds = %dec_label_pc_12974, %dec_label_pc_12978.dec_label_pc_129b8.loopexit_crit_edge, %dec_label_pc_12980.dec_label_pc_129b8.loopexit_crit_edge, %dec_label_pc_12990.dec_label_pc_129b8.loopexit_crit_edge, %dec_label_pc_129a0.dec_label_pc_129b8.loopexit_crit_edge, %dec_label_pc_12950
  %v0_129c0 = phi i32 [ %v0_12954, %dec_label_pc_12950 ], [ %v1_129a4, %dec_label_pc_129a0.dec_label_pc_129b8.loopexit_crit_edge ], [ %v1_12994, %dec_label_pc_12990.dec_label_pc_129b8.loopexit_crit_edge ], [ %v1_12984.lcssa, %dec_label_pc_12980.dec_label_pc_129b8.loopexit_crit_edge ], [ %v7_129b0, %dec_label_pc_12978.dec_label_pc_129b8.loopexit_crit_edge ], [ %v0_12978.pr, %dec_label_pc_12974 ]
  %v2_129b8 = icmp eq i32 %v0_129c0, 0
  store i1 %v2_129b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_129b8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_129b8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_129b8
  %v1_129c0 = sub i32 7, %v0_129c0
  store i32 %v1_129c0, i32* %r2.global-to-local, align 4
  %v3_129c4 = mul i32 %v1_129c0, 4
  %v4_129c4 = add i32 %v3_129c4, ptrtoint (i32* @global_var_129cc.482 to i32)
  call void @__pseudo_branch(i32 %v4_129c4)
  %v0_129cc = load i32, i32* %r1.global-to-local, align 4
  %v1_129cc = trunc i32 %v0_129cc to i8
  %v2_129cc = load i32, i32* @r3, align 4
  %v3_129cc = inttoptr i32 %v2_129cc to i8*
  store i8 %v1_129cc, i8* %v3_129cc, align 1
  %v4_129cc = load i32, i32* @r3, align 4
  %v5_129cc = add i32 %v4_129cc, 1
  store i32 %v5_129cc, i32* %r3.global-to-local, align 4
  %v0_129d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_129d0 = trunc i32 %v0_129d0 to i8
  %v3_129d0 = inttoptr i32 %v5_129cc to i8*
  store i8 %v1_129d0, i8* %v3_129d0, align 1
  %v4_129d0 = load i32, i32* %r3.global-to-local, align 4
  %v5_129d0 = add i32 %v4_129d0, 1
  store i32 %v5_129d0, i32* %r3.global-to-local, align 4
  %v0_129d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_129d4 = trunc i32 %v0_129d4 to i8
  %v3_129d4 = inttoptr i32 %v5_129d0 to i8*
  store i8 %v1_129d4, i8* %v3_129d4, align 1
  %v4_129d4 = load i32, i32* %r3.global-to-local, align 4
  %v5_129d4 = add i32 %v4_129d4, 1
  store i32 %v5_129d4, i32* %r3.global-to-local, align 4
  %v0_129d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_129d8 = trunc i32 %v0_129d8 to i8
  %v3_129d8 = inttoptr i32 %v5_129d4 to i8*
  store i8 %v1_129d8, i8* %v3_129d8, align 1
  %v4_129d8 = load i32, i32* %r3.global-to-local, align 4
  %v5_129d8 = add i32 %v4_129d8, 1
  store i32 %v5_129d8, i32* %r3.global-to-local, align 4
  %v0_129dc = load i32, i32* %r1.global-to-local, align 4
  %v1_129dc = trunc i32 %v0_129dc to i8
  %v3_129dc = inttoptr i32 %v5_129d8 to i8*
  store i8 %v1_129dc, i8* %v3_129dc, align 1
  %v4_129dc = load i32, i32* %r3.global-to-local, align 4
  %v5_129dc = add i32 %v4_129dc, 1
  store i32 %v5_129dc, i32* %r3.global-to-local, align 4
  %v0_129e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_129e0 = trunc i32 %v0_129e0 to i8
  %v3_129e0 = inttoptr i32 %v5_129dc to i8*
  store i8 %v1_129e0, i8* %v3_129e0, align 1
  %v4_129e0 = load i32, i32* %r3.global-to-local, align 4
  %v5_129e0 = add i32 %v4_129e0, 1
  store i32 %v5_129e0, i32* %r3.global-to-local, align 4
  %v0_129e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_129e4 = trunc i32 %v0_129e4 to i8
  %v3_129e4 = inttoptr i32 %v5_129e0 to i8*
  store i8 %v1_129e4, i8* %v3_129e4, align 1
  %v4_129e4 = load i32, i32* %r3.global-to-local, align 4
  %v5_129e4 = add i32 %v4_129e4, 1
  store i32 %v5_129e4, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_12980, { 1, 0 }
  uselistorder i32 %v12_129ac, { 1, 2, 0 }
  uselistorder i32 %v0_1298054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_12978.pr, { 0, 2, 1 }
  uselistorder i32 %v6_12968, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_1295c, { 1, 0 }
  uselistorder i32 %v0_12954, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 2, 10, 11, 12, 13, 1, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 2, 1, 0, 3, 4, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_129b8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_12990, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_129f0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_129f0:
  %v0_129f0 = call i32 @function_168a0()
  ret i32 %v0_129f0
}

define i32 @function_12a00() local_unnamed_addr {
dec_label_pc_12a00:
  %v0_12a00 = call i32 @function_168a0()
  ret i32 %v0_12a00
}

define i32 @function_12a10(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12a10:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v0_12a201 = load i32, i32* @r1, align 4
  %v1_12a202 = inttoptr i32 %v0_12a201 to i8*
  %v2_12a203 = load i8, i8* %v1_12a202, align 1
  %v2_12a245 = icmp eq i8 %v2_12a203, 0
  store i1 %v2_12a245, i1* %cpsr_z.global-to-local, align 1
  store i8 %v2_12a203, i8* %arg1, align 1
  br i1 %v2_12a245, label %dec_label_pc_12a30, label %dec_label_pc_12a18

dec_label_pc_12a18:                               ; preds = %dec_label_pc_12a10, %dec_label_pc_12a18
  %v0_12a18 = load i32, i32* @r1, align 4
  %v1_12a18 = add i32 %v0_12a18, 1
  store i32 %v1_12a18, i32* @r1, align 4
  %v0_12a1c = load i32, i32* %r2.global-to-local, align 4
  %v1_12a1c = add i32 %v0_12a1c, 1
  store i32 %v1_12a1c, i32* %r2.global-to-local, align 4
  %v1_12a20 = inttoptr i32 %v1_12a18 to i8*
  %v2_12a20 = load i8, i8* %v1_12a20, align 1
  %v2_12a24 = icmp eq i8 %v2_12a20, 0
  store i1 %v2_12a24, i1* %cpsr_z.global-to-local, align 1
  %v3_12a28 = inttoptr i32 %v1_12a1c to i8*
  store i8 %v2_12a20, i8* %v3_12a28, align 1
  %v0_12a2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_12a2c, label %dec_label_pc_12a30, label %dec_label_pc_12a18

dec_label_pc_12a30:                               ; preds = %dec_label_pc_12a18, %dec_label_pc_12a10
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12a18, { 1, 0 }
}

define i32 @function_12a34(i32 %arg1) local_unnamed_addr {
dec_label_pc_12a34:
  %stack_var_-12 = alloca i32, align 4
  %v2_12a3c = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_12a3c, i32* @r1, align 4
  %v0_12a40 = call i32 @function_1710c()
  %v2_12a44 = icmp eq i32 %v0_12a40, 0
  %v4_12a48 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_12a44, i32 -1, i32 %v4_12a48
  ret i32 %storemerge
}

define i32 @function_12a5c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_12a5c:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12a5c = load i32, i32* @r7, align 4
  store i32 %v3_12a5c, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12a84, label %dec_label_pc_12a74

dec_label_pc_12a74:                               ; preds = %dec_label_pc_12a5c
  %v0_12a74 = call i32 @function_128f8()
  %v0_12a78 = load i32, i32* %r7.global-to-local, align 4
  %v1_12a78 = sub i32 0, %v0_12a78
  %v2_12a7c = inttoptr i32 %v0_12a74 to i32*
  store i32 %v1_12a78, i32* %v2_12a7c, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_12a88.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12a84

dec_label_pc_12a84:                               ; preds = %dec_label_pc_12a5c, %dec_label_pc_12a74
  %v2_12a88 = phi i32 [ %v3_12a5c, %dec_label_pc_12a5c ], [ %v2_12a88.pre, %dec_label_pc_12a74 ]
  %v0_12a84 = phi i32 [ %arg1, %dec_label_pc_12a5c ], [ -1, %dec_label_pc_12a74 ]
  store i32 %v2_12a88, i32* @r7, align 4
  ret i32 %v0_12a84

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12a84, { 1, 0 }
}

define i32 @function_12a94(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12a94:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12a94 = load i32, i32* @r7, align 4
  store i32 %v3_12a94, i32* %stack_var_-8, align 4
  %v0_12aa0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12aa0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12aa0, -4095
  br i1 %tmp, label %dec_label_pc_12ac0, label %dec_label_pc_12ab0

dec_label_pc_12ab0:                               ; preds = %dec_label_pc_12a94
  %v0_12ab0 = call i32 @function_128f8()
  %v0_12ab4 = load i32, i32* %r7.global-to-local, align 4
  %v1_12ab4 = sub i32 0, %v0_12ab4
  %v2_12ab8 = inttoptr i32 %v0_12ab0 to i32*
  store i32 %v1_12ab4, i32* %v2_12ab8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_12ac0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12ac0

dec_label_pc_12ac0:                               ; preds = %dec_label_pc_12a94, %dec_label_pc_12ab0
  %v1_12ac4 = phi i32 [ %v0_12aa0, %dec_label_pc_12a94 ], [ -1, %dec_label_pc_12ab0 ]
  %v2_12ac0 = phi i32 [ %v3_12a94, %dec_label_pc_12a94 ], [ %v2_12ac0.pre, %dec_label_pc_12ab0 ]
  store i32 %v2_12ac0, i32* @r7, align 4
  ret i32 %v1_12ac4

; uselistorder directives
  uselistorder i32 %v0_12aa0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12ac0, { 1, 0 }
}

define i32 @function_12acc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12acc:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12acc = load i32, i32* @r7, align 4
  store i32 %v3_12acc, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12af4, label %dec_label_pc_12ae4

dec_label_pc_12ae4:                               ; preds = %dec_label_pc_12acc
  %v0_12ae4 = call i32 @function_128f8()
  %v0_12ae8 = load i32, i32* %r7.global-to-local, align 4
  %v1_12ae8 = sub i32 0, %v0_12ae8
  store i32 %v1_12ae8, i32* @r3, align 4
  %v2_12aec = inttoptr i32 %v0_12ae4 to i32*
  store i32 %v1_12ae8, i32* %v2_12aec, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_12af8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12af4

dec_label_pc_12af4:                               ; preds = %dec_label_pc_12acc, %dec_label_pc_12ae4
  %v2_12af8 = phi i32 [ %v3_12acc, %dec_label_pc_12acc ], [ %v2_12af8.pre, %dec_label_pc_12ae4 ]
  %v0_12af4 = phi i32 [ %arg1, %dec_label_pc_12acc ], [ -1, %dec_label_pc_12ae4 ]
  store i32 %v2_12af8, i32* @r7, align 4
  ret i32 %v0_12af4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12af4, { 1, 0 }
}

define i32 @function_12b04(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12b04:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12b04 = load i32, i32* @r7, align 4
  store i32 %v3_12b04, i32* %stack_var_-8, align 4
  %v0_12b10 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12b10, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12b10, -4095
  br i1 %tmp, label %dec_label_pc_12b30, label %dec_label_pc_12b20

dec_label_pc_12b20:                               ; preds = %dec_label_pc_12b04
  %v0_12b20 = call i32 @function_128f8()
  %v0_12b24 = load i32, i32* %r7.global-to-local, align 4
  %v1_12b24 = sub i32 0, %v0_12b24
  %v2_12b28 = inttoptr i32 %v0_12b20 to i32*
  store i32 %v1_12b24, i32* %v2_12b28, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_12b30.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12b30

dec_label_pc_12b30:                               ; preds = %dec_label_pc_12b04, %dec_label_pc_12b20
  %v1_12b34 = phi i32 [ %v0_12b10, %dec_label_pc_12b04 ], [ -1, %dec_label_pc_12b20 ]
  %v2_12b30 = phi i32 [ %v3_12b04, %dec_label_pc_12b04 ], [ %v2_12b30.pre, %dec_label_pc_12b20 ]
  store i32 %v2_12b30, i32* @r7, align 4
  ret i32 %v1_12b34

; uselistorder directives
  uselistorder i32 %v0_12b10, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12b30, { 1, 0 }
}

define i32 @function_12b3c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_12b3c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12b70, label %dec_label_pc_12b60

dec_label_pc_12b60:                               ; preds = %dec_label_pc_12b3c
  %v0_12b60 = call i32 @function_128f8()
  %v0_12b64 = load i32, i32* %r4.global-to-local, align 4
  %v1_12b64 = sub i32 0, %v0_12b64
  %v2_12b68 = inttoptr i32 %v0_12b60 to i32*
  store i32 %v1_12b64, i32* %v2_12b68, align 4
  br label %dec_label_pc_12b70

dec_label_pc_12b70:                               ; preds = %dec_label_pc_12b3c, %dec_label_pc_12b60
  %v1_12b78 = phi i32 [ %arg1, %dec_label_pc_12b3c ], [ -1, %dec_label_pc_12b60 ]
  ret i32 %v1_12b78

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12b70, { 1, 0 }
}

define i32 @function_12b80(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12b80:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12b80 = load i32, i32* @r7, align 4
  store i32 %v3_12b80, i32* %stack_var_-8, align 4
  %v0_12b8c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12b8c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12b8c, -4095
  br i1 %tmp, label %dec_label_pc_12bac, label %dec_label_pc_12b9c

dec_label_pc_12b9c:                               ; preds = %dec_label_pc_12b80
  %v0_12b9c = call i32 @function_128f8()
  %v0_12ba0 = load i32, i32* %r7.global-to-local, align 4
  %v1_12ba0 = sub i32 0, %v0_12ba0
  %v2_12ba4 = inttoptr i32 %v0_12b9c to i32*
  store i32 %v1_12ba0, i32* %v2_12ba4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_12bac.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12bac

dec_label_pc_12bac:                               ; preds = %dec_label_pc_12b80, %dec_label_pc_12b9c
  %v1_12bb0 = phi i32 [ %v0_12b8c, %dec_label_pc_12b80 ], [ -1, %dec_label_pc_12b9c ]
  %v2_12bac = phi i32 [ %v3_12b80, %dec_label_pc_12b80 ], [ %v2_12bac.pre, %dec_label_pc_12b9c ]
  store i32 %v2_12bac, i32* @r7, align 4
  ret i32 %v1_12bb0

; uselistorder directives
  uselistorder i32 %v0_12b8c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12bac, { 1, 0 }
}

define i32 @function_12bb4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12bb4:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12bb4 = load i32, i32* @r7, align 4
  store i32 %v3_12bb4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12bdc, label %dec_label_pc_12bcc

dec_label_pc_12bcc:                               ; preds = %dec_label_pc_12bb4
  %v0_12bcc = call i32 @function_128f8()
  %v0_12bd0 = load i32, i32* %r7.global-to-local, align 4
  %v1_12bd0 = sub i32 0, %v0_12bd0
  %v2_12bd4 = inttoptr i32 %v0_12bcc to i32*
  store i32 %v1_12bd0, i32* %v2_12bd4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_12be0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12bdc

dec_label_pc_12bdc:                               ; preds = %dec_label_pc_12bb4, %dec_label_pc_12bcc
  %v2_12be0 = phi i32 [ %v3_12bb4, %dec_label_pc_12bb4 ], [ %v2_12be0.pre, %dec_label_pc_12bcc ]
  %v0_12bdc = phi i32 [ %arg1, %dec_label_pc_12bb4 ], [ -1, %dec_label_pc_12bcc ]
  store i32 %v2_12be0, i32* @r7, align 4
  ret i32 %v0_12bdc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12bdc, { 1, 0 }
}

define i32 @function_12bec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_12bec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_12bec = load i32, i32* @r4, align 4
  store i32 %v3_12bec, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12c1c, label %dec_label_pc_12c0c

dec_label_pc_12c0c:                               ; preds = %dec_label_pc_12bec
  %v0_12c0c = call i32 @function_128f8()
  %v0_12c10 = load i32, i32* %r4.global-to-local, align 4
  %v1_12c10 = sub i32 0, %v0_12c10
  %v2_12c14 = inttoptr i32 %v0_12c0c to i32*
  store i32 %v1_12c10, i32* %v2_12c14, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12c20.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_12c1c

dec_label_pc_12c1c:                               ; preds = %dec_label_pc_12bec, %dec_label_pc_12c0c
  %v2_12c20 = phi i32 [ %v3_12bec, %dec_label_pc_12bec ], [ %v2_12c20.pre, %dec_label_pc_12c0c ]
  %v0_12c1c = phi i32 [ %arg1, %dec_label_pc_12bec ], [ -1, %dec_label_pc_12c0c ]
  store i32 %v2_12c20, i32* @r4, align 4
  ret i32 %v0_12c1c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12c1c, { 1, 0 }
}

define i32 @function_12c28(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12c28:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12c28 = load i32, i32* @r7, align 4
  store i32 %v3_12c28, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12c50, label %dec_label_pc_12c40

dec_label_pc_12c40:                               ; preds = %dec_label_pc_12c28
  %v0_12c40 = call i32 @function_128f8()
  %v0_12c44 = load i32, i32* %r7.global-to-local, align 4
  %v1_12c44 = sub i32 0, %v0_12c44
  store i32 %v1_12c44, i32* @r3, align 4
  %v2_12c48 = inttoptr i32 %v0_12c40 to i32*
  store i32 %v1_12c44, i32* %v2_12c48, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_12c54.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12c50

dec_label_pc_12c50:                               ; preds = %dec_label_pc_12c28, %dec_label_pc_12c40
  %v2_12c54 = phi i32 [ %v3_12c28, %dec_label_pc_12c28 ], [ %v2_12c54.pre, %dec_label_pc_12c40 ]
  %v0_12c50 = phi i32 [ %arg1, %dec_label_pc_12c28 ], [ -1, %dec_label_pc_12c40 ]
  store i32 %v2_12c54, i32* @r7, align 4
  ret i32 %v0_12c50

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12c50, { 1, 0 }
}

define i32 @function_12c60(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_12c60:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_12c60 = load i32, i32* @r4, align 4
  store i32 %v3_12c60, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12c90, label %dec_label_pc_12c80

dec_label_pc_12c80:                               ; preds = %dec_label_pc_12c60
  %v0_12c80 = call i32 @function_128f8()
  %v0_12c84 = load i32, i32* %r4.global-to-local, align 4
  %v1_12c84 = sub i32 0, %v0_12c84
  %v2_12c88 = inttoptr i32 %v0_12c80 to i32*
  store i32 %v1_12c84, i32* %v2_12c88, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12c94.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_12c90

dec_label_pc_12c90:                               ; preds = %dec_label_pc_12c60, %dec_label_pc_12c80
  %v2_12c94 = phi i32 [ %v3_12c60, %dec_label_pc_12c60 ], [ %v2_12c94.pre, %dec_label_pc_12c80 ]
  %v0_12c90 = phi i32 [ %arg1, %dec_label_pc_12c60 ], [ -1, %dec_label_pc_12c80 ]
  store i32 %v2_12c94, i32* @r4, align 4
  ret i32 %v0_12c90

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12c90, { 1, 0 }
}

define i32 @function_12ca0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_12ca0:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12cd4, label %dec_label_pc_12cc4

dec_label_pc_12cc4:                               ; preds = %dec_label_pc_12ca0
  %v0_12cc4 = call i32 @function_128f8()
  %v0_12cc8 = load i32, i32* %r4.global-to-local, align 4
  %v1_12cc8 = sub i32 0, %v0_12cc8
  store i32 %v1_12cc8, i32* @r3, align 4
  %v2_12ccc = inttoptr i32 %v0_12cc4 to i32*
  store i32 %v1_12cc8, i32* %v2_12ccc, align 4
  br label %dec_label_pc_12cd4

dec_label_pc_12cd4:                               ; preds = %dec_label_pc_12ca0, %dec_label_pc_12cc4
  %v1_12cdc = phi i32 [ %arg1, %dec_label_pc_12ca0 ], [ -1, %dec_label_pc_12cc4 ]
  ret i32 %v1_12cdc

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12cd4, { 1, 0 }
}

define i32 @function_12ce4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12ce4:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12ce4 = load i32, i32* @r7, align 4
  store i32 %v3_12ce4, i32* %stack_var_-8, align 4
  %v0_12cf0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12cf0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12cf0, -4095
  br i1 %tmp, label %dec_label_pc_12d10, label %dec_label_pc_12d00

dec_label_pc_12d00:                               ; preds = %dec_label_pc_12ce4
  %v0_12d00 = call i32 @function_128f8()
  %v0_12d04 = load i32, i32* %r7.global-to-local, align 4
  %v1_12d04 = sub i32 0, %v0_12d04
  store i32 %v1_12d04, i32* @r3, align 4
  %v2_12d08 = inttoptr i32 %v0_12d00 to i32*
  store i32 %v1_12d04, i32* %v2_12d08, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_12d10.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12d10

dec_label_pc_12d10:                               ; preds = %dec_label_pc_12ce4, %dec_label_pc_12d00
  %v1_12d14 = phi i32 [ %v0_12cf0, %dec_label_pc_12ce4 ], [ -1, %dec_label_pc_12d00 ]
  %v2_12d10 = phi i32 [ %v3_12ce4, %dec_label_pc_12ce4 ], [ %v2_12d10.pre, %dec_label_pc_12d00 ]
  store i32 %v2_12d10, i32* @r7, align 4
  ret i32 %v1_12d14

; uselistorder directives
  uselistorder i32 %v0_12cf0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12d10, { 1, 0 }
}

define i32 @function_12d1c(i32 %arg1) local_unnamed_addr {
dec_label_pc_12d1c:
  store i32 %arg1, i32* @r0, align 4
  %v3_12d1c = load i32, i32* @r4, align 4
  %v0_12d24 = call i32 @function_1213c()
  %v2_12d2c = call i32 @function_1229c(i32 %v0_12d24, i32 %arg1)
  store i32 %v3_12d1c, i32* @r4, align 4
  ret i32 %v2_12d2c

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_1229c, { 0, 6, 5, 4, 3, 2, 1 }
}

define i32 @function_12d38(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12d38:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %tmp4 = icmp slt i32 %arg1, 1
  br i1 %tmp4, label %dec_label_pc_12d50, label %dec_label_pc_12d48

dec_label_pc_12d48:                               ; preds = %dec_label_pc_12d38
  %v7_12d4c = icmp slt i32 %arg1, 65
  br i1 %v7_12d4c, label %dec_label_pc_12d64, label %dec_label_pc_12d50

dec_label_pc_12d50:                               ; preds = %dec_label_pc_12d48, %dec_label_pc_12d38
  %v0_12d50 = call i32 @function_128f8()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_12d5c = inttoptr i32 %v0_12d50 to i32*
  store i32 22, i32* %v2_12d5c, align 4
  %v0_12d6c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12d6c

dec_label_pc_12d64:                               ; preds = %dec_label_pc_12d48
  %v0_12d64 = call i32 @function_12e6c()
  store i32 %v0_12d64, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12d6c

dec_label_pc_12d6c:                               ; preds = %dec_label_pc_12d50, %dec_label_pc_12d64
  %v0_12d6c = phi i32 [ %v0_12d6c.pre, %dec_label_pc_12d50 ], [ %v0_12d64, %dec_label_pc_12d64 ]
  ret i32 %v0_12d6c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12d6c, { 1, 0 }
}

define i32 @function_12d7c(i32* %arg1) local_unnamed_addr {
dec_label_pc_12d7c:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_12d84 = add i32 %tmp, 4
  %v3_12d84 = inttoptr i32 %v2_12d84 to i32*
  store i32 0, i32* %v3_12d84, align 4
  %v1_12d88 = load i32, i32* %r3.global-to-local, align 4
  %v2_12d88 = inttoptr i32 %v1_12d88 to i32*
  store i32 0, i32* %v2_12d88, align 4
  ret i32 0
}

define i32 @function_12d90(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12d90:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_12d90 = load i32, i32* @r4, align 4
  store i32 %v3_12d90, i32* %stack_var_-16, align 4
  %v6_12d90 = load i32, i32* @r5, align 4
  %v9_12d90 = load i32, i32* @r6, align 4
  %v7_12d98 = icmp eq i32 %arg2, -1
  br i1 %v7_12d98, label %.thread4, label %bb

.thread4:                                         ; preds = %dec_label_pc_12d90
  br label %.thread16

bb:                                               ; preds = %dec_label_pc_12d90
  %v2_12da0 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_12dbc

.thread16:                                        ; preds = %bb, %.thread4
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12dc4

dec_label_pc_12dbc:                               ; preds = %bb
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_12dc0 = icmp slt i32 %arg1, 65
  br i1 %v7_12dc0, label %dec_label_pc_12dd8, label %dec_label_pc_12dc4

dec_label_pc_12dc4:                               ; preds = %.thread16, %dec_label_pc_12dbc
  %v0_12dc4 = call i32 @function_128f8()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_12dd0 = inttoptr i32 %v0_12dc4 to i32*
  store i32 22, i32* %v2_12dd0, align 4
  %v0_12e30.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb33

dec_label_pc_12dd8:                               ; preds = %dec_label_pc_12dbc
  %v2_12dd8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_12dd8, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_12de0 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_12de0, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_12df0 = call i32 @function_12e6c()
  %v0_12df8 = load i32, i32* @r5, align 4
  %v2_12e00 = call i32 @function_12e48(i32 ptrtoint (i32* @global_var_22638.495 to i32), i32 %v0_12df8)
  store i32 %v2_12da0, i32* %r2.global-to-local, align 4
  %v0_12e18 = load i32, i32* @r5, align 4
  %v3_12e20 = call i32 @function_15080(i32 %v0_12e18, i32 %v2_12dd8, i32 %v2_12da0)
  %v1_12e24 = icmp slt i32 %v3_12e20, 0
  br i1 %v1_12e24, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_12dd8
  %v5_12e28 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_12e28, i32* %r2.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_12dd8
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_12dc4, %bb32
  %v0_12e30 = phi i32 [ %v5_12e28, %bb31 ], [ %v0_12e30.pre, %dec_label_pc_12dc4 ], [ -1, %bb32 ]
  %v2_12e38 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12e38, i32* @r4, align 4
  store i32 %v6_12d90, i32* @r5, align 4
  store i32 %v9_12d90, i32* @r6, align 4
  ret i32 %v0_12e30

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 ()* @function_12e6c, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 3, 0, 2 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12dc4, { 1, 0 }
}

define i32 @function_12e48(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12e48:
  %v1_12e48 = add i32 %arg2, -1
  %v3_12e4c = udiv i32 %v1_12e48, 32
  %v4_12e50 = mul nuw nsw i32 %v3_12e4c, 4
  %v5_12e50 = add i32 %v4_12e50, %arg1
  %v6_12e50 = inttoptr i32 %v5_12e50 to i32*
  %v7_12e50 = load i32, i32* %v6_12e50, align 4
  %v1_12e54 = urem i32 %v1_12e48, 32
  %v7_12e5c = shl i32 1, %v1_12e54
  %v8_12e5c = and i32 %v7_12e50, %v7_12e5c
  %v10_12e5c = icmp ne i32 %v8_12e5c, 0
  %. = zext i1 %v10_12e5c to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_12e48, { 1, 0 }
}

define i32 @function_12e6c() local_unnamed_addr {
dec_label_pc_12e6c:
  %v0_12e6c = load i32, i32* @r1, align 4
  %v1_12e6c = add i32 %v0_12e6c, -1
  %v3_12e70 = udiv i32 %v1_12e6c, 32
  %v0_12e74 = load i32, i32* @r0, align 4
  %v4_12e74 = mul nuw nsw i32 %v3_12e70, 4
  %v5_12e74 = add i32 %v0_12e74, %v4_12e74
  %v6_12e74 = inttoptr i32 %v5_12e74 to i32*
  %v7_12e74 = load i32, i32* %v6_12e74, align 4
  %v1_12e78 = urem i32 %v1_12e6c, 32
  %v7_12e80 = shl i32 1, %v1_12e78
  %v8_12e80 = or i32 %v7_12e74, %v7_12e80
  store i32 %v8_12e80, i32* %v6_12e74, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_12e6c, { 1, 0 }
}

define i32 @function_12e90(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12e90:
  %v1_12e90 = add i32 %arg2, -1
  %v3_12e94 = udiv i32 %v1_12e90, 32
  %v4_12e98 = mul nuw nsw i32 %v3_12e94, 4
  %v5_12e98 = add i32 %v4_12e98, %arg1
  %v6_12e98 = inttoptr i32 %v5_12e98 to i32*
  %v7_12e98 = load i32, i32* %v6_12e98, align 4
  %v1_12e9c = urem i32 %v1_12e90, 32
  %tmp = shl i32 -1, %v1_12e9c
  %v8_12ea4 = add i32 %tmp, -1
  %v9_12ea4 = and i32 %v7_12e98, %v8_12ea4
  store i32 %v9_12ea4, i32* %v6_12e98, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_12e90, { 1, 0 }
}

define i32 @function_12eb4(i32 %arg1) local_unnamed_addr {
dec_label_pc_12eb4:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_12eb4 = udiv i32 %arg1, 256
  store i32 %v3_12eb4, i32* %r1.global-to-local, align 4
  %v2_12eb8 = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_12eb8, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_12eb4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_12eb4, %bb
  %v0_12ec4 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_12eb8, i32 %v0_12ec4)
  %v0_12ec8 = load i32, i32* %r1.global-to-local, align 4
  %v1_12ec8 = add i32 %v0_12ec8, 1048320
  %v3_12ecc = udiv i32 %v1_12ec8, 65536
  %v1_12ed0 = and i32 %v3_12ecc, 8
  %v6_12ed4 = shl i32 %v0_12ec8, %v1_12ed0
  %v1_12ed8 = add i32 %v6_12ed4, 520192
  %v3_12edc = udiv i32 %v1_12ed8, 65536
  %v1_12ee0 = and i32 %v3_12edc, 4
  %v6_12ee4 = shl i32 %v6_12ed4, %v1_12ee0
  %v1_12ee8 = add i32 %v6_12ee4, 245760
  %v3_12eec = udiv i32 %v1_12ee8, 65536
  %v1_12ef0 = and i32 %v3_12eec, 2
  %v6_12ef4 = shl i32 %v6_12ee4, %v1_12ef0
  store i32 %v6_12ef4, i32* %r1.global-to-local, align 4
  %v1_12ef8 = sub nsw i32 13, %v1_12ed0
  %v2_12efc = sub nsw i32 %v1_12ef8, %v1_12ee0
  %v3_12f00 = udiv i32 %v6_12ef4, 32768
  %v4_12f00 = sub nuw nsw i32 -1, %v3_12f00
  %v4_12f04 = udiv i32 %v6_12ef4, 16384
  %v5_12f04 = and i32 %v4_12f04, %v4_12f00
  %v2_12f08 = sub nsw i32 %v2_12efc, %v1_12ef0
  %v2_12f0c = add nsw i32 %v2_12f08, %v5_12f04
  %v1_12f10 = add nsw i32 %v2_12f0c, 6
  %v0_12f14 = load i32, i32* %ip.global-to-local, align 4
  %v6_12f14 = lshr i32 %v0_12f14, %v1_12f10
  %v3_12f18 = mul nsw i32 %v2_12f0c, 4
  %v1_12f1c = add nsw i32 %v3_12f18, 32
  %v1_12f20 = urem i32 %v6_12f14, 4
  %v2_12f24 = or i32 %v1_12f20, %v1_12f1c
  ret i32 %v2_12f24

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_12f2c() local_unnamed_addr {
dec_label_pc_12f2c:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_12f2c = load i32, i32* @r4, align 4
  %v6_12f2c = load i32, i32* @r5, align 4
  %v9_12f2c = load i32, i32* @r6, align 4
  %v12_12f2c = load i32, i32* @r7, align 4
  %v15_12f2c = load i32, i32* @r8, align 4
  %v18_12f2c = load i32, i32* @sb, align 4
  %v21_12f2c = load i32, i32* @sl, align 4
  %v24_12f2c = load i32, i32* @fp, align 4
  %v27_12f2c = load i32, i32* @lr, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 131404, i32* %r1.global-to-local, align 4
  %v4_12f40 = load i32, i32* inttoptr (i32 131472 to i32*), align 16
  store i32 %v4_12f40, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_12f4c = load i32, i32* inttoptr (i32 131440 to i32*), align 16
  store i32 %v4_12f4c, i32* %r1.global-to-local, align 4
  %v0_12f50 = load i32, i32* @r0, align 4
  store i32 %v0_12f50, i32* @r5, align 4
  store i32 %v4_12f40, i32* %r2.global-to-local, align 4
  %v2_12f58 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_12f58, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  store i32 131404, i32* %ip.global-to-local, align 4
  %v4_12f64 = load i32, i32* inttoptr (i32 131476 to i32*), align 4
  store i32 %v4_12f64, i32* %ip.global-to-local, align 4
  store i32 77680, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12f64)
  %v0_12f70 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12f70, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 131404, i32* %r1.global-to-local, align 4
  %v4_12f7c = load i32, i32* inttoptr (i32 131420 to i32*), align 4
  store i32 %v4_12f7c, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_12f88.501 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12f7c)
  %v0_12f88 = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_12f88, -32
  br i1 %tmp, label %dec_label_pc_12fa4, label %dec_label_pc_12f90

dec_label_pc_12f90:                               ; preds = %dec_label_pc_12f2c
  %v0_12f90 = call i32 @function_128f8()
  store i32 %v0_12f90, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  %v2_12f9c = inttoptr i32 %v0_12f90 to i32*
  store i32 12, i32* %v2_12f9c, align 4
  br label %dec_label_pc_13820

dec_label_pc_12fa4:                               ; preds = %dec_label_pc_12f2c
  %v1_12fa4 = add i32 %v0_12f88, 11
  store i32 %v1_12fa4, i32* %r0.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 131404, i32* %r2.global-to-local, align 4
  %v2_12fb0 = icmp ugt i32 %v1_12fa4, 14
  %v7_12fb0 = icmp eq i32 %v1_12fa4, 15
  %v2_12fb4 = xor i1 %v7_12fb0, true
  %v3_12fb4 = and i1 %v2_12fb0, %v2_12fb4
  br i1 %v3_12fb4, label %bb, label %bb138

bb:                                               ; preds = %dec_label_pc_12fa4
  %v5_12fb4 = and i32 %v1_12fa4, -8
  store i32 %v5_12fb4, i32* @sl, align 4
  br label %bb138

bb138:                                            ; preds = %dec_label_pc_12fa4, %bb
  %v4_12fb8 = load i32, i32* inttoptr (i32 131436 to i32*), align 4
  store i32 %v4_12fb8, i32* @r0, align 4
  %v1_12fbc = inttoptr i32 %v4_12fb8 to i32*
  %v2_12fbc = load i32, i32* %v1_12fbc, align 4
  store i32 %v2_12fbc, i32* @r4, align 4
  %v2_12fc0 = xor i1 %v2_12fb0, true
  %v3_12fc0 = or i1 %v7_12fb0, %v2_12fc0
  br i1 %v3_12fc0, label %bb139, label %bb140

bb139:                                            ; preds = %bb138
  store i32 16, i32* @sl, align 4
  br label %bb140

bb140:                                            ; preds = %bb138, %bb139
  %v1_12fc4 = urem i32 %v2_12fbc, 2
  %v2_12fc4 = icmp eq i32 %v1_12fc4, 0
  br i1 %v2_12fc4, label %dec_label_pc_12fcc, label %dec_label_pc_12fdc

dec_label_pc_12fcc:                               ; preds = %bb140
  %v2_12fcc = icmp eq i32 %v2_12fbc, 0
  br i1 %v2_12fcc, label %dec_label_pc_12fd4, label %dec_label_pc_133b8

dec_label_pc_12fd4:                               ; preds = %dec_label_pc_12fcc
  %v0_12fd4 = call i32 @function_13de4()
  store i32 %v0_12fd4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_133b8

dec_label_pc_12fdc:                               ; preds = %bb140
  %v0_12fdc = load i32, i32* @sl, align 4
  %tmp201 = icmp ugt i32 %v0_12fdc, %v2_12fbc
  br i1 %tmp201, label %dec_label_pc_13004, label %dec_label_pc_12fe4

dec_label_pc_12fe4:                               ; preds = %dec_label_pc_12fdc
  %v1_12fe4 = add i32 %v4_12fb8, -4
  store i32 %v1_12fe4, i32* %r1.global-to-local, align 4
  %v3_12fe8 = udiv i32 %v0_12fdc, 8
  store i32 %v3_12fe8, i32* %r2.global-to-local, align 4
  %v4_12fec = mul nuw i32 %v3_12fe8, 4
  %v5_12fec = add i32 %v4_12fec, %v1_12fe4
  %v6_12fec = inttoptr i32 %v5_12fec to i32*
  %v7_12fec = load i32, i32* %v6_12fec, align 4
  store i32 %v7_12fec, i32* %r0.global-to-local, align 4
  %v2_12ff0 = icmp eq i32 %v7_12fec, 0
  br i1 %v2_12ff0, label %dec_label_pc_13004, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12fe4
  %v2_12ff4 = add i32 %v7_12fec, 8
  %v3_12ff4 = inttoptr i32 %v2_12ff4 to i32*
  %v4_12ff4 = load i32, i32* %v3_12ff4, align 4
  store i32 %v4_12ff4, i32* %r3.global-to-local, align 4
  store i32 %v2_12ff4, i32* %r0.global-to-local, align 4
  store i32 %v2_12ff4, i32* %r4.global-to-local, align 4
  store i32 %v4_12ff4, i32* %v6_12fec, align 4
  br label %dec_label_pc_13804

dec_label_pc_13004:                               ; preds = %dec_label_pc_12fe4, %dec_label_pc_12fdc
  %tmp202 = icmp ugt i32 %v0_12fdc, 255
  br i1 %tmp202, label %dec_label_pc_13054, label %dec_label_pc_1300c

dec_label_pc_1300c:                               ; preds = %dec_label_pc_13004
  store i32 131404, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_13014 = load i32, i32* inttoptr (i32 131436 to i32*), align 4
  %v3_13018 = udiv i32 %v0_12fdc, 8
  store i32 %v3_13018, i32* @r7, align 4
  %v4_1301c = mul nuw i32 %v3_13018, 8
  %v5_1301c = add i32 %v4_13014, %v4_1301c
  store i32 %v5_1301c, i32* %r3.global-to-local, align 4
  %v1_13020 = add i32 %v5_1301c, 44
  store i32 %v1_13020, i32* %ip.global-to-local, align 4
  %v1_13024 = add i32 %v5_1301c, 56
  %v2_13024 = inttoptr i32 %v1_13024 to i32*
  %v3_13024 = load i32, i32* %v2_13024, align 4
  store i32 %v3_13024, i32* %r0.global-to-local, align 4
  %v9_13028 = icmp eq i32 %v3_13024, %v1_13020
  br i1 %v9_13028, label %dec_label_pc_131b4, label %dec_label_pc_13030

dec_label_pc_13030:                               ; preds = %dec_label_pc_1300c
  %v2_13030 = add i32 %v3_13024, %v0_12fdc
  store i32 %v2_13030, i32* %r3.global-to-local, align 4
  %v1_13034 = add i32 %v2_13030, 4
  %v2_13034 = inttoptr i32 %v1_13034 to i32*
  %v3_13034 = load i32, i32* %v2_13034, align 4
  store i32 %v3_13034, i32* %r2.global-to-local, align 4
  %v1_13038 = add i32 %v3_13024, 12
  %v2_13038 = inttoptr i32 %v1_13038 to i32*
  %v3_13038 = load i32, i32* %v2_13038, align 4
  store i32 %v3_13038, i32* %r1.global-to-local, align 4
  %v1_1303c = or i32 %v3_13034, 1
  store i32 %v1_1303c, i32* %r2.global-to-local, align 4
  %v1_13040 = add i32 %v3_13024, 8
  store i32 %v1_13040, i32* %r4.global-to-local, align 4
  store i32 %v1_1303c, i32* %v2_13034, align 4
  %v0_13048 = load i32, i32* %ip.global-to-local, align 4
  %v1_13048 = load i32, i32* %r1.global-to-local, align 4
  %v2_13048 = add i32 %v1_13048, 8
  %v3_13048 = inttoptr i32 %v2_13048 to i32*
  store i32 %v0_13048, i32* %v3_13048, align 4
  %v0_1304c = load i32, i32* %r1.global-to-local, align 4
  %v1_1304c = load i32, i32* %ip.global-to-local, align 4
  %v2_1304c = add i32 %v1_1304c, 12
  %v3_1304c = inttoptr i32 %v2_1304c to i32*
  store i32 %v0_1304c, i32* %v3_1304c, align 4
  br label %dec_label_pc_13804

dec_label_pc_13054:                               ; preds = %dec_label_pc_13004
  store i32 %v0_12fdc, i32* %r0.global-to-local, align 4
  %v1_13058 = call i32 @function_12eb4(i32 %v0_12fdc)
  store i32 %v1_13058, i32* %r0.global-to-local, align 4
  %v0_1305c = load i32, i32* @r4, align 4
  %v1_1305c = and i32 %v0_1305c, 2
  %v2_1305c = icmp eq i32 %v1_1305c, 0
  store i32 %v1_13058, i32* @r7, align 4
  br i1 %v2_1305c, label %dec_label_pc_131b4, label %dec_label_pc_13068

dec_label_pc_13068:                               ; preds = %dec_label_pc_13054
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 131404, i32* %r1.global-to-local, align 4
  %v4_13070 = load i32, i32* inttoptr (i32 131436 to i32*), align 4
  store i32 %v4_13070, i32* @r0, align 4
  %v0_13074 = call i32 @function_13de4()
  store i32 %v0_13074, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_131b4

dec_label_pc_1307c:                               ; preds = %dec_label_pc_131c8
  %v1_1307c = add i32 %v3_131c8, 4
  %v2_1307c = inttoptr i32 %v1_1307c to i32*
  %v3_1307c = load i32, i32* %v2_1307c, align 4
  store i32 %v3_1307c, i32* %r3.global-to-local, align 4
  %v0_13080 = load i32, i32* @sl, align 4
  %v1_13084 = and i32 %v3_1307c, -4
  store i32 %v1_13084, i32* %r4.global-to-local, align 4
  %v1_13088 = add i32 %v3_131c8, 12
  %v2_13088 = inttoptr i32 %v1_13088 to i32*
  %v3_13088 = load i32, i32* %v2_13088, align 4
  store i32 %v3_13088, i32* %ip.global-to-local, align 4
  %tmp203 = icmp ugt i32 %v0_13080, 255
  br i1 %tmp203, label %dec_label_pc_130e4, label %dec_label_pc_13090

dec_label_pc_13090:                               ; preds = %dec_label_pc_1307c
  %v9_13090 = icmp eq i32 %v3_13088, %v0_130e8
  br i1 %v9_13090, label %dec_label_pc_13098, label %dec_label_pc_130e4

dec_label_pc_13098:                               ; preds = %dec_label_pc_13090
  %v0_13098 = load i32, i32* @sb, align 4
  %v1_13098 = add i32 %v0_13098, 48
  %v2_13098 = inttoptr i32 %v1_13098 to i32*
  %v3_13098 = load i32, i32* %v2_13098, align 4
  store i32 %v3_13098, i32* %r3.global-to-local, align 4
  %v9_1309c = icmp eq i32 %v3_131c8, %v3_13098
  br i1 %v9_1309c, label %dec_label_pc_130a4, label %dec_label_pc_130e4

dec_label_pc_130a4:                               ; preds = %dec_label_pc_13098
  %v1_130a4 = load i32, i32* @fp, align 4
  %tmp204 = icmp ugt i32 %v1_13084, %v1_130a4
  br i1 %tmp204, label %dec_label_pc_130ac, label %dec_label_pc_130e4

dec_label_pc_130ac:                               ; preds = %dec_label_pc_130a4
  %v2_130ac = sub i32 %v1_13084, %v0_13080
  store i32 %v2_130ac, i32* %r2.global-to-local, align 4
  %v2_130b0 = add i32 %v0_13080, %v3_131c8
  store i32 %v2_130b0, i32* %r3.global-to-local, align 4
  %v1_130b4 = or i32 %v0_13080, 1
  store i32 %v1_130b4, i32* %r0.global-to-local, align 4
  %v1_130b8 = or i32 %v2_130ac, 1
  store i32 %v1_130b8, i32* %r1.global-to-local, align 4
  %v1_130bc = add i32 %v3_131c8, 8
  store i32 %v1_130bc, i32* %r4.global-to-local, align 4
  %v2_130c0 = add i32 %v0_130e8, 8
  %v3_130c0 = inttoptr i32 %v2_130c0 to i32*
  store i32 %v2_130b0, i32* %v3_130c0, align 4
  %v0_130c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_130c4 = load i32, i32* %ip.global-to-local, align 4
  %v2_130c4 = add i32 %v1_130c4, 12
  %v3_130c4 = inttoptr i32 %v2_130c4 to i32*
  store i32 %v0_130c4, i32* %v3_130c4, align 4
  %v0_130c8 = load i32, i32* %r0.global-to-local, align 4
  %v1_130c8 = load i32, i32* @r6, align 4
  %v2_130c8 = add i32 %v1_130c8, 4
  %v3_130c8 = inttoptr i32 %v2_130c8 to i32*
  store i32 %v0_130c8, i32* %v3_130c8, align 4
  %v0_130cc = load i32, i32* %r3.global-to-local, align 4
  %v1_130cc = load i32, i32* @sb, align 4
  %v2_130cc = add i32 %v1_130cc, 48
  %v3_130cc = inttoptr i32 %v2_130cc to i32*
  store i32 %v0_130cc, i32* %v3_130cc, align 4
  %v0_130d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_130d0 = load i32, i32* %r3.global-to-local, align 4
  %v3_130d0 = add i32 %v1_130d0, %v0_130d0
  %v4_130d0 = inttoptr i32 %v3_130d0 to i32*
  store i32 %v0_130d0, i32* %v4_130d0, align 4
  %v0_130d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_130d4 = load i32, i32* %r3.global-to-local, align 4
  %v2_130d4 = add i32 %v1_130d4, 4
  %v3_130d4 = inttoptr i32 %v2_130d4 to i32*
  store i32 %v0_130d4, i32* %v3_130d4, align 4
  %v0_130d8 = load i32, i32* %ip.global-to-local, align 4
  %v1_130d8 = load i32, i32* %r3.global-to-local, align 4
  %v2_130d8 = add i32 %v1_130d8, 12
  %v3_130d8 = inttoptr i32 %v2_130d8 to i32*
  store i32 %v0_130d8, i32* %v3_130d8, align 4
  %v0_130dc = load i32, i32* %ip.global-to-local, align 4
  %v1_130dc = load i32, i32* %r3.global-to-local, align 4
  %v2_130dc = add i32 %v1_130dc, 8
  %v3_130dc = inttoptr i32 %v2_130dc to i32*
  store i32 %v0_130dc, i32* %v3_130dc, align 4
  br label %dec_label_pc_13804

dec_label_pc_130e4:                               ; preds = %dec_label_pc_130a4, %dec_label_pc_13098, %dec_label_pc_13090, %dec_label_pc_1307c
  %v9_130e4 = icmp eq i32 %v1_13084, %v0_13080
  %v2_130e8 = add i32 %v3_13088, 8
  %v3_130e8 = inttoptr i32 %v2_130e8 to i32*
  store i32 %v0_130e8, i32* %v3_130e8, align 4
  %v0_130ec = load i32, i32* %ip.global-to-local, align 4
  %v1_130ec = load i32, i32* %r5.global-to-local, align 4
  %v2_130ec = add i32 %v1_130ec, 12
  %v3_130ec = inttoptr i32 %v2_130ec to i32*
  store i32 %v0_130ec, i32* %v3_130ec, align 4
  br i1 %v9_130e4, label %dec_label_pc_13244.loopexit, label %dec_label_pc_13100

dec_label_pc_13100:                               ; preds = %dec_label_pc_130e4
  %v0_13100 = load i32, i32* %r4.global-to-local, align 4
  %tmp205 = icmp ugt i32 %v0_13100, 255
  br i1 %tmp205, label %dec_label_pc_13124, label %dec_label_pc_13108

dec_label_pc_13108:                               ; preds = %dec_label_pc_13100
  store i32 131404, i32* %r2.global-to-local, align 4
  %v1_1310c = load i32, i32* %r8.global-to-local, align 4
  %v2_1310c = add i32 %v1_1310c, 131404
  %v3_1310c = inttoptr i32 %v2_1310c to i32*
  %v4_1310c = load i32, i32* %v3_1310c, align 4
  %v3_13110 = udiv i32 %v0_13100, 8
  store i32 %v3_13110, i32* %r0.global-to-local, align 4
  %v4_13114 = mul nuw i32 %v3_13110, 8
  %v5_13114 = add i32 %v4_1310c, %v4_13114
  store i32 %v5_13114, i32* %r3.global-to-local, align 4
  %v1_13118 = add i32 %v5_13114, 44
  store i32 %v1_13118, i32* %ip.global-to-local, align 4
  %v1_1311c = add i32 %v5_13114, 52
  %v2_1311c = inttoptr i32 %v1_1311c to i32*
  %v3_1311c = load i32, i32* %v2_1311c, align 4
  store i32 %v3_1311c, i32* @lr, align 4
  br label %dec_label_pc_1317c

dec_label_pc_13124:                               ; preds = %dec_label_pc_13100
  store i32 %v0_13100, i32* %r0.global-to-local, align 4
  %v1_13128 = call i32 @function_12eb4(i32 %v0_13100)
  store i32 %v1_13128, i32* %r0.global-to-local, align 4
  store i32 131404, i32* %ip.global-to-local, align 4
  %v1_13130 = load i32, i32* %r8.global-to-local, align 4
  %v2_13130 = add i32 %v1_13130, 131404
  %v3_13130 = inttoptr i32 %v2_13130 to i32*
  %v4_13130 = load i32, i32* %v3_13130, align 4
  %v4_13134 = mul i32 %v1_13128, 8
  %v5_13134 = add i32 %v4_13130, %v4_13134
  store i32 %v5_13134, i32* %r3.global-to-local, align 4
  %v1_13138 = add i32 %v5_13134, 44
  store i32 %v1_13138, i32* %ip.global-to-local, align 4
  %v1_1313c = add i32 %v5_13134, 52
  %v2_1313c = inttoptr i32 %v1_1313c to i32*
  %v3_1313c = load i32, i32* %v2_1313c, align 4
  store i32 %v3_1313c, i32* @lr, align 4
  %v9_13140 = icmp eq i32 %v3_1313c, %v1_13138
  br i1 %v9_13140, label %dec_label_pc_1317c, label %dec_label_pc_13148

dec_label_pc_13148:                               ; preds = %dec_label_pc_13124
  %v1_13148 = add i32 %v5_13134, 56
  %v2_13148 = inttoptr i32 %v1_13148 to i32*
  %v3_13148 = load i32, i32* %v2_13148, align 4
  store i32 %v3_13148, i32* %r1.global-to-local, align 4
  %v1_1314c = add i32 %v3_13148, 4
  %v2_1314c = inttoptr i32 %v1_1314c to i32*
  %v3_1314c = load i32, i32* %v2_1314c, align 4
  store i32 %v3_1314c, i32* %r3.global-to-local, align 4
  %v0_13150 = load i32, i32* %r4.global-to-local, align 4
  %v3_13150 = icmp ult i32 %v0_13150, %v3_1314c
  br i1 %v3_13150, label %.thread, label %dec_label_pc_1316c.preheader

.thread:                                          ; preds = %dec_label_pc_13148
  store i32 %v1_13138, i32* @lr, align 4
  store i32 %v3_13148, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1317c

dec_label_pc_1316c.preheader:                     ; preds = %dec_label_pc_13148
  %v2_13158 = or i32 %v0_13150, 1
  store i32 %v2_13158, i32* %r2.global-to-local, align 4
  %v1_1316c179 = add i32 %v3_1313c, 4
  %v2_1316c180 = inttoptr i32 %v1_1316c179 to i32*
  %v3_1316c181 = load i32, i32* %v2_1316c180, align 4
  store i32 %v3_1316c181, i32* %r3.global-to-local, align 4
  %v3_13170183 = icmp ult i32 %v2_13158, %v3_1316c181
  br i1 %v3_13170183, label %dec_label_pc_13168, label %dec_label_pc_13178

dec_label_pc_13168:                               ; preds = %dec_label_pc_1316c.preheader, %dec_label_pc_13168
  %v0_13178184 = phi i32 [ %v3_13168, %dec_label_pc_13168 ], [ %v3_1313c, %dec_label_pc_1316c.preheader ]
  %v1_13168 = add i32 %v0_13178184, 8
  %v2_13168 = inttoptr i32 %v1_13168 to i32*
  %v3_13168 = load i32, i32* %v2_13168, align 4
  store i32 %v3_13168, i32* @lr, align 4
  %v1_1316c = add i32 %v3_13168, 4
  %v2_1316c = inttoptr i32 %v1_1316c to i32*
  %v3_1316c = load i32, i32* %v2_1316c, align 4
  store i32 %v3_1316c, i32* %r3.global-to-local, align 4
  %v3_13170 = icmp ult i32 %v2_13158, %v3_1316c
  br i1 %v3_13170, label %dec_label_pc_13168, label %dec_label_pc_13178

dec_label_pc_13178:                               ; preds = %dec_label_pc_13168, %dec_label_pc_1316c.preheader
  %v0_13178.lcssa = phi i32 [ %v3_1313c, %dec_label_pc_1316c.preheader ], [ %v3_13168, %dec_label_pc_13168 ]
  %v1_13178 = add i32 %v0_13178.lcssa, 12
  %v2_13178 = inttoptr i32 %v1_13178 to i32*
  %v3_13178 = load i32, i32* %v2_13178, align 4
  store i32 %v3_13178, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1317c

dec_label_pc_1317c:                               ; preds = %.thread, %dec_label_pc_13124, %dec_label_pc_13108, %dec_label_pc_13178
  %v0_1319c = phi i32 [ %v1_13138, %dec_label_pc_13124 ], [ %v1_13118, %dec_label_pc_13108 ], [ %v3_13178, %dec_label_pc_13178 ], [ %v3_13148, %.thread ]
  %v0_13190 = phi i32 [ %v1_13128, %dec_label_pc_13124 ], [ %v3_13110, %dec_label_pc_13108 ], [ %v1_13128, %dec_label_pc_13178 ], [ %v1_13128, %.thread ]
  %v1_13180 = phi i32 [ %v1_13130, %dec_label_pc_13124 ], [ %v1_1310c, %dec_label_pc_13108 ], [ %v1_13130, %dec_label_pc_13178 ], [ %v1_13130, %.thread ]
  store i32 131404, i32* %r2.global-to-local, align 4
  %v2_13180 = add i32 %v1_13180, 131404
  %v3_13180 = inttoptr i32 %v2_13180 to i32*
  %v4_13180 = load i32, i32* %v3_13180, align 4
  %v3_13184 = sdiv i32 %v0_13190, 32
  store i32 %v3_13184, i32* %r3.global-to-local, align 4
  %v4_13188 = mul nsw i32 %v3_13184, 4
  %v5_13188 = add i32 %v4_13180, %v4_13188
  store i32 %v5_13188, i32* %r1.global-to-local, align 4
  %v1_1318c = add i32 %v5_13188, 820
  %v2_1318c = inttoptr i32 %v1_1318c to i32*
  %v3_1318c = load i32, i32* %v2_1318c, align 4
  %v1_13190 = urem i32 %v0_13190, 32
  store i32 %v1_13190, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_13198 = shl i32 1, %v1_13190
  %v8_13198 = or i32 %v3_1318c, %v7_13198
  store i32 %v8_13198, i32* %r3.global-to-local, align 4
  %v1_1319c = load i32, i32* @r6, align 4
  %v2_1319c = add i32 %v1_1319c, 12
  %v3_1319c = inttoptr i32 %v2_1319c to i32*
  store i32 %v0_1319c, i32* %v3_1319c, align 4
  %v0_131a0 = load i32, i32* @lr, align 4
  %v1_131a0 = load i32, i32* @r6, align 4
  %v2_131a0 = add i32 %v1_131a0, 8
  %v3_131a0 = inttoptr i32 %v2_131a0 to i32*
  store i32 %v0_131a0, i32* %v3_131a0, align 4
  %v0_131a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_131a4 = load i32, i32* %r1.global-to-local, align 4
  %v2_131a4 = add i32 %v1_131a4, 820
  %v3_131a4 = inttoptr i32 %v2_131a4 to i32*
  store i32 %v0_131a4, i32* %v3_131a4, align 4
  %v0_131a8 = load i32, i32* @r6, align 4
  %v1_131a8 = load i32, i32* @lr, align 4
  %v2_131a8 = add i32 %v1_131a8, 12
  %v3_131a8 = inttoptr i32 %v2_131a8 to i32*
  store i32 %v0_131a8, i32* %v3_131a8, align 4
  %v0_131ac = load i32, i32* @r6, align 4
  %v1_131ac = load i32, i32* %ip.global-to-local, align 4
  %v2_131ac = add i32 %v1_131ac, 8
  %v3_131ac = inttoptr i32 %v2_131ac to i32*
  store i32 %v0_131ac, i32* %v3_131ac, align 4
  %v0_131c8.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_131c8

dec_label_pc_131b4:                               ; preds = %dec_label_pc_13054, %dec_label_pc_1300c, %dec_label_pc_13068
  store i32 32, i32* %r8.global-to-local, align 4
  store i32 131404, i32* %r1.global-to-local, align 4
  %v4_131bc = load i32, i32* inttoptr (i32 131436 to i32*), align 4
  store i32 %v4_131bc, i32* @sb, align 4
  %v0_131c0 = load i32, i32* @sl, align 4
  %v1_131c0 = add i32 %v0_131c0, 16
  store i32 %v1_131c0, i32* @fp, align 4
  %v1_131c4 = add i32 %v4_131bc, 52
  store i32 %v1_131c4, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_131c8

dec_label_pc_131c8:                               ; preds = %dec_label_pc_1317c, %dec_label_pc_131b4
  %v0_130e8 = phi i32 [ %v0_131c8.pre, %dec_label_pc_1317c ], [ %v1_131c4, %dec_label_pc_131b4 ]
  %v1_131c8 = add i32 %v0_130e8, 12
  %v2_131c8 = inttoptr i32 %v1_131c8 to i32*
  %v3_131c8 = load i32, i32* %v2_131c8, align 4
  store i32 %v3_131c8, i32* @r6, align 4
  %v9_131cc = icmp eq i32 %v3_131c8, %v0_130e8
  br i1 %v9_131cc, label %dec_label_pc_131d4, label %dec_label_pc_1307c

dec_label_pc_131d4:                               ; preds = %dec_label_pc_131c8
  %v0_131d4 = load i32, i32* @sl, align 4
  %tmp206 = icmp ult i32 %v0_131d4, 256
  %v0_1328c.pre = load i32, i32* @r7, align 4
  br i1 %tmp206, label %dec_label_pc_131d4.dec_label_pc_1328c_crit_edge, label %dec_label_pc_131dc

dec_label_pc_131d4.dec_label_pc_1328c_crit_edge:  ; preds = %dec_label_pc_131d4
  %.pre200 = mul i32 %v0_1328c.pre, 8
  br label %dec_label_pc_1328c

dec_label_pc_131dc:                               ; preds = %dec_label_pc_131d4
  %v4_131dc = mul i32 %v0_1328c.pre, 8
  %v5_131dc = add i32 %v4_131dc, %v0_130e8
  store i32 %v5_131dc, i32* %r3.global-to-local, align 4
  %v1_131e0 = add i32 %v5_131dc, -8
  store i32 %v1_131e0, i32* %r1.global-to-local, align 4
  %v1_131e4 = add i32 %v5_131dc, 4
  %v2_131e4 = inttoptr i32 %v1_131e4 to i32*
  %storemerge.pre = load i32, i32* %v2_131e4, align 4
  br label %dec_label_pc_13284

dec_label_pc_131ec:                               ; preds = %dec_label_pc_13284
  %v1_131ec = add i32 %v1_13214, 4
  %v2_131ec = inttoptr i32 %v1_131ec to i32*
  %v3_131ec = load i32, i32* %v2_131ec, align 4
  store i32 %v3_131ec, i32* %r3.global-to-local, align 4
  %v1_131f0 = and i32 %v3_131ec, -4
  store i32 %v1_131f0, i32* %r2.global-to-local, align 4
  %v3_131f4 = icmp ult i32 %v1_131f0, %v0_131d4
  %v1_131f8 = add i32 %v1_13214, 12
  %v2_131f8 = inttoptr i32 %v1_131f8 to i32*
  %v3_131f8 = load i32, i32* %v2_131f8, align 4
  store i32 %v3_131f8, i32* %r0.global-to-local, align 4
  br i1 %v3_131f4, label %dec_label_pc_13284, label %dec_label_pc_13200

dec_label_pc_13200:                               ; preds = %dec_label_pc_131ec
  %v1_13200 = add i32 %v1_13214, 8
  %v2_13200 = inttoptr i32 %v1_13200 to i32*
  %v3_13200 = load i32, i32* %v2_13200, align 4
  store i32 %v3_13200, i32* %r1.global-to-local, align 4
  %v1_13204 = add i32 %v3_13200, 12
  %v2_13204 = inttoptr i32 %v1_13204 to i32*
  %v3_13204 = load i32, i32* %v2_13204, align 4
  store i32 %v3_13204, i32* %r3.global-to-local, align 4
  %v9_13208 = icmp eq i32 %v3_13204, %v1_13214
  br i1 %v9_13208, label %dec_label_pc_13210, label %dec_label_pc_1321c

dec_label_pc_13210:                               ; preds = %dec_label_pc_13200
  %v1_13210 = add i32 %v3_131f8, 8
  %v2_13210 = inttoptr i32 %v1_13210 to i32*
  %v3_13210 = load i32, i32* %v2_13210, align 4
  store i32 %v3_13210, i32* %r3.global-to-local, align 4
  %v9_13214 = icmp eq i32 %v3_13210, %v1_13214
  br i1 %v9_13214, label %dec_label_pc_13220, label %dec_label_pc_1321c

dec_label_pc_1321c:                               ; preds = %dec_label_pc_13200, %dec_label_pc_13210
  %v0_1321c = call i32 @function_14214()
  store i32 %v0_1321c, i32* %r0.global-to-local, align 4
  %v0_13220.pre = load i32, i32* @sl, align 4
  %v1_13220.pre = load i32, i32* @r2, align 4
  %v0_13228.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_13220

dec_label_pc_13220:                               ; preds = %dec_label_pc_13210, %dec_label_pc_1321c
  %v1_13228 = phi i32 [ %v3_131f8, %dec_label_pc_13210 ], [ %v0_1321c, %dec_label_pc_1321c ]
  %v0_13228 = phi i32 [ %v3_13200, %dec_label_pc_13210 ], [ %v0_13228.pre, %dec_label_pc_1321c ]
  %v1_13220 = phi i32 [ %v1_131f0, %dec_label_pc_13210 ], [ %v1_13220.pre, %dec_label_pc_1321c ]
  %v0_13220 = phi i32 [ %v0_131d4, %dec_label_pc_13210 ], [ %v0_13220.pre, %dec_label_pc_1321c ]
  %v2_13220 = sub i32 %v1_13220, %v0_13220
  store i32 %v2_13220, i32* %lr.global-to-local, align 4
  %v2_13228 = add i32 %v1_13228, 8
  %v3_13228 = inttoptr i32 %v2_13228 to i32*
  store i32 %v0_13228, i32* %v3_13228, align 4
  %v0_1322c = load i32, i32* %r0.global-to-local, align 4
  %v1_1322c = load i32, i32* %r1.global-to-local, align 4
  %v2_1322c = add i32 %v1_1322c, 12
  %v3_1322c = inttoptr i32 %v2_1322c to i32*
  store i32 %v0_1322c, i32* %v3_1322c, align 4
  %v0_13230 = load i32, i32* %ip.global-to-local, align 4
  %v1_13230 = add i32 %v0_13230, 8
  store i32 %v1_13230, i32* %r0.global-to-local, align 4
  %tmp207 = icmp ugt i32 %v2_13220, 15
  br i1 %tmp207, label %dec_label_pc_13250, label %dec_label_pc_13238

dec_label_pc_13238:                               ; preds = %dec_label_pc_13220
  %v1_13238 = load i32, i32* %r2.global-to-local, align 4
  %v2_13238 = add i32 %v1_13238, %v0_13230
  store i32 %v2_13238, i32* %r2.global-to-local, align 4
  %v1_1323c = add i32 %v2_13238, 4
  %v2_1323c = inttoptr i32 %v1_1323c to i32*
  %v3_1323c = load i32, i32* %v2_1323c, align 4
  store i32 %v3_1323c, i32* %r3.global-to-local, align 4
  store i32 %v1_13230, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13244

dec_label_pc_13244.loopexit:                      ; preds = %dec_label_pc_130e4
  %v1_130f0 = load i32, i32* @r6, align 4
  %v2_130f0 = load i32, i32* @sl, align 4
  %v3_130f0 = add i32 %v2_130f0, %v1_130f0
  store i32 %v3_130f0, i32* %r2.global-to-local, align 4
  %v2_130f4 = add i32 %v3_130f0, 4
  %v3_130f4 = inttoptr i32 %v2_130f4 to i32*
  %v4_130f4 = load i32, i32* %v3_130f4, align 4
  store i32 %v4_130f4, i32* %r3.global-to-local, align 4
  %v2_130f8 = add i32 %v1_130f0, 8
  store i32 %v2_130f8, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13244

dec_label_pc_13244:                               ; preds = %.dec_label_pc_13244_crit_edge, %dec_label_pc_13244.loopexit, %dec_label_pc_13238
  %v1_13248 = phi i32 [ %v4_1336c, %.dec_label_pc_13244_crit_edge ], [ %v3_130f0, %dec_label_pc_13244.loopexit ], [ %v2_13238, %dec_label_pc_13238 ]
  %v0_13244 = phi i32 [ %v7_1336c, %.dec_label_pc_13244_crit_edge ], [ %v4_130f4, %dec_label_pc_13244.loopexit ], [ %v3_1323c, %dec_label_pc_13238 ]
  %v1_13244 = or i32 %v0_13244, 1
  store i32 %v1_13244, i32* %r3.global-to-local, align 4
  %v2_13248 = add i32 %v1_13248, 4
  %v3_13248 = inttoptr i32 %v2_13248 to i32*
  store i32 %v1_13244, i32* %v3_13248, align 4
  br label %dec_label_pc_13804

dec_label_pc_13250:                               ; preds = %dec_label_pc_13220
  %v1_13250 = load i32, i32* @sl, align 4
  %v2_13250 = add i32 %v1_13250, %v0_13230
  store i32 %v2_13250, i32* %r2.global-to-local, align 4
  %v1_13254 = or i32 %v1_13250, 1
  store i32 %v1_13254, i32* %r3.global-to-local, align 4
  %v0_13258 = load i32, i32* %lr.global-to-local, align 4
  %v1_13258 = or i32 %v0_13258, 1
  store i32 %v1_13258, i32* %r1.global-to-local, align 4
  store i32 %v1_13230, i32* %r4.global-to-local, align 4
  %v2_13260 = add i32 %v0_13230, 4
  %v3_13260 = inttoptr i32 %v2_13260 to i32*
  store i32 %v1_13254, i32* %v3_13260, align 4
  %v0_13264 = load i32, i32* %r2.global-to-local, align 4
  %v1_13264 = load i32, i32* @r6, align 4
  %v2_13264 = add i32 %v1_13264, 8
  %v3_13264 = inttoptr i32 %v2_13264 to i32*
  store i32 %v0_13264, i32* %v3_13264, align 4
  %v0_13268 = load i32, i32* %r2.global-to-local, align 4
  %v1_13268 = load i32, i32* @r6, align 4
  %v2_13268 = add i32 %v1_13268, 12
  %v3_13268 = inttoptr i32 %v2_13268 to i32*
  store i32 %v0_13268, i32* %v3_13268, align 4
  %v0_1326c = load i32, i32* %lr.global-to-local, align 4
  %v1_1326c = load i32, i32* %r2.global-to-local, align 4
  %v3_1326c = add i32 %v1_1326c, %v0_1326c
  %v4_1326c = inttoptr i32 %v3_1326c to i32*
  store i32 %v0_1326c, i32* %v4_1326c, align 4
  %v0_13270 = load i32, i32* %r1.global-to-local, align 4
  %v1_13270 = load i32, i32* %r2.global-to-local, align 4
  %v2_13270 = add i32 %v1_13270, 4
  %v3_13270 = inttoptr i32 %v2_13270 to i32*
  store i32 %v0_13270, i32* %v3_13270, align 4
  %v0_13274 = load i32, i32* @r6, align 4
  %v1_13274 = load i32, i32* %r2.global-to-local, align 4
  %v2_13274 = add i32 %v1_13274, 12
  %v3_13274 = inttoptr i32 %v2_13274 to i32*
  store i32 %v0_13274, i32* %v3_13274, align 4
  %v0_13278 = load i32, i32* @r6, align 4
  %v1_13278 = load i32, i32* %r2.global-to-local, align 4
  %v2_13278 = add i32 %v1_13278, 8
  %v3_13278 = inttoptr i32 %v2_13278 to i32*
  store i32 %v0_13278, i32* %v3_13278, align 4
  br label %dec_label_pc_13804

dec_label_pc_13284:                               ; preds = %dec_label_pc_131ec, %dec_label_pc_131dc
  %v1_13214 = phi i32 [ %storemerge.pre, %dec_label_pc_131dc ], [ %v3_131f8, %dec_label_pc_131ec ]
  store i32 %v1_13214, i32* %ip.global-to-local, align 4
  %v9_13284 = icmp eq i32 %v1_13214, %v1_131e0
  br i1 %v9_13284, label %dec_label_pc_1328c.loopexit, label %dec_label_pc_131ec

dec_label_pc_1328c.loopexit:                      ; preds = %dec_label_pc_13284
  br label %dec_label_pc_1328c

dec_label_pc_1328c:                               ; preds = %dec_label_pc_131d4.dec_label_pc_1328c_crit_edge, %dec_label_pc_1328c.loopexit
  %v4_132bc.pre-phi = phi i32 [ %.pre200, %dec_label_pc_131d4.dec_label_pc_1328c_crit_edge ], [ %v4_131dc, %dec_label_pc_1328c.loopexit ]
  %v1_1328c = add i32 %v0_1328c.pre, 1
  store i32 %v1_1328c, i32* %r2.global-to-local, align 4
  %v1_13290 = urem i32 %v1_1328c, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 131404, i32* %r0.global-to-local, align 4
  %v6_1329c = shl i32 1, %v1_13290
  store i32 %v6_1329c, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_132a4 = load i32, i32* inttoptr (i32 131436 to i32*), align 4
  store i32 %v4_132a4, i32* %r3.global-to-local, align 4
  %v3_132a8 = udiv i32 %v1_1328c, 32
  store i32 %v3_132a8, i32* @r5, align 4
  %v4_132ac = mul nuw nsw i32 %v3_132a8, 4
  %v5_132ac = add i32 %v4_132a4, %v4_132ac
  store i32 %v5_132ac, i32* %r2.global-to-local, align 4
  %v1_132b0 = add i32 %v5_132ac, 820
  %v2_132b0 = inttoptr i32 %v1_132b0 to i32*
  %v3_132b0 = load i32, i32* %v2_132b0, align 4
  store i32 %v3_132b0, i32* @r4, align 4
  %v1_132b4 = add i32 %v4_132a4, 52
  store i32 %v1_132b4, i32* %r3.global-to-local, align 4
  store i32 32, i32* @r8, align 4
  %v5_132bc = add i32 %v1_132b4, %v4_132bc.pre-phi
  store i32 %v5_132bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_132c0

dec_label_pc_132c0:                               ; preds = %dec_label_pc_13328, %dec_label_pc_1328c
  %v1_132c8 = phi i32 [ %v1_132c8.pre, %dec_label_pc_13328 ], [ %v3_132b0, %dec_label_pc_1328c ]
  %v0_132c8 = phi i32 [ %v0_132c0.pre, %dec_label_pc_13328 ], [ %v6_1329c, %dec_label_pc_1328c ]
  %v1_132c0 = sub i32 1, %v0_132c8
  %v2_132c0 = icmp ult i32 %v0_132c8, 2
  %v1_132c0. = select i1 %v2_132c0, i32 %v1_132c0, i32 0
  store i32 %v1_132c0., i32* %r3.global-to-local, align 4
  %tmp141 = icmp ugt i32 %v0_132c8, %v1_132c8
  br i1 %tmp141, label %.thread12, label %bb142

.thread12:                                        ; preds = %dec_label_pc_132c0
  %v5_132cc = or i32 %v1_132c0., 1
  store i32 %v5_132cc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_132d8.preheader

bb142:                                            ; preds = %dec_label_pc_132c0
  %v2_132d0 = icmp eq i32 %v1_132c0., 0
  br i1 %v2_132d0, label %.dec_label_pc_13314.preheader_crit_edge, label %dec_label_pc_132d8.preheader

.dec_label_pc_13314.preheader_crit_edge:          ; preds = %bb142
  %v0_1330c54.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13314.preheader

dec_label_pc_132d8.preheader:                     ; preds = %bb142, %.thread12
  %v0_132d8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_132d8

dec_label_pc_132d8:                               ; preds = %dec_label_pc_132d8.preheader, %dec_label_pc_132e4
  %v0_132d8 = phi i32 [ %v0_132d8.pre, %dec_label_pc_132d8.preheader ], [ %v1_132d8, %dec_label_pc_132e4 ]
  %v1_132d8 = add i32 %v0_132d8, 1
  store i32 %v1_132d8, i32* @r5, align 4
  %tmp208 = icmp ugt i32 %v1_132d8, 2
  br i1 %tmp208, label %dec_label_pc_133b8.loopexit, label %dec_label_pc_132e4

dec_label_pc_132e4:                               ; preds = %dec_label_pc_132d8
  store i32 131404, i32* %r3.global-to-local, align 4
  %v1_132e8 = load i32, i32* @r8, align 4
  %v2_132e8 = add i32 %v1_132e8, 131404
  %v3_132e8 = inttoptr i32 %v2_132e8 to i32*
  %v4_132e8 = load i32, i32* %v3_132e8, align 4
  store i32 %v4_132e8, i32* %r2.global-to-local, align 4
  %v4_132ec = mul i32 %v1_132d8, 4
  %v5_132ec = add i32 %v4_132e8, %v4_132ec
  store i32 %v5_132ec, i32* %r3.global-to-local, align 4
  %v1_132f0 = add i32 %v5_132ec, 820
  %v2_132f0 = inttoptr i32 %v1_132f0 to i32*
  %v3_132f0 = load i32, i32* %v2_132f0, align 4
  store i32 %v3_132f0, i32* @r4, align 4
  %v2_132f4 = icmp eq i32 %v3_132f0, 0
  br i1 %v2_132f4, label %dec_label_pc_132d8, label %dec_label_pc_132fc

dec_label_pc_132fc:                               ; preds = %dec_label_pc_132e4
  %v4_132fc = mul i32 %v1_132d8, 256
  %v5_132fc = add i32 %v4_132e8, %v4_132fc
  store i32 %v5_132fc, i32* %r3.global-to-local, align 4
  %v1_13300 = add i32 %v5_132fc, 44
  store i32 %v1_13300, i32* %r0.global-to-local, align 4
  %v0_13304 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13304, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13314.preheader

dec_label_pc_13314.preheader:                     ; preds = %.dec_label_pc_13314.preheader_crit_edge, %dec_label_pc_132fc
  %v0_1330c54 = phi i32 [ %v1_13300, %dec_label_pc_132fc ], [ %v0_1330c54.pre, %.dec_label_pc_13314.preheader_crit_edge ]
  %v0_13330 = phi i32 [ %v3_132f0, %dec_label_pc_132fc ], [ %v1_132c8, %.dec_label_pc_13314.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_13304, %dec_label_pc_132fc ], [ %v0_132c8, %.dec_label_pc_13314.preheader_crit_edge ]
  %v2_1331451 = and i32 %ip.promoted, %v0_13330
  %v4_1331453 = icmp eq i32 %v2_1331451, 0
  br i1 %v4_1331453, label %dec_label_pc_1330c, label %dec_label_pc_1331c

dec_label_pc_1330c:                               ; preds = %dec_label_pc_13314.preheader, %dec_label_pc_1330c
  %v2_1331056 = phi i32 [ %v2_13310, %dec_label_pc_1330c ], [ %ip.promoted, %dec_label_pc_13314.preheader ]
  %v0_1330c55 = phi i32 [ %v1_1330c, %dec_label_pc_1330c ], [ %v0_1330c54, %dec_label_pc_13314.preheader ]
  %v1_1330c = add i32 %v0_1330c55, 8
  %v2_13310 = mul i32 %v2_1331056, 2
  %v2_13314 = and i32 %v2_13310, %v0_13330
  %v4_13314 = icmp eq i32 %v2_13314, 0
  br i1 %v4_13314, label %dec_label_pc_1330c, label %dec_label_pc_13314.dec_label_pc_1331c_crit_edge

dec_label_pc_13314.dec_label_pc_1331c_crit_edge:  ; preds = %dec_label_pc_1330c
  store i32 %v1_1330c, i32* %r0.global-to-local, align 4
  store i32 %v2_13310, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1331c

dec_label_pc_1331c:                               ; preds = %dec_label_pc_13314.dec_label_pc_1331c_crit_edge, %dec_label_pc_13314.preheader
  %v0_1333c = phi i32 [ %v2_13310, %dec_label_pc_13314.dec_label_pc_1331c_crit_edge ], [ %ip.promoted, %dec_label_pc_13314.preheader ]
  %v0_13360 = phi i32 [ %v1_1330c, %dec_label_pc_13314.dec_label_pc_1331c_crit_edge ], [ %v0_1330c54, %dec_label_pc_13314.preheader ]
  %v1_1331c = add i32 %v0_13360, 12
  %v2_1331c = inttoptr i32 %v1_1331c to i32*
  %v3_1331c = load i32, i32* %v2_1331c, align 4
  store i32 %v3_1331c, i32* @lr, align 4
  %v9_13320 = icmp eq i32 %v3_1331c, %v0_13360
  br i1 %v9_13320, label %dec_label_pc_13328, label %dec_label_pc_13348

dec_label_pc_13328:                               ; preds = %dec_label_pc_1331c
  store i32 131404, i32* %r0.global-to-local, align 4
  %v1_1332c = load i32, i32* @r8, align 4
  %v2_1332c = add i32 %v1_1332c, 131404
  %v3_1332c = inttoptr i32 %v2_1332c to i32*
  %v4_1332c = load i32, i32* %v3_1332c, align 4
  %v2_13330 = sub i32 -1, %v0_1333c
  %v3_13330 = and i32 %v0_13330, %v2_13330
  store i32 %v3_13330, i32* @r4, align 4
  %v1_13334 = load i32, i32* @r5, align 4
  %v4_13334 = mul i32 %v1_13334, 4
  %v5_13334 = add i32 %v4_13334, %v4_1332c
  store i32 %v5_13334, i32* %r3.global-to-local, align 4
  %v1_13338 = add i32 %v0_13360, 8
  store i32 %v1_13338, i32* %r0.global-to-local, align 4
  %v2_1333c = mul i32 %v0_1333c, 2
  store i32 %v2_1333c, i32* %ip.global-to-local, align 4
  %v2_13340 = add i32 %v5_13334, 820
  %v3_13340 = inttoptr i32 %v2_13340 to i32*
  store i32 %v3_13330, i32* %v3_13340, align 4
  %v0_132c0.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_132c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_132c0

dec_label_pc_13348:                               ; preds = %dec_label_pc_1331c
  %v1_13348 = add i32 %v3_1331c, 4
  %v2_13348 = inttoptr i32 %v1_13348 to i32*
  %v3_13348 = load i32, i32* %v2_13348, align 4
  store i32 %v3_13348, i32* %r3.global-to-local, align 4
  %v1_1334c = and i32 %v3_13348, -4
  store i32 %v1_1334c, i32* %r2.global-to-local, align 4
  %v0_13350 = load i32, i32* @sl, align 4
  %v2_13350 = sub i32 %v1_1334c, %v0_13350
  store i32 %v2_13350, i32* %ip.global-to-local, align 4
  %v1_13354 = add i32 %v3_1331c, 12
  %v2_13354 = inttoptr i32 %v1_13354 to i32*
  %v3_13354 = load i32, i32* %v2_13354, align 4
  store i32 %v3_13354, i32* %r3.global-to-local, align 4
  %tmp209 = icmp ult i32 %v2_13350, 16
  br i1 %tmp209, label %bb143, label %bb144

bb143:                                            ; preds = %dec_label_pc_13348
  %v6_1335c = add i32 %v1_1334c, %v3_1331c
  store i32 %v6_1335c, i32* %r2.global-to-local, align 4
  br label %bb144

bb144:                                            ; preds = %dec_label_pc_13348, %bb143
  %v2_13360 = add i32 %v3_13354, 8
  %v3_13360 = inttoptr i32 %v2_13360 to i32*
  store i32 %v0_13360, i32* %v3_13360, align 4
  %v0_13364 = load i32, i32* %r3.global-to-local, align 4
  %v1_13364 = load i32, i32* %r0.global-to-local, align 4
  %v2_13364 = add i32 %v1_13364, 12
  %v3_13364 = inttoptr i32 %v2_13364 to i32*
  store i32 %v0_13364, i32* %v3_13364, align 4
  %v4_13368 = load i32, i32* @lr, align 4
  br i1 %tmp209, label %.dec_label_pc_13244_crit_edge, label %dec_label_pc_13374

.dec_label_pc_13244_crit_edge:                    ; preds = %bb144
  %v5_13368 = add i32 %v4_13368, 8
  store i32 %v5_13368, i32* %r4.global-to-local, align 4
  %v4_1336c = load i32, i32* %r2.global-to-local, align 4
  %v5_1336c = add i32 %v4_1336c, 4
  %v6_1336c = inttoptr i32 %v5_1336c to i32*
  %v7_1336c = load i32, i32* %v6_1336c, align 4
  store i32 %v7_1336c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_13244

dec_label_pc_13374:                               ; preds = %bb144
  %v1_13374 = load i32, i32* @sl, align 4
  %v2_13374 = add i32 %v1_13374, %v4_13368
  store i32 %v2_13374, i32* %r1.global-to-local, align 4
  %v1_1337c = load i32, i32* @r6, align 4
  %v2_1337c = add i32 %v1_1337c, 8
  %v3_1337c = inttoptr i32 %v2_1337c to i32*
  store i32 %v2_13374, i32* %v3_1337c, align 4
  %v0_13380 = load i32, i32* %r1.global-to-local, align 4
  %v1_13380 = load i32, i32* @r6, align 4
  %v2_13380 = add i32 %v1_13380, 12
  %v3_13380 = inttoptr i32 %v2_13380 to i32*
  store i32 %v0_13380, i32* %v3_13380, align 4
  %v0_13384 = load i32, i32* @r6, align 4
  %v1_13384 = load i32, i32* %r1.global-to-local, align 4
  %v2_13384 = add i32 %v1_13384, 8
  %v3_13384 = inttoptr i32 %v2_13384 to i32*
  store i32 %v0_13384, i32* %v3_13384, align 4
  %v0_13388 = load i32, i32* @r6, align 4
  %v1_13388 = load i32, i32* %r1.global-to-local, align 4
  %v2_13388 = add i32 %v1_13388, 12
  %v3_13388 = inttoptr i32 %v2_13388 to i32*
  store i32 %v0_13388, i32* %v3_13388, align 4
  %tmp210 = icmp ult i32 %v1_13374, 256
  br i1 %tmp210, label %bb145, label %.thread121

bb145:                                            ; preds = %dec_label_pc_13374
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 131404, i32* %r2.global-to-local, align 4
  %v8_13394 = load i32, i32* inttoptr (i32 131436 to i32*), align 4
  store i32 %v8_13394, i32* %r3.global-to-local, align 4
  %v4_13398 = load i32, i32* %r1.global-to-local, align 4
  %v6_13398 = add i32 %v8_13394, 48
  %v7_13398 = inttoptr i32 %v6_13398 to i32*
  store i32 %v4_13398, i32* %v7_13398, align 4
  br label %.thread121

.thread121:                                       ; preds = %dec_label_pc_13374, %bb145
  %v0_1339c = load i32, i32* @sl, align 4
  %v1_1339c = or i32 %v0_1339c, 1
  store i32 %v1_1339c, i32* %r2.global-to-local, align 4
  %v0_133a0 = load i32, i32* %ip.global-to-local, align 4
  %v1_133a0 = or i32 %v0_133a0, 1
  store i32 %v1_133a0, i32* %r3.global-to-local, align 4
  %v0_133a4 = load i32, i32* @lr, align 4
  %v1_133a4 = add i32 %v0_133a4, 8
  store i32 %v1_133a4, i32* %r4.global-to-local, align 4
  %v2_133a8 = add i32 %v0_133a4, 4
  %v3_133a8 = inttoptr i32 %v2_133a8 to i32*
  store i32 %v1_1339c, i32* %v3_133a8, align 4
  %v0_133ac = load i32, i32* %ip.global-to-local, align 4
  %v1_133ac = load i32, i32* %r1.global-to-local, align 4
  %v3_133ac = add i32 %v1_133ac, %v0_133ac
  %v4_133ac = inttoptr i32 %v3_133ac to i32*
  store i32 %v0_133ac, i32* %v4_133ac, align 4
  %v0_133b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_133b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_133b0 = add i32 %v1_133b0, 4
  %v3_133b0 = inttoptr i32 %v2_133b0 to i32*
  store i32 %v0_133b0, i32* %v3_133b0, align 4
  br label %dec_label_pc_13804

dec_label_pc_133b8.loopexit:                      ; preds = %dec_label_pc_132d8
  br label %dec_label_pc_133b8

dec_label_pc_133b8:                               ; preds = %dec_label_pc_133b8.loopexit, %dec_label_pc_12fcc, %dec_label_pc_12fd4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 131404, i32* %ip.global-to-local, align 4
  %v4_133c0 = load i32, i32* inttoptr (i32 131436 to i32*), align 4
  store i32 %v4_133c0, i32* @r0, align 4
  %v1_133c4 = add i32 %v4_133c0, 44
  %v2_133c4 = inttoptr i32 %v1_133c4 to i32*
  %v3_133c4 = load i32, i32* %v2_133c4, align 4
  store i32 %v3_133c4, i32* %ip.global-to-local, align 4
  %v1_133c8 = add i32 %v3_133c4, 4
  %v2_133c8 = inttoptr i32 %v1_133c8 to i32*
  %v3_133c8 = load i32, i32* %v2_133c8, align 4
  %v0_133cc = load i32, i32* @sl, align 4
  %v1_133cc = add i32 %v0_133cc, 16
  store i32 %v1_133cc, i32* %r1.global-to-local, align 4
  %v1_133d0 = and i32 %v3_133c8, -4
  store i32 %v1_133d0, i32* %r3.global-to-local, align 4
  %v3_133d4 = icmp ult i32 %v1_133d0, %v1_133cc
  br i1 %v3_133d4, label %dec_label_pc_13404, label %dec_label_pc_133e0

dec_label_pc_133e0:                               ; preds = %dec_label_pc_133b8
  %v2_133e0 = sub i32 %v1_133d0, %v0_133cc
  %v2_133e4 = add i32 %v0_133cc, %v3_133c4
  store i32 %v2_133e4, i32* %r1.global-to-local, align 4
  %v1_133e8 = or i32 %v2_133e0, 1
  store i32 %v1_133e8, i32* %r3.global-to-local, align 4
  %v1_133ec = or i32 %v0_133cc, 1
  store i32 %v1_133ec, i32* %r2.global-to-local, align 4
  %v1_133f0 = add i32 %v3_133c4, 8
  store i32 %v1_133f0, i32* %r4.global-to-local, align 4
  store i32 %v1_133ec, i32* %v2_133c8, align 4
  %v0_133f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_133f8 = load i32, i32* @r0, align 4
  %v2_133f8 = add i32 %v1_133f8, 44
  %v3_133f8 = inttoptr i32 %v2_133f8 to i32*
  store i32 %v0_133f8, i32* %v3_133f8, align 4
  %v0_133fc = load i32, i32* %r3.global-to-local, align 4
  %v1_133fc = load i32, i32* %r1.global-to-local, align 4
  %v2_133fc = add i32 %v1_133fc, 4
  %v3_133fc = inttoptr i32 %v2_133fc to i32*
  store i32 %v0_133fc, i32* %v3_133fc, align 4
  br label %dec_label_pc_13804

dec_label_pc_13404:                               ; preds = %dec_label_pc_133b8
  %v1_13404 = inttoptr i32 %v4_133c0 to i32*
  %v2_13404 = load i32, i32* %v1_13404, align 4
  store i32 %v2_13404, i32* %r3.global-to-local, align 4
  %v1_13408 = and i32 %v2_13404, 2
  store i32 %v1_13408, i32* %ip.global-to-local, align 4
  %v2_13408 = icmp eq i32 %v1_13408, 0
  %v1_1340c = add i32 %v4_133c0, 860
  %v2_1340c = inttoptr i32 %v1_1340c to i32*
  %v3_1340c = load i32, i32* %v2_1340c, align 4
  store i32 %v3_1340c, i32* %r1.global-to-local, align 4
  br i1 %v2_13408, label %dec_label_pc_13424, label %dec_label_pc_13414

dec_label_pc_13414:                               ; preds = %dec_label_pc_13404
  %v0_13414 = call i32 @function_13de4()
  %v0_13418 = load i32, i32* @sl, align 4
  %v1_13418 = add i32 %v0_13418, -7
  store i32 %v1_13418, i32* @r0, align 4
  %v0_1341c = call i32 @function_12f2c()
  store i32 %v0_1341c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13800

dec_label_pc_13424:                               ; preds = %dec_label_pc_13404
  %v1_13424 = add i32 %v4_133c0, 844
  %v2_13424 = inttoptr i32 %v1_13424 to i32*
  %v3_13424 = load i32, i32* %v2_13424, align 4
  store i32 %v3_13424, i32* %r3.global-to-local, align 4
  %v3_13428 = icmp ult i32 %v0_133cc, %v3_13424
  %v1_1342c = add i32 %v3_1340c, -1
  store i32 %v1_1342c, i32* %sb.global-to-local, align 4
  br i1 %v3_13428, label %dec_label_pc_13500, label %dec_label_pc_13434

dec_label_pc_13434:                               ; preds = %dec_label_pc_13424
  %v1_13434 = add i32 %v4_133c0, 852
  %v2_13434 = inttoptr i32 %v1_13434 to i32*
  %v3_13434 = load i32, i32* %v2_13434, align 4
  store i32 %v3_13434, i32* %r2.global-to-local, align 4
  %v1_13438 = add i32 %v4_133c0, 848
  %v2_13438 = inttoptr i32 %v1_13438 to i32*
  %v3_13438 = load i32, i32* %v2_13438, align 4
  store i32 %v3_13438, i32* %r3.global-to-local, align 4
  %v6_13440 = icmp slt i32 %v3_13438, %v3_13434
  br i1 %v6_13440, label %dec_label_pc_13444, label %dec_label_pc_13500

dec_label_pc_13444:                               ; preds = %dec_label_pc_13434
  %v1_13444 = add i32 %v0_133cc, 10
  %v2_13448 = add i32 %v1_13444, %v3_1340c
  store i32 %v2_13448, i32* %r3.global-to-local, align 4
  %v2_1344c = sub i32 0, %v3_1340c
  %v3_1344c = and i32 %v2_13448, %v2_1344c
  store i32 %v3_1344c, i32* @r4, align 4
  %tmp211 = icmp ugt i32 %v3_1344c, %v0_133cc
  br i1 %tmp211, label %dec_label_pc_13458, label %dec_label_pc_13500

dec_label_pc_13458:                               ; preds = %dec_label_pc_13444
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_1344c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_13470 = call i32 @function_15018(i32 0, i32 %v3_1344c, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_13470, i32* %r0.global-to-local, align 4
  %v7_13474 = icmp eq i32 %v6_13470, -1
  br i1 %v7_13474, label %dec_label_pc_13458.dec_label_pc_13500_crit_edge, label %dec_label_pc_1347c

dec_label_pc_13458.dec_label_pc_13500_crit_edge:  ; preds = %dec_label_pc_13458
  %v1_13524.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_13500

dec_label_pc_1347c:                               ; preds = %dec_label_pc_13458
  %v1_1347c = urem i32 %v6_13470, 8
  store i32 %v1_1347c, i32* %r2.global-to-local, align 4
  %v2_1347c = icmp eq i32 %v1_1347c, 0
  br i1 %v2_1347c, label %bb146, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_1347c
  %v2_13480 = sub nsw i32 8, %v1_1347c
  store i32 %v2_13480, i32* %r3.global-to-local, align 4
  %v2_13484 = load i32, i32* @r4, align 4
  %v3_13484 = sub i32 %v2_13484, %v2_13480
  %v3_13488 = add i32 %v2_13480, %v6_13470
  store i32 %v3_13488, i32* %lr.global-to-local, align 4
  %v2_13490 = or i32 %v3_13484, 2
  store i32 %v2_13490, i32* %r2.global-to-local, align 4
  %v5_13498 = inttoptr i32 %v3_13488 to i32*
  store i32 %v2_13480, i32* %v5_13498, align 4
  %v1_1349c = load i32, i32* %r2.global-to-local, align 4
  %v2_1349c = load i32, i32* %lr.global-to-local, align 4
  %v3_1349c = add i32 %v2_1349c, 4
  %v4_1349c = inttoptr i32 %v3_1349c to i32*
  store i32 %v1_1349c, i32* %v4_1349c, align 4
  br label %.thread27

bb146:                                            ; preds = %dec_label_pc_1347c
  store i32 %v6_13470, i32* %lr.global-to-local, align 4
  %v1_1349447 = load i32, i32* @r4, align 4
  %v2_1349448 = or i32 %v1_1349447, 2
  store i32 %v2_1349448, i32* %r3.global-to-local, align 4
  %v3_134a0 = inttoptr i32 %v6_13470 to i32*
  store i32 0, i32* %v3_134a0, align 4
  %v1_134a4 = load i32, i32* %r3.global-to-local, align 4
  %v2_134a4 = load i32, i32* %lr.global-to-local, align 4
  %v3_134a4 = add i32 %v2_134a4, 4
  %v4_134a4 = inttoptr i32 %v3_134a4 to i32*
  store i32 %v1_134a4, i32* %v4_134a4, align 4
  br label %.thread27

.thread27:                                        ; preds = %.thread25, %bb146
  store i32 131404, i32* %r2.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_134b0 = load i32, i32* inttoptr (i32 131436 to i32*), align 4
  store i32 %v4_134b0, i32* %ip.global-to-local, align 4
  %v1_134b4 = add i32 %v4_134b0, 848
  %v2_134b4 = inttoptr i32 %v1_134b4 to i32*
  %v3_134b4 = load i32, i32* %v2_134b4, align 4
  store i32 %v3_134b4, i32* %r3.global-to-local, align 4
  %v1_134b8 = add i32 %v4_134b0, 856
  %v2_134b8 = inttoptr i32 %v1_134b8 to i32*
  %v3_134b8 = load i32, i32* %v2_134b8, align 4
  store i32 %v3_134b8, i32* %r2.global-to-local, align 4
  %v1_134bc = add i32 %v3_134b4, 1
  store i32 %v1_134bc, i32* %r3.global-to-local, align 4
  %v7_134c4 = icmp sgt i32 %v1_134bc, %v3_134b8
  br i1 %v7_134c4, label %bb147, label %bb148

bb147:                                            ; preds = %.thread27
  store i32 %v1_134bc, i32* %v2_134b8, align 4
  %v0_134c8.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_134c8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb148

bb148:                                            ; preds = %.thread27, %bb147
  %v1_134c8 = phi i32 [ %v4_134b0, %.thread27 ], [ %v1_134c8.pre, %bb147 ]
  %v0_134c8 = phi i32 [ %v1_134bc, %.thread27 ], [ %v0_134c8.pre, %bb147 ]
  %v2_134c8 = add i32 %v1_134c8, 848
  %v3_134c8 = inttoptr i32 %v2_134c8 to i32*
  store i32 %v0_134c8, i32* %v3_134c8, align 4
  %v0_134cc = load i32, i32* %ip.global-to-local, align 4
  %v1_134cc = add i32 %v0_134cc, 868
  %v2_134cc = inttoptr i32 %v1_134cc to i32*
  %v3_134cc = load i32, i32* %v2_134cc, align 4
  store i32 %v3_134cc, i32* %r3.global-to-local, align 4
  %v1_134d0 = add i32 %v0_134cc, 880
  %v2_134d0 = inttoptr i32 %v1_134d0 to i32*
  %v3_134d0 = load i32, i32* %v2_134d0, align 4
  store i32 %v3_134d0, i32* %r2.global-to-local, align 4
  %v0_134d4 = load i32, i32* @r4, align 4
  %v2_134d4 = add i32 %v0_134d4, %v3_134cc
  store i32 %v2_134d4, i32* %r1.global-to-local, align 4
  %v1_134d8 = add i32 %v0_134cc, 872
  %v2_134d8 = inttoptr i32 %v1_134d8 to i32*
  %v3_134d8 = load i32, i32* %v2_134d8, align 4
  store i32 %v3_134d8, i32* %r3.global-to-local, align 4
  %v1_134e0 = add i32 %v0_134cc, 884
  %v2_134e0 = inttoptr i32 %v1_134e0 to i32*
  %v3_134e0 = load i32, i32* %v2_134e0, align 4
  store i32 %v3_134e0, i32* %r2.global-to-local, align 4
  %tmp212 = icmp ugt i32 %v2_134d4, %v3_134d0
  br i1 %tmp212, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  store i32 %v2_134d4, i32* %v2_134d0, align 4
  %v0_134e8.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_134e8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v1_134e8 = phi i32 [ %v0_134cc, %bb148 ], [ %v1_134e8.pre, %bb149 ]
  %v0_134e8 = phi i32 [ %v2_134d4, %bb148 ], [ %v0_134e8.pre, %bb149 ]
  %v2_134e8 = add i32 %v1_134e8, 868
  %v3_134e8 = inttoptr i32 %v2_134e8 to i32*
  store i32 %v0_134e8, i32* %v3_134e8, align 4
  %v0_134ec = load i32, i32* %r1.global-to-local, align 4
  %v1_134ec = load i32, i32* %r3.global-to-local, align 4
  %v2_134ec = add i32 %v1_134ec, %v0_134ec
  store i32 %v2_134ec, i32* %r1.global-to-local, align 4
  %v1_134f0 = load i32, i32* %r2.global-to-local, align 4
  %v0_134f4 = load i32, i32* %lr.global-to-local, align 4
  %v1_134f4 = add i32 %v0_134f4, 8
  store i32 %v1_134f4, i32* %r0.global-to-local, align 4
  %tmp213 = icmp ugt i32 %v2_134ec, %v1_134f0
  br i1 %tmp213, label %bb151, label %dec_label_pc_13800

bb151:                                            ; preds = %bb150
  %v5_134f8 = load i32, i32* %ip.global-to-local, align 4
  %v6_134f8 = add i32 %v5_134f8, 884
  %v7_134f8 = inttoptr i32 %v6_134f8 to i32*
  store i32 %v2_134ec, i32* %v7_134f8, align 4
  br label %dec_label_pc_13800

dec_label_pc_13500:                               ; preds = %dec_label_pc_13444, %dec_label_pc_13424, %dec_label_pc_13458.dec_label_pc_13500_crit_edge, %dec_label_pc_13434
  %v1_13524 = phi i32 [ %v1_13524.pre, %dec_label_pc_13458.dec_label_pc_13500_crit_edge ], [ %v0_133cc, %dec_label_pc_13434 ], [ %v0_133cc, %dec_label_pc_13424 ], [ %v0_133cc, %dec_label_pc_13444 ]
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 131404, i32* %ip.global-to-local, align 4
  %v4_13508 = load i32, i32* inttoptr (i32 131436 to i32*), align 4
  store i32 %v4_13508, i32* %r3.global-to-local, align 4
  %v1_1350c = add i32 %v4_13508, 44
  %v2_1350c = inttoptr i32 %v1_1350c to i32*
  %v3_1350c = load i32, i32* %v2_1350c, align 4
  store i32 %v3_1350c, i32* %r0.global-to-local, align 4
  %v1_13510 = add i32 %v4_13508, 864
  %v2_13510 = inttoptr i32 %v1_13510 to i32*
  %v3_13510 = load i32, i32* %v2_13510, align 4
  store i32 %v3_13510, i32* %r2.global-to-local, align 4
  %v1_13514 = add i32 %v4_13508, 840
  %v2_13514 = inttoptr i32 %v1_13514 to i32*
  %v3_13514 = load i32, i32* %v2_13514, align 4
  store i32 %v3_13514, i32* %r3.global-to-local, align 4
  %v1_13518 = add i32 %v3_1350c, 4
  %v2_13518 = inttoptr i32 %v1_13518 to i32*
  %v3_13518 = load i32, i32* %v2_13518, align 4
  store i32 %v3_13518, i32* %r1.global-to-local, align 4
  %v1_13520 = urem i32 %v3_13510, 2
  %v2_13520 = icmp eq i32 %v1_13520, 0
  %v1_1351c = add i32 %v1_13524, 16
  %v2_13524 = add i32 %v1_1351c, %v3_13514
  store i32 %v2_13524, i32* %r3.global-to-local, align 4
  %v1_13528 = and i32 %v3_13518, -4
  store i32 %v1_13528, i32* @r8, align 4
  br i1 %v2_13520, label %bb153, label %bb152

bb152:                                            ; preds = %dec_label_pc_13500
  %v3_1352c = sub i32 %v2_13524, %v1_13528
  store i32 %v3_1352c, i32* %r3.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %dec_label_pc_13500, %bb152
  %v0_13530 = phi i32 [ %v2_13524, %dec_label_pc_13500 ], [ %v3_1352c, %bb152 ]
  %v1_13530 = load i32, i32* %sb.global-to-local, align 4
  %v2_13530 = add i32 %v1_13530, %v0_13530
  store i32 %v2_13530, i32* %r3.global-to-local, align 4
  %v1_13534 = sub i32 -1, %v1_13530
  store i32 %v1_13534, i32* %fp.global-to-local, align 4
  %v2_13538 = and i32 %v2_13530, %v1_13534
  store i32 %v2_13538, i32* @r5, align 4
  %tmp154 = icmp slt i32 %v2_13538, 1
  br i1 %tmp154, label %dec_label_pc_1355c, label %dec_label_pc_13548

dec_label_pc_13548:                               ; preds = %bb153
  store i32 %v2_13538, i32* %r0.global-to-local, align 4
  %v1_1354c = call i32 @function_152a4(i32 %v2_13538)
  store i32 %v1_1354c, i32* %r0.global-to-local, align 4
  %v3_13550 = icmp eq i32 %v1_1354c, -1
  store i32 %v1_1354c, i32* @r4, align 4
  br i1 %v3_13550, label %dec_label_pc_1355c, label %dec_label_pc_135c8

dec_label_pc_1355c:                               ; preds = %dec_label_pc_13548, %bb153
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 131404, i32* %r1.global-to-local, align 4
  %v4_13564 = load i32, i32* inttoptr (i32 131436 to i32*), align 4
  store i32 %v4_13564, i32* %r6.global-to-local, align 4
  %v1_13568 = add i32 %v4_13564, 864
  %v2_13568 = inttoptr i32 %v1_13568 to i32*
  %v3_13568 = load i32, i32* %v2_13568, align 4
  store i32 %v3_13568, i32* %r3.global-to-local, align 4
  %v1_1356c = urem i32 %v3_13568, 2
  %v2_1356c = icmp eq i32 %v1_1356c, 0
  br i1 %v2_1356c, label %.thread29thread-pre-split, label %bb155

bb155:                                            ; preds = %dec_label_pc_1355c
  %v1_13570 = load i32, i32* @r8, align 4
  %v2_13570 = load i32, i32* %sb.global-to-local, align 4
  %v3_13570 = add i32 %v2_13570, %v1_13570
  %v2_13574 = load i32, i32* @r5, align 4
  %v3_13574 = add i32 %v3_13570, %v2_13574
  store i32 %v3_13574, i32* %r3.global-to-local, align 4
  %v2_13578 = load i32, i32* %fp.global-to-local, align 4
  %v3_13578 = and i32 %v2_13578, %v3_13574
  store i32 %v3_13578, i32* @r5, align 4
  br label %.thread29

.thread29thread-pre-split:                        ; preds = %dec_label_pc_1355c
  %v0_1357c.pr = load i32, i32* @r5, align 4
  br label %.thread29

.thread29:                                        ; preds = %.thread29thread-pre-split, %bb155
  %v0_1357c = phi i32 [ %v0_1357c.pr, %.thread29thread-pre-split ], [ %v3_13578, %bb155 ]
  %v2_1357c = icmp ugt i32 %v0_1357c, 1048575
  br i1 %v2_1357c, label %bb157, label %bb156

bb156:                                            ; preds = %.thread29
  store i32 1048576, i32* @r5, align 4
  br label %bb157

bb157:                                            ; preds = %.thread29, %bb156
  %v0_13594 = phi i32 [ %v0_1357c, %.thread29 ], [ 1048576, %bb156 ]
  %v1_13584 = load i32, i32* @sl, align 4
  %tmp214 = icmp ugt i32 %v0_13594, %v1_13584
  br i1 %tmp214, label %dec_label_pc_1358c, label %dec_label_pc_137f0

dec_label_pc_1358c:                               ; preds = %bb157
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_13594, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_135a8 = call i32 @function_15018(i32 0, i32 %v0_13594, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_135a8, i32* %r0.global-to-local, align 4
  %v3_135ac = icmp eq i32 %v6_135a8, -1
  %v8_135ac = icmp eq i32 %v6_135a8, -1
  store i32 %v6_135a8, i32* @r4, align 4
  br i1 %v8_135ac, label %.thread32, label %bb158

bb158:                                            ; preds = %dec_label_pc_1358c
  %v1_135b4 = load i32, i32* %r6.global-to-local, align 4
  %v2_135b4 = add i32 %v1_135b4, 864
  %v3_135b4 = inttoptr i32 %v2_135b4 to i32*
  %v4_135b4 = load i32, i32* %v3_135b4, align 4
  %v2_135b8 = load i32, i32* @r5, align 4
  %v3_135b8 = add i32 %v2_135b8, %v6_135a8
  store i32 %v3_135b8, i32* %r0.global-to-local, align 4
  %v2_135bc = and i32 %v4_135b4, -2
  store i32 %v2_135bc, i32* %r3.global-to-local, align 4
  store i32 %v2_135bc, i32* %v3_135b4, align 4
  br label %.thread32

.thread32:                                        ; preds = %dec_label_pc_1358c, %bb158
  br i1 %v3_135ac, label %dec_label_pc_135c8, label %dec_label_pc_135cc

dec_label_pc_135c8:                               ; preds = %.thread32, %dec_label_pc_13548
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_135cc

dec_label_pc_135cc:                               ; preds = %.thread32, %dec_label_pc_135c8
  %v0_135cc = load i32, i32* @r4, align 4
  %v7_135cc = icmp eq i32 %v0_135cc, -1
  br i1 %v7_135cc, label %dec_label_pc_137f0, label %dec_label_pc_135d4

dec_label_pc_135d4:                               ; preds = %dec_label_pc_135cc
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 131404, i32* %r2.global-to-local, align 4
  %v4_135dc = load i32, i32* inttoptr (i32 131436 to i32*), align 4
  store i32 %v4_135dc, i32* %ip.global-to-local, align 4
  store i32 %v3_1350c, i32* %r2.global-to-local, align 4
  %v1_135e4 = add i32 %v4_135dc, 872
  %v2_135e4 = inttoptr i32 %v1_135e4 to i32*
  %v3_135e4 = load i32, i32* %v2_135e4, align 4
  %v1_135e8 = load i32, i32* @r8, align 4
  %v2_135e8 = add i32 %v1_135e8, %v3_1350c
  store i32 %v2_135e8, i32* %r1.global-to-local, align 4
  %v0_135ec = load i32, i32* @r5, align 4
  %v2_135ec = add i32 %v0_135ec, %v3_135e4
  store i32 %v2_135ec, i32* %r3.global-to-local, align 4
  %v9_135f0 = icmp eq i32 %v0_135cc, %v2_135e8
  br i1 %v9_135f0, label %bb159, label %.thread122

.thread122:                                       ; preds = %dec_label_pc_135d4
  store i32 %v2_135ec, i32* %v2_135e4, align 4
  br label %dec_label_pc_1360c

bb159:                                            ; preds = %dec_label_pc_135d4
  %v1_135f4 = load i32, i32* %r0.global-to-local, align 4
  %v8_135f4 = icmp eq i32 %v1_135f4, -1
  store i32 %v2_135ec, i32* %v2_135e4, align 4
  br i1 %v8_135f4, label %.thread34, label %dec_label_pc_1360c

.thread34:                                        ; preds = %bb159
  %v1_135fc = load i32, i32* @r5, align 4
  %v2_135fc = load i32, i32* @r8, align 4
  %v3_135fc = add i32 %v2_135fc, %v1_135fc
  %v2_13600 = or i32 %v3_135fc, 1
  store i32 %v2_13600, i32* %r3.global-to-local, align 4
  %v2_13604 = load i32, i32* %r2.global-to-local, align 4
  %v3_13604 = add i32 %v2_13604, 4
  %v4_13604 = inttoptr i32 %v3_13604 to i32*
  store i32 %v2_13600, i32* %v4_13604, align 4
  br label %dec_label_pc_13784

dec_label_pc_1360c:                               ; preds = %bb159, %.thread122
  %v0_13610.pr = load i32, i32* @r8, align 4
  %v0_1360c = load i32, i32* %ip.global-to-local, align 4
  %v1_1360c = add i32 %v0_1360c, 864
  %v2_1360c = inttoptr i32 %v1_1360c to i32*
  %v3_1360c = load i32, i32* %v2_1360c, align 4
  store i32 %v3_1360c, i32* %r2.global-to-local, align 4
  %v2_13610 = icmp eq i32 %v0_13610.pr, 0
  br i1 %v2_13610, label %.thread37, label %.thread36

.thread37:                                        ; preds = %dec_label_pc_1360c
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread40

.thread36:                                        ; preds = %dec_label_pc_1360c
  %v2_13618 = urem i32 %v3_1360c, 2
  store i32 %v2_13618, i32* %r3.global-to-local, align 4
  %v2_1361c = icmp eq i32 %v2_13618, 0
  br i1 %v2_1361c, label %.thread40, label %dec_label_pc_13624

dec_label_pc_13624:                               ; preds = %.thread36
  %v0_13624 = load i32, i32* @r4, align 4
  %v1_13624 = load i32, i32* %r1.global-to-local, align 4
  %v3_13624 = icmp ult i32 %v0_13624, %v1_13624
  br i1 %v3_13624, label %bb160, label %.thread40

bb160:                                            ; preds = %dec_label_pc_13624
  %v2_13628 = and i32 %v3_1360c, -2
  store i32 %v2_13628, i32* %r3.global-to-local, align 4
  store i32 %v2_13628, i32* %v2_1360c, align 4
  br label %.thread40

.thread40:                                        ; preds = %dec_label_pc_13624, %.thread37, %.thread36, %bb160
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 131404, i32* %ip.global-to-local, align 4
  %v4_13638 = load i32, i32* inttoptr (i32 131436 to i32*), align 4
  store i32 %v4_13638, i32* @r7, align 4
  %v1_1363c = add i32 %v4_13638, 864
  %v2_1363c = inttoptr i32 %v1_1363c to i32*
  %v3_1363c = load i32, i32* %v2_1363c, align 4
  store i32 %v3_1363c, i32* %r3.global-to-local, align 4
  %v1_13640 = urem i32 %v3_1363c, 2
  store i32 %v1_13640, i32* @r6, align 4
  %v2_13640 = icmp eq i32 %v1_13640, 0
  br i1 %v2_13640, label %dec_label_pc_136d4, label %dec_label_pc_13648

dec_label_pc_13648:                               ; preds = %.thread40
  %v0_13648 = load i32, i32* @r8, align 4
  %v2_13648 = icmp eq i32 %v0_13648, 0
  br i1 %v2_13648, label %.thread43, label %bb161

bb161:                                            ; preds = %dec_label_pc_13648
  %v2_1364c = add i32 %v4_13638, 872
  %v3_1364c = inttoptr i32 %v2_1364c to i32*
  %v4_1364c = load i32, i32* %v3_1364c, align 4
  store i32 %v4_1364c, i32* %r2.global-to-local, align 4
  %v1_13650 = load i32, i32* %r1.global-to-local, align 4
  %v2_13650 = load i32, i32* @r4, align 4
  %v3_13650 = sub i32 %v2_13650, %v1_13650
  %v3_13654 = add i32 %v3_13650, %v4_1364c
  store i32 %v3_13654, i32* %r3.global-to-local, align 4
  store i32 %v3_13654, i32* %v3_1364c, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_13648, %bb161
  %v0_1365c = load i32, i32* @r4, align 4
  %v1_1365c = urem i32 %v0_1365c, 8
  store i32 %v1_1365c, i32* %r3.global-to-local, align 4
  %v2_1365c = icmp eq i32 %v1_1365c, 0
  br i1 %v2_1365c, label %.thread44, label %bb162

bb162:                                            ; preds = %.thread43
  %v2_13660 = sub nsw i32 8, %v1_1365c
  store i32 %v2_13660, i32* %r3.global-to-local, align 4
  %v3_13664 = add i32 %v2_13660, %v0_1365c
  store i32 %v3_13664, i32* @r7, align 4
  br label %.thread44

.thread44:                                        ; preds = %.thread43, %bb162
  %v0_1366c = phi i32 [ 0, %.thread43 ], [ %v2_13660, %bb162 ]
  %v1_13668 = load i32, i32* @r5, align 4
  %v2_13668 = add i32 %v1_13668, %v0_1365c
  store i32 %v2_13668, i32* @r6, align 4
  %v1_1366c = load i32, i32* @r8, align 4
  %v2_1366c = add i32 %v2_13668, %v0_1366c
  %v2_13670 = add i32 %v2_1366c, %v1_1366c
  store i32 %v2_13670, i32* %r1.global-to-local, align 4
  %v1_13674 = load i32, i32* %sb.global-to-local, align 4
  %v2_13674 = add i32 %v1_13674, %v2_13670
  %v1_13678 = load i32, i32* %fp.global-to-local, align 4
  %v2_13678 = and i32 %v1_13678, %v2_13674
  store i32 %v2_13678, i32* %r2.global-to-local, align 4
  %v2_1367c = sub i32 0, %v2_13668
  store i32 %v2_1367c, i32* %r3.global-to-local, align 4
  %v2_13680 = sub i32 %v2_13678, %v2_13668
  store i32 %v2_13680, i32* @r5, align 4
  store i32 %v2_13680, i32* %r0.global-to-local, align 4
  br i1 %v2_1365c, label %bb163, label %bb164

bb163:                                            ; preds = %.thread44
  store i32 %v0_1365c, i32* @r7, align 4
  br label %bb164

bb164:                                            ; preds = %.thread44, %bb163
  %v1_1368c = call i32 @function_152a4(i32 %v2_13680)
  store i32 %v1_1368c, i32* %r0.global-to-local, align 4
  %v3_13690 = icmp eq i32 %v1_1368c, -1
  br i1 %v3_13690, label %dec_label_pc_13698, label %dec_label_pc_136a8

dec_label_pc_13698:                               ; preds = %bb164
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_1369c = call i32 @function_152a4(i32 0)
  store i32 %v1_1369c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_13700

dec_label_pc_136a8:                               ; preds = %bb164
  %v1_136a8 = load i32, i32* @r4, align 4
  %v3_136a8 = icmp ult i32 %v1_1368c, %v1_136a8
  br i1 %v3_136a8, label %dec_label_pc_136b0, label %dec_label_pc_13700

dec_label_pc_136b0:                               ; preds = %dec_label_pc_136a8
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 131404, i32* %r0.global-to-local, align 4
  %v4_136b8 = load i32, i32* inttoptr (i32 131436 to i32*), align 4
  store i32 %v4_136b8, i32* %r2.global-to-local, align 4
  %v1_136bc = add i32 %v4_136b8, 864
  %v2_136bc = inttoptr i32 %v1_136bc to i32*
  %v3_136bc = load i32, i32* %v2_136bc, align 4
  %v0_136c0 = load i32, i32* @r6, align 4
  store i32 %v0_136c0, i32* %r0.global-to-local, align 4
  %v1_136c4 = and i32 %v3_136bc, -2
  store i32 %v1_136c4, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_136c4, i32* %v2_136bc, align 4
  br label %dec_label_pc_13700

dec_label_pc_136d4:                               ; preds = %.thread40
  %v0_136d4 = load i32, i32* %r0.global-to-local, align 4
  %v3_136d4 = icmp eq i32 %v0_136d4, -1
  br i1 %v3_136d4, label %dec_label_pc_136dc, label %dec_label_pc_136f8

dec_label_pc_136dc:                               ; preds = %dec_label_pc_136d4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_136e0 = call i32 @function_152a4(i32 0)
  store i32 %v1_136e0, i32* %r0.global-to-local, align 4
  %v0_136e4 = load i32, i32* @r7, align 4
  %v1_136e4 = add i32 %v0_136e4, 872
  %v2_136e4 = inttoptr i32 %v1_136e4 to i32*
  %v3_136e4 = load i32, i32* %v2_136e4, align 4
  store i32 %v3_136e4, i32* %r2.global-to-local, align 4
  %v0_136e8 = load i32, i32* @r4, align 4
  %v0_136ec = load i32, i32* @r5, align 4
  %v2_136e8 = add i32 %v3_136e4, %v1_136e0
  %v2_136ec = sub i32 %v2_136e8, %v0_136e8
  %v2_136f0 = sub i32 %v2_136ec, %v0_136ec
  store i32 %v2_136f0, i32* %r3.global-to-local, align 4
  store i32 %v2_136f0, i32* %v2_136e4, align 4
  %v0_136fc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_136f8

dec_label_pc_136f8:                               ; preds = %dec_label_pc_136d4, %dec_label_pc_136dc
  %v0_136fc = phi i32 [ 0, %dec_label_pc_136d4 ], [ %v0_136fc.pre, %dec_label_pc_136dc ]
  %v0_136f8 = load i32, i32* @r4, align 4
  store i32 %v0_136f8, i32* @r7, align 4
  store i32 %v0_136fc, i32* @r5, align 4
  br label %dec_label_pc_13700

dec_label_pc_13700:                               ; preds = %dec_label_pc_136a8, %dec_label_pc_136b0, %dec_label_pc_13698, %dec_label_pc_136f8
  %v0_13700 = load i32, i32* %r0.global-to-local, align 4
  %v7_13700 = icmp eq i32 %v0_13700, -1
  br i1 %v7_13700, label %dec_label_pc_13784, label %dec_label_pc_13708

dec_label_pc_13708:                               ; preds = %dec_label_pc_13700
  %v1_13708 = load i32, i32* @r5, align 4
  %v2_13708 = add i32 %v1_13708, %v0_13700
  %v0_1370c = load i32, i32* @r7, align 4
  %v2_1370c = sub i32 %v2_13708, %v0_1370c
  %v1_13710 = or i32 %v2_1370c, 1
  %v2_13714 = add i32 %v0_1370c, 4
  %v3_13714 = inttoptr i32 %v2_13714 to i32*
  store i32 %v1_13710, i32* %v3_13714, align 4
  store i32 131404, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_13720 = load i32, i32* inttoptr (i32 131436 to i32*), align 4
  store i32 %v4_13720, i32* @r6, align 4
  %v1_13724 = add i32 %v4_13720, 872
  %v2_13724 = inttoptr i32 %v1_13724 to i32*
  %v3_13724 = load i32, i32* %v2_13724, align 4
  %v0_13728 = load i32, i32* @r8, align 4
  %v2_13728 = icmp eq i32 %v0_13728, 0
  %v0_1372c = load i32, i32* @r5, align 4
  %v2_1372c = add i32 %v0_1372c, %v3_13724
  store i32 %v2_1372c, i32* %r3.global-to-local, align 4
  store i32 %v2_1372c, i32* %v2_13724, align 4
  %v0_13734 = load i32, i32* @r7, align 4
  %v1_13734 = load i32, i32* @r6, align 4
  %v2_13734 = add i32 %v1_13734, 44
  %v3_13734 = inttoptr i32 %v2_13734 to i32*
  store i32 %v0_13734, i32* %v3_13734, align 4
  br i1 %v2_13728, label %dec_label_pc_13784, label %dec_label_pc_1373c

dec_label_pc_1373c:                               ; preds = %dec_label_pc_13708
  %v0_13740 = load i32, i32* @r8, align 4
  %v1_13740 = add i32 %v0_13740, -12
  %v1_13744 = and i32 %v1_13740, -8
  store i32 %v3_1350c, i32* %ip.global-to-local, align 4
  %v2_1374c = add i32 %v1_13744, %v3_1350c
  store i32 %v2_1374c, i32* %r1.global-to-local, align 4
  %v2_13750 = icmp ugt i32 %v1_13744, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_13758 = or i32 %v1_13744, 1
  store i32 %v1_13758, i32* %r3.global-to-local, align 4
  store i32 %v1_13758, i32* %v2_13518, align 4
  %v0_13760 = load i32, i32* %r2.global-to-local, align 4
  %v1_13760 = load i32, i32* %r1.global-to-local, align 4
  %v2_13760 = add i32 %v1_13760, 8
  %v3_13760 = inttoptr i32 %v2_13760 to i32*
  store i32 %v0_13760, i32* %v3_13760, align 4
  %v0_13764 = load i32, i32* %r2.global-to-local, align 4
  %v1_13764 = load i32, i32* %r1.global-to-local, align 4
  %v2_13764 = add i32 %v1_13764, 4
  %v3_13764 = inttoptr i32 %v2_13764 to i32*
  store i32 %v0_13764, i32* %v3_13764, align 4
  br i1 %v2_13750, label %dec_label_pc_1376c, label %dec_label_pc_13784

dec_label_pc_1376c:                               ; preds = %dec_label_pc_1373c
  %v0_1376c = load i32, i32* @r6, align 4
  %v1_1376c = add i32 %v0_1376c, 836
  %v2_1376c = inttoptr i32 %v1_1376c to i32*
  %v3_1376c = load i32, i32* %v2_1376c, align 4
  store i32 %v3_1376c, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_13774 = load i32, i32* %ip.global-to-local, align 4
  %v1_13774 = add i32 %v0_13774, 8
  store i32 %v1_13774, i32* @r0, align 4
  store i32 -1, i32* %v2_1376c, align 4
  %v0_1377c = call i32 @function_13f98()
  store i32 %v0_1377c, i32* %r0.global-to-local, align 4
  %v0_13780 = load i32, i32* @r4, align 4
  %v1_13780 = load i32, i32* @r6, align 4
  %v2_13780 = add i32 %v1_13780, 836
  %v3_13780 = inttoptr i32 %v2_13780 to i32*
  store i32 %v0_13780, i32* %v3_13780, align 4
  br label %dec_label_pc_13784

dec_label_pc_13784:                               ; preds = %.thread34, %dec_label_pc_1373c, %dec_label_pc_13708, %dec_label_pc_13700, %dec_label_pc_1376c
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 131404, i32* %r0.global-to-local, align 4
  %v4_1378c = load i32, i32* inttoptr (i32 131436 to i32*), align 4
  store i32 %v4_1378c, i32* %lr.global-to-local, align 4
  %v1_13790 = add i32 %v4_1378c, 872
  store i32 %v1_13790, i32* %r1.global-to-local, align 4
  %v1_13794 = inttoptr i32 %v1_13790 to i32*
  %v2_13794 = load i32, i32* %v1_13794, align 4
  store i32 %v2_13794, i32* %r1.global-to-local, align 4
  %v3_13794 = add i32 %v4_1378c, 876
  %v4_13794 = inttoptr i32 %v3_13794 to i32*
  %v5_13794 = load i32, i32* %v4_13794, align 4
  store i32 %v5_13794, i32* %r3.global-to-local, align 4
  %v1_1379c = add i32 %v4_1378c, 868
  %v2_1379c = inttoptr i32 %v1_1379c to i32*
  %v3_1379c = load i32, i32* %v2_1379c, align 4
  store i32 %v3_1379c, i32* %r3.global-to-local, align 4
  %v1_137a0 = add i32 %v4_1378c, 884
  %v2_137a0 = inttoptr i32 %v1_137a0 to i32*
  %v3_137a0 = load i32, i32* %v2_137a0, align 4
  store i32 %v3_137a0, i32* %r2.global-to-local, align 4
  %v2_137a4 = add i32 %v3_1379c, %v2_13794
  store i32 %v2_137a4, i32* %r3.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_13794, %v5_13794
  br i1 %tmp215, label %bb165, label %bb166

bb165:                                            ; preds = %dec_label_pc_13784
  store i32 %v2_13794, i32* %v4_13794, align 4
  %v0_137ac.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_137ac.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb166

bb166:                                            ; preds = %dec_label_pc_13784, %bb165
  %v1_137ac = phi i32 [ %v3_137a0, %dec_label_pc_13784 ], [ %v1_137ac.pre, %bb165 ]
  %v4_137b0 = phi i32 [ %v2_137a4, %dec_label_pc_13784 ], [ %v0_137ac.pre, %bb165 ]
  %tmp216 = icmp ugt i32 %v4_137b0, %v1_137ac
  br i1 %tmp216, label %bb167, label %bb168

bb167:                                            ; preds = %bb166
  %v5_137b0 = load i32, i32* %lr.global-to-local, align 4
  %v6_137b0 = add i32 %v5_137b0, 884
  %v7_137b0 = inttoptr i32 %v6_137b0 to i32*
  store i32 %v4_137b0, i32* %v7_137b0, align 4
  br label %bb168

bb168:                                            ; preds = %bb166, %bb167
  %v0_137b4 = load i32, i32* %lr.global-to-local, align 4
  %v1_137b4 = add i32 %v0_137b4, 44
  %v2_137b4 = inttoptr i32 %v1_137b4 to i32*
  %v3_137b4 = load i32, i32* %v2_137b4, align 4
  store i32 %v3_137b4, i32* %ip.global-to-local, align 4
  %v1_137b8 = add i32 %v3_137b4, 4
  %v2_137b8 = inttoptr i32 %v1_137b8 to i32*
  %v3_137b8 = load i32, i32* %v2_137b8, align 4
  store i32 %v1_133cc, i32* %r1.global-to-local, align 4
  %v1_137c0 = and i32 %v3_137b8, -4
  store i32 %v1_137c0, i32* %r3.global-to-local, align 4
  %v3_137c4 = icmp ult i32 %v1_137c0, %v1_133cc
  br i1 %v3_137c4, label %dec_label_pc_137f0, label %dec_label_pc_137cc

dec_label_pc_137cc:                               ; preds = %bb168
  %v0_137cc = load i32, i32* @sl, align 4
  %v2_137cc = sub i32 %v1_137c0, %v0_137cc
  %v2_137d0 = add i32 %v0_137cc, %v3_137b4
  store i32 %v2_137d0, i32* %r1.global-to-local, align 4
  %v1_137d4 = or i32 %v2_137cc, 1
  store i32 %v1_137d4, i32* %r3.global-to-local, align 4
  %v1_137d8 = or i32 %v0_137cc, 1
  store i32 %v1_137d8, i32* %r2.global-to-local, align 4
  %v1_137dc = add i32 %v3_137b4, 8
  store i32 %v1_137dc, i32* %r0.global-to-local, align 4
  store i32 %v1_137d8, i32* %v2_137b8, align 4
  %v0_137e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_137e4 = load i32, i32* %lr.global-to-local, align 4
  %v2_137e4 = add i32 %v1_137e4, 44
  %v3_137e4 = inttoptr i32 %v2_137e4 to i32*
  store i32 %v0_137e4, i32* %v3_137e4, align 4
  %v0_137e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_137e8 = load i32, i32* %r1.global-to-local, align 4
  %v2_137e8 = add i32 %v1_137e8, 4
  %v3_137e8 = inttoptr i32 %v2_137e8 to i32*
  store i32 %v0_137e8, i32* %v3_137e8, align 4
  br label %dec_label_pc_13800

dec_label_pc_137f0:                               ; preds = %bb157, %bb168, %dec_label_pc_135cc
  %v0_137f0 = call i32 @function_128f8()
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_137f8 = inttoptr i32 %v0_137f0 to i32*
  store i32 12, i32* %v2_137f8, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13800

dec_label_pc_13800:                               ; preds = %bb151, %bb150, %dec_label_pc_137cc, %dec_label_pc_13414, %dec_label_pc_137f0
  %v0_13800 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_13800, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13804

dec_label_pc_13804:                               ; preds = %.thread1, %dec_label_pc_133e0, %.thread121, %dec_label_pc_13250, %dec_label_pc_13244, %dec_label_pc_130ac, %dec_label_pc_13030, %dec_label_pc_13800
  store i32 %v2_12f58, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* @r3, align 4
  store i32 131404, i32* %r2.global-to-local, align 4
  %v4_13814 = load i32, i32* inttoptr (i32 131428 to i32*), align 4
  store i32 %v4_13814, i32* @ip, align 4
  store i32 79904, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13814)
  br label %dec_label_pc_13820

dec_label_pc_13820:                               ; preds = %dec_label_pc_12f90, %dec_label_pc_13804
  %v0_13820 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13820, i32* %r0.global-to-local, align 4
  store i32 %v3_12f2c, i32* @r4, align 4
  store i32 %v6_12f2c, i32* @r5, align 4
  store i32 %v9_12f2c, i32* @r6, align 4
  store i32 %v12_12f2c, i32* @r7, align 4
  store i32 %v15_12f2c, i32* @r8, align 4
  store i32 %v18_12f2c, i32* @sb, align 4
  store i32 %v21_12f2c, i32* @sl, align 4
  store i32 %v24_12f2c, i32* @fp, align 4
  store i32 %v27_12f2c, i32* @lr, align 4
  ret i32 %v0_13820

; uselistorder directives
  uselistorder i32 %v0_137cc, { 1, 0, 2 }
  uselistorder i32 %v3_137b4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_137b0, { 1, 0 }
  uselistorder i32 %v2_13794, { 2, 0, 1, 3 }
  uselistorder i32 %v4_1378c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_13744, { 1, 2, 0 }
  uselistorder i32 %v0_1370c, { 1, 0 }
  uselistorder i32 %v0_13700, { 1, 0 }
  uselistorder i32 %v2_136f0, { 1, 0 }
  uselistorder i32 %v2_13680, { 2, 1, 0 }
  uselistorder i32 %v2_13668, { 1, 2, 0, 3 }
  uselistorder i32 %v2_13660, { 1, 0, 2 }
  uselistorder i32 %v1_1365c, { 2, 1, 0 }
  uselistorder i32 %v0_1365c, { 3, 1, 2, 0 }
  uselistorder i32 %v1_13640, { 1, 0 }
  uselistorder i32 %v2_13618, { 1, 0 }
  uselistorder i32 %v3_1360c, { 1, 0, 2 }
  uselistorder i32 %v2_135ec, { 1, 0, 2 }
  uselistorder i32* %v2_135e4, { 1, 0, 2 }
  uselistorder i32 %v0_135cc, { 1, 0 }
  uselistorder i32 %v6_135a8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_13594, { 2, 1, 0 }
  uselistorder i32 %v0_1357c, { 1, 0 }
  uselistorder i32 %v2_13538, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13534, { 1, 0 }
  uselistorder i32 %v3_1350c, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_134ec, { 1, 0, 2 }
  uselistorder i32 %v2_134d4, { 1, 2, 0, 3 }
  uselistorder i32 %v1_1347c, { 2, 1, 0 }
  uselistorder i32 %v6_13470, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_1344c, { 2, 1, 0, 3 }
  uselistorder i32 %v3_1340c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_133cc, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_133c4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_133c0, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_133ac, { 1, 0 }
  uselistorder i32 %v7_1336c, { 1, 0 }
  uselistorder i32 %v4_1336c, { 1, 0 }
  uselistorder i32 %v0_1333c, { 1, 0 }
  uselistorder i32 %v2_13310, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_1330c54, { 1, 0 }
  uselistorder i32 %v1_132d8, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_132c0., { 1, 2, 0 }
  uselistorder i32 %v0_132c8, { 0, 1, 3, 2 }
  uselistorder i32 %v1_132c8, { 1, 0 }
  uselistorder i32 %v3_132a8, { 1, 0 }
  uselistorder i32 %v4_132a4, { 1, 0, 2 }
  uselistorder i32 %v1_13214, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1326c, { 1, 0 }
  uselistorder i32 %v1_13250, { 1, 0 }
  uselistorder i32 %v1_130f0, { 1, 0 }
  uselistorder i32 %v0_13230, { 2, 0, 1, 3 }
  uselistorder i32 %v3_131f8, { 2, 0, 1, 3 }
  uselistorder i32 %v0_1328c.pre, { 1, 2, 0 }
  uselistorder i32 %v0_131d4, { 2, 1, 0 }
  uselistorder i32 %v3_131c8, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_130e8, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_13190, { 1, 0 }
  uselistorder i32 %v3_13184, { 1, 0 }
  uselistorder i32 %v0_13190, { 1, 0 }
  uselistorder i32 %v3_13168, { 0, 2, 3, 1 }
  uselistorder i32 %v2_13158, { 1, 0, 2 }
  uselistorder i32 %v3_13110, { 2, 1, 0 }
  uselistorder i32 %v0_13100, { 3, 2, 1, 0 }
  uselistorder i32 %v0_130d0, { 1, 0 }
  uselistorder i32 %v1_13084, { 2, 1, 0, 3 }
  uselistorder i32 %v0_13080, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_13024, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_13018, { 1, 0 }
  uselistorder i32 %v3_12fe8, { 1, 0 }
  uselistorder i32 %v0_12fdc, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_12fbc, { 0, 2, 1, 3 }
  uselistorder i1 %v7_12fb0, { 1, 0 }
  uselistorder i32 %v0_12f88, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 0 }
  uselistorder i32* %r4.global-to-local, { 13, 0, 1, 2, 3, 4, 6, 5, 8, 9, 7, 10, 11, 12, 14, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 40, 41, 42, 44, 45, 46, 47, 0, 1, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 81, 89, 76, 77, 78, 79, 80, 82, 83, 84, 85, 109, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 50, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 47, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 25, 2, 4, 5, 57, 17, 9, 6, 18, 7, 8, 11, 10, 15, 12, 19, 14, 13, 20, 16, 56, 22, 21, 23, 55, 24, 26, 30, 27, 28, 0, 29, 31, 32, 33, 34, 37, 38, 35, 36, 43, 40, 39, 41, 42, 44, 54, 45, 46, 47, 48, 53, 49, 52, 51, 50 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 36, 35, 28, 25, 1, 26, 27, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_15018, { 1, 0 }
  uselistorder i32 34, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @function_12eb4, { 1, 0 }
  uselistorder label %dec_label_pc_13820, { 1, 0 }
  uselistorder label %dec_label_pc_13804, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_13800, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_137f0, { 1, 2, 0 }
  uselistorder label %bb168, { 1, 0 }
  uselistorder label %bb166, { 1, 0 }
  uselistorder label %dec_label_pc_13784, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_13700, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_136f8, { 1, 0 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %.thread44, { 1, 0 }
  uselistorder label %.thread43, { 1, 0 }
  uselistorder label %.thread40, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_135cc, { 1, 0 }
  uselistorder label %.thread32, { 1, 0 }
  uselistorder label %bb157, { 1, 0 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %dec_label_pc_13500, { 2, 0, 3, 1 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %.thread27, { 1, 0 }
  uselistorder label %dec_label_pc_133b8, { 0, 2, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb144, { 1, 0 }
  uselistorder label %dec_label_pc_1330c, { 1, 0 }
  uselistorder label %dec_label_pc_13314.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_132d8, { 1, 0 }
  uselistorder label %dec_label_pc_1328c, { 1, 0 }
  uselistorder label %dec_label_pc_13220, { 1, 0 }
  uselistorder label %dec_label_pc_1321c, { 1, 0 }
  uselistorder label %dec_label_pc_131c8, { 1, 0 }
  uselistorder label %dec_label_pc_131b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1317c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_13168, { 1, 0 }
  uselistorder label %bb140, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
}

define i32 @function_13834(i32 %arg1) local_unnamed_addr {
dec_label_pc_13834:
  %v0_13834 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13834, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_13834
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_13834, %bb
  %v10_13848 = phi i32 [ %arg1, %dec_label_pc_13834 ], [ 0, %bb ]
  ret i32 %v10_13848

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_1384c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1384c:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_1384c = load i32, i32* @r4, align 4
  %v6_1384c = load i32, i32* @r5, align 4
  %v9_1384c = load i32, i32* @r6, align 4
  %v12_1384c = load i32, i32* @lr, align 4
  %v2_13854 = icmp eq i32 %arg1, 0
  store i32 131404, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_13864 = mul i32 %arg2, %arg1
  store i32 %v2_13864, i32* @r6, align 4
  br i1 %v2_13854, label %dec_label_pc_13894, label %dec_label_pc_1386c

dec_label_pc_1386c:                               ; preds = %dec_label_pc_1384c
  store i32 %arg1, i32* @r1, align 4
  store i32 %v2_13864, i32* @r0, align 4
  %v0_13874 = call i32 @function_11e5c()
  %v0_13878 = load i32, i32* @r4, align 4
  %v9_13878 = icmp eq i32 %v0_13878, %v0_13874
  br i1 %v9_13878, label %dec_label_pc_1386c.dec_label_pc_13894_crit_edge, label %dec_label_pc_13880

dec_label_pc_1386c.dec_label_pc_13894_crit_edge:  ; preds = %dec_label_pc_1386c
  %v0_13898.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13894

dec_label_pc_13880:                               ; preds = %dec_label_pc_1386c
  %v0_13880 = call i32 @function_128f8()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_1388c = inttoptr i32 %v0_13880 to i32*
  store i32 12, i32* %v2_1388c, align 4
  br label %dec_label_pc_13958

dec_label_pc_13894:                               ; preds = %dec_label_pc_1386c.dec_label_pc_13894_crit_edge, %dec_label_pc_1384c
  %v0_138b0 = phi i32 [ %v0_13898.pre, %dec_label_pc_1386c.dec_label_pc_13894_crit_edge ], [ 131404, %dec_label_pc_1384c ]
  %v2_13898 = add i32 %v0_138b0, 68
  %v3_13898 = inttoptr i32 %v2_13898 to i32*
  %v4_13898 = load i32, i32* %v3_13898, align 4
  store i32 %v4_13898, i32* @r4, align 4
  %v2_138b0 = add i32 %v0_138b0, 72
  %v3_138b0 = inttoptr i32 %v2_138b0 to i32*
  %v4_138b0 = load i32, i32* %v3_138b0, align 4
  store i32 %v4_138b0, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_138b0)
  %v0_138c4 = load i32, i32* @r5, align 4
  %v2_138c4 = add i32 %v0_138c4, 16
  %v3_138c4 = inttoptr i32 %v2_138c4 to i32*
  %v4_138c4 = load i32, i32* %v3_138c4, align 4
  store i32 %v4_138c4, i32* %ip.global-to-local, align 4
  store i32 80080, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_138c4)
  %v0_138d0 = load i32, i32* @r6, align 4
  store i32 %v0_138d0, i32* @r0, align 4
  %v0_138d4 = call i32 @function_12f2c()
  store i32 %v0_138d4, i32* %r4.global-to-local, align 4
  %v2_138d8 = icmp eq i32 %v0_138d4, 0
  br i1 %v2_138d8, label %.thread, label %dec_label_pc_138e0

dec_label_pc_138e0:                               ; preds = %dec_label_pc_13894
  %v1_138e0 = add i32 %v0_138d4, -4
  %v2_138e0 = inttoptr i32 %v1_138e0 to i32*
  %v3_138e0 = load i32, i32* %v2_138e0, align 4
  %v1_138e4 = and i32 %v3_138e0, 2
  %v2_138e4 = icmp eq i32 %v1_138e4, 0
  br i1 %v2_138e4, label %dec_label_pc_138ec, label %.thread

dec_label_pc_138ec:                               ; preds = %dec_label_pc_138e0
  %v1_138ec7 = add i32 %v3_138e0, -4
  %v1_138f0 = and i32 %v1_138ec7, -4
  store i32 %v1_138f0, i32* @r2, align 4
  %v3_138f4 = udiv i32 %v1_138f0, 4
  store i32 %v3_138f4, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_138f0, 36
  %v2_138fc = icmp ult i32 %v1_138f0, 33
  %v3_138fc = or i1 %tmp, %v2_138fc
  br i1 %v3_138fc, label %dec_label_pc_13908, label %dec_label_pc_13900

dec_label_pc_13900:                               ; preds = %dec_label_pc_138ec
  %v2_13900 = inttoptr i32 %v0_138d4 to i8*
  %v3_13900 = call i32 @function_12950(i8* %v2_13900, i32 0)
  br label %.thread

dec_label_pc_13908:                               ; preds = %dec_label_pc_138ec
  %tmp8 = icmp eq i32 %v1_138f0, 16
  %v2_1390c = inttoptr i32 %v0_138d4 to i32*
  store i32 0, i32* %v2_1390c, align 4
  %v1_13910 = load i32, i32* %r4.global-to-local, align 4
  %v2_13910 = add i32 %v1_13910, 4
  %v3_13910 = inttoptr i32 %v2_13910 to i32*
  store i32 0, i32* %v3_13910, align 4
  %v1_13914 = load i32, i32* %r4.global-to-local, align 4
  %v2_13914 = add i32 %v1_13914, 8
  %v3_13914 = inttoptr i32 %v2_13914 to i32*
  store i32 0, i32* %v3_13914, align 4
  %v2_13918 = icmp ult i32 %v1_138f0, 13
  %v3_13918 = or i1 %tmp8, %v2_13918
  br i1 %v3_13918, label %.thread, label %dec_label_pc_1391c

dec_label_pc_1391c:                               ; preds = %dec_label_pc_13908
  %v0_1391c = load i32, i32* %ip.global-to-local, align 4
  %v1_13920 = load i32, i32* %r4.global-to-local, align 4
  %v2_13920 = add i32 %v1_13920, 12
  %v3_13920 = inttoptr i32 %v2_13920 to i32*
  store i32 0, i32* %v3_13920, align 4
  %v1_13924 = load i32, i32* %r4.global-to-local, align 4
  %v2_13924 = add i32 %v1_13924, 16
  %v3_13924 = inttoptr i32 %v2_13924 to i32*
  store i32 0, i32* %v3_13924, align 4
  %tmp9 = icmp ult i32 %v0_1391c, 7
  br i1 %tmp9, label %.thread, label %dec_label_pc_1392c

dec_label_pc_1392c:                               ; preds = %dec_label_pc_1391c
  %v0_1392c = load i32, i32* %ip.global-to-local, align 4
  %v7_1392c = icmp eq i32 %v0_1392c, 9
  %v1_13930 = load i32, i32* %r4.global-to-local, align 4
  %v2_13930 = add i32 %v1_13930, 20
  %v3_13930 = inttoptr i32 %v2_13930 to i32*
  store i32 0, i32* %v3_13930, align 4
  %v1_13934 = load i32, i32* %r4.global-to-local, align 4
  %v2_13934 = add i32 %v1_13934, 24
  %v3_13934 = inttoptr i32 %v2_13934 to i32*
  store i32 0, i32* %v3_13934, align 4
  br i1 %v7_1392c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_1392c
  %v2_13938 = load i32, i32* %r4.global-to-local, align 4
  %v3_13938 = add i32 %v2_13938, 32
  %v4_13938 = inttoptr i32 %v3_13938 to i32*
  store i32 0, i32* %v4_13938, align 4
  %v2_1393c = load i32, i32* %r4.global-to-local, align 4
  %v3_1393c = add i32 %v2_1393c, 28
  %v4_1393c = inttoptr i32 %v3_1393c to i32*
  store i32 0, i32* %v4_1393c, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1392c, %dec_label_pc_138e0, %dec_label_pc_1391c, %dec_label_pc_13908, %dec_label_pc_13894, %dec_label_pc_13900, %bb
  %v0_1394c = load i32, i32* @r5, align 4
  %v2_1394c = add i32 %v0_1394c, 24
  %v3_1394c = inttoptr i32 %v2_1394c to i32*
  %v4_1394c = load i32, i32* %v3_1394c, align 4
  store i32 %v4_1394c, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_1394c)
  br label %dec_label_pc_13958

dec_label_pc_13958:                               ; preds = %dec_label_pc_13880, %.thread
  %v0_13958 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_1384c, i32* @r4, align 4
  store i32 %v6_1384c, i32* @r5, align 4
  store i32 %v9_1384c, i32* @r6, align 4
  store i32 %v12_1384c, i32* @lr, align 4
  ret i32 %v0_13958

; uselistorder directives
  uselistorder i32 %v1_138f0, { 0, 5, 1, 4, 3, 2 }
  uselistorder i32 %v0_138d4, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i32 33, { 0, 2, 7, 3, 8, 4, 9, 5, 10, 11, 6, 1 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13958, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_1396c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1396c:
  %v0_1396c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1396c, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_1396c
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_1396c, %bb
  %v10_1397c = phi i32 [ %arg1, %dec_label_pc_1396c ], [ 0, %bb ]
  ret i32 %v10_1397c

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @function_13980(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13980:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_13980 = load i32, i32* @r4, align 4
  %v6_13980 = load i32, i32* @r5, align 4
  %v9_13980 = load i32, i32* @r6, align 4
  %v12_13980 = load i32, i32* @r7, align 4
  %v15_13980 = load i32, i32* @r8, align 4
  %v18_13980 = load i32, i32* @sb, align 4
  %v21_13980 = load i32, i32* @sl, align 4
  %v24_13980 = load i32, i32* @fp, align 4
  %v27_13980 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_1398c = icmp eq i32* %arg1, null
  store i32 add (i32 ptrtoint (i32* @global_var_c7b4.511 to i32), i32 80280), i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_1398c, label %dec_label_pc_139a0, label %dec_label_pc_139b0

dec_label_pc_139a0:                               ; preds = %dec_label_pc_13980
  store i32 %arg2, i32* @r0, align 4
  %v0_139a4 = call i32 @function_12f2c()
  store i32 %v0_139a4, i32* %r0.global-to-local, align 4
  store i32 %v0_139a4, i32* @r4, align 4
  br label %dec_label_pc_13d08

dec_label_pc_139b0:                               ; preds = %dec_label_pc_13980
  %v2_139b0 = icmp eq i32 %arg2, 0
  br i1 %v2_139b0, label %dec_label_pc_139b8, label %dec_label_pc_139c4

dec_label_pc_139b8:                               ; preds = %dec_label_pc_139b0
  %v0_139b8 = call i32 @function_13f98()
  store i32 %v0_139b8, i32* %r0.global-to-local, align 4
  %v0_139bc = load i32, i32* @r6, align 4
  store i32 %v0_139bc, i32* @r4, align 4
  br label %dec_label_pc_13d08

dec_label_pc_139c4:                               ; preds = %dec_label_pc_139b0
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_139cc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c7b4.511 to i32), i32 80348) to i32*), align 4
  store i32 %v4_139cc, i32* @r4, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_139cc, i32* %r2.global-to-local, align 4
  %v4_139d8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c7b4.511 to i32), i32 80316) to i32*), align 4
  store i32 %v4_139d8, i32* %r1.global-to-local, align 4
  %v2_139dc = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_139dc, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_139e4 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c7b4.511 to i32), i32 80352) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_139e4)
  %v0_139f0 = load i32, i32* @r4, align 4
  store i32 %v0_139f0, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_c7b4.511 to i32), i32 80280), i32* %r1.global-to-local, align 4
  %v4_139fc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c7b4.511 to i32), i32 80296) to i32*), align 4
  store i32 %v4_139fc, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_13a08.516 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_139fc)
  %v0_13a08 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_13a08, -32
  br i1 %tmp36, label %dec_label_pc_13a24, label %dec_label_pc_13a10

dec_label_pc_13a10:                               ; preds = %dec_label_pc_139c4
  %v0_13a10 = call i32 @function_128f8()
  store i32 %v0_13a10, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_13a1c = inttoptr i32 %v0_13a10 to i32*
  store i32 12, i32* %v2_13a1c, align 4
  br label %dec_label_pc_13d08

dec_label_pc_13a24:                               ; preds = %dec_label_pc_139c4
  %v1_13a24 = add i32 %v0_13a08, 11
  store i32 %v1_13a24, i32* %r0.global-to-local, align 4
  %v0_13a28 = load i32, i32* @r5, align 4
  %v1_13a28 = add i32 %v0_13a28, -4
  %v2_13a28 = inttoptr i32 %v1_13a28 to i32*
  %v3_13a28 = load i32, i32* %v2_13a28, align 4
  store i32 %v3_13a28, i32* %r2.global-to-local, align 4
  %v2_13a2c = icmp ugt i32 %v1_13a24, 14
  %v7_13a2c = icmp eq i32 %v1_13a24, 15
  %v2_13a30 = xor i1 %v2_13a2c, true
  %v3_13a30 = or i1 %v7_13a2c, %v2_13a30
  br i1 %v3_13a30, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_13a24
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_13a24, %bb
  %v2_13a34 = xor i1 %v7_13a2c, true
  %v3_13a34 = and i1 %v2_13a2c, %v2_13a34
  br i1 %v3_13a34, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_13a34 = and i32 %v1_13a24, -8
  store i32 %v5_13a34, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_13a38 = and i32 %v3_13a28, 2
  %v2_13a38 = icmp eq i32 %v1_13a38, 0
  %v1_13a3c = add i32 %v0_13a28, -8
  store i32 %v1_13a3c, i32* @sl, align 4
  %v1_13a40 = and i32 %v3_13a28, -4
  store i32 %v1_13a40, i32* @r6, align 4
  br i1 %v2_13a38, label %dec_label_pc_13a48, label %dec_label_pc_13c20

dec_label_pc_13a48:                               ; preds = %bb29
  %v1_13a48 = load i32, i32* @sb, align 4
  %v3_13a48 = icmp ult i32 %v1_13a40, %v1_13a48
  br i1 %v3_13a48, label %dec_label_pc_13a54, label %bb30

bb30:                                             ; preds = %dec_label_pc_13a48
  store i32 %v1_13a40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13bb8

dec_label_pc_13a54:                               ; preds = %dec_label_pc_13a48
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_13a5c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c7b4.511 to i32), i32 80312) to i32*), align 4
  store i32 %v4_13a5c, i32* %r0.global-to-local, align 4
  %v1_13a60 = add i32 %v4_13a5c, 44
  %v2_13a60 = inttoptr i32 %v1_13a60 to i32*
  %v3_13a60 = load i32, i32* %v2_13a60, align 4
  store i32 %v3_13a60, i32* %r3.global-to-local, align 4
  %v2_13a64 = add i32 %v1_13a40, %v1_13a3c
  store i32 %v2_13a64, i32* @r4, align 4
  %v9_13a68 = icmp eq i32 %v2_13a64, %v3_13a60
  %v1_13a6c = add i32 %v2_13a64, 4
  %v2_13a6c = inttoptr i32 %v1_13a6c to i32*
  %v3_13a6c = load i32, i32* %v2_13a6c, align 4
  store i32 %v3_13a6c, i32* %r1.global-to-local, align 4
  br i1 %v9_13a68, label %dec_label_pc_13a74, label %dec_label_pc_13ab0

dec_label_pc_13a74:                               ; preds = %dec_label_pc_13a54
  %v1_13a74 = and i32 %v3_13a6c, -4
  %v2_13a78 = add i32 %v1_13a74, %v1_13a40
  store i32 %v2_13a78, i32* %r1.global-to-local, align 4
  %v1_13a7c = add i32 %v1_13a48, 16
  store i32 %v1_13a7c, i32* %r3.global-to-local, align 4
  %v3_13a80 = icmp ult i32 %v2_13a78, %v1_13a7c
  br i1 %v3_13a80, label %dec_label_pc_13b04, label %dec_label_pc_13a88

dec_label_pc_13a88:                               ; preds = %dec_label_pc_13a74
  %v2_13a88 = sub i32 %v2_13a78, %v1_13a48
  %v1_13a8c = urem i32 %v3_13a28, 2
  %v2_13a90 = add i32 %v1_13a48, %v1_13a3c
  store i32 %v2_13a90, i32* %r1.global-to-local, align 4
  %v2_13a94 = or i32 %v1_13a48, %v1_13a8c
  store i32 %v2_13a94, i32* %r2.global-to-local, align 4
  %v1_13a98 = or i32 %v2_13a88, 1
  store i32 %v1_13a98, i32* %r3.global-to-local, align 4
  store i32 %v0_13a28, i32* @r4, align 4
  store i32 %v2_13a94, i32* %v2_13a28, align 4
  %v0_13aa4 = load i32, i32* %r1.global-to-local, align 4
  %v1_13aa4 = load i32, i32* %r0.global-to-local, align 4
  %v2_13aa4 = add i32 %v1_13aa4, 44
  %v3_13aa4 = inttoptr i32 %v2_13aa4 to i32*
  store i32 %v0_13aa4, i32* %v3_13aa4, align 4
  %v0_13aa8 = load i32, i32* %r3.global-to-local, align 4
  %v1_13aa8 = load i32, i32* %r1.global-to-local, align 4
  %v2_13aa8 = add i32 %v1_13aa8, 4
  %v3_13aa8 = inttoptr i32 %v2_13aa8 to i32*
  store i32 %v0_13aa8, i32* %v3_13aa8, align 4
  br label %dec_label_pc_13cec

dec_label_pc_13ab0:                               ; preds = %dec_label_pc_13a54
  %v1_13ab0 = and i32 %v3_13a6c, -2
  %v2_13ab4 = add i32 %v1_13ab0, %v2_13a64
  store i32 %v2_13ab4, i32* %r3.global-to-local, align 4
  %v1_13ab8 = add i32 %v2_13ab4, 4
  %v2_13ab8 = inttoptr i32 %v1_13ab8 to i32*
  %v3_13ab8 = load i32, i32* %v2_13ab8, align 4
  store i32 %v3_13ab8, i32* %r3.global-to-local, align 4
  %v1_13abc = urem i32 %v3_13ab8, 2
  %v2_13abc = icmp eq i32 %v1_13abc, 0
  br i1 %v2_13abc, label %dec_label_pc_13ac4, label %dec_label_pc_13b04

dec_label_pc_13ac4:                               ; preds = %dec_label_pc_13ab0
  %v1_13ac4 = and i32 %v3_13a6c, -4
  store i32 %v1_13ac4, i32* %r3.global-to-local, align 4
  %v2_13ac8 = add i32 %v1_13ac4, %v1_13a40
  store i32 %v2_13ac8, i32* %r0.global-to-local, align 4
  %v3_13acc = icmp ult i32 %v2_13ac8, %v1_13a48
  br i1 %v3_13acc, label %dec_label_pc_13b04, label %dec_label_pc_13ad4

dec_label_pc_13ad4:                               ; preds = %dec_label_pc_13ac4
  %v1_13ad4 = add i32 %v1_13a40, %v0_13a28
  %v2_13ad4 = inttoptr i32 %v1_13ad4 to i32*
  %v3_13ad4 = load i32, i32* %v2_13ad4, align 4
  store i32 %v3_13ad4, i32* %r1.global-to-local, align 4
  %v1_13ad8 = add i32 %v3_13ad4, 12
  %v2_13ad8 = inttoptr i32 %v1_13ad8 to i32*
  %v3_13ad8 = load i32, i32* %v2_13ad8, align 4
  store i32 %v3_13ad8, i32* %r3.global-to-local, align 4
  %v9_13adc = icmp eq i32 %v3_13ad8, %v2_13a64
  %v1_13ae0 = add i32 %v2_13a64, 12
  %v2_13ae0 = inttoptr i32 %v1_13ae0 to i32*
  %v3_13ae0 = load i32, i32* %v2_13ae0, align 4
  store i32 %v3_13ae0, i32* %r2.global-to-local, align 4
  br i1 %v9_13adc, label %dec_label_pc_13ae8, label %dec_label_pc_13af4

dec_label_pc_13ae8:                               ; preds = %dec_label_pc_13ad4
  %v1_13ae8 = add i32 %v3_13ae0, 8
  %v2_13ae8 = inttoptr i32 %v1_13ae8 to i32*
  %v3_13ae8 = load i32, i32* %v2_13ae8, align 4
  store i32 %v3_13ae8, i32* %r3.global-to-local, align 4
  %v9_13aec = icmp eq i32 %v3_13ae8, %v2_13a64
  br i1 %v9_13aec, label %dec_label_pc_13af8, label %dec_label_pc_13af4

dec_label_pc_13af4:                               ; preds = %dec_label_pc_13ad4, %dec_label_pc_13ae8
  %v0_13af4 = call i32 @function_14214()
  store i32 %v0_13af4, i32* %r0.global-to-local, align 4
  %v0_13af8.pre = load i32, i32* @r1, align 4
  %v1_13af8.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_13af8

dec_label_pc_13af8:                               ; preds = %dec_label_pc_13ae8, %dec_label_pc_13af4
  %v1_13af8 = phi i32 [ %v3_13ae0, %dec_label_pc_13ae8 ], [ %v1_13af8.pre, %dec_label_pc_13af4 ]
  %v0_13af8 = phi i32 [ %v3_13ad4, %dec_label_pc_13ae8 ], [ %v0_13af8.pre, %dec_label_pc_13af4 ]
  %v2_13af8 = add i32 %v1_13af8, 8
  %v3_13af8 = inttoptr i32 %v2_13af8 to i32*
  store i32 %v0_13af8, i32* %v3_13af8, align 4
  %v0_13afc = load i32, i32* %r2.global-to-local, align 4
  %v1_13afc = load i32, i32* %r1.global-to-local, align 4
  %v2_13afc = add i32 %v1_13afc, 12
  %v3_13afc = inttoptr i32 %v2_13afc to i32*
  store i32 %v0_13afc, i32* %v3_13afc, align 4
  %v1_13bb8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13bb8

dec_label_pc_13b04:                               ; preds = %dec_label_pc_13a74, %dec_label_pc_13ac4, %dec_label_pc_13ab0
  %v1_13b04 = add i32 %v1_13a48, -7
  store i32 %v1_13b04, i32* @r0, align 4
  %v0_13b08 = call i32 @function_12f2c()
  store i32 %v0_13b08, i32* @r0, align 4
  store i32 %v0_13b08, i32* %r1.global-to-local, align 4
  %v2_13b0c = icmp eq i32 %v0_13b08, 0
  br i1 %v2_13b0c, label %bb31, label %dec_label_pc_13b18

bb31:                                             ; preds = %dec_label_pc_13b04
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_13cec

dec_label_pc_13b18:                               ; preds = %dec_label_pc_13b04
  %v1_13b20.pre = load i32, i32* @r4, align 4
  %v1_13b18 = add i32 %v0_13b08, -4
  %v2_13b18 = inttoptr i32 %v1_13b18 to i32*
  %v3_13b18 = load i32, i32* %v2_13b18, align 4
  store i32 %v3_13b18, i32* @r3, align 4
  %v1_13b1c = add i32 %v0_13b08, -8
  store i32 %v1_13b1c, i32* @r7, align 4
  %v9_13b20 = icmp eq i32 %v1_13b1c, %v1_13b20.pre
  br i1 %v9_13b20, label %.thread2, label %dec_label_pc_13b30

.thread2:                                         ; preds = %dec_label_pc_13b18
  %v2_13b24 = and i32 %v3_13b18, -4
  store i32 %v2_13b24, i32* %r3.global-to-local, align 4
  %v2_13b28 = load i32, i32* @r6, align 4
  %v3_13b28 = add i32 %v2_13b28, %v2_13b24
  store i32 %v3_13b28, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13bb8

dec_label_pc_13b30:                               ; preds = %dec_label_pc_13b18
  %v0_13b30 = load i32, i32* @r6, align 4
  %v1_13b30 = add i32 %v0_13b30, -4
  store i32 %v1_13b30, i32* @r2, align 4
  %v3_13b34 = udiv i32 %v1_13b30, 4
  store i32 %v3_13b34, i32* @ip, align 4
  %tmp37 = and i32 %v1_13b30, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_13b3c = icmp ult i32 %v1_13b30, 36
  %v3_13b3c = or i1 %tmp38, %v2_13b3c
  %v0_13b4c = load i32, i32* @r5, align 4
  br i1 %v3_13b3c, label %dec_label_pc_13b4c, label %dec_label_pc_13b40

dec_label_pc_13b40:                               ; preds = %dec_label_pc_13b30
  store i32 %v0_13b4c, i32* @r1, align 4
  %v0_13b44 = call i32 @function_12a00()
  store i32 %v0_13b44, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_13b4c:                               ; preds = %dec_label_pc_13b30
  %v1_13b4c = inttoptr i32 %v0_13b4c to i32*
  %v2_13b4c = load i32, i32* %v1_13b4c, align 4
  store i32 %v2_13b4c, i32* %r3.global-to-local, align 4
  %v2_13b50 = inttoptr i32 %v0_13b08 to i32*
  store i32 %v2_13b4c, i32* %v2_13b50, align 4
  %v0_13b54 = load i32, i32* @r5, align 4
  %v1_13b54 = add i32 %v0_13b54, 4
  %v2_13b54 = inttoptr i32 %v1_13b54 to i32*
  %v3_13b54 = load i32, i32* %v2_13b54, align 4
  store i32 %v3_13b54, i32* %r3.global-to-local, align 4
  %v1_13b58 = load i32, i32* %r1.global-to-local, align 4
  %v2_13b58 = add i32 %v1_13b58, 4
  %v3_13b58 = inttoptr i32 %v2_13b58 to i32*
  store i32 %v3_13b54, i32* %v3_13b58, align 4
  %v0_13b5c = load i32, i32* @r5, align 4
  %v1_13b5c = add i32 %v0_13b5c, 8
  %v2_13b5c = inttoptr i32 %v1_13b5c to i32*
  %v3_13b5c = load i32, i32* %v2_13b5c, align 4
  store i32 %v3_13b5c, i32* %r3.global-to-local, align 4
  %v0_13b60 = load i32, i32* @ip, align 4
  %v1_13b64 = load i32, i32* %r1.global-to-local, align 4
  %v2_13b64 = add i32 %v1_13b64, 8
  %v3_13b64 = inttoptr i32 %v2_13b64 to i32*
  store i32 %v3_13b5c, i32* %v3_13b64, align 4
  %tmp39 = icmp ult i32 %v0_13b60, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_13b6c

dec_label_pc_13b6c:                               ; preds = %dec_label_pc_13b4c
  %v0_13b6c = load i32, i32* @r5, align 4
  %v1_13b6c = add i32 %v0_13b6c, 12
  %v2_13b6c = inttoptr i32 %v1_13b6c to i32*
  %v3_13b6c = load i32, i32* %v2_13b6c, align 4
  store i32 %v3_13b6c, i32* %r3.global-to-local, align 4
  %v1_13b70 = load i32, i32* %r1.global-to-local, align 4
  %v2_13b70 = add i32 %v1_13b70, 12
  %v3_13b70 = inttoptr i32 %v2_13b70 to i32*
  store i32 %v3_13b6c, i32* %v3_13b70, align 4
  %v0_13b74 = load i32, i32* @r5, align 4
  %v1_13b74 = add i32 %v0_13b74, 16
  %v2_13b74 = inttoptr i32 %v1_13b74 to i32*
  %v3_13b74 = load i32, i32* %v2_13b74, align 4
  store i32 %v3_13b74, i32* %r3.global-to-local, align 4
  %v0_13b78 = load i32, i32* @ip, align 4
  %v1_13b7c = load i32, i32* %r1.global-to-local, align 4
  %v2_13b7c = add i32 %v1_13b7c, 16
  %v3_13b7c = inttoptr i32 %v2_13b7c to i32*
  store i32 %v3_13b74, i32* %v3_13b7c, align 4
  %tmp40 = icmp ult i32 %v0_13b78, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_13b84

dec_label_pc_13b84:                               ; preds = %dec_label_pc_13b6c
  %v0_13b84 = load i32, i32* @r5, align 4
  %v1_13b84 = add i32 %v0_13b84, 20
  %v2_13b84 = inttoptr i32 %v1_13b84 to i32*
  %v3_13b84 = load i32, i32* %v2_13b84, align 4
  store i32 %v3_13b84, i32* %r3.global-to-local, align 4
  %v1_13b88 = load i32, i32* %r1.global-to-local, align 4
  %v2_13b88 = add i32 %v1_13b88, 20
  %v3_13b88 = inttoptr i32 %v2_13b88 to i32*
  store i32 %v3_13b84, i32* %v3_13b88, align 4
  %v0_13b8c = load i32, i32* @r5, align 4
  %v1_13b8c = add i32 %v0_13b8c, 24
  %v2_13b8c = inttoptr i32 %v1_13b8c to i32*
  %v3_13b8c = load i32, i32* %v2_13b8c, align 4
  store i32 %v3_13b8c, i32* %r3.global-to-local, align 4
  %v1_13b90 = load i32, i32* %r1.global-to-local, align 4
  %v2_13b90 = add i32 %v1_13b90, 24
  %v3_13b90 = inttoptr i32 %v2_13b90 to i32*
  store i32 %v3_13b8c, i32* %v3_13b90, align 4
  %v0_13b94 = load i32, i32* @ip, align 4
  %v7_13b94 = icmp eq i32 %v0_13b94, 9
  br i1 %v7_13b94, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_13b84
  %v1_13b98 = load i32, i32* @r5, align 4
  %v2_13b98 = add i32 %v1_13b98, 28
  %v3_13b98 = inttoptr i32 %v2_13b98 to i32*
  %v4_13b98 = load i32, i32* %v3_13b98, align 4
  store i32 %v4_13b98, i32* %r3.global-to-local, align 4
  %v2_13b9c = load i32, i32* %r1.global-to-local, align 4
  %v3_13b9c = add i32 %v2_13b9c, 28
  %v4_13b9c = inttoptr i32 %v3_13b9c to i32*
  store i32 %v4_13b98, i32* %v4_13b9c, align 4
  %v1_13ba0 = load i32, i32* @r5, align 4
  %v2_13ba0 = add i32 %v1_13ba0, 32
  %v3_13ba0 = inttoptr i32 %v2_13ba0 to i32*
  %v4_13ba0 = load i32, i32* %v3_13ba0, align 4
  store i32 %v4_13ba0, i32* %r3.global-to-local, align 4
  %v2_13ba4 = load i32, i32* %r1.global-to-local, align 4
  %v3_13ba4 = add i32 %v2_13ba4, 32
  %v4_13ba4 = inttoptr i32 %v3_13ba4 to i32*
  store i32 %v4_13ba0, i32* %v4_13ba4, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_13b84, %dec_label_pc_13b6c, %dec_label_pc_13b4c, %dec_label_pc_13b40, %bb32
  %v0_13ba8 = load i32, i32* @r5, align 4
  store i32 %v0_13ba8, i32* @r0, align 4
  %v0_13bac = call i32 @function_13f98()
  store i32 %v0_13bac, i32* %r0.global-to-local, align 4
  %v0_13bb0 = load i32, i32* @r7, align 4
  %v1_13bb0 = add i32 %v0_13bb0, 8
  store i32 %v1_13bb0, i32* @r4, align 4
  br label %dec_label_pc_13cec

dec_label_pc_13bb8:                               ; preds = %bb30, %.thread2, %dec_label_pc_13af8
  %v0_13bcc = phi i32 [ %v3_13b28, %.thread2 ], [ %v1_13a40, %bb30 ], [ %v1_13bb8.pre, %dec_label_pc_13af8 ]
  %v0_13bb8 = load i32, i32* @sb, align 4
  %v2_13bb8 = sub i32 %v0_13bcc, %v0_13bb8
  store i32 %v2_13bb8, i32* %r1.global-to-local, align 4
  %v0_13bc0 = load i32, i32* @sl, align 4
  %v1_13bc0 = add i32 %v0_13bc0, 4
  %v2_13bc0 = inttoptr i32 %v1_13bc0 to i32*
  %v3_13bc0 = load i32, i32* %v2_13bc0, align 4
  %tmp41 = icmp ugt i32 %v2_13bb8, 15
  %v1_13be8 = urem i32 %v3_13bc0, 2
  store i32 %v1_13be8, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_13be8, label %dec_label_pc_13bc8

dec_label_pc_13bc8:                               ; preds = %dec_label_pc_13bb8
  %v2_13bcc = or i32 %v1_13be8, %v0_13bcc
  store i32 %v2_13bcc, i32* %r3.global-to-local, align 4
  store i32 %v2_13bcc, i32* %v2_13bc0, align 4
  %v0_13bd4 = load i32, i32* @sl, align 4
  %v1_13bd4 = load i32, i32* %r0.global-to-local, align 4
  %v2_13bd4 = add i32 %v1_13bd4, %v0_13bd4
  store i32 %v2_13bd4, i32* %r2.global-to-local, align 4
  %v1_13bd8 = add i32 %v2_13bd4, 4
  %v2_13bd8 = inttoptr i32 %v1_13bd8 to i32*
  %v3_13bd8 = load i32, i32* %v2_13bd8, align 4
  %v1_13bdc = or i32 %v3_13bd8, 1
  store i32 %v1_13bdc, i32* %r3.global-to-local, align 4
  store i32 %v1_13bdc, i32* %v2_13bd8, align 4
  br label %dec_label_pc_13c18

dec_label_pc_13be8:                               ; preds = %dec_label_pc_13bb8
  %v2_13bec = add i32 %v0_13bc0, %v0_13bb8
  store i32 %v2_13bec, i32* %r0.global-to-local, align 4
  %v2_13bf0 = or i32 %v1_13be8, %v0_13bb8
  store i32 %v2_13bf0, i32* %r3.global-to-local, align 4
  %v1_13bf4 = or i32 %v2_13bb8, 1
  store i32 %v1_13bf4, i32* %r2.global-to-local, align 4
  store i32 %v2_13bf0, i32* %v2_13bc0, align 4
  %v0_13bfc = load i32, i32* %r2.global-to-local, align 4
  %v1_13bfc = load i32, i32* %r0.global-to-local, align 4
  %v2_13bfc = add i32 %v1_13bfc, 4
  %v3_13bfc = inttoptr i32 %v2_13bfc to i32*
  store i32 %v0_13bfc, i32* %v3_13bfc, align 4
  %v0_13c00 = load i32, i32* %r0.global-to-local, align 4
  %v1_13c00 = load i32, i32* %r1.global-to-local, align 4
  %v2_13c00 = add i32 %v1_13c00, %v0_13c00
  store i32 %v2_13c00, i32* %r2.global-to-local, align 4
  %v1_13c04 = add i32 %v2_13c00, 4
  %v2_13c04 = inttoptr i32 %v1_13c04 to i32*
  %v3_13c04 = load i32, i32* %v2_13c04, align 4
  %v1_13c08 = or i32 %v3_13c04, 1
  store i32 %v1_13c08, i32* %r3.global-to-local, align 4
  store i32 %v1_13c08, i32* %v2_13c04, align 4
  %v0_13c10 = load i32, i32* %r0.global-to-local, align 4
  %v1_13c10 = add i32 %v0_13c10, 8
  store i32 %v1_13c10, i32* @r0, align 4
  %v0_13c14 = call i32 @function_13f98()
  store i32 %v0_13c14, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13c18

dec_label_pc_13c18:                               ; preds = %dec_label_pc_13bc8, %dec_label_pc_13be8
  %v0_13c18 = load i32, i32* @sl, align 4
  %v1_13c18 = add i32 %v0_13c18, 8
  store i32 %v1_13c18, i32* @r4, align 4
  br label %dec_label_pc_13cec

dec_label_pc_13c20:                               ; preds = %bb29
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_c7b4.511 to i32), i32 80280), i32* %r1.global-to-local, align 4
  %v4_13c28 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c7b4.511 to i32), i32 80312) to i32*), align 4
  store i32 %v4_13c28, i32* @r8, align 4
  %v2_13c2c = inttoptr i32 %v1_13a3c to i32*
  %v3_13c2c = load i32, i32* %v2_13c2c, align 4
  store i32 %v3_13c2c, i32* @r4, align 4
  %v1_13c30 = add i32 %v4_13c28, 860
  %v2_13c30 = inttoptr i32 %v1_13c30 to i32*
  %v3_13c30 = load i32, i32* %v2_13c30, align 4
  %v1_13c34 = add i32 %v3_13c2c, 4
  %v1_13c38 = add i32 %v3_13c30, -1
  store i32 %v1_13c38, i32* %r2.global-to-local, align 4
  %v2_13c3c = add i32 %v1_13c34, %v1_13c38
  %v1_13c40 = load i32, i32* @sb, align 4
  %v2_13c40 = add i32 %v2_13c3c, %v1_13c40
  store i32 %v2_13c40, i32* %r3.global-to-local, align 4
  %v2_13c44 = sub i32 0, %v3_13c30
  %v3_13c44 = and i32 %v2_13c40, %v2_13c44
  store i32 %v3_13c44, i32* @r7, align 4
  %v2_13c48 = sub i32 %v3_13c44, %v3_13c2c
  store i32 %v2_13c48, i32* @fp, align 4
  %v9_13c4c = icmp eq i32 %v1_13a40, %v2_13c48
  br i1 %v9_13c4c, label %dec_label_pc_13cc0, label %dec_label_pc_13c54

dec_label_pc_13c54:                               ; preds = %dec_label_pc_13c20
  %v2_13c54 = sub i32 %v1_13a3c, %v3_13c2c
  store i32 %v2_13c54, i32* %r0.global-to-local, align 4
  %v2_13c58 = add i32 %v3_13c2c, %v1_13a40
  store i32 %v2_13c58, i32* %r1.global-to-local, align 4
  store i32 %v3_13c44, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_13c64 = call i32 @function_155e8(i32 %v2_13c54, i32 %v2_13c58, i32 %v3_13c44, i32 1)
  store i32 %v4_13c64, i32* %r0.global-to-local, align 4
  %v7_13c68 = icmp eq i32 %v4_13c64, -1
  br i1 %v7_13c68, label %dec_label_pc_13cb4, label %dec_label_pc_13c70

dec_label_pc_13c70:                               ; preds = %dec_label_pc_13c54
  %v1_13c70 = load i32, i32* @r4, align 4
  %v2_13c70 = add i32 %v1_13c70, %v4_13c64
  store i32 %v2_13c70, i32* %r0.global-to-local, align 4
  %v0_13c74 = load i32, i32* @fp, align 4
  %v1_13c74 = or i32 %v0_13c74, 2
  store i32 %v1_13c74, i32* %r3.global-to-local, align 4
  %v2_13c78 = add i32 %v2_13c70, 4
  %v3_13c78 = inttoptr i32 %v2_13c78 to i32*
  store i32 %v1_13c74, i32* %v3_13c78, align 4
  %v0_13c7c = load i32, i32* @r8, align 4
  %v1_13c7c = add i32 %v0_13c7c, 868
  %v2_13c7c = inttoptr i32 %v1_13c7c to i32*
  %v3_13c7c = load i32, i32* %v2_13c7c, align 4
  store i32 %v3_13c7c, i32* %r3.global-to-local, align 4
  %v1_13c80 = add i32 %v0_13c7c, 880
  %v2_13c80 = inttoptr i32 %v1_13c80 to i32*
  %v3_13c80 = load i32, i32* %v2_13c80, align 4
  store i32 %v3_13c80, i32* %r2.global-to-local, align 4
  %v0_13c84 = load i32, i32* @r6, align 4
  %v2_13c84 = sub i32 %v3_13c7c, %v0_13c84
  store i32 %v2_13c84, i32* %r3.global-to-local, align 4
  %v1_13c88 = load i32, i32* @r7, align 4
  %v2_13c88 = add i32 %v1_13c88, %v2_13c84
  store i32 %v2_13c88, i32* %r1.global-to-local, align 4
  %v1_13c8c = add i32 %v0_13c7c, 872
  %v2_13c8c = inttoptr i32 %v1_13c8c to i32*
  %v3_13c8c = load i32, i32* %v2_13c8c, align 4
  store i32 %v3_13c8c, i32* %r3.global-to-local, align 4
  %v1_13c94 = add i32 %v0_13c7c, 884
  %v2_13c94 = inttoptr i32 %v1_13c94 to i32*
  %v3_13c94 = load i32, i32* %v2_13c94, align 4
  store i32 %v3_13c94, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_13c88, %v3_13c80
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_13c70
  store i32 %v2_13c88, i32* %v2_13c80, align 4
  %v0_13c9c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_13c9c.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_13c70, %bb33
  %v1_13c9c = phi i32 [ %v0_13c7c, %dec_label_pc_13c70 ], [ %v1_13c9c.pre, %bb33 ]
  %v0_13c9c = phi i32 [ %v2_13c88, %dec_label_pc_13c70 ], [ %v0_13c9c.pre, %bb33 ]
  %v2_13c9c = add i32 %v1_13c9c, 868
  %v3_13c9c = inttoptr i32 %v2_13c9c to i32*
  store i32 %v0_13c9c, i32* %v3_13c9c, align 4
  %v0_13ca0 = load i32, i32* %r1.global-to-local, align 4
  %v1_13ca0 = load i32, i32* %r3.global-to-local, align 4
  %v2_13ca0 = add i32 %v1_13ca0, %v0_13ca0
  store i32 %v2_13ca0, i32* %r1.global-to-local, align 4
  %v1_13ca4 = load i32, i32* %r2.global-to-local, align 4
  %v0_13ca8 = load i32, i32* %r0.global-to-local, align 4
  %v1_13ca8 = add i32 %v0_13ca8, 8
  store i32 %v1_13ca8, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_13ca0, %v1_13ca4
  br i1 %tmp43, label %bb35, label %dec_label_pc_13cec

bb35:                                             ; preds = %bb34
  %v5_13cac = load i32, i32* @r8, align 4
  %v6_13cac = add i32 %v5_13cac, 884
  %v7_13cac = inttoptr i32 %v6_13cac to i32*
  store i32 %v2_13ca0, i32* %v7_13cac, align 4
  br label %dec_label_pc_13cec

dec_label_pc_13cb4:                               ; preds = %dec_label_pc_13c54
  %v0_13cb4 = load i32, i32* @sb, align 4
  %v1_13cb4 = add i32 %v0_13cb4, 4
  store i32 %v1_13cb4, i32* %r3.global-to-local, align 4
  %v0_13cb8 = load i32, i32* @r6, align 4
  %v3_13cb8 = icmp ult i32 %v0_13cb8, %v1_13cb4
  br i1 %v3_13cb8, label %dec_label_pc_13cc8, label %dec_label_pc_13cb4.dec_label_pc_13cc0_crit_edge

dec_label_pc_13cb4.dec_label_pc_13cc0_crit_edge:  ; preds = %dec_label_pc_13cb4
  %v0_13cc0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13cc0

dec_label_pc_13cc0:                               ; preds = %dec_label_pc_13cb4.dec_label_pc_13cc0_crit_edge, %dec_label_pc_13c20
  %v0_13cc0 = phi i32 [ %v0_13cc0.pre, %dec_label_pc_13cb4.dec_label_pc_13cc0_crit_edge ], [ %v0_13a28, %dec_label_pc_13c20 ]
  store i32 %v0_13cc0, i32* @r4, align 4
  br label %dec_label_pc_13cec

dec_label_pc_13cc8:                               ; preds = %dec_label_pc_13cb4
  %v1_13cc8 = add i32 %v0_13cb4, -7
  store i32 %v1_13cc8, i32* @r0, align 4
  %v0_13ccc = call i32 @function_12f2c()
  store i32 %v0_13ccc, i32* @r0, align 4
  store i32 %v0_13ccc, i32* @r4, align 4
  %v2_13cd0 = icmp eq i32 %v0_13ccc, 0
  br i1 %v2_13cd0, label %dec_label_pc_13cec, label %dec_label_pc_13cd8

dec_label_pc_13cd8:                               ; preds = %dec_label_pc_13cc8
  %v0_13cd8 = load i32, i32* @r6, align 4
  %v1_13cd8 = add i32 %v0_13cd8, -8
  store i32 %v1_13cd8, i32* @r2, align 4
  %v0_13cdc = load i32, i32* @r5, align 4
  store i32 %v0_13cdc, i32* @r1, align 4
  %v0_13ce0 = call i32 @function_12a00()
  %v0_13ce4 = load i32, i32* @r5, align 4
  store i32 %v0_13ce4, i32* @r0, align 4
  %v0_13ce8 = call i32 @function_13f98()
  store i32 %v0_13ce8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13cec

dec_label_pc_13cec:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_13cc8, %dec_label_pc_13cc0, %dec_label_pc_13c18, %.thread6, %dec_label_pc_13a88, %dec_label_pc_13cd8
  store i32 %v2_139dc, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_c7b4.511 to i32), i32 80280), i32* %r2.global-to-local, align 4
  %v4_13cfc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c7b4.511 to i32), i32 80304) to i32*), align 4
  store i32 %v4_13cfc, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_13cfc)
  br label %dec_label_pc_13d08

dec_label_pc_13d08:                               ; preds = %dec_label_pc_13a10, %dec_label_pc_139b8, %dec_label_pc_139a0, %dec_label_pc_13cec
  %v0_13d08 = load i32, i32* @r4, align 4
  store i32 %v0_13d08, i32* %r0.global-to-local, align 4
  store i32 %v3_13980, i32* @r4, align 4
  store i32 %v6_13980, i32* @r5, align 4
  store i32 %v9_13980, i32* @r6, align 4
  store i32 %v12_13980, i32* @r7, align 4
  store i32 %v15_13980, i32* @r8, align 4
  store i32 %v18_13980, i32* @sb, align 4
  store i32 %v21_13980, i32* @sl, align 4
  store i32 %v24_13980, i32* @fp, align 4
  store i32 %v27_13980, i32* @lr, align 4
  ret i32 %v0_13d08

; uselistorder directives
  uselistorder i32 %v2_13ca0, { 1, 0, 2 }
  uselistorder i32 %v2_13c88, { 1, 2, 0, 3 }
  uselistorder i32 %v4_13c64, { 1, 0, 2 }
  uselistorder i32 %v3_13c44, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13be8, { 2, 1, 0 }
  uselistorder i32 %v2_13bb8, { 1, 0, 2 }
  uselistorder i32 %v0_13b4c, { 1, 0 }
  uselistorder i32 %v0_13b08, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_13a6c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_13a64, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_13a48, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_13a40, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_13a3c, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_13a2c, { 1, 0 }
  uselistorder i32 %v0_13a28, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_13a08, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 27, 5, 10, 6, 7, 8, 9, 20, 11, 13, 12, 19, 21, 14, 15, 16, 17, 18, 24, 23, 22, 25, 26 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_c7b4.511 to i32), i32 80312) to i32*), { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_c7b4.511 to i32), i32 80280), { 2, 3, 1, 0 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_13d08, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_13cec, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_13c18, { 1, 0 }
  uselistorder label %dec_label_pc_13bb8, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_13b04, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13af8, { 1, 0 }
  uselistorder label %dec_label_pc_13af4, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_13d1c(i32 %arg1) local_unnamed_addr {
dec_label_pc_13d1c:
  %v0_13d1c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13d1c, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_13d1c
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_13d1c, %bb
  %v10_13d30 = phi i32 [ %arg1, %dec_label_pc_13d1c ], [ 0, %bb ]
  ret i32 %v10_13d30

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_13d34(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13d34:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v1_13d34 = add i32 %arg2, 44
  %v2_13d34 = inttoptr i32 %v1_13d34 to i32*
  %v3_13d34 = load i32, i32* %v2_13d34, align 4
  %v3_13d38 = load i32, i32* @r4, align 4
  store i32 %v3_13d38, i32* %stack_var_-20, align 4
  %v1_13d3c = add i32 %v3_13d34, 4
  %v2_13d3c = inttoptr i32 %v1_13d3c to i32*
  %v3_13d3c = load i32, i32* %v2_13d3c, align 4
  %v1_13d40 = add i32 %arg2, 860
  %v2_13d40 = inttoptr i32 %v1_13d40 to i32*
  %v3_13d40 = load i32, i32* %v2_13d40, align 4
  store i32 %v3_13d40, i32* @r4, align 4
  %v1_13d44 = and i32 %v3_13d3c, -4
  store i32 %v1_13d44, i32* @r6, align 4
  %v1_13d48 = add i32 %v1_13d44, -17
  %v2_13d4c = add i32 %v1_13d48, %v3_13d40
  store i32 %arg2, i32* @r5, align 4
  %v2_13d58 = sub i32 %v2_13d4c, %arg1
  store i32 %v2_13d58, i32* @r0, align 4
  store i32 %v3_13d40, i32* @r1, align 4
  %v0_13d60 = call i32 @function_11e5c()
  %v1_13d64 = add i32 %v0_13d60, -1
  store i32 %v1_13d64, i32* %r0.global-to-local, align 4
  %v0_13d68 = load i32, i32* @r4, align 4
  %v2_13d68 = mul i32 %v0_13d68, %v1_13d64
  store i32 %v2_13d68, i32* %r7.global-to-local, align 4
  %v2_13d6c = icmp eq i32 %v2_13d68, 0
  store i1 %v2_13d6c, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_13d68, 1
  br i1 %tmp8, label %dec_label_pc_13dd4, label %dec_label_pc_13d74

dec_label_pc_13d74:                               ; preds = %dec_label_pc_13d34
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_13d78 = call i32 @function_152a4(i32 0)
  store i32 %v1_13d78, i32* %r0.global-to-local, align 4
  %v0_13d7c = load i32, i32* @r5, align 4
  %v1_13d7c = add i32 %v0_13d7c, 44
  %v2_13d7c = inttoptr i32 %v1_13d7c to i32*
  %v3_13d7c = load i32, i32* %v2_13d7c, align 4
  %v0_13d80 = load i32, i32* @r6, align 4
  %v2_13d80 = add i32 %v0_13d80, %v3_13d7c
  %v9_13d84 = icmp eq i32 %v1_13d78, %v2_13d80
  store i1 %v9_13d84, i1* @cpsr_z, align 1
  store i32 %v1_13d78, i32* @r4, align 4
  br i1 %v9_13d84, label %dec_label_pc_13d90, label %dec_label_pc_13dd4

dec_label_pc_13d90:                               ; preds = %dec_label_pc_13d74
  %v0_13d90 = load i32, i32* %r7.global-to-local, align 4
  %v1_13d90 = sub i32 0, %v0_13d90
  store i32 %v1_13d90, i32* %r0.global-to-local, align 4
  %v1_13d94 = call i32 @function_152a4(i32 %v1_13d90)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_13d9c = call i32 @function_152a4(i32 0)
  store i32 %v1_13d9c, i32* %r0.global-to-local, align 4
  %v7_13da0 = icmp eq i32 %v1_13d9c, -1
  store i1 %v7_13da0, i1* @cpsr_z, align 1
  br i1 %v7_13da0, label %dec_label_pc_13dd4, label %dec_label_pc_13da8

dec_label_pc_13da8:                               ; preds = %dec_label_pc_13d90
  %v0_13da8 = load i32, i32* @r4, align 4
  %v2_13da8 = sub i32 %v0_13da8, %v1_13d9c
  store i32 %v2_13da8, i32* %r0.global-to-local, align 4
  %v9_13da8 = icmp eq i32 %v0_13da8, %v1_13d9c
  store i1 %v9_13da8, i1* @cpsr_z, align 1
  br i1 %v9_13da8, label %dec_label_pc_13dd4, label %dec_label_pc_13db0

dec_label_pc_13db0:                               ; preds = %dec_label_pc_13da8
  %v0_13db0 = load i32, i32* @r5, align 4
  %v1_13db0 = add i32 %v0_13db0, 872
  %v2_13db0 = inttoptr i32 %v1_13db0 to i32*
  %v3_13db0 = load i32, i32* %v2_13db0, align 4
  %v1_13db4 = load i32, i32* @r6, align 4
  %v2_13db4 = sub i32 %v1_13db4, %v2_13da8
  store i32 %v2_13db4, i32* %r2.global-to-local, align 4
  %v1_13db8 = add i32 %v0_13db0, 44
  %v2_13db8 = inttoptr i32 %v1_13db8 to i32*
  %v3_13db8 = load i32, i32* %v2_13db8, align 4
  store i32 %v3_13db8, i32* %r1.global-to-local, align 4
  %v2_13dbc = sub i32 %v3_13db0, %v2_13da8
  %v1_13dc0 = or i32 %v2_13db4, 1
  store i32 %v1_13dc0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_13dbc, i32* %v2_13db0, align 4
  %v0_13dcc = load i32, i32* %r2.global-to-local, align 4
  %v1_13dcc = load i32, i32* %r1.global-to-local, align 4
  %v2_13dcc = add i32 %v1_13dcc, 4
  %v3_13dcc = inttoptr i32 %v2_13dcc to i32*
  store i32 %v0_13dcc, i32* %v3_13dcc, align 4
  %v1_13de0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13dd8

dec_label_pc_13dd4:                               ; preds = %dec_label_pc_13d74, %dec_label_pc_13da8, %dec_label_pc_13d90, %dec_label_pc_13d34
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13dd8

dec_label_pc_13dd8:                               ; preds = %dec_label_pc_13db0, %dec_label_pc_13dd4
  %v1_13de0 = phi i32 [ %v1_13de0.pre, %dec_label_pc_13db0 ], [ 0, %dec_label_pc_13dd4 ]
  %v2_13ddc = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_13ddc, i32* @r4, align 4
  ret i32 %v1_13de0

; uselistorder directives
  uselistorder i1 %v7_13da0, { 1, 0 }
  uselistorder i32 %v1_13d9c, { 2, 1, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @function_152a4, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @function_11e5c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_13dd8, { 1, 0 }
  uselistorder label %dec_label_pc_13dd4, { 1, 2, 0, 3 }
}

define i32 @function_13de4() local_unnamed_addr {
dec_label_pc_13de4:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_13de4 = load i32, i32* @r4, align 4
  store i32 %v3_13de4, i32* %stack_var_-36, align 4
  %v0_13de8 = load i32, i32* @r0, align 4
  %v1_13de8 = inttoptr i32 %v0_13de8 to i32*
  %v2_13de8 = load i32, i32* %v1_13de8, align 4
  store i32 %v2_13de8, i32* %r3.global-to-local, align 4
  %v2_13dec = icmp eq i32 %v2_13de8, 0
  store i32 %v0_13de8, i32* @r4, align 4
  br i1 %v2_13dec, label %dec_label_pc_13f24.preheader, label %dec_label_pc_13e00

dec_label_pc_13f24.preheader:                     ; preds = %dec_label_pc_13de4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_13f2c25 = add i32 %v0_13de8, 52
  store i32 %v1_13f2c25, i32* %r3.global-to-local, align 4
  %v2_13f3426 = add i32 %v0_13de8, 60
  %v3_13f3427 = inttoptr i32 %v2_13f3426 to i32*
  store i32 %v1_13f2c25, i32* %v3_13f3427, align 4
  %v0_13f3828 = load i32, i32* %r3.global-to-local, align 4
  %v2_13f3829 = add i32 %v0_13f3828, 12
  %v3_13f3830 = inttoptr i32 %v2_13f3829 to i32*
  store i32 %v0_13f3828, i32* %v3_13f3830, align 4
  br label %dec_label_pc_13f24.dec_label_pc_13f24_crit_edge

dec_label_pc_13e00:                               ; preds = %dec_label_pc_13de4
  %v1_13e00 = and i32 %v2_13de8, -3
  %v3_13e04 = udiv i32 %v2_13de8, 8
  store i32 %v3_13e04, i32* %r2.global-to-local, align 4
  store i32 %v1_13e00, i32* %v1_13de8, align 4
  %v0_13e0c = load i32, i32* @r0, align 4
  %v1_13e0c = add i32 %v0_13e0c, -4
  store i32 %v1_13e0c, i32* %r3.global-to-local, align 4
  %v1_13e10 = load i32, i32* %r2.global-to-local, align 4
  %v4_13e10 = mul i32 %v1_13e10, 4
  %v5_13e10 = add i32 %v4_13e10, %v1_13e0c
  store i32 %v5_13e10, i32* %sb.global-to-local, align 4
  %v1_13e14 = add i32 %v0_13e0c, 52
  store i32 %v1_13e14, i32* %r7.global-to-local, align 4
  %v1_13e18 = add i32 %v0_13e0c, 4
  store i32 %v1_13e18, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_13e20

dec_label_pc_13e20:                               ; preds = %dec_label_pc_13f1c, %dec_label_pc_13e00
  %v1_13f1410 = phi i32 [ %v1_13f14, %dec_label_pc_13f1c ], [ %v5_13e10, %dec_label_pc_13e00 ]
  %v1_13e2c = phi i32 [ %v1_13f1c, %dec_label_pc_13f1c ], [ %v1_13e18, %dec_label_pc_13e00 ]
  %v1_13e20 = inttoptr i32 %v1_13e2c to i32*
  %v2_13e20 = load i32, i32* %v1_13e20, align 4
  store i32 %v2_13e20, i32* %r1.global-to-local, align 4
  %v2_13e24 = icmp eq i32 %v2_13e20, 0
  br i1 %v2_13e24, label %dec_label_pc_13f14, label %dec_label_pc_13e2c

dec_label_pc_13e2c:                               ; preds = %dec_label_pc_13e20
  %v0_13e2c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_13e2c, i32* %v1_13e20, align 4
  %v0_13e30.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13e30

dec_label_pc_13e30:                               ; preds = %dec_label_pc_13f08, %dec_label_pc_13e2c
  %v0_13e4c = phi i32 [ %v0_13f08, %dec_label_pc_13f08 ], [ %v0_13e30.pre, %dec_label_pc_13e2c ]
  %v1_13e30 = add i32 %v0_13e4c, 4
  %v2_13e30 = inttoptr i32 %v1_13e30 to i32*
  %v3_13e30 = load i32, i32* %v2_13e30, align 4
  store i32 %v3_13e30, i32* %r3.global-to-local, align 4
  %v1_13e34 = and i32 %v3_13e30, -2
  store i32 %v1_13e34, i32* %lr.global-to-local, align 4
  %v2_13e38 = add i32 %v1_13e34, %v0_13e4c
  store i32 %v2_13e38, i32* @r0, align 4
  %v1_13e3c = urem i32 %v3_13e30, 2
  %v2_13e3c = icmp eq i32 %v1_13e3c, 0
  %v1_13e40 = add i32 %v0_13e4c, 8
  %v2_13e40 = inttoptr i32 %v1_13e40 to i32*
  %v3_13e40 = load i32, i32* %v2_13e40, align 4
  store i32 %v3_13e40, i32* %sl.global-to-local, align 4
  %v1_13e44 = add i32 %v2_13e38, 4
  %v2_13e44 = inttoptr i32 %v1_13e44 to i32*
  %v3_13e44 = load i32, i32* %v2_13e44, align 4
  store i32 %v3_13e44, i32* %r8.global-to-local, align 4
  br i1 %v2_13e3c, label %dec_label_pc_13e4c, label %dec_label_pc_13e80

dec_label_pc_13e4c:                               ; preds = %dec_label_pc_13e30
  %v1_13e4c = inttoptr i32 %v0_13e4c to i32*
  %v2_13e4c = load i32, i32* %v1_13e4c, align 4
  store i32 %v2_13e4c, i32* %r5.global-to-local, align 4
  %v2_13e50 = sub i32 %v0_13e4c, %v2_13e4c
  store i32 %v2_13e50, i32* %r3.global-to-local, align 4
  %v1_13e54 = add i32 %v2_13e50, 8
  %v2_13e54 = inttoptr i32 %v1_13e54 to i32*
  %v3_13e54 = load i32, i32* %v2_13e54, align 4
  store i32 %v3_13e54, i32* %ip.global-to-local, align 4
  %v1_13e58 = add i32 %v3_13e54, 12
  %v2_13e58 = inttoptr i32 %v1_13e58 to i32*
  %v3_13e58 = load i32, i32* %v2_13e58, align 4
  store i32 %v3_13e58, i32* %r1.global-to-local, align 4
  %v9_13e5c = icmp eq i32 %v3_13e58, %v2_13e50
  %v1_13e60 = add i32 %v2_13e50, 12
  %v2_13e60 = inttoptr i32 %v1_13e60 to i32*
  %v3_13e60 = load i32, i32* %v2_13e60, align 4
  store i32 %v3_13e60, i32* %r2.global-to-local, align 4
  br i1 %v9_13e5c, label %dec_label_pc_13e68, label %dec_label_pc_13ec4

dec_label_pc_13e68:                               ; preds = %dec_label_pc_13e4c
  %v1_13e68 = add i32 %v3_13e60, 8
  %v2_13e68 = inttoptr i32 %v1_13e68 to i32*
  %v3_13e68 = load i32, i32* %v2_13e68, align 4
  store i32 %v3_13e68, i32* %r3.global-to-local, align 4
  %v9_13e6c = icmp eq i32 %v3_13e68, %v2_13e50
  br i1 %v9_13e6c, label %dec_label_pc_13e74, label %dec_label_pc_13ec4

dec_label_pc_13e74:                               ; preds = %dec_label_pc_13e68
  store i32 %v3_13e54, i32* %v2_13e68, align 4
  %v0_13e78 = load i32, i32* %r2.global-to-local, align 4
  %v1_13e78 = load i32, i32* %ip.global-to-local, align 4
  %v2_13e78 = add i32 %v1_13e78, 12
  %v3_13e78 = inttoptr i32 %v2_13e78 to i32*
  store i32 %v0_13e78, i32* %v3_13e78, align 4
  %v0_13e7c = load i32, i32* %lr.global-to-local, align 4
  %v1_13e7c = load i32, i32* %r5.global-to-local, align 4
  %v2_13e7c = add i32 %v1_13e7c, %v0_13e7c
  store i32 %v2_13e7c, i32* %lr.global-to-local, align 4
  %v0_13e84.pre = load i32, i32* @r0, align 4
  %v0_13e88.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_13e80

dec_label_pc_13e80:                               ; preds = %dec_label_pc_13e30, %dec_label_pc_13e74
  %v0_13ef8 = phi i32 [ %v1_13e34, %dec_label_pc_13e30 ], [ %v2_13e7c, %dec_label_pc_13e74 ]
  %v0_13e88 = phi i32 [ %v3_13e44, %dec_label_pc_13e30 ], [ %v0_13e88.pre, %dec_label_pc_13e74 ]
  %v1_13e9c = phi i32 [ %v2_13e38, %dec_label_pc_13e30 ], [ %v0_13e84.pre, %dec_label_pc_13e74 ]
  %v0_13e80 = load i32, i32* @r4, align 4
  %v1_13e80 = add i32 %v0_13e80, 44
  %v2_13e80 = inttoptr i32 %v1_13e80 to i32*
  %v3_13e80 = load i32, i32* %v2_13e80, align 4
  store i32 %v3_13e80, i32* %r3.global-to-local, align 4
  %v9_13e84 = icmp eq i32 %v1_13e9c, %v3_13e80
  %v1_13e88 = and i32 %v0_13e88, -4
  store i32 %v1_13e88, i32* %r5.global-to-local, align 4
  br i1 %v9_13e84, label %dec_label_pc_13ef8, label %dec_label_pc_13e90

dec_label_pc_13e90:                               ; preds = %dec_label_pc_13e80
  %v2_13e90 = add i32 %v1_13e9c, %v1_13e88
  store i32 %v2_13e90, i32* %r3.global-to-local, align 4
  %v1_13e94 = add i32 %v2_13e90, 4
  %v2_13e94 = inttoptr i32 %v1_13e94 to i32*
  %v3_13e94 = load i32, i32* %v2_13e94, align 4
  store i32 %v3_13e94, i32* %r3.global-to-local, align 4
  %v1_13e98 = urem i32 %v3_13e94, 2
  %v2_13e98 = icmp eq i32 %v1_13e98, 0
  %v2_13e9c = add i32 %v1_13e9c, 4
  %v3_13e9c = inttoptr i32 %v2_13e9c to i32*
  store i32 %v1_13e88, i32* %v3_13e9c, align 4
  br i1 %v2_13e98, label %dec_label_pc_13ea4, label %dec_label_pc_13e90.dec_label_pc_13ed4_crit_edge

dec_label_pc_13e90.dec_label_pc_13ed4_crit_edge:  ; preds = %dec_label_pc_13e90
  %v0_13ed8.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_13ed4

dec_label_pc_13ea4:                               ; preds = %dec_label_pc_13e90
  %v0_13ea4 = load i32, i32* @r0, align 4
  %v1_13ea4 = add i32 %v0_13ea4, 8
  %v2_13ea4 = inttoptr i32 %v1_13ea4 to i32*
  %v3_13ea4 = load i32, i32* %v2_13ea4, align 4
  store i32 %v3_13ea4, i32* %ip.global-to-local, align 4
  %v1_13ea8 = add i32 %v3_13ea4, 12
  %v2_13ea8 = inttoptr i32 %v1_13ea8 to i32*
  %v3_13ea8 = load i32, i32* %v2_13ea8, align 4
  store i32 %v3_13ea8, i32* %r3.global-to-local, align 4
  %v9_13eac = icmp eq i32 %v3_13ea8, %v0_13ea4
  %v1_13eb0 = add i32 %v0_13ea4, 12
  %v2_13eb0 = inttoptr i32 %v1_13eb0 to i32*
  %v3_13eb0 = load i32, i32* %v2_13eb0, align 4
  store i32 %v3_13eb0, i32* %r2.global-to-local, align 4
  br i1 %v9_13eac, label %dec_label_pc_13eb8, label %dec_label_pc_13ec4

dec_label_pc_13eb8:                               ; preds = %dec_label_pc_13ea4
  %v1_13eb8 = add i32 %v3_13eb0, 8
  %v2_13eb8 = inttoptr i32 %v1_13eb8 to i32*
  %v3_13eb8 = load i32, i32* %v2_13eb8, align 4
  store i32 %v3_13eb8, i32* %r3.global-to-local, align 4
  %v9_13ebc = icmp eq i32 %v3_13eb8, %v0_13ea4
  br i1 %v9_13ebc, label %dec_label_pc_13ec8, label %dec_label_pc_13ec4

dec_label_pc_13ec4:                               ; preds = %dec_label_pc_13ea4, %dec_label_pc_13e68, %dec_label_pc_13e4c, %dec_label_pc_13eb8
  %v0_13ec4 = call i32 @function_14214()
  store i32 %v0_13ec4, i32* @r0, align 4
  %v0_13ec8.pre = load i32, i32* @ip, align 4
  %v1_13ec8.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_13ec8

dec_label_pc_13ec8:                               ; preds = %dec_label_pc_13eb8, %dec_label_pc_13ec4
  %v1_13ec8 = phi i32 [ %v3_13eb0, %dec_label_pc_13eb8 ], [ %v1_13ec8.pre, %dec_label_pc_13ec4 ]
  %v0_13ec8 = phi i32 [ %v3_13ea4, %dec_label_pc_13eb8 ], [ %v0_13ec8.pre, %dec_label_pc_13ec4 ]
  %v2_13ec8 = add i32 %v1_13ec8, 8
  %v3_13ec8 = inttoptr i32 %v2_13ec8 to i32*
  store i32 %v0_13ec8, i32* %v3_13ec8, align 4
  %v0_13ecc = load i32, i32* %r2.global-to-local, align 4
  %v1_13ecc = load i32, i32* %ip.global-to-local, align 4
  %v2_13ecc = add i32 %v1_13ecc, 12
  %v3_13ecc = inttoptr i32 %v2_13ecc to i32*
  store i32 %v0_13ecc, i32* %v3_13ecc, align 4
  %v0_13ed0 = load i32, i32* %lr.global-to-local, align 4
  %v1_13ed0 = load i32, i32* %r5.global-to-local, align 4
  %v2_13ed0 = add i32 %v1_13ed0, %v0_13ed0
  store i32 %v2_13ed0, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_13ed4

dec_label_pc_13ed4:                               ; preds = %dec_label_pc_13e90.dec_label_pc_13ed4_crit_edge, %dec_label_pc_13ec8
  %v0_13ed8 = phi i32 [ %v0_13ed8.pre, %dec_label_pc_13e90.dec_label_pc_13ed4_crit_edge ], [ %v2_13ed0, %dec_label_pc_13ec8 ]
  %v0_13ed4 = load i32, i32* %r7.global-to-local, align 4
  %v1_13ed4 = add i32 %v0_13ed4, 8
  %v2_13ed4 = inttoptr i32 %v1_13ed4 to i32*
  %v3_13ed4 = load i32, i32* %v2_13ed4, align 4
  store i32 %v3_13ed4, i32* %r2.global-to-local, align 4
  %v1_13ed8 = or i32 %v0_13ed8, 1
  store i32 %v1_13ed8, i32* %r3.global-to-local, align 4
  %v0_13edc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13edc, i32* %v2_13ed4, align 4
  %v0_13ee0 = load i32, i32* %r1.global-to-local, align 4
  %v1_13ee0 = load i32, i32* %r2.global-to-local, align 4
  %v2_13ee0 = add i32 %v1_13ee0, 12
  %v3_13ee0 = inttoptr i32 %v2_13ee0 to i32*
  store i32 %v0_13ee0, i32* %v3_13ee0, align 4
  %v0_13ee4 = load i32, i32* %lr.global-to-local, align 4
  %v1_13ee4 = load i32, i32* %r1.global-to-local, align 4
  %v3_13ee4 = add i32 %v1_13ee4, %v0_13ee4
  %v4_13ee4 = inttoptr i32 %v3_13ee4 to i32*
  store i32 %v0_13ee4, i32* %v4_13ee4, align 4
  %v0_13ee8 = load i32, i32* %r3.global-to-local, align 4
  %v1_13ee8 = load i32, i32* %r1.global-to-local, align 4
  %v2_13ee8 = add i32 %v1_13ee8, 4
  %v3_13ee8 = inttoptr i32 %v2_13ee8 to i32*
  store i32 %v0_13ee8, i32* %v3_13ee8, align 4
  %v0_13eec = load i32, i32* %r2.global-to-local, align 4
  %v1_13eec = load i32, i32* %r1.global-to-local, align 4
  %v2_13eec = add i32 %v1_13eec, 8
  %v3_13eec = inttoptr i32 %v2_13eec to i32*
  store i32 %v0_13eec, i32* %v3_13eec, align 4
  %v0_13ef0 = load i32, i32* %r7.global-to-local, align 4
  %v1_13ef0 = load i32, i32* %r1.global-to-local, align 4
  %v2_13ef0 = add i32 %v1_13ef0, 12
  %v3_13ef0 = inttoptr i32 %v2_13ef0 to i32*
  store i32 %v0_13ef0, i32* %v3_13ef0, align 4
  br label %dec_label_pc_13f08

dec_label_pc_13ef8:                               ; preds = %dec_label_pc_13e80
  %v2_13ef8 = add i32 %v1_13e88, %v0_13ef8
  %v1_13efc = or i32 %v2_13ef8, 1
  store i32 %v1_13efc, i32* %r3.global-to-local, align 4
  %v1_13f00 = load i32, i32* %r1.global-to-local, align 4
  %v2_13f00 = add i32 %v1_13f00, 4
  %v3_13f00 = inttoptr i32 %v2_13f00 to i32*
  store i32 %v1_13efc, i32* %v3_13f00, align 4
  %v0_13f04 = load i32, i32* %r1.global-to-local, align 4
  %v1_13f04 = load i32, i32* @r4, align 4
  %v2_13f04 = add i32 %v1_13f04, 44
  %v3_13f04 = inttoptr i32 %v2_13f04 to i32*
  store i32 %v0_13f04, i32* %v3_13f04, align 4
  br label %dec_label_pc_13f08

dec_label_pc_13f08:                               ; preds = %dec_label_pc_13ed4, %dec_label_pc_13ef8
  %v0_13f08 = load i32, i32* %sl.global-to-local, align 4
  %v2_13f08 = icmp eq i32 %v0_13f08, 0
  store i32 %v0_13f08, i32* %r1.global-to-local, align 4
  br i1 %v2_13f08, label %dec_label_pc_13f14.loopexit, label %dec_label_pc_13e30

dec_label_pc_13f14.loopexit:                      ; preds = %dec_label_pc_13f08
  %v0_13f14.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_13f14.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_13f14

dec_label_pc_13f14:                               ; preds = %dec_label_pc_13f14.loopexit, %dec_label_pc_13e20
  %v1_13f14 = phi i32 [ %v1_13f14.pre, %dec_label_pc_13f14.loopexit ], [ %v1_13f1410, %dec_label_pc_13e20 ]
  %v0_13f1c = phi i32 [ %v0_13f14.pre, %dec_label_pc_13f14.loopexit ], [ %v1_13e2c, %dec_label_pc_13e20 ]
  %v9_13f14 = icmp eq i32 %v0_13f1c, %v1_13f14
  br i1 %v9_13f14, label %dec_label_pc_13f8c, label %dec_label_pc_13f1c

dec_label_pc_13f1c:                               ; preds = %dec_label_pc_13f14
  %v1_13f1c = add i32 %v0_13f1c, 4
  store i32 %v1_13f1c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13e20

dec_label_pc_13f24.dec_label_pc_13f24_crit_edge:  ; preds = %dec_label_pc_13f24.preheader, %dec_label_pc_13f24.dec_label_pc_13f24_crit_edge
  %v0_13f24.pre = load i32, i32* @r4, align 4
  %v1_13f24.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_13f24 = mul i32 %v1_13f24.pre, 8
  %v5_13f24 = add i32 %v4_13f24, %v0_13f24.pre
  %v1_13f28 = add i32 %v1_13f24.pre, 1
  store i32 %v1_13f28, i32* %r2.global-to-local, align 4
  %v1_13f2c = add i32 %v5_13f24, 44
  store i32 %v1_13f2c, i32* %r3.global-to-local, align 4
  %v2_13f34 = add i32 %v5_13f24, 52
  %v3_13f34 = inttoptr i32 %v2_13f34 to i32*
  store i32 %v1_13f2c, i32* %v3_13f34, align 4
  %v0_13f38 = load i32, i32* %r3.global-to-local, align 4
  %v2_13f38 = add i32 %v0_13f38, 12
  %v3_13f38 = inttoptr i32 %v2_13f38 to i32*
  store i32 %v0_13f38, i32* %v3_13f38, align 4
  %v7_13f3c = icmp sgt i32 %v1_13f28, 95
  br i1 %v7_13f3c, label %dec_label_pc_13f40, label %dec_label_pc_13f24.dec_label_pc_13f24_crit_edge

dec_label_pc_13f40:                               ; preds = %dec_label_pc_13f24.dec_label_pc_13f24_crit_edge
  %v0_13f40 = load i32, i32* @r4, align 4
  %v1_13f40 = inttoptr i32 %v0_13f40 to i32*
  %v2_13f40 = load i32, i32* %v1_13f40, align 4
  store i32 %v2_13f40, i32* %r2.global-to-local, align 4
  %v1_13f44 = add i32 %v0_13f40, 864
  %v2_13f44 = inttoptr i32 %v1_13f44 to i32*
  %v3_13f44 = load i32, i32* %v2_13f44, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13f4c = urem i32 %v2_13f40, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_13f54 = or i32 %v3_13f44, 1
  store i32 %v1_13f54, i32* %r1.global-to-local, align 4
  %v1_13f58 = or i32 %v1_13f4c, 72
  store i32 %v1_13f58, i32* %r2.global-to-local, align 4
  %v1_13f5c = add i32 %v0_13f40, 52
  store i32 %v1_13f5c, i32* %ip.global-to-local, align 4
  %v2_13f60 = add i32 %v0_13f40, 840
  %v3_13f60 = inttoptr i32 %v2_13f60 to i32*
  store i32 0, i32* %v3_13f60, align 4
  %v0_13f64 = load i32, i32* %r3.global-to-local, align 4
  %v1_13f64 = add i32 %v0_13f64, 65536
  store i32 %v1_13f64, i32* %r3.global-to-local, align 4
  %v0_13f68 = load i32, i32* %r0.global-to-local, align 4
  %v1_13f68 = load i32, i32* @r4, align 4
  %v2_13f68 = add i32 %v1_13f68, 836
  %v3_13f68 = inttoptr i32 %v2_13f68 to i32*
  store i32 %v0_13f68, i32* %v3_13f68, align 4
  %v0_13f6c = load i32, i32* %r0.global-to-local, align 4
  %v1_13f6c = load i32, i32* @r4, align 4
  %v2_13f6c = add i32 %v1_13f6c, 844
  %v3_13f6c = inttoptr i32 %v2_13f6c to i32*
  store i32 %v0_13f6c, i32* %v3_13f6c, align 4
  %v1_13f70 = load i32, i32* @r4, align 4
  %v2_13f70 = add i32 %v1_13f70, 852
  %v3_13f70 = inttoptr i32 %v2_13f70 to i32*
  store i32 %v1_13f64, i32* %v3_13f70, align 4
  %v1_13f74 = load i32, i32* @r4, align 4
  %v2_13f74 = add i32 %v1_13f74, 864
  %v3_13f74 = inttoptr i32 %v2_13f74 to i32*
  store i32 %v1_13f54, i32* %v3_13f74, align 4
  %v1_13f78 = load i32, i32* @r4, align 4
  %v2_13f78 = inttoptr i32 %v1_13f78 to i32*
  store i32 %v1_13f58, i32* %v2_13f78, align 4
  %v0_13f7c = load i32, i32* %ip.global-to-local, align 4
  %v1_13f7c = load i32, i32* @r4, align 4
  %v2_13f7c = add i32 %v1_13f7c, 44
  %v3_13f7c = inttoptr i32 %v2_13f7c to i32*
  store i32 %v0_13f7c, i32* %v3_13f7c, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_13f84 = call i32 @function_145ec(i32 30, i32 %v1_13f54, i32 %v1_13f58, i32 %v1_13f64)
  store i32 %v4_13f84, i32* @r0, align 4
  %v1_13f88 = load i32, i32* @r4, align 4
  %v2_13f88 = add i32 %v1_13f88, 860
  %v3_13f88 = inttoptr i32 %v2_13f88 to i32*
  store i32 %v4_13f84, i32* %v3_13f88, align 4
  br label %dec_label_pc_13f8c

dec_label_pc_13f8c:                               ; preds = %dec_label_pc_13f14, %dec_label_pc_13f40
  %v2_13f90 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_13f90, i32* @r4, align 4
  %v1_13f94 = load i32, i32* @r0, align 4
  ret i32 %v1_13f94

; uselistorder directives
  uselistorder i32 %v0_13f40, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13f38, { 1, 0 }
  uselistorder i32 %v1_13f1c, { 1, 0 }
  uselistorder i32 %v0_13f08, { 0, 2, 1 }
  uselistorder i32 %v0_13ee4, { 1, 0 }
  uselistorder i32 %v1_13e34, { 1, 0, 2 }
  uselistorder i32 %v0_13e4c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_13e0c, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 17 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 12, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 2, 3, 12 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 4, 2, 1, 5, 6 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder i32 30, { 1, 11, 2, 6, 3, 7, 4, 8, 0, 9, 10, 5, 12 }
  uselistorder label %dec_label_pc_13f8c, { 1, 0 }
  uselistorder label %dec_label_pc_13f24.dec_label_pc_13f24_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_13f08, { 1, 0 }
  uselistorder label %dec_label_pc_13ed4, { 1, 0 }
  uselistorder label %dec_label_pc_13ec8, { 1, 0 }
  uselistorder label %dec_label_pc_13ec4, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_13e80, { 1, 0 }
}

define i32 @function_13f98() local_unnamed_addr {
dec_label_pc_13f98:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_13f98 = load i32, i32* @r4, align 4
  %v6_13f98 = load i32, i32* @r5, align 4
  %v9_13f98 = load i32, i32* @r6, align 4
  %v12_13f98 = load i32, i32* @r7, align 4
  %v18_13f98 = load i32, i32* @lr, align 4
  %v0_13fa0 = load i32, i32* @r0, align 4
  store i32 %v0_13fa0, i32* @r6, align 4
  %v2_13fa0 = icmp eq i32 %v0_13fa0, 0
  %v2_13fa4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 131404, i32* @r7, align 4
  br i1 %v2_13fa0, label %dec_label_pc_141ac, label %dec_label_pc_13fb0

dec_label_pc_13fb0:                               ; preds = %dec_label_pc_13f98
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_13fb4 = load i32, i32* inttoptr (i32 131472 to i32*), align 16
  store i32 %v4_13fb4, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_13fb4, i32* %r2.global-to-local, align 4
  %v4_13fc0 = load i32, i32* inttoptr (i32 131440 to i32*), align 16
  store i32 %v4_13fc0, i32* %r1.global-to-local, align 4
  store i32 %v2_13fa4, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_13fcc = load i32, i32* inttoptr (i32 131476 to i32*), align 4
  store i32 %v4_13fcc, i32* %ip.global-to-local, align 4
  store i32 81880, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13fcc)
  %v0_13fd8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13fd8, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_13fe0 = load i32, i32* @r7, align 4
  %v2_13fe0 = add i32 %v0_13fe0, 16
  %v3_13fe0 = inttoptr i32 %v2_13fe0 to i32*
  %v4_13fe0 = load i32, i32* %v3_13fe0, align 4
  store i32 %v4_13fe0, i32* %ip.global-to-local, align 4
  store i32 81900, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13fe0)
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_13ff0 = load i32, i32* @r7, align 4
  %v2_13ff0 = add i32 %v0_13ff0, 32
  %v3_13ff0 = inttoptr i32 %v2_13ff0 to i32*
  %v4_13ff0 = load i32, i32* %v3_13ff0, align 4
  store i32 %v4_13ff0, i32* @lr, align 4
  %v0_13ff4 = load i32, i32* @r6, align 4
  %v1_13ff4 = add i32 %v0_13ff4, -4
  %v2_13ff4 = inttoptr i32 %v1_13ff4 to i32*
  %v3_13ff4 = load i32, i32* %v2_13ff4, align 4
  store i32 %v3_13ff4, i32* %r2.global-to-local, align 4
  %v1_13ff8 = inttoptr i32 %v4_13ff0 to i32*
  %v2_13ff8 = load i32, i32* %v1_13ff8, align 4
  store i32 %v2_13ff8, i32* %r3.global-to-local, align 4
  %v1_13ffc = and i32 %v3_13ff4, -4
  store i32 %v1_13ffc, i32* %ip.global-to-local, align 4
  %v1_14000 = add i32 %v0_13ff4, -8
  store i32 %v1_14000, i32* @r5, align 4
  store i32 %v1_14000, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_13ffc, %v2_13ff8
  br i1 %tmp, label %dec_label_pc_14030, label %dec_label_pc_14010

dec_label_pc_14010:                               ; preds = %dec_label_pc_13fb0
  %v1_14010 = or i32 %v2_13ff8, 3
  store i32 %v1_14010, i32* %r3.global-to-local, align 4
  store i32 %v1_14010, i32* %v1_13ff8, align 4
  %v3_14014 = load i32, i32* @lr, align 4
  %v4_14014 = add i32 %v3_14014, -8
  store i32 %v4_14014, i32* %lr.global-to-local, align 4
  %v0_14018 = load i32, i32* %ip.global-to-local, align 4
  %v3_14018 = udiv i32 %v0_14018, 8
  store i32 %v3_14018, i32* %r1.global-to-local, align 4
  %v1_1401c = add i32 %v3_14014, -4
  store i32 %v1_1401c, i32* %r2.global-to-local, align 4
  %v4_14020 = mul nuw i32 %v3_14018, 4
  %v5_14020 = add i32 %v4_14020, %v1_1401c
  %v6_14020 = inttoptr i32 %v5_14020 to i32*
  %v7_14020 = load i32, i32* %v6_14020, align 4
  store i32 %v7_14020, i32* %r3.global-to-local, align 4
  %v1_14024 = load i32, i32* @r5, align 4
  %v2_14024 = add i32 %v1_14024, 8
  %v3_14024 = inttoptr i32 %v2_14024 to i32*
  store i32 %v7_14020, i32* %v3_14024, align 4
  %v0_14028 = load i32, i32* @r5, align 4
  %v1_14028 = load i32, i32* %r2.global-to-local, align 4
  %v2_14028 = load i32, i32* %r1.global-to-local, align 4
  %v5_14028 = mul i32 %v2_14028, 4
  %v6_14028 = add i32 %v5_14028, %v1_14028
  %v7_14028 = inttoptr i32 %v6_14028 to i32*
  store i32 %v0_14028, i32* %v7_14028, align 4
  br label %dec_label_pc_14194

dec_label_pc_14030:                               ; preds = %dec_label_pc_13fb0
  %v1_14030 = and i32 %v3_13ff4, 2
  %v2_14030 = icmp eq i32 %v1_14030, 0
  br i1 %v2_14030, label %dec_label_pc_14038, label %dec_label_pc_1416c

dec_label_pc_14038:                               ; preds = %dec_label_pc_14030
  %v1_14038 = or i32 %v2_13ff8, 1
  store i32 %v1_14038, i32* %r3.global-to-local, align 4
  store i32 %v1_14038, i32* %v1_13ff8, align 4
  %v0_14040 = load i32, i32* @r6, align 4
  %v1_14040 = add i32 %v0_14040, -4
  %v2_14040 = inttoptr i32 %v1_14040 to i32*
  %v3_14040 = load i32, i32* %v2_14040, align 4
  store i32 %v3_14040, i32* %r3.global-to-local, align 4
  %v0_14044 = load i32, i32* @r5, align 4
  %v1_14044 = load i32, i32* %ip.global-to-local, align 4
  %v2_14044 = add i32 %v1_14044, %v0_14044
  store i32 %v2_14044, i32* %lr.global-to-local, align 4
  %v1_14048 = urem i32 %v3_14040, 2
  %v2_14048 = icmp eq i32 %v1_14048, 0
  %v1_1404c = add i32 %v2_14044, 4
  %v2_1404c = inttoptr i32 %v1_1404c to i32*
  %v3_1404c = load i32, i32* %v2_1404c, align 4
  store i32 %v3_1404c, i32* %r8.global-to-local, align 4
  br i1 %v2_14048, label %dec_label_pc_14054, label %dec_label_pc_14088

dec_label_pc_14054:                               ; preds = %dec_label_pc_14038
  %v1_14054 = add i32 %v0_14040, -8
  %v2_14054 = inttoptr i32 %v1_14054 to i32*
  %v3_14054 = load i32, i32* %v2_14054, align 4
  store i32 %v3_14054, i32* %r1.global-to-local, align 4
  %v2_14058 = sub i32 %v0_14044, %v3_14054
  store i32 %v2_14058, i32* %r3.global-to-local, align 4
  %v1_1405c = add i32 %v2_14058, 8
  %v2_1405c = inttoptr i32 %v1_1405c to i32*
  %v3_1405c = load i32, i32* %v2_1405c, align 4
  store i32 %v3_1405c, i32* %r2.global-to-local, align 4
  %v1_14060 = add i32 %v3_1405c, 12
  %v2_14060 = inttoptr i32 %v1_14060 to i32*
  %v3_14060 = load i32, i32* %v2_14060, align 4
  store i32 %v3_14060, i32* %r4.global-to-local, align 4
  %v9_14064 = icmp eq i32 %v3_14060, %v2_14058
  %v1_14068 = add i32 %v2_14058, 12
  %v2_14068 = inttoptr i32 %v1_14068 to i32*
  %v3_14068 = load i32, i32* %v2_14068, align 4
  store i32 %v3_14068, i32* %r0.global-to-local, align 4
  br i1 %v9_14064, label %dec_label_pc_14070, label %dec_label_pc_140d4

dec_label_pc_14070:                               ; preds = %dec_label_pc_14054
  %v1_14070 = add i32 %v3_14068, 8
  %v2_14070 = inttoptr i32 %v1_14070 to i32*
  %v3_14070 = load i32, i32* %v2_14070, align 4
  store i32 %v3_14070, i32* %r3.global-to-local, align 4
  %v9_14074 = icmp eq i32 %v3_14070, %v2_14058
  br i1 %v9_14074, label %dec_label_pc_1407c, label %dec_label_pc_140d4

dec_label_pc_1407c:                               ; preds = %dec_label_pc_14070
  store i32 %v3_1405c, i32* %v2_14070, align 4
  %v0_14080 = load i32, i32* %r0.global-to-local, align 4
  %v1_14080 = load i32, i32* %r2.global-to-local, align 4
  %v2_14080 = add i32 %v1_14080, 12
  %v3_14080 = inttoptr i32 %v2_14080 to i32*
  store i32 %v0_14080, i32* %v3_14080, align 4
  %v0_14084 = load i32, i32* %ip.global-to-local, align 4
  %v1_14084 = load i32, i32* %r1.global-to-local, align 4
  %v2_14084 = add i32 %v1_14084, %v0_14084
  store i32 %v2_14084, i32* %ip.global-to-local, align 4
  %v0_14094.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_14098.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_14088

dec_label_pc_14088:                               ; preds = %dec_label_pc_14038, %dec_label_pc_1407c
  %v0_14114 = phi i32 [ %v1_14044, %dec_label_pc_14038 ], [ %v2_14084, %dec_label_pc_1407c ]
  %v0_14098 = phi i32 [ %v3_1404c, %dec_label_pc_14038 ], [ %v0_14098.pre, %dec_label_pc_1407c ]
  %v1_140ac = phi i32 [ %v2_14044, %dec_label_pc_14038 ], [ %v0_14094.pre, %dec_label_pc_1407c ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_1408c = load i32, i32* @r7, align 4
  %v2_1408c = add i32 %v0_1408c, 32
  %v3_1408c = inttoptr i32 %v2_1408c to i32*
  %v4_1408c = load i32, i32* %v3_1408c, align 4
  store i32 %v4_1408c, i32* %r2.global-to-local, align 4
  %v1_14090 = add i32 %v4_1408c, 44
  %v2_14090 = inttoptr i32 %v1_14090 to i32*
  %v3_14090 = load i32, i32* %v2_14090, align 4
  store i32 %v3_14090, i32* %r3.global-to-local, align 4
  %v9_14094 = icmp eq i32 %v1_140ac, %v3_14090
  %v1_14098 = and i32 %v0_14098, -4
  store i32 %v1_14098, i32* %r0.global-to-local, align 4
  br i1 %v9_14094, label %dec_label_pc_14114, label %dec_label_pc_140a0

dec_label_pc_140a0:                               ; preds = %dec_label_pc_14088
  %v2_140a0 = add i32 %v1_140ac, %v1_14098
  store i32 %v2_140a0, i32* %r3.global-to-local, align 4
  %v1_140a4 = add i32 %v2_140a0, 4
  %v2_140a4 = inttoptr i32 %v1_140a4 to i32*
  %v3_140a4 = load i32, i32* %v2_140a4, align 4
  store i32 %v3_140a4, i32* %r3.global-to-local, align 4
  %v1_140a8 = urem i32 %v3_140a4, 2
  %v2_140a8 = icmp eq i32 %v1_140a8, 0
  %v2_140ac = add i32 %v1_140ac, 4
  %v3_140ac = inttoptr i32 %v2_140ac to i32*
  store i32 %v1_14098, i32* %v3_140ac, align 4
  br i1 %v2_140a8, label %dec_label_pc_140b4, label %dec_label_pc_140a0.dec_label_pc_140e4_crit_edge

dec_label_pc_140a0.dec_label_pc_140e4_crit_edge:  ; preds = %dec_label_pc_140a0
  %v0_140f4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_140e4

dec_label_pc_140b4:                               ; preds = %dec_label_pc_140a0
  %v0_140b4 = load i32, i32* %lr.global-to-local, align 4
  %v1_140b4 = add i32 %v0_140b4, 8
  %v2_140b4 = inttoptr i32 %v1_140b4 to i32*
  %v3_140b4 = load i32, i32* %v2_140b4, align 4
  store i32 %v3_140b4, i32* %r1.global-to-local, align 4
  %v1_140b8 = add i32 %v3_140b4, 12
  %v2_140b8 = inttoptr i32 %v1_140b8 to i32*
  %v3_140b8 = load i32, i32* %v2_140b8, align 4
  store i32 %v3_140b8, i32* %r3.global-to-local, align 4
  %v9_140bc = icmp eq i32 %v3_140b8, %v0_140b4
  %v1_140c0 = add i32 %v0_140b4, 12
  %v2_140c0 = inttoptr i32 %v1_140c0 to i32*
  %v3_140c0 = load i32, i32* %v2_140c0, align 4
  store i32 %v3_140c0, i32* %r2.global-to-local, align 4
  br i1 %v9_140bc, label %dec_label_pc_140c8, label %dec_label_pc_140d4

dec_label_pc_140c8:                               ; preds = %dec_label_pc_140b4
  %v1_140c8 = add i32 %v3_140c0, 8
  %v2_140c8 = inttoptr i32 %v1_140c8 to i32*
  %v3_140c8 = load i32, i32* %v2_140c8, align 4
  store i32 %v3_140c8, i32* %r3.global-to-local, align 4
  %v9_140cc = icmp eq i32 %v3_140c8, %v0_140b4
  br i1 %v9_140cc, label %dec_label_pc_140d8, label %dec_label_pc_140d4

dec_label_pc_140d4:                               ; preds = %dec_label_pc_140b4, %dec_label_pc_14070, %dec_label_pc_14054, %dec_label_pc_140c8
  %v0_140d4 = call i32 @function_14214()
  store i32 %v0_140d4, i32* %r0.global-to-local, align 4
  %v0_140d8.pre = load i32, i32* @r1, align 4
  %v1_140d8.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_140d8

dec_label_pc_140d8:                               ; preds = %dec_label_pc_140c8, %dec_label_pc_140d4
  %v1_140d8 = phi i32 [ %v3_140c0, %dec_label_pc_140c8 ], [ %v1_140d8.pre, %dec_label_pc_140d4 ]
  %v0_140d8 = phi i32 [ %v3_140b4, %dec_label_pc_140c8 ], [ %v0_140d8.pre, %dec_label_pc_140d4 ]
  %v2_140d8 = add i32 %v1_140d8, 8
  %v3_140d8 = inttoptr i32 %v2_140d8 to i32*
  store i32 %v0_140d8, i32* %v3_140d8, align 4
  %v0_140dc = load i32, i32* %r2.global-to-local, align 4
  %v1_140dc = load i32, i32* %r1.global-to-local, align 4
  %v2_140dc = add i32 %v1_140dc, 12
  %v3_140dc = inttoptr i32 %v2_140dc to i32*
  store i32 %v0_140dc, i32* %v3_140dc, align 4
  %v0_140e0 = load i32, i32* %ip.global-to-local, align 4
  %v1_140e0 = load i32, i32* %r0.global-to-local, align 4
  %v2_140e0 = add i32 %v1_140e0, %v0_140e0
  store i32 %v2_140e0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_140e4

dec_label_pc_140e4:                               ; preds = %dec_label_pc_140a0.dec_label_pc_140e4_crit_edge, %dec_label_pc_140d8
  %v0_140f4 = phi i32 [ %v0_140f4.pre, %dec_label_pc_140a0.dec_label_pc_140e4_crit_edge ], [ %v2_140e0, %dec_label_pc_140d8 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_140e8 = load i32, i32* @r7, align 4
  %v2_140e8 = add i32 %v0_140e8, 32
  %v3_140e8 = inttoptr i32 %v2_140e8 to i32*
  %v4_140e8 = load i32, i32* %v3_140e8, align 4
  %v1_140ec = add i32 %v4_140e8, 52
  store i32 %v1_140ec, i32* %r3.global-to-local, align 4
  %v1_140f0 = add i32 %v4_140e8, 60
  %v2_140f0 = inttoptr i32 %v1_140f0 to i32*
  %v3_140f0 = load i32, i32* %v2_140f0, align 4
  store i32 %v3_140f0, i32* %r1.global-to-local, align 4
  %v1_140f4 = or i32 %v0_140f4, 1
  store i32 %v1_140f4, i32* %r2.global-to-local, align 4
  %v1_140f8 = load i32, i32* %r4.global-to-local, align 4
  %v2_140f8 = add i32 %v1_140f8, 12
  %v3_140f8 = inttoptr i32 %v2_140f8 to i32*
  store i32 %v1_140ec, i32* %v3_140f8, align 4
  %v0_140fc = load i32, i32* %r1.global-to-local, align 4
  %v1_140fc = load i32, i32* %r4.global-to-local, align 4
  %v2_140fc = add i32 %v1_140fc, 8
  %v3_140fc = inttoptr i32 %v2_140fc to i32*
  store i32 %v0_140fc, i32* %v3_140fc, align 4
  %v0_14100 = load i32, i32* %r2.global-to-local, align 4
  %v1_14100 = load i32, i32* %r4.global-to-local, align 4
  %v2_14100 = add i32 %v1_14100, 4
  %v3_14100 = inttoptr i32 %v2_14100 to i32*
  store i32 %v0_14100, i32* %v3_14100, align 4
  %v0_14104 = load i32, i32* %ip.global-to-local, align 4
  %v1_14104 = load i32, i32* %r4.global-to-local, align 4
  %v3_14104 = add i32 %v1_14104, %v0_14104
  %v4_14104 = inttoptr i32 %v3_14104 to i32*
  store i32 %v0_14104, i32* %v4_14104, align 4
  %v0_14108 = load i32, i32* %r4.global-to-local, align 4
  %v1_14108 = load i32, i32* %r1.global-to-local, align 4
  %v2_14108 = add i32 %v1_14108, 12
  %v3_14108 = inttoptr i32 %v2_14108 to i32*
  store i32 %v0_14108, i32* %v3_14108, align 4
  %v0_1410c = load i32, i32* %r4.global-to-local, align 4
  %v1_1410c = load i32, i32* %r3.global-to-local, align 4
  %v2_1410c = add i32 %v1_1410c, 8
  %v3_1410c = inttoptr i32 %v2_1410c to i32*
  store i32 %v0_1410c, i32* %v3_1410c, align 4
  br label %dec_label_pc_14124

dec_label_pc_14114:                               ; preds = %dec_label_pc_14088
  %v2_14114 = add i32 %v1_14098, %v0_14114
  store i32 %v2_14114, i32* %ip.global-to-local, align 4
  %v1_14118 = or i32 %v2_14114, 1
  store i32 %v1_14118, i32* %r3.global-to-local, align 4
  %v0_1411c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1411c, i32* %v2_14090, align 4
  %v0_14120 = load i32, i32* %r3.global-to-local, align 4
  %v1_14120 = load i32, i32* %r4.global-to-local, align 4
  %v2_14120 = add i32 %v1_14120, 4
  %v3_14120 = inttoptr i32 %v2_14120 to i32*
  store i32 %v0_14120, i32* %v3_14120, align 4
  br label %dec_label_pc_14124

dec_label_pc_14124:                               ; preds = %dec_label_pc_140e4, %dec_label_pc_14114
  %v0_14124 = load i32, i32* %ip.global-to-local, align 4
  %v3_14128 = icmp ult i32 %v0_14124, 131070
  br i1 %v3_14128, label %dec_label_pc_14194, label %dec_label_pc_1412c

dec_label_pc_1412c:                               ; preds = %dec_label_pc_14124
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_14130 = load i32, i32* @r7, align 4
  %v2_14130 = add i32 %v0_14130, 32
  %v3_14130 = inttoptr i32 %v2_14130 to i32*
  %v4_14130 = load i32, i32* %v3_14130, align 4
  store i32 %v4_14130, i32* @r4, align 4
  %v1_14134 = inttoptr i32 %v4_14130 to i32*
  %v2_14134 = load i32, i32* %v1_14134, align 4
  store i32 %v2_14134, i32* %r3.global-to-local, align 4
  %v1_14138 = and i32 %v2_14134, 2
  %v2_14138 = icmp eq i32 %v1_14138, 0
  br i1 %v2_14138, label %bb15, label %bb

bb:                                               ; preds = %dec_label_pc_1412c
  store i32 %v4_14130, i32* %r0.global-to-local, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_1412c, %bb
  store i32 82244, i32* @lr, align 4
  %v1_14140 = xor i1 %v2_14138, true
  call void @__pseudo_cond_branch(i1 %v1_14140, i32 ptrtoint (i32* @global_var_13de4.525 to i32))
  %v0_14144 = load i32, i32* @r4, align 4
  %v1_14144 = add i32 %v0_14144, 44
  %v2_14144 = inttoptr i32 %v1_14144 to i32*
  %v3_14144 = load i32, i32* %v2_14144, align 4
  store i32 %v3_14144, i32* %r3.global-to-local, align 4
  %v1_14148 = add i32 %v3_14144, 4
  %v2_14148 = inttoptr i32 %v1_14148 to i32*
  %v3_14148 = load i32, i32* %v2_14148, align 4
  store i32 %v3_14148, i32* %r3.global-to-local, align 4
  %v1_1414c = add i32 %v0_14144, 836
  %v2_1414c = inttoptr i32 %v1_1414c to i32*
  %v3_1414c = load i32, i32* %v2_1414c, align 4
  store i32 %v3_1414c, i32* %r2.global-to-local, align 4
  %v1_14150 = and i32 %v3_14148, -4
  store i32 %v1_14150, i32* %r3.global-to-local, align 4
  %v3_14154 = icmp ult i32 %v1_14150, %v3_1414c
  br i1 %v3_14154, label %dec_label_pc_14194, label %dec_label_pc_1415c

dec_label_pc_1415c:                               ; preds = %bb15
  store i32 %v0_14144, i32* %r1.global-to-local, align 4
  %v1_14160 = add i32 %v0_14144, 840
  %v2_14160 = inttoptr i32 %v1_14160 to i32*
  %v3_14160 = load i32, i32* %v2_14160, align 4
  store i32 %v3_14160, i32* %r0.global-to-local, align 4
  %v2_14164 = call i32 @function_13d34(i32 %v3_14160, i32 %v0_14144)
  store i32 %v2_14164, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14194

dec_label_pc_1416c:                               ; preds = %dec_label_pc_14030
  %v2_1416c = inttoptr i32 %v1_14000 to i32*
  %v3_1416c = load i32, i32* %v2_1416c, align 4
  store i32 %v3_1416c, i32* %r0.global-to-local, align 4
  %v1_14170 = add i32 %v4_13ff0, 848
  %v2_14170 = inttoptr i32 %v1_14170 to i32*
  %v3_14170 = load i32, i32* %v2_14170, align 4
  store i32 %v3_14170, i32* %r2.global-to-local, align 4
  %v1_14174 = add i32 %v4_13ff0, 868
  %v2_14174 = inttoptr i32 %v1_14174 to i32*
  %v3_14174 = load i32, i32* %v2_14174, align 4
  %v2_14178 = add i32 %v3_1416c, %v1_13ffc
  store i32 %v2_14178, i32* %r1.global-to-local, align 4
  %v1_1417c = add i32 %v3_14170, -1
  store i32 %v1_1417c, i32* %r2.global-to-local, align 4
  %v2_14180 = sub i32 %v3_14174, %v2_14178
  store i32 %v2_14180, i32* %r3.global-to-local, align 4
  store i32 %v2_14180, i32* %v2_14174, align 4
  %v1_14188 = load i32, i32* @lr, align 4
  %v2_14188 = add i32 %v1_14188, 848
  %v3_14188 = inttoptr i32 %v2_14188 to i32*
  store i32 %v1_1417c, i32* %v3_14188, align 4
  %v0_1418c = load i32, i32* %r0.global-to-local, align 4
  %v1_1418c = load i32, i32* @r5, align 4
  %v2_1418c = sub i32 %v1_1418c, %v0_1418c
  store i32 %v2_1418c, i32* %r0.global-to-local, align 4
  %v4_14190 = call i32 @function_15580(i32 %v2_1418c, i32 %v2_14178, i32 %v1_1417c, i32 %v2_14180)
  store i32 %v4_14190, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14194

dec_label_pc_14194:                               ; preds = %bb15, %dec_label_pc_14124, %dec_label_pc_1415c, %dec_label_pc_14010, %dec_label_pc_1416c
  store i32 %v2_13fa4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_141a0 = load i32, i32* @r7, align 4
  %v2_141a0 = add i32 %v0_141a0, 24
  %v3_141a0 = inttoptr i32 %v2_141a0 to i32*
  %v4_141a0 = load i32, i32* %v3_141a0, align 4
  store i32 %v4_141a0, i32* @ip, align 4
  store i32 82348, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_141a0)
  br label %dec_label_pc_141ac

dec_label_pc_141ac:                               ; preds = %dec_label_pc_13f98, %dec_label_pc_14194
  store i32 %v3_13f98, i32* @r4, align 4
  store i32 %v6_13f98, i32* @r5, align 4
  store i32 %v9_13f98, i32* @r6, align 4
  store i32 %v12_13f98, i32* @r7, align 4
  store i32 %v18_13f98, i32* @lr, align 4
  ret i32 %v2_13fa4

; uselistorder directives
  uselistorder i32 %v0_14144, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_14104, { 1, 0 }
  uselistorder i32 %v1_14044, { 1, 0 }
  uselistorder i32 %v0_14044, { 1, 0 }
  uselistorder i32 %v3_14018, { 1, 0 }
  uselistorder i32 %v1_13ffc, { 1, 0, 2 }
  uselistorder i32 %v2_13ff8, { 1, 2, 0, 3 }
  uselistorder i32 %v4_13ff0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13fa0, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 3, 13, 0, 1, 2, 14, 4, 5, 11, 12, 6, 7, 8, 10, 9 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 4, 0, 5, 1, 6, 3, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder label %dec_label_pc_141ac, { 1, 0 }
  uselistorder label %dec_label_pc_14194, { 4, 2, 0, 1, 3 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %dec_label_pc_14124, { 1, 0 }
  uselistorder label %dec_label_pc_140e4, { 1, 0 }
  uselistorder label %dec_label_pc_140d8, { 1, 0 }
  uselistorder label %dec_label_pc_140d4, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_14088, { 1, 0 }
}

define i32 @function_141bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_141bc:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_141bc = load i1, i1* @cpsr_z, align 1
  %v2_141bc = load i32, i32* @r4, align 4
  br i1 %v0_141bc, label %bb, label %dec_label_pc_141bc..thread4_crit_edge

dec_label_pc_141bc..thread4_crit_edge:            ; preds = %dec_label_pc_141bc
  %v0_141e8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_141bc
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_141bc..thread4_crit_edge, %bb
  %v0_141e8 = phi i32 [ %v0_141e8.pre, %dec_label_pc_141bc..thread4_crit_edge ], [ 0, %bb ]
  store i32 %v2_141bc, i32* %stack_var_-12, align 4
  %v6_141d4 = load i32, i32* @r5, align 4
  %v9_141d4 = load i32, i32* @lr, align 4
  %v4_141e4 = load i32, i32* inttoptr (i32 131436 to i32*), align 4
  store i32 %v4_141e4, i32* @r5, align 4
  store i32 %v0_141e8, i32* @r4, align 4
  store i32 %v4_141e4, i32* @r0, align 4
  %v0_141f4 = call i32 @function_13de4()
  %v0_141f8 = load i32, i32* @r4, align 4
  store i32 %v0_141f8, i32* %r0.global-to-local, align 4
  %v0_141fc = load i32, i32* @r5, align 4
  %v2_14204 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14204, i32* @r4, align 4
  store i32 %v6_141d4, i32* @r5, align 4
  store i32 %v9_141d4, i32* @lr, align 4
  %v2_14208 = call i32 @function_13d34(i32 %v0_141f8, i32 %v0_141fc)
  store i32 %v2_14208, i32* %r0.global-to-local, align 4
  %v0_1420c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1420c, label %bb13, label %.thread5

bb13:                                             ; preds = %.thread4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %.thread4, %bb13
  %v4_14210 = phi i32 [ %v2_14208, %.thread4 ], [ 0, %bb13 ]
  ret i32 %v4_14210

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 5, 3, 4, 0, 1 }
  uselistorder i32 (i32, i32)* @function_13d34, { 1, 0 }
  uselistorder i32 ()* @function_13de4, { 3, 2, 1, 0 }
  uselistorder i32* inttoptr (i32 131436 to i32*), { 15, 5, 6, 7, 8, 9, 4, 10, 3, 11, 0, 12, 13, 2, 14, 1 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_14214() local_unnamed_addr {
dec_label_pc_14214:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 131404, i32* @r5, align 4
  %v4_1422c = load i32, i32* inttoptr (i32 131420 to i32*), align 4
  store i32 82488, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1422c)
  %v2_14248 = ptrtoint i32* %stack_var_-8 to i32
  store i32 32, i32* %stack_var_-8, align 4
  %v3_14254 = call i32 @function_12498(i32 1, i32 %v2_14248, i32 0)
  %v4_1425c = load i32, i32* @global_var_203e8.533, align 4
  %v2_14260 = icmp eq i32 %v4_1425c, 0
  br i1 %v2_14260, label %dec_label_pc_14268, label %dec_label_pc_142a8

dec_label_pc_14268:                               ; preds = %dec_label_pc_14214
  store i32 1, i32* @global_var_203e8.533, align 4
  br label %dec_label_pc_14270

dec_label_pc_14270:                               ; preds = %dec_label_pc_142b8, %dec_label_pc_14268
  %v0_14274 = load i32, i32* @r5, align 4
  %v2_14274 = add i32 %v0_14274, 160
  store i32 %v2_14274, i32* @r4, align 4
  %v2_14280 = add i32 %v0_14274, 36
  %v3_14280 = inttoptr i32 %v2_14280 to i32*
  %v4_14280 = load i32, i32* %v3_14280, align 4
  call void @__pseudo_branch(i32 %v4_14280)
  %v1_14290 = call i32 @function_12d1c(i32 6)
  %v0_1429c = load i32, i32* @r5, align 4
  %v2_1429c = add i32 %v0_1429c, 16
  %v3_1429c = inttoptr i32 %v2_1429c to i32*
  %v4_1429c = load i32, i32* %v3_1429c, align 4
  store i32 82600, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1429c)
  %v4_142ac.pre = load i32, i32* @global_var_203e8.533, align 4
  br label %dec_label_pc_142a8

dec_label_pc_142a8:                               ; preds = %dec_label_pc_14214, %dec_label_pc_14270
  %v0_142bc = phi i32 [ %v4_1425c, %dec_label_pc_14214 ], [ %v4_142ac.pre, %dec_label_pc_14270 ]
  %v7_142b0 = icmp eq i32 %v0_142bc, 1
  br i1 %v7_142b0, label %dec_label_pc_142b8, label %dec_label_pc_142f4

dec_label_pc_142b8:                               ; preds = %dec_label_pc_142a8
  %v2_142b8 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_142b8, i32* @r4, align 4
  store i32 2, i32* @global_var_203e8.533, align 4
  store i32 20, i32* @r2, align 4
  %v2_142d0 = bitcast i32* %stack_var_-28 to i8*
  %v3_142d0 = call i32 @function_12950(i8* %v2_142d0, i32 0)
  %v3_142ec = call i32 @function_15080(i32 6, i32 %v2_142b8, i32 0)
  br label %dec_label_pc_14270

dec_label_pc_142f4:                               ; preds = %dec_label_pc_142a8
  %v7_142f4 = icmp eq i32 %v0_142bc, 2
  br i1 %v7_142f4, label %dec_label_pc_142fc, label %dec_label_pc_14308

dec_label_pc_142fc:                               ; preds = %dec_label_pc_142f4
  store i32 3, i32* @global_var_203e8.533, align 4
  %v0_14304 = call i32 @function_14214()
  %v4_14308.pre = load i32, i32* @global_var_203e8.533, align 4
  br label %dec_label_pc_14308

dec_label_pc_14308:                               ; preds = %dec_label_pc_142f4, %dec_label_pc_142fc
  %v1_14310 = phi i32 [ %v0_142bc, %dec_label_pc_142f4 ], [ %v4_14308.pre, %dec_label_pc_142fc ]
  %v7_1430c = icmp eq i32 %v1_14310, 3
  br i1 %v7_1430c, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_14308
  store i32 4, i32* @global_var_203e8.533, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_14308, %bb
  call void @__pseudo_cond_branch(i1 %v7_1430c, i32 ptrtoint (i32* @global_var_15670.535 to i32))
  br label %dec_label_pc_14320

dec_label_pc_14320:                               ; preds = %dec_label_pc_14320, %.thread1
  %v0_14320 = call i32 @function_14214()
  br label %dec_label_pc_14320

; uselistorder directives
  uselistorder i32 ()* @function_14214, { 1, 0, 5, 4, 6, 3, 2 }
  uselistorder i32 6, { 14, 15, 76, 16, 36, 37, 17, 35, 3, 38, 18, 39, 0, 19, 20, 21, 22, 23, 24, 1, 25, 26, 27, 28, 5, 29, 40, 41, 42, 6, 43, 44, 45, 46, 7, 47, 48, 49, 50, 8, 51, 9, 52, 53, 30, 54, 10, 55, 56, 57, 31, 58, 11, 59, 60, 32, 61, 62, 63, 64, 65, 33, 66, 12, 67, 68, 69, 70, 71, 72, 34, 73, 13, 74, 2, 4, 75 }
  uselistorder i32* @global_var_203e8.533, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32* inttoptr (i32 131420 to i32*), { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_14308, { 1, 0 }
  uselistorder label %dec_label_pc_142a8, { 1, 0 }
}

define i32 @function_1432c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1432c:
  %v0_1432c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1432c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_1432c
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1432c, %bb
  %v4_14338 = phi i32 [ %arg1, %dec_label_pc_1432c ], [ 0, %bb ]
  ret i32 %v4_14338

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_1433c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1433c:
  %stack_var_-16 = alloca i32, align 4
  store i32 131404, i32* @r5, align 4
  %v4_14348 = load i32, i32* inttoptr (i32 131492 to i32*), align 4
  store i32 %v4_14348, i32* @r4, align 4
  %v2_14350 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_14368 = load i32, i32* inttoptr (i32 131476 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_14368)
  %v0_1437c = load i32, i32* @r5, align 4
  %v2_1437c = add i32 %v0_1437c, 16
  %v3_1437c = inttoptr i32 %v2_1437c to i32*
  %v4_1437c = load i32, i32* %v3_1437c, align 4
  call void @__pseudo_branch(i32 %v4_1437c)
  %v4_1438c = load i32, i32* @global_var_203ec.542, align 4
  %v2_14390 = icmp eq i32 %v4_1438c, 0
  br i1 %v2_14390, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_1433c
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1433c, %bb
  %v2_1439c = xor i1 %v2_14390, true
  call void @__pseudo_cond_branch(i1 %v2_1439c, i32 %v4_1438c)
  store i32 %v2_14350, i32* @r0, align 4
  %v0_143ac = load i32, i32* @r5, align 4
  %v2_143ac = add i32 %v0_143ac, 24
  %v3_143ac = inttoptr i32 %v2_143ac to i32*
  %v4_143ac = load i32, i32* %v3_143ac, align 4
  call void @__pseudo_branch(i32 %v4_143ac)
  %v0_143b8 = call i32 @function_14c08()
  %v0_143c0 = load i32, i32* @r5, align 4
  %v9_143c0 = icmp eq i32 %v0_143c0, 41128
  br i1 %v9_143c0, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_143c8 = xor i1 %v9_143c0, true
  call void @__pseudo_cond_branch(i1 %v2_143c8, i32 ptrtoint (i32* @global_var_160a4.545 to i32))
  %v0_143cc = load i32, i32* @r6, align 4
  %v1_143d0 = call i32 @function_15670(i32 %v0_143cc)
  %v0_143d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_143d4, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  %v5_143d4 = mul i32 %v1_143d0, 268435456
  %v6_143d4 = and i32 %v5_143d4, %v1_143d0
  store i32 %v6_143d4, i32* @fp, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v10_143ec = phi i32 [ %v1_143d0, %bb9 ], [ 0, %bb10 ]
  ret i32 %v10_143ec

; uselistorder directives
  uselistorder i32 %v1_143d0, { 2, 1, 0 }
  uselistorder i1 %v9_143c0, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_143f4(i32 %arg1) local_unnamed_addr {
dec_label_pc_143f4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_143f4 = load i32, i32* @r4, align 4
  %v6_143f4 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @ip, align 4
  %v2_143f8 = icmp eq i32 %arg1, 0
  store i32 0, i32* @r4, align 4
  br i1 %v2_143f8, label %dec_label_pc_1448c, label %dec_label_pc_14408

dec_label_pc_14408:                               ; preds = %dec_label_pc_143f4
  %v2_14418 = ptrtoint i32* %stack_var_-44 to i32
  store i32 65536, i32* %stack_var_-24, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v3_1442c = call i32 @function_15080(i32 17, i32 0, i32 %v2_14418)
  %v3_14430 = load i32, i32* %stack_var_-44, align 4
  %v7_14434 = icmp eq i32 %v3_14430, 1
  br i1 %v7_14434, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_14408
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_14408, %bb
  call void @__pseudo_cond_branch(i1 %v7_14434, i32 ptrtoint (i32* @global_var_12498.547 to i32))
  %v2_14448 = ptrtoint i32* %stack_var_-16 to i32
  %v2_14450 = call i32 @function_155b4(i32 %v2_14448, i32 %v2_14448)
  %v2_14454 = icmp eq i32 %v2_14450, 0
  br i1 %v2_14454, label %bb19, label %bb18

bb18:                                             ; preds = %.thread2
  %v3_14468 = load i32, i32* %stack_var_-16, align 4
  br label %bb19

bb19:                                             ; preds = %.thread2, %bb18
  %storemerge = phi i32 [ %v3_14468, %bb18 ], [ 0, %.thread2 ]
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  %v3_14478 = load i32, i32* %stack_var_-24, align 4
  %v1_1447c = and i32 %v3_14478, 65536
  %v2_1447c = icmp eq i32 %v1_1447c, 0
  br i1 %v2_1447c, label %bb20, label %.thread6

bb20:                                             ; preds = %bb19
  br label %.thread6

.thread6:                                         ; preds = %bb19, %bb20
  call void @__pseudo_cond_branch(i1 %v2_1447c, i32 ptrtoint (i32* @global_var_12498.547 to i32))
  %v0_1448c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1448c

dec_label_pc_1448c:                               ; preds = %dec_label_pc_143f4, %.thread6
  %v0_1448c = phi i32 [ %v0_1448c.pre, %.thread6 ], [ 0, %dec_label_pc_143f4 ]
  store i32 %v3_143f4, i32* @r4, align 4
  store i32 %v6_143f4, i32* @lr, align 4
  ret i32 %v0_1448c

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_15080, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1448c, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_144a0() local_unnamed_addr {
dec_label_pc_144a0:
  %stack_var_-36 = alloca i32, align 4
  store i32 131404, i32* @r4, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_17dd4.551 to i32), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v2_144c0 = call i32 @function_15ae4(i32 ptrtoint ([11 x i8]* @global_var_17dd4.551 to i32))
  store i32 %v2_144c0, i32* @r6, align 4
  %v2_144c4 = icmp eq i32 %v2_144c0, 0
  br i1 %v2_144c4, label %dec_label_pc_14544, label %dec_label_pc_144cc

dec_label_pc_144cc:                               ; preds = %dec_label_pc_144a0
  store i32 224, i32* @sl, align 4
  store i32 ptrtoint (i32* @global_var_176a4.50 to i32), i32* @r8, align 4
  %v2_144d8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_144d8, i32* @r7, align 4
  br label %bb18

dec_label_pc_144e0:                               ; preds = %bb18
  %v3_144e0 = load i32, i32* %stack_var_-36, align 4
  %v1_144e4 = inttoptr i32 %v3_144e0 to i32*
  %v2_144e4 = load i32, i32* %v1_144e4, align 4
  %v1_144e8 = inttoptr i32 %v2_144e4 to i8*
  %v2_144e8 = load i8, i8* %v1_144e8, align 1
  %v7_144ec = icmp eq i8 %v2_144e8, 99
  br i1 %v7_144ec, label %dec_label_pc_144f4, label %.backedge3

dec_label_pc_144f4:                               ; preds = %dec_label_pc_144e0
  %v1_144f4 = add i32 %v2_144e4, 1
  %v2_144f4 = inttoptr i32 %v1_144f4 to i8*
  %v3_144f4 = load i8, i8* %v2_144f4, align 1
  %v7_144f8 = icmp eq i8 %v3_144f4, 112
  br i1 %v7_144f8, label %dec_label_pc_14500, label %.backedge3

dec_label_pc_14500:                               ; preds = %dec_label_pc_144f4
  %v1_14500 = add i32 %v2_144e4, 2
  %v2_14500 = inttoptr i32 %v1_14500 to i8*
  %v3_14500 = load i8, i8* %v2_14500, align 1
  %v7_14504 = icmp eq i8 %v3_14500, 117
  br i1 %v7_14504, label %dec_label_pc_1450c, label %.backedge3

dec_label_pc_1450c:                               ; preds = %dec_label_pc_14500
  %v1_1450c = add i32 %v2_144e4, 3
  %v2_1450c = inttoptr i32 %v1_1450c to i8*
  %v3_1450c = load i8, i8* %v2_1450c, align 1
  %v4_1450c = zext i8 %v3_1450c to i32
  %v0_14510 = load i32, i32* @r4, align 4
  %v1_14510 = load i32, i32* @sl, align 4
  %v2_14510 = add i32 %v1_14510, %v0_14510
  %v3_14510 = inttoptr i32 %v2_14510 to i32*
  %v4_14510 = load i32, i32* %v3_14510, align 4
  %v2_14514 = mul nuw nsw i32 %v4_1450c, 2
  %v2_14518 = add i32 %v4_14510, %v2_14514
  %v3_14518 = inttoptr i32 %v2_14518 to i16*
  %v4_14518 = load i16, i16* %v3_14518, align 2
  %v1_1451c = and i16 %v4_14518, 8
  %v2_1451c = icmp eq i16 %v1_1451c, 0
  br i1 %v2_1451c, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_1450c
  %v1_14520 = load i32, i32* @r5, align 4
  %v2_14520 = add i32 %v1_14520, 1
  store i32 %v2_14520, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_1450c, %dec_label_pc_144e0, %dec_label_pc_144f4, %dec_label_pc_14500
  %v0_14524.pre = load i32, i32* @r6, align 4
  %v0_14530.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_144cc
  %v0_14530 = phi i32 [ %v0_14530.pre, %.backedge3 ], [ ptrtoint (i32* @global_var_176a4.50 to i32), %dec_label_pc_144cc ]
  %v0_14524 = phi i32 [ %v0_14524.pre, %.backedge3 ], [ %v2_144c0, %dec_label_pc_144cc ]
  %v4_14534 = inttoptr i32 %v0_14524 to i32*
  %v5_14534 = call i32 @function_15788(i32* %v4_14534, i32 %v2_144d8, i32 258, i32 %v0_14530)
  %v2_14538 = icmp eq i32 %v5_14534, 0
  br i1 %v2_14538, label %dec_label_pc_145a8, label %dec_label_pc_144e0

dec_label_pc_14544:                               ; preds = %dec_label_pc_144a0
  store i32 ptrtoint ([14 x i8]* @global_var_17de0.556 to i32), i32* @r0, align 4
  %v2_1454c = call i32 @function_15ae4(i32 ptrtoint ([14 x i8]* @global_var_17de0.556 to i32))
  store i32 %v2_1454c, i32* @r6, align 4
  %v2_14550 = icmp eq i32 %v2_1454c, 0
  br i1 %v2_14550, label %bb19, label %dec_label_pc_1455c

bb19:                                             ; preds = %dec_label_pc_14544
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_145a8

dec_label_pc_1455c:                               ; preds = %dec_label_pc_14544
  store i32 ptrtoint ([10 x i8]* @global_var_17df0.558 to i32), i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_17e14.560 to i32), i32* @r7, align 4
  %v2_1456c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_1456c, i32* @r4, align 4
  br label %bb21

dec_label_pc_14574:                               ; preds = %bb21
  %v0_145a0 = load i32, i32* @r8, align 4
  %v1_145a0 = inttoptr i32 %v0_145a0 to i8*
  %v3_14574 = load i32, i32* %stack_var_-36, align 4
  %v1_14578 = inttoptr i32 %v3_14574 to i32*
  %v2_14578 = load i32, i32* %v1_14578, align 4
  store i32 %v2_14578, i32* @r1, align 4
  %v4_1457c = call i32 @function_16d90(i8* %v1_145a0, i32 %v2_14578)
  %v2_14580 = icmp eq i32 %v4_1457c, 0
  br i1 %v2_14580, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_14574
  %v1_14584 = load i32, i32* @r5, align 4
  %v2_14584 = add i32 %v1_14584, 1
  store i32 %v2_14584, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_14574
  %v0_14590.pre = load i32, i32* @r7, align 4
  %v0_14594.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_1455c
  %v0_14594 = phi i32 [ %v0_14594.pre, %.backedge ], [ %v2_1454c, %dec_label_pc_1455c ]
  %v0_14590 = phi i32 [ %v0_14590.pre, %.backedge ], [ ptrtoint (i32* @global_var_17e14.560 to i32), %dec_label_pc_1455c ]
  %v4_14598 = inttoptr i32 %v0_14594 to i32*
  %v5_14598 = call i32 @function_15788(i32* %v4_14598, i32 %v2_1456c, i32 459266, i32 %v0_14590)
  %v2_1459c = icmp eq i32 %v5_14598, 0
  br i1 %v2_1459c, label %dec_label_pc_145a8, label %dec_label_pc_14574

dec_label_pc_145a8:                               ; preds = %bb18, %bb21, %bb19
  %v0_145a8 = load i32, i32* @r6, align 4
  %v1_145ac = inttoptr i32 %v0_145a8 to i32*
  %v2_145ac = call i32 @function_15ab0(i32* %v1_145ac)
  %v0_145b0 = load i32, i32* @r5, align 4
  %v2_145b0 = icmp eq i32 %v0_145b0, 0
  %.v0_145b0 = select i1 %v2_145b0, i32 1, i32 %v0_145b0
  ret i32 %.v0_145b0

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_176a4.50 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 (i32)* @function_15ae4, { 1, 0 }
  uselistorder label %dec_label_pc_145a8, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @function_145ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_145ec:
  %r2.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_149d4

bb:                                               ; preds = %dec_label_pc_145ec
  %v7_14600 = mul i32 %arg1, 4
  %v8_14600 = add i32 %v7_14600, ptrtoint (i32* @global_var_14608.563 to i32)
  call void @__pseudo_branch(i32 %v8_14600)
  br label %dec_label_pc_149d4

dec_label_pc_149d4:                               ; preds = %bb, %dec_label_pc_145ec
  %v0_149d4 = call i32 @function_128f8()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_149e0 = inttoptr i32 %v0_149d4 to i32*
  store i32 22, i32* %v2_149e0, align 4
  %v0_14b90 = load i32, i32* %r2.global-to-local, align 4
  ret i32 %v0_14b90

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_14c08() local_unnamed_addr {
dec_label_pc_14c2c.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_14c08 = load i32, i32* @r4, align 4
  store i32 %v3_14c08, i32* %stack_var_-16, align 4
  store i32 131396, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14c2c

dec_label_pc_14c2c:                               ; preds = %dec_label_pc_14c2c.dec_label_pc_14c2c_crit_edge, %dec_label_pc_14c2c.lr.ph
  %v1_14c2c = phi i32 [ %v1_14c38, %dec_label_pc_14c2c.dec_label_pc_14c2c_crit_edge ], [ 0, %dec_label_pc_14c2c.lr.ph ]
  %v0_14c2c = phi i32 [ %v0_14c2c.pre, %dec_label_pc_14c2c.dec_label_pc_14c2c_crit_edge ], [ 131396, %dec_label_pc_14c2c.lr.ph ]
  %v4_14c2c = mul i32 %v1_14c2c, 4
  %v5_14c2c = add i32 %v4_14c2c, %v0_14c2c
  %v6_14c2c = inttoptr i32 %v5_14c2c to i32*
  %v7_14c2c = load i32, i32* %v6_14c2c, align 4
  call void @__pseudo_branch(i32 %v7_14c2c)
  %v0_14c38 = load i32, i32* %r4.global-to-local, align 4
  %v1_14c38 = add i32 %v0_14c38, -1
  store i32 %v1_14c38, i32* %r4.global-to-local, align 4
  %v2_14c38 = icmp eq i32 %v0_14c38, 0
  br i1 %v2_14c38, label %dec_label_pc_14c40, label %dec_label_pc_14c2c.dec_label_pc_14c2c_crit_edge

dec_label_pc_14c2c.dec_label_pc_14c2c_crit_edge:  ; preds = %dec_label_pc_14c2c
  %v0_14c2c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14c2c

dec_label_pc_14c40:                               ; preds = %dec_label_pc_14c2c
  %v4_14c44 = load i32, i32* @global_var_203fc.576, align 4
  %v2_14c48 = icmp eq i32 %v4_14c44, 0
  br i1 %v2_14c48, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_14c40
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_14c40, %bb
  %v2_14c50 = xor i1 %v2_14c48, true
  call void @__pseudo_cond_branch(i1 %v2_14c50, i32 %v4_14c44)
  %v4_14c58 = load i32, i32* @global_var_20400.578, align 4
  %v2_14c5c = icmp eq i32 %v4_14c58, 0
  br i1 %v2_14c5c, label %bb18, label %bb17

bb17:                                             ; preds = %bb16
  br label %bb18

bb18:                                             ; preds = %bb16, %bb17
  %v2_14c64 = xor i1 %v2_14c5c, true
  call void @__pseudo_cond_branch(i1 %v2_14c64, i32 %v4_14c58)
  %v2_14c68 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14c68, i32* %r4.global-to-local, align 4
  %v1_14c6c = load i32, i32* @r0, align 4
  ret i32 %v1_14c6c

; uselistorder directives
  uselistorder i32 %v1_14c38, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_14c84(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14c84:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_14c98 = call i32 @function_12304(i32 %arg1, i32 1)
  %v3_14ca0 = icmp eq i32 %v2_14c98, -1
  store i32 131404, i32* @r3, align 4
  br i1 %v3_14ca0, label %dec_label_pc_14cac, label %dec_label_pc_14cc4

dec_label_pc_14cac:                               ; preds = %dec_label_pc_14c84
  %v0_14cb0 = load i32, i32* %r5.global-to-local, align 4
  %v3_14cb8 = call i32 @function_120dc(i32 ptrtoint ([10 x i8]* @global_var_17e18.581 to i32), i32 %v0_14cb0)
  %v1_14cbc = load i32, i32* %r4.global-to-local, align 4
  %v1_14cc0 = icmp ne i32 %v3_14cb8, %v1_14cbc
  call void @__pseudo_cond_branch(i1 %v1_14cc0, i32 ptrtoint (i32* @global_var_14214.582 to i32))
  br label %dec_label_pc_14cc4

dec_label_pc_14cc4:                               ; preds = %dec_label_pc_14c84, %dec_label_pc_14cac
  %v1_14ccc = phi i32 [ %v2_14c98, %dec_label_pc_14c84 ], [ %v3_14cb8, %dec_label_pc_14cac ]
  ret i32 %v1_14ccc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_14cc4, { 1, 0 }
}

define i32 @function_14cd8(i32 %arg1) local_unnamed_addr {
dec_label_pc_14cd8:
  %r4.global-to-local = alloca i32, align 4
  store i32 131404, i32* %r4.global-to-local, align 4
  %v4_14ce8 = load i32, i32* inttoptr (i32 131496 to i32*), align 8
  %v1_14cec = inttoptr i32 %v4_14ce8 to i32*
  %v2_14cec = load i32, i32* %v1_14cec, align 4
  %v2_14cf0 = icmp eq i32 %v2_14cec, 0
  br i1 %v2_14cf0, label %dec_label_pc_14cf8, label %dec_label_pc_14d2c

dec_label_pc_14cf8:                               ; preds = %dec_label_pc_14cd8
  %v4_14cfc = load i32, i32* inttoptr (i32 131456 to i32*), align 128
  %v2_14d04 = icmp eq i32 %v4_14cfc, 0
  store i32 4096, i32* %v1_14cec, align 4
  br i1 %v2_14d04, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_14cf8
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_14cf8, %bb
  %v2_14d10 = xor i1 %v2_14d04, true
  call void @__pseudo_cond_branch(i1 %v2_14d10, i32 %v4_14cfc)
  %v0_14d18 = load i32, i32* %r4.global-to-local, align 4
  %v2_14d20 = icmp eq i32 %v0_14d18, 41284
  br i1 %v2_14d20, label %bb6, label %bb5

bb5:                                              ; preds = %bb4
  br label %bb6

bb6:                                              ; preds = %bb4, %bb5
  %v2_14d28 = xor i1 %v2_14d20, true
  call void @__pseudo_cond_branch(i1 %v2_14d28, i32 ptrtoint (i32* @global_var_16008.587 to i32))
  br label %dec_label_pc_14d2c

dec_label_pc_14d2c:                               ; preds = %dec_label_pc_14cd8, %bb6
  %v1_14d30 = load i32, i32* @r0, align 4
  ret i32 %v1_14d30

; uselistorder directives
  uselistorder i1 %v2_14d20, { 1, 0 }
  uselistorder label %dec_label_pc_14d2c, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_14d44(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_14d44:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp49 = call i32 @__decompiler_undefined_function_0()
  %tmp50 = call i32 @__decompiler_undefined_function_0()
  %tmp51 = call i32 @__decompiler_undefined_function_0()
  %tmp52 = call i32 @__decompiler_undefined_function_0()
  %tmp53 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r7, align 4
  %v1_14d4c = add i32 %tmp, 4
  store i32 %v1_14d4c, i32* %ip.global-to-local, align 4
  %v2_14d50 = load i32, i32* %arg3, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 131404, i32* @r6, align 4
  %v3_14d5c = mul i32 %arg2, 4
  store i32 %v3_14d5c, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v4_14d64 = load i32, i32* inttoptr (i32 131424 to i32*), align 32
  store i32 28, i32* %r2.global-to-local, align 4
  %v2_14d6c = ptrtoint i32* %stack_var_-120 to i32
  %v4_14d70 = load i32, i32* inttoptr (i32 131432 to i32*), align 8
  store i32 %v4_14d70, i32* %r4.global-to-local, align 4
  %v2_14d78 = add i32 %v1_14d4c, %v3_14d5c
  store i32 %v2_14d78, i32* %ip.global-to-local, align 4
  %v9_14d7c = icmp eq i32 %v2_14d78, %v2_14d50
  store i1 %v9_14d7c, i1* %cpsr_z.global-to-local, align 1
  %v2_14d80 = inttoptr i32 %v4_14d64 to i32*
  store i32 %arg7, i32* %v2_14d80, align 4
  store i32 692, i32* %r2.global-to-local, align 4
  %v0_14d8c = load i32, i32* %r3.global-to-local, align 4
  br i1 %v9_14d7c, label %bb, label %.critedge

bb:                                               ; preds = %dec_label_pc_14d44
  %v1_14d90 = load i32, i32* @r7, align 4
  %v2_14d90 = load i32, i32* %r5.global-to-local, align 4
  %v3_14d90 = add i32 %v2_14d90, %v1_14d90
  store i32 %v3_14d90, i32* %r3.global-to-local, align 4
  store i32 %arg6, i32* @global_var_20400.578, align 4
  %v0_14d98 = load i32, i32* %ip.global-to-local, align 4
  %v1_14d98 = load i32, i32* %r4.global-to-local, align 4
  %v2_14d98 = inttoptr i32 %v1_14d98 to i32*
  store i32 %v0_14d98, i32* %v2_14d98, align 4
  store i32 120, i32* @r2, align 4
  %v1_14da4 = load i32, i32* %r3.global-to-local, align 4
  %v2_14da4 = load i32, i32* %r4.global-to-local, align 4
  %v3_14da4 = inttoptr i32 %v2_14da4 to i32*
  store i32 %v1_14da4, i32* %v3_14da4, align 4
  br label %bb57

.critedge:                                        ; preds = %dec_label_pc_14d44
  store i32 %arg6, i32* @global_var_20400.578, align 4
  %v0_14d98.c = load i32, i32* %ip.global-to-local, align 4
  %v1_14d98.c = load i32, i32* %r4.global-to-local, align 4
  %v2_14d98.c = inttoptr i32 %v1_14d98.c to i32*
  store i32 %v0_14d98.c, i32* %v2_14d98.c, align 4
  store i32 120, i32* @r2, align 4
  br label %bb57

bb57:                                             ; preds = %.critedge, %bb
  store i32 %v2_14d6c, i32* %r0.global-to-local, align 4
  %v2_14db0 = bitcast i32* %stack_var_-120 to i8*
  %v3_14db0 = call i32 @function_12950(i8* %v2_14db0, i32 0)
  store i32 %v3_14db0, i32* %r0.global-to-local, align 4
  %v0_14db4 = load i32, i32* %r4.global-to-local, align 4
  %v1_14db4 = inttoptr i32 %v0_14db4 to i32*
  %storemerge.pre = load i32, i32* %v1_14db4, align 4
  br label %dec_label_pc_14dc0

dec_label_pc_14dc0:                               ; preds = %dec_label_pc_14dc0, %bb57
  %storemerge = phi i32 [ %storemerge.pre, %bb57 ], [ %v4_14dc0, %dec_label_pc_14dc0 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_14dc0 = inttoptr i32 %storemerge to i32*
  %v2_14dc0 = load i32, i32* %v1_14dc0, align 4
  store i32 %v2_14dc0, i32* %r3.global-to-local, align 4
  %v4_14dc0 = add i32 %storemerge, 4
  store i32 %v4_14dc0, i32* %r2.global-to-local, align 4
  %v2_14dc4 = icmp eq i32 %v2_14dc0, 0
  br i1 %v2_14dc4, label %dec_label_pc_14dd0, label %dec_label_pc_14dc0

dec_label_pc_14dd0:                               ; preds = %dec_label_pc_14dc0
  store i32 %v4_14dc0, i32* @r4, align 4
  store i32 %v2_14d6c, i32* @r5, align 4
  %v1_14df429 = inttoptr i32 %v4_14dc0 to i32*
  %v2_14df430 = load i32, i32* %v1_14df429, align 4
  store i32 %v2_14df430, i32* %r3.global-to-local, align 4
  %v2_14df832 = icmp eq i32 %v2_14df430, 0
  store i1 %v2_14df832, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14df832, label %dec_label_pc_14e00, label %dec_label_pc_14ddc

dec_label_pc_14ddc:                               ; preds = %dec_label_pc_14dd0, %dec_label_pc_14df4
  %v5_14de0 = phi i32 [ %v2_14df4, %dec_label_pc_14df4 ], [ %v2_14df430, %dec_label_pc_14dd0 ]
  %v2_14ddc = icmp ugt i32 %v5_14de0, 13
  %v7_14ddc = icmp eq i32 %v5_14de0, 14
  store i1 %v7_14ddc, i1* %cpsr_z.global-to-local, align 1
  %v2_14de0 = xor i1 %v2_14ddc, true
  %v3_14de0 = or i1 %v7_14ddc, %v2_14de0
  br i1 %v3_14de0, label %bb58, label %bb59

bb58:                                             ; preds = %dec_label_pc_14ddc
  %v4_14de0 = load i32, i32* @r5, align 4
  %v6_14de0 = and i32 %v5_14de0, 536870912
  %v7_14de0 = icmp ne i32 %v6_14de0, 0
  %v8_14de0 = mul i32 %v5_14de0, 8
  %v9_14de0 = add i32 %v4_14de0, %v8_14de0
  store i32 %v9_14de0, i32* %r0.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_14ddc, %bb58
  %v1_14dec = phi i1 [ %v2_14ddc, %dec_label_pc_14ddc ], [ %v7_14de0, %bb58 ]
  %v2_14de4 = xor i1 %v1_14dec, true
  %v3_14de4 = or i1 %v7_14ddc, %v2_14de4
  br i1 %v3_14de4, label %bb60, label %dec_label_pc_14df4

bb60:                                             ; preds = %bb59
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14df4

dec_label_pc_14df4:                               ; preds = %bb59, %bb60
  call void @__pseudo_cond_branch(i1 %v3_14de4, i32 ptrtoint (i32* @global_var_12a00.592 to i32))
  %v0_14df0 = load i32, i32* @r4, align 4
  %v1_14df0 = add i32 %v0_14df0, 8
  store i32 %v1_14df0, i32* @r4, align 4
  %v1_14df4 = inttoptr i32 %v1_14df0 to i32*
  %v2_14df4 = load i32, i32* %v1_14df4, align 4
  store i32 %v2_14df4, i32* %r3.global-to-local, align 4
  %v2_14df8 = icmp eq i32 %v2_14df4, 0
  store i1 %v2_14df8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14df8, label %dec_label_pc_14e00, label %dec_label_pc_14ddc

dec_label_pc_14e00:                               ; preds = %dec_label_pc_14df4, %dec_label_pc_14dd0
  store i32 %v2_14d6c, i32* %r0.global-to-local, align 4
  %v1_14e04 = call i32 @function_17204(i32 %v2_14d6c)
  store i32 %v1_14e04, i32* @r0, align 4
  %v1_14e08 = call i32 @function_14cd8(i32 %v1_14e04)
  store i32 %v1_14e08, i32* @r0, align 4
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 %tmp53, i32* @r2, align 4
  %v0_14e14 = load i32, i32* @r6, align 4
  %v2_14e14 = add i32 %v0_14e14, 92
  %v3_14e14 = inttoptr i32 %v2_14e14 to i32*
  %v4_14e14 = load i32, i32* %v3_14e14, align 4
  store i32 %tmp52, i32* @r3, align 4
  %v2_14e1c = icmp eq i32 %tmp53, 0
  store i1 %v2_14e1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14e1c, label %bb61, label %bb62

bb61:                                             ; preds = %dec_label_pc_14e00
  store i32 4096, i32* @r2, align 4
  br label %bb62

bb62:                                             ; preds = %dec_label_pc_14e00, %bb61
  %v0_14e28 = phi i32 [ %tmp53, %dec_label_pc_14e00 ], [ 4096, %bb61 ]
  %v3_14e24 = icmp eq i32 %tmp52, -1
  %v8_14e24 = icmp eq i32 %tmp52, -1
  store i1 %v8_14e24, i1* %cpsr_z.global-to-local, align 1
  %v2_14e28 = inttoptr i32 %v4_14e14 to i32*
  store i32 %v0_14e28, i32* %v2_14e28, align 4
  br i1 %v3_14e24, label %dec_label_pc_14e30, label %dec_label_pc_14e58

dec_label_pc_14e30:                               ; preds = %bb62
  %v0_14e30 = call i32 @function_15148()
  store i32 %v0_14e30, i32* @r0, align 4
  store i32 %v0_14e30, i32* @r4, align 4
  %v0_14e38 = call i32 @function_151a4()
  store i32 %v0_14e38, i32* @r0, align 4
  %v0_14e3c = load i32, i32* @r4, align 4
  %v9_14e3c = icmp eq i32 %v0_14e3c, %v0_14e38
  store i1 %v9_14e3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14e3c, label %dec_label_pc_14e44, label %dec_label_pc_14e80

dec_label_pc_14e44:                               ; preds = %dec_label_pc_14e30
  %v1_14e44 = call i32 @function_15310(i32 %v0_14e38)
  store i32 %v1_14e44, i32* @r0, align 4
  store i32 %v1_14e44, i32* @r4, align 4
  %v0_14e4c = call i32 @function_15190()
  store i32 %v0_14e4c, i32* @r0, align 4
  %v0_14e50 = load i32, i32* @r4, align 4
  %v9_14e50 = icmp eq i32 %v0_14e50, %v0_14e4c
  store i1 %v9_14e50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14e50, label %dec_label_pc_14e58, label %dec_label_pc_14e80

dec_label_pc_14e58:                               ; preds = %dec_label_pc_14e44, %bb62
  store i32 %tmp52, i32* @r2, align 4
  store i1 %v8_14e24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_14e24, label %dec_label_pc_14ea4, label %dec_label_pc_14e64

dec_label_pc_14e64:                               ; preds = %dec_label_pc_14e58
  store i32 %tmp51, i32* @r3, align 4
  %v9_14e68 = icmp eq i32 %tmp52, %tmp51
  store i1 %v9_14e68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14e68, label %dec_label_pc_14e70, label %dec_label_pc_14e80

dec_label_pc_14e70:                               ; preds = %dec_label_pc_14e64
  store i32 %tmp50, i32* @r2, align 4
  store i32 %tmp49, i32* @r3, align 4
  %v9_14e78 = icmp eq i32 %tmp50, %tmp49
  store i1 %v9_14e78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14e78, label %dec_label_pc_14ea4, label %dec_label_pc_14e80

dec_label_pc_14e80:                               ; preds = %dec_label_pc_14e64, %dec_label_pc_14e44, %dec_label_pc_14e30, %dec_label_pc_14e70
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_14e88 = call i32 @function_14c84(i32 0, i32 32768)
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_14e94 = call i32 @function_14c84(i32 1, i32 32770)
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_14ea0 = call i32 @function_14c84(i32 2, i32 32770)
  store i32 %v2_14ea0, i32* @r0, align 4
  br label %dec_label_pc_14ea4

dec_label_pc_14ea4:                               ; preds = %dec_label_pc_14e70, %dec_label_pc_14e58, %dec_label_pc_14e80
  %v0_14ea4 = load i32, i32* @r7, align 4
  %v1_14ea4 = inttoptr i32 %v0_14ea4 to i32*
  %v2_14ea4 = load i32, i32* %v1_14ea4, align 4
  store i32 %v2_14ea4, i32* %r2.global-to-local, align 4
  store i32 208, i32* %r3.global-to-local, align 4
  %v1_14eac = load i32, i32* @r6, align 4
  %v3_14eac = add i32 %v1_14eac, 208
  %v4_14eac = inttoptr i32 %v3_14eac to i32*
  store i32 %v2_14ea4, i32* %v4_14eac, align 4
  %v0_14eb0 = load i32, i32* @r7, align 4
  %v1_14eb0 = inttoptr i32 %v0_14eb0 to i32*
  %v2_14eb0 = load i32, i32* %v1_14eb0, align 4
  store i32 %v2_14eb0, i32* @r4, align 4
  %v2_14eb4 = icmp eq i32 %v2_14eb0, 0
  store i1 %v2_14eb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14eb4, label %dec_label_pc_14f58.lr.ph, label %dec_label_pc_14ebc

dec_label_pc_14ebc:                               ; preds = %dec_label_pc_14ea4
  store i32 112, i32* %r3.global-to-local, align 4
  %v0_14ec0 = load i32, i32* @r6, align 4
  %v2_14ec0 = add i32 %v0_14ec0, 112
  %v3_14ec0 = inttoptr i32 %v2_14ec0 to i32*
  %v4_14ec0 = load i32, i32* %v3_14ec0, align 4
  store i32 %v4_14ec0, i32* %r3.global-to-local, align 4
  %v2_14ec4 = inttoptr i32 %v4_14ec0 to i32*
  store i32 %v2_14eb0, i32* %v2_14ec4, align 4
  %v0_14ecc = load i32, i32* @r7, align 4
  %v1_14ecc = inttoptr i32 %v0_14ecc to i32*
  %v2_14ecc = load i32, i32* %v1_14ecc, align 4
  store i32 %v2_14ecc, i32* %r0.global-to-local, align 4
  %v4_14ed0 = call i32 @function_16e40(i32 %v2_14ecc, i32 47, i32 %v2_14ea4, i32 %v4_14ec0)
  store i32 %v4_14ed0, i32* @r0, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v2_14ed8 = icmp eq i32 %v4_14ed0, 0
  store i1 %v2_14ed8, i1* %cpsr_z.global-to-local, align 1
  %v0_14edc = load i32, i32* @r6, align 4
  %v2_14edc = add i32 %v0_14edc, 60
  %v3_14edc = inttoptr i32 %v2_14edc to i32*
  %v4_14edc = load i32, i32* %v3_14edc, align 4
  store i32 %v4_14edc, i32* %r2.global-to-local, align 4
  br i1 %v2_14ed8, label %.thread46, label %bb63

.thread46:                                        ; preds = %dec_label_pc_14ebc
  %v2_14ee447 = inttoptr i32 %v4_14edc to i32*
  store i32 0, i32* %v2_14ee447, align 4
  br label %dec_label_pc_14f58.lr.ph

bb63:                                             ; preds = %dec_label_pc_14ebc
  %v2_14ee0 = add i32 %v4_14ed0, 1
  store i32 %v2_14ee0, i32* %r3.global-to-local, align 4
  %v2_14ee4 = inttoptr i32 %v4_14edc to i32*
  store i32 %v4_14ed0, i32* %v2_14ee4, align 4
  %v1_14ee8 = load i32, i32* %r3.global-to-local, align 4
  %v2_14ee8 = load i32, i32* %r2.global-to-local, align 4
  %v3_14ee8 = inttoptr i32 %v2_14ee8 to i32*
  store i32 %v1_14ee8, i32* %v3_14ee8, align 4
  br label %dec_label_pc_14f58.lr.ph

dec_label_pc_14f58.lr.ph:                         ; preds = %.thread46, %bb63, %dec_label_pc_14ea4
  store i32 0, i32* %r5.global-to-local, align 4
  %v0_14f00 = load i32, i32* @r6, align 4
  %v2_14f00 = add i32 %v0_14f00, -12
  store i32 %v2_14f00, i32* %r8.global-to-local, align 4
  store i32 688, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %arg5, i32* @global_var_203fc.576, align 4
  %v2_14f30 = icmp eq i32 %v0_14d8c, 0
  store i1 %v2_14f30, i1* %cpsr_z.global-to-local, align 1
  %v2_14f38 = xor i1 %v2_14f30, true
  call void @__pseudo_cond_branch(i1 %v2_14f38, i32 %v0_14d8c)
  store i32 -12, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r5.global-to-local, align 4
  %v0_14f4c = load i32, i32* @r6, align 4
  %v2_14f4c = add i32 %v0_14f4c, -12
  store i32 %v2_14f4c, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14f58

dec_label_pc_14f58:                               ; preds = %dec_label_pc_14f58.dec_label_pc_14f58_crit_edge, %dec_label_pc_14f58.lr.ph
  %v1_14f58 = phi i32 [ %v1_14f64, %dec_label_pc_14f58.dec_label_pc_14f58_crit_edge ], [ 0, %dec_label_pc_14f58.lr.ph ]
  %v0_14f58 = phi i32 [ %v0_14f58.pre, %dec_label_pc_14f58.dec_label_pc_14f58_crit_edge ], [ %v2_14f4c, %dec_label_pc_14f58.lr.ph ]
  %v4_14f58 = mul i32 %v1_14f58, 4
  %v5_14f58 = add i32 %v4_14f58, %v0_14f58
  %v6_14f58 = inttoptr i32 %v5_14f58 to i32*
  %v7_14f58 = load i32, i32* %v6_14f58, align 4
  store i32 %v7_14f58, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_14f58)
  %v0_14f64 = load i32, i32* %r4.global-to-local, align 4
  %v1_14f64 = add i32 %v0_14f64, 1
  store i32 %v1_14f64, i32* %r4.global-to-local, align 4
  %v1_14f68 = load i32, i32* %r5.global-to-local, align 4
  %v3_14f68 = icmp ult i32 %v1_14f64, %v1_14f68
  %v9_14f68 = icmp eq i32 %v1_14f64, %v1_14f68
  store i1 %v9_14f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14f68, label %dec_label_pc_14f58.dec_label_pc_14f58_crit_edge, label %dec_label_pc_14f70

dec_label_pc_14f58.dec_label_pc_14f58_crit_edge:  ; preds = %dec_label_pc_14f58
  %v0_14f58.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_14f58

dec_label_pc_14f70:                               ; preds = %dec_label_pc_14f58
  %v0_14f74.pre = load i32, i32* @r6, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  %v2_14f74 = add i32 %v0_14f74.pre, 104
  %v3_14f74 = inttoptr i32 %v2_14f74 to i32*
  %v4_14f74 = load i32, i32* %v3_14f74, align 4
  store i32 %v4_14f74, i32* %r2.global-to-local, align 4
  store i32 %v4_14f74, i32* %r3.global-to-local, align 4
  %v2_14f7c = icmp eq i32 %v4_14f74, 0
  store i1 %v2_14f7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14f7c, label %dec_label_pc_14f94, label %dec_label_pc_14f84

dec_label_pc_14f84:                               ; preds = %dec_label_pc_14f70
  call void @__pseudo_branch(i32 %v4_14f74)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_14f90 = load i32, i32* @r0, align 4
  %v2_14f90 = inttoptr i32 %v1_14f90 to i32*
  store i32 0, i32* %v2_14f90, align 4
  %v0_14f98.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_14f94

dec_label_pc_14f94:                               ; preds = %dec_label_pc_14f70, %dec_label_pc_14f84
  %v0_14f98 = phi i32 [ %v0_14f74.pre, %dec_label_pc_14f70 ], [ %v0_14f98.pre, %dec_label_pc_14f84 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_14f98 = add i32 %v0_14f98, 80
  %v3_14f98 = inttoptr i32 %v2_14f98 to i32*
  %v4_14f98 = load i32, i32* %v3_14f98, align 4
  store i32 %v4_14f98, i32* %r2.global-to-local, align 4
  store i32 %v4_14f98, i32* %r3.global-to-local, align 4
  %v2_14fa0 = icmp eq i32 %v4_14f98, 0
  store i1 %v2_14fa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14fa0, label %dec_label_pc_14fb8, label %dec_label_pc_14fa8

dec_label_pc_14fa8:                               ; preds = %dec_label_pc_14f94
  call void @__pseudo_branch(i32 %v4_14f98)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_14fb4 = load i32, i32* @r0, align 4
  %v2_14fb4 = inttoptr i32 %v1_14fb4 to i32*
  store i32 0, i32* %v2_14fb4, align 4
  %v0_14fbc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_14fb8

dec_label_pc_14fb8:                               ; preds = %dec_label_pc_14f94, %dec_label_pc_14fa8
  %v0_14fbc = phi i32 [ %v0_14f98, %dec_label_pc_14f94 ], [ %v0_14fbc.pre, %dec_label_pc_14fa8 ]
  store i32 28, i32* %r3.global-to-local, align 4
  %v2_14fbc = add i32 %v0_14fbc, 28
  %v3_14fbc = inttoptr i32 %v2_14fbc to i32*
  %v4_14fbc = load i32, i32* %v3_14fbc, align 4
  store i32 %v4_14fbc, i32* %r3.global-to-local, align 4
  %v1_14fc4 = inttoptr i32 %v4_14fbc to i32*
  %v2_14fc4 = load i32, i32* %v1_14fc4, align 4
  store i32 %v2_14fc4, i32* %r2.global-to-local, align 4
  %v0_14fc8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_14fc8, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_14fd4 = call i32 @function_1433c(i32 %v0_14fc8)
  store i32 %v1_14fd4, i32* %r0.global-to-local, align 4
  %v0_14fd8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14fd8, label %bb64, label %.thread8

bb64:                                             ; preds = %dec_label_pc_14fb8
  %v2_14fd8 = load i32, i32* %ip.global-to-local, align 4
  %v2_14fdc = load i32, i32* %r4.global-to-local, align 4
  %v8_14fdc = shl i32 %v2_14fdc, %v1_14fd4
  %v9_14fdc = and i32 %v8_14fdc, %v1_14fd4
  %v8_14fe0 = shl i32 %v2_14fd8, %v9_14fdc
  %v9_14fe0 = and i32 %v8_14fe0, %v9_14fdc
  store i32 %v9_14fe0, i32* %r0.global-to-local, align 4
  %v2_14fe4 = trunc i32 %v9_14fe0 to i16
  %v4_14fe4 = inttoptr i32 %v9_14fe0 to i16*
  store i16 %v2_14fe4, i16* %v4_14fe4, align 2
  %v5_14fe4 = load i32, i32* %r4.global-to-local, align 4
  %v6_14fe4 = load i32, i32* %r0.global-to-local, align 4
  %v7_14fe4 = sub i32 %v6_14fe4, %v5_14fe4
  %v2_14fe8 = load i32, i32* %ip.global-to-local, align 4
  %v8_14fe8 = ashr i32 %v2_14fe8, %v7_14fe4
  %v9_14fe8 = and i32 %v8_14fe8, %v7_14fe4
  %v2_14fec = load i32, i32* %r2.global-to-local, align 4
  %v3_14fec = and i32 %v9_14fe8, %v2_14fec
  store i32 %v3_14fec, i32* %r8.global-to-local, align 4
  %v2_14ff0 = inttoptr i32 %v9_14fe8 to i64*
  %v3_14ff0 = load i64, i64* %v2_14ff0, align 4
  %v6_14ff0 = udiv i64 %v3_14ff0, 4294967296
  %v7_14ff0 = trunc i64 %v6_14ff0 to i32
  %v9_14ff0 = sub i32 %v7_14ff0, %v9_14fe8
  %v5_14ff4 = sub i32 32, %v9_14ff0
  %v6_14ff4 = shl i32 %v9_14ff0, %v5_14ff4
  %v9_14ff4 = and i32 %v6_14ff4, %v9_14ff0
  %v8_14ff8 = lshr i32 %v2_14fe8, %v9_14ff4
  %v9_14ff8 = and i32 %v8_14ff8, %v9_14ff4
  store i32 %v9_14ff8, i32* %r0.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_14fb8, %bb64
  %v10_14ff8 = phi i32 [ %v1_14fd4, %dec_label_pc_14fb8 ], [ %v9_14ff8, %bb64 ]
  ret i32 %v10_14ff8

; uselistorder directives
  uselistorder i32 %v9_14fe8, { 2, 1, 0 }
  uselistorder i32 %v9_14fe0, { 1, 0, 2 }
  uselistorder i32 %v1_14fd4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_14f74.pre, { 1, 0 }
  uselistorder i32 %v1_14f68, { 1, 0 }
  uselistorder i32 %v1_14f64, { 3, 2, 1, 0 }
  uselistorder i32 %v4_14edc, { 1, 0, 2 }
  uselistorder i1 %v8_14e24, { 1, 2, 0 }
  uselistorder i32 %v2_14df4, { 1, 2, 0 }
  uselistorder i1 %v2_14ddc, { 1, 0 }
  uselistorder i32 %v5_14de0, { 1, 0, 2, 3 }
  uselistorder i32 %v4_14dc0, { 1, 0, 3, 2 }
  uselistorder i32 %storemerge, { 2, 1, 0 }
  uselistorder i32 %v0_14d8c, { 1, 0 }
  uselistorder i32 %v2_14d6c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_14d5c, { 1, 0 }
  uselistorder i32 %tmp52, { 1, 4, 0, 2, 3 }
  uselistorder i32 %tmp51, { 1, 0 }
  uselistorder i32 %tmp50, { 1, 0 }
  uselistorder i32 %tmp49, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 0, 5, 7, 6, 8, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 15, 16, 17, 18, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 2, 21, 22, 23, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 10, 5, 6, 7, 8, 9, 11, 12, 1, 13, 14, 15, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 1, 6, 7, 8, 9, 10, 11, 12, 2, 13, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 8, 4, 0, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 16, 1, 18 }
  uselistorder i32 (i32)* @function_1433c, { 0, 3, 2, 6, 5, 4, 1 }
  uselistorder i32 47, { 0, 6, 7, 8, 2, 9, 3, 10, 1, 11, 12, 4, 13, 5 }
  uselistorder i32 (i32, i32)* @function_14c84, { 2, 1, 0 }
  uselistorder i32 536870912, { 2, 0, 1, 3 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_14fb8, { 1, 0 }
  uselistorder label %dec_label_pc_14f94, { 1, 0 }
  uselistorder label %dec_label_pc_14f58.lr.ph, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14ea4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14e80, { 3, 0, 1, 2 }
  uselistorder label %bb62, { 1, 0 }
  uselistorder label %dec_label_pc_14df4, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_14ddc, { 1, 0 }
}

define i32 @function_15018(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_15018:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_15018 = load i32, i32* @r4, align 4
  store i32 %v3_15018, i32* %stack_var_-16, align 4
  %v3_15024 = urem i32 %arg3, 4096
  %v2_15028 = icmp eq i32 %v3_15024, 0
  br i1 %v2_15028, label %dec_label_pc_15044, label %dec_label_pc_15030

dec_label_pc_15030:                               ; preds = %dec_label_pc_15018
  %v0_15030 = call i32 @function_128f8()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_1503c = inttoptr i32 %v0_15030 to i32*
  store i32 22, i32* %v2_1503c, align 4
  %v0_15074.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15074

dec_label_pc_15044:                               ; preds = %dec_label_pc_15018
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_15070, label %dec_label_pc_15060

dec_label_pc_15060:                               ; preds = %dec_label_pc_15044
  %v0_15060 = call i32 @function_128f8()
  %v0_15064 = load i32, i32* %r4.global-to-local, align 4
  %v1_15064 = sub i32 0, %v0_15064
  %v2_15068 = inttoptr i32 %v0_15060 to i32*
  store i32 %v1_15064, i32* %v2_15068, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15070

dec_label_pc_15070:                               ; preds = %dec_label_pc_15044, %dec_label_pc_15060
  %v0_15070 = phi i32 [ %arg1, %dec_label_pc_15044 ], [ -1, %dec_label_pc_15060 ]
  store i32 %v0_15070, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15074

dec_label_pc_15074:                               ; preds = %dec_label_pc_15030, %dec_label_pc_15070
  %v0_15074 = phi i32 [ %v0_15074.pre, %dec_label_pc_15030 ], [ %v0_15070, %dec_label_pc_15070 ]
  %v2_15078 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15078, i32* @r4, align 4
  ret i32 %v0_15074

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15074, { 1, 0 }
  uselistorder label %dec_label_pc_15070, { 1, 0 }
}

define i32 @function_15080(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15080:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_15080 = load i32, i32* @r4, align 4
  %v6_15080 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_15088 = icmp eq i32 %arg2, 0
  store i32 131404, i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_15088, label %dec_label_pc_150dc, label %dec_label_pc_150a0

dec_label_pc_150a0:                               ; preds = %dec_label_pc_15080
  %v1_150a0 = add i32 %arg2, 4
  %v2_150a0 = inttoptr i32 %v1_150a0 to i32*
  %v3_150a0 = load i32, i32* %v2_150a0, align 4
  store i32 %v3_150a0, i32* @r3, align 4
  %v1_150a4 = and i32 %v3_150a0, 67108864
  %v2_150a4 = icmp eq i32 %v1_150a4, 0
  br i1 %v2_150a4, label %dec_label_pc_150ac, label %dec_label_pc_150dc

dec_label_pc_150ac:                               ; preds = %dec_label_pc_150a0
  store i32 20, i32* @r2, align 4
  %v2_150b0 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_150b0, i32* @r0, align 4
  %v0_150b4 = call i32 @function_12a00()
  store i32 %v2_150b0, i32* @ip, align 4
  %v0_150dc.pre = load i32, i32* @r5, align 4
  %v0_150e4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_150dc

dec_label_pc_150dc:                               ; preds = %dec_label_pc_150a0, %dec_label_pc_15080, %dec_label_pc_150ac
  %v0_150e4 = phi i32 [ %arg3, %dec_label_pc_150a0 ], [ %arg3, %dec_label_pc_15080 ], [ %v0_150e4.pre, %dec_label_pc_150ac ]
  %v0_150e0 = phi i32 [ %arg2, %dec_label_pc_150a0 ], [ 0, %dec_label_pc_15080 ], [ %v2_150b0, %dec_label_pc_150ac ]
  %v0_150dc = phi i32 [ %arg1, %dec_label_pc_150a0 ], [ %arg1, %dec_label_pc_15080 ], [ %v0_150dc.pre, %dec_label_pc_150ac ]
  %v4_150ec = call i32 @function_1563c(i32 %v0_150dc, i32 %v0_150e0, i32 %v0_150e4, i32 8)
  store i32 %v3_15080, i32* @r4, align 4
  store i32 %v6_15080, i32* @r5, align 4
  ret i32 %v4_150ec

; uselistorder directives
  uselistorder label %dec_label_pc_150dc, { 2, 0, 1 }
}

define i32 @function_15100(i32 %arg1) local_unnamed_addr {
dec_label_pc_15100:
  %v0_15100 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15100, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_15100
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_15100, %bb
  %v0_15114 = phi i32 [ %arg1, %dec_label_pc_15100 ], [ 0, %bb ]
  ret i32 %v0_15114

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_15120() local_unnamed_addr {
dec_label_pc_15120:
  %v4_1512c = load i32, i32* inttoptr (i32 131496 to i32*), align 8
  %v1_15130 = inttoptr i32 %v4_1512c to i32*
  %v2_15130 = load i32, i32* %v1_15130, align 4
  %v2_15134 = icmp eq i32 %v2_15130, 0
  br i1 %v2_15134, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_15120
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_15120, %bb
  %v1_1513c = phi i32 [ %v2_15130, %dec_label_pc_15120 ], [ 4096, %bb ]
  ret i32 %v1_1513c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_15148() local_unnamed_addr {
dec_label_pc_15148:
  %v1_15158 = load i32, i32* @r0, align 4
  ret i32 %v1_15158
}

define i32 @function_1515c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1515c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1515c = load i32, i32* @r7, align 4
  store i32 %v3_1515c, i32* %stack_var_-8, align 4
  %v0_15168 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15168, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15168, -4095
  br i1 %tmp, label %dec_label_pc_15188, label %dec_label_pc_15178

dec_label_pc_15178:                               ; preds = %dec_label_pc_1515c
  %v0_15178 = call i32 @function_128f8()
  %v0_1517c = load i32, i32* %r7.global-to-local, align 4
  %v1_1517c = sub i32 0, %v0_1517c
  %v2_15180 = inttoptr i32 %v0_15178 to i32*
  store i32 %v1_1517c, i32* %v2_15180, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_15188.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15188

dec_label_pc_15188:                               ; preds = %dec_label_pc_1515c, %dec_label_pc_15178
  %v1_1518c = phi i32 [ %v0_15168, %dec_label_pc_1515c ], [ -1, %dec_label_pc_15178 ]
  %v2_15188 = phi i32 [ %v3_1515c, %dec_label_pc_1515c ], [ %v2_15188.pre, %dec_label_pc_15178 ]
  store i32 %v2_15188, i32* %r7.global-to-local, align 4
  ret i32 %v1_1518c

; uselistorder directives
  uselistorder i32 %v0_15168, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15188, { 1, 0 }
}

define i32 @function_15190() local_unnamed_addr {
dec_label_pc_15190:
  %v1_151a0 = load i32, i32* @r0, align 4
  ret i32 %v1_151a0
}

define i32 @function_151a4() local_unnamed_addr {
dec_label_pc_151a4:
  %v1_151b4 = load i32, i32* @r0, align 4
  ret i32 %v1_151b4
}

define i32 @function_151b8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_151b8:
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v6_151b8 = load i32, i32* @r5, align 4
  %v18_151b8 = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_151e8, label %dec_label_pc_151d4

dec_label_pc_151d4:                               ; preds = %dec_label_pc_151b8
  %v0_151d4 = call i32 @function_128f8()
  %v0_151d8 = load i32, i32* @r5, align 4
  %v1_151d8 = sub i32 0, %v0_151d8
  store i32 %v1_151d8, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r5, align 4
  %v2_151e0 = inttoptr i32 %v0_151d4 to i32*
  store i32 %v1_151d8, i32* %v2_151e0, align 4
  br label %dec_label_pc_1523c

dec_label_pc_151e8:                               ; preds = %dec_label_pc_151b8
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_151e8
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_151f0 = add i32 %arg2, %arg1
  store i32 %v3_151f0, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_151e8, %bb
  %v1_1522c4 = phi i32 [ %v18_151b8, %dec_label_pc_151e8 ], [ %v3_151f0, %bb ]
  %v0_152282 = phi i32 [ 141, %dec_label_pc_151e8 ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_1523c, label %dec_label_pc_15228

dec_label_pc_151fc:                               ; preds = %dec_label_pc_15228
  %v1_151fc = add i32 %v0_151fc, 8
  %v2_151fc = inttoptr i32 %v1_151fc to i16*
  %v3_151fc = load i16, i16* %v2_151fc, align 2
  %v4_151fc = zext i16 %v3_151fc to i32
  %v2_15200 = add i32 %v4_151fc, %v0_151fc
  store i32 %v2_15200, i32* %r3.global-to-local, align 4
  %v1_15204 = add i32 %v2_15200, -1
  %v2_15204 = inttoptr i32 %v1_15204 to i8*
  %v3_15204 = load i8, i8* %v2_15204, align 1
  %v4_15204 = zext i8 %v3_15204 to i32
  store i32 %v4_15204, i32* @r4, align 4
  %v1_15208 = call i32 @function_16d30(i32 %v1_15228)
  %v0_1520c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1520c, i32* @r1, align 4
  %v1_15210 = add i32 %v1_15208, 1
  store i32 %v1_15210, i32* @r2, align 4
  %v0_15214 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_15214, i32* @r0, align 4
  %v3_15218 = call i32 @function_129f0(i32 %v0_15214, i32 %v0_1520c, i32 %v1_15210)
  %v0_1521c = load i32, i32* %r7.global-to-local, align 4
  %v1_1521c = add i32 %v0_1521c, 8
  %v2_1521c = inttoptr i32 %v1_1521c to i16*
  %v3_1521c = load i16, i16* %v2_1521c, align 2
  %v4_1521c = zext i16 %v3_1521c to i32
  store i32 %v4_1521c, i32* %r3.global-to-local, align 4
  %v0_15220 = load i32, i32* @r4, align 4
  %v1_15220 = trunc i32 %v0_15220 to i8
  %v3_15220 = add i32 %v0_1521c, 10
  %v4_15220 = inttoptr i32 %v3_15220 to i8*
  store i8 %v1_15220, i8* %v4_15220, align 1
  %v0_15224 = load i32, i32* %r7.global-to-local, align 4
  %v1_15224 = load i32, i32* %r3.global-to-local, align 4
  %v2_15224 = add i32 %v1_15224, %v0_15224
  store i32 %v2_15224, i32* %r7.global-to-local, align 4
  %v1_1522c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_15228

dec_label_pc_15228:                               ; preds = %.thread, %dec_label_pc_151fc
  %v1_1522c = phi i32 [ %v1_1522c.pre, %dec_label_pc_151fc ], [ %v1_1522c4, %.thread ]
  %v0_151fc = phi i32 [ %v2_15224, %dec_label_pc_151fc ], [ %v0_152282, %.thread ]
  %v1_15228 = add i32 %v0_151fc, 10
  store i32 %v1_15228, i32* %r6.global-to-local, align 4
  %v3_1522c = icmp ult i32 %v0_151fc, %v1_1522c
  %v1_15234 = add i32 %v0_151fc, 11
  store i32 %v1_15234, i32* %r8.global-to-local, align 4
  br i1 %v3_1522c, label %dec_label_pc_151fc, label %dec_label_pc_1523c

dec_label_pc_1523c:                               ; preds = %dec_label_pc_15228, %.thread, %dec_label_pc_151d4
  %v0_1523c = load i32, i32* @r5, align 4
  store i32 %v6_151b8, i32* @r5, align 4
  store i32 %v18_151b8, i32* @sl, align 4
  ret i32 %v0_1523c

; uselistorder directives
  uselistorder i32 %v1_15228, { 1, 0 }
  uselistorder i32 %v0_151fc, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_151b8, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_129f0, { 6, 7, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15228, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1524c() local_unnamed_addr {
dec_label_pc_1524c:
  %r7.global-to-local = alloca i32, align 4
  %v0_15254 = load i32, i32* @r1, align 4
  store i32 %v0_15254, i32* @r3, align 4
  %v0_15264 = load i32, i32* @r0, align 4
  store i32 %v0_15264, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15264, -4095
  br i1 %tmp, label %dec_label_pc_15284, label %dec_label_pc_15270

dec_label_pc_15270:                               ; preds = %dec_label_pc_1524c
  %v0_15270 = call i32 @function_128f8()
  %v0_15274 = load i32, i32* %r7.global-to-local, align 4
  %v1_15274 = sub i32 0, %v0_15274
  store i32 %v1_15274, i32* @r3, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_1527c = inttoptr i32 %v0_15270 to i32*
  store i32 %v1_15274, i32* %v2_1527c, align 4
  br label %dec_label_pc_15294

dec_label_pc_15284:                               ; preds = %dec_label_pc_1524c
  %v2_15284 = icmp eq i32 %v0_15264, 0
  br i1 %v2_15284, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_15284
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_15284, %bb
  call void @__pseudo_cond_branch(i1 %v2_15284, i32 ptrtoint (i32* @global_var_1549c.611 to i32))
  br label %dec_label_pc_15294

dec_label_pc_15294:                               ; preds = %dec_label_pc_15270, %.thread
  %v0_15294 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_15294

; uselistorder directives
  uselistorder i32 %v0_15264, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_15294, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_152a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_152a4:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_152a4 = load i32, i32* @r4, align 4
  store i32 %v3_152a4, i32* %stack_var_-16, align 4
  store i32 131404, i32* %r4.global-to-local, align 4
  %v4_152b4 = load i32, i32* @global_var_22414.614, align 4
  %v2_152b8 = icmp eq i32 %v4_152b4, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_152b8, label %dec_label_pc_152c4, label %dec_label_pc_152d4

dec_label_pc_152c4:                               ; preds = %dec_label_pc_152a4
  %v1_152c8 = call i32 @function_1723c(i32 0)
  %v1_152cc = icmp slt i32 %v1_152c8, 0
  br i1 %v1_152cc, label %dec_label_pc_152f8, label %dec_label_pc_152d4thread-pre-split

dec_label_pc_152d4thread-pre-split:               ; preds = %dec_label_pc_152c4
  %v0_152d8.pr = load i32, i32* %r5.global-to-local, align 4
  %v4_152d4.pre = load i32, i32* @global_var_22414.614, align 4
  br label %dec_label_pc_152d4

dec_label_pc_152d4:                               ; preds = %dec_label_pc_152d4thread-pre-split, %dec_label_pc_152a4
  %v0_152e4 = phi i32 [ %v4_152d4.pre, %dec_label_pc_152d4thread-pre-split ], [ %v4_152b4, %dec_label_pc_152a4 ]
  %v1_152e8 = phi i32 [ %v0_152d8.pr, %dec_label_pc_152d4thread-pre-split ], [ %arg1, %dec_label_pc_152a4 ]
  %v2_152d8 = icmp eq i32 %v1_152e8, 0
  store i32 %v0_152e4, i32* %r4.global-to-local, align 4
  br i1 %v2_152d8, label %dec_label_pc_152fc, label %dec_label_pc_152e4

dec_label_pc_152e4:                               ; preds = %dec_label_pc_152d4
  %v2_152e8 = add i32 %v1_152e8, %v0_152e4
  %v1_152ec = call i32 @function_1723c(i32 %v2_152e8)
  %v1_152f0 = icmp slt i32 %v1_152ec, 0
  br i1 %v1_152f0, label %dec_label_pc_152f8, label %dec_label_pc_152e4.dec_label_pc_152fc_crit_edge

dec_label_pc_152e4.dec_label_pc_152fc_crit_edge:  ; preds = %dec_label_pc_152e4
  %v0_152fc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_152fc

dec_label_pc_152f8:                               ; preds = %dec_label_pc_152e4, %dec_label_pc_152c4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_152fc

dec_label_pc_152fc:                               ; preds = %dec_label_pc_152d4, %dec_label_pc_152e4.dec_label_pc_152fc_crit_edge, %dec_label_pc_152f8
  %v0_152fc = phi i32 [ %v0_152fc.pre, %dec_label_pc_152e4.dec_label_pc_152fc_crit_edge ], [ -1, %dec_label_pc_152f8 ], [ %v0_152e4, %dec_label_pc_152d4 ]
  %v2_15300 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15300, i32* @r4, align 4
  ret i32 %v0_152fc

; uselistorder directives
  uselistorder i32 %v0_152e4, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_1723c, { 1, 0 }
  uselistorder label %dec_label_pc_152fc, { 2, 1, 0 }
}

define i32 @function_15310(i32 %arg1) local_unnamed_addr {
dec_label_pc_15310:
  %v1_15320 = load i32, i32* @r0, align 4
  ret i32 %v1_15320
}

define i32 @function_15324(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15324:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_15324 = load i32, i32* @r4, align 4
  store i32 %v3_15324, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* @r2, align 4
  %v2_1533c = inttoptr i32 %arg2 to i8*
  %v3_1533c = call i32 @function_12950(i8* %v2_1533c, i32 0)
  %v2_15340 = load i32, i32* %arg1, align 4
  store i32 %v2_15340, i32* %r3.global-to-local, align 4
  %v3_15340 = add i32 %tmp, 4
  %v4_15340 = inttoptr i32 %v3_15340 to i32*
  %v5_15340 = load i32, i32* %v4_15340, align 4
  store i32 %v5_15340, i32* %r4.global-to-local, align 4
  %v0_15344 = load i32, i32* %r5.global-to-local, align 4
  %v1_15344 = inttoptr i32 %v0_15344 to i32*
  store i32 %v2_15340, i32* %v1_15344, align 4
  %v3_15344 = add i32 %v0_15344, 4
  %v4_15344 = inttoptr i32 %v3_15344 to i32*
  %v5_15344 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15344, i32* %v4_15344, align 4
  %v0_15348 = load i32, i32* %r6.global-to-local, align 4
  %v1_15348 = add i32 %v0_15348, 12
  %v2_15348 = inttoptr i32 %v1_15348 to i32*
  %v3_15348 = load i32, i32* %v2_15348, align 4
  %v1_1534c = load i32, i32* %r5.global-to-local, align 4
  %v2_1534c = add i32 %v1_1534c, 12
  %v3_1534c = inttoptr i32 %v2_1534c to i32*
  store i32 %v3_15348, i32* %v3_1534c, align 4
  %v0_15350 = load i32, i32* %r6.global-to-local, align 4
  %v1_15350 = add i32 %v0_15350, 96
  store i32 %v1_15350, i32* %r3.global-to-local, align 4
  %v1_15354 = inttoptr i32 %v1_15350 to i32*
  %v2_15354 = load i32, i32* %v1_15354, align 4
  store i32 %v2_15354, i32* %r3.global-to-local, align 4
  %v3_15354 = add i32 %v0_15350, 100
  %v4_15354 = inttoptr i32 %v3_15354 to i32*
  %v5_15354 = load i32, i32* %v4_15354, align 4
  store i32 %v5_15354, i32* %r4.global-to-local, align 4
  %v1_15358 = add i32 %v0_15350, 56
  %v2_15358 = inttoptr i32 %v1_15358 to i32*
  %v3_15358 = load i32, i32* %v2_15358, align 4
  store i32 %v3_15358, i32* %r2.global-to-local, align 4
  %v1_1535c = load i32, i32* %r5.global-to-local, align 4
  %v2_1535c = add i32 %v1_1535c, 96
  %v3_1535c = inttoptr i32 %v2_1535c to i32*
  store i32 %v2_15354, i32* %v3_1535c, align 4
  %v0_15360 = load i32, i32* %r4.global-to-local, align 4
  %v1_15360 = load i32, i32* %r5.global-to-local, align 4
  %v2_15360 = add i32 %v1_15360, 100
  %v3_15360 = inttoptr i32 %v2_15360 to i32*
  store i32 %v0_15360, i32* %v3_15360, align 4
  %v0_15364 = load i32, i32* %r6.global-to-local, align 4
  %v1_15364 = add i32 %v0_15364, 24
  store i32 %v1_15364, i32* %ip.global-to-local, align 4
  %v1_15368 = inttoptr i32 %v1_15364 to i32*
  %v2_15368 = load i32, i32* %v1_15368, align 4
  store i32 %v2_15368, i32* %ip.global-to-local, align 4
  %v3_15368 = add i32 %v0_15364, 28
  %v4_15368 = inttoptr i32 %v3_15368 to i32*
  %v5_15368 = load i32, i32* %v4_15368, align 4
  store i32 %v5_15368, i32* %lr.global-to-local, align 4
  %v0_1536c = load i32, i32* %r2.global-to-local, align 4
  %v1_1536c = load i32, i32* %r5.global-to-local, align 4
  %v2_1536c = add i32 %v1_1536c, 56
  %v3_1536c = inttoptr i32 %v2_1536c to i32*
  store i32 %v0_1536c, i32* %v3_1536c, align 4
  %v0_15370 = load i32, i32* %r6.global-to-local, align 4
  %v1_15370 = add i32 %v0_15370, 72
  store i32 %v1_15370, i32* %r3.global-to-local, align 4
  %v1_15374 = add i32 %v0_15370, 32
  store i32 %v1_15374, i32* %r7.global-to-local, align 4
  %v1_15378 = inttoptr i32 %v1_15374 to i32*
  %v2_15378 = load i32, i32* %v1_15378, align 4
  store i32 %v2_15378, i32* %r7.global-to-local, align 4
  %v3_15378 = add i32 %v0_15370, 36
  %v4_15378 = inttoptr i32 %v3_15378 to i32*
  %v5_15378 = load i32, i32* %v4_15378, align 4
  store i32 %v5_15378, i32* %r8.global-to-local, align 4
  %v1_1537c = inttoptr i32 %v1_15370 to i32*
  %v2_1537c = load i32, i32* %v1_1537c, align 4
  %v3_1537c = add i32 %v0_15370, 76
  %v4_1537c = inttoptr i32 %v3_1537c to i32*
  %v5_1537c = load i32, i32* %v4_1537c, align 4
  store i32 %v5_1537c, i32* %r1.global-to-local, align 4
  %v0_15380 = load i32, i32* %r5.global-to-local, align 4
  %v1_15380 = add i32 %v0_15380, 72
  %v1_15384 = inttoptr i32 %v1_15380 to i32*
  store i32 %v2_1537c, i32* %v1_15384, align 4
  %v3_15384 = add i32 %v0_15380, 76
  %v4_15384 = inttoptr i32 %v3_15384 to i32*
  %v5_15384 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15384, i32* %v4_15384, align 4
  %v0_15388 = load i32, i32* %r7.global-to-local, align 4
  %v1_15388 = load i32, i32* %r5.global-to-local, align 4
  %v2_15388 = add i32 %v1_15388, 32
  %v3_15388 = inttoptr i32 %v2_15388 to i32*
  store i32 %v0_15388, i32* %v3_15388, align 4
  %v0_1538c = load i32, i32* %r8.global-to-local, align 4
  %v1_1538c = load i32, i32* %r5.global-to-local, align 4
  %v2_1538c = add i32 %v1_1538c, 36
  %v3_1538c = inttoptr i32 %v2_1538c to i32*
  store i32 %v0_1538c, i32* %v3_1538c, align 4
  %v0_15390 = load i32, i32* %r6.global-to-local, align 4
  %v1_15390 = add i32 %v0_15390, 80
  store i32 %v1_15390, i32* %r3.global-to-local, align 4
  %v1_15394 = add i32 %v0_15390, 48
  store i32 %v1_15394, i32* %r7.global-to-local, align 4
  %v1_15398 = inttoptr i32 %v1_15394 to i32*
  %v2_15398 = load i32, i32* %v1_15398, align 4
  store i32 %v2_15398, i32* %r7.global-to-local, align 4
  %v3_15398 = add i32 %v0_15390, 52
  %v4_15398 = inttoptr i32 %v3_15398 to i32*
  %v5_15398 = load i32, i32* %v4_15398, align 4
  store i32 %v5_15398, i32* %r8.global-to-local, align 4
  %v1_1539c = inttoptr i32 %v1_15390 to i32*
  %v2_1539c = load i32, i32* %v1_1539c, align 4
  %v3_1539c = add i32 %v0_15390, 84
  %v4_1539c = inttoptr i32 %v3_1539c to i32*
  %v5_1539c = load i32, i32* %v4_1539c, align 4
  store i32 %v5_1539c, i32* %r1.global-to-local, align 4
  %v1_153a0 = add i32 %v0_15390, 16
  %v2_153a0 = inttoptr i32 %v1_153a0 to i32*
  %v3_153a0 = load i32, i32* %v2_153a0, align 4
  store i32 %v3_153a0, i32* %r2.global-to-local, align 4
  %v0_153a4 = load i32, i32* %r5.global-to-local, align 4
  %v1_153a4 = add i32 %v0_153a4, 80
  %v1_153a8 = inttoptr i32 %v1_153a4 to i32*
  store i32 %v2_1539c, i32* %v1_153a8, align 4
  %v3_153a8 = add i32 %v0_153a4, 84
  %v4_153a8 = inttoptr i32 %v3_153a8 to i32*
  %v5_153a8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_153a8, i32* %v4_153a8, align 4
  %v0_153ac = load i32, i32* %r7.global-to-local, align 4
  %v1_153ac = load i32, i32* %r5.global-to-local, align 4
  %v2_153ac = add i32 %v1_153ac, 48
  %v3_153ac = inttoptr i32 %v2_153ac to i32*
  store i32 %v0_153ac, i32* %v3_153ac, align 4
  %v0_153b0 = load i32, i32* %r8.global-to-local, align 4
  %v1_153b0 = load i32, i32* %r5.global-to-local, align 4
  %v2_153b0 = add i32 %v1_153b0, 52
  %v3_153b0 = inttoptr i32 %v2_153b0 to i32*
  store i32 %v0_153b0, i32* %v3_153b0, align 4
  %v0_153b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_153b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_153b4 = add i32 %v1_153b4, 16
  %v3_153b4 = inttoptr i32 %v2_153b4 to i32*
  store i32 %v0_153b4, i32* %v3_153b4, align 4
  %v0_153b8 = load i32, i32* %r6.global-to-local, align 4
  %v1_153b8 = add i32 %v0_153b8, 88
  store i32 %v1_153b8, i32* %r3.global-to-local, align 4
  %v1_153bc = add i32 %v0_153b8, 20
  %v2_153bc = inttoptr i32 %v1_153bc to i32*
  %v3_153bc = load i32, i32* %v2_153bc, align 4
  store i32 %v3_153bc, i32* %r2.global-to-local, align 4
  %v1_153c0 = inttoptr i32 %v1_153b8 to i32*
  %v2_153c0 = load i32, i32* %v1_153c0, align 4
  %v3_153c0 = add i32 %v0_153b8, 92
  %v4_153c0 = inttoptr i32 %v3_153c0 to i32*
  %v5_153c0 = load i32, i32* %v4_153c0, align 4
  store i32 %v5_153c0, i32* %r1.global-to-local, align 4
  %v1_153c4 = add i32 %v0_153b8, 64
  store i32 %v1_153c4, i32* %r6.global-to-local, align 4
  %v1_153c8 = inttoptr i32 %v1_153c4 to i32*
  %v2_153c8 = load i32, i32* %v1_153c8, align 4
  store i32 %v2_153c8, i32* %r6.global-to-local, align 4
  %v3_153c8 = add i32 %v0_153b8, 68
  %v4_153c8 = inttoptr i32 %v3_153c8 to i32*
  %v5_153c8 = load i32, i32* %v4_153c8, align 4
  store i32 %v5_153c8, i32* %r7.global-to-local, align 4
  %v0_153cc = load i32, i32* %r5.global-to-local, align 4
  %v1_153cc = add i32 %v0_153cc, 88
  store i32 %v1_153cc, i32* %r3.global-to-local, align 4
  %v2_153d0 = add i32 %v0_153cc, 20
  %v3_153d0 = inttoptr i32 %v2_153d0 to i32*
  store i32 %v3_153bc, i32* %v3_153d0, align 4
  %v0_153d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_153d4 = load i32, i32* %r5.global-to-local, align 4
  %v2_153d4 = add i32 %v1_153d4, 24
  %v3_153d4 = inttoptr i32 %v2_153d4 to i32*
  store i32 %v0_153d4, i32* %v3_153d4, align 4
  %v0_153d8 = load i32, i32* %lr.global-to-local, align 4
  %v1_153d8 = load i32, i32* %r5.global-to-local, align 4
  %v2_153d8 = add i32 %v1_153d8, 28
  %v3_153d8 = inttoptr i32 %v2_153d8 to i32*
  store i32 %v0_153d8, i32* %v3_153d8, align 4
  %v0_153dc = load i32, i32* %r6.global-to-local, align 4
  %v1_153dc = load i32, i32* %r5.global-to-local, align 4
  %v2_153dc = add i32 %v1_153dc, 64
  %v3_153dc = inttoptr i32 %v2_153dc to i32*
  store i32 %v0_153dc, i32* %v3_153dc, align 4
  %v0_153e0 = load i32, i32* %r7.global-to-local, align 4
  %v1_153e0 = load i32, i32* %r5.global-to-local, align 4
  %v2_153e0 = add i32 %v1_153e0, 68
  %v3_153e0 = inttoptr i32 %v2_153e0 to i32*
  store i32 %v0_153e0, i32* %v3_153e0, align 4
  %v0_153e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_153e4 = inttoptr i32 %v0_153e4 to i32*
  store i32 %v2_153c0, i32* %v1_153e4, align 4
  %v3_153e4 = add i32 %v0_153e4, 4
  %v4_153e4 = inttoptr i32 %v3_153e4 to i32*
  %v5_153e4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_153e4, i32* %v4_153e4, align 4
  %v2_153e8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_153e8, i32* %r4.global-to-local, align 4
  ret i32 %v2_153c0

; uselistorder directives
  uselistorder i32 %v0_153b8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_15390, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 100, { 1, 0, 2 }
  uselistorder i32 104, { 5, 0, 1, 2, 6, 3, 7, 4, 8 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_153f0(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_153f0:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_153f0 = load i32, i32* @r4, align 4
  store i32 %v3_153f0, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_15408 = inttoptr i32 %arg2 to i8*
  %v3_15408 = call i32 @function_12950(i8* %v2_15408, i32 0)
  %v2_1540c = load i32, i32* %arg1, align 4
  %v3_1540c = add i32 %tmp, 4
  %v4_1540c = inttoptr i32 %v3_1540c to i32*
  %v5_1540c = load i32, i32* %v4_1540c, align 4
  store i32 %v5_1540c, i32* %r4.global-to-local, align 4
  %v0_15410 = load i32, i32* %r6.global-to-local, align 4
  %v1_15410 = inttoptr i32 %v0_15410 to i32*
  store i32 %v2_1540c, i32* %v1_15410, align 4
  %v3_15410 = add i32 %v0_15410, 4
  %v4_15410 = inttoptr i32 %v3_15410 to i32*
  %v5_15410 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15410, i32* %v4_15410, align 4
  %v0_15414 = load i32, i32* %r5.global-to-local, align 4
  %v1_15414 = add i32 %v0_15414, 32
  %v1_15418 = inttoptr i32 %v1_15414 to i32*
  %v2_15418 = load i32, i32* %v1_15418, align 4
  %v3_15418 = add i32 %v0_15414, 36
  %v4_15418 = inttoptr i32 %v3_15418 to i32*
  %v5_15418 = load i32, i32* %v4_15418, align 4
  store i32 %v5_15418, i32* %r4.global-to-local, align 4
  %v1_1541c = add i32 %v0_15414, 96
  %v2_1541c = inttoptr i32 %v1_1541c to i32*
  %v3_1541c = load i32, i32* %v2_1541c, align 4
  store i32 %v3_1541c, i32* %r2.global-to-local, align 4
  %v1_15420 = load i32, i32* %r6.global-to-local, align 4
  %v2_15420 = add i32 %v1_15420, 32
  %v3_15420 = inttoptr i32 %v2_15420 to i32*
  store i32 %v2_15418, i32* %v3_15420, align 4
  %v0_15424 = load i32, i32* %r4.global-to-local, align 4
  %v1_15424 = load i32, i32* %r6.global-to-local, align 4
  %v2_15424 = add i32 %v1_15424, 36
  %v3_15424 = inttoptr i32 %v2_15424 to i32*
  store i32 %v0_15424, i32* %v3_15424, align 4
  %v0_15428 = load i32, i32* %r2.global-to-local, align 4
  %v1_15428 = load i32, i32* %r6.global-to-local, align 4
  %v2_15428 = add i32 %v1_15428, 12
  %v3_15428 = inttoptr i32 %v2_15428 to i32*
  store i32 %v0_15428, i32* %v3_15428, align 4
  %v0_1542c = load i32, i32* %r5.global-to-local, align 4
  %v1_1542c = add i32 %v0_1542c, 48
  %v2_1542c = inttoptr i32 %v1_1542c to i32*
  %v3_1542c = load i32, i32* %v2_1542c, align 4
  %v1_15430 = add i32 %v0_1542c, 24
  store i32 %v1_15430, i32* %ip.global-to-local, align 4
  %v1_15434 = inttoptr i32 %v1_15430 to i32*
  %v2_15434 = load i32, i32* %v1_15434, align 4
  store i32 %v2_15434, i32* %ip.global-to-local, align 4
  %v3_15434 = add i32 %v0_1542c, 28
  %v4_15434 = inttoptr i32 %v3_15434 to i32*
  %v5_15434 = load i32, i32* %v4_15434, align 4
  store i32 %v5_15434, i32* %lr.global-to-local, align 4
  %v1_15438 = load i32, i32* %r6.global-to-local, align 4
  %v2_15438 = add i32 %v1_15438, 44
  %v3_15438 = inttoptr i32 %v2_15438 to i32*
  store i32 %v3_1542c, i32* %v3_15438, align 4
  %v0_1543c = load i32, i32* %r5.global-to-local, align 4
  %v1_1543c = add i32 %v0_1543c, 64
  %v2_1543c = inttoptr i32 %v1_1543c to i32*
  %v3_1543c = load i32, i32* %v2_1543c, align 4
  %v1_15440 = add i32 %v0_1543c, 56
  %v2_15440 = inttoptr i32 %v1_15440 to i32*
  %v3_15440 = load i32, i32* %v2_15440, align 4
  store i32 %v3_15440, i32* %r2.global-to-local, align 4
  %v1_15444 = load i32, i32* %r6.global-to-local, align 4
  %v2_15444 = add i32 %v1_15444, 52
  %v3_15444 = inttoptr i32 %v2_15444 to i32*
  store i32 %v3_1543c, i32* %v3_15444, align 4
  %v0_15448 = load i32, i32* %r2.global-to-local, align 4
  %v1_15448 = load i32, i32* %r6.global-to-local, align 4
  %v2_15448 = add i32 %v1_15448, 48
  %v3_15448 = inttoptr i32 %v2_15448 to i32*
  store i32 %v0_15448, i32* %v3_15448, align 4
  %v0_1544c = load i32, i32* %r5.global-to-local, align 4
  %v1_1544c = add i32 %v0_1544c, 72
  %v1_15450 = inttoptr i32 %v1_1544c to i32*
  %v2_15450 = load i32, i32* %v1_15450, align 4
  %v3_15450 = add i32 %v0_1544c, 76
  %v4_15450 = inttoptr i32 %v3_15450 to i32*
  %v5_15450 = load i32, i32* %v4_15450, align 4
  store i32 %v5_15450, i32* %r1.global-to-local, align 4
  %v0_15454 = load i32, i32* %r6.global-to-local, align 4
  %v1_15454 = add i32 %v0_15454, 56
  %v1_15458 = inttoptr i32 %v1_15454 to i32*
  store i32 %v2_15450, i32* %v1_15458, align 4
  %v3_15458 = add i32 %v0_15454, 60
  %v4_15458 = inttoptr i32 %v3_15458 to i32*
  %v5_15458 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15458, i32* %v4_15458, align 4
  %v0_1545c = load i32, i32* %r5.global-to-local, align 4
  %v1_1545c = add i32 %v0_1545c, 80
  %v1_15460 = inttoptr i32 %v1_1545c to i32*
  %v2_15460 = load i32, i32* %v1_15460, align 4
  %v3_15460 = add i32 %v0_1545c, 84
  %v4_15460 = inttoptr i32 %v3_15460 to i32*
  %v5_15460 = load i32, i32* %v4_15460, align 4
  store i32 %v5_15460, i32* %r1.global-to-local, align 4
  %v0_15464 = load i32, i32* %r6.global-to-local, align 4
  %v1_15464 = add i32 %v0_15464, 64
  %v1_15468 = inttoptr i32 %v1_15464 to i32*
  store i32 %v2_15460, i32* %v1_15468, align 4
  %v3_15468 = add i32 %v0_15464, 68
  %v4_15468 = inttoptr i32 %v3_15468 to i32*
  %v5_15468 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15468, i32* %v4_15468, align 4
  %v0_1546c = load i32, i32* %r5.global-to-local, align 4
  %v1_1546c = add i32 %v0_1546c, 16
  %v2_1546c = inttoptr i32 %v1_1546c to i32*
  %v3_1546c = load i32, i32* %v2_1546c, align 4
  %v1_15470 = load i32, i32* %r6.global-to-local, align 4
  %v2_15470 = add i32 %v1_15470, 16
  %v3_15470 = inttoptr i32 %v2_15470 to i32*
  store i32 %v3_1546c, i32* %v3_15470, align 4
  %v0_15474 = load i32, i32* %r5.global-to-local, align 4
  %v1_15474 = add i32 %v0_15474, 88
  %v1_15478 = add i32 %v0_15474, 20
  %v2_15478 = inttoptr i32 %v1_15478 to i32*
  %v3_15478 = load i32, i32* %v2_15478, align 4
  store i32 %v3_15478, i32* %r2.global-to-local, align 4
  %v1_1547c = inttoptr i32 %v1_15474 to i32*
  %v2_1547c = load i32, i32* %v1_1547c, align 4
  %v3_1547c = add i32 %v0_15474, 92
  %v4_1547c = inttoptr i32 %v3_1547c to i32*
  %v5_1547c = load i32, i32* %v4_1547c, align 4
  store i32 %v5_1547c, i32* %r1.global-to-local, align 4
  %v0_15480 = load i32, i32* %r6.global-to-local, align 4
  %v1_15480 = add i32 %v0_15480, 72
  %v1_15484 = inttoptr i32 %v1_15480 to i32*
  store i32 %v2_1547c, i32* %v1_15484, align 4
  %v3_15484 = add i32 %v0_15480, 76
  %v4_15484 = inttoptr i32 %v3_15484 to i32*
  %v5_15484 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15484, i32* %v4_15484, align 4
  %v0_15488 = load i32, i32* %r2.global-to-local, align 4
  %v1_15488 = load i32, i32* %r6.global-to-local, align 4
  %v2_15488 = add i32 %v1_15488, 20
  %v3_15488 = inttoptr i32 %v2_15488 to i32*
  store i32 %v0_15488, i32* %v3_15488, align 4
  %v0_1548c = load i32, i32* %ip.global-to-local, align 4
  %v1_1548c = load i32, i32* %r6.global-to-local, align 4
  %v2_1548c = add i32 %v1_1548c, 24
  %v3_1548c = inttoptr i32 %v2_1548c to i32*
  store i32 %v0_1548c, i32* %v3_1548c, align 4
  %v0_15490 = load i32, i32* %lr.global-to-local, align 4
  %v1_15490 = load i32, i32* %r6.global-to-local, align 4
  %v2_15490 = add i32 %v1_15490, 28
  %v3_15490 = inttoptr i32 %v2_15490 to i32*
  store i32 %v0_15490, i32* %v3_15490, align 4
  %v2_15494 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15494, i32* %r4.global-to-local, align 4
  ret i32 %v2_1547c

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 84, { 1, 2, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_1549c(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1549c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_154b8 = inttoptr i32 %arg2 to i8*
  %v3_154b8 = call i32 @function_12950(i8* %v2_154b8, i32 0)
  %v1_154bc = add i32 %tmp, 4
  %v2_154bc = inttoptr i32 %v1_154bc to i32*
  %v3_154bc = load i32, i32* %v2_154bc, align 4
  %v2_154c0 = load i32, i32* %arg1, align 4
  store i32 %v2_154c0, i32* %r8.global-to-local, align 4
  %v1_154c4 = load i32, i32* %r5.global-to-local, align 4
  %v2_154c4 = add i32 %v1_154c4, 12
  %v3_154c4 = inttoptr i32 %v2_154c4 to i32*
  store i32 %v3_154bc, i32* %v3_154c4, align 4
  %v0_154c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_154c8 = add i32 %v0_154c8, 20
  %v2_154c8 = inttoptr i32 %v1_154c8 to i32*
  %v3_154c8 = load i32, i32* %v2_154c8, align 4
  %v1_154cc = add i32 %v0_154c8, 16
  %v2_154cc = inttoptr i32 %v1_154cc to i32*
  %v3_154cc = load i32, i32* %v2_154cc, align 4
  store i32 %v3_154cc, i32* %r6.global-to-local, align 4
  %v1_154d0 = load i32, i32* %r5.global-to-local, align 4
  %v2_154d0 = add i32 %v1_154d0, 44
  %v3_154d0 = inttoptr i32 %v2_154d0 to i32*
  store i32 %v3_154c8, i32* %v3_154d0, align 4
  %v0_154d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_154d4 = add i32 %v0_154d4, 24
  %v2_154d4 = inttoptr i32 %v1_154d4 to i32*
  %v3_154d4 = load i32, i32* %v2_154d4, align 4
  %v1_154d8 = load i32, i32* %r5.global-to-local, align 4
  %v2_154d8 = add i32 %v1_154d8, 48
  %v3_154d8 = inttoptr i32 %v2_154d8 to i32*
  store i32 %v3_154d4, i32* %v3_154d8, align 4
  %v0_154dc = load i32, i32* %r4.global-to-local, align 4
  %v1_154dc = add i32 %v0_154dc, 28
  %v2_154dc = inttoptr i32 %v1_154dc to i32*
  %v3_154dc = load i32, i32* %v2_154dc, align 4
  %v1_154e0 = load i32, i32* %r5.global-to-local, align 4
  %v2_154e0 = add i32 %v1_154e0, 52
  %v3_154e0 = inttoptr i32 %v2_154e0 to i32*
  store i32 %v3_154dc, i32* %v3_154e0, align 4
  %v0_154e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_154e4 = add i32 %v0_154e4, 32
  %v1_154e8 = inttoptr i32 %v1_154e4 to i32*
  %v2_154e8 = load i32, i32* %v1_154e8, align 4
  %v3_154e8 = add i32 %v0_154e4, 36
  %v4_154e8 = inttoptr i32 %v3_154e8 to i32*
  %v5_154e8 = load i32, i32* %v4_154e8, align 4
  store i32 %v5_154e8, i32* %r1.global-to-local, align 4
  %v0_154ec = load i32, i32* %r5.global-to-local, align 4
  %v1_154ec = add i32 %v0_154ec, 56
  %v1_154f0 = inttoptr i32 %v1_154ec to i32*
  store i32 %v2_154e8, i32* %v1_154f0, align 4
  %v3_154f0 = add i32 %v0_154ec, 60
  %v4_154f0 = inttoptr i32 %v3_154f0 to i32*
  %v5_154f0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_154f0, i32* %v4_154f0, align 4
  %v0_154f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_154f4 = add i32 %v0_154f4, 40
  %v1_154f8 = inttoptr i32 %v1_154f4 to i32*
  %v2_154f8 = load i32, i32* %v1_154f8, align 4
  %v3_154f8 = add i32 %v0_154f4, 44
  %v4_154f8 = inttoptr i32 %v3_154f8 to i32*
  %v5_154f8 = load i32, i32* %v4_154f8, align 4
  store i32 %v5_154f8, i32* %r1.global-to-local, align 4
  %v0_154fc = load i32, i32* %r5.global-to-local, align 4
  %v1_154fc = add i32 %v0_154fc, 64
  %v1_15500 = inttoptr i32 %v1_154fc to i32*
  store i32 %v2_154f8, i32* %v1_15500, align 4
  %v3_15500 = add i32 %v0_154fc, 68
  %v4_15500 = inttoptr i32 %v3_15500 to i32*
  %v5_15500 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15500, i32* %v4_15500, align 4
  %v0_15504 = load i32, i32* %r4.global-to-local, align 4
  %v1_15504 = add i32 %v0_15504, 48
  %v1_15508 = inttoptr i32 %v1_15504 to i32*
  %v2_15508 = load i32, i32* %v1_15508, align 4
  %v3_15508 = add i32 %v0_15504, 52
  %v4_15508 = inttoptr i32 %v3_15508 to i32*
  %v5_15508 = load i32, i32* %v4_15508, align 4
  store i32 %v5_15508, i32* %r1.global-to-local, align 4
  %v1_1550c = add i32 %v0_15504, 8
  %v2_1550c = inttoptr i32 %v1_1550c to i16*
  %v3_1550c = load i16, i16* %v2_1550c, align 2
  %v4_1550c = zext i16 %v3_1550c to i32
  store i32 %v4_1550c, i32* %r2.global-to-local, align 4
  %v1_15510 = add i32 %v0_15504, 10
  %v2_15510 = inttoptr i32 %v1_15510 to i16*
  %v3_15510 = load i16, i16* %v2_15510, align 2
  %v4_15510 = zext i16 %v3_15510 to i32
  store i32 %v4_15510, i32* %ip.global-to-local, align 4
  %v1_15514 = add i32 %v0_15504, 12
  %v2_15514 = inttoptr i32 %v1_15514 to i16*
  %v3_15514 = load i16, i16* %v2_15514, align 2
  %v4_15514 = zext i16 %v3_15514 to i32
  store i32 %v4_15514, i32* %lr.global-to-local, align 4
  %v1_15518 = add i32 %v0_15504, 14
  %v2_15518 = inttoptr i32 %v1_15518 to i16*
  %v3_15518 = load i16, i16* %v2_15518, align 2
  %v4_15518 = zext i16 %v3_15518 to i32
  store i32 %v4_15518, i32* %r4.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v0_15524 = load i32, i32* %r5.global-to-local, align 4
  %v1_15524 = add i32 %v0_15524, 72
  %v1_15528 = inttoptr i32 %v1_15524 to i32*
  store i32 %v2_15508, i32* %v1_15528, align 4
  %v3_15528 = add i32 %v0_15524, 76
  %v4_15528 = inttoptr i32 %v3_15528 to i32*
  %v5_15528 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_15528, i32* %v4_15528, align 4
  %v0_1552c = load i32, i32* %r5.global-to-local, align 4
  %v1_1552c = inttoptr i32 %v0_1552c to i32*
  %v2_1552c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v2_1552c, i32* %v1_1552c, align 4
  %v3_1552c = add i32 %v0_1552c, 4
  %v4_1552c = inttoptr i32 %v3_1552c to i32*
  %v5_1552c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v5_1552c, i32* %v4_1552c, align 4
  %v0_15530 = load i32, i32* %r6.global-to-local, align 4
  %v1_15530 = load i32, i32* %r5.global-to-local, align 4
  %v2_15530 = add i32 %v1_15530, 32
  %v3_15530 = inttoptr i32 %v2_15530 to i32*
  store i32 %v0_15530, i32* %v3_15530, align 4
  %v0_15534 = load i32, i32* %r7.global-to-local, align 4
  %v1_15534 = load i32, i32* %r5.global-to-local, align 4
  %v2_15534 = add i32 %v1_15534, 36
  %v3_15534 = inttoptr i32 %v2_15534 to i32*
  store i32 %v0_15534, i32* %v3_15534, align 4
  %v0_15538 = load i32, i32* %r2.global-to-local, align 4
  %v1_15538 = load i32, i32* %r5.global-to-local, align 4
  %v2_15538 = add i32 %v1_15538, 16
  %v3_15538 = inttoptr i32 %v2_15538 to i32*
  store i32 %v0_15538, i32* %v3_15538, align 4
  %v0_1553c = load i32, i32* %ip.global-to-local, align 4
  %v1_1553c = load i32, i32* %r5.global-to-local, align 4
  %v2_1553c = add i32 %v1_1553c, 20
  %v3_1553c = inttoptr i32 %v2_1553c to i32*
  store i32 %v0_1553c, i32* %v3_1553c, align 4
  %v0_15540 = load i32, i32* %lr.global-to-local, align 4
  %v1_15540 = load i32, i32* %r5.global-to-local, align 4
  %v2_15540 = add i32 %v1_15540, 24
  %v3_15540 = inttoptr i32 %v2_15540 to i32*
  store i32 %v0_15540, i32* %v3_15540, align 4
  %v0_15544 = load i32, i32* %r4.global-to-local, align 4
  %v1_15544 = load i32, i32* %r5.global-to-local, align 4
  %v2_15544 = add i32 %v1_15544, 28
  %v3_15544 = inttoptr i32 %v2_15544 to i32*
  store i32 %v0_15544, i32* %v3_15544, align 4
  ret i32 %v2_15508

; uselistorder directives
  uselistorder i32 %v0_15504, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 76, { 1, 2, 3, 4, 0 }
  uselistorder i32 68, { 0, 1, 7, 2, 3, 4, 5, 6 }
  uselistorder i32 60, { 3, 4, 1, 5, 6, 0, 7, 8, 9, 2, 10 }
  uselistorder i32 88, { 4, 0, 1, 2, 3 }
}

define i32 @function_15554() local_unnamed_addr {
dec_label_pc_15554:
  %stack_var_-16 = alloca i32, align 4
  %v2_15558 = ptrtoint i32* %stack_var_-16 to i32
  %v2_15564 = call i32 @function_17288(i32 7, i32 %v2_15558)
  %v1_15568 = icmp slt i32 %v2_15564, 0
  %v5_1556c = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_15568, i32 256, i32 %v5_1556c
  ret i32 %storemerge
}

define i32 @function_15580(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15580:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15580 = load i32, i32* @r7, align 4
  store i32 %v3_15580, i32* %stack_var_-8, align 4
  %v0_1558c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1558c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1558c, -4095
  br i1 %tmp, label %dec_label_pc_155ac, label %dec_label_pc_1559c

dec_label_pc_1559c:                               ; preds = %dec_label_pc_15580
  %v0_1559c = call i32 @function_128f8()
  %v0_155a0 = load i32, i32* %r7.global-to-local, align 4
  %v1_155a0 = sub i32 0, %v0_155a0
  %v2_155a4 = inttoptr i32 %v0_1559c to i32*
  store i32 %v1_155a0, i32* %v2_155a4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_155ac.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_155ac

dec_label_pc_155ac:                               ; preds = %dec_label_pc_15580, %dec_label_pc_1559c
  %v1_155b0 = phi i32 [ %v0_1558c, %dec_label_pc_15580 ], [ -1, %dec_label_pc_1559c ]
  %v2_155ac = phi i32 [ %v3_15580, %dec_label_pc_15580 ], [ %v2_155ac.pre, %dec_label_pc_1559c ]
  store i32 %v2_155ac, i32* @r7, align 4
  ret i32 %v1_155b0

; uselistorder directives
  uselistorder i32 %v0_1558c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_155ac, { 1, 0 }
}

define i32 @function_155b4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_155b4:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_155b4 = load i32, i32* @r7, align 4
  store i32 %v3_155b4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_155dc, label %dec_label_pc_155cc

dec_label_pc_155cc:                               ; preds = %dec_label_pc_155b4
  %v0_155cc = call i32 @function_128f8()
  %v0_155d0 = load i32, i32* %r7.global-to-local, align 4
  %v1_155d0 = sub i32 0, %v0_155d0
  %v2_155d4 = inttoptr i32 %v0_155cc to i32*
  store i32 %v1_155d0, i32* %v2_155d4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_155e0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_155dc

dec_label_pc_155dc:                               ; preds = %dec_label_pc_155b4, %dec_label_pc_155cc
  %v2_155e0 = phi i32 [ %v3_155b4, %dec_label_pc_155b4 ], [ %v2_155e0.pre, %dec_label_pc_155cc ]
  %v0_155dc = phi i32 [ %arg1, %dec_label_pc_155b4 ], [ -1, %dec_label_pc_155cc ]
  store i32 %v2_155e0, i32* @r7, align 4
  ret i32 %v0_155dc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_155dc, { 1, 0 }
}

define i32 @function_155e8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_155e8:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1561c, label %dec_label_pc_1560c

dec_label_pc_1560c:                               ; preds = %dec_label_pc_155e8
  %v0_1560c = call i32 @function_128f8()
  %v0_15610 = load i32, i32* %r4.global-to-local, align 4
  %v1_15610 = sub i32 0, %v0_15610
  %v2_15614 = inttoptr i32 %v0_1560c to i32*
  store i32 %v1_15610, i32* %v2_15614, align 4
  br label %dec_label_pc_1561c

dec_label_pc_1561c:                               ; preds = %dec_label_pc_155e8, %dec_label_pc_1560c
  %v1_15624 = phi i32 [ %arg1, %dec_label_pc_155e8 ], [ -1, %dec_label_pc_1560c ]
  ret i32 %v1_15624

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1561c, { 1, 0 }
}

define i32 @function_15628(i32 %arg1) local_unnamed_addr {
dec_label_pc_15628:
  %v1_15638 = load i32, i32* @r0, align 4
  ret i32 %v1_15638
}

define i32 @function_1563c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1563c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1563c = load i32, i32* @r7, align 4
  store i32 %v3_1563c, i32* %stack_var_-8, align 4
  %v0_15648 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_15648, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15648, -4095
  br i1 %tmp, label %dec_label_pc_15668, label %dec_label_pc_15658

dec_label_pc_15658:                               ; preds = %dec_label_pc_1563c
  %v0_15658 = call i32 @function_128f8()
  %v0_1565c = load i32, i32* %r7.global-to-local, align 4
  %v1_1565c = sub i32 0, %v0_1565c
  %v2_15660 = inttoptr i32 %v0_15658 to i32*
  store i32 %v1_1565c, i32* %v2_15660, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_15668.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15668

dec_label_pc_15668:                               ; preds = %dec_label_pc_1563c, %dec_label_pc_15658
  %v1_1566c = phi i32 [ %v0_15648, %dec_label_pc_1563c ], [ -1, %dec_label_pc_15658 ]
  %v2_15668 = phi i32 [ %v3_1563c, %dec_label_pc_1563c ], [ %v2_15668.pre, %dec_label_pc_15658 ]
  store i32 %v2_15668, i32* @r7, align 4
  ret i32 %v1_1566c

; uselistorder directives
  uselistorder i32 %v0_15648, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15668, { 1, 0 }
}

define i32 @function_15670(i32 %arg1) local_unnamed_addr {
dec_label_pc_15670:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15674.outer

dec_label_pc_15674.outer:                         ; preds = %dec_label_pc_1568c, %dec_label_pc_15670
  %v0_15674.ph = phi i32 [ %v0_15674.pre.pre, %dec_label_pc_1568c ], [ %arg1, %dec_label_pc_15670 ]
  %tmp = icmp ult i32 %v0_15674.ph, -4095
  br label %dec_label_pc_15674

dec_label_pc_15674:                               ; preds = %dec_label_pc_15674.outer, %dec_label_pc_15674
  br i1 %tmp, label %dec_label_pc_15674, label %dec_label_pc_1568c

dec_label_pc_1568c:                               ; preds = %dec_label_pc_15674
  %v0_1568c = call i32 @function_128f8()
  %v1_15690 = sub i32 0, %v0_15674.ph
  %v2_15694 = inttoptr i32 %v0_1568c to i32*
  store i32 %v1_15690, i32* %v2_15694, align 4
  %v0_15674.pre.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15674.outer

; uselistorder directives
  uselistorder i32 %v0_15674.ph, { 1, 0 }
  uselistorder label %dec_label_pc_15674, { 1, 0 }
}

define i32 @function_1569c(i32* %arg1) local_unnamed_addr {
dec_label_pc_1569c:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 add (i32 ptrtoint (i32* @global_var_aa9c.616 to i32), i32 87728), i32* @r6, align 4
  %v1_156b0 = add i32 %tmp, 24
  store i32 %v1_156b0, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_156c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_aa9c.616 to i32), i32 87800) to i32*), align 4
  store i32 %v4_156c8, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_156c8)
  %v0_156dc = load i32, i32* @r6, align 4
  %v2_156dc = add i32 %v0_156dc, 16
  %v3_156dc = inttoptr i32 %v2_156dc to i32*
  %v4_156dc = load i32, i32* %v3_156dc, align 4
  store i32 %v4_156dc, i32* %ip.global-to-local, align 4
  store i32 87784, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_156dc)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_156ec

dec_label_pc_156ec:                               ; preds = %dec_label_pc_1571c, %dec_label_pc_1569c
  %v0_156ec = load i32, i32* @r5, align 4
  %v1_156ec = add i32 %v0_156ec, 4
  %v2_156ec = inttoptr i32 %v1_156ec to i32*
  %v3_156ec = load i32, i32* %v2_156ec, align 4
  %v4_156ec = add i32 %v0_156ec, 8
  %v5_156ec = inttoptr i32 %v4_156ec to i32*
  %v6_156ec = load i32, i32* %v5_156ec, align 4
  %tmp10 = icmp ugt i32 %v6_156ec, %v3_156ec
  br i1 %tmp10, label %dec_label_pc_1571c, label %dec_label_pc_156f8

dec_label_pc_156f8:                               ; preds = %dec_label_pc_156ec
  %v1_156f8 = inttoptr i32 %v0_156ec to i32*
  %v2_156f8 = load i32, i32* %v1_156f8, align 4
  %v1_156fc = add i32 %v0_156ec, 12
  %v2_156fc = inttoptr i32 %v1_156fc to i32*
  %v3_156fc = load i32, i32* %v2_156fc, align 4
  %v1_15700 = add i32 %v0_156ec, 20
  %v2_15700 = inttoptr i32 %v1_15700 to i32*
  %v3_15700 = load i32, i32* %v2_15700, align 4
  %v4_15704 = inttoptr i32 %v3_156fc to i32*
  %v5_15704 = call i32 @function_172bc(i32 %v2_156f8, i32* %v4_15704, i32 %v3_15700, i32 %v6_156ec)
  %tmp9 = icmp slt i32 %v5_15704, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_15714

.thread:                                          ; preds = %dec_label_pc_156f8
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_1574c

dec_label_pc_15714:                               ; preds = %dec_label_pc_156f8
  %v1_15714 = load i32, i32* @r5, align 4
  %v2_15714 = add i32 %v1_15714, 8
  %v3_15714 = inttoptr i32 %v2_15714 to i32*
  store i32 %v5_15704, i32* %v3_15714, align 4
  %v0_15718 = load i32, i32* @r7, align 4
  %v1_15718 = load i32, i32* @r5, align 4
  %v2_15718 = add i32 %v1_15718, 4
  %v3_15718 = inttoptr i32 %v2_15718 to i32*
  store i32 %v0_15718, i32* %v3_15718, align 4
  %v0_1571c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1571c

dec_label_pc_1571c:                               ; preds = %dec_label_pc_156ec, %dec_label_pc_15714
  %v1_15740 = phi i32 [ %v0_156ec, %dec_label_pc_156ec ], [ %v0_1571c.pre, %dec_label_pc_15714 ]
  %v1_1571c = add i32 %v1_15740, 4
  %v2_1571c = inttoptr i32 %v1_1571c to i32*
  %v3_1571c = load i32, i32* %v2_1571c, align 4
  %v1_15720 = add i32 %v1_15740, 12
  %v2_15720 = inttoptr i32 %v1_15720 to i32*
  %v3_15720 = load i32, i32* %v2_15720, align 4
  %v2_15724 = add i32 %v3_15720, %v3_1571c
  store i32 %v2_15724, i32* @r4, align 4
  %v3_15728 = inttoptr i32 %v2_15724 to i32*
  %v4_15728 = load i32, i32* %v3_15728, align 4
  %v1_1572c = add i32 %v2_15724, 4
  %v2_1572c = inttoptr i32 %v1_1572c to i32*
  %v3_1572c = load i32, i32* %v2_1572c, align 4
  %v1_15730 = add i32 %v2_15724, 16
  %v2_15730 = inttoptr i32 %v1_15730 to i16*
  %v3_15730 = load i16, i16* %v2_15730, align 2
  %v4_15730 = zext i16 %v3_15730 to i32
  %v1_15734 = add i32 %v2_15724, 8
  %v2_15734 = inttoptr i32 %v1_15734 to i32*
  %v3_15734 = load i32, i32* %v2_15734, align 4
  store i32 %v3_15734, i32* %ip.global-to-local, align 4
  %v2_15738 = add i32 %v4_15730, %v3_1571c
  %v2_1573c = or i32 %v3_1572c, %v4_15728
  %v4_1573c = icmp eq i32 %v2_1573c, 0
  store i32 %v2_15738, i32* %v2_1571c, align 4
  %v0_15744 = load i32, i32* %ip.global-to-local, align 4
  %v1_15744 = load i32, i32* @r5, align 4
  %v2_15744 = add i32 %v1_15744, 16
  %v3_15744 = inttoptr i32 %v2_15744 to i32*
  store i32 %v0_15744, i32* %v3_15744, align 4
  br i1 %v4_1573c, label %dec_label_pc_156ec, label %dec_label_pc_1574c

dec_label_pc_1574c:                               ; preds = %dec_label_pc_1571c, %.thread
  %v0_15758 = load i32, i32* @r6, align 4
  %v2_15758 = add i32 %v0_15758, 24
  %v3_15758 = inttoptr i32 %v2_15758 to i32*
  %v4_15758 = load i32, i32* %v3_15758, align 4
  store i32 %v4_15758, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15758)
  %v0_15764 = load i32, i32* @r4, align 4
  ret i32 %v0_15764

; uselistorder directives
  uselistorder i32 %v2_15724, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_15740, { 1, 0 }
  uselistorder i32 %v6_156ec, { 1, 0 }
  uselistorder i32 %v0_156ec, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_1571c, { 1, 0 }
}

define i32 @function_15778(i32 %arg1) local_unnamed_addr {
dec_label_pc_15778:
  %v0_15778 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15778, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_15778
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_15778, %bb
  %v10_15784 = phi i32 [ %arg1, %dec_label_pc_15778 ], [ 0, %bb ]
  ret i32 %v10_15784

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_15788(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15788:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_15788 = load i32, i32* @r4, align 4
  %v6_15788 = load i32, i32* @r5, align 4
  %v9_15788 = load i32, i32* @r6, align 4
  %v12_15788 = load i32, i32* @r7, align 4
  %v15_15788 = load i32, i32* @r8, align 4
  %v18_15788 = load i32, i32* @sb, align 4
  %v21_15788 = load i32, i32* @sl, align 4
  %v24_15788 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_1578c = icmp eq i32* %arg1, null
  store i1 %v2_1578c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_1578c, label %dec_label_pc_15a9c, label %dec_label_pc_157a4

dec_label_pc_157a4:                               ; preds = %dec_label_pc_15788
  %v1_157a4 = urem i32 %arg3, 256
  store i32 %v1_157a4, i32* @sb, align 4
  %v1_157a8 = udiv i32 %arg3, 256
  %v3_157ac = urem i32 %v1_157a8, 256
  %v3_157b0 = mul nuw nsw i32 %v1_157a4, 4
  %v1_157b8 = or i32 %v3_157b0, 1
  %v1_157c4 = and i32 %arg3, 131072
  %v1_157c8 = add nsw i32 %v1_157a4, -1
  %v1_157d4 = and i32 %arg3, 262144
  store i32 %v1_157d4, i32* %r2.global-to-local, align 4
  %v1_157d8 = and i32 %arg3, 65536
  store i32 %v1_157d8, i32* %r3.global-to-local, align 4
  store i32 %v1_157d8, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_157e8 = add i32 %arg4, 1
  store i32 %v1_157e8, i32* @sl, align 4
  %v2_15968 = inttoptr i32 %arg2 to i32*
  %v2_15978 = icmp eq i32 %v1_157c4, 0
  %v2_159d0 = icmp eq i32 %v1_157d4, 0
  br label %dec_label_pc_157ec

dec_label_pc_157ec:                               ; preds = %dec_label_pc_157ec.backedge, %dec_label_pc_157a4
  %v2_15808 = phi i32 [ %v0_157ec.pre, %dec_label_pc_157ec.backedge ], [ %tmp, %dec_label_pc_157a4 ]
  %v1_157ec = add i32 %v2_15808, 4
  %v2_157ec = inttoptr i32 %v1_157ec to i32*
  %v3_157ec = load i32, i32* %v2_157ec, align 4
  store i32 %v3_157ec, i32* %r3.global-to-local, align 4
  %v2_157f0 = icmp eq i32 %v3_157ec, 0
  store i1 %v2_157f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_157f0, label %dec_label_pc_157f8, label %dec_label_pc_15840

dec_label_pc_157f8:                               ; preds = %dec_label_pc_157ec
  %v1_157f8 = add i32 %v2_15808, 16
  %v2_157f8 = inttoptr i32 %v1_157f8 to i32*
  %v3_157f8 = load i32, i32* %v2_157f8, align 4
  store i32 %v3_157f8, i32* %r3.global-to-local, align 4
  %v2_157fc = icmp eq i32 %v3_157f8, 0
  store i1 %v2_157fc, i1* %cpsr_z.global-to-local, align 1
  %v1_15800 = add i32 %v2_15808, 8
  %v2_15800 = inttoptr i32 %v1_15800 to i32*
  %v3_15800 = load i32, i32* %v2_15800, align 4
  store i32 %v3_15800, i32* %r3.global-to-local, align 4
  br i1 %v2_157fc, label %bb, label %bb66

bb:                                               ; preds = %dec_label_pc_157f8
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_157f8, align 4
  %v0_1580c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_157f8, %bb
  %v0_1580c = phi i32 [ %v0_1580c.pre, %bb ], [ %v3_15800, %dec_label_pc_157f8 ]
  %v2_1580c = icmp eq i32 %v0_1580c, 0
  store i1 %v2_1580c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1580c, label %bb67, label %.thread

bb67:                                             ; preds = %bb66
  store i32 %v1_157b8, i32* %r3.global-to-local, align 4
  %v2_15814 = load i32, i32* @r5, align 4
  %v3_15814 = add i32 %v2_15814, 8
  %v4_15814 = inttoptr i32 %v3_15814 to i32*
  store i32 %v1_157b8, i32* %v4_15814, align 4
  br label %.thread

.thread:                                          ; preds = %bb66, %bb67
  %v0_15818 = load i32, i32* @r5, align 4
  %v1_15818 = add i32 %v0_15818, 16
  %v2_15818 = inttoptr i32 %v1_15818 to i32*
  %v3_15818 = load i32, i32* %v2_15818, align 4
  store i32 %v3_15818, i32* %r0.global-to-local, align 4
  %v1_1581c = add i32 %v0_15818, 8
  %v2_1581c = inttoptr i32 %v1_1581c to i32*
  %v3_1581c = load i32, i32* %v2_1581c, align 4
  store i32 %v3_1581c, i32* %r3.global-to-local, align 4
  %v2_15820 = add i32 %v3_1581c, %v3_15818
  store i32 %v2_15820, i32* @r0, align 4
  %v0_15824 = call i32 @function_12f2c()
  store i32 %v0_15824, i32* %r0.global-to-local, align 4
  %v2_15828 = icmp eq i32 %v0_15824, 0
  store i1 %v2_15828, i1* %cpsr_z.global-to-local, align 1
  %v1_1582c = load i32, i32* @r5, align 4
  %v2_1582c = add i32 %v1_1582c, 4
  %v3_1582c = inttoptr i32 %v2_1582c to i32*
  store i32 %v0_15824, i32* %v3_1582c, align 4
  br i1 %v2_15828, label %dec_label_pc_15a9c, label %dec_label_pc_15834

dec_label_pc_15834:                               ; preds = %.thread
  %v0_15834 = load i32, i32* @r5, align 4
  %v1_15834 = add i32 %v0_15834, 20
  %v2_15834 = inttoptr i32 %v1_15834 to i32*
  %v3_15834 = load i32, i32* %v2_15834, align 4
  %v1_15838 = or i32 %v3_15834, 1
  store i32 %v1_15838, i32* %r3.global-to-local, align 4
  store i32 %v1_15838, i32* %v2_15834, align 4
  %v0_15840.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15840

dec_label_pc_15840:                               ; preds = %dec_label_pc_157ec, %dec_label_pc_15834
  %v1_15848 = phi i32 [ %v2_15808, %dec_label_pc_157ec ], [ %v0_15840.pre, %dec_label_pc_15834 ]
  %v1_15840 = add i32 %v1_15848, 4
  %v2_15840 = inttoptr i32 %v1_15840 to i32*
  %v3_15840 = load i32, i32* %v2_15840, align 4
  store i32 %v3_15840, i32* %r2.global-to-local, align 4
  %v4_15840 = add i32 %v1_15848, 8
  %v5_15840 = inttoptr i32 %v4_15840 to i32*
  %v6_15840 = load i32, i32* %v5_15840, align 4
  %v2_15844 = add i32 %v6_15840, %v3_15840
  store i32 %v2_15844, i32* %r3.global-to-local, align 4
  %v2_15848 = add i32 %v1_15848, 12
  %v3_15848 = inttoptr i32 %v2_15848 to i32*
  store i32 %v2_15844, i32* %v3_15848, align 4
  %v0_1584c = load i32, i32* @fp, align 4
  store i32 %v0_1584c, i32* @r6, align 4
  br label %dec_label_pc_15850

dec_label_pc_15850:                               ; preds = %dec_label_pc_158dc, %dec_label_pc_158c8, %dec_label_pc_15840
  %v0_15858 = phi i32 [ %v0_1584c, %dec_label_pc_15840 ], [ %v1_158c8, %dec_label_pc_158c8 ], [ %v0_15858.pre.pre, %dec_label_pc_158dc ]
  %v0_15850 = load i32, i32* @r5, align 4
  %v1_15850 = add i32 %v0_15850, 12
  store i32 %v1_15850, i32* %r0.global-to-local, align 4
  %v1_15854 = inttoptr i32 %v1_15850 to i32*
  %v2_15854 = load i32, i32* %v1_15854, align 4
  store i32 %v2_15854, i32* %r0.global-to-local, align 4
  %v3_15854 = add i32 %v0_15850, 16
  %v4_15854 = inttoptr i32 %v3_15854 to i32*
  %v5_15854 = load i32, i32* %v4_15854, align 4
  %v2_15858 = add i32 %v2_15854, %v0_15858
  store i32 %v2_15858, i32* %r0.global-to-local, align 4
  %v2_1585c = sub i32 %v5_15854, %v0_15858
  %v1_15860 = inttoptr i32 %v0_15850 to i32*
  %v2_15860 = load i32, i32* %v1_15860, align 4
  store i32 %v2_15860, i32* %r2.global-to-local, align 4
  %v3_15864 = call i32 @function_16284(i32 %v2_15858, i32 %v2_1585c, i32 %v2_15860)
  store i32 %v3_15864, i32* %r0.global-to-local, align 4
  store i32 %v3_15864, i32* %r4.global-to-local, align 4
  %v2_15868 = icmp eq i32 %v3_15864, 0
  store i1 %v2_15868, i1* %cpsr_z.global-to-local, align 1
  %v0_15870 = load i32, i32* @r5, align 4
  %v1_15870 = add i32 %v0_15870, 12
  br i1 %v2_15868, label %dec_label_pc_15870, label %dec_label_pc_15888

dec_label_pc_15870:                               ; preds = %dec_label_pc_15850
  store i32 %v1_15870, i32* %r0.global-to-local, align 4
  %v1_15874 = inttoptr i32 %v1_15870 to i32*
  %v2_15874 = load i32, i32* %v1_15874, align 4
  store i32 %v2_15874, i32* %r0.global-to-local, align 4
  %v3_15874 = add i32 %v0_15870, 16
  %v4_15874 = inttoptr i32 %v3_15874 to i32*
  %v5_15874 = load i32, i32* %v4_15874, align 4
  store i32 %v5_15874, i32* @r2, align 4
  %v2_1587c = inttoptr i32 %v2_15874 to i8*
  %v3_1587c = call i32 @function_12950(i8* %v2_1587c, i32 0)
  store i32 %v3_1587c, i32* %r0.global-to-local, align 4
  %v0_15880 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15aa0

dec_label_pc_15888:                               ; preds = %dec_label_pc_15850
  %v2_15888 = inttoptr i32 %v1_15870 to i32*
  %v3_15888 = load i32, i32* %v2_15888, align 4
  store i32 %v3_15888, i32* @r4, align 4
  %v1_1588c = load i32, i32* @r6, align 4
  %v2_1588c = add i32 %v1_1588c, %v3_15888
  store i32 %v2_1588c, i32* %r0.global-to-local, align 4
  %v1_15890 = call i32 @function_16d30(i32 %v2_1588c)
  %v0_15898 = load i32, i32* @r6, align 4
  %v2_15898 = add i32 %v0_15898, %v1_15890
  store i32 %v2_15898, i32* @r6, align 4
  %v0_1589c = load i32, i32* @r4, align 4
  store i32 %v0_1589c, i32* @r0, align 4
  %v2_158a0 = call i32 @function_16f7c(i32 %v0_1589c, i32 10)
  store i32 %v2_158a0, i32* %r0.global-to-local, align 4
  %v2_158a4 = icmp eq i32 %v2_158a0, 0
  store i1 %v2_158a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_158a4, label %dec_label_pc_158d0, label %dec_label_pc_158ac

dec_label_pc_158ac:                               ; preds = %dec_label_pc_15888
  %v1_158ac = inttoptr i32 %v2_158a0 to i8*
  %v2_158ac = load i8, i8* %v1_158ac, align 1
  %v3_158ac = zext i8 %v2_158ac to i32
  %v1_158b0 = add nuw nsw i32 %v3_158ac, 255
  %v1_158b4 = urem i32 %v1_158b0, 256
  store i32 %v1_158b4, i32* %r3.global-to-local, align 4
  %v7_158b8 = icmp eq i32 %v1_158b4, 92
  store i1 %v7_158b8, i1* %cpsr_z.global-to-local, align 1
  %v1_158bc = trunc i32 %v1_158b0 to i8
  store i8 %v1_158bc, i8* %v1_158ac, align 1
  %v0_158c0 = load i32, i32* @r6, align 4
  %v1_158c0 = add i32 %v0_158c0, -1
  store i32 %v1_158c0, i32* @r6, align 4
  %v0_158c4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_158c4, label %dec_label_pc_158c8, label %dec_label_pc_15954

dec_label_pc_158c8:                               ; preds = %dec_label_pc_158ac
  %v1_158c8 = add i32 %v0_158c0, -2
  store i32 %v1_158c8, i32* @r6, align 4
  br label %dec_label_pc_15850

dec_label_pc_158d0:                               ; preds = %dec_label_pc_15888
  %v0_158d0 = load i32, i32* @r5, align 4
  %v1_158d0 = add i32 %v0_158d0, 20
  %v2_158d0 = inttoptr i32 %v1_158d0 to i32*
  %v3_158d0 = load i32, i32* %v2_158d0, align 4
  store i32 %v3_158d0, i32* %r3.global-to-local, align 4
  %v2_158d4 = icmp eq i32 %v3_158d0, 0
  store i1 %v2_158d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_158d4, label %dec_label_pc_1590c, label %dec_label_pc_158dc

dec_label_pc_158dc:                               ; preds = %dec_label_pc_158d0
  %v1_158dc = add i32 %v0_158d0, 16
  %v2_158dc = inttoptr i32 %v1_158dc to i32*
  %v3_158dc = load i32, i32* %v2_158dc, align 4
  store i32 %v3_158dc, i32* %r3.global-to-local, align 4
  %v1_158e0 = add i32 %v0_158d0, 8
  %v2_158e0 = inttoptr i32 %v1_158e0 to i32*
  %v3_158e0 = load i32, i32* %v2_158e0, align 4
  %v1_158e4 = add i32 %v3_158dc, 4096
  store i32 %v1_158e4, i32* %r3.global-to-local, align 4
  %v2_158e8 = add i32 %v3_158e0, %v1_158e4
  store i32 %v1_158e4, i32* %v2_158dc, align 4
  %v0_158f0 = load i32, i32* @r5, align 4
  %v1_158f0 = add i32 %v0_158f0, 4
  %v2_158f0 = inttoptr i32 %v1_158f0 to i32*
  %v3_158f0 = load i32, i32* %v2_158f0, align 4
  store i32 %v3_158f0, i32* %r0.global-to-local, align 4
  %v4_158f4 = inttoptr i32 %v3_158f0 to i32*
  %v5_158f4 = call i32 @function_13980(i32* %v4_158f4, i32 %v2_158e8, i32 %v2_15860, i32 %v1_158e4)
  store i32 %v5_158f4, i32* %r0.global-to-local, align 4
  %v0_158f8 = load i32, i32* @r5, align 4
  %v1_158f8 = add i32 %v0_158f8, 8
  %v2_158f8 = inttoptr i32 %v1_158f8 to i32*
  %v3_158f8 = load i32, i32* %v2_158f8, align 4
  %v2_158fc = add i32 %v3_158f8, %v5_158f4
  store i32 %v2_158fc, i32* %r3.global-to-local, align 4
  %v2_15900 = add i32 %v0_158f8, 12
  %v3_15900 = inttoptr i32 %v2_15900 to i32*
  store i32 %v2_158fc, i32* %v3_15900, align 4
  %v1_15904 = load i32, i32* @r5, align 4
  %v2_15904 = add i32 %v1_15904, 4
  %v3_15904 = inttoptr i32 %v2_15904 to i32*
  store i32 %v5_158f4, i32* %v3_15904, align 4
  %v0_15858.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_15850

dec_label_pc_1590c:                               ; preds = %dec_label_pc_158d0, %.dec_label_pc_1590c_crit_edge
  %v0_1590c = phi i32 [ %v0_1590c.pre, %.dec_label_pc_1590c_crit_edge ], [ %v0_158d0, %dec_label_pc_158d0 ]
  %v1_1590c = inttoptr i32 %v0_1590c to i32*
  %v2_1590c = load i32, i32* %v1_1590c, align 4
  %v1_15910 = add i32 %v2_1590c, 52
  %v2_15910 = inttoptr i32 %v1_15910 to i32*
  %v3_15910 = load i32, i32* %v2_15910, align 4
  store i32 %v3_15910, i32* %r3.global-to-local, align 4
  %v2_15914 = icmp eq i32 %v3_15910, 0
  store i1 %v2_15914, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15914, label %dec_label_pc_15940, label %dec_label_pc_1591c

dec_label_pc_1591c:                               ; preds = %dec_label_pc_1590c
  %v1_1591c = add i32 %v2_1590c, 16
  %v2_1591c = inttoptr i32 %v1_1591c to i32*
  %v3_1591c = load i32, i32* %v2_1591c, align 4
  store i32 %v3_1591c, i32* %r2.global-to-local, align 4
  %v1_15920 = add i32 %v2_1590c, 24
  %v2_15920 = inttoptr i32 %v1_15920 to i32*
  %v3_15920 = load i32, i32* %v2_15920, align 4
  store i32 %v3_15920, i32* %r3.global-to-local, align 4
  %v3_15924 = icmp ult i32 %v3_1591c, %v3_15920
  %v9_15924 = icmp eq i32 %v3_1591c, %v3_15920
  store i1 %v9_15924, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15924, label %dec_label_pc_15948thread-pre-split, label %dec_label_pc_15934

dec_label_pc_15934:                               ; preds = %dec_label_pc_1591c
  store i32 %v2_1590c, i32* %r0.global-to-local, align 4
  %v1_15938 = inttoptr i32 %v2_1590c to i16*
  %v2_15938 = call i32 @function_166d4(i16* %v1_15938)
  store i32 %v2_15938, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15948

dec_label_pc_15940:                               ; preds = %dec_label_pc_1590c
  store i32 %v2_1590c, i32* %r0.global-to-local, align 4
  %v1_15944 = call i32 @function_161a8(i32 %v2_1590c)
  store i32 %v1_15944, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15948

dec_label_pc_15948thread-pre-split:               ; preds = %dec_label_pc_1591c
  %v2_15928 = inttoptr i32 %v3_1591c to i8*
  %v3_15928 = load i8, i8* %v2_15928, align 1
  %v4_15928 = zext i8 %v3_15928 to i32
  store i32 %v4_15928, i32* %r0.global-to-local, align 4
  %v6_15928 = add i32 %v3_1591c, 1
  store i32 %v6_15928, i32* %r2.global-to-local, align 4
  store i32 %v6_15928, i32* %v2_1591c, align 4
  %v0_15948.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15948

dec_label_pc_15948:                               ; preds = %dec_label_pc_15948thread-pre-split, %dec_label_pc_15934, %dec_label_pc_15940
  %v1_1594c = phi i32 [ %v0_15948.pr, %dec_label_pc_15948thread-pre-split ], [ %v2_15938, %dec_label_pc_15934 ], [ %v1_15944, %dec_label_pc_15940 ]
  %v7_15948 = icmp eq i32 %v1_1594c, 10
  store i1 %v7_15948, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15948, label %dec_label_pc_15954.loopexit, label %bb68

bb68:                                             ; preds = %dec_label_pc_15948
  %v8_1594c = icmp eq i32 %v1_1594c, -1
  store i1 %v8_1594c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1594c, label %dec_label_pc_15954.loopexit, label %.dec_label_pc_1590c_crit_edge

.dec_label_pc_1590c_crit_edge:                    ; preds = %bb68
  %v0_1590c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1590c

dec_label_pc_15954.loopexit:                      ; preds = %bb68, %dec_label_pc_15948
  %v0_15954.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_15954

dec_label_pc_15954:                               ; preds = %dec_label_pc_158ac, %dec_label_pc_15954.loopexit
  %v0_15954 = phi i32 [ %v0_15954.pre, %dec_label_pc_15954.loopexit ], [ %v1_158c0, %dec_label_pc_158ac ]
  %v7_15954 = icmp eq i32 %v0_15954, -1
  store i1 %v7_15954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15954, label %dec_label_pc_15a9c, label %dec_label_pc_1595c

dec_label_pc_1595c:                               ; preds = %dec_label_pc_15954
  %v0_1595c = load i32, i32* @r5, align 4
  %v1_1595c = add i32 %v0_1595c, 4
  %v2_1595c = inttoptr i32 %v1_1595c to i32*
  %v3_1595c = load i32, i32* %v2_1595c, align 4
  store i32 %v3_1595c, i32* %r0.global-to-local, align 4
  store i32 %v3_157b0, i32* @r2, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  store i32 %v3_1595c, i32* %v2_15968, align 4
  %v0_1596c = load i32, i32* @fp, align 4
  %v2_15970 = inttoptr i32 %v3_1595c to i8*
  %v3_15970 = call i32 @function_12950(i8* %v2_15970, i32 %v0_1596c)
  store i32 %v3_15970, i32* %r0.global-to-local, align 4
  store i32 %v1_157c4, i32* %r2.global-to-local, align 4
  store i1 %v2_15978, i1* %cpsr_z.global-to-local, align 1
  %v0_1597c = load i32, i32* @r5, align 4
  %v1_1597c = add i32 %v0_1597c, 12
  %v2_1597c = inttoptr i32 %v1_1597c to i32*
  %v3_1597c = load i32, i32* %v2_1597c, align 4
  store i32 %v3_1597c, i32* @r4, align 4
  br i1 %v2_15978, label %dec_label_pc_15994, label %dec_label_pc_15984

dec_label_pc_15984:                               ; preds = %dec_label_pc_1595c
  store i32 %v3_1597c, i32* @r0, align 4
  %v0_15988 = load i32, i32* @sl, align 4
  %v2_1598c = inttoptr i32 %v3_1597c to i8*
  %v3_1598c = call i32 @function_16df4(i8* %v2_1598c, i32 %v0_15988)
  store i32 %v3_1598c, i32* %r0.global-to-local, align 4
  %v0_15990 = load i32, i32* @r4, align 4
  %v2_15990 = add i32 %v0_15990, %v3_1598c
  store i32 %v2_15990, i32* @r4, align 4
  br label %dec_label_pc_15994

dec_label_pc_15994:                               ; preds = %dec_label_pc_1595c, %dec_label_pc_15984
  %v0_15a6c13 = phi i32 [ %v3_1597c, %dec_label_pc_1595c ], [ %v2_15990, %dec_label_pc_15984 ]
  %v1_15994 = inttoptr i32 %v0_15a6c13 to i8*
  %v2_15994 = load i8, i8* %v1_15994, align 1
  %v3_15994 = zext i8 %v2_15994 to i32
  store i32 %v3_15994, i32* %r2.global-to-local, align 4
  %v2_15998 = icmp eq i8 %v2_15994, 0
  store i1 %v2_15998, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15998, label %dec_label_pc_157ec.backedge, label %dec_label_pc_159a0

dec_label_pc_157ec.backedge:                      ; preds = %dec_label_pc_15994, %dec_label_pc_15a94, %dec_label_pc_159a0
  %v0_157ec.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_157ec

dec_label_pc_159a0:                               ; preds = %dec_label_pc_15994
  %v0_159a0 = load i32, i32* @r7, align 4
  %v1_159a0 = inttoptr i32 %v0_159a0 to i8*
  %v2_159a0 = load i8, i8* %v1_159a0, align 1
  %v3_159a0 = zext i8 %v2_159a0 to i32
  store i32 %v3_159a0, i32* %r3.global-to-local, align 4
  %v9_159a4 = icmp eq i8 %v2_159a0, %v2_15994
  store i1 %v9_159a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_159a4, label %dec_label_pc_157ec.backedge, label %dec_label_pc_15a6c.preheader

dec_label_pc_15a6c.preheader:                     ; preds = %dec_label_pc_159a0
  %v1_159a8 = load i32, i32* @fp, align 4
  store i32 %v1_159a8, i32* @r6, align 4
  %v2_15a6c15 = load i8, i8* %v1_15994, align 1
  %v3_15a6c16 = zext i8 %v2_15a6c15 to i32
  store i32 %v3_15a6c16, i32* %r2.global-to-local, align 4
  %v2_15a7017 = icmp eq i8 %v2_15a6c15, 0
  store i1 %v2_15a7017, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15a7017, label %dec_label_pc_15a88, label %dec_label_pc_15a78.preheader

dec_label_pc_15a78.preheader:                     ; preds = %dec_label_pc_15a6c.preheader
  %v2_15a7882 = load i8, i8* %v1_159a0, align 1
  %v3_15a7883 = zext i8 %v2_15a7882 to i32
  store i32 %v3_15a7883, i32* %r3.global-to-local, align 4
  %v9_15a7c86 = icmp eq i8 %v2_15a7882, %v2_15a6c15
  store i1 %v9_15a7c86, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15a7c86, label %dec_label_pc_15a88, label %bb74

dec_label_pc_159b4:                               ; preds = %bb74
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_159b8 = load i32, i32* %v2_15968, align 4
  store i32 %v2_159b8, i32* %r3.global-to-local, align 4
  store i32 %v1_157c8, i32* %r2.global-to-local, align 4
  %v9_159c0 = icmp eq i32 %v2_159c488, %v1_157c8
  store i1 %v9_159c0, i1* %cpsr_z.global-to-local, align 1
  %v5_159c4 = mul i32 %v2_159c488, 4
  %v6_159c4 = add i32 %v2_159b8, %v5_159c4
  %v7_159c4 = inttoptr i32 %v6_159c4 to i32*
  store i32 %v0_159c487, i32* %v7_159c4, align 4
  br i1 %v9_159c0, label %dec_label_pc_159cc, label %dec_label_pc_159d8

dec_label_pc_159cc:                               ; preds = %dec_label_pc_159b4
  store i32 %v1_157d4, i32* %r3.global-to-local, align 4
  store i1 %v2_159d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_159d0, label %dec_label_pc_159d8, label %dec_label_pc_159f8

dec_label_pc_159d8:                               ; preds = %dec_label_pc_159cc, %dec_label_pc_159b4
  %v0_159d8 = load i32, i32* @r7, align 4
  %v1_159d8 = inttoptr i32 %v0_159d8 to i8*
  %v2_159d8 = load i8, i8* %v1_159d8, align 1
  %v3_159d8 = zext i8 %v2_159d8 to i32
  store i32 %v3_159d8, i32* %r3.global-to-local, align 4
  %v2_159dc = icmp eq i8 %v2_159d8, 0
  store i1 %v2_159dc, i1* %cpsr_z.global-to-local, align 1
  %v0_159e0 = load i32, i32* @r4, align 4
  store i32 %v0_159e0, i32* @r0, align 4
  %v1_159e4 = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_159dc, i32 %v1_159e4, i32 %v0_159d8
  store i32 %storemerge, i32* @r1, align 4
  %v0_159ec = call i32 @function_16db0()
  store i32 %v0_159ec, i32* %r0.global-to-local, align 4
  %v0_159f0 = load i32, i32* @r4, align 4
  %v2_159f0 = add i32 %v0_159f0, %v0_159ec
  store i32 %v2_159f0, i32* @r4, align 4
  br label %dec_label_pc_15a30

dec_label_pc_159f8:                               ; preds = %dec_label_pc_159cc
  %v0_159f8 = load i32, i32* @r4, align 4
  store i32 %v0_159f8, i32* @r0, align 4
  %v0_159fc = load i32, i32* @r7, align 4
  %v1_159fc = inttoptr i32 %v0_159fc to i8*
  %v2_159fc = load i8, i8* %v1_159fc, align 1
  %v3_159fc = zext i8 %v2_159fc to i32
  %v5_15a00 = call i32 @function_16e90(i32 %v0_159f8, i32 %v3_159fc, i32 %v1_157c8, i32 %v1_157d4)
  store i32 %v5_15a00, i32* %r0.global-to-local, align 4
  store i32 %v1_157c4, i32* %r2.global-to-local, align 4
  store i1 %v2_15978, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_15a00, i32* @r4, align 4
  br i1 %v2_15978, label %dec_label_pc_15a30, label %dec_label_pc_15a1c

dec_label_pc_15a18:                               ; preds = %dec_label_pc_15a1c
  %v1_15a18 = add i32 %v0_15a30.pre, -1
  store i32 %v1_15a18, i32* @r4, align 4
  br label %dec_label_pc_15a1c

dec_label_pc_15a1c:                               ; preds = %dec_label_pc_159f8, %dec_label_pc_15a18
  %v0_15a1c = phi i32 [ %v1_15a18, %dec_label_pc_15a18 ], [ %v5_15a00, %dec_label_pc_159f8 ]
  %v1_15a1c = add i32 %v0_15a1c, -1
  %v2_15a1c = inttoptr i32 %v1_15a1c to i8*
  %v3_15a1c = load i8, i8* %v2_15a1c, align 1
  %v4_15a1c = zext i8 %v3_15a1c to i32
  %v0_15a20 = load i32, i32* @sl, align 4
  store i32 %v0_15a20, i32* @r0, align 4
  %v2_15a24 = call i32 @function_16f7c(i32 %v0_15a20, i32 %v4_15a1c)
  store i32 %v2_15a24, i32* %r0.global-to-local, align 4
  %v2_15a28 = icmp eq i32 %v2_15a24, 0
  store i1 %v2_15a28, i1* %cpsr_z.global-to-local, align 1
  %v0_15a30.pre = load i32, i32* @r4, align 4
  br i1 %v2_15a28, label %dec_label_pc_15a30, label %dec_label_pc_15a18

dec_label_pc_15a30:                               ; preds = %dec_label_pc_15a1c, %dec_label_pc_159f8, %dec_label_pc_159d8
  %v3_15a3c = phi i32 [ %v5_15a00, %dec_label_pc_159f8 ], [ %v2_159f0, %dec_label_pc_159d8 ], [ %v0_15a30.pre, %dec_label_pc_15a1c ]
  %v1_15a30 = inttoptr i32 %v3_15a3c to i8*
  %v2_15a30 = load i8, i8* %v1_15a30, align 1
  %v3_15a30 = zext i8 %v2_15a30 to i32
  store i32 %v3_15a30, i32* %r2.global-to-local, align 4
  %v0_15a34 = load i32, i32* @r7, align 4
  %v1_15a34 = inttoptr i32 %v0_15a34 to i8*
  %v2_15a34 = load i8, i8* %v1_15a34, align 1
  %v3_15a34 = zext i8 %v2_15a34 to i32
  store i32 %v3_15a34, i32* %r3.global-to-local, align 4
  %v9_15a38 = icmp eq i8 %v2_15a34, %v2_15a30
  store i1 %v9_15a38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15a38, label %bb71, label %dec_label_pc_15a44

bb71:                                             ; preds = %dec_label_pc_15a30
  %v1_15a3c = load i32, i32* @fp, align 4
  %v2_15a3c = trunc i32 %v1_15a3c to i8
  store i8 %v2_15a3c, i8* %v1_15a30, align 1
  %v0_15a40.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_15a40.pr, label %bb73, label %.dec_label_pc_15a44_crit_edge

.dec_label_pc_15a44_crit_edge:                    ; preds = %bb71
  %v0_15a44.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_15a44

dec_label_pc_15a44:                               ; preds = %.dec_label_pc_15a44_crit_edge, %dec_label_pc_15a30
  %v0_15a44 = phi i32 [ %v0_15a44.pre, %.dec_label_pc_15a44_crit_edge ], [ %v3_15a30, %dec_label_pc_15a30 ]
  %v2_15a44 = icmp eq i32 %v0_15a44, 0
  store i1 %v2_15a44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15a44, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_15a44
  %v1_15a48 = load i32, i32* @fp, align 4
  %v2_15a48 = trunc i32 %v1_15a48 to i8
  %v3_15a48 = load i32, i32* @r4, align 4
  %v4_15a48 = inttoptr i32 %v3_15a48 to i8*
  store i8 %v2_15a48, i8* %v4_15a48, align 1
  %v5_15a48 = load i32, i32* @r4, align 4
  %v6_15a48 = add i32 %v5_15a48, 1
  store i32 %v6_15a48, i32* @r4, align 4
  br label %bb73

bb73:                                             ; preds = %bb71, %dec_label_pc_15a44, %bb72
  %v2_15a4c = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_15a4c, i32* %r3.global-to-local, align 4
  %v2_15a50 = icmp eq i32 %v2_15a4c, 0
  store i1 %v2_15a50, i1* %cpsr_z.global-to-local, align 1
  %v0_15a6c.pre = load i32, i32* @r4, align 4
  br i1 %v2_15a50, label %dec_label_pc_15a68, label %dec_label_pc_15a58

dec_label_pc_15a58:                               ; preds = %bb73
  store i32 %v0_15a6c.pre, i32* @r0, align 4
  %v0_15a5c = load i32, i32* @sl, align 4
  %v2_15a60 = inttoptr i32 %v0_15a6c.pre to i8*
  %v3_15a60 = call i32 @function_16df4(i8* %v2_15a60, i32 %v0_15a5c)
  store i32 %v3_15a60, i32* %r0.global-to-local, align 4
  %v0_15a64 = load i32, i32* @r4, align 4
  %v2_15a64 = add i32 %v0_15a64, %v3_15a60
  store i32 %v2_15a64, i32* @r4, align 4
  br label %dec_label_pc_15a68

dec_label_pc_15a68:                               ; preds = %bb73, %dec_label_pc_15a58
  %v0_15a6c = phi i32 [ %v2_15a64, %dec_label_pc_15a58 ], [ %v0_15a6c.pre, %bb73 ]
  %v0_15a68 = load i32, i32* @r6, align 4
  %v1_15a68 = add i32 %v0_15a68, 1
  store i32 %v1_15a68, i32* @r6, align 4
  %v1_15a6c = inttoptr i32 %v0_15a6c to i8*
  %v2_15a6c = load i8, i8* %v1_15a6c, align 1
  %v3_15a6c = zext i8 %v2_15a6c to i32
  store i32 %v3_15a6c, i32* %r2.global-to-local, align 4
  %v2_15a70 = icmp eq i8 %v2_15a6c, 0
  store i1 %v2_15a70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15a70, label %dec_label_pc_15a88, label %dec_label_pc_15a68.dec_label_pc_15a78_crit_edge

dec_label_pc_15a68.dec_label_pc_15a78_crit_edge:  ; preds = %dec_label_pc_15a68
  %v0_15a78.pre = load i32, i32* @r7, align 4
  %v1_15a78 = inttoptr i32 %v0_15a78.pre to i8*
  %v2_15a78 = load i8, i8* %v1_15a78, align 1
  %v3_15a78 = zext i8 %v2_15a78 to i32
  store i32 %v3_15a78, i32* %r3.global-to-local, align 4
  %v9_15a7c = icmp eq i8 %v2_15a78, %v2_15a6c
  store i1 %v9_15a7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_15a7c, label %dec_label_pc_15a88, label %bb74

bb74:                                             ; preds = %dec_label_pc_15a78.preheader, %dec_label_pc_15a68.dec_label_pc_15a78_crit_edge
  %v2_159c488 = phi i32 [ %v1_15a68, %dec_label_pc_15a68.dec_label_pc_15a78_crit_edge ], [ %v1_159a8, %dec_label_pc_15a78.preheader ]
  %v0_159c487 = phi i32 [ %v0_15a6c, %dec_label_pc_15a68.dec_label_pc_15a78_crit_edge ], [ %v0_15a6c13, %dec_label_pc_15a78.preheader ]
  %v2_15a80 = load i32, i32* @sb, align 4
  %v3_15a80 = sub i32 %v2_159c488, %v2_15a80
  %v5_15a80 = xor i32 %v2_15a80, %v2_159c488
  %v6_15a80 = xor i32 %v3_15a80, %v2_159c488
  %v7_15a80 = and i32 %v6_15a80, %v5_15a80
  %v8_15a80 = icmp slt i32 %v7_15a80, 0
  %v9_15a80 = icmp slt i32 %v3_15a80, 0
  %v10_15a80 = icmp eq i32 %v2_159c488, %v2_15a80
  store i1 %v10_15a80, i1* %cpsr_z.global-to-local, align 1
  %v2_15a84 = xor i1 %v9_15a80, %v8_15a80
  br i1 %v2_15a84, label %dec_label_pc_159b4, label %dec_label_pc_15a88

dec_label_pc_15a88:                               ; preds = %dec_label_pc_15a78.preheader, %bb74, %dec_label_pc_15a68, %dec_label_pc_15a68.dec_label_pc_15a78_crit_edge, %dec_label_pc_15a6c.preheader
  %v0_15a8c = phi i32 [ %v1_159a8, %dec_label_pc_15a6c.preheader ], [ %v1_159a8, %dec_label_pc_15a78.preheader ], [ %v2_159c488, %bb74 ], [ %v1_15a68, %dec_label_pc_15a68 ], [ %v1_15a68, %dec_label_pc_15a68.dec_label_pc_15a78_crit_edge ]
  store i32 %v3_157ac, i32* %r2.global-to-local, align 4
  %v9_15a8c = icmp eq i32 %v0_15a8c, %v3_157ac
  store i1 %v9_15a8c, i1* %cpsr_z.global-to-local, align 1
  %v6_15a90 = icmp slt i32 %v0_15a8c, %v3_157ac
  br i1 %v6_15a90, label %dec_label_pc_15a94, label %dec_label_pc_15aa0

dec_label_pc_15a94:                               ; preds = %dec_label_pc_15a88
  %v0_15a94 = load i32, i32* @r8, align 4
  %v1_15a94 = and i32 %v0_15a94, 1048576
  %v2_15a94 = icmp eq i32 %v1_15a94, 0
  store i1 %v2_15a94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15a94, label %dec_label_pc_157ec.backedge, label %dec_label_pc_15a9c

dec_label_pc_15a9c:                               ; preds = %dec_label_pc_15a94, %dec_label_pc_15954, %.thread, %dec_label_pc_15788
  br label %dec_label_pc_15aa0

dec_label_pc_15aa0:                               ; preds = %dec_label_pc_15a88, %dec_label_pc_15870, %dec_label_pc_15a9c
  %v0_15aa0 = phi i32 [ %v0_15880, %dec_label_pc_15870 ], [ 0, %dec_label_pc_15a9c ], [ %v0_15a8c, %dec_label_pc_15a88 ]
  store i32 %v0_15aa0, i32* %r0.global-to-local, align 4
  store i32 %v3_15788, i32* @r4, align 4
  store i32 %v6_15788, i32* @r5, align 4
  store i32 %v9_15788, i32* @r6, align 4
  store i32 %v12_15788, i32* @r7, align 4
  store i32 %v15_15788, i32* @r8, align 4
  store i32 %v18_15788, i32* @sb, align 4
  store i32 %v21_15788, i32* @sl, align 4
  store i32 %v24_15788, i32* @fp, align 4
  ret i32 %v0_15aa0

; uselistorder directives
  uselistorder i32 %v0_15aa0, { 1, 0 }
  uselistorder i32 %v0_15a8c, { 0, 2, 1 }
  uselistorder i32 %v3_15a80, { 1, 0 }
  uselistorder i32 %v2_15a80, { 1, 0, 2 }
  uselistorder i32 %v2_159c488, { 0, 1, 6, 5, 2, 3, 4 }
  uselistorder i1 %v9_15a7c, { 1, 0 }
  uselistorder i32 %v0_15a6c.pre, { 0, 2, 1 }
  uselistorder i32 %v5_15a00, { 1, 0, 2, 3 }
  uselistorder i1 %v9_15a7c86, { 1, 0 }
  uselistorder i1 %v9_159a4, { 1, 0 }
  uselistorder i32 %v3_1597c, { 0, 2, 1, 3 }
  uselistorder i1 %v7_15954, { 1, 0 }
  uselistorder i1 %v8_1594c, { 1, 0 }
  uselistorder i32 %v3_1591c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_1590c, { 3, 2, 0, 1, 4, 5, 6 }
  uselistorder i32 %v5_158f4, { 1, 0, 2 }
  uselistorder i32 %v1_158e4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_158d0, { 0, 2, 1, 3 }
  uselistorder i32 %v1_158c8, { 1, 0 }
  uselistorder i32 %v1_158b4, { 1, 0 }
  uselistorder i32 %v1_158b0, { 1, 0 }
  uselistorder i32 %v1_15870, { 2, 0, 1 }
  uselistorder i32 %v0_15858, { 1, 0 }
  uselistorder i32 %v1_15848, { 0, 2, 1 }
  uselistorder i1 %v2_15978, { 1, 0, 2, 3 }
  uselistorder i32 %v1_157d4, { 2, 0, 1, 3 }
  uselistorder i32 %v1_157c8, { 2, 1, 0 }
  uselistorder i32 %v3_157b0, { 1, 0 }
  uselistorder i32 %v3_157ac, { 2, 1, 0 }
  uselistorder i32 %v1_157a4, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 6, 1, 2, 3, 4, 5, 25, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 7, 2, 3, 4, 5, 6, 16, 8, 9, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 7, 11, 12, 10, 9, 14, 13, 16, 15, 17, 18, 21, 19, 20, 25, 22, 23, 24, 27, 26, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 33, 32, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i32 92, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 (i32)* @function_16d30, { 1, 0 }
  uselistorder i32* @sl, { 6, 7, 8, 9, 10, 11, 12, 44, 0, 45, 46, 13, 14, 127, 128, 129, 130, 131, 132, 135, 136, 137, 1, 138, 139, 140, 141, 142, 143, 145, 2, 144, 147, 146, 148, 149, 150, 151, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 38, 39, 4, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 116, 117, 119, 120, 121, 124, 122, 123, 125, 126, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 204, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 210, 3, 213, 214, 215, 216, 217, 134, 133, 5 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder label %dec_label_pc_15aa0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15a88, { 1, 3, 2, 0, 4 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_15a68, { 1, 0 }
  uselistorder label %bb73, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15a1c, { 1, 0 }
  uselistorder label %dec_label_pc_157ec.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_15994, { 1, 0 }
  uselistorder label %dec_label_pc_15954, { 1, 0 }
  uselistorder label %dec_label_pc_15948, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1590c, { 1, 0 }
  uselistorder label %dec_label_pc_15840, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
}

define i32 @function_15ab0(i32* %arg1) local_unnamed_addr {
dec_label_pc_15ab0:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_15ab4 = icmp eq i32* %arg1, null
  br i1 %v2_15ab4, label %dec_label_pc_15adc, label %dec_label_pc_15abc

dec_label_pc_15abc:                               ; preds = %dec_label_pc_15ab0
  %v2_15abc = load i32, i32* %arg1, align 4
  %v1_15ac0 = inttoptr i32 %v2_15abc to i16*
  %v2_15ac0 = call i32 @function_15b2c(i16* %v1_15ac0)
  %v0_15ac4 = load i32, i32* @r4, align 4
  %v1_15ac4 = add i32 %v0_15ac4, 20
  %v2_15ac4 = inttoptr i32 %v1_15ac4 to i32*
  %v3_15ac4 = load i32, i32* %v2_15ac4, align 4
  %v2_15ac8 = icmp eq i32 %v3_15ac4, 0
  br i1 %v2_15ac8, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_15abc
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_15abc, %bb
  store i32 88788, i32* @lr, align 4
  %v1_15ad0 = xor i1 %v2_15ac8, true
  call void @__pseudo_cond_branch(i1 %v1_15ad0, i32 ptrtoint (i32* @global_var_13f98.16 to i32))
  %v0_15ad4 = load i32, i32* @r4, align 4
  store i32 %v0_15ad4, i32* @r0, align 4
  %v0_15ad8 = call i32 @function_13f98()
  br label %dec_label_pc_15adc

dec_label_pc_15adc:                               ; preds = %dec_label_pc_15ab0, %bb6
  %v1_15ae0 = phi i32 [ 0, %dec_label_pc_15ab0 ], [ %v0_15ad8, %bb6 ]
  ret i32 %v1_15ae0

; uselistorder directives
  uselistorder i32* null, { 0, 4, 5, 1, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 20, 21, 22, 23, 24, 7, 25, 26, 27, 28, 29, 3, 30, 31, 32, 35, 33, 34, 48, 36, 9, 37, 38, 39, 40, 41, 42, 43, 44, 45, 8, 46, 47 }
  uselistorder label %dec_label_pc_15adc, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_15ae4(i32 %arg1) local_unnamed_addr {
dec_label_pc_15ae4:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15af0 = load i32, i32* @r4, align 4
  store i32 %v3_15af0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_17df8.624 to i32), i32* @r1, align 4
  %v0_15af8 = call i32 @function_15ce0()
  store i32 %v0_15af8, i32* %r0.global-to-local, align 4
  store i32 %v0_15af8, i32* @r4, align 4
  %v2_15afc = icmp eq i32 %v0_15af8, 0
  br i1 %v2_15afc, label %bb, label %dec_label_pc_15b08

bb:                                               ; preds = %dec_label_pc_15ae4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_15b08:                               ; preds = %dec_label_pc_15ae4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_15b10 = call i32 @function_1384c(i32 1, i32 24)
  store i32 %v2_15b10, i32* %r0.global-to-local, align 4
  %v2_15b14 = icmp eq i32 %v2_15b10, 0
  br i1 %v2_15b14, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_15b08
  %v1_15b18 = load i32, i32* @r4, align 4
  %v3_15b18 = inttoptr i32 %v2_15b10 to i32*
  store i32 %v1_15b18, i32* %v3_15b18, align 4
  %v1_15b20.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_15b08, %bb4
  %v1_15b20 = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_15b08 ], [ %v1_15b20.pre, %bb4 ]
  %v2_15b1c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15b1c, i32* @r4, align 4
  ret i32 %v1_15b20

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 1, 0, 4 }
  uselistorder i32 (i32, i32)* @function_1384c, { 36, 34, 35, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 1, 23, 22, 21, 20, 19, 2, 18, 17, 16, 0, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i32 114, { 1, 0 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @function_15b2c(i16* %arg1) local_unnamed_addr {
dec_label_pc_15b2c:
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_15b2c = load i32, i32* @r4, align 4
  store i32 %v3_15b2c, i32* %stack_var_-36, align 4
  %v6_15b2c = load i32, i32* @r5, align 4
  %v9_15b2c = load i32, i32* @r6, align 4
  %v12_15b2c = load i32, i32* @r7, align 4
  %v2_15b30 = add i32 %tmp, 52
  %v3_15b30 = inttoptr i32 %v2_15b30 to i32*
  %v4_15b30 = load i32, i32* %v3_15b30, align 4
  %v1_15b38 = sub i32 1, %v4_15b30
  %v2_15b38 = icmp ult i32 %v4_15b30, 2
  br i1 %v2_15b38, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_15b2c
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_15b2c, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_15b38, %dec_label_pc_15b2c ]
  %v0_15b40 = phi i32 [ 0, %bb ], [ %v1_15b38, %dec_label_pc_15b2c ]
  store i32 %storemerge, i32* %sb.global-to-local, align 4
  %v2_15b40 = icmp eq i32 %v0_15b40, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 131404, i32* @r6, align 4
  br i1 %v2_15b40, label %dec_label_pc_15b8c, label %dec_label_pc_15b54

dec_label_pc_15b54:                               ; preds = %bb18
  %v4_15b6c = load i32, i32* inttoptr (i32 131476 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_15b6c)
  %v0_15b80 = load i32, i32* @r6, align 4
  %v2_15b80 = add i32 %v0_15b80, 16
  %v3_15b80 = inttoptr i32 %v2_15b80 to i32*
  %v4_15b80 = load i32, i32* %v3_15b80, align 4
  call void @__pseudo_branch(i32 %v4_15b80)
  %v0_15b8c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15b8c

dec_label_pc_15b8c:                               ; preds = %bb18, %dec_label_pc_15b54
  %v1_15b94 = phi i32 [ %tmp, %bb18 ], [ %v0_15b8c.pre, %dec_label_pc_15b54 ]
  %v1_15b8c = inttoptr i32 %v1_15b94 to i16*
  %v2_15b8c = load i16, i16* %v1_15b8c, align 2
  %v3_15b8c = zext i16 %v2_15b8c to i32
  %v1_15b90 = and i32 %v3_15b8c, 64
  %v2_15b90 = icmp eq i32 %v1_15b90, 0
  br i1 %v2_15b90, label %bb20, label %bb19

bb19:                                             ; preds = %dec_label_pc_15b8c
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_15b8c, %bb19
  %storemerge26 = phi i32 [ %v1_15b94, %bb19 ], [ %v1_15b90, %dec_label_pc_15b8c ]
  %v1_15b98 = xor i1 %v2_15b90, true
  call void @__pseudo_cond_branch(i1 %v1_15b98, i32 ptrtoint (i32* @global_var_164c8.629 to i32))
  store i32 %storemerge26, i32* %sl.global-to-local, align 4
  %v0_15ba0 = load i32, i32* @r5, align 4
  %v1_15ba0 = add i32 %v0_15ba0, 4
  %v2_15ba0 = inttoptr i32 %v1_15ba0 to i32*
  %v3_15ba0 = load i32, i32* %v2_15ba0, align 4
  %v1_15ba4 = call i32 @function_124d0(i32 %v3_15ba0)
  %v0_15bac = load i32, i32* @r6, align 4
  %v2_15bb8 = add i32 %v0_15bac, 108
  %v3_15bb8 = inttoptr i32 %v2_15bb8 to i32*
  %v4_15bb8 = load i32, i32* %v3_15bb8, align 4
  store i32 %v4_15bb8, i32* @r7, align 4
  %v1_15bc0 = load i32, i32* @r5, align 4
  %v2_15bc0 = add i32 %v1_15bc0, 4
  %v3_15bc0 = inttoptr i32 %v2_15bc0 to i32*
  store i32 -1, i32* %v3_15bc0, align 4
  %v0_15bc8 = load i32, i32* @r6, align 4
  %v2_15bc8 = add i32 %v0_15bc8, 72
  %v3_15bc8 = inttoptr i32 %v2_15bc8 to i32*
  %v4_15bc8 = load i32, i32* %v3_15bc8, align 4
  %v1_15bd0 = icmp slt i32 %v1_15ba4, 0
  store i32 %v4_15bc8, i32* %stack_var_-80, align 4
  br i1 %v1_15bd0, label %bb21, label %bb22

bb21:                                             ; preds = %bb20
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb22

bb22:                                             ; preds = %bb20, %bb21
  call void @__pseudo_branch(i32 %v4_15bc8)
  %v0_15bf8 = load i32, i32* @r6, align 4
  %v2_15bf8 = add i32 %v0_15bf8, 16
  %v3_15bf8 = inttoptr i32 %v2_15bf8 to i32*
  %v4_15bf8 = load i32, i32* %v3_15bf8, align 4
  call void @__pseudo_branch(i32 %v4_15bf8)
  %v0_15c08 = load i32, i32* @r6, align 4
  %v2_15c08 = add i32 %v0_15c08, 12
  %v3_15c08 = inttoptr i32 %v2_15c08 to i32*
  %v4_15c08 = load i32, i32* %v3_15c08, align 4
  %v1_15c0c = inttoptr i32 %v4_15c08 to i32*
  %v2_15c0c = load i32, i32* %v1_15c0c, align 4
  %v1_15c14 = add i32 %v2_15c0c, 1
  %v2_15c18 = add i32 %v0_15c08, 24
  %v3_15c18 = inttoptr i32 %v2_15c18 to i32*
  %v4_15c18 = load i32, i32* %v3_15c18, align 4
  store i32 %v4_15c18, i32* @r4, align 4
  store i32 %v1_15c14, i32* %v1_15c0c, align 4
  call void @__pseudo_branch(i32 %v4_15c18)
  %v0_15c30 = load i32, i32* @r5, align 4
  %v1_15c30 = inttoptr i32 %v0_15c30 to i16*
  %v2_15c30 = load i16, i16* %v1_15c30, align 2
  %v1_15c34 = and i16 %v2_15c30, 24576
  %v1_15c38 = or i16 %v1_15c34, 48
  %v0_15c3c = load i32, i32* %sb.global-to-local, align 4
  %v2_15c3c = icmp eq i32 %v0_15c3c, 0
  store i16 %v1_15c38, i16* %v1_15c30, align 2
  br i1 %v2_15c3c, label %.thread, label %bb23

bb23:                                             ; preds = %bb22
  br label %.thread

.thread:                                          ; preds = %bb22, %bb23
  %v2_15c50 = xor i1 %v2_15c3c, true
  call void @__pseudo_cond_branch(i1 %v2_15c50, i32 %v4_15c18)
  %v0_15c54 = load i32, i32* @r5, align 4
  %v1_15c54 = inttoptr i32 %v0_15c54 to i16*
  %v2_15c54 = load i16, i16* %v1_15c54, align 2
  %v1_15c58 = and i16 %v2_15c54, 16384
  %v2_15c58 = icmp eq i16 %v1_15c58, 0
  br i1 %v2_15c58, label %bb25, label %bb24

bb24:                                             ; preds = %.thread
  br label %bb25

bb25:                                             ; preds = %.thread, %bb24
  %v1_15c60 = xor i1 %v2_15c58, true
  call void @__pseudo_cond_branch(i1 %v1_15c60, i32 ptrtoint (i32* @global_var_13f98.16 to i32))
  %v2_15c6c = load i32, i32* %stack_var_-80, align 4
  call void @__pseudo_branch(i32 %v2_15c6c)
  call void @__pseudo_branch(i32 %v4_15bf8)
  %v0_15c8c = load i32, i32* @r6, align 4
  %v2_15c8c = add i32 %v0_15c8c, 48
  %v3_15c8c = inttoptr i32 %v2_15c8c to i32*
  %v4_15c8c = load i32, i32* %v3_15c8c, align 4
  %v1_15c90 = inttoptr i32 %v4_15c8c to i32*
  %v2_15c90 = load i32, i32* %v1_15c90, align 4
  %v1_15c94 = add i32 %v2_15c90, 1
  store i32 %v1_15c94, i32* %v1_15c90, align 4
  call void @__pseudo_branch(i32 %v4_15c18)
  %v0_15cac = call i32 @function_16340()
  %v0_15cb0 = load i32, i32* %sl.global-to-local, align 4
  %v2_15cb8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_15cb8, i32* @r4, align 4
  store i32 %v6_15b2c, i32* @r5, align 4
  store i32 %v9_15b2c, i32* @r6, align 4
  store i32 %v12_15b2c, i32* @r7, align 4
  ret i32 %v0_15cb0

; uselistorder directives
  uselistorder i1 %v2_15c58, { 1, 0 }
  uselistorder i32 %v4_15c18, { 0, 2, 1, 3 }
  uselistorder i32 %v4_15b30, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 1, 0 }
  uselistorder i32 (i32)* @function_124d0, { 34, 7, 11, 10, 33, 9, 8, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_15b8c, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
}

define i32 @function_15cc4(i32 %arg1) local_unnamed_addr {
dec_label_pc_15cc4:
  %v0_15cc4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15cc4, label %bb, label %.thread5

bb:                                               ; preds = %dec_label_pc_15cc4
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_15cc4, %bb
  %v10_15cdc = phi i32 [ %arg1, %dec_label_pc_15cc4 ], [ 0, %bb ]
  ret i32 %v10_15cdc

; uselistorder directives
  uselistorder label %.thread5, { 1, 0 }
}

define i32 @function_15ce0() local_unnamed_addr {
dec_label_pc_15ce0:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_15cf0 = call i32 @function_15d00()
  ret i32 %v0_15cf0
}

define i32 @function_15d00() local_unnamed_addr {
dec_label_pc_15d00:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_15d00 = load i32, i32* @r4, align 4
  store i32 %v3_15d00, i32* %stack_var_-36, align 4
  %v6_15d00 = load i32, i32* @r5, align 4
  %v9_15d00 = load i32, i32* @r6, align 4
  %v18_15d00 = load i32, i32* @sb, align 4
  %v24_15d00 = load i32, i32* @fp, align 4
  %v0_15d04 = load i32, i32* @r1, align 4
  %v1_15d04 = inttoptr i32 %v0_15d04 to i8*
  %v2_15d04 = load i8, i8* %v1_15d04, align 1
  %v3_15d04 = zext i8 %v2_15d04 to i32
  store i32 %v3_15d04, i32* @ip, align 4
  %v7_15d0c = icmp eq i8 %v2_15d04, 114
  store i32 131404, i32* @fp, align 4
  %v2_15d14 = ptrtoint i32* %stack_var_-72 to i32
  %v0_15d18 = load i32, i32* @r0, align 4
  store i32 %v0_15d18, i32* @r6, align 4
  %v0_15d1c = load i32, i32* @r2, align 4
  store i32 %v0_15d1c, i32* @sb, align 4
  %v0_15d20 = load i32, i32* @r3, align 4
  store i32 %v0_15d20, i32* @r5, align 4
  br i1 %v7_15d0c, label %dec_label_pc_15d6c, label %dec_label_pc_15d28

dec_label_pc_15d28:                               ; preds = %dec_label_pc_15d00
  %v7_15d28 = icmp eq i8 %v2_15d04, 119
  br i1 %v7_15d28, label %bb, label %dec_label_pc_15d34

bb:                                               ; preds = %dec_label_pc_15d28
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_15d70

dec_label_pc_15d34:                               ; preds = %dec_label_pc_15d28
  %v7_15d34 = icmp eq i8 %v2_15d04, 97
  br i1 %v7_15d34, label %bb32, label %dec_label_pc_15d40

bb32:                                             ; preds = %dec_label_pc_15d34
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_15d70

dec_label_pc_15d40:                               ; preds = %dec_label_pc_15d34, %dec_label_pc_15df4, %dec_label_pc_15dc8
  %v0_15d40 = call i32 @function_128f8()
  store i32 %v0_15d40, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_15d48 = load i32, i32* @sb, align 4
  %v2_15d48 = icmp eq i32 %v0_15d48, 0
  %v2_15d4c = inttoptr i32 %v0_15d40 to i32*
  store i32 22, i32* %v2_15d4c, align 4
  br i1 %v2_15d48, label %dec_label_pc_15fc0, label %dec_label_pc_15d54

dec_label_pc_15d54:                               ; preds = %dec_label_pc_15e18._crit_edge, %dec_label_pc_15d40
  %v0_15d54 = load i32, i32* @sb, align 4
  %v1_15d54 = inttoptr i32 %v0_15d54 to i16*
  %v2_15d54 = load i16, i16* %v1_15d54, align 2
  %v3_15d54 = zext i16 %v2_15d54 to i32
  store i32 %v3_15d54, i32* %r3.global-to-local, align 4
  %v1_15d58 = and i32 %v3_15d54, 8192
  %v2_15d58 = icmp eq i32 %v1_15d58, 0
  br i1 %v2_15d58, label %dec_label_pc_15fc0, label %dec_label_pc_15d60

dec_label_pc_15d60:                               ; preds = %dec_label_pc_15d54
  store i32 %v0_15d54, i32* @r0, align 4
  %v0_15d64 = call i32 @function_13f98()
  store i32 %v0_15d64, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15fc0

dec_label_pc_15d6c:                               ; preds = %dec_label_pc_15d00
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_15d70

dec_label_pc_15d70:                               ; preds = %bb, %bb32, %dec_label_pc_15d6c
  %v1_15d88 = phi i32 [ 1089, %bb32 ], [ 577, %bb ], [ 1, %dec_label_pc_15d6c ]
  %v1_15d70 = add i32 %v0_15d04, 1
  %v2_15d70 = inttoptr i32 %v1_15d70 to i8*
  %v3_15d70 = load i8, i8* %v2_15d70, align 1
  %v7_15d74 = icmp eq i8 %v3_15d70, 98
  %v1_15d70.v0_15d04 = select i1 %v7_15d74, i32 %v1_15d70, i32 %v0_15d04
  store i32 %v1_15d70.v0_15d04, i32* %r3.global-to-local, align 4
  %v1_15d80 = add i32 %v1_15d70.v0_15d04, 1
  %v2_15d80 = inttoptr i32 %v1_15d80 to i8*
  %v3_15d80 = load i8, i8* %v2_15d80, align 1
  %v4_15d80 = zext i8 %v3_15d80 to i32
  store i32 %v4_15d80, i32* @r3, align 4
  %v7_15d84 = icmp eq i8 %v3_15d80, 43
  br i1 %v7_15d84, label %bb35, label %.thread3

bb35:                                             ; preds = %dec_label_pc_15d70
  store i32 %v1_15d88, i32* @r3, align 4
  %v2_15d8c = add nuw nsw i32 %v1_15d88, 1
  store i32 %v2_15d8c, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_15d70, %bb35
  %v2_15d90 = icmp eq i32 %v0_15d1c, 0
  br i1 %v2_15d90, label %dec_label_pc_15d98, label %dec_label_pc_15dc0

dec_label_pc_15d98:                               ; preds = %.thread3
  store i32 80, i32* @r0, align 4
  %v0_15d9c = call i32 @function_12f2c()
  store i32 %v0_15d9c, i32* %r0.global-to-local, align 4
  store i32 %v0_15d9c, i32* @sb, align 4
  %v3_15da0 = icmp eq i32 %v0_15d9c, 0
  br i1 %v3_15da0, label %dec_label_pc_15fc4, label %dec_label_pc_15da8

dec_label_pc_15da8:                               ; preds = %dec_label_pc_15d98
  %v2_15dac = add i32 %v0_15d9c, 8
  %v3_15dac = inttoptr i32 %v2_15dac to i32*
  store i32 0, i32* %v3_15dac, align 4
  store i32 8192, i32* %r3.global-to-local, align 4
  %v2_15db4 = load i32, i32* @sb, align 4
  %v3_15db4 = inttoptr i32 %v2_15db4 to i16*
  store i16 8192, i16* %v3_15db4, align 2
  %v0_15db8 = load i32, i32* @sb, align 4
  %v1_15db8 = add i32 %v0_15db8, 56
  store i32 %v1_15db8, i32* @r0, align 4
  %v1_15dbc = call i32 @function_16070(i32 %v1_15db8)
  store i32 %v1_15dbc, i32* %r0.global-to-local, align 4
  %v0_15dc0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_15dc0

dec_label_pc_15dc0:                               ; preds = %.thread3, %dec_label_pc_15da8
  %v0_15e18 = phi i32 [ %v0_15d20, %.thread3 ], [ %v0_15dc0.pre, %dec_label_pc_15da8 ]
  %v1_15dc0 = icmp slt i32 %v0_15e18, 0
  br i1 %v1_15dc0, label %dec_label_pc_15e18, label %dec_label_pc_15dc8

dec_label_pc_15dc8:                               ; preds = %dec_label_pc_15dc0
  %v0_15dcc = load i32, i32* @r4, align 4
  %v2_15dcc = and i32 %v0_15dcc, 131075
  %v1_15dd0 = add nuw nsw i32 %v2_15dcc, 1
  store i32 %v1_15dd0, i32* %r2.global-to-local, align 4
  %v0_15dd4 = load i32, i32* @r6, align 4
  %v1_15dd4 = add i32 %v0_15dd4, 1
  %v2_15dd8 = and i32 %v1_15dd4, %v1_15dd0
  store i32 %v2_15dd8, i32* %r3.global-to-local, align 4
  %v9_15ddc = icmp eq i32 %v2_15dd8, %v1_15dd0
  %v1_15de0 = load i32, i32* @sb, align 4
  %v2_15de0 = add i32 %v1_15de0, 4
  %v3_15de0 = inttoptr i32 %v2_15de0 to i32*
  store i32 %v0_15e18, i32* %v3_15de0, align 4
  br i1 %v9_15ddc, label %dec_label_pc_15de8, label %dec_label_pc_15d40

dec_label_pc_15de8:                               ; preds = %dec_label_pc_15dc8
  %v0_15de8 = load i32, i32* @r4, align 4
  %v1_15de8 = load i32, i32* @r6, align 4
  %v2_15de8 = sub i32 -1, %v1_15de8
  %v3_15de8 = and i32 %v0_15de8, %v2_15de8
  store i32 %v3_15de8, i32* @r3, align 4
  %v1_15dec = and i32 %v3_15de8, 1024
  %v2_15dec = icmp eq i32 %v1_15dec, 0
  br i1 %v2_15dec, label %dec_label_pc_15e0c, label %dec_label_pc_15df4

dec_label_pc_15df4:                               ; preds = %dec_label_pc_15de8
  %v0_15df4 = load i32, i32* @r5, align 4
  store i32 %v0_15df4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1024, i32* %r2.global-to-local, align 4
  %v2_15e00 = call i32 @function_12304(i32 %v0_15df4, i32 4)
  store i32 %v2_15e00, i32* %r0.global-to-local, align 4
  %v2_15e04 = icmp eq i32 %v2_15e00, 0
  br i1 %v2_15e04, label %dec_label_pc_15df4.dec_label_pc_15e0c_crit_edge, label %dec_label_pc_15d40

dec_label_pc_15df4.dec_label_pc_15e0c_crit_edge:  ; preds = %dec_label_pc_15df4
  %v0_15e0c.pre = load i32, i32* @r6, align 4
  %v0_15e10.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15e0c

dec_label_pc_15e0c:                               ; preds = %dec_label_pc_15df4.dec_label_pc_15e0c_crit_edge, %dec_label_pc_15de8
  %v0_15e10 = phi i32 [ %v0_15e10.pre, %dec_label_pc_15df4.dec_label_pc_15e0c_crit_edge ], [ %v0_15de8, %dec_label_pc_15de8 ]
  %v0_15e0c = phi i32 [ %v0_15e0c.pre, %dec_label_pc_15df4.dec_label_pc_15e0c_crit_edge ], [ %v1_15de8, %dec_label_pc_15de8 ]
  %v1_15e0c = and i32 %v0_15e0c, 131072
  store i32 %v1_15e0c, i32* %r3.global-to-local, align 4
  %v2_15e10 = or i32 %v1_15e0c, %v0_15e10
  store i32 %v2_15e10, i32* @r4, align 4
  br label %dec_label_pc_15e3c

dec_label_pc_15e18:                               ; preds = %dec_label_pc_15dc0
  %v7_15e18 = icmp eq i32 %v0_15e18, -1
  %v0_15e24.pre = load i32, i32* @r4, align 4
  br i1 %v7_15e18, label %dec_label_pc_15e18._crit_edge, label %bb36

bb36:                                             ; preds = %dec_label_pc_15e18
  %v2_15e1c = or i32 %v0_15e24.pre, 131072
  store i32 %v2_15e1c, i32* @r4, align 4
  br label %dec_label_pc_15e18._crit_edge

dec_label_pc_15e18._crit_edge:                    ; preds = %dec_label_pc_15e18, %bb36
  %v0_15e24 = phi i32 [ %v2_15e1c, %bb36 ], [ %v0_15e24.pre, %dec_label_pc_15e18 ]
  %v0_15e20 = load i32, i32* @r6, align 4
  store i32 %v0_15e20, i32* %r0.global-to-local, align 4
  store i32 %v0_15e24, i32* %r1.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_15e2c = call i32 @function_120dc(i32 %v0_15e20, i32 %v0_15e24)
  store i32 %v2_15e2c, i32* %r0.global-to-local, align 4
  %v1_15e30 = icmp slt i32 %v2_15e2c, 0
  %v1_15e34 = load i32, i32* @sb, align 4
  %v2_15e34 = add i32 %v1_15e34, 4
  %v3_15e34 = inttoptr i32 %v2_15e34 to i32*
  store i32 %v2_15e2c, i32* %v3_15e34, align 4
  br i1 %v1_15e30, label %dec_label_pc_15d54, label %.dec_label_pc_15e3c_crit_edge

.dec_label_pc_15e3c_crit_edge:                    ; preds = %dec_label_pc_15e18._crit_edge
  %v0_15e40.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15e3c

dec_label_pc_15e3c:                               ; preds = %.dec_label_pc_15e3c_crit_edge, %dec_label_pc_15e0c
  %v0_15e58 = phi i32 [ %v0_15e40.pre, %.dec_label_pc_15e3c_crit_edge ], [ %v2_15e10, %dec_label_pc_15e0c ]
  %v0_15e3c = load i32, i32* @sb, align 4
  %v1_15e3c = inttoptr i32 %v0_15e3c to i16*
  %v2_15e3c = load i16, i16* %v1_15e3c, align 2
  %v3_15e3c = zext i16 %v2_15e3c to i32
  %v1_15e40 = urem i32 %v0_15e58, 4
  %v1_15e44 = and i32 %v0_15e58, 1024
  %v1_15e48 = and i32 %v3_15e3c, 8192
  %v1_15e4c = add nuw nsw i32 %v1_15e40, 1
  %v2_15e50 = or i32 %v1_15e48, %v1_15e44
  store i32 %v2_15e50, i32* %r3.global-to-local, align 4
  %v1_15e54 = xor i32 %v1_15e4c, 3
  store i32 %v1_15e54, i32* %r1.global-to-local, align 4
  %v1_15e58 = and i32 %v0_15e58, 131072
  store i32 %v1_15e58, i32* %r2.global-to-local, align 4
  %v2_15e58 = icmp eq i32 %v1_15e58, 0
  %v1_15e5c = add i32 %v0_15e3c, 4
  %v2_15e5c = inttoptr i32 %v1_15e5c to i32*
  %v3_15e5c = load i32, i32* %v2_15e5c, align 4
  store i32 %v3_15e5c, i32* @r5, align 4
  br i1 %v2_15e58, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_15e3c
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_15e3c, %bb37
  %v0_15e68 = phi i32 [ 0, %dec_label_pc_15e3c ], [ 32768, %bb37 ]
  %v4_15e64 = mul nuw nsw i32 %v1_15e54, 16
  %v5_15e64 = or i32 %v2_15e50, %v4_15e64
  store i32 %v5_15e64, i32* %r3.global-to-local, align 4
  %v2_15e68 = or i32 %v0_15e68, %v5_15e64
  store i32 %v2_15e68, i32* %r2.global-to-local, align 4
  %v8_15e6c = icmp eq i32 %v3_15e5c, 2147483647
  %v1_15e70 = trunc i32 %v2_15e68 to i16
  store i16 %v1_15e70, i16* %v1_15e3c, align 2
  br i1 %v8_15e6c, label %dec_label_pc_15ea0, label %dec_label_pc_15e78

dec_label_pc_15e78:                               ; preds = %bb38
  %v0_15e78 = call i32 @function_128f8()
  store i32 %v0_15e78, i32* @r4, align 4
  %v0_15e80 = load i32, i32* @r5, align 4
  store i32 %v0_15e80, i32* @r0, align 4
  %v1_15e84 = inttoptr i32 %v0_15e78 to i32*
  %v2_15e84 = load i32, i32* %v1_15e84, align 4
  store i32 %v2_15e84, i32* @r5, align 4
  %v1_15e88 = call i32 @function_1706c(i32 %v0_15e80)
  store i32 %v1_15e88, i32* %r0.global-to-local, align 4
  %v2_15e8c = icmp eq i32 %v1_15e88, 0
  br i1 %v2_15e8c, label %.thread5, label %bb39

bb39:                                             ; preds = %dec_label_pc_15e78
  %v1_15e90 = load i32, i32* @sb, align 4
  %v2_15e90 = inttoptr i32 %v1_15e90 to i16*
  %v3_15e90 = load i16, i16* %v2_15e90, align 2
  %v4_15e90 = zext i16 %v3_15e90 to i32
  %v2_15e94 = or i32 %v4_15e90, 256
  store i32 %v2_15e94, i32* %r3.global-to-local, align 4
  %v2_15e98 = trunc i32 %v2_15e94 to i16
  store i16 %v2_15e98, i16* %v2_15e90, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_15e78, %bb39
  %v0_15e9c = load i32, i32* @r5, align 4
  %v1_15e9c = load i32, i32* @r4, align 4
  %v2_15e9c = inttoptr i32 %v1_15e9c to i32*
  store i32 %v0_15e9c, i32* %v2_15e9c, align 4
  br label %dec_label_pc_15ea0

dec_label_pc_15ea0:                               ; preds = %bb38, %.thread5
  %v0_15ea0 = load i32, i32* @sb, align 4
  %v1_15ea0 = add i32 %v0_15ea0, 8
  %v2_15ea0 = inttoptr i32 %v1_15ea0 to i32*
  %v3_15ea0 = load i32, i32* %v2_15ea0, align 4
  store i32 %v3_15ea0, i32* %r3.global-to-local, align 4
  %v2_15ea4 = icmp eq i32 %v3_15ea0, 0
  br i1 %v2_15ea4, label %dec_label_pc_15eac, label %bb40

dec_label_pc_15eac:                               ; preds = %dec_label_pc_15ea0
  store i32 4096, i32* @r0, align 4
  %v0_15eb0 = call i32 @function_12f2c()
  store i32 %v0_15eb0, i32* %r0.global-to-local, align 4
  %v2_15eb4 = icmp eq i32 %v0_15eb0, 0
  %v1_15ec4.pre = load i32, i32* @sb, align 4
  br i1 %v2_15eb4, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_15eac
  %v2_15eb8 = inttoptr i32 %v1_15ec4.pre to i16*
  %v3_15eb8 = load i16, i16* %v2_15eb8, align 2
  %v4_15eb8 = zext i16 %v3_15eb8 to i32
  %v2_15ebc = add i32 %v0_15eb0, 4096
  store i32 %v2_15ebc, i32* %r2.global-to-local, align 4
  %v2_15ec0 = or i32 %v4_15eb8, 16384
  store i32 %v2_15ec0, i32* %r3.global-to-local, align 4
  %v2_15ec4 = add i32 %v1_15ec4.pre, 8
  %v3_15ec4 = inttoptr i32 %v2_15ec4 to i32*
  store i32 %v0_15eb0, i32* %v3_15ec4, align 4
  %v1_15ec8 = load i32, i32* %r2.global-to-local, align 4
  %v2_15ec8 = load i32, i32* @sb, align 4
  %v3_15ec8 = add i32 %v2_15ec8, 12
  %v4_15ec8 = inttoptr i32 %v3_15ec8 to i32*
  store i32 %v1_15ec8, i32* %v4_15ec8, align 4
  %v1_15ecc = load i32, i32* %r3.global-to-local, align 4
  %v2_15ecc = trunc i32 %v1_15ecc to i16
  %v3_15ecc = load i32, i32* @sb, align 4
  %v4_15ecc = inttoptr i32 %v3_15ecc to i16*
  store i16 %v2_15ecc, i16* %v4_15ecc, align 2
  br label %bb40

.thread9:                                         ; preds = %dec_label_pc_15eac
  %v2_15ec419 = add i32 %v1_15ec4.pre, 8
  %v3_15ec420 = inttoptr i32 %v2_15ec419 to i32*
  store i32 0, i32* %v3_15ec420, align 4
  %v2_15ed0 = load i32, i32* @sb, align 4
  %v3_15ed0 = add i32 %v2_15ed0, 12
  %v4_15ed0 = inttoptr i32 %v3_15ed0 to i32*
  store i32 0, i32* %v4_15ed0, align 4
  br label %bb40

bb40:                                             ; preds = %.thread8, %dec_label_pc_15ea0, %.thread9
  store i32 56, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_15edc = load i32, i32* @fp, align 4
  %v2_15edc = add i32 %v0_15edc, 56
  %v3_15edc = inttoptr i32 %v2_15edc to i32*
  %v4_15edc = load i32, i32* %v3_15edc, align 4
  store i32 %v4_15edc, i32* %r3.global-to-local, align 4
  %v2_15ee0 = load i32, i32* @sb, align 4
  %v3_15ee0 = add i32 %v2_15ee0, 2
  %v4_15ee0 = inttoptr i32 %v3_15ee0 to i8*
  store i8 0, i8* %v4_15ee0, align 1
  %v0_15ee4 = load i32, i32* @sb, align 4
  %v1_15ee4 = inttoptr i32 %v0_15ee4 to i16*
  %v2_15ee4 = load i16, i16* %v1_15ee4, align 2
  %v3_15ee4 = zext i16 %v2_15ee4 to i32
  store i32 %v3_15ee4, i32* %r2.global-to-local, align 4
  %v0_15ee8 = load i32, i32* %r3.global-to-local, align 4
  %v1_15ee8 = inttoptr i32 %v0_15ee8 to i32*
  %v2_15ee8 = load i32, i32* %v1_15ee8, align 4
  store i32 %v2_15ee8, i32* %r1.global-to-local, align 4
  %v1_15eec = add i32 %v0_15ee4, 8
  %v2_15eec = inttoptr i32 %v1_15eec to i32*
  %v3_15eec = load i32, i32* %v2_15eec, align 4
  store i32 %v3_15eec, i32* %r3.global-to-local, align 4
  %v1_15ef0 = and i32 %v3_15ee4, 8192
  %v2_15ef0 = icmp eq i32 %v1_15ef0, 0
  %v2_15ef4 = add i32 %v0_15ee4, 20
  %v3_15ef4 = inttoptr i32 %v2_15ef4 to i32*
  store i32 %v3_15eec, i32* %v3_15ef4, align 4
  %v0_15ef8 = load i32, i32* %r0.global-to-local, align 4
  %v1_15ef8 = load i32, i32* @sb, align 4
  %v2_15ef8 = add i32 %v1_15ef8, 44
  %v3_15ef8 = inttoptr i32 %v2_15ef8 to i32*
  store i32 %v0_15ef8, i32* %v3_15ef8, align 4
  %v0_15efc = load i32, i32* %r1.global-to-local, align 4
  %v1_15efc = load i32, i32* @sb, align 4
  %v2_15efc = add i32 %v1_15efc, 52
  %v3_15efc = inttoptr i32 %v2_15efc to i32*
  store i32 %v0_15efc, i32* %v3_15efc, align 4
  %v0_15f00 = load i32, i32* %r3.global-to-local, align 4
  %v1_15f00 = load i32, i32* @sb, align 4
  %v2_15f00 = add i32 %v1_15f00, 24
  %v3_15f00 = inttoptr i32 %v2_15f00 to i32*
  store i32 %v0_15f00, i32* %v3_15f00, align 4
  %v0_15f04 = load i32, i32* %r3.global-to-local, align 4
  %v1_15f04 = load i32, i32* @sb, align 4
  %v2_15f04 = add i32 %v1_15f04, 28
  %v3_15f04 = inttoptr i32 %v2_15f04 to i32*
  store i32 %v0_15f04, i32* %v3_15f04, align 4
  %v0_15f08 = load i32, i32* %r3.global-to-local, align 4
  %v1_15f08 = load i32, i32* @sb, align 4
  %v2_15f08 = add i32 %v1_15f08, 16
  %v3_15f08 = inttoptr i32 %v2_15f08 to i32*
  store i32 %v0_15f08, i32* %v3_15f08, align 4
  br i1 %v2_15ef0, label %dec_label_pc_15fc4, label %dec_label_pc_15f10

dec_label_pc_15f10:                               ; preds = %bb40
  store i32 36, i32* %r3.global-to-local, align 4
  %v0_15f14 = load i32, i32* @fp, align 4
  %v2_15f14 = add i32 %v0_15f14, 36
  %v3_15f14 = inttoptr i32 %v2_15f14 to i32*
  %v4_15f14 = load i32, i32* %v3_15f14, align 4
  store i32 %v4_15f14, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v2_15f1c = add i32 %v0_15f14, 108
  %v3_15f1c = inttoptr i32 %v2_15f1c to i32*
  %v4_15f1c = load i32, i32* %v3_15f1c, align 4
  store i32 %v4_15f1c, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_15f24 = ptrtoint i32* %stack_var_-56 to i32
  %v2_15f28 = add i32 %v0_15f14, 72
  %v3_15f28 = inttoptr i32 %v2_15f28 to i32*
  %v4_15f28 = load i32, i32* %v3_15f28, align 4
  store i32 %v4_15f14, i32* %r1.global-to-local, align 4
  store i32 %v4_15f1c, i32* %r2.global-to-local, align 4
  store i32 %v2_15f24, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15f28)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_15f44 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15f44, i32* %r0.global-to-local, align 4
  %v0_15f48 = load i32, i32* @fp, align 4
  %v2_15f48 = add i32 %v0_15f48, 16
  %v3_15f48 = inttoptr i32 %v2_15f48 to i32*
  %v4_15f48 = load i32, i32* %v3_15f48, align 4
  call void @__pseudo_branch(i32 %v4_15f48)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_15f58 = load i32, i32* @fp, align 4
  %v2_15f58 = add i32 %v0_15f58, 96
  %v3_15f58 = inttoptr i32 %v2_15f58 to i32*
  %v4_15f58 = load i32, i32* %v3_15f58, align 4
  store i32 %v4_15f58, i32* %r4.global-to-local, align 4
  %v0_15f5c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_15f5c, i32* %r1.global-to-local, align 4
  store i32 %v4_15f58, i32* %r2.global-to-local, align 4
  store i32 %v2_15d14, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15f28)
  store i32 %v4_15f58, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15f48)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_15f80 = load i32, i32* @fp, align 4
  %v2_15f80 = add i32 %v0_15f80, 44
  %v3_15f80 = inttoptr i32 %v2_15f80 to i32*
  %v4_15f80 = load i32, i32* %v3_15f80, align 4
  store i32 %v4_15f80, i32* @ip, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v1_15f88 = inttoptr i32 %v4_15f80 to i32*
  %v2_15f88 = load i32, i32* %v1_15f88, align 4
  store i32 %v2_15f88, i32* %r2.global-to-local, align 4
  store i32 %v2_15d14, i32* %r0.global-to-local, align 4
  %v1_15f90 = load i32, i32* @sb, align 4
  %v2_15f90 = add i32 %v1_15f90, 32
  %v3_15f90 = inttoptr i32 %v2_15f90 to i32*
  store i32 %v2_15f88, i32* %v3_15f90, align 4
  %v0_15f94 = load i32, i32* @fp, align 4
  %v1_15f94 = load i32, i32* %r3.global-to-local, align 4
  %v2_15f94 = add i32 %v1_15f94, %v0_15f94
  %v3_15f94 = inttoptr i32 %v2_15f94 to i32*
  %v4_15f94 = load i32, i32* %v3_15f94, align 4
  store i32 %v4_15f94, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_15f9c = load i32, i32* @sb, align 4
  %v1_15f9c = load i32, i32* @ip, align 4
  %v2_15f9c = inttoptr i32 %v1_15f9c to i32*
  store i32 %v0_15f9c, i32* %v2_15f9c, align 4
  call void @__pseudo_branch(i32 %v4_15f94)
  store i32 %v2_15f24, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15f94)
  br label %dec_label_pc_15fc4

dec_label_pc_15fc0:                               ; preds = %dec_label_pc_15d54, %dec_label_pc_15d40, %dec_label_pc_15d60
  store i32 0, i32* @sb, align 4
  br label %dec_label_pc_15fc4

dec_label_pc_15fc4:                               ; preds = %bb40, %dec_label_pc_15d98, %dec_label_pc_15f10, %dec_label_pc_15fc0
  %v0_15fc4 = load i32, i32* @sb, align 4
  store i32 %v0_15fc4, i32* %r0.global-to-local, align 4
  %v2_15fcc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_15fcc, i32* %r4.global-to-local, align 4
  store i32 %v6_15d00, i32* @r5, align 4
  store i32 %v9_15d00, i32* @r6, align 4
  store i32 %v18_15d00, i32* @sb, align 4
  store i32 %v24_15d00, i32* @fp, align 4
  ret i32 %v0_15fc4

; uselistorder directives
  uselistorder i32 %v1_15ec4.pre, { 2, 1, 0 }
  uselistorder i32 %v0_15e58, { 1, 2, 0 }
  uselistorder i32 %v0_15e24, { 1, 0 }
  uselistorder i32 %v1_15de8, { 1, 0 }
  uselistorder i32 %v0_15de8, { 1, 0 }
  uselistorder i32 %v1_15dd0, { 1, 0, 2 }
  uselistorder i32 %v1_15d88, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 24, 25 }
  uselistorder i32* %r0.global-to-local, { 0, 2, 1, 4, 3, 5, 6, 7, 8, 9, 10, 12, 11, 14, 13, 15, 16, 17, 18 }
  uselistorder i32 16384, { 45, 0, 46, 32, 63, 33, 64, 34, 65, 35, 66, 36, 67, 37, 68, 14, 69, 1, 47, 28, 51, 29, 52, 27, 48, 30, 49, 31, 50, 2, 53, 3, 54, 4, 55, 5, 56, 6, 57, 7, 58, 8, 59, 9, 60, 10, 61, 11, 62, 38, 70, 12, 71, 13, 72, 17, 73, 16, 74, 40, 75, 41, 76, 15, 77, 39, 78, 79, 18, 80, 19, 81, 20, 82, 42, 83, 21, 84, 22, 85, 24, 86, 23, 87, 25, 88, 26, 89, 44, 90, 91, 92, 43, 93 }
  uselistorder i32 4096, { 7, 8, 9, 1, 0, 2, 13, 3, 10, 5, 4, 6, 11, 12 }
  uselistorder i32 32768, { 1, 5, 2, 0, 4, 3 }
  uselistorder i32 (i32, i32)* @function_120dc, { 6, 0, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_12304, { 14, 0, 13, 10, 9, 12, 11, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 1024, { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32 ()* @function_12f2c, { 72, 71, 70, 4, 3, 2, 0, 1, 6, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5 }
  uselistorder i32 80, { 6, 3, 4, 5, 1, 2, 9, 7, 8, 10, 0, 11 }
  uselistorder i8 43, { 1, 0 }
  uselistorder i32 ()* @function_13f98, { 10, 9, 5, 4, 3, 2, 0, 8, 7, 6, 1 }
  uselistorder i32* @fp, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 109, 96, 97, 98, 99, 105, 107, 106, 108, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 62, 63, 64, 65, 66, 67, 68, 1, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 2, 103, 104 }
  uselistorder i32* @sb, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 121, 122, 123, 124, 125, 126, 127, 128, 133, 136, 134, 135, 137, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 1, 51, 52, 57, 58, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 2, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 138, 139, 140, 141, 142, 143, 144, 129, 130, 131, 132 }
  uselistorder label %dec_label_pc_15fc4, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_15fc0, { 2, 0, 1 }
  uselistorder label %bb40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15ea0, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_15e18._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_15dc0, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_15d70, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15d40, { 1, 2, 0 }
}

define i32 @function_15fd8(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15fd8:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v0_15fd8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15fd8, label %bb, label %.thread10

bb:                                               ; preds = %dec_label_pc_15fd8
  %v1_15fe0 = load i32, i32* %r2.global-to-local, align 4
  %v2_15fe0 = load i32, i32* %r3.global-to-local, align 4
  %v3_15fe0 = and i32 %v2_15fe0, %v1_15fe0
  %v2_15fe4 = trunc i32 %v3_15fe0 to i16
  %v4_15fe4 = inttoptr i32 %v3_15fe0 to i16*
  store i16 %v2_15fe4, i16* %v4_15fe4, align 2
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_15fd8, %bb
  %v0_1600c = call i32 @function_128f8()
  store i32 %v0_1600c, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v1_16018 = inttoptr i32 %v0_1600c to i32*
  %v2_16018 = load i32, i32* %v1_16018, align 4
  store i32 %v2_16018, i32* @r6, align 4
  %v1_1601c = call i32 @function_1706c(i32 0)
  %v2_16024 = icmp eq i32 %v1_1601c, 0
  store i32 131404, i32* @r4, align 4
  br i1 %v2_16024, label %bb23, label %.thread13

bb23:                                             ; preds = %.thread10
  store i32 304, i32* %r2.global-to-local, align 4
  %v5_16030 = load i16, i16* inttoptr (i32 131708 to i16*), align 4
  %v7_16030 = zext i16 %v5_16030 to i32
  %v2_16034 = xor i32 %v7_16030, 256
  store i32 %v2_16034, i32* @r3, align 4
  %v2_16038 = trunc i32 %v2_16034 to i16
  store i16 %v2_16038, i16* inttoptr (i32 131708 to i16*), align 4
  br label %.thread13

.thread13:                                        ; preds = %.thread10, %bb23
  store i32 1, i32* @r0, align 4
  %v1_16040 = call i32 @function_1706c(i32 1)
  %v2_16044 = icmp eq i32 %v1_16040, 0
  br i1 %v2_16044, label %bb24, label %.thread17

bb24:                                             ; preds = %.thread13
  %v1_1604c = load i32, i32* @r4, align 4
  %v3_1604c = add i32 %v1_1604c, 304
  store i32 %v3_1604c, i32* %r2.global-to-local, align 4
  %v2_16050 = add i32 %v1_1604c, 384
  %v3_16050 = inttoptr i32 %v2_16050 to i16*
  %v4_16050 = load i16, i16* %v3_16050, align 2
  %v5_16050 = zext i16 %v4_16050 to i32
  %v2_16054 = xor i32 %v5_16050, 256
  store i32 %v2_16054, i32* %r3.global-to-local, align 4
  %v2_16058 = trunc i32 %v2_16054 to i16
  store i16 %v2_16058, i16* %v3_16050, align 2
  br label %.thread17

.thread17:                                        ; preds = %.thread13, %bb24
  %v0_1605c = load i32, i32* @r6, align 4
  %v1_1605c = load i32, i32* @r5, align 4
  %v2_1605c = inttoptr i32 %v1_1605c to i32*
  store i32 %v0_1605c, i32* %v2_1605c, align 4
  ret i32 %v1_16040

; uselistorder directives
  uselistorder i32 %v3_15fe0, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32)* @function_1706c, { 2, 1, 0 }
  uselistorder label %.thread17, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_16070(i32 %arg1) local_unnamed_addr {
dec_label_pc_16070:
  store i32 131404, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_18124.652 to i32), i32* @r1, align 4
  store i32 24, i32* @r2, align 4
  %v0_1608c = call i32 @function_12a00()
  ret i32 %v0_1608c
}

define i32 @function_16178(i32 %arg1) local_unnamed_addr {
dec_label_pc_16178:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_16178 = load i32, i32* @r4, align 4
  store i32 %v3_16178, i32* %stack_var_-8, align 4
  %v1_1617c = add i32 %arg1, 8
  %v2_1617c = inttoptr i32 %v1_1617c to i32*
  %v3_1617c = load i32, i32* %v2_1617c, align 4
  %v1_16180 = add i32 %arg1, 16
  %v2_16180 = inttoptr i32 %v1_16180 to i32*
  %v3_16180 = load i32, i32* %v2_16180, align 4
  %v9_16184 = icmp eq i32 %v3_16180, %v3_1617c
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_16184, label %bb3, label %bb

bb:                                               ; preds = %dec_label_pc_16178
  store i32 %v3_1617c, i32* %v2_16180, align 4
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_16178, %bb
  %v1_16190 = xor i1 %v9_16184, true
  call void @__pseudo_cond_branch(i1 %v1_16190, i32 ptrtoint (i32* @global_var_17458.653 to i32))
  %v0_16194 = load i32, i32* %r4.global-to-local, align 4
  %v1_16194 = add i32 %v0_16194, 8
  %v2_16194 = inttoptr i32 %v1_16194 to i32*
  %v3_16194 = load i32, i32* %v2_16194, align 4
  %v1_16198 = add i32 %v0_16194, 16
  %v2_16198 = inttoptr i32 %v1_16198 to i32*
  %v3_16198 = load i32, i32* %v2_16198, align 4
  %v2_1619c = sub i32 %v3_16198, %v3_16194
  %v2_161a0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_161a0, i32* @r4, align 4
  ret i32 %v2_1619c

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_161a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_161a8:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_161a8 = load i32, i32* @r4, align 4
  store i32 %v3_161a8, i32* %stack_var_-16, align 4
  %v6_161a8 = load i32, i32* @r5, align 4
  %v12_161a8 = load i32, i32* @lr, align 4
  %v1_161ac = add i32 %arg1, 52
  %v2_161ac = inttoptr i32 %v1_161ac to i32*
  %v3_161ac = load i32, i32* %v2_161ac, align 4
  %v2_161b4 = icmp eq i32 %v3_161ac, 0
  store i32 %arg1, i32* @r5, align 4
  store i32 131404, i32* %r6.global-to-local, align 4
  br i1 %v2_161b4, label %dec_label_pc_161ec, label %dec_label_pc_161c8

dec_label_pc_161c8:                               ; preds = %dec_label_pc_161a8
  %v1_161c8 = add i32 %arg1, 16
  %v2_161c8 = inttoptr i32 %v1_161c8 to i32*
  %v3_161c8 = load i32, i32* %v2_161c8, align 4
  %v1_161cc = add i32 %arg1, 24
  %v2_161cc = inttoptr i32 %v1_161cc to i32*
  %v3_161cc = load i32, i32* %v2_161cc, align 4
  %v3_161d0 = icmp ult i32 %v3_161c8, %v3_161cc
  br i1 %v3_161d0, label %.thread, label %dec_label_pc_161e0

.thread:                                          ; preds = %dec_label_pc_161c8
  %v2_161d4 = inttoptr i32 %v3_161c8 to i8*
  %v3_161d4 = load i8, i8* %v2_161d4, align 1
  %v4_161d4 = zext i8 %v3_161d4 to i32
  store i32 %v4_161d4, i32* %r4.global-to-local, align 4
  %v6_161d4 = add i32 %v3_161c8, 1
  store i32 %v6_161d4, i32* %v2_161c8, align 4
  br label %dec_label_pc_16260

dec_label_pc_161e0:                               ; preds = %dec_label_pc_161c8
  %v1_161e0 = inttoptr i32 %arg1 to i16*
  %v2_161e0 = call i32 @function_166d4(i16* %v1_161e0)
  store i32 %v2_161e0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_16260

dec_label_pc_161ec:                               ; preds = %dec_label_pc_161a8
  %v1_161f0 = add i32 %arg1, 56
  store i32 %v1_161f0, i32* @r4, align 4
  %v4_16204 = load i32, i32* inttoptr (i32 131476 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_16204)
  %v0_16218 = load i32, i32* %r6.global-to-local, align 4
  %v2_16218 = add i32 %v0_16218, 16
  %v3_16218 = inttoptr i32 %v2_16218 to i32*
  %v4_16218 = load i32, i32* %v3_16218, align 4
  store i32 90660, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_16218)
  %v0_16224 = load i32, i32* @r5, align 4
  %v1_16224 = add i32 %v0_16224, 16
  %v2_16224 = inttoptr i32 %v1_16224 to i32*
  %v3_16224 = load i32, i32* %v2_16224, align 4
  %v1_16228 = add i32 %v0_16224, 24
  %v2_16228 = inttoptr i32 %v1_16228 to i32*
  %v3_16228 = load i32, i32* %v2_16228, align 4
  %v3_1622c = icmp ult i32 %v3_16224, %v3_16228
  br i1 %v3_1622c, label %.thread2, label %dec_label_pc_1623c

.thread2:                                         ; preds = %dec_label_pc_161ec
  %v2_16230 = inttoptr i32 %v3_16224 to i8*
  %v3_16230 = load i8, i8* %v2_16230, align 1
  %v4_16230 = zext i8 %v3_16230 to i32
  store i32 %v4_16230, i32* %r4.global-to-local, align 4
  %v6_16230 = add i32 %v3_16224, 1
  store i32 %v6_16230, i32* %v2_16224, align 4
  br label %dec_label_pc_16248

dec_label_pc_1623c:                               ; preds = %dec_label_pc_161ec
  %v1_16240 = inttoptr i32 %v0_16224 to i16*
  %v2_16240 = call i32 @function_166d4(i16* %v1_16240)
  store i32 %v2_16240, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_16248

dec_label_pc_16248:                               ; preds = %.thread2, %dec_label_pc_1623c
  %v0_16254 = load i32, i32* %r6.global-to-local, align 4
  %v2_16254 = add i32 %v0_16254, 24
  %v3_16254 = inttoptr i32 %v2_16254 to i32*
  %v4_16254 = load i32, i32* %v3_16254, align 4
  store i32 %v4_16254, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_16254)
  br label %dec_label_pc_16260

dec_label_pc_16260:                               ; preds = %.thread, %dec_label_pc_161e0, %dec_label_pc_16248
  %v0_16260 = load i32, i32* %r4.global-to-local, align 4
  %v2_16268 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16268, i32* @r4, align 4
  store i32 %v6_161a8, i32* @r5, align 4
  store i32 %v12_161a8, i32* @lr, align 4
  ret i32 %v0_16260

; uselistorder directives
  uselistorder i32 %v3_16224, { 1, 0, 2 }
  uselistorder i32 %v3_161c8, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 5, 4, 3, 2, 0 }
  uselistorder label %dec_label_pc_16260, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16248, { 1, 0 }
}

define i32 @function_16274(i32 %arg1) local_unnamed_addr {
dec_label_pc_16274:
  %v0_16274 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_16274, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_16274
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_16274, %bb
  %v10_16280 = phi i32 [ %arg1, %dec_label_pc_16274 ], [ 0, %bb ]
  ret i32 %v10_16280

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_16284(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_16284:
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_16284 = load i32, i32* @r4, align 4
  store i32 %v3_16284, i32* %stack_var_-28, align 4
  %v6_16284 = load i32, i32* @r5, align 4
  %v9_16284 = load i32, i32* @r6, align 4
  %v12_16284 = load i32, i32* @r7, align 4
  %v21_16284 = load i32, i32* @lr, align 4
  %v1_16288 = add i32 %arg3, 52
  %v2_16288 = inttoptr i32 %v1_16288 to i32*
  %v3_16288 = load i32, i32* %v2_16288, align 4
  %v1_16290 = sub i32 1, %v3_16288
  %v2_16290 = icmp ult i32 %v3_16288, 2
  br i1 %v2_16290, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_16284
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_16284, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_16290, %dec_label_pc_16284 ]
  %v0_16298 = phi i32 [ 0, %bb ], [ %v1_16290, %dec_label_pc_16284 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_16298 = icmp eq i32 %v0_16298, 0
  store i32 131404, i32* @r5, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %arg1, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  br i1 %v2_16298, label %dec_label_pc_162ec, label %dec_label_pc_162b4

dec_label_pc_162b4:                               ; preds = %bb16
  %v1_162b8 = add i32 %arg3, 56
  store i32 %v1_162b8, i32* @r4, align 4
  %v4_162cc = load i32, i32* inttoptr (i32 131476 to i32*), align 4
  call void @__pseudo_branch(i32 %v4_162cc)
  %v0_162e0 = load i32, i32* @r5, align 4
  %v2_162e0 = add i32 %v0_162e0, 16
  %v3_162e0 = inttoptr i32 %v2_162e0 to i32*
  %v4_162e0 = load i32, i32* %v3_162e0, align 4
  store i32 %v4_162e0, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_162ec.663 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_162e0)
  %v0_162ec.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_162f0.pre = load i32, i32* @r7, align 4
  %v0_162f4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_162ec

dec_label_pc_162ec:                               ; preds = %bb16, %dec_label_pc_162b4
  %v0_162f4 = phi i32 [ %arg3, %bb16 ], [ %v0_162f4.pre, %dec_label_pc_162b4 ]
  %v0_162f0 = phi i32 [ %arg2, %bb16 ], [ %v0_162f0.pre, %dec_label_pc_162b4 ]
  %v0_162ec = phi i32 [ %arg1, %bb16 ], [ %v0_162ec.pre, %dec_label_pc_162b4 ]
  %v3_162f8 = inttoptr i32 %v0_162ec to i8*
  %v4_162f8 = call i32 @function_16800(i8* %v3_162f8, i32 %v0_162f0, i32 %v0_162f4)
  %v0_162fc = load i32, i32* %sl.global-to-local, align 4
  %v2_162fc = icmp eq i32 %v0_162fc, 0
  store i32 %v4_162f8, i32* %r4.global-to-local, align 4
  br i1 %v2_162fc, label %dec_label_pc_162ec..thread3_crit_edge, label %bb17

dec_label_pc_162ec..thread3_crit_edge:            ; preds = %dec_label_pc_162ec
  %v0_16318.pre = load i32, i32* @ip, align 4
  br label %.thread3

bb17:                                             ; preds = %dec_label_pc_162ec
  %v1_16310 = load i32, i32* @r5, align 4
  %v3_16310 = add i32 %v1_16310, 24
  %v4_16310 = inttoptr i32 %v3_16310 to i32*
  %v5_16310 = load i32, i32* %v4_16310, align 4
  store i32 %v5_16310, i32* @ip, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_162ec..thread3_crit_edge, %bb17
  %v0_16318 = phi i32 [ %v0_16318.pre, %dec_label_pc_162ec..thread3_crit_edge ], [ %v5_16310, %bb17 ]
  %v2_16318 = xor i1 %v2_162fc, true
  call void @__pseudo_cond_branch(i1 %v2_16318, i32 %v0_16318)
  %v0_1631c = load i32, i32* %r4.global-to-local, align 4
  %v2_16324 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_16324, i32* %r4.global-to-local, align 4
  store i32 %v6_16284, i32* @r5, align 4
  store i32 %v9_16284, i32* @r6, align 4
  store i32 %v12_16284, i32* @r7, align 4
  store i32 %v21_16284, i32* @lr, align 4
  ret i32 %v0_1631c

; uselistorder directives
  uselistorder i32 %v3_16288, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0 }
  uselistorder i32 52, { 10, 11, 12, 13, 14, 2, 15, 8, 9, 3, 18, 19, 1, 20, 0, 21, 22, 4, 5, 16, 17, 6, 23, 7, 24 }
  uselistorder i32 %arg3, { 0, 2, 3, 1 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_162ec, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_16330(i32 %arg1) local_unnamed_addr {
dec_label_pc_16330:
  %v0_16330 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_16330, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_16330
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_16330, %bb
  %v10_1633c = phi i32 [ %arg1, %dec_label_pc_16330 ], [ 0, %bb ]
  ret i32 %v10_1633c

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_16340() local_unnamed_addr {
dec_label_pc_16340:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_16340 = load i32, i32* @r4, align 4
  store i32 %v3_16340, i32* %stack_var_-24, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 131404, i32* %r6.global-to-local, align 4
  %v4_16350 = load i32, i32* inttoptr (i32 131440 to i32*), align 16
  store i32 %v4_16350, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_16358 = load i32, i32* inttoptr (i32 131512 to i32*), align 8
  store i32 %v4_16358, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_16364 = load i32, i32* inttoptr (i32 131476 to i32*), align 4
  store i32 %v4_16364, i32* %r7.global-to-local, align 4
  %v2_16370 = ptrtoint i32* %stack_var_-40 to i32
  call void @__pseudo_branch(i32 %v4_16364)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_16384 = load i32, i32* %r6.global-to-local, align 4
  %v2_16384 = add i32 %v0_16384, 16
  %v3_16384 = inttoptr i32 %v2_16384 to i32*
  %v4_16384 = load i32, i32* %v3_16384, align 4
  store i32 %v4_16384, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_16384)
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_16394 = load i32, i32* %r6.global-to-local, align 4
  %v2_16394 = add i32 %v0_16394, 12
  %v3_16394 = inttoptr i32 %v2_16394 to i32*
  %v4_16394 = load i32, i32* %v3_16394, align 4
  store i32 %v4_16394, i32* %r3.global-to-local, align 4
  %v1_16398 = inttoptr i32 %v4_16394 to i32*
  %v2_16398 = load i32, i32* %v1_16398, align 4
  store i32 %v2_16398, i32* %r3.global-to-local, align 4
  %v7_1639c = icmp eq i32 %v2_16398, 1
  br i1 %v7_1639c, label %dec_label_pc_163a4, label %dec_label_pc_16464

dec_label_pc_163a4:                               ; preds = %dec_label_pc_16340
  store i32 48, i32* %r3.global-to-local, align 4
  %v2_163a8 = add i32 %v0_16394, 48
  %v3_163a8 = inttoptr i32 %v2_163a8 to i32*
  %v4_163a8 = load i32, i32* %v3_163a8, align 4
  store i32 %v4_163a8, i32* %r3.global-to-local, align 4
  %v1_163ac = inttoptr i32 %v4_163a8 to i32*
  %v2_163ac = load i32, i32* %v1_163ac, align 4
  store i32 %v2_163ac, i32* %r3.global-to-local, align 4
  %tmp30 = icmp slt i32 %v2_163ac, 1
  br i1 %tmp30, label %dec_label_pc_16464, label %dec_label_pc_163b8

dec_label_pc_163b8:                               ; preds = %dec_label_pc_163a4
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_163bc = add i32 %v0_16394, 96
  %v3_163bc = inttoptr i32 %v2_163bc to i32*
  %v4_163bc = load i32, i32* %v3_163bc, align 4
  store i32 %v4_163bc, i32* %r4.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_16364)
  call void @__pseudo_branch(i32 %v4_16384)
  %v0_163e4 = load i32, i32* %r6.global-to-local, align 4
  %v2_163e4 = add i32 %v0_163e4, 44
  %v3_163e4 = inttoptr i32 %v2_163e4 to i32*
  %v4_163e4 = load i32, i32* %v3_163e4, align 4
  store i32 %v4_163e4, i32* %r3.global-to-local, align 4
  %v1_163e8 = inttoptr i32 %v4_163e4 to i32*
  %v2_163e8 = load i32, i32* %v1_163e8, align 4
  store i32 %v2_163e8, i32* %r4.global-to-local, align 4
  store i32 44, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_1643411 = icmp eq i32 %v2_163e8, 0
  br i1 %v2_1643411, label %dec_label_pc_16440, label %dec_label_pc_163f8

dec_label_pc_163f8:                               ; preds = %dec_label_pc_163b8, %dec_label_pc_16430
  %v0_1641c2 = phi i32 [ %v0_16430, %dec_label_pc_16430 ], [ %v2_163e8, %dec_label_pc_163b8 ]
  %v1_163f8 = inttoptr i32 %v0_1641c2 to i16*
  %v2_163f8 = load i16, i16* %v1_163f8, align 2
  %v3_163f8 = zext i16 %v2_163f8 to i32
  store i32 %v3_163f8, i32* %r3.global-to-local, align 4
  %v2_163fc = and i32 %v3_163f8, 32816
  %v7_16400 = icmp eq i32 %v2_163fc, 48
  %v1_16404 = add i32 %v0_1641c2, 32
  %v2_16404 = inttoptr i32 %v1_16404 to i32*
  %v3_16404 = load i32, i32* %v2_16404, align 4
  store i32 %v3_16404, i32* %r5.global-to-local, align 4
  br i1 %v7_16400, label %dec_label_pc_16410, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_163f8
  store i32 %v0_1641c2, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_16430

dec_label_pc_16410:                               ; preds = %dec_label_pc_163f8
  %v0_16410 = load i32, i32* %r7.global-to-local, align 4
  %v2_16410 = icmp eq i32 %v0_16410, 0
  br i1 %v2_16410, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_16410
  %v1_16414 = load i32, i32* %r6.global-to-local, align 4
  %v2_16414 = load i32, i32* %r8.global-to-local, align 4
  %v3_16414 = add i32 %v2_16414, %v1_16414
  %v4_16414 = inttoptr i32 %v3_16414 to i32*
  %v5_16414 = load i32, i32* %v4_16414, align 4
  store i32 %v5_16414, i32* %r3.global-to-local, align 4
  %v3_16418 = inttoptr i32 %v5_16414 to i32*
  store i32 %v3_16404, i32* %v3_16418, align 4
  %v0_1641c = load i32, i32* %r4.global-to-local, align 4
  %v1_1641c = inttoptr i32 %v0_1641c to i16*
  %v2_1641c = load i16, i16* %v1_1641c, align 2
  %v3_1641c = zext i16 %v2_1641c to i32
  store i32 %v3_1641c, i32* %r3.global-to-local, align 4
  br label %bb31

bb:                                               ; preds = %dec_label_pc_16410
  %v2_1641c8 = load i16, i16* %v1_163f8, align 2
  %v3_1641c9 = zext i16 %v2_1641c8 to i32
  store i32 %v3_1641c9, i32* %r3.global-to-local, align 4
  %v3_16420 = add i32 %v0_16410, 32
  %v4_16420 = inttoptr i32 %v3_16420 to i32*
  store i32 %v3_16404, i32* %v4_16420, align 4
  %v0_16424.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %.thread, %bb
  %v0_16424 = phi i32 [ %v3_1641c, %.thread ], [ %v0_16424.pre, %bb ]
  %v1_16424 = and i32 %v0_16424, 8192
  %v2_16424 = icmp eq i32 %v1_16424, 0
  br i1 %v2_16424, label %bb33, label %bb32

bb32:                                             ; preds = %bb31
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_1642c = xor i1 %v2_16424, true
  call void @__pseudo_cond_branch(i1 %v1_1642c, i32 ptrtoint (i32* @global_var_13f98.16 to i32))
  %v0_16430.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_16430

dec_label_pc_16430:                               ; preds = %.thread21, %bb33
  %v0_16430 = phi i32 [ %v0_16430.pre, %bb33 ], [ %v3_16404, %.thread21 ]
  store i32 %v0_16430, i32* %r4.global-to-local, align 4
  %v2_16434 = icmp eq i32 %v0_16430, 0
  br i1 %v2_16434, label %dec_label_pc_16434.dec_label_pc_16440_crit_edge, label %dec_label_pc_163f8

dec_label_pc_16434.dec_label_pc_16440_crit_edge:  ; preds = %dec_label_pc_16430
  %v0_1644c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_16440

dec_label_pc_16440:                               ; preds = %dec_label_pc_16434.dec_label_pc_16440_crit_edge, %dec_label_pc_163b8
  %v0_1644c = phi i32 [ %v0_1644c.pre, %dec_label_pc_16434.dec_label_pc_16440_crit_edge ], [ %v0_163e4, %dec_label_pc_163b8 ]
  store i32 24, i32* %r3.global-to-local, align 4
  %v2_1644c = add i32 %v0_1644c, 24
  %v3_1644c = inttoptr i32 %v2_1644c to i32*
  %v4_1644c = load i32, i32* %v3_1644c, align 4
  call void @__pseudo_branch(i32 %v4_1644c)
  store i32 48, i32* %r3.global-to-local, align 4
  %v0_1645c = load i32, i32* %r6.global-to-local, align 4
  %v2_1645c = add i32 %v0_1645c, 48
  %v3_1645c = inttoptr i32 %v2_1645c to i32*
  %v4_1645c = load i32, i32* %v3_1645c, align 4
  store i32 %v4_1645c, i32* %r3.global-to-local, align 4
  %v0_16460 = load i32, i32* %r4.global-to-local, align 4
  %v2_16460 = inttoptr i32 %v4_1645c to i32*
  store i32 %v0_16460, i32* %v2_16460, align 4
  %v0_16468.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_16464

dec_label_pc_16464:                               ; preds = %dec_label_pc_16340, %dec_label_pc_163a4, %dec_label_pc_16440
  %v0_16468 = phi i32 [ %v0_16394, %dec_label_pc_16340 ], [ %v0_16394, %dec_label_pc_163a4 ], [ %v0_16468.pre, %dec_label_pc_16440 ]
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_16468 = add i32 %v0_16468, 12
  %v3_16468 = inttoptr i32 %v2_16468 to i32*
  %v4_16468 = load i32, i32* %v3_16468, align 4
  %v1_1646c = inttoptr i32 %v4_16468 to i32*
  %v2_1646c = load i32, i32* %v1_1646c, align 4
  %v1_16470 = add i32 %v2_1646c, -1
  store i32 %v1_16470, i32* %v1_1646c, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_16484 = load i32, i32* %r6.global-to-local, align 4
  %v2_16484 = add i32 %v0_16484, 24
  %v3_16484 = inttoptr i32 %v2_16484 to i32*
  %v4_16484 = load i32, i32* %v3_16484, align 4
  call void @__pseudo_branch(i32 %v4_16484)
  %v2_16494 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_16494, i32* %r4.global-to-local, align 4
  ret i32 %v2_16370

; uselistorder directives
  uselistorder i32 %v0_16430, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 3, 1, 4, 5, 6, 7, 8 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 20, 21, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* inttoptr (i32 131440 to i32*), { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_16464, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16430, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_163f8, { 1, 0 }
}

define i32 @function_164a0(i16* %arg1) local_unnamed_addr {
dec_label_pc_164a0:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v0_164a0 = load i1, i1* @cpsr_z, align 1
  %v2_164a0 = load i32, i32* @r4, align 4
  br i1 %v0_164a0, label %bb, label %dec_label_pc_164a0..thread8_crit_edge

dec_label_pc_164a0..thread8_crit_edge:            ; preds = %dec_label_pc_164a0
  %v0_164dc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread8

bb:                                               ; preds = %dec_label_pc_164a0
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_164a0..thread8_crit_edge, %bb
  %v0_1667c = phi i32 [ %v0_164dc.pre, %dec_label_pc_164a0..thread8_crit_edge ], [ 0, %bb ]
  store i32 %v2_164a0, i32* %stack_var_-36, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 131404, i32* %sb.global-to-local, align 4
  %v4_164d8 = load i32, i32* inttoptr (i32 131448 to i32*), align 8
  store i32 %v4_164d8, i32* %r3.global-to-local, align 4
  %v9_164dc = icmp eq i32 %v0_1667c, %v4_164d8
  store i32 %v0_1667c, i32* %fp.global-to-local, align 4
  br i1 %v9_164dc, label %bb49, label %dec_label_pc_164f4

bb49:                                             ; preds = %.thread8
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_16504

dec_label_pc_164f4:                               ; preds = %.thread8
  store i32 256, i32* %r2.global-to-local, align 4
  %v2_164f8 = icmp eq i32 %v0_1667c, 0
  br i1 %v2_164f8, label %dec_label_pc_16504, label %dec_label_pc_1666c

dec_label_pc_16504:                               ; preds = %bb49, %dec_label_pc_164f4
  %stack_var_-60.1.in = phi i32 [ 0, %bb49 ], [ 256, %dec_label_pc_164f4 ]
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_16518 = load i32, i32* inttoptr (i32 131512 to i32*), align 8
  store i32 %v4_16518, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_16520 = ptrtoint i32* %stack_var_-56 to i32
  %v4_16524 = load i32, i32* inttoptr (i32 131476 to i32*), align 4
  store i32 16, i32* %stack_var_-72, align 4
  store i32 %v2_16520, i32* %r0.global-to-local, align 4
  store i32 %v4_16518, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_16524)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_16544 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_16544, i32* %r0.global-to-local, align 4
  %v0_16548 = load i32, i32* %sb.global-to-local, align 4
  %v2_16548 = add i32 %v0_16548, 16
  %v3_16548 = inttoptr i32 %v2_16548 to i32*
  %v4_16548 = load i32, i32* %v3_16548, align 4
  call void @__pseudo_branch(i32 %v4_16548)
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_16558 = add i32 %v0_16548, 12
  %v3_16558 = inttoptr i32 %v2_16558 to i32*
  %v4_16558 = load i32, i32* %v3_16558, align 4
  store i32 %v4_16558, i32* %r2.global-to-local, align 4
  %v1_1655c = inttoptr i32 %v4_16558 to i32*
  %v2_1655c = load i32, i32* %v1_1655c, align 4
  store i32 24, i32* %sl.global-to-local, align 4
  %v1_16564 = add i32 %v2_1655c, 1
  store i32 %v1_16564, i32* %r3.global-to-local, align 4
  %v2_16568 = add i32 %v0_16548, 24
  %v3_16568 = inttoptr i32 %v2_16568 to i32*
  %v4_16568 = load i32, i32* %v3_16568, align 4
  store i32 %v1_16564, i32* %v1_1655c, align 4
  store i32 %v2_16520, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_16568)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_16584 = load i32, i32* %sb.global-to-local, align 4
  %v2_16584 = add i32 %v0_16584, 96
  %v3_16584 = inttoptr i32 %v2_16584 to i32*
  %v4_16584 = load i32, i32* %v3_16584, align 4
  store i32 %v4_16584, i32* @r4, align 4
  store i32 %v4_16584, i32* %r2.global-to-local, align 4
  store i32 %v2_16520, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_16524)
  %v0_1659c = load i32, i32* @r4, align 4
  store i32 %v0_1659c, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_16548)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_165ac = load i32, i32* %sb.global-to-local, align 4
  %v2_165ac = add i32 %v0_165ac, 44
  %v3_165ac = inttoptr i32 %v2_165ac to i32*
  %v4_165ac = load i32, i32* %v3_165ac, align 4
  store i32 %v4_165ac, i32* %r3.global-to-local, align 4
  store i32 %v2_16520, i32* %r0.global-to-local, align 4
  %v1_165b8 = inttoptr i32 %v4_165ac to i32*
  %v2_165b8 = load i32, i32* %v1_165b8, align 4
  store i32 %v2_165b8, i32* @r7, align 4
  call void @__pseudo_branch(i32 %v4_16568)
  %v0_165c4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_165c4, i32* @r6, align 4
  %v2_165c8 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_165c8, i32* @r8, align 4
  store i32 72, i32* %fp.global-to-local, align 4
  %v0_1665c.pr = load i32, i32* @r7, align 4
  %v2_1665c28 = icmp eq i32 %v0_1665c.pr, 0
  br i1 %v2_1665c28, label %dec_label_pc_16664, label %dec_label_pc_165d0

dec_label_pc_165d0:                               ; preds = %dec_label_pc_16504, %dec_label_pc_16658
  %v0_165dc = phi i32 [ %v3_16658, %dec_label_pc_16658 ], [ %v0_1665c.pr, %dec_label_pc_16504 ]
  %v1_165d0 = inttoptr i32 %v0_165dc to i16*
  %v2_165d0 = load i16, i16* %v1_165d0, align 2
  %v3_165d0 = zext i16 %v2_165d0 to i32
  store i32 %v3_165d0, i32* %r3.global-to-local, align 4
  %v1_165d4 = and i32 %v3_165d0, 64
  %v2_165d4 = icmp eq i32 %v1_165d4, 0
  br i1 %v2_165d4, label %dec_label_pc_16658, label %dec_label_pc_165dc

dec_label_pc_165dc:                               ; preds = %dec_label_pc_165d0
  %v1_165dc = add i32 %v0_165dc, 56
  store i32 %v1_165dc, i32* @r4, align 4
  store i32 %v1_165dc, i32* %r2.global-to-local, align 4
  store i32 %v2_16520, i32* %r0.global-to-local, align 4
  %v0_165ec = load i32, i32* %sb.global-to-local, align 4
  %v1_165ec = load i32, i32* %fp.global-to-local, align 4
  %v2_165ec = add i32 %v1_165ec, %v0_165ec
  %v3_165ec = inttoptr i32 %v2_165ec to i32*
  %v4_165ec = load i32, i32* %v3_165ec, align 4
  call void @__pseudo_branch(i32 %v4_165ec)
  %v0_165f8 = load i32, i32* @r4, align 4
  store i32 %v0_165f8, i32* %r0.global-to-local, align 4
  %v0_165fc = load i32, i32* %sb.global-to-local, align 4
  %v1_165fc = load i32, i32* @r8, align 4
  %v2_165fc = add i32 %v1_165fc, %v0_165fc
  %v3_165fc = inttoptr i32 %v2_165fc to i32*
  %v4_165fc = load i32, i32* %v3_165fc, align 4
  call void @__pseudo_branch(i32 %v4_165fc)
  %v0_16608 = load i32, i32* @r7, align 4
  %v1_16608 = inttoptr i32 %v0_16608 to i16*
  %v2_16608 = load i16, i16* %v1_16608, align 2
  %v3_16608 = zext i16 %v2_16608 to i32
  store i32 %stack_var_-60.1.in, i32* %r2.global-to-local, align 4
  %v2_16610 = or i32 %v3_16608, %stack_var_-60.1.in
  %v1_16614 = xor i32 %v2_16610, 320
  store i32 %v1_16614, i32* %r3.global-to-local, align 4
  %v1_16618 = and i32 %v1_16614, 832
  %v2_16618 = icmp eq i32 %v1_16618, 0
  br i1 %v2_16618, label %dec_label_pc_16620, label %bb50

dec_label_pc_16620:                               ; preds = %dec_label_pc_165dc
  store i32 %v0_16608, i32* %r0.global-to-local, align 4
  %v1_16624 = call i32 @function_16178(i32 %v0_16608)
  store i32 %v1_16624, i32* %r0.global-to-local, align 4
  %v2_16628 = icmp eq i32 %v1_16624, 0
  br i1 %v2_16628, label %.thread16, label %.thread17

.thread16:                                        ; preds = %dec_label_pc_16620
  %v1_1662c = load i32, i32* @r7, align 4
  %v2_1662c = inttoptr i32 %v1_1662c to i16*
  %v3_1662c = load i16, i16* %v2_1662c, align 2
  %v4_1662c = zext i16 %v3_1662c to i32
  store i32 %v4_1662c, i32* %r3.global-to-local, align 4
  %v2_16630 = add i32 %v1_1662c, 8
  %v3_16630 = inttoptr i32 %v2_16630 to i32*
  %v4_16630 = load i32, i32* %v3_16630, align 4
  store i32 %v4_16630, i32* %r2.global-to-local, align 4
  %v2_16634 = and i32 %v4_1662c, 65471
  store i32 %v2_16634, i32* %r3.global-to-local, align 4
  %v3_16638 = add i32 %v1_1662c, 28
  %v4_16638 = inttoptr i32 %v3_16638 to i32*
  store i32 %v4_16630, i32* %v4_16638, align 4
  %v1_1663c = load i32, i32* %r3.global-to-local, align 4
  %v2_1663c = trunc i32 %v1_1663c to i16
  %v3_1663c = load i32, i32* @r7, align 4
  %v4_1663c = inttoptr i32 %v3_1663c to i16*
  store i16 %v2_1663c, i16* %v4_1663c, align 2
  br label %bb50

.thread17:                                        ; preds = %dec_label_pc_16620
  store i32 -1, i32* @r6, align 4
  br label %bb50

bb50:                                             ; preds = %.thread16, %dec_label_pc_165dc, %.thread17
  store i32 %v2_16520, i32* %r0.global-to-local, align 4
  %v0_1664c = load i32, i32* %sb.global-to-local, align 4
  %v1_1664c = load i32, i32* %sl.global-to-local, align 4
  %v2_1664c = add i32 %v1_1664c, %v0_1664c
  %v3_1664c = inttoptr i32 %v2_1664c to i32*
  %v4_1664c = load i32, i32* %v3_1664c, align 4
  call void @__pseudo_branch(i32 %v4_1664c)
  %v0_16658.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16658

dec_label_pc_16658:                               ; preds = %dec_label_pc_165d0, %bb50
  %v0_16658 = phi i32 [ %v0_165dc, %dec_label_pc_165d0 ], [ %v0_16658.pre, %bb50 ]
  %v1_16658 = add i32 %v0_16658, 32
  %v2_16658 = inttoptr i32 %v1_16658 to i32*
  %v3_16658 = load i32, i32* %v2_16658, align 4
  store i32 %v3_16658, i32* @r7, align 4
  %v2_1665c = icmp eq i32 %v3_16658, 0
  br i1 %v2_1665c, label %dec_label_pc_16664, label %dec_label_pc_165d0

dec_label_pc_16664:                               ; preds = %dec_label_pc_16658, %dec_label_pc_16504
  %v0_16664 = call i32 @function_16340()
  store i32 %v0_16664, i32* %r0.global-to-local, align 4
  %v0_166a0.pre = load i32, i32* @r6, align 4
  br label %bb52

dec_label_pc_1666c:                               ; preds = %dec_label_pc_164f4
  %v1_1666c = inttoptr i32 %v0_1667c to i16*
  %v2_1666c = load i16, i16* %v1_1666c, align 2
  %v3_1666c = zext i16 %v2_1666c to i32
  %v1_16670 = and i32 %v3_1666c, 64
  store i32 %v1_16670, i32* %r3.global-to-local, align 4
  %v2_16670 = icmp eq i32 %v1_16670, 0
  br i1 %v2_16670, label %bb51, label %dec_label_pc_1667c

bb51:                                             ; preds = %dec_label_pc_1666c
  br label %bb52

dec_label_pc_1667c:                               ; preds = %dec_label_pc_1666c
  %v1_1667c = call i32 @function_16178(i32 %v0_1667c)
  store i32 %v1_1667c, i32* %r0.global-to-local, align 4
  %v2_16680 = icmp eq i32 %v1_1667c, 0
  br i1 %v2_16680, label %.thread24, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_1667c
  br label %bb52

.thread24:                                        ; preds = %dec_label_pc_1667c
  %v1_16684 = load i32, i32* %fp.global-to-local, align 4
  %v2_16684 = inttoptr i32 %v1_16684 to i16*
  %v3_16684 = load i16, i16* %v2_16684, align 2
  %v4_16684 = zext i16 %v3_16684 to i32
  store i32 %v4_16684, i32* %r3.global-to-local, align 4
  %v2_16688 = add i32 %v1_16684, 8
  %v3_16688 = inttoptr i32 %v2_16688 to i32*
  %v4_16688 = load i32, i32* %v3_16688, align 4
  store i32 %v4_16688, i32* %r2.global-to-local, align 4
  %v2_1668c = and i32 %v4_16684, 65471
  store i32 %v2_1668c, i32* %r3.global-to-local, align 4
  %v2_16690 = trunc i32 %v2_1668c to i16
  store i16 %v2_16690, i16* %v2_16684, align 2
  %v1_16694 = load i32, i32* %r2.global-to-local, align 4
  %v2_16694 = load i32, i32* %fp.global-to-local, align 4
  %v3_16694 = add i32 %v2_16694, 28
  %v4_16694 = inttoptr i32 %v3_16694 to i32*
  store i32 %v1_16694, i32* %v4_16694, align 4
  br label %bb52

bb52:                                             ; preds = %bb51, %.thread26, %dec_label_pc_16664, %.thread24
  %v0_166a0 = phi i32 [ -1, %.thread26 ], [ 0, %bb51 ], [ %v0_166a0.pre, %dec_label_pc_16664 ], [ 0, %.thread24 ]
  store i32 %v0_166a0, i32* %r0.global-to-local, align 4
  %v2_166a8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_166a8, i32* %r4.global-to-local, align 4
  ret i32 %v0_166a0

; uselistorder directives
  uselistorder i32 %v0_166a0, { 1, 0 }
  uselistorder i32 %v3_16658, { 1, 2, 0 }
  uselistorder i32 %v0_16608, { 1, 0, 2 }
  uselistorder i32 %v0_16548, { 1, 0, 2 }
  uselistorder i32 %v0_1667c, { 2, 1, 0, 3, 4 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 6, 5, 16, 7, 9, 8, 10, 12, 11, 13, 14, 15, 2, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 3, 4, 0, 1, 5, 2, 6 }
  uselistorder i32 ()* @function_16340, { 1, 0 }
  uselistorder i32 56, { 11, 12, 13, 1, 2, 14, 16, 7, 8, 9, 10, 0, 3, 15, 17, 4, 18, 5, 19, 6, 20 }
  uselistorder i32* @r8, { 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 139, 140, 2, 141, 142, 143, 171, 172, 173, 174, 175, 4, 176, 177, 178, 179, 180, 181, 182, 183, 63, 64, 65, 66, 67, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 77, 78, 79, 81, 82, 83, 84, 85, 87, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 0, 134, 131, 132, 133, 135, 136, 137, 138, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 3, 204, 205, 206, 207, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 165, 166, 167, 5, 169, 170 }
  uselistorder i32* inttoptr (i32 131476 to i32*), { 0, 1, 2, 3, 4, 5, 6, 9, 7, 8 }
  uselistorder i32 72, { 0, 1, 2, 3, 4, 5, 15, 11, 12, 13, 14, 6, 16, 7, 8, 9, 10 }
  uselistorder label %bb52, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_16658, { 1, 0 }
  uselistorder label %bb50, { 2, 0, 1 }
  uselistorder label %dec_label_pc_165d0, { 1, 0 }
  uselistorder label %dec_label_pc_16504, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
}

define i32 @function_166b4(i32 %arg1) local_unnamed_addr {
dec_label_pc_166b4:
  %v0_166b4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_166b4, label %bb, label %.thread6

bb:                                               ; preds = %dec_label_pc_166b4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_166b4, %bb
  %v5_166d0 = phi i32 [ %arg1, %dec_label_pc_166b4 ], [ 0, %bb ]
  ret i32 %v5_166d0

; uselistorder directives
  uselistorder label %.thread6, { 1, 0 }
}

define i32 @function_166d4(i16* %arg1) local_unnamed_addr {
dec_label_pc_166d4:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_166d4 = load i32, i32* @r4, align 4
  store i32 %v3_166d4, i32* %stack_var_-12, align 4
  %v6_166d4 = load i32, i32* @r5, align 4
  %v9_166d4 = load i32, i32* @lr, align 4
  %v0_166d8 = load i32, i32* @r0, align 4
  %v1_166d8 = add i32 %v0_166d8, 16
  %v2_166d8 = inttoptr i32 %v1_166d8 to i32*
  %v3_166d8 = load i32, i32* %v2_166d8, align 4
  store i32 %v3_166d8, i32* %r2.global-to-local, align 4
  %v1_166dc = add i32 %v0_166d8, 24
  %v2_166dc = inttoptr i32 %v1_166dc to i32*
  %v3_166dc = load i32, i32* %v2_166dc, align 4
  %v3_166e0 = icmp ult i32 %v3_166d8, %v3_166dc
  store i32 %v0_166d8, i32* @r4, align 4
  br i1 %v3_166e0, label %bb, label %dec_label_pc_16700

bb:                                               ; preds = %dec_label_pc_166d4
  %v2_166ec = inttoptr i32 %v3_166d8 to i8*
  %v3_166ec = load i8, i8* %v2_166ec, align 1
  %v4_166ec = zext i8 %v3_166ec to i32
  store i32 %v4_166ec, i32* %r0.global-to-local, align 4
  %v6_166ec = add i32 %v3_166d8, 1
  store i32 %v6_166ec, i32* %r2.global-to-local, align 4
  store i32 %v6_166ec, i32* %v2_166d8, align 4
  br label %dec_label_pc_167ec

dec_label_pc_16700:                               ; preds = %dec_label_pc_166d4
  store i32 131404, i32* @r5, align 4
  %v1_16700 = inttoptr i32 %v0_166d8 to i16*
  %v2_16700 = load i16, i16* %v1_16700, align 2
  %v3_16700 = zext i16 %v2_16700 to i32
  %v1_16704 = and i32 %v3_16700, 131
  %tmp24 = icmp ugt i32 %v1_16704, 128
  br i1 %tmp24, label %dec_label_pc_16720, label %dec_label_pc_16710

dec_label_pc_16710:                               ; preds = %dec_label_pc_16700
  store i32 128, i32* @r1, align 4
  %v0_16714 = call i32 @function_1753c()
  store i32 %v0_16714, i32* %r0.global-to-local, align 4
  %v2_16718 = icmp eq i32 %v0_16714, 0
  br i1 %v2_16718, label %dec_label_pc_16710.dec_label_pc_16720_crit_edge, label %dec_label_pc_167e8

dec_label_pc_16710.dec_label_pc_16720_crit_edge:  ; preds = %dec_label_pc_16710
  %v0_16720.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_16720

dec_label_pc_16720:                               ; preds = %dec_label_pc_16710.dec_label_pc_16720_crit_edge, %dec_label_pc_16700
  %v2_16760 = phi i32 [ %v0_16720.pre, %dec_label_pc_16710.dec_label_pc_16720_crit_edge ], [ %v0_166d8, %dec_label_pc_16700 ]
  %v1_16720 = inttoptr i32 %v2_16760 to i16*
  %v2_16720 = load i16, i16* %v1_16720, align 2
  %v3_16720 = zext i16 %v2_16720 to i32
  store i32 %v3_16720, i32* %r2.global-to-local, align 4
  %v1_16724 = and i32 %v3_16720, 2
  %v2_16724 = icmp eq i32 %v1_16724, 0
  br i1 %v2_16724, label %dec_label_pc_16750, label %dec_label_pc_1672c

dec_label_pc_1672c:                               ; preds = %dec_label_pc_16720
  %tmp25 = urem i16 %v2_16720, 2
  %v1_1672c = zext i16 %tmp25 to i32
  %tmp21 = sub nsw i32 0, %v1_1672c
  %v4_16730 = and i32 %tmp21, 4
  %v5_16730 = add i32 %v4_16730, %v2_16760
  %v1_16734 = add i32 %v5_16730, 36
  %v2_16734 = inttoptr i32 %v1_16734 to i8*
  %v3_16734 = load i8, i8* %v2_16734, align 1
  %v4_16734 = zext i8 %v3_16734 to i32
  %v1_16738 = add nsw i32 %v3_16720, -1
  store i32 %v1_16738, i32* %r2.global-to-local, align 4
  store i32 %v4_16734, i32* %r0.global-to-local, align 4
  %v2_16744 = add i32 %v2_16760, 40
  %v3_16744 = inttoptr i32 %v2_16744 to i32*
  store i32 0, i32* %v3_16744, align 4
  %v0_16748 = load i32, i32* %r2.global-to-local, align 4
  %v1_16748 = trunc i32 %v0_16748 to i16
  %v2_16748 = load i32, i32* @r4, align 4
  %v3_16748 = inttoptr i32 %v2_16748 to i16*
  store i16 %v1_16748, i16* %v3_16748, align 2
  br label %dec_label_pc_167ec

dec_label_pc_16750:                               ; preds = %dec_label_pc_16720
  %v1_16750 = add i32 %v2_16760, 16
  %v1_16754 = inttoptr i32 %v1_16750 to i32*
  %v2_16754 = load i32, i32* %v1_16754, align 4
  %v3_16754 = add i32 %v2_16760, 20
  %v4_16754 = inttoptr i32 %v3_16754 to i32*
  %v5_16754 = load i32, i32* %v4_16754, align 4
  %v9_16758 = icmp eq i32 %v5_16754, %v2_16754
  br i1 %v9_16758, label %dec_label_pc_16768, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_16750
  %v2_1675c = inttoptr i32 %v2_16754 to i8*
  %v3_1675c = load i8, i8* %v2_1675c, align 1
  %v4_1675c = zext i8 %v3_1675c to i32
  store i32 %v4_1675c, i32* %r0.global-to-local, align 4
  %v6_1675c = add i32 %v2_16754, 1
  store i32 %v6_1675c, i32* %v1_16754, align 4
  br label %dec_label_pc_167ec

dec_label_pc_16768:                               ; preds = %dec_label_pc_16750
  %v1_16768 = add i32 %v2_16760, 4
  %v2_16768 = inttoptr i32 %v1_16768 to i32*
  %v3_16768 = load i32, i32* %v2_16768, align 4
  %v7_1676c = icmp eq i32 %v3_16768, -2
  br i1 %v7_1676c, label %.thread8, label %dec_label_pc_16780

.thread8:                                         ; preds = %dec_label_pc_16768
  %v2_16770 = or i16 %v2_16720, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_16770, i16* %v1_16720, align 2
  br label %dec_label_pc_167ec

dec_label_pc_16780:                               ; preds = %dec_label_pc_16768
  %v1_16780 = and i32 %v3_16720, 768
  %v2_16780 = icmp eq i32 %v1_16780, 0
  br i1 %v2_16780, label %.thread10, label %bb22

bb22:                                             ; preds = %dec_label_pc_16780
  %v1_16788 = load i32, i32* @r5, align 4
  %v3_16788 = add i32 %v1_16788, 44
  %v4_16788 = inttoptr i32 %v3_16788 to i32*
  %v5_16788 = load i32, i32* %v4_16788, align 4
  store i32 %v5_16788, i32* %r0.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_16780, %bb22
  %v1_1678c = xor i1 %v2_16780, true
  call void @__pseudo_cond_branch(i1 %v1_1678c, i32 ptrtoint (i32* @global_var_164c8.629 to i32))
  %v0_16790 = load i32, i32* @r4, align 4
  %v1_16790 = add i32 %v0_16790, 8
  store i32 %v1_16790, i32* %r2.global-to-local, align 4
  %v1_16794 = inttoptr i32 %v1_16790 to i32*
  %v2_16794 = load i32, i32* %v1_16794, align 4
  store i32 %v2_16794, i32* %r2.global-to-local, align 4
  %v3_16794 = add i32 %v0_16790, 12
  %v4_16794 = inttoptr i32 %v3_16794 to i32*
  %v5_16794 = load i32, i32* %v4_16794, align 4
  %v9_16798 = icmp eq i32 %v5_16794, %v2_16794
  br i1 %v9_16798, label %dec_label_pc_167cc, label %dec_label_pc_167a0

dec_label_pc_167a0:                               ; preds = %.thread10
  %v2_167a0 = add i32 %v0_16790, 24
  %v3_167a0 = inttoptr i32 %v2_167a0 to i32*
  store i32 %v2_16794, i32* %v3_167a0, align 4
  %v0_167a4 = load i32, i32* @r4, align 4
  store i32 %v0_167a4, i32* %r0.global-to-local, align 4
  %v2_167a8 = call i32 @function_1750c(i32 %v0_167a4)
  store i32 %v2_167a8, i32* %r0.global-to-local, align 4
  %v2_167ac = icmp eq i32 %v2_167a8, 0
  br i1 %v2_167ac, label %dec_label_pc_167e8, label %dec_label_pc_167b4

dec_label_pc_167b4:                               ; preds = %dec_label_pc_167a0
  %v0_167b4 = load i32, i32* @r4, align 4
  %v1_167b4 = add i32 %v0_167b4, 20
  %v2_167b4 = inttoptr i32 %v1_167b4 to i32*
  %v3_167b4 = load i32, i32* %v2_167b4, align 4
  %v2_167b8 = add i32 %v0_167b4, 24
  %v3_167b8 = inttoptr i32 %v2_167b8 to i32*
  store i32 %v3_167b4, i32* %v3_167b8, align 4
  %v0_167bc = load i32, i32* @r4, align 4
  %v1_167bc = add i32 %v0_167bc, 16
  %v2_167bc = inttoptr i32 %v1_167bc to i32*
  %v3_167bc = load i32, i32* %v2_167bc, align 4
  %v1_167c0 = inttoptr i32 %v3_167bc to i8*
  %v2_167c0 = load i8, i8* %v1_167c0, align 1
  %v3_167c0 = zext i8 %v2_167c0 to i32
  store i32 %v3_167c0, i32* %r0.global-to-local, align 4
  %v5_167c0 = add i32 %v3_167bc, 1
  store i32 %v5_167c0, i32* %v2_167bc, align 4
  br label %dec_label_pc_167ec

dec_label_pc_167cc:                               ; preds = %.thread10
  %v1_167cc = inttoptr i32 %v0_16790 to i16*
  store i32 %v0_16790, i32* %r0.global-to-local, align 4
  %v2_167d0 = ptrtoint i8* %stack_var_-17 to i32
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_167d8 = call i32 @function_17400(i16* %v1_167cc, i32 %v2_167d0, i32 1)
  store i32 %v5_167d8, i32* %r0.global-to-local, align 4
  %v2_167dc = icmp eq i32 %v5_167d8, 0
  br i1 %v2_167dc, label %dec_label_pc_167e8, label %bb23

bb23:                                             ; preds = %dec_label_pc_167cc
  %v4_167e0 = load i8, i8* %stack_var_-17, align 1
  %v5_167e0 = sext i8 %v4_167e0 to i32
  store i32 %v5_167e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_167ec

dec_label_pc_167e8:                               ; preds = %dec_label_pc_167cc, %dec_label_pc_16710, %dec_label_pc_167a0
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_167ec

dec_label_pc_167ec:                               ; preds = %bb, %.thread8, %bb23, %.thread5, %dec_label_pc_167b4, %dec_label_pc_1672c, %dec_label_pc_167e8
  %v2_167f0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_167f0, i32* @r4, align 4
  store i32 %v6_166d4, i32* @r5, align 4
  store i32 %v9_166d4, i32* @lr, align 4
  %v1_167f4 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_167f4

; uselistorder directives
  uselistorder i32 %v2_16754, { 1, 0, 2 }
  uselistorder i32 %v2_16760, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_166d8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_166d8, { 1, 0, 2, 3, 4 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 11, 1, 0, 4, 3, 2, 10, 5, 6, 7, 8, 9, 13, 12 }
  uselistorder i32 768, { 1, 0, 2 }
  uselistorder i32 128, { 17, 0, 14, 13, 18, 2, 19, 20, 21, 10, 11, 22, 23, 15, 12, 4, 5, 6, 7, 8, 9, 24, 3, 25, 16, 1 }
  uselistorder label %dec_label_pc_167ec, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_167e8, { 0, 2, 1 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_16800(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_16800:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v6_16800 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_16804 = icmp eq i32 %arg2, 0
  store i1 %v2_16804, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_1688c, label %dec_label_pc_16874.preheader

dec_label_pc_16874.preheader:                     ; preds = %dec_label_pc_16800
  store i32 %tmp, i32* @r5, align 4
  %v1_168742 = add i32 %arg2, -1
  store i32 %v1_168742, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_168748 = icmp eq i32 %arg2, 1
  store i1 %v7_168748, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_168748, label %dec_label_pc_1687c, label %dec_label_pc_16820

dec_label_pc_16820:                               ; preds = %dec_label_pc_16874.preheader, %dec_label_pc_16874.backedge.dec_label_pc_16820_crit_edge
  %v0_16844 = phi i32 [ %v0_16820.pre, %dec_label_pc_16874.backedge.dec_label_pc_16820_crit_edge ], [ %arg3, %dec_label_pc_16874.preheader ]
  %v1_16820 = add i32 %v0_16844, 16
  %v2_16820 = inttoptr i32 %v1_16820 to i32*
  %v3_16820 = load i32, i32* %v2_16820, align 4
  store i32 %v3_16820, i32* %r2.global-to-local, align 4
  %v1_16824 = add i32 %v0_16844, 24
  %v2_16824 = inttoptr i32 %v1_16824 to i32*
  %v3_16824 = load i32, i32* %v2_16824, align 4
  store i32 %v3_16824, i32* %r3.global-to-local, align 4
  %v3_16828 = icmp uge i32 %v3_16820, %v3_16824
  store i1 %v3_16828, i1* %cpsr_c.global-to-local, align 1
  %v9_16828 = icmp eq i32 %v3_16820, %v3_16824
  store i1 %v9_16828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_16828, label %dec_label_pc_16844, label %dec_label_pc_16830

dec_label_pc_16830:                               ; preds = %dec_label_pc_16820
  %v1_16830 = inttoptr i32 %v3_16820 to i8*
  %v2_16830 = load i8, i8* %v1_16830, align 1
  %v3_16830 = zext i8 %v2_16830 to i32
  store i32 %v3_16830, i32* %r3.global-to-local, align 4
  %v5_16830 = add i32 %v3_16820, 1
  store i32 %v5_16830, i32* %r2.global-to-local, align 4
  %v2_16834 = load i32, i32* @r5, align 4
  %v3_16834 = inttoptr i32 %v2_16834 to i8*
  store i8 %v2_16830, i8* %v3_16834, align 1
  %v4_16834 = load i32, i32* @r5, align 4
  %v5_16834 = add i32 %v4_16834, 1
  store i32 %v5_16834, i32* @r5, align 4
  %v0_16838 = load i32, i32* %r3.global-to-local, align 4
  %v2_16838 = icmp ugt i32 %v0_16838, 9
  store i1 %v2_16838, i1* %cpsr_c.global-to-local, align 1
  %v7_16838 = icmp eq i32 %v0_16838, 10
  store i1 %v7_16838, i1* %cpsr_z.global-to-local, align 1
  %v0_1683c = load i32, i32* %r2.global-to-local, align 4
  %v1_1683c = load i32, i32* @r4, align 4
  %v2_1683c = add i32 %v1_1683c, 16
  %v3_1683c = inttoptr i32 %v2_1683c to i32*
  store i32 %v0_1683c, i32* %v3_1683c, align 4
  br i1 %v7_16838, label %dec_label_pc_1687c, label %dec_label_pc_16874.backedge

dec_label_pc_16844:                               ; preds = %dec_label_pc_16820
  %v1_16844 = inttoptr i32 %v0_16844 to i16*
  %v3_16848 = call i32 @function_166d4(i16* %v1_16844)
  %v3_1684c = icmp eq i32 %v3_16848, -1
  store i1 %v3_1684c, i1* %cpsr_c.global-to-local, align 1
  %v8_1684c = icmp eq i32 %v3_16848, -1
  store i1 %v8_1684c, i1* %cpsr_z.global-to-local, align 1
  %v1_16850 = urem i32 %v3_16848, 256
  store i32 %v1_16850, i32* %r3.global-to-local, align 4
  br i1 %v3_1684c, label %dec_label_pc_16858, label %dec_label_pc_16870

dec_label_pc_16858:                               ; preds = %dec_label_pc_16844
  %v0_16858 = load i32, i32* @r4, align 4
  %v1_16858 = inttoptr i32 %v0_16858 to i16*
  %v2_16858 = load i16, i16* %v1_16858, align 2
  %v3_16858 = zext i16 %v2_16858 to i32
  store i32 %v3_16858, i32* %r3.global-to-local, align 4
  %v1_1685c = and i32 %v3_16858, 8
  %v2_1685c = icmp eq i32 %v1_1685c, 0
  store i1 %v2_1685c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1685c, label %dec_label_pc_1687c, label %dec_label_pc_1688c

dec_label_pc_16870:                               ; preds = %dec_label_pc_16844
  %v1_16868 = trunc i32 %v3_16848 to i8
  %v2_16868 = load i32, i32* @r5, align 4
  %v3_16868 = inttoptr i32 %v2_16868 to i8*
  store i8 %v1_16868, i8* %v3_16868, align 1
  %v4_16868 = load i32, i32* @r5, align 4
  %v5_16868 = add i32 %v4_16868, 1
  store i32 %v5_16868, i32* @r5, align 4
  %v0_1686c = load i32, i32* %r3.global-to-local, align 4
  %v2_1686c = icmp ugt i32 %v0_1686c, 9
  store i1 %v2_1686c, i1* %cpsr_c.global-to-local, align 1
  %v7_1686c = icmp eq i32 %v0_1686c, 10
  store i1 %v7_1686c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1686c, label %dec_label_pc_1687c, label %dec_label_pc_16874.backedge

dec_label_pc_16874.backedge:                      ; preds = %dec_label_pc_16870, %dec_label_pc_16830
  %v0_16874 = load i32, i32* %r6.global-to-local, align 4
  %v1_16874 = add i32 %v0_16874, -1
  store i32 %v1_16874, i32* %r6.global-to-local, align 4
  %v2_16874 = icmp ne i32 %v0_16874, 0
  store i1 %v2_16874, i1* %cpsr_c.global-to-local, align 1
  %v7_16874 = icmp eq i32 %v0_16874, 1
  store i1 %v7_16874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16874, label %dec_label_pc_1687c, label %dec_label_pc_16874.backedge.dec_label_pc_16820_crit_edge

dec_label_pc_16874.backedge.dec_label_pc_16820_crit_edge: ; preds = %dec_label_pc_16874.backedge
  %v0_16820.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_16820

dec_label_pc_1687c:                               ; preds = %dec_label_pc_16870, %dec_label_pc_16874.backedge, %dec_label_pc_16830, %dec_label_pc_16874.preheader, %dec_label_pc_16858
  %v0_1687c = load i32, i32* @r5, align 4
  %v1_1687c = load i32, i32* @r7, align 4
  %v3_1687c = icmp uge i32 %v0_1687c, %v1_1687c
  store i1 %v3_1687c, i1* %cpsr_c.global-to-local, align 1
  %v9_1687c = icmp eq i32 %v0_1687c, %v1_1687c
  store i1 %v9_1687c, i1* %cpsr_z.global-to-local, align 1
  %v2_16880 = xor i1 %v9_1687c, true
  %v3_16880 = and i1 %v3_1687c, %v2_16880
  br i1 %v3_16880, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_1687c
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_16884 = inttoptr i32 %v0_1687c to i8*
  store i8 0, i8* %v7_16884, align 1
  %v0_16888.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_16888.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_1687c, %bb
  %v1_16888 = phi i1 [ %v1_16888.pre, %bb ], [ %v9_1687c, %dec_label_pc_1687c ]
  %v0_16888 = phi i1 [ %v0_16888.pre, %bb ], [ %v3_1687c, %dec_label_pc_1687c ]
  %v2_16888 = xor i1 %v1_16888, true
  %v3_16888 = and i1 %v0_16888, %v2_16888
  br i1 %v3_16888, label %.dec_label_pc_16890_crit_edge, label %dec_label_pc_1688c

.dec_label_pc_16890_crit_edge:                    ; preds = %.thread14
  %v0_16890.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16890

dec_label_pc_1688c:                               ; preds = %dec_label_pc_16800, %dec_label_pc_16858, %.thread14
  br label %dec_label_pc_16890

dec_label_pc_16890:                               ; preds = %.dec_label_pc_16890_crit_edge, %dec_label_pc_1688c
  %v0_16890 = phi i32 [ %v0_16890.pre, %.dec_label_pc_16890_crit_edge ], [ 0, %dec_label_pc_1688c ]
  store i32 %v6_16800, i32* @r5, align 4
  ret i32 %v0_16890

; uselistorder directives
  uselistorder i1 %v9_1687c, { 1, 0, 2 }
  uselistorder i32 %v1_1687c, { 1, 0 }
  uselistorder i32 %v0_1687c, { 0, 2, 1 }
  uselistorder i32 %v0_16874, { 2, 0, 1 }
  uselistorder i32 %v0_1686c, { 1, 0 }
  uselistorder i32 %v3_16848, { 2, 1, 0, 3 }
  uselistorder i32 %v0_16838, { 1, 0 }
  uselistorder i32 %v3_16820, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_16844, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 7, 2, 3, 4, 5, 6, 9, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 8, 7 }
  uselistorder i1 true, { 0, 1, 82, 112, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 79, 29, 30, 31, 32, 33, 89, 88, 34, 131, 75, 80, 86, 113, 87, 122, 114, 103, 115, 116, 35, 117, 36, 37, 118, 119, 81, 120, 121, 77, 123, 124, 125, 126, 127, 128, 38, 39, 129, 130, 102, 101, 50, 51, 52, 132, 53, 54, 90, 91, 96, 92, 97, 84, 95, 133, 85, 100, 134, 40, 135, 41, 42, 43, 136, 104, 105, 44, 45, 137, 106, 107, 46, 47, 138, 108, 109, 48, 49, 83, 139, 140, 98, 141, 55, 76, 56, 57, 58, 59, 60, 61, 62, 142, 143, 144, 145, 93, 146, 147, 148, 149, 150, 151, 152, 67, 68, 153, 69, 70, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 66, 169, 170, 171, 172, 173, 174, 65, 175, 78, 94, 99, 71, 176, 63, 64, 111, 177, 72, 73, 74, 110 }
  uselistorder i32 %arg2, { 2, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_16890, { 1, 0 }
  uselistorder label %dec_label_pc_1688c, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_1687c, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_16820, { 1, 0 }
}

define i32 @function_168a0() local_unnamed_addr {
dec_label_pc_168a0:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_168a0 = load i32, i32* @r1, align 4
  %v1_168a0 = load i32, i32* @r0, align 4
  %v2_168a0 = sub i32 %v0_168a0, %v1_168a0
  %v3_168a0 = icmp ult i32 %v0_168a0, %v1_168a0
  %v4_168a0 = xor i32 %v1_168a0, %v0_168a0
  %v5_168a0 = xor i32 %v2_168a0, %v0_168a0
  %v6_168a0 = and i32 %v5_168a0, %v4_168a0
  %v7_168a0 = icmp slt i32 %v6_168a0, 0
  store i1 %v7_168a0, i1* %cpsr_v.global-to-local, align 1
  %v8_168a0 = icmp slt i32 %v2_168a0, 0
  store i1 %v8_168a0, i1* %cpsr_n.global-to-local, align 1
  %v9_168a0 = icmp eq i32 %v0_168a0, %v1_168a0
  store i1 %v9_168a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_168a0, label %dec_label_pc_16af4, label %dec_label_pc_168a8

dec_label_pc_168a8:                               ; preds = %dec_label_pc_168a0
  br i1 %v9_168a0, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_168a8
  %merge = phi i32 [ %v0_168a0, %dec_label_pc_168a8 ], [ %v2_16b88, %bb150 ], [ %v11_16ba4, %bb153 ], [ %v7_16ba4, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_168a8
  %v5_168ac = inttoptr i32 %v1_168a0 to i8*
  store i8* %v5_168ac, i8** %stack_var_-8, align 4
  %v8_168ac = load i32, i32* @lr, align 4
  %v0_168b0 = load i32, i32* @r2, align 4
  %v2_168b0 = add i32 %v0_168b0, -4
  store i32 %v2_168b0, i32* %r2.global-to-local, align 4
  %v4_168b0 = sub i32 3, %v0_168b0
  %v5_168b0 = and i32 %v4_168b0, %v0_168b0
  %v6_168b0 = icmp slt i32 %v5_168b0, 0
  store i1 %v6_168b0, i1* %cpsr_v.global-to-local, align 1
  %v7_168b0 = icmp slt i32 %v2_168b0, 0
  store i1 %v7_168b0, i1* %cpsr_n.global-to-local, align 1
  %v8_168b0 = icmp eq i32 %v0_168b0, 4
  store i1 %v8_168b0, i1* %cpsr_z.global-to-local, align 1
  %v5_168b4 = icmp slt i32 %v0_168b0, 4
  br i1 %v5_168b4, label %bb140, label %dec_label_pc_168b8

dec_label_pc_168b8:                               ; preds = %bb
  %v1_168b8 = urem i32 %v1_168a0, 4
  store i32 %v1_168b8, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_168b8 = icmp eq i32 %v1_168b8, 0
  store i1 %v2_168b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_168b8, label %dec_label_pc_168c0, label %dec_label_pc_1696c

dec_label_pc_168c0:                               ; preds = %dec_label_pc_168b8
  %v1_168c0 = urem i32 %v0_168a0, 4
  store i32 %v1_168c0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_168c0 = icmp eq i32 %v1_168c0, 0
  store i1 %v2_168c0, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_168a0 to i2
  br i1 %v2_168c0, label %dec_label_pc_168c8, label %dec_label_pc_1699c

dec_label_pc_168c8:                               ; preds = %dec_label_pc_168c0, %dec_label_pc_16994
  %v0_168e094 = phi i32 [ %v1_168a0, %dec_label_pc_168c0 ], [ %v0_16abc77, %dec_label_pc_16994 ]
  %v0_168dc93 = phi i32 [ %v0_168a0, %dec_label_pc_168c0 ], [ %v0_16994, %dec_label_pc_16994 ]
  %v0_168c8 = phi i32 [ %v2_168b0, %dec_label_pc_168c0 ], [ %v2_1698c, %dec_label_pc_16994 ]
  %v1_168c8 = add i32 %v0_168c8, -8
  store i32 %v1_168c8, i32* %r2.global-to-local, align 4
  %v3_168c8 = sub i32 7, %v0_168c8
  %v4_168c8 = and i32 %v3_168c8, %v0_168c8
  %v5_168c8 = icmp slt i32 %v4_168c8, 0
  store i1 %v5_168c8, i1* %cpsr_v.global-to-local, align 1
  %v6_168c8 = icmp slt i32 %v1_168c8, 0
  store i1 %v6_168c8, i1* %cpsr_n.global-to-local, align 1
  %v7_168c8 = icmp eq i32 %v0_168c8, 8
  store i1 %v7_168c8, i1* %cpsr_z.global-to-local, align 1
  %v2_168cc = xor i1 %v6_168c8, %v5_168c8
  br i1 %v2_168cc, label %dec_label_pc_1691c, label %dec_label_pc_168d0

dec_label_pc_168d0:                               ; preds = %dec_label_pc_168c8
  %v1_168d0 = add i32 %v0_168c8, -28
  store i32 %v1_168d0, i32* %r2.global-to-local, align 4
  %v3_168d0 = sub i32 27, %v0_168c8
  %v4_168d0 = and i32 %v3_168d0, %v1_168c8
  %v5_168d0 = icmp slt i32 %v4_168d0, 0
  store i1 %v5_168d0, i1* %cpsr_v.global-to-local, align 1
  %v6_168d0 = icmp slt i32 %v1_168d0, 0
  store i1 %v6_168d0, i1* %cpsr_n.global-to-local, align 1
  %v7_168d0 = icmp eq i32 %v1_168c8, 20
  store i1 %v7_168d0, i1* %cpsr_z.global-to-local, align 1
  %v2_168d4 = xor i1 %v6_168d0, %v5_168d0
  br i1 %v2_168d4, label %dec_label_pc_16908, label %dec_label_pc_168d8

dec_label_pc_168d8:                               ; preds = %dec_label_pc_168d0
  %v0_168d8 = load i32, i32* @r4, align 4
  store i32 %v0_168d8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_168dc

dec_label_pc_168dc:                               ; preds = %dec_label_pc_168dc.dec_label_pc_168dc_crit_edge, %dec_label_pc_168d8
  %v0_168e0 = phi i32 [ %v12_168e8, %dec_label_pc_168dc.dec_label_pc_168dc_crit_edge ], [ %v0_168e094, %dec_label_pc_168d8 ]
  %v0_168dc = phi i32 [ %v0_168dc.pre, %dec_label_pc_168dc.dec_label_pc_168dc_crit_edge ], [ %v0_168dc93, %dec_label_pc_168d8 ]
  %v1_168dc = inttoptr i32 %v0_168dc to i32*
  %v2_168dc = load i32, i32* %v1_168dc, align 4
  %v3_168dc = add i32 %v0_168dc, 4
  %v4_168dc = inttoptr i32 %v3_168dc to i32*
  %v5_168dc = load i32, i32* %v4_168dc, align 4
  store i32 %v5_168dc, i32* %r4.global-to-local, align 4
  %v6_168dc = add i32 %v0_168dc, 8
  %v7_168dc = inttoptr i32 %v6_168dc to i32*
  %v8_168dc = load i32, i32* %v7_168dc, align 4
  store i32 %v8_168dc, i32* %ip.global-to-local, align 4
  %v9_168dc = add i32 %v0_168dc, 12
  %v10_168dc = inttoptr i32 %v9_168dc to i32*
  %v11_168dc = load i32, i32* %v10_168dc, align 4
  store i32 %v11_168dc, i32* %lr.global-to-local, align 4
  %v12_168dc = add i32 %v0_168dc, 16
  store i32 %v12_168dc, i32* %r1.global-to-local, align 4
  %v1_168e0 = inttoptr i32 %v0_168e0 to i32*
  store i32 %v2_168dc, i32* %v1_168e0, align 4
  %v3_168e0 = add i32 %v0_168e0, 4
  %v4_168e0 = inttoptr i32 %v3_168e0 to i32*
  %v5_168e0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_168e0, i32* %v4_168e0, align 4
  %v6_168e0 = add i32 %v0_168e0, 8
  %v7_168e0 = inttoptr i32 %v6_168e0 to i32*
  %v8_168e0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_168e0, i32* %v7_168e0, align 4
  %v9_168e0 = add i32 %v0_168e0, 12
  %v10_168e0 = inttoptr i32 %v9_168e0 to i32*
  %v11_168e0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_168e0, i32* %v10_168e0, align 4
  %v12_168e0 = add i32 %v0_168e0, 16
  store i32 %v12_168e0, i32* %r0.global-to-local, align 4
  %v0_168e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_168e4 = inttoptr i32 %v0_168e4 to i32*
  %v2_168e4 = load i32, i32* %v1_168e4, align 4
  store i32 %v2_168e4, i32* @r3, align 4
  %v3_168e4 = add i32 %v0_168e4, 4
  %v4_168e4 = inttoptr i32 %v3_168e4 to i32*
  %v5_168e4 = load i32, i32* %v4_168e4, align 4
  store i32 %v5_168e4, i32* %r4.global-to-local, align 4
  %v6_168e4 = add i32 %v0_168e4, 8
  %v7_168e4 = inttoptr i32 %v6_168e4 to i32*
  %v8_168e4 = load i32, i32* %v7_168e4, align 4
  store i32 %v8_168e4, i32* @ip, align 4
  %v9_168e4 = add i32 %v0_168e4, 12
  %v10_168e4 = inttoptr i32 %v9_168e4 to i32*
  %v11_168e4 = load i32, i32* %v10_168e4, align 4
  store i32 %v11_168e4, i32* %lr.global-to-local, align 4
  %v12_168e4 = add i32 %v0_168e4, 16
  store i32 %v12_168e4, i32* @r1, align 4
  %v1_168e8 = inttoptr i32 %v12_168e0 to i32*
  store i32 %v2_168e4, i32* %v1_168e8, align 4
  %v3_168e8 = add i32 %v0_168e0, 20
  %v4_168e8 = inttoptr i32 %v3_168e8 to i32*
  %v5_168e8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_168e8, i32* %v4_168e8, align 4
  %v6_168e8 = add i32 %v0_168e0, 24
  %v7_168e8 = inttoptr i32 %v6_168e8 to i32*
  %v8_168e8 = load i32, i32* @ip, align 4
  store i32 %v8_168e8, i32* %v7_168e8, align 4
  %v9_168e8 = add i32 %v0_168e0, 28
  %v10_168e8 = inttoptr i32 %v9_168e8 to i32*
  %v11_168e8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_168e8, i32* %v10_168e8, align 4
  %v12_168e8 = add i32 %v0_168e0, 32
  store i32 %v12_168e8, i32* @r0, align 4
  %v0_168ec = load i32, i32* %r2.global-to-local, align 4
  %v1_168ec = add i32 %v0_168ec, -32
  store i32 %v1_168ec, i32* %r2.global-to-local, align 4
  %v3_168ec = sub i32 31, %v0_168ec
  %v4_168ec = and i32 %v3_168ec, %v0_168ec
  %v5_168ec = icmp slt i32 %v4_168ec, 0
  %v6_168ec = icmp slt i32 %v1_168ec, 0
  %v2_168f0 = xor i1 %v6_168ec, %v5_168ec
  br i1 %v2_168f0, label %dec_label_pc_168f4, label %dec_label_pc_168dc.dec_label_pc_168dc_crit_edge

dec_label_pc_168dc.dec_label_pc_168dc_crit_edge:  ; preds = %dec_label_pc_168dc
  %v0_168dc.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_168dc

dec_label_pc_168f4:                               ; preds = %dec_label_pc_168dc
  %v1_168f4 = add i32 %v0_168ec, -16
  %v3_168f4 = add i32 %v0_168ec, 2147483616
  %v4_168f4 = and i32 %v1_168f4, %v3_168f4
  %v5_168f4 = icmp slt i32 %v4_168f4, 0
  store i1 %v5_168f4, i1* %cpsr_v.global-to-local, align 1
  %v6_168f4 = icmp slt i32 %v1_168f4, 0
  store i1 %v6_168f4, i1* %cpsr_n.global-to-local, align 1
  %v7_168f4 = icmp eq i32 %v1_168f4, 0
  store i1 %v7_168f4, i1* %cpsr_z.global-to-local, align 1
  %v2_168f8 = xor i1 %v6_168f4, %v5_168f4
  br i1 %v2_168f8, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_168f4
  %v3_168f8 = load i32, i32* @r1, align 4
  %v4_168f8 = inttoptr i32 %v3_168f8 to i32*
  %v5_168f8 = load i32, i32* %v4_168f8, align 4
  store i32 %v5_168f8, i32* @r3, align 4
  %v6_168f8 = add i32 %v3_168f8, 4
  %v7_168f8 = inttoptr i32 %v6_168f8 to i32*
  %v8_168f8 = load i32, i32* %v7_168f8, align 4
  store i32 %v8_168f8, i32* %r4.global-to-local, align 4
  %v9_168f8 = add i32 %v3_168f8, 8
  %v10_168f8 = inttoptr i32 %v9_168f8 to i32*
  %v11_168f8 = load i32, i32* %v10_168f8, align 4
  store i32 %v11_168f8, i32* @ip, align 4
  %v12_168f8 = add i32 %v3_168f8, 12
  %v13_168f8 = inttoptr i32 %v12_168f8 to i32*
  %v14_168f8 = load i32, i32* %v13_168f8, align 4
  store i32 %v14_168f8, i32* %lr.global-to-local, align 4
  %v15_168f8 = add i32 %v3_168f8, 16
  store i32 %v15_168f8, i32* @r1, align 4
  %v4_168fc = inttoptr i32 %v12_168e8 to i32*
  store i32 %v5_168f8, i32* %v4_168fc, align 4
  %v6_168fc = add i32 %v0_168e0, 36
  %v7_168fc = inttoptr i32 %v6_168fc to i32*
  %v8_168fc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_168fc, i32* %v7_168fc, align 4
  %v9_168fc = add i32 %v0_168e0, 40
  %v10_168fc = inttoptr i32 %v9_168fc to i32*
  %v11_168fc = load i32, i32* @ip, align 4
  store i32 %v11_168fc, i32* %v10_168fc, align 4
  %v12_168fc = add i32 %v0_168e0, 44
  %v13_168fc = inttoptr i32 %v12_168fc to i32*
  %v14_168fc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_168fc, i32* %v13_168fc, align 4
  %v15_168fc = add i32 %v0_168e0, 48
  store i32 %v15_168fc, i32* @r0, align 4
  %v3_16900 = load i32, i32* %r2.global-to-local, align 4
  %v4_16900 = add i32 %v3_16900, -16
  store i32 %v4_16900, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_168f4, %bb136
  %v3_16910102111 = phi i32 [ %v15_168fc, %bb136 ], [ %v12_168e8, %dec_label_pc_168f4 ]
  %v0_16908.pre = phi i32 [ %v4_16900, %bb136 ], [ %v1_168ec, %dec_label_pc_168f4 ]
  %v2_16904 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16904, i32* @r4, align 4
  br label %dec_label_pc_16908

dec_label_pc_16908:                               ; preds = %dec_label_pc_168d0, %bb137
  %v3_16910101 = phi i32 [ %v0_168e094, %dec_label_pc_168d0 ], [ %v3_16910102111, %bb137 ]
  %v0_16908 = phi i32 [ %v1_168d0, %dec_label_pc_168d0 ], [ %v0_16908.pre, %bb137 ]
  %v1_16908 = add i32 %v0_16908, 20
  store i32 %v1_16908, i32* %r2.global-to-local, align 4
  %v3_16908 = sub i32 0, %v0_16908
  %v4_16908 = and i32 %v1_16908, %v3_16908
  %v5_16908 = icmp slt i32 %v4_16908, 0
  store i1 %v5_16908, i1* %cpsr_v.global-to-local, align 1
  %v6_16908 = icmp slt i32 %v1_16908, 0
  store i1 %v6_16908, i1* %cpsr_n.global-to-local, align 1
  %v7_16908 = icmp eq i32 %v1_16908, 0
  store i1 %v7_16908, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1690c

dec_label_pc_1690c:                               ; preds = %.thread115, %dec_label_pc_16908
  %v0_1691c.pre157 = phi i32 [ %v0_1691c.pre, %.thread115 ], [ %v1_16908, %dec_label_pc_16908 ]
  %v3_16910 = phi i32 [ %v3_1691099116, %.thread115 ], [ %v3_16910101, %dec_label_pc_16908 ]
  %v1_16914 = phi i1 [ %v1_16918, %.thread115 ], [ %v5_16908, %dec_label_pc_16908 ]
  %v0_16914 = phi i1 [ %v0_16918, %.thread115 ], [ %v6_16908, %dec_label_pc_16908 ]
  %v2_1690c = xor i1 %v1_16914, %v0_16914
  br i1 %v2_1690c, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_1690c
  %v3_1690c = load i32, i32* @r1, align 4
  %v4_1690c = inttoptr i32 %v3_1690c to i32*
  %v5_1690c = load i32, i32* %v4_1690c, align 4
  store i32 %v5_1690c, i32* @r3, align 4
  %v6_1690c = add i32 %v3_1690c, 4
  %v7_1690c = inttoptr i32 %v6_1690c to i32*
  %v8_1690c = load i32, i32* %v7_1690c, align 4
  store i32 %v8_1690c, i32* @ip, align 4
  %v9_1690c = add i32 %v3_1690c, 8
  %v10_1690c = inttoptr i32 %v9_1690c to i32*
  %v11_1690c = load i32, i32* %v10_1690c, align 4
  store i32 %v11_1690c, i32* %lr.global-to-local, align 4
  %v12_1690c = add i32 %v3_1690c, 12
  store i32 %v12_1690c, i32* @r1, align 4
  %v4_16910 = inttoptr i32 %v3_16910 to i32*
  store i32 %v5_1690c, i32* %v4_16910, align 4
  %v6_16910 = add i32 %v3_16910, 4
  %v7_16910 = inttoptr i32 %v6_16910 to i32*
  %v8_16910 = load i32, i32* @ip, align 4
  store i32 %v8_16910, i32* %v7_16910, align 4
  %v9_16910 = add i32 %v3_16910, 8
  %v10_16910 = inttoptr i32 %v9_16910 to i32*
  %v11_16910 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_16910, i32* %v10_16910, align 4
  %v12_16910 = add i32 %v3_16910, 12
  store i32 %v12_16910, i32* @r0, align 4
  %v3_16914 = load i32, i32* %r2.global-to-local, align 4
  %v4_16914 = add i32 %v3_16914, -12
  store i32 %v4_16914, i32* %r2.global-to-local, align 4
  %v6_16914 = sub i32 11, %v3_16914
  %v7_16914 = and i32 %v6_16914, %v3_16914
  %v8_16914 = icmp slt i32 %v7_16914, 0
  store i1 %v8_16914, i1* %cpsr_v.global-to-local, align 1
  %v9_16914 = icmp slt i32 %v4_16914, 0
  store i1 %v9_16914, i1* %cpsr_n.global-to-local, align 1
  %v10_16914 = icmp eq i32 %v3_16914, 12
  store i1 %v10_16914, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_1690c, %bb138
  %v0_1691c.pre = phi i32 [ %v4_16914, %bb138 ], [ %v0_1691c.pre157, %dec_label_pc_1690c ]
  %v3_1691099116 = phi i32 [ %v12_16910, %bb138 ], [ %v3_16910, %dec_label_pc_1690c ]
  %v1_16918 = phi i1 [ %v8_16914, %bb138 ], [ %v1_16914, %dec_label_pc_1690c ]
  %v0_16918 = phi i1 [ %v9_16914, %bb138 ], [ %v0_16914, %dec_label_pc_1690c ]
  %v2_16918 = xor i1 %v1_16918, %v0_16918
  br i1 %v2_16918, label %dec_label_pc_1691c, label %dec_label_pc_1690c

dec_label_pc_1691c:                               ; preds = %.thread115, %dec_label_pc_168c8
  %v4_1692c = phi i32 [ %v0_168e094, %dec_label_pc_168c8 ], [ %v3_1691099116, %.thread115 ]
  %v0_1691c = phi i32 [ %v1_168c8, %dec_label_pc_168c8 ], [ %v0_1691c.pre, %.thread115 ]
  %v1_1691c = add i32 %v0_1691c, 8
  store i32 %v1_1691c, i32* %r2.global-to-local, align 4
  %v3_1691c = sub i32 0, %v0_1691c
  %v4_1691c = and i32 %v1_1691c, %v3_1691c
  %v5_1691c = icmp slt i32 %v4_1691c, 0
  store i1 %v5_1691c, i1* %cpsr_v.global-to-local, align 1
  %v6_1691c = icmp slt i32 %v1_1691c, 0
  store i1 %v6_1691c, i1* %cpsr_n.global-to-local, align 1
  %v7_1691c = icmp eq i32 %v1_1691c, 0
  store i1 %v7_1691c, i1* %cpsr_z.global-to-local, align 1
  %v2_16920 = xor i1 %v6_1691c, %v5_1691c
  br i1 %v2_16920, label %bb140, label %dec_label_pc_16924

dec_label_pc_16924:                               ; preds = %dec_label_pc_1691c
  %v1_16924 = add i32 %v0_1691c, 4
  store i32 %v1_16924, i32* %r2.global-to-local, align 4
  %v3_16924 = sub i32 -5, %v0_1691c
  %v4_16924 = and i32 %v3_16924, %v1_1691c
  %v5_16924 = icmp slt i32 %v4_16924, 0
  store i1 %v5_16924, i1* %cpsr_v.global-to-local, align 1
  %v6_16924 = icmp slt i32 %v1_16924, 0
  store i1 %v6_16924, i1* %cpsr_n.global-to-local, align 1
  %v7_16924 = icmp eq i32 %v1_1691c, 4
  store i1 %v7_16924, i1* %cpsr_z.global-to-local, align 1
  %v2_16928 = xor i1 %v6_16924, %v5_16924
  %v3_16928 = load i32, i32* @r1, align 4
  %v4_16928 = inttoptr i32 %v3_16928 to i32*
  %v5_16928 = load i32, i32* %v4_16928, align 4
  store i32 %v5_16928, i32* @r3, align 4
  %v7_16928 = add i32 %v3_16928, 4
  br i1 %v2_16928, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_16924
  store i32 %v7_16928, i32* @r1, align 4
  %v5_1692c = inttoptr i32 %v4_1692c to i32*
  store i32 %v5_16928, i32* %v5_1692c, align 4
  %v6_1692c = load i32, i32* @r0, align 4
  %v7_1692c = add i32 %v6_1692c, 4
  store i32 %v7_1692c, i32* @r0, align 4
  %v0_1693c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_16924
  %v7_16930 = inttoptr i32 %v7_16928 to i32*
  %v8_16930 = load i32, i32* %v7_16930, align 4
  store i32 %v8_16930, i32* @ip, align 4
  %v9_16930 = add i32 %v3_16928, 8
  store i32 %v9_16930, i32* @r1, align 4
  %v4_16934 = inttoptr i32 %v4_1692c to i32*
  store i32 %v5_16928, i32* %v4_16934, align 4
  %v6_16934 = add i32 %v4_1692c, 4
  %v7_16934 = inttoptr i32 %v6_16934 to i32*
  %v8_16934 = load i32, i32* @ip, align 4
  store i32 %v8_16934, i32* %v7_16934, align 4
  %v9_16934 = add i32 %v4_1692c, 8
  store i32 %v9_16934, i32* @r0, align 4
  %v3_16938 = load i32, i32* %r2.global-to-local, align 4
  %v4_16938 = add i32 %v3_16938, -4
  store i32 %v4_16938, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_1691c, %bb, %dec_label_pc_16aec, %dec_label_pc_16a80, %dec_label_pc_16a14, %bb139
  %v0_1693c = phi i32 [ %v0_1693c.pre, %.thread122 ], [ %v2_1698c, %.thread128 ], [ %v1_1691c, %dec_label_pc_1691c ], [ %v2_168b0, %bb ], [ %v0_1693c61, %dec_label_pc_16aec ], [ %v0_1693c60, %dec_label_pc_16a80 ], [ %v0_1693c59, %dec_label_pc_16a14 ], [ %v4_16938, %bb139 ]
  %v1_1693c = add i32 %v0_1693c, 4
  store i32 %v1_1693c, i32* %r2.global-to-local, align 4
  %v3_1693c = sub i32 0, %v0_1693c
  %v4_1693c = and i32 %v1_1693c, %v3_1693c
  %v5_1693c = icmp slt i32 %v4_1693c, 0
  store i1 %v5_1693c, i1* %cpsr_v.global-to-local, align 1
  %v6_1693c = icmp slt i32 %v1_1693c, 0
  store i1 %v6_1693c, i1* %cpsr_n.global-to-local, align 1
  %v7_1693c = icmp eq i32 %v1_1693c, 0
  store i1 %v7_1693c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1693c, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_16944.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_16940 = load i8*, i8** %stack_var_-8, align 4
  %v4_16940 = ptrtoint i8* %v3_16940 to i32
  store i32 %v4_16940, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_16944 = phi i32 [ %v0_16944.pre, %bb140.bb142_crit_edge ], [ %v8_168ac, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_1693c, i32 %v0_16944)
  %v0_16948 = load i32, i32* %r2.global-to-local, align 4
  %v1_16948 = add i32 %v0_16948, -2
  %v3_16948 = sub i32 1, %v0_16948
  %v4_16948 = and i32 %v3_16948, %v0_16948
  %v5_16948 = icmp slt i32 %v4_16948, 0
  store i1 %v5_16948, i1* %cpsr_v.global-to-local, align 1
  %v6_16948 = icmp slt i32 %v1_16948, 0
  store i1 %v6_16948, i1* %cpsr_n.global-to-local, align 1
  %v7_16948 = icmp eq i32 %v0_16948, 2
  store i1 %v7_16948, i1* %cpsr_z.global-to-local, align 1
  %v0_1694c = load i32, i32* @r1, align 4
  %v1_1694c = inttoptr i32 %v0_1694c to i8*
  %v2_1694c = load i8, i8* %v1_1694c, align 1
  %v5_1694c = add i32 %v0_1694c, 1
  store i32 %v5_1694c, i32* %r1.global-to-local, align 4
  %v2_16950 = load i32, i32* @r0, align 4
  %v3_16950 = inttoptr i32 %v2_16950 to i8*
  store i8 %v2_1694c, i8* %v3_16950, align 1
  %v4_16950 = load i32, i32* @r0, align 4
  %v5_16950 = add i32 %v4_16950, 1
  store i32 %v5_16950, i32* %r0.global-to-local, align 4
  %v0_16954 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_16954 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_16954 = xor i1 %v0_16954, %v1_16954
  br i1 %v2_16954, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_16954 = load i32, i32* %r1.global-to-local, align 4
  %v4_16954 = inttoptr i32 %v3_16954 to i8*
  %v5_16954 = load i8, i8* %v4_16954, align 1
  %v8_16954 = add i32 %v3_16954, 1
  store i32 %v8_16954, i32* %r1.global-to-local, align 4
  %v6_16958 = inttoptr i32 %v5_16950 to i8*
  store i8 %v5_16954, i8* %v6_16958, align 1
  %v7_16958 = load i32, i32* %r0.global-to-local, align 4
  %v8_16958 = add i32 %v7_16958, 1
  store i32 %v8_16958, i32* %r0.global-to-local, align 4
  %v1_1695c.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_1695c.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_16960 = phi i32 [ %v8_16958, %bb143 ], [ %v5_16950, %bb142 ]
  %v2_16960 = phi i1 [ %v2_1695c.pre, %bb143 ], [ %v1_16954, %bb142 ]
  %v1_16960 = phi i1 [ %v1_1695c.pre, %bb143 ], [ %v0_16954, %bb142 ]
  %v0_1695c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_1695c = xor i1 %v2_16960, %v1_16960
  %v4_1695c = or i1 %v0_1695c, %v3_1695c
  br i1 %v4_1695c, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_1695c = load i32, i32* %r1.global-to-local, align 4
  %v6_1695c = inttoptr i32 %v5_1695c to i8*
  %v7_1695c = load i8, i8* %v6_1695c, align 1
  %v10_1695c = add i32 %v5_1695c, 1
  store i32 %v10_1695c, i32* %r1.global-to-local, align 4
  %v8_16960 = inttoptr i32 %v7_16960 to i8*
  store i8 %v7_1695c, i8* %v8_16960, align 1
  %v9_16960 = load i32, i32* %r0.global-to-local, align 4
  %v10_16960 = add i32 %v9_16960, 1
  store i32 %v10_16960, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_16964 = load i8*, i8** %stack_var_-8, align 4
  %v3_16964 = ptrtoint i8* %v2_16964 to i32
  store i32 %v3_16964, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_168ac)
  %v0_1696c.pre = load i32, i32* @ip, align 4
  %v0_16974.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_16978.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1696c

dec_label_pc_1696c:                               ; preds = %dec_label_pc_168b8, %.thread126
  %v2_16978 = phi i32 [ %v1_168a0, %dec_label_pc_168b8 ], [ %v2_16978.pre, %.thread126 ]
  %v0_16974 = phi i32 [ %v0_168a0, %dec_label_pc_168b8 ], [ %v0_16974.pre, %.thread126 ]
  %v0_1696c = phi i32 [ %v1_168b8, %dec_label_pc_168b8 ], [ %v0_1696c.pre, %.thread126 ]
  %v1_1696c = sub i32 4, %v0_1696c
  store i32 %v1_1696c, i32* @ip, align 4
  %v1_16970 = add i32 %v1_1696c, -2
  %v3_16970 = sub i32 1, %v1_1696c
  %v4_16970 = and i32 %v3_16970, %v1_1696c
  %v5_16970 = icmp slt i32 %v4_16970, 0
  store i1 %v5_16970, i1* %cpsr_v.global-to-local, align 1
  %v6_16970 = icmp slt i32 %v1_16970, 0
  store i1 %v6_16970, i1* %cpsr_n.global-to-local, align 1
  %v7_16970 = icmp eq i32 %v1_1696c, 2
  store i1 %v7_16970, i1* %cpsr_z.global-to-local, align 1
  %v1_16974 = inttoptr i32 %v0_16974 to i8*
  %v2_16974 = load i8, i8* %v1_16974, align 1
  %v3_16974 = zext i8 %v2_16974 to i32
  store i32 %v3_16974, i32* @r3, align 4
  %v5_16974 = add i32 %v0_16974, 1
  store i32 %v5_16974, i32* @r1, align 4
  %v3_16978 = inttoptr i32 %v2_16978 to i8*
  store i8 %v2_16974, i8* %v3_16978, align 1
  %v4_16978 = load i32, i32* @r0, align 4
  %v5_16978 = add i32 %v4_16978, 1
  store i32 %v5_16978, i32* @r0, align 4
  %v0_1697c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_1697c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_1697c = xor i1 %v0_1697c, %v1_1697c
  br i1 %v2_1697c, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_1696c
  %v3_1697c = load i32, i32* @r1, align 4
  %v4_1697c = inttoptr i32 %v3_1697c to i8*
  %v5_1697c = load i8, i8* %v4_1697c, align 1
  %v6_1697c = zext i8 %v5_1697c to i32
  store i32 %v6_1697c, i32* @r3, align 4
  %v8_1697c = add i32 %v3_1697c, 1
  store i32 %v8_1697c, i32* @r1, align 4
  %v6_16980 = inttoptr i32 %v5_16978 to i8*
  store i8 %v5_1697c, i8* %v6_16980, align 1
  %v7_16980 = load i32, i32* @r0, align 4
  %v8_16980 = add i32 %v7_16980, 1
  store i32 %v8_16980, i32* @r0, align 4
  %v1_16984.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16984.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_1696c, %bb145
  %v7_16988 = phi i32 [ %v8_16980, %bb145 ], [ %v5_16978, %dec_label_pc_1696c ]
  %v2_16988 = phi i1 [ %v2_16984.pre, %bb145 ], [ %v1_1697c, %dec_label_pc_1696c ]
  %v1_16988 = phi i1 [ %v1_16984.pre, %bb145 ], [ %v0_1697c, %dec_label_pc_1696c ]
  %v0_16984 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16984 = xor i1 %v2_16988, %v1_16988
  %v4_16984 = or i1 %v0_16984, %v3_16984
  br i1 %v4_16984, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_16984 = load i32, i32* @r1, align 4
  %v6_16984 = inttoptr i32 %v5_16984 to i8*
  %v7_16984 = load i8, i8* %v6_16984, align 1
  %v8_16984 = zext i8 %v7_16984 to i32
  store i32 %v8_16984, i32* @r3, align 4
  %v10_16984 = add i32 %v5_16984, 1
  store i32 %v10_16984, i32* @r1, align 4
  %v8_16988 = inttoptr i32 %v7_16988 to i8*
  store i8 %v7_16984, i8* %v8_16988, align 1
  %v9_16988 = load i32, i32* @r0, align 4
  %v10_16988 = add i32 %v9_16988, 1
  store i32 %v10_16988, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_16abc77 = phi i32 [ %v10_16988, %bb146 ], [ %v7_16988, %.thread127 ]
  %v0_1698c = load i32, i32* %r2.global-to-local, align 4
  %v1_1698c = load i32, i32* @ip, align 4
  %v2_1698c = sub i32 %v0_1698c, %v1_1698c
  store i32 %v2_1698c, i32* %r2.global-to-local, align 4
  %v4_1698c = xor i32 %v1_1698c, %v0_1698c
  %v5_1698c = xor i32 %v2_1698c, %v0_1698c
  %v6_1698c = and i32 %v5_1698c, %v4_1698c
  %v7_1698c = icmp slt i32 %v6_1698c, 0
  store i1 %v7_1698c, i1* %cpsr_v.global-to-local, align 1
  %v8_1698c = icmp slt i32 %v2_1698c, 0
  store i1 %v8_1698c, i1* %cpsr_n.global-to-local, align 1
  %v9_1698c = icmp eq i32 %v0_1698c, %v1_1698c
  store i1 %v9_1698c, i1* %cpsr_z.global-to-local, align 1
  %v2_16990 = xor i1 %v8_1698c, %v7_1698c
  br i1 %v2_16990, label %bb140, label %dec_label_pc_16994

dec_label_pc_16994:                               ; preds = %.thread128
  %v0_16994 = load i32, i32* @r1, align 4
  %v1_16994 = urem i32 %v0_16994, 4
  store i32 %v1_16994, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16994 = icmp eq i32 %v1_16994, 0
  store i1 %v2_16994, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_16994 to i2
  br i1 %v2_16994, label %dec_label_pc_168c8, label %dec_label_pc_1699c

dec_label_pc_1699c:                               ; preds = %dec_label_pc_168c0, %dec_label_pc_16994
  %v0_16abc76 = phi i32 [ %v1_168a0, %dec_label_pc_168c0 ], [ %v0_16abc77, %dec_label_pc_16994 ]
  %v0_16a24 = phi i32 [ %v2_168b0, %dec_label_pc_168c0 ], [ %v2_1698c, %dec_label_pc_16994 ]
  %v0_169a4.off0 = phi i2 [ %extract.t, %dec_label_pc_168c0 ], [ %extract.t131, %dec_label_pc_16994 ]
  %v0_1699c = phi i32 [ %v0_168a0, %dec_label_pc_168c0 ], [ %v0_16994, %dec_label_pc_16994 ]
  %v1_1699c = and i32 %v0_1699c, -4
  store i32 %v1_1699c, i32* %r1.global-to-local, align 4
  %v1_169a0 = inttoptr i32 %v1_1699c to i32*
  %v2_169a0 = load i32, i32* %v1_169a0, align 4
  store i32 %v2_169a0, i32* %lr.global-to-local, align 4
  %v4_169a0 = add i32 %v1_1699c, 4
  store i32 %v4_169a0, i32* %r1.global-to-local, align 4
  %v1_16a1c = add i32 %v0_16a24, -12
  %v3_16a1c = sub i32 11, %v0_16a24
  %v4_16a1c = and i32 %v3_16a1c, %v0_16a24
  %v5_16a1c = icmp slt i32 %v4_16a1c, 0
  store i1 %v5_16a1c, i1* %cpsr_v.global-to-local, align 1
  %v6_16a1c = icmp slt i32 %v1_16a1c, 0
  store i1 %v6_16a1c, i1* %cpsr_n.global-to-local, align 1
  %v7_16a1c = icmp eq i32 %v0_16a24, 12
  store i1 %v7_16a1c, i1* %cpsr_z.global-to-local, align 1
  %v2_16a20 = xor i1 %v6_16a1c, %v5_16a1c
  switch i2 %v0_169a4.off0, label %dec_label_pc_169b0 [
    i2 -1, label %dec_label_pc_16a88
    i2 -2, label %dec_label_pc_16a1c
  ]

dec_label_pc_169b0:                               ; preds = %dec_label_pc_1699c
  br i1 %v2_16a20, label %dec_label_pc_169fc, label %dec_label_pc_169b8

dec_label_pc_169b8:                               ; preds = %dec_label_pc_169b0
  store i32 %v1_16a1c, i32* %r2.global-to-local, align 4
  %v3_169bc = load i32, i32* @r4, align 4
  store i32 %v3_169bc, i32* %stack_var_-16, align 4
  %v6_169bc = load i32, i32* @r5, align 4
  store i32 %v6_169bc, i32* %stack_var_-12, align 4
  br label %dec_label_pc_169c0

dec_label_pc_169c0:                               ; preds = %dec_label_pc_169c0.dec_label_pc_169c0_crit_edge, %dec_label_pc_169b8
  %v0_169e4 = phi i32 [ %v12_169e4, %dec_label_pc_169c0.dec_label_pc_169c0_crit_edge ], [ %v0_16abc76, %dec_label_pc_169b8 ]
  %v0_169c4 = phi i32 [ %v0_169c4.pre, %dec_label_pc_169c0.dec_label_pc_169c0_crit_edge ], [ %v4_169a0, %dec_label_pc_169b8 ]
  %v0_169c0 = phi i32 [ %v0_169c0.pre, %dec_label_pc_169c0.dec_label_pc_169c0_crit_edge ], [ %v2_169a0, %dec_label_pc_169b8 ]
  %v3_169c0 = udiv i32 %v0_169c0, 256
  %v1_169c4 = inttoptr i32 %v0_169c4 to i32*
  %v2_169c4 = load i32, i32* %v1_169c4, align 4
  store i32 %v2_169c4, i32* %r4.global-to-local, align 4
  %v3_169c4 = add i32 %v0_169c4, 4
  %v4_169c4 = inttoptr i32 %v3_169c4 to i32*
  %v5_169c4 = load i32, i32* %v4_169c4, align 4
  store i32 %v5_169c4, i32* %r5.global-to-local, align 4
  %v6_169c4 = add i32 %v0_169c4, 8
  %v7_169c4 = inttoptr i32 %v6_169c4 to i32*
  %v8_169c4 = load i32, i32* %v7_169c4, align 4
  store i32 %v8_169c4, i32* %ip.global-to-local, align 4
  %v9_169c4 = add i32 %v0_169c4, 12
  %v10_169c4 = inttoptr i32 %v9_169c4 to i32*
  %v11_169c4 = load i32, i32* %v10_169c4, align 4
  store i32 %v11_169c4, i32* %lr.global-to-local, align 4
  %v12_169c4 = add i32 %v0_169c4, 16
  store i32 %v12_169c4, i32* %r1.global-to-local, align 4
  %v4_169c8 = mul i32 %v2_169c4, 16777216
  %v5_169c8 = or i32 %v4_169c8, %v3_169c0
  store i32 %v5_169c8, i32* @r3, align 4
  %v3_169cc = udiv i32 %v2_169c4, 256
  %v4_169d0 = mul i32 %v5_169c4, 16777216
  %v5_169d0 = or i32 %v4_169d0, %v3_169cc
  store i32 %v5_169d0, i32* %r4.global-to-local, align 4
  %v3_169d4 = udiv i32 %v5_169c4, 256
  %v4_169d8 = mul i32 %v8_169c4, 16777216
  %v5_169d8 = or i32 %v4_169d8, %v3_169d4
  store i32 %v5_169d8, i32* %r5.global-to-local, align 4
  %v3_169dc = udiv i32 %v8_169c4, 256
  %v4_169e0 = mul i32 %v11_169c4, 16777216
  %v5_169e0 = or i32 %v4_169e0, %v3_169dc
  store i32 %v5_169e0, i32* @ip, align 4
  %v1_169e4 = inttoptr i32 %v0_169e4 to i32*
  store i32 %v5_169c8, i32* %v1_169e4, align 4
  %v3_169e4 = add i32 %v0_169e4, 4
  %v4_169e4 = inttoptr i32 %v3_169e4 to i32*
  %v5_169e4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_169e4, i32* %v4_169e4, align 4
  %v6_169e4 = add i32 %v0_169e4, 8
  %v7_169e4 = inttoptr i32 %v6_169e4 to i32*
  %v8_169e4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_169e4, i32* %v7_169e4, align 4
  %v9_169e4 = add i32 %v0_169e4, 12
  %v10_169e4 = inttoptr i32 %v9_169e4 to i32*
  %v11_169e4 = load i32, i32* @ip, align 4
  store i32 %v11_169e4, i32* %v10_169e4, align 4
  %v12_169e4 = add i32 %v0_169e4, 16
  store i32 %v12_169e4, i32* @r0, align 4
  %v0_169e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_169e8 = add i32 %v0_169e8, -16
  store i32 %v1_169e8, i32* %r2.global-to-local, align 4
  %v3_169e8 = sub i32 15, %v0_169e8
  %v4_169e8 = and i32 %v3_169e8, %v0_169e8
  %v5_169e8 = icmp slt i32 %v4_169e8, 0
  %v6_169e8 = icmp slt i32 %v1_169e8, 0
  %v2_169ec = xor i1 %v6_169e8, %v5_169e8
  br i1 %v2_169ec, label %dec_label_pc_169f0, label %dec_label_pc_169c0.dec_label_pc_169c0_crit_edge

dec_label_pc_169c0.dec_label_pc_169c0_crit_edge:  ; preds = %dec_label_pc_169c0
  %v0_169c0.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_169c4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_169c0

dec_label_pc_169f0:                               ; preds = %dec_label_pc_169c0
  %v2_169f0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_169f0, i32* @r4, align 4
  %v5_169f0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_169f0, i32* @r5, align 4
  %v1_169f4 = add i32 %v0_169e8, -4
  store i32 %v1_169f4, i32* %r2.global-to-local, align 4
  %v3_169f4 = add i32 %v0_169e8, 2147483632
  %v4_169f4 = and i32 %v1_169f4, %v3_169f4
  %v5_169f4 = icmp slt i32 %v4_169f4, 0
  store i1 %v5_169f4, i1* %cpsr_v.global-to-local, align 1
  %v6_169f4 = icmp slt i32 %v1_169f4, 0
  store i1 %v6_169f4, i1* %cpsr_n.global-to-local, align 1
  %v7_169f4 = icmp eq i32 %v1_169f4, 0
  store i1 %v7_169f4, i1* %cpsr_z.global-to-local, align 1
  %v2_169f8 = xor i1 %v6_169f4, %v5_169f4
  br i1 %v2_169f8, label %dec_label_pc_16a14, label %dec_label_pc_169fc

dec_label_pc_169fc:                               ; preds = %dec_label_pc_169f0, %dec_label_pc_169b0, %dec_label_pc_169fc
  %v1_16a08 = phi i32 [ %v4_16a08, %dec_label_pc_169fc ], [ %v12_169e4, %dec_label_pc_169f0 ], [ %v0_16abc76, %dec_label_pc_169b0 ]
  %v0_169fc = load i32, i32* %lr.global-to-local, align 4
  %v3_169fc = udiv i32 %v0_169fc, 256
  store i32 %v3_169fc, i32* %ip.global-to-local, align 4
  %v0_16a00 = load i32, i32* %r1.global-to-local, align 4
  %v1_16a00 = inttoptr i32 %v0_16a00 to i32*
  %v2_16a00 = load i32, i32* %v1_16a00, align 4
  store i32 %v2_16a00, i32* %lr.global-to-local, align 4
  %v4_16a00 = add i32 %v0_16a00, 4
  store i32 %v4_16a00, i32* %r1.global-to-local, align 4
  %v4_16a04 = mul i32 %v2_16a00, 16777216
  %v5_16a04 = or i32 %v4_16a04, %v3_169fc
  store i32 %v5_16a04, i32* @ip, align 4
  %v2_16a08 = inttoptr i32 %v1_16a08 to i32*
  store i32 %v5_16a04, i32* %v2_16a08, align 4
  %v3_16a08 = load i32, i32* @r0, align 4
  %v4_16a08 = add i32 %v3_16a08, 4
  store i32 %v4_16a08, i32* @r0, align 4
  %v0_16a0c = load i32, i32* %r2.global-to-local, align 4
  %v1_16a0c = add i32 %v0_16a0c, -4
  store i32 %v1_16a0c, i32* %r2.global-to-local, align 4
  %v3_16a0c = sub i32 3, %v0_16a0c
  %v4_16a0c = and i32 %v3_16a0c, %v0_16a0c
  %v5_16a0c = icmp slt i32 %v4_16a0c, 0
  %v6_16a0c = icmp slt i32 %v1_16a0c, 0
  %v2_16a10 = xor i1 %v6_16a0c, %v5_16a0c
  br i1 %v2_16a10, label %dec_label_pc_16a14.loopexit, label %dec_label_pc_169fc

dec_label_pc_16a14.loopexit:                      ; preds = %dec_label_pc_169fc
  %v7_16a0c = icmp eq i32 %v0_16a0c, 4
  store i1 %v5_16a0c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_16a0c, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_16a0c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16a14

dec_label_pc_16a14:                               ; preds = %dec_label_pc_16a14.loopexit, %dec_label_pc_169f0
  %v0_1693c59 = phi i32 [ %v1_16a0c, %dec_label_pc_16a14.loopexit ], [ %v1_169f4, %dec_label_pc_169f0 ]
  %v0_16a14 = load i32, i32* %r1.global-to-local, align 4
  %v1_16a14 = add i32 %v0_16a14, -3
  store i32 %v1_16a14, i32* @r1, align 4
  br label %bb140

dec_label_pc_16a1c:                               ; preds = %dec_label_pc_1699c
  br i1 %v2_16a20, label %dec_label_pc_16a68, label %dec_label_pc_16a24

dec_label_pc_16a24:                               ; preds = %dec_label_pc_16a1c
  store i32 %v1_16a1c, i32* %r2.global-to-local, align 4
  %v3_16a28 = load i32, i32* @r4, align 4
  store i32 %v3_16a28, i32* %stack_var_-16, align 4
  %v6_16a28 = load i32, i32* @r5, align 4
  store i32 %v6_16a28, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16a2c

dec_label_pc_16a2c:                               ; preds = %dec_label_pc_16a2c.dec_label_pc_16a2c_crit_edge, %dec_label_pc_16a24
  %v0_16a50 = phi i32 [ %v12_16a50, %dec_label_pc_16a2c.dec_label_pc_16a2c_crit_edge ], [ %v0_16abc76, %dec_label_pc_16a24 ]
  %v0_16a30 = phi i32 [ %v0_16a30.pre, %dec_label_pc_16a2c.dec_label_pc_16a2c_crit_edge ], [ %v4_169a0, %dec_label_pc_16a24 ]
  %v0_16a2c = phi i32 [ %v0_16a2c.pre, %dec_label_pc_16a2c.dec_label_pc_16a2c_crit_edge ], [ %v2_169a0, %dec_label_pc_16a24 ]
  %v3_16a2c = udiv i32 %v0_16a2c, 65536
  %v1_16a30 = inttoptr i32 %v0_16a30 to i32*
  %v2_16a30 = load i32, i32* %v1_16a30, align 4
  store i32 %v2_16a30, i32* %r4.global-to-local, align 4
  %v3_16a30 = add i32 %v0_16a30, 4
  %v4_16a30 = inttoptr i32 %v3_16a30 to i32*
  %v5_16a30 = load i32, i32* %v4_16a30, align 4
  store i32 %v5_16a30, i32* %r5.global-to-local, align 4
  %v6_16a30 = add i32 %v0_16a30, 8
  %v7_16a30 = inttoptr i32 %v6_16a30 to i32*
  %v8_16a30 = load i32, i32* %v7_16a30, align 4
  store i32 %v8_16a30, i32* %ip.global-to-local, align 4
  %v9_16a30 = add i32 %v0_16a30, 12
  %v10_16a30 = inttoptr i32 %v9_16a30 to i32*
  %v11_16a30 = load i32, i32* %v10_16a30, align 4
  store i32 %v11_16a30, i32* %lr.global-to-local, align 4
  %v12_16a30 = add i32 %v0_16a30, 16
  store i32 %v12_16a30, i32* %r1.global-to-local, align 4
  %v4_16a34 = mul i32 %v2_16a30, 65536
  %v5_16a34 = or i32 %v4_16a34, %v3_16a2c
  store i32 %v5_16a34, i32* @r3, align 4
  %v3_16a38 = udiv i32 %v2_16a30, 65536
  %v4_16a3c = mul i32 %v5_16a30, 65536
  %v5_16a3c = or i32 %v4_16a3c, %v3_16a38
  store i32 %v5_16a3c, i32* %r4.global-to-local, align 4
  %v3_16a40 = udiv i32 %v5_16a30, 65536
  %v4_16a44 = mul i32 %v8_16a30, 65536
  %v5_16a44 = or i32 %v4_16a44, %v3_16a40
  store i32 %v5_16a44, i32* %r5.global-to-local, align 4
  %v3_16a48 = udiv i32 %v8_16a30, 65536
  %v4_16a4c = mul i32 %v11_16a30, 65536
  %v5_16a4c = or i32 %v4_16a4c, %v3_16a48
  store i32 %v5_16a4c, i32* @ip, align 4
  %v1_16a50 = inttoptr i32 %v0_16a50 to i32*
  store i32 %v5_16a34, i32* %v1_16a50, align 4
  %v3_16a50 = add i32 %v0_16a50, 4
  %v4_16a50 = inttoptr i32 %v3_16a50 to i32*
  %v5_16a50 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16a50, i32* %v4_16a50, align 4
  %v6_16a50 = add i32 %v0_16a50, 8
  %v7_16a50 = inttoptr i32 %v6_16a50 to i32*
  %v8_16a50 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_16a50, i32* %v7_16a50, align 4
  %v9_16a50 = add i32 %v0_16a50, 12
  %v10_16a50 = inttoptr i32 %v9_16a50 to i32*
  %v11_16a50 = load i32, i32* @ip, align 4
  store i32 %v11_16a50, i32* %v10_16a50, align 4
  %v12_16a50 = add i32 %v0_16a50, 16
  store i32 %v12_16a50, i32* @r0, align 4
  %v0_16a54 = load i32, i32* %r2.global-to-local, align 4
  %v1_16a54 = add i32 %v0_16a54, -16
  store i32 %v1_16a54, i32* %r2.global-to-local, align 4
  %v3_16a54 = sub i32 15, %v0_16a54
  %v4_16a54 = and i32 %v3_16a54, %v0_16a54
  %v5_16a54 = icmp slt i32 %v4_16a54, 0
  %v6_16a54 = icmp slt i32 %v1_16a54, 0
  %v2_16a58 = xor i1 %v6_16a54, %v5_16a54
  br i1 %v2_16a58, label %dec_label_pc_16a5c, label %dec_label_pc_16a2c.dec_label_pc_16a2c_crit_edge

dec_label_pc_16a2c.dec_label_pc_16a2c_crit_edge:  ; preds = %dec_label_pc_16a2c
  %v0_16a2c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_16a30.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16a2c

dec_label_pc_16a5c:                               ; preds = %dec_label_pc_16a2c
  %v2_16a5c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16a5c, i32* @r4, align 4
  %v5_16a5c = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_16a5c, i32* @r5, align 4
  %v1_16a60 = add i32 %v0_16a54, -4
  store i32 %v1_16a60, i32* %r2.global-to-local, align 4
  %v3_16a60 = add i32 %v0_16a54, 2147483632
  %v4_16a60 = and i32 %v1_16a60, %v3_16a60
  %v5_16a60 = icmp slt i32 %v4_16a60, 0
  store i1 %v5_16a60, i1* %cpsr_v.global-to-local, align 1
  %v6_16a60 = icmp slt i32 %v1_16a60, 0
  store i1 %v6_16a60, i1* %cpsr_n.global-to-local, align 1
  %v7_16a60 = icmp eq i32 %v1_16a60, 0
  store i1 %v7_16a60, i1* %cpsr_z.global-to-local, align 1
  %v2_16a64 = xor i1 %v6_16a60, %v5_16a60
  br i1 %v2_16a64, label %dec_label_pc_16a80, label %dec_label_pc_16a68

dec_label_pc_16a68:                               ; preds = %dec_label_pc_16a5c, %dec_label_pc_16a1c, %dec_label_pc_16a68
  %v1_16a74 = phi i32 [ %v4_16a74, %dec_label_pc_16a68 ], [ %v12_16a50, %dec_label_pc_16a5c ], [ %v0_16abc76, %dec_label_pc_16a1c ]
  %v0_16a68 = load i32, i32* %lr.global-to-local, align 4
  %v3_16a68 = udiv i32 %v0_16a68, 65536
  store i32 %v3_16a68, i32* %ip.global-to-local, align 4
  %v0_16a6c = load i32, i32* %r1.global-to-local, align 4
  %v1_16a6c = inttoptr i32 %v0_16a6c to i32*
  %v2_16a6c = load i32, i32* %v1_16a6c, align 4
  store i32 %v2_16a6c, i32* %lr.global-to-local, align 4
  %v4_16a6c = add i32 %v0_16a6c, 4
  store i32 %v4_16a6c, i32* %r1.global-to-local, align 4
  %v4_16a70 = mul i32 %v2_16a6c, 65536
  %v5_16a70 = or i32 %v4_16a70, %v3_16a68
  store i32 %v5_16a70, i32* @ip, align 4
  %v2_16a74 = inttoptr i32 %v1_16a74 to i32*
  store i32 %v5_16a70, i32* %v2_16a74, align 4
  %v3_16a74 = load i32, i32* @r0, align 4
  %v4_16a74 = add i32 %v3_16a74, 4
  store i32 %v4_16a74, i32* @r0, align 4
  %v0_16a78 = load i32, i32* %r2.global-to-local, align 4
  %v1_16a78 = add i32 %v0_16a78, -4
  store i32 %v1_16a78, i32* %r2.global-to-local, align 4
  %v3_16a78 = sub i32 3, %v0_16a78
  %v4_16a78 = and i32 %v3_16a78, %v0_16a78
  %v5_16a78 = icmp slt i32 %v4_16a78, 0
  %v6_16a78 = icmp slt i32 %v1_16a78, 0
  %v2_16a7c = xor i1 %v6_16a78, %v5_16a78
  br i1 %v2_16a7c, label %dec_label_pc_16a80.loopexit, label %dec_label_pc_16a68

dec_label_pc_16a80.loopexit:                      ; preds = %dec_label_pc_16a68
  %v7_16a78 = icmp eq i32 %v0_16a78, 4
  store i1 %v5_16a78, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_16a78, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_16a78, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16a80

dec_label_pc_16a80:                               ; preds = %dec_label_pc_16a80.loopexit, %dec_label_pc_16a5c
  %v0_1693c60 = phi i32 [ %v1_16a78, %dec_label_pc_16a80.loopexit ], [ %v1_16a60, %dec_label_pc_16a5c ]
  %v0_16a80 = load i32, i32* %r1.global-to-local, align 4
  %v1_16a80 = add i32 %v0_16a80, -2
  store i32 %v1_16a80, i32* @r1, align 4
  br label %bb140

dec_label_pc_16a88:                               ; preds = %dec_label_pc_1699c
  br i1 %v2_16a20, label %dec_label_pc_16ad4, label %dec_label_pc_16a90

dec_label_pc_16a90:                               ; preds = %dec_label_pc_16a88
  store i32 %v1_16a1c, i32* %r2.global-to-local, align 4
  %v3_16a94 = load i32, i32* @r4, align 4
  store i32 %v3_16a94, i32* %stack_var_-16, align 4
  %v6_16a94 = load i32, i32* @r5, align 4
  store i32 %v6_16a94, i32* %stack_var_-12, align 4
  br label %dec_label_pc_16a98

dec_label_pc_16a98:                               ; preds = %dec_label_pc_16a98.dec_label_pc_16a98_crit_edge, %dec_label_pc_16a90
  %v0_16abc = phi i32 [ %v12_16abc, %dec_label_pc_16a98.dec_label_pc_16a98_crit_edge ], [ %v0_16abc76, %dec_label_pc_16a90 ]
  %v0_16a9c = phi i32 [ %v0_16a9c.pre, %dec_label_pc_16a98.dec_label_pc_16a98_crit_edge ], [ %v4_169a0, %dec_label_pc_16a90 ]
  %v0_16a98 = phi i32 [ %v0_16a98.pre, %dec_label_pc_16a98.dec_label_pc_16a98_crit_edge ], [ %v2_169a0, %dec_label_pc_16a90 ]
  %v3_16a98 = udiv i32 %v0_16a98, 16777216
  %v1_16a9c = inttoptr i32 %v0_16a9c to i32*
  %v2_16a9c = load i32, i32* %v1_16a9c, align 4
  store i32 %v2_16a9c, i32* %r4.global-to-local, align 4
  %v3_16a9c = add i32 %v0_16a9c, 4
  %v4_16a9c = inttoptr i32 %v3_16a9c to i32*
  %v5_16a9c = load i32, i32* %v4_16a9c, align 4
  store i32 %v5_16a9c, i32* %r5.global-to-local, align 4
  %v6_16a9c = add i32 %v0_16a9c, 8
  %v7_16a9c = inttoptr i32 %v6_16a9c to i32*
  %v8_16a9c = load i32, i32* %v7_16a9c, align 4
  store i32 %v8_16a9c, i32* %ip.global-to-local, align 4
  %v9_16a9c = add i32 %v0_16a9c, 12
  %v10_16a9c = inttoptr i32 %v9_16a9c to i32*
  %v11_16a9c = load i32, i32* %v10_16a9c, align 4
  store i32 %v11_16a9c, i32* %lr.global-to-local, align 4
  %v12_16a9c = add i32 %v0_16a9c, 16
  store i32 %v12_16a9c, i32* %r1.global-to-local, align 4
  %v4_16aa0 = mul i32 %v2_16a9c, 256
  %v5_16aa0 = or i32 %v4_16aa0, %v3_16a98
  store i32 %v5_16aa0, i32* @r3, align 4
  %v3_16aa4 = udiv i32 %v2_16a9c, 16777216
  %v4_16aa8 = mul i32 %v5_16a9c, 256
  %v5_16aa8 = or i32 %v4_16aa8, %v3_16aa4
  store i32 %v5_16aa8, i32* %r4.global-to-local, align 4
  %v3_16aac = udiv i32 %v5_16a9c, 16777216
  %v4_16ab0 = mul i32 %v8_16a9c, 256
  %v5_16ab0 = or i32 %v4_16ab0, %v3_16aac
  store i32 %v5_16ab0, i32* %r5.global-to-local, align 4
  %v3_16ab4 = udiv i32 %v8_16a9c, 16777216
  %v4_16ab8 = mul i32 %v11_16a9c, 256
  %v5_16ab8 = or i32 %v4_16ab8, %v3_16ab4
  store i32 %v5_16ab8, i32* @ip, align 4
  %v1_16abc = inttoptr i32 %v0_16abc to i32*
  store i32 %v5_16aa0, i32* %v1_16abc, align 4
  %v3_16abc = add i32 %v0_16abc, 4
  %v4_16abc = inttoptr i32 %v3_16abc to i32*
  %v5_16abc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_16abc, i32* %v4_16abc, align 4
  %v6_16abc = add i32 %v0_16abc, 8
  %v7_16abc = inttoptr i32 %v6_16abc to i32*
  %v8_16abc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_16abc, i32* %v7_16abc, align 4
  %v9_16abc = add i32 %v0_16abc, 12
  %v10_16abc = inttoptr i32 %v9_16abc to i32*
  %v11_16abc = load i32, i32* @ip, align 4
  store i32 %v11_16abc, i32* %v10_16abc, align 4
  %v12_16abc = add i32 %v0_16abc, 16
  store i32 %v12_16abc, i32* @r0, align 4
  %v0_16ac0 = load i32, i32* %r2.global-to-local, align 4
  %v1_16ac0 = add i32 %v0_16ac0, -16
  store i32 %v1_16ac0, i32* %r2.global-to-local, align 4
  %v3_16ac0 = sub i32 15, %v0_16ac0
  %v4_16ac0 = and i32 %v3_16ac0, %v0_16ac0
  %v5_16ac0 = icmp slt i32 %v4_16ac0, 0
  %v6_16ac0 = icmp slt i32 %v1_16ac0, 0
  %v2_16ac4 = xor i1 %v6_16ac0, %v5_16ac0
  br i1 %v2_16ac4, label %dec_label_pc_16ac8, label %dec_label_pc_16a98.dec_label_pc_16a98_crit_edge

dec_label_pc_16a98.dec_label_pc_16a98_crit_edge:  ; preds = %dec_label_pc_16a98
  %v0_16a98.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_16a9c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16a98

dec_label_pc_16ac8:                               ; preds = %dec_label_pc_16a98
  %v2_16ac8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16ac8, i32* @r4, align 4
  %v5_16ac8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_16ac8, i32* @r5, align 4
  %v1_16acc = add i32 %v0_16ac0, -4
  store i32 %v1_16acc, i32* %r2.global-to-local, align 4
  %v3_16acc = add i32 %v0_16ac0, 2147483632
  %v4_16acc = and i32 %v1_16acc, %v3_16acc
  %v5_16acc = icmp slt i32 %v4_16acc, 0
  store i1 %v5_16acc, i1* %cpsr_v.global-to-local, align 1
  %v6_16acc = icmp slt i32 %v1_16acc, 0
  store i1 %v6_16acc, i1* %cpsr_n.global-to-local, align 1
  %v7_16acc = icmp eq i32 %v1_16acc, 0
  store i1 %v7_16acc, i1* %cpsr_z.global-to-local, align 1
  %v2_16ad0 = xor i1 %v6_16acc, %v5_16acc
  br i1 %v2_16ad0, label %dec_label_pc_16aec, label %dec_label_pc_16ad4

dec_label_pc_16ad4:                               ; preds = %dec_label_pc_16ac8, %dec_label_pc_16a88, %dec_label_pc_16ad4
  %v1_16ae0 = phi i32 [ %v4_16ae0, %dec_label_pc_16ad4 ], [ %v12_16abc, %dec_label_pc_16ac8 ], [ %v0_16abc76, %dec_label_pc_16a88 ]
  %v0_16ad4 = load i32, i32* %lr.global-to-local, align 4
  %v3_16ad4 = udiv i32 %v0_16ad4, 16777216
  store i32 %v3_16ad4, i32* %ip.global-to-local, align 4
  %v0_16ad8 = load i32, i32* %r1.global-to-local, align 4
  %v1_16ad8 = inttoptr i32 %v0_16ad8 to i32*
  %v2_16ad8 = load i32, i32* %v1_16ad8, align 4
  store i32 %v2_16ad8, i32* %lr.global-to-local, align 4
  %v4_16ad8 = add i32 %v0_16ad8, 4
  store i32 %v4_16ad8, i32* %r1.global-to-local, align 4
  %v4_16adc = mul i32 %v2_16ad8, 256
  %v5_16adc = or i32 %v4_16adc, %v3_16ad4
  store i32 %v5_16adc, i32* @ip, align 4
  %v2_16ae0 = inttoptr i32 %v1_16ae0 to i32*
  store i32 %v5_16adc, i32* %v2_16ae0, align 4
  %v3_16ae0 = load i32, i32* @r0, align 4
  %v4_16ae0 = add i32 %v3_16ae0, 4
  store i32 %v4_16ae0, i32* @r0, align 4
  %v0_16ae4 = load i32, i32* %r2.global-to-local, align 4
  %v1_16ae4 = add i32 %v0_16ae4, -4
  store i32 %v1_16ae4, i32* %r2.global-to-local, align 4
  %v3_16ae4 = sub i32 3, %v0_16ae4
  %v4_16ae4 = and i32 %v3_16ae4, %v0_16ae4
  %v5_16ae4 = icmp slt i32 %v4_16ae4, 0
  %v6_16ae4 = icmp slt i32 %v1_16ae4, 0
  %v2_16ae8 = xor i1 %v6_16ae4, %v5_16ae4
  br i1 %v2_16ae8, label %dec_label_pc_16aec.loopexit, label %dec_label_pc_16ad4

dec_label_pc_16aec.loopexit:                      ; preds = %dec_label_pc_16ad4
  %v7_16ae4 = icmp eq i32 %v0_16ae4, 4
  store i1 %v5_16ae4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_16ae4, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_16ae4, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16aec

dec_label_pc_16aec:                               ; preds = %dec_label_pc_16aec.loopexit, %dec_label_pc_16ac8
  %v0_1693c61 = phi i32 [ %v1_16ae4, %dec_label_pc_16aec.loopexit ], [ %v1_16acc, %dec_label_pc_16ac8 ]
  %v0_16aec = load i32, i32* %r1.global-to-local, align 4
  %v1_16aec = add i32 %v0_16aec, -1
  store i32 %v1_16aec, i32* @r1, align 4
  br label %bb140

dec_label_pc_16af4:                               ; preds = %dec_label_pc_168a0
  %v1_16af4 = load i32, i32* @r2, align 4
  %v2_16af4 = add i32 %v1_16af4, %v0_168a0
  store i32 %v2_16af4, i32* %r1.global-to-local, align 4
  %v2_16af8 = add i32 %v1_16af4, %v1_168a0
  store i32 %v2_16af8, i32* %r0.global-to-local, align 4
  %v2_16afc = add i32 %v1_16af4, -4
  store i32 %v2_16afc, i32* %r2.global-to-local, align 4
  %v4_16afc = sub i32 3, %v1_16af4
  %v5_16afc = and i32 %v4_16afc, %v1_16af4
  %v6_16afc = icmp slt i32 %v5_16afc, 0
  store i1 %v6_16afc, i1* %cpsr_v.global-to-local, align 1
  %v7_16afc = icmp slt i32 %v2_16afc, 0
  store i1 %v7_16afc, i1* %cpsr_n.global-to-local, align 1
  %v8_16afc = icmp eq i32 %v1_16af4, 4
  store i1 %v8_16afc, i1* %cpsr_z.global-to-local, align 1
  %v5_16b00 = icmp slt i32 %v1_16af4, 4
  br i1 %v5_16b00, label %bb150, label %dec_label_pc_16b04

dec_label_pc_16b04:                               ; preds = %dec_label_pc_16af4
  %v1_16b04 = urem i32 %v2_16af8, 4
  store i32 %v1_16b04, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16b04 = icmp eq i32 %v1_16b04, 0
  store i1 %v2_16b04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16b04, label %dec_label_pc_16b0c, label %dec_label_pc_16bac

dec_label_pc_16b0c:                               ; preds = %dec_label_pc_16b04
  %v1_16b0c = urem i32 %v2_16af4, 4
  store i32 %v1_16b0c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16b0c = icmp eq i32 %v1_16b0c, 0
  store i1 %v2_16b0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16b0c, label %dec_label_pc_16b14, label %dec_label_pc_16bd8

dec_label_pc_16b14:                               ; preds = %dec_label_pc_16b0c, %dec_label_pc_16bd0
  %v0_16b2c37 = phi i32 [ %v2_16af8, %dec_label_pc_16b0c ], [ %v0_16c2020, %dec_label_pc_16bd0 ]
  %v0_16b2836 = phi i32 [ %v2_16af4, %dec_label_pc_16b0c ], [ %v0_16bd0, %dec_label_pc_16bd0 ]
  %v0_16b14 = phi i32 [ %v2_16afc, %dec_label_pc_16b0c ], [ %v2_16bc8, %dec_label_pc_16bd0 ]
  %v2_16b14 = add i32 %v0_16b14, -8
  store i32 %v2_16b14, i32* %r2.global-to-local, align 4
  %v4_16b14 = sub i32 7, %v0_16b14
  %v5_16b14 = and i32 %v4_16b14, %v0_16b14
  %v6_16b14 = icmp slt i32 %v5_16b14, 0
  store i1 %v6_16b14, i1* %cpsr_v.global-to-local, align 1
  %v7_16b14 = icmp slt i32 %v2_16b14, 0
  store i1 %v7_16b14, i1* %cpsr_n.global-to-local, align 1
  %v8_16b14 = icmp eq i32 %v0_16b14, 8
  store i1 %v8_16b14, i1* %cpsr_z.global-to-local, align 1
  %v5_16b18 = icmp slt i32 %v0_16b14, 8
  br i1 %v5_16b18, label %dec_label_pc_16b64, label %dec_label_pc_16b1c

dec_label_pc_16b1c:                               ; preds = %dec_label_pc_16b14
  %v3_16b1c = load i32, i32* @r4, align 4
  %v5_16b1c = inttoptr i32 %v3_16b1c to i8*
  store i8* %v5_16b1c, i8** %stack_var_-8, align 4
  %v8_16b1c = load i32, i32* @lr, align 4
  %v2_16b20 = add i32 %v0_16b14, -28
  store i32 %v2_16b20, i32* %r2.global-to-local, align 4
  %v4_16b20 = sub i32 27, %v0_16b14
  %v5_16b20 = and i32 %v4_16b20, %v2_16b14
  %v6_16b20 = icmp slt i32 %v5_16b20, 0
  store i1 %v6_16b20, i1* %cpsr_v.global-to-local, align 1
  %v7_16b20 = icmp slt i32 %v2_16b20, 0
  store i1 %v7_16b20, i1* %cpsr_n.global-to-local, align 1
  %v8_16b20 = icmp eq i32 %v2_16b14, 20
  store i1 %v8_16b20, i1* %cpsr_z.global-to-local, align 1
  %v5_16b24 = icmp slt i32 %v2_16b14, 20
  br i1 %v5_16b24, label %dec_label_pc_16b40, label %dec_label_pc_16b28

dec_label_pc_16b28:                               ; preds = %dec_label_pc_16b1c, %dec_label_pc_16b28.dec_label_pc_16b28_crit_edge
  %v0_16b2c = phi i32 [ %v1_16b34, %dec_label_pc_16b28.dec_label_pc_16b28_crit_edge ], [ %v0_16b2c37, %dec_label_pc_16b1c ]
  %v0_16b28 = phi i32 [ %v0_16b28.pre, %dec_label_pc_16b28.dec_label_pc_16b28_crit_edge ], [ %v0_16b2836, %dec_label_pc_16b1c ]
  %v1_16b28 = add i32 %v0_16b28, -4
  %v2_16b28 = inttoptr i32 %v1_16b28 to i32*
  %v3_16b28 = load i32, i32* %v2_16b28, align 4
  %v4_16b28 = add i32 %v0_16b28, -8
  %v5_16b28 = inttoptr i32 %v4_16b28 to i32*
  %v6_16b28 = load i32, i32* %v5_16b28, align 4
  store i32 %v6_16b28, i32* %r4.global-to-local, align 4
  %v7_16b28 = add i32 %v0_16b28, -12
  %v8_16b28 = inttoptr i32 %v7_16b28 to i32*
  %v9_16b28 = load i32, i32* %v8_16b28, align 4
  store i32 %v9_16b28, i32* %ip.global-to-local, align 4
  %v10_16b28 = add i32 %v0_16b28, -16
  %v11_16b28 = inttoptr i32 %v10_16b28 to i32*
  %v12_16b28 = load i32, i32* %v11_16b28, align 4
  store i32 %v12_16b28, i32* %lr.global-to-local, align 4
  store i32 %v10_16b28, i32* %r1.global-to-local, align 4
  %v1_16b2c = add i32 %v0_16b2c, -16
  %v2_16b2c = inttoptr i32 %v1_16b2c to i32*
  store i32 %v3_16b28, i32* %v2_16b2c, align 4
  %v4_16b2c = add i32 %v0_16b2c, -12
  %v5_16b2c = inttoptr i32 %v4_16b2c to i32*
  %v6_16b2c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_16b2c, i32* %v5_16b2c, align 4
  %v7_16b2c = add i32 %v0_16b2c, -8
  %v8_16b2c = inttoptr i32 %v7_16b2c to i32*
  %v9_16b2c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_16b2c, i32* %v8_16b2c, align 4
  %v10_16b2c = add i32 %v0_16b2c, -4
  %v11_16b2c = inttoptr i32 %v10_16b2c to i32*
  %v12_16b2c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16b2c, i32* %v11_16b2c, align 4
  store i32 %v1_16b2c, i32* %r0.global-to-local, align 4
  %v0_16b30 = load i32, i32* %r1.global-to-local, align 4
  %v1_16b30 = add i32 %v0_16b30, -4
  %v2_16b30 = inttoptr i32 %v1_16b30 to i32*
  %v3_16b30 = load i32, i32* %v2_16b30, align 4
  store i32 %v3_16b30, i32* @r3, align 4
  %v4_16b30 = add i32 %v0_16b30, -8
  %v5_16b30 = inttoptr i32 %v4_16b30 to i32*
  %v6_16b30 = load i32, i32* %v5_16b30, align 4
  store i32 %v6_16b30, i32* %r4.global-to-local, align 4
  %v7_16b30 = add i32 %v0_16b30, -12
  %v8_16b30 = inttoptr i32 %v7_16b30 to i32*
  %v9_16b30 = load i32, i32* %v8_16b30, align 4
  store i32 %v9_16b30, i32* @ip, align 4
  %v10_16b30 = add i32 %v0_16b30, -16
  %v11_16b30 = inttoptr i32 %v10_16b30 to i32*
  %v12_16b30 = load i32, i32* %v11_16b30, align 4
  store i32 %v12_16b30, i32* %lr.global-to-local, align 4
  store i32 %v10_16b30, i32* %r1.global-to-local, align 4
  %v1_16b34 = add i32 %v0_16b2c, -32
  %v2_16b34 = inttoptr i32 %v1_16b34 to i32*
  store i32 %v3_16b30, i32* %v2_16b34, align 4
  %v4_16b34 = add i32 %v0_16b2c, -28
  %v5_16b34 = inttoptr i32 %v4_16b34 to i32*
  %v6_16b34 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_16b34, i32* %v5_16b34, align 4
  %v7_16b34 = add i32 %v0_16b2c, -24
  %v8_16b34 = inttoptr i32 %v7_16b34 to i32*
  %v9_16b34 = load i32, i32* @ip, align 4
  store i32 %v9_16b34, i32* %v8_16b34, align 4
  %v10_16b34 = add i32 %v0_16b2c, -20
  %v11_16b34 = inttoptr i32 %v10_16b34 to i32*
  %v12_16b34 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16b34, i32* %v11_16b34, align 4
  store i32 %v1_16b34, i32* %r0.global-to-local, align 4
  %v0_16b38 = load i32, i32* %r2.global-to-local, align 4
  %v2_16b38 = add i32 %v0_16b38, -32
  store i32 %v2_16b38, i32* %r2.global-to-local, align 4
  %v6_16b3c = icmp slt i32 %v0_16b38, 32
  br i1 %v6_16b3c, label %dec_label_pc_16b40.loopexit, label %dec_label_pc_16b28.dec_label_pc_16b28_crit_edge

dec_label_pc_16b28.dec_label_pc_16b28_crit_edge:  ; preds = %dec_label_pc_16b28
  %v0_16b28.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16b28

dec_label_pc_16b40.loopexit:                      ; preds = %dec_label_pc_16b28
  %v4_16b38 = sub i32 31, %v0_16b38
  %v5_16b38 = and i32 %v4_16b38, %v0_16b38
  %v6_16b38 = icmp slt i32 %v5_16b38, 0
  %v7_16b38 = icmp slt i32 %v2_16b38, 0
  store i1 %v6_16b38, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16b38, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16b40

dec_label_pc_16b40:                               ; preds = %dec_label_pc_16b40.loopexit, %dec_label_pc_16b1c
  %v6_16b48 = phi i32 [ %v1_16b34, %dec_label_pc_16b40.loopexit ], [ %v0_16b2c37, %dec_label_pc_16b1c ]
  %v0_16b50.pr = phi i32 [ %v2_16b38, %dec_label_pc_16b40.loopexit ], [ %v2_16b20, %dec_label_pc_16b1c ]
  %v4_16b40 = add i32 %v0_16b50.pr, 16
  %v6_16b40 = sub i32 0, %v0_16b50.pr
  %v7_16b40 = and i32 %v4_16b40, %v6_16b40
  %v8_16b40 = icmp slt i32 %v7_16b40, 0
  store i1 %v8_16b40, i1* %cpsr_v.global-to-local, align 1
  %v9_16b40 = icmp slt i32 %v4_16b40, 0
  store i1 %v9_16b40, i1* %cpsr_n.global-to-local, align 1
  %v10_16b40 = icmp eq i32 %v4_16b40, 0
  store i1 %v10_16b40, i1* %cpsr_z.global-to-local, align 1
  %v5_16b44 = icmp slt i32 %v0_16b50.pr, -16
  br i1 %v5_16b44, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_16b40
  %v6_16b44 = load i32, i32* %r1.global-to-local, align 4
  %v7_16b44 = add i32 %v6_16b44, -4
  %v8_16b44 = inttoptr i32 %v7_16b44 to i32*
  %v9_16b44 = load i32, i32* %v8_16b44, align 4
  store i32 %v9_16b44, i32* @r3, align 4
  %v10_16b44 = add i32 %v6_16b44, -8
  %v11_16b44 = inttoptr i32 %v10_16b44 to i32*
  %v12_16b44 = load i32, i32* %v11_16b44, align 4
  store i32 %v12_16b44, i32* %r4.global-to-local, align 4
  %v13_16b44 = add i32 %v6_16b44, -12
  %v14_16b44 = inttoptr i32 %v13_16b44 to i32*
  %v15_16b44 = load i32, i32* %v14_16b44, align 4
  store i32 %v15_16b44, i32* @ip, align 4
  %v16_16b44 = add i32 %v6_16b44, -16
  %v17_16b44 = inttoptr i32 %v16_16b44 to i32*
  %v18_16b44 = load i32, i32* %v17_16b44, align 4
  store i32 %v18_16b44, i32* %lr.global-to-local, align 4
  store i32 %v16_16b44, i32* %r1.global-to-local, align 4
  %v7_16b48 = add i32 %v6_16b48, -16
  %v8_16b48 = inttoptr i32 %v7_16b48 to i32*
  store i32 %v9_16b44, i32* %v8_16b48, align 4
  %v10_16b48 = add i32 %v6_16b48, -12
  %v11_16b48 = inttoptr i32 %v10_16b48 to i32*
  %v12_16b48 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_16b48, i32* %v11_16b48, align 4
  %v13_16b48 = add i32 %v6_16b48, -8
  %v14_16b48 = inttoptr i32 %v13_16b48 to i32*
  %v15_16b48 = load i32, i32* @ip, align 4
  store i32 %v15_16b48, i32* %v14_16b48, align 4
  %v16_16b48 = add i32 %v6_16b48, -4
  %v17_16b48 = inttoptr i32 %v16_16b48 to i32*
  %v18_16b48 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_16b48, i32* %v17_16b48, align 4
  store i32 %v7_16b48, i32* %r0.global-to-local, align 4
  %v6_16b4c = load i32, i32* %r2.global-to-local, align 4
  %v7_16b4c = add i32 %v6_16b4c, -16
  store i32 %v7_16b4c, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_16b40, %bb147
  %v6_16b58 = phi i32 [ %v7_16b48, %bb147 ], [ %v6_16b48, %dec_label_pc_16b40 ]
  %v0_16b50 = phi i32 [ %v7_16b4c, %bb147 ], [ %v0_16b50.pr, %dec_label_pc_16b40 ]
  %v4_16b50 = add i32 %v0_16b50, 20
  store i32 %v4_16b50, i32* %r2.global-to-local, align 4
  %v6_16b50 = sub i32 0, %v0_16b50
  %v7_16b50 = and i32 %v4_16b50, %v6_16b50
  %v8_16b50 = icmp slt i32 %v7_16b50, 0
  store i1 %v8_16b50, i1* %cpsr_v.global-to-local, align 1
  %v9_16b50 = icmp slt i32 %v4_16b50, 0
  store i1 %v9_16b50, i1* %cpsr_n.global-to-local, align 1
  %v10_16b50 = icmp eq i32 %v4_16b50, 0
  store i1 %v10_16b50, i1* %cpsr_z.global-to-local, align 1
  %v5_16b54 = icmp slt i32 %v0_16b50, -20
  br i1 %v5_16b54, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_16b54 = load i32, i32* %r1.global-to-local, align 4
  %v7_16b54 = add i32 %v6_16b54, -4
  %v8_16b54 = inttoptr i32 %v7_16b54 to i32*
  %v9_16b54 = load i32, i32* %v8_16b54, align 4
  store i32 %v9_16b54, i32* @r3, align 4
  %v10_16b54 = add i32 %v6_16b54, -8
  %v11_16b54 = inttoptr i32 %v10_16b54 to i32*
  %v12_16b54 = load i32, i32* %v11_16b54, align 4
  store i32 %v12_16b54, i32* @ip, align 4
  %v13_16b54 = add i32 %v6_16b54, -12
  %v14_16b54 = inttoptr i32 %v13_16b54 to i32*
  %v15_16b54 = load i32, i32* %v14_16b54, align 4
  store i32 %v15_16b54, i32* %lr.global-to-local, align 4
  store i32 %v13_16b54, i32* %r1.global-to-local, align 4
  %v7_16b58 = add i32 %v6_16b58, -12
  %v8_16b58 = inttoptr i32 %v7_16b58 to i32*
  store i32 %v9_16b54, i32* %v8_16b58, align 4
  %v10_16b58 = add i32 %v6_16b58, -8
  %v11_16b58 = inttoptr i32 %v10_16b58 to i32*
  %v12_16b58 = load i32, i32* @ip, align 4
  store i32 %v12_16b58, i32* %v11_16b58, align 4
  %v13_16b58 = add i32 %v6_16b58, -4
  %v14_16b58 = inttoptr i32 %v13_16b58 to i32*
  %v15_16b58 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_16b58, i32* %v14_16b58, align 4
  store i32 %v7_16b58, i32* %r0.global-to-local, align 4
  %v6_16b5c = load i32, i32* %r2.global-to-local, align 4
  %v7_16b5c = add i32 %v6_16b5c, -12
  store i32 %v7_16b5c, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_16b7c45 = phi i32 [ %v6_16b58, %.thread2 ], [ %v7_16b58, %bb148 ]
  %v0_16b6443 = phi i32 [ %v4_16b50, %.thread2 ], [ %v7_16b5c, %bb148 ]
  %v2_16b60 = load i8*, i8** %stack_var_-8, align 4
  %v3_16b60 = ptrtoint i8* %v2_16b60 to i32
  store i32 %v3_16b60, i32* @r4, align 4
  store i32 %v8_16b1c, i32* @lr, align 4
  br label %dec_label_pc_16b64

dec_label_pc_16b64:                               ; preds = %dec_label_pc_16b14, %.thread4
  %v7_16b74 = phi i32 [ %v0_16b2c37, %dec_label_pc_16b14 ], [ %v6_16b7c45, %.thread4 ]
  %v0_16b64 = phi i32 [ %v2_16b14, %dec_label_pc_16b14 ], [ %v0_16b6443, %.thread4 ]
  %v2_16b64 = add i32 %v0_16b64, 8
  store i32 %v2_16b64, i32* %r2.global-to-local, align 4
  %v4_16b64 = sub i32 0, %v0_16b64
  %v5_16b64 = and i32 %v2_16b64, %v4_16b64
  %v6_16b64 = icmp slt i32 %v5_16b64, 0
  store i1 %v6_16b64, i1* %cpsr_v.global-to-local, align 1
  %v7_16b64 = icmp slt i32 %v2_16b64, 0
  store i1 %v7_16b64, i1* %cpsr_n.global-to-local, align 1
  %v8_16b64 = icmp eq i32 %v2_16b64, 0
  store i1 %v8_16b64, i1* %cpsr_z.global-to-local, align 1
  %v5_16b68 = icmp slt i32 %v0_16b64, -8
  br i1 %v5_16b68, label %bb150, label %dec_label_pc_16b6c

dec_label_pc_16b6c:                               ; preds = %dec_label_pc_16b64
  %v6_16b6c = add i32 %v0_16b64, 4
  store i32 %v6_16b6c, i32* %r2.global-to-local, align 4
  %v8_16b6c = sub i32 -5, %v0_16b64
  %v9_16b6c = and i32 %v8_16b6c, %v2_16b64
  %v10_16b6c = icmp slt i32 %v9_16b6c, 0
  store i1 %v10_16b6c, i1* %cpsr_v.global-to-local, align 1
  %v11_16b6c = icmp slt i32 %v6_16b6c, 0
  store i1 %v11_16b6c, i1* %cpsr_n.global-to-local, align 1
  %v12_16b6c = icmp eq i32 %v2_16b64, 4
  store i1 %v12_16b6c, i1* %cpsr_z.global-to-local, align 1
  %v5_16b70 = icmp slt i32 %v2_16b64, 4
  %v6_16b70 = load i32, i32* %r1.global-to-local, align 4
  %v7_16b70 = add i32 %v6_16b70, -4
  %v8_16b70 = inttoptr i32 %v7_16b70 to i32*
  %v9_16b70 = load i32, i32* %v8_16b70, align 4
  store i32 %v9_16b70, i32* @r3, align 4
  br i1 %v5_16b70, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_16b6c
  store i32 %v7_16b70, i32* %r1.global-to-local, align 4
  %v8_16b74 = add i32 %v7_16b74, -4
  %v9_16b74 = inttoptr i32 %v8_16b74 to i32*
  store i32 %v9_16b70, i32* %v9_16b74, align 4
  %v10_16b74 = load i32, i32* %r0.global-to-local, align 4
  %v11_16b74 = add i32 %v10_16b74, -4
  store i32 %v11_16b74, i32* %r0.global-to-local, align 4
  %v0_16b84.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_16b6c
  %v10_16b78 = add i32 %v6_16b70, -8
  %v11_16b78 = inttoptr i32 %v10_16b78 to i32*
  %v12_16b78 = load i32, i32* %v11_16b78, align 4
  store i32 %v12_16b78, i32* @ip, align 4
  store i32 %v10_16b78, i32* %r1.global-to-local, align 4
  %v7_16b7c = add i32 %v7_16b74, -8
  %v8_16b7c = inttoptr i32 %v7_16b7c to i32*
  store i32 %v9_16b70, i32* %v8_16b7c, align 4
  %v10_16b7c = add i32 %v7_16b74, -4
  %v11_16b7c = inttoptr i32 %v10_16b7c to i32*
  %v12_16b7c = load i32, i32* @ip, align 4
  store i32 %v12_16b7c, i32* %v11_16b7c, align 4
  store i32 %v7_16b7c, i32* %r0.global-to-local, align 4
  %v6_16b80 = load i32, i32* %r2.global-to-local, align 4
  %v7_16b80 = add i32 %v6_16b80, -4
  store i32 %v7_16b80, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %dec_label_pc_16b64, %dec_label_pc_16af4, %.thread14, %dec_label_pc_16d28, %dec_label_pc_16cbc, %dec_label_pc_16c50, %bb149
  %v2_16b88 = phi i32 [ %v11_16b74, %.thread8 ], [ %v7_16b74, %dec_label_pc_16b64 ], [ %v2_16af8, %dec_label_pc_16af4 ], [ %v0_16c2020, %.thread14 ], [ %v2_16b9453, %dec_label_pc_16d28 ], [ %v2_16b9452, %dec_label_pc_16cbc ], [ %v2_16b9451, %dec_label_pc_16c50 ], [ %v7_16b7c, %bb149 ]
  %v0_16b84 = phi i32 [ %v0_16b84.pre, %.thread8 ], [ %v2_16b64, %dec_label_pc_16b64 ], [ %v2_16afc, %dec_label_pc_16af4 ], [ %v2_16bc8, %.thread14 ], [ %v0_16b8449, %dec_label_pc_16d28 ], [ %v0_16b8448, %dec_label_pc_16cbc ], [ %v0_16b8447, %dec_label_pc_16c50 ], [ %v7_16b80, %bb149 ]
  %v1_16b84 = add i32 %v0_16b84, 4
  store i32 %v1_16b84, i32* %r2.global-to-local, align 4
  %v3_16b84 = sub i32 0, %v0_16b84
  %v4_16b84 = and i32 %v1_16b84, %v3_16b84
  %v5_16b84 = icmp slt i32 %v4_16b84, 0
  store i1 %v5_16b84, i1* %cpsr_v.global-to-local, align 1
  %v6_16b84 = icmp slt i32 %v1_16b84, 0
  store i1 %v6_16b84, i1* %cpsr_n.global-to-local, align 1
  %v7_16b84 = icmp eq i32 %v1_16b84, 0
  store i1 %v7_16b84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_16b84, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_16b8c = add i32 %v0_16b84, 2
  %v3_16b8c = sub i32 -3, %v0_16b84
  %v4_16b8c = and i32 %v3_16b8c, %v1_16b84
  %v5_16b8c = icmp slt i32 %v4_16b8c, 0
  store i1 %v5_16b8c, i1* %cpsr_v.global-to-local, align 1
  %v6_16b8c = icmp slt i32 %v1_16b8c, 0
  store i1 %v6_16b8c, i1* %cpsr_n.global-to-local, align 1
  %v7_16b8c = icmp eq i32 %v1_16b84, 2
  store i1 %v7_16b8c, i1* %cpsr_z.global-to-local, align 1
  %v0_16b90 = load i32, i32* %r1.global-to-local, align 4
  %v1_16b90 = add i32 %v0_16b90, -1
  %v2_16b90 = inttoptr i32 %v1_16b90 to i8*
  %v3_16b90 = load i8, i8* %v2_16b90, align 1
  %v4_16b90 = zext i8 %v3_16b90 to i32
  store i32 %v4_16b90, i32* @r3, align 4
  store i32 %v1_16b90, i32* %r1.global-to-local, align 4
  %v3_16b94 = add i32 %v2_16b88, -1
  %v4_16b94 = inttoptr i32 %v3_16b94 to i8*
  store i8 %v3_16b90, i8* %v4_16b94, align 1
  %v5_16b94 = load i32, i32* %r0.global-to-local, align 4
  %v6_16b94 = add i32 %v5_16b94, -1
  store i32 %v6_16b94, i32* %r0.global-to-local, align 4
  %v0_16b98 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_16b98 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_16b98 = xor i1 %v0_16b98, %v1_16b98
  br i1 %v2_16b98, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_16b98 = load i32, i32* %r1.global-to-local, align 4
  %v4_16b98 = add i32 %v3_16b98, -1
  %v5_16b98 = inttoptr i32 %v4_16b98 to i8*
  %v6_16b98 = load i8, i8* %v5_16b98, align 1
  %v7_16b98 = zext i8 %v6_16b98 to i32
  store i32 %v7_16b98, i32* @r3, align 4
  store i32 %v4_16b98, i32* %r1.global-to-local, align 4
  %v6_16b9c = add i32 %v5_16b94, -2
  %v7_16b9c = inttoptr i32 %v6_16b9c to i8*
  store i8 %v6_16b98, i8* %v7_16b9c, align 1
  %v8_16b9c = load i32, i32* %r0.global-to-local, align 4
  %v9_16b9c = add i32 %v8_16b9c, -1
  store i32 %v9_16b9c, i32* %r0.global-to-local, align 4
  %v1_16ba0.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_16ba0.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_16ba4 = phi i32 [ %v9_16b9c, %bb152 ], [ %v6_16b94, %bb151 ]
  %v2_16ba4 = phi i1 [ %v2_16ba0.pre, %bb152 ], [ %v1_16b98, %bb151 ]
  %v1_16ba4 = phi i1 [ %v1_16ba0.pre, %bb152 ], [ %v0_16b98, %bb151 ]
  %v0_16ba0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_16ba0 = xor i1 %v2_16ba4, %v1_16ba4
  %v4_16ba0 = or i1 %v0_16ba0, %v3_16ba0
  br i1 %v4_16ba0, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_16ba0 = load i32, i32* %r1.global-to-local, align 4
  %v6_16ba0 = add i32 %v5_16ba0, -1
  %v7_16ba0 = inttoptr i32 %v6_16ba0 to i8*
  %v8_16ba0 = load i8, i8* %v7_16ba0, align 1
  %v9_16ba0 = zext i8 %v8_16ba0 to i32
  store i32 %v9_16ba0, i32* @r3, align 4
  store i32 %v6_16ba0, i32* %r1.global-to-local, align 4
  %v8_16ba4 = add i32 %v7_16ba4, -1
  %v9_16ba4 = inttoptr i32 %v8_16ba4 to i8*
  store i8 %v8_16ba0, i8* %v9_16ba4, align 1
  %v10_16ba4 = load i32, i32* %r0.global-to-local, align 4
  %v11_16ba4 = add i32 %v10_16ba4, -1
  store i32 %v11_16ba4, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_16bac:                               ; preds = %dec_label_pc_16b04
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_16bac = icmp eq i32 %v1_16b04, 1
  store i1 %v8_16bac, i1* %cpsr_n.global-to-local, align 1
  %v9_16bac = icmp eq i32 %v1_16b04, 2
  store i1 %v9_16bac, i1* %cpsr_z.global-to-local, align 1
  %v1_16bb0 = add i32 %v2_16af4, -1
  %v2_16bb0 = inttoptr i32 %v1_16bb0 to i8*
  %v3_16bb0 = load i8, i8* %v2_16bb0, align 1
  %v4_16bb0 = zext i8 %v3_16bb0 to i32
  store i32 %v4_16bb0, i32* @r3, align 4
  store i32 %v1_16bb0, i32* %r1.global-to-local, align 4
  %v3_16bb4 = add i32 %v2_16af8, -1
  %v4_16bb4 = inttoptr i32 %v3_16bb4 to i8*
  store i8 %v3_16bb0, i8* %v4_16bb4, align 1
  %v5_16bb4 = load i32, i32* %r0.global-to-local, align 4
  %v6_16bb4 = add i32 %v5_16bb4, -1
  store i32 %v6_16bb4, i32* %r0.global-to-local, align 4
  br i1 %v8_16bac, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_16bac
  %v6_16bb8 = load i32, i32* %r1.global-to-local, align 4
  %v7_16bb8 = add i32 %v6_16bb8, -1
  %v8_16bb8 = inttoptr i32 %v7_16bb8 to i8*
  %v9_16bb8 = load i8, i8* %v8_16bb8, align 1
  %v10_16bb8 = zext i8 %v9_16bb8 to i32
  store i32 %v10_16bb8, i32* @r3, align 4
  store i32 %v7_16bb8, i32* %r1.global-to-local, align 4
  %v9_16bbc = add i32 %v5_16bb4, -2
  %v10_16bbc = inttoptr i32 %v9_16bbc to i8*
  store i8 %v9_16bb8, i8* %v10_16bbc, align 1
  %v11_16bbc = load i32, i32* %r0.global-to-local, align 4
  %v12_16bbc = add i32 %v11_16bbc, -1
  store i32 %v12_16bbc, i32* %r0.global-to-local, align 4
  br i1 %v9_16bac, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_16bc0 = load i32, i32* %r1.global-to-local, align 4
  %v9_16bc0 = add i32 %v8_16bc0, -1
  %v10_16bc0 = inttoptr i32 %v9_16bc0 to i8*
  %v11_16bc0 = load i8, i8* %v10_16bc0, align 1
  %v12_16bc0 = zext i8 %v11_16bc0 to i32
  store i32 %v12_16bc0, i32* @r3, align 4
  store i32 %v9_16bc0, i32* %r1.global-to-local, align 4
  %v11_16bc4 = add i32 %v11_16bbc, -2
  %v12_16bc4 = inttoptr i32 %v11_16bc4 to i8*
  store i8 %v11_16bc0, i8* %v12_16bc4, align 1
  %v13_16bc4 = load i32, i32* %r0.global-to-local, align 4
  %v14_16bc4 = add i32 %v13_16bc4, -1
  store i32 %v14_16bc4, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_16bac, %bb155
  %v0_16c2020 = phi i32 [ %v12_16bbc, %bb154 ], [ %v6_16bb4, %dec_label_pc_16bac ], [ %v14_16bc4, %bb155 ]
  %v0_16bc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_16bc8 = load i32, i32* @ip, align 4
  %v2_16bc8 = sub i32 %v0_16bc8, %v1_16bc8
  store i32 %v2_16bc8, i32* %r2.global-to-local, align 4
  %v4_16bc8 = xor i32 %v1_16bc8, %v0_16bc8
  %v5_16bc8 = xor i32 %v2_16bc8, %v0_16bc8
  %v6_16bc8 = and i32 %v5_16bc8, %v4_16bc8
  %v7_16bc8 = icmp slt i32 %v6_16bc8, 0
  store i1 %v7_16bc8, i1* %cpsr_v.global-to-local, align 1
  %v8_16bc8 = icmp slt i32 %v2_16bc8, 0
  store i1 %v8_16bc8, i1* %cpsr_n.global-to-local, align 1
  %v9_16bc8 = icmp eq i32 %v0_16bc8, %v1_16bc8
  store i1 %v9_16bc8, i1* %cpsr_z.global-to-local, align 1
  %v5_16bcc = icmp slt i32 %v0_16bc8, %v1_16bc8
  br i1 %v5_16bcc, label %bb150, label %dec_label_pc_16bd0

dec_label_pc_16bd0:                               ; preds = %.thread14
  %v0_16bd0 = load i32, i32* %r1.global-to-local, align 4
  %v1_16bd0 = urem i32 %v0_16bd0, 4
  store i32 %v1_16bd0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_16bd0 = icmp eq i32 %v1_16bd0, 0
  store i1 %v2_16bd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16bd0, label %dec_label_pc_16b14, label %dec_label_pc_16bd8

dec_label_pc_16bd8:                               ; preds = %dec_label_pc_16b0c, %dec_label_pc_16bd0
  %v0_16c2019 = phi i32 [ %v2_16af8, %dec_label_pc_16b0c ], [ %v0_16c2020, %dec_label_pc_16bd0 ]
  %v0_16ccc = phi i32 [ %v2_16afc, %dec_label_pc_16b0c ], [ %v2_16bc8, %dec_label_pc_16bd0 ]
  %v0_16bd8 = phi i32 [ %v2_16af4, %dec_label_pc_16b0c ], [ %v0_16bd0, %dec_label_pc_16bd0 ]
  %v0_16be0 = phi i32 [ %v1_16b0c, %dec_label_pc_16b0c ], [ %v1_16bd0, %dec_label_pc_16bd0 ]
  %v1_16bd8 = and i32 %v0_16bd8, -4
  store i32 %v1_16bd8, i32* %r1.global-to-local, align 4
  %v1_16bdc = inttoptr i32 %v1_16bd8 to i32*
  %v2_16bdc = load i32, i32* %v1_16bdc, align 4
  store i32 %v2_16bdc, i32* @r3, align 4
  %v7_16be0 = icmp ult i32 %v0_16be0, 2
  %v2_16cc4 = add i32 %v0_16ccc, -12
  %v4_16cc4 = sub i32 11, %v0_16ccc
  %v5_16cc4 = and i32 %v4_16cc4, %v0_16ccc
  %v6_16cc4 = icmp slt i32 %v5_16cc4, 0
  store i1 %v6_16cc4, i1* %cpsr_v.global-to-local, align 1
  %v7_16cc4 = icmp slt i32 %v2_16cc4, 0
  store i1 %v7_16cc4, i1* %cpsr_n.global-to-local, align 1
  %v8_16cc4 = icmp eq i32 %v0_16ccc, 12
  store i1 %v8_16cc4, i1* %cpsr_z.global-to-local, align 1
  %v5_16cc8 = icmp slt i32 %v0_16ccc, 12
  br i1 %v7_16be0, label %dec_label_pc_16cc4, label %dec_label_pc_16be8

dec_label_pc_16be8:                               ; preds = %dec_label_pc_16bd8
  %v8_16be0 = icmp eq i32 %v0_16be0, 2
  br i1 %v8_16be0, label %dec_label_pc_16c58, label %dec_label_pc_16bec

dec_label_pc_16bec:                               ; preds = %dec_label_pc_16be8
  br i1 %v5_16cc8, label %dec_label_pc_16c38, label %dec_label_pc_16bf4

dec_label_pc_16bf4:                               ; preds = %dec_label_pc_16bec
  store i32 %v2_16cc4, i32* %r2.global-to-local, align 4
  %v3_16bf8 = load i32, i32* @r4, align 4
  store i32 %v3_16bf8, i32* %stack_var_-12, align 4
  %v6_16bf8 = load i32, i32* @r5, align 4
  %v8_16bf8 = inttoptr i32 %v6_16bf8 to i8*
  store i8* %v8_16bf8, i8** %stack_var_-8, align 4
  %v11_16bf8 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16bfc

dec_label_pc_16bfc:                               ; preds = %dec_label_pc_16bfc.dec_label_pc_16bfc_crit_edge, %dec_label_pc_16bf4
  %v0_16c20 = phi i32 [ %v1_16c20, %dec_label_pc_16bfc.dec_label_pc_16bfc_crit_edge ], [ %v0_16c2019, %dec_label_pc_16bf4 ]
  %v0_16c00 = phi i32 [ %v0_16c00.pre, %dec_label_pc_16bfc.dec_label_pc_16bfc_crit_edge ], [ %v1_16bd8, %dec_label_pc_16bf4 ]
  %v0_16bfc = phi i32 [ %v0_16bfc.pre, %dec_label_pc_16bfc.dec_label_pc_16bfc_crit_edge ], [ %v2_16bdc, %dec_label_pc_16bf4 ]
  %v3_16bfc = mul i32 %v0_16bfc, 256
  store i32 %v3_16bfc, i32* %lr.global-to-local, align 4
  %v1_16c00 = add i32 %v0_16c00, -4
  %v2_16c00 = inttoptr i32 %v1_16c00 to i32*
  %v3_16c00 = load i32, i32* %v2_16c00, align 4
  store i32 %v3_16c00, i32* @r3, align 4
  %v4_16c00 = add i32 %v0_16c00, -8
  %v5_16c00 = inttoptr i32 %v4_16c00 to i32*
  %v6_16c00 = load i32, i32* %v5_16c00, align 4
  store i32 %v6_16c00, i32* %r4.global-to-local, align 4
  %v7_16c00 = add i32 %v0_16c00, -12
  %v8_16c00 = inttoptr i32 %v7_16c00 to i32*
  %v9_16c00 = load i32, i32* %v8_16c00, align 4
  store i32 %v9_16c00, i32* %r5.global-to-local, align 4
  %v10_16c00 = add i32 %v0_16c00, -16
  %v11_16c00 = inttoptr i32 %v10_16c00 to i32*
  %v12_16c00 = load i32, i32* %v11_16c00, align 4
  store i32 %v10_16c00, i32* %r1.global-to-local, align 4
  %v4_16c04 = udiv i32 %v12_16c00, 16777216
  %v5_16c04 = or i32 %v4_16c04, %v3_16bfc
  store i32 %v5_16c04, i32* %lr.global-to-local, align 4
  %v3_16c08 = mul i32 %v12_16c00, 256
  %v4_16c0c = udiv i32 %v9_16c00, 16777216
  %v5_16c0c = or i32 %v3_16c08, %v4_16c0c
  store i32 %v5_16c0c, i32* @ip, align 4
  %v3_16c10 = mul i32 %v9_16c00, 256
  %v4_16c14 = udiv i32 %v6_16c00, 16777216
  %v5_16c14 = or i32 %v3_16c10, %v4_16c14
  store i32 %v5_16c14, i32* %r5.global-to-local, align 4
  %v3_16c18 = mul i32 %v6_16c00, 256
  %v4_16c1c = udiv i32 %v3_16c00, 16777216
  %v5_16c1c = or i32 %v3_16c18, %v4_16c1c
  store i32 %v5_16c1c, i32* %r4.global-to-local, align 4
  %v1_16c20 = add i32 %v0_16c20, -16
  %v2_16c20 = inttoptr i32 %v1_16c20 to i32*
  store i32 %v5_16c1c, i32* %v2_16c20, align 4
  %v4_16c20 = add i32 %v0_16c20, -12
  %v5_16c20 = inttoptr i32 %v4_16c20 to i32*
  %v6_16c20 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16c20, i32* %v5_16c20, align 4
  %v7_16c20 = add i32 %v0_16c20, -8
  %v8_16c20 = inttoptr i32 %v7_16c20 to i32*
  %v9_16c20 = load i32, i32* @ip, align 4
  store i32 %v9_16c20, i32* %v8_16c20, align 4
  %v10_16c20 = add i32 %v0_16c20, -4
  %v11_16c20 = inttoptr i32 %v10_16c20 to i32*
  %v12_16c20 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16c20, i32* %v11_16c20, align 4
  store i32 %v1_16c20, i32* %r0.global-to-local, align 4
  %v0_16c24 = load i32, i32* %r2.global-to-local, align 4
  %v2_16c24 = add i32 %v0_16c24, -16
  store i32 %v2_16c24, i32* %r2.global-to-local, align 4
  %v6_16c28 = icmp slt i32 %v0_16c24, 16
  br i1 %v6_16c28, label %dec_label_pc_16c2c, label %dec_label_pc_16bfc.dec_label_pc_16bfc_crit_edge

dec_label_pc_16bfc.dec_label_pc_16bfc_crit_edge:  ; preds = %dec_label_pc_16bfc
  %v0_16bfc.pre = load i32, i32* @r3, align 4
  %v0_16c00.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16bfc

dec_label_pc_16c2c:                               ; preds = %dec_label_pc_16bfc
  %v2_16c2c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16c2c, i32* @r4, align 4
  %v5_16c2c = load i8*, i8** %stack_var_-8, align 4
  %v6_16c2c = ptrtoint i8* %v5_16c2c to i32
  store i32 %v6_16c2c, i32* @r5, align 4
  store i32 %v11_16bf8, i32* @lr, align 4
  %v2_16c30 = add i32 %v0_16c24, -4
  store i32 %v2_16c30, i32* %r2.global-to-local, align 4
  %v4_16c30 = add i32 %v0_16c24, 2147483632
  %v5_16c30 = and i32 %v2_16c30, %v4_16c30
  %v6_16c30 = icmp slt i32 %v5_16c30, 0
  store i1 %v6_16c30, i1* %cpsr_v.global-to-local, align 1
  %v7_16c30 = icmp slt i32 %v2_16c30, 0
  store i1 %v7_16c30, i1* %cpsr_n.global-to-local, align 1
  %v8_16c30 = icmp eq i32 %v2_16c30, 0
  store i1 %v8_16c30, i1* %cpsr_z.global-to-local, align 1
  %v5_16c34 = icmp slt i32 %v2_16c24, -12
  br i1 %v5_16c34, label %dec_label_pc_16c50, label %dec_label_pc_16c38

dec_label_pc_16c38:                               ; preds = %dec_label_pc_16c2c, %dec_label_pc_16bec, %dec_label_pc_16c38
  %v1_16c44 = phi i32 [ %v5_16c44, %dec_label_pc_16c38 ], [ %v1_16c20, %dec_label_pc_16c2c ], [ %v0_16c2019, %dec_label_pc_16bec ]
  %v0_16c38 = load i32, i32* @r3, align 4
  %v3_16c38 = mul i32 %v0_16c38, 256
  store i32 %v3_16c38, i32* %ip.global-to-local, align 4
  %v0_16c3c = load i32, i32* %r1.global-to-local, align 4
  %v1_16c3c = add i32 %v0_16c3c, -4
  %v2_16c3c = inttoptr i32 %v1_16c3c to i32*
  %v3_16c3c = load i32, i32* %v2_16c3c, align 4
  store i32 %v3_16c3c, i32* @r3, align 4
  store i32 %v1_16c3c, i32* %r1.global-to-local, align 4
  %v4_16c40 = udiv i32 %v3_16c3c, 16777216
  %v5_16c40 = or i32 %v4_16c40, %v3_16c38
  store i32 %v5_16c40, i32* @ip, align 4
  %v2_16c44 = add i32 %v1_16c44, -4
  %v3_16c44 = inttoptr i32 %v2_16c44 to i32*
  store i32 %v5_16c40, i32* %v3_16c44, align 4
  %v4_16c44 = load i32, i32* %r0.global-to-local, align 4
  %v5_16c44 = add i32 %v4_16c44, -4
  store i32 %v5_16c44, i32* %r0.global-to-local, align 4
  %v0_16c48 = load i32, i32* %r2.global-to-local, align 4
  %v2_16c48 = add i32 %v0_16c48, -4
  store i32 %v2_16c48, i32* %r2.global-to-local, align 4
  %v6_16c4c = icmp slt i32 %v0_16c48, 4
  br i1 %v6_16c4c, label %dec_label_pc_16c50.loopexit, label %dec_label_pc_16c38

dec_label_pc_16c50.loopexit:                      ; preds = %dec_label_pc_16c38
  %v4_16c48 = sub i32 3, %v0_16c48
  %v5_16c48 = and i32 %v4_16c48, %v0_16c48
  %v6_16c48 = icmp slt i32 %v5_16c48, 0
  %v7_16c48 = icmp slt i32 %v2_16c48, 0
  store i1 %v6_16c48, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16c48, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16c50

dec_label_pc_16c50:                               ; preds = %dec_label_pc_16c50.loopexit, %dec_label_pc_16c2c
  %v2_16b9451 = phi i32 [ %v5_16c44, %dec_label_pc_16c50.loopexit ], [ %v1_16c20, %dec_label_pc_16c2c ]
  %v0_16b8447 = phi i32 [ %v2_16c48, %dec_label_pc_16c50.loopexit ], [ %v2_16c30, %dec_label_pc_16c2c ]
  %v0_16c50 = load i32, i32* %r1.global-to-local, align 4
  %v1_16c50 = add i32 %v0_16c50, 3
  store i32 %v1_16c50, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_16c58:                               ; preds = %dec_label_pc_16be8
  br i1 %v5_16cc8, label %dec_label_pc_16ca4, label %dec_label_pc_16c60

dec_label_pc_16c60:                               ; preds = %dec_label_pc_16c58
  store i32 %v2_16cc4, i32* %r2.global-to-local, align 4
  %v3_16c64 = load i32, i32* @r4, align 4
  store i32 %v3_16c64, i32* %stack_var_-12, align 4
  %v6_16c64 = load i32, i32* @r5, align 4
  %v8_16c64 = inttoptr i32 %v6_16c64 to i8*
  store i8* %v8_16c64, i8** %stack_var_-8, align 4
  %v11_16c64 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16c68

dec_label_pc_16c68:                               ; preds = %dec_label_pc_16c68.dec_label_pc_16c68_crit_edge, %dec_label_pc_16c60
  %v0_16c8c = phi i32 [ %v1_16c8c, %dec_label_pc_16c68.dec_label_pc_16c68_crit_edge ], [ %v0_16c2019, %dec_label_pc_16c60 ]
  %v0_16c6c = phi i32 [ %v0_16c6c.pre, %dec_label_pc_16c68.dec_label_pc_16c68_crit_edge ], [ %v1_16bd8, %dec_label_pc_16c60 ]
  %v0_16c68 = phi i32 [ %v0_16c68.pre, %dec_label_pc_16c68.dec_label_pc_16c68_crit_edge ], [ %v2_16bdc, %dec_label_pc_16c60 ]
  %v3_16c68 = mul i32 %v0_16c68, 65536
  store i32 %v3_16c68, i32* %lr.global-to-local, align 4
  %v1_16c6c = add i32 %v0_16c6c, -4
  %v2_16c6c = inttoptr i32 %v1_16c6c to i32*
  %v3_16c6c = load i32, i32* %v2_16c6c, align 4
  store i32 %v3_16c6c, i32* @r3, align 4
  %v4_16c6c = add i32 %v0_16c6c, -8
  %v5_16c6c = inttoptr i32 %v4_16c6c to i32*
  %v6_16c6c = load i32, i32* %v5_16c6c, align 4
  store i32 %v6_16c6c, i32* %r4.global-to-local, align 4
  %v7_16c6c = add i32 %v0_16c6c, -12
  %v8_16c6c = inttoptr i32 %v7_16c6c to i32*
  %v9_16c6c = load i32, i32* %v8_16c6c, align 4
  store i32 %v9_16c6c, i32* %r5.global-to-local, align 4
  %v10_16c6c = add i32 %v0_16c6c, -16
  %v11_16c6c = inttoptr i32 %v10_16c6c to i32*
  %v12_16c6c = load i32, i32* %v11_16c6c, align 4
  store i32 %v10_16c6c, i32* %r1.global-to-local, align 4
  %v4_16c70 = udiv i32 %v12_16c6c, 65536
  %v5_16c70 = or i32 %v4_16c70, %v3_16c68
  store i32 %v5_16c70, i32* %lr.global-to-local, align 4
  %v3_16c74 = mul i32 %v12_16c6c, 65536
  %v4_16c78 = udiv i32 %v9_16c6c, 65536
  %v5_16c78 = or i32 %v3_16c74, %v4_16c78
  store i32 %v5_16c78, i32* @ip, align 4
  %v3_16c7c = mul i32 %v9_16c6c, 65536
  %v4_16c80 = udiv i32 %v6_16c6c, 65536
  %v5_16c80 = or i32 %v3_16c7c, %v4_16c80
  store i32 %v5_16c80, i32* %r5.global-to-local, align 4
  %v3_16c84 = mul i32 %v6_16c6c, 65536
  %v4_16c88 = udiv i32 %v3_16c6c, 65536
  %v5_16c88 = or i32 %v3_16c84, %v4_16c88
  store i32 %v5_16c88, i32* %r4.global-to-local, align 4
  %v1_16c8c = add i32 %v0_16c8c, -16
  %v2_16c8c = inttoptr i32 %v1_16c8c to i32*
  store i32 %v5_16c88, i32* %v2_16c8c, align 4
  %v4_16c8c = add i32 %v0_16c8c, -12
  %v5_16c8c = inttoptr i32 %v4_16c8c to i32*
  %v6_16c8c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16c8c, i32* %v5_16c8c, align 4
  %v7_16c8c = add i32 %v0_16c8c, -8
  %v8_16c8c = inttoptr i32 %v7_16c8c to i32*
  %v9_16c8c = load i32, i32* @ip, align 4
  store i32 %v9_16c8c, i32* %v8_16c8c, align 4
  %v10_16c8c = add i32 %v0_16c8c, -4
  %v11_16c8c = inttoptr i32 %v10_16c8c to i32*
  %v12_16c8c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16c8c, i32* %v11_16c8c, align 4
  store i32 %v1_16c8c, i32* %r0.global-to-local, align 4
  %v0_16c90 = load i32, i32* %r2.global-to-local, align 4
  %v2_16c90 = add i32 %v0_16c90, -16
  store i32 %v2_16c90, i32* %r2.global-to-local, align 4
  %v6_16c94 = icmp slt i32 %v0_16c90, 16
  br i1 %v6_16c94, label %dec_label_pc_16c98, label %dec_label_pc_16c68.dec_label_pc_16c68_crit_edge

dec_label_pc_16c68.dec_label_pc_16c68_crit_edge:  ; preds = %dec_label_pc_16c68
  %v0_16c68.pre = load i32, i32* @r3, align 4
  %v0_16c6c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16c68

dec_label_pc_16c98:                               ; preds = %dec_label_pc_16c68
  %v2_16c98 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16c98, i32* @r4, align 4
  %v5_16c98 = load i8*, i8** %stack_var_-8, align 4
  %v6_16c98 = ptrtoint i8* %v5_16c98 to i32
  store i32 %v6_16c98, i32* @r5, align 4
  store i32 %v11_16c64, i32* @lr, align 4
  %v2_16c9c = add i32 %v0_16c90, -4
  store i32 %v2_16c9c, i32* %r2.global-to-local, align 4
  %v4_16c9c = add i32 %v0_16c90, 2147483632
  %v5_16c9c = and i32 %v2_16c9c, %v4_16c9c
  %v6_16c9c = icmp slt i32 %v5_16c9c, 0
  store i1 %v6_16c9c, i1* %cpsr_v.global-to-local, align 1
  %v7_16c9c = icmp slt i32 %v2_16c9c, 0
  store i1 %v7_16c9c, i1* %cpsr_n.global-to-local, align 1
  %v8_16c9c = icmp eq i32 %v2_16c9c, 0
  store i1 %v8_16c9c, i1* %cpsr_z.global-to-local, align 1
  %v5_16ca0 = icmp slt i32 %v2_16c90, -12
  br i1 %v5_16ca0, label %dec_label_pc_16cbc, label %dec_label_pc_16ca4

dec_label_pc_16ca4:                               ; preds = %dec_label_pc_16c98, %dec_label_pc_16c58, %dec_label_pc_16ca4
  %v1_16cb0 = phi i32 [ %v5_16cb0, %dec_label_pc_16ca4 ], [ %v1_16c8c, %dec_label_pc_16c98 ], [ %v0_16c2019, %dec_label_pc_16c58 ]
  %v0_16ca4 = load i32, i32* @r3, align 4
  %v3_16ca4 = mul i32 %v0_16ca4, 65536
  store i32 %v3_16ca4, i32* %ip.global-to-local, align 4
  %v0_16ca8 = load i32, i32* %r1.global-to-local, align 4
  %v1_16ca8 = add i32 %v0_16ca8, -4
  %v2_16ca8 = inttoptr i32 %v1_16ca8 to i32*
  %v3_16ca8 = load i32, i32* %v2_16ca8, align 4
  store i32 %v3_16ca8, i32* @r3, align 4
  store i32 %v1_16ca8, i32* %r1.global-to-local, align 4
  %v4_16cac = udiv i32 %v3_16ca8, 65536
  %v5_16cac = or i32 %v4_16cac, %v3_16ca4
  store i32 %v5_16cac, i32* @ip, align 4
  %v2_16cb0 = add i32 %v1_16cb0, -4
  %v3_16cb0 = inttoptr i32 %v2_16cb0 to i32*
  store i32 %v5_16cac, i32* %v3_16cb0, align 4
  %v4_16cb0 = load i32, i32* %r0.global-to-local, align 4
  %v5_16cb0 = add i32 %v4_16cb0, -4
  store i32 %v5_16cb0, i32* %r0.global-to-local, align 4
  %v0_16cb4 = load i32, i32* %r2.global-to-local, align 4
  %v2_16cb4 = add i32 %v0_16cb4, -4
  store i32 %v2_16cb4, i32* %r2.global-to-local, align 4
  %v6_16cb8 = icmp slt i32 %v0_16cb4, 4
  br i1 %v6_16cb8, label %dec_label_pc_16cbc.loopexit, label %dec_label_pc_16ca4

dec_label_pc_16cbc.loopexit:                      ; preds = %dec_label_pc_16ca4
  %v4_16cb4 = sub i32 3, %v0_16cb4
  %v5_16cb4 = and i32 %v4_16cb4, %v0_16cb4
  %v6_16cb4 = icmp slt i32 %v5_16cb4, 0
  %v7_16cb4 = icmp slt i32 %v2_16cb4, 0
  store i1 %v6_16cb4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16cb4, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16cbc

dec_label_pc_16cbc:                               ; preds = %dec_label_pc_16cbc.loopexit, %dec_label_pc_16c98
  %v2_16b9452 = phi i32 [ %v5_16cb0, %dec_label_pc_16cbc.loopexit ], [ %v1_16c8c, %dec_label_pc_16c98 ]
  %v0_16b8448 = phi i32 [ %v2_16cb4, %dec_label_pc_16cbc.loopexit ], [ %v2_16c9c, %dec_label_pc_16c98 ]
  %v0_16cbc = load i32, i32* %r1.global-to-local, align 4
  %v1_16cbc = add i32 %v0_16cbc, 2
  store i32 %v1_16cbc, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_16cc4:                               ; preds = %dec_label_pc_16bd8
  br i1 %v5_16cc8, label %dec_label_pc_16d10, label %dec_label_pc_16ccc

dec_label_pc_16ccc:                               ; preds = %dec_label_pc_16cc4
  store i32 %v2_16cc4, i32* %r2.global-to-local, align 4
  %v3_16cd0 = load i32, i32* @r4, align 4
  store i32 %v3_16cd0, i32* %stack_var_-12, align 4
  %v6_16cd0 = load i32, i32* @r5, align 4
  %v8_16cd0 = inttoptr i32 %v6_16cd0 to i8*
  store i8* %v8_16cd0, i8** %stack_var_-8, align 4
  %v11_16cd0 = load i32, i32* @lr, align 4
  br label %dec_label_pc_16cd4

dec_label_pc_16cd4:                               ; preds = %dec_label_pc_16cd4.dec_label_pc_16cd4_crit_edge, %dec_label_pc_16ccc
  %v0_16cf8 = phi i32 [ %v1_16cf8, %dec_label_pc_16cd4.dec_label_pc_16cd4_crit_edge ], [ %v0_16c2019, %dec_label_pc_16ccc ]
  %v0_16cd8 = phi i32 [ %v0_16cd8.pre, %dec_label_pc_16cd4.dec_label_pc_16cd4_crit_edge ], [ %v1_16bd8, %dec_label_pc_16ccc ]
  %v0_16cd4 = phi i32 [ %v0_16cd4.pre, %dec_label_pc_16cd4.dec_label_pc_16cd4_crit_edge ], [ %v2_16bdc, %dec_label_pc_16ccc ]
  %v3_16cd4 = mul i32 %v0_16cd4, 16777216
  store i32 %v3_16cd4, i32* %lr.global-to-local, align 4
  %v1_16cd8 = add i32 %v0_16cd8, -4
  %v2_16cd8 = inttoptr i32 %v1_16cd8 to i32*
  %v3_16cd8 = load i32, i32* %v2_16cd8, align 4
  store i32 %v3_16cd8, i32* @r3, align 4
  %v4_16cd8 = add i32 %v0_16cd8, -8
  %v5_16cd8 = inttoptr i32 %v4_16cd8 to i32*
  %v6_16cd8 = load i32, i32* %v5_16cd8, align 4
  store i32 %v6_16cd8, i32* %r4.global-to-local, align 4
  %v7_16cd8 = add i32 %v0_16cd8, -12
  %v8_16cd8 = inttoptr i32 %v7_16cd8 to i32*
  %v9_16cd8 = load i32, i32* %v8_16cd8, align 4
  store i32 %v9_16cd8, i32* %r5.global-to-local, align 4
  %v10_16cd8 = add i32 %v0_16cd8, -16
  %v11_16cd8 = inttoptr i32 %v10_16cd8 to i32*
  %v12_16cd8 = load i32, i32* %v11_16cd8, align 4
  store i32 %v10_16cd8, i32* %r1.global-to-local, align 4
  %v4_16cdc = udiv i32 %v12_16cd8, 256
  %v5_16cdc = or i32 %v4_16cdc, %v3_16cd4
  store i32 %v5_16cdc, i32* %lr.global-to-local, align 4
  %v3_16ce0 = mul i32 %v12_16cd8, 16777216
  %v4_16ce4 = udiv i32 %v9_16cd8, 256
  %v5_16ce4 = or i32 %v3_16ce0, %v4_16ce4
  store i32 %v5_16ce4, i32* @ip, align 4
  %v3_16ce8 = mul i32 %v9_16cd8, 16777216
  %v4_16cec = udiv i32 %v6_16cd8, 256
  %v5_16cec = or i32 %v3_16ce8, %v4_16cec
  store i32 %v5_16cec, i32* %r5.global-to-local, align 4
  %v3_16cf0 = mul i32 %v6_16cd8, 16777216
  %v4_16cf4 = udiv i32 %v3_16cd8, 256
  %v5_16cf4 = or i32 %v3_16cf0, %v4_16cf4
  store i32 %v5_16cf4, i32* %r4.global-to-local, align 4
  %v1_16cf8 = add i32 %v0_16cf8, -16
  %v2_16cf8 = inttoptr i32 %v1_16cf8 to i32*
  store i32 %v5_16cf4, i32* %v2_16cf8, align 4
  %v4_16cf8 = add i32 %v0_16cf8, -12
  %v5_16cf8 = inttoptr i32 %v4_16cf8 to i32*
  %v6_16cf8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_16cf8, i32* %v5_16cf8, align 4
  %v7_16cf8 = add i32 %v0_16cf8, -8
  %v8_16cf8 = inttoptr i32 %v7_16cf8 to i32*
  %v9_16cf8 = load i32, i32* @ip, align 4
  store i32 %v9_16cf8, i32* %v8_16cf8, align 4
  %v10_16cf8 = add i32 %v0_16cf8, -4
  %v11_16cf8 = inttoptr i32 %v10_16cf8 to i32*
  %v12_16cf8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_16cf8, i32* %v11_16cf8, align 4
  store i32 %v1_16cf8, i32* %r0.global-to-local, align 4
  %v0_16cfc = load i32, i32* %r2.global-to-local, align 4
  %v2_16cfc = add i32 %v0_16cfc, -16
  store i32 %v2_16cfc, i32* %r2.global-to-local, align 4
  %v6_16d00 = icmp slt i32 %v0_16cfc, 16
  br i1 %v6_16d00, label %dec_label_pc_16d04, label %dec_label_pc_16cd4.dec_label_pc_16cd4_crit_edge

dec_label_pc_16cd4.dec_label_pc_16cd4_crit_edge:  ; preds = %dec_label_pc_16cd4
  %v0_16cd4.pre = load i32, i32* @r3, align 4
  %v0_16cd8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16cd4

dec_label_pc_16d04:                               ; preds = %dec_label_pc_16cd4
  %v2_16d04 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16d04, i32* @r4, align 4
  %v5_16d04 = load i8*, i8** %stack_var_-8, align 4
  %v6_16d04 = ptrtoint i8* %v5_16d04 to i32
  store i32 %v6_16d04, i32* @r5, align 4
  store i32 %v11_16cd0, i32* @lr, align 4
  %v2_16d08 = add i32 %v0_16cfc, -4
  store i32 %v2_16d08, i32* %r2.global-to-local, align 4
  %v4_16d08 = add i32 %v0_16cfc, 2147483632
  %v5_16d08 = and i32 %v2_16d08, %v4_16d08
  %v6_16d08 = icmp slt i32 %v5_16d08, 0
  store i1 %v6_16d08, i1* %cpsr_v.global-to-local, align 1
  %v7_16d08 = icmp slt i32 %v2_16d08, 0
  store i1 %v7_16d08, i1* %cpsr_n.global-to-local, align 1
  %v8_16d08 = icmp eq i32 %v2_16d08, 0
  store i1 %v8_16d08, i1* %cpsr_z.global-to-local, align 1
  %v5_16d0c = icmp slt i32 %v2_16cfc, -12
  br i1 %v5_16d0c, label %dec_label_pc_16d28, label %dec_label_pc_16d10

dec_label_pc_16d10:                               ; preds = %dec_label_pc_16d04, %dec_label_pc_16cc4, %dec_label_pc_16d10
  %v1_16d1c = phi i32 [ %v5_16d1c, %dec_label_pc_16d10 ], [ %v1_16cf8, %dec_label_pc_16d04 ], [ %v0_16c2019, %dec_label_pc_16cc4 ]
  %v0_16d10 = load i32, i32* @r3, align 4
  %v3_16d10 = mul i32 %v0_16d10, 16777216
  store i32 %v3_16d10, i32* %ip.global-to-local, align 4
  %v0_16d14 = load i32, i32* %r1.global-to-local, align 4
  %v1_16d14 = add i32 %v0_16d14, -4
  %v2_16d14 = inttoptr i32 %v1_16d14 to i32*
  %v3_16d14 = load i32, i32* %v2_16d14, align 4
  store i32 %v3_16d14, i32* @r3, align 4
  store i32 %v1_16d14, i32* %r1.global-to-local, align 4
  %v4_16d18 = udiv i32 %v3_16d14, 256
  %v5_16d18 = or i32 %v4_16d18, %v3_16d10
  store i32 %v5_16d18, i32* @ip, align 4
  %v2_16d1c = add i32 %v1_16d1c, -4
  %v3_16d1c = inttoptr i32 %v2_16d1c to i32*
  store i32 %v5_16d18, i32* %v3_16d1c, align 4
  %v4_16d1c = load i32, i32* %r0.global-to-local, align 4
  %v5_16d1c = add i32 %v4_16d1c, -4
  store i32 %v5_16d1c, i32* %r0.global-to-local, align 4
  %v0_16d20 = load i32, i32* %r2.global-to-local, align 4
  %v2_16d20 = add i32 %v0_16d20, -4
  store i32 %v2_16d20, i32* %r2.global-to-local, align 4
  %v6_16d24 = icmp slt i32 %v0_16d20, 4
  br i1 %v6_16d24, label %dec_label_pc_16d28.loopexit, label %dec_label_pc_16d10

dec_label_pc_16d28.loopexit:                      ; preds = %dec_label_pc_16d10
  %v4_16d20 = sub i32 3, %v0_16d20
  %v5_16d20 = and i32 %v4_16d20, %v0_16d20
  %v6_16d20 = icmp slt i32 %v5_16d20, 0
  %v7_16d20 = icmp slt i32 %v2_16d20, 0
  store i1 %v6_16d20, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_16d20, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_16d28

dec_label_pc_16d28:                               ; preds = %dec_label_pc_16d28.loopexit, %dec_label_pc_16d04
  %v2_16b9453 = phi i32 [ %v5_16d1c, %dec_label_pc_16d28.loopexit ], [ %v1_16cf8, %dec_label_pc_16d04 ]
  %v0_16b8449 = phi i32 [ %v2_16d20, %dec_label_pc_16d28.loopexit ], [ %v2_16d08, %dec_label_pc_16d04 ]
  %v0_16d28 = load i32, i32* %r1.global-to-local, align 4
  %v1_16d28 = add i32 %v0_16d28, 1
  store i32 %v1_16d28, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_16d1c, { 0, 2, 1 }
  uselistorder i32 %v3_16d10, { 1, 0 }
  uselistorder i32 %v2_16d08, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16cf8, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16cd8, { 1, 0 }
  uselistorder i32 %v3_16cd4, { 1, 0 }
  uselistorder i32 %v0_16cd8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16cf8, { 3, 2, 1, 0 }
  uselistorder i32 %v5_16cb0, { 0, 2, 1 }
  uselistorder i32 %v3_16ca4, { 1, 0 }
  uselistorder i32 %v2_16c9c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16c8c, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16c6c, { 1, 0 }
  uselistorder i32 %v3_16c68, { 1, 0 }
  uselistorder i32 %v0_16c6c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16c8c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_16c44, { 0, 2, 1 }
  uselistorder i32 %v3_16c38, { 1, 0 }
  uselistorder i32 %v2_16c30, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16c20, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_16c00, { 1, 0 }
  uselistorder i32 %v3_16bfc, { 1, 0 }
  uselistorder i32 %v0_16c00, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16c20, { 3, 2, 1, 0 }
  uselistorder i1 %v5_16cc8, { 2, 0, 1 }
  uselistorder i32 %v0_16be0, { 1, 0 }
  uselistorder i32 %v0_16ccc, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_16c2019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_16bd0, { 2, 1, 0 }
  uselistorder i32 %v0_16bd0, { 2, 0, 1 }
  uselistorder i32 %v2_16bc8, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_16bc8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_16bc8, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_16c2020, { 2, 1, 0 }
  uselistorder i32 %v11_16ba4, { 1, 0 }
  uselistorder i32 %v7_16ba4, { 1, 0 }
  uselistorder i32 %v1_16b84, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_16b84, { 1, 2, 0, 3 }
  uselistorder i32 %v2_16b88, { 1, 0 }
  uselistorder i32 %v7_16b7c, { 0, 2, 1 }
  uselistorder i32 %v10_16b78, { 1, 0 }
  uselistorder i32 %v9_16b70, { 1, 0, 2 }
  uselistorder i32 %v6_16b6c, { 1, 0 }
  uselistorder i32 %v2_16b64, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_16b64, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_16b74, { 0, 3, 2, 1 }
  uselistorder i32 %v7_16b58, { 0, 2, 1 }
  uselistorder i32 %v13_16b54, { 1, 0 }
  uselistorder i32 %v4_16b50, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_16b50, { 2, 0, 1 }
  uselistorder i32 %v6_16b58, { 0, 3, 2, 1 }
  uselistorder i32 %v7_16b48, { 0, 2, 1 }
  uselistorder i32 %v16_16b44, { 1, 0 }
  uselistorder i32 %v4_16b40, { 1, 2, 0 }
  uselistorder i32 %v0_16b50.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_16b48, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_16b34, { 0, 3, 2, 1 }
  uselistorder i32 %v10_16b30, { 1, 0 }
  uselistorder i32 %v1_16b2c, { 1, 0 }
  uselistorder i32 %v10_16b28, { 1, 0 }
  uselistorder i32 %v0_16b28, { 3, 2, 1, 0 }
  uselistorder i32 %v0_16b2c, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_16b20, { 0, 2, 1 }
  uselistorder i32 %v2_16b14, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_16b14, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_16b2c37, { 1, 2, 0 }
  uselistorder i32 %v1_16b0c, { 2, 1, 0 }
  uselistorder i32 %v1_16b04, { 2, 3, 1, 0 }
  uselistorder i32 %v2_16afc, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_16af8, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_16af4, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_16af4, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_16ae4, { 0, 2, 1 }
  uselistorder i32 %v4_16ae0, { 1, 0 }
  uselistorder i32 %v3_16ad4, { 1, 0 }
  uselistorder i32 %v1_16acc, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16ac0, { 1, 0 }
  uselistorder i32 %v12_16abc, { 0, 2, 1 }
  uselistorder i32 %v8_16a9c, { 1, 0, 2 }
  uselistorder i32 %v5_16a9c, { 1, 0, 2 }
  uselistorder i32 %v2_16a9c, { 1, 0, 2 }
  uselistorder i32 %v0_16a9c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16abc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_16a78, { 0, 2, 1 }
  uselistorder i32 %v4_16a74, { 1, 0 }
  uselistorder i32 %v3_16a68, { 1, 0 }
  uselistorder i32 %v1_16a60, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_16a54, { 1, 0 }
  uselistorder i32 %v12_16a50, { 0, 2, 1 }
  uselistorder i32 %v8_16a30, { 1, 0, 2 }
  uselistorder i32 %v5_16a30, { 1, 0, 2 }
  uselistorder i32 %v2_16a30, { 1, 0, 2 }
  uselistorder i32 %v0_16a30, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_16a50, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_16a0c, { 0, 2, 1 }
  uselistorder i32 %v4_16a08, { 1, 0 }
  uselistorder i32 %v3_169fc, { 1, 0 }
  uselistorder i32 %v1_169f4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_169e8, { 1, 0 }
  uselistorder i32 %v12_169e4, { 0, 2, 1 }
  uselistorder i32 %v8_169c4, { 1, 0, 2 }
  uselistorder i32 %v5_169c4, { 1, 0, 2 }
  uselistorder i32 %v2_169c4, { 1, 0, 2 }
  uselistorder i32 %v0_169c4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_169e4, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_16a20, { 0, 2, 1 }
  uselistorder i32 %v1_16a1c, { 2, 0, 1, 3 }
  uselistorder i32 %v4_169a0, { 2, 0, 1, 3 }
  uselistorder i32 %v2_169a0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_16a24, { 1, 0, 3, 2 }
  uselistorder i32 %v0_16abc76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_16994, { 1, 0 }
  uselistorder i32 %v0_16994, { 3, 1, 0, 2 }
  uselistorder i32 %v2_1698c, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_1698c, { 1, 0, 2 }
  uselistorder i32 %v0_1698c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_16abc77, { 1, 0 }
  uselistorder i32 %v1_1696c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_16974, { 1, 0 }
  uselistorder i32 %v0_16948, { 3, 0, 1, 2 }
  uselistorder i32 %v1_1693c, { 1, 2, 0, 3 }
  uselistorder i32 %v5_16928, { 1, 0, 2 }
  uselistorder i32 %v1_16924, { 1, 0 }
  uselistorder i32 %v1_1691c, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_1691c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_16914, { 0, 2, 1 }
  uselistorder i32 %v3_16914, { 3, 0, 1, 2 }
  uselistorder i1 %v0_16914, { 1, 0 }
  uselistorder i1 %v1_16914, { 1, 0 }
  uselistorder i32 %v3_16910, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_16908, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_168f4, { 1, 2, 0 }
  uselistorder i32 %v1_168ec, { 0, 2, 1 }
  uselistorder i32 %v12_168e8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_168dc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_168e0, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_168d0, { 0, 2, 1 }
  uselistorder i32 %v1_168c8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_168c8, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_168c0, { 1, 0 }
  uselistorder i32 %v1_168b8, { 2, 1, 0 }
  uselistorder i32 %v2_168b0, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_168b0, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_168ac, { 1, 0 }
  uselistorder i32 %v2_168a0, { 1, 0 }
  uselistorder i32 %v1_168a0, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_168a0, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 26, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* %r2.global-to-local, { 0, 69, 1, 2, 3, 4, 5, 70, 6, 7, 8, 9, 10, 71, 11, 12, 67, 68, 72, 28, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 29, 30, 62, 31, 32, 33, 34, 35, 63, 36, 37, 38, 39, 40, 64, 41, 42, 43, 44, 45, 65, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 56, 2, 4, 6, 8, 5, 57, 7, 9, 11, 54, 10, 58, 53, 55, 59, 62, 60, 66, 67, 12, 13, 14, 16, 15, 17, 18, 61, 19, 20, 63, 21, 64, 22, 65, 23, 24, 25, 26, 27, 30, 28, 40, 29, 31, 34, 32, 41, 33, 35, 38, 36, 42, 37, 39, 43, 44, 47, 45, 48, 46, 49, 50, 51, 52 }
  uselistorder i32* %r0.global-to-local, { 0, 28, 1, 2, 29, 3, 4, 30, 5, 27, 33, 34, 6, 7, 19, 8, 10, 9, 11, 12, 31, 13, 14, 32, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 26 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 35, 36, 37, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 15, 16, 17, 24, 18, 19, 20, 25, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i1* %cpsr_z.global-to-local, { 5, 7, 6, 9, 2, 10, 8, 46, 47, 11, 12, 13, 14, 15, 16, 17, 18, 4, 19, 20, 21, 22, 23, 1, 24, 3, 25, 0, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i1* %cpsr_v.global-to-local, { 5, 7, 6, 9, 2, 10, 8, 44, 11, 12, 13, 14, 15, 16, 17, 18, 19, 4, 20, 21, 22, 1, 23, 3, 24, 0, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i1* %cpsr_n.global-to-local, { 5, 7, 6, 9, 2, 10, 8, 49, 50, 11, 12, 13, 14, 15, 16, 17, 18, 19, 4, 20, 21, 22, 23, 24, 1, 25, 3, 26, 0, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -3, { 0, 4, 5, 3, 1, 2 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 15, { 8, 9, 10, 0, 18, 1, 19, 11, 12, 3, 13, 14, 4, 5, 6, 15, 7, 16, 2, 17 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 29, 2, 4, 5, 3, 6, 7, 8, 9, 16, 34, 39, 37, 38, 36, 30, 31, 20, 21, 32, 33, 35, 22, 23, 24, 25, 17, 26, 11, 12, 10, 13, 14, 15, 27, 28, 18, 19, 0, 1 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 11, { 7, 8, 9, 17, 23, 25, 0, 10, 11, 12, 13, 2, 14, 15, 16, 18, 19, 3, 20, 4, 21, 1, 22, 5, 26, 27, 28, 6, 29, 24 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 3, 5, 4, 23 }
  uselistorder i32 48, { 0, 3, 5, 15, 4, 6, 7, 17, 18, 11, 12, 13, 14, 21, 22, 23, 19, 24, 8, 16, 20, 1, 9, 25, 2, 26, 10, 27 }
  uselistorder i32 40, { 2, 9, 11, 1, 4, 3, 10, 12, 5, 13, 14, 15, 16, 17, 18, 20, 19, 0, 6, 21, 7, 22, 8, 23 }
  uselistorder i32 36, { 4, 21, 5, 6, 7, 22, 8, 19, 9, 20, 10, 11, 12, 0, 1, 13, 2, 14, 3, 15, 16, 17, 18 }
  uselistorder i32 -16, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
  uselistorder i32 31, { 4, 5, 10, 0, 6, 1, 7, 2, 8, 9, 3 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1, 6, 5 }
  uselistorder i32 24, { 0, 64, 65, 66, 67, 10, 11, 12, 14, 13, 15, 1, 16, 68, 69, 70, 17, 71, 18, 19, 72, 20, 63, 99, 100, 59, 60, 61, 62, 21, 22, 23, 24, 117, 118, 25, 121, 26, 2, 27, 101, 102, 28, 103, 56, 57, 29, 92, 93, 78, 94, 89, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 30, 84, 31, 85, 32, 86, 87, 88, 90, 91, 95, 96, 97, 98, 33, 34, 35, 36, 3, 37, 38, 8, 104, 105, 39, 40, 4, 41, 106, 42, 43, 44, 9, 107, 45, 46, 47, 108, 48, 5, 109, 110, 111, 112, 49, 50, 113, 51, 114, 52, 6, 115, 7, 53, 116, 54, 58, 119, 55, 120 }
  uselistorder i32 27, { 1, 0, 2, 6, 3, 7, 4, 8, 5, 9 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32* @lr, { 175, 176, 177, 178, 179, 180, 181, 182, 183, 3, 4, 5, 6, 7, 8, 9, 10, 11, 2, 114, 115, 184, 185, 12, 13, 116, 117, 118, 119, 120, 121, 104, 105, 106, 122, 135, 136, 123, 124, 125, 126, 127, 128, 129, 1, 130, 131, 133, 134, 132, 32, 33, 34, 35, 36, 37, 137, 138, 139, 140, 107, 141, 15, 16, 14, 17, 18, 19, 0, 23, 24, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 85, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 108, 109, 110, 111, 172, 173, 174, 112, 113 }
  uselistorder label %dec_label_pc_16d10, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16ca4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16c38, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16bd8, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 3, 7, 0, 1, 2 }
  uselistorder label %dec_label_pc_16b64, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_16b28, { 1, 0 }
  uselistorder label %dec_label_pc_16b14, { 1, 0 }
  uselistorder label %dec_label_pc_16ad4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_16a68, { 2, 0, 1 }
  uselistorder label %dec_label_pc_169fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1699c, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_1696c, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_16908, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_168c8, { 1, 0 }
}

define i32 @function_16d30(i32 %arg1) local_unnamed_addr {
dec_label_pc_16d30:
  %v1_16d30 = and i32 %arg1, -4
  %v1_16d34 = inttoptr i32 %v1_16d30 to i32*
  %v2_16d34 = load i32, i32* %v1_16d34, align 4
  %v1_16d38 = urem i32 %arg1, 4
  store i32 %v1_16d38, i32* @r3, align 4
  %v2_16d38 = icmp eq i32 %v1_16d38, 0
  %v1_16d3c = sub nsw i32 0, %v1_16d38
  br i1 %v2_16d38, label %.preheader.preheader, label %dec_label_pc_16d44

dec_label_pc_16d44:                               ; preds = %dec_label_pc_16d30
  %v1_16d44 = or i32 %v2_16d34, 255
  %v7_16d48 = icmp eq i32 %v1_16d38, 1
  br i1 %v7_16d48, label %bb33, label %bb

bb:                                               ; preds = %dec_label_pc_16d44
  %v9_16d4c = or i32 %v2_16d34, 65535
  br label %bb33

bb33:                                             ; preds = %dec_label_pc_16d44, %bb
  %v8_16d54 = phi i32 [ %v1_16d44, %dec_label_pc_16d44 ], [ %v9_16d4c, %bb ]
  %v1_16d50 = add nsw i32 %v1_16d38, -2
  store i32 %v1_16d50, i32* @r3, align 4
  %v7_16d54 = icmp eq i32 %v1_16d38, 3
  br i1 %v7_16d54, label %bb34, label %.preheader.preheader

bb34:                                             ; preds = %bb33
  %v9_16d54 = or i32 %v8_16d54, 16711680
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %bb33, %bb34, %dec_label_pc_16d30
  %v1_16d64.ph = phi i32 [ %v2_16d34, %dec_label_pc_16d30 ], [ %v9_16d54, %bb34 ], [ %v8_16d54, %bb33 ]
  %v1_16d5838 = urem i32 %v1_16d64.ph, 256
  %v2_16d5839 = icmp eq i32 %v1_16d5838, 0
  %v2_16d5c40 = and i32 %v1_16d64.ph, 65280
  %v3_16d5c41 = icmp eq i32 %v2_16d5c40, 0
  %or.cond42 = or i1 %v2_16d5839, %v3_16d5c41
  %v2_16d6043 = and i32 %v1_16d64.ph, 16711680
  %v3_16d6044 = icmp eq i32 %v2_16d6043, 0
  %or.cond3145 = or i1 %v3_16d6044, %or.cond42
  %v4_16d6446 = icmp ult i32 %v1_16d64.ph, 16777216
  %or.cond3247 = or i1 %v4_16d6446, %or.cond3145
  br i1 %or.cond3247, label %dec_label_pc_16d74, label %.thread4

.thread4:                                         ; preds = %.preheader.preheader, %.thread4
  %v1_16d681349 = phi i32 [ %v2_16d6814, %.thread4 ], [ %v1_16d3c, %.preheader.preheader ]
  %v1_16d6c48.in = phi i32 [ %v1_16d6c48, %.thread4 ], [ %v1_16d30, %.preheader.preheader ]
  %v1_16d6c48 = add i32 %v1_16d6c48.in, 4
  %v2_16d6814 = add i32 %v1_16d681349, 4
  %v2_16d6c = inttoptr i32 %v1_16d6c48 to i32*
  %v3_16d6c = load i32, i32* %v2_16d6c, align 4
  %v1_16d58 = urem i32 %v3_16d6c, 256
  %v2_16d58 = icmp eq i32 %v1_16d58, 0
  %v2_16d5c = and i32 %v3_16d6c, 65280
  %v3_16d5c = icmp eq i32 %v2_16d5c, 0
  %or.cond = or i1 %v2_16d58, %v3_16d5c
  %v2_16d60 = and i32 %v3_16d6c, 16711680
  %v3_16d60 = icmp eq i32 %v2_16d60, 0
  %or.cond31 = or i1 %v3_16d60, %or.cond
  %v4_16d64 = icmp ult i32 %v3_16d6c, 16777216
  %or.cond32 = or i1 %v4_16d64, %or.cond31
  br i1 %or.cond32, label %dec_label_pc_16d74, label %.thread4

dec_label_pc_16d74:                               ; preds = %.thread4, %.preheader.preheader
  %v1_16d6813.lcssa = phi i32 [ %v1_16d3c, %.preheader.preheader ], [ %v2_16d6814, %.thread4 ]
  %v2_16d58.lcssa = phi i1 [ %v2_16d5839, %.preheader.preheader ], [ %v2_16d58, %.thread4 ]
  %v3_16d5c.lcssa = phi i1 [ %v3_16d5c41, %.preheader.preheader ], [ %v3_16d5c, %.thread4 ]
  %v3_16d60.lcssa = phi i1 [ %v3_16d6044, %.preheader.preheader ], [ %v3_16d60, %.thread4 ]
  br i1 %v2_16d58.lcssa, label %.thread10, label %bb35

bb35:                                             ; preds = %dec_label_pc_16d74
  %v2_16d78 = add i32 %v1_16d6813.lcssa, 1
  br i1 %v3_16d5c.lcssa, label %.thread10, label %bb36

bb36:                                             ; preds = %bb35
  %v2_16d8017 = add i32 %v1_16d6813.lcssa, 2
  br i1 %v3_16d60.lcssa, label %.thread10, label %bb37

bb37:                                             ; preds = %bb36
  %v2_16d88 = add i32 %v1_16d6813.lcssa, 3
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_16d74, %bb35, %bb36, %bb37
  %v1_16d8c = phi i32 [ %v2_16d78, %bb35 ], [ %v2_16d8017, %bb36 ], [ %v2_16d88, %bb37 ], [ %v1_16d6813.lcssa, %dec_label_pc_16d74 ]
  ret i32 %v1_16d8c

; uselistorder directives
  uselistorder i32 %v1_16d6813.lcssa, { 1, 3, 2, 0 }
  uselistorder i32 %v3_16d6c, { 3, 2, 1, 0 }
  uselistorder i32 %v1_16d64.ph, { 1, 2, 3, 0 }
  uselistorder i32 %v1_16d38, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 16711680, { 2, 0, 5, 1, 4, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 19 }
  uselistorder i32 -2, { 1, 3, 4, 2, 12, 13, 14, 0, 5, 28, 27, 29, 30, 31, 20, 21, 22, 23, 24, 25, 26, 15, 16, 17, 18, 19, 11, 10, 9, 8, 7, 6 }
  uselistorder i32 65535, { 2, 93, 94, 0, 1, 13, 12, 3, 4, 44, 45, 24, 46, 23, 47, 15, 14, 5, 26, 48, 25, 49, 51, 16, 50, 6, 52, 53, 28, 54, 27, 55, 56, 57, 58, 29, 59, 60, 17, 61, 7, 32, 62, 63, 64, 31, 65, 30, 66, 68, 18, 67, 8, 69, 70, 36, 71, 33, 72, 34, 73, 35, 74, 19, 75, 76, 37, 77, 38, 78, 81, 82, 20, 79, 80, 9, 41, 83, 39, 84, 40, 85, 87, 21, 86, 10, 11, 88, 89, 43, 90, 42, 91, 22, 92 }
  uselistorder i32 -4, { 40, 17, 61, 62, 63, 6, 18, 19, 20, 64, 65, 66, 7, 21, 22, 23, 67, 68, 69, 8, 24, 25, 70, 16, 15, 71, 72, 73, 14, 13, 12, 11, 26, 27, 28, 29, 30, 5, 31, 3, 32, 4, 74, 10, 33, 48, 49, 50, 9, 51, 52, 53, 34, 47, 2, 35, 41, 42, 43, 44, 45, 46, 0, 1, 54, 55, 56, 57, 58, 59, 60, 36, 37, 38, 39 }
  uselistorder label %.thread10, { 3, 2, 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0, 2 }
  uselistorder label %bb33, { 1, 0 }
}

define i32 @function_16d90(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_16d94.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_16d90

dec_label_pc_16d90:                               ; preds = %bb3, %bb
  %v0_16d94 = phi i32 [ %v0_16d94.pre, %bb ], [ %v5_16d94, %bb3 ]
  %v0_16d90 = phi i32 [ %tmp, %bb ], [ %v5_16d90, %bb3 ]
  %v1_16d90 = inttoptr i32 %v0_16d90 to i8*
  %v2_16d90 = load i8, i8* %v1_16d90, align 1
  %v1_16d94 = inttoptr i32 %v0_16d94 to i8*
  %v2_16d94 = load i8, i8* %v1_16d94, align 1
  %v3_16d94 = zext i8 %v2_16d94 to i32
  %v2_16d98 = icmp eq i8 %v2_16d90, 0
  br i1 %v2_16d98, label %.dec_label_pc_16da4_crit_edge, label %bb3

bb3:                                              ; preds = %dec_label_pc_16d90
  %v5_16d94 = add i32 %v0_16d94, 1
  %v5_16d90 = add i32 %v0_16d90, 1
  %v3_16d90 = zext i8 %v2_16d90 to i32
  %v10_16d9c = icmp eq i8 %v2_16d90, %v2_16d94
  br i1 %v10_16d9c, label %dec_label_pc_16d90, label %dec_label_pc_16da4

.dec_label_pc_16da4_crit_edge:                    ; preds = %dec_label_pc_16d90
  br label %dec_label_pc_16da4

dec_label_pc_16da4:                               ; preds = %bb3, %.dec_label_pc_16da4_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_16da4_crit_edge ], [ %v3_16d90, %bb3 ]
  %v2_16da4.pre-phi = sub nsw i32 %.pn, %v3_16d94
  ret i32 %v2_16da4.pre-phi

; uselistorder directives
  uselistorder i8 %v2_16d90, { 0, 2, 1 }
  uselistorder i32 %v0_16d90, { 1, 0 }
  uselistorder i32 %v0_16d94, { 1, 0 }
  uselistorder label %dec_label_pc_16da4, { 1, 0 }
}

define i32 @function_16db0() local_unnamed_addr {
dec_label_pc_16db0:
  %stack_var_-16 = alloca i32, align 4
  %v3_16db0 = load i32, i32* @r4, align 4
  store i32 %v3_16db0, i32* %stack_var_-16, align 4
  %v6_16db0 = load i32, i32* @r5, align 4
  %v9_16db0 = load i32, i32* @r6, align 4
  %v0_16db4 = load i32, i32* @r0, align 4
  %v0_16db8 = load i32, i32* @r1, align 4
  store i32 %v0_16db8, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_16dd48 = inttoptr i32 %v0_16db4 to i8*
  %v2_16dd49 = load i8, i8* %v1_16dd48, align 1
  %v2_16dd811 = icmp eq i8 %v2_16dd49, 0
  store i32 %v0_16db8, i32* @r0, align 4
  %v1_16de012 = add i32 %v0_16db4, 1
  store i32 %v1_16de012, i32* @r4, align 4
  br i1 %v2_16dd811, label %dec_label_pc_16de8, label %dec_label_pc_16dc4

dec_label_pc_16dc4:                               ; preds = %dec_label_pc_16db0, %dec_label_pc_16dd0
  %v3_16dd414.in = phi i8 [ %v2_16dd4, %dec_label_pc_16dd0 ], [ %v2_16dd49, %dec_label_pc_16db0 ]
  %v0_16ddc13 = phi i32 [ %v0_16ddc.pre, %dec_label_pc_16dd0 ], [ %v0_16db8, %dec_label_pc_16db0 ]
  %v3_16dd414 = zext i8 %v3_16dd414.in to i32
  %v2_16dc4 = call i32 @function_16f7c(i32 %v0_16ddc13, i32 %v3_16dd414)
  %v2_16dc8 = icmp eq i32 %v2_16dc4, 0
  %v0_16dd0 = load i32, i32* @r5, align 4
  br i1 %v2_16dc8, label %dec_label_pc_16dd0, label %dec_label_pc_16de8

dec_label_pc_16dd0:                               ; preds = %dec_label_pc_16dc4
  %v1_16dd0 = add i32 %v0_16dd0, 1
  %v0_16dd4.pre = load i32, i32* @r4, align 4
  %v0_16ddc.pre = load i32, i32* @r6, align 4
  store i32 %v1_16dd0, i32* @r5, align 4
  %v1_16dd4 = inttoptr i32 %v0_16dd4.pre to i8*
  %v2_16dd4 = load i8, i8* %v1_16dd4, align 1
  %v2_16dd8 = icmp eq i8 %v2_16dd4, 0
  store i32 %v0_16ddc.pre, i32* @r0, align 4
  %v1_16de0 = add i32 %v0_16dd4.pre, 1
  store i32 %v1_16de0, i32* @r4, align 4
  br i1 %v2_16dd8, label %dec_label_pc_16de8, label %dec_label_pc_16dc4

dec_label_pc_16de8:                               ; preds = %dec_label_pc_16dd0, %dec_label_pc_16dc4, %dec_label_pc_16db0
  %v0_16de8 = phi i32 [ 0, %dec_label_pc_16db0 ], [ %v0_16dd0, %dec_label_pc_16dc4 ], [ %v1_16dd0, %dec_label_pc_16dd0 ]
  %v2_16dec = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_16dec, i32* @r4, align 4
  store i32 %v6_16db0, i32* @r5, align 4
  store i32 %v9_16db0, i32* @r6, align 4
  ret i32 %v0_16de8

; uselistorder directives
  uselistorder i8 %v2_16dd4, { 1, 0 }
  uselistorder i32 %v0_16ddc.pre, { 1, 0 }
  uselistorder i32 %v0_16dd4.pre, { 1, 0 }
  uselistorder i32* @r6, { 25, 0, 26, 27, 1, 28, 29, 30, 2, 31, 32, 20, 21, 33, 34, 3, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 4, 5, 52, 53, 54, 55, 56, 57, 58, 59, 22, 23, 24, 6, 7, 8, 425, 426, 427, 428, 429, 430, 431, 60, 9, 61, 10, 62, 423, 424, 312, 316, 317, 318, 319, 313, 314, 315, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 320, 345, 346, 347, 321, 322, 323, 324, 325, 11, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 343, 337, 338, 339, 340, 342, 344, 73, 74, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 68, 69, 70, 71, 66, 72, 63, 64, 65, 67, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 259, 260, 261, 262, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 12, 138, 139, 140, 141, 142, 143, 157, 158, 159, 160, 17, 161, 162, 163, 13, 164, 165, 166, 170, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 181, 178, 179, 180, 182, 183, 184, 185, 186, 187, 192, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 204, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 216, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 229, 226, 227, 228, 230, 231, 232, 233, 240, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 252, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 263, 264, 265, 271, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 19, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 18, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 14, 15, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 16, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311 }
  uselistorder label %dec_label_pc_16dc4, { 1, 0 }
}

define i32 @function_16df4(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_16df4:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_16e242 = load i32, i32* @r0, align 4
  %v1_16e243 = inttoptr i32 %v0_16e242 to i8*
  %v2_16e244 = load i8, i8* %v1_16e243, align 1
  %v3_16e245 = zext i8 %v2_16e244 to i32
  store i32 %v3_16e245, i32* @ip, align 4
  %v2_16e286 = icmp eq i8 %v2_16e244, 0
  br i1 %v2_16e286, label %dec_label_pc_16e34, label %dec_label_pc_16e08.preheader

dec_label_pc_16e00:                               ; preds = %dec_label_pc_16e08
  %v3_16e08 = zext i8 %v2_16e08 to i32
  %v1_16e10 = add i32 %v0_16e10, 1
  %v9_16e00 = icmp eq i32 %v0_16e0010, %v3_16e08
  br i1 %v9_16e00, label %dec_label_pc_16e1c, label %dec_label_pc_16e08

dec_label_pc_16e08:                               ; preds = %dec_label_pc_16e08.preheader, %dec_label_pc_16e00
  %v0_16e10 = phi i32 [ %tmp, %dec_label_pc_16e08.preheader ], [ %v1_16e10, %dec_label_pc_16e00 ]
  %v1_16e08 = inttoptr i32 %v0_16e10 to i8*
  %v2_16e08 = load i8, i8* %v1_16e08, align 1
  %v2_16e0c = icmp eq i8 %v2_16e08, 0
  br i1 %v2_16e0c, label %dec_label_pc_16e34, label %dec_label_pc_16e00

dec_label_pc_16e1c:                               ; preds = %dec_label_pc_16e00
  %v1_16e1c = add i32 %v0_16e1c, 1
  %v1_16e20 = add i32 %v0_16e20, 1
  %v1_16e24 = inttoptr i32 %v1_16e20 to i8*
  %v2_16e24 = load i8, i8* %v1_16e24, align 1
  %v3_16e24 = zext i8 %v2_16e24 to i32
  store i32 %v3_16e24, i32* @ip, align 4
  %v2_16e28 = icmp eq i8 %v2_16e24, 0
  br i1 %v2_16e28, label %dec_label_pc_16e34, label %dec_label_pc_16e08.preheader

dec_label_pc_16e08.preheader:                     ; preds = %dec_label_pc_16df4, %dec_label_pc_16e1c
  %v0_16e20 = phi i32 [ %v1_16e20, %dec_label_pc_16e1c ], [ %v0_16e242, %dec_label_pc_16df4 ]
  %v0_16e1c = phi i32 [ %v1_16e1c, %dec_label_pc_16e1c ], [ 0, %dec_label_pc_16df4 ]
  %v0_16e0010 = phi i32 [ %v3_16e24, %dec_label_pc_16e1c ], [ %v3_16e245, %dec_label_pc_16df4 ]
  br label %dec_label_pc_16e08

dec_label_pc_16e34:                               ; preds = %dec_label_pc_16e1c, %dec_label_pc_16e08, %dec_label_pc_16df4
  %v0_16e34 = phi i32 [ 0, %dec_label_pc_16df4 ], [ %v0_16e1c, %dec_label_pc_16e08 ], [ %v1_16e1c, %dec_label_pc_16e1c ]
  ret i32 %v0_16e34

; uselistorder directives
  uselistorder i32 %v0_16e10, { 1, 0 }
  uselistorder label %dec_label_pc_16e08.preheader, { 1, 0 }
}

define i32 @function_16e40(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_16e40:
  store i32 %arg1, i32* @r0, align 4
  %v1_16e44 = urem i32 %arg2, 256
  store i32 %v1_16e44, i32* @r4, align 4
  %v2_16e44 = icmp eq i32 %v1_16e44, 0
  br i1 %v2_16e44, label %dec_label_pc_16e58, label %dec_label_pc_16e6c.preheader

dec_label_pc_16e6c.preheader:                     ; preds = %dec_label_pc_16e40
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_16e743 = call i32 @function_16f7c(i32 %arg1, i32 %v1_16e44)
  %v2_16e785 = icmp eq i32 %v2_16e743, 0
  br i1 %v2_16e785, label %dec_label_pc_16e80, label %dec_label_pc_16e64

dec_label_pc_16e58:                               ; preds = %dec_label_pc_16e40
  %v2_16e5c = call i32 @function_16f7c(i32 %arg1, i32 0)
  br label %dec_label_pc_16e84

dec_label_pc_16e64:                               ; preds = %dec_label_pc_16e6c.preheader, %dec_label_pc_16e64
  %v2_16e746 = phi i32 [ %v2_16e74, %dec_label_pc_16e64 ], [ %v2_16e743, %dec_label_pc_16e6c.preheader ]
  store i32 %v2_16e746, i32* @r5, align 4
  %v1_16e68 = add i32 %v2_16e746, 1
  store i32 %v1_16e68, i32* @r0, align 4
  %v0_16e70 = load i32, i32* @r4, align 4
  %v2_16e74 = call i32 @function_16f7c(i32 %v1_16e68, i32 %v0_16e70)
  %v2_16e78 = icmp eq i32 %v2_16e74, 0
  br i1 %v2_16e78, label %dec_label_pc_16e80, label %dec_label_pc_16e64

dec_label_pc_16e80:                               ; preds = %dec_label_pc_16e64, %dec_label_pc_16e6c.preheader
  %v0_16e80 = load i32, i32* @r5, align 4
  br label %dec_label_pc_16e84

dec_label_pc_16e84:                               ; preds = %dec_label_pc_16e58, %dec_label_pc_16e80
  %storemerge = phi i32 [ %v2_16e5c, %dec_label_pc_16e58 ], [ %v0_16e80, %dec_label_pc_16e80 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_16e74, { 1, 0 }
  uselistorder i32 %v1_16e68, { 1, 0 }
  uselistorder i32 %v1_16e44, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_16f7c, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_16e84, { 1, 0 }
  uselistorder label %dec_label_pc_16e64, { 1, 0 }
}

define i32 @function_16e90(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_16e90:
  %v1_16e94 = urem i32 %arg1, 256
  %v0_16eb42 = load i32, i32* @r0, align 4
  %v1_16eb43 = urem i32 %v0_16eb42, 4
  %v2_16eb44 = icmp eq i32 %v1_16eb43, 0
  br i1 %v2_16eb44, label %dec_label_pc_16ebc, label %dec_label_pc_16e9c

dec_label_pc_16e9c:                               ; preds = %dec_label_pc_16e90, %dec_label_pc_16eb0
  %v0_16eb0 = phi i32 [ %v1_16eb0, %dec_label_pc_16eb0 ], [ %v0_16eb42, %dec_label_pc_16e90 ]
  %v1_16e9c = inttoptr i32 %v0_16eb0 to i8*
  %v2_16e9c = load i8, i8* %v1_16e9c, align 1
  %v3_16e9c = zext i8 %v2_16e9c to i32
  %v9_16ea0 = icmp eq i32 %v3_16e9c, %v1_16e94
  br i1 %v9_16ea0, label %dec_label_pc_16f6c, label %dec_label_pc_16ea8

dec_label_pc_16ea8:                               ; preds = %dec_label_pc_16e9c
  %v2_16ea8 = icmp eq i8 %v2_16e9c, 0
  br i1 %v2_16ea8, label %dec_label_pc_16f6c, label %dec_label_pc_16eb0

dec_label_pc_16eb0:                               ; preds = %dec_label_pc_16ea8
  %v1_16eb0 = add i32 %v0_16eb0, 1
  %v1_16eb4 = urem i32 %v1_16eb0, 4
  %v2_16eb4 = icmp eq i32 %v1_16eb4, 0
  br i1 %v2_16eb4, label %dec_label_pc_16ebc, label %dec_label_pc_16e9c

dec_label_pc_16ebc:                               ; preds = %dec_label_pc_16eb0, %dec_label_pc_16e90
  %v0_16ec0 = phi i32 [ %v0_16eb42, %dec_label_pc_16e90 ], [ %v1_16eb0, %dec_label_pc_16eb0 ]
  %v4_16ebc = mul nuw nsw i32 %v1_16e94, 256
  %v5_16ebc = or i32 %v4_16ebc, %v1_16e94
  %v4_16ec4 = mul i32 %v5_16ebc, 65536
  %v5_16ec4 = or i32 %v4_16ec4, %v5_16ebc
  br label %dec_label_pc_16ec8

dec_label_pc_16ec8:                               ; preds = %dec_label_pc_16f64, %dec_label_pc_16f04, %dec_label_pc_16ebc
  %v0_16f2c = phi i32 [ %v0_16ec0, %dec_label_pc_16ebc ], [ %v4_16ec8, %dec_label_pc_16f04 ], [ %v4_16ec8, %dec_label_pc_16f64 ]
  %v1_16ec8 = inttoptr i32 %v0_16f2c to i32*
  %v2_16ec8 = load i32, i32* %v1_16ec8, align 4
  %v4_16ec8 = add i32 %v0_16f2c, 4
  %v2_16ed0 = xor i32 %v2_16ec8, %v5_16ec4
  %v2_16ed4 = add i32 %v2_16ed0, 2130640639
  store i32 %v2_16ed4, i32* @ip, align 4
  %v2_16edc = add i32 %v2_16ec8, 2130640639
  %v1_16ee0 = sub i32 -1, %v2_16ec8
  %v2_16ee4 = xor i32 %v2_16edc, %v1_16ee0
  %v2_16ef0 = and i32 %v2_16ee4, -2130640640
  %v2_16ef8 = icmp eq i32 %v2_16ef0, 0
  br i1 %v2_16ef8, label %dec_label_pc_16f04, label %dec_label_pc_16f0c

dec_label_pc_16f04:                               ; preds = %dec_label_pc_16ec8
  %v1_16eec = sub i32 -1, %v2_16ed0
  %v2_16ef4 = xor i32 %v2_16ed4, %v1_16eec
  %v2_16efc = and i32 %v2_16ef4, -2130640640
  %v2_16f04 = icmp eq i32 %v2_16efc, 0
  br i1 %v2_16f04, label %dec_label_pc_16ec8, label %dec_label_pc_16f0c

dec_label_pc_16f0c:                               ; preds = %dec_label_pc_16ec8, %dec_label_pc_16f04
  %v2_16f0c = inttoptr i32 %v0_16f2c to i8*
  %v3_16f0c = load i8, i8* %v2_16f0c, align 1
  %v4_16f0c = zext i8 %v3_16f0c to i32
  %v9_16f10 = icmp eq i32 %v4_16f0c, %v1_16e94
  br i1 %v9_16f10, label %dec_label_pc_16f6c, label %dec_label_pc_16f1c

dec_label_pc_16f1c:                               ; preds = %dec_label_pc_16f0c
  %v2_16f1c = icmp eq i8 %v3_16f0c, 0
  br i1 %v2_16f1c, label %dec_label_pc_16f6c, label %dec_label_pc_16f24

dec_label_pc_16f24:                               ; preds = %dec_label_pc_16f1c
  %v1_16f24 = add i32 %v0_16f2c, 1
  %v2_16f24 = inttoptr i32 %v1_16f24 to i8*
  %v3_16f24 = load i8, i8* %v2_16f24, align 1
  %v4_16f24 = zext i8 %v3_16f24 to i32
  %v9_16f28 = icmp eq i32 %v4_16f24, %v1_16e94
  br i1 %v9_16f28, label %dec_label_pc_16f6c, label %dec_label_pc_16f34

dec_label_pc_16f34:                               ; preds = %dec_label_pc_16f24
  %v2_16f34 = icmp eq i8 %v3_16f24, 0
  br i1 %v2_16f34, label %dec_label_pc_16f6c, label %dec_label_pc_16f3c

dec_label_pc_16f3c:                               ; preds = %dec_label_pc_16f34
  %v1_16f3c = add i32 %v0_16f2c, 2
  %v2_16f3c = inttoptr i32 %v1_16f3c to i8*
  %v3_16f3c = load i8, i8* %v2_16f3c, align 1
  %v4_16f3c = zext i8 %v3_16f3c to i32
  %v9_16f40 = icmp eq i32 %v4_16f3c, %v1_16e94
  br i1 %v9_16f40, label %dec_label_pc_16f6c, label %dec_label_pc_16f4c

dec_label_pc_16f4c:                               ; preds = %dec_label_pc_16f3c
  %v2_16f4c = icmp eq i8 %v3_16f3c, 0
  br i1 %v2_16f4c, label %dec_label_pc_16f6c, label %dec_label_pc_16f54

dec_label_pc_16f54:                               ; preds = %dec_label_pc_16f4c
  %v1_16f54 = add i32 %v0_16f2c, 3
  %v2_16f54 = inttoptr i32 %v1_16f54 to i8*
  %v3_16f54 = load i8, i8* %v2_16f54, align 1
  %v4_16f54 = zext i8 %v3_16f54 to i32
  %v9_16f58 = icmp eq i32 %v4_16f54, %v1_16e94
  br i1 %v9_16f58, label %dec_label_pc_16f6c, label %dec_label_pc_16f64

dec_label_pc_16f64:                               ; preds = %dec_label_pc_16f54
  %v2_16f64 = icmp eq i8 %v3_16f54, 0
  br i1 %v2_16f64, label %dec_label_pc_16f6c, label %dec_label_pc_16ec8

dec_label_pc_16f6c:                               ; preds = %dec_label_pc_16ea8, %dec_label_pc_16e9c, %dec_label_pc_16f64, %dec_label_pc_16f54, %dec_label_pc_16f4c, %dec_label_pc_16f3c, %dec_label_pc_16f34, %dec_label_pc_16f24, %dec_label_pc_16f1c, %dec_label_pc_16f0c
  %v1_16f70 = phi i32 [ %v1_16f54, %dec_label_pc_16f64 ], [ %v1_16f54, %dec_label_pc_16f54 ], [ %v1_16f3c, %dec_label_pc_16f4c ], [ %v1_16f3c, %dec_label_pc_16f3c ], [ %v1_16f24, %dec_label_pc_16f34 ], [ %v1_16f24, %dec_label_pc_16f24 ], [ %v0_16f2c, %dec_label_pc_16f1c ], [ %v0_16f2c, %dec_label_pc_16f0c ], [ %v0_16eb0, %dec_label_pc_16e9c ], [ %v0_16eb0, %dec_label_pc_16ea8 ]
  ret i32 %v1_16f70

; uselistorder directives
  uselistorder i32 %v4_16ec8, { 1, 0 }
  uselistorder i32 %v2_16ec8, { 0, 2, 1 }
  uselistorder i32 %v0_16f2c, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_16ebc, { 1, 0 }
  uselistorder i32 %v1_16eb0, { 1, 0, 2 }
  uselistorder i32 %v0_16eb42, { 2, 1, 0 }
  uselistorder i32 %v1_16e94, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_16f6c, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_16f0c, { 1, 0 }
  uselistorder label %dec_label_pc_16e9c, { 1, 0 }
}

define i32 @function_16f7c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_16f7c:
  %v1_16f80 = urem i32 %arg1, 256
  %v0_16fa03 = load i32, i32* @r0, align 4
  %v1_16fa04 = urem i32 %v0_16fa03, 4
  %v2_16fa05 = icmp eq i32 %v1_16fa04, 0
  br i1 %v2_16fa05, label %dec_label_pc_16fa8, label %dec_label_pc_16f88

dec_label_pc_16f88:                               ; preds = %dec_label_pc_16f7c, %dec_label_pc_16f9c
  %v0_16f9c = phi i32 [ %v1_16f9c, %dec_label_pc_16f9c ], [ %v0_16fa03, %dec_label_pc_16f7c ]
  %v1_16f88 = inttoptr i32 %v0_16f9c to i8*
  %v2_16f88 = load i8, i8* %v1_16f88, align 1
  %v3_16f88 = zext i8 %v2_16f88 to i32
  %v9_16f8c = icmp eq i32 %v3_16f88, %v1_16f80
  br i1 %v9_16f8c, label %dec_label_pc_1705c, label %dec_label_pc_16f94

dec_label_pc_16f94:                               ; preds = %dec_label_pc_16f88
  %v2_16f94 = icmp eq i8 %v2_16f88, 0
  br i1 %v2_16f94, label %dec_label_pc_17058, label %dec_label_pc_16f9c

dec_label_pc_16f9c:                               ; preds = %dec_label_pc_16f94
  %v1_16f9c = add i32 %v0_16f9c, 1
  %v1_16fa0 = urem i32 %v1_16f9c, 4
  %v2_16fa0 = icmp eq i32 %v1_16fa0, 0
  br i1 %v2_16fa0, label %dec_label_pc_16fa8, label %dec_label_pc_16f88

dec_label_pc_16fa8:                               ; preds = %dec_label_pc_16f9c, %dec_label_pc_16f7c
  %v0_16fac = phi i32 [ %v0_16fa03, %dec_label_pc_16f7c ], [ %v1_16f9c, %dec_label_pc_16f9c ]
  %v4_16fa8 = mul nuw nsw i32 %v1_16f80, 256
  %v5_16fa8 = or i32 %v4_16fa8, %v1_16f80
  %v4_16fb0 = mul i32 %v5_16fa8, 65536
  %v5_16fb0 = or i32 %v4_16fb0, %v5_16fa8
  br label %dec_label_pc_16fb4

dec_label_pc_16fb4:                               ; preds = %dec_label_pc_17050, %dec_label_pc_16ff0, %dec_label_pc_16fa8
  %v0_17018 = phi i32 [ %v0_16fac, %dec_label_pc_16fa8 ], [ %v4_16fb4, %dec_label_pc_16ff0 ], [ %v4_16fb4, %dec_label_pc_17050 ]
  %v1_16fb4 = inttoptr i32 %v0_17018 to i32*
  %v2_16fb4 = load i32, i32* %v1_16fb4, align 4
  %v4_16fb4 = add i32 %v0_17018, 4
  %v2_16fbc = xor i32 %v2_16fb4, %v5_16fb0
  %v2_16fc0 = add i32 %v2_16fbc, 2130640639
  store i32 %v2_16fc0, i32* @ip, align 4
  %v2_16fc8 = add i32 %v2_16fb4, 2130640639
  %v1_16fcc = sub i32 -1, %v2_16fb4
  %v2_16fd0 = xor i32 %v2_16fc8, %v1_16fcc
  %v2_16fdc = and i32 %v2_16fd0, -2130640640
  %v2_16fe4 = icmp eq i32 %v2_16fdc, 0
  br i1 %v2_16fe4, label %dec_label_pc_16ff0, label %dec_label_pc_16ff8

dec_label_pc_16ff0:                               ; preds = %dec_label_pc_16fb4
  %v1_16fd8 = sub i32 -1, %v2_16fbc
  %v2_16fe0 = xor i32 %v2_16fc0, %v1_16fd8
  %v2_16fe8 = and i32 %v2_16fe0, -2130640640
  %v2_16ff0 = icmp eq i32 %v2_16fe8, 0
  br i1 %v2_16ff0, label %dec_label_pc_16fb4, label %dec_label_pc_16ff8

dec_label_pc_16ff8:                               ; preds = %dec_label_pc_16fb4, %dec_label_pc_16ff0
  %v2_16ff8 = inttoptr i32 %v0_17018 to i8*
  %v3_16ff8 = load i8, i8* %v2_16ff8, align 1
  %v4_16ff8 = zext i8 %v3_16ff8 to i32
  %v9_16ffc = icmp eq i32 %v4_16ff8, %v1_16f80
  br i1 %v9_16ffc, label %dec_label_pc_1705c, label %dec_label_pc_17008

dec_label_pc_17008:                               ; preds = %dec_label_pc_16ff8
  %v2_17008 = icmp eq i8 %v3_16ff8, 0
  br i1 %v2_17008, label %dec_label_pc_17058, label %dec_label_pc_17010

dec_label_pc_17010:                               ; preds = %dec_label_pc_17008
  %v1_17010 = add i32 %v0_17018, 1
  %v2_17010 = inttoptr i32 %v1_17010 to i8*
  %v3_17010 = load i8, i8* %v2_17010, align 1
  %v4_17010 = zext i8 %v3_17010 to i32
  %v9_17014 = icmp eq i32 %v4_17010, %v1_16f80
  br i1 %v9_17014, label %dec_label_pc_1705c, label %dec_label_pc_17020

dec_label_pc_17020:                               ; preds = %dec_label_pc_17010
  %v2_17020 = icmp eq i8 %v3_17010, 0
  br i1 %v2_17020, label %dec_label_pc_17058, label %dec_label_pc_17028

dec_label_pc_17028:                               ; preds = %dec_label_pc_17020
  %v1_17028 = add i32 %v0_17018, 2
  %v2_17028 = inttoptr i32 %v1_17028 to i8*
  %v3_17028 = load i8, i8* %v2_17028, align 1
  %v4_17028 = zext i8 %v3_17028 to i32
  %v9_1702c = icmp eq i32 %v4_17028, %v1_16f80
  br i1 %v9_1702c, label %dec_label_pc_1705c, label %dec_label_pc_17038

dec_label_pc_17038:                               ; preds = %dec_label_pc_17028
  %v2_17038 = icmp eq i8 %v3_17028, 0
  br i1 %v2_17038, label %dec_label_pc_17058, label %dec_label_pc_17040

dec_label_pc_17040:                               ; preds = %dec_label_pc_17038
  %v1_17040 = add i32 %v0_17018, 3
  %v2_17040 = inttoptr i32 %v1_17040 to i8*
  %v3_17040 = load i8, i8* %v2_17040, align 1
  %v4_17040 = zext i8 %v3_17040 to i32
  %v9_17044 = icmp eq i32 %v4_17040, %v1_16f80
  br i1 %v9_17044, label %dec_label_pc_1705c, label %dec_label_pc_17050

dec_label_pc_17050:                               ; preds = %dec_label_pc_17040
  %v2_17050 = icmp eq i8 %v3_17040, 0
  br i1 %v2_17050, label %dec_label_pc_17058, label %dec_label_pc_16fb4

dec_label_pc_17058:                               ; preds = %dec_label_pc_16f94, %dec_label_pc_17050, %dec_label_pc_17038, %dec_label_pc_17020, %dec_label_pc_17008
  br label %dec_label_pc_1705c

dec_label_pc_1705c:                               ; preds = %dec_label_pc_16f88, %dec_label_pc_17040, %dec_label_pc_17028, %dec_label_pc_17010, %dec_label_pc_16ff8, %dec_label_pc_17058
  %v1_17060 = phi i32 [ 0, %dec_label_pc_17058 ], [ %v1_17040, %dec_label_pc_17040 ], [ %v1_17028, %dec_label_pc_17028 ], [ %v1_17010, %dec_label_pc_17010 ], [ %v0_17018, %dec_label_pc_16ff8 ], [ %v0_16f9c, %dec_label_pc_16f88 ]
  ret i32 %v1_17060

; uselistorder directives
  uselistorder i32 %v4_16fb4, { 1, 0 }
  uselistorder i32 %v2_16fb4, { 0, 2, 1 }
  uselistorder i32 %v0_17018, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_16fa8, { 1, 0 }
  uselistorder i32 %v1_16f9c, { 1, 0, 2 }
  uselistorder i32 %v0_16fa03, { 2, 1, 0 }
  uselistorder i32 %v1_16f80, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 3, { 3, 4, 1, 5, 60, 61, 116, 62, 63, 64, 65, 66, 67, 74, 75, 117, 7, 109, 27, 110, 26, 111, 38, 112, 68, 113, 69, 39, 81, 28, 76, 77, 2, 78, 79, 80, 40, 20, 82, 41, 83, 42, 84, 29, 85, 43, 86, 44, 87, 45, 46, 47, 0, 88, 89, 22, 21, 48, 90, 49, 30, 91, 9, 8, 50, 31, 92, 11, 10, 51, 93, 32, 94, 95, 24, 23, 52, 96, 33, 97, 13, 12, 53, 98, 34, 99, 54, 100, 15, 14, 55, 101, 35, 102, 17, 16, 56, 103, 36, 104, 19, 18, 57, 105, 37, 106, 114, 70, 71, 72, 73, 58, 115, 59, 25, 107, 6, 108 }
  uselistorder i32 2130640639, { 0, 2, 1, 3 }
  uselistorder i32 65536, { 4, 5, 7, 6, 12, 8, 13, 9, 14, 10, 15, 11, 16, 17, 18, 22, 19, 23, 20, 24, 21, 25, 143, 146, 142, 147, 26, 27, 28, 29, 30, 31, 32, 33, 34, 141, 35, 36, 37, 2, 38, 0, 3, 39, 40, 42, 41, 1, 45, 43, 44, 46, 52, 47, 53, 48, 54, 49, 50, 51, 57, 58, 59, 60, 55, 56, 140, 62, 61, 64, 63, 66, 67, 68, 65, 69, 71, 72, 73, 70, 74, 75, 77, 78, 76, 79, 144, 80, 83, 81, 84, 82, 86, 87, 88, 85, 89, 94, 90, 95, 91, 96, 92, 93, 98, 99, 100, 97, 101, 145, 102, 103, 104, 106, 105, 107, 115, 108, 116, 109, 117, 110, 118, 111, 119, 112, 113, 114, 121, 122, 123, 124, 120, 125, 130, 126, 131, 127, 128, 129, 133, 135, 136, 137, 132, 134, 139, 138 }
  uselistorder label %dec_label_pc_1705c, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_17058, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_16ff8, { 1, 0 }
  uselistorder label %dec_label_pc_16f88, { 1, 0 }
}

define i32 @function_1706c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1706c:
  %stack_var_-68 = alloca i32, align 4
  %v2_17074 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_17074, i32* @r1, align 4
  %v0_17078 = call i32 @function_17090()
  %v1_1707c = sub i32 1, %v0_17078
  %v2_1707c = icmp ult i32 %v0_17078, 2
  br i1 %v2_1707c, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_1706c
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_1706c, %bb
  %v1_1708c = phi i32 [ %v1_1707c, %dec_label_pc_1706c ], [ 0, %bb ]
  ret i32 %v1_1708c

; uselistorder directives
  uselistorder i32 %v0_17078, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_17090() local_unnamed_addr {
dec_label_pc_17090:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_4()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_17090 = load i32, i32* @r4, align 4
  %v6_17090 = load i32, i32* @r5, align 4
  %v2_17098 = ptrtoint i32* %stack_var_-52 to i32
  %v0_1709c = load i32, i32* @r1, align 4
  store i32 %v0_1709c, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_170a8 = load i32, i32* @r0, align 4
  %v3_170a8 = call i32 @function_12444(i32 %v0_170a8, i32 21505, i32 %v2_17098)
  store i32 %v3_170a8, i32* %r0.global-to-local, align 4
  store i32 %v3_170a8, i32* @r5, align 4
  %v2_170ac = icmp eq i32 %v3_170a8, 0
  br i1 %v2_170ac, label %dec_label_pc_170b4, label %dec_label_pc_170f8

dec_label_pc_170b4:                               ; preds = %dec_label_pc_17090
  %v4_170c0 = zext i8 %tmp to i32
  store i32 %v4_170c0, i32* @ip, align 4
  %v3_170c4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_170c4, i32* @r3, align 4
  %v1_170c8 = load i32, i32* @r4, align 4
  %v2_170c8 = add i32 %v1_170c8, 4
  %v3_170c8 = inttoptr i32 %v2_170c8 to i32*
  %v0_170cc = load i32, i32* %r1.global-to-local, align 4
  %v1_170cc = load i32, i32* @r4, align 4
  %v2_170cc = add i32 %v1_170cc, 8
  %v3_170cc = inttoptr i32 %v2_170cc to i32*
  store i32 %v0_170cc, i32* %v3_170cc, align 4
  %v0_170d0 = load i32, i32* %r0.global-to-local, align 4
  %v1_170d0 = load i32, i32* @r4, align 4
  %v2_170d0 = add i32 %v1_170d0, 12
  %v3_170d0 = inttoptr i32 %v2_170d0 to i32*
  store i32 %v0_170d0, i32* %v3_170d0, align 4
  %v2_170d4 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_170d4, i32* @r1, align 4
  %v1_170dc = load i32, i32* @r4, align 4
  %v2_170dc = inttoptr i32 %v1_170dc to i32*
  store i32 %v3_170c4, i32* %v2_170dc, align 4
  %v0_170e0 = load i32, i32* @ip, align 4
  %v1_170e0 = trunc i32 %v0_170e0 to i8
  %v2_170e0 = load i32, i32* @r4, align 4
  %v3_170e0 = add i32 %v2_170e0, 16
  %v4_170e0 = inttoptr i32 %v3_170e0 to i8*
  store i8 %v1_170e0, i8* %v4_170e0, align 1
  %v0_170e4 = load i32, i32* @r4, align 4
  %v1_170e4 = add i32 %v0_170e4, 17
  store i32 %v1_170e4, i32* %r0.global-to-local, align 4
  %v4_170e8 = call i32 @function_175d4(i32 %v1_170e4, i32 %v2_170d4, i32 19, i32 %v3_170c4)
  store i32 %v4_170e8, i32* %r0.global-to-local, align 4
  %v0_170ec = load i32, i32* @r5, align 4
  store i32 %v0_170ec, i32* %r1.global-to-local, align 4
  store i32 13, i32* @r2, align 4
  %v2_170f4 = inttoptr i32 %v4_170e8 to i8*
  %v3_170f4 = call i32 @function_12950(i8* %v2_170f4, i32 %v0_170ec)
  store i32 %v3_170f4, i32* %r0.global-to-local, align 4
  %v0_170f8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_170f8

dec_label_pc_170f8:                               ; preds = %dec_label_pc_17090, %dec_label_pc_170b4
  %v0_170f8 = phi i32 [ %v3_170a8, %dec_label_pc_17090 ], [ %v0_170f8.pre, %dec_label_pc_170b4 ]
  store i32 %v0_170f8, i32* %r0.global-to-local, align 4
  store i32 %v3_17090, i32* @r4, align 4
  store i32 %v6_17090, i32* @r5, align 4
  ret i32 %v0_170f8

; uselistorder directives
  uselistorder i32 %v0_170f8, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 (i8*, i32)* @function_12950, { 2, 3, 4, 5, 0, 1, 12, 11, 9, 6, 7, 8, 10 }
  uselistorder i32 13, { 8, 7, 0, 1, 10, 11, 9, 12, 5, 13, 2, 14, 15, 16, 17, 18, 19, 20, 6, 21, 22, 23, 24, 25, 26, 27, 28, 3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 4, 40, 41 }
  uselistorder i32 17, { 11, 1, 2, 12, 13, 3, 14, 4, 15, 5, 16, 6, 17, 18, 19, 7, 20, 8, 9, 21, 10, 22, 23, 24, 0 }
  uselistorder i32 (i32, i32, i32)* @function_12444, { 2, 1, 0 }
  uselistorder label %dec_label_pc_170f8, { 1, 0 }
}

define i32 @function_1710c() local_unnamed_addr {
dec_label_pc_1710c:
  %r0.global-to-local = alloca i32, align 4
  %v0_17114 = load i32, i32* @r0, align 4
  %v2_17114 = icmp eq i32 %v0_17114, 0
  %v0_1711c = load i32, i32* @r1, align 4
  br i1 %v2_17114, label %dec_label_pc_171f0, label %dec_label_pc_17124

dec_label_pc_17124:                               ; preds = %dec_label_pc_1710c
  br label %dec_label_pc_1713c

dec_label_pc_1713c:                               ; preds = %dec_label_pc_17124, %dec_label_pc_171b4
  %v1_171b4 = phi i32 [ 0, %dec_label_pc_17124 ], [ %v5_171b4, %dec_label_pc_171b4 ]
  %v0_171b8 = phi i32 [ 1, %dec_label_pc_17124 ], [ %v1_171b8, %dec_label_pc_171b4 ]
  %v0_1713c = phi i32 [ %v0_17114, %dec_label_pc_17124 ], [ %v0_1713c12, %dec_label_pc_171b4 ]
  %v1_1713c = inttoptr i32 %v0_1713c to i8*
  %v2_1713c = load i8, i8* %v1_1713c, align 1
  %v3_1713c = zext i8 %v2_1713c to i32
  %v4_17140 = load i32, i32* inttoptr (i32 131628 to i32*), align 4
  %v2_17144 = mul nuw nsw i32 %v3_1713c, 2
  %v2_17148 = add i32 %v2_17144, %v4_17140
  %v3_17148 = inttoptr i32 %v2_17148 to i16*
  %v4_17148 = load i16, i16* %v3_17148, align 2
  %v1_1714c = and i16 %v4_17148, 8
  %v2_1714c = icmp eq i16 %v1_1714c, 0
  br i1 %v2_1714c, label %dec_label_pc_171f0, label %dec_label_pc_17154

dec_label_pc_17154:                               ; preds = %dec_label_pc_1713c
  br label %dec_label_pc_17174

dec_label_pc_1715c:                               ; preds = %dec_label_pc_17174
  %v2_1715c = mul i32 %v0_171b4, 10
  %v1_17160 = add i32 %v2_1715c, -48
  %v2_17164 = add i32 %v3_17174, %v1_17160
  %v8_1716c = icmp sgt i32 %v2_17164, 255
  br i1 %v8_1716c, label %dec_label_pc_171f0, label %dec_label_pc_17170

dec_label_pc_17170:                               ; preds = %dec_label_pc_1715c
  %v1_17170 = add i32 %v0_171a4, 1
  store i32 %v1_17170, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_17174

dec_label_pc_17174:                               ; preds = %dec_label_pc_17154, %dec_label_pc_17170
  %v0_171b4 = phi i32 [ 0, %dec_label_pc_17154 ], [ %v2_17164, %dec_label_pc_17170 ]
  %v0_171a4 = phi i32 [ %v0_1713c, %dec_label_pc_17154 ], [ %v1_17170, %dec_label_pc_17170 ]
  %v1_17174 = inttoptr i32 %v0_171a4 to i8*
  %v2_17174 = load i8, i8* %v1_17174, align 1
  %v3_17174 = zext i8 %v2_17174 to i32
  %v2_17178 = mul nuw nsw i32 %v3_17174, 2
  %v2_1717c = add i32 %v2_17178, %v4_17140
  %v3_1717c = inttoptr i32 %v2_1717c to i16*
  %v4_1717c = load i16, i16* %v3_1717c, align 2
  %v6_1717c = zext i16 %v4_1717c to i32
  %v1_17180 = and i32 %v6_1717c, 8
  %v2_17180 = icmp eq i32 %v1_17180, 0
  br i1 %v2_17180, label %dec_label_pc_17188, label %dec_label_pc_1715c

dec_label_pc_17188:                               ; preds = %dec_label_pc_17174
  %v7_17188 = icmp eq i32 %v0_171b8, 4
  br i1 %v7_17188, label %dec_label_pc_171a0, label %dec_label_pc_17190

dec_label_pc_17190:                               ; preds = %dec_label_pc_17188
  %v7_17190 = icmp eq i8 %v2_17174, 46
  br i1 %v7_17190, label %dec_label_pc_17198, label %dec_label_pc_171f0

dec_label_pc_17198:                               ; preds = %dec_label_pc_17190
  %v1_17198 = add i32 %v0_171a4, 1
  store i32 %v1_17198, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_171b4

dec_label_pc_171a0:                               ; preds = %dec_label_pc_17188
  %v2_171a0 = icmp eq i8 %v2_17174, 0
  %v1_171a4 = add i32 %v0_171a4, 1
  store i32 %v1_171a4, i32* %r0.global-to-local, align 4
  br i1 %v2_171a0, label %dec_label_pc_171b4, label %dec_label_pc_171ac

dec_label_pc_171ac:                               ; preds = %dec_label_pc_171a0
  %v1_171ac = and i32 %v6_1717c, 32
  %v2_171ac = icmp eq i32 %v1_171ac, 0
  br i1 %v2_171ac, label %dec_label_pc_171f0, label %dec_label_pc_171b4

dec_label_pc_171b4:                               ; preds = %dec_label_pc_171ac, %dec_label_pc_171a0, %dec_label_pc_17198
  %v0_1713c12 = phi i32 [ %v1_171a4, %dec_label_pc_171ac ], [ %v1_171a4, %dec_label_pc_171a0 ], [ %v1_17198, %dec_label_pc_17198 ]
  %v4_171b4 = mul i32 %v1_171b4, 256
  %v5_171b4 = or i32 %v0_171b4, %v4_171b4
  %v1_171b8 = add nuw nsw i32 %v0_171b8, 1
  %v7_171c0 = icmp slt i32 %v1_171b8, 5
  br i1 %v7_171c0, label %dec_label_pc_1713c, label %dec_label_pc_171c4

dec_label_pc_171c4:                               ; preds = %dec_label_pc_171b4
  %v2_171c4 = icmp eq i32 %v0_1711c, 0
  br i1 %v2_171c4, label %.thread7.thread, label %bb

.thread7.thread:                                  ; preds = %dec_label_pc_171c4
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_171f4

bb:                                               ; preds = %dec_label_pc_171c4
  %v4_171c8 = udiv i32 %v5_171b4, 16777216
  %v2_171cc = udiv i32 %v5_171b4, 256
  %v5_171d0 = and i32 %v2_171cc, 65280
  %v2_171d4 = and i32 %v5_171b4, 65280
  %v5_171d8 = mul nuw nsw i32 %v2_171d4, 256
  %v5_171dc = mul i32 %v0_171b4, 16777216
  %v6_171d0 = or i32 %v4_171c8, %v5_171dc
  %v6_171d8 = or i32 %v6_171d0, %v5_171d0
  %v6_171dc = or i32 %v6_171d8, %v5_171d8
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_171e8 = inttoptr i32 %v0_1711c to i32*
  store i32 %v6_171dc, i32* %v3_171e8, align 4
  %v1_171f8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_171f4

dec_label_pc_171f0:                               ; preds = %dec_label_pc_17190, %dec_label_pc_171ac, %dec_label_pc_1713c, %dec_label_pc_1715c, %dec_label_pc_1710c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_171f4

dec_label_pc_171f4:                               ; preds = %.thread7.thread, %bb, %dec_label_pc_171f0
  %v1_171f8 = phi i32 [ %v1_171f8.pre, %bb ], [ 0, %dec_label_pc_171f0 ], [ 1, %.thread7.thread ]
  ret i32 %v1_171f8

; uselistorder directives
  uselistorder i32 %v1_171b8, { 1, 0 }
  uselistorder i32 %v5_171b4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_171a4, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder i32 65280, { 65, 1, 5, 0, 6, 2, 7, 8, 9, 10, 11, 37, 45, 46, 47, 12, 13, 14, 48, 49, 15, 16, 17, 18, 38, 50, 3, 51, 52, 19, 20, 39, 53, 54, 40, 21, 22, 23, 24, 25, 55, 56, 57, 58, 41, 42, 43, 4, 59, 60, 26, 61, 27, 28, 29, 30, 44, 62, 31, 32, 33, 63, 34, 35, 36, 66, 67, 64 }
  uselistorder i32 16777216, { 0, 1, 65, 64, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 27, 26, 28, 29, 30, 31, 33, 32, 35, 34, 37, 36, 41, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66 }
  uselistorder i32 5, { 13, 0, 48, 27, 14, 28, 15, 29, 16, 26, 3, 2, 30, 17, 31, 32, 18, 19, 20, 21, 22, 33, 23, 5, 34, 6, 35, 7, 36, 24, 8, 37, 9, 38, 39, 10, 40, 11, 41, 42, 12, 43, 1, 4, 44, 45, 25, 46, 47 }
  uselistorder i32 32, { 121, 62, 60, 106, 107, 108, 109, 115, 116, 102, 103, 104, 105, 125, 63, 64, 68, 65, 69, 66, 70, 67, 71, 72, 119, 120, 73, 122, 81, 82, 80, 83, 84, 85, 86, 87, 88, 75, 76, 1, 77, 2, 78, 4, 3, 74, 79, 89, 123, 6, 5, 8, 7, 10, 9, 61, 90, 124, 91, 114, 12, 11, 14, 13, 92, 110, 93, 111, 94, 112, 95, 113, 16, 15, 18, 17, 101, 20, 19, 21, 23, 22, 25, 24, 26, 27, 29, 28, 96, 97, 30, 117, 31, 118, 32, 33, 34, 35, 36, 37, 98, 38, 39, 40, 99, 41, 0, 42, 43, 44, 46, 45, 48, 47, 50, 49, 51, 53, 52, 55, 54, 57, 56, 58, 59, 100 }
  uselistorder i8 0, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 31, 23, 33, 2, 16, 3, 34, 36, 35, 24, 37, 38, 25, 39, 40, 0, 19, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 1, 59, 60, 61, 27, 62, 65, 28, 63, 64, 26, 66, 67, 68, 69, 70, 71, 4, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 18, 85, 86, 87, 22, 83, 84, 91, 20, 88, 89, 90, 21, 17, 92, 93, 80, 29, 30, 94, 95, 96, 97, 98, 99, 100 }
  uselistorder i8 46, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9 }
  uselistorder i32 255, { 4, 22, 5, 0, 1, 2, 16, 17, 19, 18, 20, 6, 21, 3, 9, 23, 10, 24, 7, 25, 8, 26, 13, 27, 14, 28, 11, 29, 12, 30, 15, 31 }
  uselistorder i32 10, { 1, 34, 35, 36, 4, 49, 51, 50, 77, 78, 0, 5, 39, 40, 10, 37, 38, 29, 3, 41, 30, 11, 31, 42, 12, 43, 13, 44, 14, 45, 15, 46, 16, 47, 48, 17, 18, 19, 20, 21, 22, 6, 52, 53, 54, 55, 56, 57, 58, 59, 60, 23, 61, 62, 63, 7, 64, 65, 66, 24, 8, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 2, 79, 80, 26, 81, 32, 33, 9, 82, 25, 83, 27, 84, 28 }
  uselistorder i16 0, { 0, 1, 2, 4, 5, 6, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32 2, { 3, 4, 160, 63, 64, 59, 297, 298, 75, 299, 300, 65, 301, 302, 166, 161, 167, 162, 97, 303, 5, 168, 304, 70, 278, 6, 7, 279, 8, 9, 58, 274, 10, 11, 12, 275, 280, 13, 14, 15, 16, 76, 281, 282, 17, 18, 0, 163, 283, 19, 284, 98, 20, 159, 21, 22, 23, 24, 25, 26, 158, 27, 28, 29, 30, 31, 99, 101, 100, 66, 67, 102, 184, 185, 103, 182, 104, 183, 105, 186, 106, 176, 169, 170, 171, 172, 173, 174, 107, 175, 81, 177, 82, 178, 83, 179, 84, 180, 85, 181, 77, 32, 33, 187, 190, 191, 108, 71, 164, 192, 109, 193, 111, 188, 110, 189, 87, 194, 113, 195, 112, 86, 196, 114, 197, 34, 35, 36, 115, 198, 199, 116, 117, 118, 120, 72, 121, 119, 200, 122, 123, 124, 125, 126, 201, 68, 74, 202, 203, 204, 205, 206, 207, 208, 209, 210, 127, 211, 88, 212, 213, 214, 215, 216, 217, 128, 89, 218, 219, 220, 221, 222, 223, 224, 225, 129, 226, 90, 227, 228, 60, 130, 131, 132, 229, 230, 231, 232, 233, 234, 235, 1, 37, 38, 39, 40, 41, 42, 133, 236, 91, 237, 238, 239, 240, 43, 241, 242, 44, 45, 46, 47, 48, 49, 134, 243, 92, 244, 245, 246, 247, 248, 249, 135, 250, 136, 251, 137, 252, 2, 50, 51, 52, 53, 54, 55, 138, 253, 93, 254, 255, 61, 256, 257, 258, 259, 260, 261, 139, 94, 262, 263, 62, 264, 265, 140, 266, 141, 267, 268, 269, 270, 271, 142, 272, 95, 273, 69, 144, 145, 285, 146, 147, 286, 148, 149, 287, 150, 151, 288, 152, 153, 289, 154, 155, 290, 73, 291, 292, 96, 293, 156, 294, 56, 57, 295, 143, 296, 157, 78, 276, 79, 80, 277, 165 }
  uselistorder label %dec_label_pc_171f4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_171f0, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_17174, { 1, 0 }
  uselistorder label %dec_label_pc_1713c, { 1, 0 }
}

define i32 @function_17204(i32 %arg1) local_unnamed_addr {
dec_label_pc_17204:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 131404, i32* %r2.global-to-local, align 4
  %v4_17210 = load i32, i32* inttoptr (i32 131504 to i32*), align 16
  %v4_17218 = load i32, i32* inttoptr (i32 131468 to i32*), align 4
  store i32 %v4_17218, i32* %r1.global-to-local, align 4
  %v1_1721c = add i32 %arg1, 44
  %v2_1721c = inttoptr i32 %v1_1721c to i32*
  %v3_1721c = load i32, i32* %v2_1721c, align 4
  %v1_17220 = add i32 %arg1, 28
  %v2_17220 = inttoptr i32 %v1_17220 to i32*
  %v3_17220 = load i32, i32* %v2_17220, align 4
  store i32 %v3_17220, i32* %r2.global-to-local, align 4
  %v2_17224 = inttoptr i32 %v4_17210 to i32*
  store i32 %v3_1721c, i32* %v2_17224, align 4
  %v0_17228 = load i32, i32* %r2.global-to-local, align 4
  %v1_17228 = load i32, i32* %r1.global-to-local, align 4
  %v2_17228 = inttoptr i32 %v1_17228 to i32*
  store i32 %v0_17228, i32* %v2_17228, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 45, 0, 1, 3, 4, 5, 2, 6, 7, 8, 15, 9, 16, 14, 26, 27, 28, 29, 30, 31, 23, 24, 25, 21, 22, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 10, 17, 18, 19, 20, 11, 42, 12, 43, 13, 44 }
  uselistorder i32 131404, { 42, 0, 43, 44, 1, 2, 45, 3, 4, 5, 46, 6, 7, 47, 8, 48, 49, 50, 9, 10, 11, 37, 33, 31, 30, 32, 34, 35, 36, 29, 38, 24, 26, 25, 23, 22, 27, 28, 19, 18, 21, 20, 17, 16, 15, 14, 39, 40, 41, 51, 52, 53, 12, 13 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_17234(i32 %arg1) local_unnamed_addr {
dec_label_pc_17234:
  %v0_17234 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_17234, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_17234
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_17234, %bb
  %v4_17238 = phi i32 [ %arg1, %dec_label_pc_17234 ], [ 0, %bb ]
  ret i32 %v4_17238

; uselistorder directives
  uselistorder i1* @cpsr_z, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 31, 11, 12, 13, 25, 26, 27, 28, 14, 15, 16, 17, 18, 19, 20, 29, 30, 21, 22, 23, 24, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1723c(i32 %arg1) local_unnamed_addr {
dec_label_pc_17278:
  store i32 %arg1, i32* @global_var_22414.614, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32* @global_var_22414.614, { 1, 0, 2 }
}

define i32 @function_17288(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_17288:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_17288 = load i32, i32* @r7, align 4
  store i32 %v3_17288, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_172b0, label %dec_label_pc_172a0

dec_label_pc_172a0:                               ; preds = %dec_label_pc_17288
  %v0_172a0 = call i32 @function_128f8()
  %v0_172a4 = load i32, i32* %r7.global-to-local, align 4
  %v1_172a4 = sub i32 0, %v0_172a4
  %v2_172a8 = inttoptr i32 %v0_172a0 to i32*
  store i32 %v1_172a4, i32* %v2_172a8, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_172b4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_172b0

dec_label_pc_172b0:                               ; preds = %dec_label_pc_17288, %dec_label_pc_172a0
  %v2_172b4 = phi i32 [ %v3_17288, %dec_label_pc_17288 ], [ %v2_172b4.pre, %dec_label_pc_172a0 ]
  %v0_172b0 = phi i32 [ %arg1, %dec_label_pc_17288 ], [ -1, %dec_label_pc_172a0 ]
  store i32 %v2_172b4, i32* %r7.global-to-local, align 4
  ret i32 %v0_172b0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_172b0, { 1, 0 }
}

define i32 @function_172bc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_172bc:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_172c0 = load i32, i32* @r4, align 4
  %v6_172c0 = load i32, i32* @r5, align 4
  %v12_172c0 = load i32, i32* @r7, align 4
  %v1_172c4 = add i32 %arg3, 14
  %v2_172cc = ptrtoint i32* %stack_var_-72 to i32
  %v1_172d0 = and i32 %v1_172c4, -8
  %v2_172d4 = sub i32 %v2_172cc, %v1_172d0
  %v1_172d8 = add i32 %v2_172d4, 8
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v1_172d8, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp25 = icmp ult i32 %arg1, -4095
  br i1 %tmp25, label %dec_label_pc_17314, label %dec_label_pc_17300

dec_label_pc_17300:                               ; preds = %dec_label_pc_172bc
  %v0_17300 = call i32 @function_128f8()
  %v0_17304 = load i32, i32* %r4.global-to-local, align 4
  %v1_17304 = sub i32 0, %v0_17304
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1730c = inttoptr i32 %v0_17300 to i32*
  store i32 %v1_17304, i32* %v2_1730c, align 4
  %v0_1731c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1731c

dec_label_pc_17314:                               ; preds = %dec_label_pc_172bc
  br i1 false, label %dec_label_pc_1731c, label %dec_label_pc_17324

dec_label_pc_1731c:                               ; preds = %dec_label_pc_17314, %dec_label_pc_17300
  %v0_1731c = phi i32 [ -1, %dec_label_pc_17314 ], [ %v0_1731c.pre, %dec_label_pc_17300 ]
  store i32 %v0_1731c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_173f0

dec_label_pc_17324:                               ; preds = %dec_label_pc_17314
  %v2_17324 = add i32 %v1_172d8, %arg1
  %v2_17328 = add i32 %tmp, %arg3
  store i32 %v2_17328, i32* @ip, align 4
  store i32 %v1_172d8, i32* @r7, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_173d8

dec_label_pc_17344:                               ; preds = %dec_label_pc_173d8
  %v1_17344 = add i32 %v0_17398, 16
  %v2_17344 = inttoptr i32 %v1_17344 to i16*
  %v3_17344 = load i16, i16* %v2_17344, align 2
  %v4_17344 = zext i16 %v3_17344 to i32
  %v1_17348 = add nuw nsw i32 %v4_17344, 7
  %v1_1734c = and i32 %v1_17348, 131064
  store i32 %v1_1734c, i32* %r2.global-to-local, align 4
  %v2_17354 = add i32 %v1_1734c, %v0_173a0
  store i32 %v2_17354, i32* %r8.global-to-local, align 4
  %tmp26 = icmp ugt i32 %v2_17354, %v2_17328
  br i1 %tmp26, label %dec_label_pc_17360, label %dec_label_pc_17394

dec_label_pc_17360:                               ; preds = %dec_label_pc_17344
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_17368 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_17368, i32* %r2.global-to-local, align 4
  %v0_1736c = load i32, i32* %sl.global-to-local, align 4
  %v1_17370 = load i32, i32* @sp, align 4
  %v2_17370 = inttoptr i32 %v1_17370 to i32*
  store i32 0, i32* %v2_17370, align 4
  %v4_17374 = call i32 @function_175f8(i32 %arg1, i32 0, i32 %v0_17368, i32 %v0_1736c)
  %v0_17378 = load i32, i32* @r5, align 4
  %v1_17378 = load i32, i32* %r6.global-to-local, align 4
  %v9_17378 = icmp eq i32 %v0_17378, %v1_17378
  br i1 %v9_17378, label %dec_label_pc_17380, label %dec_label_pc_173ec

dec_label_pc_17380:                               ; preds = %dec_label_pc_17360
  %v0_17380 = call i32 @function_128f8()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_1738c = inttoptr i32 %v0_17380 to i32*
  store i32 22, i32* %v2_1738c, align 4
  %v0_173f0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_173f0

dec_label_pc_17394:                               ; preds = %dec_label_pc_17344
  %v1_17394 = inttoptr i32 %v0_17398 to i32*
  %v2_17394 = load i32, i32* %v1_17394, align 4
  %v3_17394 = add i32 %v0_17398, 4
  %v4_17394 = inttoptr i32 %v3_17394 to i32*
  %v5_17394 = load i32, i32* %v4_17394, align 4
  store i32 %v5_17394, i32* %r4.global-to-local, align 4
  %v1_17398 = add i32 %v0_17398, 8
  store i32 %v1_17398, i32* %sb.global-to-local, align 4
  %v1_1739c = inttoptr i32 %v1_17398 to i32*
  %v2_1739c = load i32, i32* %v1_1739c, align 4
  store i32 %v2_1739c, i32* %sb.global-to-local, align 4
  %v3_1739c = add i32 %v0_17398, 12
  %v4_1739c = inttoptr i32 %v3_1739c to i32*
  %v5_1739c = load i32, i32* %v4_1739c, align 4
  store i32 %v5_1739c, i32* %sl.global-to-local, align 4
  %v1_173a0 = inttoptr i32 %v0_173a0 to i32*
  store i32 %v2_17394, i32* %v1_173a0, align 4
  %v3_173a0 = add i32 %v0_173a0, 4
  %v4_173a0 = inttoptr i32 %v3_173a0 to i32*
  %v5_173a0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_173a0, i32* %v4_173a0, align 4
  %v0_173a4 = load i32, i32* @r7, align 4
  %v1_173a4 = add i32 %v0_173a4, 8
  %v1_173a8 = inttoptr i32 %v1_173a4 to i32*
  %v2_173a8 = load i32, i32* %v1_173a8, align 4
  %v3_173a8 = add i32 %v0_173a4, 12
  %v4_173a8 = inttoptr i32 %v3_173a8 to i32*
  %v5_173a8 = load i32, i32* %v4_173a8, align 4
  store i32 %v5_173a8, i32* @r4, align 4
  %v1_173ac = load i32, i32* @r5, align 4
  %v2_173ac = add i32 %v1_173ac, 8
  %v3_173ac = inttoptr i32 %v2_173ac to i32*
  store i32 %v2_173a8, i32* %v3_173ac, align 4
  %v0_173b0 = load i32, i32* @r4, align 4
  %v1_173b0 = load i32, i32* @r5, align 4
  %v2_173b0 = add i32 %v1_173b0, 12
  %v3_173b0 = inttoptr i32 %v2_173b0 to i32*
  store i32 %v0_173b0, i32* %v3_173b0, align 4
  %v0_173b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_173b4 = trunc i32 %v0_173b4 to i16
  %v2_173b4 = load i32, i32* @r5, align 4
  %v3_173b4 = add i32 %v2_173b4, 16
  %v4_173b4 = inttoptr i32 %v3_173b4 to i16*
  store i16 %v1_173b4, i16* %v4_173b4, align 2
  %v0_173b8 = load i32, i32* @r7, align 4
  %v1_173b8 = add i32 %v0_173b8, 18
  %v2_173b8 = inttoptr i32 %v1_173b8 to i8*
  %v3_173b8 = load i8, i8* %v2_173b8, align 1
  %v4_173b8 = zext i8 %v3_173b8 to i32
  store i32 %v4_173b8, i32* @r3, align 4
  %v2_173bc = load i32, i32* @r5, align 4
  %v3_173bc = add i32 %v2_173bc, 18
  %v4_173bc = inttoptr i32 %v3_173bc to i8*
  store i8 %v3_173b8, i8* %v4_173bc, align 1
  %v0_173c0 = load i32, i32* @r7, align 4
  %v1_173c0 = add i32 %v0_173c0, 16
  %v2_173c0 = inttoptr i32 %v1_173c0 to i16*
  %v3_173c0 = load i16, i16* %v2_173c0, align 2
  %v4_173c0 = zext i16 %v3_173c0 to i32
  %v1_173c4 = add nsw i32 %v4_173c0, -19
  store i32 %v1_173c4, i32* @r2, align 4
  %v0_173c8 = call i32 @function_12a00()
  %v0_173cc = load i32, i32* @r7, align 4
  %v1_173cc = add i32 %v0_173cc, 16
  %v2_173cc = inttoptr i32 %v1_173cc to i16*
  %v3_173cc = load i16, i16* %v2_173cc, align 2
  %v4_173cc = zext i16 %v3_173cc to i32
  %v0_173d0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_173d0, i32* @r5, align 4
  %v2_173d4 = add i32 %v4_173cc, %v0_173cc
  store i32 %v2_173d4, i32* @r7, align 4
  br label %dec_label_pc_173d8

dec_label_pc_173d8:                               ; preds = %dec_label_pc_17324, %dec_label_pc_17394
  %v0_173a0 = phi i32 [ %tmp, %dec_label_pc_17324 ], [ %v0_173d0, %dec_label_pc_17394 ]
  %v0_17398 = phi i32 [ %v1_172d8, %dec_label_pc_17324 ], [ %v2_173d4, %dec_label_pc_17394 ]
  %v3_173dc = icmp ult i32 %v0_17398, %v2_17324
  %v1_173e0 = add i32 %v0_173a0, 19
  store i32 %v1_173e0, i32* @r0, align 4
  %v1_173e4 = add i32 %v0_17398, 19
  store i32 %v1_173e4, i32* @r1, align 4
  br i1 %v3_173dc, label %dec_label_pc_17344, label %dec_label_pc_173ec.loopexit

dec_label_pc_173ec.loopexit:                      ; preds = %dec_label_pc_173d8
  %v0_173ec.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_173ec

dec_label_pc_173ec:                               ; preds = %dec_label_pc_173ec.loopexit, %dec_label_pc_17360
  %v1_173ec = phi i32 [ %v0_173a0, %dec_label_pc_173ec.loopexit ], [ %v0_17378, %dec_label_pc_17360 ]
  %v0_173ec = phi i32 [ %v0_173ec.pre, %dec_label_pc_173ec.loopexit ], [ %v1_17378, %dec_label_pc_17360 ]
  %v2_173ec = sub i32 %v1_173ec, %v0_173ec
  store i32 %v2_173ec, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_173f0

dec_label_pc_173f0:                               ; preds = %dec_label_pc_17380, %dec_label_pc_1731c, %dec_label_pc_173ec
  %v0_173f0 = phi i32 [ %v0_173f0.pre, %dec_label_pc_17380 ], [ %v0_1731c, %dec_label_pc_1731c ], [ %v2_173ec, %dec_label_pc_173ec ]
  store i32 %v3_172c0, i32* %r4.global-to-local, align 4
  store i32 %v6_172c0, i32* @r5, align 4
  store i32 %v12_172c0, i32* @r7, align 4
  ret i32 %v0_173f0

; uselistorder directives
  uselistorder i32 %v0_17398, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_173a0, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_172d8, { 1, 2, 0, 3 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 19, { 3, 4, 0, 1, 5, 6, 7, 2, 8 }
  uselistorder i32* @r3, { 9, 10, 41, 42, 76, 77, 3, 78, 79, 80, 4, 81, 82, 83, 5, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 0, 102, 103, 104, 105, 11, 8, 12, 13, 14, 15, 16, 43, 44, 106, 115, 116, 117, 110, 51, 52, 53, 54, 55, 56, 57, 17, 18, 19, 121, 118, 119, 120, 1, 122, 123, 124, 111, 20, 58, 32, 33, 34, 112, 113, 114, 59, 107, 108, 109, 60, 61, 7, 62, 63, 64, 65, 66, 2, 27, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 35, 36, 38, 37, 39, 40, 45, 46, 47, 48, 49, 50, 67, 68, 69, 70, 71, 72, 6, 73, 74, 75 }
  uselistorder i32 18, { 6, 7, 2, 8, 5, 3, 9, 10, 4, 11, 0, 12, 1, 13 }
  uselistorder i32 22, { 1, 0, 7, 2, 3, 4, 5, 6, 8 }
  uselistorder i32* @sp, { 4, 5, 1, 6, 0, 7, 2, 8, 3 }
  uselistorder i32 7, { 30, 27, 28, 12, 0, 1, 50, 13, 32, 33, 14, 31, 4, 15, 34, 16, 35, 17, 36, 18, 19, 20, 21, 37, 6, 38, 22, 39, 7, 23, 40, 8, 41, 9, 42, 10, 43, 24, 44, 2, 25, 46, 3, 26, 47, 48, 29, 11, 49, 5, 45 }
  uselistorder i32* @ip, { 8, 9, 10, 80, 11, 12, 7, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 3, 114, 115, 116, 117, 118, 119, 120, 121, 122, 13, 0, 14, 15, 16, 17, 18, 123, 124, 44, 45, 4, 25, 26, 27, 28, 29, 30, 46, 47, 48, 128, 125, 126, 127, 1, 129, 24, 49, 50, 51, 52, 2, 53, 54, 55, 31, 32, 33, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 5, 19, 20, 21, 22, 23, 71, 72, 73, 74, 75, 76, 77, 6, 78, 79, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i1 false, { 0, 24, 25, 26, 42, 17, 23, 43, 44, 45, 46, 47, 2, 1, 27, 30, 29, 28, 31, 4, 6, 37, 18, 19, 5, 14, 7, 34, 15, 13, 16, 8, 9, 10, 32, 3, 11, 38, 39, 40, 21, 41, 20, 22, 12, 35, 36, 33, 48 }
  uselistorder i32 -8, { 37, 17, 18, 19, 20, 21, 22, 16, 15, 9, 14, 13, 12, 11, 23, 24, 25, 26, 27, 39, 28, 29, 30, 31, 32, 38, 40, 33, 41, 36, 10, 34, 35, 8, 0, 1, 4, 3, 2, 5, 6, 7 }
  uselistorder i32 14, { 13, 20, 28, 9, 10, 11, 2, 14, 3, 15, 4, 16, 5, 17, 12, 6, 18, 7, 19, 8, 21, 22, 0, 23, 24, 25, 26, 1, 27 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_173f0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_173d8, { 1, 0 }
}

define i32 @function_17400(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_17400:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_17400 = load i32, i32* @r4, align 4
  store i32 %v3_17400, i32* %stack_var_-12, align 4
  %v0_17404 = load i32, i32* %r0.global-to-local, align 4
  %v1_17404 = inttoptr i32 %v0_17404 to i16*
  %v2_17404 = load i16, i16* %v1_17404, align 2
  %v3_17404 = zext i16 %v2_17404 to i32
  %v1_17408 = and i32 %v3_17404, 4
  store i32 %v1_17408, i32* %r5.global-to-local, align 4
  %v2_17408 = icmp eq i32 %v1_17408, 0
  store i32 %v0_17404, i32* %r4.global-to-local, align 4
  br i1 %v2_17408, label %dec_label_pc_1741c, label %bb

bb:                                               ; preds = %dec_label_pc_17400
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_1741c:                               ; preds = %dec_label_pc_17400
  %v1_1741c = icmp slt i32 %arg2, 0
  br i1 %v1_1741c, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_1741c
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_1741c, %bb18
  %v1_17424 = add i32 %v0_17404, 4
  %v2_17424 = inttoptr i32 %v1_17424 to i32*
  %v3_17424 = load i32, i32* %v2_17424, align 4
  store i32 %v3_17424, i32* %r0.global-to-local, align 4
  %v1_17428 = call i32 @function_12268(i32 %v3_17424)
  store i32 %v1_17428, i32* %r0.global-to-local, align 4
  %v5_17430 = icmp sgt i32 %v1_17428, 0
  br i1 %v5_17430, label %.thread7, label %dec_label_pc_17434

dec_label_pc_17434:                               ; preds = %bb19
  %v2_1742c = icmp eq i32 %v1_17428, 0
  %v0_17434 = load i32, i32* %r4.global-to-local, align 4
  %v1_17434 = inttoptr i32 %v0_17434 to i16*
  %v2_17434 = load i16, i16* %v1_17434, align 2
  br i1 %v2_1742c, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_17434
  %v2_17438 = or i16 %v2_17434, 4
  store i16 %v2_17438, i16* %v1_17434, align 2
  %v1_17454.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_17434
  %v2_1743c = or i16 %v2_17434, 8
  store i16 %v2_1743c, i16* %v1_17434, align 2
  %v1_17448 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_17448, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_17454 = phi i32 [ %v1_17454.pre, %bb20 ], [ 0, %bb ], [ %v1_17428, %bb19 ], [ %v1_17448, %bb21 ]
  %v2_17450 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_17450, i32* @r4, align 4
  ret i32 %v1_17454

; uselistorder directives
  uselistorder i16 %v2_17434, { 1, 0 }
  uselistorder i32 %v1_17428, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @function_12268, { 4, 2, 3, 0, 1 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @function_17458(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_17458:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_17458 = load i32, i32* @r4, align 4
  store i32 %v3_17458, i32* %stack_var_-24, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  store i32 2147483647, i32* %r8.global-to-local, align 4
  %v2_174702 = icmp eq i32 %arg3, 0
  store i1 %v2_174702, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_174702, label %dec_label_pc_17500, label %dec_label_pc_17478

dec_label_pc_17470thread-pre-split:               ; preds = %dec_label_pc_17478
  %v3_17490 = load i32, i32* %r6.global-to-local, align 4
  %v5_17490 = add i32 %v3_17490, %v3_17488
  store i32 %v5_17490, i32* %r6.global-to-local, align 4
  %v4_17494 = load i32, i32* %r5.global-to-local, align 4
  %v5_17494 = sub i32 %v4_17494, %v3_17488
  store i32 %v5_17494, i32* %r5.global-to-local, align 4
  %v2_17470 = icmp eq i32 %v5_17494, 0
  store i1 %v2_17470, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_17470, label %dec_label_pc_17470.dec_label_pc_17500.loopexit_crit_edge, label %dec_label_pc_17470thread-pre-split.dec_label_pc_17478_crit_edge

dec_label_pc_17470thread-pre-split.dec_label_pc_17478_crit_edge: ; preds = %dec_label_pc_17470thread-pre-split
  %v3_17478.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_17484.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_17478

dec_label_pc_17478:                               ; preds = %dec_label_pc_17458, %dec_label_pc_17470thread-pre-split.dec_label_pc_17478_crit_edge
  %v0_17484 = phi i32 [ %v0_17484.pre, %dec_label_pc_17470thread-pre-split.dec_label_pc_17478_crit_edge ], [ %tmp, %dec_label_pc_17458 ]
  %v0_17480 = phi i32 [ %v5_17490, %dec_label_pc_17470thread-pre-split.dec_label_pc_17478_crit_edge ], [ %arg2, %dec_label_pc_17458 ]
  %v3_17478 = phi i32 [ %v3_17478.pre, %dec_label_pc_17470thread-pre-split.dec_label_pc_17478_crit_edge ], [ 2147483647, %dec_label_pc_17458 ]
  %v0_1747c.in = phi i32 [ %v5_17494, %dec_label_pc_17470thread-pre-split.dec_label_pc_17478_crit_edge ], [ %arg3, %dec_label_pc_17458 ]
  %v3_1747c = phi i32 [ %v5_17494, %dec_label_pc_17470thread-pre-split.dec_label_pc_17478_crit_edge ], [ %arg3, %dec_label_pc_17458 ]
  %v0_1747c = icmp slt i32 %v0_1747c.in, 0
  %storemerge = select i1 %v0_1747c, i32 %v3_17478, i32 %v3_1747c
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 %v0_17480, i32* %r1.global-to-local, align 4
  %v1_17484 = add i32 %v0_17484, 4
  %v2_17484 = inttoptr i32 %v1_17484 to i32*
  %v3_17484 = load i32, i32* %v2_17484, align 4
  %v3_17488 = call i32 @function_123dc(i32 %v3_17484, i32 %v0_17480)
  %v1_1748c = icmp slt i32 %v3_17488, 0
  %v2_1748c = icmp eq i32 %v3_17488, 0
  store i1 %v2_1748c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_1748c, label %dec_label_pc_1749c, label %dec_label_pc_17470thread-pre-split

dec_label_pc_1749c:                               ; preds = %dec_label_pc_17478
  %v0_1749c = load i32, i32* %r4.global-to-local, align 4
  %v1_1749c = inttoptr i32 %v0_1749c to i16*
  %v2_1749c = load i16, i16* %v1_1749c, align 2
  %v3_1749c = zext i16 %v2_1749c to i32
  store i32 %v3_1749c, i32* %r3.global-to-local, align 4
  %v1_174a0 = add i32 %v0_1749c, 8
  store i32 %v1_174a0, i32* %r1.global-to-local, align 4
  %v1_174a4 = inttoptr i32 %v1_174a0 to i32*
  %v2_174a4 = load i32, i32* %v1_174a4, align 4
  store i32 %v2_174a4, i32* %r1.global-to-local, align 4
  %v3_174a4 = add i32 %v0_1749c, 12
  %v4_174a4 = inttoptr i32 %v3_174a4 to i32*
  %v5_174a4 = load i32, i32* %v4_174a4, align 4
  %v1_174a8 = or i32 %v3_1749c, 8
  store i32 %v1_174a8, i32* %r3.global-to-local, align 4
  %v2_174ac = sub i32 %v5_174a4, %v2_174a4
  store i32 %v2_174ac, i32* %r2.global-to-local, align 4
  %v9_174ac = icmp eq i32 %v5_174a4, %v2_174a4
  store i1 %v9_174ac, i1* %cpsr_z.global-to-local, align 1
  %v1_174b0 = trunc i32 %v1_174a8 to i16
  store i16 %v1_174b0, i16* %v1_1749c, align 2
  br i1 %v9_174ac, label %dec_label_pc_1749c.dec_label_pc_174fc_crit_edge, label %dec_label_pc_174b8

dec_label_pc_1749c.dec_label_pc_174fc_crit_edge:  ; preds = %dec_label_pc_1749c
  %v0_174fc.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_174fc

dec_label_pc_174b8:                               ; preds = %dec_label_pc_1749c
  %v0_174b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_174b8 = load i32, i32* %r5.global-to-local, align 4
  %v3_174b8 = icmp ult i32 %v0_174b8, %v1_174b8
  %v9_174b8 = icmp eq i32 %v0_174b8, %v1_174b8
  store i1 %v9_174b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_174b8, label %.preheader, label %bb23

bb23:                                             ; preds = %dec_label_pc_174b8
  store i32 %v1_174b8, i32* %r2.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_174b8, %bb23
  %v2_174cc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb24

bb24:                                             ; preds = %.preheader, %dec_label_pc_174e0
  %v2_174cc = phi i32 [ %v2_174cc.pre, %.preheader ], [ %v1_174e4, %dec_label_pc_174e0 ]
  %v0_174c0 = load i32, i32* %r6.global-to-local, align 4
  %v1_174c0 = inttoptr i32 %v0_174c0 to i8*
  %v2_174c0 = load i8, i8* %v1_174c0, align 1
  %v3_174c0 = zext i8 %v2_174c0 to i32
  store i32 %v3_174c0, i32* %r3.global-to-local, align 4
  %v7_174c4 = icmp eq i8 %v2_174c0, 10
  store i1 %v7_174c4, i1* %cpsr_z.global-to-local, align 1
  %v1_174c8 = add i32 %v0_174c0, 1
  store i32 %v1_174c8, i32* %r6.global-to-local, align 4
  %v3_174cc = inttoptr i32 %v2_174cc to i8*
  store i8 %v2_174c0, i8* %v3_174cc, align 1
  %v0_174d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_174d0, label %dec_label_pc_174d4, label %dec_label_pc_174e0

dec_label_pc_174d4:                               ; preds = %bb24
  %v0_174d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_174d4 = inttoptr i32 %v0_174d4 to i16*
  %v2_174d4 = load i16, i16* %v1_174d4, align 2
  %v3_174d4 = zext i16 %v2_174d4 to i32
  store i32 %v3_174d4, i32* %r3.global-to-local, align 4
  %v1_174d8 = and i32 %v3_174d4, 256
  %v2_174d8 = icmp eq i32 %v1_174d8, 0
  store i1 %v2_174d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_174d8, label %dec_label_pc_174e0, label %dec_label_pc_174d4.dec_label_pc_174ec_crit_edge

dec_label_pc_174d4.dec_label_pc_174ec_crit_edge:  ; preds = %dec_label_pc_174d4
  %v0_174f0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_174ec

dec_label_pc_174e0:                               ; preds = %dec_label_pc_174d4, %bb24
  %v0_174e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_174e0 = add i32 %v0_174e0, -1
  store i32 %v1_174e0, i32* %r2.global-to-local, align 4
  %v7_174e0 = icmp eq i32 %v0_174e0, 1
  store i1 %v7_174e0, i1* %cpsr_z.global-to-local, align 1
  %v0_174e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_174e4 = add i32 %v0_174e4, 1
  store i32 %v1_174e4, i32* %r1.global-to-local, align 4
  br i1 %v7_174e0, label %dec_label_pc_174e0.dec_label_pc_174ec_crit_edge, label %bb24

dec_label_pc_174e0.dec_label_pc_174ec_crit_edge:  ; preds = %dec_label_pc_174e0
  %v0_174ec.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_174ec

dec_label_pc_174ec:                               ; preds = %dec_label_pc_174d4.dec_label_pc_174ec_crit_edge, %dec_label_pc_174e0.dec_label_pc_174ec_crit_edge
  %v0_174f0 = phi i32 [ %v1_174e4, %dec_label_pc_174e0.dec_label_pc_174ec_crit_edge ], [ %v0_174f0.pre, %dec_label_pc_174d4.dec_label_pc_174ec_crit_edge ]
  %v0_174ec = phi i32 [ %v0_174ec.pre, %dec_label_pc_174e0.dec_label_pc_174ec_crit_edge ], [ %v0_174d4, %dec_label_pc_174d4.dec_label_pc_174ec_crit_edge ]
  %v1_174ec = add i32 %v0_174ec, 8
  %v2_174ec = inttoptr i32 %v1_174ec to i32*
  %v3_174ec = load i32, i32* %v2_174ec, align 4
  store i32 %v3_174ec, i32* %r3.global-to-local, align 4
  %v2_174f0 = add i32 %v0_174ec, 16
  %v3_174f0 = inttoptr i32 %v2_174f0 to i32*
  store i32 %v0_174f0, i32* %v3_174f0, align 4
  %v0_174f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_174f4 = load i32, i32* %r1.global-to-local, align 4
  %v2_174f4 = sub i32 %v1_174f4, %v0_174f4
  store i32 %v2_174f4, i32* %r3.global-to-local, align 4
  %v1_174f8 = load i32, i32* %r5.global-to-local, align 4
  %v2_174f8 = sub i32 %v1_174f8, %v2_174f4
  store i32 %v2_174f8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_174fc

dec_label_pc_174fc:                               ; preds = %dec_label_pc_1749c.dec_label_pc_174fc_crit_edge, %dec_label_pc_174ec
  %v0_174fc = phi i32 [ %v0_174fc.pre, %dec_label_pc_1749c.dec_label_pc_174fc_crit_edge ], [ %v2_174f8, %dec_label_pc_174ec ]
  %v1_174fc = load i32, i32* @r7, align 4
  %v2_174fc = sub i32 %v1_174fc, %v0_174fc
  br label %dec_label_pc_17500

dec_label_pc_17470.dec_label_pc_17500.loopexit_crit_edge: ; preds = %dec_label_pc_17470thread-pre-split
  %v0_17500.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_17500

dec_label_pc_17500:                               ; preds = %dec_label_pc_17458, %dec_label_pc_17470.dec_label_pc_17500.loopexit_crit_edge, %dec_label_pc_174fc
  %v0_17500 = phi i32 [ %v2_174fc, %dec_label_pc_174fc ], [ %v0_17500.pre.pre, %dec_label_pc_17470.dec_label_pc_17500.loopexit_crit_edge ], [ 0, %dec_label_pc_17458 ]
  %v2_17504 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_17504, i32* %r4.global-to-local, align 4
  ret i32 %v0_17500

; uselistorder directives
  uselistorder i32 %v0_174ec, { 1, 0 }
  uselistorder i32 %v1_174e4, { 0, 2, 1 }
  uselistorder i32 %v0_174e0, { 1, 0 }
  uselistorder i32 %v1_174b8, { 0, 2, 1 }
  uselistorder i32 %v0_174b8, { 1, 0 }
  uselistorder i32 %v5_174a4, { 1, 0 }
  uselistorder i32 %v2_174a4, { 1, 0, 2 }
  uselistorder i32 %v3_17488, { 2, 3, 0, 1 }
  uselistorder i32 %v0_17480, { 1, 0 }
  uselistorder i32 %v5_17494, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 3, 5, 1, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 4, 2, 3, 1, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 3, 5, 4, 6, 7, 8, 0 }
  uselistorder i32 256, { 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 247, 256, 253, 254, 257, 33, 35, 34, 36, 246, 0, 251, 1, 37, 38, 39, 40, 41, 43, 44, 45, 42, 47, 48, 49, 46, 50, 51, 258, 259, 52, 53, 54, 260, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 65, 64, 67, 249, 261, 250, 68, 69, 70, 72, 71, 73, 75, 74, 76, 78, 77, 79, 262, 80, 81, 263, 92, 86, 82, 93, 87, 94, 88, 83, 84, 89, 90, 95, 91, 85, 96, 97, 98, 99, 100, 101, 102, 109, 106, 103, 110, 107, 111, 108, 104, 105, 112, 113, 114, 115, 126, 121, 127, 122, 128, 123, 129, 124, 116, 117, 118, 119, 130, 125, 120, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 147, 144, 148, 145, 149, 146, 141, 142, 143, 150, 151, 152, 153, 154, 164, 165, 159, 155, 166, 160, 167, 161, 156, 162, 168, 163, 157, 158, 169, 170, 171, 172, 173, 174, 179, 177, 175, 180, 178, 176, 181, 248, 264, 182, 184, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 202, 209, 203, 210, 204, 205, 198, 199, 211, 206, 212, 207, 200, 201, 208, 213, 214, 215, 216, 217, 218, 223, 230, 224, 231, 225, 219, 220, 232, 226, 233, 227, 228, 221, 222, 229, 234, 235, 236, 237, 238, 239, 240, 241, 242, 252, 243, 244, 245 }
  uselistorder i8 10, { 4, 5, 0, 6, 1, 2, 3 }
  uselistorder i32 (i32, i32)* @function_123dc, { 2, 1, 0 }
  uselistorder i32 4, { 212, 213, 214, 206, 207, 400, 215, 475, 4, 5, 216, 6, 7, 81, 0, 8, 94, 89, 90, 9, 476, 91, 477, 66, 10, 11, 92, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 12, 495, 496, 497, 498, 499, 500, 65, 501, 502, 503, 504, 505, 506, 13, 14, 93, 507, 217, 107, 218, 15, 219, 108, 220, 221, 222, 223, 143, 224, 225, 226, 227, 228, 229, 16, 208, 209, 210, 211, 288, 289, 201, 202, 203, 204, 205, 508, 144, 109, 509, 17, 510, 145, 146, 67, 404, 405, 406, 407, 408, 409, 147, 148, 18, 410, 411, 412, 413, 414, 415, 416, 417, 149, 402, 403, 370, 371, 372, 373, 374, 375, 376, 377, 378, 19, 379, 380, 381, 418, 20, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 150, 151, 152, 433, 434, 437, 440, 435, 436, 110, 153, 438, 59, 439, 441, 442, 443, 445, 154, 22, 21, 444, 155, 156, 157, 258, 158, 60, 23, 24, 290, 291, 292, 293, 294, 25, 295, 446, 447, 200, 26, 27, 448, 449, 199, 28, 29, 111, 259, 68, 249, 112, 250, 30, 114, 251, 115, 252, 116, 253, 261, 262, 31, 263, 76, 77, 75, 264, 230, 231, 254, 255, 113, 236, 237, 238, 232, 233, 234, 235, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 256, 257, 62, 61, 265, 82, 266, 32, 267, 64, 63, 268, 33, 260, 269, 270, 275, 117, 276, 118, 119, 278, 279, 277, 271, 120, 272, 273, 274, 198, 280, 80, 79, 78, 281, 121, 34, 35, 36, 37, 38, 39, 282, 70, 69, 283, 71, 122, 284, 285, 286, 123, 287, 296, 159, 297, 298, 299, 300, 301, 160, 161, 124, 302, 40, 125, 303, 95, 304, 305, 162, 306, 307, 163, 164, 308, 126, 309, 96, 310, 311, 165, 166, 312, 167, 313, 314, 315, 168, 169, 316, 127, 317, 97, 318, 170, 171, 319, 320, 321, 128, 98, 322, 323, 172, 324, 325, 326, 173, 174, 1, 129, 327, 99, 328, 329, 330, 175, 331, 332, 176, 177, 2, 83, 333, 130, 334, 100, 335, 336, 337, 338, 178, 179, 339, 340, 180, 341, 342, 131, 343, 3, 344, 101, 345, 132, 346, 347, 348, 181, 349, 350, 351, 352, 182, 183, 134, 353, 84, 354, 133, 355, 102, 356, 357, 358, 184, 359, 360, 361, 135, 362, 136, 363, 364, 365, 185, 186, 137, 366, 85, 367, 103, 368, 104, 369, 450, 451, 105, 452, 86, 453, 454, 455, 456, 106, 457, 138, 458, 459, 460, 87, 461, 139, 462, 41, 42, 43, 44, 45, 463, 464, 465, 46, 74, 73, 72, 466, 47, 48, 140, 467, 141, 468, 469, 470, 142, 471, 472, 187, 49, 382, 188, 50, 383, 189, 51, 384, 190, 52, 385, 191, 88, 53, 386, 387, 192, 54, 388, 193, 55, 389, 194, 56, 390, 195, 57, 391, 196, 58, 392, 393, 197, 394, 395, 396, 397, 398, 399, 473, 401, 474 }
  uselistorder i32 2147483647, { 1, 5, 0, 2, 3, 4 }
  uselistorder i32* @r7, { 2, 30, 31, 19, 20, 21, 22, 23, 24, 25, 26, 29, 3, 32, 33, 34, 4, 35, 36, 37, 15, 38, 39, 5, 40, 41, 42, 43, 44, 45, 6, 46, 47, 48, 49, 50, 51, 27, 28, 348, 349, 270, 271, 272, 273, 18, 350, 351, 352, 357, 358, 7, 52, 53, 274, 275, 276, 277, 278, 279, 280, 281, 282, 240, 241, 242, 243, 244, 245, 283, 284, 285, 286, 287, 288, 289, 290, 8, 291, 292, 293, 294, 295, 296, 297, 298, 299, 114, 115, 75, 76, 300, 301, 183, 184, 77, 78, 122, 123, 124, 125, 126, 131, 132, 133, 134, 135, 127, 128, 129, 130, 136, 137, 138, 139, 140, 141, 302, 303, 355, 356, 79, 80, 81, 82, 304, 305, 353, 354, 158, 159, 142, 143, 246, 247, 306, 307, 308, 309, 310, 144, 145, 146, 147, 148, 311, 312, 17, 313, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 61, 70, 71, 62, 58, 9, 54, 55, 56, 57, 69, 59, 60, 63, 0, 64, 65, 66, 67, 68, 72, 73, 99, 100, 101, 102, 103, 104, 105, 226, 227, 228, 229, 74, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 118, 14, 119, 120, 121, 149, 150, 151, 152, 153, 154, 155, 156, 157, 162, 160, 161, 163, 164, 165, 166, 167, 10, 168, 11, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 179, 181, 182, 16, 185, 188, 186, 187, 189, 190, 191, 192, 194, 193, 195, 196, 197, 199, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 1, 220, 217, 218, 219, 221, 222, 223, 224, 225, 234, 230, 231, 232, 233, 235, 236, 237, 238, 239, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 12, 338, 339, 340, 341, 342, 343, 344, 345, 13, 346, 347, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_17500, { 1, 2, 0 }
  uselistorder label %dec_label_pc_174fc, { 1, 0 }
  uselistorder label %dec_label_pc_174ec, { 1, 0 }
  uselistorder label %bb24, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_17478, { 1, 0 }
}

define i32 @function_1750c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1750c:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1750c = load i32, i32* @r4, align 4
  store i32 %v3_1750c, i32* %stack_var_-8, align 4
  %v1_17510 = add i32 %arg1, 8
  %v1_17514 = inttoptr i32 %v1_17510 to i32*
  %v2_17514 = load i32, i32* %v1_17514, align 4
  %v3_17514 = add i32 %arg1, 12
  %v4_17514 = inttoptr i32 %v3_17514 to i32*
  %v5_17514 = load i32, i32* %v4_17514, align 4
  %v2_17518 = sub i32 %v5_17514, %v2_17514
  store i32 %v2_17518, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_17520 = inttoptr i32 %arg1 to i16*
  %v4_17520 = call i32 @function_17400(i16* %v3_17520, i32 %v2_17514, i32 %v2_17518)
  %v0_17524 = load i32, i32* @r4, align 4
  %v1_17524 = add i32 %v0_17524, 8
  %v2_17524 = inttoptr i32 %v1_17524 to i32*
  %v3_17524 = load i32, i32* %v2_17524, align 4
  store i32 %v3_17524, i32* %r2.global-to-local, align 4
  %v2_17528 = add i32 %v3_17524, %v4_17520
  %v2_1752c = add i32 %v0_17524, 20
  %v3_1752c = inttoptr i32 %v2_1752c to i32*
  store i32 %v2_17528, i32* %v3_1752c, align 4
  %v0_17530 = load i32, i32* %r2.global-to-local, align 4
  %v1_17530 = load i32, i32* @r4, align 4
  %v2_17530 = add i32 %v1_17530, 16
  %v3_17530 = inttoptr i32 %v2_17530 to i32*
  store i32 %v0_17530, i32* %v3_17530, align 4
  %v2_17534 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_17534, i32* @r4, align 4
  ret i32 %v4_17520

; uselistorder directives
  uselistorder i32 %v4_17520, { 1, 0 }
  uselistorder i32 20, { 26, 112, 3, 113, 114, 1, 115, 27, 9, 28, 29, 30, 31, 25, 40, 41, 21, 22, 23, 24, 116, 10, 117, 104, 105, 107, 2, 42, 11, 43, 44, 0, 32, 34, 35, 12, 36, 13, 37, 20, 33, 38, 39, 45, 47, 4, 46, 48, 49, 50, 51, 52, 53, 5, 54, 55, 56, 57, 58, 59, 61, 62, 14, 60, 63, 64, 65, 66, 67, 68, 70, 71, 15, 69, 72, 73, 74, 75, 77, 78, 16, 76, 79, 80, 81, 82, 83, 84, 86, 17, 85, 87, 88, 89, 92, 6, 90, 18, 91, 93, 94, 97, 7, 95, 19, 96, 98, 99, 100, 101, 102, 103, 108, 109, 110, 8, 111, 106 }
  uselistorder i32 12, { 9, 10, 37, 11, 12, 40, 6, 172, 173, 174, 175, 176, 178, 179, 177, 180, 181, 182, 183, 184, 185, 186, 13, 14, 15, 16, 18, 17, 19, 41, 42, 20, 43, 44, 45, 46, 47, 38, 39, 85, 86, 34, 35, 36, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 3, 118, 119, 120, 121, 122, 21, 123, 141, 22, 23, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 160, 153, 154, 155, 156, 157, 158, 159, 161, 162, 24, 163, 4, 87, 88, 25, 89, 90, 26, 63, 64, 59, 60, 49, 65, 66, 51, 61, 52, 53, 48, 50, 54, 55, 56, 57, 58, 62, 67, 68, 69, 5, 70, 71, 72, 73, 75, 76, 77, 27, 78, 28, 79, 29, 80, 30, 81, 31, 83, 84, 82, 74, 113, 91, 32, 92, 93, 94, 95, 96, 97, 98, 99, 33, 100, 101, 102, 7, 103, 104, 105, 106, 107, 108, 8, 109, 110, 111, 112, 114, 115, 116, 117, 164, 165, 166, 167, 168, 170, 169, 171, 0, 1, 2 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @function_1753c() local_unnamed_addr {
dec_label_pc_1753c:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1753c = load i32, i32* @r4, align 4
  store i32 %v3_1753c, i32* %stack_var_-12, align 4
  %v0_17540 = load i32, i32* @r0, align 4
  %v1_17540 = inttoptr i32 %v0_17540 to i16*
  %v2_17540 = load i16, i16* %v1_17540, align 2
  %v3_17540 = zext i16 %v2_17540 to i32
  store i32 %v3_17540, i32* %r3.global-to-local, align 4
  %v0_17544 = load i32, i32* @r1, align 4
  %v2_17544 = and i32 %v0_17544, %v3_17540
  %v4_17544 = icmp eq i32 %v2_17544, 0
  store i32 %v0_17540, i32* @r4, align 4
  br i1 %v4_17544, label %dec_label_pc_17554, label %dec_label_pc_17564

dec_label_pc_17554:                               ; preds = %dec_label_pc_1753c
  %v1_17554 = and i32 %v3_17540, 2176
  %v2_17554 = icmp eq i32 %v1_17554, 0
  br i1 %v2_17554, label %dec_label_pc_1755c, label %dec_label_pc_17570

dec_label_pc_1755c:                               ; preds = %dec_label_pc_17554
  %v2_1755c = or i32 %v0_17544, %v3_17540
  store i32 %v2_1755c, i32* %r3.global-to-local, align 4
  %v1_17560 = trunc i32 %v2_1755c to i16
  store i16 %v1_17560, i16* %v1_17540, align 2
  %v0_17564.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_17564

dec_label_pc_17564:                               ; preds = %dec_label_pc_1753c, %dec_label_pc_1755c
  %v0_17564 = phi i32 [ %v0_17540, %dec_label_pc_1753c ], [ %v0_17564.pre, %dec_label_pc_1755c ]
  %v1_17564 = inttoptr i32 %v0_17564 to i16*
  %v2_17564 = load i16, i16* %v1_17564, align 2
  %v3_17564 = zext i16 %v2_17564 to i32
  store i32 %v3_17564, i32* %r3.global-to-local, align 4
  %v1_17568 = and i32 %v3_17564, 16
  store i32 %v1_17568, i32* %r5.global-to-local, align 4
  %v2_17568 = icmp eq i32 %v1_17568, 0
  br i1 %v2_17568, label %dec_label_pc_17590, label %dec_label_pc_17570

dec_label_pc_17570:                               ; preds = %dec_label_pc_17554, %dec_label_pc_17564
  %v0_17570 = call i32 @function_128f8()
  store i32 %v0_17570, i32* %r0.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_17578 = inttoptr i32 %v0_17570 to i32*
  store i32 9, i32* %v2_17578, align 4
  br label %dec_label_pc_1757c

dec_label_pc_1757c:                               ; preds = %dec_label_pc_17598, %dec_label_pc_17570
  %v0_1757c = load i32, i32* @r4, align 4
  %v1_1757c = inttoptr i32 %v0_1757c to i16*
  %v2_1757c = load i16, i16* %v1_1757c, align 2
  %v3_1757c = zext i16 %v2_1757c to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_17584 = or i32 %v3_1757c, 8
  store i32 %v1_17584, i32* %r3.global-to-local, align 4
  %v1_17588 = trunc i32 %v1_17584 to i16
  store i16 %v1_17588, i16* %v1_1757c, align 2
  %v1_175d0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_175c8

dec_label_pc_17590:                               ; preds = %dec_label_pc_17564
  %v1_17590 = and i32 %v3_17564, 64
  %v2_17590 = icmp eq i32 %v1_17590, 0
  br i1 %v2_17590, label %dec_label_pc_175b8, label %dec_label_pc_17598

dec_label_pc_17598:                               ; preds = %dec_label_pc_17590
  %v0_17598 = load i32, i32* @r0, align 4
  %v1_17598 = call i32 @function_16178(i32 %v0_17598)
  store i32 %v1_17598, i32* %r0.global-to-local, align 4
  %v2_1759c = icmp eq i32 %v1_17598, 0
  br i1 %v2_1759c, label %dec_label_pc_175a4, label %dec_label_pc_1757c

dec_label_pc_175a4:                               ; preds = %dec_label_pc_17598
  %v0_175a4 = load i32, i32* @r4, align 4
  %v1_175a4 = inttoptr i32 %v0_175a4 to i16*
  %v2_175a4 = load i16, i16* %v1_175a4, align 2
  %v3_175a4 = zext i16 %v2_175a4 to i32
  store i32 %v3_175a4, i32* %r3.global-to-local, align 4
  %v1_175a8 = add i32 %v0_175a4, 8
  %v2_175a8 = inttoptr i32 %v1_175a8 to i32*
  %v3_175a8 = load i32, i32* %v2_175a8, align 4
  %v1_175ac = and i32 %v3_175a4, 65471
  store i32 %v1_175ac, i32* %r3.global-to-local, align 4
  %v2_175b0 = add i32 %v0_175a4, 28
  %v3_175b0 = inttoptr i32 %v2_175b0 to i32*
  store i32 %v3_175a8, i32* %v3_175b0, align 4
  %v0_175b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_175b4 = trunc i32 %v0_175b4 to i16
  %v2_175b4 = load i32, i32* @r4, align 4
  %v3_175b4 = inttoptr i32 %v2_175b4 to i16*
  store i16 %v1_175b4, i16* %v3_175b4, align 2
  %v0_175b8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_175b8

dec_label_pc_175b8:                               ; preds = %dec_label_pc_17590, %dec_label_pc_175a4
  %v2_175c0 = phi i32 [ %v0_17564, %dec_label_pc_17590 ], [ %v0_175b8.pre, %dec_label_pc_175a4 ]
  %v1_175b8 = inttoptr i32 %v2_175c0 to i16*
  %v2_175b8 = load i16, i16* %v1_175b8, align 2
  %v3_175b8 = zext i16 %v2_175b8 to i32
  %v1_175bc = or i32 %v3_175b8, 1
  store i32 %v1_175bc, i32* %r3.global-to-local, align 4
  %v1_175c0 = trunc i32 %v1_175bc to i16
  store i16 %v1_175c0, i16* %v1_175b8, align 2
  %v0_175c4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_175c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_175c8

dec_label_pc_175c8:                               ; preds = %dec_label_pc_1757c, %dec_label_pc_175b8
  %v1_175d0 = phi i32 [ %v1_175d0.pre, %dec_label_pc_1757c ], [ %v0_175c4, %dec_label_pc_175b8 ]
  %v2_175cc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_175cc, i32* @r4, align 4
  ret i32 %v1_175d0

; uselistorder directives
  uselistorder i32 %v3_17540, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 28, { 24, 52, 7, 25, 26, 27, 41, 42, 22, 11, 23, 12, 13, 14, 15, 49, 50, 51, 8, 16, 17, 38, 0, 28, 1, 29, 2, 30, 3, 31, 4, 32, 5, 33, 18, 34, 19, 35, 20, 36, 6, 37, 9, 21, 40, 39, 43, 44, 45, 46, 47, 48, 10 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_16178, { 2, 1, 0 }
  uselistorder i32 64, { 13, 14, 15, 16, 18, 9, 10, 11, 12, 48, 17, 2, 19, 20, 3, 21, 22, 23, 4, 24, 25, 26, 27, 5, 28, 29, 30, 6, 31, 32, 33, 7, 34, 35, 36, 0, 37, 38, 39, 40, 41, 8, 42, 43, 44, 45, 46, 1, 47 }
  uselistorder i32 8, { 93, 94, 95, 96, 97, 98, 99, 86, 87, 88, 89, 181, 100, 237, 48, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 101, 102, 103, 104, 105, 106, 107, 35, 108, 109, 110, 111, 112, 113, 114, 115, 116, 90, 91, 92, 129, 130, 131, 60, 255, 256, 72, 182, 183, 184, 185, 186, 187, 188, 189, 6, 73, 190, 191, 192, 193, 194, 195, 196, 197, 7, 166, 167, 168, 169, 170, 171, 172, 173, 198, 199, 200, 201, 202, 8, 203, 204, 9, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 222, 215, 216, 217, 218, 74, 29, 219, 220, 221, 75, 76, 10, 223, 224, 225, 226, 228, 229, 77, 11, 230, 12, 227, 51, 52, 49, 50, 31, 32, 45, 46, 53, 257, 132, 133, 134, 135, 61, 81, 38, 13, 14, 27, 15, 80, 39, 16, 17, 28, 18, 62, 118, 119, 19, 20, 21, 120, 63, 117, 82, 47, 121, 122, 123, 30, 33, 125, 22, 64, 126, 65, 127, 128, 124, 23, 24, 25, 66, 67, 68, 69, 136, 79, 54, 137, 138, 139, 140, 141, 40, 142, 143, 144, 145, 3, 146, 147, 148, 4, 149, 150, 151, 152, 153, 154, 155, 5, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 36, 41, 42, 37, 43, 44, 231, 83, 84, 232, 233, 234, 55, 235, 34, 85, 56, 236, 174, 57, 175, 58, 176, 59, 177, 70, 178, 78, 26, 179, 71, 180, 0, 1, 2 }
  uselistorder i32 9, { 6, 32, 27, 28, 60, 62, 7, 45, 4, 63, 8, 35, 36, 33, 9, 10, 34, 29, 37, 2, 30, 38, 31, 11, 39, 12, 40, 13, 41, 14, 42, 15, 43, 16, 44, 17, 18, 19, 20, 0, 21, 22, 1, 23, 24, 25, 57, 46, 47, 26, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 64, 65, 5, 66, 3, 61 }
  uselistorder i32 16, { 104, 105, 106, 98, 99, 100, 101, 107, 36, 37, 38, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 108, 109, 110, 111, 112, 2, 1, 29, 51, 52, 53, 54, 115, 55, 116, 113, 114, 56, 57, 117, 9, 58, 59, 118, 119, 60, 61, 120, 121, 102, 103, 62, 139, 140, 94, 95, 96, 97, 63, 64, 65, 66, 212, 213, 214, 215, 67, 217, 3, 68, 218, 219, 0, 220, 221, 69, 28, 141, 70, 142, 71, 72, 10, 26, 11, 12, 4, 13, 14, 15, 27, 16, 17, 5, 18, 19, 73, 124, 74, 125, 75, 126, 76, 127, 77, 122, 128, 123, 131, 132, 133, 39, 93, 78, 134, 79, 135, 80, 81, 20, 90, 21, 22, 82, 129, 130, 42, 41, 40, 136, 43, 137, 44, 83, 84, 138, 45, 197, 85, 143, 144, 145, 146, 30, 147, 148, 149, 150, 151, 152, 153, 31, 154, 155, 156, 86, 157, 87, 46, 158, 159, 32, 160, 161, 23, 162, 163, 6, 47, 164, 165, 166, 33, 167, 168, 169, 170, 171, 7, 48, 172, 173, 174, 91, 24, 92, 175, 34, 176, 177, 178, 25, 35, 179, 88, 180, 181, 8, 49, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 208, 210, 211, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 89, 232, 233, 234, 235, 50, 236, 237, 238, 239, 240, 216 }
  uselistorder i32* @r1, { 14, 13, 53, 15, 16, 17, 18, 1, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 2, 104, 105, 19, 20, 21, 22, 0, 32, 33, 9, 23, 3, 55, 51, 52, 4, 56, 5, 28, 29, 10, 54, 45, 46, 7, 24, 34, 11, 57, 12, 58, 59, 60, 8, 61, 30, 25, 26, 27, 31, 47, 35, 36, 48, 49, 6, 37, 38, 39, 40, 41, 42, 43, 44, 50, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86 }
  uselistorder label %dec_label_pc_175c8, { 1, 0 }
  uselistorder label %dec_label_pc_175b8, { 1, 0 }
  uselistorder label %dec_label_pc_17570, { 1, 0 }
  uselistorder label %dec_label_pc_17564, { 1, 0 }
}

define i32 @function_175d4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_175d4:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_175d4 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_175e4 = call i32 @function_12a00()
  %v0_175e8 = load i32, i32* @r5, align 4
  %v1_175e8 = load i32, i32* @r4, align 4
  %v2_175e8 = add i32 %v1_175e8, %v0_175e8
  store i32 %v6_175d4, i32* @r5, align 4
  ret i32 %v2_175e8

; uselistorder directives
  uselistorder i32 ()* @function_12a00, { 7, 8, 6, 0, 3, 2, 5, 4, 1 }
  uselistorder i32* @r5, {}
  uselistorder i32* @r2, { 7, 11, 12, 41, 42, 13, 14, 15, 16, 17, 18, 23, 9, 10, 24, 43, 47, 48, 49, 50, 1, 53, 44, 2, 3, 28, 29, 4, 30, 5, 0, 51, 6, 52, 45, 46, 31, 32, 33, 22, 19, 20, 21, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 8 }
}

define i32 @function_175f8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_175f8:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_17638, label %dec_label_pc_17624

dec_label_pc_17624:                               ; preds = %dec_label_pc_175f8
  %v0_17624 = call i32 @function_128f8()
  %v0_17628 = load i32, i32* %r4.global-to-local, align 4
  %v1_17628 = sub i32 0, %v0_17628
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_17630 = inttoptr i32 %v0_17624 to i32*
  store i32 %v1_17628, i32* %v2_17630, align 4
  %v0_17640.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_17640

dec_label_pc_17638:                               ; preds = %dec_label_pc_175f8
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %v2_17638 = icmp eq i32 %arg1, 0
  br i1 %v2_17638, label %dec_label_pc_1764c, label %dec_label_pc_17640

dec_label_pc_17640:                               ; preds = %dec_label_pc_17638, %dec_label_pc_17624
  %v0_17640 = phi i32 [ %arg1, %dec_label_pc_17638 ], [ %v0_17640.pre, %dec_label_pc_17624 ]
  br label %dec_label_pc_17650

dec_label_pc_1764c:                               ; preds = %dec_label_pc_17638
  br label %dec_label_pc_17650

dec_label_pc_17650:                               ; preds = %dec_label_pc_17640, %dec_label_pc_1764c
  %v1_17658 = phi i32 [ %v0_17640, %dec_label_pc_17640 ], [ %tmp8, %dec_label_pc_1764c ]
  ret i32 %v1_17658

; uselistorder directives
  uselistorder i32 -1, { 296, 302, 187, 297, 298, 299, 127, 300, 128, 301, 97, 98, 99, 100, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 188, 189, 0, 190, 165, 303, 304, 191, 129, 305, 192, 1, 101, 306, 307, 170, 308, 193, 3, 2, 194, 195, 130, 380, 131, 132, 338, 133, 339, 118, 340, 326, 327, 328, 134, 295, 135, 341, 342, 4, 196, 197, 198, 343, 199, 5, 200, 6, 201, 171, 344, 10, 202, 203, 9, 11, 345, 8, 204, 205, 102, 7, 206, 103, 104, 105, 106, 207, 208, 209, 114, 311, 312, 12, 313, 136, 346, 137, 138, 336, 139, 347, 140, 335, 141, 348, 142, 325, 143, 144, 314, 145, 349, 146, 334, 147, 315, 117, 186, 13, 330, 210, 148, 350, 149, 382, 150, 316, 151, 317, 152, 318, 153, 329, 154, 384, 155, 351, 156, 381, 157, 332, 158, 331, 159, 352, 160, 161, 162, 383, 211, 212, 213, 214, 14, 15, 112, 115, 16, 17, 353, 116, 113, 167, 169, 215, 20, 216, 21, 217, 319, 218, 219, 107, 22, 220, 221, 222, 223, 224, 225, 226, 19, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 309, 163, 310, 23, 247, 248, 121, 122, 119, 120, 18, 249, 250, 251, 24, 252, 125, 126, 123, 124, 253, 25, 254, 164, 320, 108, 26, 27, 30, 173, 321, 172, 322, 29, 174, 323, 28, 31, 32, 175, 324, 33, 34, 35, 36, 37, 255, 38, 109, 39, 40, 42, 256, 166, 41, 110, 43, 44, 45, 46, 47, 48, 49, 257, 50, 176, 333, 51, 52, 258, 53, 54, 55, 56, 259, 57, 260, 58, 59, 60, 261, 61, 62, 262, 63, 64, 65, 66, 67, 263, 68, 69, 70, 264, 71, 72, 354, 355, 183, 356, 265, 75, 266, 76, 267, 77, 268, 182, 357, 181, 358, 95, 269, 78, 270, 79, 271, 178, 359, 184, 360, 272, 80, 273, 81, 274, 82, 275, 83, 276, 84, 277, 85, 278, 86, 279, 87, 280, 88, 281, 89, 282, 90, 283, 180, 361, 92, 284, 93, 285, 91, 286, 94, 287, 177, 362, 288, 96, 289, 290, 73, 291, 74, 292, 179, 363, 168, 185, 364, 111, 293, 294, 337 }
  uselistorder i32 ()* @function_128f8, { 62, 58, 61, 60, 59, 64, 57, 56, 5, 4, 28, 24, 23, 48, 47, 63, 22, 21, 20, 27, 17, 19, 18, 37, 36, 16, 15, 29, 14, 38, 13, 49, 12, 35, 11, 39, 34, 55, 54, 46, 44, 43, 42, 10, 2, 33, 32, 31, 45, 0, 9, 3, 40, 41, 8, 26, 30, 1, 53, 52, 51, 50, 7, 6, 25 }
  uselistorder i32 1, { 271, 270, 792, 616, 396, 397, 398, 617, 145, 793, 794, 795, 618, 17, 19, 18, 20, 15, 22, 16, 21, 619, 70, 69, 71, 620, 10, 11, 8, 14, 12, 9, 13, 621, 72, 315, 314, 427, 459, 428, 1003, 1004, 1005, 1006, 443, 339, 623, 622, 399, 400, 796, 624, 432, 1125, 433, 797, 1126, 798, 799, 800, 802, 801, 418, 625, 804, 803, 905, 906, 1127, 434, 1128, 1129, 1130, 1131, 1132, 1133, 788, 1134, 1135, 1136, 1137, 1138, 1139, 789, 609, 627, 626, 362, 363, 368, 370, 369, 364, 361, 365, 367, 366, 808, 805, 806, 807, 457, 435, 86, 84, 85, 88, 87, 498, 809, 810, 811, 812, 628, 610, 41, 42, 813, 631, 630, 629, 43, 46, 44, 47, 48, 49, 45, 499, 814, 633, 632, 343, 346, 344, 341, 342, 345, 815, 634, 210, 209, 208, 816, 817, 635, 55, 54, 636, 216, 500, 791, 413, 414, 818, 819, 820, 821, 822, 823, 824, 825, 436, 639, 638, 637, 348, 347, 352, 350, 349, 351, 826, 827, 828, 641, 640, 23, 24, 501, 829, 642, 193, 830, 831, 832, 833, 834, 502, 643, 120, 123, 122, 121, 124, 503, 125, 280, 644, 337, 336, 175, 645, 293, 646, 206, 205, 647, 127, 132, 126, 131, 135, 134, 130, 133, 128, 129, 648, 267, 266, 264, 263, 265, 261, 262, 649, 221, 222, 229, 230, 226, 227, 225, 228, 223, 224, 650, 112, 113, 375, 907, 141, 144, 142, 143, 651, 245, 244, 652, 68, 653, 283, 284, 1140, 504, 1141, 505, 1142, 654, 61, 56, 62, 60, 58, 63, 57, 64, 59, 313, 506, 307, 306, 655, 376, 377, 217, 421, 835, 836, 837, 656, 1008, 659, 658, 657, 243, 660, 1143, 444, 507, 662, 661, 663, 50, 1009, 1012, 1013, 1014, 664, 353, 358, 359, 357, 356, 360, 354, 355, 1015, 1016, 1017, 1018, 665, 387, 393, 386, 392, 391, 385, 395, 394, 389, 383, 388, 384, 390, 1010, 1011, 508, 666, 110, 109, 108, 111, 987, 509, 988, 989, 990, 991, 992, 667, 309, 310, 308, 311, 172, 171, 1019, 1020, 1021, 1022, 1023, 1024, 466, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 511, 1033, 1034, 1035, 1036, 1037, 510, 1038, 1039, 1040, 1041, 1042, 668, 403, 405, 401, 404, 409, 412, 408, 410, 411, 406, 407, 402, 40, 39, 512, 513, 869, 425, 672, 671, 670, 669, 215, 312, 437, 186, 673, 258, 257, 320, 674, 211, 675, 177, 676, 220, 677, 327, 678, 305, 304, 338, 679, 174, 173, 680, 160, 681, 287, 286, 682, 335, 683, 977, 978, 51, 52, 838, 839, 840, 841, 842, 843, 844, 1144, 114, 115, 116, 117, 684, 908, 514, 118, 119, 845, 685, 334, 515, 686, 176, 467, 516, 687, 214, 212, 213, 688, 35, 34, 33, 689, 322, 321, 690, 97, 691, 328, 692, 242, 241, 693, 269, 268, 256, 255, 694, 66, 65, 695, 260, 259, 696, 140, 697, 282, 281, 698, 292, 291, 231, 699, 340, 67, 700, 701, 219, 1043, 415, 1044, 416, 1045, 371, 1046, 1047, 1048, 1049, 420, 1050, 703, 702, 146, 153, 151, 149, 150, 147, 148, 152, 417, 429, 1051, 1052, 1053, 1054, 303, 302, 0, 1055, 1056, 1057, 1058, 1059, 438, 1060, 439, 1061, 705, 704, 372, 374, 373, 909, 910, 911, 706, 32, 31, 29, 30, 1062, 1063, 1064, 430, 445, 1, 419, 497, 1065, 317, 316, 318, 319, 1066, 1067, 1068, 517, 1069, 185, 993, 1071, 1070, 1072, 89, 1073, 870, 285, 1074, 707, 139, 138, 137, 136, 1075, 708, 326, 325, 324, 323, 518, 864, 519, 865, 470, 866, 446, 530, 867, 871, 469, 872, 851, 531, 532, 852, 847, 521, 846, 848, 849, 850, 524, 522, 426, 853, 523, 854, 855, 525, 856, 857, 528, 858, 859, 526, 860, 861, 527, 862, 863, 529, 868, 873, 874, 875, 533, 876, 877, 878, 534, 879, 790, 882, 881, 520, 880, 883, 884, 535, 885, 886, 887, 894, 895, 422, 536, 611, 719, 718, 717, 716, 715, 714, 713, 612, 712, 711, 710, 709, 161, 163, 162, 170, 169, 166, 167, 168, 164, 165, 888, 889, 537, 890, 891, 538, 892, 893, 250, 249, 248, 254, 251, 252, 253, 247, 246, 539, 540, 721, 720, 380, 381, 378, 379, 382, 979, 723, 722, 157, 158, 156, 155, 154, 159, 207, 543, 471, 896, 897, 472, 898, 541, 542, 544, 899, 900, 545, 546, 547, 548, 549, 550, 551, 736, 735, 734, 733, 732, 731, 730, 729, 728, 727, 615, 726, 725, 724, 25, 26, 28, 27, 552, 423, 553, 737, 556, 555, 554, 901, 739, 738, 95, 96, 557, 558, 559, 902, 903, 560, 458, 561, 904, 424, 562, 743, 742, 741, 740, 195, 194, 912, 918, 3, 447, 913, 563, 914, 2, 915, 460, 916, 448, 449, 917, 919, 920, 461, 921, 613, 747, 746, 614, 745, 744, 218, 980, 473, 474, 981, 4, 5, 6, 922, 923, 924, 431, 462, 463, 925, 926, 927, 928, 929, 565, 930, 564, 931, 566, 932, 933, 934, 751, 750, 749, 748, 198, 197, 200, 203, 201, 202, 196, 199, 204, 935, 936, 937, 567, 568, 753, 752, 330, 332, 333, 329, 331, 938, 939, 569, 940, 941, 942, 943, 570, 944, 571, 476, 475, 572, 945, 754, 189, 190, 192, 191, 187, 188, 946, 573, 947, 479, 477, 478, 756, 755, 36, 37, 948, 949, 950, 574, 951, 575, 576, 952, 480, 953, 757, 296, 300, 298, 299, 301, 295, 294, 297, 954, 955, 956, 577, 957, 578, 482, 481, 579, 958, 580, 959, 758, 234, 237, 238, 240, 239, 232, 236, 235, 233, 960, 961, 962, 963, 964, 965, 581, 966, 582, 967, 583, 487, 486, 584, 968, 483, 969, 484, 970, 485, 971, 764, 763, 762, 761, 760, 759, 178, 181, 182, 184, 183, 179, 180, 972, 973, 974, 585, 490, 489, 586, 975, 488, 976, 765, 275, 276, 278, 279, 274, 277, 272, 273, 982, 983, 984, 587, 493, 492, 588, 985, 491, 986, 770, 769, 768, 767, 766, 99, 103, 104, 106, 105, 98, 102, 101, 100, 1076, 594, 1077, 1078, 592, 1079, 593, 1080, 1081, 597, 1082, 1083, 465, 595, 1084, 596, 1085, 1086, 495, 1087, 1088, 452, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 441, 1096, 598, 1097, 599, 600, 1098, 1099, 1100, 1101, 453, 1102, 1103, 454, 1104, 1105, 455, 1106, 442, 451, 450, 1107, 1108, 591, 1109, 1110, 589, 1111, 440, 590, 494, 1112, 1114, 1115, 1113, 601, 1116, 602, 1117, 603, 1118, 1119, 787, 468, 1120, 1121, 464, 604, 1123, 782, 781, 780, 779, 778, 777, 776, 775, 774, 773, 772, 771, 74, 75, 76, 78, 81, 83, 82, 77, 73, 79, 80, 994, 496, 605, 783, 288, 289, 290, 995, 996, 456, 606, 999, 607, 608, 1000, 997, 998, 1001, 1002, 91, 92, 90, 94, 93, 1122, 784, 53, 1007, 107, 1124, 7, 785, 786, 38 }
  uselistorder i32 %arg1, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_17650, { 1, 0 }
}

define i32 @function_1765c() local_unnamed_addr {
entry:
  %v3_17660 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_17660)
  %v31_17668 = load i32, i32* @r0, align 4
  ret i32 %v31_17668

; uselistorder directives
  uselistorder i32* @r0, { 30, 21, 17, 56, 55, 209, 27, 5, 6, 279, 7, 23, 8, 57, 1, 58, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 2, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 59, 20, 53, 54, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 24, 11, 164, 165, 29, 12, 28, 306, 308, 309, 45, 46, 47, 48, 49, 50, 51, 52, 13, 25, 74, 75, 307, 76, 212, 26, 43, 44, 213, 3, 214, 215, 216, 211, 201, 40, 202, 203, 204, 41, 205, 206, 14, 224, 225, 217, 218, 219, 220, 221, 222, 223, 82, 83, 15, 84, 9, 19, 166, 167, 168, 169, 207, 10, 16, 18, 226, 22, 227, 228, 229, 230, 231, 232, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 79, 148, 39, 77, 78, 80, 149, 151, 152, 153, 154, 155, 156, 150, 32, 33, 0, 81, 34, 35, 157, 36, 37, 158, 159, 160, 161, 162, 163, 38, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 192, 193, 4, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 233, 199, 234, 200, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 208, 42, 210, 31 }
  uselistorder void (i32)* @__pseudo_branch, { 0, 59, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 2, 3, 64, 65, 66, 67, 60, 48, 61, 62, 63, 68, 69, 70, 49, 50, 51, 44, 45, 46, 52, 56, 57, 53, 54, 55, 71, 38, 39, 40, 41, 42, 43, 47, 58 }
  uselistorder i32 0, { 561, 562, 571, 572, 573, 574, 575, 87, 576, 577, 578, 0, 579, 267, 46, 580, 313, 581, 582, 583, 297, 298, 563, 564, 569, 1, 88, 89, 940, 941, 942, 943, 121, 122, 944, 584, 123, 90, 1160, 1161, 1162, 268, 585, 586, 587, 269, 1163, 47, 270, 1164, 1165, 68, 38, 39, 588, 55, 2, 80, 81, 756, 56, 57, 58, 757, 758, 1166, 1167, 1168, 1169, 1170, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1171, 1172, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 29, 1191, 1192, 1193, 1194, 1195, 30, 1196, 1197, 1198, 31, 1199, 1200, 1201, 32, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1226, 1227, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 33, 1245, 1246, 1247, 1248, 1249, 34, 1250, 1251, 1252, 1253, 1254, 35, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 124, 589, 530, 590, 591, 592, 593, 594, 314, 315, 595, 596, 91, 92, 93, 597, 598, 602, 599, 600, 601, 271, 285, 603, 604, 94, 125, 607, 605, 606, 272, 608, 95, 609, 610, 3, 4, 96, 611, 555, 556, 316, 557, 612, 613, 614, 48, 49, 615, 616, 617, 126, 618, 619, 620, 621, 622, 317, 623, 624, 625, 626, 627, 628, 97, 629, 630, 631, 632, 5, 6, 127, 129, 633, 128, 634, 130, 635, 98, 636, 641, 642, 637, 638, 639, 644, 645, 646, 131, 647, 648, 649, 650, 651, 640, 643, 652, 99, 565, 566, 567, 1270, 1271, 918, 948, 949, 570, 759, 760, 299, 761, 318, 558, 319, 559, 950, 951, 952, 132, 953, 762, 763, 764, 560, 568, 100, 133, 1272, 1273, 954, 955, 320, 1277, 1278, 321, 1279, 1280, 134, 274, 1281, 1282, 322, 50, 1283, 1284, 323, 1291, 1292, 1295, 511, 273, 1296, 324, 1293, 1294, 1274, 1275, 531, 135, 255, 653, 655, 654, 136, 656, 657, 658, 325, 659, 82, 956, 73, 957, 138, 137, 958, 101, 1276, 102, 327, 328, 1286, 326, 103, 529, 104, 139, 964, 965, 966, 967, 968, 140, 969, 970, 971, 972, 973, 974, 975, 141, 959, 329, 960, 961, 330, 962, 963, 105, 919, 331, 142, 920, 921, 922, 923, 924, 106, 146, 147, 149, 148, 152, 151, 150, 144, 143, 145, 976, 977, 1001, 1002, 107, 978, 979, 156, 154, 155, 980, 981, 162, 161, 118, 153, 982, 983, 984, 985, 986, 987, 289, 288, 300, 332, 988, 989, 990, 51, 991, 158, 157, 159, 160, 117, 992, 993, 275, 994, 995, 83, 996, 997, 998, 999, 1000, 7, 8, 682, 683, 52, 108, 9, 301, 333, 1003, 1004, 897, 1005, 870, 1006, 749, 1007, 684, 1008, 830, 685, 945, 1297, 1298, 59, 109, 765, 766, 767, 163, 660, 661, 164, 768, 773, 774, 775, 776, 165, 302, 166, 290, 291, 334, 769, 167, 770, 771, 110, 777, 1009, 1287, 686, 687, 688, 772, 1290, 1010, 1285, 797, 778, 1011, 925, 689, 335, 1288, 76, 1289, 10, 1012, 1013, 1014, 1015, 77, 1016, 168, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 169, 512, 532, 513, 514, 1024, 1025, 1026, 1027, 1028, 1029, 11, 1030, 1031, 78, 1032, 1033, 1034, 1035, 1036, 170, 1037, 515, 533, 516, 517, 1038, 534, 119, 171, 1039, 1040, 1041, 74, 286, 1042, 1043, 40, 111, 535, 276, 13, 12, 172, 1044, 173, 536, 14, 277, 174, 175, 176, 41, 177, 336, 690, 779, 780, 781, 1046, 1045, 1047, 1048, 1049, 1050, 36, 178, 1051, 1052, 1053, 179, 69, 70, 337, 311, 312, 1054, 181, 180, 182, 1055, 183, 1056, 1057, 184, 926, 927, 338, 185, 186, 187, 1058, 188, 1059, 189, 190, 691, 191, 692, 693, 694, 698, 666, 674, 675, 677, 662, 71, 42, 258, 259, 663, 676, 664, 537, 665, 667, 538, 668, 539, 669, 540, 670, 541, 671, 542, 672, 543, 673, 678, 679, 339, 680, 79, 695, 510, 696, 340, 697, 279, 278, 699, 700, 701, 702, 193, 192, 703, 704, 705, 544, 256, 706, 62, 63, 257, 707, 60, 61, 341, 709, 710, 518, 711, 712, 713, 714, 715, 342, 716, 717, 718, 120, 528, 719, 720, 721, 527, 722, 723, 343, 724, 725, 728, 729, 730, 194, 726, 195, 727, 16, 15, 196, 708, 898, 899, 681, 731, 344, 732, 734, 197, 735, 736, 737, 738, 739, 740, 741, 199, 198, 742, 345, 743, 346, 744, 347, 733, 745, 292, 746, 348, 747, 378, 379, 349, 748, 350, 751, 545, 202, 201, 200, 281, 351, 750, 280, 752, 753, 754, 43, 755, 203, 352, 75, 782, 783, 784, 785, 284, 786, 787, 788, 283, 789, 790, 791, 792, 204, 793, 795, 794, 112, 113, 205, 282, 207, 206, 796, 208, 209, 53, 210, 798, 799, 84, 85, 54, 800, 211, 212, 260, 801, 214, 802, 215, 213, 353, 803, 804, 806, 805, 807, 216, 808, 809, 303, 810, 811, 812, 217, 218, 813, 219, 814, 220, 815, 221, 816, 817, 72, 818, 819, 222, 820, 821, 822, 223, 824, 224, 261, 825, 823, 826, 827, 828, 225, 829, 831, 227, 833, 834, 226, 832, 835, 114, 355, 356, 836, 837, 357, 358, 838, 354, 839, 840, 228, 841, 842, 229, 230, 843, 844, 115, 845, 846, 17, 18, 19, 20, 847, 848, 231, 305, 849, 850, 359, 851, 360, 852, 361, 853, 362, 854, 363, 855, 364, 856, 304, 857, 365, 858, 859, 860, 232, 862, 863, 233, 262, 864, 861, 865, 866, 867, 21, 22, 23, 868, 234, 869, 871, 872, 44, 873, 235, 874, 875, 236, 263, 877, 876, 366, 878, 880, 881, 882, 367, 883, 24, 25, 26, 879, 27, 28, 884, 237, 885, 886, 238, 889, 890, 891, 264, 892, 887, 888, 894, 893, 895, 239, 896, 900, 901, 240, 903, 904, 905, 241, 368, 907, 906, 902, 909, 910, 908, 911, 242, 912, 913, 914, 915, 916, 1060, 917, 1061, 1062, 1063, 1064, 243, 244, 369, 1065, 1066, 519, 520, 521, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 546, 1080, 1081, 1082, 1083, 1084, 374, 1085, 1086, 547, 1087, 1088, 1089, 522, 1090, 523, 245, 246, 247, 1091, 1092, 1093, 1094, 548, 1095, 1096, 116, 1097, 1098, 549, 1099, 248, 1100, 1101, 1102, 550, 370, 371, 1103, 1104, 551, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 372, 1119, 1114, 1115, 1116, 1117, 552, 1118, 553, 1120, 373, 1121, 1122, 1123, 1124, 1125, 1126, 524, 1128, 1129, 1130, 1131, 1132, 293, 1133, 1136, 1137, 1134, 1135, 250, 249, 1138, 1139, 1140, 1141, 251, 1142, 1143, 265, 1144, 64, 65, 266, 1145, 66, 67, 375, 1146, 1127, 1147, 508, 509, 525, 294, 1148, 526, 1149, 1150, 1151, 1152, 1153, 306, 1154, 307, 1157, 308, 1159, 295, 928, 376, 929, 45, 930, 86, 931, 932, 933, 296, 934, 377, 935, 936, 937, 37, 287, 938, 939, 1155, 252, 1156, 946, 253, 947, 254, 1158, 309, 554, 310, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313 }
  uselistorder i32* @r4, { 44, 57, 58, 59, 7, 60, 61, 62, 8, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 50, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 787, 788, 82, 83, 9, 1, 84, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 10, 85, 86, 87, 88, 89, 90, 91, 92, 93, 11, 94, 95, 98, 99, 100, 101, 45, 102, 103, 104, 105, 106, 107, 96, 97, 46, 47, 108, 109, 12, 110, 13, 111, 14, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 15, 132, 133, 134, 16, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 53, 54, 55, 56, 48, 49, 623, 624, 294, 295, 805, 806, 807, 625, 626, 810, 815, 816, 817, 818, 819, 820, 821, 808, 147, 148, 149, 627, 628, 629, 809, 811, 814, 150, 151, 152, 153, 630, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 17, 649, 650, 651, 652, 631, 632, 633, 634, 635, 636, 558, 559, 560, 561, 562, 563, 564, 565, 566, 18, 567, 568, 569, 570, 571, 572, 573, 574, 575, 653, 675, 676, 677, 678, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 36, 667, 668, 0, 669, 670, 671, 672, 673, 674, 182, 183, 184, 812, 813, 529, 530, 478, 479, 296, 297, 298, 299, 300, 301, 302, 154, 155, 156, 303, 304, 305, 6, 306, 307, 308, 309, 310, 311, 312, 679, 680, 681, 2, 682, 313, 314, 683, 684, 19, 685, 686, 687, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 688, 689, 690, 691, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 219, 220, 221, 222, 179, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 180, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 250, 251, 252, 3, 253, 244, 245, 246, 247, 248, 249, 237, 238, 531, 532, 533, 534, 535, 181, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 35, 287, 286, 34, 288, 289, 290, 291, 292, 4, 293, 315, 20, 5, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 341, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 21, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 22, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 23, 413, 24, 414, 25, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 26, 441, 27, 442, 28, 443, 29, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 30, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 536, 537, 538, 539, 31, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 32, 723, 37, 724, 725, 42, 726, 728, 729, 730, 41, 727, 33, 731, 732, 733, 734, 735, 736, 737, 40, 738, 739, 740, 39, 741, 742, 743, 38, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 780, 781, 782, 783, 784, 785, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 777, 778, 779, 622, 43, 786 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i16* @__decompiler_undefined_function_1() local_unnamed_addr

declare i16 @__decompiler_undefined_function_2() local_unnamed_addr

declare i8* @__decompiler_undefined_function_3() local_unnamed_addr

declare i8 @__decompiler_undefined_function_4() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #0

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #0

attributes #0 = { nounwind readnone }
