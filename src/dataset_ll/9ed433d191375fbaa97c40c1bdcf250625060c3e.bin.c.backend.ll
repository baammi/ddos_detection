source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%_TYPEDEF_fd_set = type { [1 x i32] }
%timeval = type { i32, i32 }
%dirent = type { i32, i32, i16, i8, [256 x i8] }
%__dirstream = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_1a204.2 = global i32 1
@global_var_1a29c.3 = global i32* @global_var_1a204.2
@global_var_1a2a4.4 = global i32 0
@global_var_1a2a8.5 = global i32 35648
@global_var_1a2ac.6 = global i32 35648
@global_var_1a2b0.7 = global i32 35648
@global_var_1a2b4.8 = global i32 35648
@global_var_1a2b8.9 = global i32 35648
@global_var_1a2bc.10 = global i32 35648
@global_var_1a2c0.11 = global i32 35648
@global_var_1a2c4.12 = global i32 35648
@global_var_1a2c8.13 = global i32 35648
@global_var_1a2cc.14 = global i32 35648
@global_var_1a2d0.15 = global i32 35648
@global_var_1a2d4.16 = global i32 35648
@global_var_1a2d8.17 = global i32 35648
@global_var_1a2dc.18 = global i32 35648
@global_var_1a2e0.19 = global i32 35648
@global_var_1a2e4.20 = global i32 35648
@global_var_1a2e8.21 = global i32 35648
@global_var_1a2ec.22 = global i32 35648
@global_var_1a2f4.24 = global i32 35648
@global_var_1a2f8.25 = global i32 35648
@global_var_1a2fc.26 = global i32 35648
@global_var_1a300.27 = global i32 35648
@global_var_1a304.28 = global i32 35648
@global_var_1a308.29 = global i32 35648
@global_var_1a30c.30 = global i32 35648
@global_var_1a310.31 = global i32 35648
@global_var_1a314.32 = global i32 35648
@global_var_1a318.33 = global i32 35648
@global_var_1a31c.34 = global i32 35648
@global_var_1a320.35 = global i32 35648
@global_var_1a324.36 = global i32 35648
@global_var_1a328.37 = global i32 35648
@global_var_1a32c.38 = global i32 35648
@global_var_1a330.39 = global i32 35648
@global_var_1a334.40 = global i32 35648
@global_var_1a338.41 = global i32 35648
@global_var_1a33c.42 = global i32 35648
@global_var_1a340.43 = global i32 35648
@global_var_1a348.45 = global i32 35648
@global_var_1a34c.46 = global i32 35648
@global_var_1a350.47 = global i32 35648
@global_var_1a354.48 = global i32 35648
@global_var_1a358.49 = global i32 35648
@global_var_1a35c.50 = global i32 35648
@global_var_1a360.51 = global i32 35648
@global_var_1a364.52 = global i32 35648
@global_var_1a368.53 = global i32 35648
@global_var_1a36c.54 = global i32 35648
@global_var_1a1fc.58 = global i32 0
@global_var_1a378.59 = global i32* @global_var_1a1fc.58
@global_var_1a398.65 = global i32 0
@global_var_ed38.71 = constant i32 -382906384
@global_var_1a3b4.76 = global i32 0
@global_var_9010.77 = constant i32 -352321546
@global_var_8d88.78 = constant i32 -493894144
@global_var_b1c8.84 = constant i32 -382906384
@global_var_b68c.86 = constant i32 -382906384
@global_var_96d4.88 = constant i32 -382906384
@global_var_d6a8.90 = constant i32 -382906384
@global_var_cf34.92 = constant i32 -382906384
@global_var_c6b8.94 = constant i32 -382906384
@global_var_aaac.97 = constant i32 -382906384
@global_var_a330.99 = constant i32 -382906384
@global_var_1a40c.102 = global i32 0
@global_var_11f94.114 = constant i32 47
@global_var_1a414.116 = global i32 0
@global_var_1a3b8.118 = global i32 0
@global_var_ebf8.122 = constant i32 -382910448
@global_var_1a388.124 = global i32 72124
@global_var_1a380.126 = global i32 -1
@global_var_8607.131 = global i32 4608
@global_var_11f98.133 = constant [12 x i8] c"89.46.77.14\00"
@global_var_1a41c.136 = local_unnamed_addr global i32 0
@global_var_1a41b.137 = local_unnamed_addr global i32 0
@global_var_1a41a.138 = local_unnamed_addr global i32 0
@global_var_ec4c.139 = constant i32 -382910416
@global_var_1a3bc.141 = global i32 0
@global_var_1a419.147 = local_unnamed_addr global i32 0
@global_var_11fa4.151 = constant i32 10
@global_var_1a384.154 = global i32 -1
@global_var_8d7c.157 = constant i32 -493894144
@global_var_119bc.158 = constant i32 -382910224
@global_var_11fa8.160 = constant i32 16777216
@global_var_1a3c4.162 = global i32 0
@global_var_1a3d0.164 = global i32 0
@global_var_1a3c8.166 = global i32 0
@global_var_1a3cc.168 = global i32 0
@global_var_1a408.182 = global i32 0
@global_var_1a3d4.184 = global i32 0
@global_var_1a400.186 = global i32 0
@global_var_1a430.191 = global i32 0
@global_var_1a428.195 = global i32 0
@global_var_1a42c.197 = global i32 0
@global_var_1a3d8.199 = global i32 0
@global_var_1a3db.200 = local_unnamed_addr global i32 0
@global_var_1a3da.201 = local_unnamed_addr global i32 0
@global_var_1a3ec.203 = global i32 0
@global_var_1a3dd.205 = local_unnamed_addr global i32 0
@global_var_1a3e1.206 = local_unnamed_addr global i32 0
@global_var_1a3e0.207 = local_unnamed_addr global i32 0
@global_var_1a3ef.208 = local_unnamed_addr global i32 0
@global_var_1a3ed.209 = local_unnamed_addr global i32 0
@global_var_1a3dc.210 = local_unnamed_addr global i32 0
@global_var_1a3ee.211 = local_unnamed_addr global i32 0
@global_var_1a3fb.213 = local_unnamed_addr global i32 0
@global_var_1a3fa.214 = local_unnamed_addr global i32 0
@global_var_12034.216 = constant [5 x i8] c"&;; \00"
@global_var_12038.218 = constant i32 536542976
@global_var_11fb0.220 = constant [5 x i8] c"5:?;\00"
@global_var_11fb8.222 = constant [9 x i8] c"<!: acam\00"
@global_var_11fc4.224 = constant [7 x i8] c" 18:1 \00"
@global_var_11fcc.226 = constant [8 x i8] c"0125!8 \00"
@global_var_11fd4.228 = constant [9 x i8] c"$5''#;&0\00"
@global_var_11fe0.230 = constant [6 x i8] c"509=:\00"
@global_var_11fe8.232 = constant [6 x i8] c"\22=.,\22\00"
@global_var_11ff0.234 = constant [8 x i8] c"'!$$;& \00"
@global_var_11ff8.236 = constant i32 423502179
@global_var_12008.238 = constant [6 x i8] c"efg`a\00"
@global_var_12010.240 = constant [5 x i8] c"!'1&\00"
@global_var_12018.242 = constant i32 943467547
@global_var_12024.244 = constant i32 322070023
@global_var_1a3e4.245 = local_unnamed_addr global i32 0
@global_var_1a3e2.247 = local_unnamed_addr global i32 0
@global_var_1a3e3.248 = local_unnamed_addr global i32 0
@global_var_1a3fc.250 = local_unnamed_addr global i32 0
@global_var_1a3fd.251 = local_unnamed_addr global i32 0
@global_var_12030.257 = constant [3 x i8] c"\0D\0A\00"
@global_var_12042.259 = constant i32 2096127
@global_var_12039.261 = constant i32 2095871
@global_var_1a438.264 = global i32 0
@global_var_1a390.267 = global i32 -555811921
@global_var_12048.272 = constant [3 x i8] c"Qm\00"
@global_var_1a440.273 = local_unnamed_addr global i32 0
@global_var_1a444.274 = local_unnamed_addr global i32 0
@global_var_1a445.275 = local_unnamed_addr global i32 0
@global_var_1204c.277 = constant i32 59987
@global_var_1a448.278 = local_unnamed_addr global i32 0
@global_var_1a44c.279 = local_unnamed_addr global i32 0
@global_var_1a44d.280 = local_unnamed_addr global i32 0
@global_var_121b4.282 = constant i32 808465680
@global_var_1a454.283 = local_unnamed_addr global i32 0
@global_var_1a450.284 = local_unnamed_addr global i32 0
@global_var_1a455.285 = local_unnamed_addr global i32 0
@global_var_12050.287 = constant [7 x i8] c"'<188T\00"
@global_var_1a458.288 = local_unnamed_addr global i32 0
@global_var_1a45c.289 = local_unnamed_addr global i32 0
@global_var_1a45d.290 = local_unnamed_addr global i32 0
@global_var_12058.292 = constant [8 x i8] c"1:5681T\00"
@global_var_1a460.293 = local_unnamed_addr global i32 0
@global_var_1a464.294 = local_unnamed_addr global i32 0
@global_var_1a465.295 = local_unnamed_addr global i32 0
@global_var_12060.297 = constant [8 x i8] c"'-' 19T\00"
@global_var_1a468.298 = local_unnamed_addr global i32 0
@global_var_1a46c.299 = local_unnamed_addr global i32 0
@global_var_1a46d.300 = local_unnamed_addr global i32 0
@global_var_12068.302 = constant [4 x i8] c"'<T\00"
@global_var_1a474.303 = local_unnamed_addr global i32 0
@global_var_1a470.304 = local_unnamed_addr global i32 0
@global_var_1a475.305 = local_unnamed_addr global i32 0
@global_var_1206c.307 = constant i32 977090171
@global_var_1a47c.308 = local_unnamed_addr global i32 0
@global_var_1a478.309 = local_unnamed_addr global i32 0
@global_var_1a47d.310 = local_unnamed_addr global i32 0
@global_var_12080.312 = constant i32 470227742
@global_var_1a484.313 = local_unnamed_addr global i32 0
@global_var_1a480.314 = local_unnamed_addr global i32 0
@global_var_1a485.315 = local_unnamed_addr global i32 0
@global_var_1209c.317 = constant [10 x i8] c":7;&&17 T\00"
@global_var_1a48c.318 = local_unnamed_addr global i32 0
@global_var_1a488.319 = local_unnamed_addr global i32 0
@global_var_1a48d.320 = local_unnamed_addr global i32 0
@global_var_120a8.322 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_1a490.323 = local_unnamed_addr global i32 0
@global_var_1a494.324 = local_unnamed_addr global i32 0
@global_var_1a495.325 = local_unnamed_addr global i32 0
@global_var_120bc.327 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_1a49c.328 = local_unnamed_addr global i32 0
@global_var_1a498.329 = local_unnamed_addr global i32 0
@global_var_1a49d.330 = local_unnamed_addr global i32 0
@global_var_120d4.332 = constant [8 x i8] c"{$&;7{T\00"
@global_var_1a4a0.333 = local_unnamed_addr global i32 0
@global_var_1a4a4.334 = local_unnamed_addr global i32 0
@global_var_1a4a5.335 = local_unnamed_addr global i32 0
@global_var_120dc.337 = constant [6 x i8] c"{1,1T\00"
@global_var_1a4ac.338 = local_unnamed_addr global i32 0
@global_var_1a4a8.339 = local_unnamed_addr global i32 0
@global_var_1a4ad.340 = local_unnamed_addr global i32 0
@global_var_120e4.342 = constant [5 x i8] c"{20T\00"
@global_var_1a4b4.343 = local_unnamed_addr global i32 0
@global_var_1a4b0.344 = local_unnamed_addr global i32 0
@global_var_1a4b5.345 = local_unnamed_addr global i32 0
@global_var_120ec.347 = constant [7 x i8] c"{95$'T\00"
@global_var_1a4b8.348 = local_unnamed_addr global i32 0
@global_var_1a4bc.349 = local_unnamed_addr global i32 0
@global_var_1a4bd.350 = local_unnamed_addr global i32 0
@global_var_120f4.352 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_1a4c0.353 = local_unnamed_addr global i32 0
@global_var_1a4c4.354 = local_unnamed_addr global i32 0
@global_var_1a4c5.355 = local_unnamed_addr global i32 0
@global_var_12104.357 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_1a520.358 = local_unnamed_addr global i32 0
@global_var_1a524.359 = local_unnamed_addr global i32 0
@global_var_1a525.360 = local_unnamed_addr global i32 0
@global_var_12110.362 = constant [8 x i8] c"z5:=91T\00"
@global_var_1a528.363 = local_unnamed_addr global i32 0
@global_var_1a52c.364 = local_unnamed_addr global i32 0
@global_var_12118.366 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_1a4c8.367 = local_unnamed_addr global i32 0
@global_var_1a4cc.368 = local_unnamed_addr global i32 0
@global_var_1a4cd.369 = local_unnamed_addr global i32 0
@global_var_1212c.371 = constant [9 x i8] c"5''#;&0T\00"
@global_var_1a4d0.372 = local_unnamed_addr global i32 0
@global_var_1a4d4.373 = local_unnamed_addr global i32 0
@global_var_1a4d5.374 = local_unnamed_addr global i32 0
@global_var_121d4.376 = constant i32 557516544
@global_var_1a4dc.377 = local_unnamed_addr global i32 0
@global_var_1a4d8.378 = local_unnamed_addr global i32 0
@global_var_1a4dd.379 = local_unnamed_addr global i32 0
@global_var_12138.381 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_1a4e4.382 = local_unnamed_addr global i32 0
@global_var_1a4e0.383 = local_unnamed_addr global i32 0
@global_var_1a4e5.384 = local_unnamed_addr global i32 0
@global_var_1214c.386 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_1a4ec.387 = local_unnamed_addr global i32 0
@global_var_1a4e8.388 = local_unnamed_addr global i32 0
@global_var_1a4ed.389 = local_unnamed_addr global i32 0
@global_var_1215c.391 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_1a4f0.392 = local_unnamed_addr global i32 0
@global_var_1a4f4.393 = local_unnamed_addr global i32 0
@global_var_1a4f5.394 = local_unnamed_addr global i32 0
@global_var_1216c.396 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_1a4fc.397 = local_unnamed_addr global i32 0
@global_var_1a4f8.398 = local_unnamed_addr global i32 0
@global_var_1a4fd.399 = local_unnamed_addr global i32 0
@global_var_12180.401 = constant [9 x i8] c"$662*7!E\00"
@global_var_1a500.402 = local_unnamed_addr global i32 0
@global_var_1a504.403 = local_unnamed_addr global i32 0
@global_var_1a505.404 = local_unnamed_addr global i32 0
@global_var_1218c.406 = constant [6 x i8] c";3=:T\00"
@global_var_1a50c.407 = local_unnamed_addr global i32 0
@global_var_1a508.408 = local_unnamed_addr global i32 0
@global_var_1a50d.409 = local_unnamed_addr global i32 0
@global_var_12194.411 = constant [7 x i8] c"1: 1&T\00"
@global_var_1a510.412 = local_unnamed_addr global i32 0
@global_var_1a514.413 = local_unnamed_addr global i32 0
@global_var_1a515.414 = local_unnamed_addr global i32 0
@global_var_1219c.416 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_1a51d.417 = local_unnamed_addr global i32 0
@global_var_1a518.418 = local_unnamed_addr global i32 0
@global_var_1a51c.419 = local_unnamed_addr global i32 0
@global_var_1a1f4.421 = global i32 0
@global_var_1a1f0.422 = global i32 -1
@global_var_1a394.56 = external global i8*
@global_var_1a3b0.74 = external global i8*
@global_var_1a3b1.82 = global i8 0
@global_var_1a410.120 = external global i8*
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1a38c.128 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1a418.135 = global %sockaddr* null
@global_var_ea70.143 = constant void (i32)* inttoptr (i32 -442556408 to void (i32)*)
@global_var_1a3c0.156 = external global i8*
@global_var_1a404.188 = external global i8*
@global_var_1a405.189 = local_unnamed_addr global i8 0
@global_var_1a3f8.204 = local_unnamed_addr global i8 0
@global_var_1a3f9.212 = local_unnamed_addr global i8 0
@global_var_1a3f0.249 = local_unnamed_addr global i8 0
@global_var_1a3e8.246 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8b28() local_unnamed_addr {
entry:
  %v3_8b2c = load i32, i32* @r4, align 4
  %v0_8b34 = call i32 @function_8e2c()
  store i32 %v0_8b34, i32* @r0, align 4
  %v1_8b38 = call i32 @function_11f44(i32 %v0_8b34)
  call void @__pseudo_branch(i32 %v3_8b2c)
  ret i32 %v1_8b38
}

define i32 @function_8b40(i32 %arg1) local_unnamed_addr {
entry:
  %v3_8b4c = load i32, i32* @global_var_1a2a4.4, align 4
  call void @__pseudo_branch(i32 %v3_8b4c)
  %v0_8b50 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8b50, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  %v7_8b50 = load i32, i32* @r0, align 4
  ret i32 %v7_8b50

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i8* @_strcpy(i8* %dest, i8* %src) local_unnamed_addr {
entry:
  %v8_8b5c = call i8* @strcpy(i8* %dest, i8* %src)
  ret i8* %v8_8b5c
}

define i32 @_ioctl(i32 %fd, i32 %request, ...) local_unnamed_addr {
entry:
  %v6_8b68 = call i32 (i32, i32, ...) @ioctl(i32 %fd, i32 %request)
  ret i32 %v6_8b68
}

define i32 @_recv(i32 %fd, i32* %buf, i32 %n, i32 %flags) local_unnamed_addr {
entry:
  %v9_8b74 = call i32 @recv(i32 %fd, i32* %buf, i32 %n, i32 %flags)
  ret i32 %v9_8b74
}

define i32 @_connect(i32 %fd, %sockaddr* %addr, i32 %len) local_unnamed_addr {
entry:
  %v8_8b80 = call i32 @connect(i32 %fd, %sockaddr* %addr, i32 %len)
  ret i32 %v8_8b80
}

define i32 @_sigemptyset(%_TYPEDEF_sigset_t* %set) local_unnamed_addr {
entry:
  %v6_8b8c = call i32 @sigemptyset(%_TYPEDEF_sigset_t* %set)
  ret i32 %v6_8b8c
}

define i32* @_memmove(i32* %dest, i32* %src, i32 %n) local_unnamed_addr {
entry:
  %v9_8b98 = call i32* @memmove(i32* %dest, i32* %src, i32 %n)
  ret i32* %v9_8b98
}

define i32 @_getpid() local_unnamed_addr {
entry:
  %v4_8ba4 = call i32 @getpid()
  ret i32 %v4_8ba4
}

define i32 @_prctl(i32 %option, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %v9_8bb0 = call i32 @prctl(i32 %option, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5)
  ret i32 %v9_8bb0
}

define i32* @_memcpy(i32* %dest, i32* %src, i32 %n) local_unnamed_addr {
entry:
  %v9_8bbc = call i32* @memcpy(i32* %dest, i32* %src, i32 %n)
  ret i32* %v9_8bbc
}

define i32 @_readlink(i8* %path, i8* %buf, i32 %len) local_unnamed_addr {
entry:
  %v9_8bc8 = call i32 @readlink(i8* %path, i8* %buf, i32 %len)
  ret i32 %v9_8bc8
}

define i32* @_malloc(i32 %size) local_unnamed_addr {
entry:
  %v5_8bd4 = call i32* @malloc(i32 %size)
  ret i32* %v5_8bd4
}

define i32 @_sleep(i32 %seconds) local_unnamed_addr {
entry:
  %v5_8be0 = call i32 @sleep(i32 %seconds)
  ret i32 %v5_8be0
}

define i32 @_recvfrom(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32* %addr_len) local_unnamed_addr {
entry:
  %v10_8bec = call i32 @recvfrom(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32* %addr_len)
  ret i32 %v10_8bec
}

define i32 @_socket(i32 %domain, i32 %type, i32 %protocol) local_unnamed_addr {
entry:
  %v7_8bf8 = call i32 @socket(i32 %domain, i32 %type, i32 %protocol)
  ret i32 %v7_8bf8
}

define i32 @_select(i32 %nfds, %_TYPEDEF_fd_set* %readfds, %_TYPEDEF_fd_set* %writefds, %_TYPEDEF_fd_set* %exceptfds, %timeval* %timeout) local_unnamed_addr {
entry:
  %v12_8c04 = call i32 @select(i32 %nfds, %_TYPEDEF_fd_set* %readfds, %_TYPEDEF_fd_set* %writefds, %_TYPEDEF_fd_set* %exceptfds, %timeval* %timeout)
  ret i32 %v12_8c04
}

define %dirent* @_readdir(%__dirstream* %dirp) local_unnamed_addr {
entry:
  %v6_8c10 = call %dirent* @readdir(%__dirstream* %dirp)
  ret %dirent* %v6_8c10
}

define i32 @_sigaddset(%_TYPEDEF_sigset_t* %set, i32 %signo) local_unnamed_addr {
entry:
  %v7_8c1c = call i32 @sigaddset(%_TYPEDEF_sigset_t* %set, i32 %signo)
  ret i32 %v7_8c1c
}

define i32 @_send(i32 %fd, i32* %buf, i32 %n, i32 %flags) local_unnamed_addr {
entry:
  %v9_8c28 = call i32 @send(i32 %fd, i32* %buf, i32 %n, i32 %flags)
  ret i32 %v9_8c28
}

; Function Attrs: noreturn
define void @_abort() local_unnamed_addr #0 {
entry:
  call void @abort()
  unreachable
}

define i32* @_calloc(i32 %nmemb, i32 %size) local_unnamed_addr {
entry:
  %v6_8c40 = call i32* @calloc(i32 %nmemb, i32 %size)
  ret i32* %v6_8c40
}

define i32 @_write(i32 %fd, i32* %buf, i32 %n) local_unnamed_addr {
entry:
  %v8_8c4c = call i32 @write(i32 %fd, i32* %buf, i32 %n)
  ret i32 %v8_8c4c
}

define i32 @_kill(i32 %pid, i32 %sig) local_unnamed_addr {
entry:
  %v6_8c58 = call i32 @kill(i32 %pid, i32 %sig)
  ret i32 %v6_8c58
}

define i32 @_bind(i32 %fd, %sockaddr* %addr, i32 %len) local_unnamed_addr {
entry:
  %v8_8c64 = call i32 @bind(i32 %fd, %sockaddr* %addr, i32 %len)
  ret i32 %v8_8c64
}

define i32 @_inet_addr(i8* %cp) local_unnamed_addr {
entry:
  %v6_8c70 = call i32 @inet_addr(i8* %cp)
  ret i32 %v6_8c70
}

define i32 @_setsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32 %optlen) local_unnamed_addr {
entry:
  %v10_8c7c = call i32 @setsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32 %optlen)
  ret i32 %v10_8c7c
}

define void (i32)* @_signal(i32 %sig, void (i32)* %handler) local_unnamed_addr {
entry:
  %v7_8c88 = call void (i32)* @signal(i32 %sig, void (i32)* %handler)
  ret void (i32)* %v7_8c88
}

define i32 @_read(i32 %fd, i32* %buf, i32 %nbytes) local_unnamed_addr {
entry:
  %v8_8c94 = call i32 @read(i32 %fd, i32* %buf, i32 %nbytes)
  ret i32 %v8_8c94
}

define i32 @_unlink(i8* %name) local_unnamed_addr {
entry:
  %v6_8ca0 = call i32 @unlink(i8* %name)
  ret i32 %v6_8ca0
}

define i32 @_sendto(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32 %addr_len) local_unnamed_addr {
entry:
  %v11_8cac = call i32 @sendto(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32 %addr_len)
  ret i32 %v11_8cac
}

define i32* @_realloc(i32* %ptr, i32 %size) local_unnamed_addr {
entry:
  %v7_8cb8 = call i32* @realloc(i32* %ptr, i32 %size)
  ret i32* %v7_8cb8
}

define i32 @_listen(i32 %fd, i32 %n) local_unnamed_addr {
entry:
  %v6_8cc4 = call i32 @listen(i32 %fd, i32 %n)
  ret i32 %v6_8cc4
}

define i32 @_fork() local_unnamed_addr {
entry:
  %v4_8cd0 = call i32 @fork()
  ret i32 %v4_8cd0
}

define i32 @___uClibc_main(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %v4_8cdc = call i32 @__uClibc_main()
  ret i32 %v4_8cdc
}

define i32* @_memset(i32* %s, i32 %c, i32 %n) local_unnamed_addr {
entry:
  %v8_8ce8 = call i32* @memset(i32* %s, i32 %c, i32 %n)
  ret i32* %v8_8ce8
}

define i32 @_getppid() local_unnamed_addr {
entry:
  %v4_8cf4 = call i32 @getppid()
  ret i32 %v4_8cf4
}

define i32 @_time(i32* %timer) local_unnamed_addr {
entry:
  %v6_8d00 = call i32 @time(i32* %timer)
  ret i32 %v6_8d00
}

define %__dirstream* @_opendir(i8* %name) local_unnamed_addr {
entry:
  %v6_8d0c = call %__dirstream* @opendir(i8* %name)
  ret %__dirstream* %v6_8d0c
}

define i32 @_getsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32* %optlen) local_unnamed_addr {
entry:
  %v9_8d18 = call i32 @getsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32* %optlen)
  ret i32 %v9_8d18
}

define i32* @___errno_location() local_unnamed_addr {
entry:
  %v4_8d24 = call i32* @__errno_location()
  ret i32* %v4_8d24
}

; Function Attrs: noreturn
define void @_exit(i32 %status) local_unnamed_addr #0 {
entry:
  call void @exit(i32 %status)
  unreachable
}

define i32 @_atoi(i8* %nptr) local_unnamed_addr {
entry:
  %v6_8d3c = call i32 @atoi(i8* %nptr)
  ret i32 %v6_8d3c
}

define i32 @_open(i8* %file, i32 %oflag, ...) local_unnamed_addr {
entry:
  %v7_8d48 = call i32 (i8*, i32, ...) @open(i8* %file, i32 %oflag)
  ret i32 %v7_8d48
}

define i32 @_clock() local_unnamed_addr {
entry:
  %v4_8d54 = call i32 @clock()
  ret i32 %v4_8d54
}

define i32 @_setsid() local_unnamed_addr {
entry:
  %v4_8d60 = call i32 @setsid()
  ret i32 %v4_8d60
}

define i32 @_closedir(%__dirstream* %dirp) local_unnamed_addr {
entry:
  %v6_8d6c = call i32 @closedir(%__dirstream* %dirp)
  ret i32 %v6_8d6c
}

define i32 @_fcntl(i32 %fd, i32 %cmd, ...) local_unnamed_addr {
entry:
  %v6_8d78 = call i32 (i32, i32, ...) @fcntl(i32 %fd, i32 %cmd)
  ret i32 %v6_8d78
}

define i32 @_close(i32 %fd) local_unnamed_addr {
entry:
  %v5_8d84 = call i32 @close(i32 %fd)
  ret i32 %v5_8d84
}

define void @_free(i32* %ptr) local_unnamed_addr {
entry:
  call void @free(i32* %ptr)
  ret void
}

define i32 @_sigprocmask(i32 %how, %_TYPEDEF_sigset_t* %set, %_TYPEDEF_sigset_t* %oset) local_unnamed_addr {
entry:
  %v9_8d9c = call i32 @sigprocmask(i32 %how, %_TYPEDEF_sigset_t* %set, %_TYPEDEF_sigset_t* %oset)
  ret i32 %v9_8d9c
}

define i32 @_getsockname(i32 %fd, %sockaddr* %addr, i32* %len) local_unnamed_addr {
entry:
  %v9_8da8 = call i32 @getsockname(i32 %fd, %sockaddr* %addr, i32* %len)
  ret i32 %v9_8da8
}

define i32 @function_8dac() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_8dac = load i32, i32* @r4, align 4
  store i32 %v3_8dac, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1a394.56 to i32), i32* %r5.global-to-local, align 4
  %v2_8db4 = load i8, i8* bitcast (i8** @global_var_1a394.56 to i8*), align 4
  %v2_8db8 = icmp eq i8 %v2_8db4, 0
  br i1 %v2_8db8, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_8dbc = load i32, i32* @r0, align 4
  ret i32 %v12_8dbc

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1a378.59 to i32), i32* %r4.global-to-local, align 4
  %v2_8dc4 = load i32, i32* bitcast (i32** @global_var_1a378.59 to i32*), align 4
  store i32 %v2_8dc4, i32* %r2.global-to-local, align 4
  %v2_8dcc = icmp eq i32 %v2_8dc4, 0
  br i1 %v2_8dcc, label %bb8, label %dec_label_pc_8dd4.preheader

dec_label_pc_8dd4.preheader:                      ; preds = %bb7
  %v1_8dd49 = add i32 %v2_8dc4, 4
  store i32 %v1_8dd49, i32* bitcast (i32** @global_var_1a378.59 to i32*), align 4
  call void @__pseudo_branch(i32 %v2_8dc4)
  %v2_8de411 = load i32, i32* bitcast (i32** @global_var_1a378.59 to i32*), align 4
  store i32 %v2_8de411, i32* %r2.global-to-local, align 4
  %v2_8dec12 = icmp eq i32 %v2_8de411, 0
  br i1 %v2_8dec12, label %.loopexit, label %dec_label_pc_8dd4.dec_label_pc_8dd4_crit_edge

dec_label_pc_8dd4.dec_label_pc_8dd4_crit_edge:    ; preds = %dec_label_pc_8dd4.preheader, %dec_label_pc_8dd4.dec_label_pc_8dd4_crit_edge
  %v2_8de413 = phi i32 [ %v2_8de4, %dec_label_pc_8dd4.dec_label_pc_8dd4_crit_edge ], [ %v2_8de411, %dec_label_pc_8dd4.preheader ]
  %v1_8dd8.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_8dd4 = add i32 %v2_8de413, 4
  %v2_8dd8 = inttoptr i32 %v1_8dd8.pre to i32*
  store i32 %v1_8dd4, i32* %v2_8dd8, align 4
  %v0_8de0 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_8de0)
  %v2_8de4 = load i32, i32* bitcast (i32** @global_var_1a378.59 to i32*), align 4
  store i32 %v2_8de4, i32* %r2.global-to-local, align 4
  %v2_8dec = icmp eq i32 %v2_8de4, 0
  br i1 %v2_8dec, label %.loopexit, label %dec_label_pc_8dd4.dec_label_pc_8dd4_crit_edge

.loopexit:                                        ; preds = %dec_label_pc_8dd4.dec_label_pc_8dd4_crit_edge, %dec_label_pc_8dd4.preheader
  %v2_8e0c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8e0c = phi i32 [ %v2_8e0c.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1a394.56 to i32), %bb7 ]
  %v3_8e0c = inttoptr i32 %v2_8e0c to i8*
  store i8 1, i8* %v3_8e0c, align 1
  %v2_8e10 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8e10, i32* %r4.global-to-local, align 4
  %v11_8e10 = load i32, i32* @r0, align 4
  ret i32 %v11_8e10

; uselistorder directives
  uselistorder i32 %v2_8de4, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 0, 3 }
  uselistorder i32* bitcast (i32** @global_var_1a378.59 to i32*), { 2, 0, 1, 3 }
  uselistorder i32** @global_var_1a378.59, { 1, 0 }
  uselistorder i8** @global_var_1a394.56, { 1, 0 }
  uselistorder label %dec_label_pc_8dd4.dec_label_pc_8dd4_crit_edge, { 1, 0 }
}

define i32 @function_8e20(i32 %arg1) local_unnamed_addr {
dec_label_pc_8e20:
  %v0_8e20 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8e20, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8e20
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8e20, %bb
  %v5_8e28 = load i32, i32* @r0, align 4
  ret i32 %v5_8e28

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8e2c() local_unnamed_addr {
.thread:
  %v2_8e4c = load i32, i32* inttoptr (i32 107008 to i32*), align 512
  %v2_8e50 = icmp eq i32 %v2_8e4c, 0
  br i1 %v2_8e50, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 107008

bb2:                                              ; preds = %.thread
  ret i32 107008

; uselistorder directives
  uselistorder i32 107008, { 1, 0, 2 }
}

define i32 @function_8e84() local_unnamed_addr {
dec_label_pc_8e84:
  %v5_8e88 = load i32, i32* @r0, align 4
  ret i32 %v5_8e88
}

; Function Attrs: noreturn
define i32 @__start(i32 %arg1, i32 %arg2) local_unnamed_addr #0 {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8e94 = ptrtoint i32* %stack_var_4 to i32
  %v7_8eb4 = call i32 @___uClibc_main(i32 ptrtoint (i32* @global_var_ed38.71 to i32), i32 %arg2, i32 %v4_8e94, i32 35624, i32 73600, i32 %arg1, i32 %v4_8e94)
  call void @abort()
  unreachable
}

define i32 @function_8ec8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8ec8:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8ec8 = urem i32 %arg1, 256
  %v2_8ecc = icmp eq i32 %v1_8ec8, 0
  %v1_8ed4 = urem i32 %arg3, 256
  br i1 %v2_8ecc, label %dec_label_pc_8f18, label %dec_label_pc_8ee0

dec_label_pc_8ee0:                                ; preds = %dec_label_pc_8ec8
  %v0_8ee0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8ee0 = add i32 %v0_8ee0, 4
  %v2_8ee0 = inttoptr i32 %v1_8ee0 to i8*
  %v3_8ee0 = load i8, i8* %v2_8ee0, align 1
  %v4_8ee0 = zext i8 %v3_8ee0 to i32
  %v9_8ee4 = icmp eq i32 %v4_8ee0, %v1_8ed4
  br i1 %v9_8ee4, label %dec_label_pc_8f20, label %dec_label_pc_8f08.preheader

dec_label_pc_8f08.preheader:                      ; preds = %dec_label_pc_8ee0
  br label %dec_label_pc_8f08

dec_label_pc_8ef8:                                ; preds = %dec_label_pc_8f08
  %v1_8ef8 = add i32 %v0_8f00.in, 12
  %v2_8ef8 = inttoptr i32 %v1_8ef8 to i8*
  %v3_8ef8 = load i8, i8* %v2_8ef8, align 1
  %v4_8ef8 = zext i8 %v3_8ef8 to i32
  %v9_8efc = icmp eq i32 %v4_8ef8, %v1_8ed4
  br i1 %v9_8efc, label %dec_label_pc_8f20, label %dec_label_pc_8f08

dec_label_pc_8f08:                                ; preds = %dec_label_pc_8f08.preheader, %dec_label_pc_8ef8
  %v0_8f00.in = phi i32 [ %v0_8ee0, %dec_label_pc_8f08.preheader ], [ %v0_8f00, %dec_label_pc_8ef8 ]
  %v0_8f08 = phi i32 [ 0, %dec_label_pc_8f08.preheader ], [ %v1_8f08, %dec_label_pc_8ef8 ]
  %v0_8f00 = add i32 %v0_8f00.in, 8
  %v1_8f08 = add i32 %v0_8f08, 1
  %v9_8f0c = icmp eq i32 %v1_8f08, %v1_8ec8
  store i32 %v0_8f00, i32* %r1.global-to-local, align 4
  br i1 %v9_8f0c, label %dec_label_pc_8f18, label %dec_label_pc_8ef8

dec_label_pc_8f18:                                ; preds = %dec_label_pc_8f08, %dec_label_pc_8ec8
  ret i32 %arg4

dec_label_pc_8f20:                                ; preds = %dec_label_pc_8ef8, %dec_label_pc_8ee0
  %v0_8f20 = phi i32 [ %v0_8ee0, %dec_label_pc_8ee0 ], [ %v0_8f00, %dec_label_pc_8ef8 ]
  %v1_8f20 = inttoptr i32 %v0_8f20 to i32*
  %v2_8f20 = load i32, i32* %v1_8f20, align 4
  ret i32 %v2_8f20

; uselistorder directives
  uselistorder i32 %v1_8f08, { 1, 0 }
  uselistorder i32 %v0_8f00, { 1, 0, 2 }
  uselistorder i32 %v0_8f00.in, { 1, 0 }
  uselistorder i32 %v0_8ee0, { 1, 0, 2 }
  uselistorder i32 %v1_8ed4, { 1, 0 }
  uselistorder i32 %v1_8ec8, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8f08, { 1, 0 }
}

define i32 @function_8f2c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_8f2c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_8f2c = load i32, i32* @r4, align 4
  store i32 %v3_8f2c, i32* %stack_var_-32, align 4
  %v6_8f2c = load i32, i32* @r5, align 4
  %v9_8f2c = load i32, i32* @r6, align 4
  %v12_8f2c = load i32, i32* @r7, align 4
  %v18_8f2c = load i32, i32* @sb, align 4
  %v0_8f30 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8f30, i32* @sb, align 4
  store i32 %arg1, i32* %r6.global-to-local, align 4
  %v1_8f38 = urem i32 %arg2, 256
  store i32 %v1_8f38, i32* %r7.global-to-local, align 4
  %v0_8f44 = call i32 @fork()
  %v2_8f48 = icmp eq i32 %v0_8f44, -1
  %. = zext i1 %v2_8f48 to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %tmp23 = icmp slt i32 %v0_8f44, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_8f2c
  store i32 1, i32* %r5.global-to-local, align 4
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_8f2c
  store i32 %., i32* %r5.global-to-local, align 4
  %v2_8f60 = icmp eq i1 %v2_8f48, false
  br i1 %v2_8f60, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  %v3_8f64 = load i32, i32* %stack_var_-32, align 4
  store i32 %v3_8f64, i32* %r4.global-to-local, align 4
  store i32 %v6_8f2c, i32* %r5.global-to-local, align 4
  store i32 %v9_8f2c, i32* %r6.global-to-local, align 4
  store i32 %v12_8f2c, i32* %r7.global-to-local, align 4
  store i32 %v18_8f2c, i32* @sb, align 4
  ret i32 %v0_8f44

bb26:                                             ; preds = %bb24
  %v0_8f68 = call i32 @fork()
  %v2_8f6c = icmp eq i32 %v0_8f68, -1
  store i32 %v0_8f68, i32* %r4.global-to-local, align 4
  br i1 %v2_8f6c, label %dec_label_pc_8f9c, label %dec_label_pc_8f78

dec_label_pc_8f78:                                ; preds = %bb26
  %v2_8f78 = icmp eq i32 %v0_8f68, 0
  br i1 %v2_8f78, label %dec_label_pc_8f80, label %dec_label_pc_8fa4

dec_label_pc_8f80:                                ; preds = %dec_label_pc_8f78
  %v0_8f80 = load i32, i32* %r6.global-to-local, align 4
  %v1_8f84 = call i32 @sleep(i32 %v0_8f80)
  %v0_8f88 = call i32 @getppid()
  %v2_8f90 = call i32 @kill(i32 %v0_8f88, i32 9)
  %v0_8f94 = load i32, i32* %r4.global-to-local, align 4
  call void @exit(i32 %v0_8f94)
  unreachable

dec_label_pc_8f9c:                                ; preds = %bb26
  %v0_8f9c = load i32, i32* %r5.global-to-local, align 4
  call void @exit(i32 %v0_8f9c)
  unreachable

dec_label_pc_8fa4:                                ; preds = %dec_label_pc_8f78
  store i32 ptrtoint (i8** @global_var_1a3b0.74 to i32), i32* %r3.global-to-local, align 4
  %v2_8fa8 = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_8fa8 = zext i8 %v2_8fa8 to i32
  %v2_8fac = icmp eq i8 %v2_8fa8, 0
  br i1 %v2_8fac, label %dec_label_pc_8ff0, label %dec_label_pc_8fb4

dec_label_pc_8fb4:                                ; preds = %dec_label_pc_8fa4
  store i32 ptrtoint (i32* @global_var_1a3b4.76 to i32), i32* %r3.global-to-local, align 4
  %v2_8fb8 = load i32, i32* @global_var_1a3b4.76, align 4
  %v1_8fbc = inttoptr i32 %v2_8fb8 to i32*
  %v2_8fbc = load i32, i32* %v1_8fbc, align 4
  %v1_8fc0 = add i32 %v2_8fbc, 4
  %v2_8fc0 = inttoptr i32 %v1_8fc0 to i8*
  %v3_8fc0 = load i8, i8* %v2_8fc0, align 1
  %v4_8fc0 = zext i8 %v3_8fc0 to i32
  store i32 %v4_8fc0, i32* %r3.global-to-local, align 4
  %v1_8fc4 = load i32, i32* %r7.global-to-local, align 4
  %v9_8fc4 = icmp eq i32 %v4_8fc0, %v1_8fc4
  br i1 %v9_8fc4, label %dec_label_pc_8ff8, label %dec_label_pc_8fe4.preheader

dec_label_pc_8fe4.preheader:                      ; preds = %dec_label_pc_8fb4
  %v1_8fc8 = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_8fe4

dec_label_pc_8fd4:                                ; preds = %dec_label_pc_8fe4
  %v4_8fd4 = mul i32 %v1_8fe4, 4
  %v5_8fd4 = add i32 %v4_8fd4, %v2_8fb8
  %v6_8fd4 = inttoptr i32 %v5_8fd4 to i32*
  %v7_8fd4 = load i32, i32* %v6_8fd4, align 4
  %v1_8fd8 = add i32 %v7_8fd4, 4
  %v2_8fd8 = inttoptr i32 %v1_8fd8 to i8*
  %v3_8fd8 = load i8, i8* %v2_8fd8, align 1
  %v4_8fd8 = zext i8 %v3_8fd8 to i32
  store i32 %v4_8fd8, i32* %r3.global-to-local, align 4
  %v9_8fdc = icmp eq i32 %v4_8fd8, %v1_8fc4
  br i1 %v9_8fdc, label %dec_label_pc_8ff8, label %dec_label_pc_8fe4

dec_label_pc_8fe4:                                ; preds = %dec_label_pc_8fe4.preheader, %dec_label_pc_8fd4
  %v0_8fe4 = phi i32 [ %v1_8fc8, %dec_label_pc_8fe4.preheader ], [ %v1_8fe4, %dec_label_pc_8fd4 ]
  %v1_8fe4 = add i32 %v0_8fe4, 1
  %v9_8fe8 = icmp eq i32 %v1_8fe4, %v3_8fa8
  br i1 %v9_8fe8, label %dec_label_pc_8ff0, label %dec_label_pc_8fd4

dec_label_pc_8ff0:                                ; preds = %dec_label_pc_8fe4, %dec_label_pc_8fa4, %dec_label_pc_8ff8
  call void @exit(i32 0)
  unreachable

dec_label_pc_8ff8:                                ; preds = %dec_label_pc_8fd4, %dec_label_pc_8fb4
  %v0_900c = phi i32 [ %v2_8fbc, %dec_label_pc_8fb4 ], [ %v7_8fd4, %dec_label_pc_8fd4 ]
  store i32 %arg6, i32* %r3.global-to-local, align 4
  %v1_900c = inttoptr i32 %v0_900c to i32*
  %v2_900c = load i32, i32* %v1_900c, align 4
  call void @__pseudo_branch(i32 %v2_900c)
  br label %dec_label_pc_8ff0

; uselistorder directives
  uselistorder i32 %v1_8fe4, { 2, 0, 1 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v2_8f48, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 3, 0, 4, 1 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 2, 0, 1 }
  uselistorder label %dec_label_pc_8ff0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8fe4, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_901c(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_901c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v9_901c = load i32, i32* @r6, align 4
  %v12_901c = load i32, i32* @r7, align 4
  %v18_901c = load i32, i32* @sb, align 4
  %v21_901c = load i32, i32* @sl, align 4
  %v27_901c = load i32, i32* @lr, align 4
  %v7_9020 = icmp eq i32 %arg2, 3
  store i1 %v7_9020, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_902c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_902c, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_9040, label %dec_label_pc_9034

dec_label_pc_9034:                                ; preds = %dec_label_pc_901c
  %v7_9034 = icmp eq i32 %arg2, 4
  store i1 %v7_9034, i1* %cpsr_z.global-to-local, align 1
  %v1_9038 = inttoptr i32 %v0_902c to i32*
  %v2_9038 = load i32, i32* %v1_9038, align 4
  store i32 %v2_9038, i32* @sl, align 4
  br i1 %v7_9034, label %dec_label_pc_9040, label %dec_label_pc_9048

dec_label_pc_9040:                                ; preds = %dec_label_pc_9064, %.dec_label_pc_9040_crit_edge, %dec_label_pc_9034, %dec_label_pc_9058, %dec_label_pc_9048, %dec_label_pc_901c
  %v29_9044 = phi i32 [ %v29_9044.pre, %.dec_label_pc_9040_crit_edge ], [ %v0_902c, %dec_label_pc_9064 ], [ %v0_902c, %dec_label_pc_9034 ], [ %v0_902c, %dec_label_pc_9058 ], [ %v0_902c, %dec_label_pc_9048 ], [ %v0_902c, %dec_label_pc_901c ]
  store i32 %v9_901c, i32* @r6, align 4
  store i32 %v12_901c, i32* @r7, align 4
  store i32 %v18_901c, i32* @sb, align 4
  store i32 %v21_901c, i32* @sl, align 4
  ret i32 %v29_9044

dec_label_pc_9048:                                ; preds = %dec_label_pc_9034
  %v7_9048 = icmp eq i32 %arg2, 5
  store i1 %v7_9048, i1* %cpsr_z.global-to-local, align 1
  %v1_904c = add i32 %v0_902c, 4
  %v2_904c = inttoptr i32 %v1_904c to i8*
  %v3_904c = load i8, i8* %v2_904c, align 1
  %v4_904c = zext i8 %v3_904c to i32
  store i32 %v4_904c, i32* %r1.global-to-local, align 4
  br i1 %v7_9048, label %dec_label_pc_9040, label %dec_label_pc_9058

dec_label_pc_9058:                                ; preds = %dec_label_pc_9048
  %v1_9058 = add i32 %v0_902c, 5
  %v2_9058 = inttoptr i32 %v1_9058 to i8*
  %v3_9058 = load i8, i8* %v2_9058, align 1
  %v4_9058 = zext i8 %v3_9058 to i32
  store i32 %v4_9058, i32* @r7, align 4
  %v2_905c = icmp eq i8 %v3_9058, 0
  store i1 %v2_905c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_905c, label %dec_label_pc_9040, label %dec_label_pc_9064

dec_label_pc_9064:                                ; preds = %dec_label_pc_9058
  %v3_9064 = mul nuw nsw i32 %v4_9058, 4
  store i32 %v3_9064, i32* @sb, align 4
  %v1_9068 = add i32 %arg2, -6
  store i32 %v1_9068, i32* @r6, align 4
  %v2_906c = mul nuw nsw i32 %v4_9058, 5
  store i32 %v2_906c, i32* @r8, align 4
  %v3_9070 = icmp ult i32 %v1_9068, %v2_906c
  %v9_9070 = icmp eq i32 %v1_9068, %v2_906c
  store i1 %v9_9070, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9070, label %dec_label_pc_9040, label %dec_label_pc_9078

dec_label_pc_9078:                                ; preds = %dec_label_pc_9064
  store i32 %v4_9058, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_9080 = call i32* @calloc(i32 %v4_9058, i32 24)
  %v4_9080 = ptrtoint i32* %v2_9080 to i32
  store i32 %v4_9080, i32* %r0.global-to-local, align 4
  %v0_9084 = load i32, i32* @r7, align 4
  %v2_9084 = icmp eq i32 %v0_9084, 0
  store i1 %v2_9084, i1* %cpsr_z.global-to-local, align 1
  %v0_908c = load i32, i32* @r4, align 4
  %v1_908c = add i32 %v0_908c, 6
  store i32 %v1_908c, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_9084, 1
  br i1 %tmp27, label %dec_label_pc_90e4thread-pre-split, label %dec_label_pc_9094

dec_label_pc_9094:                                ; preds = %dec_label_pc_9078
  store i32 %v4_9080, i32* %r1.global-to-local, align 4
  %v1_9098 = load i32, i32* @r8, align 4
  %v2_9098 = add i32 %v1_9098, %v0_908c
  store i32 %v2_9098, i32* %ip.global-to-local, align 4
  store i32 %v0_908c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_90a8

dec_label_pc_90a8:                                ; preds = %dec_label_pc_90a8.dec_label_pc_90a8_crit_edge, %dec_label_pc_9094
  %v2_90b8 = phi i32 [ %v1_90cc, %dec_label_pc_90a8.dec_label_pc_90a8_crit_edge ], [ %v4_9080, %dec_label_pc_9094 ]
  %v1_90b4 = phi i32 [ %v1_90b4.pre, %dec_label_pc_90a8.dec_label_pc_90a8_crit_edge ], [ %v2_9098, %dec_label_pc_9094 ]
  %v0_90b0 = phi i32 [ %v0_90a8.pre, %dec_label_pc_90a8.dec_label_pc_90a8_crit_edge ], [ %v0_908c, %dec_label_pc_9094 ]
  %v1_90a8 = add i32 %v0_90b0, 10
  %v2_90a8 = inttoptr i32 %v1_90a8 to i8*
  %v3_90a8 = load i8, i8* %v2_90a8, align 1
  %v1_90ac = add i32 %v0_90b0, 6
  %v2_90ac = inttoptr i32 %v1_90ac to i32*
  %v3_90ac = load i32, i32* %v2_90ac, align 4
  store i32 %v3_90ac, i32* %r2.global-to-local, align 4
  %v1_90b0 = add i32 %v0_90b0, 5
  store i32 %v1_90b0, i32* %r0.global-to-local, align 4
  %v9_90b4 = icmp eq i32 %v1_90b0, %v1_90b4
  store i1 %v9_90b4, i1* %cpsr_z.global-to-local, align 1
  %v3_90b8 = add i32 %v2_90b8, 20
  %v4_90b8 = inttoptr i32 %v3_90b8 to i8*
  store i8 %v3_90a8, i8* %v4_90b8, align 1
  %v0_90bc = load i32, i32* %r2.global-to-local, align 4
  %v1_90bc = load i32, i32* %r1.global-to-local, align 4
  %v2_90bc = add i32 %v1_90bc, 4
  %v3_90bc = inttoptr i32 %v2_90bc to i32*
  store i32 %v0_90bc, i32* %v3_90bc, align 4
  %v0_90c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_90c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_90c0 = add i32 %v1_90c0, 16
  %v3_90c0 = inttoptr i32 %v2_90c0 to i32*
  store i32 %v0_90c0, i32* %v3_90c0, align 4
  %v0_90c4 = load i32, i32* @r4, align 4
  %v1_90c4 = trunc i32 %v0_90c4 to i8
  %v2_90c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_90c4 = inttoptr i32 %v2_90c4 to i8*
  store i8 %v1_90c4, i8* %v3_90c4, align 1
  %v0_90c8 = load i32, i32* %lr.global-to-local, align 4
  %v1_90c8 = trunc i32 %v0_90c8 to i8
  %v2_90c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_90c8 = add i32 %v2_90c8, 1
  %v4_90c8 = inttoptr i32 %v3_90c8 to i8*
  store i8 %v1_90c8, i8* %v4_90c8, align 1
  %v0_90cc = load i32, i32* %r1.global-to-local, align 4
  %v1_90cc = add i32 %v0_90cc, 24
  store i32 %v1_90cc, i32* %r1.global-to-local, align 4
  %v0_90d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_90d0, label %dec_label_pc_90d4, label %dec_label_pc_90a8.dec_label_pc_90a8_crit_edge

dec_label_pc_90a8.dec_label_pc_90a8_crit_edge:    ; preds = %dec_label_pc_90a8
  %v0_90a8.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_90b4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_90a8

dec_label_pc_90d4:                                ; preds = %dec_label_pc_90a8
  %v0_90d4 = load i32, i32* @sb, align 4
  %v1_90d4 = load i32, i32* @r7, align 4
  %v1_90d8 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_90d4, %v0_90d4
  %v2_90d8 = sub i32 %v1_90d8, %sum
  %v0_90dc = load i32, i32* %r0.global-to-local, align 4
  %v1_90dc = add i32 %v0_90dc, 6
  store i32 %v1_90dc, i32* %fp.global-to-local, align 4
  %v1_90e0 = add i32 %v2_90d8, -6
  store i32 %v1_90e0, i32* @r6, align 4
  br label %dec_label_pc_90e4

dec_label_pc_90e4thread-pre-split:                ; preds = %dec_label_pc_9078
  %v0_90e4.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_90e4

dec_label_pc_90e4:                                ; preds = %dec_label_pc_90e4thread-pre-split, %dec_label_pc_90d4
  %v0_90f0 = phi i32 [ %v1_908c, %dec_label_pc_90e4thread-pre-split ], [ %v1_90dc, %dec_label_pc_90d4 ]
  %v1_90e8 = phi i32 [ %v0_90e4.pr, %dec_label_pc_90e4thread-pre-split ], [ %v1_90e0, %dec_label_pc_90d4 ]
  %v2_90e4 = icmp eq i32 %v1_90e8, 0
  store i1 %v2_90e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_90e4, label %dec_label_pc_921c, label %dec_label_pc_90f0

dec_label_pc_90f0:                                ; preds = %dec_label_pc_90e4
  %v1_90f0 = inttoptr i32 %v0_90f0 to i8*
  %v2_90f0 = load i8, i8* %v1_90f0, align 1
  %v3_90f0 = zext i8 %v2_90f0 to i32
  store i32 %v3_90f0, i32* @sb, align 4
  %v2_90f4 = icmp eq i8 %v2_90f0, 0
  store i1 %v2_90f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_90f4, label %dec_label_pc_91d4, label %dec_label_pc_9104

dec_label_pc_9104:                                ; preds = %dec_label_pc_90f0
  store i32 %v3_90f0, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_910c = call i32* @calloc(i32 %v3_90f0, i32 8)
  %v4_910c = ptrtoint i32* %v2_910c to i32
  store i32 %v4_910c, i32* %r0.global-to-local, align 4
  %v0_9110 = load i32, i32* @sb, align 4
  %v2_9110 = icmp eq i32 %v0_9110, 0
  store i1 %v2_9110, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_9110, 1
  br i1 %tmp28, label %dec_label_pc_91d4, label %dec_label_pc_9120

dec_label_pc_9120:                                ; preds = %dec_label_pc_9104
  %v0_9120 = load i32, i32* @r6, align 4
  %v1_9120 = add i32 %v0_9120, -1
  store i32 %v1_9120, i32* %r2.global-to-local, align 4
  %v7_9120 = icmp eq i32 %v0_9120, 1
  store i1 %v7_9120, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9120, label %dec_label_pc_921c, label %dec_label_pc_9128

dec_label_pc_9128:                                ; preds = %dec_label_pc_9120
  %v0_9128 = load i32, i32* %fp.global-to-local, align 4
  %v1_9128 = add i32 %v0_9128, 1
  %v2_9128 = inttoptr i32 %v1_9128 to i8*
  %v3_9128 = load i8, i8* %v2_9128, align 1
  %v1_912c = add i32 %v0_9120, -2
  store i32 %v1_912c, i32* %r2.global-to-local, align 4
  %v7_912c = icmp eq i32 %v1_9120, 1
  store i1 %v7_912c, i1* %cpsr_z.global-to-local, align 1
  %v3_9130 = add i32 %v4_910c, 4
  %v4_9130 = inttoptr i32 %v3_9130 to i8*
  store i8 %v3_9128, i8* %v4_9130, align 1
  %v0_9134 = load i32, i32* %fp.global-to-local, align 4
  %v1_9134 = add i32 %v0_9134, 1
  store i32 %v1_9134, i32* %r0.global-to-local, align 4
  %v0_9138 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9138, label %dec_label_pc_921c, label %dec_label_pc_913c

dec_label_pc_913c:                                ; preds = %dec_label_pc_9128
  %v1_913c = add i32 %v0_9134, 2
  %v2_913c = inttoptr i32 %v1_913c to i8*
  %v3_913c = load i8, i8* %v2_913c, align 1
  %v4_913c = zext i8 %v3_913c to i32
  store i32 %v4_913c, i32* @r4, align 4
  %v0_9140 = load i32, i32* %r2.global-to-local, align 4
  %v1_9140 = add i32 %v0_9140, -1
  store i32 %v1_9140, i32* @r8, align 4
  %v9_9144 = icmp eq i32 %v1_9140, %v4_913c
  store i1 %v9_9144, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_913c, i32* %r0.global-to-local, align 4
  %v5_914c = icmp slt i32 %v1_9140, %v4_913c
  br i1 %v5_914c, label %dec_label_pc_921c, label %dec_label_pc_9150

dec_label_pc_9150:                                ; preds = %dec_label_pc_913c
  store i32 %v4_910c, i32* @r5, align 4
  %v1_9158 = add i32 %v4_910c, 8
  %v1_915c = add i32 %v0_9134, 3
  store i32 %v1_915c, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_91a0

dec_label_pc_916c:                                ; preds = %dec_label_pc_91a0
  %v0_916c = load i32, i32* @r8, align 4
  %v1_916c = load i32, i32* @r4, align 4
  %v2_916c = sub i32 %v0_916c, %v1_916c
  store i32 %v2_916c, i32* %r2.global-to-local, align 4
  %v9_916c = icmp eq i32 %v0_916c, %v1_916c
  store i1 %v9_916c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_916c, label %dec_label_pc_921c, label %dec_label_pc_9174

dec_label_pc_9174:                                ; preds = %dec_label_pc_916c
  %v1_9174 = load i32, i32* @r6, align 4
  %v2_9174 = add i32 %v1_9174, %v1_916c
  %v3_9174 = inttoptr i32 %v2_9174 to i8*
  %v4_9174 = load i8, i8* %v3_9174, align 1
  store i32 %v2_9174, i32* %r0.global-to-local, align 4
  %v1_917c = add i32 %v2_916c, -1
  store i32 %v1_917c, i32* %r2.global-to-local, align 4
  %v7_917c = icmp eq i32 %v2_916c, 1
  store i1 %v7_917c, i1* %cpsr_z.global-to-local, align 1
  %v3_9180 = add i32 %v2_9180, 4
  %v4_9180 = inttoptr i32 %v3_9180 to i8*
  store i8 %v4_9174, i8* %v4_9180, align 1
  %v0_9184 = load i32, i32* %r0.global-to-local, align 4
  %v0_9188 = load i32, i32* %r2.global-to-local, align 4
  %v1_9188 = add i32 %v0_9188, -1
  store i32 %v1_9188, i32* @r8, align 4
  %v1_918c = add i32 %v0_9184, 2
  store i32 %v1_918c, i32* @r6, align 4
  %v0_9190 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9190, label %dec_label_pc_921c, label %dec_label_pc_9194

dec_label_pc_9194:                                ; preds = %dec_label_pc_9174
  %v1_9184 = add i32 %v0_9184, 1
  %v2_9194 = inttoptr i32 %v1_9184 to i8*
  %v3_9194 = load i8, i8* %v2_9194, align 1
  %v4_9194 = zext i8 %v3_9194 to i32
  store i32 %v4_9194, i32* @r4, align 4
  %v2_9198 = sub i32 %v1_9188, %v4_9194
  %tmp30 = sub i32 0, %v2_9198
  %v6_9198 = and i32 %v1_9188, %tmp30
  %v7_9198 = icmp slt i32 %v6_9198, 0
  %v8_9198 = icmp slt i32 %v2_9198, 0
  %v9_9198 = icmp eq i32 %v1_9188, %v4_9194
  store i1 %v9_9198, i1* %cpsr_z.global-to-local, align 1
  %v2_919c = xor i1 %v8_9198, %v7_9198
  br i1 %v2_919c, label %dec_label_pc_921c, label %dec_label_pc_91a0

dec_label_pc_91a0:                                ; preds = %dec_label_pc_9194, %dec_label_pc_9150
  %v0_91a4 = phi i32 [ %v4_913c, %dec_label_pc_9150 ], [ %v4_9194, %dec_label_pc_9194 ]
  %v2_9180 = phi i32 [ %v1_9158, %dec_label_pc_9150 ], [ %v1_91c4, %dec_label_pc_9194 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_91a4 = add nuw nsw i32 %v0_91a4, 1
  store i32 %v1_91a4, i32* %r0.global-to-local, align 4
  %v2_91a8 = call i32* @calloc(i32 %v1_91a4, i32 1)
  %v3_91a8 = ptrtoint i32* %v2_91a8 to i32
  store i32 %v3_91a8, i32* %r0.global-to-local, align 4
  %v0_91ac = load i32, i32* @r6, align 4
  store i32 %v0_91ac, i32* %r1.global-to-local, align 4
  %v1_91b0 = load i32, i32* @r5, align 4
  %v2_91b0 = inttoptr i32 %v1_91b0 to i32*
  store i32 %v3_91a8, i32* %v2_91b0, align 4
  %v0_91b4 = load i32, i32* @r4, align 4
  store i32 %v0_91b4, i32* %r2.global-to-local, align 4
  %v3_91b8 = call i32 @function_11780(i32 %v3_91a8, i32 %v0_91ac, i32 %v0_91b4)
  store i32 %v3_91b8, i32* %r0.global-to-local, align 4
  store i32 %v2_9180, i32* @r5, align 4
  %v0_91c0 = load i32, i32* %fp.global-to-local, align 4
  %v1_91c0 = add i32 %v0_91c0, 1
  store i32 %v1_91c0, i32* %fp.global-to-local, align 4
  %v1_91c4 = add i32 %v2_9180, 8
  store i32 %v1_91c4, i32* %ip.global-to-local, align 4
  %v1_91c8 = load i32, i32* @sb, align 4
  %v9_91c8 = icmp eq i32 %v1_91c0, %v1_91c8
  store i1 %v9_91c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_91c8, label %dec_label_pc_91d4, label %dec_label_pc_916c

dec_label_pc_91d4:                                ; preds = %dec_label_pc_91a0, %dec_label_pc_9104, %dec_label_pc_90f0
  %stack_var_-48.1 = phi i32 [ %v3_90f0, %dec_label_pc_90f0 ], [ %v0_9110, %dec_label_pc_9104 ], [ %v0_9110, %dec_label_pc_91a0 ]
  %stack_var_-52.2 = phi i32 [ %v3_90f0, %dec_label_pc_90f0 ], [ %v4_910c, %dec_label_pc_9104 ], [ %v4_910c, %dec_label_pc_91a0 ]
  %v0_91d4 = call i32* @__errno_location()
  %v0_91d8 = load i32, i32* @sl, align 4
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_91e4 = mul i32 %v0_91d8, 16777216
  %v1_91d8 = mul i32 %v0_91d8, 256
  %v4_91e8 = and i32 %v1_91d8, 16711680
  %v5_91e8 = or i32 %v4_91e8, %v3_91e4
  store i32 %v5_91e8, i32* %r1.global-to-local, align 4
  %v1_91e0 = udiv i32 %v0_91d8, 256
  %v3_91ec = and i32 %v1_91e0, 65280
  store i32 %v3_91ec, i32* %r2.global-to-local, align 4
  store i32 0, i32* %v0_91d4, align 4
  %v1_91f8 = load i32, i32* @sl, align 4
  %v4_91f8 = udiv i32 %v1_91f8, 16777216
  %v5_91f8 = or i32 %v4_91f8, %v3_91ec
  %v0_91fc = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* %ip.global-to-local, align 4
  %v1_9204 = load i32, i32* %r1.global-to-local, align 4
  %v2_9204 = or i32 %v5_91f8, %v1_9204
  store i32 %v2_9204, i32* %r0.global-to-local, align 4
  store i32 %v4_904c, i32* %r1.global-to-local, align 4
  %v0_9210 = load i32, i32* @r7, align 4
  store i32 %v0_9210, i32* %r2.global-to-local, align 4
  %v6_9218 = trunc i32 %v0_91fc to i8
  %v7_9218 = call i32 @function_8f2c(i32 %v2_9204, i32 %v4_904c, i32 %v0_9210, i32 %v4_9080, i8 %v6_9218, i32 %stack_var_-52.2)
  store i32 %v7_9218, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_921c

dec_label_pc_921c:                                ; preds = %dec_label_pc_9194, %dec_label_pc_9174, %dec_label_pc_916c, %dec_label_pc_913c, %dec_label_pc_9128, %dec_label_pc_9120, %dec_label_pc_90e4, %dec_label_pc_91d4
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_90e4 ], [ %stack_var_-52.2, %dec_label_pc_91d4 ], [ %v4_910c, %dec_label_pc_9120 ], [ %v4_910c, %dec_label_pc_9128 ], [ %v4_910c, %dec_label_pc_913c ], [ %v4_910c, %dec_label_pc_916c ], [ %v4_910c, %dec_label_pc_9174 ], [ %v4_910c, %dec_label_pc_9194 ]
  store i32 %v4_9080, i32* %r1.global-to-local, align 4
  %v2_9220 = icmp eq i32* %v2_9080, null
  store i1 %v2_9220, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9220, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_921c
  store i32 %v4_9080, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_921c, %bb
  store i32 37420, i32* %lr.global-to-local, align 4
  %v1_9228 = xor i1 %v2_9220, true
  call void @__pseudo_cond_branch(i1 %v1_9228, i32 ptrtoint (i32* @global_var_8d88.78 to i32))
  %v2_9230 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_9230, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9230, label %.dec_label_pc_9040_crit_edge, label %dec_label_pc_9238

.dec_label_pc_9040_crit_edge:                     ; preds = %bb31
  %v29_9044.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9040

dec_label_pc_9238:                                ; preds = %bb31
  %v0_9238 = load i32, i32* @sb, align 4
  %v2_9238 = icmp eq i32 %v0_9238, 0
  store i1 %v2_9238, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_9238, 1
  br i1 %tmp32, label %dec_label_pc_9260, label %dec_label_pc_9240

dec_label_pc_9240:                                ; preds = %dec_label_pc_9238
  br label %dec_label_pc_9244

dec_label_pc_9244:                                ; preds = %dec_label_pc_9244, %dec_label_pc_9240
  %v0_9250 = phi i32 [ %v1_9250, %dec_label_pc_9244 ], [ 0, %dec_label_pc_9240 ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_9248 = mul i32 %v0_9250, 8
  %v5_9248 = add i32 %v4_9248, %stack_var_-52.3
  %v6_9248 = inttoptr i32 %v5_9248 to i32*
  %v7_9248 = load i32, i32* %v6_9248, align 4
  store i32 %v7_9248, i32* %r0.global-to-local, align 4
  %v2_924c = icmp eq i32 %v7_9248, 0
  store i1 %v2_924c, i1* %cpsr_z.global-to-local, align 1
  %v1_9250 = add i32 %v0_9250, 1
  store i32 37464, i32* %lr.global-to-local, align 4
  %v1_9254 = xor i1 %v2_924c, true
  call void @__pseudo_cond_branch(i1 %v1_9254, i32 ptrtoint (i32* @global_var_8d88.78 to i32))
  %v0_9258 = load i32, i32* @sb, align 4
  %v9_9258 = icmp eq i32 %v0_9258, %v1_9250
  store i1 %v9_9258, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9258, label %dec_label_pc_9260, label %dec_label_pc_9244

dec_label_pc_9260:                                ; preds = %dec_label_pc_9244, %dec_label_pc_9238
  store i32 %stack_var_-52.3, i32* %r0.global-to-local, align 4
  store i32 %v9_901c, i32* @r6, align 4
  store i32 %v12_901c, i32* @r7, align 4
  store i32 %v18_901c, i32* @sb, align 4
  store i32 %v21_901c, i32* @sl, align 4
  store i32 %v27_901c, i32* %lr.global-to-local, align 4
  %v1_926c = inttoptr i32 %stack_var_-52.3 to i32*
  call void @free(i32* %v1_926c)
  store i32 ptrtoint (i32* @0 to i32), i32* %r0.global-to-local, align 4
  ret i32 ptrtoint (i32* @0 to i32)

; uselistorder directives
  uselistorder i1 %v2_9220, { 0, 2, 1 }
  uselistorder i32 %stack_var_-52.3, { 3, 2, 0, 1, 4 }
  uselistorder i32 %v0_91d8, { 2, 0, 1 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_91c4, { 1, 0 }
  uselistorder i32 %v3_91a8, { 0, 2, 1 }
  uselistorder i32 %v2_9180, { 2, 1, 0 }
  uselistorder i32 %v2_9198, { 1, 0 }
  uselistorder i32 %v4_9194, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9188, { 2, 0, 1, 3 }
  uselistorder i32 %v0_9184, { 1, 0 }
  uselistorder i32 %v0_9120, { 0, 2, 1 }
  uselistorder i32 %v0_9110, { 0, 2, 1, 3 }
  uselistorder i32 %v4_910c, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_90f0, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_90cc, { 1, 0 }
  uselistorder i32 %v0_90b0, { 0, 2, 1 }
  uselistorder i32 %v0_908c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_9080, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32 %v2_906c, { 2, 1, 0 }
  uselistorder i32 %v4_9058, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_904c, { 1, 0, 2 }
  uselistorder i32 %v0_902c, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 5, 2, 3, 4, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 22, 6, 2, 7, 10, 14, 11, 8, 9, 12, 13, 20, 15, 17, 16, 18, 19, 23, 21, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 5, 4, 0, 2, 3, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_921c, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_9040, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_9270(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9270:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_9270 = urem i32 %arg1, 256
  %v2_9274 = icmp eq i32 %v1_9270, 0
  br i1 %v2_9274, label %dec_label_pc_92c0, label %dec_label_pc_9284

dec_label_pc_9284:                                ; preds = %dec_label_pc_9270
  %v0_9284 = load i32, i32* %r1.global-to-local, align 4
  %v1_9284 = add i32 %v0_9284, 4
  %v2_9284 = inttoptr i32 %v1_9284 to i8*
  %v3_9284 = load i8, i8* %v2_9284, align 1
  %v4_9284 = zext i8 %v3_9284 to i32
  %v1_9288 = urem i32 %arg3, 256
  %v9_928c = icmp eq i32 %v4_9284, %v1_9288
  br i1 %v9_928c, label %dec_label_pc_92c8, label %dec_label_pc_92b0.preheader

dec_label_pc_92b0.preheader:                      ; preds = %dec_label_pc_9284
  br label %dec_label_pc_92b0

dec_label_pc_92a0:                                ; preds = %dec_label_pc_92b0
  %v1_92a0 = add i32 %v0_92a8.in, 12
  %v2_92a0 = inttoptr i32 %v1_92a0 to i8*
  %v3_92a0 = load i8, i8* %v2_92a0, align 1
  %v4_92a0 = zext i8 %v3_92a0 to i32
  %v9_92a4 = icmp eq i32 %v1_9288, %v4_92a0
  br i1 %v9_92a4, label %dec_label_pc_92c8, label %dec_label_pc_92b0

dec_label_pc_92b0:                                ; preds = %dec_label_pc_92b0.preheader, %dec_label_pc_92a0
  %v0_92a8.in = phi i32 [ %v0_9284, %dec_label_pc_92b0.preheader ], [ %v0_92a8, %dec_label_pc_92a0 ]
  %v0_92b0 = phi i32 [ 0, %dec_label_pc_92b0.preheader ], [ %v1_92b0, %dec_label_pc_92a0 ]
  %v0_92a8 = add i32 %v0_92a8.in, 8
  %v1_92b0 = add i32 %v0_92b0, 1
  %v9_92b4 = icmp eq i32 %v1_9270, %v1_92b0
  store i32 %v0_92a8, i32* %r1.global-to-local, align 4
  br i1 %v9_92b4, label %dec_label_pc_92c0, label %dec_label_pc_92a0

dec_label_pc_92c0:                                ; preds = %dec_label_pc_92b0, %dec_label_pc_92c8, %dec_label_pc_9270
  ret i32 %arg4

dec_label_pc_92c8:                                ; preds = %dec_label_pc_92a0, %dec_label_pc_9284
  %v0_92c8 = phi i32 [ %v0_9284, %dec_label_pc_9284 ], [ %v0_92a8, %dec_label_pc_92a0 ]
  %v1_92c8 = inttoptr i32 %v0_92c8 to i32*
  %v2_92c8 = load i32, i32* %v1_92c8, align 4
  %v3_92cc = icmp eq i32 %v2_92c8, 0
  br i1 %v3_92cc, label %dec_label_pc_92c0, label %dec_label_pc_92d4

dec_label_pc_92d4:                                ; preds = %dec_label_pc_92c8
  %v3_92c8 = inttoptr i32 %v2_92c8 to i8*
  %v3_92d8 = call i32 @inet_addr(i8* %v3_92c8)
  ret i32 %v3_92d8

; uselistorder directives
  uselistorder i32 %v2_92c8, { 1, 0 }
  uselistorder i32 %v1_92b0, { 1, 0 }
  uselistorder i32 %v0_92a8, { 1, 0, 2 }
  uselistorder i32 %v0_92a8.in, { 1, 0 }
  uselistorder i32 %v1_9288, { 1, 0 }
  uselistorder i32 %v0_9284, { 1, 0, 2 }
  uselistorder i32 %v1_9270, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_92c0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_92b0, { 1, 0 }
}

define i32 @function_92dc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_92dc:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_92dc = urem i32 %arg1, 256
  %v2_92e0 = icmp eq i32 %v1_92dc, 0
  %v3_92e4 = load i32, i32* @r4, align 4
  br i1 %v2_92e0, label %dec_label_pc_932c, label %dec_label_pc_92f0

dec_label_pc_92f0:                                ; preds = %dec_label_pc_92dc
  %v0_92f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_92f0 = add i32 %v0_92f0, 4
  %v2_92f0 = inttoptr i32 %v1_92f0 to i8*
  %v3_92f0 = load i8, i8* %v2_92f0, align 1
  %v4_92f0 = zext i8 %v3_92f0 to i32
  %v1_92f4 = urem i32 %arg3, 256
  %v9_92f8 = icmp eq i32 %v4_92f0, %v1_92f4
  br i1 %v9_92f8, label %dec_label_pc_9334, label %dec_label_pc_931c.preheader

dec_label_pc_931c.preheader:                      ; preds = %dec_label_pc_92f0
  br label %dec_label_pc_931c

dec_label_pc_930c:                                ; preds = %dec_label_pc_931c
  %v1_930c = add i32 %v0_9314.in, 12
  %v2_930c = inttoptr i32 %v1_930c to i8*
  %v3_930c = load i8, i8* %v2_930c, align 1
  %v4_930c = zext i8 %v3_930c to i32
  %v9_9310 = icmp eq i32 %v1_92f4, %v4_930c
  br i1 %v9_9310, label %dec_label_pc_9334, label %dec_label_pc_931c

dec_label_pc_931c:                                ; preds = %dec_label_pc_931c.preheader, %dec_label_pc_930c
  %v0_9314.in = phi i32 [ %v0_92f0, %dec_label_pc_931c.preheader ], [ %v0_9314, %dec_label_pc_930c ]
  %v0_931c = phi i32 [ 0, %dec_label_pc_931c.preheader ], [ %v1_931c, %dec_label_pc_930c ]
  %v0_9314 = add i32 %v0_9314.in, 8
  %v1_931c = add i32 %v0_931c, 1
  store i32 %v1_931c, i32* @lr, align 4
  %v9_9320 = icmp eq i32 %v1_92dc, %v1_931c
  store i32 %v0_9314, i32* %r1.global-to-local, align 4
  br i1 %v9_9320, label %dec_label_pc_932c, label %dec_label_pc_930c

dec_label_pc_932c:                                ; preds = %dec_label_pc_931c, %dec_label_pc_9334, %dec_label_pc_92dc
  store i32 %v3_92e4, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_9334:                                ; preds = %dec_label_pc_930c, %dec_label_pc_92f0
  %v0_9334 = phi i32 [ %v0_92f0, %dec_label_pc_92f0 ], [ %v0_9314, %dec_label_pc_930c ]
  %v1_9334 = inttoptr i32 %v0_9334 to i32*
  %v2_9334 = load i32, i32* %v1_9334, align 4
  %v2_9338 = icmp eq i32 %v2_9334, 0
  br i1 %v2_9338, label %dec_label_pc_932c, label %dec_label_pc_9340

dec_label_pc_9340:                                ; preds = %dec_label_pc_9334
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_92e4, i32* @r4, align 4
  %v2_9348 = inttoptr i32 %v2_9334 to i8*
  %v3_9348 = call i32 @function_11830(i8* %v2_9348, i32 10)
  ret i32 %v3_9348

; uselistorder directives
  uselistorder i32 %v1_931c, { 1, 2, 0 }
  uselistorder i32 %v0_9314, { 1, 0, 2 }
  uselistorder i32 %v0_9314.in, { 1, 0 }
  uselistorder i32 %v1_92f4, { 1, 0 }
  uselistorder i32 %v0_92f0, { 1, 0, 2 }
  uselistorder i32 %v3_92e4, { 1, 0 }
  uselistorder i32 %v1_92dc, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_932c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_931c, { 1, 0 }
}

define i32 @function_934c(i32 %arg1) local_unnamed_addr {
dec_label_pc_934c:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_934c = load i32, i32* @r4, align 4
  store i32 %v3_934c, i32* %stack_var_-24, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_9358 = call i32* @calloc(i32 1, i32 8)
  %v3_9358 = ptrtoint i32* %v2_9358 to i32
  store i32 ptrtoint (i8** @global_var_1a3b0.74 to i32), i32* %r4.global-to-local, align 4
  %v2_9360 = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_9360 = zext i8 %v2_9360 to i32
  store i32 ptrtoint (i32* @global_var_1a3b4.76 to i32), i32* %r6.global-to-local, align 4
  store i32 40100, i32* %r2.global-to-local, align 4
  store i32 %v3_9358, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9374 = mul nuw nsw i32 %v3_9360, 4
  store i32 %v3_9374, i32* %r1.global-to-local, align 4
  %v2_9378 = load i32, i32* @global_var_1a3b4.76, align 4
  store i32 40100, i32* %v2_9358, align 4
  %v0_9380 = load i32, i32* %r3.global-to-local, align 4
  %v1_9380 = trunc i32 %v0_9380 to i8
  %v2_9380 = load i32, i32* %r5.global-to-local, align 4
  %v3_9380 = add i32 %v2_9380, 4
  %v4_9380 = inttoptr i32 %v3_9380 to i8*
  store i8 %v1_9380, i8* %v4_9380, align 1
  %v0_9384 = load i32, i32* %r1.global-to-local, align 4
  %v1_9384 = add i32 %v0_9384, 4
  store i32 %v1_9384, i32* %r1.global-to-local, align 4
  %v4_9388 = inttoptr i32 %v2_9378 to i32*
  %v5_9388 = call i32* @realloc(i32* %v4_9388, i32 %v1_9384)
  %v7_9388 = ptrtoint i32* %v5_9388 to i32
  %v2_938c = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_938c = zext i8 %v2_938c to i32
  store i32 %v3_938c, i32* %r3.global-to-local, align 4
  store i32 %v7_9388, i32* %ip.global-to-local, align 4
  %v0_9394 = load i32, i32* %r5.global-to-local, align 4
  %v5_9394 = mul nuw nsw i32 %v3_938c, 4
  %v6_9394 = add i32 %v5_9394, %v7_9388
  %v7_9394 = inttoptr i32 %v6_9394 to i32*
  store i32 %v0_9394, i32* %v7_9394, align 4
  store i32 ptrtoint (i8* @global_var_1a3b1.82 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_93a4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93a4 = inttoptr i32 %v2_93a4 to i8*
  store i8 ptrtoint (i8* @global_var_1a3b1.82 to i8), i8* %v3_93a4, align 1
  %v0_93a8 = load i32, i32* %ip.global-to-local, align 4
  %v1_93a8 = load i32, i32* %r6.global-to-local, align 4
  %v2_93a8 = inttoptr i32 %v1_93a8 to i32*
  store i32 %v0_93a8, i32* %v2_93a8, align 4
  %v2_93ac = call i32* @calloc(i32 1, i32 8)
  %v3_93ac = ptrtoint i32* %v2_93ac to i32
  %v2_93b0 = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_93b0 = zext i8 %v2_93b0 to i32
  store i32 ptrtoint (i32* @global_var_b1c8.84 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* %r8.global-to-local, align 4
  store i32 %v3_93ac, i32* %r5.global-to-local, align 4
  %v3_93c0 = mul nuw nsw i32 %v3_93b0, 4
  store i32 %v3_93c0, i32* %r1.global-to-local, align 4
  %v2_93c4 = load i32, i32* @global_var_1a3b4.76, align 4
  store i32 ptrtoint (i32* @global_var_b1c8.84 to i32), i32* %v2_93ac, align 4
  %v2_93cc = load i32, i32* %r5.global-to-local, align 4
  %v3_93cc = add i32 %v2_93cc, 4
  %v4_93cc = inttoptr i32 %v3_93cc to i8*
  store i8 1, i8* %v4_93cc, align 1
  %v0_93d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_93d0 = add i32 %v0_93d0, 4
  store i32 %v1_93d0, i32* %r1.global-to-local, align 4
  %v3_93d4 = inttoptr i32 %v2_93c4 to i32*
  %v4_93d4 = call i32* @realloc(i32* %v3_93d4, i32 %v1_93d0)
  %v6_93d4 = ptrtoint i32* %v4_93d4 to i32
  %v2_93d8 = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_93d8 = zext i8 %v2_93d8 to i32
  store i32 %v3_93d8, i32* %r3.global-to-local, align 4
  store i32 %v6_93d4, i32* %ip.global-to-local, align 4
  %v0_93e0 = load i32, i32* %r5.global-to-local, align 4
  %v5_93e0 = mul nuw nsw i32 %v3_93d8, 4
  %v6_93e0 = add i32 %v5_93e0, %v6_93d4
  %v7_93e0 = inttoptr i32 %v6_93e0 to i32*
  store i32 %v0_93e0, i32* %v7_93e0, align 4
  %v0_93e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_93e4 = load i32, i32* %r8.global-to-local, align 4
  %v2_93e4 = add i32 %v1_93e4, %v0_93e4
  store i32 %v2_93e4, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_93f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_93f0 = load i32, i32* %r6.global-to-local, align 4
  %v2_93f0 = inttoptr i32 %v1_93f0 to i32*
  store i32 %v0_93f0, i32* %v2_93f0, align 4
  %v0_93f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_93f4 = trunc i32 %v0_93f4 to i8
  %v2_93f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93f4 = inttoptr i32 %v2_93f4 to i8*
  store i8 %v1_93f4, i8* %v3_93f4, align 1
  %v2_93f8 = call i32* @calloc(i32 %v1_93e4, i32 8)
  %v4_93f8 = ptrtoint i32* %v2_93f8 to i32
  %v2_93fc = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_93fc = zext i8 %v2_93fc to i32
  store i32 ptrtoint (i32* @global_var_b68c.86 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_93f8, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_940c = mul nuw nsw i32 %v3_93fc, 4
  store i32 %v3_940c, i32* %r1.global-to-local, align 4
  %v2_9410 = load i32, i32* @global_var_1a3b4.76, align 4
  store i32 ptrtoint (i32* @global_var_b68c.86 to i32), i32* %v2_93f8, align 4
  %v0_9418 = load i32, i32* %r3.global-to-local, align 4
  %v1_9418 = trunc i32 %v0_9418 to i8
  %v2_9418 = load i32, i32* %r5.global-to-local, align 4
  %v3_9418 = add i32 %v2_9418, 4
  %v4_9418 = inttoptr i32 %v3_9418 to i8*
  store i8 %v1_9418, i8* %v4_9418, align 1
  %v0_941c = load i32, i32* %r1.global-to-local, align 4
  %v1_941c = add i32 %v0_941c, 4
  store i32 %v1_941c, i32* %r1.global-to-local, align 4
  %v4_9420 = inttoptr i32 %v2_9410 to i32*
  %v5_9420 = call i32* @realloc(i32* %v4_9420, i32 %v1_941c)
  %v7_9420 = ptrtoint i32* %v5_9420 to i32
  %v2_9424 = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_9424 = zext i8 %v2_9424 to i32
  store i32 %v3_9424, i32* %r3.global-to-local, align 4
  store i32 %v7_9420, i32* %ip.global-to-local, align 4
  %v1_942c = load i32, i32* %r8.global-to-local, align 4
  %v2_942c = add i32 %v1_942c, %v3_9424
  store i32 %v2_942c, i32* %r2.global-to-local, align 4
  %v0_9430 = load i32, i32* %r5.global-to-local, align 4
  %v5_9430 = mul nuw nsw i32 %v3_9424, 4
  %v6_9430 = add i32 %v5_9430, %v7_9420
  %v7_9430 = inttoptr i32 %v6_9430 to i32*
  store i32 %v0_9430, i32* %v7_9430, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_9438 = load i32, i32* %r8.global-to-local, align 4
  %v0_943c = load i32, i32* %r2.global-to-local, align 4
  %v1_943c = trunc i32 %v0_943c to i8
  %v2_943c = load i32, i32* %r4.global-to-local, align 4
  %v3_943c = inttoptr i32 %v2_943c to i8*
  store i8 %v1_943c, i8* %v3_943c, align 1
  %v0_9440 = load i32, i32* %ip.global-to-local, align 4
  %v1_9440 = load i32, i32* %r6.global-to-local, align 4
  %v2_9440 = inttoptr i32 %v1_9440 to i32*
  store i32 %v0_9440, i32* %v2_9440, align 4
  %v2_9444 = call i32* @calloc(i32 %v0_9438, i32 8)
  %v3_9444 = ptrtoint i32* %v2_9444 to i32
  %v2_9448 = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_9448 = zext i8 %v2_9448 to i32
  store i32 ptrtoint (i32* @global_var_96d4.88 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* %r7.global-to-local, align 4
  store i32 %v3_9444, i32* %r5.global-to-local, align 4
  %v3_9458 = mul nuw nsw i32 %v3_9448, 4
  store i32 %v3_9458, i32* %r1.global-to-local, align 4
  %v2_945c = load i32, i32* @global_var_1a3b4.76, align 4
  store i32 ptrtoint (i32* @global_var_96d4.88 to i32), i32* %v2_9444, align 4
  %v2_9464 = load i32, i32* %r5.global-to-local, align 4
  %v3_9464 = add i32 %v2_9464, 4
  %v4_9464 = inttoptr i32 %v3_9464 to i8*
  store i8 8, i8* %v4_9464, align 1
  %v0_9468 = load i32, i32* %r1.global-to-local, align 4
  %v1_9468 = add i32 %v0_9468, 4
  store i32 %v1_9468, i32* %r1.global-to-local, align 4
  %v3_946c = inttoptr i32 %v2_945c to i32*
  %v4_946c = call i32* @realloc(i32* %v3_946c, i32 %v1_9468)
  %v6_946c = ptrtoint i32* %v4_946c to i32
  %v2_9470 = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_9470 = zext i8 %v2_9470 to i32
  store i32 %v3_9470, i32* %r3.global-to-local, align 4
  store i32 %v6_946c, i32* %ip.global-to-local, align 4
  %v0_9478 = load i32, i32* %r5.global-to-local, align 4
  %v5_9478 = mul nuw nsw i32 %v3_9470, 4
  %v6_9478 = add i32 %v5_9478, %v6_946c
  %v7_9478 = inttoptr i32 %v6_9478 to i32*
  store i32 %v0_9478, i32* %v7_9478, align 4
  %v0_947c = load i32, i32* %r3.global-to-local, align 4
  %v1_947c = load i32, i32* %r8.global-to-local, align 4
  %v2_947c = add i32 %v1_947c, %v0_947c
  store i32 %v2_947c, i32* %r2.global-to-local, align 4
  %v0_9480 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9480, i32* %r1.global-to-local, align 4
  %v0_9488 = load i32, i32* %ip.global-to-local, align 4
  %v1_9488 = load i32, i32* %r6.global-to-local, align 4
  %v2_9488 = inttoptr i32 %v1_9488 to i32*
  store i32 %v0_9488, i32* %v2_9488, align 4
  %v0_948c = load i32, i32* %r2.global-to-local, align 4
  %v1_948c = trunc i32 %v0_948c to i8
  %v2_948c = load i32, i32* %r4.global-to-local, align 4
  %v3_948c = inttoptr i32 %v2_948c to i8*
  store i8 %v1_948c, i8* %v3_948c, align 1
  %v2_9490 = call i32* @calloc(i32 %v1_947c, i32 %v0_9480)
  %v4_9490 = ptrtoint i32* %v2_9490 to i32
  %v2_9494 = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_9494 = zext i8 %v2_9494 to i32
  store i32 ptrtoint (i32* @global_var_d6a8.90 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_9490, i32* %r5.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_94a4 = mul nuw nsw i32 %v3_9494, 4
  store i32 %v3_94a4, i32* %r1.global-to-local, align 4
  %v2_94a8 = load i32, i32* @global_var_1a3b4.76, align 4
  store i32 ptrtoint (i32* @global_var_d6a8.90 to i32), i32* %v2_9490, align 4
  %v0_94b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_94b0 = trunc i32 %v0_94b0 to i8
  %v2_94b0 = load i32, i32* %r5.global-to-local, align 4
  %v3_94b0 = add i32 %v2_94b0, 4
  %v4_94b0 = inttoptr i32 %v3_94b0 to i8*
  store i8 %v1_94b0, i8* %v4_94b0, align 1
  %v0_94b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_94b4 = add i32 %v0_94b4, 4
  store i32 %v1_94b4, i32* %r1.global-to-local, align 4
  %v4_94b8 = inttoptr i32 %v2_94a8 to i32*
  %v5_94b8 = call i32* @realloc(i32* %v4_94b8, i32 %v1_94b4)
  %v7_94b8 = ptrtoint i32* %v5_94b8 to i32
  %v2_94bc = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_94bc = zext i8 %v2_94bc to i32
  store i32 %v3_94bc, i32* %r3.global-to-local, align 4
  store i32 %v7_94b8, i32* %ip.global-to-local, align 4
  %v0_94c4 = load i32, i32* %r5.global-to-local, align 4
  %v5_94c4 = mul nuw nsw i32 %v3_94bc, 4
  %v6_94c4 = add i32 %v5_94c4, %v7_94b8
  %v7_94c4 = inttoptr i32 %v6_94c4 to i32*
  store i32 %v0_94c4, i32* %v7_94c4, align 4
  %v0_94c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_94c8 = load i32, i32* %r8.global-to-local, align 4
  %v2_94c8 = add i32 %v1_94c8, %v0_94c8
  store i32 %v2_94c8, i32* %r2.global-to-local, align 4
  %v0_94cc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_94cc, i32* %r1.global-to-local, align 4
  %v0_94d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_94d4 = load i32, i32* %r6.global-to-local, align 4
  %v2_94d4 = inttoptr i32 %v1_94d4 to i32*
  store i32 %v0_94d4, i32* %v2_94d4, align 4
  %v0_94d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_94d8 = trunc i32 %v0_94d8 to i8
  %v2_94d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_94d8 = inttoptr i32 %v2_94d8 to i8*
  store i8 %v1_94d8, i8* %v3_94d8, align 1
  %v2_94dc = call i32* @calloc(i32 %v1_94c8, i32 %v0_94cc)
  %v4_94dc = ptrtoint i32* %v2_94dc to i32
  %v2_94e0 = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_94e0 = zext i8 %v2_94e0 to i32
  store i32 ptrtoint (i32* @global_var_cf34.92 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_94dc, i32* %r5.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_94f0 = mul nuw nsw i32 %v3_94e0, 4
  store i32 %v3_94f0, i32* %r1.global-to-local, align 4
  %v2_94f4 = load i32, i32* @global_var_1a3b4.76, align 4
  store i32 ptrtoint (i32* @global_var_cf34.92 to i32), i32* %v2_94dc, align 4
  %v0_94fc = load i32, i32* %r3.global-to-local, align 4
  %v1_94fc = trunc i32 %v0_94fc to i8
  %v2_94fc = load i32, i32* %r5.global-to-local, align 4
  %v3_94fc = add i32 %v2_94fc, 4
  %v4_94fc = inttoptr i32 %v3_94fc to i8*
  store i8 %v1_94fc, i8* %v4_94fc, align 1
  %v0_9500 = load i32, i32* %r1.global-to-local, align 4
  %v1_9500 = add i32 %v0_9500, 4
  store i32 %v1_9500, i32* %r1.global-to-local, align 4
  %v4_9504 = inttoptr i32 %v2_94f4 to i32*
  %v5_9504 = call i32* @realloc(i32* %v4_9504, i32 %v1_9500)
  %v7_9504 = ptrtoint i32* %v5_9504 to i32
  %v2_9508 = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_9508 = zext i8 %v2_9508 to i32
  store i32 %v3_9508, i32* %r3.global-to-local, align 4
  store i32 %v7_9504, i32* %ip.global-to-local, align 4
  %v0_9510 = load i32, i32* %r5.global-to-local, align 4
  %v5_9510 = mul nuw nsw i32 %v3_9508, 4
  %v6_9510 = add i32 %v5_9510, %v7_9504
  %v7_9510 = inttoptr i32 %v6_9510 to i32*
  store i32 %v0_9510, i32* %v7_9510, align 4
  %v0_9514 = load i32, i32* %r3.global-to-local, align 4
  %v1_9514 = load i32, i32* %r8.global-to-local, align 4
  %v2_9514 = add i32 %v1_9514, %v0_9514
  store i32 %v2_9514, i32* %r2.global-to-local, align 4
  %v0_9518 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9518, i32* %r1.global-to-local, align 4
  %v0_9520 = load i32, i32* %ip.global-to-local, align 4
  %v1_9520 = load i32, i32* %r6.global-to-local, align 4
  %v2_9520 = inttoptr i32 %v1_9520 to i32*
  store i32 %v0_9520, i32* %v2_9520, align 4
  %v0_9524 = load i32, i32* %r2.global-to-local, align 4
  %v1_9524 = trunc i32 %v0_9524 to i8
  %v2_9524 = load i32, i32* %r4.global-to-local, align 4
  %v3_9524 = inttoptr i32 %v2_9524 to i8*
  store i8 %v1_9524, i8* %v3_9524, align 1
  %v2_9528 = call i32* @calloc(i32 %v1_9514, i32 %v0_9518)
  %v4_9528 = ptrtoint i32* %v2_9528 to i32
  %v2_952c = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_952c = zext i8 %v2_952c to i32
  store i32 ptrtoint (i32* @global_var_c6b8.94 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_9528, i32* %r5.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_953c = mul nuw nsw i32 %v3_952c, 4
  store i32 %v3_953c, i32* %r1.global-to-local, align 4
  %v2_9540 = load i32, i32* @global_var_1a3b4.76, align 4
  store i32 ptrtoint (i32* @global_var_c6b8.94 to i32), i32* %v2_9528, align 4
  %v0_9548 = load i32, i32* %r3.global-to-local, align 4
  %v1_9548 = trunc i32 %v0_9548 to i8
  %v2_9548 = load i32, i32* %r5.global-to-local, align 4
  %v3_9548 = add i32 %v2_9548, 4
  %v4_9548 = inttoptr i32 %v3_9548 to i8*
  store i8 %v1_9548, i8* %v4_9548, align 1
  %v0_954c = load i32, i32* %r1.global-to-local, align 4
  %v1_954c = add i32 %v0_954c, 4
  store i32 %v1_954c, i32* %r1.global-to-local, align 4
  %v4_9550 = inttoptr i32 %v2_9540 to i32*
  %v5_9550 = call i32* @realloc(i32* %v4_9550, i32 %v1_954c)
  %v7_9550 = ptrtoint i32* %v5_9550 to i32
  %v2_9554 = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_9554 = zext i8 %v2_9554 to i32
  store i32 %v3_9554, i32* %r3.global-to-local, align 4
  store i32 %v7_9550, i32* %ip.global-to-local, align 4
  %v0_955c = load i32, i32* %r5.global-to-local, align 4
  %v5_955c = mul nuw nsw i32 %v3_9554, 4
  %v6_955c = add i32 %v5_955c, %v7_9550
  %v7_955c = inttoptr i32 %v6_955c to i32*
  store i32 %v0_955c, i32* %v7_955c, align 4
  %v0_9560 = load i32, i32* %r3.global-to-local, align 4
  %v1_9560 = load i32, i32* %r8.global-to-local, align 4
  %v2_9560 = add i32 %v1_9560, %v0_9560
  store i32 %v2_9560, i32* %r2.global-to-local, align 4
  %v0_9564 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9564, i32* %r1.global-to-local, align 4
  %v0_956c = load i32, i32* %ip.global-to-local, align 4
  %v1_956c = load i32, i32* %r6.global-to-local, align 4
  %v2_956c = inttoptr i32 %v1_956c to i32*
  store i32 %v0_956c, i32* %v2_956c, align 4
  %v0_9570 = load i32, i32* %r2.global-to-local, align 4
  %v1_9570 = trunc i32 %v0_9570 to i8
  %v2_9570 = load i32, i32* %r4.global-to-local, align 4
  %v3_9570 = inttoptr i32 %v2_9570 to i8*
  store i8 %v1_9570, i8* %v3_9570, align 1
  %v2_9574 = call i32* @calloc(i32 %v1_9560, i32 %v0_9564)
  %v4_9574 = ptrtoint i32* %v2_9574 to i32
  %v2_9578 = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_9578 = zext i8 %v2_9578 to i32
  store i32 48700, i32* %r2.global-to-local, align 4
  store i32 %v4_9574, i32* %r5.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_9588 = mul nuw nsw i32 %v3_9578, 4
  store i32 %v3_9588, i32* %r1.global-to-local, align 4
  %v2_958c = load i32, i32* @global_var_1a3b4.76, align 4
  store i32 48700, i32* %v2_9574, align 4
  %v0_9594 = load i32, i32* %r3.global-to-local, align 4
  %v1_9594 = trunc i32 %v0_9594 to i8
  %v2_9594 = load i32, i32* %r5.global-to-local, align 4
  %v3_9594 = add i32 %v2_9594, 4
  %v4_9594 = inttoptr i32 %v3_9594 to i8*
  store i8 %v1_9594, i8* %v4_9594, align 1
  %v0_9598 = load i32, i32* %r1.global-to-local, align 4
  %v1_9598 = add i32 %v0_9598, 4
  store i32 %v1_9598, i32* %r1.global-to-local, align 4
  %v4_959c = inttoptr i32 %v2_958c to i32*
  %v5_959c = call i32* @realloc(i32* %v4_959c, i32 %v1_9598)
  %v7_959c = ptrtoint i32* %v5_959c to i32
  %v2_95a0 = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_95a0 = zext i8 %v2_95a0 to i32
  store i32 %v3_95a0, i32* %r3.global-to-local, align 4
  store i32 %v7_959c, i32* %ip.global-to-local, align 4
  %v0_95a8 = load i32, i32* %r5.global-to-local, align 4
  %v5_95a8 = mul nuw nsw i32 %v3_95a0, 4
  %v6_95a8 = add i32 %v5_95a8, %v7_959c
  %v7_95a8 = inttoptr i32 %v6_95a8 to i32*
  store i32 %v0_95a8, i32* %v7_95a8, align 4
  %v0_95ac = load i32, i32* %r3.global-to-local, align 4
  %v1_95ac = load i32, i32* %r8.global-to-local, align 4
  %v2_95ac = add i32 %v1_95ac, %v0_95ac
  store i32 %v2_95ac, i32* %r2.global-to-local, align 4
  %v0_95b0 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_95b0, i32* %r1.global-to-local, align 4
  %v0_95b8 = load i32, i32* %ip.global-to-local, align 4
  %v1_95b8 = load i32, i32* %r6.global-to-local, align 4
  %v2_95b8 = inttoptr i32 %v1_95b8 to i32*
  store i32 %v0_95b8, i32* %v2_95b8, align 4
  %v0_95bc = load i32, i32* %r2.global-to-local, align 4
  %v1_95bc = trunc i32 %v0_95bc to i8
  %v2_95bc = load i32, i32* %r4.global-to-local, align 4
  %v3_95bc = inttoptr i32 %v2_95bc to i8*
  store i8 %v1_95bc, i8* %v3_95bc, align 1
  %v2_95c0 = call i32* @calloc(i32 %v1_95ac, i32 %v0_95b0)
  %v4_95c0 = ptrtoint i32* %v2_95c0 to i32
  %v2_95c4 = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_95c4 = zext i8 %v2_95c4 to i32
  store i32 ptrtoint (i32* @global_var_aaac.97 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_95c0, i32* %r5.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_95d4 = mul nuw nsw i32 %v3_95c4, 4
  store i32 %v3_95d4, i32* %r1.global-to-local, align 4
  %v2_95d8 = load i32, i32* @global_var_1a3b4.76, align 4
  store i32 ptrtoint (i32* @global_var_aaac.97 to i32), i32* %v2_95c0, align 4
  %v0_95e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_95e0 = trunc i32 %v0_95e0 to i8
  %v2_95e0 = load i32, i32* %r5.global-to-local, align 4
  %v3_95e0 = add i32 %v2_95e0, 4
  %v4_95e0 = inttoptr i32 %v3_95e0 to i8*
  store i8 %v1_95e0, i8* %v4_95e0, align 1
  %v0_95e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_95e4 = add i32 %v0_95e4, 4
  store i32 %v1_95e4, i32* %r1.global-to-local, align 4
  %v4_95e8 = inttoptr i32 %v2_95d8 to i32*
  %v5_95e8 = call i32* @realloc(i32* %v4_95e8, i32 %v1_95e4)
  %v7_95e8 = ptrtoint i32* %v5_95e8 to i32
  %v2_95ec = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_95ec = zext i8 %v2_95ec to i32
  store i32 %v3_95ec, i32* %r3.global-to-local, align 4
  store i32 %v7_95e8, i32* %ip.global-to-local, align 4
  %v0_95f4 = load i32, i32* %r5.global-to-local, align 4
  %v5_95f4 = mul nuw nsw i32 %v3_95ec, 4
  %v6_95f4 = add i32 %v5_95f4, %v7_95e8
  %v7_95f4 = inttoptr i32 %v6_95f4 to i32*
  store i32 %v0_95f4, i32* %v7_95f4, align 4
  %v0_95f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_95f8 = load i32, i32* %r8.global-to-local, align 4
  %v2_95f8 = add i32 %v1_95f8, %v0_95f8
  store i32 %v2_95f8, i32* %r2.global-to-local, align 4
  %v0_95fc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_95fc, i32* %r1.global-to-local, align 4
  %v0_9604 = load i32, i32* %ip.global-to-local, align 4
  %v1_9604 = load i32, i32* %r6.global-to-local, align 4
  %v2_9604 = inttoptr i32 %v1_9604 to i32*
  store i32 %v0_9604, i32* %v2_9604, align 4
  %v0_9608 = load i32, i32* %r2.global-to-local, align 4
  %v1_9608 = trunc i32 %v0_9608 to i8
  %v2_9608 = load i32, i32* %r4.global-to-local, align 4
  %v3_9608 = inttoptr i32 %v2_9608 to i8*
  store i8 %v1_9608, i8* %v3_9608, align 1
  %v2_960c = call i32* @calloc(i32 %v1_95f8, i32 %v0_95fc)
  %v4_960c = ptrtoint i32* %v2_960c to i32
  %v2_9610 = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_9610 = zext i8 %v2_9610 to i32
  store i32 ptrtoint (i32* @global_var_a330.99 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_960c, i32* %r5.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_9620 = mul nuw nsw i32 %v3_9610, 4
  store i32 %v3_9620, i32* %r1.global-to-local, align 4
  %v2_9624 = load i32, i32* @global_var_1a3b4.76, align 4
  store i32 ptrtoint (i32* @global_var_a330.99 to i32), i32* %v2_960c, align 4
  %v0_962c = load i32, i32* %r3.global-to-local, align 4
  %v1_962c = trunc i32 %v0_962c to i8
  %v2_962c = load i32, i32* %r5.global-to-local, align 4
  %v3_962c = add i32 %v2_962c, 4
  %v4_962c = inttoptr i32 %v3_962c to i8*
  store i8 %v1_962c, i8* %v4_962c, align 1
  %v0_9630 = load i32, i32* %r1.global-to-local, align 4
  %v1_9630 = add i32 %v0_9630, 4
  store i32 %v1_9630, i32* %r1.global-to-local, align 4
  %v4_9634 = inttoptr i32 %v2_9624 to i32*
  %v5_9634 = call i32* @realloc(i32* %v4_9634, i32 %v1_9630)
  %v7_9634 = ptrtoint i32* %v5_9634 to i32
  %v2_9638 = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_9638 = zext i8 %v2_9638 to i32
  store i32 %v3_9638, i32* %r3.global-to-local, align 4
  store i32 %v7_9634, i32* %ip.global-to-local, align 4
  %v0_9640 = load i32, i32* %r5.global-to-local, align 4
  %v5_9640 = mul nuw nsw i32 %v3_9638, 4
  %v6_9640 = add i32 %v5_9640, %v7_9634
  %v7_9640 = inttoptr i32 %v6_9640 to i32*
  store i32 %v0_9640, i32* %v7_9640, align 4
  %v0_9644 = load i32, i32* %r3.global-to-local, align 4
  %v1_9644 = load i32, i32* %r8.global-to-local, align 4
  %v2_9644 = add i32 %v1_9644, %v0_9644
  store i32 %v2_9644, i32* %r2.global-to-local, align 4
  %v0_9648 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9648, i32* %r1.global-to-local, align 4
  %v1_9650 = trunc i32 %v2_9644 to i8
  %v2_9650 = load i32, i32* %r4.global-to-local, align 4
  %v3_9650 = inttoptr i32 %v2_9650 to i8*
  store i8 %v1_9650, i8* %v3_9650, align 1
  %v0_9654 = load i32, i32* %ip.global-to-local, align 4
  %v1_9654 = load i32, i32* %r6.global-to-local, align 4
  %v2_9654 = inttoptr i32 %v1_9654 to i32*
  store i32 %v0_9654, i32* %v2_9654, align 4
  %v2_9658 = call i32* @calloc(i32 %v1_9644, i32 %v0_9648)
  %v4_9658 = ptrtoint i32* %v2_9658 to i32
  %v2_965c = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_965c = zext i8 %v2_965c to i32
  store i32 39356, i32* %r2.global-to-local, align 4
  store i32 %v4_9658, i32* %r5.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_966c = mul nuw nsw i32 %v3_965c, 4
  store i32 %v3_966c, i32* %r1.global-to-local, align 4
  %v2_9670 = load i32, i32* @global_var_1a3b4.76, align 4
  store i32 39356, i32* %v2_9658, align 4
  %v0_9678 = load i32, i32* %r3.global-to-local, align 4
  %v1_9678 = trunc i32 %v0_9678 to i8
  %v2_9678 = load i32, i32* %r5.global-to-local, align 4
  %v3_9678 = add i32 %v2_9678, 4
  %v4_9678 = inttoptr i32 %v3_9678 to i8*
  store i8 %v1_9678, i8* %v4_9678, align 1
  %v0_967c = load i32, i32* %r1.global-to-local, align 4
  %v1_967c = add i32 %v0_967c, 4
  store i32 %v1_967c, i32* %r1.global-to-local, align 4
  %v4_9680 = inttoptr i32 %v2_9670 to i32*
  %v5_9680 = call i32* @realloc(i32* %v4_9680, i32 %v1_967c)
  %v6_9680 = ptrtoint i32* %v5_9680 to i32
  %v2_9684 = load i8, i8* bitcast (i8** @global_var_1a3b0.74 to i8*), align 4
  %v3_9684 = zext i8 %v2_9684 to i32
  store i32 %v3_9684, i32* %r3.global-to-local, align 4
  %v1_9688 = load i32, i32* %r6.global-to-local, align 4
  %v2_9688 = inttoptr i32 %v1_9688 to i32*
  store i32 %v6_9680, i32* %v2_9688, align 4
  %v0_968c = load i32, i32* %r5.global-to-local, align 4
  %v2_968c = load i32, i32* %r3.global-to-local, align 4
  %v5_968c = mul i32 %v2_968c, 4
  %v6_968c = add i32 %v5_968c, %v6_9680
  %v7_968c = inttoptr i32 %v6_968c to i32*
  store i32 %v0_968c, i32* %v7_968c, align 4
  %v0_9690 = load i32, i32* %r3.global-to-local, align 4
  %v1_9690 = load i32, i32* %r8.global-to-local, align 4
  %v2_9690 = add i32 %v1_9690, %v0_9690
  store i32 %v2_9690, i32* %r2.global-to-local, align 4
  %v1_9698 = trunc i32 %v2_9690 to i8
  %v2_9698 = load i32, i32* %r4.global-to-local, align 4
  %v3_9698 = inttoptr i32 %v2_9698 to i8*
  store i8 %v1_9698, i8* %v3_9698, align 1
  %v2_969c = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_969c, i32* @r4, align 4
  ret i32 %v1_9690

; uselistorder directives
  uselistorder i32 %v1_9690, { 1, 0 }
  uselistorder i32 %v1_9644, { 1, 0 }
  uselistorder i32 %v1_95f8, { 1, 0 }
  uselistorder i32 %v1_95ac, { 1, 0 }
  uselistorder i32 %v1_9560, { 1, 0 }
  uselistorder i32 %v1_9514, { 1, 0 }
  uselistorder i32 %v1_94c8, { 1, 0 }
  uselistorder i32 %v1_947c, { 1, 0 }
  uselistorder i32 %v3_9424, { 1, 0, 2 }
  uselistorder i32 %v1_93e4, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1a3b0.74 to i8*), { 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8** @global_var_1a3b0.74, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1a3b0.74 to i32), { 1, 0 }
}

define i32 @function_96d4(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_96d4:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint %sockaddr* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v3_96d4 = load i32, i32* @r4, align 4
  %v6_96d4 = load i32, i32* @r5, align 4
  %v24_96d4 = load i32, i32* @fp, align 4
  %v1_96d8 = urem i32 %arg1, 256
  store i32 %v1_96d8, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_96f0 = urem i32 %arg3, 256
  store i32 %v1_96f0, i32* @r4, align 4
  %v2_96f4 = call i32* @calloc(i32 %v1_96d8, i32 4)
  %v4_96f4 = ptrtoint i32* %v2_96f4 to i32
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v4_96f4, i32* @sl, align 4
  %v0_9700 = load i32, i32* @r7, align 4
  %v2_9704 = call i32* @calloc(i32 %v0_9700, i32 4)
  %v3_9704 = ptrtoint i32* %v2_9704 to i32
  store i32 65535, i32* @r5, align 4
  %v0_9710 = load i32, i32* @r6, align 4
  store i32 %v0_9710, i32* %r1.global-to-local, align 4
  store i32 %v3_9704, i32* @sb, align 4
  %v0_9720 = load i32, i32* @r4, align 4
  %v4_9724 = inttoptr i32 %v0_9710 to i32*
  %v5_9724 = call i32 @function_92dc(i32 %v0_9720, i32* %v4_9724, i32 7, i32 65535)
  %v3_972c = urem i32 %v5_9724, 65536
  %v0_9730 = load i32, i32* @r6, align 4
  store i32 %v0_9730, i32* %r1.global-to-local, align 4
  %v0_9738 = load i32, i32* @r5, align 4
  %v0_973c = load i32, i32* @r4, align 4
  %v5_9744 = inttoptr i32 %v0_9730 to i32*
  %v6_9744 = call i32 @function_92dc(i32 %v0_973c, i32* %v5_9744, i32 6, i32 %v0_9738)
  %v0_9748 = load i32, i32* @r6, align 4
  store i32 %v0_9748, i32* %r1.global-to-local, align 4
  %v3_974c = mul i32 %v6_9744, 65536
  store i32 %v3_974c, i32* %fp.global-to-local, align 4
  %v0_9758 = load i32, i32* @r4, align 4
  %v4_975c = inttoptr i32 %v0_9748 to i32*
  %v5_975c = call i32 @function_92dc(i32 %v0_9758, i32* %v4_975c, i32 0, i32 512)
  %v0_9768 = load i32, i32* @r6, align 4
  store i32 %v0_9768, i32* %r1.global-to-local, align 4
  %v0_976c = load i32, i32* @r4, align 4
  %v3_9774 = urem i32 %v5_975c, 65536
  store i32 %v3_9774, i32* @r6, align 4
  %v4_9778 = inttoptr i32 %v0_9768 to i32*
  %v5_9778 = call i32 @function_92dc(i32 %v0_976c, i32* %v4_9778, i32 1, i32 1)
  %v0_977c = load i32, i32* %fp.global-to-local, align 4
  %v3_977c = udiv i32 %v0_977c, 65536
  store i32 %v3_977c, i32* %r4.global-to-local, align 4
  %v1_9784 = load i32, i32* @r5, align 4
  %v9_9784 = icmp eq i32 %v3_977c, %v1_9784
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_9784, label %dec_label_pc_97ac, label %bb

bb:                                               ; preds = %dec_label_pc_96d4
  %v2_9798 = mul nuw nsw i32 %v3_977c, 256
  %v4_979c = and i32 %v2_9798, 65280
  %v1_97a0 = urem i32 %v5_9778, 256
  store i32 %v1_97a0, i32* @r8, align 4
  %v5_97a4 = udiv i32 %v0_977c, 16777216
  %v6_97a4 = or i32 %v4_979c, %v5_97a4
  br label %dec_label_pc_97b8

dec_label_pc_97ac:                                ; preds = %dec_label_pc_96d4
  %v1_97a07 = urem i32 %v5_9778, 256
  store i32 %v1_97a07, i32* @r8, align 4
  %v0_97ac = call i32 @function_f468()
  %v3_97b4 = urem i32 %v0_97ac, 65536
  br label %dec_label_pc_97b8

dec_label_pc_97b8:                                ; preds = %bb, %dec_label_pc_97ac
  %storemerge17 = phi i32 [ %v6_97a4, %bb ], [ %v3_97b4, %dec_label_pc_97ac ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_97b8 = load i32, i32* @r7, align 4
  %tmp42 = icmp slt i32 %v0_97b8, 1
  br i1 %tmp42, label %dec_label_pc_9964.preheader.thread, label %dec_label_pc_97c0

dec_label_pc_9964.preheader.thread:               ; preds = %dec_label_pc_97b8
  br label %dec_label_pc_992c

dec_label_pc_9964.preheader:                      ; preds = %dec_label_pc_98c0
  %tmp444749 = icmp slt i32 %v1_9814, 1
  br i1 %tmp444749, label %dec_label_pc_992c, label %dec_label_pc_9930.lr.ph

dec_label_pc_97c0:                                ; preds = %dec_label_pc_97b8
  store i32 %v3_972c, i32* %r1.global-to-local, align 4
  %v3_97c4 = udiv i32 %v5_9724, 256
  %v5_97d0 = trunc i32 %v3_97c4 to i8
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %v3_97e8 = udiv i32 %v5_9724, 65536
  %v4_97f8 = trunc i32 %v3_97e8 to i8
  store i8 %v4_97f8, i8* %stack_var_-80, align 1
  %v3_990c = icmp eq i32 %v3_972c, 65535
  %v2_9830 = ptrtoint i32* %stack_var_-52 to i32
  %tmp43 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_98f0

dec_label_pc_9800:                                ; preds = %dec_label_pc_98f0
  %v2_9800 = load i8, i8* %stack_var_-80, align 1
  %v3_9800 = sext i8 %v2_9800 to i32
  store i32 %v3_9800, i32* %r1.global-to-local, align 4
  %v2_9804 = load i32, i32* %r5.global-to-local, align 4
  %v3_9804 = add i32 %v2_9804, 2
  %v4_9804 = inttoptr i32 %v3_9804 to i8*
  store i8 %v5_97d0, i8* %v4_9804, align 1
  %v0_9808 = load i32, i32* %r1.global-to-local, align 4
  %v1_9808 = trunc i32 %v0_9808 to i8
  %v2_9808 = load i32, i32* %r5.global-to-local, align 4
  %v3_9808 = add i32 %v2_9808, 3
  %v4_9808 = inttoptr i32 %v3_9808 to i8*
  store i8 %v1_9808, i8* %v4_9808, align 1
  br label %dec_label_pc_980c

dec_label_pc_980c:                                ; preds = %dec_label_pc_9918, %dec_label_pc_9800
  %v1_9814 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_9824 = call i32 @socket(i32 2, i32 17, i32 17)
  %v7_982c = icmp eq i32 %v3_9824, -1
  store i32 %v2_9830, i32* %r1.global-to-local, align 4
  %v2_983c = load i32, i32* @sb, align 4
  %v3_983c = add i32 %v2_983c, %stack_var_-60.0
  %v4_983c = inttoptr i32 %v3_983c to i32*
  store i32 %v3_9824, i32* %v4_983c, align 4
  br i1 %v7_982c, label %dec_label_pc_9970, label %dec_label_pc_9844

dec_label_pc_9844:                                ; preds = %dec_label_pc_980c
  store i32 2, i32* %stack_var_-52, align 4
  %v5_9864 = call i32 @bind(i32 %v3_9824, %sockaddr* %tmp43, i32 16)
  %v0_9868 = load i32, i32* %r5.global-to-local, align 4
  %v1_9868 = add i32 %v0_9868, 20
  %v2_9868 = inttoptr i32 %v1_9868 to i8*
  %v3_9868 = load i8, i8* %v2_9868, align 1
  %tmp53 = icmp ugt i8 %v3_9868, 31
  br i1 %tmp53, label %dec_label_pc_98c0, label %dec_label_pc_9874

dec_label_pc_9874:                                ; preds = %dec_label_pc_9844
  %v1_9874 = add i32 %v0_9868, 16
  %v2_9874 = inttoptr i32 %v1_9874 to i32*
  %v3_9874 = load i32, i32* %v2_9874, align 4
  store i32 %v3_9874, i32* %r4.global-to-local, align 4
  %v0_9878 = call i32 @function_f468()
  %v1_9880 = and i32 %v3_9874, 65280
  %v3_9888 = mul i32 %v3_9874, 16777216
  %v4_988c = mul nuw nsw i32 %v1_9880, 256
  %v5_988c = or i32 %v4_988c, %v3_9888
  store i32 %v5_988c, i32* %r1.global-to-local, align 4
  %v0_9894 = load i32, i32* %r5.global-to-local, align 4
  %v1_9894 = add i32 %v0_9894, 20
  %v2_9894 = inttoptr i32 %v1_9894 to i8*
  %v3_9894 = load i8, i8* %v2_9894, align 1
  %v4_9894 = zext i8 %v3_9894 to i32
  %v2_9898 = call i32 @llvm.bswap.i32(i32 %v3_9874)
  %v7_989c = lshr i32 %v0_9878, %v4_9894
  %v8_989c = add i32 %v7_989c, %v2_9898
  %v3_98a8 = mul i32 %v8_989c, 16777216
  %v1_98ac = and i32 %v8_989c, 65280
  %v4_98b0 = mul nuw nsw i32 %v1_98ac, 256
  %v5_98b0 = or i32 %v4_98b0, %v3_98a8
  store i32 %v5_98b0, i32* %r1.global-to-local, align 4
  %v2_98b8 = call i32 @llvm.bswap.i32(i32 %v8_989c)
  %v2_98bc = add i32 %v0_9894, 4
  %v3_98bc = inttoptr i32 %v2_98bc to i32*
  store i32 %v2_98b8, i32* %v3_98bc, align 4
  %v0_98cc.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_98c0

dec_label_pc_98c0:                                ; preds = %dec_label_pc_9844, %dec_label_pc_9874
  %v0_98cc = phi i32 [ %v0_9868, %dec_label_pc_9844 ], [ %v0_98cc.pre, %dec_label_pc_9874 ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_98c8 = load i32, i32* @sb, align 4
  %v2_98c8 = add i32 %v1_98c8, %stack_var_-60.0
  %v3_98c8 = inttoptr i32 %v2_98c8 to i32*
  %v4_98c8 = load i32, i32* %v3_98c8, align 4
  %v1_98cc = inttoptr i32 %v0_98cc to %sockaddr*
  store i32 %v0_98cc, i32* %r1.global-to-local, align 4
  %v5_98d0 = call i32 @connect(i32 %v4_98c8, %sockaddr* %v1_98cc, i32 16)
  %v1_98dc = add i32 %stack_var_-60.0, 4
  %v1_98e0 = load i32, i32* @r7, align 4
  %v9_98e0 = icmp eq i32 %v1_9814, %v1_98e0
  %v0_98e8 = load i32, i32* %r5.global-to-local, align 4
  %v1_98e8 = add i32 %v0_98e8, 24
  store i32 %v1_98e8, i32* %r5.global-to-local, align 4
  br i1 %v9_98e0, label %dec_label_pc_9964.preheader, label %dec_label_pc_98f0

dec_label_pc_98f0:                                ; preds = %dec_label_pc_98c0, %dec_label_pc_97c0
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_97c0 ], [ %v1_98dc, %dec_label_pc_98c0 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_97c0 ], [ %v1_9814, %dec_label_pc_98c0 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_98fc = call i32* @calloc(i32 65535, i32 1)
  %v3_98fc = ptrtoint i32* %v2_98fc to i32
  store i32 %v3_972c, i32* %r1.global-to-local, align 4
  %v2_9910 = load i32, i32* @sl, align 4
  %v3_9910 = add i32 %v2_9910, %stack_var_-60.0
  %v4_9910 = inttoptr i32 %v3_9910 to i32*
  store i32 %v3_98fc, i32* %v4_9910, align 4
  br i1 %v3_990c, label %dec_label_pc_9918, label %dec_label_pc_9800

dec_label_pc_9918:                                ; preds = %dec_label_pc_98f0
  %v0_9918 = call i32 @function_f468()
  %v1_9918 = trunc i32 %v0_9918 to i8
  %v4_991c = sdiv i32 %v0_9918, 256
  %v1_9920 = trunc i32 %v4_991c to i8
  %v2_9920 = load i32, i32* %r5.global-to-local, align 4
  %v3_9920 = add i32 %v2_9920, 3
  %v4_9920 = inttoptr i32 %v3_9920 to i8*
  store i8 %v1_9920, i8* %v4_9920, align 1
  %v3_9924 = load i32, i32* %r5.global-to-local, align 4
  %v4_9924 = add i32 %v3_9924, 2
  %v5_9924 = inttoptr i32 %v4_9924 to i8*
  store i8 %v1_9918, i8* %v5_9924, align 1
  br label %dec_label_pc_980c

dec_label_pc_992c:                                ; preds = %dec_label_pc_9964.loopexit, %dec_label_pc_9964.preheader.thread, %dec_label_pc_9964.preheader, %dec_label_pc_9968.loopexit, %dec_label_pc_992c
  br label %dec_label_pc_992c

dec_label_pc_9930:                                ; preds = %dec_label_pc_9930.lr.ph, %dec_label_pc_9968.loopexit
  %v0_9930 = load i32, i32* @r8, align 4
  %v2_9930 = icmp eq i32 %v0_9930, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_9930, label %dec_label_pc_9938, label %dec_label_pc_9978

dec_label_pc_9938:                                ; preds = %dec_label_pc_9930
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9940

dec_label_pc_9940:                                ; preds = %dec_label_pc_9940, %dec_label_pc_9938
  %v0_9948 = phi i32 [ %v1_9948, %dec_label_pc_9940 ], [ 0, %dec_label_pc_9938 ]
  %v0_9940 = phi i32 [ %v1_995c, %dec_label_pc_9940 ], [ 0, %dec_label_pc_9938 ]
  %v1_9940 = load i32, i32* @sb, align 4
  %v2_9940 = add i32 %v1_9940, %v0_9940
  %v3_9940 = inttoptr i32 %v2_9940 to i32*
  %v4_9940 = load i32, i32* %v3_9940, align 4
  %v1_9944 = load i32, i32* @sl, align 4
  %v2_9944 = add i32 %v1_9944, %v0_9940
  %v3_9944 = inttoptr i32 %v2_9944 to i32*
  %v4_9944 = load i32, i32* %v3_9944, align 4
  store i32 %v4_9944, i32* %r1.global-to-local, align 4
  %v1_9948 = add i32 %v0_9948, 1
  store i32 %v1_9948, i32* %r5.global-to-local, align 4
  %v0_994c = load i32, i32* @r6, align 4
  %v4_9954 = inttoptr i32 %v4_9944 to i32*
  %v5_9954 = call i32 @send(i32 %v4_9940, i32* %v4_9954, i32 %v0_994c, i32 16384)
  %v1_9958 = load i32, i32* @r7, align 4
  %v9_9958 = icmp eq i32 %v1_9948, %v1_9958
  %v0_995c = load i32, i32* %r4.global-to-local, align 4
  %v1_995c = add i32 %v0_995c, 4
  store i32 %v1_995c, i32* %r4.global-to-local, align 4
  br i1 %v9_9958, label %dec_label_pc_9964.loopexit, label %dec_label_pc_9940

dec_label_pc_9964.loopexit:                       ; preds = %dec_label_pc_9940
  %tmp4447 = icmp slt i32 %v1_9948, 1
  br i1 %tmp4447, label %dec_label_pc_992c, label %dec_label_pc_9930.lr.ph

dec_label_pc_9930.lr.ph:                          ; preds = %dec_label_pc_9964.preheader, %dec_label_pc_9964.loopexit
  br label %dec_label_pc_9930

dec_label_pc_9968.loopexit:                       ; preds = %dec_label_pc_9980
  %tmp44 = icmp slt i32 %v0_99a8, 1
  br i1 %tmp44, label %dec_label_pc_992c, label %dec_label_pc_9930

dec_label_pc_9970:                                ; preds = %dec_label_pc_980c
  store i32 %v3_96d4, i32* %r4.global-to-local, align 4
  store i32 %v6_96d4, i32* %r5.global-to-local, align 4
  store i32 %v24_96d4, i32* %fp.global-to-local, align 4
  ret i32 -1

dec_label_pc_9978:                                ; preds = %dec_label_pc_9930
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_9980

dec_label_pc_9980:                                ; preds = %dec_label_pc_9980, %dec_label_pc_9978
  %v0_9980 = phi i32 [ %v1_99ac, %dec_label_pc_9980 ], [ 0, %dec_label_pc_9978 ]
  %v1_9980 = load i32, i32* @sl, align 4
  %v2_9980 = add i32 %v1_9980, %v0_9980
  %v3_9980 = inttoptr i32 %v2_9980 to i32*
  %v4_9980 = load i32, i32* %v3_9980, align 4
  store i32 %v4_9980, i32* @r4, align 4
  %v0_9984 = load i32, i32* @r6, align 4
  store i32 %v0_9984, i32* @r1, align 4
  %v1_998c = inttoptr i32 %v4_9980 to i8*
  %v2_998c = call i32 @function_f5e8(i8* %v1_998c)
  %v0_9990 = load i32, i32* @r5, align 4
  %v1_9990 = add i32 %v0_9990, 1
  store i32 %v1_9990, i32* @r5, align 4
  %v0_9994 = load i32, i32* @fp, align 4
  %v1_9994 = load i32, i32* @sb, align 4
  %v2_9994 = add i32 %v1_9994, %v0_9994
  %v3_9994 = inttoptr i32 %v2_9994 to i32*
  %v4_9994 = load i32, i32* %v3_9994, align 4
  %v0_9998 = load i32, i32* @r4, align 4
  store i32 %v0_9998, i32* %r1.global-to-local, align 4
  %v0_999c = load i32, i32* @r6, align 4
  %v4_99a4 = inttoptr i32 %v0_9998 to i32*
  %v5_99a4 = call i32 @send(i32 %v4_9994, i32* %v4_99a4, i32 %v0_999c, i32 16384)
  %v0_99a8 = load i32, i32* @r5, align 4
  %v1_99a8 = load i32, i32* @r7, align 4
  %v9_99a8 = icmp eq i32 %v0_99a8, %v1_99a8
  %v0_99ac = load i32, i32* @fp, align 4
  %v1_99ac = add i32 %v0_99ac, 4
  store i32 %v1_99ac, i32* @fp, align 4
  br i1 %v9_99a8, label %dec_label_pc_9968.loopexit, label %dec_label_pc_9980

; uselistorder directives
  uselistorder i32 %v1_99ac, { 1, 0 }
  uselistorder i32 %v0_99a8, { 1, 0 }
  uselistorder i32 %v1_995c, { 1, 0 }
  uselistorder i32 %v1_9948, { 2, 0, 3, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 4, 1, 3 }
  uselistorder i32 %v8_989c, { 1, 2, 0 }
  uselistorder i32 %v3_9874, { 1, 2, 0, 3 }
  uselistorder i32 %v3_9824, { 1, 2, 0 }
  uselistorder i32 %v1_9814, { 1, 2, 0 }
  uselistorder i32 %v3_977c, { 0, 2, 1 }
  uselistorder i32 %v3_972c, { 0, 2, 1 }
  uselistorder i32 %v1_96d8, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 4, 5, 2, 6, 3, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 16, 17, 3, 4, 5, 6, 7, 8, 14, 15, 18, 19, 10, 9, 11, 13, 12, 0 }
  uselistorder label %dec_label_pc_9930.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_9930, { 1, 0 }
  uselistorder label %dec_label_pc_992c, { 3, 0, 4, 2, 1 }
  uselistorder label %dec_label_pc_98c0, { 1, 0 }
  uselistorder label %dec_label_pc_97b8, { 1, 0 }
}

define i32 @function_99bc(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_99bc:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint %sockaddr* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v3_99bc = load i32, i32* @r4, align 4
  %v6_99bc = load i32, i32* @r5, align 4
  %v24_99bc = load i32, i32* @fp, align 4
  %v1_99c0 = urem i32 %arg1, 256
  store i32 %v1_99c0, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_99d8 = urem i32 %arg3, 256
  store i32 %v1_99d8, i32* @r4, align 4
  %v2_99dc = call i32* @calloc(i32 %v1_99c0, i32 4)
  %v4_99dc = ptrtoint i32* %v2_99dc to i32
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v4_99dc, i32* @sl, align 4
  %v0_99e8 = load i32, i32* @r7, align 4
  %v2_99ec = call i32* @calloc(i32 %v0_99e8, i32 4)
  %v3_99ec = ptrtoint i32* %v2_99ec to i32
  store i32 65535, i32* @r5, align 4
  %v0_99f8 = load i32, i32* @r6, align 4
  store i32 %v0_99f8, i32* %r1.global-to-local, align 4
  store i32 %v3_99ec, i32* @sb, align 4
  %v0_9a08 = load i32, i32* @r4, align 4
  %v4_9a0c = inttoptr i32 %v0_99f8 to i32*
  %v5_9a0c = call i32 @function_92dc(i32 %v0_9a08, i32* %v4_9a0c, i32 7, i32 65535)
  %v3_9a14 = urem i32 %v5_9a0c, 65536
  %v0_9a18 = load i32, i32* @r6, align 4
  store i32 %v0_9a18, i32* %r1.global-to-local, align 4
  %v0_9a20 = load i32, i32* @r5, align 4
  %v0_9a24 = load i32, i32* @r4, align 4
  %v5_9a2c = inttoptr i32 %v0_9a18 to i32*
  %v6_9a2c = call i32 @function_92dc(i32 %v0_9a24, i32* %v5_9a2c, i32 6, i32 %v0_9a20)
  %v0_9a30 = load i32, i32* @r6, align 4
  store i32 %v0_9a30, i32* %r1.global-to-local, align 4
  %v3_9a34 = mul i32 %v6_9a2c, 65536
  store i32 %v3_9a34, i32* %fp.global-to-local, align 4
  %v0_9a40 = load i32, i32* @r4, align 4
  %v4_9a44 = inttoptr i32 %v0_9a30 to i32*
  %v5_9a44 = call i32 @function_92dc(i32 %v0_9a40, i32* %v4_9a44, i32 0, i32 1024)
  %v0_9a50 = load i32, i32* @r6, align 4
  store i32 %v0_9a50, i32* %r1.global-to-local, align 4
  %v0_9a54 = load i32, i32* @r4, align 4
  %v3_9a5c = urem i32 %v5_9a44, 65536
  store i32 %v3_9a5c, i32* @r6, align 4
  %v4_9a60 = inttoptr i32 %v0_9a50 to i32*
  %v5_9a60 = call i32 @function_92dc(i32 %v0_9a54, i32* %v4_9a60, i32 1, i32 1)
  %v0_9a64 = load i32, i32* %fp.global-to-local, align 4
  %v3_9a64 = udiv i32 %v0_9a64, 65536
  store i32 %v3_9a64, i32* %r4.global-to-local, align 4
  %v1_9a6c = load i32, i32* @r5, align 4
  %v9_9a6c = icmp eq i32 %v3_9a64, %v1_9a6c
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_9a6c, label %dec_label_pc_9a94, label %bb

bb:                                               ; preds = %dec_label_pc_99bc
  %v2_9a80 = mul nuw nsw i32 %v3_9a64, 256
  %v4_9a84 = and i32 %v2_9a80, 65280
  %v1_9a88 = urem i32 %v5_9a60, 256
  store i32 %v1_9a88, i32* @r8, align 4
  %v5_9a8c = udiv i32 %v0_9a64, 16777216
  %v6_9a8c = or i32 %v4_9a84, %v5_9a8c
  br label %dec_label_pc_9aa0

dec_label_pc_9a94:                                ; preds = %dec_label_pc_99bc
  %v1_9a887 = urem i32 %v5_9a60, 256
  store i32 %v1_9a887, i32* @r8, align 4
  %v0_9a94 = call i32 @function_f468()
  %v3_9a9c = urem i32 %v0_9a94, 65536
  br label %dec_label_pc_9aa0

dec_label_pc_9aa0:                                ; preds = %bb, %dec_label_pc_9a94
  %storemerge17 = phi i32 [ %v6_9a8c, %bb ], [ %v3_9a9c, %dec_label_pc_9a94 ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_9aa0 = load i32, i32* @r7, align 4
  %tmp42 = icmp slt i32 %v0_9aa0, 1
  br i1 %tmp42, label %dec_label_pc_9c4c.preheader.thread, label %dec_label_pc_9aa8

dec_label_pc_9c4c.preheader.thread:               ; preds = %dec_label_pc_9aa0
  br label %dec_label_pc_9c14

dec_label_pc_9c4c.preheader:                      ; preds = %dec_label_pc_9ba8
  %tmp444749 = icmp slt i32 %v1_9afc, 1
  br i1 %tmp444749, label %dec_label_pc_9c14, label %dec_label_pc_9c18.lr.ph

dec_label_pc_9aa8:                                ; preds = %dec_label_pc_9aa0
  store i32 %v3_9a14, i32* %r1.global-to-local, align 4
  %v3_9aac = udiv i32 %v5_9a0c, 256
  %v5_9ab8 = trunc i32 %v3_9aac to i8
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %v3_9ad0 = udiv i32 %v5_9a0c, 65536
  %v4_9ae0 = trunc i32 %v3_9ad0 to i8
  store i8 %v4_9ae0, i8* %stack_var_-80, align 1
  %v3_9bf4 = icmp eq i32 %v3_9a14, 65535
  %v2_9b18 = ptrtoint i32* %stack_var_-52 to i32
  %tmp43 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_9bd8

dec_label_pc_9ae8:                                ; preds = %dec_label_pc_9bd8
  %v2_9ae8 = load i8, i8* %stack_var_-80, align 1
  %v3_9ae8 = sext i8 %v2_9ae8 to i32
  store i32 %v3_9ae8, i32* %r1.global-to-local, align 4
  %v2_9aec = load i32, i32* %r5.global-to-local, align 4
  %v3_9aec = add i32 %v2_9aec, 2
  %v4_9aec = inttoptr i32 %v3_9aec to i8*
  store i8 %v5_9ab8, i8* %v4_9aec, align 1
  %v0_9af0 = load i32, i32* %r1.global-to-local, align 4
  %v1_9af0 = trunc i32 %v0_9af0 to i8
  %v2_9af0 = load i32, i32* %r5.global-to-local, align 4
  %v3_9af0 = add i32 %v2_9af0, 3
  %v4_9af0 = inttoptr i32 %v3_9af0 to i8*
  store i8 %v1_9af0, i8* %v4_9af0, align 1
  br label %dec_label_pc_9af4

dec_label_pc_9af4:                                ; preds = %dec_label_pc_9c00, %dec_label_pc_9ae8
  %v1_9afc = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_9b0c = call i32 @socket(i32 2, i32 0, i32 0)
  %v7_9b14 = icmp eq i32 %v3_9b0c, -1
  store i32 %v2_9b18, i32* %r1.global-to-local, align 4
  %v2_9b24 = load i32, i32* @sb, align 4
  %v3_9b24 = add i32 %v2_9b24, %stack_var_-60.0
  %v4_9b24 = inttoptr i32 %v3_9b24 to i32*
  store i32 %v3_9b0c, i32* %v4_9b24, align 4
  br i1 %v7_9b14, label %dec_label_pc_9c58, label %dec_label_pc_9b2c

dec_label_pc_9b2c:                                ; preds = %dec_label_pc_9af4
  store i32 2, i32* %stack_var_-52, align 4
  %v5_9b4c = call i32 @bind(i32 %v3_9b0c, %sockaddr* %tmp43, i32 16)
  %v0_9b50 = load i32, i32* %r5.global-to-local, align 4
  %v1_9b50 = add i32 %v0_9b50, 20
  %v2_9b50 = inttoptr i32 %v1_9b50 to i8*
  %v3_9b50 = load i8, i8* %v2_9b50, align 1
  %tmp53 = icmp ugt i8 %v3_9b50, 31
  br i1 %tmp53, label %dec_label_pc_9ba8, label %dec_label_pc_9b5c

dec_label_pc_9b5c:                                ; preds = %dec_label_pc_9b2c
  %v1_9b5c = add i32 %v0_9b50, 16
  %v2_9b5c = inttoptr i32 %v1_9b5c to i32*
  %v3_9b5c = load i32, i32* %v2_9b5c, align 4
  store i32 %v3_9b5c, i32* %r4.global-to-local, align 4
  %v0_9b60 = call i32 @function_f468()
  %v1_9b68 = and i32 %v3_9b5c, 65280
  %v3_9b70 = mul i32 %v3_9b5c, 16777216
  %v4_9b74 = mul nuw nsw i32 %v1_9b68, 256
  %v5_9b74 = or i32 %v4_9b74, %v3_9b70
  store i32 %v5_9b74, i32* %r1.global-to-local, align 4
  %v0_9b7c = load i32, i32* %r5.global-to-local, align 4
  %v1_9b7c = add i32 %v0_9b7c, 20
  %v2_9b7c = inttoptr i32 %v1_9b7c to i8*
  %v3_9b7c = load i8, i8* %v2_9b7c, align 1
  %v4_9b7c = zext i8 %v3_9b7c to i32
  %v2_9b80 = call i32 @llvm.bswap.i32(i32 %v3_9b5c)
  %v7_9b84 = lshr i32 %v0_9b60, %v4_9b7c
  %v8_9b84 = add i32 %v7_9b84, %v2_9b80
  %v3_9b90 = mul i32 %v8_9b84, 16777216
  %v1_9b94 = and i32 %v8_9b84, 65280
  %v4_9b98 = mul nuw nsw i32 %v1_9b94, 256
  %v5_9b98 = or i32 %v4_9b98, %v3_9b90
  store i32 %v5_9b98, i32* %r1.global-to-local, align 4
  %v2_9ba0 = call i32 @llvm.bswap.i32(i32 %v8_9b84)
  %v2_9ba4 = add i32 %v0_9b7c, 4
  %v3_9ba4 = inttoptr i32 %v2_9ba4 to i32*
  store i32 %v2_9ba0, i32* %v3_9ba4, align 4
  %v0_9bb4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_9ba8

dec_label_pc_9ba8:                                ; preds = %dec_label_pc_9b2c, %dec_label_pc_9b5c
  %v0_9bb4 = phi i32 [ %v0_9b50, %dec_label_pc_9b2c ], [ %v0_9bb4.pre, %dec_label_pc_9b5c ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_9bb0 = load i32, i32* @sb, align 4
  %v2_9bb0 = add i32 %v1_9bb0, %stack_var_-60.0
  %v3_9bb0 = inttoptr i32 %v2_9bb0 to i32*
  %v4_9bb0 = load i32, i32* %v3_9bb0, align 4
  %v1_9bb4 = inttoptr i32 %v0_9bb4 to %sockaddr*
  store i32 %v0_9bb4, i32* %r1.global-to-local, align 4
  %v5_9bb8 = call i32 @connect(i32 %v4_9bb0, %sockaddr* %v1_9bb4, i32 16)
  %v1_9bc4 = add i32 %stack_var_-60.0, 4
  %v1_9bc8 = load i32, i32* @r7, align 4
  %v9_9bc8 = icmp eq i32 %v1_9afc, %v1_9bc8
  %v0_9bd0 = load i32, i32* %r5.global-to-local, align 4
  %v1_9bd0 = add i32 %v0_9bd0, 24
  store i32 %v1_9bd0, i32* %r5.global-to-local, align 4
  br i1 %v9_9bc8, label %dec_label_pc_9c4c.preheader, label %dec_label_pc_9bd8

dec_label_pc_9bd8:                                ; preds = %dec_label_pc_9ba8, %dec_label_pc_9aa8
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_9aa8 ], [ %v1_9bc4, %dec_label_pc_9ba8 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_9aa8 ], [ %v1_9afc, %dec_label_pc_9ba8 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_9be4 = call i32* @calloc(i32 65535, i32 1)
  %v3_9be4 = ptrtoint i32* %v2_9be4 to i32
  store i32 %v3_9a14, i32* %r1.global-to-local, align 4
  %v2_9bf8 = load i32, i32* @sl, align 4
  %v3_9bf8 = add i32 %v2_9bf8, %stack_var_-60.0
  %v4_9bf8 = inttoptr i32 %v3_9bf8 to i32*
  store i32 %v3_9be4, i32* %v4_9bf8, align 4
  br i1 %v3_9bf4, label %dec_label_pc_9c00, label %dec_label_pc_9ae8

dec_label_pc_9c00:                                ; preds = %dec_label_pc_9bd8
  %v0_9c00 = call i32 @function_f468()
  %v1_9c00 = trunc i32 %v0_9c00 to i8
  %v4_9c04 = sdiv i32 %v0_9c00, 256
  %v1_9c08 = trunc i32 %v4_9c04 to i8
  %v2_9c08 = load i32, i32* %r5.global-to-local, align 4
  %v3_9c08 = add i32 %v2_9c08, 3
  %v4_9c08 = inttoptr i32 %v3_9c08 to i8*
  store i8 %v1_9c08, i8* %v4_9c08, align 1
  %v3_9c0c = load i32, i32* %r5.global-to-local, align 4
  %v4_9c0c = add i32 %v3_9c0c, 2
  %v5_9c0c = inttoptr i32 %v4_9c0c to i8*
  store i8 %v1_9c00, i8* %v5_9c0c, align 1
  br label %dec_label_pc_9af4

dec_label_pc_9c14:                                ; preds = %dec_label_pc_9c4c.loopexit, %dec_label_pc_9c4c.preheader.thread, %dec_label_pc_9c4c.preheader, %dec_label_pc_9c50.loopexit, %dec_label_pc_9c14
  br label %dec_label_pc_9c14

dec_label_pc_9c18:                                ; preds = %dec_label_pc_9c18.lr.ph, %dec_label_pc_9c50.loopexit
  %v0_9c18 = load i32, i32* @r8, align 4
  %v2_9c18 = icmp eq i32 %v0_9c18, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_9c18, label %dec_label_pc_9c20, label %dec_label_pc_9c60

dec_label_pc_9c20:                                ; preds = %dec_label_pc_9c18
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9c28

dec_label_pc_9c28:                                ; preds = %dec_label_pc_9c28, %dec_label_pc_9c20
  %v0_9c30 = phi i32 [ %v1_9c30, %dec_label_pc_9c28 ], [ 0, %dec_label_pc_9c20 ]
  %v0_9c28 = phi i32 [ %v1_9c44, %dec_label_pc_9c28 ], [ 0, %dec_label_pc_9c20 ]
  %v1_9c28 = load i32, i32* @sb, align 4
  %v2_9c28 = add i32 %v1_9c28, %v0_9c28
  %v3_9c28 = inttoptr i32 %v2_9c28 to i32*
  %v4_9c28 = load i32, i32* %v3_9c28, align 4
  %v1_9c2c = load i32, i32* @sl, align 4
  %v2_9c2c = add i32 %v1_9c2c, %v0_9c28
  %v3_9c2c = inttoptr i32 %v2_9c2c to i32*
  %v4_9c2c = load i32, i32* %v3_9c2c, align 4
  store i32 %v4_9c2c, i32* %r1.global-to-local, align 4
  %v1_9c30 = add i32 %v0_9c30, 1
  store i32 %v1_9c30, i32* %r5.global-to-local, align 4
  %v0_9c34 = load i32, i32* @r6, align 4
  %v4_9c3c = inttoptr i32 %v4_9c2c to i32*
  %v5_9c3c = call i32 @send(i32 %v4_9c28, i32* %v4_9c3c, i32 %v0_9c34, i32 16384)
  %v1_9c40 = load i32, i32* @r7, align 4
  %v9_9c40 = icmp eq i32 %v1_9c30, %v1_9c40
  %v0_9c44 = load i32, i32* %r4.global-to-local, align 4
  %v1_9c44 = add i32 %v0_9c44, 4
  store i32 %v1_9c44, i32* %r4.global-to-local, align 4
  br i1 %v9_9c40, label %dec_label_pc_9c4c.loopexit, label %dec_label_pc_9c28

dec_label_pc_9c4c.loopexit:                       ; preds = %dec_label_pc_9c28
  %tmp4447 = icmp slt i32 %v1_9c30, 1
  br i1 %tmp4447, label %dec_label_pc_9c14, label %dec_label_pc_9c18.lr.ph

dec_label_pc_9c18.lr.ph:                          ; preds = %dec_label_pc_9c4c.preheader, %dec_label_pc_9c4c.loopexit
  br label %dec_label_pc_9c18

dec_label_pc_9c50.loopexit:                       ; preds = %dec_label_pc_9c68
  %tmp44 = icmp slt i32 %v0_9c90, 1
  br i1 %tmp44, label %dec_label_pc_9c14, label %dec_label_pc_9c18

dec_label_pc_9c58:                                ; preds = %dec_label_pc_9af4
  store i32 %v3_99bc, i32* %r4.global-to-local, align 4
  store i32 %v6_99bc, i32* %r5.global-to-local, align 4
  store i32 %v24_99bc, i32* %fp.global-to-local, align 4
  ret i32 -1

dec_label_pc_9c60:                                ; preds = %dec_label_pc_9c18
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_9c68

dec_label_pc_9c68:                                ; preds = %dec_label_pc_9c68, %dec_label_pc_9c60
  %v0_9c68 = phi i32 [ %v1_9c94, %dec_label_pc_9c68 ], [ 0, %dec_label_pc_9c60 ]
  %v1_9c68 = load i32, i32* @sl, align 4
  %v2_9c68 = add i32 %v1_9c68, %v0_9c68
  %v3_9c68 = inttoptr i32 %v2_9c68 to i32*
  %v4_9c68 = load i32, i32* %v3_9c68, align 4
  store i32 %v4_9c68, i32* @r4, align 4
  %v0_9c6c = load i32, i32* @r6, align 4
  store i32 %v0_9c6c, i32* @r1, align 4
  %v1_9c74 = inttoptr i32 %v4_9c68 to i8*
  %v2_9c74 = call i32 @function_f5e8(i8* %v1_9c74)
  %v0_9c78 = load i32, i32* @r5, align 4
  %v1_9c78 = add i32 %v0_9c78, 1
  store i32 %v1_9c78, i32* @r5, align 4
  %v0_9c7c = load i32, i32* @fp, align 4
  %v1_9c7c = load i32, i32* @sb, align 4
  %v2_9c7c = add i32 %v1_9c7c, %v0_9c7c
  %v3_9c7c = inttoptr i32 %v2_9c7c to i32*
  %v4_9c7c = load i32, i32* %v3_9c7c, align 4
  %v0_9c80 = load i32, i32* @r4, align 4
  store i32 %v0_9c80, i32* %r1.global-to-local, align 4
  %v0_9c84 = load i32, i32* @r6, align 4
  %v4_9c8c = inttoptr i32 %v0_9c80 to i32*
  %v5_9c8c = call i32 @send(i32 %v4_9c7c, i32* %v4_9c8c, i32 %v0_9c84, i32 16384)
  %v0_9c90 = load i32, i32* @r5, align 4
  %v1_9c90 = load i32, i32* @r7, align 4
  %v9_9c90 = icmp eq i32 %v0_9c90, %v1_9c90
  %v0_9c94 = load i32, i32* @fp, align 4
  %v1_9c94 = add i32 %v0_9c94, 4
  store i32 %v1_9c94, i32* @fp, align 4
  br i1 %v9_9c90, label %dec_label_pc_9c50.loopexit, label %dec_label_pc_9c68

; uselistorder directives
  uselistorder i32 %v1_9c94, { 1, 0 }
  uselistorder i32 %v0_9c90, { 1, 0 }
  uselistorder i32 %v1_9c44, { 1, 0 }
  uselistorder i32 %v1_9c30, { 2, 0, 3, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 4, 1, 3 }
  uselistorder i32 %v8_9b84, { 1, 2, 0 }
  uselistorder i32 %v3_9b5c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_9b0c, { 1, 2, 0 }
  uselistorder i32 %v1_9afc, { 1, 2, 0 }
  uselistorder i32 %v3_9a64, { 0, 2, 1 }
  uselistorder i32 %v3_9a14, { 0, 2, 1 }
  uselistorder i32 %v1_99c0, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 4, 5, 2, 6, 3, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_9c18.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_9c18, { 1, 0 }
  uselistorder label %dec_label_pc_9c14, { 3, 0, 4, 2, 1 }
  uselistorder label %dec_label_pc_9ba8, { 1, 0 }
  uselistorder label %dec_label_pc_9aa0, { 1, 0 }
}

define i32 @function_9ca4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9ca4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_9ca4 = load i32, i32* @r4, align 4
  %v6_9ca4 = load i32, i32* @r5, align 4
  %v9_9ca4 = load i32, i32* @r6, align 4
  %v12_9ca4 = load i32, i32* @r7, align 4
  %v18_9ca4 = load i32, i32* @sb, align 4
  %v24_9ca4 = load i32, i32* @fp, align 4
  %v1_9ca8 = urem i32 %arg1, 256
  store i32 %v1_9ca8, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_9ca8, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9cc0 = urem i32 %arg3, 256
  store i32 %v1_9cc0, i32* @r4, align 4
  %v2_9cc4 = call i32* @calloc(i32 %v1_9ca8, i32 4)
  %v4_9cc4 = ptrtoint i32* %v2_9cc4 to i32
  %v0_9cc8 = load i32, i32* @r5, align 4
  store i32 %v0_9cc8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9cd8 = load i32, i32* @r4, align 4
  store i32 %v0_9cd8, i32* %r0.global-to-local, align 4
  %v5_9cdc = inttoptr i32 %v0_9cc8 to i32*
  %v6_9cdc = call i32 @function_92dc(i32 %v0_9cd8, i32* %v5_9cdc, i32 2, i32 0)
  %v1_9ce8 = urem i32 %v6_9cdc, 256
  store i32 %v1_9ce8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9cf4 = load i32, i32* @r5, align 4
  store i32 %v0_9cf4, i32* %r1.global-to-local, align 4
  %v0_9cf8 = load i32, i32* @r4, align 4
  store i32 %v0_9cf8, i32* %r0.global-to-local, align 4
  %v5_9cfc = trunc i32 %v6_9cdc to i8
  %v6_9d00 = inttoptr i32 %v0_9cf4 to i32*
  %v7_9d00 = call i32 @function_92dc(i32 %v0_9cf8, i32* %v6_9d00, i32 3, i32 65535)
  %v0_9d04 = load i32, i32* @r5, align 4
  store i32 %v0_9d04, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9d00, i32* %fp.global-to-local, align 4
  %v0_9d14 = load i32, i32* @r4, align 4
  store i32 %v0_9d14, i32* %r0.global-to-local, align 4
  %v4_9d18 = inttoptr i32 %v0_9d04 to i32*
  %v5_9d18 = call i32 @function_92dc(i32 %v0_9d14, i32* %v4_9d18, i32 4, i32 64)
  %v1_9d20 = urem i32 %v5_9d18, 256
  store i32 %v1_9d20, i32* %ip.global-to-local, align 4
  %v0_9d24 = load i32, i32* @r5, align 4
  store i32 %v0_9d24, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9d30 = load i32, i32* @r4, align 4
  store i32 %v0_9d30, i32* %r0.global-to-local, align 4
  %v5_9d34 = trunc i32 %v5_9d18 to i8
  %v6_9d38 = inttoptr i32 %v0_9d24 to i32*
  %v7_9d38 = call i32 @function_92dc(i32 %v0_9d30, i32* %v6_9d38, i32 5, i32 0)
  %v1_9d44 = urem i32 %v7_9d38, 256
  store i32 %v1_9d44, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9d50 = load i32, i32* @r5, align 4
  store i32 %v0_9d50, i32* %r1.global-to-local, align 4
  %v0_9d54 = load i32, i32* @r4, align 4
  store i32 %v0_9d54, i32* %r0.global-to-local, align 4
  %v5_9d5c = inttoptr i32 %v0_9d50 to i32*
  %v6_9d5c = call i32 @function_92dc(i32 %v0_9d54, i32* %v5_9d5c, i32 6, i32 65535)
  %v0_9d64 = load i32, i32* @r5, align 4
  store i32 %v0_9d64, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9d5c, i32* @r7, align 4
  %v0_9d74 = load i32, i32* @r4, align 4
  store i32 %v0_9d74, i32* %r0.global-to-local, align 4
  %v4_9d78 = inttoptr i32 %v0_9d64 to i32*
  %v5_9d78 = call i32 @function_92dc(i32 %v0_9d74, i32* %v4_9d78, i32 7, i32 65535)
  %v0_9d7c = load i32, i32* @r5, align 4
  store i32 %v0_9d7c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9d78, i32* %sb.global-to-local, align 4
  %v0_9d8c = load i32, i32* @r4, align 4
  store i32 %v0_9d8c, i32* %r0.global-to-local, align 4
  %v4_9d90 = inttoptr i32 %v0_9d7c to i32*
  %v5_9d90 = call i32 @function_92dc(i32 %v0_9d8c, i32* %v4_9d90, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9d9c = load i32, i32* @r5, align 4
  store i32 %v0_9d9c, i32* %r1.global-to-local, align 4
  store i32 %v5_9d90, i32* @r6, align 4
  %v0_9da4 = load i32, i32* @r4, align 4
  store i32 %v0_9da4, i32* %r0.global-to-local, align 4
  %v4_9da8 = inttoptr i32 %v0_9d9c to i32*
  %v5_9da8 = call i32 @function_92dc(i32 %v0_9da4, i32* %v4_9da8, i32 1, i32 1)
  %v2_9db4 = load i32, i32* @global_var_1a40c.102, align 4
  store i32 %v2_9db4, i32* %r3.global-to-local, align 4
  %v1_9db8 = urem i32 %v5_9da8, 256
  store i32 %v1_9db8, i32* %ip.global-to-local, align 4
  %v0_9dbc = load i32, i32* @r5, align 4
  store i32 %v0_9dbc, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9dc4 = load i32, i32* @r4, align 4
  store i32 %v0_9dc4, i32* %r0.global-to-local, align 4
  %v5_9dcc = inttoptr i32 %v0_9dbc to i32*
  %v6_9dcc = call i32 @function_92dc(i32 %v0_9dc4, i32* %v5_9dcc, i32 25, i32 %v2_9db4)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_9de0 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_9de0, i32* %r0.global-to-local, align 4
  %v2_9de4 = icmp eq i32 %v3_9de0, -1
  store i1 %v2_9de4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9de4, label %dec_label_pc_a20c, label %dec_label_pc_9df0

dec_label_pc_9df0:                                ; preds = %dec_label_pc_9ca4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9df8 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9df8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_9e0c = call i32 @setsockopt(i32 %v3_9de0, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_9e0c, i32* %r0.global-to-local, align 4
  %v2_9e10 = icmp eq i32 %v7_9e0c, -1
  store i1 %v2_9e10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9e10, label %dec_label_pc_a204, label %dec_label_pc_9e18

dec_label_pc_9e18:                                ; preds = %dec_label_pc_9df0
  %v0_9e18 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_9e24 = urem i32 %v0_9e18, 65536
  store i32 %v3_9e24, i32* %r2.global-to-local, align 4
  %v3_9e28 = icmp ugt i32 %v3_9e24, 1459
  %v9_9e28 = icmp eq i32 %v3_9e24, 1460
  store i1 %v9_9e28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9e28, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_9e18
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_9e18, %bb
  %v0_9e30 = phi i32 [ %v3_9e24, %dec_label_pc_9e18 ], [ 1460, %bb ]
  %v0_9e34 = load i32, i32* @r7, align 4
  %v3_9e34 = mul i32 %v0_9e34, 65536
  store i32 %v3_9e34, i32* %r7.global-to-local, align 4
  %v3_9e38 = urem i32 %v0_9e34, 65536
  store i32 %v3_9e38, i32* %r3.global-to-local, align 4
  %v0_9e3c = load i32, i32* @sl, align 4
  %v2_9e3c = icmp eq i32 %v0_9e3c, 0
  store i1 %v2_9e3c, i1* %cpsr_z.global-to-local, align 1
  %v0_9e40 = load i32, i32* %fp.global-to-local, align 4
  %v3_9e40 = mul i32 %v0_9e40, 65536
  store i32 %v3_9e40, i32* %r0.global-to-local, align 4
  %v0_9e44 = load i32, i32* %sb.global-to-local, align 4
  %v3_9e44 = mul i32 %v0_9e44, 65536
  store i32 %v3_9e44, i32* %r5.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_9e3c, 1
  br i1 %tmp72, label %bb73, label %bb74

bb73:                                             ; preds = %bb71
  store i32 %v0_9e30, i32* %r3.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  %v5_9e6c = phi i32 [ %v3_9e38, %bb71 ], [ %v0_9e30, %bb73 ]
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9e54 = urem i32 %v0_9e40, 65536
  store i32 %v3_9e54, i32* %r2.global-to-local, align 4
  %v3_9e58 = urem i32 %v0_9e44, 65536
  store i32 %v3_9e58, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %tmp72, label %.thread, label %dec_label_pc_9e74

.thread:                                          ; preds = %bb74
  %v6_9e68 = add nsw i32 %v5_9e6c, 28
  store i32 %v6_9e68, i32* @fp, align 4
  %v6_9e6c = add nsw i32 %v5_9e6c, 8
  store i32 %v6_9e6c, i32* @sb, align 4
  br label %dec_label_pc_9fe8

dec_label_pc_9e74:                                ; preds = %bb74
  %v1_9e78 = add nuw nsw i32 %v0_9e30, 28
  store i32 %v1_9e78, i32* @fp, align 4
  %tmp75 = mul nuw nsw i32 %v1_9e78, 256
  %v1_9e84 = and i32 %tmp75, 65280
  %tmp76 = udiv i32 %v0_9e40, 256
  %v3_9e88 = urem i32 %tmp76, 256
  %v2_9e9c = icmp eq i32 %v1_9d44, 0
  store i1 %v2_9e9c, i1* %cpsr_z.global-to-local, align 1
  %v1_9ea0 = urem i32 %v0_9e40, 256
  %v1_9ea8 = add nuw nsw i32 %v0_9e30, 8
  store i32 %v1_9ea8, i32* @sb, align 4
  %v3_9eac = mul i32 %v1_9ea8, 65536
  store i32 %v3_9eac, i32* %r6.global-to-local, align 4
  %v1_9eb0 = urem i32 %v0_9e34, 256
  %v1_9eb4 = urem i32 %v0_9e44, 256
  store i32 %v1_9eb4, i32* %ip.global-to-local, align 4
  store i32 %v1_9e84, i32* %r3.global-to-local, align 4
  %tmp77 = mul nuw nsw i32 %v1_9ea8, 256
  %v4_9ec0 = mul nuw nsw i32 %v1_9ea0, 256
  %v5_9ec0 = or i32 %v4_9ec0, %v3_9e88
  store i32 %v5_9ec0, i32* %r0.global-to-local, align 4
  %v3_9ec4 = mul nuw nsw i32 %v1_9eb0, 256
  store i32 %v3_9ec4, i32* %r2.global-to-local, align 4
  %tmp78 = udiv i32 %v0_9e44, 256
  %v3_9ec8 = urem i32 %tmp78, 256
  %v1_9ecc = and i32 %tmp77, 65280
  store i32 %v1_9ecc, i32* %r1.global-to-local, align 4
  %tmp79 = udiv i32 %v1_9e78, 256
  %tmp80 = udiv i32 %v0_9e34, 256
  %v4_9ed4 = urem i32 %tmp80, 256
  %v5_9ed4 = or i32 %v4_9ed4, %v3_9ec4
  store i32 %v5_9ed4, i32* %r4.global-to-local, align 4
  %v5_9ed8 = trunc i32 %tmp79 to i8
  %v5_9edc = trunc i32 %tmp76 to i8
  %v4_9ee0 = mul nuw nsw i32 %v1_9eb4, 256
  %v5_9ee0 = or i32 %v4_9ee0, %v3_9ec8
  store i32 %v5_9ee0, i32* %r5.global-to-local, align 4
  %tmp81 = udiv i32 %v1_9ea8, 256
  %v4_9ee4 = urem i32 %tmp81, 256
  %v5_9ee4 = or i32 %v4_9ee4, %v1_9ecc
  store i32 %v5_9ee4, i32* %r7.global-to-local, align 4
  br i1 %v2_9e9c, label %dec_label_pc_9eec, label %dec_label_pc_a214

dec_label_pc_9eec:                                ; preds = %dec_label_pc_9e74
  %v3_9eec36 = udiv i32 %v1_9e84, 256
  store i32 %v3_9eec36, i32* %ip.global-to-local, align 4
  store i32 %v1_9ea0, i32* %r0.global-to-local, align 4
  store i32 %v1_9eb0, i32* %r1.global-to-local, align 4
  store i32 %v1_9eb4, i32* %r2.global-to-local, align 4
  %v3_9efc37 = udiv i32 %v1_9ecc, 256
  store i32 %v3_9efc37, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  %v4_9f60 = sext i8 %v5_9cfc to i32
  %v4_9fa0 = sext i8 %v5_9edc to i32
  %sext15 = mul i32 %v0_9e40, 16777216
  %v4_9fa4 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_9e34, 16777216
  %v4_9fbc = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_9ea8, 16777216
  %v4_9fc0 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_9e44, 16777216
  %v4_9fc4 = sdiv i32 %sext18, 16777216
  %v1_9fac = trunc i32 %v1_9e78 to i8
  %v1_9fcc = trunc i32 %v4_9fc0 to i8
  br label %dec_label_pc_9f18

dec_label_pc_9f18:                                ; preds = %dec_label_pc_9f18, %dec_label_pc_9eec
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9f24 = call i32* @calloc(i32 1510, i32 1)
  %v4_9f24 = ptrtoint i32* %v2_9f24 to i32
  store i32 %v4_9f24, i32* %r0.global-to-local, align 4
  store i32 %v4_9cc4, i32* %ip.global-to-local, align 4
  %v3_9f2c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9f2c, i32* %r2.global-to-local, align 4
  %v2_9f30 = load i32, i32* %r6.global-to-local, align 4
  %v5_9f30 = mul i32 %v2_9f30, 4
  %v6_9f30 = add i32 %v5_9f30, %v4_9cc4
  %v7_9f30 = inttoptr i32 %v6_9f30 to i32*
  store i32 %v4_9f24, i32* %v7_9f30, align 4
  %v0_9f34 = load i32, i32* %ip.global-to-local, align 4
  %v1_9f34 = load i32, i32* %r2.global-to-local, align 4
  %v4_9f34 = mul i32 %v1_9f34, 4
  %v5_9f34 = add i32 %v4_9f34, %v0_9f34
  %v6_9f34 = inttoptr i32 %v5_9f34 to i32*
  %v7_9f34 = load i32, i32* %v6_9f34, align 4
  store i32 %v7_9f34, i32* %r1.global-to-local, align 4
  %v1_9f38 = inttoptr i32 %v7_9f34 to i8*
  %v2_9f38 = load i8, i8* %v1_9f38, align 1
  %tmp = urem i8 %v2_9f38, 16
  %v1_9f3c = zext i8 %tmp to i32
  %v1_9f40 = or i32 %v1_9f3c, 64
  store i32 %v1_9f40, i32* %r3.global-to-local, align 4
  %v1_9f44 = trunc i32 %v1_9f40 to i8
  store i8 %v1_9f44, i8* %v1_9f38, align 1
  %v0_9f48 = load i32, i32* %r1.global-to-local, align 4
  %v1_9f48 = inttoptr i32 %v0_9f48 to i8*
  %v2_9f48 = load i8, i8* %v1_9f48, align 1
  %v3_9f48 = zext i8 %v2_9f48 to i32
  %v1_9f4c = and i32 %v3_9f48, 240
  %v1_9f50 = or i32 %v1_9f4c, 5
  store i32 %v1_9f50, i32* %r2.global-to-local, align 4
  %v3_9f58 = add i32 %v0_9f48, 9
  %v4_9f58 = inttoptr i32 %v3_9f58 to i8*
  store i8 17, i8* %v4_9f58, align 1
  %v0_9f5c = load i32, i32* %r2.global-to-local, align 4
  %v1_9f5c = trunc i32 %v0_9f5c to i8
  %v2_9f5c = load i32, i32* %r1.global-to-local, align 4
  %v3_9f5c = inttoptr i32 %v2_9f5c to i8*
  store i8 %v1_9f5c, i8* %v3_9f5c, align 1
  store i32 %v4_9f60, i32* %r0.global-to-local, align 4
  %v2_9f64 = load i32, i32* %r1.global-to-local, align 4
  %v3_9f64 = add i32 %v2_9f64, 1
  %v4_9f64 = inttoptr i32 %v3_9f64 to i8*
  store i8 %v5_9cfc, i8* %v4_9f64, align 1
  %v2_9f6c = load i32, i32* %r1.global-to-local, align 4
  %v3_9f6c = add i32 %v2_9f6c, 8
  %v4_9f6c = inttoptr i32 %v3_9f6c to i8*
  store i8 %v5_9d34, i8* %v4_9f6c, align 1
  %v3_9f70 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9f70, i32* %r2.global-to-local, align 4
  store i32 %v6_9dcc, i32* %ip.global-to-local, align 4
  %v3_9f78 = mul i32 %v3_9f70, 32
  store i32 %v3_9f78, i32* %r3.global-to-local, align 4
  %v1_9f7c = load i32, i32* %r1.global-to-local, align 4
  %v2_9f7c = add i32 %v1_9f7c, 12
  %v3_9f7c = inttoptr i32 %v2_9f7c to i32*
  store i32 %v6_9dcc, i32* %v3_9f7c, align 4
  %v0_9f80 = load i32, i32* %r3.global-to-local, align 4
  %v1_9f80 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_9f80, -8
  %v5_9f80 = add i32 %v0_9f80, %tmp83
  %v1_9f84 = load i32, i32* @r8, align 4
  %v2_9f84 = add i32 %v5_9f80, %v1_9f84
  store i32 %v2_9f84, i32* %r3.global-to-local, align 4
  %v1_9f88 = add i32 %v2_9f84, 16
  %v2_9f88 = inttoptr i32 %v1_9f88 to i32*
  %v3_9f88 = load i32, i32* %v2_9f88, align 4
  %v1_9f8c = load i32, i32* %r1.global-to-local, align 4
  %v2_9f8c = add i32 %v1_9f8c, 16
  %v3_9f8c = inttoptr i32 %v2_9f8c to i32*
  store i32 %v3_9f88, i32* %v3_9f8c, align 4
  %v0_9f94 = load i32, i32* %r2.global-to-local, align 4
  %v1_9f94 = add i32 %v0_9f94, 1
  store i32 %v1_9f94, i32* %r6.global-to-local, align 4
  %v2_9f98 = load i32, i32* %r1.global-to-local, align 4
  %v3_9f98 = add i32 %v2_9f98, 2
  %v4_9f98 = inttoptr i32 %v3_9f98 to i8*
  store i8 %v5_9ed8, i8* %v4_9f98, align 1
  store i32 %v4_9fa0, i32* %ip.global-to-local, align 4
  store i32 %v4_9fa4, i32* %r0.global-to-local, align 4
  %v0_9fa8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9fa8 = add i32 %v0_9fa8, 20
  store i32 %v1_9fa8, i32* %r3.global-to-local, align 4
  %v3_9fac = add i32 %v0_9fa8, 3
  %v4_9fac = inttoptr i32 %v3_9fac to i8*
  store i8 %v1_9fac, i8* %v4_9fac, align 1
  %v0_9fb0 = load i32, i32* %ip.global-to-local, align 4
  %v1_9fb0 = trunc i32 %v0_9fb0 to i8
  %v2_9fb0 = load i32, i32* %r1.global-to-local, align 4
  %v3_9fb0 = add i32 %v2_9fb0, 4
  %v4_9fb0 = inttoptr i32 %v3_9fb0 to i8*
  store i8 %v1_9fb0, i8* %v4_9fb0, align 1
  %v0_9fb4 = load i32, i32* %r0.global-to-local, align 4
  %v1_9fb4 = trunc i32 %v0_9fb4 to i8
  %v2_9fb4 = load i32, i32* %r1.global-to-local, align 4
  %v3_9fb4 = add i32 %v2_9fb4, 5
  %v4_9fb4 = inttoptr i32 %v3_9fb4 to i8*
  store i8 %v1_9fb4, i8* %v4_9fb4, align 1
  %v0_9fb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_9fb8 = trunc i32 %v0_9fb8 to i8
  %v2_9fb8 = load i32, i32* %r1.global-to-local, align 4
  %v3_9fb8 = add i32 %v2_9fb8, 20
  %v4_9fb8 = inttoptr i32 %v3_9fb8 to i8*
  store i8 %v1_9fb8, i8* %v4_9fb8, align 1
  store i32 %v4_9fbc, i32* %r2.global-to-local, align 4
  store i32 %v4_9fc0, i32* %r1.global-to-local, align 4
  store i32 %v4_9fc4, i32* %ip.global-to-local, align 4
  %v0_9fc8 = load i32, i32* %r6.global-to-local, align 4
  %v1_9fc8 = load i32, i32* @sl, align 4
  %v9_9fc8 = icmp eq i32 %v0_9fc8, %v1_9fc8
  store i1 %v9_9fc8, i1* %cpsr_z.global-to-local, align 1
  %v2_9fcc = load i32, i32* %r3.global-to-local, align 4
  %v3_9fcc = add i32 %v2_9fcc, 5
  %v4_9fcc = inttoptr i32 %v3_9fcc to i8*
  store i8 %v1_9fcc, i8* %v4_9fcc, align 1
  %v0_9fd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9fd0 = trunc i32 %v0_9fd0 to i8
  %v2_9fd0 = load i32, i32* %r3.global-to-local, align 4
  %v3_9fd0 = add i32 %v2_9fd0, 1
  %v4_9fd0 = inttoptr i32 %v3_9fd0 to i8*
  store i8 %v1_9fd0, i8* %v4_9fd0, align 1
  %v0_9fd4 = load i32, i32* %r5.global-to-local, align 4
  %v1_9fd4 = trunc i32 %v0_9fd4 to i8
  %v2_9fd4 = load i32, i32* %r3.global-to-local, align 4
  %v3_9fd4 = add i32 %v2_9fd4, 2
  %v4_9fd4 = inttoptr i32 %v3_9fd4 to i8*
  store i8 %v1_9fd4, i8* %v4_9fd4, align 1
  %v0_9fd8 = load i32, i32* %ip.global-to-local, align 4
  %v1_9fd8 = trunc i32 %v0_9fd8 to i8
  %v2_9fd8 = load i32, i32* %r3.global-to-local, align 4
  %v3_9fd8 = add i32 %v2_9fd8, 3
  %v4_9fd8 = inttoptr i32 %v3_9fd8 to i8*
  store i8 %v1_9fd8, i8* %v4_9fd8, align 1
  %v0_9fdc = load i32, i32* %r7.global-to-local, align 4
  %v1_9fdc = trunc i32 %v0_9fdc to i8
  %v2_9fdc = load i32, i32* %r3.global-to-local, align 4
  %v3_9fdc = add i32 %v2_9fdc, 4
  %v4_9fdc = inttoptr i32 %v3_9fdc to i8*
  store i8 %v1_9fdc, i8* %v4_9fdc, align 1
  %v0_9fe0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_9fe0, i32* %stack_var_-40, align 4
  %v5_9fe4 = icmp slt i32 %v0_9fc8, %v1_9fc8
  br i1 %v5_9fe4, label %dec_label_pc_9f18, label %dec_label_pc_9fe8

dec_label_pc_9fe8:                                ; preds = %dec_label_pc_a248, %dec_label_pc_9f18, %.thread
  %v0_9fe8 = load i32, i32* @sl, align 4
  %v2_9fe8 = icmp eq i32 %v0_9fe8, 0
  store i1 %v2_9fe8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a194 = icmp eq i32 %v3_9e54, 65535
  %v2_a060 = icmp eq i32 %v1_9db8, 0
  %v2_a028 = icmp eq i32 %v6_9dcc, -1
  br label %dec_label_pc_9ff0.outer

dec_label_pc_9ff0.outer:                          ; preds = %dec_label_pc_a110, %dec_label_pc_9fe8
  %v1_9ff0.ph.in = phi i32 [ %v1_a104, %dec_label_pc_a110 ], [ %v0_9fe8, %dec_label_pc_9fe8 ]
  %v0_9ff0.ph = phi i1 [ %v2_a110, %dec_label_pc_a110 ], [ %v2_9fe8, %dec_label_pc_9fe8 ]
  %v1_9ff0.ph = icmp slt i32 %v1_9ff0.ph.in, 0
  %v4_9ff0 = or i1 %v1_9ff0.ph, %v0_9ff0.ph
  br label %dec_label_pc_9ff0

dec_label_pc_9ff0:                                ; preds = %dec_label_pc_9ff0.outer, %dec_label_pc_9ff0
  br i1 %v4_9ff0, label %dec_label_pc_9ff0, label %dec_label_pc_9ff4

dec_label_pc_9ff4:                                ; preds = %dec_label_pc_9ff0
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_a000

dec_label_pc_a000:                                ; preds = %dec_label_pc_a068, %dec_label_pc_9ff4
  %v1_a014 = phi i32 [ %v1_a100, %dec_label_pc_a068 ], [ 0, %dec_label_pc_9ff4 ]
  %v5_a004 = mul i32 %v1_a014, 24
  %v1_a008 = load i32, i32* @r8, align 4
  %v2_a008 = add i32 %v1_a008, %v5_a004
  store i32 %v2_a008, i32* %r3.global-to-local, align 4
  store i32 %v4_9cc4, i32* %ip.global-to-local, align 4
  %v1_a010 = add i32 %v2_a008, 20
  %v2_a010 = inttoptr i32 %v1_a010 to i8*
  %v3_a010 = load i8, i8* %v2_a010, align 1
  %v4_a010 = zext i8 %v3_a010 to i32
  store i32 %v4_a010, i32* %r2.global-to-local, align 4
  %v4_a014 = mul i32 %v1_a014, 4
  %v5_a014 = add i32 %v4_a014, %v4_9cc4
  %v6_a014 = inttoptr i32 %v5_a014 to i32*
  %v7_a014 = load i32, i32* %v6_a014, align 4
  store i32 %v7_a014, i32* @r5, align 4
  %v7_a018 = icmp eq i8 %v3_a010, 31
  store i1 %v7_a018, i1* %cpsr_z.global-to-local, align 1
  %v1_a01c = add i32 %v7_a014, 20
  store i32 %v1_a01c, i32* @r6, align 4
  %tmp84 = icmp ult i8 %v3_a010, 32
  br i1 %tmp84, label %dec_label_pc_a11c, label %dec_label_pc_a024

dec_label_pc_a024:                                ; preds = %dec_label_pc_a000
  store i32 %v6_9dcc, i32* %r0.global-to-local, align 4
  store i1 %v2_a028, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a028, label %dec_label_pc_a184, label %dec_label_pc_a030

dec_label_pc_a030:                                ; preds = %dec_label_pc_a11c, %dec_label_pc_a024
  store i32 %v3_9e54, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a194, label %dec_label_pc_a1a0, label %dec_label_pc_a044

dec_label_pc_a044:                                ; preds = %dec_label_pc_a184.dec_label_pc_a044_crit_edge, %dec_label_pc_a030
  %v1_a048 = phi i32 [ %v1_a048.pre, %dec_label_pc_a184.dec_label_pc_a044_crit_edge ], [ 65535, %dec_label_pc_a030 ]
  store i32 %v3_9e38, i32* %r2.global-to-local, align 4
  %v9_a048 = icmp eq i32 %v3_9e38, %v1_a048
  store i1 %v9_a048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a048, label %dec_label_pc_a1bc, label %dec_label_pc_a050

dec_label_pc_a050:                                ; preds = %dec_label_pc_a1a0.dec_label_pc_a050_crit_edge, %dec_label_pc_a044
  %v1_a054 = phi i32 [ %v1_a054.pre, %dec_label_pc_a1a0.dec_label_pc_a050_crit_edge ], [ %v1_a048, %dec_label_pc_a044 ]
  store i32 %v3_9e58, i32* %r3.global-to-local, align 4
  %v9_a054 = icmp eq i32 %v3_9e58, %v1_a054
  store i1 %v9_a054, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a054, label %dec_label_pc_a1d8, label %dec_label_pc_a05c

dec_label_pc_a05c:                                ; preds = %dec_label_pc_a1bc, %dec_label_pc_a050
  store i32 %v1_9db8, i32* %ip.global-to-local, align 4
  store i1 %v2_a060, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a060, label %dec_label_pc_a068, label %dec_label_pc_a1f4

dec_label_pc_a068:                                ; preds = %dec_label_pc_a05c, %dec_label_pc_a1d8, %dec_label_pc_a1f4
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a06c = load i32, i32* @r7, align 4
  %v1_a06c = trunc i32 %v0_a06c to i8
  %v2_a06c = load i32, i32* @r5, align 4
  %v3_a06c = add i32 %v2_a06c, 10
  %v4_a06c = inttoptr i32 %v3_a06c to i8*
  store i8 %v1_a06c, i8* %v4_a06c, align 1
  %v0_a070 = load i32, i32* @r7, align 4
  %v1_a070 = trunc i32 %v0_a070 to i8
  %v2_a070 = load i32, i32* @r5, align 4
  %v3_a070 = add i32 %v2_a070, 11
  %v4_a070 = inttoptr i32 %v3_a070 to i8*
  store i8 %v1_a070, i8* %v4_a070, align 1
  %v0_a074 = load i32, i32* @r5, align 4
  store i32 %v0_a074, i32* @r0, align 4
  %v2_a078 = call i32 @function_ddf4(i32 %v0_a074, i32 20)
  %v3_a078 = trunc i32 %v2_a078 to i8
  store i32 %v2_a078, i32* %r0.global-to-local, align 4
  %v4_a07c = sdiv i32 %v2_a078, 256
  store i32 %v4_a07c, i32* %r3.global-to-local, align 4
  %v1_a080 = trunc i32 %v4_a07c to i8
  %v2_a080 = load i32, i32* @r5, align 4
  %v3_a080 = add i32 %v2_a080, 11
  %v4_a080 = inttoptr i32 %v3_a080 to i8*
  store i8 %v1_a080, i8* %v4_a080, align 1
  %v3_a084 = load i32, i32* @r5, align 4
  %v4_a084 = add i32 %v3_a084, 10
  %v5_a084 = inttoptr i32 %v4_a084 to i8*
  store i8 %v3_a078, i8* %v5_a084, align 1
  %v0_a088 = load i32, i32* @r7, align 4
  %v1_a088 = trunc i32 %v0_a088 to i8
  %v2_a088 = load i32, i32* @r6, align 4
  %v3_a088 = add i32 %v2_a088, 6
  %v4_a088 = inttoptr i32 %v3_a088 to i8*
  store i8 %v1_a088, i8* %v4_a088, align 1
  %v0_a08c = load i32, i32* @r7, align 4
  %v1_a08c = trunc i32 %v0_a08c to i8
  %v2_a08c = load i32, i32* @r6, align 4
  %v3_a08c = add i32 %v2_a08c, 7
  %v4_a08c = inttoptr i32 %v3_a08c to i8*
  store i8 %v1_a08c, i8* %v4_a08c, align 1
  %v0_a090 = load i32, i32* @r5, align 4
  %v1_a090 = add i32 %v0_a090, 24
  %v2_a090 = inttoptr i32 %v1_a090 to i8*
  %v3_a090 = load i8, i8* %v2_a090, align 1
  %v4_a090 = zext i8 %v3_a090 to i32
  store i32 %v4_a090, i32* %r3.global-to-local, align 4
  %v1_a094 = add i32 %v0_a090, 25
  %v2_a094 = inttoptr i32 %v1_a094 to i8*
  %v3_a094 = load i8, i8* %v2_a094, align 1
  %v4_a094 = zext i8 %v3_a094 to i32
  %v0_a098 = load i32, i32* @r6, align 4
  store i32 %v0_a098, i32* @r1, align 4
  %v4_a09c = mul nuw nsw i32 %v4_a094, 256
  %v5_a09c = or i32 %v4_a09c, %v4_a090
  store i32 %v5_a09c, i32* %r2.global-to-local, align 4
  store i32 %v0_a090, i32* %r0.global-to-local, align 4
  %v0_a0a4 = load i32, i32* @sb, align 4
  store i32 %v0_a0a4, i32* %r3.global-to-local, align 4
  %v4_a0a8 = call i32 @function_de50(i32 %v0_a090, i32 %v0_a098, i32 %v5_a09c, i32 %v0_a0a4)
  %v5_a0a8 = trunc i32 %v4_a0a8 to i8
  store i32 %v4_a0a8, i32* %r0.global-to-local, align 4
  %v4_a0ac38 = udiv i32 %v4_a0a8, 256
  %v1_a0b0 = trunc i32 %v4_a0ac38 to i8
  %v2_a0b0 = load i32, i32* @r6, align 4
  %v3_a0b0 = add i32 %v2_a0b0, 7
  %v4_a0b0 = inttoptr i32 %v3_a0b0 to i8*
  store i8 %v1_a0b0, i8* %v4_a0b0, align 1
  %v3_a0b4 = load i32, i32* @r6, align 4
  %v4_a0b4 = add i32 %v3_a0b4, 6
  %v5_a0b4 = inttoptr i32 %v4_a0b4 to i8*
  store i8 %v5_a0a8, i8* %v5_a0b4, align 1
  %v3_a0b8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a0b8, i32* %r3.global-to-local, align 4
  %v0_a0bc = load i32, i32* @r5, align 4
  %v1_a0bc = add i32 %v0_a0bc, 20
  %v2_a0bc = inttoptr i32 %v1_a0bc to i32*
  %v3_a0bc = load i32, i32* %v2_a0bc, align 4
  %v3_a0c4 = udiv i32 %v3_a0bc, 65536
  store i32 %v3_a0c4, i32* %r2.global-to-local, align 4
  %v5_a0c8 = mul i32 %v3_a0b8, 24
  %v1_a0cc = load i32, i32* @r8, align 4
  %v2_a0cc = add i32 %v1_a0cc, %v5_a0c8
  store i32 %v2_a0cc, i32* %ip.global-to-local, align 4
  %v3_a0d035 = udiv i32 %v3_a0bc, 16777216
  %v1_a0d4 = trunc i32 %v3_a0d035 to i8
  %v3_a0d4 = add i32 %v2_a0cc, 3
  %v4_a0d4 = inttoptr i32 %v3_a0d4 to i8*
  store i8 %v1_a0d4, i8* %v4_a0d4, align 1
  %v0_a0d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a0d8 = trunc i32 %v0_a0d8 to i8
  %v2_a0d8 = load i32, i32* %ip.global-to-local, align 4
  %v3_a0d8 = add i32 %v2_a0d8, 2
  %v4_a0d8 = inttoptr i32 %v3_a0d8 to i8*
  store i8 %v1_a0d8, i8* %v4_a0d8, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a0e0 = load i32, i32* @r5, align 4
  store i32 %v0_a0e0, i32* %r1.global-to-local, align 4
  store i32 %v3_9de0, i32* %r0.global-to-local, align 4
  %v0_a0e8 = load i32, i32* @fp, align 4
  store i32 %v0_a0e8, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_a0f0 = load i32, i32* %ip.global-to-local, align 4
  %v4_a0f0 = inttoptr i32 %v0_a0f0 to %sockaddr*
  %v7_a0f8 = inttoptr i32 %v0_a0e0 to i32*
  %v9_a0f8 = call i32 @sendto(i32 %v3_9de0, i32* %v7_a0f8, i32 %v0_a0e8, i32 16384, %sockaddr* %v4_a0f0, i32 16)
  %v3_a0fc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a0fc, i32* %r3.global-to-local, align 4
  %v1_a100 = add i32 %v3_a0fc, 1
  store i32 %v1_a100, i32* %r0.global-to-local, align 4
  %v1_a104 = load i32, i32* @sl, align 4
  %v9_a104 = icmp eq i32 %v1_a100, %v1_a104
  store i1 %v9_a104, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a100, i32* %stack_var_-40, align 4
  %v5_a10c = icmp slt i32 %v1_a100, %v1_a104
  br i1 %v5_a10c, label %dec_label_pc_a000, label %dec_label_pc_a110

dec_label_pc_a110:                                ; preds = %dec_label_pc_a068
  %v2_a110 = icmp eq i32 %v1_a104, 0
  store i1 %v2_a110, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9ff0.outer

dec_label_pc_a11c:                                ; preds = %dec_label_pc_a000
  %v1_a11c = add i32 %v2_a008, 16
  %v2_a11c = inttoptr i32 %v1_a11c to i32*
  %v3_a11c = load i32, i32* %v2_a11c, align 4
  store i32 %v3_a11c, i32* %r4.global-to-local, align 4
  %v0_a120 = call i32 @function_f468()
  store i32 %v0_a120, i32* %r0.global-to-local, align 4
  %v3_a124 = load i32, i32* %stack_var_-40, align 4
  %v5_a12c = mul i32 %v3_a124, 24
  %v1_a134 = load i32, i32* @r8, align 4
  %v2_a134 = add i32 %v1_a134, %v5_a12c
  store i32 %v2_a134, i32* %r1.global-to-local, align 4
  %v1_a138 = and i32 %v3_a11c, 65280
  store i32 %v1_a138, i32* %r3.global-to-local, align 4
  %v1_a130 = udiv i32 %v3_a11c, 256
  %v3_a13c = and i32 %v1_a130, 65280
  store i32 %v3_a13c, i32* %r2.global-to-local, align 4
  %v3_a140 = mul i32 %v3_a11c, 16777216
  store i32 %v3_a140, i32* %ip.global-to-local, align 4
  %v1_a144 = add i32 %v2_a134, 20
  %v2_a144 = inttoptr i32 %v1_a144 to i8*
  %v3_a144 = load i8, i8* %v2_a144, align 1
  %v4_a144 = zext i8 %v3_a144 to i32
  %v4_a148 = mul nuw nsw i32 %v1_a138, 256
  %v5_a148 = or i32 %v4_a148, %v3_a140
  store i32 %v5_a148, i32* %ip.global-to-local, align 4
  %v2_a150 = call i32 @llvm.bswap.i32(i32 %v3_a11c)
  %v7_a154 = lshr i32 %v0_a120, %v4_a144
  %v8_a154 = add i32 %v7_a154, %v2_a150
  store i32 %v8_a154, i32* %r2.global-to-local, align 4
  %v3_a160 = mul i32 %v8_a154, 16777216
  %v1_a158 = mul i32 %v8_a154, 256
  %v4_a164 = and i32 %v1_a158, 16711680
  %v5_a164 = or i32 %v4_a164, %v3_a160
  store i32 %v5_a164, i32* %r1.global-to-local, align 4
  store i32 %v6_9dcc, i32* %r0.global-to-local, align 4
  %v2_a174 = call i32 @llvm.bswap.i32(i32 %v8_a154)
  store i32 %v2_a174, i32* %r3.global-to-local, align 4
  store i1 %v2_a028, i1* %cpsr_z.global-to-local, align 1
  %v1_a17c = load i32, i32* @r5, align 4
  %v2_a17c = add i32 %v1_a17c, 16
  %v3_a17c = inttoptr i32 %v2_a17c to i32*
  store i32 %v2_a174, i32* %v3_a17c, align 4
  br i1 %v2_a028, label %dec_label_pc_a184, label %dec_label_pc_a030

dec_label_pc_a184:                                ; preds = %dec_label_pc_a11c, %dec_label_pc_a024
  %v0_a184 = call i32 @function_f468()
  store i32 %v0_a184, i32* %r0.global-to-local, align 4
  store i32 %v3_9e54, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a194, i1* %cpsr_z.global-to-local, align 1
  %v1_a198 = load i32, i32* @r5, align 4
  %v2_a198 = add i32 %v1_a198, 12
  %v3_a198 = inttoptr i32 %v2_a198 to i32*
  store i32 %v0_a184, i32* %v3_a198, align 4
  br i1 %v3_a194, label %dec_label_pc_a1a0, label %dec_label_pc_a184.dec_label_pc_a044_crit_edge

dec_label_pc_a184.dec_label_pc_a044_crit_edge:    ; preds = %dec_label_pc_a184
  %v1_a048.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a044

dec_label_pc_a1a0:                                ; preds = %dec_label_pc_a184, %dec_label_pc_a030
  %v0_a1a0 = call i32 @function_f468()
  %v1_a1a0 = trunc i32 %v0_a1a0 to i8
  store i32 %v0_a1a0, i32* %r0.global-to-local, align 4
  store i32 %v3_9e38, i32* %r2.global-to-local, align 4
  %v4_a1a8 = sdiv i32 %v0_a1a0, 256
  store i32 %v4_a1a8, i32* %r3.global-to-local, align 4
  %v1_a1ac = load i32, i32* @r4, align 4
  %v9_a1ac = icmp eq i32 %v3_9e38, %v1_a1ac
  store i1 %v9_a1ac, i1* %cpsr_z.global-to-local, align 1
  %v1_a1b0 = trunc i32 %v4_a1a8 to i8
  %v2_a1b0 = load i32, i32* @r5, align 4
  %v3_a1b0 = add i32 %v2_a1b0, 5
  %v4_a1b0 = inttoptr i32 %v3_a1b0 to i8*
  store i8 %v1_a1b0, i8* %v4_a1b0, align 1
  %v3_a1b4 = load i32, i32* @r5, align 4
  %v4_a1b4 = add i32 %v3_a1b4, 4
  %v5_a1b4 = inttoptr i32 %v4_a1b4 to i8*
  store i8 %v1_a1a0, i8* %v5_a1b4, align 1
  %v0_a1b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1b8, label %dec_label_pc_a1bc, label %dec_label_pc_a1a0.dec_label_pc_a050_crit_edge

dec_label_pc_a1a0.dec_label_pc_a050_crit_edge:    ; preds = %dec_label_pc_a1a0
  %v1_a054.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a050

dec_label_pc_a1bc:                                ; preds = %dec_label_pc_a1a0, %dec_label_pc_a044
  %v0_a1bc = call i32 @function_f468()
  %v1_a1bc = trunc i32 %v0_a1bc to i8
  store i32 %v0_a1bc, i32* %r0.global-to-local, align 4
  %v4_a1c0 = sdiv i32 %v0_a1bc, 256
  store i32 %v4_a1c0, i32* %r3.global-to-local, align 4
  %v3_a1c4 = load i32, i32* @r5, align 4
  %v4_a1c4 = add i32 %v3_a1c4, 20
  %v5_a1c4 = inttoptr i32 %v4_a1c4 to i8*
  store i8 %v1_a1bc, i8* %v5_a1c4, align 1
  %v0_a1c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a1c8 = trunc i32 %v0_a1c8 to i8
  %v2_a1c8 = load i32, i32* @r6, align 4
  %v3_a1c8 = add i32 %v2_a1c8, 1
  %v4_a1c8 = inttoptr i32 %v3_a1c8 to i8*
  store i8 %v1_a1c8, i8* %v4_a1c8, align 1
  store i32 %v3_9e58, i32* %r3.global-to-local, align 4
  %v1_a1d0 = load i32, i32* @r4, align 4
  %v9_a1d0 = icmp eq i32 %v3_9e58, %v1_a1d0
  store i1 %v9_a1d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a1d0, label %dec_label_pc_a1d8, label %dec_label_pc_a05c

dec_label_pc_a1d8:                                ; preds = %dec_label_pc_a1bc, %dec_label_pc_a050
  %v0_a1d8 = call i32 @function_f468()
  %v1_a1d8 = trunc i32 %v0_a1d8 to i8
  store i32 %v0_a1d8, i32* %r0.global-to-local, align 4
  store i32 %v1_9db8, i32* %ip.global-to-local, align 4
  %v4_a1e0 = sdiv i32 %v0_a1d8, 256
  store i32 %v4_a1e0, i32* %r3.global-to-local, align 4
  store i1 %v2_a060, i1* %cpsr_z.global-to-local, align 1
  %v1_a1e8 = trunc i32 %v4_a1e0 to i8
  %v2_a1e8 = load i32, i32* @r6, align 4
  %v3_a1e8 = add i32 %v2_a1e8, 3
  %v4_a1e8 = inttoptr i32 %v3_a1e8 to i8*
  store i8 %v1_a1e8, i8* %v4_a1e8, align 1
  %v3_a1ec = load i32, i32* @r6, align 4
  %v4_a1ec = add i32 %v3_a1ec, 2
  %v5_a1ec = inttoptr i32 %v4_a1ec to i8*
  store i8 %v1_a1d8, i8* %v5_a1ec, align 1
  %v0_a1f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1f0, label %dec_label_pc_a068, label %dec_label_pc_a1f4

dec_label_pc_a1f4:                                ; preds = %dec_label_pc_a05c, %dec_label_pc_a1d8
  %v0_a1f4 = load i32, i32* @r5, align 4
  %v1_a1f4 = add i32 %v0_a1f4, 28
  store i32 %v1_a1f4, i32* %r0.global-to-local, align 4
  store i32 %v0_9e30, i32* @r1, align 4
  %v1_a1fc = inttoptr i32 %v1_a1f4 to i8*
  %v2_a1fc = call i32 @function_f5e8(i8* %v1_a1fc)
  store i32 %v2_a1fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a068

dec_label_pc_a204:                                ; preds = %dec_label_pc_9df0
  store i32 %v3_9de0, i32* %r0.global-to-local, align 4
  %v1_a208 = call i32 @close(i32 %v3_9de0)
  store i32 %v1_a208, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a20c

dec_label_pc_a20c:                                ; preds = %dec_label_pc_9ca4, %dec_label_pc_a204
  %v29_a210 = phi i32 [ -1, %dec_label_pc_9ca4 ], [ %v1_a208, %dec_label_pc_a204 ]
  store i32 %v3_9ca4, i32* %r4.global-to-local, align 4
  store i32 %v6_9ca4, i32* %r5.global-to-local, align 4
  store i32 %v9_9ca4, i32* %r6.global-to-local, align 4
  store i32 %v12_9ca4, i32* %r7.global-to-local, align 4
  store i32 %v18_9ca4, i32* %sb.global-to-local, align 4
  store i32 %v24_9ca4, i32* %fp.global-to-local, align 4
  ret i32 %v29_a210

dec_label_pc_a214:                                ; preds = %dec_label_pc_9e74
  %v3_a218 = sext i8 %v5_9ed8 to i32
  %v7_a218 = sext i8 %v5_9edc to i32
  %v3_a21c = sdiv i32 %v3_a218, 256
  store i32 %v3_a21c, i32* %r0.global-to-local, align 4
  %v3_a220 = sdiv i32 %v7_a218, 256
  store i32 %v3_a220, i32* %r1.global-to-local, align 4
  store i32 %v1_9eb0, i32* %r2.global-to-local, align 4
  store i32 %v1_9eb4, i32* %r3.global-to-local, align 4
  %v3_a22c34 = udiv i32 %v1_9ecc, 256
  store i32 %v3_a22c34, i32* %ip.global-to-local, align 4
  %v5_a240 = trunc i32 %v3_a22c34 to i8
  store i32 0, i32* %r6.global-to-local, align 4
  %v4_a298 = sext i8 %v5_9d34 to i32
  %sext12 = mul i32 %v0_9e34, 16777216
  %v4_a300 = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v0_9e44, 16777216
  %v4_a310 = sdiv i32 %sext13, 16777216
  %v1_a318 = trunc i32 %v4_a310 to i8
  br label %dec_label_pc_a248

dec_label_pc_a248:                                ; preds = %dec_label_pc_a248, %dec_label_pc_a214
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a254 = call i32* @calloc(i32 1510, i32 1)
  %v4_a254 = ptrtoint i32* %v2_a254 to i32
  store i32 %v4_a254, i32* %r0.global-to-local, align 4
  store i32 %v4_9cc4, i32* %r1.global-to-local, align 4
  %v3_a25c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a25c, i32* %r2.global-to-local, align 4
  %v2_a260 = load i32, i32* %r6.global-to-local, align 4
  %v5_a260 = mul i32 %v2_a260, 4
  %v6_a260 = add i32 %v5_a260, %v4_9cc4
  %v7_a260 = inttoptr i32 %v6_a260 to i32*
  store i32 %v4_a254, i32* %v7_a260, align 4
  %v0_a264 = load i32, i32* %r1.global-to-local, align 4
  %v1_a264 = load i32, i32* %r2.global-to-local, align 4
  %v4_a264 = mul i32 %v1_a264, 4
  %v5_a264 = add i32 %v4_a264, %v0_a264
  %v6_a264 = inttoptr i32 %v5_a264 to i32*
  %v7_a264 = load i32, i32* %v6_a264, align 4
  store i32 %v7_a264, i32* %r1.global-to-local, align 4
  %v1_a268 = inttoptr i32 %v7_a264 to i8*
  %v2_a268 = load i8, i8* %v1_a268, align 1
  %tmp85 = urem i8 %v2_a268, 16
  %v1_a26c = zext i8 %tmp85 to i32
  %v1_a270 = or i32 %v1_a26c, 64
  store i32 %v1_a270, i32* %r3.global-to-local, align 4
  %v1_a274 = trunc i32 %v1_a270 to i8
  store i8 %v1_a274, i8* %v1_a268, align 1
  %v0_a278 = load i32, i32* %r1.global-to-local, align 4
  %v1_a278 = inttoptr i32 %v0_a278 to i8*
  %v2_a278 = load i8, i8* %v1_a278, align 1
  %v3_a278 = zext i8 %v2_a278 to i32
  %v1_a27c = and i32 %v3_a278, 240
  %v1_a280 = or i32 %v1_a27c, 5
  store i32 %v1_a280, i32* %r2.global-to-local, align 4
  %v3_a288 = add i32 %v0_a278, 9
  %v4_a288 = inttoptr i32 %v3_a288 to i8*
  store i8 17, i8* %v4_a288, align 1
  %v0_a28c = load i32, i32* %r2.global-to-local, align 4
  %v1_a28c = trunc i32 %v0_a28c to i8
  %v2_a28c = load i32, i32* %r1.global-to-local, align 4
  %v3_a28c = inttoptr i32 %v2_a28c to i8*
  store i8 %v1_a28c, i8* %v3_a28c, align 1
  %v2_a294 = load i32, i32* %r1.global-to-local, align 4
  %v3_a294 = add i32 %v2_a294, 1
  %v4_a294 = inttoptr i32 %v3_a294 to i8*
  store i8 %v5_9cfc, i8* %v4_a294, align 1
  store i32 %v4_a298, i32* %r0.global-to-local, align 4
  %v2_a29c = load i32, i32* %r1.global-to-local, align 4
  %v3_a29c = add i32 %v2_a29c, 8
  %v4_a29c = inttoptr i32 %v3_a29c to i8*
  store i8 %v5_9d34, i8* %v4_a29c, align 1
  %v3_a2a0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a2a0, i32* %r2.global-to-local, align 4
  store i32 %v6_9dcc, i32* %ip.global-to-local, align 4
  %v3_a2a8 = mul i32 %v3_a2a0, 32
  store i32 %v3_a2a8, i32* %r3.global-to-local, align 4
  %v1_a2ac = load i32, i32* %r1.global-to-local, align 4
  %v2_a2ac = add i32 %v1_a2ac, 12
  %v3_a2ac = inttoptr i32 %v2_a2ac to i32*
  store i32 %v6_9dcc, i32* %v3_a2ac, align 4
  %v0_a2b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a2b0 = load i32, i32* %r2.global-to-local, align 4
  %tmp86 = mul i32 %v1_a2b0, -8
  %v5_a2b0 = add i32 %v0_a2b0, %tmp86
  %v1_a2b4 = load i32, i32* @r8, align 4
  %v2_a2b4 = add i32 %v5_a2b0, %v1_a2b4
  store i32 %v2_a2b4, i32* %r3.global-to-local, align 4
  %v1_a2b8 = add i32 %v2_a2b4, 16
  %v2_a2b8 = inttoptr i32 %v1_a2b8 to i32*
  %v3_a2b8 = load i32, i32* %v2_a2b8, align 4
  %v1_a2bc = load i32, i32* %r1.global-to-local, align 4
  %v2_a2bc = add i32 %v1_a2bc, 16
  %v3_a2bc = inttoptr i32 %v2_a2bc to i32*
  store i32 %v3_a2b8, i32* %v3_a2bc, align 4
  %v0_a2c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2c4 = add i32 %v0_a2c4, 1
  store i32 %v1_a2c4, i32* %r6.global-to-local, align 4
  store i32 %v7_a218, i32* %ip.global-to-local, align 4
  store i32 %v3_a21c, i32* %r2.global-to-local, align 4
  %v2_a2d0 = load i32, i32* %r1.global-to-local, align 4
  %v3_a2d0 = add i32 %v2_a2d0, 2
  %v4_a2d0 = inttoptr i32 %v3_a2d0 to i8*
  store i8 %v5_9ed8, i8* %v4_a2d0, align 1
  store i32 %v3_a220, i32* %r0.global-to-local, align 4
  %v0_a2d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2d8 = trunc i32 %v0_a2d8 to i8
  %v2_a2d8 = load i32, i32* %r1.global-to-local, align 4
  %v3_a2d8 = add i32 %v2_a2d8, 3
  %v4_a2d8 = inttoptr i32 %v3_a2d8 to i8*
  store i8 %v1_a2d8, i8* %v4_a2d8, align 1
  %v0_a2dc = load i32, i32* %ip.global-to-local, align 4
  %v1_a2dc = trunc i32 %v0_a2dc to i8
  %v2_a2dc = load i32, i32* %r1.global-to-local, align 4
  %v3_a2dc = add i32 %v2_a2dc, 4
  %v4_a2dc = inttoptr i32 %v3_a2dc to i8*
  store i8 %v1_a2dc, i8* %v4_a2dc, align 1
  store i32 64, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_a2e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a2e8 = add i32 %v0_a2e8, 20
  store i32 %v1_a2e8, i32* %r3.global-to-local, align 4
  %v0_a2ec = load i32, i32* %r0.global-to-local, align 4
  %v1_a2ec = trunc i32 %v0_a2ec to i8
  %v3_a2ec = add i32 %v0_a2e8, 5
  %v4_a2ec = inttoptr i32 %v3_a2ec to i8*
  store i8 %v1_a2ec, i8* %v4_a2ec, align 1
  %v0_a2f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2f0 = trunc i32 %v0_a2f0 to i8
  %v2_a2f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_a2f0 = add i32 %v2_a2f0, 6
  %v4_a2f0 = inttoptr i32 %v3_a2f0 to i8*
  store i8 %v1_a2f0, i8* %v4_a2f0, align 1
  %v0_a2f4 = load i32, i32* %ip.global-to-local, align 4
  %v1_a2f4 = trunc i32 %v0_a2f4 to i8
  %v2_a2f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_a2f4 = add i32 %v2_a2f4, 7
  %v4_a2f4 = inttoptr i32 %v3_a2f4 to i8*
  store i8 %v1_a2f4, i8* %v4_a2f4, align 1
  %v0_a2f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_a2f8 = trunc i32 %v0_a2f8 to i8
  %v2_a2f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_a2f8 = add i32 %v2_a2f8, 20
  %v4_a2f8 = inttoptr i32 %v3_a2f8 to i8*
  store i8 %v1_a2f8, i8* %v4_a2f8, align 1
  store i32 %v3_a22c34, i32* %r0.global-to-local, align 4
  store i32 %v4_a300, i32* %r1.global-to-local, align 4
  %v2_a304 = load i32, i32* %r3.global-to-local, align 4
  %v3_a304 = add i32 %v2_a304, 5
  %v4_a304 = inttoptr i32 %v3_a304 to i8*
  store i8 %v5_a240, i8* %v4_a304, align 1
  %v0_a308 = load i32, i32* %r1.global-to-local, align 4
  %v1_a308 = trunc i32 %v0_a308 to i8
  %v2_a308 = load i32, i32* %r3.global-to-local, align 4
  %v3_a308 = add i32 %v2_a308, 1
  %v4_a308 = inttoptr i32 %v3_a308 to i8*
  store i8 %v1_a308, i8* %v4_a308, align 1
  %v0_a30c = load i32, i32* %r5.global-to-local, align 4
  %v1_a30c = trunc i32 %v0_a30c to i8
  %v2_a30c = load i32, i32* %r3.global-to-local, align 4
  %v3_a30c = add i32 %v2_a30c, 2
  %v4_a30c = inttoptr i32 %v3_a30c to i8*
  store i8 %v1_a30c, i8* %v4_a30c, align 1
  store i32 %v4_a310, i32* %r2.global-to-local, align 4
  %v0_a314 = load i32, i32* %r6.global-to-local, align 4
  %v1_a314 = load i32, i32* @sl, align 4
  %v9_a314 = icmp eq i32 %v0_a314, %v1_a314
  store i1 %v9_a314, i1* %cpsr_z.global-to-local, align 1
  %v2_a318 = load i32, i32* %r3.global-to-local, align 4
  %v3_a318 = add i32 %v2_a318, 3
  %v4_a318 = inttoptr i32 %v3_a318 to i8*
  store i8 %v1_a318, i8* %v4_a318, align 1
  %v0_a31c = load i32, i32* %r7.global-to-local, align 4
  %v1_a31c = trunc i32 %v0_a31c to i8
  %v2_a31c = load i32, i32* %r3.global-to-local, align 4
  %v3_a31c = add i32 %v2_a31c, 4
  %v4_a31c = inttoptr i32 %v3_a31c to i8*
  store i8 %v1_a31c, i8* %v4_a31c, align 1
  %v0_a320 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_a320, i32* %stack_var_-40, align 4
  %v5_a324 = icmp slt i32 %v0_a314, %v1_a314
  br i1 %v5_a324, label %dec_label_pc_a248, label %dec_label_pc_9fe8

; uselistorder directives
  uselistorder i32 %v3_a22c34, { 2, 0, 1 }
  uselistorder i32 %v3_a220, { 1, 0 }
  uselistorder i32 %v3_a21c, { 1, 0 }
  uselistorder i32 %v7_a218, { 1, 0 }
  uselistorder i32 %v4_a1e0, { 1, 0 }
  uselistorder i32 %v0_a1d8, { 0, 2, 1 }
  uselistorder i32 %v0_a1bc, { 0, 2, 1 }
  uselistorder i32 %v4_a1a8, { 1, 0 }
  uselistorder i32 %v0_a1a0, { 0, 2, 1 }
  uselistorder i32 %v2_a174, { 1, 0 }
  uselistorder i32 %v8_a154, { 2, 0, 1, 3 }
  uselistorder i32 %v3_a140, { 1, 0 }
  uselistorder i32 %v3_a11c, { 1, 3, 2, 0, 4 }
  uselistorder i1 %v2_a110, { 1, 0 }
  uselistorder i32 %v1_a104, { 0, 2, 3, 1 }
  uselistorder i32 %v1_a100, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_a0a8, { 0, 2, 1 }
  uselistorder i32 %v0_a090, { 1, 0, 2, 3 }
  uselistorder i32 %v4_a07c, { 1, 0 }
  uselistorder i32 %v2_a078, { 0, 2, 1 }
  uselistorder i1 %v2_a028, { 3, 0, 1, 2 }
  uselistorder i1 %v3_a194, { 1, 0, 2, 3 }
  uselistorder i8 %v5_9ed8, { 0, 2, 1 }
  uselistorder i32 %v3_9ec4, { 1, 0 }
  uselistorder i32 %v1_9eb4, { 2, 3, 0, 1 }
  uselistorder i32 %v1_9eb0, { 1, 2, 0 }
  uselistorder i32 %v1_9ea8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_9ea0, { 1, 0 }
  uselistorder i32 %v1_9e78, { 2, 1, 0, 3 }
  uselistorder i32 %v3_9e58, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v3_9e54, { 0, 1, 3, 2 }
  uselistorder i32 %v0_9e40, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v3_9e38, { 5, 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_9e34, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_9e30, { 3, 0, 4, 1, 2 }
  uselistorder i32 %v3_9e24, { 3, 1, 2, 0 }
  uselistorder i32 %v3_9de0, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 %v6_9dcc, { 1, 0, 6, 4, 5, 3, 2 }
  uselistorder i32 %v1_9db8, { 3, 1, 2, 0 }
  uselistorder i32 %v1_9d44, { 1, 0 }
  uselistorder i8 %v5_9d34, { 1, 0, 2 }
  uselistorder i32 %v5_9d18, { 1, 0 }
  uselistorder i8 %v5_9cfc, { 0, 2, 1 }
  uselistorder i32 %v6_9cdc, { 1, 0 }
  uselistorder i32 %v4_9cc4, { 0, 3, 1, 5, 2, 4 }
  uselistorder i32 %v1_9ca8, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 14, 13 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* %r3.global-to-local, { 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32* %r2.global-to-local, { 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %r1.global-to-local, { 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 30, 29, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32* %r0.global-to-local, { 40, 41, 42, 43, 45, 44, 1, 3, 2, 5, 4, 6, 7, 8, 10, 9, 12, 11, 13, 15, 14, 21, 16, 17, 18, 19, 20, 26, 22, 23, 24, 25, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %ip.global-to-local, { 24, 25, 26, 27, 28, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i1* %cpsr_z.global-to-local, { 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_a20c, { 1, 0 }
  uselistorder label %dec_label_pc_a1f4, { 1, 0 }
  uselistorder label %dec_label_pc_a068, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9ff0, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
}

define i32 @function_a330(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a330:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a330 = load i32, i32* @r4, align 4
  %v6_a330 = load i32, i32* @r5, align 4
  %v9_a330 = load i32, i32* @r6, align 4
  %v12_a330 = load i32, i32* @r7, align 4
  %v15_a330 = load i32, i32* @r8, align 4
  %v21_a330 = load i32, i32* @sl, align 4
  %v1_a334 = urem i32 %arg1, 256
  store i32 %v1_a334, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_a334, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_a34c = urem i32 %arg3, 256
  store i32 %v1_a34c, i32* @r4, align 4
  %v2_a350 = call i32* @calloc(i32 %v1_a334, i32 4)
  %v4_a350 = ptrtoint i32* %v2_a350 to i32
  %v0_a354 = load i32, i32* @r5, align 4
  store i32 %v0_a354, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a364 = load i32, i32* @r4, align 4
  store i32 %v0_a364, i32* %r0.global-to-local, align 4
  %v5_a368 = inttoptr i32 %v0_a354 to i32*
  %v6_a368 = call i32 @function_92dc(i32 %v0_a364, i32* %v5_a368, i32 2, i32 0)
  %v1_a374 = urem i32 %v6_a368, 256
  store i32 %v1_a374, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a380 = load i32, i32* @r5, align 4
  store i32 %v0_a380, i32* %r1.global-to-local, align 4
  %v0_a384 = load i32, i32* @r4, align 4
  store i32 %v0_a384, i32* %r0.global-to-local, align 4
  %v5_a388 = trunc i32 %v6_a368 to i8
  %v6_a38c = inttoptr i32 %v0_a380 to i32*
  %v7_a38c = call i32 @function_92dc(i32 %v0_a384, i32* %v6_a38c, i32 3, i32 65535)
  %v0_a390 = load i32, i32* @r5, align 4
  store i32 %v0_a390, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a38c, i32* @r7, align 4
  %v0_a3a0 = load i32, i32* @r4, align 4
  store i32 %v0_a3a0, i32* %r0.global-to-local, align 4
  %v4_a3a4 = inttoptr i32 %v0_a390 to i32*
  %v5_a3a4 = call i32 @function_92dc(i32 %v0_a3a0, i32* %v4_a3a4, i32 4, i32 64)
  %v1_a3ac = urem i32 %v5_a3a4, 256
  store i32 %v1_a3ac, i32* %ip.global-to-local, align 4
  %v0_a3b0 = load i32, i32* @r5, align 4
  store i32 %v0_a3b0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a3bc = load i32, i32* @r4, align 4
  store i32 %v0_a3bc, i32* %r0.global-to-local, align 4
  %v5_a3c0 = trunc i32 %v5_a3a4 to i8
  %v6_a3c4 = inttoptr i32 %v0_a3b0 to i32*
  %v7_a3c4 = call i32 @function_92dc(i32 %v0_a3bc, i32* %v6_a3c4, i32 5, i32 1)
  %v1_a3d0 = urem i32 %v7_a3c4, 256
  store i32 %v1_a3d0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a3dc = load i32, i32* @r5, align 4
  store i32 %v0_a3dc, i32* %r1.global-to-local, align 4
  %v0_a3e0 = load i32, i32* @r4, align 4
  store i32 %v0_a3e0, i32* %r0.global-to-local, align 4
  %v5_a3e8 = inttoptr i32 %v0_a3dc to i32*
  %v6_a3e8 = call i32 @function_92dc(i32 %v0_a3e0, i32* %v5_a3e8, i32 6, i32 65535)
  %v0_a3f0 = load i32, i32* @r5, align 4
  store i32 %v0_a3f0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a3e8, i32* @sl, align 4
  %v0_a400 = load i32, i32* @r4, align 4
  store i32 %v0_a400, i32* %r0.global-to-local, align 4
  %v4_a404 = inttoptr i32 %v0_a3f0 to i32*
  %v5_a404 = call i32 @function_92dc(i32 %v0_a400, i32* %v4_a404, i32 7, i32 65535)
  %v0_a408 = load i32, i32* @r5, align 4
  store i32 %v0_a408, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_a404, i32* @r8, align 4
  %v0_a418 = load i32, i32* @r4, align 4
  store i32 %v0_a418, i32* %r0.global-to-local, align 4
  %v4_a41c = inttoptr i32 %v0_a408 to i32*
  %v5_a41c = call i32 @function_92dc(i32 %v0_a418, i32* %v4_a41c, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a42c = load i32, i32* @r5, align 4
  store i32 %v0_a42c, i32* %r1.global-to-local, align 4
  %v0_a430 = load i32, i32* @r4, align 4
  store i32 %v0_a430, i32* %r0.global-to-local, align 4
  %v4_a434 = inttoptr i32 %v0_a42c to i32*
  %v5_a434 = call i32 @function_92dc(i32 %v0_a430, i32* %v4_a434, i32 1, i32 1)
  %v1_a43c = urem i32 %v5_a434, 256
  store i32 %v1_a43c, i32* %ip.global-to-local, align 4
  %v0_a440 = load i32, i32* @r5, align 4
  store i32 %v0_a440, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a44c = load i32, i32* @r4, align 4
  store i32 %v0_a44c, i32* %r0.global-to-local, align 4
  %v5_a454 = inttoptr i32 %v0_a440 to i32*
  %v6_a454 = call i32 @function_92dc(i32 %v0_a44c, i32* %v5_a454, i32 19, i32 0)
  %v0_a45c = load i32, i32* @r5, align 4
  store i32 %v0_a45c, i32* %r1.global-to-local, align 4
  %v2_a460 = load i32, i32* @global_var_1a40c.102, align 4
  store i32 %v2_a460, i32* %r3.global-to-local, align 4
  store i32 %v6_a454, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_a46c = load i32, i32* @r4, align 4
  store i32 %v0_a46c, i32* %r0.global-to-local, align 4
  %v4_a470 = inttoptr i32 %v0_a45c to i32*
  %v5_a470 = call i32 @function_92dc(i32 %v0_a46c, i32* %v4_a470, i32 25, i32 %v2_a460)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_a484 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_a484, i32* %r0.global-to-local, align 4
  %v2_a488 = icmp eq i32 %v3_a484, -1
  store i1 %v2_a488, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a488, label %dec_label_pc_a96c, label %dec_label_pc_a494

dec_label_pc_a494:                                ; preds = %dec_label_pc_a330
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a49c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a49c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_a4b0 = call i32 @setsockopt(i32 %v3_a484, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_a4b0, i32* %r0.global-to-local, align 4
  %v2_a4b4 = icmp eq i32 %v7_a4b0, -1
  store i1 %v2_a4b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a4b4, label %dec_label_pc_a964, label %dec_label_pc_a4bc

dec_label_pc_a4bc:                                ; preds = %dec_label_pc_a494
  %v0_a4bc = load i32, i32* @sl, align 4
  %v3_a4bc = mul i32 %v0_a4bc, 65536
  store i32 %v3_a4bc, i32* %sl.global-to-local, align 4
  %v0_a4c0 = load i32, i32* @r8, align 4
  %v3_a4c0 = mul i32 %v0_a4c0, 65536
  store i32 %v3_a4c0, i32* %r8.global-to-local, align 4
  %v0_a4c8 = load i32, i32* @r7, align 4
  %v3_a4c8 = mul i32 %v0_a4c8, 65536
  store i32 %v3_a4c8, i32* %r7.global-to-local, align 4
  %v0_a4cc = load i32, i32* @r6, align 4
  %v1_a4cc = urem i32 %v0_a4cc, 256
  store i32 %v1_a4cc, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_a4d4 = urem i32 %v0_a4c8, 65536
  store i32 %v3_a4d4, i32* %r2.global-to-local, align 4
  %v3_a4d8 = urem i32 %v0_a4bc, 65536
  store i32 %v3_a4d8, i32* %r3.global-to-local, align 4
  %v3_a4dc = urem i32 %v0_a4c0, 65536
  store i32 %v3_a4dc, i32* %r1.global-to-local, align 4
  %v0_a4e0 = load i32, i32* @fp, align 4
  %v2_a4e0 = icmp eq i32 %v0_a4e0, 0
  store i1 %v2_a4e0, i1* %cpsr_z.global-to-local, align 1
  %tmp86 = icmp slt i32 %v0_a4e0, 1
  br i1 %tmp86, label %dec_label_pc_aa8c, label %dec_label_pc_a500

dec_label_pc_a500:                                ; preds = %dec_label_pc_a4bc
  %v3_a504 = mul i32 %v5_a41c, 65536
  %v0_a4c8.not = or i32 %v0_a4c8, -65536
  %v1_a50c = xor i32 %v0_a4c8.not, 65535
  %v1_a514 = add i32 %v3_a504, 4325376
  %v1_a518 = urem i32 %v0_a4bc, 256
  %v3_a520 = udiv i32 %v1_a514, 256
  %v1_a524 = add i32 %v3_a504, 524288
  %v1_a52c = add i32 %v3_a504, 1835008
  %v1_a530 = urem i32 %v0_a4c0, 256
  %v1_a534 = and i32 %v3_a520, 65280
  store i32 %v1_a534, i32* %r0.global-to-local, align 4
  %v3_a53c = udiv i32 %v1_a52c, 256
  %tmp87 = mul nsw i32 %v1_a50c, 256
  %v1_a554 = and i32 %v3_a53c, 65280
  store i32 %v1_a554, i32* %ip.global-to-local, align 4
  %v1_a558 = and i32 %tmp87, 65280
  store i32 %v1_a558, i32* %lr.global-to-local, align 4
  %tmp89 = udiv i32 %v1_a50c, 256
  %v4_a544 = sdiv i32 %v1_a514, 16777216
  %v5_a574 = trunc i32 %tmp89 to i8
  %v3_a580 = mul nuw nsw i32 %v1_a518, 256
  %v3_a588 = ashr i32 %v1_a514, 31
  %v3_a58c = mul nuw nsw i32 %v1_a530, 256
  store i32 %v3_a58c, i32* %r5.global-to-local, align 4
  %tmp90 = udiv i32 %v0_a4bc, 256
  %v4_a590 = urem i32 %tmp90, 256
  %v5_a590 = or i32 %v4_a590, %v3_a580
  store i32 %v5_a590, i32* %r7.global-to-local, align 4
  %v3_a594 = udiv i32 %v1_a524, 256
  %tmp91 = udiv i32 %v0_a4c0, 256
  %v4_a598 = urem i32 %tmp91, 256
  %v5_a598 = or i32 %v4_a598, %v3_a58c
  store i32 %v5_a598, i32* %sl.global-to-local, align 4
  %v3_a5a4 = sdiv i32 %v3_a4c8, 16777216
  %v7_a5a4 = sdiv i32 %v1_a52c, 16777216
  %v1_a5a8 = and i32 %v3_a594, 65280
  store i32 %v1_a5a8, i32* %r6.global-to-local, align 4
  %v3_a5ac = ashr i32 %v3_a4c8, 31
  %v3_a5b0 = ashr i32 %v1_a52c, 31
  %v3_a5b4 = udiv i32 %v1_a50c, 65536
  %v4_a5b8 = udiv i32 %v1_a524, 16777216
  %v5_a5b8 = or i32 %v4_a5b8, %v1_a5a8
  store i32 %v5_a5b8, i32* %r8.global-to-local, align 4
  store i32 %v1_a518, i32* %r1.global-to-local, align 4
  store i32 %v1_a530, i32* %r2.global-to-local, align 4
  %v3_a5d038 = udiv i32 %v1_a5a8, 256
  store i32 %v3_a5d038, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v4_a630 = sext i8 %v5_a3c0 to i32
  %v2_a730 = icmp eq i32 %v1_a4cc, 0
  %sext18 = mul i32 %v0_a4bc, 16777216
  %v4_a744 = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v1_a524, 256
  %v4_a758 = sdiv i32 %sext19, 16777216
  %sext20 = mul i32 %v0_a4c0, 16777216
  %v4_a760 = sdiv i32 %sext20, 16777216
  %v1_a644 = trunc i32 %v3_a588 to i8
  %v1_a768 = trunc i32 %v4_a758 to i8
  br label %dec_label_pc_a5e4

dec_label_pc_a5e4:                                ; preds = %bb98, %dec_label_pc_a500
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a5f0 = call i32* @calloc(i32 1510, i32 4)
  %v4_a5f0 = ptrtoint i32* %v2_a5f0 to i32
  store i32 %v4_a5f0, i32* %r0.global-to-local, align 4
  store i32 %v4_a350, i32* %r1.global-to-local, align 4
  %v3_a5f8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a5f8, i32* %r3.global-to-local, align 4
  %v2_a5fc = load i32, i32* %r4.global-to-local, align 4
  %v5_a5fc = mul i32 %v2_a5fc, 4
  %v6_a5fc = add i32 %v5_a5fc, %v4_a350
  %v7_a5fc = inttoptr i32 %v6_a5fc to i32*
  store i32 %v4_a5f0, i32* %v7_a5fc, align 4
  %v0_a600 = load i32, i32* %r1.global-to-local, align 4
  %v1_a600 = load i32, i32* %r3.global-to-local, align 4
  %v4_a600 = mul i32 %v1_a600, 4
  %v5_a600 = add i32 %v4_a600, %v0_a600
  %v6_a600 = inttoptr i32 %v5_a600 to i32*
  %v7_a600 = load i32, i32* %v6_a600, align 4
  store i32 %v7_a600, i32* %r4.global-to-local, align 4
  %v1_a604 = inttoptr i32 %v7_a600 to i8*
  %v2_a604 = load i8, i8* %v1_a604, align 1
  %tmp = urem i8 %v2_a604, 16
  %v1_a608 = zext i8 %tmp to i32
  %v1_a60c = or i32 %v1_a608, 64
  store i32 %v1_a60c, i32* %r2.global-to-local, align 4
  %v1_a610 = trunc i32 %v1_a60c to i8
  store i8 %v1_a610, i8* %v1_a604, align 1
  %v0_a614 = load i32, i32* %r4.global-to-local, align 4
  %v1_a614 = inttoptr i32 %v0_a614 to i8*
  %v2_a614 = load i8, i8* %v1_a614, align 1
  %v1_a618 = and i8 %v2_a614, -16
  %v1_a61c = or i8 %v1_a618, 5
  store i32 %v1_a3d0, i32* %r2.global-to-local, align 4
  store i8 %v1_a61c, i8* %v1_a614, align 1
  %v2_a62c = load i32, i32* %r4.global-to-local, align 4
  %v3_a62c = add i32 %v2_a62c, 1
  %v4_a62c = inttoptr i32 %v3_a62c to i8*
  store i8 %v5_a388, i8* %v4_a62c, align 1
  store i32 %v4_a630, i32* %r1.global-to-local, align 4
  %v2_a634 = load i32, i32* %r4.global-to-local, align 4
  %v3_a634 = add i32 %v2_a634, 8
  %v4_a634 = inttoptr i32 %v3_a634 to i8*
  store i8 %v5_a3c0, i8* %v4_a634, align 1
  store i32 %v3_a588, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_a640 = load i32, i32* %r2.global-to-local, align 4
  %v9_a640 = icmp eq i32 %v0_a640, 0
  store i1 %v9_a640, i1* %cpsr_z.global-to-local, align 1
  %v2_a644 = load i32, i32* %r4.global-to-local, align 4
  %v3_a644 = add i32 %v2_a644, 3
  %v4_a644 = inttoptr i32 %v3_a644 to i8*
  store i8 %v1_a644, i8* %v4_a644, align 1
  store i32 %v4_a544, i32* %r2.global-to-local, align 4
  %v0_a64c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a64c, label %.thread22, label %.thread

.thread:                                          ; preds = %dec_label_pc_a5e4
  %v1_a64c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_a64c, i32* %r3.global-to-local, align 4
  %v2_a650 = trunc i32 %v1_a64c to i8
  %v3_a650 = load i32, i32* %r4.global-to-local, align 4
  %v4_a650 = add i32 %v3_a650, 7
  %v5_a650 = inttoptr i32 %v4_a650 to i8*
  store i8 %v2_a650, i8* %v5_a650, align 1
  %v0_a654.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a654.pr.pr, label %.thread22, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a658 = load i32, i32* %r4.global-to-local, align 4
  %v4_a658 = add i32 %v3_a658, 6
  %v5_a658 = inttoptr i32 %v4_a658 to i8*
  store i8 64, i8* %v5_a658, align 1
  br label %.thread22

.thread22:                                        ; preds = %dec_label_pc_a5e4, %.thread, %bb
  %v0_a65c = load i32, i32* %r2.global-to-local, align 4
  %v1_a65c = trunc i32 %v0_a65c to i8
  %v2_a65c = load i32, i32* %r4.global-to-local, align 4
  %v3_a65c = add i32 %v2_a65c, 2
  %v4_a65c = inttoptr i32 %v3_a65c to i8*
  store i8 %v1_a65c, i8* %v4_a65c, align 1
  store i32 %v3_a5ac, i32* %r2.global-to-local, align 4
  store i32 %v3_a5a4, i32* %r1.global-to-local, align 4
  %v2_a66c = load i32, i32* %r4.global-to-local, align 4
  %v3_a66c = add i32 %v2_a66c, 9
  %v4_a66c = inttoptr i32 %v3_a66c to i8*
  store i8 47, i8* %v4_a66c, align 1
  %v0_a670 = load i32, i32* %r2.global-to-local, align 4
  %v1_a670 = trunc i32 %v0_a670 to i8
  %v2_a670 = load i32, i32* %r4.global-to-local, align 4
  %v3_a670 = add i32 %v2_a670, 5
  %v4_a670 = inttoptr i32 %v3_a670 to i8*
  store i8 %v1_a670, i8* %v4_a670, align 1
  %v3_a674 = load i32, i32* %stack_var_-40, align 4
  %v5_a67c = mul i32 %v3_a674, 24
  store i32 %v5_a67c, i32* %r3.global-to-local, align 4
  store i32 %v5_a470, i32* %r2.global-to-local, align 4
  %v1_a684 = load i32, i32* %r4.global-to-local, align 4
  %v2_a684 = add i32 %v1_a684, 12
  %v3_a684 = inttoptr i32 %v2_a684 to i32*
  store i32 %v5_a470, i32* %v3_a684, align 4
  %v0_a688 = load i32, i32* %r3.global-to-local, align 4
  %v1_a688 = load i32, i32* @sb, align 4
  %v2_a688 = add i32 %v1_a688, %v0_a688
  store i32 %v2_a688, i32* %r3.global-to-local, align 4
  %v1_a68c = add i32 %v2_a688, 16
  %v2_a68c = inttoptr i32 %v1_a68c to i32*
  %v3_a68c = load i32, i32* %v2_a68c, align 4
  store i32 %v3_a68c, i32* %r2.global-to-local, align 4
  %v0_a690 = load i32, i32* %r1.global-to-local, align 4
  %v1_a690 = trunc i32 %v0_a690 to i8
  %v2_a690 = load i32, i32* %r4.global-to-local, align 4
  %v3_a690 = add i32 %v2_a690, 4
  %v4_a690 = inttoptr i32 %v3_a690 to i8*
  store i8 %v1_a690, i8* %v4_a690, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_a698 = load i32, i32* %r4.global-to-local, align 4
  %v1_a698 = add i32 %v0_a698, 20
  store i32 %v1_a698, i32* %r1.global-to-local, align 4
  %v3_a69c = add i32 %v0_a698, 22
  %v4_a69c = inttoptr i32 %v3_a69c to i8*
  store i8 101, i8* %v4_a69c, align 1
  %v0_a6a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a6a0 = load i32, i32* %r4.global-to-local, align 4
  %v2_a6a0 = add i32 %v1_a6a0, 16
  %v3_a6a0 = inttoptr i32 %v2_a6a0 to i32*
  store i32 %v0_a6a0, i32* %v3_a6a0, align 4
  %v0_a6a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_a6a4 = add i32 %v0_a6a4, 24
  store i32 %v1_a6a4, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_a6ac = load i32, i32* %r3.global-to-local, align 4
  %v1_a6ac = add i32 %v0_a6ac, -93
  store i32 %v1_a6ac, i32* %r3.global-to-local, align 4
  %v2_a6b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_a6b0 = add i32 %v2_a6b0, 3
  %v4_a6b0 = inttoptr i32 %v3_a6b0 to i8*
  store i8 88, i8* %v4_a6b0, align 1
  %v0_a6b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a6b4 = trunc i32 %v0_a6b4 to i8
  %v2_a6b4 = load i32, i32* %r0.global-to-local, align 4
  %v3_a6b4 = add i32 %v2_a6b4, 12
  %v4_a6b4 = inttoptr i32 %v3_a6b4 to i8*
  store i8 %v1_a6b4, i8* %v4_a6b4, align 1
  %v0_a6b8 = load i32, i32* %ip.global-to-local, align 4
  %v1_a6b8 = trunc i32 %v0_a6b8 to i8
  %v2_a6b8 = load i32, i32* %r0.global-to-local, align 4
  %v3_a6b8 = add i32 %v2_a6b8, 13
  %v4_a6b8 = inttoptr i32 %v3_a6b8 to i8*
  store i8 %v1_a6b8, i8* %v4_a6b8, align 1
  %v0_a6bc = load i32, i32* %r4.global-to-local, align 4
  %v1_a6bc = add i32 %v0_a6bc, 38
  %v2_a6bc = inttoptr i32 %v1_a6bc to i8*
  %v3_a6bc = load i8, i8* %v2_a6bc, align 1
  %tmp103 = urem i8 %v3_a6bc, 16
  %v1_a6c0 = zext i8 %tmp103 to i32
  %v1_a6c4 = or i32 %v1_a6c0, 64
  store i32 %v1_a6c4, i32* %r3.global-to-local, align 4
  %v1_a6c8 = trunc i32 %v1_a6c4 to i8
  store i8 %v1_a6c8, i8* %v2_a6bc, align 1
  %v0_a6cc = load i32, i32* %r4.global-to-local, align 4
  %v1_a6cc = add i32 %v0_a6cc, 38
  %v2_a6cc = inttoptr i32 %v1_a6cc to i8*
  %v3_a6cc = load i8, i8* %v2_a6cc, align 1
  %v1_a6d0 = and i8 %v3_a6cc, -16
  %v1_a6d4 = or i8 %v1_a6d0, 5
  store i8 %v1_a6d4, i8* %v2_a6cc, align 1
  %v0_a6e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_a6e0 = add i32 %v0_a6e0, 38
  store i32 %v1_a6e0, i32* %r5.global-to-local, align 4
  %v3_a6e4 = add i32 %v0_a6e0, 39
  %v4_a6e4 = inttoptr i32 %v3_a6e4 to i8*
  store i8 %v5_a388, i8* %v4_a6e4, align 1
  store i32 %v7_a5a4, i32* %r1.global-to-local, align 4
  store i32 %tmp89, i32* %r3.global-to-local, align 4
  store i32 %v3_a5b0, i32* %r2.global-to-local, align 4
  %v2_a6f4 = load i32, i32* %r5.global-to-local, align 4
  %v3_a6f4 = add i32 %v2_a6f4, 4
  %v4_a6f4 = inttoptr i32 %v3_a6f4 to i8*
  store i8 %v5_a574, i8* %v4_a6f4, align 1
  %v0_a6f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a6f8 = trunc i32 %v0_a6f8 to i8
  %v2_a6f8 = load i32, i32* %r5.global-to-local, align 4
  %v3_a6f8 = add i32 %v2_a6f8, 2
  %v4_a6f8 = inttoptr i32 %v3_a6f8 to i8*
  store i8 %v1_a6f8, i8* %v4_a6f8, align 1
  %v0_a6fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a6fc, label %bb93, label %bb92

bb92:                                             ; preds = %.thread22
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb93

bb93:                                             ; preds = %.thread22, %bb92
  store i32 %v3_a5b4, i32* %r1.global-to-local, align 4
  %v0_a704 = load i32, i32* %r2.global-to-local, align 4
  %v1_a704 = trunc i32 %v0_a704 to i8
  %v2_a704 = load i32, i32* %r5.global-to-local, align 4
  %v3_a704 = add i32 %v2_a704, 3
  %v4_a704 = inttoptr i32 %v3_a704 to i8*
  store i8 %v1_a704, i8* %v4_a704, align 1
  store i32 %v4_a630, i32* %r2.global-to-local, align 4
  %v0_a70c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a70c, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_a70c = load i32, i32* %r3.global-to-local, align 4
  %v2_a70c = trunc i32 %v1_a70c to i8
  %v3_a70c = load i32, i32* %r5.global-to-local, align 4
  %v4_a70c = add i32 %v3_a70c, 6
  %v5_a70c = inttoptr i32 %v4_a70c to i8*
  store i8 %v2_a70c, i8* %v5_a70c, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_a714 = load i32, i32* %r1.global-to-local, align 4
  %v1_a714 = trunc i32 %v0_a714 to i8
  %v2_a714 = load i32, i32* %r5.global-to-local, align 4
  %v3_a714 = add i32 %v2_a714, 5
  %v4_a714 = inttoptr i32 %v3_a714 to i8*
  store i8 %v1_a714, i8* %v4_a714, align 1
  %v0_a718 = load i32, i32* %r2.global-to-local, align 4
  %v1_a718 = trunc i32 %v0_a718 to i8
  %v2_a718 = load i32, i32* %r5.global-to-local, align 4
  %v3_a718 = add i32 %v2_a718, 8
  %v4_a718 = inttoptr i32 %v3_a718 to i8*
  store i8 %v1_a718, i8* %v4_a718, align 1
  %v0_a71c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a71c, label %bb97, label %bb96

bb96:                                             ; preds = %bb95
  %v1_a71c = load i32, i32* %ip.global-to-local, align 4
  %v2_a71c = trunc i32 %v1_a71c to i8
  %v3_a71c = load i32, i32* %r5.global-to-local, align 4
  %v4_a71c = add i32 %v3_a71c, 7
  %v5_a71c = inttoptr i32 %v4_a71c to i8*
  store i8 %v2_a71c, i8* %v5_a71c, align 1
  br label %bb97

bb97:                                             ; preds = %bb95, %bb96
  %v0_a720 = load i32, i32* %r3.global-to-local, align 4
  %v1_a720 = trunc i32 %v0_a720 to i8
  %v2_a720 = load i32, i32* %r5.global-to-local, align 4
  %v3_a720 = add i32 %v2_a720, 9
  %v4_a720 = inttoptr i32 %v3_a720 to i8*
  store i8 %v1_a720, i8* %v4_a720, align 1
  %v0_a724 = call i32 @function_f468()
  store i32 %v0_a724, i32* %r0.global-to-local, align 4
  store i32 %v1_a4cc, i32* %r1.global-to-local, align 4
  store i1 %v2_a730, i1* %cpsr_z.global-to-local, align 1
  %v1_a734 = sub i32 1023, %v0_a724
  store i32 %v1_a734, i32* %r3.global-to-local, align 4
  br i1 %v2_a730, label %.thread23, label %.thread24

.thread23:                                        ; preds = %bb97
  %v2_a73c = load i32, i32* %r5.global-to-local, align 4
  %v3_a73c = add i32 %v2_a73c, 16
  %v4_a73c = inttoptr i32 %v3_a73c to i32*
  store i32 %v1_a734, i32* %v4_a73c, align 4
  br label %bb98

.thread24:                                        ; preds = %bb97
  %v1_a738 = load i32, i32* %r4.global-to-local, align 4
  %v2_a738 = add i32 %v1_a738, 16
  %v3_a738 = inttoptr i32 %v2_a738 to i32*
  %v4_a738 = load i32, i32* %v3_a738, align 4
  store i32 %v4_a738, i32* %r3.global-to-local, align 4
  %v2_a740 = load i32, i32* %r5.global-to-local, align 4
  %v3_a740 = add i32 %v2_a740, 16
  %v4_a740 = inttoptr i32 %v3_a740 to i32*
  store i32 %v4_a738, i32* %v4_a740, align 4
  br label %bb98

bb98:                                             ; preds = %.thread23, %.thread24
  store i32 %v4_a744, i32* %r3.global-to-local, align 4
  %v0_a748 = load i32, i32* %r4.global-to-local, align 4
  %v1_a748 = add i32 %v0_a748, 58
  store i32 %v1_a748, i32* %r6.global-to-local, align 4
  %v1_a74c = load i32, i32* %r5.global-to-local, align 4
  %v2_a74c = add i32 %v1_a74c, 12
  %v3_a74c = inttoptr i32 %v2_a74c to i32*
  store i32 %v0_a724, i32* %v3_a74c, align 4
  %v0_a750 = load i32, i32* %r3.global-to-local, align 4
  %v1_a750 = trunc i32 %v0_a750 to i8
  %v2_a750 = load i32, i32* %r6.global-to-local, align 4
  %v3_a750 = add i32 %v2_a750, 1
  %v4_a750 = inttoptr i32 %v3_a750 to i8*
  store i8 %v1_a750, i8* %v4_a750, align 1
  %v3_a754 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a754, i32* %r3.global-to-local, align 4
  store i32 %v4_a758, i32* %r2.global-to-local, align 4
  %v1_a75c = add i32 %v3_a754, 1
  store i32 %v1_a75c, i32* %r4.global-to-local, align 4
  store i32 %v4_a760, i32* %r1.global-to-local, align 4
  %v1_a764 = load i32, i32* @fp, align 4
  %v9_a764 = icmp eq i32 %v1_a75c, %v1_a764
  store i1 %v9_a764, i1* %cpsr_z.global-to-local, align 1
  %v2_a768 = load i32, i32* %r6.global-to-local, align 4
  %v3_a768 = add i32 %v2_a768, 5
  %v4_a768 = inttoptr i32 %v3_a768 to i8*
  store i8 %v1_a768, i8* %v4_a768, align 1
  %v0_a76c = load i32, i32* %r7.global-to-local, align 4
  %v1_a76c = trunc i32 %v0_a76c to i8
  %v2_a76c = load i32, i32* %r6.global-to-local, align 4
  %v3_a76c = inttoptr i32 %v2_a76c to i8*
  store i8 %v1_a76c, i8* %v3_a76c, align 1
  %v0_a770 = load i32, i32* %sl.global-to-local, align 4
  %v1_a770 = trunc i32 %v0_a770 to i8
  %v2_a770 = load i32, i32* %r6.global-to-local, align 4
  %v3_a770 = add i32 %v2_a770, 2
  %v4_a770 = inttoptr i32 %v3_a770 to i8*
  store i8 %v1_a770, i8* %v4_a770, align 1
  %v0_a774 = load i32, i32* %r1.global-to-local, align 4
  %v1_a774 = trunc i32 %v0_a774 to i8
  %v2_a774 = load i32, i32* %r6.global-to-local, align 4
  %v3_a774 = add i32 %v2_a774, 3
  %v4_a774 = inttoptr i32 %v3_a774 to i8*
  store i8 %v1_a774, i8* %v4_a774, align 1
  %v0_a778 = load i32, i32* %r8.global-to-local, align 4
  %v1_a778 = trunc i32 %v0_a778 to i8
  %v2_a778 = load i32, i32* %r6.global-to-local, align 4
  %v3_a778 = add i32 %v2_a778, 4
  %v4_a778 = inttoptr i32 %v3_a778 to i8*
  store i8 %v1_a778, i8* %v4_a778, align 1
  %v0_a77c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_a77c, i32* %stack_var_-40, align 4
  %v5_a780 = icmp slt i32 %v1_a75c, %v1_a764
  br i1 %v5_a780, label %dec_label_pc_a5e4, label %dec_label_pc_a784

dec_label_pc_a784:                                ; preds = %bb98
  %v1_a78c = add i32 %v5_a41c, 8
  store i32 %v1_a78c, i32* %r2.global-to-local, align 4
  %v1_a790 = add i32 %v5_a41c, 66
  store i32 %v1_a790, i32* %r3.global-to-local, align 4
  %v0_a79c.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_a79c.preheader

dec_label_pc_a79c.preheader:                      ; preds = %dec_label_pc_a784, %dec_label_pc_aa8c
  %v0_a79c.pre = phi i32 [ %v0_a79c.pre.pre, %dec_label_pc_a784 ], [ %v0_a4e0, %dec_label_pc_aa8c ]
  %stack_var_-160.0.ph = phi i32 [ %v1_a790, %dec_label_pc_a784 ], [ %v1_aa98, %dec_label_pc_aa8c ]
  %stack_var_-156.0.ph = phi i32 [ %v1_a78c, %dec_label_pc_a784 ], [ %v1_aa94, %dec_label_pc_aa8c ]
  %v3_a9ec = icmp eq i32 %v3_a4d4, 65535
  %v2_aa5c = icmp eq i32 %v1_a4cc, 0
  %v2_a840 = ptrtoint i32* %stack_var_-44 to i32
  %v2_a858 = ptrtoint i32* %stack_var_-48 to i32
  %v2_a868 = ptrtoint i32* %stack_var_-52 to i32
  %v2_a874 = ptrtoint i32* %stack_var_-50 to i32
  %v2_a888 = icmp eq i32 %v1_a43c, 0
  %v2_a7e4 = icmp eq i32 %v5_a470, -1
  br label %dec_label_pc_a79c

dec_label_pc_a79c:                                ; preds = %dec_label_pc_a890, %dec_label_pc_a79c.preheader
  %v0_a79c = phi i32 [ %v0_a79c.pre, %dec_label_pc_a79c.preheader ], [ %v1_a954, %dec_label_pc_a890 ]
  %v2_a79c = icmp eq i32 %v0_a79c, 0
  store i1 %v2_a79c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp99 = icmp slt i32 %v0_a79c, 1
  br label %dec_label_pc_a7a4

dec_label_pc_a7a4:                                ; preds = %dec_label_pc_a7a4, %dec_label_pc_a79c
  br i1 %tmp99, label %dec_label_pc_a7a4, label %dec_label_pc_a7a8

dec_label_pc_a7a8:                                ; preds = %dec_label_pc_a7a4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_a7b4

dec_label_pc_a7b4:                                ; preds = %dec_label_pc_a890, %dec_label_pc_a7a8
  %v1_a7c8 = phi i32 [ %v1_a950, %dec_label_pc_a890 ], [ 0, %dec_label_pc_a7a8 ]
  %v5_a7b8 = mul i32 %v1_a7c8, 24
  %v1_a7bc = load i32, i32* @sb, align 4
  %v2_a7bc = add i32 %v1_a7bc, %v5_a7b8
  store i32 %v2_a7bc, i32* %r3.global-to-local, align 4
  store i32 %v4_a350, i32* %r1.global-to-local, align 4
  %v1_a7c4 = add i32 %v2_a7bc, 20
  %v2_a7c4 = inttoptr i32 %v1_a7c4 to i8*
  %v3_a7c4 = load i8, i8* %v2_a7c4, align 1
  %v4_a7c4 = zext i8 %v3_a7c4 to i32
  store i32 %v4_a7c4, i32* %r2.global-to-local, align 4
  %v4_a7c8 = mul i32 %v1_a7c8, 4
  %v5_a7c8 = add i32 %v4_a7c8, %v4_a350
  %v6_a7c8 = inttoptr i32 %v5_a7c8 to i32*
  %v7_a7c8 = load i32, i32* %v6_a7c8, align 4
  store i32 %v7_a7c8, i32* @r5, align 4
  %v7_a7cc = icmp eq i8 %v3_a7c4, 31
  store i1 %v7_a7cc, i1* %cpsr_z.global-to-local, align 1
  %v1_a7d0 = add i32 %v7_a7c8, 24
  store i32 %v1_a7d0, i32* @r8, align 4
  %v1_a7d4 = add i32 %v7_a7c8, 38
  store i32 %v1_a7d4, i32* @r6, align 4
  %v1_a7d8 = add i32 %v7_a7c8, 58
  store i32 %v1_a7d8, i32* @r7, align 4
  %tmp104 = icmp ult i8 %v3_a7c4, 32
  br i1 %tmp104, label %dec_label_pc_a974, label %dec_label_pc_a7e0

dec_label_pc_a7e0:                                ; preds = %dec_label_pc_a7b4
  store i32 %v5_a470, i32* %r2.global-to-local, align 4
  store i1 %v2_a7e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a7e4, label %dec_label_pc_a9dc, label %dec_label_pc_a7ec

dec_label_pc_a7ec:                                ; preds = %dec_label_pc_a974, %dec_label_pc_a7e0
  store i32 %v3_a4d4, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a9ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a9ec, label %dec_label_pc_a9f8, label %dec_label_pc_a800

dec_label_pc_a800:                                ; preds = %dec_label_pc_a9dc.dec_label_pc_a800_crit_edge, %dec_label_pc_a7ec
  %v1_a804 = phi i32 [ %v1_a804.pre, %dec_label_pc_a9dc.dec_label_pc_a800_crit_edge ], [ 65535, %dec_label_pc_a7ec ]
  store i32 %v3_a4d8, i32* %r1.global-to-local, align 4
  %v9_a804 = icmp eq i32 %v3_a4d8, %v1_a804
  store i1 %v9_a804, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a804, label %dec_label_pc_aa30, label %dec_label_pc_a80c

dec_label_pc_a80c:                                ; preds = %dec_label_pc_a9f8.dec_label_pc_a80c_crit_edge, %dec_label_pc_a800
  %v1_a810 = phi i32 [ %v1_a810.pre, %dec_label_pc_a9f8.dec_label_pc_a80c_crit_edge ], [ %v1_a804, %dec_label_pc_a800 ]
  store i32 %v3_a4dc, i32* %r2.global-to-local, align 4
  %v9_a810 = icmp eq i32 %v3_a4dc, %v1_a810
  store i1 %v9_a810, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a810, label %dec_label_pc_aa4c, label %dec_label_pc_a818

dec_label_pc_a818:                                ; preds = %dec_label_pc_aa30, %dec_label_pc_a80c
  store i32 %v1_a4cc, i32* %r3.global-to-local, align 4
  store i1 %v2_aa5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aa5c, label %dec_label_pc_aa70, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_a818
  %v1_a820 = load i32, i32* @r5, align 4
  %v2_a820 = add i32 %v1_a820, 16
  %v3_a820 = inttoptr i32 %v2_a820 to i32*
  %v4_a820 = load i32, i32* %v3_a820, align 4
  store i32 %v4_a820, i32* %r3.global-to-local, align 4
  %v2_a824 = load i32, i32* @r6, align 4
  %v3_a824 = add i32 %v2_a824, 16
  %v4_a824 = inttoptr i32 %v3_a824 to i32*
  store i32 %v4_a820, i32* %v4_a824, align 4
  br label %dec_label_pc_a82c

dec_label_pc_a82c:                                ; preds = %bb102, %.thread25, %dec_label_pc_aa70
  %v0_a82c = call i32 @function_f468()
  store i32 %v0_a82c, i32* %r0.global-to-local, align 4
  store i32 %v0_a82c, i32* %stack_var_-44, align 4
  %v0_a834 = call i32 @function_f468()
  store i32 %v0_a834, i32* %r0.global-to-local, align 4
  store i32 %v0_a834, i32* %stack_var_-48, align 4
  %v0_a83c = call i32 @function_f468()
  store i32 %v2_a840, i32* %r1.global-to-local, align 4
  store i32 %v0_a83c, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_a84c = load i32, i32* @r8, align 4
  store i32 %v0_a84c, i32* %r0.global-to-local, align 4
  %v3_a850 = call i32 @function_11780(i32 %v0_a84c, i32 %v2_a840, i32 4)
  %v0_a854 = load i32, i32* @r8, align 4
  %v1_a854 = add i32 %v0_a854, 6
  store i32 %v1_a854, i32* %r0.global-to-local, align 4
  store i32 %v2_a858, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_a860 = call i32 @function_11780(i32 %v1_a854, i32 %v2_a858, i32 4)
  %v0_a864 = load i32, i32* @r8, align 4
  %v1_a864 = add i32 %v0_a864, 4
  store i32 %v1_a864, i32* %r0.global-to-local, align 4
  store i32 %v2_a868, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_a870 = call i32 @function_11780(i32 %v1_a864, i32 %v2_a868, i32 2)
  store i32 %v2_a874, i32* %r1.global-to-local, align 4
  %v0_a878 = load i32, i32* @r8, align 4
  %v1_a878 = add i32 %v0_a878, 10
  store i32 %v1_a878, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_a880 = call i32 @function_11780(i32 %v1_a878, i32 %v2_a874, i32 2)
  store i32 %v3_a880, i32* %r0.global-to-local, align 4
  store i32 %v1_a43c, i32* %r1.global-to-local, align 4
  store i1 %v2_a888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a888, label %dec_label_pc_a890, label %dec_label_pc_aa7c

dec_label_pc_a890:                                ; preds = %dec_label_pc_a82c, %dec_label_pc_aa7c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a894 = load i32, i32* @sl, align 4
  %v1_a894 = trunc i32 %v0_a894 to i8
  %v2_a894 = load i32, i32* @r5, align 4
  %v3_a894 = add i32 %v2_a894, 10
  %v4_a894 = inttoptr i32 %v3_a894 to i8*
  store i8 %v1_a894, i8* %v4_a894, align 1
  %v0_a898 = load i32, i32* @sl, align 4
  %v1_a898 = trunc i32 %v0_a898 to i8
  %v2_a898 = load i32, i32* @r5, align 4
  %v3_a898 = add i32 %v2_a898, 11
  %v4_a898 = inttoptr i32 %v3_a898 to i8*
  store i8 %v1_a898, i8* %v4_a898, align 1
  %v0_a89c = load i32, i32* @r5, align 4
  store i32 %v0_a89c, i32* @r0, align 4
  %v2_a8a0 = call i32 @function_ddf4(i32 %v0_a89c, i32 20)
  %v3_a8a0 = trunc i32 %v2_a8a0 to i8
  %v4_a8a4 = sdiv i32 %v2_a8a0, 256
  store i32 %v4_a8a4, i32* %r3.global-to-local, align 4
  %v1_a8a8 = trunc i32 %v4_a8a4 to i8
  %v2_a8a8 = load i32, i32* @r5, align 4
  %v3_a8a8 = add i32 %v2_a8a8, 11
  %v4_a8a8 = inttoptr i32 %v3_a8a8 to i8*
  store i8 %v1_a8a8, i8* %v4_a8a8, align 1
  %v3_a8ac = load i32, i32* @r5, align 4
  %v4_a8ac = add i32 %v3_a8ac, 10
  %v5_a8ac = inttoptr i32 %v4_a8ac to i8*
  store i8 %v3_a8a0, i8* %v5_a8ac, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a8b4 = load i32, i32* @sl, align 4
  %v1_a8b4 = trunc i32 %v0_a8b4 to i8
  %v2_a8b4 = load i32, i32* @r6, align 4
  %v3_a8b4 = add i32 %v2_a8b4, 10
  %v4_a8b4 = inttoptr i32 %v3_a8b4 to i8*
  store i8 %v1_a8b4, i8* %v4_a8b4, align 1
  %v0_a8b8 = load i32, i32* @sl, align 4
  %v1_a8b8 = trunc i32 %v0_a8b8 to i8
  %v2_a8b8 = load i32, i32* @r6, align 4
  %v3_a8b8 = add i32 %v2_a8b8, 11
  %v4_a8b8 = inttoptr i32 %v3_a8b8 to i8*
  store i8 %v1_a8b8, i8* %v4_a8b8, align 1
  %v0_a8bc = load i32, i32* @r6, align 4
  store i32 %v0_a8bc, i32* @r0, align 4
  %v2_a8c0 = call i32 @function_ddf4(i32 %v0_a8bc, i32 20)
  %v3_a8c0 = trunc i32 %v2_a8c0 to i8
  store i32 %v2_a8c0, i32* %r0.global-to-local, align 4
  %v4_a8c4 = sdiv i32 %v2_a8c0, 256
  store i32 %v4_a8c4, i32* %r3.global-to-local, align 4
  %v3_a8c8 = load i32, i32* @r6, align 4
  %v4_a8c8 = add i32 %v3_a8c8, 10
  %v5_a8c8 = inttoptr i32 %v4_a8c8 to i8*
  store i8 %v3_a8c0, i8* %v5_a8c8, align 1
  %v0_a8cc = load i32, i32* %r3.global-to-local, align 4
  %v1_a8cc = trunc i32 %v0_a8cc to i8
  %v2_a8cc = load i32, i32* @r6, align 4
  %v3_a8cc = add i32 %v2_a8cc, 11
  %v4_a8cc = inttoptr i32 %v3_a8cc to i8*
  store i8 %v1_a8cc, i8* %v4_a8cc, align 1
  %v0_a8d0 = load i32, i32* @r7, align 4
  %v1_a8d0 = add i32 %v0_a8d0, 4
  %v2_a8d0 = inttoptr i32 %v1_a8d0 to i8*
  %v3_a8d0 = load i8, i8* %v2_a8d0, align 1
  %v4_a8d0 = zext i8 %v3_a8d0 to i32
  store i32 %v4_a8d0, i32* %r3.global-to-local, align 4
  %v1_a8d4 = add i32 %v0_a8d0, 5
  %v2_a8d4 = inttoptr i32 %v1_a8d4 to i8*
  %v3_a8d4 = load i8, i8* %v2_a8d4, align 1
  %v4_a8d4 = zext i8 %v3_a8d4 to i32
  store i32 %v0_a8d0, i32* @r1, align 4
  %v4_a8dc = mul nuw nsw i32 %v4_a8d4, 256
  %v5_a8dc = or i32 %v4_a8dc, %v4_a8d0
  store i32 %v5_a8dc, i32* %r2.global-to-local, align 4
  %v0_a8e0 = load i32, i32* @sl, align 4
  %v1_a8e0 = trunc i32 %v0_a8e0 to i8
  %v3_a8e0 = add i32 %v0_a8d0, 6
  %v4_a8e0 = inttoptr i32 %v3_a8e0 to i8*
  store i8 %v1_a8e0, i8* %v4_a8e0, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_a8e8 = load i32, i32* @sl, align 4
  %v1_a8e8 = trunc i32 %v0_a8e8 to i8
  %v2_a8e8 = load i32, i32* @r7, align 4
  %v3_a8e8 = add i32 %v2_a8e8, 7
  %v4_a8e8 = inttoptr i32 %v3_a8e8 to i8*
  store i8 %v1_a8e8, i8* %v4_a8e8, align 1
  %v0_a8ec = load i32, i32* @r6, align 4
  store i32 %v0_a8ec, i32* %r0.global-to-local, align 4
  %v4_a8f0 = call i32 @function_de50(i32 %v0_a8ec, i32 %v0_a8d0, i32 %v5_a8dc, i32 %stack_var_-156.0.ph)
  %v5_a8f0 = trunc i32 %v4_a8f0 to i8
  store i32 %v4_a8f0, i32* %r0.global-to-local, align 4
  %v3_a8f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a8f4, i32* %r3.global-to-local, align 4
  %v3_a8f8 = mul i32 %v3_a8f4, 32
  store i32 %v3_a8f8, i32* %r2.global-to-local, align 4
  %v0_a8fc = load i32, i32* @r5, align 4
  %v1_a8fc = add i32 %v0_a8fc, 16
  %v2_a8fc = inttoptr i32 %v1_a8fc to i32*
  %v3_a8fc = load i32, i32* %v2_a8fc, align 4
  store i32 %v3_a8fc, i32* %r1.global-to-local, align 4
  %v5_a900 = mul i32 %v3_a8f4, 24
  store i32 %v5_a900, i32* %r2.global-to-local, align 4
  %v4_a90440 = udiv i32 %v4_a8f0, 256
  %v1_a908 = trunc i32 %v4_a90440 to i8
  %v2_a908 = load i32, i32* @r7, align 4
  %v3_a908 = add i32 %v2_a908, 7
  %v4_a908 = inttoptr i32 %v3_a908 to i8*
  store i8 %v1_a908, i8* %v4_a908, align 1
  %v0_a90c = load i32, i32* %r2.global-to-local, align 4
  %v1_a90c = load i32, i32* @sb, align 4
  %v2_a90c = add i32 %v1_a90c, %v0_a90c
  store i32 %v2_a90c, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_a914 = load i32, i32* @r7, align 4
  %v4_a914 = add i32 %v3_a914, 6
  %v5_a914 = inttoptr i32 %v4_a914 to i8*
  store i8 %v5_a8f0, i8* %v5_a914, align 1
  %v0_a918 = load i32, i32* %r1.global-to-local, align 4
  %v1_a918 = load i32, i32* %lr.global-to-local, align 4
  %v2_a918 = add i32 %v1_a918, 4
  %v3_a918 = inttoptr i32 %v2_a918 to i32*
  store i32 %v0_a918, i32* %v3_a918, align 4
  %v0_a91c = load i32, i32* %r3.global-to-local, align 4
  %v1_a91c = trunc i32 %v0_a91c to i8
  %v2_a91c = load i32, i32* %r2.global-to-local, align 4
  %v3_a91c = load i32, i32* @sb, align 4
  %v4_a91c = add i32 %v3_a91c, %v2_a91c
  %v5_a91c = inttoptr i32 %v4_a91c to i8*
  store i8 %v1_a91c, i8* %v5_a91c, align 1
  %v0_a920 = load i32, i32* @sl, align 4
  %v1_a920 = trunc i32 %v0_a920 to i8
  %v2_a920 = load i32, i32* %lr.global-to-local, align 4
  %v3_a920 = add i32 %v2_a920, 2
  %v4_a920 = inttoptr i32 %v3_a920 to i8*
  store i8 %v1_a920, i8* %v4_a920, align 1
  %v0_a924 = load i32, i32* @sl, align 4
  %v1_a924 = trunc i32 %v0_a924 to i8
  %v2_a924 = load i32, i32* %lr.global-to-local, align 4
  %v3_a924 = add i32 %v2_a924, 1
  %v4_a924 = inttoptr i32 %v3_a924 to i8*
  store i8 %v1_a924, i8* %v4_a924, align 1
  %v0_a928 = load i32, i32* @sl, align 4
  %v1_a928 = trunc i32 %v0_a928 to i8
  %v2_a928 = load i32, i32* %lr.global-to-local, align 4
  %v3_a928 = add i32 %v2_a928, 3
  %v4_a928 = inttoptr i32 %v3_a928 to i8*
  store i8 %v1_a928, i8* %v4_a928, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a934 = load i32, i32* @r5, align 4
  store i32 %v0_a934, i32* %r1.global-to-local, align 4
  store i32 %v3_a484, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_a940 = load i32, i32* %lr.global-to-local, align 4
  %v4_a940 = inttoptr i32 %v0_a940 to %sockaddr*
  %v7_a948 = inttoptr i32 %v0_a934 to i32*
  %v9_a948 = call i32 @sendto(i32 %v3_a484, i32* %v7_a948, i32 %stack_var_-160.0.ph, i32 16384, %sockaddr* %v4_a940, i32 16)
  %v3_a94c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a94c, i32* %r3.global-to-local, align 4
  %v1_a950 = add i32 %v3_a94c, 1
  store i32 %v1_a950, i32* %r0.global-to-local, align 4
  %v1_a954 = load i32, i32* @fp, align 4
  %v9_a954 = icmp eq i32 %v1_a950, %v1_a954
  store i1 %v9_a954, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a950, i32* %stack_var_-40, align 4
  %v6_a95c = icmp slt i32 %v1_a950, %v1_a954
  br i1 %v6_a95c, label %dec_label_pc_a7b4, label %dec_label_pc_a79c

dec_label_pc_a964:                                ; preds = %dec_label_pc_a494
  store i32 %v3_a484, i32* %r0.global-to-local, align 4
  %v1_a968 = call i32 @close(i32 %v3_a484)
  store i32 %v1_a968, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a96c

dec_label_pc_a96c:                                ; preds = %dec_label_pc_a330, %dec_label_pc_a964
  %v29_a970 = phi i32 [ -1, %dec_label_pc_a330 ], [ %v1_a968, %dec_label_pc_a964 ]
  store i32 %v3_a330, i32* %r4.global-to-local, align 4
  store i32 %v6_a330, i32* %r5.global-to-local, align 4
  store i32 %v9_a330, i32* %r6.global-to-local, align 4
  store i32 %v12_a330, i32* %r7.global-to-local, align 4
  store i32 %v15_a330, i32* %r8.global-to-local, align 4
  store i32 %v21_a330, i32* %sl.global-to-local, align 4
  ret i32 %v29_a970

dec_label_pc_a974:                                ; preds = %dec_label_pc_a7b4
  %v1_a974 = add i32 %v2_a7bc, 16
  %v2_a974 = inttoptr i32 %v1_a974 to i32*
  %v3_a974 = load i32, i32* %v2_a974, align 4
  store i32 %v3_a974, i32* %r4.global-to-local, align 4
  %v0_a978 = call i32 @function_f468()
  store i32 %v0_a978, i32* %r0.global-to-local, align 4
  %v3_a97c = load i32, i32* %stack_var_-40, align 4
  %v5_a984 = mul i32 %v3_a97c, 24
  %v0_a988 = load i32, i32* %r4.global-to-local, align 4
  %v1_a98c = load i32, i32* @sb, align 4
  %v2_a98c = add i32 %v1_a98c, %v5_a984
  store i32 %v2_a98c, i32* %r1.global-to-local, align 4
  %v1_a990 = and i32 %v0_a988, 65280
  store i32 %v1_a990, i32* %r3.global-to-local, align 4
  %v1_a988 = udiv i32 %v0_a988, 256
  %v3_a994 = and i32 %v1_a988, 65280
  store i32 %v3_a994, i32* %r2.global-to-local, align 4
  %v3_a998 = mul i32 %v0_a988, 16777216
  store i32 %v3_a998, i32* %ip.global-to-local, align 4
  %v1_a99c = add i32 %v2_a98c, 20
  %v2_a99c = inttoptr i32 %v1_a99c to i8*
  %v3_a99c = load i8, i8* %v2_a99c, align 1
  %v4_a99c = zext i8 %v3_a99c to i32
  store i32 %v4_a99c, i32* %lr.global-to-local, align 4
  %v4_a9a0 = mul nuw nsw i32 %v1_a990, 256
  %v5_a9a0 = or i32 %v4_a9a0, %v3_a998
  store i32 %v5_a9a0, i32* %ip.global-to-local, align 4
  %v2_a9a8 = call i32 @llvm.bswap.i32(i32 %v0_a988)
  %v7_a9ac = lshr i32 %v0_a978, %v4_a99c
  %v8_a9ac = add i32 %v7_a9ac, %v2_a9a8
  %v3_a9b8 = mul i32 %v8_a9ac, 16777216
  %v1_a9bc = and i32 %v8_a9ac, 65280
  store i32 %v1_a9bc, i32* %r0.global-to-local, align 4
  store i32 %v5_a470, i32* %r2.global-to-local, align 4
  %v4_a9c8 = mul nuw nsw i32 %v1_a9bc, 256
  %v5_a9c8 = or i32 %v4_a9c8, %v3_a9b8
  store i32 %v5_a9c8, i32* %r1.global-to-local, align 4
  %v2_a9cc = call i32 @llvm.bswap.i32(i32 %v8_a9ac)
  store i32 %v2_a9cc, i32* %r3.global-to-local, align 4
  store i1 %v2_a7e4, i1* %cpsr_z.global-to-local, align 1
  %v1_a9d4 = load i32, i32* @r5, align 4
  %v2_a9d4 = add i32 %v1_a9d4, 16
  %v3_a9d4 = inttoptr i32 %v2_a9d4 to i32*
  store i32 %v2_a9cc, i32* %v3_a9d4, align 4
  br i1 %v2_a7e4, label %dec_label_pc_a9dc, label %dec_label_pc_a7ec

dec_label_pc_a9dc:                                ; preds = %dec_label_pc_a974, %dec_label_pc_a7e0
  %v0_a9dc = call i32 @function_f468()
  store i32 %v0_a9dc, i32* %r0.global-to-local, align 4
  store i32 %v3_a4d4, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a9ec, i1* %cpsr_z.global-to-local, align 1
  %v1_a9f0 = load i32, i32* @r5, align 4
  %v2_a9f0 = add i32 %v1_a9f0, 12
  %v3_a9f0 = inttoptr i32 %v2_a9f0 to i32*
  store i32 %v0_a9dc, i32* %v3_a9f0, align 4
  br i1 %v3_a9ec, label %dec_label_pc_a9f8, label %dec_label_pc_a9dc.dec_label_pc_a800_crit_edge

dec_label_pc_a9dc.dec_label_pc_a800_crit_edge:    ; preds = %dec_label_pc_a9dc
  %v1_a804.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a800

dec_label_pc_a9f8:                                ; preds = %dec_label_pc_a9dc, %dec_label_pc_a7ec
  %v0_a9f8 = call i32 @function_f468()
  %v3_aa00 = urem i32 %v0_a9f8, 65536
  store i32 %v3_aa00, i32* %r0.global-to-local, align 4
  %v1_aa08 = sub nsw i32 999, %v3_aa00
  store i32 %v1_aa08, i32* %r2.global-to-local, align 4
  %v3_aa0c = sdiv i32 %v1_aa08, 256
  store i32 %v3_aa0c, i32* %r1.global-to-local, align 4
  %v3_aa1039 = udiv i32 %v3_aa00, 256
  store i32 %v3_aa1039, i32* %r3.global-to-local, align 4
  %v1_aa14 = trunc i32 %v3_aa1039 to i8
  %v2_aa14 = load i32, i32* @r5, align 4
  %v3_aa14 = add i32 %v2_aa14, 5
  %v4_aa14 = inttoptr i32 %v3_aa14 to i8*
  store i8 %v1_aa14, i8* %v4_aa14, align 1
  %v0_aa18 = load i32, i32* %r0.global-to-local, align 4
  %v1_aa18 = trunc i32 %v0_aa18 to i8
  %v2_aa18 = load i32, i32* @r5, align 4
  %v3_aa18 = add i32 %v2_aa18, 4
  %v4_aa18 = inttoptr i32 %v3_aa18 to i8*
  store i8 %v1_aa18, i8* %v4_aa18, align 1
  %v0_aa1c = load i32, i32* %r1.global-to-local, align 4
  %v1_aa1c = trunc i32 %v0_aa1c to i8
  %v2_aa1c = load i32, i32* @r6, align 4
  %v3_aa1c = add i32 %v2_aa1c, 5
  %v4_aa1c = inttoptr i32 %v3_aa1c to i8*
  store i8 %v1_aa1c, i8* %v4_aa1c, align 1
  store i32 %v3_a4d8, i32* %r1.global-to-local, align 4
  %v1_aa24 = load i32, i32* @r4, align 4
  %v9_aa24 = icmp eq i32 %v3_a4d8, %v1_aa24
  store i1 %v9_aa24, i1* %cpsr_z.global-to-local, align 1
  %v0_aa28 = load i32, i32* %r2.global-to-local, align 4
  %v1_aa28 = trunc i32 %v0_aa28 to i8
  %v2_aa28 = load i32, i32* @r6, align 4
  %v3_aa28 = add i32 %v2_aa28, 4
  %v4_aa28 = inttoptr i32 %v3_aa28 to i8*
  store i8 %v1_aa28, i8* %v4_aa28, align 1
  %v0_aa2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa2c, label %dec_label_pc_aa30, label %dec_label_pc_a9f8.dec_label_pc_a80c_crit_edge

dec_label_pc_a9f8.dec_label_pc_a80c_crit_edge:    ; preds = %dec_label_pc_a9f8
  %v1_a810.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a80c

dec_label_pc_aa30:                                ; preds = %dec_label_pc_a9f8, %dec_label_pc_a800
  %v0_aa30 = call i32 @function_f468()
  %v1_aa30 = trunc i32 %v0_aa30 to i8
  store i32 %v0_aa30, i32* %r0.global-to-local, align 4
  store i32 %v3_a4dc, i32* %r2.global-to-local, align 4
  %v4_aa38 = sdiv i32 %v0_aa30, 256
  store i32 %v4_aa38, i32* %r3.global-to-local, align 4
  %v1_aa3c = load i32, i32* @r4, align 4
  %v9_aa3c = icmp eq i32 %v3_a4dc, %v1_aa3c
  store i1 %v9_aa3c, i1* %cpsr_z.global-to-local, align 1
  %v3_aa40 = load i32, i32* @r5, align 4
  %v4_aa40 = add i32 %v3_aa40, 58
  %v5_aa40 = inttoptr i32 %v4_aa40 to i8*
  store i8 %v1_aa30, i8* %v5_aa40, align 1
  %v0_aa44 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa44 = trunc i32 %v0_aa44 to i8
  %v2_aa44 = load i32, i32* @r7, align 4
  %v3_aa44 = add i32 %v2_aa44, 1
  %v4_aa44 = inttoptr i32 %v3_aa44 to i8*
  store i8 %v1_aa44, i8* %v4_aa44, align 1
  %v0_aa48 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa48, label %dec_label_pc_aa4c, label %dec_label_pc_a818

dec_label_pc_aa4c:                                ; preds = %dec_label_pc_aa30, %dec_label_pc_a80c
  %v0_aa4c = call i32 @function_f468()
  %v1_aa4c = trunc i32 %v0_aa4c to i8
  store i32 %v0_aa4c, i32* %r0.global-to-local, align 4
  %v4_aa5041 = udiv i32 %v0_aa4c, 256
  %v1_aa54 = trunc i32 %v4_aa5041 to i8
  %v2_aa54 = load i32, i32* @r7, align 4
  %v3_aa54 = add i32 %v2_aa54, 3
  %v4_aa54 = inttoptr i32 %v3_aa54 to i8*
  store i8 %v1_aa54, i8* %v4_aa54, align 1
  store i32 %v1_a4cc, i32* %r3.global-to-local, align 4
  store i1 %v2_aa5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aa5c, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_aa4c
  %v1_aa60 = load i32, i32* @r5, align 4
  %v2_aa60 = add i32 %v1_aa60, 16
  %v3_aa60 = inttoptr i32 %v2_aa60 to i32*
  %v4_aa60 = load i32, i32* %v3_aa60, align 4
  store i32 %v4_aa60, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_aa4c, %bb100
  %v3_aa64 = load i32, i32* @r7, align 4
  %v4_aa64 = add i32 %v3_aa64, 2
  %v5_aa64 = inttoptr i32 %v4_aa64 to i8*
  store i8 %v1_aa4c, i8* %v5_aa64, align 1
  %v0_aa68 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa68, label %dec_label_pc_aa70, label %bb102

bb102:                                            ; preds = %bb101
  %v1_aa68 = load i32, i32* %r3.global-to-local, align 4
  %v2_aa68 = load i32, i32* @r6, align 4
  %v3_aa68 = add i32 %v2_aa68, 16
  %v4_aa68 = inttoptr i32 %v3_aa68 to i32*
  store i32 %v1_aa68, i32* %v4_aa68, align 4
  br label %dec_label_pc_a82c

dec_label_pc_aa70:                                ; preds = %dec_label_pc_a818, %bb101
  %v0_aa70 = call i32 @function_f468()
  store i32 %v0_aa70, i32* %r0.global-to-local, align 4
  %v1_aa74 = load i32, i32* @r6, align 4
  %v2_aa74 = add i32 %v1_aa74, 16
  %v3_aa74 = inttoptr i32 %v2_aa74 to i32*
  store i32 %v0_aa70, i32* %v3_aa74, align 4
  br label %dec_label_pc_a82c

dec_label_pc_aa7c:                                ; preds = %dec_label_pc_a82c
  %v0_aa7c = load i32, i32* @r7, align 4
  %v1_aa7c = add i32 %v0_aa7c, 8
  store i32 %v1_aa7c, i32* %r0.global-to-local, align 4
  store i32 %v5_a41c, i32* @r1, align 4
  %v1_aa84 = inttoptr i32 %v1_aa7c to i8*
  %v2_aa84 = call i32 @function_f5e8(i8* %v1_aa84)
  store i32 %v2_aa84, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a890

dec_label_pc_aa8c:                                ; preds = %dec_label_pc_a4bc
  %v1_aa94 = add i32 %v5_a41c, 8
  store i32 %v1_aa94, i32* %r1.global-to-local, align 4
  %v1_aa98 = add i32 %v5_a41c, 66
  store i32 %v1_aa98, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_a79c.preheader

; uselistorder directives
  uselistorder i32 %v1_aa98, { 1, 0 }
  uselistorder i32 %v1_aa94, { 1, 0 }
  uselistorder i32 %v0_aa4c, { 0, 2, 1 }
  uselistorder i32 %v0_aa30, { 0, 2, 1 }
  uselistorder i32 %v3_aa00, { 0, 2, 1 }
  uselistorder i32 %v2_a9cc, { 1, 0 }
  uselistorder i32 %v8_a9ac, { 1, 2, 0 }
  uselistorder i32 %v3_a998, { 1, 0 }
  uselistorder i32 %v0_a988, { 2, 0, 1, 3 }
  uselistorder i32 %v1_a954, { 1, 2, 0 }
  uselistorder i32 %v1_a950, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_a8f4, { 1, 0, 2 }
  uselistorder i32 %v4_a8f0, { 0, 2, 1 }
  uselistorder i32 %v0_a8d0, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_a8c0, { 0, 2, 1 }
  uselistorder i32 %v4_a8a4, { 1, 0 }
  uselistorder i32 %v7_a7c8, { 2, 1, 0, 3 }
  uselistorder i32 %v0_a79c, { 1, 0 }
  uselistorder i1 %v2_a7e4, { 3, 0, 1, 2 }
  uselistorder i1 %v2_aa5c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_a9ec, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a724, { 1, 0, 2 }
  uselistorder i32 %v3_a58c, { 1, 0 }
  uselistorder i32 %tmp89, { 1, 0 }
  uselistorder i32 %v1_a530, { 1, 0 }
  uselistorder i32 %v1_a52c, { 2, 1, 0 }
  uselistorder i32 %v1_a518, { 1, 0 }
  uselistorder i32 %v1_a514, { 2, 1, 0 }
  uselistorder i32 %v1_a50c, { 0, 2, 1 }
  uselistorder i32 %v3_a504, { 2, 1, 0 }
  uselistorder i32 %v0_a4e0, { 1, 0, 2 }
  uselistorder i32 %v3_a4d4, { 2, 1, 3, 0 }
  uselistorder i32 %v1_a4cc, { 4, 3, 5, 1, 2, 0 }
  uselistorder i32 %v3_a4c8, { 2, 0, 1 }
  uselistorder i32 %v0_a4c8, { 2, 1, 0 }
  uselistorder i32 %v0_a4c0, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_a4bc, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_a484, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 %v5_a470, { 4, 2, 3, 1, 0 }
  uselistorder i32 %v1_a43c, { 1, 2, 0 }
  uselistorder i32 %v5_a41c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_a3d0, { 1, 0 }
  uselistorder i8 %v5_a3c0, { 1, 0 }
  uselistorder i32 %v5_a3a4, { 1, 0 }
  uselistorder i32 %v6_a368, { 1, 0 }
  uselistorder i32 %v4_a350, { 0, 3, 1, 2 }
  uselistorder i32 %v1_a334, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 42, 41, 43, 44, 46, 45, 48, 47, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 19, 18, 20, 21, 22, 23, 25, 24, 29, 26, 27, 28, 32, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 27 }
  uselistorder label %dec_label_pc_aa70, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_a96c, { 1, 0 }
  uselistorder label %dec_label_pc_a890, { 1, 0 }
  uselistorder label %dec_label_pc_a82c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a79c.preheader, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %.thread22, { 2, 1, 0 }
}

define i32 @function_aaac(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_aaac:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_aaac = load i32, i32* @r4, align 4
  %v6_aaac = load i32, i32* @r5, align 4
  %v9_aaac = load i32, i32* @r6, align 4
  %v12_aaac = load i32, i32* @r7, align 4
  %v15_aaac = load i32, i32* @r8, align 4
  %v1_aab0 = urem i32 %arg1, 256
  store i32 %v1_aab0, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_aab0, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_aac8 = urem i32 %arg3, 256
  store i32 %v1_aac8, i32* @r4, align 4
  %v2_aacc = call i32* @calloc(i32 %v1_aab0, i32 4)
  %v4_aacc = ptrtoint i32* %v2_aacc to i32
  %v0_aad0 = load i32, i32* @r5, align 4
  store i32 %v0_aad0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_aae0 = load i32, i32* @r4, align 4
  store i32 %v0_aae0, i32* %r0.global-to-local, align 4
  %v5_aae4 = inttoptr i32 %v0_aad0 to i32*
  %v6_aae4 = call i32 @function_92dc(i32 %v0_aae0, i32* %v5_aae4, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_aafc = load i32, i32* @r5, align 4
  store i32 %v0_aafc, i32* %r1.global-to-local, align 4
  %v0_ab00 = load i32, i32* @r4, align 4
  store i32 %v0_ab00, i32* %r0.global-to-local, align 4
  %v5_ab04 = trunc i32 %v6_aae4 to i8
  %v6_ab08 = inttoptr i32 %v0_aafc to i32*
  %v7_ab08 = call i32 @function_92dc(i32 %v0_ab00, i32* %v6_ab08, i32 3, i32 65535)
  %v0_ab0c = load i32, i32* @r5, align 4
  store i32 %v0_ab0c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_ab08, i32* @r7, align 4
  %v0_ab1c = load i32, i32* @r4, align 4
  store i32 %v0_ab1c, i32* %r0.global-to-local, align 4
  %v4_ab20 = inttoptr i32 %v0_ab0c to i32*
  %v5_ab20 = call i32 @function_92dc(i32 %v0_ab1c, i32* %v4_ab20, i32 4, i32 64)
  %v0_ab2c = load i32, i32* @r5, align 4
  store i32 %v0_ab2c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ab38 = load i32, i32* @r4, align 4
  store i32 %v0_ab38, i32* %r0.global-to-local, align 4
  %v5_ab3c = trunc i32 %v5_ab20 to i8
  %v6_ab40 = inttoptr i32 %v0_ab2c to i32*
  %v7_ab40 = call i32 @function_92dc(i32 %v0_ab38, i32* %v6_ab40, i32 5, i32 1)
  %v1_ab4c = urem i32 %v7_ab40, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ab58 = load i32, i32* @r5, align 4
  store i32 %v0_ab58, i32* %r1.global-to-local, align 4
  %v0_ab5c = load i32, i32* @r4, align 4
  store i32 %v0_ab5c, i32* %r0.global-to-local, align 4
  %v5_ab64 = inttoptr i32 %v0_ab58 to i32*
  %v6_ab64 = call i32 @function_92dc(i32 %v0_ab5c, i32* %v5_ab64, i32 6, i32 65535)
  %v0_ab6c = load i32, i32* @r5, align 4
  store i32 %v0_ab6c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_ab64, i32* @sl, align 4
  %v0_ab7c = load i32, i32* @r4, align 4
  store i32 %v0_ab7c, i32* %r0.global-to-local, align 4
  %v4_ab80 = inttoptr i32 %v0_ab6c to i32*
  %v5_ab80 = call i32 @function_92dc(i32 %v0_ab7c, i32* %v4_ab80, i32 7, i32 65535)
  %v0_ab84 = load i32, i32* @r5, align 4
  store i32 %v0_ab84, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_ab80, i32* @r8, align 4
  %v0_ab94 = load i32, i32* @r4, align 4
  store i32 %v0_ab94, i32* %r0.global-to-local, align 4
  %v4_ab98 = inttoptr i32 %v0_ab84 to i32*
  %v5_ab98 = call i32 @function_92dc(i32 %v0_ab94, i32* %v4_ab98, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_aba8 = load i32, i32* @r5, align 4
  store i32 %v0_aba8, i32* %r1.global-to-local, align 4
  %v0_abac = load i32, i32* @r4, align 4
  store i32 %v0_abac, i32* %r0.global-to-local, align 4
  %v4_abb0 = inttoptr i32 %v0_aba8 to i32*
  %v5_abb0 = call i32 @function_92dc(i32 %v0_abac, i32* %v4_abb0, i32 1, i32 1)
  %v1_abb8 = urem i32 %v5_abb0, 256
  %v0_abbc = load i32, i32* @r5, align 4
  store i32 %v0_abbc, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_abc8 = load i32, i32* @r4, align 4
  store i32 %v0_abc8, i32* %r0.global-to-local, align 4
  %v5_abd0 = inttoptr i32 %v0_abbc to i32*
  %v6_abd0 = call i32 @function_92dc(i32 %v0_abc8, i32* %v5_abd0, i32 19, i32 0)
  %v0_abd8 = load i32, i32* @r5, align 4
  store i32 %v0_abd8, i32* %r1.global-to-local, align 4
  %v2_abdc = load i32, i32* @global_var_1a40c.102, align 4
  store i32 %v2_abdc, i32* %r3.global-to-local, align 4
  store i32 %v6_abd0, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_abe8 = load i32, i32* @r4, align 4
  store i32 %v0_abe8, i32* %r0.global-to-local, align 4
  %v4_abec = inttoptr i32 %v0_abd8 to i32*
  %v5_abec = call i32 @function_92dc(i32 %v0_abe8, i32* %v4_abec, i32 25, i32 %v2_abdc)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_ac00 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_ac00, i32* %r0.global-to-local, align 4
  %v2_ac04 = icmp eq i32 %v3_ac00, -1
  store i1 %v2_ac04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ac04, label %dec_label_pc_b084, label %dec_label_pc_ac10

dec_label_pc_ac10:                                ; preds = %dec_label_pc_aaac
  store i32 1, i32* %stack_var_-40, align 4
  %v6_ac18 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_ac18, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_ac2c = call i32 @setsockopt(i32 %v3_ac00, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_ac2c, i32* %r0.global-to-local, align 4
  %v2_ac30 = icmp eq i32 %v7_ac2c, -1
  store i1 %v2_ac30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ac30, label %dec_label_pc_b07c, label %dec_label_pc_ac38

dec_label_pc_ac38:                                ; preds = %dec_label_pc_ac10
  %v0_ac38 = load i32, i32* @sl, align 4
  %v0_ac44 = load i32, i32* @r8, align 4
  %v3_ac44 = mul i32 %v0_ac44, 65536
  store i32 %v3_ac44, i32* %r8.global-to-local, align 4
  %v0_ac48 = load i32, i32* @r7, align 4
  %v3_ac48 = mul i32 %v0_ac48, 65536
  store i32 %v3_ac48, i32* %r7.global-to-local, align 4
  %v0_ac4c = load i32, i32* @r6, align 4
  %v1_ac4c = urem i32 %v0_ac4c, 256
  store i32 %v1_ac4c, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ac54 = urem i32 %v0_ac38, 65536
  store i32 %v3_ac54, i32* %r2.global-to-local, align 4
  %v3_ac58 = urem i32 %v0_ac44, 65536
  store i32 %v3_ac58, i32* %r3.global-to-local, align 4
  %v0_ac5c = load i32, i32* @fp, align 4
  %v2_ac5c = icmp eq i32 %v0_ac5c, 0
  store i1 %v2_ac5c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_ac6c = urem i32 %v0_ac48, 65536
  store i32 %v3_ac6c, i32* @sl, align 4
  %tmp85 = icmp slt i32 %v0_ac5c, 1
  br i1 %tmp85, label %dec_label_pc_b1a8, label %dec_label_pc_ac7c

dec_label_pc_ac7c:                                ; preds = %dec_label_pc_ac38
  %v3_ac80 = mul i32 %v5_ab98, 65536
  %v1_ac84 = add i32 %v3_ac80, 3407872
  %v3_ac8c = udiv i32 %v1_ac84, 256
  %v0_ac48.not = or i32 %v0_ac48, -65536
  %v1_ac9c = xor i32 %v0_ac48.not, 65535
  %v1_aca0 = urem i32 %v0_ac44, 256
  %tmp86 = mul nsw i32 %v1_ac9c, 256
  %v1_acb8 = and i32 %v3_ac8c, 65280
  %v1_acbc = add i32 %v3_ac80, 524288
  %v4_acc0 = udiv i32 %v1_ac84, 16777216
  %v5_acc0 = or i32 %v1_acb8, %v4_acc0
  store i32 %v5_acc0, i32* %r0.global-to-local, align 4
  %v1_acc4 = add i32 %v3_ac80, 1835008
  %v1_accc = and i32 %tmp86, 65280
  store i32 %v1_accc, i32* %lr.global-to-local, align 4
  %tmp87 = udiv i32 %v1_ac9c, 256
  %tmp88 = udiv i32 %v0_ac48, 256
  %v5_ace0 = trunc i32 %tmp87 to i8
  %tmp89 = udiv i32 %v0_ac38, 256
  %sext30 = mul i32 %tmp88, 16777216
  %v4_ad00 = sdiv i32 %sext30, 16777216
  %v3_ad0c = mul nuw nsw i32 %v1_aca0, 256
  store i32 %v3_ad0c, i32* %r5.global-to-local, align 4
  %v3_ad10 = udiv i32 %v1_acbc, 256
  %tmp90 = udiv i32 %v0_ac44, 256
  %v4_ad18 = urem i32 %tmp90, 256
  %v5_ad18 = or i32 %v4_ad18, %v3_ad0c
  store i32 %v5_ad18, i32* %r7.global-to-local, align 4
  %v3_ad1c = ashr i32 %sext30, 31
  %v3_ad28 = sdiv i32 %v1_acc4, 16777216
  %v1_ad2c = and i32 %v3_ad10, 65280
  store i32 %v1_ad2c, i32* %r6.global-to-local, align 4
  %sext31 = mul i32 %tmp89, 16777216
  %v4_ad34 = sdiv i32 %sext31, 16777216
  %v3_ad38 = ashr i32 %v1_acc4, 31
  %v3_ad3c = udiv i32 %v1_ac9c, 65536
  %v4_ad40 = udiv i32 %v1_acbc, 16777216
  %v5_ad40 = or i32 %v1_ad2c, %v4_ad40
  store i32 %v5_ad40, i32* %r8.global-to-local, align 4
  %v3_ad4c = ashr i32 %sext31, 31
  store i32 %v3_ad4c, i32* %r1.global-to-local, align 4
  store i32 %v1_aca0, i32* %r2.global-to-local, align 4
  %v3_ad5442 = udiv i32 %v1_ad2c, 256
  store i32 %v3_ad5442, i32* %r3.global-to-local, align 4
  %v5_ad5c = trunc i32 %v3_ad4c to i8
  store i32 0, i32* %r4.global-to-local, align 4
  %v4_adb8 = sext i8 %v5_ab3c to i32
  %sext = mul i32 %v1_ac84, 256
  %v4_adc0 = sdiv i32 %sext, 16777216
  %sext17 = mul nuw i32 %v4_acc0, 16777216
  %v4_add0 = sdiv i32 %sext17, 16777216
  %v2_aea4 = icmp eq i32 %v1_ac4c, 0
  %sext21 = mul i32 %v1_acbc, 256
  %v4_aec4 = sdiv i32 %sext21, 16777216
  %sext22 = mul i32 %v0_ac44, 16777216
  %v7_aedc = sdiv i32 %sext22, 16777216
  %v1_adcc = trunc i32 %v4_adc0 to i8
  br label %dec_label_pc_ad6c

dec_label_pc_ad6c:                                ; preds = %bb97, %dec_label_pc_ac7c
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_ad78 = call i32* @calloc(i32 1510, i32 4)
  %v4_ad78 = ptrtoint i32* %v2_ad78 to i32
  store i32 %v4_ad78, i32* %r0.global-to-local, align 4
  store i32 %v4_aacc, i32* %r1.global-to-local, align 4
  %v3_ad80 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ad80, i32* %r3.global-to-local, align 4
  %v2_ad84 = load i32, i32* %r4.global-to-local, align 4
  %v5_ad84 = mul i32 %v2_ad84, 4
  %v6_ad84 = add i32 %v5_ad84, %v4_aacc
  %v7_ad84 = inttoptr i32 %v6_ad84 to i32*
  store i32 %v4_ad78, i32* %v7_ad84, align 4
  %v0_ad88 = load i32, i32* %r1.global-to-local, align 4
  %v1_ad88 = load i32, i32* %r3.global-to-local, align 4
  %v4_ad88 = mul i32 %v1_ad88, 4
  %v5_ad88 = add i32 %v4_ad88, %v0_ad88
  %v6_ad88 = inttoptr i32 %v5_ad88 to i32*
  %v7_ad88 = load i32, i32* %v6_ad88, align 4
  store i32 %v7_ad88, i32* %r4.global-to-local, align 4
  %v1_ad8c = inttoptr i32 %v7_ad88 to i8*
  %v2_ad8c = load i8, i8* %v1_ad8c, align 1
  %tmp = urem i8 %v2_ad8c, 16
  %v1_ad90 = zext i8 %tmp to i32
  %v1_ad94 = or i32 %v1_ad90, 64
  store i32 %v1_ad94, i32* %r2.global-to-local, align 4
  %v1_ad98 = trunc i32 %v1_ad94 to i8
  store i8 %v1_ad98, i8* %v1_ad8c, align 1
  %v0_ad9c = load i32, i32* %r4.global-to-local, align 4
  %v1_ad9c = inttoptr i32 %v0_ad9c to i8*
  %v2_ad9c = load i8, i8* %v1_ad9c, align 1
  %v1_ada0 = and i8 %v2_ad9c, -16
  %v1_ada4 = or i8 %v1_ada0, 5
  store i32 %v1_ab4c, i32* %r2.global-to-local, align 4
  store i8 %v1_ada4, i8* %v1_ad9c, align 1
  %v2_adb4 = load i32, i32* %r4.global-to-local, align 4
  %v3_adb4 = add i32 %v2_adb4, 1
  %v4_adb4 = inttoptr i32 %v3_adb4 to i8*
  store i8 %v5_ab04, i8* %v4_adb4, align 1
  store i32 %v4_adb8, i32* %r1.global-to-local, align 4
  %v2_adbc = load i32, i32* %r4.global-to-local, align 4
  %v3_adbc = add i32 %v2_adbc, 8
  %v4_adbc = inttoptr i32 %v3_adbc to i8*
  store i8 %v5_ab3c, i8* %v4_adbc, align 1
  store i32 %v4_adc0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_adc8 = load i32, i32* %r2.global-to-local, align 4
  %v9_adc8 = icmp eq i32 %v0_adc8, 0
  store i1 %v9_adc8, i1* %cpsr_z.global-to-local, align 1
  %v2_adcc = load i32, i32* %r4.global-to-local, align 4
  %v3_adcc = add i32 %v2_adcc, 3
  %v4_adcc = inttoptr i32 %v3_adcc to i8*
  store i8 %v1_adcc, i8* %v4_adcc, align 1
  store i32 %v4_add0, i32* %r2.global-to-local, align 4
  %v0_add4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_add4, label %.thread24, label %.thread

.thread:                                          ; preds = %dec_label_pc_ad6c
  %v1_add4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_add4, i32* %r3.global-to-local, align 4
  %v2_add8 = trunc i32 %v1_add4 to i8
  %v3_add8 = load i32, i32* %r4.global-to-local, align 4
  %v4_add8 = add i32 %v3_add8, 7
  %v5_add8 = inttoptr i32 %v4_add8 to i8*
  store i8 %v2_add8, i8* %v5_add8, align 1
  %v0_addc.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_addc.pr.pr, label %.thread24, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ade0 = load i32, i32* %r4.global-to-local, align 4
  %v4_ade0 = add i32 %v3_ade0, 6
  %v5_ade0 = inttoptr i32 %v4_ade0 to i8*
  store i8 64, i8* %v5_ade0, align 1
  br label %.thread24

.thread24:                                        ; preds = %dec_label_pc_ad6c, %.thread, %bb
  %v0_ade4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ade4 = trunc i32 %v0_ade4 to i8
  %v2_ade4 = load i32, i32* %r4.global-to-local, align 4
  %v3_ade4 = add i32 %v2_ade4, 2
  %v4_ade4 = inttoptr i32 %v3_ade4 to i8*
  store i8 %v1_ade4, i8* %v4_ade4, align 1
  store i32 %v3_ad1c, i32* %r2.global-to-local, align 4
  store i32 %v4_ad00, i32* %r1.global-to-local, align 4
  %v2_adf4 = load i32, i32* %r4.global-to-local, align 4
  %v3_adf4 = add i32 %v2_adf4, 9
  %v4_adf4 = inttoptr i32 %v3_adf4 to i8*
  store i8 47, i8* %v4_adf4, align 1
  %v0_adf8 = load i32, i32* %r2.global-to-local, align 4
  %v1_adf8 = trunc i32 %v0_adf8 to i8
  %v2_adf8 = load i32, i32* %r4.global-to-local, align 4
  %v3_adf8 = add i32 %v2_adf8, 5
  %v4_adf8 = inttoptr i32 %v3_adf8 to i8*
  store i8 %v1_adf8, i8* %v4_adf8, align 1
  %v3_adfc = load i32, i32* %stack_var_-40, align 4
  %v5_ae04 = mul i32 %v3_adfc, 24
  store i32 %v5_ae04, i32* %r3.global-to-local, align 4
  store i32 %v5_abec, i32* %r2.global-to-local, align 4
  %v1_ae0c = load i32, i32* %r4.global-to-local, align 4
  %v2_ae0c = add i32 %v1_ae0c, 12
  %v3_ae0c = inttoptr i32 %v2_ae0c to i32*
  store i32 %v5_abec, i32* %v3_ae0c, align 4
  %v0_ae10 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae10 = load i32, i32* @sb, align 4
  %v2_ae10 = add i32 %v1_ae10, %v0_ae10
  store i32 %v2_ae10, i32* %r3.global-to-local, align 4
  %v0_ae14 = load i32, i32* %r1.global-to-local, align 4
  %v1_ae14 = trunc i32 %v0_ae14 to i8
  %v2_ae14 = load i32, i32* %r4.global-to-local, align 4
  %v3_ae14 = add i32 %v2_ae14, 4
  %v4_ae14 = inttoptr i32 %v3_ae14 to i8*
  store i8 %v1_ae14, i8* %v4_ae14, align 1
  %v0_ae18 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae18 = add i32 %v0_ae18, 16
  %v2_ae18 = inttoptr i32 %v1_ae18 to i32*
  %v3_ae18 = load i32, i32* %v2_ae18, align 4
  store i32 %v3_ae18, i32* %r2.global-to-local, align 4
  %v0_ae1c = load i32, i32* %r4.global-to-local, align 4
  %v1_ae1c = add i32 %v0_ae1c, 20
  store i32 %v1_ae1c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_ae24 = load i32, i32* %r0.global-to-local, align 4
  %v1_ae24 = trunc i32 %v0_ae24 to i8
  %v3_ae24 = add i32 %v0_ae1c, 23
  %v4_ae24 = inttoptr i32 %v3_ae24 to i8*
  store i8 %v1_ae24, i8* %v4_ae24, align 1
  %v0_ae28 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae28 = trunc i32 %v0_ae28 to i8
  %v2_ae28 = load i32, i32* %r1.global-to-local, align 4
  %v3_ae28 = add i32 %v2_ae28, 2
  %v4_ae28 = inttoptr i32 %v3_ae28 to i8*
  store i8 %v1_ae28, i8* %v4_ae28, align 1
  %v0_ae2c = load i32, i32* %r4.global-to-local, align 4
  %v1_ae2c = add i32 %v0_ae2c, 24
  %v2_ae2c = inttoptr i32 %v1_ae2c to i8*
  %v3_ae2c = load i8, i8* %v2_ae2c, align 1
  %tmp105 = urem i8 %v3_ae2c, 16
  %v1_ae30 = zext i8 %tmp105 to i32
  %v1_ae34 = or i32 %v1_ae30, 64
  store i32 %v1_ae34, i32* %r3.global-to-local, align 4
  %v1_ae38 = trunc i32 %v1_ae34 to i8
  store i8 %v1_ae38, i8* %v2_ae2c, align 1
  %v0_ae3c = load i32, i32* %r2.global-to-local, align 4
  %v1_ae3c = load i32, i32* %r4.global-to-local, align 4
  %v2_ae3c = add i32 %v1_ae3c, 16
  %v3_ae3c = inttoptr i32 %v2_ae3c to i32*
  store i32 %v0_ae3c, i32* %v3_ae3c, align 4
  %v0_ae40 = load i32, i32* %r4.global-to-local, align 4
  %v1_ae40 = add i32 %v0_ae40, 24
  %v2_ae40 = inttoptr i32 %v1_ae40 to i8*
  %v3_ae40 = load i8, i8* %v2_ae40, align 1
  %v1_ae44 = and i8 %v3_ae40, -16
  %v1_ae48 = or i8 %v1_ae44, 5
  store i8 %v1_ae48, i8* %v2_ae40, align 1
  %v0_ae54 = load i32, i32* %r4.global-to-local, align 4
  %v1_ae54 = add i32 %v0_ae54, 24
  store i32 %v1_ae54, i32* %r5.global-to-local, align 4
  %v3_ae58 = add i32 %v0_ae54, 25
  %v4_ae58 = inttoptr i32 %v3_ae58 to i8*
  store i8 %v5_ab04, i8* %v4_ae58, align 1
  store i32 %v3_ad28, i32* %r1.global-to-local, align 4
  store i32 %tmp87, i32* %r3.global-to-local, align 4
  store i32 %v3_ad38, i32* %r2.global-to-local, align 4
  %v2_ae68 = load i32, i32* %r5.global-to-local, align 4
  %v3_ae68 = add i32 %v2_ae68, 4
  %v4_ae68 = inttoptr i32 %v3_ae68 to i8*
  store i8 %v5_ace0, i8* %v4_ae68, align 1
  %v0_ae6c = load i32, i32* %r1.global-to-local, align 4
  %v1_ae6c = trunc i32 %v0_ae6c to i8
  %v2_ae6c = load i32, i32* %r5.global-to-local, align 4
  %v3_ae6c = add i32 %v2_ae6c, 2
  %v4_ae6c = inttoptr i32 %v3_ae6c to i8*
  store i8 %v1_ae6c, i8* %v4_ae6c, align 1
  %v0_ae70 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ae70, label %bb92, label %bb91

bb91:                                             ; preds = %.thread24
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb92

bb92:                                             ; preds = %.thread24, %bb91
  store i32 %v3_ad3c, i32* %r1.global-to-local, align 4
  %v0_ae78 = load i32, i32* %r2.global-to-local, align 4
  %v1_ae78 = trunc i32 %v0_ae78 to i8
  %v2_ae78 = load i32, i32* %r5.global-to-local, align 4
  %v3_ae78 = add i32 %v2_ae78, 3
  %v4_ae78 = inttoptr i32 %v3_ae78 to i8*
  store i8 %v1_ae78, i8* %v4_ae78, align 1
  store i32 %v4_adb8, i32* %r2.global-to-local, align 4
  %v0_ae80 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ae80, label %bb94, label %bb93

bb93:                                             ; preds = %bb92
  %v1_ae80 = load i32, i32* %r3.global-to-local, align 4
  %v2_ae80 = trunc i32 %v1_ae80 to i8
  %v3_ae80 = load i32, i32* %r5.global-to-local, align 4
  %v4_ae80 = add i32 %v3_ae80, 6
  %v5_ae80 = inttoptr i32 %v4_ae80 to i8*
  store i8 %v2_ae80, i8* %v5_ae80, align 1
  br label %bb94

bb94:                                             ; preds = %bb92, %bb93
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_ae88 = load i32, i32* %r1.global-to-local, align 4
  %v1_ae88 = trunc i32 %v0_ae88 to i8
  %v2_ae88 = load i32, i32* %r5.global-to-local, align 4
  %v3_ae88 = add i32 %v2_ae88, 5
  %v4_ae88 = inttoptr i32 %v3_ae88 to i8*
  store i8 %v1_ae88, i8* %v4_ae88, align 1
  %v0_ae8c = load i32, i32* %r2.global-to-local, align 4
  %v1_ae8c = trunc i32 %v0_ae8c to i8
  %v2_ae8c = load i32, i32* %r5.global-to-local, align 4
  %v3_ae8c = add i32 %v2_ae8c, 8
  %v4_ae8c = inttoptr i32 %v3_ae8c to i8*
  store i8 %v1_ae8c, i8* %v4_ae8c, align 1
  %v0_ae90 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ae90, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_ae90 = load i32, i32* %r0.global-to-local, align 4
  %v2_ae90 = trunc i32 %v1_ae90 to i8
  %v3_ae90 = load i32, i32* %r5.global-to-local, align 4
  %v4_ae90 = add i32 %v3_ae90, 7
  %v5_ae90 = inttoptr i32 %v4_ae90 to i8*
  store i8 %v2_ae90, i8* %v5_ae90, align 1
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_ae94 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae94 = trunc i32 %v0_ae94 to i8
  %v2_ae94 = load i32, i32* %r5.global-to-local, align 4
  %v3_ae94 = add i32 %v2_ae94, 9
  %v4_ae94 = inttoptr i32 %v3_ae94 to i8*
  store i8 %v1_ae94, i8* %v4_ae94, align 1
  %v0_ae98 = call i32 @function_f468()
  store i32 %v0_ae98, i32* %r0.global-to-local, align 4
  store i32 %v1_ac4c, i32* %r1.global-to-local, align 4
  store i1 %v2_aea4, i1* %cpsr_z.global-to-local, align 1
  %v1_aea8 = sub i32 1023, %v0_ae98
  store i32 %v1_aea8, i32* %r3.global-to-local, align 4
  br i1 %v2_aea4, label %.thread25, label %.thread26

.thread25:                                        ; preds = %bb96
  %v2_aeb0 = load i32, i32* %r5.global-to-local, align 4
  %v3_aeb0 = add i32 %v2_aeb0, 16
  %v4_aeb0 = inttoptr i32 %v3_aeb0 to i32*
  store i32 %v1_aea8, i32* %v4_aeb0, align 4
  br label %bb97

.thread26:                                        ; preds = %bb96
  %v1_aeac = load i32, i32* %r4.global-to-local, align 4
  %v2_aeac = add i32 %v1_aeac, 16
  %v3_aeac = inttoptr i32 %v2_aeac to i32*
  %v4_aeac = load i32, i32* %v3_aeac, align 4
  store i32 %v4_aeac, i32* %r3.global-to-local, align 4
  %v2_aeb4 = load i32, i32* %r5.global-to-local, align 4
  %v3_aeb4 = add i32 %v2_aeb4, 16
  %v4_aeb4 = inttoptr i32 %v3_aeb4 to i32*
  store i32 %v4_aeac, i32* %v4_aeb4, align 4
  br label %bb97

bb97:                                             ; preds = %.thread25, %.thread26
  store i32 %v4_ad34, i32* %r3.global-to-local, align 4
  %v0_aebc = load i32, i32* %r4.global-to-local, align 4
  %v1_aebc = add i32 %v0_aebc, 44
  store i32 %v1_aebc, i32* %r6.global-to-local, align 4
  %v1_aec0 = load i32, i32* %r5.global-to-local, align 4
  %v2_aec0 = add i32 %v1_aec0, 12
  %v3_aec0 = inttoptr i32 %v2_aec0 to i32*
  store i32 %v0_ae98, i32* %v3_aec0, align 4
  store i32 %v4_aec4, i32* %r2.global-to-local, align 4
  %v0_aec8 = load i32, i32* %r3.global-to-local, align 4
  %v1_aec8 = trunc i32 %v0_aec8 to i8
  %v2_aec8 = load i32, i32* %r6.global-to-local, align 4
  %v3_aec8 = inttoptr i32 %v2_aec8 to i8*
  store i8 %v1_aec8, i8* %v3_aec8, align 1
  %v3_aecc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_aecc, i32* %r3.global-to-local, align 4
  %v0_aed0 = load i32, i32* %r2.global-to-local, align 4
  %v1_aed0 = trunc i32 %v0_aed0 to i8
  %v2_aed0 = load i32, i32* %r6.global-to-local, align 4
  %v3_aed0 = add i32 %v2_aed0, 5
  %v4_aed0 = inttoptr i32 %v3_aed0 to i8*
  store i8 %v1_aed0, i8* %v4_aed0, align 1
  %v0_aed4 = load i32, i32* %r3.global-to-local, align 4
  %v1_aed4 = add i32 %v0_aed4, 1
  store i32 %v1_aed4, i32* %r4.global-to-local, align 4
  store i32 %v3_ad4c, i32* %r1.global-to-local, align 4
  store i32 %v7_aedc, i32* %r2.global-to-local, align 4
  %v1_aee0 = load i32, i32* @fp, align 4
  %v9_aee0 = icmp eq i32 %v1_aed4, %v1_aee0
  store i1 %v9_aee0, i1* %cpsr_z.global-to-local, align 1
  %v2_aee4 = load i32, i32* %r6.global-to-local, align 4
  %v3_aee4 = add i32 %v2_aee4, 1
  %v4_aee4 = inttoptr i32 %v3_aee4 to i8*
  store i8 %v5_ad5c, i8* %v4_aee4, align 1
  %v0_aee8 = load i32, i32* %r7.global-to-local, align 4
  %v1_aee8 = trunc i32 %v0_aee8 to i8
  %v2_aee8 = load i32, i32* %r6.global-to-local, align 4
  %v3_aee8 = add i32 %v2_aee8, 2
  %v4_aee8 = inttoptr i32 %v3_aee8 to i8*
  store i8 %v1_aee8, i8* %v4_aee8, align 1
  %v0_aeec = load i32, i32* %r2.global-to-local, align 4
  %v1_aeec = trunc i32 %v0_aeec to i8
  %v2_aeec = load i32, i32* %r6.global-to-local, align 4
  %v3_aeec = add i32 %v2_aeec, 3
  %v4_aeec = inttoptr i32 %v3_aeec to i8*
  store i8 %v1_aeec, i8* %v4_aeec, align 1
  %v0_aef0 = load i32, i32* %r8.global-to-local, align 4
  %v1_aef0 = trunc i32 %v0_aef0 to i8
  %v2_aef0 = load i32, i32* %r6.global-to-local, align 4
  %v3_aef0 = add i32 %v2_aef0, 4
  %v4_aef0 = inttoptr i32 %v3_aef0 to i8*
  store i8 %v1_aef0, i8* %v4_aef0, align 1
  %v0_aef4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_aef4, i32* %stack_var_-40, align 4
  %v5_aef8 = icmp slt i32 %v1_aed4, %v1_aee0
  br i1 %v5_aef8, label %dec_label_pc_ad6c, label %dec_label_pc_aefc

dec_label_pc_aefc:                                ; preds = %bb97
  %v1_af04 = add i32 %v5_ab98, 8
  store i32 %v1_af04, i32* %r3.global-to-local, align 4
  %v1_af08 = add i32 %v5_ab98, 52
  store i32 %v1_af08, i32* %r1.global-to-local, align 4
  %v0_af14.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_af14.preheader

dec_label_pc_af14.preheader:                      ; preds = %dec_label_pc_aefc, %dec_label_pc_b1a8
  %v0_af14.pre = phi i32 [ %v0_af14.pre.pre, %dec_label_pc_aefc ], [ %v0_ac5c, %dec_label_pc_b1a8 ]
  %stack_var_-120.0.ph = phi i32 [ %v1_af08, %dec_label_pc_aefc ], [ %v1_b1b4, %dec_label_pc_b1a8 ]
  %stack_var_-152.0.ph = phi i32 [ %v1_af04, %dec_label_pc_aefc ], [ %v1_b1b0, %dec_label_pc_b1a8 ]
  %v2_b18c = icmp eq i32 %v1_abb8, 0
  %v2_af8c = icmp eq i32 %v1_ac4c, 0
  %v2_af58 = icmp eq i32 %v5_abec, -1
  br label %dec_label_pc_af14

dec_label_pc_af14:                                ; preds = %dec_label_pc_afa8, %dec_label_pc_af14.preheader
  %v0_af14 = phi i32 [ %v0_af14.pre, %dec_label_pc_af14.preheader ], [ %v1_b06c, %dec_label_pc_afa8 ]
  %v2_af14 = icmp eq i32 %v0_af14, 0
  store i1 %v2_af14, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp98 = icmp slt i32 %v0_af14, 1
  br label %dec_label_pc_af1c

dec_label_pc_af1c:                                ; preds = %dec_label_pc_af1c, %dec_label_pc_af14
  br i1 %tmp98, label %dec_label_pc_af1c, label %dec_label_pc_af20

dec_label_pc_af20:                                ; preds = %dec_label_pc_af1c
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_af2c

dec_label_pc_af2c:                                ; preds = %dec_label_pc_afa8, %dec_label_pc_af20
  %v1_af40 = phi i32 [ %v1_b068, %dec_label_pc_afa8 ], [ 0, %dec_label_pc_af20 ]
  %v5_af30 = mul i32 %v1_af40, 24
  %v1_af34 = load i32, i32* @sb, align 4
  %v2_af34 = add i32 %v1_af34, %v5_af30
  store i32 %v2_af34, i32* %r3.global-to-local, align 4
  store i32 %v4_aacc, i32* %r1.global-to-local, align 4
  %v1_af3c = add i32 %v2_af34, 20
  %v2_af3c = inttoptr i32 %v1_af3c to i8*
  %v3_af3c = load i8, i8* %v2_af3c, align 1
  %v4_af3c = zext i8 %v3_af3c to i32
  store i32 %v4_af3c, i32* %r2.global-to-local, align 4
  %v4_af40 = mul i32 %v1_af40, 4
  %v5_af40 = add i32 %v4_af40, %v4_aacc
  %v6_af40 = inttoptr i32 %v5_af40 to i32*
  %v7_af40 = load i32, i32* %v6_af40, align 4
  store i32 %v7_af40, i32* @r5, align 4
  %v7_af44 = icmp eq i8 %v3_af3c, 31
  store i1 %v7_af44, i1* %cpsr_z.global-to-local, align 1
  %v1_af48 = add i32 %v7_af40, 24
  store i32 %v1_af48, i32* @r6, align 4
  %v1_af4c = add i32 %v7_af40, 44
  store i32 %v1_af4c, i32* @r7, align 4
  %tmp106 = icmp ult i8 %v3_af3c, 32
  br i1 %tmp106, label %dec_label_pc_b08c, label %dec_label_pc_af54

dec_label_pc_af54:                                ; preds = %dec_label_pc_af2c
  store i32 %v5_abec, i32* %r2.global-to-local, align 4
  store i1 %v2_af58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_af58, label %dec_label_pc_b0f4, label %dec_label_pc_af60

dec_label_pc_af60:                                ; preds = %dec_label_pc_b08c, %dec_label_pc_af54
  store i32 65535, i32* @r4, align 4
  %v0_af68 = load i32, i32* @sl, align 4
  %v9_af68 = icmp eq i32 %v0_af68, 65535
  store i1 %v9_af68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af68, label %dec_label_pc_b10c, label %dec_label_pc_af70

dec_label_pc_af70:                                ; preds = %dec_label_pc_b0f4.dec_label_pc_af70_crit_edge, %dec_label_pc_af60
  %v1_af74 = phi i32 [ %v1_af74.pre, %dec_label_pc_b0f4.dec_label_pc_af70_crit_edge ], [ 65535, %dec_label_pc_af60 ]
  store i32 %v3_ac54, i32* %r3.global-to-local, align 4
  %v9_af74 = icmp eq i32 %v3_ac54, %v1_af74
  store i1 %v9_af74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af74, label %dec_label_pc_b144, label %dec_label_pc_af7c

dec_label_pc_af7c:                                ; preds = %dec_label_pc_b10c.dec_label_pc_af7c_crit_edge, %dec_label_pc_af70
  %v1_af80 = phi i32 [ %v1_af80.pre, %dec_label_pc_b10c.dec_label_pc_af7c_crit_edge ], [ %v1_af74, %dec_label_pc_af70 ]
  store i32 %v3_ac58, i32* %r1.global-to-local, align 4
  %v9_af80 = icmp eq i32 %v3_ac58, %v1_af80
  store i1 %v9_af80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af80, label %dec_label_pc_b160, label %dec_label_pc_af88

dec_label_pc_af88:                                ; preds = %dec_label_pc_b144, %dec_label_pc_af7c
  store i32 %v1_ac4c, i32* %r2.global-to-local, align 4
  store i1 %v2_af8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_af8c, label %dec_label_pc_b184, label %.thread27

.thread27:                                        ; preds = %dec_label_pc_af88
  %v1_af90 = load i32, i32* @r5, align 4
  %v2_af90 = add i32 %v1_af90, 16
  %v3_af90 = inttoptr i32 %v2_af90 to i32*
  %v4_af90 = load i32, i32* %v3_af90, align 4
  store i32 %v4_af90, i32* %r3.global-to-local, align 4
  %v2_af94 = load i32, i32* @r6, align 4
  %v3_af94 = add i32 %v2_af94, 16
  %v4_af94 = inttoptr i32 %v3_af94 to i32*
  store i32 %v4_af90, i32* %v4_af94, align 4
  br label %dec_label_pc_af9c

dec_label_pc_af9c:                                ; preds = %bb103, %.thread27
  store i32 %v1_abb8, i32* %r3.global-to-local, align 4
  store i1 %v2_b18c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b18c, label %dec_label_pc_afa8, label %dec_label_pc_b198

dec_label_pc_afa8:                                ; preds = %dec_label_pc_af9c, %dec_label_pc_b184, %dec_label_pc_b198
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_afac = load i32, i32* @r8, align 4
  %v1_afac = trunc i32 %v0_afac to i8
  %v2_afac = load i32, i32* @r5, align 4
  %v3_afac = add i32 %v2_afac, 10
  %v4_afac = inttoptr i32 %v3_afac to i8*
  store i8 %v1_afac, i8* %v4_afac, align 1
  %v0_afb0 = load i32, i32* @r8, align 4
  %v1_afb0 = trunc i32 %v0_afb0 to i8
  %v2_afb0 = load i32, i32* @r5, align 4
  %v3_afb0 = add i32 %v2_afb0, 11
  %v4_afb0 = inttoptr i32 %v3_afb0 to i8*
  store i8 %v1_afb0, i8* %v4_afb0, align 1
  %v0_afb4 = load i32, i32* @r5, align 4
  store i32 %v0_afb4, i32* @r0, align 4
  %v2_afb8 = call i32 @function_ddf4(i32 %v0_afb4, i32 20)
  %v3_afb8 = trunc i32 %v2_afb8 to i8
  %v4_afbc = sdiv i32 %v2_afb8, 256
  store i32 %v4_afbc, i32* %r3.global-to-local, align 4
  %v1_afc0 = trunc i32 %v4_afbc to i8
  %v2_afc0 = load i32, i32* @r5, align 4
  %v3_afc0 = add i32 %v2_afc0, 11
  %v4_afc0 = inttoptr i32 %v3_afc0 to i8*
  store i8 %v1_afc0, i8* %v4_afc0, align 1
  %v3_afc4 = load i32, i32* @r5, align 4
  %v4_afc4 = add i32 %v3_afc4, 10
  %v5_afc4 = inttoptr i32 %v4_afc4 to i8*
  store i8 %v3_afb8, i8* %v5_afc4, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_afcc = load i32, i32* @r8, align 4
  %v1_afcc = trunc i32 %v0_afcc to i8
  %v2_afcc = load i32, i32* @r6, align 4
  %v3_afcc = add i32 %v2_afcc, 10
  %v4_afcc = inttoptr i32 %v3_afcc to i8*
  store i8 %v1_afcc, i8* %v4_afcc, align 1
  %v0_afd0 = load i32, i32* @r8, align 4
  %v1_afd0 = trunc i32 %v0_afd0 to i8
  %v2_afd0 = load i32, i32* @r6, align 4
  %v3_afd0 = add i32 %v2_afd0, 11
  %v4_afd0 = inttoptr i32 %v3_afd0 to i8*
  store i8 %v1_afd0, i8* %v4_afd0, align 1
  %v0_afd4 = load i32, i32* @r6, align 4
  store i32 %v0_afd4, i32* @r0, align 4
  %v2_afd8 = call i32 @function_ddf4(i32 %v0_afd4, i32 20)
  %v3_afd8 = trunc i32 %v2_afd8 to i8
  store i32 %v2_afd8, i32* %r0.global-to-local, align 4
  %v4_afdc = sdiv i32 %v2_afd8, 256
  store i32 %v4_afdc, i32* %r3.global-to-local, align 4
  %v3_afe0 = load i32, i32* @r6, align 4
  %v4_afe0 = add i32 %v3_afe0, 10
  %v5_afe0 = inttoptr i32 %v4_afe0 to i8*
  store i8 %v3_afd8, i8* %v5_afe0, align 1
  %v0_afe4 = load i32, i32* %r3.global-to-local, align 4
  %v1_afe4 = trunc i32 %v0_afe4 to i8
  %v2_afe4 = load i32, i32* @r6, align 4
  %v3_afe4 = add i32 %v2_afe4, 11
  %v4_afe4 = inttoptr i32 %v3_afe4 to i8*
  store i8 %v1_afe4, i8* %v4_afe4, align 1
  %v0_afe8 = load i32, i32* @r7, align 4
  %v1_afe8 = add i32 %v0_afe8, 4
  %v2_afe8 = inttoptr i32 %v1_afe8 to i8*
  %v3_afe8 = load i8, i8* %v2_afe8, align 1
  %v4_afe8 = zext i8 %v3_afe8 to i32
  store i32 %v4_afe8, i32* %r3.global-to-local, align 4
  %v1_afec = add i32 %v0_afe8, 5
  %v2_afec = inttoptr i32 %v1_afec to i8*
  %v3_afec = load i8, i8* %v2_afec, align 1
  %v4_afec = zext i8 %v3_afec to i32
  store i32 %v0_afe8, i32* @r1, align 4
  %v4_aff4 = mul nuw nsw i32 %v4_afec, 256
  %v5_aff4 = or i32 %v4_aff4, %v4_afe8
  store i32 %v5_aff4, i32* %r2.global-to-local, align 4
  %v0_aff8 = load i32, i32* @r8, align 4
  %v1_aff8 = trunc i32 %v0_aff8 to i8
  %v3_aff8 = add i32 %v0_afe8, 6
  %v4_aff8 = inttoptr i32 %v3_aff8 to i8*
  store i8 %v1_aff8, i8* %v4_aff8, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_b000 = load i32, i32* @r8, align 4
  %v1_b000 = trunc i32 %v0_b000 to i8
  %v2_b000 = load i32, i32* @r7, align 4
  %v3_b000 = add i32 %v2_b000, 7
  %v4_b000 = inttoptr i32 %v3_b000 to i8*
  store i8 %v1_b000, i8* %v4_b000, align 1
  %v0_b004 = load i32, i32* @r6, align 4
  store i32 %v0_b004, i32* %r0.global-to-local, align 4
  %v4_b008 = call i32 @function_de50(i32 %v0_b004, i32 %v0_afe8, i32 %v5_aff4, i32 %stack_var_-152.0.ph)
  %v5_b008 = trunc i32 %v4_b008 to i8
  store i32 %v4_b008, i32* %r0.global-to-local, align 4
  %v3_b00c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b00c, i32* %r3.global-to-local, align 4
  %v3_b010 = mul i32 %v3_b00c, 32
  store i32 %v3_b010, i32* %r2.global-to-local, align 4
  %v0_b014 = load i32, i32* @r5, align 4
  %v1_b014 = add i32 %v0_b014, 16
  %v2_b014 = inttoptr i32 %v1_b014 to i32*
  %v3_b014 = load i32, i32* %v2_b014, align 4
  store i32 %v3_b014, i32* %r1.global-to-local, align 4
  %v5_b018 = mul i32 %v3_b00c, 24
  store i32 %v5_b018, i32* %r2.global-to-local, align 4
  %v4_b01c43 = udiv i32 %v4_b008, 256
  %v1_b020 = trunc i32 %v4_b01c43 to i8
  %v2_b020 = load i32, i32* @r7, align 4
  %v3_b020 = add i32 %v2_b020, 7
  %v4_b020 = inttoptr i32 %v3_b020 to i8*
  store i8 %v1_b020, i8* %v4_b020, align 1
  %v0_b024 = load i32, i32* %r2.global-to-local, align 4
  %v1_b024 = load i32, i32* @sb, align 4
  %v2_b024 = add i32 %v1_b024, %v0_b024
  store i32 %v2_b024, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_b02c = load i32, i32* @r7, align 4
  %v4_b02c = add i32 %v3_b02c, 6
  %v5_b02c = inttoptr i32 %v4_b02c to i8*
  store i8 %v5_b008, i8* %v5_b02c, align 1
  %v0_b030 = load i32, i32* %r1.global-to-local, align 4
  %v1_b030 = load i32, i32* %lr.global-to-local, align 4
  %v2_b030 = add i32 %v1_b030, 4
  %v3_b030 = inttoptr i32 %v2_b030 to i32*
  store i32 %v0_b030, i32* %v3_b030, align 4
  %v0_b034 = load i32, i32* %r3.global-to-local, align 4
  %v1_b034 = trunc i32 %v0_b034 to i8
  %v2_b034 = load i32, i32* %r2.global-to-local, align 4
  %v3_b034 = load i32, i32* @sb, align 4
  %v4_b034 = add i32 %v3_b034, %v2_b034
  %v5_b034 = inttoptr i32 %v4_b034 to i8*
  store i8 %v1_b034, i8* %v5_b034, align 1
  %v0_b038 = load i32, i32* @r8, align 4
  %v1_b038 = trunc i32 %v0_b038 to i8
  %v2_b038 = load i32, i32* %lr.global-to-local, align 4
  %v3_b038 = add i32 %v2_b038, 2
  %v4_b038 = inttoptr i32 %v3_b038 to i8*
  store i8 %v1_b038, i8* %v4_b038, align 1
  %v0_b03c = load i32, i32* @r8, align 4
  %v1_b03c = trunc i32 %v0_b03c to i8
  %v2_b03c = load i32, i32* %lr.global-to-local, align 4
  %v3_b03c = add i32 %v2_b03c, 1
  %v4_b03c = inttoptr i32 %v3_b03c to i8*
  store i8 %v1_b03c, i8* %v4_b03c, align 1
  %v0_b040 = load i32, i32* @r8, align 4
  %v1_b040 = trunc i32 %v0_b040 to i8
  %v2_b040 = load i32, i32* %lr.global-to-local, align 4
  %v3_b040 = add i32 %v2_b040, 3
  %v4_b040 = inttoptr i32 %v3_b040 to i8*
  store i8 %v1_b040, i8* %v4_b040, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b04c = load i32, i32* @r5, align 4
  store i32 %v0_b04c, i32* %r1.global-to-local, align 4
  store i32 %v3_ac00, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_b058 = load i32, i32* %lr.global-to-local, align 4
  %v4_b058 = inttoptr i32 %v0_b058 to %sockaddr*
  %v7_b060 = inttoptr i32 %v0_b04c to i32*
  %v9_b060 = call i32 @sendto(i32 %v3_ac00, i32* %v7_b060, i32 %stack_var_-120.0.ph, i32 16384, %sockaddr* %v4_b058, i32 16)
  %v3_b064 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b064, i32* %r3.global-to-local, align 4
  %v1_b068 = add i32 %v3_b064, 1
  store i32 %v1_b068, i32* %r0.global-to-local, align 4
  %v1_b06c = load i32, i32* @fp, align 4
  %v9_b06c = icmp eq i32 %v1_b068, %v1_b06c
  store i1 %v9_b06c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b068, i32* %stack_var_-40, align 4
  %v6_b074 = icmp slt i32 %v1_b068, %v1_b06c
  br i1 %v6_b074, label %dec_label_pc_af2c, label %dec_label_pc_af14

dec_label_pc_b07c:                                ; preds = %dec_label_pc_ac10
  store i32 %v3_ac00, i32* %r0.global-to-local, align 4
  %v1_b080 = call i32 @close(i32 %v3_ac00)
  store i32 %v1_b080, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b084

dec_label_pc_b084:                                ; preds = %dec_label_pc_aaac, %dec_label_pc_b07c
  %v29_b088 = phi i32 [ -1, %dec_label_pc_aaac ], [ %v1_b080, %dec_label_pc_b07c ]
  store i32 %v3_aaac, i32* %r4.global-to-local, align 4
  store i32 %v6_aaac, i32* %r5.global-to-local, align 4
  store i32 %v9_aaac, i32* %r6.global-to-local, align 4
  store i32 %v12_aaac, i32* %r7.global-to-local, align 4
  store i32 %v15_aaac, i32* %r8.global-to-local, align 4
  ret i32 %v29_b088

dec_label_pc_b08c:                                ; preds = %dec_label_pc_af2c
  %v1_b08c = add i32 %v2_af34, 16
  %v2_b08c = inttoptr i32 %v1_b08c to i32*
  %v3_b08c = load i32, i32* %v2_b08c, align 4
  store i32 %v3_b08c, i32* %r4.global-to-local, align 4
  %v0_b090 = call i32 @function_f468()
  store i32 %v0_b090, i32* %r0.global-to-local, align 4
  %v3_b094 = load i32, i32* %stack_var_-40, align 4
  %v5_b09c = mul i32 %v3_b094, 24
  %v0_b0a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_b0a4 = load i32, i32* @sb, align 4
  %v2_b0a4 = add i32 %v1_b0a4, %v5_b09c
  store i32 %v2_b0a4, i32* %r1.global-to-local, align 4
  %v1_b0a8 = and i32 %v0_b0a0, 65280
  store i32 %v1_b0a8, i32* %r3.global-to-local, align 4
  %v1_b0a0 = udiv i32 %v0_b0a0, 256
  %v3_b0ac = and i32 %v1_b0a0, 65280
  store i32 %v3_b0ac, i32* %r2.global-to-local, align 4
  %v1_b0b4 = add i32 %v2_b0a4, 20
  %v2_b0b4 = inttoptr i32 %v1_b0b4 to i8*
  %v3_b0b4 = load i8, i8* %v2_b0b4, align 1
  %v4_b0b4 = zext i8 %v3_b0b4 to i32
  store i32 %v4_b0b4, i32* %lr.global-to-local, align 4
  %v2_b0c0 = call i32 @llvm.bswap.i32(i32 %v0_b0a0)
  %v7_b0c4 = lshr i32 %v0_b090, %v4_b0b4
  %v8_b0c4 = add i32 %v7_b0c4, %v2_b0c0
  %v3_b0d0 = mul i32 %v8_b0c4, 16777216
  %v1_b0d4 = and i32 %v8_b0c4, 65280
  store i32 %v1_b0d4, i32* %r0.global-to-local, align 4
  store i32 %v5_abec, i32* %r2.global-to-local, align 4
  %v4_b0e0 = mul nuw nsw i32 %v1_b0d4, 256
  %v5_b0e0 = or i32 %v4_b0e0, %v3_b0d0
  store i32 %v5_b0e0, i32* %r1.global-to-local, align 4
  %v2_b0e4 = call i32 @llvm.bswap.i32(i32 %v8_b0c4)
  store i32 %v2_b0e4, i32* %r3.global-to-local, align 4
  store i1 %v2_af58, i1* %cpsr_z.global-to-local, align 1
  %v1_b0ec = load i32, i32* @r5, align 4
  %v2_b0ec = add i32 %v1_b0ec, 16
  %v3_b0ec = inttoptr i32 %v2_b0ec to i32*
  store i32 %v2_b0e4, i32* %v3_b0ec, align 4
  br i1 %v2_af58, label %dec_label_pc_b0f4, label %dec_label_pc_af60

dec_label_pc_b0f4:                                ; preds = %dec_label_pc_b08c, %dec_label_pc_af54
  %v0_b0f4 = call i32 @function_f468()
  store i32 %v0_b0f4, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v0_b100 = load i32, i32* @sl, align 4
  %v9_b100 = icmp eq i32 %v0_b100, 65535
  store i1 %v9_b100, i1* %cpsr_z.global-to-local, align 1
  %v1_b104 = load i32, i32* @r5, align 4
  %v2_b104 = add i32 %v1_b104, 12
  %v3_b104 = inttoptr i32 %v2_b104 to i32*
  store i32 %v0_b0f4, i32* %v3_b104, align 4
  br i1 %v9_b100, label %dec_label_pc_b10c, label %dec_label_pc_b0f4.dec_label_pc_af70_crit_edge

dec_label_pc_b0f4.dec_label_pc_af70_crit_edge:    ; preds = %dec_label_pc_b0f4
  %v1_af74.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_af70

dec_label_pc_b10c:                                ; preds = %dec_label_pc_b0f4, %dec_label_pc_af60
  %v0_b10c = call i32 @function_f468()
  %v3_b114 = urem i32 %v0_b10c, 65536
  store i32 %v3_b114, i32* %r0.global-to-local, align 4
  %v3_b11816 = udiv i32 %v0_b10c, 256
  %v1_b11c = trunc i32 %v3_b11816 to i8
  %v2_b11c = load i32, i32* @r5, align 4
  %v3_b11c = add i32 %v2_b11c, 5
  %v4_b11c = inttoptr i32 %v3_b11c to i8*
  store i8 %v1_b11c, i8* %v4_b11c, align 1
  %v0_b120 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_ac54, i32* %r3.global-to-local, align 4
  %v1_b128 = sub i32 999, %v0_b120
  store i32 %v1_b128, i32* %r2.global-to-local, align 4
  %v3_b12c = sdiv i32 %v1_b128, 256
  store i32 %v3_b12c, i32* %r1.global-to-local, align 4
  %v1_b130 = load i32, i32* @r4, align 4
  %v9_b130 = icmp eq i32 %v3_ac54, %v1_b130
  store i1 %v9_b130, i1* %cpsr_z.global-to-local, align 1
  %v1_b134 = trunc i32 %v0_b120 to i8
  %v2_b134 = load i32, i32* @r5, align 4
  %v3_b134 = add i32 %v2_b134, 4
  %v4_b134 = inttoptr i32 %v3_b134 to i8*
  store i8 %v1_b134, i8* %v4_b134, align 1
  %v0_b138 = load i32, i32* %r1.global-to-local, align 4
  %v1_b138 = trunc i32 %v0_b138 to i8
  %v2_b138 = load i32, i32* @r6, align 4
  %v3_b138 = add i32 %v2_b138, 5
  %v4_b138 = inttoptr i32 %v3_b138 to i8*
  store i8 %v1_b138, i8* %v4_b138, align 1
  %v0_b13c = load i32, i32* %r2.global-to-local, align 4
  %v1_b13c = trunc i32 %v0_b13c to i8
  %v2_b13c = load i32, i32* @r6, align 4
  %v3_b13c = add i32 %v2_b13c, 4
  %v4_b13c = inttoptr i32 %v3_b13c to i8*
  store i8 %v1_b13c, i8* %v4_b13c, align 1
  %v0_b140 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b140, label %dec_label_pc_b144, label %dec_label_pc_b10c.dec_label_pc_af7c_crit_edge

dec_label_pc_b10c.dec_label_pc_af7c_crit_edge:    ; preds = %dec_label_pc_b10c
  %v1_af80.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_af7c

dec_label_pc_b144:                                ; preds = %dec_label_pc_b10c, %dec_label_pc_af70
  %v0_b144 = call i32 @function_f468()
  %v1_b144 = trunc i32 %v0_b144 to i8
  store i32 %v0_b144, i32* %r0.global-to-local, align 4
  store i32 %v3_ac58, i32* %r1.global-to-local, align 4
  %v4_b14c = sdiv i32 %v0_b144, 256
  store i32 %v4_b14c, i32* %r3.global-to-local, align 4
  %v1_b150 = load i32, i32* @r4, align 4
  %v9_b150 = icmp eq i32 %v3_ac58, %v1_b150
  store i1 %v9_b150, i1* %cpsr_z.global-to-local, align 1
  %v3_b154 = load i32, i32* @r5, align 4
  %v4_b154 = add i32 %v3_b154, 44
  %v5_b154 = inttoptr i32 %v4_b154 to i8*
  store i8 %v1_b144, i8* %v5_b154, align 1
  %v0_b158 = load i32, i32* %r3.global-to-local, align 4
  %v1_b158 = trunc i32 %v0_b158 to i8
  %v2_b158 = load i32, i32* @r7, align 4
  %v3_b158 = add i32 %v2_b158, 1
  %v4_b158 = inttoptr i32 %v3_b158 to i8*
  store i8 %v1_b158, i8* %v4_b158, align 1
  %v0_b15c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b15c, label %dec_label_pc_b160, label %dec_label_pc_af88

dec_label_pc_b160:                                ; preds = %dec_label_pc_b144, %dec_label_pc_af7c
  %v0_b160 = call i32 @function_f468()
  %v1_b160 = trunc i32 %v0_b160 to i8
  store i32 %v0_b160, i32* %r0.global-to-local, align 4
  store i32 %v1_ac4c, i32* %r2.global-to-local, align 4
  %v4_b168 = sdiv i32 %v0_b160, 256
  store i32 %v4_b168, i32* %r3.global-to-local, align 4
  store i1 %v2_af8c, i1* %cpsr_z.global-to-local, align 1
  %v1_b170 = trunc i32 %v4_b168 to i8
  %v2_b170 = load i32, i32* @r7, align 4
  %v3_b170 = add i32 %v2_b170, 3
  %v4_b170 = inttoptr i32 %v3_b170 to i8*
  store i8 %v1_b170, i8* %v4_b170, align 1
  %v0_b174 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b174, label %bb102, label %bb101

bb101:                                            ; preds = %dec_label_pc_b160
  %v1_b174 = load i32, i32* @r5, align 4
  %v2_b174 = add i32 %v1_b174, 16
  %v3_b174 = inttoptr i32 %v2_b174 to i32*
  %v4_b174 = load i32, i32* %v3_b174, align 4
  store i32 %v4_b174, i32* %r3.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %dec_label_pc_b160, %bb101
  %v3_b178 = load i32, i32* @r7, align 4
  %v4_b178 = add i32 %v3_b178, 2
  %v5_b178 = inttoptr i32 %v4_b178 to i8*
  store i8 %v1_b160, i8* %v5_b178, align 1
  %v0_b17c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b17c, label %dec_label_pc_b184, label %bb103

bb103:                                            ; preds = %bb102
  %v1_b17c = load i32, i32* %r3.global-to-local, align 4
  %v2_b17c = load i32, i32* @r6, align 4
  %v3_b17c = add i32 %v2_b17c, 16
  %v4_b17c = inttoptr i32 %v3_b17c to i32*
  store i32 %v1_b17c, i32* %v4_b17c, align 4
  br label %dec_label_pc_af9c

dec_label_pc_b184:                                ; preds = %dec_label_pc_af88, %bb102
  %v0_b184 = call i32 @function_f468()
  store i32 %v0_b184, i32* %r0.global-to-local, align 4
  store i32 %v1_abb8, i32* %r3.global-to-local, align 4
  store i1 %v2_b18c, i1* %cpsr_z.global-to-local, align 1
  %v1_b190 = load i32, i32* @r6, align 4
  %v2_b190 = add i32 %v1_b190, 16
  %v3_b190 = inttoptr i32 %v2_b190 to i32*
  store i32 %v0_b184, i32* %v3_b190, align 4
  br i1 %v2_b18c, label %dec_label_pc_afa8, label %dec_label_pc_b198

dec_label_pc_b198:                                ; preds = %dec_label_pc_af9c, %dec_label_pc_b184
  %v0_b198 = load i32, i32* @r7, align 4
  %v1_b198 = add i32 %v0_b198, 8
  store i32 %v1_b198, i32* %r0.global-to-local, align 4
  store i32 %v5_ab98, i32* @r1, align 4
  %v1_b1a0 = inttoptr i32 %v1_b198 to i8*
  %v2_b1a0 = call i32 @function_f5e8(i8* %v1_b1a0)
  store i32 %v2_b1a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_afa8

dec_label_pc_b1a8:                                ; preds = %dec_label_pc_ac38
  %v1_b1b0 = add i32 %v5_ab98, 8
  store i32 %v1_b1b0, i32* %r2.global-to-local, align 4
  %v1_b1b4 = add i32 %v5_ab98, 52
  store i32 %v1_b1b4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_af14.preheader

; uselistorder directives
  uselistorder i32 %v1_b1b4, { 1, 0 }
  uselistorder i32 %v1_b1b0, { 1, 0 }
  uselistorder i32 %v4_b168, { 1, 0 }
  uselistorder i32 %v0_b160, { 0, 2, 1 }
  uselistorder i32 %v0_b144, { 0, 2, 1 }
  uselistorder i32 %v2_b0e4, { 1, 0 }
  uselistorder i32 %v8_b0c4, { 1, 2, 0 }
  uselistorder i32 %v0_b0a0, { 1, 0, 2 }
  uselistorder i32 %v1_b06c, { 1, 2, 0 }
  uselistorder i32 %v1_b068, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_b00c, { 1, 0, 2 }
  uselistorder i32 %v4_b008, { 0, 2, 1 }
  uselistorder i32 %v0_afe8, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_afd8, { 0, 2, 1 }
  uselistorder i32 %v4_afbc, { 1, 0 }
  uselistorder i32 %v7_af40, { 1, 0, 2 }
  uselistorder i32 %v0_af14, { 1, 0 }
  uselistorder i1 %v2_af58, { 3, 0, 1, 2 }
  uselistorder i1 %v2_b18c, { 2, 3, 1, 0 }
  uselistorder i32 %v1_aed4, { 1, 0, 2 }
  uselistorder i32 %v0_ae98, { 1, 0, 2 }
  uselistorder i32 %v3_ad4c, { 0, 2, 1 }
  uselistorder i32 %v3_ad0c, { 1, 0 }
  uselistorder i32 %tmp87, { 1, 0 }
  uselistorder i32 %v1_acc4, { 1, 0 }
  uselistorder i32 %v1_aca0, { 1, 0 }
  uselistorder i32 %v1_ac9c, { 0, 2, 1 }
  uselistorder i32 %v3_ac80, { 2, 1, 0 }
  uselistorder i32 %v0_ac5c, { 1, 0, 2 }
  uselistorder i32 %v1_ac4c, { 5, 3, 4, 1, 2, 0 }
  uselistorder i32 %v0_ac48, { 0, 3, 2, 1 }
  uselistorder i32 %v0_ac44, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_ac00, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 %v5_abec, { 4, 2, 3, 1, 0 }
  uselistorder i32 %v1_abb8, { 1, 0, 2 }
  uselistorder i32 %v5_ab98, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8 %v5_ab3c, { 1, 0 }
  uselistorder i32 %v4_aacc, { 0, 3, 1, 2 }
  uselistorder i32 %v1_aab0, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 18, 23, 19, 20, 21, 22, 26, 24, 25, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29 }
  uselistorder i8 47, { 1, 0 }
  uselistorder label %dec_label_pc_b198, { 1, 0 }
  uselistorder label %dec_label_pc_b184, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %dec_label_pc_b084, { 1, 0 }
  uselistorder label %dec_label_pc_afa8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_af14.preheader, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %.thread24, { 2, 1, 0 }
}

define i32 @function_b1c8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b1c8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_b1c8 = load i32, i32* @r4, align 4
  %v6_b1c8 = load i32, i32* @r5, align 4
  %v9_b1c8 = load i32, i32* @r6, align 4
  %v12_b1c8 = load i32, i32* @r7, align 4
  %v1_b1cc = urem i32 %arg1, 256
  store i32 %v1_b1cc, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_b1e0 = urem i32 %arg3, 256
  store i32 %v1_b1e0, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_b1e8 = call i32* @calloc(i32 %v1_b1cc, i32 4)
  %v4_b1e8 = ptrtoint i32* %v2_b1e8 to i32
  %v0_b1ec = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b1f8 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_b200 = inttoptr i32 %v0_b1ec to i32*
  %v6_b200 = call i32 @function_92dc(i32 %v0_b1f8, i32* %v5_b200, i32 2, i32 0)
  %v1_b20c = urem i32 %v6_b200, 256
  store i32 %v1_b20c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b218 = load i32, i32* @r4, align 4
  %v0_b21c = load i32, i32* @r5, align 4
  %v5_b220 = trunc i32 %v6_b200 to i8
  %v6_b224 = inttoptr i32 %v0_b21c to i32*
  %v7_b224 = call i32 @function_92dc(i32 %v0_b218, i32* %v6_b224, i32 3, i32 65535)
  %v0_b228 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b224, i32* @r7, align 4
  %v0_b238 = load i32, i32* @r4, align 4
  %v4_b23c = inttoptr i32 %v0_b228 to i32*
  %v5_b23c = call i32 @function_92dc(i32 %v0_b238, i32* %v4_b23c, i32 4, i32 64)
  %v1_b244 = urem i32 %v5_b23c, 256
  store i32 %v1_b244, i32* %ip.global-to-local, align 4
  %v0_b248 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b254 = load i32, i32* @r4, align 4
  %v5_b258 = trunc i32 %v5_b23c to i8
  %v6_b25c = inttoptr i32 %v0_b248 to i32*
  %v7_b25c = call i32 @function_92dc(i32 %v0_b254, i32* %v6_b25c, i32 5, i32 0)
  %v1_b268 = urem i32 %v7_b25c, 256
  store i32 %v1_b268, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b274 = load i32, i32* @r4, align 4
  %v0_b278 = load i32, i32* @r5, align 4
  %v5_b280 = inttoptr i32 %v0_b278 to i32*
  %v6_b280 = call i32 @function_92dc(i32 %v0_b274, i32* %v5_b280, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b290 = load i32, i32* @r5, align 4
  store i32 %v6_b280, i32* @r6, align 4
  %v0_b298 = load i32, i32* @r4, align 4
  %v4_b29c = inttoptr i32 %v0_b290 to i32*
  %v5_b29c = call i32 @function_92dc(i32 %v0_b298, i32* %v4_b29c, i32 7, i32 27015)
  store i32 %v5_b29c, i32* @r4, align 4
  %v1_b2a8 = call i32 @function_11138(i32 20)
  %v3_b2b4 = call i32 @function_11054(i32 20, i32* nonnull %stack_var_-44)
  store i32 %v3_b2b4, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_b2c8 = call i32 @socket(i32 2, i32 3, i32 17)
  %v2_b2cc = icmp eq i32 %v3_b2c8, -1
  store i1 %v2_b2cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b2c8, i32* %fp.global-to-local, align 4
  br i1 %v2_b2cc, label %dec_label_pc_b680, label %dec_label_pc_b2d8

dec_label_pc_b2d8:                                ; preds = %dec_label_pc_b1c8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b2e0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b2e0, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b2f4 = call i32 @setsockopt(i32 0, i32 3, i32 %v6_b2e0, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v2_b2f8 = icmp eq i32 %v6_b2f4, -1
  store i1 %v2_b2f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b2f8, label %dec_label_pc_b678, label %dec_label_pc_b300

dec_label_pc_b300:                                ; preds = %dec_label_pc_b2d8
  %v0_b300 = load i32, i32* @r4, align 4
  %v3_b300 = mul i32 %v0_b300, 65536
  store i32 %v3_b300, i32* %lr.global-to-local, align 4
  %v0_b304 = load i32, i32* @r7, align 4
  %v0_b308 = load i32, i32* @r6, align 4
  %v3_b308 = mul i32 %v0_b308, 65536
  store i32 %v3_b308, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_b310 = urem i32 %v0_b304, 65536
  %v3_b314 = urem i32 %v0_b308, 65536
  store i32 %v3_b314, i32* %r2.global-to-local, align 4
  %v3_b318 = urem i32 %v0_b300, 65536
  store i32 %v3_b318, i32* %r3.global-to-local, align 4
  %v0_b31c = load i32, i32* %sb.global-to-local, align 4
  %v2_b31c = icmp eq i32 %v0_b31c, 0
  store i1 %v2_b31c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp51 = icmp slt i32 %v0_b31c, 1
  br i1 %tmp51, label %dec_label_pc_b4a0, label %dec_label_pc_b334

dec_label_pc_b334:                                ; preds = %dec_label_pc_b300
  %v1_b338 = urem i32 %v0_b300, 256
  %v1_b33c = urem i32 %v0_b308, 256
  %v1_b340 = urem i32 %v0_b304, 256
  %v3_b344 = mul nuw nsw i32 %v1_b33c, 256
  %v3_b348 = mul nuw nsw i32 %v1_b338, 256
  %tmp52 = udiv i32 %v0_b304, 256
  %v3_b34c = urem i32 %tmp52, 256
  %v4_b350 = mul nuw nsw i32 %v1_b340, 256
  %v5_b350 = or i32 %v4_b350, %v3_b34c
  store i32 %v5_b350, i32* %r7.global-to-local, align 4
  %tmp53 = udiv i32 %v0_b300, 256
  %v4_b354 = urem i32 %tmp53, 256
  %v5_b354 = or i32 %v4_b354, %v3_b348
  store i32 %v5_b354, i32* %r5.global-to-local, align 4
  %tmp54 = udiv i32 %v0_b308, 256
  %v4_b358 = urem i32 %tmp54, 256
  %v5_b358 = or i32 %v4_b358, %v3_b344
  store i32 %v5_b358, i32* %r6.global-to-local, align 4
  store i32 %v1_b33c, i32* %r2.global-to-local, align 4
  store i32 %v1_b338, i32* %r3.global-to-local, align 4
  %v2_b3d4 = icmp eq i32 %v1_b268, 0
  %v4_b3d8 = sext i8 %v5_b258 to i32
  %sext = mul i32 %v0_b304, 16777216
  %v4_b3f4 = sdiv i32 %sext, 16777216
  %sext7 = mul i32 %v0_b308, 16777216
  %v4_b450 = sdiv i32 %sext7, 16777216
  %sext8 = mul i32 %v0_b300, 16777216
  %v4_b470 = sdiv i32 %sext8, 16777216
  br label %dec_label_pc_b374

dec_label_pc_b374:                                ; preds = %bb58, %dec_label_pc_b334
  %v2_b37c = call i32* @calloc(i32 128, i32 1)
  %v4_b37c = ptrtoint i32* %v2_b37c to i32
  store i32 %v4_b1e8, i32* %r2.global-to-local, align 4
  %v3_b384 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b384, i32* %r3.global-to-local, align 4
  %v2_b388 = load i32, i32* @r4, align 4
  %v5_b388 = mul i32 %v2_b388, 4
  %v6_b388 = add i32 %v5_b388, %v4_b1e8
  %v7_b388 = inttoptr i32 %v6_b388 to i32*
  store i32 %v4_b37c, i32* %v7_b388, align 4
  %v0_b38c = load i32, i32* %r2.global-to-local, align 4
  %v1_b38c = load i32, i32* %r3.global-to-local, align 4
  %v4_b38c = mul i32 %v1_b38c, 4
  %v5_b38c = add i32 %v4_b38c, %v0_b38c
  %v6_b38c = inttoptr i32 %v5_b38c to i32*
  %v7_b38c = load i32, i32* %v6_b38c, align 4
  store i32 %v7_b38c, i32* %lr.global-to-local, align 4
  %v1_b390 = inttoptr i32 %v7_b38c to i8*
  %v2_b390 = load i8, i8* %v1_b390, align 1
  %tmp = urem i8 %v2_b390, 16
  %v1_b394 = zext i8 %tmp to i32
  %v1_b398 = or i32 %v1_b394, 64
  store i32 %v1_b398, i32* %r3.global-to-local, align 4
  %v1_b39c = trunc i32 %v1_b398 to i8
  store i8 %v1_b39c, i8* %v1_b390, align 1
  %v0_b3a0 = load i32, i32* %lr.global-to-local, align 4
  %v1_b3a0 = inttoptr i32 %v0_b3a0 to i8*
  %v2_b3a0 = load i8, i8* %v1_b3a0, align 1
  %v1_b3a4 = and i8 %v2_b3a0, -16
  %v1_b3a8 = or i8 %v1_b3a4, 5
  store i8 %v1_b3a8, i8* %v1_b3a0, align 1
  %v2_b3b4 = load i32, i32* %lr.global-to-local, align 4
  %v3_b3b4 = add i32 %v2_b3b4, 1
  %v4_b3b4 = inttoptr i32 %v3_b3b4 to i8*
  store i8 %v5_b220, i8* %v4_b3b4, align 1
  %v3_b3b8 = load i32, i32* %stack_var_-44, align 4
  %v1_b3bc = add i32 %v3_b3b8, 32
  %tmp55 = mul i32 %v1_b3bc, 256
  %v1_b3c8 = and i32 %tmp55, 65280
  %tmp56 = udiv i32 %v1_b3bc, 256
  %v4_b3cc = urem i32 %tmp56, 256
  %v5_b3cc = or i32 %v4_b3cc, %v1_b3c8
  store i32 %v5_b3cc, i32* %r2.global-to-local, align 4
  store i1 %v2_b3d4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b3d8, i32* %r3.global-to-local, align 4
  %v2_b3dc = load i32, i32* %lr.global-to-local, align 4
  %v3_b3dc = add i32 %v2_b3dc, 8
  %v4_b3dc = inttoptr i32 %v3_b3dc to i8*
  store i8 %v5_b258, i8* %v4_b3dc, align 1
  %v0_b3e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3e0, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_b374
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_b3e4 = load i32, i32* %lr.global-to-local, align 4
  %v4_b3e4 = add i32 %v3_b3e4, 6
  %v5_b3e4 = inttoptr i32 %v4_b3e4 to i8*
  store i8 64, i8* %v5_b3e4, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_b374, %bb
  %v0_b3e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3e8 = trunc i32 %v0_b3e8 to i8
  %v2_b3e8 = load i32, i32* %lr.global-to-local, align 4
  %v3_b3e8 = add i32 %v2_b3e8, 2
  %v4_b3e8 = inttoptr i32 %v3_b3e8 to i8*
  store i8 %v1_b3e8, i8* %v4_b3e8, align 1
  %v0_b3ec = load i32, i32* %r2.global-to-local, align 4
  %v3_b3ec = sdiv i32 %v0_b3ec, 256
  store i32 %v3_b3ec, i32* %ip.global-to-local, align 4
  store i32 %v4_b3f4, i32* %r2.global-to-local, align 4
  %v2_b3f8 = load i32, i32* %lr.global-to-local, align 4
  %v3_b3f8 = add i32 %v2_b3f8, 9
  %v4_b3f8 = inttoptr i32 %v3_b3f8 to i8*
  store i8 17, i8* %v4_b3f8, align 1
  store i32 ptrtoint (i32* @global_var_1a40c.102 to i32), i32* %r3.global-to-local, align 4
  %v0_b400 = load i32, i32* %r2.global-to-local, align 4
  %v1_b400 = trunc i32 %v0_b400 to i8
  %v2_b400 = load i32, i32* %lr.global-to-local, align 4
  %v3_b400 = add i32 %v2_b400, 5
  %v4_b400 = inttoptr i32 %v3_b400 to i8*
  store i8 %v1_b400, i8* %v4_b400, align 1
  %v0_b404 = load i32, i32* %ip.global-to-local, align 4
  %v1_b404 = trunc i32 %v0_b404 to i8
  %v2_b404 = load i32, i32* %lr.global-to-local, align 4
  %v3_b404 = add i32 %v2_b404, 3
  %v4_b404 = inttoptr i32 %v3_b404 to i8*
  store i8 %v1_b404, i8* %v4_b404, align 1
  %v0_b408 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b408, label %.thread9, label %bb57

.thread9:                                         ; preds = %.thread
  %v3_b40c10 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b40c10, i32* %ip.global-to-local, align 4
  br label %bb58

bb57:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b40c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b40c, i32* %ip.global-to-local, align 4
  %v3_b410 = load i32, i32* %lr.global-to-local, align 4
  %v4_b410 = add i32 %v3_b410, 7
  %v5_b410 = inttoptr i32 %v4_b410 to i8*
  store i8 0, i8* %v5_b410, align 1
  %v0_b418.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb58

bb58:                                             ; preds = %.thread9, %bb57
  %v0_b418 = phi i32 [ %v3_b40c10, %.thread9 ], [ %v0_b418.pre, %bb57 ]
  %v2_b414 = load i32, i32* @global_var_1a40c.102, align 4
  store i32 %v2_b414, i32* %r2.global-to-local, align 4
  %v3_b418 = mul i32 %v0_b418, 32
  store i32 %v3_b418, i32* %r3.global-to-local, align 4
  %v1_b41c = load i32, i32* %lr.global-to-local, align 4
  %v2_b41c = add i32 %v1_b41c, 12
  %v3_b41c = inttoptr i32 %v2_b41c to i32*
  store i32 %v2_b414, i32* %v3_b41c, align 4
  %v0_b420 = load i32, i32* %r3.global-to-local, align 4
  %v1_b420 = load i32, i32* %ip.global-to-local, align 4
  %tmp61 = mul i32 %v1_b420, -8
  %v5_b420 = add i32 %v0_b420, %tmp61
  %v1_b424 = load i32, i32* @sl, align 4
  %v2_b424 = add i32 %v5_b420, %v1_b424
  store i32 %v2_b424, i32* %r3.global-to-local, align 4
  %v1_b428 = add i32 %v2_b424, 16
  %v2_b428 = inttoptr i32 %v1_b428 to i32*
  %v3_b428 = load i32, i32* %v2_b428, align 4
  %v1_b42c = load i32, i32* %lr.global-to-local, align 4
  %v2_b42c = add i32 %v1_b42c, 16
  %v3_b42c = inttoptr i32 %v2_b42c to i32*
  store i32 %v3_b428, i32* %v3_b42c, align 4
  %v3_b430 = load i32, i32* %stack_var_-44, align 4
  %v1_b434 = add i32 %v3_b430, 12
  %tmp59 = mul i32 %v1_b434, 256
  %v1_b444 = and i32 %tmp59, 65280
  %tmp60 = udiv i32 %v1_b434, 256
  %v4_b448 = urem i32 %tmp60, 256
  %v5_b448 = or i32 %v4_b448, %v1_b444
  store i32 %v5_b448, i32* %ip.global-to-local, align 4
  %v1_b44c = load i32, i32* %lr.global-to-local, align 4
  %v2_b44c = add i32 %v1_b44c, 28
  %v3_b44c = inttoptr i32 %v2_b44c to i32*
  store i32 -1, i32* %v3_b44c, align 4
  store i32 %v4_b450, i32* %r2.global-to-local, align 4
  %v0_b454 = load i32, i32* %lr.global-to-local, align 4
  %v1_b454 = add i32 %v0_b454, 20
  store i32 %v1_b454, i32* %r4.global-to-local, align 4
  %v0_b458 = load i32, i32* %ip.global-to-local, align 4
  %v3_b458 = sdiv i32 %v0_b458, 256
  store i32 %v3_b458, i32* %r3.global-to-local, align 4
  %v0_b45c = load i32, i32* %r7.global-to-local, align 4
  %v1_b45c = trunc i32 %v0_b45c to i8
  %v3_b45c = add i32 %v0_b454, 4
  %v4_b45c = inttoptr i32 %v3_b45c to i8*
  store i8 %v1_b45c, i8* %v4_b45c, align 1
  %v0_b460 = load i32, i32* %r6.global-to-local, align 4
  %v1_b460 = trunc i32 %v0_b460 to i8
  %v2_b460 = load i32, i32* %lr.global-to-local, align 4
  %v3_b460 = add i32 %v2_b460, 20
  %v4_b460 = inttoptr i32 %v3_b460 to i8*
  store i8 %v1_b460, i8* %v4_b460, align 1
  %v0_b464 = load i32, i32* %r3.global-to-local, align 4
  %v1_b464 = trunc i32 %v0_b464 to i8
  %v2_b464 = load i32, i32* %r4.global-to-local, align 4
  %v3_b464 = add i32 %v2_b464, 5
  %v4_b464 = inttoptr i32 %v3_b464 to i8*
  store i8 %v1_b464, i8* %v4_b464, align 1
  %v0_b468 = load i32, i32* %r5.global-to-local, align 4
  %v1_b468 = trunc i32 %v0_b468 to i8
  %v2_b468 = load i32, i32* %r4.global-to-local, align 4
  %v3_b468 = add i32 %v2_b468, 2
  %v4_b468 = inttoptr i32 %v3_b468 to i8*
  store i8 %v1_b468, i8* %v4_b468, align 1
  %v0_b46c = load i32, i32* %r2.global-to-local, align 4
  %v1_b46c = trunc i32 %v0_b46c to i8
  %v2_b46c = load i32, i32* %r4.global-to-local, align 4
  %v3_b46c = add i32 %v2_b46c, 1
  %v4_b46c = inttoptr i32 %v3_b46c to i8*
  store i8 %v1_b46c, i8* %v4_b46c, align 1
  store i32 %v4_b470, i32* %r3.global-to-local, align 4
  %v0_b474 = load i32, i32* %ip.global-to-local, align 4
  %v1_b474 = trunc i32 %v0_b474 to i8
  %v2_b474 = load i32, i32* %r4.global-to-local, align 4
  %v3_b474 = add i32 %v2_b474, 4
  %v4_b474 = inttoptr i32 %v3_b474 to i8*
  store i8 %v1_b474, i8* %v4_b474, align 1
  %v0_b478 = load i32, i32* %r3.global-to-local, align 4
  %v1_b478 = trunc i32 %v0_b478 to i8
  %v2_b478 = load i32, i32* %r4.global-to-local, align 4
  %v3_b478 = add i32 %v2_b478, 3
  %v4_b478 = inttoptr i32 %v3_b478 to i8*
  store i8 %v1_b478, i8* %v4_b478, align 1
  %v0_b47c = load i32, i32* %r8.global-to-local, align 4
  %v0_b480 = load i32, i32* %lr.global-to-local, align 4
  %v1_b480 = add i32 %v0_b480, 32
  %v3_b484 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b484, i32* %r2.global-to-local, align 4
  %v3_b488 = call i32 @function_11780(i32 %v1_b480, i32 %v0_b47c, i32 %v3_b484)
  %v3_b48c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b48c, i32* %r3.global-to-local, align 4
  %v1_b490 = add i32 %v3_b48c, 1
  store i32 %v1_b490, i32* @r4, align 4
  %v1_b494 = load i32, i32* %sb.global-to-local, align 4
  %v9_b494 = icmp eq i32 %v1_b490, %v1_b494
  store i1 %v9_b494, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b490, i32* %stack_var_-40, align 4
  %v5_b49c = icmp slt i32 %v1_b490, %v1_b494
  br i1 %v5_b49c, label %dec_label_pc_b374, label %dec_label_pc_b4a0

dec_label_pc_b4a0:                                ; preds = %bb58, %dec_label_pc_b300
  %v0_b4a0 = phi i32 [ %v0_b31c, %dec_label_pc_b300 ], [ %v1_b494, %bb58 ]
  %v2_b4a0 = icmp eq i32 %v0_b4a0, 0
  store i1 %v2_b4a0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b4e8 = icmp eq i32 %v3_b310, 65535
  br label %dec_label_pc_b4a8.outer

dec_label_pc_b4a8.outer:                          ; preds = %dec_label_pc_b5b8, %dec_label_pc_b4a0
  %v1_b4a8.ph.in = phi i32 [ %v1_b5ac, %dec_label_pc_b5b8 ], [ %v0_b4a0, %dec_label_pc_b4a0 ]
  %v0_b4a8.ph = phi i1 [ %v2_b5b8, %dec_label_pc_b5b8 ], [ %v2_b4a0, %dec_label_pc_b4a0 ]
  %v1_b4a8.ph = icmp slt i32 %v1_b4a8.ph.in, 0
  %v4_b4a8 = or i1 %v1_b4a8.ph, %v0_b4a8.ph
  br label %dec_label_pc_b4a8

dec_label_pc_b4a8:                                ; preds = %dec_label_pc_b4a8.outer, %dec_label_pc_b4a8
  br i1 %v4_b4a8, label %dec_label_pc_b4a8, label %dec_label_pc_b4ac

dec_label_pc_b4ac:                                ; preds = %dec_label_pc_b4a8
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_b4b8

dec_label_pc_b4b8:                                ; preds = %dec_label_pc_b508, %dec_label_pc_b4ac
  %v1_b4cc = phi i32 [ %v1_b5a8, %dec_label_pc_b508 ], [ 0, %dec_label_pc_b4ac ]
  %v5_b4bc = mul i32 %v1_b4cc, 24
  %v1_b4c0 = load i32, i32* @sl, align 4
  %v2_b4c0 = add i32 %v1_b4c0, %v5_b4bc
  store i32 %v2_b4c0, i32* %r3.global-to-local, align 4
  %v1_b4c8 = add i32 %v2_b4c0, 20
  %v2_b4c8 = inttoptr i32 %v1_b4c8 to i8*
  %v3_b4c8 = load i8, i8* %v2_b4c8, align 1
  %v4_b4c8 = zext i8 %v3_b4c8 to i32
  store i32 %v4_b4c8, i32* %r2.global-to-local, align 4
  %v4_b4cc = mul i32 %v1_b4cc, 4
  %v5_b4cc = add i32 %v4_b4cc, %v4_b1e8
  %v6_b4cc = inttoptr i32 %v5_b4cc to i32*
  %v7_b4cc = load i32, i32* %v6_b4cc, align 4
  store i32 %v7_b4cc, i32* @r5, align 4
  %v7_b4d4 = icmp eq i8 %v3_b4c8, 31
  store i1 %v7_b4d4, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_b4dc = add i32 %v7_b4cc, 20
  store i32 %v1_b4dc, i32* @r6, align 4
  %tmp62 = icmp ult i8 %v3_b4c8, 32
  br i1 %tmp62, label %dec_label_pc_b5c4, label %dec_label_pc_b4e4

dec_label_pc_b4e4:                                ; preds = %dec_label_pc_b4b8
  store i32 %v3_b310, i32* %r2.global-to-local, align 4
  store i1 %v3_b4e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b4e8, label %dec_label_pc_b62c, label %dec_label_pc_b4f0

dec_label_pc_b4f0:                                ; preds = %dec_label_pc_b5c4.dec_label_pc_b4f0_crit_edge, %dec_label_pc_b4e4
  %v1_b4f4 = phi i32 [ %v1_b4f4.pre, %dec_label_pc_b5c4.dec_label_pc_b4f0_crit_edge ], [ 65535, %dec_label_pc_b4e4 ]
  store i32 %v3_b314, i32* %r3.global-to-local, align 4
  %v9_b4f4 = icmp eq i32 %v3_b314, %v1_b4f4
  store i1 %v9_b4f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4f4, label %dec_label_pc_b648, label %dec_label_pc_b4fc

dec_label_pc_b4fc:                                ; preds = %dec_label_pc_b62c.dec_label_pc_b4fc_crit_edge, %dec_label_pc_b4f0
  %v1_b500 = phi i32 [ %v1_b500.pre, %dec_label_pc_b62c.dec_label_pc_b4fc_crit_edge ], [ %v1_b4f4, %dec_label_pc_b4f0 ]
  %v9_b500 = icmp eq i32 %v3_b318, %v1_b500
  store i1 %v9_b500, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b500, label %dec_label_pc_b664, label %dec_label_pc_b508

dec_label_pc_b508:                                ; preds = %dec_label_pc_b648, %dec_label_pc_b4fc, %dec_label_pc_b664
  %v0_b50c = load i32, i32* %r8.global-to-local, align 4
  %v1_b50c = trunc i32 %v0_b50c to i8
  %v2_b50c = load i32, i32* @r5, align 4
  %v3_b50c = add i32 %v2_b50c, 10
  %v4_b50c = inttoptr i32 %v3_b50c to i8*
  store i8 %v1_b50c, i8* %v4_b50c, align 1
  %v0_b510 = load i32, i32* %r8.global-to-local, align 4
  %v1_b510 = trunc i32 %v0_b510 to i8
  %v2_b510 = load i32, i32* @r5, align 4
  %v3_b510 = add i32 %v2_b510, 11
  %v4_b510 = inttoptr i32 %v3_b510 to i8*
  store i8 %v1_b510, i8* %v4_b510, align 1
  %v0_b514 = load i32, i32* @r5, align 4
  store i32 %v0_b514, i32* @r0, align 4
  %v2_b518 = call i32 @function_ddf4(i32 %v0_b514, i32 20)
  %v3_b518 = trunc i32 %v2_b518 to i8
  %v4_b51c = sdiv i32 %v2_b518, 256
  store i32 %v4_b51c, i32* %r3.global-to-local, align 4
  %v1_b520 = trunc i32 %v4_b51c to i8
  %v2_b520 = load i32, i32* @r5, align 4
  %v3_b520 = add i32 %v2_b520, 11
  %v4_b520 = inttoptr i32 %v3_b520 to i8*
  store i8 %v1_b520, i8* %v4_b520, align 1
  %v3_b524 = load i32, i32* @r5, align 4
  %v4_b524 = add i32 %v3_b524, 10
  %v5_b524 = inttoptr i32 %v4_b524 to i8*
  store i8 %v3_b518, i8* %v5_b524, align 1
  %v0_b528 = load i32, i32* %r8.global-to-local, align 4
  %v1_b528 = trunc i32 %v0_b528 to i8
  %v2_b528 = load i32, i32* @r6, align 4
  %v3_b528 = add i32 %v2_b528, 6
  %v4_b528 = inttoptr i32 %v3_b528 to i8*
  store i8 %v1_b528, i8* %v4_b528, align 1
  %v0_b52c = load i32, i32* %r8.global-to-local, align 4
  %v1_b52c = trunc i32 %v0_b52c to i8
  %v2_b52c = load i32, i32* @r6, align 4
  %v3_b52c = add i32 %v2_b52c, 7
  %v4_b52c = inttoptr i32 %v3_b52c to i8*
  store i8 %v1_b52c, i8* %v4_b52c, align 1
  %v0_b530 = load i32, i32* @r5, align 4
  %v1_b530 = add i32 %v0_b530, 24
  %v2_b530 = inttoptr i32 %v1_b530 to i8*
  %v3_b530 = load i8, i8* %v2_b530, align 1
  %v4_b530 = zext i8 %v3_b530 to i32
  store i32 %v4_b530, i32* %r3.global-to-local, align 4
  %v1_b534 = add i32 %v0_b530, 25
  %v2_b534 = inttoptr i32 %v1_b534 to i8*
  %v3_b534 = load i8, i8* %v2_b534, align 1
  %v4_b534 = zext i8 %v3_b534 to i32
  %v4_b538 = mul nuw nsw i32 %v4_b534, 256
  %v5_b538 = or i32 %v4_b538, %v4_b530
  store i32 %v5_b538, i32* %r2.global-to-local, align 4
  %v3_b53c = load i32, i32* %stack_var_-44, align 4
  %v0_b540 = load i32, i32* @r6, align 4
  store i32 %v0_b540, i32* @r1, align 4
  %v1_b544 = add i32 %v3_b53c, 12
  store i32 %v1_b544, i32* %r3.global-to-local, align 4
  %v4_b54c = call i32 @function_de50(i32 %v0_b530, i32 %v0_b540, i32 %v5_b538, i32 %v1_b544)
  %v5_b54c = trunc i32 %v4_b54c to i8
  %v4_b55025 = udiv i32 %v4_b54c, 256
  %v1_b554 = trunc i32 %v4_b55025 to i8
  %v2_b554 = load i32, i32* @r6, align 4
  %v3_b554 = add i32 %v2_b554, 7
  %v4_b554 = inttoptr i32 %v3_b554 to i8*
  store i8 %v1_b554, i8* %v4_b554, align 1
  %v3_b558 = load i32, i32* @r6, align 4
  %v4_b558 = add i32 %v3_b558, 6
  %v5_b558 = inttoptr i32 %v4_b558 to i8*
  store i8 %v5_b54c, i8* %v5_b558, align 1
  %v3_b55c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b55c, i32* %r3.global-to-local, align 4
  %v0_b560 = load i32, i32* @r5, align 4
  %v1_b560 = add i32 %v0_b560, 20
  %v2_b560 = inttoptr i32 %v1_b560 to i32*
  %v3_b560 = load i32, i32* %v2_b560, align 4
  %v5_b568 = mul i32 %v3_b55c, 24
  %v1_b56c = load i32, i32* @sl, align 4
  %v2_b56c = add i32 %v1_b56c, %v5_b568
  store i32 %v2_b56c, i32* %ip.global-to-local, align 4
  %v3_b570 = udiv i32 %v3_b560, 65536
  store i32 %v3_b570, i32* %r2.global-to-local, align 4
  %v1_b574 = trunc i32 %v3_b570 to i8
  %v3_b574 = add i32 %v2_b56c, 2
  %v4_b574 = inttoptr i32 %v3_b574 to i8*
  store i8 %v1_b574, i8* %v4_b574, align 1
  %v0_b578 = load i32, i32* %r2.global-to-local, align 4
  %v3_b57826 = udiv i32 %v0_b578, 256
  %v3_b57c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b57c, i32* %r2.global-to-local, align 4
  %v1_b580 = trunc i32 %v3_b57826 to i8
  %v2_b580 = load i32, i32* %ip.global-to-local, align 4
  %v3_b580 = add i32 %v2_b580, 3
  %v4_b580 = inttoptr i32 %v3_b580 to i8*
  store i8 %v1_b580, i8* %v4_b580, align 1
  %v0_b584 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b58c = load i32, i32* %r2.global-to-local, align 4
  %v1_b58c = add i32 %v0_b58c, 32
  store i32 %v1_b58c, i32* %r2.global-to-local, align 4
  %v0_b590 = load i32, i32* %fp.global-to-local, align 4
  %v0_b598 = load i32, i32* %ip.global-to-local, align 4
  %v4_b598 = inttoptr i32 %v0_b598 to %sockaddr*
  %v7_b5a0 = inttoptr i32 %v0_b584 to i32*
  %v9_b5a0 = call i32 @sendto(i32 %v0_b590, i32* %v7_b5a0, i32 %v1_b58c, i32 16384, %sockaddr* %v4_b598, i32 16)
  %v3_b5a4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b5a4, i32* %r3.global-to-local, align 4
  %v1_b5a8 = add i32 %v3_b5a4, 1
  %v1_b5ac = load i32, i32* %sb.global-to-local, align 4
  %v9_b5ac = icmp eq i32 %v1_b5a8, %v1_b5ac
  store i1 %v9_b5ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b5a8, i32* %stack_var_-40, align 4
  %v5_b5b4 = icmp slt i32 %v1_b5a8, %v1_b5ac
  br i1 %v5_b5b4, label %dec_label_pc_b4b8, label %dec_label_pc_b5b8

dec_label_pc_b5b8:                                ; preds = %dec_label_pc_b508
  %v2_b5b8 = icmp eq i32 %v1_b5ac, 0
  store i1 %v2_b5b8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b4a8.outer

dec_label_pc_b5c4:                                ; preds = %dec_label_pc_b4b8
  %v1_b5c4 = add i32 %v2_b4c0, 16
  %v2_b5c4 = inttoptr i32 %v1_b5c4 to i32*
  %v3_b5c4 = load i32, i32* %v2_b5c4, align 4
  store i32 %v3_b5c4, i32* @r4, align 4
  %v0_b5c8 = call i32 @function_f468()
  %v3_b5cc = load i32, i32* %stack_var_-40, align 4
  %v5_b5d4 = mul i32 %v3_b5cc, 24
  %v0_b5d8 = load i32, i32* @r4, align 4
  %v1_b5dc = and i32 %v0_b5d8, 65280
  store i32 %v1_b5dc, i32* %r3.global-to-local, align 4
  %v1_b5d8 = udiv i32 %v0_b5d8, 256
  %v3_b5e0 = and i32 %v1_b5d8, 65280
  store i32 %v3_b5e0, i32* %r2.global-to-local, align 4
  %v1_b5e4 = load i32, i32* @sl, align 4
  %v2_b5e4 = add i32 %v1_b5e4, %v5_b5d4
  store i32 %v2_b5e4, i32* %ip.global-to-local, align 4
  %v1_b5f0 = add i32 %v2_b5e4, 20
  %v2_b5f0 = inttoptr i32 %v1_b5f0 to i8*
  %v3_b5f0 = load i8, i8* %v2_b5f0, align 1
  %v4_b5f0 = zext i8 %v3_b5f0 to i32
  store i32 %v4_b5f0, i32* %lr.global-to-local, align 4
  %v2_b5f8 = call i32 @llvm.bswap.i32(i32 %v0_b5d8)
  %v7_b5fc = lshr i32 %v0_b5c8, %v4_b5f0
  %v8_b5fc = add i32 %v7_b5fc, %v2_b5f8
  store i32 %v3_b310, i32* %r2.global-to-local, align 4
  %v2_b61c = call i32 @llvm.bswap.i32(i32 %v8_b5fc)
  store i32 %v2_b61c, i32* %r3.global-to-local, align 4
  %v1_b620 = load i32, i32* %r7.global-to-local, align 4
  %v9_b620 = icmp eq i32 %v3_b310, %v1_b620
  store i1 %v9_b620, i1* %cpsr_z.global-to-local, align 1
  %v1_b624 = load i32, i32* @r5, align 4
  %v2_b624 = add i32 %v1_b624, 16
  %v3_b624 = inttoptr i32 %v2_b624 to i32*
  store i32 %v2_b61c, i32* %v3_b624, align 4
  br i1 %v9_b620, label %dec_label_pc_b62c, label %dec_label_pc_b5c4.dec_label_pc_b4f0_crit_edge

dec_label_pc_b5c4.dec_label_pc_b4f0_crit_edge:    ; preds = %dec_label_pc_b5c4
  %v1_b4f4.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_b4f0

dec_label_pc_b62c:                                ; preds = %dec_label_pc_b5c4, %dec_label_pc_b4e4
  %v0_b62c = call i32 @function_f468()
  %v1_b62c = trunc i32 %v0_b62c to i8
  %v4_b63027 = udiv i32 %v0_b62c, 256
  %v1_b634 = trunc i32 %v4_b63027 to i8
  %v2_b634 = load i32, i32* @r5, align 4
  %v3_b634 = add i32 %v2_b634, 5
  %v4_b634 = inttoptr i32 %v3_b634 to i8*
  store i8 %v1_b634, i8* %v4_b634, align 1
  store i32 %v3_b314, i32* %r3.global-to-local, align 4
  %v1_b63c = load i32, i32* %r7.global-to-local, align 4
  %v9_b63c = icmp eq i32 %v3_b314, %v1_b63c
  store i1 %v9_b63c, i1* %cpsr_z.global-to-local, align 1
  %v3_b640 = load i32, i32* @r5, align 4
  %v4_b640 = add i32 %v3_b640, 4
  %v5_b640 = inttoptr i32 %v4_b640 to i8*
  store i8 %v1_b62c, i8* %v5_b640, align 1
  %v0_b644 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b644, label %dec_label_pc_b648, label %dec_label_pc_b62c.dec_label_pc_b4fc_crit_edge

dec_label_pc_b62c.dec_label_pc_b4fc_crit_edge:    ; preds = %dec_label_pc_b62c
  %v1_b500.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_b4fc

dec_label_pc_b648:                                ; preds = %dec_label_pc_b62c, %dec_label_pc_b4f0
  %v0_b648 = call i32 @function_f468()
  %v1_b648 = trunc i32 %v0_b648 to i8
  %v4_b650 = sdiv i32 %v0_b648, 256
  store i32 %v4_b650, i32* %r3.global-to-local, align 4
  %v1_b654 = load i32, i32* %r7.global-to-local, align 4
  %v9_b654 = icmp eq i32 %v3_b318, %v1_b654
  store i1 %v9_b654, i1* %cpsr_z.global-to-local, align 1
  %v3_b658 = load i32, i32* @r5, align 4
  %v4_b658 = add i32 %v3_b658, 20
  %v5_b658 = inttoptr i32 %v4_b658 to i8*
  store i8 %v1_b648, i8* %v5_b658, align 1
  %v0_b65c = load i32, i32* %r3.global-to-local, align 4
  %v1_b65c = trunc i32 %v0_b65c to i8
  %v2_b65c = load i32, i32* @r6, align 4
  %v3_b65c = add i32 %v2_b65c, 1
  %v4_b65c = inttoptr i32 %v3_b65c to i8*
  store i8 %v1_b65c, i8* %v4_b65c, align 1
  %v0_b660 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b660, label %dec_label_pc_b664, label %dec_label_pc_b508

dec_label_pc_b664:                                ; preds = %dec_label_pc_b648, %dec_label_pc_b4fc
  %v0_b664 = call i32 @function_f468()
  %v1_b664 = trunc i32 %v0_b664 to i8
  %v4_b668 = sdiv i32 %v0_b664, 256
  store i32 %v4_b668, i32* %r3.global-to-local, align 4
  %v1_b66c = trunc i32 %v4_b668 to i8
  %v2_b66c = load i32, i32* @r6, align 4
  %v3_b66c = add i32 %v2_b66c, 3
  %v4_b66c = inttoptr i32 %v3_b66c to i8*
  store i8 %v1_b66c, i8* %v4_b66c, align 1
  %v3_b670 = load i32, i32* @r6, align 4
  %v4_b670 = add i32 %v3_b670, 2
  %v5_b670 = inttoptr i32 %v4_b670 to i8*
  store i8 %v1_b664, i8* %v5_b670, align 1
  br label %dec_label_pc_b508

dec_label_pc_b678:                                ; preds = %dec_label_pc_b2d8
  %v0_b678 = load i32, i32* %fp.global-to-local, align 4
  %v1_b67c = call i32 @close(i32 %v0_b678)
  br label %dec_label_pc_b680

dec_label_pc_b680:                                ; preds = %dec_label_pc_b1c8, %dec_label_pc_b678
  %v29_b684 = phi i32 [ -1, %dec_label_pc_b1c8 ], [ %v1_b67c, %dec_label_pc_b678 ]
  store i32 %v3_b1c8, i32* %r4.global-to-local, align 4
  store i32 %v6_b1c8, i32* %r5.global-to-local, align 4
  store i32 %v9_b1c8, i32* %r6.global-to-local, align 4
  store i32 %v12_b1c8, i32* %r7.global-to-local, align 4
  ret i32 %v29_b684

; uselistorder directives
  uselistorder i32 %v4_b668, { 1, 0 }
  uselistorder i32 %v2_b61c, { 1, 0 }
  uselistorder i32 %v0_b5d8, { 1, 0, 2 }
  uselistorder i1 %v2_b5b8, { 1, 0 }
  uselistorder i32 %v1_b5ac, { 0, 2, 3, 1 }
  uselistorder i32 %v1_b5a8, { 2, 0, 3, 1 }
  uselistorder i32 %v3_b570, { 1, 0 }
  uselistorder i32 %v4_b51c, { 1, 0 }
  uselistorder i1 %v3_b4e8, { 1, 0 }
  uselistorder i32 %v1_b490, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b434, { 1, 0 }
  uselistorder i32 %v1_b3bc, { 1, 0 }
  uselistorder i32 %v1_b33c, { 1, 0 }
  uselistorder i32 %v1_b338, { 1, 0 }
  uselistorder i32 %v0_b308, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_b300, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v1_b268, { 1, 0 }
  uselistorder i8 %v5_b258, { 1, 0 }
  uselistorder i32 %v5_b23c, { 1, 0 }
  uselistorder i32 %v6_b200, { 1, 0 }
  uselistorder i32 %v1_b1cc, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 1, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 0, 3, 2, 4, 1, 5, 6, 7, 8 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 0, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder label %dec_label_pc_b680, { 1, 0 }
  uselistorder label %dec_label_pc_b508, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b4a8, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b68c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b68c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_b68c = load i32, i32* @r4, align 4
  %v6_b68c = load i32, i32* @r5, align 4
  %v9_b68c = load i32, i32* @r6, align 4
  %v12_b68c = load i32, i32* @r7, align 4
  %v15_b68c = load i32, i32* @r8, align 4
  %v18_b68c = load i32, i32* @sb, align 4
  %v21_b68c = load i32, i32* @sl, align 4
  %v24_b68c = load i32, i32* @fp, align 4
  %v1_b698 = urem i32 %arg1, 256
  store i32 %v1_b698, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b6a4 = urem i32 %arg3, 256
  store i32 %v1_b6a4, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_b6b0 = call i32* @calloc(i32 %v1_b698, i32 4)
  %v4_b6b0 = ptrtoint i32* %v2_b6b0 to i32
  %v0_b6b4 = load i32, i32* @r5, align 4
  store i32 %v0_b6b4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b6c0 = load i32, i32* @r4, align 4
  store i32 %v0_b6c0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_b6c8 = inttoptr i32 %v0_b6b4 to i32*
  %v6_b6c8 = call i32 @function_92dc(i32 %v0_b6c0, i32* %v5_b6c8, i32 2, i32 0)
  %v1_b6d4 = urem i32 %v6_b6c8, 256
  store i32 %v1_b6d4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b6e0 = load i32, i32* @r4, align 4
  store i32 %v0_b6e0, i32* %r0.global-to-local, align 4
  %v0_b6e4 = load i32, i32* @r5, align 4
  store i32 %v0_b6e4, i32* %r1.global-to-local, align 4
  %v5_b6e8 = trunc i32 %v6_b6c8 to i8
  %v6_b6ec = inttoptr i32 %v0_b6e4 to i32*
  %v7_b6ec = call i32 @function_92dc(i32 %v0_b6e0, i32* %v6_b6ec, i32 3, i32 65535)
  %v0_b6f0 = load i32, i32* @r5, align 4
  store i32 %v0_b6f0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_b6fc = load i32, i32* @r4, align 4
  store i32 %v0_b6fc, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_b704 = inttoptr i32 %v0_b6f0 to i32*
  %v6_b704 = call i32 @function_92dc(i32 %v0_b6fc, i32* %v5_b704, i32 4, i32 64)
  %v1_b70c = urem i32 %v6_b704, 256
  store i32 %v1_b70c, i32* %ip.global-to-local, align 4
  %v0_b710 = load i32, i32* @r5, align 4
  store i32 %v0_b710, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b71c = load i32, i32* @r4, align 4
  store i32 %v0_b71c, i32* %r0.global-to-local, align 4
  %v6_b724 = inttoptr i32 %v0_b710 to i32*
  %v7_b724 = call i32 @function_92dc(i32 %v0_b71c, i32* %v6_b724, i32 5, i32 0)
  %v1_b730 = urem i32 %v7_b724, 256
  store i32 %v1_b730, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b73c = load i32, i32* @r4, align 4
  store i32 %v0_b73c, i32* %r0.global-to-local, align 4
  %v0_b740 = load i32, i32* @r5, align 4
  store i32 %v0_b740, i32* %r1.global-to-local, align 4
  %v5_b748 = inttoptr i32 %v0_b740 to i32*
  %v6_b748 = call i32 @function_92dc(i32 %v0_b73c, i32* %v5_b748, i32 6, i32 65535)
  %v0_b74c = load i32, i32* @r5, align 4
  store i32 %v0_b74c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  store i32 %v6_b748, i32* %fp.global-to-local, align 4
  %v0_b75c = load i32, i32* @r4, align 4
  store i32 %v0_b75c, i32* %r0.global-to-local, align 4
  %v4_b760 = inttoptr i32 %v0_b74c to i32*
  %v5_b760 = call i32 @function_92dc(i32 %v0_b75c, i32* %v4_b760, i32 7, i32 53)
  %v0_b768 = load i32, i32* @r5, align 4
  store i32 %v0_b768, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v5_b760, i32* %sb.global-to-local, align 4
  %v0_b778 = load i32, i32* @r4, align 4
  store i32 %v0_b778, i32* %r0.global-to-local, align 4
  %v4_b77c = inttoptr i32 %v0_b768 to i32*
  %v5_b77c = call i32 @function_92dc(i32 %v0_b778, i32* %v4_b77c, i32 9, i32 65535)
  %v0_b780 = load i32, i32* @r5, align 4
  store i32 %v0_b780, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 %v5_b77c, i32* @sl, align 4
  %v0_b790 = load i32, i32* @r4, align 4
  store i32 %v0_b790, i32* %r0.global-to-local, align 4
  %v4_b794 = inttoptr i32 %v0_b780 to i32*
  %v5_b794 = call i32 @function_92dc(i32 %v0_b790, i32* %v4_b794, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b7a0 = load i32, i32* @r5, align 4
  store i32 %v0_b7a0, i32* %r1.global-to-local, align 4
  store i32 %v5_b794, i32* %r8.global-to-local, align 4
  %v0_b7a8 = load i32, i32* @r4, align 4
  store i32 %v0_b7a8, i32* %r0.global-to-local, align 4
  %v4_b7ac = inttoptr i32 %v0_b7a0 to i32*
  %v5_b7ac = call i32 @function_8ec8(i32 %v0_b7a8, i32* %v4_b7ac, i32 8, i32 0)
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_b7b8 = call i32 @function_11138(i32 21)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_b7c4 = call i32 @function_11054(i32 21, i32* null)
  %v4_b7c4 = inttoptr i32 %v3_b7c4 to i8*
  store i32 %v3_b7c4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_b7cc = call i32 (i8*, i32, ...) @open(i8* %v4_b7c4, i32 0)
  store i32 %v4_b7cc, i32* @r4, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_b7d8 = call i32 @function_11080(i32 21)
  store i32 %v1_b7d8, i32* %r0.global-to-local, align 4
  %v0_b7dc = load i32, i32* @r4, align 4
  %v1_b7dc = icmp slt i32 %v0_b7dc, 0
  %v2_b7dc = icmp eq i32 %v0_b7dc, 0
  store i1 %v2_b7dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_b7dc, label %dec_label_pc_bda8, label %dec_label_pc_b7e4

dec_label_pc_b7e4:                                ; preds = %dec_label_pc_b68c
  %v2_b7e8 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_b7e8, i32* @r6, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_b7e8, i32* %r1.global-to-local, align 4
  store i32 %v0_b7dc, i32* %r0.global-to-local, align 4
  %v4_b7f8 = call i32 @read(i32 %v0_b7dc, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_b7f8, i32* @r5, align 4
  %v0_b800 = load i32, i32* @r4, align 4
  store i32 %v0_b800, i32* %r0.global-to-local, align 4
  %v1_b804 = call i32 @close(i32 %v0_b800)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_b80c = call i32 @function_11138(i32 22)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_b818 = call i32 @function_11054(i32 22, i32* null)
  %v0_b81c = load i32, i32* @r5, align 4
  store i32 %v0_b81c, i32* @r1, align 4
  store i32 %v3_b818, i32* %r2.global-to-local, align 4
  store i32 %v2_b7e8, i32* %r0.global-to-local, align 4
  %v3_b828 = bitcast i32* %stack_var_-2120 to i8*
  %v4_b828 = call i32 @function_11a58(i8* %v3_b828, i32 %v0_b81c, i32 %v3_b818)
  store i32 %v4_b828, i32* @r4, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_b834 = call i32 @function_11080(i32 22)
  store i32 %v1_b834, i32* %r0.global-to-local, align 4
  %v0_b838 = load i32, i32* @r4, align 4
  %v2_b838 = icmp eq i32 %v0_b838, -1
  store i1 %v2_b838, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b838, label %dec_label_pc_bda8, label %dec_label_pc_b840

dec_label_pc_b840:                                ; preds = %dec_label_pc_b7e4
  %v0_b840 = load i32, i32* @r5, align 4
  %v9_b840 = icmp eq i32 %v0_b840, %v0_b838
  store i1 %v9_b840, i1* %cpsr_z.global-to-local, align 1
  %v7_b844 = icmp sgt i32 %v0_b840, %v0_b838
  br i1 %v7_b844, label %dec_label_pc_b848, label %dec_label_pc_bda8

dec_label_pc_b848:                                ; preds = %dec_label_pc_b840
  store i32 %v0_b840, i32* %r3.global-to-local, align 4
  store i32 %v0_b838, i32* %r2.global-to-local, align 4
  %v0_b858 = load i32, i32* @r6, align 4
  %v2_b858 = add i32 %v0_b858, %v0_b838
  store i32 %v2_b858, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_b860 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_b860, i32* %r7.global-to-local, align 4
  %v1_b890 = add i32 %v0_b840, -1
  br label %dec_label_pc_b888

dec_label_pc_b86c:                                ; preds = %dec_label_pc_b8b0, %bb139
  %v9_b86c = icmp eq i32 %v0_b878, %v1_b890
  store i1 %v9_b86c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b86c, label %dec_label_pc_b8bc, label %dec_label_pc_b874

dec_label_pc_b874:                                ; preds = %dec_label_pc_b8a0, %dec_label_pc_b86c, %bb
  %v0_b8ac43 = phi i32 [ %v0_b8ac, %dec_label_pc_b8a0 ], [ %v0_b8ac44, %dec_label_pc_b86c ], [ %v0_b8ac, %bb ]
  %v0_b88c39 = phi i32 [ 0, %dec_label_pc_b8a0 ], [ %v0_b88c40, %dec_label_pc_b86c ], [ 0, %bb ]
  store i32 %v0_b840, i32* %r0.global-to-local, align 4
  %v1_b878 = add i32 %v0_b878, 1
  store i32 %v1_b878, i32* %r2.global-to-local, align 4
  %v9_b87c = icmp eq i32 %v0_b840, %v1_b878
  store i1 %v9_b87c, i1* %cpsr_z.global-to-local, align 1
  %v1_b880 = add i32 %v0_b880, 1
  store i32 %v1_b880, i32* %r7.global-to-local, align 4
  br i1 %v9_b87c, label %dec_label_pc_bda8, label %dec_label_pc_b888

dec_label_pc_b888:                                ; preds = %dec_label_pc_b874, %dec_label_pc_b848
  %v0_b880 = phi i32 [ %v1_b880, %dec_label_pc_b874 ], [ %v2_b860, %dec_label_pc_b848 ]
  %v0_b878 = phi i32 [ %v1_b878, %dec_label_pc_b874 ], [ %v0_b838, %dec_label_pc_b848 ]
  %v0_b8ac = phi i32 [ %v0_b8ac43, %dec_label_pc_b874 ], [ 0, %dec_label_pc_b848 ]
  %v0_b88c = phi i32 [ %v0_b88c39, %dec_label_pc_b874 ], [ 0, %dec_label_pc_b848 ]
  %v0_b894 = phi i32 [ %v1_b894, %dec_label_pc_b874 ], [ %v2_b858, %dec_label_pc_b848 ]
  %v1_b888 = inttoptr i32 %v0_b894 to i8*
  %v2_b888 = load i8, i8* %v1_b888, align 1
  %v3_b888 = zext i8 %v2_b888 to i32
  store i32 %v3_b888, i32* %r3.global-to-local, align 4
  %v2_b88c = icmp eq i32 %v0_b88c, 0
  store i1 %v2_b88c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b890, i32* %ip.global-to-local, align 4
  %v1_b894 = add i32 %v0_b894, 1
  store i32 %v1_b894, i32* %r1.global-to-local, align 4
  %v1_b898 = add nsw i32 %v3_b888, -48
  store i32 %v1_b898, i32* %r0.global-to-local, align 4
  br i1 %v2_b88c, label %dec_label_pc_b8a0, label %dec_label_pc_b8b0

dec_label_pc_b8a0:                                ; preds = %dec_label_pc_b888
  %v7_b8a0 = icmp eq i8 %v2_b888, 9
  store i1 %v7_b8a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b8a0, label %dec_label_pc_b874, label %bb

bb:                                               ; preds = %dec_label_pc_b8a0
  %v8_b8a4 = icmp eq i8 %v2_b888, 32
  store i1 %v8_b8a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_b8a4, label %dec_label_pc_b874, label %dec_label_pc_b8ac

dec_label_pc_b8ac:                                ; preds = %bb
  %v1_b8ac = add i32 %v0_b8ac, 1
  store i32 %v1_b8ac, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_b8b0

dec_label_pc_b8b0:                                ; preds = %dec_label_pc_b888, %dec_label_pc_b8ac
  %v0_b8ac44 = phi i32 [ %v0_b8ac, %dec_label_pc_b888 ], [ %v1_b8ac, %dec_label_pc_b8ac ]
  %v0_b88c40 = phi i32 [ %v0_b88c, %dec_label_pc_b888 ], [ %v1_b8ac, %dec_label_pc_b8ac ]
  %v7_b8b0 = icmp eq i8 %v2_b888, 46
  store i1 %v7_b8b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b8b0, label %dec_label_pc_b86c, label %bb139

bb139:                                            ; preds = %dec_label_pc_b8b0
  %v8_b8b4 = icmp eq i32 %v1_b898, 9
  store i1 %v8_b8b4, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_b898, 10
  br i1 %tmp, label %dec_label_pc_b86c, label %dec_label_pc_b8bc

dec_label_pc_b8bc:                                ; preds = %dec_label_pc_b86c, %bb139
  %v0_b878.lcssa = phi i32 [ %v1_b890, %dec_label_pc_b86c ], [ %v0_b878, %bb139 ]
  %v2_b8c0 = sub i32 %v0_b878.lcssa, %v0_b838
  store i32 %v2_b8c0, i32* %r2.global-to-local, align 4
  store i32 %v2_b858, i32* %r1.global-to-local, align 4
  store i32 %v2_b860, i32* %r0.global-to-local, align 4
  %v3_b8cc = call i32 @function_11780(i32 %v2_b860, i32 %v2_b858, i32 %v2_b8c0)
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp140 = bitcast i32* %stack_var_-72 to i8*
  store i32 %v2_b860, i32* %r0.global-to-local, align 4
  %v2_b8dc = load i32, i32* %r7.global-to-local, align 4
  %v3_b8dc = inttoptr i32 %v2_b8dc to i8*
  store i8 0, i8* %v3_b8dc, align 1
  %v3_b8e0 = call i32 @inet_addr(i8* %tmp140)
  store i32 %v3_b8e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b8e8

dec_label_pc_b8e821:                              ; preds = %dec_label_pc_bda8
  unreachable

dec_label_pc_b8e8:                                ; preds = %dec_label_pc_be20, %dec_label_pc_be10, %dec_label_pc_be04, %dec_label_pc_bdf0, %dec_label_pc_b8bc
  %v29_bdec75 = phi i32 [ %v1_bdac, %dec_label_pc_be20 ], [ %v1_bdac, %dec_label_pc_be10 ], [ %v1_bdac, %dec_label_pc_be04 ], [ %v1_bdac, %dec_label_pc_bdf0 ], [ %v3_b8e0, %dec_label_pc_b8bc ]
  %stack_var_-2176.0 = phi i32 [ 33686020, %dec_label_pc_be20 ], [ 104859200, %dec_label_pc_be10 ], [ 707416650, %dec_label_pc_be04 ], [ 134744072, %dec_label_pc_bdf0 ], [ %v3_b8e0, %dec_label_pc_b8bc ]
  store i32 %v5_b7ac, i32* %ip.global-to-local, align 4
  %v2_b8ec = icmp eq i32 %v5_b7ac, 0
  store i1 %v2_b8ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b8ec, label %dec_label_pc_bde4, label %dec_label_pc_b8f4

dec_label_pc_b8f4:                                ; preds = %dec_label_pc_b8e8
  store i32 %v5_b7ac, i32* %r0.global-to-local, align 4
  %v1_b8f8 = inttoptr i32 %v5_b7ac to i8*
  %v2_b8f8 = call i32 @function_11704(i8* %v1_b8f8)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b90c = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_b90c, i32* %r0.global-to-local, align 4
  %v2_b910 = icmp eq i32 %v3_b90c, -1
  store i1 %v2_b910, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b910, label %dec_label_pc_bde4, label %dec_label_pc_b91c

dec_label_pc_b91c:                                ; preds = %dec_label_pc_b8f4
  store i32 1, i32* %r7.global-to-local, align 4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b928 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b928, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_b93c = call i32 @setsockopt(i32 %v3_b90c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_b93c, i32* %r0.global-to-local, align 4
  %v2_b940 = icmp eq i32 %v7_b93c, -1
  store i1 %v2_b940, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b940, label %dec_label_pc_bddc, label %dec_label_pc_b948

dec_label_pc_b948:                                ; preds = %dec_label_pc_b91c
  store i32 %v1_b698, i32* %r0.global-to-local, align 4
  %v3_b950 = mul i32 %v7_b6ec, 65536
  store i32 %v3_b950, i32* %lr.global-to-local, align 4
  %v0_b954 = load i32, i32* @sl, align 4
  %v3_b954 = mul i32 %v0_b954, 65536
  store i32 %v3_b954, i32* %sl.global-to-local, align 4
  %v0_b958 = load i32, i32* %r8.global-to-local, align 4
  %v0_b95c = load i32, i32* %fp.global-to-local, align 4
  %v3_b95c = mul i32 %v0_b95c, 65536
  store i32 %v3_b95c, i32* %r5.global-to-local, align 4
  %v0_b960 = load i32, i32* %sb.global-to-local, align 4
  %v3_b960 = mul i32 %v0_b960, 65536
  store i32 %v3_b960, i32* %sb.global-to-local, align 4
  %v5_b964 = trunc i32 %v0_b958 to i8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_b96c = urem i32 %v7_b6ec, 65536
  store i32 %v3_b96c, i32* %r2.global-to-local, align 4
  %v3_b970 = urem i32 %v0_b95c, 65536
  store i32 %v3_b970, i32* %r3.global-to-local, align 4
  %v3_b974 = urem i32 %v0_b960, 65536
  store i32 %v3_b974, i32* %r4.global-to-local, align 4
  %v3_b978 = urem i32 %v0_b954, 65536
  store i32 %v3_b978, i32* %r8.global-to-local, align 4
  %v2_b97c = icmp eq i32 %v1_b698, 0
  store i1 %v2_b97c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_b97c, label %dec_label_pc_bdcc, label %dec_label_pc_b9a0

dec_label_pc_b9a0:                                ; preds = %dec_label_pc_b948
  %v4_b9a4 = sext i8 %v5_b964 to i32
  %v2_b9a8 = add i32 %v4_b9a4, %v2_b8f8
  store i32 %v2_b9a8, i32* @fp, align 4
  %v3_b9ac = mul i32 %v2_b9a8, 65536
  %v1_b9b0 = add i32 %v3_b9ac, 1769472
  store i32 %v1_b9b0, i32* %r6.global-to-local, align 4
  %v1_b9b4 = add i32 %v3_b9ac, 3080192
  %v1_b9c8 = urem i32 %v0_b954, 256
  %v3_b9d8 = udiv i32 %v1_b9b0, 256
  %v1_b9dc = urem i32 %v7_b6ec, 256
  %v1_b9e0 = and i32 %v3_b9d8, 65280
  %v1_b9e4 = urem i32 %v0_b960, 256
  %v3_b9e8 = mul nuw nsw i32 %v1_b9c8, 256
  %v1_b9f0 = urem i32 %v0_b95c, 256
  %v3_b9f4 = mul nuw nsw i32 %v1_b9e4, 256
  %tmp141 = udiv i32 %v0_b954, 256
  %v4_b9f8 = urem i32 %tmp141, 256
  %v5_b9f8 = or i32 %v4_b9f8, %v3_b9e8
  store i32 %v5_b9f8, i32* %r8.global-to-local, align 4
  %v4_b9fc = udiv i32 %v1_b9b0, 16777216
  %v5_b9fc = or i32 %v1_b9e0, %v4_b9fc
  store i32 %v5_b9fc, i32* %sl.global-to-local, align 4
  %tmp142 = udiv i32 %v0_b95c, 256
  %v3_ba08 = urem i32 %tmp142, 256
  %v4_ba0c = sdiv i32 %v1_b9b4, 16777216
  %tmp143 = udiv i32 %v7_b6ec, 256
  %v4_ba14 = mul nuw nsw i32 %v1_b9f0, 256
  %v5_ba14 = or i32 %v4_ba14, %v3_ba08
  store i32 %v5_ba14, i32* %r5.global-to-local, align 4
  %tmp144 = udiv i32 %v0_b960, 256
  %v4_ba18 = urem i32 %tmp144, 256
  %v5_ba18 = or i32 %v4_ba18, %v3_b9f4
  store i32 %v5_ba18, i32* %sb.global-to-local, align 4
  store i32 %v1_b9dc, i32* %r0.global-to-local, align 4
  %v1_ba24 = add i32 %v2_b8f8, 1
  store i32 %v1_ba24, i32* %r7.global-to-local, align 4
  %v3_ba28 = ashr i32 %v1_b9b4, 31
  store i32 %v3_ba28, i32* %lr.global-to-local, align 4
  store i32 %v1_b9f0, i32* %r1.global-to-local, align 4
  store i32 %v1_b9e4, i32* %r2.global-to-local, align 4
  %v3_ba3476 = udiv i32 %v1_b9e0, 256
  store i32 %v3_ba3476, i32* %r3.global-to-local, align 4
  store i32 %v1_b9c8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v4_ba98 = sext i8 %v5_b6e8 to i32
  %sext14 = mul i32 %v6_b704, 16777216
  %v4_bab0 = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %tmp143, 16777216
  %v4_bac4 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v7_b6ec, 16777216
  %v4_bac8 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_b9b0, 256
  %v4_baf8 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_b960, 16777216
  %v4_bafc = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v0_b95c, 16777216
  %v4_bb20 = sdiv i32 %sext19, 16777216
  %sext20 = mul i32 %v0_b954, 16777216
  %v4_bb2c = sdiv i32 %sext20, 16777216
  %v1_baa8 = trunc i32 %v4_ba0c to i8
  %extract.t = trunc i32 %v3_ba28 to i8
  br label %dec_label_pc_ba58

dec_label_pc_ba58:                                ; preds = %dec_label_pc_bbc0, %dec_label_pc_b9a0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_ba60 = call i32* @calloc(i32 600, i32 1)
  %v4_ba60 = ptrtoint i32* %v2_ba60 to i32
  store i32 %v4_ba60, i32* %r0.global-to-local, align 4
  store i32 %v4_b6b0, i32* %lr.global-to-local, align 4
  %v3_ba68 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ba68, i32* %r3.global-to-local, align 4
  %v2_ba6c = load i32, i32* %r4.global-to-local, align 4
  %v5_ba6c = mul i32 %v2_ba6c, 4
  %v6_ba6c = add i32 %v5_ba6c, %v4_b6b0
  %v7_ba6c = inttoptr i32 %v6_ba6c to i32*
  store i32 %v4_ba60, i32* %v7_ba6c, align 4
  %v0_ba70 = load i32, i32* %lr.global-to-local, align 4
  %v1_ba70 = load i32, i32* %r3.global-to-local, align 4
  %v4_ba70 = mul i32 %v1_ba70, 4
  %v5_ba70 = add i32 %v4_ba70, %v0_ba70
  %v6_ba70 = inttoptr i32 %v5_ba70 to i32*
  %v7_ba70 = load i32, i32* %v6_ba70, align 4
  store i32 %v7_ba70, i32* %r1.global-to-local, align 4
  %v1_ba74 = inttoptr i32 %v7_ba70 to i8*
  %v2_ba74 = load i8, i8* %v1_ba74, align 1
  %tmp156 = urem i8 %v2_ba74, 16
  %v1_ba78 = zext i8 %tmp156 to i32
  %v1_ba7c = or i32 %v1_ba78, 64
  store i32 %v1_ba7c, i32* %r2.global-to-local, align 4
  %v1_ba80 = trunc i32 %v1_ba7c to i8
  store i8 %v1_ba80, i8* %v1_ba74, align 1
  %v0_ba84 = load i32, i32* %r1.global-to-local, align 4
  %v1_ba84 = inttoptr i32 %v0_ba84 to i8*
  %v2_ba84 = load i8, i8* %v1_ba84, align 1
  %v1_ba88 = and i8 %v2_ba84, -16
  %v1_ba8c = or i8 %v1_ba88, 5
  store i32 %v1_b730, i32* %r0.global-to-local, align 4
  store i8 %v1_ba8c, i8* %v1_ba84, align 1
  store i32 %v4_ba98, i32* %r2.global-to-local, align 4
  %v2_ba9c = load i32, i32* %r1.global-to-local, align 4
  %v3_ba9c = add i32 %v2_ba9c, 1
  %v4_ba9c = inttoptr i32 %v3_ba9c to i8*
  store i8 %v5_b6e8, i8* %v4_ba9c, align 1
  store i32 %v4_ba0c, i32* %r3.global-to-local, align 4
  %v0_baa4 = load i32, i32* %r0.global-to-local, align 4
  %v2_baa4 = icmp eq i32 %v0_baa4, 0
  store i1 %v2_baa4, i1* %cpsr_z.global-to-local, align 1
  %v2_baa8 = load i32, i32* %r1.global-to-local, align 4
  %v3_baa8 = add i32 %v2_baa8, 2
  %v4_baa8 = inttoptr i32 %v3_baa8 to i8*
  store i8 %v1_baa8, i8* %v4_baa8, align 1
  store i32 %v3_ba28, i32* %r4.global-to-local, align 4
  store i32 %v4_bab0, i32* %r0.global-to-local, align 4
  %v0_bab4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bab4, label %.thread22, label %bb145

bb145:                                            ; preds = %dec_label_pc_ba58
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bab8 = load i32, i32* %r1.global-to-local, align 4
  %v4_bab8 = add i32 %v3_bab8, 6
  %v5_bab8 = inttoptr i32 %v4_bab8 to i8*
  store i8 64, i8* %v5_bab8, align 1
  %v0_bac0.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t77 = trunc i32 %v0_bac0.pre to i8
  br label %.thread22

.thread22:                                        ; preds = %dec_label_pc_ba58, %bb145
  %v0_bac0.off0 = phi i8 [ %extract.t, %dec_label_pc_ba58 ], [ %extract.t77, %bb145 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_bac0 = load i32, i32* %r1.global-to-local, align 4
  %v3_bac0 = add i32 %v2_bac0, 3
  %v4_bac0 = inttoptr i32 %v3_bac0 to i8*
  store i8 %v0_bac0.off0, i8* %v4_bac0, align 1
  store i32 %v4_bac4, i32* %ip.global-to-local, align 4
  store i32 %v4_bac8, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a40c.102 to i32), i32* %r4.global-to-local, align 4
  %v0_bad0 = load i32, i32* %r0.global-to-local, align 4
  %v1_bad0 = trunc i32 %v0_bad0 to i8
  %v2_bad0 = load i32, i32* %r1.global-to-local, align 4
  %v3_bad0 = add i32 %v2_bad0, 8
  %v4_bad0 = inttoptr i32 %v3_bad0 to i8*
  store i8 %v1_bad0, i8* %v4_bad0, align 1
  %v0_bad4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bad4 = trunc i32 %v0_bad4 to i8
  %v2_bad4 = load i32, i32* %r1.global-to-local, align 4
  %v3_bad4 = add i32 %v2_bad4, 9
  %v4_bad4 = inttoptr i32 %v3_bad4 to i8*
  store i8 %v1_bad4, i8* %v4_bad4, align 1
  %v0_bad8 = load i32, i32* %lr.global-to-local, align 4
  %v1_bad8 = trunc i32 %v0_bad8 to i8
  %v2_bad8 = load i32, i32* %r1.global-to-local, align 4
  %v3_bad8 = add i32 %v2_bad8, 5
  %v4_bad8 = inttoptr i32 %v3_bad8 to i8*
  store i8 %v1_bad8, i8* %v4_bad8, align 1
  %v0_badc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_badc, label %.thread23, label %bb146

.thread23:                                        ; preds = %.thread22
  %v2_bae024 = load i32, i32* @global_var_1a40c.102, align 4
  store i32 %v2_bae024, i32* %r3.global-to-local, align 4
  store i32 %v4_b9a4, i32* %lr.global-to-local, align 4
  br label %bb147

bb146:                                            ; preds = %.thread22
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_bae0 = load i32, i32* @global_var_1a40c.102, align 4
  store i32 %v2_bae0, i32* %r3.global-to-local, align 4
  store i32 %v4_b9a4, i32* %lr.global-to-local, align 4
  %v3_bae8 = load i32, i32* %r1.global-to-local, align 4
  %v4_bae8 = add i32 %v3_bae8, 7
  %v5_bae8 = inttoptr i32 %v4_bae8 to i8*
  store i8 0, i8* %v5_bae8, align 1
  %v0_baf0.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_baf4.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb147

bb147:                                            ; preds = %.thread23, %bb146
  %v0_baf4 = phi i32 [ %v2_bae024, %.thread23 ], [ %v0_baf4.pre, %bb146 ]
  %v0_baf0 = phi i32 [ %v4_b9a4, %.thread23 ], [ %v0_baf0.pre, %bb146 ]
  %v0_baec = load i32, i32* %r1.global-to-local, align 4
  %v1_baec = add i32 %v0_baf0, 41
  %v2_baf0 = add i32 %v1_baec, %v0_baec
  store i32 %v2_baf0, i32* %r4.global-to-local, align 4
  %v2_baf4 = add i32 %v0_baec, 12
  %v3_baf4 = inttoptr i32 %v2_baf4 to i32*
  store i32 %v0_baf4, i32* %v3_baf4, align 4
  store i32 %v4_baf8, i32* %r2.global-to-local, align 4
  store i32 %v4_bafc, i32* %r3.global-to-local, align 4
  %v0_bb00 = load i32, i32* %r1.global-to-local, align 4
  %v1_bb00 = add i32 %v0_bb00, 20
  store i32 %v1_bb00, i32* %r0.global-to-local, align 4
  %v0_bb04 = load i32, i32* %ip.global-to-local, align 4
  %v1_bb04 = trunc i32 %v0_bb04 to i8
  %v3_bb04 = add i32 %v0_bb00, 4
  %v4_bb04 = inttoptr i32 %v3_bb04 to i8*
  store i8 %v1_bb04, i8* %v4_bb04, align 1
  %v0_bb08 = load i32, i32* %r2.global-to-local, align 4
  %v1_bb08 = trunc i32 %v0_bb08 to i8
  %v2_bb08 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb08 = add i32 %v2_bb08, 5
  %v4_bb08 = inttoptr i32 %v3_bb08 to i8*
  store i8 %v1_bb08, i8* %v4_bb08, align 1
  %v0_bb0c = load i32, i32* %r3.global-to-local, align 4
  %v1_bb0c = trunc i32 %v0_bb0c to i8
  %v2_bb0c = load i32, i32* %r0.global-to-local, align 4
  %v3_bb0c = add i32 %v2_bb0c, 3
  %v4_bb0c = inttoptr i32 %v3_bb0c to i8*
  store i8 %v1_bb0c, i8* %v4_bb0c, align 1
  %v0_bb10 = load i32, i32* %sb.global-to-local, align 4
  %v1_bb10 = trunc i32 %v0_bb10 to i8
  %v2_bb10 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb10 = add i32 %v2_bb10, 2
  %v4_bb10 = inttoptr i32 %v3_bb10 to i8*
  store i8 %v1_bb10, i8* %v4_bb10, align 1
  %v0_bb14 = load i32, i32* %sl.global-to-local, align 4
  %v1_bb14 = trunc i32 %v0_bb14 to i8
  %v2_bb14 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb14 = add i32 %v2_bb14, 4
  %v4_bb14 = inttoptr i32 %v3_bb14 to i8*
  store i8 %v1_bb14, i8* %v4_bb14, align 1
  %v0_bb18 = load i32, i32* %r5.global-to-local, align 4
  %v1_bb18 = trunc i32 %v0_bb18 to i8
  %v2_bb18 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb18 = add i32 %v2_bb18, 20
  %v4_bb18 = inttoptr i32 %v3_bb18 to i8*
  store i8 %v1_bb18, i8* %v4_bb18, align 1
  store i32 %v4_bb20, i32* %r2.global-to-local, align 4
  %v1_bb24 = load i32, i32* %r1.global-to-local, align 4
  %v2_bb24 = add i32 %v1_bb24, 16
  %v3_bb24 = inttoptr i32 %v2_bb24 to i32*
  store i32 %stack_var_-2176.0, i32* %v3_bb24, align 4
  %v0_bb28 = load i32, i32* %r2.global-to-local, align 4
  %v1_bb28 = trunc i32 %v0_bb28 to i8
  %v2_bb28 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb28 = add i32 %v2_bb28, 1
  %v4_bb28 = inttoptr i32 %v3_bb28 to i8*
  store i8 %v1_bb28, i8* %v4_bb28, align 1
  store i32 %v4_bb2c, i32* %lr.global-to-local, align 4
  store i32 %v4_b9a4, i32* %r0.global-to-local, align 4
  %v0_bb34 = load i32, i32* %r1.global-to-local, align 4
  %v1_bb34 = add i32 %v0_bb34, 28
  store i32 %v1_bb34, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bb40 = load i32, i32* %r8.global-to-local, align 4
  %v1_bb40 = trunc i32 %v0_bb40 to i8
  %v4_bb40 = inttoptr i32 %v1_bb34 to i8*
  store i8 %v1_bb40, i8* %v4_bb40, align 1
  %v0_bb44 = load i32, i32* %r3.global-to-local, align 4
  %v1_bb44 = trunc i32 %v0_bb44 to i8
  %v2_bb44 = load i32, i32* %ip.global-to-local, align 4
  %v3_bb44 = add i32 %v2_bb44, 5
  %v4_bb44 = inttoptr i32 %v3_bb44 to i8*
  store i8 %v1_bb44, i8* %v4_bb44, align 1
  %v0_bb48 = load i32, i32* %lr.global-to-local, align 4
  %v1_bb48 = trunc i32 %v0_bb48 to i8
  %v2_bb48 = load i32, i32* %ip.global-to-local, align 4
  %v3_bb48 = add i32 %v2_bb48, 1
  %v4_bb48 = inttoptr i32 %v3_bb48 to i8*
  store i8 %v1_bb48, i8* %v4_bb48, align 1
  %v0_bb4c = load i32, i32* %r3.global-to-local, align 4
  %v1_bb4c = trunc i32 %v0_bb4c to i8
  %v2_bb4c = load i32, i32* %ip.global-to-local, align 4
  %v3_bb4c = add i32 %v2_bb4c, 2
  %v4_bb4c = inttoptr i32 %v3_bb4c to i8*
  store i8 %v1_bb4c, i8* %v4_bb4c, align 1
  %v0_bb50 = load i32, i32* %r6.global-to-local, align 4
  %v1_bb50 = trunc i32 %v0_bb50 to i8
  %v2_bb50 = load i32, i32* %ip.global-to-local, align 4
  %v3_bb50 = add i32 %v2_bb50, 3
  %v4_bb50 = inttoptr i32 %v3_bb50 to i8*
  store i8 %v1_bb50, i8* %v4_bb50, align 1
  %v0_bb54 = load i32, i32* %r6.global-to-local, align 4
  %v1_bb54 = trunc i32 %v0_bb54 to i8
  %v2_bb54 = load i32, i32* %ip.global-to-local, align 4
  %v3_bb54 = add i32 %v2_bb54, 4
  %v4_bb54 = inttoptr i32 %v3_bb54 to i8*
  store i8 %v1_bb54, i8* %v4_bb54, align 1
  %v0_bb58 = load i32, i32* %r0.global-to-local, align 4
  %v1_bb58 = trunc i32 %v0_bb58 to i8
  %v2_bb58 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb58 = add i32 %v2_bb58, 40
  %v4_bb58 = inttoptr i32 %v3_bb58 to i8*
  store i8 %v1_bb58, i8* %v4_bb58, align 1
  store i32 %v5_b7ac, i32* %r1.global-to-local, align 4
  %v0_bb60 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_bb60, i32* %r2.global-to-local, align 4
  %v0_bb64 = load i32, i32* %r4.global-to-local, align 4
  %v1_bb64 = add i32 %v0_bb64, 1
  store i32 %v1_bb64, i32* %r0.global-to-local, align 4
  %v3_bb68 = call i32 @function_11780(i32 %v1_bb64, i32 %v5_b7ac, i32 %v0_bb60)
  store i32 %v3_bb68, i32* %r0.global-to-local, align 4
  store i32 %v2_b8f8, i32* %r1.global-to-local, align 4
  %v1_bb70 = load i32, i32* %r6.global-to-local, align 4
  %v9_bb70 = icmp eq i32 %v2_b8f8, %v1_bb70
  store i1 %v9_bb70, i1* %cpsr_z.global-to-local, align 1
  %v7_bb74 = icmp sgt i32 %v2_b8f8, %v1_bb70
  store i32 %v1_bb70, i32* %lr.global-to-local, align 4
  %v0_bb84 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_bb84, i32* %r2.global-to-local, align 4
  %extract.t79 = trunc i32 %v1_bb70 to i8
  br i1 %v7_bb74, label %dec_label_pc_bb80, label %dec_label_pc_bbc0

dec_label_pc_bb80:                                ; preds = %bb147
  store i32 %v1_bb70, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_bb8c

dec_label_pc_bb8c:                                ; preds = %bb150, %dec_label_pc_bb80
  %v0_bba886153 = phi i32 [ %v0_bba886154, %bb150 ], [ %v1_bb70, %dec_label_pc_bb80 ]
  %v1_bb9c34 = phi i32 [ %v1_bbac92, %bb150 ], [ %v1_bb70, %dec_label_pc_bb80 ]
  %v1_bb98.off0 = phi i8 [ %v1_bb9857.off0, %bb150 ], [ %extract.t79, %dec_label_pc_bb80 ]
  %v0_bb9c33 = phi i32 [ %v0_bb9c335589, %bb150 ], [ %v0_bb84, %dec_label_pc_bb80 ]
  store i32 %v5_b7ac, i32* %ip.global-to-local, align 4
  %v2_bb90 = add i32 %v1_bb9c34, %v5_b7ac
  %v3_bb90 = inttoptr i32 %v2_bb90 to i8*
  %v4_bb90 = load i8, i8* %v3_bb90, align 1
  %v6_bb90 = zext i8 %v4_bb90 to i32
  store i32 %v6_bb90, i32* %r3.global-to-local, align 4
  %v7_bb94 = icmp eq i8 %v4_bb90, 46
  store i1 %v7_bb94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bb94, label %bb148, label %.thread32

.thread32:                                        ; preds = %dec_label_pc_bb8c
  %v2_bb9c35 = add i32 %v1_bb9c34, %v0_bb9c33
  store i32 %v2_bb9c35, i32* %r0.global-to-local, align 4
  br label %.thread36

bb148:                                            ; preds = %dec_label_pc_bb8c
  %v3_bb98 = load i32, i32* %r2.global-to-local, align 4
  %v4_bb98 = inttoptr i32 %v3_bb98 to i8*
  store i8 %v1_bb98.off0, i8* %v4_bb98, align 1
  %v0_bba0.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_bb9c = load i32, i32* %r4.global-to-local, align 4
  %v1_bb9c = load i32, i32* %r1.global-to-local, align 4
  %v2_bb9c = add i32 %v1_bb9c, %v0_bb9c
  store i32 %v2_bb9c, i32* %r0.global-to-local, align 4
  br i1 %v0_bba0.pr, label %bb149, label %bb148..thread36_crit_edge

bb148..thread36_crit_edge:                        ; preds = %bb148
  %v0_bba886.pre = load i32, i32* %lr.global-to-local, align 4
  br label %.thread36

bb149:                                            ; preds = %bb148
  %v2_bba0 = add i32 %v2_bb9c, 1
  store i32 %v2_bba0, i32* %r2.global-to-local, align 4
  store i32 %v2_b8f8, i32* %r0.global-to-local, align 4
  %v0_bba8 = load i32, i32* %lr.global-to-local, align 4
  %v1_bba8 = add i32 %v0_bba8, 1
  store i32 %v1_bba8, i32* %ip.global-to-local, align 4
  %v1_bbac = add i32 %v1_bb9c, 1
  store i32 %v1_bbac, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %bb150

.thread36:                                        ; preds = %bb148..thread36_crit_edge, %.thread32
  %v0_bba886 = phi i32 [ %v0_bba886.pre, %bb148..thread36_crit_edge ], [ %v0_bba886153, %.thread32 ]
  %v0_bbac.ph = phi i32 [ %v1_bb9c, %bb148..thread36_crit_edge ], [ %v1_bb9c34, %.thread32 ]
  %v0_bb9c3355.ph = phi i32 [ %v0_bb9c, %bb148..thread36_crit_edge ], [ %v0_bb9c33, %.thread32 ]
  store i32 %v2_b8f8, i32* %r0.global-to-local, align 4
  %v1_bba887 = add i32 %v0_bba886, 1
  store i32 %v1_bba887, i32* %ip.global-to-local, align 4
  %v1_bbac88 = add i32 %v0_bbac.ph, 1
  store i32 %v1_bbac88, i32* %r1.global-to-local, align 4
  %v2_bbb4 = urem i32 %v1_bba887, 256
  store i32 %v2_bbb4, i32* %lr.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_bba887 to i8
  br label %bb150

bb150:                                            ; preds = %bb149, %.thread36
  %v0_bba886154 = phi i32 [ 0, %bb149 ], [ %v2_bbb4, %.thread36 ]
  %v1_bbac92 = phi i32 [ %v1_bbac, %bb149 ], [ %v1_bbac88, %.thread36 ]
  %v0_bb9c335589 = phi i32 [ %v0_bb9c, %bb149 ], [ %v0_bb9c3355.ph, %.thread36 ]
  %v1_bb9857.off0 = phi i8 [ 0, %bb149 ], [ %extract.t82, %.thread36 ]
  %v9_bbb8 = icmp eq i32 %v2_b8f8, %v1_bbac92
  store i1 %v9_bbb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bbb8, label %dec_label_pc_bbc0.loopexit, label %dec_label_pc_bb8c

dec_label_pc_bbc0.loopexit:                       ; preds = %bb150
  %v2_bbc0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_bbc0

dec_label_pc_bbc0:                                ; preds = %dec_label_pc_bbc0.loopexit, %bb147
  %v2_bbc0 = phi i32 [ %v2_bbc0.pre, %dec_label_pc_bbc0.loopexit ], [ %v0_bb84, %bb147 ]
  %v0_bbc0.off0 = phi i8 [ %v1_bb9857.off0, %dec_label_pc_bbc0.loopexit ], [ %extract.t79, %bb147 ]
  %v3_bbc0 = inttoptr i32 %v2_bbc0 to i8*
  store i8 %v0_bbc0.off0, i8* %v3_bbc0, align 1
  %v3_bbc4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b8f8, i32* %r1.global-to-local, align 4
  %v0_bbcc = load i32, i32* %r4.global-to-local, align 4
  %v2_bbcc = add i32 %v0_bbcc, %v2_b8f8
  store i32 %v2_bbcc, i32* %r3.global-to-local, align 4
  %v1_bbd0 = add i32 %v3_bbc4, 1
  store i32 %v1_bbd0, i32* %r4.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %lr.global-to-local, align 4
  %v9_bbe0 = icmp eq i32 %v1_b698, %v1_bbd0
  store i1 %v9_bbe0, i1* %cpsr_z.global-to-local, align 1
  %v1_bbe4 = add i32 %v2_bbcc, 2
  store i32 %v1_bbe4, i32* %r2.global-to-local, align 4
  %v4_bbe8 = inttoptr i32 %v1_bbe4 to i8*
  store i8 0, i8* %v4_bbe8, align 1
  %v0_bbec = load i32, i32* %lr.global-to-local, align 4
  %v1_bbec = trunc i32 %v0_bbec to i8
  %v2_bbec = load i32, i32* %r2.global-to-local, align 4
  %v3_bbec = add i32 %v2_bbec, 3
  %v4_bbec = inttoptr i32 %v3_bbec to i8*
  store i8 %v1_bbec, i8* %v4_bbec, align 1
  %v0_bbf0 = load i32, i32* %lr.global-to-local, align 4
  %v1_bbf0 = trunc i32 %v0_bbf0 to i8
  %v2_bbf0 = load i32, i32* %r2.global-to-local, align 4
  %v3_bbf0 = add i32 %v2_bbf0, 1
  %v4_bbf0 = inttoptr i32 %v3_bbf0 to i8*
  store i8 %v1_bbf0, i8* %v4_bbf0, align 1
  %v0_bbf4 = load i32, i32* %ip.global-to-local, align 4
  %v1_bbf4 = trunc i32 %v0_bbf4 to i8
  %v2_bbf4 = load i32, i32* %r2.global-to-local, align 4
  %v3_bbf4 = add i32 %v2_bbf4, 2
  %v4_bbf4 = inttoptr i32 %v3_bbf4 to i8*
  store i8 %v1_bbf4, i8* %v4_bbf4, align 1
  %v0_bbf8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_bbf8, i32* %stack_var_-40, align 4
  %v8_bbfc = icmp sgt i32 %v1_b698, %v1_bbd0
  br i1 %v8_bbfc, label %dec_label_pc_ba58, label %dec_label_pc_bc00

dec_label_pc_bc00:                                ; preds = %dec_label_pc_bbc0, %dec_label_pc_bdcc
  %v4_bc70.pre-phi = phi i32 [ %v4_bdd0, %dec_label_pc_bdcc ], [ %v4_b9a4, %dec_label_pc_bbc0 ]
  store i32 %v1_b698, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_b97c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_bc0c

dec_label_pc_bc0c:                                ; preds = %dec_label_pc_bc0c, %dec_label_pc_bd30, %dec_label_pc_bc00
  br i1 %v2_b97c, label %dec_label_pc_bc0c, label %dec_label_pc_bc10

dec_label_pc_bc10:                                ; preds = %dec_label_pc_bc0c
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r6, align 4
  %v0_bc20 = load i32, i32* @fp, align 4
  %v1_bc20 = add i32 %v0_bc20, 27
  store i32 %v1_bc20, i32* @sb, align 4
  %v1_bc24 = add i32 %v0_bc20, 47
  store i32 %v1_bc24, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_bc2c

dec_label_pc_bc2c:                                ; preds = %dec_label_pc_bc6c.dec_label_pc_bc2c_crit_edge, %dec_label_pc_bc10
  %v1_bc4c = phi i32 [ %v1_bc38.pre, %dec_label_pc_bc6c.dec_label_pc_bc2c_crit_edge ], [ 65535, %dec_label_pc_bc10 ]
  %v1_bc34 = phi i32 [ %v1_bd1c, %dec_label_pc_bc6c.dec_label_pc_bc2c_crit_edge ], [ 0, %dec_label_pc_bc10 ]
  store i32 %v4_b6b0, i32* %r3.global-to-local, align 4
  store i32 %v3_b96c, i32* %r8.global-to-local, align 4
  %v4_bc34 = mul i32 %v1_bc34, 4
  %v5_bc34 = add i32 %v4_bc34, %v4_b6b0
  %v6_bc34 = inttoptr i32 %v5_bc34 to i32*
  %v7_bc34 = load i32, i32* %v6_bc34, align 4
  store i32 %v7_bc34, i32* @r4, align 4
  %v9_bc38 = icmp eq i32 %v3_b96c, %v1_bc4c
  store i1 %v9_bc38, i1* %cpsr_z.global-to-local, align 1
  %v1_bc3c = add i32 %v7_bc34, 20
  store i32 %v1_bc3c, i32* @r5, align 4
  %v1_bc40 = add i32 %v7_bc34, 28
  store i32 %v1_bc40, i32* @r8, align 4
  br i1 %v9_bc38, label %dec_label_pc_bd40, label %dec_label_pc_bc48

dec_label_pc_bc48:                                ; preds = %dec_label_pc_bc2c
  store i32 %v3_b970, i32* %ip.global-to-local, align 4
  %v9_bc4c = icmp eq i32 %v3_b970, %v1_bc4c
  store i1 %v9_bc4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bc4c, label %dec_label_pc_bd5c, label %dec_label_pc_bc54

dec_label_pc_bc54:                                ; preds = %dec_label_pc_bd40.dec_label_pc_bc54_crit_edge, %dec_label_pc_bc48
  %v1_bc58 = phi i32 [ %v1_bc58.pre, %dec_label_pc_bd40.dec_label_pc_bc54_crit_edge ], [ %v1_bc4c, %dec_label_pc_bc48 ]
  store i32 %v3_b974, i32* %lr.global-to-local, align 4
  %v9_bc58 = icmp eq i32 %v3_b974, %v1_bc58
  store i1 %v9_bc58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bc58, label %dec_label_pc_bd78, label %dec_label_pc_bc60

dec_label_pc_bc60:                                ; preds = %dec_label_pc_bd5c.dec_label_pc_bc60_crit_edge, %dec_label_pc_bc54
  %v1_bc64 = phi i32 [ %v1_bc64.pre, %dec_label_pc_bd5c.dec_label_pc_bc60_crit_edge ], [ %v1_bc58, %dec_label_pc_bc54 ]
  store i32 %v3_b978, i32* %r0.global-to-local, align 4
  %v9_bc64 = icmp eq i32 %v3_b978, %v1_bc64
  store i1 %v9_bc64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bc64, label %dec_label_pc_bd94, label %dec_label_pc_bc6c

dec_label_pc_bc6c:                                ; preds = %dec_label_pc_bd78, %dec_label_pc_bc60, %dec_label_pc_bd94
  %v0_bc6c = load i32, i32* @r4, align 4
  %v1_bc6c = add i32 %v0_bc6c, 41
  store i32 %v1_bc6c, i32* %r0.global-to-local, align 4
  store i32 %v4_bc70.pre-phi, i32* %r1.global-to-local, align 4
  %v2_bc74 = call i32 @function_f51c(i32 %v1_bc6c, i32 %v4_bc70.pre-phi)
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bc7c = load i32, i32* @r7, align 4
  %v1_bc7c = trunc i32 %v0_bc7c to i8
  %v2_bc7c = load i32, i32* @r4, align 4
  %v3_bc7c = add i32 %v2_bc7c, 10
  %v4_bc7c = inttoptr i32 %v3_bc7c to i8*
  store i8 %v1_bc7c, i8* %v4_bc7c, align 1
  %v0_bc80 = load i32, i32* @r7, align 4
  %v1_bc80 = trunc i32 %v0_bc80 to i8
  %v2_bc80 = load i32, i32* @r4, align 4
  %v3_bc80 = add i32 %v2_bc80, 11
  %v4_bc80 = inttoptr i32 %v3_bc80 to i8*
  store i8 %v1_bc80, i8* %v4_bc80, align 1
  %v0_bc84 = load i32, i32* @r4, align 4
  store i32 %v0_bc84, i32* @r0, align 4
  %v2_bc88 = call i32 @function_ddf4(i32 %v0_bc84, i32 20)
  %v3_bc88 = trunc i32 %v2_bc88 to i8
  store i32 %v2_bc88, i32* %r0.global-to-local, align 4
  %v4_bc8c = sdiv i32 %v2_bc88, 256
  store i32 %v4_bc8c, i32* %r3.global-to-local, align 4
  %v1_bc90 = trunc i32 %v4_bc8c to i8
  %v2_bc90 = load i32, i32* @r4, align 4
  %v3_bc90 = add i32 %v2_bc90, 11
  %v4_bc90 = inttoptr i32 %v3_bc90 to i8*
  store i8 %v1_bc90, i8* %v4_bc90, align 1
  %v3_bc94 = load i32, i32* @r4, align 4
  %v4_bc94 = add i32 %v3_bc94, 10
  %v5_bc94 = inttoptr i32 %v4_bc94 to i8*
  store i8 %v3_bc88, i8* %v5_bc94, align 1
  %v0_bc98 = load i32, i32* @r7, align 4
  %v1_bc98 = trunc i32 %v0_bc98 to i8
  %v2_bc98 = load i32, i32* @r5, align 4
  %v3_bc98 = add i32 %v2_bc98, 6
  %v4_bc98 = inttoptr i32 %v3_bc98 to i8*
  store i8 %v1_bc98, i8* %v4_bc98, align 1
  %v0_bc9c = load i32, i32* @r7, align 4
  %v1_bc9c = trunc i32 %v0_bc9c to i8
  %v2_bc9c = load i32, i32* @r5, align 4
  %v3_bc9c = add i32 %v2_bc9c, 7
  %v4_bc9c = inttoptr i32 %v3_bc9c to i8*
  store i8 %v1_bc9c, i8* %v4_bc9c, align 1
  %v0_bca0 = load i32, i32* @r4, align 4
  %v1_bca0 = add i32 %v0_bca0, 24
  %v2_bca0 = inttoptr i32 %v1_bca0 to i8*
  %v3_bca0 = load i8, i8* %v2_bca0, align 1
  %v4_bca0 = zext i8 %v3_bca0 to i32
  store i32 %v4_bca0, i32* %r3.global-to-local, align 4
  %v1_bca4 = add i32 %v0_bca0, 25
  %v2_bca4 = inttoptr i32 %v1_bca4 to i8*
  %v3_bca4 = load i8, i8* %v2_bca4, align 1
  %v4_bca4 = zext i8 %v3_bca4 to i32
  %v0_bca8 = load i32, i32* @r5, align 4
  store i32 %v0_bca8, i32* @r1, align 4
  %v4_bcac = mul nuw nsw i32 %v4_bca4, 256
  %v5_bcac = or i32 %v4_bcac, %v4_bca0
  store i32 %v5_bcac, i32* %r2.global-to-local, align 4
  store i32 %v0_bca0, i32* %r0.global-to-local, align 4
  %v0_bcb4 = load i32, i32* @sb, align 4
  store i32 %v0_bcb4, i32* %r3.global-to-local, align 4
  %v4_bcb8 = call i32 @function_de50(i32 %v0_bca0, i32 %v0_bca8, i32 %v5_bcac, i32 %v0_bcb4)
  %v5_bcb8 = trunc i32 %v4_bcb8 to i8
  store i32 %v4_bcb8, i32* %r0.global-to-local, align 4
  %v3_bcbc = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-2176.0, i32* %r2.global-to-local, align 4
  %v5_bccc = mul i32 %v3_bcbc, 24
  %v2_bcd0 = add i32 %v5_bccc, %arg2
  store i32 %v2_bcd0, i32* %lr.global-to-local, align 4
  %v4_bcd4 = sdiv i32 %v4_bcb8, 256
  store i32 %v4_bcd4, i32* %r3.global-to-local, align 4
  %v3_bcd8 = load i32, i32* @r5, align 4
  %v4_bcd8 = add i32 %v3_bcd8, 6
  %v5_bcd8 = inttoptr i32 %v4_bcd8 to i8*
  store i8 %v5_bcb8, i8* %v5_bcd8, align 1
  %v0_bcdc = load i32, i32* %r3.global-to-local, align 4
  %v1_bcdc = trunc i32 %v0_bcdc to i8
  %v2_bcdc = load i32, i32* @r5, align 4
  %v3_bcdc = add i32 %v2_bcdc, 7
  %v4_bcdc = inttoptr i32 %v3_bcdc to i8*
  store i8 %v1_bcdc, i8* %v4_bcdc, align 1
  %v0_bce0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bce0 = load i32, i32* %lr.global-to-local, align 4
  %v2_bce0 = add i32 %v1_bce0, 4
  %v3_bce0 = inttoptr i32 %v2_bce0 to i32*
  store i32 %v0_bce0, i32* %v3_bce0, align 4
  %v0_bce4 = load i32, i32* @r4, align 4
  %v1_bce4 = add i32 %v0_bce4, 20
  %v2_bce4 = inttoptr i32 %v1_bce4 to i32*
  %v3_bce4 = load i32, i32* %v2_bce4, align 4
  %v3_bce8 = udiv i32 %v3_bce4, 65536
  store i32 %v3_bce8, i32* %r3.global-to-local, align 4
  %v3_bcec13 = udiv i32 %v3_bce4, 16777216
  %v1_bcf0 = trunc i32 %v3_bcec13 to i8
  %v2_bcf0 = load i32, i32* %lr.global-to-local, align 4
  %v3_bcf0 = add i32 %v2_bcf0, 3
  %v4_bcf0 = inttoptr i32 %v3_bcf0 to i8*
  store i8 %v1_bcf0, i8* %v4_bcf0, align 1
  %v0_bcf4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bcf4 = trunc i32 %v0_bcf4 to i8
  %v2_bcf4 = load i32, i32* %lr.global-to-local, align 4
  %v3_bcf4 = add i32 %v2_bcf4, 2
  %v4_bcf4 = inttoptr i32 %v3_bcf4 to i8*
  store i8 %v1_bcf4, i8* %v4_bcf4, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_bd00 = load i32, i32* @r4, align 4
  store i32 %v0_bd00, i32* %r1.global-to-local, align 4
  store i32 %v3_b90c, i32* %r0.global-to-local, align 4
  %v0_bd08 = load i32, i32* @sl, align 4
  store i32 %v0_bd08, i32* %r2.global-to-local, align 4
  %v0_bd0c = load i32, i32* %lr.global-to-local, align 4
  %v4_bd0c = inttoptr i32 %v0_bd0c to %sockaddr*
  %v7_bd14 = inttoptr i32 %v0_bd00 to i32*
  %v9_bd14 = call i32 @sendto(i32 %v3_b90c, i32* %v7_bd14, i32 %v0_bd08, i32 16384, %sockaddr* %v4_bd0c, i32 16)
  %v3_bd18 = load i32, i32* %stack_var_-40, align 4
  %v1_bd1c = add i32 %v3_bd18, 1
  store i32 %v1_bd1c, i32* %r0.global-to-local, align 4
  store i32 %v1_b698, i32* %r3.global-to-local, align 4
  %v9_bd24 = icmp eq i32 %v1_b698, %v1_bd1c
  store i1 %v9_bd24, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bd1c, i32* %stack_var_-40, align 4
  %v8_bd2c = icmp sgt i32 %v1_b698, %v1_bd1c
  br i1 %v8_bd2c, label %dec_label_pc_bc6c.dec_label_pc_bc2c_crit_edge, label %dec_label_pc_bd30

dec_label_pc_bc6c.dec_label_pc_bc2c_crit_edge:    ; preds = %dec_label_pc_bc6c
  %v1_bc38.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_bc2c

dec_label_pc_bd30:                                ; preds = %dec_label_pc_bc6c
  store i32 %v1_b698, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_bc0c

dec_label_pc_bd40:                                ; preds = %dec_label_pc_bc2c
  %v0_bd40 = call i32 @function_f468()
  %v1_bd40 = trunc i32 %v0_bd40 to i8
  store i32 %v0_bd40, i32* %r0.global-to-local, align 4
  store i32 %v3_b970, i32* %ip.global-to-local, align 4
  %v4_bd48 = sdiv i32 %v0_bd40, 256
  store i32 %v4_bd48, i32* %r3.global-to-local, align 4
  %v1_bd4c = load i32, i32* @r6, align 4
  %v9_bd4c = icmp eq i32 %v3_b970, %v1_bd4c
  store i1 %v9_bd4c, i1* %cpsr_z.global-to-local, align 1
  %v1_bd50 = trunc i32 %v4_bd48 to i8
  %v2_bd50 = load i32, i32* @r4, align 4
  %v3_bd50 = add i32 %v2_bd50, 5
  %v4_bd50 = inttoptr i32 %v3_bd50 to i8*
  store i8 %v1_bd50, i8* %v4_bd50, align 1
  %v3_bd54 = load i32, i32* @r4, align 4
  %v4_bd54 = add i32 %v3_bd54, 4
  %v5_bd54 = inttoptr i32 %v4_bd54 to i8*
  store i8 %v1_bd40, i8* %v5_bd54, align 1
  %v0_bd58 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd58, label %dec_label_pc_bd5c, label %dec_label_pc_bd40.dec_label_pc_bc54_crit_edge

dec_label_pc_bd40.dec_label_pc_bc54_crit_edge:    ; preds = %dec_label_pc_bd40
  %v1_bc58.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_bc54

dec_label_pc_bd5c:                                ; preds = %dec_label_pc_bd40, %dec_label_pc_bc48
  %v0_bd5c = call i32 @function_f468()
  %v1_bd5c = trunc i32 %v0_bd5c to i8
  store i32 %v0_bd5c, i32* %r0.global-to-local, align 4
  store i32 %v3_b974, i32* %lr.global-to-local, align 4
  %v4_bd64 = sdiv i32 %v0_bd5c, 256
  store i32 %v4_bd64, i32* %r3.global-to-local, align 4
  %v1_bd68 = load i32, i32* @r6, align 4
  %v9_bd68 = icmp eq i32 %v3_b974, %v1_bd68
  store i1 %v9_bd68, i1* %cpsr_z.global-to-local, align 1
  %v3_bd6c = load i32, i32* @r4, align 4
  %v4_bd6c = add i32 %v3_bd6c, 20
  %v5_bd6c = inttoptr i32 %v4_bd6c to i8*
  store i8 %v1_bd5c, i8* %v5_bd6c, align 1
  %v0_bd70 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd70 = trunc i32 %v0_bd70 to i8
  %v2_bd70 = load i32, i32* @r5, align 4
  %v3_bd70 = add i32 %v2_bd70, 1
  %v4_bd70 = inttoptr i32 %v3_bd70 to i8*
  store i8 %v1_bd70, i8* %v4_bd70, align 1
  %v0_bd74 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd74, label %dec_label_pc_bd78, label %dec_label_pc_bd5c.dec_label_pc_bc60_crit_edge

dec_label_pc_bd5c.dec_label_pc_bc60_crit_edge:    ; preds = %dec_label_pc_bd5c
  %v1_bc64.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_bc60

dec_label_pc_bd78:                                ; preds = %dec_label_pc_bd5c, %dec_label_pc_bc54
  %v0_bd78 = call i32 @function_f468()
  %v1_bd78 = trunc i32 %v0_bd78 to i8
  %v4_bd7c = sdiv i32 %v0_bd78, 256
  store i32 %v4_bd7c, i32* %r3.global-to-local, align 4
  %v3_bd80 = load i32, i32* @r5, align 4
  %v4_bd80 = add i32 %v3_bd80, 2
  %v5_bd80 = inttoptr i32 %v4_bd80 to i8*
  store i8 %v1_bd78, i8* %v5_bd80, align 1
  store i32 %v3_b978, i32* %r0.global-to-local, align 4
  %v1_bd88 = load i32, i32* @r6, align 4
  %v9_bd88 = icmp eq i32 %v3_b978, %v1_bd88
  store i1 %v9_bd88, i1* %cpsr_z.global-to-local, align 1
  %v0_bd8c = load i32, i32* %r3.global-to-local, align 4
  %v1_bd8c = trunc i32 %v0_bd8c to i8
  %v2_bd8c = load i32, i32* @r5, align 4
  %v3_bd8c = add i32 %v2_bd8c, 3
  %v4_bd8c = inttoptr i32 %v3_bd8c to i8*
  store i8 %v1_bd8c, i8* %v4_bd8c, align 1
  %v0_bd90 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd90, label %dec_label_pc_bd94, label %dec_label_pc_bc6c

dec_label_pc_bd94:                                ; preds = %dec_label_pc_bd78, %dec_label_pc_bc60
  %v0_bd94 = call i32 @function_f468()
  %v1_bd94 = trunc i32 %v0_bd94 to i8
  store i32 %v0_bd94, i32* %r0.global-to-local, align 4
  %v4_bd98 = sdiv i32 %v0_bd94, 256
  store i32 %v4_bd98, i32* %r3.global-to-local, align 4
  %v3_bd9c = load i32, i32* @r4, align 4
  %v4_bd9c = add i32 %v3_bd9c, 28
  %v5_bd9c = inttoptr i32 %v4_bd9c to i8*
  store i8 %v1_bd94, i8* %v5_bd9c, align 1
  %v0_bda0 = load i32, i32* %r3.global-to-local, align 4
  %v1_bda0 = trunc i32 %v0_bda0 to i8
  %v2_bda0 = load i32, i32* @r8, align 4
  %v3_bda0 = add i32 %v2_bda0, 1
  %v4_bda0 = inttoptr i32 %v3_bda0 to i8*
  store i8 %v1_bda0, i8* %v4_bda0, align 1
  br label %dec_label_pc_bc6c

dec_label_pc_bda8:                                ; preds = %dec_label_pc_b874, %dec_label_pc_b840, %dec_label_pc_b7e4, %dec_label_pc_b68c
  %v0_bda8 = call i32 @function_f468()
  %v1_bdac = urem i32 %v0_bda8, 4
  store i32 %v1_bdac, i32* %r0.global-to-local, align 4
  %v2_bdb0 = icmp eq i32 %v1_bdac, 3
  store i1 %v2_bdb0, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_bda8 to i2
  switch i2 %trunc, label %dec_label_pc_b8e821 [
    i2 0, label %dec_label_pc_bdf0
    i2 1, label %dec_label_pc_be04
    i2 -2, label %dec_label_pc_be10
    i2 -1, label %dec_label_pc_be20
  ]

dec_label_pc_bdcc:                                ; preds = %dec_label_pc_b948
  store i32 %v2_b8f8, i32* %r0.global-to-local, align 4
  %v4_bdd0 = sext i8 %v5_b964 to i32
  store i32 %v4_bdd0, i32* %r1.global-to-local, align 4
  %v2_bdd4 = add i32 %v4_bdd0, %v2_b8f8
  store i32 %v2_bdd4, i32* @fp, align 4
  br label %dec_label_pc_bc00

dec_label_pc_bddc:                                ; preds = %dec_label_pc_b91c
  store i32 %v3_b90c, i32* %r0.global-to-local, align 4
  %v1_bde0 = call i32 @close(i32 %v3_b90c)
  store i32 %v1_bde0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bde4

dec_label_pc_bde4:                                ; preds = %dec_label_pc_b8f4, %dec_label_pc_b8e8, %dec_label_pc_bddc
  %v29_bdec = phi i32 [ -1, %dec_label_pc_b8f4 ], [ %v29_bdec75, %dec_label_pc_b8e8 ], [ %v1_bde0, %dec_label_pc_bddc ]
  store i32 %v3_b68c, i32* %r4.global-to-local, align 4
  store i32 %v6_b68c, i32* %r5.global-to-local, align 4
  store i32 %v9_b68c, i32* %r6.global-to-local, align 4
  store i32 %v12_b68c, i32* %r7.global-to-local, align 4
  store i32 %v15_b68c, i32* %r8.global-to-local, align 4
  store i32 %v18_b68c, i32* %sb.global-to-local, align 4
  store i32 %v21_b68c, i32* %sl.global-to-local, align 4
  store i32 %v24_b68c, i32* %fp.global-to-local, align 4
  ret i32 %v29_bdec

dec_label_pc_bdf0:                                ; preds = %dec_label_pc_bda8
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b8e8

dec_label_pc_be04:                                ; preds = %dec_label_pc_bda8
  store i32 707416650, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_b8e8

dec_label_pc_be10:                                ; preds = %dec_label_pc_bda8
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_b8e8

dec_label_pc_be20:                                ; preds = %dec_label_pc_bda8
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b8e8

; uselistorder directives
  uselistorder i32 %v4_bdd0, { 0, 2, 1 }
  uselistorder i32 %v1_bdac, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_bda8, { 1, 0 }
  uselistorder i32 %v0_bd94, { 0, 2, 1 }
  uselistorder i32 %v0_bd5c, { 0, 2, 1 }
  uselistorder i32 %v4_bd48, { 1, 0 }
  uselistorder i32 %v0_bd40, { 0, 2, 1 }
  uselistorder i32 %v1_bd1c, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_bcb8, { 0, 2, 1 }
  uselistorder i32 %v0_bca0, { 1, 0, 2, 3 }
  uselistorder i32 %v4_bc8c, { 1, 0 }
  uselistorder i32 %v2_bc88, { 0, 2, 1 }
  uselistorder i32 %v7_bc34, { 1, 0, 2 }
  uselistorder i32 %v4_bc70.pre-phi, { 1, 0 }
  uselistorder i32 %v2_bbb4, { 1, 0 }
  uselistorder i32 %v1_bba887, { 1, 0, 2 }
  uselistorder i32 %v1_bb9c, { 2, 1, 0 }
  uselistorder i32 %v0_bb9c, { 1, 2, 0 }
  uselistorder i32 %v0_bb9c33, { 1, 0 }
  uselistorder i32 %v1_bb9c34, { 2, 0, 1 }
  uselistorder i8 %extract.t79, { 1, 0 }
  uselistorder i32 %v1_bb70, { 2, 0, 4, 1, 3, 5, 6 }
  uselistorder i32 %v0_baec, { 1, 0 }
  uselistorder i32 %v3_ba28, { 1, 0, 2 }
  uselistorder i32 %v1_b9f0, { 1, 0 }
  uselistorder i32 %v1_b9e4, { 1, 0 }
  uselistorder i32 %v1_b9c8, { 1, 0 }
  uselistorder i32 %v1_b9b4, { 1, 0 }
  uselistorder i32 %v3_b9ac, { 1, 0 }
  uselistorder i32 %v4_b9a4, { 0, 4, 2, 5, 3, 1 }
  uselistorder i8 %v5_b964, { 1, 0 }
  uselistorder i32 %v0_b960, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_b95c, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_b954, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_b90c, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 %v2_b8f8, { 0, 11, 1, 6, 4, 3, 7, 10, 9, 8, 5, 2 }
  uselistorder i32 %stack_var_-2176.0, { 1, 0 }
  uselistorder i32 %v3_b8e0, { 1, 0, 2 }
  uselistorder i1 %v7_b8b0, { 1, 0 }
  uselistorder i32 %v1_b8ac, { 1, 0, 2 }
  uselistorder i1 %v8_b8a4, { 1, 0 }
  uselistorder i1 %v7_b8a0, { 1, 0 }
  uselistorder i32 %v1_b894, { 1, 0 }
  uselistorder i8 %v2_b888, { 2, 0, 1, 3 }
  uselistorder i32 %v0_b88c, { 1, 0 }
  uselistorder i32 %v0_b8ac, { 3, 0, 2, 1 }
  uselistorder i32 %v0_b878, { 0, 2, 1 }
  uselistorder i32 %v1_b890, { 0, 2, 1 }
  uselistorder i32 %v2_b860, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v2_b858, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b840, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v0_b838, { 1, 2, 0, 3, 5, 4, 6 }
  uselistorder i32 %v0_b7dc, { 1, 0, 3, 2 }
  uselistorder i32 %v5_b7ac, { 0, 3, 5, 4, 2, 1, 7, 6 }
  uselistorder i32 %v1_b730, { 1, 0 }
  uselistorder i32 %v7_b6ec, { 0, 1, 2, 4, 3 }
  uselistorder i8 %v5_b6e8, { 1, 0 }
  uselistorder i32 %v6_b6c8, { 1, 0 }
  uselistorder i32 %v4_b6b0, { 0, 3, 1, 2 }
  uselistorder i32 %v1_b698, { 7, 4, 5, 6, 3, 8, 9, 10, 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9 }
  uselistorder i32* %sb.global-to-local, { 0, 1, 2, 5, 3, 4 }
  uselistorder i32* %r8.global-to-local, { 0, 6, 1, 2, 5, 3, 4 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 13, 14, 5, 2, 3, 4, 6, 7, 8, 9, 12, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 2, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 3, 4, 5, 6, 7, 8, 9, 10, 1, 11, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 24, 25, 26, 27, 28, 29, 30, 31, 16, 15, 17, 18, 19, 20, 21, 22, 23, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 48, 49, 51, 50, 4, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 40, 41, 42, 43, 44, 45, 46, 47, 28, 29, 30, 32, 31, 34, 33, 35, 37, 36, 39, 38, 0 }
  uselistorder i32* %r0.global-to-local, { 8, 6, 7, 59, 61, 60, 62, 64, 63, 65, 3, 66, 2, 67, 68, 69, 5, 9, 10, 1, 24, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 25, 26, 41, 42, 44, 43, 45, 47, 46, 48, 50, 49, 52, 51, 53, 54, 56, 55, 57, 4, 58, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* %lr.global-to-local, { 18, 22, 19, 20, 21, 23, 24, 25, 26, 27, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %ip.global-to-local, { 18, 19, 20, 21, 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 12, 13, 14 }
  uselistorder i1* %cpsr_z.global-to-local, { 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 14, 11, 18, 19, 20 }
  uselistorder i32 134744072, { 1, 0 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder i8 46, { 1, 0 }
  uselistorder label %dec_label_pc_bde4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bc6c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bc0c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bc00, { 1, 0 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb147, { 1, 0 }
  uselistorder label %.thread22, { 1, 0 }
  uselistorder label %dec_label_pc_b8bc, { 1, 0 }
  uselistorder label %dec_label_pc_b8b0, { 1, 0 }
  uselistorder label %dec_label_pc_b874, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b86c, { 1, 0 }
}

define i32 @function_be3c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_be3c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp40 = call i8 @__decompiler_undefined_function_1()
  %tmp41 = call i8 @__decompiler_undefined_function_1()
  %tmp42 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_be3c = load i32, i32* @r4, align 4
  %v1_be40 = urem i32 %arg1, 256
  store i32 %v1_be40, i32* @fp, align 4
  store i32 %v1_be40, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_be58 = urem i32 %arg3, 256
  store i32 %v1_be58, i32* @r4, align 4
  %v2_be5c = call i32* @calloc(i32 %v1_be40, i32 16)
  %v4_be5c = ptrtoint i32* %v2_be5c to i32
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_be68 = load i32, i32* @fp, align 4
  store i32 %v0_be68, i32* %r0.global-to-local, align 4
  %v2_be6c = call i32* @calloc(i32 %v0_be68, i32 4)
  %v4_be6c = ptrtoint i32* %v2_be6c to i32
  %v0_be70 = load i32, i32* @r5, align 4
  store i32 %v0_be70, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_be80 = load i32, i32* @r4, align 4
  store i32 %v0_be80, i32* %r0.global-to-local, align 4
  %v5_be84 = inttoptr i32 %v0_be70 to i32*
  %v6_be84 = call i32 @function_92dc(i32 %v0_be80, i32* %v5_be84, i32 2, i32 0)
  %v1_be90 = urem i32 %v6_be84, 256
  store i32 %v1_be90, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_be9c = load i32, i32* @r5, align 4
  store i32 %v0_be9c, i32* %r1.global-to-local, align 4
  %v0_bea0 = load i32, i32* @r4, align 4
  store i32 %v0_bea0, i32* %r0.global-to-local, align 4
  %v6_bea8 = inttoptr i32 %v0_be9c to i32*
  %v7_bea8 = call i32 @function_92dc(i32 %v0_bea0, i32* %v6_bea8, i32 3, i32 65535)
  %v0_beac = load i32, i32* @r5, align 4
  store i32 %v0_beac, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bea8, i32* @r6, align 4
  %v0_bebc = load i32, i32* @r4, align 4
  store i32 %v0_bebc, i32* %r0.global-to-local, align 4
  %v4_bec0 = inttoptr i32 %v0_beac to i32*
  %v5_bec0 = call i32 @function_92dc(i32 %v0_bebc, i32* %v4_bec0, i32 4, i32 64)
  %v1_bec8 = urem i32 %v5_bec0, 256
  store i32 %v1_bec8, i32* %ip.global-to-local, align 4
  %v0_becc = load i32, i32* @r5, align 4
  store i32 %v0_becc, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bed8 = load i32, i32* @r4, align 4
  store i32 %v0_bed8, i32* %r0.global-to-local, align 4
  %v6_bee0 = inttoptr i32 %v0_becc to i32*
  %v7_bee0 = call i32 @function_92dc(i32 %v0_bed8, i32* %v6_bee0, i32 5, i32 1)
  %v1_beec = urem i32 %v7_bee0, 256
  store i32 %v1_beec, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_bef4 = load i32, i32* @r5, align 4
  store i32 %v0_bef4, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_befc = load i32, i32* @r4, align 4
  store i32 %v0_befc, i32* %r0.global-to-local, align 4
  %v5_bf04 = inttoptr i32 %v0_bef4 to i32*
  %v6_bf04 = call i32 @function_92dc(i32 %v0_befc, i32* %v5_bf04, i32 7, i32 65535)
  %v0_bf08 = load i32, i32* @r5, align 4
  store i32 %v0_bf08, i32* %r1.global-to-local, align 4
  %v3_bf0c = mul i32 %v6_bf04, 65536
  store i32 %v3_bf0c, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bf18 = load i32, i32* @r4, align 4
  store i32 %v0_bf18, i32* %r0.global-to-local, align 4
  %v4_bf1c = inttoptr i32 %v0_bf08 to i32*
  %v5_bf1c = call i32 @function_92dc(i32 %v0_bf18, i32* %v4_bf1c, i32 11, i32 1)
  %v1_bf24 = urem i32 %v5_bf1c, 256
  store i32 %v1_bf24, i32* %ip.global-to-local, align 4
  %v0_bf28 = load i32, i32* @r5, align 4
  store i32 %v0_bf28, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bf34 = load i32, i32* @r4, align 4
  store i32 %v0_bf34, i32* %r0.global-to-local, align 4
  %v5_bf3c = inttoptr i32 %v0_bf28 to i32*
  %v6_bf3c = call i32 @function_92dc(i32 %v0_bf34, i32* %v5_bf3c, i32 12, i32 1)
  %v1_bf44 = urem i32 %v6_bf3c, 256
  store i32 %v1_bf44, i32* %ip.global-to-local, align 4
  %v0_bf48 = load i32, i32* @r5, align 4
  store i32 %v0_bf48, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bf54 = load i32, i32* @r4, align 4
  store i32 %v0_bf54, i32* %r0.global-to-local, align 4
  %v5_bf5c = inttoptr i32 %v0_bf48 to i32*
  %v6_bf5c = call i32 @function_92dc(i32 %v0_bf54, i32* %v5_bf5c, i32 13, i32 1)
  %v1_bf64 = urem i32 %v6_bf5c, 256
  store i32 %v1_bf64, i32* %ip.global-to-local, align 4
  %v0_bf68 = load i32, i32* @r5, align 4
  store i32 %v0_bf68, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bf74 = load i32, i32* @r4, align 4
  store i32 %v0_bf74, i32* %r0.global-to-local, align 4
  %v5_bf7c = inttoptr i32 %v0_bf68 to i32*
  %v6_bf7c = call i32 @function_92dc(i32 %v0_bf74, i32* %v5_bf7c, i32 14, i32 1)
  %v1_bf84 = urem i32 %v6_bf7c, 256
  store i32 %v1_bf84, i32* %ip.global-to-local, align 4
  %v0_bf88 = load i32, i32* @r5, align 4
  store i32 %v0_bf88, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bf94 = load i32, i32* @r4, align 4
  store i32 %v0_bf94, i32* %r0.global-to-local, align 4
  %v5_bf9c = inttoptr i32 %v0_bf88 to i32*
  %v6_bf9c = call i32 @function_92dc(i32 %v0_bf94, i32* %v5_bf9c, i32 15, i32 1)
  %v1_bfa4 = urem i32 %v6_bf9c, 256
  store i32 %v1_bfa4, i32* %ip.global-to-local, align 4
  %v0_bfa8 = load i32, i32* @r5, align 4
  store i32 %v0_bfa8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bfb4 = load i32, i32* @r4, align 4
  store i32 %v0_bfb4, i32* %r0.global-to-local, align 4
  %v5_bfbc = inttoptr i32 %v0_bfa8 to i32*
  %v6_bfbc = call i32 @function_92dc(i32 %v0_bfb4, i32* %v5_bfbc, i32 16, i32 1)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_bfbc, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_bfcc = load i32, i32* @r5, align 4
  store i32 %v0_bfcc, i32* %r1.global-to-local, align 4
  %v0_bfd0 = load i32, i32* @r4, align 4
  store i32 %v0_bfd0, i32* %r0.global-to-local, align 4
  %v1_bfd4 = urem i32 %v6_bfbc, 256
  store i32 %v1_bfd4, i32* @r8, align 4
  %v4_bfd8 = inttoptr i32 %v0_bfcc to i32*
  %v5_bfd8 = call i32 @function_92dc(i32 %v0_bfd0, i32* %v4_bfd8, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bfe4 = load i32, i32* @r5, align 4
  store i32 %v0_bfe4, i32* %r1.global-to-local, align 4
  store i32 %v5_bfd8, i32* @sb, align 4
  %v0_bfec = load i32, i32* @r4, align 4
  store i32 %v0_bfec, i32* %r0.global-to-local, align 4
  %v4_bff0 = inttoptr i32 %v0_bfe4 to i32*
  %v5_bff0 = call i32 @function_92dc(i32 %v0_bfec, i32* %v4_bff0, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_bffc = urem i32 %v5_bff0, 256
  store i32 %v1_bffc, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c00c = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_c00c, i32* %r0.global-to-local, align 4
  %v0_c010 = load i32, i32* @r7, align 4
  %v3_c010 = udiv i32 %v0_c010, 65536
  store i32 %v3_c010, i32* %r1.global-to-local, align 4
  %v2_c014 = icmp eq i32 %v3_c00c, -1
  store i1 %v2_c014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c014, label %dec_label_pc_c298, label %dec_label_pc_c024

dec_label_pc_c024:                                ; preds = %dec_label_pc_be3c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c02c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c02c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_c040 = call i32 @setsockopt(i32 %v3_c00c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_c040, i32* %r0.global-to-local, align 4
  %v2_c044 = icmp eq i32 %v7_c040, -1
  store i1 %v2_c044, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c044, label %dec_label_pc_c290, label %dec_label_pc_c04c

dec_label_pc_c04c:                                ; preds = %dec_label_pc_c024
  %v0_c04c = load i32, i32* @fp, align 4
  %v2_c04c = icmp eq i32 %v0_c04c, 0
  store i1 %v2_c04c, i1* %cpsr_z.global-to-local, align 1
  %v0_c050 = load i32, i32* @r6, align 4
  %v3_c050 = mul i32 %v0_c050, 65536
  store i32 %v3_c050, i32* %r0.global-to-local, align 4
  %v3_c054 = urem i32 %v0_c050, 65536
  store i32 %v3_c054, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp85 = icmp slt i32 %v0_c04c, 1
  br i1 %tmp85, label %.thread27, label %dec_label_pc_c078.preheader

.thread27:                                        ; preds = %dec_label_pc_c04c
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_c518

dec_label_pc_c078.preheader:                      ; preds = %dec_label_pc_c04c
  %v5_c05c = load i32, i32* @r7, align 4
  %v8_c05c = udiv i32 %v5_c05c, 16777216
  %tmp86 = udiv i32 %v0_c050, 256
  %v8_c060 = urem i32 %tmp86, 256
  store i32 %v8_c060, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v1_c084 = urem i32 %v0_c050, 256
  %v3_c170 = icmp ugt i32 %v0_c010, -65537
  %v2_c194 = ptrtoint i32* %stack_var_-60 to i32
  %tmp87 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v4_c1b0 = mul nuw nsw i32 %v1_c084, 256
  %v5_c1b0 = or i32 %v8_c060, %v4_c1b0
  %sext11 = mul i32 %tmp86, 16777216
  %v4_c1bc = sdiv i32 %sext11, 16777216
  %v3_c1c4 = ashr i32 %sext11, 31
  %tmp88 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v2_c1f4 = ptrtoint i32* %stack_var_-332 to i32
  %v2_c1f8 = ptrtoint i32* %stack_var_-44 to i32
  %v4_c240 = zext i8 %tmp41 to i32
  %v4_c244 = zext i8 %tmp40 to i32
  %v4_c250 = mul nuw nsw i32 %v4_c244, 256
  %v4_c260 = zext i8 %tmp to i32
  %v1_c264 = and i32 %v4_c260, 18
  %v2_c268 = icmp eq i32 %v1_c264, 18
  %v1_c180 = mul nuw nsw i32 %v3_c010, 256
  %v4_c184 = and i32 %v1_c180, 65280
  %v5_c184 = or i32 %v8_c05c, %v4_c184
  %v3_c188113 = udiv i32 %v4_c184, 256
  %v1_c18c = trunc i32 %v3_c188113 to i8
  %sext = mul i32 %v6_be84, 16777216
  %v4_c38c = sdiv i32 %sext, 16777216
  %sext9 = mul i32 %v5_bec0, 16777216
  %v4_c3a0 = sdiv i32 %sext9, 16777216
  %v5_c250 = or i32 %v4_c240, %v4_c250
  %v1_c270 = and i32 %v4_c260, 5
  %v2_c270 = icmp eq i32 %v1_c270, 0
  %v1_c190 = trunc i32 %v8_c05c to i8
  %v1_c39c = trunc i32 %v4_c38c to i8
  %v1_c468 = urem i32 %v5_bf1c, 2
  %tmp114 = sub nsw i32 0, %v1_c468
  %v4_c470 = and i32 %tmp114, 32
  %v1_c480 = urem i32 %v6_bf3c, 2
  %tmp115 = sub nsw i32 0, %v1_c480
  %v4_c488 = and i32 %tmp115, 16
  %v1_c498 = urem i32 %v6_bf5c, 2
  %tmp116 = sub nsw i32 0, %v1_c498
  %v4_c4a0 = and i32 %tmp116, 8
  %v1_c4b0 = urem i32 %v6_bf7c, 2
  %tmp117 = sub nsw i32 0, %v1_c4b0
  %v4_c4b8 = and i32 %tmp117, 4
  %v1_c4c8 = urem i32 %v6_bf9c, 2
  %tmp118 = sub nsw i32 0, %v1_c4c8
  %v3_c4d0 = and i32 %tmp118, 2
  br label %dec_label_pc_c078

dec_label_pc_c078:                                ; preds = %dec_label_pc_c504, %dec_label_pc_c278, %dec_label_pc_c078.preheader
  store i32 %v8_c060, i32* %r3.global-to-local, align 4
  store i32 %v1_c084, i32* %ip.global-to-local, align 4
  %v0_c090 = load i32, i32* @sb, align 4
  %v1_c090 = add i32 %v0_c090, 40
  store i32 %v1_c090, i32* @sl, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c0a0107 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_c0a0107, i32* %r0.global-to-local, align 4
  %v2_c0a4108 = icmp eq i32 %v3_c0a0107, -1
  store i1 %v2_c0a4108, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c0a0107, i32* @r7, align 4
  br i1 %v2_c0a4108, label %dec_label_pc_c504, label %dec_label_pc_c0b0

dec_label_pc_c0b0:                                ; preds = %dec_label_pc_c078, %dec_label_pc_c284
  %v3_c0a0109 = phi i32 [ %v3_c0a0, %dec_label_pc_c284 ], [ %v3_c0a0107, %dec_label_pc_c078 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c0b8 = call i32 (i32, i32, ...) @fcntl(i32 %v3_c0a0109, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_c0c0 = or i32 %v2_c0b8, 2048
  store i32 %v1_c0c0, i32* %r2.global-to-local, align 4
  %v0_c0c4 = load i32, i32* @r7, align 4
  store i32 %v0_c0c4, i32* %r0.global-to-local, align 4
  %v2_c0c8 = call i32 (i32, i32, ...) @fcntl(i32 %v0_c0c4, i32 4)
  %v3_c0cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c0cc, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v5_c0e8 = mul i32 %v3_c0cc, 24
  store i32 %v5_c0e8, i32* %r1.global-to-local, align 4
  %v2_c0ec = add i32 %v5_c0e8, %arg2
  store i32 %v2_c0ec, i32* %r2.global-to-local, align 4
  %v1_c0f0 = add i32 %v2_c0ec, 20
  %v2_c0f0 = inttoptr i32 %v1_c0f0 to i8*
  %v3_c0f0 = load i8, i8* %v2_c0f0, align 1
  %v4_c0f0 = zext i8 %v3_c0f0 to i32
  store i32 %v4_c0f0, i32* %r3.global-to-local, align 4
  %v2_c0f4 = icmp ugt i8 %v3_c0f0, 30
  %v7_c0f4 = icmp eq i8 %v3_c0f0, 31
  store i1 %v7_c0f4, i1* %cpsr_z.global-to-local, align 1
  %v2_c0f8 = xor i1 %v7_c0f4, true
  %v3_c0f8 = and i1 %v2_c0f4, %v2_c0f8
  %v5_c0f8 = add i32 %v2_c0ec, 16
  %v6_c0f8 = inttoptr i32 %v5_c0f8 to i32*
  %v7_c0f8 = load i32, i32* %v6_c0f8, align 4
  br i1 %v3_c0f8, label %dec_label_pc_c164, label %dec_label_pc_c104

dec_label_pc_c104:                                ; preds = %dec_label_pc_c0b0
  store i32 %v7_c0f8, i32* %r4.global-to-local, align 4
  %v0_c108 = call i32 @function_f468()
  store i32 %v0_c108, i32* %r0.global-to-local, align 4
  %v3_c10c = load i32, i32* %stack_var_-40, align 4
  %v5_c114 = mul i32 %v3_c10c, 24
  %v2_c120 = add i32 %v5_c114, %arg2
  store i32 %v2_c120, i32* %r1.global-to-local, align 4
  %v1_c11c = udiv i32 %v7_c0f8, 256
  %v3_c124 = and i32 %v1_c11c, 65280
  store i32 %v3_c124, i32* %r2.global-to-local, align 4
  %v1_c128 = and i32 %v7_c0f8, 65280
  store i32 %v1_c128, i32* %r3.global-to-local, align 4
  %v3_c12c = mul i32 %v7_c0f8, 16777216
  store i32 %v3_c12c, i32* %ip.global-to-local, align 4
  %v1_c130 = add i32 %v2_c120, 20
  %v2_c130 = inttoptr i32 %v1_c130 to i8*
  %v3_c130 = load i8, i8* %v2_c130, align 1
  %v4_c130 = zext i8 %v3_c130 to i32
  store i32 %v4_c130, i32* %lr.global-to-local, align 4
  %v4_c134 = mul nuw nsw i32 %v1_c128, 256
  %v5_c134 = or i32 %v4_c134, %v3_c12c
  store i32 %v5_c134, i32* %ip.global-to-local, align 4
  %v2_c13c = call i32 @llvm.bswap.i32(i32 %v7_c0f8)
  %v7_c140 = lshr i32 %v0_c108, %v4_c130
  %v8_c140 = add i32 %v7_c140, %v2_c13c
  store i32 %v8_c140, i32* %r2.global-to-local, align 4
  %v3_c14c = mul i32 %v8_c140, 16777216
  %v1_c150 = and i32 %v8_c140, 65280
  store i32 %v1_c150, i32* %r0.global-to-local, align 4
  %v4_c154 = mul nuw nsw i32 %v1_c150, 256
  %v5_c154 = or i32 %v4_c154, %v3_c14c
  store i32 %v5_c154, i32* %r1.global-to-local, align 4
  %v2_c15c = call i32 @llvm.bswap.i32(i32 %v8_c140)
  br label %dec_label_pc_c164

dec_label_pc_c164:                                ; preds = %dec_label_pc_c0b0, %dec_label_pc_c104
  %storemerge35 = phi i32 [ %v2_c15c, %dec_label_pc_c104 ], [ %v7_c0f8, %dec_label_pc_c0b0 ]
  store i32 %v3_c010, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c170, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c170, label %dec_label_pc_c2a0, label %dec_label_pc_c178

dec_label_pc_c178:                                ; preds = %dec_label_pc_c164
  store i32 %v3_c010, i32* %r0.global-to-local, align 4
  store i32 %v8_c05c, i32* %r1.global-to-local, align 4
  store i32 %v5_c184, i32* %r3.global-to-local, align 4
  store i32 %v3_c188113, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c194

dec_label_pc_c194:                                ; preds = %dec_label_pc_c2a0, %dec_label_pc_c178
  %stack_var_-57.0 = phi i8 [ %v1_c2a8, %dec_label_pc_c2a0 ], [ %v1_c18c, %dec_label_pc_c178 ]
  %storemerge = phi i8 [ %v1_c2a0, %dec_label_pc_c2a0 ], [ %v1_c190, %dec_label_pc_c178 ]
  store i32 %v2_c194, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_c19c = load i32, i32* @r7, align 4
  store i32 %v0_c19c, i32* %r0.global-to-local, align 4
  %v5_c1a0 = call i32 @connect(i32 %v0_c19c, %sockaddr* nonnull %tmp87, i32 16)
  store i32 %v1_c084, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_c1b0, i32* %r2.global-to-local, align 4
  %v2_c1b8 = call i32 @time(i32* null)
  store i32 %v2_c1b8, i32* %r0.global-to-local, align 4
  store i32 %v2_c1b8, i32* %r4.global-to-local, align 4
  store i32 %v3_c1c4, i32* %ip.global-to-local, align 4
  %v9_c224 = icmp eq i32 %tmp42, %storemerge35
  %v4_c248 = zext i8 %storemerge to i32
  %v4_c24c = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_c224 to i32
  %v9_c238 = icmp eq i1 %v9_c224, false
  %v4_c254 = mul nuw nsw i32 %v4_c24c, 256
  %v5_c254 = or i32 %v4_c254, %v4_c248
  %v9_c258 = icmp eq i32 %v5_c254, %v5_c250
  br label %dec_label_pc_c1e0

dec_label_pc_c1d0:                                ; preds = %.thread33, %dec_label_pc_c240, %dec_label_pc_c270, %bb90
  %v2_c1d0 = call i32 @time(i32* null)
  %v0_c1d4 = load i32, i32* %r4.global-to-local, align 4
  %v2_c1d4 = sub i32 %v2_c1d0, %v0_c1d4
  store i32 %v2_c1d4, i32* %r0.global-to-local, align 4
  %v7_c1d8 = icmp eq i32 %v2_c1d4, 10
  store i1 %v7_c1d8, i1* %cpsr_z.global-to-local, align 1
  %v8_c1dc = icmp sgt i32 %v2_c1d4, 10
  br i1 %v8_c1dc, label %dec_label_pc_c284, label %dec_label_pc_c1e0

dec_label_pc_c1e0:                                ; preds = %dec_label_pc_c1d0, %dec_label_pc_c194
  store i32 16, i32* %stack_var_-44, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_c1f4, i32* %r1.global-to-local, align 4
  store i32 %v2_c1f8, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c00c, i32* %r0.global-to-local, align 4
  %v10_c208 = call i32 @recvfrom(i32 %v3_c00c, i32* nonnull %stack_var_-332, i32 256, i32 16384, %sockaddr* %tmp88, i32* nonnull %stack_var_-44)
  store i32 %v10_c208, i32* %r2.global-to-local, align 4
  %v2_c210 = icmp eq i32 %v10_c208, -1
  store i1 %v2_c210, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v2_c210, label %dec_label_pc_c298, label %dec_label_pc_c21c

dec_label_pc_c21c:                                ; preds = %dec_label_pc_c1e0
  store i32 %storemerge35, i32* %lr.global-to-local, align 4
  store i32 %tmp42, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_c230 = icmp eq i32 %v10_c208, 40
  store i1 %v7_c230, i1* %cpsr_z.global-to-local, align 1
  %tmp119 = icmp ult i32 %v10_c208, 41
  br i1 %tmp119, label %.thread33, label %bb90

.thread33:                                        ; preds = %dec_label_pc_c21c
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_c1d0

bb90:                                             ; preds = %dec_label_pc_c21c
  store i1 %v9_c238, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c238, label %dec_label_pc_c1d0, label %dec_label_pc_c240

dec_label_pc_c240:                                ; preds = %bb90
  store i32 %v4_c244, i32* %r1.global-to-local, align 4
  store i32 %v4_c248, i32* %ip.global-to-local, align 4
  store i32 %v4_c24c, i32* %r2.global-to-local, align 4
  store i32 %v5_c250, i32* %r3.global-to-local, align 4
  store i32 %v5_c254, i32* @r5, align 4
  store i1 %v9_c258, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c258, label %dec_label_pc_c260, label %dec_label_pc_c1d0

dec_label_pc_c260:                                ; preds = %dec_label_pc_c240
  store i32 %v4_c260, i32* %r2.global-to-local, align 4
  store i32 %v1_c264, i32* %r3.global-to-local, align 4
  store i1 %v2_c268, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c268, label %dec_label_pc_c2b4, label %dec_label_pc_c270

dec_label_pc_c270:                                ; preds = %dec_label_pc_c260
  store i1 %v2_c270, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c270, label %dec_label_pc_c1d0, label %dec_label_pc_c278

dec_label_pc_c278:                                ; preds = %dec_label_pc_c270
  %v0_c278 = load i32, i32* @r7, align 4
  store i32 %v0_c278, i32* %r0.global-to-local, align 4
  %v1_c27c = call i32 @close(i32 %v0_c278)
  store i32 %v1_c27c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c078

dec_label_pc_c284:                                ; preds = %dec_label_pc_c1d0
  %v0_c284 = load i32, i32* @r7, align 4
  store i32 %v0_c284, i32* %r0.global-to-local, align 4
  %v1_c288 = call i32 @close(i32 %v0_c284)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c0a0 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_c0a0, i32* %r0.global-to-local, align 4
  %v2_c0a4 = icmp eq i32 %v3_c0a0, -1
  store i1 %v2_c0a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c0a0, i32* @r7, align 4
  br i1 %v2_c0a4, label %dec_label_pc_c504, label %dec_label_pc_c0b0

dec_label_pc_c290:                                ; preds = %dec_label_pc_c024
  store i32 %v3_c00c, i32* %r0.global-to-local, align 4
  %v1_c294 = call i32 @close(i32 %v3_c00c)
  store i32 %v1_c294, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c298

dec_label_pc_c298:                                ; preds = %dec_label_pc_c1e0, %dec_label_pc_be3c, %dec_label_pc_c290
  %v29_c29c = phi i32 [ -1, %dec_label_pc_be3c ], [ %v1_c294, %dec_label_pc_c290 ], [ 0, %dec_label_pc_c1e0 ]
  store i32 %v3_be3c, i32* %r4.global-to-local, align 4
  ret i32 %v29_c29c

dec_label_pc_c2a0:                                ; preds = %dec_label_pc_c164
  %v0_c2a0 = call i32 @function_f468()
  %v1_c2a0 = trunc i32 %v0_c2a0 to i8
  store i32 %v0_c2a0, i32* %r0.global-to-local, align 4
  %v4_c2a4 = sdiv i32 %v0_c2a0, 256
  store i32 %v4_c2a4, i32* %r3.global-to-local, align 4
  %v1_c2a8 = trunc i32 %v4_c2a4 to i8
  br label %dec_label_pc_c194

dec_label_pc_c2b4:                                ; preds = %dec_label_pc_c260
  %v3_c2b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c2b4, i32* %r4.global-to-local, align 4
  store i32 %v4_be5c, i32* %r2.global-to-local, align 4
  %v3_c2bc = mul i32 %v3_c2b4, 16
  store i32 %v3_c2bc, i32* %ip.global-to-local, align 4
  %v3_c2c0 = add i32 %v3_c2bc, %v4_be5c
  %v4_c2c0 = inttoptr i32 %v3_c2c0 to i32*
  store i32 %storemerge35, i32* %v4_c2c0, align 4
  %v0_c2c4 = load i32, i32* @r6, align 4
  %v1_c2c4 = add i32 %v0_c2c4, 4
  %v2_c2c4 = inttoptr i32 %v1_c2c4 to i32*
  %v3_c2c4 = load i32, i32* %v2_c2c4, align 4
  %v1_c2d0 = and i32 %v3_c2c4, 65280
  store i32 %v1_c2d0, i32* %r1.global-to-local, align 4
  %v3_c2d4 = mul i32 %v3_c2c4, 16777216
  store i32 %v4_be5c, i32* %r0.global-to-local, align 4
  %v4_c2e0 = mul nuw nsw i32 %v1_c2d0, 256
  %v5_c2e0 = or i32 %v4_c2e0, %v3_c2d4
  store i32 %v5_c2e0, i32* %r2.global-to-local, align 4
  %v1_c2e4 = load i32, i32* %ip.global-to-local, align 4
  %v2_c2e4 = add i32 %v1_c2e4, %v4_be5c
  store i32 %v2_c2e4, i32* %ip.global-to-local, align 4
  %v2_c2e8 = call i32 @llvm.bswap.i32(i32 %v3_c2c4)
  store i32 %v2_c2e8, i32* %r3.global-to-local, align 4
  %v2_c2ec = add i32 %v2_c2e4, 4
  %v3_c2ec = inttoptr i32 %v2_c2ec to i32*
  store i32 %v2_c2e8, i32* %v3_c2ec, align 4
  %v0_c2f0 = load i32, i32* @r6, align 4
  %v1_c2f0 = add i32 %v0_c2f0, 8
  %v2_c2f0 = inttoptr i32 %v1_c2f0 to i32*
  %v3_c2f0 = load i32, i32* %v2_c2f0, align 4
  store i32 %v3_c2f0, i32* %r0.global-to-local, align 4
  %v1_c2f8 = and i32 %v3_c2f0, 65280
  store i32 %v1_c2f8, i32* %r1.global-to-local, align 4
  %v3_c2fc = mul i32 %v3_c2f0, 16777216
  %v4_c304 = mul nuw nsw i32 %v1_c2f8, 256
  %v5_c304 = or i32 %v4_c304, %v3_c2fc
  store i32 %v5_c304, i32* %r2.global-to-local, align 4
  %v2_c30c = call i32 @llvm.bswap.i32(i32 %v3_c2f0)
  store i32 %v2_c30c, i32* %r3.global-to-local, align 4
  %v1_c310 = load i32, i32* %ip.global-to-local, align 4
  %v2_c310 = add i32 %v1_c310, 8
  %v3_c310 = inttoptr i32 %v2_c310 to i32*
  store i32 %v2_c30c, i32* %v3_c310, align 4
  %v0_c314 = load i32, i32* @r6, align 4
  %v1_c314 = inttoptr i32 %v0_c314 to i32*
  %v2_c314 = load i32, i32* %v1_c314, align 4
  %v3_c318 = udiv i32 %v2_c314, 65536
  store i32 %v3_c318, i32* %r2.global-to-local, align 4
  %v3_c31c6 = udiv i32 %v2_c314, 16777216
  store i32 %v3_c31c6, i32* %r1.global-to-local, align 4
  %v0_c320 = load i32, i32* @r5, align 4
  %v3_c320 = sdiv i32 %v0_c320, 256
  store i32 %v3_c320, i32* %r3.global-to-local, align 4
  %v1_c324 = trunc i32 %v3_c320 to i8
  %v2_c324 = load i32, i32* %ip.global-to-local, align 4
  %v3_c324 = add i32 %v2_c324, 15
  %v4_c324 = inttoptr i32 %v3_c324 to i8*
  store i8 %v1_c324, i8* %v4_c324, align 1
  %v0_c328 = load i32, i32* %r1.global-to-local, align 4
  %v1_c328 = trunc i32 %v0_c328 to i8
  %v2_c328 = load i32, i32* %ip.global-to-local, align 4
  %v3_c328 = add i32 %v2_c328, 13
  %v4_c328 = inttoptr i32 %v3_c328 to i8*
  store i8 %v1_c328, i8* %v4_c328, align 1
  %v0_c32c = load i32, i32* %r2.global-to-local, align 4
  %v1_c32c = trunc i32 %v0_c32c to i8
  %v2_c32c = load i32, i32* %ip.global-to-local, align 4
  %v3_c32c = add i32 %v2_c32c, 12
  %v4_c32c = inttoptr i32 %v3_c32c to i8*
  store i8 %v1_c32c, i8* %v4_c32c, align 1
  %v0_c330 = load i32, i32* @r5, align 4
  %v1_c330 = trunc i32 %v0_c330 to i8
  %v2_c330 = load i32, i32* %ip.global-to-local, align 4
  %v3_c330 = add i32 %v2_c330, 14
  %v4_c330 = inttoptr i32 %v3_c330 to i8*
  store i8 %v1_c330, i8* %v4_c330, align 1
  %v0_c334 = load i32, i32* @sl, align 4
  store i32 %v0_c334, i32* %r0.global-to-local, align 4
  %v1_c338 = call i32* @malloc(i32 %v0_c334)
  %v3_c338 = ptrtoint i32* %v1_c338 to i32
  store i32 %v3_c338, i32* %r0.global-to-local, align 4
  store i32 %v4_be6c, i32* %r1.global-to-local, align 4
  %v3_c340 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c340, i32* %r2.global-to-local, align 4
  %v2_c344 = load i32, i32* %r4.global-to-local, align 4
  %v5_c344 = mul i32 %v2_c344, 4
  %v6_c344 = add i32 %v5_c344, %v4_be6c
  %v7_c344 = inttoptr i32 %v6_c344 to i32*
  store i32 %v3_c338, i32* %v7_c344, align 4
  %v0_c348 = load i32, i32* %r1.global-to-local, align 4
  %v1_c348 = load i32, i32* %r2.global-to-local, align 4
  %v4_c348 = mul i32 %v1_c348, 4
  %v5_c348 = add i32 %v4_c348, %v0_c348
  %v6_c348 = inttoptr i32 %v5_c348 to i32*
  %v7_c348 = load i32, i32* %v6_c348, align 4
  store i32 %v7_c348, i32* @r4, align 4
  %v1_c34c = inttoptr i32 %v7_c348 to i8*
  %v2_c34c = load i8, i8* %v1_c34c, align 1
  %tmp120 = urem i8 %v2_c34c, 16
  %v1_c350 = zext i8 %tmp120 to i32
  %v1_c354 = or i32 %v1_c350, 64
  store i32 %v1_c354, i32* %r3.global-to-local, align 4
  %v1_c358 = trunc i32 %v1_c354 to i8
  store i8 %v1_c358, i8* %v1_c34c, align 1
  %v0_c35c = load i32, i32* @sl, align 4
  %v3_c35c = mul i32 %v0_c35c, 65536
  store i32 %v3_c35c, i32* %r2.global-to-local, align 4
  %v0_c360 = load i32, i32* @r4, align 4
  %v1_c360 = inttoptr i32 %v0_c360 to i8*
  %v2_c360 = load i8, i8* %v1_c360, align 1
  %v1_c368 = urem i32 %v0_c35c, 256
  %tmp91 = udiv i32 %v0_c35c, 256
  %v3_c36c = urem i32 %tmp91, 256
  %v1_c370 = and i8 %v2_c360, -16
  %v4_c374 = mul nuw nsw i32 %v1_c368, 256
  %v5_c374 = or i32 %v4_c374, %v3_c36c
  store i32 %v5_c374, i32* %r2.global-to-local, align 4
  %v1_c378 = or i8 %v1_c370, 5
  store i32 %v1_beec, i32* %ip.global-to-local, align 4
  store i32 %v1_c368, i32* %r3.global-to-local, align 4
  store i8 %v1_c378, i8* %v1_c360, align 1
  %v0_c388 = load i32, i32* %r3.global-to-local, align 4
  %v1_c388 = trunc i32 %v0_c388 to i8
  %v2_c388 = load i32, i32* @r4, align 4
  %v3_c388 = add i32 %v2_c388, 3
  %v4_c388 = inttoptr i32 %v3_c388 to i8*
  store i8 %v1_c388, i8* %v4_c388, align 1
  store i32 %v4_c38c, i32* %r3.global-to-local, align 4
  %v0_c390 = load i32, i32* %ip.global-to-local, align 4
  %v2_c390 = icmp eq i32 %v0_c390, 0
  store i1 %v2_c390, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_c1bc, i32* %r0.global-to-local, align 4
  store i32 %v3_c1c4, i32* %r1.global-to-local, align 4
  %v2_c39c = load i32, i32* @r4, align 4
  %v3_c39c = add i32 %v2_c39c, 1
  %v4_c39c = inttoptr i32 %v3_c39c to i8*
  store i8 %v1_c39c, i8* %v4_c39c, align 1
  store i32 %v4_c3a0, i32* %ip.global-to-local, align 4
  %v0_c3a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c3a4, label %bb93, label %bb92

bb92:                                             ; preds = %dec_label_pc_c2b4
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb93

bb93:                                             ; preds = %dec_label_pc_c2b4, %bb92
  %v0_c3a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c3a8 = trunc i32 %v0_c3a8 to i8
  %v2_c3a8 = load i32, i32* @r4, align 4
  %v3_c3a8 = add i32 %v2_c3a8, 2
  %v4_c3a8 = inttoptr i32 %v3_c3a8 to i8*
  store i8 %v1_c3a8, i8* %v4_c3a8, align 1
  %v0_c3ac = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c3ac, label %.thread10, label %bb94

bb94:                                             ; preds = %bb93
  %v1_c3ac = load i32, i32* %r3.global-to-local, align 4
  %v2_c3ac = trunc i32 %v1_c3ac to i8
  %v3_c3ac = load i32, i32* @r4, align 4
  %v4_c3ac = add i32 %v3_c3ac, 6
  %v5_c3ac = inttoptr i32 %v4_c3ac to i8*
  store i8 %v2_c3ac, i8* %v5_c3ac, align 1
  %v0_c3b0.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c3b0.pr, label %.thread10, label %bb95

bb95:                                             ; preds = %bb94
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %bb93, %bb94, %bb95
  store i32 6, i32* %r3.global-to-local, align 4
  %v0_c3b8 = load i32, i32* %ip.global-to-local, align 4
  %v1_c3b8 = trunc i32 %v0_c3b8 to i8
  %v2_c3b8 = load i32, i32* @r4, align 4
  %v3_c3b8 = add i32 %v2_c3b8, 8
  %v4_c3b8 = inttoptr i32 %v3_c3b8 to i8*
  store i8 %v1_c3b8, i8* %v4_c3b8, align 1
  %v0_c3bc = load i32, i32* %r3.global-to-local, align 4
  %v1_c3bc = trunc i32 %v0_c3bc to i8
  %v2_c3bc = load i32, i32* @r4, align 4
  %v3_c3bc = add i32 %v2_c3bc, 9
  %v4_c3bc = inttoptr i32 %v3_c3bc to i8*
  store i8 %v1_c3bc, i8* %v4_c3bc, align 1
  %v0_c3c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c3c0, label %bb97, label %bb96

bb96:                                             ; preds = %.thread10
  %v1_c3c0 = load i32, i32* %r2.global-to-local, align 4
  %v2_c3c0 = trunc i32 %v1_c3c0 to i8
  %v3_c3c0 = load i32, i32* @r4, align 4
  %v4_c3c0 = add i32 %v3_c3c0, 7
  %v5_c3c0 = inttoptr i32 %v4_c3c0 to i8*
  store i8 %v2_c3c0, i8* %v5_c3c0, align 1
  br label %bb97

bb97:                                             ; preds = %.thread10, %bb96
  %v2_c3c8 = load i32, i32* @global_var_1a40c.102, align 4
  store i32 %v2_c3c8, i32* %r3.global-to-local, align 4
  %v1_c3cc = load i32, i32* @r4, align 4
  %v2_c3cc = add i32 %v1_c3cc, 12
  %v3_c3cc = inttoptr i32 %v2_c3cc to i32*
  store i32 %v2_c3c8, i32* %v3_c3cc, align 4
  %v0_c3d0 = load i32, i32* %r0.global-to-local, align 4
  %v1_c3d0 = trunc i32 %v0_c3d0 to i8
  %v2_c3d0 = load i32, i32* @r4, align 4
  %v3_c3d0 = add i32 %v2_c3d0, 4
  %v4_c3d0 = inttoptr i32 %v3_c3d0 to i8*
  store i8 %v1_c3d0, i8* %v4_c3d0, align 1
  %v3_c3d4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c3d4, i32* %r2.global-to-local, align 4
  store i32 %v4_be5c, i32* %r0.global-to-local, align 4
  %v4_c3dc = mul i32 %v3_c3d4, 16
  %v5_c3dc = add i32 %v4_c3dc, %v4_be5c
  %v6_c3dc = inttoptr i32 %v5_c3dc to i32*
  %v7_c3dc = load i32, i32* %v6_c3dc, align 4
  store i32 %v7_c3dc, i32* %r3.global-to-local, align 4
  %v0_c3e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c3e0 = trunc i32 %v0_c3e0 to i8
  %v2_c3e0 = load i32, i32* @r4, align 4
  %v3_c3e0 = add i32 %v2_c3e0, 5
  %v4_c3e0 = inttoptr i32 %v3_c3e0 to i8*
  store i8 %v1_c3e0, i8* %v4_c3e0, align 1
  %v0_c3e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c3e4 = load i32, i32* @r4, align 4
  %v2_c3e4 = add i32 %v1_c3e4, 16
  %v3_c3e4 = inttoptr i32 %v2_c3e4 to i32*
  store i32 %v0_c3e4, i32* %v3_c3e4, align 4
  %v0_c3e8 = load i32, i32* %r2.global-to-local, align 4
  %v3_c3e8 = mul i32 %v0_c3e8, 16
  %v1_c3ec = load i32, i32* %r0.global-to-local, align 4
  %v2_c3ec = add i32 %v1_c3ec, %v3_c3e8
  store i32 %v2_c3ec, i32* %r2.global-to-local, align 4
  %v1_c3f0 = add i32 %v2_c3ec, 13
  %v2_c3f0 = inttoptr i32 %v1_c3f0 to i8*
  %v3_c3f0 = load i8, i8* %v2_c3f0, align 1
  %v4_c3f0 = zext i8 %v3_c3f0 to i32
  store i32 %v4_c3f0, i32* %r1.global-to-local, align 4
  %v1_c3f4 = add i32 %v2_c3ec, 12
  %v2_c3f4 = inttoptr i32 %v1_c3f4 to i8*
  %v3_c3f4 = load i8, i8* %v2_c3f4, align 1
  %v4_c3f4 = zext i8 %v3_c3f4 to i32
  %v4_c3f8 = mul nuw nsw i32 %v4_c3f0, 256
  %v5_c3f8 = or i32 %v4_c3f4, %v4_c3f8
  store i32 %v5_c3f8, i32* %r3.global-to-local, align 4
  %v2_c3fc = load i32, i32* @r4, align 4
  %v3_c3fc = add i32 %v2_c3fc, 20
  %v4_c3fc = inttoptr i32 %v3_c3fc to i8*
  store i8 %v3_c3f4, i8* %v4_c3fc, align 1
  %v0_c400 = load i32, i32* @r4, align 4
  %v1_c400 = add i32 %v0_c400, 20
  store i32 %v1_c400, i32* @r6, align 4
  %v0_c404 = load i32, i32* %r3.global-to-local, align 4
  %v3_c404 = sdiv i32 %v0_c404, 256
  store i32 %v3_c404, i32* %r3.global-to-local, align 4
  %v1_c408 = trunc i32 %v3_c404 to i8
  %v3_c408 = add i32 %v0_c400, 21
  %v4_c408 = inttoptr i32 %v3_c408 to i8*
  store i8 %v1_c408, i8* %v4_c408, align 1
  %v0_c40c = load i32, i32* @r6, align 4
  %v1_c40c = add i32 %v0_c40c, 13
  %v2_c40c = inttoptr i32 %v1_c40c to i8*
  %v3_c40c = load i8, i8* %v2_c40c, align 1
  %v4_c40c = zext i8 %v3_c40c to i32
  store i32 %v4_c40c, i32* %r3.global-to-local, align 4
  %v0_c410 = load i32, i32* %r2.global-to-local, align 4
  %v1_c410 = add i32 %v0_c410, 8
  %v2_c410 = inttoptr i32 %v1_c410 to i32*
  %v3_c410 = load i32, i32* %v2_c410, align 4
  store i32 %v3_c410, i32* %r1.global-to-local, align 4
  %v1_c414 = or i32 %v4_c40c, 1
  store i32 %v1_c414, i32* %r3.global-to-local, align 4
  %v1_c418 = add i32 %v0_c410, 15
  %v2_c418 = inttoptr i32 %v1_c418 to i8*
  %v3_c418 = load i8, i8* %v2_c418, align 1
  %v4_c418 = zext i8 %v3_c418 to i32
  store i32 %v4_c418, i32* %ip.global-to-local, align 4
  %v1_c41c = add i32 %v0_c410, 14
  %v2_c41c = inttoptr i32 %v1_c41c to i8*
  %v3_c41c = load i8, i8* %v2_c41c, align 1
  %v4_c41c = zext i8 %v3_c41c to i32
  store i32 %v4_c41c, i32* %r0.global-to-local, align 4
  %v2_c420 = add i32 %v0_c40c, 4
  %v3_c420 = inttoptr i32 %v2_c420 to i32*
  store i32 %v3_c410, i32* %v3_c420, align 4
  %v0_c424 = load i32, i32* %r2.global-to-local, align 4
  %v1_c424 = add i32 %v0_c424, 4
  %v2_c424 = inttoptr i32 %v1_c424 to i32*
  %v3_c424 = load i32, i32* %v2_c424, align 4
  store i32 %v3_c424, i32* %lr.global-to-local, align 4
  %v0_c428 = load i32, i32* %r3.global-to-local, align 4
  %v1_c428 = trunc i32 %v0_c428 to i8
  %v2_c428 = load i32, i32* @r6, align 4
  %v3_c428 = add i32 %v2_c428, 13
  %v4_c428 = inttoptr i32 %v3_c428 to i8*
  store i8 %v1_c428, i8* %v4_c428, align 1
  %v0_c42c = load i32, i32* @r6, align 4
  %v1_c42c = add i32 %v0_c42c, 12
  %v2_c42c = inttoptr i32 %v1_c42c to i8*
  %v3_c42c = load i8, i8* %v2_c42c, align 1
  %v4_c42c = zext i8 %v3_c42c to i32
  store i32 %v4_c42c, i32* %r2.global-to-local, align 4
  %v1_c430 = add i32 %v0_c42c, 13
  %v2_c430 = inttoptr i32 %v1_c430 to i8*
  %v3_c430 = load i8, i8* %v2_c430, align 1
  %v4_c430 = zext i8 %v3_c430 to i32
  %v0_c434 = load i32, i32* %r0.global-to-local, align 4
  %v1_c434 = load i32, i32* %ip.global-to-local, align 4
  %v4_c434 = mul i32 %v1_c434, 256
  %v5_c434 = or i32 %v4_c434, %v0_c434
  store i32 %v5_c434, i32* %r0.global-to-local, align 4
  %tmp121 = urem i8 %v3_c42c, 16
  %v1_c438 = zext i8 %tmp121 to i32
  %v3_c43c = sdiv i32 %v5_c434, 256
  store i32 %v3_c43c, i32* %r1.global-to-local, align 4
  %v1_c440 = or i32 %v1_c438, 128
  store i32 %v1_c440, i32* %r2.global-to-local, align 4
  %v1_c444 = or i32 %v4_c430, 16
  store i32 %v1_c444, i32* %r3.global-to-local, align 4
  %v1_c448 = trunc i32 %v3_c43c to i8
  %v3_c448 = add i32 %v0_c42c, 3
  %v4_c448 = inttoptr i32 %v3_c448 to i8*
  store i8 %v1_c448, i8* %v4_c448, align 1
  %v0_c44c = load i32, i32* %r2.global-to-local, align 4
  %v1_c44c = trunc i32 %v0_c44c to i8
  %v2_c44c = load i32, i32* @r6, align 4
  %v3_c44c = add i32 %v2_c44c, 12
  %v4_c44c = inttoptr i32 %v3_c44c to i8*
  store i8 %v1_c44c, i8* %v4_c44c, align 1
  %v0_c450 = load i32, i32* %r3.global-to-local, align 4
  %v1_c450 = trunc i32 %v0_c450 to i8
  %v2_c450 = load i32, i32* @r6, align 4
  %v3_c450 = add i32 %v2_c450, 13
  %v4_c450 = inttoptr i32 %v3_c450 to i8*
  store i8 %v1_c450, i8* %v4_c450, align 1
  %v0_c454 = load i32, i32* %lr.global-to-local, align 4
  %v1_c454 = load i32, i32* @r6, align 4
  %v2_c454 = add i32 %v1_c454, 8
  %v3_c454 = inttoptr i32 %v2_c454 to i32*
  store i32 %v0_c454, i32* %v3_c454, align 4
  %v0_c458 = load i32, i32* %r0.global-to-local, align 4
  %v1_c458 = trunc i32 %v0_c458 to i8
  %v2_c458 = load i32, i32* @r6, align 4
  %v3_c458 = add i32 %v2_c458, 2
  %v4_c458 = inttoptr i32 %v3_c458 to i8*
  store i8 %v1_c458, i8* %v4_c458, align 1
  %v0_c45c = call i32 @function_f468()
  %v1_c45c = trunc i32 %v0_c45c to i8
  store i32 %v0_c45c, i32* %r0.global-to-local, align 4
  store i32 %v1_bf24, i32* %r1.global-to-local, align 4
  %v0_c464 = load i32, i32* @r6, align 4
  %v1_c464 = add i32 %v0_c464, 13
  %v2_c464 = inttoptr i32 %v1_c464 to i8*
  %v3_c464 = load i8, i8* %v2_c464, align 1
  %v4_c464 = zext i8 %v3_c464 to i32
  store i32 %v1_c468, i32* %r2.global-to-local, align 4
  %v1_c46c = and i32 %v4_c464, 223
  %v5_c470 = or i32 %v1_c46c, %v4_c470
  store i32 %v5_c470, i32* %r3.global-to-local, align 4
  %v1_c474 = trunc i32 %v5_c470 to i8
  store i8 %v1_c474, i8* %v2_c464, align 1
  store i32 %v1_bf44, i32* %ip.global-to-local, align 4
  %v0_c47c = load i32, i32* @r6, align 4
  %v1_c47c = add i32 %v0_c47c, 13
  %v2_c47c = inttoptr i32 %v1_c47c to i8*
  %v3_c47c = load i8, i8* %v2_c47c, align 1
  %v4_c47c = zext i8 %v3_c47c to i32
  store i32 %v1_c480, i32* %r3.global-to-local, align 4
  %v1_c484 = and i32 %v4_c47c, 239
  %v5_c488 = or i32 %v1_c484, %v4_c488
  store i32 %v5_c488, i32* %r2.global-to-local, align 4
  %v1_c48c = trunc i32 %v5_c488 to i8
  store i8 %v1_c48c, i8* %v2_c47c, align 1
  store i32 %v1_bf64, i32* %r1.global-to-local, align 4
  %v0_c494 = load i32, i32* @r6, align 4
  %v1_c494 = add i32 %v0_c494, 13
  %v2_c494 = inttoptr i32 %v1_c494 to i8*
  %v3_c494 = load i8, i8* %v2_c494, align 1
  %v4_c494 = zext i8 %v3_c494 to i32
  store i32 %v1_c498, i32* %r2.global-to-local, align 4
  %v1_c49c = and i32 %v4_c494, 247
  %v5_c4a0 = or i32 %v1_c49c, %v4_c4a0
  store i32 %v5_c4a0, i32* %r3.global-to-local, align 4
  %v1_c4a4 = trunc i32 %v5_c4a0 to i8
  store i8 %v1_c4a4, i8* %v2_c494, align 1
  store i32 %v1_bf84, i32* %ip.global-to-local, align 4
  %v0_c4ac = load i32, i32* @r6, align 4
  %v1_c4ac = add i32 %v0_c4ac, 13
  %v2_c4ac = inttoptr i32 %v1_c4ac to i8*
  %v3_c4ac = load i8, i8* %v2_c4ac, align 1
  %v4_c4ac = zext i8 %v3_c4ac to i32
  store i32 %v1_c4b0, i32* %r3.global-to-local, align 4
  %v1_c4b4 = and i32 %v4_c4ac, 251
  %v5_c4b8 = or i32 %v1_c4b4, %v4_c4b8
  store i32 %v5_c4b8, i32* %r2.global-to-local, align 4
  %v1_c4bc = trunc i32 %v5_c4b8 to i8
  store i8 %v1_c4bc, i8* %v2_c4ac, align 1
  store i32 %v1_bfa4, i32* %r1.global-to-local, align 4
  %v0_c4c4 = load i32, i32* @r6, align 4
  %v1_c4c4 = add i32 %v0_c4c4, 13
  %v2_c4c4 = inttoptr i32 %v1_c4c4 to i8*
  %v3_c4c4 = load i8, i8* %v2_c4c4, align 1
  %v4_c4c4 = zext i8 %v3_c4c4 to i32
  store i32 %v1_c4c8, i32* %r2.global-to-local, align 4
  %v1_c4cc = and i32 %v4_c4c4, 253
  %v4_c4d0 = or i32 %v1_c4cc, %v3_c4d0
  store i32 %v4_c4d0, i32* %r3.global-to-local, align 4
  %v1_c4d4 = trunc i32 %v4_c4d0 to i8
  store i8 %v1_c4d4, i8* %v2_c4c4, align 1
  %v0_c4d8 = load i32, i32* @r6, align 4
  %v1_c4d8 = add i32 %v0_c4d8, 13
  %v2_c4d8 = inttoptr i32 %v1_c4d8 to i8*
  %v3_c4d8 = load i8, i8* %v2_c4d8, align 1
  %v4_c4d8 = zext i8 %v3_c4d8 to i32
  %v0_c4dc = load i32, i32* @r8, align 4
  %v1_c4dc = urem i32 %v0_c4dc, 2
  %v1_c4e0 = and i32 %v4_c4d8, 254
  store i32 %v1_c4e0, i32* %r2.global-to-local, align 4
  %v4_c4e437 = udiv i32 %v0_c45c, 256
  %v2_c4e8 = or i32 %v1_c4e0, %v1_c4dc
  store i32 %v2_c4e8, i32* %r3.global-to-local, align 4
  %v1_c4ec = trunc i32 %v4_c4e437 to i8
  %v3_c4ec = add i32 %v0_c4d8, 15
  %v4_c4ec = inttoptr i32 %v3_c4ec to i8*
  store i8 %v1_c4ec, i8* %v4_c4ec, align 1
  %v3_c4f0 = load i32, i32* @r6, align 4
  %v4_c4f0 = add i32 %v3_c4f0, 14
  %v5_c4f0 = inttoptr i32 %v4_c4f0 to i8*
  store i8 %v1_c45c, i8* %v5_c4f0, align 1
  %v0_c4f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c4f4 = trunc i32 %v0_c4f4 to i8
  %v2_c4f4 = load i32, i32* @r6, align 4
  %v3_c4f4 = add i32 %v2_c4f4, 13
  %v4_c4f4 = inttoptr i32 %v3_c4f4 to i8*
  store i8 %v1_c4f4, i8* %v4_c4f4, align 1
  %v0_c4f8 = load i32, i32* @r4, align 4
  %v1_c4f8 = add i32 %v0_c4f8, 40
  store i32 %v1_c4f8, i32* %r0.global-to-local, align 4
  %v0_c4fc = load i32, i32* @sb, align 4
  store i32 %v0_c4fc, i32* @r1, align 4
  %v1_c500 = inttoptr i32 %v1_c4f8 to i8*
  %v2_c500 = call i32 @function_f5e8(i8* %v1_c500)
  store i32 %v2_c500, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c504

dec_label_pc_c504:                                ; preds = %dec_label_pc_c078, %dec_label_pc_c284, %bb97
  %v3_c504 = load i32, i32* %stack_var_-40, align 4
  %v1_c508 = add i32 %v3_c504, 1
  store i32 %v1_c508, i32* %r3.global-to-local, align 4
  %v1_c50c = load i32, i32* @fp, align 4
  %v9_c50c = icmp eq i32 %v1_c508, %v1_c50c
  store i1 %v9_c50c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c508, i32* %stack_var_-40, align 4
  %v5_c514 = icmp slt i32 %v1_c508, %v1_c50c
  br i1 %v5_c514, label %dec_label_pc_c078, label %dec_label_pc_c518

dec_label_pc_c518:                                ; preds = %dec_label_pc_c504, %.thread27
  %v0_c52021 = phi i32 [ %v0_c04c, %.thread27 ], [ %v1_c50c, %dec_label_pc_c504 ]
  %v0_c518 = load i32, i32* @sb, align 4
  %v1_c518 = add i32 %v0_c518, 40
  store i32 %v1_c518, i32* @sl, align 4
  %v1_c51c = add i32 %v0_c518, 20
  store i32 %v1_c51c, i32* @r7, align 4
  %v2_c698 = icmp eq i32 %v1_bffc, 0
  %v3_c554 = icmp eq i32 %v3_c054, 65535
  br label %dec_label_pc_c520

dec_label_pc_c520:                                ; preds = %dec_label_pc_c57c, %dec_label_pc_c518
  %v0_c520 = phi i32 [ %v1_c65c, %dec_label_pc_c57c ], [ %v0_c52021, %dec_label_pc_c518 ]
  %v2_c520 = icmp eq i32 %v0_c520, 0
  store i1 %v2_c520, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp98 = icmp slt i32 %v0_c520, 1
  br label %dec_label_pc_c528

dec_label_pc_c528:                                ; preds = %dec_label_pc_c528, %dec_label_pc_c520
  br i1 %tmp98, label %dec_label_pc_c528, label %dec_label_pc_c52c

dec_label_pc_c52c:                                ; preds = %dec_label_pc_c528
  %v0_c52c = load i32, i32* @r7, align 4
  %tmp99 = mul i32 %v0_c52c, 256
  %v1_c534 = and i32 %tmp99, 65280
  %tmp100 = udiv i32 %v0_c52c, 256
  %v4_c538 = urem i32 %tmp100, 256
  %v5_c538 = or i32 %v4_c538, %v1_c534
  store i32 %v5_c538, i32* @r8, align 4
  store i32 %v4_be6c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_c054, i32* %ip.global-to-local, align 4
  %v7_c54c = load i32, i32* %v2_be6c, align 4
  store i32 %v7_c54c, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c554, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_c560 = add i32 %v7_c54c, 20
  store i32 %v1_c560, i32* @r5, align 4
  br i1 %v3_c554, label %dec_label_pc_c688, label %dec_label_pc_c568

dec_label_pc_c568:                                ; preds = %dec_label_pc_c668, %dec_label_pc_c52c
  %v0_c574 = phi i32 [ %v7_c674, %dec_label_pc_c668 ], [ %v7_c54c, %dec_label_pc_c52c ]
  store i1 %v2_c698, i1* %cpsr_z.global-to-local, align 1
  %v0_c570 = load i32, i32* @sb, align 4
  store i32 %v0_c570, i32* @r1, align 4
  %v1_c574 = add i32 %v0_c574, 40
  store i32 %v1_c574, i32* %r0.global-to-local, align 4
  br i1 %v2_c698, label %dec_label_pc_c57c, label %dec_label_pc_c6ac

dec_label_pc_c57c:                                ; preds = %dec_label_pc_c568, %dec_label_pc_c688, %dec_label_pc_c6ac
  %v2_c57c = phi i32 [ %v0_c574, %dec_label_pc_c568 ], [ %v0_c6a0, %dec_label_pc_c688 ], [ %v2_c57c.pre, %dec_label_pc_c6ac ]
  %v0_c57c = load i32, i32* @r6, align 4
  %v1_c57c = trunc i32 %v0_c57c to i8
  %v3_c57c = add i32 %v2_c57c, 10
  %v4_c57c = inttoptr i32 %v3_c57c to i8*
  store i8 %v1_c57c, i8* %v4_c57c, align 1
  %v0_c580 = load i32, i32* @r6, align 4
  %v1_c580 = trunc i32 %v0_c580 to i8
  %v2_c580 = load i32, i32* @r4, align 4
  %v3_c580 = add i32 %v2_c580, 11
  %v4_c580 = inttoptr i32 %v3_c580 to i8*
  store i8 %v1_c580, i8* %v4_c580, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c588 = load i32, i32* @r4, align 4
  store i32 %v0_c588, i32* @r0, align 4
  %v2_c58c = call i32 @function_ddf4(i32 %v0_c588, i32 20)
  %v3_c58c = trunc i32 %v2_c58c to i8
  store i32 %v2_c58c, i32* %r0.global-to-local, align 4
  %v3_c590 = load i32, i32* %stack_var_-40, align 4
  store i32 %v4_be5c, i32* %r2.global-to-local, align 4
  %v3_c598 = mul i32 %v3_c590, 16
  %v2_c59c = add i32 %v3_c598, %v4_be5c
  store i32 %v2_c59c, i32* %r1.global-to-local, align 4
  %v1_c5a0 = add i32 %v2_c59c, 4
  %v2_c5a0 = inttoptr i32 %v1_c5a0 to i32*
  %v3_c5a0 = load i32, i32* %v2_c5a0, align 4
  %v3_c5a4 = mul i32 %v3_c5a0, 65536
  store i32 %v3_c5a4, i32* %ip.global-to-local, align 4
  %tmp101 = mul i32 %v3_c5a0, 256
  %v1_c5ac = and i32 %tmp101, 65280
  %tmp102 = udiv i32 %v3_c5a0, 256
  %v4_c5b0 = urem i32 %tmp102, 256
  %v5_c5b0 = or i32 %v4_c5b0, %v1_c5ac
  store i32 %v5_c5b0, i32* %r2.global-to-local, align 4
  %v1_c5b4 = add i32 %v3_c5a0, 1
  store i32 %v1_c5b4, i32* %r3.global-to-local, align 4
  store i32 %v1_c5b4, i32* %v2_c5a0, align 4
  %v0_c5bc = load i32, i32* %r2.global-to-local, align 4
  %v1_c5bc = load i32, i32* @r5, align 4
  %v2_c5bc = add i32 %v1_c5bc, 4
  %v3_c5bc = inttoptr i32 %v2_c5bc to i32*
  store i32 %v0_c5bc, i32* %v3_c5bc, align 4
  %v0_c5c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c5c0 = add i32 %v0_c5c0, 8
  %v2_c5c0 = inttoptr i32 %v1_c5c0 to i32*
  %v3_c5c0 = load i32, i32* %v2_c5c0, align 4
  %tmp103 = mul i32 %v3_c5c0, 256
  %v1_c5cc = and i32 %tmp103, 65280
  %tmp104 = udiv i32 %v3_c5c0, 256
  %v4_c5d0 = urem i32 %tmp104, 256
  %v5_c5d0 = or i32 %v4_c5d0, %v1_c5cc
  store i32 %v5_c5d0, i32* %r2.global-to-local, align 4
  %v4_c5d438 = udiv i32 %v2_c58c, 256
  %v1_c5d8 = trunc i32 %v4_c5d438 to i8
  %v2_c5d8 = load i32, i32* @r4, align 4
  %v3_c5d8 = add i32 %v2_c5d8, 11
  %v4_c5d8 = inttoptr i32 %v3_c5d8 to i8*
  store i8 %v1_c5d8, i8* %v4_c5d8, align 1
  %v3_c5dc = load i32, i32* @r4, align 4
  %v4_c5dc = add i32 %v3_c5dc, 10
  %v5_c5dc = inttoptr i32 %v4_c5dc to i8*
  store i8 %v3_c58c, i8* %v5_c5dc, align 1
  %v0_c5e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c5e0 = load i32, i32* @r5, align 4
  %v2_c5e0 = add i32 %v1_c5e0, 8
  %v3_c5e0 = inttoptr i32 %v2_c5e0 to i32*
  store i32 %v0_c5e0, i32* %v3_c5e0, align 4
  %v0_c5e4 = load i32, i32* @r5, align 4
  store i32 %v0_c5e4, i32* @r1, align 4
  %v0_c5e8 = load i32, i32* @r8, align 4
  store i32 %v0_c5e8, i32* %r2.global-to-local, align 4
  %v0_c5ec = load i32, i32* @r7, align 4
  store i32 %v0_c5ec, i32* %r3.global-to-local, align 4
  %v0_c5f0 = load i32, i32* @r4, align 4
  store i32 %v0_c5f0, i32* %r0.global-to-local, align 4
  %v0_c5f4 = load i32, i32* @r6, align 4
  %v1_c5f4 = trunc i32 %v0_c5f4 to i8
  %v3_c5f4 = add i32 %v0_c5e4, 16
  %v4_c5f4 = inttoptr i32 %v3_c5f4 to i8*
  store i8 %v1_c5f4, i8* %v4_c5f4, align 1
  %v0_c5f8 = load i32, i32* @r6, align 4
  %v1_c5f8 = trunc i32 %v0_c5f8 to i8
  %v2_c5f8 = load i32, i32* @r5, align 4
  %v3_c5f8 = add i32 %v2_c5f8, 17
  %v4_c5f8 = inttoptr i32 %v3_c5f8 to i8*
  store i8 %v1_c5f8, i8* %v4_c5f8, align 1
  %v4_c5fc = call i32 @function_de50(i32 %v0_c5f0, i32 %v0_c5e4, i32 %v0_c5e8, i32 %v0_c5ec)
  %v5_c5fc = trunc i32 %v4_c5fc to i8
  store i32 %v4_c5fc, i32* %r0.global-to-local, align 4
  %v4_c60039 = udiv i32 %v4_c5fc, 256
  %v1_c604 = trunc i32 %v4_c60039 to i8
  %v2_c604 = load i32, i32* @r5, align 4
  %v3_c604 = add i32 %v2_c604, 17
  %v4_c604 = inttoptr i32 %v3_c604 to i8*
  store i8 %v1_c604, i8* %v4_c604, align 1
  %v3_c608 = load i32, i32* @r5, align 4
  %v4_c608 = add i32 %v3_c608, 16
  %v5_c608 = inttoptr i32 %v4_c608 to i8*
  store i8 %v5_c5fc, i8* %v5_c608, align 1
  %v3_c60c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c60c, i32* %r3.global-to-local, align 4
  %v0_c610 = load i32, i32* @r4, align 4
  %v1_c610 = add i32 %v0_c610, 20
  %v2_c610 = inttoptr i32 %v1_c610 to i32*
  %v3_c610 = load i32, i32* %v2_c610, align 4
  %v5_c618 = mul i32 %v3_c60c, 24
  %v3_c620 = udiv i32 %v3_c610, 65536
  store i32 %v3_c620, i32* %r2.global-to-local, align 4
  %v2_c624 = add i32 %v5_c618, %arg2
  store i32 %v2_c624, i32* %ip.global-to-local, align 4
  %v3_c6287 = udiv i32 %v3_c610, 16777216
  %v1_c62c = trunc i32 %v3_c6287 to i8
  %v3_c62c = add i32 %v2_c624, 3
  %v4_c62c = inttoptr i32 %v3_c62c to i8*
  store i8 %v1_c62c, i8* %v4_c62c, align 1
  %v0_c630 = load i32, i32* %r2.global-to-local, align 4
  %v1_c630 = trunc i32 %v0_c630 to i8
  %v2_c630 = load i32, i32* %ip.global-to-local, align 4
  %v3_c630 = add i32 %v2_c630, 2
  %v4_c630 = inttoptr i32 %v3_c630 to i8*
  store i8 %v1_c630, i8* %v4_c630, align 1
  %v0_c634 = load i32, i32* @r4, align 4
  store i32 %v0_c634, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c00c, i32* %r0.global-to-local, align 4
  %v0_c640 = load i32, i32* @sl, align 4
  store i32 %v0_c640, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_c648 = load i32, i32* %ip.global-to-local, align 4
  %v4_c648 = inttoptr i32 %v0_c648 to %sockaddr*
  %v7_c650 = inttoptr i32 %v0_c634 to i32*
  %v9_c650 = call i32 @sendto(i32 %v3_c00c, i32* %v7_c650, i32 %v0_c640, i32 16384, %sockaddr* %v4_c648, i32 16)
  %v3_c654 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c654, i32* %r3.global-to-local, align 4
  %v1_c658 = add i32 %v3_c654, 1
  store i32 %v1_c658, i32* %r0.global-to-local, align 4
  %v1_c65c = load i32, i32* @fp, align 4
  %v9_c65c = icmp eq i32 %v1_c658, %v1_c65c
  store i1 %v9_c65c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c658, i32* %stack_var_-40, align 4
  %v6_c664 = icmp slt i32 %v1_c658, %v1_c65c
  br i1 %v6_c664, label %dec_label_pc_c668, label %dec_label_pc_c520

dec_label_pc_c668:                                ; preds = %dec_label_pc_c57c
  store i32 %v4_be6c, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_c054, i32* %ip.global-to-local, align 4
  %v4_c674 = mul i32 %v1_c658, 4
  %v5_c674 = add i32 %v4_c674, %v4_be6c
  %v6_c674 = inttoptr i32 %v5_c674 to i32*
  %v7_c674 = load i32, i32* %v6_c674, align 4
  store i32 %v7_c674, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c554, i1* %cpsr_z.global-to-local, align 1
  %v1_c680 = add i32 %v7_c674, 20
  store i32 %v1_c680, i32* @r5, align 4
  br i1 %v3_c554, label %dec_label_pc_c688, label %dec_label_pc_c568

dec_label_pc_c688:                                ; preds = %dec_label_pc_c668, %dec_label_pc_c52c
  %v0_c688 = call i32 @function_f468()
  %v1_c688 = trunc i32 %v0_c688 to i8
  %v4_c68c = sdiv i32 %v0_c688, 256
  store i32 %v4_c68c, i32* %r3.global-to-local, align 4
  %v3_c690 = load i32, i32* @r4, align 4
  %v4_c690 = add i32 %v3_c690, 4
  %v5_c690 = inttoptr i32 %v4_c690 to i8*
  store i8 %v1_c688, i8* %v5_c690, align 1
  store i1 %v2_c698, i1* %cpsr_z.global-to-local, align 1
  %v0_c69c = load i32, i32* %r3.global-to-local, align 4
  %v1_c69c = trunc i32 %v0_c69c to i8
  %v2_c69c = load i32, i32* @r4, align 4
  %v3_c69c = add i32 %v2_c69c, 5
  %v4_c69c = inttoptr i32 %v3_c69c to i8*
  store i8 %v1_c69c, i8* %v4_c69c, align 1
  %v0_c6a0 = load i32, i32* @r4, align 4
  %v1_c6a0 = add i32 %v0_c6a0, 40
  store i32 %v1_c6a0, i32* %r0.global-to-local, align 4
  %v0_c6a4 = load i32, i32* @sb, align 4
  store i32 %v0_c6a4, i32* @r1, align 4
  %v0_c6a8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c6a8, label %dec_label_pc_c57c, label %dec_label_pc_c6ac

dec_label_pc_c6ac:                                ; preds = %dec_label_pc_c568, %dec_label_pc_c688
  %v0_c6ac = phi i32 [ %v1_c574, %dec_label_pc_c568 ], [ %v1_c6a0, %dec_label_pc_c688 ]
  %v1_c6ac = inttoptr i32 %v0_c6ac to i8*
  %v2_c6ac = call i32 @function_f5e8(i8* %v1_c6ac)
  store i32 %v2_c6ac, i32* %r0.global-to-local, align 4
  %v2_c57c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c57c

; uselistorder directives
  uselistorder i32 %v0_c6a0, { 1, 0 }
  uselistorder i32 %v7_c674, { 1, 2, 0 }
  uselistorder i32 %v1_c65c, { 1, 2, 0 }
  uselistorder i32 %v1_c658, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_c5fc, { 0, 2, 1 }
  uselistorder i32 %v0_c5e4, { 1, 0, 2 }
  uselistorder i32 %v3_c5c0, { 1, 0 }
  uselistorder i32 %v3_c5a0, { 3, 2, 0, 1 }
  uselistorder i32 %v2_c58c, { 0, 2, 1 }
  uselistorder i32 %v0_c574, { 1, 0 }
  uselistorder i32 %v0_c52c, { 1, 0 }
  uselistorder i32 %v0_c520, { 1, 0 }
  uselistorder i1 %v3_c554, { 2, 3, 1, 0 }
  uselistorder i1 %v2_c698, { 2, 1, 0 }
  uselistorder i32 %v1_c508, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c45c, { 0, 2, 1 }
  uselistorder i32 %v3_c43c, { 1, 0 }
  uselistorder i32 %v0_c410, { 1, 0, 2 }
  uselistorder i32 %v3_c404, { 1, 0 }
  uselistorder i32 %v1_c368, { 1, 0 }
  uselistorder i32 %v0_c35c, { 1, 2, 0 }
  uselistorder i32 %v3_c320, { 1, 0 }
  uselistorder i32 %v2_c30c, { 1, 0 }
  uselistorder i32 %v3_c2f0, { 1, 0, 2, 3 }
  uselistorder i32 %v2_c2e8, { 1, 0 }
  uselistorder i32 %v3_c2c4, { 1, 0, 2 }
  uselistorder i32 %v3_c2bc, { 1, 0 }
  uselistorder i32 %v4_c2a4, { 1, 0 }
  uselistorder i32 %v0_c2a0, { 0, 2, 1 }
  uselistorder i32 %v3_c0a0, { 1, 2, 3, 0 }
  uselistorder i32 %v5_c254, { 1, 0 }
  uselistorder i1 %v9_c238, { 1, 0 }
  uselistorder i32 %v4_c24c, { 1, 0 }
  uselistorder i32 %v4_c248, { 1, 0 }
  uselistorder i32 %storemerge35, { 0, 2, 1 }
  uselistorder i32 %v8_c140, { 1, 2, 0, 3 }
  uselistorder i32 %v3_c12c, { 1, 0 }
  uselistorder i32 %v7_c0f8, { 4, 1, 3, 0, 2, 5 }
  uselistorder i32 %v1_c4c8, { 1, 0 }
  uselistorder i32 %v1_c4b0, { 1, 0 }
  uselistorder i32 %v1_c498, { 1, 0 }
  uselistorder i32 %v1_c480, { 1, 0 }
  uselistorder i32 %v1_c468, { 1, 0 }
  uselistorder i32 %v5_c250, { 1, 0 }
  uselistorder i32 %v3_c188113, { 1, 0 }
  uselistorder i1 %v2_c268, { 1, 0 }
  uselistorder i32 %v1_c264, { 1, 0 }
  uselistorder i32 %v4_c260, { 2, 0, 1 }
  uselistorder i32 %v4_c244, { 1, 0 }
  uselistorder i1 %v3_c170, { 1, 0 }
  uselistorder i32 %v1_c084, { 2, 1, 0 }
  uselistorder i32 %v8_c060, { 2, 1, 0 }
  uselistorder i32 %v8_c05c, { 1, 2, 0 }
  uselistorder i32 %v3_c054, { 1, 2, 3, 0 }
  uselistorder i32 %v0_c050, { 1, 0, 3, 2 }
  uselistorder i32 %v3_c010, { 2, 3, 0, 1 }
  uselistorder i32 %v3_c00c, { 3, 4, 1, 2, 5, 6, 0, 7, 8 }
  uselistorder i32 %v1_bffc, { 1, 0 }
  uselistorder i32 %v1_bfa4, { 1, 0 }
  uselistorder i32 %v1_bf84, { 1, 0 }
  uselistorder i32 %v1_bf64, { 1, 0 }
  uselistorder i32 %v1_bf44, { 1, 0 }
  uselistorder i32 %v1_bf24, { 1, 0 }
  uselistorder i32 %v1_beec, { 1, 0 }
  uselistorder i32 %v4_be6c, { 0, 3, 4, 1, 2 }
  uselistorder i32 %v4_be5c, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_be40, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 50, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 67, 51, 52, 53, 54, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 31, 20, 21, 27, 22, 23, 24, 25, 26, 28, 29, 30, 50, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 46, 45, 47, 49, 48, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 20, 12, 13, 14, 15, 16, 17, 18, 19, 24, 21, 22, 23, 25, 27, 26, 45, 42, 28, 31, 29, 32, 33, 30, 35, 34, 36, 37, 38, 40, 39, 41, 65, 64, 43, 44, 46, 48, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 23, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 27, 24, 25, 26 }
  uselistorder label %dec_label_pc_c6ac, { 1, 0 }
  uselistorder label %dec_label_pc_c57c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c504, { 2, 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %.thread10, { 2, 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %dec_label_pc_c298, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c1d0, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_c164, { 1, 0 }
  uselistorder label %dec_label_pc_c0b0, { 1, 0 }
}

define i32 @function_c6b8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c6b8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp40 = call i8 @__decompiler_undefined_function_1()
  %tmp41 = call i8 @__decompiler_undefined_function_1()
  %tmp42 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_c6b8 = load i32, i32* @r4, align 4
  %v1_c6bc = urem i32 %arg1, 256
  store i32 %v1_c6bc, i32* @fp, align 4
  store i32 %v1_c6bc, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c6d4 = urem i32 %arg3, 256
  store i32 %v1_c6d4, i32* @r4, align 4
  %v2_c6d8 = call i32* @calloc(i32 %v1_c6bc, i32 16)
  %v4_c6d8 = ptrtoint i32* %v2_c6d8 to i32
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_c6e4 = load i32, i32* @fp, align 4
  store i32 %v0_c6e4, i32* %r0.global-to-local, align 4
  %v2_c6e8 = call i32* @calloc(i32 %v0_c6e4, i32 4)
  %v4_c6e8 = ptrtoint i32* %v2_c6e8 to i32
  %v0_c6ec = load i32, i32* @r5, align 4
  store i32 %v0_c6ec, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c6fc = load i32, i32* @r4, align 4
  store i32 %v0_c6fc, i32* %r0.global-to-local, align 4
  %v5_c700 = inttoptr i32 %v0_c6ec to i32*
  %v6_c700 = call i32 @function_92dc(i32 %v0_c6fc, i32* %v5_c700, i32 2, i32 0)
  %v1_c70c = urem i32 %v6_c700, 256
  store i32 %v1_c70c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c718 = load i32, i32* @r5, align 4
  store i32 %v0_c718, i32* %r1.global-to-local, align 4
  %v0_c71c = load i32, i32* @r4, align 4
  store i32 %v0_c71c, i32* %r0.global-to-local, align 4
  %v6_c724 = inttoptr i32 %v0_c718 to i32*
  %v7_c724 = call i32 @function_92dc(i32 %v0_c71c, i32* %v6_c724, i32 3, i32 65535)
  %v0_c728 = load i32, i32* @r5, align 4
  store i32 %v0_c728, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_c724, i32* @r6, align 4
  %v0_c738 = load i32, i32* @r4, align 4
  store i32 %v0_c738, i32* %r0.global-to-local, align 4
  %v4_c73c = inttoptr i32 %v0_c728 to i32*
  %v5_c73c = call i32 @function_92dc(i32 %v0_c738, i32* %v4_c73c, i32 4, i32 64)
  %v1_c744 = urem i32 %v5_c73c, 256
  store i32 %v1_c744, i32* %ip.global-to-local, align 4
  %v0_c748 = load i32, i32* @r5, align 4
  store i32 %v0_c748, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c754 = load i32, i32* @r4, align 4
  store i32 %v0_c754, i32* %r0.global-to-local, align 4
  %v6_c75c = inttoptr i32 %v0_c748 to i32*
  %v7_c75c = call i32 @function_92dc(i32 %v0_c754, i32* %v6_c75c, i32 5, i32 1)
  %v1_c768 = urem i32 %v7_c75c, 256
  store i32 %v1_c768, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_c770 = load i32, i32* @r5, align 4
  store i32 %v0_c770, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c778 = load i32, i32* @r4, align 4
  store i32 %v0_c778, i32* %r0.global-to-local, align 4
  %v5_c780 = inttoptr i32 %v0_c770 to i32*
  %v6_c780 = call i32 @function_92dc(i32 %v0_c778, i32* %v5_c780, i32 7, i32 65535)
  %v0_c784 = load i32, i32* @r5, align 4
  store i32 %v0_c784, i32* %r1.global-to-local, align 4
  %v3_c788 = mul i32 %v6_c780, 65536
  store i32 %v3_c788, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c794 = load i32, i32* @r4, align 4
  store i32 %v0_c794, i32* %r0.global-to-local, align 4
  %v4_c798 = inttoptr i32 %v0_c784 to i32*
  %v5_c798 = call i32 @function_92dc(i32 %v0_c794, i32* %v4_c798, i32 11, i32 0)
  %v1_c7a0 = urem i32 %v5_c798, 256
  store i32 %v1_c7a0, i32* %ip.global-to-local, align 4
  %v0_c7a4 = load i32, i32* @r5, align 4
  store i32 %v0_c7a4, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c7b0 = load i32, i32* @r4, align 4
  store i32 %v0_c7b0, i32* %r0.global-to-local, align 4
  %v5_c7b8 = inttoptr i32 %v0_c7a4 to i32*
  %v6_c7b8 = call i32 @function_92dc(i32 %v0_c7b0, i32* %v5_c7b8, i32 12, i32 1)
  %v1_c7c0 = urem i32 %v6_c7b8, 256
  store i32 %v1_c7c0, i32* %ip.global-to-local, align 4
  %v0_c7c4 = load i32, i32* @r5, align 4
  store i32 %v0_c7c4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c7d0 = load i32, i32* @r4, align 4
  store i32 %v0_c7d0, i32* %r0.global-to-local, align 4
  %v5_c7d8 = inttoptr i32 %v0_c7c4 to i32*
  %v6_c7d8 = call i32 @function_92dc(i32 %v0_c7d0, i32* %v5_c7d8, i32 13, i32 1)
  %v1_c7e0 = urem i32 %v6_c7d8, 256
  store i32 %v1_c7e0, i32* %ip.global-to-local, align 4
  %v0_c7e4 = load i32, i32* @r5, align 4
  store i32 %v0_c7e4, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c7f0 = load i32, i32* @r4, align 4
  store i32 %v0_c7f0, i32* %r0.global-to-local, align 4
  %v5_c7f8 = inttoptr i32 %v0_c7e4 to i32*
  %v6_c7f8 = call i32 @function_92dc(i32 %v0_c7f0, i32* %v5_c7f8, i32 14, i32 0)
  %v1_c800 = urem i32 %v6_c7f8, 256
  store i32 %v1_c800, i32* %ip.global-to-local, align 4
  %v0_c804 = load i32, i32* @r5, align 4
  store i32 %v0_c804, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c810 = load i32, i32* @r4, align 4
  store i32 %v0_c810, i32* %r0.global-to-local, align 4
  %v5_c818 = inttoptr i32 %v0_c804 to i32*
  %v6_c818 = call i32 @function_92dc(i32 %v0_c810, i32* %v5_c818, i32 15, i32 0)
  %v1_c820 = urem i32 %v6_c818, 256
  store i32 %v1_c820, i32* %ip.global-to-local, align 4
  %v0_c824 = load i32, i32* @r5, align 4
  store i32 %v0_c824, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c830 = load i32, i32* @r4, align 4
  store i32 %v0_c830, i32* %r0.global-to-local, align 4
  %v5_c838 = inttoptr i32 %v0_c824 to i32*
  %v6_c838 = call i32 @function_92dc(i32 %v0_c830, i32* %v5_c838, i32 16, i32 0)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_c838, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_c848 = load i32, i32* @r5, align 4
  store i32 %v0_c848, i32* %r1.global-to-local, align 4
  %v0_c84c = load i32, i32* @r4, align 4
  store i32 %v0_c84c, i32* %r0.global-to-local, align 4
  %v1_c850 = urem i32 %v6_c838, 256
  store i32 %v1_c850, i32* @r8, align 4
  %v4_c854 = inttoptr i32 %v0_c848 to i32*
  %v5_c854 = call i32 @function_92dc(i32 %v0_c84c, i32* %v4_c854, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c860 = load i32, i32* @r5, align 4
  store i32 %v0_c860, i32* %r1.global-to-local, align 4
  store i32 %v5_c854, i32* @sb, align 4
  %v0_c868 = load i32, i32* @r4, align 4
  store i32 %v0_c868, i32* %r0.global-to-local, align 4
  %v4_c86c = inttoptr i32 %v0_c860 to i32*
  %v5_c86c = call i32 @function_92dc(i32 %v0_c868, i32* %v4_c86c, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_c878 = urem i32 %v5_c86c, 256
  store i32 %v1_c878, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c888 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_c888, i32* %r0.global-to-local, align 4
  %v0_c88c = load i32, i32* @r7, align 4
  %v3_c88c = udiv i32 %v0_c88c, 65536
  store i32 %v3_c88c, i32* %r1.global-to-local, align 4
  %v2_c890 = icmp eq i32 %v3_c888, -1
  store i1 %v2_c890, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c890, label %dec_label_pc_cb14, label %dec_label_pc_c8a0

dec_label_pc_c8a0:                                ; preds = %dec_label_pc_c6b8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c8a8 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c8a8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_c8bc = call i32 @setsockopt(i32 %v3_c888, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_c8bc, i32* %r0.global-to-local, align 4
  %v2_c8c0 = icmp eq i32 %v7_c8bc, -1
  store i1 %v2_c8c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c8c0, label %dec_label_pc_cb0c, label %dec_label_pc_c8c8

dec_label_pc_c8c8:                                ; preds = %dec_label_pc_c8a0
  %v0_c8c8 = load i32, i32* @fp, align 4
  %v2_c8c8 = icmp eq i32 %v0_c8c8, 0
  store i1 %v2_c8c8, i1* %cpsr_z.global-to-local, align 1
  %v0_c8cc = load i32, i32* @r6, align 4
  %v3_c8cc = mul i32 %v0_c8cc, 65536
  store i32 %v3_c8cc, i32* %r0.global-to-local, align 4
  %v3_c8d0 = urem i32 %v0_c8cc, 65536
  store i32 %v3_c8d0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp85 = icmp slt i32 %v0_c8c8, 1
  br i1 %tmp85, label %.thread27, label %dec_label_pc_c8f4.preheader

.thread27:                                        ; preds = %dec_label_pc_c8c8
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_cd94

dec_label_pc_c8f4.preheader:                      ; preds = %dec_label_pc_c8c8
  %v5_c8d8 = load i32, i32* @r7, align 4
  %v8_c8d8 = udiv i32 %v5_c8d8, 16777216
  %tmp86 = udiv i32 %v0_c8cc, 256
  %v8_c8dc = urem i32 %tmp86, 256
  store i32 %v8_c8dc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v1_c900 = urem i32 %v0_c8cc, 256
  %v3_c9ec = icmp ugt i32 %v0_c88c, -65537
  %v2_ca10 = ptrtoint i32* %stack_var_-60 to i32
  %tmp87 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v4_ca2c = mul nuw nsw i32 %v1_c900, 256
  %v5_ca2c = or i32 %v8_c8dc, %v4_ca2c
  %sext11 = mul i32 %tmp86, 16777216
  %v4_ca38 = sdiv i32 %sext11, 16777216
  %v3_ca40 = ashr i32 %sext11, 31
  %tmp88 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v2_ca70 = ptrtoint i32* %stack_var_-332 to i32
  %v2_ca74 = ptrtoint i32* %stack_var_-44 to i32
  %v4_cabc = zext i8 %tmp41 to i32
  %v4_cac0 = zext i8 %tmp40 to i32
  %v4_cacc = mul nuw nsw i32 %v4_cac0, 256
  %v4_cadc = zext i8 %tmp to i32
  %v1_cae0 = and i32 %v4_cadc, 18
  %v2_cae4 = icmp eq i32 %v1_cae0, 18
  %v1_c9fc = mul nuw nsw i32 %v3_c88c, 256
  %v4_ca00 = and i32 %v1_c9fc, 65280
  %v5_ca00 = or i32 %v8_c8d8, %v4_ca00
  %v3_ca04113 = udiv i32 %v4_ca00, 256
  %v1_ca08 = trunc i32 %v3_ca04113 to i8
  %sext = mul i32 %v6_c700, 16777216
  %v4_cc08 = sdiv i32 %sext, 16777216
  %sext9 = mul i32 %v5_c73c, 16777216
  %v4_cc1c = sdiv i32 %sext9, 16777216
  %v5_cacc = or i32 %v4_cabc, %v4_cacc
  %v1_caec = and i32 %v4_cadc, 5
  %v2_caec = icmp eq i32 %v1_caec, 0
  %v1_ca0c = trunc i32 %v8_c8d8 to i8
  %v1_cc18 = trunc i32 %v4_cc08 to i8
  %v1_cce4 = urem i32 %v5_c798, 2
  %tmp114 = sub nsw i32 0, %v1_cce4
  %v4_ccec = and i32 %tmp114, 32
  %v1_ccfc = urem i32 %v6_c7b8, 2
  %tmp115 = sub nsw i32 0, %v1_ccfc
  %v4_cd04 = and i32 %tmp115, 16
  %v1_cd14 = urem i32 %v6_c7d8, 2
  %tmp116 = sub nsw i32 0, %v1_cd14
  %v4_cd1c = and i32 %tmp116, 8
  %v1_cd2c = urem i32 %v6_c7f8, 2
  %tmp117 = sub nsw i32 0, %v1_cd2c
  %v4_cd34 = and i32 %tmp117, 4
  %v1_cd44 = urem i32 %v6_c818, 2
  %tmp118 = sub nsw i32 0, %v1_cd44
  %v3_cd4c = and i32 %tmp118, 2
  br label %dec_label_pc_c8f4

dec_label_pc_c8f4:                                ; preds = %dec_label_pc_cd80, %dec_label_pc_caf4, %dec_label_pc_c8f4.preheader
  store i32 %v8_c8dc, i32* %r3.global-to-local, align 4
  store i32 %v1_c900, i32* %ip.global-to-local, align 4
  %v0_c90c = load i32, i32* @sb, align 4
  %v1_c90c = add i32 %v0_c90c, 40
  store i32 %v1_c90c, i32* @sl, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c91c107 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_c91c107, i32* %r0.global-to-local, align 4
  %v2_c920108 = icmp eq i32 %v3_c91c107, -1
  store i1 %v2_c920108, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c91c107, i32* @r7, align 4
  br i1 %v2_c920108, label %dec_label_pc_cd80, label %dec_label_pc_c92c

dec_label_pc_c92c:                                ; preds = %dec_label_pc_c8f4, %dec_label_pc_cb00
  %v3_c91c109 = phi i32 [ %v3_c91c, %dec_label_pc_cb00 ], [ %v3_c91c107, %dec_label_pc_c8f4 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c934 = call i32 (i32, i32, ...) @fcntl(i32 %v3_c91c109, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_c93c = or i32 %v2_c934, 2048
  store i32 %v1_c93c, i32* %r2.global-to-local, align 4
  %v0_c940 = load i32, i32* @r7, align 4
  store i32 %v0_c940, i32* %r0.global-to-local, align 4
  %v2_c944 = call i32 (i32, i32, ...) @fcntl(i32 %v0_c940, i32 4)
  %v3_c948 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c948, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v5_c964 = mul i32 %v3_c948, 24
  store i32 %v5_c964, i32* %r1.global-to-local, align 4
  %v2_c968 = add i32 %v5_c964, %arg2
  store i32 %v2_c968, i32* %r2.global-to-local, align 4
  %v1_c96c = add i32 %v2_c968, 20
  %v2_c96c = inttoptr i32 %v1_c96c to i8*
  %v3_c96c = load i8, i8* %v2_c96c, align 1
  %v4_c96c = zext i8 %v3_c96c to i32
  store i32 %v4_c96c, i32* %r3.global-to-local, align 4
  %v2_c970 = icmp ugt i8 %v3_c96c, 30
  %v7_c970 = icmp eq i8 %v3_c96c, 31
  store i1 %v7_c970, i1* %cpsr_z.global-to-local, align 1
  %v2_c974 = xor i1 %v7_c970, true
  %v3_c974 = and i1 %v2_c970, %v2_c974
  %v5_c974 = add i32 %v2_c968, 16
  %v6_c974 = inttoptr i32 %v5_c974 to i32*
  %v7_c974 = load i32, i32* %v6_c974, align 4
  br i1 %v3_c974, label %dec_label_pc_c9e0, label %dec_label_pc_c980

dec_label_pc_c980:                                ; preds = %dec_label_pc_c92c
  store i32 %v7_c974, i32* %r4.global-to-local, align 4
  %v0_c984 = call i32 @function_f468()
  store i32 %v0_c984, i32* %r0.global-to-local, align 4
  %v3_c988 = load i32, i32* %stack_var_-40, align 4
  %v5_c990 = mul i32 %v3_c988, 24
  %v2_c99c = add i32 %v5_c990, %arg2
  store i32 %v2_c99c, i32* %r1.global-to-local, align 4
  %v1_c998 = udiv i32 %v7_c974, 256
  %v3_c9a0 = and i32 %v1_c998, 65280
  store i32 %v3_c9a0, i32* %r2.global-to-local, align 4
  %v1_c9a4 = and i32 %v7_c974, 65280
  store i32 %v1_c9a4, i32* %r3.global-to-local, align 4
  %v3_c9a8 = mul i32 %v7_c974, 16777216
  store i32 %v3_c9a8, i32* %ip.global-to-local, align 4
  %v1_c9ac = add i32 %v2_c99c, 20
  %v2_c9ac = inttoptr i32 %v1_c9ac to i8*
  %v3_c9ac = load i8, i8* %v2_c9ac, align 1
  %v4_c9ac = zext i8 %v3_c9ac to i32
  store i32 %v4_c9ac, i32* %lr.global-to-local, align 4
  %v4_c9b0 = mul nuw nsw i32 %v1_c9a4, 256
  %v5_c9b0 = or i32 %v4_c9b0, %v3_c9a8
  store i32 %v5_c9b0, i32* %ip.global-to-local, align 4
  %v2_c9b8 = call i32 @llvm.bswap.i32(i32 %v7_c974)
  %v7_c9bc = lshr i32 %v0_c984, %v4_c9ac
  %v8_c9bc = add i32 %v7_c9bc, %v2_c9b8
  store i32 %v8_c9bc, i32* %r2.global-to-local, align 4
  %v3_c9c8 = mul i32 %v8_c9bc, 16777216
  %v1_c9cc = and i32 %v8_c9bc, 65280
  store i32 %v1_c9cc, i32* %r0.global-to-local, align 4
  %v4_c9d0 = mul nuw nsw i32 %v1_c9cc, 256
  %v5_c9d0 = or i32 %v4_c9d0, %v3_c9c8
  store i32 %v5_c9d0, i32* %r1.global-to-local, align 4
  %v2_c9d8 = call i32 @llvm.bswap.i32(i32 %v8_c9bc)
  br label %dec_label_pc_c9e0

dec_label_pc_c9e0:                                ; preds = %dec_label_pc_c92c, %dec_label_pc_c980
  %storemerge35 = phi i32 [ %v2_c9d8, %dec_label_pc_c980 ], [ %v7_c974, %dec_label_pc_c92c ]
  store i32 %v3_c88c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c9ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c9ec, label %dec_label_pc_cb1c, label %dec_label_pc_c9f4

dec_label_pc_c9f4:                                ; preds = %dec_label_pc_c9e0
  store i32 %v3_c88c, i32* %r0.global-to-local, align 4
  store i32 %v8_c8d8, i32* %r1.global-to-local, align 4
  store i32 %v5_ca00, i32* %r3.global-to-local, align 4
  store i32 %v3_ca04113, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ca10

dec_label_pc_ca10:                                ; preds = %dec_label_pc_cb1c, %dec_label_pc_c9f4
  %stack_var_-57.0 = phi i8 [ %v1_cb24, %dec_label_pc_cb1c ], [ %v1_ca08, %dec_label_pc_c9f4 ]
  %storemerge = phi i8 [ %v1_cb1c, %dec_label_pc_cb1c ], [ %v1_ca0c, %dec_label_pc_c9f4 ]
  store i32 %v2_ca10, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_ca18 = load i32, i32* @r7, align 4
  store i32 %v0_ca18, i32* %r0.global-to-local, align 4
  %v5_ca1c = call i32 @connect(i32 %v0_ca18, %sockaddr* nonnull %tmp87, i32 16)
  store i32 %v1_c900, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_ca2c, i32* %r2.global-to-local, align 4
  %v2_ca34 = call i32 @time(i32* null)
  store i32 %v2_ca34, i32* %r0.global-to-local, align 4
  store i32 %v2_ca34, i32* %r4.global-to-local, align 4
  store i32 %v3_ca40, i32* %ip.global-to-local, align 4
  %v9_caa0 = icmp eq i32 %tmp42, %storemerge35
  %v4_cac4 = zext i8 %storemerge to i32
  %v4_cac8 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_caa0 to i32
  %v9_cab4 = icmp eq i1 %v9_caa0, false
  %v4_cad0 = mul nuw nsw i32 %v4_cac8, 256
  %v5_cad0 = or i32 %v4_cad0, %v4_cac4
  %v9_cad4 = icmp eq i32 %v5_cad0, %v5_cacc
  br label %dec_label_pc_ca5c

dec_label_pc_ca4c:                                ; preds = %.thread33, %dec_label_pc_cabc, %dec_label_pc_caec, %bb90
  %v2_ca4c = call i32 @time(i32* null)
  %v0_ca50 = load i32, i32* %r4.global-to-local, align 4
  %v2_ca50 = sub i32 %v2_ca4c, %v0_ca50
  store i32 %v2_ca50, i32* %r0.global-to-local, align 4
  %v7_ca54 = icmp eq i32 %v2_ca50, 10
  store i1 %v7_ca54, i1* %cpsr_z.global-to-local, align 1
  %v8_ca58 = icmp sgt i32 %v2_ca50, 10
  br i1 %v8_ca58, label %dec_label_pc_cb00, label %dec_label_pc_ca5c

dec_label_pc_ca5c:                                ; preds = %dec_label_pc_ca4c, %dec_label_pc_ca10
  store i32 16, i32* %stack_var_-44, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_ca70, i32* %r1.global-to-local, align 4
  store i32 %v2_ca74, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c888, i32* %r0.global-to-local, align 4
  %v10_ca84 = call i32 @recvfrom(i32 %v3_c888, i32* nonnull %stack_var_-332, i32 256, i32 16384, %sockaddr* %tmp88, i32* nonnull %stack_var_-44)
  store i32 %v10_ca84, i32* %r2.global-to-local, align 4
  %v2_ca8c = icmp eq i32 %v10_ca84, -1
  store i1 %v2_ca8c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v2_ca8c, label %dec_label_pc_cb14, label %dec_label_pc_ca98

dec_label_pc_ca98:                                ; preds = %dec_label_pc_ca5c
  store i32 %storemerge35, i32* %lr.global-to-local, align 4
  store i32 %tmp42, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_caac = icmp eq i32 %v10_ca84, 40
  store i1 %v7_caac, i1* %cpsr_z.global-to-local, align 1
  %tmp119 = icmp ult i32 %v10_ca84, 41
  br i1 %tmp119, label %.thread33, label %bb90

.thread33:                                        ; preds = %dec_label_pc_ca98
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ca4c

bb90:                                             ; preds = %dec_label_pc_ca98
  store i1 %v9_cab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cab4, label %dec_label_pc_ca4c, label %dec_label_pc_cabc

dec_label_pc_cabc:                                ; preds = %bb90
  store i32 %v4_cac0, i32* %r1.global-to-local, align 4
  store i32 %v4_cac4, i32* %ip.global-to-local, align 4
  store i32 %v4_cac8, i32* %r2.global-to-local, align 4
  store i32 %v5_cacc, i32* %r3.global-to-local, align 4
  store i32 %v5_cad0, i32* @r5, align 4
  store i1 %v9_cad4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cad4, label %dec_label_pc_cadc, label %dec_label_pc_ca4c

dec_label_pc_cadc:                                ; preds = %dec_label_pc_cabc
  store i32 %v4_cadc, i32* %r2.global-to-local, align 4
  store i32 %v1_cae0, i32* %r3.global-to-local, align 4
  store i1 %v2_cae4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cae4, label %dec_label_pc_cb30, label %dec_label_pc_caec

dec_label_pc_caec:                                ; preds = %dec_label_pc_cadc
  store i1 %v2_caec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_caec, label %dec_label_pc_ca4c, label %dec_label_pc_caf4

dec_label_pc_caf4:                                ; preds = %dec_label_pc_caec
  %v0_caf4 = load i32, i32* @r7, align 4
  store i32 %v0_caf4, i32* %r0.global-to-local, align 4
  %v1_caf8 = call i32 @close(i32 %v0_caf4)
  store i32 %v1_caf8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c8f4

dec_label_pc_cb00:                                ; preds = %dec_label_pc_ca4c
  %v0_cb00 = load i32, i32* @r7, align 4
  store i32 %v0_cb00, i32* %r0.global-to-local, align 4
  %v1_cb04 = call i32 @close(i32 %v0_cb00)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c91c = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_c91c, i32* %r0.global-to-local, align 4
  %v2_c920 = icmp eq i32 %v3_c91c, -1
  store i1 %v2_c920, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c91c, i32* @r7, align 4
  br i1 %v2_c920, label %dec_label_pc_cd80, label %dec_label_pc_c92c

dec_label_pc_cb0c:                                ; preds = %dec_label_pc_c8a0
  store i32 %v3_c888, i32* %r0.global-to-local, align 4
  %v1_cb10 = call i32 @close(i32 %v3_c888)
  store i32 %v1_cb10, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cb14

dec_label_pc_cb14:                                ; preds = %dec_label_pc_ca5c, %dec_label_pc_c6b8, %dec_label_pc_cb0c
  %v29_cb18 = phi i32 [ -1, %dec_label_pc_c6b8 ], [ %v1_cb10, %dec_label_pc_cb0c ], [ 0, %dec_label_pc_ca5c ]
  store i32 %v3_c6b8, i32* %r4.global-to-local, align 4
  ret i32 %v29_cb18

dec_label_pc_cb1c:                                ; preds = %dec_label_pc_c9e0
  %v0_cb1c = call i32 @function_f468()
  %v1_cb1c = trunc i32 %v0_cb1c to i8
  store i32 %v0_cb1c, i32* %r0.global-to-local, align 4
  %v4_cb20 = sdiv i32 %v0_cb1c, 256
  store i32 %v4_cb20, i32* %r3.global-to-local, align 4
  %v1_cb24 = trunc i32 %v4_cb20 to i8
  br label %dec_label_pc_ca10

dec_label_pc_cb30:                                ; preds = %dec_label_pc_cadc
  %v3_cb30 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cb30, i32* %r4.global-to-local, align 4
  store i32 %v4_c6d8, i32* %r2.global-to-local, align 4
  %v3_cb38 = mul i32 %v3_cb30, 16
  store i32 %v3_cb38, i32* %ip.global-to-local, align 4
  %v3_cb3c = add i32 %v3_cb38, %v4_c6d8
  %v4_cb3c = inttoptr i32 %v3_cb3c to i32*
  store i32 %storemerge35, i32* %v4_cb3c, align 4
  %v0_cb40 = load i32, i32* @r6, align 4
  %v1_cb40 = add i32 %v0_cb40, 4
  %v2_cb40 = inttoptr i32 %v1_cb40 to i32*
  %v3_cb40 = load i32, i32* %v2_cb40, align 4
  %v1_cb4c = and i32 %v3_cb40, 65280
  store i32 %v1_cb4c, i32* %r1.global-to-local, align 4
  %v3_cb50 = mul i32 %v3_cb40, 16777216
  store i32 %v4_c6d8, i32* %r0.global-to-local, align 4
  %v4_cb5c = mul nuw nsw i32 %v1_cb4c, 256
  %v5_cb5c = or i32 %v4_cb5c, %v3_cb50
  store i32 %v5_cb5c, i32* %r2.global-to-local, align 4
  %v1_cb60 = load i32, i32* %ip.global-to-local, align 4
  %v2_cb60 = add i32 %v1_cb60, %v4_c6d8
  store i32 %v2_cb60, i32* %ip.global-to-local, align 4
  %v2_cb64 = call i32 @llvm.bswap.i32(i32 %v3_cb40)
  store i32 %v2_cb64, i32* %r3.global-to-local, align 4
  %v2_cb68 = add i32 %v2_cb60, 4
  %v3_cb68 = inttoptr i32 %v2_cb68 to i32*
  store i32 %v2_cb64, i32* %v3_cb68, align 4
  %v0_cb6c = load i32, i32* @r6, align 4
  %v1_cb6c = add i32 %v0_cb6c, 8
  %v2_cb6c = inttoptr i32 %v1_cb6c to i32*
  %v3_cb6c = load i32, i32* %v2_cb6c, align 4
  store i32 %v3_cb6c, i32* %r0.global-to-local, align 4
  %v1_cb74 = and i32 %v3_cb6c, 65280
  store i32 %v1_cb74, i32* %r1.global-to-local, align 4
  %v3_cb78 = mul i32 %v3_cb6c, 16777216
  %v4_cb80 = mul nuw nsw i32 %v1_cb74, 256
  %v5_cb80 = or i32 %v4_cb80, %v3_cb78
  store i32 %v5_cb80, i32* %r2.global-to-local, align 4
  %v2_cb88 = call i32 @llvm.bswap.i32(i32 %v3_cb6c)
  store i32 %v2_cb88, i32* %r3.global-to-local, align 4
  %v1_cb8c = load i32, i32* %ip.global-to-local, align 4
  %v2_cb8c = add i32 %v1_cb8c, 8
  %v3_cb8c = inttoptr i32 %v2_cb8c to i32*
  store i32 %v2_cb88, i32* %v3_cb8c, align 4
  %v0_cb90 = load i32, i32* @r6, align 4
  %v1_cb90 = inttoptr i32 %v0_cb90 to i32*
  %v2_cb90 = load i32, i32* %v1_cb90, align 4
  %v3_cb94 = udiv i32 %v2_cb90, 65536
  store i32 %v3_cb94, i32* %r2.global-to-local, align 4
  %v3_cb986 = udiv i32 %v2_cb90, 16777216
  store i32 %v3_cb986, i32* %r1.global-to-local, align 4
  %v0_cb9c = load i32, i32* @r5, align 4
  %v3_cb9c = sdiv i32 %v0_cb9c, 256
  store i32 %v3_cb9c, i32* %r3.global-to-local, align 4
  %v1_cba0 = trunc i32 %v3_cb9c to i8
  %v2_cba0 = load i32, i32* %ip.global-to-local, align 4
  %v3_cba0 = add i32 %v2_cba0, 15
  %v4_cba0 = inttoptr i32 %v3_cba0 to i8*
  store i8 %v1_cba0, i8* %v4_cba0, align 1
  %v0_cba4 = load i32, i32* %r1.global-to-local, align 4
  %v1_cba4 = trunc i32 %v0_cba4 to i8
  %v2_cba4 = load i32, i32* %ip.global-to-local, align 4
  %v3_cba4 = add i32 %v2_cba4, 13
  %v4_cba4 = inttoptr i32 %v3_cba4 to i8*
  store i8 %v1_cba4, i8* %v4_cba4, align 1
  %v0_cba8 = load i32, i32* %r2.global-to-local, align 4
  %v1_cba8 = trunc i32 %v0_cba8 to i8
  %v2_cba8 = load i32, i32* %ip.global-to-local, align 4
  %v3_cba8 = add i32 %v2_cba8, 12
  %v4_cba8 = inttoptr i32 %v3_cba8 to i8*
  store i8 %v1_cba8, i8* %v4_cba8, align 1
  %v0_cbac = load i32, i32* @r5, align 4
  %v1_cbac = trunc i32 %v0_cbac to i8
  %v2_cbac = load i32, i32* %ip.global-to-local, align 4
  %v3_cbac = add i32 %v2_cbac, 14
  %v4_cbac = inttoptr i32 %v3_cbac to i8*
  store i8 %v1_cbac, i8* %v4_cbac, align 1
  %v0_cbb0 = load i32, i32* @sl, align 4
  store i32 %v0_cbb0, i32* %r0.global-to-local, align 4
  %v1_cbb4 = call i32* @malloc(i32 %v0_cbb0)
  %v3_cbb4 = ptrtoint i32* %v1_cbb4 to i32
  store i32 %v3_cbb4, i32* %r0.global-to-local, align 4
  store i32 %v4_c6e8, i32* %r1.global-to-local, align 4
  %v3_cbbc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cbbc, i32* %r2.global-to-local, align 4
  %v2_cbc0 = load i32, i32* %r4.global-to-local, align 4
  %v5_cbc0 = mul i32 %v2_cbc0, 4
  %v6_cbc0 = add i32 %v5_cbc0, %v4_c6e8
  %v7_cbc0 = inttoptr i32 %v6_cbc0 to i32*
  store i32 %v3_cbb4, i32* %v7_cbc0, align 4
  %v0_cbc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_cbc4 = load i32, i32* %r2.global-to-local, align 4
  %v4_cbc4 = mul i32 %v1_cbc4, 4
  %v5_cbc4 = add i32 %v4_cbc4, %v0_cbc4
  %v6_cbc4 = inttoptr i32 %v5_cbc4 to i32*
  %v7_cbc4 = load i32, i32* %v6_cbc4, align 4
  store i32 %v7_cbc4, i32* @r4, align 4
  %v1_cbc8 = inttoptr i32 %v7_cbc4 to i8*
  %v2_cbc8 = load i8, i8* %v1_cbc8, align 1
  %tmp120 = urem i8 %v2_cbc8, 16
  %v1_cbcc = zext i8 %tmp120 to i32
  %v1_cbd0 = or i32 %v1_cbcc, 64
  store i32 %v1_cbd0, i32* %r3.global-to-local, align 4
  %v1_cbd4 = trunc i32 %v1_cbd0 to i8
  store i8 %v1_cbd4, i8* %v1_cbc8, align 1
  %v0_cbd8 = load i32, i32* @sl, align 4
  %v3_cbd8 = mul i32 %v0_cbd8, 65536
  store i32 %v3_cbd8, i32* %r2.global-to-local, align 4
  %v0_cbdc = load i32, i32* @r4, align 4
  %v1_cbdc = inttoptr i32 %v0_cbdc to i8*
  %v2_cbdc = load i8, i8* %v1_cbdc, align 1
  %v1_cbe4 = urem i32 %v0_cbd8, 256
  %tmp91 = udiv i32 %v0_cbd8, 256
  %v3_cbe8 = urem i32 %tmp91, 256
  %v1_cbec = and i8 %v2_cbdc, -16
  %v4_cbf0 = mul nuw nsw i32 %v1_cbe4, 256
  %v5_cbf0 = or i32 %v4_cbf0, %v3_cbe8
  store i32 %v5_cbf0, i32* %r2.global-to-local, align 4
  %v1_cbf4 = or i8 %v1_cbec, 5
  store i32 %v1_c768, i32* %ip.global-to-local, align 4
  store i32 %v1_cbe4, i32* %r3.global-to-local, align 4
  store i8 %v1_cbf4, i8* %v1_cbdc, align 1
  %v0_cc04 = load i32, i32* %r3.global-to-local, align 4
  %v1_cc04 = trunc i32 %v0_cc04 to i8
  %v2_cc04 = load i32, i32* @r4, align 4
  %v3_cc04 = add i32 %v2_cc04, 3
  %v4_cc04 = inttoptr i32 %v3_cc04 to i8*
  store i8 %v1_cc04, i8* %v4_cc04, align 1
  store i32 %v4_cc08, i32* %r3.global-to-local, align 4
  %v0_cc0c = load i32, i32* %ip.global-to-local, align 4
  %v2_cc0c = icmp eq i32 %v0_cc0c, 0
  store i1 %v2_cc0c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_ca38, i32* %r0.global-to-local, align 4
  store i32 %v3_ca40, i32* %r1.global-to-local, align 4
  %v2_cc18 = load i32, i32* @r4, align 4
  %v3_cc18 = add i32 %v2_cc18, 1
  %v4_cc18 = inttoptr i32 %v3_cc18 to i8*
  store i8 %v1_cc18, i8* %v4_cc18, align 1
  store i32 %v4_cc1c, i32* %ip.global-to-local, align 4
  %v0_cc20 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cc20, label %bb93, label %bb92

bb92:                                             ; preds = %dec_label_pc_cb30
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb93

bb93:                                             ; preds = %dec_label_pc_cb30, %bb92
  %v0_cc24 = load i32, i32* %r2.global-to-local, align 4
  %v1_cc24 = trunc i32 %v0_cc24 to i8
  %v2_cc24 = load i32, i32* @r4, align 4
  %v3_cc24 = add i32 %v2_cc24, 2
  %v4_cc24 = inttoptr i32 %v3_cc24 to i8*
  store i8 %v1_cc24, i8* %v4_cc24, align 1
  %v0_cc28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cc28, label %.thread10, label %bb94

bb94:                                             ; preds = %bb93
  %v1_cc28 = load i32, i32* %r3.global-to-local, align 4
  %v2_cc28 = trunc i32 %v1_cc28 to i8
  %v3_cc28 = load i32, i32* @r4, align 4
  %v4_cc28 = add i32 %v3_cc28, 6
  %v5_cc28 = inttoptr i32 %v4_cc28 to i8*
  store i8 %v2_cc28, i8* %v5_cc28, align 1
  %v0_cc2c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cc2c.pr, label %.thread10, label %bb95

bb95:                                             ; preds = %bb94
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %bb93, %bb94, %bb95
  store i32 6, i32* %r3.global-to-local, align 4
  %v0_cc34 = load i32, i32* %ip.global-to-local, align 4
  %v1_cc34 = trunc i32 %v0_cc34 to i8
  %v2_cc34 = load i32, i32* @r4, align 4
  %v3_cc34 = add i32 %v2_cc34, 8
  %v4_cc34 = inttoptr i32 %v3_cc34 to i8*
  store i8 %v1_cc34, i8* %v4_cc34, align 1
  %v0_cc38 = load i32, i32* %r3.global-to-local, align 4
  %v1_cc38 = trunc i32 %v0_cc38 to i8
  %v2_cc38 = load i32, i32* @r4, align 4
  %v3_cc38 = add i32 %v2_cc38, 9
  %v4_cc38 = inttoptr i32 %v3_cc38 to i8*
  store i8 %v1_cc38, i8* %v4_cc38, align 1
  %v0_cc3c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cc3c, label %bb97, label %bb96

bb96:                                             ; preds = %.thread10
  %v1_cc3c = load i32, i32* %r2.global-to-local, align 4
  %v2_cc3c = trunc i32 %v1_cc3c to i8
  %v3_cc3c = load i32, i32* @r4, align 4
  %v4_cc3c = add i32 %v3_cc3c, 7
  %v5_cc3c = inttoptr i32 %v4_cc3c to i8*
  store i8 %v2_cc3c, i8* %v5_cc3c, align 1
  br label %bb97

bb97:                                             ; preds = %.thread10, %bb96
  %v2_cc44 = load i32, i32* @global_var_1a40c.102, align 4
  store i32 %v2_cc44, i32* %r3.global-to-local, align 4
  %v1_cc48 = load i32, i32* @r4, align 4
  %v2_cc48 = add i32 %v1_cc48, 12
  %v3_cc48 = inttoptr i32 %v2_cc48 to i32*
  store i32 %v2_cc44, i32* %v3_cc48, align 4
  %v0_cc4c = load i32, i32* %r0.global-to-local, align 4
  %v1_cc4c = trunc i32 %v0_cc4c to i8
  %v2_cc4c = load i32, i32* @r4, align 4
  %v3_cc4c = add i32 %v2_cc4c, 4
  %v4_cc4c = inttoptr i32 %v3_cc4c to i8*
  store i8 %v1_cc4c, i8* %v4_cc4c, align 1
  %v3_cc50 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cc50, i32* %r2.global-to-local, align 4
  store i32 %v4_c6d8, i32* %r0.global-to-local, align 4
  %v4_cc58 = mul i32 %v3_cc50, 16
  %v5_cc58 = add i32 %v4_cc58, %v4_c6d8
  %v6_cc58 = inttoptr i32 %v5_cc58 to i32*
  %v7_cc58 = load i32, i32* %v6_cc58, align 4
  store i32 %v7_cc58, i32* %r3.global-to-local, align 4
  %v0_cc5c = load i32, i32* %r1.global-to-local, align 4
  %v1_cc5c = trunc i32 %v0_cc5c to i8
  %v2_cc5c = load i32, i32* @r4, align 4
  %v3_cc5c = add i32 %v2_cc5c, 5
  %v4_cc5c = inttoptr i32 %v3_cc5c to i8*
  store i8 %v1_cc5c, i8* %v4_cc5c, align 1
  %v0_cc60 = load i32, i32* %r3.global-to-local, align 4
  %v1_cc60 = load i32, i32* @r4, align 4
  %v2_cc60 = add i32 %v1_cc60, 16
  %v3_cc60 = inttoptr i32 %v2_cc60 to i32*
  store i32 %v0_cc60, i32* %v3_cc60, align 4
  %v0_cc64 = load i32, i32* %r2.global-to-local, align 4
  %v3_cc64 = mul i32 %v0_cc64, 16
  %v1_cc68 = load i32, i32* %r0.global-to-local, align 4
  %v2_cc68 = add i32 %v1_cc68, %v3_cc64
  store i32 %v2_cc68, i32* %r2.global-to-local, align 4
  %v1_cc6c = add i32 %v2_cc68, 13
  %v2_cc6c = inttoptr i32 %v1_cc6c to i8*
  %v3_cc6c = load i8, i8* %v2_cc6c, align 1
  %v4_cc6c = zext i8 %v3_cc6c to i32
  store i32 %v4_cc6c, i32* %r1.global-to-local, align 4
  %v1_cc70 = add i32 %v2_cc68, 12
  %v2_cc70 = inttoptr i32 %v1_cc70 to i8*
  %v3_cc70 = load i8, i8* %v2_cc70, align 1
  %v4_cc70 = zext i8 %v3_cc70 to i32
  %v4_cc74 = mul nuw nsw i32 %v4_cc6c, 256
  %v5_cc74 = or i32 %v4_cc70, %v4_cc74
  store i32 %v5_cc74, i32* %r3.global-to-local, align 4
  %v2_cc78 = load i32, i32* @r4, align 4
  %v3_cc78 = add i32 %v2_cc78, 20
  %v4_cc78 = inttoptr i32 %v3_cc78 to i8*
  store i8 %v3_cc70, i8* %v4_cc78, align 1
  %v0_cc7c = load i32, i32* @r4, align 4
  %v1_cc7c = add i32 %v0_cc7c, 20
  store i32 %v1_cc7c, i32* @r6, align 4
  %v0_cc80 = load i32, i32* %r3.global-to-local, align 4
  %v3_cc80 = sdiv i32 %v0_cc80, 256
  store i32 %v3_cc80, i32* %r3.global-to-local, align 4
  %v1_cc84 = trunc i32 %v3_cc80 to i8
  %v3_cc84 = add i32 %v0_cc7c, 21
  %v4_cc84 = inttoptr i32 %v3_cc84 to i8*
  store i8 %v1_cc84, i8* %v4_cc84, align 1
  %v0_cc88 = load i32, i32* @r6, align 4
  %v1_cc88 = add i32 %v0_cc88, 13
  %v2_cc88 = inttoptr i32 %v1_cc88 to i8*
  %v3_cc88 = load i8, i8* %v2_cc88, align 1
  %v4_cc88 = zext i8 %v3_cc88 to i32
  store i32 %v4_cc88, i32* %r3.global-to-local, align 4
  %v0_cc8c = load i32, i32* %r2.global-to-local, align 4
  %v1_cc8c = add i32 %v0_cc8c, 8
  %v2_cc8c = inttoptr i32 %v1_cc8c to i32*
  %v3_cc8c = load i32, i32* %v2_cc8c, align 4
  store i32 %v3_cc8c, i32* %r1.global-to-local, align 4
  %v1_cc90 = or i32 %v4_cc88, 1
  store i32 %v1_cc90, i32* %r3.global-to-local, align 4
  %v1_cc94 = add i32 %v0_cc8c, 15
  %v2_cc94 = inttoptr i32 %v1_cc94 to i8*
  %v3_cc94 = load i8, i8* %v2_cc94, align 1
  %v4_cc94 = zext i8 %v3_cc94 to i32
  store i32 %v4_cc94, i32* %ip.global-to-local, align 4
  %v1_cc98 = add i32 %v0_cc8c, 14
  %v2_cc98 = inttoptr i32 %v1_cc98 to i8*
  %v3_cc98 = load i8, i8* %v2_cc98, align 1
  %v4_cc98 = zext i8 %v3_cc98 to i32
  store i32 %v4_cc98, i32* %r0.global-to-local, align 4
  %v2_cc9c = add i32 %v0_cc88, 4
  %v3_cc9c = inttoptr i32 %v2_cc9c to i32*
  store i32 %v3_cc8c, i32* %v3_cc9c, align 4
  %v0_cca0 = load i32, i32* %r2.global-to-local, align 4
  %v1_cca0 = add i32 %v0_cca0, 4
  %v2_cca0 = inttoptr i32 %v1_cca0 to i32*
  %v3_cca0 = load i32, i32* %v2_cca0, align 4
  store i32 %v3_cca0, i32* %lr.global-to-local, align 4
  %v0_cca4 = load i32, i32* %r3.global-to-local, align 4
  %v1_cca4 = trunc i32 %v0_cca4 to i8
  %v2_cca4 = load i32, i32* @r6, align 4
  %v3_cca4 = add i32 %v2_cca4, 13
  %v4_cca4 = inttoptr i32 %v3_cca4 to i8*
  store i8 %v1_cca4, i8* %v4_cca4, align 1
  %v0_cca8 = load i32, i32* @r6, align 4
  %v1_cca8 = add i32 %v0_cca8, 12
  %v2_cca8 = inttoptr i32 %v1_cca8 to i8*
  %v3_cca8 = load i8, i8* %v2_cca8, align 1
  %v4_cca8 = zext i8 %v3_cca8 to i32
  store i32 %v4_cca8, i32* %r2.global-to-local, align 4
  %v1_ccac = add i32 %v0_cca8, 13
  %v2_ccac = inttoptr i32 %v1_ccac to i8*
  %v3_ccac = load i8, i8* %v2_ccac, align 1
  %v4_ccac = zext i8 %v3_ccac to i32
  %v0_ccb0 = load i32, i32* %r0.global-to-local, align 4
  %v1_ccb0 = load i32, i32* %ip.global-to-local, align 4
  %v4_ccb0 = mul i32 %v1_ccb0, 256
  %v5_ccb0 = or i32 %v4_ccb0, %v0_ccb0
  store i32 %v5_ccb0, i32* %r0.global-to-local, align 4
  %tmp121 = urem i8 %v3_cca8, 16
  %v1_ccb4 = zext i8 %tmp121 to i32
  %v3_ccb8 = sdiv i32 %v5_ccb0, 256
  store i32 %v3_ccb8, i32* %r1.global-to-local, align 4
  %v1_ccbc = or i32 %v1_ccb4, 128
  store i32 %v1_ccbc, i32* %r2.global-to-local, align 4
  %v1_ccc0 = or i32 %v4_ccac, 16
  store i32 %v1_ccc0, i32* %r3.global-to-local, align 4
  %v1_ccc4 = trunc i32 %v3_ccb8 to i8
  %v3_ccc4 = add i32 %v0_cca8, 3
  %v4_ccc4 = inttoptr i32 %v3_ccc4 to i8*
  store i8 %v1_ccc4, i8* %v4_ccc4, align 1
  %v0_ccc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_ccc8 = trunc i32 %v0_ccc8 to i8
  %v2_ccc8 = load i32, i32* @r6, align 4
  %v3_ccc8 = add i32 %v2_ccc8, 12
  %v4_ccc8 = inttoptr i32 %v3_ccc8 to i8*
  store i8 %v1_ccc8, i8* %v4_ccc8, align 1
  %v0_cccc = load i32, i32* %r3.global-to-local, align 4
  %v1_cccc = trunc i32 %v0_cccc to i8
  %v2_cccc = load i32, i32* @r6, align 4
  %v3_cccc = add i32 %v2_cccc, 13
  %v4_cccc = inttoptr i32 %v3_cccc to i8*
  store i8 %v1_cccc, i8* %v4_cccc, align 1
  %v0_ccd0 = load i32, i32* %lr.global-to-local, align 4
  %v1_ccd0 = load i32, i32* @r6, align 4
  %v2_ccd0 = add i32 %v1_ccd0, 8
  %v3_ccd0 = inttoptr i32 %v2_ccd0 to i32*
  store i32 %v0_ccd0, i32* %v3_ccd0, align 4
  %v0_ccd4 = load i32, i32* %r0.global-to-local, align 4
  %v1_ccd4 = trunc i32 %v0_ccd4 to i8
  %v2_ccd4 = load i32, i32* @r6, align 4
  %v3_ccd4 = add i32 %v2_ccd4, 2
  %v4_ccd4 = inttoptr i32 %v3_ccd4 to i8*
  store i8 %v1_ccd4, i8* %v4_ccd4, align 1
  %v0_ccd8 = call i32 @function_f468()
  %v1_ccd8 = trunc i32 %v0_ccd8 to i8
  store i32 %v0_ccd8, i32* %r0.global-to-local, align 4
  store i32 %v1_c7a0, i32* %r1.global-to-local, align 4
  %v0_cce0 = load i32, i32* @r6, align 4
  %v1_cce0 = add i32 %v0_cce0, 13
  %v2_cce0 = inttoptr i32 %v1_cce0 to i8*
  %v3_cce0 = load i8, i8* %v2_cce0, align 1
  %v4_cce0 = zext i8 %v3_cce0 to i32
  store i32 %v1_cce4, i32* %r2.global-to-local, align 4
  %v1_cce8 = and i32 %v4_cce0, 223
  %v5_ccec = or i32 %v1_cce8, %v4_ccec
  store i32 %v5_ccec, i32* %r3.global-to-local, align 4
  %v1_ccf0 = trunc i32 %v5_ccec to i8
  store i8 %v1_ccf0, i8* %v2_cce0, align 1
  store i32 %v1_c7c0, i32* %ip.global-to-local, align 4
  %v0_ccf8 = load i32, i32* @r6, align 4
  %v1_ccf8 = add i32 %v0_ccf8, 13
  %v2_ccf8 = inttoptr i32 %v1_ccf8 to i8*
  %v3_ccf8 = load i8, i8* %v2_ccf8, align 1
  %v4_ccf8 = zext i8 %v3_ccf8 to i32
  store i32 %v1_ccfc, i32* %r3.global-to-local, align 4
  %v1_cd00 = and i32 %v4_ccf8, 239
  %v5_cd04 = or i32 %v1_cd00, %v4_cd04
  store i32 %v5_cd04, i32* %r2.global-to-local, align 4
  %v1_cd08 = trunc i32 %v5_cd04 to i8
  store i8 %v1_cd08, i8* %v2_ccf8, align 1
  store i32 %v1_c7e0, i32* %r1.global-to-local, align 4
  %v0_cd10 = load i32, i32* @r6, align 4
  %v1_cd10 = add i32 %v0_cd10, 13
  %v2_cd10 = inttoptr i32 %v1_cd10 to i8*
  %v3_cd10 = load i8, i8* %v2_cd10, align 1
  %v4_cd10 = zext i8 %v3_cd10 to i32
  store i32 %v1_cd14, i32* %r2.global-to-local, align 4
  %v1_cd18 = and i32 %v4_cd10, 247
  %v5_cd1c = or i32 %v1_cd18, %v4_cd1c
  store i32 %v5_cd1c, i32* %r3.global-to-local, align 4
  %v1_cd20 = trunc i32 %v5_cd1c to i8
  store i8 %v1_cd20, i8* %v2_cd10, align 1
  store i32 %v1_c800, i32* %ip.global-to-local, align 4
  %v0_cd28 = load i32, i32* @r6, align 4
  %v1_cd28 = add i32 %v0_cd28, 13
  %v2_cd28 = inttoptr i32 %v1_cd28 to i8*
  %v3_cd28 = load i8, i8* %v2_cd28, align 1
  %v4_cd28 = zext i8 %v3_cd28 to i32
  store i32 %v1_cd2c, i32* %r3.global-to-local, align 4
  %v1_cd30 = and i32 %v4_cd28, 251
  %v5_cd34 = or i32 %v1_cd30, %v4_cd34
  store i32 %v5_cd34, i32* %r2.global-to-local, align 4
  %v1_cd38 = trunc i32 %v5_cd34 to i8
  store i8 %v1_cd38, i8* %v2_cd28, align 1
  store i32 %v1_c820, i32* %r1.global-to-local, align 4
  %v0_cd40 = load i32, i32* @r6, align 4
  %v1_cd40 = add i32 %v0_cd40, 13
  %v2_cd40 = inttoptr i32 %v1_cd40 to i8*
  %v3_cd40 = load i8, i8* %v2_cd40, align 1
  %v4_cd40 = zext i8 %v3_cd40 to i32
  store i32 %v1_cd44, i32* %r2.global-to-local, align 4
  %v1_cd48 = and i32 %v4_cd40, 253
  %v4_cd4c = or i32 %v1_cd48, %v3_cd4c
  store i32 %v4_cd4c, i32* %r3.global-to-local, align 4
  %v1_cd50 = trunc i32 %v4_cd4c to i8
  store i8 %v1_cd50, i8* %v2_cd40, align 1
  %v0_cd54 = load i32, i32* @r6, align 4
  %v1_cd54 = add i32 %v0_cd54, 13
  %v2_cd54 = inttoptr i32 %v1_cd54 to i8*
  %v3_cd54 = load i8, i8* %v2_cd54, align 1
  %v4_cd54 = zext i8 %v3_cd54 to i32
  %v0_cd58 = load i32, i32* @r8, align 4
  %v1_cd58 = urem i32 %v0_cd58, 2
  %v1_cd5c = and i32 %v4_cd54, 254
  store i32 %v1_cd5c, i32* %r2.global-to-local, align 4
  %v4_cd6037 = udiv i32 %v0_ccd8, 256
  %v2_cd64 = or i32 %v1_cd5c, %v1_cd58
  store i32 %v2_cd64, i32* %r3.global-to-local, align 4
  %v1_cd68 = trunc i32 %v4_cd6037 to i8
  %v3_cd68 = add i32 %v0_cd54, 15
  %v4_cd68 = inttoptr i32 %v3_cd68 to i8*
  store i8 %v1_cd68, i8* %v4_cd68, align 1
  %v3_cd6c = load i32, i32* @r6, align 4
  %v4_cd6c = add i32 %v3_cd6c, 14
  %v5_cd6c = inttoptr i32 %v4_cd6c to i8*
  store i8 %v1_ccd8, i8* %v5_cd6c, align 1
  %v0_cd70 = load i32, i32* %r3.global-to-local, align 4
  %v1_cd70 = trunc i32 %v0_cd70 to i8
  %v2_cd70 = load i32, i32* @r6, align 4
  %v3_cd70 = add i32 %v2_cd70, 13
  %v4_cd70 = inttoptr i32 %v3_cd70 to i8*
  store i8 %v1_cd70, i8* %v4_cd70, align 1
  %v0_cd74 = load i32, i32* @r4, align 4
  %v1_cd74 = add i32 %v0_cd74, 40
  store i32 %v1_cd74, i32* %r0.global-to-local, align 4
  %v0_cd78 = load i32, i32* @sb, align 4
  store i32 %v0_cd78, i32* @r1, align 4
  %v1_cd7c = inttoptr i32 %v1_cd74 to i8*
  %v2_cd7c = call i32 @function_f5e8(i8* %v1_cd7c)
  store i32 %v2_cd7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cd80

dec_label_pc_cd80:                                ; preds = %dec_label_pc_c8f4, %dec_label_pc_cb00, %bb97
  %v3_cd80 = load i32, i32* %stack_var_-40, align 4
  %v1_cd84 = add i32 %v3_cd80, 1
  store i32 %v1_cd84, i32* %r3.global-to-local, align 4
  %v1_cd88 = load i32, i32* @fp, align 4
  %v9_cd88 = icmp eq i32 %v1_cd84, %v1_cd88
  store i1 %v9_cd88, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cd84, i32* %stack_var_-40, align 4
  %v5_cd90 = icmp slt i32 %v1_cd84, %v1_cd88
  br i1 %v5_cd90, label %dec_label_pc_c8f4, label %dec_label_pc_cd94

dec_label_pc_cd94:                                ; preds = %dec_label_pc_cd80, %.thread27
  %v0_cd9c21 = phi i32 [ %v0_c8c8, %.thread27 ], [ %v1_cd88, %dec_label_pc_cd80 ]
  %v0_cd94 = load i32, i32* @sb, align 4
  %v1_cd94 = add i32 %v0_cd94, 40
  store i32 %v1_cd94, i32* @sl, align 4
  %v1_cd98 = add i32 %v0_cd94, 20
  store i32 %v1_cd98, i32* @r7, align 4
  %v2_cf14 = icmp eq i32 %v1_c878, 0
  %v3_cdd0 = icmp eq i32 %v3_c8d0, 65535
  br label %dec_label_pc_cd9c

dec_label_pc_cd9c:                                ; preds = %dec_label_pc_cdf8, %dec_label_pc_cd94
  %v0_cd9c = phi i32 [ %v1_ced8, %dec_label_pc_cdf8 ], [ %v0_cd9c21, %dec_label_pc_cd94 ]
  %v2_cd9c = icmp eq i32 %v0_cd9c, 0
  store i1 %v2_cd9c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp98 = icmp slt i32 %v0_cd9c, 1
  br label %dec_label_pc_cda4

dec_label_pc_cda4:                                ; preds = %dec_label_pc_cda4, %dec_label_pc_cd9c
  br i1 %tmp98, label %dec_label_pc_cda4, label %dec_label_pc_cda8

dec_label_pc_cda8:                                ; preds = %dec_label_pc_cda4
  %v0_cda8 = load i32, i32* @r7, align 4
  %tmp99 = mul i32 %v0_cda8, 256
  %v1_cdb0 = and i32 %tmp99, 65280
  %tmp100 = udiv i32 %v0_cda8, 256
  %v4_cdb4 = urem i32 %tmp100, 256
  %v5_cdb4 = or i32 %v4_cdb4, %v1_cdb0
  store i32 %v5_cdb4, i32* @r8, align 4
  store i32 %v4_c6e8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_c8d0, i32* %ip.global-to-local, align 4
  %v7_cdc8 = load i32, i32* %v2_c6e8, align 4
  store i32 %v7_cdc8, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_cdd0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_cddc = add i32 %v7_cdc8, 20
  store i32 %v1_cddc, i32* @r5, align 4
  br i1 %v3_cdd0, label %dec_label_pc_cf04, label %dec_label_pc_cde4

dec_label_pc_cde4:                                ; preds = %dec_label_pc_cee4, %dec_label_pc_cda8
  %v0_cdf0 = phi i32 [ %v7_cef0, %dec_label_pc_cee4 ], [ %v7_cdc8, %dec_label_pc_cda8 ]
  store i1 %v2_cf14, i1* %cpsr_z.global-to-local, align 1
  %v0_cdec = load i32, i32* @sb, align 4
  store i32 %v0_cdec, i32* @r1, align 4
  %v1_cdf0 = add i32 %v0_cdf0, 40
  store i32 %v1_cdf0, i32* %r0.global-to-local, align 4
  br i1 %v2_cf14, label %dec_label_pc_cdf8, label %dec_label_pc_cf28

dec_label_pc_cdf8:                                ; preds = %dec_label_pc_cde4, %dec_label_pc_cf04, %dec_label_pc_cf28
  %v2_cdf8 = phi i32 [ %v0_cdf0, %dec_label_pc_cde4 ], [ %v0_cf1c, %dec_label_pc_cf04 ], [ %v2_cdf8.pre, %dec_label_pc_cf28 ]
  %v0_cdf8 = load i32, i32* @r6, align 4
  %v1_cdf8 = trunc i32 %v0_cdf8 to i8
  %v3_cdf8 = add i32 %v2_cdf8, 10
  %v4_cdf8 = inttoptr i32 %v3_cdf8 to i8*
  store i8 %v1_cdf8, i8* %v4_cdf8, align 1
  %v0_cdfc = load i32, i32* @r6, align 4
  %v1_cdfc = trunc i32 %v0_cdfc to i8
  %v2_cdfc = load i32, i32* @r4, align 4
  %v3_cdfc = add i32 %v2_cdfc, 11
  %v4_cdfc = inttoptr i32 %v3_cdfc to i8*
  store i8 %v1_cdfc, i8* %v4_cdfc, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ce04 = load i32, i32* @r4, align 4
  store i32 %v0_ce04, i32* @r0, align 4
  %v2_ce08 = call i32 @function_ddf4(i32 %v0_ce04, i32 20)
  %v3_ce08 = trunc i32 %v2_ce08 to i8
  store i32 %v2_ce08, i32* %r0.global-to-local, align 4
  %v3_ce0c = load i32, i32* %stack_var_-40, align 4
  store i32 %v4_c6d8, i32* %r2.global-to-local, align 4
  %v3_ce14 = mul i32 %v3_ce0c, 16
  %v2_ce18 = add i32 %v3_ce14, %v4_c6d8
  store i32 %v2_ce18, i32* %r1.global-to-local, align 4
  %v1_ce1c = add i32 %v2_ce18, 4
  %v2_ce1c = inttoptr i32 %v1_ce1c to i32*
  %v3_ce1c = load i32, i32* %v2_ce1c, align 4
  %v3_ce20 = mul i32 %v3_ce1c, 65536
  store i32 %v3_ce20, i32* %ip.global-to-local, align 4
  %tmp101 = mul i32 %v3_ce1c, 256
  %v1_ce28 = and i32 %tmp101, 65280
  %tmp102 = udiv i32 %v3_ce1c, 256
  %v4_ce2c = urem i32 %tmp102, 256
  %v5_ce2c = or i32 %v4_ce2c, %v1_ce28
  store i32 %v5_ce2c, i32* %r2.global-to-local, align 4
  %v1_ce30 = add i32 %v3_ce1c, 1
  store i32 %v1_ce30, i32* %r3.global-to-local, align 4
  store i32 %v1_ce30, i32* %v2_ce1c, align 4
  %v0_ce38 = load i32, i32* %r2.global-to-local, align 4
  %v1_ce38 = load i32, i32* @r5, align 4
  %v2_ce38 = add i32 %v1_ce38, 4
  %v3_ce38 = inttoptr i32 %v2_ce38 to i32*
  store i32 %v0_ce38, i32* %v3_ce38, align 4
  %v0_ce3c = load i32, i32* %r1.global-to-local, align 4
  %v1_ce3c = add i32 %v0_ce3c, 8
  %v2_ce3c = inttoptr i32 %v1_ce3c to i32*
  %v3_ce3c = load i32, i32* %v2_ce3c, align 4
  %tmp103 = mul i32 %v3_ce3c, 256
  %v1_ce48 = and i32 %tmp103, 65280
  %tmp104 = udiv i32 %v3_ce3c, 256
  %v4_ce4c = urem i32 %tmp104, 256
  %v5_ce4c = or i32 %v4_ce4c, %v1_ce48
  store i32 %v5_ce4c, i32* %r2.global-to-local, align 4
  %v4_ce5038 = udiv i32 %v2_ce08, 256
  %v1_ce54 = trunc i32 %v4_ce5038 to i8
  %v2_ce54 = load i32, i32* @r4, align 4
  %v3_ce54 = add i32 %v2_ce54, 11
  %v4_ce54 = inttoptr i32 %v3_ce54 to i8*
  store i8 %v1_ce54, i8* %v4_ce54, align 1
  %v3_ce58 = load i32, i32* @r4, align 4
  %v4_ce58 = add i32 %v3_ce58, 10
  %v5_ce58 = inttoptr i32 %v4_ce58 to i8*
  store i8 %v3_ce08, i8* %v5_ce58, align 1
  %v0_ce5c = load i32, i32* %r2.global-to-local, align 4
  %v1_ce5c = load i32, i32* @r5, align 4
  %v2_ce5c = add i32 %v1_ce5c, 8
  %v3_ce5c = inttoptr i32 %v2_ce5c to i32*
  store i32 %v0_ce5c, i32* %v3_ce5c, align 4
  %v0_ce60 = load i32, i32* @r5, align 4
  store i32 %v0_ce60, i32* @r1, align 4
  %v0_ce64 = load i32, i32* @r8, align 4
  store i32 %v0_ce64, i32* %r2.global-to-local, align 4
  %v0_ce68 = load i32, i32* @r7, align 4
  store i32 %v0_ce68, i32* %r3.global-to-local, align 4
  %v0_ce6c = load i32, i32* @r4, align 4
  store i32 %v0_ce6c, i32* %r0.global-to-local, align 4
  %v0_ce70 = load i32, i32* @r6, align 4
  %v1_ce70 = trunc i32 %v0_ce70 to i8
  %v3_ce70 = add i32 %v0_ce60, 16
  %v4_ce70 = inttoptr i32 %v3_ce70 to i8*
  store i8 %v1_ce70, i8* %v4_ce70, align 1
  %v0_ce74 = load i32, i32* @r6, align 4
  %v1_ce74 = trunc i32 %v0_ce74 to i8
  %v2_ce74 = load i32, i32* @r5, align 4
  %v3_ce74 = add i32 %v2_ce74, 17
  %v4_ce74 = inttoptr i32 %v3_ce74 to i8*
  store i8 %v1_ce74, i8* %v4_ce74, align 1
  %v4_ce78 = call i32 @function_de50(i32 %v0_ce6c, i32 %v0_ce60, i32 %v0_ce64, i32 %v0_ce68)
  %v5_ce78 = trunc i32 %v4_ce78 to i8
  store i32 %v4_ce78, i32* %r0.global-to-local, align 4
  %v4_ce7c39 = udiv i32 %v4_ce78, 256
  %v1_ce80 = trunc i32 %v4_ce7c39 to i8
  %v2_ce80 = load i32, i32* @r5, align 4
  %v3_ce80 = add i32 %v2_ce80, 17
  %v4_ce80 = inttoptr i32 %v3_ce80 to i8*
  store i8 %v1_ce80, i8* %v4_ce80, align 1
  %v3_ce84 = load i32, i32* @r5, align 4
  %v4_ce84 = add i32 %v3_ce84, 16
  %v5_ce84 = inttoptr i32 %v4_ce84 to i8*
  store i8 %v5_ce78, i8* %v5_ce84, align 1
  %v3_ce88 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ce88, i32* %r3.global-to-local, align 4
  %v0_ce8c = load i32, i32* @r4, align 4
  %v1_ce8c = add i32 %v0_ce8c, 20
  %v2_ce8c = inttoptr i32 %v1_ce8c to i32*
  %v3_ce8c = load i32, i32* %v2_ce8c, align 4
  %v5_ce94 = mul i32 %v3_ce88, 24
  %v3_ce9c = udiv i32 %v3_ce8c, 65536
  store i32 %v3_ce9c, i32* %r2.global-to-local, align 4
  %v2_cea0 = add i32 %v5_ce94, %arg2
  store i32 %v2_cea0, i32* %ip.global-to-local, align 4
  %v3_cea47 = udiv i32 %v3_ce8c, 16777216
  %v1_cea8 = trunc i32 %v3_cea47 to i8
  %v3_cea8 = add i32 %v2_cea0, 3
  %v4_cea8 = inttoptr i32 %v3_cea8 to i8*
  store i8 %v1_cea8, i8* %v4_cea8, align 1
  %v0_ceac = load i32, i32* %r2.global-to-local, align 4
  %v1_ceac = trunc i32 %v0_ceac to i8
  %v2_ceac = load i32, i32* %ip.global-to-local, align 4
  %v3_ceac = add i32 %v2_ceac, 2
  %v4_ceac = inttoptr i32 %v3_ceac to i8*
  store i8 %v1_ceac, i8* %v4_ceac, align 1
  %v0_ceb0 = load i32, i32* @r4, align 4
  store i32 %v0_ceb0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c888, i32* %r0.global-to-local, align 4
  %v0_cebc = load i32, i32* @sl, align 4
  store i32 %v0_cebc, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_cec4 = load i32, i32* %ip.global-to-local, align 4
  %v4_cec4 = inttoptr i32 %v0_cec4 to %sockaddr*
  %v7_cecc = inttoptr i32 %v0_ceb0 to i32*
  %v9_cecc = call i32 @sendto(i32 %v3_c888, i32* %v7_cecc, i32 %v0_cebc, i32 16384, %sockaddr* %v4_cec4, i32 16)
  %v3_ced0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ced0, i32* %r3.global-to-local, align 4
  %v1_ced4 = add i32 %v3_ced0, 1
  store i32 %v1_ced4, i32* %r0.global-to-local, align 4
  %v1_ced8 = load i32, i32* @fp, align 4
  %v9_ced8 = icmp eq i32 %v1_ced4, %v1_ced8
  store i1 %v9_ced8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ced4, i32* %stack_var_-40, align 4
  %v6_cee0 = icmp slt i32 %v1_ced4, %v1_ced8
  br i1 %v6_cee0, label %dec_label_pc_cee4, label %dec_label_pc_cd9c

dec_label_pc_cee4:                                ; preds = %dec_label_pc_cdf8
  store i32 %v4_c6e8, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_c8d0, i32* %ip.global-to-local, align 4
  %v4_cef0 = mul i32 %v1_ced4, 4
  %v5_cef0 = add i32 %v4_cef0, %v4_c6e8
  %v6_cef0 = inttoptr i32 %v5_cef0 to i32*
  %v7_cef0 = load i32, i32* %v6_cef0, align 4
  store i32 %v7_cef0, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_cdd0, i1* %cpsr_z.global-to-local, align 1
  %v1_cefc = add i32 %v7_cef0, 20
  store i32 %v1_cefc, i32* @r5, align 4
  br i1 %v3_cdd0, label %dec_label_pc_cf04, label %dec_label_pc_cde4

dec_label_pc_cf04:                                ; preds = %dec_label_pc_cee4, %dec_label_pc_cda8
  %v0_cf04 = call i32 @function_f468()
  %v1_cf04 = trunc i32 %v0_cf04 to i8
  %v4_cf08 = sdiv i32 %v0_cf04, 256
  store i32 %v4_cf08, i32* %r3.global-to-local, align 4
  %v3_cf0c = load i32, i32* @r4, align 4
  %v4_cf0c = add i32 %v3_cf0c, 4
  %v5_cf0c = inttoptr i32 %v4_cf0c to i8*
  store i8 %v1_cf04, i8* %v5_cf0c, align 1
  store i1 %v2_cf14, i1* %cpsr_z.global-to-local, align 1
  %v0_cf18 = load i32, i32* %r3.global-to-local, align 4
  %v1_cf18 = trunc i32 %v0_cf18 to i8
  %v2_cf18 = load i32, i32* @r4, align 4
  %v3_cf18 = add i32 %v2_cf18, 5
  %v4_cf18 = inttoptr i32 %v3_cf18 to i8*
  store i8 %v1_cf18, i8* %v4_cf18, align 1
  %v0_cf1c = load i32, i32* @r4, align 4
  %v1_cf1c = add i32 %v0_cf1c, 40
  store i32 %v1_cf1c, i32* %r0.global-to-local, align 4
  %v0_cf20 = load i32, i32* @sb, align 4
  store i32 %v0_cf20, i32* @r1, align 4
  %v0_cf24 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cf24, label %dec_label_pc_cdf8, label %dec_label_pc_cf28

dec_label_pc_cf28:                                ; preds = %dec_label_pc_cde4, %dec_label_pc_cf04
  %v0_cf28 = phi i32 [ %v1_cdf0, %dec_label_pc_cde4 ], [ %v1_cf1c, %dec_label_pc_cf04 ]
  %v1_cf28 = inttoptr i32 %v0_cf28 to i8*
  %v2_cf28 = call i32 @function_f5e8(i8* %v1_cf28)
  store i32 %v2_cf28, i32* %r0.global-to-local, align 4
  %v2_cdf8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cdf8

; uselistorder directives
  uselistorder i32 %v0_cf1c, { 1, 0 }
  uselistorder i32 %v7_cef0, { 1, 2, 0 }
  uselistorder i32 %v1_ced8, { 1, 2, 0 }
  uselistorder i32 %v1_ced4, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_ce78, { 0, 2, 1 }
  uselistorder i32 %v0_ce60, { 1, 0, 2 }
  uselistorder i32 %v3_ce3c, { 1, 0 }
  uselistorder i32 %v3_ce1c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_ce08, { 0, 2, 1 }
  uselistorder i32 %v0_cdf0, { 1, 0 }
  uselistorder i32 %v0_cda8, { 1, 0 }
  uselistorder i32 %v0_cd9c, { 1, 0 }
  uselistorder i1 %v3_cdd0, { 2, 3, 1, 0 }
  uselistorder i1 %v2_cf14, { 2, 1, 0 }
  uselistorder i32 %v1_cd84, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ccd8, { 0, 2, 1 }
  uselistorder i32 %v3_ccb8, { 1, 0 }
  uselistorder i32 %v0_cc8c, { 1, 0, 2 }
  uselistorder i32 %v3_cc80, { 1, 0 }
  uselistorder i32 %v1_cbe4, { 1, 0 }
  uselistorder i32 %v0_cbd8, { 1, 2, 0 }
  uselistorder i32 %v3_cb9c, { 1, 0 }
  uselistorder i32 %v2_cb88, { 1, 0 }
  uselistorder i32 %v3_cb6c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_cb64, { 1, 0 }
  uselistorder i32 %v3_cb40, { 1, 0, 2 }
  uselistorder i32 %v3_cb38, { 1, 0 }
  uselistorder i32 %v4_cb20, { 1, 0 }
  uselistorder i32 %v0_cb1c, { 0, 2, 1 }
  uselistorder i32 %v3_c91c, { 1, 2, 3, 0 }
  uselistorder i32 %v5_cad0, { 1, 0 }
  uselistorder i1 %v9_cab4, { 1, 0 }
  uselistorder i32 %v4_cac8, { 1, 0 }
  uselistorder i32 %v4_cac4, { 1, 0 }
  uselistorder i32 %storemerge35, { 0, 2, 1 }
  uselistorder i32 %v8_c9bc, { 1, 2, 0, 3 }
  uselistorder i32 %v3_c9a8, { 1, 0 }
  uselistorder i32 %v7_c974, { 4, 1, 3, 0, 2, 5 }
  uselistorder i32 %v1_cd44, { 1, 0 }
  uselistorder i32 %v1_cd2c, { 1, 0 }
  uselistorder i32 %v1_cd14, { 1, 0 }
  uselistorder i32 %v1_ccfc, { 1, 0 }
  uselistorder i32 %v1_cce4, { 1, 0 }
  uselistorder i32 %v5_cacc, { 1, 0 }
  uselistorder i32 %v3_ca04113, { 1, 0 }
  uselistorder i1 %v2_cae4, { 1, 0 }
  uselistorder i32 %v1_cae0, { 1, 0 }
  uselistorder i32 %v4_cadc, { 2, 0, 1 }
  uselistorder i32 %v4_cac0, { 1, 0 }
  uselistorder i1 %v3_c9ec, { 1, 0 }
  uselistorder i32 %v1_c900, { 2, 1, 0 }
  uselistorder i32 %v8_c8dc, { 2, 1, 0 }
  uselistorder i32 %v8_c8d8, { 1, 2, 0 }
  uselistorder i32 %v3_c8d0, { 1, 2, 3, 0 }
  uselistorder i32 %v0_c8cc, { 1, 0, 3, 2 }
  uselistorder i32 %v3_c88c, { 2, 3, 0, 1 }
  uselistorder i32 %v3_c888, { 3, 4, 1, 2, 5, 6, 0, 7, 8 }
  uselistorder i32 %v1_c878, { 1, 0 }
  uselistorder i32 %v1_c820, { 1, 0 }
  uselistorder i32 %v1_c800, { 1, 0 }
  uselistorder i32 %v1_c7e0, { 1, 0 }
  uselistorder i32 %v1_c7c0, { 1, 0 }
  uselistorder i32 %v1_c7a0, { 1, 0 }
  uselistorder i32 %v1_c768, { 1, 0 }
  uselistorder i32 %v4_c6e8, { 0, 3, 4, 1, 2 }
  uselistorder i32 %v4_c6d8, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_c6bc, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 50, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 67, 51, 52, 53, 54, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 31, 20, 21, 27, 22, 23, 24, 25, 26, 28, 29, 30, 50, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 46, 45, 47, 49, 48, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 20, 12, 13, 14, 15, 16, 17, 18, 19, 24, 21, 22, 23, 25, 27, 26, 45, 42, 28, 31, 29, 32, 33, 30, 35, 34, 36, 37, 38, 40, 39, 41, 65, 64, 43, 44, 46, 48, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 23, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 27, 24, 25, 26 }
  uselistorder i32 768, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_cf28, { 1, 0 }
  uselistorder label %dec_label_pc_cdf8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cd80, { 2, 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %.thread10, { 2, 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %dec_label_pc_cb14, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ca4c, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_c9e0, { 1, 0 }
  uselistorder label %dec_label_pc_c92c, { 1, 0 }
}

define i32 @function_cf34(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_cf34:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_cf34 = load i32, i32* @r4, align 4
  %v1_cf38 = urem i32 %arg1, 256
  store i32 %v1_cf38, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_cf50 = urem i32 %arg3, 256
  store i32 %v1_cf50, i32* @r4, align 4
  %v2_cf54 = call i32* @calloc(i32 %v1_cf38, i32 4)
  %v4_cf54 = ptrtoint i32* %v2_cf54 to i32
  %v0_cf58 = load i32, i32* @r5, align 4
  store i32 %v0_cf58, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cf68 = load i32, i32* @r4, align 4
  %v5_cf6c = inttoptr i32 %v0_cf58 to i32*
  %v6_cf6c = call i32 @function_92dc(i32 %v0_cf68, i32* %v5_cf6c, i32 2, i32 0)
  %v1_cf78 = urem i32 %v6_cf6c, 256
  store i32 %v1_cf78, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_cf84 = load i32, i32* @r5, align 4
  store i32 %v0_cf84, i32* %r1.global-to-local, align 4
  %v0_cf88 = load i32, i32* @r4, align 4
  %v5_cf8c = trunc i32 %v6_cf6c to i8
  %v6_cf90 = inttoptr i32 %v0_cf84 to i32*
  %v7_cf90 = call i32 @function_92dc(i32 %v0_cf88, i32* %v6_cf90, i32 3, i32 65535)
  %v0_cf94 = load i32, i32* @r5, align 4
  store i32 %v0_cf94, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_cf90, i32* @r8, align 4
  %v0_cfa4 = load i32, i32* @r4, align 4
  %v4_cfa8 = inttoptr i32 %v0_cf94 to i32*
  %v5_cfa8 = call i32 @function_92dc(i32 %v0_cfa4, i32* %v4_cfa8, i32 4, i32 64)
  %v1_cfb0 = urem i32 %v5_cfa8, 256
  store i32 %v1_cfb0, i32* %ip.global-to-local, align 4
  %v0_cfb4 = load i32, i32* @r5, align 4
  store i32 %v0_cfb4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cfc0 = load i32, i32* @r4, align 4
  %v6_cfc8 = inttoptr i32 %v0_cfb4 to i32*
  %v7_cfc8 = call i32 @function_92dc(i32 %v0_cfc0, i32* %v6_cfc8, i32 5, i32 0)
  %v1_cfd4 = urem i32 %v7_cfc8, 256
  store i32 %v1_cfd4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_cfe0 = load i32, i32* @r5, align 4
  store i32 %v0_cfe0, i32* %r1.global-to-local, align 4
  %v0_cfe4 = load i32, i32* @r4, align 4
  %v5_cfec = inttoptr i32 %v0_cfe0 to i32*
  %v6_cfec = call i32 @function_92dc(i32 %v0_cfe4, i32* %v5_cfec, i32 6, i32 65535)
  %v0_cff4 = load i32, i32* @r5, align 4
  store i32 %v0_cff4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_cfec, i32* @r7, align 4
  %v0_d004 = load i32, i32* @r4, align 4
  %v4_d008 = inttoptr i32 %v0_cff4 to i32*
  %v5_d008 = call i32 @function_92dc(i32 %v0_d004, i32* %v4_d008, i32 7, i32 65535)
  %v0_d010 = load i32, i32* @r5, align 4
  store i32 %v0_d010, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_d008, i32* @r6, align 4
  %v0_d020 = load i32, i32* @r4, align 4
  %v4_d024 = inttoptr i32 %v0_d010 to i32*
  %v5_d024 = call i32 @function_92dc(i32 %v0_d020, i32* %v4_d024, i32 17, i32 65535)
  %v0_d030 = load i32, i32* @r5, align 4
  store i32 %v0_d030, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_d03c = load i32, i32* @r4, align 4
  %v5_d040 = inttoptr i32 %v0_d030 to i32*
  %v6_d040 = call i32 @function_92dc(i32 %v0_d03c, i32* %v5_d040, i32 18, i32 65535)
  %v0_d044 = load i32, i32* @r5, align 4
  store i32 %v0_d044, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d054 = load i32, i32* @r4, align 4
  %v5_d058 = inttoptr i32 %v0_d044 to i32*
  %v6_d058 = call i32 @function_92dc(i32 %v0_d054, i32* %v5_d058, i32 11, i32 0)
  %v0_d05c = load i32, i32* @r5, align 4
  store i32 %v0_d05c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d06c = load i32, i32* @r4, align 4
  %v5_d070 = inttoptr i32 %v0_d05c to i32*
  %v6_d070 = call i32 @function_92dc(i32 %v0_d06c, i32* %v5_d070, i32 12, i32 1)
  %v0_d074 = load i32, i32* @r5, align 4
  store i32 %v0_d074, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d084 = load i32, i32* @r4, align 4
  %v5_d088 = inttoptr i32 %v0_d074 to i32*
  %v6_d088 = call i32 @function_92dc(i32 %v0_d084, i32* %v5_d088, i32 13, i32 0)
  %v0_d08c = load i32, i32* @r5, align 4
  store i32 %v0_d08c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d09c = load i32, i32* @r4, align 4
  %v5_d0a0 = inttoptr i32 %v0_d08c to i32*
  %v6_d0a0 = call i32 @function_92dc(i32 %v0_d09c, i32* %v5_d0a0, i32 14, i32 0)
  %v0_d0a4 = load i32, i32* @r5, align 4
  store i32 %v0_d0a4, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d0b4 = load i32, i32* @r4, align 4
  %v5_d0b8 = inttoptr i32 %v0_d0a4 to i32*
  %v6_d0b8 = call i32 @function_92dc(i32 %v0_d0b4, i32* %v5_d0b8, i32 15, i32 0)
  %v0_d0bc = load i32, i32* @r5, align 4
  store i32 %v0_d0bc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d0cc = load i32, i32* @r4, align 4
  %v5_d0d0 = inttoptr i32 %v0_d0bc to i32*
  %v6_d0d0 = call i32 @function_92dc(i32 %v0_d0cc, i32* %v5_d0d0, i32 16, i32 0)
  %v0_d0d4 = load i32, i32* @r5, align 4
  store i32 %v0_d0d4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_d0e4 = load i32, i32* @r4, align 4
  %v5_d0e8 = inttoptr i32 %v0_d0d4 to i32*
  %v6_d0e8 = call i32 @function_92dc(i32 %v0_d0e4, i32* %v5_d0e8, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d0f8 = load i32, i32* @r5, align 4
  store i32 %v0_d0f8, i32* %r1.global-to-local, align 4
  %v0_d0fc = load i32, i32* @r4, align 4
  %v4_d100 = inttoptr i32 %v0_d0f8 to i32*
  %v5_d100 = call i32 @function_92dc(i32 %v0_d0fc, i32* %v4_d100, i32 1, i32 1)
  %v2_d10c = load i32, i32* @global_var_1a40c.102, align 4
  store i32 %v2_d10c, i32* %r3.global-to-local, align 4
  %v1_d110 = urem i32 %v5_d100, 256
  store i32 %v1_d110, i32* %ip.global-to-local, align 4
  %v0_d114 = load i32, i32* @r5, align 4
  store i32 %v0_d114, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_d11c = load i32, i32* @r4, align 4
  %v5_d124 = inttoptr i32 %v0_d114 to i32*
  %v6_d124 = call i32 @function_9270(i32 %v0_d11c, i32* %v5_d124, i32 25, i32 %v2_d10c, i32 %v1_d110)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_d138 = call i32 @socket(i32 2, i32 3, i32 6)
  %v2_d13c = icmp eq i32 %v3_d138, -1
  store i1 %v2_d13c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d13c, label %dec_label_pc_d574, label %dec_label_pc_d148

dec_label_pc_d148:                                ; preds = %dec_label_pc_cf34
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d150 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d150, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_d164 = call i32 @setsockopt(i32 %v3_d138, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v2_d168 = icmp eq i32 %v7_d164, -1
  store i1 %v2_d168, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d168, label %dec_label_pc_d56c, label %dec_label_pc_d170

dec_label_pc_d170:                                ; preds = %dec_label_pc_d148
  %v0_d170 = load i32, i32* @r8, align 4
  %v0_d174 = load i32, i32* @r7, align 4
  %v0_d178 = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d180 = urem i32 %v0_d170, 65536
  store i32 %v3_d180, i32* %r2.global-to-local, align 4
  %v3_d184 = urem i32 %v0_d174, 65536
  store i32 %v3_d184, i32* %r3.global-to-local, align 4
  %v3_d188 = urem i32 %v0_d178, 65536
  store i32 %v3_d188, i32* %ip.global-to-local, align 4
  %v0_d18c = load i32, i32* @fp, align 4
  %v2_d18c = icmp eq i32 %v0_d18c, 0
  store i1 %v2_d18c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp76 = icmp slt i32 %v0_d18c, 1
  br i1 %tmp76, label %dec_label_pc_d68c, label %dec_label_pc_d1a4

dec_label_pc_d1a4:                                ; preds = %dec_label_pc_d170
  %v1_d1ac = add i32 %v6_d0e8, 40
  %tmp77 = mul i32 %v1_d1ac, 256
  %v1_d1c0 = urem i32 %v0_d174, 256
  %v1_d1c4 = and i32 %tmp77, 65280
  %v3_d1c8 = mul nuw nsw i32 %v1_d1c0, 256
  %v1_d1d0 = urem i32 %v0_d178, 256
  %tmp78 = udiv i32 %v0_d178, 256
  %v3_d1d4 = urem i32 %tmp78, 256
  %tmp79 = udiv i32 %v1_d1ac, 256
  %tmp80 = udiv i32 %v0_d174, 256
  %v4_d1dc = urem i32 %tmp80, 256
  %v5_d1dc = or i32 %v4_d1dc, %v3_d1c8
  store i32 %v5_d1dc, i32* @sl, align 4
  %v4_d1e0 = mul nuw nsw i32 %v1_d1d0, 256
  %v5_d1e0 = or i32 %v4_d1e0, %v3_d1d4
  store i32 %v5_d1e0, i32* @r6, align 4
  %tmp81 = udiv i32 %v0_d170, 256
  %v3_d1f0 = urem i32 %tmp81, 256
  %v1_d1f4 = urem i32 %v0_d170, 256
  %tmp82 = mul i32 %v5_d024, 256
  %v1_d1fc = and i32 %tmp82, 65280
  %v1_d200 = urem i32 %v6_d058, 2
  %v1_d204 = urem i32 %v6_d070, 2
  %v1_d208 = urem i32 %v6_d088, 2
  %tmp83 = udiv i32 %v5_d024, 256
  %v4_d20c = urem i32 %tmp83, 256
  %v5_d20c = or i32 %v4_d20c, %v1_d1fc
  store i32 %v5_d20c, i32* @r8, align 4
  %v1_d22c = urem i32 %v6_d0a0, 2
  %v1_d230 = urem i32 %v6_d0b8, 2
  %v1_d234 = urem i32 %v6_d0d0, 2
  %v1_d238 = urem i32 %v6_d088, 256
  %v4_d23c = mul nuw nsw i32 %v1_d1f4, 256
  %v5_d23c = or i32 %v4_d23c, %v3_d1f0
  store i32 %v5_d23c, i32* @r5, align 4
  %v3_d25026 = udiv i32 %v1_d1c4, 256
  store i32 %v3_d25026, i32* %r3.global-to-local, align 4
  store i32 %v1_d1f4, i32* %ip.global-to-local, align 4
  store i32 %v1_d1c0, i32* %r1.global-to-local, align 4
  store i32 %v1_d1d0, i32* %r2.global-to-local, align 4
  %v5_d26c = trunc i32 %v0_d174 to i8
  store i32 0, i32* %r4.global-to-local, align 4
  %sext9 = mul i32 %v5_cfa8, 16777216
  %v4_d2c8 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %v0_d170, 16777216
  %v4_d2d4 = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %tmp79, 16777216
  %v4_d2e8 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v1_d1ac, 16777216
  %v4_d2ec = sdiv i32 %sext12, 16777216
  %tmp = sub nsw i32 0, %v1_d200
  %v4_d33c = and i32 %tmp, 32
  %tmp94 = sub nsw i32 0, %v1_d204
  %v4_d350 = and i32 %tmp94, 16
  %tmp95 = sub nsw i32 0, %v1_d208
  %v4_d364 = and i32 %tmp95, 8
  %tmp96 = sub nsw i32 0, %v1_d22c
  %v4_d378 = and i32 %tmp96, 4
  %tmp97 = sub nsw i32 0, %v1_d230
  %v3_d38c = and i32 %tmp97, 2
  %sext13 = mul i32 %v0_d178, 16777216
  %v7_d3bc = sdiv i32 %sext13, 16777216
  %v1_d2d0 = trunc i32 %v4_d2c8 to i8
  %extract.t = trunc i32 %v4_d2d4 to i8
  %v3_d3bc = sext i8 %v5_d26c to i32
  %v2_d3e0 = icmp eq i32 %v1_d238, 0
  br label %dec_label_pc_d278

dec_label_pc_d278:                                ; preds = %bb90, %dec_label_pc_d1a4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d284 = call i32* @calloc(i32 1510, i32 1)
  %v4_d284 = ptrtoint i32* %v2_d284 to i32
  store i32 %v4_cf54, i32* %ip.global-to-local, align 4
  %v2_d290 = load i32, i32* %r4.global-to-local, align 4
  %v5_d290 = mul i32 %v2_d290, 4
  %v6_d290 = add i32 %v5_d290, %v4_cf54
  %v7_d290 = inttoptr i32 %v6_d290 to i32*
  store i32 %v4_d284, i32* %v7_d290, align 4
  %v3_d294 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d294, i32* %r3.global-to-local, align 4
  %v0_d298 = load i32, i32* %ip.global-to-local, align 4
  %v4_d298 = mul i32 %v3_d294, 4
  %v5_d298 = add i32 %v0_d298, %v4_d298
  %v6_d298 = inttoptr i32 %v5_d298 to i32*
  %v7_d298 = load i32, i32* %v6_d298, align 4
  store i32 %v7_d298, i32* @r7, align 4
  %v1_d29c = inttoptr i32 %v7_d298 to i8*
  %v2_d29c = load i8, i8* %v1_d29c, align 1
  %tmp98 = urem i8 %v2_d29c, 16
  %v1_d2a0 = zext i8 %tmp98 to i32
  %v1_d2a4 = or i32 %v1_d2a0, 64
  store i32 %v1_d2a4, i32* %r2.global-to-local, align 4
  %v1_d2a8 = trunc i32 %v1_d2a4 to i8
  store i8 %v1_d2a8, i8* %v1_d29c, align 1
  %v0_d2ac = load i32, i32* @r7, align 4
  %v1_d2ac = inttoptr i32 %v0_d2ac to i8*
  %v2_d2ac = load i8, i8* %v1_d2ac, align 1
  %v1_d2b0 = and i8 %v2_d2ac, -16
  %v1_d2b4 = or i8 %v1_d2b0, 5
  store i32 %v1_cfd4, i32* %r1.global-to-local, align 4
  store i8 %v1_d2b4, i8* %v1_d2ac, align 1
  %v2_d2c4 = load i32, i32* @r7, align 4
  %v3_d2c4 = add i32 %v2_d2c4, 1
  %v4_d2c4 = inttoptr i32 %v3_d2c4 to i8*
  store i8 %v5_cf8c, i8* %v4_d2c4, align 1
  store i32 %v4_d2c8, i32* %r3.global-to-local, align 4
  %v0_d2cc = load i32, i32* %r1.global-to-local, align 4
  %v2_d2cc = icmp eq i32 %v0_d2cc, 0
  store i1 %v2_d2cc, i1* %cpsr_z.global-to-local, align 1
  %v2_d2d0 = load i32, i32* @r7, align 4
  %v3_d2d0 = add i32 %v2_d2d0, 8
  %v4_d2d0 = inttoptr i32 %v3_d2d0 to i8*
  store i8 %v1_d2d0, i8* %v4_d2d0, align 1
  store i32 %v4_d2d4, i32* %r2.global-to-local, align 4
  %v0_d2d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d2d8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d278
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_d2dc = load i32, i32* @r7, align 4
  %v4_d2dc = add i32 %v3_d2dc, 6
  %v5_d2dc = inttoptr i32 %v4_d2dc to i8*
  store i8 64, i8* %v5_d2dc, align 1
  %v0_d2e4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t27 = trunc i32 %v0_d2e4.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d278, %bb
  %v0_d2e4.off0 = phi i8 [ %extract.t, %dec_label_pc_d278 ], [ %extract.t27, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_d2e4 = load i32, i32* @r7, align 4
  %v3_d2e4 = add i32 %v2_d2e4, 5
  %v4_d2e4 = inttoptr i32 %v3_d2e4 to i8*
  store i8 %v0_d2e4.off0, i8* %v4_d2e4, align 1
  store i32 %v4_d2e8, i32* %ip.global-to-local, align 4
  store i32 %v4_d2ec, i32* %r1.global-to-local, align 4
  %v0_d2f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d2f0, label %bb85, label %bb84

bb84:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %bb84
  %v0_d2f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_d2f4 = trunc i32 %v0_d2f4 to i8
  %v2_d2f4 = load i32, i32* @r7, align 4
  %v3_d2f4 = add i32 %v2_d2f4, 9
  %v4_d2f4 = inttoptr i32 %v3_d2f4 to i8*
  store i8 %v1_d2f4, i8* %v4_d2f4, align 1
  %v0_d2f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d2f8, label %bb87, label %bb86

bb86:                                             ; preds = %bb85
  %v1_d2f8 = load i32, i32* %r2.global-to-local, align 4
  %v2_d2f8 = trunc i32 %v1_d2f8 to i8
  %v3_d2f8 = load i32, i32* @r7, align 4
  %v4_d2f8 = add i32 %v3_d2f8, 7
  %v5_d2f8 = inttoptr i32 %v4_d2f8 to i8*
  store i8 %v2_d2f8, i8* %v5_d2f8, align 1
  br label %bb87

bb87:                                             ; preds = %bb85, %bb86
  %v3_d2fc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d2fc, i32* %r2.global-to-local, align 4
  %v0_d300 = load i32, i32* %ip.global-to-local, align 4
  %v1_d300 = trunc i32 %v0_d300 to i8
  %v2_d300 = load i32, i32* @r7, align 4
  %v3_d300 = add i32 %v2_d300, 2
  %v4_d300 = inttoptr i32 %v3_d300 to i8*
  store i8 %v1_d300, i8* %v4_d300, align 1
  store i32 %v6_d124, i32* %ip.global-to-local, align 4
  %v0_d308 = load i32, i32* %r2.global-to-local, align 4
  %v3_d308 = mul i32 %v0_d308, 32
  store i32 %v3_d308, i32* %r3.global-to-local, align 4
  %v1_d30c = load i32, i32* @r7, align 4
  %v2_d30c = add i32 %v1_d30c, 12
  %v3_d30c = inttoptr i32 %v2_d30c to i32*
  store i32 %v6_d124, i32* %v3_d30c, align 4
  %v0_d310 = load i32, i32* %r3.global-to-local, align 4
  %v1_d310 = load i32, i32* %r2.global-to-local, align 4
  %tmp99 = mul i32 %v1_d310, -8
  %v5_d310 = add i32 %v0_d310, %tmp99
  %v1_d314 = load i32, i32* @sb, align 4
  %v2_d314 = add i32 %v1_d314, %v5_d310
  store i32 %v2_d314, i32* %r3.global-to-local, align 4
  %v1_d318 = add i32 %v2_d314, 16
  %v2_d318 = inttoptr i32 %v1_d318 to i32*
  %v3_d318 = load i32, i32* %v2_d318, align 4
  store i32 %v3_d318, i32* %r2.global-to-local, align 4
  %v0_d31c = load i32, i32* %r1.global-to-local, align 4
  %v1_d31c = trunc i32 %v0_d31c to i8
  %v2_d31c = load i32, i32* @r7, align 4
  %v3_d31c = add i32 %v2_d31c, 3
  %v4_d31c = inttoptr i32 %v3_d31c to i8*
  store i8 %v1_d31c, i8* %v4_d31c, align 1
  %v0_d320 = load i32, i32* @r5, align 4
  %v1_d320 = trunc i32 %v0_d320 to i8
  %v2_d320 = load i32, i32* @r7, align 4
  %v3_d320 = add i32 %v2_d320, 4
  %v4_d320 = inttoptr i32 %v3_d320 to i8*
  store i8 %v1_d320, i8* %v4_d320, align 1
  %v0_d324 = load i32, i32* %r2.global-to-local, align 4
  %v1_d324 = load i32, i32* @r7, align 4
  %v2_d324 = add i32 %v1_d324, 16
  %v3_d324 = inttoptr i32 %v2_d324 to i32*
  store i32 %v0_d324, i32* %v3_d324, align 4
  %v0_d328 = load i32, i32* @sl, align 4
  %v1_d328 = trunc i32 %v0_d328 to i8
  %v2_d328 = load i32, i32* @r7, align 4
  %v3_d328 = add i32 %v2_d328, 20
  %v4_d328 = inttoptr i32 %v3_d328 to i8*
  store i8 %v1_d328, i8* %v4_d328, align 1
  %v0_d32c = load i32, i32* @r7, align 4
  %v1_d32c = add i32 %v0_d32c, 20
  store i32 %v1_d32c, i32* @r4, align 4
  %v1_d330 = add i32 %v0_d32c, 33
  %v2_d330 = inttoptr i32 %v1_d330 to i8*
  %v3_d330 = load i8, i8* %v2_d330, align 1
  %v4_d330 = zext i8 %v3_d330 to i32
  store i32 %v1_d200, i32* %r1.global-to-local, align 4
  %v1_d338 = and i32 %v4_d330, 223
  %v5_d33c = or i32 %v1_d338, %v4_d33c
  store i32 %v5_d33c, i32* %r3.global-to-local, align 4
  %v1_d340 = trunc i32 %v5_d33c to i8
  store i8 %v1_d340, i8* %v2_d330, align 1
  %v0_d344 = load i32, i32* @r4, align 4
  %v1_d344 = add i32 %v0_d344, 13
  %v2_d344 = inttoptr i32 %v1_d344 to i8*
  %v3_d344 = load i8, i8* %v2_d344, align 1
  %v4_d344 = zext i8 %v3_d344 to i32
  store i32 %v1_d204, i32* %r3.global-to-local, align 4
  %v1_d34c = and i32 %v4_d344, 239
  %v5_d350 = or i32 %v1_d34c, %v4_d350
  store i32 %v5_d350, i32* %r2.global-to-local, align 4
  %v1_d354 = trunc i32 %v5_d350 to i8
  store i8 %v1_d354, i8* %v2_d344, align 1
  %v0_d358 = load i32, i32* @r4, align 4
  %v1_d358 = add i32 %v0_d358, 13
  %v2_d358 = inttoptr i32 %v1_d358 to i8*
  %v3_d358 = load i8, i8* %v2_d358, align 1
  %v4_d358 = zext i8 %v3_d358 to i32
  store i32 %v1_d208, i32* %ip.global-to-local, align 4
  %v1_d360 = and i32 %v4_d358, 247
  %v5_d364 = or i32 %v1_d360, %v4_d364
  store i32 %v5_d364, i32* %r3.global-to-local, align 4
  %v1_d368 = trunc i32 %v5_d364 to i8
  store i8 %v1_d368, i8* %v2_d358, align 1
  %v0_d36c = load i32, i32* @r4, align 4
  %v1_d36c = add i32 %v0_d36c, 13
  %v2_d36c = inttoptr i32 %v1_d36c to i8*
  %v3_d36c = load i8, i8* %v2_d36c, align 1
  %v4_d36c = zext i8 %v3_d36c to i32
  store i32 %v1_d22c, i32* %r1.global-to-local, align 4
  %v1_d374 = and i32 %v4_d36c, 251
  %v5_d378 = or i32 %v1_d374, %v4_d378
  store i32 %v5_d378, i32* %r2.global-to-local, align 4
  %v1_d37c = trunc i32 %v5_d378 to i8
  store i8 %v1_d37c, i8* %v2_d36c, align 1
  %v0_d380 = load i32, i32* @r4, align 4
  %v1_d380 = add i32 %v0_d380, 13
  %v2_d380 = inttoptr i32 %v1_d380 to i8*
  %v3_d380 = load i8, i8* %v2_d380, align 1
  %v4_d380 = zext i8 %v3_d380 to i32
  store i32 %v1_d230, i32* %r2.global-to-local, align 4
  %v1_d388 = and i32 %v4_d380, 253
  %v4_d38c = or i32 %v1_d388, %v3_d38c
  store i32 %v4_d38c, i32* %r3.global-to-local, align 4
  %v1_d390 = trunc i32 %v4_d38c to i8
  store i8 %v1_d390, i8* %v2_d380, align 1
  %v0_d394 = load i32, i32* @r4, align 4
  %v1_d394 = add i32 %v0_d394, 12
  %v2_d394 = inttoptr i32 %v1_d394 to i8*
  %v3_d394 = load i8, i8* %v2_d394, align 1
  %v4_d394 = zext i8 %v3_d394 to i32
  store i32 %v4_d394, i32* %r2.global-to-local, align 4
  %v1_d398 = add i32 %v0_d394, 13
  %v2_d398 = inttoptr i32 %v1_d398 to i8*
  %v3_d398 = load i8, i8* %v2_d398, align 1
  %v4_d398 = zext i8 %v3_d398 to i32
  store i32 %v1_d234, i32* %ip.global-to-local, align 4
  %tmp100 = urem i8 %v3_d394, 16
  %v1_d3a0 = zext i8 %tmp100 to i32
  %v1_d3a4 = and i32 %v4_d398, 254
  %v2_d3a8 = or i32 %v1_d3a4, %v1_d234
  store i32 %v2_d3a8, i32* %r3.global-to-local, align 4
  %v1_d3ac = or i32 %v1_d3a0, 80
  store i32 %v1_d3ac, i32* %r2.global-to-local, align 4
  %v1_d3b0 = trunc i32 %v2_d3a8 to i8
  store i8 %v1_d3b0, i8* %v2_d398, align 1
  %v0_d3b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d3b4 = trunc i32 %v0_d3b4 to i8
  %v2_d3b4 = load i32, i32* @r4, align 4
  %v3_d3b4 = add i32 %v2_d3b4, 12
  %v4_d3b4 = inttoptr i32 %v3_d3b4 to i8*
  store i8 %v1_d3b4, i8* %v4_d3b4, align 1
  store i32 %v3_d3bc, i32* %r1.global-to-local, align 4
  store i32 %v7_d3bc, i32* %r2.global-to-local, align 4
  %v2_d3c0 = load i32, i32* @r4, align 4
  %v3_d3c0 = add i32 %v2_d3c0, 1
  %v4_d3c0 = inttoptr i32 %v3_d3c0 to i8*
  store i8 %v5_d26c, i8* %v4_d3c0, align 1
  %v0_d3c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d3c4 = trunc i32 %v0_d3c4 to i8
  %v2_d3c4 = load i32, i32* @r4, align 4
  %v3_d3c4 = add i32 %v2_d3c4, 3
  %v4_d3c4 = inttoptr i32 %v3_d3c4 to i8*
  store i8 %v1_d3c4, i8* %v4_d3c4, align 1
  %v0_d3c8 = load i32, i32* @r6, align 4
  %v1_d3c8 = trunc i32 %v0_d3c8 to i8
  %v2_d3c8 = load i32, i32* @r4, align 4
  %v3_d3c8 = add i32 %v2_d3c8, 2
  %v4_d3c8 = inttoptr i32 %v3_d3c8 to i8*
  store i8 %v1_d3c8, i8* %v4_d3c8, align 1
  %v0_d3cc = load i32, i32* @r8, align 4
  %v1_d3cc = load i32, i32* @r4, align 4
  %v2_d3cc = add i32 %v1_d3cc, 4
  %v3_d3cc = inttoptr i32 %v2_d3cc to i32*
  store i32 %v0_d3cc, i32* %v3_d3cc, align 4
  %v0_d3d0 = call i32 @function_f468()
  store i32 %v1_d238, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_d3d0, 16777216
  %v1_d3d8 = sdiv i32 %sext, 16777216
  store i32 %v1_d3d8, i32* %r2.global-to-local, align 4
  %v3_d3dc = ashr i32 %sext, 31
  store i32 %v3_d3dc, i32* %r3.global-to-local, align 4
  store i1 %v2_d3e0, i1* %cpsr_z.global-to-local, align 1
  %v1_d3e4 = trunc i32 %v3_d3dc to i8
  %v2_d3e4 = load i32, i32* @r4, align 4
  %v3_d3e4 = add i32 %v2_d3e4, 15
  %v4_d3e4 = inttoptr i32 %v3_d3e4 to i8*
  store i8 %v1_d3e4, i8* %v4_d3e4, align 1
  %v0_d3e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_d3f4.pre = load i32, i32* @r4, align 4
  br i1 %v0_d3e8, label %.thread14, label %bb88

bb88:                                             ; preds = %bb87
  %v2_d3e8 = add i32 %v2_d3f4.pre, 13
  %v3_d3e8 = inttoptr i32 %v2_d3e8 to i8*
  %v4_d3e8 = load i8, i8* %v3_d3e8, align 1
  %v5_d3e8 = zext i8 %v4_d3e8 to i32
  %v2_d3ec = or i32 %v5_d3e8, 8
  store i32 %v2_d3ec, i32* %r3.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb87, %bb88
  store i32 %v6_d0e8, i32* @r1, align 4
  %v0_d3f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d3f4 = trunc i32 %v0_d3f4 to i8
  %v3_d3f4 = add i32 %v2_d3f4.pre, 14
  %v4_d3f4 = inttoptr i32 %v3_d3f4 to i8*
  store i8 %v1_d3f4, i8* %v4_d3f4, align 1
  %v0_d3f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d3f8, label %bb90, label %bb89

bb89:                                             ; preds = %.thread14
  %v1_d3f8 = load i32, i32* %r3.global-to-local, align 4
  %v2_d3f8 = trunc i32 %v1_d3f8 to i8
  %v3_d3f8 = load i32, i32* @r4, align 4
  %v4_d3f8 = add i32 %v3_d3f8, 13
  %v5_d3f8 = inttoptr i32 %v4_d3f8 to i8*
  store i8 %v2_d3f8, i8* %v5_d3f8, align 1
  br label %bb90

bb90:                                             ; preds = %.thread14, %bb89
  %v0_d3fc = load i32, i32* @r7, align 4
  %v1_d3fc = add i32 %v0_d3fc, 40
  %v1_d400 = inttoptr i32 %v1_d3fc to i8*
  %v2_d400 = call i32 @function_f5e8(i8* %v1_d400)
  %v3_d404 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d404, i32* %r3.global-to-local, align 4
  %v1_d408 = add i32 %v3_d404, 1
  store i32 %v1_d408, i32* %r4.global-to-local, align 4
  %v0_d40c = load i32, i32* @fp, align 4
  %v9_d40c = icmp eq i32 %v0_d40c, %v1_d408
  store i1 %v9_d40c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d408, i32* %stack_var_-40, align 4
  %v8_d414 = icmp sgt i32 %v0_d40c, %v1_d408
  br i1 %v8_d414, label %dec_label_pc_d278, label %dec_label_pc_d418

dec_label_pc_d418:                                ; preds = %bb90
  store i32 %v6_d0e8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d420.preheader

dec_label_pc_d420.preheader:                      ; preds = %dec_label_pc_d418, %dec_label_pc_d68c
  %v0_d42018 = phi i32 [ %v0_d40c, %dec_label_pc_d418 ], [ %v0_d18c, %dec_label_pc_d68c ]
  %stack_var_-168.0.ph = phi i32 [ %v1_d1ac, %dec_label_pc_d418 ], [ %v1_d694, %dec_label_pc_d68c ]
  %storemerge = add i32 %v6_d0e8, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_d5d8 = icmp eq i32 %v6_d124, -1
  %v3_d5f4 = icmp eq i32 %v3_d180, 65535
  %v2_d670 = icmp eq i32 %v1_d110, 0
  br label %dec_label_pc_d420

dec_label_pc_d420:                                ; preds = %dec_label_pc_d4c8, %dec_label_pc_d420.preheader
  %v0_d420 = phi i32 [ %v0_d42018, %dec_label_pc_d420.preheader ], [ %v0_d55c, %dec_label_pc_d4c8 ]
  %v2_d420 = icmp eq i32 %v0_d420, 0
  store i1 %v2_d420, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp91 = icmp slt i32 %v0_d420, 1
  br label %dec_label_pc_d428

dec_label_pc_d428:                                ; preds = %dec_label_pc_d428, %dec_label_pc_d420
  br i1 %tmp91, label %dec_label_pc_d428, label %dec_label_pc_d42c

dec_label_pc_d42c:                                ; preds = %dec_label_pc_d428
  %v0_d42c = load i32, i32* @r8, align 4
  %v3_d42c = mul i32 %v0_d42c, 65536
  store i32 %v3_d42c, i32* %r2.global-to-local, align 4
  %tmp92 = mul i32 %v0_d42c, 256
  %v1_d434 = and i32 %tmp92, 65280
  store i32 %v1_d434, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp93 = udiv i32 %v0_d42c, 256
  %v4_d440 = urem i32 %tmp93, 256
  %v5_d440 = or i32 %v4_d440, %v1_d434
  store i32 %v5_d440, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_d448

dec_label_pc_d448:                                ; preds = %dec_label_pc_d4c8, %dec_label_pc_d42c
  %v1_d45c = phi i32 [ %v1_d558, %dec_label_pc_d4c8 ], [ 0, %dec_label_pc_d42c ]
  %v5_d44c = mul i32 %v1_d45c, 24
  %v1_d450 = load i32, i32* @sb, align 4
  %v2_d450 = add i32 %v1_d450, %v5_d44c
  store i32 %v2_d450, i32* %r3.global-to-local, align 4
  store i32 %v4_cf54, i32* %ip.global-to-local, align 4
  %v1_d458 = add i32 %v2_d450, 20
  %v2_d458 = inttoptr i32 %v1_d458 to i8*
  %v3_d458 = load i8, i8* %v2_d458, align 1
  %v4_d458 = zext i8 %v3_d458 to i32
  store i32 %v4_d458, i32* %r2.global-to-local, align 4
  %v4_d45c = mul i32 %v1_d45c, 4
  %v5_d45c = add i32 %v4_d45c, %v4_cf54
  %v6_d45c = inttoptr i32 %v5_d45c to i32*
  %v7_d45c = load i32, i32* %v6_d45c, align 4
  store i32 %v7_d45c, i32* @r5, align 4
  %v7_d460 = icmp eq i8 %v3_d458, 31
  store i1 %v7_d460, i1* %cpsr_z.global-to-local, align 1
  %v1_d464 = add i32 %v7_d45c, 20
  store i32 %v1_d464, i32* @r6, align 4
  %tmp101 = icmp ult i8 %v3_d458, 32
  br i1 %tmp101, label %dec_label_pc_d57c, label %dec_label_pc_d46c

dec_label_pc_d46c:                                ; preds = %dec_label_pc_d448
  store i32 %v6_d124, i32* %r1.global-to-local, align 4
  store i1 %v3_d5d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d5d8, label %dec_label_pc_d5e4, label %dec_label_pc_d478

dec_label_pc_d478:                                ; preds = %dec_label_pc_d57c, %dec_label_pc_d46c
  store i32 %v3_d180, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d5f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d5f4, label %dec_label_pc_d600, label %dec_label_pc_d48c

dec_label_pc_d48c:                                ; preds = %dec_label_pc_d5e4.dec_label_pc_d48c_crit_edge, %dec_label_pc_d478
  %v1_d490 = phi i32 [ %v1_d490.pre, %dec_label_pc_d5e4.dec_label_pc_d48c_crit_edge ], [ 65535, %dec_label_pc_d478 ]
  store i32 %v3_d184, i32* %r3.global-to-local, align 4
  %v9_d490 = icmp eq i32 %v3_d184, %v1_d490
  store i1 %v9_d490, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d490, label %dec_label_pc_d61c, label %dec_label_pc_d498

dec_label_pc_d498:                                ; preds = %dec_label_pc_d600.dec_label_pc_d498_crit_edge, %dec_label_pc_d48c
  %v1_d49c = phi i32 [ %v1_d49c.pre, %dec_label_pc_d600.dec_label_pc_d498_crit_edge ], [ %v1_d490, %dec_label_pc_d48c ]
  store i32 %v3_d188, i32* %ip.global-to-local, align 4
  %v9_d49c = icmp eq i32 %v3_d188, %v1_d49c
  store i1 %v9_d49c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d49c, label %dec_label_pc_d638, label %dec_label_pc_d4a4

dec_label_pc_d4a4:                                ; preds = %dec_label_pc_d61c.dec_label_pc_d4a4_crit_edge, %dec_label_pc_d498
  %v1_d4a8 = phi i32 [ %v1_d4a8.pre, %dec_label_pc_d61c.dec_label_pc_d4a4_crit_edge ], [ %v1_d49c, %dec_label_pc_d498 ]
  store i32 %v5_d024, i32* %r1.global-to-local, align 4
  %v9_d4a8 = icmp eq i32 %v5_d024, %v1_d4a8
  store i1 %v9_d4a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4a8, label %dec_label_pc_d654, label %dec_label_pc_d4b0

dec_label_pc_d4b0:                                ; preds = %dec_label_pc_d638.dec_label_pc_d4b0_crit_edge, %dec_label_pc_d4a4
  %v1_d4b4 = phi i32 [ %v1_d4b4.pre, %dec_label_pc_d638.dec_label_pc_d4b0_crit_edge ], [ %v1_d4a8, %dec_label_pc_d4a4 ]
  store i32 %v6_d040, i32* %r2.global-to-local, align 4
  %v9_d4b4 = icmp eq i32 %v6_d040, %v1_d4b4
  store i1 %v9_d4b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4b4, label %dec_label_pc_d668, label %dec_label_pc_d4bc

dec_label_pc_d4bc:                                ; preds = %dec_label_pc_d654, %dec_label_pc_d4b0
  store i32 %v1_d110, i32* %r3.global-to-local, align 4
  store i1 %v2_d670, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d670, label %dec_label_pc_d4c8, label %dec_label_pc_d67c

dec_label_pc_d4c8:                                ; preds = %dec_label_pc_d4bc, %dec_label_pc_d668, %dec_label_pc_d67c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d4cc = load i32, i32* @r7, align 4
  %v1_d4cc = trunc i32 %v0_d4cc to i8
  %v2_d4cc = load i32, i32* @r5, align 4
  %v3_d4cc = add i32 %v2_d4cc, 10
  %v4_d4cc = inttoptr i32 %v3_d4cc to i8*
  store i8 %v1_d4cc, i8* %v4_d4cc, align 1
  %v0_d4d0 = load i32, i32* @r7, align 4
  %v1_d4d0 = trunc i32 %v0_d4d0 to i8
  %v2_d4d0 = load i32, i32* @r5, align 4
  %v3_d4d0 = add i32 %v2_d4d0, 11
  %v4_d4d0 = inttoptr i32 %v3_d4d0 to i8*
  store i8 %v1_d4d0, i8* %v4_d4d0, align 1
  %v0_d4d4 = load i32, i32* @r5, align 4
  store i32 %v0_d4d4, i32* @r0, align 4
  %v2_d4d8 = call i32 @function_ddf4(i32 %v0_d4d4, i32 20)
  %v3_d4d8 = trunc i32 %v2_d4d8 to i8
  %v4_d4dc29 = udiv i32 %v2_d4d8, 256
  %v1_d4e0 = trunc i32 %v4_d4dc29 to i8
  %v2_d4e0 = load i32, i32* @r5, align 4
  %v3_d4e0 = add i32 %v2_d4e0, 11
  %v4_d4e0 = inttoptr i32 %v3_d4e0 to i8*
  store i8 %v1_d4e0, i8* %v4_d4e0, align 1
  %v3_d4e4 = load i32, i32* @r5, align 4
  %v4_d4e4 = add i32 %v3_d4e4, 10
  %v5_d4e4 = inttoptr i32 %v4_d4e4 to i8*
  store i8 %v3_d4d8, i8* %v5_d4e4, align 1
  %v0_d4e8 = load i32, i32* @r6, align 4
  store i32 %v0_d4e8, i32* @r1, align 4
  %v0_d4ec = load i32, i32* @sl, align 4
  store i32 %v0_d4ec, i32* %r2.global-to-local, align 4
  %v0_d4f0 = load i32, i32* @r8, align 4
  store i32 %v0_d4f0, i32* %r3.global-to-local, align 4
  %v0_d4f4 = load i32, i32* @r7, align 4
  %v1_d4f4 = trunc i32 %v0_d4f4 to i8
  %v3_d4f4 = add i32 %v0_d4e8, 16
  %v4_d4f4 = inttoptr i32 %v3_d4f4 to i8*
  store i8 %v1_d4f4, i8* %v4_d4f4, align 1
  %v0_d4f8 = load i32, i32* @r7, align 4
  %v1_d4f8 = trunc i32 %v0_d4f8 to i8
  %v2_d4f8 = load i32, i32* @r6, align 4
  %v3_d4f8 = add i32 %v2_d4f8, 17
  %v4_d4f8 = inttoptr i32 %v3_d4f8 to i8*
  store i8 %v1_d4f8, i8* %v4_d4f8, align 1
  %v0_d4fc = load i32, i32* @r5, align 4
  %v4_d500 = call i32 @function_de50(i32 %v0_d4fc, i32 %v0_d4e8, i32 %v0_d4ec, i32 %v0_d4f0)
  %v5_d500 = trunc i32 %v4_d500 to i8
  %v4_d50430 = udiv i32 %v4_d500, 256
  %v1_d508 = trunc i32 %v4_d50430 to i8
  %v2_d508 = load i32, i32* @r6, align 4
  %v3_d508 = add i32 %v2_d508, 17
  %v4_d508 = inttoptr i32 %v3_d508 to i8*
  store i8 %v1_d508, i8* %v4_d508, align 1
  %v3_d50c = load i32, i32* @r6, align 4
  %v4_d50c = add i32 %v3_d50c, 16
  %v5_d50c = inttoptr i32 %v4_d50c to i8*
  store i8 %v5_d500, i8* %v5_d50c, align 1
  %v3_d510 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d510, i32* %r3.global-to-local, align 4
  %v0_d514 = load i32, i32* @r5, align 4
  %v1_d514 = add i32 %v0_d514, 20
  %v2_d514 = inttoptr i32 %v1_d514 to i32*
  %v3_d514 = load i32, i32* %v2_d514, align 4
  %v3_d51c = udiv i32 %v3_d514, 65536
  store i32 %v3_d51c, i32* %r2.global-to-local, align 4
  %v5_d520 = mul i32 %v3_d510, 24
  %v1_d524 = load i32, i32* @sb, align 4
  %v2_d524 = add i32 %v1_d524, %v5_d520
  store i32 %v2_d524, i32* %ip.global-to-local, align 4
  %v3_d52828 = udiv i32 %v3_d514, 16777216
  %v1_d52c = trunc i32 %v3_d52828 to i8
  %v3_d52c = add i32 %v2_d524, 3
  %v4_d52c = inttoptr i32 %v3_d52c to i8*
  store i8 %v1_d52c, i8* %v4_d52c, align 1
  %v0_d530 = load i32, i32* %r2.global-to-local, align 4
  %v1_d530 = trunc i32 %v0_d530 to i8
  %v2_d530 = load i32, i32* %ip.global-to-local, align 4
  %v3_d530 = add i32 %v2_d530, 2
  %v4_d530 = inttoptr i32 %v3_d530 to i8*
  store i8 %v1_d530, i8* %v4_d530, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d538 = load i32, i32* @r5, align 4
  store i32 %v0_d538, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_d548 = load i32, i32* %ip.global-to-local, align 4
  %v4_d548 = inttoptr i32 %v0_d548 to %sockaddr*
  %v7_d550 = inttoptr i32 %v0_d538 to i32*
  %v9_d550 = call i32 @sendto(i32 %v3_d138, i32* %v7_d550, i32 %stack_var_-168.0.ph, i32 16384, %sockaddr* %v4_d548, i32 16)
  %v3_d554 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d554, i32* %r3.global-to-local, align 4
  %v1_d558 = add i32 %v3_d554, 1
  %v0_d55c = load i32, i32* @fp, align 4
  %v9_d55c = icmp eq i32 %v0_d55c, %v1_d558
  store i1 %v9_d55c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d558, i32* %stack_var_-40, align 4
  %v7_d564 = icmp sgt i32 %v0_d55c, %v1_d558
  br i1 %v7_d564, label %dec_label_pc_d448, label %dec_label_pc_d420

dec_label_pc_d56c:                                ; preds = %dec_label_pc_d148
  %v1_d570 = call i32 @close(i32 %v3_d138)
  br label %dec_label_pc_d574

dec_label_pc_d574:                                ; preds = %dec_label_pc_cf34, %dec_label_pc_d56c
  %v29_d578 = phi i32 [ -1, %dec_label_pc_cf34 ], [ %v1_d570, %dec_label_pc_d56c ]
  store i32 %v3_cf34, i32* %r4.global-to-local, align 4
  ret i32 %v29_d578

dec_label_pc_d57c:                                ; preds = %dec_label_pc_d448
  %v1_d57c = add i32 %v2_d450, 16
  %v2_d57c = inttoptr i32 %v1_d57c to i32*
  %v3_d57c = load i32, i32* %v2_d57c, align 4
  store i32 %v3_d57c, i32* %r4.global-to-local, align 4
  %v0_d580 = call i32 @function_f468()
  %v3_d584 = load i32, i32* %stack_var_-40, align 4
  %v5_d58c = mul i32 %v3_d584, 24
  %v1_d594 = load i32, i32* @sb, align 4
  %v2_d594 = add i32 %v1_d594, %v5_d58c
  store i32 %v2_d594, i32* %r1.global-to-local, align 4
  %v1_d598 = and i32 %v3_d57c, 65280
  store i32 %v1_d598, i32* %r3.global-to-local, align 4
  %v1_d590 = udiv i32 %v3_d57c, 256
  %v3_d59c = and i32 %v1_d590, 65280
  store i32 %v3_d59c, i32* %r2.global-to-local, align 4
  %v3_d5a0 = mul i32 %v3_d57c, 16777216
  store i32 %v3_d5a0, i32* %ip.global-to-local, align 4
  %v1_d5a4 = add i32 %v2_d594, 20
  %v2_d5a4 = inttoptr i32 %v1_d5a4 to i8*
  %v3_d5a4 = load i8, i8* %v2_d5a4, align 1
  %v4_d5a4 = zext i8 %v3_d5a4 to i32
  %v4_d5a8 = mul nuw nsw i32 %v1_d598, 256
  %v5_d5a8 = or i32 %v4_d5a8, %v3_d5a0
  store i32 %v5_d5a8, i32* %ip.global-to-local, align 4
  %v2_d5b0 = call i32 @llvm.bswap.i32(i32 %v3_d57c)
  %v7_d5b4 = lshr i32 %v0_d580, %v4_d5a4
  %v8_d5b4 = add i32 %v7_d5b4, %v2_d5b0
  store i32 %v8_d5b4, i32* %r2.global-to-local, align 4
  %v2_d5d0 = call i32 @llvm.bswap.i32(i32 %v8_d5b4)
  store i32 %v2_d5d0, i32* %r3.global-to-local, align 4
  store i32 %v6_d124, i32* %r1.global-to-local, align 4
  store i1 %v3_d5d8, i1* %cpsr_z.global-to-local, align 1
  %v1_d5dc = load i32, i32* @r5, align 4
  %v2_d5dc = add i32 %v1_d5dc, 16
  %v3_d5dc = inttoptr i32 %v2_d5dc to i32*
  store i32 %v2_d5d0, i32* %v3_d5dc, align 4
  br i1 %v3_d5d8, label %dec_label_pc_d5e4, label %dec_label_pc_d478

dec_label_pc_d5e4:                                ; preds = %dec_label_pc_d57c, %dec_label_pc_d46c
  %v0_d5e4 = call i32 @function_f468()
  store i32 %v3_d180, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d5f4, i1* %cpsr_z.global-to-local, align 1
  %v1_d5f8 = load i32, i32* @r5, align 4
  %v2_d5f8 = add i32 %v1_d5f8, 12
  %v3_d5f8 = inttoptr i32 %v2_d5f8 to i32*
  store i32 %v0_d5e4, i32* %v3_d5f8, align 4
  br i1 %v3_d5f4, label %dec_label_pc_d600, label %dec_label_pc_d5e4.dec_label_pc_d48c_crit_edge

dec_label_pc_d5e4.dec_label_pc_d48c_crit_edge:    ; preds = %dec_label_pc_d5e4
  %v1_d490.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d48c

dec_label_pc_d600:                                ; preds = %dec_label_pc_d5e4, %dec_label_pc_d478
  %v0_d600 = call i32 @function_f468()
  %v1_d600 = trunc i32 %v0_d600 to i8
  %v4_d60431 = udiv i32 %v0_d600, 256
  %v1_d608 = trunc i32 %v4_d60431 to i8
  %v2_d608 = load i32, i32* @r5, align 4
  %v3_d608 = add i32 %v2_d608, 5
  %v4_d608 = inttoptr i32 %v3_d608 to i8*
  store i8 %v1_d608, i8* %v4_d608, align 1
  store i32 %v3_d184, i32* %r3.global-to-local, align 4
  %v1_d610 = load i32, i32* @r4, align 4
  %v9_d610 = icmp eq i32 %v3_d184, %v1_d610
  store i1 %v9_d610, i1* %cpsr_z.global-to-local, align 1
  %v3_d614 = load i32, i32* @r5, align 4
  %v4_d614 = add i32 %v3_d614, 4
  %v5_d614 = inttoptr i32 %v4_d614 to i8*
  store i8 %v1_d600, i8* %v5_d614, align 1
  %v0_d618 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d618, label %dec_label_pc_d61c, label %dec_label_pc_d600.dec_label_pc_d498_crit_edge

dec_label_pc_d600.dec_label_pc_d498_crit_edge:    ; preds = %dec_label_pc_d600
  %v1_d49c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d498

dec_label_pc_d61c:                                ; preds = %dec_label_pc_d600, %dec_label_pc_d48c
  %v0_d61c = call i32 @function_f468()
  %v1_d61c = trunc i32 %v0_d61c to i8
  store i32 %v3_d188, i32* %ip.global-to-local, align 4
  %v4_d624 = sdiv i32 %v0_d61c, 256
  store i32 %v4_d624, i32* %r3.global-to-local, align 4
  %v1_d628 = load i32, i32* @r4, align 4
  %v9_d628 = icmp eq i32 %v3_d188, %v1_d628
  store i1 %v9_d628, i1* %cpsr_z.global-to-local, align 1
  %v3_d62c = load i32, i32* @r5, align 4
  %v4_d62c = add i32 %v3_d62c, 20
  %v5_d62c = inttoptr i32 %v4_d62c to i8*
  store i8 %v1_d61c, i8* %v5_d62c, align 1
  %v0_d630 = load i32, i32* %r3.global-to-local, align 4
  %v1_d630 = trunc i32 %v0_d630 to i8
  %v2_d630 = load i32, i32* @r6, align 4
  %v3_d630 = add i32 %v2_d630, 1
  %v4_d630 = inttoptr i32 %v3_d630 to i8*
  store i8 %v1_d630, i8* %v4_d630, align 1
  %v0_d634 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d634, label %dec_label_pc_d638, label %dec_label_pc_d61c.dec_label_pc_d4a4_crit_edge

dec_label_pc_d61c.dec_label_pc_d4a4_crit_edge:    ; preds = %dec_label_pc_d61c
  %v1_d4a8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4a4

dec_label_pc_d638:                                ; preds = %dec_label_pc_d61c, %dec_label_pc_d498
  %v0_d638 = call i32 @function_f468()
  %v1_d638 = trunc i32 %v0_d638 to i8
  store i32 %v5_d024, i32* %r1.global-to-local, align 4
  %v4_d640 = sdiv i32 %v0_d638, 256
  store i32 %v4_d640, i32* %r3.global-to-local, align 4
  %v1_d644 = load i32, i32* @r4, align 4
  %v9_d644 = icmp eq i32 %v5_d024, %v1_d644
  store i1 %v9_d644, i1* %cpsr_z.global-to-local, align 1
  %v1_d648 = trunc i32 %v4_d640 to i8
  %v2_d648 = load i32, i32* @r6, align 4
  %v3_d648 = add i32 %v2_d648, 3
  %v4_d648 = inttoptr i32 %v3_d648 to i8*
  store i8 %v1_d648, i8* %v4_d648, align 1
  %v3_d64c = load i32, i32* @r6, align 4
  %v4_d64c = add i32 %v3_d64c, 2
  %v5_d64c = inttoptr i32 %v4_d64c to i8*
  store i8 %v1_d638, i8* %v5_d64c, align 1
  %v0_d650 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d650, label %dec_label_pc_d654, label %dec_label_pc_d638.dec_label_pc_d4b0_crit_edge

dec_label_pc_d638.dec_label_pc_d4b0_crit_edge:    ; preds = %dec_label_pc_d638
  %v1_d4b4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4b0

dec_label_pc_d654:                                ; preds = %dec_label_pc_d638, %dec_label_pc_d4a4
  %v0_d654 = call i32 @function_f468()
  store i32 %v6_d040, i32* %r2.global-to-local, align 4
  %v1_d65c = load i32, i32* @r4, align 4
  %v9_d65c = icmp eq i32 %v6_d040, %v1_d65c
  store i1 %v9_d65c, i1* %cpsr_z.global-to-local, align 1
  %v1_d660 = load i32, i32* @r6, align 4
  %v2_d660 = add i32 %v1_d660, 4
  %v3_d660 = inttoptr i32 %v2_d660 to i32*
  store i32 %v0_d654, i32* %v3_d660, align 4
  br i1 %v9_d65c, label %dec_label_pc_d668, label %dec_label_pc_d4bc

dec_label_pc_d668:                                ; preds = %dec_label_pc_d654, %dec_label_pc_d4b0
  %v0_d668 = call i32 @function_f468()
  store i32 %v1_d110, i32* %r3.global-to-local, align 4
  store i1 %v2_d670, i1* %cpsr_z.global-to-local, align 1
  %v1_d674 = load i32, i32* @r6, align 4
  %v2_d674 = add i32 %v1_d674, 8
  %v3_d674 = inttoptr i32 %v2_d674 to i32*
  store i32 %v0_d668, i32* %v3_d674, align 4
  br i1 %v2_d670, label %dec_label_pc_d4c8, label %dec_label_pc_d67c

dec_label_pc_d67c:                                ; preds = %dec_label_pc_d4bc, %dec_label_pc_d668
  %v0_d67c = load i32, i32* @r5, align 4
  %v1_d67c = add i32 %v0_d67c, 40
  store i32 %v6_d0e8, i32* @r1, align 4
  %v1_d684 = inttoptr i32 %v1_d67c to i8*
  %v2_d684 = call i32 @function_f5e8(i8* %v1_d684)
  br label %dec_label_pc_d4c8

dec_label_pc_d68c:                                ; preds = %dec_label_pc_d170
  store i32 %v6_d0e8, i32* %r3.global-to-local, align 4
  %v1_d694 = add i32 %v6_d0e8, 40
  store i32 %v1_d694, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d420.preheader

; uselistorder directives
  uselistorder i32 %v1_d694, { 1, 0 }
  uselistorder i32 %v4_d640, { 1, 0 }
  uselistorder i32 %v2_d5d0, { 1, 0 }
  uselistorder i32 %v3_d5a0, { 1, 0 }
  uselistorder i32 %v3_d57c, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_d55c, { 1, 2, 0 }
  uselistorder i32 %v1_d558, { 2, 0, 3, 1 }
  uselistorder i32 %v0_d4e8, { 1, 0, 2 }
  uselistorder i32 %v0_d42c, { 2, 0, 1 }
  uselistorder i32 %v0_d420, { 1, 0 }
  uselistorder i1 %v2_d670, { 2, 3, 1, 0 }
  uselistorder i1 %v3_d5f4, { 1, 0, 2, 3 }
  uselistorder i1 %v3_d5d8, { 3, 2, 1, 0 }
  uselistorder i32 %v1_d408, { 1, 0, 2, 3 }
  uselistorder i8 %v5_d26c, { 1, 0 }
  uselistorder i32 %v1_d234, { 1, 0 }
  uselistorder i32 %v1_d230, { 1, 0 }
  uselistorder i32 %v1_d22c, { 1, 0 }
  uselistorder i32 %v1_d208, { 1, 0 }
  uselistorder i32 %v1_d204, { 1, 0 }
  uselistorder i32 %v1_d200, { 1, 0 }
  uselistorder i32 %v1_d1f4, { 1, 0 }
  uselistorder i32 %v1_d1d0, { 1, 0 }
  uselistorder i32 %v1_d1c0, { 1, 0 }
  uselistorder i32 %v1_d1ac, { 3, 0, 2, 1 }
  uselistorder i32 %v0_d18c, { 1, 0, 2 }
  uselistorder i32 %v3_d180, { 0, 1, 3, 2 }
  uselistorder i32 %v0_d174, { 3, 0, 1, 2 }
  uselistorder i32 %v0_d170, { 0, 2, 1, 3 }
  uselistorder i32 %v3_d138, { 1, 2, 0, 3 }
  uselistorder i32 %v6_d124, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v1_d110, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_d0e8, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_d040, { 3, 2, 1, 0 }
  uselistorder i32 %v5_d024, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_cfd4, { 1, 0 }
  uselistorder i32 %v6_cf6c, { 1, 0 }
  uselistorder i32 %v4_cf54, { 0, 3, 1, 2 }
  uselistorder i32 %v1_cf38, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder label %dec_label_pc_d67c, { 1, 0 }
  uselistorder label %dec_label_pc_d574, { 1, 0 }
  uselistorder label %dec_label_pc_d4c8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d420.preheader, { 1, 0 }
  uselistorder label %bb90, { 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %bb87, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d6a8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d6a8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_d6a8 = load i32, i32* @r4, align 4
  %v6_d6a8 = load i32, i32* @r5, align 4
  %v9_d6a8 = load i32, i32* @r6, align 4
  %v12_d6a8 = load i32, i32* @r7, align 4
  %v1_d6ac = urem i32 %arg1, 256
  store i32 %v1_d6ac, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_d6ac, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_d6c4 = urem i32 %arg3, 256
  store i32 %v1_d6c4, i32* @r4, align 4
  %v2_d6c8 = call i32* @calloc(i32 %v1_d6ac, i32 4)
  %v3_d6c8 = ptrtoint i32* %v2_d6c8 to i32
  %v0_d6cc = load i32, i32* @r5, align 4
  store i32 %v0_d6cc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v3_d6c8, i32* %fp.global-to-local, align 4
  %v0_d6dc = load i32, i32* @r4, align 4
  store i32 %v0_d6dc, i32* %r0.global-to-local, align 4
  %v4_d6e0 = inttoptr i32 %v0_d6cc to i32*
  %v5_d6e0 = call i32 @function_92dc(i32 %v0_d6dc, i32* %v4_d6e0, i32 2, i32 0)
  %v1_d6ec = urem i32 %v5_d6e0, 256
  store i32 %v1_d6ec, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d6f8 = load i32, i32* @r5, align 4
  store i32 %v0_d6f8, i32* %r1.global-to-local, align 4
  %v0_d6fc = load i32, i32* @r4, align 4
  store i32 %v0_d6fc, i32* %r0.global-to-local, align 4
  %v5_d700 = trunc i32 %v5_d6e0 to i8
  %v6_d704 = inttoptr i32 %v0_d6f8 to i32*
  %v7_d704 = call i32 @function_92dc(i32 %v0_d6fc, i32* %v6_d704, i32 3, i32 65535)
  %v0_d708 = load i32, i32* @r5, align 4
  store i32 %v0_d708, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_d718 = load i32, i32* @r4, align 4
  store i32 %v0_d718, i32* %r0.global-to-local, align 4
  %v5_d71c = inttoptr i32 %v0_d708 to i32*
  %v6_d71c = call i32 @function_92dc(i32 %v0_d718, i32* %v5_d71c, i32 4, i32 64)
  %v1_d724 = urem i32 %v6_d71c, 256
  store i32 %v1_d724, i32* %ip.global-to-local, align 4
  %v0_d728 = load i32, i32* @r5, align 4
  store i32 %v0_d728, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d734 = load i32, i32* @r4, align 4
  store i32 %v0_d734, i32* %r0.global-to-local, align 4
  %v6_d73c = inttoptr i32 %v0_d728 to i32*
  %v7_d73c = call i32 @function_92dc(i32 %v0_d734, i32* %v6_d73c, i32 5, i32 1)
  %v1_d748 = urem i32 %v7_d73c, 256
  store i32 %v1_d748, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d754 = load i32, i32* @r5, align 4
  store i32 %v0_d754, i32* %r1.global-to-local, align 4
  %v0_d758 = load i32, i32* @r4, align 4
  store i32 %v0_d758, i32* %r0.global-to-local, align 4
  %v5_d760 = inttoptr i32 %v0_d754 to i32*
  %v6_d760 = call i32 @function_92dc(i32 %v0_d758, i32* %v5_d760, i32 6, i32 65535)
  %v0_d768 = load i32, i32* @r5, align 4
  store i32 %v0_d768, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_d760, i32* @r7, align 4
  %v0_d778 = load i32, i32* @r4, align 4
  store i32 %v0_d778, i32* %r0.global-to-local, align 4
  %v4_d77c = inttoptr i32 %v0_d768 to i32*
  %v5_d77c = call i32 @function_92dc(i32 %v0_d778, i32* %v4_d77c, i32 7, i32 65535)
  %v0_d784 = load i32, i32* @r5, align 4
  store i32 %v0_d784, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_d77c, i32* @r6, align 4
  %v0_d794 = load i32, i32* @r4, align 4
  store i32 %v0_d794, i32* %r0.global-to-local, align 4
  %v4_d798 = inttoptr i32 %v0_d784 to i32*
  %v5_d798 = call i32 @function_92dc(i32 %v0_d794, i32* %v4_d798, i32 17, i32 65535)
  %v0_d79c = load i32, i32* @r5, align 4
  store i32 %v0_d79c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d7ac = load i32, i32* @r4, align 4
  store i32 %v0_d7ac, i32* %r0.global-to-local, align 4
  %v5_d7b0 = inttoptr i32 %v0_d79c to i32*
  %v6_d7b0 = call i32 @function_92dc(i32 %v0_d7ac, i32* %v5_d7b0, i32 18, i32 0)
  %v0_d7b4 = load i32, i32* @r5, align 4
  store i32 %v0_d7b4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d7c4 = load i32, i32* @r4, align 4
  store i32 %v0_d7c4, i32* %r0.global-to-local, align 4
  %v5_d7c8 = inttoptr i32 %v0_d7b4 to i32*
  %v6_d7c8 = call i32 @function_92dc(i32 %v0_d7c4, i32* %v5_d7c8, i32 11, i32 0)
  %v0_d7cc = load i32, i32* @r5, align 4
  store i32 %v0_d7cc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d7dc = load i32, i32* @r4, align 4
  store i32 %v0_d7dc, i32* %r0.global-to-local, align 4
  %v5_d7e0 = inttoptr i32 %v0_d7cc to i32*
  %v6_d7e0 = call i32 @function_92dc(i32 %v0_d7dc, i32* %v5_d7e0, i32 12, i32 0)
  %v0_d7e4 = load i32, i32* @r5, align 4
  store i32 %v0_d7e4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d7f4 = load i32, i32* @r4, align 4
  store i32 %v0_d7f4, i32* %r0.global-to-local, align 4
  %v5_d7f8 = inttoptr i32 %v0_d7e4 to i32*
  %v6_d7f8 = call i32 @function_92dc(i32 %v0_d7f4, i32* %v5_d7f8, i32 13, i32 0)
  %v0_d7fc = load i32, i32* @r5, align 4
  store i32 %v0_d7fc, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d80c = load i32, i32* @r4, align 4
  store i32 %v0_d80c, i32* %r0.global-to-local, align 4
  %v5_d810 = inttoptr i32 %v0_d7fc to i32*
  %v6_d810 = call i32 @function_92dc(i32 %v0_d80c, i32* %v5_d810, i32 14, i32 0)
  %v0_d814 = load i32, i32* @r5, align 4
  store i32 %v0_d814, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d824 = load i32, i32* @r4, align 4
  store i32 %v0_d824, i32* %r0.global-to-local, align 4
  %v5_d828 = inttoptr i32 %v0_d814 to i32*
  %v6_d828 = call i32 @function_92dc(i32 %v0_d824, i32* %v5_d828, i32 15, i32 1)
  %v0_d82c = load i32, i32* @r5, align 4
  store i32 %v0_d82c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d83c = load i32, i32* @r4, align 4
  store i32 %v0_d83c, i32* %r0.global-to-local, align 4
  %v5_d840 = inttoptr i32 %v0_d82c to i32*
  %v6_d840 = call i32 @function_92dc(i32 %v0_d83c, i32* %v5_d840, i32 16, i32 0)
  %v2_d84c = load i32, i32* @global_var_1a40c.102, align 4
  store i32 %v2_d84c, i32* %r3.global-to-local, align 4
  %v0_d850 = load i32, i32* @r5, align 4
  store i32 %v0_d850, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_d858 = load i32, i32* @r4, align 4
  store i32 %v0_d858, i32* %r0.global-to-local, align 4
  %v5_d85c = inttoptr i32 %v0_d850 to i32*
  %v6_d85c = call i32 @function_9270(i32 %v0_d858, i32* %v5_d85c, i32 25, i32 %v2_d84c, i32 %v6_d840)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_d870 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_d870, i32* %r0.global-to-local, align 4
  %v2_d874 = icmp eq i32 %v3_d870, -1
  store i1 %v2_d874, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d870, i32* %sb.global-to-local, align 4
  br i1 %v2_d874, label %dec_label_pc_dde8, label %dec_label_pc_d880

dec_label_pc_d880:                                ; preds = %dec_label_pc_d6a8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d888 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d888, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d89c = call i32 @setsockopt(i32 0, i32 3, i32 %v6_d888, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_d89c, i32* %r0.global-to-local, align 4
  %v2_d8a0 = icmp eq i32 %v6_d89c, -1
  store i1 %v2_d8a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d8a0, label %dec_label_pc_dde0, label %dec_label_pc_d8a8

dec_label_pc_d8a8:                                ; preds = %dec_label_pc_d880
  %v3_d8ac = mul i32 %v7_d704, 65536
  store i32 %v3_d8ac, i32* %r4.global-to-local, align 4
  %v3_d8b0 = urem i32 %v7_d704, 65536
  %v0_d8c0 = load i32, i32* @r7, align 4
  %v3_d8c0 = mul i32 %v0_d8c0, 65536
  store i32 %v3_d8c0, i32* %r0.global-to-local, align 4
  %v0_d8c4 = load i32, i32* @r6, align 4
  %v3_d8c4 = mul i32 %v0_d8c4, 65536
  store i32 %v3_d8c4, i32* %r5.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_d8cc = urem i32 %v0_d8c0, 65536
  store i32 %v3_d8cc, i32* %ip.global-to-local, align 4
  %v3_d8d0 = urem i32 %v0_d8c4, 65536
  store i32 %v3_d8d0, i32* %r2.global-to-local, align 4
  %v1_d8d4 = urem i32 %v6_d7c8, 256
  store i32 %v1_d8d4, i32* %r3.global-to-local, align 4
  %v0_d8d8 = load i32, i32* @sl, align 4
  %v2_d8d8 = icmp eq i32 %v0_d8d8, 0
  store i1 %v2_d8d8, i1* %cpsr_z.global-to-local, align 1
  %tmp70 = icmp slt i32 %v0_d8d8, 1
  br i1 %tmp70, label %dec_label_pc_db8c, label %dec_label_pc_d8ec

dec_label_pc_d8ec:                                ; preds = %dec_label_pc_d8a8
  %v1_d904 = urem i32 %v0_d8c4, 256
  %tmp71 = udiv i32 %v0_d8c0, 256
  %v3_d908 = urem i32 %tmp71, 256
  %v1_d90c = urem i32 %v0_d8c0, 256
  %v4_d910 = mul nuw nsw i32 %v1_d90c, 256
  %v5_d910 = or i32 %v4_d910, %v3_d908
  store i32 %v5_d910, i32* %r7.global-to-local, align 4
  %tmp72 = udiv i32 %v7_d704, 256
  %tmp73 = mul i32 %v5_d798, 256
  %v1_d92c = and i32 %tmp73, 65280
  %v1_d930 = urem i32 %v6_d7c8, 2
  %v3_d934 = mul nuw nsw i32 %v1_d904, 256
  store i32 %v3_d934, i32* %r1.global-to-local, align 4
  %v5_d938 = trunc i32 %tmp72 to i8
  %tmp74 = udiv i32 %v0_d8c4, 256
  %v4_d93c = urem i32 %tmp74, 256
  %v5_d93c = or i32 %v4_d93c, %v3_d934
  store i32 %v5_d93c, i32* %r6.global-to-local, align 4
  %v1_d940 = urem i32 %v6_d7e0, 2
  %v1_d944 = urem i32 %v6_d7f8, 2
  %tmp75 = udiv i32 %v5_d798, 256
  %v4_d948 = urem i32 %tmp75, 256
  %v5_d948 = or i32 %v4_d948, %v1_d92c
  store i32 %v5_d948, i32* %r5.global-to-local, align 4
  %v1_d968 = urem i32 %v6_d810, 2
  %v1_d96c = urem i32 %v6_d828, 2
  %v1_d978 = urem i32 %v6_d840, 2
  store i32 %v1_d978, i32* %r0.global-to-local, align 4
  %v3_d97c = udiv i32 %v7_d704, 65536
  store i32 %v3_d97c, i32* %r2.global-to-local, align 4
  store i32 %v1_d90c, i32* %r3.global-to-local, align 4
  store i32 %v1_d904, i32* %ip.global-to-local, align 4
  %v5_d994 = trunc i32 %v0_d8c4 to i8
  store i32 0, i32* %r4.global-to-local, align 4
  %sext = mul i32 %v6_d71c, 16777216
  %v4_d9e4 = sdiv i32 %sext, 16777216
  %tmp = sub nsw i32 0, %v1_d930
  %v4_da58 = and i32 %tmp, 32
  %tmp79 = sub nsw i32 0, %v1_d940
  %v4_da6c = and i32 %tmp79, 16
  %tmp80 = sub nsw i32 0, %v1_d944
  %v4_da80 = and i32 %tmp80, 8
  %tmp81 = sub nsw i32 0, %v1_d968
  %v4_da94 = and i32 %tmp81, 4
  %tmp82 = sub nsw i32 0, %v1_d96c
  %v3_daa8 = and i32 %tmp82, 2
  %v7_dad8 = sext i8 %v5_d994 to i32
  %sext78 = mul i32 %v0_d8c0, 16777216
  %v3_dad8 = sdiv i32 %sext78, 16777216
  br label %dec_label_pc_d99c

dec_label_pc_d99c:                                ; preds = %bb77, %dec_label_pc_d8ec
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_d9a4 = call i32* @calloc(i32 128, i32 1)
  %v4_d9a4 = ptrtoint i32* %v2_d9a4 to i32
  store i32 %v4_d9a4, i32* %r0.global-to-local, align 4
  %v3_d9a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d9a8, i32* %r2.global-to-local, align 4
  %v1_d9ac = load i32, i32* %fp.global-to-local, align 4
  %v2_d9ac = load i32, i32* %r4.global-to-local, align 4
  %v5_d9ac = mul i32 %v2_d9ac, 4
  %v6_d9ac = add i32 %v5_d9ac, %v1_d9ac
  %v7_d9ac = inttoptr i32 %v6_d9ac to i32*
  store i32 %v4_d9a4, i32* %v7_d9ac, align 4
  %v0_d9b0 = load i32, i32* %fp.global-to-local, align 4
  %v1_d9b0 = load i32, i32* %r2.global-to-local, align 4
  %v4_d9b0 = mul i32 %v1_d9b0, 4
  %v5_d9b0 = add i32 %v4_d9b0, %v0_d9b0
  %v6_d9b0 = inttoptr i32 %v5_d9b0 to i32*
  %v7_d9b0 = load i32, i32* %v6_d9b0, align 4
  store i32 %v7_d9b0, i32* %r4.global-to-local, align 4
  %v1_d9b4 = inttoptr i32 %v7_d9b0 to i8*
  %v2_d9b4 = load i8, i8* %v1_d9b4, align 1
  %tmp83 = urem i8 %v2_d9b4, 16
  %v1_d9b8 = zext i8 %tmp83 to i32
  %v1_d9bc = or i32 %v1_d9b8, 64
  store i32 %v1_d9bc, i32* %r3.global-to-local, align 4
  %v1_d9c0 = trunc i32 %v1_d9bc to i8
  store i8 %v1_d9c0, i8* %v1_d9b4, align 1
  %v0_d9c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_d9c4 = inttoptr i32 %v0_d9c4 to i8*
  %v2_d9c4 = load i8, i8* %v1_d9c4, align 1
  %v1_d9c8 = and i8 %v2_d9c4, -16
  %v1_d9cc = or i8 %v1_d9c8, 5
  store i32 %v1_d748, i32* %r0.global-to-local, align 4
  store i8 %v1_d9cc, i8* %v1_d9c4, align 1
  %v2_d9dc = load i32, i32* %r4.global-to-local, align 4
  %v3_d9dc = add i32 %v2_d9dc, 1
  %v4_d9dc = inttoptr i32 %v3_d9dc to i8*
  store i8 %v5_d700, i8* %v4_d9dc, align 1
  store i32 %v4_d9e4, i32* %r2.global-to-local, align 4
  %v2_d9e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_d9e8 = add i32 %v2_d9e8, 4
  %v4_d9e8 = inttoptr i32 %v3_d9e8 to i8*
  store i8 %v5_d938, i8* %v4_d9e8, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_d9f4 = load i32, i32* %r0.global-to-local, align 4
  %v2_d9f4 = icmp eq i32 %v0_d9f4, 0
  store i1 %v2_d9f4, i1* %cpsr_z.global-to-local, align 1
  %v2_d9f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_d9f8 = add i32 %v2_d9f8, 3
  %v4_d9f8 = inttoptr i32 %v3_d9f8 to i8*
  store i8 60, i8* %v4_d9f8, align 1
  store i32 %v3_d97c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_da04 = load i32, i32* %r2.global-to-local, align 4
  %v1_da04 = trunc i32 %v0_da04 to i8
  %v2_da04 = load i32, i32* %r4.global-to-local, align 4
  %v3_da04 = add i32 %v2_da04, 8
  %v4_da04 = inttoptr i32 %v3_da04 to i8*
  store i8 %v1_da04, i8* %v4_da04, align 1
  %v0_da08 = load i32, i32* %ip.global-to-local, align 4
  %v1_da08 = trunc i32 %v0_da08 to i8
  %v2_da08 = load i32, i32* %r4.global-to-local, align 4
  %v3_da08 = add i32 %v2_da08, 9
  %v4_da08 = inttoptr i32 %v3_da08 to i8*
  store i8 %v1_da08, i8* %v4_da08, align 1
  %v0_da0c = load i32, i32* %r3.global-to-local, align 4
  %v1_da0c = trunc i32 %v0_da0c to i8
  %v2_da0c = load i32, i32* %r4.global-to-local, align 4
  %v3_da0c = add i32 %v2_da0c, 2
  %v4_da0c = inttoptr i32 %v3_da0c to i8*
  store i8 %v1_da0c, i8* %v4_da0c, align 1
  %v3_da10 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_da10, i32* %r2.global-to-local, align 4
  %v0_da14 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da14, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d99c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_da18 = load i32, i32* %r4.global-to-local, align 4
  %v4_da18 = add i32 %v3_da18, 6
  %v5_da18 = inttoptr i32 %v4_da18 to i8*
  store i8 64, i8* %v5_da18, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d99c, %bb
  %v0_da1c = load i32, i32* %r0.global-to-local, align 4
  %v1_da1c = trunc i32 %v0_da1c to i8
  %v2_da1c = load i32, i32* %r4.global-to-local, align 4
  %v3_da1c = add i32 %v2_da1c, 5
  %v4_da1c = inttoptr i32 %v3_da1c to i8*
  store i8 %v1_da1c, i8* %v4_da1c, align 1
  %v0_da20 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da20, label %.thread10, label %bb76

.thread10:                                        ; preds = %.thread
  store i32 %v6_d85c, i32* %r0.global-to-local, align 4
  br label %bb77

bb76:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_d85c, i32* %r0.global-to-local, align 4
  %v3_da28 = load i32, i32* %r4.global-to-local, align 4
  %v4_da28 = add i32 %v3_da28, 7
  %v5_da28 = inttoptr i32 %v4_da28 to i8*
  store i8 0, i8* %v5_da28, align 1
  %v0_da30.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %.thread10, %bb76
  %v0_da30 = phi i32 [ %v6_d85c, %.thread10 ], [ %v0_da30.pre, %bb76 ]
  %v0_da2c = load i32, i32* %r2.global-to-local, align 4
  %v3_da2c = mul i32 %v0_da2c, 32
  store i32 %v3_da2c, i32* %r3.global-to-local, align 4
  %v1_da30 = load i32, i32* %r4.global-to-local, align 4
  %v2_da30 = add i32 %v1_da30, 12
  %v3_da30 = inttoptr i32 %v2_da30 to i32*
  store i32 %v0_da30, i32* %v3_da30, align 4
  %v0_da34 = load i32, i32* %r3.global-to-local, align 4
  %v1_da34 = load i32, i32* %r2.global-to-local, align 4
  %tmp84 = mul i32 %v1_da34, -8
  %v5_da34 = add i32 %v0_da34, %tmp84
  %v1_da38 = load i32, i32* @r8, align 4
  %v2_da38 = add i32 %v1_da38, %v5_da34
  store i32 %v2_da38, i32* %r3.global-to-local, align 4
  %v1_da3c = add i32 %v2_da38, 16
  %v2_da3c = inttoptr i32 %v1_da3c to i32*
  %v3_da3c = load i32, i32* %v2_da3c, align 4
  store i32 %v3_da3c, i32* %r2.global-to-local, align 4
  %v0_da40 = load i32, i32* %r7.global-to-local, align 4
  %v1_da40 = trunc i32 %v0_da40 to i8
  %v2_da40 = load i32, i32* %r4.global-to-local, align 4
  %v3_da40 = add i32 %v2_da40, 20
  %v4_da40 = inttoptr i32 %v3_da40 to i8*
  store i8 %v1_da40, i8* %v4_da40, align 1
  %v0_da44 = load i32, i32* %r2.global-to-local, align 4
  %v1_da44 = load i32, i32* %r4.global-to-local, align 4
  %v2_da44 = add i32 %v1_da44, 16
  %v3_da44 = inttoptr i32 %v2_da44 to i32*
  store i32 %v0_da44, i32* %v3_da44, align 4
  %v0_da48 = load i32, i32* %r4.global-to-local, align 4
  %v1_da48 = add i32 %v0_da48, 20
  store i32 %v1_da48, i32* %r1.global-to-local, align 4
  %v1_da4c = add i32 %v0_da48, 33
  %v2_da4c = inttoptr i32 %v1_da4c to i8*
  %v3_da4c = load i8, i8* %v2_da4c, align 1
  %v4_da4c = zext i8 %v3_da4c to i32
  store i32 %v1_d930, i32* %r2.global-to-local, align 4
  %v1_da54 = and i32 %v4_da4c, 223
  %v5_da58 = or i32 %v1_da54, %v4_da58
  store i32 %v5_da58, i32* %r3.global-to-local, align 4
  %v1_da5c = trunc i32 %v5_da58 to i8
  store i8 %v1_da5c, i8* %v2_da4c, align 1
  %v0_da60 = load i32, i32* %r1.global-to-local, align 4
  %v1_da60 = add i32 %v0_da60, 13
  %v2_da60 = inttoptr i32 %v1_da60 to i8*
  %v3_da60 = load i8, i8* %v2_da60, align 1
  %v4_da60 = zext i8 %v3_da60 to i32
  store i32 %v1_d940, i32* %r3.global-to-local, align 4
  %v1_da68 = and i32 %v4_da60, 239
  %v5_da6c = or i32 %v1_da68, %v4_da6c
  store i32 %v5_da6c, i32* %r2.global-to-local, align 4
  %v1_da70 = trunc i32 %v5_da6c to i8
  store i8 %v1_da70, i8* %v2_da60, align 1
  %v0_da74 = load i32, i32* %r1.global-to-local, align 4
  %v1_da74 = add i32 %v0_da74, 13
  %v2_da74 = inttoptr i32 %v1_da74 to i8*
  %v3_da74 = load i8, i8* %v2_da74, align 1
  %v4_da74 = zext i8 %v3_da74 to i32
  store i32 %v1_d944, i32* %ip.global-to-local, align 4
  %v1_da7c = and i32 %v4_da74, 247
  %v5_da80 = or i32 %v1_da7c, %v4_da80
  store i32 %v5_da80, i32* %r3.global-to-local, align 4
  %v1_da84 = trunc i32 %v5_da80 to i8
  store i8 %v1_da84, i8* %v2_da74, align 1
  %v0_da88 = load i32, i32* %r1.global-to-local, align 4
  %v1_da88 = add i32 %v0_da88, 13
  %v2_da88 = inttoptr i32 %v1_da88 to i8*
  %v3_da88 = load i8, i8* %v2_da88, align 1
  %v4_da88 = zext i8 %v3_da88 to i32
  store i32 %v1_d968, i32* %r0.global-to-local, align 4
  %v1_da90 = and i32 %v4_da88, 251
  %v5_da94 = or i32 %v1_da90, %v4_da94
  store i32 %v5_da94, i32* %r2.global-to-local, align 4
  %v1_da98 = trunc i32 %v5_da94 to i8
  store i8 %v1_da98, i8* %v2_da88, align 1
  %v0_da9c = load i32, i32* %r1.global-to-local, align 4
  %v1_da9c = add i32 %v0_da9c, 13
  %v2_da9c = inttoptr i32 %v1_da9c to i8*
  %v3_da9c = load i8, i8* %v2_da9c, align 1
  %v4_da9c = zext i8 %v3_da9c to i32
  store i32 %v1_d96c, i32* %r2.global-to-local, align 4
  %v1_daa4 = and i32 %v4_da9c, 253
  %v4_daa8 = or i32 %v1_daa4, %v3_daa8
  store i32 %v4_daa8, i32* %r3.global-to-local, align 4
  %v1_daac = trunc i32 %v4_daa8 to i8
  store i8 %v1_daac, i8* %v2_da9c, align 1
  %v0_dab0 = load i32, i32* %r1.global-to-local, align 4
  %v1_dab0 = add i32 %v0_dab0, 12
  %v2_dab0 = inttoptr i32 %v1_dab0 to i8*
  %v3_dab0 = load i8, i8* %v2_dab0, align 1
  %v4_dab0 = zext i8 %v3_dab0 to i32
  store i32 %v4_dab0, i32* %r2.global-to-local, align 4
  %v1_dab4 = add i32 %v0_dab0, 13
  %v2_dab4 = inttoptr i32 %v1_dab4 to i8*
  %v3_dab4 = load i8, i8* %v2_dab4, align 1
  %v4_dab4 = zext i8 %v3_dab4 to i32
  %tmp85 = urem i8 %v3_dab0, 16
  %v1_dabc = zext i8 %tmp85 to i32
  %v1_dac0 = and i32 %v4_dab4, 254
  %v2_dac4 = or i32 %v1_dac0, %v1_d978
  %v1_dac8 = or i32 %v1_dabc, 160
  store i32 %v1_dac8, i32* %r2.global-to-local, align 4
  %v1_dacc = trunc i32 %v2_dac4 to i8
  store i8 %v1_dacc, i8* %v2_dab4, align 1
  %v0_dad0 = load i32, i32* %r2.global-to-local, align 4
  %v1_dad0 = trunc i32 %v0_dad0 to i8
  %v2_dad0 = load i32, i32* %r1.global-to-local, align 4
  %v3_dad0 = add i32 %v2_dad0, 12
  %v4_dad0 = inttoptr i32 %v3_dad0 to i8*
  store i8 %v1_dad0, i8* %v4_dad0, align 1
  store i32 %v3_dad8, i32* %r0.global-to-local, align 4
  store i32 %v7_dad8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_dae4 = load i32, i32* %r1.global-to-local, align 4
  %v3_dae4 = add i32 %v2_dae4, 3
  %v4_dae4 = inttoptr i32 %v3_dae4 to i8*
  store i8 %v5_d994, i8* %v4_dae4, align 1
  %v0_dae8 = load i32, i32* %r0.global-to-local, align 4
  %v1_dae8 = trunc i32 %v0_dae8 to i8
  %v2_dae8 = load i32, i32* %r1.global-to-local, align 4
  %v3_dae8 = add i32 %v2_dae8, 1
  %v4_dae8 = inttoptr i32 %v3_dae8 to i8*
  store i8 %v1_dae8, i8* %v4_dae8, align 1
  %v0_daec = load i32, i32* %r6.global-to-local, align 4
  %v1_daec = trunc i32 %v0_daec to i8
  %v2_daec = load i32, i32* %r1.global-to-local, align 4
  %v3_daec = add i32 %v2_daec, 2
  %v4_daec = inttoptr i32 %v3_daec to i8*
  store i8 %v1_daec, i8* %v4_daec, align 1
  %v0_daf0 = load i32, i32* %r5.global-to-local, align 4
  %v1_daf0 = load i32, i32* %r1.global-to-local, align 4
  %v2_daf0 = add i32 %v1_daf0, 4
  %v3_daf0 = inttoptr i32 %v2_daf0 to i32*
  store i32 %v0_daf0, i32* %v3_daf0, align 4
  %v0_daf4 = load i32, i32* %ip.global-to-local, align 4
  %v1_daf4 = trunc i32 %v0_daf4 to i8
  %v2_daf4 = load i32, i32* %r4.global-to-local, align 4
  %v3_daf4 = add i32 %v2_daf4, 41
  %v4_daf4 = inttoptr i32 %v3_daf4 to i8*
  store i8 %v1_daf4, i8* %v4_daf4, align 1
  %v0_daf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_daf8 = trunc i32 %v0_daf8 to i8
  %v2_daf8 = load i32, i32* %r4.global-to-local, align 4
  %v3_daf8 = add i32 %v2_daf8, 40
  %v4_daf8 = inttoptr i32 %v3_daf8 to i8*
  store i8 %v1_daf8, i8* %v4_daf8, align 1
  %v0_dafc = call i32 @function_f468()
  %v1_db00 = mul i32 %v0_dafc, 256
  %v1_db04 = and i32 %v1_db00, 3840
  %v1_db08 = or i32 %v1_db04, 28672
  %v3_db10 = add nuw nsw i32 %v1_db08, 2048
  %v3_db1c8 = udiv i32 %v3_db10, 256
  store i32 %v3_db1c8, i32* %r1.global-to-local, align 4
  %v0_db20 = load i32, i32* %r4.global-to-local, align 4
  %v1_db20 = add i32 %v0_db20, 42
  store i32 %v1_db20, i32* %r2.global-to-local, align 4
  %v4_db24 = inttoptr i32 %v1_db20 to i8*
  store i8 5, i8* %v4_db24, align 1
  %v0_db28 = load i32, i32* %r1.global-to-local, align 4
  %v1_db28 = trunc i32 %v0_db28 to i8
  %v2_db28 = load i32, i32* %r2.global-to-local, align 4
  %v3_db28 = add i32 %v2_db28, 1
  %v4_db28 = inttoptr i32 %v3_db28 to i8*
  store i8 %v1_db28, i8* %v4_db28, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_db34 = load i32, i32* %r4.global-to-local, align 4
  %v3_db34 = add i32 %v2_db34, 47
  %v4_db34 = inttoptr i32 %v3_db34 to i8*
  store i8 10, i8* %v4_db34, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_db40 = load i32, i32* %r3.global-to-local, align 4
  %v1_db40 = trunc i32 %v0_db40 to i8
  %v2_db40 = load i32, i32* %r4.global-to-local, align 4
  %v3_db40 = add i32 %v2_db40, 46
  %v4_db40 = inttoptr i32 %v3_db40 to i8*
  store i8 %v1_db40, i8* %v4_db40, align 1
  %v0_db44 = load i32, i32* %r2.global-to-local, align 4
  %v1_db44 = trunc i32 %v0_db44 to i8
  %v2_db44 = load i32, i32* %r4.global-to-local, align 4
  %v3_db44 = add i32 %v2_db44, 45
  %v4_db44 = inttoptr i32 %v3_db44 to i8*
  store i8 %v1_db44, i8* %v4_db44, align 1
  %v0_db48 = load i32, i32* %r0.global-to-local, align 4
  %v1_db48 = trunc i32 %v0_db48 to i8
  %v2_db48 = load i32, i32* %r4.global-to-local, align 4
  %v3_db48 = add i32 %v2_db48, 44
  %v4_db48 = inttoptr i32 %v3_db48 to i8*
  store i8 %v1_db48, i8* %v4_db48, align 1
  %v0_db4c = call i32 @function_f468()
  store i32 %v0_db4c, i32* %r0.global-to-local, align 4
  %v2_db54 = load i32, i32* %r4.global-to-local, align 4
  %v3_db54 = add i32 %v2_db54, 56
  %v4_db54 = inttoptr i32 %v3_db54 to i8*
  store i8 1, i8* %v4_db54, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_db64 = load i32, i32* %r4.global-to-local, align 4
  %v2_db64 = add i32 %v1_db64, 48
  %v3_db64 = inttoptr i32 %v2_db64 to i32*
  store i32 %v0_db4c, i32* %v3_db64, align 4
  %v0_db68 = load i32, i32* %r2.global-to-local, align 4
  %v1_db68 = trunc i32 %v0_db68 to i8
  %v2_db68 = load i32, i32* %r4.global-to-local, align 4
  %v3_db68 = add i32 %v2_db68, 58
  %v4_db68 = inttoptr i32 %v3_db68 to i8*
  store i8 %v1_db68, i8* %v4_db68, align 1
  %v0_db6c = load i32, i32* %r3.global-to-local, align 4
  %v1_db6c = trunc i32 %v0_db6c to i8
  %v2_db6c = load i32, i32* %r4.global-to-local, align 4
  %v3_db6c = add i32 %v2_db6c, 59
  %v4_db6c = inttoptr i32 %v3_db6c to i8*
  store i8 %v1_db6c, i8* %v4_db6c, align 1
  %v0_db70 = load i32, i32* %ip.global-to-local, align 4
  %v1_db70 = load i32, i32* %r4.global-to-local, align 4
  %v2_db70 = add i32 %v1_db70, 52
  %v3_db70 = inttoptr i32 %v2_db70 to i32*
  store i32 %v0_db70, i32* %v3_db70, align 4
  %v0_db74 = load i32, i32* %r2.global-to-local, align 4
  %v1_db74 = trunc i32 %v0_db74 to i8
  %v2_db74 = load i32, i32* %r4.global-to-local, align 4
  %v3_db74 = add i32 %v2_db74, 57
  %v4_db74 = inttoptr i32 %v3_db74 to i8*
  store i8 %v1_db74, i8* %v4_db74, align 1
  %v3_db78 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_db78, i32* %r3.global-to-local, align 4
  %v1_db7c = add i32 %v3_db78, 1
  store i32 %v1_db7c, i32* %r4.global-to-local, align 4
  %v0_db80 = load i32, i32* @sl, align 4
  %v9_db80 = icmp eq i32 %v0_db80, %v1_db7c
  store i1 %v9_db80, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_db7c, i32* %stack_var_-40, align 4
  %v8_db88 = icmp sgt i32 %v0_db80, %v1_db7c
  br i1 %v8_db88, label %dec_label_pc_d99c, label %dec_label_pc_db8c

dec_label_pc_db8c:                                ; preds = %bb77, %dec_label_pc_d8a8
  %v0_db8c = phi i32 [ %v0_d8d8, %dec_label_pc_d8a8 ], [ %v0_db80, %bb77 ]
  %v2_db8c = icmp eq i32 %v0_db8c, 0
  store i1 %v2_db8c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_dd44 = icmp eq i32 %v3_d8b0, 65535
  %v2_ddc0 = icmp eq i32 %v1_d8d4, 0
  %v2_dbc8 = icmp eq i32 %v6_d85c, -1
  br label %dec_label_pc_db94.outer

dec_label_pc_db94.outer:                          ; preds = %dec_label_pc_dcc0, %dec_label_pc_db8c
  %v1_db94.ph.in = phi i32 [ %v1_dcb4, %dec_label_pc_dcc0 ], [ %v0_db8c, %dec_label_pc_db8c ]
  %v0_db94.ph = phi i1 [ %v2_dcc0, %dec_label_pc_dcc0 ], [ %v2_db8c, %dec_label_pc_db8c ]
  %v1_db94.ph = icmp slt i32 %v1_db94.ph.in, 0
  %v4_db94 = or i1 %v1_db94.ph, %v0_db94.ph
  br label %dec_label_pc_db94

dec_label_pc_db94:                                ; preds = %dec_label_pc_db94.outer, %dec_label_pc_db94
  br i1 %v4_db94, label %dec_label_pc_db94, label %dec_label_pc_db98

dec_label_pc_db98:                                ; preds = %dec_label_pc_db94
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_dba4

dec_label_pc_dba4:                                ; preds = %dec_label_pc_dc20, %dec_label_pc_db98
  %v1_dbb4 = phi i32 [ %v1_dcb0, %dec_label_pc_dc20 ], [ 0, %dec_label_pc_db98 ]
  %v5_dba8 = mul i32 %v1_dbb4, 24
  %v1_dbac = load i32, i32* @r8, align 4
  %v2_dbac = add i32 %v1_dbac, %v5_dba8
  store i32 %v2_dbac, i32* %r3.global-to-local, align 4
  %v1_dbb0 = add i32 %v2_dbac, 20
  %v2_dbb0 = inttoptr i32 %v1_dbb0 to i8*
  %v3_dbb0 = load i8, i8* %v2_dbb0, align 1
  %v4_dbb0 = zext i8 %v3_dbb0 to i32
  store i32 %v4_dbb0, i32* %r2.global-to-local, align 4
  %v0_dbb4 = load i32, i32* %fp.global-to-local, align 4
  %v4_dbb4 = mul i32 %v1_dbb4, 4
  %v5_dbb4 = add i32 %v0_dbb4, %v4_dbb4
  %v6_dbb4 = inttoptr i32 %v5_dbb4 to i32*
  %v7_dbb4 = load i32, i32* %v6_dbb4, align 4
  store i32 %v7_dbb4, i32* @r5, align 4
  %v7_dbb8 = icmp eq i8 %v3_dbb0, 31
  store i1 %v7_dbb8, i1* %cpsr_z.global-to-local, align 1
  %v1_dbbc = add i32 %v7_dbb4, 20
  store i32 %v1_dbbc, i32* @r6, align 4
  %tmp86 = icmp ult i8 %v3_dbb0, 32
  br i1 %tmp86, label %dec_label_pc_dccc, label %dec_label_pc_dbc4

dec_label_pc_dbc4:                                ; preds = %dec_label_pc_dba4
  store i32 %v6_d85c, i32* %r0.global-to-local, align 4
  store i1 %v2_dbc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dbc8, label %dec_label_pc_dd34, label %dec_label_pc_dbd0

dec_label_pc_dbd0:                                ; preds = %dec_label_pc_dccc, %dec_label_pc_dbc4
  store i32 %v3_d8b0, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_dd44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_dd44, label %dec_label_pc_dd50, label %dec_label_pc_dbe4

dec_label_pc_dbe4:                                ; preds = %dec_label_pc_dd34.dec_label_pc_dbe4_crit_edge, %dec_label_pc_dbd0
  %v1_dbe8 = phi i32 [ %v1_dbe8.pre, %dec_label_pc_dd34.dec_label_pc_dbe4_crit_edge ], [ 65535, %dec_label_pc_dbd0 ]
  store i32 %v3_d8cc, i32* %r3.global-to-local, align 4
  %v9_dbe8 = icmp eq i32 %v3_d8cc, %v1_dbe8
  store i1 %v9_dbe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dbe8, label %dec_label_pc_dd6c, label %dec_label_pc_dbf0

dec_label_pc_dbf0:                                ; preds = %dec_label_pc_dd50.dec_label_pc_dbf0_crit_edge, %dec_label_pc_dbe4
  %v1_dbf4 = phi i32 [ %v1_dbf4.pre, %dec_label_pc_dd50.dec_label_pc_dbf0_crit_edge ], [ %v1_dbe8, %dec_label_pc_dbe4 ]
  store i32 %v3_d8d0, i32* %ip.global-to-local, align 4
  %v9_dbf4 = icmp eq i32 %v3_d8d0, %v1_dbf4
  store i1 %v9_dbf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dbf4, label %dec_label_pc_dd88, label %dec_label_pc_dbfc

dec_label_pc_dbfc:                                ; preds = %dec_label_pc_dd6c.dec_label_pc_dbfc_crit_edge, %dec_label_pc_dbf0
  %v1_dc00 = phi i32 [ %v1_dc00.pre, %dec_label_pc_dd6c.dec_label_pc_dbfc_crit_edge ], [ %v1_dbf4, %dec_label_pc_dbf0 ]
  store i32 %v5_d798, i32* %r0.global-to-local, align 4
  %v9_dc00 = icmp eq i32 %v5_d798, %v1_dc00
  store i1 %v9_dc00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dc00, label %dec_label_pc_dda4, label %dec_label_pc_dc08

dec_label_pc_dc08:                                ; preds = %dec_label_pc_dd88.dec_label_pc_dc08_crit_edge, %dec_label_pc_dbfc
  %v1_dc0c = phi i32 [ %v1_dc0c.pre, %dec_label_pc_dd88.dec_label_pc_dc08_crit_edge ], [ %v1_dc00, %dec_label_pc_dbfc ]
  store i32 %v6_d7b0, i32* %r2.global-to-local, align 4
  %v9_dc0c = icmp eq i32 %v6_d7b0, %v1_dc0c
  store i1 %v9_dc0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dc0c, label %dec_label_pc_ddb8, label %dec_label_pc_dc14

dec_label_pc_dc14:                                ; preds = %dec_label_pc_dda4, %dec_label_pc_dc08
  store i32 %v1_d8d4, i32* %r3.global-to-local, align 4
  store i1 %v2_ddc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ddc0, label %dec_label_pc_dc20, label %dec_label_pc_ddcc

dec_label_pc_dc20:                                ; preds = %dec_label_pc_dc14, %dec_label_pc_ddb8, %dec_label_pc_ddcc
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_dc24 = load i32, i32* %r7.global-to-local, align 4
  %v1_dc24 = trunc i32 %v0_dc24 to i8
  %v2_dc24 = load i32, i32* @r5, align 4
  %v3_dc24 = add i32 %v2_dc24, 10
  %v4_dc24 = inttoptr i32 %v3_dc24 to i8*
  store i8 %v1_dc24, i8* %v4_dc24, align 1
  %v0_dc28 = load i32, i32* %r7.global-to-local, align 4
  %v1_dc28 = trunc i32 %v0_dc28 to i8
  %v2_dc28 = load i32, i32* @r5, align 4
  %v3_dc28 = add i32 %v2_dc28, 11
  %v4_dc28 = inttoptr i32 %v3_dc28 to i8*
  store i8 %v1_dc28, i8* %v4_dc28, align 1
  %v0_dc2c = load i32, i32* @r5, align 4
  store i32 %v0_dc2c, i32* @r0, align 4
  %v2_dc30 = call i32 @function_ddf4(i32 %v0_dc2c, i32 20)
  %v3_dc30 = trunc i32 %v2_dc30 to i8
  %v4_dc3428 = udiv i32 %v2_dc30, 256
  %v1_dc38 = trunc i32 %v4_dc3428 to i8
  %v2_dc38 = load i32, i32* @r5, align 4
  %v3_dc38 = add i32 %v2_dc38, 11
  %v4_dc38 = inttoptr i32 %v3_dc38 to i8*
  store i8 %v1_dc38, i8* %v4_dc38, align 1
  %v3_dc3c = load i32, i32* @r5, align 4
  %v4_dc3c = add i32 %v3_dc3c, 10
  %v5_dc3c = inttoptr i32 %v4_dc3c to i8*
  store i8 %v3_dc30, i8* %v5_dc3c, align 1
  %v0_dc40 = load i32, i32* @r6, align 4
  store i32 %v0_dc40, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_dc4c = load i32, i32* %r7.global-to-local, align 4
  %v1_dc4c = trunc i32 %v0_dc4c to i8
  %v3_dc4c = add i32 %v0_dc40, 16
  %v4_dc4c = inttoptr i32 %v3_dc4c to i8*
  store i8 %v1_dc4c, i8* %v4_dc4c, align 1
  %v0_dc50 = load i32, i32* %r7.global-to-local, align 4
  %v1_dc50 = trunc i32 %v0_dc50 to i8
  %v2_dc50 = load i32, i32* @r6, align 4
  %v3_dc50 = add i32 %v2_dc50, 17
  %v4_dc50 = inttoptr i32 %v3_dc50 to i8*
  store i8 %v1_dc50, i8* %v4_dc50, align 1
  %v0_dc54 = load i32, i32* @r5, align 4
  store i32 %v0_dc54, i32* %r0.global-to-local, align 4
  %v4_dc58 = call i32 @function_de50(i32 %v0_dc54, i32 %v0_dc40, i32 10240, i32 40)
  %v5_dc58 = trunc i32 %v4_dc58 to i8
  store i32 %v4_dc58, i32* %r0.global-to-local, align 4
  %v4_dc5c29 = udiv i32 %v4_dc58, 256
  %v1_dc60 = trunc i32 %v4_dc5c29 to i8
  %v2_dc60 = load i32, i32* @r6, align 4
  %v3_dc60 = add i32 %v2_dc60, 17
  %v4_dc60 = inttoptr i32 %v3_dc60 to i8*
  store i8 %v1_dc60, i8* %v4_dc60, align 1
  %v3_dc64 = load i32, i32* @r6, align 4
  %v4_dc64 = add i32 %v3_dc64, 16
  %v5_dc64 = inttoptr i32 %v4_dc64 to i8*
  store i8 %v5_dc58, i8* %v5_dc64, align 1
  %v3_dc68 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_dc68, i32* %r3.global-to-local, align 4
  %v0_dc6c = load i32, i32* @r5, align 4
  %v1_dc6c = add i32 %v0_dc6c, 20
  %v2_dc6c = inttoptr i32 %v1_dc6c to i32*
  %v3_dc6c = load i32, i32* %v2_dc6c, align 4
  %v3_dc74 = udiv i32 %v3_dc6c, 65536
  store i32 %v3_dc74, i32* %r2.global-to-local, align 4
  %v5_dc78 = mul i32 %v3_dc68, 24
  %v1_dc7c = load i32, i32* @r8, align 4
  %v2_dc7c = add i32 %v1_dc7c, %v5_dc78
  store i32 %v2_dc7c, i32* %ip.global-to-local, align 4
  %v3_dc8027 = udiv i32 %v3_dc6c, 16777216
  %v1_dc84 = trunc i32 %v3_dc8027 to i8
  %v3_dc84 = add i32 %v2_dc7c, 3
  %v4_dc84 = inttoptr i32 %v3_dc84 to i8*
  store i8 %v1_dc84, i8* %v4_dc84, align 1
  %v0_dc88 = load i32, i32* %r2.global-to-local, align 4
  %v1_dc88 = trunc i32 %v0_dc88 to i8
  %v2_dc88 = load i32, i32* %ip.global-to-local, align 4
  %v3_dc88 = add i32 %v2_dc88, 2
  %v4_dc88 = inttoptr i32 %v3_dc88 to i8*
  store i8 %v1_dc88, i8* %v4_dc88, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_dc90 = load i32, i32* @r5, align 4
  store i32 %v0_dc90, i32* %r1.global-to-local, align 4
  %v0_dc94 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_dc94, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_dca0 = load i32, i32* %ip.global-to-local, align 4
  %v4_dca0 = inttoptr i32 %v0_dca0 to %sockaddr*
  %v7_dca8 = inttoptr i32 %v0_dc90 to i32*
  %v9_dca8 = call i32 @sendto(i32 %v0_dc94, i32* %v7_dca8, i32 60, i32 16384, %sockaddr* %v4_dca0, i32 16)
  %v3_dcac = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_dcac, i32* %r3.global-to-local, align 4
  %v1_dcb0 = add i32 %v3_dcac, 1
  store i32 %v1_dcb0, i32* %r0.global-to-local, align 4
  %v1_dcb4 = load i32, i32* @sl, align 4
  %v9_dcb4 = icmp eq i32 %v1_dcb0, %v1_dcb4
  store i1 %v9_dcb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_dcb0, i32* %stack_var_-40, align 4
  %v5_dcbc = icmp slt i32 %v1_dcb0, %v1_dcb4
  br i1 %v5_dcbc, label %dec_label_pc_dba4, label %dec_label_pc_dcc0

dec_label_pc_dcc0:                                ; preds = %dec_label_pc_dc20
  %v2_dcc0 = icmp eq i32 %v1_dcb4, 0
  store i1 %v2_dcc0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_db94.outer

dec_label_pc_dccc:                                ; preds = %dec_label_pc_dba4
  %v1_dccc = add i32 %v2_dbac, 16
  %v2_dccc = inttoptr i32 %v1_dccc to i32*
  %v3_dccc = load i32, i32* %v2_dccc, align 4
  store i32 %v3_dccc, i32* %r4.global-to-local, align 4
  %v0_dcd0 = call i32 @function_f468()
  store i32 %v0_dcd0, i32* %r0.global-to-local, align 4
  %v3_dcd4 = load i32, i32* %stack_var_-40, align 4
  %v5_dcdc = mul i32 %v3_dcd4, 24
  %v0_dce0 = load i32, i32* %r4.global-to-local, align 4
  %v1_dce4 = load i32, i32* @r8, align 4
  %v2_dce4 = add i32 %v1_dce4, %v5_dcdc
  store i32 %v2_dce4, i32* %r1.global-to-local, align 4
  %v1_dce8 = and i32 %v0_dce0, 65280
  store i32 %v1_dce8, i32* %r3.global-to-local, align 4
  %v1_dce0 = udiv i32 %v0_dce0, 256
  %v3_dcec = and i32 %v1_dce0, 65280
  store i32 %v3_dcec, i32* %r2.global-to-local, align 4
  %v3_dcf0 = mul i32 %v0_dce0, 16777216
  store i32 %v3_dcf0, i32* %ip.global-to-local, align 4
  %v1_dcf4 = add i32 %v2_dce4, 20
  %v2_dcf4 = inttoptr i32 %v1_dcf4 to i8*
  %v3_dcf4 = load i8, i8* %v2_dcf4, align 1
  %v4_dcf4 = zext i8 %v3_dcf4 to i32
  %v4_dcf8 = mul nuw nsw i32 %v1_dce8, 256
  %v5_dcf8 = or i32 %v4_dcf8, %v3_dcf0
  store i32 %v5_dcf8, i32* %ip.global-to-local, align 4
  %v2_dd00 = call i32 @llvm.bswap.i32(i32 %v0_dce0)
  %v7_dd04 = lshr i32 %v0_dcd0, %v4_dcf4
  %v8_dd04 = add i32 %v7_dd04, %v2_dd00
  store i32 %v8_dd04, i32* %r2.global-to-local, align 4
  %v3_dd10 = mul i32 %v8_dd04, 16777216
  %v1_dd08 = mul i32 %v8_dd04, 256
  %v4_dd14 = and i32 %v1_dd08, 16711680
  %v5_dd14 = or i32 %v4_dd14, %v3_dd10
  store i32 %v5_dd14, i32* %r1.global-to-local, align 4
  store i32 %v6_d85c, i32* %r0.global-to-local, align 4
  %v2_dd24 = call i32 @llvm.bswap.i32(i32 %v8_dd04)
  store i32 %v2_dd24, i32* %r3.global-to-local, align 4
  store i1 %v2_dbc8, i1* %cpsr_z.global-to-local, align 1
  %v1_dd2c = load i32, i32* @r5, align 4
  %v2_dd2c = add i32 %v1_dd2c, 16
  %v3_dd2c = inttoptr i32 %v2_dd2c to i32*
  store i32 %v2_dd24, i32* %v3_dd2c, align 4
  br i1 %v2_dbc8, label %dec_label_pc_dd34, label %dec_label_pc_dbd0

dec_label_pc_dd34:                                ; preds = %dec_label_pc_dccc, %dec_label_pc_dbc4
  %v0_dd34 = call i32 @function_f468()
  store i32 %v0_dd34, i32* %r0.global-to-local, align 4
  store i32 %v3_d8b0, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_dd44, i1* %cpsr_z.global-to-local, align 1
  %v1_dd48 = load i32, i32* @r5, align 4
  %v2_dd48 = add i32 %v1_dd48, 12
  %v3_dd48 = inttoptr i32 %v2_dd48 to i32*
  store i32 %v0_dd34, i32* %v3_dd48, align 4
  br i1 %v3_dd44, label %dec_label_pc_dd50, label %dec_label_pc_dd34.dec_label_pc_dbe4_crit_edge

dec_label_pc_dd34.dec_label_pc_dbe4_crit_edge:    ; preds = %dec_label_pc_dd34
  %v1_dbe8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dbe4

dec_label_pc_dd50:                                ; preds = %dec_label_pc_dd34, %dec_label_pc_dbd0
  %v0_dd50 = call i32 @function_f468()
  %v1_dd50 = trunc i32 %v0_dd50 to i8
  store i32 %v0_dd50, i32* %r0.global-to-local, align 4
  %v4_dd5430 = udiv i32 %v0_dd50, 256
  %v1_dd58 = trunc i32 %v4_dd5430 to i8
  %v2_dd58 = load i32, i32* @r5, align 4
  %v3_dd58 = add i32 %v2_dd58, 5
  %v4_dd58 = inttoptr i32 %v3_dd58 to i8*
  store i8 %v1_dd58, i8* %v4_dd58, align 1
  store i32 %v3_d8cc, i32* %r3.global-to-local, align 4
  %v1_dd60 = load i32, i32* @r4, align 4
  %v9_dd60 = icmp eq i32 %v3_d8cc, %v1_dd60
  store i1 %v9_dd60, i1* %cpsr_z.global-to-local, align 1
  %v3_dd64 = load i32, i32* @r5, align 4
  %v4_dd64 = add i32 %v3_dd64, 4
  %v5_dd64 = inttoptr i32 %v4_dd64 to i8*
  store i8 %v1_dd50, i8* %v5_dd64, align 1
  %v0_dd68 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dd68, label %dec_label_pc_dd6c, label %dec_label_pc_dd50.dec_label_pc_dbf0_crit_edge

dec_label_pc_dd50.dec_label_pc_dbf0_crit_edge:    ; preds = %dec_label_pc_dd50
  %v1_dbf4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dbf0

dec_label_pc_dd6c:                                ; preds = %dec_label_pc_dd50, %dec_label_pc_dbe4
  %v0_dd6c = call i32 @function_f468()
  %v1_dd6c = trunc i32 %v0_dd6c to i8
  store i32 %v0_dd6c, i32* %r0.global-to-local, align 4
  store i32 %v3_d8d0, i32* %ip.global-to-local, align 4
  %v4_dd74 = sdiv i32 %v0_dd6c, 256
  store i32 %v4_dd74, i32* %r3.global-to-local, align 4
  %v1_dd78 = load i32, i32* @r4, align 4
  %v9_dd78 = icmp eq i32 %v3_d8d0, %v1_dd78
  store i1 %v9_dd78, i1* %cpsr_z.global-to-local, align 1
  %v3_dd7c = load i32, i32* @r5, align 4
  %v4_dd7c = add i32 %v3_dd7c, 20
  %v5_dd7c = inttoptr i32 %v4_dd7c to i8*
  store i8 %v1_dd6c, i8* %v5_dd7c, align 1
  %v0_dd80 = load i32, i32* %r3.global-to-local, align 4
  %v1_dd80 = trunc i32 %v0_dd80 to i8
  %v2_dd80 = load i32, i32* @r6, align 4
  %v3_dd80 = add i32 %v2_dd80, 1
  %v4_dd80 = inttoptr i32 %v3_dd80 to i8*
  store i8 %v1_dd80, i8* %v4_dd80, align 1
  %v0_dd84 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dd84, label %dec_label_pc_dd88, label %dec_label_pc_dd6c.dec_label_pc_dbfc_crit_edge

dec_label_pc_dd6c.dec_label_pc_dbfc_crit_edge:    ; preds = %dec_label_pc_dd6c
  %v1_dc00.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dbfc

dec_label_pc_dd88:                                ; preds = %dec_label_pc_dd6c, %dec_label_pc_dbf0
  %v0_dd88 = call i32 @function_f468()
  %v1_dd88 = trunc i32 %v0_dd88 to i8
  %v4_dd8c = sdiv i32 %v0_dd88, 256
  store i32 %v4_dd8c, i32* %r3.global-to-local, align 4
  %v3_dd90 = load i32, i32* @r6, align 4
  %v4_dd90 = add i32 %v3_dd90, 2
  %v5_dd90 = inttoptr i32 %v4_dd90 to i8*
  store i8 %v1_dd88, i8* %v5_dd90, align 1
  store i32 %v5_d798, i32* %r0.global-to-local, align 4
  %v1_dd98 = load i32, i32* @r4, align 4
  %v9_dd98 = icmp eq i32 %v5_d798, %v1_dd98
  store i1 %v9_dd98, i1* %cpsr_z.global-to-local, align 1
  %v0_dd9c = load i32, i32* %r3.global-to-local, align 4
  %v1_dd9c = trunc i32 %v0_dd9c to i8
  %v2_dd9c = load i32, i32* @r6, align 4
  %v3_dd9c = add i32 %v2_dd9c, 3
  %v4_dd9c = inttoptr i32 %v3_dd9c to i8*
  store i8 %v1_dd9c, i8* %v4_dd9c, align 1
  %v0_dda0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dda0, label %dec_label_pc_dda4, label %dec_label_pc_dd88.dec_label_pc_dc08_crit_edge

dec_label_pc_dd88.dec_label_pc_dc08_crit_edge:    ; preds = %dec_label_pc_dd88
  %v1_dc0c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dc08

dec_label_pc_dda4:                                ; preds = %dec_label_pc_dd88, %dec_label_pc_dbfc
  %v0_dda4 = call i32 @function_f468()
  store i32 %v0_dda4, i32* %r0.global-to-local, align 4
  store i32 %v6_d7b0, i32* %r2.global-to-local, align 4
  %v1_ddac = load i32, i32* @r4, align 4
  %v9_ddac = icmp eq i32 %v6_d7b0, %v1_ddac
  store i1 %v9_ddac, i1* %cpsr_z.global-to-local, align 1
  %v1_ddb0 = load i32, i32* @r6, align 4
  %v2_ddb0 = add i32 %v1_ddb0, 4
  %v3_ddb0 = inttoptr i32 %v2_ddb0 to i32*
  store i32 %v0_dda4, i32* %v3_ddb0, align 4
  br i1 %v9_ddac, label %dec_label_pc_ddb8, label %dec_label_pc_dc14

dec_label_pc_ddb8:                                ; preds = %dec_label_pc_dda4, %dec_label_pc_dc08
  %v0_ddb8 = call i32 @function_f468()
  store i32 %v0_ddb8, i32* %r0.global-to-local, align 4
  store i32 %v1_d8d4, i32* %r3.global-to-local, align 4
  store i1 %v2_ddc0, i1* %cpsr_z.global-to-local, align 1
  %v1_ddc4 = load i32, i32* @r6, align 4
  %v2_ddc4 = add i32 %v1_ddc4, 8
  %v3_ddc4 = inttoptr i32 %v2_ddc4 to i32*
  store i32 %v0_ddb8, i32* %v3_ddc4, align 4
  br i1 %v2_ddc0, label %dec_label_pc_dc20, label %dec_label_pc_ddcc

dec_label_pc_ddcc:                                ; preds = %dec_label_pc_dc14, %dec_label_pc_ddb8
  %v0_ddcc = call i32 @function_f468()
  %v1_ddcc = trunc i32 %v0_ddcc to i8
  store i32 %v0_ddcc, i32* %r0.global-to-local, align 4
  %v4_ddd0 = sdiv i32 %v0_ddcc, 256
  store i32 %v4_ddd0, i32* %r3.global-to-local, align 4
  %v1_ddd4 = trunc i32 %v4_ddd0 to i8
  %v2_ddd4 = load i32, i32* @r6, align 4
  %v3_ddd4 = add i32 %v2_ddd4, 19
  %v4_ddd4 = inttoptr i32 %v3_ddd4 to i8*
  store i8 %v1_ddd4, i8* %v4_ddd4, align 1
  %v3_ddd8 = load i32, i32* @r6, align 4
  %v4_ddd8 = add i32 %v3_ddd8, 18
  %v5_ddd8 = inttoptr i32 %v4_ddd8 to i8*
  store i8 %v1_ddcc, i8* %v5_ddd8, align 1
  br label %dec_label_pc_dc20

dec_label_pc_dde0:                                ; preds = %dec_label_pc_d880
  %v0_dde0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_dde0, i32* %r0.global-to-local, align 4
  %v1_dde4 = call i32 @close(i32 %v0_dde0)
  store i32 %v1_dde4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dde8

dec_label_pc_dde8:                                ; preds = %dec_label_pc_d6a8, %dec_label_pc_dde0
  %v29_ddec = phi i32 [ -1, %dec_label_pc_d6a8 ], [ %v1_dde4, %dec_label_pc_dde0 ]
  store i32 %v3_d6a8, i32* %r4.global-to-local, align 4
  store i32 %v6_d6a8, i32* %r5.global-to-local, align 4
  store i32 %v9_d6a8, i32* %r6.global-to-local, align 4
  store i32 %v12_d6a8, i32* %r7.global-to-local, align 4
  ret i32 %v29_ddec

; uselistorder directives
  uselistorder i32 %v4_ddd0, { 1, 0 }
  uselistorder i32 %v0_ddcc, { 0, 2, 1 }
  uselistorder i32 %v0_dd6c, { 0, 2, 1 }
  uselistorder i32 %v0_dd50, { 0, 2, 1 }
  uselistorder i32 %v2_dd24, { 1, 0 }
  uselistorder i32 %v8_dd04, { 2, 0, 1, 3 }
  uselistorder i32 %v3_dcf0, { 1, 0 }
  uselistorder i32 %v0_dce0, { 2, 0, 1, 3 }
  uselistorder i1 %v2_dcc0, { 1, 0 }
  uselistorder i32 %v1_dcb4, { 0, 2, 3, 1 }
  uselistorder i32 %v1_dcb0, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_dc58, { 0, 2, 1 }
  uselistorder i32 %v0_dc40, { 1, 0, 2 }
  uselistorder i1 %v2_dbc8, { 3, 0, 1, 2 }
  uselistorder i1 %v2_ddc0, { 2, 3, 1, 0 }
  uselistorder i1 %v3_dd44, { 3, 2, 0, 1 }
  uselistorder i32 %v1_db7c, { 1, 0, 2, 3 }
  uselistorder i8 %v5_d994, { 1, 0 }
  uselistorder i32 %v3_d97c, { 1, 0 }
  uselistorder i32 %v1_d978, { 1, 0 }
  uselistorder i32 %v1_d96c, { 1, 0 }
  uselistorder i32 %v1_d968, { 1, 0 }
  uselistorder i32 %v1_d944, { 1, 0 }
  uselistorder i32 %v1_d940, { 1, 0 }
  uselistorder i32 %v3_d934, { 1, 0 }
  uselistorder i32 %v1_d930, { 1, 0 }
  uselistorder i32 %v1_d90c, { 1, 0 }
  uselistorder i32 %v1_d904, { 1, 0 }
  uselistorder i32 %v1_d8d4, { 2, 1, 3, 0 }
  uselistorder i32 %v3_d8cc, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_d8c4, { 4, 0, 1, 3, 2 }
  uselistorder i32 %v0_d8c0, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v6_d85c, { 5, 3, 4, 0, 2, 1 }
  uselistorder i32 %v6_d7b0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_d798, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_d748, { 1, 0 }
  uselistorder i32 %v7_d704, { 0, 1, 3, 2 }
  uselistorder i32 %v5_d6e0, { 1, 0 }
  uselistorder i32 %v1_d6ac, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 31, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 6, 7, 5, 8, 9, 11, 10, 13, 12, 14, 16, 15, 17, 18, 19, 22, 20, 21, 23, 24, 25, 26, 27, 1, 28, 29, 30, 31, 35, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32 41, { 2, 0, 1, 3, 4 }
  uselistorder i32 -8, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_92dc, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 103, 104 }
  uselistorder label %dec_label_pc_dde8, { 1, 0 }
  uselistorder label %dec_label_pc_ddcc, { 1, 0 }
  uselistorder label %dec_label_pc_dc20, { 2, 1, 0 }
  uselistorder label %dec_label_pc_db94, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ddf4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ddf4:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_de24, label %dec_label_pc_de00

dec_label_pc_de00:                                ; preds = %dec_label_pc_ddf4
  %v0_de04.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_de04

dec_label_pc_de04:                                ; preds = %dec_label_pc_de04, %dec_label_pc_de00
  %v0_de18 = phi i32 [ %v2_de18, %dec_label_pc_de04 ], [ 0, %dec_label_pc_de00 ]
  %v0_de0c = phi i32 [ %v1_de0c, %dec_label_pc_de04 ], [ %arg1, %dec_label_pc_de00 ]
  %v0_de1c = phi i32 [ %v1_de1c, %dec_label_pc_de04 ], [ %v0_de04.pre, %dec_label_pc_de00 ]
  %v1_de04 = inttoptr i32 %v0_de1c to i8*
  %v2_de04 = load i8, i8* %v1_de04, align 1
  %v3_de04 = zext i8 %v2_de04 to i32
  %v1_de08 = add i32 %v0_de1c, 1
  %v2_de08 = inttoptr i32 %v1_de08 to i8*
  %v3_de08 = load i8, i8* %v2_de08, align 1
  %v4_de08 = zext i8 %v3_de08 to i32
  %v1_de0c = add i32 %v0_de0c, -2
  %v4_de10 = mul nuw nsw i32 %v4_de08, 256
  %v5_de10 = or i32 %v4_de10, %v3_de04
  %v2_de18 = add i32 %v5_de10, %v0_de18
  %v1_de1c = add i32 %v0_de1c, 2
  store i32 %v1_de1c, i32* @r0, align 4
  %v1_de0c.cmp = icmp ugt i32 %v1_de0c, 1
  br i1 %v1_de0c.cmp, label %dec_label_pc_de04, label %dec_label_pc_de24

dec_label_pc_de24:                                ; preds = %dec_label_pc_de04, %dec_label_pc_ddf4
  %v1_de2c = phi i32 [ 0, %dec_label_pc_ddf4 ], [ %v2_de18, %dec_label_pc_de04 ]
  %v0_de24 = phi i32 [ %arg1, %dec_label_pc_ddf4 ], [ %v1_de0c, %dec_label_pc_de04 ]
  %v7_de24 = icmp eq i32 %v0_de24, 1
  br i1 %v7_de24, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_de24
  %v1_de28 = load i32, i32* @r0, align 4
  %v2_de28 = inttoptr i32 %v1_de28 to i8*
  %v3_de28 = load i8, i8* %v2_de28, align 1
  %v4_de28 = zext i8 %v3_de28 to i32
  %v3_de2c = add i32 %v1_de2c, %v4_de28
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_de24, %bb
  %v0_de30 = phi i32 [ %v1_de2c, %dec_label_pc_de24 ], [ %v3_de2c, %bb ]
  %v3_de34 = urem i32 %v0_de30, 65536
  %v4_de38 = udiv i32 %v0_de30, 65536
  %v5_de38 = add nuw nsw i32 %v4_de38, %v3_de34
  %v4_de3c = udiv i32 %v5_de38, 65536
  %v5_de3c = add nuw nsw i32 %v4_de3c, %v5_de38
  %v1_de40 = urem i32 %v5_de3c, 65536
  %v3_de48 = xor i32 %v1_de40, 65535
  ret i32 %v3_de48

; uselistorder directives
  uselistorder i32 %v5_de38, { 1, 0 }
  uselistorder i32 %v1_de1c, { 1, 0 }
  uselistorder i32 %v1_de0c, { 1, 0, 2 }
  uselistorder i32 %v0_de1c, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_de50(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_de50:
  %v3_de60 = urem i32 %arg2, 65536
  %v1_de64 = add i32 %arg1, 12
  %v1_de68 = inttoptr i32 %v1_de64 to i32*
  %v2_de68 = load i32, i32* %v1_de68, align 4
  %v3_de68 = add i32 %arg1, 16
  %v4_de68 = inttoptr i32 %v3_de68 to i32*
  %v5_de68 = load i32, i32* %v4_de68, align 4
  %v7_de6c = icmp sgt i32 %arg3, 1
  br i1 %v7_de6c, label %dec_label_pc_de78.preheader, label %dec_label_pc_de98

dec_label_pc_de78.preheader:                      ; preds = %dec_label_pc_de50
  %v0_de78.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_de78

dec_label_pc_de78:                                ; preds = %dec_label_pc_de78.preheader, %dec_label_pc_de78
  %v0_de8c = phi i32 [ 0, %dec_label_pc_de78.preheader ], [ %v2_de8c, %dec_label_pc_de78 ]
  %v0_de80 = phi i32 [ %arg3, %dec_label_pc_de78.preheader ], [ %v1_de80, %dec_label_pc_de78 ]
  %v0_de90 = phi i32 [ %v0_de78.pre, %dec_label_pc_de78.preheader ], [ %v1_de90, %dec_label_pc_de78 ]
  %v1_de78 = inttoptr i32 %v0_de90 to i8*
  %v2_de78 = load i8, i8* %v1_de78, align 1
  %v3_de78 = zext i8 %v2_de78 to i32
  %v1_de7c = add i32 %v0_de90, 1
  %v2_de7c = inttoptr i32 %v1_de7c to i8*
  %v3_de7c = load i8, i8* %v2_de7c, align 1
  %v4_de7c = zext i8 %v3_de7c to i32
  %v1_de80 = add nsw i32 %v0_de80, -2
  %v4_de84 = mul nuw nsw i32 %v4_de7c, 256
  %v5_de84 = or i32 %v4_de84, %v3_de78
  %v2_de8c = add i32 %v5_de84, %v0_de8c
  %v1_de90 = add i32 %v0_de90, 2
  store i32 %v1_de90, i32* @r1, align 4
  %v8_de94 = icmp sgt i32 %v1_de80, 1
  br i1 %v8_de94, label %dec_label_pc_de78, label %dec_label_pc_de98

dec_label_pc_de98:                                ; preds = %dec_label_pc_de78, %dec_label_pc_de50
  %v1_dea0 = phi i32 [ 0, %dec_label_pc_de50 ], [ %v2_de8c, %dec_label_pc_de78 ]
  %v0_de98 = phi i32 [ %arg3, %dec_label_pc_de50 ], [ %v1_de80, %dec_label_pc_de78 ]
  %v7_de98 = icmp eq i32 %v0_de98, 1
  br i1 %v7_de98, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_de98
  %v1_de9c = load i32, i32* @r1, align 4
  %v2_de9c = inttoptr i32 %v1_de9c to i8*
  %v3_de9c = load i8, i8* %v2_de9c, align 1
  %v4_de9c = zext i8 %v3_de9c to i32
  %v3_dea0 = add i32 %v4_de9c, %v1_dea0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_de98, %bb
  %v0_dec4 = phi i32 [ %v1_dea0, %dec_label_pc_de98 ], [ %v3_dea0, %bb ]
  %v3_dea8 = urem i32 %v2_de68, 65536
  %v1_deb0 = add i32 %arg1, 9
  %v2_deb0 = inttoptr i32 %v1_deb0 to i8*
  %v3_deb0 = load i8, i8* %v2_deb0, align 1
  %v4_deb0 = zext i8 %v3_deb0 to i32
  %v3_deb4 = urem i32 %v5_de68, 65536
  %v4_deb8 = udiv i32 %v2_de68, 65536
  %v3_dec0 = mul nuw nsw i32 %v4_deb0, 256
  %v4_dec4 = udiv i32 %v5_de68, 65536
  %v5_dec4 = add i32 %v0_dec4, %v4_dec4
  %v2_dec8 = add i32 %v5_dec4, %v3_dec0
  %v5_deb8 = add nuw nsw i32 %v3_dea8, %v3_de60
  %v2_debc = add nuw nsw i32 %v5_deb8, %v4_deb8
  %v2_decc = add nuw nsw i32 %v2_debc, %v3_deb4
  %v2_ded0 = add i32 %v2_dec8, %v2_decc
  %tmp = icmp ult i32 %v2_ded0, 65536
  br i1 %tmp, label %dec_label_pc_def0, label %dec_label_pc_dedc

dec_label_pc_dedc:                                ; preds = %.thread, %dec_label_pc_dedc
  %v2_dee41 = phi i32 [ %v2_dee4, %dec_label_pc_dedc ], [ %v2_ded0, %.thread ]
  %v3_dee82.in = phi i32 [ %v2_dee4, %dec_label_pc_dedc ], [ %v2_ded0, %.thread ]
  %v3_dee82 = udiv i32 %v3_dee82.in, 65536
  %v3_dee0 = urem i32 %v2_dee41, 65536
  %v2_dee4 = add nuw nsw i32 %v3_dee0, %v3_dee82
  %tmp14 = icmp ult i32 %v2_dee4, 65536
  br i1 %tmp14, label %dec_label_pc_def0.loopexit, label %dec_label_pc_dedc

dec_label_pc_def0.loopexit:                       ; preds = %dec_label_pc_dedc
  br label %dec_label_pc_def0

dec_label_pc_def0:                                ; preds = %dec_label_pc_def0.loopexit, %.thread
  %v0_def0 = phi i32 [ %v2_dee4, %dec_label_pc_def0.loopexit ], [ %v2_ded0, %.thread ]
  %v1_def0 = urem i32 %v0_def0, 65536
  %v3_def8 = xor i32 %v1_def0, 65535
  ret i32 %v3_def8

; uselistorder directives
  uselistorder i32 %v2_dee4, { 2, 1, 3, 0 }
  uselistorder i32 %v2_ded0, { 3, 0, 2, 1 }
  uselistorder i32 %v1_dea0, { 1, 0 }
  uselistorder i32 %v1_de90, { 1, 0 }
  uselistorder i32 %v1_de80, { 0, 2, 1 }
  uselistorder i32 %v0_de90, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_dedc, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_de78, { 1, 0 }
}

define i32 @function_df00(i32 %arg1) local_unnamed_addr {
dec_label_pc_df00:
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_df00 = load i32, i32* @r4, align 4
  store i32 %v3_df00, i32* %stack_var_-36, align 4
  %v6_df00 = load i32, i32* @r5, align 4
  %v9_df00 = load i32, i32* @r6, align 4
  %v12_df00 = load i32, i32* @r7, align 4
  %v15_df00 = load i32, i32* @r8, align 4
  %v21_df00 = load i32, i32* @sl, align 4
  %v2_df14 = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_df14, i32* @sl, align 4
  %v3_df1c = mul i32 %arg1, 65536
  store i32 %v3_df1c, i32* @r5, align 4
  %v2_df28 = ptrtoint i32* %stack_var_-8773 to i32
  %v4_df34 = call i32* @memset(i32* nonnull %stack_var_-4677, i32 0, i32 4096)
  %v0_df48 = load i32, i32* @r5, align 4
  %v3_df48 = udiv i32 %v0_df48, 65536
  store i32 %v3_df48, i32* %r4.global-to-local, align 4
  %v4_df4c = call i32* @memset(i32* nonnull %stack_var_-8773, i32 0, i32 4096)
  %v2_df50 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_df50, i32* @r6, align 4
  %v1_df58 = mul nuw nsw i32 %v3_df48, 256
  %v3_df64 = and i32 %v1_df58, 65280
  store i32 %v3_df64, i32* %r4.global-to-local, align 4
  %v2_df6c = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_df6c, i32* %sb.global-to-local, align 4
  %v3_df70 = bitcast i8* %stack_var_-581 to i32*
  %v4_df70 = call i32* @memset(i32* %v3_df70, i32 0, i32 513)
  %v2_df74 = ptrtoint i8* %stack_var_-68 to i32
  store i32 %v2_df74, i32* %sb.global-to-local, align 4
  %v0_df7c = load i32, i32* %r4.global-to-local, align 4
  %v1_df7c = load i32, i32* @r5, align 4
  %v4_df7c = udiv i32 %v1_df7c, 16777216
  %v5_df7c = or i32 %v4_df7c, %v0_df7c
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_df9c = trunc i32 %v5_df7c to i8
  %v4_df9c = call i32 @function_11b68(i8 %v3_df9c, i32 16, i32 %v2_df74)
  %v2_dfa4 = call i32 @function_11704(i8* nonnull %stack_var_-68)
  %v7_dfa8 = icmp eq i32 %v2_dfa4, 2
  br i1 %v7_dfa8, label %dec_label_pc_e470, label %dec_label_pc_dfb0

dec_label_pc_dfb0:                                ; preds = %dec_label_pc_df00, %dec_label_pc_e470
  %v1_dfb4 = call i32 @function_11138(i32 13)
  %v1_dfbc = call i32 @function_11138(i32 14)
  %v1_dfc4 = call i32 @function_11138(i32 15)
  %v1_dfcc = call i32 @function_11138(i32 17)
  %v0_dfd0 = load i32, i32* @r4, align 4
  %v2_dfd8 = inttoptr i32 %v0_dfd0 to i32*
  %v3_dfd8 = call i32 @function_11054(i32 17, i32* %v2_dfd8)
  %v4_dfd8 = inttoptr i32 %v3_dfd8 to i8*
  %v0_dfdc = load i32, i32* @r4, align 4
  %v4_dfe0 = call i32 (i8*, i32, ...) @open(i8* %v4_dfd8, i32 %v0_dfdc)
  %v2_dfe4 = icmp eq i32 %v4_dfe0, -1
  store i32 %v4_dfe0, i32* @r8, align 4
  br i1 %v2_dfe4, label %dec_label_pc_e40c, label %dec_label_pc_dff0.preheader

dec_label_pc_dff0.preheader:                      ; preds = %dec_label_pc_dfb0
  %v4_dffc54 = call i32 @function_1195c(i32* %v3_df70, i32 512, i32 %v4_dfe0)
  %v2_e00056 = icmp eq i32 %v4_dffc54, 0
  br i1 %v2_e00056, label %dec_label_pc_e190.loopexit, label %dec_label_pc_e008.lr.ph

dec_label_pc_e008.lr.ph:                          ; preds = %dec_label_pc_dff0.preheader
  %v2_e050 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_e008

dec_label_pc_e008:                                ; preds = %dec_label_pc_e008.lr.ph, %dec_label_pc_dff0.backedge
  %v3_e00c = load i8, i8* %stack_var_-581, align 1
  %v4_e00c = sext i8 %v3_e00c to i32
  %v2_e010 = icmp eq i8 %v3_e00c, 0
  br i1 %v2_e010, label %bb123, label %bb

bb:                                               ; preds = %dec_label_pc_e008
  %v8_e014 = icmp eq i8 %v3_e00c, 58
  br i1 %v8_e014, label %.thread6, label %dec_label_pc_e028

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_e040

bb123:                                            ; preds = %dec_label_pc_e008
  br label %dec_label_pc_e040

dec_label_pc_e028:                                ; preds = %bb
  %v1_e030.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e02c

dec_label_pc_e02c:                                ; preds = %bb124, %dec_label_pc_e028
  %v0_e02c = phi i32 [ %v1_e02c, %bb124 ], [ 0, %dec_label_pc_e028 ]
  %v1_e02c = add i32 %v0_e02c, 1
  %v2_e030 = add i32 %v1_e02c, %v1_e030.pre
  %v3_e030 = inttoptr i32 %v2_e030 to i8*
  %v4_e030 = load i8, i8* %v3_e030, align 1
  %v6_e030 = zext i8 %v4_e030 to i32
  %v2_e034 = icmp eq i8 %v4_e030, 0
  br i1 %v2_e034, label %dec_label_pc_e040, label %bb124

bb124:                                            ; preds = %dec_label_pc_e02c
  %v8_e038 = icmp eq i8 %v4_e030, 58
  br i1 %v8_e038, label %dec_label_pc_e040, label %dec_label_pc_e02c

dec_label_pc_e040:                                ; preds = %dec_label_pc_e02c, %bb124, %bb123, %.thread6
  %v1_e06c = phi i32 [ 0, %.thread6 ], [ 0, %bb123 ], [ %v1_e02c, %bb124 ], [ %v1_e02c, %dec_label_pc_e02c ]
  %v0_e040 = phi i32 [ %v4_e00c, %.thread6 ], [ %v4_e00c, %bb123 ], [ %v6_e030, %bb124 ], [ %v6_e030, %dec_label_pc_e02c ]
  %v2_e040 = icmp eq i32 %v0_e040, 0
  br i1 %v2_e040, label %dec_label_pc_dff0.backedge, label %dec_label_pc_e048

dec_label_pc_dff0.backedge:                       ; preds = %dec_label_pc_e040, %dec_label_pc_e118, %dec_label_pc_e164, %dec_label_pc_e08c
  %v0_dff8 = load i32, i32* @r8, align 4
  %v4_dffc = call i32 @function_1195c(i32* %v3_df70, i32 512, i32 %v0_dff8)
  %v2_e000 = icmp eq i32 %v4_dffc, 0
  br i1 %v2_e000, label %dec_label_pc_e190.loopexit, label %dec_label_pc_e008

dec_label_pc_e048:                                ; preds = %dec_label_pc_e040
  %v1_e04c = add i32 %v1_e06c, 2
  %v2_e054 = add i32 %v1_e04c, %v2_e050
  %v1_e058 = add i32 %v2_e054, -545
  %v2_e058 = inttoptr i32 %v1_e058 to i8*
  %v3_e058 = load i8, i8* %v2_e058, align 1
  %v2_e05c = icmp eq i8 %v3_e058, 0
  br i1 %v2_e05c, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_e048
  %v8_e060 = icmp eq i8 %v3_e058, 32
  br i1 %v8_e060, label %.thread10, label %dec_label_pc_e06c

.thread10:                                        ; preds = %bb125
  store i32 %v1_e04c, i32* @r5, align 4
  br label %dec_label_pc_e08c

bb126:                                            ; preds = %dec_label_pc_e048
  store i32 %v1_e04c, i32* @r5, align 4
  br label %dec_label_pc_e08c

dec_label_pc_e06c:                                ; preds = %bb125
  %v0_e06c = load i32, i32* @r6, align 4
  %v2_e06c = add i32 %v0_e06c, %v1_e06c
  br label %dec_label_pc_e070

dec_label_pc_e070:                                ; preds = %bb127, %dec_label_pc_e06c
  %v0_e07c13 = phi i32 [ %v1_e07c, %bb127 ], [ %v2_e06c, %dec_label_pc_e06c ]
  %v1_e070 = add i32 %v0_e07c13, 3
  %v2_e070 = inttoptr i32 %v1_e070 to i8*
  %v3_e070 = load i8, i8* %v2_e070, align 1
  %v2_e074 = icmp eq i8 %v3_e070, 0
  br i1 %v2_e074, label %.thread12, label %bb127

.thread12:                                        ; preds = %dec_label_pc_e070
  %v1_e07c14 = add i32 %v0_e07c13, 1
  br label %dec_label_pc_e084

bb127:                                            ; preds = %dec_label_pc_e070
  %v8_e078 = icmp eq i8 %v3_e070, 32
  %v1_e07c = add i32 %v0_e07c13, 1
  br i1 %v8_e078, label %dec_label_pc_e084, label %dec_label_pc_e070

dec_label_pc_e084:                                ; preds = %bb127, %.thread12
  %v1_e07c15 = phi i32 [ %v1_e07c14, %.thread12 ], [ %v1_e07c, %bb127 ]
  %v2_e084 = sub i32 %v1_e07c15, %v0_e06c
  %v1_e088 = add i32 %v2_e084, 2
  store i32 %v1_e088, i32* @r5, align 4
  br label %dec_label_pc_e08c

dec_label_pc_e08c:                                ; preds = %bb126, %.thread10, %dec_label_pc_e084
  %v1_e098 = phi i32 [ %v1_e04c, %.thread10 ], [ %v1_e04c, %bb126 ], [ %v1_e088, %dec_label_pc_e084 ]
  %v0_e08c = load i32, i32* @r6, align 4
  %v2_e08c = add i32 %v0_e08c, %v1_e04c
  store i32 %v2_e08c, i32* @r4, align 4
  %v2_e098 = add i32 %v1_e098, %v2_e050
  store i32 0, i32* @r7, align 4
  %v3_e0a4 = add i32 %v2_e098, -545
  %v4_e0a4 = inttoptr i32 %v3_e0a4 to i8*
  store i8 0, i8* %v4_e0a4, align 1
  %v1_e0a8 = inttoptr i32 %v2_e08c to i8*
  %v2_e0a8 = call i32 @function_11704(i8* %v1_e0a8)
  store i32 %v2_e0a8, i32* @r1, align 4
  %v0_e0b4 = load i32, i32* @r4, align 4
  %v3_e0b8 = inttoptr i32 %v0_e0b4 to i8*
  %v4_e0b8 = call i32 @function_11a58(i8* %v3_e0b8, i32 %v2_e0a8, i32 %v2_df74)
  %v2_e0bc = icmp eq i32 %v4_e0b8, -1
  br i1 %v2_e0bc, label %dec_label_pc_dff0.backedge, label %dec_label_pc_e0d8.preheader

dec_label_pc_e0d8.preheader:                      ; preds = %dec_label_pc_e08c
  %v1_e0c0 = load i32, i32* @r7, align 4
  %v1_e0c4 = load i32, i32* @r6, align 4
  %v2_e0c4 = load i32, i32* @r5, align 4
  %v3_e0c4 = add i32 %v2_e0c4, %v1_e0c4
  store i32 %v1_e0c0, i32* @r4, align 4
  %v1_e0d846 = add i32 %v3_e0c4, 2
  %v2_e0d847 = inttoptr i32 %v1_e0d846 to i8*
  %v3_e0d848 = load i8, i8* %v2_e0d847, align 1
  %v2_e0dc50 = icmp eq i8 %v3_e0d848, 0
  %v1_e0e052 = add i32 %v2_e0c4, 2
  br i1 %v2_e0dc50, label %dec_label_pc_e118, label %dec_label_pc_e0e8

dec_label_pc_e0e8:                                ; preds = %dec_label_pc_e0d8.preheader, %dec_label_pc_e0d8.backedge
  %v0_e11882 = phi i32 [ %v0_e11881, %dec_label_pc_e0d8.backedge ], [ %v1_e0c0, %dec_label_pc_e0d8.preheader ]
  %v0_e100.pr = phi i32 [ %v0_e100.pr67, %dec_label_pc_e0d8.backedge ], [ %v1_e0c0, %dec_label_pc_e0d8.preheader ]
  %v0_e41c = phi i32 [ %v0_e41c70, %dec_label_pc_e0d8.backedge ], [ %v1_e0c0, %dec_label_pc_e0d8.preheader ]
  %v0_e0e078 = phi i32 [ %v1_e0e0, %dec_label_pc_e0d8.backedge ], [ %v1_e0e052, %dec_label_pc_e0d8.preheader ]
  %v0_e110 = phi i32 [ %v0_e0d8, %dec_label_pc_e0d8.backedge ], [ %v3_e0c4, %dec_label_pc_e0d8.preheader ]
  %v1_e0ec.in = phi i8 [ %v3_e0d8, %dec_label_pc_e0d8.backedge ], [ %v3_e0d848, %dec_label_pc_e0d8.preheader ]
  %v7_e0e8 = icmp eq i8 %v1_e0ec.in, 9
  br i1 %v7_e0e8, label %.thread23, label %bb128

bb128:                                            ; preds = %dec_label_pc_e0e8
  %v8_e0ec = icmp eq i8 %v1_e0ec.in, 32
  br i1 %v8_e0ec, label %.thread23.thread35, label %dec_label_pc_e100

.thread23.thread35:                               ; preds = %bb128
  br label %dec_label_pc_e10c

.thread23:                                        ; preds = %dec_label_pc_e0e8
  br label %dec_label_pc_e10c

dec_label_pc_e100:                                ; preds = %bb128
  %v7_e100 = icmp eq i32 %v0_e100.pr, 1
  br i1 %v7_e100, label %dec_label_pc_e41c, label %dec_label_pc_e108

dec_label_pc_e108:                                ; preds = %dec_label_pc_e41c, %dec_label_pc_e100
  %v0_e10c75 = phi i32 [ %v1_e41c, %dec_label_pc_e41c ], [ %v0_e41c, %dec_label_pc_e100 ]
  br label %dec_label_pc_e10c

dec_label_pc_e10c:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_e108
  %v0_e10c = phi i32 [ %v0_e41c, %.thread23.thread35 ], [ %v0_e41c, %.thread23 ], [ %v0_e10c75, %dec_label_pc_e108 ]
  %v0_e100.pr68 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_e108 ]
  %v7_e114 = icmp sgt i32 %v0_e10c, 6
  br i1 %v7_e114, label %dec_label_pc_e118, label %dec_label_pc_e0d8.backedge

dec_label_pc_e118:                                ; preds = %dec_label_pc_e0d8.backedge, %dec_label_pc_e10c, %dec_label_pc_e0d8.preheader
  %v1_e168 = phi i32 [ %v1_e0e052, %dec_label_pc_e0d8.preheader ], [ %v1_e0e0, %dec_label_pc_e0d8.backedge ], [ %v0_e0e078, %dec_label_pc_e10c ]
  %v0_e118 = phi i32 [ %v1_e0c0, %dec_label_pc_e0d8.preheader ], [ %v0_e11881, %dec_label_pc_e0d8.backedge ], [ %v0_e11882, %dec_label_pc_e10c ]
  %v2_e118 = icmp eq i32 %v0_e118, 0
  br i1 %v2_e118, label %dec_label_pc_dff0.backedge, label %dec_label_pc_e124

dec_label_pc_e124:                                ; preds = %dec_label_pc_e118
  %v2_e12c = add i32 %v1_e168, %v2_e050
  %v1_e130 = add i32 %v2_e12c, -545
  %v2_e130 = inttoptr i32 %v1_e130 to i8*
  %v3_e130 = load i8, i8* %v2_e130, align 1
  %v2_e134 = icmp eq i8 %v3_e130, 0
  br i1 %v2_e134, label %dec_label_pc_e164, label %bb129

bb129:                                            ; preds = %dec_label_pc_e124
  %v8_e138 = icmp eq i8 %v3_e130, 32
  br i1 %v8_e138, label %dec_label_pc_e164, label %dec_label_pc_e140

dec_label_pc_e140:                                ; preds = %bb129
  %v2_e140 = add i32 %v1_e168, %v1_e0c4
  br label %dec_label_pc_e144

dec_label_pc_e144:                                ; preds = %bb130, %dec_label_pc_e140
  %v0_e15028 = phi i32 [ %v1_e150, %bb130 ], [ %v1_e168, %dec_label_pc_e140 ]
  %v0_e144 = phi i32 [ %v1_e144, %bb130 ], [ %v2_e140, %dec_label_pc_e140 ]
  %v1_e144 = add i32 %v0_e144, 1
  %v2_e144 = inttoptr i32 %v1_e144 to i8*
  %v3_e144 = load i8, i8* %v2_e144, align 1
  %v2_e148 = icmp eq i8 %v3_e144, 0
  br i1 %v2_e148, label %.thread27, label %bb130

.thread27:                                        ; preds = %dec_label_pc_e144
  %v1_e15029 = add i32 %v0_e15028, 1
  br label %dec_label_pc_e158

bb130:                                            ; preds = %dec_label_pc_e144
  %v8_e14c = icmp eq i8 %v3_e144, 32
  %v1_e150 = add i32 %v0_e15028, 1
  br i1 %v8_e14c, label %dec_label_pc_e158, label %dec_label_pc_e144

dec_label_pc_e158:                                ; preds = %bb130, %.thread27
  %v1_e160 = phi i32 [ %v1_e15029, %.thread27 ], [ %v1_e150, %bb130 ]
  %v2_e160 = add i32 %v1_e160, %v2_e050
  br label %dec_label_pc_e164

dec_label_pc_e164:                                ; preds = %dec_label_pc_e124, %bb129, %dec_label_pc_e158
  %v2_e170 = phi i32 [ %v2_e12c, %dec_label_pc_e124 ], [ %v2_e12c, %bb129 ], [ %v2_e160, %dec_label_pc_e158 ]
  %v2_e168 = add i32 %v1_e168, %v1_e0c4
  store i32 %v2_e168, i32* @r4, align 4
  %v3_e170 = add i32 %v2_e170, -545
  %v4_e170 = inttoptr i32 %v3_e170 to i8*
  store i8 0, i8* %v4_e170, align 1
  %v1_e174 = inttoptr i32 %v2_e168 to i8*
  %v2_e174 = call i32 @function_11704(i8* %v1_e174)
  %v8_e17c = icmp sgt i32 %v2_e174, 15
  br i1 %v8_e17c, label %dec_label_pc_dff0.backedge, label %dec_label_pc_e180

dec_label_pc_e180:                                ; preds = %dec_label_pc_e164
  %v0_e184 = load i32, i32* @r4, align 4
  %v2_e188 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e188, i32* @r0, align 4
  %v2_e18c = bitcast i32* %stack_var_-52 to i8*
  %v3_e18c = call i32 @function_1172c(i8* %v2_e18c, i32 %v0_e184)
  br label %dec_label_pc_e190

dec_label_pc_e190.loopexit:                       ; preds = %dec_label_pc_dff0.backedge, %dec_label_pc_dff0.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre92 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_e190

dec_label_pc_e190:                                ; preds = %dec_label_pc_e190.loopexit, %dec_label_pc_e180
  %v1_e1a0.pre-phi = phi i8* [ %.pre92, %dec_label_pc_e190.loopexit ], [ %v2_e18c, %dec_label_pc_e180 ]
  %v2_e19c.pre-phi = phi i32 [ %.pre, %dec_label_pc_e190.loopexit ], [ %v2_e188, %dec_label_pc_e180 ]
  %v0_e190 = load i32, i32* @r8, align 4
  %v1_e194 = call i32 @close(i32 %v0_e190)
  %v2_e1a0 = call i32 @function_11704(i8* %v1_e1a0.pre-phi)
  store i32 %v2_e1a0, i32* @r4, align 4
  %v2_e1a4 = icmp eq i32 %v2_e1a0, 0
  br i1 %v2_e1a4, label %dec_label_pc_e44c, label %dec_label_pc_e1ac

dec_label_pc_e1ac:                                ; preds = %dec_label_pc_e190
  %v3_e1b4 = call i32 @function_11054(i32 13, i32* null)
  %v4_e1b4 = inttoptr i32 %v3_e1b4 to i8*
  %v3_e1b8 = call %__dirstream* @opendir(i8* %v4_e1b4)
  %v5_e1b8 = ptrtoint %__dirstream* %v3_e1b8 to i32
  store i32 %v5_e1b8, i32* @r8, align 4
  %v2_e1bc = icmp eq %__dirstream* %v3_e1b8, null
  br i1 %v2_e1bc, label %dec_label_pc_e3ec, label %dec_label_pc_e1cc.preheader

dec_label_pc_e1cc.preheader:                      ; preds = %dec_label_pc_e1ac
  store i32 0, i32* @r5, align 4
  %v3_e1d041 = call %dirent* @readdir(%__dirstream* nonnull %v3_e1b8)
  %v2_e1d444 = icmp eq %dirent* %v3_e1d041, null
  br i1 %v2_e1d444, label %dec_label_pc_e3e0, label %dec_label_pc_e1dc.preheader.lr.ph

dec_label_pc_e1dc.preheader.lr.ph:                ; preds = %dec_label_pc_e1cc.preheader
  %v2_e20c = bitcast i32* %stack_var_-4677 to i8*
  %tmp132 = bitcast i32* %stack_var_-8773 to i8*
  br label %dec_label_pc_e1dc.preheader

dec_label_pc_e1cc.loopexit:                       ; preds = %dec_label_pc_e1e4, %dec_label_pc_e1f8, %dec_label_pc_e260
  %v0_e1cc = load i32, i32* @r8, align 4
  %v1_e1cc = inttoptr i32 %v0_e1cc to %__dirstream*
  %v3_e1d0 = call %dirent* @readdir(%__dirstream* %v1_e1cc)
  %v2_e1d4 = icmp eq %dirent* %v3_e1d0, null
  br i1 %v2_e1d4, label %dec_label_pc_e3e0, label %dec_label_pc_e1dc.preheader

dec_label_pc_e1dc.preheader:                      ; preds = %dec_label_pc_e1dc.preheader.lr.ph, %dec_label_pc_e1cc.loopexit
  %v0_e1e490.in = phi %dirent* [ %v3_e1d041, %dec_label_pc_e1dc.preheader.lr.ph ], [ %v3_e1d0, %dec_label_pc_e1cc.loopexit ]
  br label %dec_label_pc_e1dc

dec_label_pc_e1dc:                                ; preds = %dec_label_pc_e1dc.preheader, %dec_label_pc_e3c8
  %v0_e1f0.in = phi %dirent* [ %v0_e1e490.in, %dec_label_pc_e1dc.preheader ], [ %v3_e3d4, %dec_label_pc_e3c8 ]
  %v0_e1dc = load i32, i32* @r5, align 4
  %v2_e1dc = icmp eq i32 %v0_e1dc, 0
  br i1 %v2_e1dc, label %dec_label_pc_e1e4, label %dec_label_pc_e3e0

dec_label_pc_e1e4:                                ; preds = %dec_label_pc_e1dc
  %v0_e1f0 = ptrtoint %dirent* %v0_e1f0.in to i32
  %v1_e1e4 = add i32 %v0_e1f0, 11
  %v2_e1e4 = inttoptr i32 %v1_e1e4 to i8*
  %v3_e1e4 = load i8, i8* %v2_e1e4, align 1
  %v4_e1e4 = zext i8 %v3_e1e4 to i32
  %v1_e1e8 = add nsw i32 %v4_e1e4, -48
  store i32 %v1_e1e4, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_e1e8, 9
  br i1 %tmp, label %dec_label_pc_e1cc.loopexit, label %dec_label_pc_e1f8

dec_label_pc_e1f8:                                ; preds = %dec_label_pc_e1e4
  %v3_e200 = call i32 @function_11054(i32 13, i32* null)
  store i32 %v2_df14, i32* @r0, align 4
  %v3_e20c = call i32 @function_1172c(i8* %v2_e20c, i32 %v3_e200)
  %v2_e214 = call i32 @function_11704(i8* %v2_e20c)
  %v0_e218 = load i32, i32* @r7, align 4
  %v0_e21c = load i32, i32* @sl, align 4
  %v2_e21c = add i32 %v0_e21c, %v2_e214
  store i32 %v2_e21c, i32* @r0, align 4
  %v2_e220 = inttoptr i32 %v2_e21c to i8*
  %v3_e220 = call i32 @function_1172c(i8* %v2_e220, i32 %v0_e218)
  %v2_e228 = call i32 @function_11704(i8* %v2_e20c)
  %v0_e22c = load i32, i32* @r5, align 4
  store i32 %v2_e228, i32* %r4.global-to-local, align 4
  %v2_e238 = inttoptr i32 %v0_e22c to i32*
  %v3_e238 = call i32 @function_11054(i32 14, i32* %v2_e238)
  %v0_e240 = load i32, i32* @sl, align 4
  %v2_e240 = add i32 %v2_e228, %v0_e240
  store i32 %v2_e240, i32* @r0, align 4
  %v2_e244 = inttoptr i32 %v2_e240 to i8*
  %v3_e244 = call i32 @function_1172c(i8* %v2_e244, i32 %v3_e238)
  %v7_e254 = call i32 @readlink(i8* %v2_e20c, i8* %tmp132, i32 4096)
  %v2_e258 = icmp eq i32 %v7_e254, -1
  br i1 %v2_e258, label %dec_label_pc_e1cc.loopexit, label %dec_label_pc_e260

dec_label_pc_e260:                                ; preds = %dec_label_pc_e1f8
  %v0_e260 = load i32, i32* @r5, align 4
  %v2_e268 = inttoptr i32 %v0_e260 to i32*
  %v3_e268 = call i32 @function_11054(i32 13, i32* %v2_e268)
  store i32 %v2_df14, i32* @r0, align 4
  %v3_e274 = call i32 @function_1172c(i8* %v2_e20c, i32 %v3_e268)
  %v2_e27c = call i32 @function_11704(i8* %v2_e20c)
  %v0_e280 = load i32, i32* @r7, align 4
  %v0_e284 = load i32, i32* @sl, align 4
  %v2_e284 = add i32 %v0_e284, %v2_e27c
  store i32 %v2_e284, i32* @r0, align 4
  %v2_e288 = inttoptr i32 %v2_e284 to i8*
  %v3_e288 = call i32 @function_1172c(i8* %v2_e288, i32 %v0_e280)
  %v2_e290 = call i32 @function_11704(i8* %v2_e20c)
  %v0_e294 = load i32, i32* @r5, align 4
  store i32 %v2_e290, i32* %r4.global-to-local, align 4
  %v2_e2a0 = inttoptr i32 %v0_e294 to i32*
  %v3_e2a0 = call i32 @function_11054(i32 15, i32* %v2_e2a0)
  %v0_e2a8 = load i32, i32* @sl, align 4
  %v2_e2a8 = add i32 %v2_e290, %v0_e2a8
  store i32 %v2_e2a8, i32* @r0, align 4
  %v2_e2ac = inttoptr i32 %v2_e2a8 to i8*
  %v3_e2ac = call i32 @function_1172c(i8* %v2_e2ac, i32 %v3_e2a0)
  %v3_e2b4 = call %__dirstream* @opendir(i8* %v2_e20c)
  %v5_e2b4 = ptrtoint %__dirstream* %v3_e2b4 to i32
  store i32 %v5_e2b4, i32* %sb.global-to-local, align 4
  %v2_e2b8 = icmp eq %__dirstream* %v3_e2b4, null
  br i1 %v2_e2b8, label %dec_label_pc_e1cc.loopexit, label %dec_label_pc_e2c0.preheader

dec_label_pc_e2c0.preheader:                      ; preds = %dec_label_pc_e260
  %v3_e2c4138 = call %dirent* @readdir(%__dirstream* nonnull %v3_e2b4)
  %v5_e2c4139 = ptrtoint %dirent* %v3_e2c4138 to i32
  store i32 %v5_e2c4139, i32* @r6, align 4
  %v2_e2c8140 = icmp eq %dirent* %v3_e2c4138, null
  store i32 4096, i32* @r1, align 4
  store i32 %v2_df28, i32* @r0, align 4
  br i1 %v2_e2c8140, label %dec_label_pc_e3c8, label %dec_label_pc_e2d8thread-pre-split

dec_label_pc_e2c0.loopexit:                       ; preds = %dec_label_pc_e2e0, %dec_label_pc_e378
  %v0_e2c0.pre = load i32, i32* %sb.global-to-local, align 4
  %v1_e2c0 = inttoptr i32 %v0_e2c0.pre to %__dirstream*
  %v3_e2c4 = call %dirent* @readdir(%__dirstream* %v1_e2c0)
  %v5_e2c4 = ptrtoint %dirent* %v3_e2c4 to i32
  store i32 %v5_e2c4, i32* @r6, align 4
  %v2_e2c8 = icmp eq %dirent* %v3_e2c4, null
  store i32 4096, i32* @r1, align 4
  store i32 %v2_df28, i32* @r0, align 4
  br i1 %v2_e2c8, label %dec_label_pc_e3c8, label %dec_label_pc_e2d8thread-pre-split

dec_label_pc_e2d8thread-pre-split:                ; preds = %dec_label_pc_e2c0.preheader, %dec_label_pc_e2c0.loopexit
  %v0_e2d8.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_e2d8

dec_label_pc_e2d8:                                ; preds = %dec_label_pc_e2d8thread-pre-split, %dec_label_pc_e3a0
  %v0_e2d8 = phi i32 [ %v0_e2d8.pr, %dec_label_pc_e2d8thread-pre-split ], [ 1, %dec_label_pc_e3a0 ]
  %v2_e2d8 = icmp eq i32 %v0_e2d8, 0
  br i1 %v2_e2d8, label %dec_label_pc_e2e0, label %dec_label_pc_e3c8

dec_label_pc_e2e0:                                ; preds = %dec_label_pc_e2d8
  %v0_e2e0 = call i32 @function_117a4()
  %v0_e2e4 = load i32, i32* @r5, align 4
  %v2_e2ec = inttoptr i32 %v0_e2e4 to i32*
  %v3_e2ec = call i32 @function_11054(i32 13, i32* %v2_e2ec)
  store i32 %v2_df14, i32* @r0, align 4
  %v3_e2f8 = call i32 @function_1172c(i8* %v2_e20c, i32 %v3_e2ec)
  %v2_e300 = call i32 @function_11704(i8* %v2_e20c)
  %v0_e304 = load i32, i32* @r7, align 4
  %v0_e308 = load i32, i32* @sl, align 4
  %v2_e308 = add i32 %v0_e308, %v2_e300
  store i32 %v2_e308, i32* @r0, align 4
  %v2_e30c = inttoptr i32 %v2_e308 to i8*
  %v3_e30c = call i32 @function_1172c(i8* %v2_e30c, i32 %v0_e304)
  %v2_e314 = call i32 @function_11704(i8* %v2_e20c)
  %v0_e318 = load i32, i32* @r5, align 4
  store i32 %v2_e314, i32* @r4, align 4
  %v2_e324 = inttoptr i32 %v0_e318 to i32*
  %v3_e324 = call i32 @function_11054(i32 15, i32* %v2_e324)
  %v0_e32c = load i32, i32* @sl, align 4
  %v1_e32c = load i32, i32* @r4, align 4
  %v2_e32c = add i32 %v1_e32c, %v0_e32c
  store i32 %v2_e32c, i32* @r0, align 4
  %v2_e330 = inttoptr i32 %v2_e32c to i8*
  %v3_e330 = call i32 @function_1172c(i8* %v2_e330, i32 %v3_e324)
  %v2_e338 = call i32 @function_11704(i8* %v2_e20c)
  %v0_e340 = load i32, i32* @sl, align 4
  %v2_e340 = add i32 %v0_e340, %v2_e338
  store i32 %v2_e340, i32* @r0, align 4
  %v2_e344 = inttoptr i32 %v2_e340 to i8*
  %v3_e344 = call i32 @function_1172c(i8* %v2_e344, i32 ptrtoint (i32* @global_var_11f94.114 to i32))
  %v2_e34c = call i32 @function_11704(i8* %v2_e20c)
  %v0_e350 = load i32, i32* @r6, align 4
  %v1_e350 = add i32 %v0_e350, 11
  %v0_e354 = load i32, i32* @sl, align 4
  %v2_e354 = add i32 %v0_e354, %v2_e34c
  store i32 %v2_e354, i32* @r0, align 4
  %v2_e358 = inttoptr i32 %v2_e354 to i8*
  %v3_e358 = call i32 @function_1172c(i8* %v2_e358, i32 %v1_e350)
  %v7_e368 = call i32 @readlink(i8* %v2_e20c, i8* %tmp132, i32 4096)
  %v2_e36c = icmp eq i32 %v7_e368, -1
  br i1 %v2_e36c, label %dec_label_pc_e2c0.loopexit, label %dec_label_pc_e378

dec_label_pc_e378:                                ; preds = %dec_label_pc_e2e0
  %v2_e378 = call i32 @function_11704(i8* %tmp132)
  store i32 %v2_e378, i32* @r1, align 4
  %v4_e38c = call i32 @function_11a58(i8* %tmp132, i32 %v2_e378, i32 %v2_e19c.pre-phi)
  %v2_e390 = icmp eq i32 %v4_e38c, -1
  br i1 %v2_e390, label %dec_label_pc_e2c0.loopexit, label %dec_label_pc_e3a0

dec_label_pc_e3a0:                                ; preds = %dec_label_pc_e378
  %v0_e398 = load i32, i32* @r7, align 4
  %v2_e3a0 = inttoptr i32 %v0_e398 to i8*
  %v3_e3a0 = call i32 @function_11830(i8* %v2_e3a0, i32 10)
  %v2_e3a8 = call i32 @kill(i32 %v3_e3a0, i32 9)
  %v0_e3ac = load i32, i32* %sb.global-to-local, align 4
  %v1_e3ac = inttoptr i32 %v0_e3ac to %__dirstream*
  %v3_e3b0 = call %dirent* @readdir(%__dirstream* %v1_e3ac)
  %v5_e3b0 = ptrtoint %dirent* %v3_e3b0 to i32
  store i32 %v5_e3b0, i32* @r6, align 4
  %v2_e3b4 = icmp eq %dirent* %v3_e3b0, null
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_df28, i32* @r0, align 4
  br i1 %v2_e3b4, label %dec_label_pc_e3c8, label %dec_label_pc_e2d8

dec_label_pc_e3c8:                                ; preds = %dec_label_pc_e2c0.preheader, %dec_label_pc_e2c0.loopexit, %dec_label_pc_e3a0, %dec_label_pc_e2d8
  %v0_e3c8 = load i32, i32* %sb.global-to-local, align 4
  %v1_e3c8 = inttoptr i32 %v0_e3c8 to %__dirstream*
  %v3_e3cc = call i32 @closedir(%__dirstream* %v1_e3c8)
  %v0_e3d0 = load i32, i32* @r8, align 4
  %v1_e3d0 = inttoptr i32 %v0_e3d0 to %__dirstream*
  %v3_e3d4 = call %dirent* @readdir(%__dirstream* %v1_e3d0)
  %v2_e3d8 = icmp eq %dirent* %v3_e3d4, null
  br i1 %v2_e3d8, label %dec_label_pc_e3e0, label %dec_label_pc_e1dc

dec_label_pc_e3e0:                                ; preds = %dec_label_pc_e1cc.loopexit, %dec_label_pc_e3c8, %dec_label_pc_e1dc, %dec_label_pc_e1cc.preheader
  %v0_e3e0 = load i32, i32* @r8, align 4
  %v1_e3e0 = inttoptr i32 %v0_e3e0 to %__dirstream*
  %v3_e3e4 = call i32 @closedir(%__dirstream* %v1_e3e0)
  %v0_e3e8 = load i32, i32* @r5, align 4
  %v1_e3e8 = urem i32 %v0_e3e8, 256
  br label %dec_label_pc_e3ec

dec_label_pc_e3ec:                                ; preds = %dec_label_pc_e1ac, %dec_label_pc_e3e0
  %storemerge = phi i32 [ %v1_e3e8, %dec_label_pc_e3e0 ], [ %v5_e1b8, %dec_label_pc_e1ac ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_e3f0 = call i32 @sleep(i32 1)
  %v1_e3f8 = call i32 @function_11080(i32 13)
  %v1_e400 = call i32 @function_11080(i32 14)
  %v1_e408 = call i32 @function_11080(i32 15)
  br label %dec_label_pc_e40c

dec_label_pc_e40c:                                ; preds = %dec_label_pc_dfb0, %dec_label_pc_e44c, %dec_label_pc_e3ec
  %v0_e40c = load i32, i32* @r4, align 4
  %v2_e418 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e418, i32* @r4, align 4
  store i32 %v6_df00, i32* @r5, align 4
  store i32 %v9_df00, i32* @r6, align 4
  store i32 %v12_df00, i32* @r7, align 4
  store i32 %v15_df00, i32* @r8, align 4
  store i32 %v21_df00, i32* @sl, align 4
  ret i32 %v0_e40c

dec_label_pc_e41c:                                ; preds = %dec_label_pc_e100
  %v1_e41c = add i32 %v0_e41c, 1
  %v7_e420 = icmp eq i32 %v0_e41c, 0
  br i1 %v7_e420, label %dec_label_pc_e428, label %dec_label_pc_e108

dec_label_pc_e428:                                ; preds = %dec_label_pc_e41c
  %v1_e428 = add i32 %v0_e110, 3
  %v2_e428 = inttoptr i32 %v1_e428 to i8*
  %v3_e428 = load i8, i8* %v2_e428, align 1
  %v7_e42c = icmp eq i8 %v3_e428, 65
  br i1 %v7_e42c, label %dec_label_pc_e43c, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_e428
  br label %dec_label_pc_e0d8.backedge

dec_label_pc_e43c:                                ; preds = %dec_label_pc_e428
  store i32 %v1_e41c, i32* @r4, align 4
  br label %dec_label_pc_e0d8.backedge

dec_label_pc_e0d8.backedge:                       ; preds = %.thread33, %dec_label_pc_e43c, %dec_label_pc_e10c
  %v0_e11881 = phi i32 [ %v1_e41c, %dec_label_pc_e43c ], [ %v0_e11882, %dec_label_pc_e10c ], [ %v0_e11882, %.thread33 ]
  %v0_e41c70 = phi i32 [ %v1_e41c, %dec_label_pc_e43c ], [ %v0_e10c, %dec_label_pc_e10c ], [ %v1_e41c, %.thread33 ]
  %v0_e100.pr67 = phi i32 [ 0, %dec_label_pc_e43c ], [ %v0_e100.pr68, %dec_label_pc_e10c ], [ 0, %.thread33 ]
  %v0_e0d8 = add i32 %v0_e110, 1
  %v1_e0d8 = add i32 %v0_e110, 3
  %v2_e0d8 = inttoptr i32 %v1_e0d8 to i8*
  %v3_e0d8 = load i8, i8* %v2_e0d8, align 1
  %v2_e0dc = icmp eq i8 %v3_e0d8, 0
  %v1_e0e0 = add i32 %v0_e0e078, 1
  br i1 %v2_e0dc, label %dec_label_pc_e118, label %dec_label_pc_e0e8

dec_label_pc_e44c:                                ; preds = %dec_label_pc_e190
  %v1_e450 = call i32 @function_11080(i32 13)
  %v1_e458 = call i32 @function_11080(i32 14)
  %v1_e460 = call i32 @function_11080(i32 15)
  %v1_e468 = call i32 @function_11080(i32 17)
  br label %dec_label_pc_e40c

dec_label_pc_e470:                                ; preds = %dec_label_pc_df00
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_dfb0

; uselistorder directives
  uselistorder i32 %v1_e0e0, { 1, 0 }
  uselistorder i8 %v3_e0d8, { 1, 0 }
  uselistorder i32 %v0_e11881, { 1, 0 }
  uselistorder i32 %v1_e41c, { 4, 3, 0, 2, 1 }
  uselistorder %dirent* %v3_e3d4, { 1, 0 }
  uselistorder i8* %tmp132, { 1, 0, 2, 3 }
  uselistorder i32 %v1_e144, { 1, 0 }
  uselistorder i32 %v0_e15028, { 1, 0 }
  uselistorder i32 %v1_e168, { 0, 3, 1, 2 }
  uselistorder i32 %v0_e10c, { 1, 0 }
  uselistorder i32 %v0_e0e078, { 1, 0 }
  uselistorder i32 %v0_e41c, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_e11882, { 1, 2, 0 }
  uselistorder i32 %v1_e0e052, { 1, 0 }
  uselistorder i32 %v2_e0c4, { 1, 0 }
  uselistorder i32 %v1_e0c0, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v0_e07c13, { 1, 0, 2 }
  uselistorder i32 %v0_e06c, { 1, 0 }
  uselistorder i32 %v1_e04c, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32* %v3_df70, { 1, 0, 2 }
  uselistorder i32 %v2_df28, { 1, 2, 0 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %stack_var_-8773, { 1, 0, 2 }
  uselistorder i8* %stack_var_-581, { 2, 0, 1 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32* %sb.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 (i8*, i32)* @function_11830, { 1, 0 }
  uselistorder i32 47, { 1, 2, 0 }
  uselistorder i32 (i32*, i32, i32)* @function_1195c, { 1, 0 }
  uselistorder i32 512, { 4, 0, 5, 7, 1, 8, 2, 9, 3, 10, 6 }
  uselistorder i32* (i32*, i32, i32)* @memset, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_e0d8.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e40c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e3ec, { 1, 0 }
  uselistorder label %dec_label_pc_e3e0, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e3c8, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_e2d8, { 1, 0 }
  uselistorder label %dec_label_pc_e2d8thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_e2c0.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_e1dc, { 1, 0 }
  uselistorder label %dec_label_pc_e1dc.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e1cc.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e164, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e10c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e0e8, { 1, 0 }
  uselistorder label %dec_label_pc_e08c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dff0.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_e040, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_e008, { 1, 0 }
  uselistorder label %dec_label_pc_dfb0, { 1, 0 }
}

define i32 @function_e49c(i32 %arg1) local_unnamed_addr {
dec_label_pc_e49c:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-188 = alloca i32, align 4
  %stack_var_-196 = alloca i32, align 4
  %stack_var_-8380 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-4260 = alloca i32, align 4
  %stack_var_-8388 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e49c = load i32, i32* @r4, align 4
  store i32 %v3_e49c, i32* %stack_var_-36, align 4
  %v6_e49c = load i32, i32* @r5, align 4
  %v9_e49c = load i32, i32* @r6, align 4
  %v12_e49c = load i32, i32* @r7, align 4
  %v15_e49c = load i32, i32* @r8, align 4
  %v18_e49c = load i32, i32* @sb, align 4
  %v21_e49c = load i32, i32* @sl, align 4
  %v24_e49c = load i32, i32* @fp, align 4
  %v2_e4ac = call i32 @time(i32* null)
  store i32 %v2_e4ac, i32* @r7, align 4
  %v0_e4b4 = call i32 @fork()
  %v2_e4b8 = icmp eq i32 %v0_e4b4, -1
  %. = zext i1 %v2_e4b8 to i32
  %tmp100 = icmp slt i32 %v0_e4b4, 1
  %storemerge74 = select i1 %tmp100, i32 %., i32 1
  store i32 %storemerge74, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1a414.116 to i32), i32* %r3.global-to-local, align 4
  %v2_e4d4 = icmp eq i32 %storemerge74, 0
  store i32 %v0_e4b4, i32* @global_var_1a414.116, align 4
  br i1 %v2_e4d4, label %dec_label_pc_e4ec, label %dec_label_pc_e4e0

dec_label_pc_e4e0:                                ; preds = %dec_label_pc_e614, %dec_label_pc_e4ec, %dec_label_pc_e49c
  %v29_e4e8 = phi i32 [ -1, %dec_label_pc_e4ec ], [ %v0_e4b4, %dec_label_pc_e49c ], [ %v5_e628, %dec_label_pc_e614 ]
  %v2_e4e8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e4e8, i32* @r4, align 4
  store i32 %v6_e49c, i32* @r5, align 4
  store i32 %v9_e49c, i32* @r6, align 4
  store i32 %v12_e49c, i32* @r7, align 4
  store i32 %v15_e49c, i32* @r8, align 4
  store i32 %v18_e49c, i32* @sb, align 4
  store i32 %v21_e49c, i32* @sl, align 4
  store i32 %v24_e49c, i32* @fp, align 4
  ret i32 %v29_e4e8

dec_label_pc_e4ec:                                ; preds = %dec_label_pc_e49c
  %v1_e4f0 = call i32 @sleep(i32 5)
  %v1_e4f8 = call i32* @malloc(i32 4096)
  %v3_e4f8 = ptrtoint i32* %v1_e4f8 to i32
  store i32 ptrtoint (i32* @global_var_1a3b8.118 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1a410.120 to i32), i32* %r1.global-to-local, align 4
  store i32 %v3_e4f8, i32* %r2.global-to-local, align 4
  %v0_e508 = load i32, i32* @r5, align 4
  %v1_e508 = trunc i32 %v0_e508 to i8
  %v3_e508 = bitcast i32* %v1_e4f8 to i8*
  store i8 %v1_e508, i8* %v3_e508, align 1
  %v0_e510 = load i32, i32* @r5, align 4
  %v1_e510 = load i32, i32* %r3.global-to-local, align 4
  %v2_e510 = inttoptr i32 %v1_e510 to i32*
  store i32 %v0_e510, i32* %v2_e510, align 4
  %v0_e514 = load i32, i32* %r2.global-to-local, align 4
  %v1_e514 = load i32, i32* %r1.global-to-local, align 4
  %v2_e514 = inttoptr i32 %v1_e514 to i32*
  store i32 %v0_e514, i32* %v2_e514, align 4
  %v1_e518 = call i32 @function_11138(i32 13)
  %v1_e520 = call i32 @function_11138(i32 14)
  %v2_e528 = ptrtoint i32* %stack_var_-4260 to i32
  store i32 %v2_e528, i32* %r2.global-to-local, align 4
  %v0_e52c = load i32, i32* @r5, align 4
  store i32 %v0_e52c, i32* %r1.global-to-local, align 4
  store i32 %v2_e528, i32* %stack_var_-8388, align 4
  %v2_e538 = inttoptr i32 %v0_e52c to i32*
  %v3_e538 = call i32 @function_11054(i32 13, i32* %v2_e538)
  %v1_e540 = add i32 %v2_e528, -24
  store i32 %v1_e540, i32* %r3.global-to-local, align 4
  store i32 %v3_e538, i32* %r1.global-to-local, align 4
  store i32 %v1_e540, i32* @r0, align 4
  store i32 %v1_e540, i32* %stack_var_-8388, align 4
  %v2_e550 = inttoptr i32 %v1_e540 to i8*
  %v3_e550 = call i32 @function_1172c(i8* %v2_e550, i32 %v3_e538)
  store i32 %v1_e540, i32* %r1.global-to-local, align 4
  %v2_e558 = add i32 %v1_e540, %v3_e550
  store i32 %v2_e558, i32* @r4, align 4
  %v1_e55c = call i32 @getpid()
  %v2_e564 = ptrtoint i32* %stack_var_-60 to i32
  store i32 %v2_e564, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_e56c = trunc i32 %v1_e55c to i8
  %v4_e56c = call i32 @function_11b68(i8 %v3_e56c, i32 10, i32 %v2_e564)
  store i32 %v4_e56c, i32* %r1.global-to-local, align 4
  %v0_e574 = load i32, i32* @r4, align 4
  store i32 %v0_e574, i32* @r0, align 4
  %v2_e578 = inttoptr i32 %v0_e574 to i8*
  %v3_e578 = call i32 @function_1172c(i8* %v2_e578, i32 %v4_e56c)
  %v0_e57c = load i32, i32* @r5, align 4
  store i32 %v0_e57c, i32* %r1.global-to-local, align 4
  %v0_e580 = load i32, i32* @r4, align 4
  %v2_e580 = add i32 %v0_e580, %v3_e578
  store i32 %v2_e580, i32* @r4, align 4
  %v2_e588 = inttoptr i32 %v0_e57c to i32*
  %v3_e588 = call i32 @function_11054(i32 14, i32* %v2_e588)
  store i32 %v3_e588, i32* %r1.global-to-local, align 4
  %v0_e590 = load i32, i32* @r4, align 4
  store i32 %v0_e590, i32* @r0, align 4
  %v2_e594 = inttoptr i32 %v0_e590 to i8*
  %v3_e594 = call i32 @function_1172c(i8* %v2_e594, i32 %v3_e588)
  %v0_e598 = load i32, i32* @r5, align 4
  store i32 %v0_e598, i32* %r1.global-to-local, align 4
  store i32 %v3_e594, i32* @r6, align 4
  %v2_e5a0 = load i32, i32* %stack_var_-8388, align 4
  %v3_e5a0 = inttoptr i32 %v2_e5a0 to i8*
  %v4_e5a4 = call i32 (i8*, i32, ...) @open(i8* %v3_e5a0, i32 %v0_e598)
  %v2_e5a8 = icmp eq i32 %v4_e5a4, -1
  br i1 %v2_e5a8, label %dec_label_pc_e4e0, label %dec_label_pc_e5b0

dec_label_pc_e5b0:                                ; preds = %dec_label_pc_e4ec
  %v1_e5b0 = call i32 @close(i32 %v4_e5a4)
  %v1_e5b8 = call i32 @function_11080(i32 13)
  %v1_e5c0 = call i32 @function_11080(i32 14)
  store i32 ptrtoint (i8** @global_var_1a410.120 to i32), i32* %r3.global-to-local, align 4
  %v2_e5cc = load i8*, i8** @global_var_1a410.120, align 4
  %v3_e5cc = ptrtoint i8* %v2_e5cc to i32
  store i32 %v3_e5cc, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_e5d4 = load i32, i32* %stack_var_-8388, align 4
  %v3_e5d4 = inttoptr i32 %v2_e5d4 to i8*
  %v6_e5d8 = call i32 @readlink(i8* %v3_e5d4, i8* %v2_e5cc, i32 4095)
  %v2_e5dc = icmp eq i32 %v6_e5d8, -1
  br i1 %v2_e5dc, label %.thread4, label %bb103

bb103:                                            ; preds = %dec_label_pc_e5b0
  store i32 ptrtoint (i8** @global_var_1a410.120 to i32), i32* %r1.global-to-local, align 4
  %v3_e5e4 = load i32, i32* bitcast (i8** @global_var_1a410.120 to i32*), align 4
  store i32 %v3_e5e4, i32* %r3.global-to-local, align 4
  %v1_e5e8 = load i32, i32* @r5, align 4
  %v2_e5e8 = trunc i32 %v1_e5e8 to i8
  %v5_e5e8 = add i32 %v3_e5e4, %v6_e5d8
  %v6_e5e8 = inttoptr i32 %v5_e5e8 to i8*
  store i8 %v2_e5e8, i8* %v6_e5e8, align 1
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_e5b0, %bb103
  %v2_e5ec = load i32, i32* %stack_var_-8388, align 4
  store i32 %v2_e5ec, i32* %r2.global-to-local, align 4
  %v0_e5f0 = load i32, i32* @r4, align 4
  %v1_e5f0 = load i32, i32* @r6, align 4
  %v2_e5f0 = sub i32 %v0_e5f0, %v2_e5ec
  %v2_e5f4 = add i32 %v2_e5f0, %v1_e5f0
  store i32 %v2_e5f4, i32* @r1, align 4
  store i32 %v2_e5ec, i32* @r0, align 4
  %v0_e5fc = call i32 @function_117a4()
  %v0_e604 = load i32, i32* @r5, align 4
  store i32 %v0_e604, i32* @fp, align 4
  %v0_e608 = load i32, i32* @r7, align 4
  store i32 %v0_e608, i32* @r4, align 4
  %v2_e60c = ptrtoint i32* %stack_var_-8380 to i32
  store i32 %v2_e60c, i32* @sl, align 4
  store i32 400, i32* @r5, align 4
  %v2_e75c = ptrtoint i32* %stack_var_-188 to i32
  %v2_e760 = bitcast i32* %stack_var_-188 to i8*
  %v2_e7ac = ptrtoint i32* %stack_var_-124 to i32
  %v2_e7b0 = bitcast i32* %stack_var_-124 to i8*
  %v2_e7fc = ptrtoint i32* %stack_var_-196 to i32
  %v2_e90c = ptrtoint i32* %stack_var_-40 to i32
  %v2_e920 = ptrtoint i32* %stack_var_-44 to i32
  %v2_e828 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_e614

dec_label_pc_e614:                                ; preds = %dec_label_pc_e720, %.thread4
  %v1_e618 = call i32 @function_11138(i32 13)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_e624 = call i32 @function_11054(i32 13, i32* null)
  %v4_e624 = inttoptr i32 %v3_e624 to i8*
  %v3_e628 = call %__dirstream* @opendir(i8* %v4_e624)
  %v5_e628 = ptrtoint %__dirstream* %v3_e628 to i32
  store i32 %v5_e628, i32* @sb, align 4
  %v2_e62c = icmp eq %__dirstream* %v3_e628, null
  br i1 %v2_e62c, label %dec_label_pc_e4e0, label %dec_label_pc_e634

dec_label_pc_e634:                                ; preds = %dec_label_pc_e614
  %v1_e638 = call i32 @function_11080(i32 13)
  %v1_e644 = call i32 @function_df00(i32 58811)
  %v1_e650 = call i32 @function_df00(i32 50951)
  %v1_e65c = call i32 @function_df00(i32 14853)
  %v1_e664 = call i32 @function_df00(i32 20480)
  %v1_e670 = call i32 @function_df00(i32 47873)
  %v1_e67c = call i32 @function_df00(i32 57616)
  %v1_e688 = call i32 @function_df00(i32 2842)
  %v1_e694 = call i32 @function_df00(i32 10522)
  %v0_e69844 = load i32, i32* @sb, align 4
  %v1_e69845 = inttoptr i32 %v0_e69844 to %__dirstream*
  %v3_e69c46 = call %dirent* @readdir(%__dirstream* %v1_e69845)
  %v2_e6a049 = icmp eq %dirent* %v3_e69c46, null
  br i1 %v2_e6a049, label %dec_label_pc_e720, label %dec_label_pc_e6a8.preheader

dec_label_pc_e6a8.preheader:                      ; preds = %dec_label_pc_e634, %dec_label_pc_e698.backedge
  %v0_e6a854.in = phi %dirent* [ %v3_e69c, %dec_label_pc_e698.backedge ], [ %v3_e69c46, %dec_label_pc_e634 ]
  br label %dec_label_pc_e6a8

dec_label_pc_e6a8:                                ; preds = %dec_label_pc_e6a8.preheader, %dec_label_pc_e708
  %v0_e6b8.in = phi %dirent* [ %v0_e6a854.in, %dec_label_pc_e6a8.preheader ], [ %v3_e714, %dec_label_pc_e708 ]
  %v0_e6b8 = ptrtoint %dirent* %v0_e6b8.in to i32
  %v1_e6a8 = add i32 %v0_e6b8, 11
  %v2_e6a8 = inttoptr i32 %v1_e6a8 to i8*
  %v3_e6a8 = load i8, i8* %v2_e6a8, align 1
  %v4_e6a8 = zext i8 %v3_e6a8 to i32
  %v1_e6ac = add nsw i32 %v4_e6a8, -48
  store i32 %v1_e6ac, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_e6ac, 9
  br i1 %tmp, label %dec_label_pc_e698.backedge, label %dec_label_pc_e6b8

dec_label_pc_e6b8:                                ; preds = %dec_label_pc_e6a8
  store i32 %v1_e6a8, i32* @r6, align 4
  %v4_e6c0 = call i32 @atoi(i8* %v2_e6a8)
  %v0_e6c4 = load i32, i32* @r5, align 4
  store i32 %v4_e6c0, i32* @r7, align 4
  %v0_e6cc = load i32, i32* @fp, align 4
  %v1_e6cc = add i32 %v0_e6cc, 1
  store i32 %v1_e6cc, i32* @fp, align 4
  %v5_e6d0 = icmp slt i32 %v0_e6c4, %v4_e6c0
  %v2_e730 = call i32 @time(i32* null)
  br i1 %v5_e6d0, label %dec_label_pc_e72c, label %dec_label_pc_e6d4

dec_label_pc_e6d4:                                ; preds = %dec_label_pc_e6b8
  %v0_e6dc = load i32, i32* @r4, align 4
  %v2_e6dc = sub i32 %v2_e730, %v0_e6dc
  %v7_e6e4 = icmp slt i32 %v2_e6dc, 601
  br i1 %v7_e6e4, label %dec_label_pc_e6ec, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_e6d4
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_e698.backedge

dec_label_pc_e6ec:                                ; preds = %dec_label_pc_e6d4
  %v0_e6ec = load i32, i32* @r7, align 4
  %v7_e6f0 = icmp slt i32 %v0_e6ec, 401
  br i1 %v7_e6f0, label %dec_label_pc_e698.backedge, label %dec_label_pc_e6f4

dec_label_pc_e6f4:                                ; preds = %dec_label_pc_e6ec
  %v0_e6f4 = load i32, i32* @fp, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_e6fc = urem i32 %v0_e6f4, 10
  %v2_e700 = icmp eq i32 %v2_e6fc, 0
  br i1 %v2_e700, label %dec_label_pc_e708, label %dec_label_pc_e698.backedge

dec_label_pc_e708:                                ; preds = %dec_label_pc_e6f4
  %v1_e70c = call i32 @sleep(i32 1)
  %v0_e710 = load i32, i32* @sb, align 4
  %v1_e710 = inttoptr i32 %v0_e710 to %__dirstream*
  %v3_e714 = call %dirent* @readdir(%__dirstream* %v1_e710)
  %v2_e718 = icmp eq %dirent* %v3_e714, null
  br i1 %v2_e718, label %dec_label_pc_e720, label %dec_label_pc_e6a8

dec_label_pc_e720:                                ; preds = %dec_label_pc_e698.backedge, %dec_label_pc_e708, %dec_label_pc_e634
  %v0_e720 = load i32, i32* @sb, align 4
  %v1_e720 = inttoptr i32 %v0_e720 to %__dirstream*
  %v3_e724 = call i32 @closedir(%__dirstream* %v1_e720)
  br label %dec_label_pc_e614

dec_label_pc_e72c:                                ; preds = %dec_label_pc_e6b8
  %v1_e73c = call i32 @function_11138(i32 13)
  %v1_e744 = call i32 @function_11138(i32 14)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_e750 = call i32 @function_11054(i32 13, i32* null)
  store i32 %v3_e750, i32* %r1.global-to-local, align 4
  store i32 %v2_e75c, i32* @r0, align 4
  %v3_e760 = call i32 @function_1172c(i8* %v2_e760, i32 %v3_e750)
  store i32 %v2_e75c, i32* %r3.global-to-local, align 4
  %v2_e76c = add i32 %v3_e760, %v2_e75c
  store i32 %v2_e76c, i32* %r5.global-to-local, align 4
  %v0_e770 = load i32, i32* @r6, align 4
  store i32 %v0_e770, i32* %r1.global-to-local, align 4
  store i32 %v2_e76c, i32* @r0, align 4
  %v2_e778 = inttoptr i32 %v2_e76c to i8*
  %v3_e778 = call i32 @function_1172c(i8* %v2_e778, i32 %v0_e770)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_e788 = call i32 @function_11054(i32 14, i32* null)
  store i32 %v3_e788, i32* %r1.global-to-local, align 4
  %v0_e790 = load i32, i32* %r5.global-to-local, align 4
  %v2_e790 = add i32 %v3_e778, %v0_e790
  store i32 %v2_e790, i32* @r0, align 4
  %v2_e794 = inttoptr i32 %v2_e790 to i8*
  %v3_e794 = call i32 @function_1172c(i8* %v2_e794, i32 %v3_e788)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_e7a0 = call i32 @function_11054(i32 13, i32* null)
  store i32 %v3_e7a0, i32* %r1.global-to-local, align 4
  store i32 %v2_e7ac, i32* @r0, align 4
  %v3_e7b0 = call i32 @function_1172c(i8* %v2_e7b0, i32 %v3_e7a0)
  %v2_e7bc = add i32 %v3_e7b0, %v2_e7ac
  store i32 %v2_e7bc, i32* @r5, align 4
  store i32 %v2_e7bc, i32* @r0, align 4
  %v0_e7c4 = load i32, i32* @r6, align 4
  store i32 %v0_e7c4, i32* %r1.global-to-local, align 4
  %v2_e7c8 = inttoptr i32 %v2_e7bc to i8*
  %v3_e7c8 = call i32 @function_1172c(i8* %v2_e7c8, i32 %v0_e7c4)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_e7c8, i32* @r4, align 4
  %v3_e7d8 = call i32 @function_11054(i32 29, i32* null)
  store i32 %v3_e7d8, i32* %r1.global-to-local, align 4
  %v0_e7e0 = load i32, i32* @r5, align 4
  %v1_e7e0 = load i32, i32* @r4, align 4
  %v2_e7e0 = add i32 %v1_e7e0, %v0_e7e0
  store i32 %v2_e7e0, i32* @r0, align 4
  %v2_e7e4 = inttoptr i32 %v2_e7e0 to i8*
  %v3_e7e4 = call i32 @function_1172c(i8* %v2_e7e4, i32 %v3_e7d8)
  %v1_e7ec = call i32 @function_11080(i32 13)
  %v1_e7f4 = call i32 @function_11080(i32 14)
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_e808 = load i32, i32* %stack_var_-8388, align 4
  %v3_e808 = inttoptr i32 %v2_e808 to i8*
  store i32 %v2_e808, i32* %r1.global-to-local, align 4
  %v7_e80c = call i32 @readlink(i8* %v2_e760, i8* %v3_e808, i32 4095)
  %v2_e814 = icmp eq i32 %v7_e80c, -1
  store i32 %v7_e80c, i32* @r5, align 4
  store i32 -4248, i32* %r2.global-to-local, align 4
  br i1 %v2_e814, label %dec_label_pc_e8dc, label %dec_label_pc_e824

dec_label_pc_e824:                                ; preds = %dec_label_pc_e72c
  store i32 %v2_e828, i32* %r1.global-to-local, align 4
  %v2_e82c = add i32 %v7_e80c, %v2_e828
  store i32 %v2_e82c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_e834 = add i32 %v2_e82c, -4248
  %v5_e834 = inttoptr i32 %v4_e834 to i8*
  store i8 0, i8* %v5_e834, align 1
  %v1_e83c = call i32 @function_11138(i32 30)
  %v0_e840 = load i32, i32* @r4, align 4
  store i32 %v0_e840, i32* %r1.global-to-local, align 4
  %v2_e848 = inttoptr i32 %v0_e840 to i32*
  %v3_e848 = call i32 @function_11054(i32 30, i32* %v2_e848)
  %v0_e84c = load i32, i32* @r5, align 4
  %v1_e84c = add i32 %v0_e84c, -1
  store i32 %v1_e84c, i32* @r1, align 4
  store i32 %v3_e848, i32* %r2.global-to-local, align 4
  %v2_e854 = load i32, i32* %stack_var_-8388, align 4
  %v3_e858 = inttoptr i32 %v2_e854 to i8*
  %v4_e858 = call i32 @function_11a58(i8* %v3_e858, i32 %v1_e84c, i32 %v3_e848)
  %v2_e85c = icmp eq i32 %v4_e858, -1
  br i1 %v2_e85c, label %dec_label_pc_e878, label %dec_label_pc_e864

dec_label_pc_e864:                                ; preds = %dec_label_pc_e824
  %v2_e864 = load i32, i32* %stack_var_-8388, align 4
  %v3_e864 = inttoptr i32 %v2_e864 to i8*
  %v3_e868 = call i32 @unlink(i8* %v3_e864)
  %v0_e86c = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_e874 = call i32 @kill(i32 %v0_e86c, i32 9)
  br label %dec_label_pc_e878

dec_label_pc_e878:                                ; preds = %dec_label_pc_e824, %dec_label_pc_e864
  %v1_e87c = call i32 @function_11080(i32 30)
  %v1_e880 = call i32 @getpid()
  %v0_e884 = load i32, i32* @r7, align 4
  %v9_e884 = icmp eq i32 %v0_e884, %v1_e880
  br i1 %v9_e884, label %dec_label_pc_e8b0, label %dec_label_pc_e88c

dec_label_pc_e88c:                                ; preds = %dec_label_pc_e878
  %v0_e88c = call i32 @getppid()
  %v0_e890 = load i32, i32* @r7, align 4
  %v9_e890 = icmp eq i32 %v0_e890, %v0_e88c
  br i1 %v9_e890, label %dec_label_pc_e8b0, label %dec_label_pc_e898

dec_label_pc_e898:                                ; preds = %dec_label_pc_e88c
  store i32 ptrtoint (i8** @global_var_1a410.120 to i32), i32* %r2.global-to-local, align 4
  %v2_e89c = load i32, i32* %stack_var_-8388, align 4
  %v3_e8a0 = load i8*, i8** @global_var_1a410.120, align 4
  %v4_e8a0 = ptrtoint i8* %v3_e8a0 to i32
  store i32 %v4_e8a0, i32* %r1.global-to-local, align 4
  %v5_e8a4 = inttoptr i32 %v2_e89c to i8*
  %v6_e8a4 = call i32 @function_11ae4(i8* %v5_e8a4, i32 %v4_e8a0, i32 ptrtoint (i8** @global_var_1a410.120 to i32))
  %v2_e8a8 = icmp eq i32 %v6_e8a4, 0
  br i1 %v2_e8a8, label %dec_label_pc_e8bc, label %dec_label_pc_e898.dec_label_pc_e8b0_crit_edge

dec_label_pc_e898.dec_label_pc_e8b0_crit_edge:    ; preds = %dec_label_pc_e898
  %v0_e8b4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_e8b0

dec_label_pc_e8b0:                                ; preds = %dec_label_pc_e898.dec_label_pc_e8b0_crit_edge, %dec_label_pc_e88c, %dec_label_pc_e878
  %v0_e8b4 = phi i32 [ %v0_e8b4.pre, %dec_label_pc_e898.dec_label_pc_e8b0_crit_edge ], [ %v0_e88c, %dec_label_pc_e88c ], [ %v1_e880, %dec_label_pc_e878 ]
  store i32 %v2_e730, i32* @r4, align 4
  store i32 %v0_e8b4, i32* @r5, align 4
  br label %dec_label_pc_e698.backedge

dec_label_pc_e698.backedge:                       ; preds = %dec_label_pc_e6f4, %dec_label_pc_e6ec, %dec_label_pc_e6a8, %dec_label_pc_e8b0, %dec_label_pc_ea04, %.thread5
  %v0_e698 = load i32, i32* @sb, align 4
  %v1_e698 = inttoptr i32 %v0_e698 to %__dirstream*
  %v3_e69c = call %dirent* @readdir(%__dirstream* %v1_e698)
  %v2_e6a0 = icmp eq %dirent* %v3_e69c, null
  br i1 %v2_e6a0, label %dec_label_pc_e720, label %dec_label_pc_e6a8.preheader

dec_label_pc_e8bc:                                ; preds = %dec_label_pc_e898
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_e8c0 = load i32, i32* %stack_var_-8388, align 4
  %v3_e8c0 = inttoptr i32 %v2_e8c0 to i8*
  %v4_e8c4 = call i32 (i8*, i32, ...) @open(i8* %v3_e8c0, i32 0)
  %v2_e8c8 = icmp eq i32 %v4_e8c4, -1
  store i32 %v4_e8c4, i32* @r4, align 4
  br i1 %v2_e8c8, label %dec_label_pc_ea54, label %dec_label_pc_e8d4

dec_label_pc_e8d4:                                ; preds = %dec_label_pc_e8bc, %dec_label_pc_ea54
  %v0_e8d4 = phi i32 [ %v4_e8c4, %dec_label_pc_e8bc ], [ %v0_e8d4.pre, %dec_label_pc_ea54 ]
  %v1_e8d8 = call i32 @close(i32 %v0_e8d4)
  br label %dec_label_pc_e8dc

dec_label_pc_e8dc:                                ; preds = %dec_label_pc_e72c, %dec_label_pc_e8d4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_e8e8 = call i32 (i8*, i32, ...) @open(i8* %v2_e760, i32 0)
  %v2_e8ec = icmp eq i32 %v4_e8e8, -1
  store i32 %v4_e8e8, i32* @r8, align 4
  br i1 %v2_e8ec, label %dec_label_pc_ea04, label %dec_label_pc_e8f8

dec_label_pc_e8f8:                                ; preds = %dec_label_pc_e8dc
  %v1_e8fc = call i32 @function_11138(i32 18)
  %v1_e904 = call i32 @function_11138(i32 19)
  store i32 %v2_e90c, i32* %r1.global-to-local, align 4
  %v3_e914 = call i32 @function_11054(i32 18, i32* nonnull %stack_var_-40)
  store i32 %v3_e914, i32* @r5, align 4
  store i32 %v2_e920, i32* %r1.global-to-local, align 4
  %v3_e928 = call i32 @function_11054(i32 19, i32* nonnull %stack_var_-44)
  store i32 %v3_e928, i32* @r6, align 4
  %v0_e930109 = load i32, i32* @r8, align 4
  store i32 %v2_e60c, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_e93c110 = call i32 @read(i32 %v0_e930109, i32* nonnull %stack_var_-8380, i32 4096)
  %tmp104112 = icmp slt i32 %v4_e93c110, 1
  br i1 %tmp104112, label %dec_label_pc_ea38, label %dec_label_pc_e948

dec_label_pc_e948:                                ; preds = %dec_label_pc_e8f8, %dec_label_pc_e930.backedge
  %v4_e93c113 = phi i32 [ %v4_e93c, %dec_label_pc_e930.backedge ], [ %v4_e93c110, %dec_label_pc_e8f8 ]
  store i32 %v2_e7fc, i32* %r3.global-to-local, align 4
  %v3_e94c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e94c, i32* @r4, align 4
  %v5_e954 = icmp slt i32 %v4_e93c113, %v3_e94c
  br i1 %v5_e954, label %dec_label_pc_e964, label %dec_label_pc_e9b8.lr.ph

dec_label_pc_e9b8.lr.ph:                          ; preds = %dec_label_pc_e948
  %v1_e9b027 = add i32 %v4_e93c113, -1
  store i32 %v1_e9b027, i32* %r1.global-to-local, align 4
  %v0_e9b8.pre = load i32, i32* @r5, align 4
  %v1_e9bc.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_e9b8

dec_label_pc_e964:                                ; preds = %dec_label_pc_e9b0.backedge, %dec_label_pc_e948
  store i32 %v2_e7fc, i32* %r1.global-to-local, align 4
  %v3_e968 = load i32, i32* %stack_var_-44, align 4
  %v5_e970 = icmp slt i32 %v4_e93c113, %v3_e968
  br i1 %v5_e970, label %dec_label_pc_e930.backedge, label %.thread19

.thread19:                                        ; preds = %dec_label_pc_e964
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_e97c37 = icmp eq i32 %v4_e93c113, 0
  br i1 %v2_e97c37, label %dec_label_pc_e930.backedge, label %dec_label_pc_e984.lr.ph

dec_label_pc_e930.backedge:                       ; preds = %dec_label_pc_e99c, %.thread19, %dec_label_pc_e964
  %v0_e930 = load i32, i32* @r8, align 4
  store i32 %v2_e60c, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_e93c = call i32 @read(i32 %v0_e930, i32* nonnull %stack_var_-8380, i32 4096)
  %tmp104 = icmp slt i32 %v4_e93c, 1
  br i1 %tmp104, label %dec_label_pc_ea38, label %dec_label_pc_e948

dec_label_pc_e984.lr.ph:                          ; preds = %.thread19
  %v0_e984.pre = load i32, i32* @r6, align 4
  %v1_e988.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_e984

dec_label_pc_e984:                                ; preds = %dec_label_pc_e99c, %dec_label_pc_e984.lr.ph
  %v0_e97c.in = phi i32 [ %v4_e93c113, %dec_label_pc_e984.lr.ph ], [ %v0_e97c, %dec_label_pc_e99c ]
  %v0_e99c = phi i32 [ 0, %dec_label_pc_e984.lr.ph ], [ %v1_e99c, %dec_label_pc_e99c ]
  %v0_e990 = phi i32 [ 0, %dec_label_pc_e984.lr.ph ], [ %v1_e990., %dec_label_pc_e99c ]
  %v0_e97c = add i32 %v0_e97c.in, -1
  %v2_e984 = add i32 %v0_e990, %v0_e984.pre
  %v3_e984 = inttoptr i32 %v2_e984 to i8*
  %v4_e984 = load i8, i8* %v3_e984, align 1
  %v6_e984 = zext i8 %v4_e984 to i32
  store i32 %v6_e984, i32* %r2.global-to-local, align 4
  %v2_e988 = add i32 %v0_e99c, %v1_e988.pre
  %v3_e988 = inttoptr i32 %v2_e988 to i8*
  %v4_e988 = load i8, i8* %v3_e988, align 1
  %v6_e988 = zext i8 %v4_e988 to i32
  store i32 %v6_e988, i32* %r3.global-to-local, align 4
  %v9_e98c = icmp eq i8 %v4_e988, %v4_e984
  %v1_e990 = add i32 %v0_e990, 1
  %v1_e990. = select i1 %v9_e98c, i32 %v1_e990, i32 0
  store i32 %v1_e990., i32* %r1.global-to-local, align 4
  br i1 %v9_e98c, label %dec_label_pc_e9d8, label %dec_label_pc_e99c

dec_label_pc_e99c:                                ; preds = %dec_label_pc_e9d8, %dec_label_pc_e984
  %v1_e99c = add i32 %v0_e99c, 1
  %v2_e97c = icmp eq i32 %v0_e97c, 0
  br i1 %v2_e97c, label %dec_label_pc_e930.backedge, label %dec_label_pc_e984

dec_label_pc_e9a4:                                ; preds = %dec_label_pc_e9b8
  %v9_e9a4 = icmp eq i32 %v3_e94c, %v1_e9c4.
  br i1 %v9_e9a4, label %dec_label_pc_e9e0, label %dec_label_pc_e9b0.backedge

dec_label_pc_e9b0.backedge:                       ; preds = %dec_label_pc_e9b8, %dec_label_pc_e9a4
  %storemerge = add i32 %storemerge.in, 1
  %v1_e9b0 = add i32 %v0_e9b0, -1
  store i32 %v1_e9b0, i32* %r1.global-to-local, align 4
  %v2_e9b0 = icmp eq i32 %v0_e9b0, 0
  br i1 %v2_e9b0, label %dec_label_pc_e964, label %dec_label_pc_e9b8

dec_label_pc_e9b8:                                ; preds = %dec_label_pc_e9b0.backedge, %dec_label_pc_e9b8.lr.ph
  %v0_e9b0 = phi i32 [ %v1_e9b027, %dec_label_pc_e9b8.lr.ph ], [ %v1_e9b0, %dec_label_pc_e9b0.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_e9b8.lr.ph ], [ %storemerge, %dec_label_pc_e9b0.backedge ]
  %v0_e9c4 = phi i32 [ 0, %dec_label_pc_e9b8.lr.ph ], [ %v1_e9c4., %dec_label_pc_e9b0.backedge ]
  %v2_e9b8 = add i32 %v0_e9c4, %v0_e9b8.pre
  %v3_e9b8 = inttoptr i32 %v2_e9b8 to i8*
  %v4_e9b8 = load i8, i8* %v3_e9b8, align 1
  %v6_e9b8 = zext i8 %v4_e9b8 to i32
  store i32 %v6_e9b8, i32* %r2.global-to-local, align 4
  %v2_e9bc = add i32 %storemerge.in, %v1_e9bc.pre
  %v3_e9bc = inttoptr i32 %v2_e9bc to i8*
  %v4_e9bc = load i8, i8* %v3_e9bc, align 1
  %v6_e9bc = zext i8 %v4_e9bc to i32
  store i32 %v6_e9bc, i32* %r3.global-to-local, align 4
  %v9_e9c0 = icmp eq i8 %v4_e9bc, %v4_e9b8
  %v1_e9c4 = add i32 %v0_e9c4, 1
  %v1_e9c4. = select i1 %v9_e9c0, i32 %v1_e9c4, i32 0
  br i1 %v9_e9c0, label %dec_label_pc_e9a4, label %dec_label_pc_e9b0.backedge

dec_label_pc_e9d8:                                ; preds = %dec_label_pc_e984
  %v9_e9d8 = icmp eq i32 %v3_e968, %v1_e990.
  br i1 %v9_e9d8, label %dec_label_pc_e9e0, label %dec_label_pc_e99c

dec_label_pc_e9e0:                                ; preds = %dec_label_pc_e9a4, %dec_label_pc_e9d8
  %v1_e9e4 = call i32 @function_11080(i32 18)
  %v1_e9ec = call i32 @function_11080(i32 19)
  %v0_e9f0 = load i32, i32* @r8, align 4
  %v1_e9f4 = call i32 @close(i32 %v0_e9f0)
  %v0_e9f8 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_ea00 = call i32 @kill(i32 %v0_e9f8, i32 9)
  br label %dec_label_pc_ea04

dec_label_pc_ea04:                                ; preds = %dec_label_pc_e8dc, %dec_label_pc_ea38, %dec_label_pc_e9e0
  store i32 64, i32* @r1, align 4
  store i32 %v2_e75c, i32* @r0, align 4
  %v0_ea10 = call i32 @function_117a4()
  store i32 %v2_e7ac, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_ea20 = call i32 @function_117a4()
  %v1_ea28 = call i32 @sleep(i32 1)
  store i32 %v2_e730, i32* @r4, align 4
  %v0_ea30 = load i32, i32* @r7, align 4
  store i32 %v0_ea30, i32* @r5, align 4
  br label %dec_label_pc_e698.backedge

dec_label_pc_ea38:                                ; preds = %dec_label_pc_e930.backedge, %dec_label_pc_e8f8
  %v1_ea3c = call i32 @function_11080(i32 18)
  %v1_ea44 = call i32 @function_11080(i32 19)
  %v0_ea48 = load i32, i32* @r8, align 4
  %v1_ea4c = call i32 @close(i32 %v0_ea48)
  br label %dec_label_pc_ea04

dec_label_pc_ea54:                                ; preds = %dec_label_pc_e8bc
  %v0_ea54 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_ea5c = call i32 @kill(i32 %v0_ea54, i32 9)
  %v0_e8d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_e8d4

; uselistorder directives
  uselistorder i32 %v1_e9c4., { 1, 0 }
  uselistorder i1 %v9_e9c0, { 1, 0 }
  uselistorder i32 %v0_e9c4, { 1, 0 }
  uselistorder i32 %v1_e990., { 1, 2, 0 }
  uselistorder i1 %v9_e98c, { 1, 0 }
  uselistorder i32 %v0_e990, { 1, 0 }
  uselistorder i32 %v0_e99c, { 1, 0 }
  uselistorder i32 %v4_e93c, { 1, 0 }
  uselistorder i32 %v4_e93c113, { 0, 4, 3, 2, 1 }
  uselistorder %dirent* %v3_e69c, { 1, 0 }
  uselistorder i32 %v2_e808, { 1, 0 }
  uselistorder %dirent* %v3_e714, { 1, 0 }
  uselistorder i32 %v5_e628, { 1, 0 }
  uselistorder i32 %v2_e7ac, { 1, 0, 2 }
  uselistorder i32 %v2_e75c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_e60c, { 1, 0, 2 }
  uselistorder i32 %v2_e5ec, { 1, 0, 2 }
  uselistorder i32 %v1_e540, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge74, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-8380, { 1, 0, 2 }
  uselistorder i32* %stack_var_-40, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 13, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 0, 5, 40, 41, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 18, 17, 19, 20, 21, 23, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39 }
  uselistorder i32 64, { 9, 10, 11, 12, 7, 13, 14, 15, 0, 16, 17, 18, 1, 19, 20, 21, 2, 22, 23, 24, 8, 25, 26, 27, 3, 28, 29, 30, 31, 32, 4, 33, 34, 35, 36, 37, 5, 38, 39, 40, 41, 6, 42 }
  uselistorder i32 (i32, i32)* @kill, { 4, 3, 2, 0, 1, 5 }
  uselistorder i32 (i8*, i32, i32)* @function_11a58, { 0, 2, 1, 3 }
  uselistorder i32 (%__dirstream*)* @closedir, { 2, 1, 0, 3 }
  uselistorder %dirent* null, { 4, 3, 1, 5, 6, 7, 0, 8, 2 }
  uselistorder %dirent* (%__dirstream*)* @readdir, { 6, 7, 1, 5, 4, 8, 0, 3, 2, 9 }
  uselistorder %__dirstream* (i8*)* @opendir, { 2, 1, 0, 3 }
  uselistorder i8** @global_var_1a410.120, { 3, 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1a410.120 to i32), { 0, 4, 3, 2, 1 }
  uselistorder i32 4096, { 5, 9, 0, 1, 6, 10, 7, 11, 2, 8, 3, 4 }
  uselistorder label %dec_label_pc_ea04, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e9e0, { 1, 0 }
  uselistorder label %dec_label_pc_e948, { 1, 0 }
  uselistorder label %dec_label_pc_e8dc, { 1, 0 }
  uselistorder label %dec_label_pc_e8d4, { 1, 0 }
  uselistorder label %dec_label_pc_e698.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_e878, { 1, 0 }
  uselistorder label %dec_label_pc_e6a8, { 1, 0 }
  uselistorder label %dec_label_pc_e6a8.preheader, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_ea70(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ea70:
  store i32 ptrtoint (i32* @global_var_ebf8.122 to i32), i32* @global_var_1a388.124, align 4
  ret i32 %arg1
}

define i32 @function_ea88(i32 %arg1) local_unnamed_addr {
dec_label_pc_ea88:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_ea88 = load i32, i32* @r4, align 4
  %v9_ea88 = load i32, i32* @r6, align 4
  %v12_ea88 = load i32, i32* @r7, align 4
  %v15_ea88 = load i32, i32* @r8, align 4
  store i32 1, i32* %r4.global-to-local, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_eaa4 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1a380.126 to i32), i32* @r6, align 4
  %v2_eaac = icmp eq i32 %v3_eaa4, -1
  store i32 %v3_eaa4, i32* @global_var_1a380.126, align 4
  br i1 %v2_eaac, label %dec_label_pc_eb6c, label %dec_label_pc_eab8

dec_label_pc_eab8:                                ; preds = %dec_label_pc_ea88
  %v0_eabc = load i32, i32* %r4.global-to-local, align 4
  %v6_eacc = call i32 @setsockopt(i32 %v3_eaa4, i32 %v0_eabc, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_ead0 = load i32, i32* @global_var_1a380.126, align 4
  store i32 %v2_ead0, i32* %r4.global-to-local, align 4
  %v2_eae0 = call i32 (i32, i32, ...) @fcntl(i32 %v2_ead0, i32 3)
  %v2_eaf0 = call i32 (i32, i32, ...) @fcntl(i32 %v2_ead0, i32 4)
  store i32 ptrtoint (i8** @global_var_1a38c.128 to i32), i32* @r8, align 4
  %v2_eaf8 = load i8, i8* bitcast (i8** @global_var_1a38c.128 to i8*), align 4
  %v2_eafc = icmp eq i8 %v2_eaf8, 0
  br i1 %v2_eafc, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_eab8
  br label %bb

.thread:                                          ; preds = %dec_label_pc_eab8
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_eb34 = call i32* @__errno_location()
  %v2_eb34 = ptrtoint i32* %v0_eb34 to i32
  %v0_eb38 = load i32, i32* @r5, align 4
  store i32 %v0_eb38, i32* %v0_eb34, align 4
  %v2_eb3c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_eb3c, i32* @r7, align 4
  store i32 %v2_eb34, i32* %r4.global-to-local, align 4
  %tmp21 = bitcast i32* %stack_var_-44 to %sockaddr*
  %v2_eb48 = load i32, i32* @global_var_1a380.126, align 4
  %v5_eb50 = call i32 @bind(i32 %v2_eb48, %sockaddr* %tmp21, i32 16)
  %v2_eb54 = icmp eq i32 %v5_eb50, -1
  br i1 %v2_eb54, label %dec_label_pc_eb74, label %dec_label_pc_eb5c

dec_label_pc_eb5c:                                ; preds = %bb
  %v2_eb64 = load i32, i32* @global_var_1a380.126, align 4
  %v3_eb68 = call i32 @listen(i32 %v2_eb64, i32 1)
  br label %dec_label_pc_eb6c

dec_label_pc_eb6c:                                ; preds = %dec_label_pc_ea88, %dec_label_pc_eb80, %dec_label_pc_eb5c
  %v20_eb70 = phi i32 [ -1, %dec_label_pc_ea88 ], [ %v1_ebd0, %dec_label_pc_eb80 ], [ %v3_eb68, %dec_label_pc_eb5c ]
  store i32 %v3_ea88, i32* @r4, align 4
  store i32 %v9_ea88, i32* @r6, align 4
  store i32 %v12_ea88, i32* @r7, align 4
  store i32 %v15_ea88, i32* @r8, align 4
  ret i32 %v20_eb70

dec_label_pc_eb74:                                ; preds = %bb
  %v0_eb74 = load i32, i32* %r4.global-to-local, align 4
  %v1_eb74 = inttoptr i32 %v0_eb74 to i32*
  %v2_eb74 = load i32, i32* %v1_eb74, align 4
  %v7_eb78 = icmp eq i32 %v2_eb74, 99
  br i1 %v7_eb78, label %dec_label_pc_ebd8, label %dec_label_pc_eb80

dec_label_pc_eb80:                                ; preds = %dec_label_pc_ebd8, %bb22, %dec_label_pc_eb74
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_eb98 = load i32, i32* @global_var_1a380.126, align 4
  %v5_ebb0 = call i32 @connect(i32 %v2_eb98, %sockaddr* %tmp21, i32 16)
  %v1_ebb8 = call i32 @sleep(i32 5)
  %v2_ebbc = load i32, i32* @global_var_1a380.126, align 4
  %v1_ebc0 = call i32 @close(i32 %v2_ebbc)
  %v1_ebcc = call i32 @function_df00(i32 ptrtoint (i32* @global_var_8607.131 to i32))
  %v1_ebd0 = call i32 @function_ea88(i32 %v1_ebcc)
  br label %dec_label_pc_eb6c

dec_label_pc_ebd8:                                ; preds = %dec_label_pc_eb74
  %v2_ebd8 = load i8, i8* bitcast (i8** @global_var_1a38c.128 to i8*), align 4
  %v3_ebd8 = zext i8 %v2_ebd8 to i32
  %v1_ebdc = load i32, i32* @r5, align 4
  %v9_ebdc = icmp eq i32 %v3_ebd8, %v1_ebdc
  br i1 %v9_ebdc, label %dec_label_pc_eb80, label %bb22

bb22:                                             ; preds = %dec_label_pc_ebd8
  %v2_ebe4 = trunc i32 %v1_ebdc to i8
  store i8 %v2_ebe4, i8* bitcast (i8** @global_var_1a38c.128 to i8*), align 4
  br label %dec_label_pc_eb80

; uselistorder directives
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_df00, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @bind, { 2, 1, 0, 3 }
  uselistorder i8* bitcast (i8** @global_var_1a38c.128 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1a38c.128, { 1, 0 }
  uselistorder label %dec_label_pc_eb80, { 1, 0, 2 }
  uselistorder label %dec_label_pc_eb6c, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_ebf8() local_unnamed_addr {
dec_label_pc_ebf8:
  %stack_var_-8 = alloca i32, align 4
  %v3_ebf8 = load i32, i32* @r4, align 4
  store i32 %v3_ebf8, i32* %stack_var_-8, align 4
  %v1_ec00 = call i32 @function_11138(i32 1)
  %v3_ec08 = call i32 @inet_addr(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_11f98.133, i32 0, i32 0))
  store i32 %v3_ec08, i32* @global_var_1a41c.136, align 4
  %v3_ec1c = call i32 @function_11054(i32 1, i32* null)
  %v4_ec1c = inttoptr i32 %v3_ec1c to i8*
  %v2_ec20 = add i32 %v3_ec1c, 1
  %v3_ec20 = inttoptr i32 %v2_ec20 to i8*
  %v4_ec20 = load i8, i8* %v3_ec20, align 1
  %v3_ec24 = load i8, i8* %v4_ec1c, align 1
  store i8 %v4_ec20, i8* bitcast (i32* @global_var_1a41b.137 to i8*), align 4
  store i8 %v3_ec24, i8* bitcast (i32* @global_var_1a41a.138 to i8*), align 4
  %v2_ec3c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ec3c, i32* @r4, align 4
  %v1_ec40 = call i32 @function_11080(i32 1)
  %v0_ec44 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_ec44, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_ebf8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_ebf8, %bb
  ret i32 %v1_ec40

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ec4c(i32 %arg1) local_unnamed_addr {
dec_label_pc_ec4c:
  %v3_ec4c = load i32, i32* @r4, align 4
  %v6_ec4c = load i32, i32* @r5, align 4
  %v0_ec54 = call i32 @fork()
  %v2_ec58 = icmp eq i32 %v0_ec54, -1
  %. = zext i1 %v2_ec58 to i32
  %tmp10 = icmp slt i32 %v0_ec54, 1
  %storemerge4 = select i1 %tmp10, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_ec74 = icmp eq i32 %storemerge4, 0
  store i32 %v0_ec54, i32* @global_var_1a3bc.141, align 4
  br i1 %v2_ec74, label %dec_label_pc_ec88, label %dec_label_pc_ec80

dec_label_pc_ec80:                                ; preds = %dec_label_pc_ec4c
  store i32 %v3_ec4c, i32* @r4, align 4
  store i32 %v6_ec4c, i32* @r5, align 4
  ret i32 %v0_ec54

dec_label_pc_ec88:                                ; preds = %dec_label_pc_ec4c
  %v1_ec94 = call i32 @function_11138(i32 23)
  %v1_ec9c = call i32 @function_11138(i32 24)
  %v0_eca0 = load i32, i32* @r5, align 4
  %v2_eca8 = inttoptr i32 %v0_eca0 to i32*
  %v3_eca8 = call i32 @function_11054(i32 23, i32* %v2_eca8)
  %v4_eca8 = inttoptr i32 %v3_eca8 to i8*
  %v4_ecb0 = call i32 (i8*, i32, ...) @open(i8* %v4_eca8, i32 2)
  %v2_ecb4 = icmp eq i32 %v4_ecb0, -1
  store i32 %v4_ecb0, i32* @r4, align 4
  br i1 %v2_ecb4, label %dec_label_pc_ecfc, label %dec_label_pc_ecc0

dec_label_pc_ecc0:                                ; preds = %dec_label_pc_ecfc, %dec_label_pc_ec88
  %v0_eccc = phi i32 [ %v5_ed0c, %dec_label_pc_ecfc ], [ %v4_ecb0, %dec_label_pc_ec88 ]
  %v2_ecd4 = call i32 (i32, i32, ...) @ioctl(i32 %v0_eccc, i32 -2147199228)
  br label %dec_label_pc_ecd8

dec_label_pc_ecd8:                                ; preds = %dec_label_pc_ecd8, %dec_label_pc_ecc0
  %v0_ece4 = load i32, i32* @r4, align 4
  %v2_ecec = call i32 (i32, i32, ...) @ioctl(i32 %v0_ece4, i32 -2147199227)
  %v1_ecf4 = call i32 @sleep(i32 10)
  br label %dec_label_pc_ecd8

dec_label_pc_ecfc:                                ; preds = %dec_label_pc_ec88
  %v0_ecfc = load i32, i32* @r5, align 4
  %v2_ed04 = inttoptr i32 %v0_ecfc to i32*
  %v3_ed04 = call i32 @function_11054(i32 24, i32* %v2_ed04)
  %v4_ed04 = inttoptr i32 %v3_ed04 to i8*
  %v5_ed0c = call i32 (i8*, i32, ...) @open(i8* %v4_ed04, i32 2)
  %v3_ed10 = icmp eq i32 %v5_ed0c, -1
  store i32 %v5_ed0c, i32* @r4, align 4
  br i1 %v3_ed10, label %dec_label_pc_ed1c, label %dec_label_pc_ecc0

dec_label_pc_ed1c:                                ; preds = %dec_label_pc_ecfc
  %v1_ed20 = call i32 @function_11080(i32 23)
  %v1_ed28 = call i32 @function_11080(i32 24)
  %v0_ed2c = load i32, i32* @r5, align 4
  call void @exit(i32 %v0_ed2c)
  unreachable

; uselistorder directives
  uselistorder i32 %v5_ed0c, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_ec54, { 2, 0, 1, 3 }
  uselistorder i32 (i32, i32, ...)* @ioctl, { 1, 0, 2 }
  uselistorder i32 (i8*, i32, ...)* @open, { 2, 1, 0, 6, 5, 4, 3, 7 }
}

define i32 @function_ed38(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_ed38:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-380 = alloca i32, align 4
  %stack_var_-252 = alloca i32, align 4
  %stack_var_-1532 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-508 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_ed38 = load i32, i32* @r4, align 4
  store i32 %v3_ed38, i32* %stack_var_-36, align 4
  %v6_ed38 = load i32, i32* @r5, align 4
  %v9_ed38 = load i32, i32* @r6, align 4
  %v15_ed38 = load i32, i32* @r8, align 4
  %v2_ed44 = ptrtoint i32* %stack_var_-508 to i32
  store i32 %v2_ed44, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %tmp41 = bitcast i32* %stack_var_-508 to %_TYPEDEF_sigset_t*
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_ed5c = call i32 @sigemptyset(%_TYPEDEF_sigset_t* %tmp41)
  %v4_ed68 = call i32 @sigaddset(%_TYPEDEF_sigset_t* %tmp41, i32 2)
  %v0_ed6c = load i32, i32* @r5, align 4
  %v1_ed6c = inttoptr i32 %v0_ed6c to %_TYPEDEF_sigset_t*
  store i32 %v0_ed6c, i32* %r2.global-to-local, align 4
  %v7_ed78 = call i32 @sigprocmask(i32 %v0_ed6c, %_TYPEDEF_sigset_t* %tmp41, %_TYPEDEF_sigset_t* %v1_ed6c)
  %v4_ed84 = call void (i32)* @signal(i32 17, void (i32)* inttoptr (i32 1 to void (i32)*))
  %v4_ed90 = call void (i32)* @signal(i32 5, void (i32)* bitcast (void (i32)** @global_var_ea70.143 to void (i32)*))
  %v0_ed94 = call i32 @function_119bc()
  store i32 %v0_ed94, i32* @global_var_1a40c.102, align 4
  store i32 1494907824, i32* %r2.global-to-local, align 4
  store i8 23, i8* bitcast (i32* @global_var_1a41b.137 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (%sockaddr** @global_var_1a418.135 to i8*), align 4
  store i32 1494907824, i32* @global_var_1a41c.136, align 4
  %v0_edbc = load i32, i32* @r5, align 4
  %v1_edbc = trunc i32 %v0_edbc to i8
  store i8 %v1_edbc, i8* bitcast (i32* @global_var_1a41a.138 to i8*), align 4
  store i8 %v1_edbc, i8* bitcast (i32* @global_var_1a419.147 to i8*), align 4
  %v6_edc4 = call i32 @function_111f0(i32 %v0_ed94, i32 ptrtoint (%sockaddr** @global_var_1a418.135 to i32), i32 1494907824, i32 2)
  store i32 ptrtoint (i32* @global_var_ebf8.122 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ebf8.122 to i32), i32* @global_var_1a388.124, align 4
  %v1_edd4 = call i32 @function_ea88(i32 %v6_edc4)
  %v1_edd8 = call i32 @function_f4c0(i32 %v1_edd4)
  %v2_ede0 = ptrtoint i32* %stack_var_-124 to i32
  store i32 %v2_ede0, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_ede8 = call i32 @function_117a4()
  %v0_edec = load i32, i32* @r6, align 4
  %v7_edec = icmp eq i32 %v0_edec, 2
  br i1 %v7_edec, label %dec_label_pc_ef14, label %dec_label_pc_edf4

dec_label_pc_edf4:                                ; preds = %dec_label_pc_ef14, %dec_label_pc_ed38, %dec_label_pc_ef24
  %v0_edf4 = call i32 @function_f468()
  store i32 %v0_edf4, i32* %r6.global-to-local, align 4
  %v0_edfc = load i32, i32* @r8, align 4
  %v1_edfc = inttoptr i32 %v0_edfc to i32*
  %v2_edfc = load i32, i32* %v1_edfc, align 4
  %v1_ee00 = inttoptr i32 %v2_edfc to i8*
  %v2_ee00 = call i32 @function_11704(i8* %v1_ee00)
  store i32 %v2_ee00, i32* %r4.global-to-local, align 4
  %v0_ee08 = load i32, i32* @r8, align 4
  %v1_ee08 = inttoptr i32 %v0_ee08 to i32*
  %v2_ee08 = load i32, i32* %v1_ee08, align 4
  %v1_ee0c = inttoptr i32 %v2_ee08 to i8*
  %v2_ee0c = call i32 @function_11704(i8* %v1_ee0c)
  %v1_ee10 = sub i32 20, %v2_ee00
  store i32 %v2_ee0c, i32* @r5, align 4
  %v0_ee18 = load i32, i32* %r6.global-to-local, align 4
  %v2_ee1c = urem i32 %v0_ee18, %v1_ee10
  %v2_ee24 = add i32 %v2_ee1c, %v2_ee0c
  store i32 %v2_ee24, i32* @r4, align 4
  %v2_ee28 = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_ee28, i32* @r6, align 4
  %v2_ee34 = call i32 @function_f51c(i32 %v2_ee28, i32 %v2_ee24)
  %v2_ee38 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_ee38, i32* %r2.global-to-local, align 4
  %v1_ee3c = load i32, i32* @r4, align 4
  %v2_ee3c = add i32 %v1_ee3c, %v2_ee38
  store i32 %v2_ee3c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sb, align 4
  %v0_ee48 = load i32, i32* @r8, align 4
  %v1_ee48 = inttoptr i32 %v0_ee48 to i32*
  %v2_ee48 = load i32, i32* %v1_ee48, align 4
  store i32 %v2_ee48, i32* @r0, align 4
  %v3_ee4c = add i32 %v2_ee3c, -56
  %v4_ee4c = inttoptr i32 %v3_ee4c to i8*
  store i8 0, i8* %v4_ee4c, align 1
  %v2_ee50 = inttoptr i32 %v2_ee48 to i8*
  %v3_ee50 = call i32 @function_1172c(i8* %v2_ee50, i32 %v2_ee28)
  store i32 32, i32* @r1, align 4
  store i32 %v2_ee28, i32* @r0, align 4
  %v0_ee5c = call i32 @function_117a4()
  %v0_ee60 = call i32 @function_f468()
  store i32 %v0_ee60, i32* @r7, align 4
  %v0_ee68 = load i32, i32* @r8, align 4
  %v1_ee68 = inttoptr i32 %v0_ee68 to i32*
  %v2_ee68 = load i32, i32* %v1_ee68, align 4
  %v1_ee6c = inttoptr i32 %v2_ee68 to i8*
  %v2_ee6c = call i32 @function_11704(i8* %v1_ee6c)
  store i32 %v2_ee6c, i32* %r4.global-to-local, align 4
  %v0_ee74 = load i32, i32* @r8, align 4
  %v1_ee74 = inttoptr i32 %v0_ee74 to i32*
  %v2_ee74 = load i32, i32* %v1_ee74, align 4
  %v1_ee78 = inttoptr i32 %v2_ee74 to i8*
  %v2_ee78 = call i32 @function_11704(i8* %v1_ee78)
  %v1_ee7c = sub i32 20, %v2_ee6c
  store i32 %v2_ee78, i32* @r5, align 4
  %v0_ee84 = load i32, i32* @r7, align 4
  %v2_ee88 = urem i32 %v0_ee84, %v1_ee7c
  %v2_ee8c = add i32 %v2_ee88, %v2_ee78
  store i32 %v2_ee8c, i32* @r4, align 4
  %v2_ee98 = call i32 @function_f51c(i32 %v2_ee28, i32 %v2_ee8c)
  %v1_eea0 = load i32, i32* @r4, align 4
  %v2_eea0 = add i32 %v1_eea0, %v2_ee38
  store i32 %v2_eea0, i32* %r3.global-to-local, align 4
  %v0_eea4 = load i32, i32* @sb, align 4
  %v1_eea4 = trunc i32 %v0_eea4 to i8
  %v3_eea4 = add i32 %v2_eea0, -56
  %v4_eea4 = inttoptr i32 %v3_eea4 to i8*
  store i8 %v1_eea4, i8* %v4_eea4, align 1
  %v5_eeb0 = call i32 @prctl(i32 15, i32 %v2_ee28, i32 %v2_eea0, i32 %v2_eea0, i32 ptrtoint (i32* @0 to i32))
  %v1_eeb8 = call i32 @function_11138(i32 3)
  %v3_eec4 = call i32 @function_11054(i32 3, i32* nonnull %stack_var_-52)
  %v3_eec8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_eec8, i32* %r2.global-to-local, align 4
  %v3_eed4 = inttoptr i32 %v3_eec4 to i32*
  %v4_eed4 = call i32 @write(i32 1, i32* %v3_eed4, i32 %v3_eec8)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_eee4 = call i32 @write(i32 ptrtoint (i32* @global_var_11fa4.151 to i32), i32* inttoptr (i32 1 to i32*), i32 1)
  %v1_eeec = call i32 @function_11080(i32 3)
  %v1_eef0 = call i32 @function_934c(i32 %v1_eeec)
  %v1_eef4 = call i32 @function_e49c(i32 %v1_eef0)
  %v1_eef8 = call i32 @function_ec4c(i32 %v1_eef4)
  %v0_eefc = call i32 @fork()
  %v1_ef00 = load i32, i32* @sb, align 4
  %v7_ef04 = icmp sgt i32 %v0_eefc, %v1_ef00
  br i1 %v7_ef04, label %dec_label_pc_ef08, label %dec_label_pc_ef50

dec_label_pc_ef08:                                ; preds = %dec_label_pc_edf4
  %v2_ef10 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ef10, i32* %r4.global-to-local, align 4
  store i32 %v6_ed38, i32* %r5.global-to-local, align 4
  store i32 %v9_ed38, i32* %r6.global-to-local, align 4
  store i32 %v15_ed38, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_ef14:                                ; preds = %dec_label_pc_ed38
  %v0_ef14 = load i32, i32* @r8, align 4
  %v1_ef14 = add i32 %v0_ef14, 4
  %v2_ef14 = inttoptr i32 %v1_ef14 to i32*
  %v3_ef14 = load i32, i32* %v2_ef14, align 4
  %v1_ef18 = inttoptr i32 %v3_ef14 to i8*
  %v2_ef18 = call i32 @function_11704(i8* %v1_ef18)
  %v8_ef20 = icmp sgt i32 %v2_ef18, 31
  br i1 %v8_ef20, label %dec_label_pc_edf4, label %dec_label_pc_ef24

dec_label_pc_ef24:                                ; preds = %dec_label_pc_ef14
  %v0_ef28 = load i32, i32* @r8, align 4
  %v1_ef28 = add i32 %v0_ef28, 4
  %v2_ef28 = inttoptr i32 %v1_ef28 to i32*
  %v3_ef28 = load i32, i32* %v2_ef28, align 4
  store i32 %v2_ede0, i32* @r0, align 4
  %v2_ef30 = bitcast i32* %stack_var_-124 to i8*
  %v3_ef30 = call i32 @function_1172c(i8* %v2_ef30, i32 %v3_ef28)
  %v0_ef34 = load i32, i32* @r8, align 4
  %v1_ef34 = add i32 %v0_ef34, 4
  %v2_ef34 = inttoptr i32 %v1_ef34 to i32*
  %v3_ef34 = load i32, i32* %v2_ef34, align 4
  store i32 %v3_ef34, i32* %r4.global-to-local, align 4
  %v1_ef3c = inttoptr i32 %v3_ef34 to i8*
  %v2_ef3c = call i32 @function_11704(i8* %v1_ef3c)
  store i32 %v2_ef3c, i32* @r1, align 4
  store i32 %v3_ef34, i32* @r0, align 4
  %v0_ef48 = call i32 @function_117a4()
  br label %dec_label_pc_edf4

dec_label_pc_ef50:                                ; preds = %dec_label_pc_edf4
  %v1_ef50 = call i32 @setsid()
  %v0_ef54 = load i32, i32* @sb, align 4
  %v1_ef58 = call i32 @close(i32 %v0_ef54)
  %v1_ef60 = call i32 @close(i32 1)
  %v1_ef68 = call i32 @close(i32 2)
  %v1_ef6c = call i32 @function_934c(i32 %v1_ef68)
  %v1_ef70 = call i32 @function_e49c(i32 %v1_ef6c)
  %v1_ef74 = call i32 @function_ec4c(i32 %v1_ef70)
  %v1_ef78 = call i32 @function_f944(i32 %v1_ef74)
  %v2_ef80 = ptrtoint i32* %stack_var_-1532 to i32
  store i32 %v2_ef80, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a384.154 to i32), i32* @sl, align 4
  %v2_ef98 = ptrtoint i32* %stack_var_-252 to i32
  store i32 %v2_ef98, i32* @r6, align 4
  %v2_ef9c = ptrtoint i32* %stack_var_-380 to i32
  store i32 %v2_ef9c, i32* @r7, align 4
  %tmp42 = bitcast i32* %stack_var_-252 to %_TYPEDEF_fd_set*
  %tmp43 = bitcast i32* %stack_var_-380 to %_TYPEDEF_fd_set*
  %tmp44 = bitcast i32* %stack_var_-60 to %timeval*
  %v7_f324 = bitcast i8** %stack_var_-38 to i32*
  %v2_f2bc = ptrtoint i32* %stack_var_-44 to i32
  %v1_f334 = bitcast i32* %stack_var_-124 to i8*
  br label %dec_label_pc_efa0

dec_label_pc_efa0:                                ; preds = %dec_label_pc_efa0.backedge, %dec_label_pc_ef50
  %v2_efa849 = phi i32 [ %v2_efa849.pre, %dec_label_pc_efa0.backedge ], [ %v2_ef98, %dec_label_pc_ef50 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_efa851 = inttoptr i32 %v2_efa849 to i32*
  store i32 0, i32* %v4_efa851, align 4
  %v0_efac52 = load i32, i32* %r3.global-to-local, align 4
  %v1_efac53 = add i32 %v0_efac52, 4
  store i32 %v1_efac53, i32* %r3.global-to-local, align 4
  %v7_efb054 = icmp eq i32 %v1_efac53, 128
  br i1 %v7_efb054, label %dec_label_pc_efb8, label %dec_label_pc_efa8.dec_label_pc_efa8_crit_edge

dec_label_pc_efa8.dec_label_pc_efa8_crit_edge:    ; preds = %dec_label_pc_efa0, %dec_label_pc_efa8.dec_label_pc_efa8_crit_edge
  %v1_efac55 = phi i32 [ %v1_efac, %dec_label_pc_efa8.dec_label_pc_efa8_crit_edge ], [ %v1_efac53, %dec_label_pc_efa0 ]
  %v0_efa8.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_efa8 = load i32, i32* @r6, align 4
  %v3_efa8 = add i32 %v2_efa8, %v1_efac55
  %v4_efa8 = inttoptr i32 %v3_efa8 to i32*
  store i32 %v0_efa8.pre, i32* %v4_efa8, align 4
  %v0_efac = load i32, i32* %r3.global-to-local, align 4
  %v1_efac = add i32 %v0_efac, 4
  store i32 %v1_efac, i32* %r3.global-to-local, align 4
  %v7_efb0 = icmp eq i32 %v1_efac, 128
  br i1 %v7_efb0, label %dec_label_pc_efb8, label %dec_label_pc_efa8.dec_label_pc_efa8_crit_edge

dec_label_pc_efb8:                                ; preds = %dec_label_pc_efa8.dec_label_pc_efa8_crit_edge, %dec_label_pc_efa0
  %v0_efb8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_efb8, i32* %r3.global-to-local, align 4
  store i32 %v0_efb8, i32* %r4.global-to-local, align 4
  %v2_efc056 = load i32, i32* @r7, align 4
  %v3_efc057 = add i32 %v2_efc056, %v0_efb8
  %v4_efc058 = inttoptr i32 %v3_efc057 to i32*
  store i32 %v0_efb8, i32* %v4_efc058, align 4
  %v0_efc459 = load i32, i32* %r3.global-to-local, align 4
  %v1_efc460 = add i32 %v0_efc459, 4
  store i32 %v1_efc460, i32* %r3.global-to-local, align 4
  %v7_efc861 = icmp eq i32 %v1_efc460, 128
  br i1 %v7_efc861, label %dec_label_pc_efd0, label %dec_label_pc_efc0.dec_label_pc_efc0_crit_edge

dec_label_pc_efc0.dec_label_pc_efc0_crit_edge:    ; preds = %dec_label_pc_efb8, %dec_label_pc_efc0.dec_label_pc_efc0_crit_edge
  %v1_efc462 = phi i32 [ %v1_efc4, %dec_label_pc_efc0.dec_label_pc_efc0_crit_edge ], [ %v1_efc460, %dec_label_pc_efb8 ]
  %v0_efc0.pre = load i32, i32* %r4.global-to-local, align 4
  %v2_efc0 = load i32, i32* @r7, align 4
  %v3_efc0 = add i32 %v2_efc0, %v1_efc462
  %v4_efc0 = inttoptr i32 %v3_efc0 to i32*
  store i32 %v0_efc0.pre, i32* %v4_efc0, align 4
  %v0_efc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_efc4 = add i32 %v0_efc4, 4
  store i32 %v1_efc4, i32* %r3.global-to-local, align 4
  %v7_efc8 = icmp eq i32 %v1_efc4, 128
  br i1 %v7_efc8, label %dec_label_pc_efd0, label %dec_label_pc_efc0.dec_label_pc_efc0_crit_edge

dec_label_pc_efd0:                                ; preds = %dec_label_pc_efc0.dec_label_pc_efc0_crit_edge, %dec_label_pc_efb8
  %v2_efd0 = load i32, i32* @global_var_1a380.126, align 4
  %v2_efd4 = icmp eq i32 %v2_efd0, -1
  br i1 %v2_efd4, label %dec_label_pc_f000, label %dec_label_pc_efdc

dec_label_pc_efdc:                                ; preds = %dec_label_pc_efd0
  %v3_efdc = udiv i32 %v2_efd0, 32
  %v3_efe0 = mul nuw nsw i32 %v3_efdc, 4
  %v2_efe8 = add i32 %v3_efe0, %v2_ee38
  store i32 %v2_efe8, i32* %r3.global-to-local, align 4
  %v1_efec = add i32 %v2_efe8, -216
  %v2_efec = inttoptr i32 %v1_efec to i32*
  %v3_efec = load i32, i32* %v2_efec, align 4
  %v1_eff0 = urem i32 %v2_efd0, 32
  %v7_eff8 = shl i32 1, %v1_eff0
  %v8_eff8 = or i32 %v3_efec, %v7_eff8
  store i32 %v8_eff8, i32* %r2.global-to-local, align 4
  store i32 %v8_eff8, i32* %v2_efec, align 4
  br label %dec_label_pc_f000

dec_label_pc_f000:                                ; preds = %dec_label_pc_efd0, %dec_label_pc_efdc
  %v2_f000 = load i32, i32* @global_var_1a384.154, align 4
  store i32 %v2_f000, i32* %r3.global-to-local, align 4
  %v2_f004 = icmp eq i32 %v2_f000, -1
  store i32 ptrtoint (i32* @global_var_1a384.154 to i32), i32* %r8.global-to-local, align 4
  br i1 %v2_f004, label %dec_label_pc_f23c, label %dec_label_pc_f010

dec_label_pc_f010:                                ; preds = %dec_label_pc_f23c, %dec_label_pc_f000, %.thread
  store i32 ptrtoint (i8** @global_var_1a3c0.156 to i32), i32* %r2.global-to-local, align 4
  %v2_f014 = load i8, i8* bitcast (i8** @global_var_1a3c0.156 to i8*), align 4
  %v2_f018 = icmp eq i8 %v2_f014, 0
  %v2_f120 = load i32, i32* @global_var_1a384.154, align 4
  %v3_f124 = udiv i32 %v2_f120, 32
  store i32 %v3_f124, i32* %r3.global-to-local, align 4
  br i1 %v2_f018, label %dec_label_pc_f120, label %dec_label_pc_f020

dec_label_pc_f020:                                ; preds = %dec_label_pc_f010
  %v3_f028 = mul nuw nsw i32 %v3_f124, 4
  %v2_f030 = add i32 %v3_f028, %v2_ee38
  store i32 %v2_f030, i32* %r3.global-to-local, align 4
  %v1_f034 = add i32 %v2_f030, -344
  %v2_f034 = inttoptr i32 %v1_f034 to i32*
  %v3_f034 = load i32, i32* %v2_f034, align 4
  %v1_f038 = urem i32 %v2_f120, 32
  %v7_f040 = shl i32 1, %v1_f038
  %v8_f040 = or i32 %v3_f034, %v7_f040
  store i32 %v8_f040, i32* %r2.global-to-local, align 4
  store i32 %v8_f040, i32* %v2_f034, align 4
  br label %dec_label_pc_f048

dec_label_pc_f048:                                ; preds = %dec_label_pc_f120, %dec_label_pc_f020
  %v2_f048 = load i32, i32* @global_var_1a380.126, align 4
  %v2_f04c = load i32, i32* @global_var_1a384.154, align 4
  store i32 %v2_f04c, i32* %r3.global-to-local, align 4
  %v5_f058 = icmp slt i32 %v2_f048, %v2_f04c
  br i1 %v5_f058, label %bb, label %bb46

bb:                                               ; preds = %dec_label_pc_f048
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_f048, %bb
  %v0_f070 = phi i32 [ %v2_f048, %dec_label_pc_f048 ], [ %v2_f04c, %bb ]
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f070 = add i32 %v0_f070, 1
  store i32 %v2_ef9c, i32* %r2.global-to-local, align 4
  %v13_f084 = call i32 @select(i32 %v1_f070, %_TYPEDEF_fd_set* %tmp42, %_TYPEDEF_fd_set* %tmp43, %_TYPEDEF_fd_set* null, %timeval* %tmp44)
  %v14_f084 = trunc i32 %v13_f084 to i8
  %v3_f088 = icmp eq i8 %v14_f084, -1
  store i32 %v13_f084, i32* %r3.global-to-local, align 4
  br i1 %v3_f088, label %dec_label_pc_efa0.backedge, label %dec_label_pc_f094

dec_label_pc_f094:                                ; preds = %bb46
  %v3_f094 = icmp eq i8 %v14_f084, 0
  br i1 %v3_f094, label %dec_label_pc_f09c, label %dec_label_pc_f0bc

dec_label_pc_f09c:                                ; preds = %dec_label_pc_f094
  %v0_f09c = load i32, i32* @sb, align 4
  %v6_f0a8 = inttoptr i32 %v13_f084 to i8*
  store i8* %v6_f0a8, i8** %stack_var_-38, align 4
  %v2_f0ac = srem i32 %v0_f09c, 6
  %v2_f0b0 = icmp eq i32 %v2_f0ac, 0
  %v1_f0b4 = add i32 %v0_f09c, 1
  store i32 %v1_f0b4, i32* @sb, align 4
  br i1 %v2_f0b0, label %dec_label_pc_f30c, label %dec_label_pc_f0bc

dec_label_pc_f0bc:                                ; preds = %dec_label_pc_f094, %dec_label_pc_f09c, %dec_label_pc_f30c
  store i32 ptrtoint (i8** @global_var_1a3c0.156 to i32), i32* %r2.global-to-local, align 4
  %v2_f0c0 = load i8, i8* bitcast (i8** @global_var_1a3c0.156 to i8*), align 4
  %v3_f0c0 = zext i8 %v2_f0c0 to i32
  store i32 %v3_f0c0, i32* @r4, align 4
  %v2_f0c4 = icmp eq i8 %v2_f0c0, 0
  %v2_f14c = load i32, i32* @global_var_1a384.154, align 4
  br i1 %v2_f0c4, label %dec_label_pc_f14c, label %dec_label_pc_f0cc

dec_label_pc_f0cc:                                ; preds = %dec_label_pc_f0bc
  %v3_f0d0 = udiv i32 %v2_f14c, 32
  %v3_f0d8 = mul nuw nsw i32 %v3_f0d0, 4
  %v2_f0dc = add i32 %v3_f0d8, %v2_ee38
  store i32 %v2_f0dc, i32* %r3.global-to-local, align 4
  %v1_f0e0 = add i32 %v2_f0dc, -344
  %v2_f0e0 = inttoptr i32 %v1_f0e0 to i32*
  %v3_f0e0 = load i32, i32* %v2_f0e0, align 4
  %v1_f0e4 = urem i32 %v2_f14c, 32
  %v6_f0e8 = lshr i32 %v3_f0e0, %v1_f0e4
  store i32 %v6_f0e8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1a3c0.156 to i32), i32* %r3.global-to-local, align 4
  %v1_f0f4 = urem i32 %v6_f0e8, 2
  %v2_f0f4 = icmp eq i32 %v1_f0f4, 0
  store i8 0, i8* bitcast (i8** @global_var_1a3c0.156 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1a384.154 to i32), i32* @r4, align 4
  br i1 %v2_f0f4, label %dec_label_pc_f104, label %dec_label_pc_f2ac

dec_label_pc_f104:                                ; preds = %dec_label_pc_f0cc
  %v1_f108 = icmp ne i32 %v2_f14c, -1
  call void @__pseudo_cond_branch(i1 %v1_f108, i32 ptrtoint (i32* @global_var_8d7c.157 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f110 = load i32, i32* @r4, align 4
  %v2_f110 = inttoptr i32 %v1_f110 to i32*
  store i32 -1, i32* %v2_f110, align 4
  %v1_f118 = call i32 @sleep(i32 1)
  br label %dec_label_pc_efa0.backedge

dec_label_pc_efa0.backedge:                       ; preds = %dec_label_pc_f104, %dec_label_pc_f218, %dec_label_pc_f2e4, %dec_label_pc_f380, %dec_label_pc_f3ac, %dec_label_pc_f3c8, %dec_label_pc_f430, %bb46, %dec_label_pc_f14c, %dec_label_pc_f15c, %dec_label_pc_f32c, %bb48, %dec_label_pc_f3dc, %dec_label_pc_f398
  %v2_efa849.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_efa0

dec_label_pc_f120:                                ; preds = %dec_label_pc_f010
  store i32 %v2_ee38, i32* %r2.global-to-local, align 4
  %v3_f12c = mul nuw nsw i32 %v3_f124, 4
  %v2_f130 = add i32 %v3_f12c, %v2_ee38
  store i32 %v2_f130, i32* %r3.global-to-local, align 4
  %v1_f134 = add i32 %v2_f130, -216
  %v2_f134 = inttoptr i32 %v1_f134 to i32*
  %v3_f134 = load i32, i32* %v2_f134, align 4
  %v1_f138 = urem i32 %v2_f120, 32
  %v7_f140 = shl i32 1, %v1_f138
  %v8_f140 = or i32 %v3_f134, %v7_f140
  store i32 %v8_f140, i32* %r2.global-to-local, align 4
  store i32 %v8_f140, i32* %v2_f134, align 4
  br label %dec_label_pc_f048

dec_label_pc_f14c:                                ; preds = %dec_label_pc_f0bc
  %v2_f150 = icmp eq i32 %v2_f14c, -1
  store i32 ptrtoint (i32* @global_var_1a384.154 to i32), i32* @r8, align 4
  br i1 %v2_f150, label %dec_label_pc_efa0.backedge, label %dec_label_pc_f15c

dec_label_pc_f15c:                                ; preds = %dec_label_pc_f14c
  %v3_f15c = udiv i32 %v2_f14c, 32
  %v3_f160 = mul nuw nsw i32 %v3_f15c, 4
  %v2_f168 = add i32 %v3_f160, %v2_ee38
  store i32 %v2_f168, i32* %r3.global-to-local, align 4
  %v1_f16c = add i32 %v2_f168, -216
  %v2_f16c = inttoptr i32 %v1_f16c to i32*
  %v3_f16c = load i32, i32* %v2_f16c, align 4
  %v1_f170 = urem i32 %v2_f14c, 32
  %v6_f174 = lshr i32 %v3_f16c, %v1_f170
  store i32 %v6_f174, i32* %r2.global-to-local, align 4
  %v1_f178 = urem i32 %v6_f174, 2
  %v2_f178 = icmp eq i32 %v1_f178, 0
  br i1 %v2_f178, label %dec_label_pc_efa0.backedge, label %dec_label_pc_f180

dec_label_pc_f180:                                ; preds = %dec_label_pc_f15c
  %v6_f180 = inttoptr i32 %v3_f0c0 to i8*
  store i8* %v6_f180, i8** %stack_var_-38, align 4
  %v0_f188 = call i32* @__errno_location()
  %v1_f188 = ptrtoint i32* %v0_f188 to i32
  %v0_f18c = load i32, i32* @r4, align 4
  store i32 %v0_f18c, i32* %v0_f188, align 4
  store i32 %v1_f188, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_f1a0 = load i32, i32* @global_var_1a384.154, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_f1ac = call i32 @recv(i32 %v2_f1a0, i32* %v7_f324, i32 2, i32 16386)
  %v2_f1b0 = icmp eq i32 %v5_f1ac, -1
  br i1 %v2_f1b0, label %dec_label_pc_f398, label %dec_label_pc_f1b8

dec_label_pc_f1b8:                                ; preds = %dec_label_pc_f180
  %v2_f1b8 = icmp eq i32 %v5_f1ac, 0
  br i1 %v2_f1b8, label %dec_label_pc_f218, label %dec_label_pc_f1c0

dec_label_pc_f1c0:                                ; preds = %dec_label_pc_f1b8
  %v3_f1c0 = load i8*, i8** %stack_var_-38, align 4
  %v4_f1c0 = ptrtoint i8* %v3_f1c0 to i32
  store i32 %v3_f0c0, i32* %r3.global-to-local, align 4
  %v4_f1c8 = mul nuw nsw i32 %v3_f0c0, 256
  %v5_f1c8 = or i32 %v4_f1c0, %v4_f1c8
  store i32 %v5_f1c8, i32* %r2.global-to-local, align 4
  %v7_f1c8 = icmp eq i32 %v5_f1c8, 0
  br i1 %v7_f1c8, label %dec_label_pc_f3ac, label %dec_label_pc_f1d0

dec_label_pc_f1d0:                                ; preds = %dec_label_pc_f1c0
  %v1_f1d0 = mul i32 %v4_f1c0, 256
  %v3_f1d4 = and i32 %v1_f1d0, 65280
  %v4_f1d8 = udiv i32 %v5_f1c8, 256
  %v5_f1d8 = or i32 %v3_f1d4, %v4_f1d8
  %v6_f1d8 = trunc i32 %v4_f1d8 to i8
  store i32 %v5_f1d8, i32* %r2.global-to-local, align 4
  %v4_f1dc = udiv i32 %v5_f1c8, 65536
  store i32 %v4_f1dc, i32* %r3.global-to-local, align 4
  %v3_f1e0 = icmp slt i8 %v6_f1d8, 0
  %v7_f1e8 = inttoptr i32 %v4_f1d8 to i8*
  store i8* %v7_f1e8, i8** %stack_var_-38, align 4
  br i1 %v3_f1e0, label %dec_label_pc_f3c8, label %dec_label_pc_f1f0

dec_label_pc_f1f0:                                ; preds = %dec_label_pc_f1d0
  %v0_f1f0 = load i32, i32* @r4, align 4
  %v1_f1f0 = load i32, i32* @r5, align 4
  %v2_f1f0 = inttoptr i32 %v1_f1f0 to i32*
  store i32 %v0_f1f0, i32* %v2_f1f0, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_f1fc = load i32, i32* @global_var_1a384.154, align 4
  %v9_f204 = call i32 @recv(i32 %v2_f1fc, i32* nonnull %stack_var_-1532, i32 %v4_f1d8, i32 16386)
  %v2_f208 = icmp eq i32 %v9_f204, -1
  br i1 %v2_f208, label %dec_label_pc_f398, label %dec_label_pc_f210

dec_label_pc_f210:                                ; preds = %dec_label_pc_f1f0
  %v2_f210 = icmp eq i32 %v9_f204, 0
  br i1 %v2_f210, label %dec_label_pc_f218, label %dec_label_pc_f3dc

dec_label_pc_f218:                                ; preds = %bb48, %dec_label_pc_f210, %dec_label_pc_f1b8
  %v2_f218 = load i32, i32* @global_var_1a384.154, align 4
  %v1_f220 = icmp ne i32 %v2_f218, -1
  call void @__pseudo_cond_branch(i1 %v1_f220, i32 ptrtoint (i32* @global_var_8d7c.157 to i32))
  store i32 ptrtoint (i32* @global_var_1a384.154 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1a384.154, align 4
  %v1_f234 = call i32 @sleep(i32 1)
  br label %dec_label_pc_efa0.backedge

dec_label_pc_f23c:                                ; preds = %dec_label_pc_f000
  %v0_f244 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f244, i32* %r2.global-to-local, align 4
  %v3_f248 = call i32 @socket(i32 2, i32 1, i32 %v0_f244)
  %v2_f24c = icmp eq i32 %v3_f248, -1
  store i32 %v3_f248, i32* %r5.global-to-local, align 4
  %v1_f254 = load i32, i32* %r8.global-to-local, align 4
  %v2_f254 = inttoptr i32 %v1_f254 to i32*
  store i32 %v3_f248, i32* %v2_f254, align 4
  br i1 %v2_f24c, label %dec_label_pc_f010, label %dec_label_pc_f25c

dec_label_pc_f25c:                                ; preds = %dec_label_pc_f23c
  %v0_f25c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f25c, i32* %r2.global-to-local, align 4
  %v2_f264 = call i32 (i32, i32, ...) @fcntl(i32 %v3_f248, i32 3)
  %v1_f26c = or i32 %v2_f264, 2048
  store i32 %v1_f26c, i32* %r2.global-to-local, align 4
  %v0_f270 = load i32, i32* %r5.global-to-local, align 4
  %v2_f274 = call i32 (i32, i32, ...) @fcntl(i32 %v0_f270, i32 4)
  store i32 ptrtoint (i32* @global_var_1a388.124 to i32), i32* %r2.global-to-local, align 4
  %v2_f27c = load i32, i32* @global_var_1a388.124, align 4
  store i32 %v2_f27c, i32* %r3.global-to-local, align 4
  %v2_f280 = icmp eq i32 %v2_f27c, 0
  br i1 %v2_f280, label %.thread, label %bb47

bb47:                                             ; preds = %dec_label_pc_f25c
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_119bc.158 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f25c, %bb47
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f294 = load i32, i32* @global_var_1a384.154, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1a3c0.156 to i8*), align 4
  %v5_f2a4 = call i32 @connect(i32 %v2_f294, %sockaddr* bitcast (%sockaddr** @global_var_1a418.135 to %sockaddr*), i32 16)
  br label %dec_label_pc_f010

dec_label_pc_f2ac:                                ; preds = %dec_label_pc_f0cc
  store i32 4, i32* @r5, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v2_f2bc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-48, align 4
  %v8_f2d4 = call i32 @getsockopt(i32 %v2_f14c, i32 1, i32 4, i32* nonnull %stack_var_-44, i32* nonnull %stack_var_-48)
  %v3_f2d8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f2d8, i32* %r3.global-to-local, align 4
  %v2_f2dc = icmp eq i32 %v3_f2d8, 0
  br i1 %v2_f2dc, label %dec_label_pc_f32c, label %dec_label_pc_f2e4

dec_label_pc_f2e4:                                ; preds = %dec_label_pc_f2ac
  %v2_f2e4 = load i32, i32* @global_var_1a384.154, align 4
  %v1_f2e8 = call i32 @close(i32 %v2_f2e4)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f2f0 = load i32, i32* @r4, align 4
  %v2_f2f0 = inttoptr i32 %v1_f2f0 to i32*
  store i32 -1, i32* %v2_f2f0, align 4
  %v0_f2f4 = call i32 @function_f468()
  %v2_f2fc = urem i32 %v0_f2f4, 10
  %v1_f300 = add nuw nsw i32 %v2_f2fc, 1
  %v1_f304 = call i32 @sleep(i32 %v1_f300)
  br label %dec_label_pc_efa0.backedge

dec_label_pc_f30c:                                ; preds = %dec_label_pc_f09c
  %v2_f314 = load i32, i32* @global_var_1a384.154, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v8_f324 = call i32 @send(i32 %v2_f314, i32* nonnull %v7_f324, i32 2, i32 16384)
  br label %dec_label_pc_f0bc

dec_label_pc_f32c:                                ; preds = %dec_label_pc_f2ac
  %v2_f334 = call i32 @function_11704(i8* %v1_f334)
  %sext = mul i32 %v2_f334, 16777216
  %v1_f338 = sdiv i32 %sext, 16777216
  %v7_f338 = inttoptr i32 %v1_f338 to i8*
  store i8* %v7_f338, i8** %stack_var_-38, align 4
  %v0_f33c = call i32 @function_119bc()
  store i32 %v0_f33c, i32* @global_var_1a40c.102, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f350 = load i32, i32* @r5, align 4
  store i32 %v0_f350, i32* %r2.global-to-local, align 4
  %v2_f354 = load i32, i32* @global_var_1a384.154, align 4
  %v5_f358 = call i32 @send(i32 %v2_f354, i32* nonnull @global_var_11fa8.160, i32 %v0_f350, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_f364 = load i32, i32* @global_var_1a384.154, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f370 = call i32 @send(i32 %v2_f364, i32* %v7_f324, i32 1, i32 16384)
  %v3_f374 = load i8*, i8** %stack_var_-38, align 4
  %v4_f374 = ptrtoint i8* %v3_f374 to i32
  store i32 %v4_f374, i32* %r2.global-to-local, align 4
  %v3_f378 = icmp eq i8* %v3_f374, null
  br i1 %v3_f378, label %dec_label_pc_efa0.backedge, label %dec_label_pc_f380

dec_label_pc_f380:                                ; preds = %dec_label_pc_f32c
  %v2_f384 = load i32, i32* @global_var_1a384.154, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_f390 = call i32 @send(i32 %v2_f384, i32* nonnull %stack_var_-124, i32 %v4_f374, i32 16384)
  br label %dec_label_pc_efa0.backedge

dec_label_pc_f398:                                ; preds = %dec_label_pc_f1f0, %dec_label_pc_f180
  %v0_f398 = load i32, i32* @r5, align 4
  %v1_f398 = inttoptr i32 %v0_f398 to i32*
  %v2_f398 = load i32, i32* %v1_f398, align 4
  store i32 %v2_f398, i32* %r3.global-to-local, align 4
  %v7_f39c = icmp eq i32 %v2_f398, 4
  br i1 %v7_f39c, label %dec_label_pc_efa0.backedge, label %bb48

bb48:                                             ; preds = %dec_label_pc_f398
  %v8_f3a0 = icmp eq i32 %v2_f398, 11
  br i1 %v8_f3a0, label %dec_label_pc_efa0.backedge, label %dec_label_pc_f218

dec_label_pc_f3ac:                                ; preds = %dec_label_pc_f1c0
  %v2_f3b0 = load i32, i32* @global_var_1a384.154, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f3c0 = call i32 @recv(i32 %v2_f3b0, i32* nonnull %v7_f324, i32 2, i32 16384)
  br label %dec_label_pc_efa0.backedge

dec_label_pc_f3c8:                                ; preds = %dec_label_pc_f1d0
  %v2_f3c8 = load i32, i32* @global_var_1a384.154, align 4
  %v1_f3cc = call i32 @close(i32 %v2_f3c8)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f3d4 = load i32, i32* @r8, align 4
  %v2_f3d4 = inttoptr i32 %v1_f3d4 to i32*
  store i32 -1, i32* %v2_f3d4, align 4
  br label %dec_label_pc_efa0.backedge

dec_label_pc_f3dc:                                ; preds = %dec_label_pc_f210
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_f3ec = load i32, i32* @global_var_1a384.154, align 4
  %v5_f3f0 = call i32 @recv(i32 %v2_f3ec, i32* nonnull %v7_f324, i32 2, i32 16384)
  %v3_f3f4 = load i8*, i8** %stack_var_-38, align 4
  %v4_f3f4 = ptrtoint i8* %v3_f3f4 to i32
  %v4_f3f8 = urem i32 %v4_f1dc, 256
  %v4_f3fc = mul i32 %v4_f3f4, 256
  %v5_f3fc = or i32 %v4_f3fc, %v4_f3f8
  store i32 %v5_f3fc, i32* %r2.global-to-local, align 4
  %v3_f404 = sdiv i32 %v4_f3fc, 256
  store i32 %v3_f404, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_f410 = load i32, i32* @global_var_1a384.154, align 4
  %v6_f418 = inttoptr i32 %v5_f3fc to i8*
  store i8* %v6_f418, i8** %stack_var_-38, align 4
  %v8_f41c = call i32 @recv(i32 %v2_f410, i32* nonnull %stack_var_-1532, i32 %v5_f3fc, i32 16384)
  %v3_f420 = load i8*, i8** %stack_var_-38, align 4
  %v4_f420 = ptrtoint i8* %v3_f420 to i32
  store i32 %v4_f420, i32* %r2.global-to-local, align 4
  %v4_f424 = urem i32 %v3_f404, 256
  store i32 %v4_f424, i32* %r3.global-to-local, align 4
  %v6_f428 = mul nuw nsw i32 %v4_f424, 256
  %v7_f428 = or i32 %v4_f420, %v6_f428
  %v9_f428 = icmp eq i32 %v7_f428, 0
  br i1 %v9_f428, label %dec_label_pc_efa0.backedge, label %dec_label_pc_f430

dec_label_pc_f430:                                ; preds = %dec_label_pc_f3dc
  %v7_f434 = call i32 @function_901c(i32* nonnull %stack_var_-1532, i32 %v7_f428, i32 %v4_f420, i32 %v4_f424)
  br label %dec_label_pc_efa0.backedge

; uselistorder directives
  uselistorder i32 %v4_f424, { 2, 0, 1 }
  uselistorder i32 %v4_f420, { 1, 0, 2 }
  uselistorder i32 %v3_f404, { 1, 0 }
  uselistorder i32 %v5_f3fc, { 1, 0, 2 }
  uselistorder i32 %v4_f3fc, { 1, 0 }
  uselistorder i32 %v3_f248, { 0, 2, 1, 3 }
  uselistorder i32 %v4_f1d8, { 2, 3, 0, 1 }
  uselistorder i32 %v2_f14c, { 5, 2, 1, 6, 0, 4, 3 }
  uselistorder i32 %v13_f084, { 1, 0, 2 }
  uselistorder i32 %v2_efd0, { 1, 0, 2 }
  uselistorder i32 %v1_efc4, { 1, 2, 0 }
  uselistorder i32 %v1_efac, { 1, 2, 0 }
  uselistorder i32* %v7_f324, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v2_eea0, { 1, 0, 2, 3 }
  uselistorder i32 %v2_ee38, { 0, 1, 7, 2, 3, 4, 5, 6, 8 }
  uselistorder i32 %v2_ee28, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_ed6c, { 0, 2, 1 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %stack_var_-124, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %stack_var_-60, { 1, 0 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %r4.global-to-local, { 2, 1, 0, 3, 4, 5, 6, 7 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 22, 30, 31, 32, 44, 45, 36, 37, 33, 42, 43, 34, 35, 38, 39, 40, 41 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i8 1, { 1, 2, 0, 3 }
  uselistorder i32 16386, { 0, 2, 1, 3 }
  uselistorder i32 (i32)* @sleep, { 7, 6, 3, 2, 5, 4, 1, 0, 8, 9, 10 }
  uselistorder i8* bitcast (i8** @global_var_1a3c0.156 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1a3c0.156, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1a3c0.156 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1a380.126, { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32* @global_var_1a384.154, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 12, 13, 14, 16, 15, 17, 18 }
  uselistorder i32 (i32)* @function_ec4c, { 1, 0 }
  uselistorder i32 (i32)* @function_e49c, { 1, 0 }
  uselistorder i32 (i32)* @function_934c, { 1, 0 }
  uselistorder i32 (i32, i32*, i32)* @write, { 1, 0, 2 }
  uselistorder i32 (i8*, i32)* @function_1172c, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 21, 22, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32 (i32, i32)* @function_f51c, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_ea88, { 1, 0 }
  uselistorder i32* @global_var_1a388.124, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_ebf8.122 to i32), { 0, 2, 1 }
  uselistorder %sockaddr** @global_var_1a418.135, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_efa0.backedge, { 6, 12, 5, 4, 11, 13, 3, 10, 2, 1, 9, 8, 0, 7 }
  uselistorder label %dec_label_pc_f0bc, { 2, 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_f010, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f000, { 1, 0 }
  uselistorder label %dec_label_pc_efc0.dec_label_pc_efc0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_efa8.dec_label_pc_efa8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_edf4, { 2, 0, 1 }
}

define i32 @function_f468() local_unnamed_addr {
dec_label_pc_f468:
  %v2_f474 = load i32, i32* @global_var_1a3c4.162, align 4
  %v2_f478 = load i32, i32* @global_var_1a3d0.164, align 4
  %v4_f484 = mul i32 %v2_f474, 2048
  %v5_f484 = xor i32 %v4_f484, %v2_f474
  %v4_f488 = udiv i32 %v2_f478, 524288
  %v5_f488 = xor i32 %v4_f488, %v2_f478
  %v2_f48c = load i32, i32* @global_var_1a3c8.166, align 4
  %v2_f490 = load i32, i32* @global_var_1a3cc.168, align 4
  %v2_f494 = xor i32 %v5_f488, %v5_f484
  %v4_f498 = udiv i32 %v5_f484, 256
  %v5_f498 = xor i32 %v2_f494, %v4_f498
  store i32 %v2_f48c, i32* @global_var_1a3c4.162, align 4
  store i32 %v2_f490, i32* @global_var_1a3c8.166, align 4
  store i32 %v2_f478, i32* @global_var_1a3cc.168, align 4
  store i32 %v5_f498, i32* @global_var_1a3d0.164, align 4
  ret i32 %v5_f498

; uselistorder directives
  uselistorder i32 %v2_f478, { 2, 1, 0 }
  uselistorder i32 %v2_f474, { 1, 0 }
}

define i32 @function_f4c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_f4c0:
  %stack_var_-12 = alloca i32, align 4
  %v3_f4c0 = load i32, i32* @r4, align 4
  store i32 %v3_f4c0, i32* %stack_var_-12, align 4
  %v2_f4c8 = call i32 @time(i32* null)
  store i32 %v2_f4c8, i32* @global_var_1a3c4.162, align 4
  %v1_f4d4 = call i32 @getpid()
  %v0_f4dc = call i32 @getppid()
  %v2_f4e4 = xor i32 %v1_f4d4, %v0_f4dc
  store i32 %v2_f4e4, i32* @global_var_1a3c8.166, align 4
  %v1_f4ec = call i32 @clock()
  %v2_f4f0 = load i32, i32* @global_var_1a3c8.166, align 4
  %v2_f4fc = xor i32 %v2_f4f0, %v1_f4ec
  store i32 %v2_f4fc, i32* @global_var_1a3d0.164, align 4
  store i32 %v1_f4ec, i32* @global_var_1a3cc.168, align 4
  %v2_f508 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_f508, i32* @r4, align 4
  ret i32 %v1_f4ec

; uselistorder directives
  uselistorder i32 %v1_f4ec, { 1, 2, 0 }
  uselistorder i32 ()* @getppid, { 0, 2, 1, 3 }
  uselistorder i32 ()* @getpid, { 0, 2, 1, 3 }
}

define i32 @function_f51c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f51c:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f51c = load i32, i32* @r4, align 4
  store i32 %v3_f51c, i32* %stack_var_-36, align 4
  %v6_f51c = load i32, i32* @r5, align 4
  %v9_f51c = load i32, i32* @r6, align 4
  %v12_f51c = load i32, i32* @r7, align 4
  %v28_f51c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_f530 = call i32 @function_11138(i32 28)
  %v3_f53c = call i32 @function_11054(i32 28, i32* null)
  %v1_f540 = inttoptr i32 %v3_f53c to i8*
  %tmp12 = bitcast i32* %stack_var_-68 to i8*
  %v6_f548 = call i8* @strcpy(i8* %tmp12, i8* %v1_f540)
  %v2_f54c = icmp eq i32 %arg2, 0
  br i1 %v2_f54c, label %dec_label_pc_f5c8, label %dec_label_pc_f554

dec_label_pc_f554:                                ; preds = %dec_label_pc_f51c
  store i32 ptrtoint (i32* @global_var_1a3c4.162 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a3c8.166 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a3cc.168 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1a3d0.164 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_f568

dec_label_pc_f568:                                ; preds = %dec_label_pc_f568.dec_label_pc_f568_crit_edge, %dec_label_pc_f554
  %v1_f58c = phi i32 [ %v1_f58c.pre, %dec_label_pc_f568.dec_label_pc_f568_crit_edge ], [ ptrtoint (i32* @global_var_1a3c4.162 to i32), %dec_label_pc_f554 ]
  %v2_f568 = load i32, i32* @global_var_1a3d0.164, align 4
  store i32 %v2_f568, i32* %r2.global-to-local, align 4
  %v2_f56c = load i32, i32* @global_var_1a3c4.162, align 4
  %v4_f570 = udiv i32 %v2_f568, 524288
  %v5_f570 = xor i32 %v4_f570, %v2_f568
  %v4_f574 = mul i32 %v2_f56c, 2048
  %v5_f574 = xor i32 %v4_f574, %v2_f56c
  %v2_f578 = xor i32 %v5_f570, %v5_f574
  %v2_f57c = load i32, i32* @global_var_1a3c8.166, align 4
  %v2_f580 = load i32, i32* @global_var_1a3cc.168, align 4
  store i32 %v2_f580, i32* %ip.global-to-local, align 4
  %v4_f584 = udiv i32 %v5_f574, 256
  %v5_f584 = xor i32 %v2_f578, %v4_f584
  store i32 %v5_f584, i32* @r4, align 4
  %v2_f58c = inttoptr i32 %v1_f58c to i32*
  store i32 %v2_f57c, i32* %v2_f58c, align 4
  %v0_f590 = load i32, i32* %ip.global-to-local, align 4
  %v1_f590 = load i32, i32* %r8.global-to-local, align 4
  %v2_f590 = inttoptr i32 %v1_f590 to i32*
  store i32 %v0_f590, i32* %v2_f590, align 4
  %v0_f594 = load i32, i32* %r2.global-to-local, align 4
  %v1_f594 = load i32, i32* @r7, align 4
  %v2_f594 = inttoptr i32 %v1_f594 to i32*
  store i32 %v0_f594, i32* %v2_f594, align 4
  %v0_f598 = load i32, i32* @r4, align 4
  %v1_f598 = load i32, i32* @r6, align 4
  %v2_f598 = inttoptr i32 %v1_f598 to i32*
  store i32 %v0_f598, i32* %v2_f598, align 4
  %v2_f59c = call i32 @function_11704(i8* %tmp12)
  %v0_f5a4 = load i32, i32* @r4, align 4
  %v2_f5a8 = urem i32 %v0_f5a4, %v2_f59c
  %v2_f5b0 = add i32 %v2_f5a8, %v28_f51c
  %v1_f5b4 = add i32 %v2_f5b0, -32
  %v2_f5b4 = inttoptr i32 %v1_f5b4 to i8*
  %v3_f5b4 = load i8, i8* %v2_f5b4, align 1
  %v2_f5b8 = load i32, i32* @r5, align 4
  %v3_f5b8 = load i32, i32* %fp.global-to-local, align 4
  %v4_f5b8 = add i32 %v3_f5b8, %v2_f5b8
  %v5_f5b8 = inttoptr i32 %v4_f5b8 to i8*
  store i8 %v3_f5b4, i8* %v5_f5b8, align 1
  %v0_f5bc = load i32, i32* @r5, align 4
  %v1_f5bc = add i32 %v0_f5bc, 1
  store i32 %v1_f5bc, i32* @r5, align 4
  %v1_f5c0 = load i32, i32* %sb.global-to-local, align 4
  %v9_f5c0 = icmp eq i32 %v1_f5bc, %v1_f5c0
  br i1 %v9_f5c0, label %dec_label_pc_f5c8, label %dec_label_pc_f568.dec_label_pc_f568_crit_edge

dec_label_pc_f568.dec_label_pc_f568_crit_edge:    ; preds = %dec_label_pc_f568
  %v1_f58c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_f568

dec_label_pc_f5c8:                                ; preds = %dec_label_pc_f568, %dec_label_pc_f51c
  %v1_f5cc = call i32 @function_11080(i32 28)
  %v2_f5d4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f5d4, i32* @r4, align 4
  store i32 %v6_f51c, i32* @r5, align 4
  store i32 %v9_f51c, i32* @r6, align 4
  store i32 %v12_f51c, i32* @r7, align 4
  ret i32 %v1_f5cc

; uselistorder directives
  uselistorder i32 %v2_f56c, { 1, 0 }
  uselistorder i32 %v2_f568, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
}

define i32 @function_f5e8(i8* %arg1) local_unnamed_addr {
dec_label_pc_f5e8:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_f5e8 = load i32, i32* @r4, align 4
  store i32 %v3_f5e8, i32* %stack_var_-36, align 4
  %v9_f5e8 = load i32, i32* @r6, align 4
  %v12_f5e8 = load i32, i32* @r7, align 4
  %v15_f5e8 = load i32, i32* @r8, align 4
  %v18_f5e8 = load i32, i32* @sb, align 4
  %v21_f5e8 = load i32, i32* @sl, align 4
  %v24_f5e8 = load i32, i32* @fp, align 4
  %v0_f5ec = load i32, i32* @r1, align 4
  store i32 %v0_f5ec, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_f5ec, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_f5e8
  store i32 %v3_f5e8, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_f5e8
  store i32 ptrtoint (i32* @global_var_1a3d0.164 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a3cc.168 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a3c8.166 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a3c4.162 to i32), i32* %r8.global-to-local, align 4
  %v2_f608 = load i32, i32* @global_var_1a3d0.164, align 4
  store i32 %v2_f608, i32* %lr.global-to-local, align 4
  %v2_f60c = load i32, i32* @global_var_1a3cc.168, align 4
  store i32 %v2_f60c, i32* %r7.global-to-local, align 4
  %v2_f610 = load i32, i32* @global_var_1a3c8.166, align 4
  store i32 %v2_f610, i32* %r6.global-to-local, align 4
  %v2_f614 = load i32, i32* @global_var_1a3c4.162, align 4
  br label %dec_label_pc_f640

dec_label_pc_f61c:                                ; preds = %dec_label_pc_f66c
  %v3_f674 = sdiv i32 %v5_f658, 256
  %v1_f61c = trunc i32 %v3_f674 to i8
  %v3_f61c = add i32 %v9_f660, 1
  %v4_f61c = inttoptr i32 %v3_f61c to i8*
  store i8 %v1_f61c, i8* %v4_f61c, align 1
  %v0_f620 = load i32, i32* %r3.global-to-local, align 4
  %v1_f620 = trunc i32 %v0_f620 to i8
  %v2_f620 = load i32, i32* %r5.global-to-local, align 4
  %v3_f620 = inttoptr i32 %v2_f620 to i8*
  store i8 %v1_f620, i8* %v3_f620, align 1
  %v0_f624 = load i32, i32* %r5.global-to-local, align 4
  %v1_f624 = add i32 %v0_f624, 2
  store i32 %v1_f624, i32* %r5.global-to-local, align 4
  %v0_f628.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f628

dec_label_pc_f628:                                ; preds = %.thread, %dec_label_pc_f61c
  %v0_f628 = phi i32 [ %v9_f664, %.thread ], [ %v0_f628.pre, %dec_label_pc_f61c ]
  %v2_f61c7 = phi i32 [ %v12_f660, %.thread ], [ %v1_f624, %dec_label_pc_f61c ]
  %tmp22 = icmp slt i32 %v0_f628, 1
  br i1 %tmp22, label %dec_label_pc_f6a8, label %dec_label_pc_f634

dec_label_pc_f634:                                ; preds = %dec_label_pc_f628
  %v0_f62c = load i32, i32* %r6.global-to-local, align 4
  %v0_f634 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_f634, i32* %r6.global-to-local, align 4
  %v0_f638 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_f638, i32* %r7.global-to-local, align 4
  %v0_f63c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_f63c, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_f640

dec_label_pc_f640:                                ; preds = %bb21, %dec_label_pc_f634
  %v0_f690 = phi i32 [ %v2_f610, %bb21 ], [ %v0_f634, %dec_label_pc_f634 ]
  %v9_f660 = phi i32 [ %tmp, %bb21 ], [ %v2_f61c7, %dec_label_pc_f634 ]
  %v0_f678 = phi i32 [ %v0_f5ec, %bb21 ], [ %v0_f628, %dec_label_pc_f634 ]
  %v0_f684 = phi i32 [ %v2_f608, %bb21 ], [ %v0_f63c, %dec_label_pc_f634 ]
  %v0_f680 = phi i32 [ %v2_f614, %bb21 ], [ %v0_f62c, %dec_label_pc_f634 ]
  %v4_f640 = mul i32 %v0_f680, 2048
  %v5_f640 = xor i32 %v4_f640, %v0_f680
  %v4_f644 = udiv i32 %v0_f684, 524288
  %v5_f644 = xor i32 %v4_f644, %v0_f684
  %v2_f648 = xor i32 %v5_f644, %v5_f640
  %v4_f658 = udiv i32 %v5_f640, 256
  %v5_f658 = xor i32 %v4_f658, %v2_f648
  store i32 %v5_f658, i32* %r3.global-to-local, align 4
  %v7_f660 = icmp sgt i32 %v0_f678, 3
  br i1 %v7_f660, label %.thread, label %dec_label_pc_f66c

.thread:                                          ; preds = %dec_label_pc_f640
  %v10_f660 = inttoptr i32 %v9_f660 to i32*
  store i32 %v5_f658, i32* %v10_f660, align 4
  %v11_f660 = load i32, i32* %r5.global-to-local, align 4
  %v12_f660 = add i32 %v11_f660, 4
  store i32 %v12_f660, i32* %r5.global-to-local, align 4
  %v8_f664 = load i32, i32* %r4.global-to-local, align 4
  %v9_f664 = add i32 %v8_f664, -4
  store i32 %v9_f664, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f628

dec_label_pc_f66c:                                ; preds = %dec_label_pc_f640
  store i32 %v5_f658, i32* %r3.global-to-local, align 4
  %v7_f670 = icmp eq i32 %v0_f678, 1
  %v1_f678 = add i32 %v0_f678, -2
  store i32 %v1_f678, i32* %r4.global-to-local, align 4
  br i1 %v7_f670, label %dec_label_pc_f680, label %dec_label_pc_f61c

dec_label_pc_f680:                                ; preds = %dec_label_pc_f66c
  store i32 %v5_f658, i32* %r3.global-to-local, align 4
  %v1_f690 = load i32, i32* %r8.global-to-local, align 4
  %v2_f690 = inttoptr i32 %v1_f690 to i32*
  store i32 %v0_f690, i32* %v2_f690, align 4
  %v0_f694 = load i32, i32* %r7.global-to-local, align 4
  %v1_f694 = load i32, i32* %sl.global-to-local, align 4
  %v2_f694 = inttoptr i32 %v1_f694 to i32*
  store i32 %v0_f694, i32* %v2_f694, align 4
  %v0_f698 = load i32, i32* %lr.global-to-local, align 4
  %v1_f698 = load i32, i32* %sb.global-to-local, align 4
  %v2_f698 = inttoptr i32 %v1_f698 to i32*
  store i32 %v0_f698, i32* %v2_f698, align 4
  %v0_f69c = load i32, i32* %r3.global-to-local, align 4
  %v1_f69c = load i32, i32* %fp.global-to-local, align 4
  %v2_f69c = inttoptr i32 %v1_f69c to i32*
  store i32 %v0_f69c, i32* %v2_f69c, align 4
  %v0_f6a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_f6a0 = trunc i32 %v0_f6a0 to i8
  %v2_f6a0 = load i32, i32* %r5.global-to-local, align 4
  %v3_f6a0 = inttoptr i32 %v2_f6a0 to i8*
  store i8 %v1_f6a0, i8* %v3_f6a0, align 1
  %v2_f6a4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f6a4, i32* @r4, align 4
  store i32 %v9_f5e8, i32* @r6, align 4
  store i32 %v12_f5e8, i32* @r7, align 4
  store i32 %v15_f5e8, i32* @r8, align 4
  store i32 %v18_f5e8, i32* @sb, align 4
  store i32 %v21_f5e8, i32* @sl, align 4
  store i32 %v24_f5e8, i32* @fp, align 4
  ret i32 %v5_f640

dec_label_pc_f6a8:                                ; preds = %dec_label_pc_f628
  %v0_f6a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_f6a8 = load i32, i32* %fp.global-to-local, align 4
  %v2_f6a8 = inttoptr i32 %v1_f6a8 to i32*
  store i32 %v0_f6a8, i32* %v2_f6a8, align 4
  %v0_f6ac = load i32, i32* %lr.global-to-local, align 4
  %v1_f6ac = load i32, i32* %sb.global-to-local, align 4
  %v2_f6ac = inttoptr i32 %v1_f6ac to i32*
  store i32 %v0_f6ac, i32* %v2_f6ac, align 4
  %v0_f6b0 = load i32, i32* %r7.global-to-local, align 4
  %v1_f6b0 = load i32, i32* %sl.global-to-local, align 4
  %v2_f6b0 = inttoptr i32 %v1_f6b0 to i32*
  store i32 %v0_f6b0, i32* %v2_f6b0, align 4
  %v0_f6b4 = load i32, i32* %r6.global-to-local, align 4
  %v1_f6b4 = load i32, i32* %r8.global-to-local, align 4
  %v2_f6b4 = inttoptr i32 %v1_f6b4 to i32*
  store i32 %v0_f6b4, i32* %v2_f6b4, align 4
  %v2_f6b8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f6b8, i32* @r4, align 4
  store i32 %v9_f5e8, i32* @r6, align 4
  store i32 %v12_f5e8, i32* @r7, align 4
  store i32 %v15_f5e8, i32* @r8, align 4
  store i32 %v18_f5e8, i32* @sb, align 4
  store i32 %v21_f5e8, i32* @sl, align 4
  store i32 %v24_f5e8, i32* @fp, align 4
  ret i32 %v5_f640

; uselistorder directives
  uselistorder i32 %v9_f664, { 1, 0 }
  uselistorder i32 %v12_f660, { 1, 0 }
  uselistorder i32 %v5_f658, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_f640, { 1, 2, 0, 3 }
  uselistorder i32 %v0_f680, { 1, 0 }
  uselistorder i32 %v0_f684, { 1, 0 }
  uselistorder i32 %v0_f628, { 1, 0 }
  uselistorder i32 %v24_f5e8, { 1, 0 }
  uselistorder i32 %v21_f5e8, { 1, 0 }
  uselistorder i32 %v18_f5e8, { 1, 0 }
  uselistorder i32 %v15_f5e8, { 1, 0 }
  uselistorder i32 %v12_f5e8, { 1, 0 }
  uselistorder i32 %v9_f5e8, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 5, 0, 3, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_1a3c4.162, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1a3c4.162 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1a3c8.166, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_1a3cc.168, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1a3d0.164, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_f640, { 1, 0 }
}

define i32 @function_f6cc() local_unnamed_addr {
dec_label_pc_f6cc:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f6cc = load i32, i32* @r4, align 4
  store i32 %v3_f6cc, i32* %stack_var_-16, align 4
  %v0_f6d0 = load i32, i32* @r0, align 4
  store i32 %v0_f6d0, i32* %r5.global-to-local, align 4
  %v1_f6d4 = add i32 %v0_f6d0, 4
  %v2_f6d4 = inttoptr i32 %v1_f6d4 to i32*
  %v3_f6d4 = load i32, i32* %v2_f6d4, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  %v1_f6f4 = icmp ne i32 %v3_f6d4, -1
  call void @__pseudo_cond_branch(i1 %v1_f6f4, i32 ptrtoint (i32* @global_var_8d7c.157 to i32))
  %v3_f704 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_f704, i32* %r3.global-to-local, align 4
  %v2_f70c = icmp eq i32 %v3_f704, -1
  store i32 256, i32* @r1, align 4
  %v0_f714 = load i32, i32* %r5.global-to-local, align 4
  %v1_f714 = add i32 %v0_f714, 28
  store i32 %v1_f714, i32* @r0, align 4
  %v2_f718 = add i32 %v0_f714, 4
  %v3_f718 = inttoptr i32 %v2_f718 to i32*
  store i32 %v3_f704, i32* %v3_f718, align 4
  br i1 %v2_f70c, label %dec_label_pc_f6cc.dec_label_pc_f794_crit_edge, label %dec_label_pc_f720

dec_label_pc_f6cc.dec_label_pc_f794_crit_edge:    ; preds = %dec_label_pc_f6cc
  %v14_f798.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_f794

dec_label_pc_f720:                                ; preds = %dec_label_pc_f6cc
  %v0_f720 = load i32, i32* %r6.global-to-local, align 4
  %v1_f720 = load i32, i32* %r5.global-to-local, align 4
  %v2_f720 = add i32 %v1_f720, 24
  %v3_f720 = inttoptr i32 %v2_f720 to i32*
  store i32 %v0_f720, i32* %v3_f720, align 4
  %v0_f724 = call i32 @function_117a4()
  %v0_f728 = load i32, i32* %r5.global-to-local, align 4
  %v1_f728 = add i32 %v0_f728, 4
  %v2_f728 = inttoptr i32 %v1_f728 to i32*
  %v3_f728 = load i32, i32* %v2_f728, align 4
  %v2_f738 = call i32 (i32, i32, ...) @fcntl(i32 %v3_f728, i32 3)
  %v2_f748 = call i32 (i32, i32, ...) @fcntl(i32 %v3_f728, i32 4)
  store i32 ptrtoint (i32* @global_var_1a408.182 to i32), i32* %r3.global-to-local, align 4
  %v0_f750 = load i32, i32* %r5.global-to-local, align 4
  %v2_f754 = load i32, i32* @global_var_1a408.182, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f760 = add i32 %v0_f750, 8
  %v3_f760 = inttoptr i32 %v2_f760 to i32*
  store i32 %v2_f754, i32* %v3_f760, align 4
  %v0_f764 = load i32, i32* %r3.global-to-local, align 4
  %v1_f764 = load i32, i32* %r5.global-to-local, align 4
  %v2_f764 = add i32 %v1_f764, 12
  %v3_f764 = inttoptr i32 %v2_f764 to i32*
  store i32 %v0_f764, i32* %v3_f764, align 4
  %v0_f76c = load i32, i32* %r5.global-to-local, align 4
  %v1_f76c = add i32 %v0_f76c, 4
  %v2_f76c = inttoptr i32 %v1_f76c to i32*
  %v3_f76c = load i32, i32* %v2_f76c, align 4
  %v0_f770 = load i32, i32* %r3.global-to-local, align 4
  %v2_f770 = mul i32 %v0_f770, 2
  store i32 %v2_f770, i32* %r3.global-to-local, align 4
  %tmp13 = bitcast i32* %stack_var_-32 to %sockaddr*
  store i32 %v2_f770, i32* %stack_var_-32, align 4
  %v5_f790 = call i32 @connect(i32 %v3_f76c, %sockaddr* %tmp13, i32 16)
  br label %dec_label_pc_f794

dec_label_pc_f794:                                ; preds = %dec_label_pc_f6cc.dec_label_pc_f794_crit_edge, %dec_label_pc_f720
  %v14_f798 = phi i32 [ %v14_f798.pre, %dec_label_pc_f6cc.dec_label_pc_f794_crit_edge ], [ %v5_f790, %dec_label_pc_f720 ]
  %v2_f798 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f798, i32* @r4, align 4
  ret i32 %v14_f798

; uselistorder directives
  uselistorder i32 %v2_f770, { 1, 0 }
  uselistorder i32* %stack_var_-32, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32 ()* @function_117a4, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f794, { 1, 0 }
}

define i32 @function_f7a0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f7a0:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1a3d4.184 to i32), i32* %r8.global-to-local, align 4
  %v2_f7a8 = load i32, i32* @global_var_1a3d4.184, align 4
  store i32 ptrtoint (i32* @global_var_1a400.186 to i32), i32* %sb.global-to-local, align 4
  %v3_f7b4 = mul i32 %v2_f7a8, 16
  store i32 %v3_f7b4, i32* %r3.global-to-local, align 4
  %v3_f7bc = urem i32 %arg3, 65536
  store i32 %v3_f7bc, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_f7c8 = load i32, i32* @global_var_1a400.186, align 4
  %v1_f7cc = add i32 %v3_f7b4, 16
  store i32 %v1_f7cc, i32* %r1.global-to-local, align 4
  store i32 %v3_f7bc, i32* %stack_var_-44, align 4
  %v15_f7d4 = inttoptr i32 %v2_f7c8 to i32*
  %v16_f7d4 = call i32* @realloc(i32* %v15_f7d4, i32 %v1_f7cc)
  %v18_f7d4 = ptrtoint i32* %v16_f7d4 to i32
  store i32 %v18_f7d4, i32* %sl.global-to-local, align 4
  %v0_f7dc = load i32, i32* %r5.global-to-local, align 4
  %v1_f7e0 = load i32, i32* %sb.global-to-local, align 4
  %v2_f7e0 = inttoptr i32 %v1_f7e0 to i32*
  store i32 %v18_f7d4, i32* %v2_f7e0, align 4
  %v2_f7e4 = load i32, i32* @global_var_1a3d4.184, align 4
  store i32 %v2_f7e4, i32* %fp.global-to-local, align 4
  %v1_f7e8 = inttoptr i32 %v0_f7dc to i8*
  %v2_f7e8 = call i32 @function_11704(i8* %v1_f7e8)
  %sext = mul i32 %v2_f7e8, 16777216
  %v1_f7ec = sdiv i32 %sext, 16777216
  %v2_f7ec = add nsw i32 %v1_f7ec, 1
  store i32 %v1_f7ec, i32* %r7.global-to-local, align 4
  %v1_f7f8 = call i32* @malloc(i32 %v2_f7ec)
  %v3_f7f8 = ptrtoint i32* %v1_f7f8 to i32
  %v0_f7fc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_f7fc, i32* %r1.global-to-local, align 4
  store i32 %v2_f7ec, i32* %r2.global-to-local, align 4
  store i32 %v3_f7f8, i32* %r6.global-to-local, align 4
  %v3_f808 = call i32 @function_11780(i32 %v3_f7f8, i32 %v0_f7fc, i32 %v2_f7ec)
  %v0_f80c = load i32, i32* %r7.global-to-local, align 4
  %tmp21 = icmp slt i32 %v0_f80c, 1
  %extract.t6 = trunc i32 %v0_f80c to i8
  br i1 %tmp21, label %dec_label_pc_f830, label %dec_label_pc_f814

dec_label_pc_f814:                                ; preds = %dec_label_pc_f7a0
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f818

dec_label_pc_f818:                                ; preds = %dec_label_pc_f818, %dec_label_pc_f814
  %v2_f820 = phi i32 [ %v1_f824, %dec_label_pc_f818 ], [ 0, %dec_label_pc_f814 ]
  %v1_f818 = load i32, i32* %r6.global-to-local, align 4
  %v2_f818 = add i32 %v1_f818, %v2_f820
  %v3_f818 = inttoptr i32 %v2_f818 to i8*
  %v4_f818 = load i8, i8* %v3_f818, align 1
  %v6_f818 = zext i8 %v4_f818 to i32
  %v1_f81c = xor i32 %v6_f818, 84
  store i32 %v1_f81c, i32* %r3.global-to-local, align 4
  %v1_f820 = trunc i32 %v1_f81c to i8
  store i8 %v1_f820, i8* %v3_f818, align 1
  %v0_f824 = load i32, i32* %r2.global-to-local, align 4
  %v1_f824 = add i32 %v0_f824, 1
  store i32 %v1_f824, i32* %r2.global-to-local, align 4
  %v0_f828 = load i32, i32* %r7.global-to-local, align 4
  %v9_f828 = icmp eq i32 %v0_f828, %v1_f824
  br i1 %v9_f828, label %dec_label_pc_f830.loopexit, label %dec_label_pc_f818

dec_label_pc_f830.loopexit:                       ; preds = %dec_label_pc_f818
  %extract.t = trunc i32 %v1_f824 to i8
  br label %dec_label_pc_f830

dec_label_pc_f830:                                ; preds = %dec_label_pc_f830.loopexit, %dec_label_pc_f7a0
  %v0_f840.off0 = phi i8 [ %extract.t, %dec_label_pc_f830.loopexit ], [ %extract.t6, %dec_label_pc_f7a0 ]
  %v2_f830 = load i32, i32* @global_var_1a3d4.184, align 4
  %v2_f834 = load i32, i32* @global_var_1a400.186, align 4
  store i32 %v2_f834, i32* %r2.global-to-local, align 4
  %v3_f838 = mul i32 %v2_f830, 16
  %v2_f83c = add i32 %v2_f834, %v3_f838
  store i32 %v2_f83c, i32* %r3.global-to-local, align 4
  %v3_f840 = add i32 %v2_f83c, 12
  %v4_f840 = inttoptr i32 %v3_f840 to i8*
  store i8 %v0_f840.off0, i8* %v4_f840, align 1
  %v0_f844 = load i32, i32* %r6.global-to-local, align 4
  %v1_f844 = load i32, i32* %sl.global-to-local, align 4
  %v2_f844 = load i32, i32* %fp.global-to-local, align 4
  %v5_f844 = mul i32 %v2_f844, 16
  %v6_f844 = add i32 %v5_f844, %v1_f844
  %v7_f844 = inttoptr i32 %v6_f844 to i32*
  store i32 %v0_f844, i32* %v7_f844, align 4
  %v2_f84c = load i32, i32* @global_var_1a3d4.184, align 4
  store i32 %v2_f84c, i32* %r7.global-to-local, align 4
  %v2_f850 = load i32, i32* @global_var_1a400.186, align 4
  store i32 %v2_f850, i32* %sl.global-to-local, align 4
  %v1_f854 = inttoptr i32 %arg2 to i8*
  %v2_f854 = call i32 @function_11704(i8* %v1_f854)
  %sext1 = mul i32 %v2_f854, 16777216
  %v1_f858 = sdiv i32 %sext1, 16777216
  %v2_f858 = add nsw i32 %v1_f858, 1
  store i32 %v1_f858, i32* %r5.global-to-local, align 4
  %v1_f864 = call i32* @malloc(i32 %v2_f858)
  %v3_f864 = ptrtoint i32* %v1_f864 to i32
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %v2_f858, i32* %r2.global-to-local, align 4
  store i32 %v3_f864, i32* %r6.global-to-local, align 4
  %v3_f874 = call i32 @function_11780(i32 %v3_f864, i32 %arg2, i32 %v2_f858)
  %v0_f878 = load i32, i32* %r5.global-to-local, align 4
  %tmp22 = icmp slt i32 %v0_f878, 1
  %extract.t8 = trunc i32 %v0_f878 to i8
  br i1 %tmp22, label %dec_label_pc_f89c, label %dec_label_pc_f880

dec_label_pc_f880:                                ; preds = %dec_label_pc_f830
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f884

dec_label_pc_f884:                                ; preds = %dec_label_pc_f884, %dec_label_pc_f880
  %v2_f88c = phi i32 [ %v1_f890, %dec_label_pc_f884 ], [ 0, %dec_label_pc_f880 ]
  %v1_f884 = load i32, i32* %r6.global-to-local, align 4
  %v2_f884 = add i32 %v1_f884, %v2_f88c
  %v3_f884 = inttoptr i32 %v2_f884 to i8*
  %v4_f884 = load i8, i8* %v3_f884, align 1
  %v6_f884 = zext i8 %v4_f884 to i32
  %v1_f888 = xor i32 %v6_f884, 84
  store i32 %v1_f888, i32* %r3.global-to-local, align 4
  %v1_f88c = trunc i32 %v1_f888 to i8
  store i8 %v1_f88c, i8* %v3_f884, align 1
  %v0_f890 = load i32, i32* %r2.global-to-local, align 4
  %v1_f890 = add i32 %v0_f890, 1
  store i32 %v1_f890, i32* %r2.global-to-local, align 4
  %v0_f894 = load i32, i32* %r5.global-to-local, align 4
  %v9_f894 = icmp eq i32 %v0_f894, %v1_f890
  br i1 %v9_f894, label %dec_label_pc_f89c.loopexit, label %dec_label_pc_f884

dec_label_pc_f89c.loopexit:                       ; preds = %dec_label_pc_f884
  %extract.t7 = trunc i32 %v1_f890 to i8
  br label %dec_label_pc_f89c

dec_label_pc_f89c:                                ; preds = %dec_label_pc_f89c.loopexit, %dec_label_pc_f830
  %v0_f8ac.off0 = phi i8 [ %extract.t7, %dec_label_pc_f89c.loopexit ], [ %extract.t8, %dec_label_pc_f830 ]
  %v2_f89c = load i32, i32* @global_var_1a3d4.184, align 4
  %v2_f8a0 = load i32, i32* @global_var_1a400.186, align 4
  %v3_f8a4 = mul i32 %v2_f89c, 16
  %v2_f8a8 = or i32 %v3_f8a4, 13
  %v3_f8ac = add i32 %v2_f8a8, %v2_f8a0
  %v4_f8ac = inttoptr i32 %v3_f8ac to i8*
  store i8 %v0_f8ac.off0, i8* %v4_f8ac, align 1
  %v2_f8b4 = load i32, i32* @global_var_1a3d4.184, align 4
  store i32 %v2_f8b4, i32* %lr.global-to-local, align 4
  %v4_f8b8 = load i8, i8* @global_var_1a405.189, align 1
  %v5_f8b8 = zext i8 %v4_f8b8 to i32
  %v3_f8bc = load i8, i8* bitcast (i8** @global_var_1a404.188 to i8*), align 4
  %v4_f8bc = zext i8 %v3_f8bc to i32
  %v2_f8c0 = load i32, i32* @global_var_1a400.186, align 4
  %v4_f8c4 = mul nuw nsw i32 %v5_f8b8, 256
  %v5_f8c4 = or i32 %v4_f8bc, %v4_f8c4
  store i32 %v5_f8c4, i32* %r2.global-to-local, align 4
  %v3_f8c8 = mul i32 %v2_f8b4, 16
  %v2_f8cc = add i32 %v2_f8c0, %v3_f8c8
  store i32 %v2_f8cc, i32* %r1.global-to-local, align 4
  %v3_f8d4 = add i32 %v2_f8cc, 9
  %v4_f8d4 = inttoptr i32 %v3_f8d4 to i8*
  store i8 %v4_f8b8, i8* %v4_f8d4, align 1
  %v0_f8d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_f8d8 = trunc i32 %v0_f8d8 to i8
  %v2_f8d8 = load i32, i32* %r1.global-to-local, align 4
  %v3_f8d8 = add i32 %v2_f8d8, 8
  %v4_f8d8 = inttoptr i32 %v3_f8d8 to i8*
  store i8 %v1_f8d8, i8* %v4_f8d8, align 1
  %v4_f8dc = load i8, i8* @global_var_1a405.189, align 1
  %v5_f8dc = zext i8 %v4_f8dc to i32
  %v3_f8e0 = load i8, i8* bitcast (i8** @global_var_1a404.188 to i8*), align 4
  %v4_f8e0 = zext i8 %v3_f8e0 to i32
  %v4_f8e4 = mul nuw nsw i32 %v5_f8dc, 256
  %v5_f8e4 = or i32 %v4_f8e0, %v4_f8e4
  %v2_f8e8 = load i32, i32* %stack_var_-44, align 4
  %v2_f8ec = add i32 %v5_f8e4, %v2_f8e8
  store i32 %v2_f8ec, i32* %r3.global-to-local, align 4
  %v3_f8f09 = udiv i32 %v2_f8ec, 256
  %v1_f8f4 = trunc i32 %v3_f8f09 to i8
  %v2_f8f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_f8f4 = add i32 %v2_f8f4, 11
  %v4_f8f4 = inttoptr i32 %v3_f8f4 to i8*
  store i8 %v1_f8f4, i8* %v4_f8f4, align 1
  %v0_f8f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_f8f8 = trunc i32 %v0_f8f8 to i8
  %v2_f8f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_f8f8 = add i32 %v2_f8f8, 10
  %v4_f8f8 = inttoptr i32 %v3_f8f8 to i8*
  store i8 %v1_f8f8, i8* %v4_f8f8, align 1
  %v4_f8fc = load i8, i8* @global_var_1a405.189, align 1
  %v5_f8fc = zext i8 %v4_f8fc to i32
  %v3_f900 = load i8, i8* bitcast (i8** @global_var_1a404.188 to i8*), align 4
  %v4_f900 = zext i8 %v3_f900 to i32
  %v4_f904 = mul nuw nsw i32 %v5_f8fc, 256
  %v5_f904 = or i32 %v4_f900, %v4_f904
  %v2_f908 = load i32, i32* %stack_var_-44, align 4
  %v2_f90c = add i32 %v5_f904, %v2_f908
  store i32 %v2_f90c, i32* %r2.global-to-local, align 4
  %v0_f910 = load i32, i32* %r7.global-to-local, align 4
  %v3_f910 = mul i32 %v0_f910, 16
  %v1_f914 = load i32, i32* %sl.global-to-local, align 4
  %v2_f914 = add i32 %v1_f914, %v3_f910
  store i32 %v2_f914, i32* %r3.global-to-local, align 4
  %v0_f918 = load i32, i32* %lr.global-to-local, align 4
  %v1_f918 = add i32 %v0_f918, 1
  store i32 %v1_f918, i32* %lr.global-to-local, align 4
  %v3_f91c = sdiv i32 %v2_f90c, 256
  store i32 %v3_f91c, i32* %r1.global-to-local, align 4
  %v0_f920 = load i32, i32* %r6.global-to-local, align 4
  %v2_f920 = add i32 %v2_f914, 4
  %v3_f920 = inttoptr i32 %v2_f920 to i32*
  store i32 %v0_f920, i32* %v3_f920, align 4
  %v0_f924 = load i32, i32* %lr.global-to-local, align 4
  %v1_f924 = load i32, i32* %r8.global-to-local, align 4
  %v2_f924 = inttoptr i32 %v1_f924 to i32*
  store i32 %v0_f924, i32* %v2_f924, align 4
  %v0_f928 = load i32, i32* %r1.global-to-local, align 4
  %v1_f928 = trunc i32 %v0_f928 to i8
  store i8 %v1_f928, i8* @global_var_1a405.189, align 1
  %v0_f92c = load i32, i32* %r2.global-to-local, align 4
  %v1_f92c = trunc i32 %v0_f92c to i8
  store i8 %v1_f92c, i8* bitcast (i8** @global_var_1a404.188 to i8*), align 4
  ret i32 ptrtoint (i8** @global_var_1a404.188 to i32)

; uselistorder directives
  uselistorder i32 %v1_f890, { 0, 2, 3, 1 }
  uselistorder i32 %v3_f864, { 1, 0 }
  uselistorder i32 %v2_f858, { 1, 0, 2 }
  uselistorder i32 %v1_f824, { 0, 2, 3, 1 }
  uselistorder i32 %v3_f7f8, { 1, 0 }
  uselistorder i32 %v2_f7ec, { 1, 0, 2 }
  uselistorder i32 %v3_f7bc, { 1, 0 }
  uselistorder i32 %v3_f7b4, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 (i8*)* @function_11704, { 0, 1, 19, 2, 3, 4, 5, 6, 7, 8, 20, 21, 22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23 }
  uselistorder i32* (i32*, i32)* @realloc, { 5, 6, 3, 11, 4, 7, 1, 2, 0, 8, 9, 10, 12 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_f944(i32 %arg1) local_unnamed_addr {
dec_label_pc_f944:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %sp.global-to-local = alloca i32, align 4
  store i32 0, i32* %sp.global-to-local, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f944 = load i32, i32* @r4, align 4
  store i32 %v3_f944, i32* %stack_var_-36, align 4
  %v15_f944 = load i32, i32* @r8, align 4
  %v18_f944 = load i32, i32* @sb, align 4
  %v21_f944 = load i32, i32* @sl, align 4
  %v0_f950 = call i32 @fork()
  store i32 %v0_f950, i32* %r0.global-to-local, align 4
  %v2_f954 = icmp eq i32 %v0_f950, -1
  %. = zext i1 %v2_f954 to i32
  %tmp293 = icmp slt i32 %v0_f950, 1
  %storemerge252 = select i1 %tmp293, i32 %., i32 1
  store i32 %storemerge252, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1a430.191 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f970 = icmp eq i32 %storemerge252, 0
  store i1 %v2_f970, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_f950, i32* @global_var_1a430.191, align 4
  br i1 %v2_f970, label %dec_label_pc_f988, label %dec_label_pc_f97c

dec_label_pc_f97c:                                ; preds = %dec_label_pc_f944
  store i32 %v3_f944, i32* %r4.global-to-local, align 4
  store i32 %v15_f944, i32* %r8.global-to-local, align 4
  store i32 %v18_f944, i32* @sb, align 4
  store i32 %v21_f944, i32* %sl.global-to-local, align 4
  ret i32 %v0_f950

dec_label_pc_f988:                                ; preds = %dec_label_pc_f944
  %v0_f988 = call i32 @function_119bc()
  store i32 %v0_f988, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a40c.102 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_f988, i32* @global_var_1a40c.102, align 4
  %v1_f994 = call i32 @function_f4c0(i32 %v0_f988)
  %v0_f998 = load i32, i32* @r4, align 4
  store i32 %v0_f998, i32* %r0.global-to-local, align 4
  %v1_f99c = inttoptr i32 %v0_f998 to i32*
  %v2_f99c = call i32 @time(i32* %v1_f99c)
  store i32 ptrtoint (i32* @global_var_1a408.182 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_f99c, i32* @global_var_1a408.182, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_f9b0 = call i32* @calloc(i32 256, i32 288)
  %v4_f9b0 = ptrtoint i32* %v2_f9b0 to i32
  store i32 %v4_f9b0, i32* %lr.global-to-local, align 4
  %v0_f9bc = load i32, i32* @r4, align 4
  store i32 %v0_f9bc, i32* %stack_var_-52, align 4
  store i32 %v4_f9b0, i32* @global_var_1a428.195, align 4
  store i32 %v0_f9bc, i32* %r3.global-to-local, align 4
  store i32 %v0_f9bc, i32* @r5, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_f9bc, i32* %ip.global-to-local, align 4
  %v1_f9d4 = add i32 %v4_f9b0, 4
  store i32 %v1_f9d4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f9d8

dec_label_pc_f9d8:                                ; preds = %dec_label_pc_f9d8.dec_label_pc_f9d8_crit_edge, %dec_label_pc_f988
  %v0_f9f0 = phi i32 [ %v0_f9f0.pre, %dec_label_pc_f9d8.dec_label_pc_f9d8_crit_edge ], [ %v0_f9bc, %dec_label_pc_f988 ]
  %v0_f9e0 = phi i32 [ %v0_f9f8, %dec_label_pc_f9d8.dec_label_pc_f9d8_crit_edge ], [ %v0_f9bc, %dec_label_pc_f988 ]
  %v1_f9e8 = phi i32 [ %v1_f9e8.pre, %dec_label_pc_f9d8.dec_label_pc_f9d8_crit_edge ], [ %v4_f9b0, %dec_label_pc_f988 ]
  %v3_f9d8 = mul i32 %v0_f9e0, 256
  store i32 %v3_f9d8, i32* %r2.global-to-local, align 4
  %v1_f9e0 = add i32 %v0_f9e0, 1
  store i32 %v1_f9e0, i32* %ip.global-to-local, align 4
  %v2_f9e4 = mul i32 %v0_f9e0, 288
  %v2_f9e8 = add i32 %v1_f9e8, 12
  %v2_f9f0 = add i32 %v2_f9e8, %v2_f9e4
  %v3_f9f0 = inttoptr i32 %v2_f9f0 to i32*
  store i32 %v0_f9f0, i32* %v3_f9f0, align 4
  %v0_f9f4 = load i32, i32* %r0.global-to-local, align 4
  %v1_f9f4 = load i32, i32* %r1.global-to-local, align 4
  %v2_f9f4 = inttoptr i32 %v1_f9f4 to i32*
  store i32 %v0_f9f4, i32* %v2_f9f4, align 4
  %v3_f9f4 = load i32, i32* %r1.global-to-local, align 4
  %v4_f9f4 = add i32 %v3_f9f4, 288
  store i32 %v4_f9f4, i32* %r1.global-to-local, align 4
  %v0_f9f8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_f9f8, i32* %r3.global-to-local, align 4
  %v7_f9fc = icmp sgt i32 %v1_f9e0, 255
  br i1 %v7_f9fc, label %dec_label_pc_fa00, label %dec_label_pc_f9d8.dec_label_pc_f9d8_crit_edge

dec_label_pc_f9d8.dec_label_pc_f9d8_crit_edge:    ; preds = %dec_label_pc_f9d8
  %v1_f9e8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_f9f0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_f9d8

dec_label_pc_fa00:                                ; preds = %dec_label_pc_f9d8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_f9f8, i32* %stack_var_-52, align 4
  %v3_fa10 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_fa10, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a42c.197 to i32), i32* %lr.global-to-local, align 4
  %v2_fa18 = icmp eq i32 %v3_fa10, -1
  store i1 %v2_fa18, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_fa18, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_fa10, i32* %r4.global-to-local, align 4
  store i32 %v3_fa10, i32* @global_var_1a42c.197, align 4
  br i1 %v2_fa18, label %dec_label_pc_101e8, label %dec_label_pc_fa28

dec_label_pc_fa28:                                ; preds = %dec_label_pc_fa00
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_fa2c = load i32, i32* @r5, align 4
  store i32 %v0_fa2c, i32* %r2.global-to-local, align 4
  %v2_fa30 = call i32 (i32, i32, ...) @fcntl(i32 %v3_fa10, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_fa38 = or i32 %v2_fa30, 2048
  store i32 %v1_fa38, i32* %r2.global-to-local, align 4
  %v0_fa3c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_fa3c, i32* %r0.global-to-local, align 4
  %v2_fa40 = call i32 (i32, i32, ...) @fcntl(i32 %v0_fa3c, i32 4)
  %v2_fa4c = load i32, i32* @global_var_1a42c.197, align 4
  store i32 %v2_fa4c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_fa54 = load i32, i32* @r5, align 4
  store i32 %v0_fa54, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_fa5c = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_fa5c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %r4.global-to-local, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v7_fa6c = call i32 @setsockopt(i32 %v2_fa4c, i32 %v0_fa54, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v7_fa6c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa70 = icmp eq i32 %v7_fa6c, 0
  store i1 %v2_fa70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa70, label %dec_label_pc_fa78, label %dec_label_pc_102d8

dec_label_pc_fa78:                                ; preds = %dec_label_pc_fa28, %dec_label_pc_fa78
  %v0_fa78 = call i32 @function_f468()
  %v3_fa7c = mul i32 %v0_fa78, 65536
  store i32 %v3_fa7c, i32* %r0.global-to-local, align 4
  %v1_fa88 = mul i32 %v0_fa78, 256
  %v3_fa8c = and i32 %v1_fa88, 65280
  %tmp296 = udiv i32 %v0_fa78, 256
  %v4_fa90 = urem i32 %tmp296, 256
  %v5_fa90 = or i32 %v4_fa90, %v3_fa8c
  store i32 %v5_fa90, i32* %r3.global-to-local, align 4
  %v2_fa94 = icmp ugt i32 %v5_fa90, 1023
  store i1 %v2_fa94, i1* %cpsr_c.global-to-local, align 1
  %v7_fa94 = icmp eq i32 %v5_fa90, 1024
  store i1 %v7_fa94, i1* %cpsr_z.global-to-local, align 1
  %v3_fa98 = icmp ult i32 %v5_fa90, 1022
  br i1 %v3_fa98, label %dec_label_pc_fa78, label %dec_label_pc_fa9c

dec_label_pc_fa9c:                                ; preds = %dec_label_pc_fa78
  %v5_fa84.le = trunc i32 %v0_fa78 to i8
  store i32 ptrtoint (i32* @global_var_1a3d8.199 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i32* @global_var_1a3d8.199 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1a3db.200 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1a3da.201 to i8*), align 4
  %v0_fad0 = call i32 @function_f468()
  %v1_fad0 = trunc i32 %v0_fad0 to i8
  store i32 %v0_fad0, i32* %r0.global-to-local, align 4
  %v3_fad8 = load i8, i8* @global_var_1a3f8.204, align 1
  store i32 ptrtoint (i32* @global_var_1a3d8.199 to i32), i32* %lr.global-to-local, align 4
  %v4_fae0251 = udiv i32 %v0_fad0, 256
  %v1_fae4 = trunc i32 %v4_fae0251 to i8
  store i8 %v1_fae4, i8* bitcast (i32* @global_var_1a3dd.205 to i8*), align 4
  %v4_fae8 = sext i8 %v5_fa84.le to i32
  store i8 6, i8* bitcast (i32* @global_var_1a3e1.206 to i8*), align 4
  %tmp = urem i8 %v3_fad8, 16
  %v1_faf4 = zext i8 %tmp to i32
  store i32 ptrtoint (i32* @global_var_1a3ec.203 to i32), i32* %r2.global-to-local, align 4
  %v1_fafc = and i32 %v4_fae8, 128
  %v2_fafc = icmp ne i32 %v1_fafc, 0
  store i1 %v2_fafc, i1* %cpsr_c.global-to-local, align 1
  %v3_fafc = sdiv i32 %v4_fae8, 256
  store i32 %v3_fafc, i32* %ip.global-to-local, align 4
  %v1_fb00 = or i32 %v1_faf4, 80
  store i32 %v1_fb00, i32* %r1.global-to-local, align 4
  store i8 64, i8* bitcast (i32* @global_var_1a3e0.207 to i8*), align 4
  %v1_fb0c = trunc i32 %v1_fb00 to i8
  store i8 %v1_fb0c, i8* @global_var_1a3f8.204, align 1
  store i8 23, i8* bitcast (i32* @global_var_1a3ef.208 to i8*), align 4
  store i32 %v4_fae8, i32* %r3.global-to-local, align 4
  %v1_fb1c = trunc i32 %v3_fafc to i8
  store i8 %v1_fb1c, i8* bitcast (i32* @global_var_1a3ed.209 to i8*), align 4
  store i8 %v1_fad0, i8* bitcast (i32* @global_var_1a3dc.210 to i8*), align 4
  store i8 %v5_fa84.le, i8* bitcast (i32* @global_var_1a3ec.203 to i8*), align 4
  %v0_fb28 = load i32, i32* @r5, align 4
  %v1_fb28 = trunc i32 %v0_fb28 to i8
  store i8 %v1_fb28, i8* bitcast (i32* @global_var_1a3ee.211 to i8*), align 4
  %v0_fb2c = call i32 @function_f468()
  %v1_fb2c = trunc i32 %v0_fb2c to i8
  %v3_fb34 = load i8, i8* @global_var_1a3f9.212, align 1
  %v4_fb34 = zext i8 %v3_fb34 to i32
  store i32 ptrtoint (i32* @global_var_1a3ec.203 to i32), i32* %lr.global-to-local, align 4
  %v2_fb3c = and i32 %v0_fb2c, 128
  %v3_fb3c = icmp ne i32 %v2_fb3c, 0
  store i1 %v3_fb3c, i1* %cpsr_c.global-to-local, align 1
  %v4_fb3c = sdiv i32 %v0_fb2c, 256
  store i32 %v4_fb3c, i32* %ip.global-to-local, align 4
  %v1_fb40 = or i32 %v4_fb34, 2
  store i32 %v1_fb40, i32* %r3.global-to-local, align 4
  %v1_fb48 = trunc i32 %v4_fb3c to i8
  store i8 %v1_fb48, i8* bitcast (i32* @global_var_1a3fb.213 to i8*), align 4
  %v1_fb4c = trunc i32 %v1_fb40 to i8
  store i8 %v1_fb4c, i8* @global_var_1a3f9.212, align 1
  store i8 %v1_fb2c, i8* bitcast (i32* @global_var_1a3fa.214 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12034.216 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12038.218 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_fb60 = call i32 @function_f7a0(i32 ptrtoint ([5 x i8]* @global_var_12034.216 to i32), i32 ptrtoint (i32* @global_var_12038.218 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_12034.216 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_11fb0.220 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_fb70 = call i32 @function_f7a0(i32 ptrtoint ([5 x i8]* @global_var_12034.216 to i32), i32 ptrtoint ([5 x i8]* @global_var_11fb0.220 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_12034.216 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_11fb8.222 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_fb80 = call i32 @function_f7a0(i32 ptrtoint ([5 x i8]* @global_var_12034.216 to i32), i32 ptrtoint ([9 x i8]* @global_var_11fb8.222 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_11fc4.224 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_11fc4.224 to i32), i32* %r1.global-to-local, align 4
  %v5_fb90 = call i32 @function_f7a0(i32 ptrtoint ([7 x i8]* @global_var_11fc4.224 to i32), i32 ptrtoint ([7 x i8]* @global_var_11fc4.224 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_11fcc.226 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12038.218 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_fba0 = call i32 @function_f7a0(i32 ptrtoint ([8 x i8]* @global_var_11fcc.226 to i32), i32 ptrtoint (i32* @global_var_12038.218 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_12034.216 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_11fd4.228 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_fbb0 = call i32 @function_f7a0(i32 ptrtoint ([5 x i8]* @global_var_12034.216 to i32), i32 ptrtoint ([9 x i8]* @global_var_11fd4.228 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_11fe0.230 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_11fe0.230 to i32), i32* %r1.global-to-local, align 4
  %v5_fbc0 = call i32 @function_f7a0(i32 ptrtoint ([6 x i8]* @global_var_11fe0.230 to i32), i32 ptrtoint ([6 x i8]* @global_var_11fe0.230 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_12034.216 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_11fe8.232 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_fbd0 = call i32 @function_f7a0(i32 ptrtoint ([5 x i8]* @global_var_12034.216 to i32), i32 ptrtoint ([6 x i8]* @global_var_11fe8.232 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_11ff0.234 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_11ff0.234 to i32), i32* %r1.global-to-local, align 4
  %v5_fbe0 = call i32 @function_f7a0(i32 ptrtoint ([8 x i8]* @global_var_11ff0.234 to i32), i32 ptrtoint ([8 x i8]* @global_var_11ff0.234 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_12034.216 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_11fcc.226 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_fbf0 = call i32 @function_f7a0(i32 ptrtoint ([5 x i8]* @global_var_12034.216 to i32), i32 ptrtoint ([8 x i8]* @global_var_11fcc.226 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_12034.216 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_11ff8.236 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_fc00 = call i32 @function_f7a0(i32 ptrtoint ([5 x i8]* @global_var_12034.216 to i32), i32 ptrtoint (i32* @global_var_11ff8.236 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_12034.216 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_12008.238 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_fc10 = call i32 @function_f7a0(i32 ptrtoint ([5 x i8]* @global_var_12034.216 to i32), i32 ptrtoint ([6 x i8]* @global_var_12008.238 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_12010.240 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12010.240 to i32), i32* %r1.global-to-local, align 4
  %v5_fc20 = call i32 @function_f7a0(i32 ptrtoint ([5 x i8]* @global_var_12010.240 to i32), i32 ptrtoint ([5 x i8]* @global_var_12010.240 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_12010.240 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_12008.238 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_fc30 = call i32 @function_f7a0(i32 ptrtoint ([5 x i8]* @global_var_12010.240 to i32), i32 ptrtoint ([6 x i8]* @global_var_12008.238 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_11fcc.226 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12018.242 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_fc40 = call i32 @function_f7a0(i32 ptrtoint ([8 x i8]* @global_var_11fcc.226 to i32), i32 ptrtoint (i32* @global_var_12018.242 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_11fcc.226 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12024.244 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_fc50 = call i32 @function_f7a0(i32 ptrtoint ([8 x i8]* @global_var_11fcc.226 to i32), i32 ptrtoint (i32* @global_var_12024.244 to i32), i32 15)
  %v2_fc58 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_fc58, i32* %r0.global-to-local, align 4
  %v2_fc5c = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_fc5c, i32* %r1.global-to-local, align 4
  %tmp297 = bitcast i32* %stack_var_-1842 to i8*
  %v1_fffc = add i32 %v2_fc58, 16
  %v2_fffc = inttoptr i32 %v1_fffc to i32*
  %v1_10020 = or i32 %v2_fc5c, 1
  %v2_10020 = inttoptr i32 %v1_10020 to i8*
  %v1_10044 = or i32 %v2_fc5c, 2
  %v2_10044 = inttoptr i32 %v1_10044 to i8*
  %v1_10048 = or i32 %v2_fc5c, 3
  %v2_10048 = inttoptr i32 %v1_10048 to i8*
  %v1_10060 = add i32 %v2_fc5c, 13
  %v2_10060 = inttoptr i32 %v1_10060 to i8*
  %v1_1000c = add i32 %v2_fc58, 9
  %v2_1000c = inttoptr i32 %v1_1000c to i8*
  %v1_10084 = add i32 %v2_fc5c, 8
  %v2_10084 = inttoptr i32 %v1_10084 to i32*
  %v1_100c4 = add i32 %v2_fc58, 12
  %v2_100c4 = inttoptr i32 %v1_100c4 to i32*
  %v2_102f8 = ptrtoint i32* %stack_var_-36 to i32
  %v2_1037c = ptrtoint i32* %stack_var_-76 to i32
  %v2_10380 = ptrtoint i32* %stack_var_-348 to i32
  %tmp340 = bitcast i32* %stack_var_-348 to %_TYPEDEF_fd_set*
  %v2_10388 = ptrtoint i32* %stack_var_-64 to i32
  %v2_1038c = ptrtoint i32* %stack_var_-220 to i32
  %tmp341 = bitcast i32* %stack_var_-220 to %_TYPEDEF_fd_set*
  %tmp343 = bitcast i32* %stack_var_-64 to %timeval*
  %v2_10d38 = ptrtoint i32* %stack_var_-41 to i32
  %v2_10d48 = ptrtoint i32* %stack_var_-73 to i32
  %v2_10524 = ptrtoint i32* %stack_var_-56 to i32
  %v2_10a1c = ptrtoint i32* %stack_var_-48 to i32
  %v2_ff70 = ptrtoint i32* %stack_var_-92 to i32
  %tmp298 = bitcast i32* %stack_var_-92 to %sockaddr*
  br label %dec_label_pc_fc68

dec_label_pc_fc68:                                ; preds = %dec_label_pc_103e8, %dec_label_pc_fa9c
  store i32 ptrtoint (i32* @global_var_1a408.182 to i32), i32* %r2.global-to-local, align 4
  %v2_fc6c = load i32, i32* @global_var_1a408.182, align 4
  store i32 %v2_fc6c, i32* %r8.global-to-local, align 4
  %v0_fc70 = load i32, i32* @fp, align 4
  %v3_fc70 = icmp uge i32 %v0_fc70, %v2_fc6c
  store i1 %v3_fc70, i1* %cpsr_c.global-to-local, align 1
  %v9_fc70 = icmp eq i32 %v0_fc70, %v2_fc6c
  store i1 %v9_fc70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fc70, label %dec_label_pc_ff9c, label %dec_label_pc_fc78

dec_label_pc_fc78:                                ; preds = %dec_label_pc_fc68
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_fc84

dec_label_pc_fc84:                                ; preds = %.thread68.dec_label_pc_fc84_crit_edge, %dec_label_pc_fc78
  %v0_fc84 = phi i32 [ %v0_fc84.pre, %.thread68.dec_label_pc_fc84_crit_edge ], [ 0, %dec_label_pc_fc78 ]
  store i32 %v0_fc84, i32* %stack_var_-92, align 4
  %v0_fc94 = call i32 @function_f468()
  %v1_fc94 = trunc i32 %v0_fc94 to i8
  store i32 %v0_fc94, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a40c.102 to i32), i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a3d8.199 to i32), i32* %lr.global-to-local, align 4
  %v2_fca0 = load i32, i32* @global_var_1a40c.102, align 4
  store i32 %v2_fca0, i32* %r2.global-to-local, align 4
  %v2_fca4 = and i32 %v0_fc94, 128
  %v3_fca4 = icmp ne i32 %v2_fca4, 0
  store i1 %v3_fca4, i1* %cpsr_c.global-to-local, align 1
  %v4_fca4 = sdiv i32 %v0_fc94, 256
  store i32 %v4_fca4, i32* %r3.global-to-local, align 4
  %v1_fca8 = trunc i32 %v4_fca4 to i8
  store i8 %v1_fca8, i8* bitcast (i32* @global_var_1a3dd.205 to i8*), align 4
  store i32 %v2_fca0, i32* @global_var_1a3e4.245, align 4
  store i8 %v1_fc94, i8* bitcast (i32* @global_var_1a3dc.210 to i8*), align 4
  br label %dec_label_pc_fcb4

dec_label_pc_fcb4:                                ; preds = %dec_label_pc_fe0c, %dec_label_pc_fce4, %dec_label_pc_fe40, %dec_label_pc_fe34, %dec_label_pc_fe28, %dec_label_pc_fe1c, %.thread53, %.thread37, %.thread33, %.thread29, %bb324, %bb323, %bb322, %bb321, %bb320, %bb319, %bb318, %bb317, %bb316, %bb315, %dec_label_pc_fd80, %dec_label_pc_fd78, %bb309, %dec_label_pc_fd48, %dec_label_pc_fd24, %bb302, %dec_label_pc_fcf4, %bb301, %dec_label_pc_fcdc, %bb300, %bb326, %dec_label_pc_fc84
  %v0_fcb4 = call i32 @function_f468()
  store i32 %v0_fcb4, i32* %r0.global-to-local, align 4
  %v1_fcb8 = urem i32 %v0_fcb4, 256
  store i32 %v1_fcb8, i32* %r1.global-to-local, align 4
  %v3_fcbc = udiv i32 %v0_fcb4, 256
  store i32 %v3_fcbc, i32* %r3.global-to-local, align 4
  %v3_fcc0 = udiv i32 %v0_fcb4, 65536
  store i32 %v3_fcc0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fcc4 = icmp eq i32 %v1_fcb8, 0
  store i1 %v2_fcc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fcc4, label %bb300, label %bb299

bb299:                                            ; preds = %dec_label_pc_fcb4
  %v3_fcc8 = icmp ugt i32 %v1_fcb8, 126
  store i1 %v3_fcc8, i1* %cpsr_c.global-to-local, align 1
  %v8_fcc8 = icmp eq i32 %v1_fcb8, 127
  store i1 %v8_fcc8, i1* %cpsr_z.global-to-local, align 1
  br label %bb300

bb300:                                            ; preds = %dec_label_pc_fcb4, %bb299
  %v0_fcd8 = phi i1 [ true, %dec_label_pc_fcb4 ], [ %v8_fcc8, %bb299 ]
  %v1_fccc = urem i32 %v3_fcbc, 256
  store i32 %v1_fccc, i32* %ip.global-to-local, align 4
  %v1_fcd0 = urem i32 %v3_fcc0, 256
  store i32 %v1_fcd0, i32* %r2.global-to-local, align 4
  %v1_fcd4 = and i32 %v0_fcb4, 8388608
  %v2_fcd4 = icmp ne i32 %v1_fcd4, 0
  store i1 %v2_fcd4, i1* %cpsr_c.global-to-local, align 1
  %v3_fcd4 = udiv i32 %v0_fcb4, 16777216
  store i32 %v3_fcd4, i32* %r0.global-to-local, align 4
  br i1 %v0_fcd8, label %dec_label_pc_fcb4, label %dec_label_pc_fcdc

dec_label_pc_fcdc:                                ; preds = %bb300
  %v2_fcdc = icmp ugt i32 %v1_fcb8, 2
  store i1 %v2_fcdc, i1* %cpsr_c.global-to-local, align 1
  %v7_fcdc = icmp eq i32 %v1_fcb8, 3
  store i1 %v7_fcdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcdc, label %dec_label_pc_fcb4, label %dec_label_pc_fce4

dec_label_pc_fce4:                                ; preds = %dec_label_pc_fcdc
  %v1_fce4 = add nsw i32 %v1_fcb8, -15
  store i32 %v1_fce4, i32* %r3.global-to-local, align 4
  %v2_fce8 = icmp ugt i32 %v1_fcb8, 55
  store i1 %v2_fce8, i1* %cpsr_c.global-to-local, align 1
  %v7_fce8 = icmp eq i32 %v1_fcb8, 56
  store i1 %v7_fce8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fce8, label %dec_label_pc_fcb4, label %bb301

bb301:                                            ; preds = %dec_label_pc_fce4
  %v3_fcec = icmp ne i32 %v1_fce4, 0
  store i1 %v3_fcec, i1* %cpsr_c.global-to-local, align 1
  %v8_fcec = icmp eq i32 %v1_fce4, 1
  store i1 %v8_fcec, i1* %cpsr_z.global-to-local, align 1
  %v2_fcf0 = xor i1 %v3_fcec, true
  %v3_fcf0 = or i1 %v8_fcec, %v2_fcf0
  br i1 %v3_fcf0, label %dec_label_pc_fcb4, label %dec_label_pc_fcf4

dec_label_pc_fcf4:                                ; preds = %bb301
  %v2_fcf4 = icmp ugt i32 %v1_fcb8, 9
  store i1 %v2_fcf4, i1* %cpsr_c.global-to-local, align 1
  %v7_fcf4 = icmp eq i32 %v1_fcb8, 10
  store i1 %v7_fcf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcf4, label %dec_label_pc_fcb4, label %dec_label_pc_fcfc

dec_label_pc_fcfc:                                ; preds = %dec_label_pc_fcf4
  %v2_fcfc = icmp ugt i32 %v1_fcb8, 191
  store i1 %v2_fcfc, i1* %cpsr_c.global-to-local, align 1
  %v7_fcfc = icmp eq i32 %v1_fcb8, 192
  store i1 %v7_fcfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcfc, label %bb302, label %dec_label_pc_fd08

bb302:                                            ; preds = %dec_label_pc_fcfc
  %v3_fd00 = icmp ugt i32 %v1_fccc, 167
  store i1 %v3_fd00, i1* %cpsr_c.global-to-local, align 1
  %v8_fd00 = icmp eq i32 %v1_fccc, 168
  store i1 %v8_fd00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fd00, label %dec_label_pc_fcb4, label %dec_label_pc_fd08

dec_label_pc_fd08:                                ; preds = %dec_label_pc_fcfc, %bb302
  %v7_fd08 = icmp eq i32 %v1_fcb8, 172
  %.381 = zext i1 %v7_fd08 to i32
  store i32 %.381, i32* %r3.global-to-local, align 4
  %v2_fd14 = icmp ugt i32 %v1_fccc, 14
  store i1 %v2_fd14, i1* %cpsr_c.global-to-local, align 1
  %v7_fd14 = icmp eq i32 %v1_fccc, 15
  store i1 %v7_fd14, i1* %cpsr_z.global-to-local, align 1
  %v2_fd18 = xor i1 %v2_fd14, true
  %v3_fd18 = or i1 %v7_fd14, %v2_fd18
  br i1 %v3_fd18, label %.thread13, label %bb305

.thread13:                                        ; preds = %dec_label_pc_fd08
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fd2c

bb305:                                            ; preds = %dec_label_pc_fd08
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd1c = icmp eq i1 %v7_fd08, false
  store i1 %v2_fd1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fd1c, label %dec_label_pc_fd2c, label %dec_label_pc_fd24

dec_label_pc_fd24:                                ; preds = %bb305
  %v2_fd24 = icmp ugt i32 %v1_fccc, 30
  store i1 %v2_fd24, i1* %cpsr_c.global-to-local, align 1
  %v7_fd24 = icmp eq i32 %v1_fccc, 31
  store i1 %v7_fd24, i1* %cpsr_z.global-to-local, align 1
  %v2_fd28 = xor i1 %v2_fd24, true
  %v3_fd28 = or i1 %v7_fd24, %v2_fd28
  br i1 %v3_fd28, label %dec_label_pc_fcb4, label %dec_label_pc_fd2c

dec_label_pc_fd2c:                                ; preds = %.thread13, %dec_label_pc_fd24, %bb305
  %v7_fd2c = icmp eq i32 %v1_fcb8, 100
  %.382 = zext i1 %v7_fd2c to i32
  store i32 %.382, i32* %r3.global-to-local, align 4
  %v2_fd38 = icmp ugt i32 %v1_fccc, 62
  store i1 %v2_fd38, i1* %cpsr_c.global-to-local, align 1
  %v7_fd38 = icmp eq i32 %v1_fccc, 63
  store i1 %v7_fd38, i1* %cpsr_z.global-to-local, align 1
  %v2_fd3c = xor i1 %v2_fd38, true
  %v3_fd3c = or i1 %v7_fd38, %v2_fd3c
  br i1 %v3_fd3c, label %.thread18, label %bb308

.thread18:                                        ; preds = %dec_label_pc_fd2c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fd50

bb308:                                            ; preds = %dec_label_pc_fd2c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd40 = icmp eq i1 %v7_fd2c, false
  store i1 %v2_fd40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fd40, label %dec_label_pc_fd50, label %dec_label_pc_fd48

dec_label_pc_fd48:                                ; preds = %bb308
  %v2_fd48 = icmp ugt i32 %v1_fccc, 125
  store i1 %v2_fd48, i1* %cpsr_c.global-to-local, align 1
  %v7_fd48 = icmp eq i32 %v1_fccc, 126
  store i1 %v7_fd48, i1* %cpsr_z.global-to-local, align 1
  %v2_fd4c = xor i1 %v2_fd48, true
  %v3_fd4c = or i1 %v7_fd48, %v2_fd4c
  br i1 %v3_fd4c, label %dec_label_pc_fcb4, label %dec_label_pc_fd50

dec_label_pc_fd50:                                ; preds = %.thread18, %dec_label_pc_fd48, %bb308
  %v2_fd50 = icmp ugt i32 %v1_fcb8, 168
  store i1 %v2_fd50, i1* %cpsr_c.global-to-local, align 1
  %v7_fd50 = icmp eq i32 %v1_fcb8, 169
  store i1 %v7_fd50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd50, label %bb309, label %dec_label_pc_fd5c

bb309:                                            ; preds = %dec_label_pc_fd50
  %v3_fd54 = icmp eq i32 %v1_fccc, 255
  store i1 %v3_fd54, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_fd54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fd54, label %dec_label_pc_fcb4, label %dec_label_pc_fd5c

dec_label_pc_fd5c:                                ; preds = %dec_label_pc_fd50, %bb309
  %v7_fd5c = icmp eq i32 %v1_fcb8, 198
  %.383 = zext i1 %v7_fd5c to i32
  store i32 %.383, i32* %r3.global-to-local, align 4
  %v2_fd68 = icmp ugt i32 %v1_fccc, 16
  store i1 %v2_fd68, i1* %cpsr_c.global-to-local, align 1
  %v7_fd68 = icmp eq i32 %v1_fccc, 17
  store i1 %v7_fd68, i1* %cpsr_z.global-to-local, align 1
  %v2_fd6c = xor i1 %v2_fd68, true
  %v3_fd6c = or i1 %v7_fd68, %v2_fd6c
  br i1 %v3_fd6c, label %.thread24, label %bb312

.thread24:                                        ; preds = %dec_label_pc_fd5c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fd80

bb312:                                            ; preds = %dec_label_pc_fd5c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd70 = icmp eq i1 %v7_fd5c, false
  store i1 %v2_fd70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fd70, label %dec_label_pc_fd80, label %dec_label_pc_fd78

dec_label_pc_fd78:                                ; preds = %bb312
  %v2_fd78 = icmp ugt i32 %v1_fccc, 18
  store i1 %v2_fd78, i1* %cpsr_c.global-to-local, align 1
  %v7_fd78 = icmp eq i32 %v1_fccc, 19
  store i1 %v7_fd78, i1* %cpsr_z.global-to-local, align 1
  %v2_fd7c = xor i1 %v2_fd78, true
  %v3_fd7c = or i1 %v7_fd78, %v2_fd7c
  br i1 %v3_fd7c, label %dec_label_pc_fcb4, label %dec_label_pc_fd80

dec_label_pc_fd80:                                ; preds = %.thread24, %dec_label_pc_fd78, %bb312
  %v2_fd80 = icmp ugt i32 %v1_fcb8, 222
  store i1 %v2_fd80, i1* %cpsr_c.global-to-local, align 1
  %v7_fd80 = icmp eq i32 %v1_fcb8, 223
  store i1 %v7_fd80, i1* %cpsr_z.global-to-local, align 1
  %v2_fd84 = xor i1 %v7_fd80, true
  %v3_fd84 = and i1 %v2_fd80, %v2_fd84
  br i1 %v3_fd84, label %dec_label_pc_fcb4, label %dec_label_pc_fd88

dec_label_pc_fd88:                                ; preds = %dec_label_pc_fd80
  %v7_fd88 = icmp eq i32 %v1_fcb8, 106
  %.384 = zext i1 %v7_fd88 to i32
  store i32 %.384, i32* %lr.global-to-local, align 4
  %v2_fd94 = icmp ugt i32 %v1_fccc, 185
  store i1 %v2_fd94, i1* %cpsr_c.global-to-local, align 1
  %v7_fd94 = icmp eq i32 %v1_fccc, 186
  store i1 %v7_fd94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd94, label %bb315, label %dec_label_pc_fda0

bb315:                                            ; preds = %dec_label_pc_fd88
  %v2_fd88 = icmp ugt i32 %v1_fcb8, 105
  store i1 %v2_fd88, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_fd88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd88, label %dec_label_pc_fcb4, label %dec_label_pc_fda0.thread

dec_label_pc_fda0.thread:                         ; preds = %bb315
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fdb4

dec_label_pc_fda0:                                ; preds = %dec_label_pc_fd88
  %v2_fda0 = icmp ugt i32 %v1_fccc, 186
  store i1 %v2_fda0, i1* %cpsr_c.global-to-local, align 1
  %v7_fda0 = icmp eq i32 %v1_fccc, 187
  store i1 %v7_fda0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fda0, label %.thread29, label %dec_label_pc_fdb4

.thread29:                                        ; preds = %dec_label_pc_fda0
  store i32 %.384, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fdac = icmp eq i1 %v7_fd88, false
  store i1 %v2_fdac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fdac, label %dec_label_pc_fdb4.thread, label %dec_label_pc_fcb4

dec_label_pc_fdb4.thread:                         ; preds = %.thread29
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fdc8

dec_label_pc_fdb4:                                ; preds = %dec_label_pc_fda0, %dec_label_pc_fda0.thread
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_fdb4 = icmp ugt i32 %v1_fccc, 184
  store i1 %v2_fdb4, i1* %cpsr_c.global-to-local, align 1
  %v7_fdb4 = icmp eq i32 %v1_fccc, 185
  store i1 %v7_fdb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdb4, label %.thread33, label %dec_label_pc_fdc8

.thread33:                                        ; preds = %dec_label_pc_fdb4
  store i32 %.384, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fdc0 = icmp eq i1 %v7_fd88, false
  store i1 %v2_fdc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fdc0, label %dec_label_pc_fdc8.thread, label %dec_label_pc_fcb4

dec_label_pc_fdc8.thread:                         ; preds = %.thread33
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %.thread38

dec_label_pc_fdc8:                                ; preds = %dec_label_pc_fdb4, %dec_label_pc_fdb4.thread
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_fdc8 = icmp ugt i32 %v1_fccc, 183
  store i1 %v2_fdc8, i1* %cpsr_c.global-to-local, align 1
  %v7_fdc8 = icmp eq i32 %v1_fccc, 184
  store i1 %v7_fdc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdc8, label %.thread37, label %.thread38

.thread38:                                        ; preds = %dec_label_pc_fdc8.thread, %dec_label_pc_fdc8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fddc

.thread37:                                        ; preds = %dec_label_pc_fdc8
  store i32 %.384, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fdd4 = icmp eq i1 %v7_fd88, false
  store i1 %v2_fdd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fdd4, label %dec_label_pc_fddc, label %dec_label_pc_fcb4

dec_label_pc_fddc:                                ; preds = %.thread38, %.thread37
  %v2_fddc = icmp ugt i32 %v1_fcb8, 149
  store i1 %v2_fddc, i1* %cpsr_c.global-to-local, align 1
  %v7_fddc = icmp eq i32 %v1_fcb8, 150
  store i1 %v7_fddc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fddc, label %bb316, label %dec_label_pc_fde8

bb316:                                            ; preds = %dec_label_pc_fddc
  %v3_fde0 = icmp ugt i32 %v1_fccc, 30
  store i1 %v3_fde0, i1* %cpsr_c.global-to-local, align 1
  %v8_fde0 = icmp eq i32 %v1_fccc, 31
  store i1 %v8_fde0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fde0, label %dec_label_pc_fcb4, label %dec_label_pc_fde8.thread

dec_label_pc_fde8.thread:                         ; preds = %bb316
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fdf4.thread

dec_label_pc_fde8:                                ; preds = %dec_label_pc_fddc
  %v2_fde8 = icmp ugt i32 %v1_fcb8, 48
  store i1 %v2_fde8, i1* %cpsr_c.global-to-local, align 1
  %v7_fde8 = icmp eq i32 %v1_fcb8, 49
  store i1 %v7_fde8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fde8, label %bb317, label %dec_label_pc_fdf4

bb317:                                            ; preds = %dec_label_pc_fde8
  %v3_fdec = icmp ugt i32 %v1_fccc, 50
  store i1 %v3_fdec, i1* %cpsr_c.global-to-local, align 1
  %v8_fdec = icmp eq i32 %v1_fccc, 51
  store i1 %v8_fdec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fdec, label %dec_label_pc_fcb4, label %dec_label_pc_fdf4.thread

dec_label_pc_fdf4.thread:                         ; preds = %dec_label_pc_fde8.thread, %bb317
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fe00.thread

dec_label_pc_fdf4:                                ; preds = %dec_label_pc_fde8
  %v2_fdf4 = icmp ugt i32 %v1_fcb8, 177
  store i1 %v2_fdf4, i1* %cpsr_c.global-to-local, align 1
  %v7_fdf4 = icmp eq i32 %v1_fcb8, 178
  store i1 %v7_fdf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdf4, label %bb318, label %dec_label_pc_fe00

bb318:                                            ; preds = %dec_label_pc_fdf4
  %v3_fdf8 = icmp ugt i32 %v1_fccc, 61
  store i1 %v3_fdf8, i1* %cpsr_c.global-to-local, align 1
  %v8_fdf8 = icmp eq i32 %v1_fccc, 62
  store i1 %v8_fdf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fdf8, label %dec_label_pc_fcb4, label %dec_label_pc_fe00.thread

dec_label_pc_fe00.thread:                         ; preds = %dec_label_pc_fdf4.thread, %bb318
  %v2_fe00396 = icmp ugt i32 %v1_fcb8, 159
  store i1 %v2_fe00396, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fe0c.thread

dec_label_pc_fe00:                                ; preds = %dec_label_pc_fdf4
  %v2_fe00 = icmp ugt i32 %v1_fcb8, 159
  store i1 %v2_fe00, i1* %cpsr_c.global-to-local, align 1
  %v7_fe00 = icmp eq i32 %v1_fcb8, 160
  store i1 %v7_fe00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe00, label %bb319, label %dec_label_pc_fe0c

bb319:                                            ; preds = %dec_label_pc_fe00
  %v3_fe04 = icmp ugt i32 %v1_fccc, 12
  store i1 %v3_fe04, i1* %cpsr_c.global-to-local, align 1
  %v8_fe04 = icmp eq i32 %v1_fccc, 13
  store i1 %v8_fe04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fe04, label %dec_label_pc_fcb4, label %dec_label_pc_fe0c.thread

dec_label_pc_fe0c.thread:                         ; preds = %dec_label_pc_fe00.thread, %bb319
  %v1_fe0c398 = add nsw i32 %v1_fcb8, -6
  store i32 %v1_fe0c398, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %bb320

dec_label_pc_fe0c:                                ; preds = %dec_label_pc_fe00
  %v1_fe0c = add nsw i32 %v1_fcb8, -6
  store i32 %v1_fe0c, i32* %r3.global-to-local, align 4
  %v2_fe10 = icmp ugt i32 %v1_fcb8, 10
  store i1 %v2_fe10, i1* %cpsr_c.global-to-local, align 1
  %v7_fe10 = icmp eq i32 %v1_fcb8, 11
  store i1 %v7_fe10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe10, label %dec_label_pc_fcb4, label %bb320

bb320:                                            ; preds = %dec_label_pc_fe0c.thread, %dec_label_pc_fe0c
  %v1_fe0c401 = phi i32 [ %v1_fe0c398, %dec_label_pc_fe0c.thread ], [ %v1_fe0c, %dec_label_pc_fe0c ]
  %v3_fe14 = icmp ne i32 %v1_fe0c401, 0
  store i1 %v3_fe14, i1* %cpsr_c.global-to-local, align 1
  %v8_fe14 = icmp eq i32 %v1_fe0c401, 1
  store i1 %v8_fe14, i1* %cpsr_z.global-to-local, align 1
  %v2_fe18 = xor i1 %v3_fe14, true
  %v3_fe18 = or i1 %v8_fe14, %v2_fe18
  br i1 %v3_fe18, label %dec_label_pc_fcb4, label %dec_label_pc_fe1c

dec_label_pc_fe1c:                                ; preds = %bb320
  %v2_fe1c = icmp ugt i32 %v1_fcb8, 21
  store i1 %v2_fe1c, i1* %cpsr_c.global-to-local, align 1
  %v7_fe1c = icmp eq i32 %v1_fcb8, 22
  store i1 %v7_fe1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe1c, label %dec_label_pc_fcb4, label %bb321

bb321:                                            ; preds = %dec_label_pc_fe1c
  %v3_fe20 = icmp ugt i32 %v1_fcb8, 20
  store i1 %v3_fe20, i1* %cpsr_c.global-to-local, align 1
  %v8_fe20 = icmp eq i32 %v1_fcb8, 21
  store i1 %v8_fe20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fe20, label %dec_label_pc_fcb4, label %dec_label_pc_fe28

dec_label_pc_fe28:                                ; preds = %bb321
  %v2_fe28 = icmp ugt i32 %v1_fcb8, 27
  store i1 %v2_fe28, i1* %cpsr_c.global-to-local, align 1
  %v7_fe28 = icmp eq i32 %v1_fcb8, 28
  store i1 %v7_fe28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe28, label %dec_label_pc_fcb4, label %bb322

bb322:                                            ; preds = %dec_label_pc_fe28
  %v3_fe2c = icmp ugt i32 %v1_fcb8, 25
  store i1 %v3_fe2c, i1* %cpsr_c.global-to-local, align 1
  %v8_fe2c = icmp eq i32 %v1_fcb8, 26
  store i1 %v8_fe2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fe2c, label %dec_label_pc_fcb4, label %dec_label_pc_fe34

dec_label_pc_fe34:                                ; preds = %bb322
  %v2_fe34 = icmp ugt i32 %v1_fcb8, 29
  store i1 %v2_fe34, i1* %cpsr_c.global-to-local, align 1
  %v7_fe34 = icmp eq i32 %v1_fcb8, 30
  store i1 %v7_fe34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe34, label %dec_label_pc_fcb4, label %bb323

bb323:                                            ; preds = %dec_label_pc_fe34
  %v3_fe38 = icmp ugt i32 %v1_fcb8, 28
  store i1 %v3_fe38, i1* %cpsr_c.global-to-local, align 1
  %v8_fe38 = icmp eq i32 %v1_fcb8, 29
  store i1 %v8_fe38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fe38, label %dec_label_pc_fcb4, label %dec_label_pc_fe40

dec_label_pc_fe40:                                ; preds = %bb323
  %v2_fe40 = icmp ugt i32 %v1_fcb8, 54
  store i1 %v2_fe40, i1* %cpsr_c.global-to-local, align 1
  %v7_fe40 = icmp eq i32 %v1_fcb8, 55
  store i1 %v7_fe40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe40, label %dec_label_pc_fcb4, label %bb324

bb324:                                            ; preds = %dec_label_pc_fe40
  %v3_fe44 = icmp ugt i32 %v1_fcb8, 32
  store i1 %v3_fe44, i1* %cpsr_c.global-to-local, align 1
  %v8_fe44 = icmp eq i32 %v1_fcb8, 33
  store i1 %v8_fe44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fe44, label %dec_label_pc_fcb4, label %dec_label_pc_fe4c

dec_label_pc_fe4c:                                ; preds = %bb324
  %v2_fe4c = icmp ugt i32 %v1_fcb8, 214
  store i1 %v2_fe4c, i1* %cpsr_c.global-to-local, align 1
  %v7_fe4c = icmp eq i32 %v1_fcb8, 215
  store i1 %v7_fe4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe4c, label %.thread53, label %bb325

bb325:                                            ; preds = %dec_label_pc_fe4c
  %v3_fe50 = icmp ugt i32 %v1_fcb8, 213
  store i1 %v3_fe50, i1* %cpsr_c.global-to-local, align 1
  %v8_fe50 = icmp eq i32 %v1_fcb8, 214
  store i1 %v8_fe50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fe50, label %bb326, label %dec_label_pc_fe60

.thread53:                                        ; preds = %dec_label_pc_fe4c
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_fcb4

bb326:                                            ; preds = %bb325
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_fcb4

dec_label_pc_fe60:                                ; preds = %bb325
  store i32 0, i32* @r4, align 4
  %v5_fe6c = call i32 @llvm.bswap.i32(i32 %v0_fcb4)
  store i32 %v5_fe6c, i32* %r3.global-to-local, align 4
  %tmp327 = and i32 %v0_fcb4, 65280
  %tmp328 = call i32 @llvm.bswap.i32(i32 %tmp327)
  %tmp329 = and i32 %v0_fcb4, 16711680
  %tmp330 = call i32 @llvm.bswap.i32(i32 %tmp329)
  %v3_fe78 = mul nuw i32 %v3_fcd4, 16777216
  %v3_fe7c = udiv i32 %tmp328, 256
  %v4_fe80 = mul nuw nsw i32 %tmp330, 256
  %tmp331 = and i32 %v0_fcb4, 32768
  %v3_fe84 = icmp ne i32 %tmp331, 0
  store i1 %v3_fe84, i1* %cpsr_c.global-to-local, align 1
  %v4_fe84 = udiv i32 %v5_fe6c, 16777216
  store i32 ptrtoint (i32* @global_var_1a3d8.199 to i32), i32* @r0, align 4
  %v5_fe84 = or i32 %v4_fe84, %v3_fe78
  %v5_fe80 = or i32 %v5_fe84, %v4_fe80
  %v2_fe8c = or i32 %v5_fe80, %v3_fe7c
  store i32 %v2_fe8c, i32* %r2.global-to-local, align 4
  %v4_fe90 = trunc i32 %v4_fe84 to i8
  store i8 %v4_fe90, i8* @global_var_1a3e8.246, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1a3e2.247 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1a3e3.248 to i8*), align 4
  %v2_fea0 = call i32 @function_ddf4(i32 ptrtoint (i32* @global_var_1a3d8.199 to i32), i32 20)
  store i32 ptrtoint (i32* @global_var_1a3d8.199 to i32), i32* %ip.global-to-local, align 4
  %sext9 = mul i32 %v2_fea0, 16777216
  %v1_fea8 = sdiv i32 %sext9, 16777216
  store i32 %v1_fea8, i32* %r3.global-to-local, align 4
  %v4_feac = ashr i32 %sext9, 31
  store i32 %v4_feac, i32* %r2.global-to-local, align 4
  %v1_feb0 = trunc i32 %v1_fea8 to i8
  store i8 %v1_feb0, i8* bitcast (i32* @global_var_1a3e2.247 to i8*), align 4
  %v1_feb4 = trunc i32 %v4_feac to i8
  store i8 %v1_feb4, i8* bitcast (i32* @global_var_1a3e3.248 to i8*), align 4
  %v3_feb8 = load i32, i32* %stack_var_-52, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_fec0 = srem i32 %v3_feb8, 10
  store i32 %v2_fec0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fec4 = icmp eq i32 %v2_fec0, 0
  store i1 %v2_fec4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fec4, label %.thread232, label %bb332

.thread232:                                       ; preds = %dec_label_pc_fe60
  store i32 ptrtoint (i32* @global_var_1a3ec.203 to i32), i32* %lr.global-to-local, align 4
  br label %.thread63.thread106

bb332:                                            ; preds = %dec_label_pc_fe60
  store i32 ptrtoint (i32* @global_var_1a3ec.203 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_fed4 = load i32, i32* @r4, align 4
  %v2_fed4 = trunc i32 %v1_fed4 to i8
  store i8 %v2_fed4, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1a3ec.203 to i32), i32 2) to i8*), align 2
  %v0_fed8.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fed8.pr.pre, label %.thread63.thread106, label %.thread60

.thread60:                                        ; preds = %bb332
  %v1_fed8 = load i32, i32* %r3.global-to-local, align 4
  %v2_fed8 = trunc i32 %v1_fed8 to i8
  %v3_fed8 = load i32, i32* %r0.global-to-local, align 4
  %v4_fed8 = add i32 %v3_fed8, 3
  %v5_fed8 = inttoptr i32 %v4_fed8 to i8*
  store i8 %v2_fed8, i8* %v5_fed8, align 1
  %v0_fee0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1a3d8.199 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_fee0.pr.pr, label %.thread66, label %.thread68

.thread63.thread106:                              ; preds = %bb332, %.thread232
  store i32 ptrtoint (i32* @global_var_1a3d8.199 to i32), i32* %r0.global-to-local, align 4
  br label %.thread66

.thread66:                                        ; preds = %.thread60, %.thread63.thread106
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_fee8 = load i32, i32* %lr.global-to-local, align 4
  %v4_fee8 = add i32 %v3_fee8, 2
  %v5_fee8 = inttoptr i32 %v4_fee8 to i8*
  store i8 9, i8* %v5_fee8, align 1
  %v0_feec.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_feec.pr.pr, label %bb333, label %.thread68

bb333:                                            ; preds = %.thread66
  %v1_feec = load i32, i32* %r2.global-to-local, align 4
  %v2_feec = trunc i32 %v1_feec to i8
  %v3_feec = load i32, i32* %lr.global-to-local, align 4
  %v4_feec = add i32 %v3_feec, 3
  %v5_feec = inttoptr i32 %v4_feec to i8*
  store i8 %v2_feec, i8* %v5_feec, align 1
  br label %.thread68

.thread68:                                        ; preds = %.thread60, %.thread66, %bb333
  %v3_fef0 = load i8, i8* @global_var_1a3e8.246, align 1
  %v4_fef0 = sext i8 %v3_fef0 to i32
  store i32 %v4_fef0, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a3ec.203 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a3ec.203 to i32), i32* @r1, align 4
  store i8 %v3_fef0, i8* @global_var_1a3f0.249, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_ff08 = load i32, i32* %sl.global-to-local, align 4
  %v1_ff08 = trunc i32 %v0_ff08 to i8
  store i8 %v1_ff08, i8* bitcast (i32* @global_var_1a3fc.250 to i8*), align 4
  store i8 %v1_ff08, i8* bitcast (i32* @global_var_1a3fd.251 to i8*), align 4
  %v4_ff10 = call i32 @function_de50(i32 ptrtoint (i32* @global_var_1a3d8.199 to i32), i32 ptrtoint (i32* @global_var_1a3ec.203 to i32), i32 5120, i32 20)
  %sext = mul i32 %v4_ff10, 16777216
  %v1_ff18 = sdiv i32 %sext, 16777216
  %v3_ff20 = ashr i32 %sext, 31
  %v2_ff24 = load i32, i32* @global_var_1a3ec.203, align 4
  %v1_ff2c = trunc i32 %v3_ff20 to i8
  store i8 %v1_ff2c, i8* bitcast (i32* @global_var_1a3fd.251 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_ff40 = load i8, i8* @global_var_1a3e8.246, align 1
  %v4_ff40 = sext i8 %v3_ff40 to i32
  store i32 %v4_ff40, i32* %r4.global-to-local, align 4
  %v2_ff44 = load i32, i32* @global_var_1a42c.197, align 4
  store i32 %v2_ff44, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a3ec.203 to i32), i32* %ip.global-to-local, align 4
  %v1_ff54 = and i32 %v2_ff24, 8388608
  %v2_ff54 = icmp ne i32 %v1_ff54, 0
  store i1 %v2_ff54, i1* %cpsr_c.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1a3d8.199 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v1_ff68 = trunc i32 %v1_ff18 to i8
  store i8 %v1_ff68, i8* bitcast (i32* @global_var_1a3fc.250 to i8*), align 4
  store i32 %v2_ff70, i32* %lr.global-to-local, align 4
  %v9_ff80 = call i32 @sendto(i32 %v2_ff44, i32* nonnull @global_var_1a3d8.199, i32 40, i32 16384, %sockaddr* %tmp298, i32 16)
  store i32 %v9_ff80, i32* %r0.global-to-local, align 4
  %v3_ff84 = load i32, i32* %stack_var_-52, align 4
  %v1_ff88 = add i32 %v3_ff84, 1
  store i32 %v1_ff88, i32* %r3.global-to-local, align 4
  %v3_ff8c = icmp ugt i32 %v1_ff88, 383
  store i1 %v3_ff8c, i1* %cpsr_c.global-to-local, align 1
  %v8_ff8c = icmp eq i32 %v1_ff88, 384
  store i1 %v8_ff8c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ff88, i32* %stack_var_-52, align 4
  %v5_ff94 = icmp slt i32 %v1_ff88, 384
  br i1 %v5_ff94, label %.thread68.dec_label_pc_fc84_crit_edge, label %dec_label_pc_ff98

.thread68.dec_label_pc_fc84_crit_edge:            ; preds = %.thread68
  %v0_fc84.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_fc84

dec_label_pc_ff98:                                ; preds = %.thread68
  %v0_ff98 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_ff98, i32* @fp, align 4
  br label %dec_label_pc_ff9c

dec_label_pc_ff9c:                                ; preds = %dec_label_pc_fc68, %dec_label_pc_ff98
  %v0_ff9c = call i32* @__errno_location()
  %v2_ff9c = ptrtoint i32* %v0_ff9c to i32
  store i32 %v2_ff9c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v2_ff9c, i32* @sb, align 4
  br label %dec_label_pc_ffa8

dec_label_pc_ffa8:                                ; preds = %dec_label_pc_10084, %dec_label_pc_1007c, %dec_label_pc_10074, %dec_label_pc_10040, %dec_label_pc_10030, %dec_label_pc_1000c, %dec_label_pc_fff4, %dec_label_pc_1006c, %dec_label_pc_1005c, %dec_label_pc_ffec, %dec_label_pc_10124, %dec_label_pc_ff9c
  %v1_ffac = phi i32 [ %v2_ff9c, %dec_label_pc_ff9c ], [ %v1_ffac.pre.pre, %dec_label_pc_10124 ], [ %v0_ffe0, %dec_label_pc_ffec ], [ %v0_ffe0, %dec_label_pc_1005c ], [ %v0_ffe0, %dec_label_pc_1006c ], [ %v0_ffe0, %dec_label_pc_fff4 ], [ %v0_ffe0, %dec_label_pc_1000c ], [ %v0_ffe0, %dec_label_pc_10030 ], [ %v0_ffe0, %dec_label_pc_10040 ], [ %v0_ffe0, %dec_label_pc_10074 ], [ %v0_ffe0, %dec_label_pc_1007c ], [ %v0_ffe0, %dec_label_pc_10084 ]
  %v2_ffac = inttoptr i32 %v1_ffac to i32*
  store i32 0, i32* %v2_ffac, align 4
  %v2_ffb8 = load i32, i32* @global_var_1a42c.197, align 4
  store i32 %v2_ffb8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_fc58, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v10_ffd4 = call i32 @recvfrom(i32 %v2_ffb8, i32* nonnull %stack_var_-1862, i32 1514, i32 16384, %sockaddr* null, i32* null)
  store i32 %v10_ffd4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ffd8 = icmp eq i32 %v10_ffd4, 0
  store i1 %v2_ffd8, i1* %cpsr_z.global-to-local, align 1
  %tmp334 = icmp slt i32 %v10_ffd4, 1
  br i1 %tmp334, label %dec_label_pc_101f0, label %dec_label_pc_ffe0

dec_label_pc_ffe0:                                ; preds = %dec_label_pc_ffa8
  %v0_ffe0 = load i32, i32* @sb, align 4
  %v1_ffe0 = inttoptr i32 %v0_ffe0 to i32*
  %v2_ffe0 = load i32, i32* %v1_ffe0, align 4
  store i32 %v2_ffe0, i32* %r3.global-to-local, align 4
  %v2_ffe4 = icmp ugt i32 %v2_ffe0, 10
  store i1 %v2_ffe4, i1* %cpsr_c.global-to-local, align 1
  %v7_ffe4 = icmp eq i32 %v2_ffe0, 11
  store i1 %v7_ffe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffe4, label %dec_label_pc_101f0, label %dec_label_pc_ffec

dec_label_pc_ffec:                                ; preds = %dec_label_pc_ffe0
  %v2_ffec = icmp ugt i32 %v10_ffd4, 38
  store i1 %v2_ffec, i1* %cpsr_c.global-to-local, align 1
  %v7_ffec = icmp eq i32 %v10_ffd4, 39
  store i1 %v7_ffec, i1* %cpsr_z.global-to-local, align 1
  %v2_fff0 = xor i1 %v2_ffec, true
  %v3_fff0 = or i1 %v7_ffec, %v2_fff0
  br i1 %v3_fff0, label %dec_label_pc_ffa8, label %dec_label_pc_fff4

dec_label_pc_fff4:                                ; preds = %dec_label_pc_ffec
  store i32 %v2_fc58, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a40c.102 to i32), i32* %r0.global-to-local, align 4
  %v3_fffc = load i32, i32* %v2_fffc, align 4
  store i32 %v3_fffc, i32* %r2.global-to-local, align 4
  %v2_10000 = load i32, i32* @global_var_1a40c.102, align 4
  store i32 %v2_10000, i32* %r3.global-to-local, align 4
  %v3_10004 = icmp uge i32 %v3_fffc, %v2_10000
  store i1 %v3_10004, i1* %cpsr_c.global-to-local, align 1
  %v9_10004 = icmp eq i32 %v3_fffc, %v2_10000
  store i1 %v9_10004, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10004, label %dec_label_pc_1000c, label %dec_label_pc_ffa8

dec_label_pc_1000c:                               ; preds = %dec_label_pc_fff4
  %v3_1000c = load i8, i8* %v2_1000c, align 1
  %v4_1000c = zext i8 %v3_1000c to i32
  store i32 %v4_1000c, i32* %r3.global-to-local, align 4
  %v2_10010 = icmp ugt i8 %v3_1000c, 5
  store i1 %v2_10010, i1* %cpsr_c.global-to-local, align 1
  %v7_10010 = icmp eq i8 %v3_1000c, 6
  store i1 %v7_10010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10010, label %dec_label_pc_10018, label %dec_label_pc_ffa8

dec_label_pc_10018:                               ; preds = %dec_label_pc_1000c
  store i32 %v2_fc5c, i32* %r1.global-to-local, align 4
  %v2_1001c = load i8, i8* %tmp297, align 4
  %v3_1001c = zext i8 %v2_1001c to i32
  store i32 %v3_1001c, i32* %r2.global-to-local, align 4
  %v3_10020 = load i8, i8* %v2_10020, align 1
  %v4_10020 = zext i8 %v3_10020 to i32
  store i32 %v4_10020, i32* %r3.global-to-local, align 4
  %v4_10024 = mul nuw nsw i32 %v4_10020, 256
  %v5_10024 = or i32 %v4_10024, %v3_1001c
  store i32 %v5_10024, i32* %r2.global-to-local, align 4
  %v2_10028 = icmp ugt i32 %v5_10024, 5887
  store i1 %v2_10028, i1* %cpsr_c.global-to-local, align 1
  %v7_10028 = icmp eq i32 %v5_10024, 5888
  store i1 %v7_10028, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10028, label %dec_label_pc_10040, label %dec_label_pc_10030

dec_label_pc_10030:                               ; preds = %dec_label_pc_10018
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_10038 = icmp ugt i32 %v5_10024, 4872
  store i1 %v3_10038, i1* %cpsr_c.global-to-local, align 1
  %v9_10038 = icmp eq i32 %v5_10024, 4873
  store i1 %v9_10038, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10038, label %dec_label_pc_10040, label %dec_label_pc_ffa8

dec_label_pc_10040:                               ; preds = %dec_label_pc_10030, %dec_label_pc_10018
  store i32 %v2_fc5c, i32* %r2.global-to-local, align 4
  %v3_10044 = load i8, i8* %v2_10044, align 2
  %v4_10044 = zext i8 %v3_10044 to i32
  store i32 %v4_10044, i32* %r3.global-to-local, align 4
  %v3_10048 = load i8, i8* %v2_10048, align 1
  %v4_10048 = zext i8 %v3_10048 to i32
  store i32 %v4_10048, i32* %r2.global-to-local, align 4
  store i32 %v4_fae8, i32* %ip.global-to-local, align 4
  %v4_10050 = mul nuw nsw i32 %v4_10048, 256
  %v5_10050 = or i32 %v4_10050, %v4_10044
  store i32 %v5_10050, i32* %r3.global-to-local, align 4
  %v3_10054 = icmp uge i32 %v5_10050, %v4_fae8
  store i1 %v3_10054, i1* %cpsr_c.global-to-local, align 1
  %v9_10054 = icmp eq i32 %v5_10050, %v4_fae8
  store i1 %v9_10054, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10054, label %dec_label_pc_1005c, label %dec_label_pc_ffa8

dec_label_pc_1005c:                               ; preds = %dec_label_pc_10040
  store i32 %v2_fc5c, i32* %lr.global-to-local, align 4
  %v3_10060 = load i8, i8* %v2_10060, align 1
  %v4_10060 = zext i8 %v3_10060 to i32
  store i32 %v4_10060, i32* %r3.global-to-local, align 4
  %v1_10064 = and i32 %v4_10060, 2
  %v2_10064 = icmp eq i32 %v1_10064, 0
  store i1 %v2_10064, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10064, label %dec_label_pc_ffa8, label %dec_label_pc_1006c

dec_label_pc_1006c:                               ; preds = %dec_label_pc_1005c
  %v1_1006c = and i32 %v4_10060, 16
  %v2_1006c = icmp eq i32 %v1_1006c, 0
  store i1 %v2_1006c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1006c, label %dec_label_pc_ffa8, label %dec_label_pc_10074

dec_label_pc_10074:                               ; preds = %dec_label_pc_1006c
  %v1_10074 = and i32 %v4_10060, 4
  %v2_10074 = icmp eq i32 %v1_10074, 0
  store i1 %v2_10074, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10074, label %dec_label_pc_1007c, label %dec_label_pc_ffa8

dec_label_pc_1007c:                               ; preds = %dec_label_pc_10074
  %tmp504 = urem i8 %v3_10060, 2
  %v2_1007c = icmp eq i8 %tmp504, 0
  store i1 %v2_1007c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1007c, label %dec_label_pc_10084, label %dec_label_pc_ffa8

dec_label_pc_10084:                               ; preds = %dec_label_pc_1007c
  %v3_10084 = load i32, i32* %v2_10084, align 4
  %v2_100a0 = call i32 @llvm.bswap.i32(i32 %v3_10084)
  %v1_100a4 = add i32 %v2_100a0, -1
  %v1_100a8 = udiv i32 %v1_100a4, 256
  %v3_100ac = and i32 %v1_100a8, 65280
  %v1_100b0 = and i32 %v1_100a4, 65280
  store i32 %v1_100b0, i32* %r2.global-to-local, align 4
  %v3_100b4 = mul i32 %v1_100a4, 16777216
  %v4_100b8 = udiv i32 %v1_100a4, 16777216
  %v5_100b8 = or i32 %v3_100ac, %v4_100b8
  store i32 %v5_100b8, i32* %r1.global-to-local, align 4
  store i32 %v2_fc58, i32* %r3.global-to-local, align 4
  %v4_100c0 = mul nuw nsw i32 %v1_100b0, 256
  %v5_100c0 = or i32 %v4_100c0, %v3_100b4
  store i32 %v5_100c0, i32* %r0.global-to-local, align 4
  %v3_100c4 = load i32, i32* %v2_100c4, align 4
  store i32 %v3_100c4, i32* %r2.global-to-local, align 4
  %v2_100c8 = call i32 @llvm.bswap.i32(i32 %v1_100a4)
  store i32 %v2_100c8, i32* %ip.global-to-local, align 4
  %v3_100cc = icmp uge i32 %v2_100c8, %v3_100c4
  store i1 %v3_100cc, i1* %cpsr_c.global-to-local, align 1
  %v9_100cc = icmp eq i32 %v2_100c8, %v3_100c4
  store i1 %v9_100cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_100cc, label %dec_label_pc_100d4, label %dec_label_pc_ffa8

dec_label_pc_100d4:                               ; preds = %dec_label_pc_10084
  %v0_100d4 = load i32, i32* @r4, align 4
  %v2_100d4 = icmp ugt i32 %v0_100d4, 254
  store i1 %v2_100d4, i1* %cpsr_c.global-to-local, align 1
  %v7_100d4 = icmp eq i32 %v0_100d4, 255
  store i1 %v7_100d4, i1* %cpsr_z.global-to-local, align 1
  %v8_100d8 = icmp sgt i32 %v0_100d4, 255
  br i1 %v8_100d8, label %dec_label_pc_101f0, label %dec_label_pc_100dc

dec_label_pc_100dc:                               ; preds = %dec_label_pc_100d4
  store i32 ptrtoint (i32* @global_var_1a428.195 to i32), i32* %lr.global-to-local, align 4
  %v3_100e0 = mul i32 %v0_100d4, 256
  store i32 %v3_100e0, i32* %r2.global-to-local, align 4
  %v2_100e4 = load i32, i32* @global_var_1a428.195, align 4
  store i32 %v2_100e4, i32* %r1.global-to-local, align 4
  %v2_100ec = mul i32 %v0_100d4, 288
  store i32 %v2_100ec, i32* %r3.global-to-local, align 4
  %v2_100f0 = add i32 %v2_100e4, %v2_100ec
  store i32 %v2_100f0, i32* @r0, align 4
  %v1_100f4 = add i32 %v2_100f0, 12
  %v2_100f4 = inttoptr i32 %v1_100f4 to i32*
  %v3_100f4 = load i32, i32* %v2_100f4, align 4
  store i32 %v3_100f4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_100f8 = icmp eq i32 %v3_100f4, 0
  store i1 %v2_100f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_100f8, label %dec_label_pc_10124, label %dec_label_pc_10104.preheader

dec_label_pc_10104.preheader:                     ; preds = %dec_label_pc_100dc
  %v2_100fc = add i32 %v2_100f0, 288
  store i32 %v2_100fc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10104

dec_label_pc_10104:                               ; preds = %dec_label_pc_10104.preheader, %dec_label_pc_10110
  %v0_10110 = phi i32 [ %v2_100fc, %dec_label_pc_10104.preheader ], [ %v1_1011c, %dec_label_pc_10110 ]
  %v0_10104 = phi i32 [ %v0_100d4, %dec_label_pc_10104.preheader ], [ %v1_10104, %dec_label_pc_10110 ]
  %v1_10104 = add i32 %v0_10104, 1
  store i32 %v1_10104, i32* @r4, align 4
  %v7_10108 = icmp eq i32 %v1_10104, 256
  br i1 %v7_10108, label %dec_label_pc_101f0.loopexit, label %dec_label_pc_10110

dec_label_pc_10110:                               ; preds = %dec_label_pc_10104
  store i32 %v0_10110, i32* @r0, align 4
  %v1_10114 = add i32 %v0_10110, 12
  %v2_10114 = inttoptr i32 %v1_10114 to i32*
  %v3_10114 = load i32, i32* %v2_10114, align 4
  %v2_10118 = icmp eq i32 %v3_10114, 0
  %v1_1011c = add i32 %v0_10110, 288
  store i32 %v1_1011c, i32* %r3.global-to-local, align 4
  br i1 %v2_10118, label %dec_label_pc_10124.loopexit, label %dec_label_pc_10104

dec_label_pc_10124.loopexit:                      ; preds = %dec_label_pc_10110
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10124

dec_label_pc_10124:                               ; preds = %dec_label_pc_10124.loopexit, %dec_label_pc_100dc
  %v1_10124 = phi i32 [ %v0_10110, %dec_label_pc_10124.loopexit ], [ %v2_100f0, %dec_label_pc_100dc ]
  %v2_10124 = add i32 %v1_10124, 16
  %v3_10124 = inttoptr i32 %v2_10124 to i32*
  store i32 %v3_100c4, i32* %v3_10124, align 4
  store i32 %v2_fc5c, i32* %r1.global-to-local, align 4
  %v2_1012c = load i32, i32* %stack_var_-1842, align 4
  store i32 %v2_1012c, i32* %r2.global-to-local, align 4
  %v1_10130 = and i32 %v2_1012c, 128
  %v2_10130 = icmp ne i32 %v1_10130, 0
  store i1 %v2_10130, i1* %cpsr_c.global-to-local, align 1
  %v3_10130 = sdiv i32 %v2_1012c, 256
  store i32 %v3_10130, i32* %r3.global-to-local, align 4
  %v1_10134 = trunc i32 %v3_10130 to i8
  %v2_10134 = load i32, i32* @r0, align 4
  %v3_10134 = add i32 %v2_10134, 21
  %v4_10134 = inttoptr i32 %v3_10134 to i8*
  store i8 %v1_10134, i8* %v4_10134, align 1
  %v0_10138 = load i32, i32* %r2.global-to-local, align 4
  %v1_10138 = trunc i32 %v0_10138 to i8
  %v2_10138 = load i32, i32* @r0, align 4
  %v3_10138 = add i32 %v2_10138, 20
  %v4_10138 = inttoptr i32 %v3_10138 to i8*
  store i8 %v1_10138, i8* %v4_10138, align 1
  %v0_1013c = call i32 @function_f6cc()
  store i32 %v0_1013c, i32* %r0.global-to-local, align 4
  %v1_ffac.pre.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_ffa8

dec_label_pc_10144:                               ; preds = %dec_label_pc_10fe0
  store i32 %v2_10524, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10154 = load i32, i32* @r4, align 4
  store i32 %v0_10154, i32* %r0.global-to-local, align 4
  %v0_10158 = load i32, i32* @r5, align 4
  store i32 %v0_10158, i32* %stack_var_-56, align 4
  %v6_1015c = call i32 @send(i32 %v0_10154, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_10a1c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10170 = load i32, i32* @r4, align 4
  store i32 %v0_10170, i32* %r0.global-to-local, align 4
  %v5_10174 = call i32 @send(i32 %v0_10170, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_1017c = load i32, i32* @r6, align 4
  store i32 %v0_1017c, i32* %r2.global-to-local, align 4
  %v2_10180 = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_10180, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10188 = load i32, i32* @r4, align 4
  store i32 %v0_10188, i32* %r0.global-to-local, align 4
  %v5_1018c = call i32 @send(i32 %v0_10188, i32* nonnull %stack_var_-38, i32 %v0_1017c, i32 16384)
  %v0_10190 = load i32, i32* %sl.global-to-local, align 4
  %v1_10190 = add i32 %v0_10190, 12
  store i32 %v1_10190, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1019c = load i32, i32* @r4, align 4
  store i32 %v0_1019c, i32* %r0.global-to-local, align 4
  %v4_101a0 = inttoptr i32 %v1_10190 to i32*
  %v5_101a0 = call i32 @send(i32 %v0_1019c, i32* %v4_101a0, i32 1, i32 16384)
  store i32 %v5_101a0, i32* %r0.global-to-local, align 4
  %v0_101a4 = load i32, i32* %sl.global-to-local, align 4
  %v1_101a4 = inttoptr i32 %v0_101a4 to i32*
  %v2_101a4 = load i32, i32* %v1_101a4, align 4
  store i32 %v2_101a4, i32* %r1.global-to-local, align 4
  %v1_101a8 = add i32 %v0_101a4, 12
  %v2_101a8 = inttoptr i32 %v1_101a8 to i8*
  %v3_101a8 = load i8, i8* %v2_101a8, align 1
  %v4_101a8 = zext i8 %v3_101a8 to i32
  store i32 %v4_101a8, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_101b0 = load i32, i32* @r4, align 4
  store i32 %v0_101b0, i32* %r0.global-to-local, align 4
  %v4_101b4 = inttoptr i32 %v2_101a4 to i32*
  %v5_101b4 = call i32 @send(i32 %v0_101b0, i32* %v4_101b4, i32 %v4_101a8, i32 16384)
  %v0_101b8 = load i32, i32* %sl.global-to-local, align 4
  %v1_101b8 = add i32 %v0_101b8, 13
  store i32 %v1_101b8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_101c4 = load i32, i32* @r4, align 4
  store i32 %v0_101c4, i32* %r0.global-to-local, align 4
  %v4_101c8 = inttoptr i32 %v1_101b8 to i32*
  %v5_101c8 = call i32 @send(i32 %v0_101c4, i32* %v4_101c8, i32 1, i32 16384)
  %v0_101cc = load i32, i32* @r4, align 4
  store i32 %v0_101cc, i32* %r0.global-to-local, align 4
  %v0_101d0 = load i32, i32* %sl.global-to-local, align 4
  %v1_101d0 = add i32 %v0_101d0, 13
  %v2_101d0 = inttoptr i32 %v1_101d0 to i8*
  %v3_101d0 = load i8, i8* %v2_101d0, align 1
  %v4_101d0 = zext i8 %v3_101d0 to i32
  store i32 %v4_101d0, i32* %r2.global-to-local, align 4
  %v1_101d4 = add i32 %v0_101d0, 4
  %v2_101d4 = inttoptr i32 %v1_101d4 to i32*
  %v3_101d4 = load i32, i32* %v2_101d4, align 4
  store i32 %v3_101d4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_101dc = inttoptr i32 %v3_101d4 to i32*
  %v5_101dc = call i32 @send(i32 %v0_101cc, i32* %v4_101dc, i32 %v4_101d0, i32 16384)
  %v0_101e0 = load i32, i32* @r4, align 4
  store i32 %v0_101e0, i32* %r0.global-to-local, align 4
  %v1_101e4 = call i32 @close(i32 %v0_101e0)
  store i32 %v1_101e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_101e8

dec_label_pc_101e8:                               ; preds = %dec_label_pc_10fc4, %dec_label_pc_fa00, %dec_label_pc_102d8, %dec_label_pc_10144
  %v0_101e8 = load i32, i32* @r5, align 4
  store i32 %v0_101e8, i32* %r0.global-to-local, align 4
  call void @exit(i32 %v0_101e8)
  unreachable

dec_label_pc_101f0.loopexit:                      ; preds = %dec_label_pc_10104
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_101f0

dec_label_pc_101f0:                               ; preds = %dec_label_pc_100d4, %dec_label_pc_ffe0, %dec_label_pc_ffa8, %dec_label_pc_101f0.loopexit
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1664, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_10204451 = load i32, i32* %sp.global-to-local, align 4
  %v3_10204452 = add i32 %v2_10204451, 1664
  %v4_10204453 = inttoptr i32 %v3_10204452 to i32*
  store i32 0, i32* %v4_10204453, align 4
  br label %dec_label_pc_101f8.dec_label_pc_101f8_crit_edge

dec_label_pc_101f8.dec_label_pc_101f8_crit_edge:  ; preds = %dec_label_pc_101f0, %dec_label_pc_101f8.dec_label_pc_101f8_crit_edge
  %v0_101f8.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_10204.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_101f8 = add i32 %v0_101f8.pre, 1664
  store i32 %v1_101f8, i32* %ip.global-to-local, align 4
  %v1_101fc = add i32 %v0_101f8.pre, 4
  store i32 %v1_101fc, i32* %r3.global-to-local, align 4
  %v7_10200 = icmp eq i32 %v1_101fc, 128
  %v2_10204 = load i32, i32* %sp.global-to-local, align 4
  %v3_10204 = add i32 %v2_10204, %v1_101f8
  %v4_10204 = inttoptr i32 %v3_10204 to i32*
  store i32 %v0_10204.pre, i32* %v4_10204, align 4
  br i1 %v7_10200, label %dec_label_pc_1020c, label %dec_label_pc_101f8.dec_label_pc_101f8_crit_edge

dec_label_pc_1020c:                               ; preds = %dec_label_pc_101f8.dec_label_pc_101f8_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_1020c = load i32, i32* %r2.global-to-local, align 4
  %v1_10210454 = add i32 %v0_1020c, 1536
  store i32 %v1_10210454, i32* %lr.global-to-local, align 4
  %v1_10214455 = add i32 %v0_1020c, 4
  store i32 %v1_10214455, i32* %r3.global-to-local, align 4
  %v7_10218456 = icmp eq i32 %v1_10214455, 128
  %v2_1021c457 = load i32, i32* %sp.global-to-local, align 4
  %v3_1021c458 = add i32 %v2_1021c457, %v1_10210454
  %v4_1021c459 = inttoptr i32 %v3_1021c458 to i32*
  store i32 %v0_1020c, i32* %v4_1021c459, align 4
  br i1 %v7_10218456, label %dec_label_pc_10224, label %dec_label_pc_10210.dec_label_pc_10210_crit_edge

dec_label_pc_10210.dec_label_pc_10210_crit_edge:  ; preds = %dec_label_pc_1020c, %dec_label_pc_10210.dec_label_pc_10210_crit_edge
  %v0_10210.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_1021c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10210 = add i32 %v0_10210.pre, 1536
  store i32 %v1_10210, i32* %lr.global-to-local, align 4
  %v1_10214 = add i32 %v0_10210.pre, 4
  store i32 %v1_10214, i32* %r3.global-to-local, align 4
  %v7_10218 = icmp eq i32 %v1_10214, 128
  %v2_1021c = load i32, i32* %sp.global-to-local, align 4
  %v3_1021c = add i32 %v2_1021c, %v1_10210
  %v4_1021c = inttoptr i32 %v3_1021c to i32*
  store i32 %v0_1021c.pre, i32* %v4_1021c, align 4
  br i1 %v7_10218, label %dec_label_pc_10224, label %dec_label_pc_10210.dec_label_pc_10210_crit_edge

dec_label_pc_10224:                               ; preds = %dec_label_pc_10210.dec_label_pc_10210_crit_edge, %dec_label_pc_1020c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_10224 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10224, i32* @r6, align 4
  store i32 %v0_10224, i32* @r5, align 4
  store i32 %v0_10224, i32* @r7, align 4
  store i32 %v0_10224, i32* %stack_var_-52, align 4
  br label %dec_label_pc_102a0

dec_label_pc_10238:                               ; preds = %dec_label_pc_102c8, %dec_label_pc_102a0
  %storemerge245 = phi i32 [ 30, %dec_label_pc_102a0 ], [ 5, %dec_label_pc_102c8 ]
  store i32 %storemerge245, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a408.182 to i32), i32* %r2.global-to-local, align 4
  %v2_1023c = load i32, i32* @global_var_1a408.182, align 4
  store i32 %v2_1023c, i32* %r3.global-to-local, align 4
  %v1_10240 = add i32 %v2_102b4, 8
  %v2_10240 = inttoptr i32 %v1_10240 to i32*
  %v3_10240 = load i32, i32* %v2_10240, align 4
  store i32 %v3_10240, i32* %r2.global-to-local, align 4
  %v2_10244 = sub i32 %v2_1023c, %v3_10240
  store i32 %v2_10244, i32* %r3.global-to-local, align 4
  %v3_10248 = icmp uge i32 %v2_10244, %storemerge245
  store i1 %v3_10248, i1* %cpsr_c.global-to-local, align 1
  %v9_10248 = icmp eq i32 %v2_10244, %storemerge245
  store i1 %v9_10248, i1* %cpsr_z.global-to-local, align 1
  %v2_1024c = xor i1 %v9_10248, true
  %v3_1024c = and i1 %v3_10248, %v2_1024c
  br i1 %v3_1024c, label %dec_label_pc_1031c, label %dec_label_pc_10250

dec_label_pc_10250:                               ; preds = %dec_label_pc_10238
  store i1 %v2_102bc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_102bc, i1* %cpsr_z.global-to-local, align 1
  %v1_102e8 = add i32 %v2_102b4, 4
  %v2_102e8 = inttoptr i32 %v1_102e8 to i32*
  %v3_102e8 = load i32, i32* %v2_102e8, align 4
  br i1 %v7_102bc, label %dec_label_pc_102e8, label %dec_label_pc_10258

dec_label_pc_10258:                               ; preds = %dec_label_pc_10250
  store i32 %v3_102e8, i32* %ip.global-to-local, align 4
  %v3_10260 = udiv i32 %v3_102e8, 32
  store i32 %v2_102f8, i32* %r0.global-to-local, align 4
  %v3_10268 = mul nuw nsw i32 %v3_10260, 4
  %v2_1026c = add i32 %v3_10268, %v2_102f8
  store i32 %v2_1026c, i32* %r3.global-to-local, align 4
  %v1_10270 = add i32 %v2_1026c, -184
  %v2_10270 = inttoptr i32 %v1_10270 to i32*
  %v3_10270 = load i32, i32* %v2_10270, align 4
  %v1_10274 = urem i32 %v3_102e8, 32
  store i32 %v1_10274, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_1027c = shl i32 1, %v1_10274
  %v8_1027c = or i32 %v3_10270, %v7_1027c
  store i32 %v8_1027c, i32* %r2.global-to-local, align 4
  store i32 %v8_1027c, i32* %v2_10270, align 4
  %v0_10284 = load i32, i32* @r6, align 4
  %v1_10284 = load i32, i32* %ip.global-to-local, align 4
  %v3_10284 = icmp uge i32 %v0_10284, %v1_10284
  store i1 %v3_10284, i1* %cpsr_c.global-to-local, align 1
  %v9_10284 = icmp eq i32 %v0_10284, %v1_10284
  store i1 %v9_10284, i1* %cpsr_z.global-to-local, align 1
  %v5_10288 = icmp slt i32 %v0_10284, %v1_10284
  br i1 %v5_10288, label %bb336, label %bb337

bb336:                                            ; preds = %dec_label_pc_10258
  store i32 %v1_10284, i32* @r6, align 4
  br label %bb337

bb337:                                            ; preds = %dec_label_pc_102c8, %dec_label_pc_1035c, %dec_label_pc_10350, %bb339, %dec_label_pc_10258, %bb336
  %v3_1028c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_1028c, i32* %r3.global-to-local, align 4
  %v1_10290 = add i32 %v3_1028c, 1
  store i32 %v1_10290, i32* %r2.global-to-local, align 4
  %v2_10294 = icmp ugt i32 %v1_10290, 254
  store i1 %v2_10294, i1* %cpsr_c.global-to-local, align 1
  %v7_10294 = icmp eq i32 %v1_10290, 255
  store i1 %v7_10294, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_10290, i32* %stack_var_-52, align 4
  %v8_1029c = icmp sgt i32 %v1_10290, 255
  br i1 %v8_1029c, label %dec_label_pc_10368, label %dec_label_pc_102a0

dec_label_pc_102a0:                               ; preds = %bb337, %dec_label_pc_10224
  %v0_102ac = phi i32 [ %v1_10290, %bb337 ], [ %v0_10224, %dec_label_pc_10224 ]
  store i32 ptrtoint (i32* @global_var_1a428.195 to i32), i32* %r0.global-to-local, align 4
  %v3_102a4 = mul i32 %v0_102ac, 256
  store i32 %v3_102a4, i32* %r3.global-to-local, align 4
  %v2_102a8 = load i32, i32* @global_var_1a428.195, align 4
  store i32 %v2_102a8, i32* %r1.global-to-local, align 4
  %v2_102b0 = mul i32 %v0_102ac, 288
  store i32 %v2_102b0, i32* %r2.global-to-local, align 4
  %v2_102b4 = add i32 %v2_102a8, %v2_102b0
  store i32 %v2_102b4, i32* @r4, align 4
  %v1_102b8 = add i32 %v2_102b4, 12
  %v2_102b8 = inttoptr i32 %v1_102b8 to i32*
  %v3_102b8 = load i32, i32* %v2_102b8, align 4
  store i32 %v3_102b8, i32* %ip.global-to-local, align 4
  %v2_102bc = icmp ne i32 %v3_102b8, 0
  store i1 %v2_102bc, i1* %cpsr_c.global-to-local, align 1
  %v7_102bc = icmp eq i32 %v3_102b8, 1
  store i1 %v7_102bc, i1* %cpsr_z.global-to-local, align 1
  %v2_102c0 = xor i1 %v7_102bc, true
  %v3_102c0 = and i1 %v2_102bc, %v2_102c0
  br i1 %v3_102c0, label %dec_label_pc_10238, label %dec_label_pc_102c8

dec_label_pc_102c8:                               ; preds = %dec_label_pc_102a0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_102c8 = icmp eq i32 %v3_102b8, 0
  store i1 %v2_102c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_102c8, label %bb337, label %dec_label_pc_10238

dec_label_pc_102d8:                               ; preds = %dec_label_pc_fa28
  store i32 ptrtoint (i32* @global_var_1a42c.197 to i32), i32* %r2.global-to-local, align 4
  %v2_102dc = load i32, i32* @global_var_1a42c.197, align 4
  store i32 %v2_102dc, i32* %r0.global-to-local, align 4
  %v1_102e0 = call i32 @close(i32 %v2_102dc)
  store i32 %v1_102e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_101e8

dec_label_pc_102e8:                               ; preds = %dec_label_pc_10250
  store i32 %v3_102e8, i32* %r0.global-to-local, align 4
  %v3_102f0 = udiv i32 %v3_102e8, 32
  %v3_102f4 = mul nuw nsw i32 %v3_102f0, 4
  store i32 %v2_102f8, i32* %lr.global-to-local, align 4
  %v2_102fc = add i32 %v3_102f4, %v2_102f8
  store i32 %v2_102fc, i32* %r3.global-to-local, align 4
  %v1_10300 = add i32 %v2_102fc, -312
  %v2_10300 = inttoptr i32 %v1_10300 to i32*
  %v3_10300 = load i32, i32* %v2_10300, align 4
  %v1_10304 = urem i32 %v3_102e8, 32
  store i32 %v1_10304, i32* %r1.global-to-local, align 4
  %v7_10308 = shl i32 1, %v1_10304
  %v8_10308 = or i32 %v3_10300, %v7_10308
  store i32 %v8_10308, i32* %r2.global-to-local, align 4
  %v0_1030c = load i32, i32* @r5, align 4
  %v3_1030c = icmp uge i32 %v0_1030c, %v3_102e8
  store i1 %v3_1030c, i1* %cpsr_c.global-to-local, align 1
  %v9_1030c = icmp eq i32 %v0_1030c, %v3_102e8
  store i1 %v9_1030c, i1* %cpsr_z.global-to-local, align 1
  %v5_10310 = icmp slt i32 %v0_1030c, %v3_102e8
  br i1 %v5_10310, label %bb338, label %bb339

bb338:                                            ; preds = %dec_label_pc_102e8
  store i32 %v3_102e8, i32* @r5, align 4
  br label %bb339

bb339:                                            ; preds = %dec_label_pc_102e8, %bb338
  store i32 %v8_10308, i32* %v2_10300, align 4
  br label %bb337

dec_label_pc_1031c:                               ; preds = %dec_label_pc_10238
  %v1_1031c = add i32 %v2_102b4, 4
  %v2_1031c = inttoptr i32 %v1_1031c to i32*
  %v3_1031c = load i32, i32* %v2_1031c, align 4
  store i32 %v3_1031c, i32* %r0.global-to-local, align 4
  %v1_10320 = call i32 @close(i32 %v3_1031c)
  store i32 %v1_10320, i32* %r0.global-to-local, align 4
  %v0_10324 = load i32, i32* @r4, align 4
  %v1_10324 = add i32 %v0_10324, 12
  %v2_10324 = inttoptr i32 %v1_10324 to i32*
  %v3_10324 = load i32, i32* %v2_10324, align 4
  store i32 %v3_10324, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_1032c = icmp ugt i32 %v3_10324, 1
  store i1 %v2_1032c, i1* %cpsr_c.global-to-local, align 1
  %v7_1032c = icmp eq i32 %v3_10324, 2
  store i1 %v7_1032c, i1* %cpsr_z.global-to-local, align 1
  %v2_10330 = add i32 %v0_10324, 4
  %v3_10330 = inttoptr i32 %v2_10330 to i32*
  store i32 -1, i32* %v3_10330, align 4
  %v2_10334 = xor i1 %v2_1032c, true
  %v3_10334 = or i1 %v7_1032c, %v2_10334
  br i1 %v3_10334, label %dec_label_pc_1035c, label %dec_label_pc_10338

dec_label_pc_10338:                               ; preds = %dec_label_pc_1031c
  %v0_10338 = load i32, i32* @r4, align 4
  %v1_10338 = add i32 %v0_10338, 284
  %v2_10338 = inttoptr i32 %v1_10338 to i8*
  %v3_10338 = load i8, i8* %v2_10338, align 1
  %v4_10338 = zext i8 %v3_10338 to i32
  %v1_1033c = add nuw nsw i32 %v4_10338, 1
  %v1_10340 = urem i32 %v1_1033c, 256
  store i32 %v1_10340, i32* %r3.global-to-local, align 4
  %v2_10344 = icmp ugt i32 %v1_10340, 9
  store i1 %v2_10344, i1* %cpsr_c.global-to-local, align 1
  %v7_10344 = icmp eq i32 %v1_10340, 10
  store i1 %v7_10344, i1* %cpsr_z.global-to-local, align 1
  %v1_10348 = trunc i32 %v1_1033c to i8
  store i8 %v1_10348, i8* %v2_10338, align 1
  %v0_1034c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1034c, label %dec_label_pc_1035c, label %dec_label_pc_10350

dec_label_pc_10350:                               ; preds = %dec_label_pc_10338
  %v0_10350 = load i32, i32* @r4, align 4
  store i32 %v0_10350, i32* @r0, align 4
  %v0_10354 = call i32 @function_f6cc()
  store i32 %v0_10354, i32* %r0.global-to-local, align 4
  br label %bb337

dec_label_pc_1035c:                               ; preds = %dec_label_pc_10338, %dec_label_pc_1031c
  %v0_1035c = load i32, i32* @r7, align 4
  %v1_1035c = load i32, i32* @r4, align 4
  %v2_1035c = add i32 %v1_1035c, 12
  %v3_1035c = inttoptr i32 %v2_1035c to i32*
  store i32 %v0_1035c, i32* %v3_1035c, align 4
  %v0_10360 = load i32, i32* @r7, align 4
  %v1_10360 = trunc i32 %v0_10360 to i8
  %v2_10360 = load i32, i32* @r4, align 4
  %v3_10360 = add i32 %v2_10360, 284
  %v4_10360 = inttoptr i32 %v3_10360 to i8*
  store i8 %v1_10360, i8* %v4_10360, align 1
  br label %bb337

dec_label_pc_10368:                               ; preds = %bb337
  store i32 1, i32* %stack_var_-64, align 4
  %v0_10370 = load i32, i32* @r6, align 4
  %v1_10370 = load i32, i32* @r5, align 4
  %v3_10370 = icmp uge i32 %v0_10370, %v1_10370
  store i1 %v3_10370, i1* %cpsr_c.global-to-local, align 1
  %v9_10370 = icmp eq i32 %v0_10370, %v1_10370
  store i1 %v9_10370, i1* %cpsr_z.global-to-local, align 1
  %v5_10374 = icmp slt i32 %v0_10370, %v1_10370
  %storemerge108 = select i1 %v5_10374, i32 %v1_10370, i32 %v0_10370
  store i32 %v2_10380, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_10388, i32* %ip.global-to-local, align 4
  store i32 %v2_1038c, i32* %r1.global-to-local, align 4
  %v1_10390 = add i32 %storemerge108, 1
  store i32 %v1_10390, i32* %r0.global-to-local, align 4
  %v13_1039c = call i32 @select(i32 %v1_10390, %_TYPEDEF_fd_set* %tmp341, %_TYPEDEF_fd_set* %tmp340, %_TYPEDEF_fd_set* null, %timeval* %tmp343)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_103a4 = call i32 @time(i32* null)
  store i32 ptrtoint (i32* @global_var_1a408.182 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_103a4, i32* @global_var_1a408.182, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  br label %dec_label_pc_103fc

dec_label_pc_103c0:                               ; preds = %dec_label_pc_10420, %dec_label_pc_10f7c
  %v0_103d8 = phi i32 [ %v3_10414, %dec_label_pc_10420 ], [ %v0_103c0.pre, %dec_label_pc_10f7c ]
  %v3_103c0 = udiv i32 %v0_103d8, 32
  %v3_103c8 = mul nuw nsw i32 %v3_103c0, 4
  store i32 %v2_102f8, i32* %lr.global-to-local, align 4
  %v2_103d0 = add i32 %v3_103c8, %v2_102f8
  store i32 %v2_103d0, i32* %r3.global-to-local, align 4
  %v1_103d4 = add i32 %v2_103d0, -184
  %v2_103d4 = inttoptr i32 %v1_103d4 to i32*
  %v3_103d4 = load i32, i32* %v2_103d4, align 4
  %v1_103d8 = urem i32 %v0_103d8, 32
  store i32 %v1_103d8, i32* %r1.global-to-local, align 4
  %v2_103dc = add nsw i32 %v1_103d8, -1
  %v3_103dc = shl i32 1, %v2_103dc
  %v4_103dc = and i32 %v3_103dc, %v3_103d4
  %v5_103dc = icmp ne i32 %v4_103dc, 0
  store i1 %v5_103dc, i1* %cpsr_c.global-to-local, align 1
  %v6_103dc = lshr i32 %v3_103d4, %v1_103d8
  store i32 %v6_103dc, i32* %r2.global-to-local, align 4
  %v1_103e0 = urem i32 %v6_103dc, 2
  %v2_103e0 = icmp eq i32 %v1_103e0, 0
  store i1 %v2_103e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_103e0, label %dec_label_pc_103e8, label %dec_label_pc_105b0.preheader

dec_label_pc_105b0.preheader:                     ; preds = %dec_label_pc_103c0
  %v0_105b0129 = load i32, i32* @r6, align 4
  %v1_105b0130 = add i32 %v0_105b0129, 12
  %v2_105b0131 = inttoptr i32 %v1_105b0130 to i32*
  %v3_105b0132 = load i32, i32* %v2_105b0131, align 4
  store i32 %v3_105b0132, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_105b4128134 = icmp eq i32 %v3_105b0132, 0
  store i1 %v2_105b4128134, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_105b4128134, label %dec_label_pc_103e8, label %dec_label_pc_105bc.lr.ph

dec_label_pc_103e8:                               ; preds = %dec_label_pc_105b0.loopexit, %dec_label_pc_105b4.backedge, %dec_label_pc_105b0.preheader, %dec_label_pc_103c0, %.thread241, %dec_label_pc_10eac, %dec_label_pc_103fc, %dec_label_pc_10f90, %dec_label_pc_10eec
  %v3_103e8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_103e8, i32* %r3.global-to-local, align 4
  %v1_103ec = add i32 %v3_103e8, 1
  store i32 %v1_103ec, i32* %r2.global-to-local, align 4
  %v2_103f0 = icmp ugt i32 %v1_103ec, 254
  store i1 %v2_103f0, i1* %cpsr_c.global-to-local, align 1
  %v7_103f0 = icmp eq i32 %v1_103ec, 255
  store i1 %v7_103f0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_103ec, i32* %stack_var_-52, align 4
  %v8_103f8 = icmp sgt i32 %v1_103ec, 255
  br i1 %v8_103f8, label %dec_label_pc_fc68, label %dec_label_pc_103fc

dec_label_pc_103fc:                               ; preds = %dec_label_pc_103e8, %dec_label_pc_10368
  %v0_10408 = phi i32 [ %v1_103ec, %dec_label_pc_103e8 ], [ 0, %dec_label_pc_10368 ]
  store i32 ptrtoint (i32* @global_var_1a428.195 to i32), i32* %ip.global-to-local, align 4
  %v3_10400 = mul i32 %v0_10408, 256
  store i32 %v3_10400, i32* %r3.global-to-local, align 4
  %v2_10404 = load i32, i32* @global_var_1a428.195, align 4
  store i32 %v2_10404, i32* %r1.global-to-local, align 4
  %v2_1040c = mul i32 %v0_10408, 288
  store i32 %v2_1040c, i32* %r2.global-to-local, align 4
  %v2_10410 = add i32 %v2_10404, %v2_1040c
  store i32 %v2_10410, i32* @r6, align 4
  %v1_10414 = add i32 %v2_10410, 4
  %v2_10414 = inttoptr i32 %v1_10414 to i32*
  %v3_10414 = load i32, i32* %v2_10414, align 4
  store i32 %v3_10414, i32* %r4.global-to-local, align 4
  %v2_10418 = icmp eq i32 %v3_10414, -1
  store i1 %v2_10418, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_10418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10418, label %dec_label_pc_103e8, label %dec_label_pc_10420

dec_label_pc_10420:                               ; preds = %dec_label_pc_103fc
  %v3_10420 = udiv i32 %v3_10414, 32
  %v3_10428 = mul nuw nsw i32 %v3_10420, 4
  store i32 %v2_102f8, i32* %lr.global-to-local, align 4
  %v2_10430 = add i32 %v3_10428, %v2_102f8
  store i32 %v2_10430, i32* %r3.global-to-local, align 4
  %v1_10434 = add i32 %v2_10430, -312
  %v2_10434 = inttoptr i32 %v1_10434 to i32*
  %v3_10434 = load i32, i32* %v2_10434, align 4
  %v1_10438 = urem i32 %v3_10414, 32
  store i32 %v1_10438, i32* %r1.global-to-local, align 4
  %v2_1043c = add nsw i32 %v1_10438, -1
  %v3_1043c = shl i32 1, %v2_1043c
  %v4_1043c = and i32 %v3_10434, %v3_1043c
  %v5_1043c = icmp ne i32 %v4_1043c, 0
  store i1 %v5_1043c, i1* %cpsr_c.global-to-local, align 1
  %v6_1043c = lshr i32 %v3_10434, %v1_10438
  store i32 %v6_1043c, i32* %r2.global-to-local, align 4
  %v1_10440 = urem i32 %v6_1043c, 2
  %v2_10440 = icmp eq i32 %v1_10440, 0
  store i1 %v2_10440, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10440, label %dec_label_pc_103c0, label %dec_label_pc_10448

dec_label_pc_10448:                               ; preds = %dec_label_pc_10420
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_10a1c, i32* %r3.global-to-local, align 4
  store i32 %v2_10524, i32* %ip.global-to-local, align 4
  store i32 %v3_10414, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v8_10478 = call i32 @getsockopt(i32 %v3_10414, i32 1, i32 4, i32* nonnull %stack_var_-48, i32* nonnull %stack_var_-56)
  %v3_1047c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_1047c, i32* %r3.global-to-local, align 4
  %v2_10480 = or i32 %v3_1047c, %v8_10478
  store i32 %v2_10480, i32* %r0.global-to-local, align 4
  %v4_10480 = icmp eq i32 %v2_10480, 0
  store i1 %v4_10480, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_10480, label %dec_label_pc_10488, label %dec_label_pc_10f90

dec_label_pc_10488:                               ; preds = %dec_label_pc_10448
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_1048c = load i32, i32* @r6, align 4
  %v2_1048c = add i32 %v1_1048c, 12
  %v3_1048c = inttoptr i32 %v2_1048c to i32*
  store i32 2, i32* %v3_1048c, align 4
  %v0_10490 = call i32 @function_f468()
  %v3_10498 = load i8, i8* @global_var_1a405.189, align 1
  %v4_10498 = zext i8 %v3_10498 to i32
  store i32 %v4_10498, i32* %r2.global-to-local, align 4
  %v2_1049c = load i8, i8* bitcast (i8** @global_var_1a404.188 to i8*), align 4
  %v3_1049c = zext i8 %v2_1049c to i32
  %v4_104a0 = mul nuw nsw i32 %v4_10498, 256
  %v5_104a0 = or i32 %v3_1049c, %v4_104a0
  store i32 %v5_104a0, i32* %r1.global-to-local, align 4
  %v2_104a4 = urem i32 %v0_10490, %v5_104a0
  store i32 ptrtoint (i32* @global_var_1a3d4.184 to i32), i32* %r3.global-to-local, align 4
  %v2_104ac = load i32, i32* @global_var_1a3d4.184, align 4
  store i32 %v2_104ac, i32* %lr.global-to-local, align 4
  %v1_104b4 = load i32, i32* @r5, align 4
  %v9_104b4 = icmp eq i32 %v2_104ac, %v1_104b4
  store i1 %v9_104b4, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v2_104a4, i32* %r0.global-to-local, align 4
  %v7_104bc = icmp sgt i32 %v2_104ac, %v1_104b4
  br i1 %v7_104bc, label %dec_label_pc_104c0, label %dec_label_pc_10f78

dec_label_pc_104c0:                               ; preds = %dec_label_pc_10488
  %v2_104c4 = load i32, i32* @global_var_1a400.186, align 4
  store i32 %v2_104c4, i32* %r3.global-to-local, align 4
  store i32 %v1_104b4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_104e0

dec_label_pc_104d0:                               ; preds = %dec_label_pc_104f8, %dec_label_pc_104e0
  %v1_104d0 = add i32 %v0_104d0, 1
  store i32 %v1_104d0, i32* %ip.global-to-local, align 4
  %v3_104d4 = icmp uge i32 %v1_104d0, %v2_104ac
  store i1 %v3_104d4, i1* %cpsr_c.global-to-local, align 1
  %v9_104d4 = icmp eq i32 %v1_104d0, %v2_104ac
  store i1 %v9_104d4, i1* %cpsr_z.global-to-local, align 1
  %v1_104d8 = add i32 %v0_104d8, 16
  store i32 %v1_104d8, i32* %r3.global-to-local, align 4
  br i1 %v9_104d4, label %dec_label_pc_10f78, label %dec_label_pc_104e0

dec_label_pc_104e0:                               ; preds = %dec_label_pc_104d0, %dec_label_pc_104c0
  %v0_104d0 = phi i32 [ %v1_104d0, %dec_label_pc_104d0 ], [ %v1_104b4, %dec_label_pc_104c0 ]
  %v0_104d8 = phi i32 [ %v1_104d8, %dec_label_pc_104d0 ], [ %v2_104c4, %dec_label_pc_104c0 ]
  store i32 %v0_104d8, i32* %r1.global-to-local, align 4
  %v1_104e4 = add i32 %v0_104d8, 9
  %v2_104e4 = inttoptr i32 %v1_104e4 to i8*
  %v3_104e4 = load i8, i8* %v2_104e4, align 1
  %v4_104e4 = zext i8 %v3_104e4 to i32
  store i32 %v4_104e4, i32* %r2.global-to-local, align 4
  %v1_104e8 = add i32 %v0_104d8, 8
  %v2_104e8 = inttoptr i32 %v1_104e8 to i8*
  %v3_104e8 = load i8, i8* %v2_104e8, align 1
  %v4_104e8 = zext i8 %v3_104e8 to i32
  %v4_104ec = mul nuw nsw i32 %v4_104e4, 256
  %v5_104ec = or i32 %v4_104e8, %v4_104ec
  store i32 %v5_104ec, i32* %r3.global-to-local, align 4
  %v3_104f0 = icmp uge i32 %v5_104ec, %v2_104a4
  store i1 %v3_104f0, i1* %cpsr_c.global-to-local, align 1
  %v9_104f0 = icmp eq i32 %v5_104ec, %v2_104a4
  store i1 %v9_104f0, i1* %cpsr_z.global-to-local, align 1
  %v2_104f4 = xor i1 %v9_104f0, true
  %v3_104f4 = and i1 %v3_104f0, %v2_104f4
  br i1 %v3_104f4, label %dec_label_pc_104d0, label %dec_label_pc_104f8

dec_label_pc_104f8:                               ; preds = %dec_label_pc_104e0
  %v1_104f8 = add i32 %v0_104d8, 10
  %v2_104f8 = inttoptr i32 %v1_104f8 to i8*
  %v3_104f8 = load i8, i8* %v2_104f8, align 1
  %v4_104f8 = zext i8 %v3_104f8 to i32
  store i32 %v4_104f8, i32* %r3.global-to-local, align 4
  %v1_104fc = add i32 %v0_104d8, 11
  %v2_104fc = inttoptr i32 %v1_104fc to i8*
  %v3_104fc = load i8, i8* %v2_104fc, align 1
  %v4_104fc = zext i8 %v3_104fc to i32
  store i32 %v4_104fc, i32* %r2.global-to-local, align 4
  %v4_10500 = mul nuw nsw i32 %v4_104fc, 256
  %v5_10500 = or i32 %v4_10500, %v4_104f8
  store i32 %v5_10500, i32* %r3.global-to-local, align 4
  %v3_10504 = icmp uge i32 %v5_10500, %v2_104a4
  store i1 %v3_10504, i1* %cpsr_c.global-to-local, align 1
  %v9_10504 = icmp eq i32 %v5_10500, %v2_104a4
  store i1 %v9_10504, i1* %cpsr_z.global-to-local, align 1
  %v2_10508 = xor i1 %v3_10504, true
  %v3_10508 = or i1 %v9_10504, %v2_10508
  br i1 %v3_10508, label %dec_label_pc_104d0, label %dec_label_pc_10f7c

dec_label_pc_10510:                               ; preds = %dec_label_pc_10778, %dec_label_pc_1074c, %dec_label_pc_10794
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_10514 = call i32 @function_11138(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_1051c = call i32 @function_11138(i32 27)
  store i32 %v2_10524, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_1052c = call i32 @function_11054(i32 26, i32* nonnull %stack_var_-56)
  store i32 %v3_1052c, i32* @r4, align 4
  store i32 %v2_10524, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_10540 = call i32 @function_11054(i32 27, i32* nonnull %stack_var_-56)
  %v3_10544 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10540, i32* @r5, align 4
  %v0_1054c = load i32, i32* @r4, align 4
  store i32 %v0_1054c, i32* %r2.global-to-local, align 4
  %v1_10550 = add i32 %v3_10544, -1
  store i32 %v1_10550, i32* %r3.global-to-local, align 4
  %v0_10554 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10554, i32* %r0.global-to-local, align 4
  %v0_10558 = load i32, i32* @r6, align 4
  %v1_10558 = add i32 %v0_10558, 24
  %v2_10558 = inttoptr i32 %v1_10558 to i32*
  %v3_10558 = load i32, i32* %v2_10558, align 4
  store i32 %v3_10558, i32* %r1.global-to-local, align 4
  %v4_1055c = call i32 @function_117c8(i32 %v0_10554, i32 %v3_10558, i32 %v0_1054c, i32 %v1_10550)
  store i32 %v4_1055c, i32* %r0.global-to-local, align 4
  %v2_10560 = icmp eq i32 %v4_1055c, -1
  store i1 %v2_10560, i1* %cpsr_c.global-to-local, align 1
  %v7_10560 = icmp eq i32 %v4_1055c, -1
  store i1 %v7_10560, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10560, label %dec_label_pc_10570, label %dec_label_pc_10598

dec_label_pc_10570:                               ; preds = %dec_label_pc_10510
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_10570 = load i32, i32* %stack_var_-56, align 4
  %v0_10574 = load i32, i32* @r5, align 4
  store i32 %v0_10574, i32* %r2.global-to-local, align 4
  %v1_10578 = add i32 %v3_10570, -1
  store i32 %v1_10578, i32* %r3.global-to-local, align 4
  %v0_1057c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1057c, i32* %r0.global-to-local, align 4
  %v0_10580 = load i32, i32* @r6, align 4
  %v1_10580 = add i32 %v0_10580, 24
  %v2_10580 = inttoptr i32 %v1_10580 to i32*
  %v3_10580 = load i32, i32* %v2_10580, align 4
  store i32 %v3_10580, i32* %r1.global-to-local, align 4
  %v4_10584 = call i32 @function_117c8(i32 %v0_1057c, i32 %v3_10580, i32 %v0_10574, i32 %v1_10578)
  store i32 %v4_10584, i32* %r0.global-to-local, align 4
  %v2_10588 = icmp eq i32 %v4_10584, -1
  store i1 %v2_10588, i1* %cpsr_c.global-to-local, align 1
  %v7_10588 = icmp eq i32 %v4_10584, -1
  store i1 %v7_10588, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10588, label %dec_label_pc_10fac, label %dec_label_pc_10598

dec_label_pc_10598:                               ; preds = %dec_label_pc_10570, %dec_label_pc_10510
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_1059c = call i32 @function_11080(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_105a4 = call i32 @function_11080(i32 27)
  store i32 %v1_105a4, i32* %r0.global-to-local, align 4
  %v0_105a8 = load i32, i32* @r7, align 4
  %v3_105a8 = icmp eq i32 %v0_105a8, -1
  store i1 %v3_105a8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_105a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_105a8, label %dec_label_pc_105b0.loopexit, label %dec_label_pc_107b0

dec_label_pc_105b0.loopexit:                      ; preds = %dec_label_pc_1073c.thread, %dec_label_pc_1073c, %dec_label_pc_10de8, %dec_label_pc_10630, %dec_label_pc_10598, %dec_label_pc_10dd4
  %v0_105b0 = load i32, i32* @r6, align 4
  %v1_105b0 = add i32 %v0_105b0, 12
  %v2_105b0 = inttoptr i32 %v1_105b0 to i32*
  %v3_105b0 = load i32, i32* %v2_105b0, align 4
  store i32 %v3_105b0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_105b4128 = icmp eq i32 %v3_105b0, 0
  store i1 %v2_105b4128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_105b4128, label %dec_label_pc_103e8, label %dec_label_pc_105bc.lr.ph

dec_label_pc_105bc.lr.ph:                         ; preds = %dec_label_pc_105b0.preheader, %dec_label_pc_105b0.loopexit
  %v0_105bc161 = phi i32 [ %v0_105b0, %dec_label_pc_105b0.loopexit ], [ %v0_105b0129, %dec_label_pc_105b0.preheader ]
  br label %dec_label_pc_105bc

dec_label_pc_105bc:                               ; preds = %dec_label_pc_105b4.backedge.thread, %dec_label_pc_105b4.backedge, %dec_label_pc_105b4.backedge.thread501, %dec_label_pc_105bc.lr.ph
  %v0_10f24 = phi i32 [ %v0_105bc161, %dec_label_pc_105bc.lr.ph ], [ %v0_105bc158, %dec_label_pc_105b4.backedge ], [ %v0_10630, %dec_label_pc_105b4.backedge.thread ], [ %v0_10630, %dec_label_pc_105b4.backedge.thread501 ]
  %v1_105bc = add i32 %v0_10f24, 24
  %v2_105bc = inttoptr i32 %v1_105bc to i32*
  %v3_105bc = load i32, i32* %v2_105bc, align 4
  store i32 %v3_105bc, i32* %r3.global-to-local, align 4
  %v2_105c0 = icmp ugt i32 %v3_105bc, 255
  store i1 %v2_105c0, i1* %cpsr_c.global-to-local, align 1
  %v7_105c0 = icmp eq i32 %v3_105bc, 256
  store i1 %v7_105c0, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_10f24, 28
  store i32 %.pre, i32* %r8.global-to-local, align 4
  br i1 %v7_105c0, label %dec_label_pc_10f24, label %dec_label_pc_105cc

dec_label_pc_105cc:                               ; preds = %dec_label_pc_105bc, %dec_label_pc_10f24
  store i32 0, i32* @r5, align 4
  %v1_105d0 = load i32, i32* @sb, align 4
  %v2_105d0 = inttoptr i32 %v1_105d0 to i32*
  store i32 0, i32* %v2_105d0, align 4
  %v0_105d4 = load i32, i32* @r6, align 4
  %v1_105d4 = add i32 %v0_105d4, 24
  %v2_105d4 = inttoptr i32 %v1_105d4 to i32*
  %v3_105d4 = load i32, i32* %v2_105d4, align 4
  store i32 %v3_105d4, i32* %r2.global-to-local, align 4
  %v0_105d8 = load i32, i32* %r8.global-to-local, align 4
  %v2_105d8 = add i32 %v0_105d8, %v3_105d4
  store i32 %v2_105d8, i32* @r4, align 4
  %v1_105dc = add i32 %v0_105d4, 4
  %v2_105dc = inttoptr i32 %v1_105dc to i32*
  %v3_105dc = load i32, i32* %v2_105dc, align 4
  store i32 %v3_105dc, i32* %r0.global-to-local, align 4
  %v1_105e0 = sub i32 256, %v3_105d4
  store i32 %v1_105e0, i32* %r2.global-to-local, align 4
  store i32 %v2_105d8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_105ec = inttoptr i32 %v2_105d8 to i32*
  %v5_105ec = call i32 @recv(i32 %v3_105dc, i32* %v4_105ec, i32 %v1_105e0, i32 16384)
  store i32 %v5_105ec, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_105f0 = icmp eq i32 %v5_105ec, 0
  store i1 %v2_105f0, i1* %cpsr_z.global-to-local, align 1
  %tmp345 = icmp slt i32 %v5_105ec, 1
  br i1 %tmp345, label %dec_label_pc_10ea0, label %dec_label_pc_105f8

dec_label_pc_105f8:                               ; preds = %dec_label_pc_105cc
  %v0_105f8 = load i32, i32* @r5, align 4
  store i32 %v0_105f8, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10600

dec_label_pc_10600:                               ; preds = %bb347, %dec_label_pc_105f8
  %v3_10608 = phi i32 [ %v1_1060c, %bb347 ], [ %v0_105f8, %dec_label_pc_105f8 ]
  %v1_10600 = load i32, i32* @r4, align 4
  %v2_10600 = add i32 %v1_10600, %v3_10608
  %v3_10600 = inttoptr i32 %v2_10600 to i8*
  %v4_10600 = load i8, i8* %v3_10600, align 1
  %v6_10600 = zext i8 %v4_10600 to i32
  store i32 %v6_10600, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10604 = icmp eq i8 %v4_10600, 0
  store i1 %v2_10604, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10604, label %bb346, label %bb347

bb346:                                            ; preds = %dec_label_pc_10600
  %v1_10608 = load i32, i32* %r1.global-to-local, align 4
  %v2_10608 = trunc i32 %v1_10608 to i8
  store i8 %v2_10608, i8* %v3_10600, align 1
  %v0_1060c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb347

bb347:                                            ; preds = %dec_label_pc_10600, %bb346
  %v0_1060c = phi i32 [ %v3_10608, %dec_label_pc_10600 ], [ %v0_1060c.pre, %bb346 ]
  %v1_1060c = add i32 %v0_1060c, 1
  store i32 %v1_1060c, i32* %r2.global-to-local, align 4
  %v3_10610 = icmp uge i32 %v5_105ec, %v1_1060c
  store i1 %v3_10610, i1* %cpsr_c.global-to-local, align 1
  %v9_10610 = icmp eq i32 %v5_105ec, %v1_1060c
  store i1 %v9_10610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10610, label %dec_label_pc_10618, label %dec_label_pc_10600

dec_label_pc_10618:                               ; preds = %bb347, %dec_label_pc_10ea4
  store i32 ptrtoint (i32* @global_var_1a408.182 to i32), i32* %r1.global-to-local, align 4
  %v0_1061c = load i32, i32* @r6, align 4
  %v1_1061c = add i32 %v0_1061c, 24
  %v2_1061c = inttoptr i32 %v1_1061c to i32*
  %v3_1061c = load i32, i32* %v2_1061c, align 4
  %v2_10620 = load i32, i32* @global_var_1a408.182, align 4
  store i32 %v2_10620, i32* %r3.global-to-local, align 4
  %v2_10624 = add i32 %v3_1061c, %v5_105ec
  store i32 %v2_10624, i32* %ip.global-to-local, align 4
  store i32 %v2_10624, i32* %v2_1061c, align 4
  %v0_1062c = load i32, i32* %r3.global-to-local, align 4
  %v1_1062c = load i32, i32* @r6, align 4
  %v2_1062c = add i32 %v1_1062c, 8
  %v3_1062c = inttoptr i32 %v2_1062c to i32*
  store i32 %v0_1062c, i32* %v3_1062c, align 4
  br label %dec_label_pc_10630

dec_label_pc_10630:                               ; preds = %dec_label_pc_10aec, %dec_label_pc_10618
  %v0_10630 = load i32, i32* @r6, align 4
  %v1_10630 = add i32 %v0_10630, 12
  %v2_10630 = inttoptr i32 %v1_10630 to i32*
  %v3_10630 = load i32, i32* %v2_10630, align 4
  store i32 %v3_10630, i32* %r2.global-to-local, align 4
  %v1_10634 = add i32 %v3_10630, -2
  store i32 %v1_10634, i32* %r3.global-to-local, align 4
  %v7_10638 = icmp eq i32 %v1_10634, 8
  store i1 %v7_10638, i1* %cpsr_z.global-to-local, align 1
  %v5_1063c = and i32 %v1_10634, 1073741824
  %v6_1063c = icmp ne i32 %v5_1063c, 0
  store i1 %v6_1063c, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_10630, label %dec_label_pc_105b0.loopexit [
    i32 2, label %dec_label_pc_10668
    i32 3, label %dec_label_pc_1074c
    i32 4, label %dec_label_pc_107f4
    i32 5, label %dec_label_pc_1088c
    i32 6, label %dec_label_pc_109b4
    i32 7, label %dec_label_pc_10c78
    i32 8, label %dec_label_pc_10b10
    i32 9, label %dec_label_pc_10bc4
    i32 10, label %dec_label_pc_10a68
  ]

dec_label_pc_10668:                               ; preds = %dec_label_pc_10630
  %v1_10668 = add i32 %v0_10630, 24
  %v2_10668 = inttoptr i32 %v1_10668 to i32*
  %v3_10668 = load i32, i32* %v2_10668, align 4
  store i32 %v3_10668, i32* %ip.global-to-local, align 4
  %v0_1066c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1066c, i32* @r5, align 4
  store i32 0, i32* @r7, align 4
  store i32 -4, i32* %sl.global-to-local, align 4
  %v1_10678 = add i32 %v0_10630, 29
  store i32 %v1_10678, i32* @r4, align 4
  %v3_1067c119 = icmp eq i32 %v3_10668, 0
  store i1 %v3_1067c119, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_1067c119, i1* %cpsr_z.global-to-local, align 1
  %v6_10680126 = icmp sgt i32 %v3_10668, 0
  br i1 %v6_10680126, label %dec_label_pc_10684.preheader, label %dec_label_pc_1073c.thread

dec_label_pc_1073c.thread:                        ; preds = %dec_label_pc_10668
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_105b0.loopexit

dec_label_pc_1067c.loopexit:                      ; preds = %dec_label_pc_1069c
  %v2_106a4 = add i32 %v1_106a4, 2
  store i32 %v2_106a4, i32* @r5, align 4
  %v2_106a8 = add i32 %v1_106a8, 2
  store i32 %v2_106a8, i32* @r4, align 4
  %v2_106ac = add i32 %v1_106ac, 2
  store i32 %v2_106ac, i32* @r7, align 4
  %v3_1067c = icmp uge i32 %v2_106ac, %v1_1067c
  store i1 %v3_1067c, i1* %cpsr_c.global-to-local, align 1
  %v9_1067c = icmp eq i32 %v2_106ac, %v1_1067c
  store i1 %v9_1067c, i1* %cpsr_z.global-to-local, align 1
  %v6_10680 = icmp slt i32 %v2_106ac, %v1_1067c
  br i1 %v6_10680, label %dec_label_pc_10684.preheader, label %dec_label_pc_1072c

dec_label_pc_10684.preheader:                     ; preds = %dec_label_pc_10668, %dec_label_pc_1067c.loopexit
  %v6_10734199 = phi i32 [ %v6_10734200, %dec_label_pc_1067c.loopexit ], [ %v0_10630, %dec_label_pc_10668 ]
  %v1_106ac189 = phi i32 [ %v2_106ac, %dec_label_pc_1067c.loopexit ], [ 0, %dec_label_pc_10668 ]
  %v1_106a4187 = phi i32 [ %v2_106a4, %dec_label_pc_1067c.loopexit ], [ %v0_1066c, %dec_label_pc_10668 ]
  %v1_10690185 = phi i32 [ %v1_1067c, %dec_label_pc_1067c.loopexit ], [ %v3_10668, %dec_label_pc_10668 ]
  %v0_10684183 = phi i32 [ %v2_106a8, %dec_label_pc_1067c.loopexit ], [ %v1_10678, %dec_label_pc_10668 ]
  br label %dec_label_pc_10684

dec_label_pc_10684:                               ; preds = %dec_label_pc_10684.preheader, %dec_label_pc_1070c
  %v6_10734200 = phi i32 [ %v6_10734199, %dec_label_pc_10684.preheader ], [ %v0_10714, %dec_label_pc_1070c ]
  %v1_106ac = phi i32 [ %v1_106ac189, %dec_label_pc_10684.preheader ], [ %v1_10718, %dec_label_pc_1070c ]
  %v1_106a4 = phi i32 [ %v1_106a4187, %dec_label_pc_10684.preheader ], [ %v1_10720, %dec_label_pc_1070c ]
  %v1_1067c = phi i32 [ %v1_10690185, %dec_label_pc_10684.preheader ], [ %v3_10714, %dec_label_pc_1070c ]
  %v1_106a8 = phi i32 [ %v0_10684183, %dec_label_pc_10684.preheader ], [ %v1_10724, %dec_label_pc_1070c ]
  %v1_10684 = add i32 %v1_106a8, -1
  %v2_10684 = inttoptr i32 %v1_10684 to i8*
  %v3_10684 = load i8, i8* %v2_10684, align 1
  %v4_10684 = zext i8 %v3_10684 to i32
  store i32 %v4_10684, i32* %r3.global-to-local, align 4
  %v2_10688 = icmp eq i8 %v3_10684, -1
  store i1 %v2_10688, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_10688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10688, label %dec_label_pc_10690, label %dec_label_pc_1072c

dec_label_pc_10690:                               ; preds = %dec_label_pc_10684
  %v0_10690 = load i32, i32* %r8.global-to-local, align 4
  %v2_10690 = add i32 %v0_10690, %v1_1067c
  store i32 %v2_10690, i32* %r2.global-to-local, align 4
  %v3_10694 = icmp uge i32 %v2_10690, %v1_106a8
  store i1 %v3_10694, i1* %cpsr_c.global-to-local, align 1
  %v9_10694 = icmp eq i32 %v2_10690, %v1_106a8
  store i1 %v9_10694, i1* %cpsr_z.global-to-local, align 1
  %v2_10698 = xor i1 %v3_10694, true
  %v3_10698 = or i1 %v9_10694, %v2_10698
  br i1 %v3_10698, label %dec_label_pc_1072c, label %dec_label_pc_1069c

dec_label_pc_1069c:                               ; preds = %dec_label_pc_10690
  %v1_1069c = inttoptr i32 %v1_106a8 to i8*
  %v2_1069c = load i8, i8* %v1_1069c, align 1
  %v3_1069c = zext i8 %v2_1069c to i32
  store i32 %v3_1069c, i32* %r3.global-to-local, align 4
  %v2_106a0 = icmp eq i8 %v2_1069c, -1
  store i1 %v2_106a0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_106a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_106a0, label %dec_label_pc_1067c.loopexit, label %dec_label_pc_106b4

dec_label_pc_106b4:                               ; preds = %dec_label_pc_1069c
  %v2_106b4 = icmp ugt i8 %v2_1069c, -4
  store i1 %v2_106b4, i1* %cpsr_c.global-to-local, align 1
  %v7_106b4 = icmp eq i8 %v2_1069c, -3
  store i1 %v7_106b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106b4, label %dec_label_pc_10d2c, label %dec_label_pc_106bc

dec_label_pc_106bc:                               ; preds = %dec_label_pc_106b4
  %v1_106bc = add i32 %v1_106a4, 2
  store i32 %v1_106bc, i32* %r3.global-to-local, align 4
  %v3_106c0 = icmp uge i32 %v2_10690, %v1_106bc
  store i1 %v3_106c0, i1* %cpsr_c.global-to-local, align 1
  %v9_106c0 = icmp eq i32 %v2_10690, %v1_106bc
  store i1 %v9_106c0, i1* %cpsr_z.global-to-local, align 1
  %v2_106c4 = xor i1 %v3_106c0, true
  %v3_106c4 = or i1 %v9_106c0, %v2_106c4
  br i1 %v3_106c4, label %dec_label_pc_1072c, label %dec_label_pc_106c8

dec_label_pc_106c8:                               ; preds = %dec_label_pc_10d84, %bb370, %bb369, %dec_label_pc_106bc
  %v0_106c8 = load i32, i32* @r4, align 4
  %v1_106c8 = inttoptr i32 %v0_106c8 to i8*
  %v2_106c8 = load i8, i8* %v1_106c8, align 1
  %v3_106c8 = zext i8 %v2_106c8 to i32
  store i32 %v3_106c8, i32* %r3.global-to-local, align 4
  %v2_106cc = icmp ugt i8 %v2_106c8, -4
  store i1 %v2_106cc, i1* %cpsr_c.global-to-local, align 1
  %v7_106cc = icmp eq i8 %v2_106c8, -3
  store i1 %v7_106cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106cc, label %bb348, label %dec_label_pc_106d8

bb348:                                            ; preds = %dec_label_pc_106c8
  %v1_106d0 = load i32, i32* %sl.global-to-local, align 4
  %v2_106d0 = trunc i32 %v1_106d0 to i8
  store i8 %v2_106d0, i8* %v1_106c8, align 1
  %v0_106d4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_106d4.pr, label %.thread88, label %.dec_label_pc_106d8_crit_edge

.dec_label_pc_106d8_crit_edge:                    ; preds = %bb348
  %v0_106d8.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_106d8

dec_label_pc_106d8:                               ; preds = %.dec_label_pc_106d8_crit_edge, %dec_label_pc_106c8
  %v0_106d8 = phi i32 [ %v0_106d8.pre, %.dec_label_pc_106d8_crit_edge ], [ %v3_106c8, %dec_label_pc_106c8 ]
  %v2_106d8 = icmp ugt i32 %v0_106d8, 250
  store i1 %v2_106d8, i1* %cpsr_c.global-to-local, align 1
  %v7_106d8 = icmp eq i32 %v0_106d8, 251
  store i1 %v7_106d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106d8, label %bb349, label %.thread88

bb349:                                            ; preds = %dec_label_pc_106d8
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_106e0 = load i32, i32* @r4, align 4
  %v4_106e0 = inttoptr i32 %v3_106e0 to i8*
  store i8 -3, i8* %v4_106e0, align 1
  br label %.thread88

.thread88:                                        ; preds = %dec_label_pc_106d8, %bb348, %bb349
  %v0_106e4 = load i32, i32* @r4, align 4
  %v1_106e4 = add i32 %v0_106e4, 1
  %v2_106e4 = inttoptr i32 %v1_106e4 to i8*
  %v3_106e4 = load i8, i8* %v2_106e4, align 1
  %v4_106e4 = zext i8 %v3_106e4 to i32
  store i32 %v4_106e4, i32* %r3.global-to-local, align 4
  %v2_106e8 = icmp ugt i8 %v3_106e4, -4
  store i1 %v2_106e8, i1* %cpsr_c.global-to-local, align 1
  %v7_106e8 = icmp eq i8 %v3_106e4, -3
  store i1 %v7_106e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106e8, label %bb350, label %dec_label_pc_106f4

bb350:                                            ; preds = %.thread88
  %v1_106ec = load i32, i32* %sl.global-to-local, align 4
  %v2_106ec = trunc i32 %v1_106ec to i8
  store i8 %v2_106ec, i8* %v2_106e4, align 1
  %v0_106f0.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_106f0.pr, label %.thread90, label %.dec_label_pc_106f4_crit_edge

.dec_label_pc_106f4_crit_edge:                    ; preds = %bb350
  %v0_106f4.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_106f4

dec_label_pc_106f4:                               ; preds = %.dec_label_pc_106f4_crit_edge, %.thread88
  %v0_106f4 = phi i32 [ %v0_106f4.pre, %.dec_label_pc_106f4_crit_edge ], [ %v4_106e4, %.thread88 ]
  %v2_106f4 = icmp ugt i32 %v0_106f4, 250
  store i1 %v2_106f4, i1* %cpsr_c.global-to-local, align 1
  %v7_106f4 = icmp eq i32 %v0_106f4, 251
  store i1 %v7_106f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106f4, label %bb351, label %.thread90

bb351:                                            ; preds = %dec_label_pc_106f4
  store i32 -3, i32* %ip.global-to-local, align 4
  %v3_106fc = load i32, i32* @r4, align 4
  %v4_106fc = add i32 %v3_106fc, 1
  %v5_106fc = inttoptr i32 %v4_106fc to i8*
  store i8 -3, i8* %v5_106fc, align 1
  br label %.thread90

.thread90:                                        ; preds = %dec_label_pc_106f4, %bb350, %bb351
  %v0_10700 = load i32, i32* @r6, align 4
  %v1_10700 = add i32 %v0_10700, 4
  %v2_10700 = inttoptr i32 %v1_10700 to i32*
  %v3_10700 = load i32, i32* %v2_10700, align 4
  store i32 %v3_10700, i32* %r0.global-to-local, align 4
  %v0_10704 = load i32, i32* @r5, align 4
  br label %dec_label_pc_1070c

dec_label_pc_1070c:                               ; preds = %dec_label_pc_10ef8, %.thread90
  %storemerge8 = phi i32 [ %v2_10d48, %dec_label_pc_10ef8 ], [ %v0_10704, %.thread90 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_10ef8 ], [ 3, %.thread90 ]
  store i32 %storemerge8, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10710 = inttoptr i32 %storemerge8 to i32*
  %v5_10710 = call i32 @send(i32 16384, i32* %v4_10710, i32 %storemerge, i32 16384)
  store i32 %v5_10710, i32* %r0.global-to-local, align 4
  %v0_10714 = load i32, i32* @r6, align 4
  %v1_10714 = add i32 %v0_10714, 24
  %v2_10714 = inttoptr i32 %v1_10714 to i32*
  %v3_10714 = load i32, i32* %v2_10714, align 4
  store i32 %v3_10714, i32* %ip.global-to-local, align 4
  %v0_10718 = load i32, i32* @r7, align 4
  %v1_10718 = add i32 %v0_10718, 3
  store i32 %v1_10718, i32* @r7, align 4
  %v3_1071c = icmp uge i32 %v1_10718, %v3_10714
  store i1 %v3_1071c, i1* %cpsr_c.global-to-local, align 1
  %v9_1071c = icmp eq i32 %v1_10718, %v3_10714
  store i1 %v9_1071c, i1* %cpsr_z.global-to-local, align 1
  %v0_10720 = load i32, i32* @r5, align 4
  %v1_10720 = add i32 %v0_10720, 3
  store i32 %v1_10720, i32* @r5, align 4
  %v0_10724 = load i32, i32* @r4, align 4
  %v1_10724 = add i32 %v0_10724, 3
  store i32 %v1_10724, i32* @r4, align 4
  %v5_10728 = icmp slt i32 %v1_10718, %v3_10714
  br i1 %v5_10728, label %dec_label_pc_10684, label %dec_label_pc_1072c

dec_label_pc_1072c:                               ; preds = %dec_label_pc_1067c.loopexit, %dec_label_pc_10684, %dec_label_pc_1070c, %dec_label_pc_106bc, %dec_label_pc_10690, %dec_label_pc_10d2c.dec_label_pc_1072c.loopexit_crit_edge
  %v6_10734 = phi i32 [ %v0_10d54, %dec_label_pc_10d2c.dec_label_pc_1072c.loopexit_crit_edge ], [ %v6_10734200, %dec_label_pc_10684 ], [ %v0_10714, %dec_label_pc_1070c ], [ %v6_10734200, %dec_label_pc_106bc ], [ %v6_10734200, %dec_label_pc_10690 ], [ %v6_10734200, %dec_label_pc_1067c.loopexit ]
  %v0_1072c = phi i32 [ %v0_1072c.pre.pre, %dec_label_pc_10d2c.dec_label_pc_1072c.loopexit_crit_edge ], [ %v1_106ac, %dec_label_pc_10684 ], [ %v1_10718, %dec_label_pc_1070c ], [ %v1_106ac, %dec_label_pc_106bc ], [ %v1_106ac, %dec_label_pc_10690 ], [ %v2_106ac, %dec_label_pc_1067c.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1072c = icmp eq i32 %v0_1072c, 0
  store i1 %v2_1072c, i1* %cpsr_z.global-to-local, align 1
  %tmp352 = icmp slt i32 %v0_1072c, 1
  br i1 %tmp352, label %dec_label_pc_1073c, label %.thread236

.thread236:                                       ; preds = %dec_label_pc_1072c
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_10734 = add i32 %v6_10734, 12
  %v8_10734 = inttoptr i32 %v7_10734 to i32*
  store i32 3, i32* %v8_10734, align 4
  br label %dec_label_pc_10aec

dec_label_pc_1073c:                               ; preds = %dec_label_pc_1072c, %dec_label_pc_10ccc, %dec_label_pc_10c18, %dec_label_pc_10b64, %dec_label_pc_10e34, %dec_label_pc_10a08, %dec_label_pc_108e0, %dec_label_pc_107b0, %dec_label_pc_10848
  %v0_1073c = phi i32 [ %v1_10cc0, %dec_label_pc_10ccc ], [ %v1_10c0c, %dec_label_pc_10c18 ], [ %v1_10b58, %dec_label_pc_10b64 ], [ %v0_10e2c, %dec_label_pc_10e34 ], [ %v1_109fc, %dec_label_pc_10a08 ], [ %v1_108d4, %dec_label_pc_108e0 ], [ %v0_107b0, %dec_label_pc_107b0 ], [ %v0_10848, %dec_label_pc_10848 ], [ %v0_1072c, %dec_label_pc_1072c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1073c = icmp eq i32 %v0_1073c, 0
  store i1 %v2_1073c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1073c, label %dec_label_pc_105b0.loopexit, label %dec_label_pc_10744

dec_label_pc_10744:                               ; preds = %dec_label_pc_1073c
  %v0_10744 = load i32, i32* @r6, align 4
  %v1_10744 = add i32 %v0_10744, 24
  %v2_10744 = inttoptr i32 %v1_10744 to i32*
  %v3_10744 = load i32, i32* %v2_10744, align 4
  store i32 %v3_10744, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10aec

dec_label_pc_1074c:                               ; preds = %dec_label_pc_10630
  %v1_1074c = add i32 %v0_10630, 24
  %v2_1074c = inttoptr i32 %v1_1074c to i32*
  %v3_1074c = load i32, i32* %v2_1074c, align 4
  store i32 %v3_1074c, i32* %r3.global-to-local, align 4
  %v1_10750 = add i32 %v3_1074c, -1
  store i32 %v1_10750, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10754 = icmp eq i32 %v1_10750, 0
  store i1 %v2_10754, i1* %cpsr_z.global-to-local, align 1
  %v5_10758 = icmp sgt i32 %v1_10750, 0
  br i1 %v5_10758, label %dec_label_pc_10780, label %dec_label_pc_10510

dec_label_pc_10760:                               ; preds = %bb353
  %v2_10760 = icmp ugt i8 %v3_10784, 35
  store i1 %v2_10760, i1* %cpsr_c.global-to-local, align 1
  %v7_10760 = icmp eq i8 %v3_10784, 36
  store i1 %v7_10760, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10760, label %dec_label_pc_10794, label %dec_label_pc_10768

dec_label_pc_10768:                               ; preds = %dec_label_pc_10760
  %v2_10768 = icmp ugt i8 %v3_10784, 34
  store i1 %v2_10768, i1* %cpsr_c.global-to-local, align 1
  %v7_10768 = icmp eq i8 %v3_10784, 35
  store i1 %v7_10768, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10768, label %dec_label_pc_10794, label %dec_label_pc_10770

dec_label_pc_10770:                               ; preds = %dec_label_pc_10768
  %v2_10770 = icmp ugt i8 %v3_10784, 36
  store i1 %v2_10770, i1* %cpsr_c.global-to-local, align 1
  %v7_10770 = icmp eq i8 %v3_10784, 37
  store i1 %v7_10770, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10770, label %dec_label_pc_10794, label %dec_label_pc_10778

dec_label_pc_10778:                               ; preds = %dec_label_pc_10770
  %v1_10778 = add i32 %v0_10794, -1
  store i32 %v1_10778, i32* %r0.global-to-local, align 4
  %v2_10778 = icmp ne i32 %v0_10794, 0
  store i1 %v2_10778, i1* %cpsr_c.global-to-local, align 1
  %v7_10778 = icmp eq i32 %v0_10794, 1
  store i1 %v7_10778, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10778, label %dec_label_pc_10510, label %dec_label_pc_10780

dec_label_pc_10780:                               ; preds = %dec_label_pc_1074c, %dec_label_pc_10778
  %v0_10794 = phi i32 [ %v1_10778, %dec_label_pc_10778 ], [ %v1_10750, %dec_label_pc_1074c ]
  %v2_10780 = add i32 %v0_10794, %v0_10630
  store i32 %v2_10780, i32* %r3.global-to-local, align 4
  %v1_10784 = add i32 %v2_10780, 28
  %v2_10784 = inttoptr i32 %v1_10784 to i8*
  %v3_10784 = load i8, i8* %v2_10784, align 1
  %v4_10784 = zext i8 %v3_10784 to i32
  store i32 %v4_10784, i32* %r3.global-to-local, align 4
  %v2_10788 = icmp ugt i8 %v3_10784, 61
  store i1 %v2_10788, i1* %cpsr_c.global-to-local, align 1
  %v7_10788 = icmp eq i8 %v3_10784, 62
  store i1 %v7_10788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10788, label %dec_label_pc_10794, label %bb353

bb353:                                            ; preds = %dec_label_pc_10780
  %v3_1078c = icmp ugt i8 %v3_10784, 57
  store i1 %v3_1078c, i1* %cpsr_c.global-to-local, align 1
  %v8_1078c = icmp eq i8 %v3_10784, 58
  store i1 %v8_1078c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1078c, label %dec_label_pc_10794, label %dec_label_pc_10760

dec_label_pc_10794:                               ; preds = %dec_label_pc_10780, %bb353, %dec_label_pc_10770, %dec_label_pc_10768, %dec_label_pc_10760
  %v1_10794 = add i32 %v0_10794, 1
  store i32 %v1_10794, i32* @r7, align 4
  %v2_10798 = icmp eq i32 %v1_10794, -1
  store i1 %v2_10798, i1* %cpsr_c.global-to-local, align 1
  %v7_10798 = icmp eq i32 %v0_10794, -2
  store i1 %v7_10798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10798, label %dec_label_pc_10510, label %dec_label_pc_107a0

dec_label_pc_107a0:                               ; preds = %dec_label_pc_10794
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_107a4 = call i32 @function_11080(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_107ac = call i32 @function_11080(i32 27)
  store i32 %v1_107ac, i32* %r0.global-to-local, align 4
  %v0_107b0.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_107b0

dec_label_pc_107b0:                               ; preds = %dec_label_pc_10598, %dec_label_pc_107a0
  %v0_107b0 = phi i32 [ %v0_105a8, %dec_label_pc_10598 ], [ %v0_107b0.pre, %dec_label_pc_107a0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_107b0 = icmp eq i32 %v0_107b0, 0
  store i1 %v2_107b0, i1* %cpsr_z.global-to-local, align 1
  %tmp354 = icmp slt i32 %v0_107b0, 1
  br i1 %tmp354, label %dec_label_pc_1073c, label %dec_label_pc_107b8

dec_label_pc_107b8:                               ; preds = %dec_label_pc_107b0
  %v0_107b8 = load i32, i32* @r6, align 4
  %v1_107b8 = inttoptr i32 %v0_107b8 to i32*
  %v2_107b8 = load i32, i32* %v1_107b8, align 4
  store i32 %v2_107b8, i32* %r3.global-to-local, align 4
  %v1_107bc = add i32 %v0_107b8, 4
  %v2_107bc = inttoptr i32 %v1_107bc to i32*
  %v3_107bc = load i32, i32* %v2_107bc, align 4
  store i32 %v3_107bc, i32* %r0.global-to-local, align 4
  %v1_107c0 = add i32 %v2_107b8, 12
  %v2_107c0 = inttoptr i32 %v1_107c0 to i8*
  %v3_107c0 = load i8, i8* %v2_107c0, align 1
  %v4_107c0 = zext i8 %v3_107c0 to i32
  store i32 %v4_107c0, i32* %r2.global-to-local, align 4
  %v1_107c4 = inttoptr i32 %v2_107b8 to i32*
  %v2_107c4 = load i32, i32* %v1_107c4, align 4
  store i32 %v2_107c4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_107cc = inttoptr i32 %v2_107c4 to i32*
  %v5_107cc = call i32 @send(i32 %v3_107bc, i32* %v4_107cc, i32 %v4_107c0, i32 16384)
  store i32 %v5_107cc, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_107d4 = load i32, i32* @r6, align 4
  %v1_107d4 = add i32 %v0_107d4, 4
  %v2_107d4 = inttoptr i32 %v1_107d4 to i32*
  %v3_107d4 = load i32, i32* %v2_107d4, align 4
  store i32 %v3_107d4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_12030.257 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_107e0 = call i32 @send(i32 %v3_107d4, i32* bitcast ([3 x i8]* @global_var_12030.257 to i32*), i32 2, i32 16384)
  store i32 %v5_107e0, i32* %r0.global-to-local, align 4
  %v0_107e4 = load i32, i32* @r6, align 4
  %v1_107e4 = add i32 %v0_107e4, 24
  %v2_107e4 = inttoptr i32 %v1_107e4 to i32*
  %v3_107e4 = load i32, i32* %v2_107e4, align 4
  store i32 %v3_107e4, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_107ec = add i32 %v0_107e4, 12
  %v3_107ec = inttoptr i32 %v2_107ec to i32*
  store i32 4, i32* %v3_107ec, align 4
  br label %dec_label_pc_10aec

dec_label_pc_107f4:                               ; preds = %dec_label_pc_10630
  %v1_107f4 = add i32 %v0_10630, 24
  %v2_107f4 = inttoptr i32 %v1_107f4 to i32*
  %v3_107f4 = load i32, i32* %v2_107f4, align 4
  store i32 %v3_107f4, i32* %r3.global-to-local, align 4
  %v1_107f8 = add i32 %v3_107f4, -1
  store i32 %v1_107f8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_107fc = icmp eq i32 %v1_107f8, 0
  store i1 %v2_107fc, i1* %cpsr_z.global-to-local, align 1
  %v5_10800 = icmp sgt i32 %v1_107f8, 0
  br i1 %v5_10800, label %dec_label_pc_10820, label %dec_label_pc_10d94

dec_label_pc_10808:                               ; preds = %bb355
  %v2_10808 = icmp ugt i8 %v3_10824, 35
  store i1 %v2_10808, i1* %cpsr_c.global-to-local, align 1
  %v7_10808 = icmp eq i8 %v3_10824, 36
  store i1 %v7_10808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10808, label %dec_label_pc_10834, label %dec_label_pc_10810

dec_label_pc_10810:                               ; preds = %dec_label_pc_10808
  %v2_10810 = icmp ugt i8 %v3_10824, 34
  store i1 %v2_10810, i1* %cpsr_c.global-to-local, align 1
  %v7_10810 = icmp eq i8 %v3_10824, 35
  store i1 %v7_10810, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10810, label %dec_label_pc_10834, label %dec_label_pc_10818

dec_label_pc_10818:                               ; preds = %dec_label_pc_10810
  %v1_10818 = add i32 %v0_10834, -1
  store i32 %v1_10818, i32* %r0.global-to-local, align 4
  %v2_10818 = icmp ne i32 %v0_10834, 0
  store i1 %v2_10818, i1* %cpsr_c.global-to-local, align 1
  %v7_10818 = icmp eq i32 %v0_10834, 1
  store i1 %v7_10818, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10818, label %dec_label_pc_10d94, label %dec_label_pc_10820

dec_label_pc_10820:                               ; preds = %dec_label_pc_107f4, %dec_label_pc_10818
  %v0_10834 = phi i32 [ %v1_10818, %dec_label_pc_10818 ], [ %v1_107f8, %dec_label_pc_107f4 ]
  %v2_10820 = add i32 %v0_10834, %v0_10630
  store i32 %v2_10820, i32* %r3.global-to-local, align 4
  %v1_10824 = add i32 %v2_10820, 28
  %v2_10824 = inttoptr i32 %v1_10824 to i8*
  %v3_10824 = load i8, i8* %v2_10824, align 1
  %v4_10824 = zext i8 %v3_10824 to i32
  store i32 %v4_10824, i32* %r3.global-to-local, align 4
  %v2_10828 = icmp ugt i8 %v3_10824, 61
  store i1 %v2_10828, i1* %cpsr_c.global-to-local, align 1
  %v7_10828 = icmp eq i8 %v3_10824, 62
  store i1 %v7_10828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10828, label %dec_label_pc_10834, label %bb355

bb355:                                            ; preds = %dec_label_pc_10820
  %v3_1082c = icmp ugt i8 %v3_10824, 57
  store i1 %v3_1082c, i1* %cpsr_c.global-to-local, align 1
  %v8_1082c = icmp eq i8 %v3_10824, 58
  store i1 %v8_1082c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1082c, label %dec_label_pc_10834, label %dec_label_pc_10808

dec_label_pc_10834:                               ; preds = %dec_label_pc_10820, %bb355, %dec_label_pc_10810, %dec_label_pc_10808
  %v1_10834 = add i32 %v0_10834, 1
  store i32 %v1_10834, i32* @r7, align 4
  %v2_10838 = icmp eq i32 %v1_10834, -1
  store i1 %v2_10838, i1* %cpsr_c.global-to-local, align 1
  %v7_10838 = icmp eq i32 %v0_10834, -2
  store i1 %v7_10838, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10838, label %dec_label_pc_10d94, label %dec_label_pc_10840

dec_label_pc_10840:                               ; preds = %dec_label_pc_10834
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10844 = call i32 @function_11080(i32 25)
  store i32 %v1_10844, i32* %r0.global-to-local, align 4
  %v0_10848.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10848

dec_label_pc_10848:                               ; preds = %dec_label_pc_10dd4, %dec_label_pc_10840
  %v0_10848 = phi i32 [ %v0_10ddc, %dec_label_pc_10dd4 ], [ %v0_10848.pre, %dec_label_pc_10840 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10848 = icmp eq i32 %v0_10848, 0
  store i1 %v2_10848, i1* %cpsr_z.global-to-local, align 1
  %tmp356 = icmp slt i32 %v0_10848, 1
  br i1 %tmp356, label %dec_label_pc_1073c, label %dec_label_pc_10850

dec_label_pc_10850:                               ; preds = %dec_label_pc_10848
  %v0_10850 = load i32, i32* @r6, align 4
  %v1_10850 = inttoptr i32 %v0_10850 to i32*
  %v2_10850 = load i32, i32* %v1_10850, align 4
  store i32 %v2_10850, i32* %r3.global-to-local, align 4
  %v1_10854 = add i32 %v0_10850, 4
  %v2_10854 = inttoptr i32 %v1_10854 to i32*
  %v3_10854 = load i32, i32* %v2_10854, align 4
  store i32 %v3_10854, i32* %r0.global-to-local, align 4
  %v1_10858 = add i32 %v2_10850, 13
  %v2_10858 = inttoptr i32 %v1_10858 to i8*
  %v3_10858 = load i8, i8* %v2_10858, align 1
  %v4_10858 = zext i8 %v3_10858 to i32
  store i32 %v4_10858, i32* %r2.global-to-local, align 4
  %v1_1085c = add i32 %v2_10850, 4
  %v2_1085c = inttoptr i32 %v1_1085c to i32*
  %v3_1085c = load i32, i32* %v2_1085c, align 4
  store i32 %v3_1085c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10864 = inttoptr i32 %v3_1085c to i32*
  %v5_10864 = call i32 @send(i32 %v3_10854, i32* %v4_10864, i32 %v4_10858, i32 16384)
  store i32 %v5_10864, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_1086c = load i32, i32* @r6, align 4
  %v1_1086c = add i32 %v0_1086c, 4
  %v2_1086c = inttoptr i32 %v1_1086c to i32*
  %v3_1086c = load i32, i32* %v2_1086c, align 4
  store i32 %v3_1086c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_12030.257 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10878 = call i32 @send(i32 %v3_1086c, i32* bitcast ([3 x i8]* @global_var_12030.257 to i32*), i32 2, i32 16384)
  store i32 %v5_10878, i32* %r0.global-to-local, align 4
  %v0_1087c = load i32, i32* @r6, align 4
  %v1_1087c = add i32 %v0_1087c, 24
  %v2_1087c = inttoptr i32 %v1_1087c to i32*
  %v3_1087c = load i32, i32* %v2_1087c, align 4
  store i32 %v3_1087c, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_10884 = add i32 %v0_1087c, 12
  %v3_10884 = inttoptr i32 %v2_10884 to i32*
  store i32 5, i32* %v3_10884, align 4
  br label %dec_label_pc_10aec

dec_label_pc_1088c:                               ; preds = %dec_label_pc_10630
  %v1_1088c = add i32 %v0_10630, 24
  %v2_1088c = inttoptr i32 %v1_1088c to i32*
  %v3_1088c = load i32, i32* %v2_1088c, align 4
  store i32 %v3_1088c, i32* %ip.global-to-local, align 4
  %v1_10890 = add i32 %v3_1088c, -1
  store i32 %v1_10890, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10894 = icmp eq i32 %v1_10890, 0
  store i1 %v2_10894, i1* %cpsr_z.global-to-local, align 1
  %v5_10898 = icmp sgt i32 %v1_10890, 0
  br i1 %v5_10898, label %dec_label_pc_108c0, label %dec_label_pc_105b4.backedge.thread

dec_label_pc_108a0:                               ; preds = %bb357
  %v2_108a0 = icmp ugt i8 %v3_108c4, 35
  store i1 %v2_108a0, i1* %cpsr_c.global-to-local, align 1
  %v7_108a0 = icmp eq i8 %v3_108c4, 36
  store i1 %v7_108a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108a0, label %dec_label_pc_108d4, label %dec_label_pc_108a8

dec_label_pc_108a8:                               ; preds = %dec_label_pc_108a0
  %v2_108a8 = icmp ugt i8 %v3_108c4, 34
  store i1 %v2_108a8, i1* %cpsr_c.global-to-local, align 1
  %v7_108a8 = icmp eq i8 %v3_108c4, 35
  store i1 %v7_108a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108a8, label %dec_label_pc_108d4, label %dec_label_pc_108b0

dec_label_pc_108b0:                               ; preds = %dec_label_pc_108a8
  %v2_108b0 = icmp ugt i8 %v3_108c4, 36
  store i1 %v2_108b0, i1* %cpsr_c.global-to-local, align 1
  %v7_108b0 = icmp eq i8 %v3_108c4, 37
  store i1 %v7_108b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108b0, label %dec_label_pc_108d4, label %dec_label_pc_108b8

dec_label_pc_108b8:                               ; preds = %dec_label_pc_108b0
  %v1_108b8 = add i32 %v0_108d4, -1
  store i32 %v1_108b8, i32* %r0.global-to-local, align 4
  %v2_108b8 = icmp ne i32 %v0_108d4, 0
  store i1 %v2_108b8, i1* %cpsr_c.global-to-local, align 1
  %v7_108b8 = icmp eq i32 %v0_108d4, 1
  store i1 %v7_108b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108b8, label %dec_label_pc_105b4.backedge.thread501, label %dec_label_pc_108c0

dec_label_pc_108c0:                               ; preds = %dec_label_pc_1088c, %dec_label_pc_108b8
  %v0_108d4 = phi i32 [ %v1_108b8, %dec_label_pc_108b8 ], [ %v1_10890, %dec_label_pc_1088c ]
  %v2_108c0 = add i32 %v0_108d4, %v0_10630
  store i32 %v2_108c0, i32* %r3.global-to-local, align 4
  %v1_108c4 = add i32 %v2_108c0, 28
  %v2_108c4 = inttoptr i32 %v1_108c4 to i8*
  %v3_108c4 = load i8, i8* %v2_108c4, align 1
  %v4_108c4 = zext i8 %v3_108c4 to i32
  store i32 %v4_108c4, i32* %r3.global-to-local, align 4
  %v2_108c8 = icmp ugt i8 %v3_108c4, 61
  store i1 %v2_108c8, i1* %cpsr_c.global-to-local, align 1
  %v7_108c8 = icmp eq i8 %v3_108c4, 62
  store i1 %v7_108c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108c8, label %dec_label_pc_108d4, label %bb357

bb357:                                            ; preds = %dec_label_pc_108c0
  %v3_108cc = icmp ugt i8 %v3_108c4, 57
  store i1 %v3_108cc, i1* %cpsr_c.global-to-local, align 1
  %v8_108cc = icmp eq i8 %v3_108c4, 58
  store i1 %v8_108cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_108cc, label %dec_label_pc_108d4, label %dec_label_pc_108a0

dec_label_pc_108d4:                               ; preds = %dec_label_pc_108c0, %bb357, %dec_label_pc_108b0, %dec_label_pc_108a8, %dec_label_pc_108a0
  %v1_108d4 = add i32 %v0_108d4, 1
  store i32 %v1_108d4, i32* @r7, align 4
  %v2_108d8 = icmp eq i32 %v1_108d4, -1
  store i1 %v2_108d8, i1* %cpsr_c.global-to-local, align 1
  %v7_108d8 = icmp eq i32 %v0_108d4, -2
  store i1 %v7_108d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108d8, label %dec_label_pc_105b4.backedge.thread501, label %dec_label_pc_108e0

dec_label_pc_108e0:                               ; preds = %dec_label_pc_108d4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_108e0 = icmp eq i32 %v1_108d4, 0
  store i1 %v2_108e0, i1* %cpsr_z.global-to-local, align 1
  %tmp358 = icmp slt i32 %v1_108d4, 1
  br i1 %tmp358, label %dec_label_pc_1073c, label %dec_label_pc_108e8

dec_label_pc_108e8:                               ; preds = %dec_label_pc_108e0
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_108ec = call i32 @function_11138(i32 5)
  store i32 %v2_10524, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r0.global-to-local, align 4
  %v3_108fc = call i32 @function_11054(i32 5, i32* nonnull %stack_var_-56)
  store i32 %v3_108fc, i32* %r0.global-to-local, align 4
  %v3_10900 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10900, i32* %r2.global-to-local, align 4
  store i32 %v3_108fc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1090c = load i32, i32* @r6, align 4
  %v1_1090c = add i32 %v0_1090c, 4
  %v2_1090c = inttoptr i32 %v1_1090c to i32*
  %v3_1090c = load i32, i32* %v2_1090c, align 4
  store i32 %v3_1090c, i32* %r0.global-to-local, align 4
  %v4_10910 = inttoptr i32 %v3_108fc to i32*
  %v5_10910 = call i32 @send(i32 %v3_1090c, i32* %v4_10910, i32 %v3_10900, i32 16384)
  store i32 %v5_10910, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_12030.257 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10920 = load i32, i32* @r6, align 4
  %v1_10920 = add i32 %v0_10920, 4
  %v2_10920 = inttoptr i32 %v1_10920 to i32*
  %v3_10920 = load i32, i32* %v2_10920, align 4
  store i32 %v3_10920, i32* %r0.global-to-local, align 4
  %v5_10924 = call i32 @send(i32 %v3_10920, i32* bitcast ([3 x i8]* @global_var_12030.257 to i32*), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_1092c = call i32 @function_11080(i32 5)
  store i32 %v1_1092c, i32* %r0.global-to-local, align 4
  %v0_10930 = load i32, i32* @r6, align 4
  %v1_10930 = add i32 %v0_10930, 24
  %v2_10930 = inttoptr i32 %v1_10930 to i32*
  %v3_10930 = load i32, i32* %v2_10930, align 4
  store i32 %v3_10930, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_10938 = add i32 %v0_10930, 12
  %v3_10938 = inttoptr i32 %v2_10938 to i32*
  store i32 6, i32* %v3_10938, align 4
  br label %dec_label_pc_10aec

dec_label_pc_109b4:                               ; preds = %dec_label_pc_10630
  %v1_109b4 = add i32 %v0_10630, 24
  %v2_109b4 = inttoptr i32 %v1_109b4 to i32*
  %v3_109b4 = load i32, i32* %v2_109b4, align 4
  store i32 %v3_109b4, i32* %ip.global-to-local, align 4
  %v1_109b8 = add i32 %v3_109b4, -1
  store i32 %v1_109b8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_109bc = icmp eq i32 %v1_109b8, 0
  store i1 %v2_109bc, i1* %cpsr_z.global-to-local, align 1
  %v5_109c0 = icmp sgt i32 %v1_109b8, 0
  br i1 %v5_109c0, label %dec_label_pc_109e8, label %dec_label_pc_105b4.backedge.thread

dec_label_pc_109c8:                               ; preds = %bb359
  %v2_109c8 = icmp ugt i8 %v3_109ec, 35
  store i1 %v2_109c8, i1* %cpsr_c.global-to-local, align 1
  %v7_109c8 = icmp eq i8 %v3_109ec, 36
  store i1 %v7_109c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109c8, label %dec_label_pc_109fc, label %dec_label_pc_109d0

dec_label_pc_109d0:                               ; preds = %dec_label_pc_109c8
  %v2_109d0 = icmp ugt i8 %v3_109ec, 34
  store i1 %v2_109d0, i1* %cpsr_c.global-to-local, align 1
  %v7_109d0 = icmp eq i8 %v3_109ec, 35
  store i1 %v7_109d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109d0, label %dec_label_pc_109fc, label %dec_label_pc_109d8

dec_label_pc_109d8:                               ; preds = %dec_label_pc_109d0
  %v2_109d8 = icmp ugt i8 %v3_109ec, 36
  store i1 %v2_109d8, i1* %cpsr_c.global-to-local, align 1
  %v7_109d8 = icmp eq i8 %v3_109ec, 37
  store i1 %v7_109d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109d8, label %dec_label_pc_109fc, label %dec_label_pc_109e0

dec_label_pc_109e0:                               ; preds = %dec_label_pc_109d8
  %v1_109e0 = add i32 %v0_109fc, -1
  store i32 %v1_109e0, i32* %r0.global-to-local, align 4
  %v2_109e0 = icmp ne i32 %v0_109fc, 0
  store i1 %v2_109e0, i1* %cpsr_c.global-to-local, align 1
  %v7_109e0 = icmp eq i32 %v0_109fc, 1
  store i1 %v7_109e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109e0, label %dec_label_pc_105b4.backedge.thread501, label %dec_label_pc_109e8

dec_label_pc_109e8:                               ; preds = %dec_label_pc_109b4, %dec_label_pc_109e0
  %v0_109fc = phi i32 [ %v1_109e0, %dec_label_pc_109e0 ], [ %v1_109b8, %dec_label_pc_109b4 ]
  %v2_109e8 = add i32 %v0_109fc, %v0_10630
  store i32 %v2_109e8, i32* %r3.global-to-local, align 4
  %v1_109ec = add i32 %v2_109e8, 28
  %v2_109ec = inttoptr i32 %v1_109ec to i8*
  %v3_109ec = load i8, i8* %v2_109ec, align 1
  %v4_109ec = zext i8 %v3_109ec to i32
  store i32 %v4_109ec, i32* %r3.global-to-local, align 4
  %v2_109f0 = icmp ugt i8 %v3_109ec, 61
  store i1 %v2_109f0, i1* %cpsr_c.global-to-local, align 1
  %v7_109f0 = icmp eq i8 %v3_109ec, 62
  store i1 %v7_109f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109f0, label %dec_label_pc_109fc, label %bb359

bb359:                                            ; preds = %dec_label_pc_109e8
  %v3_109f4 = icmp ugt i8 %v3_109ec, 57
  store i1 %v3_109f4, i1* %cpsr_c.global-to-local, align 1
  %v8_109f4 = icmp eq i8 %v3_109ec, 58
  store i1 %v8_109f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_109f4, label %dec_label_pc_109fc, label %dec_label_pc_109c8

dec_label_pc_109fc:                               ; preds = %dec_label_pc_109e8, %bb359, %dec_label_pc_109d8, %dec_label_pc_109d0, %dec_label_pc_109c8
  %v1_109fc = add i32 %v0_109fc, 1
  store i32 %v1_109fc, i32* @r7, align 4
  %v2_10a00 = icmp eq i32 %v1_109fc, -1
  store i1 %v2_10a00, i1* %cpsr_c.global-to-local, align 1
  %v7_10a00 = icmp eq i32 %v0_109fc, -2
  store i1 %v7_10a00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a00, label %dec_label_pc_105b4.backedge.thread501, label %dec_label_pc_10a08

dec_label_pc_10a08:                               ; preds = %dec_label_pc_109fc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10a08 = icmp eq i32 %v1_109fc, 0
  store i1 %v2_10a08, i1* %cpsr_z.global-to-local, align 1
  %tmp360 = icmp slt i32 %v1_109fc, 1
  br i1 %tmp360, label %dec_label_pc_1073c, label %dec_label_pc_10a10

dec_label_pc_10a10:                               ; preds = %dec_label_pc_10a08
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_10a14 = call i32 @function_11138(i32 6)
  store i32 %v2_10a1c, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_10a24 = call i32 @function_11054(i32 6, i32* nonnull %stack_var_-48)
  store i32 %v3_10a24, i32* %r0.global-to-local, align 4
  %v3_10a28 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10a28, i32* %r2.global-to-local, align 4
  store i32 %v3_10a24, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10a34 = load i32, i32* @r6, align 4
  %v1_10a34 = add i32 %v0_10a34, 4
  %v2_10a34 = inttoptr i32 %v1_10a34 to i32*
  %v3_10a34 = load i32, i32* %v2_10a34, align 4
  store i32 %v3_10a34, i32* %r0.global-to-local, align 4
  %v4_10a38 = inttoptr i32 %v3_10a24 to i32*
  %v5_10a38 = call i32 @send(i32 %v3_10a34, i32* %v4_10a38, i32 %v3_10a28, i32 16384)
  store i32 %v5_10a38, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_12030.257 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10a48 = load i32, i32* @r6, align 4
  %v1_10a48 = add i32 %v0_10a48, 4
  %v2_10a48 = inttoptr i32 %v1_10a48 to i32*
  %v3_10a48 = load i32, i32* %v2_10a48, align 4
  store i32 %v3_10a48, i32* %r0.global-to-local, align 4
  %v5_10a4c = call i32 @send(i32 %v3_10a48, i32* bitcast ([3 x i8]* @global_var_12030.257 to i32*), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_10a54 = call i32 @function_11080(i32 6)
  store i32 %v1_10a54, i32* %r0.global-to-local, align 4
  %v0_10a58 = load i32, i32* @r6, align 4
  %v1_10a58 = add i32 %v0_10a58, 24
  %v2_10a58 = inttoptr i32 %v1_10a58 to i32*
  %v3_10a58 = load i32, i32* %v2_10a58, align 4
  store i32 %v3_10a58, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_10a60 = add i32 %v0_10a58, 12
  %v3_10a60 = inttoptr i32 %v2_10a60 to i32*
  store i32 7, i32* %v3_10a60, align 4
  br label %dec_label_pc_10aec

dec_label_pc_10a68:                               ; preds = %dec_label_pc_10630
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_10a6c = call i32 @function_11138(i32 10)
  store i32 %v2_10524, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_10a7c = call i32 @function_11054(i32 10, i32* nonnull %stack_var_-56)
  %v3_10a80 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10a7c, i32* %r2.global-to-local, align 4
  %v1_10a88 = add i32 %v3_10a80, -1
  store i32 %v1_10a88, i32* %r3.global-to-local, align 4
  %v0_10a8c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10a8c, i32* %r0.global-to-local, align 4
  %v0_10a90 = load i32, i32* @r6, align 4
  %v1_10a90 = add i32 %v0_10a90, 24
  %v2_10a90 = inttoptr i32 %v1_10a90 to i32*
  %v3_10a90 = load i32, i32* %v2_10a90, align 4
  store i32 %v3_10a90, i32* %r1.global-to-local, align 4
  %v4_10a94 = call i32 @function_117c8(i32 %v0_10a8c, i32 %v3_10a90, i32 %v3_10a7c, i32 %v1_10a88)
  %v2_10a98 = icmp eq i32 %v4_10a94, -1
  store i1 %v2_10a98, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_10a98, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_10a94, i32* @r4, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_10dec = call i32 @function_11080(i32 10)
  br i1 %v2_10a98, label %dec_label_pc_10de8, label %dec_label_pc_10aa4

dec_label_pc_10aa4:                               ; preds = %dec_label_pc_10a68
  store i32 %v1_10dec, i32* %r0.global-to-local, align 4
  %v0_10aac = load i32, i32* @r6, align 4
  %v1_10aac = add i32 %v0_10aac, 4
  %v2_10aac = inttoptr i32 %v1_10aac to i32*
  %v3_10aac = load i32, i32* %v2_10aac, align 4
  store i32 %v3_10aac, i32* %r0.global-to-local, align 4
  %v1_10ab0 = call i32 @close(i32 %v3_10aac)
  store i32 %v1_10ab0, i32* %r0.global-to-local, align 4
  %v0_10ab4 = load i32, i32* @r6, align 4
  %v1_10ab4 = add i32 %v0_10ab4, 284
  %v2_10ab4 = inttoptr i32 %v1_10ab4 to i8*
  %v3_10ab4 = load i8, i8* %v2_10ab4, align 1
  %v4_10ab4 = zext i8 %v3_10ab4 to i32
  %v1_10ab8 = add nuw nsw i32 %v4_10ab4, 1
  %v1_10abc = urem i32 %v1_10ab8, 256
  store i32 %v1_10abc, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_10ac4 = icmp ugt i32 %v1_10abc, 9
  store i1 %v2_10ac4, i1* %cpsr_c.global-to-local, align 1
  %v7_10ac4 = icmp eq i32 %v1_10abc, 10
  store i1 %v7_10ac4, i1* %cpsr_z.global-to-local, align 1
  %v2_10ac8 = add i32 %v0_10ab4, 4
  %v3_10ac8 = inttoptr i32 %v2_10ac8 to i32*
  store i32 -1, i32* %v3_10ac8, align 4
  %v0_10acc = load i32, i32* %r3.global-to-local, align 4
  %v1_10acc = trunc i32 %v0_10acc to i8
  %v2_10acc = load i32, i32* @r6, align 4
  %v3_10acc = add i32 %v2_10acc, 284
  %v4_10acc = inttoptr i32 %v3_10acc to i8*
  store i8 %v1_10acc, i8* %v4_10acc, align 1
  %v0_10ad0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10ad0, label %dec_label_pc_10ad4, label %dec_label_pc_10f48

dec_label_pc_10ad4:                               ; preds = %dec_label_pc_10aa4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_10adc = load i32, i32* @r6, align 4
  %v1_10adc = add i32 %v0_10adc, 24
  %v2_10adc = inttoptr i32 %v1_10adc to i32*
  %v3_10adc = load i32, i32* %v2_10adc, align 4
  store i32 %v3_10adc, i32* %ip.global-to-local, align 4
  %v3_10ae0 = add i32 %v0_10adc, 284
  %v4_10ae0 = inttoptr i32 %v3_10ae0 to i8*
  store i8 0, i8* %v4_10ae0, align 1
  %v0_10ae4 = load i32, i32* %r0.global-to-local, align 4
  %v1_10ae4 = load i32, i32* @r6, align 4
  %v2_10ae4 = add i32 %v1_10ae4, 12
  %v3_10ae4 = inttoptr i32 %v2_10ae4 to i32*
  store i32 %v0_10ae4, i32* %v3_10ae4, align 4
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_10aec

dec_label_pc_10aec:                               ; preds = %.thread236, %dec_label_pc_10cd4, %dec_label_pc_10c20, %dec_label_pc_10b6c, %dec_label_pc_10f48, %dec_label_pc_10e84, %dec_label_pc_10a10, %dec_label_pc_108e8, %dec_label_pc_107b8, %dec_label_pc_10744, %dec_label_pc_10850, %dec_label_pc_10ad4
  %v0_10aec = load i32, i32* %ip.global-to-local, align 4
  %v1_10aec = load i32, i32* @r7, align 4
  %v2_10aec = sub i32 %v0_10aec, %v1_10aec
  %v3_10aec = icmp uge i32 %v0_10aec, %v1_10aec
  store i1 %v3_10aec, i1* %cpsr_c.global-to-local, align 1
  %v4_10aec = xor i32 %v1_10aec, %v0_10aec
  %v5_10aec = xor i32 %v2_10aec, %v0_10aec
  %v6_10aec = and i32 %v5_10aec, %v4_10aec
  %v7_10aec = icmp slt i32 %v6_10aec, 0
  %v8_10aec = icmp slt i32 %v2_10aec, 0
  %v9_10aec = icmp eq i32 %v0_10aec, %v1_10aec
  store i1 %v9_10aec, i1* %cpsr_z.global-to-local, align 1
  %v2_10af0 = xor i1 %v8_10aec, %v7_10aec
  %v0_10aec.v1_10aec = select i1 %v2_10af0, i32 %v0_10aec, i32 %v1_10aec
  store i32 %v0_10aec.v1_10aec, i32* %r1.global-to-local, align 4
  %v2_10af8 = sub i32 %v0_10aec, %v0_10aec.v1_10aec
  store i32 %v2_10af8, i32* %r2.global-to-local, align 4
  %v1_10afc = load i32, i32* @r6, align 4
  %v2_10afc = add i32 %v1_10afc, 24
  %v3_10afc = inttoptr i32 %v2_10afc to i32*
  store i32 %v2_10af8, i32* %v3_10afc, align 4
  %v0_10b00 = load i32, i32* %r8.global-to-local, align 4
  %v1_10b00 = load i32, i32* %r1.global-to-local, align 4
  %v2_10b00 = add i32 %v1_10b00, %v0_10b00
  store i32 %v2_10b00, i32* %r1.global-to-local, align 4
  store i32 %v0_10b00, i32* %r0.global-to-local, align 4
  %v3_10b08 = inttoptr i32 %v0_10b00 to i32*
  %v4_10b08 = inttoptr i32 %v2_10b00 to i32*
  %v5_10b08 = call i32* @memmove(i32* %v3_10b08, i32* %v4_10b08, i32 %v2_10af8)
  %v7_10b08 = ptrtoint i32* %v5_10b08 to i32
  store i32 %v7_10b08, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10630

dec_label_pc_10b10:                               ; preds = %dec_label_pc_10630
  %v1_10b10 = add i32 %v0_10630, 24
  %v2_10b10 = inttoptr i32 %v1_10b10 to i32*
  %v3_10b10 = load i32, i32* %v2_10b10, align 4
  store i32 %v3_10b10, i32* %ip.global-to-local, align 4
  %v1_10b14 = add i32 %v3_10b10, -1
  store i32 %v1_10b14, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10b18 = icmp eq i32 %v1_10b14, 0
  store i1 %v2_10b18, i1* %cpsr_z.global-to-local, align 1
  %v5_10b1c = icmp sgt i32 %v1_10b14, 0
  br i1 %v5_10b1c, label %dec_label_pc_10b44, label %dec_label_pc_105b4.backedge.thread

dec_label_pc_10b24:                               ; preds = %bb363
  %v2_10b24 = icmp ugt i8 %v3_10b48, 35
  store i1 %v2_10b24, i1* %cpsr_c.global-to-local, align 1
  %v7_10b24 = icmp eq i8 %v3_10b48, 36
  store i1 %v7_10b24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b24, label %dec_label_pc_10b58, label %dec_label_pc_10b2c

dec_label_pc_10b2c:                               ; preds = %dec_label_pc_10b24
  %v2_10b2c = icmp ugt i8 %v3_10b48, 34
  store i1 %v2_10b2c, i1* %cpsr_c.global-to-local, align 1
  %v7_10b2c = icmp eq i8 %v3_10b48, 35
  store i1 %v7_10b2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b2c, label %dec_label_pc_10b58, label %dec_label_pc_10b34

dec_label_pc_10b34:                               ; preds = %dec_label_pc_10b2c
  %v2_10b34 = icmp ugt i8 %v3_10b48, 36
  store i1 %v2_10b34, i1* %cpsr_c.global-to-local, align 1
  %v7_10b34 = icmp eq i8 %v3_10b48, 37
  store i1 %v7_10b34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b34, label %dec_label_pc_10b58, label %dec_label_pc_10b3c

dec_label_pc_10b3c:                               ; preds = %dec_label_pc_10b34
  %v1_10b3c = add i32 %v0_10b58, -1
  store i32 %v1_10b3c, i32* %r0.global-to-local, align 4
  %v2_10b3c = icmp ne i32 %v0_10b58, 0
  store i1 %v2_10b3c, i1* %cpsr_c.global-to-local, align 1
  %v7_10b3c = icmp eq i32 %v0_10b58, 1
  store i1 %v7_10b3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b3c, label %dec_label_pc_105b4.backedge.thread501, label %dec_label_pc_10b44

dec_label_pc_10b44:                               ; preds = %dec_label_pc_10b10, %dec_label_pc_10b3c
  %v0_10b58 = phi i32 [ %v1_10b3c, %dec_label_pc_10b3c ], [ %v1_10b14, %dec_label_pc_10b10 ]
  %v2_10b44 = add i32 %v0_10b58, %v0_10630
  store i32 %v2_10b44, i32* %r3.global-to-local, align 4
  %v1_10b48 = add i32 %v2_10b44, 28
  %v2_10b48 = inttoptr i32 %v1_10b48 to i8*
  %v3_10b48 = load i8, i8* %v2_10b48, align 1
  %v4_10b48 = zext i8 %v3_10b48 to i32
  store i32 %v4_10b48, i32* %r3.global-to-local, align 4
  %v2_10b4c = icmp ugt i8 %v3_10b48, 61
  store i1 %v2_10b4c, i1* %cpsr_c.global-to-local, align 1
  %v7_10b4c = icmp eq i8 %v3_10b48, 62
  store i1 %v7_10b4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b4c, label %dec_label_pc_10b58, label %bb363

bb363:                                            ; preds = %dec_label_pc_10b44
  %v3_10b50 = icmp ugt i8 %v3_10b48, 57
  store i1 %v3_10b50, i1* %cpsr_c.global-to-local, align 1
  %v8_10b50 = icmp eq i8 %v3_10b48, 58
  store i1 %v8_10b50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10b50, label %dec_label_pc_10b58, label %dec_label_pc_10b24

dec_label_pc_10b58:                               ; preds = %dec_label_pc_10b44, %bb363, %dec_label_pc_10b34, %dec_label_pc_10b2c, %dec_label_pc_10b24
  %v1_10b58 = add i32 %v0_10b58, 1
  store i32 %v1_10b58, i32* @r7, align 4
  %v2_10b5c = icmp eq i32 %v1_10b58, -1
  store i1 %v2_10b5c, i1* %cpsr_c.global-to-local, align 1
  %v7_10b5c = icmp eq i32 %v0_10b58, -2
  store i1 %v7_10b5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b5c, label %dec_label_pc_105b4.backedge.thread501, label %dec_label_pc_10b64

dec_label_pc_10b64:                               ; preds = %dec_label_pc_10b58
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10b64 = icmp eq i32 %v1_10b58, 0
  store i1 %v2_10b64, i1* %cpsr_z.global-to-local, align 1
  %tmp364 = icmp slt i32 %v1_10b58, 1
  br i1 %tmp364, label %dec_label_pc_1073c, label %dec_label_pc_10b6c

dec_label_pc_10b6c:                               ; preds = %dec_label_pc_10b64
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_10b70 = call i32 @function_11138(i32 7)
  store i32 %v2_10524, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_10b80 = call i32 @function_11054(i32 7, i32* nonnull %stack_var_-56)
  store i32 %v3_10b80, i32* %r0.global-to-local, align 4
  %v3_10b84 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10b84, i32* %r2.global-to-local, align 4
  store i32 %v3_10b80, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10b90 = load i32, i32* @r6, align 4
  %v1_10b90 = add i32 %v0_10b90, 4
  %v2_10b90 = inttoptr i32 %v1_10b90 to i32*
  %v3_10b90 = load i32, i32* %v2_10b90, align 4
  store i32 %v3_10b90, i32* %r0.global-to-local, align 4
  %v4_10b94 = inttoptr i32 %v3_10b80 to i32*
  %v5_10b94 = call i32 @send(i32 %v3_10b90, i32* %v4_10b94, i32 %v3_10b84, i32 16384)
  store i32 %v5_10b94, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_12030.257 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10ba4 = load i32, i32* @r6, align 4
  %v1_10ba4 = add i32 %v0_10ba4, 4
  %v2_10ba4 = inttoptr i32 %v1_10ba4 to i32*
  %v3_10ba4 = load i32, i32* %v2_10ba4, align 4
  store i32 %v3_10ba4, i32* %r0.global-to-local, align 4
  %v5_10ba8 = call i32 @send(i32 %v3_10ba4, i32* bitcast ([3 x i8]* @global_var_12030.257 to i32*), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_10bb0 = call i32 @function_11080(i32 7)
  store i32 %v1_10bb0, i32* %r0.global-to-local, align 4
  %v0_10bb4 = load i32, i32* @r6, align 4
  %v1_10bb4 = add i32 %v0_10bb4, 24
  %v2_10bb4 = inttoptr i32 %v1_10bb4 to i32*
  %v3_10bb4 = load i32, i32* %v2_10bb4, align 4
  store i32 %v3_10bb4, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_10bbc = add i32 %v0_10bb4, 12
  %v3_10bbc = inttoptr i32 %v2_10bbc to i32*
  store i32 9, i32* %v3_10bbc, align 4
  br label %dec_label_pc_10aec

dec_label_pc_10bc4:                               ; preds = %dec_label_pc_10630
  %v1_10bc4 = add i32 %v0_10630, 24
  %v2_10bc4 = inttoptr i32 %v1_10bc4 to i32*
  %v3_10bc4 = load i32, i32* %v2_10bc4, align 4
  store i32 %v3_10bc4, i32* %ip.global-to-local, align 4
  %v1_10bc8 = add i32 %v3_10bc4, -1
  store i32 %v1_10bc8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10bcc = icmp eq i32 %v1_10bc8, 0
  store i1 %v2_10bcc, i1* %cpsr_z.global-to-local, align 1
  %v5_10bd0 = icmp sgt i32 %v1_10bc8, 0
  br i1 %v5_10bd0, label %dec_label_pc_10bf8, label %dec_label_pc_105b4.backedge.thread

dec_label_pc_10bd8:                               ; preds = %bb365
  %v2_10bd8 = icmp ugt i8 %v3_10bfc, 35
  store i1 %v2_10bd8, i1* %cpsr_c.global-to-local, align 1
  %v7_10bd8 = icmp eq i8 %v3_10bfc, 36
  store i1 %v7_10bd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10bd8, label %dec_label_pc_10c0c, label %dec_label_pc_10be0

dec_label_pc_10be0:                               ; preds = %dec_label_pc_10bd8
  %v2_10be0 = icmp ugt i8 %v3_10bfc, 34
  store i1 %v2_10be0, i1* %cpsr_c.global-to-local, align 1
  %v7_10be0 = icmp eq i8 %v3_10bfc, 35
  store i1 %v7_10be0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10be0, label %dec_label_pc_10c0c, label %dec_label_pc_10be8

dec_label_pc_10be8:                               ; preds = %dec_label_pc_10be0
  %v2_10be8 = icmp ugt i8 %v3_10bfc, 36
  store i1 %v2_10be8, i1* %cpsr_c.global-to-local, align 1
  %v7_10be8 = icmp eq i8 %v3_10bfc, 37
  store i1 %v7_10be8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10be8, label %dec_label_pc_10c0c, label %dec_label_pc_10bf0

dec_label_pc_10bf0:                               ; preds = %dec_label_pc_10be8
  %v1_10bf0 = add i32 %v0_10c0c, -1
  store i32 %v1_10bf0, i32* %r0.global-to-local, align 4
  %v2_10bf0 = icmp ne i32 %v0_10c0c, 0
  store i1 %v2_10bf0, i1* %cpsr_c.global-to-local, align 1
  %v7_10bf0 = icmp eq i32 %v0_10c0c, 1
  store i1 %v7_10bf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10bf0, label %dec_label_pc_105b4.backedge.thread501, label %dec_label_pc_10bf8

dec_label_pc_10bf8:                               ; preds = %dec_label_pc_10bc4, %dec_label_pc_10bf0
  %v0_10c0c = phi i32 [ %v1_10bf0, %dec_label_pc_10bf0 ], [ %v1_10bc8, %dec_label_pc_10bc4 ]
  %v2_10bf8 = add i32 %v0_10c0c, %v0_10630
  store i32 %v2_10bf8, i32* %r3.global-to-local, align 4
  %v1_10bfc = add i32 %v2_10bf8, 28
  %v2_10bfc = inttoptr i32 %v1_10bfc to i8*
  %v3_10bfc = load i8, i8* %v2_10bfc, align 1
  %v4_10bfc = zext i8 %v3_10bfc to i32
  store i32 %v4_10bfc, i32* %r3.global-to-local, align 4
  %v2_10c00 = icmp ugt i8 %v3_10bfc, 61
  store i1 %v2_10c00, i1* %cpsr_c.global-to-local, align 1
  %v7_10c00 = icmp eq i8 %v3_10bfc, 62
  store i1 %v7_10c00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c00, label %dec_label_pc_10c0c, label %bb365

bb365:                                            ; preds = %dec_label_pc_10bf8
  %v3_10c04 = icmp ugt i8 %v3_10bfc, 57
  store i1 %v3_10c04, i1* %cpsr_c.global-to-local, align 1
  %v8_10c04 = icmp eq i8 %v3_10bfc, 58
  store i1 %v8_10c04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10c04, label %dec_label_pc_10c0c, label %dec_label_pc_10bd8

dec_label_pc_10c0c:                               ; preds = %dec_label_pc_10bf8, %bb365, %dec_label_pc_10be8, %dec_label_pc_10be0, %dec_label_pc_10bd8
  %v1_10c0c = add i32 %v0_10c0c, 1
  store i32 %v1_10c0c, i32* @r7, align 4
  %v2_10c10 = icmp eq i32 %v1_10c0c, -1
  store i1 %v2_10c10, i1* %cpsr_c.global-to-local, align 1
  %v7_10c10 = icmp eq i32 %v0_10c0c, -2
  store i1 %v7_10c10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c10, label %dec_label_pc_105b4.backedge.thread501, label %dec_label_pc_10c18

dec_label_pc_10c18:                               ; preds = %dec_label_pc_10c0c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10c18 = icmp eq i32 %v1_10c0c, 0
  store i1 %v2_10c18, i1* %cpsr_z.global-to-local, align 1
  %tmp366 = icmp slt i32 %v1_10c0c, 1
  br i1 %tmp366, label %dec_label_pc_1073c, label %dec_label_pc_10c20

dec_label_pc_10c20:                               ; preds = %dec_label_pc_10c18
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_10c24 = call i32 @function_11138(i32 8)
  store i32 %v2_10524, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_10c34 = call i32 @function_11054(i32 8, i32* nonnull %stack_var_-56)
  store i32 %v3_10c34, i32* %r0.global-to-local, align 4
  %v3_10c38 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10c38, i32* %r2.global-to-local, align 4
  store i32 %v3_10c34, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10c44 = load i32, i32* @r6, align 4
  %v1_10c44 = add i32 %v0_10c44, 4
  %v2_10c44 = inttoptr i32 %v1_10c44 to i32*
  %v3_10c44 = load i32, i32* %v2_10c44, align 4
  store i32 %v3_10c44, i32* %r0.global-to-local, align 4
  %v4_10c48 = inttoptr i32 %v3_10c34 to i32*
  %v5_10c48 = call i32 @send(i32 %v3_10c44, i32* %v4_10c48, i32 %v3_10c38, i32 16384)
  store i32 %v5_10c48, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_12030.257 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10c58 = load i32, i32* @r6, align 4
  %v1_10c58 = add i32 %v0_10c58, 4
  %v2_10c58 = inttoptr i32 %v1_10c58 to i32*
  %v3_10c58 = load i32, i32* %v2_10c58, align 4
  store i32 %v3_10c58, i32* %r0.global-to-local, align 4
  %v5_10c5c = call i32 @send(i32 %v3_10c58, i32* bitcast ([3 x i8]* @global_var_12030.257 to i32*), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_10c64 = call i32 @function_11080(i32 8)
  store i32 %v1_10c64, i32* %r0.global-to-local, align 4
  %v0_10c68 = load i32, i32* @r6, align 4
  %v1_10c68 = add i32 %v0_10c68, 24
  %v2_10c68 = inttoptr i32 %v1_10c68 to i32*
  %v3_10c68 = load i32, i32* %v2_10c68, align 4
  store i32 %v3_10c68, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_10c70 = add i32 %v0_10c68, 12
  %v3_10c70 = inttoptr i32 %v2_10c70 to i32*
  store i32 10, i32* %v3_10c70, align 4
  br label %dec_label_pc_10aec

dec_label_pc_10c78:                               ; preds = %dec_label_pc_10630
  %v1_10c78 = add i32 %v0_10630, 24
  %v2_10c78 = inttoptr i32 %v1_10c78 to i32*
  %v3_10c78 = load i32, i32* %v2_10c78, align 4
  store i32 %v3_10c78, i32* %ip.global-to-local, align 4
  %v1_10c7c = add i32 %v3_10c78, -1
  store i32 %v1_10c7c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10c80 = icmp eq i32 %v1_10c7c, 0
  store i1 %v2_10c80, i1* %cpsr_z.global-to-local, align 1
  %v5_10c84 = icmp sgt i32 %v1_10c7c, 0
  br i1 %v5_10c84, label %dec_label_pc_10cac, label %dec_label_pc_105b4.backedge.thread

dec_label_pc_10c8c:                               ; preds = %bb367
  %v2_10c8c = icmp ugt i8 %v3_10cb0, 35
  store i1 %v2_10c8c, i1* %cpsr_c.global-to-local, align 1
  %v7_10c8c = icmp eq i8 %v3_10cb0, 36
  store i1 %v7_10c8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c8c, label %dec_label_pc_10cc0, label %dec_label_pc_10c94

dec_label_pc_10c94:                               ; preds = %dec_label_pc_10c8c
  %v2_10c94 = icmp ugt i8 %v3_10cb0, 34
  store i1 %v2_10c94, i1* %cpsr_c.global-to-local, align 1
  %v7_10c94 = icmp eq i8 %v3_10cb0, 35
  store i1 %v7_10c94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c94, label %dec_label_pc_10cc0, label %dec_label_pc_10c9c

dec_label_pc_10c9c:                               ; preds = %dec_label_pc_10c94
  %v2_10c9c = icmp ugt i8 %v3_10cb0, 36
  store i1 %v2_10c9c, i1* %cpsr_c.global-to-local, align 1
  %v7_10c9c = icmp eq i8 %v3_10cb0, 37
  store i1 %v7_10c9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c9c, label %dec_label_pc_10cc0, label %dec_label_pc_10ca4

dec_label_pc_10ca4:                               ; preds = %dec_label_pc_10c9c
  %v1_10ca4 = add i32 %v0_10cc0, -1
  store i32 %v1_10ca4, i32* %r0.global-to-local, align 4
  %v2_10ca4 = icmp ne i32 %v0_10cc0, 0
  store i1 %v2_10ca4, i1* %cpsr_c.global-to-local, align 1
  %v7_10ca4 = icmp eq i32 %v0_10cc0, 1
  store i1 %v7_10ca4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ca4, label %dec_label_pc_105b4.backedge.thread501, label %dec_label_pc_10cac

dec_label_pc_10cac:                               ; preds = %dec_label_pc_10c78, %dec_label_pc_10ca4
  %v0_10cc0 = phi i32 [ %v1_10ca4, %dec_label_pc_10ca4 ], [ %v1_10c7c, %dec_label_pc_10c78 ]
  %v2_10cac = add i32 %v0_10cc0, %v0_10630
  store i32 %v2_10cac, i32* %r3.global-to-local, align 4
  %v1_10cb0 = add i32 %v2_10cac, 28
  %v2_10cb0 = inttoptr i32 %v1_10cb0 to i8*
  %v3_10cb0 = load i8, i8* %v2_10cb0, align 1
  %v4_10cb0 = zext i8 %v3_10cb0 to i32
  store i32 %v4_10cb0, i32* %r3.global-to-local, align 4
  %v2_10cb4 = icmp ugt i8 %v3_10cb0, 61
  store i1 %v2_10cb4, i1* %cpsr_c.global-to-local, align 1
  %v7_10cb4 = icmp eq i8 %v3_10cb0, 62
  store i1 %v7_10cb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10cb4, label %dec_label_pc_10cc0, label %bb367

bb367:                                            ; preds = %dec_label_pc_10cac
  %v3_10cb8 = icmp ugt i8 %v3_10cb0, 57
  store i1 %v3_10cb8, i1* %cpsr_c.global-to-local, align 1
  %v8_10cb8 = icmp eq i8 %v3_10cb0, 58
  store i1 %v8_10cb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10cb8, label %dec_label_pc_10cc0, label %dec_label_pc_10c8c

dec_label_pc_10cc0:                               ; preds = %dec_label_pc_10cac, %bb367, %dec_label_pc_10c9c, %dec_label_pc_10c94, %dec_label_pc_10c8c
  %v1_10cc0 = add i32 %v0_10cc0, 1
  store i32 %v1_10cc0, i32* @r7, align 4
  %v2_10cc4 = icmp eq i32 %v1_10cc0, -1
  store i1 %v2_10cc4, i1* %cpsr_c.global-to-local, align 1
  %v7_10cc4 = icmp eq i32 %v0_10cc0, -2
  store i1 %v7_10cc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10cc4, label %dec_label_pc_105b4.backedge.thread501, label %dec_label_pc_10ccc

dec_label_pc_10ccc:                               ; preds = %dec_label_pc_10cc0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10ccc = icmp eq i32 %v1_10cc0, 0
  store i1 %v2_10ccc, i1* %cpsr_z.global-to-local, align 1
  %tmp368 = icmp slt i32 %v1_10cc0, 1
  br i1 %tmp368, label %dec_label_pc_1073c, label %dec_label_pc_10cd4

dec_label_pc_10cd4:                               ; preds = %dec_label_pc_10ccc
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_10cd8 = call i32 @function_11138(i32 4)
  store i32 %v2_10a1c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v3_10ce8 = call i32 @function_11054(i32 4, i32* nonnull %stack_var_-48)
  store i32 %v3_10ce8, i32* %r0.global-to-local, align 4
  %v3_10cec = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10cec, i32* %r2.global-to-local, align 4
  store i32 %v3_10ce8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10cf8 = load i32, i32* @r6, align 4
  %v1_10cf8 = add i32 %v0_10cf8, 4
  %v2_10cf8 = inttoptr i32 %v1_10cf8 to i32*
  %v3_10cf8 = load i32, i32* %v2_10cf8, align 4
  store i32 %v3_10cf8, i32* %r0.global-to-local, align 4
  %v4_10cfc = inttoptr i32 %v3_10ce8 to i32*
  %v5_10cfc = call i32 @send(i32 %v3_10cf8, i32* %v4_10cfc, i32 %v3_10cec, i32 16384)
  store i32 %v5_10cfc, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_12030.257 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10d0c = load i32, i32* @r6, align 4
  %v1_10d0c = add i32 %v0_10d0c, 4
  %v2_10d0c = inttoptr i32 %v1_10d0c to i32*
  %v3_10d0c = load i32, i32* %v2_10d0c, align 4
  store i32 %v3_10d0c, i32* %r0.global-to-local, align 4
  %v5_10d10 = call i32 @send(i32 %v3_10d0c, i32* bitcast ([3 x i8]* @global_var_12030.257 to i32*), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_10d18 = call i32 @function_11080(i32 4)
  store i32 %v1_10d18, i32* %r0.global-to-local, align 4
  %v0_10d1c = load i32, i32* @r6, align 4
  %v1_10d1c = add i32 %v0_10d1c, 24
  %v2_10d1c = inttoptr i32 %v1_10d1c to i32*
  %v3_10d1c = load i32, i32* %v2_10d1c, align 4
  store i32 %v3_10d1c, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_10d24 = add i32 %v0_10d1c, 12
  %v3_10d24 = inttoptr i32 %v2_10d24 to i32*
  store i32 8, i32* %v3_10d24, align 4
  br label %dec_label_pc_10aec

dec_label_pc_10d2c:                               ; preds = %dec_label_pc_106b4
  store i32 ptrtoint (i32* @global_var_12042.259 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 %v2_10d38, i32* %r0.global-to-local, align 4
  %v5_10d3c = call i32* @memcpy(i32* nonnull %stack_var_-41, i32* nonnull @global_var_12042.259, i32 3)
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v2_10d48, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12039.261 to i32), i32* %r1.global-to-local, align 4
  %v5_10d50 = call i32* @memcpy(i32* nonnull %stack_var_-73, i32* nonnull @global_var_12039.261, i32 9)
  %v7_10d50 = ptrtoint i32* %v5_10d50 to i32
  store i32 %v7_10d50, i32* %r0.global-to-local, align 4
  %v0_10d54 = load i32, i32* @r6, align 4
  %v1_10d54 = add i32 %v0_10d54, 24
  %v2_10d54 = inttoptr i32 %v1_10d54 to i32*
  %v3_10d54 = load i32, i32* %v2_10d54, align 4
  store i32 %v3_10d54, i32* %ip.global-to-local, align 4
  %v0_10d58 = load i32, i32* @r5, align 4
  %v1_10d58 = add i32 %v0_10d58, 2
  store i32 %v1_10d58, i32* %r2.global-to-local, align 4
  %v0_10d5c = load i32, i32* %r8.global-to-local, align 4
  %v2_10d5c = add i32 %v0_10d5c, %v3_10d54
  store i32 %v2_10d5c, i32* %r3.global-to-local, align 4
  %v3_10d60 = icmp uge i32 %v2_10d5c, %v1_10d58
  store i1 %v3_10d60, i1* %cpsr_c.global-to-local, align 1
  %v9_10d60 = icmp eq i32 %v2_10d5c, %v1_10d58
  store i1 %v9_10d60, i1* %cpsr_z.global-to-local, align 1
  %v2_10d64 = xor i1 %v3_10d60, true
  %v3_10d64 = or i1 %v9_10d60, %v2_10d64
  br i1 %v3_10d64, label %dec_label_pc_10d2c.dec_label_pc_1072c.loopexit_crit_edge, label %dec_label_pc_10d68

dec_label_pc_10d2c.dec_label_pc_1072c.loopexit_crit_edge: ; preds = %dec_label_pc_10d2c
  %v0_1072c.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1072c

dec_label_pc_10d68:                               ; preds = %dec_label_pc_10d2c
  %v0_10d68 = load i32, i32* @r4, align 4
  %v1_10d68 = add i32 %v0_10d68, 1
  %v2_10d68 = inttoptr i32 %v1_10d68 to i8*
  %v3_10d68 = load i8, i8* %v2_10d68, align 1
  %v4_10d68 = zext i8 %v3_10d68 to i32
  store i32 %v4_10d68, i32* %r3.global-to-local, align 4
  %v2_10d6c = icmp ugt i8 %v3_10d68, 30
  store i1 %v2_10d6c, i1* %cpsr_c.global-to-local, align 1
  %v7_10d6c = icmp eq i8 %v3_10d68, 31
  store i1 %v7_10d6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d6c, label %dec_label_pc_10ef8, label %dec_label_pc_10d74

dec_label_pc_10d74:                               ; preds = %dec_label_pc_10d68
  %v1_10d74 = add i32 %v0_10d68, -1
  %v2_10d74 = inttoptr i32 %v1_10d74 to i8*
  %v3_10d74 = load i8, i8* %v2_10d74, align 1
  %v4_10d74 = zext i8 %v3_10d74 to i32
  store i32 %v4_10d74, i32* %r3.global-to-local, align 4
  %v2_10d78 = icmp ugt i8 %v3_10d74, -4
  store i1 %v2_10d78, i1* %cpsr_c.global-to-local, align 1
  %v7_10d78 = icmp eq i8 %v3_10d74, -3
  store i1 %v7_10d78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d78, label %bb369, label %dec_label_pc_10d84

bb369:                                            ; preds = %dec_label_pc_10d74
  %v1_10d7c = load i32, i32* %sl.global-to-local, align 4
  %v2_10d7c = trunc i32 %v1_10d7c to i8
  store i8 %v2_10d7c, i8* %v2_10d74, align 1
  %v0_10d80.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10d80.pr, label %dec_label_pc_106c8, label %.dec_label_pc_10d84_crit_edge

.dec_label_pc_10d84_crit_edge:                    ; preds = %bb369
  %v0_10d84.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10d84

dec_label_pc_10d84:                               ; preds = %.dec_label_pc_10d84_crit_edge, %dec_label_pc_10d74
  %v0_10d84 = phi i32 [ %v0_10d84.pre, %.dec_label_pc_10d84_crit_edge ], [ %v4_10d74, %dec_label_pc_10d74 ]
  %v2_10d84 = icmp ugt i32 %v0_10d84, 250
  store i1 %v2_10d84, i1* %cpsr_c.global-to-local, align 1
  %v7_10d84 = icmp eq i32 %v0_10d84, 251
  store i1 %v7_10d84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d84, label %bb370, label %dec_label_pc_106c8

bb370:                                            ; preds = %dec_label_pc_10d84
  store i32 -3, i32* %r2.global-to-local, align 4
  %v3_10d8c = load i32, i32* @r4, align 4
  %v4_10d8c = add i32 %v3_10d8c, -1
  %v5_10d8c = inttoptr i32 %v4_10d8c to i8*
  store i8 -3, i8* %v5_10d8c, align 1
  br label %dec_label_pc_106c8

dec_label_pc_10d94:                               ; preds = %dec_label_pc_10818, %dec_label_pc_107f4, %dec_label_pc_10834
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10d98 = call i32 @function_11138(i32 25)
  store i32 %v2_10524, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_10da8 = call i32 @function_11054(i32 25, i32* nonnull %stack_var_-56)
  %v3_10dac = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10da8, i32* %r2.global-to-local, align 4
  %v1_10db4 = add i32 %v3_10dac, -1
  store i32 %v1_10db4, i32* %r3.global-to-local, align 4
  %v0_10db8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10db8, i32* %r0.global-to-local, align 4
  %v0_10dbc = load i32, i32* @r6, align 4
  %v1_10dbc = add i32 %v0_10dbc, 24
  %v2_10dbc = inttoptr i32 %v1_10dbc to i32*
  %v3_10dbc = load i32, i32* %v2_10dbc, align 4
  store i32 %v3_10dbc, i32* %r1.global-to-local, align 4
  %v4_10dc0 = call i32 @function_117c8(i32 %v0_10db8, i32 %v3_10dbc, i32 %v3_10da8, i32 %v1_10db4)
  store i32 %v4_10dc0, i32* %r0.global-to-local, align 4
  %v1_10dc4 = add i32 %v4_10dc0, 1
  store i32 %v1_10dc4, i32* @r7, align 4
  %v2_10dc4 = icmp eq i32 %v4_10dc0, -1
  store i1 %v2_10dc4, i1* %cpsr_c.global-to-local, align 1
  %v7_10dc4 = icmp eq i32 %v1_10dc4, 0
  store i1 %v7_10dc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10dc4, label %thread-pre-split100, label %bb371

bb371:                                            ; preds = %dec_label_pc_10d94
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split100

thread-pre-split100:                              ; preds = %dec_label_pc_10d94, %bb371
  %v0_10dcc = phi i1 [ false, %bb371 ], [ true, %dec_label_pc_10d94 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_10dcc, i1* %cpsr_z.global-to-local, align 1
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10f60 = call i32 @function_11080(i32 25)
  store i32 %v1_10f60, i32* %r0.global-to-local, align 4
  br i1 %v0_10dcc, label %dec_label_pc_10f5c, label %dec_label_pc_10dd4

dec_label_pc_10dd4:                               ; preds = %thread-pre-split100
  %v0_10ddc = load i32, i32* @r7, align 4
  %v3_10ddc = icmp eq i32 %v0_10ddc, -1
  store i1 %v3_10ddc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10ddc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10ddc, label %dec_label_pc_105b0.loopexit, label %dec_label_pc_10848

dec_label_pc_10de8:                               ; preds = %dec_label_pc_10a68
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_10df4 = call i32 @function_11138(i32 9)
  store i32 %v2_10524, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_10e04 = call i32 @function_11054(i32 9, i32* nonnull %stack_var_-56)
  store i32 %v3_10e04, i32* %r0.global-to-local, align 4
  %v3_10e08 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10e04, i32* %r2.global-to-local, align 4
  %v1_10e10 = add i32 %v3_10e08, -1
  store i32 %v1_10e10, i32* %r3.global-to-local, align 4
  %v0_10e14 = load i32, i32* @r6, align 4
  %v1_10e14 = add i32 %v0_10e14, 24
  %v2_10e14 = inttoptr i32 %v1_10e14 to i32*
  %v3_10e14 = load i32, i32* %v2_10e14, align 4
  store i32 %v3_10e14, i32* %r1.global-to-local, align 4
  %v0_10e18 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10e18, i32* %r0.global-to-local, align 4
  %v4_10e1c = call i32 @function_117c8(i32 %v0_10e18, i32 %v3_10e14, i32 %v3_10e04, i32 %v1_10e10)
  store i32 %v4_10e1c, i32* @r7, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_10e28 = call i32 @function_11080(i32 9)
  store i32 %v1_10e28, i32* %r0.global-to-local, align 4
  %v0_10e2c = load i32, i32* @r7, align 4
  %v2_10e2c = icmp eq i32 %v0_10e2c, -1
  store i1 %v2_10e2c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_10e2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10e2c, label %dec_label_pc_105b0.loopexit, label %dec_label_pc_10e34

dec_label_pc_10e34:                               ; preds = %dec_label_pc_10de8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e34 = icmp eq i32 %v0_10e2c, 0
  store i1 %v2_10e34, i1* %cpsr_z.global-to-local, align 1
  %tmp372 = icmp slt i32 %v0_10e2c, 1
  br i1 %tmp372, label %dec_label_pc_1073c, label %dec_label_pc_10e3c

dec_label_pc_10e3c:                               ; preds = %dec_label_pc_10e34
  %v0_10e3c = load i32, i32* @r6, align 4
  %v1_10e3c = add i32 %v0_10e3c, 21
  %v2_10e3c = inttoptr i32 %v1_10e3c to i8*
  %v3_10e3c = load i8, i8* %v2_10e3c, align 1
  %v4_10e3c = zext i8 %v3_10e3c to i32
  store i32 %v4_10e3c, i32* %r3.global-to-local, align 4
  %v1_10e40 = add i32 %v0_10e3c, 20
  %v2_10e40 = inttoptr i32 %v1_10e40 to i8*
  %v3_10e40 = load i8, i8* %v2_10e40, align 1
  %v4_10e40 = zext i8 %v3_10e40 to i32
  store i32 %v4_10e40, i32* %r2.global-to-local, align 4
  %v1_10e44 = add i32 %v0_10e3c, 16
  %v2_10e44 = inttoptr i32 %v1_10e44 to i32*
  %v3_10e44 = load i32, i32* %v2_10e44, align 4
  store i32 %v3_10e44, i32* %r1.global-to-local, align 4
  %v4_10e48 = mul nuw nsw i32 %v4_10e3c, 256
  %v5_10e48 = or i32 %v4_10e40, %v4_10e48
  store i32 %v5_10e48, i32* %r2.global-to-local, align 4
  %v1_10e4c = and i32 %v4_10e40, 128
  %v2_10e4c = icmp ne i32 %v1_10e4c, 0
  store i1 %v2_10e4c, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_10e3c, i32* %r3.global-to-local, align 4
  store i32 %v3_10e44, i32* %stack_var_-48, align 4
  store i32 %v5_10e48, i32* %stack_var_-38, align 4
  %v1_10e5c = inttoptr i32 %v0_10e3c to i32*
  %v2_10e5c = load i32, i32* %v1_10e5c, align 4
  store i32 %v2_10e5c, i32* %sl.global-to-local, align 4
  %v0_10e60 = call i32 @fork()
  store i32 %v0_10e60, i32* %r0.global-to-local, align 4
  %v2_10e64 = icmp eq i32 %v0_10e60, -1
  %.385 = zext i1 %v2_10e64 to i32
  store i32 %.385, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e70 = icmp eq i32 %v0_10e60, 0
  store i1 %v2_10e70, i1* %cpsr_z.global-to-local, align 1
  %tmp375 = icmp slt i32 %v0_10e60, 1
  br i1 %tmp375, label %bb376, label %.thread103

.thread103:                                       ; preds = %dec_label_pc_10e3c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10e84

bb376:                                            ; preds = %dec_label_pc_10e3c
  store i32 %.385, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e7c = icmp eq i1 %v2_10e64, false
  store i1 %v2_10e7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10e7c, label %dec_label_pc_10fc4, label %dec_label_pc_10e84

dec_label_pc_10e84:                               ; preds = %.thread103, %bb376
  %v0_10e84 = load i32, i32* @r6, align 4
  %v1_10e84 = add i32 %v0_10e84, 4
  %v2_10e84 = inttoptr i32 %v1_10e84 to i32*
  %v3_10e84 = load i32, i32* %v2_10e84, align 4
  store i32 %v3_10e84, i32* %r0.global-to-local, align 4
  %v1_10e88 = call i32 @close(i32 %v3_10e84)
  store i32 %v1_10e88, i32* %r0.global-to-local, align 4
  %v0_10e8c = load i32, i32* @r6, align 4
  %v1_10e8c = add i32 %v0_10e8c, 24
  %v2_10e8c = inttoptr i32 %v1_10e8c to i32*
  %v3_10e8c = load i32, i32* %v2_10e8c, align 4
  store i32 %v3_10e8c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_10e94 = load i32, i32* @r4, align 4
  %v2_10e94 = add i32 %v0_10e8c, 4
  %v3_10e94 = inttoptr i32 %v2_10e94 to i32*
  store i32 %v0_10e94, i32* %v3_10e94, align 4
  %v0_10e98 = load i32, i32* %r2.global-to-local, align 4
  %v1_10e98 = load i32, i32* @r6, align 4
  %v2_10e98 = add i32 %v1_10e98, 12
  %v3_10e98 = inttoptr i32 %v2_10e98 to i32*
  store i32 %v0_10e98, i32* %v3_10e98, align 4
  br label %dec_label_pc_10aec

dec_label_pc_10ea0:                               ; preds = %dec_label_pc_105cc
  br i1 %v2_105f0, label %dec_label_pc_10f6c, label %dec_label_pc_10ea4

dec_label_pc_10ea4:                               ; preds = %dec_label_pc_10ea0
  %v3_10ea4 = icmp eq i32 %v5_105ec, -1
  store i1 %v3_10ea4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10ea4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10ea4, label %dec_label_pc_10eac, label %dec_label_pc_10618

dec_label_pc_10eac:                               ; preds = %dec_label_pc_10ea4
  %v0_10eac = load i32, i32* @sb, align 4
  %v1_10eac = inttoptr i32 %v0_10eac to i32*
  %v2_10eac = load i32, i32* %v1_10eac, align 4
  store i32 %v2_10eac, i32* %r3.global-to-local, align 4
  %v2_10eb0 = icmp ugt i32 %v2_10eac, 10
  store i1 %v2_10eb0, i1* %cpsr_c.global-to-local, align 1
  %v7_10eb0 = icmp eq i32 %v2_10eac, 11
  store i1 %v7_10eb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10eb0, label %dec_label_pc_103e8, label %dec_label_pc_10eb8

dec_label_pc_10eb8:                               ; preds = %dec_label_pc_10eac, %dec_label_pc_10f6c
  %v0_10eb8 = load i32, i32* @r6, align 4
  %v1_10eb8 = add i32 %v0_10eb8, 4
  %v2_10eb8 = inttoptr i32 %v1_10eb8 to i32*
  %v3_10eb8 = load i32, i32* %v2_10eb8, align 4
  store i32 %v3_10eb8, i32* %r0.global-to-local, align 4
  %v1_10ebc = call i32 @close(i32 %v3_10eb8)
  store i32 %v1_10ebc, i32* %r0.global-to-local, align 4
  %v0_10ec0 = load i32, i32* @r6, align 4
  %v1_10ec0 = add i32 %v0_10ec0, 284
  %v2_10ec0 = inttoptr i32 %v1_10ec0 to i8*
  %v3_10ec0 = load i8, i8* %v2_10ec0, align 1
  %v4_10ec0 = zext i8 %v3_10ec0 to i32
  %v1_10ec4 = add nuw nsw i32 %v4_10ec0, 1
  %v1_10ec8 = urem i32 %v1_10ec4, 256
  store i32 %v1_10ec8, i32* %r3.global-to-local, align 4
  %v2_10ecc = icmp ugt i32 %v1_10ec8, 8
  store i1 %v2_10ecc, i1* %cpsr_c.global-to-local, align 1
  %v7_10ecc = icmp eq i32 %v1_10ec8, 9
  store i1 %v7_10ecc, i1* %cpsr_z.global-to-local, align 1
  %v2_10ed0 = xor i1 %v7_10ecc, true
  %v3_10ed0 = and i1 %v2_10ecc, %v2_10ed0
  br i1 %v3_10ed0, label %bb377, label %bb378

bb377:                                            ; preds = %dec_label_pc_10eb8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb378

bb378:                                            ; preds = %dec_label_pc_10eb8, %bb377
  store i32 -1, i32* @r4, align 4
  %v1_10ed8 = trunc i32 %v1_10ec4 to i8
  store i8 %v1_10ed8, i8* %v2_10ec0, align 1
  %v0_10edc = load i32, i32* @r4, align 4
  %v1_10edc = load i32, i32* @r6, align 4
  %v2_10edc = add i32 %v1_10edc, 4
  %v3_10edc = inttoptr i32 %v2_10edc to i32*
  store i32 %v0_10edc, i32* %v3_10edc, align 4
  %v0_10ee0 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_10ee0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_10ee0 = xor i1 %v1_10ee0, true
  %v3_10ee0 = and i1 %v0_10ee0, %v2_10ee0
  br i1 %v3_10ee0, label %bb379, label %.thread241

bb379:                                            ; preds = %bb378
  %v4_10ee0 = load i32, i32* %r0.global-to-local, align 4
  %v5_10ee0 = load i32, i32* @r6, align 4
  %v6_10ee0 = add i32 %v5_10ee0, 12
  %v7_10ee0 = inttoptr i32 %v6_10ee0 to i32*
  store i32 %v4_10ee0, i32* %v7_10ee0, align 4
  %v4_10ee4 = load i32, i32* %r0.global-to-local, align 4
  %v5_10ee4 = trunc i32 %v4_10ee4 to i8
  %v6_10ee4 = load i32, i32* @r6, align 4
  %v7_10ee4 = add i32 %v6_10ee4, 284
  %v8_10ee4 = inttoptr i32 %v7_10ee4 to i8*
  store i8 %v5_10ee4, i8* %v8_10ee4, align 1
  %v0_10ee8.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_10ee8.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread241

.thread241:                                       ; preds = %bb378, %bb379
  %v1_10ee8 = phi i1 [ %v1_10ee8.pre, %bb379 ], [ %v1_10ee0, %bb378 ]
  %v0_10ee8 = phi i1 [ %v0_10ee8.pre, %bb379 ], [ %v0_10ee0, %bb378 ]
  %v2_10ee8 = xor i1 %v1_10ee8, true
  %v3_10ee8 = and i1 %v0_10ee8, %v2_10ee8
  br i1 %v3_10ee8, label %dec_label_pc_103e8, label %dec_label_pc_10eec

dec_label_pc_10eec:                               ; preds = %.thread241
  %v0_10eec = load i32, i32* @r6, align 4
  store i32 %v0_10eec, i32* @r0, align 4
  %v0_10ef0 = call i32 @function_f6cc()
  store i32 %v0_10ef0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_103e8

dec_label_pc_10ef8:                               ; preds = %dec_label_pc_10d68
  store i32 %v2_10d38, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_10f08 = add i32 %v0_10d54, 4
  %v2_10f08 = inttoptr i32 %v1_10f08 to i32*
  %v3_10f08 = load i32, i32* %v2_10f08, align 4
  store i32 %v3_10f08, i32* %r0.global-to-local, align 4
  %v5_10f0c = call i32 @send(i32 %v3_10f08, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_10f0c, i32* %r0.global-to-local, align 4
  store i32 %v2_1037c, i32* %r1.global-to-local, align 4
  %v0_10f14 = load i32, i32* @r6, align 4
  %v1_10f14 = add i32 %v0_10f14, 4
  %v2_10f14 = inttoptr i32 %v1_10f14 to i32*
  %v3_10f14 = load i32, i32* %v2_10f14, align 4
  store i32 %v3_10f14, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1070c

dec_label_pc_10f24:                               ; preds = %dec_label_pc_105bc
  store i32 %.pre, i32* %r0.global-to-local, align 4
  %v1_10f2c = add i32 %v0_10f24, 92
  store i32 %v1_10f2c, i32* %r1.global-to-local, align 4
  store i32 192, i32* %r2.global-to-local, align 4
  %v3_10f34 = inttoptr i32 %.pre to i32*
  %v4_10f34 = inttoptr i32 %v1_10f2c to i32*
  %v5_10f34 = call i32* @memmove(i32* %v3_10f34, i32* %v4_10f34, i32 192)
  %v7_10f34 = ptrtoint i32* %v5_10f34 to i32
  store i32 %v7_10f34, i32* %r0.global-to-local, align 4
  %v0_10f38 = load i32, i32* @r6, align 4
  %v1_10f38 = add i32 %v0_10f38, 24
  %v2_10f38 = inttoptr i32 %v1_10f38 to i32*
  %v3_10f38 = load i32, i32* %v2_10f38, align 4
  store i32 %v3_10f38, i32* %r3.global-to-local, align 4
  %v1_10f3c = add i32 %v3_10f38, -64
  store i32 %v1_10f3c, i32* %ip.global-to-local, align 4
  store i32 %v1_10f3c, i32* %v2_10f38, align 4
  br label %dec_label_pc_105cc

dec_label_pc_10f48:                               ; preds = %dec_label_pc_10aa4
  %v0_10f48 = load i32, i32* @r6, align 4
  store i32 %v0_10f48, i32* @r0, align 4
  %v0_10f4c = call i32 @function_f6cc()
  store i32 %v0_10f4c, i32* %r0.global-to-local, align 4
  %v0_10f50 = load i32, i32* @r6, align 4
  %v1_10f50 = add i32 %v0_10f50, 24
  %v2_10f50 = inttoptr i32 %v1_10f50 to i32*
  %v3_10f50 = load i32, i32* %v2_10f50, align 4
  store i32 %v3_10f50, i32* %ip.global-to-local, align 4
  %v0_10f54 = load i32, i32* @r4, align 4
  store i32 %v0_10f54, i32* @r7, align 4
  br label %dec_label_pc_10aec

dec_label_pc_10f5c:                               ; preds = %thread-pre-split100
  %v0_10f64 = load i32, i32* @r6, align 4
  %v1_10f64 = add i32 %v0_10f64, 12
  %v2_10f64 = inttoptr i32 %v1_10f64 to i32*
  %v3_10f64 = load i32, i32* %v2_10f64, align 4
  br label %dec_label_pc_105b4.backedge

dec_label_pc_10f6c:                               ; preds = %dec_label_pc_10ea0
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_10f70 = load i32, i32* @sb, align 4
  %v2_10f70 = inttoptr i32 %v1_10f70 to i32*
  store i32 104, i32* %v2_10f70, align 4
  br label %dec_label_pc_10eb8

dec_label_pc_10f78:                               ; preds = %dec_label_pc_104d0, %dec_label_pc_10488
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10f7c

dec_label_pc_10f7c:                               ; preds = %dec_label_pc_104f8, %dec_label_pc_10f78
  %v0_10f84 = phi i32 [ 0, %dec_label_pc_10f78 ], [ %v0_104d8, %dec_label_pc_104f8 ]
  %v0_10f7c = load i32, i32* @r6, align 4
  %v1_10f7c = add i32 %v0_10f7c, 4
  %v2_10f7c = inttoptr i32 %v1_10f7c to i32*
  %v3_10f7c = load i32, i32* %v2_10f7c, align 4
  store i32 %v3_10f7c, i32* %r4.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_10f84 = inttoptr i32 %v0_10f7c to i32*
  store i32 %v0_10f84, i32* %v2_10f84, align 4
  %v0_10f88 = load i32, i32* %ip.global-to-local, align 4
  %v1_10f88 = load i32, i32* @r6, align 4
  %v2_10f88 = add i32 %v1_10f88, 24
  %v3_10f88 = inttoptr i32 %v2_10f88 to i32*
  store i32 %v0_10f88, i32* %v3_10f88, align 4
  %v0_103c0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_103c0

dec_label_pc_10f90:                               ; preds = %dec_label_pc_10448
  %v0_10f90 = load i32, i32* @r6, align 4
  %v1_10f90 = add i32 %v0_10f90, 4
  %v2_10f90 = inttoptr i32 %v1_10f90 to i32*
  %v3_10f90 = load i32, i32* %v2_10f90, align 4
  store i32 %v3_10f90, i32* %r0.global-to-local, align 4
  %v1_10f94 = call i32 @close(i32 %v3_10f90)
  store i32 %v1_10f94, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_10f9c = load i32, i32* @r5, align 4
  %v1_10f9c = load i32, i32* @r6, align 4
  %v2_10f9c = add i32 %v1_10f9c, 12
  %v3_10f9c = inttoptr i32 %v2_10f9c to i32*
  store i32 %v0_10f9c, i32* %v3_10f9c, align 4
  %v0_10fa0 = load i32, i32* %r4.global-to-local, align 4
  %v1_10fa0 = load i32, i32* @r6, align 4
  %v2_10fa0 = add i32 %v1_10fa0, 4
  %v3_10fa0 = inttoptr i32 %v2_10fa0 to i32*
  store i32 %v0_10fa0, i32* %v3_10fa0, align 4
  %v0_10fa4 = load i32, i32* @r5, align 4
  %v1_10fa4 = trunc i32 %v0_10fa4 to i8
  %v2_10fa4 = load i32, i32* @r6, align 4
  %v3_10fa4 = add i32 %v2_10fa4, 284
  %v4_10fa4 = inttoptr i32 %v3_10fa4 to i8*
  store i8 %v1_10fa4, i8* %v4_10fa4, align 1
  br label %dec_label_pc_103e8

dec_label_pc_10fac:                               ; preds = %dec_label_pc_10570
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_10fb0 = call i32 @function_11080(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_10fb8 = call i32 @function_11080(i32 27)
  store i32 %v1_10fb8, i32* %r0.global-to-local, align 4
  %v0_10fbc = load i32, i32* @r6, align 4
  %v1_10fbc = add i32 %v0_10fbc, 12
  %v2_10fbc = inttoptr i32 %v1_10fbc to i32*
  %v3_10fbc = load i32, i32* %v2_10fbc, align 4
  br label %dec_label_pc_105b4.backedge

dec_label_pc_105b4.backedge.thread:               ; preds = %dec_label_pc_1088c, %dec_label_pc_109b4, %dec_label_pc_10b10, %dec_label_pc_10bc4, %dec_label_pc_10c78
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_105bc

dec_label_pc_105b4.backedge.thread501:            ; preds = %dec_label_pc_108b8, %dec_label_pc_109e0, %dec_label_pc_10ca4, %dec_label_pc_10b3c, %dec_label_pc_10bf0, %dec_label_pc_108d4, %dec_label_pc_109fc, %dec_label_pc_10b58, %dec_label_pc_10c0c, %dec_label_pc_10cc0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_105bc

dec_label_pc_105b4.backedge:                      ; preds = %dec_label_pc_10fac, %dec_label_pc_10f5c
  %storemerge503 = phi i32 [ %v3_10f64, %dec_label_pc_10f5c ], [ %v3_10fbc, %dec_label_pc_10fac ]
  %v0_105b4.be = phi i32 [ %v3_10f64, %dec_label_pc_10f5c ], [ %v3_10fbc, %dec_label_pc_10fac ]
  %v0_105bc158 = phi i32 [ %v0_10f64, %dec_label_pc_10f5c ], [ %v0_10fbc, %dec_label_pc_10fac ]
  store i32 %storemerge503, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_105b4 = icmp eq i32 %v0_105b4.be, 0
  store i1 %v2_105b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_105b4, label %dec_label_pc_103e8, label %dec_label_pc_105bc

dec_label_pc_10fc4:                               ; preds = %bb376
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_10fd0 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_10fd0, i32* %r0.global-to-local, align 4
  %v2_10fd4 = icmp eq i32 %v3_10fd0, -1
  store i1 %v2_10fd4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_10fd4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_10fd0, i32* @r4, align 4
  br i1 %v2_10fd4, label %dec_label_pc_101e8, label %dec_label_pc_10fe0

dec_label_pc_10fe0:                               ; preds = %dec_label_pc_10fc4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_10fe4 = call i32 @function_11138(i32 2)
  store i32 2, i32* @r6, align 4
  store i32 ptrtoint ([12 x i8]* @global_var_11f98.133 to i32), i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_10ff8 = call i32 @inet_addr(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_11f98.133, i32 0, i32 0))
  %v0_10ffc = load i32, i32* @r5, align 4
  store i32 %v0_10ffc, i32* %r1.global-to-local, align 4
  %v0_11004 = load i32, i32* @r6, align 4
  store i32 %v0_11004, i32* %r0.global-to-local, align 4
  %v2_11008 = inttoptr i32 %v0_10ffc to i32*
  %v3_11008 = call i32 @function_11054(i32 %v0_11004, i32* %v2_11008)
  %v4_11008 = inttoptr i32 %v3_11008 to i8*
  store i32 %v3_11008, i32* %r0.global-to-local, align 4
  %v2_1100c = add i32 %v3_11008, 1
  %v3_1100c = inttoptr i32 %v2_1100c to i8*
  %v4_1100c = load i8, i8* %v3_1100c, align 1
  %v5_1100c = zext i8 %v4_1100c to i32
  store i32 %v5_1100c, i32* %r2.global-to-local, align 4
  %v3_11010 = load i8, i8* %v4_11008, align 1
  %v4_11010 = zext i8 %v3_11010 to i32
  %v4_11014 = mul nuw nsw i32 %v5_1100c, 256
  %v5_11014 = or i32 %v4_11010, %v4_11014
  store i32 %v5_11014, i32* %r3.global-to-local, align 4
  %v1_11018 = and i32 %v4_11010, 128
  %v2_11018 = icmp ne i32 %v1_11018, 0
  store i1 %v2_11018, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_1100c, i32* %r1.global-to-local, align 4
  %v0_1101c = load i32, i32* @r6, align 4
  store i32 %v0_1101c, i32* %r0.global-to-local, align 4
  %v1_11028 = call i32 @function_11080(i32 %v0_1101c)
  %v0_1102c = load i32, i32* @r4, align 4
  store i32 %v0_1102c, i32* %r0.global-to-local, align 4
  store i32 %v2_ff70, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v5_11038 = call i32 @connect(i32 %v0_1102c, %sockaddr* %tmp298, i32 16)
  store i32 %v5_11038, i32* %r0.global-to-local, align 4
  %v3_1103c = icmp eq i32 %v5_11038, -1
  store i1 %v3_1103c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_1103c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1103c, label %dec_label_pc_11044, label %dec_label_pc_10144

dec_label_pc_11044:                               ; preds = %dec_label_pc_10fe0
  %v0_11044 = load i32, i32* @r4, align 4
  store i32 %v0_11044, i32* %r0.global-to-local, align 4
  %v1_11048 = call i32 @close(i32 %v0_11044)
  %v0_1104c = load i32, i32* @r5, align 4
  store i32 %v0_1104c, i32* %r0.global-to-local, align 4
  call void @exit(i32 %v0_1104c)
  unreachable

; uselistorder directives
  uselistorder i1 %v3_1103c, { 1, 0, 2 }
  uselistorder i32 %v4_11010, { 1, 0 }
  uselistorder i32 %v5_1100c, { 1, 0, 2 }
  uselistorder i32 %v3_10fbc, { 1, 0 }
  uselistorder i32 %v3_10f64, { 1, 0 }
  uselistorder i1 %v1_10ee0, { 1, 0 }
  uselistorder i32 %v1_10ec8, { 2, 1, 0 }
  uselistorder i32 %v1_10ec4, { 1, 0 }
  uselistorder i1 %v3_10ea4, { 1, 0, 2 }
  uselistorder i1 %v2_10e7c, { 1, 0 }
  uselistorder i32 %.385, { 1, 0 }
  uselistorder i1 %v2_10e64, { 1, 0 }
  uselistorder i32 %v0_10e60, { 1, 0, 2, 3 }
  uselistorder i32 %v4_10e40, { 1, 0, 2 }
  uselistorder i32 %v4_10e3c, { 1, 0, 2 }
  uselistorder i32 %v0_10e2c, { 2, 1, 3, 0 }
  uselistorder i1 %v3_10ddc, { 1, 0, 2 }
  uselistorder i32 %v0_10ddc, { 1, 0 }
  uselistorder i1 %v0_10dcc, { 1, 0 }
  uselistorder i32 %v4_10dc0, { 1, 0, 2 }
  uselistorder i32 %v0_10d54, { 1, 2, 0 }
  uselistorder i1 %v7_10cc4, { 1, 0 }
  uselistorder i32 %v1_10cc0, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10cb8, { 1, 0 }
  uselistorder i8 %v3_10cb0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10cc0, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10c9c, { 1, 0 }
  uselistorder i1 %v7_10c94, { 1, 0 }
  uselistorder i1 %v7_10c8c, { 1, 0 }
  uselistorder i1 %v7_10c10, { 1, 0 }
  uselistorder i32 %v1_10c0c, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10c04, { 1, 0 }
  uselistorder i8 %v3_10bfc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10c0c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10be8, { 1, 0 }
  uselistorder i1 %v7_10be0, { 1, 0 }
  uselistorder i1 %v7_10bd8, { 1, 0 }
  uselistorder i1 %v7_10b5c, { 1, 0 }
  uselistorder i32 %v1_10b58, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10b50, { 1, 0 }
  uselistorder i8 %v3_10b48, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10b58, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10b34, { 1, 0 }
  uselistorder i1 %v7_10b2c, { 1, 0 }
  uselistorder i1 %v7_10b24, { 1, 0 }
  uselistorder i32 %v0_10b00, { 1, 2, 0 }
  uselistorder i32 %v2_10aec, { 1, 0 }
  uselistorder i32 %v1_10aec, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_10aec, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i32 %v1_10abc, { 2, 1, 0 }
  uselistorder i1 %v7_10a00, { 1, 0 }
  uselistorder i32 %v1_109fc, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_109f4, { 1, 0 }
  uselistorder i8 %v3_109ec, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_109fc, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_109d8, { 1, 0 }
  uselistorder i1 %v7_109d0, { 1, 0 }
  uselistorder i1 %v7_109c8, { 1, 0 }
  uselistorder i1 %v7_108d8, { 1, 0 }
  uselistorder i32 %v1_108d4, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_108cc, { 1, 0 }
  uselistorder i8 %v3_108c4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_108d4, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_108b0, { 1, 0 }
  uselistorder i1 %v7_108a8, { 1, 0 }
  uselistorder i1 %v7_108a0, { 1, 0 }
  uselistorder i32 %v0_10848, { 2, 1, 0 }
  uselistorder i1 %v7_10838, { 1, 0 }
  uselistorder i1 %v8_1082c, { 1, 0 }
  uselistorder i8 %v3_10824, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_10834, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10810, { 1, 0 }
  uselistorder i1 %v7_10808, { 1, 0 }
  uselistorder i32 %v0_107b0, { 2, 1, 0 }
  uselistorder i1 %v7_10798, { 1, 0 }
  uselistorder i1 %v8_1078c, { 1, 0 }
  uselistorder i8 %v3_10784, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10794, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10770, { 1, 0 }
  uselistorder i1 %v7_10768, { 1, 0 }
  uselistorder i1 %v7_10760, { 1, 0 }
  uselistorder i32 %v0_1072c, { 0, 2, 1 }
  uselistorder i32 %v1_10724, { 1, 0 }
  uselistorder i32 %v1_10720, { 1, 0 }
  uselistorder i32 %v1_10718, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_10714, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_10714, { 0, 2, 1 }
  uselistorder i1 %v7_106b4, { 1, 0 }
  uselistorder i1 %v2_106a0, { 1, 0, 2 }
  uselistorder i1 %v2_10688, { 1, 0, 2 }
  uselistorder i32 %v1_106a8, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_1067c, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_106a4, { 1, 0 }
  uselistorder i32 %v2_106ac, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v3_10668, { 0, 2, 1, 3 }
  uselistorder i32 %v0_10630, { 3, 16, 4, 18, 5, 17, 6, 15, 7, 14, 8, 13, 9, 12, 2, 10, 11, 19, 1, 0 }
  uselistorder i32 %v1_1060c, { 1, 2, 3, 0 }
  uselistorder i32 %v3_10608, { 1, 0 }
  uselistorder i32 %v5_105ec, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v2_105d8, { 1, 0, 2 }
  uselistorder i32 %v3_105d4, { 1, 0, 2 }
  uselistorder i32 %v0_10f24, { 1, 0, 2 }
  uselistorder i1 %v3_105a8, { 1, 0, 2 }
  uselistorder i1 %v7_10588, { 1, 0 }
  uselistorder i1 %v7_10560, { 1, 0 }
  uselistorder i32 %v0_104d8, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v2_104ac, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_104a4, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_10438, { 2, 1, 0 }
  uselistorder i32 %v3_10434, { 1, 0 }
  uselistorder i32 %v3_10414, { 4, 3, 1, 0, 5, 6, 2 }
  uselistorder i32 %v0_10408, { 1, 0 }
  uselistorder i32 %v1_103ec, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_103d8, { 2, 1, 0 }
  uselistorder i32 %v3_103d4, { 1, 0 }
  uselistorder i32 %v0_103d8, { 1, 0 }
  uselistorder i32 %v1_10370, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10370, { 0, 1, 3, 2 }
  uselistorder i32 %v1_10340, { 2, 1, 0 }
  uselistorder i32 %v1_1033c, { 1, 0 }
  uselistorder i32 %v0_1030c, { 0, 2, 1 }
  uselistorder i32 %v1_10304, { 1, 0 }
  uselistorder i1 %v7_102bc, { 0, 3, 1, 2 }
  uselistorder i1 %v2_102bc, { 1, 2, 0 }
  uselistorder i32 %v2_102b4, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_102ac, { 1, 0 }
  uselistorder i32 %v1_10290, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_10284, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10284, { 0, 2, 1 }
  uselistorder i32 %v1_10274, { 1, 0 }
  uselistorder i32 %v3_102e8, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %storemerge245, { 1, 0, 2 }
  uselistorder i32 %v3_10130, { 1, 0 }
  uselistorder i32 %v1_1011c, { 1, 0 }
  uselistorder i32 %v1_10104, { 1, 2, 0 }
  uselistorder i32 %v0_10110, { 0, 3, 2, 1 }
  uselistorder i32 %v0_100d4, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_100c8, { 2, 1, 0 }
  uselistorder i32 %v1_100a4, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_1007c, { 1, 0 }
  uselistorder i32 %v0_ffe0, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_ff88, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_feac, { 1, 0 }
  uselistorder i32 %v1_fea8, { 1, 0 }
  uselistorder i32 %v4_fe84, { 1, 0 }
  uselistorder i1 %v2_fdd4, { 1, 0 }
  uselistorder i1 %v2_fdc0, { 1, 0 }
  uselistorder i1 %v2_fdac, { 1, 0 }
  uselistorder i32 %.384, { 3, 2, 1, 0 }
  uselistorder i1 %v7_fd88, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_fd70, { 1, 0 }
  uselistorder i1 %v3_fd54, { 1, 0, 2 }
  uselistorder i1 %v2_fd40, { 1, 0 }
  uselistorder i1 %v2_fd1c, { 1, 0 }
  uselistorder i32 %v1_fccc, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fcb8, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 54, 29, 28, 53, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fcb4, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_fca4, { 1, 0 }
  uselistorder i32 %v0_fc94, { 0, 1, 3, 2 }
  uselistorder i32 %v0_fc70, { 1, 0 }
  uselistorder i32 %v2_10a1c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_10524, { 3, 7, 4, 5, 2, 6, 8, 9, 1, 0 }
  uselistorder i32 %v2_10d48, { 1, 0 }
  uselistorder i32 %v2_102f8, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %v2_fc5c, { 1, 2, 4, 5, 0, 3, 8, 7, 6, 9 }
  uselistorder i32 %v2_fc58, { 3, 2, 0, 5, 4, 1, 6 }
  uselistorder i32 %v4_fb3c, { 1, 0 }
  uselistorder i32 %v3_fafc, { 1, 0 }
  uselistorder i32 %v4_fae8, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32 %v0_fad0, { 0, 2, 1 }
  uselistorder i32 %v0_fa78, { 3, 2, 0, 1 }
  uselistorder i32 %v3_fa10, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_f9f8, { 0, 2, 1 }
  uselistorder i32 %v0_f9e0, { 2, 1, 0 }
  uselistorder i32 %v0_f9bc, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge252, { 1, 0 }
  uselistorder i32 %v0_f950, { 2, 0, 1, 3, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 1, 2, 3, 0, 4 }
  uselistorder i32* %stack_var_-56, { 10, 7, 11, 3, 12, 6, 13, 5, 14, 8, 15, 4, 16, 17, 1, 2, 9, 18, 0, 19, 20 }
  uselistorder i32* %stack_var_-48, { 4, 5, 3, 6, 2, 7, 0, 8, 1, 9 }
  uselistorder i32* %stack_var_-38, { 1, 0, 2 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %sp.global-to-local, { 0, 2, 1, 3, 4 }
  uselistorder i32* %sl.global-to-local, { 4, 9, 10, 11, 12, 0, 1, 2, 3, 6, 5, 7, 8 }
  uselistorder i32* %r8.global-to-local, { 0, 5, 6, 9, 1, 8, 7, 4, 10, 2, 3, 11, 12, 13 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 12, 38, 37, 130, 39, 40, 117, 13, 14, 15, 120, 131, 132, 133, 134, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 118, 119, 121, 122, 123, 124, 125, 126, 25, 26, 27, 127, 128, 129, 135, 136, 137, 138, 139, 140, 141, 142, 143, 41, 42, 43, 44, 45, 46, 28, 29, 47, 48, 50, 49, 51, 52, 53, 54, 56, 58, 57, 55, 59, 60, 61, 62, 68, 63, 64, 65, 66, 69, 145, 146, 70, 147, 148, 30, 31, 32, 33, 34, 35, 36, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 116, 88, 89, 90, 91, 92, 144, 93, 94, 96, 95, 98, 97, 99, 101, 100, 103, 102, 67, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115 }
  uselistorder i32* %r2.global-to-local, { 9, 10, 11, 128, 37, 120, 12, 13, 14, 15, 16, 116, 121, 122, 123, 124, 0, 1, 2, 3, 5, 4, 6, 8, 7, 24, 17, 18, 20, 19, 21, 22, 23, 117, 119, 118, 25, 27, 26, 125, 126, 127, 38, 39, 40, 41, 42, 43, 44, 28, 29, 45, 46, 47, 48, 49, 51, 53, 52, 115, 50, 54, 55, 56, 57, 58, 62, 59, 60, 61, 63, 64, 66, 65, 67, 68, 30, 31, 32, 33, 34, 35, 36, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114 }
  uselistorder i32* %r1.global-to-local, { 9, 10, 11, 12, 37, 38, 98, 99, 13, 14, 15, 94, 95, 100, 101, 0, 1, 2, 3, 4, 5, 6, 7, 8, 102, 52, 53, 16, 17, 18, 19, 20, 21, 22, 23, 96, 97, 24, 25, 63, 39, 40, 41, 42, 26, 27, 28, 29, 43, 44, 45, 47, 48, 46, 49, 50, 54, 51, 92, 30, 31, 32, 33, 34, 35, 36, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 93, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91 }
  uselistorder i32* %r0.global-to-local, { 31, 32, 34, 33, 35, 37, 36, 38, 39, 41, 40, 206, 207, 208, 103, 102, 42, 105, 104, 198, 200, 199, 107, 109, 110, 106, 111, 108, 44, 43, 45, 47, 46, 48, 50, 49, 51, 181, 180, 121, 182, 183, 184, 202, 201, 203, 2, 1, 3, 5, 4, 7, 6, 8, 9, 10, 11, 13, 12, 15, 14, 17, 16, 18, 19, 20, 21, 23, 22, 25, 24, 27, 26, 28, 29, 30, 210, 209, 53, 54, 56, 55, 57, 52, 58, 59, 60, 61, 63, 62, 65, 64, 67, 66, 68, 69, 70, 72, 71, 73, 75, 74, 77, 76, 177, 178, 179, 186, 185, 188, 187, 192, 189, 190, 191, 79, 78, 81, 80, 194, 193, 195, 196, 197, 205, 204, 114, 112, 83, 82, 84, 86, 85, 88, 87, 89, 90, 91, 120, 113, 115, 116, 117, 119, 118, 122, 125, 123, 124, 130, 126, 129, 127, 128, 131, 93, 92, 94, 95, 96, 98, 97, 99, 100, 101, 134, 132, 133, 136, 135, 137, 139, 138, 176, 140, 141, 142, 0, 143, 144, 146, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 163, 166, 165, 167, 171, 170, 168, 169, 172, 173, 174, 175 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 22, 7, 8, 9, 10, 11, 19, 20, 21, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %ip.global-to-local, { 14, 15, 6, 16, 7, 44, 0, 2, 1, 4, 3, 5, 47, 8, 9, 10, 11, 42, 43, 12, 13, 45, 46, 48, 17, 18, 19, 20, 21, 22, 25, 23, 24, 26, 49, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i1* %cpsr_z.global-to-local, { 27, 28, 64, 227, 171, 50, 54, 55, 56, 57, 58, 29, 162, 31, 32, 33, 181, 182, 183, 200, 201, 202, 203, 204, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 46, 34, 35, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 172, 173, 178, 179, 174, 175, 176, 177, 180, 184, 185, 189, 190, 186, 187, 188, 191, 48, 192, 197, 198, 193, 194, 195, 196, 199, 47, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 163, 59, 60, 61, 62, 63, 164, 49, 30, 51, 52, 53, 65, 67, 66, 68, 69, 71, 73, 72, 165, 70, 74, 75, 76, 77, 78, 79, 84, 80, 81, 82, 83, 168, 169, 166, 167, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 102, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 225, 117, 118, 224, 119, 120, 223, 121, 122, 222, 123, 124, 125, 161, 126, 221, 127, 128, 220, 129, 130, 219, 131, 132, 133, 134, 135, 160, 136, 137, 138, 139, 140, 159, 141, 142, 143, 158, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 170, 157 }
  uselistorder i1* %cpsr_c.global-to-local, { 27, 28, 29, 64, 223, 170, 50, 55, 54, 56, 57, 58, 30, 161, 31, 32, 33, 34, 180, 181, 182, 199, 200, 201, 202, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 46, 35, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 171, 172, 177, 178, 173, 174, 175, 176, 179, 183, 184, 188, 189, 185, 186, 187, 190, 48, 191, 196, 197, 192, 193, 194, 195, 198, 47, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 222, 162, 59, 60, 61, 62, 63, 163, 49, 160, 51, 52, 53, 65, 67, 66, 68, 70, 72, 71, 164, 69, 73, 74, 75, 76, 77, 82, 78, 79, 80, 81, 167, 168, 165, 83, 166, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 221, 111, 112, 220, 113, 114, 219, 115, 116, 218, 117, 118, 119, 159, 120, 217, 121, 122, 216, 123, 124, 215, 125, 126, 127, 128, 129, 158, 130, 131, 132, 133, 134, 157, 135, 136, 137, 156, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 169, 155 }
  uselistorder i32 (i8*)* @inet_addr, { 2, 1, 3, 0, 4 }
  uselistorder [12 x i8]* @global_var_11f98.133, { 1, 0 }
  uselistorder i8 31, { 8, 2, 3, 9, 10, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* (i32*, i32*, i32)* @memcpy, { 1, 0, 2 }
  uselistorder i32* (i32*, i32*, i32)* @memmove, { 1, 0, 2 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_12030.257 to i32*), { 2, 4, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_12030.257, { 1, 0 }
  uselistorder i8 58, { 4, 6, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 62, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 37, { 3, 5, 4, 2, 1, 0 }
  uselistorder i8 34, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 36, { 7, 8, 11, 12, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 8, 9, 12, 13, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @recv, { 0, 5, 1, 2, 4, 3, 6 }
  uselistorder i32 (i32)* @function_11080, { 35, 10, 9, 34, 14, 38, 37, 36, 33, 32, 31, 13, 12, 11, 30, 29, 15, 28, 27, 26, 39, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_117c8, { 4, 0, 3, 2, 1 }
  uselistorder i32 (i32, i32*)* @function_11054, { 3, 4, 32, 0, 1, 2, 5, 6, 7, 8, 9, 31, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 33, 24, 25, 26, 27, 28, 29, 30, 36, 34, 35 }
  uselistorder i32 (i32)* @function_11138, { 27, 26, 3, 30, 29, 28, 25, 24, 23, 22, 21, 4, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 0, 2, 1 }
  uselistorder i8* bitcast (i8** @global_var_1a404.188 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1a405.189, { 4, 3, 2, 1, 0 }
  uselistorder i32 284, { 3, 4, 5, 0, 1, 2, 6, 7 }
  uselistorder i32* @r7, { 11, 12, 13, 17, 18, 19, 4, 8, 9, 10, 26, 14, 15, 16, 6, 20, 5, 21, 22, 23, 24, 25, 27, 3, 28, 29, 30, 166, 167, 168, 115, 116, 117, 118, 31, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 7, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 92, 88, 89, 90, 91, 1, 93, 94, 95, 96, 97, 98, 103, 99, 100, 101, 102, 2, 104, 105, 106, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 107, 108, 109, 110, 111, 112, 113, 114 }
  uselistorder i32 1536, { 1, 0 }
  uselistorder i32 1664, { 2, 0, 1 }
  uselistorder void (i32)* @exit, { 4, 5, 3, 2, 1, 0, 6 }
  uselistorder i32* @r6, { 18, 19, 20, 49, 58, 59, 60, 61, 62, 63, 40, 21, 22, 64, 45, 65, 66, 67, 68, 69, 70, 23, 24, 25, 26, 27, 41, 46, 9, 10, 11, 12, 13, 14, 15, 16, 17, 50, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 51, 52, 53, 54, 47, 48, 71, 72, 73, 74, 75, 55, 56, 76, 77, 7, 78, 79, 80, 81, 57, 274, 275, 276, 200, 201, 202, 203, 0, 82, 83, 84, 85, 86, 87, 88, 89, 90, 2, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 1, 103, 104, 105, 3, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 204, 4, 205, 5, 206, 6, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 277, 278, 279, 280, 281, 282, 283, 284, 285, 189, 192, 190, 191, 193, 194, 8, 195, 196, 197, 198, 199 }
  uselistorder i32 (i32, i32*, i32, i32)* @send, { 6, 14, 13, 16, 15, 17, 18, 20, 19, 23, 22, 4, 7, 21, 27, 9, 30, 25, 24, 26, 29, 28, 0, 2, 1, 3, 5, 8, 11, 10, 12, 31 }
  uselistorder i32 ()* @function_f6cc, { 3, 2, 1, 0 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, %sockaddr*, i32*)* @recvfrom, { 1, 2, 0, 3 }
  uselistorder i32 (i32, i32*, i32, i32, %sockaddr*, i32)* @sendto, { 3, 2, 8, 0, 4, 5, 6, 7, 9, 1, 10 }
  uselistorder i32 16384, { 13, 61, 12, 49, 0, 50, 1, 51, 2, 52, 3, 53, 4, 54, 5, 55, 6, 56, 7, 57, 8, 58, 29, 59, 30, 60, 27, 63, 28, 64, 25, 26, 62, 37, 72, 31, 65, 32, 66, 33, 67, 34, 68, 35, 69, 36, 70, 9, 71, 10, 73, 11, 74, 15, 75, 40, 76, 39, 77, 41, 78, 42, 79, 14, 80, 38, 81, 16, 82, 17, 83, 18, 84, 43, 85, 19, 86, 44, 87, 20, 88, 21, 89, 22, 90, 23, 91, 24, 92, 45, 46, 47, 48 }
  uselistorder i32 (i32, i32, i32, i32)* @function_de50, { 9, 8, 7, 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_ddf4, { 11, 10, 9, 8, 7, 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i8* @global_var_1a3e8.246, { 2, 1, 0 }
  uselistorder i32 16711680, { 3, 0, 1, 2 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 33, { 2, 0, 1 }
  uselistorder i32 28, { 5, 6, 7, 8, 9, 10, 11, 0, 4, 13, 12, 1, 2, 3, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32 27, { 1, 7, 0, 6, 2, 8, 3, 9, 4, 10, 5, 11 }
  uselistorder i32 20, { 17, 18, 1, 19, 2, 20, 16, 21, 22, 23, 24, 25, 3, 26, 27, 28, 29, 30, 31, 32, 33, 4, 34, 35, 36, 0, 37, 38, 39, 40, 12, 41, 42, 43, 44, 45, 46, 47, 48, 49, 13, 50, 51, 52, 53, 54, 55, 56, 58, 59, 5, 60, 61, 62, 63, 64, 65, 66, 6, 67, 68, 69, 70, 14, 15, 71, 8, 72, 7, 73, 74, 75, 76, 10, 77, 9, 78, 79, 80, 81, 82, 83, 84, 85, 11, 86, 87, 88, 89, 90, 91, 92, 93, 94, 57 }
  uselistorder i32 -6, { 1, 0, 2, 3 }
  uselistorder i32 159, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 18, { 8, 0, 1, 2, 3, 9, 4, 10, 5, 11, 6, 12, 7, 13 }
  uselistorder i32 62, { 1, 0 }
  uselistorder i32 31, { 10, 9, 13, 14, 11, 12, 7, 8, 3, 4, 0, 5, 1, 2, 6 }
  uselistorder i32 30, { 0, 6, 4, 5, 1, 2, 3 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32* @fp, { 2, 3, 45, 46, 47, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0, 29, 30, 31, 32, 1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52 }
  uselistorder i32 13, { 22, 23, 24, 26, 25, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 20, 32, 33, 34, 35, 36, 37, 38, 39, 21, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 2, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 3, 68, 69 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_12010.240 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_12008.238 to i32), { 0, 2, 1, 3 }
  uselistorder i32 11, { 5, 6, 7, 8, 0, 9, 10, 11, 12, 13, 14, 15, 16, 1, 17, 18, 19, 2, 20, 21, 22, 3, 23, 24, 25, 4, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_11fcc.226 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @function_f7a0, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_12038.218 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_12034.216 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i8* @global_var_1a3f9.212, { 1, 0 }
  uselistorder i8 64, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_1a3ec.203 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8* @global_var_1a3f8.204, { 1, 0 }
  uselistorder i32 40, { 0, 2, 3, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 ptrtoint (i32* @global_var_1a3d8.199 to i32), { 0, 2, 1, 4, 5, 3, 6, 7, 8, 9 }
  uselistorder i32 1024, { 1, 0 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 65280, { 34, 1, 17, 0, 2, 3, 4, 35, 18, 5, 36, 24, 19, 20, 25, 26, 27, 37, 38, 39, 40, 6, 7, 28, 29, 30, 41, 42, 43, 44, 8, 9, 45, 10, 46, 31, 32, 47, 11, 48, 49, 21, 50, 51, 12, 52, 53, 22, 54, 55, 13, 56, 23, 33, 57, 58, 14, 59, 60, 15, 16 }
  uselistorder i32 ()* @function_f468, { 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 5, 4, 3, 2, 1, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @setsockopt, { 0, 1, 8, 4, 10, 2, 3, 5, 6, 7, 9, 11 }
  uselistorder i32 2048, { 5, 0, 1, 2, 6, 3, 7, 8, 4, 9 }
  uselistorder i32 (i32, i32, ...)* @fcntl, { 10, 9, 5, 11, 8, 7, 6, 4, 3, 2, 1, 0, 12 }
  uselistorder i32* @global_var_1a42c.197, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @r5, { 6, 7, 18, 19, 8, 9, 10, 11, 12, 13, 14, 20, 21, 15, 16, 22, 23, 24, 25, 26, 27, 28, 17, 29, 30, 31, 32, 2, 33, 211, 212, 213, 214, 215, 216, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0, 49, 50, 51, 52, 53, 3, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 1, 71, 72, 73, 74, 75, 76, 4, 77, 78, 79, 80, 81, 82, 83, 84, 5, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 205, 206, 207, 208, 209, 210 }
  uselistorder i32* @global_var_1a428.195, { 1, 2, 3, 4, 0 }
  uselistorder i32* (i32, i32)* @calloc, { 39, 38, 3, 2, 5, 4, 7, 6, 9, 13, 12, 15, 14, 17, 16, 29, 28, 36, 27, 26, 1, 0, 31, 34, 33, 32, 30, 19, 18, 21, 20, 23, 22, 25, 24, 37, 35, 8, 11, 10, 40 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1a408.182, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @time, { 0, 2, 1, 3, 4, 8, 7, 6, 5, 9 }
  uselistorder i32 (i32)* @function_f4c0, { 1, 0 }
  uselistorder i32* @global_var_1a40c.102, { 4, 5, 1, 2, 3, 6, 7, 8, 9, 10, 0, 11, 15, 12, 13, 14 }
  uselistorder i32 ()* @function_119bc, { 2, 1, 0 }
  uselistorder i32 ()* @fork, { 0, 6, 5, 4, 3, 2, 1, 7 }
  uselistorder i32* @sb, { 2, 3, 4, 0, 5, 6, 7, 8, 75, 76, 77, 9, 10, 11, 12, 13, 14, 17, 15, 16, 1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32* @r8, { 4, 91, 92, 93, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 1, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 2, 90, 94, 3, 95, 54, 55, 56, 57, 58 }
  uselistorder label %dec_label_pc_105b4.backedge.thread501, { 9, 2, 8, 4, 7, 3, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_105b4.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10f7c, { 1, 0 }
  uselistorder label %.thread241, { 1, 0 }
  uselistorder label %bb378, { 1, 0 }
  uselistorder label %dec_label_pc_10eb8, { 1, 0 }
  uselistorder label %dec_label_pc_10e84, { 1, 0 }
  uselistorder label %thread-pre-split100, { 1, 0 }
  uselistorder label %dec_label_pc_10d94, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10cc0, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10cac, { 1, 0 }
  uselistorder label %dec_label_pc_10c0c, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10bf8, { 1, 0 }
  uselistorder label %dec_label_pc_10b58, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10b44, { 1, 0 }
  uselistorder label %dec_label_pc_10aec, { 4, 5, 1, 2, 3, 11, 6, 7, 10, 8, 9, 0 }
  uselistorder label %dec_label_pc_109fc, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_109e8, { 1, 0 }
  uselistorder label %dec_label_pc_108d4, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_108c0, { 1, 0 }
  uselistorder label %dec_label_pc_10834, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_10820, { 1, 0 }
  uselistorder label %dec_label_pc_107b0, { 1, 0 }
  uselistorder label %dec_label_pc_10794, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10780, { 1, 0 }
  uselistorder label %dec_label_pc_1073c, { 4, 1, 2, 3, 5, 6, 8, 7, 0 }
  uselistorder label %dec_label_pc_1072c, { 5, 2, 3, 4, 1, 0 }
  uselistorder label %.thread90, { 2, 0, 1 }
  uselistorder label %.thread88, { 2, 0, 1 }
  uselistorder label %dec_label_pc_106c8, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_10684, { 1, 0 }
  uselistorder label %dec_label_pc_10684.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_10618, { 1, 0 }
  uselistorder label %bb347, { 1, 0 }
  uselistorder label %dec_label_pc_105cc, { 1, 0 }
  uselistorder label %dec_label_pc_105bc, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_105bc.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_105b0.loopexit, { 2, 5, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_10510, { 2, 0, 1 }
  uselistorder label %dec_label_pc_103e8, { 1, 7, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_103c0, { 1, 0 }
  uselistorder label %bb339, { 1, 0 }
  uselistorder label %bb337, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_10210.dec_label_pc_10210_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_101f8.dec_label_pc_101f8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_101f0, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_101e8, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_10104, { 1, 0 }
  uselistorder label %dec_label_pc_ffa8, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_ff9c, { 1, 0 }
  uselistorder label %.thread68, { 2, 1, 0 }
  uselistorder label %.thread66, { 1, 0 }
  uselistorder label %bb320, { 1, 0 }
  uselistorder label %dec_label_pc_fe0c.thread, { 1, 0 }
  uselistorder label %dec_label_pc_fe00.thread, { 1, 0 }
  uselistorder label %dec_label_pc_fdf4.thread, { 1, 0 }
  uselistorder label %dec_label_pc_fddc, { 1, 0 }
  uselistorder label %.thread38, { 1, 0 }
  uselistorder label %dec_label_pc_fd80, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fd5c, { 1, 0 }
  uselistorder label %dec_label_pc_fd50, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fd2c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fd08, { 1, 0 }
  uselistorder label %bb300, { 1, 0 }
  uselistorder label %dec_label_pc_fcb4, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_fa78, { 1, 0 }
}

define i32 @function_11054(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_11054:
  %v3_11058 = mul i32 %arg1, 8
  %v2_1105c = add i32 %v3_11058, ptrtoint (i32* @global_var_1a438.264 to i32)
  %v2_11060 = icmp eq i32* %arg2, null
  br i1 %v2_11060, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_11054
  %v3_1106c11 = inttoptr i32 %v2_1105c to i32*
  %v4_1106c12 = load i32, i32* %v3_1106c11, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_11054
  %v2_11064 = add i32 %v3_11058, add (i32 ptrtoint (i32* @global_var_1a438.264 to i32), i32 5)
  %v3_11064 = inttoptr i32 %v2_11064 to i8*
  %v4_11064 = load i8, i8* %v3_11064, align 1
  %v5_11064 = zext i8 %v4_11064 to i32
  %v2_11068 = add i32 %v3_11058, add (i32 ptrtoint (i32* @global_var_1a438.264 to i32), i32 4)
  %v3_11068 = inttoptr i32 %v2_11068 to i8*
  %v4_11068 = load i8, i8* %v3_11068, align 4
  %v5_11068 = zext i8 %v4_11068 to i32
  %v3_1106c = inttoptr i32 %v2_1105c to i32*
  %v4_1106c = load i32, i32* %v3_1106c, align 4
  %v5_11070 = mul nuw nsw i32 %v5_11064, 256
  %v6_11070 = or i32 %v5_11068, %v5_11070
  store i32 %v6_11070, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_1106c714 = phi i32 [ %v4_1106c12, %.thread ], [ %v4_1106c, %bb ]
  ret i32 %v4_1106c714

; uselistorder directives
  uselistorder i32 %v2_1105c, { 1, 0 }
  uselistorder i32 %v3_11058, { 2, 1, 0 }
  uselistorder i32* null, { 4, 8, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 2, 6, 3, 7, 20, 21, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_11080(i32 %arg1) local_unnamed_addr {
dec_label_pc_11080:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11080 = mul i32 %arg1, 8
  %v3_11084 = load i32, i32* @r4, align 4
  store i32 %v3_11084, i32* %stack_var_-20, align 4
  %v3_11094 = and i32 %v3_11080, 2040
  %v2_11098 = add i32 %v3_11094, ptrtoint (i32* @global_var_1a438.264 to i32)
  store i32 %v2_11098, i32* %lr.global-to-local, align 4
  %v1_110a0 = add i32 %v3_11094, add (i32 ptrtoint (i32* @global_var_1a438.264 to i32), i32 4)
  store i32 %v1_110a0, i32* %r7.global-to-local, align 4
  %v2_110a4 = load i32, i32* @global_var_1a390.267, align 4
  %v2_110a8 = inttoptr i32 %v1_110a0 to i8*
  %v3_110a8 = load i8, i8* %v2_110a8, align 4
  %v4_110a8 = zext i8 %v3_110a8 to i32
  %v1_110ac = add i32 %v3_11094, add (i32 ptrtoint (i32* @global_var_1a438.264 to i32), i32 5)
  %v2_110ac = inttoptr i32 %v1_110ac to i8*
  %v3_110ac = load i8, i8* %v2_110ac, align 1
  %v4_110ac = zext i8 %v3_110ac to i32
  %v3_110b0 = udiv i32 %v2_110a4, 256
  %v4_110b4 = mul nuw nsw i32 %v4_110ac, 256
  %v5_110b4 = or i32 %v4_110b4, %v4_110a8
  %v7_110b4 = icmp eq i32 %v5_110b4, 0
  store i1 %v7_110b4, i1* @cpsr_z, align 1
  %v3_110b8 = udiv i32 %v2_110a4, 65536
  %v1_110bc = urem i32 %v3_110b0, 256
  store i32 %v1_110bc, i32* %r6.global-to-local, align 4
  %v1_110c0 = urem i32 %v3_110b8, 256
  store i32 %v1_110c0, i32* %r5.global-to-local, align 4
  %v3_110c4 = udiv i32 %v2_110a4, 16777216
  store i32 %v3_110c4, i32* %r4.global-to-local, align 4
  %v1_110c8 = urem i32 %v2_110a4, 256
  br i1 %v7_110b4, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_11080
  store i32 %v3_11084, i32* @r4, align 4
  ret i32 %v1_110c8

bb8:                                              ; preds = %dec_label_pc_11080
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_110d4

dec_label_pc_110d4:                               ; preds = %dec_label_pc_110d4, %bb8
  %v2_110e0 = phi i32 [ %v1_1111c, %dec_label_pc_110d4 ], [ 0, %bb8 ]
  %v0_110d4 = phi i32 [ %v0_11114, %dec_label_pc_110d4 ], [ %v2_11098, %bb8 ]
  %v1_110d4 = inttoptr i32 %v0_110d4 to i32*
  %v2_110d4 = load i32, i32* %v1_110d4, align 4
  %v2_110d8 = add i32 %v2_110d4, %v2_110e0
  %v3_110d8 = inttoptr i32 %v2_110d8 to i8*
  %v4_110d8 = load i8, i8* %v3_110d8, align 1
  %v6_110d8 = zext i8 %v4_110d8 to i32
  %v2_110dc = xor i32 %v6_110d8, %v1_110c8
  %v1_110e0 = trunc i32 %v2_110dc to i8
  store i8 %v1_110e0, i8* %v3_110d8, align 1
  %v0_110e4 = load i32, i32* %lr.global-to-local, align 4
  %v1_110e4 = inttoptr i32 %v0_110e4 to i32*
  %v2_110e4 = load i32, i32* %v1_110e4, align 4
  %v0_110e8 = load i32, i32* %ip.global-to-local, align 4
  %v2_110e8 = add i32 %v0_110e8, %v2_110e4
  %v3_110e8 = inttoptr i32 %v2_110e8 to i8*
  %v4_110e8 = load i8, i8* %v3_110e8, align 1
  %v6_110e8 = zext i8 %v4_110e8 to i32
  %v0_110ec = load i32, i32* %r6.global-to-local, align 4
  %v2_110ec = xor i32 %v0_110ec, %v6_110e8
  %v1_110f0 = trunc i32 %v2_110ec to i8
  store i8 %v1_110f0, i8* %v3_110e8, align 1
  %v0_110f4 = load i32, i32* %lr.global-to-local, align 4
  %v1_110f4 = inttoptr i32 %v0_110f4 to i32*
  %v2_110f4 = load i32, i32* %v1_110f4, align 4
  %v0_110f8 = load i32, i32* %ip.global-to-local, align 4
  %v2_110f8 = add i32 %v0_110f8, %v2_110f4
  %v3_110f8 = inttoptr i32 %v2_110f8 to i8*
  %v4_110f8 = load i8, i8* %v3_110f8, align 1
  %v6_110f8 = zext i8 %v4_110f8 to i32
  %v0_110fc = load i32, i32* %r5.global-to-local, align 4
  %v2_110fc = xor i32 %v0_110fc, %v6_110f8
  %v1_11100 = trunc i32 %v2_110fc to i8
  store i8 %v1_11100, i8* %v3_110f8, align 1
  %v0_11104 = load i32, i32* %lr.global-to-local, align 4
  %v1_11104 = inttoptr i32 %v0_11104 to i32*
  %v2_11104 = load i32, i32* %v1_11104, align 4
  %v0_11108 = load i32, i32* %ip.global-to-local, align 4
  %v2_11108 = add i32 %v0_11108, %v2_11104
  %v3_11108 = inttoptr i32 %v2_11108 to i8*
  %v4_11108 = load i8, i8* %v3_11108, align 1
  %v6_11108 = zext i8 %v4_11108 to i32
  %v0_1110c = load i32, i32* %r4.global-to-local, align 4
  %v2_1110c = xor i32 %v0_1110c, %v6_11108
  %v1_11110 = trunc i32 %v2_1110c to i8
  store i8 %v1_11110, i8* %v3_11108, align 1
  %v0_11114 = load i32, i32* %lr.global-to-local, align 4
  %v1_11114 = add i32 %v0_11114, 4
  %v2_11114 = inttoptr i32 %v1_11114 to i8*
  %v3_11114 = load i8, i8* %v2_11114, align 1
  %v4_11114 = zext i8 %v3_11114 to i32
  %v0_11118 = load i32, i32* %r7.global-to-local, align 4
  %v1_11118 = add i32 %v0_11118, 1
  %v2_11118 = inttoptr i32 %v1_11118 to i8*
  %v3_11118 = load i8, i8* %v2_11118, align 1
  %v4_11118 = zext i8 %v3_11118 to i32
  %v0_1111c = load i32, i32* %ip.global-to-local, align 4
  %v1_1111c = add i32 %v0_1111c, 1
  store i32 %v1_1111c, i32* %ip.global-to-local, align 4
  %v4_11120 = mul nuw nsw i32 %v4_11118, 256
  %v5_11120 = or i32 %v4_11120, %v4_11114
  %v9_11124 = icmp eq i32 %v5_11120, %v1_1111c
  store i1 %v9_11124, i1* @cpsr_z, align 1
  %v8_11128 = icmp sgt i32 %v5_11120, %v1_1111c
  br i1 %v8_11128, label %dec_label_pc_110d4, label %dec_label_pc_1112c

dec_label_pc_1112c:                               ; preds = %dec_label_pc_110d4
  %v2_1112c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1112c, i32* @r4, align 4
  ret i32 %v1_110c8

; uselistorder directives
  uselistorder i32 %v1_1111c, { 1, 2, 3, 0 }
  uselistorder i32 %v0_11114, { 1, 0 }
  uselistorder i32 %v1_110c8, { 0, 2, 1 }
  uselistorder i32 %v2_110a4, { 3, 0, 1, 2 }
}

define i32 @function_11138(i32 %arg1) local_unnamed_addr {
dec_label_pc_11138:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11138 = mul i32 %arg1, 8
  %v3_1113c = load i32, i32* @r4, align 4
  store i32 %v3_1113c, i32* %stack_var_-20, align 4
  %v3_1114c = and i32 %v3_11138, 2040
  %v2_11150 = add i32 %v3_1114c, ptrtoint (i32* @global_var_1a438.264 to i32)
  store i32 %v2_11150, i32* %lr.global-to-local, align 4
  %v1_11158 = add i32 %v3_1114c, add (i32 ptrtoint (i32* @global_var_1a438.264 to i32), i32 4)
  store i32 %v1_11158, i32* %r7.global-to-local, align 4
  %v2_1115c = load i32, i32* @global_var_1a390.267, align 4
  %v2_11160 = inttoptr i32 %v1_11158 to i8*
  %v3_11160 = load i8, i8* %v2_11160, align 4
  %v4_11160 = zext i8 %v3_11160 to i32
  %v1_11164 = add i32 %v3_1114c, add (i32 ptrtoint (i32* @global_var_1a438.264 to i32), i32 5)
  %v2_11164 = inttoptr i32 %v1_11164 to i8*
  %v3_11164 = load i8, i8* %v2_11164, align 1
  %v4_11164 = zext i8 %v3_11164 to i32
  %v3_11168 = udiv i32 %v2_1115c, 256
  %v4_1116c = mul nuw nsw i32 %v4_11164, 256
  %v5_1116c = or i32 %v4_1116c, %v4_11160
  %v7_1116c = icmp eq i32 %v5_1116c, 0
  %v3_11170 = udiv i32 %v2_1115c, 65536
  %v1_11174 = urem i32 %v3_11168, 256
  store i32 %v1_11174, i32* %r6.global-to-local, align 4
  %v1_11178 = urem i32 %v3_11170, 256
  store i32 %v1_11178, i32* %r5.global-to-local, align 4
  %v3_1117c = udiv i32 %v2_1115c, 16777216
  store i32 %v3_1117c, i32* %r4.global-to-local, align 4
  %v1_11180 = urem i32 %v2_1115c, 256
  br i1 %v7_1116c, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_11138
  store i32 %v3_1113c, i32* @r4, align 4
  ret i32 %v1_11180

bb8:                                              ; preds = %dec_label_pc_11138
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1118c

dec_label_pc_1118c:                               ; preds = %dec_label_pc_1118c, %bb8
  %v2_11198 = phi i32 [ %v1_111d4, %dec_label_pc_1118c ], [ 0, %bb8 ]
  %v0_1118c = phi i32 [ %v0_111cc, %dec_label_pc_1118c ], [ %v2_11150, %bb8 ]
  %v1_1118c = inttoptr i32 %v0_1118c to i32*
  %v2_1118c = load i32, i32* %v1_1118c, align 4
  %v2_11190 = add i32 %v2_1118c, %v2_11198
  %v3_11190 = inttoptr i32 %v2_11190 to i8*
  %v4_11190 = load i8, i8* %v3_11190, align 1
  %v6_11190 = zext i8 %v4_11190 to i32
  %v2_11194 = xor i32 %v6_11190, %v1_11180
  %v1_11198 = trunc i32 %v2_11194 to i8
  store i8 %v1_11198, i8* %v3_11190, align 1
  %v0_1119c = load i32, i32* %lr.global-to-local, align 4
  %v1_1119c = inttoptr i32 %v0_1119c to i32*
  %v2_1119c = load i32, i32* %v1_1119c, align 4
  %v0_111a0 = load i32, i32* %ip.global-to-local, align 4
  %v2_111a0 = add i32 %v0_111a0, %v2_1119c
  %v3_111a0 = inttoptr i32 %v2_111a0 to i8*
  %v4_111a0 = load i8, i8* %v3_111a0, align 1
  %v6_111a0 = zext i8 %v4_111a0 to i32
  %v0_111a4 = load i32, i32* %r6.global-to-local, align 4
  %v2_111a4 = xor i32 %v0_111a4, %v6_111a0
  %v1_111a8 = trunc i32 %v2_111a4 to i8
  store i8 %v1_111a8, i8* %v3_111a0, align 1
  %v0_111ac = load i32, i32* %lr.global-to-local, align 4
  %v1_111ac = inttoptr i32 %v0_111ac to i32*
  %v2_111ac = load i32, i32* %v1_111ac, align 4
  %v0_111b0 = load i32, i32* %ip.global-to-local, align 4
  %v2_111b0 = add i32 %v0_111b0, %v2_111ac
  %v3_111b0 = inttoptr i32 %v2_111b0 to i8*
  %v4_111b0 = load i8, i8* %v3_111b0, align 1
  %v6_111b0 = zext i8 %v4_111b0 to i32
  %v0_111b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_111b4 = xor i32 %v0_111b4, %v6_111b0
  %v1_111b8 = trunc i32 %v2_111b4 to i8
  store i8 %v1_111b8, i8* %v3_111b0, align 1
  %v0_111bc = load i32, i32* %lr.global-to-local, align 4
  %v1_111bc = inttoptr i32 %v0_111bc to i32*
  %v2_111bc = load i32, i32* %v1_111bc, align 4
  %v0_111c0 = load i32, i32* %ip.global-to-local, align 4
  %v2_111c0 = add i32 %v0_111c0, %v2_111bc
  %v3_111c0 = inttoptr i32 %v2_111c0 to i8*
  %v4_111c0 = load i8, i8* %v3_111c0, align 1
  %v6_111c0 = zext i8 %v4_111c0 to i32
  %v0_111c4 = load i32, i32* %r4.global-to-local, align 4
  %v2_111c4 = xor i32 %v0_111c4, %v6_111c0
  %v1_111c8 = trunc i32 %v2_111c4 to i8
  store i8 %v1_111c8, i8* %v3_111c0, align 1
  %v0_111cc = load i32, i32* %lr.global-to-local, align 4
  %v1_111cc = add i32 %v0_111cc, 4
  %v2_111cc = inttoptr i32 %v1_111cc to i8*
  %v3_111cc = load i8, i8* %v2_111cc, align 1
  %v4_111cc = zext i8 %v3_111cc to i32
  %v0_111d0 = load i32, i32* %r7.global-to-local, align 4
  %v1_111d0 = add i32 %v0_111d0, 1
  %v2_111d0 = inttoptr i32 %v1_111d0 to i8*
  %v3_111d0 = load i8, i8* %v2_111d0, align 1
  %v4_111d0 = zext i8 %v3_111d0 to i32
  %v0_111d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_111d4 = add i32 %v0_111d4, 1
  store i32 %v1_111d4, i32* %ip.global-to-local, align 4
  %v4_111d8 = mul nuw nsw i32 %v4_111d0, 256
  %v5_111d8 = or i32 %v4_111d8, %v4_111cc
  %v8_111e0 = icmp sgt i32 %v5_111d8, %v1_111d4
  br i1 %v8_111e0, label %dec_label_pc_1118c, label %dec_label_pc_111e4

dec_label_pc_111e4:                               ; preds = %dec_label_pc_1118c
  %v2_111e4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_111e4, i32* @r4, align 4
  ret i32 %v1_11180

; uselistorder directives
  uselistorder i32 %v1_111d4, { 1, 2, 0 }
  uselistorder i32 %v0_111cc, { 1, 0 }
  uselistorder i32 %v1_11180, { 1, 2, 0 }
  uselistorder i32 %v2_1115c, { 3, 0, 1, 2 }
  uselistorder i32 16777216, { 0, 1, 3, 2, 5, 4, 9, 6, 8, 7, 10, 12, 11, 14, 13, 16, 15, 17, 18, 19, 20, 23, 21, 24, 22, 25, 26, 28, 27, 34, 29, 35, 30, 36, 31, 37, 32, 38, 33, 39, 42, 40, 41, 43, 44, 49, 45, 50, 46, 51, 47, 48, 52, 55, 53, 54, 56, 57, 62, 58, 63, 59, 64, 60, 61, 65, 73, 66, 74, 67, 75, 68, 76, 77, 69, 78, 70, 79, 71, 80, 72, 84, 81, 85, 82, 86, 83, 87, 94, 88, 95, 96, 89, 97, 92, 98, 90, 99, 100, 91, 93, 101, 102, 106, 103, 107, 108, 104, 105, 109, 110, 111, 114, 112, 115, 113, 116, 117, 118, 123, 119, 124, 120, 125, 121, 126, 122, 127, 128, 129, 130, 131, 132, 134, 133, 135 }
}

define i32 @function_111f0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_111f0:
  %fp.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_111f0 = load i32, i32* @r4, align 4
  store i32 %v3_111f0, i32* %stack_var_-36, align 4
  %v1_111f8 = call i32* @malloc(i32 2)
  %v2_111f8 = ptrtoint i32* %v1_111f8 to i32
  store i32 2, i32* %r5.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a438.264 to i32), i32* %r4.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %v2_111f8, i32* %r7.global-to-local, align 4
  %v4_11214 = call i32 @function_11780(i32 %v2_111f8, i32 ptrtoint ([3 x i8]* @global_var_12048.272 to i32), i32 2)
  %v0_11218 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v2_111f8, i32* @global_var_1a440.273, align 4
  %v1_11220 = trunc i32 %v0_11218 to i8
  store i8 %v1_11220, i8* bitcast (i32* @global_var_1a444.274 to i8*), align 4
  %v0_11224 = load i32, i32* %r6.global-to-local, align 4
  %v1_11224 = trunc i32 %v0_11224 to i8
  store i8 %v1_11224, i8* bitcast (i32* @global_var_1a445.275 to i8*), align 4
  %v1_11228 = call i32* @malloc(i32 %v0_11218)
  %v3_11228 = ptrtoint i32* %v1_11228 to i32
  %v0_1122c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v3_11228, i32* %r7.global-to-local, align 4
  %v3_11238 = call i32 @function_11780(i32 %v3_11228, i32 ptrtoint (i32* @global_var_1204c.277 to i32), i32 %v0_1122c)
  store i32 %v3_11228, i32* @global_var_1a448.278, align 4
  %v0_11244 = load i32, i32* %r5.global-to-local, align 4
  %v1_11244 = trunc i32 %v0_11244 to i8
  store i8 %v1_11244, i8* bitcast (i32* @global_var_1a44c.279 to i8*), align 4
  %v0_11248 = load i32, i32* %r6.global-to-local, align 4
  %v1_11248 = trunc i32 %v0_11248 to i8
  store i8 %v1_11248, i8* bitcast (i32* @global_var_1a44d.280 to i8*), align 4
  %v1_1124c = call i32* @malloc(i32 29)
  %v3_1124c = ptrtoint i32* %v1_1124c to i32
  store i32 %v3_1124c, i32* %r5.global-to-local, align 4
  %v3_1125c = call i32 @function_11780(i32 %v3_1124c, i32 ptrtoint (i32* @global_var_121b4.282 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1a454.283 to i8*), align 4
  %v0_1126c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1126c, i32* @global_var_1a450.284, align 4
  %v0_11270 = load i32, i32* %r6.global-to-local, align 4
  %v1_11270 = trunc i32 %v0_11270 to i8
  store i8 %v1_11270, i8* bitcast (i32* @global_var_1a455.285 to i8*), align 4
  %v1_11274 = call i32* @malloc(i32 6)
  %v2_11274 = ptrtoint i32* %v1_11274 to i32
  store i32 6, i32* %fp.global-to-local, align 4
  store i32 %v2_11274, i32* %r5.global-to-local, align 4
  %v4_11288 = call i32 @function_11780(i32 %v2_11274, i32 ptrtoint ([7 x i8]* @global_var_12050.287 to i32), i32 6)
  %v0_11290 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11290, i32* @global_var_1a458.288, align 4
  store i8 6, i8* bitcast (i32* @global_var_1a45c.289 to i8*), align 4
  %v0_11298 = load i32, i32* %r6.global-to-local, align 4
  %v1_11298 = trunc i32 %v0_11298 to i8
  store i8 %v1_11298, i8* bitcast (i32* @global_var_1a45d.290 to i8*), align 4
  %v1_1129c = call i32* @malloc(i32 7)
  %v3_1129c = ptrtoint i32* %v1_1129c to i32
  store i32 7, i32* %r8.global-to-local, align 4
  store i32 %v3_1129c, i32* %r5.global-to-local, align 4
  %v4_112b0 = call i32 @function_11780(i32 %v3_1129c, i32 ptrtoint ([8 x i8]* @global_var_12058.292 to i32), i32 7)
  %v0_112b8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_112b8, i32* @global_var_1a460.293, align 4
  store i8 7, i8* bitcast (i32* @global_var_1a464.294 to i8*), align 4
  %v0_112c0 = load i32, i32* %r6.global-to-local, align 4
  %v1_112c0 = trunc i32 %v0_112c0 to i8
  store i8 %v1_112c0, i8* bitcast (i32* @global_var_1a465.295 to i8*), align 4
  %v1_112c4 = call i32* @malloc(i32 7)
  %v3_112c4 = ptrtoint i32* %v1_112c4 to i32
  %v0_112cc = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_112c4, i32* %r5.global-to-local, align 4
  %v4_112d4 = call i32 @function_11780(i32 %v3_112c4, i32 ptrtoint ([8 x i8]* @global_var_12060.297 to i32), i32 %v0_112cc)
  %v0_112dc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_112dc, i32* @global_var_1a468.298, align 4
  %v1_112e0 = trunc i32 %v0_112cc to i8
  store i8 %v1_112e0, i8* bitcast (i32* @global_var_1a46c.299 to i8*), align 4
  %v0_112e4 = load i32, i32* %r6.global-to-local, align 4
  %v1_112e4 = trunc i32 %v0_112e4 to i8
  store i8 %v1_112e4, i8* bitcast (i32* @global_var_1a46d.300 to i8*), align 4
  %v1_112e8 = call i32* @malloc(i32 3)
  %v3_112e8 = ptrtoint i32* %v1_112e8 to i32
  store i32 %v3_112e8, i32* %r5.global-to-local, align 4
  %v4_112f8 = call i32 @function_11780(i32 %v3_112e8, i32 ptrtoint ([4 x i8]* @global_var_12068.302 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1a474.303 to i8*), align 4
  %v0_11308 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11308, i32* @global_var_1a470.304, align 4
  %v0_1130c = load i32, i32* %r6.global-to-local, align 4
  %v1_1130c = trunc i32 %v0_1130c to i8
  store i8 %v1_1130c, i8* bitcast (i32* @global_var_1a475.305 to i8*), align 4
  %v1_11310 = call i32* @malloc(i32 19)
  %v3_11310 = ptrtoint i32* %v1_11310 to i32
  store i32 %v3_11310, i32* %r5.global-to-local, align 4
  %v3_11320 = call i32 @function_11780(i32 %v3_11310, i32 ptrtoint (i32* @global_var_1206c.307 to i32), i32 19)
  store i8 19, i8* bitcast (i32* @global_var_1a47c.308 to i8*), align 4
  %v0_11330 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11330, i32* @global_var_1a478.309, align 4
  %v0_11334 = load i32, i32* %r6.global-to-local, align 4
  %v1_11334 = trunc i32 %v0_11334 to i8
  store i8 %v1_11334, i8* bitcast (i32* @global_var_1a47d.310 to i8*), align 4
  %v1_11338 = call i32* @malloc(i32 24)
  %v3_11338 = ptrtoint i32* %v1_11338 to i32
  store i32 %v3_11338, i32* %r5.global-to-local, align 4
  %v3_11348 = call i32 @function_11780(i32 %v3_11338, i32 ptrtoint (i32* @global_var_12080.312 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1a484.313 to i8*), align 4
  %v0_11358 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11358, i32* @global_var_1a480.314, align 4
  %v0_1135c = load i32, i32* %r6.global-to-local, align 4
  %v1_1135c = trunc i32 %v0_1135c to i8
  store i8 %v1_1135c, i8* bitcast (i32* @global_var_1a485.315 to i8*), align 4
  %v1_11360 = call i32* @malloc(i32 9)
  %v3_11360 = ptrtoint i32* %v1_11360 to i32
  store i32 %v3_11360, i32* %r5.global-to-local, align 4
  %v4_11370 = call i32 @function_11780(i32 %v3_11360, i32 ptrtoint ([10 x i8]* @global_var_1209c.317 to i32), i32 9)
  store i8 9, i8* bitcast (i32* @global_var_1a48c.318 to i8*), align 4
  %v0_11380 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11380, i32* @global_var_1a488.319, align 4
  %v0_11384 = load i32, i32* %r6.global-to-local, align 4
  %v1_11384 = trunc i32 %v0_11384 to i8
  store i8 %v1_11384, i8* bitcast (i32* @global_var_1a48d.320 to i8*), align 4
  %v1_11388 = call i32* @malloc(i32 16)
  %v2_11388 = ptrtoint i32* %v1_11388 to i32
  store i32 %v2_11388, i32* %r5.global-to-local, align 4
  store i32 16, i32* %sb.global-to-local, align 4
  %v4_1139c = call i32 @function_11780(i32 %v2_11388, i32 ptrtoint ([17 x i8]* @global_var_120a8.322 to i32), i32 16)
  %v0_113a4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_113a4, i32* @global_var_1a490.323, align 4
  store i8 16, i8* bitcast (i32* @global_var_1a494.324 to i8*), align 4
  %v0_113ac = load i32, i32* %r6.global-to-local, align 4
  %v1_113ac = trunc i32 %v0_113ac to i8
  store i8 %v1_113ac, i8* bitcast (i32* @global_var_1a495.325 to i8*), align 4
  %v1_113b0 = call i32* @malloc(i32 22)
  %v3_113b0 = ptrtoint i32* %v1_113b0 to i32
  store i32 %v3_113b0, i32* %r5.global-to-local, align 4
  %v4_113c0 = call i32 @function_11780(i32 %v3_113b0, i32 ptrtoint ([23 x i8]* @global_var_120bc.327 to i32), i32 22)
  %v0_113c8 = load i32, i32* %r8.global-to-local, align 4
  store i8 22, i8* bitcast (i32* @global_var_1a49c.328 to i8*), align 4
  %v0_113d0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_113d0, i32* @global_var_1a498.329, align 4
  %v0_113d4 = load i32, i32* %r6.global-to-local, align 4
  %v1_113d4 = trunc i32 %v0_113d4 to i8
  store i8 %v1_113d4, i8* bitcast (i32* @global_var_1a49d.330 to i8*), align 4
  %v1_113d8 = call i32* @malloc(i32 %v0_113c8)
  %v3_113d8 = ptrtoint i32* %v1_113d8 to i32
  %v0_113e0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_113d8, i32* %r5.global-to-local, align 4
  %v4_113e8 = call i32 @function_11780(i32 %v3_113d8, i32 ptrtoint ([8 x i8]* @global_var_120d4.332 to i32), i32 %v0_113e0)
  %v0_113f0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_113f0, i32* @global_var_1a4a0.333, align 4
  %v1_113f4 = trunc i32 %v0_113e0 to i8
  store i8 %v1_113f4, i8* bitcast (i32* @global_var_1a4a4.334 to i8*), align 4
  %v0_113f8 = load i32, i32* %r6.global-to-local, align 4
  %v1_113f8 = trunc i32 %v0_113f8 to i8
  store i8 %v1_113f8, i8* bitcast (i32* @global_var_1a4a5.335 to i8*), align 4
  %v1_113fc = call i32* @malloc(i32 5)
  %v3_113fc = ptrtoint i32* %v1_113fc to i32
  store i32 %v3_113fc, i32* %r5.global-to-local, align 4
  %v4_1140c = call i32 @function_11780(i32 %v3_113fc, i32 ptrtoint ([6 x i8]* @global_var_120dc.337 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1a4ac.338 to i8*), align 4
  %v0_1141c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1141c, i32* @global_var_1a4a8.339, align 4
  %v0_11420 = load i32, i32* %r6.global-to-local, align 4
  %v1_11420 = trunc i32 %v0_11420 to i8
  store i8 %v1_11420, i8* bitcast (i32* @global_var_1a4ad.340 to i8*), align 4
  %v1_11424 = call i32* @malloc(i32 4)
  %v3_11424 = ptrtoint i32* %v1_11424 to i32
  store i32 %v3_11424, i32* %r5.global-to-local, align 4
  %v4_11434 = call i32 @function_11780(i32 %v3_11424, i32 ptrtoint ([5 x i8]* @global_var_120e4.342 to i32), i32 4)
  %v0_1143c = load i32, i32* %fp.global-to-local, align 4
  store i8 4, i8* bitcast (i32* @global_var_1a4b4.343 to i8*), align 4
  %v0_11444 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11444, i32* @global_var_1a4b0.344, align 4
  %v0_11448 = load i32, i32* %r6.global-to-local, align 4
  %v1_11448 = trunc i32 %v0_11448 to i8
  store i8 %v1_11448, i8* bitcast (i32* @global_var_1a4b5.345 to i8*), align 4
  %v1_1144c = call i32* @malloc(i32 %v0_1143c)
  %v3_1144c = ptrtoint i32* %v1_1144c to i32
  %v0_11454 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v3_1144c, i32* %r5.global-to-local, align 4
  %v4_1145c = call i32 @function_11780(i32 %v3_1144c, i32 ptrtoint ([7 x i8]* @global_var_120ec.347 to i32), i32 %v0_11454)
  %v0_11464 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11464, i32* @global_var_1a4b8.348, align 4
  %v1_11468 = trunc i32 %v0_11454 to i8
  store i8 %v1_11468, i8* bitcast (i32* @global_var_1a4bc.349 to i8*), align 4
  %v0_1146c = load i32, i32* %r6.global-to-local, align 4
  %v1_1146c = trunc i32 %v0_1146c to i8
  store i8 %v1_1146c, i8* bitcast (i32* @global_var_1a4bd.350 to i8*), align 4
  %v1_11470 = call i32* @malloc(i32 14)
  %v2_11470 = ptrtoint i32* %v1_11470 to i32
  store i32 %v2_11470, i32* %r5.global-to-local, align 4
  store i32 14, i32* %sl.global-to-local, align 4
  %v4_11484 = call i32 @function_11780(i32 %v2_11470, i32 ptrtoint ([15 x i8]* @global_var_120f4.352 to i32), i32 14)
  %v0_1148c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1148c, i32* @global_var_1a4c0.353, align 4
  store i8 14, i8* bitcast (i32* @global_var_1a4c4.354 to i8*), align 4
  %v0_11494 = load i32, i32* %r6.global-to-local, align 4
  %v1_11494 = trunc i32 %v0_11494 to i8
  store i8 %v1_11494, i8* bitcast (i32* @global_var_1a4c5.355 to i8*), align 4
  %v1_11498 = call i32* @malloc(i32 8)
  %v2_11498 = ptrtoint i32* %v1_11498 to i32
  store i32 8, i32* %r7.global-to-local, align 4
  store i32 %v2_11498, i32* %r5.global-to-local, align 4
  %v4_114ac = call i32 @function_11780(i32 %v2_11498, i32 ptrtoint ([9 x i8]* @global_var_12104.357 to i32), i32 8)
  %v0_114b0 = load i32, i32* %r8.global-to-local, align 4
  %v0_114b4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_114b4, i32* @global_var_1a520.358, align 4
  store i8 8, i8* bitcast (i32* @global_var_1a524.359 to i8*), align 4
  %v0_114bc = load i32, i32* %r6.global-to-local, align 4
  %v1_114bc = trunc i32 %v0_114bc to i8
  store i8 %v1_114bc, i8* bitcast (i32* @global_var_1a525.360 to i8*), align 4
  %v1_114c0 = call i32* @malloc(i32 %v0_114b0)
  %v3_114c0 = ptrtoint i32* %v1_114c0 to i32
  %v0_114c8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_114c0, i32* %r5.global-to-local, align 4
  %v4_114d0 = call i32 @function_11780(i32 %v3_114c0, i32 ptrtoint ([8 x i8]* @global_var_12110.362 to i32), i32 %v0_114c8)
  %v0_114d4 = load i32, i32* %sb.global-to-local, align 4
  %v0_114d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_114d8, i32* @global_var_1a528.363, align 4
  %v1_114dc = trunc i32 %v0_114c8 to i8
  store i8 %v1_114dc, i8* bitcast (i32* @global_var_1a52c.364 to i8*), align 4
  %v0_114e0 = load i32, i32* %r6.global-to-local, align 4
  %v1_114e0 = trunc i32 %v0_114e0 to i8
  %v2_114e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_114e0 = add i32 %v2_114e0, 245
  %v4_114e0 = inttoptr i32 %v3_114e0 to i8*
  store i8 %v1_114e0, i8* %v4_114e0, align 1
  %v1_114e4 = call i32* @malloc(i32 %v0_114d4)
  %v3_114e4 = ptrtoint i32* %v1_114e4 to i32
  %v0_114ec = load i32, i32* %sb.global-to-local, align 4
  store i32 %v3_114e4, i32* %r5.global-to-local, align 4
  %v4_114f4 = call i32 @function_11780(i32 %v3_114e4, i32 ptrtoint ([17 x i8]* @global_var_12118.366 to i32), i32 %v0_114ec)
  %v0_114f8 = load i32, i32* %r7.global-to-local, align 4
  %v0_114fc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_114fc, i32* @global_var_1a4c8.367, align 4
  %v1_11500 = trunc i32 %v0_114ec to i8
  store i8 %v1_11500, i8* bitcast (i32* @global_var_1a4cc.368 to i8*), align 4
  %v0_11504 = load i32, i32* %r6.global-to-local, align 4
  %v1_11504 = trunc i32 %v0_11504 to i8
  store i8 %v1_11504, i8* bitcast (i32* @global_var_1a4cd.369 to i8*), align 4
  %v1_11508 = call i32* @malloc(i32 %v0_114f8)
  %v3_11508 = ptrtoint i32* %v1_11508 to i32
  %v0_11510 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v3_11508, i32* %r5.global-to-local, align 4
  %v4_11518 = call i32 @function_11780(i32 %v3_11508, i32 ptrtoint ([9 x i8]* @global_var_1212c.371 to i32), i32 %v0_11510)
  %v0_11520 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11520, i32* @global_var_1a4d0.372, align 4
  %v1_11524 = trunc i32 %v0_11510 to i8
  store i8 %v1_11524, i8* bitcast (i32* @global_var_1a4d4.373 to i8*), align 4
  %v0_11528 = load i32, i32* %r6.global-to-local, align 4
  %v1_11528 = trunc i32 %v0_11528 to i8
  store i8 %v1_11528, i8* bitcast (i32* @global_var_1a4d5.374 to i8*), align 4
  %v1_1152c = call i32* @malloc(i32 21)
  %v3_1152c = ptrtoint i32* %v1_1152c to i32
  store i32 %v3_1152c, i32* %r5.global-to-local, align 4
  %v3_1153c = call i32 @function_11780(i32 %v3_1152c, i32 ptrtoint (i32* @global_var_121d4.376 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1a4dc.377 to i8*), align 4
  %v0_1154c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1154c, i32* @global_var_1a4d8.378, align 4
  %v0_11550 = load i32, i32* %r6.global-to-local, align 4
  %v1_11550 = trunc i32 %v0_11550 to i8
  store i8 %v1_11550, i8* bitcast (i32* @global_var_1a4dd.379 to i8*), align 4
  %v1_11554 = call i32* @malloc(i32 17)
  %v3_11554 = ptrtoint i32* %v1_11554 to i32
  store i32 %v3_11554, i32* %r5.global-to-local, align 4
  %v4_11564 = call i32 @function_11780(i32 %v3_11554, i32 ptrtoint ([18 x i8]* @global_var_12138.381 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1a4e4.382 to i8*), align 4
  %v0_11574 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11574, i32* @global_var_1a4e0.383, align 4
  %v0_11578 = load i32, i32* %r6.global-to-local, align 4
  %v1_11578 = trunc i32 %v0_11578 to i8
  store i8 %v1_11578, i8* bitcast (i32* @global_var_1a4e5.384 to i8*), align 4
  %v1_1157c = call i32* @malloc(i32 12)
  %v3_1157c = ptrtoint i32* %v1_1157c to i32
  store i32 %v3_1157c, i32* %r5.global-to-local, align 4
  %v4_1158c = call i32 @function_11780(i32 %v3_1157c, i32 ptrtoint ([13 x i8]* @global_var_1214c.386 to i32), i32 12)
  %v0_11594 = load i32, i32* %sl.global-to-local, align 4
  store i8 12, i8* bitcast (i32* @global_var_1a4ec.387 to i8*), align 4
  %v0_1159c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1159c, i32* @global_var_1a4e8.388, align 4
  %v0_115a0 = load i32, i32* %r6.global-to-local, align 4
  %v1_115a0 = trunc i32 %v0_115a0 to i8
  store i8 %v1_115a0, i8* bitcast (i32* @global_var_1a4ed.389 to i8*), align 4
  %v1_115a4 = call i32* @malloc(i32 %v0_11594)
  %v3_115a4 = ptrtoint i32* %v1_115a4 to i32
  %v0_115ac = load i32, i32* %sl.global-to-local, align 4
  store i32 %v3_115a4, i32* %r5.global-to-local, align 4
  %v4_115b4 = call i32 @function_11780(i32 %v3_115a4, i32 ptrtoint ([15 x i8]* @global_var_1215c.391 to i32), i32 %v0_115ac)
  %v0_115bc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_115bc, i32* @global_var_1a4f0.392, align 4
  %v1_115c0 = trunc i32 %v0_115ac to i8
  store i8 %v1_115c0, i8* bitcast (i32* @global_var_1a4f4.393 to i8*), align 4
  %v0_115c4 = load i32, i32* %r6.global-to-local, align 4
  %v1_115c4 = trunc i32 %v0_115c4 to i8
  store i8 %v1_115c4, i8* bitcast (i32* @global_var_1a4f5.394 to i8*), align 4
  %v1_115c8 = call i32* @malloc(i32 19)
  %v3_115c8 = ptrtoint i32* %v1_115c8 to i32
  store i32 %v3_115c8, i32* %r5.global-to-local, align 4
  %v4_115d8 = call i32 @function_11780(i32 %v3_115c8, i32 ptrtoint ([20 x i8]* @global_var_1216c.396 to i32), i32 19)
  %v0_115e0 = load i32, i32* %r7.global-to-local, align 4
  store i8 19, i8* bitcast (i32* @global_var_1a4fc.397 to i8*), align 4
  %v0_115e8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_115e8, i32* @global_var_1a4f8.398, align 4
  %v0_115ec = load i32, i32* %r6.global-to-local, align 4
  %v1_115ec = trunc i32 %v0_115ec to i8
  store i8 %v1_115ec, i8* bitcast (i32* @global_var_1a4fd.399 to i8*), align 4
  %v1_115f0 = call i32* @malloc(i32 %v0_115e0)
  %v3_115f0 = ptrtoint i32* %v1_115f0 to i32
  %v0_115f8 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v3_115f0, i32* %r5.global-to-local, align 4
  %v4_11600 = call i32 @function_11780(i32 %v3_115f0, i32 ptrtoint ([9 x i8]* @global_var_12180.401 to i32), i32 %v0_115f8)
  %v0_11608 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11608, i32* @global_var_1a500.402, align 4
  %v1_1160c = trunc i32 %v0_115f8 to i8
  store i8 %v1_1160c, i8* bitcast (i32* @global_var_1a504.403 to i8*), align 4
  %v0_11610 = load i32, i32* %r6.global-to-local, align 4
  %v1_11610 = trunc i32 %v0_11610 to i8
  store i8 %v1_11610, i8* bitcast (i32* @global_var_1a505.404 to i8*), align 4
  %v1_11614 = call i32* @malloc(i32 5)
  %v3_11614 = ptrtoint i32* %v1_11614 to i32
  store i32 %v3_11614, i32* %r5.global-to-local, align 4
  %v4_11624 = call i32 @function_11780(i32 %v3_11614, i32 ptrtoint ([6 x i8]* @global_var_1218c.406 to i32), i32 5)
  %v0_1162c = load i32, i32* %fp.global-to-local, align 4
  store i8 5, i8* bitcast (i32* @global_var_1a50c.407 to i8*), align 4
  %v0_11634 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11634, i32* @global_var_1a508.408, align 4
  %v0_11638 = load i32, i32* %r6.global-to-local, align 4
  %v1_11638 = trunc i32 %v0_11638 to i8
  store i8 %v1_11638, i8* bitcast (i32* @global_var_1a50d.409 to i8*), align 4
  %v1_1163c = call i32* @malloc(i32 %v0_1162c)
  %v3_1163c = ptrtoint i32* %v1_1163c to i32
  %v0_11644 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v3_1163c, i32* %r5.global-to-local, align 4
  %v4_1164c = call i32 @function_11780(i32 %v3_1163c, i32 ptrtoint ([7 x i8]* @global_var_12194.411 to i32), i32 %v0_11644)
  %v0_11654 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11654, i32* @global_var_1a510.412, align 4
  %v1_11658 = trunc i32 %v0_11644 to i8
  store i8 %v1_11658, i8* bitcast (i32* @global_var_1a514.413 to i8*), align 4
  %v0_1165c = load i32, i32* %r6.global-to-local, align 4
  %v1_1165c = trunc i32 %v0_1165c to i8
  store i8 %v1_1165c, i8* bitcast (i32* @global_var_1a515.414 to i8*), align 4
  %v1_11660 = call i32* @malloc(i32 23)
  %v3_11660 = ptrtoint i32* %v1_11660 to i32
  store i32 %v3_11660, i32* %r5.global-to-local, align 4
  %v4_11670 = call i32 @function_11780(i32 %v3_11660, i32 ptrtoint ([24 x i8]* @global_var_1219c.416 to i32), i32 23)
  %v0_11678 = load i32, i32* %r6.global-to-local, align 4
  %v1_11678 = trunc i32 %v0_11678 to i8
  store i8 %v1_11678, i8* bitcast (i32* @global_var_1a51d.417 to i8*), align 4
  %v0_1167c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1167c, i32* @global_var_1a518.418, align 4
  store i8 23, i8* bitcast (i32* @global_var_1a51c.419 to i8*), align 4
  %v2_11684 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_11684, i32* @r4, align 4
  ret i32 %v4_11670

; uselistorder directives
  uselistorder i32 %v3_1163c, { 1, 0 }
  uselistorder i32 %v3_115f0, { 1, 0 }
  uselistorder i32 %v3_115a4, { 1, 0 }
  uselistorder i32 %v3_11508, { 1, 0 }
  uselistorder i32 %v3_114e4, { 1, 0 }
  uselistorder i32 %v3_114c0, { 1, 0 }
  uselistorder i32 %v2_11498, { 1, 0 }
  uselistorder i32 %v3_1144c, { 1, 0 }
  uselistorder i32 %v3_113d8, { 1, 0 }
  uselistorder i32 %v3_112c4, { 1, 0 }
  uselistorder i32 %v3_1129c, { 1, 0 }
  uselistorder i32 %v2_11274, { 1, 0 }
  uselistorder i32 %v3_11228, { 0, 2, 1 }
  uselistorder i32 %v2_111f8, { 0, 2, 1 }
  uselistorder i32 23, { 1, 0, 6, 2, 3, 4, 5 }
  uselistorder i32 12, { 9, 5, 26, 31, 23, 32, 19, 16, 17, 18, 20, 21, 22, 24, 27, 28, 25, 33, 34, 35, 4, 36, 37, 38, 29, 30, 40, 41, 15, 42, 10, 43, 11, 44, 12, 45, 3, 46, 39, 81, 47, 48, 49, 50, 13, 51, 52, 53, 54, 55, 14, 56, 57, 58, 59, 60, 61, 6, 62, 63, 64, 65, 66, 67, 7, 68, 69, 8, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 0, 1, 2 }
  uselistorder i32 17, { 3, 0, 14, 4, 15, 5, 6, 7, 8, 16, 17, 1, 18, 19, 20, 2, 21, 22, 23, 24, 25, 26, 9, 27, 10, 28, 29, 30, 11, 31, 12, 13 }
  uselistorder i32 21, { 3, 2, 8, 9, 10, 7, 0, 1, 4, 11, 5, 12, 6, 13 }
  uselistorder i32 14, { 0, 18, 1, 17, 4, 19, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 16, 22, 23, 24, 25, 2, 26, 27, 28, 29, 3, 30 }
  uselistorder i8 5, { 11, 12, 13, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 5, { 15, 4, 16, 5, 2, 18, 24, 19, 25, 20, 26, 17, 27, 3, 0, 21, 22, 23, 28, 29, 6, 30, 31, 32, 7, 33, 34, 35, 36, 8, 37, 38, 39, 40, 9, 41, 45, 46, 47, 48, 10, 49, 50, 51, 52, 11, 53, 54, 55, 56, 57, 58, 59, 12, 60, 61, 62, 63, 64, 65, 66, 13, 67, 68, 69, 70, 71, 72, 73, 74, 14, 75, 76, 42, 1, 43, 44 }
  uselistorder i32 22, { 1, 0, 6, 2, 7, 3, 8, 4, 9, 5 }
  uselistorder i8 16, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16 }
  uselistorder i32 19, { 5, 1, 6, 2, 0, 11, 7, 8, 9, 10, 12, 3, 13, 4, 14 }
  uselistorder i32 7, { 0, 14, 24, 2, 16, 20, 17, 21, 18, 22, 15, 23, 1, 19, 25, 26, 3, 27, 28, 4, 29, 30, 5, 31, 32, 6, 33, 34, 35, 36, 7, 37, 38, 39, 40, 8, 41, 42, 43, 44, 45, 9, 46, 47, 48, 49, 50, 10, 51, 52, 53, 54, 11, 55, 12, 13, 56 }
  uselistorder i32 6, { 2, 29, 3, 15, 25, 16, 26, 17, 27, 14, 28, 0, 18, 30, 1, 4, 31, 32, 33, 19, 34, 5, 35, 36, 37, 20, 38, 6, 39, 40, 41, 21, 42, 43, 44, 22, 45, 49, 50, 51, 7, 52, 53, 54, 55, 8, 56, 57, 58, 59, 60, 23, 61, 9, 62, 63, 64, 65, 66, 67, 24, 68, 10, 69, 70, 71, 72, 11, 73, 12, 13, 74, 46, 47, 48 }
  uselistorder i32 29, { 1, 0, 4, 5, 3, 2 }
  uselistorder i32 (i32, i32, i32)* @function_11780, { 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 0, 5, 4, 3, 2, 1, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1a438.264 to i32), { 5, 0, 1, 2, 3, 4 }
  uselistorder i32* (i32)* @malloc, { 10, 23, 3, 0, 32, 28, 29, 20, 1, 25, 19, 17, 26, 24, 27, 11, 21, 9, 22, 14, 34, 15, 8, 5, 16, 2, 31, 12, 13, 18, 7, 30, 33, 6, 4, 35 }
}

define i32 @function_11704(i8* %arg1) local_unnamed_addr {
dec_label_pc_11704:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_11708 = load i8, i8* %arg1, align 1
  %v4_11708 = zext i8 %v3_11708 to i32
  %v2_1170c = icmp eq i8 %v3_11708, 0
  br i1 %v2_1170c, label %dec_label_pc_11728, label %bb

dec_label_pc_11728:                               ; preds = %dec_label_pc_11718, %dec_label_pc_11704
  %merge = phi i32 [ %v4_11708, %dec_label_pc_11704 ], [ %v1_11718, %dec_label_pc_11718 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_11704
  br label %dec_label_pc_11718

dec_label_pc_11718:                               ; preds = %dec_label_pc_11718, %bb
  %v0_11718 = phi i32 [ %v1_11718, %dec_label_pc_11718 ], [ 0, %bb ]
  %v1_11718 = add i32 %v0_11718, 1
  %v2_1171c = add i32 %v1_11718, %tmp
  %v3_1171c = inttoptr i32 %v2_1171c to i8*
  %v4_1171c = load i8, i8* %v3_1171c, align 1
  %v2_11720 = icmp eq i8 %v4_1171c, 0
  br i1 %v2_11720, label %dec_label_pc_11728, label %dec_label_pc_11718

; uselistorder directives
  uselistorder i32 %v1_11718, { 1, 0, 2 }
}

define i32 @function_1172c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1172c:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_1172c = load i8, i8* %arg1, align 1
  %v3_1172c = zext i8 %v2_1172c to i32
  %v2_11730 = icmp eq i8 %v2_1172c, 0
  br i1 %v2_11730, label %dec_label_pc_11774, label %dec_label_pc_11738

dec_label_pc_11738:                               ; preds = %dec_label_pc_1172c
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1173c

dec_label_pc_1173c:                               ; preds = %dec_label_pc_1173c, %dec_label_pc_11738
  %v0_1173c = phi i32 [ %v1_1173c, %dec_label_pc_1173c ], [ 0, %dec_label_pc_11738 ]
  %v1_1173c = add i32 %v0_1173c, 1
  store i32 %v1_1173c, i32* %ip.global-to-local, align 4
  %v2_11740 = add i32 %v1_1173c, %tmp
  %v3_11740 = inttoptr i32 %v2_11740 to i8*
  %v4_11740 = load i8, i8* %v3_11740, align 1
  %v2_11744 = icmp eq i8 %v4_11740, 0
  br i1 %v2_11744, label %dec_label_pc_1174c, label %dec_label_pc_1173c

dec_label_pc_1174c:                               ; preds = %dec_label_pc_1173c
  %v7_1174c = icmp eq i32 %v0_1173c, -2
  br i1 %v7_1174c, label %dec_label_pc_1176c, label %dec_label_pc_11758.preheader

dec_label_pc_11758.preheader:                     ; preds = %dec_label_pc_1174c, %dec_label_pc_11774
  %storemerge = phi i32 [ %v3_1172c, %dec_label_pc_11774 ], [ %v1_1173c, %dec_label_pc_1174c ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_11764.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_11758

dec_label_pc_11758:                               ; preds = %dec_label_pc_11758.dec_label_pc_11758_crit_edge, %dec_label_pc_11758.preheader
  %v2_11764 = phi i32 [ %v5_11764, %dec_label_pc_11758.dec_label_pc_11758_crit_edge ], [ %v2_11764.pre, %dec_label_pc_11758.preheader ]
  %v0_1175c = phi i32 [ %v0_1175c.pre, %dec_label_pc_11758.dec_label_pc_11758_crit_edge ], [ %tmp, %dec_label_pc_11758.preheader ]
  %v0_11758 = phi i32 [ %v0_11758.pre, %dec_label_pc_11758.dec_label_pc_11758_crit_edge ], [ %storemerge, %dec_label_pc_11758.preheader ]
  %v1_11758 = add i32 %v0_11758, -1
  store i32 %v1_11758, i32* %r2.global-to-local, align 4
  %v1_1175c = inttoptr i32 %v0_1175c to i8*
  %v2_1175c = load i8, i8* %v1_1175c, align 1
  %v5_1175c = add i32 %v0_1175c, 1
  store i32 %v5_1175c, i32* %r1.global-to-local, align 4
  %v3_11760 = icmp eq i32 %v0_11758, 0
  %v3_11764 = inttoptr i32 %v2_11764 to i8*
  store i8 %v2_1175c, i8* %v3_11764, align 1
  %v4_11764 = load i32, i32* @r0, align 4
  %v5_11764 = add i32 %v4_11764, 1
  store i32 %v5_11764, i32* @r0, align 4
  br i1 %v3_11760, label %dec_label_pc_1176c.loopexit, label %dec_label_pc_11758.dec_label_pc_11758_crit_edge

dec_label_pc_11758.dec_label_pc_11758_crit_edge:  ; preds = %dec_label_pc_11758
  %v0_11758.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_1175c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11758

dec_label_pc_1176c.loopexit:                      ; preds = %dec_label_pc_11758
  %v0_1176c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1176c

dec_label_pc_1176c:                               ; preds = %dec_label_pc_1176c.loopexit, %dec_label_pc_1174c
  %v0_1176c = phi i32 [ %v0_1176c.pre, %dec_label_pc_1176c.loopexit ], [ %v1_1173c, %dec_label_pc_1174c ]
  ret i32 %v0_1176c

dec_label_pc_11774:                               ; preds = %dec_label_pc_1172c
  store i32 %v3_1172c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11758.preheader

; uselistorder directives
  uselistorder i32 %v5_11764, { 1, 0 }
  uselistorder i32 %v0_1175c, { 1, 0 }
  uselistorder i32 %v1_1173c, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_1172c, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11758.preheader, { 1, 0 }
}

define i32 @function_11780(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11780:
  %ip.global-to-local = alloca i32, align 4
  %v2_11780 = icmp eq i32 %arg3, 0
  br i1 %v2_11780, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_1178c, %dec_label_pc_11780
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_11780
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1178c

dec_label_pc_1178c:                               ; preds = %dec_label_pc_1178c, %bb
  %v0_1178c = phi i32 [ %v1_11794, %dec_label_pc_1178c ], [ 0, %bb ]
  %v2_1178c = add i32 %v0_1178c, %arg2
  %v3_1178c = inttoptr i32 %v2_1178c to i8*
  %v4_1178c = load i8, i8* %v3_1178c, align 1
  %v4_11790 = add i32 %v0_1178c, %arg1
  %v5_11790 = inttoptr i32 %v4_11790 to i8*
  store i8 %v4_1178c, i8* %v5_11790, align 1
  %v0_11794 = load i32, i32* %ip.global-to-local, align 4
  %v1_11794 = add i32 %v0_11794, 1
  store i32 %v1_11794, i32* %ip.global-to-local, align 4
  %v9_11798 = icmp eq i32 %v1_11794, %arg3
  br i1 %v9_11798, label %.loopexit, label %dec_label_pc_1178c

; uselistorder directives
  uselistorder i32 %v1_11794, { 1, 2, 0 }
}

define i32 @function_117a4() local_unnamed_addr {
dec_label_pc_117a4:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v0_117a4 = load i32, i32* @r1, align 4
  %v2_117a4 = icmp eq i32 %v0_117a4, 0
  br i1 %v2_117a4, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_117a4
  %v2_117a8 = load i32, i32* @r0, align 4
  ret i32 %v2_117a8

bb3:                                              ; preds = %dec_label_pc_117a4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_117b44 = load i32, i32* @r0, align 4
  %v5_117b45 = inttoptr i32 %v3_117b44 to i8*
  store i8 0, i8* %v5_117b45, align 1
  %v0_117b86 = load i32, i32* %r3.global-to-local, align 4
  %v1_117b87 = add i32 %v0_117b86, 1
  store i32 %v1_117b87, i32* %r3.global-to-local, align 4
  %v1_117bc8 = load i32, i32* @r1, align 4
  %v9_117bc10 = icmp eq i32 %v1_117b87, %v1_117bc8
  br i1 %v9_117bc10, label %dec_label_pc_117c4, label %dec_label_pc_117b4.dec_label_pc_117b4_crit_edge

dec_label_pc_117b4.dec_label_pc_117b4_crit_edge:  ; preds = %bb3, %dec_label_pc_117b4.dec_label_pc_117b4_crit_edge
  %v1_117b811 = phi i32 [ %v1_117b8, %dec_label_pc_117b4.dec_label_pc_117b4_crit_edge ], [ %v1_117b87, %bb3 ]
  %v0_117b4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_117b4.pre to i8
  %v3_117b4 = load i32, i32* @r0, align 4
  %v4_117b4 = add i32 %v3_117b4, %v1_117b811
  %v5_117b4 = inttoptr i32 %v4_117b4 to i8*
  store i8 %extract.t, i8* %v5_117b4, align 1
  %v0_117b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_117b8 = add i32 %v0_117b8, 1
  store i32 %v1_117b8, i32* %r3.global-to-local, align 4
  %v1_117bc = load i32, i32* @r1, align 4
  %v9_117bc = icmp eq i32 %v1_117b8, %v1_117bc
  br i1 %v9_117bc, label %dec_label_pc_117c4, label %dec_label_pc_117b4.dec_label_pc_117b4_crit_edge

dec_label_pc_117c4:                               ; preds = %dec_label_pc_117b4.dec_label_pc_117b4_crit_edge, %bb3
  %v1_117c4 = load i32, i32* @r0, align 4
  ret i32 %v1_117c4

; uselistorder directives
  uselistorder i32 %v1_117b8, { 1, 2, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 3, 4, 1, 2 }
  uselistorder label %dec_label_pc_117b4.dec_label_pc_117b4_crit_edge, { 1, 0 }
}

define i32 @function_117c8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_117c8:
  %v7_117dc = icmp sgt i32 %arg4, %arg2
  br i1 %v7_117dc, label %dec_label_pc_117e0, label %dec_label_pc_117e8

dec_label_pc_117e0:                               ; preds = %dec_label_pc_117fc, %dec_label_pc_117c8, %dec_label_pc_117e8
  ret i32 -1

dec_label_pc_117e8:                               ; preds = %dec_label_pc_117c8
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_117e0, label %dec_label_pc_117f0

dec_label_pc_117f0:                               ; preds = %dec_label_pc_117e8
  br label %dec_label_pc_11808

dec_label_pc_117fc:                               ; preds = %dec_label_pc_11820, %dec_label_pc_11808
  %v1_117fc = add i32 %v0_11828, 1
  %v9_11800 = icmp eq i32 %v1_117fc, %arg2
  br i1 %v9_11800, label %dec_label_pc_117e0, label %dec_label_pc_11808

dec_label_pc_11808:                               ; preds = %dec_label_pc_117fc, %dec_label_pc_117f0
  %v0_11828 = phi i32 [ %v1_117fc, %dec_label_pc_117fc ], [ 0, %dec_label_pc_117f0 ]
  %v0_11814 = phi i32 [ %v1_11814., %dec_label_pc_117fc ], [ 0, %dec_label_pc_117f0 ]
  %v2_11808 = add i32 %v0_11814, %arg3
  %v3_11808 = inttoptr i32 %v2_11808 to i8*
  %v4_11808 = load i8, i8* %v3_11808, align 1
  %v2_1180c = add i32 %v0_11828, %arg1
  %v3_1180c = inttoptr i32 %v2_1180c to i8*
  %v4_1180c = load i8, i8* %v3_1180c, align 1
  %v9_11810 = icmp eq i8 %v4_1180c, %v4_11808
  %v1_11814 = add i32 %v0_11814, 1
  %v1_11814. = select i1 %v9_11810, i32 %v1_11814, i32 0
  br i1 %v9_11810, label %dec_label_pc_11820, label %dec_label_pc_117fc

dec_label_pc_11820:                               ; preds = %dec_label_pc_11808
  %v9_11820 = icmp eq i32 %v1_11814., %arg4
  br i1 %v9_11820, label %dec_label_pc_11828, label %dec_label_pc_117fc

dec_label_pc_11828:                               ; preds = %dec_label_pc_11820
  %v1_11828 = add i32 %v0_11828, 1
  ret i32 %v1_11828

; uselistorder directives
  uselistorder i1 %v9_11810, { 1, 0 }
  uselistorder i32 %v0_11814, { 1, 0 }
  uselistorder label %dec_label_pc_117e0, { 0, 2, 1 }
}

define i32 @function_11830(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11830:
  %tmp = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_1183c

dec_label_pc_1183c:                               ; preds = %.thread, %dec_label_pc_11854, %bb, %dec_label_pc_11830
  %v0_1183c = phi i32 [ %tmp, %dec_label_pc_11830 ], [ %v5_1183c, %bb ], [ %v5_1183c, %dec_label_pc_11854 ], [ %v5_1183c, %.thread ]
  %v1_1183c = inttoptr i32 %v0_1183c to i8*
  %v2_1183c = load i8, i8* %v1_1183c, align 1
  %v5_1183c = add i32 %v0_1183c, 1
  %v7_11844 = icmp eq i8 %v2_1183c, 9
  br i1 %v7_11844, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_1183c
  br label %dec_label_pc_1183c

bb:                                               ; preds = %dec_label_pc_1183c
  %v8_11848 = icmp eq i8 %v2_1183c, 32
  br i1 %v8_11848, label %dec_label_pc_1183c, label %dec_label_pc_11854

dec_label_pc_11854:                               ; preds = %bb
  %v7_11854 = icmp eq i8 %v2_1183c, 10
  br i1 %v7_11854, label %dec_label_pc_1183c, label %dec_label_pc_1185c

dec_label_pc_1185c:                               ; preds = %dec_label_pc_11854
  %v7_1185c = icmp eq i8 %v2_1183c, 45
  br i1 %v7_1185c, label %dec_label_pc_1193c, label %dec_label_pc_11864

dec_label_pc_11864:                               ; preds = %dec_label_pc_1185c
  %v7_11864 = icmp eq i8 %v2_1183c, 43
  br i1 %v7_11864, label %bb54, label %dec_label_pc_11874

bb54:                                             ; preds = %dec_label_pc_11864
  %v2_11868 = inttoptr i32 %v5_1183c to i8*
  %v3_11868 = load i8, i8* %v2_11868, align 1
  %v6_11868 = add i32 %v0_1183c, 2
  br label %dec_label_pc_11874

dec_label_pc_11874:                               ; preds = %bb54, %dec_label_pc_11864, %dec_label_pc_1193c
  %v0_1192042 = phi i32 [ %v5_1193c, %dec_label_pc_1193c ], [ %v5_1183c, %dec_label_pc_11864 ], [ %v6_11868, %bb54 ]
  %v0_1189c17.in = phi i8 [ %v2_1193c, %dec_label_pc_1193c ], [ %v2_1183c, %dec_label_pc_11864 ], [ %v3_11868, %bb54 ]
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_1193c ], [ 2147483647, %dec_label_pc_11864 ], [ 2147483647, %bb54 ]
  %v0_1194c = phi i32 [ 1, %dec_label_pc_1193c ], [ 0, %dec_label_pc_11864 ], [ 0, %bb54 ]
  %v2_1187c = urem i32 %storemerge1, %arg2
  %v2_1188c = udiv i32 %storemerge1, %arg2
  store i32 %v2_1188c, i32* @lr, align 4
  br label %dec_label_pc_1189c

dec_label_pc_1189c:                               ; preds = %.thread8, %dec_label_pc_11874
  %v0_11920 = phi i32 [ %v5_11920, %.thread8 ], [ %v0_1192042, %dec_label_pc_11874 ]
  %v2_1191811 = phi i32 [ %v1_1193429, %.thread8 ], [ 0, %dec_label_pc_11874 ]
  %v1_118f4 = phi i32 [ %v0_1192827, %.thread8 ], [ 0, %dec_label_pc_11874 ]
  %v1_118dc.in = phi i8 [ %v2_11920, %.thread8 ], [ %v0_1189c17.in, %dec_label_pc_11874 ]
  %v1_118dc = zext i8 %v1_118dc.in to i32
  %v1_1189c = urem i32 %v1_118dc, 256
  %v1_118a0 = add nsw i32 %v1_1189c, -48
  %v1_118a8 = add nsw i32 %v1_1189c, -97
  %v1_118ac = add nsw i32 %v1_118dc, -48
  %v1_118b0 = add nsw i32 %v1_1189c, -65
  %tmp77 = icmp ult i32 %v1_118a0, 10
  br i1 %tmp77, label %dec_label_pc_118e0, label %dec_label_pc_118b8

dec_label_pc_118b8:                               ; preds = %dec_label_pc_1189c
  %v2_118b8 = icmp ugt i32 %v1_118b0, 24
  %v7_118b8 = icmp eq i32 %v1_118b0, 25
  %v2_118bc = xor i1 %v7_118b8, true
  %v3_118bc = and i1 %v2_118b8, %v2_118bc
  br i1 %v3_118bc, label %bb55, label %bb56

bb55:                                             ; preds = %dec_label_pc_118b8
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_118b8, %bb55
  %v0_118d021 = phi i32 [ %v1_118ac, %dec_label_pc_118b8 ], [ 0, %bb55 ]
  %v2_118c0 = xor i1 %v2_118b8, true
  %v3_118c0 = or i1 %v7_118b8, %v2_118c0
  br i1 %v3_118c0, label %bb57, label %bb58

bb57:                                             ; preds = %bb56
  br label %bb58

bb58:                                             ; preds = %bb56, %bb57
  %v0_118d0 = phi i32 [ %v0_118d021, %bb56 ], [ 1, %bb57 ]
  br i1 %v3_118bc, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  %v6_118c8 = icmp ugt i32 %v1_118a8, 24
  %v11_118c8 = icmp eq i32 %v1_118a8, 25
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v1_118cc = phi i1 [ %v7_118b8, %bb58 ], [ %v11_118c8, %bb59 ]
  %v0_118cc = phi i1 [ %v2_118b8, %bb58 ], [ %v6_118c8, %bb59 ]
  %v2_118cc = xor i1 %v1_118cc, true
  %v3_118cc = and i1 %v0_118cc, %v2_118cc
  br i1 %v3_118cc, label %dec_label_pc_11928, label %dec_label_pc_118d0

dec_label_pc_118d0:                               ; preds = %bb60
  %v2_118d0 = icmp eq i32 %v0_118d0, 0
  %. = select i1 %v2_118d0, i32 87, i32 55
  %v2_118dc = sub nsw i32 %v1_118dc, %.
  br label %dec_label_pc_118e0

dec_label_pc_118e0:                               ; preds = %dec_label_pc_1189c, %dec_label_pc_118d0
  %v0_118f437 = phi i32 [ %v1_118b0, %dec_label_pc_1189c ], [ %., %dec_label_pc_118d0 ]
  %v3_1191812 = phi i32 [ %v1_118ac, %dec_label_pc_1189c ], [ %v2_118dc, %dec_label_pc_118d0 ]
  %v6_118e4 = icmp slt i32 %v3_1191812, %arg2
  br i1 %v6_118e4, label %dec_label_pc_118e8, label %dec_label_pc_11928

dec_label_pc_118e8:                               ; preds = %dec_label_pc_118e0
  %v3_118e8 = icmp uge i32 %v2_1191811, %v2_1188c
  %v9_118e8 = icmp eq i32 %v2_1191811, %v2_1188c
  %v2_118ec = xor i1 %v3_118e8, true
  %v3_118ec = or i1 %v9_118e8, %v2_118ec
  br i1 %v3_118ec, label %bb63, label %bb64

bb63:                                             ; preds = %dec_label_pc_118e8
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_118e8, %bb63
  %v0_118f436 = phi i32 [ %v0_118f437, %dec_label_pc_118e8 ], [ 0, %bb63 ]
  %v2_118f0 = xor i1 %v9_118e8, true
  %v3_118f0 = and i1 %v3_118e8, %v2_118f0
  br i1 %v3_118f0, label %bb65, label %bb66

bb65:                                             ; preds = %bb64
  br label %bb66

bb66:                                             ; preds = %bb64, %bb65
  %v0_118f4 = phi i32 [ %v0_118f436, %bb64 ], [ 1, %bb65 ]
  %tmp78 = icmp slt i32 %v1_118f4, 0
  %v4_118f4 = zext i1 %tmp78 to i32
  %v5_118f4 = or i32 %v0_118f4, %v4_118f4
  %v7_118f4 = icmp eq i32 %v5_118f4, 0
  br i1 %v7_118f4, label %dec_label_pc_11900, label %.thread8

dec_label_pc_11900:                               ; preds = %bb66
  %v7_11910 = icmp sgt i32 %v3_1191812, %v2_1187c
  br i1 %v7_11910, label %bb69, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_11900
  br label %bb70

bb69:                                             ; preds = %dec_label_pc_11900
  %v2_11914 = icmp eq i1 %v9_118e8, false
  br i1 %v2_11914, label %bb70, label %.thread8

bb70:                                             ; preds = %bb69, %.thread5
  %v4_1191813 = mul i32 %v2_1191811, %arg2
  %v5_1191814 = add i32 %v3_1191812, %v4_1191813
  br label %.thread8

.thread8:                                         ; preds = %bb69, %bb66, %bb70
  %v1_1193429 = phi i32 [ %v2_1191811, %bb69 ], [ %v2_1191811, %bb66 ], [ %v5_1191814, %bb70 ]
  %v0_1192827 = phi i32 [ -1, %bb69 ], [ -1, %bb66 ], [ 1, %bb70 ]
  %v1_11920 = inttoptr i32 %v0_11920 to i8*
  %v2_11920 = load i8, i8* %v1_11920, align 1
  %v5_11920 = add i32 %v0_11920, 1
  br label %dec_label_pc_1189c

dec_label_pc_11928:                               ; preds = %dec_label_pc_118e0, %bb60
  %v1_11928 = icmp slt i32 %v1_118f4, 0
  %v2_1194c = icmp eq i32 %v0_1194c, 0
  br i1 %v1_11928, label %dec_label_pc_1194c, label %dec_label_pc_11930

dec_label_pc_11930:                               ; preds = %dec_label_pc_11928
  br i1 %v2_1194c, label %bb72, label %bb71

bb71:                                             ; preds = %dec_label_pc_11930
  %v2_11934 = sub i32 0, %v2_1191811
  br label %bb72

bb72:                                             ; preds = %dec_label_pc_11930, %bb71
  %v23_11938 = phi i32 [ %v2_1191811, %dec_label_pc_11930 ], [ %v2_11934, %bb71 ]
  ret i32 %v23_11938

dec_label_pc_1193c:                               ; preds = %dec_label_pc_1185c
  %v1_1193c = inttoptr i32 %v5_1183c to i8*
  %v2_1193c = load i8, i8* %v1_1193c, align 1
  %v5_1193c = add i32 %v0_1183c, 2
  br label %dec_label_pc_11874

dec_label_pc_1194c:                               ; preds = %dec_label_pc_11928
  %.76 = select i1 %v2_1194c, i32 2147483647, i32 -2147483648
  ret i32 %.76

; uselistorder directives
  uselistorder i1 %v9_118e8, { 1, 0, 2 }
  uselistorder i1 %v3_118e8, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_118b8, { 1, 2, 0 }
  uselistorder i1 %v2_118b8, { 1, 0, 2 }
  uselistorder i32 %v1_1189c, { 1, 2, 0 }
  uselistorder i32 %v1_118dc, { 1, 0, 2 }
  uselistorder i32 %v1_118f4, { 1, 0 }
  uselistorder i32 %v2_1191811, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_11920, { 1, 0 }
  uselistorder i32 %v2_1188c, { 1, 0, 2 }
  uselistorder i32 %storemerge1, { 1, 0 }
  uselistorder i32 %v5_1183c, { 4, 3, 5, 2, 1, 0 }
  uselistorder i32 %v0_1183c, { 0, 1, 3, 2 }
  uselistorder i32 25, { 23, 24, 3, 11, 4, 12, 5, 13, 2, 14, 10, 6, 15, 0, 16, 17, 18, 7, 8, 19, 9, 20, 21, 1, 22 }
  uselistorder i32 24, { 33, 34, 12, 11, 62, 41, 63, 42, 43, 50, 54, 35, 36, 37, 38, 39, 40, 57, 44, 45, 46, 47, 48, 49, 51, 52, 58, 53, 59, 55, 56, 64, 65, 66, 60, 61, 67, 13, 14, 15, 16, 0, 17, 18, 1, 19, 2, 20, 3, 4, 21, 5, 6, 70, 22, 7, 71, 23, 24, 8, 72, 25, 73, 74, 75, 26, 27, 9, 76, 28, 77, 29, 30, 10, 78, 31, 79, 80, 68, 32, 69 }
  uselistorder i8 32, { 7, 8, 9, 0, 10, 11, 1, 2, 12, 3, 4, 5, 6 }
  uselistorder i8 9, { 3, 4, 2, 0, 1 }
  uselistorder i32 %arg2, { 0, 1, 3, 2 }
  uselistorder label %bb72, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
  uselistorder label %dec_label_pc_118e0, { 1, 0 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %dec_label_pc_11874, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1183c, { 1, 2, 0, 3 }
}

define i32 @function_1195c(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1195c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_1195c = load i32, i32* @r4, align 4
  store i32 %v3_1195c, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11974

dec_label_pc_11974:                               ; preds = %dec_label_pc_119a0.dec_label_pc_11974_crit_edge, %dec_label_pc_1195c
  %v0_11978 = phi i32 [ %v0_11978.pre, %dec_label_pc_119a0.dec_label_pc_11974_crit_edge ], [ %arg3, %dec_label_pc_1195c ]
  %v0_11974 = phi i32 [ %v1_1198c, %dec_label_pc_119a0.dec_label_pc_11974_crit_edge ], [ %tmp, %dec_label_pc_1195c ]
  %v3_11980 = inttoptr i32 %v0_11974 to i32*
  %v4_11980 = call i32 @read(i32 %v0_11978, i32* %v3_11980, i32 1)
  %v7_11984 = icmp eq i32 %v4_11980, 1
  %v0_11988 = load i32, i32* %r4.global-to-local, align 4
  %v1_1198c = add i32 %v0_11988, 1
  store i32 %v1_1198c, i32* %r4.global-to-local, align 4
  %v0_11994 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_11984, label %dec_label_pc_11994, label %dec_label_pc_119ac

dec_label_pc_11994:                               ; preds = %dec_label_pc_11974
  %v1_11994 = add i32 %v0_11994, 1
  store i32 %v1_11994, i32* %r5.global-to-local, align 4
  %v0_11998 = load i32, i32* %r7.global-to-local, align 4
  %v7_1199c = icmp sgt i32 %v0_11998, %v1_11994
  br i1 %v7_1199c, label %dec_label_pc_119a0, label %dec_label_pc_119ac

dec_label_pc_119a0:                               ; preds = %dec_label_pc_11994
  %v1_119a0 = inttoptr i32 %v0_11988 to i8*
  %v2_119a0 = load i8, i8* %v1_119a0, align 1
  %v7_119a4 = icmp eq i8 %v2_119a0, 10
  br i1 %v7_119a4, label %dec_label_pc_119ac, label %dec_label_pc_119a0.dec_label_pc_11974_crit_edge

dec_label_pc_119a0.dec_label_pc_11974_crit_edge:  ; preds = %dec_label_pc_119a0
  %v0_11978.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11974

dec_label_pc_119ac:                               ; preds = %dec_label_pc_11974, %dec_label_pc_119a0, %dec_label_pc_11994
  %v0_119ac = phi i32 [ %v1_11994, %dec_label_pc_119a0 ], [ %v1_11994, %dec_label_pc_11994 ], [ %v0_11994, %dec_label_pc_11974 ]
  %v2_119ac = icmp eq i32 %v0_119ac, 0
  %v1_119b0 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_119ac, i32 0, i32 %v1_119b0
  %v2_119b8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_119b8, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_1198c, { 1, 0 }
  uselistorder i32 %tmp, { 0, 2, 1 }
  uselistorder i8 10, { 1, 0, 2 }
  uselistorder i32 (i32, i32*, i32)* @read, { 3, 1, 0, 2, 4 }
  uselistorder label %dec_label_pc_119ac, { 1, 2, 0 }
}

define i32 @function_119bc() local_unnamed_addr {
dec_label_pc_119bc:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_119cc = call i32* @__errno_location()
  store i32 0, i32* %v0_119cc, align 4
  %v3_119e4 = call i32 @socket(i32 2, i32 0, i32 0)
  %v7_119f0 = icmp eq i32 %v3_119e4, -1
  store i32 %v3_119e4, i32* %r5.global-to-local, align 4
  %v2_119fc = load i32, i32* %r4.global-to-local, align 4
  br i1 %v7_119f0, label %dec_label_pc_11a4c, label %dec_label_pc_11a10

dec_label_pc_11a10:                               ; preds = %dec_label_pc_119bc
  %v7_119fc = shl i32 2056, %v2_119fc
  %v8_119fc = or i32 %v7_119fc, 2056
  %v2_119c4 = ptrtoint i32* %stack_var_-40 to i32
  %v1_11a00 = inttoptr i32 %v2_119fc to %sockaddr*
  store i32 2, i32* %stack_var_-40, align 4
  %v6_11a2c = call i32 @connect(i32 %v2_119c4, %sockaddr* %v1_11a00, i32 %v2_119fc)
  %tmp13 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v0_11a38 = load i32, i32* %r5.global-to-local, align 4
  %v6_11a3c = call i32 @getsockname(i32 %v0_11a38, %sockaddr* %tmp13, i32* nonnull %stack_var_-24)
  %v1_11a44 = call i32 @close(i32 %v0_11a38)
  br label %dec_label_pc_11a4c

dec_label_pc_11a4c:                               ; preds = %dec_label_pc_119bc, %dec_label_pc_11a10
  %v0_11a4c = phi i32 [ 0, %dec_label_pc_119bc ], [ %v8_119fc, %dec_label_pc_11a10 ]
  ret i32 %v0_11a4c

; uselistorder directives
  uselistorder i32 %v2_119fc, { 1, 0, 2 }
  uselistorder i32 %v3_119e4, { 1, 0 }
  uselistorder i32 (i32)* @close, { 3, 2, 7, 6, 1, 0, 5, 10, 4, 9, 8, 15, 14, 13, 12, 11, 20, 19, 18, 17, 16, 25, 24, 23, 22, 21, 30, 29, 28, 32, 27, 26, 33, 31, 34 }
  uselistorder i32 (i32, %sockaddr*, i32)* @connect, { 6, 0, 5, 8, 7, 4, 3, 2, 1, 9 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 2, 3, 7, 4, 6, 5, 10, 9, 8, 0, 14, 13, 1, 12, 20, 17, 16, 15, 19, 18, 11, 21 }
  uselistorder i32* ()* @__errno_location, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_11a4c, { 1, 0 }
}

define i32 @function_11a58(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11a58:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_11a5c = load i8, i8* %tmp, align 1
  %v2_11a60 = icmp eq i8 %v3_11a5c, 0
  br i1 %v2_11a60, label %bb, label %dec_label_pc_11a74

bb:                                               ; preds = %dec_label_pc_11a58
  %v4_11a5c = zext i8 %v3_11a5c to i32
  br label %dec_label_pc_11a88

dec_label_pc_11a74:                               ; preds = %dec_label_pc_11a58
  br label %dec_label_pc_11a78

dec_label_pc_11a78:                               ; preds = %dec_label_pc_11a78, %dec_label_pc_11a74
  %v0_11a78 = phi i32 [ %v1_11a78, %dec_label_pc_11a78 ], [ 0, %dec_label_pc_11a74 ]
  %v1_11a78 = add i32 %v0_11a78, 1
  %v2_11a7c = add i32 %v1_11a78, %arg2
  %v3_11a7c = inttoptr i32 %v2_11a7c to i8*
  %v4_11a7c = load i8, i8* %v3_11a7c, align 1
  %v2_11a80 = icmp eq i8 %v4_11a7c, 0
  br i1 %v2_11a80, label %dec_label_pc_11a88, label %dec_label_pc_11a78

dec_label_pc_11a88:                               ; preds = %dec_label_pc_11a78, %bb
  %v0_11acc18 = phi i32 [ %v4_11a5c, %bb ], [ %v1_11a78, %dec_label_pc_11a78 ]
  %v0_11a901 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_11a901, 1
  br i1 %tmp27, label %dec_label_pc_11adc, label %dec_label_pc_11a9c

dec_label_pc_11a9c:                               ; preds = %dec_label_pc_11a88, %dec_label_pc_11a90.backedge
  %v0_11a94.in = phi i32 [ %v0_11a94, %dec_label_pc_11a90.backedge ], [ %v0_11a901, %dec_label_pc_11a88 ]
  %v0_11ac0 = phi i32 [ %v1_11ac0., %dec_label_pc_11a90.backedge ], [ 0, %dec_label_pc_11a88 ]
  %v0_11a9c = phi i32 [ %v5_11a9c, %dec_label_pc_11a90.backedge ], [ %tmp20, %dec_label_pc_11a88 ]
  %v0_11a94 = add i32 %v0_11a94.in, -1
  %v1_11a9c = inttoptr i32 %v0_11a9c to i8*
  %v2_11a9c = load i8, i8* %v1_11a9c, align 1
  %v3_11a9c = zext i8 %v2_11a9c to i32
  %v5_11a9c = add i32 %v0_11a9c, 1
  %v2_11aa0 = add i32 %v0_11ac0, %arg2
  %v3_11aa0 = inttoptr i32 %v2_11aa0 to i8*
  %v4_11aa0 = load i8, i8* %v3_11aa0, align 1
  %v6_11aa0 = zext i8 %v4_11aa0 to i32
  %v1_11aa4 = add nsw i32 %v3_11a9c, -65
  %v1_11aa8 = add nsw i32 %v6_11aa0, -65
  %tmp35 = icmp ult i32 %v1_11aa4, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_11a9c
  %v5_11ab0 = or i32 %v3_11a9c, 96
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_11a9c, %bb28
  %v0_11abc = phi i32 [ %v3_11a9c, %dec_label_pc_11a9c ], [ %v5_11ab0, %bb28 ]
  %tmp36 = icmp ult i32 %v1_11aa8, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_11ab8 = or i32 %v6_11aa0, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_11abc = phi i32 [ %v6_11aa0, %bb29 ], [ %v5_11ab8, %bb30 ]
  %v9_11abc = icmp eq i32 %v0_11abc, %v1_11abc
  %v1_11ac0 = add i32 %v0_11ac0, 1
  %v1_11ac0. = select i1 %v9_11abc, i32 %v1_11ac0, i32 0
  br i1 %v9_11abc, label %dec_label_pc_11acc, label %dec_label_pc_11a90.backedge

dec_label_pc_11a90.backedge:                      ; preds = %bb31, %dec_label_pc_11acc
  %tmp32 = icmp slt i32 %v0_11a94, 1
  br i1 %tmp32, label %dec_label_pc_11adc, label %dec_label_pc_11a9c

dec_label_pc_11acc:                               ; preds = %bb31
  %v9_11acc = icmp eq i32 %v0_11acc18, %v1_11ac0.
  br i1 %v9_11acc, label %dec_label_pc_11ad4, label %dec_label_pc_11a90.backedge

dec_label_pc_11ad4:                               ; preds = %dec_label_pc_11acc
  %v2_11ad4 = sub i32 %v5_11a9c, %tmp20
  ret i32 %v2_11ad4

dec_label_pc_11adc:                               ; preds = %dec_label_pc_11a90.backedge, %dec_label_pc_11a88
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_11ac0., { 1, 0 }
  uselistorder i32 %v0_11a9c, { 1, 0 }
  uselistorder i32 %v0_11ac0, { 1, 0 }
  uselistorder i8 %v3_11a5c, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder i32 26, { 0, 1, 3, 8, 2, 7, 4, 9, 5, 10, 6, 11, 12 }
  uselistorder i32* @r1, { 3, 13, 0, 14, 5, 4, 43, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 1, 18, 38, 39, 2, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 44 }
  uselistorder label %dec_label_pc_11a90.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_11a9c, { 1, 0 }
}

define i32 @function_11ae4(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11ae4:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_11ae4 = load i8, i8* %arg1, align 1
  %v2_11ae8 = icmp eq i8 %v2_11ae4, 0
  br i1 %v2_11ae8, label %bb, label %dec_label_pc_11af4

bb:                                               ; preds = %dec_label_pc_11ae4
  %v3_11ae4 = zext i8 %v2_11ae4 to i32
  br label %dec_label_pc_11b08

dec_label_pc_11af4:                               ; preds = %dec_label_pc_11ae4
  br label %dec_label_pc_11af8

dec_label_pc_11af8:                               ; preds = %dec_label_pc_11af8, %dec_label_pc_11af4
  %v0_11af8 = phi i32 [ %v1_11af8, %dec_label_pc_11af8 ], [ 0, %dec_label_pc_11af4 ]
  %v1_11af8 = add i32 %v0_11af8, 1
  %v2_11afc = add i32 %v1_11af8, %tmp
  %v3_11afc = inttoptr i32 %v2_11afc to i8*
  %v4_11afc = load i8, i8* %v3_11afc, align 1
  %v2_11b00 = icmp eq i8 %v4_11afc, 0
  br i1 %v2_11b00, label %dec_label_pc_11b08, label %dec_label_pc_11af8

dec_label_pc_11b08:                               ; preds = %dec_label_pc_11af8, %bb
  %v0_11b2c = phi i32 [ %v3_11ae4, %bb ], [ %v1_11af8, %dec_label_pc_11af8 ]
  %v1_11b08 = inttoptr i32 %arg2 to i8*
  %v2_11b08 = load i8, i8* %v1_11b08, align 1
  %v2_11b0c = icmp eq i8 %v2_11b08, 0
  br i1 %v2_11b0c, label %bb22, label %dec_label_pc_11b18

bb22:                                             ; preds = %dec_label_pc_11b08
  %v3_11b08 = zext i8 %v2_11b08 to i32
  br label %dec_label_pc_11b2c

dec_label_pc_11b18:                               ; preds = %dec_label_pc_11b08
  br label %dec_label_pc_11b1c

dec_label_pc_11b1c:                               ; preds = %dec_label_pc_11b1c, %dec_label_pc_11b18
  %v0_11b1c = phi i32 [ %v1_11b1c, %dec_label_pc_11b1c ], [ 0, %dec_label_pc_11b18 ]
  %v1_11b1c = add i32 %v0_11b1c, 1
  %v2_11b20 = add i32 %v1_11b1c, %arg2
  %v3_11b20 = inttoptr i32 %v2_11b20 to i8*
  %v4_11b20 = load i8, i8* %v3_11b20, align 1
  %v2_11b24 = icmp eq i8 %v4_11b20, 0
  br i1 %v2_11b24, label %dec_label_pc_11b2c, label %dec_label_pc_11b1c

dec_label_pc_11b2c:                               ; preds = %dec_label_pc_11b1c, %bb22
  %v0_11b584 = phi i32 [ %v3_11b08, %bb22 ], [ %v1_11b1c, %dec_label_pc_11b1c ]
  %v9_11b2c = icmp eq i32 %v0_11b2c, %v0_11b584
  br i1 %v9_11b2c, label %dec_label_pc_11b58.preheader, label %dec_label_pc_11b38

dec_label_pc_11b58.preheader:                     ; preds = %dec_label_pc_11b2c
  %v2_11b586 = icmp eq i32 %v0_11b2c, 0
  br i1 %v2_11b586, label %dec_label_pc_11b60, label %dec_label_pc_11b40

dec_label_pc_11b38:                               ; preds = %dec_label_pc_11b40, %dec_label_pc_11b2c
  ret i32 0

dec_label_pc_11b40:                               ; preds = %dec_label_pc_11b50, %dec_label_pc_11b58.preheader
  %v0_11b58.in = phi i32 [ %v0_11b58, %dec_label_pc_11b50 ], [ %v0_11b2c, %dec_label_pc_11b58.preheader ]
  %v0_11b54 = phi i32 [ %v1_11b54, %dec_label_pc_11b50 ], [ %arg2, %dec_label_pc_11b58.preheader ]
  %v0_11b50 = phi i32 [ %v1_11b50, %dec_label_pc_11b50 ], [ %tmp, %dec_label_pc_11b58.preheader ]
  %v0_11b58 = add i32 %v0_11b58.in, -1
  %v1_11b40 = inttoptr i32 %v0_11b50 to i8*
  %v2_11b40 = load i8, i8* %v1_11b40, align 1
  %v1_11b44 = inttoptr i32 %v0_11b54 to i8*
  %v2_11b44 = load i8, i8* %v1_11b44, align 1
  %v9_11b48 = icmp eq i8 %v2_11b40, %v2_11b44
  br i1 %v9_11b48, label %dec_label_pc_11b50, label %dec_label_pc_11b38

dec_label_pc_11b50:                               ; preds = %dec_label_pc_11b40
  %v1_11b50 = add i32 %v0_11b50, 1
  %v1_11b54 = add i32 %v0_11b54, 1
  %v2_11b58 = icmp eq i32 %v0_11b58, 0
  br i1 %v2_11b58, label %dec_label_pc_11b60, label %dec_label_pc_11b40

dec_label_pc_11b60:                               ; preds = %dec_label_pc_11b50, %dec_label_pc_11b58.preheader
  ret i32 1

; uselistorder directives
  uselistorder i8 %v2_11b08, { 1, 0 }
  uselistorder i8 %v2_11ae4, { 1, 0 }
}

define i32 @function_11b68(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11b68:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_11b68 = load i32, i32* @r4, align 4
  store i32 %v3_11b68, i32* %stack_var_-28, align 4
  %v22_11b68 = ptrtoint i32* %stack_var_-28 to i32
  %v0_11b6c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_11b6c, i32* %r8.global-to-local, align 4
  %v2_11b6c = icmp eq i32 %v0_11b6c, 0
  store i1 %v2_11b6c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_11b6c, label %dec_label_pc_11c5c, label %dec_label_pc_11b7c

dec_label_pc_11b7c:                               ; preds = %dec_label_pc_11b68
  %v3_11b7c = icmp eq i8 %arg1, 0
  store i1 %v3_11b7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11b7c, label %.thread, label %dec_label_pc_11b90

.thread:                                          ; preds = %dec_label_pc_11b7c
  %v4_11b84 = inttoptr i32 %v0_11b6c to i8*
  store i8 48, i8* %v4_11b84, align 1
  %v0_11b88.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11b88.pr.pr, label %.thread1, label %dec_label_pc_11b90

.thread1:                                         ; preds = %.thread
  %v4_11b88 = load i32, i32* %r8.global-to-local, align 4
  %v5_11b88 = add i32 %v4_11b88, 1
  %v6_11b88 = inttoptr i32 %v5_11b88 to i8*
  store i8 0, i8* %v6_11b88, align 1
  %v0_11b8c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11b8c.pr.pr, label %dec_label_pc_11c5c, label %dec_label_pc_11b90

dec_label_pc_11b90:                               ; preds = %dec_label_pc_11b7c, %.thread, %.thread1
  %tmp40 = icmp slt i8 %arg1, 0
  %v7_11b94 = icmp eq i32 %arg2, 10
  store i1 %v7_11b94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b94, label %bb, label %.thread22

.thread22:                                        ; preds = %dec_label_pc_11b90
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_11b90
  %v4_11b90 = zext i1 %tmp40 to i32
  store i32 %v4_11b90, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp40, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_11bb8

.thread4:                                         ; preds = %bb, %.thread22
  br label %dec_label_pc_11bc8

dec_label_pc_11bb8:                               ; preds = %bb
  %v2_11bb8 = sub nsw i32 0, %tmp
  store i1 %v3_11b7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11b7c, label %dec_label_pc_11c68, label %dec_label_pc_11bc8

dec_label_pc_11bc8:                               ; preds = %dec_label_pc_11bb8, %.thread4
  %v0_11bd010 = phi i32 [ %tmp, %.thread4 ], [ %v2_11bb8, %dec_label_pc_11bb8 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_11bb8 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_11bcc = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_11bcc, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_11bd0

dec_label_pc_11bd0:                               ; preds = %bb38, %dec_label_pc_11bc8
  %v2_11bf0 = phi i32 [ %v5_11bf0, %bb38 ], [ %v2_11bcc, %dec_label_pc_11bc8 ]
  %v0_11bec = phi i32 [ %v2_11bf4, %bb38 ], [ %v0_11bd010, %dec_label_pc_11bc8 ]
  %v0_11bd4 = load i32, i32* %r5.global-to-local, align 4
  %v2_11bd8 = urem i32 %v0_11bec, %v0_11bd4
  store i32 %v2_11bd8, i32* %r0.global-to-local, align 4
  %v7_11bdc = icmp eq i32 %v2_11bd8, 9
  store i1 %v7_11bdc, i1* %cpsr_z.global-to-local, align 1
  %v1_11be0 = add i32 %v2_11bd8, 48
  store i32 %v0_11bd4, i32* %r1.global-to-local, align 4
  %v7_11be8 = icmp sgt i32 %v2_11bd8, 9
  %extract.t = trunc i32 %v1_11be0 to i8
  br i1 %v7_11be8, label %bb37, label %bb38

bb37:                                             ; preds = %dec_label_pc_11bd0
  %v9_11be8 = add i32 %v2_11bd8, 55
  %extract.t21 = trunc i32 %v9_11be8 to i8
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_11bd0, %bb37
  %v0_11bf0.off0 = phi i8 [ %extract.t, %dec_label_pc_11bd0 ], [ %extract.t21, %bb37 ]
  store i32 %v0_11bec, i32* %r0.global-to-local, align 4
  %v3_11bf0 = inttoptr i32 %v2_11bf0 to i8*
  store i8 %v0_11bf0.off0, i8* %v3_11bf0, align 1
  %v4_11bf0 = load i32, i32* %r7.global-to-local, align 4
  %v5_11bf0 = add i32 %v4_11bf0, -1
  store i32 %v5_11bf0, i32* %r7.global-to-local, align 4
  %v0_11bf4 = load i32, i32* %r0.global-to-local, align 4
  %v1_11bf4 = load i32, i32* %r1.global-to-local, align 4
  %v2_11bf4 = udiv i32 %v0_11bf4, %v1_11bf4
  store i32 %v2_11bf4, i32* %r0.global-to-local, align 4
  %v2_11bf8 = icmp ugt i32 %v1_11bf4, %v0_11bf4
  store i1 %v2_11bf8, i1* %cpsr_z.global-to-local, align 1
  %v0_11bfc = load i32, i32* %r6.global-to-local, align 4
  %v1_11bfc = add i32 %v0_11bfc, -1
  store i32 %v1_11bfc, i32* %r6.global-to-local, align 4
  br i1 %v2_11bf8, label %dec_label_pc_11c04, label %dec_label_pc_11bd0

dec_label_pc_11c04:                               ; preds = %bb38
  %v0_11c04 = load i32, i32* %sl.global-to-local, align 4
  %v2_11c04 = icmp eq i32 %v0_11c04, 0
  store i1 %v2_11c04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11c04, label %bb39, label %dec_label_pc_11c6c

bb39:                                             ; preds = %dec_label_pc_11c04
  store i32 %v0_11bfc, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11c10

dec_label_pc_11c10:                               ; preds = %bb39, %dec_label_pc_11c6c
  %v1_11c1c = phi i32 [ %v0_11bfc, %bb39 ], [ %v1_11c14.pre, %dec_label_pc_11c6c ]
  %v2_11c10 = ptrtoint i32* %stack_var_-62 to i32
  %v2_11c14 = add i32 %v1_11c1c, %v2_11c10
  %v3_11c14 = inttoptr i32 %v2_11c14 to i8*
  %v4_11c14 = load i8, i8* %v3_11c14, align 1
  %v6_11c14 = zext i8 %v4_11c14 to i32
  store i32 %v6_11c14, i32* %r2.global-to-local, align 4
  %v2_11c18 = icmp eq i8 %v4_11c14, 0
  store i1 %v2_11c18, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_11c14, i32* %r1.global-to-local, align 4
  br i1 %v2_11c18, label %dec_label_pc_11c40, label %dec_label_pc_11c24

dec_label_pc_11c24:                               ; preds = %dec_label_pc_11c10
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11c28

dec_label_pc_11c28:                               ; preds = %dec_label_pc_11c28, %dec_label_pc_11c24
  %v0_11c28 = phi i32 [ %v1_11c28, %dec_label_pc_11c28 ], [ 0, %dec_label_pc_11c24 ]
  %v1_11c28 = add i32 %v0_11c28, 1
  store i32 %v1_11c28, i32* %r2.global-to-local, align 4
  %v2_11c2c = add i32 %v1_11c28, %v2_11c14
  %v3_11c2c = inttoptr i32 %v2_11c2c to i8*
  %v4_11c2c = load i8, i8* %v3_11c2c, align 1
  %v2_11c30 = icmp eq i8 %v4_11c2c, 0
  store i1 %v2_11c30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11c30, label %dec_label_pc_11c38, label %dec_label_pc_11c28

dec_label_pc_11c38:                               ; preds = %dec_label_pc_11c28
  %v7_11c38 = icmp eq i32 %v0_11c28, -2
  store i1 %v7_11c38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c38, label %dec_label_pc_11c5c, label %dec_label_pc_11c40

dec_label_pc_11c40:                               ; preds = %dec_label_pc_11c38, %dec_label_pc_11c10
  %v0_11c4818 = phi i32 [ %v1_11c28, %dec_label_pc_11c38 ], [ %v6_11c14, %dec_label_pc_11c10 ]
  store i32 %v2_11c14, i32* %r0.global-to-local, align 4
  %v0_11c44 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11c44, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11c48

dec_label_pc_11c48:                               ; preds = %dec_label_pc_11c48.dec_label_pc_11c48_crit_edge, %dec_label_pc_11c40
  %v2_11c54 = phi i32 [ %v5_11c54, %dec_label_pc_11c48.dec_label_pc_11c48_crit_edge ], [ %v0_11c44, %dec_label_pc_11c40 ]
  %v0_11c4c = phi i32 [ %v0_11c4c.pre, %dec_label_pc_11c48.dec_label_pc_11c48_crit_edge ], [ %v2_11c14, %dec_label_pc_11c40 ]
  %v0_11c48 = phi i32 [ %v0_11c48.pre, %dec_label_pc_11c48.dec_label_pc_11c48_crit_edge ], [ %v0_11c4818, %dec_label_pc_11c40 ]
  %v1_11c48 = add i32 %v0_11c48, -1
  store i32 %v1_11c48, i32* %r2.global-to-local, align 4
  %v1_11c4c = inttoptr i32 %v0_11c4c to i8*
  %v2_11c4c = load i8, i8* %v1_11c4c, align 1
  %v5_11c4c = add i32 %v0_11c4c, 1
  store i32 %v5_11c4c, i32* %r0.global-to-local, align 4
  %v3_11c50 = icmp eq i32 %v0_11c48, 0
  store i1 %v3_11c50, i1* %cpsr_z.global-to-local, align 1
  %v3_11c54 = inttoptr i32 %v2_11c54 to i8*
  store i8 %v2_11c4c, i8* %v3_11c54, align 1
  %v4_11c54 = load i32, i32* %r1.global-to-local, align 4
  %v5_11c54 = add i32 %v4_11c54, 1
  store i32 %v5_11c54, i32* %r1.global-to-local, align 4
  br i1 %v3_11c50, label %dec_label_pc_11c5c, label %dec_label_pc_11c48.dec_label_pc_11c48_crit_edge

dec_label_pc_11c48.dec_label_pc_11c48_crit_edge:  ; preds = %dec_label_pc_11c48
  %v0_11c48.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_11c4c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11c48

dec_label_pc_11c5c:                               ; preds = %dec_label_pc_11c48, %dec_label_pc_11c38, %.thread1, %dec_label_pc_11b68
  %v0_11c5c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11c5c, i32* %r0.global-to-local, align 4
  %v2_11c64 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_11c64, i32* @r4, align 4
  ret i32 %v0_11c5c

dec_label_pc_11c68:                               ; preds = %dec_label_pc_11bb8
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11c6c

dec_label_pc_11c6c:                               ; preds = %dec_label_pc_11c04, %dec_label_pc_11c68
  %v1_11c70 = phi i32 [ %v1_11bfc, %dec_label_pc_11c04 ], [ 32, %dec_label_pc_11c68 ]
  %v2_11c70 = add i32 %v1_11c70, %v22_11b68
  store i32 %v2_11c70, i32* %r2.global-to-local, align 4
  %v3_11c78 = add i32 %v2_11c70, -34
  %v4_11c78 = inttoptr i32 %v3_11c78 to i8*
  store i8 45, i8* %v4_11c78, align 1
  %v1_11c14.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11c10

; uselistorder directives
  uselistorder i32 %v5_11c54, { 1, 0 }
  uselistorder i1 %v3_11c50, { 1, 0 }
  uselistorder i32 %v0_11c4c, { 1, 0 }
  uselistorder i1 %v7_11c38, { 1, 0 }
  uselistorder i32 %v1_11c28, { 0, 1, 3, 2 }
  uselistorder i32 %v2_11c14, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_11bf4, { 1, 0 }
  uselistorder i32 %v5_11bf0, { 1, 0 }
  uselistorder i32 %v2_11bd8, { 0, 2, 1, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_11b7c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11b6c, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 9, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 6, 1, 7, 8, 2, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 12, 11, 13, 14 }
  uselistorder i8 45, { 1, 0 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder i32 48, { 1, 0, 2 }
  uselistorder i32 9, { 4, 40, 7, 5, 30, 11, 26, 12, 27, 13, 28, 9, 29, 10, 25, 22, 8, 3, 31, 23, 2, 24, 32, 14, 33, 15, 34, 16, 35, 36, 17, 37, 18, 38, 19, 39, 0, 20, 1, 53, 41, 42, 43, 44, 45, 46, 6, 47, 48, 49, 50, 51, 52, 54, 55, 56, 21 }
  uselistorder i32 32, { 28, 32, 33, 5, 4, 7, 6, 9, 8, 11, 10, 29, 13, 12, 14, 16, 15, 17, 18, 20, 19, 30, 31, 21, 0, 22, 1, 2, 3, 34, 35, 23, 36, 24, 25, 26, 27 }
  uselistorder i32 10, { 35, 0, 19, 6, 22, 24, 7, 23, 8, 25, 9, 26, 3, 27, 28, 20, 10, 29, 21, 30, 11, 31, 32, 12, 2, 13, 14, 33, 15, 34, 4, 36, 37, 38, 39, 40, 41, 16, 42, 43, 44, 17, 45, 47, 48, 1, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 5, 63, 46, 18 }
  uselistorder i8 0, { 17, 18, 0, 4, 19, 20, 21, 22, 23, 24, 25, 2, 26, 27, 28, 29, 7, 30, 1, 6, 5, 8, 31, 32, 33, 34, 35, 14, 36, 37, 40, 15, 38, 39, 13, 41, 42, 43, 44, 45, 9, 10, 3, 11, 16, 12, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55 }
  uselistorder label %dec_label_pc_11c6c, { 1, 0 }
  uselistorder label %dec_label_pc_11c10, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_11b90, { 2, 1, 0 }
}

define i32 @__udivsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_11c80 = add i32 %arg2, -1
  %v7_11c80 = icmp eq i32 %arg2, 1
  br i1 %v7_11c80, label %bb, label %bb80

bb:                                               ; preds = %entry
  %v2_11c84 = load i32, i32* @r0, align 4
  ret i32 %v2_11c84

bb80:                                             ; preds = %entry
  %v2_11c80 = icmp eq i32 %arg2, 0
  br i1 %v2_11c80, label %dec_label_pc_11d68, label %dec_label_pc_11c8c

dec_label_pc_11c8c:                               ; preds = %bb80
  %v0_11c8c = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_11c8c, %arg2
  br i1 %tmp, label %dec_label_pc_11c94, label %dec_label_pc_11d20

dec_label_pc_11c94:                               ; preds = %dec_label_pc_11c8c
  %v2_11c94 = and i32 %v1_11c80, %arg2
  %v4_11c94 = icmp eq i32 %v2_11c94, 0
  br i1 %v4_11c94, label %dec_label_pc_11d2c, label %dec_label_pc_11c9c

dec_label_pc_11c9c:                               ; preds = %dec_label_pc_11c94
  %v3_11c9c = icmp ult i32 %arg2, 536870912
  br i1 %v3_11c9c, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_11c9c
  %v4_11ca0 = mul i32 %arg2, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_11c9c, %.thread
  %v0_11cc0.pr36.ph = phi i32 [ %v4_11ca0, %.thread ], [ %arg2, %dec_label_pc_11c9c ]
  %storemerge115 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_11c9c ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb83
  %v0_11cc0.pr36 = phi i32 [ %v4_11cb4, %bb83 ], [ %v0_11cc0.pr36.ph, %.preheader.preheader ]
  %v1_11cb8 = phi i32 [ %v4_11cb8, %bb83 ], [ %storemerge115, %.preheader.preheader ]
  %v2_11cac = icmp ugt i32 %v0_11cc0.pr36, 268435455
  br i1 %v2_11cac, label %.thread2, label %bb81

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_11cc0thread-pre-split.loopexit

bb81:                                             ; preds = %.preheader
  %v4_11cb0 = icmp ult i32 %v0_11cc0.pr36, %v0_11c8c
  br i1 %v4_11cb0, label %bb82, label %dec_label_pc_11cc0thread-pre-split.loopexit.loopexit

bb82:                                             ; preds = %bb81
  %v2_11cb4 = and i32 %v0_11cc0.pr36, 268435456
  %v3_11cb4 = icmp eq i32 %v2_11cb4, 0
  %v4_11cb4 = mul i32 %v0_11cc0.pr36, 16
  br i1 %v3_11cb4, label %bb83, label %dec_label_pc_11cc0.loopexit

bb83:                                             ; preds = %bb82
  %v2_11cb8 = and i32 %v1_11cb8, 268435456
  %v3_11cb8 = icmp eq i32 %v2_11cb8, 0
  %v4_11cb8 = mul i32 %v1_11cb8, 16
  br i1 %v3_11cb8, label %.preheader, label %dec_label_pc_11cc0thread-pre-split.loopexit.loopexit

dec_label_pc_11cc0thread-pre-split.loopexit.loopexit: ; preds = %bb83, %bb81
  %v1_11ccc48.ph = phi i32 [ %v1_11cb8, %bb81 ], [ %v4_11cb8, %bb83 ]
  %v0_11cc0.pr38.ph = phi i32 [ %v0_11cc0.pr36, %bb81 ], [ %v4_11cb4, %bb83 ]
  br label %dec_label_pc_11cc0thread-pre-split.loopexit

dec_label_pc_11cc0thread-pre-split.loopexit:      ; preds = %dec_label_pc_11cc0thread-pre-split.loopexit.loopexit, %.thread2
  %v1_11ccc48 = phi i32 [ %v1_11cb8, %.thread2 ], [ %v1_11ccc48.ph, %dec_label_pc_11cc0thread-pre-split.loopexit.loopexit ]
  %v0_11cc0.pr38 = phi i32 [ %v0_11cc0.pr36, %.thread2 ], [ %v0_11cc0.pr38.ph, %dec_label_pc_11cc0thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11cc0thread-pre-split

dec_label_pc_11cc0thread-pre-split:               ; preds = %dec_label_pc_11cc0thread-pre-split.loopexit, %bb85
  %v1_11ccc46 = phi i32 [ %v1_11ccc48, %dec_label_pc_11cc0thread-pre-split.loopexit ], [ %v3_11ccc, %bb85 ]
  %v0_11cc0.pr = phi i32 [ %v0_11cc0.pr38, %dec_label_pc_11cc0thread-pre-split.loopexit ], [ %v3_11cc8, %bb85 ]
  br label %dec_label_pc_11cc0

dec_label_pc_11cc0.loopexit:                      ; preds = %bb82
  br label %dec_label_pc_11cc0

dec_label_pc_11cc0:                               ; preds = %dec_label_pc_11cc0.loopexit, %dec_label_pc_11cc0thread-pre-split
  %v1_11ccc = phi i32 [ %v1_11ccc46, %dec_label_pc_11cc0thread-pre-split ], [ %v1_11cb8, %dec_label_pc_11cc0.loopexit ]
  %v1_11cc8 = phi i32 [ %v0_11cc0.pr, %dec_label_pc_11cc0thread-pre-split ], [ %v4_11cb4, %dec_label_pc_11cc0.loopexit ]
  %v2_11cc0 = icmp slt i32 %v1_11cc8, 0
  br i1 %v2_11cc0, label %dec_label_pc_11cd4, label %bb84

bb84:                                             ; preds = %dec_label_pc_11cc0
  %v4_11cc4 = icmp ult i32 %v1_11cc8, %v0_11c8c
  br i1 %v4_11cc4, label %bb85, label %dec_label_pc_11cd4

bb85:                                             ; preds = %bb84
  %v3_11cc8 = mul i32 %v1_11cc8, 2
  %v2_11ccc = icmp slt i32 %v1_11ccc, 0
  %v3_11ccc = mul i32 %v1_11ccc, 2
  br i1 %v2_11ccc, label %dec_label_pc_11cd4, label %dec_label_pc_11cc0thread-pre-split

dec_label_pc_11cd4:                               ; preds = %bb84, %dec_label_pc_11cc0, %bb85
  %v2_11ce059 = phi i32 [ %v3_11ccc, %bb85 ], [ %v1_11ccc, %bb84 ], [ %v1_11ccc, %dec_label_pc_11cc0 ]
  %v1_11cd851 = phi i32 [ %v3_11cc8, %bb85 ], [ %v1_11cc8, %bb84 ], [ %v1_11cc8, %dec_label_pc_11cc0 ]
  br label %dec_label_pc_11cd8

dec_label_pc_11cd8:                               ; preds = %.thread11, %dec_label_pc_11cd4
  %v1_11d0c = phi i32 [ %v4_11d0c, %.thread11 ], [ %v2_11ce059, %dec_label_pc_11cd4 ]
  %v1_11ce0 = phi i32 [ %v0_11d18, %.thread11 ], [ 0, %dec_label_pc_11cd4 ]
  %v1_11d10 = phi i32 [ %v4_11d10, %.thread11 ], [ %v1_11cd851, %dec_label_pc_11cd4 ]
  %v1_11cdc = phi i32 [ %v0_11d08, %.thread11 ], [ %v0_11c8c, %dec_label_pc_11cd4 ]
  %v3_11cd8 = icmp ult i32 %v1_11cdc, %v1_11d10
  br i1 %v3_11cd8, label %.thread7, label %bb86

bb86:                                             ; preds = %dec_label_pc_11cd8
  %v3_11cdc = sub i32 %v1_11cdc, %v1_11d10
  %v3_11ce0 = or i32 %v1_11ce0, %v1_11d0c
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_11cd8, %bb86
  %v1_11ce8 = phi i32 [ %v1_11cdc, %dec_label_pc_11cd8 ], [ %v3_11cdc, %bb86 ]
  %v1_11cec = phi i32 [ %v1_11ce0, %dec_label_pc_11cd8 ], [ %v3_11ce0, %bb86 ]
  %v4_11ce4 = udiv i32 %v1_11d10, 2
  %v6_11ce4 = icmp ult i32 %v1_11ce8, %v4_11ce4
  br i1 %v6_11ce4, label %.thread8, label %bb87

bb87:                                             ; preds = %.thread7
  %v3_11ce8 = urem i32 %v1_11d10, 2
  %v4_11ce8 = icmp eq i32 %v3_11ce8, 0
  %v6_11ce8 = sub i32 %v1_11ce8, %v4_11ce4
  br i1 %v4_11ce8, label %.thread8, label %bb88

bb88:                                             ; preds = %bb87
  %v5_11cec = udiv i32 %v1_11d0c, 2
  %v6_11cec = or i32 %v1_11cec, %v5_11cec
  br label %.thread8

.thread8:                                         ; preds = %bb87, %.thread7, %bb88
  %v1_11cf4 = phi i32 [ %v6_11ce8, %bb87 ], [ %v1_11ce8, %.thread7 ], [ %v6_11ce8, %bb88 ]
  %v1_11cf8 = phi i32 [ %v1_11cec, %bb87 ], [ %v1_11cec, %.thread7 ], [ %v6_11cec, %bb88 ]
  %v4_11cf0 = udiv i32 %v1_11d10, 4
  %v6_11cf0 = icmp ult i32 %v1_11cf4, %v4_11cf0
  br i1 %v6_11cf0, label %.thread9, label %bb89

bb89:                                             ; preds = %.thread8
  %v3_11cf4 = and i32 %v1_11d10, 2
  %v4_11cf4 = icmp eq i32 %v3_11cf4, 0
  %v6_11cf4 = sub i32 %v1_11cf4, %v4_11cf0
  br i1 %v4_11cf4, label %.thread9, label %bb90

bb90:                                             ; preds = %bb89
  %v5_11cf8 = udiv i32 %v1_11d0c, 4
  %v6_11cf8 = or i32 %v1_11cf8, %v5_11cf8
  br label %.thread9

.thread9:                                         ; preds = %bb89, %.thread8, %bb90
  %v1_11d00 = phi i32 [ %v6_11cf4, %bb89 ], [ %v1_11cf4, %.thread8 ], [ %v6_11cf4, %bb90 ]
  %v1_11d04 = phi i32 [ %v1_11cf8, %bb89 ], [ %v1_11cf8, %.thread8 ], [ %v6_11cf8, %bb90 ]
  %v4_11cfc = udiv i32 %v1_11d10, 8
  %v6_11cfc = icmp ult i32 %v1_11d00, %v4_11cfc
  br i1 %v6_11cfc, label %thread-pre-split, label %bb91

bb91:                                             ; preds = %.thread9
  %v3_11d00 = and i32 %v1_11d10, 4
  %v4_11d00 = icmp eq i32 %v3_11d00, 0
  %v6_11d00 = sub i32 %v1_11d00, %v4_11cfc
  br i1 %v4_11d00, label %thread-pre-split, label %bb92

bb92:                                             ; preds = %bb91
  %v5_11d04 = udiv i32 %v1_11d0c, 8
  %v6_11d04 = or i32 %v1_11d04, %v5_11d04
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb92, %.thread9, %bb91
  %v0_11d18 = phi i32 [ %v1_11d04, %bb91 ], [ %v1_11d04, %.thread9 ], [ %v6_11d04, %bb92 ]
  %v0_11d08 = phi i32 [ %v6_11d00, %bb91 ], [ %v1_11d00, %.thread9 ], [ %v6_11d00, %bb92 ]
  %v2_11d08 = icmp eq i32 %v0_11d08, 0
  br i1 %v2_11d08, label %dec_label_pc_11d18, label %bb93

bb93:                                             ; preds = %thread-pre-split
  %tmp120 = icmp ult i32 %v1_11d0c, 16
  br i1 %tmp120, label %dec_label_pc_11d18, label %.thread11

.thread11:                                        ; preds = %bb93
  %v4_11d0c = udiv i32 %v1_11d0c, 16
  %v4_11d10 = udiv i32 %v1_11d10, 16
  br label %dec_label_pc_11cd8

dec_label_pc_11d18:                               ; preds = %thread-pre-split, %bb93
  ret i32 %v0_11d18

dec_label_pc_11d20:                               ; preds = %dec_label_pc_11c8c
  %v9_11c8c = icmp eq i32 %v0_11c8c, %arg2
  %. = zext i1 %v9_11c8c to i32
  ret i32 %.

dec_label_pc_11d2c:                               ; preds = %dec_label_pc_11c94
  %v2_11d2c = icmp ugt i32 %arg2, 65535
  br i1 %v2_11d2c, label %bb97, label %.thread16

bb97:                                             ; preds = %dec_label_pc_11d2c
  %v2_11d30 = and i32 %arg2, 32768
  %v3_11d30 = icmp eq i32 %v2_11d30, 0
  %v4_11d30 = udiv i32 %arg2, 65536
  br i1 %v3_11d30, label %.thread16, label %bb98

.thread16:                                        ; preds = %bb97, %dec_label_pc_11d2c
  %v0_11d3c65 = phi i32 [ %arg2, %dec_label_pc_11d2c ], [ %v4_11d30, %bb97 ]
  br label %bb98

bb98:                                             ; preds = %bb97, %.thread16
  %v1_11d40 = phi i32 [ %v0_11d3c65, %.thread16 ], [ %v4_11d30, %bb97 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb97 ]
  %v2_11d3c = icmp ugt i32 %v1_11d40, 255
  br i1 %v2_11d3c, label %bb99, label %.thread17

bb99:                                             ; preds = %bb98
  %v2_11d40 = and i32 %v1_11d40, 128
  %v3_11d40 = icmp eq i32 %v2_11d40, 0
  %v4_11d40 = udiv i32 %v1_11d40, 256
  br i1 %v3_11d40, label %.thread17, label %bb100

bb100:                                            ; preds = %bb99
  %v2_11d44 = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb99, %bb98, %bb100
  %v1_11d50 = phi i32 [ %storemerge, %bb98 ], [ %storemerge, %bb99 ], [ %v2_11d44, %bb100 ]
  %v1_11d4c = phi i32 [ %v1_11d40, %bb98 ], [ %v4_11d40, %bb99 ], [ %v4_11d40, %bb100 ]
  %v2_11d48 = icmp ugt i32 %v1_11d4c, 15
  br i1 %v2_11d48, label %bb101, label %.thread18

bb101:                                            ; preds = %.thread17
  %v2_11d4c = and i32 %v1_11d4c, 8
  %v3_11d4c = icmp eq i32 %v2_11d4c, 0
  %v4_11d4c = udiv i32 %v1_11d4c, 16
  br i1 %v3_11d4c, label %.thread18, label %bb102

bb102:                                            ; preds = %bb101
  %v2_11d50 = add nsw i32 %v1_11d50, 4
  br label %.thread18

.thread18:                                        ; preds = %bb101, %.thread17, %bb102
  %v4_11d58 = phi i32 [ %v1_11d50, %.thread17 ], [ %v1_11d50, %bb101 ], [ %v2_11d50, %bb102 ]
  %v5_11d5c = phi i32 [ %v1_11d4c, %.thread17 ], [ %v4_11d4c, %bb101 ], [ %v4_11d4c, %bb102 ]
  %v2_11d54 = icmp ugt i32 %v5_11d5c, 3
  %v7_11d54 = icmp eq i32 %v5_11d5c, 4
  %v2_11d58 = xor i1 %v7_11d54, true
  %v3_11d58 = and i1 %v2_11d54, %v2_11d58
  br i1 %v3_11d58, label %bb103, label %bb104

bb103:                                            ; preds = %.thread18
  %v5_11d58 = add nsw i32 %v4_11d58, 3
  br label %bb104

bb104:                                            ; preds = %.thread18, %bb103
  %v4_11d5c = phi i32 [ %v4_11d58, %.thread18 ], [ %v5_11d58, %bb103 ]
  %v2_11d5c = xor i1 %v2_11d54, true
  %v3_11d5c = or i1 %v7_11d54, %v2_11d5c
  br i1 %v3_11d5c, label %bb105, label %bb106

bb105:                                            ; preds = %bb104
  %v8_11d5c = udiv i32 %v5_11d5c, 2
  %v9_11d5c = add i32 %v4_11d5c, %v8_11d5c
  br label %bb106

bb106:                                            ; preds = %bb104, %bb105
  %v1_11d60 = phi i32 [ %v4_11d5c, %bb104 ], [ %v9_11d5c, %bb105 ]
  %v6_11d60 = lshr i32 %v0_11c8c, %v1_11d60
  ret i32 %v6_11d60

dec_label_pc_11d68:                               ; preds = %bb80
  %v0_11d68 = load i32, i32* @lr, align 4
  %v0_11d6c = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_11d68)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_11d5c, { 1, 0 }
  uselistorder i1 %v7_11d54, { 1, 0 }
  uselistorder i32 %v4_11d4c, { 1, 0 }
  uselistorder i32 %v1_11d4c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11d40, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_11d40, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11d30, { 1, 0 }
  uselistorder i32 %v0_11d08, { 1, 0 }
  uselistorder i32 %v4_11cfc, { 1, 0 }
  uselistorder i32 %v1_11d04, { 1, 2, 0 }
  uselistorder i32 %v4_11cf0, { 1, 0 }
  uselistorder i32 %v1_11cf8, { 1, 2, 0 }
  uselistorder i32 %v4_11ce4, { 1, 0 }
  uselistorder i32 %v1_11cec, { 1, 2, 0 }
  uselistorder i32 %v1_11d10, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_11ce0, { 1, 0 }
  uselistorder i32 %v1_11d0c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_11ccc, { 1, 0 }
  uselistorder i32 %v3_11cc8, { 1, 0 }
  uselistorder i32 %v1_11cc8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_11ccc, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11cb8, { 1, 0 }
  uselistorder i32 %v4_11cb4, { 2, 1, 0 }
  uselistorder i32 %v1_11cb8, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_11cc0.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_11c8c, { 2, 5, 3, 1, 4, 0 }
  uselistorder i1 true, { 0, 1, 40, 2, 3, 4, 5, 6, 90, 32, 41, 48, 91, 10, 11, 12, 68, 59, 69, 70, 71, 42, 13, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 14, 15, 33, 34, 88, 89, 58, 39, 49, 92, 8, 9, 57, 7, 93, 17, 16, 50, 53, 51, 54, 46, 52, 47, 56, 94, 18, 95, 96, 19, 35, 36, 97, 60, 61, 37, 98, 38, 99, 20, 21, 100, 62, 63, 22, 23, 101, 64, 65, 24, 25, 102, 66, 67, 26, 27, 45, 103, 104, 55, 105, 43, 28, 44, 29, 30, 31 }
  uselistorder i32 15, { 13, 14, 2, 15, 3, 16, 4, 5, 6, 7, 8, 9, 10, 11, 17, 18, 12, 19, 20, 21, 22, 0, 23, 24, 25, 26, 1, 27 }
  uselistorder i32 256, { 0, 1, 2, 5, 6, 7, 3, 4, 8, 11, 12, 13, 9, 10, 14, 15, 16, 17, 18, 418, 419, 19, 20, 21, 22, 23, 24, 25, 421, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 38, 43, 42, 41, 44, 417, 422, 49, 45, 48, 46, 47, 420, 51, 50, 52, 53, 54, 57, 56, 55, 58, 60, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 76, 85, 81, 86, 82, 78, 79, 83, 80, 87, 88, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 104, 103, 111, 106, 117, 118, 112, 107, 119, 120, 113, 108, 121, 114, 115, 122, 116, 123, 109, 124, 110, 125, 126, 127, 128, 129, 130, 131, 134, 135, 138, 136, 132, 139, 137, 133, 142, 141, 140, 145, 146, 143, 147, 144, 148, 153, 151, 154, 152, 149, 150, 155, 415, 423, 156, 157, 158, 159, 163, 160, 161, 162, 165, 166, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 186, 184, 180, 187, 185, 181, 190, 189, 188, 193, 194, 191, 195, 192, 196, 201, 199, 202, 200, 197, 198, 203, 416, 424, 204, 205, 206, 207, 211, 208, 209, 210, 213, 214, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 231, 233, 234, 235, 239, 245, 240, 236, 241, 246, 242, 247, 243, 237, 248, 238, 249, 250, 244, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 261, 264, 267, 268, 266, 265, 269, 272, 271, 270, 279, 276, 280, 277, 273, 281, 278, 274, 275, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 292, 294, 295, 297, 296, 298, 299, 300, 301, 304, 311, 305, 306, 302, 307, 308, 309, 303, 312, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 325, 327, 328, 329, 333, 340, 334, 335, 341, 336, 330, 331, 337, 332, 338, 342, 339, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 360, 362, 363, 364, 375, 370, 365, 376, 371, 372, 377, 373, 366, 367, 368, 378, 379, 380, 381, 374, 369, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 393, 395, 396, 397, 398, 399, 400, 401, 403, 402, 404, 405, 406, 407, 408, 409, 411, 410, 412, 413, 414 }
  uselistorder i32 128, { 5, 6, 7, 12, 0, 13, 8, 9, 10, 11, 14, 1, 15, 2, 3, 16, 17, 18, 4 }
  uselistorder i32 255, { 5, 6, 2, 7, 3, 8, 4, 9, 0, 1 }
  uselistorder i32 65536, { 9, 10, 11, 12, 13, 14, 1, 16, 15, 17, 2, 18, 0, 3, 19, 20, 21, 22, 23, 26, 24, 25, 27, 28, 4, 32, 33, 29, 30, 34, 31, 35, 36, 37, 38, 39, 106, 41, 40, 107, 42, 43, 45, 44, 47, 46, 108, 49, 48, 109, 50, 51, 53, 52, 55, 54, 56, 57, 62, 63, 64, 65, 58, 59, 60, 61, 66, 69, 70, 71, 67, 68, 72, 5, 73, 76, 77, 78, 74, 75, 79, 6, 80, 84, 85, 86, 81, 82, 83, 87, 88, 89, 90, 91, 92, 94, 93, 95, 7, 96, 98, 99, 97, 100, 8, 101, 103, 104, 102, 105 }
  uselistorder i32 32768, { 1, 0 }
  uselistorder i32 65535, { 100, 0, 1, 53, 12, 54, 24, 28, 55, 25, 56, 26, 57, 27, 58, 59, 13, 60, 2, 61, 62, 32, 63, 31, 64, 29, 65, 30, 66, 14, 15, 3, 67, 33, 68, 34, 69, 16, 17, 4, 70, 35, 71, 36, 72, 18, 73, 39, 74, 38, 75, 37, 76, 19, 20, 5, 41, 77, 40, 78, 79, 80, 21, 81, 82, 6, 44, 83, 42, 84, 43, 85, 86, 22, 87, 7, 8, 47, 88, 45, 89, 46, 90, 91, 23, 92, 9, 48, 93, 49, 94, 50, 95, 96, 10, 51, 97, 98, 11, 52, 99 }
  uselistorder i32 %arg2, { 7, 12, 6, 5, 4, 10, 11, 8, 9, 0, 3, 1, 2 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %dec_label_pc_11d18, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_11cd4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11cc0thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @__aeabi_uidivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_11d7c = udiv i32 %arg1, %arg2
  ret i32 %v2_11d7c
}

define i32 @__umodsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_11d90 = add i32 %arg2, -1
  %v2_11d90 = icmp eq i32 %arg2, 0
  br i1 %v2_11d90, label %dec_label_pc_11e4c, label %dec_label_pc_11d98

dec_label_pc_11d98:                               ; preds = %entry
  %v7_11d90 = icmp eq i32 %arg2, 1
  br i1 %v7_11d90, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_11d98
  %v1_11d98 = load i32, i32* @r0, align 4
  %v10_11d98 = icmp eq i32 %v1_11d98, %arg2
  br i1 %v10_11d98, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_11d98, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_11d98 = icmp ult i32 %v1_11d98, %arg2
  br i1 %v4_11d98, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_11da0 = and i32 %v1_11d90, %arg2
  %v8_11da0 = icmp eq i32 %v6_11da0, 0
  br i1 %v8_11da0, label %.thread67, label %dec_label_pc_11db0.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_11da4 = phi i32 [ %v1_11d98, %bb75 ], [ 0, %.thread65 ]
  %v3_11da4 = and i32 %v1_11da4, %v1_11d90
  br label %bb76

dec_label_pc_11db0.preheader:                     ; preds = %bb75
  %v2_11db097 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_11db097, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_11e40, %bb74, %bb89, %bb84, %dec_label_pc_11e10, %.thread67
  %v5_11da8 = phi i32 [ %v1_11d98, %bb74 ], [ %v3_11da4, %.thread67 ], [ %v1_11dec.v6_11dec.v6_11df4.v6_11dfc, %dec_label_pc_11e10 ], [ 0, %bb84 ], [ %v1_11e44, %dec_label_pc_11e40 ], [ %v2_11e40, %bb89 ]
  ret i32 %v5_11da8

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_11db0.preheader
  %v0_11dc4.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_11db0.preheader ], [ %v4_11db8, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_11db0.preheader ], [ %v2_11dbc11, %.thread1.thread9 ]
  br label %dec_label_pc_11dc4thread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_11db0.preheader, %.thread1.thread9
  %storemerge99 = phi i32 [ %v2_11dbc11, %.thread1.thread9 ], [ 0, %dec_label_pc_11db0.preheader ]
  %v0_11dc4.pr3398 = phi i32 [ %v4_11db8, %.thread1.thread9 ], [ %arg2, %dec_label_pc_11db0.preheader ]
  %v4_11db4 = icmp ult i32 %v0_11dc4.pr3398, %v1_11d98
  br i1 %v4_11db4, label %bb78, label %dec_label_pc_11dc4thread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_11db8 = and i32 %v0_11dc4.pr3398, 268435456
  %v3_11db8 = icmp eq i32 %v2_11db8, 0
  %v4_11db8 = mul i32 %v0_11dc4.pr3398, 16
  br i1 %v3_11db8, label %.thread1.thread9, label %dec_label_pc_11dc4.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_11dbc11 = add i32 %storemerge99, 4
  %v2_11db0 = icmp ugt i32 %v4_11db8, 268435455
  br i1 %v2_11db0, label %.thread, label %bb77

dec_label_pc_11dc4thread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_11dc4thread-pre-split.loopexit

dec_label_pc_11dc4thread-pre-split.loopexit:      ; preds = %dec_label_pc_11dc4thread-pre-split.loopexit.loopexit, %.thread
  %v0_11dc4.pr3396 = phi i32 [ %v0_11dc4.pr33.lcssa, %.thread ], [ %v0_11dc4.pr3398, %dec_label_pc_11dc4thread-pre-split.loopexit.loopexit ]
  %storemerge93 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge99, %dec_label_pc_11dc4thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11dc4thread-pre-split

dec_label_pc_11dc4thread-pre-split:               ; preds = %.thread4, %dec_label_pc_11dc4thread-pre-split.loopexit
  %v1_11dd039 = phi i32 [ %storemerge93, %dec_label_pc_11dc4thread-pre-split.loopexit ], [ %v2_11dd0, %.thread4 ]
  %v0_11dc4.pr = phi i32 [ %v0_11dc4.pr3396, %dec_label_pc_11dc4thread-pre-split.loopexit ], [ %v3_11dcc, %.thread4 ]
  br label %dec_label_pc_11dc4

dec_label_pc_11dc4.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_11dc4

dec_label_pc_11dc4:                               ; preds = %dec_label_pc_11dc4.loopexit, %dec_label_pc_11dc4thread-pre-split
  %v0_11dd8.pr = phi i32 [ %v1_11dd039, %dec_label_pc_11dc4thread-pre-split ], [ %storemerge99, %dec_label_pc_11dc4.loopexit ]
  %v1_11dcc = phi i32 [ %v0_11dc4.pr, %dec_label_pc_11dc4thread-pre-split ], [ %v4_11db8, %dec_label_pc_11dc4.loopexit ]
  %v2_11dc4 = icmp slt i32 %v1_11dcc, 0
  br i1 %v2_11dc4, label %dec_label_pc_11dd8, label %bb79

bb79:                                             ; preds = %dec_label_pc_11dc4
  %v4_11dc8 = icmp ult i32 %v1_11dcc, %v1_11d98
  br i1 %v4_11dc8, label %.thread4, label %dec_label_pc_11dd8

.thread4:                                         ; preds = %bb79
  %v3_11dcc = mul i32 %v1_11dcc, 2
  %v2_11dd0 = add i32 %v0_11dd8.pr, 1
  br label %dec_label_pc_11dc4thread-pre-split

dec_label_pc_11dd8:                               ; preds = %bb79, %dec_label_pc_11dc4
  %v2_11dd8 = add i32 %v0_11dd8.pr, -3
  %v5_11ddc = icmp slt i32 %v0_11dd8.pr, 3
  br i1 %v5_11ddc, label %dec_label_pc_11e1c, label %dec_label_pc_11de0

dec_label_pc_11de0:                               ; preds = %dec_label_pc_11dd8, %bb83
  %v6_11e08 = phi i32 [ %v0_11e10, %bb83 ], [ %v2_11dd8, %dec_label_pc_11dd8 ]
  %v1_11de4 = phi i32 [ %v1_11dec.v6_11dec.v6_11df4.v6_11dfc, %bb83 ], [ %v1_11d98, %dec_label_pc_11dd8 ]
  %v3_11e0412 = phi i32 [ %v3_11e04, %bb83 ], [ %v1_11dcc, %dec_label_pc_11dd8 ]
  %v3_11de0 = icmp ult i32 %v1_11de4, %v3_11e0412
  %v3_11de4 = select i1 %v3_11de0, i32 0, i32 %v3_11e0412
  %v1_11dec = sub i32 %v1_11de4, %v3_11de4
  %v4_11de8 = udiv i32 %v3_11e0412, 2
  %v6_11de8 = icmp ult i32 %v1_11dec, %v4_11de8
  %v6_11dec = select i1 %v6_11de8, i32 0, i32 %v4_11de8
  %v1_11dec.v6_11dec = sub i32 %v1_11dec, %v6_11dec
  %.demorgan = and i1 %v3_11de0, %v6_11de8
  %v4_11df0 = udiv i32 %v3_11e0412, 4
  %v6_11df0 = icmp ult i32 %v1_11dec.v6_11dec, %v4_11df0
  %v6_11df4 = select i1 %v6_11df0, i32 0, i32 %v4_11df0
  %v1_11dec.v6_11dec.v6_11df4 = sub i32 %v1_11dec.v6_11dec, %v6_11df4
  %.demorgan71 = and i1 %.demorgan, %v6_11df0
  %v4_11df8 = udiv i32 %v3_11e0412, 8
  %v6_11df8 = icmp ult i32 %v1_11dec.v6_11dec.v6_11df4, %v4_11df8
  %v6_11dfc = select i1 %v6_11df8, i32 0, i32 %v4_11df8
  %v1_11dec.v6_11dec.v6_11df4.v6_11dfc = sub i32 %v1_11dec.v6_11dec.v6_11df4, %v6_11dfc
  %.demorgan72 = and i1 %.demorgan71, %v6_11df8
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_11de0
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_11de0, %bb80
  %v2_11e00 = add i32 %v1_11dec.v6_11dec.v6_11df4.v6_11dfc, -1
  %v4_11e00 = sub i32 0, %v1_11dec.v6_11dec.v6_11df4.v6_11dfc
  %v5_11e00 = and i32 %v1_11dec.v6_11dec.v6_11df4.v6_11dfc, %v4_11e00
  %v3_11e04 = udiv i32 %v3_11e0412, 16
  %v5_11e08 = icmp slt i32 %v1_11dec.v6_11dec.v6_11df4.v6_11dfc, 1
  br i1 %v5_11e08, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_11e08 = add i32 %v6_11e08, -4
  %v9_11e08 = sub i32 3, %v6_11e08
  %v10_11e08 = and i32 %v9_11e08, %v6_11e08
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_11e10 = phi i32 [ %v6_11e08, %bb81 ], [ %v7_11e08, %bb82 ]
  %v0_11e0c15.in = phi i32 [ %v2_11e00, %bb81 ], [ %v7_11e08, %bb82 ]
  %v1_11e0c14.in = phi i32 [ %v5_11e00, %bb81 ], [ %v10_11e08, %bb82 ]
  %v1_11e0c14 = icmp slt i32 %v1_11e0c14.in, 0
  %v0_11e0c15 = icmp slt i32 %v0_11e0c15.in, 0
  %v2_11e0c = xor i1 %v0_11e0c15, %v1_11e0c14
  br i1 %v2_11e0c, label %dec_label_pc_11e10, label %dec_label_pc_11de0

dec_label_pc_11e10:                               ; preds = %bb83
  %v1_11e10 = urem i32 %v0_11e10, 4
  %v2_11e10 = icmp eq i32 %v1_11e10, 0
  br i1 %v2_11e10, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_11e10
  %v3_11e14 = icmp eq i32 %v1_11dec.v6_11dec.v6_11df4.v6_11dfc, 0
  br i1 %v3_11e14, label %bb76, label %dec_label_pc_11e1c

dec_label_pc_11e1c:                               ; preds = %bb84, %dec_label_pc_11dd8
  %v0_11e30 = phi i32 [ %v3_11e04, %bb84 ], [ %v1_11dcc, %dec_label_pc_11dd8 ]
  %v1_11e2c = phi i32 [ %v1_11dec.v6_11dec.v6_11df4.v6_11dfc, %bb84 ], [ %v1_11d98, %dec_label_pc_11dd8 ]
  %v0_11e1c = phi i32 [ %v0_11e10, %bb84 ], [ %v2_11dd8, %dec_label_pc_11dd8 ]
  %v5_11e20 = icmp slt i32 %v0_11e1c, -2
  br i1 %v5_11e20, label %dec_label_pc_11e40, label %dec_label_pc_11e24

dec_label_pc_11e24:                               ; preds = %dec_label_pc_11e1c
  %v8_11e1c = icmp eq i32 %v0_11e1c, -2
  br i1 %v8_11e1c, label %dec_label_pc_11e34, label %dec_label_pc_11e28

dec_label_pc_11e28:                               ; preds = %dec_label_pc_11e24
  %v3_11e28 = icmp ult i32 %v1_11e2c, %v0_11e30
  br i1 %v3_11e28, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_11e28
  %v2_11e28 = sub i32 %v1_11e2c, %v0_11e30
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_11e28, %bb85
  %v0_11e3452 = phi i32 [ %v1_11e2c, %dec_label_pc_11e28 ], [ %v2_11e28, %bb85 ]
  %v3_11e30 = udiv i32 %v0_11e30, 2
  br label %dec_label_pc_11e34

dec_label_pc_11e34:                               ; preds = %dec_label_pc_11e24, %bb86
  %v0_11e3c = phi i32 [ %v0_11e30, %dec_label_pc_11e24 ], [ %v3_11e30, %bb86 ]
  %v1_11e38 = phi i32 [ %v1_11e2c, %dec_label_pc_11e24 ], [ %v0_11e3452, %bb86 ]
  %v3_11e34 = icmp ult i32 %v1_11e38, %v0_11e3c
  br i1 %v3_11e34, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_11e34
  %v2_11e34 = sub i32 %v1_11e38, %v0_11e3c
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_11e34, %bb87
  %v0_11e4055 = phi i32 [ %v1_11e38, %dec_label_pc_11e34 ], [ %v2_11e34, %bb87 ]
  %v3_11e3c = udiv i32 %v0_11e3c, 2
  br label %dec_label_pc_11e40

dec_label_pc_11e40:                               ; preds = %dec_label_pc_11e1c, %bb88
  %v2_11e44 = phi i32 [ %v0_11e30, %dec_label_pc_11e1c ], [ %v3_11e3c, %bb88 ]
  %v1_11e44 = phi i32 [ %v1_11e2c, %dec_label_pc_11e1c ], [ %v0_11e4055, %bb88 ]
  %v3_11e40 = icmp ult i32 %v1_11e44, %v2_11e44
  br i1 %v3_11e40, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_11e40
  %v2_11e40 = sub i32 %v1_11e44, %v2_11e44
  br label %bb76

dec_label_pc_11e4c:                               ; preds = %entry
  %v0_11e4c = load i32, i32* @lr, align 4
  %v0_11e50 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_11e4c)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11e44, { 1, 2, 0 }
  uselistorder i32 %v0_11e30, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11e10, { 1, 0, 2 }
  uselistorder i32 %v7_11e08, { 1, 0 }
  uselistorder i32 %v3_11e04, { 1, 0 }
  uselistorder i32 %v1_11dec.v6_11dec.v6_11df4.v6_11dfc, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_11df8, { 1, 0 }
  uselistorder i32 %v4_11df0, { 1, 0 }
  uselistorder i32 %v4_11de8, { 1, 0 }
  uselistorder i32 %v6_11e08, { 3, 0, 2, 1 }
  uselistorder i32 %v2_11dd8, { 1, 0 }
  uselistorder i32 %v1_11dcc, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_11db8, { 1, 0, 3, 2 }
  uselistorder i32 %v0_11dc4.pr3398, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11d98, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_11e40, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_11e34, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_11de0, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @__modsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v2_11e5c = icmp eq i32 %arg2, 0
  br i1 %v2_11e5c, label %dec_label_pc_11f30, label %dec_label_pc_11e64

dec_label_pc_11e64:                               ; preds = %entry
  %v1_11e5c = icmp slt i32 %arg2, 0
  br i1 %v1_11e5c, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_11e64
  %v2_11e64 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_11e64, %bb
  %v4_11e7c = phi i32 [ %arg2, %dec_label_pc_11e64 ], [ %v2_11e64, %bb ]
  %v0_11e68 = load i32, i32* @r0, align 4
  %v1_11e68 = icmp slt i32 %v0_11e68, 0
  br i1 %v1_11e68, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_11e6c = sub i32 0, %v0_11e68
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_11e74 = phi i32 [ %v0_11e68, %bb79 ], [ %v2_11e6c, %bb80 ]
  %v1_11e70 = add i32 %v4_11e7c, -1
  %v7_11e70 = icmp eq i32 %v4_11e7c, 1
  br i1 %v7_11e70, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_11e74 = icmp eq i32 %v1_11e74, %v4_11e7c
  br i1 %v10_11e74, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_11e74 = icmp ult i32 %v1_11e74, %v4_11e7c
  br i1 %v4_11e74, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_11e7c = and i32 %v1_11e70, %v4_11e7c
  %v8_11e7c = icmp eq i32 %v6_11e7c, 0
  br i1 %v8_11e7c, label %.thread72, label %dec_label_pc_11e8c.preheader

dec_label_pc_11e8c.preheader:                     ; preds = %bb84
  %v2_11e8c107 = icmp ugt i32 %v4_11e7c, 268435455
  br i1 %v2_11e8c107, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_11e8064 = phi i32 [ %v1_11e74, %bb84 ], [ 0, %.thread70 ]
  %v3_11e80 = and i32 %v1_11e8064, %v1_11e70
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_11e8c.preheader
  %v0_11ea0.pr35.lcssa = phi i32 [ %v4_11e7c, %dec_label_pc_11e8c.preheader ], [ %v4_11e94, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_11e8c.preheader ], [ %v2_11e989, %.thread2.thread7 ]
  br label %dec_label_pc_11ea0thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_11e8c.preheader, %.thread2.thread7
  %storemerge109 = phi i32 [ %v2_11e989, %.thread2.thread7 ], [ 0, %dec_label_pc_11e8c.preheader ]
  %v0_11ea0.pr35108 = phi i32 [ %v4_11e94, %.thread2.thread7 ], [ %v4_11e7c, %dec_label_pc_11e8c.preheader ]
  %v4_11e90 = icmp ult i32 %v0_11ea0.pr35108, %v1_11e74
  br i1 %v4_11e90, label %bb86, label %dec_label_pc_11ea0thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_11e94 = and i32 %v0_11ea0.pr35108, 268435456
  %v3_11e94 = icmp eq i32 %v2_11e94, 0
  %v4_11e94 = mul i32 %v0_11ea0.pr35108, 16
  br i1 %v3_11e94, label %.thread2.thread7, label %dec_label_pc_11ea0.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_11e989 = add i32 %storemerge109, 4
  %v2_11e8c = icmp ugt i32 %v4_11e94, 268435455
  br i1 %v2_11e8c, label %.thread1, label %bb85

dec_label_pc_11ea0thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_11ea0thread-pre-split.loopexit

dec_label_pc_11ea0thread-pre-split.loopexit:      ; preds = %dec_label_pc_11ea0thread-pre-split.loopexit.loopexit, %.thread1
  %v0_11ea0.pr35106 = phi i32 [ %v0_11ea0.pr35.lcssa, %.thread1 ], [ %v0_11ea0.pr35108, %dec_label_pc_11ea0thread-pre-split.loopexit.loopexit ]
  %storemerge103 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge109, %dec_label_pc_11ea0thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11ea0thread-pre-split

dec_label_pc_11ea0thread-pre-split:               ; preds = %.thread4, %dec_label_pc_11ea0thread-pre-split.loopexit
  %v1_11eac41 = phi i32 [ %storemerge103, %dec_label_pc_11ea0thread-pre-split.loopexit ], [ %v2_11eac, %.thread4 ]
  %v2_11ea436 = phi i32 [ %v1_11e74, %dec_label_pc_11ea0thread-pre-split.loopexit ], [ %v2_11ea4, %.thread4 ]
  %v0_11ea0.pr = phi i32 [ %v0_11ea0.pr35106, %dec_label_pc_11ea0thread-pre-split.loopexit ], [ %v3_11ea8, %.thread4 ]
  br label %dec_label_pc_11ea0

dec_label_pc_11ea0.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_11ea0

dec_label_pc_11ea0:                               ; preds = %dec_label_pc_11ea0.loopexit, %dec_label_pc_11ea0thread-pre-split
  %v0_11eb4.pr = phi i32 [ %v1_11eac41, %dec_label_pc_11ea0thread-pre-split ], [ %storemerge109, %dec_label_pc_11ea0.loopexit ]
  %v2_11ea4 = phi i32 [ %v2_11ea436, %dec_label_pc_11ea0thread-pre-split ], [ %v1_11e74, %dec_label_pc_11ea0.loopexit ]
  %v1_11ea8 = phi i32 [ %v0_11ea0.pr, %dec_label_pc_11ea0thread-pre-split ], [ %v4_11e94, %dec_label_pc_11ea0.loopexit ]
  %v2_11ea0 = icmp slt i32 %v1_11ea8, 0
  br i1 %v2_11ea0, label %dec_label_pc_11eb4, label %bb87

bb87:                                             ; preds = %dec_label_pc_11ea0
  %v4_11ea4 = icmp ult i32 %v1_11ea8, %v2_11ea4
  br i1 %v4_11ea4, label %.thread4, label %dec_label_pc_11eb4

.thread4:                                         ; preds = %bb87
  %v3_11ea8 = mul i32 %v1_11ea8, 2
  %v2_11eac = add i32 %v0_11eb4.pr, 1
  br label %dec_label_pc_11ea0thread-pre-split

dec_label_pc_11eb4:                               ; preds = %bb87, %dec_label_pc_11ea0
  %v2_11eb4 = add i32 %v0_11eb4.pr, -3
  %v5_11eb8 = icmp slt i32 %v0_11eb4.pr, 3
  br i1 %v5_11eb8, label %dec_label_pc_11ef8, label %dec_label_pc_11ebc

dec_label_pc_11ebc:                               ; preds = %dec_label_pc_11eb4, %bb91
  %v6_11ee4 = phi i32 [ %v0_11eec, %bb91 ], [ %v2_11eb4, %dec_label_pc_11eb4 ]
  %v1_11ec0 = phi i32 [ %v1_11ec8.v6_11ec8.v6_11ed0.v6_11ed8, %bb91 ], [ %v2_11ea4, %dec_label_pc_11eb4 ]
  %v3_11ee010 = phi i32 [ %v3_11ee0, %bb91 ], [ %v1_11ea8, %dec_label_pc_11eb4 ]
  %v3_11ebc = icmp ult i32 %v1_11ec0, %v3_11ee010
  %v3_11ec0 = select i1 %v3_11ebc, i32 0, i32 %v3_11ee010
  %v1_11ec8 = sub i32 %v1_11ec0, %v3_11ec0
  %v4_11ec4 = udiv i32 %v3_11ee010, 2
  %v6_11ec4 = icmp ult i32 %v1_11ec8, %v4_11ec4
  %v6_11ec8 = select i1 %v6_11ec4, i32 0, i32 %v4_11ec4
  %v1_11ec8.v6_11ec8 = sub i32 %v1_11ec8, %v6_11ec8
  %.demorgan = and i1 %v3_11ebc, %v6_11ec4
  %v4_11ecc = udiv i32 %v3_11ee010, 4
  %v6_11ecc = icmp ult i32 %v1_11ec8.v6_11ec8, %v4_11ecc
  %v6_11ed0 = select i1 %v6_11ecc, i32 0, i32 %v4_11ecc
  %v1_11ec8.v6_11ec8.v6_11ed0 = sub i32 %v1_11ec8.v6_11ec8, %v6_11ed0
  %.demorgan76 = and i1 %.demorgan, %v6_11ecc
  %v4_11ed4 = udiv i32 %v3_11ee010, 8
  %v6_11ed4 = icmp ult i32 %v1_11ec8.v6_11ec8.v6_11ed0, %v4_11ed4
  %v6_11ed8 = select i1 %v6_11ed4, i32 0, i32 %v4_11ed4
  %v1_11ec8.v6_11ec8.v6_11ed0.v6_11ed8 = sub i32 %v1_11ec8.v6_11ec8.v6_11ed0, %v6_11ed8
  %.demorgan77 = and i1 %.demorgan76, %v6_11ed4
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_11ebc
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_11ebc, %bb88
  %v2_11edc = add i32 %v1_11ec8.v6_11ec8.v6_11ed0.v6_11ed8, -1
  %v4_11edc = sub i32 0, %v1_11ec8.v6_11ec8.v6_11ed0.v6_11ed8
  %v5_11edc = and i32 %v1_11ec8.v6_11ec8.v6_11ed0.v6_11ed8, %v4_11edc
  %v3_11ee0 = udiv i32 %v3_11ee010, 16
  %v5_11ee4 = icmp slt i32 %v1_11ec8.v6_11ec8.v6_11ed0.v6_11ed8, 1
  br i1 %v5_11ee4, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_11ee4 = add i32 %v6_11ee4, -4
  %v9_11ee4 = sub i32 3, %v6_11ee4
  %v10_11ee4 = and i32 %v9_11ee4, %v6_11ee4
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_11eec = phi i32 [ %v6_11ee4, %bb89 ], [ %v7_11ee4, %bb90 ]
  %v0_11ee813.in = phi i32 [ %v2_11edc, %bb89 ], [ %v7_11ee4, %bb90 ]
  %v1_11ee812.in = phi i32 [ %v5_11edc, %bb89 ], [ %v10_11ee4, %bb90 ]
  %v1_11ee812 = icmp slt i32 %v1_11ee812.in, 0
  %v0_11ee813 = icmp slt i32 %v0_11ee813.in, 0
  %v2_11ee8 = xor i1 %v0_11ee813, %v1_11ee812
  br i1 %v2_11ee8, label %dec_label_pc_11eec, label %dec_label_pc_11ebc

dec_label_pc_11eec:                               ; preds = %bb91
  %v1_11eec = urem i32 %v0_11eec, 4
  %v2_11eec = icmp eq i32 %v1_11eec, 0
  br i1 %v2_11eec, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_11eec
  %v3_11ef0 = icmp eq i32 %v1_11ec8.v6_11ec8.v6_11ed0.v6_11ed8, 0
  br i1 %v3_11ef0, label %.thread6, label %dec_label_pc_11ef8

dec_label_pc_11ef8:                               ; preds = %bb92, %dec_label_pc_11eb4
  %v0_11f0c = phi i32 [ %v3_11ee0, %bb92 ], [ %v1_11ea8, %dec_label_pc_11eb4 ]
  %v1_11f08 = phi i32 [ %v1_11ec8.v6_11ec8.v6_11ed0.v6_11ed8, %bb92 ], [ %v2_11ea4, %dec_label_pc_11eb4 ]
  %v0_11ef8 = phi i32 [ %v0_11eec, %bb92 ], [ %v2_11eb4, %dec_label_pc_11eb4 ]
  %v5_11efc = icmp slt i32 %v0_11ef8, -2
  br i1 %v5_11efc, label %dec_label_pc_11f1c, label %dec_label_pc_11f00

dec_label_pc_11f00:                               ; preds = %dec_label_pc_11ef8
  %v8_11ef8 = icmp eq i32 %v0_11ef8, -2
  br i1 %v8_11ef8, label %dec_label_pc_11f10, label %dec_label_pc_11f04

dec_label_pc_11f04:                               ; preds = %dec_label_pc_11f00
  %v3_11f04 = icmp ult i32 %v1_11f08, %v0_11f0c
  br i1 %v3_11f04, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_11f04
  %v2_11f04 = sub i32 %v1_11f08, %v0_11f0c
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_11f04, %bb93
  %v0_11f1054 = phi i32 [ %v1_11f08, %dec_label_pc_11f04 ], [ %v2_11f04, %bb93 ]
  %v3_11f0c = udiv i32 %v0_11f0c, 2
  br label %dec_label_pc_11f10

dec_label_pc_11f10:                               ; preds = %dec_label_pc_11f00, %bb94
  %v0_11f18 = phi i32 [ %v0_11f0c, %dec_label_pc_11f00 ], [ %v3_11f0c, %bb94 ]
  %v1_11f14 = phi i32 [ %v1_11f08, %dec_label_pc_11f00 ], [ %v0_11f1054, %bb94 ]
  %v3_11f10 = icmp ult i32 %v1_11f14, %v0_11f18
  br i1 %v3_11f10, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_11f10
  %v2_11f10 = sub i32 %v1_11f14, %v0_11f18
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_11f10, %bb95
  %v0_11f1c57 = phi i32 [ %v1_11f14, %dec_label_pc_11f10 ], [ %v2_11f10, %bb95 ]
  %v3_11f18 = udiv i32 %v0_11f18, 2
  br label %dec_label_pc_11f1c

dec_label_pc_11f1c:                               ; preds = %dec_label_pc_11ef8, %bb96
  %v2_11f20 = phi i32 [ %v0_11f0c, %dec_label_pc_11ef8 ], [ %v3_11f18, %bb96 ]
  %v1_11f20 = phi i32 [ %v1_11f08, %dec_label_pc_11ef8 ], [ %v0_11f1c57, %bb96 ]
  %v3_11f1c = icmp ult i32 %v1_11f20, %v2_11f20
  br i1 %v3_11f1c, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_11f1c
  %v2_11f1c = sub i32 %v1_11f20, %v2_11f20
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_11f1c, %bb83, %.thread72, %dec_label_pc_11eec, %bb92, %bb97
  %v1_11f28 = phi i32 [ %v1_11ec8.v6_11ec8.v6_11ed0.v6_11ed8, %dec_label_pc_11eec ], [ 0, %bb92 ], [ %v1_11f20, %dec_label_pc_11f1c ], [ %v2_11f1c, %bb97 ], [ %v3_11e80, %.thread72 ], [ %v1_11e74, %bb83 ]
  br i1 %v1_11e68, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_11f28 = sub i32 0, %v1_11f28
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_11f2c = phi i32 [ %v1_11f28, %.thread6 ], [ %v2_11f28, %bb98 ]
  ret i32 %v1_11f2c

dec_label_pc_11f30:                               ; preds = %entry
  %v0_11f30 = load i32, i32* @lr, align 4
  %v0_11f34 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_11f30)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_11f0c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11eec, { 1, 0, 2 }
  uselistorder i32 %v7_11ee4, { 1, 0 }
  uselistorder i32 %v3_11ee0, { 1, 0 }
  uselistorder i32 %v1_11ec8.v6_11ec8.v6_11ed0.v6_11ed8, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_11ed4, { 1, 0 }
  uselistorder i32 %v4_11ecc, { 1, 0 }
  uselistorder i32 %v4_11ec4, { 1, 0 }
  uselistorder i32 %v6_11ee4, { 3, 0, 2, 1 }
  uselistorder i32 %v2_11eb4, { 1, 0 }
  uselistorder i32 %v1_11ea8, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_11ea4, { 1, 0, 3, 2 }
  uselistorder i32 %v4_11e94, { 1, 0, 3, 2 }
  uselistorder i32 %v0_11ea0.pr35108, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11e74, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_11e7c, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @__aeabi_ldiv0, { 2, 1, 0 }
  uselistorder i32* @lr, { 4, 5, 6, 2, 0, 3, 1 }
  uselistorder i32 -2, { 0, 12, 1, 13, 2, 3, 8, 10, 9, 7, 6, 5, 4, 14, 15, 16, 17, 11 }
  uselistorder i32 8, { 7, 8, 33, 16, 9, 10, 15, 11, 18, 39, 19, 12, 13, 14, 34, 24, 35, 25, 36, 26, 37, 27, 38, 17, 40, 41, 42, 43, 45, 28, 46, 29, 47, 48, 44, 49, 50, 51, 3, 52, 53, 54, 4, 55, 56, 57, 58, 59, 60, 61, 5, 62, 63, 64, 65, 66, 67, 68, 6, 72, 20, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 21, 91, 22, 92, 23, 93, 30, 94, 0, 1, 32, 69, 70, 31, 71, 2 }
  uselistorder i32 3, { 60, 21, 61, 22, 145, 62, 38, 23, 25, 63, 41, 64, 2, 65, 66, 67, 68, 39, 4, 69, 70, 71, 1, 24, 72, 42, 73, 40, 74, 43, 26, 44, 45, 46, 47, 48, 0, 75, 76, 77, 78, 79, 80, 81, 6, 5, 49, 82, 27, 83, 84, 85, 86, 87, 8, 7, 50, 88, 28, 89, 90, 91, 92, 51, 93, 10, 9, 30, 94, 29, 95, 96, 97, 98, 52, 99, 12, 11, 32, 100, 31, 101, 53, 103, 104, 105, 106, 107, 108, 54, 109, 55, 110, 33, 111, 112, 113, 114, 115, 14, 13, 56, 34, 116, 117, 118, 119, 120, 121, 16, 15, 57, 122, 35, 123, 124, 125, 126, 127, 128, 129, 18, 17, 58, 130, 36, 131, 132, 133, 134, 135, 136, 137, 20, 19, 59, 138, 37, 139, 140, 141, 143, 144, 142, 3, 102 }
  uselistorder i32 2, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 123, 13, 14, 15, 16, 17, 71, 72, 52, 53, 73, 140, 74, 77, 128, 78, 129, 76, 130, 134, 63, 125, 64, 126, 65, 127, 66, 131, 67, 132, 68, 133, 69, 139, 135, 136, 137, 138, 59, 79, 141, 18, 19, 142, 143, 80, 144, 55, 124, 51, 145, 75, 146, 20, 81, 229, 83, 147, 85, 148, 84, 149, 82, 86, 150, 21, 22, 87, 151, 60, 88, 89, 90, 91, 61, 93, 94, 92, 54, 58, 152, 153, 154, 216, 217, 155, 156, 157, 158, 159, 160, 0, 23, 24, 25, 26, 27, 28, 95, 161, 70, 162, 163, 164, 165, 166, 1, 29, 30, 31, 32, 33, 34, 97, 96, 167, 168, 35, 169, 170, 99, 172, 56, 171, 47, 48, 2, 36, 37, 38, 39, 40, 100, 173, 98, 174, 175, 41, 176, 177, 102, 179, 57, 178, 49, 50, 3, 42, 43, 44, 45, 46, 103, 180, 101, 181, 183, 184, 185, 186, 187, 188, 189, 105, 190, 104, 191, 192, 193, 194, 195, 107, 106, 196, 197, 198, 199, 200, 201, 202, 203, 109, 204, 108, 205, 206, 207, 208, 111, 209, 112, 210, 211, 212, 213, 113, 214, 110, 215, 218, 219, 220, 221, 222, 223, 115, 224, 114, 225, 226, 116, 117, 118, 227, 230, 119, 120, 121, 231, 228, 122, 62, 182 }
  uselistorder i32 4, { 6, 7, 43, 8, 9, 44, 330, 331, 138, 10, 11, 70, 52, 254, 244, 39, 167, 168, 169, 159, 160, 170, 171, 148, 149, 73, 139, 140, 141, 74, 142, 75, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 72, 162, 163, 164, 161, 45, 172, 53, 76, 77, 12, 173, 13, 174, 175, 14, 15, 176, 177, 34, 178, 35, 165, 71, 166, 183, 78, 185, 79, 186, 80, 187, 188, 184, 179, 81, 180, 181, 182, 321, 189, 42, 41, 40, 190, 82, 16, 17, 18, 19, 20, 191, 36, 192, 37, 193, 194, 195, 0, 83, 196, 197, 97, 198, 199, 200, 201, 98, 99, 2, 202, 84, 203, 54, 204, 205, 206, 100, 207, 208, 101, 102, 3, 46, 209, 55, 210, 56, 211, 212, 103, 213, 214, 215, 216, 217, 104, 105, 218, 219, 85, 220, 4, 47, 221, 57, 222, 86, 223, 224, 106, 225, 226, 227, 228, 229, 107, 108, 230, 231, 87, 232, 5, 48, 233, 58, 234, 88, 235, 21, 245, 246, 109, 247, 248, 249, 110, 111, 90, 250, 89, 252, 59, 253, 255, 112, 256, 257, 113, 114, 258, 60, 259, 61, 260, 261, 262, 263, 115, 264, 265, 266, 116, 117, 91, 267, 49, 62, 268, 63, 269, 270, 271, 272, 273, 274, 92, 275, 93, 276, 118, 277, 278, 279, 119, 120, 94, 280, 50, 281, 64, 282, 65, 283, 284, 285, 121, 122, 286, 123, 287, 288, 124, 125, 51, 289, 66, 290, 67, 291, 292, 293, 294, 295, 95, 296, 68, 297, 322, 323, 324, 325, 96, 327, 69, 328, 126, 298, 299, 22, 127, 300, 301, 23, 128, 302, 303, 24, 129, 304, 305, 25, 130, 306, 307, 26, 131, 308, 309, 27, 310, 132, 311, 312, 28, 133, 313, 314, 29, 134, 315, 316, 30, 135, 317, 318, 31, 136, 319, 320, 32, 326, 236, 237, 238, 239, 33, 240, 241, 1, 242, 137, 243, 251, 329, 38 }
  uselistorder i32 16, { 5, 6, 7, 8, 9, 25, 10, 11, 0, 12, 13, 42, 66, 30, 67, 31, 43, 64, 65, 68, 69, 70, 26, 63, 71, 14, 15, 24, 60, 16, 72, 17, 44, 32, 73, 33, 45, 46, 47, 74, 75, 49, 76, 77, 78, 79, 80, 1, 48, 81, 82, 83, 51, 84, 85, 86, 87, 88, 2, 50, 89, 52, 90, 91, 92, 18, 93, 19, 94, 61, 20, 53, 54, 95, 96, 3, 35, 97, 34, 98, 55, 99, 100, 101, 21, 102, 22, 103, 62, 23, 56, 57, 104, 105, 4, 37, 106, 36, 107, 27, 109, 110, 111, 112, 58, 113, 114, 115, 116, 117, 118, 119, 28, 120, 121, 122, 123, 125, 124, 126, 127, 128, 129, 130, 131, 132, 29, 133, 134, 135, 136, 137, 139, 138, 140, 141, 142, 143, 144, 145, 59, 146, 147, 148, 39, 149, 38, 41, 150, 40, 108 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_11f1c, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_11f10, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_11ebc, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @__aeabi_ldiv0() local_unnamed_addr {
entry:
  %v1_11f40 = load i32, i32* @r0, align 4
  ret i32 %v1_11f40
}

define i32 @function_11f44(i32 %arg1) local_unnamed_addr {
dec_label_pc_11f44:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11f48 = load i32, i32* @global_var_1a1f0.422, align 4
  %v2_11f4c = icmp eq i32 %v3_11f48, -1
  %v3_11f50 = load i32, i32* @r4, align 4
  store i32 %v3_11f50, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1a1f0.422 to i32), i32* %r4.global-to-local, align 4
  br i1 %v2_11f4c, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_11f44
  store i32 %v3_11f50, i32* %r4.global-to-local, align 4
  %v9_11f58 = load i32, i32* @r0, align 4
  ret i32 %v9_11f58

.preheader:                                       ; preds = %dec_label_pc_11f44, %.preheader
  %v0_11f60 = phi i32 [ %v3_11f64, %.preheader ], [ %v3_11f48, %dec_label_pc_11f44 ]
  call void @__pseudo_branch(i32 %v0_11f60)
  %v0_11f64 = load i32, i32* %r4.global-to-local, align 4
  %v1_11f64 = add i32 %v0_11f64, -4
  %v2_11f64 = inttoptr i32 %v1_11f64 to i32*
  %v3_11f64 = load i32, i32* %v2_11f64, align 4
  store i32 %v1_11f64, i32* %r4.global-to-local, align 4
  %v3_11f68 = icmp eq i32 %v3_11f64, -1
  br i1 %v3_11f68, label %dec_label_pc_11f70, label %.preheader

dec_label_pc_11f70:                               ; preds = %.preheader
  %v2_11f70 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11f70, i32* %r4.global-to-local, align 4
  %v8_11f70 = load i32, i32* @r0, align 4
  ret i32 %v8_11f70

; uselistorder directives
  uselistorder i32 %v3_11f64, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 4, 0, 1, 3, 2 }
  uselistorder i32 -1, { 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0, 1, 2, 25, 28, 29, 3, 51, 52, 53, 161, 162, 54, 55, 56, 57, 58, 59, 60, 158, 159, 61, 62, 63, 64, 65, 66, 67, 68, 69, 156, 30, 157, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 160, 84, 4, 85, 86, 5, 87, 88, 89, 90, 91, 31, 163, 92, 93, 164, 94, 95, 6, 34, 165, 36, 166, 96, 35, 167, 7, 97, 98, 99, 37, 168, 8, 100, 101, 102, 103, 104, 14, 105, 106, 107, 9, 33, 108, 109, 110, 111, 112, 113, 114, 15, 115, 116, 117, 118, 119, 120, 16, 121, 122, 123, 17, 124, 125, 126, 18, 128, 127, 12, 129, 130, 19, 132, 131, 13, 133, 134, 20, 135, 136, 137, 138, 21, 32, 139, 140, 22, 141, 142, 143, 23, 144, 145, 146, 24, 147, 148, 149, 10, 26, 11, 27, 150, 151, 152, 153, 154, 155, 38, 39, 40 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_11f78() local_unnamed_addr {
dec_label_pc_11f78:
  %v5_11f7c = load i32, i32* @r0, align 4
  ret i32 %v5_11f7c

; uselistorder directives
  uselistorder i32* @r0, { 5, 8, 9, 12, 78, 13, 79, 14, 80, 16, 15, 10, 48, 0, 11, 49, 50, 2, 21, 22, 23, 26, 27, 28, 29, 30, 3, 24, 25, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 1, 58, 59, 60, 61, 62, 63, 64, 75, 76, 4, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 7, 6, 17, 18, 19, 20 }
}

define i32 @function_11f80() local_unnamed_addr {
entry:
  %v3_11f84 = load i32, i32* @r4, align 4
  %v0_11f8c = call i32 @function_8dac()
  call void @__pseudo_branch(i32 %v3_11f84)
  ret i32 %v0_11f8c

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 1, 6, 8, 9, 10, 2, 3, 4, 0, 5, 7 }
  uselistorder i32* @r4, { 20, 416, 112, 113, 114, 115, 48, 49, 325, 326, 327, 287, 288, 289, 21, 22, 23, 24, 50, 51, 25, 28, 29, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 52, 53, 38, 39, 54, 55, 56, 57, 58, 59, 40, 41, 42, 43, 44, 45, 46, 47, 62, 63, 64, 65, 66, 67, 68, 0, 69, 60, 61, 400, 401, 402, 403, 290, 291, 292, 293, 294, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 2, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 116, 117, 118, 1, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 3, 132, 4, 133, 5, 134, 6, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 7, 155, 8, 156, 9, 157, 10, 158, 159, 160, 11, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 12, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 13, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 14, 344, 15, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 16, 360, 17, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 18, 376, 19, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 404, 405, 406, 407, 408, 412, 413, 414, 398, 399, 409, 410, 411, 280, 278, 279, 281, 282, 283, 284, 285, 286, 415, 417 }
}

declare i8* @strcpy(i8*, i8*) local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @sigemptyset(%_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32* @memmove(i32*, i32*, i32) local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32* @memcpy(i32*, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32* @malloc(i32) local_unnamed_addr

declare i32 @sleep(i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @select(i32, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %timeval*) local_unnamed_addr

declare %dirent* @readdir(%__dirstream*) local_unnamed_addr

declare i32 @sigaddset(%_TYPEDEF_sigset_t*, i32) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare void @abort() local_unnamed_addr

declare i32* @calloc(i32, i32) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @inet_addr(i8*) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare void (i32)* @signal(i32, void (i32)*) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32* @realloc(i32*, i32) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @__uClibc_main() local_unnamed_addr

declare i32* @memset(i32*, i32, i32) local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare %__dirstream* @opendir(i8*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32* @__errno_location() local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @atoi(i8*) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @clock() local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @closedir(%__dirstream*) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare void @free(i32*) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

define i32 @__data_start(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_1a378 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1a378, label %bb, label %bb2

bb:                                               ; preds = %entry
  %v1_1a378 = load i32, i32* @sl, align 4
  store i32 %v1_1a378, i32* %arg2, align 4
  %v2_1a37c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb2

bb2:                                              ; preds = %entry, %bb
  %v2_1a37c = phi i32 [ %arg1, %entry ], [ %v2_1a37c.pre, %bb ]
  ret i32 %v2_1a37c

; uselistorder directives
  uselistorder i32 0, { 0, 744, 66, 745, 746, 181, 180, 420, 55, 56, 57, 58, 422, 421, 34, 33, 67, 747, 748, 749, 750, 752, 751, 1, 753, 754, 183, 182, 423, 59, 60, 61, 62, 425, 424, 36, 35, 32, 41, 755, 426, 2, 756, 757, 63, 758, 759, 760, 761, 762, 93, 427, 430, 428, 429, 763, 431, 75, 94, 544, 545, 64, 546, 547, 548, 435, 3, 186, 95, 96, 219, 37, 97, 4, 6, 5, 225, 54, 549, 550, 734, 733, 735, 736, 30, 98, 737, 101, 100, 99, 220, 221, 222, 103, 102, 226, 551, 552, 104, 703, 704, 76, 105, 553, 106, 473, 107, 678, 679, 108, 649, 650, 452, 109, 110, 479, 474, 68, 475, 476, 453, 454, 455, 456, 463, 446, 436, 231, 447, 448, 437, 233, 449, 450, 438, 232, 451, 469, 470, 457, 458, 459, 439, 230, 460, 461, 440, 229, 462, 464, 441, 228, 465, 472, 442, 227, 466, 471, 467, 38, 184, 185, 468, 432, 477, 234, 478, 188, 480, 235, 481, 484, 485, 112, 187, 482, 483, 236, 237, 486, 487, 488, 489, 443, 47, 238, 491, 492, 493, 494, 495, 496, 497, 498, 239, 499, 65, 500, 77, 501, 434, 502, 503, 504, 505, 506, 507, 433, 508, 509, 510, 111, 240, 241, 511, 514, 515, 516, 517, 518, 9, 113, 512, 114, 513, 7, 115, 490, 651, 652, 519, 520, 116, 521, 522, 523, 524, 525, 526, 527, 242, 48, 243, 528, 8, 529, 192, 530, 531, 244, 245, 532, 533, 246, 223, 120, 119, 444, 445, 224, 118, 117, 189, 191, 247, 534, 121, 122, 535, 536, 537, 538, 539, 540, 541, 542, 543, 123, 124, 248, 554, 555, 556, 557, 558, 71, 559, 561, 560, 69, 70, 125, 190, 249, 562, 193, 194, 195, 72, 126, 42, 127, 564, 565, 81, 78, 79, 80, 44, 563, 566, 567, 568, 569, 570, 571, 10, 11, 12, 13, 14, 572, 573, 128, 250, 574, 251, 575, 252, 576, 253, 577, 254, 578, 255, 579, 256, 580, 196, 581, 129, 130, 131, 583, 584, 582, 586, 587, 585, 15, 16, 17, 18, 19, 588, 132, 589, 590, 198, 591, 257, 592, 258, 593, 259, 594, 260, 595, 261, 596, 262, 597, 197, 598, 263, 599, 134, 133, 135, 601, 602, 600, 603, 604, 39, 264, 610, 606, 607, 608, 609, 49, 50, 20, 21, 22, 23, 24, 605, 136, 73, 611, 612, 203, 613, 202, 614, 201, 615, 200, 616, 199, 617, 265, 618, 266, 619, 138, 137, 139, 621, 622, 620, 623, 624, 40, 267, 630, 626, 627, 628, 629, 51, 52, 25, 26, 27, 28, 29, 625, 140, 74, 631, 632, 205, 633, 204, 634, 268, 635, 653, 85, 84, 82, 83, 654, 655, 43, 656, 657, 658, 659, 660, 141, 661, 662, 269, 663, 664, 665, 666, 145, 142, 143, 144, 667, 668, 669, 670, 270, 671, 672, 208, 674, 207, 675, 206, 676, 271, 677, 680, 681, 88, 86, 87, 45, 682, 683, 684, 685, 146, 686, 687, 272, 209, 688, 273, 689, 147, 150, 149, 148, 692, 693, 691, 690, 274, 695, 694, 696, 151, 697, 698, 212, 699, 211, 700, 210, 701, 275, 702, 152, 155, 154, 153, 707, 708, 706, 705, 276, 710, 709, 711, 712, 156, 215, 713, 214, 714, 213, 715, 277, 716, 717, 718, 719, 720, 92, 89, 90, 91, 46, 721, 722, 723, 157, 724, 158, 725, 726, 218, 727, 217, 728, 216, 729, 278, 730, 163, 280, 161, 162, 159, 160, 731, 165, 164, 281, 282, 166, 279, 171, 284, 169, 170, 167, 168, 738, 173, 172, 174, 283, 732, 739, 175, 740, 636, 176, 637, 638, 177, 639, 640, 178, 285, 641, 642, 31, 643, 644, 645, 646, 647, 286, 648, 179, 673, 743, 741, 53, 742, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775 }
  uselistorder i32* @sl, { 87, 2, 80, 81, 82, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83, 84, 85, 86, 36, 37, 38, 39, 40, 41 }
  uselistorder i1 false, { 0, 11, 1, 24, 15, 28, 25, 23, 26, 2, 3, 4, 5, 6, 14, 7, 13, 8, 12, 9, 10, 16, 17, 18, 27, 19, 20, 22, 21, 29 }
  uselistorder i1* @cpsr_z, { 5, 1, 2, 0, 3, 4 }
  uselistorder i32 1, { 61, 414, 30, 291, 728, 729, 292, 730, 731, 239, 732, 573, 574, 575, 250, 576, 417, 416, 415, 62, 70, 65, 66, 68, 67, 64, 63, 69, 0, 565, 566, 567, 568, 260, 646, 647, 261, 648, 419, 418, 234, 235, 577, 578, 579, 328, 420, 29, 28, 27, 25, 26, 719, 273, 274, 1, 2, 720, 527, 529, 528, 329, 580, 240, 233, 232, 690, 173, 581, 582, 583, 158, 157, 159, 649, 421, 71, 72, 73, 75, 76, 78, 77, 74, 675, 676, 422, 117, 116, 115, 114, 118, 119, 650, 651, 423, 145, 144, 143, 142, 146, 147, 511, 340, 512, 533, 341, 342, 518, 519, 524, 337, 505, 506, 339, 507, 508, 338, 509, 510, 513, 336, 514, 515, 335, 516, 517, 334, 520, 521, 333, 522, 523, 332, 525, 526, 534, 343, 255, 535, 344, 536, 538, 539, 537, 540, 345, 541, 504, 275, 544, 542, 346, 543, 330, 530, 331, 531, 293, 532, 546, 347, 547, 548, 286, 549, 550, 254, 276, 556, 557, 251, 348, 437, 436, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 425, 424, 8, 52, 50, 51, 57, 60, 53, 54, 56, 55, 59, 58, 551, 552, 349, 553, 554, 350, 555, 438, 89, 87, 88, 81, 80, 84, 86, 85, 83, 79, 82, 545, 351, 440, 439, 230, 231, 229, 722, 262, 721, 285, 441, 14, 15, 13, 11, 10, 17, 18, 9, 12, 16, 652, 443, 442, 35, 36, 34, 33, 32, 37, 444, 295, 558, 559, 294, 560, 352, 354, 353, 355, 561, 562, 356, 357, 358, 360, 359, 361, 362, 363, 455, 454, 453, 452, 451, 450, 449, 448, 447, 412, 446, 445, 19, 22, 20, 21, 24, 23, 252, 364, 296, 563, 365, 366, 456, 369, 368, 367, 564, 458, 457, 31, 370, 569, 279, 570, 571, 371, 241, 277, 572, 253, 372, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 196, 197, 199, 198, 589, 4, 584, 373, 585, 3, 586, 287, 587, 256, 257, 588, 590, 288, 591, 473, 472, 471, 408, 470, 409, 469, 212, 213, 699, 297, 700, 298, 701, 5, 702, 6, 7, 592, 593, 594, 595, 596, 597, 374, 598, 263, 375, 376, 599, 299, 600, 474, 204, 201, 200, 202, 203, 208, 209, 211, 210, 206, 207, 205, 601, 602, 280, 603, 604, 605, 377, 606, 264, 378, 301, 300, 379, 607, 380, 608, 475, 136, 139, 140, 141, 138, 137, 609, 610, 281, 611, 612, 613, 381, 614, 242, 243, 265, 382, 306, 305, 383, 615, 302, 616, 303, 617, 304, 618, 480, 479, 478, 477, 476, 129, 131, 133, 132, 134, 128, 130, 135, 619, 620, 282, 621, 622, 623, 384, 624, 244, 245, 266, 385, 314, 313, 386, 625, 312, 626, 311, 627, 307, 628, 308, 629, 309, 630, 387, 631, 310, 632, 485, 484, 483, 482, 481, 121, 123, 125, 124, 126, 120, 122, 127, 653, 654, 655, 656, 657, 658, 258, 259, 659, 660, 661, 662, 663, 664, 665, 666, 388, 667, 668, 389, 669, 670, 673, 671, 672, 488, 487, 486, 218, 216, 221, 219, 214, 217, 227, 228, 223, 220, 222, 225, 226, 215, 224, 677, 678, 679, 680, 681, 390, 267, 391, 490, 489, 49, 45, 41, 39, 40, 38, 47, 48, 42, 46, 43, 44, 682, 683, 684, 283, 685, 686, 687, 268, 392, 317, 316, 393, 688, 315, 689, 491, 108, 107, 106, 104, 103, 110, 111, 113, 112, 105, 109, 691, 692, 693, 284, 694, 695, 696, 269, 394, 320, 319, 395, 697, 318, 698, 496, 495, 494, 493, 492, 96, 95, 94, 93, 91, 90, 99, 100, 102, 101, 92, 98, 97, 703, 704, 705, 396, 706, 707, 708, 709, 710, 711, 397, 712, 270, 398, 322, 321, 399, 713, 497, 187, 186, 194, 185, 184, 191, 192, 193, 195, 190, 188, 189, 714, 289, 247, 715, 400, 717, 716, 246, 401, 324, 323, 410, 498, 169, 170, 172, 171, 723, 290, 249, 724, 402, 726, 725, 248, 403, 326, 325, 411, 499, 174, 175, 176, 177, 718, 327, 404, 500, 149, 148, 154, 152, 155, 151, 153, 156, 150, 727, 168, 633, 160, 634, 405, 637, 406, 638, 639, 635, 636, 640, 641, 642, 643, 271, 644, 272, 161, 165, 167, 162, 163, 164, 166, 645, 278, 407, 501, 181, 182, 180, 179, 178, 674, 183, 502, 503, 238, 237, 236, 413 }
  uselistorder label %bb2, { 1, 0 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare %sockaddr* @__decompiler_undefined_function_2() local_unnamed_addr

declare i8* @__decompiler_undefined_function_3() local_unnamed_addr

declare %timeval* @__decompiler_undefined_function_4() local_unnamed_addr

declare i32* @__decompiler_undefined_function_5() local_unnamed_addr

declare %_TYPEDEF_fd_set* @__decompiler_undefined_function_6() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
